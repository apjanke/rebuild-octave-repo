# HG changeset patch
# User Daniel Kraft <d@domob.eu>
# Date 1304721510 14400
#      Fri May 06 18:38:30 2011 -0400
# Node ID 332bb3b9600e6585c1582e30e398d18cd04a3ab3
# Parent  b7f16997df4d2f623700c6779df86a60473c1dec
interpreter: Add new attribute 'complex' in whos (bug #32053)

* variables.cc (symbol_info_list::symbol_info::is_complex):
New attribute.
(symbol_info_list::symbol_info::display_line): Print complex attribute.
(symbol_info_list::parse_whos_line_format): Reserve space for attribute
column.
(Fwhos): Document new complex attribute.

diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1038,21 +1038,22 @@ symbol_info_list
 {
 private:
   struct symbol_info
   {
     symbol_info (const symbol_table::symbol_record& sr,
                  const std::string& expr_str = std::string (),
                  const octave_value& expr_val = octave_value ())
       : name (expr_str.empty () ? sr.name () : expr_str),
+        varval (expr_val.is_undefined () ? sr.varval () : expr_val),
         is_automatic (sr.is_automatic ()),
+        is_complex (varval.is_complex_type ()),
         is_formal (sr.is_formal ()),
         is_global (sr.is_global ()),
-        is_persistent (sr.is_persistent ()),
-        varval (expr_val.is_undefined () ? sr.varval () : expr_val)
+        is_persistent (sr.is_persistent ())
     { }
 
     void display_line (std::ostream& os,
                        const std::list<whos_parameter>& params) const
     {
       std::string dims_str = get_dims_str (varval);
 
       std::list<whos_parameter>::const_iterator i = params.begin ();
@@ -1112,23 +1113,24 @@ private:
                   os << std::setiosflags (std::ios::right)
                      << std::setw (param.parameter_length);
                 }
 
               switch (param.command)
                 {
                 case 'a':
                   {
-                    char tmp[5];
+                    char tmp[6];
 
                     tmp[0] = (is_automatic ? 'a' : ' ');
-                    tmp[1] = (is_formal ? 'f' : ' ');
-                    tmp[2] = (is_global ? 'g' : ' ');
-                    tmp[3] = (is_persistent ? 'p' : ' ');
-                    tmp[4] = 0;
+                    tmp[1] = (is_complex ? 'c' : ' ');
+                    tmp[2] = (is_formal ? 'f' : ' ');
+                    tmp[3] = (is_global ? 'g' : ' ');
+                    tmp[4] = (is_persistent ? 'p' : ' ');
+                    tmp[5] = 0;
 
                     os << tmp;
                   }
                   break;
 
                 case 'b':
                   os << varval.byte_size ();
                   break;
@@ -1167,21 +1169,22 @@ private:
             {
               os << param.text;
               i++;
             }
         }
     }
 
     std::string name;
+    octave_value varval;
     bool is_automatic;
+    bool is_complex;
     bool is_formal;
     bool is_global;
     bool is_persistent;
-    octave_value varval;
   };
 
 public:
   symbol_info_list (void) : lst () { }
 
   symbol_info_list (const symbol_info_list& sil) : lst (sil.lst) { }
 
   symbol_info_list& operator = (const symbol_info_list& sil)
@@ -1328,16 +1331,19 @@ public:
     param_names(pos_e) = "Elements";
     param_names(pos_n) = "Name";
     param_names(pos_s) = "Size";
     param_names(pos_t) = "Type";
 
     for (size_t i = 0; i < param_string.length (); i++)
       param_length(i) = param_names(i) . length ();
 
+    // The attribute column needs size 5.
+    param_length(pos_a) = 5;
+
     // Calculating necessary spacing for name column,
     // bytes column, elements column and class column
 
     for (std::list<symbol_info>::const_iterator p = lst.begin ();
          p != lst.end (); p++)
       {
         std::stringstream ss1, ss2;
         std::string str;
@@ -1793,16 +1799,19 @@ Attributes of the listed variable.  Poss
 @table @asis\n\
 @item blank\n\
 Variable in local scope\n\
 \n\
 @item @code{a}\n\
 Automatic variable.  An automatic variable is one created by the\n\
 interpreter, for example @code{argn}.\n\
 \n\
+@item @code{c}\n\
+Variable of complex type.\n\
+\n\
 @item @code{f}\n\
 Formal parameter (function argument).\n\
 \n\
 @item @code{g}\n\
 Variable with global scope.\n\
 \n\
 @item @code{p}\n\
 Persistent variable.\n\
