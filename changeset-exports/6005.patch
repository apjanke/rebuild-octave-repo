# HG changeset patch
# User jwe
# Date 1159306696 0
#      Tue Sep 26 21:38:16 2006 +0000
# Node ID b4351cfb56592acba0835a8b377125a7b1c32906
# Parent  01556febbaaf551ae7fb4c1658bbeba22014e6bb
[project @ 2006-09-26 21:38:16 by jwe]

diff --git a/src/DLD-FUNCTIONS/find.cc b/src/DLD-FUNCTIONS/find.cc
--- a/src/DLD-FUNCTIONS/find.cc
+++ b/src/DLD-FUNCTIONS/find.cc
@@ -113,40 +113,38 @@ find_nonzero_elem_idx (const T& nda, int
       octave_idx_type nr = nda.rows ();
 
       octave_idx_type i = 0;
       octave_idx_type j = 0;
 
       // Search for elements to return.  Only search the region where
       // there are elements to be found using the count that we want
       // to find.
+
+      // For compatibility, all N-d arrays are handled as if they are
+      // 2-d, with the number of columns equal to "prod (dims (2:end))".
+
       for (k = start_el; k < end_el; k++)
 	{
 	  OCTAVE_QUIT;
 
 	  if (nda(k) != 0.0)
 	    {
 	      idx(count) = k + 1;
 
-	      i_idx(count) = i + 1;
-	      j_idx(count) = j + 1;
+	      octave_idx_type xr = k % nr;
+	      i_idx(count) = xr + 1;
+	      j_idx(count) = (k - xr) / nr + 1;
 
 	      val(count) = nda(k);
 
 	      count++;
 	    }
 
 	  i++;
-
-	  if (i == nr)
-	    {
-	      i = 0;
-
-	      j++;
-	    }
 	}
     }
   else if (scalar_arg)
     {
       idx.resize (0, 0);
 
       i_idx.resize (0, 0);
       j_idx.resize (0, 0);
diff --git a/test/test_matrix.m b/test/test_matrix.m
--- a/test/test_matrix.m
+++ b/test/test_matrix.m
@@ -58,19 +58,16 @@
 %!test
 %! [i, j, v] = find ([0, 0, 2; 0, 3, 0; -1, 0, 0]);
 %! 
 %! assert(i == [3; 2; 1] && j == [1; 2; 3] && v == [-1; 3; 2]);
 
 %% test/octave.test/matrix/find-3.m
 %!error <Invalid call to find.*> find ();
 
-%% test/octave.test/matrix/find-4.m
-%!error <Invalid call to find.*> find (1, 2);
-
 %% test/octave.test/matrix/fliplr-1.m
 %!assert((fliplr ([1, 2; 3, 4]) == [2, 1; 4, 3]
 %! && fliplr ([1, 2; 3, 4; 5, 6]) == [2, 1; 4, 3; 6, 5]
 %! && fliplr ([1, 2, 3; 4, 5, 6]) == [3, 2, 1; 6, 5, 4]));
 
 %% test/octave.test/matrix/fliplr-2.m
 %!error <usage.*fliplr> fliplr();
 
