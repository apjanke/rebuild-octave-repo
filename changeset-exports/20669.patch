# HG changeset patch
# User Amro <amroamroamro@gmail.com>
# Date 1446207668 0
#      Fri Oct 30 12:21:08 2015 +0000
# Node ID 0ec7ce024c92bdb2b83d007d900285447af7dd6c
# Parent  8742e0b1cc49efabef8bae7cfe047d65f49ce634
validateattributes: add diag attribute (bug #46328)

diff --git a/scripts/general/validateattributes.m b/scripts/general/validateattributes.m
--- a/scripts/general/validateattributes.m
+++ b/scripts/general/validateattributes.m
@@ -79,16 +79,19 @@
 ## All values are either 1 or 0.
 ##
 ## @item @qcode{"column"}
 ## Values are arranged in a single column.
 ##
 ## @item @qcode{"decreasing"}
 ## No value is @var{NaN}, and each is less than the preceding one.
 ##
+## @item @qcode{"diag"}
+## Value is a diagonal matrix.
+##
 ## @item @qcode{"even"}
 ## All values are even numbers.
 ##
 ## @item @qcode{"finite"}
 ## All values are finite.
 ##
 ## @item @qcode{"increasing"}
 ## No value is @var{NaN}, and each is greater than the preceding one.
@@ -244,16 +247,17 @@ function validateattributes (A, cls, att
     switch (tolower (attr{idx++}))
       case "2d",            problem = ndims (A) != 2;
       case "3d",            problem = ndims (A) > 3;
       case "column",        problem = ! iscolumn (A);
       case "row",           problem = ! isrow (A);
       case "scalar",        problem = ! isscalar (A);
       case "vector",        problem = ! isvector (A);
       case "square",        problem = ! issquare (A);
+      case "diag",          problem = ! isdiag (A);
       case "nonempty",      problem = isempty (A);
       case "nonsparse",     problem = issparse (A);
       case "binary",        problem = ! islogical (A) && ...
                                       any ((A(:) != 1) & (A(:) != 0));
       case "even",          problem = any (rem (A(:), 2) != 0);
       case "odd",           problem = any (mod (A(:), 2) != 1);
       case "integer",       problem = ! isinteger (A) && ...
                                       any (ceil (A(:)) != A(:));
@@ -379,16 +383,18 @@ endfunction
 %!error <elements> validateattributes (ones (6, 3), {}, {"numel", 12})
 %!error <columns> validateattributes (ones (6, 2), {}, {"ncols", 3})
 %!error <rows> validateattributes (ones (6, 2), {}, {"nrows", 3})
 %!error <dimensions> validateattributes (ones (6, 2, 6, 3), {}, {"ndims", 3})
 %!error <greater than> validateattributes ([6 7 8 5], {}, {">", 5})
 %!error <greater than> validateattributes ([6 7 8 5], {}, {">=", 6})
 %!error <less than> validateattributes ([6 7 8 5], {}, {"<", 8})
 %!error <less than> validateattributes ([6 7 8 5], {}, {"<=", 7})
+%!error <diag> validateattributes ([0 0 0; 0 0 0; 1 0 0], {}, {"diag"})
+%!error <diag> validateattributes (repmat (eye (3), [1 1 3]), {}, {"diag"})
 
 %!test
 %! validateattributes (rand (5), {"numeric"}, {})
 %! validateattributes (rand (5), {"float"}, {})
 %! validateattributes (rand (5), {"double"}, {})
 %! validateattributes ("text", {"char"}, {})
 %! validateattributes (rand (5), {}, {"2d"})
 %! validateattributes (rand (5), {}, {"3d"})
@@ -423,11 +429,14 @@ endfunction
 %! validateattributes (rand (6, 2), {}, {"numel", 12})
 %! validateattributes (rand (6, 2), {}, {"ncols", 2})
 %! validateattributes (rand (6, 2), {}, {"nrows", 6})
 %! validateattributes (rand (6, 2, 4, 5), {}, {"ndims", 4})
 %! validateattributes ([4 5 6 7], {}, {">", 3})
 %! validateattributes ([4 5 6 7], {}, {">=", 4})
 %! validateattributes ([4 5 6 7], {}, {"<", 8})
 %! validateattributes ([4 5 6 7], {}, {"<=", 7})
+%! validateattributes (eye (3), {}, {"diag"})
+%! validateattributes ([1 0 0; 0 1 0; 0 0 1], {}, {"diag"})
+%! validateattributes (zeros (3), {}, {"diag"})
 
 %!test
 %! validateattributes ([0 1 0 1], {"double", "uint8"}, {"binary", "size", [NaN 4], "nonnan"})
