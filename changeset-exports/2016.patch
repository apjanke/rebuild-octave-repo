# HG changeset patch
# User jwe
# Date 827488143 0
#      Fri Mar 22 09:49:03 1996 +0000
# Node ID 6f3428b0d2c7e8c0ee08701b9146eec34cd121d2
# Parent  9e4e71b27b3a8b0df9840990002d6fb6f2258758
[project @ 1996-03-22 09:48:38 by jwe]

diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -43,16 +43,44 @@ Software Foundation, 59 Temple Place - S
 
 // Nonzero means we have already printed a message for this series of
 // SIGPIPES.  We assume that the writer will eventually give up.
 int pipe_handler_error_count = 0;
 
 // Nonzero means we can be interrupted.
 int can_interrupt = 0;
 
+// Allow us to save the signal mask and then restore it to the most
+// recently saved value.  This is necessary when using the POSIX
+// signal handling interface on some systems calling longjmp out of
+// the signal handler to get to the top level on an interrupt doesn't
+// restore the original signal mask.  Alternatively, we could use
+// sigsetjmp/siglongjmp, but saving and restoring the signal mask
+// ourselves works ok and seems simpler just now.
+
+#if defined (HAVE_POSIX_SIGNALS)
+static sigset_t octave_signal_mask;
+#endif
+
+void
+octave_save_signal_mask (void)
+{
+#if defined (HAVE_POSIX_SIGNALS)
+  sigprocmask (0, 0, &octave_signal_mask);
+#endif
+}
+
+void
+octave_restore_signal_mask (void)
+{
+#if defined (HAVE_POSIX_SIGNALS)
+  sigprocmask (SIG_SETMASK, &octave_signal_mask, 0);
+#endif
+}
+
 static void
 my_friendly_exit (const char *sig_name, int sig_number)
 {
   error ("%s -- stopping myself...", sig_name);
 
   save_user_variables ();
 
   clean_up_and_exit (sig_number);
diff --git a/src/sighandlers.h b/src/sighandlers.h
--- a/src/sighandlers.h
+++ b/src/sighandlers.h
@@ -43,16 +43,20 @@ extern int pipe_handler_error_count;
 extern int can_interrupt;
 
 extern sig_handler *octave_set_signal_handler (int, sig_handler *);
 
 extern void install_signal_handlers (void);
 
 extern void catch_interrupts (void);
 
+extern void octave_save_signal_mask (void);
+
+extern void octave_restore_signal_mask (void);
+
 // This is taken directly from Emacs 19:
 
 #ifndef SYS_SIGLIST_DECLARED
 extern char *sys_siglist[];
 #endif
 
 #if defined (HAVE_SIGACTION) && defined (HAVE_SIGPROCMASK)
 #if defined (HAVE_SIGPENDING) && defined (HAVE_SIGSUSPEND)
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -222,21 +222,25 @@ parse_and_execute (const string& s, int 
   run_unwind_frame ("parse_and_execute_2");
 }
 
 int
 main_loop (void)
 {
   // Allow the user to interrupt us without exiting.
 
+  octave_save_signal_mask ();
+
   if (setjmp (toplevel) != 0)
     {
       raw_mode (0);
 
       cout << "\n";
+
+      octave_restore_signal_mask ();
     }
 
   can_interrupt = 1;
 
   catch_interrupts ();
 
   // The big loop.
 
