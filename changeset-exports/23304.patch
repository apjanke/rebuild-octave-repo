# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1489912895 -3600
#      Sun Mar 19 09:41:35 2017 +0100
# Node ID fb495c47e82d124f89baf39553ca89ad75ae225c
# Parent  4aa13310250cd9b1ae8dc7a4089baab934c49f55
allow double left click for closing tabs in the file editor (bug #44605)

* file-editor.h: new class file_editor_tab_bar derived from QTabBar,
  class file_editor_tab_widget with file_editor_tab_bar as tab bar,
  code for all methods moved to file-editor.cc

* file-editor.cc (file_editor::construct): do not connect the closing
  signal from the mouse clicks here;
  (file_editor_tab_bar::file_editor_tab_bar)
  (file_editor_tab_bar::~file_editor_tab_bar): empty constructor/destructor
  of the new class derived from QTabBar;
  (file_editor_tab_bar::mousePressEvent): reimplmented mouse press event,
  now in the derived tab bar, not in the tab widget, also allowing double
  clicks to be filtered for closing the tab;
  (file_editor_tab_widget::file_editor_tab_widget): set an instance of
  file_editor_tab_bar as tab bar and connect the its close signal to the
  related slot of the file_editor;
  (file_editor_tab_widget::~file_editor_tab_widget): empty destructor;
  (file_editor_tab_widget::tabBar): return the tab bar of the widget

diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -1565,18 +1565,16 @@ file_editor::construct (void)
   _tool_bar = new QToolBar (editor_widget);
   _tool_bar->setMovable (true);
 
   _tab_widget = new file_editor_tab_widget (editor_widget);
   _tab_widget->setTabsClosable (true);
 #if defined (HAVE_QTABWIDGET_SETMOVABLE)
   _tab_widget->setMovable (true);
 #endif
-  connect (_tab_widget, SIGNAL (close_current_tab_signal (bool)),
-           this, SLOT (request_close_file (bool)));
 
   // the mru-list and an empty array of actions
   QSettings *settings = resource_manager::get_settings ();
   _mru_files = settings->value ("editor/mru_file_list").toStringList ();
   _mru_files_encodings = settings->value ("editor/mru_file_encodings")
                                    .toStringList ();
 
   if (_mru_files_encodings.count () != _mru_files.count ())
@@ -2463,32 +2461,42 @@ file_editor::switch_tab (int direction, 
       _tab_widget->setCurrentIndex (new_pos);
       focus ();
 #endif
     }
   else
     _tab_widget->setCurrentIndex (new_pos);
 }
 
+
 //
-// Functions of the the reimplemented tab widget
+// Functions of the the reimplemented tab bar
 //
 
+file_editor_tab_bar::file_editor_tab_bar (QWidget *p)
+  : QTabBar (p)
+{ }
+
+file_editor_tab_bar::~file_editor_tab_bar ()
+{ }
+
 // Reimplement mouse event for filtering out the desired mouse clicks
 void
-file_editor_tab_widget::mousePressEvent(QMouseEvent *me)
+file_editor_tab_bar::mousePressEvent (QMouseEvent *me)
 {
-  if (me->type () != QEvent::MouseButtonDblClick &&
-       me->button() == Qt::MidButton)
+  if ((me->type () == QEvent::MouseButtonDblClick &&
+       me->button() == Qt::LeftButton) ||
+      (me->type () != QEvent::MouseButtonDblClick &&
+       me->button() == Qt::MidButton))
     {
       // Middle click into the tabbar -> close the tab
-      for (int i = 0; i < tabBar ()->count (); i++)
+      for (int i = 0; i < count (); i++)
         {
           QPoint clickPos = mapToGlobal (me->pos ());
-          if (tabBar ()->tabRect (i).contains (tabBar ()->mapFromGlobal (clickPos)))
+          if (tabRect (i).contains (mapFromGlobal (clickPos)))
             {
               int idx = currentIndex ();
               // Make the clicked tab the current one and close it
               setCurrentIndex (i);
               emit close_current_tab_signal (true);
               // Was the closed tab before or after the previously current tab?
               // According to the result, use previous index or remove it by one
               if (idx - i > 0)
@@ -2497,13 +2505,41 @@ file_editor_tab_widget::mousePressEvent(
                 setCurrentIndex (idx);
               break;
             }
         }
     }
   else
     {
       // regular handling of the mouse event
-      QTabWidget::mousePressEvent (me);
+      QTabBar::mousePressEvent (me);
     }
 }
 
+
+
+//
+// Functions of the the reimplemented tab widget
+//
+
+file_editor_tab_widget::file_editor_tab_widget (QWidget *p)
+  : QTabWidget (p)
+{
+  file_editor_tab_bar* bar;
+  bar = new file_editor_tab_bar (this);
+
+  connect (bar, SIGNAL (close_current_tab_signal (bool)),
+           p->parent (), SLOT (request_close_file (bool)));
+
+  this->setTabBar(bar);
+}
+
+file_editor_tab_widget::~file_editor_tab_widget ()
+{ }
+
+QTabBar*
+file_editor_tab_widget::tabBar () const
+{
+  return (QTabWidget::tabBar ());
+}
+
+
 #endif
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -34,39 +34,59 @@ along with Octave; see the file COPYING.
 #include <QDragEnterEvent>
 #include <QDropEvent>
 
 #include <map>
 
 #include "file-editor-interface.h"
 #include "file-editor-tab.h"
 
-// subclassed QTabWidget for usable tab-bar and reimplemented mouse event
-class file_editor_tab_widget : public QTabWidget
+//
+// subclassed QTabBar for usable tab-bar and reimplemented mouse event
+//
+class file_editor_tab_bar : public QTabBar
 {
   Q_OBJECT
 
 public:
 
-  file_editor_tab_widget (QWidget *p) : QTabWidget (p) { }
-
-  ~file_editor_tab_widget () { }
-
-  QTabBar* tabBar () const { return (QTabWidget::tabBar ()); }
+  file_editor_tab_bar (QWidget *p);
+  ~file_editor_tab_bar ();
 
 signals:
 
   void close_current_tab_signal (bool);
 
 protected:
 
   void mousePressEvent(QMouseEvent *event);
+
 };
 
+
+//
+// subclassed QTabWidget for using custom tabbar
+//
+class file_editor_tab_widget : public QTabWidget
+{
+  Q_OBJECT
+
+public:
+
+  file_editor_tab_widget (QWidget *p);
+  ~file_editor_tab_widget ();
+
+  QTabBar* tabBar () const;
+
+};
+
+
+//
 // the class for the file editor
+//
 class file_editor : public file_editor_interface
 {
   Q_OBJECT
 
 public:
 
   struct tab_info
   {
