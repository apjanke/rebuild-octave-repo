# HG changeset patch
# User Rik <rik@octave.org>
# Date 1399245827 25200
#      Sun May 04 16:23:47 2014 -0700
# Node ID 5baada25d5a270e91b7d083221e29729210ba55f
# Parent  8cc66f09158440c60e6d4758866338a3cef0a58d
Rewrite docstring of sum() to match prod().

* data.cc (Fsum): Rewrite docstring.  Print unrecognized argument out in any
error message.  Add more input validation tests.

* data.cc: Use ';' after break statements.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -557,17 +557,17 @@ agree, or if either of the arguments is 
                 {
 #define MAKE_INT_BRANCH(X) \
                 case btyp_ ## X: \
                     { \
                     X##NDArray a0 = args(0).X##_array_value (); \
                     X##NDArray a1 = args(1).X##_array_value (); \
                     retval = binmap<octave_##X,octave_##X,octave_##X> (a0, a1, rem, "rem"); \
                     } \
-                  break
+                  break;
                 MAKE_INT_BRANCH (int8);
                 MAKE_INT_BRANCH (int16);
                 MAKE_INT_BRANCH (int32);
                 MAKE_INT_BRANCH (int64);
                 MAKE_INT_BRANCH (uint8);
                 MAKE_INT_BRANCH (uint16);
                 MAKE_INT_BRANCH (uint32);
                 MAKE_INT_BRANCH (uint64);
@@ -691,17 +691,17 @@ either of the arguments is complex.\n\
                 {
 #define MAKE_INT_BRANCH(X) \
                 case btyp_ ## X: \
                     { \
                     X##NDArray a0 = args(0).X##_array_value (); \
                     X##NDArray a1 = args(1).X##_array_value (); \
                     retval = binmap<octave_##X,octave_##X,octave_##X> (a0, a1, mod, "mod"); \
                     } \
-                  break
+                  break;
                 MAKE_INT_BRANCH (int8);
                 MAKE_INT_BRANCH (int16);
                 MAKE_INT_BRANCH (int32);
                 MAKE_INT_BRANCH (int64);
                 MAKE_INT_BRANCH (uint8);
                 MAKE_INT_BRANCH (uint16);
                 MAKE_INT_BRANCH (uint32);
                 MAKE_INT_BRANCH (uint64);
@@ -1173,17 +1173,17 @@ See @code{sum} for an explanation of the
               break;
 
 #define MAKE_INT_BRANCH(X) \
             case btyp_ ## X: \
               if (isnative) \
                 retval = arg.X ## _array_value ().cumsum (dim); \
               else \
                 retval = arg.array_value ().cumsum (dim); \
-              break
+              break;
             MAKE_INT_BRANCH (int8);
             MAKE_INT_BRANCH (int16);
             MAKE_INT_BRANCH (int32);
             MAKE_INT_BRANCH (int64);
             MAKE_INT_BRANCH (uint8);
             MAKE_INT_BRANCH (uint16);
             MAKE_INT_BRANCH (uint32);
             MAKE_INT_BRANCH (uint64);
@@ -2834,39 +2834,43 @@ Return the number of columns of @var{a}.
 
 DEFUN (sum, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} sum (@var{x})\n\
 @deftypefnx {Built-in Function} {} sum (@var{x}, @var{dim})\n\
 @deftypefnx {Built-in Function} {} sum (@dots{}, \"native\")\n\
 @deftypefnx {Built-in Function} {} sum (@dots{}, \"double\")\n\
 @deftypefnx {Built-in Function} {} sum (@dots{}, \"extra\")\n\
-Sum of elements along dimension @var{dim}.  If @var{dim} is\n\
-omitted, it defaults to the first non-singleton dimension.\n\
-\n\
-If the optional argument @qcode{\"native\"} is given, then the sum is\n\
-performed in the same type as the original argument, rather than in the\n\
-default double type.  For example:\n\
+Sum of elements along dimension @var{dim}.\n\
+\n\
+If @var{dim} is omitted, it defaults to the first non-singleton dimension.\n\
+\n\
+The optional @qcode{\"type\"} input determines the class of the variable used for\n\
+calculations.  If the argument @qcode{\"native\"} is given, then the operation is\n\
+performed in the same type as the original argument, rather than the default double\n\
+type.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 sum ([true, true])\n\
    @result{} 2\n\
 sum ([true, true], \"native\")\n\
    @result{} true\n\
 @end group\n\
 @end example\n\
 \n\
 On the contrary, if @qcode{\"double\"} is given, the sum is performed in\n\
 double precision even for single precision inputs.\n\
 \n\
-For double precision inputs, @qcode{\"extra\"} indicates that a more accurate\n\
-algorithm than straightforward summation is to be used.  For single precision\n\
-inputs, @qcode{\"extra\"} is the same as @qcode{\"double\"}.  Otherwise,\n\
-@qcode{\"extra\"} has no effect.\n\
+For double precision inputs, the @qcode{\"extra\"} option will use a more accurate\n\
+algorithm than straightforward summation.  For single precision inputs,\n\
+@qcode{\"extra\"} is the same as @qcode{\"double\"}.  Otherwise, @qcode{\"extra\"}\n\
+has no effect.\n\
 @seealso{cumsum, sumsq, prod}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   bool isnative = false;
@@ -2881,17 +2885,17 @@ inputs, @qcode{\"extra\"} is the same as
         {
           if (str == "native")
             isnative = true;
           else if (str == "double")
             isdouble = true;
           else if (str == "extra")
             isextra = true;
           else
-            error ("sum: unrecognized string argument");
+            error ("sum: unrecognized type argument '%s'", str.c_str ());
           nargin --;
         }
     }
 
   if (error_state)
     return retval;
 
   if (nargin == 1 || nargin == 2)
@@ -2948,17 +2952,17 @@ inputs, @qcode{\"extra\"} is the same as
               break;
 
 #define MAKE_INT_BRANCH(X) \
             case btyp_ ## X: \
               if (isnative) \
                 retval = arg.X ## _array_value ().sum (dim); \
               else \
                 retval = arg.X ## _array_value ().dsum (dim); \
-              break
+              break;
             MAKE_INT_BRANCH (int8);
             MAKE_INT_BRANCH (int16);
             MAKE_INT_BRANCH (int32);
             MAKE_INT_BRANCH (int64);
             MAKE_INT_BRANCH (uint8);
             MAKE_INT_BRANCH (uint16);
             MAKE_INT_BRANCH (uint32);
             MAKE_INT_BRANCH (uint64);
@@ -2992,21 +2996,16 @@ inputs, @qcode{\"extra\"} is the same as
     }
   else
     print_usage ();
 
   return retval;
 }
 
 /*
-%!assert (sum ([true,true]), 2)
-%!assert (sum ([true,true],"native"), true)
-%!assert (sum (int8 ([127,10,-20])), 117)
-%!assert (sum (int8 ([127,10,-20]),'native'), int8 (107))
-
 %!assert (sum ([1, 2, 3]), 6)
 %!assert (sum ([-1; -2; -3]), -6)
 %!assert (sum ([i, 2+i, -3+2i, 4]), 3+4i)
 %!assert (sum ([1, 2, 3; i, 2i, 3i; 1+i, 2+2i, 3+3i]), [2+2i, 4+4i, 6+6i])
 
 %!assert (sum (single ([1, 2, 3])), single (6))
 %!assert (sum (single ([-1; -2; -3])), single (-6))
 %!assert (sum (single ([i, 2+i, -3+2i, 4])), single (3+4i))
@@ -3047,20 +3046,28 @@ inputs, @qcode{\"extra\"} is the same as
 %!assert (sum (zeros (0, 2, "single"), 1), single ([0, 0]))
 %!assert (sum (zeros (0, 2, "single"), 2), zeros (0, 1, "single"))
 %!assert (sum (zeros (2, 2, 0, 3, "single")), zeros (1, 2, 0, 3, "single"))
 %!assert (sum (zeros (2, 2, 0, 3, "single"), 2), zeros (2, 1, 0, 3, "single"))
 %!assert (sum (zeros (2, 2, 0, 3, "single"), 3), zeros (2, 2, 1, 3, "single"))
 %!assert (sum (zeros (2, 2, 0, 3, "single"), 4), zeros (2, 2, 0, "single"))
 %!assert (sum (zeros (2, 2, 0, 3, "single"), 7), zeros (2, 2, 0, 3, "single"))
 
+## Test "native"
+%!assert (sum ([true,true]), 2)
+%!assert (sum ([true,true], "native"), true)
+%!assert (sum (int8 ([127,10,-20])), 117)
+%!assert (sum (int8 ([127,10,-20]), "native"), int8 (107))
+
 ;-)
 %!assert (sum ("Octave") + "8", sumsq (primes (17)))
 
 %!error sum ()
+%!error sum (1,2,3)
+%!error <unrecognized type argument 'foobar'> sum (1, "foobar")
 */
 
 DEFUN (sumsq, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} sumsq (@var{x})\n\
 @deftypefnx {Built-in Function} {} sumsq (@var{x}, @var{dim})\n\
 Sum of squares of elements along dimension @var{dim}.  If @var{dim}\n\
 is omitted, it defaults to the first non-singleton dimension.\n\
@@ -6722,17 +6729,17 @@ it may be better to use @code{sort}.\n\
           retval = argx.complex_array_value ().nth_element (n, dim);
           break;
         case btyp_float_complex:
           retval = argx.float_complex_array_value ().nth_element (n, dim);
           break;
 #define MAKE_INT_BRANCH(X) \
         case btyp_ ## X: \
           retval = argx.X ## _array_value ().nth_element (n, dim); \
-          break
+          break;
 
         MAKE_INT_BRANCH (int8);
         MAKE_INT_BRANCH (int16);
         MAKE_INT_BRANCH (int32);
         MAKE_INT_BRANCH (int64);
         MAKE_INT_BRANCH (uint8);
         MAKE_INT_BRANCH (uint16);
         MAKE_INT_BRANCH (uint32);
@@ -6894,17 +6901,17 @@ do_accumarray_minmax_fun (const octave_v
                                              n, ismin,
                                              zero.float_complex_value ());
               break;
 #define MAKE_INT_BRANCH(X) \
             case btyp_ ## X: \
               retval = do_accumarray_minmax (idx, vals.X ## _array_value (), \
                                              n, ismin, \
                                              zero.X ## _scalar_value ()); \
-              break
+              break;
 
             MAKE_INT_BRANCH (int8);
             MAKE_INT_BRANCH (int16);
             MAKE_INT_BRANCH (int32);
             MAKE_INT_BRANCH (int64);
             MAKE_INT_BRANCH (uint8);
             MAKE_INT_BRANCH (uint16);
             MAKE_INT_BRANCH (uint32);
@@ -7493,17 +7500,17 @@ endfor\n\
               r(i) = rx;
             }
 
           switch (x.builtin_type ())
             {
 #define BTYP_BRANCH(X, EX) \
             case btyp_ ## X: \
               retval = do_repelems (x.EX ## _value (), r); \
-              break
+              break;
 
               BTYP_BRANCH (double, array);
               BTYP_BRANCH (float, float_array);
               BTYP_BRANCH (complex, complex_array);
               BTYP_BRANCH (float_complex, float_complex_array);
               BTYP_BRANCH (bool, bool_array);
               BTYP_BRANCH (char, char_array);
 
