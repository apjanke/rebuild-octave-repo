# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1206725189 -3600
#      Fri Mar 28 18:26:29 2008 +0100
# Node ID fb3a6c53c2b20456a4943df2d1dfc1c8f40abf5d
# Parent  693ac94c2854683e33426860cb5ff41e2f8cae5a
Allow negative zero imaginary part to be treated as zero for erf, erfc, gamma and lgamma mapper function

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,32 @@
+2008-03-28  David Bateman  <dbateman@free.fr>
+
+	* ov-complex.cc (SCALAR_MAPPER, CD_SCALAR_MAPPER): New macro for
+	complex values with zero imaginary part.
+	(erf, erfc, gamma, lgamma): Use the new mappers to define these
+	mapper functions.
+	* ov-complex.h (erf, erfc, gamma, lgamma): Declare them.
+	* ov-cx-mat.cc (any_element_less_than, any_element_greater_than):
+	New static functions
+	(DARRAY_MAPPER, CD_ARRAY_MAPPER): New macro for complex values
+	with zero imaginary part.
+	(erf, erfc, gamma, lgamma): Use the new mappers to define these
+	mapper functions.
+	* ov-cx-mat.h (erf, erfc, gamma, lgamma): Declare them.
+	* ov-cx-sparse.cc (any_element_less_than, any_element_greater_than):
+	New static functions
+	(DSPARSE_MAPPER, CD_SPARSE_MAPPER): New macro for complex values
+	with zero imaginary part.
+	(erf, erfc, gamma, lgamma): Use the new mappers to define these
+	mapper functions.
+	* ov-cx-sparse.h (erf, erfc, gamma, lgamma): Declare them.
+	* ov-re-sparse.cc (CD_SPARSE_MAPPER): Use correct mapper functors.
+	* mapper.cc: Add tests for the above cases.
+
 2008-03-27  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/max.cc: Rename from minmax.cc.
 	* Makefile.in (DLD_XSRC): Rename minmax.cc to max.cc.
 
 	* DLD-FUNCTIONS/__convn__.cc (convn): Use traits class and
 	typedefs to allow all types to be deduced from argument types.
 
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -318,16 +318,24 @@ erf (z) = (2/sqrt (pi)) | e^(-t^2) dt\n\
   if (args.length () == 1)
     retval = args(0).erf ();
   else
     print_usage ();
 
   return retval;
 }
 
+/*
+
+%!test
+%! a = -1i*sqrt(-1/(6.4187*6.4187));
+%! assert (erf(a), erf(real(a)));
+
+*/
+
 DEFUN (erfc, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} erfc (@var{z})\n\
 Computes the complementary error function,\n\
 @iftex\n\
 @tex\n\
 $1 - {\\rm erf} (z)$.\n\
 @end tex\n\
@@ -342,16 +350,24 @@ Computes the complementary error functio
   if (args.length () == 1)
     retval = args(0).erfc ();
   else
     print_usage ();
 
   return retval;
 }
 
+/*
+
+%!test
+%! a = -1i*sqrt(-1/(6.4187*6.4187));
+%! assert (erfc(a), erfc(real(a)));
+
+*/
+
 DEFUN (exp, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} exp (@var{x})\n\
 Compute the exponential of @var{x}.  To compute the matrix exponential,\n\
 see @ref{Linear Algebra}.\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -462,16 +478,24 @@ gamma (z) = | t^(z-1) exp (-t) dt.\n\
   if (args.length () == 1)
     retval = args(0).gamma ();
   else
     print_usage ();
 
   return retval;
 }
 
+/*
+
+%!test
+%! a = -1i*sqrt(-1/(6.4187*6.4187));
+%! assert (gamma(a), gamma(real(a)));
+
+*/
+
 DEFUN (imag, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} imag (@var{z})\n\
 Return the imaginary part of @var{z} as a real number.\n\
 @seealso{real, conj}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -748,16 +772,24 @@ Return the natural logarithm of the gamm
   if (args.length () == 1)
     retval = args(0).lgamma ();
   else
     print_usage ();
 
   return retval;
 }
 
+/*
+
+%!test
+%! a = -1i*sqrt(-1/(6.4187*6.4187));
+%! assert (lgamma(a), lgamma(real(a)));
+
+*/
+
 DEFUN (log, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} log (@var{x})\n\
 Compute the natural logarithm for each element of @var{x}.  To compute the\n\
 matrix logarithm, see @ref{Linear Algebra}.\n\
 @seealso{log2, log10, logspace, exp}\n\
 @end deftypefn")
 {
diff --git a/src/ov-complex.cc b/src/ov-complex.cc
--- a/src/ov-complex.cc
+++ b/src/ov-complex.cc
@@ -353,16 +353,52 @@ xreal (const Complex& x)
 
 #define COMPLEX_MAPPER(MAP, FCN)	\
   octave_value \
   octave_complex::MAP (void) const \
   { \
     return octave_value (FCN (scalar)); \
   }
 
+#define SCALAR_MAPPER(MAP, FCN)	\
+  octave_value \
+  octave_complex::MAP (void) const \
+  { \
+    if (scalar.imag () == 0) \
+      return octave_value (FCN (scalar.real ())); \
+    else \
+      { \
+        error ("%s: not defined for complex arguments", #MAP); \
+        return octave_value (); \
+      } \
+  }
+
+#define CD_SCALAR_MAPPER(MAP, RFCN, CFCN, L1, L2) \
+  octave_value \
+  octave_complex::MAP (void) const \
+  { \
+    if (scalar.imag () == 0) \
+      { \
+	double re = scalar.real (); \
+	return (re < L1 || re > L2 \
+            ? octave_value (CFCN (scalar)) \
+	    : octave_value (RFCN (re))); \
+      } \
+    else \
+      { \
+        error ("%s: not defined for complex arguments", #MAP); \
+        return octave_value (); \
+      } \
+  }
+
+SCALAR_MAPPER (erf, ::erf)
+SCALAR_MAPPER (erfc, ::erfc)
+SCALAR_MAPPER (gamma, xgamma)
+CD_SCALAR_MAPPER (lgamma, xlgamma, xlgamma, 0.0, octave_Inf)
+
 COMPLEX_MAPPER (abs, xabs)
 COMPLEX_MAPPER (acos, ::acos)
 COMPLEX_MAPPER (acosh, ::acosh)
 COMPLEX_MAPPER (angle, std::arg)
 COMPLEX_MAPPER (arg, std::arg)
 COMPLEX_MAPPER (asin, ::asin)
 COMPLEX_MAPPER (asinh, ::asinh)
 COMPLEX_MAPPER (atan, ::atan)
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -145,16 +145,20 @@ public:
     {
       // Yes, for compatibility, we drop the imaginary part here.
       return os.write (array_value (true), block_size, output_type,
 		       skip, flt_fmt);
     }
 
   mxArray *as_mxArray (void) const;
 
+  octave_value erf (void) const;
+  octave_value erfc (void) const;
+  octave_value gamma (void) const;
+  octave_value lgamma (void) const;
   octave_value abs (void) const;
   octave_value acos (void) const;
   octave_value acosh (void) const;
   octave_value angle (void) const;
   octave_value arg (void) const;
   octave_value asin (void) const;
   octave_value asinh (void) const;
   octave_value atan (void) const;
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -665,24 +665,108 @@ ximag (const Complex& x)
 }
 
 static double
 xreal (const Complex& x)
 {
   return x.real ();
 }
 
+static bool
+any_element_less_than (const NDArray& a, double val)
+{
+  octave_idx_type len = a.length ();
+  const double *m = a.fortran_vec ();
+
+  for (octave_idx_type i = 0; i < len; i++)
+    {
+      OCTAVE_QUIT;
+
+      if (m[i] < val)
+	return true;
+    }
+
+  return false;
+}
+
+static bool
+any_element_greater_than (const NDArray& a, double val)
+{
+  octave_idx_type len = a.length ();
+  const double *m = a.fortran_vec ();
+
+  for (octave_idx_type i = 0; i < len; i++)
+    {
+      OCTAVE_QUIT;
+
+      if (m[i] > val)
+	return true;
+    }
+
+  return false;
+}
+
 #define ARRAY_MAPPER(MAP, AMAP, FCN) \
   octave_value \
   octave_complex_matrix::MAP (void) const \
   { \
     static AMAP cmap = FCN; \
     return matrix.map (cmap); \
   }
 
+#define DARRAY_MAPPER(MAP, AMAP, FCN) \
+  octave_value \
+  octave_complex_matrix::MAP (void) const \
+  { \
+    static ComplexNDArray::dmapper dmap = ximag; \
+    NDArray m = matrix.map (dmap); \
+    if (m.all_elements_are_zero ()) \
+      { \
+	dmap = xreal; \
+	m = matrix.map (dmap); \
+        static AMAP cmap = FCN; \
+        return m.map (cmap); \
+      } \
+    else \
+      { \
+        error ("%s: not defined for complex arguments", #MAP); \
+        return octave_value (); \
+      } \
+  }
+
+#define CD_ARRAY_MAPPER(MAP, RFCN, CFCN, L1, L2) \
+  octave_value \
+  octave_complex_matrix::MAP (void) const \
+  { \
+    static ComplexNDArray::dmapper idmap = ximag; \
+    NDArray m = matrix.map (idmap); \
+    if (m.all_elements_are_zero ()) \
+      { \
+	static ComplexNDArray::dmapper rdmap = xreal; \
+	m = matrix.map (rdmap); \
+        static NDArray::dmapper dmap = RFCN; \
+        static NDArray::cmapper cmap = CFCN; \
+        return (any_element_less_than (m, L1) \
+                ? octave_value (m.map (cmap)) \
+	        : (any_element_greater_than (m, L2) \
+	           ? octave_value (m.map (cmap)) \
+	           : octave_value (m.map (dmap)))); \
+      } \
+    else \
+      { \
+        /*error ("%s: not defined for complex arguments", #MAP); */	\
+        return octave_value (m); \
+      } \
+  }
+
+DARRAY_MAPPER (erf, NDArray::dmapper, ::erf)
+DARRAY_MAPPER (erfc, NDArray::dmapper, ::erfc)
+DARRAY_MAPPER (gamma, NDArray::dmapper, xgamma)
+CD_ARRAY_MAPPER (lgamma, xlgamma, xlgamma, 0.0, octave_Inf)
+
 ARRAY_MAPPER (abs, ComplexNDArray::dmapper, xabs)
 ARRAY_MAPPER (acos, ComplexNDArray::cmapper, ::acos)
 ARRAY_MAPPER (acosh, ComplexNDArray::cmapper, ::acosh)
 ARRAY_MAPPER (angle, ComplexNDArray::dmapper, std::arg)
 ARRAY_MAPPER (arg, ComplexNDArray::dmapper, std::arg)
 ARRAY_MAPPER (asin, ComplexNDArray::cmapper, ::asin)
 ARRAY_MAPPER (asinh, ComplexNDArray::cmapper, ::asinh)
 ARRAY_MAPPER (atan, ComplexNDArray::cmapper, ::atan)
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -148,16 +148,20 @@ public:
       return os.write (matrix_value (true), block_size, output_type,
 		       skip, flt_fmt);
     }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   mxArray *as_mxArray (void) const;
 
+  octave_value erf (void) const;
+  octave_value erfc (void) const;
+  octave_value gamma (void) const;
+  octave_value lgamma (void) const;
   octave_value abs (void) const;
   octave_value acos (void) const;
   octave_value acosh (void) const;
   octave_value angle (void) const;
   octave_value arg (void) const;
   octave_value asin (void) const;
   octave_value asinh (void) const;
   octave_value atan (void) const;
diff --git a/src/ov-cx-sparse.cc b/src/ov-cx-sparse.cc
--- a/src/ov-cx-sparse.cc
+++ b/src/ov-cx-sparse.cc
@@ -834,24 +834,112 @@ ximag (const Complex& x)
 }
 
 static double
 xreal (const Complex& x)
 {
   return x.real ();
 }
 
+static bool
+any_element_less_than (const SparseMatrix& a, double val)
+{
+  octave_idx_type len = a.nnz ();
+
+  if (val > 0. && len != a.numel ())
+    return true;
+
+  for (octave_idx_type i = 0; i < len; i++)
+    {
+      OCTAVE_QUIT;
+
+      if (a.data(i) < val)
+	return true;
+    }
+
+  return false;
+}
+
+static bool
+any_element_greater_than (const SparseMatrix& a, double val)
+{
+  octave_idx_type len = a.nnz ();
+
+  if (val < 0. && len != a.numel ())
+    return true;
+
+  for (octave_idx_type i = 0; i < len; i++)
+    {
+      OCTAVE_QUIT;
+
+      if (a.data(i) > val)
+	return true;
+    }
+
+  return false;
+}
+
 #define SPARSE_MAPPER(MAP, AMAP, FCN) \
   octave_value \
   octave_sparse_complex_matrix::MAP (void) const \
   { \
     static AMAP cmap = FCN; \
     return matrix.map (cmap); \
   }
 
+#define DSPARSE_MAPPER(MAP, AMAP, FCN) \
+  octave_value \
+  octave_sparse_complex_matrix::MAP (void) const \
+  { \
+    static SparseComplexMatrix::dmapper dmap = ximag; \
+    SparseMatrix m = matrix.map (dmap); \
+    if (m.all_elements_are_zero ()) \
+      { \
+	dmap = xreal; \
+	m = matrix.map (dmap); \
+        static AMAP cmap = FCN; \
+        return m.map (cmap); \
+      } \
+    else \
+      { \
+        error ("%s: not defined for complex arguments", #MAP); \
+        return octave_value (); \
+      } \
+  }
+
+#define CD_SPARSE_MAPPER(MAP, RFCN, CFCN, L1, L2) \
+  octave_value \
+  octave_sparse_complex_matrix::MAP (void) const \
+  { \
+    static SparseComplexMatrix::dmapper idmap = ximag; \
+    SparseMatrix m = matrix.map (idmap); \
+    if (m.all_elements_are_zero ()) \
+      { \
+        static SparseComplexMatrix::dmapper rdmap = xreal; \
+	m = matrix.map (rdmap); \
+        static SparseMatrix::dmapper dmap = RFCN; \
+        static SparseMatrix::cmapper cmap = CFCN; \
+        return (any_element_less_than (m, L1) \
+                ? octave_value (m.map (cmap)) \
+	        : (any_element_greater_than (m, L2) \
+	           ? octave_value (m.map (cmap)) \
+	           : octave_value (m.map (dmap)))); \
+      } \
+    else \
+      { \
+        error ("%s: not defined for complex arguments", #MAP); \
+        return octave_value (); \
+      } \
+  }
+
+DSPARSE_MAPPER (erf, SparseMatrix::dmapper, ::erf)
+DSPARSE_MAPPER (erfc, SparseMatrix::dmapper, ::erfc)
+DSPARSE_MAPPER (gamma, SparseMatrix::dmapper, xgamma)
+CD_SPARSE_MAPPER (lgamma, xlgamma, xlgamma, 0.0, octave_Inf)
+
 SPARSE_MAPPER (abs, SparseComplexMatrix::dmapper, xabs)
 SPARSE_MAPPER (acos, SparseComplexMatrix::cmapper, ::acos)
 SPARSE_MAPPER (acosh, SparseComplexMatrix::cmapper, ::acosh)
 SPARSE_MAPPER (angle, SparseComplexMatrix::dmapper, std::arg)
 SPARSE_MAPPER (arg, SparseComplexMatrix::dmapper, std::arg)
 SPARSE_MAPPER (asin, SparseComplexMatrix::cmapper, ::asin)
 SPARSE_MAPPER (asinh, SparseComplexMatrix::cmapper, ::asinh)
 SPARSE_MAPPER (atan, SparseComplexMatrix::cmapper, ::atan)
diff --git a/src/ov-cx-sparse.h b/src/ov-cx-sparse.h
--- a/src/ov-cx-sparse.h
+++ b/src/ov-cx-sparse.h
@@ -147,16 +147,20 @@ public:
 #if defined (HAVE_HDF5)
   bool save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats);
 
   bool load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug);
 #endif
 
   mxArray *as_mxArray (void) const;
 
+  octave_value erf (void) const;
+  octave_value erfc (void) const;
+  octave_value gamma (void) const;
+  octave_value lgamma (void) const;
   octave_value abs (void) const;
   octave_value acos (void) const;
   octave_value acosh (void) const;
   octave_value angle (void) const;
   octave_value arg (void) const;
   octave_value asin (void) const;
   octave_value asinh (void) const;
   octave_value atan (void) const;
diff --git a/src/ov-re-sparse.cc b/src/ov-re-sparse.cc
--- a/src/ov-re-sparse.cc
+++ b/src/ov-re-sparse.cc
@@ -881,18 +881,18 @@ any_element_greater_than (const SparseMa
     static AMAP dmap = FCN; \
     return matrix.map (dmap); \
   }
 
 #define CD_SPARSE_MAPPER(MAP, RFCN, CFCN, L1, L2) \
   octave_value \
   octave_sparse_matrix::MAP (void) const \
   { \
-    static NDArray::dmapper dmap = RFCN; \
-    static NDArray::cmapper cmap = CFCN; \
+    static SparseMatrix::dmapper dmap = RFCN; \
+    static SparseMatrix::cmapper cmap = CFCN; \
  \
     return (any_element_less_than (matrix, L1) \
             ? octave_value (matrix.map (cmap)) \
             : (any_element_greater_than (matrix, L2) \
                ? octave_value (matrix.map (cmap)) \
 	       : octave_value (matrix.map (dmap)))); \
   }
 
