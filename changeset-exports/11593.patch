# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1295583569 28800
#      Thu Jan 20 20:19:29 2011 -0800
# Node ID 1577c6f8092640bfb9f20dacf5f0a04b7c889c1c
# Parent  ab61de78833ee4575676f6a36661838760ae35d7
Use non-breaking spaces between certain adjectives and their nouns in docstrings.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,14 @@
+2011-01-20  Rik  <octave@nomad.inbox5.com>
+
+	* doc/interpreter/diagperm.txi, doc/interpreter/linalg.txi,
+	doc/interpreter/sparse.txi: Use non-breaking spaces between certain
+	adjectives and their linked nouns in docstrings.
+
 2011-01-20  Rik  <octave@nomad.inbox5.com>
 
 	* doc/interpreter/doccheck/README: Update documentation for
 	documentation scripts.
 
 2011-01-20  Rik  <octave@nomad.inbox5.com>
 
 	* doc/interpreter/doccheck/aspell-octave.en.pws,
diff --git a/doc/interpreter/diagperm.txi b/doc/interpreter/diagperm.txi
--- a/doc/interpreter/diagperm.txi
+++ b/doc/interpreter/diagperm.txi
@@ -411,17 +411,17 @@ The @dfn{sparse} function will convert a
 sparse matrix.
 The @dfn{find} function will also work efficiently with a permutation matrix,
 making it possible to conveniently obtain the permutation indices.
 
 @node Example Codes
 @section Some Examples of Usage
 
 The following can be used to solve a linear system @code{A*x = b}
-using the pivoted LU factorization:
+using the pivoted LU@tie{}factorization:
 
 @example
 @group
   [L, U, P] = lu (A); ## now L*U = P*A
   x = U \ L \ P*b;
 @end group
 @end example
 
diff --git a/doc/interpreter/linalg.txi b/doc/interpreter/linalg.txi
--- a/doc/interpreter/linalg.txi
+++ b/doc/interpreter/linalg.txi
@@ -51,35 +51,35 @@ backward substitution using the @sc{lapa
 
 @c Permuted triangular matrices currently disabled in the code
 @c
 @c @item If the matrix is a upper triangular matrix with column permutations
 @c or lower triangular matrix with row permutations, perform a forward or
 @c backward substitution, and goto 5.
 
 @item If the matrix is square, Hermitian with a real positive diagonal,
-attempt Cholesky factorization using the @sc{lapack} xPOTRF function.
+attempt Cholesky@tie{}factorization using the @sc{lapack} xPOTRF function.
 
-@item If the Cholesky factorization failed or the matrix is not
+@item If the Cholesky@tie{}factorization failed or the matrix is not
 Hermitian with a real positive diagonal, and the matrix is square, factorize 
 using the @sc{lapack} xGETRF function.
 
 @item If the matrix is not square, or any of the previous solvers flags
 a singular or near singular matrix, find a least squares solution using
 the @sc{lapack} xGELSD function.
 @end enumerate
 
 The user can force the type of the matrix with the @code{matrix_type}
 function.  This overcomes the cost of discovering the type of the matrix.
 However, it should be noted that identifying the type of the matrix incorrectly
 will lead to unpredictable results, and so @code{matrix_type} should be
 used with care.
 
 It should be noted that the test for whether a matrix is a candidate for
-Cholesky factorization, performed above and by the @code{matrix_type}
+Cholesky@tie{}factorization, performed above and by the @code{matrix_type}
 function, does not give a certainty that the matrix is
 Hermitian.  However, the attempt to factorize the matrix will quickly
 flag a non-Hermitian matrix.
 
 @node Basic Matrix Functions
 @section Basic Matrix Functions
 
 @DOCSTRING(balance)
diff --git a/doc/interpreter/sparse.txi b/doc/interpreter/sparse.txi
--- a/doc/interpreter/sparse.txi
+++ b/doc/interpreter/sparse.txi
@@ -415,19 +415,19 @@ the nodes are given in the n-by-2 matrix
 @xref{fig:gplot}.
 
 @float Figure,fig:gplot
 @center @image{gplot,4in}
 @caption{Simple use of the @dfn{gplot} command.}
 @end float
 @end ifset
 
-The dependencies between the nodes of a Cholesky factorization can be
+The dependencies between the nodes of a Cholesky@tie{}factorization can be
 calculated in linear time without explicitly needing to calculate the
-Cholesky factorization by the @code{etree} command.  This command
+Cholesky@tie{}factorization by the @code{etree} command.  This command
 returns the elimination tree of the matrix and can be displayed
 graphically by the command @code{treeplot(etree(A))} if @code{A} is
 symmetric or @code{treeplot(etree(A+A'))} otherwise.
 
 @DOCSTRING(spy)
 
 @DOCSTRING(etree)
 
@@ -649,31 +649,31 @@ also available.
 @xref{fig:simplematrix}, for an example of the structure of a simple 
 positive definite matrix.
 
 @float Figure,fig:simplematrix
 @center @image{spmatrix,4in}
 @caption{Structure of simple sparse matrix.}
 @end float
 
-The standard Cholesky factorization of this matrix can be
+The standard Cholesky@tie{}factorization of this matrix can be
 obtained by the same command that would be used for a full
 matrix.  This can be visualized with the command 
 @code{r = chol(A); spy(r);}.
 @xref{fig:simplechol}.
 The original matrix had 
 @ifinfo
 @ifnothtml
 43
 @end ifnothtml
 @end ifinfo
 @ifset htmltex
 598
 @end ifset
-non-zero terms, while this Cholesky factorization has
+non-zero terms, while this Cholesky@tie{}factorization has
 @ifinfo
 @ifnothtml
 71,
 @end ifnothtml
 @end ifinfo
 @ifset htmltex
 10200,
 @end ifset
@@ -691,29 +691,29 @@ r = chol(A(q,q)); spy(r)}.  This gives
 29
 @end ifnothtml
 @end ifinfo
 @ifset htmltex
 399
 @end ifset
 non-zero terms which is a significant improvement.
 
-The Cholesky factorization itself can be used to determine the
+The Cholesky@tie{}factorization itself can be used to determine the
 appropriate sparsity preserving reordering of the matrix during the
 factorization, In that case this might be obtained with three return
 arguments as r@code{[r, p, q] = chol(A); spy(r)}.
 
 @float Figure,fig:simplechol
 @center @image{spchol,4in}
-@caption{Structure of the un-permuted Cholesky factorization of the above matrix.}
+@caption{Structure of the un-permuted Cholesky@tie{}factorization of the above matrix.}
 @end float
 
 @float Figure,fig:simplecholperm
 @center @image{spcholperm,4in}
-@caption{Structure of the permuted Cholesky factorization of the above matrix.}
+@caption{Structure of the permuted Cholesky@tie{}factorization of the above matrix.}
 @end float
 
 In the case of an asymmetric matrix, the appropriate sparsity
 preserving permutation is @dfn{colamd} and the factorization using
 this reordering can be visualized using the command
 @code{q = colamd(A); [l, u, p] = lu(A(:,q)); spy(l+u)}.
 
 Finally, Octave implicitly reorders the matrix when using the div (/)
@@ -758,62 +758,62 @@ account the permutations.  Goto 8
 than that given by @code{spparms ("bandden")} continue, else goto 4.
 
 @enumerate a
 @item If the matrix is tridiagonal and the right-hand side is not sparse 
 continue, else goto 3b.
 
 @enumerate
 @item If the matrix is Hermitian, with a positive real diagonal, attempt
-      Cholesky factorization using @sc{lapack} xPTSV.
+      Cholesky@tie{}factorization using @sc{lapack} xPTSV.
 
 @item If the above failed or the matrix is not Hermitian with a positive
       real diagonal use Gaussian elimination with pivoting using 
       @sc{lapack} xGTSV, and goto 8.
 @end enumerate
 
 @item If the matrix is Hermitian with a positive real diagonal, attempt
-      Cholesky factorization using @sc{lapack} xPBTRF.
+      Cholesky@tie{}factorization using @sc{lapack} xPBTRF.
 
 @item if the above failed or the matrix is not Hermitian with a positive
       real diagonal use Gaussian elimination with pivoting using 
       @sc{lapack} xGBTRF, and goto 8.
 @end enumerate
 
 @item If the matrix is upper or lower triangular perform a sparse forward
 or backward substitution, and goto 8
 
 @item If the matrix is an upper triangular matrix with column permutations
 or lower triangular matrix with row permutations, perform a sparse forward 
 or backward substitution, and goto 8
 
 @item If the matrix is square, Hermitian with a real positive diagonal, attempt
-sparse Cholesky factorization using @sc{cholmod}.
+sparse Cholesky@tie{}factorization using @sc{cholmod}.
 
-@item If the sparse Cholesky factorization failed or the matrix is not
+@item If the sparse Cholesky@tie{}factorization failed or the matrix is not
 Hermitian with a real positive diagonal, and the matrix is square, factorize 
 using @sc{umfpack}.
 
 @item If the matrix is not square, or any of the previous solvers flags
 a singular or near singular matrix, find a minimum norm solution using
 @sc{cxsparse}@footnote{The @sc{cholmod}, @sc{umfpack} and @sc{cxsparse} packages were
 written by Tim Davis and are available at
 http://www.cise.ufl.edu/research/sparse/}.
 @end enumerate
 
 The band density is defined as the number of non-zero values in the matrix
 divided by the number of non-zero values in the matrix.  The banded matrix
 solvers can be entirely disabled by using @dfn{spparms} to set @code{bandden}
 to 1 (i.e., @code{spparms ("bandden", 1)}).
 
-The QR solver factorizes the problem with a Dulmage-Mendelsohn, to
+The QR@tie{}solver factorizes the problem with a Dulmage-Mendelsohn, to
 separate the problem into blocks that can be treated as over-determined,
 multiple well determined blocks, and a final over-determined block.  For
 matrices with blocks of strongly connected nodes this is a big win as
-LU decomposition can be used for many blocks.  It also significantly
+LU@tie{}decomposition can be used for many blocks.  It also significantly
 improves the chance of finding a solution to over-determined problems
 rather than just returning a vector of @dfn{NaN}'s.
 
 All of the solvers above, can calculate an estimate of the condition
 number.  This can be used to detect numerical stability problems in the
 solution and force a minimum norm solution to be used.  However, for
 narrow banded, triangular or diagonal matrices, the cost of
 calculating the condition number is significant, and can in fact
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+2011-01-20  Rik  <octave@nomad.inbox5.com>
+
+	* scripts/linear-algebra/condest.m, 
+	scripts/linear-algebra/onenormest.m, scripts/linear-algebra/qzhess.m,
+	scripts/polynomial/polyfit.m, scripts/special-matrix/pascal.m: Use 
+	non-breaking spaces between certain adjectives and their linked nouns
+	in docstrings
+
 2011-01-20  Rik  <octave@nomad.inbox5.com>
 
 	* image/imread.m, image/imwrite.m, signal/periodogram.m,
 	strings/isstrprop.m: Use @nospell macro on certain words in docstring.
 
 2011-01-20  John W. Eaton  <jwe@octave.org>
 
 	* @ftp/loadobj.m, @ftp/saveobj.m, audio/record.m,
diff --git a/scripts/linear-algebra/condest.m b/scripts/linear-algebra/condest.m
--- a/scripts/linear-algebra/condest.m
+++ b/scripts/linear-algebra/condest.m
@@ -23,17 +23,17 @@
 ## @deftypefnx {Function File} {[@var{est}, @var{v}] =} condest (@var{A}, @var{solve}, @var{solve_t}, @var{t})
 ## @deftypefnx {Function File} {[@var{est}, @var{v}] =} condest (@var{apply}, @var{apply_t}, @var{solve}, @var{solve_t}, @var{n}, @var{t})
 ##
 ## Estimate the 1-norm condition number of a matrix @var{A}
 ## using @var{t} test vectors using a randomized 1-norm estimator.
 ## If @var{t} exceeds 5, then only 5 test vectors are used.
 ##
 ## If the matrix is not explicit, e.g., when estimating the condition
-## number of @var{A} given an LU factorization, @code{condest} uses the
+## number of @var{A} given an LU@tie{}factorization, @code{condest} uses the
 ## following functions:
 ##
 ## @table @var
 ## @item apply
 ## @code{A*x} for a matrix @code{x} of size @var{n} by @var{t}.
 ##
 ## @item apply_t
 ## @code{A'*x} for a matrix @code{x} of size @var{n} by @var{t}.
diff --git a/scripts/linear-algebra/onenormest.m b/scripts/linear-algebra/onenormest.m
--- a/scripts/linear-algebra/onenormest.m
+++ b/scripts/linear-algebra/onenormest.m
@@ -20,17 +20,17 @@
 ## @deftypefn  {Function File} {[@var{est}, @var{v}, @var{w}, @var{iter}] =} onenormest (@var{A}, @var{t})
 ## @deftypefnx {Function File} {[@var{est}, @var{v}, @var{w}, @var{iter}] =} onenormest (@var{apply}, @var{apply_t}, @var{n}, @var{t})
 ##
 ## Apply Higham and Tisseur's randomized block 1-norm estimator to
 ## matrix @var{A} using @var{t} test vectors.  If @var{t} exceeds 5, then
 ## only 5 test vectors are used.
 ##
 ## If the matrix is not explicit, e.g., when estimating the norm of
-## @code{inv (@var{A})} given an LU factorization, @code{onenormest} applies
+## @code{inv (@var{A})} given an LU@tie{}factorization, @code{onenormest} applies
 ## @var{A} and its conjugate transpose through a pair of functions
 ## @var{apply} and @var{apply_t}, respectively, to a dense matrix of size
 ## @var{n} by @var{t}.  The implicit version requires an explicit dimension
 ## @var{n}.
 ##
 ## Returns the norm estimate @var{est}, two vectors @var{v} and
 ## @var{w} related by norm
 ## @code{(@var{w}, 1) = @var{est} * norm (@var{v}, 1)},
diff --git a/scripts/linear-algebra/qzhess.m b/scripts/linear-algebra/qzhess.m
--- a/scripts/linear-algebra/qzhess.m
+++ b/scripts/linear-algebra/qzhess.m
@@ -30,17 +30,17 @@
 ##      @result{} aa = [ -3.02244, -4.41741;  0.92998,  0.69749 ]
 ##      @result{} bb = [ -8.60233, -9.99730;  0.00000, -0.23250 ]
 ##      @result{}  q = [ -0.58124, -0.81373; -0.81373,  0.58124 ]
 ##      @result{}  z = [ 1, 0; 0, 1 ]
 ## @end group
 ## @end example
 ##
 ## The Hessenberg-triangular decomposition is the first step in
-## Moler and Stewart's QZ decomposition algorithm.
+## Moler and Stewart's QZ@tie{}decomposition algorithm.
 ##
 ## Algorithm taken from Golub and Van Loan, @cite{Matrix Computations, 2nd
 ## edition}.
 ## @end deftypefn
 
 ## Author: A. S. Hodel <scotte@eng.auburn.edu>
 ## Created: August 1993
 ## Adapted-By: jwe
diff --git a/scripts/polynomial/polyfit.m b/scripts/polynomial/polyfit.m
--- a/scripts/polynomial/polyfit.m
+++ b/scripts/polynomial/polyfit.m
@@ -24,17 +24,17 @@
 ## @var{n} that minimizes the least-squares-error of the fit.
 ##
 ## The polynomial coefficients are returned in a row vector.
 ##
 ## The second output is a structure containing the following fields:
 ##
 ## @table @samp
 ## @item R
-## Triangular factor R from the QR decomposition.
+## Triangular factor R from the QR@tie{}decomposition.
 ##
 ## @item X
 ## The Vandermonde matrix used to compute the polynomial coefficients.
 ##
 ## @item df
 ## The degrees of freedom.
 ##
 ## @item normr
diff --git a/scripts/special-matrix/pascal.m b/scripts/special-matrix/pascal.m
--- a/scripts/special-matrix/pascal.m
+++ b/scripts/special-matrix/pascal.m
@@ -16,17 +16,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} pascal (@var{n})
 ## @deftypefnx {Function File} {} pascal (@var{n}, @var{t})
 ## Return the Pascal matrix of order @var{n} if @code{@var{t} = 0}.
-## @var{t} defaults to 0.  Return lower triangular Cholesky factor of
+## @var{t} defaults to 0.  Return lower triangular Cholesky@tie{}factor of
 ## the Pascal matrix if @code{@var{t} = 1}.  This matrix is its own
 ## inverse, that is @code{pascal (@var{n}, 1) ^ 2 == eye (@var{n})}.
 ## If @code{@var{t} = -1}, return its absolute value.  This is the
 ## standard Pascal triangle as a lower-triangular matrix.
 ## If @code{@var{t} = 2}, return a transposed and permuted version of
 ## @code{pascal (@var{n}, 1)}, which is the cube-root of the identity
 ## matrix.  That is @code{pascal (@var{n}, 2) ^ 3 == eye (@var{n})}.
 ##
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2011-01-20  Rik  <octave@nomad.inbox5.com>
+
+	* src/DLD-FUNCTIONS/chol.cc, src/DLD-FUNCTIONS/luinc.cc,
+	src/DLD-FUNCTIONS/qz.cc: Use non-breaking spaces between certain
+	adjectives and their linked nouns in docstrings
+
 2011-01-20  Rik  <octave@nomad.inbox5.com>
 
 	* src/DLD-FUNCTIONS/str2double.cc, src/data.cc, src/mappers.cc,
 	src/variables.cc: Use @nospell macro on certain words in docstring.
 
 2011-01-20  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/__delaunayn__.cc,
diff --git a/src/DLD-FUNCTIONS/chol.cc b/src/DLD-FUNCTIONS/chol.cc
--- a/src/DLD-FUNCTIONS/chol.cc
+++ b/src/DLD-FUNCTIONS/chol.cc
@@ -63,17 +63,17 @@ get_chol_l (const CHOLT& fact)
 DEFUN_DLD (chol, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{R} =} chol (@var{A})\n\
 @deftypefnx {Loadable Function} {[@var{R}, @var{p}] =} chol (@var{A})\n\
 @deftypefnx {Loadable Function} {[@var{R}, @var{p}, @var{Q}] =} chol (@var{S})\n\
 @deftypefnx {Loadable Function} {[@var{R}, @var{p}, @var{Q}] =} chol (@var{S}, 'vector')\n\
 @deftypefnx {Loadable Function} {[@var{L}, @dots{}] =} chol (@dots{}, 'lower')\n\
 @cindex Cholesky factorization\n\
-Compute the Cholesky factor, @var{R}, of the symmetric positive definite\n\
+Compute the Cholesky@tie{}factor, @var{R}, of the symmetric positive definite\n\
 matrix @var{A}, where\n\
 @tex\n\
 $ R^T R = A $.\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
 @var{R}' * @var{R} = @var{A}.\n\
diff --git a/src/DLD-FUNCTIONS/luinc.cc b/src/DLD-FUNCTIONS/luinc.cc
--- a/src/DLD-FUNCTIONS/luinc.cc
+++ b/src/DLD-FUNCTIONS/luinc.cc
@@ -38,17 +38,17 @@ along with Octave; see the file COPYING.
 #include "ov-cx-sparse.h"
 
 DEFUN_DLD (luinc, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {[@var{L}, @var{U}, @var{P}, @var{Q}] =} luinc (@var{A}, '0')\n\
 @deftypefnx {Loadable Function} {[@var{L}, @var{U}, @var{P}, @var{Q}] =} luinc (@var{A}, @var{droptol})\n\
 @deftypefnx {Loadable Function} {[@var{L}, @var{U}, @var{P}, @var{Q}] =} luinc (@var{A}, @var{opts})\n\
 @cindex LU decomposition\n\
-Produce the incomplete LU factorization of the sparse matrix @var{A}.\n\
+Produce the incomplete LU@tie{}factorization of the sparse matrix @var{A}.\n\
 Two types of incomplete factorization are possible, and the type\n\
 is determined by the second argument to @code{luinc}.\n\
 \n\
 Called with a second argument of '0', the zero-level incomplete\n\
 LU@tie{}factorization is produced.  This creates a factorization of @var{A}\n\
 where the position of the non-zero arguments correspond to the same\n\
 positions as in the matrix @var{A}.\n\
 \n\
diff --git a/src/DLD-FUNCTIONS/qz.cc b/src/DLD-FUNCTIONS/qz.cc
--- a/src/DLD-FUNCTIONS/qz.cc
+++ b/src/DLD-FUNCTIONS/qz.cc
@@ -286,33 +286,33 @@ fout (const octave_idx_type& lsize, cons
   else
     return (fabs (p) >= 1 ? 1 : -1);
 }
 
 DEFUN_DLD (qz, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{lambda} =} qz (@var{A}, @var{B})\n\
 @deftypefnx {Loadable Function} {@var{lambda} =} qz (@var{A}, @var{B}, @var{opt})\n\
-QZ decomposition of the generalized eigenvalue problem (@math{A x = s B x}).\n\
-There are three ways to call this function:\n\
+QZ@tie{}decomposition of the generalized eigenvalue problem\n\
+(@math{A x = s B x}).  There are three ways to call this function:\n\
 @enumerate\n\
 @item @code{@var{lambda} = qz (@var{A}, @var{B})}\n\
 \n\
 Computes the generalized eigenvalues\n\
 @tex\n\
 $\\lambda$\n\
 @end tex\n\
 @ifnottex\n\
 @var{lambda}\n\
 @end ifnottex\n\
 of @math{(A - s B)}.\n\
 \n\
 @item @code{[AA, BB, Q, Z, V, W, @var{lambda}] = qz (@var{A}, @var{B})}\n\
 \n\
-Computes QZ decomposition, generalized eigenvectors, and \n\
+Computes QZ@tie{}decomposition, generalized eigenvectors, and \n\
 generalized eigenvalues of @math{(A - s B)}\n\
 @tex\n\
 $$ AV = BV{ \\rm diag }(\\lambda) $$\n\
 $$ W^T A = { \\rm diag }(\\lambda)W^T B $$\n\
 $$ AA = Q^T AZ, BB = Q^T BZ $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
