# HG changeset patch
# User Carlo de Falco <carlo.defalco@polimi.it>
# Date 1518818354 -3600
#      Fri Feb 16 22:59:14 2018 +0100
# Node ID 90bd5649983ce5db4dc4fd02a995067305bdf257
# Parent  b96c76aed31e08e13b1a1a041bb0c45cc033ee64
Fix make_int example (bug #53156)

* examples/code/make_int.cc : adapt example code to new interpreter class.

diff --git a/examples/code/make_int.cc b/examples/code/make_int.cc
--- a/examples/code/make_int.cc
+++ b/examples/code/make_int.cc
@@ -1,37 +1,34 @@
-#include <octave/config.h>
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
 
 #include <cstdlib>
-
+#include <ostream>
 #include <string>
 
-#include <ostream>
-
 #include <octave/lo-mappers.h>
 #include <octave/lo-utils.h>
 #include <octave/mx-base.h>
 #include <octave/str-vec.h>
 
 #include <octave/defun-dld.h>
-#include <octave/error.h>
-#include <octave/gripes.h>
-#include <octave/oct-obj.h>
+#include <octave/errwarn.h>
+#include <octave/interpreter.h>
 #include <octave/ops.h>
 #include <octave/ov-base.h>
+#include <octave/ov-scalar.h>
 #include <octave/ov-typeinfo.h>
 #include <octave/ov.h>
-#include <octave/ov-scalar.h>
+#include <octave/ovl.h>
 #include <octave/pager.h>
 #include <octave/pr-output.h>
 #include <octave/variables.h>
 
-class octave_value_list;
-
-class tree_walker;
 
 // Integer values.
 
 class
 octave_integer : public octave_base_value
 {
 public:
 
@@ -162,44 +159,44 @@ DEFBINOP_OP (mul, integer, integer, *)
 DEFBINOP (div, integer, integer)
 {
   const octave_integer& v1 = dynamic_cast<const octave_integer&> (a1);
   const octave_integer& v2 = dynamic_cast<const octave_integer&> (a2);
 
   int d = v2.integer_value ();
 
   if (d == 0)
-    gripe_divide_by_zero ();
+    warn_divide_by_zero ();
 
   return new octave_integer (v1.integer_value () / d);
 }
 
 
 DEFBINOP (i_s_div, integer, scalar)
 {
   const octave_integer& v1 = dynamic_cast<const octave_integer&> (a1);
   const octave_scalar& v2 = dynamic_cast<const octave_scalar&> (a2);
 
   double d = v2.double_value ();
 
   if (d == 0.0)
-    gripe_divide_by_zero ();
+    warn_divide_by_zero ();
 
   return new octave_scalar (v1.double_value () / d);
 }
 
 DEFBINOP (ldiv, integer, integer)
 {
   const octave_integer& v1 = dynamic_cast<const octave_integer&> (a1);
   const octave_integer& v2 = dynamic_cast<const octave_integer&> (a2);
 
   int d = v1.integer_value ();
 
   if (d == 0)
-    gripe_divide_by_zero ();
+    warn_divide_by_zero ();
 
   return new octave_integer (v2.integer_value () / d);
 }
 
 DEFBINOP_OP (lt, integer, integer, <)
 DEFBINOP_OP (le, integer, integer, <=)
 DEFBINOP_OP (eq, integer, integer, ==)
 DEFBINOP_OP (ge, integer, integer, >=)
@@ -211,30 +208,30 @@ DEFBINOP_OP (el_mul, integer, integer, !
 DEFBINOP (el_div, integer, integer)
 {
   const octave_integer& v1 = dynamic_cast<const octave_integer&> (a1);
   const octave_integer& v2 = dynamic_cast<const octave_integer&> (a2);
 
   int d = v2.integer_value ();
 
   if (d == 0)
-    gripe_divide_by_zero ();
+    warn_divide_by_zero ();
 
   return new octave_integer (v1.integer_value () / d);
 }
 
 DEFBINOP (el_ldiv, integer, integer)
 {
   const octave_integer& v1 = dynamic_cast<const octave_integer&> (a1);
   const octave_integer& v2 = dynamic_cast<const octave_integer&> (a2);
 
   int d = v1.integer_value ();
 
   if (d == 0)
-    gripe_divide_by_zero ();
+    warn_divide_by_zero ();
 
   return new octave_integer (v2.integer_value () / d);
 }
 
 DEFBINOP_OP (el_and, integer, integer, &&)
 DEFBINOP_OP (el_or, integer, integer, ||)
 
 DEFMETHOD_DLD (make_int, interp, args, ,
@@ -247,42 +244,46 @@ Creates an integer variable from VAL.")
   if (! type_loaded)
     {
       octave_integer::register_type ();
       interp.mlock ();
 
       octave_stdout << "installing integer type at type-id = "
                     << octave_integer::static_type_id () << "\n";
 
-      INSTALL_UNOP (op_not, octave_integer, gnot);
-      INSTALL_UNOP (op_uminus, octave_integer, uminus);
-      INSTALL_UNOP (op_transpose, octave_integer, transpose);
-      INSTALL_UNOP (op_hermitian, octave_integer, hermitian);
+      octave::type_info& ti = interp.get_type_info ();
 
-      INSTALL_NCUNOP (op_incr, octave_integer, incr);
-      INSTALL_NCUNOP (op_decr, octave_integer, decr);
+      INSTALL_UNOP_TI (ti, op_not, octave_integer, gnot);
+      INSTALL_UNOP_TI (ti, op_uminus, octave_integer, uminus);
+      INSTALL_UNOP_TI (ti, op_transpose, octave_integer, transpose);
+      INSTALL_UNOP_TI (ti, op_hermitian, octave_integer, hermitian);
+
+      INSTALL_NCUNOP_TI (ti, op_incr, octave_integer, incr);
+      INSTALL_NCUNOP_TI (ti, op_decr, octave_integer, decr);
 
-      INSTALL_BINOP (op_add, octave_integer, octave_integer, add);
-      INSTALL_BINOP (op_sub, octave_integer, octave_integer, sub);
-      INSTALL_BINOP (op_mul, octave_integer, octave_integer, mul);
-      INSTALL_BINOP (op_div, octave_integer, octave_integer, div);
-      INSTALL_BINOP (op_ldiv, octave_integer, octave_integer, ldiv);
-      INSTALL_BINOP (op_lt, octave_integer, octave_integer, lt);
-      INSTALL_BINOP (op_le, octave_integer, octave_integer, le);
-      INSTALL_BINOP (op_eq, octave_integer, octave_integer, eq);
-      INSTALL_BINOP (op_ge, octave_integer, octave_integer, ge);
-      INSTALL_BINOP (op_gt, octave_integer, octave_integer, gt);
-      INSTALL_BINOP (op_ne, octave_integer, octave_integer, ne);
-      INSTALL_BINOP (op_el_mul, octave_integer, octave_integer, el_mul);
-      INSTALL_BINOP (op_el_div, octave_integer, octave_integer, el_div);
-      INSTALL_BINOP (op_el_ldiv, octave_integer, octave_integer, el_ldiv);
-      INSTALL_BINOP (op_el_and, octave_integer, octave_integer, el_and);
-      INSTALL_BINOP (op_el_or, octave_integer, octave_integer, el_or);
+      INSTALL_BINOP_TI (ti, op_add, octave_integer, octave_integer, add);
+      INSTALL_BINOP_TI (ti, op_sub, octave_integer, octave_integer, sub);
+      INSTALL_BINOP_TI (ti, op_mul, octave_integer, octave_integer, mul);
+      INSTALL_BINOP_TI (ti, op_div, octave_integer, octave_integer, div);
+      INSTALL_BINOP_TI (ti, op_ldiv, octave_integer, octave_integer, ldiv);
+      INSTALL_BINOP_TI (ti, op_lt, octave_integer, octave_integer, lt);
+      INSTALL_BINOP_TI (ti, op_le, octave_integer, octave_integer, le);
+      INSTALL_BINOP_TI (ti, op_eq, octave_integer, octave_integer, eq);
+      INSTALL_BINOP_TI (ti, op_ge, octave_integer, octave_integer, ge);
+      INSTALL_BINOP_TI (ti, op_gt, octave_integer, octave_integer, gt);
+      INSTALL_BINOP_TI (ti, op_ne, octave_integer, octave_integer, ne);
+      INSTALL_BINOP_TI (ti, op_el_mul, octave_integer, octave_integer, el_mul);
+      INSTALL_BINOP_TI (ti, op_el_div, octave_integer, octave_integer, el_div);
+      INSTALL_BINOP_TI (ti, op_el_ldiv, octave_integer, octave_integer, el_ldiv);
+      INSTALL_BINOP_TI (ti, op_el_and, octave_integer, octave_integer, el_and);
+      INSTALL_BINOP_TI (ti, op_el_or, octave_integer, octave_integer, el_or);
 
-      INSTALL_BINOP (op_div, octave_integer, octave_scalar, i_s_div);
+      INSTALL_BINOP_TI (ti, op_div, octave_integer, octave_scalar, i_s_div);
+
+      type_loaded = true;
     }
 
   octave_value retval;
 
   if (args.length () == 1)
     {
       double d = args(0).double_value ();
 
@@ -307,15 +308,15 @@ DEFUN_DLD (doit, args, ,
 
       const octave_base_value& rep = args(0).get_rep ();
 
       int my_value = ((const octave_integer&) rep) . integer_value ();
 
       message ("doit", "your lucky number is: %d", my_value);
     }
   else
-    gripe_wrong_type_arg ("doit", args(0));
+    err_wrong_type_arg ("doit", args(0));
 
   return retval;
 }
 
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_integer, "integer", "integer");
