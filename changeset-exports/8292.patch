# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1225375730 -3600
#      Thu Oct 30 15:08:50 2008 +0100
# Node ID 242756f065f08bc846ae1399b0163721c1acf76b
# Parent  53f35799b2355409f6b3883069cfab2136127765
Minor NEWS/FAQ update

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2008-10-30  David Bateman  <dbateman@free.fr>
+
+	* NEWS: Minor update to document improved indexing code.
+
 2008-10-23  Jason Riedy  <jason@acm.org>
 
 	* configure.in: Take care to use FT2_CFLAGS when checking
 	for FTGL headers.
 
 2008-10-22  David Bateman  <dbateman@free.fr>
 
 	* examples/@polynomial: Move examples/polynomial here.
diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -100,9 +100,13 @@ Summary of important user-visible change
 
     all create single precision variables. Mixed double/single
     precision operators and functions return single precision
     types. As a consequence of this addition to Octave the internal
     representation of the double precision NA value has changed, and
     so users that make use of data generated by Octave with R or
     visa-versa are warned that compatibility might not be assured.
 
+ ** Improved array indexing
+    The underlying code used for indexing of arrays has been completely
+    rewritten and so the indexing of arrays is now significantly faster.
+
 See NEWS.3 for old news.
diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,10 +1,14 @@
 2008-10-30  David Bateman  <dbateman@free.fr>
 
+	* faq/Octave-FAQ.texi: Document improved indexing and add an faq for
+	the compatibility of mldivide/mrdivide for singualr, under- and 
+	over-determined matrices.
+	
 	* interpreter/plot.txi: Document contour groups.
 
 2008-10-29  Thorsten Meyer  <tmeyier@gmx.de>
 
 	* interpreter/system.txi, interpreter/poly.txi,
 	interpreter/arith.txi, interpreter/poly.txi,
 	interpreter/optim.txi, interpreter/diffeq.txi,
 	interpreter/sparse.txi, interpreter/matrix.txi,
diff --git a/doc/faq/Octave-FAQ.texi b/doc/faq/Octave-FAQ.texi
--- a/doc/faq/Octave-FAQ.texi
+++ b/doc/faq/Octave-FAQ.texi
@@ -246,16 +246,20 @@ The functions are based on the GraphicsM
 
 @item Lazy transpose
 
 Special treatment in the parser of things like "a' * b", where the
 transpose is never explicitly formed but a flag is rather passed to the
 underlying LAPACK code.
 
 @item Single precision type
+
+@item Improved array indexing
+The underlying code used for indexing of arrays has been completely
+rewritten and so the indexing of arrays is now significantly faster.
 @end itemize
 
 
 @node Octave Features
 @chapter What features are unique to Octave?
 
 @menu
 * Functions defined on the command-line::
@@ -856,17 +860,17 @@ arrays as real and imaginary parts, wher
 standards of co-locating the real/imag parts in memory.  Also due to the
 way @sc{Matlab} allows access to the arrays passed through a pointer,
 the MEX interface might require copies of arrays (even non complex
 ones).
 
 @item Block comments
 Block comments denoted by "%@{" and "%@}" markers are supported by
 Octave with some limitations. The major limitation is that block
-comments are not supported with [] or @{@}.
+comments are not supported within [] or @{@}.
 
 @item Mat-File format
 There are some differences in the mat v5 file format accepted by
 Octave. @sc{Matlab} recently introduced the "-V7.3" save option which is
 an HDF5 format which is particularly useful for 64-bit platforms where
 the standard matlab format can not correctly save variables.. Octave
 accepts HDF5 files, but is not yet compatible with the "-v7.3" versions
 produced by @sc{Matlab}. 
@@ -976,16 +980,90 @@ returning true if none of the elements o
 there are no elements, well, none of them are zero).  But, somewhere
 along the line, someone decided that if @code{([])} should be false.
 Mathworks probably thought it just looks wrong to have @code{[]} be true
 in this context even if you can use logical gymnastics to convince
 yourself that "all" the elements of a matrix that doesn't actually have
 any elements are nonzero. Octave however duplicates this behavior for if
 statements containing empty matrices.
 
+@item Solvers for singular, under- and over-determined matrices
+
+Matlab's solvers as used by the operators mldivide (\) and mrdivide (/),
+use a different approach than Octave's in the case of singular, under-, 
+or over-determined matrices. In the case of a singular matrix, Matlab
+returns the result given by the LU decomposition, even though the underlying
+solver has flagged the result as erroneous. Octave has made the choice
+of falling back to a minimum norm solution of matrices that have been
+flagged as singular which arguably is a better result for these cases.
+
+In the case of under- or over-determined matrices, Octave continues to
+use a minimum norm solution, whereas Matlab uses an approach that is
+equivalent to
+
+@example
+@group
+function x = mldivide (A, b)
+  [Q, R, E] = qr(A);
+  x = [A \ b, E(:, 1:m) * (R(:, 1:m) \ (Q' * b))]
+end
+@end group
+@end example
+
+@noindent
+While this approach is certainly faster and uses less memory than
+Octave's minimum norm approach, this approach seems to be inferior in
+other ways.
+
+A numerical question arises: how big can the null space component become,
+relative to the minimum-norm solution? Can it be nicely bounded, or can it be
+arbitrarily big? Consider this example:
+
+@example
+@group
+m = 10; 
+n = 10000; 
+A = ones(m, n) + 1e-6 * randn(m,n); 
+b = ones(m, 1) + 1e-6 * randn(m,1); 
+norm(A \ b)
+@end group
+@end example
+
+@noindent
+while Octave's minimum-norm values are around 3e-2, Matlab's results
+are 50-times larger. For another issue, try this code:
+
+@example
+@group
+m = 5; 
+n = 100; 
+j = floor(m * rand(1, n)) + 1; 
+b = ones(m, 1);
+A = zeros(m, n);
+A(sub2ind(size(A),j,1:n)) = 1;
+x = A \ b; 
+[dummy,p] = sort(rand(1,n)); 
+y = A(:,p)\b; 
+norm(x(p)-y)
+@end group
+@end example
+
+@noindent
+It shows that unlike in Octave, mldivide in Matlab is not invariant
+with respect to column permutations. If there are multiple columns of
+the same norm, permuting columns of the matrix gets you different
+result than permuting the solution vector. This will surprise many
+users.
+
+Since the mldivide (\) and mrdivide (/) operators are often part of a more 
+complex expression, where there is no room to react to warnings or flags, it 
+should prefer intelligence (robustness) to speed, and so the Octave developers
+are firmly of the opinion that Octave's approach for singular, under- and
+over-determined matrices is a better choice that Matlab's
+
 @item Octave extensions
 The extensions in Octave over @sc{Matlab} syntax are
 very useful, but might cause issues when sharing with @sc{Matlab} users.
 A list of the major extensions that should be avoided to be compatible
 with @sc{Matlab} are
 
 @itemize @bullet
 @item
