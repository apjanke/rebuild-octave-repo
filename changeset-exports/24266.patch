# HG changeset patch
# User Rik <rik@octave.org>
# Date 1510884743 28800
#      Thu Nov 16 18:12:23 2017 -0800
# Node ID c372b091f622e178d13cd5f814fac6446bbad847
# Parent  3b302b2890d7686b3a7e23bebeb74e63ba49797b
# Parent  4746bd294c54aeb2f6e3fb40372531ca9abcd730
maint: merge stable to default.

diff --git a/scripts/general/accumarray.m b/scripts/general/accumarray.m
--- a/scripts/general/accumarray.m
+++ b/scripts/general/accumarray.m
@@ -42,18 +42,18 @@
 ## the same subscripts.  This behavior can be modified by defining the
 ## @var{func} function.  This should be a function or function handle
 ## that accepts a column vector and returns a scalar.  The result of the
 ## function should not depend on the order of the subscripts.
 ##
 ## The elements of the returned array that have no subscripts associated
 ## with them are set to zero.  Defining @var{fillval} to some other value
 ## allows these values to be defined.  This behavior changes, however,
-## for certain values of @var{func}.  If @var{func} is @code{min}
-## (respectively, @code{max}) then the result will be filled with the
+## for certain values of @var{func}.  If @var{func} is @code{@@min}
+## (respectively, @code{@@max}) then the result will be filled with the
 ## minimum (respectively, maximum) integer if @var{vals} is of integral
 ## type, logical false (respectively, logical true) if @var{vals} is of
 ## logical type, zero if @var{fillval} is zero and all values are
 ## non-positive (respectively, non-negative), and NaN otherwise.
 ##
 ## By default @code{accumarray} returns a full matrix.  If
 ## @var{issparse} is logically true, then a sparse matrix is returned
 ## instead.
diff --git a/scripts/geometry/delaunay.m b/scripts/geometry/delaunay.m
--- a/scripts/geometry/delaunay.m
+++ b/scripts/geometry/delaunay.m
@@ -19,30 +19,30 @@
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{tri} =} delaunay (@var{x}, @var{y})
 ## @deftypefnx {} {@var{tetr} =} delaunay (@var{x}, @var{y}, @var{z})
 ## @deftypefnx {} {@var{tri} =} delaunay (@var{x})
 ## @deftypefnx {} {@var{tri} =} delaunay (@dots{}, @var{options})
 ## Compute the Delaunay triangulation for a 2-D or 3-D set of points.
 ##
 ## For 2-D sets, the return value @var{tri} is a set of triangles which
-## satisfies the Delaunay circum-circle criterion, i.e., only a single data
-## point from [@var{x}, @var{y}] is within the circum-circle of the defining
-## triangle.  The set of triangles @var{tri} is a matrix of size [n, 3].  Each
-## row defines a triangle and the three columns are the three vertices of the
-## triangle.  The value of @code{@var{tri}(i,j)} is an index into @var{x} and
-## @var{y} for the location of the j-th vertex of the i-th triangle.
+## satisfies the Delaunay circum-circle criterion, i.e., no data point from
+## [@var{x}, @var{y}] is within the circum-circle of the defining triangle.
+## The set of triangles @var{tri} is a matrix of size [n, 3].  Each row defines
+## a triangle and the three columns are the three vertices of the triangle.
+## The value of @code{@var{tri}(i,j)} is an index into @var{x} and @var{y} for
+## the location of the j-th vertex of the i-th triangle.
 ##
 ## For 3-D sets, the return value @var{tetr} is a set of tetrahedrons which
-## satisfies the Delaunay circum-circle criterion, i.e., only a single data
-## point from [@var{x}, @var{y}, @var{z}] is within the circum-circle of the
-## defining tetrahedron.  The set of tetrahedrons is a matrix of size [n, 4].
-## Each row defines a tetrahedron and the four columns are the four vertices of
-## the tetrahedron.  The value of @code{@var{tetr}(i,j)} is an index into
-## @var{x}, @var{y}, @var{z} for the location of the j-th vertex of the i-th
+## satisfies the Delaunay circum-circle criterion, i.e., no data point from
+## [@var{x}, @var{y}, @var{z}] is within the circum-circle of the defining
+## tetrahedron.  The set of tetrahedrons is a matrix of size [n, 4].  Each row
+## defines a tetrahedron and the four columns are the four vertices of the
+## tetrahedron.  The value of @code{@var{tetr}(i,j)} is an index into @var{x},
+## @var{y}, @var{z} for the location of the j-th vertex of the i-th
 ## tetrahedron.
 ##
 ## The input @var{x} may also be a matrix with two or three columns where the
 ## first column contains x-data, the second y-data, and the optional third
 ## column contains z-data.
 ##
 ## The optional last argument, which must be a string or cell array of strings,
 ## contains options passed to the underlying qhull command.
