# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1222103492 14400
#      Mon Sep 22 13:11:32 2008 -0400
# Node ID eb2beef9a9ffdfdc88df091b9bc1a1ceabdf3a94
# Parent  99602635172ad7db133d2ffd459e6ed235c5be50
clear breakpoints is function found to be out of date

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,27 @@
+2008-09-22  David Bateman  <dbateman@free.fr>
+
+	* debug.cc (static octave_user_code * get_user_code 
+	(const std::string&)): Only check user code as break points can't
+	be set in builtins or oct-files.
+	(bp_table::intmap bp_table::do_remove_all_breakpoints_in_file 
+	(const std::string&, bool)): Add flag to silence the error message 
+	from this function if a user code with breakpoints is not found.
+	(bp_table::fname_line_map bp_table::do_get_breakpoint_list (const 
+	octave_value_list&)): Do an ourt of date check on the function
+	before checking the breakpoints.
+	* debug.h (do_remove_all_breakpoints_in_file, 
+	remove_all_breakpoints_in_file): Add flag to silence error
+	message.
+	* symtab.cc (out_of_date_check_internal): Clear breakpoints in
+	function if out_of_date. split into two versions taking the 
+	octave_function pointer seperately or not.
+	* symtab.h (bool out_of_date_check (octave_function*)): New function.
+	
 2008-09-18  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/fftw.cc (Ffftw): Clarify the documentation.
 
 2008-09-17  Krzesimir Nowak  <qdlacz@gmail.com>
 
 	* debug.cc (Fisdebugmode): New function.
 
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -67,17 +67,17 @@ get_user_code (const std::string& fname 
   octave_user_code *dbg_fcn = 0;
 
   if (fname.empty ())
     dbg_fcn = octave_call_stack::caller_user_code ();
   else
     {
       octave_value fcn = symbol_table::find_function (fname);
 
-      if (fcn.is_defined ())
+      if (fcn.is_defined () && fcn.is_user_code ())
 	dbg_fcn = fcn.user_code_value ();
     }
 
   return dbg_fcn;
 }
 
 static void
 parse_dbfunction_params (const char *who, const octave_value_list& args, 
@@ -233,17 +233,18 @@ bp_table::do_remove_breakpoint (const st
       else
 	error ("remove_breakpoint: unable to find the function requested\n");
     }
   return retval;
 }
 
 
 bp_table::intmap
-bp_table::do_remove_all_breakpoints_in_file (const std::string& fname)
+bp_table::do_remove_all_breakpoints_in_file (const std::string& fname, 
+					     bool silent)
 {
   intmap retval;
 
   octave_user_code *dbg_fcn = get_user_code (fname);
   
   if (dbg_fcn)
     {
       tree_statement_list *cmds = dbg_fcn->body ();
@@ -260,17 +261,17 @@ bp_table::do_remove_all_breakpoints_in_f
 	    }
 
 	  breakpoint_map_iterator it = bp_map.find (fname);
 
 	  if (it != bp_map.end ())
 	    bp_map.erase (it);
 	}
     }
-  else
+  else if (! silent)
     error ("remove_all_breakpoint_in_file: "
 	   "unable to find the function requested\n");
 
   return retval;
 }
 
 void 
 bp_table::do_remove_all_breakpoints (void)
@@ -308,30 +309,36 @@ bp_table::do_get_breakpoint_list (const 
 
   for (breakpoint_map_iterator it = bp_map.begin (); it != bp_map.end (); it++)
     {
       if (fname_list.length () == 0
 	  || do_find_bkpt_list (fname_list, it->first) != "")
 	{
 	  octave_user_code *f = it->second;
 
+	  // Clears the breakpoints if the function has been updated
+	  out_of_date_check (f);
+
 	  tree_statement_list *cmds = f->body ();
 
 	  if (cmds)
 	    {
 	      octave_value_list bkpts = cmds->list_breakpoints ();
 
 	      octave_idx_type len = bkpts.length (); 
 
-	      bp_table::intmap bkpts_vec;
+	      if (len > 0)
+		{
+		  bp_table::intmap bkpts_vec;
 
-	      for (int i = 0; i < len; i++)
-		bkpts_vec[i] = bkpts (i).double_value ();
+		  for (int i = 0; i < len; i++)
+		    bkpts_vec[i] = bkpts (i).double_value ();
 
-	      retval[it->first] = bkpts_vec;
+		  retval[it->first] = bkpts_vec;
+		}
 	    }
 	}
     }
 
   return retval;
 }
 
 static octave_value
diff --git a/src/debug.h b/src/debug.h
--- a/src/debug.h
+++ b/src/debug.h
@@ -80,20 +80,21 @@ public:
   static int remove_breakpoint (const std::string& fname = "", 
 				const intmap& lines = intmap ())
   {
     return instance_ok ()
       ? instance->do_remove_breakpoint (fname, lines) : 0;
   }
 
   // Remove all the breakpoints in a specified file.
-  static intmap remove_all_breakpoints_in_file (const std::string& fname)
+  static intmap remove_all_breakpoints_in_file (const std::string& fname,
+						bool silent = false)
   {
     return instance_ok ()
-      ? instance->do_remove_all_breakpoints_in_file (fname) : intmap ();
+      ? instance->do_remove_all_breakpoints_in_file (fname, silent) : intmap ();
   }
   
   // Remove all the breakpoints registered with octave.
   static void remove_all_breakpoints (void)
   {
     if (instance_ok ())
       instance->do_remove_all_breakpoints ();
   }
@@ -119,17 +120,18 @@ private:
   breakpoint_map bp_map;
 
   static bp_table *instance;
 
   intmap do_add_breakpoint (const std::string& fname, const intmap& lines);
 
   int do_remove_breakpoint (const std::string&, const intmap& lines);
 
-  intmap do_remove_all_breakpoints_in_file (const std::string& fname);
+  intmap do_remove_all_breakpoints_in_file (const std::string& fname, 
+					    bool silent);
 
   void do_remove_all_breakpoints (void);
 
   fname_line_map do_get_breakpoint_list (const octave_value_list& fname_list);
 
 };
 
 #endif
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -37,16 +37,17 @@ along with Octave; see the file COPYING.
 #include "symtab.h"
 #include "ov-fcn.h"
 #include "pager.h"
 #include "parse.h"
 #include "pt-arg-list.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
+#include "debug.h"
 
 symbol_table *symbol_table::instance = 0;
 
 symbol_table::scope_id_cache *symbol_table::scope_id_cache::instance = 0;
 
 std::map<symbol_table::scope_id, symbol_table*> symbol_table::all_instances;
 
 std::map<std::string, octave_value> symbol_table::global_table;
@@ -146,23 +147,21 @@ load_out_of_date_fcn (const std::string&
     }
   else
     function = octave_value ();
 
   return retval;
 }
 
 static inline bool
-out_of_date_check_internal (octave_value& function,
+out_of_date_check_internal (octave_function *fcn, octave_value& function,
 			    const std::string& dispatch_type = std::string ())
 {
   bool retval = false;
 
-  octave_function *fcn = function.function_value (true);
-
   if (fcn)
     {
       // FIXME -- we need to handle nested functions properly here.
 
       if (! fcn->is_nested_function ())
 	{
 	  std::string ff = fcn->fcn_file_name ();
 
@@ -170,16 +169,17 @@ out_of_date_check_internal (octave_value
 	    {
 	      octave_time tc = fcn->time_checked ();
 
 	      bool relative = fcn->is_relative ();
 
 	      if (tc < Vlast_prompt_time
 		  || (relative && tc < Vlast_chdir_time))
 		{
+		  bool clear_breakpoints = false;
 		  std::string nm = fcn->name ();
 
 		  int nm_len = nm.length ();
 
 		  std::string file;
 		  std::string dir_name;
 
 		  if (octave_env::absolute_pathname (nm)
@@ -202,16 +202,18 @@ out_of_date_check_internal (octave_value
 		    }
 
 		  if (file.empty ())
 		    {
 		      // Can't see this function from current
 		      // directory, so we should clear it.
 
 		      function = octave_value ();
+
+		      clear_breakpoints = true;
 		    }
 		  else if (same_file (file, ff))
 		    {
 		      // Same file.  If it is out of date, then reload it.
 
 		      octave_time ottp = fcn->time_parsed ();
 		      time_t tp = ottp.unix_time ();
 
@@ -221,44 +223,74 @@ out_of_date_check_internal (octave_value
 			     || (Vignore_function_time_stamp
 				 && fcn->is_system_fcn_file ())))
 			{
 			  file_stat fs (ff);
 
 			  if (fs)
 			    {
 			      if (fs.is_newer (tp))
-				retval = load_out_of_date_fcn (ff, dir_name,
-							       function);
+				{
+				  retval = load_out_of_date_fcn (ff, dir_name,
+								 function);
+
+				  clear_breakpoints = true;
+				}
 			    }
 			  else
-			    function = octave_value ();
+			    {
+			      function = octave_value ();
+
+			      clear_breakpoints = true;
+			    }
 			}
 		    }
 		  else
 		    {
 		      // Not the same file, so load the new file in
 		      // place of the old.
 
 		      retval = load_out_of_date_fcn (file, dir_name, function);
+
+		      clear_breakpoints = true;
 		    }
+
+		  // If the function has been replaced then clear any 
+		  // breakpoints associated with it
+		  if (clear_breakpoints)
+		    bp_table::remove_all_breakpoints_in_file (nm, true);
 		}
 	    }
 	}
     }
 
   return retval;
 }
 
+static inline bool
+out_of_date_check_internal (octave_value& function,
+			    const std::string& dispatch_type = std::string ())
+{
+  return out_of_date_check_internal (function.function_value (true),
+				     function, dispatch_type);
+}
+
 bool
 out_of_date_check (octave_value& function)
 {
   return out_of_date_check_internal (function);
 }
 
+bool
+out_of_date_check (octave_function* fcn)
+{
+  octave_value function;
+  return out_of_date_check_internal (fcn, function);
+}
+
 octave_value
 symbol_table::fcn_info::fcn_info_rep::load_private_function
   (const std::string& dir_name)
 {
   octave_value retval;
 
   std::string file_name = load_path::find_private_fcn (dir_name, name);
 
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -2287,15 +2287,17 @@ private:
 
   void do_dump (std::ostream& os);
 
   void do_cache_name (const std::string& name) { table_name = name; }
 };
 
 extern bool out_of_date_check (octave_value& function);
 
+extern bool out_of_date_check (octave_function* fcn);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
