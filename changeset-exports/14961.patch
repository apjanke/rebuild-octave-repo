# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1340129410 18000
#      Tue Jun 19 13:10:10 2012 -0500
# Node ID 903a5ee2cdde36df2fe7205da94ce042641aa9aa
# Parent  c959136f8c3edaeea6f9a777888cacd229bc9128
Simplify the creation of error checks in jit

* src/pt-jit.h (jit_convert::create_checked,
  jit_convert::create_checked_impl): New function.

* src/pt-jit.cc (jit_convert::visit_binary_expression,
  jit_convert::visit_if_command, jit_convert::visit_index_expression):
  Use create_checked.

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -1610,23 +1610,17 @@ jit_convert::visit_binary_expression (tr
 
   tree_expression *lhs = be.lhs ();
   jit_value *lhsv = visit (lhs);
 
   tree_expression *rhs = be.rhs ();
   jit_value *rhsv = visit (rhs);
 
   const jit_function& fn = jit_typeinfo::binary_op (be.op_type ());
-  jit_call *call = block->append (create<jit_call> (fn, lhsv, rhsv));
-
-  jit_block *normal = create<jit_block> (block->name ());
-  block->append (create<jit_error_check> (call, normal, final_block));
-  add_block (normal);
-  block = normal;
-  result = call;
+  result = create_checked (fn, lhsv, rhsv);
 }
 
 void
 jit_convert::visit_break_command (tree_break_command&)
 {
   breaks.push_back (block);
   breaking = true;
 }
@@ -1864,25 +1858,20 @@ jit_convert::visit_if_command_list (tree
 
       if (i) // the first block is prev_block, so it has already been added
         add_block (entry_blocks[i]);
 
       if (! tic->is_else_clause ())
         {
           tree_expression *expr = tic->condition ();
           jit_value *cond = visit (expr);
-          jit_call *check = create<jit_call> (&jit_typeinfo::logically_true,
-                                              cond);
+          jit_call *check = create_checked (&jit_typeinfo::logically_true,
+                                            cond);
           block->append (check);
 
-          jit_block *next = create<jit_block> (block->name ());
-          add_block (next);
-          block->append (create<jit_error_check> (check, next, final_block));
-          block = next;
-
           jit_block *body = create<jit_block> (i == 0 ? "if_body"
                                                : "ifelse_body");
           add_block (body);
 
           jit_instruction *br = create<jit_cond_branch> (check, body,
                                                         entry_blocks[i + 1]);
           block->append (br);
           block = body;
@@ -1930,25 +1919,17 @@ jit_convert::visit_index_expression (tre
     fail ("Bad number of arguments in arg_list");
 
   tree_expression *tree_object = exp.expression ();
   jit_value *object = visit (tree_object);
 
   tree_expression *arg0 = arg_list->front ();
   jit_value *index = visit (arg0);
 
-  jit_call *call = create<jit_call> (jit_typeinfo::paren_subsref, object,
-                                     index);
-  block->append (call);
-
-  jit_block *normal = create<jit_block> (block->name ());
-  block->append (create<jit_error_check> (call, normal, final_block));
-  add_block (normal);
-  block = normal;
-  result = call;
+  result = create_checked (jit_typeinfo::paren_subsref, object, index);
 }
 
 void
 jit_convert::visit_matrix (tree_matrix&)
 {
   fail ();
 }
 
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -2056,16 +2056,31 @@ public:
             typename ARG3>
   T *create (const ARG0& arg0, const ARG1& arg1, const ARG2& arg2,
              const ARG3& arg3)
   {
     T *ret = new T(arg0, arg1, arg2, arg3);
     track_value (ret);
     return ret;
   }
+
+  template <typename ARG0, typename ARG1>
+  jit_call *create_checked (const ARG0& arg0, const ARG1& arg1)
+  {
+    jit_call *ret = create<jit_call> (arg0, arg1);
+    return create_checked_impl (ret);
+  }
+
+  template <typename ARG0, typename ARG1, typename ARG2>
+  jit_call *create_checked (const ARG0& arg0, const ARG1& arg1,
+                            const ARG2& arg2)
+  {
+    jit_call *ret = create<jit_call> (arg0, arg1, arg2);
+    return create_checked_impl (ret);
+  }
 private:
   typedef std::list<jit_block *> block_list;
   typedef block_list::iterator block_iterator;
 
   std::vector<std::pair<std::string, bool> > arguments;
   type_bound_vector bounds;
 
   // used instead of return values from visit_* functions
@@ -2093,16 +2108,28 @@ private:
   vmap_t vmap;
 
   void add_block (jit_block *ablock)
   {
     blocks.push_back (ablock);
     ablock->stash_location (--blocks.end ());
   }
 
+  jit_call *create_checked_impl (jit_call *ret)
+  {
+    block->append (ret);
+
+    jit_block *normal = create<jit_block> (block->name ());
+    block->append (create<jit_error_check> (ret, normal, final_block));
+    add_block (normal);
+    block = normal;
+
+    return ret;
+  }
+
   jit_variable *get_variable (const std::string& vname);
 
   jit_value *do_assign (const std::string& lhs, jit_value *rhs, bool print);
 
 
   jit_value *visit (tree *tee) { return visit (*tee); }
 
   jit_value *visit (tree& tee);
