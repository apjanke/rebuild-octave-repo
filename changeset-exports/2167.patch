# HG changeset patch
# User jwe
# Date 831997246 0
#      Mon May 13 14:20:46 1996 +0000
# Node ID d9b54157573429f2229af957f1722045bb335375
# Parent  d681195167798ad83b4f631cfb391c8289974f92
[project @ 1996-05-13 14:20:46 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -106,16 +106,59 @@ private:
 
   brace_paren_nesting_level (const brace_paren_nesting_level&);
 
   brace_paren_nesting_level& operator = (const brace_paren_nesting_level&);
 };
 
 static brace_paren_nesting_level nesting_level;
 
+// Should whitespace in a literal matrix list be automatically
+// converted to commas and semicolons?
+//
+//   user specifies   value of var
+//   --------------   ------------
+//   "ignore"              2
+//   "traditional"         1
+//   anything else         0
+//
+// Octave will never insert a comma in a literal matrix list if the
+// user specifies "ignore".  For example, the statement [1 2] will
+// result in an error instead of being treated the same as [1, 2], and
+// the statement
+//
+//   [ 1, 2,
+//     3, 4 ]
+//
+// will result in the vector [1 2 3 4] instead of a matrix.
+//
+// Traditional behavior makes Octave convert spaces to a comma between
+// identifiers and `('.  For example, the statement
+//
+//   [eye (2)]
+//
+// will be parsed as
+//
+//   [eye, (2)]
+//
+// and will result in an error since the `eye' function will be
+// called with no arguments.  To get around this, you would have to
+// omit the space between `eye' and the `('.
+//
+// The default value is 0, which results in behavior that is the same
+// as traditional, except that Octave does not convert spaces to a
+// comma between identifiers and `('.  For example, the statement
+//
+//   [eye (2)]
+//
+// will result in a call to `eye' with the argument `2'.
+
+static int Vwhitespace_in_literal_matrix;
+
+
 // Forward declarations for functions defined at the bottom of this
 // file.
 
 static void do_string_escapes (char *s);
 static void fixup_column_count (char *s);
 static void do_comma_insert_check (void);
 static int is_plot_keyword (const string& s);
 static int is_keyword (const string& s);
@@ -224,32 +267,32 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 %}
 
 <MATRIX>{S}*\,{S}* {
     current_input_column += yyleng;
     int tmp = eat_continuation ();
     lexer_flags.quote_is_transpose = 0;
     lexer_flags.cant_be_identifier = 0;
     lexer_flags.convert_spaces_to_comma = 1;
-    if (user_pref.whitespace_in_literal_matrix != 2
+    if (Vwhitespace_in_literal_matrix != 2
 	&& (tmp & ATE_NEWLINE) == ATE_NEWLINE)
       unput (';');
     return (',');
   }
 
 %{
 // In some cases, spaces in matrix constants can turn into commas.
 // If commas are required, spaces are not important in matrix
 // constants so we just eat them.  If we don't check for continuations
 // here we can end up inserting too many commas.
 %}
 
 <MATRIX>{S}+ {
     current_input_column += yyleng;
-    if (user_pref.whitespace_in_literal_matrix != 2)
+    if (Vwhitespace_in_literal_matrix != 2)
       {
 	int tmp = eat_continuation ();
 	int bin_op = next_token_is_bin_op (1, yytext);
 	int postfix_un_op = next_token_is_postfix_unary_op (1, yytext);
 
 	if (! (postfix_un_op || bin_op)
 	    && nesting_level.is_brace ()
 	    && lexer_flags.convert_spaces_to_comma)
@@ -283,17 +326,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 // In some cases, new lines can also become row separators.  If we
 // don't eat whitespace here we can end up inserting too many
 // semicolons.
 %}
 
 <MATRIX>{SNLCMT}*\n{SNLCMT}* {
     fixup_column_count (yytext);
     eat_whitespace ();
-    if (user_pref.whitespace_in_literal_matrix != 2)
+    if (Vwhitespace_in_literal_matrix != 2)
       {
 	lexer_flags.quote_is_transpose = 0;
 	lexer_flags.cant_be_identifier = 0;
 	lexer_flags.convert_spaces_to_comma = 1;
 
 	if (nesting_level.none ())
 	  return LEXICAL_ERROR;
 
@@ -1526,17 +1569,17 @@ handle_close_brace (int spc_gobbled)
 	return SCREW_TWO;
       else
 	return ']';
     }
   else
     {
       unput (c1);
 
-      if (lexer_flags.braceflag && user_pref.whitespace_in_literal_matrix != 2)
+      if (lexer_flags.braceflag && Vwhitespace_in_literal_matrix != 2)
 	{
 	  int bin_op = next_token_is_bin_op (spc_gobbled, yytext);
 	  int postfix_un_op = next_token_is_postfix_unary_op
 	    (spc_gobbled, yytext);
 
 	  int other_op = match_any (c1, ",;\n]");
 
 	  if (! (postfix_un_op || bin_op || other_op)
@@ -1553,33 +1596,33 @@ handle_close_brace (int spc_gobbled)
   lexer_flags.cant_be_identifier = 0;
   lexer_flags.convert_spaces_to_comma = 1;
   return ']';
 }
 
 static void
 maybe_unput_comma (int spc_gobbled)
 {
-  if (user_pref.whitespace_in_literal_matrix != 2
+  if (Vwhitespace_in_literal_matrix != 2
       && nesting_level.is_brace ())
     {
       int bin_op = next_token_is_bin_op (spc_gobbled, yytext);
 
       int postfix_un_op = next_token_is_postfix_unary_op (spc_gobbled,
 							  yytext);
 
       int c1 = yyinput ();
       int c2 = yyinput ();
       unput (c2);
       unput (c1);
       int sep_op = match_any (c1, ",;\n]");
       int dot_op = (c1 == '.'
 		    && (isalpha (c2) || isspace (c2) || c2 == '_'));
       int index_op = (c1 == '('
-		      && (user_pref.whitespace_in_literal_matrix == 0
+		      && (Vwhitespace_in_literal_matrix == 0
 			  || ! spc_gobbled));
 
       if (! (postfix_un_op || bin_op || sep_op || dot_op || index_op))
 	unput (',');
     }
 }
 
 // Figure out exactly what kind of token to return when we have seen
@@ -1799,16 +1842,39 @@ lexical_feedback::init (void)
   // Not initially screwed by `function [...] = f (...)' syntax.
   maybe_screwed = 0;
   maybe_screwed_again = 0;
 
   // Quote marks strings intially.
   quote_is_transpose = 0;
 }
 
+int
+whitespace_in_literal_matrix (void)
+{
+  int pref = 0;
+  string val = builtin_string_variable ("whitespace_in_literal_matrix");
+  if (! val.empty ())
+    {
+      if (val.compare ("ignore", 0, 6) == 0)
+	pref = 2;
+      else if (val.compare ("traditional", 0, 11) == 0)
+	pref = 1;
+    }
+  Vwhitespace_in_literal_matrix = pref;
+  return 0;
+}
+
+void
+symbols_of_lex (void)
+{
+  DEFVAR (whitespace_in_literal_matrix, "", 0, whitespace_in_literal_matrix,
+    "control auto-insertion of commas and semicolons in literal matrices");
+}
+
 // Maybe someday...
 //
 // "+="		return ADD_EQ;
 // "-="		return SUB_EQ;
 // "*="		return MUL_EQ;
 // "/="		return DIV_EQ;
 // "\\="	return LEFTDIV_EQ;
 // ".+="	return ADD_EQ;
