# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1348083255 14400
#      Wed Sep 19 15:34:15 2012 -0400
# Node ID 53d073233fa44f81ab0c8224feda0376c6b39ea2
# Parent  57e685d135ec727685b6f23a9f33c9c4f0294b8c
call more built-in functions directly

* __init_gnuplot__.cc (gnuplot_graphics_toolkit::send_quit):
Call built-in functions directly.
* graphics.cc (gh_manager::do_process_events): Likewise.
* sysdep.cc (Fkbhit, Fpause, Fsleep, Fusleep): Likewise.

diff --git a/libinterp/dldfcn/__init_gnuplot__.cc b/libinterp/dldfcn/__init_gnuplot__.cc
--- a/libinterp/dldfcn/__init_gnuplot__.cc
+++ b/libinterp/dldfcn/__init_gnuplot__.cc
@@ -28,16 +28,17 @@ To initialize:
   plot (randn (1e3, 1));
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "builtins.h"
 #include "defun-dld.h"
 #include "error.h"
 #include "graphics.h"
 #include "parse.h"
 #include "variables.h"
 
 // PKG_ADD: register_graphics_toolkit ("gnuplot");
 
@@ -143,34 +144,27 @@ private:
     {
       if (! pstream.is_empty ())
         {
           octave_value_list args;
           Matrix fids = pstream.matrix_value ();
 
           if (! error_state)
             {
-              args(1) = "\nquit;\n";
-              args(0) = fids(0);
-              feval ("fputs", args);
+              Ffputs (ovl (fids(0), "\nquit;\n"));
 
-              args.resize (1);
-              feval ("fflush", args);
-              feval ("pclose", args);
+              Ffflush (ovl (fids(0)));
+              Fpclose (ovl (fids(0)));
 
               if (fids.numel () > 1)
                 {
-                  args(0) = fids(1);
-                  feval ("pclose", args);
+                  Fpclose (ovl (fids(1)));
 
                   if (fids.numel () > 2)
-                    {
-                      args(0) = fids(2);
-                      feval ("waitpid", args);
-                    }
+                    Fwaitpid (ovl (fids(2)));
                 }
             }
         }
     }
 };
 
 // Initialize the fltk graphics toolkit.
 
diff --git a/libinterp/interpfcn/graphics.cc b/libinterp/interpfcn/graphics.cc
--- a/libinterp/interpfcn/graphics.cc
+++ b/libinterp/interpfcn/graphics.cc
@@ -37,16 +37,17 @@ along with Octave; see the file COPYING.
 #include <sstream>
 
 #include "cmd-edit.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "oct-locbuf.h"
 #include "singleton-cleanup.h"
 
+#include "builtins.h"
 #include "cutils.h"
 #include "defun.h"
 #include "display.h"
 #include "error.h"
 #include "graphics.h"
 #include "input.h"
 #include "ov.h"
 #include "oct-obj.h"
@@ -8197,17 +8198,17 @@ gh_manager::do_process_events (bool forc
 
   gh_manager::unlock ();
 
   if (events_executed)
     flush_octave_stdout ();
 
   if (Vdrawnow_requested && ! old_Vdrawnow_requested)
     {
-      feval ("drawnow");
+      Fdrawnow ();
 
       Vdrawnow_requested = false;
     }
 
   return 0;
 }
 
 void
diff --git a/libinterp/interpfcn/sysdep.cc b/libinterp/interpfcn/sysdep.cc
--- a/libinterp/interpfcn/sysdep.cc
+++ b/libinterp/interpfcn/sysdep.cc
@@ -64,16 +64,17 @@ along with Octave; see the file COPYING.
 #include "file-ops.h"
 #include "lo-mappers.h"
 #include "lo-math.h"
 #include "mach-info.h"
 #include "oct-env.h"
 #include "quit.h"
 
 #include "Cell.h"
+#include "builtins.h"
 #include "defun.h"
 #include "error.h"
 #include "input.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "pager.h"
 #include "parse.h"
 #include "sighandlers.h"
@@ -640,17 +641,17 @@ returning the empty string if no key is 
 @end deftypefn")
 {
   octave_value retval;
 
   // FIXME -- add timeout and default value args?
 
   if (interactive || forced_interactive)
     {
-      feval ("drawnow");
+      Fdrawnow ();
 
       int c = octave_kbhit (args.length () == 0);
 
       if (c == -1)
         c = 0;
 
       char *s = new char [2];
       s[0] = c;
@@ -692,33 +693,33 @@ clc;\n\
   if (nargin == 1)
     {
       double dval = args(0).double_value ();
 
       if (! error_state)
         {
           if (! xisnan (dval))
             {
-              feval ("drawnow");
+              Fdrawnow ();
 
               if (xisinf (dval))
                 {
                   flush_octave_stdout ();
                   octave_kbhit ();
                 }
               else
                 octave_sleep (dval);
             }
           else
             warning ("pause: NaN is an invalid delay");
         }
     }
   else
     {
-      feval ("drawnow");
+      Fdrawnow ();
       flush_octave_stdout ();
       octave_kbhit ();
     }
 
   return retval;
 }
 
 /*
@@ -741,17 +742,17 @@ Suspend the execution of the program for
       double dval = args(0).double_value ();
 
       if (! error_state)
         {
           if (xisnan (dval))
             warning ("sleep: NaN is an invalid delay");
           else
             {
-              feval ("drawnow");
+              Fdrawnow ();
               octave_sleep (dval);
             }
         }
     }
   else
     print_usage ();
 
   return retval;
@@ -781,17 +782,17 @@ of time less than one second, @code{usle
       double dval = args(0).double_value ();
 
       if (! error_state)
         {
           if (xisnan (dval))
             warning ("usleep: NaN is an invalid delay");
           else
             {
-              feval ("drawnow");
+              Fdrawnow ();
 
               int delay = NINT (dval);
 
               if (delay > 0)
                 octave_usleep (delay);
             }
         }
     }
