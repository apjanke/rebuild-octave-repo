# HG changeset patch
# User jwe
# Date 1127146076 0
#      Mon Sep 19 16:07:56 2005 +0000
# Node ID ec44bd0917fe6f9d594d0448b9b93611fa94d337
# Parent  a921c9c17ba5aa572642d2b917d39cc950b02116
[project @ 2005-09-19 16:07:56 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,13 +1,15 @@
 2005-09-19  David Bateman  <dbateman@free.fr>
 
 	* oct-env.cc (octave_env::do_get_home_directory):
 	Also check HOMEDRIVE under mingw.
 
+	* Makefile.in (LINK_DEPS): Include UFsparse libraries.
+
 2005-09-16  John W. Eaton  <jwe@octave.org>
 
 	* oct-syscalls.cc: Include lo-utils.h here.
 	(octave_syscalls::waitpid): Call octave_waitpid here.
 
 	* lo-cutils.c (octave_waitpid): New function.
 	* lo-utils.h: Provide decl.  Include syswait.h here, not in
 	oct-syscalls.cc
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -15,18 +15,18 @@ VPATH = @srcdir@
 include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 LINK_DEPS = \
   -L../libcruft -L. $(RLD_FLAG) \
-  $(LIBCRUFT) $(UMFPACK_LIBS) $(BLAS_LIBS) $(FFTW_LIBS) $(LIBREADLINE) \
-  $(LIBGLOB) $(LIBS) $(FLIBS)
+  $(LIBCRUFT) $(UMFPACK_LIBS)  $(AMD_LIBS) $(BLAS_LIBS) $(FFTW_LIBS) \
+  $(LIBREADLINE) $(LIBGLOB) $(LIBS) $(FLIBS)
 
 MATRIX_INC := Array.h Array2.h Array3.h ArrayN.h DiagArray2.h \
 	Array-flags.h Array-util.h ArrayN-idx.h MArray-defs.h \
 	MArray.h MArray2.h MDiagArray2.h Matrix.h MArrayN.h \
 	base-lu.h dim-vector.h mx-base.h mx-op-defs.h mx-ops.h \
 	mx-defs.h mx-ext.h CColVector.h CDiagMatrix.h CMatrix.h \
 	CNDArray.h CRowVector.h CmplxAEPBAL.h CmplxCHOL.h \
 	CmplxDET.h CmplxHESS.h CmplxLU.h CmplxQR.h CmplxQRP.h \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2005-09-19  David Bateman  <dbateman@free.fr>
+
+	* Makefile.in (OCT_LINK_DEPS): Include UFsparse libraries.
+
+	* DLD_FUNCTIONS/__glpk__.cc (F__glpk__): Replace isinf with
+	xisinf. Allow sparse matrices as second argument.
+
+	* syscalls.cc: Typos.
+	* sysdep.cc: Typos.
+
 2005-09-16  John W. Eaton  <jwe@octave.org>
 
 	* syscalls.cc (Fwaitpid): Doc fix.  Expect WNOHANG, WUNTRACED,
 	WCONTINUED as args instad of int values.
 	Return values are now [pid, status, msg] instad of [pid, msg].
 	(WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP,
 	WIFSTOPPED, WSTOPSIG, WIFCONTINUED): New functions.
 	(symbols_of_syscalls): DEFCONST WNOHANG, WUNTRACED, and WCONTINUE.
diff --git a/src/DLD-FUNCTIONS/__glpk__.cc b/src/DLD-FUNCTIONS/__glpk__.cc
--- a/src/DLD-FUNCTIONS/__glpk__.cc
+++ b/src/DLD-FUNCTIONS/__glpk__.cc
@@ -437,79 +437,86 @@ You should be using using the @code{glpk
 
   if (error_state)
     {
       error ("__glpk__: invalid value of C");
       return retval;
     }
 
   double *c = C.fortran_vec ();
+  Array<int> rn;
+  Array<int> cn;
+  ColumnVector a;
+  int mrowsA;
+  volatile int nz = 0;
 
   //-- 2nd Input. A matrix containing the constraints coefficients.
   // If matrix A is NOT a sparse matrix
-  // if(!mxIsSparse(A_IN)){
-  Matrix A (args(1).matrix_value ()); // get the matrix
+  if( args(1).class_name () != "sparse")
+    {
+      Matrix A (args(1).matrix_value ()); // get the matrix
 
-  if (error_state)
-    {
-      error ("__glpk__: invalid value of A");
-      return retval;
-    }
+      if (error_state)
+	{
+	  error ("__glpk__: invalid value of A");
+	  return retval;
+	}
 
-  int mrowsA = A.rows ();
-  Array<int> rn (mrowsA*mrowsc+1);
-  Array<int> cn (mrowsA*mrowsc+1);
-  ColumnVector a (mrowsA*mrowsc+1, 0.0);
+      mrowsA = A.rows ();
+      rn.resize (mrowsA*mrowsc+1);
+      cn.resize (mrowsA*mrowsc+1);
+      a.resize (mrowsA*mrowsc+1, 0.0);
 
-  volatile int nz = 0;
-  for (int i = 0; i < mrowsA; i++)
-    {
-      for (int j = 0; j < mrowsc; j++)
+      for (int i = 0; i < mrowsA; i++)
 	{
-	  if (A(i,j) != 0)
+	  for (int j = 0; j < mrowsc; j++)
 	    {
-	      nz++;
-	      rn(nz) = i + 1;
-	      cn(nz) = j + 1;
-	      a(nz) = A(i,j);
+	      if (A(i,j) != 0)
+		{
+		  nz++;
+		  rn(nz) = i + 1;
+		  cn(nz) = j + 1;
+		  a(nz) = A(i,j);
+		}
 	    }
 	}
+
     }
+  else
+    {
+      SparseMatrix A (args(1).matrix_value ()); // get the sparse matrix
+
+      if (error_state)
+	{
+	  error ("__glpk__: invalid value of A");
+	  return retval;
+	}
 
-// DON'T DELETE THIS PART... REPRESENTS THE SPARSE MATRICES MANIPULATION
-//	  }else{
-//	    int i,j;
-//	    int *jc,*ir;
-//	    double *pr;
-//	    int nelc,count,row;
-//
-//	    /* NOTE: nnz is the actual number of nonzeros and is stored as the
-//       last element of the jc array where the size of the jc array is the
-//       number of columns + 1 */
-//	    nz = *(mxGetJc(A_IN) + mrowsc);
-//	    jc = mxGetJc(A_IN);
-//	    ir = mxGetIr(A_IN);
-//	    pr = mxGetPr(A_IN);
-//
-//       rn=(int *)calloc(nz+1,sizeof(int));
-//	    cn=(int *)calloc(nz+1,sizeof(int));
-//	    a=(double *)calloc(nz+1,sizeof(double));
-//
-//       count=0; row=0;
-//	    for(i=1;i<=mrowsc;i++){
-//	      nelc=jc[i]-jc[i-1];
-//	      for(j=0;j<nelc;j++){
-//		      count++;
-//		      rn[count]=ir[row]+1;
-//		      cn[count]=i;
-//		      a[count]=pr[row];
-//		      row++;
-//	      }
-//	    }
-//	  }
+      mrowsA = A.rows ();
+      octave_idx_type Anc = A.cols ();
+      octave_idx_type Anz = A.nnz ();
+      rn.resize (Anz+1);
+      cn.resize (Anz+1);
+      a.resize (Anz+1, 0.0);
+
+      if (Anc != mrowsc)
+	{
+	  error ("__glpk__: invalid value of A");
+	  return retval;
+	}
+
+      for (octave_idx_type j = 0; j < Anc; j++)
+	for (octave_idx_type i = A.cidx(j); i < A.cidx(j+1); i++)
+	  {
+	    nz++;
+	    rn(nz) = A.ridx(i) + 1;
+	    cn(nz) = j + 1;
+	    a(nz) = A(i,j);
+	  }
+    }
 
   //-- 3rd Input. A column array containing the right-hand side value
   //	           for each constraint in the constraint matrix.
   Matrix B (args(2).matrix_value ());
 
   if (error_state)
     {
       error ("__glpk__: invalid value of b");
@@ -529,17 +536,17 @@ You should be using using the @code{glpk
     }
 
   double *lb = LB.fortran_vec ();
 
   //-- LB argument, default: Free
   Array<int> freeLB (mrowsc);
   for (int i = 0; i < mrowsc; i++)
      {
-       if (isinf (lb[i]))
+       if (xisinf (lb[i]))
 	 {
 	   freeLB(i) = 1;
 	   lb[i] = -octave_Inf;
 	 }
        else
 	 freeLB(i) = 0;
      }
 
@@ -553,17 +560,17 @@ You should be using using the @code{glpk
       return retval;
     }
 
   double *ub = UB.fortran_vec ();
 
   Array<int> freeUB (mrowsc);
   for (int i = 0; i < mrowsc; i++)
     {
-      if (isinf (ub[i]))
+      if (xisinf (ub[i]))
 	{
 	  freeUB(i) = 1;
 	  ub[i] = octave_Inf;
 	}
       else
 	freeUB(i) = 0;
     }
 
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -242,18 +242,18 @@ else
     $(LIBPLPLOT) $(LIBGLOB) $(LIBDLFCN)
 endif
 
 OCTINTERP_LINK_DEPS = \
   -L../liboctave $(LIBOCTAVE) -L../libcruft $(LIBCRUFT) $(LIBS) $(FLIBS)
 
 OCT_LINK_DEPS = \
   -L../libcruft $(LIBCRUFT) -L../liboctave $(LIBOCTAVE) \
-  -L. $(LIBOCTINTERP) $(UMFPACK_LIBS) $(AMD_LIBS) $(COLAMD_LIBS) \
-   $(CHOLMOD_LIBS) $(CCOLAMD_LIBS) $(BLAS_LIBS) $(FFTW_LIBS) $(LIBS) $(FLIBS)
+  -L. $(LIBOCTINTERP) $(CHOLMOD_LIBS) $(UMFPACK_LIBS) $(AMD_LIBS) \
+   $(COLAMD_LIBS) $(CCOLAMD_LIBS) $(BLAS_LIBS) $(FFTW_LIBS) $(LIBS) $(FLIBS)
 
 DISTFILES = Makefile.in ChangeLog mkdefs mkops mkgendoc \
 	DOCSTRINGS mkbuiltins mk-oct-links \
 	defaults.h.in oct-conf.h.in octave.gperf oct-gperf.h \
 	octave.cc parse.cc lex.cc y.tab.h gplot.cc \
 	$(INCLUDES) $(DIST_SRC) $(OPT_HANDLERS) $(EXTRAS)
 
 all: octave$(EXEEXT) stamp-oct-links PKG_ADD DOCSTRINGS
diff --git a/src/syscalls.cc b/src/syscalls.cc
--- a/src/syscalls.cc
+++ b/src/syscalls.cc
@@ -1013,17 +1013,17 @@ child process was terminated by a signal
       int status = args(0).int_value ();
 
       if (! error_state)
 	retval = WIFSIGNALED (status);
       else
 	error ("WIFSIGNALED: expecting integer argument");
     }
 #else
-  warning ("WIFSIGNALED always returns false in this version of Octave")
+  warning ("WIFSIGNALED always returns false in this version of Octave");
 #endif
 
   return retval;
 }
 
 DEFUNX ("WTERMSIG", FWTERMSIG, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WTERMSIG (@var{status})\n\
@@ -1041,17 +1041,17 @@ should only be employed if @code{WIFSIGN
       int status = args(0).int_value ();
 
       if (! error_state)
 	retval = WTERMSIG (status);
       else
 	error ("WTERMSIG: expecting integer argument");
     }
 #else
-  warning ("WTERMSIG always returns false in this version of Octave")
+  warning ("WTERMSIG always returns false in this version of Octave");
 #endif
 
   return retval;
 }
 
 DEFUNX ("WCOREDUMP", FWCOREDUMP, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WCOREDUMP (@var{status})\n\
@@ -1071,17 +1071,17 @@ Unix implementations (e.g., AIX, SunOS).
       int status = args(0).int_value ();
 
       if (! error_state)
 	retval = WCOREDUMP (status);
       else
 	error ("WCOREDUMP: expecting integer argument");
     }
 #else
-  warning ("WCOREDUMP always returns false in this version of Octave")
+  warning ("WCOREDUMP always returns false in this version of Octave");
 #endif
 
   return retval;
 }
 
 DEFUNX ("WIFSTOPPED", FWIFSTOPPED, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WIFSTOPPED (@var{status})\n\
@@ -1100,17 +1100,17 @@ is being traced (see ptrace(2)).\n\
       int status = args(0).int_value ();
 
       if (! error_state)
 	retval = WIFSTOPPED (status);
       else
 	error ("WIFSTOPPED: expecting integer argument");
     }
 #else
-  warning ("WIFSTOPPED always returns false in this version of Octave")
+  warning ("WIFSTOPPED always returns false in this version of Octave");
 #endif
 
   return retval;
 }
 
 DEFUNX ("WSTOPSIG", FWSTOPSIG, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WSTOPSIG (@var{status})\n\
@@ -1128,17 +1128,17 @@ be employed if @code{WIFSTOPPED} returne
       int status = args(0).int_value ();
 
       if (! error_state)
 	retval = WSTOPSIG (status);
       else
 	error ("WSTOPSIG: expecting integer argument");
     }
 #else
-  warning ("WSTOPSIG always returns false in this version of Octave")
+  warning ("WSTOPSIG always returns false in this version of Octave");
 #endif
 
   return retval;
 }
 
 DEFUNX ("WIFCONTINUED", FWIFCONTINUED, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WIFCONTINUED (@var{status})\n\
@@ -1155,17 +1155,17 @@ child process was resumed by delivery of
       int status = args(0).int_value ();
 
       if (! error_state)
 	retval = WIFCONTINUED (status);
       else
 	error ("WIFCONTINUED: expecting integer argument");
     }
 #else
-  warning ("WIFCONTINUED always returns false in this version of Octave")
+  warning ("WIFCONTINUED always returns false in this version of Octave");
 #endif
 
   return retval;
 }
 
 DEFUN (canonicalize_file_name, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{cname}, @var{status}, @var{msg}]} canonicalize_file_name (@var{name})\n\
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -116,19 +116,19 @@ w32_set_quiet_shutdown (void)
   SetProcessShutdownParameters (0x280, SHUTDOWN_NORETRY);
 #endif
 }
 
 #if defined (__WIN32__) && ! defined (_POSIX_VERSION)
 void
 MINGW_signal_cleanup (void)
 {
-  w32_set_quiet_shutdown (void);
+  w32_set_quiet_shutdown ();
 
-  w32_raise_final ():
+  w32_raise_final ();
 }
 #endif
 
 #if defined (__MINGW32__)
 static void
 MINGW_init (void)
 {
   // Init mutex to protect setjmp/longjmp and get main thread context
