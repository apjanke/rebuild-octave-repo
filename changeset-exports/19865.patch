# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1424974420 18000
#      Thu Feb 26 13:13:40 2015 -0500
# Node ID e9f89866074ca4c6737caea1972aa8cb18c7f5ab
# Parent  17d647821d6124f7ae022a12197dcd38059ea1d7
maint: Cleanup some .m files to follow Octave coding conventions.

* accumarray.m, validateattributes.m, iscolormap.m, __imread__.m,
__imwrite__.m, imwrite_filename.m, strread.m, getappdata.m,
appearance/annotation.m, shrinkfaces.m, rundemos.m, runtests.m,
datenum.m, datestr.m: Break long lines before && and ||.

diff --git a/scripts/general/accumarray.m b/scripts/general/accumarray.m
--- a/scripts/general/accumarray.m
+++ b/scripts/general/accumarray.m
@@ -137,18 +137,17 @@ function A = accumarray (subs, vals, sz 
     subs = cellfun (@vec, subs, "uniformoutput", false);
     ndims = numel (subs);
     if (ndims == 1)
       subs = subs{1};
     endif
 
     lensubs = cellfun (@length, subs);
 
-    if (any (lensubs != lensubs(1)) ||
-        (lenvals > 1 && lenvals != lensubs(1)))
+    if (any (lensubs != lensubs(1)) || (lenvals > 1 && lenvals != lensubs(1)))
       error ("accumarray: dimension mismatch");
     endif
 
   else
     ndims = columns (subs);
     if (lenvals > 1 && lenvals != rows (subs))
       error ("accumarray: dimension mismatch");
     endif
diff --git a/scripts/general/validateattributes.m b/scripts/general/validateattributes.m
--- a/scripts/general/validateattributes.m
+++ b/scripts/general/validateattributes.m
@@ -260,24 +260,24 @@ function validateattributes (A, cls, att
       case "real",          problem = ! isreal (A);
       case "finite",        problem = ! isinteger (A) && ...
                                       ! all (isfinite (A(:)));
       case "nonnan",        problem = ! isinteger (A) && ...
                                       any (isnan (A(:)));
       case "nonnegative",   problem = any (A(:) < 0);
       case "nonzero",       problem = any (A(:) == 0);
       case "positive",      problem = any (A(:) <= 0);
-      case "decreasing",    problem = (any (isnan (A(:))) ||
-                                       any (diff (A(:)) >= 0));
-      case "increasing",    problem = (any (isnan (A(:))) ||
-                                       any (diff (A(:)) <= 0));
-      case "nondecreasing", problem = (any (isnan (A(:))) ||
-                                       any (diff (A(:)) <  0));
-      case "nonincreasing", problem = (any (isnan (A(:))) ||
-                                       any (diff (A(:)) >  0));
+      case "decreasing",    problem = (any (isnan (A(:)))
+                                       || any (diff (A(:)) >= 0));
+      case "increasing",    problem = (any (isnan (A(:)))
+                                       || any (diff (A(:)) <= 0));
+      case "nondecreasing", problem = (any (isnan (A(:)))
+                                       || any (diff (A(:)) <  0));
+      case "nonincreasing", problem = (any (isnan (A(:)))
+                                       || any (diff (A(:)) >  0));
       case "size",
         A_size = size (A);
         w_size = attr{idx++};
         A_size(isnan (w_size)) = NaN;
         if (! isequaln (A_size, w_size))
           A_size_str = sprintf ("%dx", size (A))(1:end-1);
           w_size_str = sprintf ("%ix", w_size)(1:end-1);
           w_size_str = strrep (w_size_str, "NaN", "N");
diff --git a/scripts/image/iscolormap.m b/scripts/image/iscolormap.m
--- a/scripts/image/iscolormap.m
+++ b/scripts/image/iscolormap.m
@@ -30,19 +30,19 @@
 ## Author: CarnÃ« Draug <carandraug+dev@gmail.com>
 
 function retval = iscolormap (cmap)
 
   if (nargin != 1)
     print_usage;
   endif
 
-  retval = (isnumeric (cmap) && isreal (cmap) &&
-            ndims (cmap) == 2 && columns (cmap) == 3 && isa (cmap, "double") &&
-            min (cmap(:)) >= 0 && max (cmap(:)) <= 1);
+  retval = (isnumeric (cmap) && isreal (cmap) && ndims (cmap) == 2
+            && columns (cmap) == 3 && isa (cmap, "double")
+            && min (cmap(:)) >= 0 && max (cmap(:)) <= 1);
 
 endfunction
 
 
 %!assert (iscolormap (jet (64)))
 %!assert (iscolormap ({0 1 0}), false)
 %!assert (iscolormap ([0 1i 0]), false)
 %!assert (iscolormap (ones (3,3,3)), false)
diff --git a/scripts/image/private/__imread__.m b/scripts/image/private/__imread__.m
--- a/scripts/image/private/__imread__.m
+++ b/scripts/image/private/__imread__.m
@@ -68,18 +68,18 @@ function varargout = __imread__ (filenam
 
   ## Check key/value options.
   indexes = cellfun ("isclass", varargin, "char");
   indexes(indexes) &= ismember (tolower (varargin(indexes)),
                                 {"frames", "index"});
   indexes = find (indexes);
   if (indexes)
     options.index = varargin{indexes+1};
-    if (! is_valid_index_option (options.index) &&
-        ! (ischar (options.index) && strcmpi (options.index, "all")))
+    if (! is_valid_index_option (options.index)
+        && ! (ischar (options.index) && strcmpi (options.index, "all")))
       error ("imread: value for %s must be a vector or the string `all'");
     endif
   endif
 
   ## Use information from the first image to be read to set defaults.
   if (ischar (options.index) && strcmpi (options.index, "all"))
     info = __magick_ping__ (filename, 1);
   else
diff --git a/scripts/image/private/__imwrite__.m b/scripts/image/private/__imwrite__.m
--- a/scripts/image/private/__imwrite__.m
+++ b/scripts/image/private/__imwrite__.m
@@ -55,19 +55,19 @@ function __imwrite__ (img, varargin)
       case "alpha"
         options.alpha = param_list{idx+1};
         if (! isnumeric (options.alpha))
           error ("imwrite: value for %s option must be a numeric matrix",
                  param_list{idx});
         elseif (size (options.alpha, 3) != 1)
           error ("imwrite: 3rd dimension of matrix for %s must be singleton",
                  param_list{idx});
-        elseif (ndims (options.alpha) > 4 ||
-                any (size (options.alpha)([1 2]) != size (img)([1 2])) ||
-                size (options.alpha, 4) != size (img, 4))
+        elseif (ndims (options.alpha) > 4
+                || any (size (options.alpha)([1 2]) != size (img)([1 2]))
+                || size (options.alpha, 4) != size (img, 4))
           error ("imwrite: matrix for %s must have same dimension as image",
                  param_list{idx});
         endif
 
       case "delaytime"
         options.delaytime = param_list{idx+1};
         if (! isnumeric (options.delaytime))
           error ("imwrite: value for %s option must be numeric",
@@ -83,18 +83,18 @@ function __imwrite__ (img, varargin)
         if (any (options.delaytime(:) < 0)
             || any (options.delaytime(:) > 65535))
           error ("imwrite: value for %s must be between 0 and 655.35 seconds",
                  param_list{idx});
         endif
 
       case "disposalmethod"
         options.disposalmethod = param_list{idx+1};
-        if (! ischar (options.disposalmethod) &&
-            ! iscellstr (options.disposalmethod))
+        if (! ischar (options.disposalmethod)
+            && ! iscellstr (options.disposalmethod))
           error ("imwrite: value for %s must be a string or cell array of strings",
                  param_list{idx});
         elseif (! iscell (options.disposalmethod))
           options.disposalmethod = {options.disposalmethod};
         endif
         options.disposalmethod = tolower (options.disposalmethod);
         matches = ismember (options.disposalmethod,
                             {"donotspecify", "leaveinplace", ...
@@ -110,18 +110,18 @@ function __imwrite__ (img, varargin)
         elseif (numel (options.disposalmethod) != size (img, 4))
           error ("imwrite: if value %s is a cell array must have same length as number of frames",
                  param_list{idx});
         endif
 
       case "loopcount"
         options.loopcount = param_list{idx+1};
         if (! isscalar (options.loopcount) || ! isnumeric (options.loopcount)
-            || (! isinf (options.loopcount) && (options.loopcount < 0 ||
-                                                options.loopcount > 65535)))
+            || (! isinf (options.loopcount)
+                && (options.loopcount < 0 || options.loopcount > 65535)))
           error ("imwrite: value for %s must be Inf or between 0 and 65535",
                  param_list{idx});
         endif
         ## Graphics Magick is a bit weird here. A value of 0 will be an
         ## infinite loop, a value of 1, will really be no loop, while a
         ## value of 2 or more will be that number of loops (checked
         ## with GNOME image viewer). This means that there is no way
         ## to make it loop only once. See
diff --git a/scripts/image/private/imwrite_filename.m b/scripts/image/private/imwrite_filename.m
--- a/scripts/image/private/imwrite_filename.m
+++ b/scripts/image/private/imwrite_filename.m
@@ -43,19 +43,19 @@ function [filename, ext, cmap, options] 
   endif
   filename = tilde_expand (varargin{filename_idx});
 
   ## Next, we get the file extension.
   ## if we have an odd number of leftover arguments, and the next argument
   ## is a string, we consider it the file extension. Otherwise we will
   ## extract what we can from the previously found filename.
   options_idx = filename_idx + 1;
-  if (numel (varargin) > filename_idx &&
-      rem (length (varargin) - filename_idx, 2) != 0 &&
-      ischar (varargin{filename_idx + 1}))
+  if (numel (varargin) > filename_idx
+      && rem (length (varargin) - filename_idx, 2) != 0
+      && ischar (varargin{filename_idx + 1}))
     ext = varargin{filename_idx + 1};
     options_idx++;
   else
     [~, ~, ext] = fileparts (filename);
     if (! isempty (ext))
       ## remove dot from extension
       ext = ext(2:end);
     endif
diff --git a/scripts/io/strread.m b/scripts/io/strread.m
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -240,18 +240,18 @@ function varargout = strread (str, forma
             [comment_start, comment_end] = deal ("/*", "*/");
           case "c++"
             [comment_start, comment_end] = deal ("//", "eol_char");
           case "shell"
             [comment_start, comment_end] = deal ("#" , "eol_char");
           case "matlab"
             [comment_start, comment_end] = deal ("%" , "eol_char");
           otherwise
-            if (ischar (varargin{n+1}) ||
-               (numel (varargin{n+1}) == 1 && iscellstr (varargin{n+1})))
+            if (ischar (varargin{n+1})
+                || (numel (varargin{n+1}) == 1 && iscellstr (varargin{n+1})))
               [comment_start, comment_end] = deal (char (varargin{n+1}), "eol_char");
             elseif (iscellstr (varargin{n+1}) && numel (varargin{n+1}) == 2)
               [comment_start, comment_end] = deal (varargin{n+1}{:});
             else
               ## FIXME: A user may have numeric values specified: {'//', 7}
               ##        this will lead to an error in the warning message
               error ("strread: unknown or unrecognized comment style '%s'",
                       varargin{n+1});
diff --git a/scripts/miscellaneous/getappdata.m b/scripts/miscellaneous/getappdata.m
--- a/scripts/miscellaneous/getappdata.m
+++ b/scripts/miscellaneous/getappdata.m
@@ -47,18 +47,17 @@ function value = getappdata (h, name)
       error ("getappdata: NAME must be a string");
     endif
 
     value = cell (numel (h), 1);
     appdata = struct ();
     for i = 1:numel (h)
       value{i} = [];
       pval = get (h(i));
-      if (isfield (pval, "__appdata__") &&
-          isfield (pval.__appdata__, name))
+      if (isfield (pval, "__appdata__") && isfield (pval.__appdata__, name))
         value{i} = pval.__appdata__.(name);
       endif
     endfor
 
     if (i == 1)
       value = value{1};
     endif
 
diff --git a/scripts/plot/appearance/annotation.m b/scripts/plot/appearance/annotation.m
--- a/scripts/plot/appearance/annotation.m
+++ b/scripts/plot/appearance/annotation.m
@@ -185,18 +185,18 @@ function varargout = annotation (varargi
 
       if (nargin == 0)
         lims = [];
       elseif (nargin >= 2)
         x = varargin{1};
         y = varargin{2};
         varargin(1:2) = [];
 
-        if (isnumeric (x) && isnumeric (y) &&
-            length (x) == 2 && length (y) == 2)
+        if (isnumeric (x) && isnumeric (y)
+            && length (x) == 2 && length (y) == 2)
           lims = [x(1) y(1) diff(x) diff(y)];
         else
           error ("annotation: expect 2 elements vectors for X and Y");
         endif
       else
         print_usage ();
       endif
     case types(5:end)
diff --git a/scripts/plot/draw/shrinkfaces.m b/scripts/plot/draw/shrinkfaces.m
--- a/scripts/plot/draw/shrinkfaces.m
+++ b/scripts/plot/draw/shrinkfaces.m
@@ -71,18 +71,18 @@ function [nf, nv] = shrinkfaces (varargi
   if (nargin < 1 || nargin > 3 || nargout > 2)
     print_usage ();
   endif
 
   sf = 0.3;
   colors = [];
   p = varargin{1};
 
-  if (isscalar (p) && ishandle (p) && nargin < 3 &&
-      strcmp (get (p, "type"), "patch"))
+  if (isscalar (p) && ishandle (p) && nargin < 3
+      && strcmp (get (p, "type"), "patch"))
     faces = get (p, "Faces");
     vertices = get (p, "Vertices");
     colors = get (p, "FaceVertexCData");
     if (nargin == 2)
       sf = varargin{2};
     endif
   elseif (isstruct (p) && nargin < 3)
     faces = p.faces;
diff --git a/scripts/testfun/rundemos.m b/scripts/testfun/rundemos.m
--- a/scripts/testfun/rundemos.m
+++ b/scripts/testfun/rundemos.m
@@ -61,18 +61,18 @@ function rundemos (directory)
 
 endfunction
 
 function run_all_demos (directory, do_class_dirs)
   flist = readdir (directory);
   dirs = {};
   for i = 1:numel (flist)
     f = flist{i};
-    if ((length (f) > 2 && strcmpi (f((end-1):end), ".m")) ||
-        (length (f) > 3 && strcmpi (f((end-2):end), ".cc")))
+    if ((length (f) > 2 && strcmpi (f((end-1):end), ".m"))
+        || (length (f) > 3 && strcmpi (f((end-2):end), ".cc")))
       f = fullfile (directory, f);
       if (has_demos (f))
         try
           demo (f);
         catch
           printf ("error: %s\n\n", lasterror ().message);
         end_try_catch
         if (i != numel (flist))
diff --git a/scripts/testfun/runtests.m b/scripts/testfun/runtests.m
--- a/scripts/testfun/runtests.m
+++ b/scripts/testfun/runtests.m
@@ -64,18 +64,18 @@ endfunction
 function run_all_tests (directory, do_class_dirs)
   flist = readdir (directory);
   dirs = {};
   no_tests = {};
   printf ("Processing files in %s:\n\n", directory);
   fflush (stdout);
   for i = 1:numel (flist)
     f = flist{i};
-    if ((length (f) > 2 && strcmpi (f((end-1):end), ".m")) ||
-        (length (f) > 3 && strcmpi (f((end-2):end), ".cc")))
+    if ((length (f) > 2 && strcmpi (f((end-1):end), ".m"))
+        || (length (f) > 3 && strcmpi (f((end-2):end), ".cc")))
       ff = fullfile (directory, f);
       if (has_tests (ff))
         print_test_file_name (f);
         [p, n, xf, sk] = test (ff, "quiet");
         print_pass_fail (n, p);
         fflush (stdout);
       elseif (has_functions (ff))
         no_tests(end+1) = f;
diff --git a/scripts/time/datenum.m b/scripts/time/datenum.m
--- a/scripts/time/datenum.m
+++ b/scripts/time/datenum.m
@@ -91,18 +91,18 @@
 ## Author: pkienzle <pkienzle@users.sf.net>
 
 function [days, secs] = datenum (year, month = [], day = [], hour = 0, minute = 0, second = 0)
 
   ## Days until start of month assuming year starts March 1.
   persistent monthstart = [306; 337; 0; 31; 61; 92; 122; 153; 184; 214; 245; 275];
   persistent monthlength = [31; 28; 31; 30; 31; 30; 31; 31; 30; 31; 30; 31];
 
-  if (nargin == 0 || nargin > 6 ||
-     (nargin > 2 && (ischar (year) || iscellstr (year))))
+  if (nargin == 0 || nargin > 6
+      || (nargin > 2 && (ischar (year) || iscellstr (year))))
     print_usage ();
   endif
 
   if (ischar (year) || iscellstr (year))
     [year, month, day, hour, minute, second] = datevec (year, month);
   else
     if (nargin == 1)
       nc = columns (year);
@@ -125,18 +125,18 @@ function [days, secs] = datenum (year, m
   endif
 
   month(month < 1) = 1;  # For compatibility.  Otherwise allow negative months.
 
   ## Treat fractional months, by converting the fraction to days
   if (floor (month) != month)
     fracmonth = month - floor (month);
     month = floor (month);
-    if ((mod (month-1,12) + 1) == 2 &&
-        (floor (year/4) - floor (year/100) + floor (year/400)) != 0)
+    if ((mod (month-1,12) + 1) == 2
+        && (floor (year/4) - floor (year/100) + floor (year/400)) != 0)
       ## leap year
       day += fracmonth * 29;
     else
       day += fracmonth * monthlength ((mod (month-1,12) + 1));
     endif
   endif
 
   ## Set start of year to March by moving Jan. and Feb. to previous year.
diff --git a/scripts/time/datestr.m b/scripts/time/datestr.m
--- a/scripts/time/datestr.m
+++ b/scripts/time/datestr.m
@@ -178,18 +178,18 @@ function retval = datestr (date, f = [],
   ## Guess input type.  We might be wrong.
   if (ischar (date) || iscellstr (date) || columns (date) != 6)
     v = datevec (date, p);
   else
     v = [];
     if (columns (date) == 6)
       ## Make sure that the input really is a datevec.
       maxdatevec = [Inf, 12, 31, 23, 59, 60];
-      if (any (max (date, 1) > maxdatevec) ||
-          any (date(:,1:5) != floor (date(:,1:5))))
+      if (any (max (date, 1) > maxdatevec)
+          || any (date(:,1:5) != floor (date(:,1:5))))
         v = datevec (date, p);
       endif
     endif
     if (isempty (v))
       v = date;
     endif
   endif
 
