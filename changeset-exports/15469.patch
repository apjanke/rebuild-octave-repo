# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1349130751 14400
#      Mon Oct 01 18:32:31 2012 -0400
# Node ID 72868cae7624b4ae15adac736131038b51b7e44e
# Parent  6437fa7263dd59d4bdb413f1540003eaad30bd7f
eliminate some deprecated function warnings

* input.cc, load-path.cc, ov-oncleanup.cc, oct-parse.yy, pt-eval.cc:
Eliminate calls to unwind_protect::run_top and
unwind_protect::discard_top.

diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -760,17 +760,17 @@ get_debug_input (const std::string& prom
           global_command->accept (*current_evaluator);
 
           if (octave_completion_matches_called)
             octave_completion_matches_called = false;
         }
 
       // Unmark forced variables.
       // Restore previous value of global_command.
-      frame.run_top (2);
+      frame.run (2);
 
       octave_quit ();
     }
 }
 
 // If the user simply hits return, this will produce an empty matrix.
 
 static octave_value_list
diff --git a/libinterp/interpfcn/load-path.cc b/libinterp/interpfcn/load-path.cc
--- a/libinterp/interpfcn/load-path.cc
+++ b/libinterp/interpfcn/load-path.cc
@@ -598,17 +598,17 @@ load_path::do_set (const std::string& p,
 
   do_clear ();
 
   for (std::list<std::string>::const_iterator i = elts.begin ();
        i != elts.end (); i++)
     do_append (*i, warn);
 
   // Restore add hook and execute for all newly added directories.
-  frame.run_top ();
+  frame.run_first ();
 
   for (dir_info_list_iterator i = dir_info_list.begin ();
        i != dir_info_list.end ();
        i++)
     {
       if (add_hook)
         add_hook (i->dir_name);
     }
diff --git a/libinterp/octave-value/ov-oncleanup.cc b/libinterp/octave-value/ov-oncleanup.cc
--- a/libinterp/octave-value/ov-oncleanup.cc
+++ b/libinterp/octave-value/ov-oncleanup.cc
@@ -98,17 +98,17 @@ octave_oncleanup::~octave_oncleanup (voi
       error ("onCleanup: internal error: unhandled exception in cleanup action");
     }
 
   // We don't want to ignore errors that occur in the cleanup code, so
   // if an error is encountered there, leave error_state alone.
   // Otherwise, set it back to what it was before.
   if (error_state)
     {
-      frame.discard_top ();
+      frame.discard_first ();
       octave_call_stack::backtrace_error_message ();
     }
 }
 
 octave_scalar_map
 octave_oncleanup::scalar_map_value (void) const
 {
   octave_scalar_map retval;
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -4368,17 +4368,17 @@ eval_string (const std::string& s, bool 
       frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
       parse_status = yyparse ();
 
       tree_statement_list *command_list = global_command;
 
       // Unmark forced variables.
       // Restore previous value of global_command.
-      frame.run_top (2);
+      frame.run (2);
 
       if (parse_status == 0)
         {
           if (command_list)
             {
               unwind_protect inner_frame;
 
               // Use an unwind-protect cleanup function so that the
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -985,31 +985,31 @@ tree_evaluator::do_unwind_protect_cleanu
   // If we reset the value of the breaking flag, both the returning
   // flag and the breaking flag will be set, and we shouldn't have
   // both.  So, use the most recent one.  If there is no return or
   // break in the cleanup block, the values should be reset to
   // whatever they were when the cleanup block was entered.
 
   if (tree_break_command::breaking || tree_return_command::returning)
     {
-      frame.discard_top (2);
+      frame.discard (2);
     }
   else
     {
-      frame.run_top (2);
+      frame.run (2);
     }
 
   // We don't want to ignore errors that occur in the cleanup code, so
   // if an error is encountered there, leave error_state alone.
   // Otherwise, set it back to what it was before.
 
   if (error_state)
-    frame.discard_top (2);
+    frame.discard (2);
   else
-    frame.run_top (2);
+    frame.run (2);
 
   frame.run ();
 }
 
 void
 tree_evaluator::visit_unwind_protect_command (tree_unwind_protect_command& cmd)
 {
   tree_statement_list *cleanup_code = cmd.cleanup ();
