# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1450928256 18000
#      Wed Dec 23 22:37:36 2015 -0500
# Node ID 33793796aa6e8f4bf331e7d6a7ff04f9a10de0a4
# Parent  22318eeaca3b44482a7756344f5e004046482f3f
Coding improvements to __gnuplot_draw_axes__ (part of Bug # 44187).

* __gnuplot_draw_axes__.m (__gnuplot_draw_axes__): Place a newline character
after all binary data has been written to avoid gnuplot dropping the first
character of the followup gnuplot command.
(create_fontspec): Add an empty string test to the conditional for ",%d" case.
(__gnuplot_write_data__): Remove incorrect, speculative FIXME comment about
efficiency.  Increase efficiency slightly by using logical indexing instead of
find().
(get_fontname_and_size): Make unknown/default font an empty string, not "{}".

diff --git a/scripts/plot/util/private/__gnuplot_draw_axes__.m b/scripts/plot/util/private/__gnuplot_draw_axes__.m
--- a/scripts/plot/util/private/__gnuplot_draw_axes__.m
+++ b/scripts/plot/util/private/__gnuplot_draw_axes__.m
@@ -1726,28 +1726,29 @@ function __gnuplot_draw_axes__ (h, plot_
         ## Can't write 3d patch data as binary as can't plot more than
         ## a single patch at a time and have to plot all patches together
         ## so that the gnuplot depth ordering is done correctly
         for j = 1 : 4 : columns (data{i})
           if (j != 1)
             fputs (plot_stream, "\n\n");
           endif
           fprintf (plot_stream, "%.15g %.15g %.15g %.15g\n", data{i}(:,j).');
-          fprintf (plot_stream, "%.15g %.15g %.15g %.15g\n\n",data{i}(:,j+1).');
+          fprintf (plot_stream, "%.15g %.15g %.15g %.15g\n\n", data{i}(:,j+1).');
           fprintf (plot_stream, "%.15g %.15g %.15g %.15g\n", data{i}(:,j+2).');
           fprintf (plot_stream, "%.15g %.15g %.15g %.15g\n", data{i}(:,j+3).');
         endfor
         fputs (plot_stream, "e\n");
       elseif (is_image_data(i))
         fwrite (plot_stream, data{i}, "float32");
       else
         __gnuplot_write_data__ (plot_stream, data{i}, nd, parametric(i),
                                 have_cdata(i));
       endif
     endfor
+    fputs (plot_stream, "\n");
   else
     fputs (plot_stream, "plot \"-\";\nInf Inf\ne\n");
   endif
 
   ## Needed to allow mouse rotation with pcolor.
   if (view_map)
     fputs (plot_stream, "unset view;\n");
   endif
@@ -1782,17 +1783,17 @@ function spacing_spec = create_spacingsp
   ## FIXME: Are fractional spacing specifications allowed?  Or should this
   ##        number be rounded?
   spc = s / 10 * 1.25;
   spacing_spec = sprintf ("spacing %d", spc);
 
 endfunction
 
 function fontspec = create_fontspec (f, s, gp_term)
-  if (strcmp (f, "*") || strcmp (gp_term, "tikz"))
+  if (isempty (f) || strcmp (f, "*") || strcmp (gp_term, "tikz"))
     fontspec = sprintf ("font \",%d\"", s);
   else
     fontspec = sprintf ("font \"%s,%d\"", f, s);
   endif
 endfunction
 
 function style = do_linestyle_command (obj, linecolor, idx, mono,
                                        plot_stream, errbars = "")
@@ -2020,24 +2021,19 @@ function [pt, pt2, obj] = gnuplot_pointt
     pt = pt2 = "";
   endif
 endfunction
 
 function __gnuplot_write_data__ (plot_stream, data, nd, parametric, cdata)
 
   ## DATA is already transposed.
 
-  ## FIXME: this may need to be converted to C++ for speed.
-
   ## Convert NA elements to normal NaN values because fprintf writes
   ## "NA" and that confuses gnuplot.
-  idx = find (isna (data));
-  if (any (idx))
-    data(idx) = NaN;
-  endif
+  data(isna (data)) = NaN;
 
   if (nd == 2)
     fwrite (plot_stream, data, "float64");
   elseif (nd == 3)
     if (parametric)
       fwrite (plot_stream, data, "float64");
     else
       nr = rows (data);
@@ -2236,17 +2232,17 @@ function colorspec = get_text_colorspec 
   else
     colorspec = sprintf ("textcolor rgb \"#%02x%02x%02x\"",
                          round (255*color));
   endif
 endfunction
 
 function [f, s, fnt, it, bld] = get_fontname_and_size (t)
   if (isempty (t.fontname) || strcmp (t.fontname, "*"))
-    fnt = "{}";
+    fnt = "";
   else
     fnt = t.fontname;
   endif
   f = fnt;
   it = false;
   bld = false;
   if (! isempty (t.fontweight) && strcmpi (t.fontweight, "bold"))
     if (! isempty (t.fontangle)
