# HG changeset patch
# User jwe
# Date 798493125 0
#      Fri Apr 21 19:38:45 1995 +0000
# Node ID 3051623587278db58b3a26dc885d29cac1463ef2
# Parent  fd3ed8834b77f3795ef3ee49203a95986eb6dfbb
[project @ 1995-04-21 19:38:45 by jwe]

diff --git a/src/tc-rep-ass.cc b/src/tc-rep-ass.cc
--- a/src/tc-rep-ass.cc
+++ b/src/tc-rep-ass.cc
@@ -615,18 +615,17 @@ TC_REP::fortran_style_matrix_assignment 
 
 void
 TC_REP::vector_assignment (const tree_constant& rhs,
 			   const tree_constant& i_arg)
 {
   int nr = rows ();
   int nc = columns ();
 
-  assert ((nr == 1 || nc == 1 || (nr == 0 && nc == 0))
-	  && ! user_pref.do_fortran_indexing);
+  assert ((nr <= 1 || nc <= 1) && ! user_pref.do_fortran_indexing);
 
   tree_constant tmp_i = i_arg.make_numeric_or_range_or_magic ();
 
   if (error_state)
     return;
 
   TC_REP::constant_type itype = tmp_i.const_type ();
 
@@ -768,23 +767,27 @@ TC_REP::do_vector_assign (const tree_con
     }
   else if (rhs_nr == 0 && rhs_nc == 0)
     {
       int nr = rows ();
       int nc = columns ();
 
       int len = MAX (nr, nc);
 
-      if (i < 0 || i >= len)
+      if (i < 0 || i >= len || (nr == 0 && nc == 0))
 	{
 	  ::error ("A(int) = []: index out of range");
 	  return;
 	}
 
-      if (nr == 1)
+      if (nr == 0 && nc > 0)
+	resize (0, nc - 1);
+      else if (nc == 0 && nr > 0)
+	resize (nr - 1, 0);
+      else if (nr == 1)
 	delete_column (i);
       else if (nc == 1)
 	delete_row (i);
       else
 	panic_impossible ();
     }
   else
     {
@@ -2172,16 +2175,19 @@ TC_REP::delete_row (int idx)
 }
 
 void
 TC_REP::delete_rows (idx_vector& iv)
 {
   iv.sort_uniq ();
   int num_to_delete = iv.length ();
 
+  if (num_to_delete == 0)
+    return;
+
   int nr = rows ();
   int nc = columns ();
 
 // If deleting all rows of a column vector, make result 0x0.
   if (nc == 1 && num_to_delete == nr)
     nc = 0;
 
   if (type_tag == matrix_constant)
@@ -2233,16 +2239,19 @@ TC_REP::delete_rows (idx_vector& iv)
 }
 
 void
 TC_REP::delete_rows (Range& ri)
 {
   ri.sort ();
   int num_to_delete = ri.nelem ();
 
+  if (num_to_delete == 0)
+    return;
+
   int nr = rows ();
   int nc = columns ();
 
 // If deleting all rows of a column vector, make result 0x0.
   if (nc == 1 && num_to_delete == nr)
     nc = 0;
 
   double ib = ri.base ();
@@ -2348,16 +2357,19 @@ TC_REP::delete_column (int idx)
 }
 
 void
 TC_REP::delete_columns (idx_vector& jv)
 {
   jv.sort_uniq ();
   int num_to_delete = jv.length ();
 
+  if (num_to_delete == 0)
+    return;
+
   int nr = rows ();
   int nc = columns ();
 
 // If deleting all columns of a row vector, make result 0x0.
   if (nr == 1 && num_to_delete == nc)
     nr = 0;
 
   if (type_tag == matrix_constant)
@@ -2409,16 +2421,19 @@ TC_REP::delete_columns (idx_vector& jv)
 }
 
 void
 TC_REP::delete_columns (Range& rj)
 {
   rj.sort ();
   int num_to_delete = rj.nelem ();
 
+  if (num_to_delete == 0)
+    return;
+
   int nr = rows ();
   int nc = columns ();
 
 // If deleting all columns of a row vector, make result 0x0.
   if (nr == 1 && num_to_delete == nc)
     nr = 0;
 
   double jb = rj.base ();
