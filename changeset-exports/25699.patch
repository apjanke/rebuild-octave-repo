# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1521202673 -3600
#      Fri Mar 16 13:17:53 2018 +0100
# Node ID 825e1d0dfa8ed4b2c65719b0c0d5451019f6abf6
# Parent  ac386820f2b678d0b21c194b40b343220edb5d27
Allow svd to return two output arguments (bug #53356).

* svd.cc: Do not print_usage() when nargout == 2.

diff --git a/libinterp/corefcn/svd.cc b/libinterp/corefcn/svd.cc
--- a/libinterp/corefcn/svd.cc
+++ b/libinterp/corefcn/svd.cc
@@ -163,17 +163,17 @@ routines in @sc{lapack}.  The default ro
 which is 5X faster than the alternative @code{gesvd}, but may use more memory
 and may be less accurate for some matrices.  See the documentation for
 @code{svd_driver} for more information.
 @seealso{svd_driver, svds, eig, lu, chol, hess, qr, qz}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
-  if (nargin < 1 || nargin > 2 || nargout == 2 || nargout > 3)
+  if (nargin < 1 || nargin > 2 || nargout > 3)
     print_usage ();
 
   octave_value arg = args(0);
 
   if (arg.ndims () != 2)
     error ("svd: A must be a 2-D matrix");
 
   octave_value_list retval;
@@ -193,16 +193,19 @@ and may be less accurate for some matric
             (tmp,
              svd_type<FloatMatrix> (nargin, nargout, args, tmp),
              svd_driver<FloatMatrix> ());
 
           FloatDiagMatrix sigma = result.singular_values ();
 
           if (nargout == 0 || nargout == 1)
             retval(0) = sigma.extract_diag ();
+          else if (nargout == 2)
+            retval = ovl (result.left_singular_matrix (),
+                          sigma);
           else
             retval = ovl (result.left_singular_matrix (),
                           sigma,
                           result.right_singular_matrix ());
         }
       else if (arg.iscomplex ())
         {
           FloatComplexMatrix ctmp = arg.float_complex_matrix_value ();
@@ -214,16 +217,19 @@ and may be less accurate for some matric
             (ctmp,
              svd_type<FloatComplexMatrix> (nargin, nargout, args, ctmp),
              svd_driver<FloatComplexMatrix> ());
 
           FloatDiagMatrix sigma = result.singular_values ();
 
           if (nargout == 0 || nargout == 1)
             retval(0) = sigma.extract_diag ();
+          else if (nargout == 2)
+            retval = ovl (result.left_singular_matrix (),
+                          sigma);
           else
             retval = ovl (result.left_singular_matrix (),
                           sigma,
                           result.right_singular_matrix ());
         }
     }
   else
     {
@@ -238,16 +244,19 @@ and may be less accurate for some matric
             (tmp,
              svd_type<Matrix> (nargin, nargout, args, tmp),
              svd_driver<Matrix> ());
 
           DiagMatrix sigma = result.singular_values ();
 
           if (nargout == 0 || nargout == 1)
             retval(0) = sigma.extract_diag ();
+          else if (nargout == 2)
+            retval = ovl (result.left_singular_matrix (),
+                          sigma);
           else
             retval = ovl (result.left_singular_matrix (),
                           sigma,
                           result.right_singular_matrix ());
         }
       else if (arg.iscomplex ())
         {
           ComplexMatrix ctmp = arg.complex_matrix_value ();
@@ -259,35 +268,38 @@ and may be less accurate for some matric
             (ctmp,
              svd_type<ComplexMatrix> (nargin, nargout, args, ctmp),
              svd_driver<ComplexMatrix> ());
 
           DiagMatrix sigma = result.singular_values ();
 
           if (nargout == 0 || nargout == 1)
             retval(0) = sigma.extract_diag ();
+          else if (nargout == 2)
+            retval = ovl (result.left_singular_matrix (),
+                          sigma);
           else
             retval = ovl (result.left_singular_matrix (),
                           sigma,
                           result.right_singular_matrix ());
         }
       else
         err_wrong_type_arg ("svd", arg);
     }
 
   return retval;
 }
 
 /*
 %!assert (svd ([1, 2; 2, 1]), [3; 1], sqrt (eps))
 
 %!test
-a = [1, 2; 3, 4] + [5, 6; 7, 8]*i;
-[u,s,v] = svd (a);
-assert (a, u * s * v', 128 * eps);
+%! a = [1, 2; 3, 4] + [5, 6; 7, 8]*i;
+%! [u,s,v] = svd (a);
+%! assert (a, u * s * v', 128 * eps);
 
 %!test
 %! [u, s, v] = svd ([1, 2; 2, 1]);
 %! x = 1 / sqrt (2);
 %! assert (u, [-x, -x; -x, x], sqrt (eps));
 %! assert (s, [3, 0; 0, 1], sqrt (eps));
 %! assert (v, [-x, x; -x, -x], sqrt (eps));
 
@@ -357,17 +369,16 @@ assert (a, u * s * v', 128 * eps);
 %!test <*49309>
 %! [~,~,v] = svd ([1, 1, 1], 0);
 %! assert (size (v), [3 3]);
 %! [~,~,v] = svd ([1, 1, 1], "econ");
 %! assert (size (v), [3 1]);
 
 %!error svd ()
 %!error svd ([1, 2; 4, 5], 2, 3)
-%!error [u, v] = svd ([1, 2; 3, 4])
 */
 
 DEFUN (svd_driver, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} svd_driver ()
 @deftypefnx {} {@var{old_val} =} svd_driver (@var{new_val})
 @deftypefnx {} {} svd_driver (@var{new_val}, "local")
 Query or set the underlying @sc{lapack} driver used by @code{svd}.
