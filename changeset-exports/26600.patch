# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1548193511 28800
#      Tue Jan 22 13:45:11 2019 -0800
# Branch stable
# Node ID f6730533820e0357556626d994598e4cedde4c4a
# Parent  988118822a9297fb03bc25f2d6e310625e36f6bf
doc: clean up doc example blocks for accuracy and consistent formatting

* bitset.m, circshift.m, idivide.m, int2str.m, integral3.m, num2str.m, rat.m,
repelem.m, shiftdim.m, structfun.m, trapz.m, condeig.m, cross.m, qzhess.m,
computer.m, fullfile.m, orderfields.m, substruct.m, swapbytes.m, contourc.m,
isprime.m, runlength.m, clock.m, date.m: Fix presentation and formatting of
example block results.
* graphics.cc (Fset): Likewise.
* sparse.cc (Fsparse): Likewise.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -12212,22 +12212,22 @@ property.  If no output variable is used
 printed to the screen.
 
 For example,
 
 @example
 @group
 hf = figure ();
 set (hf, "paperorientation")
-@result{}  paperorientation:  [ landscape | @{portrait@} | rotated ]
+@result{}  [ landscape | @{portrait@} ]
 @end group
 @end example
 
 @noindent
-shows the paperorientation property can take three values with the default
+shows the paperorientation property can take two values with the default
 being @qcode{"portrait"}.
 @seealso{get}
 @end deftypefn */)
 {
   gh_manager::auto_lock guard;
 
   int nargin = args.length ();
 
diff --git a/libinterp/corefcn/sparse.cc b/libinterp/corefcn/sparse.cc
--- a/libinterp/corefcn/sparse.cc
+++ b/libinterp/corefcn/sparse.cc
@@ -115,34 +115,34 @@ The argument @var{nzmax} is ignored but 
 
 Example 1 (sum at repeated indices):
 
 @example
 @group
 @var{i} = [1 1 2]; @var{j} = [1 1 2]; @var{sv} = [3 4 5];
 sparse (@var{i}, @var{j}, @var{sv}, 3, 4)
 @result{}
-Compressed Column Sparse (rows = 3, cols = 4, nnz = 2 [17%])
+   Compressed Column Sparse (rows = 3, cols = 4, nnz = 2 [17%])
 
-  (1, 1) ->  7
-  (2, 2) ->  5
+     (1, 1) ->  7
+     (2, 2) ->  5
 @end group
 @end example
 
 Example 2 ("unique" option):
 
 @example
 @group
 @var{i} = [1 1 2]; @var{j} = [1 1 2]; @var{sv} = [3 4 5];
 sparse (@var{i}, @var{j}, @var{sv}, 3, 4, "unique")
 @result{}
-Compressed Column Sparse (rows = 3, cols = 4, nnz = 2 [17%])
+   Compressed Column Sparse (rows = 3, cols = 4, nnz = 2 [17%])
 
-  (1, 1) ->  4
-  (2, 2) ->  5
+     (1, 1) ->  4
+     (2, 2) ->  5
 @end group
 @end example
 @seealso{full, accumarray, spalloc, spdiags, speye, spones, sprand, sprandn, sprandsym, spconvert, spfun}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin == 0 || nargin > 6)
diff --git a/scripts/general/bitset.m b/scripts/general/bitset.m
--- a/scripts/general/bitset.m
+++ b/scripts/general/bitset.m
@@ -26,34 +26,34 @@
 ## @w{@var{val} = 1} sets bits.  If no @var{val} is specified it defaults to
 ## 1 (set bit).  All inputs must be the same size or scalars.
 ##
 ## Example 1: Set multiple bits
 ##
 ## @example
 ## @group
 ## x = bitset (1, 3:5)
-## x =
+##   @result{} x =
 ##
 ##    5    9   17
 ##
 ## dec2bin (x)
 ##   @result{}
 ##      00101
 ##      01001
 ##      10001
 ## @end group
 ## @end example
 ##
 ## Example 2: Reset and set bits
 ##
 ## @example
 ## @group
 ## x = bitset ([15 14], 1, [0 1])
-## x =
+##   @result{} x =
 ##
 ##    14    15
 ## @end group
 ## @end example
 ## @seealso{bitand, bitor, bitxor, bitget, bitcmp, bitshift, intmax, flintmax}
 ## @end deftypefn
 
 function C = bitset (A, n, val = true)
diff --git a/scripts/general/circshift.m b/scripts/general/circshift.m
--- a/scripts/general/circshift.m
+++ b/scripts/general/circshift.m
@@ -34,34 +34,38 @@
 ## Examples:
 ##
 ## @example
 ## x = [1, 2, 3;
 ##      4, 5, 6;
 ##      7, 8, 9];
 ## ## positive shift on rows (1st non-singular dim)
 ## circshift (x, 1)
-##  @result{}  7, 8, 9
-##      1, 2, 3
-##      4, 5, 6
+##   @result{}
+##        7   8   9
+##        1   2   3
+##        4   5   6
 ## ## negative shift on rows (1st non-singular dim)
 ## circshift (x, -2)
-##  @result{}  7, 8, 9
-##      1, 2, 3
-##      4, 5, 6
+##   @result{}
+##        7   8   9
+##        1   2   3
+##        4   5   6
 ## ## no shift of rows, shift columns by 1 (2nd dimension)
 ## circshift (x, [0,1])
-##  @result{}  3, 1, 2
-##      6, 4, 5
-##      9, 7, 8
+##   @result{}
+##        3   1   2
+##        6   4   5
+##        9   7   8
 ## ## shift columns (2nd dimension)
 ## circshift (x, 1, 2)
-##  @result{}  3, 1, 2
-##      6, 4, 5
-##      9, 7, 8
+##   @result{}
+##        3   1   2
+##        6   4   5
+##        9   7   8
 ## @end example
 ## @seealso{permute, ipermute, shiftdim}
 ## @end deftypefn
 
 function y = circshift (x, n, dim)
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
diff --git a/scripts/general/idivide.m b/scripts/general/idivide.m
--- a/scripts/general/idivide.m
+++ b/scripts/general/idivide.m
@@ -47,23 +47,23 @@
 ##
 ## @noindent
 ## If @var{op} is not given it defaults to @qcode{"fix"}.
 ## An example demonstrating these rounding rules is
 ##
 ## @example
 ## @group
 ## idivide (int8 ([-3, 3]), int8 (4), "fix")
-##   @result{} int8 ([0, 0])
+##   @result{}   0   0
 ## idivide (int8 ([-3, 3]), int8 (4), "round")
-##   @result{} int8 ([-1, 1])
+##   @result{}  -1   1
 ## idivide (int8 ([-3, 3]), int8 (4), "floor")
-##   @result{} int8 ([-1, 0])
+##   @result{}  -1   0
 ## idivide (int8 ([-3, 3]), int8 (4), "ceil")
-##   @result{} int8 ([0, 1])
+##   @result{}   0   1
 ## @end group
 ## @end example
 ##
 ## @seealso{ldivide, rdivide}
 ## @end deftypefn
 
 function z = idivide (x, y, op)
 
diff --git a/scripts/general/int2str.m b/scripts/general/int2str.m
--- a/scripts/general/int2str.m
+++ b/scripts/general/int2str.m
@@ -19,28 +19,29 @@
 ## -*- texinfo -*-
 ## @deftypefn {} {} int2str (@var{n})
 ## Convert an integer (or array of integers) to a string (or a character
 ## array).
 ##
 ## @example
 ## @group
 ## int2str (123)
-##      @result{} "123"
+##   @result{} 123
 ##
 ## s = int2str ([1, 2, 3; 4, 5, 6])
-##      @result{} s =
+##   @result{} s =
 ##         1  2  3
 ##         4  5  6
 ##
 ## whos s
-##      @result{}
-##       Attr Name        Size                     Bytes  Class
-##       ==== ====        ====                     =====  =====
-##            s           2x7                         14  char
+##   @result{} Variables in the current scope:
+##         Attr Name        Size                     Bytes  Class
+##         ==== ====        ====                     =====  =====
+##              s           2x7                         14  char
+##      Total is 14 elements using 14 bytes
 ## @end group
 ## @end example
 ##
 ## This function is not very flexible.  For better control over the
 ## results, use @code{sprintf} (@pxref{Formatted Output}).
 ##
 ## Programming Notes:
 ##
diff --git a/scripts/general/integral3.m b/scripts/general/integral3.m
--- a/scripts/general/integral3.m
+++ b/scripts/general/integral3.m
@@ -79,31 +79,31 @@
 ## integral.
 ##
 ## Example 1 : integrate over a rectangular volume
 ##
 ## @example
 ## @group
 ## @var{f} = @@(@var{x},@var{y},@var{z}) ones (size (@var{x}));
 ## @var{q} = integral3 (@var{f}, 0, 1, 0, 1, 0, 1)
-##   @result{} @var{q} =  1
+##   @result{} @var{q} =  1.00000
 ## @end group
 ## @end example
 ##
 ## For this constant-value integrand, the result is a volume which is just
 ## @code{@var{Length} * @var{Width} * @var{Height}}.
 ##
 ## Example 2 : integrate over a spherical volume
 ##
 ## @example
 ## @group
 ## @var{f} = @@(@var{x},@var{y}) ones (size (@var{x}));
 ## @var{ymax} = @@(@var{x}) sqrt (1 - @var{x}.^2);
-## @var{zmax} = @@(@var{x}) sqrt (1 - @var{x}.^2 - @var{y}.^2);
-## @var{q} = integral3 (@var{f}, 0, 1, 0, @var{ymax})
+## @var{zmax} = @@(@var{x},@var{y}) sqrt (1 - @var{x}.^2 - @var{y}.^2);
+## @var{q} = integral3 (@var{f}, 0, 1, 0, @var{ymax}, 0, @var{zmax})
 ##   @result{} @var{q} =  0.52360
 ## @end group
 ## @end example
 ##
 ## For this constant-value integrand, the result is a volume which is 1/8th
 ## of a unit sphere or @code{1/8 * 4/3 * pi}.
 ##
 ## Programming Notes: If there are singularities within the integration region
diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -27,33 +27,34 @@
 ## string (@var{format}) as in @code{sprintf} (@pxref{Formatted Output}).
 ## @code{num2str} can also process complex numbers.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
 ## num2str (123.456)
-##      @result{} "123.46"
+##   @result{} 123.456
 ##
 ## num2str (123.456, 4)
-##      @result{} "123.5"
+##   @result{} 123.5
 ##
 ## s = num2str ([1, 1.34; 3, 3.56], "%5.1f")
-##      @result{} s =
-##         1.0  1.3
-##         3.0  3.6
+##   @result{} s =
+##        1.0  1.3
+##        3.0  3.6
 ## whos s
-##      @result{}
-##       Attr Name        Size                     Bytes  Class
-##       ==== ====        ====                     =====  =====
-##            s           2x8                         16  char
+##   @result{} Variables in the current scope:
+##         Attr Name        Size                     Bytes  Class
+##         ==== ====        ====                     =====  =====
+##              s           2x8                         16  char
+##      Total is 16 elements using 16 bytes
 ##
 ## num2str (1.234 + 27.3i)
-##      @result{} "1.234+27.3i"
+##   @result{} 1.234+27.3i
 ## @end group
 ## @end example
 ##
 ## The @code{num2str} function is not very flexible.  For better control
 ## over the results, use @code{sprintf} (@pxref{Formatted Output}).
 ##
 ## Programming Notes:
 ##
diff --git a/scripts/general/rat.m b/scripts/general/rat.m
--- a/scripts/general/rat.m
+++ b/scripts/general/rat.m
@@ -33,24 +33,24 @@
 ## When called with two output arguments, return numeric matrices for the
 ## numerator and denominator of a fractional representation of @var{x} such
 ## that @code{@var{x} = @var{n} ./ @var{d}}.
 ##
 ## For example:
 ##
 ## @example
 ## @group
-## @var{s} = rat (pi)
+## s = rat (pi)
 ## @result{} s = 3 + 1/(7 + 1/16)
 ##
-## [@var{n}, @var{d}] = rat (pi)
-## @result{} @var{n} =  355
-## @result{} @var{d} =  113
+## [n, d] = rat (pi)
+## @result{} n =  355
+## @result{} d =  113
 ##
-## @var{n}/@var{d} - pi
+## n / d - pi
 ## @result{} 0.00000026676
 ## @end group
 ## @end example
 ##
 ## Programming Note: With one output @code{rat} produces a string which is a
 ## continued fraction expansion.  To produce a string which is a simple
 ## fraction (one numerator, one denominator) use @code{rats}.
 ##
diff --git a/scripts/general/repelem.m b/scripts/general/repelem.m
--- a/scripts/general/repelem.m
+++ b/scripts/general/repelem.m
@@ -49,17 +49,18 @@
 ## repelem (A, B)
 ##   @result{}   1   1   2   4   5   5
 ## @end group
 ## @end example
 ##
 ## @example
 ## @group
 ## A = magic (3)
-##   @result{}   8   1   6
+##   @result{} A =
+##        8   1   6
 ##        3   5   7
 ##        4   9   2
 ## B1 = [1 2 3];
 ## B2 = 2;
 ## repelem (A, B1, B2)
 ##   @result{}     8   8   1   1   6   6
 ##          3   3   5   5   7   7
 ##          3   3   5   5   7   7
diff --git a/scripts/general/shiftdim.m b/scripts/general/shiftdim.m
--- a/scripts/general/shiftdim.m
+++ b/scripts/general/shiftdim.m
@@ -32,22 +32,24 @@
 ## second output argument @var{ns}.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## x = ones (1, 2, 3);
 ## size (shiftdim (x, -1))
-##    @result{} [1, 1, 2, 3]
+##   @result{}   1   1   2   3
 ## size (shiftdim (x, 1))
-##    @result{} [2, 3]
+##   @result{}   2   3
 ## [b, ns] = shiftdim (x)
-##    @result{} b = [1, 1, 1; 1, 1, 1]
-##    @result{} ns = 1
+##   @result{} b =
+##         1   1   1
+##         1   1   1
+##   @result{} ns = 1
 ## @end group
 ## @end example
 ## @seealso{reshape, permute, ipermute, circshift, squeeze}
 ## @end deftypefn
 
 function [y, ns]  = shiftdim (x, n)
 
   if (nargin < 1 || nargin > 2)
diff --git a/scripts/general/structfun.m b/scripts/general/structfun.m
--- a/scripts/general/structfun.m
+++ b/scripts/general/structfun.m
@@ -40,21 +40,19 @@
 ## placed into a structure with the same fieldnames as the input structure.
 ##
 ## @example
 ## @group
 ## s.name1 = "John Smith";
 ## s.name2 = "Jill Jones";
 ## structfun (@@(x) regexp (x, '(\w+)$', "matches")@{1@}, s,
 ##            "UniformOutput", false)
-## @result{}
-##    @{
-##      name1 = Smith
-##      name2 = Jones
-##    @}
+##   @result{} scalar structure containing the fields:
+##        name1 = Smith
+##        name2 = Jones
 ## @end group
 ## @end example
 ##
 ## Given the parameter @qcode{"ErrorHandler"}, @var{errfunc} defines a function
 ## to call in case @var{func} generates an error.  The form of the function is
 ##
 ## @example
 ## function [@dots{}] = errfunc (@var{se}, @dots{})
diff --git a/scripts/general/trapz.m b/scripts/general/trapz.m
--- a/scripts/general/trapz.m
+++ b/scripts/general/trapz.m
@@ -39,21 +39,21 @@
 ## over the range [0, 1] is @math{x^4/4} or 0.25.  The following code uses
 ## @code{trapz} to calculate the integral in three different ways.
 ##
 ## @example
 ## @group
 ## x = 0:0.1:1;
 ## y = x.^3;
 ## q = trapz (y)
-##   @result{} q = 2.525   # No scaling
+##   @result{} q = 2.5250
 ## q * 0.1
-##   @result{} q = 0.2525  # Approximation to integral by scaling
+##   @result{} 0.25250
 ## trapz (x, y)
-##   @result{} q = 0.2525  # Same result by specifying @var{x}
+##   @result{} 0.25250
 ## @end group
 ## @end example
 ##
 ## @seealso{cumtrapz}
 ## @end deftypefn
 
 ## Author:      Kai Habel <kai.habel@gmx.de>
 ##
diff --git a/scripts/linear-algebra/condeig.m b/scripts/linear-algebra/condeig.m
--- a/scripts/linear-algebra/condeig.m
+++ b/scripts/linear-algebra/condeig.m
@@ -45,17 +45,19 @@
 ## @end itemize
 ##
 ## Example
 ##
 ## @example
 ## @group
 ## a = [1, 2; 3, 4];
 ## c = condeig (a)
-## @result{} [1.0150; 1.0150]
+##   @result{} c =
+##        1.0150
+##        1.0150
 ## @end group
 ## @end example
 ## @seealso{eig, cond, balance}
 ## @end deftypefn
 
 function [v, lambda, c] = condeig (a)
 
   if (nargin != 1)
diff --git a/scripts/linear-algebra/cross.m b/scripts/linear-algebra/cross.m
--- a/scripts/linear-algebra/cross.m
+++ b/scripts/linear-algebra/cross.m
@@ -27,18 +27,19 @@
 ##
 ## The optional argument  @var{dim} forces the cross product to be calculated
 ## along the specified dimension.
 ##
 ## Example Code:
 ##
 ## @example
 ## @group
-## cross ([1,1,0], [0,1,1])
-##      @result{} [ 1; -1; 1 ]
+## cross ([1, 1, 0], [0, 1, 1])
+##   @result{}
+##        1   -1   1
 ## @end group
 ## @end example
 ##
 ## @seealso{dot, curl, divergence}
 ## @end deftypefn
 
 ## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 15 October 1994
diff --git a/scripts/linear-algebra/qzhess.m b/scripts/linear-algebra/qzhess.m
--- a/scripts/linear-algebra/qzhess.m
+++ b/scripts/linear-algebra/qzhess.m
@@ -24,20 +24,29 @@
 ## @code{@var{bb} = @var{q} * @var{B} * @var{z}}, with @var{q} and @var{z}
 ## orthogonal.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## [aa, bb, q, z] = qzhess ([1, 2; 3, 4], [5, 6; 7, 8])
-##      @result{} aa = [ -3.02244, -4.41741;  0.92998,  0.69749 ]
-##      @result{} bb = [ -8.60233, -9.99730;  0.00000, -0.23250 ]
-##      @result{}  q = [ -0.58124, -0.81373; -0.81373,  0.58124 ]
-##      @result{}  z = [ 1, 0; 0, 1 ]
+##   @result{} aa =
+##       -3.02244  -4.41741
+##        0.92998   0.69749
+##   @result{} bb =
+##       -8.60233  -9.99730
+##        0.00000  -0.23250
+##   @result{} q =
+##       -0.58124  -0.81373
+##       -0.81373   0.58124
+##   @result{} z =
+##      Diagonal Matrix
+##        1   0
+##        0   1
 ## @end group
 ## @end example
 ##
 ## The Hessenberg-triangular decomposition is the first step in
 ## @nospell{Moler and Stewart's} QZ@tie{}decomposition algorithm.
 ##
 ## Algorithm taken from @nospell{Golub and Van Loan},
 ## @cite{Matrix Computations, 2nd edition}.
diff --git a/scripts/miscellaneous/computer.m b/scripts/miscellaneous/computer.m
--- a/scripts/miscellaneous/computer.m
+++ b/scripts/miscellaneous/computer.m
@@ -26,20 +26,20 @@
 ## identifies the type of computer that Octave is running on.
 ##
 ## If invoked with an output argument, the value is returned instead of
 ## printed.  For example:
 ##
 ## @example
 ## @group
 ## computer ()
-##    @print{} i586-pc-linux-gnu
+##    @print{} x86_64-pc-linux-gnu
 ##
 ## mycomp = computer ()
-##    @result{} mycomp = "i586-pc-linux-gnu"
+##    @result{} mycomp = x86_64-pc-linux-gnu
 ## @end group
 ## @end example
 ##
 ## If two output arguments are requested, also return the maximum number of
 ## elements for an array.  This will depend on whether Octave has been
 ## compiled with 32-bit or 64-bit index vectors.
 ##
 ## If three output arguments are requested, also return the byte order of the
diff --git a/scripts/miscellaneous/fullfile.m b/scripts/miscellaneous/fullfile.m
--- a/scripts/miscellaneous/fullfile.m
+++ b/scripts/miscellaneous/fullfile.m
@@ -27,19 +27,22 @@
 ## separator.
 ##
 ## If the last component part is a cell array, returns a cell array of
 ## filepaths, one for each element in the last component, e.g.:
 ##
 ## @example
 ## @group
 ## fullfile ("/home/username", "data", @{"f1.csv", "f2.csv", "f3.csv"@})
-## @result{}  /home/username/data/f1.csv
-##     /home/username/data/f2.csv
-##     /home/username/data/f3.csv
+##   @result{}
+##       @{
+##         [1,1] = /home/username/data/f1.csv
+##         [1,2] = /home/username/data/f2.csv
+##         [1,3] = /home/username/data/f3.csv
+##       @}
 ## @end group
 ## @end example
 ##
 ## On Windows systems, while forward slash file separators do work, they are
 ## replaced by backslashes; in addition drive letters are stripped of leading
 ## file separators to obtain a valid file path.
 ##
 ## Note: @code{fullfile} does not perform any validation of the resulting full
diff --git a/scripts/miscellaneous/orderfields.m b/scripts/miscellaneous/orderfields.m
--- a/scripts/miscellaneous/orderfields.m
+++ b/scripts/miscellaneous/orderfields.m
@@ -36,68 +36,64 @@
 ## converts the original name order to the new name order.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
 ## s = struct ("d", 4, "b", 2, "a", 1, "c", 3);
 ## t1 = orderfields (s)
-##      @result{} t1 =
-##         @{
-##           a =  1
-##           b =  2
-##           c =  3
-##           d =  4
-##         @}
+##   @result{} t1 =
+##        scalar structure containing the fields:
+##          a =  1
+##          b =  2
+##          c =  3
+##          d =  4
 ## @end group
 ## @end example
 ##
 ## @example
 ## @group
 ## t = struct ("d", @{@}, "c", @{@}, "b", @{@}, "a", @{@});
 ## t2 = orderfields (s, t)
-##      @result{} t2 =
-##         @{
-##           d =  4
-##           c =  3
-##           b =  2
-##           a =  1
-##         @}
+##   @result{} t2 =
+##        scalar structure containing the fields:
+##          d =  4
+##          c =  3
+##          b =  2
+##          a =  1
 ## @end group
 ## @end example
 ##
 ## @example
 ## @group
 ## t3 = orderfields (s, [3, 2, 4, 1])
-##      @result{} t3 =
-##         @{
-##           a =  1
-##           b =  2
-##           c =  3
-##           d =  4
-##         @}
+##   @result{} t3 =
+##        scalar structure containing the fields:
+##          a =  1
+##          b =  2
+##          c =  3
+##          d =  4
 ## @end group
 ## @end example
 ##
 ## @example
 ## @group
 ## [t4, p] = orderfields (s, @{"d", "c", "b", "a"@})
-##      @result{} t4 =
-##         @{
-##           d =  4
-##           c =  3
-##           b =  2
-##           a =  1
-##         @}
-##         p =
-##            1
-##            4
-##            2
-##            3
+##   @result{} t4 =
+##        scalar structure containing the fields:
+##          d =  4
+##          c =  3
+##          b =  2
+##          a =  1
+##      p =
+##         1
+##         4
+##         2
+##         3
 ## @end group
 ## @end example
 ##
 ## @seealso{fieldnames, getfield, setfield, rmfield, isfield, isstruct, struct}
 ## @end deftypefn
 
 ## Author: Paul Kienzle <pkienzle@users.sf.net>
 ## Adapted-By: jwe
diff --git a/scripts/miscellaneous/substruct.m b/scripts/miscellaneous/substruct.m
--- a/scripts/miscellaneous/substruct.m
+++ b/scripts/miscellaneous/substruct.m
@@ -21,31 +21,29 @@
 ## @deftypefn {} {} substruct (@var{type}, @var{subs}, @dots{})
 ## Create a subscript structure for use with @code{subsref} or @code{subsasgn}.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## idx = substruct ("()", @{3, ":"@})
-##      @result{}
-##        idx =
-##        @{
+##   @result{} idx =
+##        scalar structure containing the fields:
 ##          type = ()
 ##          subs =
 ##          @{
 ##            [1,1] =  3
 ##            [1,2] = :
 ##          @}
-##        @}
 ## x = [1, 2, 3;
 ##      4, 5, 6;
 ##      7, 8, 9];
 ## subsref (x, idx)
-##    @result{} 7  8  9
+##   @result{}   7   8   9
 ## @end group
 ## @end example
 ## @seealso{subsref, subsasgn}
 ## @end deftypefn
 
 ## Author:  jwe
 
 function retval = substruct (varargin)
diff --git a/scripts/miscellaneous/swapbytes.m b/scripts/miscellaneous/swapbytes.m
--- a/scripts/miscellaneous/swapbytes.m
+++ b/scripts/miscellaneous/swapbytes.m
@@ -21,17 +21,17 @@
 ## Swap the byte order on values, converting from little endian to big endian
 ## and vice versa.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## swapbytes (uint16 (1:4))
-## @result{} [   256   512   768  1024]
+## @result{}   256   512   768  1024
 ## @end group
 ## @end example
 ##
 ## @seealso{typecast, cast}
 ## @end deftypefn
 
 function y = swapbytes (x)
 
diff --git a/scripts/plot/draw/contourc.m b/scripts/plot/draw/contourc.m
--- a/scripts/plot/draw/contourc.m
+++ b/scripts/plot/draw/contourc.m
@@ -54,19 +54,20 @@
 ##
 ## Example:
 ##
 ## @example
 ## @group
 ## x = 0:2;
 ## y = x;
 ## z = x' * y;
-## contourc (x, y, z, 2:3)
-##    @result{}   2.0000   2.0000   1.0000   3.0000   1.5000   2.0000
-##         2.0000   1.0000   2.0000   2.0000   2.0000   1.5000
+## c = contourc (x, y, z, 2:3)
+##   @result{} c =
+##         2.0000   1.0000   1.0000   2.0000   2.0000   3.0000   1.5000   2.0000
+##         4.0000   2.0000   2.0000   1.0000   1.0000   2.0000   2.0000   1.5000
 ## @end group
 ## @end example
 ## @seealso{contour, contourf, contour3, clabel}
 ## @end deftypefn
 
 function [c, lev] = contourc (varargin)
 
   if (nargin < 1 || nargin > 4)
diff --git a/scripts/specfun/isprime.m b/scripts/specfun/isprime.m
--- a/scripts/specfun/isprime.m
+++ b/scripts/specfun/isprime.m
@@ -36,24 +36,24 @@
 ## Exercise caution when testing complex and real values together in the same
 ## matrix.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
 ## isprime (1:6)
-##     @result{} [0, 1, 1, 0, 1, 0]
+##   @result{}  0  1  1  0  1  0
 ## @end group
 ## @end example
 ##
 ## @example
 ## @group
 ## isprime ([i, 2, 3, 5])
-##     @result{} [0, 0, 1, 0]
+##   @result{}  0  0  1  0
 ## @end group
 ## @end example
 ##
 ## Programming Note: @code{isprime} is appropriate if the maximum value in
 ## @var{x} is not too large (< 1e15).  For larger values special purpose
 ## factorization code should be used.
 ##
 ## Compatibility Note: @var{matlab} does not extend the definition of prime
diff --git a/scripts/statistics/runlength.m b/scripts/statistics/runlength.m
--- a/scripts/statistics/runlength.m
+++ b/scripts/statistics/runlength.m
@@ -24,17 +24,17 @@
 ## @var{count} is a vector with the lengths of each repeated value.
 ##
 ## The optional output @var{value} contains the value that was repeated in
 ## the sequence.
 ##
 ## @example
 ## @group
 ## runlength ([2, 2, 0, 4, 4, 4, 0, 1, 1, 1, 1])
-## @result{}  [2, 1, 3, 1, 4]
+## @result{}   2   1   3   1   4
 ## @end group
 ## @end example
 ## @seealso{run_count}
 ## @end deftypefn
 
 function [count, value] = runlength (x)
 
   if (nargin != 1)
diff --git a/scripts/time/clock.m b/scripts/time/clock.m
--- a/scripts/time/clock.m
+++ b/scripts/time/clock.m
@@ -24,17 +24,17 @@
 ## day (1-31), hour (0-23), minute (0-59), and second (0-61).  The seconds
 ## field has a fractional part after the decimal point for extended accuracy.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## fix (clock ())
-##      @result{} [ 1993, 8, 20, 4, 56, 1 ]
+##   @result{}   1993      8     20      4     56      1
 ## @end group
 ## @end example
 ##
 ## @code{clock} is more accurate on systems that have the @code{gettimeofday}
 ## function.
 ## @seealso{now, date, datevec}
 ## @end deftypefn
 
diff --git a/scripts/time/date.m b/scripts/time/date.m
--- a/scripts/time/date.m
+++ b/scripts/time/date.m
@@ -20,17 +20,17 @@
 ## @deftypefn {} {} date ()
 ## Return the current date as a character string in the form DD-MMM-YYYY@.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## date ()
-##   @result{} "20-Aug-1993"
+##   @result{} 20-Aug-1993
 ## @end group
 ## @end example
 ## @seealso{now, clock, datestr, localtime}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = date ()
