# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1526362120 14400
#      Tue May 15 01:28:40 2018 -0400
# Node ID b75d55b3dbb7853f21565cc4b92d98e4c69034cb
# Parent  f9ed57ecd3b490cc3cadd1361bb62bf5cbe83ecd
# Parent  cc40e47d3a44b39d923b709ec7f59872bcde0f73
maint: Merge stable to default.

diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -1100,17 +1100,25 @@ namespace octave
                     if (ext == ".m")
                       t = load_path::M_FILE;
                     else if (ext == ".oct")
                       t = load_path::OCT_FILE;
                     else if (ext == ".mex")
                       t = load_path::MEX_FILE;
 
                     if (t)
-                      retval[base] = t;
+                      {
+                        load_path::dir_info::fcn_file_map_iterator p
+                          = retval.find (base);
+
+                        if (p == retval.end ())
+                          retval[base] = t;
+                        else
+                          p->second |= t;
+                      }
                   }
               }
           }
       }
     else
       {
         std::string msg = dir.error ();
         warning ("load_path: %s: %s", d.c_str (), msg.c_str ());
@@ -1119,16 +1127,19 @@ namespace octave
     return retval;
   }
 
   void
   load_path::dir_info::update (void)
   {
     sys::file_stat fs (dir_name);
 
+    sys::file_stat pfs (sys::file_ops::concat (dir_name, "private"));
+    bool has_private_dir = pfs && pfs.is_dir ();
+
     if (! fs)
       {
         std::string msg = fs.error ();
         warning ("load_path: %s: %s", dir_name.c_str (), msg.c_str ());
       }
     else
       {
         if (is_relative)
@@ -1143,18 +1154,21 @@ namespace octave
                   {
                     // The directory is in the cache of all directories we have
                     // visited (indexed by absolute name).  If it is out of date,
                     // initialize it.  Otherwise, copy the info from the cache.
                     // By doing that, we avoid unnecessary calls to stat that can
                     // slow things down tremendously for large directories.
                     const dir_info& di = p->second;
 
-                    if (fs.mtime () + fs.time_resolution ()
-                        > di.dir_time_last_checked)
+                    if ((fs.mtime () + fs.time_resolution ()
+                         > di.dir_time_last_checked)
+                        || (has_private_dir
+                            && (pfs.mtime () + pfs.time_resolution ()
+                                > dir_time_last_checked)))
                       initialize ();
                     else
                       {
                         // Copy over info from cache, but leave dir_name and
                         // is_relative unmodified.
                         this->abs_dir_name = di.abs_dir_name;
                         this->dir_mtime = di.dir_mtime;
                         this->dir_time_last_checked = di.dir_time_last_checked;
@@ -1174,17 +1188,20 @@ namespace octave
             catch (const execution_exception&)
               {
                 // Skip updating if we don't know where we are,
                 // but don't treat it as an error.
                 interpreter::recover_from_exception ();
               }
           }
         // Absolute path, check timestamp to see whether it requires re-caching
-        else if (fs.mtime () + fs.time_resolution () > dir_time_last_checked)
+        else if (fs.mtime () + fs.time_resolution () > dir_time_last_checked
+                 || (has_private_dir
+                     && (pfs.mtime () + pfs.time_resolution ()
+                         > dir_time_last_checked)))
           initialize ();
       }
   }
 
   bool
   load_path::dir_info::is_package (const std::string& name) const
   {
     size_t pos = name.find ('.');
diff --git a/libinterp/corefcn/load-path.h b/libinterp/corefcn/load-path.h
--- a/libinterp/corefcn/load-path.h
+++ b/libinterp/corefcn/load-path.h
@@ -363,17 +363,17 @@ namespace octave
     typedef file_info_list_type::iterator file_info_list_iterator;
 
     // <FCN_NAME, FILE_INFO_LIST>
     typedef std::map<std::string, file_info_list_type> fcn_map_type;
 
     typedef fcn_map_type::const_iterator const_fcn_map_iterator;
     typedef fcn_map_type::iterator fcn_map_iterator;
 
-    // <DIR_NAME, <FCN_NAME, TYPE>>
+    // <DIR_NAME, <FCN_NAME, TYPES>>
     typedef std::map<std::string, dir_info::fcn_file_map_type>
       private_fcn_map_type;
 
     typedef private_fcn_map_type::const_iterator const_private_fcn_map_iterator;
     typedef private_fcn_map_type::iterator private_fcn_map_iterator;
 
     // <CLASS_NAME, <FCN_NAME, FILE_INFO_LIST>>
     typedef std::map<std::string, fcn_map_type> method_map_type;
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -646,17 +646,17 @@ property_get_defaultvalue (const octave_
   return retval;
 }
 
 static octave_value_list
 handle_delete (const octave_value_list& /* args */, int /* nargout */)
 {
   octave_value_list retval;
 
-  // FIXME: implement this
+  // FIXME: implement this.  Wait, what is this supposed to do?
 
   return retval;
 }
 
 cdef_class
 cdef_manager::make_class (const std::string& name,
                           const std::list<cdef_class>& super_list)
 {
@@ -1234,16 +1234,82 @@ private:
   }
 
 private:
   octave_value_list args;
 };
 
 //----------------------------------------------------------------------------
 
+void
+cdef_object_rep::release (const cdef_object& obj)
+{
+  // We need to be careful to keep a reference to the object if we are
+  // calling the delete method.  The object is passed to the delete
+  // method as an argument and if the count is already zero when we
+  // do that, then we will increment the count while creating the
+  // argument list for the delete method and then it will be decremented
+  // back to zero and we'll find ourselves in an infinite loop.
+
+  if (refcount - 1 > static_count ())
+    {
+      --refcount;
+      return;
+    }
+
+  if (is_handle_object () && ! is_meta_object ())
+    {
+      octave::unwind_protect frame;
+
+      // Clear interrupts.
+      frame.protect_var (octave_interrupt_state);
+      octave_interrupt_state = 0;
+
+      // Disallow quit().
+      frame.protect_var (quit_allowed);
+      quit_allowed = false;
+
+      interpreter_try (frame);
+
+      try
+        {
+          // Call classdef "delete()" method on object
+          get_class ().delete_object (obj);
+        }
+      catch (const octave::interrupt_exception&)
+        {
+          octave::interpreter::recover_from_exception ();
+
+          warning ("interrupt occurred in handle class delete method");
+        }
+      catch (const octave::execution_exception&)
+        {
+          std::string msg = last_error_message ();
+          warning ("error caught while executing handle class delete method:\n%s\n",
+                   msg.c_str ());
+
+        }
+      catch (const octave::exit_exception&)
+        {
+          // This shouldn't happen since we disabled quit above.
+          warning ("exit disabled while executing handle class delete method");
+        }
+      catch (...) // Yes, the black hole.  We're in a d-tor.
+        {
+          // This shouldn't happen, in theory.
+          warning ("internal error: unhandled exception in handle class delete method");
+        }
+    }
+
+  // Now it is safe to set the count to zero.
+  refcount--;
+
+  destroy ();
+}
+
 octave_map
 cdef_object::map_value (void) const
 {
   octave_map retval;
 
   warning_with_id ("Octave:classdef-to-struct",
                    "struct: converting a classdef object into a struct "
                    "overrides the access restrictions defined for properties. "
@@ -1808,57 +1874,16 @@ cdef_object_scalar::is_partially_constru
 inline void
 cdef_object_scalar::mark_as_constructed (const cdef_class& cls)
 {
   ctor_list.erase (cls);
 }
 
 handle_cdef_object::~handle_cdef_object (void)
 {
-  octave::unwind_protect frame;
-
-  // Clear interrupts.
-  frame.protect_var (octave_interrupt_state);
-  octave_interrupt_state = 0;
-
-  // Disallow quit().
-  frame.protect_var (quit_allowed);
-  quit_allowed = false;
-
-  interpreter_try (frame);
-
-  try
-    {
-      // Call classdef "delete()" method on object
-      get_class ().delete_object (get_class ());
-    }
-  catch (const octave::interrupt_exception&)
-    {
-      octave::interpreter::recover_from_exception ();
-
-      warning ("interrupt occurred in handle class delete method");
-    }
-  catch (const octave::execution_exception&)
-    {
-      std::string msg = last_error_message ();
-      warning ("error caught while executing handle class delete method:\n%s\n",
-               msg.c_str ());
-
-    }
-  catch (const octave::exit_exception&)
-    {
-      // This shouldn't happen since we disabled quit above.
-      warning ("exit disabled while executing handle class delete method");
-    }
-  catch (...) // Yes, the black hole.  We're in a d-tor.
-    {
-      // This shouldn't happen, in theory.
-      warning ("internal error: unhandled exception in handle class delete method");
-    }
-
 #if DEBUG_TRACE
   std::cerr << "deleting " << get_class ().get_name ()
             << " object (handle)" << std::endl;
 #endif
 }
 
 value_cdef_object::~value_cdef_object (void)
 {
@@ -2317,42 +2342,35 @@ cdef_class::cdef_class_rep::get_names (v
   find_names (names, false);
 
   string_vector v (names);
 
   return v.sort (true);
 }
 
 void
-cdef_class::cdef_class_rep::delete_object (cdef_object obj)
+cdef_class::cdef_class_rep::delete_object (const cdef_object& obj)
 {
-  auto it = method_map.find ("delete");
-
-  if (it != method_map.end ())
-    {
-      cdef_class cls = obj.get_class ();
-
-      obj.set_class (wrap ());
-
-      it->second.execute (obj, octave_value_list (), 0, false);
-
-      obj.set_class (cls);
-    }
+  cdef_method dtor = find_method ("delete");
+
+  if (dtor.ok ())
+    dtor.execute (obj, octave_value_list (), 0, true, "destructor");
 
   // FIXME: should we destroy corresponding properties here?
 
   // Call "delete" in super classes
 
   Cell super_classes = get ("SuperClasses").cell_value ();
 
   for (int i = 0; i < super_classes.numel (); i++)
     {
       cdef_class cls = lookup_class (super_classes(i));
 
-      cls.delete_object (obj);
+      if (cls.get_name () != "handle")
+        cls.delete_object (obj);
     }
 }
 
 octave_value_list
 cdef_class::cdef_class_rep::meta_subsref (const std::string& type,
                                           const std::list<octave_value_list>& idx,
                                           int nargout)
 {
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -172,21 +172,17 @@ public:
   {
     err_invalid_object ("is_constructed");
   }
 
   virtual octave_idx_type static_count (void) const { return 0; }
 
   virtual void destroy (void) { delete this; }
 
-  void release (void)
-  {
-    if (--refcount == static_count ())
-      destroy ();
-  }
+  void release (const cdef_object& obj);
 
   virtual dim_vector dims (void) const { return dim_vector (); }
 
 protected:
 
   // Reference count
   octave::refcount<octave_idx_type> refcount;
 
@@ -214,23 +210,25 @@ public:
 
   cdef_object (const cdef_object& obj)
     : rep (obj.rep) { rep->refcount++; }
 
   cdef_object (cdef_object_rep *r)
     : rep (r) { }
 
   virtual ~cdef_object (void)
-  { rep->release (); }
+  {
+    rep->release (*this);
+  }
 
   cdef_object& operator = (const cdef_object& obj)
   {
     if (rep != obj.rep)
       {
-        rep->release ();
+        rep->release (*this);
 
         rep = obj.rep;
         rep->refcount++;
       }
 
     return *this;
   }
 
@@ -705,17 +703,17 @@ private:
     std::map<std::string, cdef_property> get_property_map (int mode);
 
     string_vector get_names (void);
 
     void set_directory (const std::string& dir) { directory = dir; }
 
     std::string get_directory (void) const { return directory; }
 
-    void delete_object (cdef_object obj);
+    void delete_object (const cdef_object& obj);
 
     octave_value_list
     meta_subsref (const std::string& type,
                   const std::list<octave_value_list>& idx, int nargout);
 
     void meta_release (void);
 
     bool meta_accepts_postfix_index (char type) const
@@ -880,17 +878,17 @@ public:
   { return get_rep ()->get_directory (); }
 
   std::string get_name (void) const
   { return get_rep ()->get_name (); }
 
   bool is_builtin (void) const
   { return get_directory ().empty (); }
 
-  void delete_object (cdef_object obj)
+  void delete_object (const cdef_object& obj)
   { get_rep ()->delete_object (obj); }
 
   //! Analyze the tree_classdef tree and transform it to a cdef_class
   //!
   //! <b>All attribute validation should occur here.</b>
   //!
   //! Classdef attribute values can be given in the form of
   //! expressions.  These expressions must be evaluated before
diff --git a/libinterp/parse-tree/pt-arg-list.cc b/libinterp/parse-tree/pt-arg-list.cc
--- a/libinterp/parse-tree/pt-arg-list.cc
+++ b/libinterp/parse-tree/pt-arg-list.cc
@@ -242,22 +242,39 @@ namespace octave
             index_position = k;
             num_indices = len;
           }
 
         tree_expression *elt = *p++;
 
         if (elt)
           {
+            bool is_assignment = elt->is_assignment_expression ();
+
             octave_value tmp = tw->evaluate (elt);
 
             if (tmp.is_cs_list ())
               args.push_back (tmp.list_value ());
             else if (tmp.is_defined ())
-              args.push_back (tmp);
+              {
+                args.push_back (tmp);
+
+                // Defer deletion of any temporary values until the end
+                // of the containing statement.  That way destructors
+                // for temporary classdef handle objects will be called
+                // when it is safe to do so.
+                //
+                // FIXME: We could further limit this action to classdef
+                // handle objects, but we don't currently have an
+                // octave_value predicate for that so should add it on
+                // the default branch, not stable.
+
+                if (! is_assignment)
+                  tw->defer_deletion (tmp);
+              }
           }
         else
           {
             args.push_back (octave_value ());
             break;
           }
       }
 
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -73,16 +73,17 @@ namespace octave
   // Normal evaluator.
 
   void
   tree_evaluator::reset (void)
   {
     m_result_type = RT_UNDEFINED;
     m_expr_result_value = octave_value ();
     m_expr_result_value_list = octave_value_list ();
+    m_deferred_delete_stack.clear ();
     m_lvalue_list_stack.clear ();
     m_nargout_stack.clear ();
   }
 
   void
   tree_evaluator::visit_anon_fcn_handle (tree_anon_fcn_handle& anon_fh)
   {
     // FIXME: should CMD_LIST be limited to a single expression?
@@ -1361,16 +1362,26 @@ namespace octave
                   }
               }
           }
       }
 
     if (base_expr_val.is_undefined ())
       base_expr_val = evaluate (expr);
 
+    // Defer deletion of any temporary values until the end of the
+    // containing statement.  That way destructors for temporary
+    // classdef handle objects will be called when it is safe to do so.
+    //
+    // FIXME: We could further limit this action to classdef handle
+    // objects, but we don't currently have an octave_value predicate for
+    // that so should add it on the default branch, not stable.
+
+    defer_deletion (base_expr_val);
+
     // If we are indexing an object or looking at something like
     //
     //   classname.static_function (args, ...);
     //
     // then we'll just build a complete index list for one big subsref
     // call.  If the expression we are indexing is a classname then
     // base_expr_val will be an octave_classdef_meta object.  If we have
     // files in a +packagename folder, they will also be an
@@ -2262,16 +2273,23 @@ namespace octave
           }
 
         try
           {
             if (cmd)
               cmd->accept (*this);
             else
               {
+                unwind_protect frame;
+
+                frame.add_method (m_deferred_delete_stack,
+                                  &deferred_delete_stack::pop_frame);
+
+                m_deferred_delete_stack.mark ();
+
                 if (m_echo_state)
                   {
                     size_t line = stmt.line ();
                     echo_code (line);
                     m_echo_file_pos = line + 1;
                   }
 
                 if (debug_mode)
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -65,16 +65,64 @@ namespace octave
     enum echo_state
     {
       ECHO_OFF = 0,
       ECHO_SCRIPTS = 1,
       ECHO_FUNCTIONS = 2,
       ECHO_ALL = 4
     };
 
+    class deferred_delete_stack
+    {
+    public:
+
+      deferred_delete_stack (void) = default;
+
+      deferred_delete_stack (const deferred_delete_stack&) = default;
+
+      deferred_delete_stack& operator = (const deferred_delete_stack&) = default;
+
+      ~deferred_delete_stack (void) = default;
+
+      // An undefined value on the stack marks the boundary of the
+      // current frame.
+
+      void mark (void) { push (octave_value ()); }
+
+      void push (const octave_value& val) { m_stack.push (val); }
+
+      void pop_frame (void)
+      {
+        while (! m_stack.empty ())
+          {
+            octave_value val = val_pop ();
+
+            if (val.is_undefined ())
+              break;
+          }
+      }
+
+      void clear (void)
+      {
+        while (! m_stack.empty ())
+          m_stack.pop ();
+      }
+
+    private:
+
+      std::stack<octave_value> m_stack;
+
+      octave_value val_pop (void)
+      {
+        octave_value retval = m_stack.top ();
+        m_stack.pop ();
+        return retval;
+      }
+    };
+
     template <typename T>
     class value_stack
     {
     public:
 
       value_stack (void) = default;
 
       value_stack (const value_stack&) = default;
@@ -123,22 +171,23 @@ namespace octave
       std::stack<T> m_stack;
     };
 
     typedef void (*decl_elt_init_fcn) (tree_decl_elt&);
 
     tree_evaluator (interpreter& interp)
       : m_interpreter (interp), m_result_type (RT_UNDEFINED),
         m_expr_result_value (), m_expr_result_value_list (),
-        m_lvalue_list_stack (), m_nargout_stack (),
-        m_bp_table (*this), m_call_stack (interp), m_profiler (),
-        m_max_recursion_depth (256), m_silent_functions (false),
-        m_string_fill_char (' '), m_PS4 ("+ "), m_dbstep_flag (0),
-        m_echo (ECHO_OFF), m_echo_state (false), m_echo_file_name (),
-        m_echo_file_pos (1), m_echo_files (), m_in_loop_command (false)
+        m_deferred_delete_stack (), m_lvalue_list_stack (),
+        m_nargout_stack (), m_bp_table (*this), m_call_stack (interp),
+        m_profiler (), m_max_recursion_depth (256),
+        m_silent_functions (false), m_string_fill_char (' '),
+        m_PS4 ("+ "), m_dbstep_flag (0), m_echo (ECHO_OFF),
+        m_echo_state (false), m_echo_file_name (), m_echo_file_pos (1),
+        m_echo_files (), m_in_loop_command (false)
     { }
 
     // No copying!
 
     tree_evaluator (const tree_evaluator&) = delete;
 
     tree_evaluator& operator = (const tree_evaluator&) = delete;
 
@@ -260,16 +309,21 @@ namespace octave
       function,  // function body
       script,    // script file
       other      // command-line input or eval string
     };
 
     // The context for the current evaluation.
     static stmt_list_type statement_context;
 
+    void defer_deletion (const octave_value& val)
+    {
+      m_deferred_delete_stack.push (val);
+    }
+
     Matrix ignored_fcn_outputs (void) const;
 
     bool isargout (int nargout, int iout) const;
 
     void isargout (int nargout, int nout, bool *isargout) const;
 
     const std::list<octave_lvalue> * lvalue_list (void) const
     {
@@ -488,16 +542,18 @@ namespace octave
     void final_index_error (index_exception& e, const tree_expression *expr);
 
     interpreter& m_interpreter;
 
     result_type m_result_type;
     octave_value m_expr_result_value;
     octave_value_list m_expr_result_value_list;
 
+    deferred_delete_stack m_deferred_delete_stack;
+
     value_stack<const std::list<octave_lvalue>*> m_lvalue_list_stack;
 
     value_stack<int> m_nargout_stack;
 
     bp_table m_bp_table;
 
     call_stack m_call_stack;
 
diff --git a/test/bug-46497/bug-46497.tst b/test/bug-46497/bug-46497.tst
--- a/test/bug-46497/bug-46497.tst
+++ b/test/bug-46497/bug-46497.tst
@@ -13,12 +13,12 @@
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 %!test
 %! global __bug46497_global__
-%! __bug46497_global__ = 'test_bug46497';
-%! a = class_bug46497 ();
+%! __bug46497_global__ = "test_bug46497";
+%! a = class_bug46497 (13);
 %! a = [];
-%! assert(__bug46497_global__,'deleted');
\ No newline at end of file
+%! assert(__bug46497_global__, struct ("myprop", 13, "status", "deleted"));
diff --git a/test/bug-46497/class_bug46497.m b/test/bug-46497/class_bug46497.m
--- a/test/bug-46497/class_bug46497.m
+++ b/test/bug-46497/class_bug46497.m
@@ -1,8 +1,14 @@
 classdef class_bug46497 < handle
+  properties
+    myprop;
+  endproperties
   methods
+    function obj = class_bug46497 (x)
+      obj.myprop = x;
+    endfunction
     function delete (self)
       global __bug46497_global__
-      __bug46497_global__ = 'deleted';
+      __bug46497_global__ = struct ("myprop", self.myprop, "status", "deleted");
     endfunction
   endmethods
 endclassdef
