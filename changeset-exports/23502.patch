# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1495046045 14400
#      Wed May 17 14:34:05 2017 -0400
# Node ID c6714ae1c06c74ba214fe0221627b38356b2a524
# Parent  1ee4b394a687e3bef0b04792fbb589975b3fafc1
eliminate remaining do_multi_index_op methods

For function (and function-like) objects, define a call meethod
instead of do_multi_index_op.  For data value objects, remove
do_multi_index_op as it is no longer used for indexing operations.

* ov-fcn.h (octave_function::call): New pure virtual function.

* ov-builtin.cc, ov-builtin.h (octave_builtin::call):
Rename from do_multi_index_op.  Change all uses.

* ov-mex-fcn.cc, ov-mex-fcn.h (octave_mex_function::call):
Rename from do_multi_index_op.  Change all uses.

* ov-usr-fcn.cc, ov-usr-fcn.h (octave_user_script::call):
Rename from do_multi_index_op.  Change all uses.
(octave_user_fcn::call): Likewise.

* ov-classdef.cc (octave_classdef_meta::call):
Rename from do_multi_index_op.  Change all uses.
(octave_classdef_superclass_ref::call): Likewise.

* ov-fcn-handle.cc, ov-fcn-handle.h (octave_fcn_handle::call):
Rename from do_multi_index_op.  Now a protected virtual function.
(octave_fcn_binder::call): Rename from do_multi_index_op.  Now a
protected function.

* ov-class.h (octave_class::do_multi_index_op): Delete.
* ov-base-mat.h (octave_base_matrix::do_multi_index_op): Delete.
* ov-base-scalar.h (octave_base_scalar::do_multi_index_op): Delete.
* ov-base.cc, ov-base.h (octave_base_value::do_multi_index_op):
Delete.
* ov.cc, ov.h (octave_value::do_multi_index_op): Delete.

* oct-parse.in.yy (source_file): Use call instead of
do_multi_index_op.
(feval (const std::string&, const octave_value_list&, int)): Likewise.
(feval (octave_function *, const octave_value_list&, int)): Likewise.
(feval (octave_value&, const octave_value_list&, int)): Instead of
do_multi_index_op, use call for function objects and subsref for
function_handle objects.  Also handle named functions.
(feval (const octave_value_list&, int)): Simply extract first argument
and forward to feval (octave_value&, const octave_value_list&, int).
* pt-eval.cc (tree_evaluator::visit_identifier,
tree_evaluator::visit_index_expression,
tree_evaluator::visit_funcall): Use call instead of do_multi_index_op.

diff --git a/libinterp/octave-value/ov-base-mat.h b/libinterp/octave-value/ov-base-mat.h
--- a/libinterp/octave-value/ov-base-mat.h
+++ b/libinterp/octave-value/ov-base-mat.h
@@ -84,19 +84,16 @@ public:
 
   octave_value subsasgn (const std::string& type,
                          const std::list<octave_value_list>& idx,
                          const octave_value& rhs);
 
   octave_value do_index_op (const octave_value_list& idx,
                             bool resize_ok = false);
 
-  octave_value_list do_multi_index_op (int, const octave_value_list& idx)
-  { return do_index_op (idx); }
-
   // FIXME: should we import the functions from the base class and
   // overload them here, or should we use a different name so we don't
   // have to do this?  Without the using declaration or a name change,
   // the base class functions will be hidden.  That may be OK, but it
   // can also cause some confusion.
   using octave_base_value::assign;
 
   void assign (const octave_value_list& idx, const MT& rhs);
diff --git a/libinterp/octave-value/ov-base-scalar.h b/libinterp/octave-value/ov-base-scalar.h
--- a/libinterp/octave-value/ov-base-scalar.h
+++ b/libinterp/octave-value/ov-base-scalar.h
@@ -67,19 +67,16 @@ public:
   octave_value_list subsref (const std::string& type,
                              const std::list<octave_value_list>& idx, int)
   { return subsref (type, idx); }
 
   octave_value subsasgn (const std::string& type,
                          const std::list<octave_value_list>& idx,
                          const octave_value& rhs);
 
-  octave_value_list do_multi_index_op (int, const octave_value_list& idx)
-  { return do_index_op (idx); }
-
   bool is_constant (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   dim_vector dims (void) const;
 
   octave_idx_type numel (void) const { return 1; }
 
diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -240,23 +240,16 @@ octave_base_value::subsref (const std::s
 
 octave_value
 octave_base_value::do_index_op (const octave_value_list&, bool)
 {
   std::string nm = type_name ();
   error ("can't perform indexing operations for %s type", nm.c_str ());
 }
 
-octave_value_list
-octave_base_value::do_multi_index_op (int, const octave_value_list&)
-{
-  std::string nm = type_name ();
-  error ("can't perform indexing operations for %s type", nm.c_str ());
-}
-
 idx_vector
 octave_base_value::index_vector (bool /* require_integers */) const
 {
   std::string nm = "<" + type_name () + ">";
   octave::err_invalid_index (nm.c_str ());
 }
 
 octave_value
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -273,19 +273,16 @@ public:
   virtual octave_value
   subsref (const std::string& type,
            const std::list<octave_value_list>& idx,
            bool auto_add);
 
   virtual octave_value
   do_index_op (const octave_value_list& idx, bool resize_ok = false);
 
-  virtual octave_value_list
-  do_multi_index_op (int nargout, const octave_value_list& idx);
-
   virtual void assign (const std::string&, const octave_value&) { }
 
   virtual octave_value
   subsasgn (const std::string& type,
             const std::list<octave_value_list>& idx,
             const octave_value& rhs);
 
   virtual octave_value
diff --git a/libinterp/octave-value/ov-builtin.cc b/libinterp/octave-value/ov-builtin.cc
--- a/libinterp/octave-value/ov-builtin.cc
+++ b/libinterp/octave-value/ov-builtin.cc
@@ -47,17 +47,17 @@ octave_builtin::subsref (const std::stri
   octave_value_list retval;
 
   switch (type[0])
     {
     case '(':
       {
         int tmp_nargout = (type.length () > 1 && nargout == 0) ? 1 : nargout;
 
-        retval = do_multi_index_op (tmp_nargout, idx.front ());
+        retval = call (tmp_nargout, idx.front ());
       }
       break;
 
     case '{':
     case '.':
       {
         std::string nm = type_name ();
         error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
@@ -80,17 +80,17 @@ octave_builtin::subsref (const std::stri
 
   if (idx.size () > 1)
     retval = retval(0).next_subsref (nargout, type, idx);
 
   return retval;
 }
 
 octave_value_list
-octave_builtin::do_multi_index_op (int nargout, const octave_value_list& args)
+octave_builtin::call (int nargout, const octave_value_list& args)
 {
   octave_value_list retval;
 
   if (args.has_magic_colon ())
     error ("invalid use of colon in function argument list");
 
   octave::unwind_protect frame;
 
diff --git a/libinterp/octave-value/ov-builtin.h b/libinterp/octave-value/ov-builtin.h
--- a/libinterp/octave-value/ov-builtin.h
+++ b/libinterp/octave-value/ov-builtin.h
@@ -76,18 +76,17 @@ public:
   octave_value_list subsref (const std::string& type,
                              const std::list<octave_value_list>& idx,
                              int nargout);
 
   octave_function * function_value (bool = false) { return this; }
 
   bool is_builtin_function (void) const { return true; }
 
-  octave_value_list
-  do_multi_index_op (int nargout, const octave_value_list& args);
+  octave_value_list call (int nargout, const octave_value_list& args);
 
   jit_type * to_jit (void) const;
 
   void stash_jit (jit_type& type);
 
   fcn function (void) const;
 
   void push_dispatch_class (const std::string& dispatch_type);
diff --git a/libinterp/octave-value/ov-class.h b/libinterp/octave-value/ov-class.h
--- a/libinterp/octave-value/ov-class.h
+++ b/libinterp/octave-value/ov-class.h
@@ -89,22 +89,16 @@ public:
     octave_value_list tmp = subsref (type, idx, 1);
     return tmp.length () > 0 ? tmp(0) : octave_value ();
   }
 
   octave_value_list subsref (const std::string& type,
                              const std::list<octave_value_list>& idx,
                              int nargout);
 
-  octave_value_list
-  do_multi_index_op (int nargout, const octave_value_list& idx)
-  {
-    return subsref ("(", std::list<octave_value_list> (1, idx), nargout);
-  }
-
   static octave_value numeric_conv (const Cell& val,
                                     const std::string& type);
 
   void assign(const std::string& k, const octave_value& rhs)
   { map.assign (k, rhs); };
 
   octave_value subsasgn (const std::string& type,
                          const std::list<octave_value_list>& idx,
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1016,18 +1016,17 @@ public:
   {
     octave_value_list retval;
 
     retval = subsref (type, idx, 1);
 
     return (retval.length () > 0 ? retval(0) : octave_value ());
   }
 
-  octave_value_list
-  do_multi_index_op (int nargout, const octave_value_list& idx)
+  octave_value_list call (int nargout, const octave_value_list& idx)
   {
     // Emulate ()-type meta subsref
 
     std::list<octave_value_list> l (1, idx);
     std::string type ("(");
 
     return subsref (type, l, nargout);
   }
@@ -1079,21 +1078,20 @@ public:
   {
     size_t skip = 0;
     octave_value_list retval;
 
     switch (type[0])
       {
       case '(':
         skip = 1;
-        retval = do_multi_index_op (type.length () > 1 ? 1 : nargout,
-                                    idx.front ());
+        retval = call (type.length () > 1 ? 1 : nargout, idx.front ());
         break;
       default:
-        retval = do_multi_index_op (1, octave_value_list ());
+        retval = call (1, octave_value_list ());
         break;
       }
 
     if (type.length () > skip && idx.size () > skip
         && retval.length () > 0)
       retval = retval(0).next_subsref (nargout, type, idx, skip);
 
     return retval;
@@ -1106,17 +1104,17 @@ public:
     octave_value_list retval;
 
     retval = subsref (type, idx, 1);
 
     return (retval.length () > 0 ? retval(0) : octave_value ());
   }
 
   octave_value_list
-  do_multi_index_op (int nargout, const octave_value_list& idx)
+  call (int nargout, const octave_value_list& idx)
   {
     octave_value_list retval;
 
     std::string meth_name;
     bool in_constructor;
     cdef_class ctx;
 
     ctx = get_class_context (meth_name, in_constructor);
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -99,17 +99,17 @@ octave_fcn_handle::subsref (const std::s
   octave_value_list retval;
 
   switch (type[0])
     {
     case '(':
       {
         int tmp_nargout = (type.length () > 1 && nargout == 0) ? 1 : nargout;
 
-        retval = do_multi_index_op (tmp_nargout, idx.front ());
+        retval = call (tmp_nargout, idx.front ());
       }
       break;
 
     case '{':
     case '.':
       {
         std::string tnm = type_name ();
         error ("%s cannot be indexed with %c", tnm.c_str (), type[0]);
@@ -126,18 +126,17 @@ octave_fcn_handle::subsref (const std::s
 
   if (idx.size () > 1)
     retval = retval(0).next_subsref (nargout, type, idx);
 
   return retval;
 }
 
 octave_value_list
-octave_fcn_handle::do_multi_index_op (int nargout,
-                                      const octave_value_list& args)
+octave_fcn_handle::call (int nargout, const octave_value_list& args)
 {
   octave_value_list retval;
 
   out_of_date_check (fcn, "", false);
 
   if (has_overloads)
     {
       // Possibly overloaded function.
@@ -2063,18 +2062,17 @@ octave_fcn_binder::maybe_binder (const o
 
 /*
 %!test
 %! f = @(t) eval ('2*t');
 %! assert (f (21), 42);
 */
 
 octave_value_list
-octave_fcn_binder::do_multi_index_op (int nargout,
-                                      const octave_value_list& args)
+octave_fcn_binder::call (int nargout, const octave_value_list& args)
 {
   octave_value_list retval;
 
   if (args.length () == expected_nargin)
     {
       for (int i = 0; i < arg_template.length (); i++)
         {
           int j = arg_mask[i];
@@ -2083,17 +2081,17 @@ octave_fcn_binder::do_multi_index_op (in
         }
 
       // Make a shallow copy of arg_template, to ensure consistency throughout
       // the following call even if we happen to get back here.
       octave_value_list tmp (arg_template);
       retval = octave::feval (root_handle, tmp, nargout);
     }
   else
-    retval = octave_fcn_handle::do_multi_index_op (nargout, args);
+    retval = octave_fcn_handle::call (nargout, args);
 
   return retval;
 }
 
 /*
 %!function r = __f (g, i)
 %!  r = g(i);
 %!endfunction
diff --git a/libinterp/octave-value/ov-fcn-handle.h b/libinterp/octave-value/ov-fcn-handle.h
--- a/libinterp/octave-value/ov-fcn-handle.h
+++ b/libinterp/octave-value/ov-fcn-handle.h
@@ -85,19 +85,16 @@ public:
     octave_value_list tmp = subsref (type, idx, 1);
     return tmp.length () > 0 ? tmp(0) : octave_value ();
   }
 
   octave_value_list subsref (const std::string& type,
                              const std::list<octave_value_list>& idx,
                              int nargout);
 
-  octave_value_list
-  do_multi_index_op (int nargout, const octave_value_list& args);
-
   bool is_defined (void) const { return true; }
 
   bool is_function_handle (void) const { return true; }
 
   builtin_type_t builtin_type (void) const { return btyp_func_handle; }
 
   bool is_overloaded (void) const { return has_overloads; }
 
@@ -172,16 +169,18 @@ protected:
   bool has_overloads;
 
   // Overloads for builtin types.  We use array to make lookup faster.
   octave_value builtin_overloads[btyp_num_types];
 
   // Overloads for other classes.
   str_ov_map overloads;
 
+  virtual octave_value_list call (int nargout, const octave_value_list& args);
+
   friend octave_value make_fcn_handle (const std::string &, bool);
 };
 
 extern octave_value make_fcn_handle (const std::string& nm,
                                      bool local_funcs = true);
 
 class
 OCTINTERP_API
@@ -194,19 +193,18 @@ private:
                      const std::vector<int>& mask, int exp_nargin);
 
 public:
 
   // Factory method.
   static octave_fcn_handle * maybe_binder (const octave_value& f,
                                            octave::tree_evaluator *tw);
 
-  octave_value_list
-  do_multi_index_op (int nargout, const octave_value_list& args);
+protected:
 
-protected:
+  octave_value_list call (int nargout, const octave_value_list& args);
 
   octave_value root_handle;
   octave_value_list arg_template;
   std::vector<int> arg_mask;
   int expected_nargin;
 };
 #endif
diff --git a/libinterp/octave-value/ov-fcn.h b/libinterp/octave-value/ov-fcn.h
--- a/libinterp/octave-value/ov-fcn.h
+++ b/libinterp/octave-value/ov-fcn.h
@@ -193,16 +193,20 @@ public:
 
   virtual void unload (void) { }
 
   virtual void accept (octave::tree_walker&) { }
 
   virtual bool is_postfix_index_handled (char type) const
   { return (type == '(' || type == '{'); }
 
+  virtual octave_value_list
+  call (int nargout = 0,
+        const octave_value_list& args = octave_value_list ()) = 0;
+
 protected:
 
   octave_function (const std::string& nm,
                    const std::string& ds = "")
     : relative (false), locked (false), private_function (false),
       xdispatch_class (), my_name (nm), my_dir_name (), doc (ds) { }
 
   // TRUE if this function was found from a relative path element.
diff --git a/libinterp/octave-value/ov-mex-fcn.cc b/libinterp/octave-value/ov-mex-fcn.cc
--- a/libinterp/octave-value/ov-mex-fcn.cc
+++ b/libinterp/octave-value/ov-mex-fcn.cc
@@ -85,17 +85,17 @@ octave_mex_function::subsref (const std:
   octave_value_list retval;
 
   switch (type[0])
     {
     case '(':
       {
         int tmp_nargout = (type.length () > 1 && nargout == 0) ? 1 : nargout;
 
-        retval = do_multi_index_op (tmp_nargout, idx.front ());
+        retval = call (tmp_nargout, idx.front ());
       }
       break;
 
     case '{':
     case '.':
       {
         std::string nm = type_name ();
         error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
@@ -123,18 +123,17 @@ octave_mex_function::subsref (const std:
 }
 
 // FIXME: shouldn't this declaration be a header file somewhere?
 extern octave_value_list
 call_mex (octave_mex_function& curr_mex_fcn, const octave_value_list& args,
           int nargout);
 
 octave_value_list
-octave_mex_function::do_multi_index_op (int nargout,
-                                        const octave_value_list& args)
+octave_mex_function::call (int nargout, const octave_value_list& args)
 {
   octave_value_list retval;
 
   if (args.has_magic_colon ())
     error ("invalid use of colon in function argument list");
 
   octave::unwind_protect frame;
 
diff --git a/libinterp/octave-value/ov-mex-fcn.h b/libinterp/octave-value/ov-mex-fcn.h
--- a/libinterp/octave-value/ov-mex-fcn.h
+++ b/libinterp/octave-value/ov-mex-fcn.h
@@ -86,18 +86,17 @@ public:
   octave::sys::time time_checked (void) const { return m_time_checked; }
 
   bool is_system_fcn_file (void) const { return m_is_system_fcn_file; }
 
   bool is_builtin_function (void) const { return false; }
 
   bool is_mex_function (void) const { return true; }
 
-  octave_value_list
-  do_multi_index_op (int nargout, const octave_value_list& args);
+  octave_value_list call (int nargout, const octave_value_list& args);
 
   void atexit (void (*fcn) (void)) { m_exit_fcn_ptr = fcn; }
 
   octave::dynamic_library get_shlib (void) const { return m_sh_lib; }
 
   void *mex_fcn_ptr (void) const { return m_mex_fcn_ptr; }
 
   bool is_fmex (void) const { return m_is_fmex; }
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -114,18 +114,17 @@ octave_user_script::~octave_user_script 
 octave_value_list
 octave_user_script::subsref (const std::string&,
                              const std::list<octave_value_list>&, int)
 {
   error ("invalid use of script %s in index expression", file_name.c_str ());
 }
 
 octave_value_list
-octave_user_script::do_multi_index_op (int nargout,
-                                       const octave_value_list& args)
+octave_user_script::call (int nargout, const octave_value_list& args)
 {
   octave_value_list retval;
 
   octave::unwind_protect frame;
 
   if (args.length () != 0 || nargout != 0)
     error ("invalid call to script %s", file_name.c_str ());
 
@@ -413,17 +412,17 @@ octave_user_function::subsref (const std
   octave_value_list retval;
 
   switch (type[0])
     {
     case '(':
       {
         int tmp_nargout = (type.length () > 1 && nargout == 0) ? 1 : nargout;
 
-        retval = do_multi_index_op (tmp_nargout, idx.front ());
+        retval = call (tmp_nargout, idx.front ());
       }
       break;
 
     case '{':
     case '.':
       {
         std::string nm = type_name ();
         error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
@@ -440,18 +439,17 @@ octave_user_function::subsref (const std
 
   if (idx.size () > 1)
     retval = retval(0).next_subsref (nargout, type, idx);
 
   return retval;
 }
 
 octave_value_list
-octave_user_function::do_multi_index_op (int nargout,
-                                         const octave_value_list& _args)
+octave_user_function::call (int nargout, const octave_value_list& _args)
 {
   octave_value_list retval;
 
   if (! cmd_list)
     return retval;
 
   // If this function is a classdef constructor, extract the first input
   // argument, which must be the partially constructed object instance.
diff --git a/libinterp/octave-value/ov-usr-fcn.h b/libinterp/octave-value/ov-usr-fcn.h
--- a/libinterp/octave-value/ov-usr-fcn.h
+++ b/libinterp/octave-value/ov-usr-fcn.h
@@ -140,18 +140,17 @@ public:
     octave_value_list tmp = subsref (type, idx, 1);
     return tmp.length () > 0 ? tmp(0) : octave_value ();
   }
 
   octave_value_list subsref (const std::string& type,
                              const std::list<octave_value_list>& idx,
                              int nargout);
 
-  octave_value_list
-  do_multi_index_op (int nargout, const octave_value_list& args);
+  octave_value_list call (int nargout, const octave_value_list& args);
 
   octave::tree_statement_list * body (void) { return cmd_list; }
 
   void accept (octave::tree_walker& tw);
 
 private:
 
   // The list of commands that make up the body of this function.
@@ -366,18 +365,17 @@ public:
     octave_value_list tmp = subsref (type, idx, 1);
     return tmp.length () > 0 ? tmp(0) : octave_value ();
   }
 
   octave_value_list subsref (const std::string& type,
                              const std::list<octave_value_list>& idx,
                              int nargout);
 
-  octave_value_list
-  do_multi_index_op (int nargout, const octave_value_list& args);
+  octave_value_list call (int nargout, const octave_value_list& args);
 
   octave::tree_parameter_list * parameter_list (void) { return param_list; }
 
   octave::tree_parameter_list * return_list (void) { return ret_list; }
 
   octave::tree_statement_list * body (void) { return cmd_list; }
 
   octave_comment_list * leading_comment (void) { return lead_comm; }
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -1440,20 +1440,17 @@ octave_value::single_subsref (const std:
 
   return rep->subsref (type, i);
 }
 
 octave_value_list
 octave_value::subsref (const std::string& type,
                        const std::list<octave_value_list>& idx, int nargout)
 {
-  if (nargout == 1)
-    return rep->subsref (type, idx);
-  else
-    return rep->subsref (type, idx, nargout);
+  return rep->subsref (type, idx, nargout);
 }
 
 octave_value
 octave_value::next_subsref (const std::string& type,
                             const std::list<octave_value_list>& idx,
                             size_t skip)
 {
   if (idx.size () > skip)
@@ -1494,22 +1491,16 @@ octave_value::next_subsref (bool auto_ad
       for (size_t i = 0; i < skip; i++)
         new_idx.erase (new_idx.begin ());
       return subsref (type.substr (skip), new_idx, auto_add);
     }
   else
     return *this;
 }
 
-octave_value_list
-octave_value::do_multi_index_op (int nargout, const octave_value_list& idx)
-{
-  return rep->do_multi_index_op (nargout, idx);
-}
-
 octave_value
 octave_value::subsasgn (const std::string& type,
                         const std::list<octave_value_list>& idx,
                         const octave_value& rhs)
 {
   return rep->subsasgn (type, idx, rhs);
 }
 
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -443,19 +443,16 @@ public:
   octave_value next_subsref (bool auto_add, const std::string& type, const
                              std::list<octave_value_list>& idx,
                              size_t skip = 1);
 
   octave_value do_index_op (const octave_value_list& idx,
                             bool resize_ok = false)
   { return rep->do_index_op (idx, resize_ok); }
 
-  octave_value_list
-  do_multi_index_op (int nargout, const octave_value_list& idx);
-
   octave_value subsasgn (const std::string& type,
                          const std::list<octave_value_list>& idx,
                          const octave_value& rhs);
 
   octave_value undef_subsasgn (const std::string& type,
                                const std::list<octave_value_list>& idx,
                                const octave_value& rhs);
 
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4797,26 +4797,23 @@ namespace octave
 
     if (! fcn->is_user_code ())
       {
         if (delete_fcn)
           delete fcn;
         error ("source: %s is not a script", full_name.c_str ());
       }
 
-    // Parameter checking is over.  Now run.
-    octave_value_list args;
-
     if (verbose)
       {
         std::cout << "executing commands from " << full_name << " ... ";
         std::cout.flush ();
       }
 
-    fcn->do_multi_index_op (0, args);
+    fcn->call ();
 
     if (verbose)
       std::cout << "done." << std::endl;
 
     // Delete scripts not on the path, so they don't shadow ones that are.
     if (delete_fcn)
       delete fcn;
   }
@@ -4934,39 +4931,64 @@ namespace octave
   octave_value_list
   feval (const std::string& name, const octave_value_list& args, int nargout)
   {
     octave_value_list retval;
 
     octave_value fcn = symbol_table::find_function (name, args);
 
     if (fcn.is_defined ())
-      retval = fcn.do_multi_index_op (nargout, args);
+      {
+        octave_function *of = fcn.function_value ();
+
+        retval = of->call (nargout, args);
+      }
     else
       error ("feval: function '%s' not found", name.c_str ());
 
     return retval;
   }
 
   octave_value_list
-  feval (octave_value& fcn, const octave_value_list& args, int nargout)
-  {
-    return fcn.do_multi_index_op (nargout, args);
-  }
-
-  octave_value_list
   feval (octave_function *fcn, const octave_value_list& args, int nargout)
   {
     octave_value_list retval;
 
     if (fcn)
-      retval = fcn->do_multi_index_op (nargout, args);
+      retval = fcn->call (nargout, args);
 
     return retval;
   }
+
+  octave_value_list
+  feval (octave_value& val, const octave_value_list& args, int nargout)
+  {
+    if (val.is_function ())
+      {
+        return octave::feval (val.function_value (), args, nargout);
+      }
+    else if (val.is_function_handle ())
+      {
+        // This covers function handles, inline functions, and anonymous
+        //  functions.
+
+        std::list<octave_value_list> arg_list;
+        arg_list.push_back (args);
+
+        return val.subsref ("(", arg_list, nargout);
+      }
+    else if (val.is_string ())
+      {
+        return octave::feval (val.string_value (), args, nargout);
+      }
+    else
+      error ("feval: first argument must be a string, inline function, or a function handle");
+
+    return ovl ();
+  }
 }
 
 static octave_value_list
 get_feval_args (const octave_value_list& args)
 {
   return args.slice (1, args.length () - 1, true);
 }
 
@@ -4982,43 +5004,28 @@ namespace octave
     passed to the function.
     @param nargout The number of output arguments expected.
     @return A list of output values.  The length of the list is not
     necessarily the same as @c nargout.
   */
   octave_value_list
   feval (const octave_value_list& args, int nargout)
   {
-    octave_value_list retval;
-
     if (args.length () > 0)
       {
         octave_value f_arg = args(0);
 
-        if (f_arg.is_string ())
-          {
-            std::string name = f_arg.string_value ();
-
-            octave_value_list tmp_args = get_feval_args (args);
-
-            retval = octave::feval (name, tmp_args, nargout);
-          }
-        else if (f_arg.is_function_handle ()
-                 || f_arg.is_anonymous_function ()
-                 || f_arg.is_inline_function ())
-          {
-            const octave_value_list tmp_args = get_feval_args (args);
-
-            retval = f_arg.do_multi_index_op (nargout, tmp_args);
-          }
-        else
-          error ("feval: first argument must be a string, inline function, or a function handle");
+        octave_value_list tmp_args = get_feval_args (args);
+
+        return octave::feval (f_arg, tmp_args, nargout);
       }
-
-    return retval;
+    else
+      error ("feval: first argument must be a string, inline function, or a function handle");
+
+    return ovl ();
   }
 }
 
 DEFUN (feval, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} feval (@var{name}, @dots{})
 Evaluate the function named @var{name}.
 
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -548,22 +548,22 @@ namespace octave
                const std::string& warn_for = "");
 
   extern OCTINTERP_API octave_value_list
   feval (const std::string& name,
          const octave_value_list& args = octave_value_list (),
          int nargout = 0);
 
   extern OCTINTERP_API octave_value_list
-  feval (octave_value& fcn,
+  feval (octave_function *fcn,
          const octave_value_list& args = octave_value_list (),
          int nargout = 0);
 
   extern OCTINTERP_API octave_value_list
-  feval (octave_function *fcn,
+  feval (octave_value& val,
          const octave_value_list& args = octave_value_list (),
          int nargout = 0);
 
   extern OCTINTERP_API octave_value_list
   feval (const octave_value_list& args, int nargout = 0);
 
   extern OCTINTERP_API octave_value_list
   eval_string (const std::string&, bool silent, int& parse_status, int nargout);
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -974,17 +974,17 @@ namespace octave
         if (val.is_function ())
           fcn = val.function_value (true);
 
         int nargout = m_nargout_stack.top ();
 
         if (fcn && ! (expr.is_postfix_indexed ()
                       && fcn->is_postfix_index_handled (expr.postfix_index ())))
           {
-            retval = val.do_multi_index_op (nargout, octave_value_list ());
+            retval = fcn->call (nargout);
           }
         else
           {
             if (expr.print_result () && nargout == 0
                 && octave::tree_evaluator::statement_printing_enabled ())
               {
                 octave_value_list args = ovl (val);
                 args.stash_name_tags (string_vector (expr.name ()));
@@ -1194,19 +1194,18 @@ namespace octave
                       err_indexed_cs_list ();
 
                     if (tmp.is_function ())
                       {
                         octave_function *fcn = tmp.function_value (true);
 
                         if (fcn && ! fcn->is_postfix_index_handled (type[i]))
                           {
-                            octave_value_list empty_args;
-
-                            tmp_list = tmp.do_multi_index_op (1, empty_args);
+                            tmp_list = fcn->call (1);
+
                             tmp = (tmp_list.length ()
                                    ? tmp_list(0) : octave_value ());
 
                             if (tmp.is_cs_list ())
                               err_indexed_cs_list ();
                           }
                       }
                   }
@@ -1258,21 +1257,17 @@ namespace octave
 
     octave_value val = (retval.length () ? retval(0) : octave_value ());
 
     if (val.is_function ())
       {
         octave_function *fcn = val.function_value (true);
 
         if (fcn)
-          {
-            octave_value_list empty_args;
-
-            retval = val.do_multi_index_op (nargout, empty_args);
-          }
+          retval = fcn->call (nargout);
       }
 
     m_value_stack.push (retval);
   }
 
   void
   tree_evaluator::visit_matrix (tree_matrix& expr)
   {
@@ -1740,19 +1735,17 @@ namespace octave
         // used for superclass references in classdef.
 
         octave_value val = retval(0);
         octave_function *f = val.function_value (true);
 
         if (f && ! (expr.is_postfix_indexed ()
                     && f->is_postfix_index_handled (expr.postfix_index ())))
           {
-            octave_value_list tmp_args;
-
-            retval = val.do_multi_index_op (nargout, tmp_args);
+            retval = f->call (nargout);
           }
       }
 
     m_value_stack.push (retval);
   }
 
   void
   tree_evaluator::visit_parameter_list (tree_parameter_list&)
