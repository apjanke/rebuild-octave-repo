# HG changeset patch
# User Rik <rik@octave.org>
# Date 1533846383 25200
#      Thu Aug 09 13:26:23 2018 -0700
# Node ID 2ccad4396afccdaf12aea8dacdadd57c4f4c8f43
# Parent  ecdced9fe445cd40e4be434f8a89a9eb54707e3e
findstr.m: Make m-file a legacy function.

* NEWS: Announce change.

* scripts/legacy/module.mk, scripts/strings/module.mk: Move findstr.m
from strings/ dir to legacy/ dir.

* findstr.m: Add Octave:legacy-function warning at top of function.
Change docstring to note that this function is obsolete.

* strfind.cc (Fstrfind): Remove legacy functions findstr, strmatch from
@seealso list.

* textread.m, html_compare_plot_demos.m, prefer.tst: Replace instances
of findstr with strfind in existing code.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -71,16 +71,17 @@ Summary of important user-visible change
 
     The following functions have been declared legacy functions which
     means they are obsolete and should not be used in any new code.
     Unlike deprecated functions, however, their removal from Octave has
     not yet been scheduled.
 
       Function             | Replacement
       ---------------------|------------------
+      findstr              | strfind
       flipdim              | flip
       isequalwithequalnans | isequaln
       isstr                | ischar
       setstr               | char
       strmatch             | strncmp or strcmp
 
  ** Deprecated functions.
 
diff --git a/libinterp/corefcn/strfind.cc b/libinterp/corefcn/strfind.cc
--- a/libinterp/corefcn/strfind.cc
+++ b/libinterp/corefcn/strfind.cc
@@ -181,17 +181,17 @@ strfind (@{"abababa", "bebebe", "ab"@}, 
 
              1   3   5
 
           [1,2] = [](1x0)
           [1,3] = [](1x0)
         @}
 @end group
 @end example
-@seealso{findstr, strmatch, regexp, regexpi, find}
+@seealso{regexp, regexpi, find}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin != 4 && nargin != 2)
     print_usage ();
 
   bool overlaps = true;
@@ -367,17 +367,17 @@ Example:
 
 @example
 @group
 strrep ("This is a test string", "is", "&%$")
     @result{}  "Th&%$ &%$ a test string"
 @end group
 @end example
 
-@seealso{regexprep, strfind, findstr}
+@seealso{regexprep, strfind}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin != 3 && nargin != 5)
     print_usage ();
 
   bool overlaps = true;
diff --git a/scripts/io/textread.m b/scripts/io/textread.m
--- a/scripts/io/textread.m
+++ b/scripts/io/textread.m
@@ -198,30 +198,30 @@ function varargout = textread (filename,
     ## Set up default endofline param value
     varargin(end+1:end+2) = {"endofline", eol_char};
   endif
 
   ## Now that we know what EOL looks like, we can process format_repeat_count.
   ## FIXME: The below isn't ML-compatible: counts lines, not format string uses
   if (isfinite (nlines) && (nlines > 0))
     l_eol_char = length (eol_char);
-    eoi = findstr (str, eol_char);
+    eoi = strfind (str, eol_char);
     n_eoi = length (eoi);
     nblks = 0;
     ## Avoid slow repeated str concatenation, first seek requested end of data
     while (n_eoi < nlines && count == BUFLENGTH)
       [nstr, count] = fscanf (fid, "%c", BUFLENGTH);
       if (count > 0)
         ## Watch out for multichar EOL being missed across buffer boundaries
         if (l_eol_char > 1)
           str = [str(end - length (eol_char) + 2 : end) nstr];
         else
           str = nstr;
         endif
-        eoi = findstr (str, eol_char);
+        eoi = strfind (str, eol_char);
         n_eoi += numel (eoi);
         ++nblks;
       endif
     endwhile
     ## Handle case of missing or incomplete trailing EOL
     if (! strcmp (str(end - length (eol_char) + 1 : end), eol_char))
       eoi = [ eoi (length (str)) ];
       ++n_eoi;
diff --git a/scripts/strings/findstr.m b/scripts/legacy/findstr.m
rename from scripts/strings/findstr.m
rename to scripts/legacy/findstr.m
--- a/scripts/strings/findstr.m
+++ b/scripts/legacy/findstr.m
@@ -14,44 +14,54 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} findstr (@var{s}, @var{t})
 ## @deftypefnx {} {} findstr (@var{s}, @var{t}, @var{overlap})
+##
+## This function is obsolete.  Use @code{strfind} instead.
+##
 ## Return the vector of all positions in the longer of the two strings @var{s}
 ## and @var{t} where an occurrence of the shorter of the two starts.
 ##
 ## If the optional argument @var{overlap} is true (default), the returned
 ## vector can include overlapping positions.  For example:
 ##
 ## @example
 ## @group
 ## findstr ("ababab", "a")
 ##      @result{} [1, 3, 5];
 ## findstr ("abababa", "aba", 0)
 ##      @result{} [1, 5]
 ## @end group
 ## @end example
 ##
-## @strong{Caution:} @code{findstr} is scheduled for deprecation.  Use
-## @code{strfind} in all new code.
+## @strong{Caution:} @code{findstr} is obsolete.  Use @code{strfind} in all new
+## code.
 ## @seealso{strfind, strmatch, strcmp, strncmp, strcmpi, strncmpi, find}
 ## @end deftypefn
 
 ## Note that this implementation swaps the strings if second one is longer
 ## than the first, so try to put the longer one first.
-##
+
 ## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Adapted-By: jwe
 
 function v = findstr (s, t, overlap = true)
 
+  persistent warned = false;
+  if (! warned)
+    warned = true;
+    warning ("Octave:legacy-function",
+             "findstr is obsolete; use strfind instead\n");
+  endif
+
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   if (all (size (s) > 1) || all (size (t) > 1))
     error ("findstr: arguments must have only one non-singleton dimension");
   endif
 
@@ -128,16 +138,21 @@ function v = findstr (s, t, overlap = tr
   ## Always return a row vector, because that's what the old one did.
   if (iscolumn (v))
     v = v.';
   endif
 
 endfunction
 
 
+## First test is necessary to provoke 1-time legacy warning
+%!test
+%! warning ("off", "Octave:legacy-function", "local");
+%! findstr ("", "");
+
 %!assert (findstr ("abababa", "a"), [1, 3, 5, 7])
 %!assert (findstr ("abababa", "aba"), [1, 3, 5])
 %!assert (findstr ("aba", "abababa", 0), [1, 5])
 
 ## Test input validation
 %!error findstr ()
 %!error findstr ("foo", "bar", 3, 4)
 %!error <must have only one non-singleton dimension> findstr (["AB" ; "CD"], "C")
diff --git a/scripts/legacy/module.mk b/scripts/legacy/module.mk
--- a/scripts/legacy/module.mk
+++ b/scripts/legacy/module.mk
@@ -1,11 +1,12 @@
 FCN_FILE_DIRS += scripts/legacy
 
 %canon_reldir%_FCN_FILES = \
+  %reldir%/findstr.m \
   %reldir%/flipdim.m \
   %reldir%/isequalwithequalnans.m \
   %reldir%/isstr.m \
   %reldir%/setstr.m \
   %reldir%/strmatch.m
 
 %canon_reldir%dir = $(fcnfiledir)/legacy
 
diff --git a/scripts/strings/module.mk b/scripts/strings/module.mk
--- a/scripts/strings/module.mk
+++ b/scripts/strings/module.mk
@@ -5,17 +5,16 @@ FCN_FILE_DIRS += scripts/strings
   %reldir%/bin2dec.m \
   %reldir%/blanks.m \
   %reldir%/cstrcat.m \
   %reldir%/deblank.m \
   %reldir%/dec2base.m \
   %reldir%/dec2bin.m \
   %reldir%/dec2hex.m \
   %reldir%/erase.m \
-  %reldir%/findstr.m \
   %reldir%/hex2dec.m \
   %reldir%/index.m \
   %reldir%/isletter.m \
   %reldir%/isstring.m \
   %reldir%/isstrprop.m \
   %reldir%/mat2str.m \
   %reldir%/native2unicode.m \
   %reldir%/ostrsplit.m \
diff --git a/scripts/testfun/private/html_compare_plot_demos.m b/scripts/testfun/private/html_compare_plot_demos.m
--- a/scripts/testfun/private/html_compare_plot_demos.m
+++ b/scripts/testfun/private/html_compare_plot_demos.m
@@ -75,17 +75,17 @@ function html_compare_plot_demos (toolki
     in.figfiles = union (in.figfiles, {dir(filter).name});
   endfor
 
   fid = fopen (which (in.template), "r");
   template = char (fread (fid)) .';
   fclose (fid);
 
   anchor = "<!-- ##ADD TABLE HERE## -->";
-  n = findstr (template, anchor);
+  n = strfind (template, anchor);
   header = strtrim (template(1:n-1));
   trailer = strtrim (template(n+numel(anchor):end));
 
   page = 1;
   do
     start_fig = (page - 1) * in.plots_per_page + 1;
     stop_fig = page * in.plots_per_page;
     last_page = stop_fig >= numel (in.figfiles);
diff --git a/test/prefer.tst b/test/prefer.tst
--- a/test/prefer.tst
+++ b/test/prefer.tst
@@ -90,26 +90,26 @@
 %! a(1) = 1; a(2) = 2;
 %! assert (all (a == [1,2]));
 
 %!test
 %! ped = print_empty_dimensions ();
 %! print_empty_dimensions (0);
 %! a = cell (1, 1);
 %! b = type ("-q", "a");
-%! assert (!isempty (findstr (b{1}, "[]")));
-%! assert (isempty (findstr (b{1} ,"[](0x0)")));
+%! assert (! isempty (strfind (b{1}, "[]")));
+%! assert (isempty (strfind (b{1} ,"[](0x0)")));
 %! print_empty_dimensions (ped);
 
 %!test
 %! ped = print_empty_dimensions ();
 %! print_empty_dimensions (1);
 %! a = cell (1, 1);
 %! b = type ("-q", "a");
-%! assert (!isempty (findstr (b{1}, "[](0x0)")));
+%! assert (! isempty (strfind (b{1}, "[](0x0)")));
 %! print_empty_dimensions (ped);
 
 %!assert (all (size (inv ([])) == [0, 0]))
 
 %!assert (all (svd ([]) == zeros (0, 1)))
 
 %!test
 %! sp = save_precision ();
