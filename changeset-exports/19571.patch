# HG changeset patch
# User Rik <rik@octave.org>
# Date 1421168065 28800
#      Tue Jan 13 08:54:25 2015 -0800
# Node ID 72304a4e010ab41bc1eeab880ff28184ed2b20a7
# Parent  62ca016dbb2a930af47600a380cc04c57d3c1c04
Use Octave coding conventions for documentation of audio functions.

* audio.txi, audioread.cc, @audioplayer/audioplayer.m, @audioplayer/get.m,
@audioplayer/play.m, @audioplayer/playblocking.m, @audioplayer/set.m,
@audiorecorder/audiorecorder.m, @audiorecorder/get.m,
@audiorecorder/getaudiodata.m, @audiorecorder/play.m, @audiorecorder/record.m,
@audiorecorder/set.m:
Use Octave documentation standards.

* audiodevinfo.cc: Limit lines to 80 chars.  Indent according to GNU style.

diff --git a/doc/interpreter/audio.txi b/doc/interpreter/audio.txi
--- a/doc/interpreter/audio.txi
+++ b/doc/interpreter/audio.txi
@@ -28,17 +28,17 @@
 * Audio Recorder::
 * Audio Data Processing::
 @end menu
 
 @node Audio File Utilities
 @section Audio File Utilities
 
 The following functions allow you to read, write and retrieve
-information about audio files. Various formats are supported including
+information about audio files.  Various formats are supported including
 wav, flac and ogg vorbis.
 
 @DOCSTRING(audioinfo)
 
 @DOCSTRING(audioread)
 
 @DOCSTRING(audiowrite)
 
@@ -46,18 +46,18 @@ wav, flac and ogg vorbis.
 @section Audio Device Information
 
 @DOCSTRING(audiodevinfo)
 
 @node Audio Player
 @section Audio Player
 
 The following methods are used to create and use audioplayer
-objects. These objects can be used to play back audio data stored in
-Octave matrices and arrays. The audioplayer object supports playback
+objects.  These objects can be used to play back audio data stored in
+Octave matrices and arrays.  The audioplayer object supports playback
 from various devices available to the system, blocking and non-blocking
 playback, convenient pausing and resuming and much more.
 
 @DOCSTRING(@audioplayer/audioplayer)
 
 @menu
 * Playback::
 * Player Properties::
@@ -89,20 +89,20 @@ properties of the audioplayer object.
 @DOCSTRING(@audioplayer/get)
 
 @DOCSTRING(@audioplayer/set)
 
 @node Audio Recorder
 @section Audio Recorder
 
 The following methods are used to create and use audiorecorder
-objects. These objects can be used to record audio data from various
-devices available to the system. You can use convenient methods to
+objects.  These objects can be used to record audio data from various
+devices available to the system.  You can use convenient methods to
 retrieve that data or audioplayer objects created from that
-data. Methods for blocking and non-blocking recording, pausing and
+data.  Methods for blocking and non-blocking recording, pausing and
 resuming recording and much more is available.
 
 @DOCSTRING(@audiorecorder/audiorecorder)
 
 @menu
 * Recording::
 * Data Retrieval::
 * Recorder Properties::
diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -60,17 +60,17 @@ bits_to_format (int bits)
     return paFloat32;
   else
     return 0;
 }
 
 #endif
 
 DEFUN_DLD (audiodevinfo, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{devinfo} =} audiodevinfo ()\n\
 \n\
 @deftypefnx {Loadable Function} {@var{devs} =} audiodevinfo (@var{io})\n\
 @deftypefnx {Loadable Function} {@var{name} =} audiodevinfo (@var{io}, @var{id})\n\
 @deftypefnx {Loadable Function} {@var{id} =} audiodevinfo (@var{io}, @var{name})\n\
 @deftypefnx {Loadable Function} {@var{id} =} audiodevinfo (@var{io}, @var{rate}, @var{bits}, @var{chans})\n\
 \n\
 @deftypefnx {Loadable Function} {@var{supports} =} audiodevinfo (@var{io}, @var{id}, @var{rate}, @var{bits}, @var{chans})\n\
@@ -550,17 +550,17 @@ octave_play_callback (const void *, void
     }
 
   // Don't multiply the audio data by scale_factor here.  Although it
   // does move the operation outside of the loops below, it also causes
   // a second copy of the data array to be made.
 
   const ColumnVector sound_l = sound.column (0);
   const ColumnVector sound_r = (sound.columns () == 1)
-    ? sound_l : sound.column (1);
+                               ? sound_l : sound.column (1);
 
   const double *p_l = sound_l.data ();
   const double *p_r = sound_r.data ();
 
   switch (player->get_nbits ())
     {
     case 8:
       {
@@ -859,17 +859,18 @@ audioplayer::init_fn (void)
   int device = get_id ();
 
   if (device == -1)
     device = Pa_GetDefaultOutputDevice ();
 
   output_parameters.device = device;
   output_parameters.channelCount = 2;
   output_parameters.sampleFormat = bits_to_format (get_nbits ());
-  output_parameters.suggestedLatency = Pa_GetDeviceInfo (device)->defaultHighOutputLatency;
+  output_parameters.suggestedLatency = 
+    Pa_GetDeviceInfo (device)->defaultHighOutputLatency;
   output_parameters.hostApiSpecificStreamInfo = 0;
 }
 
 void
 audioplayer::init (void)
 {
   // Both of these variables are unused.  Should they be
   // eliminated or is something not yet implemented?
@@ -901,17 +902,18 @@ audioplayer::init (void)
     output_parameters.sampleFormat = bits_to_format (get_nbits ());
   else if (type == TYPE_INT8)
     output_parameters.sampleFormat = paInt8;
   else if (type == TYPE_UINT8)
     output_parameters.sampleFormat = paUInt8;
   else if (type == TYPE_UINT16)
     output_parameters.sampleFormat = paInt16;
 
-  output_parameters.suggestedLatency = Pa_GetDeviceInfo (device)->defaultHighOutputLatency;
+  output_parameters.suggestedLatency =
+    Pa_GetDeviceInfo (device)->defaultHighOutputLatency;
   output_parameters.hostApiSpecificStreamInfo = 0;
 }
 
 void
 audioplayer::set_y (const octave_value& y_arg)
 {
   if (y_arg.is_int8_type ())
     type = TYPE_INT8;
@@ -1074,17 +1076,17 @@ void
 audioplayer::playblocking (void)
 {
   if (get_stream ())
     stop ();
 
   PaError err;
   uint32_t buffer[BUFFER_SIZE * 2];
   err = Pa_OpenStream (&stream, 0, &(output_parameters), get_fs (),
-                               BUFFER_SIZE, paClipOff, 0, 0);
+                       BUFFER_SIZE, paClipOff, 0, 0);
   if (err != paNoError)
     {
       error ("audioplayer: unable to open audio playback stream");
       return;
     }
 
   err = Pa_StartStream (stream);
   if (err != paNoError)
@@ -1333,17 +1335,17 @@ octave_record_callback (const void *inpu
       for (unsigned long i = 0; i < frames; i++)
         {
           float sample_l = input8[i*channels] / scale_factor;
           float sample_r = input8[i*channels + (channels - 1)] / scale_factor;
 
           sound(i, 0) = sample_l;
           sound(i, 1) = sample_r;
         }
-      }
+    }
   else if (recorder->get_nbits () == 16)
     {
       static double scale_factor = std::pow (2.0, 15) - 1.0;
 
       const int16_t *input16 = static_cast<const int16_t *> (input);
 
       for (unsigned long i = 0; i < frames; i++)
         {
@@ -1503,17 +1505,18 @@ audiorecorder::init (void)
   int device = get_id ();
 
   if (device == -1)
     device = Pa_GetDefaultInputDevice ();
 
   input_parameters.device = device;
   input_parameters.channelCount = get_channels ();
   input_parameters.sampleFormat = bits_to_format (get_nbits ());
-  input_parameters.suggestedLatency = Pa_GetDeviceInfo (device)->defaultHighInputLatency;
+  input_parameters.suggestedLatency =
+    Pa_GetDeviceInfo (device)->defaultHighInputLatency;
   input_parameters.hostApiSpecificStreamInfo = 0;
 }
 
 void
 audiorecorder::set_fs (int fs_arg)
 {
   fs = fs_arg;
 }
@@ -1813,17 +1816,17 @@ PaStream *
 audiorecorder::get_stream (void)
 {
   return stream;
 }
 
 #endif
 
 DEFUN_DLD (__recorder_audiorecorder__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{recorder} =} __recorder_audiorecorder__ (@var{fs}, @var{nbits}, @var{channels})\n\
 @deftypefnx {Loadable Function} {@var{recorder} =} __recorder_audiorecorder__ (@var{fs}, @var{nbits}, @var{channels}, @var{id})\n\
 @deftypefnx {Loadable Function} {@var{recorder} =} __recorder_audiorecorder__ (@var{fcn}, @dots{})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
@@ -1832,17 +1835,18 @@ Undocumented internal function.\n\
   int nargin = args.length ();
 
   audiorecorder* recorder = new audiorecorder ();
 
   int offset = 0;
 
   if (nargin > 0)
     {
-      bool is_function = args(0).is_string () || args(0).is_function_handle () || args(0).is_inline_function ();
+      bool is_function = args(0).is_string () || args(0).is_function_handle ()
+                         || args(0).is_inline_function ();
 
       if (is_function)
         {
           error ("audioplayer: callbacks not yet implemented");
           return retval;
 
           // recorder->octave_callback_function = args(0).function_value ();
           // offset = 1;
@@ -1888,17 +1892,17 @@ get_recorder (const octave_value& ov)
   octave_base_value *ncrep = const_cast<octave_base_value *> (&rep);
 
   return dynamic_cast<audiorecorder *> (ncrep);
 }
 
 #endif
 
 DEFUN_DLD (__recorder_getaudiodata__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{data}} __recorder_getaudiodata__ (@var{recorder})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -1910,17 +1914,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__recorder_get_channels__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{n} =} __recorder_get_channels__ (@var{recorder})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -1935,17 +1939,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__recorder_get_fs__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{fs} =} __recorder_get_fs__ (@var{recorder})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -1960,17 +1964,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__recorder_get_id__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{id} =} __recorder_get_id__ (@var{recorder})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -1985,17 +1989,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__recorder_get_nbits__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{nbits} =} __recorder_get_nbits__ (@var{recorder})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2010,17 +2014,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__recorder_get_sample_number__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{n} =} __recorder_get_sample_number__ (@var{recorder})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2035,17 +2039,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__recorder_get_tag__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{tag} =} __recorder_get_tag__ (@var{recorder})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2060,17 +2064,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__recorder_get_total_samples__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{n} =} __recorder_get_total_samples__ (@var{recorder})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2085,17 +2089,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__recorder_get_userdata__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{data} =} __recorder_get_userdata__ (@var{recorder})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2110,17 +2114,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__recorder_isrecording__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __recorder_isrecording__ (@var{recorder})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2135,17 +2139,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__recorder_pause__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __recorder_pause__ (@var{recorder})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2160,17 +2164,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__recorder_recordblocking__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __recorder_recordblocking__ (@var{recorder}, @var{seconds})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2182,17 +2186,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__recorder_record__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {} __recorder_record__ (@var{recorder})\n\
 @deftypefnx {Loadable Function} {} __recorder_record__ (@var{recorder}, @var{seconds})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
@@ -2214,17 +2218,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__recorder_resume__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __recorder_resume__ (@var{recorder})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2239,17 +2243,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__recorder_set_fs__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __recorder_set_fs__ (@var{recorder}, @var{fs})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2264,17 +2268,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__recorder_set_tag__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __recorder_set_tag__ (@var{recorder}, @var{tag})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2289,17 +2293,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__recorder_set_userdata__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __recorder_set_userdata__ (@var{recorder}, @var{data})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2314,17 +2318,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__recorder_stop__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __recorder_stop__ (@var{recorder})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2336,17 +2340,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__player_audioplayer__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{player} =} __player_audioplayer__ (@var{y}, @var{fs})\n\
 @deftypefnx {Loadable Function} {@var{player} =} __player_audioplayer__ (@var{y}, @var{fs}, @var{nbits})\n\
 @deftypefnx {Loadable Function} {@var{player} =} __player_audioplayer__ (@var{y}, @var{fs}, @var{nbits}, @var{id})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
@@ -2357,17 +2361,18 @@ Undocumented internal function.\n\
   if (nargin < 2 || nargin > 4)
     {
       print_usage ();
       return retval;
     }
 
   audioplayer* recorder = new audioplayer ();
 
-  bool is_function = args(0).is_string () || args(0).is_function_handle () || args(0).is_inline_function ();
+  bool is_function = args(0).is_string () || args(0).is_function_handle ()
+                     || args(0).is_inline_function ();
 
   if (is_function)
     {
       error ("audioplayer: callbacks not yet implemented");
       return retval;
 
       // recorder->set_y (args(0).function_value ());
     }
@@ -2414,17 +2419,17 @@ get_player (const octave_value& ov)
   octave_base_value *ncrep = const_cast<octave_base_value *> (&rep);
 
   return dynamic_cast<audioplayer *> (ncrep);
 }
 
 #endif
 
 DEFUN_DLD (__player_get_channels__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{n} =} __player_get_channels__ (@var{player})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2439,17 +2444,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__player_get_fs__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{fs} =} __player_get_fs__ (@var{player})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2464,17 +2469,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__player_get_id__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{id} =} __player_get_id__ (@var{player})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2489,17 +2494,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__player_get_nbits__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{nbits} =} __player_get_nbits__ (@var{player})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2514,17 +2519,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__player_get_sample_number__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{n} =} __player_get_sample_number__ (@var{player})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2539,17 +2544,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__player_get_tag__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{tag} =} __player_get_tag__ (@var{player})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2564,17 +2569,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__player_get_total_samples__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{n} =} __player_get_total_samples__ (@var{player})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2589,17 +2594,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__player_get_userdata__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{data} =} __player_get_userdata__ (@var{player})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2614,17 +2619,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__player_isplaying__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __player_isplaying__ (@var{player})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2639,17 +2644,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__player_pause__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __player_pause__ (@var{player})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2664,17 +2669,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__player_playblocking__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {} __player_playblocking__ (@var{player})\n\
 @deftypefnx {Loadable Function} {} __player_playblocking__ (@var{player}, @var{start})\n\
 @deftypefnx {Loadable Function} {} __player_playblocking__ (@var{player}, [@var{start}, @var{end}])\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
@@ -2726,17 +2731,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__player_play__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {} __player_play__ (@var{player})\n\
 @deftypefnx {Loadable Function} {} __player_play__ (@var{player}, @var{start})\n\
 @deftypefnx {Loadable Function} {} __player_play__ (@var{player}, [@var{start}, @var{end}])\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
@@ -2789,17 +2794,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__player_resume__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __player_resume__ (@var{player})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2814,17 +2819,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__player_set_fs__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __player_set_fs__ (@var{player}, @var{fs})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2839,17 +2844,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__player_set_tag__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __player_set_tag__ (@var{player}, @var{tag})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2864,17 +2869,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__player_set_userdata__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __player_set_userdata__ (@var{player}, @var{data})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
@@ -2889,17 +2894,17 @@ Undocumented internal function.\n\
   error ("portaudio not found on your system and thus audio functionality is not present");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (__player_stop__, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __player_stop__ (@var{player})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -45,34 +45,35 @@ along with Octave; see the file COPYING.
 static void
 safe_close (SNDFILE *file)
 {
   sf_close (file);
 }
 #endif
 
 DEFUN_DLD (audioread, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {[@var{y}, @var{fs}] =} audioread (@var{filename})\n\
+           "-*- texinfo -*-\n\
+@deftypefn  {Loadable Function} {[@var{y}, @var{fs}] =} audioread (@var{filename})\n\
 @deftypefnx {Loadable Function} {[@var{y}, @var{fs}] =} audioread (@var{filename}, @var{samples})\n\
 \n\
 @deftypefnx {Loadable Function} {[@var{y}, @var{fs}] =} audioread (@var{filename}, @var{datatype})\n\
 @deftypefnx {Loadable Function} {[@var{y}, @var{fs}] =} audioread (@var{filename}, @var{samples}, @var{datatype})\n\
 Read the audio file @var{filename} and return the audio data and sampling\n\
 rate.  The audio data is stored as matrix with rows corresponding\n\
 to audio frames and columns corresponding to channels.\n\
 \n\
 The optional two-element vector argument @var{samples} specifies starting\n\
 and ending frames.\n\
 \n\
 The optional argument @var{datatype} specifies the datatype to return.\n\
 If it is @qcode{\"native\"}, then the type of data depends on how the\n\
 data is stored in the audio file.\n\
 \n\
-Read a file and return a specified range of frames in an array of specified type.\n\
+Read a file and return a specified range of frames in an array of specified\n\
+type.\n\
 \n\
 @end deftypefn")
 {
   octave_value_list retval;
 
 #ifdef HAVE_SNDFILE
 
   int nargin = args.length ();
@@ -82,17 +83,17 @@ Read a file and return a specified range
       print_usage ();
       return retval;
     }
 
   std::string filename = args(0).string_value ();
 
   if (error_state)
     return retval;
-  
+
   SF_INFO info;
   info.format = 0;
   SNDFILE *file = sf_open (filename.c_str (), SFM_READ, &info);
 
   if (! file)
     {
       error ("audioread: failed to open input file %s", filename.c_str ());
       return retval;
@@ -239,37 +240,43 @@ extension_to_format (const std::string& 
   std::map<std::string, int>::const_iterator it = table.find (ext);
 
   return (it != table.end ()) ? it->second : 0;
 }
 
 #endif
 
 DEFUN_DLD (audiowrite, args, ,
-  "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {} audiowrite (@var{filename}, @var{y}, @var{fs})\n\
+           "-*- texinfo -*-\n\
+@deftypefn  {Loadable Function} {} audiowrite (@var{filename}, @var{y}, @var{fs})\n\
 @deftypefnx {Loadable Function} {} audiowrite (@var{filename}, @var{y}, @var{fs}, @var{name}, @var{value}, @dots{})\n\
 \n\
 Write audio data from the matrix @var{y} to @var{filename} with the file\n\
 format determined by the file extension.\n\
 \n\
 Additional name and value argument pairs may be used to specify the\n\
 following options:\n\
 \n\
 @table @samp\n\
 @item BitsPerSample\n\
-Number of bits per sample, valid values are 8, 16, 24 and 32. Default is 16.\n\
+Number of bits per sample, valid values are 8, 16, 24 and 32.  Default is 16.\n\
+\n\
 @item BitRate\n\
-Valid argument name, but ignored. Left for compatibility with @sc{matlab}.\n\
+Valid argument name, but ignored.  Left for compatibility with @sc{matlab}.\n\
+\n\
 @item Quality\n\
-Quality setting for the Ogg Vorbis compressor. Values can range between 0 and 100 with 100 being the highest quality setting. Default is 75.\n\
+Quality setting for the Ogg Vorbis compressor.  Values can range between 0\n\
+and 100 with 100 being the highest quality setting.  Default is 75.\n\
+\n\
 @item Title\n\
 Title for the audio file.\n\
+\n\
 @item Artist\n\
 Artist name.\n\
+\n\
 @item Comment\n\
 Comment.\n\
 @end table\n\
 @end deftypefn")
 {
   // FIXME: shouldn't we return something to indicate whether the file
   // was written successfully?
 
@@ -432,17 +439,17 @@ Comment.\n\
   error ("sndfile not found on your system and thus audiowrite is not functional");
 
 #endif
 
   return retval;
 }
 
 DEFUN_DLD (audioinfo, args, ,
-  "-*- texinfo -*-\n\
+           "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{info} =} audioinfo (@var{filename})\n\
 Return information about an audio file specified by @var{filename}.\n\
 @end deftypefn")
 {
   octave_value retval;
 
 #ifdef HAVE_SNDFILE
 
diff --git a/scripts/audio/@audioplayer/audioplayer.m b/scripts/audio/@audioplayer/audioplayer.m
--- a/scripts/audio/@audioplayer/audioplayer.m
+++ b/scripts/audio/@audioplayer/audioplayer.m
@@ -12,42 +12,42 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs})
+## @deftypefn  {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs})
 ## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs}, @var{nbits})
 ## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{y}, @var{fs}, @var{nbits}, @var{id})
 ## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{recorder})
 ## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{recorder}, @var{id})
 ## Create an audioplayer object that will play back data @var{y} at sample
 ## rate @var{fs}.  The optional arguments @var{nbits}, and @var{id}
 ## specify the bit depth and player device id, respectively.  Device IDs
 ## may be found using the audiodevinfo function.
 ## Given an audioplayer object, use the data from the object to
 ## initialize the player.
-## @end deftypefn
 ##
-## The signal @var{y} can be a vector or a two dimensional array.
+## The signal @var{y} can be a vector or a two-dimensional array.
 ##
 ## The following example will create an audioplayer object that will play
 ## back one second of white noise at 44100 sample rate using 8 bits per
 ## sample.
 ##
 ## @example
 ## @group
 ## y = randn (2, 44100) - 0.5;
 ## player = audioplayer (y, 44100, 8);
 ## play (player);
 ## @end group
 ## @end example
+## @end deftypefn
 
 ## FIXME: callbacks don't work properly, apparently because portaudio
 ## will execute the callbacks in a separate thread, and calling Octave
 ## functions in a separate thread which is likely to cause trouble with
 ## all of Octave's global data...
 ##
 ## @deftypefnx {Function File} {@var{player} =} audioplayer (@var{function}, @dots{})
 ##
diff --git a/scripts/audio/@audioplayer/get.m b/scripts/audio/@audioplayer/get.m
--- a/scripts/audio/@audioplayer/get.m
+++ b/scripts/audio/@audioplayer/get.m
@@ -12,20 +12,20 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{value} =} get (@var{player}, @var{name})
+## @deftypefn  {Function File} {@var{value} =} get (@var{player}, @var{name})
 ## @deftypefnx {Function File} {@var{values} =} get (@var{player})
 ## Return the @var{value} of the property identified by @var{name}.
-## If @var{name} is a cell array return the values of of the properties
+## If @var{name} is a cell array return the values of the properties
 ## identified by the elements of the cell array.  Given only the
 ## player object, return a scalar structure with values of all
 ## properties of @var{player}.  The field names of the structure
 ## correspond to property names.
 ## @end deftypefn
 
 function retval = get (varargin)
 
diff --git a/scripts/audio/@audioplayer/play.m b/scripts/audio/@audioplayer/play.m
--- a/scripts/audio/@audioplayer/play.m
+++ b/scripts/audio/@audioplayer/play.m
@@ -12,18 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} play (@var{player})
-## @deftypefnx {Function File} {} play  (@var{player}, @var{start})
+## @deftypefn  {Function File} {} play (@var{player})
+## @deftypefnx {Function File} {} play (@var{player}, @var{start})
 ## @deftypefnx {Function File} {} play (@var{player}, @var{limits})
 ## Play audio stored in the audioplayer object @var{player} without blocking.
 ## Given optional argument start, begin playing at @var{start} seconds
 ## in the recording.  Given a two-element vector @var{limits}, begin and
 ## end playing at the number of seconds specified by the elements of the
 ## vector.
 ## @end deftypefn
 
diff --git a/scripts/audio/@audioplayer/playblocking.m b/scripts/audio/@audioplayer/playblocking.m
--- a/scripts/audio/@audioplayer/playblocking.m
+++ b/scripts/audio/@audioplayer/playblocking.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} playblocking (@var{player})
+## @deftypefn  {Function File} {} playblocking (@var{player})
 ## @deftypefnx {Function File} {} playblocking (@var{player}, @var{start})
 ## @deftypefnx {Function File} {} playblocking (@var{player}, @var{limits})
 ## Play audio stored in the audioplayer object @var{player} with blocking.
 ## Given optional argument start, begin playing at @var{start} seconds
 ## in the recording.  Given a two-element vector @var{limits}, begin and
 ## end playing at the number of seconds specified by the elements of the
 ## vector.
 ## @end deftypefn
diff --git a/scripts/audio/@audioplayer/set.m b/scripts/audio/@audioplayer/set.m
--- a/scripts/audio/@audioplayer/set.m
+++ b/scripts/audio/@audioplayer/set.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} set (@var{player}, @var{name}, @var{value})
+## @deftypefn  {Function File} {} set (@var{player}, @var{name}, @var{value})
 ## @deftypefnx {Function File} {} set (@var{player}, @var{properties})
 ## @deftypefnx {Function File} {@var{properties} =} set (@var{player})
 ## Set the value of property specified by @var{name} to a given @var{value}.
 ## If @var{name} and @var{value} are cell arrays, set each property to the
 ## corresponding value.  Given a structure of @var{properties} with
 ## fields corresponding to property names, set the value of those
 ## properties to the field values.  Given only the audioplayer object,
 ## return a structure of settable properties.
diff --git a/scripts/audio/@audiorecorder/audiorecorder.m b/scripts/audio/@audiorecorder/audiorecorder.m
--- a/scripts/audio/@audiorecorder/audiorecorder.m
+++ b/scripts/audio/@audiorecorder/audiorecorder.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{recorder} =} audiorecorder ()
+## @deftypefn  {Function File} {@var{recorder} =} audiorecorder ()
 ## @deftypefnx {Function File} {@var{recorder} =} audiorecorder (@var{fs}, @var{nbits}, @var{channels})
 ## @deftypefnx {Function File} {@var{recorder} =} audiorecorder (@var{fs}, @var{nbits}, @var{channels}, @var{id})
 ## Create an audiorecorder object recording 8 bit mono audio at 8000 Hz
 ## sample rate.  The optional arguments @var{fs}, @var{nbits},
 ## @var{channels}, and @var{id} specify the sample rate, bit depth,
 ## number of channels and recording device id, respectively.  Device IDs
 ## may be found using the audiodevinfo function.
 ## @end deftypefn
diff --git a/scripts/audio/@audiorecorder/get.m b/scripts/audio/@audiorecorder/get.m
--- a/scripts/audio/@audiorecorder/get.m
+++ b/scripts/audio/@audiorecorder/get.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{value} =} get (@var{recorder}, @var{name})
+## @deftypefn  {Function File} {@var{value} =} get (@var{recorder}, @var{name})
 ## @deftypefnx {Function File} {@var{values} =} get (@var{recorder})
 ## Return the @var{value} of the property identified by @var{name}.
 ## If @var{name} is a cell array, return the values of the properties
 ## corresponding to the elements of the cell array.  Given only the
 ## recorder object, return a scalar structure with values of all
 ## properties of @var{recorder}.  The field names of the structure
 ## correspond to property names.
 ## @end deftypefn
diff --git a/scripts/audio/@audiorecorder/getaudiodata.m b/scripts/audio/@audiorecorder/getaudiodata.m
--- a/scripts/audio/@audiorecorder/getaudiodata.m
+++ b/scripts/audio/@audiorecorder/getaudiodata.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{data} =} getaudiodata (@var{recorder})
+## @deftypefn  {Function File} {@var{data} =} getaudiodata (@var{recorder})
 ## @deftypefnx {Function File} {@var{data} =} getaudiodata (@var{recorder}, @var{datatype})
 ## Return recorder audio data as a matrix with values between -1.0 and 1.0
 ## and with as many columns as there are channels in the recorder.
 ## Given the optional argument @var{datatype}, convert the recorded data
 ## to the specified type, which may be one of @qcode{"double"},
 ## @qcode{"single"}, @qcode{"int16"}, @qcode{"int8"} or @qcode{"uint8"}.
 ## @end deftypefn
 
diff --git a/scripts/audio/@audiorecorder/play.m b/scripts/audio/@audiorecorder/play.m
--- a/scripts/audio/@audiorecorder/play.m
+++ b/scripts/audio/@audiorecorder/play.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {@var{player} =} play (@var{recorder})
+## @deftypefn  {Function File} {@var{player} =} play (@var{recorder})
 ## @deftypefnx {Function File} {@var{player} =} play (@var{recorder}, @var{start})
 ## @deftypefnx {Function File} {@var{player} =} play (@var{recorder}, [@var{start}, @var{end}])
 ## Play the audio recorded in @var{recorder} and return a corresponding
 ## audioplayer object.  If the optional argument @var{start} is
 ## provided, begin playing @var{start} seconds in to the recording.
 ## If the optional argument @var{end} is provided, stop playing at
 ## @var{end} seconds in the recording.
 ## @end deftypefn
diff --git a/scripts/audio/@audiorecorder/record.m b/scripts/audio/@audiorecorder/record.m
--- a/scripts/audio/@audiorecorder/record.m
+++ b/scripts/audio/@audiorecorder/record.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} record (@var{recorder})
+## @deftypefn  {Function File} {} record (@var{recorder})
 ## @deftypefnx {Function File} {} record (@var{recorder}, @var{length})
 ## Record audio without blocking using the audiorecorder object
 ## @var{recorder} until stopped or paused by the @var{stop} or
 ## @var{pause} method.  Given the optional argument @var{length}, record
 ## for @var{length} seconds.
 ## @end deftypefn
 
 function record (varargin)
diff --git a/scripts/audio/@audiorecorder/set.m b/scripts/audio/@audiorecorder/set.m
--- a/scripts/audio/@audiorecorder/set.m
+++ b/scripts/audio/@audiorecorder/set.m
@@ -12,25 +12,25 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} set (@var{recorder}, @var{name}, @var{value})
+## @deftypefn  {Function File} {} set (@var{recorder}, @var{name}, @var{value})
 ## @deftypefnx {Function File} {} set (@var{recorder}, @var{properties})
 ## @deftypefnx {Function File} {@var{properties} =} set (@var{recorder})
 ## Set the value of property specified by @var{name} to a given @var{value}.
 ## If @var{name} and @var{value} are cell arrays of the same size,
 ## set each property to a corresponding value.
 ## Given a structure with fields corresponding to property names, set
 ## the value of those properties to the corresponding field values.
-## Given a only the recorder object, return a structure of settable
+## Given only the recorder object, return a structure of settable
 ## properties.
 ## @end deftypefn
 
 function settable = set (varargin)
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
   endif
