# HG changeset patch
# User jwe
# Date 912813626 0
#      Fri Dec 04 23:20:26 1998 +0000
# Node ID 7aae2c3636a7863a9cff7273fa192e3c807952cb
# Parent  1e7532b9173b48ffc43367f1c0f15cff0d1a0e0b
[project @ 1998-12-04 23:20:12 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,19 @@
+Fri Dec  4 18:05:51 1998  Kurt Hornik  <Kurt.Hornik@ci.tuwien.ac.at>
+
+	* emacs/octave-mod.el (octave-abbrev-start): Use the correct name
+	of the abbrev table, and provide support for XEmacs.
+	(octave-xemacs-p): New variable.
+
+Tue Nov 24 23:31:50 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in: Check for strftime too.
+	Avoid checking for termios.h on NeXT systems.
+
 Thu Nov 19 16:07:57 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* aclocal.m4 (OCTAVE_CXX_PREPENDS_UNDERSCORE): New macro.
 	* configure.in: Use it.
 	* acconfig.h: Add #undef for it.
 
 Thu Nov 12 10:42:25 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -16,17 +16,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
-AC_REVISION($Revision: 1.312 $)
+AC_REVISION($Revision: 1.313 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 OCTAVE_HOST_TYPE
 
@@ -684,21 +684,30 @@ OCTAVE_STRING_NPOS
 
 ### Checks for header files.
 
 AC_HEADER_STDC
 AC_HEADER_DIRENT
 AC_HEADER_TIME
 AC_HEADER_SYS_WAIT
 
+### I'm told that termios.h is broken on NeXT systems.
+
+TERMIOS_H=termios.h
+case "$canonical_host_type" in
+  *-*-nextstep*)
+    TERMIOS_H=
+  ;;
+esac
+
 AC_CHECK_HEADERS(assert.h curses.h dlfcn.h fcntl.h float.h floatingpoint.h \
   fnmatch.h glob.h grp.h ieeefp.h limits.h memory.h nan.h ncurses.h \
   pwd.h sgtty.h stdlib.h string.h sys/param.h sys/resource.h \
   sys/select.h sys/stat.h sys/time.h sys/times.h sys/types.h \
-  sys/utsname.h termcap.h termio.h termios.h unistd.h varargs.h)
+  sys/utsname.h termcap.h termio.h $TERMIOS_H unistd.h varargs.h)
 
 if test "$ac_cv_header_termios_h" = yes \
     || test "$ac_cv_header_termio_h" = yes \
     || test "$ac_cv_header_sgtty_h" = yes; then
   true
 else
   AC_MSG_ERROR([I couldn't find termios.h, termio.h, or sgtty.h!])
 fi
@@ -746,17 +755,17 @@ AC_SUBST(GLOB_INCFLAGS)
 ### Checks for functions and variables.
 
 AC_CHECK_FUNCS(atexit bcopy bzero dup2 endgrent endpwent execvp fcntl \
   fork getcwd getegid geteuid getgid getgrent getgrgid getgrnam \
   gethostname getpgrp getpid getppid getpwent getpwnam getpwuid \
   gettimeofday getuid getwd lstat memmove mkdir mkfifo on_exit pipe \
   putenv rename rindex rmdir setgrent setpwent setvbuf sigaction \
   sigpending sigprocmask sigsuspend stat strcasecmp strdup strerror \
-  stricmp strncasecmp strnicmp tempnam umask unlink usleep \
+  strftime stricmp strncasecmp strnicmp tempnam umask unlink usleep \
   vfprintf vsprintf waitpid)
 
 OCTAVE_SMART_PUTENV
 
 LIBDLFCN=
 DLFCN_INCFLAGS=
 if test "$WITH_DL" = yes || test "$WITH_DL" = maybe; then
   case "$canonical_host_type" in
diff --git a/doc/interpreter/emacs.texi b/doc/interpreter/emacs.texi
--- a/doc/interpreter/emacs.texi
+++ b/doc/interpreter/emacs.texi
@@ -332,16 +332,23 @@ or @samp{LOADPATH}) in @code{font-lock-v
 @item
 and the function names in function declarations in
 @code{font-lock-function-name-face}.
 @end itemize
 
 There is also rudimentary support for Imenu (currently, function names
 can be indexed).
 
+@cindex TAGS
+@cindex Emacs TAGS files
+@cindex @code{otags}
+You can generate TAGS files for Emacs from Octave @file{.m} files using
+the shell script @code{otags} that is installed alongside your copy of
+Octave.
+
 Customization of Octave mode can be performed by modification of the
 variable @code{octave-mode-hook}.  It the value of this variable is
 non-@code{nil}, turning on Octave mode calls its value.
 
 If you discover a problem with Octave mode, you can conveniently send a
 bug report using @kbd{C-c C-b} (@code{octave-submit-bug-report}).  This
 automatically sets up a mail buffer with version information already
 added.  You just need to add a description of the problem, including a
diff --git a/doc/interpreter/func.texi b/doc/interpreter/func.texi
--- a/doc/interpreter/func.texi
+++ b/doc/interpreter/func.texi
@@ -625,25 +625,33 @@ If you know that your own function files
 running Octave, you can improve performance by setting the variable
 @code{ignore_function_time_stamp} to @code{"all"}, so that Octave will
 ignore the time stamps for all function files.  Setting it to
 @code{"system"} gives the default behavior.  If you set it to anything
 else, Octave will check the time stamps on all function files.
 
 @c XXX FIXME XXX -- note about time stamps on files in NFS environments?
 
+@defvr {Built-in Variable} DEFAULT_LOADPATH
+A colon separated list of directories in which to search for function
+files by default.  The value of this variable is also automatically
+substituted for leading, trailing, or doubled colons that appear in the
+built-in variable @code{LOADPATH}.
+@end defvr
+
 @defvr {Built-in Variable} LOADPATH
 A colon separated list of directories in which to search for function
 files.  @xref{Functions and Scripts}.  The value of @code{LOADPATH}
 overrides the environment variable @code{OCTAVE_PATH}.  @xref{Installation}.
 
 @code{LOADPATH} is now handled in the same way as @TeX{} handles
-@code{TEXINPUTS}.  If the path starts with @samp{:}, the standard path
-is prepended to the value of @code{LOADPATH}.  If it ends with @samp{:}
-the standard path is appended to the value of @code{LOADPATH}.
+@code{TEXINPUTS}.  Leading, trailing, or doubled colons that appear in
+@code{LOADPATH} are replaced by the value of @code{DEFAULT_LOADPATH}.
+The default value of @code{LOADPATH} is @code{":"}, which tells Octave
+to search in the directories specified by @code{DEFAULT_LOADPATH}.
 
 In addition, if any path element ends in @samp{//}, that directory and
 all subdirectories it contains are searched recursively for function
 files.  This can result in a slight delay as Octave caches the lists of
 files found in the @code{LOADPATH} the first time Octave searches for a
 function.  After that, searching is usually much faster because Octave
 normally only needs to search its internal cache for files.
 
diff --git a/doc/interpreter/var.texi b/doc/interpreter/var.texi
--- a/doc/interpreter/var.texi
+++ b/doc/interpreter/var.texi
@@ -302,16 +302,21 @@ Here is a summary of all of Octave's bui
 cross references to additional information and their default values.  In
 the following table @var{octave-home} stands for the root directory
 where all of Octave is installed (the default is @file{@value{OCTAVEHOME}},
 @var{version} stands for the Octave version number (for example,
 @value{VERSION}) and @var{arch} stands for the type of system for which
 Octave was compiled (for example, @code{@value{TARGETHOSTTYPE}}).
 
 @vtable @code
+@item DEFAULT_LOADPATH
+@xref{Function Files}.
+
+Default value: @code{".:@var{octave-home}/lib/@var{version}"}.
+
 @item EDITOR
 @xref{Commands For History}.
 
 Default value: @code{"emacs"}.
 
 @item EXEC_PATH
 @xref{Controlling Subprocesses}.
 
@@ -325,17 +330,18 @@ Default value: @code{"@var{octave-home}/
 @item INFO_PROGRAM
 @xref{Getting Help}.
 
 Default value: @code{"@var{octave-home}/libexec/octave/@var{version}/exec/@var{arch}/info"}.
 
 @item LOADPATH
 @xref{Function Files}.
 
-Default value: @code{".:@var{octave-home}/lib/@var{version}"}.
+Default value: @code{":"}, which tells Octave to use the directories
+specified by the built-in variable @code{DEFAULT_LOADPATH}.
 
 @item OCTAVE_HOME
 
 Default value: @code{"@value{OCTAVEHOME}"}.
 
 @item PAGER
 @xref{Input and Output}.
 
diff --git a/emacs/octave-mod.el b/emacs/octave-mod.el
--- a/emacs/octave-mod.el
+++ b/emacs/octave-mod.el
@@ -594,16 +594,19 @@ the end keyword."
   (if (or (octave-in-comment-p)
 	  (save-excursion
 	    (beginning-of-line)
 	    (looking-at octave-continuation-regexp)))
       nil
     (delete-horizontal-space)
     (insert (concat " " octave-continuation-string))))
 
+(defvar octave-xemacs-p
+  (string-match "XEmacs\\|Lucid" emacs-version))
+
 ;;; Comments
 (defun octave-comment-region (beg end &optional arg)
   "Comment or uncomment each line in the region as Octave code.
 See `comment-region'."
   (interactive "r\nP")
   (let ((comment-start (char-to-string octave-comment-char)))
     (comment-region beg end arg)))
   
@@ -1305,19 +1308,22 @@ If Abbrev mode is turned on, typing ` (g
 \\[help-command] lists all Octave abbrevs.  Any other key combination is
 executed normally.
 Note that all Octave mode abbrevs start with a grave accent."
   (interactive)
   (if (not abbrev-mode)
       (self-insert-command 1)
     (let (c)
       (insert last-command-char)
-      (if (or (eq (setq c (read-event)) ??)
-	      (eq c help-char))
-	  (let ((abbrev-table-name-list '(octave-mode-abbrev-table)))
+      (if (if octave-xemacs-p
+	      (or (eq (event-to-character (setq c (next-event))) ??)
+		  (eq (event-to-character c) help-char))
+	    (or (eq (setq c (read-event)) ??)
+		(eq c help-char)))
+	  (let ((abbrev-table-name-list '(octave-abbrev-table)))
 	    (list-abbrevs))
 	(setq unread-command-events (list c))))))
 
 (defun octave-insert-defun (name args vals)
   "Insert an Octave function skeleton.
 Prompt for the function's name, arguments and return values (to be
 entered without parens)."
   (interactive
diff --git a/liboctave/Array2.cc b/liboctave/Array2.cc
--- a/liboctave/Array2.cc
+++ b/liboctave/Array2.cc
@@ -183,13 +183,27 @@ Array2<T>::is_symmetric (void) const
 	    return false;
 
       return true;
     }
 
   return false;
 }
 
+template <class T>
+Array2<T>
+Array2<T>::transpose (void) const
+{
+  Array2<T> result (d2, d1);
+
+  if (d1 > 0 && d2 > 0)
+    for (int j = 0; j < d2; j++)
+      for (int i = 0; i < d1; i++)
+	result.elem (j, i) = elem (i, j);
+
+  return result;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/Array2.h b/liboctave/Array2.h
--- a/liboctave/Array2.h
+++ b/liboctave/Array2.h
@@ -172,16 +172,18 @@ public:
   void resize (int n, int m, const T& val);
 
   Array2<T>& insert (const Array2<T>& a, int r, int c);
 
   bool is_square (void) const { return (d1 == d2); }
 
   bool is_symmetric (void) const;
 
+  Array2<T> transpose (void) const;
+
 #ifdef HEAVYWEIGHT_INDEXING
   void maybe_delete_elements (idx_vector& i, idx_vector& j);
 
   Array2<T> value (void);
 
   Array2<T> index (idx_vector& i) const;
 
   Array2<T> index (idx_vector& i, idx_vector& j) const;
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -723,31 +723,16 @@ ComplexMatrix::hermitian (void) const
       for (int j = 0; j < nc; j++)
 	for (int i = 0; i < nr; i++)
 	  result.elem (j, i) = conj (elem (i, j));
     }
   return result;
 }
 
 ComplexMatrix
-ComplexMatrix::transpose (void) const
-{
-  int nr = rows ();
-  int nc = cols ();
-  ComplexMatrix result (nc, nr);
-  if (length () > 0)
-    {
-      for (int j = 0; j < nc; j++)
-	for (int i = 0; i < nr; i++)
-	  result.elem (j, i) = elem (i, j);
-    }
-  return result;
-}
-
-ComplexMatrix
 conj (const ComplexMatrix& a)
 {
   int a_len = a.length ();
   ComplexMatrix retval;
   if (a_len > 0)
     retval = ComplexMatrix (conj_dup (a.data (), a_len), a.rows (),
 			    a.cols ());
   return retval;
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -109,17 +109,18 @@ public:
   ComplexMatrix stack (const DiagMatrix& a) const;
 
   ComplexMatrix stack (const ComplexMatrix& a) const;
   ComplexMatrix stack (const ComplexRowVector& a) const;
   ComplexMatrix stack (const ComplexColumnVector& a) const;
   ComplexMatrix stack (const ComplexDiagMatrix& a) const;
 
   ComplexMatrix hermitian (void) const;  // complex conjugate transpose
-  ComplexMatrix transpose (void) const;
+  ComplexMatrix transpose (void) const
+    { return MArray2<Complex>::transpose (); }
 
   friend ComplexMatrix conj (const ComplexMatrix& a);
 
   // resize is the destructive equivalent for this one
 
   ComplexMatrix extract (int r1, int c1, int r2, int c2) const;
 
   // extract row or column i.
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,22 @@
+Tue Nov 24 23:38:19 1998  Eric Norum <eric@skatter.USask.Ca>
+
+	* statdefs.h: Only define mode_t if not already defined.
+
+Tue Nov 24 17:24:52 1998  john <john@arrows.demon.co.uk>
+
+	* lo-specfun.cc (airy, biry): Set imaginary part of result to zero
+	when appropriate.
+
+Mon Nov 23 09:57:05 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* cmd-edit.cc (gnu_readline::gnu_readline): Set terminal name
+	before calling rl_initialize.
+
 Tue Nov 17 23:47:24 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-specfun.cc (besselh, airy, biry): New functions.
 	Update Bessel function support to use library by D. E. Amos.
 
 Thu Nov 12 17:44:15 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* cmd-edit.h (command_editor::readline): Add new variation that
diff --git a/liboctave/MArray2.h b/liboctave/MArray2.h
--- a/liboctave/MArray2.h
+++ b/liboctave/MArray2.h
@@ -115,16 +115,24 @@ public:
   ~MArray2 (void) { }
 
   MArray2<T>& operator = (const MArray2<T>& a)
     {
       Array2<T>::operator = (a);
       return *this;
     }
 
+  MArray2<T>& insert (const Array2<T>& a, int r, int c)
+  {
+    Array2<T>::insert (a, r, c);
+    return *this;
+  }
+
+  MArray2<T> transpose (void) const { return Array2<T>::transpose (); }
+
   // element by element MArray2 by scalar ops
 
   friend MArray2<T>& operator += LTGT (MArray2<T>& a, const T& s);
   friend MArray2<T>& operator -= LTGT (MArray2<T>& a, const T& s);
 
   // element by element MArray2 by MArray2 ops
 
   friend MArray2<T>& operator += LTGT (MArray2<T>& a, const MArray2<T>& b);
diff --git a/liboctave/boolMatrix.cc b/liboctave/boolMatrix.cc
--- a/liboctave/boolMatrix.cc
+++ b/liboctave/boolMatrix.cc
@@ -55,31 +55,16 @@ boolMatrix::operator != (const boolMatri
 
 boolMatrix&
 boolMatrix::insert (const boolMatrix& a, int r, int c)
 {
   Array2<bool>::insert (a, r, c);
   return *this;
 }
 
-boolMatrix
-boolMatrix::transpose (void) const
-{
-  int nr = rows ();
-  int nc = cols ();
-  boolMatrix result (nc, nr);
-  if (length () > 0)
-    {
-      for (int j = 0; j < nc; j++)
-	for (int i = 0; i < nr; i++)
-	  result.elem (j, i) = elem (i, j);
-    }
-  return result;
-}
-
 // unary operations
 
 boolMatrix
 boolMatrix::operator ! (void) const
 {
   int nr = rows ();
   int nc = cols ();
 
diff --git a/liboctave/boolMatrix.h b/liboctave/boolMatrix.h
--- a/liboctave/boolMatrix.h
+++ b/liboctave/boolMatrix.h
@@ -46,22 +46,22 @@ public:
     {
       Array2<bool>::operator = (a);
       return *this;
     }
 
   bool operator == (const boolMatrix& a) const;
   bool operator != (const boolMatrix& a) const;
 
+  boolMatrix transpose (void) const { return Array2<bool>::transpose (); }
+
   // destructive insert/delete/reorder operations
 
   boolMatrix& insert (const boolMatrix& a, int r, int c);
 
-  boolMatrix transpose (void) const;
-
   // unary operations
 
   boolMatrix operator ! (void) const;
 
   // other operations
 
   boolMatrix all (void) const;
   boolMatrix any (void) const;
diff --git a/liboctave/chMatrix.cc b/liboctave/chMatrix.cc
--- a/liboctave/chMatrix.cc
+++ b/liboctave/chMatrix.cc
@@ -168,31 +168,16 @@ charMatrix::row_as_string (int r, bool s
     }
 
   retval.resize (nc+1);
 
   return retval;
 }
 
 charMatrix
-charMatrix::transpose (void) const
-{
-  int nr = rows ();
-  int nc = cols ();
-  charMatrix result (nc, nr);
-  if (length () > 0)
-    {
-      for (int j = 0; j < nc; j++)
-	for (int i = 0; i < nr; i++)
-	  result.elem (j, i) = elem (i, j);
-    }
-  return result;
-}
-
-charMatrix
 charMatrix::extract (int r1, int c1, int r2, int c2) const
 {
   if (r1 > r2) { int tmp = r1; r1 = r2; r2 = tmp; }
   if (c1 > c2) { int tmp = c1; c1 = c2; c2 = tmp; }
 
   int new_r = r2 - r1 + 1;
   int new_c = c2 - c1 + 1;
 
diff --git a/liboctave/chMatrix.h b/liboctave/chMatrix.h
--- a/liboctave/chMatrix.h
+++ b/liboctave/chMatrix.h
@@ -62,18 +62,16 @@ public:
 
   // destructive insert/delete/reorder operations
 
   charMatrix& insert (const char *s, int r, int c);
   charMatrix& insert (const charMatrix& a, int r, int c);
 
   string row_as_string (int r, bool strip_trailing_whitespace = false) const;
 
-  charMatrix transpose (void) const;
-
   // resize is the destructive equivalent for this one
 
   charMatrix extract (int r1, int c1, int r2, int c2) const;
 
   Matrix all (void) const;
   Matrix any (void) const;
 
 #if 0
diff --git a/liboctave/cmd-edit.cc b/liboctave/cmd-edit.cc
--- a/liboctave/cmd-edit.cc
+++ b/liboctave/cmd-edit.cc
@@ -19,16 +19,17 @@ along with Octave; see the file COPYING.
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <cstdlib>
 #include <cstring>
 #include <ctime>
 
 #include <string>
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
@@ -134,16 +135,18 @@ private:
 
   static char **command_completer (char *text, int start, int end);
 };
 
 gnu_readline::gnu_readline ()
   : command_editor (), previous_startup_hook (0),
     previous_event_hook (0), completion_function (0)
 {
+  rl_terminal_name = ::getenv ("TERM");
+
   rl_initialize ();
 
   do_blink_matching_paren (true);
 
   // Bind operate-and-get-next.
 
   rl_add_defun ("operate-and-get-next",
 		gnu_readline::operate_and_get_next, CTRL ('O'));
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -396,31 +396,16 @@ Matrix::stack (const DiagMatrix& a) cons
   int nr_insert = nr;
   Matrix retval (nr + a.rows (), nc);
   retval.insert (*this, 0, 0);
   retval.insert (a, nr_insert, 0);
   return retval;
 }
 
 Matrix
-Matrix::transpose (void) const
-{
-  int nr = rows ();
-  int nc = cols ();
-  Matrix result (nc, nr);
-  if (length () > 0)
-    {
-      for (int j = 0; j < nc; j++)
-	for (int i = 0; i < nr; i++)
-	  result.elem (j, i) = elem (i, j);
-    }
-  return result;
-}
-
-Matrix
 real (const ComplexMatrix& a)
 {
   int a_len = a.length ();
   Matrix retval;
   if (a_len > 0)
     retval = Matrix (real_dup (a.data (), a_len), a.rows (), a.cols ());
   return retval;
 }
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -88,21 +88,21 @@ public:
   Matrix append (const ColumnVector& a) const;
   Matrix append (const DiagMatrix& a) const;
 
   Matrix stack (const Matrix& a) const;
   Matrix stack (const RowVector& a) const;
   Matrix stack (const ColumnVector& a) const;
   Matrix stack (const DiagMatrix& a) const;
 
-  Matrix transpose (void) const;
-
   friend Matrix real (const ComplexMatrix& a);
   friend Matrix imag (const ComplexMatrix& a);
 
+  Matrix transpose (void) const { return MArray2<double>::transpose (); }
+
   // resize is the destructive equivalent for this one
 
   Matrix extract (int r1, int c1, int r2, int c2) const;
 
   // extract row or column i.
 
   RowVector row (int i) const;
   RowVector row (char *s) const;
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -607,16 +607,19 @@ airy (const Complex& z, bool deriv, bool
   double zi = z.imag ();
 
   int id = deriv ? 1 : 0;
 
   int kode = scaled ? 2 : 1;
 
   F77_FCN (zairy, ZAIRY) (zr, zi, id, kode, ar, ai, nz, ierr);
 
+  if (zi == 0.0 && (! scaled || zr > 0.0))
+    ai = 0.0;
+
   return bessel_return_value (Complex (ar, ai), ierr);
 }
 
 Complex
 biry (const Complex& z, bool deriv, bool scaled, int& ierr)
 {
   double ar = 0.0;
   double ai = 0.0;
@@ -625,16 +628,19 @@ biry (const Complex& z, bool deriv, bool
   double zi = z.imag ();
 
   int id = deriv ? 1 : 0;
 
   int kode = scaled ? 2 : 1;
 
   F77_FCN (zbiry, ZBIRY) (zr, zi, id, kode, ar, ai, ierr);
 
+  if (zi == 0.0 && (! scaled || zr > 0.0))
+    ai = 0.0;
+
   return bessel_return_value (Complex (ar, ai), ierr);
 }
 
 ComplexMatrix
 airy (const ComplexMatrix& z, bool deriv, bool scaled, Array2<int>& ierr)
 {
   int nr = z.rows ();
   int nc = z.cols ();
diff --git a/liboctave/statdefs.h b/liboctave/statdefs.h
--- a/liboctave/statdefs.h
+++ b/liboctave/statdefs.h
@@ -27,18 +27,20 @@ Software Foundation, 59 Temple Place - S
 #include <sys/types.h>
 #endif
 
 #ifdef HAVE_SYS_STAT_H
 #include <sys/stat.h>
 #endif
 
 #ifndef S_ISREG			/* Doesn't have POSIX.1 stat stuff. */
+#ifndef mode_t
 #define mode_t unsigned short
 #endif
+#endif
 #if !defined(S_ISBLK) && defined(S_IFBLK)
 #define	S_ISBLK(m) (((m) & S_IFMT) == S_IFBLK)
 #endif
 #if !defined(S_ISCHR) && defined(S_IFCHR)
 #define	S_ISCHR(m) (((m) & S_IFMT) == S_IFCHR)
 #endif
 #if !defined(S_ISDIR) && defined(S_IFDIR)
 #define	S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,35 @@
+Fri Dec  4 16:08:42 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* quaternion: New directory of functions from A. S. Hodel,
+	<a.s.hodel@eng.auburn.edu>.
+	* Makefile.in (SUBDIRS): Add it to the list.
+
+Tue Nov 24 21:41:31 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* image/saveimage.m: Make it work again for black and white colormaps.
+
+	* image/imagesc.m: Use rows (colormap), not length (colormap),
+	since there can be fewer rows than columns.  Round values to
+	nearest position in colormap instead of truncating. Correct usage
+	message.
+
+Tue Nov 24 14:50:52 1998  A Scott Hodel <hodel@edalf1.msfc.nasa.gov>
+
+	* linear-algebra/krylov.m: New arg pflg.  If nonzero, avoid using
+	zero rows of [A,v] as householder pivots; this avoids spurious
+	non-zero entries in returned orthogonal matrix U, but destroys the
+	Householder matrix structure of H.
+
+Fri Nov 20 12:46:46 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* general/logical.m: Just copy input to output if argument is
+	already a logical object.
+
 Fri Nov  6 10:17:00 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* New files from OCST, in control subdiretory:
 
 	    DEMOcontrol.m      is_siso.m          syschnames.m
 	    abcddim.m          is_stabilizable.m  syschnamesl.m
 	    abcddims.m         is_stable.m        syschtsam.m
 	    analdemo.m         jet707.m           sysconnect.m
diff --git a/scripts/Makefile.in b/scripts/Makefile.in
--- a/scripts/Makefile.in
+++ b/scripts/Makefile.in
@@ -21,17 +21,17 @@ INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 SOURCES = # *.m
 
 DISTFILES = Makefile.in ChangeLog $(SOURCES) configure.in \
 	configure mkinstalldirs
 
 SUBDIRS = audio control elfun finance general image io linear-algebra \
-	miscellaneous plot polynomial set signal specfun \
+	miscellaneous plot polynomial quaternion set signal specfun \
 	special-matrix startup statistics strings time
 
 DISTSUBDIRS = $(SUBDIRS)
 
 BINDISTSUBDIRS = $(SUBDIRS)
 
 FCN_FILES = # $(wildcard $(srcdir)/*.m)
 FCN_FILES_NO_DIR = # $(notdir $(FCN_FILES))
diff --git a/scripts/general/logical.m b/scripts/general/logical.m
--- a/scripts/general/logical.m
+++ b/scripts/general/logical.m
@@ -27,14 +27,18 @@
 ##
 ##   [-1, 0, 1] != 0
 
 ## Author: jwe
 
 function y = logical (x)
 
   if (nargin == 1)
-    y = x != 0;
+    if (! islogical (x))
+      y = x != 0;
+    else
+      y = x;
+    endif
   else
     usage ("logical (x)");
   endif
 
 endfunction
diff --git a/scripts/image/imagesc.m b/scripts/image/imagesc.m
--- a/scripts/image/imagesc.m
+++ b/scripts/image/imagesc.m
@@ -26,34 +26,34 @@
 ## imagesc (x, zoom) sets the magnification, the default value is 4.
 ##
 ## SEE ALSO: image, imshow
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
-function x = imagesc (x, zoom)
+function y = imagesc (x, zoom)
 
   if (nargin < 1 || nargin > 2)
-    usage ("image (matrix, [zoom])");
+    usage ("imagesc (matrix, [zoom])");
   elseif (nargin == 1)
     zoom = 4;
   endif
 
   [ high, wide ] = size (x);
 
   maxval = max (max (x));
   minval = min (min (x));
 
   ## Rescale matrix so that all values are in the range 0 to
   ## length (colormap) inclusive.
 
   if (maxval == minval)
-    x = ones (high, wide);
+    y = ones (high, wide);
   else
     ## Rescale values to between 1 and length (colormap) inclusive.
-    x = fix ((x - minval) / (maxval - minval) * (length (colormap) - 1)) + 1;
+    y = round ((x - minval) / (maxval - minval) * (rows (colormap) - 1)) + 1;
   endif
 
-  image (x, zoom);
+  image (y, zoom);
 
 endfunction
diff --git a/scripts/image/saveimage.m b/scripts/image/saveimage.m
--- a/scripts/image/saveimage.m
+++ b/scripts/image/saveimage.m
@@ -145,41 +145,43 @@ function saveimage (filename, img, img_f
   img (idx) = ones (size (idx)) * map_nr;
 
   idx = find (img <= 0);
   img (idx) = ones (size (idx));
 
   if (strcmp (img_form, "ppm"))
     if (grey && map_nr == 2 && bw)
 
-      map = map(:,1);
-
       if (map(1) != 0)
-	map(1) = 1;
+      	map = [1; 0];
       else
-	map(2) = 1;
+      	map = [0; 1];
       endif
 
-      img = map(img);
-      n_long = rem (img_sz, 8);
-      if (n_long == 0)
-	n_long = 8;
-      else
-	n_long++;
-      endif
+      n_long = rem (img_nc, 8);
+      tmp = zeros (ceil (img_nc/8), img_nr);
 
-      idx = 1:8:img_sz;
-      s_len = length (idx) - 1;
-
-      tmp = img (1:8:img_sz) * 128;
-      for i = 2:n_long
-	tmp = tmp + img (i:8:img_sz) * 2^(8-i);
-      endfor
-      for i = (n_long+1):8
-	tmp(1:s_len) = tmp(1:s_len) + img (i:8:img_sz) * 2^(8-i);
+      for i = 1:img_nr
+	idx = (i-1)*img_nc+1:i*img_nc;
+      	if (n_long > 0)
+	  img_row = [map(img(idx)); zeros (8-n_long, 1)];
+	else
+      	  img_row = map(img(idx));
+	endif
+	img_row
+	tmp
+	if (img_nc < 8)
+	  for j = 1:8
+	    tmp(:,i) = tmp(:,i) + img_row (j) * 2^(8-j);
+	  endfor
+	else
+	  for j = 1:8
+	    tmp(:,i) = tmp(:,i) + img_row (j:8:img_nc) * 2^(8-j);
+	  endfor
+	endif
       endfor
 
       fid = fopen (filename, "w");
       fprintf (fid, "P4\n%d %d\n", img_nr, img_nc);
       fwrite (fid, tmp, "char");
       fprintf (fid, "\n");
       fclose (fid);
 
diff --git a/scripts/linear-algebra/krylov.m b/scripts/linear-algebra/krylov.m
--- a/scripts/linear-algebra/krylov.m
+++ b/scripts/linear-algebra/krylov.m
@@ -11,57 +11,73 @@
 # ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 # FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
 # for more details.
 # 
 # You should have received a copy of the GNU General Public License 
 # along with Octave; see the file COPYING.  If not, write to the Free 
 # Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. 
  
-function [U,H,k1] = krylov(A,v,k,eps1);
+function [U,H,k1] = krylov(A,v,k,eps1,pflg);
   # function [U,H,k1] = krylov(A,v,k{,eps1});
   # construct orthogonal basis U of Krylov subspace;
-  # 	span([v Av A^2*v ... A^(k+1)*v]);
+  #     span([v Av A^2*v ... A^(k+1)*v]);
   # via householder reflections; reflections are multiplied to obtain U
-  # eps1: threshhold for 0 relative to norm of current column (default: 1e-12)
-  # method used: householder reflections to guard against loss of
-  # orthogonality
-  #
+  # inputs:
+  #   A: square matrix
+  #   v: column vector
+  #   k: desired krylov subspace dimension (as above)
+  #   eps1: threshhold for 0 relative to norm of current column (default: 1e-12)
+  #   pflg: permutation flag (default 0): avoid using zero rows of
+  #      [A,v] as householder pivots; this avoids spurious non-zero entries
+  #      in returned orthogonal matrix U, but destroys the Householder matrix
+  #      structure of H.
   # outputs:
-  # returned basis U is n x k+1; A*U(:,1:k) = U*H
+  #   U: (n x k+1) orthogonal basis of Krylov subspace. A*U(:,1:k) = U*H
+  #   H: (pflg=0): Hessenberg matrix satisfying A*U(:,1:k) = U*H
+  #      (pflg=1): Workspace; does not satisfy above equation.
   # k1: dimension of span of krylov subspace (based on eps1)
   # if k > m-1, krylov returns the Hessenberg decompostion of A.
-  
+
   # Written by A. S. Hodel 1992
   # $Revision: 1.2 $
   # $Log$
 
-  if(nargin == 3)
-    eps1 = 1e-12;
+  if    (nargin > 5)   usage("[U,H,k1] = krylov(A,v,k{,eps1,pflg})");
+  elseif(nargin < 5)   pflg = 0;
+  elseif(nargin < 4)   eps1 = 1e-12; endif
+  na = is_square(A);
+  if(!na) error("krylov: A(%dx%d) must be square",na,na); endif
+  [m,n] = size(v);
+  if(!is_vector(v)) error("krylov: v(%dx%d) must be a vector",m,n);
+  elseif(length(v) != na)
+    error("krylov: A(%dx%d), v(%dx1); mismatch",na,na,length(v));
+  endif
+  v = vec(v);    # make sure it's a column vector
+  if(!is_scalar(k))
+    error("krylov: k(%dx%d) must be a scalar",rows(k), columns(k));
+  elseif( k > m)
+    warning("krylov: k is too large; reducing to %d",m-1);
+    k = m-1;
   endif
 
-  if( !is_square(A) )
-    error("first argument must be a square matrix")
-  else
-    [m,n] = size(v); 
-    if(m != is_square(A))
-      error("krylov: argument dimensions do not match")
-    elseif( !is_sample(k) )
-      error("krylov: third argument must be a scalar integer")
-    elseif( k > m)
-      warning(["krylov: k is too large; reducing to ",num2str(m)]);
-      k = m-1;
-    endif
-  endif
+  # check for zero input vector
+  if(norm(v) == 0) U = []; H = []; k1 = 0; return endif
+
+  # indices of legal pivot points (identifies trivial null space).
+  abm = max(abs([A,v]')); nzidx = find(abm != 0); zidx = find(abm == 0);
 
-  if(norm(v) == 0)
-    U = [];
-    H = [];
-    k1 = 0;
-    return
+  # check permutation flag
+  if(pflg)
+    # permute zero rows of [A,v] to trailing rows
+    permvec = [vec(nzidx); vec(zidx)];
+    pmat = eye(na); pmat = pmat(permvec,:);
+    ipermvec = pmat'*vec(1:na);
+    A = A(permvec,permvec);
+    v = v(permvec);
   endif
 
   k1 = k+1;		# Assume subspace basis has full rank
   [m,n] = size(A);
   [hv,alpha(1),z] = housh(v,1,0);
 
   # initial orthogonal vector
   q = zeros(n,1);
@@ -122,9 +138,20 @@ function [U,H,k1] = krylov(A,v,k,eps1);
   for i=j1:-1:1;
    hv = U(i:n,i);
    av = alpha(i);
    U(:,i) = zeros(n,1);
    U(i,i) = 1;
    U(i:n,i:j1) = U(i:n,i:j1)-av*hv*(hv'*U(i:n,i:j1));
   endfor
 
+  # check permutation flag
+  if(pflg)
+    # permute rows of U back to original coordinates
+    U = U(ipermvec,:);
+  endif
+
+  # check for spurious nonzero entries
+  if( max(max( abs(U(zidx,:)) )) > eps1 )
+    warning("krylov: trivial null space corrupted; set pflg=1 or eps1>%e",eps1);
+  endif
+
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,38 @@
+Wed Dec  2 22:38:40 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* utils.cc (file_in_loadpath): Expect argc == 2, not 3.
+
+Tue Nov 24 23:38:19 1998  Eric Norum <eric@skatter.USask.Ca>
+
+	* mkbuiltins: Also strip off leading `./' from file names.
+	* mkops: Ditto.
+
+Tue Nov 24 23:24:26 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* strftime.c: Surround everything with #ifdef HAVE_STRFTIME / #endif.
+
+	* lex.h (YY_FATAL_ERROR): Call yy_falta_error after
+	jump_to_top_level to avoid gcc warning.
+
+Fri Nov 20 13:34:47 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-bool.h, ov-bool.cc (class octave_bool): Derive from
+	octave_base_scalar and get common functions via derivation.
+	* ov-scalar.h, ov-scalar.cc (class octave_scalar): Ditto.
+	* ov-complex.h, ov-complex.cc (class octave_complex): Ditto.
+
+	* ov-base-scalar.h, ov-base-scalar.cc (class octave_base_scalar):
+	New files for new class definition.  Put common scalar data type
+	stuff here.
+	* Makefile.in (OV_INCLUDES, OV_SRC): Add them to the lists.
+
 Thu Nov 19 14:30:25 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
-
+	
 	* dynamic-ld.cc (octave_dynamic_loader::mangle_name):
 	Prepend underscore here.
 	(octave_dynamic_loader::load_fcn_from_dot_oct_file): Not here.
 
 	* ov-re-mat.h (octave_matrix_value): Delete experimental code for
 	handling structure references for things like .rows, .cols, etc.
 
 Wed Nov 18 01:18:46 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -28,25 +28,28 @@ Software Foundation, 59 Temple Place - S
 #ifdef YY_INPUT
 #undef YY_INPUT
 #endif
 #define YY_INPUT(buf, result, max_size) \
   if ((result = octave_read (buf, max_size)) < 0) \
     YY_FATAL_ERROR ("octave_read () in flex scanner failed");
 
 // Try to avoid crashing out completely on fatal scanner errors.
+// The call to yy_fatal_error should never happen, but it avoids a
+// `static function defined but not used' warning from gcc.
 
 #ifdef YY_FATAL_ERROR
 #undef YY_FATAL_ERROR
 #endif
 #define YY_FATAL_ERROR(msg) \
   do \
     { \
       error (msg); \
       jump_to_top_level (); \
+      yy_fatal_error (msg); \
     } \
   while (0)
 
 #define TOK_RETURN(tok) \
   do \
     { \
       current_input_column += yyleng; \
       lexer_flags.quote_is_transpose = false; \
diff --git a/src/mkbuiltins b/src/mkbuiltins
--- a/src/mkbuiltins
+++ b/src/mkbuiltins
@@ -27,52 +27,52 @@ cat << \EOF
 
 #include "defun.h"
 #include "oct-obj.h"
 #include "variables.h"
 
 EOF
 
 for file in $DEF_FILES; do
-  fcn=`echo $file | sed 's/\.df//; s/-/_/g'`
+  fcn=`echo $file | sed 's,^\./,,; s/\.df//; s/-/_/g'`
   echo "static void"
   echo "install_${fcn}_fcns (void)"
   echo "{"
   cat $file
   echo "}"
   echo ""
 done
 
 for file in $VAR_FILES; do
-  f=`echo $file | sed 's/-/_/g'`
+  f=`echo $file | sed 's,^\./,,; s/-/_/g'`
   echo "extern void symbols_of_${f} (void);"
 done
 
 cat << \EOF
 
 static void
 install_builtin_variables (void)
 {
 EOF
 
 for file in $VAR_FILES; do
-  f=`echo $file | sed 's/-/_/g'`
+  f=`echo $file | sed 's,^\./,,; s/-/_/g'`
   echo "  symbols_of_${f} ();"
 done
 
 cat << \EOF
 }
 
 static void
 install_builtin_functions (void)
 {
 EOF
 
 for file in $DEF_FILES; do
-  fcn=`echo $file | sed 's/\.df//; s/-/_/g'`
+  fcn=`echo $file | sed 's,^\./,,; s/\.df//; s/-/_/g'`
   echo "  install_${fcn}_fcns ();"
 done
 
 cat << \EOF
 }
 
 extern void install_mapper_functions (void);
 
diff --git a/src/mkops b/src/mkops
--- a/src/mkops
+++ b/src/mkops
@@ -7,31 +7,31 @@ cat << \EOF
 #include "config.h"
 #endif
 
 extern void install_base_type_conversions (void);
 
 EOF
 
 for file in "$@"; do
-  f=`echo $file | sed 's%^OPERATORS/op-%%; s%\.cc%%; s%-%_%g'`
+  f=`echo $file | sed 's,^\./,,; s%^OPERATORS/op-%%; s%\.cc%%; s%-%_%g'`
   echo "extern void install_${f}_ops (void);"
 done
 
 cat << \EOF
 
 void
 install_ops (void)
 {
   install_base_type_conversions ();
 
 EOF
 
 for file in "$@"; do
-  f=`echo $file | sed 's%^OPERATORS/op-%%; s%\.cc%%; s%-%_%g'`
+  f=`echo $file | sed 's,^\./,,; s%^OPERATORS/op-%%; s%\.cc%%; s%-%_%g'`
   echo "  install_${f}_ops ();"
 done
 
 cat << \EOF
 }
 EOF
 
 exit 0
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -54,16 +54,19 @@ octave_bool_matrix : public octave_base_
 public:
 
   octave_bool_matrix (void)
     : octave_base_matrix<boolMatrix> () { }
 
   octave_bool_matrix (const boolMatrix& bm)
     : octave_base_matrix<boolMatrix> (bm) { }
 
+  octave_bool_matrix (const Array2<bool>& a)
+    : octave_base_matrix<boolMatrix> (a) { }
+
   octave_bool_matrix (const octave_bool_matrix& bm)
     : octave_base_matrix<boolMatrix> (bm) { }
 
   ~octave_bool_matrix (void) { }
 
   octave_value *clone (void) { return new octave_bool_matrix (*this); }
 
   type_conv_fcn numeric_conversion_function (void) const;
diff --git a/src/strftime.c b/src/strftime.c
--- a/src/strftime.c
+++ b/src/strftime.c
@@ -16,16 +16,18 @@
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software Foundation,
    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
 
 #ifdef HAVE_CONFIG_H
 # include <config.h>
 #endif
 
+#ifndef HAVE_STRFTIME
+
 #ifdef _LIBC
 # define HAVE_LIMITS_H 1
 # define HAVE_MBLEN 1
 # define HAVE_MBRLEN 1
 # define HAVE_STRUCT_ERA_ENTRY 1
 # define HAVE_TM_GMTOFF 1
 # define HAVE_TM_ZONE 1
 # define MULTIBYTE_IS_FORMAT_SAFE 1
@@ -884,8 +886,10 @@ strftime (s, maxsize, format, tp)
 	  break;
 	}
     }
 
   if (p)
     *p = '\0';
   return i;
 }
+
+#endif
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -244,17 +244,17 @@ Look up NAME in LOADPATH.  See also file
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("file_in_loadpath");
 
   if (error_state)
     return retval;
 
-  if (argc == 3)
+  if (argc == 2)
     retval = octave_env::make_absolute (Vload_path_dir_path.find (argv[1]),
 					octave_env::getcwd ());
   else
     print_usage ("file_in_loadpath");
 
   return retval;
 }
 
diff --git a/src/version.h b/src/version.h
--- a/src/version.h
+++ b/src/version.h
@@ -18,17 +18,17 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_version_h)
 #define octave_version_h 1
 
-#define OCTAVE_VERSION "2.1.10"
+#define OCTAVE_VERSION "2.1.11"
 
 #define OCTAVE_COPYRIGHT \
   "Copyright (C) 1996, 1997, 1998 John W. Eaton."
 
 #define OCTAVE_NAME_AND_VERSION \
   "Octave, version " OCTAVE_VERSION " (" TARGET_HOST_TYPE ")"
 
 #define OCTAVE_NAME_VERSION_AND_COPYRIGHT \
