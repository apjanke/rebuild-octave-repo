# HG changeset patch
# User Rik <rik@octave.org>
# Date 1363025259 25200
#      Mon Mar 11 11:07:39 2013 -0700
# Node ID 4dc4da5970e53cb1a508fb4ad1b21c28177a5780
# Parent  98d8d1f4b7f8b4281909876189803d0850f73f45
doc: Clarify how indentation defines %!test blocks.

* doc/interpreter/testfun.txi: Clarify how indentation defines %!test blocks.

diff --git a/doc/interpreter/testfun.txi b/doc/interpreter/testfun.txi
--- a/doc/interpreter/testfun.txi
+++ b/doc/interpreter/testfun.txi
@@ -36,18 +36,22 @@ and demonstration code in the source cod
 
 @code{test} scans the named script file looking for lines which start
 with the identifier @samp{%!}.  The prefix is stripped off and the rest
 of the line is processed through the Octave interpreter.  If the code
 generates an error, then the test is said to fail.
 
 Since @code{eval()} will stop at the first error it encounters, you must
 divide your tests up into blocks, with anything in a separate
-block evaluated separately.  Blocks are introduced by the keyword
-@code{test} immediately following @samp{%!}.  For example:
+block evaluated separately.  Blocks are introduced by valid keywords like
+@code{test}, @code{function}, or @code{assert} immediately following @samp{%!}.
+A block is defined by indentation as in Python.  Lines beginning with
+@samp{%!<whitespace>} are part of the preceeding block.
+ 
+For example:
 
 @example
 @group
 %!test error ("this test fails!");
 %!test "test doesn't fail. it doesn't generate an error";
 @end group
 @end example
 
@@ -192,16 +196,34 @@ You can also share test functions:
 %!endfunction
 %!assert (fn(2), 4);
 @end group
 @end example
 
 Note that all previous variables and values are lost when a new 
 shared block is declared.
 
+Remember that @code{%!function} begins a new block and that 
+@code{%!endfunction} ends this block.  Be aware that until a new block
+is started, lines starting with @samp{%!<space>} will be discarded as comments.
+The following is nearly identical to the example above, but does nothing.
+
+@example
+@group
+%!function @var{a} = fn (@var{b})
+%!  @var{a} = 2*@var{b};
+%!endfunction
+%! assert (fn(2), 4);
+@end group
+@end example
+
+@noindent
+Because there is a space after @samp{%!} the @code{assert} statement does
+not begin a new block and this line is treated as a comment.
+
 Error and warning blocks are like test blocks, but they only succeed 
 if the code generates an error.  You can check the text of the error
 is correct using an optional regular expression @code{<pattern>}.  
 For example:
 
 @example
 %!error <passes!> error ("this test passes!");
 @end example
