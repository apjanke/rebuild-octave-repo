# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1464822123 14400
#      Wed Jun 01 19:02:03 2016 -0400
# Node ID 0b5fd19477fd55ae5abe73193ea164be2ddf87e7
# Parent  2ba69be3f3e8d8d6bb2691d7f0e1d4bcacaaabb8
when parsing function, check variable status in new function scope (bug #48031)

* lex.h, lex.ll (octave_base_lexer::is_variable): New argument,
scope.  Pass scope to symbol_table::is_variable.
(octave_base_lexer::handle_identifier): Pass scope id of function that
is being parsed to is_variable.

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -573,17 +573,17 @@ public:
   void xunput (char c, char *buf);
 
   void xunput (char c);
 
   bool looking_at_space (void);
 
   bool inside_any_object_index (void);
 
-  bool is_variable (const std::string& name);
+  bool is_variable (const std::string& name, symbol_table::scope_id scope);
 
   int is_keyword_token (const std::string& s);
 
   bool fq_identifier_contains_keyword (const std::string& s);
 
   bool whitespace_is_significant (void);
 
   void handle_number (void);
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -2471,19 +2471,20 @@ octave_base_lexer::inside_any_object_ind
           break;
         }
     }
 
   return retval;
 }
 
 bool
-octave_base_lexer::is_variable (const std::string& name)
+octave_base_lexer::is_variable (const std::string& name,
+                               symbol_table::scope_id scope)
 {
-  return (symbol_table::is_variable (name)
+  return (symbol_table::is_variable (name, scope)
           || (pending_local_variables.find (name)
               != pending_local_variables.end ()));
 }
 
 // Handle keywords.  Return -1 if the keyword should be ignored.
 
 int
 octave_base_lexer::is_keyword_token (const std::string& s)
@@ -3104,17 +3105,17 @@ octave_base_lexer::handle_identifier (vo
   // The following symbols are handled specially so that things like
   //
   //   pi +1
   //
   // are parsed as an addition expression instead of as a command-style
   // function call with the argument "+1".
 
   if (at_beginning_of_statement
-      && (! (is_variable (ident)
+      && (! (is_variable (ident, sid)
              || ident == "e" || ident == "pi"
              || ident == "I" || ident == "i"
              || ident == "J" || ident == "j"
              || ident == "Inf" || ident == "inf"
              || ident == "NaN" || ident == "nan")))
     tok->mark_may_be_command ();
 
   push_token (tok);
