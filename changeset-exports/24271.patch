# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1510927931 18000
#      Fri Nov 17 09:12:11 2017 -0500
# Node ID 0dd6c909baa2add9dc9ee2a621ff214bc1229278
# Parent  bc3819b7cca197d16e960aaa9c01df70cef67f23
use shared_ptr and weak_ptr to manage symbol_record object

* symrec.h, symrec.cc (symbol_record::symbol_record_rep::count):
Delete data member and all uses.
(symbol_record::symbol_record_rep::m_fwd_rep): Manage with weak_ptr.
(symbol_record::rep): Manage with shared_ptr.

diff --git a/libinterp/corefcn/symrec.cc b/libinterp/corefcn/symrec.cc
--- a/libinterp/corefcn/symrec.cc
+++ b/libinterp/corefcn/symrec.cc
@@ -45,19 +45,19 @@ namespace octave
   symbol_record::symbol_record_rep::get_decl_scope_context (void) const
   {
     return m_decl_scope ? m_decl_scope->current_context () : 0;
   }
 
   void
   symbol_record::symbol_record_rep::clear (symbol_scope *sid)
   {
-    if (m_fwd_rep)
+    if (auto t_fwd_rep = m_fwd_rep.lock ())
       {
-        m_fwd_rep->clear (sid);
+        t_fwd_rep->clear (sid);
         return;
       }
 
     if (! (is_hidden () || is_inherited ())
         && sid == decl_scope ())
       {
         if (is_global ())
           unmark_global ();
@@ -71,19 +71,19 @@ namespace octave
 
         assign (octave_value ());
       }
   }
 
   void
   symbol_record::symbol_record_rep::init_persistent (void)
   {
-    if (m_fwd_rep)
+    if (auto t_fwd_rep = m_fwd_rep.lock ())
       {
-        m_fwd_rep->init_persistent ();
+        t_fwd_rep->init_persistent ();
         return;
       }
 
     symbol_scope *curr_scope
       = __require_current_scope__ ("symbol_record::symbol_record_rep::init_persistent");
 
     if (! is_defined ())
       {
@@ -94,45 +94,45 @@ namespace octave
     // FIXME: this causes trouble with recursive calls.
     // else
     //   error ("unable to declare existing variable persistent");
   }
 
   void
   symbol_record::symbol_record_rep::erase_persistent (void)
   {
-    if (m_fwd_rep)
+    if (auto t_fwd_rep = m_fwd_rep.lock ())
       {
-        m_fwd_rep->erase_persistent ();
+        t_fwd_rep->erase_persistent ();
         return;
       }
 
     unmark_persistent ();
 
     symbol_scope *curr_scope
       = __require_current_scope__ ("symbol_record::symbol_record_rep::erase_persistent");
 
     curr_scope->erase_persistent (name);
   }
 
   symbol_record::symbol_record_rep *
   symbol_record::symbol_record_rep::dup (symbol_scope *new_scope) const
   {
     // FIXME: is this the right thing do to?
-    if (m_fwd_rep)
-      return m_fwd_rep->dup (new_scope);
+    if (auto t_fwd_rep = m_fwd_rep.lock ())
+      return t_fwd_rep->dup (new_scope);
 
     return new symbol_record_rep (new_scope, name, varval (), storage_class);
   }
 
   octave_value
   symbol_record::symbol_record_rep::dump (void) const
   {
-    if (m_fwd_rep)
-      return m_fwd_rep->dump ();
+    if (auto t_fwd_rep = m_fwd_rep.lock ())
+      return t_fwd_rep->dump ();
 
     std::map<std::string, octave_value> m
       = {{ "name", name },
          { "local", is_local () },
          { "automatic", is_automatic () },
          { "formal", is_formal () },
          { "hidden", is_hidden () },
          { "inherited", is_inherited () },
@@ -145,55 +145,55 @@ namespace octave
       m["value"] = val;
 
     return octave_value (m);
   }
 
   octave_value&
   symbol_record::symbol_record_rep::xglobal_varref (void)
   {
-    if (m_fwd_rep)
-      return m_fwd_rep->xglobal_varref ();
+    if (auto t_fwd_rep = m_fwd_rep.lock ())
+      return t_fwd_rep->xglobal_varref ();
 
     symbol_table& symtab
       = __get_symbol_table__ ("symbol_record::symbol_record_rep::xglobal_varref");
 
     return symtab.global_varref (name);
   }
 
   octave_value&
   symbol_record::symbol_record_rep::xpersistent_varref (void)
   {
-    if (m_fwd_rep)
-      return m_fwd_rep->xpersistent_varref ();
+    if (auto t_fwd_rep = m_fwd_rep.lock ())
+      return t_fwd_rep->xpersistent_varref ();
 
     symbol_scope *curr_scope
       = __get_current_scope__ ("symbol_record::symbol_record_rep::xpersistent_varref");
 
     return (curr_scope
             ? curr_scope->persistent_varref (name) : dummy_octave_value);
   }
 
   octave_value
   symbol_record::symbol_record_rep::xglobal_varval (void) const
   {
-    if (m_fwd_rep)
-      return m_fwd_rep->xglobal_varval ();
+    if (auto t_fwd_rep = m_fwd_rep.lock ())
+      return t_fwd_rep->xglobal_varval ();
 
     symbol_table& symtab
       = __get_symbol_table__ ("symbol_record::symbol_record_rep::xglobal_varval");
 
     return symtab.global_varval (name);
   }
 
   octave_value
   symbol_record::symbol_record_rep::xpersistent_varval (void) const
   {
-    if (m_fwd_rep)
-      return m_fwd_rep->xpersistent_varval ();
+    if (auto t_fwd_rep = m_fwd_rep.lock ())
+      return t_fwd_rep->xpersistent_varval ();
 
     symbol_scope *curr_scope
       = __get_current_scope__ ("symbol_record::symbol_record_rep::xpersistent_varval");
 
     return curr_scope ? curr_scope->persistent_varval (name) : octave_value ();
   }
 
   symbol_record::symbol_record (void)
diff --git a/libinterp/corefcn/symrec.h b/libinterp/corefcn/symrec.h
--- a/libinterp/corefcn/symrec.h
+++ b/libinterp/corefcn/symrec.h
@@ -23,20 +23,19 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_symrec_h)
 #define octave_symrec_h 1
 
 #include "octave-config.h"
 
 #include <deque>
 #include <list>
+#include <memory>
 #include <string>
 
-#include "oct-refcount.h"
-
 class octave_user_function;
 
 #include "ov.h"
 #include "ovl.h"
 
 namespace octave
 {
   class fcn_info;
@@ -78,96 +77,96 @@ namespace octave
 
     class symbol_record_rep
     {
     public:
 
       symbol_record_rep (symbol_scope *s, const std::string& nm,
                          const octave_value& v, unsigned int sc)
         : m_decl_scope (s), curr_fcn (nullptr), name (nm),
-          m_fwd_rep (nullptr), value_stack (),
-          storage_class (sc), /* finfo (), */ valid (true), count (1)
+          m_fwd_rep (), value_stack (),
+          storage_class (sc), /* finfo (), */ valid (true)
       {
         value_stack.push_back (v);
       }
 
       // No copying!
 
       symbol_record_rep (const symbol_record_rep& ov) = delete;
 
       symbol_record_rep& operator = (const symbol_record_rep&) = delete;
 
       ~symbol_record_rep (void) = default;
 
       void assign (const octave_value& value)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->assign (value);
+            t_fwd_rep->assign (value);
             return;
           }
 
         varref () = value;
       }
 
       void assign (octave_value::assign_op op,
                    const std::string& type,
                    const std::list<octave_value_list>& idx,
                    const octave_value& value)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->assign (op, type, idx, value);
+            t_fwd_rep->assign (op, type, idx, value);
             return;
           }
 
         varref().assign (op, type, idx, value);
       }
 
       void assign (octave_value::assign_op op, const octave_value& value)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->assign (op, value);
+            t_fwd_rep->assign (op, value);
             return;
           }
 
         varref().assign (op, value);
       }
 
       void do_non_const_unary_op (octave_value::unary_op op)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->do_non_const_unary_op (op);
+            t_fwd_rep->do_non_const_unary_op (op);
             return;
           }
 
         varref().do_non_const_unary_op (op);
       }
 
       void do_non_const_unary_op (octave_value::unary_op op,
                                   const std::string& type,
                                   const std::list<octave_value_list>& idx)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->do_non_const_unary_op (op, type, idx);
+            t_fwd_rep->do_non_const_unary_op (op, type, idx);
             return;
           }
 
         varref().do_non_const_unary_op (op, type, idx);
       }
 
       context_id get_decl_scope_context (void) const;
 
       octave_value& varref (void)
       {
-        if (m_fwd_rep)
-          return m_fwd_rep->varref ();
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
+          return t_fwd_rep->varref ();
 
         context_id context = m_decl_scope ? get_decl_scope_context () : 0;
 
         if (is_global ())
           return xglobal_varref ();
         else if (is_persistent ())
           return xpersistent_varref ();
         else
@@ -177,18 +176,18 @@ namespace octave
               value_stack.push_back (octave_value ());
 
             return value_stack[context];
           }
       }
 
       octave_value varval (void) const
       {
-        if (m_fwd_rep)
-          return m_fwd_rep->varval ();
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
+          return t_fwd_rep->varval ();
 
         context_id context = m_decl_scope ? get_decl_scope_context () : 0;
 
         if (is_global ())
           return xglobal_varval ();
         else if (is_persistent ())
           return xpersistent_varval ();
         else
@@ -197,19 +196,19 @@ namespace octave
               return value_stack[context];
             else
               return octave_value ();
           }
       }
 
       void push_context (symbol_scope *sid)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->push_context (sid);
+            t_fwd_rep->push_context (sid);
             return;
           }
 
         if (! (is_persistent () || is_global ())
             && sid == decl_scope ())
           value_stack.push_back (octave_value ());
       }
 
@@ -224,377 +223,378 @@ namespace octave
       //       eval ("x = 1");
       //     endif
       //   endfunction
       //
       // Here, X should only exist in the final stack frame.
 
       size_t pop_context (symbol_scope *sid)
       {
-        if (m_fwd_rep)
-          return m_fwd_rep->pop_context (sid);
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
+          return t_fwd_rep->pop_context (sid);
 
         size_t retval = 1;
 
         if (! (is_persistent () || is_global ())
             && sid == decl_scope ())
           {
             value_stack.pop_back ();
             retval = value_stack.size ();
           }
 
         return retval;
       }
 
       void clear (void)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->clear ();
+            t_fwd_rep->clear ();
             return;
           }
 
         clear (decl_scope ());
       }
 
       void clear (symbol_scope *sid);
 
       bool is_defined (void) const
       {
-        if (m_fwd_rep)
-          return m_fwd_rep->is_defined ();
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
+          return t_fwd_rep->is_defined ();
 
         return varval ().is_defined ();
       }
 
       bool is_valid (void) const
       {
-        if (m_fwd_rep)
-          return m_fwd_rep->is_valid ();
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
+          return t_fwd_rep->is_valid ();
 
         return valid;
       }
 
       bool is_variable (void) const
       {
-        if (m_fwd_rep)
-          return m_fwd_rep->is_variable ();
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
+          return t_fwd_rep->is_variable ();
 
         return (! is_local () || is_defined ());
       }
 
       bool is_local (void) const
       {
-        if (m_fwd_rep)
-          return m_fwd_rep->is_local ();
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
+          return t_fwd_rep->is_local ();
 
         return storage_class & local;
       }
 
       bool is_automatic (void) const
       {
-        if (m_fwd_rep)
-          return m_fwd_rep->is_automatic ();
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
+          return t_fwd_rep->is_automatic ();
 
         return storage_class & automatic;
       }
 
       bool is_formal (void) const
       {
-        if (m_fwd_rep)
-          return m_fwd_rep->is_formal ();
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
+          return t_fwd_rep->is_formal ();
 
         return storage_class & formal;
       }
 
       bool is_hidden (void) const
       {
-        if (m_fwd_rep)
-          return m_fwd_rep->is_hidden ();
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
+          return t_fwd_rep->is_hidden ();
 
         return storage_class & hidden;
       }
 
       bool is_inherited (void) const
       {
-        if (m_fwd_rep)
-          return m_fwd_rep->is_inherited ();
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
+          return t_fwd_rep->is_inherited ();
 
         return storage_class & inherited;
       }
 
       bool is_global (void) const
       {
-        if (m_fwd_rep)
-          return m_fwd_rep->is_global ();
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
+          return t_fwd_rep->is_global ();
 
         return storage_class & global;
       }
 
       bool is_persistent (void) const
       {
-        if (m_fwd_rep)
-          return m_fwd_rep->is_persistent ();
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
+          return t_fwd_rep->is_persistent ();
 
         return storage_class & persistent;
       }
 
       bool is_added_static (void) const
       {
-        if (m_fwd_rep)
-          return m_fwd_rep->is_added_static ();
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
+          return t_fwd_rep->is_added_static ();
 
         return storage_class & added_static;
       }
 
       void mark_local (void)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->mark_local ();
+            t_fwd_rep->mark_local ();
             return;
           }
 
         storage_class |= local;
       }
 
       void mark_automatic (void)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->mark_automatic ();
+            t_fwd_rep->mark_automatic ();
             return;
           }
 
         storage_class |= automatic;
       }
 
       void mark_formal (void)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->mark_formal ();
+            t_fwd_rep->mark_formal ();
             return;
           }
 
         storage_class |= formal;
       }
 
       void mark_hidden (void)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->mark_hidden ();
+            t_fwd_rep->mark_hidden ();
             return;
           }
 
         storage_class |= hidden;
       }
 
       void mark_inherited (void)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->mark_inherited ();
+            t_fwd_rep->mark_inherited ();
             return;
           }
 
         storage_class |= inherited;
       }
 
       void mark_global (void)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->mark_global ();
+            t_fwd_rep->mark_global ();
             return;
           }
 
         if (is_persistent ())
           error ("can't make persistent variable %s global", name.c_str ());
 
         storage_class |= global;
       }
 
       void mark_persistent (void)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->mark_persistent ();
+            t_fwd_rep->mark_persistent ();
             return;
           }
 
         if (is_global ())
           error ("can't make global variable %s persistent", name.c_str ());
 
         storage_class |= persistent;
       }
 
       void mark_added_static (void)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->mark_added_static ();
+            t_fwd_rep->mark_added_static ();
             return;
           }
 
         storage_class |= added_static;
       }
 
       void unmark_local (void)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->unmark_local ();
+            t_fwd_rep->unmark_local ();
             return;
           }
 
         storage_class &= ~local;
       }
 
       void unmark_automatic (void)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->unmark_automatic ();
+            t_fwd_rep->unmark_automatic ();
             return;
           }
 
         storage_class &= ~automatic;
       }
 
       void unmark_formal (void)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->unmark_formal ();
+            t_fwd_rep->unmark_formal ();
             return;
           }
 
         storage_class &= ~formal;
       }
 
       void unmark_hidden (void)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->unmark_hidden ();
+            t_fwd_rep->unmark_hidden ();
             return;
           }
 
         storage_class &= ~hidden;
       }
 
       void unmark_inherited (void)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->unmark_inherited ();
+            t_fwd_rep->unmark_inherited ();
             return;
           }
 
         storage_class &= ~inherited;
       }
 
       void unmark_global (void)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->unmark_global ();
+            t_fwd_rep->unmark_global ();
             return;
           }
 
         storage_class &= ~global;
       }
 
       void unmark_persistent (void)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->unmark_persistent ();
+            t_fwd_rep->unmark_persistent ();
             return;
           }
 
         storage_class &= ~persistent;
       }
 
       void unmark_added_static (void)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->unmark_added_static ();
+            t_fwd_rep->unmark_added_static ();
             return;
           }
 
         storage_class &= ~added_static;
       }
 
       void init_persistent (void);
 
       void invalidate (void)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->invalidate ();
+            t_fwd_rep->invalidate ();
             return;
           }
 
         valid = false;
       }
 
       void erase_persistent (void);
 
       symbol_scope *decl_scope (void)
       {
-        if (m_fwd_rep)
-          return m_fwd_rep->decl_scope ();
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
+          return t_fwd_rep->decl_scope ();
 
         return m_decl_scope;
       }
 
       void set_curr_fcn (octave_user_function *fcn)
       {
-        if (m_fwd_rep)
+        if (auto t_fwd_rep = m_fwd_rep.lock ())
           {
-            m_fwd_rep->set_curr_fcn (fcn);
+            t_fwd_rep->set_curr_fcn (fcn);
             return;
           }
 
         curr_fcn = fcn;
       }
 
       // We don't forward more than once, so no need to forward the
       // next two.
 
-      void bind_fwd_rep (symbol_record_rep *fwd_rep) { m_fwd_rep = fwd_rep; }
+      void bind_fwd_rep (const std::shared_ptr<symbol_record_rep>& fwd_rep)
+      {
+        m_fwd_rep = fwd_rep;
+      }
 
-      void unbind_fwd_rep (void) { m_fwd_rep = nullptr; }
+      void unbind_fwd_rep (void) { m_fwd_rep.reset (); }
 
       symbol_record_rep * dup (symbol_scope *new_scope) const;
 
       octave_value dump (void) const;
 
       symbol_scope *m_decl_scope;
 
       octave_user_function *curr_fcn;
 
       std::string name;
 
-      symbol_record_rep *m_fwd_rep;
+      std::weak_ptr<symbol_record_rep> m_fwd_rep;
 
       std::deque<octave_value> value_stack;
 
       unsigned int storage_class;
 
       //      fcn_info *finfo;
 
       bool valid;
 
-      refcount<size_t> count;
-
     private:
 
       octave_value& xglobal_varref (void);
 
       octave_value& xpersistent_varref (void);
 
       octave_value xglobal_varval (void) const;
 
@@ -605,41 +605,21 @@ namespace octave
 
     symbol_record (void);
 
     symbol_record (symbol_scope *s, const std::string& nm = "",
                    const octave_value& v = octave_value (),
                    unsigned int sc = local)
       : rep (new symbol_record_rep (s, nm, v, sc)) { }
 
-    symbol_record (const symbol_record& sr)
-      : rep (sr.rep)
-    {
-      rep->count++;
-    }
-
-    symbol_record& operator = (const symbol_record& sr)
-    {
-      if (this != &sr)
-        {
-          if (--rep->count == 0)
-            delete rep;
+    symbol_record (const symbol_record& sr) = default;
 
-          rep = sr.rep;
-          rep->count++;
-        }
+    symbol_record& operator = (const symbol_record& sr) = default;
 
-      return *this;
-    }
-
-    ~symbol_record (void)
-    {
-      if (--rep->count == 0)
-        delete rep;
-    }
+    ~symbol_record (void) = default;
 
     symbol_record dup (symbol_scope *sid) const
     {
       return symbol_record (rep->dup (sid));
     }
 
     const std::string& name (void) const { return rep->name; }
 
@@ -763,21 +743,21 @@ namespace octave
     {
       rep->bind_fwd_rep (sr.rep);
     }
 
     void unbind_fwd_rep (void) { rep->unbind_fwd_rep (); }
 
     octave_value dump (void) const { return rep->dump (); }
 
-    const symbol_record_rep *xrep (void) const { return rep; }
+    //    const symbol_record_rep *xrep (void) const { return rep; }
 
   private:
 
     static octave_value dummy_octave_value;
 
-    symbol_record_rep *rep;
+    std::shared_ptr<symbol_record_rep> rep;
 
     symbol_record (symbol_record_rep *new_rep) : rep (new_rep) { }
   };
 }
 
 #endif
