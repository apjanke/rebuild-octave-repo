# HG changeset patch
# User jwe
# Date 1196363249 0
#      Thu Nov 29 19:07:29 2007 +0000
# Node ID 5389a52df87b9ec9a7bfe598bb0d03ff93a1b4db
# Parent  dd88d61d443f5e895b708964160ea44ad149c6a5
[project @ 2007-11-29 19:07:29 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,20 @@
+2007-11-29  John W. Eaton  <jwe@octave.org>
+
+	* plot/contour.m, plot/contour3.m, plot/fill.m, plot/patch.m,
+	plot/surf.m, plot/surface.m: Don't return handle value unless
+	requested.
+
+	* plot/patch.m: Omit isnan check on handle returned from
+	__plt_get_axis_arg__.
+
+	* plot/__plt_get_axis_arg__.m: Don't fail if current figure exists
+	but has no axes.
+
 2007-11-28  David Bateman  <dbateman@free.fr>
 
 	* __plt_get_axis_handle__.m: Also allow hggroup and return axes
 	ancestor. If leading argument is logical set variable nogca to see
 	if gca() should be called if there is no active handle found.
 	* __bar__.m, caxis.m, scatter.m, contourf.m, __axes_limits__.m,
 	fill.m,  surf.m, meshz.m, axis.m, pie.m, contour.m,
 	quiver.m, area.m, grid.m, cylinder.m, contour3.m, surface.m,
diff --git a/scripts/plot/__axes_limits__.m b/scripts/plot/__axes_limits__.m
--- a/scripts/plot/__axes_limits__.m
+++ b/scripts/plot/__axes_limits__.m
@@ -14,18 +14,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## Undocumented internal function.
 
 function retval = __axes_limits__ (fcn, varargin)
+
   retval = [];
-  fcnmode = sprintf("%smode", fcn);
+
+  fcnmode = sprintf ("%smode", fcn);
 
   [h, varargin, nargin] = __plt_get_axis_arg__ (fcn, varargin{:});
 
   if (nargin == 0)
     retval = get (h, fcn);
   else
     arg = varargin{1};
 
@@ -40,9 +42,10 @@ function retval = __axes_limits__ (fcn, 
     else
       if (!isnumeric (arg) && any (size(arg(:)) != [2, 1]))
 	error ("%s: argument must be a 2 element vector", fcn);
       else
 	set (h, fcn, arg (:));
       endif
     endif
   endif
+
 endfunction
diff --git a/scripts/plot/__plt_get_axis_arg__.m b/scripts/plot/__plt_get_axis_arg__.m
--- a/scripts/plot/__plt_get_axis_arg__.m
+++ b/scripts/plot/__plt_get_axis_arg__.m
@@ -39,22 +39,27 @@ function [h, varargin, narg] = __plt_get
       if (isempty (varargin))
 	varargin = {};
       endif
     else
       error ("%s: expecting first argument to be axes handle", caller);
     endif
   else
     f = get (0, "currentfigure");
-    if (! isempty (f))
+    if (isempty (f))
+      h = [];
+    else
       h = get (f, 'currentaxes');
-    elseif (nogca)
-      h = NaN;
-    else
-      h = gca ();
+    endif
+    if (isempty (h))
+      if (nogca)
+	h = NaN;
+      else
+	h = gca ();
+      endif
     endif
     if (nargin < 2)
       varargin = {};
     endif
   endif
 
   narg = length (varargin);
 
diff --git a/scripts/plot/axis.m b/scripts/plot/axis.m
--- a/scripts/plot/axis.m
+++ b/scripts/plot/axis.m
@@ -114,16 +114,17 @@
 
 ## Author: jwe
 
 ## PKG_ADD: mark_as_command axis
 
 function varargout = axis (varargin)
 
   [h, varargin, nargin] = __plt_get_axis_arg__ ("axis", varargin{:});
+
   oldh = gca ();
   unwind_protect
     axes (h);
     varargout = cell (max (nargin == 0, nargout), 1);
     if (isempty (varargout))
       __axis__ (h, varargin{:});
     else
       [varargout{:}] = __axis__ (h, varargin{:});
diff --git a/scripts/plot/caxis.m b/scripts/plot/caxis.m
--- a/scripts/plot/caxis.m
+++ b/scripts/plot/caxis.m
@@ -35,16 +35,17 @@
 ## this axes rather than the current axes.
 ## @end deftypefn
 
 ## PKG_ADD: mark_as_command caxis
 
 function varargout = caxis (varargin)
 
   [h, varargin, nargin] = __plt_get_axis_arg__ ("caxis", varargin{:});
+
   oldh = gca ();
   unwind_protect
     axes (h);
     varargout = cell (max (nargin == 0, nargout), 1);
     if (isempty (varargout))
       __caxis__ (h, varargin{:});
     else
       [varargout{:}] = __caxis__ (h, varargin{:});
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -44,22 +44,23 @@
 ## returned.
 ## @seealso{contourc, patch, plot}
 ## @end deftypefn
 
 ## Author: shaia
 
 function [c, h] = contour (varargin)
 
-  [h, varargin] = __plt_get_axis_arg__ ("contour", varargin{:});
+  [xh, varargin] = __plt_get_axis_arg__ ("contour", varargin{:});
+
   oldh = gca ();
   unwind_protect
-    axes (h);
+    axes (xh);
     newplot ();
-    [ctmp, htmp] = __contour__ (h, NaN, varargin{:});
+    [ctmp, htmp] = __contour__ (xh, NaN, varargin{:});
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
 
   if (nargout > 0)
     c = ctmp;
     h = htmp;
   endif
diff --git a/scripts/plot/contour3.m b/scripts/plot/contour3.m
--- a/scripts/plot/contour3.m
+++ b/scripts/plot/contour3.m
@@ -41,28 +41,29 @@
 ## The optional input and output argument @var{h} allows an axis handle to 
 ## be passed to @code{contour} and the handles to the contour objects to be
 ## returned.
 ## @seealso{contourc, patch, plot}
 ## @end deftypefn
 
 function [c, h] = contour3 (varargin)
 
-  [h, varargin, nargin] = __plt_get_axis_arg__ ("contour3", varargin{:});
+  [xh, varargin, nargin] = __plt_get_axis_arg__ ("contour3", varargin{:});
+
   oldh = gca ();
   unwind_protect
-    axes (h);
+    axes (xh);
     newplot ();
-    [ctmp, htmp] = __contour__ (h, "level", varargin{:});
+    [ctmp, htmp] = __contour__ (xh, "level", varargin{:});
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
 
   if (! ishold ())
-    set (h, "view", [-37.5, 30]);
+    set (xh, "view", [-37.5, 30]);
   endif
 
   if (nargout > 0)
     c = ctmp;
     h = htmp
   endif
 
 endfunction
diff --git a/scripts/plot/contourf.m b/scripts/plot/contourf.m
--- a/scripts/plot/contourf.m
+++ b/scripts/plot/contourf.m
@@ -55,18 +55,21 @@
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 ## Author: shaia
 
 function varargout = contourf (varargin)
 
   [ax, varargin] = __plt_get_axis_arg__ ("contourf", varargin{:});
+
   [X, Y, Z, lvl, patch_props] = parse_args (varargin);
+
   [nr, nc] = size (Z);
+
   [minx, maxx] = deal (min (X(:)), max (X(:)));
   [miny, maxy] = deal (min (Y(:)), max (Y(:)));
 
   if (diff (lvl) < 10*eps) 
     lvl_eps = 1e-6;
   else
     lvl_eps = min (diff (lvl)) / 1000.0;
   endif
diff --git a/scripts/plot/errorbar.m b/scripts/plot/errorbar.m
--- a/scripts/plot/errorbar.m
+++ b/scripts/plot/errorbar.m
@@ -106,16 +106,17 @@
 
 ## Created: 18.7.2000
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function errorbar (varargin)
 
   [h, varargin] = __plt_get_axis_arg__ ("errorbar", varargin{:});
+
   oldh = gca ();
   unwind_protect
     axes (h);
     newplot ();
     __errcomm__ ("errorbar", h, varargin{:});
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
diff --git a/scripts/plot/fill.m b/scripts/plot/fill.m
--- a/scripts/plot/fill.m
+++ b/scripts/plot/fill.m
@@ -20,21 +20,23 @@
 ## @deftypefn {Function File} {} fill (@var{x}, @var{y}, @var{c})
 ## @deftypefnx {Function File} {} fill (@var{x1}, @var{y1}, @var{c1}, @var{x2}, @var{y2}, @var{c2})
 ## @deftypefnx {Function File} {} fill (@dots{}, @var{prop}, @var{val})
 ## @deftypefnx {Function File} {} fill (@var{h}, @dots{})
 ## @deftypefnx {Function File} {@var{h} = } fill (@dots{})
 ## Create one or more filled patch objects, returning a patch object for each.
 ## @end deftypefn
 
-function h = fill (varargin)
+function retval = fill (varargin)
 
   [h, varargin] = __plt_get_axis_arg__ ("fill", varargin{:});
+
   htmp = [];
   iargs = __find_patches__ (varargin{:});
+
   oldh = gca ();
   unwind_protect
     axes (h);
 
     for i = 1 : length (iargs)
       if (i == length (iargs))
 	args = varargin (iargs(i):end);
       else
@@ -47,17 +49,17 @@ function h = fill (varargin)
       endif
       htmp (end + 1) = tmp;
     endfor
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
 
   if (nargout > 0)
-    h = htmp;
+    retval = htmp;
   endif
 
 endfunction
 
 function iargs = __find_patches__ (varargin)
   iargs = [];
   i = 1;
   while (i < nargin)
diff --git a/scripts/plot/grid.m b/scripts/plot/grid.m
--- a/scripts/plot/grid.m
+++ b/scripts/plot/grid.m
@@ -36,16 +36,17 @@
 ## PKG_ADD: mark_as_command grid
 
 function grid (varargin)
 
   persistent grid_on = false;
   persistent minor_on = false;
 
   [ax, varargin, nargs] = __plt_get_axis_arg__ ("grid", varargin{:});
+
   if (nargs > 1)
     print_usage ();
   elseif (nargs == 0)
     grid_on = ! grid_on;
   else
     x = varargin{1};
     if (ischar (x))
       if (strcmp ("off", x))
diff --git a/scripts/plot/loglog.m b/scripts/plot/loglog.m
--- a/scripts/plot/loglog.m
+++ b/scripts/plot/loglog.m
@@ -25,26 +25,26 @@
 ## @seealso{plot, semilogx, semilogy}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = loglog (varargin)
 
   [h, varargin] = __plt_get_axis_arg__ ("loglog", varargin{:});
+
   oldh = gca ();
   unwind_protect
     axes (h);
     newplot ();
 
     set (h, "xscale", "log", "yscale", "log");
 
     tmp = __plt__ ("loglog", h, varargin{:});
 
     if (nargout > 0)
       retval = tmp;
     endif
-
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
 
 endfunction
diff --git a/scripts/plot/loglogerr.m b/scripts/plot/loglogerr.m
--- a/scripts/plot/loglogerr.m
+++ b/scripts/plot/loglogerr.m
@@ -36,26 +36,26 @@
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function retval = loglogerr (varargin)
 
   [h, varargin] = __plt_get_axis_arg__ ("loglogerr", varargin{:});
+
   oldh = gca ();
   unwind_protect
     axes (h);
     newplot ();
 
     set (h, "xscale", "log", "yscale", "log");
 
     tmp = __errcomm__ ("loglogerr", h, varargin{:});
 
     if (nargout > 0)
       retval = tmp;
     endif
-
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
 
 endfunction
diff --git a/scripts/plot/meshz.m b/scripts/plot/meshz.m
--- a/scripts/plot/meshz.m
+++ b/scripts/plot/meshz.m
@@ -27,33 +27,33 @@
 ## @seealso{meshgrid, mesh, contour}
 ## @end deftypefn
  
 function retval = meshz (varargin)
 
   [h, varargin, nargin] = __plt_get_axis_arg__ ("meshz", varargin{:});
 
   ioff = nargin + 1;
-  for i = 1 : nargin
+  for i = 1:nargin
     if (ischar (varargin{i}))
       ioff = i;
       break;
     endif
   endfor
 
   ## Bundle C matrix back into varargin
   if (ioff == 3 || ioff == 5)
     ioff --;
   endif
 
   if (ioff == 2)
     z = varargin{1};
     [m, n] = size (z);
-    x = 1 : n;
-    y = (1 : m).';
+    x = 1:n;
+    y = (1:m).';
   else
     x = varargin{1};
     y = varargin{2};
     z = varargin{3};
   endif
 
 
   if (isvector (x) && isvector (y))
diff --git a/scripts/plot/patch.m b/scripts/plot/patch.m
--- a/scripts/plot/patch.m
+++ b/scripts/plot/patch.m
@@ -29,36 +29,35 @@
 ##
 ## For a uniform colored patch, @var{c} can be given as an RGB vector,
 ## scalar value referring to the current colormap, or string value (for
 ## example, "r" or "red"). 
 ## @end deftypefn
 
 ## Author: jwe
 
-function h = patch (varargin)
+function retval = patch (varargin)
 
   [h, varargin] = __plt_get_axis_arg__ ("patch", varargin{:});
+
   oldh = gca ();
-  if (isnan(h))
-    h = oldh;
-  endif
+
   unwind_protect
     axes (h);
     [tmp, fail] = __patch__ (h, varargin{:});
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
 
   if (fail)
     print_usage ();
   endif
 
   if (nargout > 0)
-    h = tmp;
+    retval = tmp;
   endif
 
 endfunction
 
 %!demo
 %! ## Patches with same number of vertices
 %! close all;
 %! t1 = (1/16:1/8:1)'*2*pi;
diff --git a/scripts/plot/peaks.m b/scripts/plot/peaks.m
--- a/scripts/plot/peaks.m
+++ b/scripts/plot/peaks.m
@@ -49,40 +49,40 @@
 ## @seealso{mesh}
 ## @end deftypefn
 
 ## Expression for the peaks function was taken from the following paper:
 ## http://www.control.hut.fi/Kurssit/AS-74.115/Material/GENALGgoga.pdf
 
 function [X_out, Y_out, Z_out] = peaks (x, y)
 
-  if nargin == 0
-    x = y = linspace(-3,3,49);
-  elseif nargin == 1
+  if (nargin == 0)
+    x = y = linspace (-3, 3, 49);
+  elseif (nargin == 1)
     if length(x) > 1
       y = x;
     else
-      x = y = linspace(-3,3,x);
+      x = y = linspace (-3, 3, x);
     endif
   endif
 
-  if (isvector(x) && isvector(y))
+  if (isvector (x) && isvector (y))
     [X, Y] = meshgrid (x, y);
   else
     X = x;
     Y = y;
   endif
 
   Z = 3 * (1 - X) .^ 2 .* exp(- X .^ 2 - (Y + 1) .^ 2) \
       - 10 * (X / 5 - X .^ 3 - Y .^ 5) .* exp(- X .^ 2 - Y .^ 2) \
       - 1 / 3 * exp(- (X + 1) .^ 2 - Y .^ 2);
 
-  if nargout == 0
+  if (nargout == 0)
     mesh (x, y, Z);
-  elseif nargout == 1
+  elseif (nargout == 1)
     X_out = Z;
   else
     X_out = X;
     Y_out = Y;
     Z_out = Z;
   endif
 
 endfunction
diff --git a/scripts/plot/pie.m b/scripts/plot/pie.m
--- a/scripts/plot/pie.m
+++ b/scripts/plot/pie.m
@@ -54,17 +54,16 @@ function retval = pie (varargin)
       axes (h);
       newplot ();
       tmp = __pie__ (h, varargin{:});
     unwind_protect_cleanup
       axes (oldh);
     end_unwind_protect
   endif
 
-
   if (nargout > 0)
     retval = tmp;
   endif
 
 endfunction
 
 function hlist = __pie__ (varargin)
 
diff --git a/scripts/plot/plot.m b/scripts/plot/plot.m
--- a/scripts/plot/plot.m
+++ b/scripts/plot/plot.m
@@ -174,16 +174,17 @@
 ## stairs, errorbar, xlabel, ylabel, title, print}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = plot (varargin)
 
   [h, varargin] = __plt_get_axis_arg__ ("plot", varargin{:});
+
   oldh = gca ();
   unwind_protect
     axes (h);
     newplot ();
     tmp = __plt__ ("plot", h, varargin{:});
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
diff --git a/scripts/plot/plotyy.m b/scripts/plot/plotyy.m
--- a/scripts/plot/plotyy.m
+++ b/scripts/plot/plotyy.m
@@ -55,16 +55,17 @@
 
 function [Ax, H1, H2] = plotyy (varargin)
 
   [ax, varargin] = __plt_get_axis_arg__ ("plotyy", varargin{:});
 
   if (nargin < 4)
     print_usage ();
   endif
+
   oldh = gca ();
   unwind_protect
     axes (ax);
     newplot ();
     [ax, h1, h2] = __plotyy__ (ax, varargin{:});
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
diff --git a/scripts/plot/polar.m b/scripts/plot/polar.m
--- a/scripts/plot/polar.m
+++ b/scripts/plot/polar.m
@@ -26,16 +26,17 @@
 ## @seealso{plot}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = polar (varargin)
 
   [h, varargin] = __plt_get_axis_arg__ ("polar", varargin{:});
+
   oldh = gca ();
   unwind_protect
     axes (h);
     newplot ();
 
     nargs = numel (varargin);
 
     if (nargs == 3)
@@ -55,14 +56,13 @@ function retval = polar (varargin)
       tmp = __plr1__ (h, varargin{:}, fmt);
     else
       print_usage ();
     endif
 
     if (nargout > 0)
       retval = tmp;
     endif
-
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
 
 endfunction
diff --git a/scripts/plot/semilogx.m b/scripts/plot/semilogx.m
--- a/scripts/plot/semilogx.m
+++ b/scripts/plot/semilogx.m
@@ -25,26 +25,26 @@
 ## @seealso{plot, semilogy, loglog}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = semilogx (varargin)
 
   [h, varargin] = __plt_get_axis_arg__ ("semilogx", varargin{:});
+
   oldh = gca ();
   unwind_protect
     axes (h);
     newplot ();
 
     set (h, "xscale", "log");
 
     tmp = __plt__ ("semilogx", h, varargin{:});
 
     if (nargout > 0)
       retval = tmp;
     endif
-
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
 
 endfunction
diff --git a/scripts/plot/semilogxerr.m b/scripts/plot/semilogxerr.m
--- a/scripts/plot/semilogxerr.m
+++ b/scripts/plot/semilogxerr.m
@@ -36,26 +36,26 @@
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function retval = semilogxerr (varargin)
 
   [h, varargin] = __plt_get_axis_arg__ ("semilogxerr", varargin{:});
+
   oldh = gca ();
   unwind_protect
     axes (h);
     newplot ();
 
     set (h, "xscale", "log");
 
     tmp = __errcomm__ ("semilogxerr", h, varargin{:});
 
     if (nargout > 0)
       retval = tmp;
     endif
-
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
 
 endfunction
diff --git a/scripts/plot/semilogy.m b/scripts/plot/semilogy.m
--- a/scripts/plot/semilogy.m
+++ b/scripts/plot/semilogy.m
@@ -25,16 +25,17 @@
 ## @seealso{plot, semilogx, loglog}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = semilogy (varargin)
 
   [h, varargin] = __plt_get_axis_arg__ ("semilogy", varargin{:});
+
   oldh = gca ();
   unwind_protect
     axes (h);
     newplot ();
 
     set (h, "yscale", "log");
 
     tmp = __plt__ ("semilogy", h, varargin{:});
diff --git a/scripts/plot/semilogyerr.m b/scripts/plot/semilogyerr.m
--- a/scripts/plot/semilogyerr.m
+++ b/scripts/plot/semilogyerr.m
@@ -36,26 +36,26 @@
 
 ## Created: 20.2.2001
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function retval = semilogyerr (varargin)
 
   [h, varargin] = __plt_get_axis_arg__ ("semilogyerr", varargin{:});
+
   oldh = gca ();
   unwind_protect
     axes (h);
     newplot ();
 
     set (h, "yscale", "log");
 
     tmp = __errcomm__ ("semilogyerr", h, varargin{:});
 
     if (nargout > 0)
       retval = tmp;
     endif
-
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
 
 endfunction
diff --git a/scripts/plot/surf.m b/scripts/plot/surf.m
--- a/scripts/plot/surf.m
+++ b/scripts/plot/surf.m
@@ -24,17 +24,17 @@
 ## is (@var{x}(j), @var{y}(i), @var{z}(i,j)).  Thus, columns of @var{z}
 ## correspond to different @var{x} values and rows of @var{z} correspond
 ## to different @var{y} values.
 ## @seealso{mesh, surface}
 ## @end deftypefn
 
 ## Author: Kai Habel <kai.habel@gmx.de>
 
-function h = surf (varargin)
+function retval = surf (varargin)
 
   [h, varargin] = __plt_get_axis_arg__ ("surf", varargin{:});
 
   oldh = gca ();
   unwind_protect
     axes (h);
     newplot ();
     tmp = surface (varargin{:});
@@ -43,12 +43,12 @@ function h = surf (varargin)
     if (! ishold ())
       set (h, "view", [-37.5, 30]);
     endif
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
 
   if (nargout > 0)
-    h = tmp;
+    retval = tmp;
   endif
 
 endfunction
diff --git a/scripts/plot/surface.m b/scripts/plot/surface.m
--- a/scripts/plot/surface.m
+++ b/scripts/plot/surface.m
@@ -34,35 +34,36 @@
 ## are missing, they are constructed from size of the matrix @var{z}.
 ##
 ## Any additional properties passed are assigned the the surface..
 ## @seealso{surf, mesh, patch, line}
 ## @end deftypefn
 
 ## Author: jwe
 
-function h = surface (varargin)
+function retval = surface (varargin)
 
   [h, varargin] = __plt_get_axis_arg__ ("surface", varargin{:});
 
   oldh = gca ();
   unwind_protect
     axes (h);
     [tmp, bad_usage] = __surface__ (h, varargin{:});
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
 
   if (bad_usage)
     print_usage ();
   endif
 
   if (nargout > 0)
-    h = tmp;
+    retval = tmp;
   endif
+
 endfunction
 
 function [h, bad_usage] = __surface__ (ax, varargin)
 
   bad_usage = false;
   h = 0;
   firststring = nargin;
   for i = 2 : nargin
diff --git a/scripts/plot/surfnorm.m b/scripts/plot/surfnorm.m
--- a/scripts/plot/surfnorm.m
+++ b/scripts/plot/surfnorm.m
@@ -122,16 +122,17 @@ function [Nx, Ny, Nz] = surfnorm (vararg
     unwind_protect_cleanup
       axes (oldh);
     end_unwind_protect
   else
     Nx = nx;
     Ny = ny;
     Nz = nz;
   endif
+
 endfunction
 
 %!demo
 %! [x, y, z] = peaks(10);
 %! surfnorm (x, y, z);
 
 %!demo
 %! surfnorm (peaks(10));
