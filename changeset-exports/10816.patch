# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1279866991 -7200
#      Fri Jul 23 08:36:31 2010 +0200
# Node ID 7fa044155982ea4f9b84a7d1bbeb6afaff86584c
# Parent  0eb323b71957dcb52a325aca01063cf6a1b27650
fix diag() with complex scalars

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-07-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-base-scalar.cc (octave_base_scalar::diag): Implement here. Fix.
+	* ov-base-scalar.h: Only declare here.
+
 2010-07-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-re-diag.cc (octave_diag_matrix::try_narrowing_conversion): Remove
 	redundant cast.
 	* ov-flt-re-diag.cc 
 	(octave_float_diag_matrix::try_narrowing_conversion): Ditto.
 	* ov-cx-diag.cc 
 	(octave_complex_diag_matrix::try_narrowing_conversion): Ditto.
diff --git a/src/ov-base-scalar.cc b/src/ov-base-scalar.cc
--- a/src/ov-base-scalar.cc
+++ b/src/ov-base-scalar.cc
@@ -110,16 +110,23 @@ octave_base_scalar<ST>::permute (const A
 template <class ST>
 octave_value
 octave_base_scalar<ST>::reshape (const dim_vector& new_dims) const
 {
   return Array<ST> (1, 1, scalar).reshape (new_dims);
 }
 
 template <class ST>
+octave_value
+octave_base_scalar<ST>::diag (octave_idx_type k) const
+{
+  return Array<ST> (1, 1, scalar).diag (k);
+}
+
+template <class ST>
 bool
 octave_base_scalar<ST>::is_true (void) const
 {
   bool retval = false;
 
   if (xisnan (scalar))
     error ("invalid conversion from NaN to logical");
   else
diff --git a/src/ov-base-scalar.h b/src/ov-base-scalar.h
--- a/src/ov-base-scalar.h
+++ b/src/ov-base-scalar.h
@@ -89,18 +89,17 @@ public:
   octave_value reshape (const dim_vector& new_dims) const;
 
   size_t byte_size (void) const { return sizeof (ST); }
 
   octave_value all (int = 0) const { return (scalar != ST ()); }
 
   octave_value any (int = 0) const { return (scalar != ST ()); }
 
-  octave_value diag (octave_idx_type k = 0) const 
-    { return octave_value (matrix_value (). diag (k)); }
+  octave_value diag (octave_idx_type k = 0) const;
 
   octave_value sort (octave_idx_type, sortmode) const
     { return octave_value (scalar); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type,
                      sortmode) const
     { 
       sidx.resize (dim_vector (1, 1)); 
       sidx(0) = 0; 
