# HG changeset patch
# User jwe
# Date 1200432523 0
#      Tue Jan 15 21:28:43 2008 +0000
# Node ID 22815fa9c368943640fdde42817dc84c67d9678f
# Parent  8b7b4f58199f41c0a2c239586c00283e9f9affaf
[project @ 2008-01-15 21:28:43 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -3,16 +3,31 @@ 2008-01-15  John W. Eaton  <jwe@octave.o
 	* mappers.cc (install_mapper_functions): Move test for asin here
 	from test/test_arith.m.
 
 	* graphics.h.in (class line::properties, class text::properties):
 	Rename erase_mode property to erasemode.
 
 2008-01-15  Michael Goffioul  <michael.goffioul@gmail.com>
 
+	* graphics.h.in (base_properties::remove_child,
+	base_properties::adopt, base_properties::update_axis_limits):
+	Make virtual.
+	(base_graphics_object::mark_modified,
+	base_graphics_object::override-defaults,
+	base_graphics_object::set_from_list, base_graphics_object::set,
+	base_graphics_object::get, base_graphics_object::get_parent,
+	base_graphics_object::remove_child, base_graphics_object::adopt,
+	base_graphics_object::reparent, base_graphics_object::defaults,
+	base_graphics_object::type): Add default implementation.
+	(class root_figure, class figure, class axes, class line,
+	class text, class image, class patch, class surface):
+	Remove overloaded virtual methods whose implementation is
+	identical to the default one.
+
 	* genprops.awk: Handle 'h' modifier for hidden properties.
 	Replace "get(void)" method with "get(bool all = false)" to allow
 	access to hidden properties.
 
 	* graphics.h.in (base_properties::get, base_graphics_object::get,
 	graphics_object::get, root_figure::get, figure::get, axes::get,
 	line::get, text::get, patch::get, surface::get, image::get):
 	New arg, ALL, to access hidden properties.
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1046,19 +1046,19 @@ public:
   std::string get_selectionhighlight (void) const { return selectionhighlight.current_value (); }
   
   octave_value get_uicontextmenu (void) const { return uicontextmenu.get (); }
 
   octave_value get_userdata (void) const { return userdata.get (); }
   
   std::string get_visible (void) const { return visible.current_value (); }
 
-  void remove_child (const graphics_handle& h);
-
-  void adopt (const graphics_handle& h)
+  virtual void remove_child (const graphics_handle& h);
+
+  virtual void adopt (const graphics_handle& h)
   {
     octave_idx_type n = children.numel ();
     children.resize (1, n+1);
     children(n) = h.value ();
   }
 
   void set_tag (const octave_value& val) { tag = val; }
 
@@ -1183,17 +1183,17 @@ public:
 
 
 
   void reparent (const graphics_handle& new_parent) { parent = new_parent; }
 
   // Update data limits for AXIS_TYPE (xdata, ydata, etc.) in the parent
   // axes object.
 
-  void update_axis_limits (const std::string& axis_type) const;
+  virtual void update_axis_limits (const std::string& axis_type) const;
 
   virtual void delete_children (void);
 
   Matrix get_children (void) const { return children; }
 
   // FIXME -- these functions should be generated automatically by the
   // genprops.awk script.
   //
@@ -1286,49 +1286,71 @@ public:
   base_graphics_object (void) : count (1) { }
 
   base_graphics_object (const base_graphics_object&) { }
 
   virtual ~base_graphics_object (void) { }
 
   virtual void mark_modified (void)
   {
-    error ("base_graphics_object::mark_modified: invalid graphics object");
+    if (valid_object ())
+      get_properties ().mark_modified ();
+    else
+      error ("base_graphics_object::mark_modified: invalid graphics object");
   }
 
-  virtual void override_defaults (base_graphics_object&)
+  virtual void override_defaults (base_graphics_object& obj)
   {
-    error ("base_graphics_object::override_defaults: invalid graphics object");
+    if (valid_object ())
+      get_properties ().override_defaults (obj);
+    else
+      error ("base_graphics_object::override_defaults: invalid graphics object");
   }
 
-  virtual void set_from_list (property_list&)
+  virtual void set_from_list (property_list& plist)
   {
-    error ("base_graphics_object::set_from_list: invalid graphics object");
+    if (valid_object ())
+      get_properties ().set_from_list (*this, plist);
+    else
+      error ("base_graphics_object::set_from_list: invalid graphics object");
   }
 
-  virtual void set (const caseless_str&, const octave_value&)
+  virtual void set (const caseless_str& pname, const octave_value& pval)
   {
-    error ("base_graphics_object::set: invalid graphics object");
+    if (valid_object ())
+      get_properties ().set (pname, pval);
+    else
+      error ("base_graphics_object::set: invalid graphics object");
   }
 
   virtual void set_defaults (const std::string&)
   {
     error ("base_graphics_object::set_defaults: invalid graphics object");
   }
 
   virtual octave_value get (bool all = false) const
   {
-    error ("base_graphics_object::get: invalid graphics object");
-    return octave_value ();
+    if (valid_object ())
+      return get_properties ().get (all);
+    else
+      {
+        error ("base_graphics_object::get: invalid graphics object");
+        return octave_value ();
+      }
   }
 
-  virtual octave_value get (const caseless_str&) const
+  virtual octave_value get (const caseless_str& pname) const
   {
-    error ("base_graphics_object::get: invalid graphics object");
-    return octave_value ();
+    if (valid_object ())
+      return get_properties ().get (pname);
+    else
+      {
+        error ("base_graphics_object::get: invalid graphics object");
+        return octave_value ();
+      }
   }
 
   virtual octave_value get_default (const caseless_str&) const;
 
   virtual octave_value get_factory_default (const caseless_str&) const;
 
   virtual octave_value get_defaults (void) const
   {
@@ -1339,38 +1361,58 @@ public:
   virtual octave_value get_factory_defaults (void) const
   {
     error ("base_graphics_object::get_factory_defaults: invalid graphics object");
     return octave_value ();
   }
 
   virtual graphics_handle get_parent (void) const
   {
-    error ("base_graphics_object::get_parent: invalid graphics object");
-    return graphics_handle ();
+    if (valid_object ())
+      return get_properties ().get_parent ();
+    else
+      {
+        error ("base_graphics_object::get_parent: invalid graphics object");
+        return graphics_handle ();
+      }
   }
 
-  virtual void remove_child (const graphics_handle&)
+  virtual void remove_child (const graphics_handle& h)
   {
-    error ("base_graphics_object::remove_child: invalid graphics object");
+    if (valid_object ())
+      get_properties ().remove_child (h);
+    else
+      error ("base_graphics_object::remove_child: invalid graphics object");
   }
 
-  virtual void adopt (const graphics_handle&)
+  virtual void adopt (const graphics_handle& h)
   {
-    error ("base_graphics_object::adopt: invalid graphics object");
+    if (valid_object ())
+      get_properties ().adopt (h);
+    else
+      error ("base_graphics_object::adopt: invalid graphics object");
   }
 
-  virtual void reparent (const graphics_handle&)
+  virtual void reparent (const graphics_handle& np)
   {
-    error ("base_graphics_object::reparent: invalid graphics object");
+    if (valid_object ())
+      get_properties ().reparent (np);
+    else
+      error ("base_graphics_object::reparent: invalid graphics object");
   }
 
   virtual void defaults (void) const
   {
-    error ("base_graphics_object::default: invalid graphics object");
+    if (valid_object ())
+      {
+        std::string msg = (type () + "::defaults");
+        gripe_not_implemented (msg.c_str ());
+      }
+    else
+      error ("base_graphics_object::default: invalid graphics object");
   }
 
   virtual base_properties& get_properties (void)
   {
     static base_properties properties;
     error ("base_graphics_object::get_properties: invalid graphics object");
     return properties;
   }
@@ -1384,17 +1426,21 @@ public:
 
   virtual void update_axis_limits (const std::string&)
   {
     error ("base_graphics_object::update_axis_limits: invalid graphics object");
   }
 
   virtual bool valid_object (void) const { return false; }
 
-  virtual std::string type (void) const { return "unknown"; }
+  virtual std::string type (void) const
+  {
+    return (valid_object () ? get_properties ().graphics_object_name ()
+        : "unknown");
+  }
 
   bool isa (const std::string& go_name) const
   {
     return type () == go_name;
   }
 
 protected:
   // A reference count.
@@ -1584,51 +1630,39 @@ private:
   properties xproperties;
 
 public:
 
   root_figure (void) : xproperties (0, graphics_handle ()), default_properties () { }
 
   ~root_figure (void) { xproperties.delete_children (); }
 
-  std::string type (void) const { return xproperties.graphics_object_name (); }
-
   void mark_modified (void) { }
 
   void override_defaults (base_graphics_object& obj)
   {
     // Now override with our defaults.  If the default_properties
     // list includes the properties for all defaults (line,
     // surface, etc.) then we don't have to know the type of OBJ
     // here, we just call its set function and let it decide which
     // properties from the list to use.
     obj.set_from_list (default_properties);
   }
 
-  void set_from_list (property_list& plist)
-  {
-    xproperties.set_from_list (*this, plist);
-  }
-
   void set (const caseless_str& name, const octave_value& value)
   {
     if (name.compare ("default", 7))
       // strip "default", pass rest to function that will
       // parse the remainder and add the element to the
       // default_properties map.
       default_properties.set (name.substr (7), value);
     else
       xproperties.set (name, value);
   }
 
-  octave_value get (bool all = false) const
-  {
-    return xproperties.get (all);
-  }
-
   octave_value get (const caseless_str& name) const
   {
     octave_value retval;
 
     if (name.compare ("default", 7))
       return get_default (name.substr (7));
     else if (name.compare ("factory", 7))
       return get_factory_default (name.substr (7));
@@ -1663,33 +1697,20 @@ public:
     return default_properties.as_struct ("default");
   }
 
   octave_value get_factory_defaults (void) const
   {
     return factory_properties.as_struct ("factory");
   }
 
-  graphics_handle get_parent (void) const { return xproperties.get_parent (); }
-
-  void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
-
-  void adopt (const graphics_handle& h) { xproperties.adopt (h); }
-
-  void reparent (const graphics_handle& np) { xproperties.reparent (np); }
-
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
-  void defaults (void) const
-  {
-    gripe_not_implemented ("root_figure::defaults");
-  }
-
   bool valid_object (void) const { return true; }
 
 private:
   property_list default_properties;
 
   static property_list factory_properties;
 
   static property_list::plist_map_type init_factory_properties (void);
@@ -1734,59 +1755,45 @@ public:
   figure (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p), default_properties ()
   {
     xproperties.override_defaults (*this);
   }
 
   ~figure (void)
   {
-    xproperties.delete_children ();
+    xproperties.delete_children (); 
     xproperties.close ();
   }
 
-  std::string type (void) const { return xproperties.graphics_object_name (); }
-
-  void mark_modified (void) { xproperties.mark_modified (); }
-
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (root figure) to override first (properties knows how
     // to find the parent object).
     xproperties.override_defaults (obj);
 
     // Now override with our defaults.  If the default_properties
     // list includes the properties for all defaults (line,
     // surface, etc.) then we don't have to know the type of OBJ
     // here, we just call its set function and let it decide which
     // properties from the list to use.
     obj.set_from_list (default_properties);
   }
 
-  void set_from_list (property_list& plist)
-  {
-    xproperties.set_from_list (*this, plist);
-  }
-
   void set (const caseless_str& name, const octave_value& value)
   {
     if (name.compare ("default", 7))
       // strip "default", pass rest to function that will
       // parse the remainder and add the element to the
       // default_properties map.
       default_properties.set (name.substr (7), value);
     else
       xproperties.set (name, value);
   }
 
-  octave_value get (bool all = false) const
-  {
-    return xproperties.get (all);
-  }
-
   octave_value get (const caseless_str& name) const
   {
     octave_value retval;
 
     if (name.compare ("default", 7))
       retval = get_default (name.substr (7));
     else
       retval = xproperties.get (name);
@@ -1796,30 +1803,20 @@ public:
 
   octave_value get_default (const caseless_str& name) const;
 
   octave_value get_defaults (void) const
   {
     return default_properties.as_struct ("default");
   }
 
-  graphics_handle get_parent (void) const { return xproperties.get_parent (); }
-
-  void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
-
-  void adopt (const graphics_handle& h) { xproperties.adopt (h); }
-
-  void reparent (const graphics_handle& np) { xproperties.reparent (np); }
-
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
-  void defaults (void) const { gripe_not_implemented ("figure::defaults"); }
-
   bool valid_object (void) const { return true; }
 
 private:
   property_list default_properties;
 };
 
 // ---------------------------------------------------------------------
 
@@ -1926,60 +1923,46 @@ public:
   axes (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p), default_properties ()
   {
     xproperties.override_defaults (*this);
   }
 
   ~axes (void) { xproperties.delete_children (); }
 
-  std::string type (void) const { return xproperties.graphics_object_name (); }
-
-  void mark_modified (void) { xproperties.mark_modified (); }
-
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (figure) to override first (properties knows how
     // to find the parent object).
     xproperties.override_defaults (obj);
 
     // Now override with our defaults.  If the default_properties
     // list includes the properties for all defaults (line,
     // surface, etc.) then we don't have to know the type of OBJ
     // here, we just call its set function and let it decide which
     // properties from the list to use.
     obj.set_from_list (default_properties);
   }
 
-  void set_from_list (property_list& plist)
-  {
-    xproperties.set_from_list (*this, plist);
-  }
-
   void set (const caseless_str& name, const octave_value& value)
   {
     if (name.compare ("default", 7))
       // strip "default", pass rest to function that will
       // parse the remainder and add the element to the
       // default_properties map.
       default_properties.set (name.substr (7), value);
     else
       xproperties.set (name, value);
   }
 
   void set_defaults (const std::string& mode)
   {
     xproperties.set_defaults (*this, mode);
   }
 
-  octave_value get (bool all = false) const
-  {
-    return xproperties.get (all);
-  }
-
   octave_value get (const caseless_str& name) const
   {
     octave_value retval;
 
     // FIXME -- finish this.
     if (name.compare ("default", 7))
       retval = get_default (name.substr (7));
     else
@@ -1990,30 +1973,20 @@ public:
 
   octave_value get_default (const caseless_str& name) const;
 
   octave_value get_defaults (void) const
   {
     return default_properties.as_struct ("default");
   }
 
-  graphics_handle get_parent (void) const { return xproperties.get_parent (); }
-
-  void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
-
-  void adopt (const graphics_handle& h) { xproperties.adopt (h); }
-
-  void reparent (const graphics_handle& np) { xproperties.reparent (np); }
-
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
-  void defaults (void) const { gripe_not_implemented ("axes::defaults"); }
-
   void update_axis_limits (const std::string& axis_type);
 
   bool valid_object (void) const { return true; }
 
 private:
   property_list default_properties;
 };
 
@@ -2060,61 +2033,20 @@ public:
   line (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   {
     xproperties.override_defaults (*this);
   }
 
   ~line (void) { xproperties.delete_children (); }
 
-  std::string type (void) const { return xproperties.graphics_object_name (); }
-
-  void mark_modified (void) { xproperties.mark_modified (); }
-
-  void override_defaults (base_graphics_object& obj)
-  {
-    // Allow parent (figure) to override first (properties knows how
-    // to find the parent object).
-    xproperties.override_defaults (obj);
-  }
-
-  void set_from_list (property_list& plist)
-  {
-    xproperties.set_from_list (*this, plist);
-  }
-
-  void set (const caseless_str& name, const octave_value& val)
-  {
-    xproperties.set (name, val);
-  }
-
-  octave_value get (bool all = false) const
-  {
-    return xproperties.get (all);
-  }
-
-  octave_value get (const caseless_str& name) const
-  {
-    return xproperties.get (name);
-  }
-
-  graphics_handle get_parent (void) const { return xproperties.get_parent (); }
-
-  void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
-
-  void adopt (const graphics_handle& h) { xproperties.adopt (h); }
-
-  void reparent (const graphics_handle& h) { xproperties.reparent (h); }
-
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
-  void defaults (void) const { gripe_not_implemented ("line::defaults"); }
-
   bool valid_object (void) const { return true; }
 };
 
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API text : public base_graphics_object
 {
 public:
@@ -2162,61 +2094,20 @@ public:
   text (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   {
     xproperties.override_defaults (*this);
   }
 
   ~text (void) { xproperties.delete_children (); }
 
-  std::string type (void) const { return xproperties.graphics_object_name (); }
-
-  void mark_modified (void) { xproperties.mark_modified (); }
-
-  void override_defaults (base_graphics_object& obj)
-  {
-    // Allow parent (figure) to override first (properties knows how
-    // to find the parent object).
-    xproperties.override_defaults (obj);
-  }
-
-  void set_from_list (property_list& plist)
-  {
-    xproperties.set_from_list (*this, plist);
-  }
-
-  void set (const caseless_str& name, const octave_value& val)
-  {
-    xproperties.set (name, val);
-  }
-
-  octave_value get (bool all = false) const
-  {
-    return xproperties.get (all);
-  }
-
-  octave_value get (const caseless_str& name) const
-  {
-    return xproperties.get (name);
-  }
-
-  graphics_handle get_parent (void) const { return xproperties.get_parent (); }
-
-  void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
-
-  void adopt (const graphics_handle& h) { xproperties.adopt (h); }
-
-  void reparent (const graphics_handle& h) { xproperties.reparent (h); }
-
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
-  void defaults (void) const { gripe_not_implemented ("text::defaults"); }
-
   bool valid_object (void) const { return true; }
 };
 
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API image : public base_graphics_object
 {
 public:
@@ -2245,61 +2136,20 @@ public:
   image (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   {
     xproperties.override_defaults (*this);
   }
 
   ~image (void) { xproperties.delete_children (); }
 
-  std::string type (void) const { return xproperties.graphics_object_name (); }
-
-  void mark_modified (void) { xproperties.mark_modified (); }
-
-  void override_defaults (base_graphics_object& obj)
-  {
-    // Allow parent (figure) to override first (properties knows how
-    // to find the parent object).
-    xproperties.override_defaults (obj);
-  }
-
-  void set_from_list (property_list& plist)
-  {
-    xproperties.set_from_list (*this, plist);
-  }
-
-  void set (const caseless_str& name, const octave_value& val)
-  {
-    xproperties.set (name, val);
-  }
-
-  octave_value get (bool all = false) const
-  {
-    return xproperties.get (all);
-  }
-
-  octave_value get (const caseless_str& name) const
-  {
-    return xproperties.get (name);
-  }
-
-  graphics_handle get_parent (void) const { return xproperties.get_parent (); }
-
-  void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
-
-  void adopt (const graphics_handle& h) { xproperties.adopt (h); }
-
-  void reparent (const graphics_handle& h) { xproperties.reparent (h); }
-
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
-  void defaults (void) const { gripe_not_implemented ("image::defaults"); }
-
   bool valid_object (void) const { return true; }
 };
 
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API patch : public base_graphics_object
 {
 public:
@@ -2359,61 +2209,20 @@ public:
   patch (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   {
     xproperties.override_defaults (*this);
   }
 
   ~patch (void) { xproperties.delete_children (); }
 
-  std::string type (void) const { return xproperties.graphics_object_name (); }
-
-  void mark_modified (void) { xproperties.mark_modified (); }
-
-  void override_defaults (base_graphics_object& obj)
-  {
-    // Allow parent (figure) to override first (properties knows how
-    // to find the parent object).
-    xproperties.override_defaults (obj);
-  }
-
-  void set_from_list (property_list& plist)
-  {
-    xproperties.set_from_list (*this, plist);
-  }
-
-  void set (const caseless_str& name, const octave_value& val)
-  {
-    xproperties.set (name, val);
-  }
-
-  octave_value get (bool all = false) const
-  {
-    return xproperties.get (all);
-  }
-
-  octave_value get (const caseless_str& name) const
-  {
-    return xproperties.get (name);
-  }
-
-  graphics_handle get_parent (void) const { return xproperties.get_parent (); }
-
-  void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
-
-  void adopt (const graphics_handle& h) { xproperties.adopt (h); }
-
-  void reparent (const graphics_handle& h) { xproperties.reparent (h); }
-
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
-  void defaults (void) const { gripe_not_implemented ("patch::defaults"); }
-
   bool valid_object (void) const { return true; }
 };
 
 // ---------------------------------------------------------------------
 
 class OCTINTERP_API surface : public base_graphics_object
 {
 public:
@@ -2454,61 +2263,20 @@ public:
   surface (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   {
     xproperties.override_defaults (*this);
   }
 
   ~surface (void) { xproperties.delete_children (); }
 
-  std::string type (void) const { return xproperties.graphics_object_name (); }
-
-  void mark_modified (void) { xproperties.mark_modified (); }
-
-  void override_defaults (base_graphics_object& obj)
-  {
-    // Allow parent (figure) to override first (properties knows how
-    // to find the parent object).
-    xproperties.override_defaults (obj);
-  }
-
-  void set_from_list (property_list& plist)
-  {
-    xproperties.set_from_list (*this, plist);
-  }
-
-  void set (const caseless_str& name, const octave_value& val)
-  {
-    xproperties.set (name, val);
-  }
-
-  octave_value get (bool all = false) const
-  {
-    return xproperties.get (all);
-  }
-
-  octave_value get (const caseless_str& name) const
-  {
-    return xproperties.get (name);
-  }
-
-  graphics_handle get_parent (void) const { return xproperties.get_parent (); }
-
-  void remove_child (const graphics_handle& h) { xproperties.remove_child (h); }
-
-  void adopt (const graphics_handle& h) { xproperties.adopt (h); }
-
-  void reparent (const graphics_handle& h) { xproperties.reparent (h); }
-
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
-  void defaults (void) const { gripe_not_implemented ("surface::defaults"); }
-
   bool valid_object (void) const { return true; }
 };
 
 octave_value
 get_property_from_handle (double handle, const std::string &property,
 			  const std::string &func);
 bool
 set_property_in_handle (double handle, const std::string &property,
