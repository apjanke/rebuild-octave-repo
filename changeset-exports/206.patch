# HG changeset patch
# User jwe
# Date 752965231 0
#      Wed Nov 10 21:00:31 1993 +0000
# Node ID 1761d7a3770ca845a06ea56cecc009880bc59a72
# Parent  76fa9345e0dc9cb7ffde128c8c2d96c6b1b50fdb
[project @ 1993-11-10 21:00:31 by jwe]

diff --git a/src/builtins.cc b/src/builtins.cc
--- a/src/builtins.cc
+++ b/src/builtins.cc
@@ -424,16 +424,20 @@ where xdot and x are vectors and t is a 
     "[L, U, P] = lu (A): LU factorization", },
 
   { "max", 3, 2, builtin_max,
     "max (x): maximum value(s) of a vector (matrix)", },
 
   { "min", 3, 2, builtin_min,
     "min (x): minimum value(s) of a vector (matrix)", },
 
+  { "get_next_arg", 1, 1, builtin_get_next_arg,
+    "get_next_arg (): return next argument in function taking varible\n\
+number of parameters", },
+
   { "npsol", 11, 3, builtin_npsol,
 #if defined (NPSOL_MISSING)
     "This function requires NPSOL, which is not freely\n\
        redistributable.  For more information, read the file\n\
        libcruft/npsol/README.MISSING in the source distribution.", },
 #else
     "[x, obj, info, lambda] = npsol (x, \"phi\" [, lb, ub] [, lb, A, ub] [, lb, \"g\", ub])\n\n\
   Groups of arguments surrounded in `[]' are optional, but\n\
diff --git a/src/g-builtins.cc b/src/g-builtins.cc
--- a/src/g-builtins.cc
+++ b/src/g-builtins.cc
@@ -813,16 +813,45 @@ builtin_ftell (const tree_constant *args
     print_usage ("ftell");
   else
     retval = ftell_internal (args);
 
   return retval;
 }
 
 /*
+ * Variable argument lists.
+ */
+tree_constant *
+builtin_get_next_arg (const tree_constant *args, int nargin, int nargout)
+{
+  tree_constant *retval = NULL_TREE_CONST;
+  if (nargin == 1)
+    {
+      if (curr_function != (tree_function *) NULL)
+	{
+	  if (curr_function->takes_varargs ())
+	    {
+	      retval = new tree_constant [2];
+	      retval[0] = curr_function->get_next_arg ();
+	    }
+	  else
+	    error ("next_arg only valid within function taking\
+ variable number of arguments");
+	}
+      else
+	error ("next_arg only valid within function body");
+    }
+  else
+    print_usage ("get_next_arg");
+
+  return retval;
+}
+
+/*
  * Get the value of an environment variable.
  */
 tree_constant *
 builtin_getenv (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
   if (nargin == 2 && args[1].is_string_type ())
diff --git a/src/g-builtins.h b/src/g-builtins.h
--- a/src/g-builtins.h
+++ b/src/g-builtins.h
@@ -71,16 +71,17 @@ extern tree_constant *builtin_fopen (con
 extern tree_constant *builtin_fprintf (const tree_constant *, int, int);
 extern tree_constant *builtin_frewind (const tree_constant *, int, int);
 extern tree_constant *builtin_freport (const tree_constant *, int, int);
 extern tree_constant *builtin_fscanf (const tree_constant *, int, int);
 extern tree_constant *builtin_fseek (const tree_constant *, int, int);
 extern tree_constant *builtin_fsolve (const tree_constant *, int, int);
 extern tree_constant *builtin_fsqp (const tree_constant *, int, int);
 extern tree_constant *builtin_ftell (const tree_constant *, int, int);
+extern tree_constant *builtin_get_next_arg (const tree_constant *, int, int);
 extern tree_constant *builtin_getenv (const tree_constant *, int, int);
 extern tree_constant *builtin_givens (const tree_constant *, int, int);
 extern tree_constant *builtin_hess (const tree_constant *, int, int);
 extern tree_constant *builtin_input (const tree_constant *, int, int);
 extern tree_constant *builtin_ifft (const tree_constant *, int, int);
 extern tree_constant *builtin_inv (const tree_constant *, int, int);
 extern tree_constant *builtin_is_global (const tree_constant *, int, int);
 extern tree_constant *builtin_isstr (const tree_constant *, int, int);
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -483,23 +483,18 @@ EXPON	([DdEe][+-]?{D}+)
 		      promptflag--;
 		      BEGIN NEW_MATRIX;
 		      TOK_RETURN ('[');
 		    }
 		}
 
 {S}*		{ current_input_column += yyleng; }
 
-{EL}{S}*\n	{
-
-// Line continuation.
-
-		  promptflag--;
-		  current_input_column = 1;
-		}
+{EL}{S}*\n	{ promptflag--; current_input_column = 1; }
+{EL}		{ return ELLIPSIS; }
 
 <<EOF>>		TOK_RETURN (END_OF_INPUT);
 
 {IDENT}{S}*	{
 
 // Truncate the token at the first space or tab but don't write
 // directly on yytext.
 
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -110,16 +110,19 @@ int no_line_editing = 0;
 int current_command_number = 1;
 
 // Nonzero means we are exiting via the builtin exit or quit functions.
 int quitting_gracefully = 0;
 
 // Current command to execute.
 tree *global_command = (tree *) NULL;
 
+// Pointer to function that is currently being evaluated.
+tree_function *curr_function = (tree_function *) NULL;
+
 // Top level context (?)
 jmp_buf toplevel;
 
 // This is not really the right place to do this...
 typedef void (*one_arg_error_handler_t) (const char*);
 extern one_arg_error_handler_t set_Complex_error_handler
   (one_arg_error_handler_t f);
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -169,17 +169,19 @@ static void maybe_warn_assign_as_truth_v
 %token <tok_val> NAME SCREW
 %token <tok_val> END
 %token <tok_val> PLOT
 %token <tok_val> TEXT STYLE
 %token <tok_val> FOR WHILE IF ELSEIF ELSE BREAK CONTINUE FUNC_RET
 
 // Other tokens.
 %token FCN SCREW_TWO
-%token END_OF_INPUT GLOBAL
+%token GLOBAL
+%token ELLIPSIS
+%token END_OF_INPUT
 %token USING TITLE WITH COLON OPEN_BRACE CLOSE_BRACE
 
 // Nonterminals we construct.
 %type <tree_type> input command 
 %type <tree_type> ans_expression expression simple_expr simple_expr1
 %type <tree_type> title
 %type <tree_matrix_type> matrix
 %type <tree_identifier_type> identifier
@@ -965,30 +967,39 @@ variable	: identifier
 		;
 
 param_list	: param_list1 ')'
 		  {
 		    tree_parameter_list *tmp = $1->reverse ();
 		    tmp->mark_as_formal_parameters ();
 		    $$ = tmp;
 		  }
+		| param_list1 ',' ELLIPSIS ')'
+		  {
+		    tree_parameter_list *tmp = $1->reverse ();
+		    tmp->mark_as_formal_parameters ();
+		    tmp->mark_varargs ();
+		    $$ = tmp;
+		  }
 
 param_list1	: '(' identifier
 		  { $$ = new tree_parameter_list ($2); }
 		| param_list1 ',' identifier
 		  { $$ = $1->chain ($3); }
 		| '(' error
 		  {
-		    error ("parameter lists may only contain identifiers");
-		    $$ = (tree_parameter_list *) NULL;
+		    yyerror ("parse error");
+		    error ("invalid parameter list");
+		    ABORT_PARSE;
 		  }
 		| param_list1 ',' error
 		  {
-		    error ("parameter lists may only contain identifiers");
-		    $$ = (tree_parameter_list *) NULL;
+		    yyerror ("parse error");
+		    error ("invalid parameter list");
+		    ABORT_PARSE;
 		  }
 		;
 
 identifier	: NAME
 		  { $$ = new tree_identifier
 		      ($1->sym_rec (), $1->line (), $1->column ()); }
 
 arg_list	: arg_list1
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -1538,26 +1538,36 @@ tree_constant_rep::double_value (void) c
     }
 }
 
 Matrix
 tree_constant_rep::matrix_value (void) const
 {
   switch (type_tag)
     {
+    case scalar_constant:
+      return Matrix (scalar);
     case matrix_constant:
       return *matrix;
+    case complex_scalar_constant:
     case complex_matrix_constant:
       {
 	int flag = user_pref.ok_to_lose_imaginary_part;
 	if (flag == -1)
 	  warning ("implicit conversion of complex matrix to real matrix"); 
 
 	if (flag != 0)
-	  return real (*complex_matrix);
+	  {
+	    if (type_tag == complex_scalar_constant)
+	      return Matrix (real (*complex_scalar));
+	    else if (type_tag == complex_matrix_constant)
+	      return real (*complex_matrix);
+	    else
+	      panic_impossible ();
+	  }
 	else
 	  error ("implicit conversion of complex matrix to real matrix not allowed");
 	jump_to_top_level ();
       }
     default:
       panic_impossible ();
       break;
     }
diff --git a/src/tc-assign.cc b/src/tc-assign.cc
--- a/src/tc-assign.cc
+++ b/src/tc-assign.cc
@@ -387,33 +387,39 @@ tree_constant_rep::vector_assignment (tr
 
 void
 tree_constant_rep::check_vector_assign (int rhs_nr, int rhs_nc,
 					int ilen, const char *rm)
 {
   int nr = rows ();
   int nc = columns ();
 
-  if (nr == 1 && nc == 1)  // No orientation to preserve
+  if ((nr == 1 && nc == 1) || nr == 0 || nc == 0)  // No orientation.
     {
-      if (! ( ilen == rhs_nr || ilen == rhs_nc))
-	error ("A(%s) = X: X and %s must have the same number of\
- elements", rm, rm); 
+      if (! (ilen == rhs_nr || ilen == rhs_nc))
+	{
+	  error ("A(%s) = X: X and %s must have the same number of elements",
+		 rm, rm);
+	}
     }
-  else if (nr == 1)  // Preserve current row orientation
+  else if (nr == 1)  // Preserve current row orientation.
     {
       if (! (rhs_nr == 1 && rhs_nc == ilen))
-	error ("A(%s) = X: where A is a row vector, X must also be a\
- row vector with the same number of elements as %s", rm, rm); 
+	{
+	  error ("A(%s) = X: where A is a row vector, X must also be a", rm);
+	  error ("row vector with the same number of elements as %s", rm);
+	}
     }
-  else if (nc == 1)  // Preserve current column orientation
+  else if (nc == 1)  // Preserve current column orientation.
     {
       if (! (rhs_nc == 1 && rhs_nr == ilen))
-	error ("A(%s) = X: where A is a column vector, X must also\
- be a column vector with the same number of elements as %s", rm, rm); 
+	{
+	  error ("A(%s) = X: where A is a column vector, X must also be", rm);
+	  error ("a column vector with the same number of elements as %s", rm);
+	}
     }
   else
     panic_impossible ();
 }
 
 void
 tree_constant_rep::do_vector_assign (tree_constant& rhs, int i)
 {
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -22,16 +22,17 @@ Software Foundation, 675 Mass Ave, Cambr
 */
 
 #if !defined (_octave_h)
 #define _octave_h 1
 
 #include <stdio.h>
 
 class tree;
+class tree_function;
 
 // Tell g++ that clean_up_and_exit doesn't return;
 
 #ifdef __GNUG__
 typedef void v_fcn_i (int);
 volatile v_fcn_i clean_up_and_exit;
 #endif
 
@@ -73,16 +74,19 @@ extern int no_line_editing;
 extern int current_command_number;
 
 // Nonzero means we are exiting via the builtin exit or quit functions.
 extern int quitting_gracefully;
 
 // Current command to execute.
 extern tree *global_command;
 
+// Pointer to function that is currently being evaluated.
+extern tree_function *curr_function;
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/tree.h.old b/src/tree.h.old
--- a/src/tree.h.old
+++ b/src/tree.h.old
@@ -246,16 +246,19 @@ public:
   void stash_m_file_time (time_t t);
 
   char *m_file_name (void);
   time_t time_parsed (void);
 
   void mark_as_system_m_file (void);
   int is_system_m_file (void) const;
 
+  int takes_varargs (void) const;
+  tree_constant get_next_arg (void);
+
   void stash_function_name (char *s);
   char *function_name (void);
 
   tree_constant eval (int print);
 
   tree_constant *eval (int print, int nargout);
 
   tree_constant eval (int argc, char **argv, int print);
@@ -272,16 +275,20 @@ private:
   tree_parameter_list *param_list;
   tree_parameter_list *ret_list;
   symbol_table *sym_tab;
   tree *cmd_list;
   char *file_name;
   char *fcn_name;
   time_t t_parsed;
   int system_m_file;
+  int varargs_ok;
+  const tree_constant *args_passed;
+  int num_args_passed;
+  int curr_arg_number;
 };
 
 /*
  * A base class for expressions.
  */
 class
 tree_expression : public tree
 {
@@ -551,23 +558,27 @@ tree_parameter_list : public tree
   tree_parameter_list *chain (tree_identifier *t);
   tree_parameter_list *reverse (void);
   int length (void);
 
   char *name (void) const;
 
   void mark_as_formal_parameters (void);
 
+  void mark_varargs (void);
+  int takes_varargs (void) const;
+
   tree_identifier *define (tree_constant *t);
 
   tree_parameter_list *next_elem (void);
 
   tree_constant eval (int print);
 
  private:
+  int marked_for_varargs;
   tree_identifier *param;
   tree_parameter_list *next;
 };
 
 /*
  * Return lists.  Almost like parameter lists, except that the
  * elements may also be index expressions.
  */
