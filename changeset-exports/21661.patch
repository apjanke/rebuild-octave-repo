# HG changeset patch
# User Rik <rik@octave.org>
# Date 1462212736 25200
#      Mon May 02 11:12:16 2016 -0700
# Node ID 1b9a36a66b01cc969cb20d04bc2f6d710a56218a
# Parent  53728df3e4c95b60f53b4f1174cef02ae28946ee
maint: Octave coding convention cleanups.

* Backend.cc, main-window.cc, graphics.cc, ov-java.cc, CSparse.cc,
lo-specfun.cc, randmtzig.c, data-conv.cc, oct-shlib.cc:
Cuddle angle bracket '<' next to C++ cast operator.
Space between variable reference and variable name (int& a).
Space between bitwise operators and their operands (A & B).

diff --git a/libgui/graphics/Backend.cc b/libgui/graphics/Backend.cc
--- a/libgui/graphics/Backend.cc
+++ b/libgui/graphics/Backend.cc
@@ -94,17 +94,17 @@ Backend::initialize (const graphics_obje
       || go.isa ("uitoggletool"))
     {
       Logger::debug ("Backend::initialize %s from thread %08x",
                      go.type ().c_str (), QThread::currentThreadId ());
 
       ObjectProxy* proxy = new ObjectProxy ();
       graphics_object gObj (go);
 
-      OCTAVE_PTR_TYPE tmp (reinterpret_cast <OCTAVE_INTPTR_TYPE> (proxy));
+      OCTAVE_PTR_TYPE tmp (reinterpret_cast<OCTAVE_INTPTR_TYPE> (proxy));
       gObj.get_properties ().set(toolkitObjectProperty (go), tmp);
 
       emit createObject (go.get_handle ().value ());
 
       return true;
     }
 
   return false;
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -165,29 +165,29 @@ main_window::focus_changed (QWidget *, Q
 {
   octave_dock_widget* dock = 0;
   QWidget *w_new = new_widget;  // get a copy of new focus widget
   QWidget *start = w_new;       // Save it as start of our search
   int count = 0;                // fallback to prevent endless loop
 
   while (w_new && w_new != _main_tool_bar && count < 100)
     {
-      dock = qobject_cast <octave_dock_widget *> (w_new);
+      dock = qobject_cast<octave_dock_widget *> (w_new);
       if (dock)
         break; // it is a QDockWidget ==> exit loop
 
 #ifdef HAVE_QSCINTILLA
-      if (qobject_cast <octave_qscintilla *> (w_new))
+      if (qobject_cast<octave_qscintilla *> (w_new))
         {
           dock = static_cast<octave_dock_widget *> (editor_window);
           break; // it is the editor window ==> exit loop
         }
 #endif
 
-      w_new = qobject_cast <QWidget *> (w_new->previousInFocusChain ());
+      w_new = qobject_cast<QWidget *> (w_new->previousInFocusChain ());
       if (w_new == start)
         break; // we have arrived where we began ==> exit loop
 
       count++;
     }
 
   // editor needs extra handling
   octave_dock_widget *edit_dock_widget =
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -10741,17 +10741,17 @@ undocumented.\n\
           for (int i = 0; i < hlist.numel (); i++)
             {
               graphics_handle h = gh_manager::lookup (hlist(i));
 
               if (h.ok () && h != 0)
                 {
                   graphics_object go = gh_manager::get_object (h);
                   figure::properties& fprops
-                    = dynamic_cast <figure::properties&> (go.get_properties ());
+                    = dynamic_cast<figure::properties&> (go.get_properties ());
 
                   if (fprops.is_modified ())
                     {
                       if (fprops.is_visible ())
                         {
                           gh_manager::unlock ();
 
                           fprops.get_toolkit ().redraw_figure (go);
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1565,17 +1565,17 @@ unbox (JNIEnv *jni_env, const octave_val
                                      jintArray (iv));
           jcls = jni_env->GetObjectClass (jobj);
         }
       else if (val.is_int8_type ())
         {
           int8NDArray m = val.int8_array_value ();
           jbyteArray_ref bv (jni_env, jni_env->NewByteArray (m.numel ()));
           jni_env->SetByteArrayRegion (jbyteArray (bv), 0, m.numel (),
-                                       reinterpret_cast <jbyte *> (m.fortran_vec ()));
+                                       reinterpret_cast<jbyte *> (m.fortran_vec ()));
           jmethodID mID = jni_env->GetMethodID (mcls, "<init>", "([B[I)V");
           jobj = jni_env->NewObject (jclass (mcls), mID, jbyteArray (bv), jintArray (iv));
           jcls = jni_env->GetObjectClass (jobj);
         }
       else if (val.is_uint8_type ())
         {
           uint8NDArray m = val.uint8_array_value ();
           jbyteArray_ref bv (jni_env, jni_env->NewByteArray (m.numel ()));
@@ -1913,18 +1913,18 @@ octave_java::subsref (const std::string&
   // objects is supposed to be impossible if Java is not available.
 
   panic_impossible ();
 #endif
 }
 
 octave_value
 octave_java::subsasgn (const std::string& type,
-                       const std::list<octave_value_list>&idx,
-                       const octave_value &rhs)
+                       const std::list<octave_value_list>& idx,
+                       const octave_value& rhs)
 {
 #if defined (HAVE_JAVA)
 
   octave_value retval;
 
   JNIEnv *current_env = thread_jni_env ();
 
   switch (type[0])
diff --git a/liboctave/array/CSparse.cc b/liboctave/array/CSparse.cc
--- a/liboctave/array/CSparse.cc
+++ b/liboctave/array/CSparse.cc
@@ -7493,17 +7493,17 @@ operator + (const SparseMatrix& a, const
   return do_add_sm_dm<SparseComplexMatrix> (a, d);
 }
 SparseComplexMatrix
 operator + (const SparseComplexMatrix& a, const DiagMatrix& d)
 {
   return do_add_sm_dm<SparseComplexMatrix> (a, d);
 }
 SparseComplexMatrix
-operator + (const SparseComplexMatrix&a, const ComplexDiagMatrix& d)
+operator + (const SparseComplexMatrix& a, const ComplexDiagMatrix& d)
 {
   return do_add_sm_dm<SparseComplexMatrix> (a, d);
 }
 
 SparseComplexMatrix
 operator - (const ComplexDiagMatrix& d, const SparseMatrix& a)
 {
   return do_sub_dm_sm<SparseComplexMatrix> (d, a);
@@ -7524,17 +7524,17 @@ operator - (const SparseMatrix& a, const
   return do_sub_sm_dm<SparseComplexMatrix> (a, d);
 }
 SparseComplexMatrix
 operator - (const SparseComplexMatrix& a, const DiagMatrix& d)
 {
   return do_sub_sm_dm<SparseComplexMatrix> (a, d);
 }
 SparseComplexMatrix
-operator - (const SparseComplexMatrix&a, const ComplexDiagMatrix& d)
+operator - (const SparseComplexMatrix& a, const ComplexDiagMatrix& d)
 {
   return do_sub_sm_dm<SparseComplexMatrix> (a, d);
 }
 
 // perm * sparse and sparse * perm
 
 SparseComplexMatrix
 operator * (const PermMatrix& p, const SparseComplexMatrix& a)
diff --git a/liboctave/numeric/randmtzig.c b/liboctave/numeric/randmtzig.c
--- a/liboctave/numeric/randmtzig.c
+++ b/liboctave/numeric/randmtzig.c
@@ -356,58 +356,58 @@ randmt (void)
 
 /* Select which 32 bit generator to use */
 #define randi32 randmt
 
 static uint64_t
 randi53 (void)
 {
   const uint32_t lo = randi32 ();
-  const uint32_t hi = randi32 ()&0x1FFFFF;
+  const uint32_t hi = randi32 () & 0x1FFFFF;
 #ifdef HAVE_X86_32
   uint64_t u;
   uint32_t *p = (uint32_t *)&u;
   p[0] = lo;
   p[1] = hi;
   return u;
 #else
-  return (((uint64_t)hi<<32)|lo);
+  return (( (uint64_t)hi << 32) | lo);
 #endif
 }
 
 static uint64_t
 randi54 (void)
 {
   const uint32_t lo = randi32 ();
-  const uint32_t hi = randi32 ()&0x3FFFFF;
+  const uint32_t hi = randi32 () & 0x3FFFFF;
 #ifdef HAVE_X86_32
   uint64_t u;
   uint32_t *p = (uint32_t *)&u;
   p[0] = lo;
   p[1] = hi;
   return u;
 #else
-  return (((uint64_t)hi<<32)|lo);
+  return (( (uint64_t)hi << 32 ) | lo);
 #endif
 }
 
 /* generates a random number on (0,1)-real-interval */
 static float
 randu32 (void)
 {
   return ((float)randi32 () + 0.5) * (1.0/4294967296.0);
   /* divided by 2^32 */
 }
 
 /* generates a random number on (0,1) with 53-bit resolution */
 static double
 randu53 (void)
 {
-  const uint32_t a = randi32 ()>>5;
-  const uint32_t b = randi32 ()>>6;
+  const uint32_t a = randi32 () >> 5;
+  const uint32_t b = randi32 () >> 6;
   return (a*67108864.0+b+0.4) * (1.0/9007199254740992.0);
 }
 
 /* Determine mantissa for uniform doubles */
 double
 oct_randu (void)
 {
   return randu53 ();
@@ -580,28 +580,28 @@ oct_randn (void)
 # ifdef HAVE_X86_32
       /* 53-bit mantissa, 1-bit sign, x86 32-bit architecture */
       double x;
       int si,idx;
       uint32_t lo, hi;
       int64_t rabs;
       uint32_t *p = (uint32_t *)&rabs;
       lo = randi32 ();
-      idx = lo&0xFF;
+      idx = lo & 0xFF;
       hi = randi32 ();
-      si = hi&UMASK;
+      si = hi & UMASK;
       p[0] = lo;
-      p[1] = hi&0x1FFFFF;
+      p[1] = hi & 0x1FFFFF;
       x = ( si ? -rabs : rabs ) * wi[idx];
 # else /* ! HAVE_X86_32 */
       /* arbitrary mantissa (selected by NRANDI, with 1 bit for sign) */
       const uint64_t r = NRANDI;
-      const int64_t rabs = r>>1;
-      const int idx = (int)(rabs&0xFF);
-      const double x = ( r&1 ? -rabs : rabs) * wi[idx];
+      const int64_t rabs = r >> 1;
+      const int idx = (int)(rabs & 0xFF);
+      const double x = ( (r & 1) ? -rabs : rabs) * wi[idx];
 # endif /* ! HAVE_X86_32 */
       if (rabs < (int64_t)ki[idx])
         return x;        /* 99.3% of the time we return here 1st try */
       else if (idx == 0)
         {
           /* As stated in Marsaglia and Tsang
            *
            * For the normal tail, the method of Marsaglia[5] provides:
@@ -614,17 +614,17 @@ oct_randn (void)
            */
           double xx, yy;
           do
             {
               xx = - ZIGGURAT_NOR_INV_R * log (RANDU);
               yy = - log (RANDU);
             }
           while ( yy+yy <= xx*xx);
-          return (rabs&0x100 ? -ZIGGURAT_NOR_R-xx : ZIGGURAT_NOR_R+xx);
+          return ((rabs & 0x100) ? -ZIGGURAT_NOR_R-xx : ZIGGURAT_NOR_R+xx);
         }
       else if ((fi[idx-1] - fi[idx]) * RANDU + fi[idx] < exp (-0.5*x*x))
         return x;
     }
 }
 
 double
 oct_rande (void)
@@ -757,18 +757,18 @@ oct_float_randn (void)
 {
   if (inittf)
     create_ziggurat_float_tables ();
 
   while (1)
     {
       /* 32-bit mantissa */
       const uint32_t r = randi32 ();
-      const uint32_t rabs = r&LMASK;
-      const int idx = (int)(r&0xFF);
+      const uint32_t rabs = r & LMASK;
+      const int idx = (int)(r & 0xFF);
       const float x = ((int32_t)r) * fwi[idx];
       if (rabs < fki[idx])
         return x;        /* 99.3% of the time we return here 1st try */
       else if (idx == 0)
         {
           /* As stated in Marsaglia and Tsang
            *
            * For the normal tail, the method of Marsaglia[5] provides:
@@ -781,17 +781,17 @@ oct_float_randn (void)
            */
           float xx, yy;
           do
             {
               xx = - ZIGGURAT_NOR_INV_R * log (RANDU);
               yy = - log (RANDU);
             }
           while ( yy+yy <= xx*xx);
-          return (rabs&0x100 ? -ZIGGURAT_NOR_R-xx : ZIGGURAT_NOR_R+xx);
+          return ((rabs & 0x100) ? -ZIGGURAT_NOR_R-xx : ZIGGURAT_NOR_R+xx);
         }
       else if ((ffi[idx-1] - ffi[idx]) * RANDU + ffi[idx] < exp (-0.5*x*x))
         return x;
     }
 }
 
 float
 oct_float_rande (void)
diff --git a/liboctave/util/data-conv.cc b/liboctave/util/data-conv.cc
--- a/liboctave/util/data-conv.cc
+++ b/liboctave/util/data-conv.cc
@@ -816,17 +816,17 @@ read_doubles (std::istream& is, double *
         do_double_format_conversion (data, len, fmt);
 
         for (int i = 0; i < len; i++)
           data[i] = __lo_ieee_replace_old_NA (data[i]);
       }
       break;
 
     default:
-      is.clear (std::ios::failbit|is.rdstate ());
+      is.clear (std::ios::failbit | is.rdstate ());
       break;
     }
 }
 
 void
 read_floats (std::istream& is, float *data, save_type type,
              octave_idx_type len, bool swap,
              oct_mach_info::float_format fmt)
@@ -872,17 +872,17 @@ read_floats (std::istream& is, float *da
         is.read (reinterpret_cast<char *> (ptr), n_bytes);
         do_double_format_conversion (ptr, len, fmt);
         for (octave_idx_type i = 0; i < len; i++)
           data[i] = ptr[i];
       }
       break;
 
     default:
-      is.clear (std::ios::failbit|is.rdstate ());
+      is.clear (std::ios::failbit | is.rdstate ());
       break;
     }
 }
 
 void
 write_doubles (std::ostream& os, const double *data, save_type type,
                octave_idx_type len)
 {
@@ -916,17 +916,17 @@ write_doubles (std::ostream& os, const d
       LS_DO_WRITE (float, data, 4, len, os);
       break;
 
     case LS_DOUBLE: // No conversion necessary.
       {
         char tmp_type = static_cast<char> (type);
         os.write (&tmp_type, 1);
         std::streamsize n_bytes = 8 * static_cast<std::streamsize> (len);
-        os.write (reinterpret_cast <const char *> (data), n_bytes);
+        os.write (reinterpret_cast<const char *> (data), n_bytes);
       }
       break;
 
     default:
       (*current_liboctave_error_handler)
         ("unrecognized data format requested");
       break;
     }
@@ -962,17 +962,17 @@ write_floats (std::ostream& os, const fl
       LS_DO_WRITE (int32_t, data, 4, len, os);
       break;
 
     case LS_FLOAT: // No conversion necessary.
       {
         char tmp_type = static_cast<char> (type);
         os.write (&tmp_type, 1);
         std::streamsize n_bytes = 4 * static_cast<std::streamsize> (len);
-        os.write (reinterpret_cast <const char *> (data), n_bytes);
+        os.write (reinterpret_cast<const char *> (data), n_bytes);
       }
       break;
 
     case LS_DOUBLE:
       LS_DO_WRITE (double, data, 8, len, os);
       break;
 
     default:
diff --git a/liboctave/util/oct-shlib.cc b/liboctave/util/oct-shlib.cc
--- a/liboctave/util/oct-shlib.cc
+++ b/liboctave/util/oct-shlib.cc
@@ -386,17 +386,18 @@ octave_w32_shlib::search (const std::str
     (*current_liboctave_error_handler)
       ("shared library %s is not open", file.c_str ());
 
   std::string sym_name = name;
 
   if (mangler)
     sym_name = mangler (name);
 
-  function = reinterpret_cast <void *> (GetProcAddress (handle, sym_name.c_str ()));
+  function = reinterpret_cast<void *> (GetProcAddress (handle,
+                                                       sym_name.c_str ()));
 
   return function;
 }
 
 #elif defined (HAVE_DYLD_API)
 
 class
 octave_dyld_shlib : public octave_shlib::shlib_rep
