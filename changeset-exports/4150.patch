# HG changeset patch
# User jwe
# Date 1036447385 0
#      Mon Nov 04 22:03:05 2002 +0000
# Node ID 0d411821682cca9c59794ff851f0240b5ffe8ad0
# Parent  5d9f4688590acfb6389d84761859b026de6d6e26
[project @ 2002-11-04 22:03:05 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+2002-11-04  Nicholas Piper <nick-octave@nickpiper.co.uk>
+
+	* control/base/lsim.m: Correct doc string.
+
+2002-11-04  A S Hodel <a.s.hodel@Eng.Auburn.EDU>
+
+	* control/system/syssub.m: Call tf2sys with Gnum-Hnum, not Gnum+Hnum.
+
 2002-11-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* plot/contour.m: Handle x and y as matrices too.
 
 2002-11-01  Joseph P. Skudlarek <jskud@jskud.com>
 
 	* plot/contour.m: Fix error and usage messages.
 
diff --git a/scripts/control/base/lsim.m b/scripts/control/base/lsim.m
--- a/scripts/control/base/lsim.m
+++ b/scripts/control/base/lsim.m
@@ -17,18 +17,18 @@
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} lsim (@var{sys}, @var{u}, @var{t}, @var{x0})
 ## Produce output for a linear simulation of a system
 ##
 ## Produces a plot for the output of the system, sys.
 ##
-## U is an array that contains the system's inputs.  Each column in u
-## corresponds to a different time step.  Each row in u corresponds to a
+## U is an array that contains the system's inputs.  Each row in u
+## corresponds to a different time step.  Each column in u corresponds to a
 ## different input.  T is an array that contains the time index of the
 ## system.  T should be regularly spaced.  If initial conditions are required
 ## on the system, the x0 vector should be added to the argument list.
 ##
 ## When the lsim function is invoked with output parameters:
 ## [y,x] = lsim(sys,u,t,[x0])
 ## a plot is not displayed, however, the data is returned in y = system output
 ## and x = system states.
diff --git a/scripts/control/system/syssub.m b/scripts/control/system/syssub.m
--- a/scripts/control/system/syssub.m
+++ b/scripts/control/system/syssub.m
@@ -75,17 +75,17 @@ function sys = syssub (varargin)
   if(nargin == 2)
     Gsys = nth(arglist,1);   Hsys = nth(arglist,2);
     if( strcmp(sysgettype(Gsys),"tf") | strcmp(sysgettype(Hsys),"tf") )
       ## see if subtracting  transfer functions with identical denominators
       [Gnum,Gden,GT,Gin,Gout] = sys2tf(Gsys);
       [Hnum,Hden,HT,Hin,Hout] = sys2tf(Hsys);
       if(length(Hden) == length(Gden) )
         if( (Hden == Gden) & (HT == GT) )
-          sys = tf2sys(Gnum+Hnum,Gden,GT,Gin,Gout);
+          sys = tf2sys(Gnum-Hnum,Gden,GT,Gin,Gout);
           return
         endif
         ## if not, we go on and do the usual thing...
       endif
     endif
 
     ## make sure in ss form
     Gsys = sysupdate(Gsys,"ss");
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2002-11-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* cutils.c (octave_vsnprintf): Handle C99 snprintf semantics.
+
+	* oct-obj.h (octave_value_list::operator =): Copy names too.
+	(octave_value_list::octave_value_list (const octave_value_list&)):
+	Likewise.
+
 2002-11-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* version.h (OCTAVE_VERSION): Now 2.1.39.
 
 	* variables.cc (generate_struct_completions): Temporarily reset
 	discard_error_messages and error_state
 	(looks_like_struct): Temporarily reset Vwarning option,
 	error_state, and discard_error_messages.
diff --git a/src/cutils.c b/src/cutils.c
--- a/src/cutils.c
+++ b/src/cutils.c
@@ -117,39 +117,69 @@ int
 octave_strncasecmp (const char *s1, const char *s2, size_t n)
 {
   return strncasecmp (s1, s2, n);
 }
 
 // We manage storage.  User should not free it, and its contents are
 // only valid until next call to vsnprintf.
 
+#if defined __GNUC__ && __GNUC__ >= 3
+#define HAVE_C99_VSNPRINTF 1
+#endif
+
 char *
 octave_vsnprintf (const char *fmt, va_list args)
 {
 #if defined (HAVE_VSNPRINTF)
   static size_t size = 100;
 
   static char *buf = 0;
 
+  int nchars;
+
   if (! buf)
     buf = malloc (size);
 
+#if defined (HAVE_C99_VSNPRINTF)
+
+  nchars = vsnprintf (buf, size, fmt, args);
+
+  if (nchars >= size)
+    {
+      size = nchars + 1;
+      buf = realloc (buf, size);
+
+      if (buf)
+	vsnprintf (buf, size, fmt, args);
+
+      return buf;
+    }
+
+#else
+
   while (1)
     {
-      int nchars = vsnprintf (buf, size, fmt, args);
+      nchars = vsnprintf (buf, size, fmt, args);
 
       if (nchars > -1)
 	return buf;
       else
 	{
 	  size *= 2;
+
 	  buf = realloc (buf, size);
+
+	  if (! buf)
+	    return 0;
 	}
     }
+
+#endif
+
 #else
   return 0;
 #endif
 }
 
 char *
 octave_snprintf (const char *fmt, ...)
 {
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -90,28 +90,31 @@ public:
 
   octave_value_list (double base, double limit, double inc)
     : data (1, octave_value (base, limit, inc)) { }
 
   octave_value_list (const Range& r)
     : data (1, octave_value (r)) { }
 
   octave_value_list (const octave_value_list& obj)
-    : data (obj.data) { }
+    : data (obj.data), names (obj.names) { }
 
   void *operator new (size_t size)
     { return allocator.alloc (size); }
 
   void operator delete (void *p, size_t size)
     { allocator.free (p, size); }
 
   octave_value_list& operator = (const octave_value_list& obj)
     {
       if (this != &obj)
-	data = obj.data;
+	{
+	  data = obj.data;
+	  names = obj.names;
+	}
 
       return *this;
     }
 
   bool valid_scalar_indices (void) const;
 
   // Assignment will resize on range errors.
 
