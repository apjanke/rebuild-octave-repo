# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1313357798 -7200
#      Sun Aug 14 23:36:38 2011 +0200
# Node ID a9b96f66202a508487ab4b7dceb459a7064d4739
# Parent  73a9ac1cdbf18bfa5d1edaaf48a8cf5d7fd52491
Further reworked on IRC backend.

diff --git a/gui/src/IRCWidget.cpp b/gui/src/IRCWidget.cpp
--- a/gui/src/IRCWidget.cpp
+++ b/gui/src/IRCWidget.cpp
@@ -69,17 +69,18 @@ QWidget (parent)
   //m_chatWindow->setFocusProxy (m_inputLine);
   this->setFocusProxy (m_inputLine);
   m_nickButton->setFocusProxy (m_inputLine);
 
   QFont font;
   font.setFamily ("Courier");
   font.setPointSize (11);
   m_chatWindow->setFont (font);
-  m_ircClientInterface = new IRCClientImpl ();
+  m_ircClientInterface = new IRCClientImpl (this);
+  m_octaveChannel = m_ircClientInterface->ircChannelProxy ("#octave");
 
   connect (m_ircClientInterface, SIGNAL (connected (QString)),
            this, SLOT (handleConnected (QString)));
   connect (m_ircClientInterface, SIGNAL(loggedIn(QString)),
            this, SLOT (joinOctaveChannel (QString)));
   connect (m_ircClientInterface, SIGNAL (error (QString)),
            this, SLOT (showErrorMessage (QString)));
   connect (m_ircClientInterface, SIGNAL (debugMessage (QString)),
@@ -138,18 +139,17 @@ IRCWidget::handleConnected (const QStrin
   showStatusMessage (QString ("Connected to server %1.").arg (host));
 }
 
 void
 IRCWidget::joinOctaveChannel (const QString& nick)
 {
   Q_UNUSED (nick);
   showStatusMessage (QString ("Joining channel #octave."));
-  m_ircClientInterface->sendJoinRequest ("#octave");
-  m_ircClientInterface->focusChannel ("#octave");
+  m_octaveChannel->sendJoinRequest ();
 }
 
 void
 IRCWidget::showMessage (const QString& channel, const QString& sender, const QString& message)
 {
   Q_UNUSED (channel);
   QString output;
   if (message.contains (m_ircClientInterface->nickname ()))
@@ -199,17 +199,18 @@ IRCWidget::sendMessage (QString message)
   while (message.at (0).isSpace ())
     message.remove (0, 1);
   if (message.startsWith ("/"))
     {
       QStringList line =
 	message.split (QRegExp ("\\s+"), QString::SkipEmptyParts);
       if (line.at (0) == "/join")
 	{
-          m_ircClientInterface->sendJoinRequest (line.at (1));
+          IRCChannelProxyInterface *ircChannel = m_ircClientInterface->ircChannelProxy (line.at (1));
+          ircChannel->sendJoinRequest ();
 	}
       else if (line.at (0) == "/nick")
 	{
           m_ircClientInterface->sendNicknameChangeRequest (line.at (1));
 	}
       else if (line.at (0) == "/msg")
 	{
 	  QString recipient = line.at (1);
@@ -220,17 +221,17 @@ IRCWidget::sendMessage (QString message)
 	      pmsg += line.at (i);
 	      pmsg += " ";
 	    }
           m_ircClientInterface->sendPrivateMessage(recipient, pmsg);
 	}
     }
   else
     {
-      m_ircClientInterface->sendPublicMessage (message);
+      m_octaveChannel->sendMessage (message);
       message.replace ("<", "&lt;");
       message.replace (">", "&gt;");
       m_chatWindow->append (QString ("<b>%1:</b> %2").
                             arg (m_ircClientInterface->nickname ()).arg (message));
     }
 }
 
 void
diff --git a/gui/src/qirc/IRCClientImpl.cpp b/gui/src/qirc/IRCClientImpl.cpp
--- a/gui/src/qirc/IRCClientImpl.cpp
+++ b/gui/src/qirc/IRCClientImpl.cpp
@@ -139,18 +139,18 @@ IRCServerMessage::getStringToken (const 
 }
 
 QString
 IRCServerMessage::getStringToken (QString line, int &index)
 {
   return getStringToken (line.toStdString ().c_str (), index);
 }
 
-IRCChannelProxy::IRCChannelProxy (IRCClientInterface *clientInterface, const QString& channelName)
-  : IRCChannelProxyInterface (clientInterface, channelName),
+IRCChannelProxy::IRCChannelProxy (IRCClientInterface *clientInterface, const QString& channelName, QObject *parent)
+  : IRCChannelProxyInterface (clientInterface, channelName, parent),
     m_clientInterface (clientInterface)
 {
   m_channelName = channelName;
 }
 
 QTextDocument *
 IRCChannelProxy::conversationModel ()
 {
@@ -167,41 +167,51 @@ QString
 IRCChannelProxy::channelName ()
 {
   return m_channelName;
 }
 
 void
 IRCChannelProxy::sendMessage (const QString& message)
 {
-  Q_UNUSED (message);
-  // TODO: implement.
+  QStringList arguments;
+  arguments << m_channelName;
+  arguments << message;
+  m_clientInterface->sendIRCCommand (IRCCommand::PrivateMessage, arguments);
 }
 
 void
 IRCChannelProxy::sendJoinRequest ()
 {
-  //sendIRCCommand (IRCCommand::Join, QStringList (channel));
+  m_clientInterface->sendIRCCommand (IRCCommand::Join, QStringList (m_channelName));
 }
 
 
 void
 IRCChannelProxy::leave (const QString& reason)
 {
   Q_UNUSED (reason);
 }
 
-IRCClientImpl::IRCClientImpl ()
-  : IRCClientInterface ()
+IRCClientImpl::IRCClientImpl (QObject *parent)
+  : IRCClientInterface (parent)
 {
   connect (&m_tcpSocket, SIGNAL (connected ()), this, SLOT (handleConnected ()));
   connect (&m_tcpSocket, SIGNAL (disconnected ()), this, SLOT (handleDisconnected ()));
   connect (&m_tcpSocket, SIGNAL (readyRead ()), this, SLOT (handleReadyRead ()));
 }
 
+IRCClientImpl::~IRCClientImpl ()
+{
+  foreach (IRCChannelProxyInterface *ircChannelProxy, m_channels)
+    {
+      delete ircChannelProxy;
+    }
+}
+
 void
 IRCClientImpl::connectToHost (const QHostAddress& host, int port, const QString& initialNick)
 {
   m_host = host;
   m_nickname = initialNick;
   m_tcpSocket.connectToHost(host, port);
 }
 
@@ -240,37 +250,22 @@ IRCChannelProxyInterface *
 IRCClientImpl::ircChannelProxy (const QString &channel)
 {
   if (!m_channels.contains (channel))
       m_channels[channel] = new IRCChannelProxy(this, channel);
   return m_channels[channel];
 }
 
 void
-IRCClientImpl::focusChannel (const QString& channel)
-{
-  m_focussedChannel = channel;
-}
-
-void
 IRCClientImpl::sendNicknameChangeRequest (const QString &nickname)
 {
   sendIRCCommand (IRCCommand::Nick, QStringList (nickname));
 }
 
 void
-IRCClientImpl::sendPublicMessage (const QString& message)
-{
-  QStringList arguments;
-  arguments << m_focussedChannel;
-  arguments << message;
-  sendIRCCommand (IRCCommand::PrivateMessage, arguments);
-}
-
-void
 IRCClientImpl::sendPrivateMessage (const QString &recipient, const QString &message)
 {
   QStringList arguments;
   arguments << recipient;
   arguments << message;
   sendIRCCommand (IRCCommand::PrivateMessage, arguments);
 }
 
diff --git a/gui/src/qirc/IRCClientImpl.h b/gui/src/qirc/IRCClientImpl.h
--- a/gui/src/qirc/IRCClientImpl.h
+++ b/gui/src/qirc/IRCClientImpl.h
@@ -268,18 +268,19 @@ private:
   bool m_isNumeric;
   QString m_nick, m_user, m_host;
   QString m_command;
   QStringList m_parameters;
 };
 
 class IRCChannelProxy : public IRCChannelProxyInterface
 {
+  Q_OBJECT
 public:
-  IRCChannelProxy (IRCClientInterface *clientInterface, const QString& channelName);
+  IRCChannelProxy (IRCClientInterface *clientInterface, const QString& channelName, QObject *parent = 0);
   QTextDocument *conversationModel ();
   QStringListModel *userListModel ();
   QString channelName ();
 
   void sendMessage (const QString& message);
   void sendJoinRequest ();
   void leave (const QString &reason);
 
@@ -290,53 +291,50 @@ private:
   QTextDocument m_conversationModel;
   IRCClientInterface *m_clientInterface;
 };
 
 class IRCClientImpl : public IRCClientInterface
 {
   Q_OBJECT
 public:
-  IRCClientImpl ();
+  IRCClientImpl (QObject *parent = 0);
+  ~IRCClientImpl ();
 
   const QString& nickname ();
   bool isConnected ();
   const QHostAddress& host();
   int port();
   IRCChannelProxyInterface *ircChannelProxy(const QString& channel);
+  void sendIRCCommand (const QString& command, const QStringList& arguments);
 
 public slots:
   void connectToHost (const QHostAddress& host, int port, const QString& initialNick);
   void disconnect ();
   void reconnect ();
 
-  void focusChannel (const QString& channel);
   void sendNicknameChangeRequest (const QString &nickname);
-  void sendPublicMessage (const QString& message);
   void sendPrivateMessage (const QString &recipient, const QString &message);
 
 signals:
   void debugMessage (const QString& message);
 
 private slots:
   void handleConnected ();
   void handleDisconnected ();
   void handleReadyRead ();
 
 private:
   void handleNicknameChanged (const QString& oldNick, const QString& newNick);
   void handleUserJoined (const QString& nick, const QString& channel);
   void handleUserQuit (const QString& nick, const QString& reason);
   void handleIncomingLine (const QString& line);
   void sendLine (const QString& line);
-  void sendIRCCommand (const QString& command, const QStringList& arguments);
 
   QHostAddress                    m_host;
   int                             m_port;
   QString                         m_nickname;
   bool                            m_connected;
-  QString                         m_focussedChannel;
-
   QTcpSocket                      m_tcpSocket;
   QMap<QString, IRCChannelProxyInterface*> m_channels;
 };
 
 #endif // IRCCLIENTIMPL_H
diff --git a/gui/src/qirc/IRCClientInterface.h b/gui/src/qirc/IRCClientInterface.h
--- a/gui/src/qirc/IRCClientInterface.h
+++ b/gui/src/qirc/IRCClientInterface.h
@@ -21,55 +21,56 @@
 
 #include <QString>
 #include <QObject>
 #include <QHostAddress>
 #include <QTextDocument>
 #include <QStringListModel>
 
 class IRCClientInterface;
-class IRCChannelProxyInterface
+class IRCChannelProxyInterface : public QObject
 {
+  Q_OBJECT
 public:
-  IRCChannelProxyInterface (IRCClientInterface *, const QString&) { }
+  IRCChannelProxyInterface (IRCClientInterface *, const QString&, QObject *parent = 0) : QObject (parent) { }
+  virtual ~IRCChannelProxyInterface () { }
+
   virtual QTextDocument *conversationModel () = 0;
   virtual QStringListModel *userListModel () = 0;
   virtual QString channelName () = 0;
   virtual void sendMessage (const QString& message) = 0;
   virtual void sendJoinRequest () = 0;
   virtual void leave (const QString& reason) = 0;
 };
 
 /**
   * \class IRCClientInterface
   * IRC Clients need to implement this interface.
   */
 class IRCClientInterface : public QObject
 {
   Q_OBJECT
 public:
-  IRCClientInterface () { }
+  IRCClientInterface (QObject *parent = 0) : QObject (parent) { }
   virtual ~IRCClientInterface () { }
 
   virtual const QString& nickname () = 0;
   virtual bool isConnected () = 0;
   virtual const QHostAddress& host() = 0;
   virtual int port() = 0;
   virtual IRCChannelProxyInterface *ircChannelProxy(const QString& channel) = 0;
+  virtual void sendIRCCommand (const QString& command, const QStringList& arguments) = 0;
 
 public slots:
   // Connection state:
   virtual void connectToHost (const QHostAddress& host, int port, const QString& initialNick) = 0;
   virtual void disconnect () = 0;
   virtual void reconnect () = 0;
 
-  // Messaging:
-  virtual void focusChannel (const QString& channel) = 0;
   virtual void sendNicknameChangeRequest (const QString& nickname) = 0;
-  virtual void sendPublicMessage (const QString& message) = 0;
   virtual void sendPrivateMessage (const QString& recipient, const QString& message) = 0;
 
 signals:
   void newMessage (const QString& channel, const QString& sender, const QString& message);
   void connected (const QString& server);
   void disconnected ();
   void error (const QString& message);
   void notification (const QString& sender, const QString& message);
