# HG changeset patch
# User Rik <rik@octave.org>
# Date 1449359962 28800
#      Sat Dec 05 15:59:22 2015 -0800
# Node ID d9ca869ca124b827604d20cf5e8924ace874805c
# Parent  5979314bb15aa73133e19114ca01abbdc5cf7826
maint: Clean-up more instances of print_usage().

* mk-opts.pl: Fix script that generates *-opt.cc files to put print_usage()
first.

* __ilu__.cc (F__ilutp__): Don't declare and initialize multiple comma
separated variables.

* __lin_interpn__.cc (F__lin_interpn__): Eliminate extra spaces in if
conditional.

* dasrt.cc (Fdasrt): Declare variables only as needed, in this case, after
input validation has succeeded.

* file-io.cc (Frewind): Declare variables after input validation succeeds.
* file-io.cc (Ftempname): Rename variable len to nargin to match rest of code.

* gammainc.cc (Fgammainc): Put nargin checking first in function.

* hex2num.cc (Fhex2num, Fnum2hex): Declare "octave_value retval;" first in
function to match rest of Octave code base.

* load-path.cc (Frmpath): Re-phrase comment.

* lu.cc (Flu): Declare variables after input validation succeeds.  Use space
after ! operator.
* lu.cc (Fluupdate): Place octave_value_list declaration first in function.
Declare variables after input validation succeeds.

* matrix_type.cc (Fmatrix_type): Place octave_value declaration first in
function.

* tril.cc (do_trilu): Move nargin checking higher in function.

* utils.cc (Fdir_in_loadpath): Declare variables after input validation
succeeds.

* __glpk__.cc (F__glpk__): Rename variable nrhs to nargin to match rest of
code base.

* __magick_read__.cc (F__magick_ping__, F__magick_formats__): Add newline
to space out code for readability.

* __osmesa_print__.cc (F__osmesa_print__): Use DeMorgan's Law to simplify
nargin validation.

* audiodevinfo.cc (F__recorder_record__): Correct indentation.

* chol.cc (Fcholinsert, Fcholdelete, Fcholshift): Place octave_value_list
declaration first in function.

* dmperm.cc (Fdmperm, Fsprank): Place octave_value_list declaration first in
function.

* qr.cc (Fqrupdate, Fqrinsert, Fqrdelete, Fqrshift): Place octave_value_list
declaration first in function.

* lex.ll (Fiskeyword): Rewrite function to use modern syntax.  Add BIST
tests for special words "get", "set".  Add BIST tests for input validation.

diff --git a/build-aux/mk-opts.pl b/build-aux/mk-opts.pl
--- a/build-aux/mk-opts.pl
+++ b/build-aux/mk-opts.pl
@@ -927,31 +927,32 @@ Options include\\n\\
   print <<"_END_EMIT_OPTIONS_FUNCTION_BODY_";
 \@end table\\n\\
 \@end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
+  if (nargin > 2)
+    print_usage ();
+
   if (nargin == 0)
     {
       print_$CLASS_NAME (octave_stdout);
     }
-  else if (nargin == 1 || nargin == 2)
+  else
     {
       std::string keyword = args(0).xstring_value ("$OPT_FCN_NAME: expecting keyword as first argument");
 
       if (nargin == 1)
         retval = show_$CLASS_NAME (keyword);
       else
         set_$CLASS_NAME (keyword, args(1));
     }
-  else
-    print_usage ();
 
   return retval;
 }
 _END_EMIT_OPTIONS_FUNCTION_BODY_
 
 }
 
 sub emit_options_debug
diff --git a/libinterp/corefcn/__ilu__.cc b/libinterp/corefcn/__ilu__.cc
--- a/libinterp/corefcn/__ilu__.cc
+++ b/libinterp/corefcn/__ilu__.cc
@@ -943,17 +943,18 @@ DEFUN (__ilutp__, args, nargout,
 @deftypefnx {Built-in Function} {[@var{L}, @var{U}, @var{P}] =} __ilutp__ (@var{A}, @dots{})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
   std::string milu = "";
-  double droptol = 0, thresh = 1;
+  double droptol = 0;
+  double thresh = 1;
   double udiag = 0;
 
   if (nargout < 2 || nargout > 3 || nargin < 1 || nargin > 5)
     print_usage ();
 
   // Don't repeat input validation of arguments done in ilu.m
   if (nargin >= 2)
     droptol = args(1).double_value ();
diff --git a/libinterp/corefcn/__lin_interpn__.cc b/libinterp/corefcn/__lin_interpn__.cc
--- a/libinterp/corefcn/__lin_interpn__.cc
+++ b/libinterp/corefcn/__lin_interpn__.cc
@@ -272,17 +272,17 @@ DEFUN (__lin_interpn__, args, ,
 @deftypefn {Built-in Function} {@var{vi} =} __lin_interpn__ (@var{x1}, @var{x2}, @dots{}, @var{xn}, @var{v}, @var{y1}, @var{y2}, @dots{}, @var{yn})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
-  if (nargin < 2 ||  nargin % 2 == 0)
+  if (nargin < 2 || nargin % 2 == 0)
     print_usage ();
 
   // dimension of the problem
   int n = (nargin-1)/2;
 
   if (args(n).is_single_type ())
     {
       OCTAVE_LOCAL_BUFFER (FloatNDArray, X, n);
diff --git a/libinterp/corefcn/dasrt.cc b/libinterp/corefcn/dasrt.cc
--- a/libinterp/corefcn/dasrt.cc
+++ b/libinterp/corefcn/dasrt.cc
@@ -365,23 +365,22 @@ parameters for @code{dasrt}.\n\
   unwind_protect frame;
 
   frame.protect_var (call_depth);
   call_depth++;
 
   if (call_depth > 1)
     DASRT_ABORT1 ("invalid recursive call");
 
-  int argp = 0;
-
   int nargin = args.length ();
 
   if (nargin < 4 || nargin > 6)
     print_usage ();
 
+  int argp = 0;
   std::string fcn_name, fname, jac_name, jname;
   dasrt_f = 0;
   dasrt_j = 0;
   dasrt_cf = 0;
 
   // Check all the arguments.  Are they the right animals?
 
   // Here's where I take care of f and j in one shot:
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -730,21 +730,21 @@ descriptor @var{fid}.\n\
 \n\
 @code{frewind} returns 0 for success, and -1 if an error is encountered.  It\n\
 is equivalent to @code{fseek (@var{fid}, 0, SEEK_SET)}.\n\
 @seealso{fseek, ftell, fopen}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  int result = -1;
-
   if (args.length () != 1)
     print_usage ();
 
+  int result = -1;
+
   octave_stream os = octave_stream_list::lookup (args(0), "frewind");
 
   result = os.rewind ();
 
   if (nargout > 0)
     retval = result;
 
   return retval;
@@ -1776,29 +1776,29 @@ Programming Note: Because the named file
 it is possible, though relatively unlikely, that it will not be available\n\
 by the time your program attempts to open it.  If this is a concern,\n\
 see @code{tmpfile}.\n\
 @seealso{mkstemp, tempdir, P_tmpdir, tmpfile}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  int len = args.length ();
+  int nargin = args.length ();
 
-  if (len > 2)
+  if (nargin > 2)
     print_usage ();
 
   std::string dir;
 
-  if (len > 0)
+  if (nargin > 0)
     dir = args(0).xstring_value ("tempname: DIR must be a string");
 
   std::string pfx ("oct-");
 
-  if (len > 1)
+  if (nargin > 1)
     pfx = args(1).xstring_value ("tempname: PREFIX must be a string");
 
   return octave_value (octave_tempnam (dir, pfx));
 }
 
 /*
 %!test
 %! if (ispc ())
diff --git a/libinterp/corefcn/gammainc.cc b/libinterp/corefcn/gammainc.cc
--- a/libinterp/corefcn/gammainc.cc
+++ b/libinterp/corefcn/gammainc.cc
@@ -78,31 +78,31 @@ gammainc (@var{x}, @var{a}) @equiv{} 1 -
 @seealso{gamma, gammaln}\n\
 @end deftypefn")
 {
   octave_value retval;
   bool lower = true;
 
   int nargin = args.length ();
 
+  if (nargin < 2 || nargin > 3)
+    print_usage ();
+
   if (nargin == 3)
     {
       std::string s = args(2).xstring_value ("gammainc: third argument must be \"lower\" or \"upper\"");
 
       std::transform (s.begin (), s.end (), s.begin (), tolower);
 
       if (s == "upper")
         lower = false;
       else if (s != "lower")
         error ("gammainc: third argument must be \"lower\" or \"upper\"");
     }
 
-  if (nargin < 2 || nargin > 3)
-    print_usage ();
-
   octave_value x_arg = args(0);
   octave_value a_arg = args(1);
 
   // FIXME: Can we make a template version of the duplicated code below
   if (x_arg.is_single_type () || a_arg.is_single_type ())
     {
       if (x_arg.is_scalar_type ())
         {
diff --git a/libinterp/corefcn/hex2num.cc b/libinterp/corefcn/hex2num.cc
--- a/libinterp/corefcn/hex2num.cc
+++ b/libinterp/corefcn/hex2num.cc
@@ -60,18 +60,18 @@ hexadecimal string.  For example:\n\
 @group\n\
 hex2num ([\"402df854\"; \"41200000\"], \"single\")\n\
    @result{} [2.7183; 10.000]\n\
 @end group\n\
 @end example\n\
 @seealso{num2hex, hex2dec, dec2hex}\n\
 @end deftypefn")
 {
+  octave_value retval;
   int nargin = args.length ();
-  octave_value retval;
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   if (nargin == 2 && ! args(1).is_string ())
     error ("hex2num: CLASS must be a string");
   else
     {
@@ -214,18 +214,18 @@ num2hex (single ([-1, 1, e, Inf]))\n\
     3f800000\n\
     402df854\n\
     7f800000\"\n\
 @end group\n\
 @end example\n\
 @seealso{hex2num, hex2dec, dec2hex}\n\
 @end deftypefn")
 {
+  octave_value retval;
   int nargin = args.length ();
-  octave_value retval;
 
   if (nargin != 1)
     print_usage ();
 
   if (args(0).is_single_type ())
     {
       const FloatColumnVector v (args(0).float_vector_value ());
 
diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -2501,17 +2501,17 @@ In addition to accepting individual dire
 directory names separated by @code{pathsep} are also accepted.  For example:\n\
 \n\
 @example\n\
 rmpath (\"dir1:/dir2:~/dir3\")\n\
 @end example\n\
 @seealso{path, addpath, genpath, pathdef, savepath, pathsep}\n\
 @end deftypefn")
 {
-  // Originally by Etienne Grossmann. Heavily modified and translated
+  // Originally written by Etienne Grossmann.  Heavily modified and translated
   // to C++ by jwe.
 
   octave_value retval;
 
   if (nargout > 0)
     retval = load_path::path ();
 
   int nargin = args.length ();
diff --git a/libinterp/corefcn/lu.cc b/libinterp/corefcn/lu.cc
--- a/libinterp/corefcn/lu.cc
+++ b/libinterp/corefcn/lu.cc
@@ -140,22 +140,22 @@ is embedded into @var{U} to give a retur
 For both full and sparse matrices, @code{lu} loses the permutation\n\
 information.\n\
 @seealso{luupdate, ilu, chol, hess, qr, qz, schur, svd}\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length ();
   bool issparse = (nargin > 0 && args(0).is_sparse_type ());
-  bool scale = (nargout  == 5);
 
   if (nargin < 1 || (issparse && (nargin > 3 || nargout > 5))
-      || (!issparse && (nargin > 2 || nargout > 3)))
+      || (! issparse && (nargin > 2 || nargout > 3)))
     print_usage ();
 
+  bool scale = (nargout == 5);
   bool vecout = false;
   Matrix thres;
 
   int n = 1;
   while (n < nargin)
     {
       if (args(n).is_string ())
         {
@@ -621,24 +621,24 @@ stable.  The second form uses a slower p
 stable.\n\
 \n\
 The matrix case is done as a sequence of rank-1 updates; thus, for large\n\
 enough k, it will be both faster and more accurate to recompute the\n\
 factorization from scratch.\n\
 @seealso{lu, cholupdate, qrupdate}\n\
 @end deftypefn")
 {
+  octave_value_list retval;
   octave_idx_type nargin = args.length ();
-  octave_value_list retval;
-
-  bool pivoted = nargin == 5;
 
   if (nargin != 4 && nargin != 5)
     print_usage ();
 
+  bool pivoted = (nargin == 5);
+
   octave_value argl = args(0);
   octave_value argu = args(1);
   octave_value argp = pivoted ? args(2) : octave_value ();
   octave_value argx = args(2 + pivoted);
   octave_value argy = args(3 + pivoted);
 
   if (argl.is_numeric_type () && argu.is_numeric_type ()
       && argx.is_numeric_type () && argy.is_numeric_type ()
diff --git a/libinterp/corefcn/matrix_type.cc b/libinterp/corefcn/matrix_type.cc
--- a/libinterp/corefcn/matrix_type.cc
+++ b/libinterp/corefcn/matrix_type.cc
@@ -114,18 +114,18 @@ Also, the test for positive definiteness
 matrix with a real positive diagonal.  This does not guarantee that the\n\
 matrix is positive definite, but only that it is a probable candidate.  When\n\
 such a matrix is factorized, a Cholesky@tie{}factorization is first\n\
 attempted, and if that fails the matrix is then treated with an\n\
 LU@tie{}factorization.  Once the matrix has been factorized,\n\
 @code{matrix_type} will return the correct classification of the matrix.\n\
 @end deftypefn")
 {
+  octave_value retval;
   int nargin = args.length ();
-  octave_value retval;
 
   if (nargin == 0 || nargin > 4)
     print_usage ();
 
   bool autocomp = true;
   if (nargin == 2 && args(1).is_string ()
       && args(1).string_value () == "nocompute")
     {
diff --git a/libinterp/corefcn/tril.cc b/libinterp/corefcn/tril.cc
--- a/libinterp/corefcn/tril.cc
+++ b/libinterp/corefcn/tril.cc
@@ -184,34 +184,35 @@ do_trilu (const Sparse<T>& a, octave_idx
 {
   return lower ? do_tril (a, k, pack) : do_triu (a, k, pack);
 }
 
 static octave_value
 do_trilu (const std::string& name,
           const octave_value_list& args)
 {
-  bool lower = name == "tril";
+  bool lower = (name == "tril");
 
   octave_value retval;
   int nargin = args.length ();
   octave_idx_type k = 0;
   bool pack = false;
+
   if (nargin >= 2 && args(nargin-1).is_string ())
     {
       pack = args(nargin-1).string_value () == "pack";
       nargin--;
     }
 
+  if (nargin < 1 || nargin > 2)
+    print_usage ();
+
   if (nargin == 2)
     k = args(1).int_value (true);
 
-  if (nargin < 1 || nargin > 2)
-    print_usage ();
-
   octave_value arg = args(0);
 
   dim_vector dims = arg.dims ();
   if (dims.length () != 2)
     error ("%s: need a 2-D matrix", name.c_str ());
   else if (k < -dims(0) || k > dims(1))
     error ("%s: requested diagonal out of range", name.c_str ());
   else
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -1008,21 +1008,21 @@ If the optional second argument is suppl
 all name matches rather than just the first.\n\
 @seealso{file_in_path, file_in_loadpath, path}\n\
 @end deftypefn")
 {
   octave_value retval = std::string ();
 
   int nargin = args.length ();
 
-  std::string dir;
-
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
+  std::string dir;
+
   dir = args(0).xstring_value ("dir_in_loadpath: DIR must be a directory name");
 
   if (nargin == 1)
     retval = load_path::find_dir (dir);
   else if (nargin == 2)
     retval = Cell (load_path::find_matching_dirs (dir));
 
   return retval;
diff --git a/libinterp/dldfcn/__glpk__.cc b/libinterp/dldfcn/__glpk__.cc
--- a/libinterp/dldfcn/__glpk__.cc
+++ b/libinterp/dldfcn/__glpk__.cc
@@ -336,24 +336,24 @@ glpk (int sense, int n, int m, double *c
   while (0)
 
 DEFUN_DLD (__glpk__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{values}] =} __glpk__ (@var{args})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
-  // The list of values to return.  See the declaration in oct-obj.h
   octave_value_list retval;
 
 #if defined (HAVE_GLPK)
 
-  int nrhs = args.length ();
+  int nargin = args.length ();
 
-  if (nrhs != 9)
+  // FIXME: Should we even need checking for an internal function?
+  if (nargin != 9)
     print_usage ();
 
   //-- 1nd Input. A column array containing the objective function
   //--            coefficients.
   volatile int mrowsc = args(0).rows ();
 
   Matrix C = args(0).xmatrix_value ("__glpk__: invalid value of C");
 
diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -1579,16 +1579,17 @@ DEFUN_DLD (__magick_ping__, args, ,
 Ping image information with GraphicsMagick or ImageMagick.\n\
 \n\
 This is a private internal function not intended for direct use.\n\
 \n\
 @seealso{imfinfo}\n\
 @end deftypefn")
 {
   octave_value retval;
+
 #ifndef HAVE_MAGICK
   gripe_disabled_feature ("imfinfo", "Image IO");
 #else
   maybe_initialize_magick ();
 
   if (args.length () < 1 || ! args(0).is_string ())
     print_usage ();
 
@@ -2249,16 +2250,17 @@ DEFUN_DLD (__magick_formats__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __magick_imformats__ (@var{formats})\n\
 Fill formats info with GraphicsMagick CoderInfo.\n\
 \n\
 @seealso{imfinfo, imformats, imread, imwrite}\n\
 @end deftypefn")
 {
   octave_value retval;
+
 #ifndef HAVE_MAGICK
   gripe_disabled_feature ("imformats", "Image IO");
 #else
   if (args.length () != 1 || ! args(0).is_map ())
     print_usage ();
 
   octave_map formats = args(0).map_value ();
 
diff --git a/libinterp/dldfcn/__osmesa_print__.cc b/libinterp/dldfcn/__osmesa_print__.cc
--- a/libinterp/dldfcn/__osmesa_print__.cc
+++ b/libinterp/dldfcn/__osmesa_print__.cc
@@ -90,17 +90,17 @@ instead.\n\
   octave_value_list retval;
 
 #if ! defined (HAVE_OSMESA)
   gripe_disabled_feature ("__osmesa_print__", "offscreen rendering");
 #else
 
   int nargin = args.length ();
 
-  if (! (nargin == 1 || nargin == 3))
+  if (nargin != 1 && nargin != 3)
     print_usage ();
 
   if (nargin == 3)
     {
       if (! (args(1).is_string () && args(2).is_string ()))
         {
           error ("__osmesa_print__: FILE and TERM must be strings");
           return retval;
diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -2345,17 +2345,17 @@ Undocumented internal function.\n\
 {
   octave_value retval;
 
 #ifdef HAVE_PORTAUDIO
 
   audiorecorder *recorder = get_recorder (args(0));
 
   if (! recorder)
-      print_usage ();
+    print_usage ();
 
   if (args.length () == 1)
     recorder->record ();
   else if (args.length () == 2)
     {
       recorder->set_end_sample (args(1).int_value () * recorder->get_fs ());
       recorder->record ();
     }
diff --git a/libinterp/dldfcn/chol.cc b/libinterp/dldfcn/chol.cc
--- a/libinterp/dldfcn/chol.cc
+++ b/libinterp/dldfcn/chol.cc
@@ -778,19 +778,19 @@ On return, @var{info} is set to\n\
 \n\
 @item 2 if @var{R} is singular.\n\
 @end itemize\n\
 \n\
 If @var{info} is not present, an error message is printed in cases 1 and 2.\n\
 @seealso{chol, cholupdate, choldelete, cholshift}\n\
 @end deftypefn")
 {
-  octave_idx_type nargin = args.length ();
+  octave_value_list retval;
 
-  octave_value_list retval;
+  octave_idx_type nargin = args.length ();
 
   if (nargin != 3)
     print_usage ();
 
   octave_value argr = args(0);
   octave_value argj = args(1);
   octave_value argu = args(2);
 
@@ -1025,19 +1025,19 @@ DEFUN_DLD (choldelete, args, ,
 @deftypefn {Loadable Function} {@var{R1} =} choldelete (@var{R}, @var{j})\n\
 Given a Cholesky@tie{}factorization of a real symmetric or complex Hermitian\n\
 positive definite matrix @w{@var{A} = @var{R}'*@var{R}}, @var{R}@tie{}upper\n\
 triangular, return the Cholesky@tie{}factorization of @w{A(p,p)}, where\n\
 @w{p = [1:j-1,j+1:n+1]}.\n\
 @seealso{chol, cholupdate, cholinsert, cholshift}\n\
 @end deftypefn")
 {
-  octave_idx_type nargin = args.length ();
+  octave_value_list retval;
 
-  octave_value_list retval;
+  octave_idx_type nargin = args.length ();
 
   if (nargin != 2)
     print_usage ();
 
   octave_value argr = args(0);
   octave_value argj = args(1);
 
   if (argr.is_numeric_type () && argj.is_real_scalar ())
@@ -1159,19 +1159,19 @@ triangular, return the Cholesky@tie{}fac
 @w{@var{A}(p,p)}, where @w{p} is the permutation @*\n\
 @code{p = [1:i-1, shift(i:j, 1), j+1:n]} if @w{@var{i} < @var{j}} @*\n\
  or @*\n\
 @code{p = [1:j-1, shift(j:i,-1), i+1:n]} if @w{@var{j} < @var{i}}.  @*\n\
 \n\
 @seealso{chol, cholupdate, cholinsert, choldelete}\n\
 @end deftypefn")
 {
-  octave_idx_type nargin = args.length ();
+  octave_value_list retval;
 
-  octave_value_list retval;
+  octave_idx_type nargin = args.length ();
 
   if (nargin != 3)
     print_usage ();
 
   octave_value argr = args(0);
   octave_value argi = args(1);
   octave_value argj = args(2);
 
diff --git a/libinterp/dldfcn/dmperm.cc b/libinterp/dldfcn/dmperm.cc
--- a/libinterp/dldfcn/dmperm.cc
+++ b/libinterp/dldfcn/dmperm.cc
@@ -148,18 +148,18 @@ triangular form.  The values of @var{r} 
 of the blocks.  If @var{S} is square then @code{@var{r} == @var{S}}.\n\
 \n\
 The method used is described in: @nospell{A. Pothen & C.-J. Fan.}\n\
 @cite{Computing the Block Triangular Form of a Sparse Matrix}.\n\
 ACM Trans. Math. Software, 16(4):303-324, 1990.\n\
 @seealso{colamd, ccolamd}\n\
 @end deftypefn")
 {
+  octave_value_list retval;
   int nargin = args.length ();
-  octave_value_list retval;
 
   if (nargin != 1)
     print_usage ();
 
 #if HAVE_CXSPARSE
   retval = dmperm_internal (false, args(0), nargout);
 #else
   error ("dmperm: not available in this version of Octave");
@@ -194,18 +194,18 @@ Calculate the structural rank of the spa
 Note that only the structure of the matrix is used in this calculation based\n\
 on a @nospell{Dulmage-Mendelsohn} permutation to block triangular form.  As\n\
 such the numerical rank of the matrix @var{S} is bounded by\n\
 @code{sprank (@var{S}) >= rank (@var{S})}.  Ignoring floating point errors\n\
 @code{sprank (@var{S}) == rank (@var{S})}.\n\
 @seealso{dmperm}\n\
 @end deftypefn")
 {
+  octave_value_list retval;
   int nargin = args.length ();
-  octave_value_list retval;
 
   if (nargin != 1)
     print_usage ();
 
 #if HAVE_CXSPARSE
   retval = dmperm_internal (true, args(0), nargout);
 #else
   error ("sprank: not available in this version of Octave");
diff --git a/libinterp/dldfcn/qr.cc b/libinterp/dldfcn/qr.cc
--- a/libinterp/dldfcn/qr.cc
+++ b/libinterp/dldfcn/qr.cc
@@ -751,18 +751,19 @@ updates; thus, for k large enough, it wi
 to recompute the factorization from scratch.\n\
 \n\
 The QR@tie{}factorization supplied may be either full (Q is square) or\n\
 economized (R is square).\n\
 \n\
 @seealso{qr, qrinsert, qrdelete, qrshift}\n\
 @end deftypefn")
 {
+  octave_value_list retval;
+
   octave_idx_type nargin = args.length ();
-  octave_value_list retval;
 
   if (nargin != 4)
     print_usage ();
 
   octave_value argq = args(0);
   octave_value argr = args(1);
   octave_value argu = args(2);
   octave_value argv = args(3);
@@ -936,18 +937,19 @@ recompute the factorization from scratch
 \n\
 If @var{orient} is @qcode{\"col\"}, the QR@tie{}factorization supplied may\n\
 be either full (Q is square) or economized (R is square).\n\
 \n\
 If @var{orient} is @qcode{\"row\"}, full factorization is needed.\n\
 @seealso{qr, qrupdate, qrdelete, qrshift}\n\
 @end deftypefn")
 {
+  octave_value_list retval;
+
   octave_idx_type nargin = args.length ();
-  octave_value_list retval;
 
   if (nargin < 4 || nargin > 5)
     print_usage ();
 
   octave_value argq = args(0);
   octave_value argr = args(1);
   octave_value argj = args(2);
   octave_value argx = args(3);
@@ -1152,18 +1154,18 @@ and more accurate to recompute the facto
 \n\
 If @var{orient} is @qcode{\"col\"}, the QR@tie{}factorization supplied may\n\
 be either full (Q is square) or economized (R is square).\n\
 \n\
 If @var{orient} is @qcode{\"row\"}, full factorization is needed.\n\
 @seealso{qr, qrupdate, qrinsert, qrshift}\n\
 @end deftypefn")
 {
+  octave_value_list retval;
   octave_idx_type nargin = args.length ();
-  octave_value_list retval;
 
   if (nargin < 3 || nargin > 4)
     print_usage ();
 
   octave_value argq = args(0);
   octave_value argr = args(1);
   octave_value argj = args(2);
 
@@ -1401,18 +1403,18 @@ Given a QR@tie{}factorization of a real 
 of @w{@var{A}(:,p)}, where @w{p} is the permutation @*\n\
 @code{p = [1:i-1, shift(i:j, 1), j+1:n]} if @w{@var{i} < @var{j}} @*\n\
  or @*\n\
 @code{p = [1:j-1, shift(j:i,-1), i+1:n]} if @w{@var{j} < @var{i}}.  @*\n\
 \n\
 @seealso{qr, qrupdate, qrinsert, qrdelete}\n\
 @end deftypefn")
 {
+  octave_value_list retval;
   octave_idx_type nargin = args.length ();
-  octave_value_list retval;
 
   if (nargin != 4)
     print_usage ();
 
   octave_value argq = args(0);
   octave_value argr = args(1);
   octave_value argi = args(2);
   octave_value argj = args(3);
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -19,17 +19,17 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 /*
 We are using the pure parser interface and the reentrant lexer
 interface but the Octave parser and lexer are NOT properly
 reentrant because both still use many global variables.  It should be
-safe to create a parser object and call it while anotehr parser
+safe to create a parser object and call it while another parser
 object is active (to parse a callback function while the main
 interactive parser is waiting for input, for example) if you take
 care to properly save and restore (typically with an unwind_protect
 object) relevant global values before and after the nested call.
 */
 
 %option prefix = "octave_"
 %option noyywrap
@@ -1907,57 +1907,61 @@ DEFUN (iskeyword, args, ,
 Return true if @var{name} is an Octave keyword.\n\
 \n\
 If @var{name} is omitted, return a list of keywords.\n\
 @seealso{isvarname, exist}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  int argc = args.length () + 1;
-
-  string_vector argv = args.make_argv ("iskeyword");
-
-  if (argc < 1 || argc > 2)
+  int nargin = args.length ();
+
+  if (nargin > 1)
     print_usage ();
 
-  if (argc == 1)
+  if (nargin == 0)
     {
-      // Neither set and get are keywords.  See the note in the
+      // Neither set nor get are keywords.  See the note in the
       // is_keyword function for additional details.
 
       string_vector lst (TOTAL_KEYWORDS);
 
       int j = 0;
 
       for (int i = 0; i < TOTAL_KEYWORDS; i++)
         {
-          std::string tmp = wordlist[i].name;
-
-          if (! (tmp == "set" || tmp == "get"))
-            lst[j++] = tmp;
+          std::string kword = wordlist[i].name;
+
+          if (kword != "set" && kword != "get")
+            lst[j++] = kword;
         }
 
       lst.resize (j);
 
       retval = Cell (lst.sort ());
     }
-  else if (argc == 2)
+  else
     {
-      retval = is_keyword (argv[1]);
+      std::string name = args(0).xstring_value ("iskeyword: NAME must be a string");
+      retval = is_keyword (name);
     }
 
   return retval;
 }
 
 /*
 
 %!assert (iskeyword ("for"))
 %!assert (iskeyword ("fort"), false)
 %!assert (iskeyword ("fft"), false)
+%!assert (iskeyword ("get"), false)
+%!assert (iskeyword ("set"), false)
+
+%!error iskeyword ("A", "B")
+%!error <NAME must be a string> iskeyword (1)
 
 */
 
 DEFUN (__display_tokens__, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __display_tokens__ ()\n\
 Query or set the internal variable that determines whether Octave's\n\
 lexer displays tokens as they are read.\n\
