# HG changeset patch
# User jwe
# Date 858056134 0
#      Tue Mar 11 04:55:34 1997 +0000
# Node ID 68e6d0c93fc8de97cf188a2fa13223929ee96fa5
# Parent  eedc2f3f61f79961185372dc9dd1f637b6eb02b7
[project @ 1997-03-11 04:52:44 by jwe]

diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -101,20 +101,21 @@ int current_input_column = 1;
 
 // Buffer for help text snagged from function files.
 string help_buf;
 
 // Forward declarations for some functions defined at the bottom of
 // the file.
 
 // Generic error messages.
-static void yyerror (char *s);
+static void yyerror (const char *s);
 
 // Error mesages for mismatched end tokens.
-static void end_error (char *type, token::end_tok_type ettype, int l, int c);
+static void end_error
+	(const char *type, token::end_tok_type ettype, int l, int c);
 
 // Check to see that end tokens are properly matched.
 static int check_end (token *tok, token::end_tok_type expected);
 
 // Try to figure out early if an expression should become an
 // assignment to the built-in variable ans.
 static tree_expression *maybe_convert_to_ans_assign (tree_expression *expr);
 
@@ -1213,17 +1214,17 @@ opt_sep		: // empty
 		  { $$ = $1; }
 		;
 
 %%
 
 // Generic error messages.
 
 static void
-yyerror (char *s)
+yyerror (const char *s)
 {
   int err_col = current_input_column - 1;
 
   ostrstream output_buf;
 
   if (reading_fcn_file || reading_script_file)
     output_buf << "parse error near line " << input_line_number
 	       << " of file " << curr_fcn_file_full_name;
@@ -1262,19 +1263,20 @@ yyerror (char *s)
   parse_error ("%s", msg);
 
   delete [] msg;
 }
 
 // Error mesages for mismatched end tokens.
 
 static void
-end_error (char *type, token::end_tok_type ettype, int l, int c)
+end_error (const char *type, token::end_tok_type ettype, int l, int c)
 {
-  static char *fmt = "`%s' command matched by `%s' near line %d column %d";
+  static const char *fmt
+    = "`%s' command matched by `%s' near line %d column %d";
 
   switch (ettype)
     {
     case token::simple_end:
       error (fmt, type, "end", l, c);
       break;
 
     case token::for_end:
@@ -1689,21 +1691,21 @@ make_binary_op (int op, tree_expression 
       t = tree_binary_expression::cmp_gt;
       break;
 
     case EXPR_NE:
       t = tree_binary_expression::cmp_ne;
       break;
 
     case EXPR_AND:
-      t = tree_binary_expression::and;
+      t = tree_binary_expression::el_and;
       break;
 
     case EXPR_OR:
-      t = tree_binary_expression::or;
+      t = tree_binary_expression::el_or;
       break;
 
     default:
       panic_impossible ();
       break;
     }
 
   int l = tok_val->line ();
@@ -1721,21 +1723,21 @@ static tree_expression *
 make_boolean_op (int op, tree_expression *op1, token *tok_val,
 		 tree_expression *op2)
 {
   tree_boolean_expression::type t;
 
   switch (op)
     {
     case EXPR_AND_AND:
-      t = tree_boolean_expression::and;
+      t = tree_boolean_expression::bool_and;
       break;
 
     case EXPR_OR_OR:
-      t = tree_boolean_expression::or;
+      t = tree_boolean_expression::bool_or;
       break;
 
     default:
       panic_impossible ();
       break;
     }
 
   int l = tok_val->line ();
@@ -1816,17 +1818,17 @@ make_unary_op (int op, tree_expression *
       t = tree_unary_expression::hermitian;
       break;
 
     case TRANSPOSE:
       t = tree_unary_expression::transpose;
       break;
 
     case EXPR_NOT:
-      t = tree_unary_expression::not;
+      t = tree_unary_expression::unot;
       break;
 
     case '-':
       t = tree_unary_expression::uminus;
       break;
 
     default:
       panic_impossible ();
diff --git a/src/pt-exp-base.h b/src/pt-exp-base.h
--- a/src/pt-exp-base.h
+++ b/src/pt-exp-base.h
@@ -42,17 +42,17 @@ public:
 
   enum type
     {
       unknown,
       assignment,
       simple_assignment,
       multi_assignment,
       colon,
-      index,
+      index
    };
 
   tree_expression (int l = -1, int c = -1, type et = unknown)
     : tree (l, c), in_parens (0), etype (et) { }
 
   virtual ~tree_expression (void) { }
 
   virtual bool is_constant (void) const
@@ -84,17 +84,17 @@ public:
   virtual void mark_in_parens (void) { in_parens++; }
 
   virtual bool is_in_parens (void) { return in_parens; }
 
   virtual void mark_for_possible_ans_assign (void);
 
   virtual octave_value eval (bool print) = 0;
 
-  virtual char *oper (void) const { return "<unknown>"; }
+  virtual const char *oper (void) const { return "<unknown>"; }
 
   virtual string original_text (void) const;
 
 protected:
 
   // Nonzero if this expression appears inside parentheses.
   int in_parens;
 
diff --git a/src/pt-exp.cc b/src/pt-exp.cc
--- a/src/pt-exp.cc
+++ b/src/pt-exp.cc
@@ -97,20 +97,20 @@ tree_prefix_expression::eval (bool print
 	      if (error_state)
 		eval_error ();
 	    }
 	}
     }
   return retval;
 }
 
-char *
+const char *
 tree_prefix_expression::oper (void) const
 {
-  static char *op;
+  static const char *op;
   switch (etype)
     {
     case increment:
       op = "++";
       break;
 
     case decrement:
       op = "--";
@@ -122,22 +122,18 @@ tree_prefix_expression::oper (void) cons
     }
   return op;
 }
 
 void
 tree_prefix_expression::eval_error (void)
 {
   if (error_state > 0)
-    {
-      char *op = oper ();
-
-      ::error ("evaluating prefix operator `%s' near line %d, column %d",
-	       op, line (), column ());
-    }
+    ::error ("evaluating prefix operator `%s' near line %d, column %d",
+	     oper (), line (), column ());
 }
 
 void
 tree_prefix_expression::accept (tree_walker& tw)
 {
   tw.visit_prefix_expression (*this);
 }
 
@@ -180,20 +176,20 @@ tree_postfix_expression::eval (bool prin
 	  retval = octave_value ();
 	  if (error_state)
 	    eval_error ();
 	}
     }
   return retval;
 }
 
-char *
+const char *
 tree_postfix_expression::oper (void) const
 {
-  static char *op;
+  static const char *op;
   switch (etype)
     {
     case increment:
       op = "++";
       break;
 
     case decrement:
       op = "--";
@@ -205,22 +201,18 @@ tree_postfix_expression::oper (void) con
     }
   return op;
 }
 
 void
 tree_postfix_expression::eval_error (void)
 {
   if (error_state > 0)
-    {
-      char *op = oper ();
-
-      ::error ("evaluating postfix operator `%s' near line %d, column %d",
-	       op, line (), column ());
-    }
+    ::error ("evaluating postfix operator `%s' near line %d, column %d",
+	     oper (), line (), column ());
 }
 
 void
 tree_postfix_expression::accept (tree_walker& tw)
 {
   tw.visit_postfix_expression (*this);
 }
 
@@ -239,17 +231,17 @@ tree_unary_expression::eval (bool /* pri
       octave_value u = op->eval (false);
 
       if (error_state)
 	eval_error ();
       else if (u.is_defined ())
 	{
 	  switch (etype)
 	    {
-	    case not:
+	    case unot:
 	      retval = u.not ();
 	      break;
 
 	    case uminus:
 	      retval = u.uminus ();
 	      break;
 
 	    case transpose:
@@ -271,23 +263,23 @@ tree_unary_expression::eval (bool /* pri
 	      eval_error ();
 	    }
 	}
     }
 
   return retval;
 }
 
-char *
+const char *
 tree_unary_expression::oper (void) const
 {
-  static char *op;
+  static const char *op;
   switch (etype)
     {
-    case not:
+    case unot:
       op = "!";
       break;
 
     case uminus:
       op = "-";
       break;
 
     case transpose:
@@ -304,22 +296,18 @@ tree_unary_expression::oper (void) const
     }
   return op;
 }
 
 void
 tree_unary_expression::eval_error (void)
 {
   if (error_state > 0)
-    {
-      char *op = oper ();
-
-      ::error ("evaluating unary operator `%s' near line %d, column %d",
-	       op, line (), column ());
-    }
+    ::error ("evaluating unary operator `%s' near line %d, column %d",
+	     oper (), line (), column ());
 }
 
 void
 tree_unary_expression::accept (tree_walker& tw)
 {
   tw.visit_unary_expression (*this);
 }
 
@@ -410,21 +398,21 @@ tree_binary_expression::eval (bool /* pr
 		case cmp_gt:
 		  op = octave_value::gt;
 		  break;
 
 		case cmp_ne:
 		  op = octave_value::ne;
 		  break;
 
-		case and:
+		case el_and:
 		  op = octave_value::el_and;
 		  break;
 
-		case or:
+		case el_or:
 		  op = octave_value::el_or;
 		  break;
 
 		default:
 		  ::error ("binary operator %d not implemented", etype);
 		  break;
 		}
 
@@ -443,20 +431,20 @@ tree_binary_expression::eval (bool /* pr
 	eval_error ();
     }
   else
     eval_error ();
 
   return retval;
 }
 
-char *
+const char *
 tree_binary_expression::oper (void) const
 {
-  static char *op;
+  static const char *op;
   switch (etype)
     {
     case add:
       op = "+";
       break;
 
     case subtract:
       op = "-";
@@ -513,41 +501,37 @@ tree_binary_expression::oper (void) cons
     case cmp_gt:
       op = ">";
       break;
 
     case cmp_ne:
       op = "!=";
       break;
 
-    case and:
+    case el_and:
       op = "&";
       break;
 
-    case or:
+    case el_or:
       op = "|";
       break;
 
     default:
       op = "<unknown>";
       break;
     }
   return op;
 }
 
 void
 tree_binary_expression::eval_error (void)
 {
   if (error_state > 0)
-    {
-      char *op = oper ();
-
-      ::error ("evaluating binary operator `%s' near line %d, column %d",
-	       op, line (), column ());
-    }
+    ::error ("evaluating binary operator `%s' near line %d, column %d",
+	     oper (), line (), column ());
 }
 
 void
 tree_binary_expression::accept (tree_walker& tw)
 {
   tw.visit_binary_expression (*this);
 }
 
@@ -574,25 +558,25 @@ tree_boolean_expression::eval (bool /* p
 	  bool a_true = a.is_true ();
 
 	  if (error_state)
 	    eval_error ();
 	  else
 	    {
 	      if (a_true)
 		{
-		  if (etype == or)
+		  if (etype == bool_or)
 		    {
 		      result = true;
 		      goto done;
 		    }
 		}
 	      else
 		{
-		  if (etype == and)
+		  if (etype == bool_and)
 		    goto done;
 		}
 
 	      if (op_rhs)
 		{
 		  octave_value b = op_rhs->eval (false);
 
 		  if (error_state)
@@ -616,27 +600,27 @@ tree_boolean_expression::eval (bool /* p
 	}
     }
   else
     eval_error ();
 
   return retval;
 }
 
-char *
+const char *
 tree_boolean_expression::oper (void) const
 {
-  static char *op;
+  static const char *op;
   switch (etype)
     {
-    case and:
+    case bool_and:
       op = "&&";
       break;
 
-    case or:
+    case bool_or:
       op = "||";
       break;
 
     default:
       op = "<unknown>";
       break;
     }
   return op;
diff --git a/src/pt-exp.h b/src/pt-exp.h
--- a/src/pt-exp.h
+++ b/src/pt-exp.h
@@ -63,17 +63,17 @@ public:
 
   octave_value eval (bool print);
 
   void eval_error (void);
 
   bool is_prefix_expression (void) const
     { return true; }
 
-  char *oper (void) const;
+  const char *oper (void) const;
 
   tree_identifier *ident (void) { return id; }
 
   void accept (tree_walker& tw);
 
 private:
 
   // Currently, a prefix expression can only apply to an identifier.
@@ -105,17 +105,17 @@ public:
     : tree_expression (l, c), id (i), etype (t) { }
 
   ~tree_postfix_expression (void);
 
   octave_value eval (bool print);
 
   void eval_error (void);
 
-  char *oper (void) const;
+  const char *oper (void) const;
 
   tree_identifier *ident (void) { return id; }
 
   void accept (tree_walker& tw);
 
 private:
 
   // Currently, a prefix expression can only apply to an identifier.
@@ -130,17 +130,16 @@ private:
 class
 tree_unary_expression : public tree_expression
 {
 public:
 
   enum type
     {
       unknown,
-      not,
       unot,
       uminus,
       hermitian,
       transpose
     };
 
   tree_unary_expression (int l = -1, int c = -1, type t = unknown)
     : tree_expression (l, c), op (0), etype (t) { }
@@ -151,19 +150,19 @@ public:
 
   ~tree_unary_expression (void)
     { delete op; }
 
   octave_value eval (bool print);
 
   void eval_error (void);
 
-  char *oper (void) const;
+  const char *oper (void) const;
 
-  bool is_prefix_op (void) { return (etype == not || etype == uminus); }
+  bool is_prefix_op (void) { return (etype == unot || etype == uminus); }
 
   tree_expression *operand (void) { return op; }
 
   void accept (tree_walker& tw);
 
 private:
 
   // The operand for the expression.
@@ -194,18 +193,18 @@ public:
       power,
       elem_pow,
       cmp_lt,
       cmp_le,
       cmp_eq,
       cmp_ge,
       cmp_gt,
       cmp_ne,
-      and,
-      or
+      el_and,
+      el_or
     };
 
   tree_binary_expression (int l = -1, int c = -1, type t = unknown)
     : tree_expression (l, c), op_lhs (0), op_rhs (0), etype (t) { }
 
   tree_binary_expression (tree_expression *a, tree_expression *b,
 			  int l = -1, int c = -1, type t = unknown)
     : tree_expression (l, c), op_lhs (a), op_rhs (b), etype (t) { }
@@ -215,17 +214,17 @@ public:
       delete op_lhs;
       delete op_rhs;
     }
 
   octave_value eval (bool print);
 
   void eval_error (void);
 
-  char *oper (void) const;
+  const char *oper (void) const;
 
   tree_expression *lhs (void) { return op_lhs; }
   tree_expression *rhs (void) { return op_rhs; }
 
   void accept (tree_walker& tw);
 
 protected:
 
@@ -244,32 +243,32 @@ private:
 class
 tree_boolean_expression : public tree_binary_expression
 {
 public:
 
   enum type
     {
       unknown,
-      and,
-      or
+      bool_and,
+      bool_or
     };
 
   tree_boolean_expression (int l = -1, int c = -1, type t)
     : tree_binary_expression (l, c), etype (t) { }
 
   tree_boolean_expression (tree_expression *a, tree_expression *b,
 			   int l = -1, int c = -1, type t = unknown)
     : tree_binary_expression (a, b, l, c), etype (t) { }
 
   ~tree_boolean_expression (void) { }
 
   octave_value eval (bool print);
 
-  char *oper (void) const;
+  const char *oper (void) const;
 
 private:
 
   // The type of the expression.
   type etype;
 };
 
 // Simple assignment expressions.
diff --git a/src/pt-mvr.cc b/src/pt-mvr.cc
--- a/src/pt-mvr.cc
+++ b/src/pt-mvr.cc
@@ -219,17 +219,17 @@ tree_index_expression::eval (bool print,
 
 void
 tree_index_expression::eval_error (void)
 {
   if (error_state > 0)
     {
       int l = line ();
       int c = column ();
-      char *fmt;
+      const char *fmt;
       if (l != -1 && c != -1)
 	{
 	  if (list)
 	    fmt = "evaluating index expression near line %d, column %d";
 	  else
 	    fmt = "evaluating expression near line %d, column %d";
 
 	  ::error (fmt, l, c);
