# HG changeset patch
# User jwe
# Date 984086493 0
#      Thu Mar 08 21:21:33 2001 +0000
# Node ID e4e25cdb67866fdf215219950b1bbe22aa7609d7
# Parent  ae32674080b011a4d58368f071dfb77c19294754
[project @ 2001-03-08 21:21:29 by jwe]

diff --git a/readline/CHANGELOG b/readline/CHANGELOG
--- a/readline/CHANGELOG
+++ b/readline/CHANGELOG
@@ -440,8 +440,17 @@ configure.in
 examples/Makefile.in
 	- build histexamp as part of the examples
 
 				    2/5
 				    ---
 doc/Makefile.in
 	- don't remove the dvi, postscript, html, info, and text `objects'
 	  on a `make distclean', only on a `make maintainer-clean'
+
+				    3/6
+				    ---
+doc/history.{0,3}, doc/history_3.ps
+	- new manual page for history library
+
+doc/Makefile.in
+	- rules to install and uninstall history.3 in ${man3dir}
+	- rules to build history.0 and history_3.ps
diff --git a/readline/CHANGES b/readline/CHANGES
--- a/readline/CHANGES
+++ b/readline/CHANGES
@@ -79,16 +79,27 @@ x.  Fixed a file descriptor leak in the 
 
 y.  Changes to make all of the exported readline functions declared in
     readline.h have an rl_ prefix (rltty_set_default_bindings is now
     rl_tty_set_default_bindings, crlf is now rl_crlf, etc.)
 
 z.  The formatted documentation included in the base readline distribution
     is no longer removed on a `make distclean'.
 
+aa. Some changes were made to avoid gcc warnings with -Wall.
+
+bb. rl_get_keymap_by_name now finds keymaps case-insensitively, so
+    `set keymap EMACS' works.
+
+cc. The history file writing and truncation functions now return a useful
+    status on error.
+
+dd. Fixed a bug that could cause applications to dereference a NULL pointer
+    if a NULL second argument was passed to history_expand().
+
 2.  New Features in Readline
 
 a.  The blink timeout for paren matching is now settable by applications.
 
 b.  _rl_executing_macro has been renamed to rl_executing_macro, which means
     it's now part of the public interface.
 
 c.  Readline has a new variable, rl_readline_state, which is a bitmap that
@@ -114,16 +125,31 @@ h.  New application-callable function rl
     dimensions.
 
 i.  The history example program (examples/histexamp.c) is now built as one
     of the examples.
 
 j.  The documentation has been updated to cover nearly all of the public
     functions and variables declared in readline.h.
 
+k.  New function, rl_get_screen_size (int *rows, int *columns), returns
+    readline's idea of the screen dimensions.
+
+l.  The timeout in rl_gather_tyi (readline keyboard input polling function)
+    is now settable via a function (rl_set_keyboard_input_timeout()).
+
+m.  Renamed the max_input_history variable to history_max_entries; the old
+    variable is maintained for backwards compatibility.
+
+n.  The list of characters that separate words for the history tokenizer is
+    now settable with a variable:  history_word_delimiters.  The default
+    value is as before.
+
+o.  There is a new history.3 manual page documenting the history library.
+
 -------------------------------------------------------------------------------
 This document details the changes between this version, readline-4.1,
 and the previous version, readline-4.0.
 
 1.  Changes to Readline
 
 a.  Changed the HTML documents so that the table-of-contents is no longer
     a separate file.
diff --git a/readline/ChangeLog b/readline/ChangeLog
--- a/readline/ChangeLog
+++ b/readline/ChangeLog
@@ -1,8 +1,14 @@
+2001-03-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Makefile.in (install, uninstall): For Octave, do nothing.
+
+	* Update to readline-4.2-beta2.
+
 2001-02-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* skip-autoheader: New file.
 
 2001-02-06  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* terminal.c (rl_get_screen_size): New function.
 	* readline.h: Provide declaration.
diff --git a/readline/MANIFEST b/readline/MANIFEST
--- a/readline/MANIFEST
+++ b/readline/MANIFEST
@@ -82,16 +82,17 @@ doc/manvers.texinfo	f
 doc/rlman.texinfo	f
 doc/rltech.texinfo	f
 doc/rluser.texinfo	f
 doc/rluserman.texinfo	f
 doc/hist.texinfo	f
 doc/hstech.texinfo	f
 doc/hsuser.texinfo	f
 doc/readline.3		f
+doc/history.3		f
 doc/texi2dvi		f
 doc/texi2html		f
 examples/Makefile.in	f
 examples/excallback.c	f
 examples/fileman.c	f
 examples/manexamp.c	f
 examples/rlfe.c		f
 examples/rltest.c	f
@@ -108,9 +109,11 @@ doc/history.dvi		f
 doc/rluserman.dvi	f
 doc/readline.info	f
 doc/history.info	f
 doc/rluserman.info	f
 doc/readline.html	f
 doc/history.html	f
 doc/rluserman.html	f
 doc/readline.0		f
+doc/history.0		f
 doc/readline_3.ps	f
+doc/history_3.ps	f
diff --git a/readline/Makefile.in b/readline/Makefile.in
--- a/readline/Makefile.in
+++ b/readline/Makefile.in
@@ -188,18 +188,16 @@ install-headers: installdirs ${INSTALLED
 	done
 
 uninstall-headers:
 	-test -n "$(includedir)" && cd $(includedir)/readline && \
 		${RM} ${INSTALLED_HEADERS}
 
 maybe-uninstall-headers: uninstall-headers
 
-# For Octave, do nothing for these.
-
 install uninstall:
 
 #install: installdirs $(STATIC_LIBS) install-headers
 #	-$(MV) $(libdir)/libreadline.a $(libdir)/libreadline.old
 #	$(INSTALL_DATA) libreadline.a $(libdir)/libreadline.a
 #	-test -n "$(RANLIB)" && $(RANLIB) $(libdir)/libreadline.a
 #	-$(MV) $(libdir)/libhistory.a $(libdir)/libhistory.old
 #	$(INSTALL_DATA) libhistory.a $(libdir)/libhistory.a
diff --git a/readline/bind.c b/readline/bind.c
--- a/readline/bind.c
+++ b/readline/bind.c
@@ -1557,17 +1557,17 @@ static struct {
 
 Keymap
 rl_get_keymap_by_name (name)
      const char *name;
 {
   register int i;
 
   for (i = 0; keymap_names[i].name; i++)
-    if (strcmp (name, keymap_names[i].name) == 0)
+    if (_rl_stricmp (name, keymap_names[i].name) == 0)
       return (keymap_names[i].map);
   return ((Keymap) NULL);
 }
 
 char *
 rl_get_keymap_name (map)
      Keymap map;
 {
diff --git a/readline/compat.c b/readline/compat.c
--- a/readline/compat.c
+++ b/readline/compat.c
@@ -30,16 +30,17 @@
 #include "rlstdc.h"
 #include "rltypedefs.h"
 
 extern void rl_free_undo_list __P((void));
 extern int rl_maybe_save_line __P((void));
 extern int rl_maybe_unsave_line __P((void));
 extern int rl_maybe_replace_line __P((void));
 
+extern int rl_crlf __P((void));
 extern int rl_ding __P((void));
 extern int rl_alphabetic __P((int));
 
 extern char **rl_completion_matches __P((const char *, rl_compentry_func_t *));
 extern char *rl_username_completion_function __P((const char *, int));
 extern char *rl_filename_completion_function __P((const char *, int));
 
 /* Provide backwards-compatible entry points for old function names. */
diff --git a/readline/complete.c b/readline/complete.c
--- a/readline/complete.c
+++ b/readline/complete.c
@@ -85,17 +85,16 @@ rl_compdisp_func_t *rl_completion_displa
 #if defined (VISIBLE_STATS)
 #  if !defined (X_OK)
 #    define X_OK 1
 #  endif
 static int stat_char __P((char *));
 #endif
 
 static char *rl_quote_filename __P((char *, int, char *));
-static char *rl_strpbrk __P((const char *, const char *));
 
 static char **remove_duplicate_matches __P((char **));
 static void insert_match __P((char *, int, int, char *));
 static int append_to_match __P((char *, int, int));
 static void insert_all_matches __P((char **, int, char *));
 static void display_matches __P((char **));
 static int compute_lcd_of_matches __P((char **, int, const char *));
 
@@ -292,35 +291,16 @@ rl_insert_completions (ignore, invoking_
 }
 
 /************************************/
 /*				    */
 /*    Completion utility functions  */
 /*				    */
 /************************************/
 
-/* Find the first occurrence in STRING1 of any character from STRING2.
-   Return a pointer to the character in STRING1. */
-static char *
-rl_strpbrk (string1, string2)
-     const char *string1, *string2;
-{
-  register const char *scan;
-
-  for (; *string1; string1++)
-    {
-      for (scan = string2; *scan; scan++)
-	{
-	  if (*string1 == *scan)
-	    return ((char *)string1);
-	}
-    }
-  return ((char *)NULL);
-}
-
 /* The user must press "y" or "n". Non-zero return means "y" pressed. */
 static int
 get_y_or_n ()
 {
   int c;
 
   for (;;)
     {
@@ -1071,17 +1051,17 @@ make_quoted_replacement (match, mtype, q
 		     (rl_completer_quote_characters && strchr (rl_completer_quote_characters, *qc)));
 
   if (should_quote)
     {
       /* If there is a single match, see if we need to quote it.
          This also checks whether the common prefix of several
 	 matches needs to be quoted. */
       should_quote = rl_filename_quote_characters
-			? (rl_strpbrk (match, rl_filename_quote_characters) != 0)
+			? (_rl_strpbrk (match, rl_filename_quote_characters) != 0)
 			: 0;
 
       do_replace = should_quote ? mtype : NO_MATCH;
       /* Quote the replacement, since we found an embedded
 	 word break character in a potential match. */
       if (do_replace != NO_MATCH && rl_filename_quoting_function)
 	replacement = (*rl_filename_quoting_function) (match, do_replace, qc);
     }
diff --git a/readline/config.h.in b/readline/config.h.in
--- a/readline/config.h.in
+++ b/readline/config.h.in
@@ -1,14 +1,9 @@
-/* config.h.in.  */
-
-/* This file was created by hand, NOT autoheader.  There is no
-   config.h.bot file or acconfig.h file in the readline sources.  If
-   you run autoheader in this directory, you will end up with a
-   broken config.h.in file.  */
+/* config.h.in.  Maintained by hand. */
 
 /* Define if on MINIX.  */
 #undef _MINIX
 
 /* Define as the return type of signal handlers (int or void).  */
 #undef RETSIGTYPE
 
 /* Define if the `S_IS*' macros in <sys/stat.h> do not work properly.  */
@@ -124,17 +119,16 @@
 #undef HAVE_POSIX_SIGNALS
 
 #undef HAVE_USG_SIGHOLD
 
 #undef MUST_REINSTALL_SIGHANDLERS
 
 #undef HAVE_POSIX_SIGSETJMP
 
-/* config.h.bot */
 /* modify settings or make new ones based on what autoconf tells us. */
 
 /* Ultrix botches type-ahead when switching from canonical to
    non-canonical mode, at least through version 4.3 */
 #if !defined (HAVE_TERMIOS_H) || !defined (HAVE_TCGETATTR) || defined (ultrix)
 #  define TERMIOS_MISSING
 #endif
 
diff --git a/readline/doc/Makefile.in b/readline/doc/Makefile.in
--- a/readline/doc/Makefile.in
+++ b/readline/doc/Makefile.in
@@ -58,19 +58,19 @@ HISTSRC = $(srcdir)/hist.texinfo $(srcdi
 # This should be a program that converts troff to an ascii-readable format
 NROFF       = groff -Tascii
 
 # This should be a program that converts troff to postscript
 GROFF       = groff
 
 DVIOBJ = readline.dvi history.dvi rluserman.dvi
 INFOOBJ = readline.info history.info rluserman.info
-PSOBJ = readline.ps history.ps rluserman.ps readline_3.ps
+PSOBJ = readline.ps history.ps rluserman.ps readline_3.ps history_3.ps
 HTMLOBJ = readline.html history.html rluserman.html
-TEXTOBJ = readline.0
+TEXTOBJ = readline.0 history.0
 
 INTERMEDIATE_OBJ = rlman.dvi hist.dvi rluserman.dvi
 
 DIST_DOCS = $(DVIOBJ) $(PSOBJ) $(HTMLOBJ) $(INFOOBJ) $(TEXTOBJ)
 
 .SUFFIXES:      .0 .3 .ps .txt .dvi
 
 .3.0:
@@ -130,17 +130,23 @@ dvi:	$(DVIOBJ)
 ps:	$(PSOBJ)
 html:	$(HTMLOBJ)
 text:	$(TEXTOBJ)
 
 readline.0: readline.3
 
 readline_3.ps: readline.3
 	${RM} $@
-	${GROFF} -man < readline.3 > $@ 
+	${GROFF} -man < $(srcdir)/readline.3 > $@ 
+
+history.0: history.3
+
+history_3.ps: history.3
+	${RM} $@
+	${GROFF} -man < $(srcdir)/history.3 > $@ 
 
 clean:
 	$(RM) *.aux *.cp *.fn *.ky *.log *.pg *.toc *.tp *.vr *.cps *.pgs \
 	      *.fns *.kys *.tps *.vrs *.bt *.bts *.o core
 
 distclean: clean
 	$(RM) $(INTERMEDIATE_OBJ)
 	$(RM) Makefile
@@ -171,14 +177,16 @@ install:	installdirs
 	else \
 		${INSTALL_DATA} $(srcdir)/history.info $(infodir)/history.info; \
 	fi
 	-if $(SHELL) -c 'install-info --version' >/dev/null 2>&1; then \
 		install-info --dir-file=$(infodir)/dir $(infodir)/readline.info ; \
 		install-info --dir-file=$(infodir)/dir $(infodir)/history.info ; \
 	else true; fi
 	-${INSTALL_DATA} $(srcdir)/readline.3 $(man3dir)/readline.3
+	-${INSTALL_DATA} $(srcdir)/history.3 $(man3dir)/history.3
 
 uninstall:
 	$(RM) $(infodir)/readline.info
 	$(RM) $(infodir)/rluserman.info
 	$(RM) $(infodir)/history.info
 	$(RM) $(man3dir)/readline.3
+	$(RM) $(man3dir)/history.3
diff --git a/readline/doc/hstech.texinfo b/readline/doc/hstech.texinfo
--- a/readline/doc/hstech.texinfo
+++ b/readline/doc/hstech.texinfo
@@ -92,34 +92,36 @@ The history list itself might therefore 
 
 @example
 HIST_ENTRY **the_history_list;
 @end example
 
 The state of the History library is encapsulated into a single structure:
 
 @example
-/* A structure used to pass around the current state of the history. */
+/*
+ * A structure used to pass around the current state of the history.
+ */
 typedef struct _hist_state @{
   HIST_ENTRY **entries; /* Pointer to the entries themselves. */
   int offset;           /* The location pointer within this array. */
   int length;           /* Number of elements within this array. */
   int size;             /* Number of slots allocated to this array. */
   int flags;
 @} HISTORY_STATE;
 @end example
 
 If the flags member includes @code{HS_STIFLED}, the history has been
 stifled.
 
 @node History Functions
 @section History Functions
 
 This section describes the calling sequence for the various functions
-present in GNU History.
+exported by the @sc{gnu} History library.
 
 @menu
 * Initializing History and State Management::	Functions to call when you
 						want to use history in a
 						program.
 * History List Management::		Functions used to manage the list
 					of history entries.
 * Information About the History List::	Functions returning information about
@@ -234,16 +236,18 @@ history.
 @subsection Moving Around the History List
 
 These functions allow the current index into the history list to be
 set or changed.
 
 @deftypefun int history_set_pos (int pos)
 Set the current history offset to @var{pos}, an absolute index
 into the list.
+Returns 1 on success, 0 if @var{pos} is less than zero or greater
+than the number of history entries.
 @end deftypefun
 
 @deftypefun {HIST_ENTRY *} previous_history (void)
 Back up the current history offset to the previous history entry, and
 return a pointer to that entry.  If there is no previous entry, return
 a @code{NULL} pointer.
 @end deftypefun
 
@@ -310,35 +314,38 @@ If @var{from} is zero, start at the begi
 @var{from}, then read until the end of the file.  If @var{filename} is
 @code{NULL}, then read from @file{~/.history}.  Returns 0 if successful,
 or @code{errno} if not.
 @end deftypefun
 
 @deftypefun int write_history (const char *filename)
 Write the current history to @var{filename}, overwriting @var{filename}
 if necessary.
-If @var{filename} is @code{NULL}, then write the history list to @file{~/.history}.
-Values returned are as in @code{read_history()}.
+If @var{filename} is @code{NULL}, then write the history list to
+@file{~/.history}.
+Returns 0 on success, or @code{errno} on a read or write error.
 @end deftypefun
 
 @deftypefun int append_history (int nelements, const char *filename)
 Append the last @var{nelements} of the history list to @var{filename}.
 If @var{filename} is @code{NULL}, then append to @file{~/.history}.
+Returns 0 on success, or @code{errno} on a read or write error.
 @end deftypefun
 
 @deftypefun int history_truncate_file (const char *filename, int nlines)
 Truncate the history file @var{filename}, leaving only the last
 @var{nlines} lines.
 If @var{filename} is @code{NULL}, then @file{~/.history} is truncated.
+Returns 0 on success, or @code{errno} on failure.
 @end deftypefun
 
 @node History Expansion
 @subsection History Expansion
 
-These functions implement @code{csh}-like history expansion.
+These functions implement history expansion.
 
 @deftypefun int history_expand (char *string, char **output)
 Expand @var{string}, placing the result into @var{output}, a pointer
 to a string (@pxref{History Interaction}).  Returns:
 @table @code
 @item 0
 If no expansions took place (or, if the only change in
 the text was the removal of escape characters preceding the history expansion
@@ -351,75 +358,83 @@ if there was an error in expansion;
 if the returned line should be displayed, but not executed,
 as with the @code{:p} modifier (@pxref{Modifiers}).
 @end table
 
 If an error ocurred in expansion, then @var{output} contains a descriptive
 error message.
 @end deftypefun
 
-@deftypefun {char *} history_arg_extract (int first, int last, const char *string)
-Extract a string segment consisting of the @var{first} through @var{last}
-arguments present in @var{string}.  Arguments are split as in Bash.
-@end deftypefun
-
 @deftypefun {char *} get_history_event (const char *string, int *cindex, int qchar)
 Returns the text of the history event beginning at @var{string} +
 @var{*cindex}.  @var{*cindex} is modified to point to after the event
 specifier.  At function entry, @var{cindex} points to the index into
 @var{string} where the history event specification begins.  @var{qchar}
 is a character that is allowed to end the event specification in addition
 to the ``normal'' terminating characters.
 @end deftypefun
 
 @deftypefun {char **} history_tokenize (const char *string)
 Return an array of tokens parsed out of @var{string}, much as the
-shell might.  The tokens are split on the characters @code{" \t\n()<>;&|$"},
+shell might.  The tokens are split on the characters in the
+@var{history_word_delimiters} variable,
 and shell quoting conventions are obeyed.
 @end deftypefun
 
+@deftypefun {char *} history_arg_extract (int first, int last, const char *string)
+Extract a string segment consisting of the @var{first} through @var{last}
+arguments present in @var{string}.  Arguments are split using
+@code{history_tokenize}.
+@end deftypefun
+
 @node History Variables
 @section History Variables
 
 This section describes the externally-visible variables exported by
-the GNU History Library.
+the @sc{gnu} History Library.
 
 @deftypevar int history_base
 The logical offset of the first entry in the history list.
 @end deftypevar
 
 @deftypevar int history_length
 The number of entries currently stored in the history list.
 @end deftypevar
 
-@deftypevar int max_input_history
+@deftypevar int history_max_entries
 The maximum number of history entries.  This must be changed using
 @code{stifle_history()}.
 @end deftypevar
 
 @deftypevar char history_expansion_char
-The character that starts a history event.  The default is @samp{!}.
+The character that introduces a history event.  The default is @samp{!}.
+Setting this to 0 inhibits history expansion.
 @end deftypevar
 
 @deftypevar char history_subst_char
 The character that invokes word substitution if found at the start of
 a line.  The default is @samp{^}.
 @end deftypevar
 
 @deftypevar char history_comment_char
 During tokenization, if this character is seen as the first character
 of a word, then it and all subsequent characters up to a newline are
 ignored, suppressing history expansion for the remainder of the line.
 This is disabled by default.
 @end deftypevar
 
+@deftypevar {char *} history_word_delimiters
+The characters that separate tokens for \fBhistory_tokenize()\fP.
+The default value is @code{" \t\n()<>;&|$"}.
+@end deftypevar
+
 @deftypevar {char *} history_no_expand_chars
 The list of characters which inhibit history expansion if found immediately
-following @var{history_expansion_char}.  The default is space, TAB, and
-@samp{=}.
+following @var{history_expansion_char}.  The default is space, tab, newline,
+carriage return, and @samp{=}.
 @end deftypevar
 
 @deftypevar {char *} history_search_delimiter_chars
 The list of additional characters which can delimit a history search
 string, in addition to space, TAB, @samp{:} and @samp{?} in the case of
 a substring search.  The default is empty.
 @end deftypevar
 
@@ -438,17 +453,17 @@ be done.
 It is intended for use by applications like Bash that use the history
 expansion character for additional purposes.
 By default, this variable is set to @code{NULL}.
 @end deftypevar
 
 @node History Programming Example
 @section History Programming Example
 
-The following program demonstrates simple use of the GNU History Library.
+The following program demonstrates simple use of the @sc{gnu} History Library.
 
 @smallexample
 #include <stdio.h>
 #include <readline/history.h>
 
 main (argc, argv)
      int argc;
      char **argv;
diff --git a/readline/doc/manvers.texinfo b/readline/doc/manvers.texinfo
--- a/readline/doc/manvers.texinfo
+++ b/readline/doc/manvers.texinfo
@@ -1,6 +1,6 @@
 @set EDITION 4.2-beta
 @set VERSION 4.2-beta
-@set UPDATED 2001 Feb 5
-@set UPDATE-MONTH Feb 2001
+@set UPDATED 2001 Mar 6
+@set UPDATE-MONTH Mar 2001
 
-@set LASTCHANGE Mon Feb  5 09:10:18 EST 2001
+@set LASTCHANGE Tue Mar  6 13:25:07 EST 2001
diff --git a/readline/doc/readline.0 b/readline/doc/readline.0
--- a/readline/doc/readline.0
+++ b/readline/doc/readline.0
@@ -56,17 +56,17 @@ NNOOTTAATTIIOONN
 
        Readline commands may be given  numeric  _a_r_g_u_m_e_n_t_s,  which
        normally act as a repeat count.  Sometimes, however, it is
        the sign of the argument that is significant.   Passing  a
        negative  argument  to  a command that acts in the forward
 
 
 
-GNU Readline 4.2            2001 Feb 5                          1
+GNU Readline 4.2            2001 Mar 5                          1
 
 
 
 
 
 READLINE(3)                                           READLINE(3)
 
 
@@ -114,646 +114,648 @@ IINNIITTIIAALLIIZZAATTIIOON
 
 
    KKeeyy BBiinnddiinnggss
        The  syntax  for  controlling  key bindings in the _i_n_p_u_t_r_c
        file is simple.  All that is required is the name  of  the
        command or the text of a macro and a key sequence to which
        it should be bound. The name may be specified  in  one  of
        two  ways:  as a symbolic key name, possibly with _M_e_t_a_- or
-       _C_o_n_t_r_o_l_- prefixes, or as a key sequence.  When  using  the
-       form  kkeeyynnaammee:_f_u_n_c_t_i_o_n_-_n_a_m_e  or _m_a_c_r_o, _k_e_y_n_a_m_e is the name
-       of a key spelled out in English.  For example:
+       _C_o_n_t_r_o_l_- prefixes, or as a key sequence.
 
-              Control-u: universal-argument
+       When using the form kkeeyynnaammee:_f_u_n_c_t_i_o_n_-_n_a_m_e or  _m_a_c_r_o,  _k_e_y_-
+       _n_a_m_e  is  the  name  of a key spelled out in English.  For
+       example:
 
 
 
-GNU Readline 4.2            2001 Feb 5                          2
+GNU Readline 4.2            2001 Mar 5                          2
 
 
 
 
 
 READLINE(3)                                           READLINE(3)
 
 
+              Control-u: universal-argument
               Meta-Rubout: backward-kill-word
               Control-o: "> output"
 
        In the above example, _C_-_u is bound to the function uunniivveerr--
        ssaall--aarrgguummeenntt,   _M_-_D_E_L  is  bound  to  the  function  bbaacckk--
        wwaarrdd--kkiillll--wwoorrdd,  and  _C_-_o  is  bound  to  run  the   macro
        expressed  on  the right hand side (that is, to insert the
        text ``> output'' into the line).
 
        In the second form, ""kkeeyysseeqq"":_f_u_n_c_t_i_o_n_-_n_a_m_e or _m_a_c_r_o,  kkeeyy--
        sseeqq differs from kkeeyynnaammee above in that strings denoting an
        entire key  sequence  may  be  specified  by  placing  the
        sequence  within  double quotes.  Some GNU Emacs style key
-       escapes can be used, as in the following example.
+       escapes can be used, as in the following example, but  the
+       symbolic character names are not recognized.
 
               "\C-u": universal-argument
               "\C-x\C-r": re-read-init-file
               "\e[11~": "Function Key 1"
 
-       In this example, _C_-_u is again bound to the  function  uunnii--
-       vveerrssaall--aarrgguummeenntt.    _C_-_x  _C_-_r  is  bound  to  the  function
-       rree--rreeaadd--iinniitt--ffiillee, and _E_S_C _[ _1 _1 _~ is bound to insert  the
-       text  ``Function Key 1''.  The full set of GNU Emacs style
-       escape sequences is
+       In  this  example, _C_-_u is again bound to the function uunnii--
+       vveerrssaall--aarrgguummeenntt.   _C_-_x  _C_-_r  is  bound  to  the   function
+       rree--rreeaadd--iinniitt--ffiillee,  and _E_S_C _[ _1 _1 _~ is bound to insert the
+       text ``Function Key 1''.
+
+       The full set of GNU Emacs style escape sequences available
+       when specifying key sequences is
               \\CC--    control prefix
               \\MM--    meta prefix
               \\ee     an escape character
               \\\\     backslash
               \\""     literal ", a double quote
               \\''     literal ', a single quote
 
-       In addition to the GNU Emacs  style  escape  sequences,  a
+       In  addition  to  the  GNU Emacs style escape sequences, a
        second set of backslash escapes is available:
               \\aa     alert (bell)
               \\bb     backspace
               \\dd     delete
               \\ff     form feed
               \\nn     newline
               \\rr     carriage return
               \\tt     horizontal tab
               \\vv     vertical tab
-              \\_n_n_n   the  character whose ASCII code is the octal
+              \\_n_n_n   the character whose ASCII code is the  octal
                      value _n_n_n (one to three digits)
-              \\xx_n_n_n  the character whose ASCII code is  the  hex-
+              \\xx_n_n_n  the  character  whose ASCII code is the hex-
                      adecimal value _n_n_n (one to three digits)
 
        When entering the text of a macro, single or double quotes
-       should be used to indicate a macro  definition.   Unquoted
+       should  be  used to indicate a macro definition.  Unquoted
        text is assumed to be a function name.  In the macro body,
-       the backslash escapes described above are expanded.  Back-
-       slash  will  quote  any other character in the macro text,
-       including " and '.
-
-       BBaasshh allows  the  current  readline  key  bindings  to  be
+       the   backslash  escapes  described  above  are  expanded.
 
 
 
-GNU Readline 4.2            2001 Feb 5                          3
+GNU Readline 4.2            2001 Mar 5                          3
 
 
 
 
 
 READLINE(3)                                           READLINE(3)
 
 
-       displayed  or modified with the bbiinndd builtin command.  The
-       editing mode may be switched  during  interactive  use  by
-       using  the  --oo  option  to the sseett builtin command.  Other
-       programs using this library  provide  similar  mechanisms.
-       The  _i_n_p_u_t_r_c  file  may be edited and re-read if a program
-       does not provide any other means to incorporate new  bind-
+       Backslash will quote any  other  character  in  the  macro
+       text, including " and '.
+
+       BBaasshh  allows  the current readline key bindings to be dis-
+       played or modified with the  bbiinndd  builtin  command.   The
+       editing  mode  may  be  switched during interactive use by
+       using the --oo option to the  sseett  builtin  command.   Other
+       programs  using  this  library provide similar mechanisms.
+       The _i_n_p_u_t_r_c file may be edited and re-read  if  a  program
+       does  not provide any other means to incorporate new bind-
        ings.
 
    VVaarriiaabblleess
-       Readline  has  variables  that can be used to further cus-
+       Readline has variables that can be used  to  further  cus-
        tomize its behavior.  A variable may be set in the _i_n_p_u_t_r_c
        file with a statement of the form
 
               sseett _v_a_r_i_a_b_l_e_-_n_a_m_e _v_a_l_u_e
 
        Except where noted, readline variables can take the values
-       OOnn or OOffff (without regard to  case).   The  variables  and
+       OOnn  or  OOffff  (without  regard to case).  The variables and
        their default values are:
 
        bbeellll--ssttyyllee ((aauuddiibbllee))
-              Controls  what  happens when readline wants to ring
-              the terminal bell.  If set to nnoonnee, readline  never
+              Controls what happens when readline wants  to  ring
+              the  terminal bell.  If set to nnoonnee, readline never
               rings the bell.  If set to vviissiibbllee, readline uses a
-              visible bell if one is available.  If set to  aauuddii--
+              visible  bell if one is available.  If set to aauuddii--
               bbllee, readline attempts to ring the terminal's bell.
        ccoommmmeenntt--bbeeggiinn ((````##''''))
-              The string that is inserted in  vvii  mode  when  the
-              iinnsseerrtt--ccoommmmeenntt  command  is executed.  This command
-              is bound to MM--## in emacs mode and to ## in  vi  com-
+              The  string  that  is  inserted in vvii mode when the
+              iinnsseerrtt--ccoommmmeenntt command is executed.   This  command
+              is  bound  to MM--## in emacs mode and to ## in vi com-
               mand mode.
        ccoommpplleettiioonn--iiggnnoorree--ccaassee ((OOffff))
-              If  set  to OOnn, readline performs filename matching
+              If set to OOnn, readline performs  filename  matching
               and completion in a case-insensitive fashion.
        ccoommpplleettiioonn--qquueerryy--iitteemmss ((110000))
-              This determines when  the  user  is  queried  about
-              viewing  the  number of possible completions gener-
-              ated by the ppoossssiibbllee--ccoommpplleettiioonnss command.   It  may
-              be  set  to any integer value greater than or equal
-              to zero.  If the number of possible completions  is
-              greater  than  or  equal to the value of this vari-
+              This  determines  when  the  user  is queried about
+              viewing the number of possible  completions  gener-
+              ated  by  the ppoossssiibbllee--ccoommpplleettiioonnss command.  It may
+              be set to any integer value greater than  or  equal
+              to  zero.  If the number of possible completions is
+              greater than or equal to the value  of  this  vari-
               able, the user is asked whether or not he wishes to
-              view  them; otherwise they are simply listed on the
+              view them; otherwise they are simply listed on  the
               terminal.
        ccoonnvveerrtt--mmeettaa ((OOnn))
               If set to OOnn, readline will convert characters with
-              the  eighth  bit  set  to  an ASCII key sequence by
-              stripping the eighth bit and prefixing it  with  an
-              escape  character  (in  effect, using escape as the
+              the eighth bit set to  an  ASCII  key  sequence  by
+              stripping  the  eighth bit and prefixing it with an
+              escape character (in effect, using  escape  as  the
               _m_e_t_a _p_r_e_f_i_x).
-       ddiissaabbllee--ccoommpplleettiioonn ((OOffff))
-              If set to OOnn, readline will  inhibit  word  comple-
-              tion.   Completion characters will be inserted into
-              the line as if they had been mapped to sseellff--iinnsseerrtt.
 
 
 
 
-GNU Readline 4.2            2001 Feb 5                          4
+GNU Readline 4.2            2001 Mar 5                          4
 
 
 
 
 
 READLINE(3)                                           READLINE(3)
 
 
+       ddiissaabbllee--ccoommpplleettiioonn ((OOffff))
+              If  set  to  OOnn, readline will inhibit word comple-
+              tion.  Completion characters will be inserted  into
+              the line as if they had been mapped to sseellff--iinnsseerrtt.
        eeddiittiinngg--mmooddee ((eemmaaccss))
-              Controls  whether readline begins with a set of key
-              bindings similar to emacs or vi.  eeddiittiinngg--mmooddee  can
+              Controls whether readline begins with a set of  key
+              bindings  similar to emacs or vi.  eeddiittiinngg--mmooddee can
               be set to either eemmaaccss or vvii.
        eennaabbllee--kkeeyyppaadd ((OOffff))
-              When  set  to  OOnn,  readline will try to enable the
+              When set to OOnn, readline will  try  to  enable  the
               application keypad when it is called.  Some systems
               need this to enable the arrow keys.
        eexxppaanndd--ttiillddee ((OOffff))
-              If  set  to  oonn,  tilde expansion is performed when
+              If set to oonn, tilde  expansion  is  performed  when
               readline attempts word completion.
        hhoorriizzoonnttaall--ssccrroollll--mmooddee ((OOffff))
-              When set to OOnn, makes readline use  a  single  line
-              for  display, scrolling the input horizontally on a
-              single screen line when it becomes longer than  the
+              When  set  to  OOnn, makes readline use a single line
+              for display, scrolling the input horizontally on  a
+              single  screen line when it becomes longer than the
               screen width rather than wrapping to a new line.
        iinnppuutt--mmeettaa ((OOffff))
-              If  set to OOnn, readline will enable eight-bit input
-              (that is, it will not clear the eighth bit  in  the
+              If set to OOnn, readline will enable eight-bit  input
+              (that  is,  it will not clear the eighth bit in the
               characters it reads), regardless of what the termi-
               nal claims it can support.  The name mmeettaa--ffllaagg is a
               synonym for this variable.
        iisseeaarrcchh--tteerrmmiinnaattoorrss ((````CC--[[ CC--JJ''''))
-              The  string  of characters that should terminate an
-              incremental search without  subsequently  executing
-              the  character  as a command.  If this variable has
-              not been given a value, the characters _E_S_C and  _C_-_J
+              The string of characters that should  terminate  an
+              incremental  search  without subsequently executing
+              the character as a command.  If this  variable  has
+              not  been given a value, the characters _E_S_C and _C_-_J
               will terminate an incremental search.
        kkeeyymmaapp ((eemmaaccss))
-              Set  the current readline keymap.  The set of legal
-              keymap names is _e_m_a_c_s_, _e_m_a_c_s_-_s_t_a_n_d_a_r_d_,  _e_m_a_c_s_-_m_e_t_a_,
+              Set the current readline keymap.  The set of  legal
+              keymap  names is _e_m_a_c_s_, _e_m_a_c_s_-_s_t_a_n_d_a_r_d_, _e_m_a_c_s_-_m_e_t_a_,
               _e_m_a_c_s_-_c_t_l_x_, _v_i_, _v_i_-_m_o_v_e_, _v_i_-_c_o_m_m_a_n_d, and _v_i_-_i_n_s_e_r_t.
               _v_i is equivalent to _v_i_-_c_o_m_m_a_n_d; _e_m_a_c_s is equivalent
-              to  _e_m_a_c_s_-_s_t_a_n_d_a_r_d.   The  default  value is _e_m_a_c_s.
-              The value of eeddiittiinngg--mmooddee also affects the  default
+              to _e_m_a_c_s_-_s_t_a_n_d_a_r_d.  The  default  value  is  _e_m_a_c_s.
+              The  value of eeddiittiinngg--mmooddee also affects the default
               keymap.
        mmaarrkk--ddiirreeccttoorriieess ((OOnn))
-              If  set  to  OOnn,  completed  directory names have a
+              If set to OOnn,  completed  directory  names  have  a
               slash appended.
        mmaarrkk--mmooddiiffiieedd--lliinneess ((OOffff))
               If set to OOnn, history lines that have been modified
               are displayed with a preceding asterisk (**).
        oouuttppuutt--mmeettaa ((OOffff))
               If set to OOnn, readline will display characters with
-              the eighth bit set directly rather than as a  meta-
+              the  eighth bit set directly rather than as a meta-
               prefixed escape sequence.
        pprriinntt--ccoommpplleettiioonnss--hhoorriizzoonnttaallllyy ((OOffff))
-              If  set  to  OOnn,  readline will display completions
-              with matches sorted  horizontally  in  alphabetical
+              If set to OOnn,  readline  will  display  completions
+              with  matches  sorted  horizontally in alphabetical
               order, rather than down the screen.
-       sshhooww--aallll--iiff--aammbbiigguuoouuss ((OOffff))
-              This  alters the default behavior of the completion
-              functions.  If set to oonn,  words  which  have  more
-              than  one  possible completion cause the matches to
 
 
 
-GNU Readline 4.2            2001 Feb 5                          5
+GNU Readline 4.2            2001 Mar 5                          5
 
 
 
 
 
 READLINE(3)                                           READLINE(3)
 
 
-              be listed immediately instead of ringing the  bell.
+       sshhooww--aallll--iiff--aammbbiigguuoouuss ((OOffff))
+              This alters the default behavior of the  completion
+              functions.   If  set  to  oonn, words which have more
+              than one possible completion cause the  matches  to
+              be  listed immediately instead of ringing the bell.
        vviissiibbllee--ssttaattss ((OOffff))
               If set to OOnn, a character denoting a file's type as
-              reported by _s_t_a_t(2) is  appended  to  the  filename
+              reported  by  _s_t_a_t(2)  is  appended to the filename
               when listing possible completions.
 
    CCoonnddiittiioonnaall CCoonnssttrruuccttss
-       Readline  implements  a  facility similar in spirit to the
-       conditional compilation features  of  the  C  preprocessor
+       Readline implements a facility similar in  spirit  to  the
+       conditional  compilation  features  of  the C preprocessor
        which allows key bindings and variable settings to be per-
-       formed as the result of  tests.   There  are  four  parser
+       formed  as  the  result  of  tests.  There are four parser
        directives used.
 
-       $$iiff    The  $$iiff construct allows bindings to be made based
-              on the editing mode, the terminal  being  used,  or
-              the  application  using  readline.  The text of the
-              test extends to the end of the line; no  characters
+       $$iiff    The $$iiff construct allows bindings to be made  based
+              on  the  editing  mode, the terminal being used, or
+              the application using readline.  The  text  of  the
+              test  extends to the end of the line; no characters
               are required to isolate it.
 
-              mmooddee   The  mmooddee== form of the $$iiff directive is used
-                     to test whether readline is in emacs  or  vi
-                     mode.   This may be used in conjunction with
+              mmooddee   The mmooddee== form of the $$iiff directive is  used
+                     to  test  whether readline is in emacs or vi
+                     mode.  This may be used in conjunction  with
                      the sseett kkeeyymmaapp command, for instance, to set
-                     bindings  in  the  _e_m_a_c_s_-_s_t_a_n_d_a_r_d and _e_m_a_c_s_-
-                     _c_t_l_x keymaps only if  readline  is  starting
+                     bindings in the  _e_m_a_c_s_-_s_t_a_n_d_a_r_d  and  _e_m_a_c_s_-
+                     _c_t_l_x  keymaps  only  if readline is starting
                      out in emacs mode.
 
               tteerrmm   The tteerrmm== form may be used to include termi-
-                     nal-specific key bindings, perhaps  to  bind
-                     the  key  sequences output by the terminal's
-                     function keys.  The word on the  right  side
-                     of  the == is tested against the full name of
+                     nal-specific  key  bindings, perhaps to bind
+                     the key sequences output by  the  terminal's
+                     function  keys.   The word on the right side
+                     of the == is tested against the full name  of
                      the terminal and the portion of the terminal
                      name before the first --.  This allows _s_u_n to
                      match both _s_u_n and _s_u_n_-_c_m_d, for instance.
 
               aapppplliiccaattiioonn
                      The aapppplliiccaattiioonn construct is used to include
                      application-specific settings.  Each program
                      using the readline library sets the _a_p_p_l_i_c_a_-
-                     _t_i_o_n  _n_a_m_e,  and  an initialization file can
-                     test for a particular value.  This could  be
+                     _t_i_o_n _n_a_m_e, and an  initialization  file  can
+                     test  for a particular value.  This could be
                      used to bind key sequences to functions use-
-                     ful for a specific program.   For  instance,
-                     the  following  command  adds a key sequence
-                     that quotes the current or previous word  in
+                     ful  for  a specific program.  For instance,
+                     the following command adds  a  key  sequence
+                     that  quotes the current or previous word in
                      Bash:
 
                      $$iiff Bash
                      # Quote the current or previous word
-                     "\C-xq": "\eb\"\ef\""
-                     $$eennddiiff
-
-       $$eennddiiff This  command,  as  seen  in  the previous example,
 
 
 
-GNU Readline 4.2            2001 Feb 5                          6
+GNU Readline 4.2            2001 Mar 5                          6
 
 
 
 
 
 READLINE(3)                                           READLINE(3)
 
 
-              terminates an $$iiff command.
+                     "\C-xq": "\eb\"\ef\""
+                     $$eennddiiff
 
-       $$eellssee  Commands in this branch of the  $$iiff  directive  are
+       $$eennddiiff This command, as seen in the previous example, ter-
+              minates an $$iiff command.
+
+       $$eellssee  Commands  in  this  branch of the $$iiff directive are
               executed if the test fails.
 
        $$iinncclluuddee
-              This  directive takes a single filename as an argu-
-              ment and reads  commands  and  bindings  from  that
-              file.   For  example, the following directive would
+              This directive takes a single filename as an  argu-
+              ment  and  reads  commands  and  bindings from that
+              file.  For example, the following  directive  would
               read _/_e_t_c_/_i_n_p_u_t_r_c:
 
               $$iinncclluuddee  _/_e_t_c_/_i_n_p_u_t_r_c
 
 SSEEAARRCCHHIINNGG
-       Readline provides commands for searching through the  com-
-       mand  history  for  lines  containing  a specified string.
-       There are two search modes: _i_n_c_r_e_m_e_n_t_a_l and  _n_o_n_-_i_n_c_r_e_m_e_n_-
+       Readline  provides commands for searching through the com-
+       mand history for  lines  containing  a  specified  string.
+       There  are two search modes: _i_n_c_r_e_m_e_n_t_a_l and _n_o_n_-_i_n_c_r_e_m_e_n_-
        _t_a_l.
 
-       Incremental  searches  begin  before the user has finished
+       Incremental searches begin before the  user  has  finished
        typing the search string.  As each character of the search
        string is typed, readline displays the next entry from the
-       history matching the string typed so far.  An  incremental
-       search  requires only as many characters as needed to find
+       history  matching the string typed so far.  An incremental
+       search requires only as many characters as needed to  find
        the desired history entry.  To search backward in the his-
-       tory  for  a  particular  string,  type  CC--rr.   Typing CC--ss
+       tory for  a  particular  string,  type  CC--rr.   Typing  CC--ss
        searches forward through the history.  The characters pre-
-       sent  in the value of the iisseeaarrcchh--tteerrmmiinnaattoorrss variable are
+       sent in the value of the iisseeaarrcchh--tteerrmmiinnaattoorrss variable  are
        used to terminate an incremental search.  If that variable
-       has  not  been assigned a value the _E_s_c_a_p_e and CC--JJ charac-
+       has not been assigned a value the _E_s_c_a_p_e and  CC--JJ  charac-
        ters will terminate an incremental search.  CC--GG will abort
        an incremental search and restore the original line.  When
        the search is terminated, the history entry containing the
        search string becomes the current line.
 
-       To  find  other matching entries in the history list, type
-       CC--ss or CC--rr as appropriate.  This will search  backward  or
-       forward  in  the  history  for  the next line matching the
-       search string typed so far.  Any other key sequence  bound
-       to  a  readline command will terminate the search and exe-
+       To find other matching entries in the history  list,  type
+       CC--ss  or  CC--rr as appropriate.  This will search backward or
+       forward in the history for  the  next  line  matching  the
+       search  string typed so far.  Any other key sequence bound
+       to a readline command will terminate the search  and  exe-
        cute that command.  For instance, a newline will terminate
        the search and accept the line, thereby executing the com-
-       mand from the history list.  A movement command will  ter-
-       minate  the  search,  make the last line found the current
+       mand  from the history list.  A movement command will ter-
+       minate the search, make the last line  found  the  current
        line, and begin editing.
 
-       Non-incremental searches read  the  entire  search  string
+       Non-incremental  searches  read  the  entire search string
        before starting to search for matching history lines.  The
-       search string may be typed by the user or be part  of  the
+       search  string  may be typed by the user or be part of the
        contents of the current line.
 
-EEDDIITTIINNGG CCOOMMMMAANNDDSS
-       The  following  is a list of the names of the commands and
-       the  default  key  sequences  to  which  they  are  bound.
-
 
 
-GNU Readline 4.2            2001 Feb 5                          7
+GNU Readline 4.2            2001 Mar 5                          7
 
 
 
 
 
 READLINE(3)                                           READLINE(3)
 
 
-       Command  names  without  an  accompanying key sequence are
+EEDDIITTIINNGG CCOOMMMMAANNDDSS
+       The following is a list of the names of the  commands  and
+       the  default  key sequences to which they are bound.  Com-
+       mand  names  without  an  accompanying  key  sequence  are
        unbound by default.
 
        In the following descriptions, _p_o_i_n_t refers to the current
-       cursor  position,  and  _m_a_r_k  refers  to a cursor position
+       cursor position, and _m_a_r_k  refers  to  a  cursor  position
        saved by the sseett--mmaarrkk command.  The text between the point
        and mark is referred to as the _r_e_g_i_o_n.
 
    CCoommmmaannddss ffoorr MMoovviinngg
        bbeeggiinnnniinngg--ooff--lliinnee ((CC--aa))
               Move to the start of the current line.
        eenndd--ooff--lliinnee ((CC--ee))
               Move to the end of the line.
        ffoorrwwaarrdd--cchhaarr ((CC--ff))
               Move forward a character.
        bbaacckkwwaarrdd--cchhaarr ((CC--bb))
               Move back a character.
        ffoorrwwaarrdd--wwoorrdd ((MM--ff))
-              Move  forward  to  the end of the next word.  Words
-              are composed of  alphanumeric  characters  (letters
+              Move forward to the end of the  next  word.   Words
+              are  composed  of  alphanumeric characters (letters
               and digits).
        bbaacckkwwaarrdd--wwoorrdd ((MM--bb))
-              Move  back  to the start of the current or previous
-              word.  Words are composed of  alphanumeric  charac-
+              Move back to the start of the current  or  previous
+              word.   Words  are composed of alphanumeric charac-
               ters (letters and digits).
        cclleeaarr--ssccrreeeenn ((CC--ll))
-              Clear  the  screen  leaving the current line at the
-              top of the screen.  With an argument,  refresh  the
+              Clear the screen leaving the current  line  at  the
+              top  of  the screen.  With an argument, refresh the
               current line without clearing the screen.
        rreeddrraaww--ccuurrrreenntt--lliinnee
               Refresh the current line.
 
    CCoommmmaannddss ffoorr MMaanniippuullaattiinngg tthhee HHiissttoorryy
        aacccceepptt--lliinnee ((NNeewwlliinnee,, RReettuurrnn))
-              Accept  the line regardless of where the cursor is.
-              If this line is non-empty, it may be added  to  the
-              history  list for future recall with aadddd__hhiissttoorryy(()).
+              Accept the line regardless of where the cursor  is.
+              If  this  line is non-empty, it may be added to the
+              history list for future recall with  aadddd__hhiissttoorryy(()).
               If the line is a modified history line, the history
               line is restored to its original state.
        pprreevviioouuss--hhiissttoorryy ((CC--pp))
-              Fetch  the  previous command from the history list,
+              Fetch the previous command from the  history  list,
               moving back in the list.
        nneexxtt--hhiissttoorryy ((CC--nn))
-              Fetch the next command from the history list,  mov-
+              Fetch  the next command from the history list, mov-
               ing forward in the list.
        bbeeggiinnnniinngg--ooff--hhiissttoorryy ((MM--<<))
               Move to the first line in the history.
        eenndd--ooff--hhiissttoorryy ((MM-->>))
-              Move  to  the  end  of the input history, i.e., the
+              Move to the end of the  input  history,  i.e.,  the
               line currently being entered.
-       rreevveerrssee--sseeaarrcchh--hhiissttoorryy ((CC--rr))
-              Search backward starting at the  current  line  and
-              moving `up' through the history as necessary.  This
-              is an incremental search.
 
 
 
-GNU Readline 4.2            2001 Feb 5                          8
+
+GNU Readline 4.2            2001 Mar 5                          8
 
 
 
 
 
 READLINE(3)                                           READLINE(3)
 
 
+       rreevveerrssee--sseeaarrcchh--hhiissttoorryy ((CC--rr))
+              Search  backward  starting  at the current line and
+              moving `up' through the history as necessary.  This
+              is an incremental search.
        ffoorrwwaarrdd--sseeaarrcchh--hhiissttoorryy ((CC--ss))
-              Search forward starting at  the  current  line  and
-              moving  `down'  through  the  history as necessary.
+              Search  forward  starting  at  the current line and
+              moving `down' through  the  history  as  necessary.
               This is an incremental search.
        nnoonn--iinnccrreemmeennttaall--rreevveerrssee--sseeaarrcchh--hhiissttoorryy ((MM--pp))
               Search backward through the history starting at the
-              current  line  using a non-incremental search for a
+              current line using a non-incremental search  for  a
               string supplied by the user.
        nnoonn--iinnccrreemmeennttaall--ffoorrwwaarrdd--sseeaarrcchh--hhiissttoorryy ((MM--nn))
-              Search forward through the  history  using  a  non-
-              incremental  search  for  a  string supplied by the
+              Search  forward  through  the  history using a non-
+              incremental search for a  string  supplied  by  the
               user.
        hhiissttoorryy--sseeaarrcchh--ffoorrwwaarrdd
-              Search forward through the history for  the  string
+              Search  forward  through the history for the string
               of characters between the start of the current line
-              and the current cursor position (the _p_o_i_n_t).   This
+              and  the current cursor position (the _p_o_i_n_t).  This
               is a non-incremental search.
        hhiissttoorryy--sseeaarrcchh--bbaacckkwwaarrdd
-              Search  backward through the history for the string
+              Search backward through the history for the  string
               of characters between the start of the current line
               and the point.  This is a non-incremental search.
        yyaannkk--nntthh--aarrgg ((MM--CC--yy))
-              Insert  the  first argument to the previous command
-              (usually the second word on the previous  line)  at
-              point (the current cursor position).  With an argu-
-              ment _n, insert the _nth word from the previous  com-
-              mand  (the words in the previous command begin with
-              word 0).  A negative argument inserts the _nth  word
-              from the end of the previous command.
+              Insert the first argument to the  previous  command
+              (usually  the  second word on the previous line) at
+              point.  With an argument _n,  insert  the  _nth  word
+              from  the previous command (the words in the previ-
+              ous command begin with word 0).  A  negative  argu-
+              ment  inserts the _nth word from the end of the pre-
+              vious command.
        yyaannkk--llaasstt--aarrgg ((MM--..,, MM--__))
-              Insert  the  last  argument to the previous command
-              (the last word  of  the  previous  history  entry).
+              Insert the last argument to  the  previous  command
+              (the  last  word  of  the  previous history entry).
               With an argument, behave exactly like yyaannkk--nntthh--aarrgg.
               Successive calls to yyaannkk--llaasstt--aarrgg move back through
-              the  history  list,  inserting the last argument of
+              the history list, inserting the  last  argument  of
               each line in turn.
 
    CCoommmmaannddss ffoorr CChhaannggiinngg TTeexxtt
        ddeelleettee--cchhaarr ((CC--dd))
-              Delete the character under the cursor.  If point is
-              at  the beginning of the line, there are no charac-
-              ters in the line, and the last character typed  was
-              not bound to ddeelleettee--cchhaarr, then return EEOOFF.
+              Delete  the character at point.  If point is at the
+              beginning of the line, there are no  characters  in
+              the  line,  and  the  last  character typed was not
+              bound to ddeelleettee--cchhaarr, then return EEOOFF.
        bbaacckkwwaarrdd--ddeelleettee--cchhaarr ((RRuubboouutt))
               Delete the character behind the cursor.  When given
-              a numeric argument, save the deleted  text  on  the
+              a  numeric  argument,  save the deleted text on the
               kill ring.
        ffoorrwwaarrdd--bbaacckkwwaarrdd--ddeelleettee--cchhaarr
-              Delete  the  character under the cursor, unless the
+              Delete the character under the cursor,  unless  the
               cursor is at the end of the line, in which case the
-              character behind the cursor is deleted.
-       qquuootteedd--iinnsseerrtt ((CC--qq,, CC--vv))
-              Add  the  next  character that you type to the line
-              verbatim.  This is how to  insert  characters  like
 
 
 
-GNU Readline 4.2            2001 Feb 5                          9
+GNU Readline 4.2            2001 Mar 5                          9
 
 
 
 
 
 READLINE(3)                                           READLINE(3)
 
 
+              character behind the cursor is deleted.
+       qquuootteedd--iinnsseerrtt ((CC--qq,, CC--vv))
+              Add the next character that you type  to  the  line
+              verbatim.   This  is  how to insert characters like
               CC--qq, for example.
        ttaabb--iinnsseerrtt ((MM--TTAABB))
               Insert a tab character.
        sseellff--iinnsseerrtt ((aa,, bb,, AA,, 11,, !!,, ......))
               Insert the character typed.
        ttrraannssppoossee--cchhaarrss ((CC--tt))
-              Drag  the  character  before point forward over the
-              character at point, moving point forward  as  well.
-              If  point is at the end of the line, then transpose
-              the two characters before  point.   Negative  argu-
-              ments don't work.
+              Drag the character before point  forward  over  the
+              character  at  point, moving point forward as well.
+              If point is at the  end  of  the  line,  then  this
+              transposes  the two characters before point.  Nega-
+              tive arguments have no effect.
        ttrraannssppoossee--wwoorrddss ((MM--tt))
-              Drag  the  word  behind the cursor past the word in
-              front of the cursor, moving the  cursor  over  that
-              word as well.
+              Drag the word before  point  past  the  word  after
+              point, moving point over that word as well.
        uuppccaassee--wwoorrdd ((MM--uu))
               Uppercase  the current (or following) word.  With a
               negative argument, uppercase the previous word, but
               do not move point.
        ddoowwnnccaassee--wwoorrdd ((MM--ll))
               Lowercase  the current (or following) word.  With a
               negative argument, lowercase the previous word, but
               do not move point.
        ccaappiittaalliizzee--wwoorrdd ((MM--cc))
               Capitalize the current (or following) word.  With a
               negative argument, capitalize  the  previous  word,
               but do not move point.
 
    KKiilllliinngg aanndd YYaannkkiinngg
        kkiillll--lliinnee ((CC--kk))
-              Kill  the  text from the current cursor position to
-              the end of the line.
+              Kill the text from point to the end of the line.
        bbaacckkwwaarrdd--kkiillll--lliinnee ((CC--xx RRuubboouutt))
               Kill backward to the beginning of the line.
        uunniixx--lliinnee--ddiissccaarrdd ((CC--uu))
-              Kill backward from point to the  beginning  of  the
+              Kill  backward  from  point to the beginning of the
               line.  The killed text is saved on the kill-ring.
        kkiillll--wwhhoollee--lliinnee
-              Kill  all characters on the current line, no matter
-              where the cursor is.
+              Kill all characters on the current line, no  matter
+              where point is.
        kkiillll--wwoorrdd ((MM--dd))
-              Kill from the cursor to  the  end  of  the  current
-              word,  or  if between words, to the end of the next
-              word.  Word boundaries are the same as  those  used
-              by ffoorrwwaarrdd--wwoorrdd.
+              Kill  from point the end of the current word, or if
+              between words, to the end of the next  word.   Word
+              boundaries  are  the  same  as  those  used by ffoorr--
+              wwaarrdd--wwoorrdd.
        bbaacckkwwaarrdd--kkiillll--wwoorrdd ((MM--RRuubboouutt))
-              Kill  the  word behind the cursor.  Word boundaries
-              are the same as those used by bbaacckkwwaarrdd--wwoorrdd.
+              Kill the word behind point.   Word  boundaries  are
+              the same as those used by bbaacckkwwaarrdd--wwoorrdd.
        uunniixx--wwoorrdd--rruubboouutt ((CC--ww))
-              Kill the word behind the cursor, using white  space
-              as  a  word boundary.  The word boundaries are dif-
-              ferent from bbaacckkwwaarrdd--kkiillll--wwoorrdd.
-       ddeelleettee--hhoorriizzoonnttaall--ssppaaccee ((MM--\\))
-              Delete all spaces and tabs around point.
+              Kill  the word behind point, using white space as a
+              word boundary.  The killed text  is  saved  on  the
+              kill-ring.
 
 
 
-GNU Readline 4.2            2001 Feb 5                         10
+GNU Readline 4.2            2001 Mar 5                         10
 
 
 
 
 
 READLINE(3)                                           READLINE(3)
 
 
+       ddeelleettee--hhoorriizzoonnttaall--ssppaaccee ((MM--\\))
+              Delete all spaces and tabs around point.
        kkiillll--rreeggiioonn
-              Kill the text between the  point  and  _m_a_r_k  (saved
-              cursor  position).  This text is referred to as the
+              Kill  the  text  between  the point and _m_a_r_k (saved
+              cursor position).  This text is referred to as  the
               _r_e_g_i_o_n.
        ccooppyy--rreeggiioonn--aass--kkiillll
               Copy the text in the region to the kill buffer.
        ccooppyy--bbaacckkwwaarrdd--wwoorrdd
               Copy the word before point to the kill buffer.  The
               word boundaries are the same as bbaacckkwwaarrdd--wwoorrdd.
        ccooppyy--ffoorrwwaarrdd--wwoorrdd
-              Copy  the  word following point to the kill buffer.
+              Copy the word following point to the  kill  buffer.
               The word boundaries are the same as ffoorrwwaarrdd--wwoorrdd.
        yyaannkk ((CC--yy))
-              Yank the top of the kill ring into  the  buffer  at
-              the cursor.
+              Yank  the  top  of the kill ring into the buffer at
+              point.
        yyaannkk--ppoopp ((MM--yy))
-              Rotate  the  kill ring, and yank the new top.  Only
+              Rotate the kill ring, and yank the new  top.   Only
               works following yyaannkk or yyaannkk--ppoopp.
 
    NNuummeerriicc AArrgguummeennttss
        ddiiggiitt--aarrgguummeenntt ((MM--00,, MM--11,, ......,, MM----))
-              Add this digit to the argument  already  accumulat-
-              ing,  or  start a new argument.  M-- starts a nega-
+              Add  this  digit to the argument already accumulat-
+              ing, or start a new argument.  M-- starts  a  nega-
               tive argument.
        uunniivveerrssaall--aarrgguummeenntt
-              This is another way to  specify  an  argument.   If
-              this  command  is  followed  by one or more digits,
-              optionally with a leading minus sign, those  digits
+              This  is  another  way  to specify an argument.  If
+              this command is followed by  one  or  more  digits,
+              optionally  with a leading minus sign, those digits
               define the argument.  If the command is followed by
               digits, executing uunniivveerrssaall--aarrgguummeenntt again ends the
-              numeric  argument,  but is otherwise ignored.  As a
-              special case, if this command is  immediately  fol-
-              lowed  by  a  character  that is neither a digit or
+              numeric argument, but is otherwise ignored.   As  a
+              special  case,  if this command is immediately fol-
+              lowed by a character that is  neither  a  digit  or
               minus sign, the argument count for the next command
-              is  multiplied by four.  The argument count is ini-
-              tially one, so executing this  function  the  first
-              time  makes  the argument count four, a second time
+              is multiplied by four.  The argument count is  ini-
+              tially  one,  so  executing this function the first
+              time makes the argument count four, a  second  time
               makes the argument count sixteen, and so on.
 
    CCoommpplleettiinngg
        ccoommpplleettee ((TTAABB))
-              Attempt to perform completion on  the  text  before
+              Attempt  to  perform  completion on the text before
               point.  The actual completion performed is applica-
-              tion-specific.  BBaasshh, for instance,  attempts  com-
-              pletion  treating  the  text  as a variable (if the
-              text begins with $$), username (if the  text  begins
-              with  ~~),  hostname (if the text begins with @@), or
-              command (including aliases and functions) in  turn.
+              tion-specific.   BBaasshh,  for instance, attempts com-
+              pletion treating the text as  a  variable  (if  the
+              text  begins  with $$), username (if the text begins
+              with ~~), hostname (if the text begins with  @@),  or
+              command  (including aliases and functions) in turn.
               If none of these produces a match, filename comple-
-              tion is attempted.  GGddbb, on the other hand,  allows
-              completion  of program functions and variables, and
-              only attempts  filename  completion  under  certain
-              circumstances.
+              tion  is attempted.  GGddbb, on the other hand, allows
+              completion of program functions and variables,  and
+              only  attempts  filename  completion  under certain
 
 
 
-
-GNU Readline 4.2            2001 Feb 5                         11
+GNU Readline 4.2            2001 Mar 5                         11
 
 
 
 
 
 READLINE(3)                                           READLINE(3)
 
 
+              circumstances.
        ppoossssiibbllee--ccoommpplleettiioonnss ((MM--??))
-              List  the  possible  completions of the text before
+              List the possible completions of  the  text  before
               point.
        iinnsseerrtt--ccoommpplleettiioonnss ((MM--**))
-              Insert all completions of  the  text  before  point
-              that  would have been generated by ppoossssiibbllee--ccoommppllee--
+              Insert  all  completions  of  the text before point
+              that would have been generated by  ppoossssiibbllee--ccoommppllee--
               ttiioonnss.
        mmeennuu--ccoommpplleettee
-              Similar to ccoommpplleettee, but replaces the  word  to  be
+              Similar  to  ccoommpplleettee,  but replaces the word to be
               completed with a single match from the list of pos-
               sible completions.  Repeated execution of mmeennuu--ccoomm--
-              pplleettee  steps  through  the list of possible comple-
+              pplleettee steps through the list  of  possible  comple-
               tions, inserting each match in turn.  At the end of
-              the  list  of completions, the bell is rung and the
-              original text is restored.  An argument of _n  moves
-              _n positions forward in the list of matches; a nega-
-              tive argument may be used to move backward  through
-              the  list.  This command is intended to be bound to
-              TTAABB, but is unbound by default.
+              the list of completions, the bell is rung  (subject
+              to  the  setting  of  Bbell-style)) aanndd tthhee oorriiggiinnaall
+              tteexxtt iiss rreessttoorreedd..  AAnn aarrgguummeenntt ooff _n mmoovveess  _n  ppoossii--
+              ttiioonnss  ffoorrwwaarrdd  iinn  tthhee lliisstt ooff mmaattcchheess;; aa nneeggaattiivvee
+              aarrgguummeenntt mmaayy bbee uusseedd ttoo mmoovvee bbaacckkwwaarrdd  tthhrroouugghh  tthhee
+              lliisstt..  TThhiiss ccoommmmaanndd iiss iinntteennddeedd ttoo bbee bboouunndd ttoo TTAABB,,
+              bbuutt iiss uunnbboouunndd bbyy ddeeffaauulltt..
        ddeelleettee--cchhaarr--oorr--lliisstt
               Deletes the character under the cursor  if  not  at
               the  beginning  or  end  of  the line (like ddeelleettee--
               cchhaarr).  If at the end of the line, behaves  identi-
               cally to ppoossssiibbllee--ccoommpplleettiioonnss.
 
    KKeeyybbooaarrdd MMaaccrrooss
        ssttaarrtt--kkbbdd--mmaaccrroo ((CC--xx (())
@@ -776,112 +778,110 @@ READLINE(3)                             
               Abort the current editing command and ring the ter-
               minal's   bell   (subject   to   the   setting   of
               bbeellll--ssttyyllee).
        ddoo--uuppppeerrccaassee--vveerrssiioonn ((MM--aa,, MM--bb,, MM--_x,, ......))
               If  the  metafied character _x is lowercase, run the
               command that is bound to the  corresponding  upper-
               case character.
        pprreeffiixx--mmeettaa ((EESSCC))
-              Metafy  the next character typed.  EESSCC ff is equiva-
-              lent to MMeettaa--ff.
+              Metafy   the   next  character  typed.   EESSCC  ff  is
 
 
 
-
-GNU Readline 4.2            2001 Feb 5                         12
+GNU Readline 4.2            2001 Mar 5                         12
 
 
 
 
 
 READLINE(3)                                           READLINE(3)
 
 
+              equivalent to MMeettaa--ff.
        uunnddoo ((CC--__,, CC--xx CC--uu))
               Incremental undo, separately  remembered  for  each
               line.
        rreevveerrtt--lliinnee ((MM--rr))
               Undo  all  changes made to this line.  This is like
               executing the uunnddoo command enough times  to  return
               the line to its initial state.
        ttiillddee--eexxppaanndd ((MM--&&))
               Perform tilde expansion on the current word.
        sseett--mmaarrkk ((CC--@@,, MM--<<ssppaaccee>>))
-              Set  the  mark  to the current point.  If a numeric
-              argument is supplied, the mark is set to that posi-
-              tion.
+              Set  the  mark to the point.  If a numeric argument
+              is supplied, the mark is set to that position.
        eexxcchhaannggee--ppooiinntt--aanndd--mmaarrkk ((CC--xx CC--xx))
-              Swap  the  point with the mark.  The current cursor
-              position is set to the saved position, and the  old
+              Swap the point with the mark.  The  current  cursor
+              position  is set to the saved position, and the old
               cursor position is saved as the mark.
        cchhaarraacctteerr--sseeaarrcchh ((CC--]]))
-              A  character is read and point is moved to the next
-              occurrence of that  character.   A  negative  count
+              A character is read and point is moved to the  next
+              occurrence  of  that  character.   A negative count
               searches for previous occurrences.
        cchhaarraacctteerr--sseeaarrcchh--bbaacckkwwaarrdd ((MM--CC--]]))
-              A  character is read and point is moved to the pre-
-              vious occurrence of  that  character.   A  negative
+              A character is read and point is moved to the  pre-
+              vious  occurrence  of  that  character.  A negative
               count searches for subsequent occurrences.
        iinnsseerrtt--ccoommmmeenntt ((MM--##))
               The value of the readline ccoommmmeenntt--bbeeggiinn variable is
-              inserted at the beginning of the current line,  and
-              the  line  is  accepted  as  if  a newline had been
-              typed.  The default value  of  ccoommmmeenntt--bbeeggiinn  makes
+              inserted  at the beginning of the current line, and
+              the line is accepted  as  if  a  newline  had  been
+              typed.   The  default  value of ccoommmmeenntt--bbeeggiinn makes
               the current line a shell comment.
        dduummpp--ffuunnccttiioonnss
-              Print  all  of the functions and their key bindings
-              to the readline output stream.  If a numeric  argu-
+              Print all of the functions and their  key  bindings
+              to  the readline output stream.  If a numeric argu-
               ment is supplied, the output is formatted in such a
               way that it can be made part of an _i_n_p_u_t_r_c file.
        dduummpp--vvaarriiaabblleess
-              Print all of the settable variables and their  val-
-              ues  to  the  readline output stream.  If a numeric
-              argument is supplied, the output  is  formatted  in
-              such  a  way that it can be made part of an _i_n_p_u_t_r_c
+              Print  all of the settable variables and their val-
+              ues to the readline output stream.   If  a  numeric
+              argument  is  supplied,  the output is formatted in
+              such a way that it can be made part of  an  _i_n_p_u_t_r_c
               file.
        dduummpp--mmaaccrrooss
-              Print all of the readline key  sequences  bound  to
-              macros  and  the  strings they ouput.  If a numeric
-              argument is supplied, the output  is  formatted  in
-              such  a  way that it can be made part of an _i_n_p_u_t_r_c
+              Print  all  of  the readline key sequences bound to
+              macros and the strings they ouput.   If  a  numeric
+              argument  is  supplied,  the output is formatted in
+              such a way that it can be made part of  an  _i_n_p_u_t_r_c
               file.
        eemmaaccss--eeddiittiinngg--mmooddee ((CC--ee))
-              When in vvii editing mode, this causes  a  switch  to
+              When  in  vvii  editing mode, this causes a switch to
               eemmaaccss editing mode.
        vvii--eeddiittiinngg--mmooddee ((MM--CC--jj))
               When in eemmaaccss editing mode, this causes a switch to
               vvii editing mode.
 
 
 
-GNU Readline 4.2            2001 Feb 5                         13
+GNU Readline 4.2            2001 Mar 5                         13
 
 
 
 
 
 READLINE(3)                                           READLINE(3)
 
 
 DDEEFFAAUULLTT KKEEYY BBIINNDDIINNGGSS
-       The following is a list of the default emacs and vi  bind-
-       ings.   Characters  with the eighth bit set are written as
+       The  following is a list of the default emacs and vi bind-
+       ings.  Characters with the eighth bit set are  written  as
        M-<character>, and are referred to as _m_e_t_a_f_i_e_d characters.
-       The  printable  ASCII characters not mentioned in the list
-       of emacs standard bindings are bound  to  the  sseellff--iinnsseerrtt
-       function,  which just inserts the given character into the
-       input line.  In vi  insertion  mode,  all  characters  not
-       specifically  mentioned are bound to sseellff--iinnsseerrtt.  Charac-
-       ters assigned to signal generation by _s_t_t_y(1) or the  ter-
-       minal  driver,  such  as C-Z or C-C, retain that function.
-       Upper and lower case metafied characters are bound to  the
-       same  function in the emacs mode meta keymap.  The remain-
-       ing characters are unbound, which causes readline to  ring
-       the  bell  (subject to the setting of the bbeellll--ssttyyllee vari-
+       The printable ASCII characters not mentioned in  the  list
+       of  emacs  standard  bindings are bound to the sseellff--iinnsseerrtt
+       function, which just inserts the given character into  the
+       input  line.   In  vi  insertion  mode, all characters not
+       specifically mentioned are bound to sseellff--iinnsseerrtt.   Charac-
+       ters  assigned to signal generation by _s_t_t_y(1) or the ter-
+       minal driver, such as C-Z or C-C,  retain  that  function.
+       Upper  and lower case metafied characters are bound to the
+       same function in the emacs mode meta keymap.  The  remain-
+       ing  characters are unbound, which causes readline to ring
+       the bell (subject to the setting of the  bbeellll--ssttyyllee  vari-
        able).
 
    EEmmaaccss MMooddee
              Emacs Standard bindings
 
              "C-@"  set-mark
              "C-A"  beginning-of-line
              "C-B"  backward-char
@@ -914,17 +914,17 @@ DDEEFFAAUULLTT KKEEYY BBIIN
 
              Emacs Meta bindings
 
              "M-C-G"  abort
              "M-C-H"  backward-kill-word
 
 
 
-GNU Readline 4.2            2001 Feb 5                         14
+GNU Readline 4.2            2001 Mar 5                         14
 
 
 
 
 
 READLINE(3)                                           READLINE(3)
 
 
@@ -963,34 +963,34 @@ READLINE(3)                             
              "M-N"  non-incremental-forward-search-history
              "M-P"  non-incremental-reverse-search-history
              "M-R"  revert-line
              "M-T"  transpose-words
              "M-U"  upcase-word
              "M-Y"  yank-pop
              "M-\"  delete-horizontal-space
              "M-~"  tilde-expand
-             "M-C-?"  backward-delete-word
+             "M-C-?"  backward-kill-word
              "M-_"  yank-last-arg
 
              Emacs Control-X bindings
 
              "C-XC-G"  abort
              "C-XC-R"  re-read-init-file
              "C-XC-U"  undo
              "C-XC-X"  exchange-point-and-mark
              "C-X("  start-kbd-macro
              "C-X)"  end-kbd-macro
              "C-XE"  call-last-kbd-macro
              "C-XC-?"  backward-kill-line
 
 
 
 
-GNU Readline 4.2            2001 Feb 5                         15
+GNU Readline 4.2            2001 Mar 5                         15
 
 
 
 
 
 READLINE(3)                                           READLINE(3)
 
 
@@ -1029,42 +1029,43 @@ READLINE(3)                             
              "C-Q"  quoted-insert
              "C-R"  reverse-search-history
              "C-S"  forward-search-history
              "C-T"  transpose-chars
              "C-U"  unix-line-discard
              "C-V"  quoted-insert
              "C-W"  unix-word-rubout
              "C-Y"  yank
+             "C-_"  vi-undo
              " "  forward-char
              "#"  insert-comment
              "$"  end-of-line
              "%"  vi-match
              "&"  vi-tilde-expand
              "*"  vi-complete
              "+"  next-history
              ","  vi-char-search
              "-"  previous-history
              "."  vi-redo
              "/"  vi-search
              "0"  beginning-of-line
              "1" to "9"  vi-arg-digit
-             ";"  vi-char-search
 
 
 
-GNU Readline 4.2            2001 Feb 5                         16
+GNU Readline 4.2            2001 Mar 5                         16
 
 
 
 
 
 READLINE(3)                                           READLINE(3)
 
 
+             ";"  vi-char-search
              "="  vi-complete
              "?"  vi-search
              "A"  vi-append-eol
              "B"  vi-prev-word
              "C"  vi-change-to
              "D"  vi-delete-to
              "E"  vi-end-word
              "F"  vi-char-search
@@ -1095,66 +1096,66 @@ READLINE(3)                             
              "k"  prev-history
              "l"  forward-char
              "m"  vi-set-mark
              "n"  vi-search-again
              "p"  vi-put
              "r"  vi-change-char
              "s"  vi-subst
              "t"  vi-char-search
-             "u"  undo
+             "u"  vi-undo
              "w"  vi-next-word
              "x"  vi-delete
              "y"  vi-yank-to
              "|"  vi-column
              "~"  vi-change-case
 
 SSEEEE AALLSSOO
        _T_h_e _G_n_u _R_e_a_d_l_i_n_e _L_i_b_r_a_r_y, Brian Fox and Chet Ramey
        _T_h_e _G_n_u _H_i_s_t_o_r_y _L_i_b_r_a_r_y, Brian Fox and Chet Ramey
        _b_a_s_h(1)
 
-FFIILLEESS
 
 
 
 
-GNU Readline 4.2            2001 Feb 5                         17
+GNU Readline 4.2            2001 Mar 5                         17
 
 
 
 
 
 READLINE(3)                                           READLINE(3)
 
 
+FFIILLEESS
        _~_/_._i_n_p_u_t_r_c
               Individual rreeaaddlliinnee initialization file
 
 AAUUTTHHOORRSS
        Brian Fox, Free Software Foundation
        bfox@gnu.org
 
        Chet Ramey, Case Western Reserve University
        chet@ins.CWRU.Edu
 
 BBUUGG RREEPPOORRTTSS
-       If you find a bug in rreeaaddlliinnee,, you should report it.   But
-       first,  you  should make sure that it really is a bug, and
-       that it appears in the  latest  version  of  the  rreeaaddlliinnee
+       If  you find a bug in rreeaaddlliinnee,, you should report it.  But
+       first, you should make sure that it really is a  bug,  and
+       that  it  appears  in  the  latest version of the rreeaaddlliinnee
        library that you have.
 
-       Once  you have determined that a bug actually exists, mail
-       a bug report to _b_u_g_-_r_e_a_d_l_i_n_e@_g_n_u_._o_r_g.  If you have a  fix,
-       you  are  welcome  to  mail that as well!  Suggestions and
-       `philosophical' bug reports may  be  mailed  to  _b_u_g_-_r_e_a_d_-
+       Once you have determined that a bug actually exists,  mail
+       a  bug report to _b_u_g_-_r_e_a_d_l_i_n_e@_g_n_u_._o_r_g.  If you have a fix,
+       you are welcome to mail that  as  well!   Suggestions  and
+       `philosophical'  bug  reports  may  be mailed to _b_u_g_-_r_e_a_d_-
        _l_i_n_e@_g_n_u_._o_r_g   or   posted   to   the   Usenet   newsgroup
        ggnnuu..bbaasshh..bbuugg.
 
-       Comments and  bug  reports  concerning  this  manual  page
+       Comments  and  bug  reports  concerning  this  manual page
        should be directed to _c_h_e_t_@_i_n_s_._C_W_R_U_._E_d_u.
 
 BBUUGGSS
        It's too big and too slow.
 
 
 
 
@@ -1177,12 +1178,11 @@ BBUUGGSS
 
 
 
 
 
 
 
 
-
-GNU Readline 4.2            2001 Feb 5                         18
+GNU Readline 4.2            2001 Mar 5                         18
 
 
diff --git a/readline/doc/readline.3 b/readline/doc/readline.3
--- a/readline/doc/readline.3
+++ b/readline/doc/readline.3
@@ -1,19 +1,19 @@
 .\"
 .\" MAN PAGE COMMENTS to
 .\"
 .\"	Chet Ramey
 .\"	Information Network Services
 .\"	Case Western Reserve University
 .\"	chet@ins.CWRU.Edu
 .\"
-.\"	Last Change: Mon Feb  5 08:51:52 EST 2001
+.\"	Last Change: Mon Mar  5 09:58:38 EST 2001
 .\"
-.TH READLINE 3 "2001 Feb 5" "GNU Readline 4.2"
+.TH READLINE 3 "2001 Mar 5" "GNU Readline 4.2"
 .\"
 .\" File Name macro.  This used to be `.PN', for Path Name,
 .\" but Sun doesn't seem to like that very much.
 .\"
 .de FN
 \fI\|\\$1\|\fP
 ..
 .SH NAME
@@ -163,16 +163,17 @@ to a string that is inserted when the ke
 .PP
 The syntax for controlling key bindings in the
 .I inputrc
 file is simple.  All that is required is the name of the
 command or the text of a macro and a key sequence to which
 it should be bound. The name may be specified in one of two ways:
 as a symbolic key name, possibly with \fIMeta\-\fP or \fIControl\-\fP
 prefixes, or as a key sequence.
+.PP
 When using the form \fBkeyname\fP:\^\fIfunction-name\fP or \fImacro\fP,
 .I keyname
 is the name of a key spelled out in English.  For example:
 .sp
 .RS
 Control\-u: universal\-argument
 .br
 Meta\-Rubout: backward\-kill\-word
@@ -197,17 +198,18 @@ into the line).
 .PP
 In the second form, \fB"keyseq"\fP:\^\fIfunction\-name\fP or \fImacro\fP,
 .B keyseq
 differs from
 .B keyname
 above in that strings denoting
 an entire key sequence may be specified by placing the sequence
 within double quotes.  Some GNU Emacs style key escapes can be
-used, as in the following example.
+used, as in the following example, but the symbolic character names
+are not recognized.
 .sp
 .RS
 "\eC\-u": universal\-argument
 .br
 "\eC\-x\eC\-r": re\-read\-init\-file
 .br
 "\ee[11~": "Function Key 1"
 .RE
@@ -219,17 +221,19 @@ is again bound to the function
 .I "C-x C-r"
 is bound to the function
 .BR re\-read\-init\-file ,
 and 
 .I "ESC [ 1 1 ~"
 is bound to insert the text
 .if t \f(CWFunction Key 1\fP.
 .if n ``Function Key 1''.
-The full set of GNU Emacs style escape sequences is
+.PP
+The full set of GNU Emacs style escape sequences available when specifying
+key sequences is
 .RS
 .PD 0
 .TP
 .B \eC\-
 control prefix
 .TP
 .B \eM\-
 meta prefix
@@ -646,18 +650,18 @@ This is a non-incremental search.
 .TP
 .B history\-search\-backward
 Search backward through the history for the string of characters
 between the start of the current line and the point.
 This is a non-incremental search.
 .TP
 .B yank\-nth\-arg (M\-C\-y)
 Insert the first argument to the previous command (usually
-the second word on the previous line) at point (the current
-cursor position).  With an argument
+the second word on the previous line) at point.
+With an argument
 .IR n ,
 insert the \fIn\fPth word from the previous command (the words
 in the previous command begin with word 0).  A negative argument
 inserts the \fIn\fPth word from the end of the previous command.
 .TP
 .B
 yank\-last\-arg (M\-.\^, M\-_\^)
 Insert the last argument to the previous command (the last word of
@@ -666,17 +670,17 @@ behave exactly like \fByank\-nth\-arg\fP
 Successive calls to \fByank\-last\-arg\fP move back through the history
 list, inserting the last argument of each line in turn.
 .PD
 .SS Commands for Changing Text
 .PP
 .PD 0
 .TP
 .B delete\-char (C\-d)
-Delete the character under the cursor.  If point is at the
+Delete the character at point.  If point is at the
 beginning of the line, there are no characters in the line, and
 the last character typed was not bound to \fBdelete\-char\fP, then return
 .SM
 .BR EOF .
 .TP
 .B backward\-delete\-char (Rubout)
 Delete the character behind the cursor.  When given a numeric argument,
 save the deleted text on the kill ring.
@@ -693,22 +697,24 @@ how to insert characters like \fBC\-q\fP
 .B tab\-insert (M-TAB)
 Insert a tab character.
 .TP
 .B self\-insert (a,\ b,\ A,\ 1,\ !,\ ...)
 Insert the character typed.
 .TP
 .B transpose\-chars (C\-t)
 Drag the character before point forward over the character at point,
-moving point forward as well.  If point is at the end of the line, then
-transpose the two characters before point.  Negative arguments don't work.
+moving point forward as well.
+If point is at the end of the line, then this transposes
+the two characters before point.
+Negative arguments have no effect.
 .TP
 .B transpose\-words (M\-t)
-Drag the word behind the cursor past the word in front of the cursor,
-moving the cursor over that word as well.
+Drag the word before point past the word after point,
+moving point over that word as well.
 .TP
 .B upcase\-word (M\-u)
 Uppercase the current (or following) word.  With a negative argument,
 uppercase the previous word, but do not move point.
 .TP
 .B downcase\-word (M\-l)
 Lowercase the current (or following) word.  With a negative argument,
 lowercase the previous word, but do not move point.
@@ -717,43 +723,41 @@ lowercase the previous word, but do not 
 Capitalize the current (or following) word.  With a negative argument,
 capitalize the previous word, but do not move point.
 .PD
 .SS Killing and Yanking
 .PP
 .PD 0
 .TP
 .B kill\-line (C\-k)
-Kill the text from the current cursor position to the end of the line.
+Kill the text from point to the end of the line.
 .TP
 .B backward\-kill\-line (C\-x Rubout)
 Kill backward to the beginning of the line.
 .TP
 .B unix\-line\-discard (C\-u)
 Kill backward from point to the beginning of the line.
 The killed text is saved on the kill-ring.
 .\" There is no real difference between this and backward-kill-line
 .TP
 .B kill\-whole\-line
-Kill all characters on the current line, no matter where the
-cursor is.
+Kill all characters on the current line, no matter where point is.
 .TP
 .B kill\-word  (M\-d)
-Kill from the cursor to the end of the current word, or if between
+Kill from point the end of the current word, or if between
 words, to the end of the next word.  Word boundaries are the same as
 those used by \fBforward\-word\fP.
 .TP
 .B backward\-kill\-word (M\-Rubout)
-Kill the word behind the cursor.  Word boundaries are the same as
-those used by \fBbackward\-word\fP.
+Kill the word behind point.
+Word boundaries are the same as those used by \fBbackward\-word\fP.
 .TP
 .B unix\-word\-rubout (C\-w)
-Kill the word behind the cursor, using white space as a word boundary.
-The word boundaries are different from
-.BR backward\-kill\-word .
+Kill the word behind point, using white space as a word boundary.
+The killed text is saved on the kill-ring.
 .TP
 .B delete\-horizontal\-space (M\-\e)
 Delete all spaces and tabs around point.
 .TP
 .B kill\-region
 Kill the text between the point and \fImark\fP (saved cursor position).
 This text is referred to as the \fIregion\fP.
 .TP
@@ -764,17 +768,17 @@ Copy the text in the region to the kill 
 Copy the word before point to the kill buffer.
 The word boundaries are the same as \fBbackward\-word\fP.
 .TP
 .B copy\-forward\-word
 Copy the word following point to the kill buffer.
 The word boundaries are the same as \fBforward\-word\fP.
 .TP
 .B yank (C\-y)
-Yank the top of the kill ring into the buffer at the cursor.
+Yank the top of the kill ring into the buffer at point.
 .TP
 .B yank\-pop (M\-y)
 Rotate the kill ring, and yank the new top.  Only works following
 .B yank
 or
 .BR yank\-pop .
 .PD
 .SS Numeric Arguments
@@ -825,18 +829,19 @@ Insert all completions of the text befor
 that would have been generated by
 \fBpossible\-completions\fP.
 .TP
 .B menu\-complete
 Similar to \fBcomplete\fP, but replaces the word to be completed
 with a single match from the list of possible completions.
 Repeated execution of \fBmenu\-complete\fP steps through the list
 of possible completions, inserting each match in turn.
-At the end of the list of completions, the bell is rung and the
-original text is restored.
+At the end of the list of completions, the bell is rung
+(subject to the setting of \Bbell\-style\fP)
+and the original text is restored.
 An argument of \fIn\fP moves \fIn\fP positions forward in the list
 of matches; a negative argument may be used to move backward 
 through the list.
 This command is intended to be bound to \fBTAB\fP, but is unbound
 by default.
 .TP
 .B delete\-char\-or\-list
 Deletes the character under the cursor if not at the beginning or
@@ -891,17 +896,17 @@ Incremental undo, separately remembered 
 Undo all changes made to this line.  This is like executing the
 .B undo
 command enough times to return the line to its initial state.
 .TP
 .B tilde\-expand (M\-&)
 Perform tilde expansion on the current word.
 .TP
 .B set\-mark (C\-@, M\-<space>)
-Set the mark to the current point.  If a
+Set the mark to the point.  If a
 numeric argument is supplied, the mark is set to that position.
 .TP
 .B exchange\-point\-and\-mark (C\-x C\-x)
 Swap the point with the mark.  The current cursor position is set to
 the saved position, and the old cursor position is saved as the mark.
 .TP
 .B character\-search (C\-])
 A character is read and point is moved to the next occurrence of that
@@ -1051,17 +1056,17 @@ Emacs Meta bindings
 "M-N"  non-incremental-forward-search-history
 "M-P"  non-incremental-reverse-search-history
 "M-R"  revert-line
 "M-T"  transpose-words
 "M-U"  upcase-word
 "M-Y"  yank-pop
 "M-\e"  delete-horizontal-space
 "M-~"  tilde-expand
-"M-C-?"  backward-delete-word
+"M-C-?"  backward-kill-word
 "M-_"  yank-last-arg
 .PP
 Emacs Control-X bindings
 .sp
 "C-XC-G"  abort
 "C-XC-R"  re-read-init-file
 "C-XC-U"  undo
 "C-XC-X"  exchange-point-and-mark
@@ -1111,16 +1116,17 @@ VI Command Mode functions
 "C-Q"  quoted-insert
 "C-R"  reverse-search-history
 "C-S"  forward-search-history
 "C-T"  transpose-chars
 "C-U"  unix-line-discard
 "C-V"  quoted-insert
 "C-W"  unix-word-rubout
 "C-Y"  yank
+"C-_"  vi-undo
 "\^ "  forward-char
 "#"  insert-comment
 "$"  end-of-line
 "%"  vi-match
 "&"  vi-tilde-expand
 "*"  vi-complete
 "+"  next-history
 ","  vi-char-search
@@ -1165,17 +1171,17 @@ VI Command Mode functions
 "k"  prev-history
 "l"  forward-char
 "m"  vi-set-mark
 "n"  vi-search-again
 "p"  vi-put
 "r"  vi-change-char
 "s"  vi-subst
 "t"  vi-char-search
-"u"  undo
+"u"  vi-undo
 "w"  vi-next-word
 "x"  vi-delete
 "y"  vi-yank-to
 "|"  vi-column
 "~"  vi-change-case
 .RE
 .SH "SEE ALSO"
 .PD 0
diff --git a/readline/doc/rltech.texinfo b/readline/doc/rltech.texinfo
--- a/readline/doc/rltech.texinfo
+++ b/readline/doc/rltech.texinfo
@@ -30,19 +30,19 @@ Permission is granted to copy and distri
 into another language, under the above conditions for modified versions,
 except that this permission notice may be stated in a translation approved
 by the Foundation.
 @end ifinfo
 
 @node Programming with GNU Readline
 @chapter Programming with GNU Readline
 
-This chapter describes the interface between the GNU Readline Library and
+This chapter describes the interface between the @sc{gnu} Readline Library and
 other programs.  If you are a programmer, and you wish to include the
-features found in GNU Readline
+features found in @sc{gnu} Readline
 such as completion, line editing, and interactive history manipulation
 in your own programs, this section is for you.
 
 @menu
 * Basic Behavior::	Using the default behavior of Readline.
 * Custom Functions::	Adding your own functions to Readline.
 * Readline Variables::			Variables accessible to custom
 					functions.
@@ -61,27 +61,27 @@ Many programs provide a command line int
 @code{ftp}, and @code{sh}.  For such programs, the default behaviour of
 Readline is sufficient.  This section describes how to use Readline in
 the simplest way possible, perhaps to replace calls in your code to
 @code{gets()} or @code{fgets()}.
 
 @findex readline
 @cindex readline, function
 
-@example
-@code{char *readline (const char *@var{prompt});}
-@end example
-
 The function @code{readline()} prints a prompt @var{prompt}
 and then reads and returns a single line of text from the user.
 If @var{prompt} is @code{NULL} or the empty string, no prompt is displayed.
 The line @code{readline} returns is allocated with @code{malloc()};
 the caller should @code{free()} the line when it has finished with it.
 The declaration for @code{readline} in ANSI C is
 
+@example
+@code{char *readline (const char *@var{prompt});}
+@end example
+
 @noindent
 So, one might say
 @example
 @code{char *line = readline ("Enter a line: ");}
 @end example
 @noindent
 in order to read a line of text from the user.
 The line returned has the final newline removed, so only the
@@ -325,16 +325,18 @@ Setting this to a non-zero value causes 
 the current line, including any prompt, any time a newline is typed as
 the only character on an otherwise-empty line.  The cursor is moved to
 the beginning of the newly-blank line.
 @end deftypevar
 
 @deftypevar {char *} rl_prompt
 The prompt Readline uses.  This is set from the argument to
 @code{readline()}, and should not be assigned to directly.
+The @code{rl_set_prompt()} function (@pxref{Redisplay}) may
+be used to modify the prompt string after calling @code{readline()}.
 @end deftypevar
 
 @deftypevar int rl_already_prompted
 If an application wishes to display the prompt itself, rather than have
 Readline do it the first time @code{readline()} is called, it should set
 this variable to a non-zero value after displaying the prompt.
 The prompt must also be passed as the argument to @code{readline()} so
 the redisplay functions can update the display properly.
@@ -385,43 +387,45 @@ before @code{readline} prints the first 
 @deftypevar {rl_hook_func_t *} rl_pre_input_hook
 If non-zero, this is the address of a function to call after
 the first prompt has been printed and just before @code{readline}
 starts reading input characters.
 @end deftypevar
 
 @deftypevar {rl_hook_func_t *} rl_event_hook
 If non-zero, this is the address of a function to call periodically
-when readline is waiting for terminal input.
+when Readline is waiting for terminal input.
+By default, this will be called at most ten times a second if there
+is no keyboard input.
 @end deftypevar
 
 @deftypevar {rl_getc_func_t *} rl_getc_function
-If non-zero, @code{readline} will call indirectly through this pointer
+If non-zero, Readline will call indirectly through this pointer
 to get a character from the input stream.  By default, it is set to
-@code{rl_getc}, the default @code{readline} character input function
+@code{rl_getc}, the default Readline character input function
 (@pxref{Character Input}).
 @end deftypevar
 
 @deftypevar {rl_voidfunc_t *} rl_redisplay_function
-If non-zero, @code{readline} will call indirectly through this pointer
+If non-zero, Readline will call indirectly through this pointer
 to update the display with the current contents of the editing buffer.
-By default, it is set to @code{rl_redisplay}, the default @code{readline}
+By default, it is set to @code{rl_redisplay}, the default Readline
 redisplay function (@pxref{Redisplay}).
 @end deftypevar
 
 @deftypevar {rl_vintfunc_t *} rl_prep_term_function
-If non-zero, @code{readline} will call indirectly through this pointer
+If non-zero, Readline will call indirectly through this pointer
 to initialize the terminal.  The function takes a single argument, an
 @code{int} flag that says whether or not to use eight-bit characters.
 By default, this is set to @code{rl_prep_terminal}
 (@pxref{Terminal Management}).
 @end deftypevar
 
 @deftypevar {rl_voidfunc_t *} rl_deprep_term_function
-If non-zero, @code{readline} will call indirectly through this pointer
+If non-zero, Readline will call indirectly through this pointer
 to reset the terminal.  This function should undo the effects of
 @code{rl_prep_term_function}.
 By default, this is set to @code{rl_deprep_terminal}
 (@pxref{Terminal Management}).
 @end deftypevar
 
 @deftypevar {Keymap} rl_executing_keymap
 This variable is set to the keymap (@pxref{Keymaps}) in which the
@@ -516,16 +520,17 @@ means that vi mode is active.
 * Associating Function Names and Bindings::	Translate function names to
 						key sequences.
 * Allowing Undoing::	How to make your functions undoable.
 * Redisplay::		Functions to control line display.
 * Modifying Text::	Functions to modify @code{rl_line_buffer}.
 * Character Input::	Functions to read keyboard input.
 * Terminal Management::	Functions to manage terminal settings.
 * Utility Functions::	Generally useful functions and hooks.
+* Miscellaneous Functions::	Functions that don't fall into any category.
 * Alternate Interface::	Using Readline in a `callback' fashion.
 @end menu
 
 @node Function Naming
 @subsection Naming a Function
 
 The user can dynamically change the bindings of keys while using
 Readline.  This is done by representing the function with a descriptive
@@ -821,16 +826,24 @@ It should be used after setting @var{rl_
 Reset the display state to a clean state and redisplay the current line
 starting on a new line.
 @end deftypefun
 
 @deftypefun int rl_crlf (void)
 Move the cursor to the start of the next screen line.
 @end deftypefun
 
+@deftypefun int rl_show_char (int c)
+Display character @var{c} on @code{rl_outstream}.
+If Readline has not been set to display meta characters directly, this
+will convert meta characters to a meta-prefixed key sequence.
+This is intended for use by applications which wish to do their own
+redisplay.
+@end deftypefun
+
 @deftypefun int rl_message (const char *, @dots{})
 The arguments are a format string as would be supplied to @code{printf},
 possibly containing conversion specifications such as @samp{%d}, and
 any additional arguments necessary to satisfy the conversion specifications.
 The resulting string is displayed in the @dfn{echo area}.  The echo area
 is also used to display numeric arguments and search strings.
 @end deftypefun
 
@@ -852,16 +865,23 @@ recent call to @code{rl_save_prompt}.
 Expand any special character sequences in @var{prompt} and set up the
 local Readline prompt redisplay variables.
 This function is called by @code{readline()}.  It may also be called to
 expand the primary prompt if the @code{rl_on_new_line_with_prompt()}
 function or @code{rl_already_prompted} variable is used.
 It returns the number of visible characters on the last line of the
 (possibly multi-line) prompt.
 @end deftypefun
+
+@deftypefun int rl_set_prompt (const char *prompt)
+Make Readline use @var{prompt} for subsequent redisplay.  This calls
+@code{rl_expand_prompt()} to expand the prompt and sets @code{rl_prompt}
+to the result.
+@end deftypefun
+
 @node Modifying Text
 @subsection Modifying Text
 
 @deftypefun int rl_insert_text (const char *text)
 Insert @var{text} into the line at the current cursor position.
 @end deftypefun
 
 @deftypefun int rl_delete_text (int start, int end)
@@ -877,16 +897,22 @@ the current line.
 Copy the text between @var{start} and @var{end} in the current line
 to the kill ring, appending or prepending to the last kill if the
 last command was a kill command.  The text is deleted.
 If @var{start} is less than @var{end},
 the text is appended, otherwise prepended.  If the last command was
 not a kill, a new kill ring slot is used.
 @end deftypefun
 
+@deftypefun int rl_push_macro_input (char *macro)
+Cause @var{macro} to be inserted into the line, as if it had been invoked
+by a key bound to a macro.  Not especially useful; use
+@code{rl_insert_text()} instead.
+@end deftypefun
+
 @node Character Input
 @subsection Character Input
 
 @deftypefun int rl_read_key (void)
 Return the next character available from Readline's current input stream.
 This handles input inserted into
 the input stream via @var{rl_pending_input} (@pxref{Readline Variables})
 and @code{rl_stuff_char()}, macros, and characters read from the keyboard.
@@ -904,47 +930,47 @@ before Readline attempts to read charact
 @end deftypefun
 
 @deftypefun int rl_execute_next (int c)
 Make @var{c} be the next command to be executed when @code{rl_read_key()}
 is called.  This sets @var{rl_pending_input}.
 @end deftypefun
 
 @deftypefun int rl_clear_pending_input (void)
-Unet @var{rl_pending_input}, effectively negating the effect of any
+Unset @var{rl_pending_input}, effectively negating the effect of any
 previous call to @code{rl_execute_next()}.  This works only if the
 pending input has not already been read with @code{rl_read_key()}.
 @end deftypefun
 
 @node Terminal Management
 @subsection Terminal Management
 
-@deftypefun int rl_prep_terminal (int meta_flag)
+@deftypefun void rl_prep_terminal (int meta_flag)
 Modify the terminal settings for Readline's use, so @code{readline()}
 can read a single character at a time from the keyboard.
 The @var{meta_flag} argument should be non-zero if Readline should
 read eight-bit input.
 @end deftypefun
 
-@deftypefun in rl_deprep_terminal (void)
+@deftypefun void rl_deprep_terminal (void)
 Undo the effects of @code{rl_prep_terminal()}, leaving the terminal in
 the state in which it was before the most recent call to
 @code{rl_prep_terminal()}.
 @end deftypefun
 
 @deftypefun void rl_tty_set_default_bindings (Keymap kmap)
 Read the operating system's terminal editing characters (as would be displayed
-by @code{stty} to their readline equivalents.  The bindings are performed
+by @code{stty}) to their Readline equivalents.  The bindings are performed
 in @var{kmap}.
 @end deftypefun
 
 @deftypefun int rl_reset_terminal (const char *terminal_name)
 Reinitialize Readline's idea of the terminal settings using
 @var{terminal_name} as the terminal type (e.g., @code{vt100}).
-If @var{terminal_name} is NULL, the value of the @code{TERM}
+If @var{terminal_name} is @code{NULL}, the value of the @code{TERM}
 environment variable is used.
 @end deftypefun
 
 @node Utility Functions
 @subsection Utility Functions
 
 @deftypefun int rl_extend_line_buffer (int len)
 Ensure that @code{rl_line_buffer} has enough space to hold @var{len}
@@ -999,16 +1025,47 @@ uppercase character.
 If @var{c} is an uppercase alphabetic character, return the corresponding
 lowercase character.
 @end deftypefun
 
 @deftypefun int _rl_digit_value (int c)
 If @var{c} is a number, return the value it represents.
 @end deftypefun
 
+@node Miscellaneous Functions
+@subsection Miscellaneous Functions
+
+@deftypefun int rl_macro_bind (const char *keyseq, const char *macro, Keymap map)
+Bind the key sequence @var{keyseq} to invoke the macro @var{macro}.
+The binding is performed in @var{map}.  When @var{keyseq} is invoked, the
+@var{macro} will be inserted into the line.  This function is deprecated;
+use @code{rl_generic_bind()} instead.
+@end deftypefun
+
+@deftypefun void rl_macro_dumper (int readable)
+Print the key sequences bound to macros and their values, using
+the current keymap, to @code{rl_outstream}.
+If @var{readable} is non-zero, the list is formatted in such a way
+that it can be made part of an @code{inputrc} file and re-read.
+@end deftypefun
+
+@deftypefun int rl_variable_bind (const char *variable, const char *value)
+Make the Readline variable @var{variable} have @var{value}.
+This behaves as if the readline command
+@samp{set @var{variable} @var{value}} had been executed in an @code{inputrc}
+file (@pxref{Readline Init File Syntax}).
+@end deftypefun
+
+@deftypefun void rl_variable_dumper (int readable)
+Print the readline variable names and their current values
+to @code{rl_outstream}.
+If @var{readable} is non-zero, the list is formatted in such a way
+that it can be made part of an @code{inputrc} file and re-read.
+@end deftypefun
+
 @node Alternate Interface
 @subsection Alternate Interface
 
 An alternate interface is available to plain @code{readline()}.  Some
 applications need to interleave keyboard I/O with file, device, or
 window system I/O, typically by using a main loop to @code{select()}
 on various file descriptors.  To accomodate this need, readline can
 also be invoked as a `callback' function from an event loop.  There
@@ -1102,23 +1159,23 @@ invert_case_line (count, key)
 @}
 @end example
 
 @node Readline Signal Handling
 @section Readline Signal Handling
 
 Signals are asynchronous events sent to a process by the Unix kernel,
 sometimes on behalf of another process.  They are intended to indicate
-exceptional events, like a user pressing the interrupt key on his
-terminal, or a network connection being broken.  There is a class of
-signals that can be sent to the process currently reading input from
-the keyboard.  Since Readline changes the terminal attributes when it
-is called, it needs to perform special processing when a signal is
-received to restore the terminal to a sane state, or provide application
-writers with functions to do so manually.
+exceptional events, like a user pressing the interrupt key on his terminal,
+or a network connection being broken.  There is a class of signals that can
+be sent to the process currently reading input from the keyboard.  Since
+Readline changes the terminal attributes when it is called, it needs to
+perform special processing when such a signal is received in order to
+restore the terminal to a sane state, or provide application writers with
+functions to do so manually. 
 
 Readline contains an internal signal handler that is installed for a
 number of signals (@code{SIGINT}, @code{SIGQUIT}, @code{SIGTERM},
 @code{SIGALRM}, @code{SIGTSTP}, @code{SIGTTIN}, and @code{SIGTTOU}).
 When one of these signals is received, the signal handler
 will reset the terminal attributes to those that were in effect before
 @code{readline()} was called, reset the signal handling to what it was
 before @code{readline()} was called, and resend the signal to the calling
@@ -1199,16 +1256,25 @@ is received.
 Update Readline's internal screen size by reading values from the kernel.
 @end deftypefun
 
 @deftypefun void rl_set_screen_size (int rows, int cols)
 Set Readline's idea of the terminal size to @var{rows} rows and
 @var{cols} columns.
 @end deftypefun
 
+If an application does not want to install a @code{SIGWINCH} handler, but
+is still interested in the screen dimensions, Readline's idea of the screen
+size may be queried.
+
+@deftypefun void rl_get_screen_size (int *rows, int *cols)
+Return Readline's idea of the terminal's size in the
+variables pointed to by the arguments.
+@end deftypefun
+
 The following functions install and remove Readline's signal handlers.
 
 @deftypefun int rl_set_signals (void)
 Install Readline's signal handler for @code{SIGINT}, @code{SIGQUIT},
 @code{SIGTERM}, @code{SIGALRM}, @code{SIGTSTP}, @code{SIGTTIN},
 @code{SIGTTOU}, and @code{SIGWINCH}, depending on the values of
 @code{rl_catch_signals} and @code{rl_catch_sigwinch}.
 @end deftypefun
@@ -1329,35 +1395,35 @@ List the possible completions.  See desc
 
 @deftypefun int rl_insert_completions (int count, int invoking_key)
 Insert the list of possible completions into the line, deleting the
 partially-completed word.  See description of @code{rl_complete()}.
 This calls @code{rl_complete_internal()} with an argument of @samp{*}.
 @end deftypefun
 
 @deftypefun {char **} rl_completion_matches (const char *text, rl_compentry_func_t *entry_func)
-Returns an array of @code{(char *)} which is a list of completions for
+Returns an array of strings which is a list of completions for
 @var{text}.  If there are no completions, returns @code{NULL}.
 The first entry in the returned array is the substitution for @var{text}.
 The remaining entries are the possible completions.  The array is
 terminated with a @code{NULL} pointer.
 
 @var{entry_func} is a function of two args, and returns a
-@code{(char *)}.  The first argument is @var{text}.  The second is a
+@code{char *}.  The first argument is @var{text}.  The second is a
 state argument; it is zero on the first call, and non-zero on subsequent
 calls.  @var{entry_func} returns a @code{NULL}  pointer to the caller
 when there are no more matches.
 @end deftypefun
 
 @deftypefun {char *} rl_filename_completion_function (const char *text, int state)
-A generator function for filename completion in the general case.  Note
-that completion in Bash is a little different because of all
-the pathnames that must be followed when looking up completions for a
-command.  The Bash source is a useful reference for writing custom
-completion functions.
+A generator function for filename completion in the general case.
+@var{text} is a partial filename.
+The Bash source is a useful reference for writing custom
+completion functions (the Bash completion functions call this and other
+Readline functions).
 @end deftypefun
 
 @deftypefun {char *} rl_username_completion_function (const char *text, int state)
 A completion generator for usernames.  @var{text} contains a partial
 username preceded by a random character (usually @samp{~}).  As with all
 completion generators, @var{state} is zero on the first call and non-zero
 for subsequent calls.
 @end deftypefun
@@ -1377,17 +1443,17 @@ The function is called with @var{text}, 
 @var{start} and @var{end} are indices in @code{rl_line_buffer} defining
 the boundaries of @var{text}, which is a character string.
 If this function exists and returns @code{NULL}, or if this variable is
 set to @code{NULL}, then @code{rl_complete()} will call the value of
 @code{rl_completion_entry_function} to generate matches, otherwise the
 array of strings returned will be used.
 If this function sets the @code{rl_attempted_completion_over}
 variable to a non-zero value, Readline will not perform its default
-completion if this function returns no matches.
+completion even if this function returns no matches.
 @end deftypevar
 
 @deftypevar {rl_quote_func_t *} rl_filename_quoting_function
 A pointer to a function that will quote a filename in an
 application-specific fashion.  This is called if filename completion is being
 attempted and one of the characters in @code{rl_filename_quote_characters}
 appears in a completed filename.  The function is called with
 @var{text}, @var{match_type}, and @var{quote_pointer}.  The @var{text}
@@ -1407,48 +1473,48 @@ the filesystem.  It is called with @var{
 to be dequoted, and @var{quote_char}, which is the quoting character 
 that delimits the filename (usually @samp{'} or @samp{"}).  If
 @var{quote_char} is zero, the filename was not in an embedded string.
 @end deftypevar
 
 @deftypevar {rl_linebuf_func_t *} rl_char_is_quoted_p
 A pointer to a function to call that determines whether or not a specific
 character in the line buffer is quoted, according to whatever quoting
-mechanism the program calling readline uses.  The function is called with
+mechanism the program calling Readline uses.  The function is called with
 two arguments: @var{text}, the text of the line, and @var{index}, the
 index of the character in the line.  It is used to decide whether a
 character found in @code{rl_completer_word_break_characters} should be
 used to break words for the completer.
 @end deftypevar
 
 @deftypevar int rl_completion_query_items
 Up to this many items will be displayed in response to a
 possible-completions call.  After that, we ask the user if she is sure
 she wants to see them all.  The default value is 100.
 @end deftypevar
 
 @deftypevar {const char *} rl_basic_word_break_characters
 The basic list of characters that signal a break between words for the
 completer routine.  The default value of this variable is the characters
-which break words for completion in Bash, i.e.,
+which break words for completion in Bash:
 @code{" \t\n\"\\'`@@$><=;|&@{("}.
 @end deftypevar
 
 @deftypevar {const char *} rl_basic_quote_characters
-List of quote characters which can cause a word break.
+A list of quote characters which can cause a word break.
 @end deftypevar
 
 @deftypevar {const char *} rl_completer_word_break_characters
 The list of characters that signal a break between words for
 @code{rl_complete_internal()}.  The default list is the value of
 @code{rl_basic_word_break_characters}.
 @end deftypevar
 
 @deftypevar {const char *} rl_completer_quote_characters
-List of characters which can be used to quote a substring of the line.
+A list of characters which can be used to quote a substring of the line.
 Completion occurs on the entire substring, and within the substring
 @code{rl_completer_word_break_characters} are treated as any other character,
 unless they also appear within this list.
 @end deftypevar
 
 @deftypevar {const char *} rl_filename_quote_characters
 A list of characters that cause a filename to be quoted by the completer
 when they appear in a completed filename.  The default is the null string.
@@ -1468,17 +1534,18 @@ line, this character is appended to the 
 default is a space character (@samp{ }).  Setting this to the null
 character (@samp{\0}) prevents anything being appended automatically.
 This can be changed in custom completion functions to
 provide the ``most sensible word separator character'' according to
 an application-specific command line syntax specification.
 @end deftypevar
 
 @deftypevar int rl_ignore_completion_duplicates
-If non-zero, then disallow duplicates in the matches.  Default is 1.
+If non-zero, then duplicates in the matches are removed.
+The default is 1.
 @end deftypevar
 
 @deftypevar int rl_filename_completion_desired
 Non-zero means that the results of the matches are to be treated as
 filenames.  This is @emph{always} zero on entry, and can only be changed
 within a completion entry generator function.  If it is set to a non-zero
 value, directory names have a slash appended and Readline attempts to
 quote completed filenames if they contain any characters in
@@ -1494,18 +1561,18 @@ completed filename contains any characte
 on entry, and can only be changed within a completion entry generator
 function.  The quoting is effected via a call to the function pointed to
 by @code{rl_filename_quoting_function}.
 @end deftypevar
 
 @deftypevar int rl_attempted_completion_over
 If an application-specific completion function assigned to
 @code{rl_attempted_completion_function} sets this variable to a non-zero
-value, Readline will not perform its default filename completion if the
-application's completion function returns no matches.
+value, Readline will not perform its default filename completion even
+if the application's completion function returns no matches.
 It should be set only by an application's completion function.
 @end deftypevar
 
 @deftypevar int rl_completion_type
 Set to a character describing the type of completion Readline is currently
 attempting; see the description of @code{rl_complete_internal()}
 (@pxref{Completion Functions}) for the list of characters.
 @end deftypevar
diff --git a/readline/doc/rluser.texinfo b/readline/doc/rluser.texinfo
--- a/readline/doc/rluser.texinfo
+++ b/readline/doc/rluser.texinfo
@@ -357,32 +357,44 @@ Lines beginning with a @samp{#} are comm
 Lines beginning with a @samp{$} indicate conditional
 constructs (@pxref{Conditional Init Constructs}).  Other lines
 denote variable settings and key bindings.
 
 @table @asis
 @item Variable Settings
 You can modify the run-time behavior of Readline by
 altering the values of variables in Readline
-using the @code{set} command within the init file.  Here is how to
+using the @code{set} command within the init file.
+The syntax is simple:
+
+@example
+set @var{variable} @var{value}
+@end example
+
+@noindent
+Here, for example, is how to
 change from the default Emacs-like key binding to use
 @code{vi} line editing commands:
 
 @example
 set editing-mode vi
 @end example
 
+Variable names and values, where appropriate, are recognized without regard
+to case. 
+
 @ifset BashFeatures
 The @w{@code{bind -V}} command lists the current Readline variable names
 and values.  @xref{Bash Builtins}.
 @end ifset
 
 A great deal of run-time behavior is changeable with the following
 variables.
 
+@cindex variables, readline
 @table @code
 
 @item bell-style
 @vindex bell-style
 Controls what happens when Readline wants to ring the terminal bell.
 If set to @samp{none}, Readline never rings the bell.  If set to
 @samp{visible}, Readline uses a visible bell if one is available.
 If set to @samp{audible} (the default), Readline attempts to ring
@@ -527,16 +539,19 @@ the command does.
 
 Once you know the name of the command, simply place on a line
 in the init file the name of the key
 you wish to bind the command to, a colon, and then the name of the
 command.  The name of the key
 can be expressed in different ways, depending on what you find most
 comfortable.
 
+In addition to command names, readline allows keys to be bound
+to a string that is inserted when the key is pressed (a @var{macro}).
+
 @ifset BashFeatures
 The @w{@code{bind -p}} command displays Readline function names and
 bindings in a format that can put directly into an initialization file.
 @xref{Bash Builtins}.
 @end ifset
 
 @table @asis
 @item @w{@var{keyname}: @var{function-name} or @var{macro}}
@@ -681,17 +696,18 @@ terminal's function keys.  The word on t
 @samp{=} is tested against both the full name of the terminal and
 the portion of the terminal name before the first @samp{-}.  This
 allows @code{sun} to match both @code{sun} and @code{sun-cmd},
 for instance.
 
 @item application
 The @var{application} construct is used to include
 application-specific settings.  Each program using the Readline
-library sets the @var{application name}, and you can test for it. 
+library sets the @var{application name}, and you can test for
+a particular value. 
 This could be used to bind key sequences to functions useful for
 a specific program.  For instance, the following command adds a
 key sequence that quotes the current or previous word in Bash:
 @example
 $if Bash
 # Quote the current or previous word
 "\C-xq": "\eb\"\ef\""
 $endif
@@ -704,16 +720,17 @@ This command, as seen in the previous ex
 
 @item $else
 Commands in this branch of the @code{$if} directive are executed if
 the test fails.
 
 @item $include
 This directive takes a single filename as an argument and reads commands
 and bindings from that file.
+For example, the following directive reads from @file{/etc/inputrc}:
 @example
 $include /etc/inputrc
 @end example
 @end table
 
 @node Sample Init File
 @subsection Sample Init File
 
@@ -837,18 +854,18 @@ set completion-query-items 150
 
 This section describes Readline commands that may be bound to key
 sequences.
 @ifset BashFeatures
 You can list your key bindings by executing
 @w{@code{bind -P}} or, for a more terse format, suitable for an
 @var{inputrc} file, @w{@code{bind -p}}.  (@xref{Bash Builtins}.)
 @end ifset
+Command names without an accompanying key sequence are unbound by default.
 
-Command names without an accompanying key sequence are unbound by default.
 In the following descriptions, @dfn{point} refers to the current cursor
 position, and @dfn{mark} refers to a cursor position saved by the
 @code{set-mark} command.
 The text between the point and mark is referred to as the @dfn{region}.
 
 @node Commands For Moving
 @subsection Commands For Moving
 @ftable @code
@@ -894,25 +911,25 @@ the @env{HISTCONTROL} and @env{HISTIGNOR
 If this line is a modified history line, then restore the history line
 to its original state.
 @end ifset
 @ifclear BashFeatures
 Accept the line regardless of where the cursor is.
 If this line is
 non-empty, it may be added to the history list for future recall with
 @code{add_history()}.
-If this line is a modified history line, then restore the history line
+If this line is a modified history line, the history line is restored
 to its original state.
 @end ifclear
 
 @item previous-history (C-p)
-Move `up' through the history list.
+Move `back' through the history list, fetching the previous command.
 
 @item next-history (C-n)
-Move `down' through the history list.
+Move `forward' through the history list, fetching the next command.
 
 @item beginning-of-history (M-<)
 Move to the first line in the history.
 
 @item end-of-history (M->)
 Move to the end of the input history, i.e., the line currently
 being entered.
 
@@ -942,17 +959,18 @@ By default, this command is unbound.
 
 @item history-search-backward ()
 Search backward through the history for the string of characters
 between the start of the current line and the point.  This
 is a non-incremental search.  By default, this command is unbound.
 
 @item yank-nth-arg (M-C-y)
 Insert the first argument to the previous command (usually
-the second word on the previous line).  With an argument @var{n},
+the second word on the previous line) at point.
+With an argument @var{n},
 insert the @var{n}th word from the previous command (the words
 in the previous command begin with word 0).  A negative argument
 inserts the @var{n}th word from the end of the previous command.
 
 @item yank-last-arg (M-. or M-_)
 Insert last argument to the previous command (the last word of the
 previous history entry).  With an
 argument, behave exactly like @code{yank-nth-arg}.
@@ -961,17 +979,17 @@ list, inserting the last argument of eac
 
 @end ftable
 
 @node Commands For Text
 @subsection Commands For Changing Text
 
 @ftable @code
 @item delete-char (C-d)
-Delete the character under the cursor.  If the cursor is at the
+Delete the character at point.  If point is at the
 beginning of the line, there are no characters in the line, and
 the last character typed was not bound to @code{delete-char}, then
 return @sc{eof}.
 
 @item backward-delete-char (Rubout)
 Delete the character behind the cursor.  A numeric argument means
 to kill the characters instead of deleting them.
 
@@ -1028,17 +1046,17 @@ Kill the text from point to the end of t
 
 @item backward-kill-line (C-x Rubout)
 Kill backward to the beginning of the line.
 
 @item unix-line-discard (C-u)
 Kill backward from the cursor to the beginning of the current line.
 
 @item kill-whole-line ()
-Kill all characters on the current line, no matter point is.
+Kill all characters on the current line, no matter where point is.
 By default, this is unbound.
 
 @item kill-word (M-d)
 Kill from point to the end of the current word, or if between
 words, to the end of the next word.
 Word boundaries are the same as @code{forward-word}.
 
 @item backward-kill-word (M-@key{DEL})
@@ -1066,18 +1084,17 @@ The word boundaries are the same as @cod
 By default, this command is unbound.
 
 @item copy-forward-word ()
 Copy the word following point to the kill buffer.
 The word boundaries are the same as @code{forward-word}.
 By default, this command is unbound.
 
 @item yank (C-y)
-Yank the top of the kill ring into the buffer at the current
-cursor position.
+Yank the top of the kill ring into the buffer at point.
 
 @item yank-pop (M-y)
 Rotate the kill-ring, and yank the new top.  You can only do this if
 the prior command is @code{yank} or @code{yank-pop}.
 @end ftable
 
 @node Numeric Arguments
 @subsection Specifying Numeric Arguments
@@ -1116,29 +1133,30 @@ text begins with @samp{$}), username (if
 command (including aliases and functions) in turn.  If none 
 of these produces a match, filename completion is attempted.
 @end ifset
 @ifclear BashFeatures
 The default is filename completion.
 @end ifclear
 
 @item possible-completions (M-?)
-List the possible completions of the text before the cursor.
+List the possible completions of the text before point.
 
 @item insert-completions (M-*)
 Insert all completions of the text before point that would have
 been generated by @code{possible-completions}.
 
 @item menu-complete ()
 Similar to @code{complete}, but replaces the word to be completed
 with a single match from the list of possible completions.
 Repeated execution of @code{menu-complete} steps through the list
 of possible completions, inserting each match in turn.
-At the end of the list of completions, the bell is rung and the
-original text is restored.
+At the end of the list of completions, the bell is rung
+(subject to the setting of @code{bell-style})
+and the original text is restored.
 An argument of @var{n} moves @var{n} positions forward in the list
 of matches; a negative argument may be used to move backward
 through the list.
 This command is intended to be bound to @key{TAB}, but is unbound
 by default.
 
 @item delete-char-or-list ()
 Deletes the character under the cursor if not at the beginning or
@@ -1233,17 +1251,17 @@ Abort the current editing command and
 ring the terminal's bell (subject to the setting of
 @code{bell-style}).
 
 @item do-uppercase-version (M-a, M-b, M-@var{x}, @dots{})
 If the metafied character @var{x} is lowercase, run the command
 that is bound to the corresponding uppercase character.
 
 @item prefix-meta (@key{ESC})
-Make the next character typed be metafied.  This is for keyboards
+Metafy the next character typed.  This is for keyboards
 without a meta key.  Typing @samp{@key{ESC} f} is equivalent to typing
 @kbd{M-f}.
 
 @item undo (C-_ or C-x C-u)
 Incremental undo, separately remembered for each line.
 
 @item revert-line (M-r)
 Undo all changes made to this line.  This is like executing the @code{undo}
@@ -1253,17 +1271,17 @@ command enough times to get back to the 
 @item tilde-expand (M-&)
 @end ifset
 @ifclear BashFeatures
 @item tilde-expand (M-~)
 @end ifclear
 Perform tilde expansion on the current word.
 
 @item set-mark (C-@@)
-Set the mark to the current point.  If a
+Set the mark to the point.  If a
 numeric argument is supplied, the mark is set to that position.
 
 @item exchange-point-and-mark (C-x C-x)
 Swap the point with the mark.  The current cursor position is set to
 the saved position, and the old cursor position is saved as the mark.
 
 @item character-search (C-])
 A character is read and point is moved to the next occurrence of that
@@ -1358,17 +1376,18 @@ the @sc{posix} 1003.2 standard.
 
 @ifset BashFeatures
 In order to switch interactively between @code{emacs} and @code{vi}
 editing modes, use the @samp{set -o emacs} and @samp{set -o vi}
 commands (@pxref{The Set Builtin}).
 @end ifset
 @ifclear BashFeatures
 In order to switch interactively between @code{emacs} and @code{vi}
-editing modes, use the command @kbd{M-C-j} (toggle-editing-mode).
+editing modes, use the command @kbd{M-C-j} (bound to emacs-editing-mode
+when in @code{vi} mode and to vi-editing-mode in @code{emacs} mode).
 @end ifclear
 The Readline default is @code{emacs} mode.
 
 When you enter a line in @code{vi} mode, you are already placed in
 `insertion' mode, as if you had typed an @samp{i}.  Pressing @key{ESC}
 switches you into `command' mode, where you can edit the text of the
 line with the standard @code{vi} movement keys, move to previous
 history lines with @samp{k} and subsequent lines with @samp{j}, and
diff --git a/readline/histexpand.c b/readline/histexpand.c
--- a/readline/histexpand.c
+++ b/readline/histexpand.c
@@ -88,16 +88,19 @@ char history_comment_char = '\0';
 /* The list of characters which inhibit the expansion of text if found
    immediately following history_expansion_char. */
 char *history_no_expand_chars = " \t\n\r=";
 
 /* If set to a non-zero value, single quotes inhibit history expansion.
    The default is 0. */
 int history_quotes_inhibit_expansion = 0;
 
+/* Used to split words by history_tokenize_internal. */
+char *history_word_delimiters = HISTORY_WORD_DELIMITERS;
+
 /* If set, this points to a function that is called to verify that a
    particular history expansion should be performed. */
 rl_linebuf_func_t *history_inhibit_expansion_function;
 
 /* **************************************************************** */
 /*								    */
 /*			History Expansion			    */
 /*								    */
@@ -814,16 +817,19 @@ history_expand (hstring, output)
 
   /* The output string, and its length. */
   int result_len;
   char *result;
 
   /* Used when adding the string. */
   char *temp;
 
+  if (output == 0)
+    return 0;
+
   /* Setting the history expansion character to 0 inhibits all
      history expansion. */
   if (history_expansion_char == 0)
     {
       *output = savestring (hstring);
       return (0);
     }
     
@@ -863,17 +869,17 @@ history_expand (hstring, output)
       for (i = 0; string[i]; i++)
 	{
 	  cc = string[i + 1];
 	  /* The history_comment_char, if set, appearing that the beginning
 	     of a word signifies that the rest of the line should not have
 	     history expansion performed on it.
 	     Skip the rest of the line and break out of the loop. */
 	  if (history_comment_char && string[i] == history_comment_char &&
-	      (i == 0 || member (string[i - 1], HISTORY_WORD_DELIMITERS)))
+	      (i == 0 || member (string[i - 1], history_word_delimiters)))
 	    {
 	      while (string[i])
 		i++;
 	      break;
 	    }
 	  else if (string[i] == history_expansion_char)
 	    {
 	      if (!cc || member (cc, history_no_expand_chars))
@@ -961,17 +967,17 @@ history_expand (hstring, output)
 		free (temp);
 	      }
 	    else
 	      ADD_CHAR (string[i]);
 	    break;
 	  }
 
 	case -2:		/* history_comment_char */
-	  if (i == 0 || member (string[i - 1], HISTORY_WORD_DELIMITERS))
+	  if (i == 0 || member (string[i - 1], history_word_delimiters))
 	    {
 	      temp = xmalloc (l - i + 1);
 	      strcpy (temp, string + i);
 	      ADD_STRING (temp);
 	      free (temp);
 	      i = l;
 	    }
 	  else
@@ -1301,17 +1307,17 @@ history_tokenize_internal (string, wind,
 	    }
 
 	  if (delimiter && string[i] == delimiter)
 	    {
 	      delimiter = 0;
 	      continue;
 	    }
 
-	  if (!delimiter && (member (string[i], HISTORY_WORD_DELIMITERS)))
+	  if (!delimiter && (member (string[i], history_word_delimiters)))
 	    break;
 
 	  if (!delimiter && member (string[i], HISTORY_QUOTE_CHARACTERS))
 	    delimiter = string[i];
 	}
 
     got_token:
 
diff --git a/readline/histfile.c b/readline/histfile.c
--- a/readline/histfile.c
+++ b/readline/histfile.c
@@ -217,58 +217,79 @@ read_history_range (filename, from, to)
 
   FREE (input);
   FREE (buffer);
 
   return (0);
 }
 
 /* Truncate the history file FNAME, leaving only LINES trailing lines.
-   If FNAME is NULL, then use ~/.history. */
+   If FNAME is NULL, then use ~/.history.  Returns 0 on success, errno
+   on failure. */
 int
 history_truncate_file (fname, lines)
      const char *fname;
      int lines;
 {
   register int i;
-  int file, chars_read;
+  int file, chars_read, rv;
   char *buffer, *filename;
   struct stat finfo;
   size_t file_size;
 
   buffer = (char *)NULL;
   filename = history_filename (fname);
   file = open (filename, O_RDONLY|O_BINARY, 0666);
+  rv = 0;
 
   /* Don't try to truncate non-regular files. */
-  if (file == -1 || fstat (file, &finfo) == -1 || S_ISREG (finfo.st_mode) == 0)
+  if (file == -1 || fstat (file, &finfo) == -1)
     {
+      rv = errno;
       if (file != -1)
 	close (file);
       goto truncate_exit;
     }
 
+  if (S_ISREG (finfo.st_mode) == 0)
+    {
+      close (file);
+#ifdef EFTYPE
+      rv = EFTYPE;
+#else
+      rv = EINVAL;
+#endif
+      goto truncate_exit;
+    }
+
   file_size = (size_t)finfo.st_size;
 
   /* check for overflow on very large files */
   if (file_size != finfo.st_size || file_size + 1 < file_size)
     {
       close (file);
 #if defined (EFBIG)
-      errno = EFBIG;
+      rv = errno = EFBIG;
+#elif defined (EOVERFLOW)
+      rv = errno = EOVERFLOW;
+#else
+      rv = errno = EINVAL;
 #endif
       goto truncate_exit;
     }
 
   buffer = xmalloc (file_size + 1);
   chars_read = read (file, buffer, file_size);
   close (file);
 
   if (chars_read <= 0)
-    goto truncate_exit;
+    {
+      rv = (chars_read < 0) ? errno : 0;
+      goto truncate_exit;
+    }
 
   /* Count backwards from the end of buffer until we have passed
      LINES lines. */
   for (i = chars_read - 1; lines && i; i--)
     {
       if (buffer[i] == '\n')
 	lines--;
     }
@@ -299,33 +320,34 @@ history_truncate_file (fname, lines)
       close (file);
     }
 
  truncate_exit:
 
   FREE (buffer);
 
   free (filename);
-  return 0;
+  return rv;
 }
 
 /* Workhorse function for writing history.  Writes NELEMENT entries
    from the history list to FILENAME.  OVERWRITE is non-zero if you
    wish to replace FILENAME with the entries. */
 static int
 history_do_write (filename, nelements, overwrite)
      const char *filename;
      int nelements, overwrite;
 {
   register int i;
   char *output;
-  int file, mode;
+  int file, mode, rv;
 
   mode = overwrite ? O_WRONLY|O_CREAT|O_TRUNC|O_BINARY : O_WRONLY|O_APPEND|O_BINARY;
   output = history_filename (filename);
+  rv = 0;
 
   if ((file = open (output, mode, 0600)) == -1)
     {
       FREE (output);
       return (errno);
     }
 
   if (nelements > history_length)
@@ -349,25 +371,26 @@ history_do_write (filename, nelements, o
 
     for (j = 0, i = history_length - nelements; i < history_length; i++)
       {
 	strcpy (buffer + j, the_history[i]->line);
 	j += strlen (the_history[i]->line);
 	buffer[j++] = '\n';
       }
 
-    write (file, buffer, buffer_size);
+    if (write (file, buffer, buffer_size) < 0)
+      rv = errno;
     free (buffer);
   }
 
   close (file);
 
   FREE (output);
 
-  return (0);
+  return (rv);
 }
 
 /* Append NELEMENT entries to FILENAME.  The entries appended are from
    the end of the list minus NELEMENTs up to the end of the list. */
 int
 append_history (nelements, filename)
      int nelements;
      const char *filename;
diff --git a/readline/history.c b/readline/history.c
--- a/readline/history.c
+++ b/readline/history.c
@@ -68,17 +68,18 @@
 static HIST_ENTRY **the_history = (HIST_ENTRY **)NULL;
 
 /* Non-zero means that we have enforced a limit on the amount of
    history that we save. */
 static int history_stifled;
 
 /* If HISTORY_STIFLED is non-zero, then this is the maximum number of
    entries to remember. */
-int max_input_history;
+int history_max_entries;
+int max_input_history;	/* backwards compatibility */
 
 /* The current location of the interactive history pointer.  Just makes
    life easier for outside callers. */
 int history_offset;
 
 /* The number of strings currently stored in the history list. */
 int history_length;
 
@@ -214,22 +215,22 @@ history_get (offset)
 /* Place STRING at the end of the history list.  The data field
    is  set to NULL. */
 void
 add_history (string)
      const char *string;
 {
   HIST_ENTRY *temp;
 
-  if (history_stifled && (history_length == max_input_history))
+  if (history_stifled && (history_length == history_max_entries))
     {
       register int i;
 
       /* If the history is stifled, and history_length is zero,
-	 and it equals max_input_history, we don't save items. */
+	 and it equals history_max_entries, we don't save items. */
       if (history_length == 0)
 	return;
 
       /* If there is something in the slot, then remove it. */
       if (the_history[0])
 	{
 	  free (the_history[0]->line);
 	  free (the_history[0]);
@@ -340,32 +341,32 @@ stifle_history (max)
       history_base = i;
       for (j = 0, i = history_length - max; j < max; i++, j++)
 	the_history[j] = the_history[i];
       the_history[j] = (HIST_ENTRY *)NULL;
       history_length = j;
     }
 
   history_stifled = 1;
-  max_input_history = max;
+  max_input_history = history_max_entries = max;
 }
 
 /* Stop stifling the history.  This returns the previous amount the 
    history was stifled by.  The value is positive if the history was
    stifled,  negative if it wasn't. */
 int
 unstifle_history ()
 {
   if (history_stifled)
     {
       history_stifled = 0;
-      return (-max_input_history);
+      return (-history_max_entries);
     }
 
-  return (max_input_history);
+  return (history_max_entries);
 }
 
 int
 history_is_stifled ()
 {
   return (history_stifled);
 }
 
diff --git a/readline/history.h b/readline/history.h
--- a/readline/history.h
+++ b/readline/history.h
@@ -217,24 +217,28 @@ extern char *get_history_event __P((cons
 
 /* Return an array of tokens, much as the shell might.  The tokens are
    parsed out of STRING. */
 extern char **history_tokenize __P((const char *));
 
 /* Exported history variables. */
 extern int history_base;
 extern int history_length;
-extern int max_input_history;
+extern int history_max_entries;
 extern char history_expansion_char;
 extern char history_subst_char;
+extern char *history_word_delimiters;
 extern char history_comment_char;
 extern char *history_no_expand_chars;
 extern char *history_search_delimiter_chars;
 extern int history_quotes_inhibit_expansion;
 
+/* Backwards compatibility */
+extern int max_input_history;
+
 /* If set, this function is called to decide whether or not a particular
    history expansion should be treated as a special case for the calling
    application and not expanded. */
 extern rl_linebuf_func_t *history_inhibit_expansion_function;
 
 #ifdef __cplusplus
 }
 #endif
diff --git a/readline/input.c b/readline/input.c
--- a/readline/input.c
+++ b/readline/input.c
@@ -77,16 +77,18 @@ extern int errno;
 #endif
 
 /* Non-null means it is a pointer to a function to run while waiting for
    character input. */
 rl_hook_func_t *rl_event_hook = (rl_hook_func_t *)NULL;
 
 rl_getc_func_t *rl_getc_function = rl_getc;
 
+static int _keyboard_input_timeout = 100000;		/* 0.1 seconds; it's in usec */
+
 /* **************************************************************** */
 /*								    */
 /*			Character Input Buffering       	    */
 /*								    */
 /* **************************************************************** */
 
 static int pop_index, push_index;
 static unsigned char ibuffer[512];
@@ -164,17 +166,17 @@ rl_gather_tyi ()
   tty = fileno (rl_instream);
 
 #if defined (HAVE_SELECT)
   FD_ZERO (&readfds);
   FD_ZERO (&exceptfds);
   FD_SET (tty, &readfds);
   FD_SET (tty, &exceptfds);
   timeout.tv_sec = 0;
-  timeout.tv_usec = 100000;	/* 0.1 seconds */
+  timeout.tv_usec = _keyboard_input_timeout;
   if (select (tty + 1, &readfds, (fd_set *)NULL, &exceptfds, &timeout) <= 0)
     return;	/* Nothing to read. */
 #endif
 
   result = -1;
 #if defined (FIONREAD)
   result = ioctl (tty, FIONREAD, &chars_avail);
 #endif
@@ -217,16 +219,28 @@ rl_gather_tyi ()
     }
   else
     {
       if (chars_avail)
 	rl_stuff_char (input);
     }
 }
 
+int
+rl_set_keyboard_input_timeout (u)
+     int u;
+{
+  int o;
+
+  o = _keyboard_input_timeout;
+  if (u > 0)
+    _keyboard_input_timeout = u;
+  return (o);
+}
+
 /* Is there input available to be read on the readline input file
    descriptor?  Only works if the system has select(2) or FIONREAD. */
 int
 _rl_input_available ()
 {
 #if defined(HAVE_SELECT)
   fd_set readfds, exceptfds;
   struct timeval timeout;
@@ -239,17 +253,17 @@ int
   tty = fileno (rl_instream);
 
 #if defined (HAVE_SELECT)
   FD_ZERO (&readfds);
   FD_ZERO (&exceptfds);
   FD_SET (tty, &readfds);
   FD_SET (tty, &exceptfds);
   timeout.tv_sec = 0;
-  timeout.tv_usec = 100000;	/* 0.1 seconds */
+  timeout.tv_usec = _keyboard_input_timeout;
   return (select (tty + 1, &readfds, (fd_set *)NULL, &exceptfds, &timeout) > 0);
 #endif
 
 #if defined (FIONREAD)
   if (ioctl (tty, FIONREAD, &chars_avail) == 0)
     return (chars_avail);
 #endif
 
diff --git a/readline/isearch.c b/readline/isearch.c
--- a/readline/isearch.c
+++ b/readline/isearch.c
@@ -59,16 +59,18 @@ extern HIST_ENTRY *_rl_saved_line_for_hi
 
 /* Forward declarations */
 static int rl_search_history __P((int, int));
 
 /* Last line found by the current incremental search, so we don't `find'
    identical lines many times in a row. */
 static char *prev_line_found;
 
+static unsigned char *default_isearch_terminators = "\033\012";
+
 /* Search backwards through the history looking for a string which is typed
    interactively.  Start with the current line. */
 int
 rl_reverse_search_history (sign, key)
      int sign, key;
 {
   return (rl_search_history (-sign, key));
 }
@@ -179,17 +181,17 @@ rl_search_history (direction, invoking_k
   RL_SETSTATE(RL_STATE_ISEARCH);
   orig_point = rl_point;
   last_found_line = orig_line = where_history ();
   reverse = direction < 0;
   hlist = history_list ();
   allocated_line = (char *)NULL;
 
   isearch_terminators = _rl_isearch_terminators ? _rl_isearch_terminators
-						: (unsigned char *)"\033\012";
+						: default_isearch_terminators;
 
   /* Create an arrary of pointers to the lines that we want to search. */
   rl_maybe_replace_line ();
   i = 0;
   if (hlist)
     for (i = 0; hlist[i]; i++);
 
   /* Allocate space for this many lines, +1 for the current input line,
diff --git a/readline/readline.h b/readline/readline.h
--- a/readline/readline.h
+++ b/readline/readline.h
@@ -258,19 +258,21 @@ extern int rl_vi_eword __P((int, int));
 /*								    */
 /* **************************************************************** */
 
 /* Readline functions. */
 /* Read a line of input.  Prompt with PROMPT.  A NULL PROMPT means none. */
 extern char *readline __P((const char *));
 
 extern int rl_set_prompt __P((const char *));
+extern int rl_expand_prompt __P((char *));
 
 extern int rl_initialize __P((void));
 
+/* Undocumented; unused by readline */
 extern int rl_discard_argument __P((void));
 
 /* Utility functions to bind keys to readline commands. */
 extern int rl_add_defun __P((const char *, rl_command_func_t *, int));
 extern int rl_bind_key __P((int, rl_command_func_t *));
 extern int rl_bind_key_in_map __P((int, rl_command_func_t *, Keymap));
 extern int rl_unbind_key __P((int));
 extern int rl_unbind_key_in_map __P((int, Keymap));
@@ -306,23 +308,26 @@ extern Keymap rl_make_bare_keymap __P((v
 extern Keymap rl_copy_keymap __P((Keymap));
 extern Keymap rl_make_keymap __P((void));
 extern void rl_discard_keymap __P((Keymap));
 
 extern Keymap rl_get_keymap_by_name __P((const char *));
 extern char *rl_get_keymap_name __P((Keymap));
 extern void rl_set_keymap __P((Keymap));
 extern Keymap rl_get_keymap __P((void));
+/* Undocumented; used internally only. */
 extern void rl_set_keymap_from_edit_mode __P((void));
 extern char *rl_get_keymap_name_from_edit_mode __P((void));
 
 /* Functions for manipulating the funmap, which maps command names to functions. */
 extern int rl_add_funmap_entry __P((const char *, rl_command_func_t *));
+extern const char **rl_funmap_names __P((void));
+/* Undocumented, only used internally -- there is only one funmap, and this
+   function may be called only once. */
 extern void rl_initialize_funmap __P((void));
-extern const char **rl_funmap_names __P((void));
 
 /* Utility functions for managing keyboard macros. */
 extern void rl_push_macro_input __P((char *));
 
 /* Functions for undoing, from undo.c */
 extern void rl_add_undo __P((enum undo_code, int, int, char *));
 extern void rl_free_undo_list __P((void));
 extern int rl_do_undo __P((void));
@@ -362,42 +367,42 @@ extern char *rl_copy_text __P((int, int)
 /* Terminal and tty mode management. */
 extern void rl_prep_terminal __P((int));
 extern void rl_deprep_terminal __P((void));
 extern void rl_tty_set_default_bindings __P((Keymap));
 
 extern int rl_reset_terminal __P((const char *));
 extern void rl_resize_terminal __P((void));
 extern void rl_set_screen_size __P((int, int));
-extern void rl_get_screen_size __P((int*, int*));
+extern void rl_get_screen_size __P((int *, int *));
 
 /* Functions for character input. */
 extern int rl_stuff_char __P((int));
 extern int rl_execute_next __P((int));
 extern int rl_clear_pending_input __P((void));
 extern int rl_read_key __P((void));
 extern int rl_getc __P((FILE *));
+extern int rl_set_keyboard_input_timeout __P((int));
 
 /* `Public' utility functions . */
 extern void rl_extend_line_buffer __P((int));
 extern int rl_ding __P((void));
 extern int rl_alphabetic __P((int));
 
 /* Readline signal handling, from signals.c */
 extern int rl_set_signals __P((void));
 extern int rl_clear_signals __P((void));
 extern void rl_cleanup_after_signal __P((void));
 extern void rl_reset_after_signal __P((void));
 extern void rl_free_line_state __P((void));
  
 /* Undocumented. */
-extern int rl_expand_prompt __P((char *));
-
 extern int rl_set_paren_blink_timeout __P((int));
 
+/* Undocumented. */
 extern int rl_maybe_save_line __P((void));
 extern int rl_maybe_unsave_line __P((void));
 extern int rl_maybe_replace_line __P((void));
 
 /* Completion functions. */
 extern int rl_complete_internal __P((int));
 extern void rl_display_match_list __P((char **, int, int));
 
@@ -600,17 +605,18 @@ extern const char *rl_special_prefixes;
    or inserted. */
 extern rl_icppfunc_t *rl_directory_completion_hook;
 
 /* If non-zero, this is the address of a function to call when completing
    a directory name.  This function takes the address of the directory name
    to be modified as an argument.  Unlike rl_directory_completion_hook, it
    only modifies the directory name used in opendir(2), not what is displayed
    when the possible completions are printed or inserted.  It is called
-   before rl_directory_completion_hook. */
+   before rl_directory_completion_hook.  I'm not happy with how this works
+   yet, so it's undocumented. */
 extern rl_icppfunc_t *rl_directory_rewrite_hook;
 
 /* Backwards compatibility with previous versions of readline. */
 #define rl_symbolic_link_hook rl_directory_completion_hook
 
 /* If non-zero, then this is the address of a function to call when
    completing a word would normally display the list of possible matches.
    This function is called instead of actually doing the display.
diff --git a/readline/rlprivate.h b/readline/rlprivate.h
--- a/readline/rlprivate.h
+++ b/readline/rlprivate.h
@@ -125,17 +125,17 @@ extern void _rl_restore_prompt __P((void
 extern char *_rl_make_prompt_for_search __P((int));
 extern void _rl_erase_at_end_of_line __P((int));
 extern void _rl_clear_to_eol __P((int));
 extern void _rl_clear_screen __P((void));
 extern void _rl_update_final __P((void));
 extern void _rl_redisplay_after_sigwinch __P((void));
 extern void _rl_clean_up_for_exit __P((void));
 extern void _rl_erase_entire_line __P((void));
-extern int _rl_currentb_display_line __P((void));
+extern int _rl_current_display_line __P((void));
 
 /* input.c */
 extern int _rl_any_typein __P((void));
 extern int _rl_input_available __P((void));
 extern void _rl_insert_typein __P((int));
 
 /* macro.c */
 extern void _rl_with_macro_input __P((char *));
@@ -155,16 +155,17 @@ extern void _rl_enable_paren_matching __
 extern void _rl_init_line_state __P((void));
 extern void _rl_set_the_line __P((void));
 extern int _rl_dispatch __P((int, Keymap));
 extern int _rl_init_argument __P((void));
 extern void _rl_fix_point __P((int));
 extern void _rl_replace_text __P((const char *, int, int));
 extern int _rl_char_search_internal __P((int, int, int));
 extern int _rl_set_mark_at_pos __P((int));
+extern int _rl_free_saved_history_line __P((void));
 
 /* rltty.c */
 extern int _rl_disable_tty_signals __P((void));
 extern int _rl_restore_tty_signals __P((void));
 
 /* terminal.c */
 extern void _rl_get_screen_size __P((int, int));
 extern int _rl_init_terminal_io __P((const char *));
@@ -177,16 +178,17 @@ extern void _rl_output_some_chars __P((c
 extern int _rl_backspace __P((int));
 extern void _rl_enable_meta_key __P((void));
 extern void _rl_control_keypad __P((int));
 
 /* util.c */
 extern int rl_alphabetic __P((int));
 extern int _rl_abort_internal __P((void));
 extern char *_rl_strindex __P((const char *, const char *));
+extern char *_rl_strpbrk __P((const char *, const char *));
 extern int _rl_qsort_string_compare __P((char **, char **));
 extern int (_rl_uppercase_p) __P((int));
 extern int (_rl_lowercase_p) __P((int));
 extern int (_rl_pure_alphabetic) __P((int));
 extern int (_rl_digit_p) __P((int));
 extern int (_rl_to_lower) __P((int));
 extern int (_rl_to_upper) __P((int));
 extern int (_rl_digit_value) __P((int));
diff --git a/readline/support/config.sub b/readline/support/config.sub
--- a/readline/support/config.sub
+++ b/readline/support/config.sub
@@ -168,17 +168,17 @@ case $basic_machine in
 		| hppa | hppa1.0 | hppa1.1 | hppa2.0 | hppa2.0w | hppa2.0n \
 		| alpha | alphaev[4-7] | alphaev56 | alphapca5[67] \
 		| we32k | ns16k | clipper | i370 | sh | powerpc | powerpcle \
 		| 1750a | dsp16xx | pdp11 | mips16 | mips64 | mipsel | mips64el \
 		| mips64orion | mips64orionel | mipstx39 | mipstx39el \
 		| mips64vr4300 | mips64vr4300el | mips64vr4100 | mips64vr4100el \
 		| mips64vr5000 | miprs64vr5000el | mcore \
 		| sparc | sparclet | sparclite | sparc64 | sparcv9 | v850 | c4x \
-	        | thumb | d10v)
+	        | thumb | d10v | s390)
 		basic_machine=$basic_machine-unknown
 		;;
 	m88110 | m680[12346]0 | m683?2 | m68360 | m5200 | z8k | v70 | h8500 | w65)
 		;;
 
 	# We use `pc' rather than `unknown'
 	# because (1) that's what they normally are, and
 	# (2) the word "unknown" tends to confuse beginning users.
@@ -671,16 +671,20 @@ case $basic_machine in
                 os=-coff
                 ;;
 	rm[46]00)
 		basic_machine=mips-siemens
 		;;
 	rtpc | rtpc-*)
 		basic_machine=romp-ibm
 		;;
+	s390-*)
+		basic_machine=s390-ibm
+		os=-linux
+		;;
         sa29200)
                 basic_machine=a29k-amd
                 os=-udi
                 ;;
 	sequent)
 		basic_machine=i386-sequent
 		;;
 	sh)
diff --git a/readline/terminal.c b/readline/terminal.c
--- a/readline/terminal.c
+++ b/readline/terminal.c
@@ -233,16 +233,19 @@ void
 
   _rl_screenchars = _rl_screenwidth * _rl_screenheight;
 }
 
 void
 _rl_set_screen_size (rows, cols)
      int rows, cols;
 {
+  if (rows == 0 || cols == 0)
+    return;
+
   _rl_screenheight = rows;
   _rl_screenwidth = cols;
 
   if (_rl_term_autowrap == 0)
     _rl_screenwidth--;
 
   _rl_screenchars = _rl_screenwidth * _rl_screenheight;
 }
@@ -250,25 +253,25 @@ void
 void
 rl_set_screen_size (rows, cols)
      int rows, cols;
 {
   _rl_set_screen_size (rows, cols);
 }
 
 void
-rl_get_screen_size (rows, cols)   
-     int *rows, *cols; 
+rl_get_screen_size (rows, cols)
+     int *rows, *cols;
 {
-  if (rows) 
+  if (rows)
     *rows = _rl_screenheight;
-  if (cols)  
-    *cols = _rl_screenwidth;   
+  if (cols)
+    *cols = _rl_screenwidth;
 }
-
+     
 void
 rl_resize_terminal ()
 {
   if (readline_echoing_p)
     {
       _rl_get_screen_size (fileno (rl_instream), 1);
       _rl_redisplay_after_sigwinch ();
     }
diff --git a/readline/tilde.c b/readline/tilde.c
--- a/readline/tilde.c
+++ b/readline/tilde.c
@@ -229,17 +229,17 @@ tilde_expand (string)
       string += end;
 
       expansion = tilde_expand_word (tilde_word);
       free (tilde_word);
 
       len = strlen (expansion);
 #ifdef __CYGWIN__
       /* Fix for Cygwin to prevent ~user/xxx from expanding to //xxx when
-         $HOME for `user' is /.  On cygwin, // denotes a network drive. */
+	 $HOME for `user' is /.  On cygwin, // denotes a network drive. */
       if (len > 1 || *expansion != '/' || *string != '/')
 #endif
 	{
 	  if ((result_index + len + 1) > result_size)
 	    result = xrealloc (result, 1 + (result_size += (len + 20)));
 
 	  strcpy (result + result_index, expansion);
 	  result_index += len;
diff --git a/readline/undo.c b/readline/undo.c
--- a/readline/undo.c
+++ b/readline/undo.c
@@ -102,21 +102,21 @@ rl_free_undo_list ()
 }
 
 /* Undo the next thing in the list.  Return 0 if there
    is nothing to undo, or non-zero if there was. */
 int
 rl_do_undo ()
 {
   UNDO_LIST *release;
-  int waiting_for_begin = 0;
-  int start, end;
+  int waiting_for_begin, start, end;
 
 #define TRANS(i) ((i) == -1 ? rl_point : ((i) == -2 ? rl_end : (i)))
 
+  start = end = waiting_for_begin = 0;
   do
     {
       if (!rl_undo_list)
 	return (0);
 
       _rl_doing_an_undo = 1;
       RL_SETSTATE(RL_STATE_UNDOING);
 
diff --git a/readline/util.c b/readline/util.c
--- a/readline/util.c
+++ b/readline/util.c
@@ -220,16 +220,35 @@ char *
   register int i, l, len;
 
   for (i = 0, l = strlen (s2), len = strlen (s1); (len - i) >= l; i++)
     if (_rl_strnicmp (s1 + i, s2, l) == 0)
       return ((char *) (s1 + i));
   return ((char *)NULL);
 }
 
+/* Find the first occurrence in STRING1 of any character from STRING2.
+   Return a pointer to the character in STRING1. */
+char *
+_rl_strpbrk (string1, string2)
+     const char *string1, *string2;
+{
+  register const char *scan;
+
+  for (; *string1; string1++)
+    {
+      for (scan = string2; *scan; scan++)
+	{
+	  if (*string1 == *scan)
+	    return ((char *)string1);
+	}
+    }
+  return ((char *)NULL);
+}
+
 #if !defined (HAVE_STRCASECMP)
 /* Compare at most COUNT characters from string1 to string2.  Case
    doesn't matter. */
 int
 _rl_strnicmp (string1, string2, count)
      char *string1, *string2;
      int count;
 {
