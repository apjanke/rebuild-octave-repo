# HG changeset patch
# User jwe
# Date 773806023 0
#      Sun Jul 10 02:07:03 1994 +0000
# Node ID ef71e51a2280a7ad756aa2afceea9a79206ce5d4
# Parent  68c580e45518ac27c0c4e6438d0a85a69a657d89
[project @ 1994-07-10 02:06:07 by jwe]

diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -23,17 +23,57 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #if !defined (octave_oct_obj_h)
 #define octave_oct_obj_h 1
 
 #include "Array.h"
 
 class tree_constant;
 
-typedef Array<tree_constant> Octave_object;
+class Octave_object : public Array<tree_constant>
+{
+public:
+
+  Octave_object (void) : Array<tree_constant> () { }
+  Octave_object (int n) : Array<tree_constant> (n) { }
+  Octave_object (const Octave_object& obj) : Array<tree_constant> (obj) { }
+
+  Octave_object& operator = (const Octave_object& obj)
+    {
+      Array<tree_constant>::operator = (obj);
+      return *this;
+    }
+
+#if 0
+// For now, translate the index, since it will be somewhat difficult
+// to fix this without some major (and relatively risky) surgery.
+
+  tree_constant& elem (int n)
+    { return Array<tree_constant>::elem (n - 1); }
+
+  tree_constant& checkelem (int n);
+    { return Array<tree_constant>::checkelem (n - 1); }
+
+  tree_constant& operator () (int n);
+    { return Array<tree_constant>::operator () (n - 1); }
+
+// No checking.
+  tree_constant& xelem (int n);
+    { return Array<tree_constant>::xelem (n - 1); }
+
+  tree_constant elem (int n) const;
+    { return Array<tree_constant>::elem (n - 1); }
+
+  tree_constant checkelem (int n) const;
+    { return Array<tree_constant>::checkelem (n - 1); }
+
+  tree_constant operator () (int n) const;
+    { return Array<tree_constant>::operator () (n - 1); }
+#endif
+};
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -1150,18 +1150,18 @@ tree_identifier::eval (int print)
   if (! script_file_executed)
     {
       if (ans == (tree_fvc *) NULL)
 	eval_undefined_error ();
       else
 	{
 	  int nargout = maybe_do_ans_assign ? 0 : 1;
 
-//	  int nargin = (ans->is_constant ()) ? 0 : 1;
-	  Octave_object tmp_args;
+	  int nargin = (ans->is_constant ()) ? 0 : 1;
+	  Octave_object tmp_args (nargin);
 	  Octave_object tmp = ans->eval (0, nargout, tmp_args);
 
 	  if (tmp.length () > 0)
 	    retval = tmp(0);
 	}
     }
 
   if (! error_state && retval.is_defined ())
@@ -1281,37 +1281,35 @@ tree_function::tree_function (void)
   param_list = (tree_parameter_list *) NULL;
   ret_list = (tree_parameter_list *) NULL;
   sym_tab = (symbol_table *) NULL;
   cmd_list = NULL_TREE;
   file_name = (char *) NULL;
   fcn_name = (char *) NULL;
   t_parsed = 0;
   system_fcn_file = 0;
-  varargs_ok = 0;
   num_named_args = 0;
   num_args_passed = 0;
-  curr_arg_number = 0;
+  curr_va_arg_number = 0;
 }
 
 tree_function::tree_function (tree *cl, symbol_table *st)
 {
   call_depth = 0;
   param_list = (tree_parameter_list *) NULL;
   ret_list = (tree_parameter_list *) NULL;
   sym_tab = st;
   cmd_list = cl;
   file_name = (char *) NULL;
   fcn_name = (char *) NULL;
   t_parsed = 0;
   system_fcn_file = 0;
-  varargs_ok = 0;
   num_named_args = 0;
   num_args_passed = 0;
-  curr_arg_number = 0;
+  curr_va_arg_number = 0;
 }
 
 tree_function::~tree_function (void)
 {
 }
 
 tree_function *
 tree_function::define (tree *t)
@@ -1319,21 +1317,24 @@ tree_function::define (tree *t)
   cmd_list = t;
   return this;
 }
 
 tree_function *
 tree_function::define_param_list (tree_parameter_list *t)
 {
   param_list = t;
-  varargs_ok = (param_list != (tree_parameter_list *) NULL
-		&& param_list->takes_varargs ());
-
-  if (varargs_ok)
-    num_named_args = param_list->length ();
+
+  if (param_list != (tree_parameter_list *) NULL)
+    {
+      int len = param_list->length ();
+      int va_only = param_list->varargs_only ();
+      num_named_args = va_only ? len - 1 : len;
+      curr_va_arg_number = num_named_args;
+    }
 
   return this;
 }
 
 tree_function *
 tree_function::define_ret_list (tree_parameter_list *t)
 {
   ret_list = t;
@@ -1395,38 +1396,36 @@ int
 tree_function::is_system_fcn_file (void) const
 {
   return system_fcn_file;
 }
 
 int
 tree_function::takes_varargs (void) const
 {
-  return varargs_ok;
+  return (param_list != (tree_parameter_list *) NULL
+	  && param_list->takes_varargs ());
 }
 
 void
 tree_function::octave_va_start (void)
 {
-  curr_arg_number = num_named_args + 1;
+  curr_va_arg_number = num_named_args;
 }
 
 tree_constant
 tree_function::octave_va_arg (void)
 {
   tree_constant retval;
 
-  if (curr_arg_number < num_args_passed)
-    {
-      retval = args_passed (curr_arg_number);
-      curr_arg_number++;
-    }
+  if (curr_va_arg_number < num_args_passed)
+    retval = args_passed (++curr_va_arg_number);
   else
     ::error ("error getting arg number %d -- only %d provided",
-	     curr_arg_number, num_args_passed-1);
+	     curr_va_arg_number, num_args_passed-1);
 
   return retval;
 }
 
 void
 tree_function::stash_function_name (char *s)
 {
   delete [] fcn_name;
@@ -1442,17 +1441,17 @@ tree_function::function_name (void)
 tree_constant
 tree_function::eval (int print)
 {
   tree_constant retval;
 
   if (error_state || cmd_list == NULL_TREE)
     return retval;
 
-  Octave_object tmp_args;
+  Octave_object tmp_args (1);
   Octave_object tmp = eval (print, 1, tmp_args);
 
   if (! error_state && tmp.length () > 0)
     retval = tmp(0);
 
   return retval;
 }
 
@@ -1510,17 +1509,17 @@ tree_function::eval (int print, int narg
 
 //  unwind_protect_ptr (args_passed);
   args_passed = args;
 
   unwind_protect_int (num_args_passed);
   num_args_passed = nargin;
 
   unwind_protect_int (num_named_args);
-  unwind_protect_int (curr_arg_number);
+  unwind_protect_int (curr_va_arg_number);
 
   if (param_list != (tree_parameter_list *) NULL
       && ! param_list->varargs_only ())
     {
       param_list->define_from_arg_vector (args);
       if (error_state)
 	goto abort;
     }
diff --git a/src/pt-exp-base.h b/src/pt-exp-base.h
--- a/src/pt-exp-base.h
+++ b/src/pt-exp-base.h
@@ -509,21 +509,20 @@ private:
   tree_parameter_list *param_list;
   tree_parameter_list *ret_list;
   symbol_table *sym_tab;
   tree *cmd_list;
   char *file_name;
   char *fcn_name;
   time_t t_parsed;
   int system_fcn_file;
-  int varargs_ok;
   int num_named_args;
   Octave_object args_passed;
   int num_args_passed;
-  int curr_arg_number;
+  int curr_va_arg_number;
 };
 
 /*
  * Argument lists.
  */
 class
 tree_argument_list : public tree
 {
