# HG changeset patch
# User Pascal Dupuis <Pascal.Dupuis@uclouvain.be>
# Date 1295899027 18000
#      Mon Jan 24 14:57:07 2011 -0500
# Node ID e0e50f48df371f6bdcec965f8f8e5a8bf430315c
# Parent  8e1ab522c902502947b64cb7825a5c13ff6f98e6
Explicitly disallow copying in some classes

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -378,16 +378,17 @@ public:
                 for (octave_idx_type j = 0; j < lr; j++)
                   for (octave_idx_type i = 0; i < lc; i++)
                     dd[j*nc+i] = blk[i*m+j];
               }
           }
 
       return dest + nr*nc;
     }
+
 private:
 
   // Recursive N-d generalized transpose
   template <class T>
   T *do_permute (const T *src, T *dest, int lev) const
     {
       if (lev == 0)
         {
@@ -412,21 +413,26 @@ private:
           octave_idx_type step = stride[lev], len = dim[lev];
           for (octave_idx_type i = 0, j = 0; i < len; i++, j+= step)
            dest = do_permute (src + i * step, dest, lev-1);
         }
 
       return dest;
     }
 
+  // No copying!
+
+  rec_permute_helper (const rec_permute_helper&);
+
+  rec_permute_helper& operator = (const rec_permute_helper&);
+
 public:
 
   template <class T>
   void permute (const T *src, T *dest) const { do_permute (src, dest, top); }
-
 };
 
 
 template <class T>
 Array<T>
 Array<T>::permute (const Array<octave_idx_type>& perm_vec_arg, bool inv) const
 {
   Array<T> retval;
@@ -594,16 +600,22 @@ private:
       else
         {
           octave_idx_type nn = idx[lev].length (dim[lev]), d = cdim[lev];
           for (octave_idx_type i = 0; i < nn; i++)
             do_fill (val, dest + d*idx[lev].xelem (i), lev-1);
         }
     }
 
+  // No copying!
+
+  rec_index_helper (const rec_index_helper&);
+
+  rec_index_helper& operator = (const rec_index_helper&);
+
 public:
 
   template <class T>
   void index (const T *src, T *dest) const { do_index (src, dest, top); }
 
   template <class T>
   void assign (const T *src, T *dest) const { do_assign (src, dest, top); }
 
@@ -650,16 +662,17 @@ public:
           dext[j] = dld *= ndv(i+j);
         }
       cext[0] *= ld;
     }
 
   ~rec_resize_helper (void) { delete [] cext; }
 
 private:
+
   // recursive resizing
   template <class T>
   void do_resize_fill (const T* src, T *dest, const T& rfv, int lev) const
     {
       if (lev == 0)
         {
           copy_or_memcpy (cext[0], src, dest);
           fill_or_memset (dext[0] - cext[0], rfv, dest + cext[0]);
@@ -668,21 +681,28 @@ private:
         {
           octave_idx_type sd = sext[lev-1], dd = dext[lev-1], k;
           for (k = 0; k < cext[lev]; k++)
             do_resize_fill (src + k * sd, dest + k * dd, rfv, lev - 1);
 
           fill_or_memset (dext[lev] - k * dd, rfv, dest + k * dd);
         }
     }
+
+  // No copying!
+
+  rec_resize_helper (const rec_resize_helper&);
+
+  rec_resize_helper& operator = (const rec_resize_helper&);
+
 public:
+
   template <class T>
   void resize_fill (const T* src, T *dest, const T& rfv) const
     { do_resize_fill (src, dest, rfv, n-1); }
-
 };
 
 template <class T>
 Array<T>
 Array<T>::index (const idx_vector& i) const
 {
   octave_idx_type n = numel ();
   Array<T> retval;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2011-01-24  Pascal Dupuis  <Pascal.Dupuis@worldonline.be>
+
+	* SparseQR.h (class SparseQR::SparseQR_reps): Disallow copying.
+	* Array.cc (class rec_permute_helper, class rec_index_helper,
+	class  rec_resize_helper): Likewise.
+	* cmd-edit.cc (class default_command_editor): Likewise.
+
 2011-01-22  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-refcount.h: New source.
 	* Makefile.am: Add it here.
 
 	* Array.h: Use octave_refcount for refcounting.
 	* Sparse.h: Ditto.
 	* SparseCmplxQR.h: Ditto.
diff --git a/liboctave/SparseQR.h b/liboctave/SparseQR.h
--- a/liboctave/SparseQR.h
+++ b/liboctave/SparseQR.h
@@ -68,21 +68,32 @@ protected:
     octave_refcount<int> count;
 
     octave_idx_type nrows;
 #ifdef HAVE_CXSPARSE
     CXSPARSE_DNAME (s) *S;
 
     CXSPARSE_DNAME (n) *N;
 #endif
+
+  private:
+
+    // No copying!
+
+    SparseQR_rep (const SparseQR_rep&);
+
+    SparseQR_rep& operator = (const SparseQR_rep&);
   };
+
 private:
+
   SparseQR_rep *rep;
 
 public:
+
   SparseQR (void) : rep (new SparseQR_rep (SparseMatrix(), 0)) { }
 
   SparseQR (const SparseMatrix& a, int order = 0) :
     rep (new SparseQR_rep (a, order)) { }
 
   SparseQR (const SparseQR& a) : rep (a.rep) { rep->count++; }
 
   ~SparseQR (void)
diff --git a/liboctave/cmd-edit.cc b/liboctave/cmd-edit.cc
--- a/liboctave/cmd-edit.cc
+++ b/liboctave/cmd-edit.cc
@@ -748,16 +748,22 @@ public:
 
   void do_accept_line (void);
 
 private:
 
   FILE *input_stream;
 
   FILE *output_stream;
+
+  // No copying!
+
+  default_command_editor (const default_command_editor&);
+
+  default_command_editor& operator = (const default_command_editor&);
 };
 
 std::string
 default_command_editor::do_readline (const std::string& prompt, bool& eof)
 {
   gnulib::fputs (prompt.c_str (), output_stream);
   fflush (output_stream);
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2011-01-24  Pascal Dupuis  <Pascal.Dupuis@worldonline.be>
+
+	* ov-base-mat.h (class octave_base_matrix): Disallow assignment.
+	* ov-range.h (class octave_range): Likewise.
+
 2011-01-23  John W. Eaton  <jwe@octave.org>
 
 	* ov-struct.cc (octave_scalar_struct::print_raw):
 	Avoid unnecessary conversion of map value to Cell.
 
 2011-01-22  John W. Eaton  <jwe@octave.org>
 
 	* symtab.h (symbol_table::parent_classes):
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -182,11 +182,17 @@ protected:
   void clear_cached_info (void) const
     {
       delete typ; typ = 0;
       delete idx_cache; idx_cache = 0;
     }
 
   mutable MatrixType *typ;
   mutable idx_vector *idx_cache;
+
+private:
+
+  // No assignment.
+
+  octave_base_matrix& operator = (const octave_base_matrix&);
 };
 
 #endif
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -300,16 +300,20 @@ private:
 
   void clear_cached_info (void) const
     {
       delete idx_cache; idx_cache = 0;
     }
 
   mutable idx_vector *idx_cache;
 
+  // No assignment.
+
+  octave_range& operator = (const octave_range&);
+
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 // If TRUE, allow ranges with non-integer elements as array indices.
 extern bool Vallow_noninteger_range_as_index;
 
diff --git a/src/unwind-prot.h b/src/unwind-prot.h
--- a/src/unwind-prot.h
+++ b/src/unwind-prot.h
@@ -122,24 +122,25 @@ public:
   {
   public:
     method_elem (T *obj, void (T::*method) (void))
       : e_obj (obj), e_method (method) { }
 
     void run (void) { (e_obj->*e_method) (); }
 
   private:
-    // No copying! XXX
+
+    T *e_obj;
+    void (T::*e_method) (void);
+
+    // No copying!
 
     method_elem (const method_elem&);
 
     method_elem operator = (const method_elem&);
-
-    T *e_obj;
-    void (T::*e_method) (void);
   };
 
   // An element that stores arbitrary variable, and restores it.
 
   template <class T>
   class restore_var_elem : public elem
   {
   public:
