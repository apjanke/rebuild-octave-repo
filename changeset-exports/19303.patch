# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1414690682 14400
#      Thu Oct 30 13:38:02 2014 -0400
# Branch gui-release
# Node ID c6615ca0a11d31f87555e804ffe953418904ad7a
# Parent  37159a873c96d43e69f36c033353b0788e173b1f
horizontal scrollbar for GUI terminal on Windows systems

* QTerminal.h (QTerminal::init_terminal_size):
New public virtual slot.
(QTerminal::QTerminal): Connect main_window::init_terminal_size_signal
to QTerminal::init_terminal_size slot.

* QWinTerminalImpl.h, QWinTerminalImpl.cc
(QConsolePrivate::updateConsoleSize): New parameter
allow_smaller_width.  Call updateHorizontalScrollBar and
updateVerticalScrollBar instead of updateScrollBar.
(QConsolePrivate::updateVerticalScrollBar): Rename from
QConsolePrivate::updateScrollBar.  Change all uses.
(QConsolePrivate::setVerticalScrollValue): Rename from
QConsolePrivate::setScrollValue.  Change all uses.
(QConsolePrivate::m_verticalScrollBar): Rename from
QConsolePrivate::m_scrollBar.  Change all uses.
(QConsolePrivate::m_horizontalScrollBar): New data member.
(QConsolePrivate::updateHorizontalScrollBar,
QConsolePrivate::setHorizontalScrollValue): New functions.
(QConsolePrivate::QConsolePrivate): Create horizontal scroll bar.
Call updateHorizontalScrollBar and updateVerticalScrollBar instead of
updateScrollBar.  Connect signal for horizontal scrolling.
(QConsolePrivate::selectWord, QConsolePrivate::drawSelection): Handle
horizontal offset.
(QWinTerminalImpl::init_terminal_size): New slot.
(QWinTerminalImpl::verticalScrollValueChanged): Rename from
QWinTerminalImpl::scrollValueChanged.
(QWinTerminalImpl::horizontalScrollValueChanged): New slot.

* main-window.h, main-window.cc (main_window::init_terminal_size):
New slot.
(main_window::init_terminal_size_signal): New signal.

diff --git a/libgui/qterminal/libqterminal/QTerminal.h b/libgui/qterminal/libqterminal/QTerminal.h
--- a/libgui/qterminal/libqterminal/QTerminal.h
+++ b/libgui/qterminal/libqterminal/QTerminal.h
@@ -105,16 +105,18 @@ public slots:
     _copy_action->setEnabled (selectedText().length() > 0);
 
     _contextMenu->move (mapToGlobal (at));
     _contextMenu->show ();
   }
 
   void notice_settings (const QSettings *settings);
 
+  virtual void init_terminal_size (void) { }
+
   void terminal_interrupt (void) { emit interrupt_signal (); }
 
 protected:
 
   QTerminal (QWidget *xparent = 0) : QWidget (xparent)
   {
     setContextMenuPolicy (Qt::CustomContextMenu);
 
@@ -143,16 +145,19 @@ protected:
              this, SLOT (handleCustomContextMenuRequested (QPoint)));
 
     connect (this, SIGNAL (report_status_message (const QString&)),
              xparent, SLOT (report_status_message (const QString&)));
 
     connect (xparent, SIGNAL (settings_changed (const QSettings *)),
              this, SLOT (notice_settings (const QSettings *)));
 
+    connect (xparent, SIGNAL (init_terminal_size_signal ()),
+             this, SLOT (init_terminal_size ()));
+
     connect (xparent, SIGNAL (copyClipboard_signal ()),
              this, SLOT (copyClipboard ()));
 
     connect (xparent, SIGNAL (pasteClipboard_signal ()),
              this, SLOT (pasteClipboard ()));
 
     connect (xparent, SIGNAL (selectAll_signal ()),
              this, SLOT (selectAll ()));
diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
@@ -1,8 +1,9 @@
+
 /*
 
 Copyright (C) 2011, 2013 Michael Goffioul.
 
 This file is part of QConsole.
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
@@ -19,17 +20,17 @@ along with this program.  If not,
 see <http://www.gnu.org/licenses/>.
 
 */
 
 #include <QApplication>
 #include <QClipboard>
 #include <QColor>
 #include <QFont>
-#include <QHBoxLayout>
+#include <QGridLayout>
 #include <QPaintEvent>
 #include <QPainter>
 #include <QResizeEvent>
 #include <QScrollBar>
 #include <QtDebug>
 #include <QThread>
 #include <QTimer>
 #include <QToolTip>
@@ -171,21 +172,23 @@ public:
       BlockCursor,
       UnderlineCursor,
       IBeamCursor
     };
 
   QConsolePrivate (QWinTerminalImpl* parent, const QString& cmd = QString ());
   ~QConsolePrivate (void);
 
-  void updateConsoleSize (bool sync = false);
+  void updateConsoleSize (bool sync = false, bool allow_smaller_width = false);
   void syncConsoleParameters (void);
   void grabConsoleBuffer (CHAR_INFO* buf = 0);
-  void updateScrollBar (void);
-  void setScrollValue (int value);
+  void updateHorizontalScrollBar (void);
+  void updateVerticalScrollBar (void);
+  void setHorizontalScrollValue (int value);
+  void setVerticalScrollValue (int value);
   void updateConsoleView (bool grab = true);
   void monitorConsole (void);
   void startCommand (void);
   void sendConsoleText (const QString& s);
   QRect cursorRect (void);
   void selectAll();
   void selectWord(const QPoint& cellPos);
   void selectLine(const QPoint& cellPos);
@@ -251,17 +254,18 @@ private:
 
   HANDLE m_stdOut;
   HWND m_consoleWindow;
   CHAR_INFO* m_buffer;
   CHAR_INFO* m_tmpBuffer;
   HANDLE m_process;
 
   QConsoleView* m_consoleView;
-  QScrollBar* m_scrollBar;
+  QScrollBar* m_horizontalScrollBar;
+  QScrollBar* m_verticalScrollBar;
   QTimer* m_consoleWatcher;
   QConsoleThread *m_consoleThread;
 
   // The delay in milliseconds between redrawing blinking text.
   static const int BLINK_DELAY = 500;
 };
 
 static void maybeSwapPoints (QPoint& begin, QPoint& end)
@@ -364,23 +368,25 @@ QConsolePrivate::QConsolePrivate (QWinTe
 
   m_font.setFamily ("Lucida Console");
   m_font.setPointSize (9);
   m_font.setStyleHint (QFont::TypeWriter);
 
   m_buffer = m_tmpBuffer = 0;
 
   m_consoleView = new QConsoleView (parent);
-  m_scrollBar = new QScrollBar (Qt::Vertical, parent);
+  m_horizontalScrollBar = new QScrollBar (Qt::Horizontal, parent);
+  m_verticalScrollBar = new QScrollBar (Qt::Vertical, parent);
 
-  QHBoxLayout* l = new QHBoxLayout (parent);
+  QGridLayout* l = new QGridLayout (parent);
   l->setContentsMargins (0, 0, 0, 0);
   l->setSpacing (0);
-  l->addWidget (m_consoleView, 1);
-  l->addWidget (m_scrollBar, 0);
+  l->addWidget (m_consoleView, 0, 0);
+  l->addWidget (m_horizontalScrollBar, 1, 0);
+  l->addWidget (m_verticalScrollBar, 0, 1);
 
   // Choose 15 (0xF) as index into the Windows console color map for the
   // background and 0 (0x0) as the index for the foreground.  This
   // selection corresponds to the indices used in the foregroundColor,
   // setForegroundColor, backgroundColor, and SetBackgroundColor
   // functions.
 
   SetConsoleTextAttribute (m_stdOut, 0xF0);
@@ -396,28 +402,33 @@ QConsolePrivate::QConsolePrivate (QWinTe
   m_consoleView->setPalette (palette);
 
   m_consoleView->setAutoFillBackground (true);
 
   m_consoleView->setFont (m_font);
   parent->setFocusPolicy (Qt::StrongFocus);
   parent->winId ();
 
-  updateScrollBar ();
+  updateHorizontalScrollBar ();
+  updateVerticalScrollBar ();
 
   m_consoleWatcher = new QTimer (parent);
   m_consoleWatcher->setInterval (10);
   m_consoleWatcher->setSingleShot (false);
 
   m_blinkCursorTimer = new QTimer (parent);
   QObject::connect (m_blinkCursorTimer, SIGNAL (timeout()),
                     q, SLOT (blinkCursorEvent ()));  
 
-  QObject::connect (m_scrollBar, SIGNAL (valueChanged (int)),
-                    q, SLOT (scrollValueChanged (int)));
+  QObject::connect (m_horizontalScrollBar, SIGNAL (valueChanged (int)),
+                    q, SLOT (horizontalScrollValueChanged (int)));
+
+  QObject::connect (m_verticalScrollBar, SIGNAL (valueChanged (int)),
+                    q, SLOT (verticalScrollValueChanged (int)));
+
   QObject::connect (m_consoleWatcher, SIGNAL (timeout (void)),
                     q, SLOT (monitorConsole (void)));
 
   m_consoleWatcher->start ();
 
   if (m_command.isEmpty ())
     m_consoleThread = 0;
   else
@@ -680,22 +691,27 @@ void QConsolePrivate::selectAll()
   updateSelection();
 }
 
 void QConsolePrivate::selectWord (const QPoint & cellpos)
 {
   QPoint begin = cellpos;
   QPoint end = cellpos;
 
-  int scrollOffset = m_consoleRect.top ();
   int stride = m_consoleRect.width ();
 
+  int verticalScrollOffset = m_consoleRect.top ();
+  int horizontalScrollOffset = m_consoleRect.left ();
+
   // get begin, end in buffer offsets
-  begin.ry () -= scrollOffset;
-  end.ry () -= scrollOffset;
+  begin.ry () -= verticalScrollOffset;
+  end.ry () -= verticalScrollOffset;
+
+  begin.rx () -= horizontalScrollOffset;
+  end.rx () -= horizontalScrollOffset;
 
   // loog at current clicked on char to determinate ig getting space chunk or nonspace chunk
   if (QChar(m_buffer[begin.y ()*stride + begin.x ()].Char.UnicodeChar).isSpace () == false)
   {
     // from current char, go back and fwd to find start and end of block
     while(begin.x () > 0 && 
           QChar(m_buffer[begin.y ()*stride + begin.x () -1].Char.UnicodeChar).isSpace() == false)
     {
@@ -719,18 +735,21 @@ void QConsolePrivate::selectWord (const 
     while(end.x () < m_consoleRect.width () && 
           QChar(m_buffer[end.y ()*stride + end.x () +1].Char.UnicodeChar).isSpace ())
     {
       end.rx () ++;
     }
   }
 
   // convert console  offsets to absolute cell positions
-  begin.ry () += scrollOffset;
-  end.ry () += scrollOffset;
+  begin.ry () += verticalScrollOffset;
+  end.ry () += verticalScrollOffset;
+
+  begin.rx () += horizontalScrollOffset;
+  end.rx () += horizontalScrollOffset;
 
   m_beginSelection = begin;
   m_endSelection = end;
 
   updateSelection ();
 }
 
 void QConsolePrivate::selectLine (const QPoint & cellpos)
@@ -749,20 +768,24 @@ void QConsolePrivate::drawSelection (QPa
   QPoint begin = m_beginSelection;
   QPoint end = m_endSelection;
 
   bool haveSelection = (begin != end);
 
   if (haveSelection)
     maybeSwapPoints (begin, end);
 
-  int scrollOffset = m_consoleRect.top ();
+  int verticalScrollOffset = m_consoleRect.top ();
+  int horizontalScrollOffset = m_consoleRect.left ();
 
-  begin.ry () -= scrollOffset;
-  end.ry () -= scrollOffset;
+  begin.ry () -= verticalScrollOffset;
+  end.ry () -= verticalScrollOffset;
+
+  begin.rx () -= horizontalScrollOffset;
+  end.rx () -= horizontalScrollOffset;
 
   int ascent = p.fontMetrics ().ascent ();
   int stride = m_consoleRect.width ();
 
   int y = ascent + cy1 * ch;;
   for (int j = cy1; j <= cy2; j++, y += ch)
     {
       int charsThisLine = 0;
@@ -953,31 +976,31 @@ void QConsolePrivate::log (const char* f
     }
 #else
   Q_UNUSED (fmt);
 #endif
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QConsolePrivate::updateConsoleSize (bool sync)
+void QConsolePrivate::updateConsoleSize (bool sync, bool allow_smaller_width)
 {
   QFontMetrics fm (m_font);
   QSize winSize = m_consoleView->size ();
 
   m_charSize.rwidth () = fm.averageCharWidth ();
   m_charSize.rheight () = fm.lineSpacing ();
 
   m_consoleRect.setWidth (winSize.width () / fm.averageCharWidth ());
   m_consoleRect.setHeight (winSize.height () / fm.lineSpacing ());
 
   // Don't shrink the size of the buffer.  That way wide lines won't be
   // truncated and will reappear if the window is enlarged again later.
 
-  if (m_consoleRect.width () > m_bufferSize.width ())
+  if (allow_smaller_width || m_consoleRect.width () > m_bufferSize.width ())
     m_bufferSize.rwidth () = m_consoleRect.width ();
 
   if (qMax (m_bufferSize.height (), m_consoleRect.height ())
       > m_bufferSize.height ())
     m_bufferSize.rheight () = qMax (m_bufferSize.height (),
                                     m_consoleRect.height ());
 
   // Store the terminal size in the environment.  When Octave is
@@ -1005,17 +1028,18 @@ void QConsolePrivate::updateConsoleSize 
   log ("  window: (%d, %d) -> (%d, %d) [%d x %d]\n",
        m_consoleRect.left (), m_consoleRect.top (),
        m_consoleRect.right (), m_consoleRect.bottom (),
        m_consoleRect.width (), m_consoleRect.height ());
 
   if (sync)
     syncConsoleParameters ();
 
-  updateScrollBar ();
+  updateHorizontalScrollBar ();
+  updateVerticalScrollBar ();
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 void QConsolePrivate::syncConsoleParameters (void)
 {
   CONSOLE_SCREEN_BUFFER_INFO sbi;
   HANDLE hStdOut = m_stdOut;
@@ -1092,51 +1116,96 @@ void QConsolePrivate::grabConsoleBuffer 
   r.Bottom = m_consoleRect.bottom ();
 
   if (! ReadConsoleOutput (m_stdOut, (buf ? buf : m_buffer), bs, bc, &r))
     qCritical ("cannot read console output");
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QConsolePrivate::updateScrollBar (void)
+void QConsolePrivate::updateHorizontalScrollBar (void)
 {
-  m_scrollBar->setMinimum (0);
-  if (m_bufferSize.height () > m_consoleRect.height ())
-    m_scrollBar->setMaximum (m_bufferSize.height () - m_consoleRect.height ());
+  m_horizontalScrollBar->setMinimum (0);
+  if (m_bufferSize.width () > m_consoleRect.width ())
+    m_horizontalScrollBar->setMaximum (m_bufferSize.width () - m_consoleRect.width ());
   else
-    m_scrollBar->setMaximum (0);
-  m_scrollBar->setSingleStep (1);
-  m_scrollBar->setPageStep (m_consoleRect.height ());
-  m_scrollBar->setValue (m_consoleRect.top ());
+    m_horizontalScrollBar->setMaximum (0);
+  m_horizontalScrollBar->setSingleStep (1);
+  m_horizontalScrollBar->setPageStep (m_consoleRect.width ());
+  m_horizontalScrollBar->setValue (m_consoleRect.left ());
+
+  log ("Horizontal scrollbar parameters updated: %d/%d/%d/%d\n",
+       m_horizontalScrollBar->minimum (),
+       m_horizontalScrollBar->maximum (),
+       m_horizontalScrollBar->singleStep (),
+       m_horizontalScrollBar->pageStep ());
+}
 
-  log ("Scrollbar parameters updated: %d/%d/%d/%d\n",
-       m_scrollBar->minimum (), m_scrollBar->maximum (),
-       m_scrollBar->singleStep (), m_scrollBar->pageStep ());
+void QConsolePrivate::updateVerticalScrollBar (void)
+{
+  m_verticalScrollBar->setMinimum (0);
+  if (m_bufferSize.height () > m_consoleRect.height ())
+    m_verticalScrollBar->setMaximum (m_bufferSize.height () - m_consoleRect.height ());
+  else
+    m_verticalScrollBar->setMaximum (0);
+  m_verticalScrollBar->setSingleStep (1);
+  m_verticalScrollBar->setPageStep (m_consoleRect.height ());
+  m_verticalScrollBar->setValue (m_consoleRect.top ());
+
+  log ("Vertical scrollbar parameters updated: %d/%d/%d/%d\n",
+       m_verticalScrollBar->minimum (), m_verticalScrollBar->maximum (),
+       m_verticalScrollBar->singleStep (), m_verticalScrollBar->pageStep ());
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QConsolePrivate::setScrollValue (int value)
+void QConsolePrivate::setHorizontalScrollValue (int value)
+{
+  if (value == m_consoleRect.left ())
+    return;
+
+  SMALL_RECT r;
+  HANDLE hStdOut = m_stdOut;
+
+  if (value + m_consoleRect.width () > m_bufferSize.width ())
+    value = m_bufferSize.width () - m_consoleRect.width ();
+
+  r.Left = value;
+  r.Top = m_consoleRect.top ();
+  r.Right = value + m_consoleRect.width () - 1;
+  r.Bottom = m_consoleRect.bottom ();
+
+  log ("Scrolling window horizontally: (%d, %d) -> (%d, %d) [%d x %d]\n",
+       r.Left, r.Top, r.Right, r.Bottom, 
+       r.Right - r.Left + 1, r.Bottom - r.Top + 1);
+
+  if (SetConsoleWindowInfo (hStdOut, TRUE, &r))
+    {
+      m_consoleRect.moveLeft (value);
+      updateConsoleView ();
+    }
+}
+
+void QConsolePrivate::setVerticalScrollValue (int value)
 {
   if (value == m_consoleRect.top ())
     return;
 
   SMALL_RECT r;
   HANDLE hStdOut = m_stdOut;
 
   if (value + m_consoleRect.height () > m_bufferSize.height ())
     value = m_bufferSize.height () - m_consoleRect.height ();
 
   r.Left = m_consoleRect.left ();
   r.Top = value;
   r.Right = m_consoleRect.right ();
   r.Bottom = value + m_consoleRect.height () - 1;
 
-  log ("Scrolling window: (%d, %d) -> (%d, %d) [%d x %d]\n",
+  log ("Scrolling window vertically: (%d, %d) -> (%d, %d) [%d x %d]\n",
        r.Left, r.Top, r.Right, r.Bottom, 
        r.Right - r.Left + 1, r.Bottom - r.Top + 1);
 
   if (SetConsoleWindowInfo (hStdOut, TRUE, &r))
     {
       m_consoleRect.moveTop (value);
       updateConsoleView ();
     }
@@ -1173,17 +1242,18 @@ void QConsolePrivate::monitorConsole (vo
   if (GetConsoleScreenBufferInfo (hStdOut, &sbi))
     {
       if (m_bufferSize.width () != sbi.dwSize.X
           || m_bufferSize.height () != sbi.dwSize.Y)
         {
           // Buffer size changed
           m_bufferSize.rwidth () = sbi.dwSize.X;
           m_bufferSize.rheight () = sbi.dwSize.Y;
-          updateScrollBar ();
+          updateHorizontalScrollBar ();
+          updateVerticalScrollBar ();
         }
 
       if (m_cursorPos.x () != sbi.dwCursorPosition.X
           || m_cursorPos.y () != sbi.dwCursorPosition.Y)
         {
           // Cursor position changed
           m_consoleView->update
             ((m_cursorPos.x () - sbi.srWindow.Left) * m_charSize.width (),
@@ -1201,17 +1271,18 @@ void QConsolePrivate::monitorConsole (vo
           || m_consoleRect.right () != sbi.srWindow.Right
           || m_consoleRect.top () != sbi.srWindow.Top
           || m_consoleRect.bottom () != sbi.srWindow.Bottom)
         {
           // Console window changed
           m_consoleRect = QRect (sbi.srWindow.Left, sbi.srWindow.Top,
                                  sbi.srWindow.Right - sbi.srWindow.Left + 1,
                                  sbi.srWindow.Bottom - sbi.srWindow.Top + 1);
-          updateScrollBar ();
+          updateHorizontalScrollBar ();
+          updateVerticalScrollBar ();
           updateConsoleView ();
           return;
         }
 
       if (m_tmpBuffer && m_buffer)
         {
           grabConsoleBuffer (m_tmpBuffer);
           if (memcmp (m_tmpBuffer, m_buffer,
@@ -1500,34 +1571,46 @@ void QWinTerminalImpl::setBlinkingCursor
     {
       d->m_blinkCursorTimer->stop ();
 
       if (d->m_cursorBlinking)
         blinkCursorEvent ();
     }
 }
 
+// Reset width of console buffer and terminal window to be the same.
+
+void QWinTerminalImpl::init_terminal_size (void)
+{
+  d->updateConsoleSize (true, true);
+}
+
 //////////////////////////////////////////////////////////////////////////////
 
 void QWinTerminalImpl::wheelEvent (QWheelEvent* event)
 {
   if (! d->m_inWheelEvent)
     {
       // Forward to the scrollbar (avoid recursion)
       d->m_inWheelEvent = true;
-      QApplication::sendEvent (d->m_scrollBar, event);
+      QApplication::sendEvent (d->m_verticalScrollBar, event);
       d->m_inWheelEvent = false;
     }
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QWinTerminalImpl::scrollValueChanged (int value)
+void QWinTerminalImpl::horizontalScrollValueChanged (int value)
 {
-  d->setScrollValue (value);
+  d->setHorizontalScrollValue (value);
+}
+
+void QWinTerminalImpl::verticalScrollValueChanged (int value)
+{
+  d->setVerticalScrollValue (value);
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 void QWinTerminalImpl::monitorConsole (void)
 {
   d->monitorConsole ();
 }
diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
@@ -66,16 +66,17 @@ public:
 
   QString selectedText ();
 
 public slots:
   void copyClipboard (void);
   void pasteClipboard (void);
   void selectAll (void);
   void blinkCursorEvent (void);
+  void init_terminal_size (void);
 
 signals:
   void terminated (void);
   void titleChanged (const QString&);
   void set_global_shortcuts_signal (bool);
   void set_screen_size_signal (int, int);
 
 protected:
@@ -95,17 +96,18 @@ protected:
   void mouseTripleClickEvent (QMouseEvent* event);
 
   bool eventFilter(QObject *obj, QEvent *ev);
 
   void dragEnterEvent(QDragEnterEvent *event);
   void dropEvent(QDropEvent *event);
 
 private slots:
-  void scrollValueChanged (int value);
+  void horizontalScrollValueChanged (int value);
+  void verticalScrollValueChanged (int value);
   void monitorConsole (void);
   void updateSelection (void);
   void tripleClickTimeout (void);
 
 private:
   QConsolePrivate* d;
   bool allowTripleClick;
 };
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -936,16 +936,22 @@ main_window::read_settings (void)
   for (int i=0; i < curr_dirs.size (); i++)
     {
       _current_directory_combo_box->addItem (curr_dirs.at (i));
     }
   emit settings_changed (settings);
 }
 
 void
+main_window::init_terminal_size (void)
+{
+  emit init_terminal_size_signal ();
+}
+
+void
 main_window::set_window_layout (QSettings *settings)
 {
 #if ! defined (Q_OS_WIN32)
   restoreState (settings->value ("MainWindow/windowState").toByteArray ());
   restoreGeometry (settings->value ("MainWindow/geometry").toByteArray ());
 #endif
 
   // Restore the geometry of all dock-widgets
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -76,16 +76,17 @@ public:
   ~main_window (void);
 
   bool command_window_has_focus (void) const;
 
   void focus_command_window (void);
 
 signals:
   void settings_changed (const QSettings *);
+  void init_terminal_size_signal (void);
   void new_file_signal (const QString&);
   void open_file_signal (const QString&);
 
   void show_doc_signal (const QString&);
 
   void insert_debugger_pointer_signal (const QString& file, int line);
   void delete_debugger_pointer_signal (const QString& file, int line);
   void update_breakpoint_marker_signal (bool insert, const QString& file,
@@ -148,16 +149,17 @@ public slots:
   void debug_quit (void);
 
   void handle_insert_debugger_pointer_request (const QString& file, int line);
   void handle_delete_debugger_pointer_request (const QString& file, int line);
   void handle_update_breakpoint_marker_request (bool insert,
                                                 const QString& file, int line);
 
   void read_settings (void);
+  void init_terminal_size (void);
   void set_window_layout (QSettings *settings);
   void write_settings (void);
   void connect_visibility_changed (void);
 
   void copyClipboard (void);
   void pasteClipboard (void);
   void selectAll (void);
 
diff --git a/libgui/src/octave-gui.cc b/libgui/src/octave-gui.cc
--- a/libgui/src/octave-gui.cc
+++ b/libgui/src/octave-gui.cc
@@ -163,16 +163,18 @@ octave_start_gui (int argc, char *argv[]
       shortcut_manager::init_data ();
 
       // Create and show main window.
 
       main_window w;
 
       w.read_settings ();
 
+      w.init_terminal_size ();
+
       // Connect signals for changes in visibility not before w
       // is shown.
 
       w.connect_visibility_changed ();
 
       w.focus_command_window ();
 
       return application.exec ();
