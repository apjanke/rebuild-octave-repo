# HG changeset patch
# User Rik <rik@octave.org>
# Date 1501700685 25200
#      Wed Aug 02 12:04:45 2017 -0700
# Node ID 061a343089be19fc2617eb230b07c228b4a14e07
# Parent  ff2c2f2f670212f4fce7152df59ed36b8b1765bb
Miscellaneous cleanups of C++11 std::string code.

* gl2ps-print.cc (escape_character): Use insert() function prototype for a
single character, rather than for a string.

* oct-stream.cc (textscan::scan_string): Grow string in an exponential manner
using append() to fill with '\0' nulls.  For case of fixed delimiter, use
string constructor to pre-size the array.  Use back() instead of
[tmp.length()-1)].

* bp-table.cc (get_user_code): Use iterators and std::replace rather
than hand-coded for loop.  Remove check for "! name.empty()" since checking
for "name.length () > 2" will obviously include this case.

* cmd-edit.cc (do_decod_prompt_string, ): Be specific and use character '\\'
rather than string constructor "\\".

diff --git a/libinterp/corefcn/gl2ps-print.cc b/libinterp/corefcn/gl2ps-print.cc
--- a/libinterp/corefcn/gl2ps-print.cc
+++ b/libinterp/corefcn/gl2ps-print.cc
@@ -619,17 +619,17 @@ select_font (caseless_str fn, bool isbol
 }
 
 static void
 escape_character (const std::string chr, std::string& str)
 {
   std::size_t idx = str.find (chr);
   while (idx != std::string::npos)
     {
-      str.insert (idx, "\\");
+      str.insert (idx, 1, '\\');
       idx = str.find (chr, idx + 2);
     }
 }
 
 namespace octave
 {
   Matrix
   gl2ps_renderer::render_text (const std::string& txt,
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -3165,36 +3165,39 @@ namespace octave
   {
     if (delim_list.isempty ())
       {
         unsigned int i = 0;
         unsigned int width = fmt.width;
 
         for (i = 0; i < width; i++)
           {
-            if (i+1 > val.length ())
-              val = val + val + ' ';      // grow even if empty
+            // Grow string in an exponential fashion if necessary.
+            if (i >= val.length ())
+              val.append (std::max (val.length (),
+                                    static_cast<size_t> (16)), '\0');
+
             int ch = is.get ();
             if (is_delim (ch) || ch == std::istream::traits_type::eof ())
               {
                 is.putback (ch);
                 break;
               }
             else
               val[i] = ch;
           }
         val = val.substr (0, i);          // trim pre-allocation
       }
     else  // Cell array of multi-character delimiters
       {
-        std::string ends ("");
+        std::string ends (delim_list.numel (), '\0');
         for (int i = 0; i < delim_list.numel (); i++)
           {
             std::string tmp = delim_list(i).string_value ();
-            ends += tmp.substr (tmp.length () - 1);
+            ends[i] = tmp.back ();
           }
         val = textscan::read_until (is, delim_list, ends);
       }
   }
 
   // Return in VAL the run of characters from IS contained in PATTERN.
 
   int
diff --git a/libinterp/parse-tree/bp-table.cc b/libinterp/parse-tree/bp-table.cc
--- a/libinterp/parse-tree/bp-table.cc
+++ b/libinterp/parse-tree/bp-table.cc
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <algorithm>
 #include <fstream>
 #include <limits>
 #include <list>
 #include <map>
 #include <set>
 #include <string>
 #include <sstream>
 #include <iostream>
@@ -58,18 +59,18 @@ along with Octave; see the file COPYING.
 
 // Initialize the singleton object
 bp_table *bp_table::instance = nullptr;
 
 std::set<std::string> bp_table::errors_that_stop;
 std::set<std::string> bp_table::caught_that_stop;
 std::set<std::string> bp_table::warnings_that_stop;
 
-// Return a pointer to the user-defined function FNAME.  If FNAME is
-// empty, search backward for the first user-defined function in the
+// Return a pointer to the user-defined function FNAME.  If FNAME is empty,
+// search backward for the first user-defined function in the
 // current call stack.
 
 octave_user_code *
 get_user_code (const std::string& fname)
 {
   octave_user_code *dbg_fcn = nullptr;
 
   if (fname.empty ())
@@ -79,28 +80,28 @@ get_user_code (const std::string& fname)
       dbg_fcn = cs.debug_user_code ();
     }
   else
     {
       std::string name = fname;
 
       if (octave::sys::file_ops::dir_sep_char () != '/' && name[0] == '@')
         {
-          int len = name.length () - 1;         // -1: can't have trailing '/'
-          for (int i = 2; i < len; i++)         //  2: can't have @/method
-            if (name[i] == '/')
-              name[i] = octave::sys::file_ops::dir_sep_char ();
+          auto beg = name.begin () + 2;  // never have @/method
+          auto end = name.end () - 1;    // never have trailing '/'
+          std::replace (beg, end, octave::sys::file_ops::dir_sep_char (), '/');
         }
 
       size_t name_len = name.length ();
 
-      if (! name.empty () && name_len > 2 && name.substr (name_len-2) == ".m")
+      if (name_len > 2 && name.substr (name_len-2) == ".m")
         name = name.substr (0, name_len-2);
 
-      octave::symbol_table& symtab = octave::__get_symbol_table__ ("get_user_code");
+      octave::symbol_table& symtab =
+        octave::__get_symbol_table__ ("get_user_code");
 
       octave_value fcn = symtab.find_function (name);
 
       if (fcn.is_defined () && fcn.is_user_code ())
         dbg_fcn = fcn.user_code_value ();
     }
 
   return dbg_fcn;
diff --git a/liboctave/util/cmd-edit.cc b/liboctave/util/cmd-edit.cc
--- a/liboctave/util/cmd-edit.cc
+++ b/liboctave/util/cmd-edit.cc
@@ -1683,17 +1683,17 @@ namespace octave
               case '4':
               case '5':
               case '6':
               case '7':
                 // Maybe convert an octal number.
                 {
                   int n = read_octal (s.substr (i, 3));
 
-                  tmpstr = "\\";
+                  tmpstr = '\\';
 
                   if (n != -1)
                     {
                       tmpstr[0] = n;
                       i += 2;   // i++ makes this += 3 later
                     }
 
                   break;
@@ -1853,17 +1853,17 @@ namespace octave
                                : ::octave_rl_prompt_end_ignore ());
 
                   break;
                 }
 #endif
 
               case '\\':
                 {
-                  tmpstr = "\\";
+                  tmpstr = '\\';
 
                   break;
                 }
 
               default:
                 {
                   tmpstr = "\\ ";
                   tmpstr[1] = c;
