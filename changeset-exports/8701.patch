# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1234200192 18000
#      Mon Feb 09 12:23:12 2009 -0500
# Node ID 1652e39b934e9642177f06e4bdd4a3bc5e082184
# Parent  314be237cd5b716245f5c2ffb4d6297b777d6bb0
handle command names in declaration lists

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2009-02-09  John W. Eaton  <jwe@octave.org>
+
+	* lex.l (lexical_feedback::looking_at_decl_list): New data member.
+	* lex.l (lexical_feedback::init): Initialize it.
+	(handle_identifier): Also force local variable if looking_at_decl_list.
+	* parse.y (parsing_decl_list): New non-terminal.
+	(declaration): Use it.  Set lexer_flags.looking_at_decl_list to
+	false after parsing the declaration.
+
 2009-02-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* TEMPLATE-INST/Array-tc.cc: Reflect changes in octave_sort.
 
 2009-02-08  John W. Eaton  <jwe@octave.org>
 
 	* octave.cc (initialize_pathsearch): Delete.
 	(octave_main): Don't call initialize_pathsearch.
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -87,16 +87,20 @@ public:
   int looking_at_function_handle;
 
   // TRUE means we're parsing the return list for a function.
   bool looking_at_return_list;
 
   // TRUE means we're parsing the parameter list for a function.
   bool looking_at_parameter_list;
 
+  // TRUE means we're parsing a declaration list (global or
+  // persistent).
+  bool looking_at_decl_list;
+
   // TRUE means we are looking at the initializer expression for a
   // parameter list element.
   bool looking_at_initializer_expression;
 
   // TRUE means we're parsing a matrix or the left hand side of
   // multi-value assignment statement.
   bool looking_at_matrix_or_assign_lhs;
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -2763,16 +2763,17 @@ handle_identifier (void)
   // If the following token is `=', or if we are parsing a function
   // return list or function parameter list, or if we are looking at
   // something like [ab,cd] = foo (), force the symbol to be inserted
   // as a variable in the current symbol table.
 
   if (is_command_name (tok) && ! is_variable (tok))
     {
       if (next_tok_is_eq
+	  || lexer_flags.looking_at_decl_list
 	  || lexer_flags.looking_at_return_list
 	  || (lexer_flags.looking_at_parameter_list
 	      && ! lexer_flags.looking_at_initializer_expression))
 	{
 	  force_local_variable (tok);
 	}
       else if (lexer_flags.looking_at_matrix_or_assign_lhs)
 	{
@@ -2836,19 +2837,20 @@ lexical_feedback::init (void)
   defining_func = false;
   parsed_function_name = false;
   parsing_nested_function = 0;
   parsing_class_method = false;
 
   // Not initiallly looking at a function handle.
   looking_at_function_handle = 0;
 
-  // Not parsing a function return or parameter list.
+  // Not parsing a function return, parameter, or declaration list.
   looking_at_return_list = false;
   looking_at_parameter_list = false;
+  looking_at_decl_list = false;
 
   // Not looking at an argument list initializer expression.
   looking_at_initializer_expression = false;
 
   // Not parsing a matrix or the left hand side of multi-value
   // assignment statement.
   looking_at_matrix_or_assign_lhs = false;
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -924,20 +924,30 @@ command		: declaration
 		| script
 		  { $$ = $1; }
 		;
 
 // =====================
 // Declaration statemnts
 // =====================
 
-declaration	: GLOBAL decl1
-		  { $$ = make_decl_command (GLOBAL, $1, $2); }
-		| STATIC decl1
-		  { $$ = make_decl_command (STATIC, $1, $2); }
+parsing_decl_list
+		: // empty
+		  { lexer_flags.looking_at_decl_list = true; }
+
+declaration	: GLOBAL parsing_decl_list decl1
+		  {
+		    $$ = make_decl_command (GLOBAL, $1, $3);
+		    lexer_flags.looking_at_decl_list = false;
+		  }
+		| STATIC parsing_decl_list decl1
+		  {
+		    $$ = make_decl_command (STATIC, $1, $3);
+		    lexer_flags.looking_at_decl_list = false;
+		  }
 		;
 
 decl1		: decl2
 		  { $$ = new tree_decl_init_list ($1); }
 		| decl1 decl2
 		  {
 		    $1->append ($2);
 		    $$ = $1;
