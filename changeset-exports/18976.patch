# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1406909405 14400
#      Fri Aug 01 12:10:05 2014 -0400
# Node ID dcb260e7a6487e6001bba12d5c0e10b82598861f
# Parent  19cb2530c16bce44cda6b3ccdb63517a0c3ce9d1
# Parent  c59745865c7f6656ebd4898e07d6e46746640ef9
maint: Periodic merge of gui-release to default.

diff --git a/build-aux/common.mk b/build-aux/common.mk
--- a/build-aux/common.mk
+++ b/build-aux/common.mk
@@ -41,16 +41,17 @@ EXEEXT = @EXEEXT@
 BUILD_EXEEXT = @BUILD_EXEEXT@
 
 LEX = @LEX@
 AM_LFLAGS = @LFLAGS@
 LEXLIB = @LEXLIB@
 
 YACC = @YACC@
 AM_YFLAGS = -dv
+BISON_API_PREFIX_DECL_STYLE = @BISON_API_PREFIX_DECL_STYLE@
 BISON_PUSH_PULL_DECL_STYLE = @BISON_PUSH_PULL_DECL_STYLE@
 
 GPERF = @GPERF@
 
 AR = @AR@
 ARFLAGS = @ARFLAGS@ 
 
 TEMPLATE_AR = @TEMPLATE_AR@
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2762,16 +2762,17 @@ if test $build_gui = yes; then
     if test $octave_cv_func_qabstractitemmodel_beginresetmodel = no; then
       warn_gui="QAbstractItemModel::beginResetModel() not found -- disabling GUI"
       build_gui=no
     fi
   fi
 
   if test $build_gui = yes; then
     OCTAVE_CHECK_QFONT_MONOSPACE
+    OCTAVE_CHECK_QFONT_FORCE_INTEGER_METRICS
     OCTAVE_CHECK_FUNC_SETPLACEHOLDERTEXT
     OCTAVE_CHECK_FUNC_QTABWIDGET_SETMOVABLE
     OCTAVE_CHECK_FUNC_QSCI_FINDSELECTION
   fi
 
   if test $build_gui = yes; then
     ## Check for Qscintilla library which is used in the GUI editor.
     AC_CACHE_CHECK([whether Qscintilla library is installed],
diff --git a/doc/interpreter/external.txi b/doc/interpreter/external.txi
--- a/doc/interpreter/external.txi
+++ b/doc/interpreter/external.txi
@@ -18,17 +18,17 @@
 @c <http://www.gnu.org/licenses/>.
 
 @node External Code Interface
 @appendix External Code Interface
 @cindex dynamic-linking
 @cindex Dynamically Linked Functions
 @cindex Octave API
 
-â€œThe sum of human wisdom is not contained in any one language"
+"The sum of human wisdom is not contained in any one language"
   ---Ezra Pound
 
 Octave is a fantastic language for solving many problems in science and
 engineering.  However, it is not the only computer language and there
 are times when you may want to use code written in other languages.
 Good reasons for doing so include: 1) not re-inventing the wheel; existing
 function libraries which have been thoroughly tested and debugged or
 large scale simulation codebases are a good example, 2) accessing unique
diff --git a/libgui/Makefile.am b/libgui/Makefile.am
--- a/libgui/Makefile.am
+++ b/libgui/Makefile.am
@@ -17,16 +17,20 @@
 # You should have received a copy of the GNU General Public License
 # along with Octave; see the file COPYING.  If not, see
 # <http://www.gnu.org/licenses/>.
 
 include $(top_srcdir)/build-aux/common.mk
 
 MOC_CPPFLAGS =
 
+## Fix for bug #42839 where -mieee CFLAG option is added to CPPFLAGS by gnulib.
+## Eventually gnulib will be appropriately fixed and this hack removed.
+MOC_OCTAVE_CPPFLAGS = $(filter-out -mieee, $(AM_CPPFLAGS) $(CPPFLAGS))
+
 octlib_LTLIBRARIES = liboctgui.la
 
 TRANSLATIONS = \
   languages/be_BY.ts \
   languages/de_DE.ts \
   languages/en_US.ts \
   languages/es_ES.ts \
   languages/fr_FR.ts \
@@ -89,17 +93,17 @@ octlocale_DATA = $(LOCALES)
 
 default-qt-settings: default-qt-settings.in
 	$(do_subst_qt_settings)
 
 define moc-command
 ( echo '#ifdef HAVE_CONFIG_H'; \
   echo '#include <config.h>'; \
   echo '#endif'; \
-  $(MOC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(MOC_CPPFLAGS) $(liboctgui_la_CPPFLAGS) $< ) > $@-t
+  $(MOC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(MOC_OCTAVE_CPPFLAGS) $(MOC_CPPFLAGS) $(liboctgui_la_CPPFLAGS) $< ) > $@-t
 mv $@-t $@
 endef
 
 define rcc-command
 ( echo '#ifdef HAVE_CONFIG_H'; \
   echo '#include <config.h>'; \
   echo '#endif'; \
   $(RCC) -name $(@D) $< ) > $@-t
diff --git a/libgui/qterminal/libqterminal/unix/TerminalView.cpp b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
--- a/libgui/qterminal/libqterminal/unix/TerminalView.cpp
+++ b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
@@ -207,18 +207,21 @@ void TerminalView::setVTFont(const QFont
       if (!_antialiasText)
         font.setStyleStrategy( QFont::NoAntialias );
 
       // experimental optimization.  Konsole assumes that the terminal is using a
       // mono-spaced font, in which case kerning information should have an effect.
       // Disabling kerning saves some computation when rendering text.
       // font.setKerning(false);
 
-      font.setStyleStrategy (  QFont::StyleStrategy(font.styleStrategy()
-                             | QFont::ForceIntegerMetrics)  );
+      QFont::StyleStrategy strategy = font.styleStrategy();
+#if defined (HAVE_QFONT_FORCE_INTEGER_METRICS)
+      strategy |= QFont::ForceIntegerMetrics;
+#endif
+      font.setStyleStrategy(QFont::StyleStrategy(strategy));
 
       QWidget::setFont(font);
       fontChange(font);
     }
 }
 
 void TerminalView::setFont(const QFont &)
 {
diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -59,16 +59,18 @@ public:
                                            int line) = 0;
 
   virtual void handle_edit_file_request (const QString& file) = 0;
 
   virtual void set_focus () = 0;
 
   virtual void empty_script (bool, bool) = 0;
 
+  virtual void enable_menu_shortcuts (bool enable) = 0;
+
 public slots:
   virtual void request_new_file (const QString& command = QString ()) = 0;
   virtual void request_new_script (const QString& command = QString ()) = 0;
   virtual void request_new_function (bool) = 0;
   virtual void request_open_file () = 0;
   virtual void request_open_file (const QString& openFileName, int line = -1,
                                   bool debug_pointer = false,
                                   bool breakpoint_marker = false,
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1427,31 +1427,38 @@ file_editor_tab::file_has_changed (const
   // been changed multiple times by temporarily removing from the
   // file watcher.
   QStringList trackedFiles = _file_system_watcher.files ();
   if (!trackedFiles.isEmpty ())
     _file_system_watcher.removePath (_file_name);
 
   if (QFile::exists (_file_name))
     {
-      // Create a WindowModal message that blocks the edit area
-      // by making _edit_area parent.
-      QMessageBox* msgBox
-        = new QMessageBox (QMessageBox::Warning,
-                           tr ("Octave Editor"),
-                           tr ("It seems that \'%1\' has been modified by another application. Do you want to reload it?").
-                           arg (_file_name),
-                           QMessageBox::Yes | QMessageBox::No, this);
+      if (_always_reload_changed_files)
+
+              load_file (_file_name);
 
-      connect (msgBox, SIGNAL (finished (int)),
-               this, SLOT (handle_file_reload_answer (int)));
+      else
+        {
+          // Create a WindowModal message that blocks the edit area
+          // by making _edit_area parent.
+          QMessageBox* msgBox
+            = new QMessageBox (QMessageBox::Warning,
+                               tr ("Octave Editor"),
+                               tr ("It seems that \'%1\' has been modified by another application. Do you want to reload it?").
+                               arg (_file_name),
+                               QMessageBox::Yes | QMessageBox::No, this);
 
-      msgBox->setWindowModality (Qt::WindowModal);
-      msgBox->setAttribute (Qt::WA_DeleteOnClose);
-      msgBox->show ();
+          connect (msgBox, SIGNAL (finished (int)),
+                   this, SLOT (handle_file_reload_answer (int)));
+
+          msgBox->setWindowModality (Qt::WindowModal);
+          msgBox->setAttribute (Qt::WA_DeleteOnClose);
+          msgBox->show ();
+        }
     }
   else
     {
       QString modified = "";
       if (_edit_area->isModified ())
         modified = tr ("\n\nWarning: The contents in the editor is modified!");
 
       // Create a WindowModal message. The file editor tab can't be made
@@ -1572,16 +1579,19 @@ file_editor_tab::notice_settings (const 
 
   _edit_area->setEdgeColumn (
               settings->value ("editor/long_line_column",80).toInt ());
   if (settings->value ("editor/long_line_marker",true).toBool ())
     _edit_area->setEdgeMode (QsciScintilla::EdgeLine);
   else
     _edit_area->setEdgeMode (QsciScintilla::EdgeNone);
 
+  // reload changed files
+  _always_reload_changed_files = 
+        settings->value ("editor/always_reload_changed_files",false).toBool ();
 }
 
 void
 file_editor_tab::auto_margin_width ()
 {
   _edit_area->setMarginWidth (2, "1"+QString::number (_edit_area->lines ()));
 }
 
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -219,16 +219,17 @@ private:
   QString _file_name;
   QString _file_name_short;
 
   bool _long_title;
   bool _copy_available;
   bool _app_closing;
   bool _is_octave_file;
   bool _modal_dialog;
+  bool _always_reload_changed_files;
 
   QFileSystemWatcher _file_system_watcher;
 
   find_dialog *_find_dialog;
   bool _find_dialog_is_visible;
   QRect _find_dialog_geometry;
 
   QsciAPIs *_lexer_apis;
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -816,18 +816,22 @@ void
 file_editor::request_completion (bool)
 {
   emit fetab_completion (_tab_widget->currentWidget ());
 }
 
 void
 file_editor::handle_mru_add_file (const QString& file_name)
 {
+  if (_mru_files.at (0) == file_name)
+    return;  // the first entry is already the actual file name
+
   _mru_files.removeAll (file_name);
   _mru_files.prepend (file_name);
+
   mru_menu_update ();
 }
 
 void
 file_editor::mru_menu_update (void)
 {
   int num_files = qMin (_mru_files.size (), int (MaxMRUFiles));
 
@@ -1083,16 +1087,47 @@ file_editor::add_action (QMenu *menu, co
 {
   QAction *a = menu->addAction (icon, text, this, member);
   addAction (a);  // important for shortcut context
   a->setShortcutContext (Qt::WidgetWithChildrenShortcut);
   return a;
 }
 
 void
+file_editor::enable_menu_shortcuts (bool enable)
+{
+  QHash<QMenu*, QStringList>::const_iterator i = _hash_menu_text.constBegin();
+
+ while (i != _hash_menu_text.constEnd())
+   {
+     i.key ()->setTitle (i.value ().at (! enable));
+     ++i;
+   }
+}
+
+QMenu*
+file_editor::m_add_menu (QMenuBar *p, QString name)
+{
+  QMenu *menu = p->addMenu (name);
+
+  QString base_name = name;  // get a copy
+  // replace intended '&' ("&&") by a temp. string
+  base_name.replace ("&&","___octave_amp_replacement___");
+  // remove single '&' (shortcut)
+  base_name.remove ("&");
+  // restore intended '&'
+  base_name.replace ("___octave_amp_replacement___","&&");
+
+  // remember names with and without shortcut
+  _hash_menu_text[menu] = QStringList () << name << base_name;
+
+  return menu;
+}
+
+void
 file_editor::construct (void)
 {
   QWidget *editor_widget = new QWidget (this);
 
   // FIXME: what was the intended purpose of this unused variable?
   // QStyle *editor_style = QApplication::style ();
   _menu_bar = new QMenuBar (editor_widget);
 #if defined (Q_OS_MAC)
@@ -1115,17 +1150,17 @@ file_editor::construct (void)
       _mru_file_actions[i] = new QAction (this);
       _mru_file_actions[i]->setVisible (false);
     }
 
   // menu bar
 
   // file menu
 
-  _fileMenu = new QMenu (tr ("&File"), _menu_bar);
+  _fileMenu = m_add_menu (_menu_bar, tr ("&File"));
 
   // new and open menus are inserted later by the main window
   _mru_file_menu = new QMenu (tr ("&Recent Editor Files"), _fileMenu);
   for (int i = 0; i < MaxMRUFiles; ++i)
     _mru_file_menu->addAction (_mru_file_actions[i]);
   _fileMenu->addMenu (_mru_file_menu);
 
   _fileMenu->addSeparator ();
@@ -1152,21 +1187,19 @@ file_editor::construct (void)
           QIcon::fromTheme("window-close", QIcon (":/actions/icons/fileclose.png")),
           tr ("Close Other Files"), SLOT (request_close_other_files (bool)));
 
   _fileMenu->addSeparator ();
 
   _print_action = add_action (_fileMenu, QIcon (":/actions/icons/fileprint.png"),
           tr ("Print..."), SLOT (request_print_file (bool)));
 
-  _menu_bar->addMenu (_fileMenu);
-
   // edit menu
 
-  QMenu *editMenu = new QMenu (tr ("&Edit"), _menu_bar);
+  QMenu *editMenu = m_add_menu (_menu_bar, tr ("&Edit"));
 
   _undo_action = add_action (editMenu, QIcon (":/actions/icons/undo.png"),
           tr ("&Undo"), SLOT (request_undo (bool)));
   _undo_action->setEnabled (false);
   _redo_action = add_action (editMenu, QIcon (":/actions/icons/redo.png"),
           tr ("&Redo"), SLOT (request_redo (bool)));
   _redo_action->setEnabled (false);
 
@@ -1260,34 +1293,32 @@ file_editor::construct (void)
 
   _preferences_action = add_action (editMenu,
           QIcon (":/actions/icons/configure.png"),
           tr ("&Preferences..."), SLOT (request_preferences (bool)));
   _styles_preferences_action = add_action (editMenu,
           QIcon (":/actions/icons/configure.png"),
           tr ("&Styles Preferences..."), SLOT (request_styles_preferences (bool)));
 
-  _menu_bar->addMenu (editMenu);
-
   // view menu
 
-  QMenu *view_menu = new QMenu (tr ("&View"), _menu_bar);
+  QMenu *view_menu = m_add_menu (_menu_bar, tr ("&View"));
 
   _zoom_in_action = add_action (view_menu, QIcon (),
           tr ("Zoom &In"), SLOT (zoom_in (bool)));
   _zoom_out_action = add_action (view_menu, QIcon (),
           tr ("Zoom &Out"), SLOT (zoom_out (bool)));
   _zoom_normal_action = add_action (view_menu, QIcon (),
           tr ("&Normal Size"), SLOT (zoom_normal (bool)));
 
   _menu_bar->addMenu (view_menu);
 
   // debug menu
 
-  _debug_menu = new QMenu (tr ("&Debug"), _menu_bar);
+  _debug_menu = m_add_menu (_menu_bar, tr ("&Debug"));
 
   _toggle_breakpoint_action = add_action (_debug_menu,
           QIcon (":/actions/icons/bp_toggle.png"), tr ("Toggle &Breakpoint"),
           SLOT (request_toggle_breakpoint (bool)));
   _next_breakpoint_action = add_action (_debug_menu,
           QIcon (":/actions/icons/bp_next.png"), tr ("&Next Breakpoint"),
           SLOT (request_next_breakpoint (bool)));
   _previous_breakpoint_action = add_action (_debug_menu,
@@ -1296,41 +1327,35 @@ file_editor::construct (void)
   _remove_all_breakpoints_action = add_action (_debug_menu,
           QIcon (":/actions/icons/bp_rm_all.png"), tr ("&Remove All Breakpoints"),
           SLOT (request_remove_breakpoint (bool)));
 
   _debug_menu->addSeparator ();
 
   // The other debug actions will be added by the main window.
 
-  _menu_bar->addMenu (_debug_menu);
-
   // run menu
 
-  QMenu *_run_menu = new QMenu (tr ("&Run"), _menu_bar);
+  QMenu *_run_menu = m_add_menu (_menu_bar, tr ("&Run"));
 
   _run_action = add_action (_run_menu, QIcon (":/actions/icons/artsbuilderexecute.png"),
           tr ("Save File and Run"), SLOT (request_run_file (bool)));
   _run_selection_action = add_action (_run_menu, QIcon (),
           tr ("Run &Selection"), SLOT (request_context_run (bool)));
   _run_selection_action->setEnabled (false);
 
-  _menu_bar->addMenu (_run_menu);
-
   // help menu
 
-  QMenu *_help_menu = new QMenu (tr ("&Help"), _menu_bar);
+  QMenu *_help_menu = m_add_menu (_menu_bar, tr ("&Help"));
 
   _context_help_action = add_action (_help_menu, QIcon (),
           tr ("&Help on Keyword"), SLOT (request_context_help (bool)));
   _context_doc_action = add_action (_help_menu, QIcon (),
           tr ("&Documentation on Keyword"), SLOT (request_context_doc (bool)));
 
-  _menu_bar->addMenu (_help_menu);
-
   // toolbar
 
   // new and open actions are inserted later from main window
   _tool_bar->addAction (_save_action);
   _tool_bar->addAction (_save_as_action);
   _tool_bar->addSeparator ();
   _tool_bar->addAction (_print_action);
   _tool_bar->addSeparator ();
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -59,16 +59,17 @@ public:
   void insert_new_open_actions (QAction*,QAction*,QAction*);
 
   void set_focus (void);
   void handle_enter_debug_mode (void);
   void handle_exit_debug_mode (void);
 
   void check_actions (void);
   void empty_script (bool startup, bool visible);
+  void enable_menu_shortcuts (bool enable);
 
 signals:
 
   void fetab_settings_changed (const QSettings *settings);
   void fetab_close_request (const QWidget* ID, bool app_closing = false);
   void fetab_change_request (const QWidget* ID);
   void fetab_file_name_query (const QWidget* ID);
   // Save is a ping-pong type of communication
@@ -233,17 +234,20 @@ private:
   void save_file_as (QWidget *fetabID = 0);
   void mru_menu_update (void);
   bool call_custom_editor (const QString& file_name = QString (), int line = -1);
 
   QWidget *find_tab_widget (const QString& openFileName) const;
   QAction *add_action (QMenu *menu, const QIcon &icon, const QString &text,
                        const char *member);
 
+  QMenu* m_add_menu (QMenuBar *p, QString text);
+
   std::map<QString, QWidget *> editor_tab_map;
+  QHash<QMenu*, QStringList> _hash_menu_text;
 
   QString ced;
 
   QMenuBar *_menu_bar;
   QToolBar *_tool_bar;
   QMenu *_debug_menu;
 
   QAction *_new_action;
@@ -317,12 +321,11 @@ private:
   QTabWidget *_tab_widget;
 
   int _marker_breakpoint;
 
   enum { MaxMRUFiles = 10 };
   QMenu *_mru_file_menu;
   QAction *_mru_file_actions[MaxMRUFiles];
   QStringList _mru_files;
-
 };
 
 #endif // FILEEDITORMDISUBWINDOW_H
diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -93,16 +93,46 @@ octave_qscintilla::octave_qscintilla (QW
           case Qt::Key_Delete | Qt::CTRL :          // DeleteWordRight
           case Qt::Key_L | Qt::CTRL | Qt::SHIFT :   // LineDelete
           case Qt::Key_L | Qt::CTRL :               // LineCut
           case Qt::Key_T | Qt::CTRL | Qt::SHIFT :   // LineCopy
             cmd_list.at (i)->setKey (0);
         }
     }
 #endif
+
+#if defined (Q_OS_MAC)
+  // Octave interprets Cmd key as Meta whereas Qscintilla interprets it
+  // as Ctrl. We thus invert Meta/Ctrl in Qscintilla's shortcuts list.
+  QList< QsciCommand * > cmd_list_mac = cmd_set->commands ();
+  for (int i = 0; i < cmd_list_mac.length (); i++)
+    {
+      // Primary key 
+      int key = cmd_list_mac.at (i)->key ();
+
+      if (static_cast<int> (key | Qt::META) == key &&
+          static_cast<int> (key | Qt::CTRL) != key)
+        key = (key ^ Qt::META) | Qt::CTRL;
+      else if (static_cast<int> (key | Qt::CTRL) == key)
+        key = (key ^ Qt::CTRL) | Qt::META;
+
+      cmd_list_mac.at (i)->setKey (key);
+
+      // Alternate key
+      key = cmd_list_mac.at (i)->alternateKey ();
+
+      if (static_cast<int> (key | Qt::META) == key &&
+          static_cast<int> (key | Qt::CTRL) != key)
+        key = (key ^ Qt::META) | Qt::CTRL;
+      else if (static_cast<int> (key | Qt::CTRL) == key)
+        key = (key ^ Qt::CTRL) | Qt::META;
+
+      cmd_list_mac.at (i)->setAlternateKey (key);
+    }
+#endif
 }
 
 octave_qscintilla::~octave_qscintilla ()
 { }
 
 void
 octave_qscintilla::get_global_textcursor_pos (QPoint *global_pos,
                                               QPoint *local_pos)
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -1019,16 +1019,18 @@ main_window::write_settings (void)
 
 // Connecting the signals emitted when the visibility of a widget changes.
 // This has to be done after the window is shown (see octave-gui.cc)
 void
 main_window::connect_visibility_changed (void)
 {
   foreach (octave_dock_widget *widget, dock_widget_list ())
     widget->connect_visibility_changed ();
+
+  editor_window->enable_menu_shortcuts (false);
 }
 
 void
 main_window::copyClipboard (void)
 {
   if (_current_directory_combo_box->hasFocus ())
     {
       QLineEdit * edit = _current_directory_combo_box->lineEdit ();
@@ -1331,16 +1333,18 @@ main_window::handle_octave_ready ()
 
 #ifdef HAVE_QSCINTILLA
   // Octave ready, determine whether to create an empty script.
   // This can not be done when the editor is created because all functions
   // must be known for the lexer's auto completion informations
   editor_window->empty_script (true, false);
 #endif
 
+  focus_command_window ();  // make sure that the command window has focus
+
 }
 
 
 void
 main_window::construct_octave_qt_link (void)
 {
   _octave_qt_link = new octave_qt_link (this);
 
@@ -1461,19 +1465,50 @@ main_window::add_action (QMenu *menu, co
     a = menu->addAction (icon, text, this, member);
 
   addAction (a);  // important for shortcut context
   a->setShortcutContext (Qt::ApplicationShortcut);
   return a;
 }
 
 void
+main_window::enable_menu_shortcuts (bool enable)
+{
+  QHash<QMenu*, QStringList>::const_iterator i = _hash_menu_text.constBegin();
+
+ while (i != _hash_menu_text.constEnd())
+   {
+     i.key ()->setTitle (i.value ().at (! enable));
+     ++i;
+   }
+}
+
+QMenu*
+main_window::m_add_menu (QMenuBar *p, QString name)
+{
+  QMenu *menu = p->addMenu (name);
+
+  QString base_name = name;  // get a copy
+  // replace intended '&' ("&&") by a temp. string
+  base_name.replace ("&&","___octave_amp_replacement___");
+  // remove single '&' (shortcut)
+  base_name.remove ("&");
+  // restore intended '&'
+  base_name.replace ("___octave_amp_replacement___","&&");
+
+  // remember names with and without shortcut
+  _hash_menu_text[menu] = QStringList () << name << base_name;
+
+  return menu;
+}
+
+void
 main_window::construct_file_menu (QMenuBar *p)
 {
-  QMenu *file_menu = p->addMenu (tr ("&File"));
+  QMenu *file_menu = m_add_menu (p, tr ("&File"));
 
   construct_new_menu (file_menu);
 
   _open_action
     = file_menu->addAction (QIcon (":/actions/icons/folder_documents.png"),
                             tr ("Open..."));
   _open_action->setShortcutContext (Qt::ApplicationShortcut);
 
@@ -1549,17 +1584,17 @@ main_window::construct_new_menu (QMenu *
 
   connect (_new_figure_action, SIGNAL (triggered ()),
            this, SLOT (handle_new_figure_request ()));
 }
 
 void
 main_window::construct_edit_menu (QMenuBar *p)
 {
-  QMenu *edit_menu = p->addMenu (tr ("&Edit"));
+  QMenu *edit_menu = m_add_menu (p, tr ("&Edit"));
 
   QKeySequence ctrl_shift = Qt::ControlModifier + Qt::ShiftModifier;
 
   _undo_action
     = edit_menu->addAction (QIcon (":/actions/icons/undo.png"), tr ("Undo"));
 
   edit_menu->addSeparator ();
 
@@ -1624,17 +1659,17 @@ main_window::construct_debug_menu_item (
 #endif
 
   return action;
 }
 
 void
 main_window::construct_debug_menu (QMenuBar *p)
 {
-  _debug_menu = p->addMenu (tr ("De&bug"));
+  _debug_menu = m_add_menu (p, tr ("De&bug"));
 
   _debug_step_over = construct_debug_menu_item
                       (":/actions/icons/db_step.png", tr ("Step"),
                        SLOT (debug_step_over ()));
 
   _debug_step_into = construct_debug_menu_item
                       (":/actions/icons/db_step_in.png", tr ("Step In"),
                        SLOT (debug_step_into ()));
@@ -1686,17 +1721,17 @@ main_window::construct_window_menu_item 
     }
 
   return action;
 }
 
 void
 main_window::construct_window_menu (QMenuBar *p)
 {
-  QMenu *window_menu = p->addMenu (tr ("&Window"));
+  QMenu *window_menu = m_add_menu (p, tr ("&Window"));
 
   _show_command_window_action = construct_window_menu_item
             (window_menu, tr ("Show Command Window"), true, command_window);
 
   _show_history_action = construct_window_menu_item
             (window_menu, tr ("Show Command History"), true, history_window);
 
   _show_file_browser_action = construct_window_menu_item
@@ -1735,17 +1770,17 @@ main_window::construct_window_menu (QMen
 
   _reset_windows_action = add_action (window_menu, QIcon (),
               tr ("Reset Default Window Layout"), SLOT (reset_windows ()));
 }
 
 void
 main_window::construct_help_menu (QMenuBar *p)
 {
-  QMenu *help_menu = p->addMenu (tr ("&Help"));
+  QMenu *help_menu = m_add_menu (p, tr ("&Help"));
 
   construct_documentation_menu (help_menu);
 
   help_menu->addSeparator ();
 
   _report_bug_action = add_action (help_menu, QIcon (),
             tr ("Report Bug"), SLOT (open_bug_tracker_page ()));
 
@@ -1777,17 +1812,17 @@ main_window::construct_documentation_men
 
   _online_doc_action = add_action (doc_menu, QIcon (),
                      tr ("Online"), SLOT (open_online_documentation_page ()));
 }
 
 void
 main_window::construct_news_menu (QMenuBar *p)
 {
-  QMenu *news_menu = p->addMenu (tr ("&News"));
+  QMenu *news_menu = m_add_menu (p, tr ("&News"));
 
   _release_notes_action = add_action (news_menu, QIcon (),
             tr ("Release Notes"), SLOT (display_release_notes ()));
 
   _current_news_action = add_action (news_menu, QIcon (),
             tr ("Community News"), SLOT (load_and_display_community_news ()));
 }
 
@@ -2211,29 +2246,35 @@ main_window::find_files_finished (int)
 }
 
 void
 main_window::set_global_edit_shortcuts (bool enable)
 {
   // this slot is called when editor gets/loses focus
   if (enable)
     { // editor loses focus, set the global shortcuts
+      // and disable the editor's menu
       shortcut_manager::set_shortcut (_copy_action, "main_edit:copy");
       shortcut_manager::set_shortcut (_paste_action, "main_edit:paste");
       shortcut_manager::set_shortcut (_undo_action, "main_edit:undo");
       shortcut_manager::set_shortcut (_select_all_action, "main_edit:select_all");
     }
   else
     { // disable shortcuts that are also provided by the editor itself
+      // and enable editor's menu
       QKeySequence no_key = QKeySequence ();
       _copy_action->setShortcut (no_key);
       _paste_action->setShortcut (no_key);
       _undo_action->setShortcut (no_key);
       _select_all_action->setShortcut (no_key);
     }
+
+  // enable/disable the main and the editor's menu shortcuts (alt-key)
+  editor_window->enable_menu_shortcuts (! enable);
+  enable_menu_shortcuts (enable);
 }
 
 void
 main_window::configure_shortcuts ()
 {
   // file menu
   shortcut_manager::set_shortcut (_open_action, "main_file:open_file");
   shortcut_manager::set_shortcut (_new_script_action, "main_file:new_file");
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -211,16 +211,18 @@ private:
 
   void construct (void);
 
   void construct_octave_qt_link (void);
 
   QAction *add_action (QMenu *menu, const QIcon &icon, const QString &text,
                        const char *member, const QWidget *receiver = 0);
 
+  void enable_menu_shortcuts (bool enable);
+  QMenu* m_add_menu (QMenuBar *p, QString text);
   void construct_menu_bar (void);
   void construct_file_menu (QMenuBar *p);
   void construct_new_menu (QMenu *p);
   void construct_edit_menu (QMenuBar *p);
   QAction *construct_debug_menu_item (const char *icon, const QString& item,
                                       const char* member);
   void construct_debug_menu (QMenuBar *p);
   QAction *construct_window_menu_item (QMenu *p, const QString& item,
@@ -271,16 +273,19 @@ private:
   void execute_debug_callback ();
 
   void configure_shortcuts ();
 
   bool confirm_exit_octave ();
 
   workspace_model *_workspace_model;
 
+  QHash<QMenu*, QStringList> _hash_menu_text;
+
+
   // Toolbars.
   QStatusBar *status_bar;
 
   // Subwindows.
   terminal_dock_widget *command_window;
   history_dock_widget *history_window;
   files_dock_widget *file_browser_window;
   documentation_dock_widget *doc_browser_window;
diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -201,16 +201,18 @@ settings_dialog::settings_dialog (QWidge
   ui->editor_notebook_tab_width_min->setValue (
     settings->value ("editor/notebook_tab_width_min", 160).toInt ());
   ui->editor_notebook_tab_width_max->setValue (
     settings->value ("editor/notebook_tab_width_max", 300).toInt ());
   ui->editor_restoreSession->setChecked (
     settings->value ("editor/restoreSession", true).toBool ());
   ui->editor_create_new_file->setChecked (
     settings->value ("editor/create_new_file",false).toBool ());
+  ui->editor_reload_changed_files->setChecked (
+    settings->value ("editor/always_reload_changed_files",false).toBool ());
 
   // terminal
   ui->terminal_fontName->setCurrentFont (QFont (
     settings->value ("terminal/fontName","Courier New").toString ()));
   ui->terminal_fontSize->setValue (
     settings->value ("terminal/fontSize", 10).toInt ());
   ui->terminal_history_buffer->setValue (
      settings->value ("terminal/history_buffer",1000).toInt ());
@@ -644,16 +646,18 @@ settings_dialog::write_changed_settings 
   settings->setValue ("editor/notebook_tab_width_min",
                       ui->editor_notebook_tab_width_min->value ());
   settings->setValue ("editor/notebook_tab_width_max",
                       ui->editor_notebook_tab_width_max->value ());
   settings->setValue ("editor/restoreSession",
                       ui->editor_restoreSession->isChecked ());
   settings->setValue ("editor/create_new_file",
                       ui->editor_create_new_file->isChecked ());
+  settings->setValue ("editor/always_reload_changed_files",
+                      ui->editor_reload_changed_files->isChecked ());
   settings->setValue ("terminal/fontSize", ui->terminal_fontSize->value ());
   settings->setValue ("terminal/fontName",
                       ui->terminal_fontName->currentFont ().family ());
 
   settings->setValue ("filesdockwidget/showFileSize",
                       ui->showFileSize->isChecked ());
   settings->setValue ("filesdockwidget/showFileType",
                       ui->showFileType->isChecked ());
diff --git a/libgui/src/settings-dialog.ui b/libgui/src/settings-dialog.ui
--- a/libgui/src/settings-dialog.ui
+++ b/libgui/src/settings-dialog.ui
@@ -399,19 +399,19 @@
         <widget class="QScrollArea" name="scrollArea">
          <property name="widgetResizable">
           <bool>true</bool>
          </property>
          <widget class="QWidget" name="scrollAreaWidgetContents">
           <property name="geometry">
            <rect>
             <x>0</x>
-            <y>-146</y>
+            <y>-175</y>
             <width>662</width>
-            <height>553</height>
+            <height>580</height>
            </rect>
           </property>
           <layout class="QVBoxLayout" name="verticalLayout_16">
            <item>
             <layout class="QVBoxLayout" name="verticalLayout_9">
              <item>
               <layout class="QGridLayout" name="editor_common_settings_grid">
                <property name="horizontalSpacing">
@@ -1078,16 +1078,23 @@
                    <verstretch>0</verstretch>
                   </sizepolicy>
                  </property>
                  <property name="text">
                   <string>Create nonexistent files without prompting</string>
                  </property>
                 </widget>
                </item>
+               <item>
+                <widget class="QCheckBox" name="editor_reload_changed_files">
+                 <property name="text">
+                  <string>Reload externally changed files without prompt</string>
+                 </property>
+                </widget>
+               </item>
               </layout>
              </item>
              <item>
               <widget class="Line" name="line_4">
                <property name="orientation">
                 <enum>Qt::Horizontal</enum>
                </property>
               </widget>
diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -19,16 +19,17 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <QtCore>
 #include <QMessageBox>
 #include <QDebug>
 #include <QGridLayout>
 #include <QVBoxLayout>
 #include <QDialogButtonBox>
 #include <QPushButton>
 #include <QLineEdit>
 #include <QCheckBox>
@@ -41,16 +42,21 @@ along with Octave; see the file COPYING.
 #include "shortcut-manager.h"
 #include "singleton-cleanup.h"
 
 shortcut_manager *shortcut_manager::instance = 0;
 
 shortcut_manager::shortcut_manager ()
 {
   setObjectName ("Shortcut_Manager");
+  
+  // Mac: don't let Qt interpret CMD key ("Meta" in Qt terminology) as Ctrl
+#if defined (Q_OS_MAC)
+  QCoreApplication::setAttribute (Qt::AA_MacDontSwapCtrlAndMeta, true);
+#endif
 
   _settings = resource_manager::get_settings ();
 }
 
 shortcut_manager::~shortcut_manager ()
 {
 }
 
@@ -75,65 +81,97 @@ shortcut_manager::instance_ok (void)
     }
 
   return retval;
 }
 
 void
 shortcut_manager::do_init_data ()
 {
+  QKeySequence ctrl;
+  int prefix; 
+#if defined (Q_OS_MAC)
+  // Use CMD key as an equivalent of Ctrl key on other platforms
+  ctrl =  Qt::MetaModifier;
+  // Some of octave default shortcuts on windows/linux are already defined 
+  // as system wide shortcuts on Mac Os X (almost all Function keys). 
+  // Prefix those with Option (Alt) modifier to avoid conflicts.
+  prefix = Qt::AltModifier;
+#else
+  ctrl = Qt::ControlModifier;
+  prefix = Qt::NoModifier;
+#endif
+
+  QKeySequence ctrl_shift = ctrl + Qt::ShiftModifier;
+  QKeySequence ctrl_alt = ctrl + Qt::AltModifier;
+  
   // actions of the main window
 
   // file
   init (tr ("New File"), "main_file:new_file", QKeySequence::New);
   init (tr ("New Function"), "main_file:new_function",
-        QKeySequence ("Ctrl+Shift+N"));
+        QKeySequence (ctrl_shift + Qt::Key_N));
   init (tr ("New Figure"), "main_file:new_figure", QKeySequence ());
   init (tr ("Open File"), "main_file:open_file", QKeySequence::Open);
   init (tr ("Load Workspace"), "main_file:load_workspace", QKeySequence ());
   init (tr ("Save Workspace As"), "main_file:save_workspace", QKeySequence ());
   init (tr ("Preferences"), "main_file:preferences", QKeySequence ());
   init (tr ("Exit Octave"), "main_file:exit", QKeySequence::Quit);
 
   // edit
   init (tr ("Copy"), "main_edit:copy", QKeySequence::Copy);
   init (tr ("Paste"), "main_edit:paste", QKeySequence::Paste);
   init (tr ("Undo"), "main_edit:undo", QKeySequence::Undo);
   init (tr ("Select All"), "main_edit:select_all", QKeySequence ());
   init (tr ("Clear Clipboard"), "main_edit:clear_clipboard", QKeySequence ());
   init (tr ("Find in Files"), "main_edit:find_in_files",
-        QKeySequence (Qt::ControlModifier + Qt::ShiftModifier + Qt::Key_F));
+        QKeySequence (ctrl_shift + Qt::Key_F));
   init (tr ("Clear Command Window"), "main_edit:clear_command_window",
         QKeySequence ());
   init (tr ("Clear Command History"), "main_edit:clear_history",
         QKeySequence ());
   init (tr ("Clear Workspace"), "main_edit:clear_workspace", QKeySequence ());
 
-  // debug
-  init (tr ("Step Over"), "main_debug:step_over", QKeySequence (Qt::Key_F10));
-  init (tr ("Step Into"), "main_debug:step_into", QKeySequence (Qt::Key_F11));
-  init (tr ("Step Out"), "main_debug:step_out", QKeySequence (Qt::ShiftModifier + Qt::Key_F11));
-  init (tr ("Continue"), "main_debug:continue", QKeySequence (Qt::Key_F5));
-  init (tr ("Quit Debug Mode"), "main_debug:quit", QKeySequence (Qt::ShiftModifier + Qt::Key_F5));
+  // debug 
+  init (tr ("Step Over"), "main_debug:step_over", 
+        QKeySequence (prefix + Qt::Key_F10));
+  init (tr ("Step Into"), "main_debug:step_into", 
+        QKeySequence (prefix + Qt::Key_F11));
+  init (tr ("Step Out"), "main_debug:step_out", 
+        QKeySequence (prefix + Qt::ShiftModifier + Qt::Key_F11));
+  init (tr ("Continue"), "main_debug:continue", 
+        QKeySequence (prefix + Qt::Key_F5));
+  init (tr ("Quit Debug Mode"), "main_debug:quit", 
+        QKeySequence (prefix + Qt::ShiftModifier + Qt::Key_F5));
 
   // window
-  QKeySequence ctrl = Qt::ControlModifier;
-  QKeySequence ctrl_shift = Qt::ControlModifier + Qt::ShiftModifier;
-  init (tr ("Show Command Window"), "main_window:show_command", ctrl_shift + Qt::Key_0);
-  init (tr ("Show Command History"), "main_window:show_history", ctrl_shift + Qt::Key_1);
-  init (tr ("Show File Browser"), "main_window:show_file_browser", ctrl_shift + Qt::Key_2);
-  init (tr ("Show Workspace"), "main_window:show_workspace", ctrl_shift + Qt::Key_3);
-  init (tr ("Show Editor"), "main_window:show_editor", ctrl_shift + Qt::Key_4);
-  init (tr ("Show Documentation"), "main_window:show_doc", ctrl_shift + Qt::Key_5);
-  init (tr ("Command Window"), "main_window:command", ctrl + Qt::Key_0);
-  init (tr ("Command History"), "main_window:history", ctrl + Qt::Key_1);
-  init (tr ("File Browser"), "main_window:file_browser", ctrl + Qt::Key_2);
-  init (tr ("Workspace"), "main_window:workspace", ctrl + Qt::Key_3);
-  init (tr ("Editor"), "main_window:editor", ctrl + Qt::Key_4);
-  init (tr ("Documentation"), "main_window:doc", ctrl + Qt::Key_5);
+  init (tr ("Show Command Window"), "main_window:show_command", 
+        prefix + ctrl_shift + Qt::Key_0);
+  init (tr ("Show Command History"), "main_window:show_history", 
+        prefix + ctrl_shift + Qt::Key_1);
+  init (tr ("Show File Browser"), "main_window:show_file_browser", 
+        prefix + ctrl_shift + Qt::Key_2);
+  init (tr ("Show Workspace"), "main_window:show_workspace", 
+        prefix + ctrl_shift + Qt::Key_3);
+  init (tr ("Show Editor"), "main_window:show_editor", 
+        prefix + ctrl_shift + Qt::Key_4);
+  init (tr ("Show Documentation"), "main_window:show_doc", 
+        prefix + ctrl_shift + Qt::Key_5);
+  init (tr ("Command Window"), "main_window:command", 
+        prefix + ctrl + Qt::Key_0);
+  init (tr ("Command History"), "main_window:history", 
+        prefix + ctrl + Qt::Key_1);
+  init (tr ("File Browser"), "main_window:file_browser", 
+        prefix + ctrl + Qt::Key_2);
+  init (tr ("Workspace"), "main_window:workspace", 
+        prefix + ctrl + Qt::Key_3);
+  init (tr ("Editor"), "main_window:editor", 
+        prefix + ctrl + Qt::Key_4);
+  init (tr ("Documentation"), "main_window:doc", 
+        prefix + ctrl + Qt::Key_5);
   init (tr ("Reset Window Layout"), "main_window:reset", QKeySequence ());
 
   // help
   init (tr ("Show Ondisk Documentation"), "main_help:ondisk_doc", QKeySequence ());
   init (tr ("Show Online Documentation"), "main_help:online_doc", QKeySequence ());
   init (tr ("Report a Bug"), "main_help:report_bug", QKeySequence ());
   init (tr ("Octave Packages"), "main_help:packages", QKeySequence ());
   init (tr ("Share Code"), "main_help:agora", QKeySequence ());
@@ -144,101 +182,116 @@ shortcut_manager::do_init_data ()
   // news
   init (tr ("Release Notes"), "main_news:release_notes", QKeySequence ());
   init (tr ("Community News"), "main_news:community_news", QKeySequence ());
 
   // actions of the editor
 
   // file
   init (tr ("Edit Function"), "editor_file:edit_function",
-        QKeySequence (Qt::ControlModifier + Qt::Key_E));
+        QKeySequence (ctrl + Qt::Key_E));
   init (tr ("Save File"), "editor_file:save", QKeySequence::Save);
   init (tr ("Save File As"), "editor_file:save_as", QKeySequence::SaveAs);
   init (tr ("Close"), "editor_file:close", QKeySequence::Close);
   init (tr ("Close All"), "editor_file:close_all", QKeySequence ());
   init (tr ("Close Other"), "editor_file:close_other", QKeySequence ());
   init (tr ("Print"), "editor_file:print", QKeySequence::Print);
 
   // edit
   init (tr ("Undo"), "editor_edit:undo", QKeySequence::Undo);
   init (tr ("Redo"), "editor_edit:redo", QKeySequence::Redo);
   init (tr ("Copy"), "editor_edit:copy", QKeySequence::Copy);
   init (tr ("Cuy"), "editor_edit:cut", QKeySequence::Cut);
   init (tr ("Paste"), "editor_edit:paste", QKeySequence::Paste);
   init (tr ("Select All"), "editor_edit:select_all", QKeySequence::SelectAll);
   init (tr ("Find and Replace"), "editor_edit:find_replace",
         QKeySequence::Find);
-
   init (tr ("Delete to Start of Word"), "editor_edit:delete_start_word", 
         QKeySequence::DeleteStartOfWord);
   init (tr ("Delete to End of Word"), "editor_edit:delete_end_word", 
         QKeySequence::DeleteEndOfWord);
-  init (tr ("Delete to Start of Line"), "editor_edit:delete_start_line",
-        QKeySequence (Qt::ControlModifier + Qt::SHIFT + Qt::Key_Backspace));
-  init (tr ("Delete to End of Line"), "editor_edit:delete_end_line",
-        QKeySequence (Qt::ControlModifier + Qt::SHIFT + Qt::Key_Delete));
-  init (tr ("Delete Line"), "editor_edit:delete_line", 
-        QKeySequence (Qt::ControlModifier + Qt::SHIFT + Qt::Key_L));
-  init (tr ("Copy Line"), "editor_edit:copy_line",
-        QKeySequence (Qt::ControlModifier + Qt::SHIFT + Qt::Key_C));
-  init (tr ("Cut Line"), "editor_edit:cut_line",
-        QKeySequence (Qt::ControlModifier + Qt::SHIFT + Qt::Key_X));
-  init (tr ("Duplicate Selection/Line"), "editor_edit:duplicate_selection", 
-        QKeySequence (Qt::ControlModifier + Qt::Key_D));
-  init (tr ("Transpose Line"), "editor_edit:transpose_line", 
-        QKeySequence (Qt::ControlModifier + Qt::Key_T));
-  init (tr ("Completion List"), "editor_edit:completion_list",
-        QKeySequence (Qt::ControlModifier + Qt::Key_Space));
+  init (tr ("Delete to Start of Line"), "editor_edit:delete_start_line",  
+        QKeySequence (ctrl_shift + Qt::Key_Backspace));
+  init (tr ("Delete to End of Line"), "editor_edit:delete_end_line",  
+        QKeySequence (ctrl_shift + Qt::Key_Delete));
+  init (tr ("Delete Line"), "editor_edit:delete_line",  
+        QKeySequence (ctrl_shift + Qt::Key_L));
+  init (tr ("Copy Line"), "editor_edit:copy_line",  
+        QKeySequence (ctrl_shift + Qt::Key_C));
+  init (tr ("Cut Line"), "editor_edit:cut_line",  
+        QKeySequence (ctrl_shift + Qt::Key_X));
+  init (tr ("Duplicate Selection/Line"), "editor_edit:duplicate_selection",  
+        QKeySequence (ctrl + Qt::Key_D));
+  init (tr ("Transpose Line"), "editor_edit:transpose_line",  
+        QKeySequence (ctrl + Qt::Key_T));
+  init (tr ("Completion List"), "editor_edit:completion_list",  
+        QKeySequence (ctrl + Qt::Key_Space));
 
-  init (tr ("Comment Selection"), "editor_edit:comment_selection",
-        QKeySequence (Qt::ControlModifier + Qt::Key_R));
-  init (tr ("Uncomment Selection"), "editor_edit:uncomment_selection", 
-        QKeySequence (Qt::SHIFT + Qt::ControlModifier + Qt::Key_R));
-  init (tr ("Uppercase Selection"), "editor_edit:upper_case",
-        QKeySequence (Qt::ControlModifier + Qt::Key_U));
-  init (tr ("Lowercase Selection"), "editor_edit:lower_case",
-        QKeySequence (Qt::ControlModifier + Qt::AltModifier + Qt::Key_U));
-  init (tr ("Indent Selection"), "editor_edit:indent_selection", 
-        QKeySequence (Qt::ControlModifier + Qt::Key_Tab));
-  init (tr ("Unindent Selection"), "editor_edit:unindent_selection",
-        QKeySequence (Qt::SHIFT + Qt::ControlModifier + Qt::Key_Tab));
+  init (tr ("Comment Selection"), "editor_edit:comment_selection",  
+        QKeySequence (ctrl + Qt::Key_R));
+  init (tr ("Uncomment Selection"), "editor_edit:uncomment_selection",  
+        QKeySequence (ctrl_shift + Qt::Key_R));
+  init (tr ("Uppercase Selection"), "editor_edit:upper_case",  
+        QKeySequence (ctrl + Qt::Key_U));
+  init (tr ("Lowercase Selection"), "editor_edit:lower_case",  
+        QKeySequence (ctrl_alt + Qt::Key_U));
 
-  init (tr ("Goto Line"), "editor_edit:goto_line",
-        QKeySequence (Qt::ControlModifier+ Qt::Key_G));
+#if defined (Q_OS_MAC)
+  init (tr ("Indent Selection"), "editor_edit:indent_selection",  
+        QKeySequence (prefix + Qt::Key_Tab));
+  init (tr ("Unindent Selection"), "editor_edit:unindent_selection",  
+        QKeySequence (prefix + Qt::ShiftModifier + Qt::Key_Tab));
+#else
+  init (tr ("Indent Selection"), "editor_edit:indent_selection",  
+        QKeySequence (ctrl + Qt::Key_Tab));
+  init (tr ("Unindent Selection"), "editor_edit:unindent_selection",  
+        QKeySequence (ctrl_shift + Qt::Key_Tab));
+#endif
+
+  init (tr ("Goto Line"), "editor_edit:goto_line",  
+        QKeySequence (ctrl + Qt::Key_G));
   init (tr ("Toggle Bookmark"), "editor_edit:toggle_bookmark",
-        QKeySequence (Qt::Key_F7));
+        QKeySequence (prefix + Qt::Key_F7));
   init (tr ("Next Bookmark"), "editor_edit:next_bookmark",
-        QKeySequence (Qt::Key_F2));
+        QKeySequence (prefix + Qt::Key_F2));
   init (tr ("Previous Bookmark"), "editor_edit:previous_bookmark",
-        QKeySequence (Qt::SHIFT + Qt::Key_F2));
+        QKeySequence (prefix + Qt::SHIFT + Qt::Key_F2));
   init (tr ("Remove All Bookmark"), "editor_edit:remove_bookmark",
         QKeySequence ());
 
   init (tr ("Preferences"), "editor_edit:preferences", QKeySequence ());
   init (tr ("Styles Preferences"), "editor_edit:styles_preferences",
         QKeySequence ());
 
   // view
   init (tr ("Zoom In"), "editor_view:zoom_in", QKeySequence::ZoomIn);
   init (tr ("Zoom Out"), "editor_view:zoom_out", QKeySequence::ZoomOut);
-  init (tr ("Zoom Normal"), "editor_view:zoom_normal",  QKeySequence (Qt::ControlModifier + Qt::AltModifier + Qt::Key_0));
+#if defined (Q_OS_MAC)
+  init (tr ("Zoom Normal"), "editor_view:zoom_normal",
+        QKeySequence (ctrl + Qt::Key_Underscore));
+#else
+  init (tr ("Zoom Normal"), "editor_view:zoom_normal",
+        QKeySequence (ctrl_alt + Qt::Key_0));
+#endif
 
   // debug
   init (tr ("Toggle Breakpoint"), "editor_debug:toggle_breakpoint",
         QKeySequence ());
   init (tr ("Next Breakpoint"), "editor_debug:next_breakpoint",
         QKeySequence ());
   init (tr ("Previous Breakpoint"), "editor_debug:previous_breakpoint",
         QKeySequence ());
   init (tr ("Remove All Breakpoints"), "editor_debug:remove_breakpoints",
         QKeySequence ());
 
   // run
-  init (tr ("Run File"), "editor_run:run_file", QKeySequence (Qt::Key_F5));
-  init (tr ("Run Selection"), "editor_run:run_selection", QKeySequence (Qt::Key_F9));
+  init (tr ("Run File"), "editor_run:run_file", 
+        QKeySequence (prefix + Qt::Key_F5) );
+  init (tr ("Run Selection"), "editor_run:run_selection", 
+        QKeySequence (prefix + Qt::Key_F9) );
 
   // help
   init (tr ("Help on Keyword"), "editor_help:help_keyword", QKeySequence::HelpContents);
   init (tr ("Document on Keyword"), "editor_help:doc_keyword", QKeySequence (Qt::SHIFT + Qt::Key_F1));
 }
 
 void
 shortcut_manager::init (QString description, QString key, QKeySequence def_sc)
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -93,16 +93,27 @@ object) relevant global values before an
 #include "symtab.h"
 #include "token.h"
 #include "toplev.h"
 #include "utils.h"
 #include "variables.h"
 #include <oct-parse.h>
 #include <oct-gperf.h>
 
+// FIXME: with bison 3.x, OCTAVE_STYPE appears in the generated
+// oct-parse.h file, but there is no definition for YYSTYPE, which is
+// needed by the code that is generated by flex.  I can't seem to find a
+// way to tell flex to use OCTAVE_STYPE instead of YYSTYPE in the code
+// it generates, or to tell bison to provide the definition of YYSTYPE
+// in the generated oct-parse.h file.
+
+#if defined (OCTAVE_STYPE_IS_DECLARED) && ! defined YYSTYPE
+#define YYSTYPE OCTAVE_STYPE
+#endif
+
 #if defined (GNULIB_NAMESPACE)
 // Calls to the following functions appear in the generated output from
 // flex without the namespace tag.  Redefine them so we will use them
 // via the gnulib namespace.
 #define fprintf GNULIB_NAMESPACE::fprintf
 #define fwrite GNULIB_NAMESPACE::fwrite
 #define isatty GNULIB_NAMESPACE::isatty
 #define malloc GNULIB_NAMESPACE::malloc
diff --git a/libinterp/parse-tree/module.mk b/libinterp/parse-tree/module.mk
--- a/libinterp/parse-tree/module.mk
+++ b/libinterp/parse-tree/module.mk
@@ -85,25 +85,30 @@ PARSE_TREE_SRC = \
 ## oct-gperf.h file.
 parse-tree/oct-gperf.h: parse-tree/octave.gperf
 	$(GPERF) -t -C -D -G -L C++ -Z octave_kw_hash $< > $@-t1
 	$(SED) 's,lookup\[,gperf_lookup[,' < $@-t1 > $@-t
 	mv $@-t $@
 	rm -f $@-t1
 
 parse-tree/oct-parse.yy: parse-tree/oct-parse.in.yy
+	case "$(BISON_API_PREFIX_DECL_STYLE)" in \
+	  *api*) api_prefix_decl='%define api.prefix "octave-"'; ;; \
+	  *name*) api_prefix_decl='%name-prefix="octave_"'; ;; \
+	esac; \
 	case "$(BISON_PUSH_PULL_DECL_STYLE)" in \
-          *quote*) quote='"' ;; \
+	  *quote*) quote='"' ;; \
 	  *) quote="" ;; \
-        esac; \
-        case "$(BISON_PUSH_PULL_DECL_STYLE)" in \
-          *dash*) decl="%define api.push-pull $${quote}both$${quote}"; ;; \
-          *underscore*) decl="%define api.push_pull $${quote}both$${quote}"; ;; \
-        esac; \
-	$(SED) "s/%PUSH_PULL_DECL%/$$decl/" $< > $@-t
+	esac; \
+	case "$(BISON_PUSH_PULL_DECL_STYLE)" in \
+	  *dash*) push_pull_decl="%define api.push-pull $${quote}both$${quote}"; ;; \
+	  *underscore*) push_pull_decl="%define api.push_pull $${quote}both$${quote}"; ;; \
+	esac; \
+	$(SED) -e "s/%PUSH_PULL_DECL%/$$push_pull_decl/" \
+	       -e "s/%API_PREFIX_DECL%/$$api_prefix_decl/" $< > $@-t
 	mv $@-t $@
 
 noinst_LTLIBRARIES += \
   parse-tree/libparse-tree.la \
   parse-tree/libparser.la
 
 parse_tree_libparse_tree_la_SOURCES = $(PARSE_TREE_SRC)
 parse_tree_libparse_tree_la_CPPFLAGS = $(liboctinterp_la_CPPFLAGS)
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -126,20 +126,17 @@ static void yyerror (octave_base_parser&
 
 // Bison declarations.
 
 // The grammar currently has 14 shift/reduce conflicts.  Ensure that
 // we notice if that number changes.
 
 %expect 14
 
-// Don't add spaces around the = here; it causes some versions of
-// bison to fail to properly recognize the directive.
-
-%name-prefix="octave_"
+%API_PREFIX_DECL%
 
 // We are using the pure parser interface and the reentrant lexer
 // interface but the Octave parser and lexer are NOT properly
 // reentrant because both still use many global variables.  It should be
 // safe to create a parser object and call it while anotehr parser
 // object is active (to parse a callback function while the main
 // interactive parser is waiting for input, for example) if you take
 // care to properly save and restore (typically with an unwind_protect
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -378,16 +378,40 @@ AC_DEFUN([OCTAVE_CHECK_QFONT_MONOSPACE],
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_decl_qfont_monospace = yes; then
     AC_DEFINE(HAVE_QFONT_MONOSPACE, 1,
       [Define to 1 if Qt provides QFont::Monospace.])
   fi
 ])
 dnl
+dnl Check whether Qt provides QFont::ForceIntegerMetrics
+dnl
+AC_DEFUN([OCTAVE_CHECK_QFONT_FORCE_INTEGER_METRICS], [
+  AC_CACHE_CHECK([whether Qt provides QFont::ForceIntegerMetrics],
+    [octave_cv_decl_qfont_force_integer_metrics],
+    [AC_LANG_PUSH(C++)
+    ac_octave_save_CPPFLAGS="$CPPFLAGS"
+    CPPFLAGS="$QT_CPPFLAGS $CPPFLAGS"
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+        #include <QFont>
+        ]], [[
+        QFont::StyleStrategy strategy = QFont::ForceIntegerMetrics;
+        ]])],
+      octave_cv_decl_qfont_force_integer_metrics=yes,
+      octave_cv_decl_qfont_force_integer_metrics=no)
+    CPPFLAGS="$ac_octave_save_CPPFLAGS"
+    AC_LANG_POP(C++)
+  ])
+  if test $octave_cv_decl_qfont_force_integer_metrics = yes; then
+    AC_DEFINE(HAVE_QFONT_FORCE_INTEGER_METRICS, 1,
+      [Define to 1 if Qt provides QFont::ForceIntegerMetrics.])
+  fi
+])
+dnl
 dnl Check whether Qscintilla SetPlaceholderText function exists.
 dnl FIXME: This test uses a version number.  It potentially could
 dnl        be re-written to actually call the function, but is it worth it?
 dnl
 AC_DEFUN([OCTAVE_CHECK_FUNC_SETPLACEHOLDERTEXT], [
   AC_CACHE_CHECK([whether Qt has SetPlaceholderText function],
     [octave_cv_func_setplaceholdertext],
     [AC_LANG_PUSH(C++)
@@ -1858,16 +1882,59 @@ AC_DEFUN([OCTAVE_PROG_BISON], [
   AC_PROG_YACC
 
   case "`$YACC --version`" in
     *bison*) tmp_have_bison=yes ;;
     *) tmp_have_bison=no ;;
   esac
 
   if test $tmp_have_bison = yes; then
+    AC_CACHE_CHECK([syntax of bison api.prefix (or name-prefix) declaration],
+                   [octave_cv_bison_api_prefix_decl_style], [
+      style="api name"
+      for s in $style; do
+        if test $s = "api"; then
+          def='%define api.prefix "foo_"'
+        else
+          def='%name-prefix="foo_"'
+        fi
+        cat << EOF > conftest.yy
+$def
+%start input
+%%
+input:;
+%%
+EOF
+        $YACC conftest.yy > /dev/null 2>&1
+        ac_status=$?
+        if test $ac_status -eq 0; then
+          octave_cv_bison_api_prefix_decl_style="$s"
+          break
+        fi
+        if test $ac_status -eq 0; then
+          break
+        fi
+      done
+      rm -f conftest.yy y.tab.h y.tab.c
+      ])
+  fi
+
+  AC_SUBST(BISON_API_PREFIX_DECL_STYLE, $octave_cv_bison_api_prefix_decl_style)
+
+  if test -z "$octave_cv_bison_api_prefix_decl_style"; then
+    YACC=
+    warn_bison_api_prefix_decl_style="
+
+I wasn't able to find a suitable style for declaring the api prefix
+in a bison input file so I'm disabling bison.
+"
+    OCTAVE_CONFIGURE_WARNING([warn_bison_api_prefix_decl_style])
+  fi
+
+  if test $tmp_have_bison = yes; then
     AC_CACHE_CHECK([syntax of bison push/pull declaration],
                    [octave_cv_bison_push_pull_decl_style], [
       style="dash underscore"
       quote="noquote quote"
       for s in $style; do
         for q in $quote; do
           if test $s = "dash"; then
             def="%define api.push-pull"
diff --git a/scripts/gui/waitforbuttonpress.m b/scripts/gui/waitforbuttonpress.m
--- a/scripts/gui/waitforbuttonpress.m
+++ b/scripts/gui/waitforbuttonpress.m
@@ -13,17 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} waitforbuttonpress ()
-## @deftypefnx {Function File} {@var{a} =} waitforbuttonpress ()
+## @deftypefnx {Function File} {@var{b} =} waitforbuttonpress ()
 ## Wait for mouse click or key press over the current figure window.
 ##
 ## The return value of @var{b} is 0 if a mouse button was pressed or 1 if a
 ## key was pressed.
 ## @seealso{waitfor, ginput, kbhit}
 ## @end deftypefn
 
 ## The original version of this code bore the copyright
diff --git a/scripts/statistics/base/statistics.m b/scripts/statistics/base/statistics.m
--- a/scripts/statistics/base/statistics.m
+++ b/scripts/statistics/base/statistics.m
@@ -56,32 +56,42 @@ function stats = statistics (x, dim)
 
   if (sz(dim) < 2)
     error ("statistics: dimension of X is too small (<2)");
   endif
 
   emp_inv = quantile (x, [0.25; 0.5; 0.75], dim, 7);
 
   stats = cat (dim, min (x, [], dim), emp_inv, max (x, [], dim), mean (x, dim),
-               std (x, [], dim), skewness (x, dim), kurtosis (x, dim));
+               std (x, [], dim), skewness (x, [], dim), kurtosis (x, [], dim));
 
 endfunction
 
 
 %!test
 %! x = rand (7,5);
 %! s = statistics (x);
 %! assert (min (x), s(1,:), eps);
 %! assert (median (x), s(3,:), eps);
 %! assert (max (x), s(5,:), eps);
 %! assert (mean (x), s(6,:), eps);
 %! assert (std (x), s(7,:), eps);
 %! assert (skewness (x), s(8,:), eps);
 %! assert (kurtosis (x), s(9,:), eps);
 
+%! x = rand (7,5);
+%! s = statistics (x, 2);
+%! assert (min (x, [], 2), s(:,1), eps);
+%! assert (median (x, 2), s(:,3), eps);
+%! assert (max (x, [], 2), s(:,5), eps);
+%! assert (mean (x, 2), s(:,6), eps);
+%! assert (std (x, [], 2), s(:,7), eps);
+%! assert (skewness (x, [], 2), s(:,8), eps);
+%! assert (kurtosis (x, [], 2), s(:,9), eps);
+
 %% Test input validation
 %!error statistics ()
 %!error statistics (1, 2, 3)
 %!error statistics (['A'; 'B'])
 %!error statistics (1, ones (2,2))
 %!error statistics (1, 1.5)
 %!error statistics (1, 0)
 %!error statistics (1, 3)
