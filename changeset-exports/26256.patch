# HG changeset patch
# User Rik <rik@octave.org>
# Date 1545075419 28800
#      Mon Dec 17 11:36:59 2018 -0800
# Node ID d8ebeb1a82eae864211445fe46ab2ee81c9c5030
# Parent  36b96226107cbe072ba5a5d572068a0fc2558529
movfun.m: Change default nancond property value to "includenan" for Matlab compatibility.

* movfun.m: Change documentation to note default for "nancond" property is
"includenan".  Document that "omitnan" value is not yet implemented.
Change default value in InputParser to "includenan".  Issue a warning if
user tries "omitnan" value.  Add %!warning BIST test.

diff --git a/scripts/signal/movfun.m b/scripts/signal/movfun.m
--- a/scripts/signal/movfun.m
+++ b/scripts/signal/movfun.m
@@ -124,19 +124,20 @@
 ##
 ## @end table
 ##
 ## Note that for some of these choices, the window size at the boundaries is
 ## not the same as for the central part, and @var{fcn} must work in these
 ## cases.
 ##
 ## @item @qcode{"nancond"}
-## Controls whether @code{NaN} or @code{NA} values should be excluded (value:
-## @qcode{"omitnan"}), or included (value: @qcode{"includenan"}) in the
-## arguments passed to @var{fcn}.  The default is @qcode{"omitnan"}.
+## Controls whether @code{NaN} or @code{NA} values should be included (value:
+## @qcode{"includenan"}), or excluded (value: @qcode{"omitnan"}), from the data
+## passed to @var{fcn}.  The default is @qcode{"includenan"}.  Caution:
+## The @qcode{"omitnan"} option is not yet implemented.
 ##
 ## @item @qcode{"outdim"}
 ## A row vector that selects which dimensions of the calculation will appear
 ## in the output @var{y}.  This is only useful when @var{fcn} returns an
 ## N-dimensinoal array in @w{Format 1}.  The default is to return all output
 ## dimensions.
 ##
 ## @end table
@@ -171,35 +172,29 @@ function y = movfun (fcn, x, wlen, varar
 
   ## Parse input arguments
   parser = inputParser ();
   parser.FunctionName = "movfun";
   parser.addParamValue ("Endpoints", "shrink", ...
     @(x) any (strcmpi (x, valid_bc)) || (isscalar (x) && isnumeric (x)));
   parser.addParamValue ("dim", [], ...
     @(d) isempty (d) || (isscalar (d) && isindex (d, ndims (x))));
-  parser.addParamValue ("nancond", "omitnan", ...
-    @(x) any (strcmpi (x, {"omitnan", "includenan"})));
+  parser.addParamValue ("nancond", "includenan", ...
+    @(x) any (strcmpi (x, {"includenan", "omitnan"})));
   parser.addParamValue ("outdim", [], ...
     @(d) isempty (d) || (isvector (d) && isindex (d)));
 
   parser.parse (varargin{:});
   bc      = parser.Results.Endpoints;   # boundary condition
   dim     = parser.Results.dim;         # dimension to be used as input
   nancond = parser.Results.nancond;     # whether NaN are ignored or not
   outdim  = parser.Results.outdim;      # selected output dimension of fcn
   clear parser
   ## End parse input arguments
 
-  ## If dim was not provided find the first non-singleton dimension.
-  szx = size (x);
-  if (isempty (dim))
-    (dim = find (szx > 1, 1)) || (dim = 1);
-  endif
-
   ## Window length validation
   if (! (isnumeric (wlen) && all (wlen >= 0) && fix (wlen) == wlen))
     error ("Octave:invalid-input-arg",
            "movfun: WLEN must be a scalar or 2-element array of integers >= 0");
   endif
   if (isscalar (wlen))
     ## Check for proper window length
     if (wlen == 1)
@@ -207,26 +202,37 @@ function y = movfun (fcn, x, wlen, varar
     endif
   elseif (numel (wlen) == 2)
     ## FIXME: Any further tests needed to validate form: wlen = [nb, na] ???
   else
     error ("Octave:invalid-input-arg",
            "movfun: WLEN must be a scalar or 2-element array of integers >= 0");
   endif
 
+  ## If dim was not provided find the first non-singleton dimension.
+  szx = size (x);
+  if (isempty (dim))
+    (dim = find (szx > 1, 1)) || (dim = 1);
+  endif
+
   ## Check that array is longer than WLEN at dimension DIM.  At least one full
   ## window must fit.  Function max is used to include the case when WLEN is an
   ## array.
   ## FIXME: Consider using bc to decide what to do here.
   if (max (wlen) > szx(dim))
       error ("Octave:invalid-input-arg", ...
              "movfun: window length WLEN (%d) must be shorter than length along DIM%d (%d)", ...
              max (wlen), dim, szx(dim));
   endif
 
+  omitnan = strcmpi (nancond, "omitnan");
+  if (omitnan)
+    warning ('movfun: "omitnan" is not yet implemented, using "includenan"');
+  endif
+
   ## Move the desired dim to the 1st dimension
   nd    = length (szx);                  # number of dimensions
   dperm = [dim, 1:(dim-1), (dim+1):nd];  # permutation of dimensions
   x     = permute (x, dperm);            # permute dim to first dimensions
   ncols = prod (szx(dperm(2:end)));      # rest dimensions as single column
   N     = szx(dperm(1));                 # length of dim
   x     = reshape (x, N, ncols);         # reshape input
 
@@ -615,11 +621,13 @@ endfunction
 %!error <WLEN must be . 1> movfun (@min, 1, 1)
 %!error <WLEN must be a scalar or 2-element array> movfun (@min, 1, [1, 2, 3])
 %!error <WLEN \(3\) must be shorter than length along DIM1 \(1\)>
 %! movfun (@min, 1, 3);
 %!error <WLEN \(4\) must be shorter than length along DIM1 \(1\)>
 %! movfun (@min, 1, [4, 1]);
 %!error <WLEN \(5\) must be shorter than length along DIM1 \(1\)>
 %! movfun (@min, 1, [1, 5]);
+%!warning <"omitnan" is not yet implemented>
+%! movfun (@min, 1:3, 3, "nancond", "omitnan");
 ## FIXME: This test is commented out until OUTDIM validation is clarified.
 %!#error <OUTDIM \(5\) is larger than largest available dimension \(3\)>
 %! movfun (@min, ones (6,3,4), 3, "outdim", 5);
