# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1375924684 18000
#      Wed Aug 07 20:18:04 2013 -0500
# Node ID 7fb4461997aa212b9e44397351c7c0eb7d78f32b
# Parent  e3870f594d8b9ee68fa81a53e5b58684c388ae95
Adjust history window copy/evaluate and remove carriage returns (bug #39722)

* history-dock-widget.cc
(history_dock_widget::handle_contextmenu_copy): Add prev_valid_row variable
and only add carriage-return between valid lines of text.
(history_dock_widget::handle_contextmenu_evaluate): Remove "\n" from end of
line sent to Octave core.
(history_dock_widget::handle_contextmenu_create_script) Add prev_valid_row
variable and only add carriage-return between valid lines of text.
(history_dock_widget::handle_double_click) Remove "\n" from end of line sent to
Octave core.
(history_dock_widget::pasteClipboard) Format consistent with elsewhere.

diff --git a/libgui/src/history-dock-widget.cc b/libgui/src/history-dock-widget.cc
--- a/libgui/src/history-dock-widget.cc
+++ b/libgui/src/history-dock-widget.cc
@@ -100,58 +100,70 @@ void history_dock_widget::ctxMenu(const 
 }
 
 void history_dock_widget::handle_contextmenu_copy(bool)
 {
   QString text;
   QItemSelectionModel *selectionModel = _history_list_view->selectionModel();
   QModelIndexList rows = selectionModel->selectedRows();
   QModelIndexList::iterator it;
-  for (it=rows.begin() ; it != rows.end(); it++) {
-    if ((*it).isValid()) {
-      text += (*it).data().toString()+"\n";
+  bool prev_valid_row = false;
+  for (it = rows.begin(); it != rows.end(); it++)
+    {
+      if ((*it).isValid())
+        {
+          if (prev_valid_row)
+            text += "\n";
+          text += (*it).data().toString();
+          prev_valid_row = true;
+        }
     }
-  }
   QApplication::clipboard()->setText(text);
 }
 
 void history_dock_widget::handle_contextmenu_evaluate(bool)
 {
   QItemSelectionModel *selectionModel = _history_list_view->selectionModel();
   QModelIndexList rows = selectionModel->selectedRows();
   QModelIndexList::iterator it;
-  for (it=rows.begin() ; it != rows.end(); it++) {
-    if ((*it).isValid()) {
-      emit command_double_clicked ((*it).data().toString()+"\n");
+  for (it = rows.begin() ; it != rows.end(); it++)
+    {
+      if ((*it).isValid())
+        emit command_double_clicked ((*it).data().toString());
     }
-  }
 }
 
 void
 history_dock_widget::handle_contextmenu_create_script (bool)
 {
   QString text;
   QItemSelectionModel *selectionModel = _history_list_view->selectionModel ();
   QModelIndexList rows = selectionModel->selectedRows ();
 
+  bool prev_valid_row = false;
   for (QModelIndexList::iterator it = rows.begin (); it != rows.end (); it++)
     {
       if ((*it).isValid ())
-        text += (*it).data().toString() + "\n";
+        {
+          if (prev_valid_row)
+            text += "\n";
+          text += (*it).data().toString();
+          prev_valid_row = true;
+        }
     }
 
   if (text.length () > 0)
     emit command_create_script (text);
 }
 
 
 void
 history_dock_widget::handle_double_click (QModelIndex modelIndex)
 {
-  emit command_double_clicked (modelIndex.data().toString()+"\n");
+  emit command_double_clicked (modelIndex.data().toString());
 }
 
 void
 history_dock_widget::set_history (const QStringList& hist)
 {
   _history_model->setStringList (hist);
   _history_list_view->scrollToBottom ();
 }
@@ -190,16 +202,16 @@ history_dock_widget::copyClipboard ()
       clipboard->setText ( _filter_line_edit->selectedText ());
     }
 }
 
 void
 history_dock_widget::pasteClipboard ()
 {
   if(_filter_line_edit->hasFocus ())
-  {
-     QClipboard *clipboard = QApplication::clipboard ();
-     QString str =  clipboard->text ();
-     if (str.length() > 0)
-       _filter_line_edit->insert (str);
-  } 
+    {
+      QClipboard *clipboard = QApplication::clipboard ();
+      QString str =  clipboard->text ();
+      if (str.length() > 0)
+        _filter_line_edit->insert (str);
+    }
 }
 
