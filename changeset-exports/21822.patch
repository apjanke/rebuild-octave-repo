# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1465012305 25200
#      Fri Jun 03 20:51:45 2016 -0700
# Branch stable
# Node ID e56ba70108d37f8977fc9081b8b2deb1e91bc21b
# Parent  1b5285c20e0e2ed7fc7bd3cc8a1d52e3e80e6daa
Fix typos in Java conversion of 32 and 64 bit integers (bug #48107)

* ov-java.cc (unbox): Invoke correct class name java.lang.Integer for 32 bit
integers.  Use correct type signature "J" for 64 bit long integer values.
Add BIST tests.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1338,20 +1338,20 @@ unbox (JNIEnv* jni_env, const octave_val
 
            IF_UNBOX_PRIMITIVE_SCALAR(double, double,   double,        "java/lang/Double",  "(D)V")
       else IF_UNBOX_PRIMITIVE_SCALAR(float,  float,    float,         "java/lang/Float",   "(F)V")
       else IF_UNBOX_PRIMITIVE_SCALAR(bool,   bool,     bool,          "java/lang/Boolean", "(Z)V")
       else IF_UNBOX_PRIMITIVE_SCALAR(int8,   int8_t,   int8_scalar,   "java/lang/Byte",    "(B)V")
       else IF_UNBOX_PRIMITIVE_SCALAR(uint8,  uint8_t,  uint8_scalar,  "java/lang/Byte",    "(B)V")
       else IF_UNBOX_PRIMITIVE_SCALAR(int16,  int16_t,  int16_scalar,  "java/lang/Short",   "(S)V")
       else IF_UNBOX_PRIMITIVE_SCALAR(uint16, uint16_t, uint16_scalar, "java/lang/Short",   "(S)V")
-      else IF_UNBOX_PRIMITIVE_SCALAR(int32,  int32_t,  int32_scalar,  "java/lang/Int",     "(I)V")
-      else IF_UNBOX_PRIMITIVE_SCALAR(uint32, uint32_t, uint32_scalar, "java/lang/Int",     "(I)V")
-      else IF_UNBOX_PRIMITIVE_SCALAR(int64,  int64_t,  int64_scalar,  "java/lang/Long",    "(L)V")
-      else IF_UNBOX_PRIMITIVE_SCALAR(uint64, uint64_t, uint64_scalar, "java/lang/Long",    "(L)V")
+      else IF_UNBOX_PRIMITIVE_SCALAR(int32,  int32_t,  int32_scalar,  "java/lang/Integer", "(I)V")
+      else IF_UNBOX_PRIMITIVE_SCALAR(uint32, uint32_t, uint32_scalar, "java/lang/Integer", "(I)V")
+      else IF_UNBOX_PRIMITIVE_SCALAR(int64,  int64_t,  int64_scalar,  "java/lang/Long",    "(J)V")
+      else IF_UNBOX_PRIMITIVE_SCALAR(uint64, uint64_t, uint64_scalar, "java/lang/Long",    "(J)V")
 
 #undef IF_UNBOX_PRIMITIVE_SCALAR
     }
   else if (val.is_empty ())
     {
       jobj = 0;
       jcls = 0;
       //jcls = jni_env->FindClass ("java/lang/Object");
@@ -2492,19 +2492,23 @@ Return true if @var{x} is a Java object.
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", [90 100 255], 255), 2);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", uint8 ([90 100 255]), uint8 (255)) < 0);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", uint8 ([90 100 128]), uint8 (128)) < 0);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", uint8 ([90 100 127]), uint8 (127)), 2);
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", uint16 ([90 100 128]), uint16 (128)), 2);
 
 ## Check we can create objects that wrap java literals (bug #38821).
 %!testif HAVE_JAVA
-%! assert (class (javaObject ("java.lang.Byte", uint8 (1))), "java.lang.Byte");
-%! assert (class (javaObject ("java.lang.Byte", int8 (1))), "java.lang.Byte");
-%! assert (class (javaObject ("java.lang.Short", uint16 (1))), "java.lang.Short");
-%! assert (class (javaObject ("java.lang.Short", int16 (1))), "java.lang.Short");
+%! assert (class (javaObject ("java.lang.Byte",     uint8 (1))), "java.lang.Byte");
+%! assert (class (javaObject ("java.lang.Byte",      int8 (1))), "java.lang.Byte");
+%! assert (class (javaObject ("java.lang.Short",   uint16 (1))), "java.lang.Short");
+%! assert (class (javaObject ("java.lang.Short",    int16 (1))), "java.lang.Short");
+%! assert (class (javaObject ("java.lang.Integer", uint32 (1))), "java.lang.Integer");
+%! assert (class (javaObject ("java.lang.Integer",  int32 (1))), "java.lang.Integer");
+%! assert (class (javaObject ("java.lang.Long",    uint64 (1))), "java.lang.Long");
+%! assert (class (javaObject ("java.lang.Long",     int64 (1))), "java.lang.Long");
 
 ## Automatic conversion from string cell array into String[] (bug #45290)
 %!testif HAVE_JAVA
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "aaa"), 0)
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "zzz"), 3)
 %! assert (javaMethod ("binarySearch", "java.util.Arrays", {"aaa", "bbb", "ccc", "zzz"}, "hhh") < 0)
 */
