# HG changeset patch
# User Carlo de Falco <carlo.defalco@polimi.it>
# Date 1474991794 -7200
#      Tue Sep 27 17:56:34 2016 +0200
# Node ID 4b7ab10b5c38a9cfc64b1495ce432196c2bcce7c
# Parent  6574e90e8e27f51f14d7370a7b37575133cef396
inputParser clear previous results before new parse (bug #49198)

* scripts/general/inputParser.m(parse) : reset Results before doing a new parse.

diff --git a/scripts/general/inputParser.m b/scripts/general/inputParser.m
--- a/scripts/general/inputParser.m
+++ b/scripts/general/inputParser.m
@@ -367,16 +367,17 @@ classdef inputParser < handle
       if (nargin != 2)
         print_usage ();
       endif
       this.validate_name ("Switch", name);
       this.Switch.(name).def = false;
     endfunction
 
     function parse (this, varargin)
+      this.Results = struct ();
       if (numel (varargin) < numel (this.Required))
         if (this.FunctionName)
           print_usage (this.FunctionName);
         else
           this.error ("inputParser.parse: not enough input arguments");
         endif
       endif
       pnargin = numel (varargin);
@@ -726,8 +727,17 @@ endclassdef
 
 ## FIXME: This somehow works in Matlab
 %!xtest
 %! p = inputParser;
 %! p.addOptional ("op1", "val");
 %! p.addParameter ("line", "tree");
 %! p.parse ("line", "circle");
 %! assert (p.Results, struct ("op1", "val", "line", "circle"));
+
+%!test
+%! p = inputParser;
+%! p.addParameter ("a", []);
+%! p.addParameter ("b", []);
+%! p.parse ("a", 1);
+%! p.parse ("b", 1);
+%! assert (p.Results, struct ("a", [], "b", 1));
+
