# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1281510845 25200
#      Wed Aug 11 00:14:05 2010 -0700
# Node ID 055b958636992185d0a6eec42e5fb0c964e4058a
# Parent  22cd681a4e28a388457f23f375eff8cc671c2382
unique.m: Improve performance by only calculating necessary outputs.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-08-10  Rik <octave@nomad.inbox5.com>
+
+	* set/unique.m: Check whether outputs are used before calculating.
+
 2010-08-10  Rik <octave@nomad.inbox5.com>
 
 	* statistics/base/module.mk, deprecated/module.mk,
 	statistics/base/values.m, deprecated/values.m: Deprecate values.m
 	  
 2010-08-08  Rik <octave@nomad.inbox5.com>
 
 	* miscellaneous/unimplemented.m: Add newlines to format output for
diff --git a/scripts/set/unique.m b/scripts/set/unique.m
--- a/scripts/set/unique.m
+++ b/scripts/set/unique.m
@@ -19,64 +19,63 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} unique (@var{x})
 ## @deftypefnx {Function File} {} unique (@var{x}, "rows")
 ## @deftypefnx {Function File} {} unique (@dots{}, "first")
 ## @deftypefnx {Function File} {} unique (@dots{}, "last")
 ## @deftypefnx {Function File} {[@var{y}, @var{i}, @var{j}] =} unique (@dots{})
 ## Return the unique elements of @var{x}, sorted in ascending order.
-## If @var{x} is a row vector, return a row vector, but if @var{x}
-## is a column vector or a matrix return a column vector.
-## @var{x} can be a cell array of strings.
+## If the input @var{x} is a vector then the output is a also a vector with the
+## same orientation (row or column) as the input.  For a matrix input the 
+## output is always a column vector.  @var{x} may also be a cell array of
+## strings.
 ##
 ## If the optional argument @code{"rows"} is supplied, return the unique
 ## rows of @var{x}, sorted in ascending order.
 ##
 ## If requested, return index vectors @var{i} and @var{j} such that
 ## @code{x(i)==y} and @code{y(j)==x}.
 ##
-## Additionally, one of @code{"first"} or @code{"last"} may be given as
-## an argument.  If @code{"last"} is specified, return the highest
-## possible indices in @var{i}, otherwise, if @code{"first"} is
-## specified, return the lowest.  The default is @code{"last"}.
+## Additionally, if @var{i} is a requested output then one of @code{"first"} or
+## @code{"last"} may be given as an input.  If @code{"last"} is specified, 
+## return the highest possible indices in @var{i}, otherwise, if @code{"first"}
+## is specified, return the lowest.  The default is @code{"last"}.
 ## @seealso{union, intersect, setdiff, setxor, ismember}
 ## @end deftypefn
 
 function [y, i, j] = unique (x, varargin)
 
   if (nargin < 1)
     print_usage ();
   endif
 
   if (nargin > 1)
-
     ## parse options
     if (iscellstr (varargin))
       varargin = unique (varargin);
-      optfirst = strmatch ("first", varargin) > 0;
-      optlast = strmatch ("last", varargin) > 0;
-      optrows = strmatch ("rows", varargin) > 0;
+      optfirst = strmatch ("first", varargin, "exact") > 0;
+      optlast = strmatch ("last", varargin, "exact") > 0;
+      optrows = strmatch ("rows", varargin, "exact") > 0;
       if (optfirst && optlast)
-        error ("unique: cannot specify both \"last\" and \"first\"");
+        error ('unique: cannot specify both "last" and "first"');
       elseif (optfirst + optlast + optrows != nargin-1)
         error ("unique: invalid option");
       endif
     else
       error ("unique: options must be strings");
     endif
 
     if (optrows && iscell (x))
-      warning ("unique: 'rows' is ignored for cell arrays");
+      warning ('unique: "rows" is ignored for cell arrays');
       optrows = false;
     endif
-
   else
-    optfirst = 0;
-    optrows = 0;
+    optfirst = false;
+    optrows = false;
   endif
 
   ## FIXME -- the operations
   ##
   ##   match = (y(1:n-1) == y(2:n));
   ##   y(idx) = [];
   ##
   ## are very slow on sparse matrices.  Until they are fixed to be as
@@ -90,71 +89,82 @@ function [y, i, j] = unique (x, varargin
   if (exist ("issparse"))
     if (issparse (x) && ! optrows && nargout <= 1)
       y = unique ([0; (full (nonzeros (x)))], varargin{:});
       return;
     endif
   endif
 
   if (optrows)
-    n = size (x, 1);
+    n = rows (x);
     dim = 1;
   else
     n = numel (x);
-    dim = (size (x, 1) == 1) + 1;
+    dim = (rows (x) == 1) + 1;
   endif
 
   y = x;
-  if (n < 1)
+  ## Special cases 0 and 1
+  if (n == 0)
     if (! optrows && isempty (x) && any (size (x)))
       if (iscell (y))
         y = cell (0, 1);
       else
         y = zeros (0, 1, class (y));
       endif
     endif
     i = j = [];
     return;
-  elseif (n < 2)
+  elseif (n == 1)
     i = j = 1;
     return;
   endif
 
   if (optrows)
-    [y, i] = sortrows (y);
+    if (nargout > 1)
+      [y, i] = sortrows (y);
+    else
+      y = sortrows (y);
+    endif
     match = all (y(1:n-1,:) == y(2:n,:), 2);
     idx = find (match);
     y(idx,:) = [];
   else
-    if (size (y, 1) != 1)
+    if (! isvector (y))
       y = y(:);
     endif
-    [y, i] = sort (y);
+    if (nargout > 1)
+      [y, i] = sort (y);
+    else
+      y = sort (y);
+    endif
     if (iscell (y))
       match = strcmp (y(1:n-1), y(2:n));
     else
       match = (y(1:n-1) == y(2:n));
     endif
     idx = find (match);
     y(idx) = [];
   endif
 
-  if (nargout >= 3)
+  if (isargout (3))
     j = i;
     if (dim == 1)
       j(i) = cumsum ([1; !match]);
     else
       j(i) = cumsum ([1, !match]);
     endif
   endif
 
-  if (optfirst)
-    i(idx+1) = [];
-  else
-    i(idx) = [];
+  if (isargout (2))
+    if (optfirst)
+      i(idx+1) = [];
+    else
+      i(idx) = [];
+    endif
   endif
 
 endfunction
 
 %!assert(unique([1 1 2; 1 2 1; 1 1 2]),[1;2])
 %!assert(unique([1 1 2; 1 0 1; 1 1 2],'rows'),[1 0 1; 1 1 2])
 %!assert(unique([]),[])
 %!assert(unique([1]),[1])
