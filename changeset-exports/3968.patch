# HG changeset patch
# User jwe
# Date 1025550961 0
#      Mon Jul 01 19:16:01 2002 +0000
# Node ID cef0ea4d1b3abe3dd394e76de1b895a3e36bbf4b
# Parent  15a0aa0b6c18614ae33a810382da92f0d3e599e8
[project @ 2002-07-01 19:16:01 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2002-07-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* input.cc (initialize_command_input): Include (, ), {, and } as
+	word break characters.
+
+	* variables.cc (looks_like_struct): Don't evaluate text if it is a
+	function.
+
+	* symtab.h (symbol_record::is_function): Also return true if
+	symbol is a text function or a mapper function.
+
 2002-06-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* defaults.cc (loadpath): Warn if loadpath doesn't contain
 	leading, trailing, or doubled colon.
 
 	* pt-decl.cc (tree_static_command::eval, tree_global_command::eval):
 	Call error for any non-zero value of error_state.
 	* pt-select.cc (tree_if_command::eval): Likewise.
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -478,17 +478,17 @@ initialize_command_input (void)
   // If we are using readline, this allows conditional parsing of the
   // .inputrc file.
 
   command_editor::set_name ("Octave");
 
   // XX FIXME XXX -- this needs to include a comma too, but that
   // causes trouble for the new struct element completion code.
 
-  static char *s = "\t\n !\"\'*+-/:;<=>[\\]^`~";
+  static char *s = "\t\n !\"\'*+-/:;<=>(){}[\\]^`~";
 
   command_editor::set_basic_word_break_characters (s);
 
   command_editor::set_completer_word_break_characters (s);
 
   command_editor::set_basic_quote_characters ("\"");
 
   command_editor::set_completion_function (generate_completion);
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -87,16 +87,20 @@ private:
       { return (symbol_type & symbol_record::BUILTIN_CONSTANT); }
 
     bool is_variable (void) const
       {
 	return (symbol_type & symbol_record::USER_VARIABLE
 		|| symbol_type & symbol_record::BUILTIN_VARIABLE);
       }
 
+    // It's not necessary to check for TEXT_FUNCTION and MAPPER_FUNCTION
+    // here.  Those tags are just used as additional qualifiers for
+    // the other types of functions.
+
     bool is_function (void) const
       {
 	return (symbol_type & symbol_record::USER_FUNCTION
 		|| symbol_type & symbol_record::DLD_FUNCTION
 		|| symbol_type & symbol_record::BUILTIN_FUNCTION);
       }
 
     bool is_user_variable (void) const
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -297,21 +297,30 @@ generate_struct_completions (const std::
     names = tmp.map_keys ();
 
   return names;
 }
 
 bool
 looks_like_struct (const std::string& text)
 {
-  int parse_status;
+  bool retval = false;
+
+  symbol_record *sr = curr_sym_tab->lookup (text);
 
-  octave_value tmp = eval_string (text, true, parse_status);
+  if (sr && ! sr->is_function ())
+    {
+      int parse_status;
 
-  return (tmp.is_defined () && tmp.is_map ());
+      octave_value tmp = eval_string (text, true, parse_status);
+
+      retval = (tmp.is_defined () && tmp.is_map ());
+    }
+
+  return retval;
 }
 
 DEFUN (is_global, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} is_global (@var{name})\n\
 Return 1 if @var{name} is globally visible.  Otherwise, return 0.  For\n\
 example,\n\
 \n\
