# HG changeset patch
# User jwe
# Date 832140717 0
#      Wed May 15 06:11:57 1996 +0000
# Node ID a24158362f9f3634c1a1fcb3e0b1dcf18e9aef2d
# Parent  88a4d35804273bc9bca7795ad11a10eab4fab79b
[project @ 1996-05-15 06:09:42 by jwe]

diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -87,44 +87,44 @@ INCLUDES := arith-ops.h builtins.h data.
 	mappers.h oct-fstrm.h oct-hist.h oct-iostrm.h \
 	oct-map.h oct-obj.h oct-prcstrm.h oct-procbuf.h \
 	oct-stdstrm.h oct-stream.h oct-strstrm.h pager.h parse.h \
 	pathlen.h pr-output.h procstream.h pt-base.h pt-cmd.h \
 	pt-const.h pt-exp-base.h pt-exp.h pt-fcn.h pt-fvc-base.h \
 	pt-fvc.h pt-mat.h pt-misc.h pt-mvr-base.h pt-mvr.h \
 	pt-plot.h pt-pr-code.h pt-walk.h sighandlers.h symtab.h \
 	syscalls.h sysdep.h systime.h syswait.h token.h toplev.h \
-	unwind-prot.h user-prefs.h utils.h variables.h version.h \
+	unwind-prot.h utils.h variables.h version.h \
 	xdiv.h xpow.h Map.h SLStack.h Stack.h
 
 TI_SRC := Array-os.cc Array-tc.cc Map-tc.cc \
 	SLList-expr.cc SLList-misc.cc SLList-plot.cc SLList-str.cc \
 	SLList-tc.cc SLList-tm.cc SLStack-i.cc SLStack-pc.cc \
 	SLStack-str.cc SLStack-sym.cc SLStack-tok.cc SLStack-ue.cc \
 	SLStack-ui.cc
 
 TI_OBJ := $(patsubst %.cc, %.o, $(TI_SRC))
 
 TI_PICOBJ := $(TI_OBJ)
 ifdef CXXPICFLAG
   TI_PICOBJ := $(addprefix pic/, $(TI_OBJ))
 endif
 
-SOURCES := arith-ops.cc data.cc dirfns.cc dynamic-ld.cc error.cc \
-	file-io.cc gripes.cc help.cc input.cc lex.l \
+SOURCES := arith-ops.cc data.cc defaults.cc dirfns.cc dynamic-ld.cc \
+	error.cc file-io.cc gripes.cc help.cc input.cc lex.l \
 	load-save.cc mappers.cc oct-fstrm.cc oct-hist.cc oct-iostrm.cc \
 	oct-map.cc oct-obj.cc oct-prcstrm.cc oct-procbuf.cc \
 	oct-stdstrm.cc oct-stream.cc oct-strstrm.cc pager.cc \
 	parse.y pr-output.cc procstream.cc \
 	pt-base.cc pt-cmd.cc pt-const.cc pt-exp-base.cc pt-exp.cc \
 	pt-fcn.cc pt-fvc-base.cc pt-fvc.cc pt-mat.cc pt-misc.cc \
 	pt-mvr-base.cc pt-mvr.cc pt-plot.cc pt-pr-code.cc resource.cc \
 	sighandlers.cc strcasecmp.c strncase.c strfns.cc strftime.c \
 	symtab.cc syscalls.cc sysdep.cc timefns.cc token.cc toplev.cc \
-	unwind-prot.cc user-prefs.cc utils.cc variables.cc xdiv.cc \
+	unwind-prot.cc utils.cc variables.cc xdiv.cc \
 	xpow.cc
 
 TEMPLATE_SRC = Map.cc SLStack.cc
 
 OBJECTS_4 := $(SOURCES)
 OBJECTS_3 := $(patsubst %.l, %.o, $(OBJECTS_4))
 OBJECTS_2 := $(patsubst %.y, %.o, $(OBJECTS_3))
 OBJECTS_1 := $(patsubst %.c, %.o, $(OBJECTS_2))
@@ -324,20 +324,20 @@ dist: parse.cc lex.cc oct-gperf.h
 .PHONY: dist
 
 conf-dist:
 	ln octave.cc Makefile.in ../`cat ../.fname`/src
 .PHONY: conf-dist
 
 # Special rules -- these files need special things to be defined.
 
-defaults.h: ../Makeconf Makefile
+defaults.h: defaults.h.in ../Makeconf Makefile
 	@$(do-subst-default-vals)
 
-oct-conf.h: ../Makeconf Makefile
+oct-conf.h: oct-conf.h.in ../Makeconf Makefile
 	@$(do-subst-config-vals)
 
 oct-gperf.h: octave.gperf
 	@echo "making $@ from $<"
 	@gperf -a -C -E -H octave_kw_hash -g -N octave_kw_lookup -p -t \
 	  $< > $@.tmp
 	@$(top_srcdir)/move-if-change $@.tmp $@
 
diff --git a/src/defaults.h.in b/src/defaults.h.in
--- a/src/defaults.h.in
+++ b/src/defaults.h.in
@@ -19,16 +19,18 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_defaults_h)
 #define octave_defaults_h 1
 
+#include <string>
+
 #ifndef DEFAULT_PAGER
 #define DEFAULT_PAGER %DEFAULT_PAGER%
 #endif
 
 #ifndef OCTAVE_PREFIX
 #define OCTAVE_PREFIX %OCTAVE_PREFIX%
 #endif
 
@@ -107,18 +109,46 @@ Software Foundation, 59 Temple Place - S
 #ifndef CXXLIB_LIST
 #define CXXLIB_LIST %CXXLIB_LIST%
 #endif
 
 #ifndef CXXLIB_PATH
 #define CXXLIB_PATH %CXXLIB_PATH%
 #endif
 
+extern string Voctave_home;
+
+extern string Vbin_dir;
+extern string Vlib_dir;
+extern string Vinfo_dir;
+extern string Varch_lib_dir;
+extern string Vfcn_file_dir;
+
+// The path that will be searched for programs that we execute.
+// (--exec-path path)
+extern string Vexec_path;
+
+// Load path specified on command line.
+// (--path path; -p path)
+extern string Vload_path;
+
+// Name of the editor to be invoked by the edit_history command.
+extern string Veditor;
+
+extern string Vimagepath;
+
+extern string Vlocal_site_defaults_file;
+extern string Vsite_defaults_file;
+
+extern string maybe_add_default_load_path (const string& pathstring);
+
 extern void install_defaults (void);
 
+extern void symbols_of_defaults (void);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -68,17 +68,17 @@ Free Software Foundation, Inc.
 #include "pt-plot.h"
 #include "sysdep.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 // The current working directory.
-static string Vcurrent_directory;
+string Vcurrent_directory;
 
 // Non-zero means follow symbolic links that point to directories just
 // as if they are real directories.
 static int follow_symbolic_links = 1;
 
 // Non-zero means that pwd always give verbatim directory, regardless
 // of symbolic link following.
 static int verbatim_pwd = 1;
@@ -111,19 +111,19 @@ pathname_backup (string& path, int n)
 // Return a pretty pathname.  If the first part of the pathname is the
 // same as $HOME, then replace that with `~'.
 
 string
 polite_directory_format (const string& name)
 {
   string retval;
 
-  size_t len = home_directory.length ();
+  size_t len = Vhome_directory.length ();
 
-  if (len > 1 && home_directory.compare (name, 0, len) == 0
+  if (len > 1 && Vhome_directory.compare (name, 0, len) == 0
       && (name.length () == len || name[len] == '/'))
     {
       retval = "~";
       retval.append (name.substr (len));
     }
   else
     retval = name;
 
@@ -238,62 +238,62 @@ make_absolute (const string& s, const st
 
 // Return a consed string which is the current working directory.
 // FOR_WHOM is the name of the caller for error printing.
 
 string
 get_working_directory (const string& for_whom)
 {
   if (! follow_symbolic_links)
-    the_current_working_directory = "";
+    Vcurrent_directory = "";
 
-  if (the_current_working_directory.empty ())
+  if (Vcurrent_directory.empty ())
     {
-      the_current_working_directory = octave_getcwd ();
+      Vcurrent_directory = octave_getcwd ();
 
-      if (the_current_working_directory.empty ())
+      if (Vcurrent_directory.empty ())
 	warning ("%s: can't find current directory!", for_whom.c_str ());
     }
 
-  return the_current_working_directory;
+  return Vcurrent_directory;
 }
 
 // Do the work of changing to the directory NEWDIR.  Handle symbolic
 // link following, etc.
 
 static int
 change_to_directory (const string& newdir)
 {
   string tmp;
 
   if (follow_symbolic_links)
     {
-      if (the_current_working_directory.empty ())
+      if (Vcurrent_directory.empty ())
 	get_working_directory ("cd_links");
 
-      if (the_current_working_directory.empty ())
+      if (Vcurrent_directory.empty ())
 	tmp = newdir;
       else
-	tmp = make_absolute (newdir, the_current_working_directory);
+	tmp = make_absolute (newdir, Vcurrent_directory);
 
       // Get rid of trailing `/'.
 
       size_t len = tmp.length ();
 
       if (len > 1)
 	{
 	  if (tmp[--len] == '/')
 	    tmp.resize (len);
 	}
 
       if (octave_chdir (tmp) < 0)
 	return 0;
       else
 	{
-	  the_current_working_directory = tmp;
+	  Vcurrent_directory = tmp;
 	  return 1;
 	}
     }
   else
     return (octave_chdir (newdir) < 0) ? 0 : 1;
 }
 
 static int
@@ -332,18 +332,18 @@ users home directory")
       if (dirname.length () > 0
 	  && ! octave_change_to_directory (dirname))
 	{
 	  return retval;
 	}
     }
   else
     {
-      if (home_directory.empty ()
-	  || ! octave_change_to_directory (home_directory))
+      if (Vhome_directory.empty ()
+	  || ! octave_change_to_directory (Vhome_directory))
 	{
 	  return retval;
 	}
     }
 
   string directory = get_working_directory ("cd");
   octave_value *dir = new octave_value (directory);
   bind_builtin_variable ("PWD", dir, 1);
diff --git a/src/dirfns.h b/src/dirfns.h
--- a/src/dirfns.h
+++ b/src/dirfns.h
@@ -27,16 +27,18 @@ Software Foundation, 59 Temple Place - S
 
 #include <string>
 
 extern string polite_directory_format (const string&);
 extern string base_pathname (const string&);
 extern string make_absolute (const string&, const string&);
 extern string get_working_directory (const string&);
 
+extern string Vcurrent_directory;
+
 extern void symbols_of_dirfns (void);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -43,17 +43,17 @@ Software Foundation, 59 Temple Place - S
 #include "pt-const.h"
 #include "pt-exp.h"
 #include "pt-fcn.h"
 #include "pt-fvc.h"
 #include "pt-misc.h"
 #include "pt-mvr.h"
 #include "pt-walk.h"
 #include "pt-pr-code.h"
-#include "user-prefs.h"
+#include "variables.h"
 
 // Nonzero means we're breaking out of a loop or function body.
 extern int breaking;
 
 // Nonzero means we're jumping to the end of a loop.
 extern int continuing;
 
 // Nonzero means we're returning from a function.
@@ -78,17 +78,17 @@ tree_statement::column (void)
 {
   return cmd ? cmd->column () : (expr ? expr->column () : -1);
 }
 
 void
 tree_statement::maybe_echo_code (bool in_function_body)
 {
   if (in_function_body
-      && (user_pref.echo_executing_commands & ECHO_FUNCTIONS))
+      && (Vecho_executing_commands & ECHO_FUNCTIONS))
     {
       tree_print_code tpc (octave_stdout);
 
       accept (tpc);
     }
 }
 
 void
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -63,57 +63,34 @@ Software Foundation, 59 Temple Place - S
 #include "procstream.h"
 #include "pt-const.h"
 #include "pt-misc.h"
 #include "pt-plot.h"
 #include "sighandlers.h"
 #include "sysdep.h"
 #include "toplev.h"
 #include "unwind-prot.h"
-#include "user-prefs.h"
 #include "utils.h"
 #include "variables.h"
 #include "version.h"
 
 // argv[0] for this program.
-string raw_prog_name;
+string Vprogram_invocation_name;
 
 // Cleaned-up name of this program, not including path information.
-string prog_name;
+string Vprogram_name;
 
 // Login name for user running this program.
-string user_name;
+string Vuser_name;
 
 // Name of the host we are running on.
-string host_name;
+string Vhost_name;
 
 // User's home directory.
-string home_directory;
-
-// Guess what?
-string the_current_working_directory;
-
-// The path that will be searched for programs that we execute.
-// (--exec-path path)
-string exec_path;
-
-// Load path specified on command line.
-// (--path path; -p path)
-string load_path;
-
-// Name of the info file specified on command line.
-// (--info-file file)
-string info_file;
-
-// Name of the info reader we'd like to use.
-// (--info-program program)
-string info_prog;
-
-// Name of the editor to be invoked by the edit_history command.
-string editor;
+string Vhome_directory;
 
 // Nonzero means we are using readline.
 // (--no-line-editing)
 #if defined (USE_READLINE)
 int using_readline = 1;
 #else
 int using_readline = 0;
 #endif
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -43,47 +43,29 @@ extern void parse_and_execute (const str
 extern octave_value eval_string (const string&, int print,
 				  int& parse_status);
 
 extern int main_loop (void);
 
 extern void do_octave_atexit (void);
 
 // argv[0] for this program.
-extern string raw_prog_name;
+extern string Vprogram_invocation_name;
 
 // Cleaned-up name of this program, not including path information.
-extern string prog_name;
+extern string Vprogram_name;
 
 // Login name for user running this program.
-extern string user_name;
+extern string Vuser_name;
 
 // Name of the host we are running on.
-extern string host_name;
-
-// User's home directory.
-extern string home_directory;
-
-// Guess what?
-extern string the_current_working_directory;
-
-// The path that will be searched for programs that we execute.
-extern string exec_path;
+extern string Vhost_name;
 
-// Load path specified on command line.
-extern string load_path;
-
-// Name of the info file specified on command line.
-extern string info_file;
-
-// Name of the info reader we'd like to use.
-extern string info_prog;
-
-// Name of the editor to be invoked by the edit_history command.
-extern string editor;
+// Home directory for the current user.
+extern string Vhome_directory;
 
 // Nonzero means we are using readline.
 extern int using_readline;
 
 // Nonzero means we printed messages about reading startup files.
 extern int reading_startup_message_printed;
 
 // Command number, counting from the beginning of this session.
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -53,32 +53,32 @@ LOSE! LOSE!
 extern "C" int strncasecmp (const char*, const char*, size_t);
 #endif
 
 #include "SLStack.h"
 
 #include "oct-cmplx.h"
 #include "str-vec.h"
 
+#include "defaults.h"
 #include "defun.h"
 #include "dir-ops.h"
 #include "dirfns.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "input.h"
 #include "mappers.h"
 #include "oct-hist.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "pathsearch.h"
 #include "sysdep.h"
 #include "toplev.h"
 #include "unwind-prot.h"
-#include "user-prefs.h"
 #include "utils.h"
 #include "variables.h"
 
 // Top level context (?)
 extern jmp_buf toplevel;
 
 // Save a string.
 
@@ -261,17 +261,17 @@ get_fcn_file_names (const string& name, 
 
 string_vector
 get_fcn_file_names (int no_suffix)
 {
   static int num_max = 1024;
 
   string_vector retval (num_max);
 
-  dir_path p (user_pref.loadpath);
+  dir_path p (Vload_path);
 
   string_vector dirs = p.all_directories ();
 
   int len = dirs.length ();
 
   int k = 0;
 
   for (int i = 0; i < len; i++)
@@ -326,17 +326,17 @@ empty_arg (const char *name, int nr, int
 
 // See if the given file is in the path.
 
 string
 search_path_for_file (const string& path, const string& name)
 {
   dir_path p (path);
 
-  return make_absolute (p.find (name), the_current_working_directory);
+  return make_absolute (p.find (name), Vcurrent_directory);
 }
 
 DEFUN (file_in_path, args, ,
   "file_in_path (PATH, NAME)")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
@@ -364,20 +364,20 @@ DEFUN (file_in_path, args, ,
 string
 file_in_path (const string& name, const string& suffix)
 {
   string nm = name;
 
   if (! suffix.empty ())
     nm.append (suffix);
 
-  if (the_current_working_directory.empty ())
+  if (Vcurrent_directory.empty ())
     get_working_directory ("file_in_path");
 
-  return search_path_for_file (user_pref.loadpath, nm);
+  return search_path_for_file (Vload_path, nm);
 }
 
 // See if there is an function file in the path.  If so, return the
 // full path to the file.
 
 string
 fcn_file_in_path (const string& name)
 {
@@ -569,13 +569,47 @@ oct_putenv (const char *var_name, const 
   // Can't free `new_item' because its contained value is now in
   // `environ', but we can free `old_item', since it's been replaced.
 
   delete [] old_item;
 
 #endif
 }
 
+// Check the value of a string variable to see if it it's ok to do
+// something.
+//
+//   return of  1 => always ok.
+//   return of  0 => never ok.
+//   return of -1 => ok, but give me warning (default).
+
+int
+check_preference (const string& var)
+{
+  int pref = -1;
+
+  string val = builtin_string_variable (var);
+
+  if (val.empty ())
+    {
+      double dval = 0;
+      if (builtin_real_scalar_variable (var, dval))
+	pref = NINT (dval);
+    }
+  else
+    {
+      if (val.compare ("yes", 0, 3) == 0
+	  || val.compare ("true", 0, 4) == 0)
+	pref = 1;
+      else if (val.compare ("never", 0, 5) == 0
+	       || val.compare ("no", 0, 2) == 0
+	       || val.compare ("false", 0, 5) == 0)
+	pref = 0;
+    }
+
+  return pref;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -57,15 +57,17 @@ extern string_vector get_fcn_file_names 
 extern int empty_arg (const char *name, int nr, int nc);
 
 extern const char *undo_string_escape (char c);
 
 extern string undo_string_escapes (const string& s);
 
 extern void oct_putenv (const char *, const char *);
 
+extern int check_preference (const string& var);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -125,38 +125,34 @@ extern void bind_builtin_variable (const
 
 extern void bind_builtin_variable (const string&, const octave_value&,
 				   int protect = 0, int eternal = 0,
 				   sv_Function f = (sv_Function) 0,
 				   const string& help = string ());
 
 extern void install_builtin_variables (void);
 
-extern string maybe_add_default_load_path (const string& p);
-
-extern string octave_lib_dir (void);
-extern string octave_arch_lib_dir (void);
-extern string octave_fcn_file_dir (void);
-extern string octave_bin_dir (void);
-extern string default_exec_path (void);
-extern string default_path (void);
-extern string default_info_file (void);
-extern string default_info_prog (void);
-extern string default_editor (void);
-extern string get_local_site_defaults (void);
-extern string get_site_defaults (void);
-
 // Symbol table for symbols at the top level.
 extern symbol_table *top_level_sym_tab;
 
 // Symbol table for the current scope.
 extern symbol_table *curr_sym_tab;
 
 // Symbol table for global symbols.
 extern symbol_table *global_sym_tab;
 
+enum echo_state
+{
+  ECHO_OFF = 0,
+  ECHO_SCRIPTS = 1,
+  ECHO_FUNCTIONS = 2,
+  ECHO_CMD_LINE = 4
+};
+
+extern int Vecho_executing_commands;
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
