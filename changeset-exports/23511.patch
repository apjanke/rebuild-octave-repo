# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1495119204 14400
#      Thu May 18 10:53:24 2017 -0400
# Node ID 232c8d69d9341f9f9ecd90e7af58aae52a9bc72c
# Parent  b0e23bfa9966073143afaddb61c4288985c573e6
manage interpreter instance in interpreter object

Currently it is only possible to have one application or interpreter
object.  Enforce that restriction.

* octave.h, octave.cc (application::the_interpreter): Delete.
(application::application): Ensure only one application is created at
once.
* interpreter.cc, interpreter.h (interpreter::instance):
New static variable.
(interpreter::interpreter): Ensure only one is created at once.
(interpreter::~interpreter): Set instance to nullptr.
(interpreter::the_interpreter): New function.

* interpreter-private.cc, interpreter-private.cc
(__get_interpreter__): Delete.  Replace all uses with
octave::interpreter::the_interpreter.

diff --git a/libinterp/corefcn/interpreter-private.cc b/libinterp/corefcn/interpreter-private.cc
--- a/libinterp/corefcn/interpreter-private.cc
+++ b/libinterp/corefcn/interpreter-private.cc
@@ -22,30 +22,24 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <string>
 
 #include "error.h"
+#include "load-path.h"
 #include "interpreter-private.h"
-#include "octave.h"
+#include "interpreter.h"
 
 namespace octave
 {
-  interpreter& __get_interpreter__ (const std::string& who)
+  load_path& __get_load_path__ (const std::string& who)
   {
-    interpreter *interp = octave::application::the_interpreter ();
+    interpreter *interp = interpreter::the_interpreter ();
 
     if (! interp)
       error ("%s: interpreter context missing", who.c_str ());
 
-    return *interp;
-  }
-
-  load_path& __get_load_path__ (const std::string& who)
-  {
-    interpreter& interp = __get_interpreter__ (who);
-
-    return interp.get_load_path ();
+    return interp->get_load_path ();
   }
 }
diff --git a/libinterp/corefcn/interpreter-private.h b/libinterp/corefcn/interpreter-private.h
--- a/libinterp/corefcn/interpreter-private.h
+++ b/libinterp/corefcn/interpreter-private.h
@@ -22,19 +22,16 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_interpreter_private_h)
 #define octave_interpreter_private_h 1
 
 #include "octave-config.h"
 
 #include <string>
 
-#include "interpreter.h"
-
 namespace octave
 {
-  // Expect these functions to change without warning.
-  extern interpreter& __get_interpreter__ (const std::string& who);
+  class load_path;
 
   extern load_path& __get_load_path__ (const std::string& who);
 }
 
 #endif
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -369,16 +369,22 @@ namespace octave
 
   interpreter::interpreter (application *app_context)
     : m_app_context (app_context), m_evaluator (new tree_evaluator (this)),
       m_load_path (), m_interactive (false), m_read_site_files (true),
       m_read_init_files (m_app_context != 0), m_verbose (false),
       m_inhibit_startup_message (false), m_load_path_initialized (false),
       m_history_initialized (false), m_initialized (false)
   {
+    if (instance)
+      throw std::runtime_error
+        ("only one Octave interpreter object may be active");
+
+    instance = this;
+
     current_evaluator = m_evaluator;
 
     // Matlab uses "C" locale for LC_NUMERIC class regardless of local setting
     setlocale (LC_NUMERIC, "C");
     setlocale (LC_TIME, "C");
     octave::sys::env::putenv ("LC_NUMERIC", "C");
     octave::sys::env::putenv ("LC_TIME", "C");
 
@@ -493,20 +499,23 @@ namespace octave
     // some PKG_ADD files might need --traditional behavior.
 
     if (traditional)
       maximum_braindamage ();
 
     octave_interpreter_ready = true;
   }
 
+  interpreter *interpreter::instance = nullptr;
+
   interpreter::~interpreter (void)
   {
     cleanup ();
 
+    instance = 0;
     current_evaluator = 0;
 
     delete m_evaluator;
   }
 
   // Read the history file unless a command-line option inhibits that.
 
   void interpreter::initialize_history (bool read_history_file)
@@ -929,17 +938,17 @@ namespace octave
               octave::tree_evaluator::reset_debug_state ();
 
             retval = parser.run ();
 
             if (retval == 0)
               {
                 if (parser.stmt_list)
                   {
-                    parser.stmt_list->accept (*current_evaluator);
+                    parser.stmt_list->accept (*m_evaluator);
 
                     octave_quit ();
 
                     if (! octave::application::interactive ())
                       {
                         bool quit = (tree_return_command::returning
                                      || tree_break_command::breaking);
 
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -138,18 +138,24 @@ namespace octave
     }
 
     static void recover_from_exception (void);
 
     static void add_atexit_function (const std::string& fname);
 
     static bool remove_atexit_function (const std::string& fname);
 
+    static interpreter * the_interpreter (void) { return instance; }
+
   private:
 
+    // The interpreter instance;  Currently it is only possible to
+    // have one.
+    static interpreter *instance;
+
     static std::list<std::string> atexit_functions;
 
     void display_startup_message (void) const;
 
     int execute_startup_files (void) const;
 
     int execute_eval_option_code (void);
 
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -399,19 +399,20 @@ namespace octave
     delete m_interpreter;
 
     m_interpreter = 0;
   }
 
   void application::init (void)
   {
     if (instance)
-      warning ("octave::application: application already initialized");
-    else
-      instance = this;
+      throw std::runtime_error
+        ("only one Octave application object may be active");
+
+    instance = this;
 
     string_vector all_args = m_options.all_args ();
 
     set_program_names (all_args[0]);
 
     string_vector remaining_args = m_options.remaining_args ();
 
     std::string code_to_eval = m_options.code_to_eval ();
diff --git a/libinterp/octave.h b/libinterp/octave.h
--- a/libinterp/octave.h
+++ b/libinterp/octave.h
@@ -248,21 +248,16 @@ namespace octave
       return instance ? instance->m_argv : string_vector ();
     }
 
     static bool is_gui_running (void)
     {
       return instance ? instance->gui_running () : false;
     }
 
-    static interpreter * the_interpreter (void)
-    {
-      return instance ? instance->m_interpreter : 0;
-    }
-
     // Convenience functions.
 
     static bool forced_interactive (void);
     static bool interactive (void);
 
   private:
 
     // The application instance;  There should be only one.
