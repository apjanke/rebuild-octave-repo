# HG changeset patch
# User Rik <rik@octave.org>
# Date 1508387715 25200
#      Wed Oct 18 21:35:15 2017 -0700
# Node ID 5fc5c1a49aa1d08cc8f264e1ca3bdb3ef4bc3a7d
# Parent  ce435b70fd945092a32ef60374ec9fc7531c87f8
quadcc: Preserve output of type single when input is single (bug #52243).

* quadcc.cc (Fquadcc): Add new default tolerances to docstring when any limit
of integration is of single type.  New bool variable issingle to track whether
limit of integration is a single.  At end of function, check issingle and cast
output to float if necessary.  Add BIST tests to verify behavior.

diff --git a/libinterp/corefcn/quadcc.cc b/libinterp/corefcn/quadcc.cc
--- a/libinterp/corefcn/quadcc.cc
+++ b/libinterp/corefcn/quadcc.cc
@@ -1508,18 +1508,18 @@ which uses the element-by-element ``dot'
 both limits may be infinite.  @code{quadcc} handles an infinite limit by
 substituting the variable of integration with @code{x = tan (pi/2*u)}.
 
 The optional argument @var{tol} is a 1- or 2-element vector that specifies the
 desired accuracy of the result.  The first element of the vector is the desired
 absolute tolerance, and the second element is the desired relative tolerance.
 To choose a relative test only, set the absolute tolerance to zero.  To choose
 an absolute test only, set the relative tolerance to zero.  The default
-absolute tolerance is @math{1e^{-10}} and the default relative tolerance is
-@math{1e^{-6}}.
+absolute tolerance is @math{1e^{-10}} (@math{1e^{-5}} for single), and the
+default relative tolerance is @math{1e^{-6}} (@math{1e^{-4}} for single).
 
 The optional argument @var{sing} contains a list of points where the integrand
 has known singularities, or discontinuities in any of its derivatives, inside
 the integration interval.  For the example above, which has a discontinuity at
 x=1, the call to @code{quadcc} would be as follows
 
 @example
 int = quadcc (f, a, b, [], [ 1 ]);
@@ -1572,16 +1572,17 @@ Software, Vol. 37, Issue 3, Article No. 
   static const int idx[4] = { 0, 5, 14, 31 };
   static const double w = M_SQRT2 / 2;
   static const int ndiv_max = 20;
 
   // Arguments left and right.
   int nargin = args.length ();
   octave_function *fcn;
   double a, b, abstol, reltol, *sing;
+  bool issingle;
 
   // Variables needed for transforming the integrand.
   bool wrap = false;
   double xw;
 
   // Stuff we will need to call the integrand.
   octave_value_list fargs, fvals;
 
@@ -1609,25 +1610,35 @@ Software, Vol. 37, Issue 3, Article No. 
       fname.append ("(x) y = ");
       fcn = extract_function (args(0), "quadcc", fcn_name, fname,
                               "; endfunction");
     }
 
   if (! args(1).is_real_scalar ())
     error ("quadcc: lower limit of integration (A) must be a real scalar");
   a = args(1).double_value ();
+  issingle = args(1).is_single_type ();
 
   if (! args(2).is_real_scalar ())
     error ("quadcc: upper limit of integration (B) must be a real scalar");
   b = args(2).double_value ();
+  issingle = (issingle || args(2).is_single_type ());
 
   if (nargin < 4 || args(3).isempty ())
     {
-      abstol = 1.0e-10;
-      reltol = 1.0e-6;
+      if (issingle)
+        {
+          abstol = 1.0e-5;
+          reltol = 1.0e-4;
+        }
+      else
+        {
+          abstol = 1.0e-10;
+          reltol = 1.0e-6;
+        }
     }
   else if (! args(3).isnumeric () || args(3).numel () > 2)
     error ("quadcc: TOL must be a 1- or 2-element vector [AbsTol, RelTol]");
   else
     {
       NDArray tol = args(3).array_value ();
 
       abstol = tol(0);
@@ -1640,17 +1651,20 @@ Software, Vol. 37, Issue 3, Article No. 
           static bool do_warn = true;
           if (do_warn)
             {
               warning_with_id ("Octave:quadcc:RelTol-conversion",
                                "A single tolerance input now sets AbsTol, not RelTol");
               do_warn = false;
             }
 
-          reltol = 1.0e-6;
+          if (issingle)
+            reltol = 1.0e-4;
+          else
+            reltol = 1.0e-6;
         }
       else
         {
           reltol = tol(1);
           if (reltol < 0)
             error ("quadcc: relative tolerance must be >=0");
         }
     }
@@ -2208,17 +2222,20 @@ Software, Vol. 37, Issue 3, Article No. 
     {
       iv = &(ivals[heap[i]]);
       printf ("quadcc: ival %i (%i) with [%e,%e], int=%e, err=%e, depth=%i, rdepth=%i, ndiv=%i\n",
               i, heap[i], iv->a, iv->b, iv->igral, iv->err, iv->depth,
               iv->rdepth, iv->ndiv);
     }
 #endif
 
-  return ovl (igral, err, neval);
+  if (issingle)
+    return ovl (static_cast<float> (igral), err, neval);
+  else
+    return ovl (igral, err, neval);
 }
 
 /*
 %!assert (quadcc (@sin, -pi, pi), 0, 1e-10)
 %!assert (quadcc (inline ("sin"), -pi, pi), 0, 1e-10)
 %!assert (quadcc ("sin", -pi, pi), 0, 1e-10)
 
 %!assert (quadcc (@sin, -pi, 0), -2, 1e-10)
@@ -2238,16 +2255,22 @@ Software, Vol. 37, Issue 3, Article No. 
 %!  y(idx < 1e-10) = NaN;
 %!endfunction
 
 %!test
 %! [q, err, npoints] = quadcc ("__nansin", -pi, pi, [0, 1e-6]);
 %! assert (q, 0, -1e-6);
 %! assert (err, 0, 15*eps);
 
+%!test
+%! assert (class (quadcc (@sin, 0, 1)), "double");
+%! assert (class (quadcc (@sin, single (0), 1)), "single");
+%! assert (class (quadcc (@sin, 0, single (1))), "single");
+%! assert (class (quadcc (@sin, single (0), single (1))), "single");
+
 ## Test input validation
 %!error (quadcc ())
 %!error (quadcc (@sin))
 %!error (quadcc (@sin, 0))
 %!error <lower limit .* must be a .* scalar> (quadcc (@sin, ones (2), pi))
 %!error <lower limit .* must be a real scalar> (quadcc (@sin, -i, pi))
 %!error <upper limit .* must be a .* scalar> (quadcc (@sin, 0, ones (2)))
 %!error <upper limit .* must be a real scalar> (quadcc (@sin, 0, i))
