# HG changeset patch
# User jwe
# Date 774830529 0
#      Thu Jul 21 22:42:09 1994 +0000
# Node ID 5ec10a984241bc21734f6307494160c81ef41251
# Parent  8e134d3b21c92f69c23005212024aaca61ea9ae1
[project @ 1994-07-21 22:40:04 by jwe]

diff --git a/liboctave/CmplxQR.cc b/liboctave/CmplxQR.cc
--- a/liboctave/CmplxQR.cc
+++ b/liboctave/CmplxQR.cc
@@ -38,17 +38,17 @@ extern "C"
 {
   int F77_FCN (zgeqrf) (const int*, const int*, Complex*, const int*,
 			Complex*, Complex*, const int*, int*);
 
   int F77_FCN (zungqr) (const int*, const int*, const int*, Complex*,
 			const int*, Complex*, Complex*, const int*, int*);
 }
 
-ComplexQR::ComplexQR (const ComplexMatrix& a)
+ComplexQR::ComplexQR (const ComplexMatrix& a, QR::type qr_type)
 {
   int m = a.rows ();
   int n = a.cols ();
 
   if (m == 0 || n == 0)
     {
       (*current_liboctave_error_handler)
 	("ComplexQR must have non-empty matrix");
@@ -69,33 +69,57 @@ ComplexQR::ComplexQR (const ComplexMatri
     }
   else
     tmp_data = dup (a.data (), a.length ());
 
   F77_FCN (zgeqrf) (&m, &n, tmp_data, &m, tau, work, &lwork, &info);
 
   delete [] work;
 
-  r.resize (m, n, 0.0);
-  for (int j = 0; j < n; j++)
+  if (qr_type == QR::raw)
+    {
+      for (int j = 0; j < min_mn; j++)
+	{
+	  int limit = j < min_mn - 1 ? j : min_mn - 1;
+	  for (int i = limit + 1; i < m; i++)
+	    tmp_data[m*j+i] *= tau[j];
+	}
+    }
+  else
     {
-      int limit = j < min_mn-1 ? j : min_mn-1;
-      for (int i = 0; i <= limit; i++)
-	r.elem (i, j) = tmp_data[m*j+i];
-    }
+      int m2;
+      if (qr_type == QR::economy && m > n)
+	{
+	  m2 = n;
+	  r.resize (n, n, 0.0);
+	}
+      else
+	{
+	  m2 = m;
+	  r.resize (m, n, 0.0);
+	}
 
-  lwork = 32*m;
-  work = new Complex[lwork];
-
-  F77_FCN (zungqr) (&m, &m, &min_mn, tmp_data, &m, tau, work, &lwork, &info);
+      for (int j = 0; j < n; j++)
+	{
+	  int limit = j < min_mn-1 ? j : min_mn-1;
+	  for (int i = 0; i <= limit; i++)
+	    r.elem (i, j) = tmp_data[m*j+i];
+	}
 
-  q = ComplexMatrix (tmp_data, m, m);
+      lwork = 32*m;
+      work = new Complex[lwork];
+
+      F77_FCN (zungqr) (&m, &m, &min_mn, tmp_data, &m, tau, work,
+			&lwork, &info);
 
-  delete [] tau;
-  delete [] work;
+      q = ComplexMatrix (tmp_data, m, m);
+
+      delete [] tau;
+      delete [] work;
+    }
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CmplxQR.h b/liboctave/CmplxQR.h
--- a/liboctave/CmplxQR.h
+++ b/liboctave/CmplxQR.h
@@ -26,37 +26,38 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
 #include "CMatrix.h"
+#include "dbleQR.h"
 
 extern "C++" {
 
 class ComplexQR
 {
 public:
 
   ComplexQR (void) {}
 
-  ComplexQR (const ComplexMatrix& A);
+  ComplexQR (const ComplexMatrix& A, QR::type qr_type = QR::std);
 
   ComplexQR (const ComplexQR& a);
 
   ComplexQR& operator = (const ComplexQR& a);
 
   ComplexMatrix Q (void) const;
   ComplexMatrix R (void) const;
 
   friend ostream&  operator << (ostream& os, const ComplexQR& a);
 
-private:
+protected:
 
   ComplexMatrix q;
   ComplexMatrix r;
 };
 
 inline ComplexQR::ComplexQR (const ComplexQR& a)
 {
   q = a.q;
diff --git a/liboctave/dbleQR.cc b/liboctave/dbleQR.cc
--- a/liboctave/dbleQR.cc
+++ b/liboctave/dbleQR.cc
@@ -36,19 +36,22 @@ Software Foundation, 675 Mass Ave, Cambr
 
 extern "C"
 {
   int F77_FCN (dgeqrf) (const int*, const int*, double*, const int*,
 			double*, double*, const int*, int*);
 
   int F77_FCN (dorgqr) (const int*, const int*, const int*, double*,
 			const int*, double*, double*, const int*, int*);
+
+  int F77_FCN (dgeqpf) (const int*, const int*, double*, const int*,
+			int*, double*, double*, int*);
 }
 
-QR::QR (const Matrix& a)
+QR::QR (const Matrix& a, QR::type qr_type)
 {
   int m = a.rows ();
   int n = a.cols ();
 
   if (m == 0 || n == 0)
     {
       (*current_liboctave_error_handler) ("QR must have non-empty matrix");
       return;
@@ -68,33 +71,57 @@ QR::QR (const Matrix& a)
     }
   else
     tmp_data = dup (a.data (), a.length ());
 
   F77_FCN (dgeqrf) (&m, &n, tmp_data, &m, tau, work, &lwork, &info);
 
   delete [] work;
 
-  r.resize (m, n, 0.0);
-  for (int j = 0; j < n; j++)
+  if (qr_type == QR::raw)
+    {
+      for (int j = 0; j < min_mn; j++)
+	{
+	  int limit = j < min_mn - 1 ? j : min_mn - 1;
+	  for (int i = limit + 1; i < m; i++)
+	    tmp_data[m*j+i] *= tau[j];
+	}
+    }
+  else
     {
-      int limit = j < min_mn-1 ? j : min_mn-1;
-      for (int i = 0; i <= limit; i++)
-	r.elem (i, j) = tmp_data[m*j+i];
-    }
+      int m2;
+      if (qr_type == QR::economy && m > n)
+	{
+	  m2 = n;
+	  r.resize (n, n, 0.0);
+	}
+      else
+	{
+	  m2 = m;
+	  r.resize (m, n, 0.0);
+	}
 
-  lwork = 32*m;
-  work = new double[lwork];
-
-  F77_FCN (dorgqr) (&m, &m, &min_mn, tmp_data, &m, tau, work, &lwork, &info);
+      for (int j = 0; j < n; j++)
+	{
+	  int limit = j < min_mn-1 ? j : min_mn-1;
+	  for (int i = 0; i <= limit; i++)
+	    r.elem (i, j) = tmp_data[m*j+i];
+	}
 
-  q = Matrix (tmp_data, m, m);
+      lwork = 32*m;
+      work = new double[lwork];
+
+      F77_FCN (dorgqr) (&m, &m, &min_mn, tmp_data, &m, tau, work,
+			&lwork, &info);
 
-  delete [] tau;
-  delete [] work;
+      q = Matrix (tmp_data, m, m);
+
+      delete [] tau;
+      delete [] work;
+    }
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleQR.h b/liboctave/dbleQR.h
--- a/liboctave/dbleQR.h
+++ b/liboctave/dbleQR.h
@@ -33,30 +33,37 @@ class ostream;
 #include "dMatrix.h"
 
 extern "C++" {
 
 class QR
 {
 public:
 
+  enum type
+    {
+      std,
+      raw,
+      economy,
+    };
+
   QR (void) {}
 
-  QR (const Matrix& A);
+  QR (const Matrix& A, type qr_type = QR::std);
 
   QR (const QR& a);
 
   QR& operator = (const QR& a);
 
   Matrix Q (void) const;
   Matrix R (void) const;
 
   friend ostream&  operator << (ostream& os, const QR& a);
 
-private:
+protected:
 
   Matrix q;
   Matrix r;
 };
 
 inline QR::QR (const QR& a)
 {
   q = a.q;
diff --git a/src/qr.cc b/src/qr.cc
--- a/src/qr.cc
+++ b/src/qr.cc
@@ -23,86 +23,137 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
 #include "dbleQR.h"
 #include "CmplxQR.h"
 
+#include "dbleQRP.h"
+#include "CmplxQRP.h"
+
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "defun-dld.h"
 
 DEFUN_DLD ("qr", Fqr, Sqr, 2, 2,
-  "[Q, R] = qr (X): form QR factorization of X")
+  "[Q, R] = qr (X):      form Q unitary and R upper triangular such\n\
+                       that Q * R = X\n\
+\n\
+[Q, R] = qr (X, 0):    form the economy decomposition such that if X is\n\
+                       if X is m by n then only the first n columns of Q\n\
+                       are computed.\n\
+\n\
+[Q, R, P] = qr (X):    form QRP factorization of X where\n\
+                       P is a permutation matrix such that\n\
+                       A * P = Q * R\n\
+\n\
+[Q, R, P] = qr (X, 0): form the economy decomposition with \n\
+                       permutation vector P such that Q * R = X (:, P)\n\
+\n\
+qr (X) alone returns the output of the LAPACK routine dgeqrf, such\n\
+that R = triu (qr (X))")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
-  if (nargin != 2 || nargout > 2)
+  if (nargin != 2 && nargin != 3 || nargout > 3)
     {
       print_usage ("qr");
       return retval;
     }
 
   tree_constant tmp = args(1).make_numeric ();
     
-  int nr = tmp.rows ();
-  int nc = tmp.columns ();
-
-  if (nr == 0 || nc == 0)
+  if (tmp.rows () == 0 || tmp.columns () == 0)
     {
       int flag = user_pref.propagate_empty_matrices;
       if (flag != 0)
 	{
 	  if (flag < 0)
 	    gripe_empty_arg ("qr", 0);
 	  Matrix m;
+	  retval(2) = m;
 	  retval(1) = m;
 	  retval(0) = m;
 	}
       else
 	gripe_empty_arg ("qr", 1);
 
       return retval;
     }
 
+  QR::type type = nargout == 1 ? QR::raw
+    : (nargin == 3 ? QR::economy : QR::std);
+
   switch (tmp.const_type ())
     {
     case tree_constant_rep::matrix_constant:
       {
 	Matrix m = tmp.matrix_value ();
-	QR fact (m);
-	retval(1) = fact.R ();
-	retval(0) = fact.Q ();
+	if (nargout < 3)
+	  {
+	    QR fact (m, type);
+	    retval(1) = fact.R ();
+	    retval(0) = fact.Q ();
+	  }
+	else
+	  {
+	    QRP fact (m, type);
+	    retval(2) = fact.P ();
+	    retval(1) = fact.R ();
+	    retval(0) = fact.Q ();
+	  }
       }
       break;
     case tree_constant_rep::complex_matrix_constant:
       {
 	ComplexMatrix m = tmp.complex_matrix_value ();
-	ComplexQR fact (m);
-	retval(1) = fact.R ();
-	retval(0) = fact.Q ();
+	if (nargout < 3)
+	  {
+	    ComplexQR fact (m, type);
+	    retval(1) = fact.R ();
+	    retval(0) = fact.Q ();
+	  }
+	else
+	  {
+	    ComplexQRP fact (m, type);
+	    retval(2) = fact.P ();
+	    retval(1) = fact.R ();
+	    retval(0) = fact.Q ();
+	  }
       }
       break;
     case tree_constant_rep::scalar_constant:
       {
 	double d = tmp.double_value ();
-	retval(1) = d;
-	retval(0) = 1.0;
+	if (nargout == 1)
+	  retval(0) = d;
+	else
+	  {
+	    retval(2) = 1.0;
+	    retval(1) = d;
+	    retval(0) = 1.0;
+	  }
       }
       break;
     case tree_constant_rep::complex_scalar_constant:
       {
 	Complex c = tmp.complex_value ();
-	retval(1) = c;
-	retval(0) = 1.0;
+	if (nargout == 1)
+	  retval(0) = c;
+	else
+	  {
+	    retval(2) = 1.0;
+	    retval(1) = c;
+	    retval(0) = 1.0;
+	  }
       }
       break;
     default:
       break;
     }
   return retval;
 }
 
diff --git a/src/svd.cc b/src/svd.cc
--- a/src/svd.cc
+++ b/src/svd.cc
@@ -30,25 +30,27 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "error.h"
 #include "defun-dld.h"
 
 DEFUN_DLD ("svd", Fsvd, Ssvd, 2, 3,
-  "S = svd (X) or [U, S, V] = svd (X)\n\
+  "S = svd (X) or [U, S, V] = svd (X [, 0])\n\
 \n\
-compute the singular value decomposition of X")
+Compute the singular value decomposition of X.  Given a second input\n\
+argument, an `economy' sized factorization is computed that omits\n\
+unnecessary rows and columns of U and V")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
-  if (nargin != 2 || nargout == 2 || nargout > 3)
+  if (nargin < 2 || nargin > 3 || nargout == 2 || nargout > 3)
     {
       print_usage ("svd");
       return retval;
     }
 
   tree_constant arg = args(1).make_numeric ();
 
   if (arg.rows () == 0 || arg.columns () == 0)
@@ -89,22 +91,24 @@ compute the singular value decomposition
     case tree_constant_rep::complex_matrix_constant:
       ctmp = arg.complex_matrix_value ();
       break;
     default:
       panic_impossible ();
       break;
     }
 
+  SVD::type type = (nargin == 3) ? SVD::economy : SVD::std;
+
   switch (arg.const_type ())
     {
     case tree_constant_rep::scalar_constant:
     case tree_constant_rep::matrix_constant:
       {
-	SVD result (tmp);
+	SVD result (tmp, type);
 
 	DiagMatrix sigma = result.singular_values ();
 
 	if (nargout == 0 || nargout == 1)
 	  {
 	    retval.resize (1);
 	    retval(0) = tree_constant (sigma.diag (), 1);
 	  }
@@ -115,17 +119,17 @@ compute the singular value decomposition
 	    retval(1) = sigma;
 	    retval(2) = result.right_singular_matrix ();
 	  }
       }
       break;
     case tree_constant_rep::complex_scalar_constant:
     case tree_constant_rep::complex_matrix_constant:
       {
-	ComplexSVD result (ctmp);
+	ComplexSVD result (ctmp, type);
 
 	DiagMatrix sigma = result.singular_values ();
 
 	if (nargout == 0 || nargout == 1)
 	  {
 	    retval.resize (1);
 	    retval(0) = tree_constant (sigma.diag (), 1);
 	  }
