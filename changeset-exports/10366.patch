# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1267256254 -3600
#      Sat Feb 27 08:37:34 2010 +0100
# Node ID e5ae13b8b2c2c1a32e3cac87fa4bbbfd40942d16
# Parent  532802559f39ce168d5c86d80375ceccc9a7c82f
improve Array indexing error messages

diff --git a/liboctave/Array-util.cc b/liboctave/Array-util.cc
--- a/liboctave/Array-util.cc
+++ b/liboctave/Array-util.cc
@@ -636,18 +636,49 @@ gripe_nonconformant (const char *op, int
                      int op2_nr, int op2_nc)
 {
   (*current_liboctave_error_handler)
     ("%s: nonconformant arguments (op1 is %dx%d, op2 is %dx%d)",
      op, op1_nr, op1_nc, op2_nr, op2_nc);
 }
 
 void
-gripe_nonconformant (const char *op, dim_vector& op1_dims,
-                     dim_vector& op2_dims)
+gripe_nonconformant (const char *op, const dim_vector& op1_dims,
+                     const dim_vector& op2_dims)
 {
   std::string op1_dims_str = op1_dims.str ();
   std::string op2_dims_str = op2_dims.str ();
 
   (*current_liboctave_error_handler)
     ("%s: nonconformant arguments (op1 is %s, op2 is %s)",
      op, op1_dims_str.c_str (), op2_dims_str.c_str ());
 }
+
+void gripe_index_out_of_range (int nd, int dim, 
+                               octave_idx_type idx, octave_idx_type ext)
+{
+  switch (nd)
+    {
+    case 1:
+      (*current_liboctave_error_handler)
+        ("A(I): index out of bounds; value %d out of bound %d",
+         idx, ext);
+      break;
+    case 2:
+      (*current_liboctave_error_handler)
+        ("A(I,J): %s index out of bounds; value %d out of bound %d",
+         (dim == 1) ? "row" : "column", idx, ext);
+      break;
+    default:
+      (*current_liboctave_error_handler)
+        ("A(I,J,...): index to dimension %d out of bounds; value %d out of bound %d",
+         dim, idx, ext);
+      break;
+    }
+}
+
+void gripe_del_index_out_of_range (bool is1d, octave_idx_type idx, 
+                                   octave_idx_type ext)
+{
+  (*current_liboctave_error_handler)
+    ("A(%s) = []: index out of bounds; value %d out of bound %d",
+     is1d ? "I" : "..,I,..", idx, ext);
+}
diff --git a/liboctave/Array-util.h b/liboctave/Array-util.h
--- a/liboctave/Array-util.h
+++ b/liboctave/Array-util.h
@@ -94,12 +94,18 @@ extern int OCTAVE_API permute_vector_com
 extern void OCTAVE_API gripe_nan_to_logical_conversion (void);
 
 extern void OCTAVE_API gripe_nonconformant (const char *op, int op1_len, int op2_len);
 
 extern void OCTAVE_API gripe_nonconformant (const char *op, int op1_nr, int op1_nc,
                                  int op2_nr, int op2_nc);
 
 
-extern void OCTAVE_API gripe_nonconformant (const char *op, dim_vector& op1_dims,
-                                 dim_vector& op2_dims);
+extern void OCTAVE_API gripe_nonconformant (const char *op, const dim_vector& op1_dims,
+                                            const dim_vector& op2_dims);
+
+extern void OCTAVE_API gripe_index_out_of_range (int nd, int dim, 
+                                                 octave_idx_type iext, octave_idx_type ext);
+
+extern void OCTAVE_API gripe_del_index_out_of_range (bool is1d, octave_idx_type iext, 
+                                                     octave_idx_type ext);
 
 #endif
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -201,92 +201,134 @@ Array<T>::compute_index (const Array<oct
       retval *= dimensions(--ni);
       retval += ra_idx(ni);
     }
 
   return retval;
 }
 
 template <class T>
-T&
-Array<T>::range_error (const char *fcn, octave_idx_type n) const
+T& 
+Array<T>::checkelem (octave_idx_type n)
 {
-  (*current_liboctave_error_handler) ("%s (%d): range error", fcn, n);
-  static T foo;
-  return foo;
+  if (n < 0 || n >= slice_len)
+    gripe_index_out_of_range (1, 1, n+1, slice_len);
+
+  return elem (n);
 }
 
 template <class T>
-T&
-Array<T>::range_error (const char *fcn, octave_idx_type i, octave_idx_type j) const
+T& 
+Array<T>::checkelem (octave_idx_type i, octave_idx_type j)
 {
-  (*current_liboctave_error_handler)
-    ("%s (%d, %d): range error", fcn, i, j);
-  static T foo;
-  return foo;
+  if (i < 0 || i >= dim1 ())
+    gripe_index_out_of_range (2, 1, i+1, dim1 ());
+  if (j < 0 || j >= dimensions.numel (1))
+    gripe_index_out_of_range (2, 2, j+1, dimensions.numel (1));
+
+  return elem (i, j);
+}
+
+template <class T>
+T& 
+Array<T>::checkelem (octave_idx_type i, octave_idx_type j, octave_idx_type k)
+{
+  if (i < 0 || i >= dim1 ())
+    gripe_index_out_of_range (3, 1, i+1, dim1 ());
+  if (j < 0 || j >= dim2 ())
+    gripe_index_out_of_range (3, 2, j+1, dim2 ());
+  if (k < 0 || k >= dimensions.numel (2))
+    gripe_index_out_of_range (3, 3, k+1, dimensions.numel (2));
+
+  return elem (i, j, k);
 }
 
 template <class T>
-T&
-Array<T>::range_error (const char *fcn, octave_idx_type i, octave_idx_type j, octave_idx_type k) const
+T& 
+Array<T>::checkelem (const Array<octave_idx_type>& ra_idx)
 {
-  (*current_liboctave_error_handler)
-    ("%s (%d, %d, %d): range error", fcn, i, j, k);
-  static T foo;
-  return foo;
+  int nd = ra_idx.length ();
+  const dim_vector dv = dimensions.redim (nd);
+  for (int d = 0; d < nd; d++)
+    if (ra_idx(d) < 0 || ra_idx(d) >= dv(d))
+      gripe_index_out_of_range (nd, d+1, ra_idx(d)+1, dv(d));
+
+  return elem (ra_idx);
+}
+
+template <class T>
+typename Array<T>::crefT
+Array<T>::checkelem (octave_idx_type n) const
+{
+  if (n < 0 || n >= slice_len)
+    gripe_index_out_of_range (1, 1, n+1, slice_len);
+
+  return elem (n);
 }
 
 template <class T>
-T&
-Array<T>::range_error (const char *fcn, const Array<octave_idx_type>& ra_idx) const
+typename Array<T>::crefT
+Array<T>::checkelem (octave_idx_type i, octave_idx_type j) const
+{
+  if (i < 0 || i >= dim1 ())
+    gripe_index_out_of_range (2, 1, i+1, dim1 ());
+  if (j < 0 || j >= dimensions.numel (1))
+    gripe_index_out_of_range (2, 2, j+1, dimensions.numel (1));
+
+  return elem (i, j);
+}
+
+template <class T>
+typename Array<T>::crefT
+Array<T>::checkelem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const
 {
-  std::ostringstream buf;
-
-  buf << fcn << " (";
-
-  octave_idx_type n = ra_idx.length ();
-
-  if (n > 0)
-    buf << ra_idx(0);
-
-  for (octave_idx_type i = 1; i < n; i++)
-    buf << ", " << ra_idx(i);
-
-  buf << "): range error";
-
-  std::string buf_str = buf.str ();
-
-  (*current_liboctave_error_handler) (buf_str.c_str ());
-
-  static T foo;
-  return foo;
+  if (i < 0 || i >= dim1 ())
+    gripe_index_out_of_range (3, 1, i+1, dim1 ());
+  if (j < 0 || j >= dim2 ())
+    gripe_index_out_of_range (3, 2, j+1, dim2 ());
+  if (k < 0 || k >= dimensions.numel (2))
+    gripe_index_out_of_range (3, 3, k+1, dimensions.numel (2));
+
+  return elem (i, j, k);
 }
 
+template <class T>
+typename Array<T>::crefT
+Array<T>::checkelem (const Array<octave_idx_type>& ra_idx) const
+{
+  int nd = ra_idx.length ();
+  const dim_vector dv = dimensions.redim (nd);
+  for (int d = 0; d < nd; d++)
+    if (ra_idx(d) < 0 || ra_idx(d) >= dv(d))
+      gripe_index_out_of_range (nd, d+1, ra_idx(d)+1, dv(d));
+
+  return elem (ra_idx);
+}
 
 template <class T>
 Array<T>
 Array<T>::column (octave_idx_type k) const
 {
   octave_idx_type r = dimensions(0);
 #ifdef BOUNDS_CHECKING
-  if (k < 0 || k * r >= numel ())
-    range_error ("column", k);
+  if (k < 0 || k > dimensions.numel (1))
+    gripe_index_out_of_range (2, 2, k+1, dimensions.numel (1));
 #endif
 
   return Array<T> (*this, dim_vector (r, 1), k*r, k*r + r);
 }
 
 template <class T>
 Array<T>
 Array<T>::page (octave_idx_type k) const
 {
   octave_idx_type r = dimensions(0), c = dimensions (1), p = r*c;
 #ifdef BOUNDS_CHECKING
-  if (k < 0 || k * p >= numel ())
-    range_error ("page", k);
+  if (k < 0 || k > dimensions.numel (2))
+    gripe_index_out_of_range (3, 3, k+1, dimensions.numel (2));
 #endif
 
   return Array<T> (*this, dim_vector (r, c), k*p, k*p + p);
 }
 
 template <class T>
 Array<T>
 Array<T>::linearize (void) const
@@ -295,18 +337,20 @@ Array<T>::linearize (void) const
   return Array<T> (*this, dim_vector (n, 1), 0, n);
 }
 
 template <class T>
 Array<T>
 Array<T>::linear_slice (octave_idx_type lo, octave_idx_type up) const
 {
 #ifdef BOUNDS_CHECKING
-  if (lo < 0 || up > numel ())
-    range_error ("linear_slice", lo, up);
+  if (lo < 0)
+    gripe_index_out_of_range (1, 1, lo+1, numel ());
+  if (up > numel ())
+    gripe_index_out_of_range (1, 1, up, numel ());
 #endif
   if (up < lo) up = lo;
   return Array<T> (*this, dim_vector (up - lo, 1), lo, up);
 }
 
 // Helper class for multi-d dimension permuting (generalized transpose).
 class rec_permute_helper
 {
@@ -683,40 +727,33 @@ private:
     }
 public:
   template <class T>
   void resize_fill (const T* src, T *dest, const T& rfv) const 
     { do_resize_fill (src, dest, rfv, n-1); }
 
 };
 
-static void gripe_index_out_of_range (void)
-{
-  (*current_liboctave_error_handler)
-    ("A(I): Index exceeds matrix dimension.");
-}
-
 template <class T>
 Array<T>
 Array<T>::index (const idx_vector& i) const
 {
   octave_idx_type n = numel ();
   Array<T> retval;
 
   if (i.is_colon ())
     {
       // A(:) produces a shallow copy as a column vector.
       retval = Array<T> (*this, dim_vector (n, 1));
     }
-  else if (i.extent (n) != n)
-    {
-      gripe_index_out_of_range ();
-    }
   else
     {
+      if (i.extent (n) != n)
+        gripe_index_out_of_range (1, 1, i.extent (n), n); // throws
+
       // FIXME -- this is the only place where orig_dimensions are used.
       dim_vector rd = i.orig_dimensions ();
       octave_idx_type il = i.length (n);
 
       // FIXME -- this is for Matlab compatibility.  Matlab 2007 given
       //
       //   b = ones(3,1)
       //
@@ -768,22 +805,23 @@ Array<T>::index (const idx_vector& i, co
   octave_idx_type r = dv(0), c = dv(1);
   Array<T> retval;
 
   if (i.is_colon () && j.is_colon ())
     {
       // A(:,:) produces a shallow copy.
       retval = Array<T> (*this, dv);
     }
-  else if (i.extent (r) != r || j.extent (c) != c)
-    {
-      gripe_index_out_of_range ();
-    }
   else
     {
+      if (i.extent (r) != r)
+        gripe_index_out_of_range (2, 1, i.extent (r), r); // throws
+      if (j.extent (c) != c)
+        gripe_index_out_of_range (2, 2, i.extent (c), c); // throws
+
       octave_idx_type n = numel (), il = i.length (r), jl = j.length (c);
 
       idx_vector ii (i);
 
       if (ii.maybe_reduce (r, j, c))
         {
           octave_idx_type l, u;
           if (ii.length () > 0 && ii.is_cont_range (n, l, u))
@@ -826,34 +864,27 @@ Array<T>::index (const Array<idx_vector>
   else if (ial == 2)
     retval = index (ia(0), ia(1));
   else if (ial > 0)
     {
       // Get dimensions, allowing Fortran indexing in the last dim.
       dim_vector dv = dimensions.redim (ial);
 
       // Check for out of bounds conditions.
-      bool all_colons = true, mismatch = false;
+      bool all_colons = true;
       for (int i = 0; i < ial; i++)
         {
           if (ia(i).extent (dv(i)) != dv(i))
-            {
-              mismatch = true;
-              break;
-            }
-          else
-            all_colons = all_colons && ia(i).is_colon ();
+            gripe_index_out_of_range (ial, i+1, ia(i).extent (dv(i)), dv(i)); // throws
+
+          all_colons = all_colons && ia(i).is_colon ();
         }
 
 
-      if (mismatch)
-        {
-          gripe_index_out_of_range ();
-        }
-      else if (all_colons)
+      if (all_colons)
         {
           // A(:,:,...,:) produces a shallow copy.
           dv.chop_trailing_singletons ();
           retval = Array<T> (*this, dv);
         }
       else 
         {
           // Form result dimensions.
@@ -1382,22 +1413,21 @@ template <class T>
 void 
 Array<T>::delete_elements (const idx_vector& i)
 {
   octave_idx_type n = numel ();
   if (i.is_colon ())
     { 
       *this = Array<T> ();
     }
-  else if (i.extent (n) != n)
-    {
-      gripe_index_out_of_range ();
-    }
   else if (i.length (n) != 0)
     {
+      if (i.extent (n) != n)
+        gripe_del_index_out_of_range (true, i.extent (n), n);
+
       octave_idx_type l, u;
       bool col_vec = ndims () == 2 && columns () == 1 && rows () != 1;
       if (i.is_scalar () && i(0) == n-1)
         {
           // Stack "pop" operation.
           resize1 (n-1);
         }
       else if (i.is_cont_range (n, l, u))
@@ -1430,22 +1460,21 @@ Array<T>::delete_elements (int dim, cons
       return;
     }
 
   octave_idx_type n = dimensions (dim);
   if (i.is_colon ())
     { 
       *this = Array<T> ();
     }
-  else if (i.extent (n) != n)
-    {
-      gripe_index_out_of_range ();
-    }
   else if (i.length (n) != 0)
     {
+      if (i.extent (n) != n)
+        gripe_del_index_out_of_range (false, i.extent (n), n);
+
       octave_idx_type l, u;
 
       if (i.is_cont_range (n, l, u))
         {
           // Special case deleting a contiguous range.
           octave_idx_type nd = n + l - u, dl = 1, du = 1;
           dim_vector rdv = dimensions;
           rdv(dim) = nd;
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -326,23 +326,20 @@ public:
   // Return a const-reference so that dims ()(i) works efficiently.
   const dim_vector& dims (void) const { return dimensions; }
 
   Array<T> squeeze (void) const;
   
   void chop_trailing_singletons (void) GCC_ATTR_DEPRECATED
   { dimensions.chop_trailing_singletons (); }
   
+  octave_idx_type compute_index (octave_idx_type i, octave_idx_type j) const;
+  octave_idx_type compute_index (octave_idx_type i, octave_idx_type j, octave_idx_type k) const;
   octave_idx_type compute_index (const Array<octave_idx_type>& ra_idx) const;
 
-  T& range_error (const char *fcn, octave_idx_type n) const;
-  T& range_error (const char *fcn, octave_idx_type i, octave_idx_type j) const;
-  T& range_error (const char *fcn, octave_idx_type i, octave_idx_type j, octave_idx_type k) const;
-  T& range_error (const char *fcn, const Array<octave_idx_type>& ra_idx) const;
-
   // No checking, even for multiple references, ever.
 
   T& xelem (octave_idx_type n) { return slice_data [n]; }
   crefT xelem (octave_idx_type n) const { return slice_data [n]; }
 
   T& xelem (octave_idx_type i, octave_idx_type j) { return xelem (dim1()*j+i); }
   crefT xelem (octave_idx_type i, octave_idx_type j) const { return xelem (dim1()*j+i); }
 
@@ -356,52 +353,20 @@ public:
 
   crefT xelem (const Array<octave_idx_type>& ra_idx) const
     { return xelem (compute_index (ra_idx)); }
 
   // FIXME -- would be nice to fix this so that we don't
   // unnecessarily force a copy, but that is not so easy, and I see no
   // clean way to do it.
 
-  T& checkelem (octave_idx_type n)
-    {
-      if (n < 0 || n >= slice_len)
-        return range_error ("T& Array<T>::checkelem", n);
-      else
-        {
-          make_unique ();
-          return xelem (n);
-        }
-    }
-
-  T& checkelem (octave_idx_type i, octave_idx_type j)
-    {
-      if (i < 0 || j < 0 || i >= dim1 () || j >= dim2 ())
-        return range_error ("T& Array<T>::checkelem", i, j);
-      else
-        return elem (dim1()*j+i);
-    }
-
-  T& checkelem (octave_idx_type i, octave_idx_type j, octave_idx_type k)
-    {
-      if (i < 0 || j < 0 || k < 0 || i >= dim1 () || j >= dim2 () || k >= dim3 ())
-        return range_error ("T& Array<T>::checkelem", i, j, k);
-      else
-        return elem (i, dim2()*k+j);
-    }
-
-  T& checkelem (const Array<octave_idx_type>& ra_idx)
-    {
-      octave_idx_type i = compute_index (ra_idx);
-
-      if (i < 0)
-        return range_error ("T& Array<T>::checkelem", ra_idx);
-      else
-        return elem (i);
-    }
+  T& checkelem (octave_idx_type n);
+  T& checkelem (octave_idx_type i, octave_idx_type j);
+  T& checkelem (octave_idx_type i, octave_idx_type j, octave_idx_type k);
+  T& checkelem (const Array<octave_idx_type>& ra_idx);
 
   T& elem (octave_idx_type n)
     {
       make_unique ();
       return xelem (n);
     }
 
   T& elem (octave_idx_type i, octave_idx_type j) { return elem (dim1()*j+i); }
@@ -418,58 +383,29 @@ public:
   T& operator () (const Array<octave_idx_type>& ra_idx) { return checkelem (ra_idx); }
 #else
   T& operator () (octave_idx_type n) { return elem (n); }
   T& operator () (octave_idx_type i, octave_idx_type j) { return elem (i, j); }
   T& operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k) { return elem (i, j, k); }
   T& operator () (const Array<octave_idx_type>& ra_idx) { return elem (ra_idx); }
 #endif
 
-  crefT checkelem (octave_idx_type n) const
-    {
-      if (n < 0 || n >= slice_len)
-        return range_error ("T Array<T>::checkelem", n);
-      else
-        return xelem (n);
-    }
-
-  crefT checkelem (octave_idx_type i, octave_idx_type j) const
-    {
-      if (i < 0 || j < 0 || i >= dim1 () || j >= dim2 ())
-        return range_error ("T Array<T>::checkelem", i, j);
-      else
-        return elem (dim1()*j+i);
-    }
-
-  crefT checkelem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const
-    {
-      if (i < 0 || j < 0 || k < 0 || i >= dim1 () || j >= dim2 () || k >= dim3 ())
-        return range_error ("T Array<T>::checkelem", i, j, k);
-      else
-        return Array<T>::elem (i, Array<T>::dim1()*k+j);
-    }
-
-  crefT checkelem (const Array<octave_idx_type>& ra_idx) const
-    {
-      octave_idx_type i = compute_index (ra_idx);
-
-      if (i < 0)
-        return range_error ("T Array<T>::checkelem", ra_idx);
-      else
-        return Array<T>::elem (i);
-    }
+  crefT checkelem (octave_idx_type n) const;
+  crefT checkelem (octave_idx_type i, octave_idx_type j) const;
+  crefT checkelem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const;
+  crefT checkelem (const Array<octave_idx_type>& ra_idx) const;
 
   crefT elem (octave_idx_type n) const { return xelem (n); }
 
-  crefT elem (octave_idx_type i, octave_idx_type j) const { return elem (dim1()*j+i); }
+  crefT elem (octave_idx_type i, octave_idx_type j) const { return xelem (i, j); }
 
-  crefT elem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const { return elem (i, dim2()*k+j); }
+  crefT elem (octave_idx_type i, octave_idx_type j, octave_idx_type k) const { return xelem (i, j, k); }
 
   crefT elem (const Array<octave_idx_type>& ra_idx) const
-    { return Array<T>::elem (compute_index (ra_idx)); }
+    { return Array<T>::xelem (compute_index (ra_idx)); }
 
 #if defined (BOUNDS_CHECKING)
   crefT operator () (octave_idx_type n) const { return checkelem (n); }
   crefT operator () (octave_idx_type i, octave_idx_type j) const { return checkelem (i, j); }
   crefT operator () (octave_idx_type i, octave_idx_type j, octave_idx_type k) const { return checkelem (i, j, k); }
   crefT operator () (const Array<octave_idx_type>& ra_idx) const { return checkelem (ra_idx); }
 #else
   crefT operator () (octave_idx_type n) const { return elem (n); }
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2010-02-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array-util.cc (gripe_index_out_of_range): New function.
+	* Array.cc (Array<T>::range_error): Remove.
+	(Array<T>::checkelem): Rewrite.
+	(Array<T>::index, Array<T>::delete_elements): Simplify.
+	* DiagArray2.cc (DiagArray2::checkelem): Use gripe_index_out_of_range.
+	* Range.cc (Range::checkelem, Range::index): Ditto.
+
 2010-02-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* mx-inlines.cc (OP_DUP_FCN): Remove.
 	(mx_inline_dup): Remove.
 	(mx_inline_not): Remove.
 	(mx_inline_make_complex): Remove.
 	(mx_inline_change_sign): Remove.
 	(mx_inline_fabs_dup): Remove.
diff --git a/liboctave/DiagArray2.cc b/liboctave/DiagArray2.cc
--- a/liboctave/DiagArray2.cc
+++ b/liboctave/DiagArray2.cc
@@ -80,18 +80,20 @@ DiagArray2<T>::hermitian (T (* fcn) (con
 }
 
 // A two-dimensional array with diagonal elements only.
 
 template <class T>
 T
 DiagArray2<T>::checkelem (octave_idx_type r, octave_idx_type c) const
 {
-  if (r < 0 || c < 0 || r >= dim1 () || c >= dim2 ())
-    (*current_liboctave_error_handler) ("range error in DiagArray2");
+  if (r < 0 || r >= dim1 ())
+    gripe_index_out_of_range (2, 1, r+1, dim1 ());
+  if (c < 0 || c >= dim2 ())
+    gripe_index_out_of_range (2, 2, c+1, dim2 ());
 
   return elem (r, c);
 }
 
 template <class T>
 void
 DiagArray2<T>::resize (octave_idx_type r, octave_idx_type c,
                        const T& rfv)
diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -30,16 +30,17 @@ along with Octave; see the file COPYING.
 #include <iostream>
 #include <limits>
 
 #include "Range.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
 #include "lo-math.h"
 #include "lo-utils.h"
+#include "Array-util.h"
 
 Range::Range (double b, double i, octave_idx_type n)
   : rng_base (b), rng_limit (b + n * i), rng_inc (i), 
   rng_nelem (n), cache ()
 {
   if (! xfinite (b) || ! xfinite (i))
     rng_nelem = -2;
 }
@@ -80,17 +81,17 @@ Range::matrix_value (void) const
 
   return cache;
 }
 
 double
 Range::checkelem (octave_idx_type i) const
 {
   if (i < 0 || i >= rng_nelem)
-    (*current_liboctave_error_handler) ("Range::elem (%d): range error", i);
+    gripe_index_out_of_range (1, 1, i+1, rng_nelem);
 
   return rng_base + rng_inc * i;
 }
 
 struct _rangeidx_helper
 {
   double *array, base, inc;
   _rangeidx_helper (double *a, double b, double i) 
@@ -105,23 +106,21 @@ Range::index (const idx_vector& i) const
   Array<double> retval;
 
   octave_idx_type n = rng_nelem;
 
   if (i.is_colon ())
     {
       retval = matrix_value ().reshape (dim_vector (rng_nelem, 1));
     }
-  else if (i.extent (n) != n)
-    {
-      (*current_liboctave_error_handler)
-        ("A(I): Index exceeds matrix dimension.");
-    }
   else
     {
+      if (i.extent (n) != n)
+        gripe_index_out_of_range (1, 1, i.extent (n), n); // throws
+
       dim_vector rd = i.orig_dimensions ();
       octave_idx_type il = i.length (n);
 
       // taken from Array.cc.
 
       if (n != 1 && rd.is_vector ())
         rd = dim_vector (1, il);
 
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -152,24 +152,28 @@ public:
   {
     rep[0] = r;
     rep[1] = c;
     rep[2] = p;
   }
 
   octave_idx_type& elem (int i)
   {
+#ifdef BOUNDS_CHECKING
     assert (i >= 0 && i < ndims ());
+#endif
     make_unique ();
     return rep[i];
   }
 
   octave_idx_type elem (int i) const
   {
+#ifdef BOUNDS_CHECKING
     assert (i >= 0 && i < ndims ());
+#endif
     return rep[i];
   }
 
   void chop_trailing_singletons (void)
   {
     int l = ndims ();
     if (l > 2 && rep[l-1] == 1)
       {
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-02-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-base-mat.cc (do_index_op): Use checkelem for scalar indices.
+	Simplify.
+
 2010-02-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* src/xpow.cc: Update.
 	* src/ov-base-diag.cc: Update.
 
 2010-02-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/str2double.cc (single_number): New helper func.
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -131,32 +131,33 @@ octave_value
 octave_base_matrix<MT>::do_index_op (const octave_value_list& idx,
                                      bool resize_ok)
 {
   octave_value retval;
 
   octave_idx_type n_idx = idx.length ();
 
   int nd = matrix.ndims ();
+  const MT& cmatrix = matrix;
 
   switch (n_idx)
     {
     case 0:
       retval = matrix;
       break;
 
     case 1:
       {
         idx_vector i = idx (0).index_vector ();
 
         if (! error_state)
           {
             // optimize single scalar index.
-            if (i.is_scalar () && i(0) < matrix.numel ())
-              retval = const_cast<const MT&> (matrix)(i(0));
+            if (! resize_ok && i.is_scalar ())
+              retval = cmatrix.checkelem (i(0));
             else
               retval = MT (matrix.index (i, resize_ok));
           }
       }
       break;
 
     case 2:
       {
@@ -164,57 +165,45 @@ octave_base_matrix<MT>::do_index_op (con
 
         if (! error_state)
           {
             idx_vector j = idx (1).index_vector ();
 
             if (! error_state)
               {
                 // optimize two scalar indices.
-                if (i.is_scalar () && j.is_scalar () && nd == 2
-                    && i(0) < matrix.rows () && j(0) < matrix.columns ())
-                  retval = const_cast<const MT&> (matrix)(i(0), j(0));
+                if (! resize_ok && i.is_scalar () && j.is_scalar ())
+                  retval = cmatrix.checkelem (i(0), j(0));
                 else
                   retval = MT (matrix.index (i, j, resize_ok));
               }
           }
       }
       break;
 
     default:
       {
         Array<idx_vector> idx_vec (n_idx, 1);
-        bool scalar_opt = n_idx == nd;
+        bool scalar_opt = n_idx == nd && ! resize_ok;
         const dim_vector dv = matrix.dims ();
 
         for (octave_idx_type i = 0; i < n_idx; i++)
           {
             idx_vec(i) = idx(i).index_vector ();
 
             if (error_state)
               break;
 
-            scalar_opt = (scalar_opt && idx_vec(i).is_scalar ()
-                          && idx_vec(i)(0) < dv(0));
+            scalar_opt = (scalar_opt && idx_vec(i).is_scalar ());
           }
 
         if (! error_state)
           {
             if (scalar_opt)
-              {
-                // optimize all scalar indices. Don't construct an index array,
-                // but rather calc a scalar index directly.
-                octave_idx_type k = 1, j = 0;
-                for (octave_idx_type i = 0; i < n_idx; i++)
-                  {
-                    j += idx_vec(i)(0) * k;
-                    k *= dv (i);
-                  }
-                retval = const_cast<const MT&> (matrix)(j);
-              }
+              retval = cmatrix.checkelem (conv_to_int_array (idx_vec));
             else
               retval = MT (matrix.index (idx_vec, resize_ok));
           }
       }
       break;
     }
 
   return retval;
diff --git a/test/test_struct.m b/test/test_struct.m
--- a/test/test_struct.m
+++ b/test/test_struct.m
@@ -256,9 +256,9 @@
 %!test
 %!  s = resize(struct(),3,2);
 %!  s(3).foo = 42;
 %!  assert (s(3), struct ("foo", 42));
 
 %!error <Index exceeds matrix dimension>
 %!  s = resize(struct(),3,2);
 %!  s(3).foo = 42;
-%!  s(7);
\ No newline at end of file
+%!  s(7);
