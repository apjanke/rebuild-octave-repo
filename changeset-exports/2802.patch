# HG changeset patch
# User jwe
# Date 857905398 0
#      Sun Mar 09 11:03:18 1997 +0000
# Node ID bca5fbab2e521a574707a6452fa1f800b97d1460
# Parent  a98f5a21f026928a3aa0b77e330b2e6015670f2d
[project @ 1997-03-09 11:02:27 by jwe]

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -166,17 +166,17 @@ public:
 
   T& xelem (int n) { return rep->elem (n); }
   T xelem (int n) const { return rep->elem (n); }
 
   // XXX FIXME XXX -- would be nice to fix this so that we don't
   // unnecessarily force a copy, but that is not so easy, and I see no
   // clean way to do it.
 
-  T& Array<T>::checkelem (int n)
+  T& checkelem (int n)
     {
       if (n < 0 || n >= rep->length ())
 	return range_error ("T& Array<T>::checkelem", n);
       else
 	{
 	  make_unique ();
 	  return xelem (n);
 	}
@@ -189,30 +189,30 @@ public:
     }
 
 #if defined (BOUNDS_CHECKING)
   T& operator () (int n) { return checkelem (n); }
 #else
   T& operator () (int n) { return elem (n); }
 #endif
 
-  T Array<T>::checkelem (int n) const
+  T checkelem (int n) const
     {
       if (n < 0 || n >= rep->length ())
 	return range_error ("T Array<T>::checkelem", n);
       else
 	return xelem (n);
     }
 
-  T Array<T>::elem (int n) const { return xelem (n); }
+  T elem (int n) const { return xelem (n); }
 
 #if defined (BOUNDS_CHECKING)
-  T Array<T>::operator () (int n) const { return checkelem (n); }
+  T operator () (int n) const { return checkelem (n); }
 #else
-  T Array<T>::operator () (int n) const { return elem (n); }
+  T operator () (int n) const { return elem (n); }
 #endif
 
   void resize (int n);
   void resize (int n, const T& val);
 
   const T *data (void) const { return rep->data; }
 
   T *fortran_vec (void);
diff --git a/liboctave/data-conv.h b/liboctave/data-conv.h
--- a/liboctave/data-conv.h
+++ b/liboctave/data-conv.h
@@ -79,17 +79,17 @@ enum save_type
   {
     LS_U_CHAR,
     LS_U_SHORT,
     LS_U_INT,
     LS_CHAR,
     LS_SHORT,
     LS_INT,
     LS_FLOAT,
-    LS_DOUBLE,
+    LS_DOUBLE
   };
 
 extern void
 do_double_format_conversion (double *data, int len,
 			     oct_mach_info::float_format fmt);
 
 extern void
 do_float_format_conversion (float *data, int len,
diff --git a/liboctave/dbleQR.h b/liboctave/dbleQR.h
--- a/liboctave/dbleQR.h
+++ b/liboctave/dbleQR.h
@@ -35,17 +35,17 @@ class
 QR
 {
 public:
 
   enum type
     {
       std,
       raw,
-      economy,
+      economy
     };
 
   QR (void) : q (), r () { }
 
   QR (const Matrix&, QR::type = QR::std);
 
   QR (const QR& a) : q (a.q), r (a.r) { }
 
diff --git a/liboctave/dbleSVD.h b/liboctave/dbleSVD.h
--- a/liboctave/dbleSVD.h
+++ b/liboctave/dbleSVD.h
@@ -36,17 +36,17 @@ class
 SVD
 {
 public:
 
   enum type
     {
       std,
       economy,
-      sigma_only,
+      sigma_only
     };
 
   SVD (void) : sigma (), left_sm (), right_sm () { }
 
   SVD (const Matrix& a, type svd_type = SVD::std) { init (a, svd_type); }
 
   SVD (const Matrix& a, int& info, type svd_type = SVD::std)
     {
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -37,17 +37,17 @@ idx_vector
 {
 private:
 
   class
   idx_vector_rep
   {
   public:
 
-    idx_vector_rep::idx_vector_rep (void)
+    idx_vector_rep (void)
       {
 	colon = 0;
 	len = 0;
 	num_zeros = 0;
 	num_ones = 0;
 	one_zero = 0;
 	orig_nr = 0;
 	orig_nc = 0;
@@ -65,17 +65,17 @@ private:
     idx_vector_rep (const Range& r);
 
     idx_vector_rep (double d);
 
     idx_vector_rep (char c);
 
     idx_vector_rep (const idx_vector_rep& a);
 
-    idx_vector_rep::~idx_vector_rep (void) { delete [] data; }
+    ~idx_vector_rep (void) { delete [] data; }
 
     idx_vector_rep& operator = (const idx_vector_rep& a);
 
     int ok (void) { return initialized; }
 
     int capacity (void) const { return len; }
     int length (int colon_len) const { return colon ? colon_len : len; }
 
@@ -128,17 +128,17 @@ private:
 
     void init_state (void);
 
     void maybe_convert_one_zero_to_idx (int z_len, int prefer_zero_one);
   };
 
 public:
 
-  idx_vector::idx_vector (void)
+  idx_vector (void)
     {
       rep = new idx_vector_rep ();
       rep->count = 1;
     }
 
   idx_vector (const ColumnVector& v)
     {
       rep = new idx_vector_rep (v);
@@ -170,17 +170,17 @@ public:
     }
 
   idx_vector (const idx_vector& a)
     {
       rep = a.rep;
       rep->count++;
     }
 
-  idx_vector::~idx_vector (void)
+  ~idx_vector (void)
     {
       if (--rep->count <= 0)
 	delete rep;
     }
 
   idx_vector& operator = (const idx_vector& a)
     {
       if (this != &a)
@@ -189,32 +189,32 @@ public:
 	    delete rep;
 
 	  rep = a.rep;
 	  rep->count++;
 	}
       return *this;
     }
 
-  idx_vector::operator void * () const
+  operator void * () const
     { return static_cast<void *> (rep->ok ()); }
 
-  int idx_vector::capacity (void) const { return rep->capacity (); }
-  int idx_vector::length (int cl) const { return rep->length (cl); }
+  int capacity (void) const { return rep->capacity (); }
+  int length (int cl) const { return rep->length (cl); }
 
-  int idx_vector::elem (int n) const { return rep->elem (n); }
-  int idx_vector::checkelem (int n) const { return rep->checkelem (n); }
-  int idx_vector::operator () (int n) const { return rep->operator () (n); }
+  int elem (int n) const { return rep->elem (n); }
+  int checkelem (int n) const { return rep->checkelem (n); }
+  int operator () (int n) const { return rep->operator () (n); }
 
-  int idx_vector::max (void) const { return rep->max (); }
-  int idx_vector::min (void) const { return rep->min (); }
+  int max (void) const { return rep->max (); }
+  int min (void) const { return rep->min (); }
 
-  int idx_vector::one_zero_only (void) const { return rep->one_zero_only (); }
-  int idx_vector::zeros_count (void) const { return rep->zeros_count (); }
-  int idx_vector::ones_count (void) const { return rep->ones_count (); }
+  int one_zero_only (void) const { return rep->one_zero_only (); }
+  int zeros_count (void) const { return rep->zeros_count (); }
+  int ones_count (void) const { return rep->ones_count (); }
 
   int is_colon (void) const { return rep->is_colon (); }
   int is_colon_equiv (int n, int sort_uniq = 0) const
     { return rep->is_colon_equiv (n, sort_uniq); }
 
   int orig_rows (void) const { return rep->orig_rows (); }
   int orig_columns (void) const { return rep->orig_columns (); }
 
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -259,31 +259,31 @@ atan (const Complex& x)
   static Complex i (0, 1);
   Complex retval = i * log ((i + x) / (i - x)) / 2.0;
   return retval;
 }
 
 Complex
 atanh (const Complex& x)
 {
-  static Complex i (0, 1);
   Complex retval = log ((1 + x) / (1 - x)) / 2.0;
   return retval;
 }
 
 Complex
 ceil (const Complex& x)
 {
   return Complex (ceil (real (x)), ceil (imag (x)));
 }
 
 Complex
 fix (const Complex& x)
 {
-  return Complex (real (x), imag (x));
+  return Complex (static_cast<int> (real (x)),
+		  static_cast<int> (imag (x)));
 }
 
 Complex
 floor (const Complex& x)
 {
   return Complex (floor (real (x)), floor (imag (x)));
 }
 
diff --git a/liboctave/prog-args.cc b/liboctave/prog-args.cc
--- a/liboctave/prog-args.cc
+++ b/liboctave/prog-args.cc
@@ -28,17 +28,17 @@ Software Foundation, 59 Temple Place - S
 
 #include "prog-args.h"
 
 int
 prog_args::getopt (void)
 {
   if (long_opts)
     return ::getopt_long (xargc, xargv, short_opts,
-			  (struct option *) long_opts, 0);
+			  static_cast<const struct option *> (long_opts), 0);
   else
     return ::getopt (xargc, xargv, short_opts);
 }
 
 const char *
 prog_args::optarg (void)
 {
   return ::optarg;
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -438,17 +438,17 @@ DEFUN (pwd, , nargout,
     }
 
   return retval;
 }
 
 DEFUN (readdir, args, ,
   "[FILES, STATUS, MSG] = readdir (NAME)\n\
 \n\
-Return an array of strings containing the list of all files in the
+Return an array of strings containing the list of all files in the\n\
 named directory in FILES, or an empty matrix if an error occurs\n\
 \n\
 If successful, STATUS is 0 and MSG is an empty string.  Otherwise,\n\
 STATUS is nonzero and MSG contains a system-dependent error message.")
 {
   octave_value_list retval;
 
   retval(2) = string ();
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -250,17 +250,17 @@ handle_message (error_fun f, const char 
 }
 
 DEFUN (error, args, ,
   "error (FMT, ...): print message according to FMT and set error state.\n\
 \n\
 This should eventually take us up to the top level, possibly\n\
 printing traceback messages as we go.\n\
 \n\
-If the resulting error message ends in a newline character, traceback
+If the resulting error message ends in a newline character, traceback\n\
 messages are not printed.\n\
 \n\
 See also: printf") 
 {
   return handle_message (error, "unspecified error", args);
 }
 
 DEFUN (warning, args, ,
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -929,17 +929,17 @@ Reads data in binary form of type PRECIS
    float, float32, real*4         --  single precision float\n\
    double, float64, real*8        --  double precision float\n\
    int16, integer*2               --  two byte integer\n\
    int32, integer*4               --  four byte integer\n\
 \n\
   SKIP      : number of bytes to skip before each element is read\n\
               (default is 0)\n\
 \n\
-  ARCH      : string specifying the data format for the file.  Valid
+  ARCH      : string specifying the data format for the file.  Valid\n\
               values are\n\
 \n\
     native   --  the format of the current machine (default)\n\
     ieee-le  --  IEEE big endian\n\
     ieee-be  --  IEEE little endian\n\
     vaxd     --  VAX D floating format\n\
     vaxg     --  VAX G floating format\n\
     cray     --  Cray floating format\n\
@@ -1066,30 +1066,29 @@ DEFUN (fwrite, args, ,
    float, float32, real*4         --  single precision float\n\
    double, float64, real*8        --  double precision float\n\
    int16, integer*2               --  two byte integer\n\
    int32, integer*4               --  four byte integer\n\
 \n\
   SKIP      : number of bytes to skip before each element is read\n\
               (the default is 0)\n\
 \n\
-  ARCH      : string specifying the data format for the file.  Valid
+  ARCH      : string specifying the data format for the file.  Valid\n\
               values are\n\
 \n\
     native   --  the format of the current machine (default)\n\
     ieee-le  --  IEEE big endian\n\
     ieee-be  --  IEEE little endian\n\
     vaxd     --  VAX D floating format\n\
     vaxg     --  VAX G floating format\n\
-    cray     --  Cray floating format\n
+    cray     --  Cray floating format\n\
 \n\
   however, conversions are currently only supported for ieee-be, and\n\
   ieee-le formats.\n\
 \n\
-\n\
   COUNT     : number of elements written")
 {
   octave_value retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin > 1 && nargin < 6)
     {
@@ -1302,20 +1301,20 @@ convert (int x, int ibase, int obase)
     }
 
   return retval;
 }
 
 DEFUN (umask, args, ,
   "umask (MASK)\n\
 \n\
-Change the file permission mask for file creation for the current
-process.  MASK is an integer, interpreted as an octal number.  If
-successful, returns the previous value of the mask (as an integer to
-be interpreted as an octal number); otherwise an error message is
+Change the file permission mask for file creation for the current\n\
+process.  MASK is an integer, interpreted as an octal number.  If\n\
+successful, returns the previous value of the mask (as an integer to\n\
+be interpreted as an octal number); otherwise an error message is\n\
 printed.")
 {
   octave_value_list retval;
 
   int status = 0;
 
   if (args.length () == 1)
     {
diff --git a/src/fsolve.cc b/src/fsolve.cc
--- a/src/fsolve.cc
+++ b/src/fsolve.cc
@@ -124,17 +124,17 @@ fsolve_user_function (const ColumnVector
 DEFUN_DLD (fsolve, args, nargout,
   "Solve nonlinear equations using Minpack.  Usage:\n\
 \n\
   [X, INFO] = fsolve (F, X0)\n\
 \n\
 Where the first argument is the name of the  function to call to\n\
 compute the vector of function values.  It must have the form\n\
 \n\
-  y = f (x)
+  y = f (x)\n\
 \n\
 where y and x are vectors.")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin != 2 || nargout > 3)
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -1097,17 +1097,17 @@ get_user_input (const octave_value_list&
     goto again;
 
   return retval;
 }
 
 DEFUN (input, args, ,
   "input (PROMPT [, S])\n\
 \n\
-Prompt user for input.  If the second argument is present, return
+Prompt user for input.  If the second argument is present, return\n\
 value as a string.")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     retval = get_user_input (args);
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1567,21 +1567,21 @@ do_load (istream& stream, const string& 
   return retval;
 }
 
 DEFUN_TEXT (load, args, nargout,
   "load [-force] [-ascii] [-binary] [-mat-binary] file [pattern ...]\n\
 \n\
 Load variables from a file.\n\
 \n\
-If no argument is supplied to select a format, load tries to read the
-named file as an Octave binary, then as a .mat file, and then as an
+If no argument is supplied to select a format, load tries to read the\n\
+named file as an Octave binary, then as a .mat file, and then as an\n\
 Octave text file.\n\
 \n\
-If the option -force is given, variables with the same names as those
+If the option -force is given, variables with the same names as those\n\
 found in the file will be replaced with the values read from the file.")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("load");
 
diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -245,17 +245,17 @@ must appear in the same relative order s
 \n\
 The second argument is a string containing the name of the objective\n\
 function to call.  The objective function must be of the form\n\
 \n\
   y = phi (x)\n\
 \n\
 where x is a vector and y is a scalar.\n\
 \n\
-The argument G is a string containing the name of the function that
+The argument G is a string containing the name of the function that\n\
 defines the nonlinear constraints.  It must be of the form\n\
 \n\
   y = g (x)\n\
 \n\
 where x is a vector and y is a vector.")
 #endif
 {
 /*
diff --git a/src/pt-fcn.cc b/src/pt-fcn.cc
--- a/src/pt-fcn.cc
+++ b/src/pt-fcn.cc
@@ -482,17 +482,17 @@ to the beginning")
     }
   else
     print_usage ("va_start");
 
   return retval;
 }
 
 DEFUN (vr_val, args, ,
-  "vr_val (X): append X to the list of optional return values for a
+  "vr_val (X): append X to the list of optional return values for a\n\
 function that allows a variable number of return values")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
diff --git a/src/qpsol.cc b/src/qpsol.cc
--- a/src/qpsol.cc
+++ b/src/qpsol.cc
@@ -426,17 +426,17 @@ show_qpsol_option (const string& keyword
 
 #if defined (QPSOL_MISSING)
 DEFUN_DLD (qpsol_options, , ,
   "This function requires QPSOL, which is not freely\n\
 redistributable.  For more information, read the file\n\
 libcruft/qpsol/README.MISSING in the source distribution.")
 #else
 DEFUN_DLD (qpsol_options, args, ,
-  "qpsol_options (KEYWORD, VALUE)\n
+  "qpsol_options (KEYWORD, VALUE)\n\
 \n\
 Set or show options for qpsol.  Keywords may be abbreviated\n\
 to the shortest match.")
 #endif
 {
   octave_value_list retval;
 
 #if defined (QPSOL_MISSING)
diff --git a/src/quad.cc b/src/quad.cc
--- a/src/quad.cc
+++ b/src/quad.cc
@@ -90,17 +90,17 @@ quad_user_function (double x)
 }
 
 DEFUN_DLD (quad, args, nargout,
   "[V, IER, NFUN] = quad (F, A, B [, TOL] [, SING])\n\
 \n\
 Where the first argument is the name of the  function to call to\n\
 compute the value of the integrand.  It must have the form\n\
 \n\
-  y = f (x)
+  y = f (x)\n\
 \n\
 where y and x are scalars.\n\
 \n\
 The second and third arguments are limits of integration.  Either or\n\
 both may be infinite.\n\
 \n\
 The optional argument tol is a vector that specifies the desired\n\
 accuracy of the result.  The first element of the vector is the desired\n\
diff --git a/src/syscalls.cc b/src/syscalls.cc
--- a/src/syscalls.cc
+++ b/src/syscalls.cc
@@ -141,17 +141,17 @@ Otherwise, FID is negative and MSG conta
   return retval;
 }
 
 DEFUN (exec, args, ,
  "[STATUS, MSG] = exec (FILE, ARGS)\n\
 \n\
 Replace current process with a new process.\n\
 \n\
-If successful, exec does not return.  If exec does return, status will
+If successful, exec does not return.  If exec does return, status will\n\
 be nonzero, and MSG will contain a system-dependent error message.")
 {
   octave_value_list retval;
 
   retval(1) = string ();
   retval(0) = -1.0;
 
   int nargin = args.length ();
@@ -601,17 +601,17 @@ STATUS is nonzero and MSG contains a sys
     print_usage ("pipe");
 
   return retval;
 }
 
 DEFUN (stat, args, ,
   "[S, ERR, MSG] = stat (NAME)\n\
 \n\
-  Given the name of a file, return a structure S with the following
+  Given the name of a file, return a structure S with the following\n\
   elements:\n\
 \n\
     dev     : id of device containing a directory entry for this file\n\
     ino     : file number of the file\n\
     modestr : file mode, as a string of ten letters or dashes as in ls -l\n\
     nlink   : number of links\n\
     uid     : user id of file's owner\n\
     gid     : group id of file's group \n\
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -815,17 +815,17 @@ do_octave_atexit (void)
 
       feval (fcn, 0);
     }
 }
 
 DEFUN (atexit, args, ,
   "atexit (NAME): register NAME as a function to call when Octave exits\n\
 \n\
-Functions are called with no arguments in the reverse of the order in
+Functions are called with no arguments in the reverse of the order in\n\
 which they were registered with atexit()")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1616,17 +1616,17 @@ symbols_of_variables (void)
   DEFCONST (argv, , 0, 0,
     "the command line arguments this program was invoked with");
 
   DEFVAR (echo_executing_commands, static_cast<double> (ECHO_OFF), 0,
 	  echo_executing_commands,
     "echo commands as they are executed");
 
   DEFCONST (error_text, "", 0, 0,
-    "the text of error messages that would have been printed in the
+    "the text of error messages that would have been printed in the\n\
 body of the most recent unwind_protect statement or the TRY part of\n\
 the most recent eval() command.  Outside of unwind_protect and\n\
 eval(), or if no error has ocurred within them, the value of\n\
 __error_text__ is guaranteed to be the empty string.");
 
   DEFVAR (history_file, default_history_file (), 0, history_file,
     "name of command history file");
 
@@ -1673,17 +1673,17 @@ install_builtin_variables (void)
 
 // Deleting names from the symbol tables.
 
 DEFUN_TEXT (clear, args, ,
   "clear [-x] [name ...]\n\
 \n\
 Clear symbol(s) matching a list of globbing patterns.\n\
 \n\
-If no arguments are given, clear all user-defined variables and
+If no arguments are given, clear all user-defined variables and\n\
 functions.\n\
 \n\
 With -x, exclude the named variables")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
