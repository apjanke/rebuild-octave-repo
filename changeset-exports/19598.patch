# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1421779409 18000
#      Tue Jan 20 13:43:29 2015 -0500
# Node ID 76478d2da117175a1b112435b8c02821c05b4a29
# Parent  db92e7e28e1fd3f18e0f5cf6046a722b041cb21d
unconditionally disable the octave_allocator class

* configure.ac: Delete the --enable-octave-allocator option.
* oct-alloc.h: Delete octave_allocator class.  Warn if file is
included.  Unconditionally define macros to be empty.
* NEWS: Make note of these changes.
* oct-alloc.cc: Delete.
* liboctave/util/module.mk (UTIL_SRC): Remove it from the list.

* make_int.cc, Cell.h, oct-obj.cc, oct-obj.h, audiodevinfo.cc,
ov-base-int.h, ov-base-scalar.h, ov-bool-mat.cc, ov-bool-mat.h,
ov-bool-sparse.cc, ov-bool-sparse.h, ov-bool.cc, ov-bool.h,
ov-builtin.cc, ov-builtin.h, ov-cell.cc, ov-cell.h, ov-ch-mat.h,
ov-class.cc, ov-class.h, ov-classdef.cc, ov-classdef.h, ov-complex.cc,
ov-complex.h, ov-cs-list.cc, ov-cs-list.h, ov-cx-diag.cc,
ov-cx-diag.h, ov-cx-mat.cc, ov-cx-mat.h, ov-cx-sparse.cc,
ov-cx-sparse.h, ov-dld-fcn.cc, ov-dld-fcn.h, ov-fcn-handle.cc,
ov-fcn-handle.h, ov-fcn-inline.cc, ov-fcn-inline.h, ov-fcn.cc,
ov-fcn.h, ov-float.cc, ov-float.h, ov-flt-complex.cc,
ov-flt-complex.h, ov-flt-cx-diag.cc, ov-flt-cx-diag.h,
ov-flt-cx-mat.cc, ov-flt-cx-mat.h, ov-flt-re-diag.cc,
ov-flt-re-diag.h, ov-flt-re-mat.cc, ov-flt-re-mat.h, ov-int16.cc,
ov-int32.cc, ov-int64.cc, ov-int8.cc, ov-intx.h, ov-java.cc,
ov-java.h, ov-mex-fcn.cc, ov-mex-fcn.h, ov-perm.cc, ov-perm.h,
ov-range.cc, ov-range.h, ov-re-diag.cc, ov-re-diag.h, ov-re-mat.cc,
ov-re-mat.h, ov-re-sparse.cc, ov-re-sparse.h, ov-scalar.cc,
ov-scalar.h, ov-str-mat.cc, ov-str-mat.h, ov-struct.cc, ov-struct.h,
ov-uint16.cc, ov-uint32.cc, ov-uint64.cc, ov-uint8.cc, ov-usr-fcn.cc,
ov-usr-fcn.h, ov.cc, ov.h, pt-const.cc, pt-const.h, idx-vector.cc,
idx-vector.h: Delete uses of oct-alloc.h and OCTAVE_ALLOCATOR macros.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -200,16 +200,23 @@ Summary of important user-visible change
 
     The internal class <Octave_map> was deprecated in Octave 3.8 and has
     been removed from Octave 4.2.  Replacement classes are
     <octave_map> (struct array) or <octave_scalar_map> for a single structure.
 
  ** The warning ID Octave:singular-matrix-div has been replaced by
     Octave:nearly-singular-matrix and Octave:singular-matrix.
 
+ ** The configure option --enable-octave-allocator has been removed.
+    The internal class <octave_allocator> declared in oct-alloc.h has
+    been removed.  The header remains, but is deprecated.  The macros to
+    access the class (DECLARE_OCTAVE_ALLOCATOR, DEFINE_OCTAVE_ALLOCATOR,
+    and DEFINE_OCTAVE_ALLOCATOR2) are now unconditionally defined to be
+    empty.
+
 Summary of important user-visible changes for version 4.0:
 ---------------------------------------------------------
 
  ** For compatibility with Matlab, the "backtrace" warning option is now
     enabled by default.
 
  ** The preference
 
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -227,29 +227,16 @@ BOUNDS_CHECKING=no
 AC_ARG_ENABLE([bounds-check],
   [AS_HELP_STRING([--enable-bounds-check],
     [enable bounds checking for indexing in internal array classes])],
   [if test "$enableval" = yes; then BOUNDS_CHECKING=yes; fi], [])
 if test $BOUNDS_CHECKING = yes; then
   AC_DEFINE(BOUNDS_CHECKING, 1, [Define to 1 to use internal bounds checking.])
 fi
 
-### Use Octave's built-in memory allocator rather than straightforward malloc.
-### Disabled by default.
-
-USE_OCTAVE_ALLOCATOR=no
-AC_ARG_ENABLE([octave-allocator],
-  [AS_HELP_STRING([--enable-octave-allocator],
-    [use the obsolete octave_allocator class for many of Octave's objects (mostly octave_value types).  You probably do NOT want to enable this feature.])],
-  [if test "$enableval" = yes; then USE_OCTAVE_ALLOCATOR=yes; fi], [])
-if test $USE_OCTAVE_ALLOCATOR = yes; then
-  AC_DEFINE(USE_OCTAVE_ALLOCATOR, 1,
-    [Define to 1 to use octave_allocator class.])
-fi
-
 ### Use atomic operations for internal reference counting.  This is required
 ### for thread-safe behavior (Qt Handles) but incurs a significant slowdown.
 ### Enabled by default until a higher performing solution can be found.
 
 USE_ATOMIC_REFCOUNT=yes
 AC_ARG_ENABLE([atomic-refcount],
   [AS_HELP_STRING([--disable-atomic-refcount],
     [Do not use atomic operations for internal reference counting.  This option is required for thread-safe behavior as used in the GUI's Qt plotting toolkit.  Performance for CLI-only builds is improved by disabling this feature.])],
@@ -3088,17 +3075,16 @@ Octave is now configured for $canonical_
 
   Default pager:               $DEFAULT_PAGER
   gnuplot:                     $GNUPLOT
 
   Build Octave GUI:                   $build_gui
   JIT compiler for loops:             $build_jit
   Build Java interface:               $build_java
   Do internal array bounds checking:  $BOUNDS_CHECKING
-  Use octave_allocator:               $USE_OCTAVE_ALLOCATOR
   Build static libraries:             $STATIC_LIBS
   Build shared libraries:             $SHARED_LIBS
   Dynamic Linking:                    $ENABLE_DYNAMIC_LINKING $DL_API_MSG
   Include support for GNU readline:   $USE_READLINE
   64-bit array dims and indexing:     $USE_64_BIT_IDX_T
   Experimental SMP multithreading:    $USE_OPENMP
 ])
 
@@ -3182,25 +3168,16 @@ fi
 if test $USE_ATOMIC_REFCOUNT = no; then
   AC_MSG_WARN([])
   AC_MSG_WARN([atomic reference counting disabled.])
   AC_MSG_WARN([This feature allows access to Octave data safely from])
   AC_MSG_WARN([another thread, and is required when using the GUI's Qt toolkit])
   AC_MSG_WARN([for plotting.])
   AC_MSG_WARN([])
 fi
-if test $USE_ATOMIC_REFCOUNT = yes; then
-  if test $USE_OCTAVE_ALLOCATOR = yes; then
-    AC_MSG_WARN([Using atomic reference counting.])
-    AC_MSG_WARN([Thread-safe behavior is not guaranteed unless the])
-    AC_MSG_WARN([octave_allocator class is also disabled.])
-    AC_MSG_WARN([])
-  fi
-  warn_msg_printed=true
-fi
 
 if $warn_msg_printed; then
   AC_MSG_NOTICE([])
   AC_MSG_NOTICE([NOTE: Libraries or auxiliary programs may be skipped if they are])
   AC_MSG_NOTICE([NOTE: not found OR if they are missing required features on your])
   AC_MSG_NOTICE([NOTE: system. ])
 fi
 
diff --git a/examples/code/make_int.cc b/examples/code/make_int.cc
--- a/examples/code/make_int.cc
+++ b/examples/code/make_int.cc
@@ -103,17 +103,16 @@ public:
   void decrement (void) { --scalar; }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 private:
 
   int scalar;
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 void
 octave_integer::print (std::ostream& os, bool pr_as_read_syntax) const
 {
   os << scalar;
@@ -306,11 +305,10 @@ DEFUN_DLD (doit, args, ,
       message ("doit", "your lucky number is: %d", my_value);
     }
   else
     gripe_wrong_type_arg ("doit", args(0));
 
   return retval;
 }
 
-DEFINE_OCTAVE_ALLOCATOR (octave_integer);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_integer, "integer", "integer");
diff --git a/libinterp/corefcn/Cell.h b/libinterp/corefcn/Cell.h
--- a/libinterp/corefcn/Cell.h
+++ b/libinterp/corefcn/Cell.h
@@ -22,17 +22,16 @@ along with Octave; see the file COPYING.
 */
 
 #if !defined (octave_Cell_h)
 #define octave_Cell_h 1
 
 #include <string>
 
 #include "Array.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 #include "ov.h"
 
 class octave_value_list;
 
 class
 OCTINTERP_API
 Cell : public Array<octave_value>
diff --git a/libinterp/corefcn/oct-obj.cc b/libinterp/corefcn/oct-obj.cc
--- a/libinterp/corefcn/oct-obj.cc
+++ b/libinterp/corefcn/oct-obj.cc
@@ -26,17 +26,16 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "error.h"
 #include "oct-obj.h"
 #include "Cell.h"
 
 // We are likely to have a lot of octave_value_list objects to allocate,
 // so make the grow_size large.
-DEFINE_OCTAVE_ALLOCATOR2(octave_value_list, 1024);
 
 octave_value_list::octave_value_list (const std::list<octave_value_list>& lst)
 {
   octave_idx_type n = 0;
   octave_idx_type nel = 0;
 
   // Determine number.
   for (std::list<octave_value_list>::const_iterator p = lst.begin ();
diff --git a/libinterp/corefcn/oct-obj.h b/libinterp/corefcn/oct-obj.h
--- a/libinterp/corefcn/oct-obj.h
+++ b/libinterp/corefcn/oct-obj.h
@@ -22,17 +22,16 @@ along with Octave; see the file COPYING.
 */
 
 #if !defined (octave_oct_obj_h)
 #define octave_oct_obj_h 1
 
 #include <string>
 #include <vector>
 
-#include "oct-alloc.h"
 #include "str-vec.h"
 #include "Array.h"
 
 #include "ov.h"
 #include "Cell.h"
 
 class
 OCTINTERP_API
@@ -165,17 +164,16 @@ private:
       resize (n + 1);
 
     return data(n);
   }
 
   const octave_value& elem (octave_idx_type n) const
   { return data(n); }
 
-  DECLARE_OCTAVE_ALLOCATOR
 };
 
 // Make it easy to build argument lists for built-in functions or for
 // returning values.
 
 inline octave_value_list
 ovl (const octave_value& a0)
 {
diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -540,23 +540,21 @@ private:
   Matrix y;
   octave_value userdata;
   RowVector left;
   RowVector right;
   PaStream *stream;
   PaStreamParameters output_parameters;
   audio_type type;
 
-  DECLARE_OCTAVE_ALLOCATOR
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 static const unsigned int BUFFER_SIZE = 8192;
 
-DEFINE_OCTAVE_ALLOCATOR (audioplayer);
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (audioplayer, "audioplayer", "audioplayer");
 
 static int
 octave_play_callback (const void *, void *output, unsigned long frames,
                       const PaStreamCallbackTimeInfo *,
                       PaStreamCallbackFlags, void *data)
 {
   audioplayer *player = static_cast<audioplayer *> (data);
@@ -1356,21 +1354,19 @@ private:
   Matrix y;
   octave_value userdata;
   std::vector<float> left;
   std::vector<float> right;
   PaStream *stream;
   PaStreamParameters input_parameters;
   audio_type type;
 
-  DECLARE_OCTAVE_ALLOCATOR
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
-DEFINE_OCTAVE_ALLOCATOR (audiorecorder);
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (audiorecorder, "audiorecorder", "audiorecorder");
 
 static int
 octave_record_callback (const void *input, void *, unsigned long frames,
                         const PaStreamCallbackTimeInfo *,
                         PaStreamCallbackFlags, void *data)
 {
   audiorecorder *recorder = static_cast<audiorecorder *> (data);
diff --git a/libinterp/octave-value/ov-base-int.h b/libinterp/octave-value/ov-base-int.h
--- a/libinterp/octave-value/ov-base-int.h
+++ b/libinterp/octave-value/ov-base-int.h
@@ -24,17 +24,16 @@ along with Octave; see the file COPYING.
 #define octave_ov_base_int_h 1
 
 #include <cstdlib>
 
 #include <iosfwd>
 #include <string>
 
 #include "mx-base.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "ov-base-scalar.h"
 #include "ov-typeinfo.h"
 
diff --git a/libinterp/octave-value/ov-base-scalar.h b/libinterp/octave-value/ov-base-scalar.h
--- a/libinterp/octave-value/ov-base-scalar.h
+++ b/libinterp/octave-value/ov-base-scalar.h
@@ -25,17 +25,16 @@ along with Octave; see the file COPYING.
 
 #include <cstdlib>
 
 #include <iosfwd>
 #include <string>
 
 #include "lo-mappers.h"
 #include "lo-utils.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 #include "MatrixType.h"
 
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 // Real scalar values.
 
diff --git a/libinterp/octave-value/ov-bool-mat.cc b/libinterp/octave-value/ov-bool-mat.cc
--- a/libinterp/octave-value/ov-bool-mat.cc
+++ b/libinterp/octave-value/ov-bool-mat.cc
@@ -47,17 +47,16 @@ along with Octave; see the file COPYING.
 
 #include "byte-swap.h"
 #include "ls-oct-ascii.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 
 template class octave_base_matrix<boolNDArray>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_bool_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_bool_matrix,
                                      "bool matrix", "logical");
 
 static octave_base_value *
 default_numeric_conversion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_bool_matrix&);
diff --git a/libinterp/octave-value/ov-bool-mat.h b/libinterp/octave-value/ov-bool-mat.h
--- a/libinterp/octave-value/ov-bool-mat.h
+++ b/libinterp/octave-value/ov-bool-mat.h
@@ -25,17 +25,16 @@ along with Octave; see the file COPYING.
 #define octave_ov_bool_mat_h 1
 
 #include <cstdlib>
 
 #include <iosfwd>
 #include <string>
 
 #include "mx-base.h"
-#include "oct-alloc.h"
 
 #include "error.h"
 #include "oct-stream.h"
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "ov-re-mat.h"
 #include "ov-typeinfo.h"
 
@@ -227,14 +226,13 @@ public:
   octave_value map (unary_mapper_t umap) const
   {
     octave_matrix m (array_value ());
     return m.map (umap);
   }
 
 protected:
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-bool-sparse.cc b/libinterp/octave-value/ov-bool-sparse.cc
--- a/libinterp/octave-value/ov-bool-sparse.cc
+++ b/libinterp/octave-value/ov-bool-sparse.cc
@@ -44,17 +44,16 @@ along with Octave; see the file COPYING.
 #include "ov-cx-sparse.h"
 #include "ov-bool-sparse.h"
 
 #include "ov-base-sparse.h"
 #include "ov-base-sparse.cc"
 
 template class OCTINTERP_API octave_base_sparse<SparseBoolMatrix>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_sparse_bool_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_sparse_bool_matrix,
                                      "sparse bool matrix", "logical");
 
 static octave_base_value *
 default_numeric_conversion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_sparse_bool_matrix&);
diff --git a/libinterp/octave-value/ov-bool-sparse.h b/libinterp/octave-value/ov-bool-sparse.h
--- a/libinterp/octave-value/ov-bool-sparse.h
+++ b/libinterp/octave-value/ov-bool-sparse.h
@@ -25,17 +25,16 @@ along with Octave; see the file COPYING.
 #define octave_ov_bool_sparse_h 1
 
 #include <cstdlib>
 
 #include <iosfwd>
 #include <string>
 
 #include "mx-base.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "oct-stream.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 #include "boolSparse.h"
@@ -148,14 +147,13 @@ public:
   octave_value map (unary_mapper_t umap) const
   {
     octave_sparse_matrix m (sparse_matrix_value ());
     return m.map (umap);
   }
 
 protected:
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-bool.cc b/libinterp/octave-value/ov-bool.cc
--- a/libinterp/octave-value/ov-bool.cc
+++ b/libinterp/octave-value/ov-bool.cc
@@ -41,17 +41,16 @@ along with Octave; see the file COPYING.
 #include "ov-scalar.h"
 #include "pr-output.h"
 
 #include "ls-oct-ascii.h"
 #include "ls-hdf5.h"
 
 template class octave_base_scalar<bool>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_bool);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_bool, "bool", "logical");
 
 static octave_base_value *
 default_numeric_conversion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_bool&);
 
diff --git a/libinterp/octave-value/ov-bool.h b/libinterp/octave-value/ov-bool.h
--- a/libinterp/octave-value/ov-bool.h
+++ b/libinterp/octave-value/ov-bool.h
@@ -25,17 +25,16 @@ along with Octave; see the file COPYING.
 
 #include <cstdlib>
 
 #include <iosfwd>
 #include <string>
 
 #include "lo-utils.h"
 #include "mx-base.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "oct-stream.h"
 #include "ov-base.h"
 #include "ov-base-scalar.h"
 #include "ov-bool-mat.h"
 #include "ov-scalar.h"
 #include "ov-typeinfo.h"
@@ -239,14 +238,13 @@ public:
   octave_value map (unary_mapper_t umap) const
   {
     octave_scalar m (scalar_value ());
     return m.map (umap);
   }
 
 private:
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-builtin.cc b/libinterp/octave-value/ov-builtin.cc
--- a/libinterp/octave-value/ov-builtin.cc
+++ b/libinterp/octave-value/ov-builtin.cc
@@ -28,17 +28,16 @@ along with Octave; see the file COPYING.
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov-builtin.h"
 #include "ov.h"
 #include "profiler.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 
-DEFINE_OCTAVE_ALLOCATOR (octave_builtin);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_builtin,
                                      "built-in function",
                                      "built-in function");
 
 octave_value_list
 octave_builtin::subsref (const std::string& type,
                          const std::list<octave_value_list>& idx,
diff --git a/libinterp/octave-value/ov-builtin.h b/libinterp/octave-value/ov-builtin.h
--- a/libinterp/octave-value/ov-builtin.h
+++ b/libinterp/octave-value/ov-builtin.h
@@ -105,14 +105,13 @@ protected:
 private:
 
   // No copying!
 
   octave_builtin (const octave_builtin& ob);
 
   octave_builtin& operator = (const octave_builtin& ob);
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -119,17 +119,16 @@ octave_base_matrix<Cell>::fast_elem_inse
   if (retval)
     matrix(n) = xrep->matrix(0);
 
   return retval;
 }
 
 template class octave_base_matrix<Cell>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_cell);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_cell, "cell", "cell");
 
 static void
 gripe_failed_assignment (void)
 {
   error ("assignment to cell array failed");
 }
diff --git a/libinterp/octave-value/ov-cell.h b/libinterp/octave-value/ov-cell.h
--- a/libinterp/octave-value/ov-cell.h
+++ b/libinterp/octave-value/ov-cell.h
@@ -26,17 +26,16 @@ along with Octave; see the file COPYING.
 
 #include <cstdlib>
 
 #include <iosfwd>
 #include <string>
 #include <memory>
 
 #include "mx-base.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "error.h"
 #include "ov-base-mat.h"
 #include "ov-typeinfo.h"
 
 class octave_value_list;
@@ -178,14 +177,13 @@ public:
 
 private:
 
   void clear_cellstr_cache (void) const
   { cellstr_cache.reset (); }
 
   mutable std::auto_ptr<Array<std::string> > cellstr_cache;
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-ch-mat.h b/libinterp/octave-value/ov-ch-mat.h
--- a/libinterp/octave-value/ov-ch-mat.h
+++ b/libinterp/octave-value/ov-ch-mat.h
@@ -25,17 +25,16 @@ along with Octave; see the file COPYING.
 #define octave_ov_ch_mat_h 1
 
 #include <cstdlib>
 
 #include <iosfwd>
 #include <string>
 
 #include "mx-base.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "ov.h"
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "ov-re-mat.h"
 #include "ov-typeinfo.h"
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -52,17 +52,16 @@ along with Octave; see the file COPYING.
 #include "ov-usr-fcn.h"
 #include "pager.h"
 #include "parse.h"
 #include "pr-output.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "variables.h"
 
-DEFINE_OCTAVE_ALLOCATOR(octave_class);
 
 int octave_class::t_id (-1);
 
 const std::string octave_class::t_name ("class");
 
 void
 octave_class::register_type (void)
 {
diff --git a/libinterp/octave-value/ov-class.h b/libinterp/octave-value/ov-class.h
--- a/libinterp/octave-value/ov-class.h
+++ b/libinterp/octave-value/ov-class.h
@@ -28,17 +28,16 @@ along with Octave; see the file COPYING.
 
 #include <iosfwd>
 #include <string>
 
 #include "mx-base.h"
 #include "str-vec.h"
 
 #include "error.h"
-#include "oct-alloc.h"
 #include "oct-map.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 class octave_value_list;
 
 class tree_walker;
 
@@ -202,17 +201,16 @@ public:
 #endif
 
   mxArray *as_mxArray (void) const;
 
 private:
 
   octave_map map;
 
-  DECLARE_OCTAVE_ALLOCATOR
 
 public:
   int type_id (void) const { return t_id; }
   std::string type_name (void) const { return t_name; }
   std::string class_name (void) const { return c_name; }
 
   static int static_type_id (void) { return t_id; }
   static std::string static_type_name (void) { return t_name; }
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -870,17 +870,16 @@ make_package (const std::string& nm,
   if (! nm.empty ())
     cdef_manager::register_package (pack);
 
   return pack;
 }
 
 //----------------------------------------------------------------------------
 
-DEFINE_OCTAVE_ALLOCATOR (octave_classdef);
 
 int octave_classdef::t_id (-1);
 
 const std::string octave_classdef::t_name ("object");
 
 void
 octave_classdef::register_type (void)
 {
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -1472,17 +1472,16 @@ public:
   octave_map map_value (void) const { return object.map_value (); }
 
   dim_vector dims (void) const { return object.dims (); }
 
 private:
   cdef_object object;
 
 private:
-  DECLARE_OCTAVE_ALLOCATOR
 
 public:
   int type_id (void) const { return t_id; }
   std::string type_name (void) const { return t_name; }
   std::string class_name (void) const { return object.class_name (); }
 
   static int static_type_id (void) { return t_id; }
   static std::string static_type_name (void) { return t_name; }
diff --git a/libinterp/octave-value/ov-complex.cc b/libinterp/octave-value/ov-complex.cc
--- a/libinterp/octave-value/ov-complex.cc
+++ b/libinterp/octave-value/ov-complex.cc
@@ -45,17 +45,16 @@ along with Octave; see the file COPYING.
 #include "pr-output.h"
 #include "ops.h"
 
 #include "ls-oct-ascii.h"
 #include "ls-hdf5.h"
 
 template class octave_base_scalar<Complex>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_complex);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_complex,
                                      "complex scalar", "double");
 
 static octave_base_value *
 default_numeric_demotion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_complex&);
diff --git a/libinterp/octave-value/ov-complex.h b/libinterp/octave-value/ov-complex.h
--- a/libinterp/octave-value/ov-complex.h
+++ b/libinterp/octave-value/ov-complex.h
@@ -25,17 +25,16 @@ along with Octave; see the file COPYING.
 
 #include <cstdlib>
 
 #include <iosfwd>
 #include <string>
 
 #include "lo-ieee.h"
 #include "mx-base.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "gripes.h"
 #include "error.h"
 #include "ov-base.h"
 #include "ov-cx-mat.h"
 #include "ov-base-scalar.h"
 #include "ov-typeinfo.h"
@@ -193,16 +192,15 @@ public:
   }
 
   mxArray *as_mxArray (void) const;
 
   octave_value map (unary_mapper_t umap) const;
 
 private:
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 typedef octave_complex octave_complex_scalar;
 
 #endif
diff --git a/libinterp/octave-value/ov-cs-list.cc b/libinterp/octave-value/ov-cs-list.cc
--- a/libinterp/octave-value/ov-cs-list.cc
+++ b/libinterp/octave-value/ov-cs-list.cc
@@ -30,17 +30,16 @@ along with Octave; see the file COPYING.
 #include "lo-utils.h"
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "ov-cs-list.h"
 #include "unwind-prot.h"
 
-DEFINE_OCTAVE_ALLOCATOR (octave_cs_list);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_cs_list, "cs-list", "cs-list");
 
 octave_cs_list::octave_cs_list (const Cell& c)
   : octave_base_value (), lst (c)
 {
 }
 
diff --git a/libinterp/octave-value/ov-cs-list.h b/libinterp/octave-value/ov-cs-list.h
--- a/libinterp/octave-value/ov-cs-list.h
+++ b/libinterp/octave-value/ov-cs-list.h
@@ -28,17 +28,16 @@ along with Octave; see the file COPYING.
 #include <iosfwd>
 #include <string>
 
 #include "mx-base.h"
 #include "str-vec.h"
 
 #include "Cell.h"
 #include "error.h"
-#include "oct-alloc.h"
 #include "oct-obj.h"
 #include "ov-typeinfo.h"
 
 class tree_walker;
 
 // Lists.
 
 class
@@ -78,14 +77,13 @@ public:
   octave_value_list subsref (const std::string& type,
                              const std::list<octave_value_list>& idx, int);
 
 private:
 
   // The list of Octave values.
   octave_value_list lst;
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-cx-diag.cc b/libinterp/octave-value/ov-cx-diag.cc
--- a/libinterp/octave-value/ov-cx-diag.cc
+++ b/libinterp/octave-value/ov-cx-diag.cc
@@ -31,17 +31,16 @@ along with Octave; see the file COPYING.
 #include "ov-re-diag.h"
 #include "ov-base-diag.cc"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ls-utils.h"
 
 template class octave_base_diag<ComplexDiagMatrix, ComplexMatrix>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_complex_diag_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_complex_diag_matrix,
                                      "complex diagonal matrix", "double");
 
 static octave_base_value *
 default_numeric_conversion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_complex_diag_matrix&);
diff --git a/libinterp/octave-value/ov-cx-diag.h b/libinterp/octave-value/ov-cx-diag.h
--- a/libinterp/octave-value/ov-cx-diag.h
+++ b/libinterp/octave-value/ov-cx-diag.h
@@ -84,14 +84,13 @@ public:
 
   octave_value map (unary_mapper_t umap) const;
 
 private:
 
   bool chk_valid_scalar (const octave_value&,
                          Complex&) const;
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-cx-mat.cc b/libinterp/octave-value/ov-cx-mat.cc
--- a/libinterp/octave-value/ov-cx-mat.cc
+++ b/libinterp/octave-value/ov-cx-mat.cc
@@ -53,17 +53,16 @@ along with Octave; see the file COPYING.
 
 #include "byte-swap.h"
 #include "ls-oct-ascii.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 
 template class octave_base_matrix<ComplexNDArray>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_complex_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_complex_matrix,
                                      "complex matrix", "double");
 
 static octave_base_value *
 default_numeric_demotion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_complex_matrix&);
diff --git a/libinterp/octave-value/ov-cx-mat.h b/libinterp/octave-value/ov-cx-mat.h
--- a/libinterp/octave-value/ov-cx-mat.h
+++ b/libinterp/octave-value/ov-cx-mat.h
@@ -25,17 +25,16 @@ along with Octave; see the file COPYING.
 #define octave_ov_cx_mat_h 1
 
 #include <cstdlib>
 
 #include <iosfwd>
 #include <string>
 
 #include "mx-base.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "oct-stream.h"
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "ov-typeinfo.h"
 
@@ -172,14 +171,13 @@ public:
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   mxArray *as_mxArray (void) const;
 
   octave_value map (unary_mapper_t umap) const;
 
 private:
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-cx-sparse.cc b/libinterp/octave-value/ov-cx-sparse.cc
--- a/libinterp/octave-value/ov-cx-sparse.cc
+++ b/libinterp/octave-value/ov-cx-sparse.cc
@@ -44,17 +44,16 @@ along with Octave; see the file COPYING.
 
 #include "ov-base-sparse.h"
 #include "ov-base-sparse.cc"
 
 #include "ov-bool-sparse.h"
 
 template class OCTINTERP_API octave_base_sparse<SparseComplexMatrix>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_sparse_complex_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_sparse_complex_matrix,
                                      "sparse complex matrix", "double");
 
 octave_base_value *
 octave_sparse_complex_matrix::try_narrowing_conversion (void)
 {
   octave_base_value *retval = 0;
diff --git a/libinterp/octave-value/ov-cx-sparse.h b/libinterp/octave-value/ov-cx-sparse.h
--- a/libinterp/octave-value/ov-cx-sparse.h
+++ b/libinterp/octave-value/ov-cx-sparse.h
@@ -25,17 +25,16 @@ along with Octave; see the file COPYING.
 #define octave_ov_cx_sparse_h 1
 
 #include <cstdlib>
 
 #include <iosfwd>
 #include <string>
 
 #include "mx-base.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "oct-stream.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 #include "CSparse.h"
@@ -149,14 +148,13 @@ public:
 #endif
 
   mxArray *as_mxArray (void) const;
 
   octave_value map (unary_mapper_t umap) const;
 
 private:
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-dld-fcn.cc b/libinterp/octave-value/ov-dld-fcn.cc
--- a/libinterp/octave-value/ov-dld-fcn.cc
+++ b/libinterp/octave-value/ov-dld-fcn.cc
@@ -28,17 +28,16 @@ along with Octave; see the file COPYING.
 
 #include <defaults.h>
 #include "dynamic-ld.h"
 #include "error.h"
 #include "oct-obj.h"
 #include "ov-dld-fcn.h"
 #include "ov.h"
 
-DEFINE_OCTAVE_ALLOCATOR (octave_dld_function);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_dld_function,
                                      "dynamically-linked function",
                                      "dynamically-linked function");
 
 
 octave_dld_function::octave_dld_function
   (octave_builtin::fcn ff, const octave_shlib& shl,
diff --git a/libinterp/octave-value/ov-dld-fcn.h b/libinterp/octave-value/ov-dld-fcn.h
--- a/libinterp/octave-value/ov-dld-fcn.h
+++ b/libinterp/octave-value/ov-dld-fcn.h
@@ -90,14 +90,13 @@ private:
   bool system_fcn_file;
 
   // No copying!
 
   octave_dld_function (const octave_dld_function& fn);
 
   octave_dld_function& operator = (const octave_dld_function& fn);
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -59,17 +59,16 @@ along with Octave; see the file COPYING.
 
 #include "byte-swap.h"
 #include "ls-ascii-helper.h"
 #include "ls-hdf5.h"
 #include "ls-oct-ascii.h"
 #include "ls-oct-binary.h"
 #include "ls-utils.h"
 
-DEFINE_OCTAVE_ALLOCATOR (octave_fcn_handle);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_fcn_handle,
                                      "function handle",
                                      "function_handle");
 
 const std::string octave_fcn_handle::anonymous ("@<anonymous>");
 
 octave_fcn_handle::octave_fcn_handle (const octave_value& f,
diff --git a/libinterp/octave-value/ov-fcn-handle.h b/libinterp/octave-value/ov-fcn-handle.h
--- a/libinterp/octave-value/ov-fcn-handle.h
+++ b/libinterp/octave-value/ov-fcn-handle.h
@@ -23,17 +23,16 @@ along with Octave; see the file COPYING.
 
 #if !defined (octave_ov_fcn_handle_h)
 #define octave_ov_fcn_handle_h 1
 
 #include <iosfwd>
 #include <string>
 #include <memory>
 
-#include "oct-alloc.h"
 
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "ov-fcn.h"
 #include "ov-typeinfo.h"
 
 // Function handles.
 
@@ -159,17 +158,16 @@ public:
 
   // Simple function handles are printed without a newline.
   bool print_as_scalar (void) const { return nm != anonymous; }
 
 private:
 
   bool set_fcn (const std::string &octaveroot, const std::string& fpath);
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 
 protected:
 
   // The function we are handling.
   octave_value fcn;
 
diff --git a/libinterp/octave-value/ov-fcn-inline.cc b/libinterp/octave-value/ov-fcn-inline.cc
--- a/libinterp/octave-value/ov-fcn-inline.cc
+++ b/libinterp/octave-value/ov-fcn-inline.cc
@@ -48,17 +48,16 @@ Open Source Initiative (www.opensource.o
 #include "toplev.h"
 
 #include "byte-swap.h"
 #include "ls-ascii-helper.h"
 #include "ls-oct-ascii.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 
-DEFINE_OCTAVE_ALLOCATOR (octave_fcn_inline);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_fcn_inline,
                                      "inline function",
                                      "function_handle");
 
 octave_fcn_inline::octave_fcn_inline (const std::string& f,
                                       const string_vector& a,
                                       const std::string& n)
diff --git a/libinterp/octave-value/ov-fcn-inline.h b/libinterp/octave-value/ov-fcn-inline.h
--- a/libinterp/octave-value/ov-fcn-inline.h
+++ b/libinterp/octave-value/ov-fcn-inline.h
@@ -21,17 +21,16 @@ along with Octave; see the file COPYING.
 */
 
 #if !defined (octave_ov_fcn_inline_h)
 #define octave_ov_fcn_inline_h 1
 
 #include <iosfwd>
 #include <string>
 
-#include "oct-alloc.h"
 
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "ov-fcn.h"
 #include "ov-typeinfo.h"
 #include "symtab.h"
 #include "ov-fcn-handle.h"
 
@@ -87,17 +86,16 @@ public:
 #endif
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 private:
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 
   // The expression of an inline function.
   std::string iftext;
 
   // The args of an inline function.
   string_vector ifargs;
diff --git a/libinterp/octave-value/ov-fcn.cc b/libinterp/octave-value/ov-fcn.cc
--- a/libinterp/octave-value/ov-fcn.cc
+++ b/libinterp/octave-value/ov-fcn.cc
@@ -23,17 +23,16 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "error.h"
 #include "oct-obj.h"
 #include "ov-fcn.h"
 
-DEFINE_OCTAVE_ALLOCATOR (octave_function);
 
 octave_base_value *
 octave_function::clone (void) const
 {
   panic_impossible ();
   return 0;
 }
 
diff --git a/libinterp/octave-value/ov-fcn.h b/libinterp/octave-value/ov-fcn.h
--- a/libinterp/octave-value/ov-fcn.h
+++ b/libinterp/octave-value/ov-fcn.h
@@ -23,17 +23,16 @@ along with Octave; see the file COPYING.
 #if !defined (octave_ov_fcn_h)
 #define octave_ov_fcn_h 1
 
 #include <string>
 
 #include "oct-time.h"
 #include "str-vec.h"
 
-#include "oct-alloc.h"
 #include "oct-obj.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 #include "symtab.h"
 
 class tree_walker;
 
 // Functions.
@@ -218,12 +217,11 @@ protected:
 private:
 
   // No copying!
 
   octave_function (const octave_function& f);
 
   octave_function& operator = (const octave_function& f);
 
-  DECLARE_OCTAVE_ALLOCATOR
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-float.cc b/libinterp/octave-value/ov-float.cc
--- a/libinterp/octave-value/ov-float.cc
+++ b/libinterp/octave-value/ov-float.cc
@@ -48,17 +48,16 @@ along with Octave; see the file COPYING.
 #include "xpow.h"
 #include "ops.h"
 
 #include "ls-oct-ascii.h"
 #include "ls-hdf5.h"
 
 template class octave_base_scalar<float>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_float_scalar);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_float_scalar, "float scalar",
                                      "single");
 
 octave_value
 octave_float_scalar::do_index_op (const octave_value_list& idx, bool resize_ok)
 {
   // FIXME: this doesn't solve the problem of
diff --git a/libinterp/octave-value/ov-float.h b/libinterp/octave-value/ov-float.h
--- a/libinterp/octave-value/ov-float.h
+++ b/libinterp/octave-value/ov-float.h
@@ -27,17 +27,16 @@ along with Octave; see the file COPYING.
 
 #include <iosfwd>
 #include <string>
 
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-base.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "gripes.h"
 #include "ov-base.h"
 #include "ov-re-mat.h"
 #include "ov-flt-re-mat.h"
 #include "ov-base-scalar.h"
 #include "ov-typeinfo.h"
@@ -249,14 +248,13 @@ public:
   mxArray *as_mxArray (void) const;
 
   octave_value map (unary_mapper_t umap) const;
 
   bool fast_elem_insert_self (void *where, builtin_type_t btyp) const;
 
 private:
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-flt-complex.cc b/libinterp/octave-value/ov-flt-complex.cc
--- a/libinterp/octave-value/ov-flt-complex.cc
+++ b/libinterp/octave-value/ov-flt-complex.cc
@@ -45,17 +45,16 @@ along with Octave; see the file COPYING.
 #include "pr-output.h"
 #include "ops.h"
 
 #include "ls-oct-ascii.h"
 #include "ls-hdf5.h"
 
 template class octave_base_scalar<FloatComplex>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_float_complex);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_float_complex,
                                      "float complex scalar", "single");
 
 octave_base_value *
 octave_float_complex::try_narrowing_conversion (void)
 {
   octave_base_value *retval = 0;
diff --git a/libinterp/octave-value/ov-flt-complex.h b/libinterp/octave-value/ov-flt-complex.h
--- a/libinterp/octave-value/ov-flt-complex.h
+++ b/libinterp/octave-value/ov-flt-complex.h
@@ -25,17 +25,16 @@ along with Octave; see the file COPYING.
 
 #include <cstdlib>
 
 #include <iosfwd>
 #include <string>
 
 #include "lo-ieee.h"
 #include "mx-base.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "gripes.h"
 #include "error.h"
 #include "ov-base.h"
 #include "ov-flt-cx-mat.h"
 #include "ov-base-scalar.h"
 #include "ov-typeinfo.h"
@@ -184,16 +183,15 @@ public:
   }
 
   mxArray *as_mxArray (void) const;
 
   octave_value map (unary_mapper_t umap) const;
 
 private:
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 typedef octave_float_complex octave_float_complex_scalar;
 
 #endif
diff --git a/libinterp/octave-value/ov-flt-cx-diag.cc b/libinterp/octave-value/ov-flt-cx-diag.cc
--- a/libinterp/octave-value/ov-flt-cx-diag.cc
+++ b/libinterp/octave-value/ov-flt-cx-diag.cc
@@ -30,17 +30,16 @@ along with Octave; see the file COPYING.
 #include "ov-base-diag.cc"
 #include "ov-flt-re-diag.h"
 #include "ov-flt-complex.h"
 #include "ov-flt-cx-mat.h"
 #include "ls-utils.h"
 
 template class octave_base_diag<FloatComplexDiagMatrix, FloatComplexMatrix>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_float_complex_diag_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_float_complex_diag_matrix,
                                      "float complex diagonal matrix", "single");
 
 static octave_base_value *
 default_numeric_conversion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_float_complex_diag_matrix&);
diff --git a/libinterp/octave-value/ov-flt-cx-diag.h b/libinterp/octave-value/ov-flt-cx-diag.h
--- a/libinterp/octave-value/ov-flt-cx-diag.h
+++ b/libinterp/octave-value/ov-flt-cx-diag.h
@@ -82,14 +82,13 @@ public:
 
   octave_value map (unary_mapper_t umap) const;
 
 private:
 
   bool chk_valid_scalar (const octave_value&,
                          FloatComplex&) const;
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-flt-cx-mat.cc b/libinterp/octave-value/ov-flt-cx-mat.cc
--- a/libinterp/octave-value/ov-flt-cx-mat.cc
+++ b/libinterp/octave-value/ov-flt-cx-mat.cc
@@ -57,17 +57,16 @@ along with Octave; see the file COPYING.
 
 #include "byte-swap.h"
 #include "ls-oct-ascii.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 
 template class octave_base_matrix<FloatComplexNDArray>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_float_complex_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_float_complex_matrix,
                                      "float complex matrix", "single");
 
 octave_base_value *
 octave_float_complex_matrix::try_narrowing_conversion (void)
 {
   octave_base_value *retval = 0;
diff --git a/libinterp/octave-value/ov-flt-cx-mat.h b/libinterp/octave-value/ov-flt-cx-mat.h
--- a/libinterp/octave-value/ov-flt-cx-mat.h
+++ b/libinterp/octave-value/ov-flt-cx-mat.h
@@ -25,17 +25,16 @@ along with Octave; see the file COPYING.
 #define octave_ov_flt_cx_mat_h 1
 
 #include <cstdlib>
 
 #include <iosfwd>
 #include <string>
 
 #include "mx-base.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "oct-stream.h"
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "ov-typeinfo.h"
 
@@ -170,14 +169,13 @@ public:
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   mxArray *as_mxArray (void) const;
 
   octave_value map (unary_mapper_t umap) const;
 
 private:
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-flt-re-diag.cc b/libinterp/octave-value/ov-flt-re-diag.cc
--- a/libinterp/octave-value/ov-flt-re-diag.cc
+++ b/libinterp/octave-value/ov-flt-re-diag.cc
@@ -29,17 +29,16 @@ along with Octave; see the file COPYING.
 #include "ov-flt-re-diag.h"
 #include "ov-base-diag.cc"
 #include "ov-float.h"
 #include "ov-flt-re-mat.h"
 #include "ls-utils.h"
 
 template class octave_base_diag<FloatDiagMatrix, FloatMatrix>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_float_diag_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_float_diag_matrix,
                                      "float diagonal matrix", "single");
 
 static octave_base_value *
 default_numeric_conversion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_float_diag_matrix&);
diff --git a/libinterp/octave-value/ov-flt-re-diag.h b/libinterp/octave-value/ov-flt-re-diag.h
--- a/libinterp/octave-value/ov-flt-re-diag.h
+++ b/libinterp/octave-value/ov-flt-re-diag.h
@@ -82,14 +82,13 @@ public:
 
   octave_value map (unary_mapper_t umap) const;
 
 private:
 
   bool chk_valid_scalar (const octave_value&,
                          float&) const;
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-flt-re-mat.cc b/libinterp/octave-value/ov-flt-re-mat.cc
--- a/libinterp/octave-value/ov-flt-re-mat.cc
+++ b/libinterp/octave-value/ov-flt-re-mat.cc
@@ -65,17 +65,16 @@ along with Octave; see the file COPYING.
 
 #include "byte-swap.h"
 #include "ls-oct-ascii.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<FloatNDArray>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_float_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_float_matrix, "float matrix",
                                      "single");
 
 octave_base_value *
 octave_float_matrix::try_narrowing_conversion (void)
 {
   octave_base_value *retval = 0;
diff --git a/libinterp/octave-value/ov-flt-re-mat.h b/libinterp/octave-value/ov-flt-re-mat.h
--- a/libinterp/octave-value/ov-flt-re-mat.h
+++ b/libinterp/octave-value/ov-flt-re-mat.h
@@ -25,17 +25,16 @@ along with Octave; see the file COPYING.
 #define octave_ov_flt_re_mat_h 1
 
 #include <cstdlib>
 
 #include <iosfwd>
 #include <string>
 
 #include "mx-base.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "oct-stream.h"
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "ov-typeinfo.h"
 
@@ -205,14 +204,13 @@ public:
   // You should not use it anywhere else.
   void *mex_get_data (void) const { return matrix.mex_get_data (); }
 
   mxArray *as_mxArray (void) const;
 
   octave_value map (unary_mapper_t umap) const;
 
 private:
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-int16.cc b/libinterp/octave-value/ov-int16.cc
--- a/libinterp/octave-value/ov-int16.cc
+++ b/libinterp/octave-value/ov-int16.cc
@@ -54,26 +54,24 @@ along with Octave; see the file COPYING.
 #include "ls-oct-ascii.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<int16NDArray>;
 
 template class octave_base_int_matrix<int16NDArray>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_int16_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int16_matrix,
                                      "int16 matrix", "int16");
 
 template class octave_base_scalar<octave_int16>;
 
 template class octave_base_int_scalar<octave_int16>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_int16_scalar);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int16_scalar,
                                      "int16 scalar", "int16");
 
 DEFUN (int16, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} int16 (@var{x})\n\
 Convert @var{x} to 16-bit integer type.\n\
diff --git a/libinterp/octave-value/ov-int32.cc b/libinterp/octave-value/ov-int32.cc
--- a/libinterp/octave-value/ov-int32.cc
+++ b/libinterp/octave-value/ov-int32.cc
@@ -54,26 +54,24 @@ along with Octave; see the file COPYING.
 #include "ls-oct-ascii.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<int32NDArray>;
 
 template class octave_base_int_matrix<int32NDArray>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_int32_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int32_matrix,
                                      "int32 matrix", "int32");
 
 template class octave_base_scalar<octave_int32>;
 
 template class octave_base_int_scalar<octave_int32>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_int32_scalar);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int32_scalar,
                                      "int32 scalar", "int32");
 
 DEFUN (int32, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} int32 (@var{x})\n\
 Convert @var{x} to 32-bit integer type.\n\
diff --git a/libinterp/octave-value/ov-int64.cc b/libinterp/octave-value/ov-int64.cc
--- a/libinterp/octave-value/ov-int64.cc
+++ b/libinterp/octave-value/ov-int64.cc
@@ -54,26 +54,24 @@ along with Octave; see the file COPYING.
 #include "ls-oct-ascii.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<int64NDArray>;
 
 template class octave_base_int_matrix<int64NDArray>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_int64_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int64_matrix,
                                      "int64 matrix", "int64");
 
 template class octave_base_scalar<octave_int64>;
 
 template class octave_base_int_scalar<octave_int64>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_int64_scalar);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int64_scalar,
                                      "int64 scalar", "int64");
 
 DEFUN (int64, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} int64 (@var{x})\n\
 Convert @var{x} to 64-bit integer type.\n\
diff --git a/libinterp/octave-value/ov-int8.cc b/libinterp/octave-value/ov-int8.cc
--- a/libinterp/octave-value/ov-int8.cc
+++ b/libinterp/octave-value/ov-int8.cc
@@ -54,26 +54,24 @@ along with Octave; see the file COPYING.
 #include "ls-oct-ascii.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<int8NDArray>;
 
 template class octave_base_int_matrix<int8NDArray>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_int8_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int8_matrix,
                                      "int8 matrix", "int8");
 
 template class octave_base_scalar<octave_int8>;
 
 template class octave_base_int_scalar<octave_int8>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_int8_scalar);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int8_scalar,
                                      "int8 scalar", "int8");
 
 DEFUN (int8, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} int8 (@var{x})\n\
 Convert @var{x} to 8-bit integer type.\n\
diff --git a/libinterp/octave-value/ov-intx.h b/libinterp/octave-value/ov-intx.h
--- a/libinterp/octave-value/ov-intx.h
+++ b/libinterp/octave-value/ov-intx.h
@@ -22,17 +22,16 @@ along with Octave; see the file COPYING.
 */
 
 #include <cstdlib>
 
 #include <iosfwd>
 #include <string>
 
 #include "mx-base.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "mxarray.h"
 #include "oct-stream.h"
 #include "ov-base.h"
 #include "ov-base-int.h"
 #include "ov-typeinfo.h"
@@ -370,17 +369,16 @@ public:
           octave_matrix m (array_value ());
           return m.map (umap);
         }
       }
   }
 
 private:
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 class
 OCTINTERP_API
 OCTAVE_VALUE_INT_SCALAR_T
   : public octave_base_int_scalar<OCTAVE_INT_T>
@@ -675,12 +673,11 @@ public:
           octave_scalar m (scalar_value ());
           return m.map (umap);
         }
       }
   }
 
 private:
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1564,17 +1564,16 @@ Java_org_octave_Octave_doEvalString (JNI
 JNIEXPORT jboolean JNICALL
 Java_org_octave_Octave_needThreadedInvokation (JNIEnv *env, jclass)
 {
   return (get_current_thread_ID (env) != octave_thread_ID);
 }
 
 // octave_java class definition
 
-DEFINE_OCTAVE_ALLOCATOR (octave_java);
 
 int octave_java::t_id (-1);
 
 const std::string octave_java::t_name ("octave_java");
 
 void
 octave_java::register_type (void)
 {
diff --git a/libinterp/octave-value/ov-java.h b/libinterp/octave-value/ov-java.h
--- a/libinterp/octave-value/ov-java.h
+++ b/libinterp/octave-value/ov-java.h
@@ -289,17 +289,16 @@ private:
 private:
 
   jobject java_object;
 
   jclass java_class;
 
   std::string java_classname;
 
-  DECLARE_OCTAVE_ALLOCATOR
 
 public:
   int type_id (void) const { return t_id; }
   std::string type_name (void) const { return t_name; }
   std::string class_name (void) const { return java_classname; }
 
   static int static_type_id (void) { return t_id; }
   static std::string static_type_name (void) { return t_name; }
diff --git a/libinterp/octave-value/ov-mex-fcn.cc b/libinterp/octave-value/ov-mex-fcn.cc
--- a/libinterp/octave-value/ov-mex-fcn.cc
+++ b/libinterp/octave-value/ov-mex-fcn.cc
@@ -32,17 +32,16 @@ along with Octave; see the file COPYING.
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov-mex-fcn.h"
 #include "ov.h"
 #include "profiler.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 
-DEFINE_OCTAVE_ALLOCATOR (octave_mex_function);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_mex_function,
                                      "mex function", "mex function");
 
 octave_mex_function::octave_mex_function
   (void *fptr, bool fmex, const octave_shlib& shl,
    const std::string& nm)
   : octave_function (nm), mex_fcn_ptr (fptr), exit_fcn_ptr (0),
diff --git a/libinterp/octave-value/ov-mex-fcn.h b/libinterp/octave-value/ov-mex-fcn.h
--- a/libinterp/octave-value/ov-mex-fcn.h
+++ b/libinterp/octave-value/ov-mex-fcn.h
@@ -109,14 +109,13 @@ private:
   bool system_fcn_file;
 
   // No copying!
 
   octave_mex_function (const octave_mex_function& fn);
 
   octave_mex_function& operator = (const octave_mex_function& fn);
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-perm.cc b/libinterp/octave-value/ov-perm.cc
--- a/libinterp/octave-value/ov-perm.cc
+++ b/libinterp/octave-value/ov-perm.cc
@@ -413,17 +413,16 @@ octave_value
 octave_perm_matrix::to_dense (void) const
 {
   if (! dense_cache.is_defined ())
     dense_cache = Matrix (matrix);
 
   return dense_cache;
 }
 
-DEFINE_OCTAVE_ALLOCATOR (octave_perm_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_perm_matrix,
                                      "permutation matrix", "double");
 
 static octave_base_value *
 default_numeric_conversion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_perm_matrix&);
diff --git a/libinterp/octave-value/ov-perm.h b/libinterp/octave-value/ov-perm.h
--- a/libinterp/octave-value/ov-perm.h
+++ b/libinterp/octave-value/ov-perm.h
@@ -225,14 +225,13 @@ protected:
   PermMatrix matrix;
 
   virtual octave_value to_dense (void) const;
 
   mutable octave_value dense_cache;
 
 private:
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-range.cc b/libinterp/octave-value/ov-range.cc
--- a/libinterp/octave-value/ov-range.cc
+++ b/libinterp/octave-value/ov-range.cc
@@ -43,17 +43,16 @@ along with Octave; see the file COPYING.
 #include "byte-swap.h"
 #include "ls-ascii-helper.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 
 // If TRUE, allow ranges with non-integer elements as array indices.
 static bool Vallow_noninteger_range_as_index = true;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_range);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_range, "range", "double");
 
 static octave_base_value *
 default_numeric_conversion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_range&);
 
diff --git a/libinterp/octave-value/ov-range.h b/libinterp/octave-value/ov-range.h
--- a/libinterp/octave-value/ov-range.h
+++ b/libinterp/octave-value/ov-range.h
@@ -28,17 +28,16 @@ along with Octave; see the file COPYING.
 #include <iosfwd>
 #include <string>
 
 #include "Range.h"
 
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-base.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "oct-stream.h"
 #include "ov-base.h"
 #include "ov-re-mat.h"
 #include "ov-typeinfo.h"
 
@@ -309,14 +308,13 @@ private:
   }
 
   mutable idx_vector *idx_cache;
 
   // No assignment.
 
   octave_range& operator = (const octave_range&);
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-re-diag.cc b/libinterp/octave-value/ov-re-diag.cc
--- a/libinterp/octave-value/ov-re-diag.cc
+++ b/libinterp/octave-value/ov-re-diag.cc
@@ -30,17 +30,16 @@ along with Octave; see the file COPYING.
 #include "ov-flt-re-diag.h"
 #include "ov-base-diag.cc"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ls-utils.h"
 
 template class octave_base_diag<DiagMatrix, Matrix>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_diag_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_diag_matrix, "diagonal matrix",
                                      "double");
 
 static octave_base_value *
 default_numeric_conversion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_diag_matrix&);
diff --git a/libinterp/octave-value/ov-re-diag.h b/libinterp/octave-value/ov-re-diag.h
--- a/libinterp/octave-value/ov-re-diag.h
+++ b/libinterp/octave-value/ov-re-diag.h
@@ -87,14 +87,13 @@ public:
 
   octave_value map (unary_mapper_t umap) const;
 
 private:
 
   bool chk_valid_scalar (const octave_value&,
                          double&) const;
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-re-mat.cc b/libinterp/octave-value/ov-re-mat.cc
--- a/libinterp/octave-value/ov-re-mat.cc
+++ b/libinterp/octave-value/ov-re-mat.cc
@@ -65,17 +65,16 @@ along with Octave; see the file COPYING.
 
 #include "byte-swap.h"
 #include "ls-oct-ascii.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<NDArray>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_matrix, "matrix", "double");
 
 static octave_base_value *
 default_numeric_demotion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_matrix&);
 
diff --git a/libinterp/octave-value/ov-re-mat.h b/libinterp/octave-value/ov-re-mat.h
--- a/libinterp/octave-value/ov-re-mat.h
+++ b/libinterp/octave-value/ov-re-mat.h
@@ -25,17 +25,16 @@ along with Octave; see the file COPYING.
 #define octave_ov_re_mat_h 1
 
 #include <cstdlib>
 
 #include <iosfwd>
 #include <string>
 
 #include "mx-base.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "oct-stream.h"
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "ov-typeinfo.h"
 
@@ -229,14 +228,13 @@ public:
   // You should not use it anywhere else.
   void *mex_get_data (void) const { return matrix.mex_get_data (); }
 
   mxArray *as_mxArray (void) const;
 
   octave_value map (unary_mapper_t umap) const;
 
 private:
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-re-sparse.cc b/libinterp/octave-value/ov-re-sparse.cc
--- a/libinterp/octave-value/ov-re-sparse.cc
+++ b/libinterp/octave-value/ov-re-sparse.cc
@@ -44,17 +44,16 @@ along with Octave; see the file COPYING.
 
 #include "ov-base-sparse.h"
 #include "ov-base-sparse.cc"
 
 #include "ov-bool-sparse.h"
 
 template class OCTINTERP_API octave_base_sparse<SparseMatrix>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_sparse_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_sparse_matrix, "sparse matrix",
                                      "double");
 
 idx_vector
 octave_sparse_matrix::index_vector (bool /* require_integers */) const
 {
   if (matrix.numel () == matrix.nnz ())
diff --git a/libinterp/octave-value/ov-re-sparse.h b/libinterp/octave-value/ov-re-sparse.h
--- a/libinterp/octave-value/ov-re-sparse.h
+++ b/libinterp/octave-value/ov-re-sparse.h
@@ -25,17 +25,16 @@ along with Octave; see the file COPYING.
 #define octave_ov_re_sparse_h 1
 
 #include <cstdlib>
 
 #include <iosfwd>
 #include <string>
 
 #include "mx-base.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "oct-stream.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 #include "dSparse.h"
@@ -153,14 +152,13 @@ public:
 
   mxArray *as_mxArray (void) const;
 
   octave_value map (unary_mapper_t umap) const;
 
 private:
   octave_value map (double (*fcn) (double)) const;
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-scalar.cc b/libinterp/octave-value/ov-scalar.cc
--- a/libinterp/octave-value/ov-scalar.cc
+++ b/libinterp/octave-value/ov-scalar.cc
@@ -48,17 +48,16 @@ along with Octave; see the file COPYING.
 #include "xpow.h"
 #include "ops.h"
 
 #include "ls-oct-ascii.h"
 #include "ls-hdf5.h"
 
 template class octave_base_scalar<double>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_scalar);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_scalar, "scalar", "double");
 
 static octave_base_value *
 default_numeric_demotion_function (const octave_base_value& a)
 {
   CAST_CONV_ARG (const octave_scalar&);
 
diff --git a/libinterp/octave-value/ov-scalar.h b/libinterp/octave-value/ov-scalar.h
--- a/libinterp/octave-value/ov-scalar.h
+++ b/libinterp/octave-value/ov-scalar.h
@@ -27,17 +27,16 @@ along with Octave; see the file COPYING.
 
 #include <iosfwd>
 #include <string>
 
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-base.h"
-#include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "gripes.h"
 #include "ov-base.h"
 #include "ov-re-mat.h"
 #include "ov-base-scalar.h"
 #include "ov-typeinfo.h"
 
@@ -248,14 +247,13 @@ public:
   mxArray *as_mxArray (void) const;
 
   octave_value map (unary_mapper_t umap) const;
 
   bool fast_elem_insert_self (void *where, builtin_type_t btyp) const;
 
 private:
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -48,18 +48,16 @@ along with Octave; see the file COPYING.
 #include "ops.h"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-str-mat.h"
 #include "pr-output.h"
 #include "pt-mat.h"
 #include "utils.h"
 
-DEFINE_OCTAVE_ALLOCATOR (octave_char_matrix_str);
-DEFINE_OCTAVE_ALLOCATOR (octave_char_matrix_sq_str);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_char_matrix_str, "string", "char");
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_char_matrix_sq_str, "sq_string",
                                      "char");
 
 static octave_base_value *
 default_numeric_conversion_function (const octave_base_value& a)
 {
diff --git a/libinterp/octave-value/ov-str-mat.h b/libinterp/octave-value/ov-str-mat.h
--- a/libinterp/octave-value/ov-str-mat.h
+++ b/libinterp/octave-value/ov-str-mat.h
@@ -166,17 +166,16 @@ public:
 
 protected:
 
   octave_value do_index_op_internal (const octave_value_list& idx,
                                      bool resize_ok, char type = '"');
 
 private:
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 typedef octave_char_matrix_str octave_char_matrix_dq_str;
 
 class
 octave_char_matrix_sq_str : public octave_char_matrix_str
@@ -250,14 +249,13 @@ public:
   { return octave_value (matrix.sort (dim, mode), '\''); }
 
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
                      sortmode mode = ASCENDING) const
   { return octave_value (matrix.sort (sidx, dim, mode), '\''); }
 
 private:
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -42,17 +42,16 @@ along with Octave; see the file COPYING.
 
 #include "byte-swap.h"
 #include "ls-oct-ascii.h"
 #include "ls-oct-binary.h"
 #include "ls-hdf5.h"
 #include "ls-utils.h"
 #include "pr-output.h"
 
-DEFINE_OCTAVE_ALLOCATOR(octave_struct);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(octave_struct, "struct", "struct");
 
 // How many levels of structure elements should we print?
 static int Vstruct_levels_to_print = 2;
 
 // TRUE means print struct array contents, up to the number of levels
 // specified by struct_levels_to_print.
@@ -1127,17 +1126,16 @@ octave_struct::fast_elem_insert (octave_
       const octave_scalar_map *sm_ptr;
       void *here = reinterpret_cast<void *>(&sm_ptr);
       return (x.get_rep ().fast_elem_insert_self (here, btyp_struct)
               && map.fast_elem_insert (n, *sm_ptr));
     }
 
   return retval;
 }
-DEFINE_OCTAVE_ALLOCATOR(octave_scalar_struct);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(octave_scalar_struct, "scalar struct",
                                     "struct");
 
 octave_value
 octave_scalar_struct::dotref (const octave_value_list& idx, bool auto_add)
 {
   octave_value retval;
diff --git a/libinterp/octave-value/ov-struct.h b/libinterp/octave-value/ov-struct.h
--- a/libinterp/octave-value/ov-struct.h
+++ b/libinterp/octave-value/ov-struct.h
@@ -27,17 +27,16 @@ along with Octave; see the file COPYING.
 
 #include <iosfwd>
 #include <string>
 
 #include "mx-base.h"
 #include "str-vec.h"
 
 #include "error.h"
-#include "oct-alloc.h"
 #include "oct-map.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 class octave_value_list;
 
 class tree_walker;
 
@@ -157,17 +156,16 @@ public:
 
 protected:
 
   // The associative array used to manage the structure data.
   octave_map map;
 
 private:
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 class
 octave_scalar_struct : public octave_base_value
 {
 public:
@@ -278,14 +276,13 @@ protected:
 
   // The associative array used to manage the structure data.
   octave_scalar_map map;
 
 private:
 
   octave_value to_array (void);
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-uint16.cc b/libinterp/octave-value/ov-uint16.cc
--- a/libinterp/octave-value/ov-uint16.cc
+++ b/libinterp/octave-value/ov-uint16.cc
@@ -54,26 +54,24 @@ along with Octave; see the file COPYING.
 #include "ls-oct-ascii.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<uint16NDArray>;
 
 template class octave_base_int_matrix<uint16NDArray>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_uint16_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint16_matrix,
                                      "uint16 matrix", "uint16");
 
 template class octave_base_scalar<octave_uint16>;
 
 template class octave_base_int_scalar<octave_uint16>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_uint16_scalar);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint16_scalar,
                                      "uint16 scalar", "uint16");
 
 DEFUN (uint16, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} uint16 (@var{x})\n\
 Convert @var{x} to unsigned 16-bit integer type.\n\
diff --git a/libinterp/octave-value/ov-uint32.cc b/libinterp/octave-value/ov-uint32.cc
--- a/libinterp/octave-value/ov-uint32.cc
+++ b/libinterp/octave-value/ov-uint32.cc
@@ -54,26 +54,24 @@ along with Octave; see the file COPYING.
 #include "ls-oct-ascii.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<uint32NDArray>;
 
 template class octave_base_int_matrix<uint32NDArray>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_uint32_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint32_matrix,
                                      "uint32 matrix", "uint32");
 
 template class octave_base_scalar<octave_uint32>;
 
 template class octave_base_int_scalar<octave_uint32>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_uint32_scalar);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint32_scalar,
                                      "uint32 scalar", "uint32");
 
 DEFUN (uint32, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} uint32 (@var{x})\n\
 Convert @var{x} to unsigned 32-bit integer type.\n\
diff --git a/libinterp/octave-value/ov-uint64.cc b/libinterp/octave-value/ov-uint64.cc
--- a/libinterp/octave-value/ov-uint64.cc
+++ b/libinterp/octave-value/ov-uint64.cc
@@ -54,26 +54,24 @@ along with Octave; see the file COPYING.
 #include "ls-oct-ascii.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<uint64NDArray>;
 
 template class octave_base_int_matrix<uint64NDArray>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_uint64_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint64_matrix,
                                      "uint64 matrix", "uint64");
 
 template class octave_base_scalar<octave_uint64>;
 
 template class octave_base_int_scalar<octave_uint64>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_uint64_scalar);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint64_scalar,
                                      "uint64 scalar", "uint64");
 
 DEFUN (uint64, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} uint64 (@var{x})\n\
 Convert @var{x} to unsigned 64-bit integer type.\n\
diff --git a/libinterp/octave-value/ov-uint8.cc b/libinterp/octave-value/ov-uint8.cc
--- a/libinterp/octave-value/ov-uint8.cc
+++ b/libinterp/octave-value/ov-uint8.cc
@@ -54,26 +54,24 @@ along with Octave; see the file COPYING.
 #include "ls-oct-ascii.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
 template class octave_base_matrix<uint8NDArray>;
 
 template class octave_base_int_matrix<uint8NDArray>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_uint8_matrix);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint8_matrix,
                                      "uint8 matrix", "uint8");
 
 template class octave_base_scalar<octave_uint8>;
 
 template class octave_base_int_scalar<octave_uint8>;
 
-DEFINE_OCTAVE_ALLOCATOR (octave_uint8_scalar);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint8_scalar,
                                      "uint8 scalar", "uint8");
 
 DEFUN (uint8, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} uint8 (@var{x})\n\
 Convert @var{x} to unsigned 8-bit integer type.\n\
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -64,17 +64,16 @@ extern char Vstring_fill_char;   // see 
 std::map<std::string, octave_value>
 octave_user_code::subfunctions (void) const
 {
   return std::map<std::string, octave_value> ();
 }
 
 // User defined scripts.
 
-DEFINE_OCTAVE_ALLOCATOR (octave_user_script);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_user_script,
                                      "user-defined script",
                                      "user-defined script");
 
 octave_user_script::octave_user_script (void)
   : octave_user_code (), cmd_list (0), file_name (),
     t_parsed (static_cast<time_t> (0)),
@@ -175,17 +174,16 @@ octave_user_script::do_multi_index_op (i
 void
 octave_user_script::accept (tree_walker& tw)
 {
   tw.visit_octave_user_script (*this);
 }
 
 // User defined functions.
 
-DEFINE_OCTAVE_ALLOCATOR (octave_user_function);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_user_function,
                                      "user-defined function",
                                      "user-defined function");
 
 // Ugh.  This really needs to be simplified (code/data?
 // extrinsic/intrinsic state?).
 
diff --git a/libinterp/octave-value/ov-usr-fcn.h b/libinterp/octave-value/ov-usr-fcn.h
--- a/libinterp/octave-value/ov-usr-fcn.h
+++ b/libinterp/octave-value/ov-usr-fcn.h
@@ -160,17 +160,16 @@ private:
   int call_depth;
 
   // No copying!
 
   octave_user_script (const octave_user_script& f);
 
   octave_user_script& operator = (const octave_user_script& f);
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 // User-defined functions.
 
 class
 octave_user_function : public octave_user_code
@@ -516,14 +515,13 @@ private:
   void restore_warning_states (void);
 
   // No copying!
 
   octave_user_function (const octave_user_function& fn);
 
   octave_user_function& operator = (const octave_user_function& fn);
 
-  DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -88,17 +88,16 @@ along with Octave; see the file COPYING.
 #include "parse.h"
 #include "pr-output.h"
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
 
 // We are likely to have a lot of octave_value objects to allocate, so
 // make the grow_size large.
-DEFINE_OCTAVE_ALLOCATOR2(octave_value, 1024);
 
 // If TRUE, don't create special diagonal matrix objects.
 
 static bool Vdisable_diagonal_matrix = false;
 
 // If TRUE, don't create special permutation matrix objects.
 
 static bool Vdisable_permutation_matrix = false;
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -30,17 +30,16 @@ along with Octave; see the file COPYING.
 #include <string>
 #include <list>
 
 #include "Range.h"
 #include "data-conv.h"
 #include "idx-vector.h"
 #include "mach-info.h"
 #include "mx-base.h"
-#include "oct-alloc.h"
 #include "oct-time.h"
 #include "str-vec.h"
 
 #include "oct-hdf5.h"
 #include "oct-sort.h"
 
 class Cell;
 class mxArray;
@@ -1236,17 +1235,16 @@ private:
   assign_op unary_op_to_assign_op (unary_op op);
 
   binary_op op_eq_to_binary_op (assign_op op);
 
   // This declaration protects against constructing octave_value from
   // const octave_base_value* which actually silently calls octave_value (bool).
   octave_value (const octave_base_value *);
 
-  DECLARE_OCTAVE_ALLOCATOR
 };
 
 // Publish externally used friend functions.
 
 extern OCTINTERP_API octave_value
 do_unary_op (octave_value::unary_op op, const octave_value& a);
 
 extern OCTINTERP_API octave_value
diff --git a/libinterp/parse-tree/pt-const.cc b/libinterp/parse-tree/pt-const.cc
--- a/libinterp/parse-tree/pt-const.cc
+++ b/libinterp/parse-tree/pt-const.cc
@@ -29,17 +29,16 @@ along with Octave; see the file COPYING.
 #include "error.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "pt-const.h"
 #include "pt-walk.h"
 
 // We are likely to have a lot of tree_constant objects to allocate,
 // so make the grow_size large.
-DEFINE_OCTAVE_ALLOCATOR2 (tree_constant, 1024);
 
 void
 tree_constant::print (std::ostream& os, bool pr_as_read_syntax,
                       bool pr_orig_text)
 {
   if (pr_orig_text && ! orig_text.empty ())
     os << orig_text;
   else
diff --git a/libinterp/parse-tree/pt-const.h b/libinterp/parse-tree/pt-const.h
--- a/libinterp/parse-tree/pt-const.h
+++ b/libinterp/parse-tree/pt-const.h
@@ -21,17 +21,16 @@ along with Octave; see the file COPYING.
 */
 
 #if !defined (octave_pt_const_h)
 #define octave_pt_const_h 1
 
 #include <iosfwd>
 #include <string>
 
-#include "oct-alloc.h"
 
 class octave_value_list;
 class tree_walker;
 
 #include "ov.h"
 #include "pt-bp.h"
 #include "pt-exp.h"
 #include "symtab.h"
@@ -94,12 +93,11 @@ private:
   std::string orig_text;
 
   // No copying!
 
   tree_constant (const tree_constant&);
 
   tree_constant& operator = (const tree_constant&);
 
-  DECLARE_OCTAVE_ALLOCATOR
 };
 
 #endif
diff --git a/liboctave/array/idx-vector.cc b/liboctave/array/idx-vector.cc
--- a/liboctave/array/idx-vector.cc
+++ b/liboctave/array/idx-vector.cc
@@ -58,17 +58,16 @@ Array<octave_idx_type>
 idx_vector::idx_base_rep::as_array (void)
 {
   (*current_liboctave_error_handler)
     ("internal error: as_array not allowed for this index class");
 
   return Array<octave_idx_type> ();
 }
 
-DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_colon_rep);
 
 idx_vector::idx_colon_rep::idx_colon_rep (char c)
 {
   if (c != ':')
     {
       (*current_liboctave_error_handler)
         ("internal error: invalid character converted to idx_vector; must be ':'");
       err = true;
@@ -98,17 +97,16 @@ idx_vector::idx_colon_rep::sort_idx (Arr
 }
 
 std::ostream&
 idx_vector::idx_colon_rep::print (std::ostream& os) const
 {
   return os << ":";
 }
 
-DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_range_rep);
 
 idx_vector::idx_range_rep::idx_range_rep (octave_idx_type _start,
                                           octave_idx_type _limit,
                                           octave_idx_type _step)
   : start(_start), len (_step ? std::max ((_limit - _start) / _step, static_cast<octave_idx_type> (0)) : -1), step (_step)
 {
   if (len < 0)
     {
@@ -253,17 +251,16 @@ inline octave_idx_type
 convert_index (octave_int<T> x, bool& conv_error,
                octave_idx_type& ext)
 {
   octave_idx_type i = octave_int<octave_idx_type> (x).value ();
 
   return convert_index (i, conv_error, ext);
 }
 
-DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_scalar_rep);
 
 template <class T>
 idx_vector::idx_scalar_rep::idx_scalar_rep (T x)
   : data (0)
 {
   octave_idx_type dummy = 0;
 
   data = convert_index (x, err, dummy);
@@ -312,17 +309,16 @@ idx_vector::idx_scalar_rep::unconvert (v
 }
 
 Array<octave_idx_type>
 idx_vector::idx_scalar_rep::as_array (void)
 {
   return Array<octave_idx_type> (dim_vector (1, 1), data);
 }
 
-DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_vector_rep);
 
 template <class T>
 idx_vector::idx_vector_rep::idx_vector_rep (const Array<T>& nda)
   : data (0), len (nda.numel ()), ext (0), aowner (0), orig_dims (nda.dims ())
 {
   if (len != 0)
     {
       octave_idx_type *d = new octave_idx_type [len];
@@ -640,17 +636,16 @@ idx_vector::idx_vector_rep::as_array (vo
       // Delete the old copy and share the data instead to save memory.
       delete [] data;
       data = retval.fortran_vec ();
       aowner = new Array<octave_idx_type> (retval);
       return retval;
     }
 }
 
-DEFINE_OCTAVE_ALLOCATOR(idx_vector::idx_mask_rep);
 
 idx_vector::idx_mask_rep::idx_mask_rep (bool b)
   : data (0), len (b ? 1 : 0), ext (0), lsti (-1), lste (-1),
     aowner (0), orig_dims (len, len)
 {
   if (len != 0)
     {
       bool *d = new bool [1];
diff --git a/liboctave/array/idx-vector.h b/liboctave/array/idx-vector.h
--- a/liboctave/array/idx-vector.h
+++ b/liboctave/array/idx-vector.h
@@ -29,17 +29,16 @@ along with Octave; see the file COPYING.
 #include <cstring>
 
 #include <algorithm>
 #include <iosfwd>
 #include <memory>
 
 #include "dim-vector.h"
 #include "oct-inttypes.h"
-#include "oct-alloc.h"
 #include "oct-refcount.h"
 
 template<class T> class Array;
 template<class T> class Sparse;
 class Range;
 
 // Design rationale:
 // idx_vector is a reference-counting, polymorphic pointer, that can contain
@@ -141,17 +140,16 @@ private:
     idx_base_rep *sort_idx (Array<octave_idx_type>&);
 
     bool is_colon_equiv (octave_idx_type) const { return true; }
 
     std::ostream& print (std::ostream& os) const;
 
   private:
 
-    DECLARE_OCTAVE_ALLOCATOR
 
     // No copying!
     idx_colon_rep (const idx_colon_rep& idx);
     idx_colon_rep& operator = (const idx_colon_rep& idx);
   };
 
   // To distinguish the "direct" constructors that blindly trust the data.
   enum direct { DIRECT };
@@ -203,17 +201,16 @@ private:
     std::ostream& print (std::ostream& os) const;
 
     Range unconvert (void) const;
 
     Array<octave_idx_type> as_array (void);
 
   private:
 
-    DECLARE_OCTAVE_ALLOCATOR
 
     // No copying!
     idx_range_rep (const idx_range_rep& idx);
     idx_range_rep& operator = (const idx_range_rep& idx);
 
     octave_idx_type start, len, step;
 
   };
@@ -260,17 +257,16 @@ private:
     std::ostream& print (std::ostream& os) const;
 
     double unconvert (void) const;
 
     Array<octave_idx_type> as_array (void);
 
   private:
 
-    DECLARE_OCTAVE_ALLOCATOR
 
     // No copying!
     idx_scalar_rep (const idx_scalar_rep& idx);
     idx_scalar_rep& operator = (const idx_scalar_rep& idx);
 
     octave_idx_type data;
 
   };
@@ -327,17 +323,16 @@ private:
     std::ostream& print (std::ostream& os) const;
 
     Array<double> unconvert (void) const;
 
     Array<octave_idx_type> as_array (void);
 
   private:
 
-    DECLARE_OCTAVE_ALLOCATOR
 
     // No copying!
     idx_vector_rep (const idx_vector_rep& idx);
     idx_vector_rep& operator = (const idx_vector_rep& idx);
 
     const octave_idx_type *data;
     octave_idx_type len;
     octave_idx_type ext;
@@ -401,17 +396,16 @@ private:
     std::ostream& print (std::ostream& os) const;
 
     Array<bool> unconvert (void) const;
 
     Array<octave_idx_type> as_array (void);
 
   private:
 
-    DECLARE_OCTAVE_ALLOCATOR
 
     // No copying!
     idx_mask_rep (const idx_mask_rep& idx);
     idx_mask_rep& operator = (const idx_mask_rep& idx);
 
     const bool *data;
     octave_idx_type len;
     octave_idx_type ext;
diff --git a/liboctave/util/module.mk b/liboctave/util/module.mk
--- a/liboctave/util/module.mk
+++ b/liboctave/util/module.mk
@@ -53,17 +53,16 @@ UTIL_C_SRC = \
 UTIL_SRC = \
   util/cmd-edit.cc \
   util/cmd-hist.cc \
   util/data-conv.cc \
   util/glob-match.cc \
   util/lo-array-gripes.cc \
   util/lo-ieee.cc \
   util/lo-utils.cc \
-  util/oct-alloc.cc \
   util/oct-base64.cc \
   util/oct-glob.cc \
   util/oct-inttypes.cc \
   util/oct-locbuf.cc \
   util/oct-md5.cc \
   util/oct-mutex.cc \
   util/oct-shlib.cc \
   util/pathsearch.cc \
diff --git a/liboctave/util/oct-alloc.cc b/liboctave/util/oct-alloc.cc
deleted file mode 100644
--- a/liboctave/util/oct-alloc.cc
+++ /dev/null
@@ -1,104 +0,0 @@
-/*
-
-Copyright (C) 1996-2013 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-#include <new>
-
-#include "oct-alloc.h"
-
-void *
-octave_allocator::alloc (size_t size)
-{
-  if (size != item_size)
-    return ::new char [size];
-
-  if (! head)
-    {
-      if (! grow ())
-        return 0;
-    }
-
-  link *tmp = head;
-  head = head->next;
-  return tmp;
-}
-
-// FIXME: if we free the last item on the list, shouldn't we
-// also free the underlying character array used for storage?
-
-void
-octave_allocator::free (void *p, size_t size)
-{
-  if (size != item_size)
-    ::delete [] (static_cast<char *> (p));
-  else
-    {
-      link *tmp = static_cast<link *> (p);
-      tmp->next = head;
-      head = tmp;
-    }
-}
-
-// Return TRUE for successful allocation, FALSE otherwise.
-
-bool
-octave_allocator::grow (void)
-{
-  bool retval = true;
-
-  char *start = new char [grow_size * item_size];
-
-  if (start)
-    {
-      char *last = &start[(grow_size - 1) * item_size];
-
-      char *p = start;
-      while (p < last)
-        {
-          char *next = p + item_size;
-          (reinterpret_cast<link *> (p)) -> next
-            = reinterpret_cast<link *> (next);
-          p = next;
-        }
-
-      (reinterpret_cast<link *> (last)) -> next = 0;
-
-      head = reinterpret_cast<link *> (start);
-    }
-  else
-    {
-      typedef void (*error_handler_function) (void);
-
-      error_handler_function f = std::set_new_handler (0);
-      std::set_new_handler (f);
-
-      if (f)
-        f ();
-
-      retval = false;
-    }
-
-  return retval;
-}
diff --git a/liboctave/util/oct-alloc.h b/liboctave/util/oct-alloc.h
--- a/liboctave/util/oct-alloc.h
+++ b/liboctave/util/oct-alloc.h
@@ -18,84 +18,15 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_oct_alloc_h)
 #define octave_oct_alloc_h 1
 
-#include <cstddef>
-
-class
-OCTAVE_API
-octave_allocator
-{
-public:
-
-  octave_allocator (size_t item_sz, int grow_sz = 256)
-    : head (0), grow_size (grow_sz),
-      item_size (item_sz > sizeof (link *) ? item_sz : sizeof (link *))
-  { }
-
-  // Get an object from the free list, possibly increasing the size of
-  // the free list.
-  void *alloc (size_t size);
-
-  // Put objects back on the free list.
-  void free (void *p, size_t size);
-
-private:
-
-  // Structure for internal free list management.
-  struct link { link *next; };
-
-  // Front of the free list.
-  link *head;
-
-  // How many objects to get each time we call the global operator new.
-  int grow_size;
-
-  // The size of each item on the list (or, if that is smaller than
-  // the size of list*, the size of list*.
-  size_t item_size;
-
-  // How to grow the free list.
-  bool grow (void);
-};
-
-#if defined (HAVE_PLACEMENT_DELETE)
-#define DECLARE_OCTAVE_ALLOCATOR_PLACEMENT_DELETE \
-    void operator delete (void *p, void *) \
-      { ::operator delete (p, static_cast<void*> (0)); }
-#else
-#define DECLARE_OCTAVE_ALLOCATOR_PLACEMENT_DELETE \
-    void operator delete (void *p, void *) \
-      { ::operator delete (p); }
-#endif
-
-#if defined (USE_OCTAVE_ALLOCATOR)
-
-#define DECLARE_OCTAVE_ALLOCATOR \
-  public: \
-    void *operator new (size_t size, void *p) \
-      { return ::operator new (size, p); } \
-    DECLARE_OCTAVE_ALLOCATOR_PLACEMENT_DELETE \
-    void *operator new (size_t size) { return allocator.alloc (size); } \
-    void operator delete (void *p, size_t size) { allocator.free (p, size); } \
-  private: \
-    static octave_allocator allocator;
-
-#define DEFINE_OCTAVE_ALLOCATOR(t) \
-  octave_allocator t::allocator (sizeof (t))
-
-#define DEFINE_OCTAVE_ALLOCATOR2(t, s) \
-  octave_allocator t::allocator (sizeof (t), s)
-
-#else
+#warning "the octave_allocator class has been deprecated and will be removed in a future release of Octave"
 
 #define DECLARE_OCTAVE_ALLOCATOR
 #define DEFINE_OCTAVE_ALLOCATOR(t)
 #define DEFINE_OCTAVE_ALLOCATOR2(t, s)
 
 #endif
-
-#endif
