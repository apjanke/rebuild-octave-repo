# HG changeset patch
# User jwe
# Date 942985668 0
#      Fri Nov 19 04:27:48 1999 +0000
# Node ID 803643945da1791ee6413ccf3a47e0881eea9a70
# Parent  fa7d8036d12ac5d503acbeb421767d0c9935ca9e
[project @ 1999-11-19 04:27:48 by jwe]

diff --git a/liboctave/data-conv.cc b/liboctave/data-conv.cc
--- a/liboctave/data-conv.cc
+++ b/liboctave/data-conv.cc
@@ -27,34 +27,34 @@ Software Foundation, 59 Temple Place - S
 #include <cctype>
 
 #include <iostream.h>
 
 #include "byte-swap.h"
 #include "data-conv.h"
 #include "lo-error.h"
 
-#define CHECK_SIZED_INT_TYPE(VAL, BITS, TQ, Q) \
+#define FIND_SIZED_INT_TYPE(VAL, BITS, TQ, Q) \
   do \
     { \
       int sz = BITS / CHAR_BIT; \
       if (sizeof (TQ char) == sz) \
 	VAL = oct_data_conv::dt_ ## Q ## char; \
       else if (sizeof (TQ short) == sz) \
 	VAL = oct_data_conv::dt_ ## Q ## short; \
       else if (sizeof (TQ int) == sz) \
 	VAL = oct_data_conv::dt_ ## Q ## int; \
       else if (sizeof (TQ long) == sz) \
 	VAL = oct_data_conv::dt_ ## Q ## long; \
       else \
         VAL = oct_data_conv::dt_unknown; \
     } \
   while (0)
 
-#define CHECK_SIZED_FLOAT_TYPE(VAL, BITS) \
+#define FIND_SIZED_FLOAT_TYPE(VAL, BITS) \
   do \
     { \
       int sz = BITS / CHAR_BIT; \
       if (sizeof (float) == sz) \
 	VAL = oct_data_conv::dt_float; \
       else if (sizeof (double) == sz) \
 	VAL = oct_data_conv::dt_double; \
       else \
@@ -86,21 +86,21 @@ Software Foundation, 59 Temple Place - S
 
 static void
 init_sized_type_lookup_table (oct_data_conv::data_type table[3][4])
 {
   int bits = 8;
 
   for (int i = 0; i < 4; i++)
     {
-      CHECK_SIZED_INT_TYPE (table[0][i], bits, , );
+      FIND_SIZED_INT_TYPE (table[0][i], bits, , );
 
-      CHECK_SIZED_INT_TYPE (table[1][i], bits, unsigned, u);
+      FIND_SIZED_INT_TYPE (table[1][i], bits, unsigned, u);
 
-      CHECK_SIZED_FLOAT_TYPE (table[2][i], bits);
+      FIND_SIZED_FLOAT_TYPE (table[2][i], bits);
 
       bits *= 2;
     }
 }
 
 oct_data_conv::data_type
 oct_data_conv::string_to_data_type (const string& str)
 {
@@ -180,34 +180,34 @@ oct_data_conv::string_to_data_type (cons
     (*current_liboctave_error_handler)
       ("unable to find matching native data type for %s", s.c_str ());
 
   return retval;
 }
 
 #define swap_1_bytes(x, y)
 
-#define LS_DO_READ(TYPE,swap,data,size,len,stream) \
+#define LS_DO_READ(TYPE, swap, data, size, len, stream) \
   do \
     { \
       volatile TYPE *ptr = X_CAST (volatile TYPE *, data); \
       stream.read (X_CAST (TYPE *, ptr), size * len); \
       if (swap) \
         swap_ ## size ## _bytes (ptr, len); \
       TYPE tmp = ptr[0]; \
       for (int i = len - 1; i > 0; i--) \
         data[i] = ptr[i]; \
       data[0] = tmp; \
     } \
   while (0)
 
 // Have to use copy here to avoid writing over data accessed via
 // Matrix::data().
 
-#define LS_DO_WRITE(TYPE,data,size,len,stream) \
+#define LS_DO_WRITE(TYPE, data, size, len, stream) \
   do \
     { \
       char tmp_type = static_cast<char> (type); \
       stream.write (&tmp_type, 1); \
       TYPE *ptr = new TYPE [len]; \
       for (int i = 0; i < len; i++) \
         ptr[i] = X_CAST (TYPE, data[i]); \
       stream.write (ptr, size * len); \
@@ -721,17 +721,17 @@ read_doubles (istream& is, double *data,
 	do_float_format_conversion (X_CAST (float *, data), len, fmt);
 	float tmp = ptr[0];
 	for (int i = len - 1; i > 0; i--)
 	  data[i] = ptr[i];
 	data[0] = tmp;
       }
       break;
 
-    case LS_DOUBLE:
+    case LS_DOUBLE: // No conversion necessary.
       is.read (data, 8 * len);
       do_double_format_conversion (data, len, fmt);
       break;
 
     default:
       is.clear (ios::failbit|is.rdstate ());
       break;
     }
@@ -765,17 +765,17 @@ write_doubles (ostream& os, const double
     case LS_INT:
       LS_DO_WRITE (FOUR_BYTE_INT, data, 4, len, os);
       break;
 
     case LS_FLOAT:
       LS_DO_WRITE (float, data, 4, len, os);
       break;
 
-    case LS_DOUBLE:
+    case LS_DOUBLE: // No conversion necessary.
       {
 	char tmp_type = X_CAST (char, type);
 	os.write (&tmp_type, 1);
 	os.write (data, 8 * len);
       }
       break;
 
     default:
