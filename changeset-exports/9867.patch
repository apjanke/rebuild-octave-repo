# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1259068322 -3600
#      Tue Nov 24 14:12:02 2009 +0100
# Node ID 1c274aa2b4d1f6f0d6cd706ba1c803bb7fa3bee5
# Parent  b5aa5d9ee6b96bc411feb753b66b57d36379a420
make issquare consistent for empty matrices

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2009-11-24  Jaroslav Hajek  <highegg@gmail.com>
+
+	* general/issquare.m: Change to return consistent result for empty
+	matrices.
+
 2009-11-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* general/cell2mat.m: Check type of all elements. Slightly optimize.
 	Add tests.
 
 2009-11-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* general/accumarray.m: Use num2cell instead of mat2cell. Use repmat.
diff --git a/scripts/general/issquare.m b/scripts/general/issquare.m
--- a/scripts/general/issquare.m
+++ b/scripts/general/issquare.m
@@ -13,58 +13,54 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} issquare (@var{x})
-## If @var{x} is a square matrix, then return the dimension of @var{x}.
-## Otherwise, return 0.
+## If @var{x} is a square matrix, return true.
+## Otherwise, return false.
 ## @seealso{size, rows, columns, length, ismatrix, isscalar, isvector}
 ## @end deftypefn
 
 ## Author: A. S. Hodel <scotte@eng.auburn.edu>
 ## Created: August 1993
 ## Adapted-By: jwe
 
 function retval = issquare (x)
 
-  retval = 0;
-
   if (nargin == 1)
-    if (ismatrix (x) && ndims (x) < 3)
-      [nr, nc] = size (x);
-      if (nr == nc && nr > 0)
-        retval = nr;
-      endif
+    if (ismatrix (x) && ndims (x) == 2)
+      [r, c] = size (x);
+      retval = r == c;
+    else
+      retval = false;
     endif
   else
     print_usage ();
   endif
 
 endfunction
 
 %!assert(issquare (1));
 
 %!assert(!(issquare ([1, 2])));
 
-%!assert(!(issquare ([])));
+%!assert(issquare ([]));
 
-%!assert(issquare ([1, 2; 3, 4]) == 2);
+%!assert(issquare ([1, 2; 3, 4]));
 
 %!test
-%! warn_str_to_num = 0;
 %! assert(!(issquare ("t")));
 
 %!assert(!(issquare ("test")));
 
 %!test
-%! warn_str_to_num = 0;
 %! assert(!(issquare (["test"; "ing"; "1"; "2"])));
 
 %!test
 %! s.a = 1;
 %! assert(!(issquare (s)));
 
 %!assert(!(issquare ([1, 2; 3, 4; 5, 6])));
 
