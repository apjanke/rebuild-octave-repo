# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1383803568 18000
#      Thu Nov 07 00:52:48 2013 -0500
# Node ID 1d2e709bbbdafcbf2b1d460795101079ce10f18f
# Parent  e8330a9e8c783f45ff4b86a05ad93cff27c8fc8e
rework short_disp methods

* ov.h (octave_value::short_disp): Pass std::ostream as
argument instead of returning std::string.  Change all uses.
* ov-base.h (octave_base_value::short_disp): Likewise.  Change all
derived classes.
* ov-base-scalar.cc (octave_base_scalar<ST>::short_disp): Strip
leading whitepace from number.
* ov-base-mat.cc (octave_base_matrix<MT>::short_disp): Strip
leading whitepace from numbers.

diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -20,16 +20,18 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <sstream>
+
 #include "file-ops.h"
 #include "file-stat.h"
 #include "oct-env.h"
 #include "oct-time.h"
 #include "singleton-cleanup.h"
 
 #include "debug.h"
 #include "defun.h"
@@ -1413,18 +1415,22 @@ symbol_table::do_workspace_info (void) c
                 storage = 'a';
               else if (sr.is_formal ())
                 storage = 'f';
               else if (sr.is_hidden ())
                 storage = 'h';
               else if (sr.is_inherited ())
                 storage = 'i';
 
+              std::ostringstream buf;
+              val.short_disp (buf);
+              std::string short_disp_str = buf.str ();
+
               workspace_element elt (storage, nm, val.class_name (),
-                                     val.short_disp (), dv.str (),
+                                     short_disp_str, dv.str (),
                                      val.is_complex_type ());
 
               retval.push_back (elt);
             }
         }
     }
 
   return retval;
diff --git a/libinterp/octave-value/ov-base-mat.cc b/libinterp/octave-value/ov-base-mat.cc
--- a/libinterp/octave-value/ov-base-mat.cc
+++ b/libinterp/octave-value/ov-base-mat.cc
@@ -445,60 +445,60 @@ template <class MT>
 void
 octave_base_matrix<MT>::print_info (std::ostream& os,
                                     const std::string& prefix) const
 {
   matrix.print_info (os, prefix);
 }
 
 template <class MT>
-std::string
-octave_base_matrix<MT>::short_disp (void) const
+void
+octave_base_matrix<MT>::short_disp (std::ostream& os) const
 {
-  std::ostringstream buf;
-
   if (matrix.is_empty ())
-    buf << "[]";
+    os << "[]";
   else if (matrix.ndims () == 2)
     {
       // FIXME: should this be configurable?
       octave_idx_type max_elts = 10;
       octave_idx_type elts = 0;
 
       octave_idx_type nel = matrix.numel ();
 
       octave_idx_type nr = matrix.rows ();
       octave_idx_type nc = matrix.columns ();
 
-      buf << "[";
+      os << "[";
 
       for (octave_idx_type i = 0; i < nr; i++)
         {
           for (octave_idx_type j = 0; j < nc; j++)
             {
-              octave_print_internal (buf, matrix(j*nr+i), true);
+              std::ostringstream buf;
+              octave_print_internal (buf, matrix(j*nr+i));
+              std::string tmp = buf.str ();
+              size_t pos = tmp.find_first_not_of (" ");
+              os << tmp.substr (pos);
 
               if (++elts >= max_elts)
                 goto done;
 
               if (j < nc - 1)
-                buf << ", ";
+                os << ", ";
             }
 
           if (i < nr - 1 && elts < max_elts)
-            buf << "; ";
+            os << "; ";
         }
 
     done:
 
       if (nel <= max_elts)
-        buf << "]";
+        os << "]";
     }
-
-  return buf.str ();
 }
 
 template <class MT>
 octave_value
 octave_base_matrix<MT>::fast_elem_extract (octave_idx_type n) const
 {
   if (n < matrix.numel ())
     return matrix(n);
diff --git a/libinterp/octave-value/ov-base-mat.h b/libinterp/octave-value/ov-base-mat.h
--- a/libinterp/octave-value/ov-base-mat.h
+++ b/libinterp/octave-value/ov-base-mat.h
@@ -152,17 +152,17 @@ public:
   bool is_true (void) const;
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
-  std::string short_disp (void) const;
+  void short_disp (std::ostream& os) const;
 
   MT& matrix_ref (void)
   {
     clear_cached_info ();
     return matrix;
   }
 
   const MT& matrix_ref (void) const
diff --git a/libinterp/octave-value/ov-base-scalar.cc b/libinterp/octave-value/ov-base-scalar.cc
--- a/libinterp/octave-value/ov-base-scalar.cc
+++ b/libinterp/octave-value/ov-base-scalar.cc
@@ -164,22 +164,24 @@ octave_base_scalar<ST>::print_name_tag (
                                         const std::string& name) const
 {
   indent (os);
   os << name << " = ";
   return false;
 }
 
 template <class ST>
-std::string
-octave_base_scalar<ST>::short_disp (void) const
+void
+octave_base_scalar<ST>::short_disp (std::ostream& os) const
 {
   std::ostringstream buf;
-  octave_print_internal (buf, scalar, true);
-  return buf.str ();
+  octave_print_internal (buf, scalar);
+  std::string tmp = buf.str ();
+  size_t pos = tmp.find_first_not_of (" ");
+  os << tmp.substr (pos);
 }
 
 template <class ST>
 bool
 octave_base_scalar<ST>::fast_elem_insert_self (void *where,
                                                builtin_type_t btyp) const
 {
 
diff --git a/libinterp/octave-value/ov-base-scalar.h b/libinterp/octave-value/ov-base-scalar.h
--- a/libinterp/octave-value/ov-base-scalar.h
+++ b/libinterp/octave-value/ov-base-scalar.h
@@ -133,17 +133,17 @@ public:
   bool is_true (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
-  std::string short_disp (void) const;
+  void short_disp (std::ostream& os) const;
 
   // Unsafe.  This function exists to support the MEX interface.
   // You should not use it anywhere else.
   void *mex_get_data (void) const { return const_cast<ST *> (&scalar); }
 
   const ST& scalar_ref (void) const { return scalar; }
 
   ST& scalar_ref (void) { return scalar; }
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -613,17 +613,17 @@ public:
 
   virtual bool
   print_name_tag (std::ostream& os, const std::string& name) const;
 
   virtual void
   print_with_name (std::ostream& output_buf, const std::string& name,
                    bool print_padding = true);
 
-  virtual std::string short_disp (void) const { return "..."; }
+  virtual void short_disp (std::ostream& os) const { os << "..."; }
 
   virtual void print_info (std::ostream& os, const std::string& prefix) const;
 
   virtual bool save_ascii (std::ostream& os);
 
   virtual bool load_ascii (std::istream& is);
 
   virtual bool save_binary (std::ostream& os, bool& save_as_floats);
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -745,20 +745,20 @@ octave_cell::print_raw (std::ostream& os
     {
       indent (os);
       dim_vector dv = matrix.dims ();
       os << "{" << dv.str () << " Cell Array}";
       newline (os);
     }
 }
 
-std::string
-octave_cell::short_disp (void) const
+void
+octave_cell::short_disp (std::ostream& os) const
 {
-  return matrix.is_empty () ? "{}" : "";
+  os << matrix.is_empty () ? "{}" : "...";
 }
 
 #define CELL_ELT_TAG "<cell-element>"
 
 bool
 octave_cell::save_ascii (std::ostream& os)
 {
   dim_vector d = dims ();
diff --git a/libinterp/octave-value/ov-cell.h b/libinterp/octave-value/ov-cell.h
--- a/libinterp/octave-value/ov-cell.h
+++ b/libinterp/octave-value/ov-cell.h
@@ -146,17 +146,17 @@ public:
   Array<std::string> cellstr_value (void) const;
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
-  std::string short_disp (void) const;
+  void short_disp (std::ostream& os) const;
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap,
diff --git a/libinterp/octave-value/ov-range.cc b/libinterp/octave-value/ov-range.cc
--- a/libinterp/octave-value/ov-range.cc
+++ b/libinterp/octave-value/ov-range.cc
@@ -383,39 +383,35 @@ octave_range::print_name_tag (std::ostre
         newline (os);
 
       retval = true;
     }
 
   return retval;
 }
 
-std::string
-octave_range::short_disp (void) const
+void
+octave_range::short_disp (std::ostream& os) const
 {
-  std::ostringstream buf;
-
   octave_idx_type len = range.nelem ();
 
   if (len == 0)
-    buf << "[]";
+    os << "[]";
   else
     {
-      buf << range.base () << ":";
+      os << range.base () << ":";
 
       if (len > 1)
         {
           if (range.inc () != 1)
-            buf << range.inc () << ":";
+            os << range.inc () << ":";
 
-          buf << range.limit ();
+          os << range.limit ();
         }
     }
-
-  return buf.str ();
 }
 
 // Skip white space and comments on stream IS.
 
 static void
 skip_comments (std::istream& is)
 {
   char c = '\0';
diff --git a/libinterp/octave-value/ov-range.h b/libinterp/octave-value/ov-range.h
--- a/libinterp/octave-value/ov-range.h
+++ b/libinterp/octave-value/ov-range.h
@@ -250,17 +250,17 @@ public:
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
-  std::string short_disp (void) const;
+  void short_disp (std::ostream& os) const;
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap,
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -265,35 +265,30 @@ octave_char_matrix_str::cellstr_value (v
 void
 octave_char_matrix_str::print_raw (std::ostream& os,
                                    bool pr_as_read_syntax) const
 {
   octave_print_internal (os, matrix, pr_as_read_syntax,
                          current_print_indent_level (), true);
 }
 
-std::string
-octave_char_matrix_str::short_disp (void) const
+void
+octave_char_matrix_str::short_disp (std::ostream& os) const
 {
-  std::string retval;
-
   if (matrix.ndims () == 2 && numel () > 0)
     {
-      retval = string_value ();
+      std::string tmp = string_value ();
 
       // FIXME: should this be configurable?
+      size_t max_len = 100;
 
-      if (retval.length () > 100)
-        retval = retval.substr (0, 100);
+      os << (tmp.length () > max_len) ? tmp.substr (0, 100) : tmp;
     }
-
-  return retval;
 }
 
-
 bool
 octave_char_matrix_str::save_ascii (std::ostream& os)
 {
   dim_vector d = dims ();
   if (d.length () > 2)
     {
       charNDArray tmp = char_array_value ();
       os << "# ndims: " << d.length () << "\n";
diff --git a/libinterp/octave-value/ov-str-mat.h b/libinterp/octave-value/ov-str-mat.h
--- a/libinterp/octave-value/ov-str-mat.h
+++ b/libinterp/octave-value/ov-str-mat.h
@@ -137,17 +137,17 @@ public:
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
                      sortmode mode = ASCENDING) const
   { return octave_value (matrix.sort (sidx, dim, mode)); }
 
   bool print_as_scalar (void) const { return (rows () <= 1); }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
-  std::string short_disp (void) const;
+  void short_disp (std::ostream& os) const;
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap,
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -1022,17 +1022,17 @@ public:
   { rep->print_raw (os, pr_as_read_syntax); }
 
   bool print_name_tag (std::ostream& os, const std::string& name) const
   { return rep->print_name_tag (os, name); }
 
   void print_with_name (std::ostream& os, const std::string& name) const
   { rep->print_with_name (os, name, true); }
 
-  std::string short_disp (void) const { return rep->short_disp (); }
+  void short_disp (std::ostream& os) const { rep->short_disp (os); }
 
   int type_id (void) const { return rep->type_id (); }
 
   std::string type_name (void) const { return rep->type_name (); }
 
   std::string class_name (void) const { return rep->class_name (); }
 
   // Unary and binary operations.
