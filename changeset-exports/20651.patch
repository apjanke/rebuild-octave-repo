# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1445455388 14400
#      Wed Oct 21 15:23:08 2015 -0400
# Node ID c1d94e5cd5eacc47f0c704881071c81bb685d0c0
# Parent  a6a452346c424549720fb24662f14f41540f1270
catch index_exception by const reference where possible

* data.cc, sub2ind.cc, toplev.cc, utils.cc, ov-base-mat.cc,
lo-array-gripes.cc: Catch index_exception by const reference where
possible.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -7127,19 +7127,20 @@ the ratio K/M is small; otherwise, it ma
 #undef MAKE_INT_BRANCH
             default:
               if (argx.is_cellstr ())
                 retval = argx.cellstr_value ().nth_element (n, dim);
               else
                 gripe_wrong_type_arg ("nth_element", argx);
             }
         }
-      catch (index_exception& e)
+      catch (const index_exception& e)
         {
-          error ("nth_element: invalid N value %s. %s", e.idx (), e.explain ());
+          error ("nth_element: invalid N value %s. %s",
+                 e.idx (), e.explain ());
         }
     }
   else
     print_usage ();
 
   return retval;
 }
 
@@ -7208,20 +7209,20 @@ Undocumented internal function.\n\
                                             vals.complex_array_value (),
                                             n);
               else
                 retval = do_accumarray_sum (idx, vals.array_value (), n);
             }
           else
             gripe_wrong_type_arg ("accumarray", vals);
         }
-      catch (index_exception& e)
+      catch (const index_exception& e)
         {
           error ("__accumarray_sum__: invalid IDX %s. %s",
-                 e.idx(), e.explain ());
+                 e.idx (), e.explain ());
         }
     }
   else
     print_usage ();
 
   return retval;
 }
 
@@ -7311,20 +7312,20 @@ do_accumarray_minmax_fun (const octave_v
             case btyp_bool:
               retval = do_accumarray_minmax (idx, vals.array_value (), n, ismin,
                                              zero.bool_value ());
               break;
             default:
               gripe_wrong_type_arg ("accumarray", vals);
             }
         }
-      catch (index_exception& e)
+      catch (const index_exception& e)
         {
           error ("do_accumarray_minmax_fun: invalid index %s. %s",
-                                        e.idx (), e.explain ());
+                 e.idx (), e.explain ());
         }
 
     }
   else
     print_usage ();
 
   return retval;
 }
@@ -7417,19 +7418,20 @@ Undocumented internal function.\n\
                 retval = do_accumdim_sum (idx, vals.complex_array_value (),
                                           dim, n);
               else
                 retval = do_accumdim_sum (idx, vals.array_value (), dim, n);
             }
           else
             gripe_wrong_type_arg ("accumdim", vals);
         }
-      catch (index_exception& e)
+      catch (const index_exception& e)
         {
-          error ("__accumdim_sum__: invalid IDX %s. %s", e.idx(), e.explain ());
+          error ("__accumdim_sum__: invalid IDX %s. %s",
+                 e.idx (), e.explain ());
         }
     }
   else
     print_usage ();
 
   return retval;
 }
 
diff --git a/libinterp/corefcn/sub2ind.cc b/libinterp/corefcn/sub2ind.cc
--- a/libinterp/corefcn/sub2ind.cc
+++ b/libinterp/corefcn/sub2ind.cc
@@ -198,16 +198,16 @@ moving from one column to next, filling 
         {
           idx_vector idx = args(1).index_vector ();
 
           if (nargout > dv.length ())
             dv = dv.redim (nargout);
           
           retval = Array<octave_value> (ind2sub (dv, idx));
         }
-      catch (index_exception& e)
+      catch (const index_exception& e)
         {
           error ("ind2sub: Invalid index %s. %s", e.idx (), e.explain ());
         }
     }
 
   return retval;
 }
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -653,17 +653,17 @@ main_loop (void)
         }
       catch (const octave_interrupt_exception&)
         {
           recover_from_exception ();
           octave_stdout << "\n";
           if (quitting_gracefully)
             return exit_status;
         }
-      catch (index_exception& e)
+      catch (const index_exception& e)
         {
           recover_from_exception ();
           std::cerr << "error: unhandled index exception: "
                     << e.err () << " -- trying to return to prompt"
                     << std::endl;
         }
       catch (const octave_execution_exception&)
         {
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -1277,20 +1277,20 @@ dims_to_numel (const dim_vector& dims, c
           else
             {
               try
                 {
                   idx_vector jdx = idxi.index_vector ();
 
                   retval *= jdx.length (dv(i));
                 }
-              catch (index_exception& e)
+              catch (const index_exception& e)
                 {
                   error ("dims_to_numel: Invalid IDX %s. %s",
-                                                        e.idx (), e.explain ());
+                         e.idx (), e.explain ());
                 }
             }
         }
     }
 
   return retval;
 }
 
diff --git a/libinterp/octave-value/ov-base-mat.cc b/libinterp/octave-value/ov-base-mat.cc
--- a/libinterp/octave-value/ov-base-mat.cc
+++ b/libinterp/octave-value/ov-base-mat.cc
@@ -258,19 +258,19 @@ octave_base_matrix<MT>::assign (const oc
               for (k = 0; k < n_idx; k++)
                 idx_vec(k) = idx(k).index_vector ();
 
               matrix.assign (idx_vec, rhs);
             }
             break;
         }
     }
-  catch (index_exception& e)
+  catch (const index_exception& e)
     {
-      gripe_invalid_index (e.idx(), n_idx, k+1);
+      gripe_invalid_index (e.idx (), n_idx, k+1);
     }
 
   // Clear cache.
   clear_cached_info ();
 }
 
 template <class MT>
 MatrixType
@@ -364,17 +364,17 @@ octave_base_matrix<MT>::assign (const oc
             else
               matrix.assign (idx_vec, mrhs);
           }
           break;
         }
     }
   catch (const index_exception& e)
     {
-      gripe_invalid_index (e.idx(), n_idx, k+1);
+      gripe_invalid_index (e.idx (), n_idx, k+1);
      }
 
   // Clear cache.
   clear_cached_info ();
 }
 
 template <class MT>
 void
diff --git a/liboctave/util/lo-array-gripes.cc b/liboctave/util/lo-array-gripes.cc
--- a/liboctave/util/lo-array-gripes.cc
+++ b/liboctave/util/lo-array-gripes.cc
@@ -255,17 +255,17 @@ public:
 
   out_of_range (const char *value, octave_idx_type nd_in,octave_idx_type dim_in)
         : index_exception (value, nd_in, dim_in), extent(0)
     { }
 
   const char* explain (void) const
   {
     static std::string expl;    // should probably be member variable, but
-                                // then explain() can't be const.
+                                // then explain can't be const.
 
     if (nd >= size.length ())   // if not an index slice
       {
         if (var != "")
           expl = "but " + var + " has size ";
         else
           expl = "but object has size ";
 
@@ -303,17 +303,17 @@ void
 gripe_index_out_of_range (int nd, int dim, octave_idx_type idx,
                           octave_idx_type ext)
 {
     char buf[64];
     sprintf (buf, "%d", idx);
     out_of_range e (buf, nd, dim);
 
     e.set_extent (ext);
-    dim_vector d (1,1,1,1,1,1,1);   // make explain() give extent not size
+    dim_vector d (1,1,1,1,1,1,1);   // make explain give extent not size
     e.set_size (d);
     throw e;
 }
 
 // Complain of an index that is out of range
 void
 gripe_index_out_of_range (int nd, int dim, octave_idx_type idx,
                           octave_idx_type ext, const dim_vector& d)
