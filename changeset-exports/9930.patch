# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1260209833 18000
#      Mon Dec 07 13:17:13 2009 -0500
# Node ID 1ddc25c3623a69d3cdd8c1930c1dc6f2ea963fac
# Parent  45c08d7c2c79f7e520b1740ae6f4aa53e47f2cf9
libcruft/misc: untabify sources

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,12 @@
+2009-12-07  John W. Eaton  <jwe@octave.org>
+
+	* misc/cquit.c, misc/f77-fcn.h, misc/quit.h: Untabify.
+
 2009-12-03  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (DISTCLEANFILES): New variable.
 
 2009-11-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* blas-xtra/sdot3.f: Use nested cache-aligned loop for general case.
 	* blas-xtra/ddot3.f: Ditto.
diff --git a/libcruft/misc/cquit.c b/libcruft/misc/cquit.c
--- a/libcruft/misc/cquit.c
+++ b/libcruft/misc/cquit.c
@@ -96,17 +96,17 @@ w32_reset_context (LPVOID v)
   EnterCriticalSection (&w32_thread_setjmp_mutex);
 
   DEBUGs ("enter w32_set_context");
   SuspendThread (w32_main_thread);
   DEBUGs ("main suspended");
   if (! SetThreadContext (w32_main_thread, context)) 
     {
       fprintf (stderr, "%lx: context failed: ctrl-c won't work\n",
-	       GetCurrentThreadId ()); 
+               GetCurrentThreadId ()); 
       fflush (stderr);
     }
   DEBUGs ("context captured (or not)");
   ret = ResumeThread (w32_main_thread);
   DEBUGd ("main resumed with %d", ret);
 
   LeaveCriticalSection (&w32_thread_setjmp_mutex);
   return 0;
@@ -115,23 +115,23 @@ w32_reset_context (LPVOID v)
 static void 
 w32_raise_in_main (void)
 {
   DWORD threadid;
 
   DEBUGd ("w32_raise_in_main with signal %d", w32_signal_to_raise);
   raise (w32_signal_to_raise);
   DEBUGd ("w32_raise_in_main signal %d returned a value",
-	  w32_signal_to_raise);
+          w32_signal_to_raise);
 
   DEBUGs ("attempting to restore main to pre-signal configuration");
   if (w32_restore_thread != NULL) /* Catch leaky threads */
     CloseHandle (w32_restore_thread);
   w32_restore_thread = CreateThread (NULL, 10000, w32_reset_context,
-				     &w32_signal_context, 0, &threadid);
+                                     &w32_signal_context, 0, &threadid);
   if (w32_restore_thread == NULL) 
     {
       fprintf (stderr, "w32_raise_in_main couldn't create thread\n"); 
       fflush (stderr);
     } 
   else 
     {
       DEBUGs ("waiting to restore raise context");
@@ -170,48 +170,48 @@ w32_raise (int sig)
          main thread with w32_signal_to_raise set to the signal */
       CONTEXT raise_context;
       DEBUGd ("raising signal %d from separate thread", signal);
 
       /* Suspend main and remember the context.  */
       SuspendThread (w32_main_thread);
       /* X86 code */
       w32_signal_context.ContextFlags 
-	= CONTEXT_FULL|CONTEXT_FLOATING_POINT|CONTEXT_DEBUG_REGISTERS;
+        = CONTEXT_FULL|CONTEXT_FLOATING_POINT|CONTEXT_DEBUG_REGISTERS;
       GetThreadContext (w32_main_thread, &w32_signal_context);
 
       /* Change the context to w32_raise_in_main.  The
-	 context.Eip=&fn trick for setting the program counter is
-	 courtesy of
+         context.Eip=&fn trick for setting the program counter is
+         courtesy of
 
-	   http://fit.c2.com/files/LispPlatform/lisp/clisp-2.28/src/win32aux.d
+           http://fit.c2.com/files/LispPlatform/lisp/clisp-2.28/src/win32aux.d
 
          Auxiliary functions for CLISP on Win32, Bruno Haible
-	 1997-1999.  */
+         1997-1999.  */
 
       memcpy (&raise_context, &w32_signal_context, sizeof (CONTEXT));
       raise_context.Eip = (DWORD)&w32_raise_in_main; /* X86 code */
       w32_signal_to_raise = sig;
       SetThreadContext (w32_main_thread, &raise_context);
 
       /* Resume main at w32_raise_in_main */
       ret = ResumeThread (w32_main_thread);
       DEBUGd ("main resumed at w32_raise_in_main with suspend count %d",
-	      ret);
+              ret);
     }
 }
 
 void
 w32_sigint_init (void)
 {
   /* Capture main context */
   w32_main_thread_id = GetCurrentThreadId ();
   DuplicateHandle (GetCurrentProcess (), GetCurrentThread (),
-		   GetCurrentProcess (), &w32_main_thread,
-		   0, FALSE, DUPLICATE_SAME_ACCESS);
+                   GetCurrentProcess (), &w32_main_thread,
+                   0, FALSE, DUPLICATE_SAME_ACCESS);
 
   InitializeCriticalSectionAndSpinCount (&w32_thread_setjmp_mutex, 0);
 }
 
 #endif /* #if defined (__WIN32__) && ! defined (_POSIX_VERSION) */
 
 void
 octave_jump_to_enclosing_context (void)
diff --git a/libcruft/misc/f77-fcn.h b/libcruft/misc/f77-fcn.h
--- a/libcruft/misc/f77-fcn.h
+++ b/libcruft/misc/f77-fcn.h
@@ -1,11 +1,11 @@
 /*
 
-Copyright (C) 1996, 1997, 2002, 2003, 2004, 2005, 2006, 2007, 2008
+Copyright (C) 1996, 1997, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
               John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
@@ -52,29 +52,29 @@ extern "C" {
 #define F77_XFCN(f, F, args) \
   do \
     { \
       octave_jmp_buf saved_context; \
       sig_atomic_t saved_octave_interrupt_immediately = octave_interrupt_immediately; \
       f77_exception_encountered = 0; \
       octave_save_current_context (saved_context); \
       if (octave_set_current_context) \
-	{ \
-	  octave_interrupt_immediately = saved_octave_interrupt_immediately; \
+        { \
+          octave_interrupt_immediately = saved_octave_interrupt_immediately; \
           octave_restore_current_context (saved_context); \
-	  if (f77_exception_encountered) \
-	    F77_XFCN_ERROR (f, F); \
+          if (f77_exception_encountered) \
+            F77_XFCN_ERROR (f, F); \
           else \
-	    octave_rethrow_exception (); \
-	} \
+            octave_rethrow_exception (); \
+        } \
       else \
         { \
-	  octave_interrupt_immediately++; \
-	  F77_FUNC (f, F) args; \
-	  octave_interrupt_immediately--; \
+          octave_interrupt_immediately++; \
+          F77_FUNC (f, F) args; \
+          octave_interrupt_immediately--; \
           octave_restore_current_context (saved_context); \
         } \
     } \
   while (0)
 
 /* So we can check to see if an exception has occurred. */
 CRUFT_API extern int f77_exception_encountered;
 
@@ -216,17 +216,17 @@ octave_make_cray_const_ftn_ch_dsc (const
 #define F77_CSTRING(s, len, cs) \
  OCTAVE_LOCAL_BUFFER (char, cs, F77_CHAR_ARG_LEN_USE (s, len) + 1); \
  memcpy (cs, F77_CHAR_ARG_USE (s), F77_CHAR_ARG_LEN_USE (s, len)); \
  cs[F77_CHAR_ARG_LEN_USE(s, len)] = '\0' 
 
 
 extern CRUFT_API F77_RET_T
 F77_FUNC (xstopx, XSTOPX) (F77_CONST_CHAR_ARG_DECL
-			   F77_CHAR_ARG_LEN_DECL) GCC_ATTR_NORETURN;
+                           F77_CHAR_ARG_LEN_DECL) GCC_ATTR_NORETURN;
 
 #ifdef __cplusplus
 }
 #endif
 
 #endif
 
 /*
diff --git a/libcruft/misc/quit.h b/libcruft/misc/quit.h
--- a/libcruft/misc/quit.h
+++ b/libcruft/misc/quit.h
@@ -149,27 +149,27 @@ CRUFT_API extern void octave_rethrow_exc
 #define BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE_1 \
   do \
     { \
       octave_jmp_buf saved_context; \
  \
       octave_save_current_context (saved_context); \
  \
       if (octave_set_current_context) \
-	{ \
-	  octave_restore_current_context (saved_context)
+        { \
+          octave_restore_current_context (saved_context)
 
 #define BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE_2 \
-	} \
+        } \
       else \
-	{ \
-	  octave_interrupt_immediately++
+        { \
+          octave_interrupt_immediately++
 
 #define END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE \
-	  octave_interrupt_immediately--; \
+          octave_interrupt_immediately--; \
           octave_restore_current_context (saved_context); \
         } \
     } \
   while (0)
 
 #ifdef __cplusplus
 
 #define BEGIN_INTERRUPT_WITH_EXCEPTIONS \
