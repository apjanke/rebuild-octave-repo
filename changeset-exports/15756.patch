# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1355000889 18000
#      Sat Dec 08 16:08:09 2012 -0500
# Node ID ea1a1fb00744a8b73bb4856c1d93e6c04a720f4a
# Parent  3216dafbbd48bd77d367d328b8bfdc0ebc486e2e
Make the path to the shell interpreter configuable

* configure.ac: Add --with-shell option and define SHELL_PATH.
* libinterp/interp-core/oct-procbuf.cc (octave_procbuf::open),
libinterp/interpfcn/toplev.cc (Fsystem): Use it.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -119,16 +119,37 @@ OCTAVE_SET_DEFAULT([imagedir], '$(datadi
 
 PKG_PROG_PKG_CONFIG
 
 ### Make configure args available for other uses.
 
 config_opts=$ac_configure_args
 AC_SUBST(config_opts)
 
+### Define the path to the shell on the host system.  Most systems will
+### ensure /bin/sh is the default shell so this can be safely ignored by
+### almost everyone.  However, when building for Android, for example,
+### this will need to be set.
+SHELL_PATH=/bin/sh
+AC_ARG_WITH([shell],
+  [AS_HELP_STRING([--with-shell=SHELL],
+    [use SHELL as the shell interpreter (default: /bin/sh)])])
+case $with_shell in
+  no)
+    AC_MSG_ERROR([A shell interpreter is required])
+  ;;
+  yes | "")
+  ;;
+  *)
+    SHELL_PATH=$with_shell
+  ;;
+esac
+AC_DEFINE_UNQUOTED([SHELL_PATH], ["$SHELL_PATH"],
+  [Define this to be the path to the shell command interpreter.])
+
 ### Enable bounds checking on element references within Octave's array and
 ### matrix classes.  This slows down some operations a bit, so it is turned off
 ### by default.
 
 BOUNDS_CHECKING=false
 AC_ARG_ENABLE([bounds-check],
   [AS_HELP_STRING([--enable-bounds-check],
     [enable bounds checking for indexing in internal array classes])],
diff --git a/libinterp/interp-core/oct-procbuf.cc b/libinterp/interp-core/oct-procbuf.cc
--- a/libinterp/interp-core/oct-procbuf.cc
+++ b/libinterp/interp-core/oct-procbuf.cc
@@ -37,16 +37,20 @@ along with Octave; see the file COPYING.
 #include "oct-syscalls.h"
 #include "sysdep.h"
 #include "variables.h"
 
 #include "defun.h"
 #include "gripes.h"
 #include "utils.h"
 
+#ifndef SHELL_PATH
+#define SHELL_PATH "/bin/sh"
+#endif
+
 // This class is based on the procbuf class from libg++, written by
 // Per Bothner, Copyright (C) 1993 Free Software Foundation.
 
 static octave_procbuf *octave_procbuf_list = 0;
 
 #ifndef BUFSIZ
 #define BUFSIZ 1024
 #endif
@@ -120,17 +124,17 @@ octave_procbuf::open (const char *comman
             {
               gnulib::fclose (fp);
               fp = 0;
             }
 
           octave_procbuf_list = octave_procbuf_list->next;
         }
 
-      execl ("/bin/sh", "sh", "-c", command, static_cast<void *> (0));
+      execl (SHELL_PATH, "sh", "-c", command, static_cast<void *> (0));
 
       exit (127);
     }
 
   gnulib::close (child_end);
 
   if (proc_pid < 0)
     {
diff --git a/libinterp/interpfcn/toplev.cc b/libinterp/interpfcn/toplev.cc
--- a/libinterp/interpfcn/toplev.cc
+++ b/libinterp/interpfcn/toplev.cc
@@ -72,16 +72,20 @@ along with Octave; see the file COPYING.
 #include "sysdep.h"
 #include "syswait.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 #include "version.h"
 
+#ifndef SHELL_PATH
+#define SHELL_PATH "/bin/sh"
+#endif
+
 void (*octave_exit) (int) = ::exit;
 
 // TRUE means the quit() call is allowed.
 bool quit_allowed = true;
 
 // TRUE means we are exiting via the builtin exit or quit functions.
 bool quitting_gracefully = false;
 // This stores the exit status.
@@ -945,17 +949,17 @@ command shell that is started to run the
 
               if (pid < 0)
                 error ("system: fork failed -- can't create child process");
               else if (pid == 0)
                 {
                   // FIXME -- should probably replace this
                   // call with something portable.
 
-                  execl ("/bin/sh", "sh", "-c", cmd_str.c_str (),
+                  execl (SHELL_PATH, "sh", "-c", cmd_str.c_str (),
                          static_cast<void *> (0));
 
                   panic_impossible ();
                 }
               else
                 retval(0) = pid;
 #elif defined (__WIN32__)
               STARTUPINFO si;
