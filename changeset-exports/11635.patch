# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1202850553 18000
#      Tue Feb 12 16:09:13 2008 -0500
# Branch release-3-0-x
# Node ID e08d2fff0d586e2cdb588743cc70ecac5d4e42ff
# Parent  83f4996e8d01d0ef8156c611cb300158119cf0ff
Implement cdatamapping and respect to to allow correct image/imagesc rendering

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2008-02-12  David Bateman  <dbateman@free.fr>
+ 
+	* plot/__go_draw_axes__.m: Use the cdatamapping property to set
+	the cbrange.
+	* plot/__img__.m: Set cdatamapping to "direct".
+	* plot/imagesc.m: Set cdatamapping to "scaled".
+
 2008-02-08  Julien Pommier  <pommier@pianoteq.com>
 
 	* audio/wavread.m: Limit data read to end of data chunk.
 
 2008-01-30  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/edit.m: Use "## Created: DATE" instead of "initial
 	revision".
diff --git a/scripts/image/__img__.m b/scripts/image/__img__.m
--- a/scripts/image/__img__.m
+++ b/scripts/image/__img__.m
@@ -49,17 +49,17 @@ function h = __img__ (x, y, img, varargi
   endif
 
   xlim = [x(1), x(end)];
   ylim = [y(1), y(end)];
 
   ca = gca ();
 
   tmp = __go_image__ (ca, "cdata", img, "xdata", xlim, "ydata", ylim, 
-		      varargin {:});
+		      "cdatamapping", "direct", varargin {:});
 
   set (ca, "view", [0, 90]);
 
   if (strcmp (get (ca, "nextplot"), "replace"))
     set (ca, "ydir", "reverse");
   endif
 
   if (nargout > 0)
diff --git a/scripts/image/imagesc.m b/scripts/image/imagesc.m
--- a/scripts/image/imagesc.m
+++ b/scripts/image/imagesc.m
@@ -104,16 +104,17 @@ function ret = __imagesc__ (ax, x, y, A,
     A = x;
     limits = y;
     x = y = [];
   elseif (nargin == 4 && ! isscalar (x) && ! isscalar (y) && ! isscalar (A))
     limits = [];
   endif
 
   ret = image (ax, x, y, A);
+  set (ret, "cdatamapping", "scaled")
 
   ## use given limits or guess them from the matrix
   if (length (limits) == 2 && limits(2) >= limits(1))
     set (ax, "clim", limits);
   elseif (! isempty (limits))
     error ("expected data limits to be [lo, hi]");
   endif
 
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -286,16 +286,17 @@ function __go_draw_axes__ (h, plot_strea
     else
       fputs (plot_stream, "unset logscale z;\n");
     endif
 
     xautoscale = strcmpi (axis_obj.xlimmode, "auto");
     yautoscale = strcmpi (axis_obj.ylimmode, "auto");
     zautoscale = strcmpi (axis_obj.zlimmode, "auto");
     cautoscale = strcmpi (axis_obj.climmode, "auto");
+    cdatadirect = false;
 
     kids = axis_obj.children;
 
     nd = __calc_dimensions__ (axis_obj);
 
     if (nd == 3)
       fputs (plot_stream, "set parametric;\n");
       fputs (plot_stream, "set style data lines;\n");
@@ -332,16 +333,19 @@ function __go_draw_axes__ (h, plot_strea
       switch (obj.type)
 	case "image"
 	  img_data = obj.cdata;
 	  img_xdata = obj.xdata;
 	  img_ydata = obj.ydata;
 
 	  if (use_gnuplot_for_images)
 
+	    if (strcmp (obj.cdatamapping, "direct"))
+	      cdatadirect = true;
+	    endif
 	    fputs (plot_stream, "set border front;\n");
 	    data_idx++;
 	    is_image_data(data_idx) = true;
 	    parametric(data_idx) = false;
 	    have_cdata(data_idx) = false;
 
 	    [y_dim, x_dim] = size (img_data(:,:,1));
 	    if (x_dim > 1)
@@ -496,16 +500,19 @@ function __go_draw_axes__ (h, plot_strea
 	  endif
 
        case "patch"
          cmap = parent_figure_obj.colormap;
 	 [nr, nc] = size (obj.xdata);
 
 	 if (! isempty (obj.cdata))
 	   cdat = obj.cdata;
+	   if (strcmp (obj.cdatamapping, "direct"))
+	     cdatadirect = true;
+	   endif
 	 else
 	   cdat = [];
 	 endif
 
 	 for i = 1:nc
 	   xcol = obj.xdata(:,i);
 	   ycol = obj.ydata(:,i);
 	   if (nd == 3)
@@ -1046,18 +1053,24 @@ function __go_draw_axes__ (h, plot_strea
       if (strcmpi (axis_obj.zdir, "reverse"))
 	zdir = "reverse";
       else
 	zdir = "noreverse";
       endif
       fprintf (plot_stream, "set zrange [%.15e:%.15e] %s;\n", zlim, zdir);
     endif
 
+    cmap = parent_figure_obj.colormap;    
+    cmap_sz = rows(cmap);
     if (! any (isinf (clim)))
-      fprintf (plot_stream, "set cbrange [%g:%g];\n", clim);
+      if (cdatadirect)
+	fprintf (plot_stream, "set cbrange [1:%d];\n", cmap_sz);
+      else
+	fprintf (plot_stream, "set cbrange [%g:%g];\n", clim);
+      endif
     endif
 
     if (strcmpi (axis_obj.box, "on"))
       if (nd == 3)
 	fputs (plot_stream, "set border 4095;\n");
       else
 	fputs (plot_stream, "set border 431;\n");
       endif
@@ -1154,18 +1167,16 @@ function __go_draw_axes__ (h, plot_strea
     fputs (plot_stream, "set style data lines;\n");
 
     if (! use_gnuplot_for_images)
       for i = 1:ximg_data_idx
 	view_fcn (xlim, ylim, ximg_data{i}, view_zoom, view_cmd);
       endfor
     endif
 
-    cmap = parent_figure_obj.colormap;    
-    cmap_sz = rows(cmap);
     if (length(cmap) > 0)
       if (have_newer_gnuplot)
         fprintf (plot_stream,
 		 "set palette positive color model RGB maxcolors %i;\n",
 	         cmap_sz);
 	fprintf (plot_stream,
 	         "set palette file \"-\" binary record=%d using 1:2:3:4;\n",
 	         cmap_sz);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2008-02-12  David Bateman  <dbateman@free.fr?
+
+	* graphics.h.in: Implement the cdatamapping property in patch,
+	surface and image objects.
+	* graphics.cc: ditto.
+
 2008-02-12  John W. Eaton  <jwe@octave.org>
 
 	* pt-loop.cc (tree_simple_for_command::eval): Compute range
 	element with multiplication.
 
 2008-02-08  John W. Eaton  <jwe@octave.org>
 
 	* ov-struct.cc (octave_struct::subsref): Allow Cell::index to resize.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -2459,17 +2459,18 @@ std::string text::properties::go_name ("
 
 // ---------------------------------------------------------------------
 
 image::properties::properties (const graphics_handle& mh,
 			       const graphics_handle& p)
   : base_properties (go_name, mh, p),
     xdata (Matrix ()),
     ydata (Matrix ()),
-    cdata (Matrix ())
+    cdata (Matrix ()),
+    cdatamapping (radio_values ("{scaled}|direct"))
 { }
 
 void
 image::properties::set (const caseless_str& name,
 			const octave_value& val)
 {
   bool modified = true;
 
@@ -2485,16 +2486,18 @@ image::properties::set (const caseless_s
       modified = false;
     }
   else if (name.compare ("xdata"))
     set_xdata (val);
   else if (name.compare ("ydata"))
     set_ydata (val);
   else if (name.compare ("cdata"))
     set_cdata (val);
+  else if (name.compare ("cdatamapping"))
+    set_cdatamapping (val);
   else
     {
       modified = false;
       warning ("set: invalid property `%s'", name.c_str ());
     }
 
   if (modified)
     mark_modified ();
@@ -2508,16 +2511,17 @@ image::properties::get (void) const
   m.assign ("tag", tag);
   m.assign ("type", type);
   m.assign ("parent", parent.as_octave_value ());
   m.assign ("children", children);
   m.assign ("__modified__", __modified__);
   m.assign ("xdata", xdata);
   m.assign ("ydata", ydata);
   m.assign ("cdata", cdata);
+  m.assign ("cdatamapping", cdatamapping);
 
   return m;
 }
 
 octave_value
 image::properties::get (const caseless_str& name) const
 {
   octave_value retval;
@@ -2533,45 +2537,49 @@ image::properties::get (const caseless_s
   else if (name.compare ("__modified__"))
     retval = __modified__;
   else if (name.compare ("xdata"))
     retval = xdata;
   else if (name.compare ("ydata"))
     retval = ydata;
   else if (name.compare ("cdata"))
     retval = cdata;
+  else if (name.compare ("cdatamapping"))
+    retval = cdatamapping;
   else
     warning ("get: invalid property `%s'", name.c_str ());
 
   return retval;
 }
 
 property_list::pval_map_type
 image::properties::factory_defaults (void)
 {
   property_list::pval_map_type m;
 
   m["xdata"] = Matrix ();
   m["ydata"] = Matrix ();
   m["cdata"] = Matrix ();
+  m["cdatamapping"] = radio_property (radio_values ("{scaled}|direct"));
 
   return m;
 }
 
 std::string image::properties::go_name ("image");
 
 // ---------------------------------------------------------------------
 
 patch::properties::properties (const graphics_handle& mh,
 			       const graphics_handle& p)
   : base_properties (go_name, mh, p),
     xdata (Matrix ()),
     ydata (Matrix ()),
     zdata (Matrix ()),
     cdata (Matrix ()),
+    cdatamapping (radio_values ("{scaled}|direct")),
     faces (Matrix ()),
     vertices (Matrix ()),
     facecolor (radio_values ("{flat}|none|interp")),
     facealpha (1.0),
     edgecolor (color_values (0, 0, 0), radio_values ("flat|none|interp")),
     linestyle ("-"),
     linewidth (0.5),
     marker ("none"),
@@ -2602,16 +2610,18 @@ patch::properties::set (const caseless_s
   else if (name.compare ("xdata"))
     set_xdata (val);
   else if (name.compare ("ydata"))
     set_ydata (val);
   else if (name.compare ("zdata"))
     set_zdata (val);
   else if (name.compare ("cdata"))
     set_cdata (val);
+  else if (name.compare ("cdatamapping"))
+    set_cdatamapping (val);
   else if (name.compare ("faces"))
     set_faces (val);
   else if (name.compare ("vertices"))
     set_vertices (val);
   else if (name.compare ("facecolor"))
     set_facecolor (val);
   else if (name.compare ("facealpha"))
     set_facealpha (val);
@@ -2652,16 +2662,17 @@ patch::properties::get (void) const
   m.assign ("type", type);
   m.assign ("parent", parent.as_octave_value ());
   m.assign ("children", children);
   m.assign ("__modified__", __modified__);
   m.assign ("xdata", xdata);
   m.assign ("ydata", ydata);
   m.assign ("zdata", zdata);
   m.assign ("cdata", cdata);
+  m.assign ("cdatamapping", cdatamapping);
   m.assign ("faces", faces);
   m.assign ("vertices", vertices);
   m.assign ("facecolor", facecolor);
   m.assign ("facealpha", facealpha);
   m.assign ("edgecolor", edgecolor);
   m.assign ("linestyle", linestyle);
   m.assign ("linewidth", linewidth);
   m.assign ("marker", marker);
@@ -2692,16 +2703,18 @@ patch::properties::get (const caseless_s
   else if (name.compare ("xdata"))
     retval = xdata;
   else if (name.compare ("ydata"))
     retval = ydata;
   else if (name.compare ("zdata"))
     retval = zdata;
   else if (name.compare ("cdata"))
     retval = cdata;
+  else if (name.compare ("cdatamapping"))
+    retval = cdatamapping;
   else if (name.compare ("faces"))
     retval = faces;
   else if (name.compare ("vertices"))
     retval = vertices;
   else if (name.compare ("facecolor"))
     retval = facecolor;
   else if (name.compare ("facealpha"))
     retval = facealpha;
@@ -2733,16 +2746,17 @@ property_list::pval_map_type
 patch::properties::factory_defaults (void)
 {
   property_list::pval_map_type m;
 
   m["xdata"] = Matrix ();
   m["ydata"] = Matrix ();
   m["zdata"] = Matrix ();
   m["cdata"] = Matrix ();
+  m["cdatamapping"] = radio_property (radio_values ("{scaled}|direct"));
   m["faces"] = Matrix ();
   m["vertices"] = Matrix ();
   m["facecolor"] = color_property ();
   m["facealpha"] = 1.0;
   m["edgecolor"] = color_property ("black");
   m["linestyle"] = "-";
   m["linewidth"] = 0.5;
   m["marker"] = "none";
@@ -2761,16 +2775,17 @@ std::string patch::properties::go_name (
 
 surface::properties::properties (const graphics_handle& mh,
 				 const graphics_handle& p)
   : base_properties (go_name, mh, p),
     xdata (Matrix ()),
     ydata (Matrix ()),
     zdata (Matrix ()),
     cdata (Matrix ()),
+    cdatamapping (radio_values ("{scaled}|direct")),
     facecolor (radio_values ("{flat}|none|interp")),
     facealpha (1.0),
     edgecolor (color_values (0, 0, 0), radio_values ("flat|none|interp")),
     linestyle ("-"),
     linewidth (0.5),
     marker ("none"),
     markeredgecolor ("auto"),
     markerfacecolor ("none"),
@@ -2799,16 +2814,18 @@ surface::properties::set (const caseless
   else if (name.compare ("xdata"))
     set_xdata (val);
   else if (name.compare ("ydata"))
     set_ydata (val);
   else if (name.compare ("zdata"))
     set_zdata (val);
   else if (name.compare ("cdata"))
     set_cdata (val);
+  else if (name.compare ("cdatamapping"))
+    set_cdatamapping (val);
   else if (name.compare ("facecolor"))
     set_facecolor (val);
   else if (name.compare ("facealpha"))
     set_facealpha (val);
   else if (name.compare ("edgecolor"))
     set_edgecolor (val);
   else if (name.compare ("linestyle"))
     set_linestyle (val);
@@ -2845,16 +2862,17 @@ surface::properties::get (void) const
   m.assign ("type", type);
   m.assign ("parent", parent.as_octave_value ());
   m.assign ("children", children);
   m.assign ("__modified__", __modified__);
   m.assign ("xdata", xdata);
   m.assign ("ydata", ydata);
   m.assign ("zdata", zdata);
   m.assign ("cdata", cdata);
+  m.assign ("cdatamapping", cdatamapping);
   m.assign ("facecolor", facecolor);
   m.assign ("facealpha", facealpha);
   m.assign ("edgecolor", edgecolor);
   m.assign ("linestyle", linestyle);
   m.assign ("linewidth", linewidth);
   m.assign ("marker", marker);
   m.assign ("markeredgecolor", markeredgecolor);
   m.assign ("markerface", markerfacecolor);
@@ -2883,16 +2901,18 @@ surface::properties::get (const caseless
   else if (name.compare ("xdata"))
     retval = xdata;
   else if (name.compare ("ydata"))
     retval = ydata;
   else if (name.compare ("zdata"))
     retval = zdata;
   else if (name.compare ("cdata"))
     retval = cdata;
+  else if (name.compare ("cdatamapping"))
+    retval = cdatamapping;
   else if (name.compare ("facecolor"))
     retval = facecolor;
   else if (name.compare ("facealpha"))
     retval = facealpha;
   else if (name.compare ("edgecolor"))
     retval = edgecolor;
   else if (name.compare ("linestyle"))
     retval = linestyle;
@@ -2920,16 +2940,17 @@ property_list::pval_map_type
 surface::properties::factory_defaults (void)
 {
   property_list::pval_map_type m;
 
   m["xdata"] = Matrix ();
   m["ydata"] = Matrix ();
   m["zdata"] = Matrix ();
   m["cdata"] = Matrix ();
+  m["cdatamapping"] = radio_property (radio_values ("{scaled}|direct"));
   m["facecolor"] = color_property ();
   m["facealpha"] = 1.0;
   m["edgecolor"] = color_property ("black");
   m["linestyle"] = "-";
   m["linewidth"] = 0.5;
   m["marker"] = "none";
   m["markeredgecolor"] = "auto";
   m["markerfacecolor"] = "none";
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -733,16 +733,22 @@ public:
   }
 
   virtual data_property get_cdata (void) const
   {
     error ("get: invalid property \"cdata\"");
     return data_property ();
   }
 
+  virtual radio_property get_cdatamapping (void) const
+  {
+    error ("get: invalid property \"cdatamapping\"");
+    return radio_property ();
+  }
+
 protected:
   std::string tag;
   std::string type;
   bool __modified__;
   graphics_handle __myhandle__;
   graphics_handle parent;
   Matrix children;
 };
@@ -1024,16 +1030,22 @@ public:
   }
 
   data_property get_cdata (void) const
   {
     const base_properties& props = get_properties ();
     return props.get_cdata ();
   }
 
+  radio_property get_cdatamapping (void) const
+  {
+    const base_properties& props = get_properties ();
+    return props.get_cdatamapping ();
+  }
+
 private:
   base_graphics_object *rep;
 };
 
 // ---------------------------------------------------------------------
 
 class root_figure : public base_graphics_object
 {
@@ -1744,16 +1756,17 @@ public:
 
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES
       data_property xdata l
       data_property ydata l
       data_property cdata l
+      radio_property cdatamapping a
     END_PROPERTIES
 
     static std::string go_name;
   };
 
 private:
   properties xproperties;
 
@@ -1839,16 +1852,17 @@ public:
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES
       data_property xdata l
       data_property ydata l
       data_property zdata l
       data_property cdata l
+      radio_property cdatamapping a
       octave_value faces
       octave_value vertices
       color_property facecolor a
       octave_value facealpha
       color_property edgecolor a
       octave_value linestyle
       octave_value linewidth
       octave_value marker
@@ -1947,16 +1961,17 @@ public:
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES
       data_property xdata l
       data_property ydata l
       data_property zdata l
       data_property cdata l
+      radio_property cdatamapping a
       color_property facecolor a
       octave_value facealpha
       color_property edgecolor a
       octave_value linestyle
       octave_value linewidth
       octave_value marker
       octave_value markeredgecolor
       octave_value markerfacecolor
