# HG changeset patch
# User jwe
# Date 1010082669 0
#      Thu Jan 03 18:31:09 2002 +0000
# Node ID 81552337b12096af26cd23fc2b3dbbb63170c078
# Parent  67c500559ac11d74f8251d63919bf8e9a2f4b60d
[project @ 2002-01-03 18:31:08 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2001-12-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* data-conv.cc (LS_DO_READ): Don't do anything unless len > 0.
+	(LS_DO_WRITE): Likewise.
+	
 2001-11-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* mx-inlines.cc (MX_CUMMULATIVE_OP): New macro.
 	* CMatrix.cc (ComplexMatrix::cumprod, ComplexMatrix::cumsum): Use it.
 	* dMatrix.cc (Matrix::cumprod, Matrix::cumsum): Likewise.
 
 	* mx-inlines.cc (MX_REDUCTION_OP, MX_REDUCTION_OP_COL_EXPR,
 	MX_REDUCTION_OP_ROW_EXPR): New macros.
diff --git a/liboctave/data-conv.cc b/liboctave/data-conv.cc
--- a/liboctave/data-conv.cc
+++ b/liboctave/data-conv.cc
@@ -183,40 +183,46 @@ oct_data_conv::string_to_data_type (cons
   return retval;
 }
 
 #define swap_1_bytes(x, y)
 
 #define LS_DO_READ(TYPE, swap, data, size, len, stream) \
   do \
     { \
-      volatile TYPE *ptr = X_CAST (volatile TYPE *, data); \
-      stream.read (X_CAST (char *, ptr), size * len); \
-      if (swap) \
-        swap_ ## size ## _bytes (ptr, len); \
-      TYPE tmp = ptr[0]; \
-      for (int i = len - 1; i > 0; i--) \
-        data[i] = ptr[i]; \
-      data[0] = tmp; \
+      if (len > 0) \
+	{ \
+	  volatile TYPE *ptr = X_CAST (volatile TYPE *, data); \
+	  stream.read (X_CAST (char *, ptr), size * len); \
+	  if (swap) \
+	    swap_ ## size ## _bytes (ptr, len); \
+	  TYPE tmp = ptr[0]; \
+	  for (int i = len - 1; i > 0; i--) \
+	    data[i] = ptr[i]; \
+	  data[0] = tmp; \
+	} \
     } \
   while (0)
 
 // Have to use copy here to avoid writing over data accessed via
 // Matrix::data().
 
 #define LS_DO_WRITE(TYPE, data, size, len, stream) \
   do \
     { \
-      char tmp_type = static_cast<char> (type); \
-      stream.write (&tmp_type, 1); \
-      TYPE *ptr = new TYPE [len]; \
-      for (int i = 0; i < len; i++) \
-        ptr[i] = X_CAST (TYPE, data[i]); \
-      stream.write (X_CAST (char *, ptr), size * len); \
-      delete [] ptr ; \
+      if (len > 0) \
+	{ \
+	  char tmp_type = static_cast<char> (type); \
+	  stream.write (&tmp_type, 1); \
+	  TYPE *ptr = new TYPE [len]; \
+	  for (int i = 0; i < len; i++) \
+	    ptr[i] = X_CAST (TYPE, data[i]); \
+	  stream.write (X_CAST (char *, ptr), size * len); \
+	  delete [] ptr ; \
+	} \
     } \
   while (0)
 
 // Loading variables from files.
 
 static void
 gripe_unrecognized_float_fmt (void)
 {
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2002-01-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lex.l (.): Remove test for EOF since it is already handled
+	separately.
+
 2001-12-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* load-save.cc (save_mat5_binary_element):
 	Extract dimensions directly from tc.
 	Handle ranges the same as real matrices.
 
 2001-11-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -714,23 +714,21 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
 %{
 // Unrecognized input is a lexical error.
 %}
 
 . {
     current_input_column++;
 
-    if (static_cast<int> (yytext[0]) == EOF)
-      error ("unexpected end of file near line %d, column %d",
-	     input_line_number, current_input_column);
-    else
-      error ("invalid character `%s' (ASCII %d) near line %d, column %d",
-	     undo_string_escape (yytext[0]), static_cast<int> (yytext[0]),
-	     input_line_number, current_input_column);
+    // EOF can't happen here (we catch it above).
+
+    error ("invalid character `%s' (ASCII %d) near line %d, column %d",
+	   undo_string_escape (yytext[0]), static_cast<int> (yytext[0]),
+	   input_line_number, current_input_column);
 
     return LEXICAL_ERROR;
   }
 
 %%
 
 // GAG.
 //
