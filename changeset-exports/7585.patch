# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1205330700 -3600
#      Wed Mar 12 15:05:00 2008 +0100
# Node ID 522433b05f45aa127364b8d60fb092eb5b1a6a96
# Parent  a5307fa238ac4592ac2e410c0914f067ffc29a8b
Fix griddata3 and add test code

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2008-03-12  David Bateman  <dbateman@free.fr>
+
+	* geometry/griddata3.m: Use griddatan and not griddata
+	internally. Return vi and not yi. Add test code.
+
 2008-03-11  John W. Eaton  <jwe@octave.org>
 
 	* plot/__go_draw_axes__.m: Use get to access hidden properties.
 	Use strcmpi when comparing string properties.
 
 2008-03-11  Kai Habel  <kai.habel@gmx.de>
 
         * plot/__go_draw_axes__.m: Plot surfaces in front of axes.
diff --git a/scripts/geometry/griddata3.m b/scripts/geometry/griddata3.m
--- a/scripts/geometry/griddata3.m
+++ b/scripts/geometry/griddata3.m
@@ -25,17 +25,17 @@
 ##
 ## The interpolation method can be @code{"nearest"} or @code{"linear"}.
 ## If method is omitted it defaults to @code{"linear"}.
 ## @seealso{griddata, delaunayn}
 ## @end deftypefn
 
 ## Author: David Bateman <dbateman@free.fr>
 
-function [yi] = griddata3 (x, y, z,v, xi, yi, zi, method, varargin)
+function vi = griddata3 (x, y, z, v, xi, yi, zi, method, varargin)
 	
   if (nargin < 7)
     print_usage ();
   endif
 
   if (!all (size (x) == size (y) & size (x) == size(z) & size(x) == size (v)))
     error ("griddata3: x, y, z, and v must be vectors of same length");
   endif
@@ -43,15 +43,38 @@ function [yi] = griddata3 (x, y, z,v, xi
   ## meshgrid xi, yi and zi if they are vectors unless they
   ## are vectors of the same length 
   if (isvector (xi) && isvector (yi) && isvector (zi)
       && (numel (xi) != numel (yi) || numel (xi) != numel (zi)))
     [xi, yi, zi] = meshgrid (xi, yi, zi);
   endif
 
   if (any (size(xi) != size(yi)) || any (size(xi) != size(zi)))
-    error ("griddata: xi, yi and zi must be vectors or matrices of same size");
+    error ("griddata3: xi, yi and zi must be vectors or matrices of same size");
   endif
 
-  vi = griddata ([x(:), y(:), z(:)], v(:), [xi(:), yi(:), zi(:)], varargin{:});
+  vi = griddatan ([x(:), y(:), z(:)], v(:), [xi(:), yi(:), zi(:)], varargin{:});
   vi = reshape (vi, size (xi));
 endfunction
 
+%!test
+%! rand('state', 0);
+%! x = 2 * rand(1000, 1) - 1;
+%! y = 2 * rand(1000, 1) - 1;
+%! z = 2 * rand(1000, 1) - 1;
+%! v = x.^2 + y.^2 + z.^2;
+%! [xi, yi, zi] = meshgrid (-0.8:0.2:0.8);
+%! ##vi = reshape (griddatan([x(:), y(:), z(:)], v, [xi(:), yi(:), zi(:)], 'linear'), size (xi));
+%! vi = griddata3 (x, y, z, v, xi, yi, zi, 'linear');
+%! vv = vi - xi.^2 - yi.^2 - zi.^2;
+%! assert (max(abs(vv(:))), 0, 0.1)
+
+%!test
+%! rand('state', 0);
+%! x = 2 * rand(1000, 1) - 1;
+%! y = 2 * rand(1000, 1) - 1;
+%! z = 2 * rand(1000, 1) - 1;
+%! v = x.^2 + y.^2 + z.^2;
+%! [xi, yi, zi] = meshgrid (-0.8:0.2:0.8);
+%! ##vi = reshape (griddatan([x(:), y(:), z(:)], v, [xi(:), yi(:), zi(:)], 'linear'), size (xi));
+%! vi = griddata3 (x, y, z, v, xi, yi, zi, 'nearest');
+%! vv = vi - xi.^2 - yi.^2 - zi.^2;
+%! assert (max(abs(vv(:))), 0, 0.1)
