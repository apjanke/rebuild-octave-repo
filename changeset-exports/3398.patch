# HG changeset patch
# User jwe
# Date 945490912 0
#      Sat Dec 18 04:21:52 1999 +0000
# Node ID 0f515bc984607765537f85d9728d8d08b95ff043
# Parent  1a8e2c0d627a337f2e4487d3db31e619f1627697
[project @ 1999-12-18 04:21:28 by jwe]

diff --git a/scripts/control/DEMOcontrol.m b/scripts/control/DEMOcontrol.m
--- a/scripts/control/DEMOcontrol.m
+++ b/scripts/control/DEMOcontrol.m
@@ -35,17 +35,19 @@
 ##   [ 7] End
 ## @end group
 ## @end example
 ## Command examples are interactively run for users to observe the use
 ## of OCST functions.
 ## @end deftypefn
 
 ## Demo programs: bddemo.m, frdemo.m, analdemo.m, moddmeo.m, rldemo.m
-## Written by David Clem August 15, 1994
+
+## Author: David Clem
+## Created: August 15, 1994
 
 function DEMOcontrol ()
 
   disp(' O C T A V E    C O N T R O L   S Y S T E M S   T O O L B O X')
 
   while (1)
     clc
     k = 0;
diff --git a/scripts/control/abcddim.m b/scripts/control/abcddim.m
--- a/scripts/control/abcddim.m
+++ b/scripts/control/abcddim.m
@@ -56,19 +56,21 @@
 ## 
 ## Otherwise @code{abcddim} returns @var{n} = @var{m} = @var{p} = @minus{}1.
 ## 
 ## Note: n = 0 (pure gain block) is returned without warning.
 ## 
 ## See also: is_abcd
 ## @end deftypefn
 
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1993.
+## a s hodel: modified to accept pure-gain systems aug 1996
+
 function [n, m, p] = abcddim (a, b, c, d)
-## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
-## a s hodel: modified to accept pure-gain systems aug 1996
 
   if (nargin != 4)
     error ("abcddim: four arguments required");
   endif
 
   n = m = p = -1;
 
   [a,an,am] = abcddims(a);
diff --git a/scripts/control/abcddims.m b/scripts/control/abcddims.m
--- a/scripts/control/abcddims.m
+++ b/scripts/control/abcddims.m
@@ -19,17 +19,20 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File } {[@var{y}, @var{my}, @var{ny}] =} abcddims (@var{x})
 ## 
 ## Used internally in @code{abcddim}.  If @var{x} is a zero-size matrix, 
 ## both dimensions are set to 0 in @var{y}.  
 ## @var{my} and @var{ny} are the row and column dimensions of the result.
 ## @end deftypefn
 
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: February 1997
+
 function [y, my, ny] = abcddims (x)
-## Written by A. S. Hodel (scotte@eng.auburn.edu) Feb 1997
 
   y = x;
   if(isempty(y))
     y = [];
   endif
   [my,ny] = size(y);
+
 endfunction
diff --git a/scripts/control/analdemo.m b/scripts/control/analdemo.m
--- a/scripts/control/analdemo.m
+++ b/scripts/control/analdemo.m
@@ -16,19 +16,21 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free 
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
  
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { } analdemo ( ) 
 ##  Octave Controls toolbox demo: State Space analysis demo
 ## @end deftypefn
 
+## Author: David Clem
+## Created: August 15, 1994
+## Updated by John Ingram December 1996
+
 function analdemo ()
-## Written by David Clem August 15, 1994
-## Updated by John Ingram December 1996
   
   while (1)
     clc
     k=0;
     while(k > 8 || k < 1)
       k = menu("Octave State Space Analysis Demo", ...
         "System grammians (gram, dgram)", ...
         "System zeros (tzero)", ...
diff --git a/scripts/control/are.m b/scripts/control/are.m
--- a/scripts/control/are.m
+++ b/scripts/control/are.m
@@ -56,18 +56,20 @@
 ## Laub's Schur method (IEEE Transactions on
 ## Automatic Control, 1979) is applied to the appropriate Hamiltonian
 ## matrix.
 ## 
 ## @end deftypefn
 
 ## See also: balance, dare
 
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1993
+
 function x = are (a, b, c, opt)
-## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
 
   if (nargin == 3 || nargin == 4)
     if (nargin == 4)
       if (! (strcmp (opt, "N") || strcmp (opt, "P") ...
 	     || strcmp (opt, "S") || strcmp (opt, "B") ...
 	     || strcmp (opt, "n") || strcmp (opt, "p") ...
 	     || strcmp (opt, "s") || strcmp (opt, "b")))
 	warning ("are: opt has an invalid value; setting to B");
diff --git a/scripts/control/bddemo.m b/scripts/control/bddemo.m
--- a/scripts/control/bddemo.m
+++ b/scripts/control/bddemo.m
@@ -16,20 +16,21 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free 
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { outputs =} bddemo ( inputs ) 
 ##  Octave Controls toolbox demo: Block Diagram Manipulations demo
 ## @end deftypefn
  
-function bddemo ()
+## Author: David Clem
+## Created: August 15, 1994
+## Modified by A S Hodel Summer-Fall 1996
 
-  ## Written by David Clem August 15, 1994
-  ## Modified by A S Hodel Summer-Fall 1996
+function bddemo ()
 
   sav_page = page_screen_output;
   page_screen_output = 1;
 
   while (1)
     clc
     k=0;
     while(k > 14 || k < 1)
diff --git a/scripts/control/bode.m b/scripts/control/bode.m
--- a/scripts/control/bode.m
+++ b/scripts/control/bode.m
@@ -85,24 +85,24 @@
 ## being printed to the screen (@code{ans = []}).
 ## 
 ## @item If the requested plot is for an MIMO system, mag is set to
 ##  @math{||G(jw)||} or @math{||G(@code{exp}(jwT))||}
 ## and phase information is not computed.
 ## @end enumerate
 ## @end deftypefn 
 
-function [mag_r, phase_r, w_r] = bode (sys, w, outputs, inputs, plot_style)
+## Author: John Ingram <ingraje@eng.auburn.edu>
+## Created: July 10, 1996
+## Based on previous code by R. Bruce Tenison, July 13, 1994
+## Modified by David Clem November 13, 1994
+## again by A. S. Hodel July 1995 (smart plot range, etc.)
+## Modified by Kai P. Mueller September 28, 1997 (multiplot mode)
 
-  ## Written by John Ingram  July 10th, 1996
-  ## Based on previous code
-  ## By R. Bruce Tenison, July 13, 1994
-  ## Modified by David Clem November 13, 1994
-  ## again by A. S. Hodel July 1995 (smart plot range, etc.)
-  ## Modified by Kai P. Mueller September 28, 1997 (multiplot mode)
+function [mag_r, phase_r, w_r] = bode (sys, w, outputs, inputs, plot_style)
 
   ## check number of input arguments given
   if (nargin < 1 | nargin > 5)
     usage("[mag,phase,w] = bode(sys[,w,outputs,inputs,plot_style])");
   endif
   if(nargin < 2)
     w = [];
   endif
diff --git a/scripts/control/buildssic.m b/scripts/control/buildssic.m
--- a/scripts/control/buildssic.m
+++ b/scripts/control/buildssic.m
@@ -14,18 +14,16 @@
 ## 
 ## You should have received a copy of the GNU General Public License 
 ## along with Octave; see the file COPYING.  If not, write to the Free 
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File } {@var{sys} =} buildssic(@var{Clst}, @var{Ulst}, @var{Olst}, @var{Ilst}, @var{s1}, @var{s2}, @var{s3}, @var{s4}, @var{s5}, @var{s6}, @var{s7}, @var{s8})
 ## 
-## Contributed by Kai Mueller.
-## 
 ##  Form an arbitrary complex (open or closed loop) system in
 ##  state-space form from several systems. "@code{buildssic}" can
 ##  easily (despite it's cryptic syntax) integrate transfer functions
 ##  from a complex block diagram into a single system with one call.
 ##  This function is especially useful for building open loop
 ##  interconnections for H_infinity and H2 designs or for closing
 ##  loops with these controllers.
 ## 
@@ -121,21 +119,22 @@
 ## obtained by (all SISO systems):
 ## @example
 ## GW = buildssic([1, 4; 2, 4; 3, 1], 3, [2, 3, 5],
 ##                [3, 4], G, W1, W2, One);
 ## @end example
 ## where "One" is a unity gain (auxillary) function with order 0.
 ## (e.g. @code{One = ugain(1);})
 ## @end deftypefn
- 
+
+## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
+## Created: April 1998
+
 function sys = buildssic (Clst, Ulst, Olst, Ilst, s1, s2, s3, s4, s5, s6, s7, s8)
 
-  ## Written by Kai Mueller April 1998
-
   if((nargin < 5) || (nargin > 12))
     usage("sys = buildssic(Clst,Ulst,Olst,Ilst,s1,s2,s3,s4,s5,s6,s7,s8)");
   endif
   if (nargin >= 5)
     if (!is_struct(s1))
       error("---> s1 must be a structed system.");
     endif
     s1 = sysupdate(s1, "ss");
diff --git a/scripts/control/c2d.m b/scripts/control/c2d.m
--- a/scripts/control/c2d.m
+++ b/scripts/control/c2d.m
@@ -61,21 +61,21 @@
 ## x[n+1] = Ad x[n] + Bd u[n]
 ## @end example
 ## via the matrix exponential or bilinear transform
 ## 
 ## @strong{Note} This function adds the suffix  @code{_d}
 ## to the names of the new discrete states.   
 ## @end deftypefn
 
-function dsys = c2d (sys, opt, T)
+## Author: R. Bruce Tenison <btenison@eng.auburn.edu>
+## Created: October 1993
+## Updated by John Ingram for system data structure August 1996
 
-  ## Written by R.B. Tenison (btenison@eng.auburn.edu)
-  ## October 1993
-  ## Updated by John Ingram for system data structure August 1996
+function dsys = c2d (sys, opt, T)
 
   ## parse input arguments
   if(nargin < 1 | nargin > 3)
     usage("dsys=c2d(sys[,T])");
   elseif (!is_struct(sys))
     error("sys must be a system data structure");
   elseif (nargin == 1)
     opt = "ex";
diff --git a/scripts/control/controldemo.m b/scripts/control/controldemo.m
--- a/scripts/control/controldemo.m
+++ b/scripts/control/controldemo.m
@@ -13,18 +13,19 @@
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
 
 ## Controls toolbox demo.
 ## Demo programs: bddemo.m, frdemo.m, analdemo.m, moddmeo.m, rldemo.m
-##  
-## Written by David Clem August 15, 1994
+
+## Author: David Clem
+## Created: August 15, 1994
 
 function DEMOcontrol ()
 
   disp(' O C T A V E    C O N T R O L   S Y S T E M S   T O O L B O X')
 
   while (1)
     clc
     k = 0;
diff --git a/scripts/control/ctrb.m b/scripts/control/ctrb.m
--- a/scripts/control/ctrb.m
+++ b/scripts/control/ctrb.m
@@ -27,21 +27,21 @@
 ## 
 ##  of a system data structure or the pair (@var{A}, @var{B}).
 ## 
 ## @strong{Note} @code{ctrb} forms the controllability matrix.
 ##        The numerical properties of @code{is_controllable}
 ##        are much better for controllability tests.
 ## @end deftypefn
 
-function Qs = ctrb (sys, b)
+## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
+## Created: November 4, 1997
+## based on is_controllable.m of Scottedward Hodel
 
-  ## Written by Kai P. Mueller November 4, 1997
-  ## based on is_controllable.m of Scottedward Hodel
-  ## modified by
+function Qs = ctrb (sys, b)
 
   if (nargin == 2)
     a = sys;
   elseif (nargin == 1 && is_struct(sys))
     sysupdate(sys,"ss");
     [a,b] = sys2ss(sys);
   else
     usage("ctrb(sys [, b])")
diff --git a/scripts/control/d2c.m b/scripts/control/d2c.m
--- a/scripts/control/d2c.m
+++ b/scripts/control/d2c.m
@@ -49,20 +49,22 @@
 ## FIXME: bilinear option exits with an error if @var{sys} is not purely discrete
 ## 
 ## @end table
 ## @end table
 ## @strong{Outputs} @var{csys} continuous time system (same dimensions and
 ## signal names as in @var{sys}).
 ## @end deftypefn
  
+## Author: R. Bruce Tenison <btenison@eng.auburn.edu>
+## Created: August 23, 1994
+## Updated by John Ingram for system data structure  August 1996
+
 function csys = d2c (sys, opt)
 
-  ## Written by R. Bruce Tenison August 23, 1994
-  ## Updated by John Ingram for system data structure  August 1996
   ## SYS_INTERNAL accesses members of system data structure
 
   if( (nargin != 1) & (nargin != 2) )
     usage("csys = d2c(sys[,tol]), csys = d2c(sys,opt)");
   elseif (!is_struct(sys))
     error("sys must be in system data structure");
   elseif(nargin == 1)
     opt = "log";
diff --git a/scripts/control/damp.m b/scripts/control/damp.m
--- a/scripts/control/damp.m
+++ b/scripts/control/damp.m
@@ -23,20 +23,20 @@
 ##       system @var{p}, respectively.
 ##       If @var{p} is a system, @var{tsam} must not be specified.
 ##       If @var{p} is a matrix and @var{tsam} is specified, eigenvalues
 ##       of @var{p} are assumed to be in @var{z}-domain.
 ## 
 ## See also: @code{eig}
 ## @end deftypefn
 
-function damp (p, tsam)
+## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
+## Created: September 29, 1997.
 
-  ## Written by Kai P. Mueller September 29, 1997.
-  ## Update
+function damp (p, tsam)
 
   ## assume a continuous system
   DIGITAL = 0;
   if(nargin < 1 || nargin > 2)
     usage("damp(p,[ tsamp])")
   endif
   if(is_struct(p))
     if (nargin != 1)
diff --git a/scripts/control/dare.m b/scripts/control/dare.m
--- a/scripts/control/dare.m
+++ b/scripts/control/dare.m
@@ -66,17 +66,17 @@
 ##  See also: Ran and Rodman, "Stable Hermitian Solutions of Discrete
 ##  Algebraic Riccati Equations," Mathematics of Control, Signals and
 ##  Systems, Vol 5, no 2 (1992)  pp 165-194.
 ## 
 ## @end deftypefn
 
 ## See also: balance, are
 
-## Author: A. S. Hodel <scotte@eng.auburn.edu>
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1993
 ## Adapted-By: jwe
 
 function x = dare (a, b, c, r, opt)
 
   if (nargin == 4 | nargin == 5)
     if (nargin == 5)
       if (opt != "N" || opt != "P" || opt != "S" || opt != "B")
diff --git a/scripts/control/dcgain.m b/scripts/control/dcgain.m
--- a/scripts/control/dcgain.m
+++ b/scripts/control/dcgain.m
@@ -19,17 +19,18 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File } {@var{gm} =} dcgain(@var{sys}@{, tol@})
 ##       Returns dc-gain matrix. If dc-gain is infinite
 ##       an empty matrix is returned.
 ##       The argument @var{tol} is an optional tolerance for the condition
 ##       number of @var{A}-Matrix in @var{sys} (default @var{tol} = 1.0e-10)
 ## @end deftypefn
 
-## Written by Kai P Mueller (mueller@ifr.ing.tu-bs.de) October 1, 1997
+## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
+## Created: October 1, 1997
 
 function gm = dcgain (sys, tol)
 
   if((nargin < 1) || (nargin > 2) || (nargout > 1))
     usage("[gm, ok] = dcgain(sys[, tol])");
   endif
   if(!is_struct(sys))
     error("dcgain: first argument is not a system data structure.")
diff --git a/scripts/control/dezero.m b/scripts/control/dezero.m
--- a/scripts/control/dezero.m
+++ b/scripts/control/dezero.m
@@ -18,16 +18,17 @@
 ## 02111-1307, USA.
 
 ## usage:  dezero (s)
 ##
 ## Remove trailing blank entries and all zero entries from the string s.
 
 ## Author: Kurt Hornik <Kurt.Hornik@ci.tuwien.ac.at>
 ## Adapted-By: jwe
+
 ## Adapted from deblank by A. S. Hodel (a.s.hodel@eng.auburn.edu)
 ## 	(the name dezero is a reference to the Fermilab D0 experiment,
 ##      where my sister did her PhD research) 
 
 function t = dezero (s)
 
   ## delete the next line if you're stubbornly going to use dezero.
   error("dezero is no longer supported.");
diff --git a/scripts/control/dgkfdemo.m b/scripts/control/dgkfdemo.m
--- a/scripts/control/dgkfdemo.m
+++ b/scripts/control/dgkfdemo.m
@@ -16,17 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free 
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
 
 ## -*- texinfo -*-
 ##@deftypefn {Function File } { } dgkfdemo ( ) 
 ## Octave Controls toolbox demo: H2/Hinfinity options demos
 ##@end deftypefn
  
-## Written by A. S. Hodel June 1995
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: June 1995
 
 function dgkfdemo ()
  
   save_val = page_screen_output;
   page_screen_output = 1;
   while (1)
     clc
     menuopt=0;
diff --git a/scripts/control/dgram.m b/scripts/control/dgram.m
--- a/scripts/control/dgram.m
+++ b/scripts/control/dgram.m
@@ -34,16 +34,17 @@
 ## @strong{Outputs}
 ## @var{m} (@var{n} by @var{n}) satisfies
 ## @example
 ##  a m a' - m + b*b' = 0 
 ## @end example
 ## 
 ## @end deftypefn
 
-function m = dgram (a, b)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: July 1995
 
-  ## Written by A. S. Hodel July 1995
+function m = dgram (a, b)
 
   ## let dlyap do the error checking...
   m = dlyap(a,b*b');
 
 endfunction
diff --git a/scripts/control/dhinfdemo.m b/scripts/control/dhinfdemo.m
--- a/scripts/control/dhinfdemo.m
+++ b/scripts/control/dhinfdemo.m
@@ -1,9 +1,9 @@
-## Copyright (C) 1996, 1998 Kai Mueller
+## Copyright (C) 1996, 1998 Kai P. Mueller
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by the
 ## Free Software Foundation; either version 2, or (at your option) any
 ## later version.
 ##
diff --git a/scripts/control/dlqe.m b/scripts/control/dlqe.m
--- a/scripts/control/dlqe.m
+++ b/scripts/control/dlqe.m
@@ -90,21 +90,23 @@
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ## (@var{a} - @var{a}@var{l}@var{c}).
 ## @end ifinfo
 ## @end table
 ## @end deftypefn
 
-function [l, m, p, e] = dlqe (a, g, c, sigw, sigv, s)
-## Written by A. S. Hodel (scotte@eng.auburn.edu) August, 1993.
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1993
 ## Modified for discrete time by R. Bruce Tenison (btenison@eng.auburn.edu)
 ## October, 1993
 
+function [l, m, p, e] = dlqe (a, g, c, sigw, sigv, s)
+
   if (nargin != 5 && nargin != 6)
     error ("dlqe: invalid number of arguments");
   endif
 
   ## The problem is dual to the regulator design, so transform to dlqr call.
 
   if (nargin == 5)
     [k, p, e] = dlqr (a', c', g*sigw*g', sigv);
diff --git a/scripts/control/dlqg.m b/scripts/control/dlqg.m
--- a/scripts/control/dlqg.m
+++ b/scripts/control/dlqg.m
@@ -38,19 +38,20 @@
 ## inputs:
 ##  A,B,C,G, or Sys: state space representation of system.  
 ##  Sigw, Sigv: covariance matrices of independent Gaussian noise processes 
 ##      (as above)
 ##  Q, R: state, control weighting matrices for dlqr call respectively.  
 ##
 ## See also: lqg, dlqe, dlqr
 
-function [K, Q, P, Ee, Er] = dlqg (A, B, C, G, Sigw, Sigv, Q, R)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1995
 
-  ## Written by A. S. Hodel August 1995
+function [K, Q, P, Ee, Er] = dlqg (A, B, C, G, Sigw, Sigv, Q, R)
 
   warning("dlqg: obsolete. use lqg instead (system data structure format)");
 
   if (nargin == 5)
     ## system data structure format
 
     ## check that it really is system data structure
     if(! is_struct(A) )
diff --git a/scripts/control/dlqr.m b/scripts/control/dlqr.m
--- a/scripts/control/dlqr.m
+++ b/scripts/control/dlqr.m
@@ -99,21 +99,23 @@
 ## @enumerate
 ## @item Anderson and Moore, Optimal Control: Linear Quadratic Methods,
 ##      Prentice-Hall, 1990, pp. 56-58
 ## @item  Kuo, Digital Control Systems, Harcourt Brace Jovanovich, 1992, 
 ##      section 11-5-2.
 ## @end enumerate
 ## @end deftypefn
 
-function [k, p, e] = dlqr (a, b, q, r, s)
-## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1993
 ## Converted to discrete time by R. B. Tenison
 ## (btenison@eng.auburn.edu) October 1993
 
+function [k, p, e] = dlqr (a, b, q, r, s)
+
   if (nargin != 4 && nargin != 5)
     error ("dlqr: invalid number of arguments");
   endif
 
   ## Check a.
   if ((n = is_square (a)) == 0)
     error ("dlqr: requires 1st parameter(a) to be square");
   endif
diff --git a/scripts/control/dlyap.m b/scripts/control/dlyap.m
--- a/scripts/control/dlyap.m
+++ b/scripts/control/dlyap.m
@@ -55,19 +55,20 @@
 ## 
 ## Column-by-column solution method as suggested in
 ##   Hammarling, @cite{Numerical Solution of the Stable, Non-Negative
 ##   Definite Lyapunov Equation}, IMA Journal of Numerical Analysis, Volume
 ##   2, pages 303--323 (1982).
 ## 
 ## @end deftypefn
  
-function x = dlyap (a, b)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1993
 
-  ## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
+function x = dlyap (a, b)
 
   if ((n = is_square (a)) == 0)
     warning ("dlyap: a must be square");
   endif
 
   if ((m = is_square (b)) == 0)
     [n1, m] = size (b);
     if (n1 == n)
diff --git a/scripts/control/dmr2d.m b/scripts/control/dmr2d.m
--- a/scripts/control/dmr2d.m
+++ b/scripts/control/dmr2d.m
@@ -65,19 +65,19 @@
 ## indices of "formerly fast" states specified by @var{idx} and @var{sprefix};
 ## these states are updated to the new (slower) sampling interval @var{Ts2}.
 ## @end table
 ## 
 ## @strong{WARNING} Not thoroughly tested yet; especially when @var{cuflg} == 0.
 ## 
 ## @end deftypefn
 
-function [dsys, fidx] = dmr2d (sys, idx, sprefix, Ts2, cuflg)
+## Adapted from c2d by a.s.hodel@eng.auburn.edu
 
-  ## Adapted from c2d by a.s.hodel@eng.auburn.edu
+function [dsys, fidx] = dmr2d (sys, idx, sprefix, Ts2, cuflg)
 
   ## parse input arguments
   if(nargin != 4 | nargout > 2)
     usage("[dsys,fidx] = dmr2d (sys, idx, sprefix, Ts2 {,cuflg})");
 
   elseif (!is_struct(sys))
     error("sys must be in system data structure form");
 
diff --git a/scripts/control/fir2sys.m b/scripts/control/fir2sys.m
--- a/scripts/control/fir2sys.m
+++ b/scripts/control/fir2sys.m
@@ -62,22 +62,23 @@
 ## Sampling interval: 0.342
 ## transfer function form:
 ## 1*z^3 - 1*z^2 + 2*z^1 + 4
 ## -------------------------
 ## 1*z^3 + 0*z^2 + 0*z^1 + 0
 ## @end example
 ## @end deftypefn
  
-function sys = fir2sys (num, tsam, inname, outname)
+## Author: R. Bruce Tenison <btenison@eng.auburn.edu>
+## Created: July 29, 1994
+## Name changed to TF2SYS July 1995
+## updated for new system data structure format July 1996
+## adapted from tf2sys july 1996
 
-  ## Written by R. Bruce Tenison  July 29, 1994
-  ## Name changed to TF2SYS July 1995
-  ## updated for new system data structure format July 1996
-  ## adapted from tf2sys july 1996
+function sys = fir2sys (num, tsam, inname, outname)
 
   ## Test for the correct number of input arguments
   if (nargin < 1 | nargin > 4)
     usage('sys=fir2sys(num[,tsam,inname,outname])');
   endif
 
   ## let tf2sys do the argument checking
   den = [1,zeros(1,length(num)-1)];
diff --git a/scripts/control/frdemo.m b/scripts/control/frdemo.m
--- a/scripts/control/frdemo.m
+++ b/scripts/control/frdemo.m
@@ -16,22 +16,22 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free 
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
 
 ## -*- texinfo -*- 
 ## @deftypefn {Function File } { } frdemo ( ) 
 ## Octave Controls toolbox demo: Frequency Response demo
 ## @end deftypefn
 
-function frdemo ()
+## Author: David Clem
+## Created: August 15, 1994 
+## a s hodel: updated to match new order of ss2zp outputs
+## J Ingram:  updated for system data structure format August 1996
 
-  ## Written by David Clem August 15, 1994 
-
-  ## a s hodel: updated to match new order of ss2zp outputs
-  ## J Ingram:  updated for system data structure format August 1996
+function frdemo ()
 
   disp("")
   clc
   j = 0;
   while (j != 4)
     disp("");
     j = menu("Octave Controls Systems Toolbox Frequency Response Demo",...
              'Bode analysis (bode)',...
diff --git a/scripts/control/freqchkw.m b/scripts/control/freqchkw.m
--- a/scripts/control/freqchkw.m
+++ b/scripts/control/freqchkw.m
@@ -17,19 +17,20 @@
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
  
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { @var{retval} =} freqchkw ( @var{w} ) 
 ## Used by @code{freqresp} to check that input frequency vector @var{w} is legal.
 ## Returns boolean value.
 ## @end deftypefn
 
-function USEW = freqchkw (w)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: July 1996
 
-  ## A S Hodel July 1996
+function USEW = freqchkw (w)
 
   if(isempty(w))
     USEW = 0;
   elseif(!is_vector(w))
     error(["w (",num2str(rows(w)),"x",num2str(columns(w)), ...
       "): must be [], a vector or a scalar"]);
   elseif( (max(abs(imag(w))) != 0) && (min(real(w)) <= 0) )
     error("w must have real positive entries");
diff --git a/scripts/control/freqresp.m b/scripts/control/freqresp.m
--- a/scripts/control/freqresp.m
+++ b/scripts/control/freqresp.m
@@ -34,19 +34,21 @@
 ## @table @var
 ## @item @var{out} 
 ## vector of finite @math{G(j*w)} entries (or @math{||G(j*w)||} for MIMO)
 ## @item w 
 ## vector of corresponding frequencies 
 ## @end table
 ## @end deftypefn
 
+## Author: R. Bruce Tenison <btenison@eng.auburn.edu>
+## Created: July 11, 1994
+
 function [ff, w] = freqresp (sys, USEW, w);
 
-  ## Written by: R. Bruce Tenison July 11, 1994
   ## SYS_INTERNAL accesses members of system data structure
 
   save_val = empty_list_elements_ok;
   empty_list_elements_ok = 1;
 
   ## Check Args
   if( (nargin < 2) || (nargin > 4) )
     usage ("[ff,w] = freqresp(sys,USEW{,w})");
diff --git a/scripts/control/gram.m b/scripts/control/gram.m
--- a/scripts/control/gram.m
+++ b/scripts/control/gram.m
@@ -19,16 +19,16 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { @var{m} =} gram (@var{a}, @var{b})
 ##  Return controllability grammian @var{m} of the continuous time system
 ## @math{ dx/dt = a x + b u}.  
 ## 
 ## @var{m} satisfies @math{ a m + m a' + b b' = 0 }.
 ## @end deftypefn
 
-## Written by A. S. Hodel 
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 
 function m = gram (a, b)
 
   ## let lyap do the error checking...
   m = lyap(a,b*b');
 
 endfunction
diff --git a/scripts/control/h2norm.m b/scripts/control/h2norm.m
--- a/scripts/control/h2norm.m
+++ b/scripts/control/h2norm.m
@@ -20,20 +20,21 @@
 ## @deftypefn {Function File } {@var{retval} =} h2norm(@var{sys})
 ## Computes the H2 norm of a system data structure (continuous time only)
 ## 
 ## Reference:
 ##  Doyle, Glover, Khargonekar, Francis, ``State Space Solutions to Standard
 ##  H2 and Hinf Control Problems", IEEE TAC August 1989
 ## @end deftypefn
 
-function h2gain = h2norm (sys)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1995
+## updated for system data structure by John Ingram November 1996
 
-  ## A. S. Hodel Aug 1995
-  ## updated for system data structure by John Ingram November 1996
+function h2gain = h2norm (sys)
 
   if((nargin != 1))
     usage("h2gain = h2norm(sys)");
   elseif(!is_struct(sys))
     error("Sys must be in system data structure");
   end
   dflg = is_digital(sys);
 
diff --git a/scripts/control/h2syn.m b/scripts/control/h2syn.m
--- a/scripts/control/h2syn.m
+++ b/scripts/control/h2syn.m
@@ -53,19 +53,19 @@
 ## state estimator (packed)
 ## @item    Pc
 ## ARE solution matrix for regulator subproblem
 ## @item    Pf
 ## ARE solution matrix for filter subproblem
 ## @end table
 ## @end deftypefn
  
-function [K, gain, Kc, Kf, Pc, Pf] = h2syn (Asys, nu, ny, tol)
+## Updated for System structure December 1996 by John Ingram
 
-  ## Updated for System structure December 1996 by John Ingram
+function [K, gain, Kc, Kf, Pc, Pf] = h2syn (Asys, nu, ny, tol)
 
   if ((nargin < 3) | (nargin > 4))
     usage("[K,gain, Kc, Kf, Pc, Pf] = h2syn(Asys,nu,ny[,tol])");
   elseif(nargin == 3 )
     [chkdgkf,dgs] = is_dgkf(Asys,nu,ny);
   elseif(nargin == 4)
     [chkdgkf,dgs] = is_dgkf(Asys,nu,ny,tol);
   endif
diff --git a/scripts/control/hinf_ctr.m b/scripts/control/hinf_ctr.m
--- a/scripts/control/hinf_ctr.m
+++ b/scripts/control/hinf_ctr.m
@@ -30,22 +30,23 @@
 ## final gamma value
 ## @end table
 ## @strong{Outputs}
 ## controller K (system data structure)
 ## 
 ## Do not attempt to use this at home; no argument checking performed.
 ## @end deftypefn
   
-function K = hinf_ctr (dgs, F, H, Z, g)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1995
+## Revised by Kai P. Mueller April 1998 to solve the general H_infinity
+## problem using unitary transformations Q (on w and z)
+## and non-singular transformations R (on u and y).
 
-  ## A. S. Hodel August 1995
-  ## Revised by Kai P Mueller April 1998 to solve the general H_infinity
-  ## problem using unitary transformations Q (on w and z)
-  ## and non-singular transformations R (on u and y).
+function K = hinf_ctr (dgs, F, H, Z, g)
 
   nw = dgs.nw;
   nu = dgs.nu;
   nz = dgs.nz;
   ny = dgs.ny;
   d22nz = dgs.Dyu_nz;
   
   B1  = dgs.Bw;
diff --git a/scripts/control/hinfdemo.m b/scripts/control/hinfdemo.m
--- a/scripts/control/hinfdemo.m
+++ b/scripts/control/hinfdemo.m
@@ -1,9 +1,9 @@
-## Copyright (C) 1996, 1998 Kai Mueller
+## Copyright (C) 1996, 1998 Kai P. Mueller
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by the
 ## Free Software Foundation; either version 2, or (at your option) any
 ## later version.
 ##
@@ -123,17 +123,18 @@
 ##	         +---+
 ## @end group
 ## @end display
 ##	W1 and W2 are the robustness and performancs weighting
 ##       functions
 ## @end table
 ## @end deftypefn
 
-## Kai P. Mueller 30-APR-1998 <mueller@ifr.ing.tu-bs.de
+## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
+## Created: April 30, 1998
 
 yn = [];
 while (length(yn) < 1)
   yn = input(" * [s]iso, [m]imo, or [d]iscrete design? [no default]: ","S");
 endwhile
 if ((yn(1) == "s") | (yn(1) == 'S'))
   sys_type = 1;
 elseif ((yn(1) == "m") | (yn(1) == 'M'))
diff --git a/scripts/control/hinfsyn.m b/scripts/control/hinfsyn.m
--- a/scripts/control/hinfsyn.m
+++ b/scripts/control/hinfsyn.m
@@ -70,24 +70,25 @@
 ## 
 ## @item Keith Glover and John C. Doyle, "State-space formulae for all
 ##      stabilizing controllers that satisfy and h-infinity-norm bound
 ##      and relations to risk sensitivity,"
 ##      Systems & Control Letters 11, Oct. 1988, pp 167-172.
 ## @end enumerate
 ## @end deftypefn
  
-function [K, g, GW, Xinf, Yinf] = hinfsyn (Asys, nu, ny, gmin, gmax, gtol, ptol, tol)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1995
+## Updated for Packed system structures December 1996 by John Ingram
+## 
+## Revised by Kai P. Mueller April 1998 to solve the general H_infinity
+## problem using unitary transformations Q (on w and z)
+## and non-singular transformations R (on u and y).
 
-  ## A. S. Hodel August 1995
-  ## Updated for Packed system structures December 1996 by John Ingram
-  ## 
-  ## Revised by Kai P Mueller April 1998 to solve the general H_infinity
-  ## problem using unitary transformations Q (on w and z)
-  ## and non-singular transformations R (on u and y).
+function [K, g, GW, Xinf, Yinf] = hinfsyn (Asys, nu, ny, gmin, gmax, gtol, ptol, tol)
 
   if( (nargin < 1) | (nargin > 8) )
     usage("[K,g,GW,Xinf,Yinf] = hinfsyn(Asys,nu,ny,gmin,gmax,gtol,ptol,tol)");
   endif
   ## set default arguments
   if(nargin < 8)
     tol = 200*eps;
   elseif(!is_sample(tol))
diff --git a/scripts/control/hinfsyn_chk.m b/scripts/control/hinfsyn_chk.m
--- a/scripts/control/hinfsyn_chk.m
+++ b/scripts/control/hinfsyn_chk.m
@@ -40,19 +40,20 @@
 ## @item Pc
 ##  solution of "regulator" H-inf ARE
 ## @item Pf
 ##  solution of "filter" H-inf ARE
 ## @end table
 ## Do not attempt to use this at home; no argument checking performed.
 ## @end deftypefn 
 
-function [retval, Pc, Pf] = hinfsyn_chk (A, B1, B2, C1, C2, D12, D21, g, ptol)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1995
 
-  ## A. S. Hodel August 1995
+function [retval, Pc, Pf] = hinfsyn_chk (A, B1, B2, C1, C2, D12, D21, g, ptol)
 
   Pc = Pf = [];
 
   ## Construct the two Hamiltonians
   g2 = 1/(g*g);
   Hc = [ A ,  g2*B1*B1' - B2*B2'; -C1'*C1 , -A'];
   Hf = [ A' , g2*C1'*C1 - C2'*C2; -B1*B1' , -A];
 
diff --git a/scripts/control/impulse.m b/scripts/control/impulse.m
--- a/scripts/control/impulse.m
+++ b/scripts/control/impulse.m
@@ -39,22 +39,23 @@
 ##  computed from the eigenvalues of the A-Matrix.
 ## @end table
 ## @strong{Outputs}
 ## @var{y}, @var{t}: impulse response
 ## @end deftypefn
  
 ## See also:  step, stepimp
 
-function [y, t] = impulse (sys, inp, tstop, n)
-
-## Written by Kai P. Mueller October 2, 1997
+## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
+## Created: October 2, 1997
 ## based on lsim.m of Scottedward Hodel
 ## modified by
 
+function [y, t] = impulse (sys, inp, tstop, n)
+
   if((nargin < 1) || (nargin > 4))
     usage("[y, u] = impulse(sys[, inp, tstop, n])");
   endif
 
   if(nargout > 2)
     usage("[y, u] = impulse(sys[, inp, tstop, n])");
   endif
 
diff --git a/scripts/control/is_abcd.m b/scripts/control/is_abcd.m
--- a/scripts/control/is_abcd.m
+++ b/scripts/control/is_abcd.m
@@ -20,21 +20,21 @@
 ## @deftypefn {Function File } { @var{retval} =} is_abcd( @var{a}@{, @var{b}, @var{c}, @var{d}@})
 ##  Returns @var{retval} = 1 if the dimensions of @var{a}, @var{b}, @var{c}, @var{d}
 ##  are compatible, otherwise @var{retval} = 0 with an appropriate diagnostic
 ##  message printed to the screen.  The matrices b, c, or d may be omitted.
 ## @end deftypefn
 
 ## See also: abcddim
 
-function retval = is_abcd (a, b, c, d)
+## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
+## Created: November 4, 1997
+## based on is_controllable.m of Scottedward Hodel
 
-  ## Written by Kai P. Mueller November 4, 1997
-  ## based on is_controllable.m of Scottedward Hodel
-  ## modified by
+function retval = is_abcd (a, b, c, d)
 
   retval = 0;
   switch (nargin)
     case (1)
       ## A only
       [na, ma] = size(a);
       if (na != ma)
         disp("Matrix A ist not square.")
diff --git a/scripts/control/is_controllable.m b/scripts/control/is_controllable.m
--- a/scripts/control/is_controllable.m
+++ b/scripts/control/is_controllable.m
@@ -53,21 +53,22 @@
 ## @code{is_observable}, @code{is_stabilizable}, @code{is_detectable}, 
 ## 	@code{krylov}, @code{krylovb}
 ## 
 ## @end deftypefn
 
 ## See also: size, rows, columns, length, is_matrix, is_scalar, is_vector
 ##     is_observable, is_stabilizable, is_detectable, krylov, krylovb
 
-function [retval, U] = is_controllable (a, b, tol)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1993
+## Updated by A. S. Hodel (scotte@eng.auburn.edu) Aubust, 1995 to use krylovb 
+## Updated by John Ingram (ingraje@eng.auburn.edu) July, 1996 for packed systems
 
-  ## Written by A. S. Hodel (scotte@eng.auburn.edu) August, 1993.
-  ## Updated by A. S. Hodel (scotte@eng.auburn.edu) Aubust, 1995 to use krylovb 
-  ## Updated by John Ingram (ingraje@eng.auburn.edu) July, 1996 for packed systems
+function [retval, U] = is_controllable (a, b, tol)
 
   deftol = 1;    # assume default tolerance
   if(nargin < 1 | nargin > 3)
     usage("[retval,U] = %s\n\t%s", "is_controllable(a {, b ,tol})", ...
 	"is_controllable(sys{,tol})");
   elseif(is_struct(a))
     ## system structure passed.
     sys = sysupdate(a,"ss");
diff --git a/scripts/control/is_detectable.m b/scripts/control/is_detectable.m
--- a/scripts/control/is_detectable.m
+++ b/scripts/control/is_detectable.m
@@ -28,20 +28,21 @@
 ## computational method.
 ## 
 ##  Default: tol = 10*norm(a,'fro')*eps 
 ## 
 ## @end deftypefn
 
 ## See also: size, rows, columns, length, is_matrix, is_scalar, is_vector.
 
-function [retval, U] = is_detectable (a, c, tol)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1993
+## Updated by John Ingram (ingraje@eng.auburn.edu) July 1996.
 
-  ## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
-  ## Updated by John Ingram (ingraje@eng.auburn.edu) July 1996.
+function [retval, U] = is_detectable (a, c, tol)
 
   if( nargin < 1) 
     usage("[retval,U] = is_detectable(a , c {, tol})");
   elseif(is_struct(a))
     ## system form
     if(nargin == 2)
       tol = c;
     elseif(nargin > 2)
diff --git a/scripts/control/is_dgkf.m b/scripts/control/is_dgkf.m
--- a/scripts/control/is_dgkf.m
+++ b/scripts/control/is_dgkf.m
@@ -89,41 +89,41 @@
 ##  Doyle, Glover, Khargonekar, Francis, "State Space Solutions
 ##      to Standard H2 and Hinf Control Problems," IEEE TAC August 1989
 ## @item [2]
 ##  Maciejowksi, J.M.: "Multivariable feedback design,"
 ## @end table
 ## 
 ## @end deftypefn
  
-function [retval, dgkf_struct] = is_dgkf (Asys, nu, ny, tol)
-
-  ## Written by A. S. Hodel
-  ## Updated by John Ingram July 1996 to accept structured systems
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Updated by John Ingram July 1996 to accept structured systems
 
-  ## Revised by Kai P Mueller April 1998 to solve the general H_infinity
-  ## problem using unitary transformations Q (on w and z)
-  ## and non-singular transformations R (on u and y) such
-  ## that the Dzu and Dyw matrices of the transformed plant
-  ## 
-  ##    ~
-  ##    P  (the variable Asys here)
-  ##
-  ## become
-  ##
-  ##    ~            -1         T
-  ##    D  = Q   D   R   = [ 0 I ]  or [ I ],
-  ##     12   12  12  12
-  ##
-  ##    ~            T
-  ##    D  = R   D   Q   = [ 0 I ] or [ I ].
-  ##     21   21  21  21
-  ##
-  ## This transformation together with the algorithm in [1] solves
-  ## the general problem (see [2] for example). 
+## Revised by Kai P. Mueller April 1998 to solve the general H_infinity
+## problem using unitary transformations Q (on w and z)
+## and non-singular transformations R (on u and y) such
+## that the Dzu and Dyw matrices of the transformed plant
+## 
+##    ~
+##    P  (the variable Asys here)
+##
+## become
+##
+##    ~            -1         T
+##    D  = Q   D   R   = [ 0 I ]  or [ I ],
+##     12   12  12  12
+##
+##    ~            T
+##    D  = R   D   Q   = [ 0 I ] or [ I ].
+##     21   21  21  21
+##
+## This transformation together with the algorithm in [1] solves
+## the general problem (see [2] for example). 
+
+function [retval, dgkf_struct] = is_dgkf (Asys, nu, ny, tol)
 
   if (nargin < 3) | (nargin > 4)
     usage("[retval,dgkf_struct] = is_dgkf(Asys,nu,ny{,tol})");
   elseif (! is_scalar(nu) | ! is_scalar(ny) )
     error("is_dgkf: arguments 2 and 3 must be scalars")
   elseif (! is_struct(Asys) )
     error("Argument 1 must be a system data structure");
   endif
diff --git a/scripts/control/is_digital.m b/scripts/control/is_digital.m
--- a/scripts/control/is_digital.m
+++ b/scripts/control/is_digital.m
@@ -27,19 +27,20 @@
 ##        : 2 silent operation
 ##  outputs:
 ##    DIGITAL:  0: system is purely continuous
 ##           :  1: system is purely discrete
 ##           : -1: system is mixed continuous and discrete
 ## Exits with an error of sys is a mixed (continuous and discrete) system
 ## @end deftypefn
 
-function DIGITAL = is_digital (sys, eflg)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: July 1996
 
-  ## a s hodel July 1996
+function DIGITAL = is_digital (sys, eflg)
 
   switch(nargin)
   case(1),  eflg = 0;
   case(2),  
     if( isempty(find(eflg == [0, 1, 2])) )
       error("Illegal value of eflg=%d (%e)",eflg,eflg);
     endif
   otherwise,
diff --git a/scripts/control/is_observable.m b/scripts/control/is_observable.m
--- a/scripts/control/is_observable.m
+++ b/scripts/control/is_observable.m
@@ -27,20 +27,21 @@
 ##  observable, 0 if not.
 ## 
 ## @strong{See} @code{is_controllable} for detailed description of arguments
 ## and default values.
 ## @end deftypefn
 
 ## See also: size, rows, columns, length, is_matrix, is_scalar, is_vector.
 
-function [retval, U] = is_observable (a, c, tol)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1993
+## Updated by John Ingram (ingraje@eng.auburn.edu) July 1996.
 
-  ## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
-  ## Updated by John Ingram (ingraje@eng.auburn.edu) July 1996.
+function [retval, U] = is_observable (a, c, tol)
 
   if( nargin < 1) 
     usage("[retval,U] = is_observable(a , c {, tol})");
   elseif(is_struct(a))
     ## system form
     if(nargin == 2)
       tol = c;
     elseif(nargin > 2)
diff --git a/scripts/control/is_sample.m b/scripts/control/is_sample.m
--- a/scripts/control/is_sample.m
+++ b/scripts/control/is_sample.m
@@ -17,15 +17,16 @@
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { @var{retval} =} is_sample (@var{Ts}) 
 ##  return true if @var{Ts} is a legal sampling time
 ##  (real,scalar, > 0)
 ## @end deftypefn
  
-## A. S. Hodel July 1995
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: July 1995
 
 function out = is_sample (Ts)
 
   out = (is_scalar(Ts) && (Ts == abs(Ts)) && (Ts != 0) );
 
 endfunction
diff --git a/scripts/control/is_siso.m b/scripts/control/is_siso.m
--- a/scripts/control/is_siso.m
+++ b/scripts/control/is_siso.m
@@ -17,17 +17,18 @@
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { @var{retval} =} is_siso (@var{sys}) 
 ## return nonzero if the system data structure 
 ## @var{sys} is single-input, single-output.
 ## @end deftypefn
  
-## a s hodel July 1996, 1998
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: July 1996, 1998
 
 function  SISO = is_siso (sys)
 
   if(nargin != 1)
     usage("SISO = is_siso(sys)");
   elseif( !is_struct(sys))
     error("input must be a system structure (see ss2sys, tf2sys, zp2sys)");
   endif
diff --git a/scripts/control/is_stabilizable.m b/scripts/control/is_stabilizable.m
--- a/scripts/control/is_stabilizable.m
+++ b/scripts/control/is_stabilizable.m
@@ -36,21 +36,22 @@
 ##   span ([b,a*b,...,a^   b]).
 ## @end example
 ## tol is a roundoff paramter, set to 200*eps if omitted.
 ## @end deftypefn
 
 ## See also: size, rows, columns, length, is_matrix, is_scalar, is_vector
 ##     is_observable, is_stabilizable, is_detectable
 
-function [retval, U] = is_stabilizable (a, b, tol)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1993
+## Updated by A. S. Hodel (scotte@eng.auburn.edu) Aubust, 1995 to use krylovb 
+## Updated by John Ingram (ingraje@eng.auburn.edu) July, 1996 to accept systems
 
-  ## Written by A. S. Hodel (scotte@eng.auburn.edu) August, 1993.
-  ## Updated by A. S. Hodel (scotte@eng.auburn.edu) Aubust, 1995 to use krylovb 
-  ## Updated by John Ingram (ingraje@eng.auburn.edu) July, 1996 to accept systems
+function [retval, U] = is_stabilizable (a, b, tol)
 
   if(nargin < 1)        usage("[retval,U] = is_stabilizable(a {, b ,tol})");
   elseif(is_struct(a))
     ## sustem passed.
     if(nargin == 2)
       tol = b;          % get tolerance
     elseif(nargin > 2)
       usage("[retval,U] = is_stabilizable(sys{,tol})");
diff --git a/scripts/control/is_stable.m b/scripts/control/is_stable.m
--- a/scripts/control/is_stable.m
+++ b/scripts/control/is_stable.m
@@ -36,21 +36,22 @@
 ## stable if eig(a) in open LHP (default)
 ## @end table
 ## @end table
 ## @end deftypefn
 
 ## See also: size, rows, columns, length, is_matrix, is_scalar, is_vector
 ##     is_observable, is_stabilizable, is_detectable, krylov, krylovb
 
-function retval = is_stable (a, tol, disc)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1993
+## Updated by John Ingram (ingraje@eng.auburn.edu) July, 1996 for systems
+## Updated to simpler form by a.s.hodel 1998
 
-  ## Written by A. S. Hodel (scotte@eng.auburn.edu) August, 1993.
-  ## Updated by John Ingram (ingraje@eng.auburn.edu) July, 1996 for systems
-  ## Updated to simpler form by a.s.hodel 1998
+function retval = is_stable (a, tol, disc)
 
   if( (nargin < 1) | (nargin > 3) )   usage("is_stable(a {,tol,disc})");
   elseif(is_struct(a))
     ## system was passed
     if(nargin < 3)			disc = is_digital(a);
     elseif(disc != is_digital(a))
       warning("is_stable: disc =%d does not match system",disc)
     endif
diff --git a/scripts/control/jet707.m b/scripts/control/jet707.m
--- a/scripts/control/jet707.m
+++ b/scripts/control/jet707.m
@@ -18,26 +18,24 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { @var{outsys}  =} jet707 ( ) 
 ##  Creates linearized state space model of a Boeing 707-321 aircraft
 ##  at v=80m/s. (M = 0.26, Ga0 = -3 deg, alpha0 = 4 deg, kappa = 50 deg)
 ##  System inputs:   (1) thrust   and (2) elevator angle
 ##  System outputs:  (1) airspeed and (2) pitch angle
 ##  Ref: R. Brockhaus: Flugregelung (Flight Control), Springer, 1994
-## 
-##  see also: ord2
-## 
-## Contributed by Kai Mueller
 ## @end deftypefn
- 
-function outsys = jet707 ()
 
-  ## Written by Kai P. Mueller September 28, 1997
-  ## Updates
+## see also: ord2
+ 
+## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
+## Created: September 28, 1997
+
+function outsys = jet707 ()
 
   if (nargin != 0)
     usage("outsys = jet707()")
   endif
   if (nargin > 1)
     usage("outsys = jet707()")
   endif
 
diff --git a/scripts/control/lqe.m b/scripts/control/lqe.m
--- a/scripts/control/lqe.m
+++ b/scripts/control/lqe.m
@@ -81,25 +81,27 @@
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ## (@var{a} - @var{k}@var{c}).
 ## @end ifinfo
 ## @end table
 ## @end deftypefn
 
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1993
+
 function [k, p, e] = lqe (a, g, c, sigw, sigv, zz)
-## Written by A. S. Hodel (scotte@eng.auburn.edu) August, 1993.
 
   if ( (nargin != 5) && (nargin != 6))
     error ("lqe: invalid number of arguments");
   endif
 
-## The problem is dual to the regulator design, so transform to lqr
-## call.
+  ## The problem is dual to the regulator design, so transform to lqr
+  ## call.
 
   if (nargin == 5)
     [k, p, e] = lqr (a', c', g*sigw*g', sigv);
   else
     [k, p, e] = lqr (a', c', g*sigw*g', sigv, g*zz);
   endif
 
   k = k';
diff --git a/scripts/control/lqg.m b/scripts/control/lqg.m
--- a/scripts/control/lqg.m
+++ b/scripts/control/lqg.m
@@ -56,20 +56,21 @@
 ## estimator poles
 ## @item    Es
 ## controller poles
 ## @end table
 ## @end deftypefn
 
 ## See also:  h2syn, lqe, lqr
 
-function [K, Q1, P1, Ee, Er] = lqg (sys, Sigw, Sigv, Q, R, input_list)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1995
+## revised for new system format August 1996
 
-  ## Written by A. S. Hodel August 1995; revised for new system format
-  ## August 1996
+function [K, Q1, P1, Ee, Er] = lqg (sys, Sigw, Sigv, Q, R, input_list)
 
   if ( (nargin < 5) | (nargin > 6))
     usage("[K,Q1,P1,Ee,Er] = lqg(sys,Sigw, Sigv,Q,R{,input_list})");
 
   elseif(!is_struct(sys) )
     error("sys must be in system data structure");
   endif
 
diff --git a/scripts/control/lqr.m b/scripts/control/lqr.m
--- a/scripts/control/lqr.m
+++ b/scripts/control/lqr.m
@@ -106,19 +106,20 @@
 ## @end ifinfo
 ## @end table
 ##
 ## @strong{Reference} 
 ## Anderson and Moore, OPTIMAL CONTROL: LINEAR QUADRATIC METHODS,
 ## Prentice-Hall, 1990, pp. 56-58
 ## @end deftypefn
 
-function [k, p, e] = lqr (a, b, q, r, s)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1993.
 
-  ## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
+function [k, p, e] = lqr (a, b, q, r, s)
 
   ## disp("lqr: entry");
 
   if ((nargin != 4) && (nargin != 5))
     error ("lqr: invalid number of arguments");
   endif
 
   ## Check a.
diff --git a/scripts/control/lsim.m b/scripts/control/lsim.m
--- a/scripts/control/lsim.m
+++ b/scripts/control/lsim.m
@@ -29,20 +29,22 @@
 ## on the system, the x0 vector should be added to the argument list.
 ## 
 ## When the lsim function is invoked with output parameters:
 ## [y,x] = lsim(sys,u,t,[x0])
 ## a plot is not displayed, however, the data is returned in y = system output
 ## and x = system states.
 ## @end deftypefn
  
-function [y, x] = lsim (sys, u, t, x0)
+## Author: David Clem
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: July 1995
+## modified by John Ingram for system format August 1996
 
-  ## Written by David Clem, A. S. Hodel July 1995
-  ## modified by John Ingram for system format August 1996
+function [y, x] = lsim (sys, u, t, x0)
 
   if((nargin < 3)||(nargin > 4))
     usage("[y,x] = lsim(sys,u,t[,x0])");
   endif
 
   if(!is_struct(sys))
     error("sys must be in system data structure");
   endif
diff --git a/scripts/control/ltifr.m b/scripts/control/ltifr.m
--- a/scripts/control/ltifr.m
+++ b/scripts/control/ltifr.m
@@ -33,21 +33,24 @@
 ## @var{out}
 ## @example
 ##                            -1
 ##             G(s) = (jw I-A) B
 ## @end example
 ## for complex frequencies @math{s = jw}.
 ## @end deftypefn
 
+## Author: R. Bruce Tenison <btenison@eng.auburn.edu>
+## Author: David Clem
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: July 1995
+## updated by John Ingram August 1996 for system format
+
 function out = ltifr (a, b, w)
 
-  ## R. B. Tenison, D. Clem, A. S. Hodel, July 1995
-  ## updated by John Ingram August 1996 for system format
-  
   if ((nargin < 2) || (nargin > 3))
     error("incorrect number of input arguments");
   endif
 
   if (nargin == 2)
     sys = a;
     w = b;
     if(!is_struct(sys))
diff --git a/scripts/control/lyap.m b/scripts/control/lyap.m
--- a/scripts/control/lyap.m
+++ b/scripts/control/lyap.m
@@ -71,17 +71,17 @@
 ##     @end example
 ##   @end ifinfo
 ##   @noindent
 ##   whichever is appropriate.
 ##
 ## Solves by using the Bartels-Stewart algorithm (1972).
 ## @end deftypefn
 
-## Author: A. S. Hodel <scotte@eng.auburn.edu>
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1993
 ## Adapted-By: jwe
 
 function x = lyap (a, b, c)
 
   if (nargin != 3 && nargin != 2)
     usage ("lyap (a, b {,c})");
   endif
diff --git a/scripts/control/minfo.m b/scripts/control/minfo.m
--- a/scripts/control/minfo.m
+++ b/scripts/control/minfo.m
@@ -24,21 +24,22 @@
 ##    Returns:
 ##      systype can be one of:
 ##            varying, system, constant, and empty
 ##      nout is the number of outputs of the system
 ##      nin is the number of inputs of the system
 ##      ncstates is the number of continuous states of the system
 ##	 ndstates is the number of discrete states of the system
 
-function [systype, nout, nin, ncstates, ndstates] = minfo (inmat)
+## Author: R. Bruce Tenison <btenison@eng.auburn.edu>
+## Created: July 29, 1994
+## Modified by David Clem November 13, 1994
+## Modified by A. S. Hodel July 1995
 
-  ## Written by R. Bruce Tenison July 29, 1994
-  ## Modified by David Clem November 13, 1994
-  ## Modified by A. S. Hodel July 1995
+function [systype, nout, nin, ncstates, ndstates] = minfo (inmat)
 
   warning("minfo: obsolete.  Use sys2ss, sys2tf, or sys2zp.");
     
   if (nargin ~= 1 )
     disp('MINFO: Wrong number of arguments')
     systype = nout = nin = ncstates = ndstates = [];
   endif
   
diff --git a/scripts/control/moddemo.m b/scripts/control/moddemo.m
--- a/scripts/control/moddemo.m
+++ b/scripts/control/moddemo.m
@@ -20,19 +20,21 @@
 ## @deftypefn {Function File } { outputs =} moddemo ( inputs ) 
 ## @format
 ##  Octave Controls toolbox demo: Model Manipulations demo
 ##  Written by David Clem August 15, 1994
 ## 
 ## @end format
 ## @end deftypefn
  
+## Author: David Clem
+## Created: August 15, 1994
+## a s hodel: updated to reflect updated output order in ss2zp
+
 function moddemo ()
-## Written by David Clem August 15, 1994
-## a s hodel: updated to reflect updated output order in ss2zp
 
   while (1)
     clc
     disp('Octave Model Manipulations Demo')
     disp('=======================================')
     disp('  1)  Perform continuous to discrete time conversion (c2d)')
     disp('  2)  Convert from state space to zero / pole form (ss2zp)')
     disp('      Convert from zero / pole to state space form (zp2ss)')
diff --git a/scripts/control/nyquist.m b/scripts/control/nyquist.m
--- a/scripts/control/nyquist.m
+++ b/scripts/control/nyquist.m
@@ -79,23 +79,24 @@
 ##  Descriptive labels are automatically placed.
 ## 
 ##  Note: if the requested plot is for an MIMO system, a warning message is
 ##  presented; the returned information is of the magnitude 
 ##  ||G(jw)|| or ||G(exp(jwT))|| only; phase information is not computed.
 ## 
 ## @end deftypefn
  
+## Author: R. Bruce Tenison <btenison@eng.auburn.edu>
+## Created: July 13, 1994
+## A. S. Hodel July 1995 (adaptive frequency spacing, 
+##     remove acura parameter, etc.)
+## Revised by John Ingram July 1996 for system format
+
 function [realp, imagp, w] = nyquist (sys, w, outputs, inputs, atol)
    
-  ## By R. Bruce Tenison, July 13, 1994
-  ## A. S. Hodel July 1995 (adaptive frequency spacing, 
-  ##     remove acura parameter, etc.)
-  ## Revised by John Ingram July 1996 for system format
-
   ## Both bode and nyquist share the same introduction, so the common
   ## parts are in a file called bodquist.m.  It contains the part that
   ## finds the number of arguments, determines whether or not the system
   ## is SISO, andd computes the frequency response.  Only the way the
   ## response is plotted is different between the two functions.
 
   ## check number of input arguments given
   if (nargin < 1 | nargin > 5)
diff --git a/scripts/control/obsv.m b/scripts/control/obsv.m
--- a/scripts/control/obsv.m
+++ b/scripts/control/obsv.m
@@ -31,20 +31,20 @@
 ## of a system data structure or the pair (A, C).
 ## 
 ## Note: @code{obsv()} forms the observability matrix.
 ## 
 ##        The numerical properties of is_observable()
 ##        are much better for observability tests.
 ## @end deftypefn
 
-function Qb = obsv (sys, c)
+## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
+## Created: November 4, 1997
 
-  ## Written by Kai P. Mueller November 4, 1997
-  ## modified by
+function Qb = obsv (sys, c)
 
   if (nargin == 2)
     a = sys;
   elseif (nargin == 1 && is_struct(sys))
     sysupdate(sys,"ss");
     [a,b,c] = sys2ss(sys);
   else
     usage("obsv(sys [, c])")
diff --git a/scripts/control/ord2.m b/scripts/control/ord2.m
--- a/scripts/control/ord2.m
+++ b/scripts/control/ord2.m
@@ -37,19 +37,21 @@
 ##     | \   w       0 /  \ 0 /                 |
 ##     \                                        /
 ## @end example
 ## @strong{See also} @code{jet707} (MIMO example, Boeing 707-321 aircraft model)
 ## @end deftypefn
 
 ## See also: jet707 (MIMO example, Boeing 707-321 aircraft model)
 
+## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
+## Created: September 28, 1997
+
 function outsys = ord2 (nfreq, damp, gain)
 
-  ## Written by Kai P. Mueller September 28, 1997
   ## Updates
 
   if(nargin != 2 & nargin != 3)
     usage("outsys = ord2(nfreq, damp[, gain])")
   endif
   if (nargout > 1)
     usage("outsys = ord2(nfreq, damp[, gain])")
   endif
diff --git a/scripts/control/outlist.m b/scripts/control/outlist.m
--- a/scripts/control/outlist.m
+++ b/scripts/control/outlist.m
@@ -37,19 +37,20 @@
 ## default: @code{1:rows(lmat)}
 ## @end table
 ## 
 ## @strong{Outputs}
 ##    prints the list to the screen, numbering each string in order.
 ## 
 ## @end deftypefn
 
-function str_val = outlist (name_list, tabchar, yd, ilist)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: December 1995
 
-  ## A. S. Hodel Dec. 1995, 1998
+function str_val = outlist (name_list, tabchar, yd, ilist)
 
   ## save for restore later
   save_empty = empty_list_elements_ok;
   empty_list_elements_ok = 1;
 
   if( nargin < 1 | nargin > 4 )
     usage("str_val = outlist(x[,tabchar,yd,ilist])");
   endif
diff --git a/scripts/control/packsys.m b/scripts/control/packsys.m
--- a/scripts/control/packsys.m
+++ b/scripts/control/packsys.m
@@ -22,21 +22,22 @@
 ##   dflg: 0 for continuous time system, 1 for discrete-time system.
 ## 
 ## defaults:
 ##      D: 0 matrix of appropriate dimension.
 ##   dflg: 0 (continuous time)
 ## 
 ## Note: discrete-state sampling time is not included!
 
-function Asys = packsys (a, b, c, d, dflg)
+## Author: R. Bruce Tenison <btenison@eng.auburn.edu>
+## Created: July 29, 1994
+## Modified by David Clem November 13, 1994
+## Modified by A. S. Hodel April 1995
 
-  ## Written by R. Bruce Tenison  July 29, 1994
-  ## Modified by David Clem November 13, 1994
-  ## Modified by A. S. Hodel April 1995
+function Asys = packsys (a, b, c, d, dflg)
 
   warning("packsys is obsolete!  Use ss2sys instead.");
   
   if (nargin < 3 || nargin > 5)
     disp("packsys: Invalid number of arguments")
   endif
 
   ## check dflg
diff --git a/scripts/control/parallel.m b/scripts/control/parallel.m
--- a/scripts/control/parallel.m
+++ b/scripts/control/parallel.m
@@ -24,21 +24,22 @@
 ##     u  ----->|----> | Asys |--->|----> y1
 ##         |    |      --------    |
 ##         |    |      ________    |
 ##         |--->|----> | Bsys |--->|----> y2
 ##              |      --------    |
 ##              --------------------
 ##                   Ksys
 
-function sysp = parallel (Asys, Bsys)
+## Author: David Clem
+## Created: August 15, 1994
+## completely rewritten Oct 1996 a s hodel
+## SYS_INTERNAL accesses members of system structure
 
-  ## Written by David Clem August 15, 1994
-  ## completely rewritten Oct 1996 a s hodel
-  ## SYS_INTERNAL accesses members of system structure
+function sysp = parallel (Asys, Bsys)
 
   if(nargin != 2)
     usage("sysp = parallel(Asys,Bsys)");
   endif
   if(! is_struct(Asys) )
     error("1st input argument is not a system data structure")
   elseif (! is_struct(Bsys) )
     error("2nd input argument is not a system data structure")
diff --git a/scripts/control/place.m b/scripts/control/place.m
--- a/scripts/control/place.m
+++ b/scripts/control/place.m
@@ -19,35 +19,35 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { @var{K} =} place (@var{sys}, @var{P})
 ## Computes the matrix  K such that if the state
 ## is feedback with gain K, then the eigenvalues  of the closed loop
 ## system (i.e. A-BK) are those specified in the vector P.
 ## 
 ## Version: Beta (May-1997): If you have any comments, please let me know.
 ## 			    (see the file place.m for my address)
-## 
-## Written by: Jose Daniel Munoz Frias.
 ## @end deftypefn
- 
-function K = place (sys, P) 
 
-  ## Universidad Pontificia Comillas
-  ## ICAIdea
-  ## Alberto Aguilera, 23
-  ## 28015 Madrid, Spain
-  ##
-  ## E-Mail: daniel@dea.icai.upco.es
-  ##
-  ## Phone: 34-1-5422800   Fax: 34-1-5596569
-  ##
-  ## Algorithm taken from "The Control Handbook", IEEE press pp. 209-212
-  ##
-  ## code adaped by A.S.Hodel (a.s.hodel@eng.auburn.edu) for use in controls
-  ## toolbox
+## Author: Jose Daniel Munoz Frias
+ 
+## Universidad Pontificia Comillas
+## ICAIdea
+## Alberto Aguilera, 23
+## 28015 Madrid, Spain
+##
+## E-Mail: daniel@dea.icai.upco.es
+##
+## Phone: 34-1-5422800   Fax: 34-1-5596569
+##
+## Algorithm taken from "The Control Handbook", IEEE press pp. 209-212
+##
+## code adaped by A.S.Hodel (a.s.hodel@eng.auburn.edu) for use in controls
+## toolbox
+
+function K = place (sys, P) 
 
   sav_val = empty_list_elements_ok;
   empty_list_elements_ok = 1;
 
   ## check arguments
 
   if(!is_struct(sys))
     error("sys must be in system data structure format (see ss2sys)");
diff --git a/scripts/control/polyout.m b/scripts/control/polyout.m
--- a/scripts/control/polyout.m
+++ b/scripts/control/polyout.m
@@ -24,21 +24,22 @@
 ## @end example
 ##  to string @var{y} or to the screen (if @var{y} is omitted)
 ##  @var{x} defaults to the string @code{"s"}
 ## @end deftypefn
 
 ##  See also: polyval, polyvalm, poly, roots, conv, deconv, residue, 
 ##	filter, polyderiv, polyinteg
 
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: May 1995
+## Nov 1998: Correctly handles complex coefficients
+  
 function y = polyout (c, x)
 
-## Written by A. Scottedward Hodel (scotte@eng.auburn.edu) May 1995)
-## Nov 1998: Correctly handles complex coefficients
-  
   if (nargin < 1 ) || (nargin > 2) || (nargout < 0 ) || (nargout > 1)
     usage("[y = ] polyout(c,[x])");
   endif
 
   if (!is_vector(c))
     error("polyout: first argument must be a vector");
   endif
   
diff --git a/scripts/control/prompt.m b/scripts/control/prompt.m
--- a/scripts/control/prompt.m
+++ b/scripts/control/prompt.m
@@ -17,23 +17,23 @@
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { outputs =} prompt ( inputs ) 
 ## @format
 ##  function prompt([str])
 ##  Prompt user to continue
 ##  str: input string. Default value: "\n ---- Press a key to continue ---"
-##  Written by David Clem August 15, 1994
-##  Modified A. S. Hodel June 1995
-## 
-## 
 ## @end format
 ## @end deftypefn
  
+## Author: David Clem
+## Created: August 15, 1994
+## Modified A. S. Hodel June 1995
+
 function prompt (str)
 
   if(nargin > 1)
     usage("prompt([str])");
   elseif(nargin == 0)
     str = "\n ---- Press a key to continue ---";
   elseif ( !isstr(str) )
     error("prompt: input must be a string");
diff --git a/scripts/control/qzval.m b/scripts/control/qzval.m
--- a/scripts/control/qzval.m
+++ b/scripts/control/qzval.m
@@ -30,16 +30,17 @@
 ## @end tex
 ## @end iftex
 ## 
 ## @var{A} and @var{B} must be real matrices.
 ##  
 ## @strong{Note} @code{qzval} is obsolete; use @code{qz} instead.
 ## @end deftypefn
  
-## A. S. Hodel July 1998
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: July 1998
 
 function lam = qzval (A, B)
 
   warning("qzval is obsolete; calling qz instead")
   lam = qz(A,B);
+
 endfunction
-
diff --git a/scripts/control/rldemo.m b/scripts/control/rldemo.m
--- a/scripts/control/rldemo.m
+++ b/scripts/control/rldemo.m
@@ -16,17 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free 
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
 
 ## -*- texinfo -*-
 ##@deftypefn {Function File } { outputs =} rldemo ( inputs ) 
 ##Octave Controls toolbox demo: Root Locus demo
 ##@end deftypefn
  
-## Written by David Clem August 15, 1994
+## Author: David Clem
+## Created: August 15, 1994
 ## Updated by John Ingram December 1996
 
 function rldemo ()
 
   while (1)
     clc
     k = menu("Octave Root Locus Demo", ...
     	"Display continuous system's open loop poles and zeros (pzmap)", ...
diff --git a/scripts/control/rlocus.m b/scripts/control/rlocus.m
--- a/scripts/control/rlocus.m
+++ b/scripts/control/rlocus.m
@@ -35,26 +35,28 @@
 ##    rldata: Data points plotted column 1: real values, column 2: imaginary
 ##            values)
 ##    k: gains for real axis break points.
 ## 
 ## 
 ## @end format
 ## @end deftypefn
 
-function [rldata, k_break, rlpol, gvec, real_ax_pts] = rlocus (sys, increment, min_k, max_k)
+## Author: David Clem
+## Author: R. Bruce Tenison <btenison@eng.auburn.edu>
+## Updated by Kristi McGowan July 1996 for intelligent gain selection
+## Updated by John Ingram July 1996 for systems
 
-  ## Convert the input to a transfer function if necessary
-  ## Written by Clem and Tenison
-  ## Updated by Kristi McGowan July 1996 for intelligent gain selection
-  ## Updated by John Ingram July 1996 for systems
+function [rldata, k_break, rlpol, gvec, real_ax_pts] = rlocus (sys, increment, min_k, max_k)
   
   if (nargin < 1) | (nargin > 4)
     usage("rlocus(sys[,inc,mink,maxk])");
   endif
+
+  ## Convert the input to a transfer function if necessary
   
   [num,den] = sys2tf(sys)		# extract numerator/denom polyomials
   lnum = length(num);      lden = length(den);
   if(lden < 2)
     error(sprintf("length of derivative=%d, doesn't make sense",lden));
   elseif(lnum == 1)
     num = [0, num];     # so that derivative is shortened by one
   endif
diff --git a/scripts/control/rotg.m b/scripts/control/rotg.m
--- a/scripts/control/rotg.m
+++ b/scripts/control/rotg.m
@@ -19,9 +19,10 @@
 ## function [c,s] = rotg(a,b)
 ## givens rotation calculation
 ##
 ## NOTE: Use [c,s] = givens(a,b) instead.
 
 function [c, s] = rotg (a, b)
 
   [c,s] = givens(a,b);
+
 endfunction
diff --git a/scripts/control/series.m b/scripts/control/series.m
--- a/scripts/control/series.m
+++ b/scripts/control/series.m
@@ -30,68 +30,69 @@
 ## Forms the series representation of the two state space system arguments.
 ## The series connected system will have the inputs of system 1 and the 
 ## outputs of system 2.
 ##
 ## Type of input: system data structure
 ## Command:       syst=series(syst1,syst2)
 ## Forms the series representation of the two mu system arguments.
 
-## Written by David Clem August 15, 1994
+## Author: David Clem
+## Created: August 15, 1994
 
 function [a, b, c, d] = series (a1, b1, c1, d1, a2, b2, c2, d2)
 
-## If two arguments input, take care of mu system case
+  ## If two arguments input, take care of mu system case
 
   warning("series is superseded by sysmult; use sysmult instead.")
 
   muflag = 0;
   if(nargin == 2)
     temp=b1;
     [a1,b1,c1,d1]=sys2ss(a1);
     [a2,b2,c2,d2]=sys2ss(temp);
     muflag = 1;
   endif
 
-## If four arguments input, put two transfer functions in series
+  ## If four arguments input, put two transfer functions in series
 
   if(nargin == 4)
     a = conv(a1,c1);	% was conv1
     b = conv(b1,d1);	% was conv1
     c = 0;
     d = 0;
 
-## Find series combination of 2 state space systems
+    ## Find series combination of 2 state space systems
 
   elseif((nargin == 8)||(muflag == 1))
 
-## check matrix dimensions
+    ## check matrix dimensions
   
     [n1,m1,p1] = abcddim(a1,b1,c1,d1);
     [n2,m2,p2] = abcddim(a2,b2,c2,d2);
 
     if((n1 == -1) || (n2 == -1))
       error("Incorrect matrix dimensions");
     endif
 
-## check to make sure the number of outputs of system1 equals the number
-## of inputs of system2
+    ## check to make sure the number of outputs of system1 equals the number
+    ## of inputs of system2
 
    if(p1 ~= m2)
      error("System 1 output / System 2 input connection sizes do not match");
    endif
 
-## put the two state space systems in series
+   ## put the two state space systems in series
 
     a = [a1, zeros(rows(a1),columns(a2));b2*c1, a2];
     b = [b1;b2*d1];
     c = [d2*c1, c2];
     d = [d2*d1];
 
-## take care of mu output
+    ## take care of mu output
 
     if(muflag == 1)
       a=ss2sys(a,b,c,d);
       b=c=d=0;
     endif 
   endif
 
 endfunction
diff --git a/scripts/control/sortcom.m b/scripts/control/sortcom.m
--- a/scripts/control/sortcom.m
+++ b/scripts/control/sortcom.m
@@ -30,19 +30,20 @@
 ##      a - jb followed by a + jb.
 ##  yy: sorted values
 ##  idx: permutation vector: yy = xx(idx)
 ## 
 ## 
 ## @end format
 ## @end deftypefn
 
-function [yy, idx] = sortcom (xx, opt)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: June 1995
 
-  ## Written by A. S. Hodel June 1995
+function [yy, idx] = sortcom (xx, opt)
 
   if( nargin < 1 | nargin > 2 )
      usage("yy = sortcom(xx[,opt]");
   elseif( !(is_vector(xx) | isempty(xx) ))
     error("sortcom: first argument must be a vector");
   endif
 
   if(nargin == 1)         opt = "re";
diff --git a/scripts/control/ss2sys.m b/scripts/control/ss2sys.m
--- a/scripts/control/ss2sys.m
+++ b/scripts/control/ss2sys.m
@@ -182,19 +182,20 @@
 ##   0  0
 ## @end example
 ## Notice that the @var{D} matrix is constructed  by default to the 
 ## correct dimensions.  Default input and output signals names were assigned
 ## since none were given.
 ## 
 ## @end deftypefn
 
-function retsys = ss2sys (a, b, c, d, tsam, n, nz, stname, inname, outname, outlist)
+## Author: John Ingram <ingraje@eng.auburn.edu>
+## Created: July 20, 1996
 
-  ## Written by John Ingram (ingraje@eng.auburn.edu)  July 20, 1996
+function retsys = ss2sys (a, b, c, d, tsam, n, nz, stname, inname, outname, outlist)
 
   ## Test for correct number of inputs
   if ((nargin < 3) | (nargin > 11))
     usage("retsys = ss2sys  (a,b,c{,d,tsam,n,nz,stname,inname,outname,outlist})");
   endif
 
   ## verify A, B, C, D arguments
   ## If D is not specified, set it to a zero matrix of appriate dimension.
diff --git a/scripts/control/ss2tf.m b/scripts/control/ss2tf.m
--- a/scripts/control/ss2tf.m
+++ b/scripts/control/ss2tf.m
@@ -33,20 +33,21 @@
 ##                 den(s)
 ## 
 ##  used internally in system data structure format manipulations
 ## 
 ## 
 ## @end format
 ## @end deftypefn
  
-function [num, den] = ss2tf (a, b, c, d)
+## Author: R. Bruce Tenison <btenison@eng.auburn.edu>
+## Created: June 24, 1994
+## a s hodel: modified to allow for pure gain blocks Aug 1996
 
-  ## Written by R. Bruce Tenison (June 24, 1994) btenison@eng.auburn.edu
-  ## a s hodel: modified to allow for pure gain blocks Aug 1996
+function [num, den] = ss2tf (a, b, c, d)
 
   ## Check args
   [n,m,p] = abcddim(a,b,c,d);
   if (n == -1)
     num = [];
     den = [];
     error("ss2tf: Non compatible matrix arguments");
   elseif ( (m != 1) | (p != 1))
diff --git a/scripts/control/ss2zp.m b/scripts/control/ss2zp.m
--- a/scripts/control/ss2zp.m
+++ b/scripts/control/ss2zp.m
@@ -25,21 +25,22 @@
 ##  system (a,b,c,d).  K is a gain associated with the zeros.
 ## 
 ##  used internally in system data structure format manipulations
 ## 
 ## 
 ## @end format
 ## @end deftypefn
 
-function [zer, pol, k] = ss2zp (a, b, c, d)
+## Author: David Clem
+## Created: August 15, 1994
+## Hodel: changed order of output arguments to zer, pol, k. July 1996
+## a s hodel: added argument checking, allow for pure gain blocks aug 1996
 
-  ## Written by David Clem August 15, 1994
-  ## Hodel: changed order of output arguments to zer, pol, k. July 1996
-  ## a s hodel: added argument checking, allow for pure gain blocks aug 1996
+function [zer, pol, k] = ss2zp (a, b, c, d)
 
   if(nargin != 4)
     usage("[zer,pol,k] = ss2zp(a,b,c,d)");
   endif
 
   [n,m,p] = abcddim(a,b,c,d);
   if (n == -1)
     error("ss2tf: Non compatible matrix arguments");
diff --git a/scripts/control/starp.m b/scripts/control/starp.m
--- a/scripts/control/starp.m
+++ b/scripts/control/starp.m
@@ -44,19 +44,20 @@
 ##  is a lower fractional transformation. If ny and nu "consume" all
 ##  inputs and outputs of P then the result is an upper fractional
 ##  transformation.
 ## 
 ##  ny and/or nu may be negative (= negative feedback)
 ## @end format
 ## @end deftypefn
 
-function sys = starp (P, K, ny, nu);
+## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
+## Created: May 1998
 
-  ## Written by Kai Mueller May 1998
+function sys = starp (P, K, ny, nu);
 
   if((nargin != 2) && (nargin != 4))
     usage("sys = starp(P, K, ny, nu)");
   endif
   if (!is_struct(P))
     error("---> P must be in system data structure");
   endif
   if (!is_struct(K))
diff --git a/scripts/control/step.m b/scripts/control/step.m
--- a/scripts/control/step.m
+++ b/scripts/control/step.m
@@ -41,20 +41,21 @@
 ## @strong{Outputs}
 ## @var{y}, @var{t}: impulse response
 ## 
 ## When invoked with the output paramter y the plot is not displayed.  
 ## @end deftypefn
  
 ## See also:  impulse, stepimp
 
-function [y, t] = step (sys, inp, tstop, n)
+## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
+## Created: September 30, 1997
+## based on lsim.m of Scottedward Hodel
 
-## Written by Kai P. Mueller September 30, 1997
-## based on lsim.m of Scottedward Hodel
+function [y, t] = step (sys, inp, tstop, n)
 
   if((nargin < 1) || (nargin > 4))
     usage("[y, u] = step(sys[, inp, tstop, n])");
   endif
 
   if(nargout > 2)
     usage("[y, u] = step(sys[, inp, tstop, n])");
   endif
diff --git a/scripts/control/stepimp.m b/scripts/control/stepimp.m
--- a/scripts/control/stepimp.m
+++ b/scripts/control/stepimp.m
@@ -27,20 +27,21 @@
 ## Limited argument checking; "do not attempt to do this at home".
 ## Used internally in @code{impulse}, @code{step}. Use @code{step}
 ## or @code{impulse} instead.
 ## 
 ## @end deftypefn
 
 ## See also: step, impulse
 
-function [y, t] = stepimp (sitype, sys, inp, tstop, n)
+## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
+## Created: October 2, 1997
+## based on lsim.m of Scottedward Hodel
 
-  ## Written by Kai P. Mueller October 2, 1997
-  ## based on lsim.m of Scottedward Hodel
+function [y, t] = stepimp (sitype, sys, inp, tstop, n)
 
   if (sitype == 1)         IMPULSE = 0;
   elseif (sitype == 2)     IMPULSE = 1;
   else		   	   error("stepimp: illegal sitype argument.")
   endif
   sys = sysupdate(sys,"ss");
 
   USE_DEF = 0;   # default tstop and n if we have to give up
diff --git a/scripts/control/swap.m b/scripts/control/swap.m
--- a/scripts/control/swap.m
+++ b/scripts/control/swap.m
@@ -19,17 +19,19 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { outputs =} swap ( inputs ) 
 ## @format
 ##  [a1,b1] = swap(a,b)
 ##  interchange a and b
 ## @end format
 ## @end deftypefn
 
-function [a1, b1] = swap (a, b)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: July 24, 1992
+## Conversion to Octave R. Bruce Tenison July 4, 1994
 
-  ## A. S. Hodel July 24 1992
-  ## Conversion to Octave R. Bruce Tenison July 4, 1994
+function [a1, b1] = swap (a, b)
 
   a1 = b;
   b1 = a;
+
 endfunction
 
diff --git a/scripts/control/swapcols.m b/scripts/control/swapcols.m
--- a/scripts/control/swapcols.m
+++ b/scripts/control/swapcols.m
@@ -19,18 +19,20 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { outputs =} swapcols ( inputs ) 
 ## @format
 ##  function B = swapcols(A)
 ##  permute columns of A into reverse order
 ## @end format
 ## @end deftypefn
 
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: July 23, 1992
+## Conversion to Octave R. Bruce Tenison July 4, 1994
+
 function B = swapcols (A)
   
-  ## A. S. Hodel July 23, 1992
-  ## Conversion to Octave R. Bruce Tenison July 4, 1994
-
   m = length(A(1,:));
   idx = m:-1:1;
   B = A(:,idx);
+
 endfunction
 
diff --git a/scripts/control/swaprows.m b/scripts/control/swaprows.m
--- a/scripts/control/swaprows.m
+++ b/scripts/control/swaprows.m
@@ -19,18 +19,20 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { outputs =} swaprows ( inputs ) 
 ## @format
 ##  function B = swaprows(A)
 ##  permute rows of A into reverse order
 ## @end format
 ## @end deftypefn
 
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: July 23, 1992
+## Conversion to Octave R. Bruce Tenison July 4, 1994
+  
 function B = swaprows (A)
 
-  ## A. S. Hodel July 23, 1992
-  ## Conversion to Octave R. Bruce Tenison July 4, 1994
-  
   m = rows(A);
   idx = m:-1:1;
   B = A(idx,:);
+
 endfunction
 
diff --git a/scripts/control/sys2fir.m b/scripts/control/sys2fir.m
--- a/scripts/control/sys2fir.m
+++ b/scripts/control/sys2fir.m
@@ -21,19 +21,20 @@
 ## 
 ## Extract FIR data from system data structure; see @ref{fir2sys} for
 ## parameter descriptions.
 ## 
 ## @end deftypefn
 
 ## See also: fir2sys
  
-function [c, tsam, inname, outname] = sys2fir (sys)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: July 1996
 
-  ## a s hodel July 1996
+function [c, tsam, inname, outname] = sys2fir (sys)
 
   ## let sys2tf do most of the work
 
   [num,den,tsam,inname,outname] = sys2tf(sys);
 
   alph = den(1);			# scale to get monic denominator
   den = den/alph;
   num = num/alph;
diff --git a/scripts/control/sys2ss.m b/scripts/control/sys2ss.m
--- a/scripts/control/sys2ss.m
+++ b/scripts/control/sys2ss.m
@@ -57,20 +57,21 @@
 ## b =
 ##   0
 ##   1
 ## c = 0.66667  0.33333
 ## d = 0
 ## @end example
 ## @end deftypefn
  
-function [a, b, c, d, tsam, n, nz, stname, inname, outname, yd] = sys2ss (sys)
+## Author: David Clem
+## Created: August 19, 1994
+## Updates by John Ingram July 14, 1996
 
-  ## Written by David Clem August 19, 1994
-  ## Updates by John Ingram July 14, 1996
+function [a, b, c, d, tsam, n, nz, stname, inname, outname, yd] = sys2ss (sys)
 
   if(nargin != 1)
     usage("[a,b,c,d,tsam,n,nz,stname,inname,outname,yd] = sys2ss(sys)")
   endif
 
   if (nargout > 11)
     warning(["sys2ss: ",num2str(nargout)," out arguments exceeds max=11"])
     usage("[a,b,c,d,tsam,n,nz,stname,inname,outname,yd] = sys2ss(sys)")
diff --git a/scripts/control/sys2tf.m b/scripts/control/sys2tf.m
--- a/scripts/control/sys2tf.m
+++ b/scripts/control/sys2tf.m
@@ -26,21 +26,23 @@
 ## @example
 ## octave:1> sys=ss2sys([1 -2; -1.1,-2.1],[0;1],[1 1]);
 ## octave:2> [num,den] = sys2tf(sys)
 ## num = 1.0000  -3.0000
 ## den = 1.0000   1.1000  -4.3000
 ## @end example
 ## @end deftypefn
 
-function [num, den, tsam, inname, outname] = sys2tf (Asys)
-## Written by R. Bruce Tenison (June 24, 1994) btenison@eng.auburn.edu
+## Author: R. Bruce Tenison <btenison@eng.auburn.edu>
+## Created: June 24, 1994
 ## modified to make sys2tf by A. S. Hodel Aug 1995
 ## modified again for updated system format by John Ingram July 1996
 
+function [num, den, tsam, inname, outname] = sys2tf (Asys)
+
   if(nargin != 1)
     usage("[num,den,tsam,inname,outname] = sys2tf(Asys)");
   endif
 
   if( !is_struct(Asys))
     error("Asys must be a system data structure (see ss2sys, tf2sys, zp2sys)");
   elseif (! is_siso(Asys) )
     [n, nz, m, p] = sysdimensions(Asys);
diff --git a/scripts/control/sys2zp.m b/scripts/control/sys2zp.m
--- a/scripts/control/sys2zp.m
+++ b/scripts/control/sys2zp.m
@@ -30,19 +30,20 @@
 ## zer = 3.0000
 ## pol =
 ##   -2.6953
 ##    1.5953
 ## k = 1
 ## @end example
 ## @end deftypefn
  
-function [zer, pol, k, tsam, inname, outname] = sys2zp (sys)
+## Author: John Ingram <ingraje@eng.auburn.edu>
+## Created: July 15, 1996
 
-  ## Created by John Ingram July 15 1996
+function [zer, pol, k, tsam, inname, outname] = sys2zp (sys)
 
   if(nargin != 1)
     usage("[zer,pol,k,tsam,inname,outname] = sys2zp(sys)");
   elseif( !is_struct(sys))
     error("sysconnect: sys must be in system data structure form")
   elseif (! is_siso(sys) )
     [n, nz, m, p] = sysdimensions(sys);
     error(["system is not SISO (",num2str(m)," inputs, ...
diff --git a/scripts/control/sysadd.m b/scripts/control/sysadd.m
--- a/scripts/control/sysadd.m
+++ b/scripts/control/sysadd.m
@@ -34,20 +34,21 @@
 ## -----                (_)----> y
 ##     |     ________   +|
 ##      ----|  Hsys  |---
 ##           --------
 ## @end group
 ## @end example
 ## @end deftypefn
  
-function sys = sysadd (...)
+## Author: John Ingram <ingraje@eng.auburn.edu>
+## Created: July 1996
+## Updated for variable number of arguments July 1999 A. S. Hodel
 
-  ## Written by John Ingram July 1996
-  ## Updated for variable number of arguments July 1999 A. S. Hodel
+function sys = sysadd (...)
 
   if(nargin < 1)
     usage("sysadd: sys = sysysadd(Gsys{,Hsys, ...})");
   endif
 
   ## collect all arguments
   arglist = list();
   va_start();
diff --git a/scripts/control/sysappend.m b/scripts/control/sysappend.m
--- a/scripts/control/sysappend.m
+++ b/scripts/control/sysappend.m
@@ -69,20 +69,21 @@
 ## 
 ## @item @var{sys} = discrete
 ## @var{yd} = @code{ones(1,rows(c))}
 ## 
 ## @end itemize
 ## 
 ## @end deftypefn
 
+## Author: John Ingram <ingraje@eng.auburn.edu>
+## Created: August 1996
+  
 function retsys = sysappend (sys, b, c, d, outname, inname, yd)
 
-  ## written by John Ingram August 1996
-  
   sav_empty_list_elements_ok = empty_list_elements_ok;
 
   empty_list_elements_ok = 1;
   
   ## check input arguments
   if ( (nargin < 2) | (nargin > 7) | (!is_struct(sys)))
     usage("retsys = sysappend(sys,b,c[,d,outname,inname,yd]) ");
   elseif(!is_struct(sys))
diff --git a/scripts/control/syschnames.m b/scripts/control/syschnames.m
--- a/scripts/control/syschnames.m
+++ b/scripts/control/syschnames.m
@@ -16,14 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free 
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
 
 ## -*- texinfo -*- 
 ## @deftypefn {Function File } {@var{retsys} =} syschnames (@var{sys}, @var{opt}, @var{list}, @var{names})
 ## Superseded by @code{syssetsignals}
 ## @end deftypefn
 
+## Author: John Ingram <ingraje@eng.auburn.edu>
+## Created: August 1996
+## updated by A. S. Hodel 1998
+
 function retsys = syschnames (sys, opt, list, names)
-## Written by John Ingram August 1996; updated by A. S. Hodel 1998
 
   retsys = syssetsignals(sys,opt,names,list);
 
 endfunction
diff --git a/scripts/control/syschtsam.m b/scripts/control/syschtsam.m
--- a/scripts/control/syschtsam.m
+++ b/scripts/control/syschtsam.m
@@ -17,18 +17,20 @@
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { retsys =} syschtsam ( sys,tsam ) 
 ## This function changes the sampling time (tsam) of the system.  Exits with
 ## an error if sys is purely continuous time.
 ## @end deftypefn
  
+## Author: John Ingram <ingraje@eng.auburn.edu>
+## Created: August 1996
+
 function retsys = syschtsam (sys, tsam)
-## Written by John Ingram August 1996
 
   if (nargin != 2)
     usage("retsys = syschtsam(sys,tsam)");
   elseif (!is_struct(sys))
     error("sys must be in system data structure form");
   elseif(!is_scalar(tsam))
     disp("syschtsam:")
     tsam
diff --git a/scripts/control/sysconnect.m b/scripts/control/sysconnect.m
--- a/scripts/control/sysconnect.m
+++ b/scripts/control/sysconnect.m
@@ -58,20 +58,21 @@
 ##            -------------------------------
 ## @end group
 ## @end example
 ## The input that has the summing junction added to it has an * added to the end 
 ## of the input name.
 ## 
 ## @end deftypefn
 
-function sys = sysconnect (sys, output_list, input_list, order, tol)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1995
+## modified by John Ingram July 1996
 
-  ## A. S. Hodel August 1995
-  ## modified by John Ingram July 1996
+function sys = sysconnect (sys, output_list, input_list, order, tol)
 
   if( (nargin < 3) | (nargin > 5) )
     usage("retsys = sysconnect(sys,output_list,input_list[,order,tol])");
   endif
 
   ## check order
   if(nargin <= 3)
     order = 0;
diff --git a/scripts/control/syscont.m b/scripts/control/syscont.m
--- a/scripts/control/syscont.m
+++ b/scripts/control/syscont.m
@@ -31,19 +31,20 @@
 ##  connections from discrete states to continuous states,
 ##                discrete states to continuous outputs, respectively.
 ## 
 ##  returns @var{csys} empty if no continuous/continous path exists
 ## @end table
 ## 
 ## @end deftypefn
  
-function [csys, Acd, Ccd] = syscont (sys)
+## Author: John Ingram <ingraje@eng.auburn.edu>
+## Created: August 1996
 
-  ## Written by John Ingram August 1996
+function [csys, Acd, Ccd] = syscont (sys)
 
   save_empty = empty_list_elements_ok;
   empty_list_elements_ok = 1;
 
   if (nargin != 1)
     usage("[csys,Acd,Ccd,Dcd] = syscont(sys)");
   elseif (!is_struct(sys))
     error("sys must be in system data structure form");
diff --git a/scripts/control/syscont_disc.m b/scripts/control/syscont_disc.m
--- a/scripts/control/syscont_disc.m
+++ b/scripts/control/syscont_disc.m
@@ -34,19 +34,20 @@
 ## @item y_c
 ## vector of continuous output indices
 ## @item y_d
 ## vector of discrete output indices
 ## @end table
 ## 
 ## @end deftypefn
  
-function [n_tot, st_c, st_d, y_c, y_d] = syscont_disc (sys)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: February 1997
 
-  ## Written by A. S. Hodel (a.s.hodel@eng.auburn.edu) Feb 1997
+function [n_tot, st_c, st_d, y_c, y_d] = syscont_disc (sys)
 
   ## get ranges for discrete/continuous states and outputs
   [nn,nz,mm,pp,yd] = sysdimensions(sys);
   n_tot = nn + nz;
   st_c = 1:(nn);
   st_d = nn + (1:nz);
   y_c = find(yd == 0);		# y_c, y_d will be empty if there are none.
   y_d = find(yd == 1);
diff --git a/scripts/control/sysdimensions.m b/scripts/control/sysdimensions.m
--- a/scripts/control/sysdimensions.m
+++ b/scripts/control/sysdimensions.m
@@ -62,39 +62,40 @@
 ## @math{yd(ii) = 0} if output @var{ii} is continous
 ## @end table
 ## 
 ## @end deftypefn
 
 ## See also: sysgetsignals, sysgettsam
 
 function [n, nz, m, p, yd] = sysdimensions (sys, opt)
-if(nargout > 5 | nargin < 1 | nargin > 2)
-  usage("[n,nz,m,p[,yd]] = sysdimensions(sys{,opt})");
-elseif(!is_struct(sys))
-  usage("[n,nz,m,p] = sysdimensions(sys)");
-elseif(nargin == 1)
-  opt = "all";
-endif
+
+  if(nargout > 5 | nargin < 1 | nargin > 2)
+    usage("[n,nz,m,p[,yd]] = sysdimensions(sys{,opt})");
+  elseif(!is_struct(sys))
+    usage("[n,nz,m,p] = sysdimensions(sys)");
+  elseif(nargin == 1)
+    opt = "all";
+  endif
 
-n = sys.n;
-nz = sys.nz;
-m = length(sysgetsignals(sys,"in"));
-p = length(sysgetsignals(sys,"out"));
-yd = sys.yd;
-legal_options = list("all","cst","dst","st","in","out");
-legal_values = list(n,n,nz,n+nz,m,p);
+  n = sys.n;
+  nz = sys.nz;
+  m = length(sysgetsignals(sys,"in"));
+  p = length(sysgetsignals(sys,"out"));
+  yd = sys.yd;
+  legal_options = list("all","cst","dst","st","in","out");
+  legal_values = list(n,n,nz,n+nz,m,p);
 
-legal_opt = 0;
-for ii=1:length(legal_options)
-  if(strcmp(nth(legal_options,ii),opt))
-    n = nth(legal_values,ii);
-    legal_opt = 1;
-    if(ii > 1 & nargout > 1)
-      warning("opt=%s, %d output arguments requested",opt,nargout);
+  legal_opt = 0;
+  for ii=1:length(legal_options)
+    if(strcmp(nth(legal_options,ii),opt))
+      n = nth(legal_values,ii);
+      legal_opt = 1;
+      if(ii > 1 & nargout > 1)
+	warning("opt=%s, %d output arguments requested",opt,nargout);
+      endif
     endif
+  endfor
+  if(!legal_opt)
+    error("illegal option passed = %s",opt);
   endif
-endfor
-if(!legal_opt)
-  error("illegal option passed = %s",opt);
-endif
 
 endfunction
diff --git a/scripts/control/sysdisc.m b/scripts/control/sysdisc.m
--- a/scripts/control/sysdisc.m
+++ b/scripts/control/sysdisc.m
@@ -31,29 +31,19 @@
 ##  connections from continuous states to discrete states and discrete
 ##     outputs, respectively.
 ## @end table
 ## 
 ## @end deftypefn
  
 function [dsys, Adc, Cdc] = sysdisc (sys)
 
-  ## function [dsys,Adc,Cdc] = sysdisc(sys)
-  ## inputs: sys = system data structure
-  ## outputs:
-  ##    dsys: purely discrete portion of sys (returned empty if there is
-  ##          no purely discrete path from inputs to outputs)
-  ##    Adc, Cdc: connections from continuous states to discrete states/discrete
-  ##    outputs, respectively.
-  ##
-
   save_empty = empty_list_elements_ok;
   empty_list_elements_ok = 1;
 
-
   if (nargin != 1)
     usage("[dsys,Adc,Cdc] = sysdisc(sys)");
   elseif (!is_struct(sys))
     error("sys must be in system data structure form");
   endif
 
   sys = sysupdate(sys,"ss");
   [n_tot,st_c,st_d,y_c,y_d] = syscont_disc(sys);	# get ranges
diff --git a/scripts/control/sysdup.m b/scripts/control/sysdup.m
--- a/scripts/control/sysdup.m
+++ b/scripts/control/sysdup.m
@@ -46,20 +46,21 @@
 ##           |       Asys       |
 ## u2 ------>|                  |----->y2 
 ## (in_idx)  -------------------| (out_idx)
 ## @end group
 ## @end example
 ## 
 ## @end deftypefn
 
-function retsys = sysdup (Asys, output_list, input_list)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1995
+## modified by John Ingram July 1996
 
-  ## A. S. Hodel August 1995
-  ## modified by John Ingram July 1996
+function retsys = sysdup (Asys, output_list, input_list)
 
   if( nargin != 3)
     usage("retsys = sysdup(Asys,output_list,input_list)");
   endif
 
   if( !is_struct(Asys))
     error("Asys must be a system data structure (see ss2sys, tf2sys, or zp2sys)")
   endif
diff --git a/scripts/control/sysgroup.m b/scripts/control/sysgroup.m
--- a/scripts/control/sysgroup.m
+++ b/scripts/control/sysgroup.m
@@ -41,25 +41,25 @@
 ## The function also rearranges the internal state-space realization of @var{sys}
 ## so that the
 ##  continuous states come first and the discrete states come last.
 ##  If there are duplicate names, the second name has a unique suffix appended
 ##  on to the end of the name.
 ## 
 ## @end deftypefn
  
-function sys = sysgroup (...)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1995
+## modified by John Ingram July 1996
+## A. S. Hodel: modified for variable number of arguments 1999
 
-  ## A. S. Hodel August 1995
-  ## modified by John Ingram July 1996
-  ## A. S. Hodel: modified for variable number of arguments 1999
+function sys = sysgroup (...)
 
   save_emp = empty_list_elements_ok;
   empty_list_elements_ok = 1;
-
     
   if(nargin < 1)
     usage("sys = sysgroup(Asys{,Bsys,...})");
   endif
 
   ## collect all arguments
   arglist = list();
   va_start();
diff --git a/scripts/control/sysidx.m b/scripts/control/sysidx.m
--- a/scripts/control/sysidx.m
+++ b/scripts/control/sysidx.m
@@ -20,17 +20,17 @@
 ## return indices of signals with specified signal names
 ## inputs:
 ##   sys:         OCST system data structure
 ##   sigtype:     signal type to be selected: "in", "out", "st"
 ##   signamelist: list of desired signal names
 ## outputs:
 ##   idxvec: vector of signal indices (appropriate for use with sysprune)
 
-## Written by A. S. Hodel, a.s.hodel@eng.auburn.edu
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 
 function idxvec = sysidx (sys, sigtype, signamelist)
 
   if(nargin != 3)         usage("idxvec = sysidx(sys,sigtype,signamelist)");
   elseif(!is_struct(sys)) error("sys must be a system data structure");
   elseif(!isstr(sigtype)) error("sigtype must be a string");
   elseif(rows(sigtype) != 1) 
 			  error("sigtype (%d x %d) must be a single string", ...
diff --git a/scripts/control/sysmin.m b/scripts/control/sysmin.m
--- a/scripts/control/sysmin.m
+++ b/scripts/control/sysmin.m
@@ -27,17 +27,17 @@
 ##                    meaning of states)
 ## outputs:
 ##   retsys: returned system
 ##   nc: number of controllable states in the returned system
 ##   no: number of observable states in the returned system
 ##   cflg: is_controllable(retsys)
 ##   oflg: is_observable(retsys)
 
-## Written by A. S. Hodel a.s.hodel@eng.auburn.edu
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 
 function [retsys, nc, no, cflg, oflg] = sysmin (sys, flg);
   
   switch(nargin)
   case(1), flg = 0;
   case(2), jnk = flg;    # dummy operation
   otherwise,
     usage("[retsys,nc,no] = sysmin(sys{,flg})");
diff --git a/scripts/control/sysmult.m b/scripts/control/sysmult.m
--- a/scripts/control/sysmult.m
+++ b/scripts/control/sysmult.m
@@ -27,20 +27,21 @@
 ## @end group
 ## @end example
 ## A warning occurs if there is direct feed-through
 ## from an input of Bsys or a continuous state of Bsys through a discrete 
 ## output of Bsys to a continuous state or output in Asys (system data structure
 ## does not recognize discrete inputs).
 ## @end deftypefn
 
-function sys = sysmult (...)
+## Author: John Ingram <ingraje@eng.auburn.edu>
+## Created: July 1996
+## updated for variable number of arguments by A. S. Hodel July 1999
 
-  ## Written by John Ingram July 1996
-  ## updated for variable number of arguments by A. S. Hodel July 1999
+function sys = sysmult (...)
 
   if(nargin < 1)
     usage("sysmult: sys = sysmult(Asys{,Bsys,...})");
   endif
 
   ## collect all arguments
   arglist = list();
   va_start();
diff --git a/scripts/control/sysout.m b/scripts/control/sysout.m
--- a/scripts/control/sysout.m
+++ b/scripts/control/sysout.m
@@ -34,19 +34,20 @@
 ## @item      "zp"
 ##  zero-pole form
 ## @item      "all"
 ##  all of the above
 ## @end table
 ## @end table
 ## @end deftypefn
  
-function retsys = sysout (sys, opt)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: 1995-1996
 
-  ## Written by A S Hodel: 1995-1996
+function retsys = sysout (sys, opt)
 
   if( (nargin < 1) || (nargin > 2) )
     usage("sysout(sys[,opt])");
   endif
 
   if(isempty(sys))
     retsys = sys;
     warning("sysout: empty system")
diff --git a/scripts/control/sysprune.m b/scripts/control/sysprune.m
--- a/scripts/control/sysprune.m
+++ b/scripts/control/sysprune.m
@@ -40,20 +40,21 @@
 ## u2 ------->|                  |----| y2
 ##   (deleted)-------------------- (deleted)   
 ## @end group
 ## @end example
 ## 
 ## @end deftypefn
 ## 
  
-function sys = sysprune (sys, output_idx, input_idx, state_idx)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1995
+## Updated by John Ingram 7-15-96
 
-  ## A. S. Hodel August 1995
-  ## Updated by John Ingram 7-15-96
+function sys = sysprune (sys, output_idx, input_idx, state_idx)
 
   if( nargin < 3 | nargin > 4  )
     usage("retsys = sysprune(sys,output_idx,input_idx{,state_idx})");
   elseif(nargin < 4)
     state_idx = [];
   endif
 
   ## default: no action
diff --git a/scripts/control/sysreorder.m b/scripts/control/sysreorder.m
--- a/scripts/control/sysreorder.m
+++ b/scripts/control/sysreorder.m
@@ -25,20 +25,21 @@
 ## @strong{Outputs}
 ##  @var{pv}: a permutation vector to order elements of @code{[1:vlen]} in 
 ## @code{list} to the end of a vector.
 ## 
 ##  Used internally by @code{sysconnect} to permute vector elements to their
 ##  desired locations.  
 ## @end deftypefn
  
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1995
+  
 function pv = sysreorder (vlen, list)
 
-  ## A. S. Hodel, Aug 1995
-  
   ## disp('sysreorder: entry')
   
   pv = 1:vlen;
   ## make it a row vector
   list = reshape(list,1,length(list));
   A = pv'*ones(size(list));
   B = ones(size(pv'))*list;
   X = (A != B);
diff --git a/scripts/control/sysrepdemo.m b/scripts/control/sysrepdemo.m
--- a/scripts/control/sysrepdemo.m
+++ b/scripts/control/sysrepdemo.m
@@ -16,18 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free 
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File } {} sysrepdemo 
 ## Tutorial for the use of the system data structure functions.
 ## @end deftypefn
 
-## Octave Controls toolbox demo: System representation
-## Written by A. S. Hodel June 1995
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: June 1995
 ## Revised Aug 1995 for system data structure format
 
 function sysrepdemo ()
 
   save_val = page_screen_output;
   page_screen_output = 1;
 
   disp('System representation demo:')
diff --git a/scripts/control/sysscale.m b/scripts/control/sysscale.m
--- a/scripts/control/sysscale.m
+++ b/scripts/control/sysscale.m
@@ -36,20 +36,21 @@
 ##  are not square, then default names will be given to the inputs and/or
 ##  outputs.
 ## 
 ## A warning message is printed if outscale attempts to add continuous
 ## system outputs to discrete system outputs; otherwise @var{yd} is 
 ## set appropriately in the returned value of @var{sys}.
 ## @end deftypefn
 
-function sys = sysscale (sys, outscale, inscale, outname, inname)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1995
+## modified by John Ingram 7-15-96
 
-  ## A. S. Hodel August 1995
-  ## modified by John Ingram 7-15-96
+function sys = sysscale (sys, outscale, inscale, outname, inname)
 
   if( (nargin < 3) || (nargin > 5)  )
     usage("retsys = sysscale(Asys,output_list,input_list{,inname,outname})");
   elseif (!is_struct(sys))
     error("sys must be a structured system");
   endif
 
   [nn,nz,mm,pp] = sysdimensions(sys);
diff --git a/scripts/control/syssetsignals.m b/scripts/control/syssetsignals.m
--- a/scripts/control/syssetsignals.m
+++ b/scripts/control/syssetsignals.m
@@ -81,19 +81,20 @@
 ## C matrix: 1 x 2
 ##   7  8
 ## D matrix: 1 x 1
 ## 0
 ## @end example
 ## 
 ## @end deftypefn
 
-function retsys = syssetsignals (sys, opt, names, sig_idx)
+## Author: John Ingram <ingraje@eng.auburn.edu>
+## Created: August 1996
 
-  ## Written by John Ingram August 1996
+function retsys = syssetsignals (sys, opt, names, sig_idx)
 
   if (nargin < 3 | nargin > 4)
     usage("retsys=syssetsignals(sys,opt,names{,sig_idx})");
   elseif (!is_struct(sys))
     error("sys must be a system data structure");
   elseif (isempty(opt))
     opt = "out";
   elseif( ! isstr(opt)  )
diff --git a/scripts/control/syssub.m b/scripts/control/syssub.m
--- a/scripts/control/syssub.m
+++ b/scripts/control/syssub.m
@@ -31,20 +31,21 @@
 ## -----                (_)----> y
 ##     |     ________   -|
 ##      ----|  Hsys  |---
 ##           --------
 ## @end group
 ## @end example
 ## @end deftypefn
  
-function sys = syssub (...)
+## Author: John Ingram <ingraje@eng.auburn.edu>
+## Created: July 1996
+## updated for variable numbers of input arguments by July 1999 A. S. Hodel
 
-  ## Written by John Ingram July 1996
-  ## updated for variable numbers of input arguments by July 1999 A. S. Hodel
+function sys = syssub (...)
 
   if(nargin < 1)
     usage("syssub: sys = syssub(Gsys{,Hsys,...})");
   endif
 
   ## collect all arguments
   arglist = list();
   va_start();
diff --git a/scripts/control/sysupdate.m b/scripts/control/sysupdate.m
--- a/scripts/control/sysupdate.m
+++ b/scripts/control/sysupdate.m
@@ -43,19 +43,20 @@
 ## If requested data in sys is already up to date then retsys=sys.
 ## 
 ## Conversion to @code{tf} or @code{zp} exits with an error if the system is 
 ##  mixed continuous/digital.
 ## @end deftypefn
 
 ## See also: tf2sys, ss2sys, zp2sys, sysout, sys2ss, sys2tf, sys2zp
 
-function sys = sysupdate (sys, opt)
+## Author: John Ingram <ingraje@eng.auburn.edu>
+## Created: July 9, 1996
 
-  ## Written by John Ingram  7-9-96
+function sys = sysupdate (sys, opt)
 
   ## check for correct number of inputs 
   if (nargin != 2)
     usage("newsys = sysupdate(sys,opt)");
   elseif(! is_struct(sys) )
    error("1st argument must be system data structure")
   elseif(! (strcmp(opt,"tf") + strcmp(opt,"zp") + ...
 	strcmp(opt,"ss") + strcmp(opt,"all")) )
diff --git a/scripts/control/tf2ss.m b/scripts/control/tf2ss.m
--- a/scripts/control/tf2ss.m
+++ b/scripts/control/tf2ss.m
@@ -37,19 +37,21 @@
 ##  The state space system matrices obtained from this function will be
 ##  in controllable canonical form as described in "Modern Control Theory",
 ##  [Brogan, 1991].
 ## 
 ## 
 ## @end format
 ## @end deftypefn
 
+## Author: R. Bruce Tenison <btenison@eng.auburn.edu>
+## Created: June 22, 1994
+## mod A S Hodel July, Aug  1995
+
 function [a, b, c, d] = tf2ss (num, den)
-  ## Written by R. Bruce Tenison (June 22, 1994) btenison@eng.auburn.edu
-  ## mod A S Hodel July, Aug  1995
 
   if(nargin != 2)        error("tf2ss: wrong number of input arguments")
   elseif(isempty(num))   error("tf2ss: empty numerator");
   elseif(isempty(den))   error("tf2ss: empy denominator");
   elseif(!is_vector(num)) 
     error(sprintf("num(%dx%d) must be a vector",rows(num),columns(num)));
   elseif(!is_vector(den)) 
     error(sprintf("den(%dx%d) must be a vector",rows(den),columns(den)));
diff --git a/scripts/control/tf2sys.m b/scripts/control/tf2sys.m
--- a/scripts/control/tf2sys.m
+++ b/scripts/control/tf2sys.m
@@ -45,20 +45,22 @@
 ## Sampling interval: 0.1
 ## transfer function form:
 ## 2*z^1 + 1
 ## -----------------
 ## 1*z^2 + 2*z^1 + 1
 ## @end example
 ## @end deftypefn
 
+## Author: R. Bruce Tenison <btenison@eng.auburn.edu>
+## Created: July 29, 1994
+## Name changed to TF2SYS July 1995
+## updated for new system data structure format July 1996
+
 function outsys = tf2sys (num, den, tsam, inname, outname)
-  ## Written by R. Bruce Tenison  July 29, 1994
-  ## Name changed to TF2SYS July 1995
-  ## updated for new system data structure format July 1996
 
   ## Test for the correct number of input arguments
   if ((nargin < 2) || (nargin > 5))
     usage('outsys=tf2sys(num,den[,tsam,inname,outname])');
     return
   endif
 
   ## check input format 
diff --git a/scripts/control/tf2zp.m b/scripts/control/tf2zp.m
--- a/scripts/control/tf2zp.m
+++ b/scripts/control/tf2zp.m
@@ -23,22 +23,24 @@
 ## 
 ##  [zer,pol,k] = tf2zp(num,den) returns the zeros and poles of the SISO system
 ##  defined by num/den.  K is a gain associated with the system zeros.
 ## 
 ## 
 ## @end format
 ## @end deftypefn
 
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+
 function [zer, pol, k] = tf2zp (num, den)
-## Written by A. S. Hodel, etc.
 
   if(nargin == 2)
     if(length(den) > 1)          pol = roots(den);
     else                         pol=[];                   endif
     if(length(num) > 1)         zer = roots(num);
     else                        zer=[];                    endif
   else                    error("Incorrect number of input arguments");
   endif
 
   [a,b,c,d] = tf2ss(num,den);
   [dum,k] = tzero(a,b,c,d);
+
 endfunction
diff --git a/scripts/control/tfout.m b/scripts/control/tfout.m
--- a/scripts/control/tfout.m
+++ b/scripts/control/tfout.m
@@ -20,18 +20,20 @@
 ## @deftypefn {Function File } { } tfout (@var{num}, @var{denom}@{, @var{x}@})
 ##  print formatted transfer function @math{n(s)/d(s) } to the screen
 ##  @var{x} defaults to the string @code{"s"}
 ## @end deftypefn
 
 ##  See also: polyval, polyvalm, poly, roots, conv, deconv, residue, 
 ##	filter, polyderiv, polyinteg, polyout
 
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: June 1995
+
 function tfout (num, denom, x)
-## Written by A. Scottedward Hodel (scotte@eng.auburn.edu) June 1995)
   
   save_empty = empty_list_elements_ok;
   empty_list_elements_ok = 1;
   
   if (nargin < 2 ) | (nargin > 3) | (nargout != 0 ) 
     usage("tfout(num,denom[,x])");
   endif
 
diff --git a/scripts/control/tzero.m b/scripts/control/tzero.m
--- a/scripts/control/tzero.m
+++ b/scripts/control/tzero.m
@@ -41,20 +41,21 @@
 ## @end table
 ## @strong{References}
 ## @enumerate
 ## @item Emami-Naeini and Van Dooren, Automatica, 1982.
 ## @item Hodel, "Computation of Zeros with Balancing," 1992 Lin. Alg. Appl.
 ## @end enumerate
 ## @end deftypefn
 
-function [zer, gain] = tzero (A, B, C, D)
+## Author: R. Bruce Tenison <btenison@eng.auburn.edu>
+## Created: July 4, 1994
+## A. S. Hodel Aug 1995: allow for MIMO and system data structures
 
-  ## R. Bruce Tenison July 4, 1994
-  ## A. S. Hodel Aug 1995: allow for MIMO and system data structures
+function [zer, gain] = tzero (A, B, C, D)
 
   ## get A,B,C,D and Asys variables, regardless of initial form
   if(nargin == 4)
     Asys = ss2sys(A,B,C,D);
   elseif( (nargin == 1) && (! is_struct(A)))
     usage("[zer,gain] = tzero(A,B,C,D) or zer = tzero(Asys)");
   elseif(nargin != 1)
     usage("[zer,gain] = tzero(A,B,C,D) or zer = tzero(Asys)");
diff --git a/scripts/control/tzero2.m b/scripts/control/tzero2.m
--- a/scripts/control/tzero2.m
+++ b/scripts/control/tzero2.m
@@ -21,18 +21,20 @@
 ##Compute the transmission zeros of a, b, c, d.
 ##
 ##bal = balancing option (see balance); default is "B".
 ##
 ##Needs to incorporate @code{mvzero} algorithm to isolate finite zeros; use
 ##@code{tzero} instead.
 ##@end deftypefn
 
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1993
+
 function zr = tzero2 (a, b, c, d, bal)
-## Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
 
   if (nargin == 4)
     bal = "B";
   elseif (nargin != 5)
     error ("tzero: illegal number of arguments");
   endif
 
   [n, m, p] = abcddim (a, b, c, d);
diff --git a/scripts/control/ugain.m b/scripts/control/ugain.m
--- a/scripts/control/ugain.m
+++ b/scripts/control/ugain.m
@@ -23,18 +23,19 @@
 ##  complex systems from simple systems with buildssic.
 ##  Watch out if you are forming sampled systems since "ugain"
 ##  does not contain a sampling period.  
 ## 
 ## See also: hinfdemo (MIMO H_infinty example, Boeing 707-321 aircraft model)
 ## 
 ## @end deftypefn
 
-function outsys = ugain (n)
+## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
+## Created: April 1998
 
-  ## Written by Kai P. Mueller April, 1998
-  ## Updates
+function outsys = ugain (n)
 
   if((nargin != 1) || (nargout > 1))
     usage("outsys = ugain(n)")
   endif
   outsys = ss2sys([],[],[],eye(n));
+
 endfunction
diff --git a/scripts/control/unpacksys.m b/scripts/control/unpacksys.m
--- a/scripts/control/unpacksys.m
+++ b/scripts/control/unpacksys.m
@@ -14,17 +14,18 @@
 ## 
 ## You should have received a copy of the GNU General Public License 
 ## along with Octave; see the file COPYING.  If not, write to the Free 
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
  
 ## [a,b,c,d] = unpacksys(sys)
 ## Obsolete.  Use sys2ss instead.
 
-function [a, b, c, d] = unpacksys (syst)
+## Author: David Clem
+## Created: August 19, 1994
 
-  ## Written by David Clem August 19, 1994
+function [a, b, c, d] = unpacksys (syst)
 
   warning("unpacksys obsolete; calling sys2ss");
   [a,b,c,d] = sys2ss(syst);
 
 endfunction
 
diff --git a/scripts/control/wgt1o.m b/scripts/control/wgt1o.m
--- a/scripts/control/wgt1o.m
+++ b/scripts/control/wgt1o.m
@@ -26,18 +26,20 @@
 ## 
 ##  vl = Gain @@ low frequencies
 ## 
 ##  vh = Gain @@ high frequencies
 ## 
 ##  fc = Corner frequency (in Hz, *not* in rad/sec)
 ## @end deftypefn
  
+## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
+## Created: September 30, 1997
+
 function wsys = wgt1o (vl, vh, fc)
-## Written by Kai P. Mueller September 30, 1997
 
   if (nargin != 3)
     usage("wsys = wgt1o(vl, vh, fc)");
   endif
 
   if(nargout > 1)
     usage("wsys = wgt1o(vl, vh, fc)");
   endif
diff --git a/scripts/control/zgfmul.m b/scripts/control/zgfmul.m
--- a/scripts/control/zgfmul.m
+++ b/scripts/control/zgfmul.m
@@ -23,21 +23,21 @@
 ## Used by zgepbal (in zgscal) as part of generalized conjugate gradient
 ## iteration.
 ## @end deftypefn
    
 ## References:
 ## ZGEP: Hodel, "Computation of Zeros with Balancing," 1992, submitted to  LAA
 ## Generalized CG: Golub and Van Loan, "Matrix Computations, 2nd ed" 1989
 
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Conversion to Octave July 3, 1994
+  
 function y = zgfmul (a, b, c, d, x)
 
-  ## A. S. Hodel July 24 1992
-  ## Conversion to Octave July 3, 1994
-  
   [n,m] = size(b);
   [p,m1] = size(c);
   nm = n+m;
   y = zeros(nm+p,1);
 
   ## construct F column by column
   for jj=1:n
     Fj = zeros(nm+p,1);
diff --git a/scripts/control/zgfslv.m b/scripts/control/zgfslv.m
--- a/scripts/control/zgfslv.m
+++ b/scripts/control/zgfslv.m
@@ -16,19 +16,20 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free 
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File } {x =} zgfslv(@var{n},@var{m},@var{p},@var{b})
 ## solve system of equations for dense zgep problem
 ## @end deftypefn
  
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Converted to Octave by R Bruce Tenison, July 3, 1994
+
 function x = zgfslv (n, m, p, b)
-  ## Written by A. Scotte Hodel
-  ## Converted to Octave by R Bruce Tenison, July 3, 1994
 
   nmp = n+m+p;
   gam1 = (2*n)+m+p;    gam2 = n+p;     gam3 = n+m;
 
   G1 = givens(sqrt(m),-sqrt(p))';
   G2 = givens(m+p,sqrt(n*(m+p)))';
 
   x = b;
diff --git a/scripts/control/zginit.m b/scripts/control/zginit.m
--- a/scripts/control/zginit.m
+++ b/scripts/control/zginit.m
@@ -24,20 +24,21 @@
 ## called by zgepbal
 ## 
 ## @end deftypefn 
 
 ## References:
 ## ZGEP: Hodel, "Computation of Zeros with Balancing," 1992, submitted to  LAA
 ## Generalized CG: Golub and Van Loan, "Matrix Computations, 2nd ed" 1989
 
-function zz = zginit (a, b, c, d)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: July 24, 1992
+## Conversion to Octave by R. Bruce Tenison, July 3, 1994
 
-  ## A. S. Hodel July 24 1992
-  ## Conversion to Octave by R. Bruce Tenison, July 3, 1994
+function zz = zginit (a, b, c, d)
 
   [nn,mm] = size(b);
   [pp,mm] = size(d);
 
   nmp = nn+mm+pp;
 
   ## set up log vector zz
   zz = zeros(nmp,1);
diff --git a/scripts/control/zgpbal.m b/scripts/control/zgpbal.m
--- a/scripts/control/zgpbal.m
+++ b/scripts/control/zgpbal.m
@@ -33,20 +33,21 @@
 ## zgpbal should be followed by zgpred
 ##
 ## @end deftypefn
 
 ## References:
 ## ZGEP: Hodel, "Computation of Zeros with Balancing," 1992, submitted to  LAA
 ## Generalized CG: Golub and Van Loan, "Matrix Computations, 2nd ed" 1989
 
-function retsys = zgpbal (Asys)  
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: July 24, 1992
+## Conversion to Octave by R. Bruce Tenison July 3, 1994
 
-  ## A. S. Hodel July 24 1992
-  ## Conversion to Octave by R. Bruce Tenison July 3, 1994
+function retsys = zgpbal (Asys)  
 
   if( (nargin != 1) | (!is_struct(Asys)))
     usage("retsys = zgpbal(Asys)");
   endif
 
   Asys = sysupdate(Asys,"ss");
   [a,b,c,d] = sys2ss(Asys);
 
diff --git a/scripts/control/zgscal.m b/scripts/control/zgscal.m
--- a/scripts/control/zgscal.m
+++ b/scripts/control/zgscal.m
@@ -23,20 +23,21 @@
 ## @math{fx=z};
 ## called by @code{zgepbal}
 ## @end deftypefn
 
 ## References:
 ## ZGEP: Hodel, "Computation of Zeros with Balancing," 1992, submitted to  LAA
 ## Generalized CG: Golub and Van Loan, "Matrix Computations, 2nd ed" 1989
 
-function x = zgscal (a, b, c, d, z, n, m, p)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: July 24, 1992
+## Conversion to Octave R. Bruce Tenison July 3, 1994
 
-  ## A. S. Hodel July 24 1992
-  ## Conversion to Octave R. Bruce Tenison July 3, 1994
+function x = zgscal (a, b, c, d, z, n, m, p)
 
   ## initialize parameters:
   ## Givens rotations, diagonalized 2x2 block of F, gcg vector initialization
 
   nmp = n+m+p;
   
   ## x_0 = x_{-1} = 0, r_0 = z
   x = zeros(nmp,1);
diff --git a/scripts/control/zgsgiv.m b/scripts/control/zgsgiv.m
--- a/scripts/control/zgsgiv.m
+++ b/scripts/control/zgsgiv.m
@@ -17,18 +17,20 @@
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File } {[a ,b ] =} zgsgiv(@var{c},@var{s},@var{a},@var{b})
 ## apply givens rotation c,s to row vectors @var{a},@var{b}
 ## No longer used in zero-balancing (zgpbal); kept for backward compatibility
 ## @end deftypefn
 
-function [a, b] = zgsgiv (c, s, a, b)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: July 29, 1992
+## Convertion to Octave by R. Bruce Tenison July 3, 1994
 
-  ## A. S. Hodel July 29, 1992
-  ## Convertion to Octave by R. Bruce Tenison July 3, 1994
+function [a, b] = zgsgiv (c, s, a, b)
 
   t1 = c*a + s*b;
   t2 = -s*a + c*b;
   a = t1;
   b = t2;
+
 endfunction
diff --git a/scripts/control/zgshsr.m b/scripts/control/zgshsr.m
--- a/scripts/control/zgshsr.m
+++ b/scripts/control/zgshsr.m
@@ -18,20 +18,21 @@
  
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { @var{x} =} zgshsr( @var{y})
 ## apply householder vector based on @math{e^(m)} to 
 ## (column vector) y.
 ## Called by zgfslv
 ## @end deftypefn
 
-function x = zgshsr (y)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: July 24, 1992
+## Conversion to Octave by R. Bruce Tenison July 3, 1994
 
-  ## A. S. Hodel July 24, 1992
-  ## Conversion to Octave by R. Bruce Tenison July 3, 1994
+function x = zgshsr (y)
 
   if(!is_vector(y))
     error(sprintf("y(%dx%d) must be a vector",rows(y),columns(y)));
   endif
   x = vec(y);
   m = length(x);
   if (m>1)
     beta = (1 + sqrt(m))*x(1) + sum(x(2:m));
diff --git a/scripts/control/zp2ss.m b/scripts/control/zp2ss.m
--- a/scripts/control/zp2ss.m
+++ b/scripts/control/zp2ss.m
@@ -40,19 +40,20 @@
 ## function call @code{[a,b,c,d] = zp2ss(zer,pol,k)}.  
 ## The vectors @samp{zer} and 
 ## @samp{pol} may either be row or column vectors.  Each zero and pole that
 ## has an imaginary part must have a conjugate in the list.
 ## The number of zeros must not exceed the number of poles.
 ## @samp{k} is @code{zp}-form leading coefficient.
 ## @end deftypefn
  
-function [a, b, c, d] = zp2ss (zer, pol, k)
+## Author: David Clem
+## Created: August 15, 1994
 
-  ## Written by David Clem August 15, 1994
+function [a, b, c, d] = zp2ss (zer, pol, k)
 
   sav_val = empty_list_elements_ok;
   empty_list_elements_ok = 1;
 
   if(nargin != 3)
     error("Incorrect number of input arguments");
   endif
  
diff --git a/scripts/control/zp2ssg2.m b/scripts/control/zp2ssg2.m
--- a/scripts/control/zp2ssg2.m
+++ b/scripts/control/zp2ssg2.m
@@ -18,19 +18,20 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { [@var{poly}, @var{rvals}] =} zp2ssg2 (@var{rvals})
 ## Used internally in @code{zp2ss}
 ## Extract 2 values from @var{rvals} (if possible) and construct
 ##  a polynomial with those roots.
 ## @end deftypefn
 
-function [poly, rvals] = zp2ssg2 (rvals)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: August 1996
 
-  ## A. S. Hodel Aug 1996
+function [poly, rvals] = zp2ssg2 (rvals)
 
   ## locate imaginary roots (if any)
   cidx = find(imag(rvals));
 
   if(!isempty(cidx))
     ## select first complex root, omit from cidx
     r1i = cidx(1);      r1 = rvals(r1i);     cidx = complement(r1i,cidx);
 
diff --git a/scripts/control/zp2sys.m b/scripts/control/zp2sys.m
--- a/scripts/control/zp2sys.m
+++ b/scripts/control/zp2sys.m
@@ -47,19 +47,19 @@
 ##         1: y_1
 ## zero-pole form:
 ## 1 (s - 1) (s + 1)
 ## -----------------
 ## s (s + 2) (s + 2)
 ## @end example
 ## @end deftypefn
  
-function outsys = zp2sys (zer, pol, k, tsam, inname, outname)
+## Modified by John Ingram  July 20, 1996  
 
-  ## Modified by John Ingram  July 20, 1996  
+function outsys = zp2sys (zer, pol, k, tsam, inname, outname)
 
   ## Test for the correct number of input arguments
   if ((nargin < 3) || (nargin > 6))
     usage("outsys = zp2sys(zer,pol,k[,tsam,inname,outname])");
   endif
 
   ## check input format 
   if( ! (is_vector(zer) | isempty(zer) ) )
diff --git a/scripts/control/zp2tf.m b/scripts/control/zp2tf.m
--- a/scripts/control/zp2tf.m
+++ b/scripts/control/zp2tf.m
@@ -26,22 +26,23 @@
 ## function.  Complex values should appear in conjugate pairs
 ## @item k
 ## real scalar (leading coefficient)
 ## @end table
 ## @code{[num,den] = zp2tf(zer,pol,k)} forms the transfer function 
 ## @code{num/den} from the vectors of poles and zeros.
 ## @end deftypefn
 
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## (With help from students Ingram, McGowan.)
+
 function [num, den] = zp2tf (zer, pol, k)
 
   ## Find out whether data was entered as a row or a column vector and
-  ## convert to a column vector if necessary
-  ## Written by A. S. Hodel with help from students Ingram, McGowan.
-  ## a.s.hodel@eng.auburn.edu
+  ## convert to a column vector if necessary.
 
   [rp,cp] = size(pol);
   [rz,cz] = size(zer);
 
   if(!(is_vector(zer) | isempty(zer)) )
     error(sprintf("zer(%dx%d) must be a vector",rz,cz));
   elseif(!(is_vector(pol) | isempty(pol)) )
     error(sprintf("pol(%dx%d) must be a vector",rp,cp));
diff --git a/scripts/control/zpout.m b/scripts/control/zpout.m
--- a/scripts/control/zpout.m
+++ b/scripts/control/zpout.m
@@ -20,19 +20,20 @@
 ## @deftypefn {Function File } { } zpout (@var{zer}, @var{pol}, @var{k}@{, @var{x}@})
 ##  print formatted zero-pole form to the screen.  
 ## @var{x} defaults to the string @code{"s"}
 ## @end deftypefn
 
 ##  See also: polyval, polyvalm, poly, roots, conv, deconv, residue, 
 ##	filter, polyderiv, polyinteg, polyout 
 
-function zpout (zer, pol, k, x)
+## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
+## Created: June 1995
 
-  ## Written by A. Scottedward Hodel (scotte@eng.auburn.edu) June 1995)
+function zpout (zer, pol, k, x)
 
   save_empty = empty_list_elements_ok;
   empty_list_elements_ok = 1;
 
   if (nargin < 3 ) | (nargin > 4) | (nargout != 0 )
     usage("zpout(zer,pol,k[,x])");
   endif
  
