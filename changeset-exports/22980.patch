# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1483039767 18000
#      Thu Dec 29 14:29:27 2016 -0500
# Node ID b4346e1b5b453dada6d0b3b80ff53d1045cccc27
# Parent  28cd5a239fdaeaa4b7e85201567de034e06b868a
use F77_INT instead of octave_idx_type for libinterp dot function

* dot.cc: Use F77_INT instead of octave_idx_type for integer data
passed to Fortran subroutines.

diff --git a/libinterp/corefcn/dot.cc b/libinterp/corefcn/dot.cc
--- a/libinterp/corefcn/dot.cc
+++ b/libinterp/corefcn/dot.cc
@@ -27,41 +27,46 @@ along with Octave; see the file COPYING.
 #include "lo-blas-proto.h"
 #include "mx-base.h"
 #include "error.h"
 #include "defun.h"
 #include "parse.h"
 
 static void
 get_red_dims (const dim_vector& x, const dim_vector& y, int dim,
-              dim_vector& z, octave_idx_type& m, octave_idx_type& n,
-              octave_idx_type& k)
+              dim_vector& z, F77_INT& m, F77_INT& n, F77_INT& k)
 {
   int nd = x.ndims ();
   assert (nd == y.ndims ());
   z = dim_vector::alloc (nd);
-  m = 1, n = 1, k = 1;
+  octave_idx_type tmp_m = 1;
+  octave_idx_type tmp_n = 1;
+  octave_idx_type tmp_k = 1;
   for (int i = 0; i < nd; i++)
     {
       if (i < dim)
         {
           z(i) = x(i);
-          m *= x(i);
+          tmp_m *= x(i);
         }
       else if (i > dim)
         {
           z(i) = x(i);
-          n *= x(i);
+          tmp_n *= x(i);
         }
       else
         {
-          k = x(i);
+          tmp_k = x(i);
           z(i) = 1;
         }
     }
+
+  m = to_f77_int (tmp_m);
+  n = to_f77_int (tmp_n);
+  k = to_f77_int (tmp_k);
 }
 
 DEFUN (dot, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} dot (@var{x}, @var{y}, @var{dim})
 Compute the dot product of two vectors.
 
 If @var{x} and @var{y} are matrices, calculate the dot products along the
@@ -110,17 +115,17 @@ but avoids forming a temporary array and
   if (nargin == 2)
     dim = dimx.first_non_singleton ();
   else
     dim = args(2).int_value (true) - 1;
 
   if (dim < 0)
     error ("dot: DIM must be a valid dimension");
 
-  octave_idx_type m, n, k;
+  F77_INT m, n, k;
   dim_vector dimz;
   if (argx.is_complex_type () || argy.is_complex_type ())
     {
       if (argx.is_single_type () || argy.is_single_type ())
         {
           FloatComplexNDArray x = argx.float_complex_array_value ();
           FloatComplexNDArray y = argy.float_complex_array_value ();
           get_red_dims (dimx, dimy, dim, dimz, m, n, k);
@@ -250,30 +255,31 @@ endfor
   octave_value argy = args(1);
 
   if (! argx.is_numeric_type () || ! argy.is_numeric_type ())
     error ("blkmm: A and B must be numeric");
 
   const dim_vector dimx = argx.dims ();
   const dim_vector dimy = argy.dims ();
   int nd = dimx.ndims ();
-  octave_idx_type m = dimx(0);
-  octave_idx_type k = dimx(1);
-  octave_idx_type n = dimy(1);
-  octave_idx_type np = 1;
+  F77_INT m = to_f77_int (dimx(0));
+  F77_INT k = to_f77_int (dimx(1));
+  F77_INT n = to_f77_int (dimy(1));
+  octave_idx_type tmp_np = 1;
   bool match = dimy(0) == k && nd == dimy.ndims ();
   dim_vector dimz = dim_vector::alloc (nd);
   dimz(0) = m;
   dimz(1) = n;
   for (int i = 2; match && i < nd; i++)
     {
       match = match && dimx(i) == dimy(i);
       dimz(i) = dimx(i);
-      np *= dimz(i);
+      tmp_np *= dimz(i);
     }
+  F77_INT np = to_f77_int (tmp_np);
 
   if (! match)
     error ("blkmm: A and B dimensions don't match: (%s) and (%s)",
            dimx.str ().c_str (), dimy.str ().c_str ());
 
   if (argx.is_complex_type () || argy.is_complex_type ())
     {
       if (argx.is_single_type () || argy.is_single_type ())
