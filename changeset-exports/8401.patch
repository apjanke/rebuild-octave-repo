# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1229085310 -3600
#      Fri Dec 12 13:35:10 2008 +0100
# Node ID 712cfdc2e417b811f2bd9af8d508c86b320c91be
# Parent  7b6e1fc1cb908c57114a8a71a657695cf03efdf0
allow saving diagonal & permutation matrices to hdf5 as full

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2008-12-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ls-hdf5.cc (add_hdf5_data): Check for diagonal & permutation
+	matrices and convert them to full prior to saving.
+
 2008-12-11  Jaroslav Hajek  <highegg@gmail.com>
 	
 	* ov-re-mat.cc (Fdouble): Handle diagonal & perm matrices. 
 	* ov-flt-re-mat.cc (Fsingle): Handle diagonal & perm matrices. 
 
 2008-12-11  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base-diag.cc (octave_base_diag<DMT,MT>::subsasgn): New method.
diff --git a/src/ls-hdf5.cc b/src/ls-hdf5.cc
--- a/src/ls-hdf5.cc
+++ b/src/ls-hdf5.cc
@@ -742,17 +742,23 @@ bool
 add_hdf5_data (hid_t loc_id, const octave_value& tc,
 	       const std::string& name, const std::string& doc,
 	       bool mark_as_global, bool save_as_floats)
 {
   hsize_t dims[3];
   hid_t type_id = -1, space_id = -1, data_id = -1, data_type_id = -1;
   bool retval = false;
   octave_value val = tc;
-  std::string t = tc.type_name();
+  // FIXME: diagonal & permutation matrices currently don't know how to save
+  // themselves, so we convert them first to normal matrices using A = A(:,:).
+  // This is a temporary hack.
+  if (val.is_diag_matrix () || val.is_perm_matrix ())
+    val = val.do_index_op (octave_value_list (2, octave_value::magic_colon_t));
+
+  std::string t = val.type_name();
 
   data_id = H5Gcreate (loc_id, name.c_str (), 0);
   if (data_id < 0)
     goto error_cleanup;
 
   // attach the type of the variable
   type_id = H5Tcopy (H5T_C_S1); H5Tset_size (type_id, t.length () + 1);
   if (type_id < 0)
