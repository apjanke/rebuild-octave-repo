# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1265089912 18000
#      Tue Feb 02 00:51:52 2010 -0500
# Node ID e45ccac6017f0d28662e5f4247215258b2f6d261
# Parent  144739908eefcfa40596b1f25e29441252773493
addtional fixes for using strptime module

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2010-02-02  John W. Eaton  <jwe@octave.org>
+
+	* acinclue.m4 (OCTAVE_STRPTIME_BROKEN): Delete.
+	* configure.ac: Don't call it.
+
 2010-02-01  John W. Eaton  <jwe@octave.org>
 
 	* acinclude.m4 (OCTAVE_PROG_MAKEINFO): Delete macro.
 	* configure.ac: Don't call it.  Don't issue warning about
 	makeinfo in summary.
 
 2010-01-31  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/acinclude.m4 b/acinclude.m4
--- a/acinclude.m4
+++ b/acinclude.m4
@@ -101,43 +101,16 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]],
 [[void test(char *); int length(); char x[length()]; test(x);]])],
 octave_cv_dynamic_auto_arrays=yes, octave_cv_dynamic_auto_arrays=no)])
 if test $octave_cv_dynamic_auto_arrays = yes; then
 AC_DEFINE(HAVE_DYNAMIC_AUTO_ARRAYS,1,[Define if C++ supports dynamic auto arrays])
 fi
 AC_LANG_POP(C++)
 ])
 dnl
-dnl Check for broken strptime
-dnl
-AC_DEFUN([OCTAVE_STRPTIME_BROKEN],
-[AC_CACHE_CHECK([whether strptime is broken],
-octave_cv_strptime_broken,
-[AC_LANG_PUSH(C)
-AC_RUN_IFELSE([AC_LANG_PROGRAM([[
-#define _XOPEN_SOURCE
-#if defined (HAVE_SYS_TYPES_H)
-#include <sys/types.h>
-#if defined (HAVE_UNISTD_H)
-#include <unistd.h>
-#endif
-#endif
-#include <stdio.h>
-#include <time.h>
-]], [[
-struct tm t;
-char *q = strptime ("09/13", "%m/%d/%y", &t);
-return q ? 1 : 0;
-]])], [octave_cv_strptime_broken=no], [octave_cv_strptime_broken=yes])])
-if test $octave_cv_strptime_broken = yes; then
-AC_DEFINE(OCTAVE_HAVE_BROKEN_STRPTIME, 1, [Define if strptime is broken on your system])
-fi
-AC_LANG_POP(C)
-])
-dnl
 dnl The following test is from Karl Berry's Kpathseach library.  I'm
 dnl including it here in case we someday want to make the use of
 dnl kpathsea optional.
 dnl
 dnl Some BSD putenv's, e.g., FreeBSD, do malloc/free's on the environment.
 dnl This test program is due to Mike Hibler <mike@cs.utah.edu>.
 dnl We don't actually need to run this if we don't have putenv, but it
 dnl doesn't hurt.
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1549,17 +1549,16 @@ case "$canonical_host_type" in
     [AC_MSG_RESULT(no)
      HAVE_MKSTEMPS=no
      LIBS="$save_LIBS"
     ])
    ;;
 esac
 
 OCTAVE_HAVE_C99_VSNPRINTF
-OCTAVE_STRPTIME_BROKEN
 OCTAVE_SMART_PUTENV
 
 case "$canonical_host_type" in
   *-*-msdosmsvc | *-*-mingw*)
     AC_MSG_CHECKING([for required _WIN32_WINNT])
     AC_COMPILE_IFELSE(AC_LANG_PROGRAM([[
 #include <windows.h>
 #if _WIN32_WINNT < 0x0403
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-02-02  John W. Eaton  <jwe@octave.org>
+
+	* lo-utils.h, lo-cutils.c (oct_strptime): Delete.
+	* oct-time.cc (octave_strptime::init): Call strptime, not oct_strptime.
+
 2010-01-28  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dMatrix.cc (Matrix::determinant): Treat matrices marked as singular
 	normally.
 	* fMatrix.cc (FloatMatrix::determinant): Ditto.
 	* CMatrix.cc (ComplexMatrix::determinant): Ditto.
 	* fCMatrix.cc (FloatComplexMatrix::determinant): Ditto.
 
diff --git a/liboctave/lo-cutils.c b/liboctave/lo-cutils.c
--- a/liboctave/lo-cutils.c
+++ b/liboctave/lo-cutils.c
@@ -50,22 +50,16 @@ Software Foundation, Inc.
 
 OCTAVE_API void
 octave_qsort (void *base, size_t n, size_t size,
               int (*cmp) (const void *, const void *))
 {
   qsort (base, n, size, cmp);
 }
 
-OCTAVE_API char *
-oct_strptime (const char *buf, const char *format, struct tm *tm)
-{
-  return (char *) strptime (buf, format, tm);
-}
-
 #if defined (__WIN32__) && ! defined (_POSIX_VERSION)
 
 #include <winsock.h>
 
 #elif ! defined (HAVE_GETHOSTNAME) && defined (HAVE_SYS_UTSNAME_H)
 
 #include <sys/utsname.h>
 
diff --git a/liboctave/lo-utils.h b/liboctave/lo-utils.h
--- a/liboctave/lo-utils.h
+++ b/liboctave/lo-utils.h
@@ -51,19 +51,16 @@ extern OCTAVE_API std::string octave_fge
 extern OCTAVE_API std::string octave_fgetl (std::FILE *, bool& eof);
 
 extern "C" OCTAVE_API int octave_gethostname (char *, int);
 
 extern "C" OCTAVE_API void
 octave_qsort (void *base, size_t n, size_t size,
               int (*cmp) (const void *, const void *));
 
-extern "C" OCTAVE_API char *
-oct_strptime (const char *buf, const char *format, struct tm *tm);
-
 extern "C" OCTAVE_API int
 octave_strcasecmp (const char *s1, const char *s2);
 
 extern "C" OCTAVE_API int
 octave_strncasecmp (const char *s1, const char *s2, size_t n);
 
 template <typename T>
 T
diff --git a/liboctave/oct-time.cc b/liboctave/oct-time.cc
--- a/liboctave/oct-time.cc
+++ b/liboctave/oct-time.cc
@@ -267,17 +267,17 @@ octave_strptime::init (const std::string
 
 #if defined (HAVE_STRUCT_TM_TM_ZONE)
   char *ps = strsave ("");
   t.tm_zone = ps;
 #endif
 
   char *p = strsave (str.c_str ());
 
-  char *q = oct_strptime (p, fmt.c_str (), &t);
+  char *q = strptime (p, fmt.c_str (), &t);
 
   // Fill in wday and yday, but only if mday is valid and the mon and year
   // are filled in, avoiding issues with mktime and invalid dates.
   if (t.tm_mday != 0 && t.tm_mon >= 0 && t.tm_year != INT_MIN)
     {
       t.tm_isdst = -1;
       mktime (&t);
     }
