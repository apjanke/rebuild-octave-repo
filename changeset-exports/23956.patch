# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1504014286 14400
#      Tue Aug 29 09:44:46 2017 -0400
# Node ID 70188fd56fe62c3fcf352999dcad3f4fc9968e79
# Parent  df49ac93f50c9b5198ef567b5b99102cbc9c0ecf
# Parent  520c3780596963a60c2f3d084ae66438911f231a
maint: Merge stable to default.

diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -355,17 +355,18 @@ Sparse<T>::Sparse (const Array<T>& a, co
           const octave_idx_type *rd = rs.raw ();
           // Count unique indices.
           octave_idx_type new_nz = 1;
           for (octave_idx_type i = 1; i < n; i++)
             new_nz += rd[i-1] != rd[i];
           // Allocate result.
           change_capacity (nzm > new_nz ? nzm : new_nz);
           xcidx (0) = 0;
-          xcidx (1) = new_nz;
+          for (octave_idx_type j = 0; j < nc; j++)
+            xcidx (j+1) = j >= c(0) ? new_nz : 0;
           octave_idx_type *rri = ridx ();
           T *rrd = data ();
 
           octave_quit ();
 
           octave_idx_type k = -1;
           octave_idx_type l = -1;
 
@@ -503,17 +504,18 @@ Sparse<T>::Sparse (const Array<T>& a, co
       const octave_idx_type *rdi = rsi.data ();
       // Count unique indices.
       octave_idx_type new_nz = 1;
       for (octave_idx_type i = 1; i < n; i++)
         new_nz += rd[i-1] != rd[i];
       // Allocate result.
       change_capacity (nzm > new_nz ? nzm : new_nz);
       xcidx (0) = 0;
-      xcidx (1) = new_nz;
+      for (octave_idx_type j = 0; j < nc; j++)
+        xcidx (j+1) = j >= c(0) ? new_nz : 0;
       octave_idx_type *rri = ridx ();
       T *rrd = data ();
 
       octave_quit ();
 
       octave_idx_type k = 0;
       rri[k] = rd[0];
       rrd[k] = a(rdi[0]);
@@ -640,16 +642,22 @@ Sparse<T>::Sparse (const Array<T>& a, co
                 }
             }
         }
 
       maybe_compress (true);
     }
 }
 
+/*
+%!assert <51880> (sparse (1:2, 2, 1:2, 2, 2), sparse ([0, 1; 0, 2]))
+%!assert <51880> (sparse (1:2, 1, 1:2, 2, 2), sparse ([1, 0; 2, 0]))
+%!assert <51880> (sparse (1:2, 2, 1:2, 2, 3), sparse ([0, 1, 0; 0, 2, 0]))
+*/
+
 template <typename T>
 Sparse<T>::Sparse (const Array<T>& a)
   : rep (nullptr), dimensions (a.dims ())
 {
   if (dimensions.ndims () > 2)
     (*current_liboctave_error_handler)
       ("Sparse::Sparse (const Array<T>&): dimension mismatch");
 
