# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1211135011 -7200
#      Sun May 18 20:23:31 2008 +0200
# Node ID 1a446f28ce681ee0d38ebc185c3afd29a8b4768d
# Parent  776791438957c7cdd27ce674880b17a9f28cc432
implement optimized sparse-dense transposed multiplication

diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -7480,16 +7480,28 @@ operator * (const Matrix& m, const Spars
 
 ComplexMatrix
 operator * (const ComplexMatrix& m, const SparseComplexMatrix& a)
 {
   FULL_SPARSE_MUL (ComplexMatrix, Complex, Complex (0.,0.));
 }
 
 ComplexMatrix
+mul_trans (const ComplexMatrix& m, const SparseComplexMatrix& a)
+{
+  FULL_SPARSE_MUL_TRANS (ComplexMatrix, Complex, Complex (0.,0.), );
+}
+
+ComplexMatrix
+mul_herm (const ComplexMatrix& m, const SparseComplexMatrix& a)
+{
+  FULL_SPARSE_MUL_TRANS (ComplexMatrix, Complex, Complex (0.,0.), conj);
+}
+
+ComplexMatrix
 operator * (const SparseComplexMatrix& m, const Matrix& a)
 {
   SPARSE_FULL_MUL (ComplexMatrix, double, Complex (0.,0.));
 }
 
 ComplexMatrix
 operator * (const SparseMatrix& m, const ComplexMatrix& a)
 {
@@ -7497,16 +7509,28 @@ operator * (const SparseMatrix& m, const
 }
 
 ComplexMatrix
 operator * (const SparseComplexMatrix& m, const ComplexMatrix& a)
 {
   SPARSE_FULL_MUL (ComplexMatrix, Complex, Complex (0.,0.));
 }
 
+ComplexMatrix
+trans_mul (const SparseComplexMatrix& m, const ComplexMatrix& a)
+{
+  SPARSE_FULL_TRANS_MUL (ComplexMatrix, Complex, Complex (0.,0.), );
+}
+
+ComplexMatrix
+herm_mul (const SparseComplexMatrix& m, const ComplexMatrix& a)
+{
+  SPARSE_FULL_TRANS_MUL (ComplexMatrix, Complex, Complex (0.,0.), conj);
+}
+
 // FIXME -- it would be nice to share code among the min/max
 // functions below.
 
 #define EMPTY_RETURN_CHECK(T) \
   if (nr == 0 || nc == 0) \
     return T (nr, nc);
 
 SparseComplexMatrix
diff --git a/liboctave/CSparse.h b/liboctave/CSparse.h
--- a/liboctave/CSparse.h
+++ b/liboctave/CSparse.h
@@ -443,23 +443,31 @@ extern OCTAVE_API SparseComplexMatrix op
 				       const SparseComplexMatrix&);
 
 extern OCTAVE_API ComplexMatrix operator * (const Matrix&,        
 				       const SparseComplexMatrix&);
 extern OCTAVE_API ComplexMatrix operator * (const ComplexMatrix&, 
 				       const SparseMatrix&);
 extern OCTAVE_API ComplexMatrix operator * (const ComplexMatrix&, 
 				       const SparseComplexMatrix&);
+extern OCTAVE_API ComplexMatrix mul_trans (const ComplexMatrix&, 
+				       const SparseComplexMatrix&);
+extern OCTAVE_API ComplexMatrix mul_herm (const ComplexMatrix&, 
+				       const SparseComplexMatrix&);
 
 extern OCTAVE_API ComplexMatrix operator * (const SparseMatrix&,        
 				       const ComplexMatrix&);
 extern OCTAVE_API ComplexMatrix operator * (const SparseComplexMatrix&, 
 				       const Matrix&);
 extern OCTAVE_API ComplexMatrix operator * (const SparseComplexMatrix&, 
 				       const ComplexMatrix&);
+extern OCTAVE_API ComplexMatrix trans_mul (const SparseComplexMatrix&, 
+				       const ComplexMatrix&);
+extern OCTAVE_API ComplexMatrix herm_mul (const SparseComplexMatrix&, 
+				       const ComplexMatrix&);
 
 extern OCTAVE_API SparseComplexMatrix min (const Complex& c, 
 				const SparseComplexMatrix& m);
 extern OCTAVE_API SparseComplexMatrix min (const SparseComplexMatrix& m, 
 				const Complex& c);
 extern OCTAVE_API SparseComplexMatrix min (const SparseComplexMatrix& a, 
 				const SparseComplexMatrix& b);
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,21 @@
 2008-05-21  Jaroslav Hajek <highegg@gmail.com>
 
+	* Sparse-op-defs.h (SPARSE_FULL_MUL): Simplify scalar*matrix case.
+	Correct indenting. 
+	(SPARSE_FULL_TRANS_MUL): New macro.
+	(FULL_SPARSE_MUL): Simplify scalar*matrix case. Correct indenting.
+	Move OCTAVE_QUIT one level up.
+	(FULL_SPARSE_MUL_TRANS): New macro.
+	* dSparse.h (mul_trans, trans_mul): Provide decl.
+	* dSparse.cc (mul_trans, trans_mul): New functions.
+	* CSparse.h (mul_trans, trans_mul, mul_herm, herm_mul): Provide decl.
+	* CSparse.cc (mul_trans, trans_mul, mul_herm, herm_mul): New functions.
+
 	* dMatrix.h (xgemm): Provide decl.
 	* dMatrix.cc (xgemm): New function.
 	(operator * (const Matrix&, const Matrix&)): Simplify.
 	(get_blas_trans_arg): New function.
 	* CMatrix.h (xgemm): Provide decl.
 	* CMatrix.cc (xgemm): New function.
 	(operator * (const ComplexMatrix&, const ComplexMatrix&)): Simplify.
 	(get_blas_trans_arg): New function.
diff --git a/liboctave/Sparse-op-defs.h b/liboctave/Sparse-op-defs.h
--- a/liboctave/Sparse-op-defs.h
+++ b/liboctave/Sparse-op-defs.h
@@ -1899,90 +1899,145 @@ along with Octave; see the file COPYING.
   octave_idx_type nr = m.rows (); \
   octave_idx_type nc = m.cols (); \
   \
   octave_idx_type a_nr = a.rows (); \
   octave_idx_type a_nc = a.cols (); \
   \
   if (nr == 1 && nc == 1) \
     { \
-      RET_TYPE retval (a_nr, a_nc, ZERO); \
-      for (octave_idx_type i = 0; i < a_nc ; i++) \
-	{ \
-	  for (octave_idx_type j = 0; j < a_nr; j++) \
-	    { \
-              OCTAVE_QUIT; \
-	      retval.elem (j,i) += a.elem(j,i) * m.elem(0,0); \
-	    } \
-        } \
+      RET_TYPE retval = m.elem (0,0) * a; \
       return retval; \
     } \
   else if (nc != a_nr) \
     { \
       gripe_nonconformant ("operator *", nr, nc, a_nr, a_nc); \
       return RET_TYPE (); \
     } \
   else \
     { \
       RET_TYPE retval (nr, a_nc, ZERO); \
       \
       for (octave_idx_type i = 0; i < a_nc ; i++) \
-	{ \
-	  for (octave_idx_type j = 0; j < a_nr; j++) \
-	    { \
+        { \
+          for (octave_idx_type j = 0; j < a_nr; j++) \
+            { \
               OCTAVE_QUIT; \
-	      \
+              \
               EL_TYPE tmpval = a.elem(j,i); \
-	      for (octave_idx_type k = m.cidx(j) ; k < m.cidx(j+1); k++) \
-	        retval.elem (m.ridx(k),i) += tmpval * m.data(k); \
-	    } \
+              for (octave_idx_type k = m.cidx(j) ; k < m.cidx(j+1); k++) \
+                retval.elem (m.ridx(k),i) += tmpval * m.data(k); \
+            } \
+        } \
+      return retval; \
+    }
+
+#define SPARSE_FULL_TRANS_MUL( RET_TYPE, EL_TYPE, ZERO, CONJ_OP ) \
+  octave_idx_type nr = m.rows (); \
+  octave_idx_type nc = m.cols (); \
+  \
+  octave_idx_type a_nr = a.rows (); \
+  octave_idx_type a_nc = a.cols (); \
+  \
+  if (nr == 1 && nc == 1) \
+    { \
+      RET_TYPE retval = CONJ_OP (m.elem(0,0)) * a; \
+      return retval; \
+    } \
+  else if (nr != a_nr) \
+    { \
+      gripe_nonconformant ("operator *", nc, nr, a_nr, a_nc); \
+      return RET_TYPE (); \
+    } \
+  else \
+    { \
+      RET_TYPE retval (nc, a_nc); \
+      \
+      for (octave_idx_type i = 0; i < a_nc ; i++) \
+        { \
+          for (octave_idx_type j = 0; j < nc; j++) \
+            { \
+              OCTAVE_QUIT; \
+              \
+              EL_TYPE acc = ZERO; \
+              for (octave_idx_type k = m.cidx(j) ; k < m.cidx(j+1); k++) \
+                acc += a.elem (m.ridx(k),i) * CONJ_OP (m.data(k)); \
+              retval.xelem (j,i) = acc; \
+            } \
         } \
       return retval; \
     }
 
 #define FULL_SPARSE_MUL( RET_TYPE, EL_TYPE, ZERO ) \
   octave_idx_type nr = m.rows (); \
   octave_idx_type nc = m.cols (); \
   \
   octave_idx_type a_nr = a.rows (); \
   octave_idx_type a_nc = a.cols (); \
   \
   if (a_nr == 1 && a_nc == 1) \
     { \
-      RET_TYPE retval (nr, nc, ZERO); \
-      for (octave_idx_type i = 0; i < nc ; i++) \
-	{ \
-	  for (octave_idx_type j = 0; j < nr; j++) \
-	    { \
-              OCTAVE_QUIT; \
-	      retval.elem (j,i) += a.elem(0,0) * m.elem(j,i); \
-	    } \
-        } \
+      RET_TYPE retval = m * a.elem (0,0); \
       return retval; \
     } \
   else if (nc != a_nr) \
     { \
       gripe_nonconformant ("operator *", nr, nc, a_nr, a_nc); \
       return RET_TYPE (); \
     } \
   else \
     { \
       RET_TYPE retval (nr, a_nc, ZERO); \
       \
       for (octave_idx_type i = 0; i < a_nc ; i++) \
-	{ \
-	   for (octave_idx_type j = a.cidx(i); j < a.cidx(i+1); j++) \
-	     { \
-	        octave_idx_type col = a.ridx(j); \
-	        EL_TYPE tmpval = a.data(j); \
-                OCTAVE_QUIT; \
-	        \
-	        for (octave_idx_type k = 0 ; k < nr; k++) \
-	          retval.elem (k,i) += tmpval * m.elem(k,col); \
-	    } \
+        { \
+          OCTAVE_QUIT; \
+          for (octave_idx_type j = a.cidx(i); j < a.cidx(i+1); j++) \
+            { \
+              octave_idx_type col = a.ridx(j); \
+              EL_TYPE tmpval = a.data(j); \
+              \
+              for (octave_idx_type k = 0 ; k < nr; k++) \
+                retval.xelem (k,i) += tmpval * m.elem(k,col); \
+            } \
+        } \
+      return retval; \
+    }
+
+#define FULL_SPARSE_MUL_TRANS( RET_TYPE, EL_TYPE, ZERO, CONJ_OP ) \
+  octave_idx_type nr = m.rows (); \
+  octave_idx_type nc = m.cols (); \
+  \
+  octave_idx_type a_nr = a.rows (); \
+  octave_idx_type a_nc = a.cols (); \
+  \
+  if (a_nr == 1 && a_nc == 1) \
+    { \
+      RET_TYPE retval = m * CONJ_OP (a.elem(0,0)); \
+      return retval; \
+    } \
+  else if (nc != a_nc) \
+    { \
+      gripe_nonconformant ("operator *", nr, nc, a_nc, a_nr); \
+      return RET_TYPE (); \
+    } \
+  else \
+    { \
+      RET_TYPE retval (nr, a_nr, ZERO); \
+      \
+      for (octave_idx_type i = 0; i < a_nc ; i++) \
+        { \
+          OCTAVE_QUIT; \
+          for (octave_idx_type j = a.cidx(i); j < a.cidx(i+1); j++) \
+            { \
+              octave_idx_type col = a.ridx(j); \
+              EL_TYPE tmpval = CONJ_OP (a.data(j)); \
+              for (octave_idx_type k = 0 ; k < nr; k++) \
+                retval.xelem (k,col) += tmpval * m.elem(k,i); \
+            } \
         } \
       return retval; \
     }
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -7592,21 +7592,33 @@ operator * (const SparseMatrix& m, const
 
 Matrix
 operator * (const Matrix& m, const SparseMatrix& a)
 {
   FULL_SPARSE_MUL (Matrix, double, 0.);
 }
 
 Matrix
+mul_trans (const Matrix& m, const SparseMatrix& a)
+{
+  FULL_SPARSE_MUL_TRANS (Matrix, double, 0., );
+}
+
+Matrix
 operator * (const SparseMatrix& m, const Matrix& a)
 {
   SPARSE_FULL_MUL (Matrix, double, 0.);
 }
 
+Matrix
+trans_mul (const SparseMatrix& m, const Matrix& a)
+{
+  SPARSE_FULL_TRANS_MUL (Matrix, double, 0., );
+}
+
 // FIXME -- it would be nice to share code among the min/max
 // functions below.
 
 #define EMPTY_RETURN_CHECK(T) \
   if (nr == 0 || nc == 0) \
     return T (nr, nc);
 
 SparseMatrix
diff --git a/liboctave/dSparse.h b/liboctave/dSparse.h
--- a/liboctave/dSparse.h
+++ b/liboctave/dSparse.h
@@ -427,18 +427,22 @@ extern OCTAVE_API SparseMatrix real (con
 extern OCTAVE_API SparseMatrix imag (const SparseComplexMatrix& a);
 
 // Other operators.
 
 extern OCTAVE_API SparseMatrix operator * (const SparseMatrix& a, 
 				const SparseMatrix& b);
 extern OCTAVE_API Matrix operator * (const Matrix& a, 
 				const SparseMatrix& b);
+extern OCTAVE_API Matrix mul_trans (const Matrix& a, 
+				const SparseMatrix& b);
 extern OCTAVE_API Matrix operator * (const SparseMatrix& a, 
 				const Matrix& b);
+extern OCTAVE_API Matrix trans_mul (const SparseMatrix& a, 
+				const Matrix& b);
 
 extern OCTAVE_API SparseMatrix min (double d, const SparseMatrix& m);
 extern OCTAVE_API SparseMatrix min (const SparseMatrix& m, double d);
 extern OCTAVE_API SparseMatrix min (const SparseMatrix& a, const SparseMatrix& b);
 
 extern OCTAVE_API SparseMatrix max (double d, const SparseMatrix& m);
 extern OCTAVE_API SparseMatrix max (const SparseMatrix& m, double d);
 extern OCTAVE_API SparseMatrix max (const SparseMatrix& a, const SparseMatrix& b);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
 2008-05-21  Jaroslav Hajek <highegg@gmail.com>
 
+	* OPERATORS/op-sm-m.cc (trans_mul): New function.
+	(install_sm_m_ops): Register it.
+	* OPERATORS/op-m-sm.cc (mul_trans): New function.
+	(install_m_sm_ops): Register it.
+	* OPERATORS/op-scm-cm.cc (trans_mul, herm_mul): New function.
+	(install_scm_cm_ops): Register it.
+	* OPERATORS/op-cm-scm.cc (mul_trans, mul_herm): New function.
+	(install_cm_scm_ops): Register it.
+
 	* dMatrix.cc: Declare DSYRK.
 	(xgemm): Call DSYRK if symmetric case detected.
 	* CMatrix.cc: Declare ZSYRK, ZHERK.
 	(xgemm): Call ZSYRK/ZHERK if symmetric/hermitian case detected.
 
 	* ov.h (octave_value::compound_binary_op): New enum.
 	(do_binary_op (octave_value::compound_binary_op, ...), 
 	octave_value::binary_op_fcn_name (compound_binary_op),
diff --git a/src/OPERATORS/op-cm-scm.cc b/src/OPERATORS/op-cm-scm.cc
--- a/src/OPERATORS/op-cm-scm.cc
+++ b/src/OPERATORS/op-cm-scm.cc
@@ -86,16 +86,19 @@ DEFBINOP (ldiv, complex_matrix, sparse_c
   
   ComplexMatrix ret = xleftdiv (v1.complex_matrix_value (), 
 				v2.complex_matrix_value (), typ);
 
   v1.matrix_type (typ);
   return ret;
 }
 
+DEFBINOP_FN (mul_trans, complex_matrix, sparse_complex_matrix, mul_trans);
+DEFBINOP_FN (mul_herm, complex_matrix, sparse_complex_matrix, mul_herm);
+
 DEFBINOP_FN (lt, complex_matrix, sparse_complex_matrix, mx_el_lt)
 DEFBINOP_FN (le, complex_matrix, sparse_complex_matrix, mx_el_le)
 DEFBINOP_FN (eq, complex_matrix, sparse_complex_matrix, mx_el_eq)
 DEFBINOP_FN (ge, complex_matrix, sparse_complex_matrix, mx_el_ge)
 DEFBINOP_FN (gt, complex_matrix, sparse_complex_matrix, mx_el_gt)
 DEFBINOP_FN (ne, complex_matrix, sparse_complex_matrix, mx_el_ne)
 
 DEFBINOP_FN (el_mul, complex_matrix, sparse_complex_matrix, product)
@@ -153,16 +156,20 @@ install_cm_scm_ops (void)
   INSTALL_BINOP (op_mul, octave_complex_matrix, 
 		 octave_sparse_complex_matrix, mul);
   INSTALL_BINOP (op_div, octave_complex_matrix, 
 		 octave_sparse_complex_matrix, div);
   INSTALL_BINOP (op_pow, octave_complex_matrix, 
 		 octave_sparse_complex_matrix, pow);
   INSTALL_BINOP (op_ldiv, octave_complex_matrix, 
 		 octave_sparse_complex_matrix, ldiv);
+  INSTALL_BINOP (op_mul_trans, octave_complex_matrix, 
+                 octave_sparse_complex_matrix, mul_trans);
+  INSTALL_BINOP (op_mul_herm, octave_complex_matrix, 
+                 octave_sparse_complex_matrix, mul_herm);
   INSTALL_BINOP (op_lt, octave_complex_matrix, 
 		 octave_sparse_complex_matrix, lt);
   INSTALL_BINOP (op_le, octave_complex_matrix, 
 		 octave_sparse_complex_matrix, le);
   INSTALL_BINOP (op_eq, octave_complex_matrix, 
 		 octave_sparse_complex_matrix, eq);
   INSTALL_BINOP (op_ge, octave_complex_matrix, 
 		 octave_sparse_complex_matrix, ge);
diff --git a/src/OPERATORS/op-m-sm.cc b/src/OPERATORS/op-m-sm.cc
--- a/src/OPERATORS/op-m-sm.cc
+++ b/src/OPERATORS/op-m-sm.cc
@@ -82,16 +82,18 @@ DEFBINOP (ldiv, matrix, sparse_matrix)
   MatrixType typ = v1.matrix_type ();
   
   Matrix ret = xleftdiv (v1.matrix_value (), v2.matrix_value (), typ);
 
   v1.matrix_type (typ);
   return ret;
 }
 
+DEFBINOP_FN (mul_trans, matrix, sparse_matrix, mul_trans);
+
 DEFBINOP_FN (lt, matrix, sparse_matrix, mx_el_lt)
 DEFBINOP_FN (le, matrix, sparse_matrix, mx_el_le)
 DEFBINOP_FN (eq, matrix, sparse_matrix, mx_el_eq)
 DEFBINOP_FN (ge, matrix, sparse_matrix, mx_el_ge)
 DEFBINOP_FN (gt, matrix, sparse_matrix, mx_el_gt)
 DEFBINOP_FN (ne, matrix, sparse_matrix, mx_el_ne)
 
 DEFBINOP_FN (el_mul, matrix, sparse_matrix, product)
@@ -135,16 +137,18 @@ void
 install_m_sm_ops (void)
 {
   INSTALL_BINOP (op_add, octave_matrix, octave_sparse_matrix, add);
   INSTALL_BINOP (op_sub, octave_matrix, octave_sparse_matrix, sub);
   INSTALL_BINOP (op_mul, octave_matrix, octave_sparse_matrix, mul);
   INSTALL_BINOP (op_div, octave_matrix, octave_sparse_matrix, div);
   INSTALL_BINOP (op_pow, octave_matrix, octave_sparse_matrix, pow);
   INSTALL_BINOP (op_ldiv, octave_matrix, octave_sparse_matrix, ldiv);
+  INSTALL_BINOP (op_mul_trans, octave_matrix, octave_sparse_matrix, mul_trans);
+  INSTALL_BINOP (op_mul_herm, octave_matrix, octave_sparse_matrix, mul_trans);
   INSTALL_BINOP (op_lt, octave_matrix, octave_sparse_matrix, lt);
   INSTALL_BINOP (op_le, octave_matrix, octave_sparse_matrix, le);
   INSTALL_BINOP (op_eq, octave_matrix, octave_sparse_matrix, eq);
   INSTALL_BINOP (op_ge, octave_matrix, octave_sparse_matrix, ge);
   INSTALL_BINOP (op_gt, octave_matrix, octave_sparse_matrix, gt);
   INSTALL_BINOP (op_ne, octave_matrix, octave_sparse_matrix, ne);
   INSTALL_BINOP (op_el_mul, octave_matrix, octave_sparse_matrix, el_mul);
   INSTALL_BINOP (op_el_div, octave_matrix, octave_sparse_matrix, el_div);
diff --git a/src/OPERATORS/op-scm-cm.cc b/src/OPERATORS/op-scm-cm.cc
--- a/src/OPERATORS/op-scm-cm.cc
+++ b/src/OPERATORS/op-scm-cm.cc
@@ -85,16 +85,19 @@ DEFBINOP (ldiv, sparse_complex_matrix, c
       ComplexMatrix ret = xleftdiv (v1.sparse_complex_matrix_value (), 
 		      v2.complex_matrix_value (), typ);
 
       v1.matrix_type (typ);
       return ret;
     }
 }
 
+DEFBINOP_FN (trans_mul, sparse_complex_matrix, complex_matrix, trans_mul);
+DEFBINOP_FN (herm_mul, sparse_complex_matrix, complex_matrix, herm_mul);
+
 DEFBINOP_FN (lt, sparse_complex_matrix, complex_matrix, mx_el_lt)
 DEFBINOP_FN (le, sparse_complex_matrix, complex_matrix, mx_el_le)
 DEFBINOP_FN (eq, sparse_complex_matrix, complex_matrix, mx_el_eq)
 DEFBINOP_FN (ge, sparse_complex_matrix, complex_matrix, mx_el_ge)
 DEFBINOP_FN (gt, sparse_complex_matrix, complex_matrix, mx_el_gt)
 DEFBINOP_FN (ne, sparse_complex_matrix, complex_matrix, mx_el_ne)
 
 DEFBINOP_FN (el_mul, sparse_complex_matrix, complex_matrix, product)
@@ -151,16 +154,20 @@ install_scm_cm_ops (void)
   INSTALL_BINOP (op_mul, octave_sparse_complex_matrix, 
 		 octave_complex_matrix, mul);
   INSTALL_BINOP (op_div, octave_sparse_complex_matrix, 
 		 octave_complex_matrix, div);
   INSTALL_BINOP (op_pow, octave_sparse_complex_matrix, 
 		 octave_complex_matrix, pow);
   INSTALL_BINOP (op_ldiv, octave_sparse_complex_matrix, 
 		 octave_complex_matrix, ldiv);
+  INSTALL_BINOP (op_trans_mul, octave_sparse_complex_matrix, 
+                 octave_complex_matrix, trans_mul);
+  INSTALL_BINOP (op_herm_mul, octave_sparse_complex_matrix, 
+                 octave_complex_matrix, herm_mul);
   INSTALL_BINOP (op_lt, octave_sparse_complex_matrix, 
 		 octave_complex_matrix, lt);
   INSTALL_BINOP (op_le, octave_sparse_complex_matrix, 
 		 octave_complex_matrix, le);
   INSTALL_BINOP (op_eq, octave_sparse_complex_matrix, 
 		 octave_complex_matrix, eq);
   INSTALL_BINOP (op_ge, octave_sparse_complex_matrix, 
 		 octave_complex_matrix, ge);
diff --git a/src/OPERATORS/op-sm-m.cc b/src/OPERATORS/op-sm-m.cc
--- a/src/OPERATORS/op-sm-m.cc
+++ b/src/OPERATORS/op-sm-m.cc
@@ -83,16 +83,18 @@ DEFBINOP (ldiv, sparse_matrix, matrix)
       Matrix ret = xleftdiv (v1.sparse_matrix_value (), 
 			     v2.matrix_value (), typ);
 
       v1.matrix_type (typ);
       return ret;
     }
 }
 
+DEFBINOP_FN (trans_mul, sparse_matrix, matrix, trans_mul);
+
 DEFBINOP_FN (lt, sparse_matrix, matrix, mx_el_lt)
 DEFBINOP_FN (le, sparse_matrix, matrix, mx_el_le)
 DEFBINOP_FN (eq, sparse_matrix, matrix, mx_el_eq)
 DEFBINOP_FN (ge, sparse_matrix, matrix, mx_el_ge)
 DEFBINOP_FN (gt, sparse_matrix, matrix, mx_el_gt)
 DEFBINOP_FN (ne, sparse_matrix, matrix, mx_el_ne)
 
 DEFBINOP_FN (el_mul, sparse_matrix, matrix, product)
@@ -137,16 +139,18 @@ void
 install_sm_m_ops (void)
 {
   INSTALL_BINOP (op_add, octave_sparse_matrix, octave_matrix, add);
   INSTALL_BINOP (op_sub, octave_sparse_matrix, octave_matrix, sub);
   INSTALL_BINOP (op_mul, octave_sparse_matrix, octave_matrix, mul);
   INSTALL_BINOP (op_div, octave_sparse_matrix, octave_matrix, div);
   INSTALL_BINOP (op_pow, octave_sparse_matrix, octave_matrix, pow);
   INSTALL_BINOP (op_ldiv, octave_sparse_matrix, octave_matrix, ldiv);
+  INSTALL_BINOP (op_trans_mul, octave_sparse_matrix, octave_matrix, trans_mul);
+  INSTALL_BINOP (op_herm_mul, octave_sparse_matrix, octave_matrix, trans_mul);
   INSTALL_BINOP (op_lt, octave_sparse_matrix, octave_matrix, lt);
   INSTALL_BINOP (op_le, octave_sparse_matrix, octave_matrix, le);
   INSTALL_BINOP (op_eq, octave_sparse_matrix, octave_matrix, eq);
   INSTALL_BINOP (op_ge, octave_sparse_matrix, octave_matrix, ge);
   INSTALL_BINOP (op_gt, octave_sparse_matrix, octave_matrix, gt);
   INSTALL_BINOP (op_ne, octave_sparse_matrix, octave_matrix, ne);
   INSTALL_BINOP (op_el_mul, octave_sparse_matrix, octave_matrix, el_mul);
   INSTALL_BINOP (op_el_div, octave_sparse_matrix, octave_matrix, el_div);
