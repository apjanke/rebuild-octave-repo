# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1547063412 18000
#      Wed Jan 09 14:50:12 2019 -0500
# Node ID 32890ede698c9754cf116cc210f0069a81910cb5
# Parent  7da6136d3ecde8cc1b524fe44839db6b89b97be8
# Parent  4d6392c879d7e0661a2e895272a1df28072339c6
maint: Merge stable to default.

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -256,17 +256,20 @@ namespace QtHandles
             redraw (true);
           }
       }
   }
 
   static void
   autoscale_axes (axes::properties& ap)
   {
-    ap.clear_zoom_stack ();
+    gh_manager::auto_lock lock;
+
+    // Reset zoom stack
+    ap.clear_zoom_stack (false);
 
     ap.set_xlimmode ("auto");
     ap.set_ylimmode ("auto");
     ap.set_zlimmode ("auto");
   }
 
   void
   Canvas::canvasAutoAxes (const graphics_handle& handle)
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -493,18 +493,22 @@ namespace octave
     parser (FILE *file, interpreter& interp)
       : base_parser (*(new lexer (file, interp)))
     { }
 
     parser (const std::string& eval_string, interpreter& interp)
       : base_parser (*(new lexer (eval_string, interp)))
     { }
 
-    parser (lexer& lxr)
-      : base_parser (lxr)
+    // The lexer must be allocated with new.  The parser object
+    // takes ownership of and deletes the lexer object in its
+    // destructor.
+
+    parser (lexer *lxr)
+      : base_parser (*lxr)
     { }
 
     // No copying!
 
     parser (const parser&) = delete;
 
     parser& operator = (const parser&) = delete;
 
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -72,42 +72,43 @@ namespace octave
     m_lvalue_list_stack.clear ();
     m_nargout_stack.clear ();
   }
 
   int tree_evaluator::repl (bool interactive)
   {
     int retval = 0;
 
-    lexer *lxr = (interactive
-                  ? new lexer (m_interpreter)
-                  : new lexer (stdin, m_interpreter));
-
-    parser parser (*lxr);
+    // The parser takes ownership of the lexer and will delete it when
+    // the parser goes out of scope.
+
+    parser repl_parser (interactive
+                        ? new lexer (m_interpreter)
+                        : new lexer (stdin, m_interpreter));
 
     symbol_table& symtab = m_interpreter.get_symbol_table ();
 
     do
       {
         try
           {
             reset_error_handler ();
 
-            parser.reset ();
+            repl_parser.reset ();
 
             if (symtab.at_top_level ())
               reset_debug_state ();
 
-            retval = parser.run ();
+            retval = repl_parser.run ();
 
             if (retval == 0)
               {
-                if (parser.m_stmt_list)
+                if (repl_parser.m_stmt_list)
                   {
-                    parser.m_stmt_list->accept (*this);
+                    repl_parser.m_stmt_list->accept (*this);
 
                     octave_quit ();
 
                     if (! interactive)
                       {
                         bool quit = (m_returning || m_breaking);
 
                         if (m_returning)
@@ -120,17 +121,17 @@ namespace octave
                           break;
                       }
 
                     if (octave_completion_matches_called)
                       octave_completion_matches_called = false;
                     else
                       command_editor::increment_current_command_number ();
                   }
-                else if (parser.m_lexer.m_end_of_input)
+                else if (repl_parser.m_lexer.m_end_of_input)
                   {
                     retval = EOF;
                     break;
                   }
               }
           }
         catch (const interrupt_exception&)
           {
@@ -185,44 +186,41 @@ namespace octave
     if (retval == EOF)
       {
         if (interactive)
           octave_stdout << "\n";
 
         retval = 0;
       }
 
-    // Clean up memory
-    delete lxr;
-
     return retval;
   }
 
   octave_value_list
   tree_evaluator::eval_string (const std::string& eval_str, bool silent,
                                int& parse_status, int nargout)
   {
     octave_value_list retval;
 
-    parser parser (eval_str, m_interpreter);
+    parser eval_parser (eval_str, m_interpreter);
 
     do
       {
-        parser.reset ();
-
-        parse_status = parser.run ();
+        eval_parser.reset ();
+
+        parse_status = eval_parser.run ();
 
         if (parse_status == 0)
           {
-            if (parser.m_stmt_list)
+            if (eval_parser.m_stmt_list)
               {
                 tree_statement *stmt = nullptr;
 
-                if (parser.m_stmt_list->length () == 1
-                    && (stmt = parser.m_stmt_list->front ())
+                if (eval_parser.m_stmt_list->length () == 1
+                    && (stmt = eval_parser.m_stmt_list->front ())
                     && stmt->is_expression ())
                   {
                     tree_expression *expr = stmt->expression ();
 
                     if (silent)
                       expr->set_print_flag (false);
 
                     bool do_bind_ans = false;
@@ -246,24 +244,24 @@ namespace octave
 
                     if (do_bind_ans && ! retval.empty ())
                       bind_ans (retval(0), expr->print_result ());
 
                     if (nargout == 0)
                       retval = octave_value_list ();
                   }
                 else if (nargout == 0)
-                  parser.m_stmt_list->accept (*this);
+                  eval_parser.m_stmt_list->accept (*this);
                 else
                   error ("eval: invalid use of statement list");
 
                 if (returning () || breaking () || continuing ())
                   break;
               }
-            else if (parser.m_lexer.m_end_of_input)
+            else if (eval_parser.m_lexer.m_end_of_input)
               break;
           }
       }
     while (parse_status == 0);
 
     return retval;
   }
 
