# HG changeset patch
# User jwe
# Date 1158199846 0
#      Thu Sep 14 02:10:46 2006 +0000
# Node ID e049385342f6003849aef7775494924feb293972
# Parent  d9ce802628e6cb30fcb6e708b1ef6550755795a9
[project @ 2006-09-14 02:10:46 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2006-09-13  Christopher Hulbert  <cchgroupmail@gmail.com>
+
+	* run-octave.in (LD_LIBRARY_PATH): Also append LD_LIBRARY_PATH
+	from environment.
+
 2006-08-25  Alexander Barth  <abarth@marine.usf.edu>
 
 	* mkoctfile.in: Accept .f90 and .F90 as Fortran files.
 	Pass $incflags and $defs to Fortran compiler.
 
 2006-08-18  John W. Eaton  <jwe@octave.org>
 
 	* Makeconf.in (do-subst-texinfo-vals): Don't substitute
diff --git a/run-octave.in b/run-octave.in
--- a/run-octave.in
+++ b/run-octave.in
@@ -23,11 +23,11 @@ if [ $# -gt 0 ]; then
     driver="valgrind --tool=memcheck"
     shift
   elif [ "x$1" = "x-strace" ]; then
     driver="strace -o octave.trace"
     shift
   fi
 fi
 OCTAVE_SITE_INITFILE=$top_srcdir/scripts/startup/main-rcfile \
-LD_LIBRARY_PATH="$builddir/src:$builddir/liboctave:$builddir/libcruft" \
+LD_LIBRARY_PATH="$builddir/src:$builddir/liboctave:$builddir/libcruft:$LD_LIBRARY_PATH" \
   exec $driver $builddir/src/octave $args "$@"
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2006-09-13  John W. Eaton  <jwe@octave.org>
+
+	* general/blkdiag.m: Adjust to new cellfun rules.
+
 2006-08-30  David Bateman <dbateman@free.fr>
 
 	* pkg/pkg.m (install): Disallow bundles of packages. More verbose
 	error message for archive name not matching package name.
 	(installed_packages): Size header of printed results to
 	arguments. Sort the list of installed packages before printing
 	them.
 
diff --git a/scripts/general/blkdiag.m b/scripts/general/blkdiag.m
--- a/scripts/general/blkdiag.m
+++ b/scripts/general/blkdiag.m
@@ -27,28 +27,29 @@
 ## Modified by: William Poetra Yoga Hadisoeseno
 
 function retval = blkdiag (varargin)
 
   if (nargin < 1)
     usage ("blkdiag (a, b, c, ...)");
   endif
 
-  if (! all (cell2mat (cellfun (@isnumeric, varargin))))
+  if (! all (cellfun (@isnumeric, varargin)))
     error ("blkdiag: all arguments must be numeric");
   endif
 
   ## Note: trailing singletons are automatically (correctly) ignored.
   if (! all (cellfun ("ndims", varargin) == 2))
     error ("blkdiag: all arguments must be two-dimensional matrices");
   endif
 
   ## size is an option for cellfun, but it's a bit different from
   ## calling size directly.
-  csz = cumsum ([0 0; (cell2mat (cellfun (@size, varargin')))], 1);
+  tmp = cell2mat (cellfun (@size, varargin', "UniformOutput", false));
+  csz = cumsum ([0 0; tmp], 1);
   retval = zeros (csz(end,:));
 
   for p = 1:nargin
     retval((csz(p,1)+1):csz(p+1,1),(csz(p,2)+1):csz(p+1,2)) = varargin{p};
   endfor
 
 endfunction
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,16 +1,33 @@
-2006-08-22  David Bateman  <dbateman@free.fr>
+2006-09-13  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/cellfun.cc: Improve error message for uniform
+	output case when results are not scalars.  Avoid shadow decls.
+
+2006-09-13  David Bateman <dbateman@free.fr>
+
+	* ov-scalar.h (octave_scalar::sparse_matrix_value,
+	octave_scalar::sparse_complex_matrix_value): New extractor functions.
+	* ov-complex.h (octave_complex::sparse_matrix_value,
+	octave_complex::sparse_complex_matrix_value): Ditto.
+	* DLD-FUNCTIONS/spkron.cc (Fspkron): Change example in help.
+
+2006-09-12  John W. Eaton  <jwe@octave.org>
+
+	* error.cc (warning_1): Call error_2, not error.
+
+2006-09-12  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/cellfun.cc (Fcellfun): Allow matlab compatiable
-	'UniformOutput' and 'ErrorHandler' options. Change output when
+	'UniformOutput' and 'ErrorHandler' options.  Change output when
 	called with function handler or inline function to by default have
-	'UniformOutput' set to true. Allow functions with multiple inputs
-	and outputs. Add test code. Replace some int with octave_idx_type.
-	(Fnum2cell): Replace some int with octave_idx_type. Add test code.
+	'UniformOutput' set to true.  Allow functions with multiple inputs
+	and outputs. Add test code.  Replace some int with octave_idx_type.
+	(Fnum2cell): Replace some int with octave_idx_type.  Add test code.
 	
 2006-09-11  Yozo Hida  <yozo@cs.berkeley.edu>
 
 	* DLD-FUNCTIONS/gcd.cc (Fgcd): Extend range by using std::floor
 	instead of converting to int.
 
 2006-09-05  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -269,17 +269,16 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
 	}
 
       if (! func)
 	error ("unknown function");
       else
 	{
 	  octave_value_list idx;
 	  octave_value_list inputlist;
-	  octave_value_list errlist;
 	  bool UniformOutput = true;
 	  bool haveErrorHandler = false;
 	  std::string err_name;
 	  octave_function *ErrorHandler;
 	  int offset = 1;
 	  int i = 1;
 	  OCTAVE_LOCAL_BUFFER (Cell, inputs, nargin);
 
@@ -353,18 +352,18 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
 	    buffer_error_messages++;
 
 	  if (UniformOutput)
 	    {
 	      retval.resize(nargout);
 
 	      for (octave_idx_type count = 0; count < k ; count++)
 		{
-		  for (int i = 0; i < nargin-offset; i++)
-		    inputlist(i) = inputs[i](count);
+		  for (int j = 0; j < nargin-offset; j++)
+		    inputlist(j) = inputs[j](count);
 
 		  octave_value_list tmp = feval (func, inputlist, nargout);
 
 		  if (error_state && haveErrorHandler)
 		    {
 		      octave_value_list errtmp = 
 			Flasterr (octave_value_list (), 2);
 
@@ -389,52 +388,62 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
 		      goto cellfun_err;
 		    }
 
 		  if (error_state)
 		    break;
 
 		  if (count == 0)
 		    {
-		      for (int i = 0; i < nargout; i++)
+		      for (int j = 0; j < nargout; j++)
 			{
 			  octave_value val;
-			  val = tmp(i);
+			  val = tmp(j);
 
 			  if (error_state)
 			    goto cellfun_err;
 
 			  val.resize(f_args.dims());
-			  retval(i) = val;
+			  retval(j) = val;
 			}
 		    }
 		  else
 		    {
 		      idx(0) = octave_value (static_cast<double>(count+1));
-		      for (int i = 0; i < nargout; i++)
-			retval(i) = 
-			  retval(i).subsasgn ("(", 
-					      std::list<octave_value_list> 
-					      (1, idx(0)), tmp(i));
+		      for (int j = 0; j < nargout; j++)
+			{
+			  // FIXME -- need an easier way to express
+			  // this test.
+			  octave_value val = tmp(j);
+
+			  if (val.ndims () == 2
+			      && val.rows () == 1 && val.columns () == 1)
+			    retval(j) = 
+			      retval(j).subsasgn ("(", 
+						  std::list<octave_value_list> 
+						  (1, idx(0)), val);
+			  else
+			    error ("cellfun: expecting all values to be scalars for UniformOutput = true");
+			}
 		    }
 
 		  if (error_state)
 		    break;
 		}
 	    }
 	  else
 	    {
 	      OCTAVE_LOCAL_BUFFER (Cell, results, nargout);
-	      for (int i = 0; i < nargout; i++)
-		results[i].resize(f_args.dims());
+	      for (int j = 0; j < nargout; j++)
+		results[j].resize(f_args.dims());
 
 	      for (octave_idx_type count = 0; count < k ; count++)
 		{
-		  for (int i = 0; i < nargin-offset; i++)
-		    inputlist(i) = inputs[i](count);
+		  for (int j = 0; j < nargin-offset; j++)
+		    inputlist(j) = inputs[j](count);
 
 		  octave_value_list tmp = feval (func, inputlist, nargout);
 
 		  if (error_state && haveErrorHandler)
 		    {
 		      octave_value_list errtmp = 
 			Flasterr (octave_value_list (), 2);
 
@@ -458,23 +467,23 @@ cellfun (@@factorial, @{-1,2@},'ErrorHan
 		      error ("cellfun: too many output arguments");
 		      goto cellfun_err;
 		    }
 
 		  if (error_state)
 		    break;
 
 
-		  for (int i = 0; i < nargout; i++)
-		    results[i](count) = tmp(i);
+		  for (int j = 0; j < nargout; j++)
+		    results[j](count) = tmp(j);
 		}
 
 	      retval.resize(nargout);
-	      for (int i = 0; i < nargout; i++)
-		retval(i) = results[i];
+	      for (int j = 0; j < nargout; j++)
+		retval(j) = results[j];
 	    }
 
 	cellfun_err:
 	  if (error_state)
 	    retval = octave_value_list();
 
 	  if (! fcn_name.empty ())
 	    clear_function (fcn_name);
diff --git a/src/DLD-FUNCTIONS/spkron.cc b/src/DLD-FUNCTIONS/spkron.cc
--- a/src/DLD-FUNCTIONS/spkron.cc
+++ b/src/DLD-FUNCTIONS/spkron.cc
@@ -90,20 +90,29 @@ block by block as\n\
 @example\n\
 x = [a(i, j) b]\n\
 @end example\n\
 \n\
 For example,\n\
 \n\
 @example\n\
 @group\n\
-kron (1:4, ones (3, 1))\n\
-      @result{}  1  2  3  4\n\
-          1  2  3  4\n\
-          1  2  3  4\n\
+kron(speye(3),spdiag([1,2,3]))\n\
+@result{}\n\
+Compressed Column Sparse (rows = 9, cols = 9, nnz = 9)\n\
+\n\
+  (1, 1) ->  1\n\
+  (2, 2) ->  2\n\
+  (3, 3) ->  3\n\
+  (4, 4) ->  1\n\
+  (5, 5) ->  2\n\
+  (6, 6) ->  3\n\
+  (7, 7) ->  1\n\
+  (8, 8) ->  2\n\
+  (9, 9) ->  3\n\
 @end group\n\
 @end example\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -99,16 +99,22 @@ public:
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
 
   NDArray array_value (bool = false) const;
 
+  SparseMatrix sparse_matrix_value (bool = false) const
+    { return SparseMatrix (matrix_value ()); }
+
+  SparseComplexMatrix sparse_complex_matrix_value (bool = false) const
+    { return SparseComplexMatrix (complex_matrix_value ()); }
+
   octave_value resize (const dim_vector& dv, bool fill = false) const;
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   ComplexNDArray complex_array_value (bool = false) const;
 
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -137,16 +137,23 @@ public:
   double scalar_value (bool = false) const { return scalar; }
 
   Matrix matrix_value (bool = false) const
     { return Matrix (1, 1, scalar); }
 
   NDArray array_value (bool = false) const
     { return NDArray (dim_vector (1, 1), scalar); }
 
+  SparseMatrix sparse_matrix_value (bool = false) const
+    { return SparseMatrix (Matrix (1, 1, scalar)); }
+
+  // XXX FIXME XXX Need SparseComplexMatrix (Matrix) constructor!!!
+  SparseComplexMatrix sparse_complex_matrix_value (bool = false) const
+    { return SparseComplexMatrix (sparse_matrix_value ()); }
+
   octave_value resize (const dim_vector& dv, bool fill = false) const;
 
   Complex complex_value (bool = false) const { return scalar; }
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return  ComplexMatrix (1, 1, Complex (scalar)); }
 
   ComplexNDArray complex_array_value (bool = false) const
