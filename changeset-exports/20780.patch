# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1448939042 18000
#      Mon Nov 30 22:04:02 2015 -0500
# Node ID 92958b1ee10004ea797832eef5233c5c05e494ef
# Parent  b6af3f77d1bd3ee53d705effabd5b2fe9a540d10
restore stack traces to error messages

* error.cc (make_execution_exception): New static function.
(usage_1, error_1): Use it to create an octave_execution_object that
contains stack trace info.

diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -277,16 +277,30 @@ pr_where (std::ostream& os, const char *
       int line = elt.line ();
       int column = elt.column ();
 
       pr_where_1 (os, "    %s at line %d column %d\n",
                   fcn_name.c_str (), line, column);
     }
 }
 
+static octave_execution_exception
+make_execution_exception (const char *who)
+{
+  std::ostringstream buf;
+
+  pr_where (buf, who);
+
+  octave_execution_exception retval;
+
+  retval.set_stack_trace (buf.str ());
+
+  return retval;
+}
+
 static void
 debug_or_throw_exception (const octave_execution_exception& e,
                           bool show_stack_trace = false)
 {
   if ((interactive || forced_interactive)
       && Vdebug_on_error && octave_call_stack::caller_user_code ())
     {
       unwind_protect frame;
@@ -381,19 +395,17 @@ usage_1 (const octave_execution_exceptio
   verror (true, std::cerr, "usage", id, fmt, args);
 
   debug_or_throw_exception (e);
 }
 
 static void
 usage_1 (const char *id, const char *fmt, va_list args)
 {
-  octave_execution_exception e;
-
-  usage_1 (e, id, fmt, args);
+  usage_1 (make_execution_exception ("usage"), id, fmt, args);
 }
 
 void
 vusage (const char *fmt, va_list args)
 {
   usage_1 ("", fmt, args);
 }
 
@@ -463,19 +475,18 @@ error_1 (const octave_execution_exceptio
 
   debug_or_throw_exception (e, show_stack_trace);
 }
 
 static void
 error_1 (std::ostream& os, const char *name, const char *id,
          const char *fmt, va_list args, bool with_cfn = false)
 {
-  octave_execution_exception e;
-
-  error_1 (e, os, name, id, fmt, args, with_cfn);
+  error_1 (make_execution_exception ("error"), os, name, id, fmt,
+           args, with_cfn);
 }
 
 void
 verror (const char *fmt, va_list args)
 {
   error_1 (std::cerr, "error", "", fmt, args);
 }
 
