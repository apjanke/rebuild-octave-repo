# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1235018043 18000
#      Wed Feb 18 23:34:03 2009 -0500
# Node ID 20dfb885f877be11f33985e69203bd8fc87e977a
# Parent  c9e1db15035bec3c76766796db24db0f7ae3c76e
int -> octave_idx fixes

diff --git a/liboctave/CDiagMatrix.cc b/liboctave/CDiagMatrix.cc
--- a/liboctave/CDiagMatrix.cc
+++ b/liboctave/CDiagMatrix.cc
@@ -350,22 +350,22 @@ ComplexDiagMatrix::column (char *s) cons
       (*current_liboctave_error_handler) ("invalid column selection");
       return ComplexColumnVector (); 
     }
 }
 
 ComplexDiagMatrix
 ComplexDiagMatrix::inverse (void) const
 {
-  int info;
+  octave_idx_type info;
   return inverse (info);
 }
 
 ComplexDiagMatrix
-ComplexDiagMatrix::inverse (int& info) const
+ComplexDiagMatrix::inverse (octave_idx_type& info) const
 {
   octave_idx_type r = rows ();
   octave_idx_type c = cols ();
   if (r != c)
     {
       (*current_liboctave_error_handler) ("inverse requires square matrix");
       return ComplexDiagMatrix ();
     }
diff --git a/liboctave/CDiagMatrix.h b/liboctave/CDiagMatrix.h
--- a/liboctave/CDiagMatrix.h
+++ b/liboctave/CDiagMatrix.h
@@ -105,17 +105,17 @@ public:
   // extract row or column i
 
   ComplexRowVector row (octave_idx_type i) const;
   ComplexRowVector row (char *s) const;
 
   ComplexColumnVector column (octave_idx_type i) const;
   ComplexColumnVector column (char *s) const;
 
-  ComplexDiagMatrix inverse (int& info) const;
+  ComplexDiagMatrix inverse (octave_idx_type& info) const;
   ComplexDiagMatrix inverse (void) const;
 
   bool all_elements_are_real (void) const;
 
   // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
   ComplexDiagMatrix& operator += (const DiagMatrix& a);
   ComplexDiagMatrix& operator -= (const DiagMatrix& a);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,29 @@
 2009-02-18  John W. Eaton  <jwe@octave.org>
 
+	* dbleQR.cc (QR::init, QR::form): Cast int to octave_idx_type in
+	call to std::max.
+	* floatQR.cc (FloatQR::init, FloatQR::form): Ditto.
+	* CmplxQR.cc (ComplexQR::init, ComplexQR::form): Ditto.
+	* fCmplxQR.cc (FloatComplexQR::init, FloatComplexQR::form): Ditto.
+
+	* dbleQRP.cc (QRP::init): Cast int to octave_idx_type in call to
+	std::max and as operand to -= operator.
+	* CmplxQRP.cc (ComplexQRP::init): Ditto.
+	* floatQRP.cc (FloatQRP::init): Ditto.
+	* fCmplxQRP.cc (FloatComplexQRP::init): Ditto.
+
+	* CDiagMatrix.cc, CDiagMatrix.h (ComplexDiagMatrix::inverse):
+	Declare info as octave_idx_type, not int.
+	* dDiagMatrix.cc, dDiagMatrix.h (DiagMatrix::inverse): Ditto.
+	* fDiagMatrix.cc, fCDiagMatrix.h (FloatDiagMatrix::inverse): Ditto.
+	* fCDiagMatrix.cc, fCDiagMatrix.h (FloatComplexDiagMatrix::inverse):
+	Ditto.
+
 	* dMatrix.cc (Matrix::determinant):
 	Declare local variables volatile as needed to avoid "maybe
 	clobbered by vfork" warning from GCC.
 	* fMatrix.cc (FloatMatrix::determinant): Likewise.
 	* CMatrix.cc (ComplexMatrix::determinant): Likewise.
 	* fCMatrix.cc (FloatComplexMatrix::determinant): Likewise.
 	* dbleQR.cc (QR::update, QR::insert_col, QR::delete_col): Likewise.
 	* floatQR.cc (FloatQR::update, FloatQR::insert_col,
diff --git a/liboctave/CmplxQR.cc b/liboctave/CmplxQR.cc
--- a/liboctave/CmplxQR.cc
+++ b/liboctave/CmplxQR.cc
@@ -105,17 +105,18 @@ ComplexQR::init (const ComplexMatrix& a,
 
   if (m > 0)
     {
       // workspace query.
       Complex clwork;
       F77_XFCN (zgeqrf, ZGEQRF, (m, n, afact.fortran_vec (), m, tau, &clwork, -1, info));
 
       // allocate buffer and do the job.
-      octave_idx_type lwork = clwork.real (); lwork = std::max (lwork, 1);
+      octave_idx_type lwork = clwork.real ();
+      lwork = std::max (lwork, static_cast<octave_idx_type> (1));
       OCTAVE_LOCAL_BUFFER (Complex, work, lwork);
       F77_XFCN (zgeqrf, ZGEQRF, (m, n, afact.fortran_vec (), m, tau, work, lwork, info));
     }
 
   form (n, afact, tau, qr_type);
 }
 
 void ComplexQR::form (octave_idx_type n, ComplexMatrix& afact, 
@@ -172,17 +173,18 @@ void ComplexQR::form (octave_idx_type n,
         {
           octave_idx_type k = q.columns ();
           // workspace query.
           Complex clwork;
           F77_XFCN (zungqr, ZUNGQR, (m, k, min_mn, q.fortran_vec (), m, tau,
                                      &clwork, -1, info));
 
           // allocate buffer and do the job.
-          octave_idx_type lwork = clwork.real (); lwork = std::max (lwork, 1);
+          octave_idx_type lwork = clwork.real ();
+	  lwork = std::max (lwork, static_cast<octave_idx_type> (1));
           OCTAVE_LOCAL_BUFFER (Complex, work, lwork);
           F77_XFCN (zungqr, ZUNGQR, (m, k, min_mn, q.fortran_vec (), m, tau,
                                      work, lwork, info));
         }
     }
 }
 
 ComplexQR::ComplexQR (const ComplexMatrix& q_arg, const ComplexMatrix& r_arg)
diff --git a/liboctave/CmplxQRP.cc b/liboctave/CmplxQRP.cc
--- a/liboctave/CmplxQRP.cc
+++ b/liboctave/CmplxQRP.cc
@@ -72,28 +72,29 @@ ComplexQRP::init (const ComplexMatrix& a
       OCTAVE_LOCAL_BUFFER (double, rwork, 2*n);
 
       // workspace query.
       Complex clwork;
       F77_XFCN (zgeqp3, ZGEQP3, (m, n, afact.fortran_vec (), m, jpvt.fortran_vec (),
                                  tau, &clwork, -1, rwork, info));
 
       // allocate buffer and do the job.
-      octave_idx_type lwork = clwork.real (); lwork = std::max (lwork, 1);
+      octave_idx_type lwork = clwork.real ();
+      lwork = std::max (lwork, static_cast<octave_idx_type> (1));
       OCTAVE_LOCAL_BUFFER (Complex, work, lwork);
       F77_XFCN (zgeqp3, ZGEQP3, (m, n, afact.fortran_vec (), m, jpvt.fortran_vec (),
                                  tau, work, lwork, rwork, info));
     }
   else
     for (octave_idx_type i = 0; i < n; i++) jpvt(i) = i+1;
 
   // Form Permutation matrix (if economy is requested, return the
   // indices only!)
 
-  jpvt -= 1;
+  jpvt -= static_cast<octave_idx_type> (1);
   p = PermMatrix (jpvt, true);
 
 
   form (n, afact, tau, qr_type);
 }
 
 ColumnVector
 ComplexQRP::Pvec (void) const
diff --git a/liboctave/dDiagMatrix.cc b/liboctave/dDiagMatrix.cc
--- a/liboctave/dDiagMatrix.cc
+++ b/liboctave/dDiagMatrix.cc
@@ -265,22 +265,22 @@ DiagMatrix::column (char *s) const
       (*current_liboctave_error_handler) ("invalid column selection");
       return ColumnVector (); 
     }
 }
 
 DiagMatrix
 DiagMatrix::inverse (void) const
 {
-  int info;
+  octave_idx_type info;
   return inverse (info);
 }
 
 DiagMatrix
-DiagMatrix::inverse (int &info) const
+DiagMatrix::inverse (octave_idx_type &info) const
 {
   octave_idx_type r = rows ();
   octave_idx_type c = cols ();
   octave_idx_type len = length ();
   if (r != c)
     {
       (*current_liboctave_error_handler) ("inverse requires square matrix");
       return DiagMatrix ();
diff --git a/liboctave/dDiagMatrix.h b/liboctave/dDiagMatrix.h
--- a/liboctave/dDiagMatrix.h
+++ b/liboctave/dDiagMatrix.h
@@ -88,17 +88,17 @@ public:
 
   RowVector row (octave_idx_type i) const;
   RowVector row (char *s) const;
 
   ColumnVector column (octave_idx_type i) const;
   ColumnVector column (char *s) const;
 
   DiagMatrix inverse (void) const;
-  DiagMatrix inverse (int& info) const;
+  DiagMatrix inverse (octave_idx_type& info) const;
 
   // other operations
 
   ColumnVector diag (octave_idx_type k = 0) const
     { return MDiagArray2<double>::diag (k); }
 
   DET determinant (void) const;
   double rcond (void) const;
diff --git a/liboctave/dbleQR.cc b/liboctave/dbleQR.cc
--- a/liboctave/dbleQR.cc
+++ b/liboctave/dbleQR.cc
@@ -103,17 +103,18 @@ QR::init (const Matrix& a, QR::type qr_t
 
   if (m > 0)
     {
       // workspace query.
       double rlwork;
       F77_XFCN (dgeqrf, DGEQRF, (m, n, afact.fortran_vec (), m, tau, &rlwork, -1, info));
 
       // allocate buffer and do the job.
-      octave_idx_type lwork = rlwork; lwork = std::max (lwork, 1);
+      octave_idx_type lwork = rlwork;
+      lwork = std::max (lwork, static_cast<octave_idx_type> (1));
       OCTAVE_LOCAL_BUFFER (double, work, lwork);
       F77_XFCN (dgeqrf, DGEQRF, (m, n, afact.fortran_vec (), m, tau, work, lwork, info));
     }
 
   form (n, afact, tau, qr_type);
 }
 
 void QR::form (octave_idx_type n, Matrix& afact, 
@@ -170,17 +171,18 @@ void QR::form (octave_idx_type n, Matrix
         {
           octave_idx_type k = q.columns ();
           // workspace query.
           double rlwork;
           F77_XFCN (dorgqr, DORGQR, (m, k, min_mn, q.fortran_vec (), m, tau,
                                      &rlwork, -1, info));
 
           // allocate buffer and do the job.
-          octave_idx_type lwork = rlwork; lwork = std::max (lwork, 1);
+          octave_idx_type lwork = rlwork;
+	  lwork = std::max (lwork, static_cast<octave_idx_type> (1));
           OCTAVE_LOCAL_BUFFER (double, work, lwork);
           F77_XFCN (dorgqr, DORGQR, (m, k, min_mn, q.fortran_vec (), m, tau,
                                      work, lwork, info));
         }
     }
 }
 
 QR::QR (const Matrix& q_arg, const Matrix& r_arg)
diff --git a/liboctave/dbleQRP.cc b/liboctave/dbleQRP.cc
--- a/liboctave/dbleQRP.cc
+++ b/liboctave/dbleQRP.cc
@@ -70,28 +70,29 @@ QRP::init (const Matrix& a, QR::type qr_
   if (m > 0)
     {
       // workspace query.
       double rlwork;
       F77_XFCN (dgeqp3, DGEQP3, (m, n, afact.fortran_vec (), m, jpvt.fortran_vec (),
                                  tau, &rlwork, -1, info));
 
       // allocate buffer and do the job.
-      octave_idx_type lwork = rlwork; lwork = std::max (lwork, 1);
+      octave_idx_type lwork = rlwork;
+      lwork = std::max (lwork, static_cast<octave_idx_type> (1));
       OCTAVE_LOCAL_BUFFER (double, work, lwork);
       F77_XFCN (dgeqp3, DGEQP3, (m, n, afact.fortran_vec (), m, jpvt.fortran_vec (),
                                  tau, work, lwork, info));
     }
   else
     for (octave_idx_type i = 0; i < n; i++) jpvt(i) = i+1;
 
   // Form Permutation matrix (if economy is requested, return the
   // indices only!)
 
-  jpvt -= 1;
+  jpvt -= static_cast<octave_idx_type> (1);
   p = PermMatrix (jpvt, true);
 
 
   form (n, afact, tau, qr_type);
 }
 
 ColumnVector
 QRP::Pvec (void) const
diff --git a/liboctave/fCDiagMatrix.cc b/liboctave/fCDiagMatrix.cc
--- a/liboctave/fCDiagMatrix.cc
+++ b/liboctave/fCDiagMatrix.cc
@@ -350,22 +350,22 @@ FloatComplexDiagMatrix::column (char *s)
       (*current_liboctave_error_handler) ("invalid column selection");
       return FloatComplexColumnVector (); 
     }
 }
 
 FloatComplexDiagMatrix
 FloatComplexDiagMatrix::inverse (void) const
 {
-  int info;
+  octave_idx_type info;
   return inverse (info);
 }
 
 FloatComplexDiagMatrix
-FloatComplexDiagMatrix::inverse (int& info) const
+FloatComplexDiagMatrix::inverse (octave_idx_type& info) const
 {
   octave_idx_type r = rows ();
   octave_idx_type c = cols ();
   if (r != c)
     {
       (*current_liboctave_error_handler) ("inverse requires square matrix");
       return FloatComplexDiagMatrix ();
     }
diff --git a/liboctave/fCDiagMatrix.h b/liboctave/fCDiagMatrix.h
--- a/liboctave/fCDiagMatrix.h
+++ b/liboctave/fCDiagMatrix.h
@@ -105,17 +105,17 @@ public:
   // extract row or column i
 
   FloatComplexRowVector row (octave_idx_type i) const;
   FloatComplexRowVector row (char *s) const;
 
   FloatComplexColumnVector column (octave_idx_type i) const;
   FloatComplexColumnVector column (char *s) const;
 
-  FloatComplexDiagMatrix inverse (int& info) const;
+  FloatComplexDiagMatrix inverse (octave_idx_type& info) const;
   FloatComplexDiagMatrix inverse (void) const;
 
   bool all_elements_are_real (void) const;
 
   // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
   FloatComplexDiagMatrix& operator += (const FloatDiagMatrix& a);
   FloatComplexDiagMatrix& operator -= (const FloatDiagMatrix& a);
diff --git a/liboctave/fCmplxQR.cc b/liboctave/fCmplxQR.cc
--- a/liboctave/fCmplxQR.cc
+++ b/liboctave/fCmplxQR.cc
@@ -105,17 +105,18 @@ FloatComplexQR::init (const FloatComplex
 
   if (m > 0)
     {
       // workspace query.
       FloatComplex clwork;
       F77_XFCN (cgeqrf, CGEQRF, (m, n, afact.fortran_vec (), m, tau, &clwork, -1, info));
 
       // allocate buffer and do the job.
-      octave_idx_type lwork = clwork.real (); lwork = std::max (lwork, 1);
+      octave_idx_type lwork = clwork.real ();
+      lwork = std::max (lwork, static_cast<octave_idx_type> (1));
       OCTAVE_LOCAL_BUFFER (FloatComplex, work, lwork);
       F77_XFCN (cgeqrf, CGEQRF, (m, n, afact.fortran_vec (), m, tau, work, lwork, info));
     }
 
   form (n, afact, tau, qr_type);
 }
 
 void FloatComplexQR::form (octave_idx_type n, FloatComplexMatrix& afact, 
@@ -172,17 +173,18 @@ void FloatComplexQR::form (octave_idx_ty
         {
           octave_idx_type k = q.columns ();
           // workspace query.
           FloatComplex clwork;
           F77_XFCN (cungqr, CUNGQR, (m, k, min_mn, q.fortran_vec (), m, tau,
                                      &clwork, -1, info));
 
           // allocate buffer and do the job.
-          octave_idx_type lwork = clwork.real (); lwork = std::max (lwork, 1);
+          octave_idx_type lwork = clwork.real ();
+	  lwork = std::max (lwork, static_cast<octave_idx_type> (1));
           OCTAVE_LOCAL_BUFFER (FloatComplex, work, lwork);
           F77_XFCN (cungqr, CUNGQR, (m, k, min_mn, q.fortran_vec (), m, tau,
                                      work, lwork, info));
         }
     }
 }
 
 FloatComplexQR::FloatComplexQR (const FloatComplexMatrix& q_arg, const FloatComplexMatrix& r_arg)
diff --git a/liboctave/fCmplxQRP.cc b/liboctave/fCmplxQRP.cc
--- a/liboctave/fCmplxQRP.cc
+++ b/liboctave/fCmplxQRP.cc
@@ -72,28 +72,29 @@ FloatComplexQRP::init (const FloatComple
       OCTAVE_LOCAL_BUFFER (float, rwork, 2*n);
 
       // workspace query.
       FloatComplex clwork;
       F77_XFCN (cgeqp3, CGEQP3, (m, n, afact.fortran_vec (), m, jpvt.fortran_vec (),
                                  tau, &clwork, -1, rwork, info));
 
       // allocate buffer and do the job.
-      octave_idx_type lwork = clwork.real (); lwork = std::max (lwork, 1);
+      octave_idx_type lwork = clwork.real ();
+      lwork = std::max (lwork, static_cast<octave_idx_type> (1));
       OCTAVE_LOCAL_BUFFER (FloatComplex, work, lwork);
       F77_XFCN (cgeqp3, CGEQP3, (m, n, afact.fortran_vec (), m, jpvt.fortran_vec (),
                                  tau, work, lwork, rwork, info));
     }
   else
     for (octave_idx_type i = 0; i < n; i++) jpvt(i) = i+1;
 
   // Form Permutation matrix (if economy is requested, return the
   // indices only!)
 
-  jpvt -= 1;
+  jpvt -= static_cast<octave_idx_type> (1);
   p = PermMatrix (jpvt, true);
 
 
   form (n, afact, tau, qr_type);
 }
 
 FloatColumnVector
 FloatComplexQRP::Pvec (void) const
diff --git a/liboctave/fDiagMatrix.cc b/liboctave/fDiagMatrix.cc
--- a/liboctave/fDiagMatrix.cc
+++ b/liboctave/fDiagMatrix.cc
@@ -265,22 +265,22 @@ FloatDiagMatrix::column (char *s) const
       (*current_liboctave_error_handler) ("invalid column selection");
       return FloatColumnVector (); 
     }
 }
 
 FloatDiagMatrix
 FloatDiagMatrix::inverse (void) const
 {
-  int info;
+  octave_idx_type info;
   return inverse (info);
 }
 
 FloatDiagMatrix
-FloatDiagMatrix::inverse (int &info) const
+FloatDiagMatrix::inverse (octave_idx_type &info) const
 {
   octave_idx_type r = rows ();
   octave_idx_type c = cols ();
   octave_idx_type len = length ();
   if (r != c)
     {
       (*current_liboctave_error_handler) ("inverse requires square matrix");
       return FloatDiagMatrix ();
diff --git a/liboctave/fDiagMatrix.h b/liboctave/fDiagMatrix.h
--- a/liboctave/fDiagMatrix.h
+++ b/liboctave/fDiagMatrix.h
@@ -88,17 +88,17 @@ public:
 
   FloatRowVector row (octave_idx_type i) const;
   FloatRowVector row (char *s) const;
 
   FloatColumnVector column (octave_idx_type i) const;
   FloatColumnVector column (char *s) const;
 
   FloatDiagMatrix inverse (void) const;
-  FloatDiagMatrix inverse (int& info) const;
+  FloatDiagMatrix inverse (octave_idx_type& info) const;
 
   // other operations
 
   FloatColumnVector diag (octave_idx_type k = 0) const
     { return MDiagArray2<float>::diag (k); }
 
   FloatDET determinant (void) const;
   float rcond (void) const;
diff --git a/liboctave/floatQR.cc b/liboctave/floatQR.cc
--- a/liboctave/floatQR.cc
+++ b/liboctave/floatQR.cc
@@ -103,17 +103,18 @@ FloatQR::init (const FloatMatrix& a, QR:
 
   if (m > 0)
     {
       // workspace query.
       float rlwork;
       F77_XFCN (sgeqrf, SGEQRF, (m, n, afact.fortran_vec (), m, tau, &rlwork, -1, info));
 
       // allocate buffer and do the job.
-      octave_idx_type lwork = rlwork; lwork = std::max (lwork, 1);
+      octave_idx_type lwork = rlwork;
+      lwork = std::max (lwork, static_cast<octave_idx_type> (1));
       OCTAVE_LOCAL_BUFFER (float, work, lwork);
       F77_XFCN (sgeqrf, SGEQRF, (m, n, afact.fortran_vec (), m, tau, work, lwork, info));
     }
 
   form (n, afact, tau, qr_type);
 }
 
 void FloatQR::form (octave_idx_type n, FloatMatrix& afact, 
@@ -170,17 +171,18 @@ void FloatQR::form (octave_idx_type n, F
         {
           octave_idx_type k = q.columns ();
           // workspace query.
           float rlwork;
           F77_XFCN (sorgqr, SORGQR, (m, k, min_mn, q.fortran_vec (), m, tau,
                                      &rlwork, -1, info));
 
           // allocate buffer and do the job.
-          octave_idx_type lwork = rlwork; lwork = std::max (lwork, 1);
+          octave_idx_type lwork = rlwork;
+	  lwork = std::max (lwork, static_cast<octave_idx_type> (1));
           OCTAVE_LOCAL_BUFFER (float, work, lwork);
           F77_XFCN (sorgqr, SORGQR, (m, k, min_mn, q.fortran_vec (), m, tau,
                                      work, lwork, info));
         }
     }
 }
 
 FloatQR::FloatQR (const FloatMatrix& q_arg, const FloatMatrix& r_arg)
diff --git a/liboctave/floatQRP.cc b/liboctave/floatQRP.cc
--- a/liboctave/floatQRP.cc
+++ b/liboctave/floatQRP.cc
@@ -70,28 +70,29 @@ FloatQRP::init (const FloatMatrix& a, QR
   if (m > 0)
     {
       // workspace query.
       float rlwork;
       F77_XFCN (sgeqp3, SGEQP3, (m, n, afact.fortran_vec (), m, jpvt.fortran_vec (),
                                  tau, &rlwork, -1, info));
 
       // allocate buffer and do the job.
-      octave_idx_type lwork = rlwork; lwork = std::max (lwork, 1);
+      octave_idx_type lwork = rlwork;
+      lwork = std::max (lwork, static_cast<octave_idx_type> (1));
       OCTAVE_LOCAL_BUFFER (float, work, lwork);
       F77_XFCN (sgeqp3, SGEQP3, (m, n, afact.fortran_vec (), m, jpvt.fortran_vec (),
                                  tau, work, lwork, info));
     }
   else
     for (octave_idx_type i = 0; i < n; i++) jpvt(i) = i+1;
 
   // Form Permutation matrix (if economy is requested, return the
   // indices only!)
 
-  jpvt -= 1;
+  jpvt -= static_cast<octave_idx_type> (1);
   p = PermMatrix (jpvt, true);
 
 
   form (n, afact, tau, qr_type);
 }
 
 FloatColumnVector
 FloatQRP::Pvec (void) const
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,16 @@
 2009-02-18  John W. Eaton  <jwe@octave.org>
- 
+
+	* ov.cc (convert_to_octave_idx_type_array): New static function.
+	(octave_value::octave_idx_type_vector_value): New function.
+	* ov.h (octave_value::octave_idx_type_vector_value): Provide decl.
+	* DLD-FUNCTIONS/qr.cc (Fqrdelete, Fqrinsert): Use it to convert
+	octave_value object to array of octave_idx_type values.
+
 	* DLD-FUNCTIONS/find.cc (find_nonzero_elem_idx): Likewise.
 	* DLD-FUNCTIONS/time.cc (strptime): Likewise.
 	* DLD-FUNCTIONS/quad.cc (Fquad): Eliminate unnecessary cast.
 	* toplev.cc (run_command_and_return_output): Likewise.
 
 	* strfns.cc (Fstrvcat): Use octave_idx_type and size_t instead of
 	int as needed.
 	(Fstrcmp, Fstrncmp): Use octave_idx_type instead of int as needed.
diff --git a/src/DLD-FUNCTIONS/qr.cc b/src/DLD-FUNCTIONS/qr.cc
--- a/src/DLD-FUNCTIONS/qr.cc
+++ b/src/DLD-FUNCTIONS/qr.cc
@@ -984,17 +984,18 @@ If @var{orient} is @code{\"row\"}, full 
       bool col = orient == "col";
 
       if (col || orient == "row")
         if (check_qr_dims (argq, argr, col) 
             && (col || argx.rows () == 1))
           {
             if (check_index (argj, col))
               {
-                MArray<octave_idx_type> j = argj.int_vector_value ();
+                MArray<octave_idx_type> j
+		  = argj.octave_idx_type_vector_value ();
 
                 if (argq.is_real_type () 
 		    && argr.is_real_type () 
 		    && argx.is_real_type ())
                   {
                     // real case
 		    if (argq.is_single_type () 
 			|| argr.is_single_type () 
@@ -1197,17 +1198,18 @@ If @var{orient} is @code{\"row\"}, full 
 
       bool col = orient == "col";
 
       if (col || orient == "row")
         if (check_qr_dims (argq, argr, col))
           {
             if (check_index (argj, col))
               {
-                MArray<octave_idx_type> j = argj.int_vector_value ();
+                MArray<octave_idx_type> j
+		  = argj.octave_idx_type_vector_value ();
 
                 if (argq.is_real_type ()
 		    && argr.is_real_type ())
                   {
                     // real case
 		    if (argq.is_single_type ()
 			|| argr.is_single_type ())
 		      {
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1489,16 +1489,98 @@ octave_value::int_vector_value (bool for
   if (error_state)
     return retval;
   else
     return retval.reshape (make_vector_dims (retval.dims (),
                                              force_vector_conversion,
                                              type_name (), "integer vector"));
 }
 
+template <class T>
+static Array<octave_idx_type>
+convert_to_octave_idx_type_array (const Array<octave_int<T> >& A)
+{
+  Array<octave_idx_type> retval (A.dims ());
+  octave_idx_type n = A.numel ();
+
+  octave_int<int>::clear_conv_flag ();
+  for (octave_idx_type i = 0; i < n; i++)
+    retval.xelem (i) = octave_int<octave_idx_type> (A.xelem (i));
+
+  if (octave_int<int>::get_trunc_flag ())
+    gripe_truncated_conversion (octave_int<T>::type_name (), "int");
+
+  octave_int<int>::clear_conv_flag ();
+
+  return retval;
+}
+
+Array<octave_idx_type>
+octave_value::octave_idx_type_vector_value (bool force_string_conv,
+					    bool require_int,
+					    bool force_vector_conversion) const
+{
+  Array<octave_idx_type> retval;
+
+  if (is_integer_type ())
+    {
+      if (is_int32_type ())
+        retval = convert_to_octave_idx_type_array (int32_array_value ());
+      else if (is_int64_type ())
+        retval = convert_to_octave_idx_type_array (int64_array_value ());
+      else if (is_int16_type ())
+        retval = convert_to_octave_idx_type_array (int16_array_value ());
+      else if (is_int8_type ())
+        retval = convert_to_octave_idx_type_array (int8_array_value ());
+      else if (is_uint32_type ())
+        retval = convert_to_octave_idx_type_array (uint32_array_value ());
+      else if (is_uint64_type ())
+        retval = convert_to_octave_idx_type_array (uint64_array_value ());
+      else if (is_uint16_type ())
+        retval = convert_to_octave_idx_type_array (uint16_array_value ());
+      else if (is_uint8_type ())
+        retval = convert_to_octave_idx_type_array (uint8_array_value ());
+      else
+        retval = array_value (force_string_conv);
+    }
+  else 
+    {
+      const NDArray a = array_value (force_string_conv);
+      if (! error_state)
+        {
+          if (require_int)
+            {
+              retval.resize (a.dims ());
+              for (octave_idx_type i = 0; i < a.numel (); i++)
+                {
+                  double ai = a.elem (i);
+                  octave_idx_type v = static_cast<octave_idx_type> (ai);
+                  if (ai == v)
+                    retval.xelem (i) = v;
+                  else
+                    {
+                      error ("conversion to integer value failed");
+                      break;
+                    }
+                }
+            }
+          else
+            retval = Array<octave_idx_type> (a);
+        }
+    }
+
+
+  if (error_state)
+    return retval;
+  else
+    return retval.reshape (make_vector_dims (retval.dims (),
+                                             force_vector_conversion,
+                                             type_name (), "integer vector"));
+}
+
 Array<Complex>
 octave_value::complex_vector_value (bool force_string_conv,
                                     bool force_vector_conversion) const
 {
   Array<Complex> retval = complex_array_value (force_string_conv);
 
   if (error_state)
     return retval;
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -852,16 +852,21 @@ public:
 
 
 
 
   Array<int> int_vector_value (bool req_int = false,
 			       bool frc_str_conv = false,
 			       bool frc_vec_conv = false) const;
 
+  Array<octave_idx_type>
+  octave_idx_type_vector_value (bool req_int = false,
+				bool frc_str_conv = false,
+				bool frc_vec_conv = false) const;
+
   Array<double> vector_value (bool frc_str_conv = false,
 			      bool frc_vec_conv = false) const;
 
   Array<Complex> complex_vector_value (bool frc_str_conv = false,
 				       bool frc_vec_conv = false) const;
 
   Array<float> float_vector_value (bool frc_str_conv = false,
 			      bool frc_vec_conv = false) const;
