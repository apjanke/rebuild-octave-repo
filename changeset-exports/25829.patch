# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1535477573 14400
#      Tue Aug 28 13:32:53 2018 -0400
# Branch stable
# Node ID 8ac4bfa550538c0818e1bd40d3a847507a0f4742
# Parent  b7e0ed1b2b32995ac2a7fc9ffda805a9d017d66b
restore optimization for compound transpose-mul/div ops (bug #45890)

* oct-parse.in.yy: Undo changset b5dc88246c02.

* pt-cbinop.cc (maybe_compound_binary_expression): Disable only
compound negation and elementwise and/or ops here instead of disabling
all compound binary ops.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -2641,17 +2641,17 @@ namespace octave
       default:
         panic_impossible ();
         break;
       }
 
     int l = tok_val->line ();
     int c = tok_val->column ();
 
-    return new tree_binary_expression (op1, op2, l, c, t);
+    return maybe_compound_binary_expression (op1, op2, l, c, t);
   }
 
   // Build a boolean expression.
 
   tree_expression *
   base_parser::make_boolean_op (int op, tree_expression *op1,
                                 token *tok_val, tree_expression *op2)
   {
diff --git a/libinterp/parse-tree/pt-cbinop.cc b/libinterp/parse-tree/pt-cbinop.cc
--- a/libinterp/parse-tree/pt-cbinop.cc
+++ b/libinterp/parse-tree/pt-cbinop.cc
@@ -174,20 +174,24 @@ namespace octave
       case octave_value::op_mul:
         ct = simplify_mul_op (ca, cb);
         break;
 
       case octave_value::op_ldiv:
         ct = simplify_ldiv_op (ca, cb);
         break;
 
+#if 0
+        // Restore this case if short-circuit behavior can be preserved
+        // when needed.  See bug #54465.
       case octave_value::op_el_and:
       case octave_value::op_el_or:
         ct = simplify_and_or_op (ca, cb, t);
         break;
+#endif
 
       default:
         ct = octave_value::unknown_compound_binary_op;
         break;
       }
 
     tree_binary_expression *ret
       = (ct == octave_value::unknown_compound_binary_op
