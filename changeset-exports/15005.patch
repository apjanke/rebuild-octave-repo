# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1343071421 14400
#      Mon Jul 23 15:23:41 2012 -0400
# Node ID 74c7265c057afcc2975d40753fa114c539de5823
# Parent  ea69976576142602e3314aba2987db2188948906
fix failure with function handles caused by changeset ea6997657614

* ov-fcn-handle.cc (octave_fcn_handle::set_fcn): Undo previous change.
* ov-fcn.h (octave_function::src_file_name): New virtual function.
* ov-builtin.h (octave_builtin::src_file_name): Rename from
octave_builtin::fcn_file_name.
* help.cc (do_which): Return source file name for built-in functions.

diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -1113,17 +1113,20 @@ do_which (const std::string& name, std::
             {
               file = fcn->fcn_file_name ();
 
               if (file.empty ())
                 {
                   if (fcn->is_user_function ())
                     type = "command-line function";
                   else
-                    type = "built-in function";
+                    {
+                      file = fcn->src_file_name ();
+                      type = "built-in function";
+                    }
                 }
               else
                 type = val.is_user_script ()
                   ? std::string ("script") : std::string ("function");
             }
         }
       else
         {
diff --git a/src/ov-builtin.h b/src/ov-builtin.h
--- a/src/ov-builtin.h
+++ b/src/ov-builtin.h
@@ -49,17 +49,17 @@ public:
     : octave_function (nm, ds), f (ff), file (), jtype (0) { }
 
   octave_builtin (fcn ff, const std::string& nm, const std::string& fnm,
                   const std::string& ds)
     : octave_function (nm, ds), f (ff), file (fnm), jtype (0) { }
 
   ~octave_builtin (void) { }
 
-  std::string fcn_file_name (void) const { return file; }
+  std::string src_file_name (void) const { return file; }
 
   octave_value subsref (const std::string& type,
                         const std::list<octave_value_list>& idx)
     {
       octave_value_list tmp = subsref (type, idx, 1);
       return tmp.length () > 0 ? tmp(0) : octave_value ();
     }
 
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -308,34 +308,35 @@ octave_fcn_handle::set_fcn (const std::s
             {
               error ("function handle points to non-existent function");
               success = false;
             }
         }
     }
   else
     {
-      size_t fpath_len = fpath.length ();
-
-      if ((fpath_len > 4 && fpath.substr (fpath_len-4) == ".oct")
-          || (fpath_len > 4 && fpath.substr (fpath_len-4) == ".mex")
-          || (fpath_len > 2 && fpath.substr (fpath_len-4) == ".m"))
+      if (fpath.length () > 0)
         {
           size_t xpos = fpath.find_last_of (file_ops::dir_sep_chars ());
 
           std::string dir_name = fpath.substr (0, xpos);
 
           octave_function *xfcn = load_fcn_from_file (fpath, dir_name, "", nm);
 
           if (xfcn)
             {
               octave_value tmp (xfcn);
 
               fcn = octave_value (new octave_fcn_handle (tmp, nm));
             }
+          else
+            {
+              error ("function handle points to non-existent function");
+              success = false;
+            }
         }
       else
         {
           fcn = symbol_table::find_function (nm);
 
           if (! fcn.is_function ())
             {
               error ("function handle points to non-existent function");
@@ -378,20 +379,19 @@ octave_fcn_handle::save_ascii (std::ostr
                 return os;
             }
         }
     }
   else
     {
       octave_function *f = function_value ();
       std::string fnm = f ? f->fcn_file_name () : std::string ();
-      bool is_builtin = f && f->is_builtin_function ();
 
       os << "# octaveroot: " << OCTAVE_EXEC_PREFIX << "\n";
-      if (! (is_builtin || fnm.empty ()))
+      if (! fnm.empty ())
         os << "# path: " << fnm << "\n";
       os << nm << "\n";
     }
 
   return true;
 }
 
 bool
diff --git a/src/ov-fcn.h b/src/ov-fcn.h
--- a/src/ov-fcn.h
+++ b/src/ov-fcn.h
@@ -56,16 +56,18 @@ public:
   bool is_defined (void) const { return true; }
 
   bool is_function (void) const { return true; }
 
   virtual bool is_system_fcn_file (void) const { return false; }
 
   virtual std::string fcn_file_name (void) const { return std::string (); }
 
+  virtual std::string src_file_name (void) const { return std::string (); }
+
   // The name to show in the profiler (also used as map-key).
   virtual std::string profiler_name (void) const { return name (); }
 
   virtual std::string parent_fcn_name (void) const { return std::string (); }
 
   virtual symbol_table::scope_id parent_fcn_scope (void) const { return -1; }
 
   virtual void mark_fcn_file_up_to_date (const octave_time&) { }
