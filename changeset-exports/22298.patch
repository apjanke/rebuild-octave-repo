# HG changeset patch
# User Ernst Reissner <rei3ner@arcor.de>
# Date 1471258011 -7200
#      Mon Aug 15 12:46:51 2016 +0200
# Node ID 18535a29a8e887b36767f9499417af4832091718
# Parent  bc2a5db96754f625747cf3be36f2b57e0ac459f1
doc: improve documentation on oct-parse.in.yy(feval) (patch #9082)

diff --git a/doc/interpreter/contributors.in b/doc/interpreter/contributors.in
--- a/doc/interpreter/contributors.in
+++ b/doc/interpreter/contributors.in
@@ -269,16 +269,17 @@ Jarno Rajahalme
 Eduardo Ramos
 Pooja Rao
 James B. Rawlings
 Eric S. Raymond
 Balint Reczey
 Joshua Redstone
 Lukas Reichlin
 Michael Reifenberger
+Ernst Reissner
 Jens Restemeier
 Anthony Richardson
 Jason Riedy
 E. Joshua Rigler
 Sander van Rijn
 Petter Risholm
 Matthew W. Roberts
 Dmitry Roshchin
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4760,30 +4760,37 @@ context of the function that called the 
   if (nargin == 2)
     context = args(1).xstring_value ("source: CONTEXT must be a string");
 
   source_file (file_name, context);
 
   return retval;
 }
 
-// Evaluate an Octave function (built-in or interpreted) and return
-// the list of result values.  NAME is the name of the function to
-// call.  ARGS are the arguments to the function.  NARGOUT is the
-// number of output arguments expected.
-
+/*!
+    Evaluate an Octave function (built-in or interpreted) and return
+    the list of result values.
+
+    @param name the name of the function to call.
+    @param args the arguments to the function.
+    @param nargout the number of output arguments expected.
+    @return the list of output values with length @nargout, except
+      if the function is not defined.
+*/
 octave_value_list
 feval (const std::string& name, const octave_value_list& args, int nargout)
 {
   octave_value_list retval;
 
   octave_value fcn = symbol_table::find_function (name, args);
 
   if (fcn.is_defined ())
-    retval = fcn.do_multi_index_op (nargout, args);
+    {
+       retval = fcn.do_multi_index_op (nargout, args);
+    }
   else
     {
       try
         {
           maybe_missing_function_hook (name);
         }
       catch (octave_execution_exception& e)
         {
@@ -4806,23 +4813,26 @@ feval (octave_function *fcn, const octav
 }
 
 static octave_value_list
 get_feval_args (const octave_value_list& args)
 {
   return args.slice (1, args.length () - 1, true);
 }
 
-
-// Evaluate an Octave function (built-in or interpreted) and return
-// the list of result values.  The first element of ARGS should be a
-// string containing the name of the function to call, then the rest
-// are the actual arguments to the function.  NARGOUT is the number of
-// output arguments expected.
-
+/*!
+    Evaluate an Octave function (built-in or interpreted) and return
+    the list of result values.
+
+    @param args the first element of @c args should be a string
+       containing the name of the function to call, then the rest
+       are the actual arguments to the function.
+    @param nargout the number of output arguments expected.
+    @return the list of output values with length @nargout.
+*/
 octave_value_list
 feval (const octave_value_list& args, int nargout)
 {
   octave_value_list retval;
 
   if (args.length () > 0)
     {
       octave_value f_arg = args(0);
