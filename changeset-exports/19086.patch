# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1410079640 -7200
#      Sun Sep 07 10:47:20 2014 +0200
# Node ID dc88c5784f74d5b3182c59d32ab8217d67d3a442
# Parent  bec5386bcdf550a26b4c95357caf41f8bd336175
Respect the order in which default graphics properties are set (bug #38449)

* /libinterp/corefcn/graphics.cc (xreset_default_properties): use [] operator to store new prop/val
* /libinterp/corefcn/graphics.cc: add %!test for bug #38449

* /libinterp/corefcn/graphics.in.h (pval_pair): new typedef for std::pair <std::string, octave_value>
* /libinterp/corefcn/graphics.in.h (class pval_vector): new class to keep track of the order in which prop/val pairs are stored
** const_iterator find (const std::string pname), iterator find (const std::string pname)): mimic std::map::find
** octave_value lookup (const std::string pname)): mimic std::map::lookup
** octave_value& operator [] (const std::string pname)): mimic std::map [] operator
** void erase (const std::string pname):  mimic std::map::erase
** void erase (iterator it): call std::vector <pval_pair>::erase

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2770,18 +2770,17 @@ xreset_default_properties (graphics_hand
 
       // Don't reset internal properties and handle_properties
       if (! obj.has_readonly_property (pname) &&
           pname.find ("__") != 0 && pname.find ("current") != 0 &&
           pname != "uicontextmenu" && pname != "parent")
         {
           // Store *mode prop/val in order to set them last 
           if (pname.find ("mode") == (pname.length () - 4))
-            pval.insert (std::pair<std::string, octave_value>
-                         (pname, it->second));
+            pval[pname] = it->second;
           else
             obj.set (pname, it->second);
         }
     }
 
   // set *mode properties
   for (property_list::pval_map_const_iterator it = pval.begin ();
        it != pval.end (); it++)
@@ -2814,16 +2813,32 @@ base_properties::set_from_list (base_gra
             {
               error ("error setting default property %s", pname.c_str ());
               break;
             }
         }
     }
 }
 
+/*
+## test defaults are set in the order they were stored
+%!test
+%! set(0, "defaultfigureunits", "normalized");
+%! set(0, "defaultfigureposition", [0.7 0 0.3 0.3]);
+%! hf = figure ("visible", "off");
+%! tol = 20 * eps;
+%! unwind_protect
+%!   assert (get (hf, "position"), [0.7 0 0.3 0.3], tol);
+%! unwind_protect_cleanup
+%!   close (hf);
+%!   set(0, "defaultfigureunits", "remove");
+%!   set(0, "defaultfigureposition", "remove");
+%! end_unwind_protect
+*/
+
 octave_value
 base_properties::get_dynamic (const caseless_str& name) const
 {
   octave_value retval;
 
   std::map<caseless_str, property, cmp_caseless_str>::const_iterator it =
     all_props.find (name);
 
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -1984,20 +1984,86 @@ public:
     */
 
 private:
   base_property *rep;
 };
 
 // ---------------------------------------------------------------------
 
+typedef std::pair <std::string, octave_value> pval_pair;
+
+class pval_vector : public std::vector <pval_pair>
+{
+ public:
+  const_iterator find (const std::string pname) const
+  {
+    const_iterator it;
+ 
+    for (it = (*this).begin (); it != (*this).end (); it++)
+      if (pname.compare ((*it).first) == 0)
+        return it;
+    
+    return (*this).end ();
+  }
+
+  iterator find (const std::string pname)
+  {
+    iterator it;
+ 
+    for (it = (*this).begin (); it != (*this).end (); it++)
+      if (pname.compare ((*it).first) == 0)
+        return it;
+    
+    return (*this).end ();
+  }
+  
+  octave_value lookup (const std::string pname) const
+  {
+    octave_value retval;
+
+    const_iterator it = find (pname);
+
+    if (it != (*this).end ())
+     retval = (*it).second;
+
+    return retval;
+  }
+
+  octave_value& operator [] (const std::string pname)   
+  {
+    iterator it = find (pname);
+    
+    if (it == (*this).end ())
+      {
+        push_back (pval_pair (pname, octave_value ()));
+        return (*this).back ().second;
+      }
+    
+    return (*it).second;
+  }
+
+  void erase (const std::string pname)
+  {
+    iterator it = find (pname);
+    if (it != (*this).end ())
+      erase (it);
+  }
+  
+  void erase (iterator it)
+  {
+    std::vector <pval_pair>::erase (it);
+  }
+
+};
+
 class property_list
 {
 public:
-  typedef std::map<std::string, octave_value> pval_map_type;
+  typedef pval_vector pval_map_type;
   typedef std::map<std::string, pval_map_type> plist_map_type;
 
   typedef pval_map_type::iterator pval_map_iterator;
   typedef pval_map_type::const_iterator pval_map_const_iterator;
 
   typedef plist_map_type::iterator plist_map_iterator;
   typedef plist_map_type::const_iterator plist_map_const_iterator;
 
