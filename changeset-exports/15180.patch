# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1345085786 18000
#      Wed Aug 15 21:56:26 2012 -0500
# Node ID b1b22bc50aedf9b19cc12825360723212660b7b9
# Parent  3b8275fed4dd9ba65e1ce1347850b4ea405859a1
pt-jit.h: Remove dated current status comment

diff --git a/src/interp-core/pt-jit.h b/src/interp-core/pt-jit.h
--- a/src/interp-core/pt-jit.h
+++ b/src/interp-core/pt-jit.h
@@ -24,41 +24,16 @@ along with Octave; see the file COPYING.
 #define octave_tree_jit_h 1
 
 #ifdef HAVE_LLVM
 
 #include "jit-ir.h"
 
 #include "pt-walk.h"
 
-// -------------------- Current status --------------------
-// Simple binary operations (+-*/) on octave_scalar's (doubles) are optimized.
-// a = 5;
-// b = a * 5 + a;
-//
-// Indexing matrices with scalars works.
-//
-// if, elseif, else, break, continue, and for compile. Compilation is triggered
-// at the start of a simple for loop.
-//
-// The octave low level IR is a linear IR, it works by converting everything to
-// calls to jit_operations. This turns expressions like c = a + b into
-// c = call binary+ (a, b)
-// The jit_operations contain information about overloads for different types.
-// For, example, if we know a and b are scalars, then c must also be a scalar.
-//
-// Support for function calls is in progress. Currently, calls to sin with a
-// scalar argument will compile.
-//
-// TODO:
-// 1. Function calls (In progress)
-// 2. Cleanup/documentation
-// 3. ...
-// ---------------------------------------------------------
-
 // convert between IRs
 // FIXME: Class relationships are messy from here on down. They need to be
 // cleaned up.
 class
 jit_convert : public tree_walker
 {
 public:
   typedef std::pair<jit_type *, std::string> type_bound;
