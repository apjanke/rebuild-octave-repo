# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497656010 25200
#      Fri Jun 16 16:33:30 2017 -0700
# Node ID 4feed155a1f27735beb74687cf86bdcad76e08b1
# Parent  0abe8d85eccecda7b94742dab1725f2aa69092fd
Use acosh, acoshf, asinh, asinhf, atanh, atanhf from C++ std library.
These functions are guaranteed to be part of C++11 standard library.

* configure.ac: Remove AC_CHECK_FUNCS for acosh, acoshf, asinh, asinhf, atanh,
atanhf.

* lo-specfun.cc (acosh, asinh, atanh): Map functions onto std::XXX of the same name.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2450,17 +2450,17 @@ OCTAVE_CHECK_FUNC_COMPLEX(acosh)
 OCTAVE_CHECK_FUNC_COMPLEX(asin)
 OCTAVE_CHECK_FUNC_COMPLEX(asinh)
 OCTAVE_CHECK_FUNC_COMPLEX(atan)
 OCTAVE_CHECK_FUNC_COMPLEX(atanh)
 
 ## Check for nonstandard, but common math functions, that we need.
 
 dnl Use multiple AC_CHECKs to avoid line continuations '\' in list
-AC_CHECK_FUNCS([acosh acoshf asinh asinhf atanh atanhf cbrt cbrtf])
+AC_CHECK_FUNCS([cbrt cbrtf])
 AC_CHECK_FUNCS([erf erff erfc erfcf exp2f hypotf _hypotf log2 log2f])
 
 ## Check for math defines such as M_LN2 in math.h
 AC_CACHE_CHECK([for MATH DEFINES in math.h],
   [octave_cv_header_math_defines],
   [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
     #include <math.h>
     ]], [[
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -23,16 +23,18 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
+#include <cmath>
+
 #include <algorithm>
 #include <limits>
 #include <string>
 
 #include "CColVector.h"
 #include "CMatrix.h"
 #include "CNDArray.h"
 #include "Faddeeva.hh"
@@ -54,39 +56,19 @@ along with Octave; see the file COPYING.
 #include "lo-slatec-proto.h"
 #include "lo-specfun.h"
 #include "mx-inlines.cc"
 
 namespace octave
 {
   namespace math
   {
-    double
-    acosh (double x)
-    {
-#if defined (HAVE_ACOSH)
-      return ::acosh (x);
-#else
-      double retval;
-      F77_XFCN (xdacosh, XDACOSH, (x, retval));
-      return retval;
-#endif
-    }
-
-    float
-    acosh (float x)
-    {
-#if defined (HAVE_ACOSHF)
-      return acoshf (x);
-#else
-      float retval;
-      F77_XFCN (xacosh, XACOSH, (x, retval));
-      return retval;
-#endif
-    }
+    double acosh (double x) { return std::acosh (x); }
+
+    float acosh (float x) { return std::acoshf (x); }
 
     Complex
     acosh (const Complex& x)
     {
 #if defined (HAVE_COMPLEX_STD_ACOSH)
       return std::acosh (x);
 #else
       return log (x + sqrt (x + 1.0) * sqrt (x - 1.0));
@@ -98,39 +80,19 @@ namespace octave
     {
 #if defined (HAVE_COMPLEX_STD_ACOSH)
       return std::acosh (x);
 #else
       return log (x + sqrt (x + 1.0f) * sqrt (x - 1.0f));
 #endif
     }
 
-    double
-    asinh (double x)
-    {
-#if defined (HAVE_ASINH)
-      return ::asinh (x);
-#else
-      double retval;
-      F77_XFCN (xdasinh, XDASINH, (x, retval));
-      return retval;
-#endif
-    }
-
-    float
-    asinh (float x)
-    {
-#if defined (HAVE_ASINHF)
-      return asinhf (x);
-#else
-      float retval;
-      F77_XFCN (xasinh, XASINH, (x, retval));
-      return retval;
-#endif
-    }
+    double asinh (double x) { return std::asinh (x); }
+
+    float asinh (float x) { return std::asinhf (x); }
 
     Complex
     asinh (const Complex& x)
     {
 #if defined (HAVE_COMPLEX_STD_ASINH)
       return std::asinh (x);
 #else
       return log (x + sqrt (x*x + 1.0));
@@ -142,39 +104,19 @@ namespace octave
     {
 #if defined (HAVE_COMPLEX_STD_ASINH)
       return std::asinh (x);
 #else
       return log (x + sqrt (x*x + 1.0f));
 #endif
     }
 
-    double
-    atanh (double x)
-    {
-#if defined (HAVE_ATANH)
-      return ::atanh (x);
-#else
-      double retval;
-      F77_XFCN (xdatanh, XDATANH, (x, retval));
-      return retval;
-#endif
-    }
-
-    float
-    atanh (float x)
-    {
-#if defined (HAVE_ATANHF)
-      return atanhf (x);
-#else
-      float retval;
-      F77_XFCN (xatanh, XATANH, (x, retval));
-      return retval;
-#endif
-    }
+    double atanh (double x) { return std::atanh (x); }
+
+    float atanh (float x) { return std::atanhf (x); }
 
     Complex
     atanh (const Complex& x)
     {
 #if defined (HAVE_COMPLEX_STD_ATANH)
       return std::atanh (x);
 #else
       return log ((1.0 + x) / (1.0 - x)) / 2.0;
