# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1202421651 -3600
#      Thu Feb 07 23:00:51 2008 +0100
# Node ID edbaa13397ee708ebbadfa794cf69c6403f53e33
# Parent  f79dcba526a840aac7699e9ba8fe55f8bae5eabc
Implement callbackobject property in root object.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 2008-06-04  Michael Goffioul <michael.goffioul@gmail.com>
 
+	* graphics.h.in (root_figure::properties::callbackobject):
+	New root property.
+	(root_figure::properties::cbo_stack): New field.
+	* graphics.cc (xset_gcbo, xreset_gcbo): New utility functions.
+	(execute_callback): Set callbackobject property in root object
+	before executing a callback.
+	(root_figure::properties::set_callbackobject): Implement accessor.
+
 	* graphics.h.in (class root_figure::properties,
 	class line::properties, class text::properties,
 	class image::properties, class patch::properties,
 	class surface::properties): Export classes with
 	OCTINTERP_API.
 
 	* graphics.cc (axes::properties::set_defaults): Use correct
 	default values for gridlinestyle and minorgridlinestyle.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -167,47 +167,65 @@ default_figure_position (void)
   Matrix m (1, 4, 0.0);
   m(0) = 300;
   m(1) = 200;
   m(2) = 560;
   m(3) = 420;
   return m;
 }
 
+static void
+xset_gcbo (const graphics_handle& h)
+{
+  graphics_object go = gh_manager::get_object (0);
+  root_figure::properties& props =
+      dynamic_cast<root_figure::properties&> (go.get_properties ());
+
+  props.set_callbackobject (h.as_octave_value ());
+}
+
+static void
+xreset_gcbo (void *)
+{
+  xset_gcbo (graphics_handle ());
+}
+
 // NOTE: "cb" is passed by value, because "function_value" method
 //       is non-const; passing "cb" by const-reference is not
 //       possible
 
 static void
 execute_callback (octave_value cb, const graphics_handle& h,
                   const octave_value& data)
 {
   octave_value_list args;
   octave_function *fcn = 0;
 
   args(0) = h.as_octave_value ();
   args(1) = data;
 
+  unwind_protect::begin_frame ("execute_callback");
+  unwind_protect::add (xreset_gcbo);
+
+  xset_gcbo (h);
+
   BEGIN_INTERRUPT_WITH_EXCEPTIONS;
 
   if (cb.is_function_handle ())
     fcn = cb.function_value ();
   else if (cb.is_string ())
     {
       std::string s = cb.string_value ();
       octave_value f = symbol_table::find_function (s);
       int status;
 
       if (f.is_defined ())
         fcn = f.function_value ();
       else
-        {
-          eval_string (s, false, status);
-          return;
-        }
+	eval_string (s, false, status);
     }
   else if (cb.is_cell () && cb.length () > 0
            && (cb.rows () == 1 || cb.columns () == 1)
            && cb.cell_value ()(0).is_function_handle ())
     {
       Cell c = cb.cell_value ();
 
       fcn = c(0).function_value ();
@@ -219,20 +237,22 @@ execute_callback (octave_value cb, const
     }
   else
     {
       std::string nm = cb.class_name ();
       error ("trying to execute non-executable object (class = %s)",
 	     nm.c_str ());
     }
 
-  if (! error_state)
+  if (fcn && ! error_state)
     feval (fcn, args);
   
   END_INTERRUPT_WITH_EXCEPTIONS;
+
+  unwind_protect::run_frame ("execute_callback");
 }
 
 static Matrix
 convert_position (const Matrix& pos, const caseless_str& from_units,
 		  const caseless_str& to_units,
 		  const Matrix& parent_dim = Matrix (1, 2, 0.0),
 		  const graphics_backend& backend = graphics_backend ())
 {
@@ -1374,16 +1394,46 @@ root_figure::properties::set_currentfigu
       currentfigure = val;
 
       gh_manager::push_figure (val);
     }
   else
     gripe_set_invalid ("currentfigure");
 }
 
+void
+root_figure::properties::set_callbackobject (const octave_value& v)
+{
+  graphics_handle val (v);
+
+  if (error_state)
+    return;
+
+  if (xisnan (val.value ()))
+    {
+      if (! cbo_stack.empty ())
+	{
+	  val = cbo_stack.front ();
+
+	  cbo_stack.pop_front ();
+	}
+
+      callbackobject = val;
+    }
+  else if (is_handle (val))
+    {
+      if (get_callbackobject ().ok ())
+	cbo_stack.push_front (get_callbackobject ());
+
+      callbackobject = val;
+    }
+  else
+    gripe_set_invalid ("callbackobject");
+}
+
 property_list
 root_figure::factory_properties = root_figure::init_factory_properties ();
 
 // ---------------------------------------------------------------------
 
 void
 figure::properties::set_currentaxes (const octave_value& v)
 {
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1989,17 +1989,21 @@ public:
   class OCTINTERP_API properties : public base_properties
   {
   public:
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES(root_figure)
       handle_property currentfigure S , graphics_handle ()
+      handle_property callbackobject Sr , graphics_handle ()
     END_PROPERTIES
+
+  private:
+    std::list<graphics_handle> cbo_stack;
   };
 
 private:
   properties xproperties;
 
 public:
 
   root_figure (void) : xproperties (0, graphics_handle ()), default_properties () { }
