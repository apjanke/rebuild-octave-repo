# HG changeset patch
# User jwe
# Date 777303454 0
#      Fri Aug 19 13:37:34 1994 +0000
# Node ID aecbe369233b740c3ab50d713873be2cd530db3a
# Parent  739d16c30481e7022ce33bec66bfe0e916b8b1e3
[project @ 1994-08-19 13:27:51 by jwe]

diff --git a/src/dassl.cc b/src/dassl.cc
--- a/src/dassl.cc
+++ b/src/dassl.cc
@@ -88,17 +88,17 @@ dassl_user_function (const ColumnVector&
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("dassl");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
 	{
-	  retval = tmp(0).to_vector ();
+	  retval = tmp(0).vector_value ();
 
 	  if (retval.length () == 0)
 	    gripe_user_supplied_eval ("dassl");
 	}
       else
 	gripe_user_supplied_eval ("dassl");
     }
 
@@ -125,24 +125,24 @@ where x, xdot, and res are vectors, and 
       print_usage ("dassl");
       return retval;
     }
 
   dassl_fcn = is_valid_function (args(1), "dassl", 1);
   if (! dassl_fcn || takes_correct_nargs (dassl_fcn, 4, "dassl", 1) != 1)
     return retval;
 
-  ColumnVector state = args(2).to_vector ();
-  ColumnVector deriv = args(3).to_vector ();
-  ColumnVector out_times = args(4).to_vector ();
+  ColumnVector state = args(2).vector_value ();
+  ColumnVector deriv = args(3).vector_value ();
+  ColumnVector out_times = args(4).vector_value ();
   ColumnVector crit_times;
   int crit_times_set = 0;
   if (nargin > 5)
     {
-      crit_times = args(5).to_vector ();
+      crit_times = args(5).vector_value ();
       crit_times_set = 1;
     }
 
   if (state.capacity () != deriv.capacity ())
     {
       error ("dassl: x and xdot must have the same size");
       return retval;
     }
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -1106,17 +1106,17 @@ static int
 process_scanf_format (const char *s, ostrstream& fmt,
 		      const char *type, int nargout, FILE* fptr,
 		      Octave_object& values)
 {
   fmt << "%";
 
   int chars_from_fmt_str = 0;
   int store_value = 1;
-  int string_width = -1;
+  int string_width = 0;
   int success = 1;
 
   if (*s == '*')
     {
       store_value = 0;
       s++;
       chars_from_fmt_str++;
     }
@@ -1163,34 +1163,43 @@ process_scanf_format (const char *s, ost
 	int temp;
 	char *str = fmt.str ();
 	success = fscanf (fptr, str, &temp);
 	delete [] str;
 	if (success > 0 && store_value)
 	  values(fmt_arg_count++) = tree_constant ((double) temp);
       }
       break;
+
     case 'e': case 'E': case 'f': case 'g': case 'G':
       {
 	chars_from_fmt_str++;
 	fmt << 'l' << *s << ends;
 	double temp;
 	char *str = fmt.str ();
 	success = fscanf (fptr, str, &temp);
 	delete [] str;
 	if (success > 0 && store_value)
 	  values(fmt_arg_count++) = tree_constant (temp);
       }
       break;
+
     case 's':
       {
 	if (string_width < 1)
 	  {
+// XXX FIXME XXX -- The code below is miscompiled on the Alpha with
+// gcc 2.6.0, so that string_width is never incremented, even though
+// reading the data works correctly.  One fix is to use a fixed-size
+// buffer...
+//	    string_width = 8192;
+
 	    string_width = 0;
 	    long original_position = ftell (fptr);
+
 	    int c;
 
 	    while ((c = getc (fptr)) != EOF
 		   && (c == ' ' || c == '\n' || c != '\t'))
 	      ; // Don't count leading whitespace.
 
 	    if (c != EOF)
 	      string_width++;
@@ -1207,36 +1216,38 @@ process_scanf_format (const char *s, ost
 	    fseek (fptr, original_position, SEEK_SET);
 	  }
 	chars_from_fmt_str++;
 	char temp[string_width+1];
 	fmt << *s << ends;
 	char *str = fmt.str ();
 	success = fscanf (fptr, str, temp);
 	delete [] str;
-	if (success && store_value)
+	if (success > 0 && store_value)
 	  values(fmt_arg_count++) = tree_constant (temp);
       }
       break;
+
     case 'c':
       {
 	if (string_width < 1)
 	  string_width = 1;
 	chars_from_fmt_str++;
 	char temp[string_width+1];
 	memset (temp, '\0', string_width+1);
 	fmt << *s << ends;
 	char *str = fmt.str ();
 	success = fscanf (fptr, str, temp);
 	delete [] str;
 	temp[string_width] = '\0';
 	if (success > 0 && store_value)
 	  values(fmt_arg_count++) = tree_constant (temp);
       }
       break;
+
     default:
       goto invalid_format;
     }
 
   if (success > 0)
     return chars_from_fmt_str;
   else if (success == 0)
     warning ("%s: invalid conversion", type);
@@ -1585,17 +1596,17 @@ fread_internal (const Octave_object& arg
       if (args(2).is_scalar_type ())
 	{
 	  tree_constant tmpa = args(2).make_numeric ();
 	  dnr = tmpa.double_value ();
 	  dnc = 1.0;
 	}
       else if (args(2).is_matrix_type ())
 	{
-	  ColumnVector tmp = args(2).to_vector ();
+	  ColumnVector tmp = args(2).vector_value ();
 
 	  if (tmp.length () == 2)
 	    {
 	      dnr = tmp.elem (0);
 	      dnc = tmp.elem (1);
 	    }
 	  else
 	    {
@@ -1725,17 +1736,17 @@ fwrite_internal (const Octave_object& ar
 	{
 	  error ("fwrite: precision must be a specified as a string");
 	  return retval;
 	}
     }
 
   file_info file = file_list (p);
 
-  Matrix m = args(2).to_matrix ();
+  Matrix m = args(2).matrix_value ();
 
   int count = m.write (file.fptr (), prec);
 
   retval.resize (1);
   retval(0) = tree_constant ((double) count);
 
   return retval;
 }
diff --git a/src/fsolve.cc b/src/fsolve.cc
--- a/src/fsolve.cc
+++ b/src/fsolve.cc
@@ -98,17 +98,17 @@ fsolve_user_function (const ColumnVector
       args(1) = vars;
     }
 
   if (fsolve_fcn)
     {
       Octave_object tmp = fsolve_fcn->eval (0, 1, args);
       if (tmp.length () > 0 && tmp(0).is_defined ())
 	{
-	  retval = tmp(0).to_vector ();
+	  retval = tmp(0).vector_value ();
 
 	  if (retval.length () <= 0)
 	    gripe_user_supplied_eval ("fsolve");
 	}
       else
 	gripe_user_supplied_eval ("fsolve");
     }
 
@@ -136,17 +136,17 @@ where y and x are vectors.")
       print_usage ("fsolve");
       return retval;
     }
 
   fsolve_fcn = is_valid_function (args(1), "fsolve", 1);
   if (! fsolve_fcn || takes_correct_nargs (fsolve_fcn, 2, "fsolve", 1) != 1)
     return retval;
 
-  ColumnVector x = args(2).to_vector ();
+  ColumnVector x = args(2).vector_value ();
 
   if (nargin > 3)
     warning ("fsolve: ignoring extra arguments");
 
   if (nargout > 2)
     warning ("fsolve: can't compute path output yet");
 
   NLFunc foo_fcn (fsolve_user_function);
diff --git a/src/gripes.cc b/src/gripes.cc
--- a/src/gripes.cc
+++ b/src/gripes.cc
@@ -75,14 +75,20 @@ gripe_user_supplied_eval (const char *na
 }
 
 void
 gripe_user_returned_invalid (const char *name)
 {
   error ("%s: user-supplied function returned invalid value", name);
 }
 
+void
+gripe_invalid_conversion (const char *from, const char *to)
+{
+  error ("invalid conversion from %s to %s", from, to);
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/gripes.h b/src/gripes.h
--- a/src/gripes.h
+++ b/src/gripes.h
@@ -29,16 +29,17 @@ class tree_constant;
 extern void gripe_string_invalid (void);
 extern void gripe_range_invalid (void);
 extern void gripe_nonconformant (void);
 extern void gripe_nonconformant (int r1, int c1, int r2, int c2);
 extern void gripe_empty_arg (const char *name, int is_error);
 extern void gripe_square_matrix_required (const char *name);
 extern void gripe_user_supplied_eval (const char *name);
 extern void gripe_user_returned_invalid (const char *name);
+extern void gripe_invalid_conversion (const char *from, const char *to);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
diff --git a/src/lsode.cc b/src/lsode.cc
--- a/src/lsode.cc
+++ b/src/lsode.cc
@@ -77,17 +77,17 @@ lsode_user_function (const ColumnVector&
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("lsode");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
 	{
-	  retval = tmp(0).to_vector ();
+	  retval = tmp(0).vector_value ();
 
 	  if (retval.length () == 0)
 	    gripe_user_supplied_eval ("lsode");
 	}
       else
 	gripe_user_supplied_eval ("lsode");
     }
 
@@ -113,23 +113,23 @@ where xdot and x are vectors and t is a 
       print_usage ("lsode");
       return retval;
     }
 
   lsode_fcn = is_valid_function (args(1), "lsode", 1);
   if (! lsode_fcn || takes_correct_nargs (lsode_fcn, 3, "lsode", 1) != 1)
     return retval;
 
-  ColumnVector state = args(2).to_vector ();
-  ColumnVector out_times = args(3).to_vector ();
+  ColumnVector state = args(2).vector_value ();
+  ColumnVector out_times = args(3).vector_value ();
   ColumnVector crit_times;
   int crit_times_set = 0;
   if (nargin > 4)
     {
-      crit_times = args(4).to_vector ();
+      crit_times = args(4).vector_value ();
       crit_times_set = 1;
     }
 
   double tzero = out_times.elem (0);
   int nsteps = out_times.capacity ();
 
   ODEFunc func (lsode_user_function);
   ODE ode (state, tzero, func);
diff --git a/src/mappers.h b/src/mappers.h
--- a/src/mappers.h
+++ b/src/mappers.h
@@ -35,16 +35,17 @@ typedef Complex (*c_c_Mapper)(const Comp
 // returns a real value.  Outside that range, we have to convert args
 // to complex, and call the complex valued function.
 //
 // If can_return_complex_for_real_arg is 0, lower_limit and
 // upper_limit are ignored.
 
 struct Mapper_fcn
 {
+  char *name;
   int can_return_complex_for_real_arg;
   double lower_limit;
   double upper_limit;
   d_d_Mapper d_d_mapper;
   d_c_Mapper d_c_mapper;
   c_c_Mapper c_c_mapper;
 };
 
diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -152,17 +152,17 @@ npsol_constraint_function (const ColumnV
       if (error_state)
 	{
 	  error ("npsol: error evaluating constraints");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
 	{
-	  retval = tmp(0).to_vector ();
+	  retval = tmp(0).vector_value ();
 
 	  if (retval.length () <= 0)
 	    error ("npsol: error evaluating constraints");
 	}
       else
 	error ("npsol: error evaluating constraints");
     }
 
@@ -289,17 +289,17 @@ Handle all of the following:
 
   if (nargin < 3 || nargin == 4 || nargin == 7 || nargin == 10
       || nargin > 11 || nargout > 4)
     {
       print_usage ("npsol");
       return retval;
     }
 
-  ColumnVector x = args(1).to_vector ();
+  ColumnVector x = args(1).vector_value ();
 
   if (x.capacity () == 0)
     {
       error ("npsol: expecting vector as first argument");
       return retval;
     }
 
   npsol_objective = is_valid_function (args(2), "npsol", 1);
@@ -309,18 +309,18 @@ Handle all of the following:
 
   Objective func (npsol_objective_function);
 
   ColumnVector soln;
 
   Bounds bounds;
   if (nargin == 5 || nargin == 8 || nargin == 11)
     {
-      ColumnVector lb = args(3).to_vector ();
-      ColumnVector ub = args(4).to_vector ();
+      ColumnVector lb = args(3).vector_value ();
+      ColumnVector ub = args(4).vector_value ();
 
       int lb_len = lb.capacity ();
       int ub_len = ub.capacity ();
       if (lb_len != ub_len || lb_len != x.capacity ())
 	{
 	  error ("npsol: lower and upper bounds and decision variable vector");
 	  error ("must all have the same number of elements");
 	  return retval;
@@ -360,19 +360,19 @@ Handle all of the following:
   npsol_constraints = 0;
   if (nargin == 6 || nargin == 8 || nargin == 9 || nargin == 11)
     npsol_constraints = is_valid_function (args(nargin-2), "npsol", 0);
 
   if (nargin == 8 || nargin == 6)
     {
       if (! npsol_constraints)
 	{
-	  ColumnVector lub = args(nargin-1).to_vector ();
-	  Matrix c = args(nargin-2).to_matrix ();
-	  ColumnVector llb = args(nargin-3).to_vector ();
+	  ColumnVector lub = args(nargin-1).vector_value ();
+	  Matrix c = args(nargin-2).matrix_value ();
+	  ColumnVector llb = args(nargin-3).vector_value ();
 
 	  if (llb.capacity () == 0 || lub.capacity () == 0)
 	    {
 	      error ("npsol: bounds for linear constraints must be vectors");
 	      return retval;
 	    }
 
 	  if (! linear_constraints_ok (x, llb, c, lub, "npsol", 1))
@@ -397,18 +397,18 @@ Handle all of the following:
 	      soln = nlp.minimize (objf, inform, lambda);
 	    }
 	  goto solved;
 	}
       else
 	{
 	  if (takes_correct_nargs (npsol_constraints, 2, "npsol", 1))
 	    {
-	      ColumnVector nlub = args(nargin-1).to_vector ();
-	      ColumnVector nllb = args(nargin-3).to_vector ();
+	      ColumnVector nlub = args(nargin-1).vector_value ();
+	      ColumnVector nllb = args(nargin-3).vector_value ();
 
 	      NLFunc const_func (npsol_constraint_function);
 
 	      if (! nonlinear_constraints_ok
 		  (x, nllb, npsol_constraint_function, nlub, "npsol", 1))
 		return retval;
 
 	      NLConst nonlinear_constraints (nllb, const_func, nlub);
@@ -440,30 +440,30 @@ Handle all of the following:
 	{
 	  // Produce error message.
 	  is_valid_function (args(nargin-2), "npsol", 1);
 	}
       else
 	{
 	  if (takes_correct_nargs (npsol_constraints, 2, "npsol", 1))
 	    {
-	      ColumnVector nlub = args(nargin-1).to_vector ();
-	      ColumnVector nllb = args(nargin-3).to_vector ();
+	      ColumnVector nlub = args(nargin-1).vector_value ();
+	      ColumnVector nllb = args(nargin-3).vector_value ();
 
 	      NLFunc const_func (npsol_constraint_function);
 
 	      if (! nonlinear_constraints_ok
 		  (x, nllb, npsol_constraint_function, nlub, "npsol", 1))
 		return retval;
 
 	      NLConst nonlinear_constraints (nllb, const_func, nlub);
 
-	      ColumnVector lub = args(nargin-4).to_vector ();
-	      Matrix c = args(nargin-5).to_matrix ();
-	      ColumnVector llb = args(nargin-6).to_vector ();
+	      ColumnVector lub = args(nargin-4).vector_value ();
+	      Matrix c = args(nargin-5).matrix_value ();
+	      ColumnVector llb = args(nargin-6).vector_value ();
 
 	      if (llb.capacity () == 0 || lub.capacity () == 0)
 		{
 		  error ("npsol: bounds for linear constraints must be vectors");
 		  return retval;
 		}
 
 	      if (! linear_constraints_ok (x, llb, c, lub, "npsol", 1))
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -205,21 +205,23 @@ public:
   tree_constant any (void) const { return rep->any (); }
 
 // Broader classifications.
 
   int is_scalar_type (void) const { return rep->is_scalar_type (); }
   int is_matrix_type (void) const { return rep->is_matrix_type (); }
 
   int is_real_type (void) const { return rep->is_real_type (); }
+
   int is_complex_type (void) const { return rep->is_complex_type (); }
 
 // These need better names, since a range really is a numeric type.
 
-  int is_numeric_type (void) const { return rep->is_numeric_type (); }
+  int is_numeric_type (void) const
+    { return rep->is_numeric_type (); }
 
   int is_numeric_or_range_type (void) const
     { return rep->is_numeric_or_range_type (); }
 
 // Is this constant valid as a scalar index?
 
   int valid_as_scalar_index (void) const
     { return rep->valid_as_scalar_index (); }
@@ -241,29 +243,48 @@ public:
   int is_zero_by_zero (void) const
     {
       return ((! (is_magic_colon () || is_unknown ()))
 	      && rows () == 0 && columns () == 0);
     } 
 
 // Values.
 
-  double double_value (void) const { return rep->double_value (); }
-  Matrix matrix_value (void) const { return rep->matrix_value (); }
-  Complex complex_value (void) const { return rep->complex_value (); }
-  ComplexMatrix complex_matrix_value (void) const
-    { return rep->complex_matrix_value (); }
-  char *string_value (void) const { return rep->string_value (); }
-  Range range_value (void) const { return rep->range_value (); }
+  double double_value (int force_string_conversion = 0) const
+    { return rep->double_value (force_string_conversion); }
+
+  Matrix matrix_value (int force_string_conversion = 0) const
+    { return rep->matrix_value (force_string_conversion); }
+
+  Complex complex_value (int force_string_conversion = 0) const
+    { return rep->complex_value (force_string_conversion); }
+
+  ComplexMatrix complex_matrix_value (int force_string_conversion = 0) const
+    { return rep->complex_matrix_value (force_string_conversion); }
+
+  char *string_value (void) const
+    { return rep->string_value (); }
+
+  Range range_value (void) const
+    { return rep->range_value (); }
+
+  ColumnVector vector_value (int force_string_conversion = 0,
+			     int force_vector_conversion = 0) const 
+    { return rep->vector_value (); }
+
+  ComplexColumnVector complex_vector_value (int force_string_conv = 0,
+					    int force_vec_conv = 0) const
+    { return rep->complex_vector_value (); }
 
 // Conversions.  These should probably be private.  If a user of this
 // class wants a certain kind of constant, he should simply ask for
 // it, and we should convert it if possible.
 
-  tree_constant convert_to_str (void) { return rep->convert_to_str (); }
+  tree_constant convert_to_str (void)
+    { return rep->convert_to_str (); }
 
   void convert_to_row_or_column_vector (void)
     { rep->convert_to_row_or_column_vector (); }
 
 // These need better names, since a range really is a numeric type.
 
   void force_numeric (int force_str_conv = 0)
     { rep->force_numeric (force_str_conv); }
@@ -349,16 +370,19 @@ public:
 // Pretty print this constant.
  
   void print_code (ostream& os);
 
 // Complain about unknown types used as args.
 
   friend void gripe_wrong_type_arg (const char *name, const tree_constant& tc);
 
+  char *type_as_string (void) const
+    { return rep->type_as_string (); }
+
 // -------------------------------------------------------------------
 
 // These may not need to be member functions.
 
   tree_constant cumprod (void) const { return rep->cumprod (); }
   tree_constant cumsum (void) const { return rep->cumsum (); }
   tree_constant prod (void) const { return rep->prod (); }
   tree_constant sum (void) const { return rep->sum (); }
@@ -372,28 +396,17 @@ public:
 
 // -------------------------------------------------------------------
 
 // We want to eliminate this, or at least make it private.
 
   tree_constant_rep::constant_type const_type (void) const
     { return rep->const_type (); }
 
-// More conversions.  These should probably be eliminated.  If a user
-// of this class wants a certain kind of constant, he should simply
-// ask for it, and we should convert it if possible.
-
-  double to_scalar (void) const { return rep->to_scalar (); }
-  ColumnVector to_vector (void) const { return rep->to_vector (); }
-  Matrix to_matrix (void) const { return rep->to_matrix (); }
-
 // -------------------------------------------------------------------
-
-private:
-  char *type_as_string (void) const;
 };
 
 // XXX FIXME XXX -- this is not used very much now.  Perhaps it can be
 // eliminated.
 extern Octave_object vector_of_empties (int nargout, const char *fcn_name);
 
 #endif
 
diff --git a/src/qpsol.cc b/src/qpsol.cc
--- a/src/qpsol.cc
+++ b/src/qpsol.cc
@@ -91,42 +91,42 @@ Handle all of the following:
 
   if (nargin < 4 || nargin == 5 || nargin == 8 || nargin > 9
       || nargout > 4)
     {
       print_usage ("qpsol");
       return retval;
     }
 
-  ColumnVector x = args(1).to_vector ();
+  ColumnVector x = args(1).vector_value ();
   if (x.capacity () == 0)
     {
       error ("qpsol: expecting vector as first argument");
       return retval;
     }
 
-  Matrix H = args(2).to_matrix ();
+  Matrix H = args(2).matrix_value ();
   if (H.rows () != H.columns () || H.rows () != x.capacity ())
     {
       error ("qpsol: H must be a square matrix consistent with the size of x");
       return retval;
     }
 
-  ColumnVector c = args(3).to_vector ();
+  ColumnVector c = args(3).vector_value ();
   if (c.capacity () != x.capacity ())
     {
       error ("qpsol: c must be a vector the same size as x");
       return retval;
     }
 
   Bounds bounds;
   if (nargin == 6 || nargin == 9)
     {
-      ColumnVector lb = args(4).to_vector ();
-      ColumnVector ub = args(5).to_vector ();
+      ColumnVector lb = args(4).vector_value ();
+      ColumnVector ub = args(5).vector_value ();
 
       int lb_len = lb.capacity ();
       int ub_len = ub.capacity ();
       if (lb_len != ub_len || lb_len != x.capacity ())
 	{
 	  error ("qpsol: lower and upper bounds and decision variable vector");
 	  error ("must all have the same number of elements");
 	  return retval;
@@ -161,19 +161,19 @@ Handle all of the following:
       qp.copy (qpsol_opts);
       soln = qp.minimize (objf, inform, lambda);
 
       goto solved;
     }
 
   if (nargin == 7 || nargin == 9)
     {
-      ColumnVector lub = args(nargin-1).to_vector ();
-      Matrix A = args(nargin-2).to_matrix ();
-      ColumnVector llb = args(nargin-3).to_vector ();
+      ColumnVector lub = args(nargin-1).vector_value ();
+      Matrix A = args(nargin-2).matrix_value ();
+      ColumnVector llb = args(nargin-3).vector_value ();
 
       if (llb.capacity () == 0 || lub.capacity () == 0)
 	{
 	  error ("qpsol: bounds for linear constraints must be vectors");
 	  return retval;
 	}
 
       if (! linear_constraints_ok (x, llb, A, lub, "qpsol", 1))
diff --git a/src/quad.cc b/src/quad.cc
--- a/src/quad.cc
+++ b/src/quad.cc
@@ -61,17 +61,17 @@ quad_user_function (double x)
       if (error_state)
 	{
 	  quad_integration_error = 1;  // XXX FIXME XXX
 	  gripe_user_supplied_eval ("quad");
 	  return retval;
 	}
 
       if (tmp.length () && tmp(0).is_defined ())
-	retval = tmp(0).to_scalar ();
+	retval = tmp(0).double_value ();
       else
 	{
 	  quad_integration_error = 1;  // XXX FIXME XXX
 	  gripe_user_supplied_eval ("quad");
 	}
     }
 
   return retval;
@@ -101,18 +101,18 @@ at which the integrand is singular.")
       print_usage ("quad");
       return retval;
     }
 
   quad_fcn = is_valid_function (args(1), "fsolve", 1);
   if (! quad_fcn || takes_correct_nargs (quad_fcn, 2, "fsolve", 1) != 1)
     return retval;
 
-  double a = args(2).to_scalar ();
-  double b = args(3).to_scalar ();
+  double a = args(2).double_value ();
+  double b = args(3).double_value ();
 
   int indefinite = 0;
   IndefQuad::IntegralType indef_type = IndefQuad::doubly_infinite;
   double bound = 0.0;
   if ((int) xisinf (a) && (int) xisinf (b))
     {
       indefinite = 1;
       indef_type = IndefQuad::doubly_infinite;
@@ -143,19 +143,19 @@ at which the integrand is singular.")
     {
     case 6:
       if (indefinite)
 	{
 	  error("quad: singularities not allowed on infinite intervals");
 	  return retval;
 	}
       have_sing = 1;
-      sing = args(5).to_vector ();
+      sing = args(5).vector_value ();
     case 5:
-      tol = args(4).to_vector ();
+      tol = args(4).vector_value ();
       switch (tol.capacity ())
 	{
 	case 2:
 	  reltol = tol.elem (1);
 	case 1:
 	  abstol = tol.elem (0);
 	  break;
 	default:
diff --git a/src/qzval.cc b/src/qzval.cc
--- a/src/qzval.cc
+++ b/src/qzval.cc
@@ -113,18 +113,18 @@ A and B must be real matrices.")
 	  ColumnVector beta (a_rows);
 
 	  long matz = 0;
 	  int info;
 
 // XXX FIXME ??? XXX
 	  double eps = DBL_EPSILON;
 
-	  Matrix ca = arga.to_matrix ();
-	  Matrix cb = argb.to_matrix ();
+	  Matrix ca = arga.matrix_value ();
+	  Matrix cb = argb.matrix_value ();
 
 // Use EISPACK qz functions.
 
 	  F77_FCN (qzhes) (&a_rows, &a_rows, ca.fortran_vec (),
 			   cb.fortran_vec (), &matz, jnk.fortran_vec ());
 
 	  F77_FCN (qzit) (&a_rows, &a_rows, ca.fortran_vec (),
 			  cb.fortran_vec (), &eps, &matz,
diff --git a/src/rand.cc b/src/rand.cc
--- a/src/rand.cc
+++ b/src/rand.cc
@@ -200,23 +200,23 @@ rand (SEED, N)        -- set seed")
 	  return retval;
 	}
     }
   else if (nargin == 3)
     {
       if (args(1).is_string ()
 	  && strcmp (args(1).string_value (), "seed") == 0)
 	{
-	  double d = args(2).to_scalar ();
+	  double d = args(2).double_value ();
 	  set_rand_seed (d);
 	}
       else
 	{
-	  n = NINT (args(1).to_scalar ());
-	  m = NINT (args(2).to_scalar ());
+	  n = NINT (args(1).double_value ());
+	  m = NINT (args(2).double_value ());
 	  goto gen_matrix;
 	}
     }
 
   return retval;
 
  gen_matrix:
 
diff --git a/src/sort.cc b/src/sort.cc
--- a/src/sort.cc
+++ b/src/sort.cc
@@ -195,17 +195,17 @@ sort the columns of X, optionally return
   else if (tmp.is_complex_scalar ())
     {
       retval(0) = tmp.complex_value ();
       if (return_idx)
 	retval(1) = 1.0;
     }
   else if (tmp.is_real_matrix () || tmp.is_string () || tmp.is_range ())
     {
-      Matrix m = tmp.to_matrix ();
+      Matrix m = tmp.matrix_value ();
       if (m.rows () == 1)
 	{
 	  int nc = m.columns ();
 	  RowVector v (nc);
 	  for (int i = 0; i < nc; i++)
 	    v.elem (i) = m.elem (0, i);
 	  RowVector idx;
 	  mx_sort (v, idx, return_idx);
diff --git a/src/svd.cc b/src/svd.cc
--- a/src/svd.cc
+++ b/src/svd.cc
@@ -27,65 +27,46 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #include "dbleSVD.h"
 #include "CmplxSVD.h"
 
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "gripes.h"
 #include "error.h"
+#include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
 DEFUN_DLD ("svd", Fsvd, Ssvd, 2, 3,
   "S = svd (X) or [U, S, V] = svd (X [, 0])\n\
 \n\
 Compute the singular value decomposition of X.  Given a second input\n\
 argument, an `economy' sized factorization is computed that omits\n\
 unnecessary rows and columns of U and V")
 {
-  Octave_object retval;
+  Octave_object retval (3, Matrix ());
 
   int nargin = args.length ();
 
   if (nargin < 2 || nargin > 3 || nargout == 2 || nargout > 3)
     {
       print_usage ("svd");
       return retval;
     }
 
-  tree_constant arg = args(1).make_numeric ();
-
-  if (error_state)
-    return retval;
+  SVD::type type = (nargin == 3) ? SVD::economy : SVD::std;
 
-  if (arg.rows () == 0 || arg.columns () == 0)
-    {
-      int flag = user_pref.propagate_empty_matrices;
-      if (flag != 0)
-	{
-	  if (flag < 0)
-	    gripe_empty_arg ("svd", 0);
-
-	  Matrix m;
-	  retval.resize (3, m);
-	}
-      else
-	gripe_empty_arg ("svd", 1);
-
-      return retval;
-    }
-
-  SVD::type type = (nargin == 3) ? SVD::economy : SVD::std;
+  tree_constant arg = args(1);
 
   if (arg.is_real_type ())
     {
       Matrix tmp = arg.matrix_value ();
 
-      if (error_state)
+      if (error_state || empty_arg ("svd", tmp.rows (), tmp.columns ()))
 	return retval;
 
       SVD result (tmp, type);
 
       DiagMatrix sigma = result.singular_values ();
 
       if (nargout == 0 || nargout == 1)
 	{
@@ -97,17 +78,17 @@ unnecessary rows and columns of U and V"
 	  retval(1) = sigma;
 	  retval(0) = result.left_singular_matrix ();
 	}
     }
   else if (arg.is_complex_type ())
     {
       ComplexMatrix ctmp = arg.complex_matrix_value ();
 
-      if (error_state)
+      if (error_state || empty_arg ("svd", ctmp.rows (), ctmp.columns ()))
 	return retval;
 
       ComplexSVD result (ctmp, type);
 
       DiagMatrix sigma = result.singular_values ();
 
       if (nargout == 0 || nargout == 1)
 	{
diff --git a/src/syl.cc b/src/syl.cc
--- a/src/syl.cc
+++ b/src/syl.cc
@@ -141,19 +141,19 @@ DEFUN_DLD ("syl", Fsyl, Ssyl, 4, 1,
   
 	retval(0) = cx;
       }
     else
       {
 
 // Do everything in real arithmetic;
 
-	Matrix ca = arga.to_matrix ();
-	Matrix cb = argb.to_matrix ();
-	Matrix cc = argc.to_matrix ();
+	Matrix ca = arga.matrix_value ();
+	Matrix cb = argb.matrix_value ();
+	Matrix cc = argc.matrix_value ();
   
 // Compute Schur decompositions.
 
 	SCHUR as (ca, "U");
 	SCHUR bs (cb, "U");
   
 // Transform cc to new coordinates.
 
diff --git a/src/tc-rep.h b/src/tc-rep.h
--- a/src/tc-rep.h
+++ b/src/tc-rep.h
@@ -114,56 +114,75 @@ private:
 
   int is_magic_colon (void) const
     { return type_tag == tree_constant_rep::magic_colon; }
 
   tree_constant all (void) const;
   tree_constant any (void) const;
 
   int is_scalar_type (void) const
-    { return type_tag == scalar_constant
-             || type_tag == complex_scalar_constant; }
+    {
+      return (type_tag == scalar_constant
+	      || type_tag == complex_scalar_constant);
+    }
 
   int is_matrix_type (void) const
-    { return type_tag == matrix_constant
-             || type_tag == complex_matrix_constant; }
+    {
+      return (type_tag == matrix_constant
+	      || type_tag == complex_matrix_constant);
+    }
 
   int is_real_type (void) const
-    { return type_tag == scalar_constant
-             || type_tag == matrix_constant
-	     || type_tag == range_constant; }
+    {
+      return (type_tag == scalar_constant
+	      || type_tag == matrix_constant
+	      || type_tag == range_constant
+	      || type_tag == string_constant);
+    }
 
   int is_complex_type (void) const
-    { return type_tag == complex_matrix_constant
-             || type_tag == complex_scalar_constant; }
+    {
+      return (type_tag == complex_matrix_constant
+	      || type_tag == complex_scalar_constant);
+    }
 
   int is_numeric_type (void) const
-    { return type_tag == scalar_constant
-             || type_tag == matrix_constant
-	     || type_tag == complex_matrix_constant
-             || type_tag == complex_scalar_constant; }
+    {
+      return (type_tag == scalar_constant
+	      || type_tag == matrix_constant
+	      || type_tag == complex_matrix_constant
+	      || type_tag == complex_scalar_constant);
+    }
 
   int is_numeric_or_range_type (void) const
-    { return type_tag == scalar_constant
-             || type_tag == matrix_constant
-	     || type_tag == complex_matrix_constant
-             || type_tag == complex_scalar_constant
-	     || type_tag == range_constant; }
+    {
+      return (type_tag == scalar_constant
+	      || type_tag == matrix_constant
+	      || type_tag == complex_matrix_constant
+	      || type_tag == complex_scalar_constant
+	      || type_tag == range_constant);
+    }
 
   int valid_as_scalar_index (void) const;
 
   int is_true (void) const;
 
-  double double_value (void) const;
-  Matrix matrix_value (void) const;
-  Complex complex_value (void) const;
-  ComplexMatrix complex_matrix_value (void) const;
+  double double_value (int force_string_conversion = 0) const;
+  Matrix matrix_value (int force_string_conversion = 0) const;
+  Complex complex_value (int force_string_conversion = 0) const;
+  ComplexMatrix complex_matrix_value (int force_string_conversion = 0) const;
   char *string_value (void) const;
   Range range_value (void) const;
 
+  ColumnVector vector_value (int force_string_conversion = 0,
+			     int force_vector_conversion = 0) const;
+
+  ComplexColumnVector complex_vector_value (int force_string_conv = 0,
+					    int force_vec_conv = 0) const;
+
   tree_constant convert_to_str (void);
 
   void convert_to_row_or_column_vector (void);
 
   void force_numeric (int force_str_conv = 0);
   tree_constant make_numeric (int force_str_conv = 0) const;
 
   void bump_value (tree_expression::type);
@@ -233,20 +252,16 @@ private:
 			     const Octave_object& args);
 
   void do_matrix_assignment (const tree_constant& rhs,
 			     const Octave_object& args);
 
   void do_matrix_assignment (const tree_constant& rhs,
 			     const tree_constant& i_arg);
 
-  void do_matrix_assignment (const tree_constant& rhs,
-			     const tree_constant& i_arg,
-			     const tree_constant& j_arg);
-
   void fortran_style_matrix_assignment (const tree_constant& rhs,
 					const tree_constant& i_arg);
 
   void fortran_style_matrix_assignment (const tree_constant& rhs,
 					constant_type ci);
 
   void fortran_style_matrix_assignment (const tree_constant& rhs,
 					idx_vector& i);
@@ -256,16 +271,20 @@ private:
 
   void check_vector_assign (int rhs_nr, int rhs_nc, int ilen,
 			    const char *rm);
 
   void do_vector_assign (const tree_constant& rhs, int i);
   void do_vector_assign (const tree_constant& rhs, idx_vector& i);
   void do_vector_assign (const tree_constant& rhs, Range& i);
 
+  void do_matrix_assignment (const tree_constant& rhs,
+			     const tree_constant& i_arg,
+			     const tree_constant& j_arg);
+
   void do_matrix_assignment (const tree_constant& rhs, int i,
 			     const tree_constant& j_arg);
   void do_matrix_assignment (const tree_constant& rhs, idx_vector& i,
 			     const tree_constant& j_arg);
   void do_matrix_assignment (const tree_constant& rhs, Range& i,
 			     const tree_constant& j_arg);
   void do_matrix_assignment (const tree_constant& rhs, constant_type i,
 			     const tree_constant& j_arg);
@@ -310,16 +329,18 @@ private:
   void delete_columns (Range& j);
 
   void maybe_mutate (void);
 
   void print (void);
 
   void print_code (ostream& os);
 
+  char *type_as_string (void) const;
+
 // Binary and unary operations.
 
   friend tree_constant do_binary_op (tree_constant& a, tree_constant& b,
 				     tree_expression::type t);
 
   friend tree_constant do_unary_op (tree_constant& a,
 				    tree_expression::type t);
 
@@ -353,24 +374,16 @@ private:
 
   tree_constant mapper (Mapper_fcn& m_fcn, int print) const;
 
 // -------------------------------------------------------------------
 
 // We want to eliminate this.
 
   constant_type const_type (void) const { return type_tag; }
-
-// More conversions.  These should probably be eliminated.  If a user
-// of this class wants a certain kind of constant, he should simply
-// ask for it, and we should convert it if possible.
-
-  double to_scalar (void) const;
-  ColumnVector to_vector (void) const;
-  Matrix to_matrix (void) const;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -97,16 +97,17 @@ LOSE! LOSE!
 
 #include "SLStack.h"
 
 #include "procstream.h"
 #include "user-prefs.h"
 #include "variables.h"
 #include "dirfns.h"
 #include "error.h"
+#include "gripes.h"
 #include "pager.h"
 #include "utils.h"
 #include "input.h"
 #include "octave.h"
 #include "oct-obj.h"
 #include "mappers.h"
 #include "version.h"
 #include "tree-const.h"
@@ -501,16 +502,36 @@ make_argv (const Octave_object& args, co
 	argv[i] = strsave (args(i).string_value ());
     }
   else
     error ("%s: expecting all arguments to be strings", fcn_name);
 
   return argv;
 }
 
+int
+empty_arg (const char *name, int nr, int nc)
+{
+  int is_empty = 0;
+
+  if (nr == 0 || nc == 0)
+    {
+      is_empty = 0;
+
+      int flag = user_pref.propagate_empty_matrices;
+
+      if (flag < 0)
+	gripe_empty_arg (name, 0);
+      else if (flag > 0)
+	gripe_empty_arg (name, 1);
+    }
+
+  return is_empty;
+}
+
 // Format a list in neat columns.  Mostly stolen from GNU ls.  This
 // should maybe be in utils.cc.
 
 ostrstream&
 list_in_columns (ostrstream& os, char **list)
 {
 // Compute the maximum name length.
 
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -63,16 +63,18 @@ extern char **get_fcn_file_names (int& f
 				  int no_suffix); 
 extern char **get_fcn_file_names (int& ffl_len, int no_suffix);
 
 extern int NINT (double x);
 extern double D_NINT (double x);
 
 extern char **make_argv (const Octave_object& args, const char *fcn_name);
 
+extern int empty_arg (const char *name, int nr, int nc);
+
 extern ostrstream& list_in_columns (ostrstream& os, char **list);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1123,16 +1123,17 @@ character, but may not be combined.")
 
 void
 install_builtin_mapper (builtin_mapper_function *mf)
 {
   symbol_record *sym_rec = global_sym_tab->lookup (mf->name, 1);
   sym_rec->unprotect ();
 
   Mapper_fcn mfcn;
+  mfcn.name = strsave (mf->name);
   mfcn.can_return_complex_for_real_arg = mf->can_return_complex_for_real_arg;
   mfcn.lower_limit = mf->lower_limit;
   mfcn.upper_limit = mf->upper_limit;
   mfcn.d_d_mapper = mf->d_d_mapper;
   mfcn.d_c_mapper = mf->d_c_mapper;
   mfcn.c_c_mapper = mf->c_c_mapper;
 
   tree_builtin *def = new tree_builtin (2, 1, mfcn, mf->name);
