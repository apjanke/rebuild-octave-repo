# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1466053220 14400
#      Thu Jun 16 01:00:20 2016 -0400
# Node ID ecfcc852766134bb423b416c00084aee65fa51ee
# Parent  13e0fc0dfa0c6b34ca5e448e6872fbf4e7cc2649
hide sys/wait.h header and provide wrappers for waitpid macros

* bootstrap.conf: Use sys_wait and waitpid gnulib modules.

* liboctave/wrappers/wait-wrappers.c, added
liboctave/wrappers/wait-wrappers.h: New files.
* changed liboctave/wrappers/module.mk: Update.

* liboctave/system/syswait.h: Delete.
* liboctave/system/module.mk: Update.

* oct-syscalls.cc, oct-syscalls.h (wcontinue, wcoredump, wifcontinued,
wifexited, wifsignaled, wifstopped, wexitstatus, wnohang, wstopsig,
wtermsig, wuntraced): New functions.
(waitpid): Use octave_waitpid_wrapper.

* lo-cutils.c, lo-cutils.h (octave_waitpid, octave_wifexited,
octave_wexitstatus, octave_wifsignaled, octave_wtermsig,
octave_wcoredump, octave_wifstopped, octave_wstopsig,
octave_wifcontinued): Delete.
* lo-utils.h (class octave_wait): Delete.

* octave-gui.cc, help.cc: Don't include sys/wait.h.

* pager.cc, sighandlers.cc, syscalls.cc, toplev.cc:
Use wait functions from octave::sys namespace.

* main.in.cc: Use wait-wrappers.h.
* src/module.mk: Update.

diff --git a/bootstrap.conf b/bootstrap.conf
--- a/bootstrap.conf
+++ b/bootstrap.conf
@@ -96,27 +96,29 @@ gnulib_modules="
   stdio
   strerror
   strftime
   strptime
   symlink
   sys_stat
   sys_time
   sys_times
+  sys_wait
   tempname
   time
   times
   tmpfile
   trunc
   truncf
   uname
   unistd
   unlink
   unsetenv
   vasprintf
+  waitpid
 "
 
 # Additional xgettext options to use.  Use "\\\newline" to break lines.
 XGETTEXT_OPTIONS=$XGETTEXT_OPTIONS'\\\
  --from-code=UTF-8\\\
  --flag=asprintf:2:c-format --flag=vasprintf:2:c-format\\\
  --flag=asnprintf:3:c-format --flag=vasnprintf:3:c-format\\\
  --flag=wrapf:1:c-format\\\
diff --git a/libgui/src/octave-gui.cc b/libgui/src/octave-gui.cc
--- a/libgui/src/octave-gui.cc
+++ b/libgui/src/octave-gui.cc
@@ -33,17 +33,16 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_SYS_IOCTL_H)
 #  include <sys/ioctl.h>
 #endif
 
 #include "lo-utils.h"
 #include "oct-env.h"
 #include "oct-syscalls.h"
-#include "syswait.h"
 
 #include "octave.h"
 #include "sighandlers.h"
 
 #include "welcome-wizard.h"
 #include "resource-manager.h"
 #include "shortcut-manager.h"
 #include "main-window.h"
diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -54,17 +54,16 @@ along with Octave; see the file COPYING.
 #include "ov-fcn-handle.h"
 #include "pager.h"
 #include "parse.h"
 #include "pathsearch.h"
 #include "procstream.h"
 #include "pt-pr-code.h"
 #include "sighandlers.h"
 #include "symtab.h"
-#include "syswait.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 #include "version.h"
 #include "quit.h"
 
 // Name of the doc cache file specified on the command line.
diff --git a/libinterp/corefcn/pager.cc b/libinterp/corefcn/pager.cc
--- a/libinterp/corefcn/pager.cc
+++ b/libinterp/corefcn/pager.cc
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <fstream>
 #include <iostream>
 #include <string>
 
 #include "cmd-edit.h"
 #include "oct-env.h"
+#include "oct-syscalls.h"
 #include "singleton-cleanup.h"
 
 #include "defaults.h"
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
 #include "input.h"
 #include "ovl.h"
@@ -103,17 +104,17 @@ clear_external_pager (void)
 
 static bool
 pager_event_handler (pid_t pid, int status)
 {
   bool retval = false;
 
   if (pid > 0)
     {
-      if (octave_wait::ifexited (status) || octave_wait::ifsignaled (status))
+      if (octave::sys::wifexited (status) || octave::sys::wifsignaled (status))
         {
           // Avoid warning() since that will put us back in the pager,
           // which would be bad news.
 
           std::cerr << "warning: connection to external pager lost (pid = "
                     << pid << ")" << std::endl;
           std::cerr << "warning: flushing pending output (please wait)"
                     << std::endl;
diff --git a/libinterp/corefcn/sighandlers.cc b/libinterp/corefcn/sighandlers.cc
--- a/libinterp/corefcn/sighandlers.cc
+++ b/libinterp/corefcn/sighandlers.cc
@@ -41,17 +41,16 @@ along with Octave; see the file COPYING.
 #include "load-save.h"
 #include "oct-map.h"
 #include "pager.h"
 #include "pt-bp.h"
 #include "pt-eval.h"
 #include "sighandlers.h"
 #include "siglist.h"
 #include "sysdep.h"
-#include "syswait.h"
 #include "toplev.h"
 #include "utils.h"
 #include "variables.h"
 
 // Nonzero means we have already printed a message for this series of
 // SIGPIPES.  We assume that the writer will eventually give up.
 int pipe_handler_error_count = 0;
 
diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -1141,17 +1141,17 @@ true if the child terminated normally.\n
 @seealso{waitpid, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
   int status = args(0).xint_value ("WIFEXITED: STATUS must be an integer");
 
-  return ovl (octave_wait::ifexited (status));
+  return ovl (octave::sys::wifexited (status));
 }
 
 DEFUNX ("WEXITSTATUS", FWEXITSTATUS, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WEXITSTATUS (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 the exit status of the child.\n\
 \n\
@@ -1159,33 +1159,33 @@ This function should only be employed if
 @seealso{waitpid, WIFEXITED, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
   int status = args(0).xint_value ("WEXITSTATUS: STATUS must be an integer");
 
-  return ovl (octave_wait::exitstatus (status));
+  return ovl (octave::sys::wexitstatus (status));
 }
 
 DEFUNX ("WIFSIGNALED", FWIFSIGNALED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WIFSIGNALED (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 true if the child process was terminated by a signal.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
   int status = args(0).xint_value ("WIFSIGNALED: STATUS must be an integer");
 
-  return ovl (octave_wait::ifsignaled (status));
+  return ovl (octave::sys::wifsignaled (status));
 }
 
 DEFUNX ("WTERMSIG", FWTERMSIG, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WTERMSIG (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 the number of the signal that caused the child process to terminate.\n\
 \n\
@@ -1193,17 +1193,17 @@ This function should only be employed if
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
   int status = args(0).xint_value ("WTERMSIG: STATUS must be an integer");
 
-  return ovl (octave_wait::termsig (status));
+  return ovl (octave::sys::wtermsig (status));
 }
 
 DEFUNX ("WCOREDUMP", FWCOREDUMP, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WCOREDUMP (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 true if the child produced a core dump.\n\
 \n\
@@ -1213,17 +1213,17 @@ and is not available on some Unix implem
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
   int status = args(0).xint_value ("WCOREDUMP: STATUS must be an integer");
 
-  return ovl (octave_wait::coredump (status));
+  return ovl (octave::sys::wcoredump (status));
 }
 
 DEFUNX ("WIFSTOPPED", FWIFSTOPPED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WIFSTOPPED (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 true if the child process was stopped by delivery of a signal.\n\
 \n\
@@ -1232,17 +1232,17 @@ the child is being traced (see ptrace(2)
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
   int status = args(0).xint_value ("WIFSTOPPED: STATUS must be an integer");
 
-  return ovl (octave_wait::ifstopped (status));
+  return ovl (octave::sys::wifstopped (status));
 }
 
 DEFUNX ("WSTOPSIG", FWSTOPSIG, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WSTOPSIG (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 the number of the signal which caused the child to stop.\n\
 \n\
@@ -1250,33 +1250,33 @@ This function should only be employed if
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WIFCONTINUED}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
   int status = args(0).xint_value ("WSTOPSIG: STATUS must be an integer");
 
-  return ovl (octave_wait::stopsig (status));
+  return ovl (octave::sys::wstopsig (status));
 }
 
 DEFUNX ("WIFCONTINUED", FWIFCONTINUED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WIFCONTINUED (@var{status})\n\
 Given @var{status} from a call to @code{waitpid}, return\n\
 true if the child process was resumed by delivery of @code{SIGCONT}.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
 
   int status = args(0).xint_value ("WIFCONTINUED: STATUS must be an integer");
 
-  return ovl (octave_wait::ifcontinued (status));
+  return ovl (octave::sys::wifcontinued (status));
 }
 
 DEFUNX ("canonicalize_file_name", Fcanonicalize_file_name, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {[@var{cname}, @var{status}, @var{msg}] =} canonicalize_file_name (@var{fname})\n\
 Return the canonical name of file @var{fname}.\n\
 \n\
 If the file does not exist the empty string (\"\") is returned.\n\
@@ -1299,301 +1299,289 @@ static inline octave_value
 const_value (const octave_value_list& args, int val)
 {
   if (args.length () != 0)
     print_usage ();
 
   return octave_value (val);
 }
 
-DEFUN (F_DUPFD, args, ,
+DEFUNX ("F_DUPFD", FF_DUPFD, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} F_DUPFD ()\n\
 Return the numerical value to pass to @code{fcntl} to return\n\
 a duplicate file descriptor.\n\
 @seealso{fcntl, F_GETFD, F_GETFL, F_SETFD, F_SETFL}\n\
 @end deftypefn")
 {
   static int val = octave_f_dupfd_wrapper ();
 
   if (val < 0)
     err_disabled_feature ("F_DUPFD", "F_DUPFD");
 
   return const_value (args, val);
 }
 
-DEFUN (F_GETFD, args, ,
+DEFUNX ("F_GETFD", FF_GETFD, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} F_GETFD ()\n\
 Return the numerical value to pass to @code{fcntl} to return\n\
 the file descriptor flags.\n\
 @seealso{fcntl, F_DUPFD, F_GETFL, F_SETFD, F_SETFL}\n\
 @end deftypefn")
 {
   static int val = octave_f_getfd_wrapper ();
 
   if (val < 0)
     err_disabled_feature ("F_GETFD", "F_GETFD");
 
   return const_value (args, val);
 }
 
-DEFUN (F_GETFL, args, ,
+DEFUNX ("F_GETFL", FF_GETFL, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} F_GETFL ()\n\
 Return the numerical value to pass to @code{fcntl} to return\n\
 the file status flags.\n\
 @seealso{fcntl, F_DUPFD, F_GETFD, F_SETFD, F_SETFL}\n\
 @end deftypefn")
 {
   static int val = octave_f_getfl_wrapper ();
 
   if (val < 0)
     err_disabled_feature ("F_GETFL", "F_GETFL");
 
   return const_value (args, val);
 }
 
-DEFUN (F_SETFD, args, ,
+DEFUNX ("F_SETFD", FF_SETFD, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} F_SETFD ()\n\
 Return the numerical value to pass to @code{fcntl} to set the file\n\
 descriptor flags.\n\
 @seealso{fcntl, F_DUPFD, F_GETFD, F_GETFL, F_SETFL}\n\
 @end deftypefn")
 {
   static int val = octave_f_setfd_wrapper ();
 
   if (val < 0)
     err_disabled_feature ("F_SETFD", "F_SETFD");
 
   return const_value (args, val);
 }
 
-DEFUN (F_SETFL, args, ,
+DEFUNX ("F_SETFL", FF_SETFL, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} F_SETFL ()\n\
 Return the numerical value to pass to @code{fcntl} to set the file\n\
 status flags.\n\
 @seealso{fcntl, F_DUPFD, F_GETFD, F_GETFL, F_SETFD}\n\
 @end deftypefn")
 {
   static int val = octave_f_setfl_wrapper ();
 
   if (val < 0)
     err_disabled_feature ("F_SETFL", "F_SETFL");
 
   return const_value (args, val);
 }
 
-DEFUN (O_APPEND, args, ,
+DEFUNX ("O_APPEND", FO_APPEND, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_APPEND ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate each write operation appends,\n\
 or that may be passed to @code{fcntl} to set the write mode to append.\n\
 @seealso{fcntl, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
   static int val = octave_o_append_wrapper ();
 
   if (val < 0)
     err_disabled_feature ("O_APPEND", "O_APPEND");
 
   return const_value (args, val);
 }
 
-DEFUN (O_ASYNC, args, ,
+DEFUNX ("O_ASYNC", FO_ASYNC, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_ASYNC ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate asynchronous I/O.\n\
 @seealso{fcntl, O_APPEND, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
   static int val = octave_o_async_wrapper ();
 
   if (val < 0)
     err_disabled_feature ("O_ASYNC", "O_ASYNC");
 
   return const_value (args, val);
 }
 
-DEFUN (O_CREAT, args, ,
+DEFUNX ("O_CREAT", FO_CREAT, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_CREAT ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate that a file should be created if it\n\
 does not exist.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
   static int val = octave_o_creat_wrapper ();
 
   if (val < 0)
     err_disabled_feature ("O_CREAT", "O_CREAT");
 
   return const_value (args, val);
 }
 
-DEFUN (O_EXCL, args, ,
+DEFUNX ("O_EXCL", FO_EXCL, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_EXCL ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate that file locking is used.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_NONBLOCK, O_RDONLY, O_RDWR, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
   static int val = octave_o_excl_wrapper ();
 
   if (val < 0)
     err_disabled_feature ("O_EXCL", "O_EXCL");
 
   return const_value (args, val);
 }
 
-DEFUN (O_NONBLOCK, args, ,
+DEFUNX ("O_NONBLOCK", FO_NONBLOCK, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_NONBLOCK ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate that non-blocking I/O is in use,\n\
 or that may be passsed to @code{fcntl} to set non-blocking I/O.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_RDONLY, O_RDWR, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
   static int val = octave_o_nonblock_wrapper ();
 
   if (val < 0)
     err_disabled_feature ("O_NONBLOCK", "O_NONBLOCK");
 
   return const_value (args, val);
 }
 
-DEFUN (O_RDONLY, args, ,
+DEFUNX ("O_RDONLY", FO_RDONLY, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_RDONLY ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate that a file is open for reading only.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDWR, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
   static int val = octave_o_rdonly_wrapper ();
 
   if (val < 0)
     err_disabled_feature ("O_RDONLY", "O_RDONLY");
 
   return const_value (args, val);
 }
 
-DEFUN (O_RDWR, args, ,
+DEFUNX ("O_RDWR", FO_RDWR, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_RDWR ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate that a file is open for both reading\n\
 and writing.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
   static int val = octave_o_rdwr_wrapper ();
 
   if (val < 0)
     err_disabled_feature ("O_RDWR", "O_RDWR");
 
   return const_value (args, val);
 }
 
-DEFUN (O_SYNC, args, ,
+DEFUNX ("O_SYNC", FO_SYNC, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_SYNC ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate that a file is open for synchronous\n\
 I/O.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
   static int val = octave_o_sync_wrapper ();
 
   if (val < 0)
     err_disabled_feature ("O_SYNC", "O_SYNC");
 
   return const_value (args, val);
 }
 
-DEFUN (O_TRUNC, args, ,
+DEFUNX ("O_TRUNC", FO_TRUNC, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_TRUNC ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate that if file exists, it should be\n\
 truncated when writing.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_SYNC, O_WRONLY}\n\
 @end deftypefn")
 {
   static int val = octave_o_trunc_wrapper ();
 
   if (val < 0)
     err_disabled_feature ("O_TRUNC", "O_TRUNC");
 
   return const_value (args, val);
 }
 
-DEFUN (O_WRONLY, args, ,
+DEFUNX ("O_WRONLY", FO_WRONLY, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} O_WRONLY ()\n\
 Return the numerical value of the file status flag that may be\n\
 returned by @code{fcntl} to indicate that a file is open for writing only.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_SYNC, O_TRUNC}\n\
 @end deftypefn")
 {
   static int val = octave_o_wronly_wrapper ();
 
   if (val < 0)
     err_disabled_feature ("O_WRONLY", "O_WRONLY");
 
   return const_value (args, val);
 }
 
-#if ! defined (WNOHANG)
-#define WNOHANG 0
-#endif
-
 DEFUNX ("WNOHANG", FWNOHANG, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WNOHANG ()\n\
 Return the numerical value of the option argument that may be\n\
 passed to @code{waitpid} to indicate that it should return its status\n\
 immediately instead of waiting for a process to exit.\n\
 @seealso{waitpid, WUNTRACED, WCONTINUE}\n\
 @end deftypefn")
 {
-  return const_value (args, WNOHANG);
+  return const_value (args, octave::sys::wnohang ());
 }
 
-#if ! defined (WUNTRACED)
-#define WUNTRACED 0
-#endif
-
 DEFUNX ("WUNTRACED", FWUNTRACED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WUNTRACED ()\n\
 Return the numerical value of the option argument that may be\n\
 passed to @code{waitpid} to indicate that it should also return if the child\n\
 process has stopped but is not traced via the @code{ptrace} system call\n\
 @seealso{waitpid, WNOHANG, WCONTINUE}\n\
 @end deftypefn")
 {
-  return const_value (args, WUNTRACED);
+  return const_value (args, octave::sys::wuntraced ());
 }
 
-#if ! defined (WCONTINUE)
-#define WCONTINUE 0
-#endif
-
 DEFUNX ("WCONTINUE", FWCONTINUE, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {} {} WCONTINUE ()\n\
 Return the numerical value of the option argument that may be\n\
 passed to @code{waitpid} to indicate that it should also return if a stopped\n\
 child has been resumed by delivery of a @code{SIGCONT} signal.\n\
 @seealso{waitpid, WNOHANG, WUNTRACED}\n\
 @end deftypefn")
 {
-  return const_value (args, WCONTINUE);
+  return const_value (args, octave::sys::wcontinue ());
 }
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -38,16 +38,17 @@ along with Octave; see the file COPYING.
 #include "cmd-edit.h"
 #include "cmd-hist.h"
 #include "file-ops.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
 #include "oct-env.h"
 #include "oct-fftw.h"
 #include "oct-locbuf.h"
+#include "oct-syscalls.h"
 #include "quit.h"
 #include "singleton-cleanup.h"
 #include "str-vec.h"
 #include "wait-for-input.h"
 
 #include "build-env.h"
 #include "liboctinterp-build-info.h"
 #include "defaults.h"
@@ -67,17 +68,16 @@ along with Octave; see the file COPYING.
 #include "parse.h"
 #include "pathsearch.h"
 #include "procstream.h"
 #include "pt-eval.h"
 #include "pt-jump.h"
 #include "pt-stmt.h"
 #include "sighandlers.h"
 #include "sysdep.h"
-#include "syswait.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 #include "version.h"
 
 #if ! defined (SHELL_PATH)
 #  define SHELL_PATH "/bin/sh"
@@ -1026,18 +1026,18 @@ run_command_and_return_output (const std
             }
           else
             break;
         }
     }
 
   int cmd_status = cmd->close ();
 
-  if (octave_wait::ifexited (cmd_status))
-    cmd_status = octave_wait::exitstatus (cmd_status);
+  if (octave::sys::wifexited (cmd_status))
+    cmd_status = octave::sys::wexitstatus (cmd_status);
   else
     cmd_status = 127;
 
   retval = ovl (cmd_status, output_buf.str ());
 
   return retval;
 }
 
@@ -1185,18 +1185,18 @@ command shell that is started to run the
     {
       int status = system (cmd_str.c_str ());
 
       // The value in status is as returned by waitpid.  If
       // the process exited normally, extract the actual exit
       // status of the command.  Otherwise, return 127 as a
       // failure code.
 
-      if (octave_wait::ifexited (status))
-        status = octave_wait::exitstatus (status);
+      if (octave::sys::wifexited (status))
+        status = octave::sys::wexitstatus (status);
 
       retval(0) = status;
     }
 
   return retval;
 }
 
 /*
diff --git a/liboctave/system/module.mk b/liboctave/system/module.mk
--- a/liboctave/system/module.mk
+++ b/liboctave/system/module.mk
@@ -6,32 +6,28 @@ SYSTEM_INC = \
   liboctave/system/mach-info.h \
   liboctave/system/oct-env.h \
   liboctave/system/oct-group.h \
   liboctave/system/oct-passwd.h \
   liboctave/system/oct-syscalls.h \
   liboctave/system/oct-time.h \
   liboctave/system/oct-uname.h
 
-NOINSTALL_SYSTEM_INC = \
-  liboctave/system/syswait.h
-
 SYSTEM_SRC = \
   liboctave/system/dir-ops.cc \
   liboctave/system/file-ops.cc \
   liboctave/system/file-stat.cc \
   liboctave/system/lo-sysdep.cc \
   liboctave/system/mach-info.cc \
   liboctave/system/oct-env.cc \
   liboctave/system/oct-group.cc \
   liboctave/system/oct-passwd.cc \
   liboctave/system/oct-syscalls.cc \
   liboctave/system/oct-time.cc \
-  liboctave/system/oct-uname.cc \
-  $(NOINSTALL_SYSTEM_INC)
+  liboctave/system/oct-uname.cc
 
 noinst_LTLIBRARIES += liboctave/system/libsystem.la
 
 liboctave_system_libsystem_la_SOURCES = $(SYSTEM_SRC)
 
 liboctave_system_libsystem_la_CPPFLAGS = $(liboctave_liboctave_la_CPPFLAGS)
 
 liboctave_system_libsystem_la_CFLAGS = $(liboctave_liboctave_la_CFLAGS)
diff --git a/liboctave/system/oct-syscalls.cc b/liboctave/system/oct-syscalls.cc
--- a/liboctave/system/oct-syscalls.cc
+++ b/liboctave/system/oct-syscalls.cc
@@ -35,16 +35,17 @@ along with Octave; see the file COPYING.
 
 #include "fcntl-wrappers.h"
 #include "lo-utils.h"
 #include "lo-sysdep.h"
 #include "oct-syscalls.h"
 #include "octave-popen2.h"
 #include "str-vec.h"
 #include "unistd-wrappers.h"
+#include "wait-wrappers.h"
 
 #define NOT_SUPPORTED(nm) \
   nm ": not supported on this system"
 
 namespace octave
 {
   namespace sys
   {
@@ -211,29 +212,91 @@ namespace octave
 
     pid_t
     waitpid (pid_t pid, int *status, int options,
              std::string& msg)
     {
       pid_t retval = -1;
       msg = "";
 
-#if defined (HAVE_WAITPID)
-      retval = ::octave_waitpid (pid, status, options);
+      retval = octave_waitpid_wrapper (pid, status, options);
 
       if (retval < 0)
         msg = gnulib::strerror (errno);
-#else
-      msg = NOT_SUPPORTED ("waitpid");
-#endif
 
       return retval;
     }
 
     int
+    wcontinue (void)
+    {
+      return octave_wcontinue_wrapper ();
+    }
+
+    int
+    wcoredump (int status)
+    {
+      return octave_wcoredump_wrapper (status);
+    }
+
+    bool
+    wifcontinued (int status)
+    {
+      return octave_wifcontinued_wrapper (status);
+    }
+
+    bool
+    wifexited (int status)
+    {
+      return octave_wifexited_wrapper (status);
+    }
+
+    bool
+    wifsignaled (int status)
+    {
+      return octave_wifsignaled_wrapper (status);
+    }
+
+    bool
+    wifstopped (int status)
+    {
+      return octave_wifstopped_wrapper (status);
+    }
+
+    int
+    wexitstatus (int status)
+    {
+      return octave_wexitstatus_wrapper (status);
+    }
+
+    int
+    wnohang (void)
+    {
+      return octave_wnohang_wrapper ();
+    }
+
+    int
+    wstopsig (int status)
+    {
+      return octave_wstopsig_wrapper (status);
+    }
+
+    int
+    wtermsig (int status)
+    {
+      return octave_wtermsig_wrapper (status);
+    }
+
+    int
+    wuntraced (void)
+    {
+      return octave_wuntraced_wrapper ();
+    }
+
+    int
     kill (pid_t pid, int sig)
     {
       std::string msg;
       return octave::sys::kill (pid, sig, msg);
     }
 
     int
     kill (pid_t pid, int sig, std::string& msg)
diff --git a/liboctave/system/oct-syscalls.h b/liboctave/system/oct-syscalls.h
--- a/liboctave/system/oct-syscalls.h
+++ b/liboctave/system/oct-syscalls.h
@@ -61,16 +61,38 @@ namespace octave
     extern OCTAVE_API uid_t geteuid (void);
 
     extern OCTAVE_API int pipe (int *);
     extern OCTAVE_API int pipe (int *, std::string&);
 
     extern OCTAVE_API pid_t waitpid (pid_t, int *status, int);
     extern OCTAVE_API pid_t waitpid (pid_t, int *status, int, std::string&);
 
+    extern OCTAVE_API int wcontinue (void);
+
+    extern OCTAVE_API int wcoredump (int status);
+
+    extern OCTAVE_API bool wifcontinued (int status);
+
+    extern OCTAVE_API bool wifexited (int status);
+
+    extern OCTAVE_API bool wifsignaled (int status);
+
+    extern OCTAVE_API bool wifstopped (int status);
+
+    extern OCTAVE_API int wexitstatus (int status);
+
+    extern OCTAVE_API int wnohang (void);
+
+    extern OCTAVE_API int wstopsig (int status);
+
+    extern OCTAVE_API int wtermsig (int status);
+    
+    extern OCTAVE_API int wuntraced (void);
+
     extern OCTAVE_API int kill (pid_t, int);
     extern OCTAVE_API int kill (pid_t, int, std::string&);
 
     extern OCTAVE_API pid_t
     popen2 (const std::string&, const string_vector&, bool, int *);
 
     extern OCTAVE_API pid_t
     popen2 (const std::string&, const string_vector&, bool, int *,
diff --git a/liboctave/system/syswait.h b/liboctave/system/syswait.h
deleted file mode 100644
--- a/liboctave/system/syswait.h
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
-
-Copyright (C) 1996-2015 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#if ! defined (octave_syswait_h)
-#define octave_syswait_h 1
-
-#include "octave-config.h"
-
-#if defined (__cplusplus)
-extern "C" {
-#endif
-
-/* This mess suggested by the autoconf manual.  */
-
-#include <sys/types.h>
-
-#if defined HAVE_SYS_WAIT_H
-#  include <sys/wait.h>
-#endif
-
-#if ! defined (WIFEXITED)
-#  define WIFEXITED(stat_val) (((stat_val) & 255) == 0)
-#endif
-
-#if ! defined (WEXITSTATUS)
-#  define WEXITSTATUS(stat_val) ((unsigned)(stat_val) >> 8)
-#endif
-
-#if ! defined (WIFSIGNALLED)
-#  define WIFSIGNALLED(stat_val) \
-          (((stat_val) & 0177) != 0177 && ((stat_val) & 0177) != 0)
-#endif
-
-#if defined (__MINGW32__) || defined (_MSC_VER)
-#  define HAVE_WAITPID 1
-#  include <process.h>
-#  define WAITPID(a, b, c) _cwait (b, a, c)
-/* Action argument is ignored for _cwait, so arbitrary definition.  */
-#  define WNOHANG 0
-#else
-#  define WAITPID(a, b, c) waitpid (a, b, c)
-#endif
-
-#if defined (__cplusplus)
-}
-#endif
-
-#endif
diff --git a/liboctave/util/lo-cutils.c b/liboctave/util/lo-cutils.c
--- a/liboctave/util/lo-cutils.c
+++ b/liboctave/util/lo-cutils.c
@@ -19,31 +19,29 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include "lo-error.h"
-
 /* This gives us a better chance of finding a prototype for strptime
    on some systems.  */
 
 #if ! defined (_XOPEN_SOURCE)
 #  define _XOPEN_SOURCE 1
 #endif
 
 #include <stdlib.h>
 #include <string.h>
 #include <time.h>
 
 #include "lo-cutils.h"
-#include "syswait.h"
+#include "lo-error.h"
 
 OCTAVE_API void
 octave_qsort (void *base, size_t n, size_t size,
               int (*cmp) (const void *, const void *))
 {
   qsort (base, n, size, cmp);
 }
 
@@ -53,134 +51,8 @@ octave_strcasecmp (const char *s1, const
   return strcasecmp (s1, s2);
 }
 
 OCTAVE_API int
 octave_strncasecmp (const char *s1, const char *s2, size_t n)
 {
   return strncasecmp (s1, s2, n);
 }
-
-OCTAVE_API pid_t
-octave_waitpid (pid_t pid, int *status, int options)
-{
-  return WAITPID (pid, status, options);
-}
-
-static inline void
-warn_missing_wait_macro (const char *id, int status)
-{
-  (*current_liboctave_warning_handler)
-    ("%s always returns false in this version of Octave; status = %d",
-     id, status);
-}
-
-OCTAVE_API int
-octave_wifexited (int status)
-{
-  int retval = 0;
-
-#if defined (WIFEXITED)
-  retval = WIFEXITED (status);
-#else
-  warn_missing_wait_macro ("WIFEXITED", status);
-#endif
-
-  return retval;
-}
-
-OCTAVE_API int
-octave_wexitstatus (int status)
-{
-  int retval = 0;
-
-#if defined (WEXITSTATUS)
-  retval = WEXITSTATUS (status);
-#else
-  warn_missing_wait_macro ("WEXITSTATUS", status);
-#endif
-
-  return retval;
-}
-
-OCTAVE_API int
-octave_wifsignaled (int status)
-{
-  int retval = 0;
-
-#if defined (WIFSIGNALED)
-  retval = WIFSIGNALED (status);
-#else
-  warn_missing_wait_macro ("WIFSIGNALED", status);
-#endif
-
-  return retval;
-}
-
-OCTAVE_API int
-octave_wtermsig (int status)
-{
-  int retval = 0;
-
-#if defined (WTERMSIG)
-  retval = WTERMSIG (status);
-#else
-  warn_missing_wait_macro ("WTERMSIG", status);
-#endif
-
-  return retval;
-}
-
-OCTAVE_API int
-octave_wcoredump (int status)
-{
-  int retval = 0;
-
-#if defined (WCOREDUMP)
-  retval = WCOREDUMP (status);
-#else
-  warn_missing_wait_macro ("WCOREDUMP", status);
-#endif
-
-  return retval;
-}
-
-OCTAVE_API int
-octave_wifstopped (int status)
-{
-  int retval = 0;
-
-#if defined (WIFSTOPPED)
-  retval = WIFSTOPPED (status);
-#else
-  warn_missing_wait_macro ("WIFSTOPPED", status);
-#endif
-
-  return retval;
-}
-
-OCTAVE_API int
-octave_wstopsig (int status)
-{
-  int retval = 0;
-
-#if defined (WSTOPSIG)
-  retval = WSTOPSIG (status);
-#else
-  warn_missing_wait_macro ("WSTOPSIG", status);
-#endif
-
-  return retval;
-}
-
-OCTAVE_API int
-octave_wifcontinued (int status)
-{
-  int retval = 0;
-
-#if defined (WIFCONTINUED)
-  retval = WIFCONTINUED (status);
-#else
-  warn_missing_wait_macro ("WIFCONTINUED", status);
-#endif
-
-  return retval;
-}
diff --git a/liboctave/util/lo-cutils.h b/liboctave/util/lo-cutils.h
--- a/liboctave/util/lo-cutils.h
+++ b/liboctave/util/lo-cutils.h
@@ -36,25 +36,13 @@ octave_qsort (void *base, size_t n, size
               int (*cmp) (const void *, const void *));
 
 OCTAVE_API int
 octave_strcasecmp (const char *s1, const char *s2);
 
 OCTAVE_API int
 octave_strncasecmp (const char *s1, const char *s2, size_t n);
 
-OCTAVE_API pid_t
-octave_waitpid (pid_t pid, int *status, int options);
-
-OCTAVE_API int octave_wifexited (int status);
-OCTAVE_API int octave_wexitstatus (int status);
-OCTAVE_API int octave_wifsignaled (int status);
-OCTAVE_API int octave_wtermsig (int status);
-OCTAVE_API int octave_wcoredump (int status);
-OCTAVE_API int octave_wifstopped (int status);
-OCTAVE_API int octave_wstopsig (int status);
-OCTAVE_API int octave_wifcontinued (int status);
-
 #if defined (__cplusplus)
 }
 #endif
 
 #endif
diff --git a/liboctave/util/lo-utils.h b/liboctave/util/lo-utils.h
--- a/liboctave/util/lo-utils.h
+++ b/liboctave/util/lo-utils.h
@@ -132,57 +132,9 @@ extern OCTAVE_API void
 octave_write_complex (std::ostream& os, const Complex& cval);
 
 extern OCTAVE_API void
 octave_write_float (std::ostream& os, float dval);
 
 extern OCTAVE_API void
 octave_write_float_complex (std::ostream& os, const FloatComplex& cval);
 
-// Maybe this is overkill, but it allos
-
-class
-octave_wait
-{
-public:
-
-  static bool ifexited (int status)
-  {
-    return octave_wifexited (status);
-  }
-
-  static int exitstatus (int status)
-  {
-    return octave_wexitstatus (status);
-  }
-
-  static bool ifsignaled (int status)
-  {
-    return octave_wifsignaled (status);
-  }
-
-  static int termsig (int status)
-  {
-    return octave_wtermsig (status);
-  }
-
-  static bool coredump (int status)
-  {
-    return octave_wcoredump (status);
-  }
-
-  static bool ifstopped (int status)
-  {
-    return octave_wifstopped (status);
-  }
-
-  static int stopsig (int status)
-  {
-    return octave_wstopsig (status);
-  }
-
-  static bool ifcontinued (int status)
-  {
-    return octave_wifcontinued (status);
-  }
-};
-
 #endif
diff --git a/liboctave/wrappers/module.mk b/liboctave/wrappers/module.mk
--- a/liboctave/wrappers/module.mk
+++ b/liboctave/wrappers/module.mk
@@ -16,17 +16,18 @@ NOINSTALL_WRAPPERS_INC = \
   liboctave/wrappers/stat-wrappers.h \
   liboctave/wrappers/strftime-wrapper.h \
   liboctave/wrappers/strmode-wrapper.h \
   liboctave/wrappers/strptime-wrapper.h \
   liboctave/wrappers/uname-wrapper.h \
   liboctave/wrappers/unistd-wrappers.h \
   liboctave/wrappers/unsetenv-wrapper.h \
   liboctave/wrappers/vasprintf-wrapper.h \
-  liboctave/wrappers/wait-for-input.h
+  liboctave/wrappers/wait-for-input.h \
+  liboctave/wrappers/wait-wrappers.h
 
 WRAPPERS_SRC = \
   liboctave/wrappers/areadlink-wrapper.c \
   liboctave/wrappers/base64-wrappers.c \
   liboctave/wrappers/canonicalize-file-name-wrapper.c \
   liboctave/wrappers/fcntl-wrappers.c \
   liboctave/wrappers/filepos-wrappers.c \
   liboctave/wrappers/fpucw-wrapper.c \
@@ -42,16 +43,17 @@ WRAPPERS_SRC = \
   liboctave/wrappers/strftime-wrapper.c \
   liboctave/wrappers/strmode-wrapper.c \
   liboctave/wrappers/strptime-wrapper.c \
   liboctave/wrappers/uname-wrapper.c \
   liboctave/wrappers/unistd-wrappers.c \
   liboctave/wrappers/unsetenv-wrapper.c \
   liboctave/wrappers/vasprintf-wrapper.c \
   liboctave/wrappers/wait-for-input.c \
+  liboctave/wrappers/wait-wrappers.c \
   $(NOINSTALL_WRAPPERS_INC)
 
 noinst_LTLIBRARIES += liboctave/wrappers/libwrappers.la
 
 liboctave_wrappers_libwrappers_la_SOURCES = $(WRAPPERS_SRC)
 
 liboctave_wrappers_libwrappers_la_CPPFLAGS = \
   -Ilibgnu -I$(srcdir)/libgnu
diff --git a/liboctave/wrappers/wait-wrappers.c b/liboctave/wrappers/wait-wrappers.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/wait-wrappers.c
@@ -0,0 +1,119 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// These functions may be provided by gnulib.  We don't include gnulib
+// headers directly in Octave's C++ source files to avoid problems that
+// may be caused by the way that gnulib overrides standard library
+// functions.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <sys/types.h>
+#include <sys/wait.h>
+
+#include "wait-wrappers.h"
+
+#if ! defined (WCONTINUE)
+#  define WCONTINUE 0
+#endif
+
+#if ! defined (WNOHANG)
+#  define WNOHANG 0
+#endif
+
+#if ! defined (WUNTRACED)
+#  define WUNTRACED 0
+#endif
+
+pid_t
+octave_waitpid_wrapper (pid_t pid, int *statusp, int options)
+{
+  return waitpid (pid, statusp, options);
+}
+
+int
+octave_wcontinue_wrapper (void)
+{
+  return WCONTINUE;
+}
+
+int
+octave_wcoredump_wrapper (int status)
+{
+  return WCOREDUMP (status);
+}
+
+bool
+octave_wifcontinued_wrapper (int status)
+{
+  return WIFCONTINUED (status);
+}
+
+bool
+octave_wifexited_wrapper (int status)
+{
+  return WIFEXITED (status);
+}
+
+bool
+octave_wifsignaled_wrapper (int status)
+{
+  return WIFSIGNALED (status);
+}
+
+bool
+octave_wifstopped_wrapper (int status)
+{
+  return WIFSTOPPED (status);
+}
+
+int
+octave_wexitstatus_wrapper (int status)
+{
+  return WEXITSTATUS (status);
+}
+
+int
+octave_wnohang_wrapper (void)
+{
+  return WNOHANG;
+}
+
+int
+octave_wstopsig_wrapper (int status)
+{
+  return WSTOPSIG (status);
+}
+
+int
+octave_wtermsig_wrapper (int status)
+{
+  return WTERMSIG (status);
+}
+
+int
+octave_wuntraced_wrapper (void)
+{
+  return WUNTRACED;
+}
diff --git a/liboctave/wrappers/wait-wrappers.h b/liboctave/wrappers/wait-wrappers.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/wait-wrappers.h
@@ -0,0 +1,64 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_wait_wrappers_h)
+#define octave_wait_wrappers_h 1
+
+#include <sys/types.h>
+
+#if ! defined (__cplusplus)
+#  include <stdbool.h>
+#endif
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+extern pid_t octave_waitpid_wrapper (pid_t pid, int *statusp, int options);
+
+extern int octave_wcontinue_wrapper (void);
+
+extern int octave_wcoredump_wrapper (int status);
+
+extern bool octave_wifcontinued_wrapper (int status);
+
+extern bool octave_wifexited_wrapper (int status);
+
+extern bool octave_wifsignaled_wrapper (int status);
+
+extern bool octave_wifstopped_wrapper (int status);
+
+extern int octave_wexitstatus_wrapper (int status);
+
+extern int octave_wnohang_wrapper (void);
+  
+extern int octave_wstopsig_wrapper (int status);
+
+extern int octave_wtermsig_wrapper (int status);
+
+extern int octave_wuntraced_wrapper (void);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
diff --git a/src/main.in.cc b/src/main.in.cc
--- a/src/main.in.cc
+++ b/src/main.in.cc
@@ -37,16 +37,18 @@ along with Octave; see the file COPYING.
 
 #include <algorithm>
 #include <iostream>
 #include <string>
 
 #include <sys/types.h>
 #include <unistd.h>
 
+#include "wait-wrappers.h"
+
 #if ! defined (OCTAVE_VERSION)
 #  define OCTAVE_VERSION %OCTAVE_VERSION%
 #endif
 
 #if ! defined (OCTAVE_ARCHLIBDIR)
 #  define OCTAVE_ARCHLIBDIR %OCTAVE_ARCHLIBDIR%
 #endif
 
@@ -64,20 +66,16 @@ along with Octave; see the file COPYING.
 #include <cstdlib>
 
 #if (defined (HAVE_OCTAVE_QT_GUI) \
      && ! defined (__WIN32__) || defined (__CYGWIN__))
 
 #include <signal.h>
 #include <fcntl.h>
 
-// This is a liboctave header, but it doesn't include any other Octave
-// headers or declare any functions that are defined in liboctave.
-#include "syswait.h"
-
 typedef void sig_handler (int);
 
 // Forward signals to the GUI process.
 
 static pid_t gui_pid = 0;
 
 static int caught_signal = -1;
 
@@ -566,35 +564,35 @@ main (int argc, char **argv)
       else
         {
           // Parent.  Forward signals to child while waiting for it to exit.
 
           int status;
 
           while (true)
             {
-              WAITPID (gui_pid, &status, 0);
+              octave_waitpid_wrapper (gui_pid, &status, 0);
 
               if (caught_signal > 0)
                 {
                   int sig = caught_signal;
 
                   caught_signal = -1;
 
                   kill (gui_pid, sig);
                 }
-              else if (WIFEXITED (status))
+              else if (octave_wifexited_wrapper (status))
                 {
-                  retval = WEXITSTATUS (status);
+                  retval = octave_wexitstatus_wrapper (status);
                   break;
                 }
-              else if (WIFSIGNALLED (status))
+              else if (octave_wifsignaled_wrapper (status))
                 {
                   std::cerr << "octave exited with signal "
-                            << WTERMSIG (status) << std::endl;
+                            << octave_wtermsig_wrapper (status) << std::endl;
                   break;
                 }
             }
         }
     }
   else
     retval = octave_exec (file, new_argv);
 
diff --git a/src/module.mk b/src/module.mk
--- a/src/module.mk
+++ b/src/module.mk
@@ -8,16 +8,17 @@ src_MAINTAINERCLEANFILES =
 
 SRC_DIR_CPPFLAGS = \
   -Iliboctave -I$(srcdir)/liboctave \
   -I$(srcdir)/liboctave/array \
   -I$(srcdir)/liboctave/cruft/misc \
   -I$(srcdir)/liboctave/numeric \
   -I$(srcdir)/liboctave/system \
   -I$(srcdir)/liboctave/util \
+  -Iliboctave/wrappers -I$(srcdir)/liboctave/wrappers \
   -Ilibinterp -I$(srcdir)/libinterp \
   -Ilibinterp/corefcn -I$(srcdir)/libinterp/corefcn \
   -I$(srcdir)/src \
   -Ilibgnu -I$(srcdir)/libgnu
 
 EXTRA_DIST += \
   src/main.in.cc \
   src/mkoctfile.in.cc \
@@ -52,23 +53,25 @@ if AMCOND_BUILD_QT_GUI
   archlib_PROGRAMS += src/octave-gui
   OCTAVE_VERSION_LINKS += src/octave-gui-$(version)$(EXEEXT)
 
   OCTAVE_INTERPRETER_TARGETS += src/octave-gui$(EXEEXT)
 endif
 
 OCTAVE_CORE_LIBS = \
   libinterp/liboctinterp.la \
-  liboctave/liboctave.la
+  liboctave/liboctave.la \
+  libgnu/libgnu.la
 
 nodist_src_octave_SOURCES = src/main.cc
 
 src_octave_SOURCES = src/display-available.c
 
 src_octave_LDADD = \
+  liboctave/wrappers/libwrappers.la \
   libgnu/libgnu.la \
   $(X11_LIBS) \
   $(CARBON_LIBS) \
   $(GNULIB_LINK_DEPS)
 
 src_octave_LDFLAGS = \
   $(NO_UNDEFINED_LDFLAG) \
   $(OCTAVE_LINK_OPTS) \
@@ -130,17 +133,18 @@ src_octave_gui_LDFLAGS = \
 src_octave_gui_CXXFLAGS = \
   $(AM_CXXFLAGS) \
   $(WARN_CXXFLAGS)
 
 src_mkoctfile_SOURCES =
 
 nodist_src_mkoctfile_SOURCES = src/mkoctfile.cc
 
-src_mkoctfile_LDADD = libgnu/libgnu.la $(LIBS)
+src_mkoctfile_LDADD = \
+  libgnu/libgnu.la $(LIBS)
 
 src_mkoctfile_CPPFLAGS = \
   $(SRC_DIR_CPPFLAGS) \
   $(OCTAVE_CPPFLAGS)
 
 src_mkoctfile_CXXFLAGS = \
   $(AM_CXXFLAGS) \
   $(WARN_CXXFLAGS)
