# HG changeset patch
# User Rik <rik@octave.org>
# Date 1451415746 28800
#      Tue Dec 29 11:02:26 2015 -0800
# Node ID 91a45293b61864f04948dc01ebabf0721eb480b8
# Parent  d9f4e4961e09909955c939f7d09298d0faf64b10
maint: Move GCC_ATTR_DEPRECATED to beginning of function declaration.

* error.h, symtab.h, variables.h, ov.h, DiagArray2.h, PermMatrix.h,
dSparse.h, unwind-prot.h:
Move GCC_ATTR_DEPRECATED to beginning of function declaration.

diff --git a/libinterp/corefcn/error.h b/libinterp/corefcn/error.h
--- a/libinterp/corefcn/error.h
+++ b/libinterp/corefcn/error.h
@@ -38,18 +38,18 @@ extern OCTINTERP_API void reset_error_ha
 
 extern OCTINTERP_API int warning_enabled (const std::string& id);
 
 extern OCTINTERP_API void
 vmessage (const char *name, const char *fmt, va_list args);
 
 extern OCTINTERP_API void message (const char *name, const char *fmt, ...);
 
-extern OCTINTERP_API void vusage (const char *fmt, va_list args) GCC_ATTR_NORETURN GCC_ATTR_DEPRECATED;
-extern OCTINTERP_API void usage (const char *fmt, ...) GCC_ATTR_NORETURN GCC_ATTR_DEPRECATED;
+GCC_ATTR_DEPRECATED extern OCTINTERP_API void vusage (const char *fmt, va_list args) GCC_ATTR_NORETURN;
+GCC_ATTR_DEPRECATED extern OCTINTERP_API void usage (const char *fmt, ...) GCC_ATTR_NORETURN;
 
 extern OCTINTERP_API void vwarning (const char *fmt, va_list args);
 extern OCTINTERP_API void warning (const char *fmt, ...);
 
 extern OCTINTERP_API void verror (const char *fmt, va_list args) GCC_ATTR_NORETURN;
 extern OCTINTERP_API void error (const char *fmt, ...) GCC_ATTR_NORETURN;
 
 extern OCTINTERP_API void verror (octave_execution_exception&,
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -1335,20 +1335,20 @@ public:
 
     symbol_table *inst = get_instance (scope);
 
     if (inst)
       inst->do_assign (name, value, context, force_add);
   }
 
   // Use assign (name, value, scope, context, force_add) instead.
-  static octave_value&
+  GCC_ATTR_DEPRECATED static octave_value&
   varref (const std::string& name, scope_id scope = xcurrent_scope,
           context_id context = xdefault_context, bool force_add = false)
-          GCC_ATTR_DEPRECATED
+          
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (scope);
 
     return inst ? inst->do_varref (name, context, force_add) : foobar;
   }
 
@@ -1359,19 +1359,19 @@ public:
                             const octave_value& value = octave_value (),
                             scope_id scope = xcurrent_scope,
                             context_id context = xdefault_context)
   {
     assign (name, value, scope, context, true);
   }
 
   // Use force_assign (name, value, scope, context) instead.
-  static octave_value&
+  GCC_ATTR_DEPRECATED static octave_value&
   force_varref (const std::string& name, scope_id scope = xcurrent_scope,
-                context_id context = xdefault_context) GCC_ATTR_DEPRECATED
+                context_id context = xdefault_context)
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (scope);
 
     return inst ? inst->do_varref (name, context, true) : foobar;
   }
 
@@ -1393,18 +1393,18 @@ public:
 
     if (p == global_table.end ())
       global_table[name] = value;
     else
       p->second = value;
   }
 
   // Use global_assign (name, value) instead.
-  static octave_value&
-  global_varref (const std::string& name) GCC_ATTR_DEPRECATED
+  GCC_ATTR_DEPRECATED static octave_value&
+  global_varref (const std::string& name)
 
   {
     global_table_iterator p = global_table.find (name);
 
     return (p == global_table.end ()) ? global_table[name] : p->second;
   }
 
   static octave_value
@@ -1418,18 +1418,18 @@ public:
   static void
   top_level_assign (const std::string& name,
                     const octave_value& value = octave_value ())
   {
     assign (name, value, top_scope (), 0);
   }
 
   // Use top_level_assign (name, value) instead.
-  static octave_value&
-  top_level_varref (const std::string& name) GCC_ATTR_DEPRECATED
+  GCC_ATTR_DEPRECATED static octave_value&
+  top_level_varref (const std::string& name)
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (top_scope ());
 
     return inst ? inst->do_varref (name, 0, true) : foobar;
   }
 
@@ -1445,18 +1445,18 @@ public:
   {
     symbol_table *inst = get_instance (xcurrent_scope);
 
     if (inst)
       inst->do_persistent_assign (name, value);
   }
 
   // Use persistent_assign (name, value) instead.
-  static octave_value& persistent_varref (const std::string& name)
-  GCC_ATTR_DEPRECATED
+  GCC_ATTR_DEPRECATED static octave_value&
+  persistent_varref (const std::string& name)
   {
     static octave_value foobar;
 
     symbol_table *inst = get_instance (xcurrent_scope);
 
     return inst ? inst->do_persistent_varref (name) : foobar;
   }
 
diff --git a/libinterp/corefcn/variables.h b/libinterp/corefcn/variables.h
--- a/libinterp/corefcn/variables.h
+++ b/libinterp/corefcn/variables.h
@@ -132,19 +132,19 @@ set_internal_variable (int& var, const o
 
 extern OCTINTERP_API std::string builtin_string_variable (const std::string&);
 extern OCTINTERP_API int builtin_real_scalar_variable (const std::string&,
                                                        double&);
 extern OCTINTERP_API octave_value builtin_any_variable (const std::string&);
 
 extern OCTINTERP_API void bind_ans (const octave_value& val, bool print);
 
-extern OCTINTERP_API void
+GCC_ATTR_DEPRECATED extern OCTINTERP_API void
 bind_internal_variable (const std::string& fname,
-                        const octave_value& val) GCC_ATTR_DEPRECATED;
+                        const octave_value& val);
 
 extern OCTINTERP_API void mlock (void);
 extern OCTINTERP_API void munlock (const std::string&);
 extern OCTINTERP_API bool mislocked (const std::string&);
 
 extern OCTINTERP_API void clear_function (const std::string& nm);
 extern OCTINTERP_API void clear_variable (const std::string& nm);
 extern OCTINTERP_API void clear_symbol (const std::string& nm);
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -238,22 +238,22 @@ public:
   octave_value (const Array<bool>& bnda);
   octave_value (char c, char type = '\'');
   octave_value (const char *s, char type = '\'');
   octave_value (const std::string& s, char type = '\'');
   octave_value (const string_vector& s, char type = '\'');
   octave_value (const charMatrix& chm,  char type = '\'');
   octave_value (const charNDArray& chnda, char type = '\'');
   octave_value (const Array<char>& chnda, char type = '\'');
-  octave_value (const charMatrix& chm, bool is_string,
-                char type = '\'') GCC_ATTR_DEPRECATED;
-  octave_value (const charNDArray& chnda, bool is_string,
-                char type = '\'') GCC_ATTR_DEPRECATED;
-  octave_value (const Array<char>& chnda, bool is_string,
-                char type = '\'') GCC_ATTR_DEPRECATED;
+  GCC_ATTR_DEPRECATED octave_value (const charMatrix& chm, bool is_string,
+                                    char type = '\'');
+  GCC_ATTR_DEPRECATED octave_value (const charNDArray& chnda, bool is_string,
+                                    char type = '\'');
+  GCC_ATTR_DEPRECATED octave_value (const Array<char>& chnda, bool is_string,
+                                    char type = '\'');
   octave_value (const SparseMatrix& m, const MatrixType& t = MatrixType ());
   octave_value (const Sparse<double>& m, const MatrixType& t = MatrixType ());
   octave_value (const SparseComplexMatrix& m,
                 const MatrixType& t = MatrixType ());
   octave_value (const Sparse<Complex>& m, const MatrixType& t = MatrixType ());
   octave_value (const SparseBoolMatrix& bm,
                 const MatrixType& t = MatrixType ());
   octave_value (const Sparse<bool>& m, const MatrixType& t = MatrixType ());
@@ -292,17 +292,17 @@ public:
   octave_value (const octave_map& m, const std::string& id,
                 const std::list<std::string>& plist);
   octave_value (const octave_scalar_map& m, const std::string& id,
                 const std::list<std::string>& plist);
   octave_value (const octave_value_list& m, bool = false);
   octave_value (octave_value::magic_colon);
 
   octave_value (octave_base_value *new_rep, bool borrow = false);
-  octave_value (octave_base_value *new_rep, int xcount) GCC_ATTR_DEPRECATED;
+  GCC_ATTR_DEPRECATED octave_value (octave_base_value *new_rep, int xcount);
 
   // Copy constructor.
 
   octave_value (const octave_value& a)
   {
     rep = a.rep;
     rep->count++;
   }
@@ -890,17 +890,17 @@ public:
   { return rep->uint64_array_value (); }
 
   std::string string_value (bool force = false) const
   { return rep->string_value (force); }
 
   string_vector string_vector_value (bool pad = false) const
   { return rep->string_vector_value (pad); }
 
-  string_vector all_strings (bool pad = false) const GCC_ATTR_DEPRECATED
+  GCC_ATTR_DEPRECATED string_vector all_strings (bool pad = false) const
   { return string_vector_value (pad); }
 
   Cell cell_value (void) const;
 
   Array<std::string> cellstr_value (void) const
   { return rep->cellstr_value (); }
 
   Range range_value (void) const
diff --git a/liboctave/array/DiagArray2.h b/liboctave/array/DiagArray2.h
--- a/liboctave/array/DiagArray2.h
+++ b/liboctave/array/DiagArray2.h
@@ -92,17 +92,17 @@ public:
   octave_idx_type length (void) const { return Array<T>::numel (); }
   octave_idx_type nelem (void) const { return dim1 () * dim2 (); }
   octave_idx_type numel (void) const { return nelem (); }
 
   size_t byte_size (void) const { return Array<T>::byte_size (); }
 
   dim_vector dims (void) const { return dim_vector (d1, d2); }
 
-  Array<T> diag (octave_idx_type k = 0) const GCC_ATTR_DEPRECATED;
+  GCC_ATTR_DEPRECATED Array<T> diag (octave_idx_type k = 0) const;
   Array<T> extract_diag (octave_idx_type k = 0) const;
   DiagArray2<T> build_diag_matrix () const
   {
     return DiagArray2<T> (array_value ());
   }
 
   // Warning: the non-const two-index versions will silently ignore assignments
   // to off-diagonal elements.
diff --git a/liboctave/array/PermMatrix.h b/liboctave/array/PermMatrix.h
--- a/liboctave/array/PermMatrix.h
+++ b/liboctave/array/PermMatrix.h
@@ -32,23 +32,23 @@ along with Octave; see the file COPYING.
 class OCTAVE_API PermMatrix : protected Array<octave_idx_type>
 {
 public:
 
   PermMatrix (void) : Array<octave_idx_type> () { }
 
   PermMatrix (octave_idx_type n);
 
-  PermMatrix (const Array<octave_idx_type>& p) GCC_ATTR_DEPRECATED;
+  GCC_ATTR_DEPRECATED PermMatrix (const Array<octave_idx_type>& p);
 
   PermMatrix (const Array<octave_idx_type>& p, bool colp, bool check = true);
 
   PermMatrix (const PermMatrix& m) : Array<octave_idx_type> (m) { }
 
-  PermMatrix (const idx_vector& idx) GCC_ATTR_DEPRECATED;
+  GCC_ATTR_DEPRECATED PermMatrix (const idx_vector& idx);
 
   PermMatrix (const idx_vector& idx, bool colp, octave_idx_type n = 0);
 
   octave_idx_type dim1 (void) const
   { return Array<octave_idx_type>::numel (); }
   octave_idx_type dim2 (void) const
   { return Array<octave_idx_type>::numel (); }
 
diff --git a/liboctave/array/dSparse.h b/liboctave/array/dSparse.h
--- a/liboctave/array/dSparse.h
+++ b/liboctave/array/dSparse.h
@@ -116,23 +116,24 @@ public:
   SparseMatrix concat (const SparseMatrix& rb,
                        const Array<octave_idx_type>& ra_idx);
   SparseComplexMatrix concat (const SparseComplexMatrix& rb,
                               const Array<octave_idx_type>& ra_idx);
 
   friend OCTAVE_API SparseMatrix real (const SparseComplexMatrix& a);
   friend OCTAVE_API SparseMatrix imag (const SparseComplexMatrix& a);
 
-  friend OCTAVE_API SparseMatrix atan2 (const double& x, const SparseMatrix& y)
-                                        GCC_ATTR_DEPRECATED ;
-  friend OCTAVE_API SparseMatrix atan2 (const SparseMatrix& x, const double& y)
-                                        GCC_ATTR_DEPRECATED ;
-  friend OCTAVE_API SparseMatrix atan2 (const SparseMatrix& x,
-                                        const SparseMatrix& y)
-                                        GCC_ATTR_DEPRECATED ;
+  friend GCC_ATTR_DEPRECATED OCTAVE_API
+    SparseMatrix atan2 (const double& x, const SparseMatrix& y);
+
+  friend GCC_ATTR_DEPRECATED OCTAVE_API
+    SparseMatrix atan2 (const SparseMatrix& x, const double& y);
+
+  friend GCC_ATTR_DEPRECATED OCTAVE_API
+    SparseMatrix atan2 (const SparseMatrix& x, const SparseMatrix& y);
 
   SparseMatrix transpose (void) const
   {
     return MSparse<double>::transpose ();
   }
   SparseMatrix hermitian (void) const { return transpose (); }
 
   // extract row or column i.
diff --git a/liboctave/util/unwind-prot.h b/liboctave/util/unwind-prot.h
--- a/liboctave/util/unwind-prot.h
+++ b/liboctave/util/unwind-prot.h
@@ -45,51 +45,51 @@ public:
 
   ~unwind_protect (void) { run (); }
 
   virtual void add (elem *new_elem)
   {
     lifo.push (new_elem);
   }
 
-  void add (void (*fcn) (void *), void *ptr = 0) GCC_ATTR_DEPRECATED
+  GCC_ATTR_DEPRECATED void add (void (*fcn) (void *), void *ptr = 0)
   {
     add (new fcn_arg_elem<void *> (fcn, ptr));
   }
 
   operator bool (void) const { return ! empty (); }
 
-  void run_top (void) GCC_ATTR_DEPRECATED { run_first (); }
+  GCC_ATTR_DEPRECATED void run_top (void) { run_first (); }
 
   void run_first (void)
   {
     if (! empty ())
       {
         // No leak on exception!
         std::auto_ptr<elem> ptr (lifo.top ());
         lifo.pop ();
         ptr->run ();
       }
   }
 
-  void run_top (int num) GCC_ATTR_DEPRECATED { run (num); }
+  GCC_ATTR_DEPRECATED void run_top (int num) { run (num); }
 
-  void discard_top (void) GCC_ATTR_DEPRECATED { discard_first (); }
+  GCC_ATTR_DEPRECATED void discard_top (void) { discard_first (); }
 
   void discard_first (void)
   {
     if (! empty ())
       {
         elem *ptr = lifo.top ();
         lifo.pop ();
         delete ptr;
       }
   }
 
-  void discard_top (int num) GCC_ATTR_DEPRECATED { discard (num); }
+  GCC_ATTR_DEPRECATED void discard_top (int num) { discard (num); }
 
   size_t size (void) const { return lifo.size (); }
 
 protected:
 
   std::stack<elem *> lifo;
 
 private:
