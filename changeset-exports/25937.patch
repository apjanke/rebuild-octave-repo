# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1539809863 14400
#      Wed Oct 17 16:57:43 2018 -0400
# Node ID 2ab0a9b663880eff213f6b33d6e2eee79a8d1a40
# Parent  7fa5ee67094aadd71e4376c8afb82d4ae892f29a
tmp gui startup commit

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -83,35 +83,35 @@ create_default_editor (QWidget *p)
   octave_unused_parameter (p);
 
   return 0;
 #endif
 }
 
 namespace octave
 {
-  octave_interpreter::octave_interpreter (gui_application *app_context)
+  octave_interpreter::octave_interpreter (gui_application& app_context)
     : QObject (), m_app_context (app_context)
   { }
 
   void octave_interpreter::execute (void)
   {
     // The application context owns the interpreter.
 
-    interpreter& interp = m_app_context->create_interpreter ();
+    interpreter& interp = m_app_context.create_interpreter ();
 
     int exit_status = 0;
 
     try
       {
         // Final initialization.
 
         interp.initialize ();
 
-        if (m_app_context->start_gui_p ())
+        if (m_app_context.start_gui_p ())
           {
             input_system& input_sys = interp.get_input_system ();
 
             input_sys.PS1 (">> ");
             input_sys.PS2 ("");
 
             tree_evaluator& tw = interp.get_evaluator ();
 
@@ -140,65 +140,54 @@ namespace octave
     catch (const exit_exception& ex)
       {
         exit_status = ex.exit_status ();
       }
 
     // Whether or not initialization succeeds we need to clean up the
     // interpreter once we are done with it.
 
-    m_app_context->delete_interpreter ();
+    m_app_context.delete_interpreter ();
 
     emit octave_finished_signal (exit_status);
   }
 
-  main_window::main_window (QWidget *p, gui_application *app_context)
-    : QMainWindow (p), m_app_context (app_context),
-      m_interpreter (new octave_interpreter (app_context)),
-      m_main_thread (new QThread ()), m_workspace_model (nullptr),
+  main_window::main_window (octave_qt_link *oct_qt_lnk)
+    : QMainWindow (),
+      m_octave_qt_link (oct_qt_lnk), m_workspace_model (nullptr),
       m_status_bar (nullptr), m_command_window (nullptr),
       m_history_window (nullptr), m_file_browser_window (nullptr),
       m_doc_browser_window (nullptr), m_editor_window (nullptr),
       m_workspace_window (nullptr), m_variable_editor_window (nullptr),
+      m_external_editor (new external_editor_interface (this)),
+      m_active_editor (m_external_editor),
       m_settings_dlg (nullptr), m_find_files_dlg (nullptr),
       m_release_notes_window (nullptr), m_community_news_window (nullptr),
-      m_octave_qt_link (nullptr), m_clipboard (QApplication::clipboard ()),
+      m_clipboard (QApplication::clipboard ()),
       m_prevent_readline_conflicts (true), m_suppress_dbg_location (true),
-      m_start_gui (app_context && app_context->start_gui_p ()),
-      m_file_encoding (QString ())
+      m_closing (false), m_file_encoding (QString ())
   {
-    if (m_start_gui)
-      {
-        m_workspace_model = new workspace_model ();
-        m_status_bar = new QStatusBar ();
-        m_command_window = new terminal_dock_widget (this);
-        m_history_window = new history_dock_widget (this);
-        m_file_browser_window = new files_dock_widget (this);
-        m_doc_browser_window = new documentation_dock_widget (this);
-        m_editor_window = create_default_editor (this);
-        m_variable_editor_window = new variable_editor (this);
-        m_workspace_window = new workspace_view (this);
-      }
-
-    // Initialize global Qt application metadata
-    QCoreApplication::setApplicationName ("GNU Octave");
-    QCoreApplication::setApplicationVersion (OCTAVE_VERSION);
+    construct_central_widget ();
+
+    m_workspace_model = new workspace_model ();
+    m_status_bar = new QStatusBar ();
+    m_command_window = new terminal_dock_widget (this);
+    m_history_window = new history_dock_widget (this);
+    m_file_browser_window = new files_dock_widget (this);
+    m_doc_browser_window = new documentation_dock_widget (this);
+    m_editor_window = create_default_editor (this);
+    m_variable_editor_window = new variable_editor (this);
+    m_workspace_window = new workspace_view (this);
+
+    m_active_editor = m_editor_window;
+
 #if defined (HAVE_QGUIAPPLICATION_SETDESKTOPFILENAME)
-    if (m_start_gui)
-      QGuiApplication::setDesktopFileName ("org.octave.Octave.desktop");
+    QGuiApplication::setDesktopFileName ("org.octave.Octave.desktop");
 #endif
 
-    // Register octave_value_list for connecting thread crossing signals
-    qRegisterMetaType<octave_value_list> ("octave_value_list");
-
-    m_external_editor = new external_editor_interface (this);
-    m_active_editor = m_editor_window;  // for connecting signals
-    if (! m_editor_window)
-      m_active_editor = m_external_editor;
-
     QSettings *settings = resource_manager::get_settings ();
 
     bool connect_to_web = true;
     QDateTime last_checked;
     int serial = 0;
     m_active_dock = nullptr;
 
     if (settings)
@@ -212,38 +201,37 @@ namespace octave
         serial = settings->value ("news/last_news_item", 0).toInt ();
         m_default_encoding = settings->value (ed_default_enc.key,
                                               ed_default_enc.def).toString ();
       }
 
     QDateTime current = QDateTime::currentDateTime ();
     QDateTime one_day_ago = current.addDays (-1);
 
-    if (m_start_gui && connect_to_web
+    if (connect_to_web
         && (! last_checked.isValid () || one_day_ago > last_checked))
       load_and_display_community_news (serial);
 
-    // We have to set up all our windows, before we finally launch octave.
+    construct_octave_qt_link ();
+
+    // We have to set up all our windows, before we finally launch
+    // octave.
+
     construct ();
 
-    connect (m_interpreter, SIGNAL (octave_ready_signal (void)),
-             this, SLOT (handle_octave_ready (void)));
-
-    connect (m_interpreter, SIGNAL (octave_finished_signal (int)),
-             this, SLOT (handle_octave_finished (int)));
-
-    connect (m_interpreter, SIGNAL (octave_finished_signal (int)),
-             m_main_thread, SLOT (quit (void)));
-
-    connect (m_main_thread, SIGNAL (finished (void)),
-             m_main_thread, SLOT (deleteLater (void)));
-
-    m_interpreter->moveToThread (m_main_thread);
-
-    m_main_thread->start ();
+    read_settings ();
+
+    init_terminal_size ();
+
+    // Connect signals for changes in visibility not before window is
+    // shown.
+
+    connect_visibility_changed ();
+
+    focus_command_window ();
   }
 
   main_window::~main_window (void)
   {
     // Note that we don't delete m_main_thread here.  That is handled by
     // deleteLater slot that is called when the m_main_thread issues a
     // finished signal.
 
@@ -255,38 +243,21 @@ namespace octave
     delete m_command_window;
     delete m_workspace_window;
     delete m_doc_browser_window;
     delete m_file_browser_window;
     delete m_history_window;
     delete m_status_bar;
     delete m_workspace_model;
     delete m_variable_editor_window;
-    delete m_interpreter;
-
-    if (m_find_files_dlg)
-      {
-        delete m_find_files_dlg;
-        m_find_files_dlg = nullptr;
-      }
-    if (m_release_notes_window)
-      {
-        delete m_release_notes_window;
-        m_release_notes_window = nullptr;
-      }
-    if (m_settings_dlg)
-      {
-        delete m_settings_dlg;
-        m_settings_dlg = nullptr;
-      }
-    if (m_community_news_window)
-      {
-        delete m_community_news_window;
-        m_community_news_window = nullptr;
-      }
+
+    delete m_find_files_dlg;
+    delete m_release_notes_window;
+    delete m_settings_dlg;
+    delete m_community_news_window;
   }
 
   bool main_window::command_window_has_focus (void) const
   {
     return m_command_window->has_focus ();
   }
 
   void main_window::focus_command_window (void)
@@ -671,35 +642,16 @@ namespace octave
     connect (m_settings_dlg, SIGNAL (apply_new_settings (void)),
              this, SLOT (request_reload_settings (void)));
 
     m_settings_dlg->setModal (false);
     m_settings_dlg->setAttribute (Qt::WA_DeleteOnClose);
     m_settings_dlg->show ();
   }
 
-  void main_window::copy_image_to_clipboard (const QString& file,
-                                             bool remove_file)
-  {
-    QClipboard *clipboard = QApplication::clipboard ();
-
-    QImage img (file);
-
-    if (img.isNull ())
-      {
-        // Report error?
-        return;
-      }
-
-    clipboard->setImage (img);
-
-    if (remove_file)
-      QFile::remove (file);
-  }
-
   void main_window::show_about_octave (void)
   {
     std::string message
       = octave_name_version_copyright_copying_warranty_and_bugs (true);
 
     QMessageBox::about (this, tr ("About Octave"),
                         QString::fromStdString (message));
   }
@@ -817,51 +769,40 @@ namespace octave
 
     if (cursor_blinking)
       QApplication::setCursorFlashTime (1000);  // 1000 ms flash time
     else
       QApplication::setCursorFlashTime (0);  // no flashing
 
   }
 
-  void main_window::confirm_shutdown_octave (void)
+  bool main_window::confirm_shutdown_octave (void)
   {
     bool closenow = true;
 
-    if (m_start_gui)
+    QSettings *settings = resource_manager::get_settings ();
+
+    if (settings->value ("prompt_to_exit", false).toBool ())
       {
-        QSettings *settings = resource_manager::get_settings ();
-
-        if (settings->value ("prompt_to_exit", false).toBool ())
-          {
-            int ans = QMessageBox::question (this, tr ("Octave"),
-                                             tr ("Are you sure you want to exit Octave?"),
-                                             (QMessageBox::Ok
-                                              | QMessageBox::Cancel),
-                                             QMessageBox::Ok);
-
-            if (ans != QMessageBox::Ok)
-              closenow = false;
-          }
+        int ans = QMessageBox::question (this, tr ("Octave"),
+                                         tr ("Are you sure you want to exit Octave?"),
+                                         (QMessageBox::Ok
+                                          | QMessageBox::Cancel),
+                                         QMessageBox::Ok);
+
+        if (ans != QMessageBox::Ok)
+          closenow = false;
+      }
 
 #if defined (HAVE_QSCINTILLA)
-        if (closenow)
-          closenow = m_editor_window->check_closing ();
+    if (closenow)
+      closenow = m_editor_window->check_closing ();
 #endif
-      }
-
-    // Wait for link thread to go to sleep state.
-    m_octave_qt_link->lock ();
-
-    m_octave_qt_link->shutdown_confirmation (closenow);
-
-    m_octave_qt_link->unlock ();
-
-    // Awake the worker thread so that it continues shutting down (or not).
-    m_octave_qt_link->wake_all ();
+
+    return closenow;
   }
 
   void main_window::prepare_to_exit (void)
   {
     // Find files dialog is constructed dynamically, not at time of main_window
     // construction.  Connecting it to qApp aboutToQuit signal would have
     // caused it to run after QSettings deleted.
     if (m_find_files_dlg)
@@ -1377,131 +1318,16 @@ namespace octave
           {
             edit->selectAll ();
           }
       }
     else
       emit selectAll_signal ();
   }
 
-  // Connect the signals emitted when the Octave thread wants to create
-  // a dialog box of some sort.  Perhaps a better place for this would be
-  // as part of the QUIWidgetCreator class.  However, mainWindow currently
-  // is not a global variable and not accessible for connecting.
-
-  void main_window::connect_uiwidget_links (void)
-  {
-    connect (&uiwidget_creator,
-             SIGNAL (create_dialog (const QString&, const QString&,
-                                    const QString&, const QStringList&,
-                                    const QString&, const QStringList&)),
-             this,
-             SLOT (handle_create_dialog (const QString&, const QString&,
-                                         const QString&, const QStringList&,
-                                         const QString&, const QStringList&)));
-
-    // Register QIntList so that list of ints may be part of a signal.
-    qRegisterMetaType<QIntList> ("QIntList");
-    connect (&uiwidget_creator,
-             SIGNAL (create_listview (const QStringList&, const QString&,
-                                      int, int, const QIntList&,
-                                      const QString&, const QStringList&,
-                                      const QString&, const QString&)),
-             this,
-             SLOT (handle_create_listview (const QStringList&, const QString&,
-                                           int, int, const QIntList&,
-                                           const QString&, const QStringList&,
-                                           const QString&, const QString&)));
-
-    // Register QFloatList so that list of floats may be part of a signal.
-    qRegisterMetaType<QFloatList> ("QFloatList");
-    connect (&uiwidget_creator,
-             SIGNAL (create_inputlayout (const QStringList&, const QString&,
-                                         const QFloatList&, const QFloatList&,
-                                         const QStringList&)),
-             this,
-             SLOT (handle_create_inputlayout (const QStringList&, const QString&,
-                                              const QFloatList&,
-                                              const QFloatList&,
-                                              const QStringList&)));
-
-    connect (&uiwidget_creator,
-             SIGNAL (create_filedialog (const QStringList &,const QString&,
-                                        const QString&, const QString&,
-                                        const QString&)),
-             this,
-             SLOT (handle_create_filedialog (const QStringList &, const QString&,
-                                             const QString&, const QString&,
-                                             const QString&)));
-  }
-
-  // Create a message dialog with specified string, buttons and decorative
-  // text.
-
-  void main_window::handle_create_dialog (const QString& message,
-                                          const QString& title,
-                                          const QString& icon,
-                                          const QStringList& button,
-                                          const QString& defbutton,
-                                          const QStringList& role)
-  {
-    MessageDialog *message_dialog = new MessageDialog (message, title, icon,
-                                                       button, defbutton, role);
-    message_dialog->setAttribute (Qt::WA_DeleteOnClose);
-    message_dialog->show ();
-  }
-
-  // Create a list dialog with specified list, initially selected, mode,
-  // view size and decorative text.
-
-  void main_window::handle_create_listview (const QStringList& list,
-                                            const QString& mode,
-                                            int wd, int ht,
-                                            const QIntList& initial,
-                                            const QString& name,
-                                            const QStringList& prompt,
-                                            const QString& ok_string,
-                                            const QString& cancel_string)
-  {
-    ListDialog *list_dialog = new ListDialog (list, mode, wd, ht,
-                                              initial, name, prompt,
-                                              ok_string, cancel_string);
-
-    list_dialog->setAttribute (Qt::WA_DeleteOnClose);
-    list_dialog->show ();
-  }
-
-  // Create an input dialog with specified prompts and defaults, title and
-  // row/column size specifications.
-  void main_window::handle_create_inputlayout (const QStringList& prompt,
-                                               const QString& title,
-                                               const QFloatList& nr,
-                                               const QFloatList& nc,
-                                               const QStringList& defaults)
-  {
-    InputDialog *input_dialog = new InputDialog (prompt, title, nr, nc,
-                                                 defaults);
-
-    input_dialog->setAttribute (Qt::WA_DeleteOnClose);
-    input_dialog->show ();
-  }
-
-  void main_window::handle_create_filedialog (const QStringList& filters,
-                                              const QString& title,
-                                              const QString& filename,
-                                              const QString& dirname,
-                                              const QString& multimode)
-  {
-    FileDialog *file_dialog = new FileDialog (filters, title, filename,
-                                              dirname, multimode);
-
-    file_dialog->setAttribute (Qt::WA_DeleteOnClose);
-    file_dialog->show ();
-  }
-
   void main_window::handle_show_doc (const QString& file)
   {
     m_doc_browser_window->setVisible (true);
     emit show_doc_signal (file);
   }
 
   void main_window::handle_register_doc (const QString& file)
   {
@@ -1515,63 +1341,54 @@ namespace octave
 
   void main_window::handle_octave_ready (void)
   {
     // actions after the startup files are executed
     QSettings *settings = resource_manager::get_settings ();
 
     QDir startup_dir = QDir ();    // current octave dir after startup
 
-    if (m_start_gui)
+    if (settings)
       {
-        if (settings)
+        if (settings->value ("restore_octave_dir").toBool ())
           {
-            if (settings->value ("restore_octave_dir").toBool ())
-              {
-                // restore last dir from previous session
-                QStringList curr_dirs
-                  = settings->value ("MainWindow/current_directory_list").toStringList ();
-                startup_dir
-                  = QDir (curr_dirs.at (0));  // last dir in previous session
-              }
-            else if (! settings->value ("octave_startup_dir").toString ().isEmpty ())
-              {
-                // do not restore but there is a startup dir configured
-                startup_dir
-                  = QDir (settings->value ("octave_startup_dir").toString ());
-              }
+            // restore last dir from previous session
+            QStringList curr_dirs
+              = settings->value ("MainWindow/current_directory_list").toStringList ();
+            startup_dir
+              = QDir (curr_dirs.at (0));  // last dir in previous session
           }
-
-        if (! startup_dir.exists ())
+        else if (! settings->value ("octave_startup_dir").toString ().isEmpty ())
           {
-            // the configured startup dir does not exist, take actual one
-            startup_dir = QDir ();
+            // do not restore but there is a startup dir configured
+            startup_dir
+              = QDir (settings->value ("octave_startup_dir").toString ());
           }
       }
 
+    if (! startup_dir.exists ())
+      {
+        // the configured startup dir does not exist, take actual one
+        startup_dir = QDir ();
+      }
+
     set_current_working_directory (startup_dir.absolutePath ());
 
     if (m_editor_window)
       {
 #if defined (HAVE_QSCINTILLA)
         // Octave ready, determine whether to create an empty script.
         // This can not be done when the editor is created because all functions
         // must be known for the lexer's auto completion informations
         m_editor_window->empty_script (true, false);
         m_editor_window->restore_session (settings);
 #endif
       }
 
-    if (m_start_gui)
-      focus_command_window ();  // make sure that the command window has focus
-  }
-
-  void main_window::handle_octave_finished (int exit_status)
-  {
-    qApp->exit (exit_status);
+    focus_command_window ();  // make sure that the command window has focus
   }
 
   void main_window::find_files (const QString& start_dir)
   {
 
     if (! m_find_files_dlg)
       {
         m_find_files_dlg = new find_files_dialog (this);
@@ -1742,320 +1559,296 @@ namespace octave
 
   void main_window::closeEvent (QCloseEvent *e)
   {
     e->ignore ();
     octave_cmd_exec *cmd = new octave_cmd_exec ("exit");
     queue_cmd (cmd);
   }
 
-  // Main subroutine of the constructor
-
-  void main_window::construct (void)
+  void main_window::construct_central_widget (void)
   {
-    m_closing = false;   // flag for editor files when closed
-
     // Create and set the central widget.  QMainWindow takes ownership of
     // the widget (pointer) so there is no need to delete the object upon
     // destroying this main_window.
 
     QWidget *dummyWidget = new QWidget ();
     dummyWidget->setObjectName ("CentralDummyWidget");
     dummyWidget->resize (10, 10);
     dummyWidget->setSizePolicy (QSizePolicy::Minimum, QSizePolicy::Minimum);
     dummyWidget->hide ();
     setCentralWidget (dummyWidget);
-
-    connect_uiwidget_links ();
-
-    construct_octave_qt_link ();
-
-    if (m_start_gui)
-      {
-        setWindowIcon (QIcon (":/actions/icons/logo.png"));
-
-        m_workspace_window->setModel (m_workspace_model);
-
-        connect (m_workspace_model, SIGNAL (model_changed (void)),
-                 m_workspace_window, SLOT (handle_model_changed (void)));
-
-        connect (m_octave_qt_link,
-                 SIGNAL (edit_variable_signal (const QString&,
-                                               const octave_value&)),
-                 this,
-                 SLOT (edit_variable (const QString&, const octave_value&)));
-
-        connect (m_octave_qt_link, SIGNAL (refresh_variable_editor_signal (void)),
-                 this, SLOT (refresh_variable_editor (void)));
-
-        connect (m_workspace_model,
-                 SIGNAL (rename_variable (const QString&, const QString&)),
-                 this,
-                 SLOT (handle_rename_variable_request (const QString&,
-                                                       const QString&)));
-
-        connect (m_variable_editor_window, SIGNAL (updated (void)),
-                 this, SLOT (handle_variable_editor_update (void)));
-
-        construct_menu_bar ();
-
-        construct_tool_bar ();
-
-        // Order is important.  Deleting QSettings must be last.
-        connect (qApp, SIGNAL (aboutToQuit (void)),
-                 m_command_window, SLOT (save_settings (void)));
-
-        connect (qApp, SIGNAL (aboutToQuit (void)),
-                 m_history_window, SLOT (save_settings (void)));
-
-        connect (qApp, SIGNAL (aboutToQuit (void)),
-                 m_file_browser_window, SLOT (save_settings (void)));
-
-        connect (qApp, SIGNAL (aboutToQuit (void)),
-                 m_doc_browser_window, SLOT (save_settings (void)));
-
-        connect (qApp, SIGNAL (aboutToQuit (void)),
-                 m_workspace_window, SLOT (save_settings (void)));
-
-        connect (qApp, SIGNAL (aboutToQuit (void)),
-                 m_editor_window, SLOT (save_settings (void)));
-
-        connect (qApp, SIGNAL (aboutToQuit (void)),
-                 m_variable_editor_window, SLOT (save_settings (void)));
-
-        connect (qApp, SIGNAL (aboutToQuit (void)),
-                 this, SLOT (prepare_to_exit (void)));
-
-        connect (qApp, SIGNAL (aboutToQuit (void)),
-                 shortcut_manager::instance, SLOT (cleanup_instance (void)));
-
-        // QSettings are saved upon deletion (i.e., cleanup_instance)
-        connect (qApp, SIGNAL (aboutToQuit (void)),
-                 resource_manager::instance, SLOT (cleanup_instance (void)));
-
-        connect (qApp, SIGNAL (focusChanged (QWidget*, QWidget*)),
-                 this, SLOT (focus_changed (QWidget*, QWidget*)));
-
-        connect (this, SIGNAL (settings_changed (const QSettings *)),
-                 this, SLOT (notice_settings (const QSettings *)));
-
-        connect (this, SIGNAL (editor_focus_changed (bool)),
-                 this, SLOT (disable_menu_shortcuts (bool)));
-
-        connect (this, SIGNAL (editor_focus_changed (bool)),
-                 m_editor_window, SLOT (enable_menu_shortcuts (bool)));
-
-        connect (m_editor_window,
-                 SIGNAL (request_open_file_external (const QString&, int)),
-                 m_external_editor,
-                 SLOT (call_custom_editor (const QString&, int)));
-
-        connect (m_external_editor,
-                 SIGNAL (request_settings_dialog (const QString&)),
-                 this, SLOT (process_settings_dialog_request (const QString&)));
-
-        connect (m_file_browser_window, SIGNAL (load_file_signal (const QString&)),
-                 this, SLOT (handle_load_workspace_request (const QString&)));
-
-        connect (m_file_browser_window, SIGNAL (open_any_signal (const QString&)),
-                 this, SLOT (handle_open_any_request (const QString&)));
-
-        connect (m_file_browser_window, SIGNAL (find_files_signal (const QString&)),
-                 this, SLOT (find_files (const QString&)));
-
-        setWindowTitle ("Octave");
-
-// See Octave bug #53409 and https://bugreports.qt.io/browse/QTBUG-55357
+  }
+
+// Main subroutine of the constructor
+
+  void main_window::construct (void)
+  {
+    setWindowIcon (QIcon (":/actions/icons/logo.png"));
+
+    m_workspace_window->setModel (m_workspace_model);
+
+    connect (m_workspace_model, SIGNAL (model_changed (void)),
+             m_workspace_window, SLOT (handle_model_changed (void)));
+
+    connect (m_octave_qt_link,
+             SIGNAL (edit_variable_signal (const QString&,
+                                           const octave_value&)),
+             this,
+             SLOT (edit_variable (const QString&, const octave_value&)));
+
+    connect (m_octave_qt_link, SIGNAL (refresh_variable_editor_signal (void)),
+             this, SLOT (refresh_variable_editor (void)));
+
+    connect (m_workspace_model,
+             SIGNAL (rename_variable (const QString&, const QString&)),
+             this,
+             SLOT (handle_rename_variable_request (const QString&,
+                                                   const QString&)));
+
+    connect (m_variable_editor_window, SIGNAL (updated (void)),
+             this, SLOT (handle_variable_editor_update (void)));
+
+    construct_menu_bar ();
+
+    construct_tool_bar ();
+
+    // Order is important.  Deleting QSettings must be last.
+    connect (qApp, SIGNAL (aboutToQuit (void)),
+             m_command_window, SLOT (save_settings (void)));
+
+    connect (qApp, SIGNAL (aboutToQuit (void)),
+             m_history_window, SLOT (save_settings (void)));
+
+    connect (qApp, SIGNAL (aboutToQuit (void)),
+             m_file_browser_window, SLOT (save_settings (void)));
+
+    connect (qApp, SIGNAL (aboutToQuit (void)),
+             m_doc_browser_window, SLOT (save_settings (void)));
+
+    connect (qApp, SIGNAL (aboutToQuit (void)),
+             m_workspace_window, SLOT (save_settings (void)));
+
+    connect (qApp, SIGNAL (aboutToQuit (void)),
+             m_editor_window, SLOT (save_settings (void)));
+
+    connect (qApp, SIGNAL (aboutToQuit (void)),
+             m_variable_editor_window, SLOT (save_settings (void)));
+
+    connect (qApp, SIGNAL (aboutToQuit (void)),
+             this, SLOT (prepare_to_exit (void)));
+
+    connect (qApp, SIGNAL (aboutToQuit (void)),
+             shortcut_manager::instance, SLOT (cleanup_instance (void)));
+
+    // QSettings are saved upon deletion (i.e., cleanup_instance)
+    connect (qApp, SIGNAL (aboutToQuit (void)),
+             resource_manager::instance, SLOT (cleanup_instance (void)));
+
+    connect (qApp, SIGNAL (focusChanged (QWidget*, QWidget*)),
+             this, SLOT (focus_changed (QWidget*, QWidget*)));
+
+    connect (this, SIGNAL (settings_changed (const QSettings *)),
+             this, SLOT (notice_settings (const QSettings *)));
+
+    connect (this, SIGNAL (editor_focus_changed (bool)),
+             this, SLOT (disable_menu_shortcuts (bool)));
+
+    connect (this, SIGNAL (editor_focus_changed (bool)),
+             m_editor_window, SLOT (enable_menu_shortcuts (bool)));
+
+    connect (m_editor_window,
+             SIGNAL (request_open_file_external (const QString&, int)),
+             m_external_editor,
+             SLOT (call_custom_editor (const QString&, int)));
+
+    connect (m_external_editor,
+             SIGNAL (request_settings_dialog (const QString&)),
+             this, SLOT (process_settings_dialog_request (const QString&)));
+
+    connect (m_file_browser_window, SIGNAL (load_file_signal (const QString&)),
+             this, SLOT (handle_load_workspace_request (const QString&)));
+
+    connect (m_file_browser_window, SIGNAL (open_any_signal (const QString&)),
+             this, SLOT (handle_open_any_request (const QString&)));
+
+    connect (m_file_browser_window, SIGNAL (find_files_signal (const QString&)),
+             this, SLOT (find_files (const QString&)));
+
+    setWindowTitle ("Octave");
+
+    // See Octave bug #53409 and https://bugreports.qt.io/browse/QTBUG-55357
 #if (QT_VERSION < 0x050601) || (QT_VERSION >= 0x050701)
-        setDockOptions (QMainWindow::AnimatedDocks
-                        | QMainWindow::AllowNestedDocks
-                        | QMainWindow::AllowTabbedDocks);
+    setDockOptions (QMainWindow::AnimatedDocks
+                    | QMainWindow::AllowNestedDocks
+                    | QMainWindow::AllowTabbedDocks);
 #else
-        setDockNestingEnabled (true);
+    setDockNestingEnabled (true);
 #endif
 
-        addDockWidget (Qt::RightDockWidgetArea, m_command_window);
-        addDockWidget (Qt::RightDockWidgetArea, m_doc_browser_window);
-        tabifyDockWidget (m_command_window, m_doc_browser_window);
+    addDockWidget (Qt::RightDockWidgetArea, m_command_window);
+    addDockWidget (Qt::RightDockWidgetArea, m_doc_browser_window);
+    tabifyDockWidget (m_command_window, m_doc_browser_window);
 
 #if defined (HAVE_QSCINTILLA)
-        addDockWidget (Qt::RightDockWidgetArea, m_editor_window);
-        tabifyDockWidget (m_command_window, m_editor_window);
+    addDockWidget (Qt::RightDockWidgetArea, m_editor_window);
+    tabifyDockWidget (m_command_window, m_editor_window);
 #endif
-        addDockWidget (Qt::RightDockWidgetArea, m_variable_editor_window);
-        tabifyDockWidget (m_command_window, m_variable_editor_window);
-
-        addDockWidget (Qt::LeftDockWidgetArea, m_file_browser_window);
-        addDockWidget (Qt::LeftDockWidgetArea, m_workspace_window);
-        addDockWidget (Qt::LeftDockWidgetArea, m_history_window);
-
-        int win_x = QApplication::desktop ()->width ();
-        int win_y = QApplication::desktop ()->height ();
-
-        if (win_x > 960)
-          win_x = 960;
-
-        if (win_y > 720)
-          win_y = 720;
-
-        setGeometry (0, 0, win_x, win_y);
-
-        setStatusBar (m_status_bar);
+    addDockWidget (Qt::RightDockWidgetArea, m_variable_editor_window);
+    tabifyDockWidget (m_command_window, m_variable_editor_window);
+
+    addDockWidget (Qt::LeftDockWidgetArea, m_file_browser_window);
+    addDockWidget (Qt::LeftDockWidgetArea, m_workspace_window);
+    addDockWidget (Qt::LeftDockWidgetArea, m_history_window);
+
+    int win_x = QApplication::desktop ()->width ();
+    int win_y = QApplication::desktop ()->height ();
+
+    if (win_x > 960)
+      win_x = 960;
+
+    if (win_y > 720)
+      win_y = 720;
+
+    setGeometry (0, 0, win_x, win_y);
+
+    setStatusBar (m_status_bar);
 
 #if defined (HAVE_QSCINTILLA)
-        connect (this,
-                 SIGNAL (insert_debugger_pointer_signal (const QString&, int)),
-                 m_editor_window,
-                 SLOT (handle_insert_debugger_pointer_request (const QString&,
-                                                               int)));
-
-        connect (this,
-                 SIGNAL (delete_debugger_pointer_signal (const QString&, int)),
-                 m_editor_window,
-                 SLOT (handle_delete_debugger_pointer_request (const QString&,
-                                                               int)));
-
-        connect (this,
-                 SIGNAL (update_breakpoint_marker_signal (bool, const QString&,
-                                                          int, const QString&)),
-                 m_editor_window,
-                 SLOT (handle_update_breakpoint_marker_request (bool,
-                                                                const QString&,
-                                                                int,
-                                                                const QString&)));
-
-        // Signals for removing/renaming files/dirs in the file browser
-        connect (m_file_browser_window,
-                 SIGNAL (file_remove_signal (const QString&, const QString&)),
-                 m_editor_window,
-                 SLOT (handle_file_remove (const QString&, const QString&)));
-
-        connect (m_file_browser_window, SIGNAL (file_renamed_signal (bool)),
-                 m_editor_window, SLOT (handle_file_renamed (bool)));
-
-        // Signals for removing/renaming files/dirs in the temrinal window
-        connect (m_octave_qt_link,
-                 SIGNAL (file_remove_signal (const QString&, const QString&)),
-                 this, SLOT (file_remove_proxy (const QString&, const QString&)));
-        connect (m_octave_qt_link, SIGNAL (file_renamed_signal (bool)),
-                 m_editor_window, SLOT (handle_file_renamed (bool)));
+    connect (this,
+             SIGNAL (insert_debugger_pointer_signal (const QString&, int)),
+             m_editor_window,
+             SLOT (handle_insert_debugger_pointer_request (const QString&,
+                                                           int)));
+
+    connect (this,
+             SIGNAL (delete_debugger_pointer_signal (const QString&, int)),
+             m_editor_window,
+             SLOT (handle_delete_debugger_pointer_request (const QString&,
+                                                           int)));
+
+    connect (this,
+             SIGNAL (update_breakpoint_marker_signal (bool, const QString&,
+                                                      int, const QString&)),
+             m_editor_window,
+             SLOT (handle_update_breakpoint_marker_request (bool,
+                                                            const QString&,
+                                                            int,
+                                                            const QString&)));
+
+    // Signals for removing/renaming files/dirs in the file browser
+    connect (m_file_browser_window,
+             SIGNAL (file_remove_signal (const QString&, const QString&)),
+             m_editor_window,
+             SLOT (handle_file_remove (const QString&, const QString&)));
+
+    connect (m_file_browser_window, SIGNAL (file_renamed_signal (bool)),
+             m_editor_window, SLOT (handle_file_renamed (bool)));
+
+    // Signals for removing/renaming files/dirs in the temrinal window
+    connect (m_octave_qt_link,
+             SIGNAL (file_remove_signal (const QString&, const QString&)),
+             this, SLOT (file_remove_proxy (const QString&, const QString&)));
+    connect (m_octave_qt_link, SIGNAL (file_renamed_signal (bool)),
+             m_editor_window, SLOT (handle_file_renamed (bool)));
 #endif
 
-        octave_link::post_event (this,
-                                 &main_window::resize_command_window_callback);
-
-        configure_shortcuts ();
-      }
+    octave_link::post_event (this,
+                             &main_window::resize_command_window_callback);
+
+    configure_shortcuts ();
   }
 
   void main_window::construct_octave_qt_link (void)
   {
-    m_octave_qt_link = new octave_qt_link (this, m_app_context);
-
-    octave_link::connect_link (m_octave_qt_link);
-
-    connect (m_octave_qt_link, SIGNAL (confirm_shutdown_signal (void)),
-             this, SLOT (confirm_shutdown_octave (void)));
+    connect (m_octave_qt_link,
+             SIGNAL (set_workspace_signal (bool, bool,
+                                           const symbol_scope&)),
+             m_workspace_model,
+             SLOT (set_workspace (bool, bool, const symbol_scope&)));
+
+    connect (m_octave_qt_link, SIGNAL (clear_workspace_signal (void)),
+             m_workspace_model, SLOT (clear_workspace (void)));
+
+    connect (m_octave_qt_link, SIGNAL (change_directory_signal (QString)),
+             this, SLOT (change_directory (QString)));
+
+    connect (m_octave_qt_link, SIGNAL (change_directory_signal (QString)),
+             m_file_browser_window, SLOT (update_octave_directory (QString)));
+
+    connect (m_octave_qt_link, SIGNAL (change_directory_signal (QString)),
+             m_editor_window, SLOT (update_octave_directory (QString)));
+
+    connect (m_octave_qt_link,
+             SIGNAL (execute_command_in_terminal_signal (QString)),
+             this, SLOT (execute_command_in_terminal (QString)));
+
+    connect (m_octave_qt_link,
+             SIGNAL (set_history_signal (const QStringList&)),
+             m_history_window, SLOT (set_history (const QStringList&)));
+
+    connect (m_octave_qt_link,
+             SIGNAL (append_history_signal (const QString&)),
+             m_history_window, SLOT (append_history (const QString&)));
+
+    connect (m_octave_qt_link,
+             SIGNAL (clear_history_signal (void)),
+             m_history_window, SLOT (clear_history (void)));
+
+    connect (m_octave_qt_link, SIGNAL (enter_debugger_signal (void)),
+             this, SLOT (handle_enter_debugger (void)));
+
+    connect (m_octave_qt_link, SIGNAL (exit_debugger_signal (void)),
+             this, SLOT (handle_exit_debugger (void)));
 
     connect (m_octave_qt_link,
-             SIGNAL (copy_image_to_clipboard_signal (const QString&, bool)),
-             this, SLOT (copy_image_to_clipboard (const QString&, bool)));
-
-    if (m_start_gui)
-      {
-        connect (m_octave_qt_link,
-                 SIGNAL (set_workspace_signal (bool, bool,
-                                               const symbol_scope&)),
-                 m_workspace_model,
-                 SLOT (set_workspace (bool, bool, const symbol_scope&)));
-
-        connect (m_octave_qt_link, SIGNAL (clear_workspace_signal (void)),
-                 m_workspace_model, SLOT (clear_workspace (void)));
-
-        connect (m_octave_qt_link, SIGNAL (change_directory_signal (QString)),
-                 this, SLOT (change_directory (QString)));
-
-        connect (m_octave_qt_link, SIGNAL (change_directory_signal (QString)),
-                 m_file_browser_window, SLOT (update_octave_directory (QString)));
-
-        connect (m_octave_qt_link, SIGNAL (change_directory_signal (QString)),
-                 m_editor_window, SLOT (update_octave_directory (QString)));
-
-        connect (m_octave_qt_link,
-                 SIGNAL (execute_command_in_terminal_signal (QString)),
-                 this, SLOT (execute_command_in_terminal (QString)));
-
-        connect (m_octave_qt_link,
-                 SIGNAL (set_history_signal (const QStringList&)),
-                 m_history_window, SLOT (set_history (const QStringList&)));
-
-        connect (m_octave_qt_link,
-                 SIGNAL (append_history_signal (const QString&)),
-                 m_history_window, SLOT (append_history (const QString&)));
-
-        connect (m_octave_qt_link,
-                 SIGNAL (clear_history_signal (void)),
-                 m_history_window, SLOT (clear_history (void)));
-
-        connect (m_octave_qt_link, SIGNAL (enter_debugger_signal (void)),
-                 this, SLOT (handle_enter_debugger (void)));
-
-        connect (m_octave_qt_link, SIGNAL (exit_debugger_signal (void)),
-                 this, SLOT (handle_exit_debugger (void)));
-
-        connect (m_octave_qt_link,
-                 SIGNAL (show_preferences_signal (void)),
-                 this, SLOT (process_settings_dialog_request (void)));
-
-        connect (m_octave_qt_link,
-                 SIGNAL (gui_preference_signal (const QString&, const QString&,
-                                                QString*)),
-                 this, SLOT (gui_preference (const QString&, const QString&,
-                                             QString*)));
-
-        connect (m_octave_qt_link,
-                 SIGNAL (edit_file_signal (const QString&)),
-                 m_active_editor,
-                 SLOT (handle_edit_file_request (const QString&)));
-
-        connect (m_octave_qt_link,
-                 SIGNAL (insert_debugger_pointer_signal (const QString&, int)),
-                 this,
-                 SLOT (handle_insert_debugger_pointer_request (const QString&,
-                                                               int)));
-
-        connect (m_octave_qt_link,
-                 SIGNAL (delete_debugger_pointer_signal (const QString&, int)),
-                 this,
-                 SLOT (handle_delete_debugger_pointer_request (const QString&,
-                                                               int)));
-
-        connect (m_octave_qt_link,
-                 SIGNAL (update_breakpoint_marker_signal (bool, const QString&,
-                                                          int, const QString&)),
-                 this,
-                 SLOT (handle_update_breakpoint_marker_request (bool, const QString&,
-                                                                int, const QString&)));
-
-        connect (m_octave_qt_link,
-                 SIGNAL (show_doc_signal (const QString &)),
-                 this, SLOT (handle_show_doc (const QString &)));
-
-        connect (m_octave_qt_link,
-                 SIGNAL (register_doc_signal (const QString &)),
-                 this, SLOT (handle_register_doc (const QString &)));
-
-        connect (m_octave_qt_link,
-                 SIGNAL (unregister_doc_signal (const QString &)),
-                 this, SLOT (handle_unregister_doc (const QString &)));
-      }
-
-    // Defer initializing and executing the interpreter until after the main
-    // window and QApplication are running to prevent race conditions
-    QTimer::singleShot (0, m_interpreter, SLOT (execute (void)));
+             SIGNAL (show_preferences_signal (void)),
+             this, SLOT (process_settings_dialog_request (void)));
+
+    connect (m_octave_qt_link,
+             SIGNAL (gui_preference_signal (const QString&, const QString&,
+                                            QString*)),
+             this, SLOT (gui_preference (const QString&, const QString&,
+                                         QString*)));
+
+    connect (m_octave_qt_link,
+             SIGNAL (edit_file_signal (const QString&)),
+             m_active_editor,
+             SLOT (handle_edit_file_request (const QString&)));
+
+    connect (m_octave_qt_link,
+             SIGNAL (insert_debugger_pointer_signal (const QString&, int)),
+             this,
+             SLOT (handle_insert_debugger_pointer_request (const QString&,
+                                                           int)));
+
+    connect (m_octave_qt_link,
+             SIGNAL (delete_debugger_pointer_signal (const QString&, int)),
+             this,
+             SLOT (handle_delete_debugger_pointer_request (const QString&,
+                                                           int)));
+
+    connect (m_octave_qt_link,
+             SIGNAL (update_breakpoint_marker_signal (bool, const QString&,
+                                                      int, const QString&)),
+             this,
+             SLOT (handle_update_breakpoint_marker_request (bool, const QString&,
+                                                            int, const QString&)));
+
+    connect (m_octave_qt_link,
+             SIGNAL (show_doc_signal (const QString &)),
+             this, SLOT (handle_show_doc (const QString &)));
+
+    connect (m_octave_qt_link,
+             SIGNAL (register_doc_signal (const QString &)),
+             this, SLOT (handle_register_doc (const QString &)));
+
+    connect (m_octave_qt_link,
+             SIGNAL (unregister_doc_signal (const QString &)),
+             this, SLOT (handle_unregister_doc (const QString &)));
   }
 
   QAction* main_window::add_action (QMenu *menu, const QIcon& icon,
                                     const QString& text, const char *member,
                                     const QWidget *receiver)
   {
     QAction *a;
 
@@ -2869,9 +2662,224 @@ namespace octave
          "</p>\n"
          "</body>\n"
          "</html>\n");
 
     emit display_news_signal (html_text);
 
     emit finished ();
   }
+
+  main_thing::main_thing (gui_application& app_context)
+    : QObject (), m_octave_qt_link (new octave_qt_link (app_context)),
+      m_interpreter (new octave_interpreter (app_context)),
+      m_main_thread (new QThread ()),
+      m_main_window (nullptr)
+  {
+    // Initialize global Qt application metadata.
+
+    QCoreApplication::setApplicationName ("GNU Octave");
+    QCoreApplication::setApplicationVersion (OCTAVE_VERSION);
+
+    // Register octave_value_list for connecting thread crossing signals.
+
+    qRegisterMetaType<octave_value_list> ("octave_value_list");
+
+    octave_link::connect_link (m_octave_qt_link);
+
+    connect (m_octave_qt_link, SIGNAL (confirm_shutdown_signal (void)),
+             this, SLOT (confirm_shutdown_octave (void)));
+
+    connect (m_octave_qt_link,
+             SIGNAL (copy_image_to_clipboard_signal (const QString&, bool)),
+             this, SLOT (copy_image_to_clipboard (const QString&, bool)));
+
+    connect_uiwidget_links ();
+
+    if (app_context.start_gui_p ())
+      {
+        m_main_window = new main_window (m_octave_qt_link);
+
+        connect (m_interpreter, SIGNAL (octave_ready_signal (void)),
+                 m_main_window, SLOT (handle_octave_ready (void)));
+      }
+
+    connect (m_interpreter, SIGNAL (octave_finished_signal (int)),
+             this, SLOT (handle_octave_finished (int)));
+
+    connect (m_interpreter, SIGNAL (octave_finished_signal (int)),
+             m_main_thread, SLOT (quit (void)));
+
+    connect (m_main_thread, SIGNAL (finished (void)),
+             m_main_thread, SLOT (deleteLater (void)));
+
+    // Defer initializing and executing the interpreter until after the main
+    // window and QApplication are running to prevent race conditions
+    QTimer::singleShot (0, m_interpreter, SLOT (execute (void)));
+
+    m_interpreter->moveToThread (m_main_thread);
+
+    m_main_thread->start ();
+  }
+
+  main_thing::~main_thing (void)
+  {
+    delete m_main_window;
+    delete m_interpreter;
+  }
+
+  void main_thing::handle_octave_finished (int exit_status)
+  {
+    qApp->exit (exit_status);
+  }
+
+  void main_thing::confirm_shutdown_octave (void)
+  {
+    bool closenow = true;
+
+    if (m_main_window)
+      closenow = m_main_window->confirm_shutdown_octave ();
+
+    // Wait for link thread to go to sleep state.
+    m_octave_qt_link->lock ();
+
+    m_octave_qt_link->shutdown_confirmation (closenow);
+
+    m_octave_qt_link->unlock ();
+
+    // Awake the worker thread so that it continues shutting down (or not).
+    m_octave_qt_link->wake_all ();
+  }
+
+  void main_thing::copy_image_to_clipboard (const QString& file,
+                                            bool remove_file)
+  {
+    QClipboard *clipboard = QApplication::clipboard ();
+
+    QImage img (file);
+
+    if (img.isNull ())
+      {
+        // Report error?
+        return;
+      }
+
+    clipboard->setImage (img);
+
+    if (remove_file)
+      QFile::remove (file);
+  }
+
+  // Create a message dialog with specified string, buttons and decorative
+  // text.
+
+  void main_thing::handle_create_dialog (const QString& message,
+                                         const QString& title,
+                                         const QString& icon,
+                                         const QStringList& button,
+                                         const QString& defbutton,
+                                         const QStringList& role)
+  {
+    MessageDialog *message_dialog = new MessageDialog (message, title, icon,
+                                                       button, defbutton, role);
+    message_dialog->setAttribute (Qt::WA_DeleteOnClose);
+    message_dialog->show ();
+  }
+
+  // Create a list dialog with specified list, initially selected, mode,
+  // view size and decorative text.
+
+  void main_thing::handle_create_listview (const QStringList& list,
+                                           const QString& mode,
+                                           int wd, int ht,
+                                           const QIntList& initial,
+                                           const QString& name,
+                                           const QStringList& prompt,
+                                           const QString& ok_string,
+                                           const QString& cancel_string)
+  {
+    ListDialog *list_dialog = new ListDialog (list, mode, wd, ht,
+                                              initial, name, prompt,
+                                              ok_string, cancel_string);
+
+    list_dialog->setAttribute (Qt::WA_DeleteOnClose);
+    list_dialog->show ();
+  }
+
+  // Create an input dialog with specified prompts and defaults, title and
+  // row/column size specifications.
+  void main_thing::handle_create_inputlayout (const QStringList& prompt,
+                                              const QString& title,
+                                              const QFloatList& nr,
+                                              const QFloatList& nc,
+                                              const QStringList& defaults)
+  {
+    InputDialog *input_dialog = new InputDialog (prompt, title, nr, nc,
+                                                 defaults);
+
+    input_dialog->setAttribute (Qt::WA_DeleteOnClose);
+    input_dialog->show ();
+  }
+
+  void main_thing::handle_create_filedialog (const QStringList& filters,
+                                             const QString& title,
+                                             const QString& filename,
+                                             const QString& dirname,
+                                             const QString& multimode)
+  {
+    FileDialog *file_dialog = new FileDialog (filters, title, filename,
+                                              dirname, multimode);
+
+    file_dialog->setAttribute (Qt::WA_DeleteOnClose);
+    file_dialog->show ();
+  }
+
+  // Connect the signals emitted when the Octave thread wants to create
+  // a dialog box of some sort.  Perhaps a better place for this would be
+  // as part of the QUIWidgetCreator class.  However, mainWindow currently
+  // is not a global variable and not accessible for connecting.
+
+  void main_thing::connect_uiwidget_links (void)
+  {
+    connect (&uiwidget_creator,
+             SIGNAL (create_dialog (const QString&, const QString&,
+                                    const QString&, const QStringList&,
+                                    const QString&, const QStringList&)),
+             this,
+             SLOT (handle_create_dialog (const QString&, const QString&,
+                                         const QString&, const QStringList&,
+                                         const QString&, const QStringList&)));
+
+    // Register QIntList so that list of ints may be part of a signal.
+    qRegisterMetaType<QIntList> ("QIntList");
+    connect (&uiwidget_creator,
+             SIGNAL (create_listview (const QStringList&, const QString&,
+                                      int, int, const QIntList&,
+                                      const QString&, const QStringList&,
+                                      const QString&, const QString&)),
+             this,
+             SLOT (handle_create_listview (const QStringList&, const QString&,
+                                           int, int, const QIntList&,
+                                           const QString&, const QStringList&,
+                                           const QString&, const QString&)));
+
+    // Register QFloatList so that list of floats may be part of a signal.
+    qRegisterMetaType<QFloatList> ("QFloatList");
+    connect (&uiwidget_creator,
+             SIGNAL (create_inputlayout (const QStringList&, const QString&,
+                                         const QFloatList&, const QFloatList&,
+                                         const QStringList&)),
+             this,
+             SLOT (handle_create_inputlayout (const QStringList&, const QString&,
+                                              const QFloatList&,
+                                              const QFloatList&,
+                                              const QStringList&)));
+
+    connect (&uiwidget_creator,
+             SIGNAL (create_filedialog (const QStringList &,const QString&,
+                                        const QString&, const QString&,
+                                        const QString&)),
+             this,
+             SLOT (handle_create_filedialog (const QStringList &, const QString&,
+                                             const QString&, const QString&,
+                                             const QString&)));
+  }
 }
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -66,48 +66,48 @@ class octave_value;
 namespace octave
 {
   class octave_interpreter : public QObject
   {
     Q_OBJECT
 
   public:
 
-    octave_interpreter (gui_application *app_context);
+    octave_interpreter (gui_application& app_context);
 
     ~octave_interpreter (void) = default;
 
   signals:
 
     void octave_ready_signal (void);
     void octave_finished_signal (int);
 
   public slots:
 
     //! Initialize and execute the octave interpreter.
 
     void execute (void);
 
   private:
 
-    gui_application *m_app_context;
+    gui_application& m_app_context;
   };
 
   //! Represents the main window.
 
   class main_window : public QMainWindow
   {
     Q_OBJECT
 
   public:
 
     typedef std::pair <std::string, std::string> name_pair;
     typedef std::pair <int, int> int_pair;
 
-    main_window (QWidget *parent, gui_application *app_context);
+    main_window (octave_qt_link *oct_qt_lnk);
 
     ~main_window (void);
 
     bool command_window_has_focus (void) const;
 
     void focus_command_window (void);
 
   signals:
@@ -162,21 +162,19 @@ namespace octave
     void display_community_news (const QString& news);
     void open_bug_tracker_page (void);
     void open_octave_packages_page (void);
     void open_contribute_page (void);
     void open_donate_page (void);
     void process_settings_dialog_request (const QString& desired_tab
                                           = QString ());
 
-    void copy_image_to_clipboard (const QString& file, bool remove_file);
-
     void show_about_octave (void);
     void notice_settings (const QSettings *settings);
-    void confirm_shutdown_octave (void);
+    bool confirm_shutdown_octave (void);
     void prepare_to_exit (void);
     void reset_windows (void);
 
     void change_directory (const QString& dir);
     void browse_for_directory (void);
     void set_current_working_directory (const QString& dir);
     void change_directory_up (void);
     void accept_directory_line_edit (void);
@@ -211,49 +209,23 @@ namespace octave
     void set_window_layout (QSettings *settings);
     void write_settings (void);
     void connect_visibility_changed (void);
 
     void copyClipboard (void);
     void pasteClipboard (void);
     void selectAll (void);
 
-    void connect_uiwidget_links (void);
-
-    void handle_create_dialog (const QString& message, const QString& title,
-                               const QString& icon, const QStringList& button,
-                               const QString& defbutton,
-                               const QStringList& role);
-
-    void handle_create_listview (const QStringList& list, const QString& mode,
-                                 int width, int height,
-                                 const QIntList& initial,
-                                 const QString& name,
-                                 const QStringList& prompt,
-                                 const QString& ok_string,
-                                 const QString& cancel_string);
-
-    void handle_create_inputlayout (const QStringList&, const QString&,
-                                    const QFloatList&, const QFloatList&,
-                                    const QStringList&);
-
-    void handle_create_filedialog (const QStringList& filters,
-                                   const QString& title,
-                                   const QString& filename,
-                                   const QString& dirname,
-                                   const QString& multimode);
-
     void gui_preference (const QString& key, const QString& value,
                          QString* read_value);
     void handle_show_doc (const QString& file);
     void handle_register_doc (const QString& file);
     void handle_unregister_doc (const QString& file);
 
     void handle_octave_ready ();
-    void handle_octave_finished (int);
 
     //! Find files dialog.
     //!@{
     void find_files (const QString& startdir = QDir::currentPath ());
     void find_files_finished (int) { }
     //!@}
 
     //! Setting global shortcuts.
@@ -300,16 +272,18 @@ namespace octave
     void handle_variable_editor_update (void);
 
   protected:
 
     void closeEvent (QCloseEvent *closeEvent);
 
   private:
 
+    void construct_central_widget (void);
+
     void construct (void);
 
     void construct_octave_qt_link (void);
 
     QAction * add_action (QMenu *menu, const QIcon& icon,
                           const QString& text, const char *member,
                           const QWidget *receiver = nullptr);
 
@@ -352,21 +326,17 @@ namespace octave
     bool focus_console_after_command (void);
 
     void new_figure_callback (void);
 
     void configure_shortcuts (void);
 
     QList<octave_dock_widget *> dock_widget_list (void);
 
-    gui_application *m_app_context;
-
-    octave_interpreter *m_interpreter;
-
-    QThread *m_main_thread;
+    octave_qt_link *m_octave_qt_link;
 
     workspace_model *m_workspace_model;
 
     QHash<QMenu*, QStringList> m_hash_menu_text;
 
     QString m_default_encoding;
 
     //! Toolbar.
@@ -464,30 +434,27 @@ namespace octave
     find_files_dialog *m_find_files_dlg;
 
     //! Release notes window.
 
     QWidget *m_release_notes_window;
 
     QWidget *m_community_news_window;
 
-    octave_qt_link *m_octave_qt_link;
-
     QClipboard *m_clipboard;
 
     //! Command queue and semaphore to synchronize execution signals and
     //! related callbacks.
 
     octave_command_queue m_cmd_queue;
 
     //! Some class global flags.
     //!@{
     bool m_prevent_readline_conflicts;
     bool m_suppress_dbg_location;
-    bool m_start_gui;
 
     //! Flag for closing the whole application.
 
     bool m_closing;
     //!@}
 
     QString m_file_encoding;
   };
@@ -516,11 +483,65 @@ namespace octave
 
   private:
 
     QString m_base_url;
     QString m_page;
     int m_serial;
     bool m_connect_to_web;
   };
+
+  class main_thing : public QObject
+  {
+    Q_OBJECT
+
+  public:
+
+    main_thing (gui_application& app_context);
+
+    ~main_thing (void);
+
+  public slots:
+
+    void handle_octave_finished (int);
+
+    void confirm_shutdown_octave (void);
+
+    void copy_image_to_clipboard (const QString& file, bool remove_file);
+
+    void handle_create_dialog (const QString& message, const QString& title,
+                               const QString& icon, const QStringList& button,
+                               const QString& defbutton,
+                               const QStringList& role);
+
+    void handle_create_listview (const QStringList& list, const QString& mode,
+                                 int width, int height,
+                                 const QIntList& initial,
+                                 const QString& name,
+                                 const QStringList& prompt,
+                                 const QString& ok_string,
+                                 const QString& cancel_string);
+
+    void handle_create_inputlayout (const QStringList&, const QString&,
+                                    const QFloatList&, const QFloatList&,
+                                    const QStringList&);
+
+    void handle_create_filedialog (const QStringList& filters,
+                                   const QString& title,
+                                   const QString& filename,
+                                   const QString& dirname,
+                                   const QString& multimode);
+
+  private:
+
+    octave_qt_link *m_octave_qt_link;
+
+    octave_interpreter *m_interpreter;
+
+    QThread *m_main_thread;
+
+    main_window *m_main_window;
+
+    void connect_uiwidget_links (void);
+  };
 }
 
 #endif
diff --git a/libgui/src/octave-gui.cc b/libgui/src/octave-gui.cc
--- a/libgui/src/octave-gui.cc
+++ b/libgui/src/octave-gui.cc
@@ -63,31 +63,76 @@ static void
 message_handler (QtMsgType, const QMessageLogContext &, const QString &)
 #else
 message_handler (QtMsgType, const char *)
 #endif
 { }
 
 namespace octave
 {
+  class gui_application::impl
+  {
+  public:
+
+    impl (int argc, char **argv)
+      : m_argc (argc), m_argv (argv), m_gui_running (false)
+    { }
+
+    impl (const impl&) = delete;
+
+    impl& operator = (const impl&) = delete;
+
+    ~impl (void) = default;
+
+    int execute (gui_application& gui_app);
+
+    bool gui_running (void) const { return m_gui_running; }
+    void gui_running (bool arg) { m_gui_running = arg; }
+
+  private:
+
+    int m_argc;
+    char **m_argv;
+    bool m_gui_running;
+  };
+
   gui_application::gui_application (int argc, char **argv)
-    : application (argc, argv), m_argc (argc), m_argv (argv),
-      m_gui_running (false)
+    : application (argc, argv), m_impl (new impl (argc, argv))
   {
     // This should probably happen early.
     sysdep_init ();
   }
 
+  gui_application::~gui_application (void)
+  {
+    delete m_impl;
+  }
+
   bool gui_application::start_gui_p (void) const
   {
     return m_options.gui ();
   }
 
   int gui_application::execute (void)
   {
+    return m_impl->execute (*this);
+  }
+
+  bool gui_application::gui_running (void) const
+  {
+    return m_impl->gui_running ();
+  }
+
+  void gui_application::gui_running (bool arg)
+  {
+    m_impl->gui_running (arg);
+  }
+
+  int gui_application::impl::execute (gui_application& gui_app)
+  {
     octave_block_interrupt_signal ();
 
     set_application_id ();
 
     std::string show_gui_msgs =
       sys::env::getenv ("OCTAVE_SHOW_GUI_MESSAGES");
 
     // Installing our handler suppresses the messages.
@@ -116,17 +161,17 @@ namespace octave
     QTextCodec::setCodecForCStrings (QTextCodec::codecForName ("UTF-8"));
 #endif
 
     // set windows style for windows
 #if defined (Q_OS_WIN32)
     qt_app.setStyle (QStyleFactory::create ("Windows"));
 #endif
 
-    bool start_gui = start_gui_p ();
+    bool start_gui = gui_app.start_gui_p ();
 
     // Show welcome wizard if this is the first run.
 
     if (resource_manager::is_first_run () && start_gui)
       {
         // Before wizard.
         resource_manager::config_translators (&qt_tr, &qsci_tr, &gui_tr);
 
@@ -173,31 +218,18 @@ namespace octave
         shortcut_manager::init_data ();
       }
 
     // Force left-to-right alignment (see bug #46204)
     qt_app.setLayoutDirection (Qt::LeftToRight);
 
     // Create and show main window.
 
-    main_window w (nullptr, this);
+    main_thing thing (gui_app);
 
     if (start_gui)
-      {
-        w.read_settings ();
-
-        w.init_terminal_size ();
-
-        // Connect signals for changes in visibility not before w
-        // is shown.
-
-        w.connect_visibility_changed ();
-
-        w.focus_command_window ();
-
-        gui_running (true);
-      }
+      gui_running (true);
     else
       qt_app.setQuitOnLastWindowClosed (false);
 
     return qt_app.exec ();
   }
 }
diff --git a/libgui/src/octave-gui.h b/libgui/src/octave-gui.h
--- a/libgui/src/octave-gui.h
+++ b/libgui/src/octave-gui.h
@@ -34,25 +34,27 @@ namespace octave
     gui_application (int argc, char **argv);
 
     // No copying, at least not yet.
 
     gui_application (const gui_application&) = delete;
 
     gui_application& operator = (const gui_application&) = delete;
 
+    ~gui_application (void);
+
     // Should we start the GUI or fall back to the CLI?
     bool start_gui_p (void) const;
 
     int execute (void);
 
-    bool gui_running (void) const { return m_gui_running; }
-    void gui_running (bool arg) { m_gui_running = arg; }
+    bool gui_running (void) const;
+    void gui_running (bool arg);
 
   private:
 
-    int m_argc;
-    char **m_argv;
-    bool m_gui_running;
+    class impl;
+
+    impl *m_impl;
   };
 }
 
 #endif
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -50,17 +50,17 @@ along with Octave; see the file COPYING.
 #include "octave-qt-link.h"
 #include "resource-manager.h"
 
 Q_DECLARE_METATYPE (octave_value)
 Q_DECLARE_METATYPE (octave::symbol_scope)
 
 namespace octave
 {
-  octave_qt_link::octave_qt_link (QWidget *, gui_application *app_context)
+  octave_qt_link::octave_qt_link (gui_application& app_context)
     : octave_link (), m_app_context (app_context)
   {
     qRegisterMetaType<octave_value> ("octave_value");
     qRegisterMetaType<symbol_scope> ("symbol_scope");
   }
 
   bool octave_qt_link::do_confirm_shutdown (void)
   {
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -53,17 +53,17 @@ namespace octave
   //! readline event hook, which lives in the octave thread.
 
   class octave_qt_link : public QObject, public octave_link
   {
     Q_OBJECT
 
   public:
 
-    octave_qt_link (QWidget *p, gui_application *app_context);
+    octave_qt_link (gui_application& app_context);
 
     // No copying!
 
     octave_qt_link (const octave_qt_link&) = delete;
 
     octave_qt_link& operator = (const octave_qt_link&) = delete;
 
     ~octave_qt_link (void) = default;
@@ -156,17 +156,17 @@ namespace octave
     void unlock (void) { m_mutex.unlock (); }
     void wake_all (void) { m_waitcondition.wakeAll (); }
 
   private:
 
     void do_insert_debugger_pointer (const std::string& file, int line);
     void do_delete_debugger_pointer (const std::string& file, int line);
 
-    gui_application *m_app_context;
+    gui_application& m_app_context;
 
     bool m_shutdown_confirm_result;
 
     QMutex m_mutex;
     QWaitCondition m_waitcondition;
 
   signals:
 
