# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1421730339 28800
#      Mon Jan 19 21:05:39 2015 -0800
# Node ID 6b09dd57652111fb925eddaeb82199873537fffc
# Parent  40b0f41a710088591bb7cd9a11d7be597d5cb751
Fix cummin/cummax operations on rows when NaN element present (bug #44009).

* mx-inlines.cc (OP_CUMMINMAX_FCN2): Add missing else clauses.

* max.cc (Fcummin, Fcummax): Add BIST tests for cummin and cummax to
verify fix.

* contributors.in: Add Lachlan Andrew to list of contributors.

diff --git a/doc/interpreter/contributors.in b/doc/interpreter/contributors.in
--- a/doc/interpreter/contributors.in
+++ b/doc/interpreter/contributors.in
@@ -1,14 +1,15 @@
 Ben Abbott
 Drew Abbot
 Andy Adler
 Adam H. Aitkenhead
 Giles Anderson
 Joel Andersson
+Lachlan Andrew
 Pedro Angelo
 Muthiah Annamalai
 Markus Appel
 Branden Archer
 Marco Atzeri
 Shai Ayal
 Roger Banks
 Ben Barrowes
diff --git a/libinterp/corefcn/max.cc b/libinterp/corefcn/max.cc
--- a/libinterp/corefcn/max.cc
+++ b/libinterp/corefcn/max.cc
@@ -1011,27 +1011,29 @@ iw = 1  2  2  4  4  6\n\
 {
   return do_cumminmax_body (args, nargout, true);
 }
 
 /*
 %!assert (cummin ([1, 4, 2, 3]), [1 1 1 1])
 %!assert (cummin ([1; -10; 5; -2]), [1; -10; -10; -10])
 %!assert (cummin ([4, i; -2, 2]), [4, i; -2, i])
+%!assert (cummin ([1 2; NaN 1], 2), [1 1; NaN 1])
 
 %!test
 %! x = reshape (1:8, [2,2,2]);
 %! assert (cummin (x, 1), reshape ([1 1 3 3 5 5 7 7], [2,2,2]));
 %! assert (cummin (x, 2), reshape ([1 2 1 2 5 6 5 6], [2,2,2]));
 %! [w, iw] = cummin (x, 3);
 %! assert (ndims (w), 3);
 %! assert (w, repmat ([1 3; 2 4], [1 1 2]));
 %! assert (ndims (iw), 3);
 %! assert (iw, ones (2,2,2));
 
+
 %!error cummin ()
 %!error cummin (1, 2, 3)
 */
 
 DEFUN (cummax, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} cummax (@var{x})\n\
 @deftypefnx {Built-in Function} {} cummax (@var{x}, @var{dim})\n\
@@ -1065,16 +1067,17 @@ iw = 1  2  2  4  4  4\n\
 {
   return do_cumminmax_body (args, nargout, false);
 }
 
 /*
 %!assert (cummax ([1, 4, 2, 3]), [1 4 4 4])
 %!assert (cummax ([1; -10; 5; -2]), [1; 1; 5; 5])
 %!assert (cummax ([4, i 4.9, -2, 2, 3+4i]), [4, 4, 4.9, 4.9, 4.9, 3+4i])
+%!assert (cummax ([1 NaN 0; NaN NaN 1], 2), [1 1 1; NaN NaN 1])
 
 %!test
 %! x = reshape (8:-1:1, [2,2,2]);
 %! assert (cummax (x, 1), reshape ([8 8 6 6 4 4 2 2], [2,2,2]));
 %! assert (cummax (x, 2), reshape ([8 7 8 7 4 3 4 3], [2,2,2]));
 %! [w, iw] = cummax (x, 3);
 %! assert (ndims (w), 3);
 %! assert (w, repmat ([8 6; 7 5], [1 1 2]));
diff --git a/liboctave/operators/mx-inlines.cc b/liboctave/operators/mx-inlines.cc
--- a/liboctave/operators/mx-inlines.cc
+++ b/liboctave/operators/mx-inlines.cc
@@ -934,16 +934,18 @@ F (const T *v, T *r, octave_idx_type m, 
     { \
       nan = false; \
       for (octave_idx_type i = 0; i < m; i++) \
         {  \
           if (xisnan (v[i])) \
             { r[i] = r0[i]; nan = true; } \
           else if (xisnan (r0[i]) || v[i] OP r0[i]) \
             r[i] = v[i]; \
+          else \
+            r[i] = r0[i]; \
         } \
       j++; v += m; r0 = r; r += m; \
     } \
   while (j < n) \
     { \
       for (octave_idx_type i = 0; i < m; i++) \
         if (v[i] OP r0[i]) \
           r[i] = v[i]; \
@@ -971,16 +973,18 @@ F (const T *v, T *r, octave_idx_type *ri
     { \
       nan = false; \
       for (octave_idx_type i = 0; i < m; i++) \
         {  \
           if (xisnan (v[i])) \
             { r[i] = r0[i]; ri[i] = r0i[i]; nan = true; } \
           else if (xisnan (r0[i]) || v[i] OP r0[i]) \
             { r[i] = v[i]; ri[i] = j; }\
+          else \
+            { r[i] = r0[i]; ri[i] = r0i[i]; }\
         } \
       j++; v += m; r0 = r; r += m; r0i = ri; ri += m;  \
     } \
   while (j < n) \
     { \
       for (octave_idx_type i = 0; i < m; i++) \
         if (v[i] OP r0[i]) \
           { r[i] = v[i]; ri[i] = j; } \
