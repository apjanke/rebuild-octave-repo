# HG changeset patch
# User Rik <rik@octave.org>
# Date 1467922023 25200
#      Thu Jul 07 13:07:03 2016 -0700
# Node ID 9121d6584f6ac047ac2f6c6bd31a611cc5908db0
# Parent  88b3c69322365707f071a88aefc7e74bd2d38b62
Overhaul graphics implementation of hold() (bug #43559).

* NEWS: Announce possible color changes in plots relying on "hold on".

* hold.m: Deprecate "hold all" in docstring.  Eliminate use of __hold_all__
graphics property.  Update %!demo to use "hold on" only.

* ishold.m: Put input validation first.  Use switch statement rather than
if/else tree for clarity.

* graphics.in.h: Remove hidden __hold_all__ graphics property of axes.

* graphics.cc (axes::properties::set_defaults): Remove use of __hold_all__.

* newplot.m: Delete kluge use of __next_line_color__ and __next_line_style__.
Set colororderindex and linestyleorderindex to 1 on new plots.

* __next_line_color__.m: Completely rewrite to use the axes graphic property
"colororderindex" to keep track of which color should be used next.  Also
increment "linestyleorderindex" when number of colors used rolls over so that
colors will repeat with the next linestyle in the series.  Update BIST test.

* __next_line_style__.m: Completely rewrite to use the axes graphic property
"linestyleorderindex" to keep track of which linestyle should be used next.

* imagesc.m, axis.m, legend.m: Replace "hold all" with "hold on" in all demos.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -17,16 +17,24 @@ Summary of important user-visible change
     Examples: 0b101 == 5 or 0B1100_0001 == 0xC1
 
  ** The default colormap is now set to "viridis" which is also the
     default colormap in matplotlib.  This new colormap fixes some of the
     main issues with the old default colormap "jet" such as its bad
     "luminance profile" and is also more similar to Matlab's new default
     colormap "parula".
 
+ ** The graphics command "hold on" now ensures that each new plot added to
+    an existing plot has a different color or linestyle according to the
+    "ColorOrder" and/or "LineStyleOrder" properties.  This is equivalent
+    to the old command "hold all" and was made for Matlab compatibility.
+    Existing code *may* produce differently colored plots if it did not
+    specify the color for a plot and relied on each new plot having the
+    the default first color in the "ColorOrder" property.
+
  ** When starting, Octave now looks in the function path for a file
     startup.m and executes any commands found there.  This change was
     made to accommodate Matlab users.  Octave has it's own configuration
     system based on the file .octaverc which is preferred.
 
  ** Octal ('\NNN') and hex ('\xNN') escape sequences in single quoted
     strings are now interpreted by the function do_string_escapes().
     The *printf family of functions now supports octal and hex escape
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -4831,17 +4831,16 @@ axes::properties::set_defaults (base_gra
   zdir = "normal";
   yaxislocation = "left";
   xaxislocation = "bottom";
 
   Matrix tview (1, 2, 0.0);
   tview(1) = 90;
   view = tview;
 
-  __hold_all__ = "off";
   nextplot = "replace";
 
   ambientlightcolor = Matrix (1, 3, 1.0);
 
   // Note: camera properties (not mode) will be set in update_transform
   camerapositionmode = "auto";
   cameratargetmode = "auto";
   cameraupvectormode = "auto";
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -3917,17 +3917,16 @@ public:
       radio_property zscale alu , "{linear}|log"
       row_vector_property ztick mu , default_axes_tick ()
       any_property zticklabel S , ""
       radio_property zticklabelmode u , "{auto}|manual"
       double_property zticklabelrotation , 0.0
       radio_property ztickmode u , "{auto}|manual"
       // Octave-specific properties
       double_property mousewheelzoom , 0.5
-      bool_property __hold_all__ h , "off"
       // hidden properties for alignment of subplots
       radio_property autopos_tag h , "{none}|subplot"
       // hidden properties for inset
       array_property looseinset hu , Matrix (1, 4, 0.0)
       // hidden properties for transformation computation
       array_property x_viewtransform h , Matrix (4, 4, 0.0)
       array_property x_projectiontransform h , Matrix (4, 4, 0.0)
       array_property x_viewporttransform h , Matrix (4, 4, 0.0)
diff --git a/scripts/image/imagesc.m b/scripts/image/imagesc.m
--- a/scripts/image/imagesc.m
+++ b/scripts/image/imagesc.m
@@ -154,30 +154,30 @@ endfunction
 %! title ("two consecutive images");
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! g = 0.1:0.1:10;
 %! h = g'*g;
 %! imagesc (g, g, sin (h));
-%! hold all;
+%! hold on;
 %! plot (g, 11.0 * ones (size (g)));
 %! imagesc (g, g+12, cos (h/2));
 %! axis ([0 10 0 22]);
 %! hold off;
 %! title ("image, line, image");
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! g = 0.1:0.1:10;
 %! h = g'*g;
 %! plot (g, 10.5 * ones (size (g)));
-%! hold all;
+%! hold on;
 %! imagesc (g, g, sin (h));
 %! plot (g, 11.0 * ones (size (g)));
 %! imagesc (g, g+12, cos (h/2));
 %! plot (g, 11.5 * ones (size (g)));
 %! axis ([0 10 0 22]);
 %! hold off;
 %! title ("line, image, line, image, line");
 
diff --git a/scripts/plot/appearance/axis.m b/scripts/plot/appearance/axis.m
--- a/scripts/plot/appearance/axis.m
+++ b/scripts/plot/appearance/axis.m
@@ -600,17 +600,17 @@ endfunction
 %! set (gca, 'yaxislocation', 'zero');
 %! box off;
 %! title ({'no plot box', 'xaxislocation = top, yaxislocation = zero'});
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   plot (11:20, [21:24, NaN, -Inf, 27:30]);
-%!   hold all;
+%!   hold on;
 %!   plot (11:20, 25.5 + rand (10));
 %!   axis tight;
 %!   assert (axis (), [11 20 21 30]);
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
 %!test
diff --git a/scripts/plot/appearance/legend.m b/scripts/plot/appearance/legend.m
--- a/scripts/plot/appearance/legend.m
+++ b/scripts/plot/appearance/legend.m
@@ -1394,26 +1394,26 @@ endfunction
 %! h = plot (x,sin(x), x,cos(x), x,sin(x.^2/10), x,cos(x.^2/10));
 %! title ('Only the sin() objects have keylabels');
 %! legend (h([1, 3]), {'sin (x)', 'sin (x^2/10)'}, 'location', 'southwest');
 
 %!demo
 %! clf;
 %! x = 0:0.1:10;
 %! plot (x, sin (x), ';sin (x);');
-%! hold all;
+%! hold on;
 %! plot (x, cos (x), ';cos (x);');
 %! hold off;
 %! title ('legend constructed from multiple plot calls');
 
 %!demo
 %! clf;
 %! x = 0:0.1:10;
 %! plot (x, sin (x), ';sin (x);');
-%! hold all;
+%! hold on;
 %! plot (x, cos (x), ';cos (x);');
 %! hold off;
 %! title ('Specified label text overrides previous labels');
 %! legend ({'Sine', 'Cosine'}, 'location', 'northeastoutside');
 
 %!demo
 %! clf;
 %! x = 0:10;
diff --git a/scripts/plot/util/__next_line_color__.m b/scripts/plot/util/__next_line_color__.m
--- a/scripts/plot/util/__next_line_color__.m
+++ b/scripts/plot/util/__next_line_color__.m
@@ -22,52 +22,58 @@
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## Return the next line color in the rotation.
 
 ## Author: Carl Osterwisch
 ## Author: jwe
 
-function rgb = __next_line_color__ (reset)
+function rgb = __next_line_color__ ()
+
+  ca = gca ();
 
-  persistent reset_colors = true;
+  colororder = get (ca, "colororder");
+  if (isempty (colororder))
+    rgb = [0 0 0];   # black
+    return;
+  endif
 
-  if (nargin == 1)
-    ## Indicates whether the next call will increment or not
-    reset_colors = reset;
-  else
-    ## Find and return the next line color
-    ca = gca ();
-    colororder = get (ca, "colororder");
-    if (reset_colors)
-      color_index = 1;
-      reset_colors = false;
-    else
-      ## Executed when "hold all" is active
-      n_kids = length (get (ca, "children"));
-      n_colors = rows (colororder);
-      color_index = mod (n_kids, n_colors) + 1;
-    endif
-    rgb = colororder(color_index,:);
+  color_idx = fix (get (ca, "colororderindex"));
+  num_colors = rows (colororder);
+  if (color_idx > num_colors)
+    color_idx = mod (color_idx, num_colors);
+  endif
+  if (color_idx < 1)
+    color_idx = 1;
   endif
 
+  rgb = colororder(color_idx, :);
+
+  if (++color_idx > num_colors)
+    color_idx = mod (color_idx, num_colors);
+    ## Rollover of all colors switches to next linestyle.
+    style_idx = fix (get (ca, "linestyleorderindex"));
+    set (ca, "linestyleorderindex", ++style_idx);
+  endif
+  set (ca, "colororderindex", color_idx);
+
 endfunction
 
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   hax = axes ();
 %!   set (hax, "colororder", [1 0 0; 0 1 0; 0 0 1]);
 %!   hold on;
-%!   h = plot (1:5,1:5,'o', 1:4,1:4, "x", 1:3,1:3, "d");
+%!   h = plot (1:5,1:5,'o', 1:4,1:4,"x", 1:3,1:3,"d");
 %!   assert (get (h, "color"), {[1 0 0]; [0 1 0]; [0 0 1]});
 %!   cla (hax);
-%!   hold all;
-%!   h1 = plot (1:5,1:5,'o');
+%!   hold on;
+%!   h1 = plot (1:5,1:5, 'o');
 %!   h2 = plot (1:4,1:4, "x");
 %!   h3 = plot (1:3,1:3, "d");
 %!   assert (get ([h1;h2;h3], "color"), {[1 0 0]; [0 1 0]; [0 0 1]});
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
diff --git a/scripts/plot/util/__next_line_style__.m b/scripts/plot/util/__next_line_style__.m
--- a/scripts/plot/util/__next_line_style__.m
+++ b/scripts/plot/util/__next_line_style__.m
@@ -19,60 +19,58 @@
 ## -*- texinfo -*-
 ## @deftypefn {} {@var{style} =} __next_line_style__ (@var{reset})
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## Return the next line style in the rotation.
 
 
-function [linestyle, marker] = __next_line_style__ (reset)
+function [linestyle, marker] = __next_line_style__ ()
+
+  ca = gca ();
 
-  persistent reset_style = true;
+  styleorder = get (ca, "linestyleorder");
+  if (isempty (styleorder))
+    linestyle = "-";   # basic line
+    marker = "none";   # no marker
+    return;
+  endif
 
-  if (nargin == 1)
-    ## Indicates whether the next call will increment or not
-    reset_style = reset;
-  else
-    ## Find and return the next line style
-    ca = gca ();
-    style_rotation = get (ca, "linestyleorder");
-    if (ischar (style_rotation))
-      style_rotation = strsplit (style_rotation, "|");
-    endif
-    nStyles = length (style_rotation);
-    if (reset_style || (nStyles < 2))
-      style_index = 1;
-      reset_style = false;
-    else
-      ## Executed when "hold all" is active
-      nChildren = length (get (ca, "Children"));
-      nColors = rows (get (ca, "ColorOrder"));
-      style_index = mod (floor (nChildren/nColors), nStyles) + 1;
-    endif
-    options = __pltopt__ ("__next_line_style__",
-                          style_rotation(style_index));
-    linestyle = options.linestyle;
-    marker = options.marker;
+  if (ischar (styleorder))
+    styleorder = cellstr (styleorder);
   endif
 
+  style_idx = fix (get (ca, "linestyleorderindex"));
+  num_styles = rows (styleorder);
+  if (style_idx > num_styles)
+    style_idx = mod (style_idx, num_styles);
+  endif
+  if (style_idx < 1)
+    style_idx = 1;
+  endif
+
+  options = __pltopt__ ("__next_line_style__", styleorder{style_idx});
+  linestyle = options.linestyle;
+  marker = options.marker;
+
 endfunction
 
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   hax = axes ();
 %!   set (hax, "colororder", [0 0 1]);
 %!   set (hax, "linestyleorder", {"-", ":", "--"});
 %!   hold on;
 %!   h = plot (1:5,1:5, 1:4,1:4, 1:3,1:3);
 %!   assert (get (h, "linestyle"), {"-"; ":"; "--"});
 %!   cla (hax);
-%!   hold all;
+%!   hold on;
 %!   h1 = plot (1:5,1:5);
 %!   h2 = plot (1:4,1:4);
 %!   h3 = plot (1:3,1:3);
 %!   assert (get ([h1;h2;h3], "linestyle"), {"-"; ":"; "--"});
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
diff --git a/scripts/plot/util/hold.m b/scripts/plot/util/hold.m
--- a/scripts/plot/util/hold.m
+++ b/scripts/plot/util/hold.m
@@ -15,31 +15,29 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} hold
 ## @deftypefnx {} {} hold on
 ## @deftypefnx {} {} hold off
-## @deftypefnx {} {} hold all
 ## @deftypefnx {} {} hold (@var{hax}, @dots{})
 ## Toggle or set the @qcode{"hold"} state of the plotting engine which
 ## determines whether new graphic objects are added to the plot or replace
 ## the existing objects.
 ##
 ## @table @code
 ## @item hold on
 ## Retain plot data and settings so that subsequent plot commands are displayed
-## on a single graph.
+## on a single graph.  Line color and line style are advanced for each new plot
+## added.
 ##
-## @item hold all
-## Retain plot line color, line style, data, and settings so that subsequent
-## plot commands are displayed on a single graph with the next line color and
-## style.
+## @item hold all (deprecated)
+## Equivalent to @code{hold on}.
 ##
 ## @item hold off
 ## Restore default graphics settings which clear the graph and reset axis
 ## properties before each new plot command.  (default).
 ##
 ## @item hold
 ## Toggle the current hold state.
 ## @end table
@@ -87,41 +85,31 @@ function hold (varargin)
   endif
 
   if (turn_hold_off)
     set (hax, "nextplot", "replace");
   else
     set (hax, "nextplot", "add");
     set (hfig, "nextplot", "add");
   endif
-  set (hax, "__hold_all__", hold_all);
 
 endfunction
 
 
 %!demo
 %! clf;
 %! t = linspace (0, 2*pi, 100);
 %! plot (t, sin (t));
 %! hold on;
 %! plot (t, cos (t));
 %! title ({'hold on', '2 plots shown on same graph'});
 %! hold off;
 
 %!demo
 %! clf;
-%! t = linspace (0, 2*pi, 100);
-%! plot (t, sin (t));
-%! hold all;
-%! plot (t, cos (t));
-%! title ({'hold all', '2 plots shown on same graph with linestyle also preserved'});
-%! hold off;
-
-%!demo
-%! clf;
 %! A = rand (100);
 %! [X, Y] = find (A > 0.95);
 %! imshow (A);
 %! hold on;
 %! plot (X, Y, 'o');
 %! hold off;
 %! title ('hold with image and plot');
 
diff --git a/scripts/plot/util/ishold.m b/scripts/plot/util/ishold.m
--- a/scripts/plot/util/ishold.m
+++ b/scripts/plot/util/ishold.m
@@ -33,29 +33,33 @@ function retval = ishold (h)
   if (nargin > 1)
     print_usage ();
   endif
 
   if (nargin == 0)
     fig = gcf ();
     ax = get (fig, "currentaxes");
   else
-    if (ishandle (h))
-      if (strcmp (get (h, "type"), "figure"))
+    if (! ishandle (h))
+      error ("ishold: H must be an axes or figure graphics handle");
+    endif
+
+    switch (get (h, "type"))
+      case "figure"
         fig = h;
         ax = get (fig, "currentaxes");
-      elseif (strcmp (get (h, "type"), "axes"))
+
+      case "axes"
         ax = h;
         fig = ancestor (ax, "figure");
-      else
+
+      otherwise
         error ("ishold: H must be an axes or figure graphics handle");
-      endif
-    else
-      error ("ishold: H must be an axes or figure graphics handle");
-    endif
+
+    endswitch
   endif
 
   retval = (strcmp (get (fig, "nextplot"), "add")
             && ! isempty (ax) && strcmp (get (ax, "nextplot"), "add"));
 
 endfunction
 
 
diff --git a/scripts/plot/util/newplot.m b/scripts/plot/util/newplot.m
--- a/scripts/plot/util/newplot.m
+++ b/scripts/plot/util/newplot.m
@@ -147,26 +147,16 @@ function hax = newplot (hsave = [])
   if (isempty (ca))
     ca = gca ();
     deleteall = true;
   else
     set (cf, "currentaxes", ca);
     deleteall = false;
   endif
 
-  ## FIXME: Is this necessary anymore?
-  ##        It seems like a kluge that belongs somewhere else.
-  if (strcmp (get (ca, "__hold_all__"), "off"))
-    __next_line_color__ (true);
-    __next_line_style__ (true);
-  else
-    __next_line_color__ (false);
-    __next_line_style__ (false);
-  endif
-
   anp = get (ca, "nextplot");
   switch (anp)
     case "add"
       ## Default case.  Doesn't require action.
     case "replacechildren"
       if (! deleteall && ca != hsave)
         ## preserve hsave and its parents, uncles, ...
         kids = allchild (ca);
@@ -208,16 +198,21 @@ function hax = newplot (hsave = [])
       ## Actually, __go_axes_init__ does both less and more.
       ## It doesn't really remove all children since it re-instantiates
       ## xlabel, ylabel, zlabel, and title text objects.
       ## Also it preserves font properties like fontsize.
       ## For the time being, in order to have axis labels and title work,
       ## the above code is is required.
   endswitch
 
+  ## Reset line and color styles when hold is not on 
+  if (! strcmp (anp, "add"))
+    set (ca, "colororderindex", 1, "linestyleorderindex", 1);
+  endif
+
   if (nargout > 0)
     hax = ca;
   endif
 
 endfunction
 
 
 %!test
