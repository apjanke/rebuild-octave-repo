# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1548516866 0
#      Sat Jan 26 15:34:26 2019 +0000
# Node ID 8fbda39ca075877f10fb88ac16609bc5bf5022f5
# Parent  fc7d72df08fa39fcf330027a647db8a006e99ff7
eliminate "automatic" type from symbol info class

* syminfo.h, syminfo.cc (symbol_info::m_is_automatic): Delete data
member and all uses.
(symbol_info::symbol_info): Eliminate is_automatic and is_complex
args.  Change all uses.
(symbol_info::is_automatic): Delete.

diff --git a/libinterp/corefcn/call-stack.cc b/libinterp/corefcn/call-stack.cc
--- a/libinterp/corefcn/call-stack.cc
+++ b/libinterp/corefcn/call-stack.cc
@@ -101,18 +101,18 @@ namespace octave
     symbol_info_list symbol_stats;
 
     for (const auto& sr : symrec_list)
       {
         octave_value value = sr.varval (m_context);
 
         if (value.is_defined ())
           {
-            symbol_info syminf (sr.name (), value, sr.is_automatic (),
-                                value.iscomplex (), sr.is_formal (),
+            symbol_info syminf (sr.name (), value,
+                                sr.is_formal (),
                                 sr.is_global (), sr.is_persistent ());
 
             symbol_stats.append (syminf);
           }
       }
 
     return symbol_stats;
   }
@@ -797,18 +797,18 @@ do_who_two (octave::interpreter& interp,
         {
           octave_value value = sr.varval (context);
 
           if (value.is_defined ())
             {
               if (verbose)
                 {
                   octave::symbol_info
-                    syminf (sr.name (), value, sr.is_automatic (),
-                            value.iscomplex (), sr.is_formal (),
+                    syminf (sr.name (), value,
+                            sr.is_formal (),
                             sr.is_global (), sr.is_persistent ());
 
                   symbol_stats.append (syminf);
                 }
               else
                 symbol_names.push_back (sr.name ());
             }
         }
diff --git a/libinterp/corefcn/syminfo.cc b/libinterp/corefcn/syminfo.cc
--- a/libinterp/corefcn/syminfo.cc
+++ b/libinterp/corefcn/syminfo.cc
@@ -100,24 +100,23 @@ namespace octave
                 error ("whos_line_format: modifier '%c' unknown",
                        param.modifier);
               }
 
             switch (param.command)
               {
               case 'a':
                 {
-                  char tmp[6];
+                  char tmp[5];
 
-                  tmp[0] = (m_is_automatic ? 'a' : ' ');
-                  tmp[1] = (m_is_complex ? 'c' : ' ');
-                  tmp[2] = (m_is_formal ? 'f' : ' ');
-                  tmp[3] = (m_is_global ? 'g' : ' ');
-                  tmp[4] = (m_is_persistent ? 'p' : ' ');
-                  tmp[5] = 0;
+                  tmp[0] = (m_is_complex ? 'c' : ' ');
+                  tmp[1] = (m_is_formal ? 'f' : ' ');
+                  tmp[2] = (m_is_global ? 'g' : ' ');
+                  tmp[3] = (m_is_persistent ? 'p' : ' ');
+                  tmp[4] = 0;
 
                   os << tmp;
                 }
                 break;
 
               case 'b':
                 os << m_value.byte_size ();
                 break;
diff --git a/libinterp/corefcn/syminfo.h b/libinterp/corefcn/syminfo.h
--- a/libinterp/corefcn/syminfo.h
+++ b/libinterp/corefcn/syminfo.h
@@ -47,44 +47,40 @@ namespace octave
     std::string line;
   };
 
   class symbol_info
   {
   public:
 
     symbol_info (const std::string& name, const octave_value& value,
-                 bool is_automatic, bool is_complex, bool is_formal,
-                 bool is_global, bool is_persistent)
-      : m_name (name), m_value (value), m_is_automatic (is_automatic),
-        m_is_complex (is_complex), m_is_formal (is_formal),
-        m_is_global (is_global), m_is_persistent (is_persistent)
+                 bool is_formal, bool is_global, bool is_persistent)
+      : m_name (name), m_value (value), m_is_complex (value.iscomplex ()),
+        m_is_formal (is_formal), m_is_global (is_global),
+        m_is_persistent (is_persistent)
     { }
 
     std::string name (void) const { return m_name; }
 
     octave_value value (void) const { return m_value; }
 
-    bool is_automatic (void) const { return m_is_automatic; }
-
     bool is_complex (void) const { return m_is_complex; }
 
     bool is_formal (void) const { return m_is_formal; }
 
     bool is_global (void) const { return m_is_global; }
 
     bool is_persistent (void) const { return m_is_persistent; }
 
     void display_line (std::ostream& os,
                        const std::list<whos_parameter>& params) const;
   private:
 
     std::string m_name;
     octave_value m_value;
-    bool m_is_automatic;
     bool m_is_complex;
     bool m_is_formal;
     bool m_is_global;
     bool m_is_persistent;
   };
 
   class symbol_info_list : public base_list<symbol_info>
   {
