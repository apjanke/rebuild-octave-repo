# HG changeset patch
# User jwe
# Date 1174492639 0
#      Wed Mar 21 15:57:19 2007 +0000
# Node ID 0cc5ca7b1e91b49e26f1e527ad1b50ddbf5fbbe8
# Parent  05a48d6cf163882554469a8b436c61a42b07ab10
[project @ 2007-03-21 15:57:19 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,12 +1,17 @@
+2007-03-20  David Bateman  <dbateman@free.fr>
+
+	* plot/__go_draw_axes__.m: Handle some colors with older gnuplot.
+
 2007-03-21  John W. Eaton  <jwe@octave.org>
 
 	* plot/subplot.m: If we find an existing subplot region, set
 	it to be the "currentaxes" property for the current figure.
+	Delete old axes objects if the new axes object overlaps the old.
 
 2007-03-20  David Bateman  <dbateman@free.fr>
 
 	* general/Makefile.in: Include arrayfun.m in SOURCES.
 
 2007-03-20  Bill Denney  <denney@seas.upenn.edu>
 
 	* general/arrayfun.m: New function.
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -350,20 +350,25 @@ function __go_draw_axes__ (h, plot_strea
 	case "line"
 	  data_idx++;
 	  filespec{data_idx} = '-';
 	  if (isempty (obj.keylabel))
 	    titlespec{data_idx} = "title \"\"";
 	  else
 	    titlespec{data_idx} = strcat ("title \"", obj.keylabel, "\"");
 	  endif
-	  style = do_linestyle_command (obj, data_idx, plot_stream);
+	  [style, typ] = do_linestyle_command (obj, data_idx, plot_stream);
 	  usingclause{data_idx} = "";
-	  withclause{data_idx} = sprintf ("with %s linestyle %d",
-					  style, data_idx);
+	  if (have_newer_gnuplot || isnan (typ))
+	    withclause{data_idx} = sprintf ("with %s linestyle %d",
+					    style, data_idx);
+	  else
+	    withclause{data_idx} = sprintf ("with %s linetype %d",
+					    style, typ);
+	  endif
 	  parametric(i) = true;
 	  if (! isempty (obj.zdata))
 	    nd = 3;
 	    xdat = obj.xdata(:);
 	    ydat = obj.ydata(:);
 	    zdat = obj.zdata(:);
 	    if (xautoscale)
 	      xmin = min (xmin, min (xdat));
@@ -474,26 +479,31 @@ function __go_draw_axes__ (h, plot_strea
 	      endif
 	      data{data_idx} = [xdat, ydat]';
 	      usingclause{data_idx} = "using ($1):($2)";
 	    endif
 	  endif
 
 	case "surface"
 	  data_idx++;
-	  style = do_linestyle_command (obj, data_idx, plot_stream);
+	  [style, typ] = do_linestyle_command (obj, data_idx, plot_stream);
 	  filespec{data_idx} = '-';
 	  if (isempty (obj.keylabel))
 	    titlespec{data_idx} = "title \"\"";
 	  else
 	    titlespec{data_idx} = strcat ("title \"", obj.keylabel, "\"");
 	  endif
 	  usingclause{data_idx} = "";
-	  withclause{data_idx} = sprintf ("with %s linestyle %d",
-					  style, data_idx);
+	  if (have_newer_gnuplot || isnan (typ))
+	    withclause{data_idx} = sprintf ("with %s linestyle %d",
+					    style, data_idx);
+	  else
+	    withclause{data_idx} = sprintf ("with %s linetype %d",
+					    style, typ);
+	  endif
 	  parametric(i) = false;
 	  nd = 3;
 	  xdat = obj.xdata;
 	  ydat = obj.ydata;
 	  zdat = obj.zdata;
 	  if (xautoscale)
 	    tx = xdat(:);
 	    xmin = min (xmin, min (tx));
@@ -759,33 +769,56 @@ function lim = get_axis_limits (min_val,
     min_val = scale * floor (min_val / scale);
     max_val = scale * ceil (max_val / scale);
   endif
 
   lim = [min_val, max_val];
 
 endfunction
 
-function style = do_linestyle_command (obj, idx, plot_stream)
+function [style, typ] = do_linestyle_command (obj, idx, plot_stream)
 
   persistent have_newer_gnuplot ...
     = compare_versions (__gnuplot_version__ (), "4.0", ">");
 
   if (have_newer_gnuplot)
     fprintf (plot_stream, "set style line %d default;\n", idx);
   endif
   fprintf (plot_stream, "set style line %d", idx);
 
   found_style = false;
+  typ = NaN;
 
-  if (isfield (obj, "color") && have_newer_gnuplot)
+  if (isfield (obj, "color"))
     color = obj.color;
     if (isnumeric (color))
-      fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
-	       round (255*color));
+      if (have_newer_gnuplot)
+	fprintf (plot_stream, " linecolor rgb \"#%02x%02x%02x\"",
+		 round (255*color));
+      else
+	if (isequal (color, [0,0,0]))
+	  typ = -1;
+	elseif (isequal (color, [1,0,0]))
+	  typ = 1;
+	elseif (isequal (color, [0,1,0]))
+	  typ = 2;
+	elseif (isequal (color, [0,0,1]))
+	  typ = 3;
+	elseif (isequal (color, [1,0,1]))
+	  typ = 4;
+	elseif (isequal (color, [0,1,1]))
+	  typ = 5;
+	elseif (isequal (color, [1,1,1]))
+	  typ = 6;
+	elseif (isequal (color, [1,1,0]))
+	  typ = 7;
+	else
+	  typ = 2;
+	endif
+      endif
     endif
     found_style = true;
   endif
 
   if (isfield (obj, "linestyle"))
     switch (obj.linestyle)
       case "-"
 	lt = "1";
diff --git a/scripts/plot/drawnow.m b/scripts/plot/drawnow.m
--- a/scripts/plot/drawnow.m
+++ b/scripts/plot/drawnow.m
@@ -21,65 +21,87 @@
 ## @deftypefn {Function File} {} drawnow ()
 ## Display the current graphics.
 ## @end deftypefn
 
 ## Author: jwe
 
 function drawnow (term, file)
 
+  if (nargin == 2)
+    h = get (0, "currentfigure");
+    if (h)
+      f = get (h);
+      plot_stream = [];
+      unwind_protect
+	plot_stream = open_gnuplot_stream ([], term, file);
+	__go_draw_figure__ (f, plot_stream);
+      unwind_protect_cleanup
+	if (! isempty (plot_stream))
+	  pclose (plot_stream);
+	endif
+      end_unwind_protect
+    else
+      error ("drawnow: nothing to draw");
+    endif
+  elseif (nargin == 0)
+    for h = __go_figure_handles__ ()
+      if (! (isnan (h) || h == 0))
+	f = get (h);
+	plot_stream = f.__plot_stream__;
+	figure_is_visible = strcmp (f.visible, "on");
+	if (figure_is_visible)
+	  if (isempty (plot_stream))
+	    plot_stream = open_gnuplot_stream (h);
+	  endif
+	  __go_draw_figure__ (f, plot_stream);
+	elseif (! isempty (plot_stream))
+	  pclose (plot_stream);
+	  set (h, "__plot_stream__", []);
+	endif
+	__request_drawnow__ (false);
+      endif
+    endfor
+  else
+    print_usage ();
+  endif
+
+  __request_drawnow__ (false);
+
+endfunction
+
+function plot_stream = open_gnuplot_stream (h, term, file)
+
   ## If drawnow is cleared, it is possible to register __go_close_all__
   ## more than once, but that is not fatal.
   persistent __go_close_all_registered__;
 
-  ## Use this instead of calling gcf to avoid creating a figure.
-
-  h = get (0, "currentfigure");
+  cmd = gnuplot_binary ();
 
-  if (h)
-
-    f = get (h);
-
-    plot_stream = f.__plot_stream__;
+  if (! isempty (h) && gnuplot_use_title_option ())
+    cmd = sprintf ("%s -title \"Figure %d\"", cmd, h);
+  endif
 
-    if (isempty (plot_stream))
-      cmd = gnuplot_binary ();
-      if (gnuplot_use_title_option ())
-        cmd = sprintf ("%s -title \"Figure %d\"", cmd, h);
-      endif
-      plot_stream = popen (cmd, "w");
-      if (plot_stream < 0)
-	error ("drawnow: failed to open connection to gnuplot");
-      else
-	set (h, "__plot_stream__", plot_stream);
-	if (isunix () && isempty (getenv ("DISPLAY")))
-	  fprintf (plot_stream, "set terminal dumb\n;");
-	endif
-	if (isempty (__go_close_all_registered__))
-	  atexit ("__go_close_all__");
-	  __go_close_all_registered__ = true;
-	endif
-      endif
+  plot_stream = popen (cmd, "w");
+
+  if (plot_stream < 0)
+    error ("drawnow: failed to open connection to gnuplot");
+  else
+
+    if (! isempty (h))
+      set (h, "__plot_stream__", plot_stream);
     endif
 
-    if (nargin == 2)
-      fprintf (plot_stream,
-	       "set terminal push; set terminal %s; set output '%s'\n",
-	       term, file);
-    endif
-
-    if (nargin == 2 || strcmp (f.visible, "on"))
-      __go_draw_figure__ (f, plot_stream);
+    if (nargin == 3)
+      fprintf (plot_stream, "set terminal %s\n;", term);
+      fprintf (plot_stream, "set output \"%s\"\n;", file);
+    elseif (isunix () && isempty (getenv ("DISPLAY")))
+      fprintf (plot_stream, "set terminal dumb\n;");
     endif
 
-    __request_drawnow__ (false);
-
-    if (nargin == 2)
-      fputs (plot_stream, "set terminal pop; set output;\n");
+    if (isempty (__go_close_all_registered__))
+      atexit ("__go_close_all__");
+      __go_close_all_registered__ = true;
     endif
 
-  else
-
-    __request_drawnow__ (false);
-
   endif
 
 endfunction
diff --git a/scripts/plot/subplot.m b/scripts/plot/subplot.m
--- a/scripts/plot/subplot.m
+++ b/scripts/plot/subplot.m
@@ -112,35 +112,51 @@ function h = subplot (rows, columns, ind
   endif
 
   xsize = 1 / columns;
   ysize = 1 / rows;
 
   yp = fix ((index-1)/columns);
   xp = index - yp*columns - 1;
 
-  xorigin = xp * xsize;
-  yorigin = (rows - yp - 1) * ysize;
+  x0 = xp * xsize;
+  y0 = (rows - yp - 1) * ysize;
 
-  pos = [xorigin, yorigin, xsize, ysize];
+  pos = [x0, y0, xsize, ysize];
+
+  x1 = x0 + xsize;
+  y1 = y0 + ysize;
 
   cf = gcf ();
 
   set (cf, "nextplot", "add");
 
   obj = get (cf);
 
   found = false;
   for child = obj.children
     obj = get (child);
     if (strcmp (obj.type, "axes"))
-      if (obj.outerposition == pos)
+      objpos = obj.outerposition;
+      if (objpos == pos)
+	## If the new axes are in exactly the same position as an
+	## existing axes object, use the existing axes.
 	found = true;
 	tmp = child;
 	break;
+      else
+	## If the new axes overlap an old axes object, delete the old
+	## axes.
+	objx0 = objpos(1);
+	objx1 = objx0 + objpos(3);
+	objy0 = objpos(2);
+	objy1 = objy0 + objpos(4);
+	if (! (x0 >= objx1 || x1 <= objx0 || y0 >= objy1 || y1 <= objy0))
+	  delete (child);
+	endif
       endif
     endif
   endfor
 
   if (found)
     set (cf, "currentaxes", tmp);
   else
     tmp = axes ("outerposition", pos);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,17 @@
 2007-03-21  John W. Eaton  <jwe@octave.org>
 
 	* graphics.cc (axes::axes_properties::set_defaults): Reverse sense
 	of mode test for setting outerposition property.
+	(figure::figure_properties::set): If setting visible property,
+	make this figure the current figure.
+	(gh_manager::figure_handle_list, gh_manager::do_figure_handle_list):
+	New functions.
+	(F__go_figure_handles__): New function.
 
 	* sysdep.cc (Fpause): Also call drawnow if nargin == 0.
 	(Fkbhit, Fsleep, Fusleep): Also call drawnow here.
 
 2007-03-20  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/cellfun.cc (Fcellfun): Correct for shape of return
 	matrix for the case of UniformOutput being true.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -696,19 +696,24 @@ public:
       instance->do_pop_figure (h);
   }
 
   static graphics_handle current_figure (void)
   {
     return instance_ok () ? instance->do_current_figure () : octave_NaN;
   }
 
-  static Matrix list (void)
+  static Matrix handle_list (void)
   {
-    return instance_ok () ? instance->do_list () : Matrix ();
+    return instance_ok () ? instance->do_handle_list () : Matrix ();
+  }
+
+  static Matrix figure_handle_list (void)
+  {
+    return instance_ok () ? instance->do_figure_handle_list () : Matrix ();
   }
 
 private:
 
   static gh_manager *instance;
 
   typedef std::map<graphics_handle, graphics_object>::iterator iterator;
   typedef std::map<graphics_handle, graphics_object>::const_iterator const_iterator;
@@ -795,25 +800,36 @@ private:
     return (p != handle_map.end ()) ? p->second : graphics_object ();
   }
 
   graphics_handle do_make_graphics_handle (const std::string& go_name,
 					   const graphics_handle& p);
 
   graphics_handle do_make_figure_handle (double val);
 
-  Matrix do_list (void)
+  Matrix do_handle_list (void)
   {
     Matrix retval (1, handle_map.size ());
     octave_idx_type i = 0;
     for (const_iterator p = handle_map.begin (); p != handle_map.end (); p++)
       retval(i++) = p->first;
     return retval;
   }
 
+  Matrix do_figure_handle_list (void)
+  {
+    Matrix retval (1, figure_list.size ());
+    octave_idx_type i = 0;
+    for (const_figure_list_iterator p = figure_list.begin ();
+	 p != figure_list.end ();
+	 p++)
+      retval(i++) = *p;
+    return retval;
+  }
+
   void do_push_figure (const graphics_handle& h);
 
   void do_pop_figure (const graphics_handle& h);
 
   graphics_handle do_current_figure (void) const
   {
     return figure_list.empty () ? octave_NaN : figure_list.front ();
   }
@@ -1332,17 +1348,27 @@ public:
 	  if (is_handle (tval))
 	    currentaxes = tval.double_value ();
 	  else
 	    gripe_set_invalid ("currentaxes");
 	}
       else if (name.compare ("colormap"))
 	colormap = colormap_property (val);
       else if (name.compare ("visible"))
-	visible = val;
+	{
+	  std::string s = val.string_value ();
+
+	  if (! error_state)
+	    {
+	      if (s == "on")
+		xset (0, "currentfigure", __myhandle__);
+
+	      visible = val;
+	    }
+	}
       else if (name.compare ("paperorientation"))
 	paperorientation = val;
       else
 	warning ("set: invalid property `%s'", name.c_str ());
     }
 
     octave_value get (void) const
     {
@@ -3410,16 +3436,25 @@ Initialize axes object.\n\
 }
 
 DEFUN (__go_handles__, , ,
    "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __go_handles__ ()\n\
 Return current list of function handles.\n\
 @end deftypefn")
 {
-  return octave_value (gh_manager::list ());
+  return octave_value (gh_manager::handle_list ());
+}
+
+DEFUN (__go_figure_handles__, , ,
+   "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} __go_figure_handles__ ()\n\
+Return current list of function handles.\n\
+@end deftypefn")
+{
+  return octave_value (gh_manager::figure_handle_list ());
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
