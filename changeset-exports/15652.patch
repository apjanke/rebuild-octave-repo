# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1327920146 -3600
#      Mon Jan 30 11:42:26 2012 +0100
# Node ID 2d6724358c12d409d3493fff4374092f69700798
# Parent  845cebf281aaacf62806c94ff93de71e916eb7f8
Corrected INCLUDEPATH.

diff --git a/libqterminal/QTerminal b/libqterminal/QTerminal
--- a/libqterminal/QTerminal
+++ b/libqterminal/QTerminal
@@ -1,1 +1,23 @@
-#include <QTerminal.h>
+/*
+
+Copyright (C) 2012 Michael Goffioul.
+Copyright (C) 2012 Jacob Dawid.
+
+This file is part of QTerminal.
+
+Foobar is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+QTerminal is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
+
+*/
+
+#include "QTerminal.h"
diff --git a/libqterminal/QTerminal.h b/libqterminal/QTerminal.h
--- a/libqterminal/QTerminal.h
+++ b/libqterminal/QTerminal.h
@@ -18,15 +18,15 @@ GNU General Public License for more deta
 You should have received a copy of the GNU General Public License
 along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 
 */
 
 #ifndef QTERMINAL_H
 #define QTERMINAL_H
 
-#ifdef Q_OS_UNIX
-	#include "unix/QUnixTerminalImpl.h"
+#ifdef __WIN32
+    #include "win32/QWinTerminalImpl.h"
 #else
-	#include "win32/QWinTerminalImpl.h"
+    #include "unix/QUnixTerminalImpl.h"
 #endif
 
 #endif // QTERMINAL_H
diff --git a/libqterminal/libqterminal.pro b/libqterminal/libqterminal.pro
--- a/libqterminal/libqterminal.pro
+++ b/libqterminal/libqterminal.pro
@@ -7,17 +7,17 @@ CONFIG		+= staticlib
 
 QT += core gui
 
 unix {
 
 DEFINES 	+= HAVE_POSIX_OPENPT	    
 #or DEFINES 	+= HAVE_GETPT
 
-INCLUDE_PATH += unix
+INCLUDEPATH += unix
 HEADERS  = unix/BlockArray.h \
            unix/Character.h \
            unix/CharacterColor.h \
            unix/Emulation.h \
            unix/ExtendedDefaultTranslator.h \
            unix/Filter.h \
            unix/History.h \
            unix/KeyboardTranslator.h \
@@ -47,17 +47,17 @@ SOURCES  = unix/BlockArray.cpp \
            unix/TerminalCharacterDecoder.cpp \
            unix/Vt102Emulation.cpp \
     	   unix/SelfListener.cpp \
            unix/TerminalModel.cpp \
            unix/TerminalView.cpp
 }
 
 win32 {
-INCLUDE_PATH += win32
+INCLUDEPATH += win32
 HEADERS  = win32/QTerminalColors.h \
 		   win32/QWinTerminalImpl.h
 
 SOURCES  = win32/QTerminalColors.cpp \
 		   win32/QWinTerminalImpl.cpp
 }
 
 HEADERS  = QTerminal.h \
diff --git a/libqterminal/unix/QUnixTerminalImpl.cpp b/libqterminal/unix/QUnixTerminalImpl.cpp
--- a/libqterminal/unix/QUnixTerminalImpl.cpp
+++ b/libqterminal/unix/QUnixTerminalImpl.cpp
@@ -14,17 +14,17 @@
     You should have received a copy of the GNU Library General Public License
     along with this library; see the file COPYING.LIB.  If not, write to
     the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
     Boston, MA 02110-1301, USA.
 */
 						
 #include <QDebug>
 
-#include "QTerminal.h"
+#include "QUnixTerminalImpl.h"
 #include "kpty.h"
 
 #include <termios.h>
 
 QTerminal::QTerminal(QWidget *parent)
     : QWidget(parent) {
     setMinimumSize(600, 400);
     initialize();
diff --git a/libqterminal/win32/QTerminalColors.cpp b/libqterminal/win32/QTerminalColors.cpp
--- a/libqterminal/win32/QTerminalColors.cpp
+++ b/libqterminal/win32/QTerminalColors.cpp
@@ -17,17 +17,17 @@ GNU General Public License for more deta
 You should have received a copy of the GNU General Public License
 along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 
 */
 
 #define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 
-#include "QConsoleColors.h"
+#include "QTerminalColors.h"
 
 //////////////////////////////////////////////////////////////////////////////
 
 QConsoleColors::QConsoleColors (void)
     : QMap<int, QColor> ()
 {
   (*this)[0]  = Qt::black;
   (*this)[1]  = Qt::darkBlue;
diff --git a/libqterminal/win32/QWinTerminalImpl.cpp b/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libqterminal/win32/QWinTerminalImpl.cpp
@@ -34,64 +34,64 @@ along with Foobar.  If not, see <http://
 #include <fcntl.h>
 #include <io.h>
 #include <stdio.h>
 #include <stdarg.h>
 #define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #include <cstring>
 
-#include "QConsole.h"
-#include "QConsoleColors.h"
+#include "QWinTerminalImpl.h"
+#include "QTerminalColors.h"
 
 // Uncomment to log activity to LOGFILENAME
 // #define DEBUG_QCONSOLE
 #define LOGFILENAME "QConsole.log"
 // Uncomment to create hidden console window
 #define HIDDEN_CONSOLE
 
 //////////////////////////////////////////////////////////////////////////////
 
 class QConsoleView : public QWidget
 {
 public:
-  QConsoleView (QConsole* parent = 0) : QWidget (parent), q (parent) { }
+  QConsoleView (QTerminal* parent = 0) : QWidget (parent), q (parent) { }
   ~QConsoleView (void) { }
 
 protected:
   void paintEvent (QPaintEvent* event) { q->viewPaintEvent (this, event); }
   void resizeEvent (QResizeEvent* event) { q->viewResizeEvent (this, event); }
 
 private:
-  QConsole* q;
+  QTerminal* q;
 };
 
 //////////////////////////////////////////////////////////////////////////////
 
 class QConsoleThread : public QThread
 {
 public:
-  QConsoleThread (QConsole* console) : QThread (console), q (console) { }
+  QConsoleThread (QTerminal* console) : QThread (console), q (console) { }
 
 protected:
   void run (void)
     { q->start (); }
 
 private:
-  QConsole* q;
+  QTerminal* q;
 };
 
 //////////////////////////////////////////////////////////////////////////////
 
 class QConsolePrivate
 {
-  friend class QConsole;
+  friend class QTerminal;
 
 public:
-  QConsolePrivate (QConsole* parent, const QString& cmd = QString ());
+  QConsolePrivate (QTerminal* parent, const QString& cmd = QString ());
   ~QConsolePrivate (void);
 
   void updateConsoleSize (bool sync = false);
   void syncConsoleParameters (void);
   void grabConsoleBuffer (CHAR_INFO* buf = 0);
   void updateScrollBar (void);
   void setScrollValue (int value);
   void updateConsoleView (bool grab = true);
@@ -101,17 +101,17 @@ public:
 
   void log (const char* fmt, ...);
 
   void closeStandardIO (int fd, DWORD stdHandleId, const char* name);
   void setupStandardIO (DWORD stdHandleId, int fd, const char* name,
                         const char* devName);
 
 private:
-  QConsole* q;
+  QTerminal* q;
 
 private:
   QFont m_font;
   QColor m_backgroundColor;
   QString m_command;
   QConsoleColors m_colors;
   bool m_inWheelEvent;
   QString m_title;
@@ -130,17 +130,17 @@ private:
   QConsoleView* m_consoleView;
   QScrollBar* m_scrollBar;
   QTimer* m_consoleWatcher;
   QConsoleThread *m_consoleThread;
 };
 
 //////////////////////////////////////////////////////////////////////////////
 
-QConsolePrivate::QConsolePrivate (QConsole* parent, const QString& cmd)
+QConsolePrivate::QConsolePrivate (QTerminal* parent, const QString& cmd)
     : q (parent), m_command (cmd), m_process (NULL), m_inWheelEvent (false)
 {
   log (NULL);
 
   // Possibly detach from any existing console
   log ("Detaching from existing console (if any)...\n");
   FreeConsole ();
   log ("Closing standard IO...\n");
@@ -681,46 +681,46 @@ void QConsolePrivate::sendConsoleText (c
           nEvents = 0;
           ZeroMemory (events, sizeof (events));
         }
     }
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-QConsole::QConsole (QWidget* parent)
+QTerminal::QTerminal (QWidget* parent)
     : d (new QConsolePrivate (this))
 {
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-QConsole::QConsole (const QString& cmd, QWidget* parent)
+QTerminal::QTerminal (const QString& cmd, QWidget* parent)
     : d (new QConsolePrivate (this, cmd))
 {
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-QConsole::~QConsole (void)
+QTerminal::~QTerminal (void)
 {
   delete d;
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QConsole::viewResizeEvent (QConsoleView*, QResizeEvent*)
+void QTerminal::viewResizeEvent (QConsoleView*, QResizeEvent*)
 {
   d->updateConsoleSize (true);
   d->grabConsoleBuffer ();
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QConsole::viewPaintEvent (QConsoleView* w, QPaintEvent* event)
+void QTerminal::viewPaintEvent (QConsoleView* w, QPaintEvent* event)
 {
   QPainter p (w);
   int cw = d->m_charSize.width (), ch = d->m_charSize.height ();
   int ascent, stride, cx1, cy1, cx2, cy2, x, y;
   WORD attr = 0;
   QString s;
   bool hasChar = false;
 
@@ -800,30 +800,30 @@ void QConsole::viewPaintEvent (QConsoleV
   p.setCompositionMode (QPainter::RasterOp_SourceXorDestination);
   p.fillRect ((d->m_cursorPos.x () - d->m_consoleRect.x ()) * cw,
               (d->m_cursorPos.y () - d->m_consoleRect.y ()) * ch,
               cw, ch, d->m_colors[7]);
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QConsole::wheelEvent (QWheelEvent* event)
+void QTerminal::wheelEvent (QWheelEvent* event)
 {
   if (! d->m_inWheelEvent)
     {
       // Forward to the scrollbar (avoid recursion)
       d->m_inWheelEvent = true;
       QApplication::sendEvent (d->m_scrollBar, event);
       d->m_inWheelEvent = false;
     }
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-bool QConsole::winEvent (MSG* msg, long* result)
+bool QTerminal::winEvent (MSG* msg, long* result)
 {
   switch (msg->message)
     {
     case WM_KEYDOWN:
     case WM_KEYUP:
     //case WM_CHAR:
       // Forward Win32 message to the console window
       PostMessage (d->m_consoleWindow,
@@ -834,41 +834,41 @@ bool QConsole::winEvent (MSG* msg, long*
       return true;
     default:
       return false;
     }
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QConsole::scrollValueChanged (int value)
+void QTerminal::scrollValueChanged (int value)
 {
   d->setScrollValue (value);
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QConsole::monitorConsole (void)
+void QTerminal::monitorConsole (void)
 {
   d->monitorConsole ();
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QConsole::focusInEvent (QFocusEvent* event)
+void QTerminal::focusInEvent (QFocusEvent* event)
 {
   QWidget::focusInEvent (event);
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QConsole::start (void)
+void QTerminal::start (void)
 {
   d->startCommand ();
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
-void QConsole::sendText (const QString& s)
+void QTerminal::sendText (const QString& s)
 {
   d->sendConsoleText (s);
 }
 
diff --git a/libqterminal/win32/QWinTerminalImpl.h b/libqterminal/win32/QWinTerminalImpl.h
--- a/libqterminal/win32/QWinTerminalImpl.h
+++ b/libqterminal/win32/QWinTerminalImpl.h
@@ -31,27 +31,27 @@ class QResizeEvent;
 class QWheelEvent;
 
 class QConsolePrivate;
 class QConsoleThread;
 class QConsoleView;
 
 //////////////////////////////////////////////////////////////////////////////
 
-class QConsole : public QWidget
+class QTerminal : public QWidget
 {
   Q_OBJECT
   friend class QConsolePrivate;
   friend class QConsoleThread;
   friend class QConsoleView;
 
 public:
-  QConsole (QWidget* parent = 0);
-  QConsole (const QString& cmd, QWidget* parent = 0);
-  ~QConsole (void);
+  QTerminal (QWidget* parent = 0);
+  QTerminal (const QString& cmd, QWidget* parent = 0);
+  ~QTerminal (void);
 
   void sendText (const QString& s);
 
 signals:
   void terminated (void);
   void titleChanged (const QString&);
 
 protected:
