# HG changeset patch
# User Rik <rik@octave.org>
# Date 1352137497 28800
#      Mon Nov 05 09:44:57 2012 -0800
# Node ID ac86b891e45a6859cfdb044e54bac6f180f1b95f
# Parent  44272909d926b77b24ab77d9a5654da90262d823
quadgk.m: Clean up input error reporting.

quadgk.m: Don't use error IDs for input argument checking.
Remove redundant warning off code for divide-by-zero.
Use Octave coding conventions for spacing of '!' operator.

diff --git a/scripts/general/quadgk.m b/scripts/general/quadgk.m
--- a/scripts/general/quadgk.m
+++ b/scripts/general/quadgk.m
@@ -136,26 +136,25 @@ function [q, err] = quadgk (f, a, b, var
     abstol = 1e-10;
     reltol = 1e-5;
     waypoints = [];
     maxint = 650;
     trace = false;
 
     if (nargin > 3)
       if (! ischar (varargin{1}))
-        if (!isempty (varargin{1}))
+        if (! isempty (varargin{1}))
           abstol = varargin{1};
           reltol = 0;
         endif
         if (nargin > 4)
           trace = varargin{2};
         endif
         if (nargin > 5)
-          error ("Octave:Invalid-fun-call",
-                  "quadgk: can not pass additional arguments to user function");
+          error ("quadgk: can not pass additional arguments to user function");
         endif
       else
         idx = 1;
         while (idx < nargin - 3)
           if (ischar (varargin{idx}))
             str = varargin{idx++};
             if (strcmpi (str, "reltol"))
               reltol = varargin{idx++};
@@ -166,79 +165,76 @@ function [q, err] = quadgk (f, a, b, var
               if (isreal (waypoints))
                 waypoints (waypoints < a | waypoints > b) = [];
               endif
             elseif (strcmpi (str, "maxintervalcount"))
               maxint = varargin{idx++};
             elseif (strcmpi (str, "trace"))
               trace = varargin{idx++};
             else
-              error ("Octave:invalid-input-arg",
-                                            "quadgk: unknown property %s", str);
+              error ("quadgk: unknown property '%s'", str);
             endif
           else
-            error ("Octave:invalid-input-arg",
-                                   "quadgk: expecting property to be a string");
+            error ("quadgk: property PROP must be a string");
           endif
         endwhile
         if (idx != nargin - 2)
-          error ("Octave:Invalid-fun-call",
-                                       "quadgk: expecting properties in pairs");
+          error ("quadgk: property/value must occur in pairs");
         endif
       endif
     endif
 
     ## Convert function given as a string to a function handle
     if (ischar (f))
       f = @(x) feval (f, x);
     endif
 
     ## Use variable subsitution to weaken endpoint singularities and to
-    ## perform integration with endpoints at infinity. No transform for
-    ## contour integrals
+    ## perform integration with endpoints at infinity.  No transform for
+    ## contour integrals.
     if (iscomplex (a) || iscomplex (b) || iscomplex (waypoints))
       ## contour integral, no transform
       subs = [a; waypoints; b];
       h = sum (abs (diff (subs)));
       h0 = h;
       trans = @(t) t;
     elseif (isinf (a) && isinf (b))
-      ## Standard Infinite to finite integral transformation.
+      ## Standard infinite to finite integral transformation.
       ##   \int_{-\infinity_^\infinity f(x) dx = \int_-1^1 f (g(t)) g'(t) dt
       ## where
       ##   g(t)  = t / (1 - t^2)
       ##   g'(t) =  (1 + t^2) / (1 - t^2) ^ 2
       ## waypoint transform is then
       ##   t =  (2 * g(t)) ./ (1 + sqrt(1 + 4 * g(t) .^ 2))
-      if (!isempty (waypoints))
+      if (! isempty (waypoints))
         trans = @(x) (2 * x) ./ (1 + sqrt (1 + 4 * x .^ 2));
         subs = [-1; trans(waypoints); 1];
       else
         subs = linspace (-1, 1, 11)';
       endif
       h = 2;
       h0 = b - a;
       trans = @(t) t ./ (1 - t.^2);
       f = @(t) f (t ./ (1 - t .^ 2)) .* (1 + t .^ 2) ./ ((1 - t .^ 2) .^ 2);
-    elseif (isinf(a))
+    elseif (isinf (a))
       ## Formula defined in Shampine paper as two separate steps. One to
       ## weaken singularity at finite end, then a second to transform to
       ## a finite interval. The singularity weakening transform is
       ##   \int_{-\infinity}^b f(x) dx =
       ##               - \int_{-\infinity}^0 f (b - t^2) 2 t dt
       ## (note minus sign) and the finite interval transform is
       ##   \int_{-\infinity}^0 f(b - t^2)  2 t dt =
       ##                  \int_{-1}^0 f (b - g(s) ^ 2) 2 g(s) g'(s) ds
       ## where
       ##   g(s)  = s / (1 + s)
       ##   g'(s) = 1 / (1 + s) ^ 2
       ## waypoint transform is then
       ##   t = sqrt (b - x)
       ##   s =  - t / (t + 1)
-      if (!isempty (waypoints))
+      if (! isempty (waypoints))
         tmp = sqrt (b - waypoints);
         trans = @(x)  - x ./ (x + 1);
         subs = [-1; trans(tmp); 0];
       else
         subs = linspace (-1, 0, 11)';
       endif
       h = 1;
       h0 = b - a;
@@ -253,17 +249,17 @@ function [q, err] = quadgk (f, a, b, var
       ##  \int_0^\infinity f(a + t^2)  2 t dt =
       ##           \int_0^1 f (a + g(s) ^ 2) 2 g(s) g'(s) ds
       ## where
       ##   g(s)  = s / (1 - s)
       ##   g'(s) = 1 / (1 - s) ^ 2
       ## waypoint transform is then
       ##   t = sqrt (x - a)
       ##   s = t / (t + 1)
-      if (!isempty (waypoints))
+      if (! isempty (waypoints))
         tmp = sqrt (waypoints - a);
         trans = @(x) x ./ (x + 1);
         subs = [0; trans(tmp); 1];
       else
         subs = linspace (0, 1, 11)';
       endif
       h = 1;
       h0 = b - a;
@@ -296,23 +292,21 @@ function [q, err] = quadgk (f, a, b, var
 
     ## Split interval into at least 10 subinterval with a 15 point
     ## Gauss-Kronrod rule giving a minimum of 150 function evaluations
     while (length (subs) < 11)
       subs = [subs' ; subs(1:end-1)' + diff(subs') ./ 2, NaN](:)(1 : end - 1);
     endwhile
     subs = [subs(1:end-1), subs(2:end)];
 
-    # Set divide-by-zero warning off locally
+    ## Singularity will cause divide by zero warnings.
+    ## Turn off warning locally for quadgk function only.
     warning ("off", "Octave:divide-by-zero", "local");
 
-    warn_msg   = "Octave:quadgk:warning-termination";
-
-    ## Singularity will cause divide by zero warnings
-    warning ("off", "Octave:divide-by-zero");
+    warn_id = "Octave:quadgk:warning-termination";
 
     ## Initial evaluation of the integrand on the subintervals
     [q_subs, q_errs] = __quadgk_eval__ (f, subs);
     q0 = sum (q_subs);
     err0 = sum (q_errs);
 
     if (isa (a, "single") || isa (b, "single") || isa (waypoints, "single"))
       myeps = eps ("single");
@@ -328,17 +322,17 @@ function [q, err] = quadgk (f, a, b, var
       if (any (abs (diff (trans (subs), [], 2) / h0) < 100 * myeps))
         q = q0;
         err = err0;
         break;
       endif
 
       ## Quit if any evaluations are not finite (Inf or NaN)
       if (any (! isfinite (q_subs)))
-        warning (warn_msg, "quadgk: non finite integrand encountered");
+        warning (warn_id, "quadgk: non finite integrand encountered");
         q = q0;
         err = err0;
         break;
       endif
 
       tol = max (abstol, reltol .* abs (q0));
 
       ## If the global error estimate is meet exit
@@ -373,30 +367,29 @@ function [q, err] = quadgk (f, a, b, var
 
       ## Split remaining subintervals in two
       mid = (subs(:,2) + subs(:,1)) ./ 2;
       subs = [subs(:,1), mid; mid, subs(:,2)];
 
       ## If the maximum subinterval count is met accept remaining
       ## subinterval and exit
       if (rows (subs) > maxint)
-        warning (warn_msg,
-                 "quadgk: maximum interval count (%d) met", maxint);
+        warning (warn_id, "quadgk: maximum interval count (%d) met", maxint);
         q += sum (q_subs);
         err += sum (q_errs);
         break;
       endif
 
       ## Evaluation of the integrand on the remaining subintervals
       [q_subs, q_errs] = __quadgk_eval__ (f, subs);
     endwhile
 
     if (err > max (abstol, reltol * abs (q)))
-      warning (warn_msg,
-               "quadgk: Error tolerance not met. Estimated error %g", err);
+      warning (warn_id,
+               "quadgk: Error tolerance not met.  Estimated error %g", err);
     endif
 
   endif
 endfunction
 
 function [q, err] = __quadgk_eval__ (f, subs)
   ## A (15,7) point pair of Gauss-Konrod quadrature rules. The abscissa
   ## and weights are copied directly from dqk15w.f from quadpack
