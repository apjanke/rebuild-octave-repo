# HG changeset patch
# User Philip Nienhuis <prnienhuis@users.sf.net>
# Date 1477649579 -7200
#      Fri Oct 28 12:12:59 2016 +0200
# Node ID 644dcdfa034892029686116b3086113cf6046146
# Parent  5e2cb8fbfec7e5b39ca3943afdf12ac3b3e2c6eb
strread.m: fix processing open comment styles (bug #49454).

* strread.m: New variable cmt_eol to track the eol character
for comments, defaults to "\n".  Add input validation to override
cmt_eol if "endofline" option is specifically set.  Add BIST test.

diff --git a/scripts/io/strread.m b/scripts/io/strread.m
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -230,16 +230,19 @@ function varargout = strread (str, forma
       varargin = varargin(2:end);
     else
       varargin = {};
     endif
   endif
 
   ## Parse options.  First initialize defaults
   comment_flag = false;
+  open_comment = false;
+  ## Default line ending.  FIXME: we ignore old Macintosh CR eol.
+  cmt_eol = "\n";
   delimiter_str = "";
   empty_str = "";
   eol_char = "";
   err_action = 0;
   mult_dlms_s1 = false;
   numeric_fill_value = NaN;
   white_spaces = " \b\r\n\t";
   for n = 1:2:length (varargin)
@@ -248,25 +251,29 @@ function varargout = strread (str, forma
         ## We could synthesize this, but that just seems weird...
         warning ("strread: property 'bufsize' is not implemented");
       case "commentstyle"
         comment_flag = true;
         switch (lower (varargin{n+1}))
           case "c"
             [comment_start, comment_end] = deal ("/*", "*/");
           case "c++"
-            [comment_start, comment_end] = deal ("//", "eol_char");
+            [comment_start, comment_end] = deal ("//", "cmt_eol");
+            open_comment = true;
           case "shell"
-            [comment_start, comment_end] = deal ("#" , "eol_char");
+            [comment_start, comment_end] = deal ("#" , "cmt_eol");
+            open_comment = true;
           case "matlab"
-            [comment_start, comment_end] = deal ("%" , "eol_char");
+            [comment_start, comment_end] = deal ("%" , "cmt_eol");
+            open_comment = true;
           otherwise
             if (ischar (varargin{n+1})
                 || (numel (varargin{n+1}) == 1 && iscellstr (varargin{n+1})))
-              [comment_start, comment_end] = deal (char (varargin{n+1}), "eol_char");
+              [comment_start, comment_end] = deal (char (varargin{n+1}), "cmt_eol");
+            open_comment = true;
             elseif (iscellstr (varargin{n+1}) && numel (varargin{n+1}) == 2)
               [comment_start, comment_end] = deal (varargin{n+1}{:});
             else
               ## FIXME: A user may have numeric values specified: {'//', 7}
               ##        this will lead to an error in the warning message
               error ("strread: unknown or unrecognized comment style '%s'",
                       varargin{n+1});
             endif
@@ -286,16 +293,18 @@ function varargout = strread (str, forma
           white_spaces = do_string_escapes (white_spaces);
         endif
       ## The following parameters are specific to textscan and textread
       case "endofline"
         eol_char = varargin{n+1};
         if (strcmp (typeinfo (eol_char), "sq_string"))
           eol_char = do_string_escapes (eol_char);
         endif
+        cmt_eol = eol_char;
+        open_comment = false;
       case "returnonerror"
         err_action = varargin{n+1};
       case "multipledelimsasone"
         mult_dlms_s1 = varargin{n+1};
       case "treatasempty"
         if (iscellstr (varargin{n+1}))
           empty_str = varargin{n+1};
         elseif (ischar (varargin{n+1}))
@@ -356,20 +365,23 @@ function varargout = strread (str, forma
     ## Strip CR from CRLF sequences
     str = strrep (str, "\r\n", "\n");
     ## CR serves no further purpose in function
     eol_char = "\n";
   endif
 
   ## Remove comments in str
   if (comment_flag)
-    ## Expand 'eol_char' here, after option processing which may have set value
-    comment_end = strrep (comment_end, "eol_char", eol_char);
+    ## Expand 'cmt_eol' here, after option processing which may have set value
+    comment_end = strrep (comment_end, "cmt_eol", cmt_eol);
     cstart = strfind (str, comment_start);
     cstop  = strfind (str, comment_end);
+    if (open_comment)
+      cstop -= 1;
+    endif
     ## Treat end of string as additional comment stop
     if (isempty (cstop) || cstop(end) != length (str))
       cstop(end+1) = length (str);
     endif
     if (! isempty (cstart))
       ## Ignore nested openers.
       [idx, cidx] = unique (lookup (cstop, cstart), "first");
       if (idx(end) == length (cstop))
@@ -878,16 +890,21 @@ endfunction
 %!         {"Hello"; "World!"});
 %! assert (strread ("Hello World! % this is comment", "%s",...
 %!                  "commentstyle", "matlab"), ...
 %!         {"Hello"; "World!"});
 %! assert (strread ("Hello World! # this is comment", "%s",...
 %!                  "commentstyle", "shell"), ...
 %!         {"Hello"; "World!"});
 
+%!test <49454>
+%! assert (strread ("hello%foo\nworld, another%bar\r\nday", "%s", ...
+%!                  "commentstyle", "matlab", "delimiter", " ,"),...
+%!         {"hello"; "world"; "another"; "day"});
+
 %!test
 %! str = sprintf ("Tom 100 miles/hr\nDick 90 miles/hr\nHarry 80 miles/hr");
 %! fmt = "%s %f miles/hr";
 %! c = cell (1, 2);
 %! [c{:}] = strread (str, fmt);
 %! assert (c{1}, {"Tom"; "Dick"; "Harry"});
 %! assert (c{2}, [100; 90; 80]);
 
