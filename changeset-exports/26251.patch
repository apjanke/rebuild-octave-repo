# HG changeset patch
# User Rik <rik@octave.org>
# Date 1545032813 28800
#      Sun Dec 16 23:46:53 2018 -0800
# Node ID 05ec27d632dac1f1002c75524dd340c49a68dcd1
# Parent  481708dbc540238ce76539562a080439229b2033
movfun.m: Fix incorrect implementation of "fill" value for "Endpoints"

* movfun.m: Delete persistent value dispatch.  Detect "fill" option for
"Endpoints" property and use replaceval_bc() function with a substitute
value of NaN.  Use a switch statement to assign bcfunc the correct
function handle.  Update BIST tests to pass.
* movfun.m (fill_bc): Delete function.

diff --git a/scripts/signal/movfun.m b/scripts/signal/movfun.m
--- a/scripts/signal/movfun.m
+++ b/scripts/signal/movfun.m
@@ -156,25 +156,16 @@
 function y = movfun (fcn, x, wlen, varargin)
 
   if (nargin < 3)
     print_usage ();
   endif
 
   valid_bc = {"shrink", "periodic", "same", "fill"};
 
-  persistent dispatch;
-  if (isempty (dispatch))
-    dispatch = struct ();
-    for k = valid_bc
-      cmd = sprintf ("dispatch.%s = @%s_bc;", k{1}, k{1});
-      eval (cmd);
-    endfor
-  endif
-
   ## Parse input arguments
   parser = inputParser ();
   parser.FunctionName = "movfun";
   parser.addParamValue ("Endpoints", "shrink", ...
     @(x) any (strcmpi (x, valid_bc)) || (isscalar (x) && isnumeric (x)));
   parser.addParamValue ("dim", [], ...
     @(d) isempty (d) || (isscalar (d) && isindex (d, ndims (x))));
   parser.addParamValue ("nancond", "omitnan", ...
@@ -230,18 +221,25 @@ function y = movfun (fcn, x, wlen, varar
   ncols = prod (szx(dperm(2:end)));      # rest dimensions as single column
   N     = szx(dperm(1));                 # length of dim
   x     = reshape (x, N, ncols);         # reshape input
 
   ## Obtain function for boundary conditions
   if (isnumeric (bc))
     bcfunc = @replaceval_bc;
     bcfunc (true, bc);  # initialize replaceval function with value
+  elseif (strcmpi (bc, "fill"))
+    bcfunc = @replaceval_bc;
+    bcfunc (true, NaN);
   else
-    bcfunc = dispatch.(tolower (bc));
+    switch (tolower (bc))
+      case "shrink"    bcfunc = @shrink_bc;
+      case "periodic"  bcfunc = @periodic_bc;
+      case "same"      bcfunc = @same_bc;
+    endswitch
   endif
 
   ## Obtain slicer
   [slc, C, Cpre, Cpos, win] = movslice (N, wlen);
 
   ## FIXME: Validation doesn't seem to work correctly (noted 12/16/2018).
   ## Validate that outdim makes sense
   tmp     = fcn (zeros (length (win), 1));  # output for window
@@ -359,25 +357,16 @@ function y = replaceval_bc (fcn, x, idxp
     x   = postpad (x, N + wlen(2), substitute);
     idx = idxp + win;
   endif
 
   y = fcn (x(idx));
 
 endfunction
 
-## Apply "fill" boundary conditions
-## FIXME: This is incorrect.  This directly changes the output when it
-## must only change the values that @fcn considers.  Some functions do not
-## return NaN when there are NaN inputs such as "min (NaN, 5)".
-## Window is padded at beginning and end with NaN
-function y = fill_bc (fcn, x, idxp, win, wlen, odim)
-  y = NaN (length (idxp), odim);
-endfunction
-
 
 %!demo
 %! clf;
 %! t  = 2 * pi * linspace (0,1,100).';
 %! x  = sin (3 * t);
 %! xn = x + 0.1 * randn (size (x));
 %! x_s = movfun (@mean, xn, 5, "Endpoints", "shrink");
 %! x_p = movfun (@mean, xn, 5, "Endpoints", "periodic");
@@ -522,88 +511,81 @@ endfunction
 %! legend (h(1:2), {"data1", "data2"})
 %! #-----------------------------------------------------------------
 %! # Moving min() and max() on the same window.
 %! # Demo illustrates the use of functions with flat multidimensional output.
 
 %!test
 %! x = (1:10).' + [-3, 0, 4];
 %! ctrfun = @(x) x(2,:);
-%! valid_bc = {"same", "periodic", 0};
+%! valid_bc = {"periodic", 0, "fill", "same"};
 %! for bc = valid_bc
 %!   assert (movfun (ctrfun, x, 3, "Endpoints", bc{1}), x);
 %! endfor
-%! x_ = x; x_([1 end],:) = NaN;
-%! assert (movfun (ctrfun, x, 3, "Endpoints", "fill"), x_);
 %! x_ = x; x_([1 end],:) = x([2 end],:);
 %! assert (movfun (ctrfun, x, 3, "Endpoints", "shrink"), x_);
 
 %!test
 %! ## dim == 2, same as transpose
 %! x = randi (10, 3);
 %! ctrfun = @(x) x(2,:);
-%! valid_bc = {"same", "periodic", 0};
+%! valid_bc = {"periodic", 0, "fill", "same"};
 %! for bc = valid_bc
 %!   assert (movfun (ctrfun, x.', 3, "Endpoints", bc{1}, "dim", 2), x.');
 %! endfor
-%! x_ = x; x_([1 end],:) = NaN;
-%! assert (movfun (ctrfun, x.', 3, "Endpoints", "fill", "dim", 2), x_.');
 %! x_ = x; x_([1 end],:) = x([2 end],:);
 %! assert (movfun (ctrfun, x.', 3, "Endpoints", "shrink", "dim", 2), x_.');
 
 %!test
 %! x = randi (10, 3, 10, 2);
 %! y = movfun (@(x) x(2,:), x, 3, "Endpoints", "same", "dim", 2);
 %! assert (x, y);
 
 %!test
 %! ## bad zero_bc
 %! x = ones (10, 1);
 %! y = x; y(1:2) = y([end end-1]) = [0.6;0.8];
 %! assert (movfun (@mean, x, 5, "Endpoints", 0), y);
 
 ## Asymmetric windows
-%!shared x,wlen,wlen0b,wlen0f,ctrfun,xd,UNO,UNOd0b,UNOd0f
+%!shared x, wlen, wlen02, wlen20, ctrfun, UNO
 %! x = (1:10).' + [-3, 0, 4];
-%! wlen = [2 1];
-%! wlen0b = [0 2];
-%! wlen0f = [2 0];
+%! wlen = [2, 1];
+%! wlen02 = [0, 2];
+%! wlen20 = [2, 0];
 %! ctrfun = @(x) x(wlen(1)+1,:);
-%! xd = x; xd([1:2 end],:) = NaN;
 %! UNO = ones (7,1);
-%! UNOd0b = UNOd0f = UNO;
-%! UNOd0b(end-1:end,:) = NaN;
-%! UNOd0f(1:2,:) = NaN;
 
-%!assert (movfun (ctrfun, x, wlen, "Endpoints", "same"), x)
-%!assert (movfun (ctrfun, x, wlen, "Endpoints", "fill"), xd)
 %!assert (movfun (ctrfun, x, wlen, "Endpoints", "periodic"), x)
 %!assert (movfun (ctrfun, x, wlen, "Endpoints", 0), x)
+%!assert (movfun (ctrfun, x, wlen, "Endpoints", "fill"), x)
+%!assert (movfun (ctrfun, x, wlen, "Endpoints", "same"), x)
 ## for shorter x, indexing fails
 %!error movfun (ctrfun, x, wlen, "Endpoints", "shrink")
 
-%!assert (movfun (@min, UNO, wlen0b, "Endpoints", "same"), UNO)
-%!assert (movfun (@min, UNO, wlen0f, "Endpoints", "same"), UNO)
+%!assert (movfun (@min, UNO, wlen, "Endpoints", "shrink"), UNO)
+%!assert (movfun (@min, UNO, wlen02, "Endpoints", "shrink"), UNO)
+%!assert (movfun (@min, UNO, wlen20, "Endpoints", "shrink"), UNO)
 
-%!assert (movfun (@min, UNO, wlen, "Endpoints", "shrink"), UNO)
-%!assert (movfun (@min, UNO, wlen0b, "Endpoints", "shrink"), UNO)
-%!assert (movfun (@min, UNO, wlen0f, "Endpoints", "shrink"), UNO)
+%!assert (movfun (@min, UNO, wlen02, "Endpoints", "periodic"), UNO)
+%!assert (movfun (@min, UNO, wlen20, "Endpoints", "periodic"), UNO)
 
-%!assert (movfun (@min, UNO, wlen0b, "Endpoints", "fill"), UNOd0b)
-%!assert (movfun (@min, UNO, wlen0f, "Endpoints", "fill"), UNOd0f)
+%!assert (movfun (@max, UNO, wlen02, "Endpoints", 0), UNO)
+%!assert (movfun (@max, UNO, wlen20, "Endpoints", 0), UNO)
 
-%!assert (movfun (@min, UNO, wlen0b, "Endpoints", "periodic"), UNO)
-%!assert (movfun (@min, UNO, wlen0f, "Endpoints", "periodic"), UNO)
+%!assert (movfun (@min, UNO, wlen02, "Endpoints", "fill"), UNO)
+%!assert (movfun (@min, UNO, wlen20, "Endpoints", "fill"), UNO)
 
-%!assert (movfun (@max, UNO, wlen0b, "Endpoints", 0), UNO)
-%!assert (movfun (@max, UNO, wlen0f, "Endpoints", 0), UNO)
+%!assert (movfun (@min, UNO, wlen02, "Endpoints", "same"), UNO)
+%!assert (movfun (@min, UNO, wlen20, "Endpoints", "same"), UNO)
 
 ## Multidimensional output
-%!assert(size(movfun (@(x)[min(x) max(x)], (1:10).', 3)), [10 2])
-%!assert(size(movfun (@(x)[min(x) max(x)], cumsum(ones(10,5),2), 3)), [10 5 2])
+%!assert (size( movfun (@(x) [min(x), max(x)], (1:10).', 3)), [10 2])
+%!assert (size( movfun (@(x) [min(x), max(x)], cumsum (ones (10,5),2), 3)),
+%!        [10 5 2])
 ## outdim > dim
 %!error (movfun (@(x) [min(x), max(x)], (1:10).', 3, "Outdim", 3))
 
 ## Test input validation
 %!error movfun ()
 %!error movfun (@min)
 %!error movfun (@min, 1)
 %!error <WLEN must be .* array of integers> movfun (@min, 1, {1})
