# HG changeset patch
# User Rik <rik@octave.org>
# Date 1473605922 25200
#      Sun Sep 11 07:58:42 2016 -0700
# Node ID 1d2960b5efe6debb292cd380dee1775726cfa3b7
# Parent  913e812ef11dcb9a0b8b6ae228cb076695bc8490
Add new MEX fcns mxCreateUninitNumericArray, mxCreateUninitNumericMatrix.

* NEWS: Announce new functions.

* mexproto.h: Add prototypes for new functions.

* mxarray.in.h: Add 5th input (bool init = true) to mxArray constructors that
map to mxCreateNumericArray and mxCreateNumericMatrix.

* mex.cc (mxCreateUninitNumericArray): New function.  Calls
constructor mxArray (class_id, ndims, dims, flag, false), i.e., with
init = false.
* mex.cc (mxCreateUninitNumericArray): New function.  Calls
constructor mxArray (class_id, m, n, flag, false), i.e., with init = false.
* mex.cc (mxArray::mxArray): Change constructors to pass init flag to constructors
for mxArray_number.
* mex.cc (mxArray_number): Change constructors to use init flag to decide
whether calloc (init = true) or malloc (init = false) is used to get memory
for the elements in the array.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -143,17 +143,17 @@ Summary of important user-visible change
     handling.
 
  ** The functions mxAssert and mxAssertS for checking assertions have
     been added.  In order to avoid a performance penalty they are only
     compiled in to debug versions of a MEX file, i.e., that are produced
     when the '-g' option is given to mex() or mkoctfile().
 
  ** Other new MEX API functions include mexEvalStringWithTrap,
-    mxIsScalar.
+    mxIsScalar, mxCreateUninitNumericArray, mxCreateUninitNumericMatrix.
 
  ** Other new functions added in 4.2:
 
       audioformats
       camlight
       condeig
       deg2rad
       dialog
diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -993,38 +993,52 @@ private:
 
 // Matlab-style numeric, character, and logical data.
 
 class mxArray_number : public mxArray_matlab
 {
 public:
 
   mxArray_number (mxClassID id_arg, mwSize ndims_arg, const mwSize *dims_arg,
-                  mxComplexity flag = mxREAL)
+                  mxComplexity flag = mxREAL, bool init = true)
     : mxArray_matlab (id_arg, ndims_arg, dims_arg),
-      pr (mxArray::calloc (get_number_of_elements (), get_element_size ())),
-      pi (flag == mxCOMPLEX ? mxArray::calloc (get_number_of_elements (),
-                                               get_element_size ())
-                            : 0) { }
+      pr (init ? mxArray::calloc (get_number_of_elements (),
+                                  get_element_size ())
+               : mxArray::malloc (get_number_of_elements ()
+                                  * get_element_size ())),
+      pi (flag == mxCOMPLEX
+            ? (init ? mxArray::calloc (get_number_of_elements (),
+                                       get_element_size ())
+                    : mxArray::malloc (get_number_of_elements ()
+                                       * get_element_size ()))
+            : 0) { }
 
   mxArray_number (mxClassID id_arg, const dim_vector& dv,
                   mxComplexity flag = mxREAL)
     : mxArray_matlab (id_arg, dv),
       pr (mxArray::calloc (get_number_of_elements (), get_element_size ())),
       pi (flag == mxCOMPLEX ? mxArray::calloc (get_number_of_elements (),
                                                get_element_size ())
-                            : 0) { }
+                            : 0)
+  { }
 
   mxArray_number (mxClassID id_arg, mwSize m, mwSize n,
-                  mxComplexity flag = mxREAL)
+                  mxComplexity flag = mxREAL, bool init = true)
     : mxArray_matlab (id_arg, m, n),
-      pr (mxArray::calloc (get_number_of_elements (), get_element_size ())),
-      pi (flag == mxCOMPLEX ? mxArray::calloc (get_number_of_elements (),
-                                               get_element_size ())
-                            : 0) { }
+      pr (init ? mxArray::calloc (get_number_of_elements (),
+                                  get_element_size ())
+               : mxArray::malloc (get_number_of_elements ()
+                                  * get_element_size ())),
+      pi (flag == mxCOMPLEX
+            ? (init ? mxArray::calloc (get_number_of_elements (),
+                                       get_element_size ())
+                    : mxArray::malloc (get_number_of_elements ()
+                                       * get_element_size ()))
+            : 0)
+  { }
 
   mxArray_number (mxClassID id_arg, double val)
     : mxArray_matlab (id_arg, 1, 1),
       pr (mxArray::calloc (get_number_of_elements (), get_element_size ())),
       pi (0)
   {
     double *dpr = static_cast<double *> (pr);
     dpr[0] = val;
@@ -1902,24 +1916,25 @@ private:
 };
 
 // ------------------------------------------------------------------
 
 mxArray::mxArray (const octave_value& ov)
   : rep (new mxArray_octave_value (ov)), name (0) { }
 
 mxArray::mxArray (mxClassID id, mwSize ndims, const mwSize *dims,
-                  mxComplexity flag)
-  : rep (new mxArray_number (id, ndims, dims, flag)), name (0) { }
+                  mxComplexity flag, bool init)
+  : rep (new mxArray_number (id, ndims, dims, flag, init)), name (0) { }
 
 mxArray::mxArray (mxClassID id, const dim_vector& dv, mxComplexity flag)
   : rep (new mxArray_number (id, dv, flag)), name (0) { }
 
-mxArray::mxArray (mxClassID id, mwSize m, mwSize n, mxComplexity flag)
-  : rep (new mxArray_number (id, m, n, flag)), name (0) { }
+mxArray::mxArray (mxClassID id, mwSize m, mwSize n,
+                  mxComplexity flag, bool init)
+  : rep (new mxArray_number (id, m, n, flag, init)), name (0) { }
 
 mxArray::mxArray (mxClassID id, double val)
   : rep (new mxArray_number (id, val)), name (0) { }
 
 mxArray::mxArray (mxClassID id, mxLogical val)
   : rep (new mxArray_number (id, val)), name (0) { }
 
 mxArray::mxArray (const char *str)
@@ -2515,16 +2530,30 @@ mxCreateNumericArray (mwSize ndims, cons
 mxArray *
 mxCreateNumericMatrix (mwSize m, mwSize n, mxClassID class_id,
                        mxComplexity flag)
 {
   return maybe_mark_array (new mxArray (class_id, m, n, flag));
 }
 
 mxArray *
+mxCreateUninitNumericArray (mwSize ndims, const mwSize *dims,
+                            mxClassID class_id, mxComplexity flag)
+{
+  return maybe_mark_array (new mxArray (class_id, ndims, dims, flag, false));
+}
+
+mxArray *
+mxCreateUninitNumericMatrix (mwSize m, mwSize n, mxClassID class_id,
+                             mxComplexity flag)
+{
+  return maybe_mark_array (new mxArray (class_id, m, n, flag, false));
+}
+
+mxArray *
 mxCreateSparse (mwSize m, mwSize n, mwSize nzmax, mxComplexity flag)
 {
   return maybe_mark_array (new mxArray (mxDOUBLE_CLASS, m, n, nzmax, flag));
 }
 
 mxArray *
 mxCreateSparseLogicalMatrix (mwSize m, mwSize n, mwSize nzmax)
 {
diff --git a/libinterp/corefcn/mexproto.h b/libinterp/corefcn/mexproto.h
--- a/libinterp/corefcn/mexproto.h
+++ b/libinterp/corefcn/mexproto.h
@@ -155,16 +155,24 @@ extern OCTINTERP_API mxArray *mxCreateLo
 extern OCTINTERP_API mxArray *mxCreateLogicalScalar (mxLogical val);
 extern OCTINTERP_API mxArray *mxCreateNumericArray (mwSize ndims,
                                                     const mwSize *dims,
                                                     mxClassID class_id,
                                                     mxComplexity flag);
 extern OCTINTERP_API mxArray *mxCreateNumericMatrix (mwSize m, mwSize n,
                                                      mxClassID class_id,
                                                      mxComplexity flag);
+extern OCTINTERP_API mxArray *mxCreateUninitNumericArray (mwSize ndims,
+                                                          const mwSize *dims,
+                                                          mxClassID class_id,
+                                                          mxComplexity flag);
+extern OCTINTERP_API mxArray *mxCreateUninitNumericMatrix (mwSize m, mwSize n,
+                                                           mxClassID class_id,
+                                                           mxComplexity flag);
+
 extern OCTINTERP_API mxArray *mxCreateSparse (mwSize m, mwSize n, mwSize nzmax,
                                               mxComplexity flag);
 extern OCTINTERP_API mxArray *mxCreateSparseLogicalMatrix (mwSize m, mwSize n,
                                                            mwSize nzmax);
 extern OCTINTERP_API mxArray *mxCreateString (const char *str);
 extern OCTINTERP_API mxArray *mxCreateStructArray (mwSize ndims,
                                                    const mwSize *dims,
                                                    int num_keys,
diff --git a/libinterp/corefcn/mxarray.in.h b/libinterp/corefcn/mxarray.in.h
--- a/libinterp/corefcn/mxarray.in.h
+++ b/libinterp/corefcn/mxarray.in.h
@@ -305,21 +305,22 @@ protected:
 
 class mxArray
 {
 public:
 
   mxArray (const octave_value& ov);
 
   mxArray (mxClassID id, mwSize ndims, const mwSize *dims,
-           mxComplexity flag = mxREAL);
+           mxComplexity flag = mxREAL, bool init = true);
 
   mxArray (mxClassID id, const dim_vector& dv, mxComplexity flag = mxREAL);
 
-  mxArray (mxClassID id, mwSize m, mwSize n, mxComplexity flag = mxREAL);
+  mxArray (mxClassID id, mwSize m, mwSize n,
+           mxComplexity flag = mxREAL, bool init = true);
 
   mxArray (mxClassID id, double val);
 
   mxArray (mxClassID id, mxLogical val);
 
   mxArray (const char *str);
 
   mxArray (mwSize m, const char **str);
