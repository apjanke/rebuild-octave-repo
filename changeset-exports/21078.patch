# HG changeset patch
# User Rik <rik@octave.org>
# Date 1452894034 28800
#      Fri Jan 15 13:40:34 2016 -0800
# Node ID 49852ff04747f9217dfa02ca7cc134635e15adee
# Parent  40f931a63a917ae42affb40fad6be4c9ece1a39a
maint: Remove unnecessary declarations of retval.

* __pchip_deriv__.cc, data.cc, dirfns.cc, error.cc, file-io.cc, input.cc,
load-path.cc, octave-link.cc, strfns.cc, sysdep.cc, time.cc, toplev.cc,
urlwrite.cc, ov-cell.cc, ov.cc: Remove unnecessary declarations of retval.

diff --git a/libinterp/corefcn/__pchip_deriv__.cc b/libinterp/corefcn/__pchip_deriv__.cc
--- a/libinterp/corefcn/__pchip_deriv__.cc
+++ b/libinterp/corefcn/__pchip_deriv__.cc
@@ -52,17 +52,17 @@ extern "C"
 
 DEFUN (__pchip_deriv__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} __pchip_deriv__ (@var{x}, @var{y}, @var{dim})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
-  const int nargin = args.length ();
+  int nargin = args.length ();
 
   bool rows = (nargin == 3 && args(2).uint_value () == 2);
 
   if (nargin >= 2)
     {
       if (args(0).is_single_type () || args(1).is_single_type ())
         {
           FloatColumnVector xvec (args(0).float_vector_value ());
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -399,23 +399,23 @@ the arguments are accumulated from left 
 @example\n\
 @group\n\
 hypot (hypot (@var{x}, @var{y}), @var{z})\n\
 hypot (hypot (hypot (@var{x}, @var{y}), @var{z}), @var{w}), etc.\n\
 @end group\n\
 @end example\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   int nargin = args.length ();
 
   if (nargin < 2)
     print_usage ();
 
+  octave_value retval;
+
   if (nargin == 2)
     retval = do_hypot (args(0), args(1));
   else
     {
       retval = args(0);
 
       for (int i = 1; i < nargin; i++)
         retval = do_hypot (retval, args(i));
@@ -2832,39 +2832,32 @@ DEFUN (size_equal, args, ,
 @deftypefn {} {} size_equal (@var{a}, @var{b}, @dots{})\n\
 Return true if the dimensions of all arguments agree.\n\
 \n\
 Trailing singleton dimensions are ignored.\n\
 When called with a single or no argument @code{size_equal} returns true.\n\
 @seealso{size, numel, ndims}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   int nargin = args.length ();
 
-  retval = true;
-
   if (nargin >= 1)
     {
       dim_vector a_dims = args(0).dims ();
 
       for (int i = 1; i < nargin; ++i)
         {
           dim_vector b_dims = args(i).dims ();
 
           if (a_dims != b_dims)
-            {
-              retval = false;
-              break;
-            }
+            return ovl (false);
         }
     }
 
-  return retval;
+  return ovl (true);
 }
 
 DEFUN (nnz, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {@var{n} =} nnz (@var{a})\n\
 Return the number of nonzero elements in @var{a}.\n\
 @seealso{nzmax, nonzeros, find}\n\
 @end deftypefn")
@@ -6215,23 +6208,21 @@ Calling @code{tic} and @code{toc} this w
 If you are more interested in the CPU time that your process used, you\n\
 should use the @code{cputime} function instead.  The @code{tic} and\n\
 @code{toc} functions report the actual wall clock time that elapsed\n\
 between the calls.  This may include time spent processing other jobs or\n\
 doing nothing at all.\n\
 @seealso{toc, cputime}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   if (args.length () != 0)
     warning ("tic: ignoring extra arguments");
 
+  octave_value retval;
   octave_time now;
-
   double tmp = now.double_value ();
 
   if (nargout > 0)
     {
       double ip = 0.0;
       double frac = modf (tmp, &ip);
       uint64_t microsecs = static_cast<uint64_t> (CLOCKS_PER_SEC * frac);
       microsecs += CLOCKS_PER_SEC * static_cast<uint64_t> (ip);
@@ -6310,23 +6301,22 @@ If your system does not have a way to re
 returns 0 for each of its output values.\n\
 \n\
 Note that because Octave used some CPU time to start, it is reasonable\n\
 to check to see if @code{cputime} works by checking to see if the total\n\
 CPU time used is nonzero.\n\
 @seealso{tic, toc}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
+  if (args.length () != 0)
+    warning ("cputime: ignoring extra arguments");
+
   double usr = 0.0;
   double sys = 0.0;
 
-  if (args.length () != 0)
-    warning ("tic: ignoring extra arguments");
-
 #if defined (HAVE_GETRUSAGE)
 
   struct rusage ru;
 
   getrusage (RUSAGE_SELF, &ru);
 
   usr = static_cast<double> (ru.ru_utime.tv_sec) +
         static_cast<double> (ru.ru_utime.tv_usec) * 1e-6;
@@ -6355,19 +6345,17 @@ CPU time used is nonzero.\n\
   fraction = ticks % CLOCKS_PER_SEC;
   seconds = ticks / CLOCKS_PER_SEC;
 
   sys = static_cast<double> (seconds) + static_cast<double>(fraction) /
         static_cast<double>(CLOCKS_PER_SEC);
 
 #endif
 
-  retval = ovl (sys + usr, usr, sys);
-
-  return retval;
+  return ovl (sys + usr, usr, sys);
 }
 
 DEFUN (sort, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {} {[@var{s}, @var{i}] =} sort (@var{x})\n\
 @deftypefnx {} {[@var{s}, @var{i}] =} sort (@var{x}, @var{dim})\n\
 @deftypefnx {} {[@var{s}, @var{i}] =} sort (@var{x}, @var{mode})\n\
 @deftypefnx {} {[@var{s}, @var{i}] =} sort (@var{x}, @var{dim}, @var{mode})\n\
diff --git a/libinterp/corefcn/dirfns.cc b/libinterp/corefcn/dirfns.cc
--- a/libinterp/corefcn/dirfns.cc
+++ b/libinterp/corefcn/dirfns.cc
@@ -518,39 +518,38 @@ glob (\"file[12]\")\n\
 %! assert (result3, {"file1"; "file2"});
 */
 
 DEFUN (__fnmatch__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} fnmatch (@var{pattern}, @var{string})\n\
 Return true or false for each element of @var{string} that matches any of\n\
 the elements of the string array @var{pattern}, using the rules of\n\
+filename pattern matching.\n\
 \n\
-filename pattern matching.  For example:\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 fnmatch (\"a*b\", @{\"ab\"; \"axyzb\"; \"xyzab\"@})\n\
      @result{} [ 1; 1; 0 ]\n\
 @end group\n\
 @end example\n\
 @seealso{glob, regexp}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   if (args.length () != 2)
     print_usage ();
 
   string_vector pat = args(0).string_vector_value ();
   string_vector str = args(1).string_vector_value ();
 
   glob_match pattern (file_ops::tilde_expand (pat));
 
-  return octave_value (pattern.match (str));
+  return ovl (pattern.match (str));
 }
 
 DEFUN (filesep, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {} filesep ()\n\
 @deftypefnx {} {} filesep (\"all\")\n\
 Return the system-dependent character used to separate directory names.\n\
 \n\
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -886,18 +886,16 @@ Reissue a previous error as defined by @
 \n\
 @var{err} is a structure that must contain at least the @qcode{\"message\"}\n\
 and @qcode{\"identifier\"} fields.  @var{err} can also contain a field\n\
 @qcode{\"stack\"} that gives information on the assumed location of the\n\
 error.  Typically @var{err} is returned from @code{lasterror}.\n\
 @seealso{lasterror, lasterr, error}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   if (args.length () != 1)
     print_usage ();
 
   const octave_scalar_map err = args(0).scalar_map_value ();
 
   if (! err.contains ("message") || ! err.contains ("identifier"))
     error ("rethrow: ERR structure must contain the fields 'message and 'identifier'");
 
@@ -1009,17 +1007,17 @@ error.  Typically @var{err} is returned 
                     pr_where_1 (std::cerr,
                                 "error: called from '%d' in file %s near line %d",
                                 nm.c_str (), file.c_str (), l);
                 }
             }
         }
     }
 
-  return retval;
+  return ovl ();
 }
 
 // Determine whether the first argument to error or warning function
 // should be handled as the message identifier or as the format string.
 
 static bool
 maybe_extract_message_id (const std::string& caller,
                           const octave_value_list& args,
@@ -2049,19 +2047,18 @@ if (nargin != 2)\n\
 endif\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 to check for the proper number of arguments.\n\
 @end deftypefn")
 {
-  octave_value_list retval;
   handle_message (usage_with_id, "", "unknown", args, true);
-  return retval;
+  return ovl ();
 }
 
 DEFUN (beep_on_error, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {} {@var{val} =} beep_on_error ()\n\
 @deftypefnx {} {@var{old_val} =} beep_on_error (@var{new_val})\n\
 @deftypefnx {} {} beep_on_error (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave will try\n\
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -672,24 +672,22 @@ freport ()\n\
      @print{}     1     w    ieee-le    stdout\n\
      @print{}     2     w    ieee-le    stderr\n\
      @print{}     3     r    ieee-le    myfile\n\
 @end group\n\
 @end example\n\
 @seealso{fopen, fclose, is_valid_file_id}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
   if (args.length () > 0)
     warning ("freport: ignoring extra arguments");
 
   octave_stdout << octave_stream_list::list_open_files ();
 
-  return retval;
+  return ovl ();
 }
 
 DEFUN (frewind, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {} {} frewind (@var{fid})\n\
 @deftypefnx {} {@var{status} =} frewind (@var{fid})\n\
 Move the file pointer to the beginning of the file specified by file\n\
 descriptor @var{fid}.\n\
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -958,18 +958,16 @@ functions.\n\
 Disable echoing of commands as they are executed in script files and\n\
 functions.\n\
 @end table\n\
 \n\
 @noindent\n\
 With no arguments, @code{echo} toggles the current echo state.\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
   string_vector argv = args.make_argv ();
 
   switch (args.length ())
     {
     case 0:
       {
         if ((Vecho_executing_commands & ECHO_SCRIPTS)
             || (Vecho_executing_commands & ECHO_FUNCTIONS))
diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -2282,21 +2282,19 @@ rehash_internal (void)
 }
 
 DEFUN (rehash, , ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} rehash ()\n\
 Reinitialize Octave's load path directory cache.\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
   rehash_internal ();
 
-  return retval;
+  return ovl ();
 }
 
 DEFUN (command_line_path, , ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} command_line_path (@dots{})\n\
 Return the command line path variable.\n\
 \n\
 @seealso{path, addpath, rmpath, genpath, pathdef, savepath, pathsep}\n\
diff --git a/libinterp/corefcn/octave-link.cc b/libinterp/corefcn/octave-link.cc
--- a/libinterp/corefcn/octave-link.cc
+++ b/libinterp/corefcn/octave-link.cc
@@ -104,17 +104,17 @@ octave_link::do_discard_events (void)
 }
 
 DEFUN (__octave_link_enabled__, , ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} __octave_link_enabled__ ()\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
-  return octave_value (octave_link::enabled ());
+  return ovl (octave_link::enabled ());
 }
 
 DEFUN (__octave_link_edit_file__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} __octave_link_edit_file__ (@var{file})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
@@ -370,25 +370,25 @@ Undocumented internal function.\n\
 }
 
 DEFUN (__octave_link_show_preferences__, , ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} __octave_link_show_preferences__ ()\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
-  return octave_value (octave_link::show_preferences ());
+  return ovl (octave_link::show_preferences ());
 }
 
 DEFUN (__octave_link_show_doc__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} __octave_link_show_doc__ (@var{filename})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   std::string file;
 
   if (args.length () >= 1)
     file = args(0).string_value();
 
-  return octave_value (octave_link::show_doc (file));
+  return ovl (octave_link::show_doc (file));
 }
 
diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -196,18 +196,16 @@ strvcat ([97, 98, 99], \"\", @{\"98\", \
           \"d      \"\n\
           \"str1   \"\n\
           \"half   \"]\n\
 @end group\n\
 @end example\n\
 @seealso{char, strcat, cstrcat}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   int nargin = args.length ();
   int n_elts = 0;
   size_t max_len = 0;
   std::queue<string_vector> args_as_strings;
 
   for (int i = 0; i < nargin; i++)
     {
       string_vector s = args(i).xstring_vector_value ("strvcat: unable to convert some args to strings");
@@ -256,19 +254,17 @@ strvcat ([97, 98, 99], \"\", @{\"98\", \
                     t += std::string (max_len - t_len, ' ');
 
                   result[k++] = t;
                 }
             }
         }
     }
 
-  retval = octave_value (result, '\'');
-
-  return retval;
+  return octave_value (result, '\'');
 }
 
 /*
 %!assert (strvcat (""), "");
 %!assert (strvcat (100) == "d");
 %!assert (strvcat (100,100), ["d";"d"])
 %!assert (strvcat ({100,100}), ["d";"d"])
 %!assert (strvcat ([100,100]), ["dd"])
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -186,23 +186,23 @@ w32_shell_execute (const std::string& fi
 #endif
 
 DEFUN (__open_with_system_app__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} __open_with_system_app__ (@var{file})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   if (args.length () != 1)
     print_usage ();
 
   std::string file = args(0).xstring_value ("__open_with_system_app__: argument must be a filename");
 
+  octave_value retval;
+
 #if defined (__WIN32__) && ! defined (_POSIX_VERSION)
   HINSTANCE status = ShellExecute (0, 0, file.c_str (), 0, 0,
                                    SW_SHOWNORMAL);
 
   // ShellExecute returns a value greater than 32 if successful.
   retval = (reinterpret_cast<ptrdiff_t> (status) > 32);
 #elif defined (__APPLE__)
   octave_value_list tmp
@@ -637,32 +637,30 @@ DEFUN (setenv, args, ,
 @deftypefnx {} {} putenv (@dots{})\n\
 Set the value of the environment variable @var{var} to @var{value}.\n\
 \n\
 If no @var{value} is specified then the variable will be assigned the null\n\
 string.\n\
 @seealso{unsetenv, getenv}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   std::string var = args(0).xstring_value ("setenv: VAR must be a string");
 
   std::string val = (nargin == 2
                      ? args(1).xstring_value ("setenv: VALUE must be a string")
                      : "");
 
   octave_env::putenv (var, val);
 
-  return retval;
+  return ovl ();
 }
 
 DEFALIAS (putenv, setenv);
 
 /*
 %!test
 %! setenv ("dummy_variable_that_cannot_matter", "foobar");
 %! assert (getenv ("dummy_variable_that_cannot_matter"), "foobar");
@@ -735,17 +733,17 @@ returning the empty string if no key is 
       if (c == -1)
         c = 0;
 
       char s[2] = { static_cast<char> (c), '\0' };
 
       retval = s;
     }
 
-  return ovl ();
+  return retval;
 }
 
 DEFUN (pause, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {} pause ()\n\
 @deftypefnx {} {} pause (@var{n})\n\
 Suspend the execution of the program for @var{n} seconds.\n\
 \n\
diff --git a/libinterp/corefcn/time.cc b/libinterp/corefcn/time.cc
--- a/libinterp/corefcn/time.cc
+++ b/libinterp/corefcn/time.cc
@@ -435,18 +435,16 @@ Locale's date representation (mm/dd/yy).
 Last two digits of year (00-99).\n\
 \n\
 @item %Y\n\
 Year (1970-).\n\
 @end table\n\
 @seealso{strptime, localtime, gmtime, mktime, time, now, date, clock, datenum, datestr, datevec, calendar, weekday}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   if (args.length () != 2)
     print_usage ();
 
   std::string fmt = args(0).xstring_value ("strftime: FMT must be a string");
 
   octave_scalar_map map = args(1).xscalar_map_value ("strftime: TM_STRUCT must be a structure");
 
   octave_base_tm tm = extract_tm (map, "strftime");
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -823,23 +823,21 @@ the operating system as Octave's exit st
 \n\
 When exiting, Octave will attempt to run the m-file @file{finish.m} if it\n\
 exists.  User commands to save the workspace or clean up temporary files\n\
 may be placed in that file.  Alternatively, another m-file may be scheduled\n\
 to run using @code{atexit}.\n\
 @seealso{atexit}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
   // Confirm OK to shutdown.  Note: A dynamic function installation similar
   // to overriding polymorphism for which the GUI can install its own "quit"
   // yet call this base "quit" could be nice.  No link would be needed here.
   if (! octave_link::confirm_shutdown ())
-    return retval;
+    return ovl ();
 
   if (! quit_allowed)
     error ("quit: not supported in embedded mode");
 
   if (args.length () > 0)
     {
       int tmp = args(0).nint_value ();
 
@@ -853,46 +851,44 @@ to run using @code{atexit}.\n\
   // exiting.
 
   quitting_gracefully = true;
 
   octave_interrupt_state = -1;
 
   octave_throw_interrupt_exception ();
 
-  return retval;
+  return ovl ();
 }
 
 DEFALIAS (exit, quit);
 
 DEFUN (warranty, , ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} warranty ()\n\
 Describe the conditions for copying and distributing Octave.\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
   octave_stdout << "\n" << octave_name_version_and_copyright () << "\n\
 \n\
 GNU Octave is free software; you can redistribute it and/or modify\n\
 it under the terms of the GNU General Public License as published by\n\
 the Free Software Foundation; either version 3 of the License, or\n\
 (at your option) any later version.\n\
 \n\
 GNU Octave is distributed in the hope that it will be useful,\n\
 but WITHOUT ANY WARRANTY; without even the implied warranty of\n\
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\
 GNU General Public License for more details.\n\
 \n\
 You should have received a copy of the GNU General Public License\n\
 along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\
 \n";
 
-  return retval;
+  return ovl ();
 }
 
 // Execute a shell command.
 
 static int
 wait_for_input (int fid)
 {
   int retval = -1;
diff --git a/libinterp/corefcn/urlwrite.cc b/libinterp/corefcn/urlwrite.cc
--- a/libinterp/corefcn/urlwrite.cc
+++ b/libinterp/corefcn/urlwrite.cc
@@ -730,18 +730,16 @@ Undocumented internal function\n\
 }
 
 DEFUN (__ftp_rmdir__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} __ftp_rmdir__ (@var{handle}, @var{path})\n\
 Undocumented internal function\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   if (args.length () != 2)
     error ("__ftp_rmdir__: incorrect number of arguments");
 
   std::string dir = args(1).xstring_value ("__ftp_rmdir__: DIR must be a string");
 
   url_transfer curl = ch_manager::get_object (args(0));
 
   if (! curl.is_valid ())
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -1196,18 +1196,16 @@ Create a new cell array object.\n\
 \n\
 If invoked with a single scalar integer argument, return a square\n\
 @nospell{NxN} cell array.  If invoked with two or more scalar integer\n\
 arguments, or a vector of integer values, return an array with the given\n\
 dimensions.\n\
 @seealso{cellstr, mat2cell, num2cell, struct2cell}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   int nargin = args.length ();
 
   dim_vector dims;
 
   switch (nargin)
     {
     case 0:
       dims = dim_vector (0, 0);
@@ -1227,19 +1225,17 @@ dimensions.\n\
       }
       break;
     }
 
   dims.chop_trailing_singletons ();
 
   check_dimensions (dims, "cell");
 
-  retval = Cell (dims, Matrix ());
-
-  return retval;
+  return ovl (Cell (dims, Matrix ()));
 }
 
 DEFUN (iscellstr, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} iscellstr (@var{cell})\n\
 Return true if every element of the cell array @var{cell} is a character\n\
 string.\n\
 @seealso{ischar}\n\
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -3009,34 +3009,30 @@ subsref (val, idx)\n\
 @noindent\n\
 Note that this is the same as writing @code{val(:, 1:2)}.\n\
 \n\
 If @var{idx} is an empty structure array with fields @samp{type} and\n\
 @samp{subs}, return @var{val}.\n\
 @seealso{subsasgn, substruct}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
   if (args.length () != 2)
     print_usage ();
 
   std::string type;
   std::list<octave_value_list> idx;
 
   decode_subscripts ("subsref", args(1), type, idx);
 
   octave_value arg0 = args(0);
 
   if (type.empty ())
     return ovl (arg0);
   else
     return arg0.subsref (type, idx, nargout);
-
-  return retval;
 }
 
 DEFUN (subsasgn, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} subsasgn (@var{val}, @var{idx}, @var{rhs})\n\
 Perform the subscripted assignment operation according to the subscript\n\
 specified by @var{idx}.\n\
 \n\
