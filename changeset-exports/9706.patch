# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1254982152 -7200
#      Thu Oct 08 08:09:12 2009 +0200
# Node ID 71160b139b07ff094d28442f10cb278c3bf3f99c
# Parent  5acd99c3e79435b3936751d5e38d46c158f38b63
simplify length,ndims,size and size_equal

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-10-08  Jaroslav Hajek  <highegg@gmail.com>
+
+	* data.cc (Flength): Simplify.
+	(Fndims): Simplify.
+	(Fsize): Rewrite, use dim_vector::redim to simplify.
+	(Fsize_equal): Don't chop trailing singletons (should be already chopped).
+
 2009-10-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* utils.cc (dims_to_numel): New function.
 	* utils.h: Declare it.
 	* ov-base.cc (octave_base_value::numel (const octave_value_list&)):
 	Use it here.
 	* data.cc (Fnumel): Also here.
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -2288,22 +2288,17 @@ DEFUN (length, args, ,
 Return the `length' of the object @var{a}.  For matrix objects, the\n\
 length is the number of rows or columns, whichever is greater (this\n\
 odd definition is used for compatibility with @sc{matlab}).\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
-    {
-      int len = args(0).length ();
-
-      if (! error_state)
-	retval = len;
-    }
+    retval = args(0).length ();
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (ndims, args, ,
   "-*- texinfo -*-\n\
@@ -2311,22 +2306,17 @@ DEFUN (ndims, args, ,
 Returns the number of dimensions of array @var{a}.\n\
 For any array, the result will always be larger than or equal to 2.\n\
 Trailing singleton dimensions are not counted.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
-    {
-      int n_dims = args(0).ndims ();
-
-      if (! error_state)
-	retval = n_dims;
-    }
+    retval = args(0).ndims ();
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (numel, args, ,
   "-*- texinfo -*-\n\
@@ -2397,57 +2387,46 @@ returns the number of columns in the giv
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
-      dim_vector dimensions = args(0).dims ();
-
-      int ndims = dimensions.length ();
-
-      Matrix m (1, ndims);
+      const dim_vector dimensions = args(0).dims ();
 
       if (nargout > 1)
 	{
-	  for (int i = nargout-1; i >= ndims; i--)
-	    retval(i) = 1;
-
-	  if (ndims > nargout)
-	    {
-	      octave_idx_type d = 1;
-
-	      while (ndims >= nargout)
-		d *= dimensions(--ndims);
-	      
-	      retval(ndims) = d;
-	    }
-
-	  while (ndims--)
-	    retval(ndims) = dimensions(ndims);
+          const dim_vector rdims = dimensions.redim (nargout);
+          retval.resize (nargout);
+          for (int i = 0; i < nargout; i++)
+            retval(i) = rdims(i);
 	}
       else
 	{
+          int ndims = dimensions.length ();
+
+          NoAlias<Matrix> m (1, ndims);
+
 	  for (int i = 0; i < ndims; i++)
-	    m(0, i) = dimensions(i);
+	    m(i) = dimensions(i);
 
 	  retval(0) = m;
 	}
     }
   else if (nargin == 2 && nargout < 2)
     {
       octave_idx_type nd = args(1).int_value (true);
 
       if (error_state)
 	error ("size: expecting scalar as second argument");
       else
 	{
-	  dim_vector dv = args(0).dims ();
+	  const dim_vector dv = args(0).dims ();
 
 	  if (nd > 0)
 	    {
 	      if (nd <= dv.length ())
 		retval(0) = dv(nd-1);
 	      else 
 		retval(0) = 1;
 	    }
@@ -2474,22 +2453,20 @@ Called with a single argument, size_equa
 
   int nargin = args.length ();
 
   if (nargin >= 1)
     {
       retval = true;
 
       dim_vector a_dims = args(0).dims ();
-      a_dims.chop_trailing_singletons ();
 
       for (int i = 1; i < nargin; ++i)
         {
           dim_vector b_dims = args(i).dims ();
-          b_dims.chop_trailing_singletons ();
 
           if (a_dims != b_dims)
 	    {
 	      retval = false;
 	      break;
 	    }
         }
     }
