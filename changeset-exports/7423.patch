# HG changeset patch
# User dbateman
# Date 1201305287 0
#      Fri Jan 25 23:54:47 2008 +0000
# Node ID 342a48abed2a772202ab501eb397d26baf5ba4ce
# Parent  a7554a7f99818220c6534124ea0feed01bbd429e
[project @ 2008-01-25 23:54:47 by dbateman]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,15 +1,16 @@
 2008-01-25  Alexander Barth  <barth.alexander@gmail.com>
 
 	* general/interpn.m: Compatibility fix. Don't ndgrid vector
 	abscissa.
 	
 2008-01-25  David Bateman  <dbateman@free.fr>
 
+	* general/__splinen__.m: Treat mixed orientation vectors.
 	* plot/__scatter__.m: Remove NaN values from data.
 	* plot/__patch__.m: Vectorize treatment of trailing NaN values.
 
 2008-01-25  Thomas Weber  <thomas.weber.mail@gmail.com>
 
 	* linear-algebra/trace.m: Test cases for non 2-d args.
 
 2008-01-25  James Packer  <james.packer@wadh.ox.ac.uk>
diff --git a/scripts/general/__splinen__.m b/scripts/general/__splinen__.m
--- a/scripts/general/__splinen__.m
+++ b/scripts/general/__splinen__.m
@@ -34,15 +34,15 @@ function yi = __splinen__ (x, y, xi, ext
       !iscell (xi) || length(xi) < ndims(y) || any (! cellfun (isvec, xi)))
     error ("%s: non gridded data or dimensions inconsistent", f);
   endif
   yi = y;
   for i = length(x):-1:1
     yi = permute (spline (x{i}, yi, xi{i}), [length(x),1:length(x)-1]);
   endfor
 
-  [xi{:}] = ndgrid (xi{:});
+  [xi{:}] = ndgrid (cellfun (@(x) x(:), xi, "UniformOutput", false){:});
   idx = zeros (size(xi{1}));
   for i = 1 : length(x)
     idx |= xi{i} < min (x{i}(:)) | xi{i} > max (x{i}(:));
   endfor
   yi(idx) = extrapval;
 endfunction
diff --git a/scripts/general/interpn.m b/scripts/general/interpn.m
--- a/scripts/general/interpn.m
+++ b/scripts/general/interpn.m
@@ -153,27 +153,43 @@ function vi = interpn (varargin)
     vi = v (sub2ind (sz, idx{:}));
     idx = zeros (prod(yshape),1);
     for i = 1 : nd
       idx |= y{i} < min (x{i}(:)) | y{i} > max (x{i}(:));
     endfor
     vi(idx) = extrapval;
     vi = reshape (vi, yshape); 
   elseif (strcmp (method, "spline"))
-    szi = size (y{1});
-    for i = 1 : nd
-      y{i} = y{i}(:);
-    endfor
+    if (any (! cellfun (@isvector, y)))
+      for i = 2 : nd
+	if (! size_equal (y{1}, y{i}))
+	  error ("dimensional mismatch");
+	endif
+	idx (1 : nd) = {1};
+	idx (i) = ":";
+	y{i} = y{i}(idx{:});
+      endfor
+      idx (1 : nd) = {1};
+      idx (1) = ":";
+      y{1} = y{1}(idx{:});
+    endif
 
     vi = __splinen__ (x, v, y, extrapval, "interpn");
 
-    ## get all diagonal elements of vi
-    sc = sum ([1 cumprod(size (vi)(1:end-1))]);
-    vi = vi(sc * [0:size(vi,1)-1] + 1);
-    vi = reshape (vi,szi);    
+    if (size_equal (y{:}))
+      ly = length (y{1});
+      idx = cell (1, ly);
+      q = cell (1, nd);
+      for i = 1 : ly
+ 	q(:) = i;
+ 	idx {i} = q;
+      endfor
+      vi = vi (cellfun (@(x) sub2ind (size(vi), x{:}), idx));
+      vi = reshape (vi, sz);    
+    endif
   elseif (strcmp (method, "cubic")) 
     error ("cubic interpolation not yet implemented");
   else
     error ("unrecognized interpolation method");
   endif
 
 endfunction
 
