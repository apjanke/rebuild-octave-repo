# HG changeset patch
# User Shai Ayal <shaiay@users.sourceforge.net>
# Date 1260391740 18000
#      Wed Dec 09 15:49:00 2009 -0500
# Node ID 7dedfd70dd9f45031dd7ef845c8059f8045202b3
# Parent  a6308dcad5ac61cc1781d13600f5c96524d5b9a8
image printing for fltk backend

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,25 @@
+2009-12-09  John W. Eaton  <jwe@octave.org>
+
+	* gl2ps-renderer.cc (draw_pixels): New template function.
+	(opengl_renderer::draw_pixels): Use it.
+
+2009-12-09  Shai Ayal  <shaiay@users.sourceforge.net>
+
+	* gl2ps.c, gl2ps.h: Use upstream version gl2ps-1.3.5-svn-20091202.
+
+	* gl-render.cc (opengl_renderer::draw_pixels): New function.
+	(opengl_renderer::draw_image): Correctly handle images with width
+	or height of 1.  Use draw_pixels.
+	* gl-render.h (opengl_renderer::draw_pixels): Provide decl.
+
+	* gl2ps-renderer.cc (glps_renderer::draw_pixels): New function.
+	* gl2ps-renderer.h (glps_renderer::draw_pixels): Provide decl.
+
 2009-12-09  John W. Eaton  <jwe@octave.org>
 
 	* load-save.cc: Call nstrftime instead of my_strftime.
 
 2009-12-09  John W. Eaton  <jwe@octave.org>
 
 	* load-save.cc: Include strftime.h.
 	(write_header): Call my_strftime instead of strftime.
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -2700,22 +2700,43 @@ opengl_renderer::draw_image (const image
   bool ok = true;
   
   const Matrix x = props.get_xdata ().matrix_value ();
   const Matrix y = props.get_ydata ().matrix_value ();
   const ColumnVector p0 = xform.transform (x(0), y(0), 0);
   const ColumnVector p1 = xform.transform (x(1), y(1), 0);
 
   // image pixel size in screen pixel units
-  float pix_dx = (p1(0) - p0(0))/(w-1);
-  float pix_dy = (p1(1) - p0(1))/(h-1);
-
+  float pix_dx, pix_dy;
   // image pixel size in normalized units
-  float nor_dx = (x(1) - x(0))/(w-1);
-  float nor_dy = (y(1) - y(0))/(h-1);
+  float nor_dx, nor_dy;
+
+  if (w > 1) 
+    {
+      pix_dx = (p1(0) - p0(0))/(w-1);
+      nor_dx = (x(1) - x(0))/(w-1);
+    }
+  else
+    {
+      const ColumnVector p1 = xform.transform (x(1) + 1, y(1), 0);
+      pix_dx = p1(0) - p0(0);
+      nor_dx = 1;
+    }
+  if (h > 1)
+    {
+      pix_dy = (p1(1) - p0(1))/(h-1);
+      nor_dy = (y(1) - y(0))/(h-1);
+    }
+  else
+    {
+      const ColumnVector p1 = xform.transform (x(1), y(1) + 1, 0);
+      pix_dy = p1(1) - p0(1);
+      nor_dy = 1;
+    }
+
 
   // OpenGL won't draw the image if it's origin is outside the
   // viewport/clipping plane so we must do the clipping
   // ourselfes - only draw part of the image
 
   int j0 = 0, j1 = w;
   int i0 = 0, i1 = h;
 
@@ -2766,17 +2787,17 @@ opengl_renderer::draw_image (const image
 	      for (int j = j0, idx = (i-i0)*(j1-j0)*3; j < j1; j++, idx += 3)
 		{
 		  a[idx]   = xcdata(i,j,0);
 		  a[idx+1] = xcdata(i,j,1);
 		  a[idx+2] = xcdata(i,j,2);
 		}
 	    }
 
-	  glDrawPixels (j1-j0, i1-i0, GL_RGB, GL_FLOAT, a);
+	  draw_pixels (j1-j0, i1-i0, GL_RGB, GL_FLOAT, a);
 
 	}
       else if (cdata.is_uint16_type ())
 	{
 	  const uint16NDArray xcdata = cdata.uint16_array_value ();
 
 	  OCTAVE_LOCAL_BUFFER (GLushort, a, 3*(j1-j0)*(i1-i0));
 
@@ -2785,17 +2806,17 @@ opengl_renderer::draw_image (const image
 	      for (int j = j0, idx = (i-i0)*(j1-j0)*3; j < j1; j++, idx += 3)
 		{
 		  a[idx]   = xcdata(i,j,0);
 		  a[idx+1] = xcdata(i,j,1);
 		  a[idx+2] = xcdata(i,j,2);
 		}
 	    }
 
-	  glDrawPixels (j1-j0, i1-i0, GL_RGB, GL_UNSIGNED_SHORT, a);
+	  draw_pixels (j1-j0, i1-i0, GL_RGB, GL_UNSIGNED_SHORT, a);
 
 	}
       else if (cdata.is_uint8_type ())
 	{
 	  const uint8NDArray xcdata = cdata.uint8_array_value ();
 
 	  OCTAVE_LOCAL_BUFFER (GLubyte, a, 3*(j1-j0)*(i1-i0));
 
@@ -2804,17 +2825,17 @@ opengl_renderer::draw_image (const image
 	      for (int j = j0, idx = (i-i0)*(j1-j0)*3; j < j1; j++, idx += 3)
 		{
 		  a[idx]   = xcdata(i,j,0);
 		  a[idx+1] = xcdata(i,j,1);
 		  a[idx+2] = xcdata(i,j,2);
 		}
 	    }
 
-	  glDrawPixels (j1-j0, i1-i0, GL_RGB, GL_UNSIGNED_BYTE, a);
+	  draw_pixels (j1-j0, i1-i0, GL_RGB, GL_UNSIGNED_BYTE, a);
 	}
       else
 	{
 	  ok = false;
 	  warning ("opengl_texture::draw: invalid image data type (expected double, uint16, or uint8)");
 	}
     }
   else 
@@ -2827,16 +2848,23 @@ opengl_renderer::draw_image (const image
 
 void
 opengl_renderer::set_viewport (int w, int h)
 {
   glViewport (0, 0, w, h);
 }
 
 void
+opengl_renderer::draw_pixels (GLsizei width, GLsizei height, GLenum format,
+                              GLenum type, const GLvoid *data)
+{
+  glDrawPixels (width, height, format, type, data);
+}
+
+void
 opengl_renderer::set_color (const Matrix& c)
 {
   glColor3dv (c.data ());
 #if HAVE_FREETYPE
   text_renderer.set_color (c);
 #endif
 }
 
diff --git a/src/gl-render.h b/src/gl-render.h
--- a/src/gl-render.h
+++ b/src/gl-render.h
@@ -104,16 +104,19 @@ protected:
 			       uint8NDArray& pixels,
 			       Matrix& bbox,
 			       int& rot_mode);
 
   virtual Matrix render_text (const std::string& txt,
 			      double x, double y, double z,
 			      int halign, int valign, double rotation = 0.0);
 
+  virtual void draw_pixels (GLsizei w, GLsizei h, GLenum format, 
+			    GLenum type, const GLvoid *data);
+
 private:
   opengl_renderer (const opengl_renderer&) { }
 
   opengl_renderer& operator = (const opengl_renderer&)
     { return *this; }
 
   bool is_nan_or_inf (double x, double y, double z) const
     {
diff --git a/src/gl2ps-renderer.cc b/src/gl2ps-renderer.cc
--- a/src/gl2ps-renderer.cc
+++ b/src/gl2ps-renderer.cc
@@ -140,15 +140,39 @@ glps_renderer::set_font (const base_prop
   else if (fn == "zapfdingbats")
     fontname = "ZapfDingbats";
   else 
     fontname = "Helvetica";
 
   // FIXME -- add support for bold and italic
 }
 
+template <typename T>
+static void
+draw_pixels (GLsizei w, GLsizei h, GLenum format, const T *data)
+{
+  OCTAVE_LOCAL_BUFFER (GLfloat, a, 3*w*h);
+
+  for (int i = 0; i < 3*w*h; i++)
+    a[i] = data[i];
+    
+  gl2psDrawPixels (w, h, 0, 0, format, GL_FLOAT, a);
+}
+
+void 
+glps_renderer::draw_pixels (GLsizei w, GLsizei h, GLenum format,
+                            GLenum type, const GLvoid *data)
+{
+  if (type == GL_UNSIGNED_SHORT) 
+    ::draw_pixels (w, h, format, static_cast<const GLushort *> (data));
+  else if (type == GL_UNSIGNED_BYTE) 
+    ::draw_pixels (w, h, format, static_cast<const GLubyte *> (data));
+  else
+    gl2psDrawPixels (w, h, 0, 0, format, type, data);
+}
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/gl2ps-renderer.h b/src/gl2ps-renderer.h
--- a/src/gl2ps-renderer.h
+++ b/src/gl2ps-renderer.h
@@ -42,16 +42,19 @@ protected:
 
   virtual Matrix render_text (const std::string& txt,
 			      double x, double y, double z,
 			      int halign, int valign, double rotation = 0.0);
 
 
   virtual void set_font (const base_properties& props);
 
+  virtual void draw_pixels (GLsizei w, GLsizei h, GLenum format, 
+			    GLenum type, const GLvoid *data);
+
   virtual void set_linestyle (const std::string& s, bool use_stipple)
   {
     opengl_renderer::set_linestyle (s, use_stipple);
     if (use_stipple)
       gl2psEnable (GL2PS_LINE_STIPPLE);
     else
       gl2psDisable (GL2PS_LINE_STIPPLE);
   }
diff --git a/src/gl2ps.c b/src/gl2ps.c
--- a/src/gl2ps.c
+++ b/src/gl2ps.c
@@ -162,16 +162,17 @@ typedef struct {
 } GL2PSstring;
 
 typedef struct {
   GLsizei width, height;
   /* Note: for an imagemap, 'type' indicates if it has already been
      written to the file or not, and 'format' indicates if it is
      visible or not */
   GLenum format, type;
+  GLfloat zoom_x, zoom_y;
   GLfloat *pixels;
 } GL2PSimage;
 
 typedef struct _GL2PSimagemap GL2PSimagemap;
 
 struct _GL2PSimagemap {
   GL2PSimage *image;
   GL2PSimagemap *next;
@@ -288,34 +289,34 @@ static void gl2psMsg(GLint level, const 
   }
   /* if(level == GL2PS_ERROR) exit(1); */
 }
 
 static void *gl2psMalloc(size_t size)
 {
   void *ptr;
 
-  if(!size) return(NULL);
+  if(!size) return NULL;
   ptr = malloc(size);
   if(!ptr){
     gl2psMsg(GL2PS_ERROR, "Couldn't allocate requested memory");
-    exit(1);
-  }
-  return(ptr);
+    return NULL;
+  }
+  return ptr;
 }
 
 static void *gl2psRealloc(void *ptr, size_t size)
 {
-  if(!size) return(NULL);
+  if(!size) return NULL;
   ptr = realloc(ptr, size);
   if(!ptr){
     gl2psMsg(GL2PS_ERROR, "Couldn't reallocate requested memory");
-    exit(1);
-  }
-  return(ptr);
+    return NULL;
+  }
+  return ptr;
 }
 
 static void gl2psFree(void *ptr)
 {
   if(!ptr) return;
   free(ptr);
 }
 
@@ -528,17 +529,17 @@ static GL2PSlist *gl2psListCreate(GLint 
   if(incr <= 0) incr = 1;
   list = (GL2PSlist*)gl2psMalloc(sizeof(GL2PSlist));
   list->nmax = 0;
   list->incr = incr;
   list->size = size;
   list->n = 0;
   list->array = NULL;
   gl2psListRealloc(list, n);
-  return(list);
+  return list;
 }
 
 static void gl2psListReset(GL2PSlist *list)
 {
   if(!list) return;
   list->n = 0;
 }
 
@@ -559,30 +560,30 @@ static void gl2psListAdd(GL2PSlist *list
   gl2psListRealloc(list, list->n);
   memcpy(&list->array[(list->n - 1) * list->size], data, list->size);
 }
 
 static int gl2psListNbr(GL2PSlist *list)
 {
   if(!list)
     return 0;
-  return(list->n);
+  return list->n;
 }
 
 static void *gl2psListPointer(GL2PSlist *list, GLint index)
 {
   if(!list){
     gl2psMsg(GL2PS_ERROR, "Cannot point into unallocated list");
     return NULL;
   }
   if((index < 0) || (index >= list->n)){
     gl2psMsg(GL2PS_ERROR, "Wrong list index in gl2psListPointer");
     return NULL;
   }
-  return(&list->array[index * list->size]);
+  return &list->array[index * list->size];
 }
 
 static void gl2psListSort(GL2PSlist *list,
                           int (*fcmp)(const void *a, const void *b))
 {
   if(!list)
     return;
   qsort(list->array, list->n, list->size, fcmp);
@@ -740,16 +741,18 @@ static GL2PSimage *gl2psCopyPixmap(GL2PS
 {
   int size;
   GL2PSimage *image = (GL2PSimage*)gl2psMalloc(sizeof(GL2PSimage));
   
   image->width = im->width;
   image->height = im->height;
   image->format = im->format;
   image->type = im->type;
+  image->zoom_x = im->zoom_x;
+  image->zoom_y = im->zoom_y;
 
   switch(image->format){
   case GL_RGBA:
     size = image->height * image->width * 4 * sizeof(GLfloat);
     break;
   case GL_RGB:
   default:
     size = image->height * image->width * 3 * sizeof(GLfloat);
@@ -1044,25 +1047,25 @@ static GLboolean gl2psSamePosition(GL2PS
 /********************************************************************* 
  *
  * 3D sorting routines 
  *
  *********************************************************************/
 
 static GLfloat gl2psComparePointPlane(GL2PSxyz point, GL2PSplane plane)
 {
-  return(plane[0] * point[0] + 
-         plane[1] * point[1] + 
-         plane[2] * point[2] + 
-         plane[3]);
+  return (plane[0] * point[0] + 
+          plane[1] * point[1] + 
+          plane[2] * point[2] + 
+          plane[3]);
 }
 
 static GLfloat gl2psPsca(GLfloat *a, GLfloat *b)
 {
-  return(a[0]*b[0] + a[1]*b[1] + a[2]*b[2]);
+  return (a[0]*b[0] + a[1]*b[1] + a[2]*b[2]);
 }
 
 static void gl2psPvec(GLfloat *a, GLfloat *b, GLfloat *c)
 {
   c[0] = a[1]*b[2] - a[2]*b[1];
   c[1] = a[2]*b[0] - a[0]*b[2];
   c[2] = a[0]*b[1] - a[1]*b[0];
 }
@@ -1390,17 +1393,17 @@ static int gl2psCompareDepth(const void 
 }
 
 static int gl2psTrianglesFirst(const void *a, const void *b)
 {
   GL2PSprimitive *q, *w;
 
   q = *(GL2PSprimitive**)a;
   w = *(GL2PSprimitive**)b;
-  return(q->type < w->type ? 1 : -1);
+  return (q->type < w->type ? 1 : -1);
 }
 
 static GLint gl2psFindRoot(GL2PSlist *primitives, GL2PSprimitive **root)
 {
   GLint i, j, count, best = 1000000, index = 0;
   GL2PSprimitive *prim1, *prim2;
   GL2PSplane plane;
   GLint maxp;
@@ -2317,16 +2320,18 @@ static void gl2psParseFeedbackBuffer(GLi
         prim->pattern = 0;
         prim->factor = 0;
         prim->width = 1;
         
         node = (GL2PSimagemap*)gl2psMalloc(sizeof(GL2PSimagemap));
         node->image = (GL2PSimage*)gl2psMalloc(sizeof(GL2PSimage));
         node->image->type = 0;
         node->image->format = 0;
+        node->image->zoom_x = 1.0F;
+        node->image->zoom_y = 1.0F;
         node->next = NULL;
         
         if(gl2ps->imagemap_head == NULL)
           gl2ps->imagemap_head = node;
         else
           gl2ps->imagemap_tail->next = node;
         gl2ps->imagemap_tail = node;
         prim->data.image = node->image;
@@ -2419,17 +2424,17 @@ static void gl2psPrintPostScriptPixmap(G
      8-bit per component case? */
   int greyscale = 0; /* set to 1 to output greyscale image */
   int nbit = 8; /* number of bits per color compoment (2, 4 or 8) */
 
   if((width <= 0) || (height <= 0)) return;
 
   gl2psPrintf("gsave\n");
   gl2psPrintf("%.2f %.2f translate\n", x, y); 
-  gl2psPrintf("%d %d scale\n", width, height); 
+  gl2psPrintf("%.2f %.2f scale\n", width * im->zoom_x, height * im->zoom_y);
 
   if(greyscale){ /* greyscale */
     gl2psPrintf("/picstr %d string def\n", width); 
     gl2psPrintf("%d %d %d\n", width, height, 8); 
     gl2psPrintf("[ %d 0 0 -%d 0 %d ]\n", width, height, height); 
     gl2psPrintf("{ currentfile picstr readhexstring pop }\n");
     gl2psPrintf("image\n");
     for(row = 0; row < height; row++){
@@ -3386,33 +3391,49 @@ static int gl2psPrintPDFLineWidth(GLfloa
   else if(lw < 1e-4 || lw > 1e6) /* avoid %e formatting */
     return gl2psPrintf("%f w\n", lw);
   else
     return gl2psPrintf("%g w\n", lw);
 }
 
 static void gl2psPutPDFText(GL2PSstring *text, int cnt, GLfloat x, GLfloat y)
 {
-  gl2ps->streamlength += 
-    gl2psPrintf("BT\n"
-                "/F%d %d Tf\n"
-                "%f %f Td\n"
-                "(%s) Tj\n"
-                "ET\n", 
-                cnt, text->fontsize, x, y, text->str);  
+  GLfloat rad, crad, srad;
+  
+  if(text->angle == 0.0F){
+    gl2ps->streamlength += gl2psPrintf
+      ("BT\n"
+       "/F%d %d Tf\n"
+       "%f %f Td\n"
+       "(%s) Tj\n"
+       "ET\n", 
+       cnt, text->fontsize, x, y, text->str);
+  }
+  else{
+    rad = (GLfloat)M_PI * text->angle / 180.0F;
+    srad = (GLfloat)sin(rad);
+    crad = (GLfloat)cos(rad);
+    gl2ps->streamlength += gl2psPrintf
+      ("BT\n"
+       "/F%d %d Tf\n"
+       "%f %f %f %f %f %f Tm\n"
+       "(%s) Tj\n"
+       "ET\n",
+       cnt, text->fontsize, crad, srad, -srad, crad, x, y, text->str);
+  }
 }
 
 static void gl2psPutPDFImage(GL2PSimage *image, int cnt, GLfloat x, GLfloat y)
 {
-  gl2ps->streamlength += 
-    gl2psPrintf("q\n"
-                "%d 0 0 %d %f %f cm\n"
-                "/Im%d Do\n"
-                "Q\n",
-                (int)image->width, (int)image->height, x, y, cnt);
+  gl2ps->streamlength += gl2psPrintf
+    ("q\n"
+     "%d 0 0 %d %f %f cm\n"
+     "/Im%d Do\n"
+     "Q\n",
+     (int)image->width, (int)image->height, x, y, cnt);
 }
 
 static void gl2psPDFstacksInit(void)
 {
   gl2ps->objects_stack = 7 /* FIXED_XREF_ENTRIES */ + 1; 
   gl2ps->extgs_stack = 0;   
   gl2ps->font_stack = 0;    
   gl2ps->im_stack = 0;      
@@ -4466,37 +4487,39 @@ static int gl2psPrintPDFShaderSimpleExtG
 
 /* Similar groups of functions for pixmaps and text */
 
 static int gl2psPrintPDFPixmapStreamData(GL2PSimage *im,
                                          size_t (*action)(unsigned long data, 
                                                           size_t size), 
                                          int gray)
 {
-  int x, y;
+  int x, y, shift;
   GLfloat r, g, b, a;
 
   if(im->format != GL_RGBA && gray)
     return 0;
 
-  if(gray && gray !=8 && gray != 16)
+  if(gray && gray != 8 && gray != 16)
     gray = 8;
 
   gray /= 8;
   
+  shift = (sizeof(unsigned long) - 1) * 8;
+
   for(y = 0; y < im->height; ++y){
     for(x = 0; x < im->width; ++x){
       a = gl2psGetRGB(im, x, y, &r, &g, &b);
       if(im->format == GL_RGBA && gray){
-        (*action)((unsigned long)(a*255) << 24, gray);
+        (*action)((unsigned long)(a * 255) << shift, gray);
       }
       else{
-        (*action)((unsigned long)(r*255) << 24, 1);
-        (*action)((unsigned long)(g*255) << 24, 1);
-        (*action)((unsigned long)(b*255) << 24, 1);
+        (*action)((unsigned long)(r * 255) << shift, 1);
+        (*action)((unsigned long)(g * 255) << shift, 1);
+        (*action)((unsigned long)(b * 255) << shift, 1);
       }
     }
   }
 
   switch(gray){
   case 0: return 3 * im->width * im->height;
   case 1: return im->width * im->height;
   case 2: return 2 * im->width * im->height;
@@ -5777,17 +5800,17 @@ GL2PSDLL_API GLint gl2psSpecial(GLint fo
 }
 
 GL2PSDLL_API GLint gl2psDrawPixels(GLsizei width, GLsizei height,
                                    GLint xorig, GLint yorig,
                                    GLenum format, GLenum type, 
                                    const void *pixels)
 {
   int size, i;
-  GLfloat pos[4], *piv;
+  GLfloat pos[4], *piv, zoom_x, zoom_y;
   GL2PSprimitive *prim;
   GLboolean valid;
 
   if(!gl2ps || !pixels) return GL2PS_UNINITIALIZED;
 
   if((width <= 0) || (height <= 0)) return GL2PS_ERROR;
 
   if(gl2ps->options & GL2PS_NO_PIXMAP) return GL2PS_SUCCESS;
@@ -5797,16 +5820,18 @@ GL2PSDLL_API GLint gl2psDrawPixels(GLsiz
              "GL_RGB/GL_RGBA, GL_FLOAT pixels");
     return GL2PS_ERROR;
   }
 
   glGetBooleanv(GL_CURRENT_RASTER_POSITION_VALID, &valid);
   if(GL_FALSE == valid) return GL2PS_SUCCESS; /* the primitive is culled */
 
   glGetFloatv(GL_CURRENT_RASTER_POSITION, pos);
+  glGetFloatv(GL_ZOOM_X, &zoom_x);
+  glGetFloatv(GL_ZOOM_Y, &zoom_y);
 
   prim = (GL2PSprimitive*)gl2psMalloc(sizeof(GL2PSprimitive));
   prim->type = GL2PS_PIXMAP;
   prim->boundary = 0;
   prim->numverts = 1;
   prim->verts = (GL2PSvertex*)gl2psMalloc(sizeof(GL2PSvertex));
   prim->verts[0].xyz[0] = pos[0] + xorig;
   prim->verts[0].xyz[1] = pos[1] + yorig;
@@ -5815,30 +5840,32 @@ GL2PSDLL_API GLint gl2psDrawPixels(GLsiz
   prim->offset = 0;
   prim->pattern = 0;
   prim->factor = 0;
   prim->width = 1;
   glGetFloatv(GL_CURRENT_RASTER_COLOR, prim->verts[0].rgba);
   prim->data.image = (GL2PSimage*)gl2psMalloc(sizeof(GL2PSimage));
   prim->data.image->width = width;
   prim->data.image->height = height;
+  prim->data.image->zoom_x = zoom_x;
+  prim->data.image->zoom_y = zoom_y;
   prim->data.image->format = format;
   prim->data.image->type = type;
 
   switch(format){
   case GL_RGBA:
     if(gl2ps->options & GL2PS_NO_BLENDING || !gl2ps->blending){
       /* special case: blending turned off */
       prim->data.image->format = GL_RGB;
       size = height * width * 3;
       prim->data.image->pixels = (GLfloat*)gl2psMalloc(size * sizeof(GLfloat));
       piv = (GLfloat*)pixels;
       for(i = 0; i < size; ++i, ++piv){
         prim->data.image->pixels[i] = *piv;
-        if(!((i+1)%3))
+        if(!((i + 1) % 3))
           ++piv;
       }   
     }
     else{
       size = height * width * 4;
       prim->data.image->pixels = (GLfloat*)gl2psMalloc(size * sizeof(GLfloat));
       memcpy(prim->data.image->pixels, pixels, size * sizeof(GLfloat));
     }
diff --git a/src/gl2ps.h b/src/gl2ps.h
--- a/src/gl2ps.h
+++ b/src/gl2ps.h
@@ -39,16 +39,17 @@
 #include <stdio.h>
 #include <stdlib.h>
 
 /* Define GL2PSDLL at compile time to build a Windows DLL */
 
 #if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__)
 #  if defined(_MSC_VER)
 #    pragma warning(disable:4115)
+#    pragma warning(disable:4996)
 #  endif
 #  include <windows.h>
 #  if defined(GL2PSDLL)
 #    if defined(GL2PSDLL_EXPORTS)
 #      define GL2PSDLL_API __declspec(dllexport)
 #    else
 #      define GL2PSDLL_API __declspec(dllimport)
 #    endif
@@ -74,17 +75,17 @@
 #    define GL2PS_HAVE_LIBPNG
 #  endif
 #endif
 
 /* Version number */
 
 #define GL2PS_MAJOR_VERSION 1
 #define GL2PS_MINOR_VERSION 3
-#define GL2PS_PATCH_VERSION 4
+#define GL2PS_PATCH_VERSION 5
 #define GL2PS_EXTRA_VERSION ""
 
 #define GL2PS_VERSION (GL2PS_MAJOR_VERSION + \
                        0.01 * GL2PS_MINOR_VERSION + \
                        0.0001 * GL2PS_PATCH_VERSION)
 
 #define GL2PS_COPYRIGHT "(C) 1999-2009 C. Geuzaine"
 
