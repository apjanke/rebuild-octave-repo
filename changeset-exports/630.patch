# HG changeset patch
# User jwe
# Date 777329068 0
#      Fri Aug 19 20:44:28 1994 +0000
# Node ID 985a9c61f1377dc68c06d9c8fee983b90cd90898
# Parent  0788882808bce0b49ceb95c0a8660c768d753941
[project @ 1994-08-19 20:44:28 by jwe]

diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
+#include <float.h>
 #include <limits.h>
 #include <string.h>
 #include <iostream.h>
 #include <fstream.h>
 #include <strstream.h>
 #include <ctype.h>
 
 #include "tree-base.h"
@@ -112,40 +113,43 @@ enum save_type
 #elif defined (VAX_G_FLOAT)
 #define NATIVE_FLOAT_FORMAT LS_VAX_G
 #else
 LOSE! LOSE!
 #endif
 
 #define swap_1_bytes(x,y)
 
-#define LS_DO_READ(TYPE,data,size,len,stream) \
+#define LS_DO_READ(TYPE,swap,data,size,len,stream) \
   do \
     { \
       volatile TYPE *ptr = (TYPE *) data; \
       stream.read ((TYPE *) ptr, size * len); \
-      swap_ ## size ## _bytes ((char *) ptr, len); \
+      if (swap) \
+        swap_ ## size ## _bytes ((char *) ptr, len); \
       TYPE tmp = ptr[0]; \
       for (int i = len - 1; i > 0; i--) \
         data[i] = ptr[i]; \
       data[0] = tmp; \
     } \
   while (0)
 
+// Have to use copy here to avoid writing over data accessed via
+// Matrix::data().
+
 #define LS_DO_WRITE(TYPE,data,size,len,stream) \
   do \
     { \
       char tmp_type = (char) type; \
       stream.write (&tmp_type, 1); \
-      volatile TYPE *ptr = (TYPE *) data; \
-      TYPE tmp = (TYPE) data[0]; \
-      for (int i = 1; i < len; i++) \
+      TYPE *ptr = new TYPE [len]; \
+      for (int i = 0; i < len; i++) \
         ptr[i] = (TYPE) data[i]; \
-      ptr[0] = tmp; \
       stream.write ((TYPE *) ptr, size * len); \
+      delete [] ptr ; \
     } \
   while (0)
 
 // Loading variables from files.
 
 // But first, some data conversion routines.
 
 // Currently, we only handle conversions for the IEEE types.  To fix
@@ -216,207 +220,403 @@ swap_8_bytes (char *t, int len)
 
 // XXX FIXME XXX -- assumes sizeof (Complex) == 8
 // XXX FIXME XXX -- assumes sizeof (double) == 8
 // XXX FIXME XXX -- assumes sizeof (float) == 4
 
 #if defined (IEEE_LITTLE_ENDIAN)
 
 static void
-IEEE_big_to_IEEE_little (double *d, int len)
+IEEE_big_double_to_IEEE_little_double (double *d, int len)
 {
   swap_8_bytes ((char *) d, len);
 }
 
 static void
-VAX_D_to_IEEE_little (double *d, int len)
+VAX_D_double_to_IEEE_little_double (double *d, int len)
 {
   error ("unable to convert from VAX D float to IEEE little endian format");
 }
 
 static void
-VAX_G_to_IEEE_little (double *d, int len)
+VAX_G_double_to_IEEE_little_double (double *d, int len)
 {
   error ("unable to convert from VAX G float to IEEE little endian format");
 }
 
 static void
-Cray_to_IEEE_little (double *d, int len)
+Cray_to_IEEE_little_double (double *d, int len)
+{
+  error ("unable to convert from Cray to IEEE little endian format");
+}
+
+static void
+IEEE_big_float_to_IEEE_little_float (float *d, int len)
+{
+  swap_4_bytes ((char *) d, len);
+}
+
+static void
+VAX_D_float_to_IEEE_little_float (float *d, int len)
+{
+  error ("unable to convert from VAX D float to IEEE little endian format");
+}
+
+static void
+VAX_G_float_to_IEEE_little_float (float *d, int len)
+{
+  error ("unable to convert from VAX G float to IEEE little endian format");
+}
+
+static void
+Cray_to_IEEE_little_float (float *d, int len)
 {
   error ("unable to convert from Cray to IEEE little endian format");
 }
 
 #elif defined (IEEE_BIG_ENDIAN)
 
 static void
-IEEE_little_to_IEEE_big (double *d, int len)
+IEEE_little_double_to_IEEE_big_double (double *d, int len)
 {
   swap_8_bytes ((char *) d, len);
 }
 
 static void
-VAX_D_to_IEEE_big (double *d, int len)
+VAX_D_double_to_IEEE_big_double (double *d, int len)
 {
   error ("unable to convert from VAX D float to IEEE big endian format");
 }
 
 static void
-VAX_G_to_IEEE_big (double *d, int len)
+VAX_G_double_to_IEEE_big_double (double *d, int len)
 {
   error ("unable to convert from VAX G float to IEEE big endian format");
 }
 
 static void
-Cray_to_IEEE_big (double *d, int len)
+Cray_to_IEEE_big_double (double *d, int len)
+{
+  error ("unable to convert from Cray to IEEE big endian format");
+}
+
+static void
+IEEE_little_float_to_IEEE_big_float (float *d, int len)
+{
+  swap_4_bytes ((char *) d, len);
+}
+
+static void
+VAX_D_float_to_IEEE_big_float (float *d, int len)
+{
+  error ("unable to convert from VAX D float to IEEE big endian format");
+}
+
+static void
+VAX_G_float_to_IEEE_big_float (float *d, int len)
+{
+  error ("unable to convert from VAX G float to IEEE big endian format");
+}
+
+static void
+Cray_to_IEEE_big_float (float *d, int len)
 {
   error ("unable to convert from Cray to IEEE big endian format");
 }
 
 #elif defined (VAX_D_FLOAT)
 
 static void
-IEEE_little_to_VAX_D (double *d, int len)
+IEEE_little_double_to_VAX_D_double (double *d, int len)
 {
   error ("unable to convert from IEEE little endian to VAX D float format");
 }
 
 static void
-IEEE_big_to_VAX_D (double *d, int len)
+IEEE_big_double_to_VAX_D_double (double *d, int len)
 {
   error ("unable to convert from IEEE big endian to VAX D float format");
 }
 
 static void
-VAX_G_to_VAX_D (double *d, int len)
+VAX_G_double_to_VAX_D_double (double *d, int len)
 {
   error ("unable to convert from VAX G float to VAX D float format");
 }
 
 static void
-Cray_to_VAX_D (double *d, int len)
+Cray_to_VAX_D_double (double *d, int len)
+{
+  error ("unable to convert from Cray to VAX D float format");
+}
+
+static void
+IEEE_little_float_to_VAX_D_float (float *d, int len)
+{
+  error ("unable to convert from IEEE little endian to VAX D float format");
+}
+
+static void
+IEEE_big_float_to_VAX_D_float (float *d, int len)
+{
+  error ("unable to convert from IEEE big endian to VAX D float format");
+}
+
+static void
+VAX_G_float_to_VAX_D_float (float *d, int len)
+{
+  error ("unable to convert from VAX G float to VAX D float format");
+}
+
+static void
+Cray_to_VAX_D_float (float *d, int len)
 {
   error ("unable to convert from Cray to VAX D float format");
 }
 
 #elif defined (VAX_G_FLOAT)
 
 static void
-IEEE_little_to_VAX_G (double *d, int len)
+IEEE_little_double_to_VAX_G_double (double *d, int len)
 {
   error ("unable to convert from IEEE little endian to VAX G float format");
 }
 
 static void
-IEEE_big_to_VAX_G (double *d, int len)
+IEEE_big_double_to_VAX_G_double (double *d, int len)
 {
   error ("unable to convert from IEEE big endian to VAX G float format");
 }
 
 static void
-VAX_D_to_VAX_G (double *d, int len)
+VAX_D_double_to_VAX_G_double (double *d, int len)
 {
   error ("unable to convert from VAX D float to VAX G float format");
 }
 
 static void
-Cray_to_VAX_G (double *d, int len)
+Cray_to_VAX_G_double (double *d, int len)
+{
+  error ("unable to convert from VAX G float to VAX G float format");
+}
+
+static void
+IEEE_little_float_to_VAX_G_float (float *d, int len)
+{
+  error ("unable to convert from IEEE little endian to VAX G float format");
+}
+
+static void
+IEEE_big_float_to_VAX_G_float (float *d, int len)
+{
+  error ("unable to convert from IEEE big endian to VAX G float format");
+}
+
+static void
+VAX_D_float_to_VAX_G_float (float *d, int len)
+{
+  error ("unable to convert from VAX D float to VAX G float format");
+}
+
+static void
+Cray_to_VAX_G_float (float *d, int len)
 {
   error ("unable to convert from VAX G float to VAX G float format");
 }
 
 #endif
 
 static void
-do_float_format_conversion (double *data, int len,
+do_double_format_conversion (double *data, int len,
+			     floating_point_format fmt)
+{
+  switch (fmt)
+    {
+#if defined (IEEE_LITTLE_ENDIAN)
+
+    case LS_IEEE_LITTLE:
+      break;
+
+    case LS_IEEE_BIG:
+      IEEE_big_double_to_IEEE_little_double (data, len);
+      break;
+
+    case LS_VAX_D:
+      VAX_D_double_to_IEEE_little_double (data, len);
+      break;
+
+    case LS_VAX_G:
+      VAX_G_double_to_IEEE_little_double (data, len);
+      break;
+
+    case LS_CRAY:
+      Cray_to_IEEE_little_double (data, len);
+      break;
+
+#elif defined (IEEE_BIG_ENDIAN)
+
+    case LS_IEEE_LITTLE:
+      IEEE_little_double_to_IEEE_big_double (data, len);
+      break;
+
+    case LS_IEEE_BIG:
+      break;
+
+    case LS_VAX_D:
+      VAX_D_double_to_IEEE_big_double (data, len);
+      break;
+
+    case LS_VAX_G:
+      VAX_G_double_to_IEEE_big_double (data, len);
+      break;
+
+    case LS_CRAY:
+      Cray_to_IEEE_big_double (data, len);
+      break;
+
+#elif defined (VAX_D_FLOAT)
+
+    case LS_IEEE_LITTLE:
+      IEEE_little_double_to_VAX_D_double (data, len);
+      break;
+
+    case LS_IEEE_BIG:
+      IEEE_big_double_to_VAX_D_double (data, len);
+      break;
+
+    case LS_VAX_D:
+      break;
+
+    case LS_VAX_G:
+      VAX_G_double_to_VAX_D_double (data, len);
+      break;
+
+    case LS_CRAY:
+      Cray_to_VAX_D_double (data, len);
+      break;
+
+#elif defined (VAX_G_FLOAT)
+
+    case LS_IEEE_LITTLE:
+      IEEE_little_double_to_VAX_G_double (data, len);
+      break;
+
+    case LS_IEEE_BIG:
+      IEEE_big_double_to_VAX_G_double (data, len);
+      break;
+
+    case LS_VAX_D:
+      VAX_D_double_to_VAX_G_double (data, len);
+      break;
+
+    case LS_VAX_G:
+      break;
+
+    case LS_CRAY:
+      Cray_to_VAX_G_double (data, len);
+      break;
+
+#else
+LOSE! LOSE!
+#endif
+
+    default:
+      panic_impossible ();
+      break;
+    }
+}
+
+static void
+do_float_format_conversion (float *data, int len,
 			    floating_point_format fmt)
 {
   switch (fmt)
     {
 #if defined (IEEE_LITTLE_ENDIAN)
 
     case LS_IEEE_LITTLE:
       break;
 
     case LS_IEEE_BIG:
-      IEEE_big_to_IEEE_little (data, len);
+      IEEE_big_float_to_IEEE_little_float (data, len);
       break;
 
     case LS_VAX_D:
-      VAX_D_to_IEEE_little (data, len);
+      VAX_D_float_to_IEEE_little_float (data, len);
       break;
 
     case LS_VAX_G:
-      VAX_G_to_IEEE_little (data, len);
+      VAX_G_float_to_IEEE_little_float (data, len);
       break;
 
     case LS_CRAY:
-      Cray_to_IEEE_little (data, len);
+      Cray_to_IEEE_little_float (data, len);
       break;
 
 #elif defined (IEEE_BIG_ENDIAN)
 
     case LS_IEEE_LITTLE:
-      IEEE_little_to_IEEE_big (data, len);
+      IEEE_little_float_to_IEEE_big_float (data, len);
       break;
 
     case LS_IEEE_BIG:
       break;
 
     case LS_VAX_D:
-      VAX_D_to_IEEE_big (data, len);
+      VAX_D_float_to_IEEE_big_float (data, len);
       break;
 
     case LS_VAX_G:
-      VAX_G_to_IEEE_big (data, len);
+      VAX_G_float_to_IEEE_big_float (data, len);
       break;
 
     case LS_CRAY:
-      Cray_to_IEEE_big (data, len);
+      Cray_to_IEEE_big_float (data, len);
       break;
 
 #elif defined (VAX_D_FLOAT)
 
     case LS_IEEE_LITTLE:
-      IEEE_little_to_VAX_D (data, len);
+      IEEE_little_float_to_VAX_D_float (data, len);
       break;
 
     case LS_IEEE_BIG:
-      IEEE_big_to_VAX_D (data, len);
+      IEEE_big_float_to_VAX_D_float (data, len);
       break;
 
     case LS_VAX_D:
       break;
 
     case LS_VAX_G:
-      VAX_G_to_VAX_D (data, len);
+      VAX_G_float_to_VAX_D_float (data, len);
       break;
 
     case LS_CRAY:
-      Cray_to_VAX_D (data, len);
+      Cray_to_VAX_D_float (data, len);
       break;
 
 #elif defined (VAX_G_FLOAT)
 
     case LS_IEEE_LITTLE:
-      IEEE_little_to_VAX_G (data, len);
+      IEEE_little_float_to_VAX_G_float (data, len);
       break;
 
     case LS_IEEE_BIG:
-      IEEE_big_to_VAX_G (data, len);
+      IEEE_big_float_to_VAX_G_float (data, len);
       break;
 
     case LS_VAX_D:
-      VAX_D_to_VAX_G (data, len);
+      VAX_D_float_to_VAX_G_float (data, len);
       break;
 
     case LS_VAX_G:
       break;
 
     case LS_CRAY:
-      Cray_to_VAX_G (data, len);
+      Cray_to_VAX_G_float (data, len);
       break;
 
 #else
 LOSE! LOSE!
 #endif
 
     default:
       panic_impossible ();
@@ -426,52 +626,64 @@ LOSE! LOSE!
 
 static void
 read_doubles (istream& is, double *data, save_type type, int len,
 	      int swap, floating_point_format fmt)
 {
   switch (type)
     {
     case LS_U_CHAR:
-      LS_DO_READ (unsigned char, data, 1, len, is);
+      LS_DO_READ (unsigned char, swap, data, 1, len, is);
       break;
 
     case LS_U_SHORT:
-      LS_DO_READ (unsigned TWO_BYTE_INT, data, 2, len, is);
+      LS_DO_READ (unsigned TWO_BYTE_INT, swap, data, 2, len, is);
       break;
 
     case LS_U_INT:
-      LS_DO_READ (unsigned FOUR_BYTE_INT, data, 4, len, is);
+      LS_DO_READ (unsigned FOUR_BYTE_INT, swap, data, 4, len, is);
       break;
 
     case LS_CHAR:
-      LS_DO_READ (signed char, data, 1, len, is);
+      LS_DO_READ (signed char, swap, data, 1, len, is);
       break;
 
     case LS_SHORT:
-      LS_DO_READ (TWO_BYTE_INT, data, 2, len, is);
+      LS_DO_READ (TWO_BYTE_INT, swap, data, 2, len, is);
       break;
 
     case LS_INT:
-      LS_DO_READ (FOUR_BYTE_INT, data, 4, len, is);
+      LS_DO_READ (FOUR_BYTE_INT, swap, data, 4, len, is);
+      break;
+
+    case LS_FLOAT:
+      {
+	volatile float *ptr = (float *) data;
+	is.read (data, 4 * len);
+	do_float_format_conversion ((float *) data, len, fmt);
+	float tmp = ptr[0];
+	for (int i = len - 1; i > 0; i--)
+	  data[i] = ptr[i];
+	data[0] = tmp;
+      }
       break;
 
     case LS_DOUBLE:
       is.read (data, 8 * len);
-      do_float_format_conversion (data, len, fmt);
+      do_double_format_conversion (data, len, fmt);
       break;
 
     default:
       is.clear (ios::failbit|is.rdstate ());
       break;
     }
 }
 
 static void
-write_doubles (ostream& os, double *data, save_type type, int len)
+write_doubles (ostream& os, const double *data, save_type type, int len)
 {
   switch (type)
     {
     case LS_U_CHAR:
       LS_DO_WRITE (unsigned char, data, 1, len, os);
       break;
 
     case LS_U_SHORT:
@@ -489,16 +701,20 @@ write_doubles (ostream& os, double *data
     case LS_SHORT:
       LS_DO_WRITE (TWO_BYTE_INT, data, 2, len, os);
       break;
 
     case LS_INT:
       LS_DO_WRITE (FOUR_BYTE_INT, data, 4, len, os);
       break;
 
+    case LS_FLOAT:
+      LS_DO_WRITE (float, data, 4, len, os);
+      break;
+
     case LS_DOUBLE:
       {
 	char tmp_type = (char) type;
 	os.write (&tmp_type, 1);
 	os.write (data, 8 * len);
       }
       break;
 
@@ -607,18 +823,66 @@ all_parts_int (const ComplexMatrix& m, d
 	  min_val = i_val;
 
 	if (D_NINT (r_val) != r_val || D_NINT (i_val) != i_val)
 	  return 0;
       }
   return 1;
 }
 
-// Shouldn't this be implemented in terms of other functions that are
-// already available?
+static int
+too_large_for_float (const Matrix& m)
+{
+  int nr = m.rows ();
+  int nc = m.columns ();
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	Complex val = m.elem (i, j);
+
+	double r_val = real (val);
+	double i_val = imag (val);
+
+	if (r_val > FLT_MAX
+	    || i_val > FLT_MAX
+	    || r_val < FLT_MIN
+	    || i_val < FLT_MIN)
+	  return 1;
+      }
+
+  return 0;
+}
+
+static int
+too_large_for_float (const ComplexMatrix& m)
+{
+  int nr = m.rows ();
+  int nc = m.columns ();
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      {
+	Complex val = m.elem (i, j);
+
+	double r_val = real (val);
+	double i_val = imag (val);
+
+	if (r_val > FLT_MAX
+	    || i_val > FLT_MAX
+	    || r_val < FLT_MIN
+	    || i_val < FLT_MIN)
+	  return 1;
+      }
+
+  return 0;
+}
+
+// XXX FIXME XXX -- shouldn't this be implemented in terms of other
+// functions that are already available?
 
 // Install a variable with name NAME and the value specified TC in the
 // symbol table.  If FORCE is nonzero, replace any existing definition
 // for NAME.  If GLOBAL is nonzero, make the variable global.
 //
 // Assumes TC is defined.
 
 static void
@@ -1179,21 +1443,22 @@ read_binary_data (istream& is, int swap,
   tmp = 0;
   if (! is.read (&tmp, 1))
     goto data_read_error;
 
   switch (tmp)
     {
     case 1:
       {
-	double dtmp;
-	if (! is.read (&dtmp, 8))
+	if (! is.read (&tmp, 1))
 	  goto data_read_error;
-	if (swap)
-	  swap_8_bytes ((char *) &dtmp);
+	double dtmp;
+	read_doubles (is, &dtmp, (save_type) tmp, 1, swap, fmt);
+	if (! is)
+	  goto data_read_error;
 	tc = dtmp;
       }
       break;
 
     case 2:
       {
 	FOUR_BYTE_INT nr, nc;
 	if (! is.read (&nr, 4))
@@ -1213,21 +1478,22 @@ read_binary_data (istream& is, int swap,
 	if (! is)
 	  goto data_read_error;
 	tc = m;
       }
       break;
 
     case 3:
       {
-	Complex ctmp;
-	if (! is.read (&ctmp, 16))
+	if (! is.read (&tmp, 1))
 	  goto data_read_error;
-	if (swap)
-	  swap_8_bytes ((char *) &ctmp, 2);
+	Complex ctmp;
+	read_doubles (is, (double *) &ctmp, (save_type) tmp, 2, swap, fmt);
+	if (! is)
+	  goto data_read_error;
 	tc = ctmp;
       }
       break;
 
     case 4:
       {
 	FOUR_BYTE_INT nr, nc;
 	if (! is.read (&nr, 4))
@@ -1238,17 +1504,18 @@ read_binary_data (istream& is, int swap,
 	  goto data_read_error;
 	if (swap)
 	  swap_4_bytes ((char *) &nc);
 	if (! is.read (&tmp, 1))
 	  goto data_read_error;
 	ComplexMatrix m (nr, nc);
 	Complex *im = m.fortran_vec ();
 	int len = nr * nc;
-	read_doubles (is, (double *) im, (save_type) tmp, 2*len, swap, fmt);
+	read_doubles (is, (double *) im, (save_type) tmp, 2*len,
+		      swap, fmt);
 	if (! is)
 	  goto data_read_error;
 	tc = m;
       }
       break;
 
     case 5:
       {
@@ -1267,16 +1534,18 @@ read_binary_data (istream& is, int swap,
 	  }
 	s[len] = '\0';
 	tc = s;
       }
       break;
 
     case 6:
       {
+	if (! is.read (&tmp, 1))
+	  goto data_read_error;
 	double bas, lim, inc;
 	if (! is.read (&bas, 8))
 	  goto data_read_error;
 	if (swap)
 	  swap_8_bytes ((char *) &bas);
 	if (! is.read (&lim, 8))
 	  goto data_read_error;
 	if (swap)
@@ -1309,26 +1578,21 @@ read_binary_data (istream& is, int swap,
 
 static void
 read_mat_binary_data (istream& is, double *data, int precision,
 		      int len, int swap, floating_point_format flt_fmt)
 {
   switch (precision)
     {
     case 0:
-      {
-	if (! is.read (data, 8*len))
-	  return;
-
-	do_float_format_conversion (data, len, flt_fmt);
-      }
+      read_doubles (is, data, LS_DOUBLE, len, swap, flt_fmt);
       break;
 
     case 1:
-      error ("load: reading 32 bit floating point data unsupported");
+      read_doubles (is, data, LS_FLOAT, len, swap, flt_fmt);
       break;
 
     case 2:
       read_doubles (is, data, LS_INT, len, swap, flt_fmt);
       break;
 
     case 3:
       read_doubles (is, data, LS_SHORT, len, swap, flt_fmt);
@@ -1571,17 +1835,17 @@ matches_patterns (char **patterns, int n
       if (fnmatch (*patterns++, name, __FNM_FLAGS) == 0)
 	return 1;
     }
   return 0;
 }
 
 static int
 read_binary_file_header (istream& is, int& swap,
-			 floating_point_format flt_fmt, int quiet = 0) 
+			 floating_point_format& flt_fmt, int quiet = 0) 
 {
   int magic_len = 10;
   char magic [magic_len+1];
   is.read (magic, magic_len);
   magic[magic_len] = '\0';
   if (strncmp (magic, "Octave-1-L", magic_len) == 0)
     {
 #if defined (WORDS_BIGENDIAN)
@@ -1967,17 +2231,17 @@ get_save_type (double max_val, double mi
 }
 
 // Save the data from TC along with the corresponding NAME, help
 // string DOC, and global flag MARK_AS_GLOBAL on stream OS in the
 // binary format described above for load_binary_data.
 
 static int
 save_binary_data (ostream& os, const tree_constant& tc, char *name,
-		  char *doc, int mark_as_global) 
+		  char *doc, int mark_as_global, int save_as_floats) 
 {
   int fail = 0;
 
   FOUR_BYTE_INT name_len = 0;
   if (name)
     name_len = strlen (name);
 
   os.write (&name_len, 4);
@@ -1994,81 +2258,107 @@ save_binary_data (ostream& os, const tre
 
   tmp = mark_as_global;
   os.write (&tmp, 1);
 
   if (tc.is_real_scalar ())
     {
       tmp = 1;
       os.write (&tmp, 1);
+      tmp = (char) LS_DOUBLE;
+      os.write (&tmp, 1);
       double tmp = tc.double_value ();
       os.write (&tmp, 8);
     }
   else if (tc.is_real_matrix ())
     {
       tmp = 2;
       os.write (&tmp, 1);
       Matrix m = tc.matrix_value ();
       FOUR_BYTE_INT nr = m.rows ();
       FOUR_BYTE_INT nc = m.columns ();
       os.write (&nr, 4);
       os.write (&nc, 4);
       int len = nr * nc;
       save_type st = LS_DOUBLE;
-      if (len > 8192)
+      if (save_as_floats)
+	{
+	  if (too_large_for_float (m))
+	    {
+	      warning ("save: some values too large to save as floats --");
+	      warning ("save: saving as doubles instead");
+	    }
+	  else
+	    st = LS_FLOAT;
+	}
+      else if (len > 8192) // XXX FIXME XXX -- make this configurable.
 	{
 	  double max_val, min_val;
 	  if (all_parts_int (m, max_val, min_val))
 	    st = get_save_type (max_val, min_val);
 	}
-      double *mtmp = m.fortran_vec ();
+      const double *mtmp = m.data ();
       write_doubles (os, mtmp, st, len);
     }
   else if (tc.is_complex_scalar ())
     {
       tmp = 3;
       os.write (&tmp, 1);
+      tmp = (char) LS_DOUBLE;
+      os.write (&tmp, 1);
       Complex tmp = tc.complex_value ();
       os.write (&tmp, 16);
     }
   else if (tc.is_complex_matrix ())
     {
       tmp = 4;
       os.write (&tmp, 1);
       ComplexMatrix m = tc.complex_matrix_value ();
       FOUR_BYTE_INT nr = m.rows ();
       FOUR_BYTE_INT nc = m.columns ();
       os.write (&nr, 4);
       os.write (&nc, 4);
       int len = nr * nc;
       save_type st = LS_DOUBLE;
-      if (len > 4096)
+      if (save_as_floats)
+	{
+	  if (too_large_for_float (m))
+	    {
+	      warning ("save: some values too large to save as floats --");
+	      warning ("save: saving as doubles instead");
+	    }
+	  else
+	    st = LS_FLOAT;
+	}
+      else if (len > 4096) // XXX FIXME XXX -- make this configurable.
 	{
 	  double max_val, min_val;
 	  if (all_parts_int (m, max_val, min_val))
 	    st = get_save_type (max_val, min_val);
 	}
-      Complex *mtmp = m.fortran_vec ();
-      write_doubles (os, (double *) mtmp, st, 2*len);
+      const Complex *mtmp = m.data ();
+      write_doubles (os, (const double *) mtmp, st, 2*len);
     }
   else if (tc.is_string ())
     {
       tmp = 5;
       os.write (&tmp, 1);
       int nr = tc.rows ();
       int nc = tc.columns ();
       FOUR_BYTE_INT len = nr * nc;
       os.write (&len, 4);
       char *s = tc.string_value ();
       os.write (s, len);
     }
   else if (tc.is_range ())
     {
       tmp = 6;
       os.write (&tmp, 1);
+      tmp = (char) LS_DOUBLE;
+      os.write (&tmp, 1);
       Range r = tc.range_value ();
       double bas = r.base ();
       double lim = r.limit ();
       double inc = r.inc ();
       os.write (&bas, 8);
       os.write (&lim, 8);
       os.write (&inc, 8);
     }
@@ -2163,17 +2453,18 @@ save_ascii_data (ostream& os, const tree
   os.precision (old_precision);
 
   return (os && ! fail);
 }
 
 // Save the info from sr on stream os in the format specified by fmt.
 
 static void
-do_save (ostream& os, symbol_record *sr, load_save_format fmt)
+do_save (ostream& os, symbol_record *sr, load_save_format fmt,
+	 int save_as_floats)
 {
   if (! sr->is_variable ())
     {
       error ("save: can only save variables, not functions");
       return;
     }
 
   char *name = sr->name ();
@@ -2186,62 +2477,62 @@ do_save (ostream& os, symbol_record *sr,
 
   switch (fmt)
     {
     case LS_ASCII:
       save_ascii_data (os, tc, name, global);
       break;
 
     case LS_BINARY:
-      save_binary_data (os, tc, name, help, global);
+      save_binary_data (os, tc, name, help, global, save_as_floats);
       break;
 
     default:
       panic_impossible ();
       break;
     }
 }
 
 // Save variables with names matching PATTERN on stream OS in the
 // format specified by FMT.  If SAVE_BUILTINS is nonzero, also save
 // builtin variables with names that match PATTERN.
 
 static int
 save_vars (ostream& os, char *pattern, int save_builtins,
-	   load_save_format fmt)
+	   load_save_format fmt, int save_as_floats)
 {
   int count;
 
   symbol_record **vars = curr_sym_tab->glob
     (count, pattern, symbol_def::USER_VARIABLE, SYMTAB_ALL_SCOPES);
 
   int saved = count;
 
   int i;
 
   for (i = 0; i < count; i++)
     {
-      do_save (os, vars[i], fmt);
+      do_save (os, vars[i], fmt, save_as_floats);
 
       if (error_state)
 	break;
     }
 
   delete [] vars;
 
   if (! error_state && save_builtins)
     {
       symbol_record **vars = global_sym_tab->glob
 	(count, pattern, symbol_def::BUILTIN_VARIABLE, SYMTAB_ALL_SCOPES);
 
       saved += count;
 
       for (i = 0; i < count; i++)
 	{
-	  do_save (os, vars[i], fmt);
+	  do_save (os, vars[i], fmt, save_as_floats);
 
 	  if (error_state)
 	    break;
 	}
 
       delete [] vars;
     }
 
@@ -2257,48 +2548,58 @@ get_default_save_format (void)
 
   if (strcasecmp (fmt, "binary") == 0)
     retval = LS_BINARY;
       
   return retval;
 }
 
 DEFUN_TEXT ("save", Fsave, Ssave, -1, 1,
-  "save [-ascii] [-binary] [-save-builtins] file [pattern ...]\n\
+  "save [-ascii] [-binary] [-float-binary] [-save-builtins] file [pattern ...]\n\
 \n\
 save variables in a file")
 {
   Octave_object retval;
 
   DEFINE_ARGV("save");
 
   argc--;
   argv++;
 
 // Here is where we would get the default save format if it were
 // stored in a user preference variable.
 
   int save_builtins = 0;
 
+  int save_as_floats = 0;
+
   load_save_format format = get_default_save_format ();
 
   while (argc > 0)
     {
       if (strcmp (*argv, "-ascii") == 0 || strcmp (*argv, "-a") == 0)
 	{
 	  format = LS_ASCII;
 	  argc--;
 	  argv++;
 	}
       else if (strcmp (*argv, "-binary") == 0 || strcmp (*argv, "-b") == 0)
 	{
 	  format = LS_BINARY;
 	  argc--;
 	  argv++;
 	}
+      else if (strcmp (*argv, "-float-binary") == 0
+	       || strcmp (*argv, "-f") == 0)
+	{
+	  format = LS_BINARY;
+	  save_as_floats = 1;
+	  argc--;
+	  argv++;
+	}
       else if (strcmp (*argv, "-save-builtins") == 0)
 	{
 	  save_builtins = 1;
 	  argc--;
 	  argv++;
 	}
       else
 	break;
@@ -2306,16 +2607,23 @@ save variables in a file")
 
   if (argc < 1)
     {
       print_usage ("save");
       DELETE_ARGV;
       return retval;
     }
 
+  if (save_as_floats && format == LS_ASCII)
+    {
+      error ("save: cannot specify both -ascii and -float-binary");
+      DELETE_ARGV;
+      return retval;
+    }
+
   static ostream stream;
   static ofstream file;
   if (strcmp (*argv, "-") == 0)
     {
 // XXX FIXME XXX -- should things intended for the screen end up in a 
 // tree_constant (string)?
       stream = cout;
     }
@@ -2357,24 +2665,27 @@ save variables in a file")
 #endif
     }
 
   char tmp = (char) NATIVE_FLOAT_FORMAT;
   stream.write (&tmp, 1);
 
   if (argc == 0)
     {
-      save_vars (stream, "*", save_builtins, format);
+      save_vars (stream, "*", save_builtins, format, save_as_floats);
     }
   else
     {
       while (argc-- > 0)
 	{
-	  if (! save_vars (stream, *argv, save_builtins, format))
-	    warning ("save: no such variable `%s'", *argv);
+	  if (! save_vars (stream, *argv, save_builtins, format,
+			   save_as_floats))
+	    {
+	      warning ("save: no such variable `%s'", *argv);
+	    }
 
 	  argv++;
 	}
     }
 
   if (file);
     file.close ();
 
