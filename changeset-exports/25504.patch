# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1530026018 14400
#      Tue Jun 26 11:13:38 2018 -0400
# Node ID ace13ff63b908262fcf7acb2e21c2659e939fe23
# Parent  ec2492a2af6ab335bab669ecbfaad3e368c1a934
undo previous change; use 0 instead of O_BINARY

* mkoctfile.in.cc: Don't include <fcntl.h>.  Pass 0 instead of
O_BINARY to mkostemps.  Add some explanation about the CROSS macro
usage.

diff --git a/src/mkoctfile.in.cc b/src/mkoctfile.in.cc
--- a/src/mkoctfile.in.cc
+++ b/src/mkoctfile.in.cc
@@ -31,23 +31,32 @@ along with Octave; see the file COPYING.
 #include <list>
 #include <algorithm>
 #include <iostream>
 #include <fstream>
 #include <sstream>
 #include <vector>
 #include <cstdlib>
 
+// Programming note:  The CROSS macro here refers to building a
+// cross-compiler aware version of mkoctfile that can be used to cross
+// compile .oct file for Windows builds of Octave, not that mkoctfile
+// itself is being cross compiled.
+//
+// We don't use the wrapper and gnulib functions when we are building
+// with CROSS defined.  This configuration is only expected to work on
+// modern systems that should not need to have gnulib to fix POSIX
+// portability problems.  So we just assume a working POSIX system when
+// CROSS is defined.
+
 #if defined (CROSS)
-#  include <fcntl.h>
 #  include <stdlib.h>
 #  include <sys/types.h>
 #  include <sys/wait.h>
 #  include <unistd.h>
-
 #  ifndef OCTAVE_UNUSED
 #    define OCTAVE_UNUSED
 #  endif
 #else
 #  include "mkostemps-wrapper.h"
 #  include "unistd-wrappers.h"
 #  include "wait-wrappers.h"
 #endif
@@ -68,17 +77,17 @@ static std::map<std::string, std::string
 
 #include "shared-fcns.h"
 
 #if defined (CROSS)
 
 static int
 octave_mkostemps_wrapper (char *tmpl, int suffixlen)
 {
-  return mkostemps (tmpl, suffixlen, O_BINARY);
+  return mkostemps (tmpl, suffixlen, 0);
 }
 
 static int
 octave_unlink_wrapper (const char *nm)
 {
   return unlink (nm);
 }
 
@@ -168,20 +177,20 @@ initialize (void)
       + " -I" + quote_path (vars["OCTINCLUDEDIR"]);
 #endif
 
   if (vars["INCLUDEDIR"] != "/usr/include")
     DEFAULT_INCFLAGS += " -I" + quote_path (vars["INCLUDEDIR"]);
 
   std::string DEFAULT_LFLAGS;
 
-#if defined (OCTAVE_USE_WINDOWS_API) || defined(CROSS)
+#if defined (OCTAVE_USE_WINDOWS_API) || defined (CROSS)
 
-  // We'll be linking with -loctinterp and -loctave, so we need to know
-  // where to find them.
+  // We'll be linking the files we compile with -loctinterp and
+  // -loctave, so we need to know where to find them.
 
   DEFAULT_LFLAGS += "-L" + quote_path (vars["OCTLIBDIR"]);
 #endif
 
   if (vars["LIBDIR"] != "/usr/lib")
     DEFAULT_LFLAGS += " -L" + quote_path (vars["LIBDIR"]);
 
   vars["CPPFLAGS"] = get_variable ("CPPFLAGS", %OCTAVE_CONF_CPPFLAGS%);
