# HG changeset patch
# User Rik <rik@octave.org>
# Date 1431217170 25200
#      Sat May 09 17:19:30 2015 -0700
# Branch stable
# Node ID 4f45eaf839089b0ef9eec9645aba9d4a876152f3
# Parent  b70f8da6dcd38d76c840858fdd64e2605dbc1861
doc: Update more docstrings to have one sentence summary as first line.
Reviewed libinterp/corefcn directory.

* libinterp/corefcn/__ilu__.cc, libinterp/corefcn/balance.cc,
libinterp/corefcn/besselj.cc, libinterp/corefcn/betainc.cc,
libinterp/corefcn/bitfcns.cc, libinterp/corefcn/bsxfun.cc,
libinterp/corefcn/cellfun.cc, libinterp/corefcn/colloc.cc,
libinterp/corefcn/conv2.cc, libinterp/corefcn/data.cc,
libinterp/corefcn/debug.cc, libinterp/corefcn/defaults.cc,
libinterp/corefcn/det.cc, libinterp/corefcn/dirfns.cc,
libinterp/corefcn/dlmread.cc, libinterp/corefcn/dot.cc,
libinterp/corefcn/eig.cc, libinterp/corefcn/error.cc,
libinterp/corefcn/fft2.cc, libinterp/corefcn/fftn.cc,
libinterp/corefcn/file-io.cc, libinterp/corefcn/filter.cc,
libinterp/corefcn/find.cc, libinterp/corefcn/gammainc.cc,
libinterp/corefcn/gcd.cc, libinterp/corefcn/getgrent.cc,
libinterp/corefcn/getpwent.cc, libinterp/corefcn/getrusage.cc,
libinterp/corefcn/graphics.cc, libinterp/corefcn/help.cc,
libinterp/corefcn/hex2num.cc, libinterp/corefcn/input.cc,
libinterp/corefcn/inv.cc, libinterp/corefcn/kron.cc,
libinterp/corefcn/load-path.cc, libinterp/corefcn/load-save.cc,
libinterp/corefcn/lookup.cc, libinterp/corefcn/ls-oct-ascii.cc,
libinterp/corefcn/lsode.cc, libinterp/corefcn/lu.cc,
libinterp/corefcn/luinc.cc, libinterp/corefcn/mappers.cc,
libinterp/corefcn/matrix_type.cc, libinterp/corefcn/max.cc,
libinterp/corefcn/md5sum.cc, libinterp/corefcn/mgorth.cc,
libinterp/corefcn/nproc.cc, libinterp/corefcn/oct-hist.cc,
libinterp/corefcn/ordschur.cc, libinterp/corefcn/pager.cc,
libinterp/corefcn/pinv.cc, libinterp/corefcn/pr-output.cc,
libinterp/corefcn/pt-jit.cc, libinterp/corefcn/quad.cc,
libinterp/corefcn/quadcc.cc, libinterp/corefcn/qz.cc,
libinterp/corefcn/rand.cc, libinterp/corefcn/rcond.cc,
libinterp/corefcn/regexp.cc, libinterp/corefcn/schur.cc,
libinterp/corefcn/sighandlers.cc, libinterp/corefcn/sparse.cc,
libinterp/corefcn/spparms.cc, libinterp/corefcn/str2double.cc,
libinterp/corefcn/strfind.cc, libinterp/corefcn/strfns.cc,
libinterp/corefcn/sub2ind.cc, libinterp/corefcn/svd.cc,
libinterp/corefcn/symtab.cc, libinterp/corefcn/syscalls.cc,
libinterp/corefcn/sysdep.cc, libinterp/corefcn/time.cc,
libinterp/corefcn/toplev.cc, libinterp/corefcn/tril.cc,
libinterp/corefcn/tsearch.cc, libinterp/corefcn/typecast.cc,
libinterp/corefcn/urlwrite.cc, libinterp/corefcn/utils.cc,
libinterp/corefcn/variables.cc, scripts/polynomial/spline.m:
Update more docstrings to have one sentence summary as first line.

diff --git a/libinterp/corefcn/__ilu__.cc b/libinterp/corefcn/__ilu__.cc
--- a/libinterp/corefcn/__ilu__.cc
+++ b/libinterp/corefcn/__ilu__.cc
@@ -467,17 +467,17 @@ void ilu_crout (octave_matrix_t& sm_l, o
         }
       U = U.transpose ();
     }
 }
 
 DEFUN (__iluc__, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{L}, @var{U}] =} __iluc__ (@var{A})\n\
-@deftypefnx {Built-in Function} {[@var{L}, @var{U}] =} __iluc__ (@var{A}, @var{droptol}) \n\
+@deftypefnx {Built-in Function} {[@var{L}, @var{U}] =} __iluc__ (@var{A}, @var{droptol})\n\
 @deftypefnx {Built-in Function} {[@var{L}, @var{U}] =} __iluc__ (@var{A}, @var{droptol}, @var{milu})\n\
 @deftypefnx {Built-in Function} {[@var{L}, @var{U}, @var{P}] =} __iluc__ (@var{A}, @dots{})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length ();
   std::string milu = "off";
diff --git a/libinterp/corefcn/balance.cc b/libinterp/corefcn/balance.cc
--- a/libinterp/corefcn/balance.cc
+++ b/libinterp/corefcn/balance.cc
@@ -49,16 +49,19 @@ along with Octave; see the file COPYING.
 DEFUN (balance, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{AA} =} balance (@var{A})\n\
 @deftypefnx {Built-in Function} {@var{AA} =} balance (@var{A}, @var{opt})\n\
 @deftypefnx {Built-in Function} {[@var{DD}, @var{AA}] =} balance (@var{A}, @var{opt})\n\
 @deftypefnx {Built-in Function} {[@var{D}, @var{P}, @var{AA}] =} balance (@var{A}, @var{opt})\n\
 @deftypefnx {Built-in Function} {[@var{CC}, @var{DD}, @var{AA}, @var{BB}] =} balance (@var{A}, @var{B}, @var{opt})\n\
 \n\
+Balance the matrix @var{A} to reduce numerical errors in future\n\
+calculations.\n\
+\n\
 Compute @code{@var{AA} = @var{DD} \\ @var{A} * @var{DD}} in which @var{AA}\n\
 is a matrix whose row and column norms are roughly equal in magnitude, and\n\
 @code{@var{DD} = @var{P} * @var{D}}, in which @var{P} is a permutation\n\
 matrix and @var{D} is a diagonal matrix of powers of two.  This allows the\n\
 equilibration to be computed without round-off.  Results of eigenvalue\n\
 calculation are typically improved by balancing first.\n\
 \n\
 If two output values are requested, @code{balance} returns\n\
diff --git a/libinterp/corefcn/besselj.cc b/libinterp/corefcn/besselj.cc
--- a/libinterp/corefcn/besselj.cc
+++ b/libinterp/corefcn/besselj.cc
@@ -544,18 +544,17 @@ See besselj.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUN (airy, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{a}, @var{ierr}] =} airy (@var{k}, @var{z}, @var{opt})\n\
-Compute Airy functions of the first and second kind, and their\n\
-derivatives.\n\
+Compute Airy functions of the first and second kind, and their derivatives.\n\
 \n\
 @example\n\
 @group\n\
  K   Function   Scale factor (if \"opt\" is supplied)\n\
 ---  --------   ---------------------------------------\n\
  0   Ai (Z)     exp ((2/3) * Z * sqrt (Z))\n\
  1   dAi(Z)/dZ  exp ((2/3) * Z * sqrt (Z))\n\
  2   Bi (Z)     exp (-abs (real ((2/3) * Z * sqrt (Z))))\n\
diff --git a/libinterp/corefcn/betainc.cc b/libinterp/corefcn/betainc.cc
--- a/libinterp/corefcn/betainc.cc
+++ b/libinterp/corefcn/betainc.cc
@@ -31,17 +31,19 @@ along with Octave; see the file COPYING.
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 
 DEFUN (betainc, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} betainc (@var{x}, @var{a}, @var{b})\n\
-Return the regularized incomplete Beta function,\n\
+Compute the regularized incomplete Beta function.\n\
+\n\
+The regularized incomplete Beta function is defined by\n\
 @tex\n\
 $$\n\
  I (x, a, b) = {1 \\over {B (a, b)}} \\int_0^x t^{(a-z)} (1-t)^{(b-1)} dt.\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 @c Set example in small font to prevent overfull line\n\
 \n\
@@ -325,20 +327,22 @@ compatible dimensions.\n\
 %!error betainc (1)
 %!error betainc (1,2)
 %!error betainc (1,2,3,4)
 */
 
 DEFUN (betaincinv, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} betaincinv (@var{y}, @var{a}, @var{b})\n\
-Compute the inverse of the incomplete Beta function, i.e., @var{x} such that\n\
+Compute the inverse of the incomplete Beta function.\n\
+\n\
+The inverse is the value @var{x} such that\n\
 \n\
 @example\n\
-@var{y} == betainc (@var{x}, @var{a}, @var{b}) \n\
+@var{y} == betainc (@var{x}, @var{a}, @var{b})\n\
 @end example\n\
 @seealso{betainc, beta, betaln}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
diff --git a/libinterp/corefcn/bitfcns.cc b/libinterp/corefcn/bitfcns.cc
--- a/libinterp/corefcn/bitfcns.cc
+++ b/libinterp/corefcn/bitfcns.cc
@@ -362,38 +362,41 @@ bitop (const std::string& fname, const o
 
   return retval;
 }
 
 DEFUN (bitand, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitand (@var{x}, @var{y})\n\
 Return the bitwise AND of non-negative integers.\n\
+\n\
 @var{x}, @var{y} must be in the range [0,bitmax]\n\
 @seealso{bitor, bitxor, bitset, bitget, bitcmp, bitshift, bitmax}\n\
 @end deftypefn")
 {
   return bitop ("bitand", args);
 }
 
 DEFUN (bitor, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitor (@var{x}, @var{y})\n\
 Return the bitwise OR of non-negative integers.\n\
+\n\
 @var{x}, @var{y} must be in the range [0,bitmax]\n\
 @seealso{bitor, bitxor, bitset, bitget, bitcmp, bitshift, bitmax}\n\
 @end deftypefn")
 {
   return bitop ("bitor", args);
 }
 
 DEFUN (bitxor, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bitxor (@var{x}, @var{y})\n\
 Return the bitwise XOR of non-negative integers.\n\
+\n\
 @var{x}, @var{y} must be in the range [0,bitmax]\n\
 @seealso{bitand, bitor, bitset, bitget, bitcmp, bitshift, bitmax}\n\
 @end deftypefn")
 {
   return bitop ("bitxor", args);
 }
 
 /*
@@ -534,20 +537,21 @@ bitshift (float a, int n, int64_t mask)
       DO_BITSHIFT (T); \
     } \
   while (0)
 
 DEFUN (bitshift, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} bitshift (@var{a}, @var{k})\n\
 @deftypefnx {Built-in Function} {} bitshift (@var{a}, @var{k}, @var{n})\n\
-Return a @var{k} bit shift of @var{n}-digit unsigned\n\
-integers in @var{a}.  A positive @var{k} leads to a left shift;\n\
-A negative value to a right shift.  If @var{n} is omitted it defaults\n\
-to log2(bitmax)+1.\n\
+Return a @var{k} bit shift of @var{n}-digit unsigned integers in @var{a}.\n\
+\n\
+A positive @var{k} leads to a left shift; A negative value to a right shift.\n\
+\n\
+If @var{n} is omitted it defaults to log2(bitmax)+1.\n\
 @var{n} must be in the range [1,log2(bitmax)+1] usually [1,33].\n\
 \n\
 @example\n\
 @group\n\
 bitshift (eye (3), 1)\n\
 @result{}\n\
 @group\n\
 2 0 0\n\
@@ -675,17 +679,19 @@ bitshift (10, [-2, -1, 0, 1, 2])\n\
 */
 
 DEFUN (bitmax, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} bitmax ()\n\
 @deftypefnx {Built-in Function} {} bitmax (\"double\")\n\
 @deftypefnx {Built-in Function} {} bitmax (\"single\")\n\
 Return the largest integer that can be represented within a floating point\n\
-value.  The default class is @qcode{\"double\"}, but @qcode{\"single\"} is a\n\
+value.\n\
+\n\
+The default class is @qcode{\"double\"}, but @qcode{\"single\"} is a\n\
 valid option.  On IEEE-754 compatible systems, @code{bitmax} is\n\
 @w{@math{2^{53} - 1}} for @qcode{\"double\"} and @w{@math{2^{24} -1}} for\n\
 @qcode{\"single\"}.\n\
 @seealso{flintmax, intmax, realmax, realmin}\n\
 @end deftypefn")
 {
   octave_value retval;
   std::string cname = "double";
@@ -710,20 +716,21 @@ valid option.  On IEEE-754 compatible sy
 }
 
 DEFUN (flintmax, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} flintmax ()\n\
 @deftypefnx {Built-in Function} {} flintmax (\"double\")\n\
 @deftypefnx {Built-in Function} {} flintmax (\"single\")\n\
 Return the largest integer that can be represented consecutively in a\n\
-floating point value.  The default class is @qcode{\"double\"}, but\n\
-@qcode{\"single\"} is a valid option.  On IEEE-754 compatible systems,\n\
-@code{flintmax} is @w{@math{2^53}} for @qcode{\"double\"} and\n\
-@w{@math{2^24}} for @qcode{\"single\"}.\n\
+floating point value.\n\
+\n\
+The default class is @qcode{\"double\"}, but @qcode{\"single\"} is a valid\n\
+option.  On IEEE-754 compatible systems, @code{flintmax} is @w{@math{2^53}}\n\
+for @qcode{\"double\"} and @w{@math{2^24}} for @qcode{\"single\"}.\n\
 @seealso{bitmax, intmax, realmax, realmin}\n\
 @end deftypefn")
 {
   octave_value retval;
   std::string cname = "double";
   int nargin = args.length ();
 
   if (nargin == 1 && args(0).is_string ())
@@ -743,16 +750,17 @@ floating point value.  The default class
 
   return retval;
 }
 
 DEFUN (intmax, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} intmax (@var{type})\n\
 Return the largest integer that can be represented in an integer type.\n\
+\n\
 The variable @var{type} can be\n\
 \n\
 @table @code\n\
 @item int8\n\
 signed 8-bit integer.\n\
 \n\
 @item int16\n\
 signed 16-bit integer.\n\
@@ -813,16 +821,17 @@ The default for @var{type} is @code{int3
 
   return retval;
 }
 
 DEFUN (intmin, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} intmin (@var{type})\n\
 Return the smallest integer that can be represented in an integer type.\n\
+\n\
 The variable @var{type} can be\n\
 \n\
 @table @code\n\
 @item int8\n\
 signed 8-bit integer.\n\
 \n\
 @item int16\n\
 signed 16-bit integer.\n\
@@ -883,16 +892,17 @@ The default for @var{type} is @code{int3
 
   return retval;
 }
 
 DEFUN (sizemax, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} sizemax ()\n\
 Return the largest value allowed for the size of an array.\n\
+\n\
 If Octave is compiled with 64-bit indexing, the result is of class int64,\n\
 otherwise it is of class int32.  The maximum array size is slightly\n\
 smaller than the maximum value allowable for the relevant class as reported\n\
 by @code{intmax}.\n\
 @seealso{intmax}\n\
 @end deftypefn")
 {
   octave_value retval;
diff --git a/libinterp/corefcn/bsxfun.cc b/libinterp/corefcn/bsxfun.cc
--- a/libinterp/corefcn/bsxfun.cc
+++ b/libinterp/corefcn/bsxfun.cc
@@ -312,24 +312,25 @@ update_index (Array<int>& idx, const dim
       idx (j) = i % dv (j);
       i = i / dv (j);
     }
 }
 
 DEFUN (bsxfun, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} bsxfun (@var{f}, @var{A}, @var{B})\n\
-The binary singleton expansion function applier performs broadcasting,\n\
-that is, applies a binary function @var{f} element-by-element to two\n\
+The binary singleton expansion function performs broadcasting,\n\
+that is, it applies a binary function @var{f} element-by-element to two\n\
 array arguments @var{A} and @var{B}, and expands as necessary\n\
-singleton dimensions in either input argument.  @var{f} is a function\n\
-handle, inline function, or string containing the name of the function\n\
-to evaluate.  The function @var{f} must be capable of accepting two\n\
-column-vector arguments of equal length, or one column vector argument\n\
-and a scalar.\n\
+singleton dimensions in either input argument.\n\
+\n\
+@var{f} is a function handle, inline function, or string containing the name\n\
+of the function to evaluate.  The function @var{f} must be capable of\n\
+accepting two column-vector arguments of equal length, or one column vector\n\
+argument and a scalar.\n\
 \n\
 The dimensions of @var{A} and @var{B} must be equal or singleton.  The\n\
 singleton dimensions of the arrays will be expanded to the same\n\
 dimensionality as the other array.\n\
 @seealso{arrayfun, cellfun}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -278,18 +278,20 @@ DEFUN (cellfun, args, nargout,
 @deftypefnx {Built-in Function} {} cellfun (\"isclass\", @var{C}, @var{class})\n\
 @deftypefnx {Built-in Function} {} cellfun (@var{func}, @var{C})\n\
 @deftypefnx {Built-in Function} {} cellfun (@var{func}, @var{C}, @var{D})\n\
 @deftypefnx {Built-in Function} {[@var{a}, @dots{}] =} cellfun (@dots{})\n\
 @deftypefnx {Built-in Function} {} cellfun (@dots{}, \"ErrorHandler\", @var{errfunc})\n\
 @deftypefnx {Built-in Function} {} cellfun (@dots{}, \"UniformOutput\", @var{val})\n\
 \n\
 Evaluate the function named @var{name} on the elements of the cell array\n\
-@var{C}.  Elements in @var{C} are passed on to the named function\n\
-individually.  The function @var{name} can be one of the functions\n\
+@var{C}.\n\
+\n\
+Elements in @var{C} are passed on to the named function individually.  The\n\
+function @var{name} can be one of the functions\n\
 \n\
 @table @code\n\
 @item isempty\n\
 Return 1 for empty elements.\n\
 \n\
 @item islogical\n\
 Return 1 for logical elements.\n\
 \n\
@@ -315,17 +317,17 @@ Return the size along the @var{k}-th dim
 \n\
 @item isclass\n\
 Return 1 for elements of @var{class}.\n\
 @end table\n\
 \n\
 Additionally, @code{cellfun} accepts an arbitrary function @var{func}\n\
 in the form of an inline function, function handle, or the name of a\n\
 function (in a character string).  The function can take one or more\n\
-arguments, with the inputs arguments given by @var{C}, @var{D}, etc.  \n\
+arguments, with the inputs arguments given by @var{C}, @var{D}, etc.\n\
 Equally the function can return one or more output arguments.  For example:\n\
 \n\
 @example\n\
 @group\n\
 cellfun (\"atan2\", @{1, 0@}, @{0, 1@})\n\
      @result{} [ 1.57080   0.00000 ]\n\
 @end group\n\
 @end example\n\
@@ -1061,19 +1063,21 @@ DEFUN (arrayfun, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Function File} {} arrayfun (@var{func}, @var{A})\n\
 @deftypefnx {Function File} {@var{x} =} arrayfun (@var{func}, @var{A})\n\
 @deftypefnx {Function File} {@var{x} =} arrayfun (@var{func}, @var{A}, @var{b}, @dots{})\n\
 @deftypefnx {Function File} {[@var{x}, @var{y}, @dots{}] =} arrayfun (@var{func}, @var{A}, @dots{})\n\
 @deftypefnx {Function File} {} arrayfun (@dots{}, \"UniformOutput\", @var{val})\n\
 @deftypefnx {Function File} {} arrayfun (@dots{}, \"ErrorHandler\", @var{errfunc})\n\
 \n\
-Execute a function on each element of an array.  This is useful for\n\
-functions that do not accept array arguments.  If the function does\n\
-accept array arguments it is better to call the function directly.\n\
+Execute a function on each element of an array.\n\
+\n\
+This is useful for functions that do not accept array arguments.  If the\n\
+function does accept array arguments it is better to call the function\n\
+directly.\n\
 \n\
 The first input argument @var{func} can be a string, a function\n\
 handle, an inline function, or an anonymous function.  The input\n\
 argument @var{A} can be a logic array, a numeric array, a string\n\
 array, a structure array, or a cell array.  By a call of the function\n\
 @command{arrayfun} all elements of @var{A} are passed on to the named\n\
 function @var{func} individually.\n\
 \n\
@@ -1858,19 +1862,21 @@ do_object2cell (const octave_value& obj,
 
   return retval;
 }
 
 DEFUN (num2cell, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{C} =} num2cell (@var{A})\n\
 @deftypefnx {Built-in Function} {@var{C} =} num2cell (@var{A}, @var{dim})\n\
-Convert the numeric matrix @var{A} to a cell array.  If @var{dim} is\n\
-defined, the value @var{C} is of dimension 1 in this dimension and the\n\
-elements of @var{A} are placed into @var{C} in slices.  For example:\n\
+Convert the numeric matrix @var{A} to a cell array.\n\
+\n\
+If @var{dim} is defined, the value @var{C} is of dimension 1 in this\n\
+dimension and the elements of @var{A} are placed into @var{C} in slices.\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 num2cell ([1,2;3,4])\n\
    @result{}\n\
       @{\n\
         [1,1] =  1\n\
         [2,1] =  3\n\
@@ -2189,22 +2195,24 @@ do_mat2cell (octave_value& a, const Arra
   return retval;
 }
 
 DEFUN (mat2cell, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{C} =} mat2cell (@var{A}, @var{m}, @var{n})\n\
 @deftypefnx {Built-in Function} {@var{C} =} mat2cell (@var{A}, @var{d1}, @var{d2}, @dots{})\n\
 @deftypefnx {Built-in Function} {@var{C} =} mat2cell (@var{A}, @var{r})\n\
-Convert the matrix @var{A} to a cell array.  If @var{A} is 2-D, then\n\
-it is required that @code{sum (@var{m}) == size (@var{A}, 1)} and\n\
+Convert the matrix @var{A} to a cell array.\n\
+\n\
+If @var{A} is 2-D, then it is required that\n\
+@code{sum (@var{m}) == size (@var{A}, 1)} and\n\
 @code{sum (@var{n}) == size (@var{A}, 2)}.  Similarly, if @var{A} is\n\
-multi-dimensional and the number of dimensional arguments is equal\n\
-to the dimensions of @var{A}, then it is required that @code{sum (@var{di})\n\
-== size (@var{A}, i)}.\n\
+multi-dimensional and the number of dimensional arguments is equal to the\n\
+dimensions of @var{A}, then it is required that\n\
+@code{sum (@var{di}) == size (@var{A}, i)}.\n\
 \n\
 Given a single dimensional argument @var{r}, the other dimensional\n\
 arguments are assumed to equal @code{size (@var{A},@var{i})}.\n\
 \n\
 An example of the use of mat2cell is\n\
 \n\
 @example\n\
 mat2cell (reshape (1:16,4,4), [3,1], [3,1])\n\
@@ -2360,18 +2368,19 @@ do_cellslices_nda (const NDA& array,
   return retval;
 }
 
 DEFUN (cellslices, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{sl} =} cellslices (@var{x}, @var{lb}, @var{ub}, @var{dim})\n\
 Given an array @var{x}, this function produces a cell array of slices from\n\
 the array determined by the index vectors @var{lb}, @var{ub}, for lower and\n\
-upper bounds, respectively.  In other words, it is equivalent to the\n\
-following code:\n\
+upper bounds, respectively.\n\
+\n\
+In other words, it is equivalent to the following code:\n\
 \n\
 @example\n\
 @group\n\
 n = length (lb);\n\
 sl = cell (1, n);\n\
 for i = 1:length (lb)\n\
   sl@{i@} = x(:,@dots{},lb(i):ub(i),@dots{},:);\n\
 endfor\n\
@@ -2493,16 +2502,18 @@ slicing is done along the first non-sing
 %! m = [1, 2, 3, 4; 5, 6, 7, 8; 9, 10, 11, 12];
 %! c = cellslices (m, [1, 2], [2, 3], 2);
 %! assert (c, {[1, 2; 5, 6; 9, 10], [2, 3; 6, 7; 10, 11]});
 */
 
 DEFUN (cellindexmat, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{y} =} cellindexmat (@var{x}, @var{varargin})\n\
+Perform indexing of matrices in a cell array.\n\
+\n\
 Given a cell array of matrices @var{x}, this function computes\n\
 \n\
 @example\n\
 @group\n\
 Y = cell (size (X));\n\
 for i = 1:numel (X)\n\
   Y@{i@} = X@{i@}(varargin@{:@});\n\
 endfor\n\
diff --git a/libinterp/corefcn/colloc.cc b/libinterp/corefcn/colloc.cc
--- a/libinterp/corefcn/colloc.cc
+++ b/libinterp/corefcn/colloc.cc
@@ -32,20 +32,20 @@ along with Octave; see the file COPYING.
 #include "defun.h"
 #include "error.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 DEFUN (colloc, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{r}, @var{amat}, @var{bmat}, @var{q}] =} colloc (@var{n}, \"left\", \"right\")\n\
-Compute derivative and integral weight matrices for orthogonal\n\
-collocation using the subroutines given in @nospell{J. Villadsen} and\n\
-@nospell{M. L. Michelsen}, @cite{Solution of Differential Equation Models by\n\
-Polynomial Approximation}.\n\
+Compute derivative and integral weight matrices for orthogonal collocation.\n\
+\n\
+Reference: @nospell{J. Villadsen}, @nospell{M. L. Michelsen},\n\
+@cite{Solution of Differential Equation Models by Polynomial Approximation}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 3)
     {
diff --git a/libinterp/corefcn/conv2.cc b/libinterp/corefcn/conv2.cc
--- a/libinterp/corefcn/conv2.cc
+++ b/libinterp/corefcn/conv2.cc
@@ -34,19 +34,20 @@ along with Octave; see the file COPYING.
 
 enum Shape { SHAPE_FULL, SHAPE_SAME, SHAPE_VALID };
 
 DEFUN (conv2, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} conv2 (@var{A}, @var{B})\n\
 @deftypefnx {Built-in Function} {} conv2 (@var{v1}, @var{v2}, @var{m})\n\
 @deftypefnx {Built-in Function} {} conv2 (@dots{}, @var{shape})\n\
-Return the 2-D convolution of @var{A} and @var{B}.  The size of the result\n\
-is determined by the optional @var{shape} argument which takes the following\n\
-values\n\
+Return the 2-D convolution of @var{A} and @var{B}.\n\
+\n\
+The size of the result is determined by the optional @var{shape} argument\n\
+which takes the following values\n\
 \n\
 @table @asis\n\
 @item @var{shape} = @qcode{\"full\"}\n\
 Return the full convolution.  (default)\n\
 \n\
 @item @var{shape} = @qcode{\"same\"}\n\
 Return the central part of the convolution with the same size as @var{A}.\n\
 The central part of the convolution begins at the indices\n\
@@ -289,19 +290,20 @@ When the third argument is a matrix, ret
 %!error conv2 (ones (2), 1, 1)
 %!error conv2 (1, ones (2), 1)
 */
 
 DEFUN (convn, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{C} =} convn (@var{A}, @var{B})\n\
 @deftypefnx {Built-in Function} {@var{C} =} convn (@var{A}, @var{B}, @var{shape})\n\
-Return the n-D convolution of @var{A} and @var{B}.  The size of the result\n\
-is determined by the optional @var{shape} argument which takes the following\n\
-values\n\
+Return the n-D convolution of @var{A} and @var{B}.\n\
+\n\
+The size of the result is determined by the optional @var{shape} argument\n\
+which takes the following values\n\
 \n\
 @table @asis\n\
 @item @var{shape} = @qcode{\"full\"}\n\
 Return the full convolution.  (default)\n\
 \n\
 @item @var{shape} = @qcode{\"same\"}\n\
 Return central part of the convolution with the same size as @var{A}.\n\
 The central part of the convolution begins at the indices\n\
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -209,18 +209,19 @@ any (eye (2, 4), 2)\n\
 */
 
 // These mapping functions may also be useful in other places, eh?
 
 DEFUN (atan2, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} atan2 (@var{y}, @var{x})\n\
 Compute atan (@var{y} / @var{x}) for corresponding elements of @var{y}\n\
-and @var{x}.  Signal an error if @var{y} and @var{x} do not match in size\n\
-and orientation.\n\
+and @var{x}.\n\
+\n\
+@var{y} and @var{x} must match in size and orientation.\n\
 @seealso{tan, tand, tanh, atanh}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 2)
@@ -379,19 +380,22 @@ do_hypot (const octave_value& x, const o
   return retval;
 }
 
 DEFUN (hypot, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} hypot (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {} hypot (@var{x}, @var{y}, @var{z}, @dots{})\n\
 Compute the element-by-element square root of the sum of the squares of\n\
-@var{x} and @var{y}.  This is equivalent to\n\
-@code{sqrt (@var{x}.^2 + @var{y}.^2)}, but calculated in a manner that\n\
+@var{x} and @var{y}.\n\
+\n\
+This is equivalent to\n\
+@code{sqrt (@var{x}.^2 + @var{y}.^2)}, but is calculated in a manner that\n\
 avoids overflows for large values of @var{x} or @var{y}.\n\
+\n\
 @code{hypot} can also be called with more than 2 arguments; in this case,\n\
 the arguments are accumulated from left to right:\n\
 \n\
 @example\n\
 @group\n\
 hypot (hypot (@var{x}, @var{y}), @var{z})\n\
 hypot (hypot (hypot (@var{x}, @var{y}), @var{z}), @var{w}), etc.\n\
 @end group\n\
@@ -572,25 +576,26 @@ and @var{e} is an integer.  If\n\
 
 # bug #42583
 %!assert (all (log2 (pow2 (-1074:1023)) == -1074:1023))
 */
 
 DEFUN (rem, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} rem (@var{x}, @var{y})\n\
-Return the remainder of the division @code{@var{x} / @var{y}}, computed\n\
-using the expression\n\
+Return the remainder of the division @code{@var{x} / @var{y}}.\n\
+\n\
+The remainder is computed using the expression\n\
 \n\
 @example\n\
 x - y .* fix (x ./ y)\n\
 @end example\n\
 \n\
-An error message is printed if the dimensions of the arguments do not\n\
-agree, or if either of the arguments is complex.\n\
+An error message is printed if the dimensions of the arguments do not agree,\n\
+or if either of the arguments is complex.\n\
 @seealso{mod}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 2)
@@ -724,26 +729,28 @@ agree, or if either of the arguments is 
 
 # bug 42627
 %!assert (rem (0.94, 0.01), 0.0);
 */
 
 DEFUN (mod, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} mod (@var{x}, @var{y})\n\
-Compute the modulo of @var{x} and @var{y}.  Conceptually this is given by\n\
+Compute the modulo of @var{x} and @var{y}.\n\
+\n\
+Conceptually this is given by\n\
 \n\
 @example\n\
 x - y .* floor (x ./ y)\n\
 @end example\n\
 \n\
 @noindent\n\
-and is written such that the correct modulus is returned for\n\
-integer types.  This function handles negative values correctly.  That\n\
-is, @code{mod (-1, 3)} is 2, not -1, as @code{rem (-1, 3)} returns.\n\
+and is written such that the correct modulus is returned for integer types.\n\
+This function handles negative values correctly.  That is,\n\
+@code{mod (-1, 3)} is 2, not -1, as @code{rem (-1, 3)} returns.\n\
 @code{mod (@var{x}, 0)} returns @var{x}.\n\
 \n\
 An error results if the dimensions of the arguments do not agree, or if\n\
 either of the arguments is complex.\n\
 @seealso{rem}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -1135,19 +1142,19 @@ either of the arguments is complex.\n\
     print_usage (); \
  \
   return retval
 
 DEFUN (cumprod, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} cumprod (@var{x})\n\
 @deftypefnx {Built-in Function} {} cumprod (@var{x}, @var{dim})\n\
-Cumulative product of elements along dimension @var{dim}.  If\n\
-@var{dim} is omitted, it defaults to the first non-singleton dimension.\n\
-\n\
+Cumulative product of elements along dimension @var{dim}.\n\
+\n\
+If @var{dim} is omitted, it defaults to the first non-singleton dimension.\n\
 @seealso{prod, cumsum}\n\
 @end deftypefn")
 {
   DATA_REDUCTION (cumprod);
 }
 
 /*
 %!assert (cumprod ([1, 2, 3]), [1, 2, 6])
@@ -1171,18 +1178,19 @@ Cumulative product of elements along dim
 
 DEFUN (cumsum, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} cumsum (@var{x})\n\
 @deftypefnx {Built-in Function} {} cumsum (@var{x}, @var{dim})\n\
 @deftypefnx {Built-in Function} {} cumsum (@dots{}, \"native\")\n\
 @deftypefnx {Built-in Function} {} cumsum (@dots{}, \"double\")\n\
 @deftypefnx {Built-in Function} {} cumsum (@dots{}, \"extra\")\n\
-Cumulative sum of elements along dimension @var{dim}.  If @var{dim}\n\
-is omitted, it defaults to the first non-singleton dimension.\n\
+Cumulative sum of elements along dimension @var{dim}.\n\
+\n\
+If @var{dim} is omitted, it defaults to the first non-singleton dimension.\n\
 \n\
 See @code{sum} for an explanation of the optional parameters\n\
 @qcode{\"native\"}, @qcode{\"double\"}, and @qcode{\"extra\"}.\n\
 @seealso{sum, cumprod}\n\
 @end deftypefn")
 {
   octave_value retval;
 
@@ -1317,21 +1325,22 @@ See @code{sum} for an explanation of the
 
 DEFUN (diag, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{M} =} diag (@var{v})\n\
 @deftypefnx {Built-in Function} {@var{M} =} diag (@var{v}, @var{k})\n\
 @deftypefnx {Built-in Function} {@var{M} =} diag (@var{v}, @var{m}, @var{n})\n\
 @deftypefnx {Built-in Function} {@var{v} =} diag (@var{M})\n\
 @deftypefnx {Built-in Function} {@var{v} =} diag (@var{M}, @var{k})\n\
-Return a diagonal matrix with vector @var{v} on diagonal @var{k}.  The\n\
-second argument is optional.  If it is positive, the vector is placed on\n\
+Return a diagonal matrix with vector @var{v} on diagonal @var{k}.\n\
+\n\
+The second argument is optional.  If it is positive, the vector is placed on\n\
 the @var{k}-th superdiagonal.  If it is negative, it is placed on the\n\
-@var{-k}-th subdiagonal.  The default value of @var{k} is 0, and the\n\
-vector is placed on the main diagonal.  For example:\n\
+@var{-k}-th subdiagonal.  The default value of @var{k} is 0, and the vector\n\
+is placed on the main diagonal.  For example:\n\
 \n\
 @example\n\
 @group\n\
 diag ([1, 2, 3], 1)\n\
    @result{}  0  1  0  0\n\
        0  0  2  0\n\
        0  0  0  3\n\
        0  0  0  0\n\
@@ -2590,20 +2599,21 @@ do_permute (const octave_value_list& arg
 
   return retval;
 }
 
 DEFUN (permute, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} permute (@var{A}, @var{perm})\n\
 Return the generalized transpose for an N-D array object @var{A}.\n\
+\n\
 The permutation vector @var{perm} must contain the elements\n\
 @code{1:ndims (A)} (in any order, but each element must appear only once).\n\
 \n\
-The @var{N}th dimension of @var{A} gets remapped to dimension \n\
+The @var{N}th dimension of @var{A} gets remapped to dimension\n\
 @code{@var{PERM}(@var{N})}.  For example:\n\
 \n\
 @example\n\
 @group\n\
 @var{x} = zeros ([2, 3, 5, 7]);\n\
 size (@var{x})\n\
    @result{}  2   3   5   7\n\
 \n\
@@ -2622,17 +2632,19 @@ size (permute (@var{x}, [1, 2, 3, 4]))\n
 @end deftypefn")
 {
   return do_permute (args, false);
 }
 
 DEFUN (ipermute, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ipermute (@var{A}, @var{iperm})\n\
-The inverse of the @code{permute} function.  The expression\n\
+The inverse of the @code{permute} function.\n\
+\n\
+The expression\n\
 \n\
 @example\n\
 ipermute (permute (A, perm), perm)\n\
 @end example\n\
 \n\
 @noindent\n\
 returns the original array @var{A}.\n\
 @seealso{permute}\n\
@@ -2662,17 +2674,18 @@ with @sc{matlab}).\n\
 
   return retval;
 }
 
 DEFUN (ndims, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ndims (@var{a})\n\
 Return the number of dimensions of @var{a}.\n\
-For any array, the result will always be larger than or equal to 2.\n\
+\n\
+For any array, the result will always be greater than or equal to 2.\n\
 Trailing singleton dimensions are not counted.\n\
 \n\
 @example\n\
 @group\n\
 ndims (ones (4, 1, 2, 1))\n\
     @result{} 3\n\
 @end group\n\
 @end example\n\
@@ -2689,16 +2702,17 @@ ndims (ones (4, 1, 2, 1))\n\
   return retval;
 }
 
 DEFUN (numel, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} numel (@var{a})\n\
 @deftypefnx {Built-in Function} {} numel (@var{a}, @var{idx1}, @var{idx2}, @dots{})\n\
 Return the number of elements in the object @var{a}.\n\
+\n\
 Optionally, if indices @var{idx1}, @var{idx2}, @dots{} are supplied,\n\
 return the number of elements that would result from the indexing\n\
 \n\
 @example\n\
 @var{a}(@var{idx1}, @var{idx2}, @dots{})\n\
 @end example\n\
 \n\
 Note that the indices do not have to be numerical.  For example,\n\
@@ -2826,18 +2840,19 @@ returns the number of columns in the giv
 
   return retval;
 }
 
 DEFUN (size_equal, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} size_equal (@var{a}, @var{b}, @dots{})\n\
 Return true if the dimensions of all arguments agree.\n\
+\n\
 Trailing singleton dimensions are ignored.\n\
-Called with a single or no argument, size_equal returns true.\n\
+When called with a single or no argument @code{size_equal} returns true.\n\
 @seealso{size, numel, ndims}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   retval = true;
@@ -3162,18 +3177,19 @@ inputs, @qcode{\"extra\"} is the same as
 %!error sum (1,2,3)
 %!error <unrecognized type argument 'foobar'> sum (1, "foobar")
 */
 
 DEFUN (sumsq, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} sumsq (@var{x})\n\
 @deftypefnx {Built-in Function} {} sumsq (@var{x}, @var{dim})\n\
-Sum of squares of elements along dimension @var{dim}.  If @var{dim}\n\
-is omitted, it defaults to the first non-singleton dimension.\n\
+Sum of squares of elements along dimension @var{dim}.\n\
+\n\
+If @var{dim} is omitted, it defaults to the first non-singleton dimension.\n\
 \n\
 This function is conceptually equivalent to computing\n\
 \n\
 @example\n\
 sum (x .* conj (x), dim)\n\
 @end example\n\
 \n\
 @noindent\n\
@@ -3235,16 +3251,17 @@ DEFALIAS (isbool, islogical);
 %!assert (islogical (sparse ([true, false])), true)
 %!assert (islogical (sparse ([1, 0])), false)
 */
 
 DEFUN (isinteger, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isinteger (@var{x})\n\
 Return true if @var{x} is an integer object (int8, uint8, int16, etc.).\n\
+\n\
 Note that @w{@code{isinteger (14)}} is false because numeric constants in\n\
 Octave are double precision floating point values.\n\
 @seealso{isfloat, ischar, islogical, isnumeric, isa}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
@@ -3271,16 +3288,17 @@ Return true if @var{x} is a complex-valu
 
   return retval;
 }
 
 DEFUN (isfloat, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isfloat (@var{x})\n\
 Return true if @var{x} is a floating-point numeric object.\n\
+\n\
 Objects of class double or single are floating-point objects.\n\
 @seealso{isinteger, ischar, islogical, isnumeric, isa}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).is_float_type ();
@@ -3292,20 +3310,23 @@ Objects of class double or single are fl
 
 // FIXME: perhaps this should be implemented with an
 // octave_value member function?
 
 DEFUN (complex, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} complex (@var{x})\n\
 @deftypefnx {Built-in Function} {} complex (@var{re}, @var{im})\n\
-Return a complex result from real arguments.  With 1 real argument @var{x},\n\
-return the complex result @code{@var{x} + 0i}.  With 2 real arguments,\n\
-return the complex result @code{@var{re} + @var{im}}.  @code{complex} can\n\
-often be more convenient than expressions such as @code{a + i*b}.\n\
+Return a complex value from real arguments.\n\
+\n\
+With 1 real argument @var{x}, return the complex result @code{@var{x} + 0i}.\n\
+\n\
+With 2 real arguments, return the complex result @code{@var{re} + @var{im}}.\n\
+@code{complex} can often be more convenient than expressions such as\n\
+@code{a + i*b}.\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 complex ([1, 2], [3, 4])\n\
   @result{} [ 1 + 3i   2 + 4i ]\n\
 @end group\n\
 @end example\n\
@@ -3593,16 +3614,17 @@ complex ([1, 2], [3, 4])\n\
 
   return retval;
 }
 
 DEFUN (isreal, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isreal (@var{x})\n\
 Return true if @var{x} is a non-complex matrix or scalar.\n\
+\n\
 For compatibility with @sc{matlab}, this includes logical and character\n\
 matrices.\n\
 @seealso{iscomplex, isnumeric, isa}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
@@ -3612,17 +3634,17 @@ matrices.\n\
 
   return retval;
 }
 
 DEFUN (isempty, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isempty (@var{a})\n\
 Return true if @var{a} is an empty matrix (any one of its dimensions is\n\
-zero).  Otherwise, return false.\n\
+zero).\n\
 @seealso{isnull, isa}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
   if (args.length () == 1)
     retval = args(0).is_empty ();
   else
@@ -3635,18 +3657,19 @@ zero).  Otherwise, return false.\n\
 %% Debian bug #706376
 %!assert (isempty (speye(2^16)), false)
 */
 
 DEFUN (isnumeric, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isnumeric (@var{x})\n\
 Return true if @var{x} is a numeric object, i.e., an integer, real, or\n\
-complex array.  Logical and character arrays are not considered to be\n\
-numeric.\n\
+complex array.\n\
+\n\
+Logical and character arrays are not considered to be numeric.\n\
 @seealso{isinteger, isfloat, isreal, iscomplex, islogical, ischar, iscell, isstruct, isa}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).is_numeric_type ();
   else
@@ -4361,23 +4384,25 @@ fill_matrix (const octave_value_list& ar
 DEFUN (ones, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} ones (@var{n})\n\
 @deftypefnx {Built-in Function} {} ones (@var{m}, @var{n})\n\
 @deftypefnx {Built-in Function} {} ones (@var{m}, @var{n}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} ones ([@var{m} @var{n} @dots{}])\n\
 @deftypefnx {Built-in Function} {} ones (@dots{}, @var{class})\n\
 Return a matrix or N-dimensional array whose elements are all 1.\n\
+\n\
 If invoked with a single scalar integer argument @var{n}, return a square\n\
-@nospell{NxN} matrix.  If invoked with two or more scalar\n\
-integer arguments, or a vector of integer values, return an array with\n\
-the given dimensions.\n\
-\n\
-If you need to create a matrix whose values are all the same, you should\n\
-use an expression like\n\
+@nospell{NxN} matrix.\n\
+\n\
+If invoked with two or more scalar integer arguments, or a vector of integer\n\
+values, return an array with the given dimensions.\n\
+\n\
+To create a constant matrix whose values are all the same use an expression\n\
+such as\n\
 \n\
 @example\n\
 val_matrix = val * ones (m, n)\n\
 @end example\n\
 \n\
 The optional argument @var{class} specifies the class of the return array\n\
 and defaults to double.  For example:\n\
 \n\
@@ -4410,20 +4435,22 @@ val = ones (m,n, \"uint8\")\n\
 DEFUN (zeros, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} zeros (@var{n})\n\
 @deftypefnx {Built-in Function} {} zeros (@var{m}, @var{n})\n\
 @deftypefnx {Built-in Function} {} zeros (@var{m}, @var{n}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} zeros ([@var{m} @var{n} @dots{}])\n\
 @deftypefnx {Built-in Function} {} zeros (@dots{}, @var{class})\n\
 Return a matrix or N-dimensional array whose elements are all 0.\n\
+\n\
 If invoked with a single scalar integer argument, return a square\n\
-@nospell{NxN} matrix.  If invoked with two or more scalar\n\
-integer arguments, or a vector of integer values, return an array with\n\
-the given dimensions.\n\
+@nospell{NxN} matrix.\n\
+\n\
+If invoked with two or more scalar integer arguments, or a vector of integer\n\
+values, return an array with the given dimensions.\n\
 \n\
 The optional argument @var{class} specifies the class of the return array\n\
 and defaults to double.  For example:\n\
 \n\
 @example\n\
 val = zeros (m,n, \"uint8\")\n\
 @end example\n\
 @seealso{ones}\n\
@@ -4469,20 +4496,24 @@ produce infinity are division by zero an
 @example\n\
 @group\n\
 [ 1/0 e^800 ]\n\
 @result{} Inf   Inf\n\
 @end group\n\
 @end example\n\
 \n\
 When called with no arguments, return a scalar with the value @samp{Inf}.\n\
+\n\
 When called with a single argument, return a square matrix with the dimension\n\
-specified.  When called with more than one scalar argument the first two\n\
-arguments are taken as the number of rows and columns and any further\n\
-arguments specify additional matrix dimensions.\n\
+specified.\n\
+\n\
+When called with more than one scalar argument the first two arguments are\n\
+taken as the number of rows and columns and any further arguments specify\n\
+additional matrix dimensions.\n\
+\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{isinf, NaN}\n\
 @end deftypefn")
 {
   return fill_matrix (args, lo_ieee_inf_value (),
                       lo_ieee_float_inf_value (), "Inf");
 }
@@ -4513,35 +4544,41 @@ DEFUN (NaN, args, ,
 \n\
 @deftypefn  {Built-in Function} {} NaN\n\
 @deftypefnx {Built-in Function} {} NaN (@var{n})\n\
 @deftypefnx {Built-in Function} {} NaN (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} NaN (@var{n}, @var{m}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} NaN (@dots{}, @var{class})\n\
 Return a scalar, matrix, or N-dimensional array whose elements are all equal\n\
 to the IEEE symbol NaN (Not a Number).\n\
+\n\
 NaN is the result of operations which do not produce a well defined numerical\n\
 result.  Common operations which produce a NaN are arithmetic with infinity\n\
 @tex\n\
 ($\\infty - \\infty$), zero divided by zero ($0/0$),\n\
 @end tex\n\
 @ifnottex\n\
 (Inf - Inf), zero divided by zero (0/0),\n\
 @end ifnottex\n\
 and any operation involving another NaN value (5 + NaN).\n\
 \n\
 Note that NaN always compares not equal to NaN (NaN != NaN).  This behavior\n\
-is specified by the IEEE standard for floating point arithmetic.  To\n\
-find NaN values, use the @code{isnan} function.\n\
+is specified by the IEEE standard for floating point arithmetic.  To find\n\
+NaN values, use the @code{isnan} function.\n\
 \n\
 When called with no arguments, return a scalar with the value @samp{NaN}.\n\
+\n\
 When called with a single argument, return a square matrix with the dimension\n\
-specified.  When called with more than one scalar argument the first two\n\
-arguments are taken as the number of rows and columns and any further\n\
-arguments specify additional matrix dimensions.\n\
+specified.\n\
+\n\
+When called with more than one scalar argument the first two arguments are\n\
+taken as the number of rows and columns and any further arguments specify\n\
+additional matrix dimensions.\n\
+\n\
+\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{isnan, Inf}\n\
 @end deftypefn")
 {
   return fill_matrix (args, lo_ieee_nan_value (),
                       lo_ieee_float_nan_value (), "NaN");
 }
@@ -4568,29 +4605,35 @@ DEFALIAS (nan, NaN);
 DEFUN (e, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} e\n\
 @deftypefnx {Built-in Function} {} e (@var{n})\n\
 @deftypefnx {Built-in Function} {} e (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} e (@var{n}, @var{m}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} e (@dots{}, @var{class})\n\
 Return a scalar, matrix, or N-dimensional array whose elements are all equal\n\
-to the base of natural logarithms.  The constant\n\
+to the base of natural logarithms.\n\
+\n\
+The constant\n\
 @tex\n\
 $e$ satisfies the equation $\\log (e) = 1$.\n\
 @end tex\n\
 @ifnottex\n\
 @samp{e} satisfies the equation @code{log} (e) = 1.\n\
 @end ifnottex\n\
 \n\
-When called with no arguments, return a scalar with the value @math{e}.  When\n\
-called with a single argument, return a square matrix with the dimension\n\
-specified.  When called with more than one scalar argument the first two\n\
-arguments are taken as the number of rows and columns and any further\n\
-arguments specify additional matrix dimensions.\n\
+When called with no arguments, return a scalar with the value @math{e}.\n\
+\n\
+When called with a single argument, return a square matrix with the dimension\n\
+specified.\n\
+\n\
+When called with more than one scalar argument the first two arguments are\n\
+taken as the number of rows and columns and any further arguments specify\n\
+additional matrix dimensions.\n\
+\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{log, exp, pi, I}\n\
 @end deftypefn")
 {
 #if defined (M_E)
   double e_val = M_E;
 #else
@@ -4603,37 +4646,40 @@ either @qcode{\"double\"} or @qcode{\"si
 DEFUN (eps, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} eps\n\
 @deftypefnx {Built-in Function} {} eps (@var{x})\n\
 @deftypefnx {Built-in Function} {} eps (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} eps (@var{n}, @var{m}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} eps (@dots{}, @var{class})\n\
 Return a scalar, matrix or N-dimensional array whose elements are all eps,\n\
-the machine precision.  More precisely, @code{eps} is the relative spacing\n\
-between any two adjacent numbers in the machine's floating point system.\n\
-This number is obviously system dependent.  On machines that support IEEE\n\
-floating point arithmetic, @code{eps} is approximately\n\
+the machine precision.\n\
+\n\
+More precisely, @code{eps} is the relative spacing between any two adjacent\n\
+numbers in the machine's floating point system.  This number is obviously\n\
+system dependent.  On machines that support IEEE floating point arithmetic,\n\
+@code{eps} is approximately\n\
 @tex\n\
 $2.2204\\times10^{-16}$ for double precision and $1.1921\\times10^{-7}$\n\
 @end tex\n\
 @ifnottex\n\
 2.2204e-16 for double precision and 1.1921e-07\n\
 @end ifnottex\n\
 for single precision.\n\
 \n\
 When called with no arguments, return a scalar with the value\n\
 @code{eps (1.0)}.\n\
-Given a single argument @var{x}, return the distance between @var{x} and\n\
-the next largest value.\n\
+\n\
+Given a single argument @var{x}, return the distance between @var{x} and the\n\
+next largest value.\n\
+\n\
 When called with more than one argument the first two arguments are taken as\n\
-the number of rows and columns and any further\n\
-arguments specify additional matrix dimensions.\n\
-The optional argument @var{class} specifies the return type and may be\n\
-either @qcode{\"double\"} or @qcode{\"single\"}.\n\
+the number of rows and columns and any further arguments specify additional\n\
+matrix dimensions.  The optional argument @var{class} specifies the return\n\
+type and may be either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{realmax, realmin, intmax, bitmax}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
   octave_value retval;
 
   if (nargin == 1 && ! args(0).is_string ())
     {
@@ -4733,29 +4779,34 @@ DEFUN (pi, args, ,
 Return a scalar, matrix, or N-dimensional array whose elements are all equal\n\
 to the ratio of the circumference of a circle to its\n\
 @tex\n\
 diameter($\\pi$).\n\
 @end tex\n\
 @ifnottex\n\
 diameter.\n\
 @end ifnottex\n\
+\n\
 Internally, @code{pi} is computed as @samp{4.0 * atan (1.0)}.\n\
 \n\
 When called with no arguments, return a scalar with the value of\n\
 @tex\n\
 $\\pi$.\n\
 @end tex\n\
 @ifnottex\n\
 pi.\n\
 @end ifnottex\n\
+\n\
 When called with a single argument, return a square matrix with the dimension\n\
-specified.  When called with more than one scalar argument the first two\n\
-arguments are taken as the number of rows and columns and any further\n\
-arguments specify additional matrix dimensions.\n\
+specified.\n\
+\n\
+When called with more than one scalar argument the first two arguments are\n\
+taken as the number of rows and columns and any further arguments specify\n\
+additional matrix dimensions.\n\
+\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{e, I}\n\
 @end deftypefn")
 {
 #if defined (M_PI)
   double pi_val = M_PI;
 #else
@@ -4767,68 +4818,78 @@ either @qcode{\"double\"} or @qcode{\"si
 
 DEFUN (realmax, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} realmax\n\
 @deftypefnx {Built-in Function} {} realmax (@var{n})\n\
 @deftypefnx {Built-in Function} {} realmax (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} realmax (@var{n}, @var{m}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} realmax (@dots{}, @var{class})\n\
-Return a scalar, matrix or N-dimensional array whose elements are all equal\n\
-to the largest floating point number that is representable.  The actual\n\
-value is system dependent.  On machines that support IEEE\n\
+Return a scalar, matrix, or N-dimensional array whose elements are all equal\n\
+to the largest floating point number that is representable.\n\
+\n\
+The actual value is system dependent.  On machines that support IEEE\n\
 floating point arithmetic, @code{realmax} is approximately\n\
 @tex\n\
 $1.7977\\times10^{308}$ for double precision and $3.4028\\times10^{38}$\n\
 @end tex\n\
 @ifnottex\n\
 1.7977e+308 for double precision and 3.4028e+38\n\
 @end ifnottex\n\
 for single precision.\n\
 \n\
 When called with no arguments, return a scalar with the value\n\
 @code{realmax (@qcode{\"double\"})}.\n\
+\n\
 When called with a single argument, return a square matrix with the dimension\n\
-specified.  When called with more than one scalar argument the first two\n\
-arguments are taken as the number of rows and columns and any further\n\
-arguments specify additional matrix dimensions.\n\
+specified.\n\
+\n\
+When called with more than one scalar argument the first two arguments are\n\
+taken as the number of rows and columns and any further arguments specify\n\
+additional matrix dimensions.\n\
+\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{realmin, intmax, bitmax, eps}\n\
 @end deftypefn")
 {
   return fill_matrix (args, std::numeric_limits<double>::max (),
                       std::numeric_limits<float>::max (), "realmax");
 }
 
 DEFUN (realmin, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} realmin\n\
 @deftypefnx {Built-in Function} {} realmin (@var{n})\n\
 @deftypefnx {Built-in Function} {} realmin (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} realmin (@var{n}, @var{m}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} realmin (@dots{}, @var{class})\n\
-Return a scalar, matrix or N-dimensional array whose elements are all equal\n\
+Return a scalar, matrix, or N-dimensional array whose elements are all equal\n\
 to the smallest normalized floating point number that is representable.\n\
+\n\
 The actual value is system dependent.  On machines that support\n\
 IEEE floating point arithmetic, @code{realmin} is approximately\n\
 @tex\n\
 $2.2251\\times10^{-308}$ for double precision and $1.1755\\times10^{-38}$\n\
 @end tex\n\
 @ifnottex\n\
 2.2251e-308 for double precision and 1.1755e-38\n\
 @end ifnottex\n\
 for single precision.\n\
 \n\
 When called with no arguments, return a scalar with the value\n\
 @code{realmin (@qcode{\"double\"})}.\n\
+\n\
 When called with a single argument, return a square matrix with the dimension\n\
-specified.  When called with more than one scalar argument the first two\n\
-arguments are taken as the number of rows and columns and any further\n\
-arguments specify additional matrix dimensions.\n\
+specified.\n\
+\n\
+When called with more than one scalar argument the first two arguments are\n\
+taken as the number of rows and columns and any further arguments specify\n\
+additional matrix dimensions.\n\
+\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{realmax, intmin, eps}\n\
 @end deftypefn")
 {
   return fill_matrix (args, std::numeric_limits<double>::min (),
                       std::numeric_limits<float>::min (), "realmin");
 }
@@ -4852,21 +4913,25 @@ to the pure imaginary unit, defined as\n
 @end tex\n\
 @ifnottex\n\
 @code{sqrt (-1)}.\n\
 @end ifnottex\n\
 \n\
 I, and its equivalents i, j, and J, are functions so any of the names may\n\
 be reused for other purposes (such as i for a counter variable).\n\
 \n\
-When called with no arguments, return a scalar with the value @math{i}.  When\n\
-called with a single argument, return a square matrix with the dimension\n\
-specified.  When called with more than one scalar argument the first two\n\
-arguments are taken as the number of rows and columns and any further\n\
-arguments specify additional matrix dimensions.\n\
+When called with no arguments, return a scalar with the value @math{i}.\n\
+\n\
+When called with a single argument, return a square matrix with the dimension\n\
+specified.\n\
+\n\
+When called with more than one scalar argument the first two arguments are\n\
+taken as the number of rows and columns and any further arguments specify\n\
+additional matrix dimensions.\n\
+\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{e, pi, log, exp}\n\
 @end deftypefn")
 {
   return fill_matrix (args, Complex (0.0, 1.0), "I");
 }
 
@@ -4883,20 +4948,24 @@ DEFUN (NA, args, ,
 @deftypefnx {Built-in Function} {} NA (@dots{}, @var{class})\n\
 Return a scalar, matrix, or N-dimensional array whose elements are all equal\n\
 to the special constant used to designate missing values.\n\
 \n\
 Note that NA always compares not equal to NA (NA != NA).\n\
 To find NA values, use the @code{isna} function.\n\
 \n\
 When called with no arguments, return a scalar with the value @samp{NA}.\n\
+\n\
 When called with a single argument, return a square matrix with the dimension\n\
-specified.  When called with more than one scalar argument the first two\n\
-arguments are taken as the number of rows and columns and any further\n\
-arguments specify additional matrix dimensions.\n\
+specified.\n\
+\n\
+When called with more than one scalar argument the first two arguments are\n\
+taken as the number of rows and columns and any further arguments specify\n\
+additional matrix dimensions.\n\
+\n\
 The optional argument @var{class} specifies the return type and may be\n\
 either @qcode{\"double\"} or @qcode{\"single\"}.\n\
 @seealso{isna}\n\
 @end deftypefn")
 {
   return fill_matrix (args, lo_ieee_na_value (),
                       lo_ieee_float_na_value (), "NA");
 }
@@ -4907,36 +4976,40 @@ either @qcode{\"double\"} or @qcode{\"si
 */
 
 DEFUN (false, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} false (@var{x})\n\
 @deftypefnx {Built-in Function} {} false (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} false (@var{n}, @var{m}, @var{k}, @dots{})\n\
 Return a matrix or N-dimensional array whose elements are all logical 0.\n\
+\n\
 If invoked with a single scalar integer argument, return a square\n\
-matrix of the specified size.  If invoked with two or more scalar\n\
-integer arguments, or a vector of integer values, return an array with\n\
-given dimensions.\n\
+matrix of the specified size.\n\
+\n\
+If invoked with two or more scalar integer arguments, or a vector of integer\n\
+values, return an array with given dimensions.\n\
 @seealso{true}\n\
 @end deftypefn")
 {
   return fill_matrix (args, false, "false");
 }
 
 DEFUN (true, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} true (@var{x})\n\
 @deftypefnx {Built-in Function} {} true (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} true (@var{n}, @var{m}, @var{k}, @dots{})\n\
 Return a matrix or N-dimensional array whose elements are all logical 1.\n\
+\n\
 If invoked with a single scalar integer argument, return a square\n\
-matrix of the specified size.  If invoked with two or more scalar\n\
-integer arguments, or a vector of integer values, return an array with\n\
-given dimensions.\n\
+matrix of the specified size.\n\
+\n\
+If invoked with two or more scalar integer arguments, or a vector of integer\n\
+values, return an array with given dimensions.\n\
 @seealso{false}\n\
 @end deftypefn")
 {
   return fill_matrix (args, true, "true");
 }
 
 template <class MT>
 octave_value
@@ -5054,22 +5127,25 @@ identity_matrix (int nr, int nc, oct_dat
 #undef INT_EYE_MATRIX
 
 DEFUN (eye, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} eye (@var{n})\n\
 @deftypefnx {Built-in Function} {} eye (@var{m}, @var{n})\n\
 @deftypefnx {Built-in Function} {} eye ([@var{m} @var{n}])\n\
 @deftypefnx {Built-in Function} {} eye (@dots{}, @var{class})\n\
-Return an identity matrix.  If invoked with a single scalar argument @var{n},\n\
-return a square @nospell{NxN} identity matrix.  If\n\
-supplied two scalar arguments (@var{m}, @var{n}), @code{eye} takes them to be\n\
-the number of rows and columns.  If given a vector with two elements,\n\
-@code{eye} uses the values of the elements as the number of rows and columns,\n\
-respectively.  For example:\n\
+Return an identity matrix.\n\
+\n\
+If invoked with a single scalar argument @var{n}, return a square\n\
+@nospell{NxN} identity matrix.\n\
+\n\
+If supplied two scalar arguments (@var{m}, @var{n}), @code{eye} takes them\n\
+to be the number of rows and columns.  If given a vector with two elements,\n\
+@code{eye} uses the values of the elements as the number of rows and\n\
+columns, respectively.  For example:\n\
 \n\
 @example\n\
 @group\n\
 eye (3)\n\
  @result{}  1  0  0\n\
      0  1  0\n\
      0  0  1\n\
 @end group\n\
@@ -5089,19 +5165,19 @@ eye (size ([1, 2; 3, 4]))\n\
 \n\
 The optional argument @var{class}, allows @code{eye} to return an array of\n\
 the specified type, like\n\
 \n\
 @example\n\
 val = zeros (n,m, \"uint8\")\n\
 @end example\n\
 \n\
-Calling @code{eye} with no arguments is equivalent to calling it\n\
-with an argument of 1.  Any negative dimensions are treated as zero. \n\
-These odd definitions are for compatibility with @sc{matlab}.\n\
+Calling @code{eye} with no arguments is equivalent to calling it with an\n\
+argument of 1.  Any negative dimensions are treated as zero.  These odd\n\
+definitions are for compatibility with @sc{matlab}.\n\
 @seealso{speye, ones, zeros}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   oct_data_conv::data_type dt = oct_data_conv::dt_double;
@@ -5210,25 +5286,26 @@ do_linspace (const octave_value& base, c
   return retval;
 }
 
 DEFUN (linspace, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} linspace (@var{base}, @var{limit})\n\
 @deftypefnx {Built-in Function} {} linspace (@var{base}, @var{limit}, @var{n})\n\
 Return a row vector with @var{n} linearly spaced elements between\n\
-@var{base} and @var{limit}.  If the number of elements is greater than one,\n\
-then the endpoints @var{base} and @var{limit} are always included in\n\
-the range.  If @var{base} is greater than @var{limit}, the elements are\n\
-stored in decreasing order.  If the number of points is not specified, a\n\
-value of 100 is used.\n\
-\n\
-The @code{linspace} function always returns a row vector if both\n\
-@var{base} and @var{limit} are scalars.  If one, or both, of them are column\n\
-vectors, @code{linspace} returns a matrix.\n\
+@var{base} and @var{limit}.\n\
+\n\
+If the number of elements is greater than one, then the endpoints @var{base}\n\
+and @var{limit} are always included in the range.  If @var{base} is greater\n\
+than @var{limit}, the elements are stored in decreasing order.  If the\n\
+number of points is not specified, a value of 100 is used.\n\
+\n\
+The @code{linspace} function always returns a row vector if both @var{base}\n\
+and @var{limit} are scalars.  If one, or both, of them are column vectors,\n\
+@code{linspace} returns a matrix.\n\
 \n\
 For compatibility with @sc{matlab}, return the second argument (@var{limit})\n\
 if fewer than two values are requested.\n\
 @seealso{logspace}\n\
 @end deftypefn")
 {
   octave_value retval;
 
@@ -5395,33 +5472,35 @@ Resizing an object to fewer dimensions i
 
 DEFUN (reshape, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} reshape (@var{A}, @var{m}, @var{n}, @dots{})\n\
 @deftypefnx {Built-in Function} {} reshape (@var{A}, [@var{m} @var{n} @dots{}])\n\
 @deftypefnx {Built-in Function} {} reshape (@var{A}, @dots{}, [], @dots{})\n\
 @deftypefnx {Built-in Function} {} reshape (@var{A}, @var{size})\n\
 Return a matrix with the specified dimensions (@var{m}, @var{n}, @dots{})\n\
-whose elements are taken from the matrix @var{A}.  The elements of the\n\
-matrix are accessed in column-major order (like Fortran arrays are stored).\n\
+whose elements are taken from the matrix @var{A}.\n\
+\n\
+The elements of the matrix are accessed in column-major order (like Fortran\n\
+arrays are stored).\n\
 \n\
 The following code demonstrates reshaping a 1x4 row vector into a 2x2 square\n\
 matrix.\n\
 \n\
 @example\n\
 @group\n\
 reshape ([1, 2, 3, 4], 2, 2)\n\
       @result{}  1  3\n\
           2  4\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
-Note that the total number of elements in the original\n\
-matrix (@code{prod (size (@var{A}))}) must match the total number of elements\n\
+Note that the total number of elements in the original matrix\n\
+(@code{prod (size (@var{A}))}) must match the total number of elements\n\
 in the new matrix (@code{prod ([@var{m} @var{n} @dots{}])}).\n\
 \n\
 A single dimension of the return matrix may be left unspecified and Octave\n\
 will determine its size automatically.  An empty matrix ([]) is used to flag\n\
 the unspecified dimension.\n\
 @seealso{resize, vec, postpad, cat, squeeze}\n\
 @end deftypefn")
 {
@@ -5543,20 +5622,23 @@ the unspecified dimension.\n\
 %!error <SIZE is not divisible> reshape (1:3, 3, [], 2)
 */
 
 DEFUN (vec, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{v} =} vec (@var{x})\n\
 @deftypefnx {Built-in Function} {@var{v} =} vec (@var{x}, @var{dim})\n\
 Return the vector obtained by stacking the columns of the matrix @var{x}\n\
-one above the other.  Without @var{dim} this is equivalent to\n\
-@code{@var{x}(:)}.  If @var{dim} is supplied, the dimensions of @var{v}\n\
-are set to @var{dim} with all elements along the last dimension.\n\
-This is equivalent to @code{shiftdim (@var{x}(:), 1-@var{dim})}.\n\
+one above the other.\n\
+\n\
+Without @var{dim} this is equivalent to @code{@var{x}(:)}.\n\
+\n\
+If @var{dim} is supplied, the dimensions of @var{v} are set to @var{dim}\n\
+with all elements along the last dimension.  This is equivalent to\n\
+@code{shiftdim (@var{x}(:), 1-@var{dim})}.\n\
 @seealso{vech, resize, cat}\n\
 @end deftypefn")
 {
   octave_value retval;
   int dim = 1;
 
   int nargin = args.length ();
 
@@ -5608,16 +5690,17 @@ This is equivalent to @code{shiftdim (@v
 %!error vec (1, 2, 3)
 %!error vec ([1, 2; 3, 4], 0)
 */
 
 DEFUN (squeeze, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} squeeze (@var{x})\n\
 Remove singleton dimensions from @var{x} and return the result.\n\
+\n\
 Note that for compatibility with @sc{matlab}, all objects have\n\
 a minimum of two dimensions and row vectors are left unchanged.\n\
 @seealso{reshape}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
@@ -5626,17 +5709,17 @@ a minimum of two dimensions and row vect
     print_usage ();
 
   return retval;
 }
 
 DEFUN (full, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{FM} =} full (@var{SM})\n\
-Return a full storage matrix from a sparse, diagonal, permutation matrix,\n\
+Return a full storage matrix from a sparse, diagonal, or permutation matrix,\n\
 or a range.\n\
 @seealso{sparse, issparse}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).full_value ();
@@ -5648,18 +5731,19 @@ or a range.\n\
 
 // Compute various norms of the vector X.
 
 DEFUN (norm, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} norm (@var{A})\n\
 @deftypefnx {Built-in Function} {} norm (@var{A}, @var{p})\n\
 @deftypefnx {Built-in Function} {} norm (@var{A}, @var{p}, @var{opt})\n\
-Compute the p-norm of the matrix @var{A}.  If the second argument is\n\
-missing, @code{p = 2} is assumed.\n\
+Compute the p-norm of the matrix @var{A}.\n\
+\n\
+If the second argument is missing, @code{p = 2} is assumed.\n\
 \n\
 If @var{A} is a matrix (or sparse matrix):\n\
 \n\
 @table @asis\n\
 @item @var{p} = @code{1}\n\
 1-norm, the largest column sum of the absolute values of @var{A}.\n\
 \n\
 @item @var{p} = @code{2}\n\
@@ -5907,16 +5991,17 @@ This function and @w{@tcode{- x}} are eq
 {
   return unary_op_defun_body (octave_value::op_uminus, args);
 }
 
 DEFUN (transpose, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} transpose (@var{x})\n\
 Return the transpose of @var{x}.\n\
+\n\
 This function and @tcode{x.'} are equivalent.\n\
 @seealso{ctranspose}\n\
 @end deftypefn")
 {
   return unary_op_defun_body (octave_value::op_transpose, args);
 }
 
 /*
@@ -5938,16 +6023,17 @@ This function and @tcode{x.'} are equiva
 
 %!assert (transpose (single ([1,2;3,4])), single ([1,3;2,4]))
 */
 
 DEFUN (ctranspose, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ctranspose (@var{x})\n\
 Return the complex conjugate transpose of @var{x}.\n\
+\n\
 This function and @tcode{x'} are equivalent.\n\
 @seealso{transpose}\n\
 @end deftypefn")
 {
   return unary_op_defun_body (octave_value::op_hermitian, args);
 }
 
 /*
@@ -6013,16 +6099,17 @@ binary_assoc_op_defun_body (octave_value
   return retval;
 }
 
 DEFUN (plus, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} plus (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {} plus (@var{x1}, @var{x2}, @dots{})\n\
 This function and @w{@tcode{x + y}} are equivalent.\n\
+\n\
 If more arguments are given, the summation is applied\n\
 cumulatively from left to right:\n\
 \n\
 @example\n\
 (@dots{}((x1 + x2) + x3) + @dots{})\n\
 @end example\n\
 \n\
 At least one argument is required.\n\
@@ -6043,16 +6130,17 @@ This function and @w{@tcode{x - y}} are 
   return binary_op_defun_body (octave_value::op_sub, args);
 }
 
 DEFUN (mtimes, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} mtimes (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {} mtimes (@var{x1}, @var{x2}, @dots{})\n\
 Return the matrix multiplication product of inputs.\n\
+\n\
 This function and @w{@tcode{x * y}} are equivalent.\n\
 If more arguments are given, the multiplication is applied\n\
 cumulatively from left to right:\n\
 \n\
 @example\n\
 (@dots{}((x1 * x2) * x3) * @dots{})\n\
 @end example\n\
 \n\
@@ -6063,38 +6151,41 @@ At least one argument is required.\n\
   return binary_assoc_op_defun_body (octave_value::op_mul,
                                      octave_value::op_mul_eq, args);
 }
 
 DEFUN (mrdivide, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} mrdivide (@var{x}, @var{y})\n\
 Return the matrix right division of @var{x} and @var{y}.\n\
+\n\
 This function and @w{@tcode{x / y}} are equivalent.\n\
 @seealso{mldivide, rdivide, plus, minus}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_div, args);
 }
 
 DEFUN (mpower, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} mpower (@var{x}, @var{y})\n\
 Return the matrix power operation of @var{x} raised to the @var{y} power.\n\
+\n\
 This function and @w{@tcode{x ^ y}} are equivalent.\n\
 @seealso{power, mtimes, plus, minus}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_pow, args);
 }
 
 DEFUN (mldivide, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} mldivide (@var{x}, @var{y})\n\
 Return the matrix left division of @var{x} and @var{y}.\n\
+\n\
 This function and @w{@tcode{x @xbackslashchar{} y}} are equivalent.\n\
 @seealso{mrdivide, ldivide, rdivide}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_ldiv, args);
 }
 
 DEFUN (lt, args, ,
@@ -6116,16 +6207,17 @@ This function is equivalent to @w{@code{
 {
   return binary_op_defun_body (octave_value::op_le, args);
 }
 
 DEFUN (eq, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} eq (@var{x}, @var{y})\n\
 Return true if the two inputs are equal.\n\
+\n\
 This function is equivalent to @w{@code{x == y}}.\n\
 @seealso{ne, isequal, le, ge, gt, ne, lt}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_eq, args);
 }
 
 DEFUN (ge, args, ,
@@ -6147,28 +6239,30 @@ This function is equivalent to @w{@code{
 {
   return binary_op_defun_body (octave_value::op_gt, args);
 }
 
 DEFUN (ne, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ne (@var{x}, @var{y})\n\
 Return true if the two inputs are not equal.\n\
+\n\
 This function is equivalent to @w{@code{x != y}}.\n\
 @seealso{eq, isequal, le, ge, lt}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_ne, args);
 }
 
 DEFUN (times, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} times (@var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {} times (@var{x1}, @var{x2}, @dots{})\n\
 Return the element-by-element multiplication product of inputs.\n\
+\n\
 This function and @w{@tcode{x .* y}} are equivalent.\n\
 If more arguments are given, the multiplication is applied\n\
 cumulatively from left to right:\n\
 \n\
 @example\n\
 (@dots{}((x1 .* x2) .* x3) .* @dots{})\n\
 @end example\n\
 \n\
@@ -6179,43 +6273,47 @@ At least one argument is required.\n\
   return binary_assoc_op_defun_body (octave_value::op_el_mul,
                                      octave_value::op_el_mul_eq, args);
 }
 
 DEFUN (rdivide, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} rdivide (@var{x}, @var{y})\n\
 Return the element-by-element right division of @var{x} and @var{y}.\n\
+\n\
 This function and @w{@tcode{x ./ y}} are equivalent.\n\
 @seealso{ldivide, mrdivide, times, plus}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_el_div, args);
 }
 
 DEFUN (power, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} power (@var{x}, @var{y})\n\
 Return the element-by-element operation of @var{x} raised to the\n\
-@var{y} power.  If several complex results are possible,\n\
-returns the one with smallest non-negative argument (angle).  Use\n\
-@code{realpow}, @code{realsqrt}, @code{cbrt}, or @code{nthroot} if a\n\
-real result is preferred.\n\
+@var{y} power.\n\
 \n\
 This function and @w{@tcode{x .^ y}} are equivalent.\n\
+\n\
+If several complex results are possible, returns the one with smallest\n\
+non-negative argument (angle).  Use @code{realpow}, @code{realsqrt},\n\
+@code{cbrt}, or @code{nthroot} if a real result is preferred.\n\
+\n\
 @seealso{mpower, realpow, realsqrt, cbrt, nthroot}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_el_pow, args);
 }
 
 DEFUN (ldivide, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ldivide (@var{x}, @var{y})\n\
 Return the element-by-element left division of @var{x} and @var{y}.\n\
+\n\
 This function and @w{@tcode{x .@xbackslashchar{} y}} are equivalent.\n\
 @seealso{rdivide, mldivide, times, plus}\n\
 @end deftypefn")
 {
   return binary_op_defun_body (octave_value::op_el_ldiv, args);
 }
 
 DEFUN (and, args, ,
@@ -6298,19 +6396,21 @@ static double tic_toc_timestamp = -1.0;
 
 DEFUN (tic, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} tic ()\n\
 @deftypefnx {Built-in Function} {@var{id} =} tic ()\n\
 @deftypefnx {Built-in Function} {} toc ()\n\
 @deftypefnx {Built-in Function} {} toc (@var{id})\n\
 @deftypefnx {Built-in Function} {@var{val} =} toc (@dots{})\n\
-Set or check a wall-clock timer.  Calling @code{tic} without an\n\
-output argument sets the internal timer state.  Subsequent calls\n\
-to @code{toc} return the number of seconds since the timer was set.\n\
+Set or check a wall-clock timer.\n\
+\n\
+Calling @code{tic} without an output argument sets the internal timer state.\n\
+Subsequent calls to @code{toc} return the number of seconds since the timer\n\
+was set.\n\
 For example,\n\
 \n\
 @example\n\
 @group\n\
 tic ();\n\
 # many computations later@dots{}\n\
 elapsed_time = toc ();\n\
 @end group\n\
@@ -6429,22 +6529,26 @@ DEFUN (toc, args, nargout,
 %! id = tic ();
 %!assert (isa (id, "uint64"))
 %!assert (isa (toc (id), "double"))
 */
 
 DEFUN (cputime, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{total}, @var{user}, @var{system}] =} cputime ();\n\
-Return the CPU time used by your Octave session.  The first output is\n\
-the total time spent executing your process and is equal to the sum of\n\
-second and third outputs, which are the number of CPU seconds spent\n\
-executing in user mode and the number of CPU seconds spent executing in\n\
-system mode, respectively.  If your system does not have a way to report\n\
-CPU time usage, @code{cputime} returns 0 for each of its output values.\n\
+Return the CPU time used by your Octave session.\n\
+\n\
+The first output is the total time spent executing your process and is equal\n\
+to the sum of second and third outputs, which are the number of CPU seconds\n\
+spent executing in user mode and the number of CPU seconds spent executing\n\
+in system mode, respectively.\n\
+\n\
+If your system does not have a way to report CPU time usage, @code{cputime}\n\
+returns 0 for each of its output values.\n\
+\n\
 Note that because Octave used some CPU time to start, it is reasonable\n\
 to check to see if @code{cputime} works by checking to see if the total\n\
 CPU time used is nonzero.\n\
 @seealso{tic, toc}\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length ();
@@ -6500,18 +6604,19 @@ CPU time used is nonzero.\n\
 }
 
 DEFUN (sort, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{s}, @var{i}] =} sort (@var{x})\n\
 @deftypefnx {Built-in Function} {[@var{s}, @var{i}] =} sort (@var{x}, @var{dim})\n\
 @deftypefnx {Built-in Function} {[@var{s}, @var{i}] =} sort (@var{x}, @var{mode})\n\
 @deftypefnx {Built-in Function} {[@var{s}, @var{i}] =} sort (@var{x}, @var{dim}, @var{mode})\n\
-Return a copy of @var{x} with the elements arranged in increasing\n\
-order.  For matrices, @code{sort} orders the elements within columns\n\
+Return a copy of @var{x} with the elements arranged in increasing order.\n\
+\n\
+For matrices, @code{sort} orders the elements within columns\n\
 \n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 sort ([1, 2; 2, 3; 3, 1])\n\
    @result{}  1  1\n\
        2  2\n\
@@ -6913,18 +7018,20 @@ get_sort_mode_option (const octave_value
 
 DEFUN (issorted, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} issorted (@var{a})\n\
 @deftypefnx {Built-in Function} {} issorted (@var{a}, @var{mode})\n\
 @deftypefnx {Built-in Function} {} issorted (@var{a}, \"rows\", @var{mode})\n\
 Return true if the array is sorted according to @var{mode}, which\n\
 may be either @qcode{\"ascending\"}, @qcode{\"descending\"}, or\n\
-@qcode{\"either\"}.  By default,  @var{mode} is @qcode{\"ascending\"}.  NaNs\n\
-are treated in the same manner as @code{sort}.\n\
+@qcode{\"either\"}.\n\
+\n\
+By default,  @var{mode} is @qcode{\"ascending\"}.  NaNs are treated in the\n\
+same manner as @code{sort}.\n\
 \n\
 If the optional argument @qcode{\"rows\"} is supplied, check whether\n\
 the array is sorted by rows as output by the function @code{sortrows}\n\
 (with no options).\n\
 \n\
 This function does not support sparse matrices.\n\
 @seealso{sort, sortrows}\n\
 @end deftypefn\n")
@@ -7021,30 +7128,32 @@ This function does not support sparse ma
 %!assert (issorted (fliplr (sv)', "either"))
 */
 
 DEFUN (nth_element, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} nth_element (@var{x}, @var{n})\n\
 @deftypefnx {Built-in Function} {} nth_element (@var{x}, @var{n}, @var{dim})\n\
 Select the n-th smallest element of a vector, using the ordering defined by\n\
-@code{sort}.  In other words, the result is equivalent to\n\
-@code{sort(@var{x})(@var{n})}.\n\
+@code{sort}.\n\
+\n\
+The result is equivalent to @code{sort(@var{x})(@var{n})}.\n\
+\n\
 @var{n} can also be a contiguous range, either ascending @code{l:u}\n\
 or descending @code{u:-1:l}, in which case a range of elements is returned.\n\
+\n\
 If @var{x} is an array, @code{nth_element} operates along the dimension\n\
 defined by @var{dim}, or the first non-singleton dimension if @var{dim} is\n\
 not given.\n\
 \n\
-nth_element encapsulates the C++ standard library algorithms nth_element and\n\
-partial_sort.  On average, the complexity of the operation is O(M*log(K)),\n\
-where @w{@code{M = size (@var{x}, @var{dim})}} and\n\
-@w{@code{K = length (@var{n})}}.\n\
-This function is intended for cases where the ratio K/M is small; otherwise,\n\
-it may be better to use @code{sort}.\n\
+Programming Note: nth_element encapsulates the C++ standard library\n\
+algorithms nth_element and partial_sort.  On average, the complexity of the\n\
+operation is O(M*log(K)), where @w{@code{M = size (@var{x}, @var{dim})}} and\n\
+@w{@code{K = length (@var{n})}}.  This function is intended for cases where\n\
+the ratio K/M is small; otherwise, it may be better to use @code{sort}.\n\
 @seealso{sort, min, max}\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
 
   if (nargin == 2 || nargin == 3)
     {
@@ -7447,35 +7556,37 @@ do_merge (const Array<bool>& mask,
                          fval.INTX ## _array_value ()); \
     }
 
 DEFUN (merge, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} merge (@var{mask}, @var{tval}, @var{fval})\n\
 @deftypefnx {Built-in Function} {} ifelse (@var{mask}, @var{tval}, @var{fval})\n\
 Merge elements of @var{true_val} and @var{false_val}, depending on the\n\
-value of @var{mask}.  If @var{mask} is a logical scalar, the other two\n\
-arguments can be arbitrary values.  Otherwise, @var{mask} must be a logical\n\
-array, and @var{tval}, @var{fval} should be arrays of matching class, or\n\
-cell arrays.  In the scalar mask case, @var{tval} is returned if @var{mask}\n\
-is true, otherwise @var{fval} is returned.\n\
+value of @var{mask}.\n\
+\n\
+If @var{mask} is a logical scalar, the other two arguments can be arbitrary\n\
+values.  Otherwise, @var{mask} must be a logical array, and @var{tval},\n\
+@var{fval} should be arrays of matching class, or cell arrays.  In the\n\
+scalar mask case, @var{tval} is returned if @var{mask} is true, otherwise\n\
+@var{fval} is returned.\n\
 \n\
 In the array mask case, both @var{tval} and @var{fval} must be either\n\
 scalars or arrays with dimensions equal to @var{mask}.  The result is\n\
 constructed as follows:\n\
 \n\
 @example\n\
 @group\n\
 result(mask) = tval(mask);\n\
 result(! mask) = fval(! mask);\n\
 @end group\n\
 @end example\n\
 \n\
-@var{mask} can also be arbitrary numeric type, in which case\n\
-it is first converted to logical.\n\
+@var{mask} can also be arbitrary numeric type, in which case it is first\n\
+converted to logical.\n\
 @seealso{logical, diff}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
   octave_value retval;
 
   if (nargin == 3 && (args(0).is_bool_type () || args(0).is_numeric_type ()))
     {
@@ -7790,25 +7901,24 @@ do_repelems (const Array<T>& src, const 
     }
 
   return retval;
 }
 
 DEFUN (repelems, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} repelems (@var{x}, @var{r})\n\
-Construct a vector of repeated elements from @var{x}.  @var{r}\n\
-is a 2x@var{N} integer matrix specifying which elements to repeat and\n\
-how often to repeat each element.\n\
-\n\
-Entries in the first row, @var{r}(1,j), select an element to repeat.\n\
-The corresponding entry in the second row, @var{r}(2,j), specifies\n\
-the repeat count.  If @var{x} is a matrix then the columns of @var{x} are\n\
-imagined to be stacked on top of each other for purposes of the selection\n\
-index.  A row vector is always returned.\n\
+Construct a vector of repeated elements from @var{x}.\n\
+\n\
+@var{r} is a 2x@var{N} integer matrix specifying which elements to repeat and\n\
+how often to repeat each element.  Entries in the first row, @var{r}(1,j),\n\
+select an element to repeat.  The corresponding entry in the second row,\n\
+@var{r}(2,j), specifies the repeat count.  If @var{x} is a matrix then the\n\
+columns of @var{x} are imagined to be stacked on top of each other for\n\
+purposes of the selection index.  A row vector is always returned.\n\
 \n\
 Conceptually the result is calculated as follows:\n\
 \n\
 @example\n\
 @group\n\
 y = [];\n\
 for i = 1:columns (@var{r})\n\
   y = [y, @var{x}(@var{r}(1,i)*ones(1, @var{r}(2,i)))];\n\
@@ -7988,18 +8098,20 @@ Encode a double matrix or array @var{x} 
 %!error base64_encode (struct ())
 */
 
 DEFUN (base64_decode, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{x} =} base64_decode (@var{s})\n\
 @deftypefnx {Built-in Function} {@var{x} =} base64_decode (@var{s}, @var{dims})\n\
 Decode the double matrix or array @var{x} from the base64 encoded string\n\
-@var{s}.  The optional input parameter @var{dims} should be a vector\n\
-containing the dimensions of the decoded array.\n\
+@var{s}.\n\
+\n\
+The optional input parameter @var{dims} should be a vector containing the\n\
+dimensions of the decoded array.\n\
 @seealso{base64_encode}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -741,19 +741,20 @@ files.\n\
 
 DEFUN (dbstatus, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} dbstatus ()\n\
 @deftypefnx {Built-in Function} {@var{brk_list} =} dbstatus ()\n\
 @deftypefnx {Built-in Function} {@var{brk_list} =} dbstatus (\"@var{func}\")\n\
 Report the location of active breakpoints.\n\
 \n\
-When called with no input or output arguments, print the list of\n\
-all functions with breakpoints and the line numbers where those\n\
-breakpoints are set.\n\
+When called with no input or output arguments, print the list of all\n\
+functions with breakpoints and the line numbers where those breakpoints are\n\
+set.\n\
+\n\
 If a function name @var{func} is specified then only report breakpoints\n\
 for the named function.\n\
 \n\
 The optional return argument @var{brk_list} is a struct array with the\n\
 following fields.\n\
 \n\
 @table @asis\n\
 @item name\n\
@@ -859,18 +860,18 @@ current function.\n\
 
       return octave_value (retval);
     }
 }
 
 DEFUN (dbwhere, , ,
        "-*- texinfo -*-\n\
 @deftypefn {Command} {} dbwhere\n\
-In debugging mode, report the current file and line number where\n\
-execution is stopped.\n\
+In debugging mode, report the current file and line number where execution\n\
+is stopped.\n\
 @seealso{dbstatus, dbcont, dbstep, dbup}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   octave_user_code *dbg_fcn = get_user_code ();
 
   if (dbg_fcn)
@@ -950,19 +951,21 @@ DEFUN (dbtype, args, ,
 @deftypefnx {Command} {} dbtype @var{startl:end}\n\
 @deftypefnx {Command} {} dbtype @var{func}\n\
 @deftypefnx {Command} {} dbtype @var{func} @var{lineno}\n\
 @deftypefnx {Command} {} dbtype @var{func} @var{startl:endl}\n\
 @deftypefnx {Command} {} dbtype @var{func} @var{startl:end}\n\
 Display a script file with line numbers.\n\
 \n\
 When called with no arguments in debugging mode, display the script file\n\
-currently being debugged.  An optional range specification can be used to\n\
-list only a portion of the file.  The special keyword @qcode{\"end\"} is a\n\
-valid line number specification for the last line of the file.\n\
+currently being debugged.\n\
+\n\
+An optional range specification can be used to list only a portion of the\n\
+file.  The special keyword @qcode{\"end\"} is a valid line number\n\
+specification for the last line of the file.\n\
 \n\
 When called with the name of a function, list that script file with line\n\
 numbers.\n\
 @seealso{dbwhere, dbstatus, dbstop}\n\
 @end deftypefn")
 {
   octave_value retval;
   octave_user_code *dbg_fcn;
@@ -1103,18 +1106,19 @@ numbers.\n\
   return retval;
 }
 
 DEFUN (dblist, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} dblist\n\
 @deftypefnx {Command} {} dblist @var{n}\n\
 In debugging mode, list @var{n} lines of the function being debugged\n\
-centered around the current line to be executed.  If unspecified @var{n}\n\
-defaults to 10 (+/- 5 lines)\n\
+centered around the current line to be executed.\n\
+\n\
+If unspecified @var{n} defaults to 10 (+/- 5 lines)\n\
 @seealso{dbwhere, dbtype}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int n = 10;
 
   if (args.length () == 1)
@@ -1299,21 +1303,24 @@ show_octave_dbstack (void)
 
 DEFUN (dbstack, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} dbstack\n\
 @deftypefnx {Command} {} dbstack @var{n}\n\
 @deftypefnx {Command} {} dbstack @var{-completenames}\n\
 @deftypefnx {Built-in Function} {[@var{stack}, @var{idx}] =} dbstack (@dots{})\n\
 Display or return current debugging function stack information.\n\
+\n\
 With optional argument @var{n}, omit the @var{n} innermost stack frames.\n\
 \n\
 Although accepted, the argument @var{-completenames} is silently ignored.\n\
-Octave always returns absolute file names.  The arguments @var{n} and\n\
-@var{-completenames} can be both specified in any order.\n\
+Octave always returns absolute file names.\n\
+\n\
+The arguments @var{n} and @var{-completenames} can be both specified in any\n\
+order.\n\
 \n\
 The optional return argument @var{stack} is a struct array with the\n\
 following fields:\n\
 \n\
 @table @asis\n\
 @item file\n\
 The name of the m-file where the function code is located.\n\
 \n\
@@ -1370,32 +1377,34 @@ do_dbupdown (const octave_value_list& ar
     }
 }
 
 DEFUN (dbup, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} dbup\n\
 @deftypefnx {Command} {} dbup @var{n}\n\
 In debugging mode, move up the execution stack @var{n} frames.\n\
+\n\
 If @var{n} is omitted, move up one frame.\n\
 @seealso{dbstack, dbdown}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   do_dbupdown (args, "dbup");
 
   return retval;
 }
 
 DEFUN (dbdown, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} dbdown\n\
 @deftypefnx {Command} {} dbdown @var{n}\n\
 In debugging mode, move down the execution stack @var{n} frames.\n\
+\n\
 If @var{n} is omitted, move down one frame.\n\
 @seealso{dbstack, dbup}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   do_dbupdown (args, "dbdown");
 
@@ -1405,23 +1414,26 @@ If @var{n} is omitted, move down one fra
 DEFUN (dbstep, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} dbstep\n\
 @deftypefnx {Command} {} dbstep @var{n}\n\
 @deftypefnx {Command} {} dbstep in\n\
 @deftypefnx {Command} {} dbstep out\n\
 @deftypefnx {Command} {} dbnext @dots{}\n\
 In debugging mode, execute the next @var{n} lines of code.\n\
-If @var{n} is omitted, execute the next single line of code.\n\
-If the next line of code is itself defined in terms of an m-file remain in\n\
-the existing function.\n\
+\n\
+If @var{n} is omitted, execute the next single line of code.  If the next\n\
+line of code is itself defined in terms of an m-file remain in the existing\n\
+function.\n\
 \n\
 Using @code{dbstep in} will cause execution of the next line to step into\n\
-any m-files defined on the next line.  Using @code{dbstep out} will cause\n\
-execution to continue until the current function returns.\n\
+any m-files defined on the next line.\n\
+\n\
+Using @code{dbstep out} will cause execution to continue until the current\n\
+function returns.\n\
 \n\
 @code{dbnext} is an alias for @code{dbstep}.\n\
 @seealso{dbcont, dbquit}\n\
 @end deftypefn")
 {
   if (Vdebugging)
     {
       int nargin = args.length ();
@@ -1500,18 +1512,18 @@ Leave command-line debugging mode and co
     error ("dbcont: can only be called in debug mode");
 
   return octave_value_list ();
 }
 
 DEFUN (dbquit, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Command} {} dbquit\n\
-Quit debugging mode immediately without further code execution and\n\
-return to the Octave prompt.\n\
+Quit debugging mode immediately without further code execution and return to\n\
+the Octave prompt.\n\
 @seealso{dbcont, dbstep}\n\
 @end deftypefn")
 {
   if (Vdebugging)
     {
       if (args.length () == 0)
         {
           Vdebugging = false;
diff --git a/libinterp/corefcn/defaults.cc b/libinterp/corefcn/defaults.cc
--- a/libinterp/corefcn/defaults.cc
+++ b/libinterp/corefcn/defaults.cc
@@ -477,22 +477,21 @@ install_defaults (void)
 DEFUN (EDITOR, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} EDITOR ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} EDITOR (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} EDITOR (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the default text editor.\n\
 \n\
 The default value is taken from the environment variable @w{@env{EDITOR}}\n\
-when Octave starts.  If the\n\
-environment variable is not initialized, @w{@env{EDITOR}} will be set to\n\
-@qcode{\"emacs\"}.\n\
+when Octave starts.  If the environment variable is not initialized,\n\
+@w{@env{EDITOR}} will be set to @qcode{\"emacs\"}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 \n\
 @seealso{edit, edit_history}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (EDITOR);
 }
 
@@ -510,22 +509,24 @@ The original variable value is restored 
 
 DEFUN (EXEC_PATH, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} EXEC_PATH ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} EXEC_PATH (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} EXEC_PATH (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies a colon separated\n\
 list of directories to append to the shell PATH when executing external\n\
-programs.  The initial value of is taken from the environment variable\n\
-@w{@env{OCTAVE_EXEC_PATH}}, but that value can be overridden by\n\
-the command line argument @option{--exec-path PATH}.\n\
+programs.\n\
+\n\
+The initial value of is taken from the environment variable\n\
+@w{@env{OCTAVE_EXEC_PATH}}, but that value can be overridden by the command\n\
+line argument @option{--exec-path PATH}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 \n\
 @seealso{IMAGE_PATH, OCTAVE_HOME}\n\
 @end deftypefn")
 {
   octave_value retval = SET_NONEMPTY_INTERNAL_STRING_VARIABLE (EXEC_PATH);
 
   if (args.length () > 0)
@@ -550,17 +551,17 @@ DEFUN (IMAGE_PATH, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} IMAGE_PATH ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} IMAGE_PATH (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} IMAGE_PATH (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies a colon separated\n\
 list of directories in which to search for image files.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 \n\
 @seealso{EXEC_PATH, OCTAVE_HOME}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (IMAGE_PATH);
 }
 
@@ -575,17 +576,16 @@ The original variable value is restored 
 
 %!error (IMAGE_PATH (1, 2))
 */
 
 DEFUN (OCTAVE_HOME, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} OCTAVE_HOME ()\n\
 Return the name of the top-level Octave installation directory.\n\
-\n\
 @seealso{EXEC_PATH, IMAGE_PATH}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 0)
     retval = Voctave_home;
   else
diff --git a/libinterp/corefcn/det.cc b/libinterp/corefcn/det.cc
--- a/libinterp/corefcn/det.cc
+++ b/libinterp/corefcn/det.cc
@@ -50,18 +50,18 @@ along with Octave; see the file COPYING.
 DEFUN (det, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} det (@var{A})\n\
 @deftypefnx {Built-in Function} {[@var{d}, @var{rcond}] =} det (@var{A})\n\
 Compute the determinant of @var{A}.\n\
 \n\
 Return an estimate of the reciprocal condition number if requested.\n\
 \n\
-Routines from @sc{lapack} are used for full matrices and code from\n\
-@sc{umfpack} is used for sparse matrices.\n\
+Programming Notes: Routines from @sc{lapack} are used for full matrices and\n\
+code from @sc{umfpack} is used for sparse matrices.\n\
 \n\
 The determinant should not be used to check a matrix for singularity.\n\
 For that, use any of the condition number functions: @code{cond},\n\
 @code{condest}, @code{rcond}.\n\
 @seealso{cond, condest, rcond}\n\
 @end deftypefn")
 {
   octave_value_list retval;
diff --git a/libinterp/corefcn/dirfns.cc b/libinterp/corefcn/dirfns.cc
--- a/libinterp/corefcn/dirfns.cc
+++ b/libinterp/corefcn/dirfns.cc
@@ -169,18 +169,18 @@ DEFUN (readdir, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{files} =} readdir (@var{dir})\n\
 @deftypefnx {Built-in Function} {[@var{files}, @var{err}, @var{msg}] =} readdir (@var{dir})\n\
 Return the names of files in the directory @var{dir} as a cell array of\n\
 strings.\n\
 \n\
 If an error occurs, return an empty cell array in @var{files}.\n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
-Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
-system-dependent error message.\n\
+Otherwise, @var{err} is nonzero and @var{msg} contains a system-dependent\n\
+error message.\n\
 @seealso{ls, dir, glob, what}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(2) = std::string ();
   retval(1) = -1.0;
   retval(0) = Cell ();
@@ -305,23 +305,24 @@ identifier.\n\
 
 DEFUNX ("rmdir", Frmdir, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} rmdir @var{dir}\n\
 @deftypefnx {Built-in Function} {} rmdir (@var{dir}, \"s\")\n\
 @deftypefnx {Built-in Function} {[@var{status}, @var{msg}, @var{msgid}] =} rmdir (@dots{})\n\
 Remove the directory named @var{dir}.\n\
 \n\
+If the optional second parameter is supplied with value @qcode{\"s\"},\n\
+recursively remove all subdirectories as well.\n\
+\n\
 If successful, @var{status} is 1, and @var{msg}, @var{msgid} are empty\n\
 character strings ("").  Otherwise, @var{status} is 0, @var{msg} contains a\n\
 system-dependent error message, and @var{msgid} contains a unique message\n\
 identifier.\n\
 \n\
-If the optional second parameter is supplied with value @qcode{\"s\"},\n\
-recursively remove all subdirectories as well.\n\
 @seealso{mkdir, confirm_recursive_rmdir, pwd}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(2) = std::string ();
   retval(1) = std::string ();
   retval(0) = false;
@@ -381,18 +382,18 @@ recursively remove all subdirectories as
 
 DEFUNX ("link", Flink, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} link @var{old} @var{new}\n\
 @deftypefnx {Built-in Function} {[@var{err}, @var{msg}] =} link (@var{old}, @var{new})\n\
 Create a new link (also known as a hard link) to an existing file.\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
-Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
-system-dependent error message.\n\
+Otherwise, @var{err} is nonzero and @var{msg} contains a system-dependent\n\
+error message.\n\
 @seealso{symlink, unlink, readlink, lstat}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1.0;
 
@@ -428,18 +429,18 @@ system-dependent error message.\n\
 
 DEFUNX ("symlink", Fsymlink, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} symlink @var{old} @var{new}\n\
 @deftypefnx {Built-in Function} {[@var{err}, @var{msg}] =} symlink (@var{old}, @var{new})\n\
 Create a symbolic link @var{new} which contains the string @var{old}.\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
-Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
-system-dependent error message.\n\
+Otherwise, @var{err} is nonzero and @var{msg} contains a system-dependent\n\
+error message.\n\
 @seealso{link, unlink, readlink, lstat}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1.0;
 
@@ -519,18 +520,18 @@ error message.\n\
 
 DEFUNX ("rename", Frename, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} rename @var{old} @var{new}\n\
 @deftypefnx {Built-in Function} {[@var{err}, @var{msg}] =} rename (@var{old}, @var{new})\n\
 Change the name of file @var{old} to @var{new}.\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
-Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
-system-dependent error message.\n\
+Otherwise, @var{err} is nonzero and @var{msg} contains a system-dependent\n\
+error message.\n\
 @seealso{movefile, copyfile, ls, dir}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1.0;
 
@@ -564,18 +565,21 @@ system-dependent error message.\n\
   return retval;
 }
 
 DEFUN (glob, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} glob (@var{pattern})\n\
 Given an array of pattern strings (as a char array or a cell array) in\n\
 @var{pattern}, return a cell array of file names that match any of\n\
-them, or an empty cell array if no patterns match.  The pattern strings are\n\
-interpreted as filename globbing patterns (as they are used by Unix shells).\n\
+them, or an empty cell array if no patterns match.\n\
+\n\
+The pattern strings are interpreted as filename globbing patterns (as they\n\
+are used by Unix shells).\n\
+\n\
 Within a pattern\n\
 \n\
 @table @code\n\
 @item *\n\
 matches any string, including the null string,\n\
 \n\
 @item ?\n\
 matches any single character, and\n\
@@ -665,16 +669,17 @@ glob (\"file[12]\")\n\
 %! assert (result3, {"file1"; "file2"});
 */
 
 DEFUN (__fnmatch__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} fnmatch (@var{pattern}, @var{string})\n\
 Return true or false for each element of @var{string} that matches any of\n\
 the elements of the string array @var{pattern}, using the rules of\n\
+\n\
 filename pattern matching.  For example:\n\
 \n\
 @example\n\
 @group\n\
 fnmatch (\"a*b\", @{\"ab\"; \"axyzb\"; \"xyzab\"@})\n\
      @result{} [ 1; 1; 0 ]\n\
 @end group\n\
 @end example\n\
@@ -789,15 +794,15 @@ DEFUN (confirm_recursive_rmdir, args, na
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} confirm_recursive_rmdir ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} confirm_recursive_rmdir (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} confirm_recursive_rmdir (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave\n\
 will ask for confirmation before recursively removing a directory tree.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{rmdir}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (confirm_recursive_rmdir);
 }
diff --git a/libinterp/corefcn/dlmread.cc b/libinterp/corefcn/dlmread.cc
--- a/libinterp/corefcn/dlmread.cc
+++ b/libinterp/corefcn/dlmread.cc
@@ -158,19 +158,21 @@ parse_range_spec (const octave_value& ra
 
 DEFUN (dlmread, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{data} =} dlmread (@var{file})\n\
 @deftypefnx {Built-in Function} {@var{data} =} dlmread (@var{file}, @var{sep})\n\
 @deftypefnx {Built-in Function} {@var{data} =} dlmread (@var{file}, @var{sep}, @var{r0}, @var{c0})\n\
 @deftypefnx {Built-in Function} {@var{data} =} dlmread (@var{file}, @var{sep}, @var{range})\n\
 @deftypefnx {Built-in Function} {@var{data} =} dlmread (@dots{}, \"emptyvalue\", @var{EMPTYVAL})\n\
-Read the matrix @var{data} from a text file.  If not defined the separator\n\
-between fields is determined from the file itself.  Otherwise the\n\
-separation character is defined by @var{sep}.\n\
+Read the matrix @var{data} from a text file which uses the delimiter\n\
+@var{sep} between data values.\n\
+\n\
+If @var{sep} is not defined the separator between fields is determined from\n\
+the file itself.\n\
 \n\
 Given two scalar arguments @var{r0} and @var{c0}, these define the starting\n\
 row and column of the data to be read.  These values are indexed from zero,\n\
 such that the first row corresponds to an index of zero.\n\
 \n\
 The @var{range} parameter may be a 4-element vector containing the upper\n\
 left and lower right corner @code{[@var{R0},@var{C0},@var{R1},@var{C1}]}\n\
 where the lowest index value is zero.  Alternatively, a spreadsheet style\n\
diff --git a/libinterp/corefcn/dot.cc b/libinterp/corefcn/dot.cc
--- a/libinterp/corefcn/dot.cc
+++ b/libinterp/corefcn/dot.cc
@@ -101,20 +101,23 @@ get_red_dims (const dim_vector& x, const
           z(i) = 1;
         }
     }
 }
 
 DEFUN (dot, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} dot (@var{x}, @var{y}, @var{dim})\n\
-Compute the dot product of two vectors.  If @var{x} and @var{y}\n\
-are matrices, calculate the dot products along the first\n\
-non-singleton dimension.  If the optional argument @var{dim} is\n\
-given, calculate the dot products along this dimension.\n\
+Compute the dot product of two vectors.\n\
+\n\
+If @var{x} and @var{y} are matrices, calculate the dot products along the\n\
+first non-singleton dimension.\n\
+\n\
+If the optional argument @var{dim} is given, calculate the dot products\n\
+along this dimension.\n\
 \n\
 This is equivalent to\n\
 @code{sum (conj (@var{X}) .* @var{Y}, @var{dim})},\n\
 but avoids forming a temporary array and is faster.  When @var{X} and\n\
 @var{Y} are column vectors, the result is equivalent to\n\
 @code{@var{X}' * @var{Y}}.\n\
 @seealso{cross, divergence}\n\
 @end deftypefn")
@@ -276,21 +279,22 @@ but avoids forming a temporary array and
 %!error <sizes of X and Y must match> dot ([1 2]', [1 2 3]')
 %!error <sizes of X and Y must match> dot (ones (2,2), ones (2,3))
 %!error <DIM must be a valid dimension> dot ([1 2], [1 2], 0)
 */
 
 DEFUN (blkmm, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} blkmm (@var{A}, @var{B})\n\
-Compute products of matrix blocks.  The blocks are given as\n\
-2-dimensional subarrays of the arrays @var{A}, @var{B}.\n\
-The size of @var{A} must have the form @code{[m,k,@dots{}]} and\n\
-size of @var{B} must be @code{[k,n,@dots{}]}.  The result is\n\
-then of size @code{[m,n,@dots{}]} and is computed as follows:\n\
+Compute products of matrix blocks.\n\
+\n\
+The blocks are given as 2-dimensional subarrays of the arrays @var{A},\n\
+@var{B}.  The size of @var{A} must have the form @code{[m,k,@dots{}]} and\n\
+size of @var{B} must be @code{[k,n,@dots{}]}.  The result is then of size\n\
+@code{[m,n,@dots{}]} and is computed as follows:\n\
 \n\
 @example\n\
 @group\n\
 for i = 1:prod (size (@var{A})(3:end))\n\
   @var{C}(:,:,i) = @var{A}(:,:,i) * @var{B}(:,:,i)\n\
 endfor\n\
 @end group\n\
 @end example\n\
diff --git a/libinterp/corefcn/eig.cc b/libinterp/corefcn/eig.cc
--- a/libinterp/corefcn/eig.cc
+++ b/libinterp/corefcn/eig.cc
@@ -38,17 +38,17 @@ DEFUN (eig, args, nargout,
 @deftypefn  {Built-in Function} {@var{lambda} =} eig (@var{A})\n\
 @deftypefnx {Built-in Function} {@var{lambda} =} eig (@var{A}, @var{B})\n\
 @deftypefnx {Built-in Function} {[@var{V}, @var{lambda}] =} eig (@var{A})\n\
 @deftypefnx {Built-in Function} {[@var{V}, @var{lambda}] =} eig (@var{A}, @var{B})\n\
 Compute the eigenvalues (and optionally the eigenvectors) of a matrix\n\
 or a pair of matrices\n\
 \n\
 The algorithm used depends on whether there are one or two input\n\
-matrices, if they are real or complex and if they are symmetric\n\
+matrices, if they are real or complex, and if they are symmetric\n\
 (Hermitian if complex) or non-symmetric.\n\
 \n\
 The eigenvalues returned by @code{eig} are not ordered.\n\
 @seealso{eigs, svd}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -833,21 +833,22 @@ handle_message (error_fun f, const char 
     }
 
   return retval;
 }
 
 DEFUN (rethrow, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} rethrow (@var{err})\n\
-Reissue a previous error as defined by @var{err}.  @var{err} is a structure\n\
-that must contain at least the @qcode{\"message\"} and @qcode{\"identifier\"}\n\
-fields.  @var{err} can also contain a field @qcode{\"stack\"} that gives\n\
-information on the assumed location of the error.  Typically @var{err} is\n\
-returned from @code{lasterror}.\n\
+Reissue a previous error as defined by @var{err}.\n\
+\n\
+@var{err} is a structure that must contain at least the @qcode{\"message\"}\n\
+and @qcode{\"identifier\"} fields.  @var{err} can also contain a field\n\
+@qcode{\"stack\"} that gives information on the assumed location of the\n\
+error.  Typically @var{err} is returned from @code{lasterror}.\n\
 @seealso{lasterror, lasterr, error}\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
 
   if (nargin != 1)
     print_usage ();
@@ -1023,24 +1024,26 @@ maybe_extract_message_id (const std::str
 
   return have_fmt;
 }
 
 DEFUN (error, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} error (@var{template}, @dots{})\n\
 @deftypefnx {Built-in Function} {} error (@var{id}, @var{template}, @dots{})\n\
+Display an error message and stop m-file execution.\n\
+\n\
 Format the optional arguments under the control of the template string\n\
 @var{template} using the same rules as the @code{printf} family of\n\
 functions (@pxref{Formatted Output}) and print the resulting message\n\
 on the @code{stderr} stream.  The message is prefixed by the character\n\
 string @samp{error: }.\n\
 \n\
 Calling @code{error} also sets Octave's internal error state such that\n\
-control will return to the top level without evaluating any more\n\
+control will return to the top level without evaluating any further\n\
 commands.  This is useful for aborting from functions or scripts.\n\
 \n\
 If the error message does not end with a newline character, Octave will\n\
 print a traceback of all the function calls leading to the error.  For\n\
 example, given the following function definitions:\n\
 \n\
 @example\n\
 @group\n\
@@ -1101,17 +1104,17 @@ error (err_msg);\n\
 @noindent\n\
 which will only stop execution if an error has been found.\n\
 \n\
 Implementation Note: For compatibility with @sc{matlab}, escape\n\
 sequences in @var{template} (e.g., @qcode{\"@xbackslashchar{}n\"} =>\n\
 newline) are processed regardless of whether @var{template} has been defined\n\
 with single quotes, as long as there are two or more input arguments.  To\n\
 disable escape sequence expansion use a second backslash before the sequence\n\
-(e.g., \"@xbackslashchar{}@xbackslashchar{}n\") or use the\n\
+(e.g., @qcode{\"@xbackslashchar{}@xbackslashchar{}n\"}) or use the\n\
 @code{regexptranslate} function.\n\
 @seealso{warning, lasterror}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
@@ -1353,16 +1356,18 @@ DEFUN (warning, args, nargout,
 @deftypefn  {Built-in Function} {} warning (@var{template}, @dots{})\n\
 @deftypefnx {Built-in Function} {} warning (@var{id}, @var{template}, @dots{})\n\
 @deftypefnx {Built-in Function} {} warning (\"on\", @var{id})\n\
 @deftypefnx {Built-in Function} {} warning (\"off\", @var{id})\n\
 @deftypefnx {Built-in Function} {} warning (\"query\", @var{id})\n\
 @deftypefnx {Built-in Function} {} warning (\"error\", @var{id})\n\
 @deftypefnx {Built-in Function} {} warning (@var{state}, \"backtrace\")\n\
 @deftypefnx {Built-in Function} {} warning (@var{state}, @var{id}, \"local\")\n\
+Display a warning message or control the behavior of Octave's warning system.\n\
+\n\
 Format the optional arguments under the control of the template string\n\
 @var{template} using the same rules as the @code{printf} family of\n\
 functions (@pxref{Formatted Output}) and print the resulting message\n\
 on the @code{stderr} stream.  The message is prefixed by the character\n\
 string @samp{warning: }.\n\
 You should use this function when you want to notify the user\n\
 of an unusual condition, but only when it makes sense for your program\n\
 to go on.\n\
@@ -1401,17 +1406,17 @@ previous warning state is restored on re
 function.  The @qcode{\"local\"} option is ignored if used in the top-level\n\
 workspace.\n\
 \n\
 Implementation Note: For compatibility with @sc{matlab}, escape\n\
 sequences in @var{template} (e.g., @qcode{\"@xbackslashchar{}n\"} =>\n\
 newline) are processed regardless of whether @var{template} has been defined\n\
 with single quotes, as long as there are two or more input arguments.  To\n\
 disable escape sequence expansion use a second backslash before the sequence\n\
-(e.g., \"@xbackslashchar{}@xbackslashchar{}n\") or use the\n\
+(e.g., @qcode{\"@xbackslashchar{}@xbackslashchar{}n\"}) or use the\n\
 @code{regexptranslate} function.\n\
 @seealso{warning_ids, lastwarn, error}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
   int argc = nargin + 1;
@@ -1755,31 +1760,33 @@ initialize_default_warning_state (void)
   disable_warning ("Octave:variable-switch-label");
 }
 
 DEFUN (lasterror, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{lasterr} =} lasterror ()\n\
 @deftypefnx {Built-in Function} {} lasterror (@var{err})\n\
 @deftypefnx {Built-in Function} {} lasterror (\"reset\")\n\
-Query or set the last error message structure.  When called without\n\
-arguments, return a structure containing the last error message and other\n\
-information related to this error.  The elements of the structure are:\n\
+Query or set the last error message structure.\n\
+\n\
+When called without arguments, return a structure containing the last error\n\
+message and other information related to this error.  The elements of the\n\
+structure are:\n\
 \n\
 @table @code\n\
 @item message\n\
 The text of the last error message\n\
 \n\
 @item identifier\n\
 The message identifier of this error message\n\
 \n\
 @item stack\n\
 A structure containing information on where the message occurred.  This may\n\
-be an empty structure if the information cannot\n\
-be obtained.  The fields of the structure are:\n\
+be an empty structure if the information cannot be obtained.  The fields of\n\
+the structure are:\n\
 \n\
 @table @code\n\
 @item file\n\
 The name of the file where the error occurred\n\
 \n\
 @item name\n\
 The name of function in which the error occurred\n\
 \n\
@@ -1926,20 +1933,24 @@ fields are set to their default values.\
   return retval;
 }
 
 DEFUN (lasterr, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{msg}, @var{msgid}] =} lasterr ()\n\
 @deftypefnx {Built-in Function} {} lasterr (@var{msg})\n\
 @deftypefnx {Built-in Function} {} lasterr (@var{msg}, @var{msgid})\n\
-Query or set the last error message.  When called without input arguments,\n\
-return the last error message and message identifier.  With one\n\
-argument, set the last error message to @var{msg}.  With two arguments,\n\
-also set the last message identifier.\n\
+Query or set the last error message.\n\
+\n\
+When called without input arguments, return the last error message and\n\
+message identifier.\n\
+\n\
+With one argument, set the last error message to @var{msg}.\n\
+\n\
+With two arguments, also set the last message identifier.\n\
 @seealso{lasterror, error, lastwarn}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   unwind_protect frame;
 
   frame.protect_var (error_state);
@@ -1977,20 +1988,24 @@ also set the last message identifier.\n\
   return retval;
 }
 
 DEFUN (lastwarn, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{msg}, @var{msgid}] =} lastwarn ()\n\
 @deftypefnx {Built-in Function} {} lastwarn (@var{msg})\n\
 @deftypefnx {Built-in Function} {} lastwarn (@var{msg}, @var{msgid})\n\
-Query or set the last warning message.  When called without input arguments,\n\
-return the last warning message and message identifier.  With one\n\
-argument, set the last warning message to @var{msg}.  With two arguments,\n\
-also set the last message identifier.\n\
+Query or set the last warning message.\n\
+\n\
+When called without input arguments, return the last warning message and\n\
+message identifier.\n\
+\n\
+With one argument, set the last warning message to @var{msg}.\n\
+\n\
+With two arguments, also set the last message identifier.\n\
 @seealso{warning, lasterror, lasterr}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   if (argc < 4)
@@ -2019,16 +2034,17 @@ also set the last message identifier.\n\
         error ("lastwarn: all arguments must be strings");
     }
   else
     print_usage ();
 
   return retval;
 }
 
+/* FIXME: Deprecated in 4.0 and scheduled for removal in 4.4 */
 DEFUN (__usage__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} usage (@var{msg})\n\
 Print the message @var{msg}, prefixed by the string @samp{usage: }, and\n\
 set Octave's internal error state such that control will return to the\n\
 top level without evaluating any more commands.  This is useful for\n\
 aborting from functions.\n\
 \n\
@@ -2062,52 +2078,53 @@ DEFUN (beep_on_error, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} beep_on_error ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} beep_on_error (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} beep_on_error (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave will try\n\
 to ring the terminal bell before printing an error message.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (beep_on_error);
 }
 
 DEFUN (debug_on_error, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} debug_on_error ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} debug_on_error (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} debug_on_error (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave will try\n\
-to enter the debugger when an error is encountered.  This will also\n\
-inhibit printing of the normal traceback message (you will only see\n\
-the top-level error message).\n\
+to enter the debugger when an error is encountered.\n\
+\n\
+This will also inhibit printing of the normal traceback message (you will\n\
+only see the top-level error message).\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{debug_on_warning, debug_on_interrupt}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (debug_on_error);
 }
 
 DEFUN (debug_on_warning, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} debug_on_warning ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} debug_on_warning (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} debug_on_warning (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave will try\n\
 to enter the debugger when a warning is encountered.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{debug_on_error, debug_on_interrupt}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (debug_on_warning);
 }
 
 std::string
diff --git a/libinterp/corefcn/fft2.cc b/libinterp/corefcn/fft2.cc
--- a/libinterp/corefcn/fft2.cc
+++ b/libinterp/corefcn/fft2.cc
@@ -169,45 +169,43 @@ do_fft2 (const octave_value_list &args, 
 
 DEFUN (fft2, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} fft2 (@var{A})\n\
 @deftypefnx {Built-in Function} {} fft2 (@var{A}, @var{m}, @var{n})\n\
 Compute the two-dimensional discrete Fourier transform of @var{A} using\n\
 a Fast Fourier Transform (FFT) algorithm.\n\
 \n\
-The optional arguments @var{m} and @var{n} may be used specify the\n\
-number of rows and columns of @var{A} to use.  If either of these is\n\
-larger than the size of @var{A}, @var{A} is resized and padded with\n\
-zeros.\n\
+The optional arguments @var{m} and @var{n} may be used specify the number of\n\
+rows and columns of @var{A} to use.  If either of these is larger than the\n\
+size of @var{A}, @var{A} is resized and padded with zeros.\n\
 \n\
 If @var{A} is a multi-dimensional matrix, each two-dimensional sub-matrix\n\
 of @var{A} is treated separately.\n\
-@seealso {ifft2, fft, fftn, fftw}\n\
+@seealso{ifft2, fft, fftn, fftw}\n\
 @end deftypefn")
 {
   return do_fft2 (args, "fft2", 0);
 }
 
 
 DEFUN (ifft2, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} ifft2 (@var{A})\n\
 @deftypefnx {Built-in Function} {} ifft2 (@var{A}, @var{m}, @var{n})\n\
 Compute the inverse two-dimensional discrete Fourier transform of @var{A}\n\
 using a Fast Fourier Transform (FFT) algorithm.\n\
 \n\
-The optional arguments @var{m} and @var{n} may be used specify the\n\
-number of rows and columns of @var{A} to use.  If either of these is\n\
-larger than the size of @var{A}, @var{A} is resized and padded with\n\
-zeros.\n\
+The optional arguments @var{m} and @var{n} may be used specify the number of\n\
+rows and columns of @var{A} to use.  If either of these is larger than the\n\
+size of @var{A}, @var{A} is resized and padded with zeros.\n\
 \n\
 If @var{A} is a multi-dimensional matrix, each two-dimensional sub-matrix\n\
 of @var{A} is treated separately\n\
-@seealso {fft2, ifft, ifftn, fftw}\n\
+@seealso{fft2, ifft, ifftn, fftw}\n\
 @end deftypefn")
 {
   return do_fft2 (args, "ifft2", 1);
 }
 
 /*
 %% Author: David Billinghurst (David.Billinghurst@riotinto.com.au)
 %%         Comalco Research and Technology
diff --git a/libinterp/corefcn/fftn.cc b/libinterp/corefcn/fftn.cc
--- a/libinterp/corefcn/fftn.cc
+++ b/libinterp/corefcn/fftn.cc
@@ -152,38 +152,38 @@ do_fftn (const octave_value_list &args, 
 
 DEFUN (fftn, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} fftn (@var{A})\n\
 @deftypefnx {Built-in Function} {} fftn (@var{A}, @var{size})\n\
 Compute the N-dimensional discrete Fourier transform of @var{A} using\n\
 a Fast Fourier Transform (FFT) algorithm.\n\
 \n\
-The optional vector argument @var{size} may be used specify the\n\
-dimensions of the array to be used.  If an element of @var{size} is\n\
-smaller than the corresponding dimension of @var{A}, then the dimension of\n\
-@var{A} is truncated prior to performing the FFT@.  Otherwise, if an element\n\
-of @var{size} is larger than the corresponding dimension then @var{A}\n\
-is resized and padded with zeros.\n\
+The optional vector argument @var{size} may be used specify the dimensions\n\
+of the array to be used.  If an element of @var{size} is smaller than the\n\
+corresponding dimension of @var{A}, then the dimension of @var{A} is\n\
+truncated prior to performing the FFT@.  Otherwise, if an element of\n\
+@var{size} is larger than the corresponding dimension then @var{A} is\n\
+resized and padded with zeros.\n\
 @seealso{ifftn, fft, fft2, fftw}\n\
 @end deftypefn")
 {
   return do_fftn (args, "fftn", 0);
 }
 
 DEFUN (ifftn, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} ifftn (@var{A})\n\
 @deftypefnx {Built-in Function} {} ifftn (@var{A}, @var{size})\n\
 Compute the inverse N-dimensional discrete Fourier transform of @var{A}\n\
 using a Fast Fourier Transform (FFT) algorithm.\n\
 \n\
-The optional vector argument @var{size} may be used specify the\n\
-dimensions of the array to be used.  If an element of @var{size} is\n\
-smaller than the corresponding dimension of @var{A}, then the dimension of\n\
-@var{A} is truncated prior to performing the inverse FFT@.  Otherwise, if an\n\
-element of @var{size} is larger than the corresponding dimension then @var{A}\n\
-is resized and padded with zeros.\n\
+The optional vector argument @var{size} may be used specify the dimensions\n\
+of the array to be used.  If an element of @var{size} is smaller than the\n\
+corresponding dimension of @var{A}, then the dimension of @var{A} is\n\
+truncated prior to performing the inverse FFT@.  Otherwise, if an element of\n\
+@var{size} is larger than the corresponding dimension then @var{A} is\n\
+resized and padded with zeros.\n\
 @seealso{fftn, ifft, ifft2, fftw}\n\
 @end deftypefn")
 {
   return do_fftn (args, "ifftn", 1);
 }
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -337,18 +337,20 @@ always a good idea to flush the standard
   return retval;
 }
 
 DEFUN (fgetl, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{str} =} fgetl (@var{fid})\n\
 @deftypefnx {Built-in Function} {@var{str} =} fgetl (@var{fid}, @var{len})\n\
 Read characters from a file, stopping after a newline, or EOF,\n\
-or @var{len} characters have been read.  The characters read, excluding\n\
-the possible trailing newline, are returned as a string.\n\
+or @var{len} characters have been read.\n\
+\n\
+The characters read, excluding the possible trailing newline, are returned\n\
+as a string.\n\
 \n\
 If @var{len} is omitted, @code{fgetl} reads until the next newline character.\n\
 \n\
 If there are no more characters to read, @code{fgetl} returns @minus{}1.\n\
 \n\
 To read a line and return the terminating newline see @code{fgets}.\n\
 @seealso{fgets, fscanf, fread, fopen}\n\
 @end deftypefn")
@@ -387,18 +389,20 @@ To read a line and return the terminatin
   return retval;
 }
 
 DEFUN (fgets, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{str} =} fgets (@var{fid})\n\
 @deftypefnx {Built-in Function} {@var{str} =} fgets (@var{fid}, @var{len})\n\
 Read characters from a file, stopping after a newline, or EOF,\n\
-or @var{len} characters have been read.  The characters read, including\n\
-the possible trailing newline, are returned as a string.\n\
+or @var{len} characters have been read.\n\
+\n\
+The characters read, including the possible trailing newline, are returned\n\
+as a string.\n\
 \n\
 If @var{len} is omitted, @code{fgets} reads until the next newline character.\n\
 \n\
 If there are no more characters to read, @code{fgets} returns @minus{}1.\n\
 \n\
 To read a line and discard the terminating newline see @code{fgetl}.\n\
 @seealso{fputs, fgetl, fscanf, fread, fopen}\n\
 @end deftypefn")
@@ -586,16 +590,18 @@ do_stream_open (const octave_value& tc_n
 DEFUN (fopen, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{fid} =} fopen (@var{name})\n\
 @deftypefnx {Built-in Function} {@var{fid} =} fopen (@var{name}, @var{mode})\n\
 @deftypefnx {Built-in Function} {@var{fid} =} fopen (@var{name}, @var{mode}, @var{arch})\n\
 @deftypefnx {Built-in Function} {[@var{fid}, @var{msg}] =} fopen (@dots{})\n\
 @deftypefnx {Built-in Function} {@var{fid_list} =} fopen (\"all\")\n\
 @deftypefnx {Built-in Function} {[@var{file}, @var{mode}, @var{arch}] =} fopen (@var{fid})\n\
+Open a file for low-level I/O or query open files and file descriptors.\n\
+\n\
 The first form of the @code{fopen} function opens the named file with\n\
 the specified mode (read-write, read-only, etc.) and architecture\n\
 interpretation (IEEE big endian, IEEE little endian, etc.), and returns\n\
 an integer value that may be used to refer to the file later.  If an\n\
 error occurs, @var{fid} is set to @minus{}1 and @var{msg} contains the\n\
 corresponding system error message.  The @var{mode} is a one or two\n\
 character string that specifies whether the file is to be opened for\n\
 reading, writing, or both.\n\
@@ -742,17 +748,19 @@ however, conversions are currently only 
 
   return retval;
 }
 
 DEFUN (freport, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} freport ()\n\
 Print a list of which files have been opened, and whether they are open\n\
-for reading, writing, or both.  For example:\n\
+for reading, writing, or both.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 freport ()\n\
 \n\
      @print{}  number  mode  arch       name\n\
      @print{}  ------  ----  ----       ----\n\
      @print{}     0     r    ieee-le    stdin\n\
@@ -1058,20 +1066,21 @@ Return a non-negative number on success 
 
   return retval;
 }
 
 DEFUN (sprintf, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} sprintf (@var{template}, @dots{})\n\
 This is like @code{printf}, except that the output is returned as a\n\
-string.  Unlike the C library function, which requires you to provide a\n\
-suitably sized string as an argument, Octave's @code{sprintf} function\n\
-returns the string, automatically sized to hold all of the items\n\
-converted.\n\
+string.\n\
+\n\
+Unlike the C library function, which requires you to provide a suitably\n\
+sized string as an argument, Octave's @code{sprintf} function returns the\n\
+string, automatically sized to hold all of the items converted.\n\
 \n\
 Implementation Note: For compatibility with @sc{matlab}, escape sequences in\n\
 the template string (e.g., @qcode{\"@xbackslashchar{}n\"} => newline) are\n\
 expanded even when the template string is defined with single quotes.\n\
 @seealso{printf, fprintf, sscanf}\n\
 @end deftypefn")
 {
   static std::string who = "sprintf";
@@ -1154,18 +1163,17 @@ column is padded with zeros.\n\
 Read up to @code{@var{nr} * @var{nc}} elements, returning a matrix with\n\
 @var{nr} rows.  If the number of elements read is not an exact multiple\n\
 of @var{nr}, the last column is padded with zeros.\n\
 @end table\n\
 \n\
 @noindent\n\
 If @var{size} is omitted, a value of @code{Inf} is assumed.\n\
 \n\
-A string is returned if @var{template} specifies only character\n\
-conversions.\n\
+A string is returned if @var{template} specifies only character conversions.\n\
 \n\
 The number of items successfully read is returned in @var{count}.\n\
 \n\
 If an error occurs, @var{errmsg} contains a system-dependent error message.\n\
 \n\
 In the second form, read from @var{fid} according to @var{template},\n\
 with each conversion specifier in @var{template} corresponding to a\n\
 single scalar return value.  This form is more ``C-like'', and also\n\
@@ -1258,20 +1266,21 @@ get_sscanf_data (const octave_value& val
   return retval;
 }
 
 DEFUN (sscanf, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{val}, @var{count}, @var{errmsg}, @var{pos}] =} sscanf (@var{string}, @var{template}, @var{size})\n\
 @deftypefnx {Built-in Function} {[@var{v1}, @var{v2}, @dots{}, @var{count}, @var{errmsg}] =} sscanf (@var{string}, @var{template}, \"C\")\n\
 This is like @code{fscanf}, except that the characters are taken from the\n\
-string @var{string} instead of from a stream.  Reaching the end of the\n\
-string is treated as an end-of-file condition.  In addition to the values\n\
-returned by @code{fscanf}, the index of the next character to be read\n\
-is returned in @var{pos}.\n\
+string @var{string} instead of from a stream.\n\
+\n\
+Reaching the end of the string is treated as an end-of-file condition.  In\n\
+addition to the values returned by @code{fscanf}, the index of the next\n\
+character to be read is returned in @var{pos}.\n\
 @seealso{fscanf, scanf, sprintf}\n\
 @end deftypefn")
 {
   static std::string who = "sscanf";
 
   octave_value_list retval;
 
   int nargin = args.length ();
@@ -1800,24 +1809,24 @@ DEFUNX ("ferror", Fferror, args, ,
 @deftypefn  {Built-in Function} {@var{msg} =} ferror (@var{fid})\n\
 @deftypefnx {Built-in Function} {[@var{msg}, @var{err}] =} ferror (@var{fid})\n\
 @deftypefnx {Built-in Function} {[@var{dots}] =} ferror (@var{fid}, \"clear\")\n\
 Query the error status of the stream specified by file descriptor @var{fid}\n\
 \n\
 If an error condition exists then return a string @var{msg} describing the\n\
 error.  Otherwise, return an empty string @qcode{\"\"}.\n\
 \n\
+The second input @qcode{\"clear\"} is optional.  If supplied, the error\n\
+state on the stream will be cleared.\n\
+\n\
 The optional second output is a numeric indication of the error status.\n\
 @var{err} is 1 if an error condition has been encountered and 0 otherwise.\n\
 \n\
 Note that @code{ferror} indicates if an error has already occurred, not\n\
 whether the next operation will result in an error condition.\n\
-\n\
-The second input @qcode{\"clear\"} is optional.  If supplied, the error\n\
-state on the stream will be cleared.\n\
 @seealso{fclear, fopen}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
@@ -1850,31 +1859,34 @@ state on the stream will be cleared.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUNX ("popen", Fpopen, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{fid} =} popen (@var{command}, @var{mode})\n\
-Start a process and create a pipe.  The name of the command to run is\n\
-given by @var{command}.  The file identifier corresponding to the input\n\
-or output stream of the process is returned in @var{fid}.  The argument\n\
+Start a process and create a pipe.\n\
+\n\
+The name of the command to run is given by @var{command}.  The argument\n\
 @var{mode} may be\n\
 \n\
 @table @code\n\
 @item @qcode{\"r\"}\n\
 The pipe will be connected to the standard output of the process, and\n\
 open for reading.\n\
 \n\
 @item @qcode{\"w\"}\n\
 The pipe will be connected to the standard input of the process, and\n\
 open for writing.\n\
 @end table\n\
 \n\
+The file identifier corresponding to the input or output stream of the\n\
+process is returned in @var{fid}.\n\
+\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 fid = popen (\"ls -ltr / | tail -3\", \"r\");\n\
 while (ischar (s = fgets (fid)))\n\
   fputs (stdout, s);\n\
 endwhile\n\
@@ -1952,16 +1964,17 @@ The function @code{fclose} may also be u
 DEFUN (tempname, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{fname} =} tempname ()\n\
 @deftypefnx {Built-in Function} {@var{fname} =} tempname (@var{dir})\n\
 @deftypefnx {Built-in Function} {@var{fname} =} tempname (@var{dir}, @var{prefix})\n\
 Return a unique temporary file name as a string.\n\
 \n\
 If @var{prefix} is omitted, a value of @qcode{\"oct-\"} is used.\n\
+\n\
 If @var{dir} is also omitted, the default directory for temporary files\n\
 (@code{P_tmpdir}) is used.  If @var{dir} is provided, it must exist,\n\
 otherwise the default directory for temporary files is used.\n\
 \n\
 Programming Note: Because the named file is not opened by @code{tempname},\n\
 it is possible, though relatively unlikely, that it will not be available\n\
 by the time your program attempts to open it.  If this is a concern,\n\
 see @code{tmpfile}.\n\
@@ -2217,18 +2230,19 @@ convert (int x, int ibase, int obase)
   return retval;
 }
 
 DEFUNX ("umask", Fumask, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} umask (@var{mask})\n\
 Set the permission mask for file creation.\n\
 \n\
-The parameter @var{mask} is an integer, interpreted as an octal number.  If\n\
-successful, returns the previous value of the mask (as an integer to be\n\
+The parameter @var{mask} is an integer, interpreted as an octal number.\n\
+\n\
+If successful, returns the previous value of the mask (as an integer to be\n\
 interpreted as an octal number); otherwise an error message is printed.\n\
 @seealso{fopen, mkdir}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int status = 0;
 
diff --git a/libinterp/corefcn/filter.cc b/libinterp/corefcn/filter.cc
--- a/libinterp/corefcn/filter.cc
+++ b/libinterp/corefcn/filter.cc
@@ -286,22 +286,24 @@ filter (MArray<T>& b, MArray<T>& a, MArr
 
   MArray<T> si (si_dims, T (0.0));
 
   return filter (b, a, x, si, dim);
 }
 
 DEFUN (filter, args, nargout,
        "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {y =} filter (@var{b}, @var{a}, @var{x})\n\
+@deftypefn  {Built-in Function} {@var{y} =} filter (@var{b}, @var{a}, @var{x})\n\
 @deftypefnx {Built-in Function} {[@var{y}, @var{sf}] =} filter (@var{b}, @var{a}, @var{x}, @var{si})\n\
 @deftypefnx {Built-in Function} {[@var{y}, @var{sf}] =} filter (@var{b}, @var{a}, @var{x}, [], @var{dim})\n\
 @deftypefnx {Built-in Function} {[@var{y}, @var{sf}] =} filter (@var{b}, @var{a}, @var{x}, @var{si}, @var{dim})\n\
-Return the solution to the following linear, time-invariant difference\n\
-equation:\n\
+Apply a 1-D digital filter to the data @var{x}.\n\
+\n\
+@code{filter} returns the solution to the following linear, time-invariant\n\
+difference equation:\n\
 @tex\n\
 $$\n\
 \\sum_{k=0}^N a_{k+1} y_{n-k} = \\sum_{k=0}^M b_{k+1} x_{n-k}, \\qquad\n\
  1 \\le n \\le P\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 @c Set example in small font to prevent overfull line\n\
@@ -358,19 +360,19 @@ where\n\
 \n\
 If the fourth argument @var{si} is provided, it is taken as the\n\
 initial state of the system and the final state is returned as\n\
 @var{sf}.  The state vector is a column vector whose length is\n\
 equal to the length of the longest coefficient vector minus one.\n\
 If @var{si} is not supplied, the initial state vector is set to all\n\
 zeros.\n\
 \n\
-In terms of the Z Transform, y is the result of passing the discrete-\n\
-time signal x through a system characterized by the following rational\n\
-system function:\n\
+In terms of the Z Transform, @var{y} is the result of passing the\n\
+discrete-time signal @var{x} through a system characterized by the following\n\
+rational system function:\n\
 @tex\n\
 $$\n\
 H(z) = {\\displaystyle\\sum_{k=0}^M d_{k+1} z^{-k}\n\
         \\over 1 + \\displaystyle\\sum_{k+1}^N c_{k+1} z^{-k}}\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
diff --git a/libinterp/corefcn/find.cc b/libinterp/corefcn/find.cc
--- a/libinterp/corefcn/find.cc
+++ b/libinterp/corefcn/find.cc
@@ -328,27 +328,37 @@ find_nonzero_elem_idx (const PermMatrix&
 DEFUN (find, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{idx} =} find (@var{x})\n\
 @deftypefnx {Built-in Function} {@var{idx} =} find (@var{x}, @var{n})\n\
 @deftypefnx {Built-in Function} {@var{idx} =} find (@var{x}, @var{n}, @var{direction})\n\
 @deftypefnx {Built-in Function} {[i, j] =} find (@dots{})\n\
 @deftypefnx {Built-in Function} {[i, j, v] =} find (@dots{})\n\
 Return a vector of indices of nonzero elements of a matrix, as a row if\n\
-@var{x} is a row vector or as a column otherwise.  To obtain a single index\n\
-for each matrix element, Octave pretends that the columns of a matrix form\n\
-one long vector (like Fortran arrays are stored).  For example:\n\
+@var{x} is a row vector or as a column otherwise.\n\
+\n\
+To obtain a single index for each matrix element, Octave pretends that the\n\
+columns of a matrix form one long vector (like Fortran arrays are stored). \n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 find (eye (2))\n\
   @result{} [ 1; 4 ]\n\
 @end group\n\
 @end example\n\
 \n\
+If two inputs are given, @var{n} indicates the maximum number of elements to\n\
+find from the beginning of the matrix or vector.\n\
+\n\
+If three inputs are given, @var{direction} should be one of\n\
+@qcode{\"first\"} or @qcode{\"last\"}, requesting only the first or last\n\
+@var{n} indices, respectively.  However, the indices are always returned in\n\
+ascending order.\n\
+\n\
 If two outputs are requested, @code{find} returns the row and column\n\
 indices of nonzero elements of a matrix.  For example:\n\
 \n\
 @example\n\
 @group\n\
 [i, j] = find (2 * eye (2))\n\
     @result{} i = [ 1; 2 ]\n\
     @result{} j = [ 1; 2 ]\n\
@@ -362,24 +372,16 @@ containing the nonzero values.  For exam
 @group\n\
 [i, j, v] = find (3 * eye (2))\n\
        @result{} i = [ 1; 2 ]\n\
        @result{} j = [ 1; 2 ]\n\
        @result{} v = [ 3; 3 ]\n\
 @end group\n\
 @end example\n\
 \n\
-If two inputs are given, @var{n} indicates the maximum number of\n\
-elements to find from the beginning of the matrix or vector.\n\
-\n\
-If three inputs are given, @var{direction} should be one of\n\
-@qcode{\"first\"} or @qcode{\"last\"}, requesting only the first or last\n\
-@var{n} indices, respectively.  However, the indices are always returned in\n\
-ascending order.\n\
-\n\
 Note that this function is particularly useful for sparse matrices, as\n\
 it extracts the nonzero elements as vectors, which can then be used to\n\
 create the original matrix.  For example:\n\
 \n\
 @example\n\
 @group\n\
 sz = size (a);\n\
 [i, j, v] = find (a);\n\
diff --git a/libinterp/corefcn/gammainc.cc b/libinterp/corefcn/gammainc.cc
--- a/libinterp/corefcn/gammainc.cc
+++ b/libinterp/corefcn/gammainc.cc
@@ -32,17 +32,19 @@ along with Octave; see the file COPYING.
 #include "oct-obj.h"
 #include "utils.h"
 
 DEFUN (gammainc, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Mapping Function} {} gammainc (@var{x}, @var{a})\n\
 @deftypefnx {Mapping Function} {} gammainc (@var{x}, @var{a}, \"lower\")\n\
 @deftypefnx {Mapping Function} {} gammainc (@var{x}, @var{a}, \"upper\")\n\
-Compute the normalized incomplete gamma function,\n\
+Compute the normalized incomplete gamma function.\n\
+\n\
+This is defined as\n\
 @tex\n\
 $$\n\
  \\gamma (x, a) = {1 \\over {\\Gamma (a)}}\\displaystyle{\\int_0^x t^{a-1} e^{-t} dt}\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
diff --git a/libinterp/corefcn/gcd.cc b/libinterp/corefcn/gcd.cc
--- a/libinterp/corefcn/gcd.cc
+++ b/libinterp/corefcn/gcd.cc
@@ -443,17 +443,17 @@ DEFUN (gcd, args, nargout,
 @deftypefnx {Built-in Function} {[@var{g}, @var{v1}, @dots{}] =} gcd (@var{a1}, @var{a2}, @dots{})\n\
 Compute the greatest common divisor of @var{a1}, @var{a2}, @dots{}.\n\
 \n\
 If more than one argument is given then all arguments must be the same size\n\
 or scalar.  In this case the greatest common divisor is calculated for each\n\
 element individually.  All elements must be ordinary or Gaussian (complex)\n\
 integers.  Note that for Gaussian integers, the gcd is only unique up to a\n\
 phase factor (multiplication by 1, -1, i, or -i), so an arbitrary greatest\n\
-common divisor amongst four possible is returned.\n\
+common divisor among the four possible is returned.\n\
 \n\
 Optional return arguments @var{v1}, @dots{}, contain integer vectors such\n\
 that,\n\
 \n\
 @tex\n\
 $g = v_1 a_1 + v_2 a_2 + \\cdots$\n\
 @end tex\n\
 @ifnottex\n\
diff --git a/libinterp/corefcn/getgrent.cc b/libinterp/corefcn/getgrent.cc
--- a/libinterp/corefcn/getgrent.cc
+++ b/libinterp/corefcn/getgrent.cc
@@ -61,17 +61,19 @@ mk_gr_map (const octave_group& gr)
 
   return retval;
 }
 
 DEFUN (getgrent, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{grp_struct} =} getgrent ()\n\
 Return an entry from the group database, opening it if necessary.\n\
+\n\
 Once the end of data has been reached, @code{getgrent} returns 0.\n\
+@seealso{setgrent, endgrent}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = 0;
 
   int nargin = args.length ();
@@ -88,18 +90,20 @@ Once the end of data has been reached, @
 
   return retval;
 }
 
 DEFUN (getgrgid, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{grp_struct} =} getgrgid (@var{gid}).\n\
 Return the first entry from the group database with the group ID\n\
-@var{gid}.  If the group ID does not exist in the database,\n\
-@code{getgrgid} returns 0.\n\
+@var{gid}.\n\
+\n\
+If the group ID does not exist in the database, @code{getgrgid} returns 0.\n\
+@seealso{getgrnam}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = 0;
 
   int nargin = args.length ();
@@ -128,18 +132,20 @@ Return the first entry from the group da
 
   return retval;
 }
 
 DEFUN (getgrnam, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{grp_struct} =} getgrnam (@var{name})\n\
 Return the first entry from the group database with the group name\n\
-@var{name}.  If the group name does not exist in the database,\n\
-@code{getgrnam} returns 0.\n\
+@var{name}.\n\
+\n\
+If the group name does not exist in the database, @code{getgrnam} returns 0.\n\
+@seealso{getgrgid}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = 0;
 
   int nargin = args.length ();
@@ -161,16 +167,17 @@ Return the first entry from the group da
 
   return retval;
 }
 
 DEFUN (setgrent, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} setgrent ()\n\
 Return the internal pointer to the beginning of the group database.\n\
+@seealso{getgrent, endgrent}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1.0;
 
   int nargin = args.length ();
@@ -187,16 +194,17 @@ Return the internal pointer to the begin
 
   return retval;
 }
 
 DEFUN (endgrent, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} endgrent ()\n\
 Close the group database.\n\
+@seealso{getgrent, setgrent}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1.0;
 
   int nargin = args.length ();
diff --git a/libinterp/corefcn/getpwent.cc b/libinterp/corefcn/getpwent.cc
--- a/libinterp/corefcn/getpwent.cc
+++ b/libinterp/corefcn/getpwent.cc
@@ -64,18 +64,20 @@ mk_pw_map (const octave_passwd& pw)
 
   return retval;
 }
 
 DEFUN (getpwent, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{pw_struct} =} getpwent ()\n\
 Return a structure containing an entry from the password database,\n\
-opening it if necessary.  Once the end of the data has been reached,\n\
-@code{getpwent} returns 0.\n\
+opening it if necessary.\n\
+\n\
+Once the end of the data has been reached, @code{getpwent} returns 0.\n\
+@seealso{setpwent, endpwent}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = 0;
 
   int nargin = args.length ();
@@ -92,18 +94,20 @@ opening it if necessary.  Once the end o
 
   return retval;
 }
 
 DEFUN (getpwuid, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{pw_struct} =} getpwuid (@var{uid}).\n\
 Return a structure containing the first entry from the password database\n\
-with the user ID @var{uid}.  If the user ID does not exist in the\n\
-database, @code{getpwuid} returns 0.\n\
+with the user ID @var{uid}.\n\
+\n\
+If the user ID does not exist in the database, @code{getpwuid} returns 0.\n\
+@seealso{getpwnam}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = 0;
 
   int nargin = args.length ();
@@ -132,18 +136,20 @@ database, @code{getpwuid} returns 0.\n\
 
   return retval;
 }
 
 DEFUN (getpwnam, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{pw_struct} =} getpwnam (@var{name})\n\
 Return a structure containing the first entry from the password database\n\
-with the user name @var{name}.  If the user name does not exist in the\n\
-database, @code{getpwname} returns 0.\n\
+with the user name @var{name}.\n\
+\n\
+If the user name does not exist in the database, @code{getpwname} returns 0.\n\
+@seealso{getpwuid}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = 0.0;
 
   int nargin = args.length ();
@@ -165,16 +171,17 @@ database, @code{getpwname} returns 0.\n\
 
   return retval;
 }
 
 DEFUN (setpwent, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} setpwent ()\n\
 Return the internal pointer to the beginning of the password database.\n\
+@seealso{getpwent, endpwent}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1.0;
 
   int nargin = args.length ();
@@ -191,16 +198,17 @@ Return the internal pointer to the begin
 
   return retval;
 }
 
 DEFUN (endpwent, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} endpwent ()\n\
 Close the password database.\n\
+@seealso{getpwent, setpwent}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1.0;
 
   int nargin = args.length ();
diff --git a/libinterp/corefcn/getrusage.cc b/libinterp/corefcn/getrusage.cc
--- a/libinterp/corefcn/getrusage.cc
+++ b/libinterp/corefcn/getrusage.cc
@@ -58,20 +58,21 @@ along with Octave; see the file COPYING.
 #endif
 
 // System resource functions.
 
 DEFUN (getrusage, , ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} getrusage ()\n\
 Return a structure containing a number of statistics about the current\n\
-Octave process.  Not all fields are available on all systems.  If it is\n\
-not possible to get CPU time statistics, the CPU time slots are set to\n\
-zero.  Other missing data are replaced by NaN@.  The list of possible\n\
-fields is:\n\
+Octave process.\n\
+\n\
+Not all fields are available on all systems.  If it is not possible to get\n\
+CPU time statistics, the CPU time slots are set to zero.  Other missing data\n\
+are replaced by NaN@.  The list of possible fields is:\n\
 \n\
 @table @code\n\
 @item idrss\n\
 Unshared data size.\n\
 \n\
 @item inblock\n\
 Number of block input operations.\n\
 \n\
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -9762,19 +9762,19 @@ root_figure::init_factory_properties (vo
 
 // ---------------------------------------------------------------------
 
 DEFUN (ishandle, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ishandle (@var{h})\n\
 Return true if @var{h} is a graphics handle and false otherwise.\n\
 \n\
-@var{h} may also be a matrix of handles in which case a logical\n\
-array is returned that is true where the elements of @var{h} are\n\
-graphics handles and false where they are not.\n\
+@var{h} may also be a matrix of handles in which case a logical array is\n\
+returned that is true where the elements of @var{h} are graphics handles and\n\
+false where they are not.\n\
 @seealso{isaxes, isfigure}\n\
 @end deftypefn")
 {
   gh_manager::auto_lock guard;
 
   octave_value retval;
 
   if (args.length () == 1)
@@ -10003,16 +10003,17 @@ DEFUN (set, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} set (@var{h}, @var{property}, @var{value}, @dots{})\n\
 @deftypefnx {Built-in Function} {} set (@var{h}, @var{properties}, @var{values})\n\
 @deftypefnx {Built-in Function} {} set (@var{h}, @var{pv})\n\
 @deftypefnx {Built-in Function} {@var{value_list} =} set (@var{h}, @var{property})\n\
 @deftypefnx {Built-in Function} {@var{all_value_list} =} set (@var{h})\n\
 Set named property values for the graphics handle (or vector of graphics\n\
 handles) @var{h}.\n\
+\n\
 There are three ways to give the property names and values:\n\
 \n\
 @itemize\n\
 @item as a comma separated list of @var{property}, @var{value} pairs\n\
 \n\
 Here, each @var{property} is a string containing the property name, each\n\
 @var{value} is a value of the appropriate type for the property.\n\
 \n\
@@ -10195,19 +10196,22 @@ get_graphics_object_type (double val)
   return retval;
 }
 
 DEFUN (get, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} get (@var{h})\n\
 @deftypefnx {Built-in Function} {@var{val} =} get (@var{h}, @var{p})\n\
 Return the value of the named property @var{p} from the graphics handle\n\
-@var{h}.  If @var{p} is omitted, return the complete property list for\n\
-@var{h}.  If @var{h} is a vector, return a cell array including the property\n\
-values or lists respectively.\n\
+@var{h}.\n\
+\n\
+If @var{p} is omitted, return the complete property list for @var{h}.\n\
+\n\
+If @var{h} is a vector, return a cell array including the property values or\n\
+lists respectively.\n\
 @seealso{set}\n\
 @end deftypefn")
 {
   gh_manager::auto_lock guard;
 
   octave_value retval;
 
   Cell vals;
@@ -10644,18 +10648,19 @@ calc_dimensions (const graphics_object& 
     }
 
   return nd;
 }
 
 DEFUN (__calc_dimensions__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __calc_dimensions__ (@var{axes})\n\
-Internal function.  Determine the number of dimensions in a graphics\n\
-object, whether 2 or 3.\n\
+Internal function.\n\
+\n\
+Determine the number of dimensions in a graphics object, either 2 or 3.\n\
 @end deftypefn")
 {
   gh_manager::auto_lock guard;
 
   octave_value retval;
 
   int nargin = args.length ();
 
@@ -11158,22 +11163,26 @@ Return a cell array of the currently loa
   return octave_value (gtk_manager::loaded_toolkits_list ());
 }
 
 DEFUN (drawnow, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} drawnow ()\n\
 @deftypefnx {Built-in Function} {} drawnow (\"expose\")\n\
 @deftypefnx {Built-in Function} {} drawnow (@var{term}, @var{file}, @var{mono}, @var{debug_file})\n\
-Update figure windows and their children.  The event queue is flushed and\n\
-any callbacks generated are executed.  With the optional argument\n\
-@qcode{\"expose\"}, only graphic objects are updated and no other events or\n\
-callbacks are processed.\n\
+Update figure windows and their children.\n\
+\n\
+The event queue is flushed and any callbacks generated are executed.\n\
+\n\
+With the optional argument @qcode{\"expose\"}, only graphic objects are\n\
+updated and no other events or callbacks are processed.\n\
+\n\
 The third calling form of @code{drawnow} is for debugging and is\n\
 undocumented.\n\
+@seealso{refresh}\n\
 @end deftypefn")
 {
   static int drawnow_executing = 0;
 
   octave_value retval;
 
   gh_manager::lock ();
 
@@ -11346,19 +11355,20 @@ undocumented.\n\
 
   return retval;
 }
 
 DEFUN (addlistener, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} addlistener (@var{h}, @var{prop}, @var{fcn})\n\
 Register @var{fcn} as listener for the property @var{prop} of the graphics\n\
-object @var{h}.  Property listeners are executed (in order of registration)\n\
-when the property is set.  The new value is already available when the\n\
-listeners are executed.\n\
+object @var{h}.\n\
+\n\
+Property listeners are executed (in order of registration) when the property\n\
+is set.  The new value is already available when the listeners are executed.\n\
 \n\
 @var{prop} must be a string naming a valid property in @var{h}.\n\
 \n\
 @var{fcn} can be a function handle, a string or a cell array whose first\n\
 element is a function handle.  If @var{fcn} is a function handle, the\n\
 corresponding function should accept at least 2 arguments, that will be\n\
 set to the object handle and the empty matrix respectively.  If @var{fcn}\n\
 is a string, it must be any valid octave expression.  If @var{fcn} is a cell\n\
@@ -11425,19 +11435,20 @@ addlistener (gcf, \"position\", @{@@my_l
 
   return retval;
 }
 
 DEFUN (dellistener, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} dellistener (@var{h}, @var{prop}, @var{fcn})\n\
 Remove the registration of @var{fcn} as a listener for the property\n\
-@var{prop} of the graphics object @var{h}.  The function @var{fcn} must\n\
-be the same variable (not just the same value), as was passed to the\n\
-original call to @code{addlistener}.\n\
+@var{prop} of the graphics object @var{h}.\n\
+\n\
+The function @var{fcn} must be the same variable (not just the same value),\n\
+as was passed to the original call to @code{addlistener}.\n\
 \n\
 If @var{fcn} is not defined then all listener functions of @var{prop}\n\
 are removed.\n\
 \n\
 Example:\n\
 \n\
 @example\n\
 @group\n\
@@ -11506,16 +11517,17 @@ dellistener (gcf, \"position\", c);\n\
   return retval;
 }
 
 DEFUN (addproperty, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} addproperty (@var{name}, @var{h}, @var{type})\n\
 @deftypefnx {Built-in Function} {} addproperty (@var{name}, @var{h}, @var{type}, @var{arg}, @dots{})\n\
 Create a new property named @var{name} in graphics object @var{h}.\n\
+\n\
 @var{type} determines the type of the property to create.  @var{args}\n\
 usually contains the default value of the property, but additional\n\
 arguments might be given, depending on the type of the property.\n\
 \n\
 The supported property types are:\n\
 \n\
 @table @code\n\
 @item string\n\
@@ -11800,20 +11812,20 @@ DEFUN (waitfor, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} waitfor (@var{h})\n\
 @deftypefnx {Built-in Function} {} waitfor (@var{h}, @var{prop})\n\
 @deftypefnx {Built-in Function} {} waitfor (@var{h}, @var{prop}, @var{value})\n\
 @deftypefnx {Built-in Function} {} waitfor (@dots{}, \"timeout\", @var{timeout})\n\
 Suspend the execution of the current program until a condition is\n\
 satisfied on the graphics handle @var{h}.\n\
 \n\
-While the program is suspended graphics events are still being processed\n\
-normally, allowing callbacks to modify the state of graphics objects.  This\n\
-function is reentrant and can be called from a callback, while another\n\
-@code{waitfor} call is pending at the top-level.\n\
+While the program is suspended graphics events are still processed normally,\n\
+allowing callbacks to modify the state of graphics objects.  This function\n\
+is reentrant and can be called from a callback, while another @code{waitfor}\n\
+call is pending at the top-level.\n\
 \n\
 In the first form, program execution is suspended until the graphics object\n\
 @var{h} is destroyed.  If the graphics handle is invalid, the function\n\
 returns immediately.\n\
 \n\
 In the second form, execution is suspended until the graphics object is\n\
 destroyed or the property named @var{prop} is modified.  If the graphics\n\
 handle is invalid or the property does not exist, the function returns\n\
diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -660,17 +660,17 @@ endparfor\n\
 @end deftypefn"),
 
   pair_type ("persistent",
   "-*- texinfo -*-\n\
 @deftypefn {Keyword} {} persistent @var{var}\n\
 Declare variables as persistent.  A variable that has been declared\n\
 persistent within a function will retain its contents in memory between\n\
 subsequent calls to the same function.  The difference between persistent\n\
-variables and global variables is that persistent variables are local in \n\
+variables and global variables is that persistent variables are local in\n\
 scope to a particular function and are not visible elsewhere.\n\
 @seealso{global}\n\
 @end deftypefn"),
 
   pair_type ("return",
   "-*- texinfo -*-\n\
 @deftypefn {Keyword} {} return\n\
 Return from a function.\n\
@@ -953,23 +953,24 @@ raw_help (const std::string& nm, bool& s
 
 DEFUN (built_in_docstrings_file, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} built_in_docstrings_file ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} built_in_docstrings_file (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} built_in_docstrings_file (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the name of the\n\
 file containing docstrings for built-in Octave functions.\n\
+\n\
 The default value is\n\
 @file{@var{octave-home}/share/octave/@var{version}/etc/built-in-docstrings},\n\
 in which @var{octave-home} is the root directory of the Octave installation,\n\
-and @var{version} is the Octave version number.\n\
-The default value may be overridden by the environment variable\n\
+and @var{version} is the Octave version number.  The default value may be\n\
+overridden by the environment variable\n\
 @w{@env{OCTAVE_BUILT_IN_DOCSTRINGS_FILE}}, or the command line argument\n\
-@samp{--built-in-docstrings-file FNAME}.\n\
+@option{--built-in-docstrings-file FNAME}.\n\
 \n\
 Note: This variable is only used when Octave is initializing itself.\n\
 Modifying it during a running session of Octave will have no effect.\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (built_in_docstrings_file);
 }
 
@@ -1079,16 +1080,17 @@ do_get_help_text (const std::string& nam
 
 DEFUN (get_help_text, args, , "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{text}, @var{format}] =} get_help_text (@var{name})\n\
 Return the raw help text of function @var{name}.\n\
 \n\
 The raw help text is returned in @var{text} and the format in @var{format}\n\
 The format is a string which is one of @qcode{\"texinfo\"},\n\
 @qcode{\"html\"}, or @qcode{\"plain text\"}.\n\
+@seealso{get_help_text_from_file}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 1)
     {
       const std::string name = args(0).string_value ();
 
@@ -1148,16 +1150,17 @@ do_get_help_text_from_file (const std::s
 DEFUN (get_help_text_from_file, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{text}, @var{format}] =} get_help_text_from_file (@var{fname})\n\
 Return the raw help text from the file @var{fname}.\n\
 \n\
 The raw help text is returned in @var{text} and the format in @var{format}\n\
 The format is a string which is one of @qcode{\"texinfo\"},\n\
 @qcode{\"html\"}, or @qcode{\"plain text\"}.\n\
+@seealso{get_help_text}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 1)
     {
       const std::string fname = args(0).string_value ();
 
@@ -1400,115 +1403,126 @@ Undocumented internal function.\n\
 }
 
 DEFUN (doc_cache_file, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} doc_cache_file ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} doc_cache_file (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} doc_cache_file (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the name of the\n\
-Octave documentation cache file.  A cache file significantly improves\n\
-the performance of the @code{lookfor} command.  The default value is \n\
+Octave documentation cache file.\n\
+\n\
+A cache file significantly improves the performance of the @code{lookfor}\n\
+command.  The default value is\n\
 @file{@var{octave-home}/share/octave/@var{version}/etc/doc-cache},\n\
 in which @var{octave-home} is the root directory of the Octave installation,\n\
 and @var{version} is the Octave version number.\n\
 The default value may be overridden by the environment variable\n\
 @w{@env{OCTAVE_DOC_CACHE_FILE}}, or the command line argument\n\
-@samp{--doc-cache-file FNAME}.\n\
+@option{--doc-cache-file FNAME}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{doc_cache_create, lookfor, info_program, doc, help, makeinfo_program}\n\
+@seealso{lookfor}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (doc_cache_file);
 }
 
 DEFUN (texi_macros_file, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} texi_macros_file ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} texi_macros_file (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} texi_macros_file (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the name of the\n\
 file containing Texinfo macros that are prepended to documentation strings\n\
-before they are passed to makeinfo.  The default value is \n\
+before they are passed to makeinfo.\n\
+\n\
+The default value is\n\
 @file{@var{octave-home}/share/octave/@var{version}/etc/macros.texi},\n\
 in which @var{octave-home} is the root directory of the Octave installation,\n\
 and @var{version} is the Octave version number.\n\
 The default value may be overridden by the environment variable\n\
 @w{@env{OCTAVE_TEXI_MACROS_FILE}}, or the command line argument\n\
-@samp{--texi-macros-file FNAME}.\n\
+@option{--texi-macros-file FNAME}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{makeinfo_program}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (texi_macros_file);
 }
 
 DEFUN (info_file, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} info_file ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} info_file (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} info_file (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the name of the\n\
-Octave info file.  The default value is\n\
+Octave info file.\n\
+\n\
+The default value is\n\
 @file{@var{octave-home}/info/octave.info}, in\n\
 which @var{octave-home} is the root directory of the Octave installation.\n\
 The default value may be overridden by the environment variable\n\
 @w{@env{OCTAVE_INFO_FILE}}, or the command line argument\n\
-@samp{--info-file FNAME}.\n\
+@option{--info-file FNAME}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{info_program, doc, help, makeinfo_program}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (info_file);
 }
 
 DEFUN (info_program, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} info_program ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} info_program (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} info_program (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the name of the\n\
-info program to run.  The default value is\n\
+info program to run.\n\
+\n\
+The default value is\n\
 @file{@var{octave-home}/libexec/octave/@var{version}/exec/@var{arch}/info}\n\
 in which @var{octave-home} is the root directory of the Octave installation,\n\
-@var{version} is the Octave version number, and @var{arch}\n\
-is the system type (for example, @code{i686-pc-linux-gnu}).  The\n\
-default value may be overridden by the environment variable\n\
+@var{version} is the Octave version number, and @var{arch} is the system\n\
+type (for example, @code{i686-pc-linux-gnu}).  The default value may be\n\
+overridden by the environment variable\n\
 @w{@env{OCTAVE_INFO_PROGRAM}}, or the command line argument\n\
-@samp{--info-program NAME}.\n\
+@option{--info-program NAME}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{info_file, doc, help, makeinfo_program}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (info_program);
 }
 
 DEFUN (makeinfo_program, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} makeinfo_program ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} makeinfo_program (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} makeinfo_program (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the name of the\n\
 program that Octave runs to format help text containing\n\
-Texinfo markup commands.  The default value is @code{makeinfo}.\n\
+Texinfo markup commands.\n\
+\n\
+The default value is @code{makeinfo}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{texi_macros_file, info_file, info_program, doc, help}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (makeinfo_program);
 }
 
 DEFUN (suppress_verbose_help_message, args, nargout,
@@ -1516,14 +1530,14 @@ DEFUN (suppress_verbose_help_message, ar
 @deftypefn  {Built-in Function} {@var{val} =} suppress_verbose_help_message ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} suppress_verbose_help_message (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} suppress_verbose_help_message (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave\n\
 will add additional help information to the end of the output from\n\
 the @code{help} command and usage messages for built-in commands.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (suppress_verbose_help_message);
 }
diff --git a/libinterp/corefcn/hex2num.cc b/libinterp/corefcn/hex2num.cc
--- a/libinterp/corefcn/hex2num.cc
+++ b/libinterp/corefcn/hex2num.cc
@@ -32,33 +32,34 @@ along with Octave; see the file COPYING.
 #include "oct-obj.h"
 #include "utils.h"
 
 DEFUN (hex2num, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{n} =} hex2num (@var{s})\n\
 @deftypefnx {Built-in Function} {@var{n} =} hex2num (@var{s}, @var{class})\n\
 Typecast the 16 character hexadecimal character string to an IEEE 754\n\
-double precision number.  If fewer than 16 characters are given the\n\
-strings are right padded with @qcode{'0'} characters.\n\
+double precision number.\n\
 \n\
-Given a string matrix, @code{hex2num} treats each row as a separate\n\
-number.\n\
+If fewer than 16 characters are given the strings are right padded with\n\
+@qcode{'0'} characters.\n\
+\n\
+Given a string matrix, @code{hex2num} treats each row as a separate number.\n\
 \n\
 @example\n\
 @group\n\
 hex2num ([\"4005bf0a8b145769\"; \"4024000000000000\"])\n\
    @result{} [2.7183; 10.000]\n\
 @end group\n\
 @end example\n\
 \n\
 The optional argument @var{class} can be passed as the string\n\
 @qcode{\"single\"} to specify that the given string should be interpreted as\n\
 a single precision number.  In this case, @var{s} should be an 8 character\n\
-hexadecimal string.  For example: \n\
+hexadecimal string.  For example:\n\
 \n\
 @example\n\
 @group\n\
 hex2num ([\"402df854\"; \"41200000\"], \"single\")\n\
    @result{} [2.7183; 10.000]\n\
 @end group\n\
 @end example\n\
 @seealso{num2hex, hex2dec, dec2hex}\n\
@@ -196,16 +197,17 @@ hex2num ([\"402df854\"; \"41200000\"], \
 %!assert (hex2num (["c00";"bf8";"000";"3f8";"400"], "single"), single([-2:2])')
 */
 
 DEFUN (num2hex, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{s} =} num2hex (@var{n})\n\
 Typecast a double or single precision number or vector to a 8 or 16\n\
 character hexadecimal string of the IEEE 754 representation of the number.\n\
+\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 num2hex ([-1, 1, e, Inf])\n\
 @result{} \"bff0000000000000\n\
     3ff0000000000000\n\
     4005bf0a8b145769\n\
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -759,31 +759,31 @@ input (\"Pick a number, any number! \")\
 prints the prompt\n\
 \n\
 @example\n\
 Pick a number, any number!\n\
 @end example\n\
 \n\
 @noindent\n\
 and waits for the user to enter a value.  The string entered by the user\n\
-is evaluated as an expression, so it may be a literal constant, a\n\
-variable name, or any other valid Octave code.\n\
+is evaluated as an expression, so it may be a literal constant, a variable\n\
+name, or any other valid Octave code.\n\
 \n\
 The number of return arguments, their size, and their class depend on the\n\
 expression entered.\n\
 \n\
-If you are only interested in getting a literal string value, you can\n\
-call @code{input} with the character string @qcode{\"s\"} as the second\n\
-argument.  This tells Octave to return the string entered by the user\n\
-directly, without evaluating it first.\n\
+If you are only interested in getting a literal string value, you can call\n\
+@code{input} with the character string @qcode{\"s\"} as the second argument.\n\
+This tells Octave to return the string entered by the user directly, without\n\
+evaluating it first.\n\
 \n\
-Because there may be output waiting to be displayed by the pager, it is\n\
-a good idea to always call @code{fflush (stdout)} before calling\n\
-@code{input}.  This will ensure that all pending output is written to\n\
-the screen before your prompt.\n\
+Because there may be output waiting to be displayed by the pager, it is a\n\
+good idea to always call @code{fflush (stdout)} before calling @code{input}.\n\
+ This will ensure that all pending output is written to the screen before\n\
+your prompt.\n\
 @seealso{yes_or_no, kbhit, pause, menu, listdlg}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
@@ -815,16 +815,17 @@ octave_yes_or_no (const std::string& pro
 }
 
 DEFUN (yes_or_no, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{ans} =} yes_or_no (\"@var{prompt}\")\n\
 Ask the user a yes-or-no question.\n\
 \n\
 Return logical true if the answer is yes or false if the answer is no.\n\
+\n\
 Takes one argument, @var{prompt}, which is the string to display when asking\n\
 the question.  @var{prompt} should end in a space; @code{yes-or-no} adds the\n\
 string @samp{(yes or no) } to it.  The user must confirm the answer with\n\
 @key{RET} and can edit it until it has been confirmed.\n\
 @seealso{input}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -892,19 +893,20 @@ do_keyboard (const octave_value_list& ar
 
   return retval;
 }
 
 DEFUN (keyboard, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} keyboard ()\n\
 @deftypefnx {Built-in Function} {} keyboard (\"@var{prompt}\")\n\
-This function is normally used for simple debugging.  When the\n\
-@code{keyboard} function is executed, Octave prints a prompt and waits\n\
-for user input.  The input strings are then evaluated and the results\n\
+Stop m-file execution and enter debug mode.\n\
+\n\
+When the @code{keyboard} function is executed, Octave prints a prompt and\n\
+waits for user input.  The input strings are then evaluated and the results\n\
 are printed.  This makes it possible to examine the values of variables\n\
 within a function, and to assign new values if necessary.  To leave the\n\
 prompt and return to normal execution type @samp{return} or @samp{dbcont}.\n\
 The @code{keyboard} function does not return an exit status.\n\
 \n\
 If @code{keyboard} is invoked without arguments, a default prompt of\n\
 @samp{debug> } is used.\n\
 @seealso{dbstop, dbcont, dbquit}\n\
@@ -935,18 +937,19 @@ If @code{keyboard} is invoked without ar
     print_usage ();
 
   return retval;
 }
 
 DEFUN (echo, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Command} {} echo options\n\
-Control whether commands are displayed as they are executed.  Valid\n\
-options are:\n\
+Control whether commands are displayed as they are executed.\n\
+\n\
+Valid options are:\n\
 \n\
 @table @code\n\
 @item on\n\
 Enable echoing of commands as they are executed in script files.\n\
 \n\
 @item off\n\
 Disable echoing of commands as they are executed in script files.\n\
 \n\
@@ -1104,19 +1107,20 @@ a feature, not a bug.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUN (readline_read_init_file, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} readline_read_init_file (@var{file})\n\
-Read the readline library initialization file @var{file}.  If\n\
-@var{file} is omitted, read the default initialization file (normally\n\
-@file{~/.inputrc}).\n\
+Read the readline library initialization file @var{file}.\n\
+\n\
+If @var{file} is omitted, read the default initialization file\n\
+(normally @file{~/.inputrc}).\n\
 \n\
 @xref{Readline Init File, , , readline, GNU Readline Library},\n\
 for details.\n\
 @seealso{readline_re_read_init_file}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
@@ -1136,16 +1140,17 @@ for details.\n\
 
   return retval;
 }
 
 DEFUN (readline_re_read_init_file, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} readline_re_read_init_file ()\n\
 Re-read the last readline library initialization file that was read.\n\
+\n\
 @xref{Readline Init File, , , readline, GNU Readline Library},\n\
 for details.\n\
 @seealso{readline_read_init_file}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 0)
@@ -1167,28 +1172,28 @@ internal_input_event_hook_fcn (void)
   return 0;
 }
 
 DEFUN (add_input_event_hook, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{id} =} add_input_event_hook (@var{fcn})\n\
 @deftypefnx {Built-in Function} {@var{id} =} add_input_event_hook (@var{fcn}, @var{data})\n\
 Add the named function or function handle @var{fcn} to the list of functions\n\
-to call periodically when Octave is waiting for input.  The function should\n\
-have the form\n\
+to call periodically when Octave is waiting for input.\n\
+\n\
+The function should have the form\n\
 \n\
 @example\n\
 @var{fcn} (@var{data})\n\
 @end example\n\
 \n\
-If @var{data} is omitted, Octave calls the function without any\n\
-arguments.\n\
+If @var{data} is omitted, Octave calls the function without any arguments.\n\
 \n\
-The returned identifier may be used to remove the function handle from\n\
-the list of input hook functions.\n\
+The returned identifier may be used to remove the function handle from the\n\
+list of input hook functions.\n\
 @seealso{remove_input_event_hook}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
@@ -1261,18 +1266,20 @@ for input.\n\
   return retval;
 }
 
 DEFUN (PS1, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} PS1 ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} PS1 (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} PS1 (@var{new_val}, \"local\")\n\
-Query or set the primary prompt string.  When executing interactively,\n\
-Octave displays the primary prompt when it is ready to read a command.\n\
+Query or set the primary prompt string.\n\
+\n\
+When executing interactively, Octave displays the primary prompt when it is\n\
+ready to read a command.\n\
 \n\
 The default value of the primary prompt string is @qcode{\"octave:\\#> \"}.\n\
 To change it, use a command like\n\
 \n\
 @example\n\
 PS1 (\"\\\\u@@\\\\H> \")\n\
 @end example\n\
 \n\
@@ -1288,87 +1295,91 @@ This can be useful for coloring the prom
 @example\n\
 PS1 (\"\\\\[\\\\033[01;31m\\\\]\\\\s:\\\\#> \\\\[\\\\033[0m\\\\]\")\n\
 @end example\n\
 \n\
 @noindent\n\
 will give the default Octave prompt a red coloring.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{PS2, PS4}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (PS1);
 }
 
 DEFUN (PS2, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} PS2 ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} PS2 (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} PS2 (@var{new_val}, \"local\")\n\
-Query or set the secondary prompt string.  The secondary prompt is\n\
-printed when Octave is expecting additional input to complete a\n\
-command.  For example, if you are typing a @code{for} loop that spans several\n\
-lines, Octave will print the secondary prompt at the beginning of\n\
-each line after the first.  The default value of the secondary prompt\n\
+Query or set the secondary prompt string.\n\
+\n\
+The secondary prompt is printed when Octave is expecting additional input to\n\
+complete a command.  For example, if you are typing a @code{for} loop that\n\
+spans several lines, Octave will print the secondary prompt at the beginning\n\
+of each line after the first.  The default value of the secondary prompt\n\
 string is @qcode{\"> \"}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{PS1, PS4}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (PS2);
 }
 
 DEFUN (PS4, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} PS4 ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} PS4 (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} PS4 (@var{new_val}, \"local\")\n\
 Query or set the character string used to prefix output produced\n\
 when echoing commands is enabled.\n\
+\n\
 The default value is @qcode{\"+ \"}.\n\
 @xref{Diary and Echo Commands}, for a description of echoing commands.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{echo, echo_executing_commands, PS1, PS2}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (PS4);
 }
 
 DEFUN (completion_append_char, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} completion_append_char ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} completion_append_char (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} completion_append_char (@var{new_val}, \"local\")\n\
 Query or set the internal character variable that is appended to\n\
-successful command-line completion attempts.  The default\n\
-value is @qcode{\" \"} (a single space).\n\
+successful command-line completion attempts.\n\
+\n\
+The default value is @qcode{\" \"} (a single space).\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (completion_append_char);
 }
 
 DEFUN (echo_executing_commands, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} echo_executing_commands ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} echo_executing_commands (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} echo_executing_commands (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls the echo state.\n\
+\n\
 It may be the sum of the following values:\n\
 \n\
 @table @asis\n\
 @item 1\n\
 Echo commands read from script files.\n\
 \n\
 @item 2\n\
 Echo commands from functions.\n\
@@ -1379,17 +1390,17 @@ Echo commands read from command line.\n\
 \n\
 More than one state can be active at once.  For example, a value of 3 is\n\
 equivalent to the command @kbd{echo on all}.\n\
 \n\
 The value of @code{echo_executing_commands} may be set by the @kbd{echo}\n\
 command or the command line option @option{--echo-commands}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (echo_executing_commands);
 }
 
 DEFUN (__request_drawnow__, args, ,
        "-*- texinfo -*-\n\
@@ -1433,17 +1444,19 @@ Undocumented internal function.\n\
 }
 
 DEFUN (filemarker, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} filemarker ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} filemarker (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} filemarker (@var{new_val}, \"local\")\n\
 Query or set the character used to separate the filename from the subfunction\n\
-names contained within the file.  By default this is the character @samp{>}.\n\
+names contained within the file.\n\
+\n\
+By default this is the character @samp{>}.\n\
 This can be used in a generic manner to interact with subfunctions.\n\
 For example,\n\
 \n\
 @example\n\
 help ([\"myfunc\", filemarker, \"mysubfunc\"])\n\
 @end example\n\
 \n\
 @noindent\n\
diff --git a/libinterp/corefcn/inv.cc b/libinterp/corefcn/inv.cc
--- a/libinterp/corefcn/inv.cc
+++ b/libinterp/corefcn/inv.cc
@@ -35,29 +35,31 @@ along with Octave; see the file COPYING.
 #include "ov-flt-cx-diag.h"
 #include "ov-perm.h"
 #include "utils.h"
 
 DEFUN (inv, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{x} =} inv (@var{A})\n\
 @deftypefnx {Built-in Function} {[@var{x}, @var{rcond}] =} inv (@var{A})\n\
-Compute the inverse of the square matrix @var{A}.  Return an estimate\n\
-of the reciprocal condition number if requested, otherwise warn of an\n\
-ill-conditioned matrix if the reciprocal condition number is small.\n\
+Compute the inverse of the square matrix @var{A}.\n\
 \n\
-In general it is best to avoid calculating the inverse of a matrix\n\
-directly.  For example, it is both faster and more accurate to solve\n\
-systems of equations (@var{A}*@math{x} = @math{b}) with\n\
+Return an estimate of the reciprocal condition number if requested,\n\
+otherwise warn of an ill-conditioned matrix if the reciprocal condition\n\
+number is small.\n\
+\n\
+In general it is best to avoid calculating the inverse of a matrix directly.\n\
+For example, it is both faster and more accurate to solve systems of\n\
+equations (@var{A}*@math{x} = @math{b}) with\n\
 @code{@var{y} = @var{A} \\ @math{b}}, rather than\n\
 @code{@var{y} = inv (@var{A}) * @math{b}}.\n\
 \n\
 If called with a sparse matrix, then in general @var{x} will be a full\n\
-matrix requiring significantly more storage.  Avoid forming the inverse\n\
-of a sparse matrix if possible.\n\
+matrix requiring significantly more storage.  Avoid forming the inverse of a\n\
+sparse matrix if possible.\n\
 @seealso{ldivide, rdivide}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin != 1)
diff --git a/libinterp/corefcn/kron.cc b/libinterp/corefcn/kron.cc
--- a/libinterp/corefcn/kron.cc
+++ b/libinterp/corefcn/kron.cc
@@ -229,35 +229,36 @@ dispatch_kron (const octave_value& a, co
     }
   return retval;
 }
 
 
 DEFUN (kron, args, , "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} kron (@var{A}, @var{B})\n\
 @deftypefnx {Built-in Function} {} kron (@var{A1}, @var{A2}, @dots{})\n\
-Form the Kronecker product of two or more matrices, defined block by \n\
-block as\n\
+Form the Kronecker product of two or more matrices.\n\
+\n\
+This is defined block by block as\n\
 \n\
 @example\n\
 x = [ a(i,j)*b ]\n\
 @end example\n\
 \n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 kron (1:4, ones (3, 1))\n\
      @result{}  1  2  3  4\n\
          1  2  3  4\n\
          1  2  3  4\n\
 @end group\n\
 @end example\n\
 \n\
-If there are more than two input arguments @var{A1}, @var{A2}, @dots{}, \n\
+If there are more than two input arguments @var{A1}, @var{A2}, @dots{},\n\
 @var{An} the Kronecker product is computed as\n\
 \n\
 @example\n\
 kron (kron (@var{A1}, @var{A2}), @dots{}, @var{An})\n\
 @end example\n\
 \n\
 @noindent\n\
 Since the Kronecker product is associative, this is well-defined.\n\
diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -2228,18 +2228,19 @@ execute_pkg_del (const std::string& dir)
   execute_pkg_add_or_del (dir, "PKG_DEL");
 }
 
 DEFUN (genpath, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} genpath (@var{dir})\n\
 @deftypefnx {Built-in Function} {} genpath (@var{dir}, @var{skip}, @dots{})\n\
 Return a path constructed from @var{dir} and all its subdirectories.\n\
-If additional string parameters are given, the resulting path will\n\
-exclude directories with those names.\n\
+\n\
+If additional string parameters are given, the resulting path will exclude\n\
+directories with those names.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   octave_idx_type nargin = args.length ();
 
   if (nargin == 1)
     {
@@ -2394,18 +2395,19 @@ No checks are made for duplicate element
 
   return retval;
 }
 
 DEFUN (addpath, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} addpath (@var{dir1}, @dots{})\n\
 @deftypefnx {Built-in Function} {} addpath (@var{dir1}, @dots{}, @var{option})\n\
-Add named directories to the function search path.  If\n\
-@var{option} is @qcode{\"-begin\"} or 0 (the default), prepend the\n\
+Add named directories to the function search path.\n\
+\n\
+If @var{option} is @qcode{\"-begin\"} or 0 (the default), prepend the\n\
 directory name to the current path.  If @var{option} is @qcode{\"-end\"}\n\
 or 1, append the directory name to the current path.\n\
 Directories added to the path must exist.\n\
 \n\
 In addition to accepting individual directory arguments, lists of\n\
 directory names separated by @code{pathsep} are also accepted.  For example:\n\
 \n\
 @example\n\
diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -541,17 +541,19 @@ DEFUN (load, args, nargout,
 @deftypefn  {Command} {} load file\n\
 @deftypefnx {Command} {} load options file\n\
 @deftypefnx {Command} {} load options file v1 v2 @dots{}\n\
 @deftypefnx {Command} {S =} load (\"options\", \"file\", \"v1\", \"v2\", @dots{})\n\
 @deftypefnx {Command} {} load file options\n\
 @deftypefnx {Command} {} load file options v1 v2 @dots{}\n\
 @deftypefnx {Command} {S =} load (\"file\", \"options\", \"v1\", \"v2\", @dots{})\n\
 Load the named variables @var{v1}, @var{v2}, @dots{}, from the file\n\
-@var{file}.  If no variables are specified then all variables found in the\n\
+@var{file}.\n\
+\n\
+If no variables are specified then all variables found in the\n\
 file will be loaded.  As with @code{save}, the list of variables to extract\n\
 can be full names or use a pattern syntax.  The format of the file is\n\
 automatically detected but may be overridden by supplying the appropriate\n\
 option.\n\
 \n\
 If load is invoked using the functional form\n\
 \n\
 @example\n\
@@ -1480,17 +1482,19 @@ DEFUN (save, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} save file\n\
 @deftypefnx {Command} {} save options file\n\
 @deftypefnx {Command} {} save options file @var{v1} @var{v2} @dots{}\n\
 @deftypefnx {Command} {} save options file -struct @var{STRUCT} @var{f1} @var{f2} @dots{}\n\
 @deftypefnx {Command} {} save @code{\"-\"} @var{v1} @var{v2} @dots{}\n\
 @deftypefnx {Built-in Function} {@var{s} =} save (@code{\"-\"} @var{v1} @var{v2} @dots{})\n\
 Save the named variables @var{v1}, @var{v2}, @dots{}, in the file\n\
-@var{file}.  The special filename @samp{-} may be used to return the\n\
+@var{file}.\n\
+\n\
+The special filename @samp{-} may be used to return the\n\
 content of the variables as a string.  If no variable names are listed,\n\
 Octave saves all the variables in the current scope.  Otherwise, full\n\
 variable names or pattern syntax can be used to specify the variables to\n\
 save.  If the @option{-struct} modifier is used, fields @var{f1} @var{f2}\n\
 @dots{} of the scalar structure @var{STRUCT} are saved as if they were\n\
 variables with corresponding names.  Valid options for the @code{save}\n\
 command are listed in the following table.  Options that modify the output\n\
 format override the format specified by @code{save_default_options}.\n\
@@ -1787,123 +1791,127 @@ DEFUN (crash_dumps_octave_core, args, na
 @deftypefn  {Built-in Function} {@var{val} =} crash_dumps_octave_core ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} crash_dumps_octave_core (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} crash_dumps_octave_core (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave tries\n\
 to save all current variables to the file @file{octave-workspace} if it\n\
 crashes or receives a hangup, terminate or similar signal.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{octave_core_file_limit, octave_core_file_name, octave_core_file_options}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (crash_dumps_octave_core);
 }
 
 DEFUN (save_default_options, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} save_default_options ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} save_default_options (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} save_default_options (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the default options\n\
 for the @code{save} command, and defines the default format.\n\
+\n\
 Typical values include @qcode{\"-ascii\"}, @qcode{\"-text -zip\"}.\n\
 The default value is @option{-text}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{save}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (save_default_options);
 }
 
 DEFUN (octave_core_file_limit, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} octave_core_file_limit ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} octave_core_file_limit (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} octave_core_file_limit (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the maximum amount\n\
 of memory (in kilobytes) of the top-level workspace that Octave will\n\
 attempt to save when writing data to the crash dump file (the name of\n\
-the file is specified by @var{octave_core_file_name}).  If\n\
-@var{octave_core_file_options} flags specify a binary format,\n\
+the file is specified by @var{octave_core_file_name}).\n\
+\n\
+If @var{octave_core_file_options} flags specify a binary format,\n\
 then @var{octave_core_file_limit} will be approximately the maximum\n\
 size of the file.  If a text file format is used, then the file could\n\
 be much larger than the limit.  The default value is -1 (unlimited)\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{crash_dumps_octave_core, octave_core_file_name, octave_core_file_options}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (octave_core_file_limit);
 }
 
 DEFUN (octave_core_file_name, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} octave_core_file_name ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} octave_core_file_name (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} octave_core_file_name (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the name of the file\n\
 used for saving data from the top-level workspace if Octave aborts.\n\
+\n\
 The default value is @qcode{\"octave-workspace\"}\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{crash_dumps_octave_core, octave_core_file_name, octave_core_file_options}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (octave_core_file_name);
 }
 
 DEFUN (octave_core_file_options, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} octave_core_file_options ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} octave_core_file_options (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} octave_core_file_options (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the options used for\n\
-saving the workspace data if Octave aborts.  The value of\n\
-@code{octave_core_file_options} should follow the same format as the\n\
-options for the @code{save} function.  The default value is Octave's binary\n\
-format.\n\
+saving the workspace data if Octave aborts.\n\
+\n\
+The value of @code{octave_core_file_options} should follow the same format\n\
+as the options for the @code{save} function.  The default value is Octave's\n\
+binary format.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{crash_dumps_octave_core, octave_core_file_name, octave_core_file_limit}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (octave_core_file_options);
 }
 
 DEFUN (save_header_format_string, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} save_header_format_string ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} save_header_format_string (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} save_header_format_string (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the format\n\
 string used for the comment line written at the beginning of\n\
-text-format data files saved by Octave.  The format string is\n\
-passed to @code{strftime} and should begin with the character\n\
-@samp{#} and contain no newline characters.  If the value of\n\
-@code{save_header_format_string} is the empty string,\n\
-the header comment is omitted from text-format data files.  The\n\
-default value is\n\
+text-format data files saved by Octave.\n\
+\n\
+The format string is passed to @code{strftime} and should begin with the\n\
+character @samp{#} and contain no newline characters.  If the value of\n\
+@code{save_header_format_string} is the empty string, the header comment is\n\
+omitted from text-format data files.  The default value is\n\
 @c Set example in small font to prevent overfull line\n\
 \n\
 @smallexample\n\
 \"# Created by Octave VERSION, %a %b %d %H:%M:%S %Y %Z <USER@@HOST>\"\n\
 @end smallexample\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{strftime, save}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (save_header_format_string);
 }
diff --git a/libinterp/corefcn/lookup.cc b/libinterp/corefcn/lookup.cc
--- a/libinterp/corefcn/lookup.cc
+++ b/libinterp/corefcn/lookup.cc
@@ -186,24 +186,25 @@ do_numeric_lookup (const ArrayT& array, 
 
   return retval;
 }
 
 DEFUN (lookup, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{idx} =} lookup (@var{table}, @var{y})\n\
 @deftypefnx {Built-in Function} {@var{idx} =} lookup (@var{table}, @var{y}, @var{opt})\n\
-Lookup values in a sorted table.  Usually used as a prelude to\n\
-interpolation.\n\
+Lookup values in a sorted table.\n\
+\n\
+This function is usually used as a prelude to interpolation.\n\
 \n\
 If table is increasing and @code{idx = lookup (table, y)}, then\n\
-@code{table(idx(i)) <= y(i) < table(idx(i+1))} for all @code{y(i)}\n\
-within the table.  If @code{y(i) < table(1)} then\n\
-@code{idx(i)} is 0. If @code{y(i) >= table(end)} or @code{isnan (y(i))} then\n\
-@code{idx(i)} is @code{n}.\n\
+@code{table(idx(i)) <= y(i) < table(idx(i+1))} for all @code{y(i)} within\n\
+the table.  If @code{y(i) < table(1)} then @code{idx(i)} is 0.  If\n\
+@code{y(i) >= table(end)} or @code{isnan (y(i))} then @code{idx(i)} is\n\
+@code{n}.\n\
 \n\
 If the table is decreasing, then the tests are reversed.\n\
 For non-strictly monotonic tables, empty intervals are always skipped.\n\
 The result is undefined if @var{table} is not monotonic, or if\n\
 @var{table} contains a NaN.\n\
 \n\
 The complexity of the lookup is O(M*log(N)) where N is the size of\n\
 @var{table} and M is the size of @var{y}.  In the special case when @var{y}\n\
diff --git a/libinterp/corefcn/ls-oct-ascii.cc b/libinterp/corefcn/ls-oct-ascii.cc
--- a/libinterp/corefcn/ls-oct-ascii.cc
+++ b/libinterp/corefcn/ls-oct-ascii.cc
@@ -415,18 +415,18 @@ save_three_d (std::ostream& os, const oc
   return (os && ! fail);
 }
 
 DEFUN (save_precision, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} save_precision ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} save_precision (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} save_precision (@var{new_val}, \"local\")\n\
-Query or set the internal variable that specifies the number of\n\
-digits to keep when saving data in text format.\n\
+Query or set the internal variable that specifies the number of digits to\n\
+keep when saving data in text format.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
 variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE_WITH_LIMITS (save_precision, -1,
                                             std::numeric_limits<int>::max ());
diff --git a/libinterp/corefcn/lsode.cc b/libinterp/corefcn/lsode.cc
--- a/libinterp/corefcn/lsode.cc
+++ b/libinterp/corefcn/lsode.cc
@@ -155,17 +155,19 @@ lsode_user_jacobian (const ColumnVector&
       LSODE_ABORT (); \
     } \
   while (0)
 
 DEFUN (lsode, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{x}, @var{istate}, @var{msg}] =} lsode (@var{fcn}, @var{x_0}, @var{t})\n\
 @deftypefnx {Built-in Function} {[@var{x}, @var{istate}, @var{msg}] =} lsode (@var{fcn}, @var{x_0}, @var{t}, @var{t_crit})\n\
-Solve the set of differential equations\n\
+Ordinary Differential Equation (ODE) solver.\n\
+\n\
+The set of differential equations to solve is\n\
 @tex\n\
 $$ {dx \\over dt} = f (x, t) $$\n\
 with\n\
 $$ x(t_0) = x_0 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
diff --git a/libinterp/corefcn/lu.cc b/libinterp/corefcn/lu.cc
--- a/libinterp/corefcn/lu.cc
+++ b/libinterp/corefcn/lu.cc
@@ -66,20 +66,22 @@ DEFUN (lu, args, nargout,
 @deftypefn  {Built-in Function} {[@var{L}, @var{U}] =} lu (@var{A})\n\
 @deftypefnx {Built-in Function} {[@var{L}, @var{U}, @var{P}] =} lu (@var{A})\n\
 @deftypefnx {Built-in Function} {[@var{L}, @var{U}, @var{P}, @var{Q}] =} lu (@var{S})\n\
 @deftypefnx {Built-in Function} {[@var{L}, @var{U}, @var{P}, @var{Q}, @var{R}] =} lu (@var{S})\n\
 @deftypefnx {Built-in Function} {[@dots{}] =} lu (@var{S}, @var{thres})\n\
 @deftypefnx {Built-in Function} {@var{y} =} lu (@dots{})\n\
 @deftypefnx {Built-in Function} {[@dots{}] =} lu (@dots{}, \"vector\")\n\
 @cindex LU decomposition\n\
-Compute the LU@tie{}decomposition of @var{A}.  If @var{A} is full\n\
-subroutines from\n\
-@sc{lapack} are used and if @var{A} is sparse then @sc{umfpack} is used.  The\n\
-result is returned in a permuted form, according to the optional return\n\
+Compute the LU@tie{}decomposition of @var{A}.\n\
+\n\
+If @var{A} is full subroutines from @sc{lapack} are used and if @var{A} is\n\
+sparse then @sc{umfpack} is used.\n\
+\n\
+The result is returned in a permuted form, according to the optional return\n\
 value @var{P}.  For example, given the matrix @code{a = [1, 2; 3, 4]},\n\
 \n\
 @example\n\
 [l, u, p] = lu (@var{a})\n\
 @end example\n\
 \n\
 @noindent\n\
 returns\n\
@@ -602,21 +604,21 @@ DEFUN (luupdate, args, ,
 @deftypefn  {Built-in Function} {[@var{L}, @var{U}] =} luupdate (@var{L}, @var{U}, @var{x}, @var{y})\n\
 @deftypefnx {Built-in Function} {[@var{L}, @var{U}, @var{P}] =} luupdate (@var{L}, @var{U}, @var{P}, @var{x}, @var{y})\n\
 Given an LU@tie{}factorization of a real or complex matrix\n\
 @w{@var{A} = @var{L}*@var{U}}, @var{L}@tie{}lower unit trapezoidal and\n\
 @var{U}@tie{}upper trapezoidal, return the LU@tie{}factorization\n\
 of @w{@var{A} + @var{x}*@var{y}.'}, where @var{x} and @var{y} are\n\
 column vectors (rank-1 update) or matrices with equal number of columns\n\
 (rank-k update).\n\
-Optionally, row-pivoted updating can be used by supplying\n\
-a row permutation (pivoting) matrix @var{P};\n\
-in that case, an updated permutation matrix is returned.\n\
-Note that if @var{L}, @var{U}, @var{P} is a pivoted LU@tie{}factorization\n\
-as obtained by @code{lu}:\n\
+\n\
+Optionally, row-pivoted updating can be used by supplying a row permutation\n\
+(pivoting) matrix @var{P}; in that case, an updated permutation matrix is\n\
+returned.  Note that if @var{L}, @var{U}, @var{P} is a pivoted\n\
+LU@tie{}factorization as obtained by @code{lu}:\n\
 \n\
 @example\n\
 [@var{L}, @var{U}, @var{P}] = lu (@var{A});\n\
 @end example\n\
 \n\
 @noindent\n\
 then a factorization of @tcode{@var{A}+@var{x}*@var{y}.'} can be obtained\n\
 either as\n\
@@ -631,19 +633,19 @@ or\n\
 @example\n\
 [@var{L1}, @var{U1}, @var{P1}] = lu (@var{L}, @var{U}, @var{P}, @var{x}, @var{y})\n\
 @end example\n\
 \n\
 The first form uses the unpivoted algorithm, which is faster, but less\n\
 stable.  The second form uses a slower pivoted algorithm, which is more\n\
 stable.\n\
 \n\
-The matrix case is done as a sequence of rank-1 updates;\n\
-thus, for large enough k, it will be both faster and more accurate to\n\
-recompute the factorization from scratch.\n\
+The matrix case is done as a sequence of rank-1 updates; thus, for large\n\
+enough k, it will be both faster and more accurate to recompute the\n\
+factorization from scratch.\n\
 @seealso{lu, cholupdate, qrupdate}\n\
 @end deftypefn")
 {
   octave_idx_type nargin = args.length ();
   octave_value_list retval;
 
   bool pivoted = nargin == 5;
 
diff --git a/libinterp/corefcn/luinc.cc b/libinterp/corefcn/luinc.cc
--- a/libinterp/corefcn/luinc.cc
+++ b/libinterp/corefcn/luinc.cc
@@ -32,23 +32,25 @@ along with Octave; see the file COPYING.
 #include "oct-map.h"
 
 #include "MatrixType.h"
 #include "SparseCmplxLU.h"
 #include "SparsedbleLU.h"
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
+// FIXME: Deprecated in 4.0 and should be removed in 4.4.
 DEFUN (__luinc__, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{L}, @var{U}, @var{P}, @var{Q}] =} luinc (@var{A}, '0')\n\
 @deftypefnx {Built-in Function} {[@var{L}, @var{U}, @var{P}, @var{Q}] =} luinc (@var{A}, @var{droptol})\n\
 @deftypefnx {Built-in Function} {[@var{L}, @var{U}, @var{P}, @var{Q}] =} luinc (@var{A}, @var{opts})\n\
 @cindex LU decomposition\n\
 Produce the incomplete LU@tie{}factorization of the sparse matrix @var{A}.\n\
+\n\
 Two types of incomplete factorization are possible, and the type\n\
 is determined by the second argument to @code{luinc}.\n\
 \n\
 Called with a second argument of @qcode{'0'}, the zero-level incomplete\n\
 LU@tie{}factorization is produced.  This creates a factorization of @var{A}\n\
 where the position of the nonzero arguments correspond to the same\n\
 positions as in the matrix @var{A}.\n\
 \n\
diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -34,32 +34,35 @@ along with Octave; see the file COPYING.
 
 #include "defun.h"
 #include "error.h"
 #include "variables.h"
 
 DEFUN (abs, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} abs (@var{z})\n\
-Compute the magnitude of @var{z}, defined as\n\
+Compute the magnitude of @var{z}.\n\
+\n\
+The magnitude is defined as\n\
 @tex\n\
 $|z| = \\sqrt{x^2 + y^2}$.\n\
 @end tex\n\
 @ifnottex\n\
 |@var{z}| = @code{sqrt (x^2 + y^2)}.\n\
 @end ifnottex\n\
 \n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 abs (3 + 4i)\n\
      @result{} 5\n\
 @end group\n\
 @end example\n\
+@seealso{arg}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).abs ();
   else
     print_usage ();
 
@@ -152,17 +155,16 @@ Compute the inverse hyperbolic cosine fo
 %!test
 %! x = [1, 0, -1, 0];
 %! v = [0, pi/2*i, pi*i, pi/2*i];
 %! assert (acosh (x), v, sqrt (eps));
 
 %!test
 %! re = 2.99822295029797;
 %! im = pi/2;
-%! assert (acosh (10i), re + i*im);
 %! assert (acosh (-10i), re - i*im);
 
 %!test
 %! x = single ([1, 0, -1, 0]);
 %! v = single ([0, pi/2*i, pi*i, pi/2*i]);
 %! assert (acosh (x), v, sqrt (eps ("single")));
 
 %!test
@@ -173,49 +175,53 @@ Compute the inverse hyperbolic cosine fo
 
 %!error acosh ()
 %!error acosh (1, 2)
 */
 
 DEFUN (angle, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} angle (@var{z})\n\
-See arg.\n\
+See @code{arg}.\n\
+@seealso{arg}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).arg ();
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (arg, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Mapping Function} {} arg (@var{z})\n\
 @deftypefnx {Mapping Function} {} angle (@var{z})\n\
-Compute the argument of @var{z}, defined as,\n\
+Compute the argument, i.e., angle of @var{z}.\n\
+\n\
+This is defined as,\n\
 @tex\n\
 $\\theta = atan2 (y, x),$\n\
 @end tex\n\
 @ifnottex\n\
 @var{theta} = @code{atan2 (@var{y}, @var{x})},\n\
 @end ifnottex\n\
 in radians.\n\
 \n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 arg (3 + 4i)\n\
      @result{} 0.92730\n\
 @end group\n\
 @end example\n\
+@seealso{abs}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).arg ();
   else
     print_usage ();
 
@@ -389,16 +395,17 @@ Compute the inverse hyperbolic tangent f
 %!error atanh ()
 %!error atanh (1, 2)
 */
 
 DEFUN (cbrt, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} cbrt (@var{x})\n\
 Compute the real cube root of each element of @var{x}.\n\
+\n\
 Unlike @code{@var{x}^(1/3)}, the result will be negative if @var{x} is\n\
 negative.\n\
 @seealso{nthroot}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).cbrt ();
@@ -420,19 +427,22 @@ negative.\n\
 
 %!error cbrt ()
 %!error cbrt (1, 2)
 */
 
 DEFUN (ceil, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} ceil (@var{x})\n\
-Return the smallest integer not less than @var{x}.  This is equivalent to\n\
-rounding towards positive infinity.  If @var{x} is\n\
-complex, return @code{ceil (real (@var{x})) + ceil (imag (@var{x})) * I}.\n\
+Return the smallest integer not less than @var{x}.\n\
+\n\
+This is equivalent to rounding towards positive infinity.\n\
+\n\
+If @var{x} is complex, return\n\
+@code{ceil (real (@var{x})) + ceil (imag (@var{x})) * I}.\n\
 \n\
 @example\n\
 @group\n\
 ceil ([-2.7, 2.7])\n\
     @result{} -2    3\n\
 @end group\n\
 @end example\n\
 @seealso{floor, round, fix}\n\
@@ -462,17 +472,19 @@ ceil ([-2.7, 2.7])\n\
 
 %!error ceil ()
 %!error ceil (1, 2)
 */
 
 DEFUN (conj, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} conj (@var{z})\n\
-Return the complex conjugate of @var{z}, defined as\n\
+Return the complex conjugate of @var{z}.\n\
+\n\
+The complex conjugate is defined as\n\
 @tex\n\
 $\\bar{z} = x - iy$.\n\
 @end tex\n\
 @ifnottex\n\
 @code{conj (@var{z})} = @var{x} - @var{i}@var{y}.\n\
 @end ifnottex\n\
 @seealso{real, imag}\n\
 @end deftypefn")
@@ -569,17 +581,19 @@ Compute the hyperbolic cosine for each e
 
 %!error cosh ()
 %!error cosh (1, 2)
 */
 
 DEFUN (erf, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} erf (@var{z})\n\
-Compute the error function,\n\
+Compute the error function.\n\
+\n\
+The error function is defined as\n\
 @tex\n\
 $$\n\
  {\\rm erf} (z) = {2 \\over \\sqrt{\\pi}}\\int_0^z e^{-t^2} dt\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
@@ -639,17 +653,19 @@ erf (z) = --------- *  | e^(-t^2) dt\n\
 
 %!error erf ()
 %!error erf (1, 2)
 */
 
 DEFUN (erfinv, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} erfinv (@var{x})\n\
-Compute the inverse error function, i.e., @var{y} such that\n\
+Compute the inverse error function.\n\
+\n\
+The inverse error function is defined such that\n\
 \n\
 @example\n\
 erf (@var{y}) == @var{x}\n\
 @end example\n\
 @seealso{erf, erfc, erfcx, erfi, dawson, erfcinv}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -677,17 +693,19 @@ erf (@var{y}) == @var{x}\n\
 
 %!error erfinv ()
 %!error erfinv (1, 2)
 */
 
 DEFUN (erfcinv, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} erfcinv (@var{x})\n\
-Compute the inverse complementary error function, i.e., @var{y} such that\n\
+Compute the inverse complementary error function.\n\
+\n\
+The inverse complementary error function is defined such that\n\
 \n\
 @example\n\
 erfc (@var{y}) == @var{x}\n\
 @end example\n\
 @seealso{erfc, erf, erfcx, erfi, dawson, erfinv}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -715,17 +733,19 @@ erfc (@var{y}) == @var{x}\n\
 
 %!error erfcinv ()
 %!error erfcinv (1, 2)
 */
 
 DEFUN (erfc, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} erfc (@var{z})\n\
-Compute the complementary error function,\n\
+Compute the complementary error function.\n\
+\n\
+The complementary error function is defined as\n\
 @tex\n\
 $1 - {\\rm erf} (z)$.\n\
 @end tex\n\
 @ifnottex\n\
 @w{@code{1 - erf (@var{z})}}.\n\
 @end ifnottex\n\
 @seealso{erfcinv, erfcx, erfi, dawson, erf, erfinv}\n\
 @end deftypefn")
@@ -746,17 +766,19 @@ Compute the complementary error function
 
 %!error erfc ()
 %!error erfc (1, 2)
 */
 
 DEFUN (erfcx, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} erfcx (@var{z})\n\
-Compute the scaled complementary error function,\n\
+Compute the scaled complementary error function.\n\
+\n\
+The scaled complementary error function is defined as\n\
 @tex\n\
 $$\n\
  e^{z^2} {\\rm erfc} (z) \\equiv e^{z^2} (1 - {\\rm erf} (z))\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
@@ -789,20 +811,22 @@ exp (z^2) * erfc (z)\n\
 
 %!error erfcx ()
 %!error erfcx (1, 2)
 */
 
 DEFUN (erfi, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} erfi (@var{z})\n\
-Compute the imaginary error function,\n\
+Compute the imaginary error function.\n\
+\n\
+The imaginary error function is defined as\n\
 @tex\n\
 $$\n\
- -i {\\rm erf} (iz) \n\
+ -i {\\rm erf} (iz)\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
 -i * erf (i*z)\n\
 @end example\n\
 \n\
@@ -827,17 +851,19 @@ Compute the imaginary error function,\n\
 
 %!error erfi ()
 %!error erfi (1, 2)
 */
 
 DEFUN (dawson, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} dawson (@var{z})\n\
-Compute the Dawson (scaled imaginary error) function,\n\
+Compute the Dawson (scaled imaginary error) function.\n\
+\n\
+The Dawson function is defined as\n\
 @tex\n\
 $$\n\
  {\\sqrt{\\pi} \\over 2} e^{-z^2} {\\rm erfi} (z) \\equiv -i {\\sqrt{\\pi} \\over 2} e^{-z^2} {\\rm erf} (iz)\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
@@ -874,18 +900,19 @@ DEFUN (exp, args, ,
 @deftypefn {Mapping Function} {} exp (@var{x})\n\
 Compute\n\
 @tex\n\
 $e^{x}$\n\
 @end tex\n\
 @ifnottex\n\
 @code{e^x}\n\
 @end ifnottex\n\
-for each element of @var{x}.  To compute the matrix\n\
-exponential, see @ref{Linear Algebra}.\n\
+for each element of @var{x}.\n\
+\n\
+To compute the matrix exponential, see @ref{Linear Algebra}.\n\
 @seealso{log}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).exp ();
   else
     print_usage ();
@@ -976,18 +1003,19 @@ isfinite ([13, Inf, NA, NaN])\n\
 
 %!error isfinite ()
 %!error isfinite (1, 2)
 */
 
 DEFUN (fix, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} fix (@var{x})\n\
-Truncate fractional portion of @var{x} and return the integer portion.  This\n\
-is equivalent to rounding towards zero.  If @var{x} is complex, return\n\
+Truncate fractional portion of @var{x} and return the integer portion.\n\
+\n\
+This is equivalent to rounding towards zero.  If @var{x} is complex, return\n\
 @code{fix (real (@var{x})) + fix (imag (@var{x})) * I}.\n\
 \n\
 @example\n\
 @group\n\
 fix ([-2.7, 2.7])\n\
    @result{} -2    2\n\
 @end group\n\
 @end example\n\
@@ -1011,18 +1039,19 @@ fix ([-2.7, 2.7])\n\
 
 %!error fix ()
 %!error fix (1, 2)
 */
 
 DEFUN (floor, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} floor (@var{x})\n\
-Return the largest integer not greater than @var{x}.  This is equivalent to\n\
-rounding towards negative infinity.  If @var{x} is\n\
+Return the largest integer not greater than @var{x}.\n\
+\n\
+This is equivalent to rounding towards negative infinity.  If @var{x} is\n\
 complex, return @code{floor (real (@var{x})) + floor (imag (@var{x})) * I}.\n\
 \n\
 @example\n\
 @group\n\
 floor ([-2.7, 2.7])\n\
      @result{} -3    2\n\
 @end group\n\
 @end example\n\
@@ -1046,17 +1075,19 @@ floor ([-2.7, 2.7])\n\
 
 %!error floor ()
 %!error floor (1, 2)
 */
 
 DEFUN (gamma, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} gamma (@var{z})\n\
-Compute the Gamma function,\n\
+Compute the Gamma function.\n\
+\n\
+The Gamma function is defined as\n\
 @tex\n\
 $$\n\
  \\Gamma (z) = \\int_0^\\infty t^{z-1} e^{-t} dt.\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
@@ -1148,18 +1179,19 @@ Return the imaginary part of @var{z} as 
 %!error imag ()
 %!error imag (1, 2)
 */
 
 DEFUNX ("isalnum", Fisalnum, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isalnum (@var{s})\n\
 Return a logical array which is true where the elements of @var{s} are\n\
-letters or digits and false where they are not.  This is equivalent to\n\
-(@code{isalpha (@var{s}) | isdigit (@var{s})}).\n\
+letters or digits and false where they are not.\n\
+\n\
+This is equivalent to (@code{isalpha (@var{s}) | isdigit (@var{s})}).\n\
 @seealso{isalpha, isdigit, ispunct, isspace, iscntrl}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).xisalnum ();
   else
     print_usage ();
@@ -1179,18 +1211,19 @@ letters or digits and false where they a
 %!error isalnum ()
 %!error isalnum (1, 2)
 */
 
 DEFUNX ("isalpha", Fisalpha, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isalpha (@var{s})\n\
 Return a logical array which is true where the elements of @var{s} are\n\
-letters and false where they are not.  This is equivalent to\n\
-(@code{islower (@var{s}) | isupper (@var{s})}).\n\
+letters and false where they are not.\n\
+\n\
+This is equivalent to (@code{islower (@var{s}) | isupper (@var{s})}).\n\
 @seealso{isdigit, ispunct, isspace, iscntrl, isalnum, islower, isupper}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).xisalpha ();
   else
     print_usage ();
@@ -1294,16 +1327,17 @@ decimal digits (0-9) and false where the
 %!error isdigit (1, 2)
 */
 
 DEFUN (isinf, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isinf (@var{x})\n\
 Return a logical array which is true where the elements of @var{x} are\n\
 are infinite and false where they are not.\n\
+\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 isinf ([13, Inf, NA, NaN])\n\
       @result{} [ 0, 1, 0, 0 ]\n\
 @end group\n\
 @end example\n\
@@ -1393,16 +1427,17 @@ lowercase letters and false where they a
 %!error islower (1, 2)
 */
 
 DEFUN (isna, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isna (@var{x})\n\
 Return a logical array which is true where the elements of @var{x} are\n\
 NA (missing) values and false where they are not.\n\
+\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 isna ([13, Inf, NA, NaN])\n\
      @result{} [ 0, 0, 1, 0 ]\n\
 @end group\n\
 @end example\n\
@@ -1435,16 +1470,17 @@ isna ([13, Inf, NA, NaN])\n\
 %!error isna (1, 2)
 */
 
 DEFUN (isnan, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isnan (@var{x})\n\
 Return a logical array which is true where the elements of @var{x} are\n\
 NaN values and false where they are not.\n\
+\n\
 NA values are also considered NaN values.  For example:\n\
 \n\
 @example\n\
 @group\n\
 isnan ([13, Inf, NA, NaN])\n\
       @result{} [ 0, 0, 1, 1 ]\n\
 @end group\n\
 @end example\n\
@@ -1675,18 +1711,19 @@ DEFUN (log, args, ,
 @deftypefn {Mapping Function} {} log (@var{x})\n\
 Compute the natural logarithm,\n\
 @tex\n\
 $\\ln{(x)},$\n\
 @end tex\n\
 @ifnottex\n\
 @code{ln (@var{x})},\n\
 @end ifnottex\n\
-for each element of @var{x}.  To compute the\n\
-matrix logarithm, see @ref{Linear Algebra}.\n\
+for each element of @var{x}.\n\
+\n\
+To compute the matrix logarithm, see @ref{Linear Algebra}.\n\
 @seealso{exp, log1p, log2, log10, logspace}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).log ();
   else
     print_usage ();
@@ -1789,17 +1826,19 @@ Return the real part of @var{z}.\n\
 
 %!error real ()
 %!error real (1, 2)
 */
 
 DEFUN (round, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} round (@var{x})\n\
-Return the integer nearest to @var{x}.  If @var{x} is complex, return\n\
+Return the integer nearest to @var{x}.\n\
+\n\
+If @var{x} is complex, return\n\
 @code{round (real (@var{x})) + round (imag (@var{x})) * I}.  If there\n\
 are two nearest integers, return the one further away from zero.\n\
 \n\
 @example\n\
 @group\n\
 round ([-2.7, 2.7])\n\
      @result{} -3    3\n\
 @end group\n\
@@ -1836,17 +1875,19 @@ round ([-2.7, 2.7])\n\
 %!error round ()
 %!error round (1, 2)
 */
 
 DEFUN (roundb, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} roundb (@var{x})\n\
 Return the integer nearest to @var{x}.  If there are two nearest\n\
-integers, return the even one (banker's rounding).  If @var{x} is complex,\n\
+integers, return the even one (banker's rounding).\n\
+\n\
+If @var{x} is complex,\n\
 return @code{roundb (real (@var{x})) + roundb (imag (@var{x})) * I}.\n\
 @seealso{round}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).roundb ();
   else
@@ -1876,17 +1917,19 @@ return @code{roundb (real (@var{x})) + r
 
 %!error roundb ()
 %!error roundb (1, 2)
 */
 
 DEFUN (sign, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} sign (@var{x})\n\
-Compute the @dfn{signum} function, which is defined as\n\
+Compute the @dfn{signum} function.\n\
+\n\
+This is defined as\n\
 @tex\n\
 $$\n\
 {\\rm sign} (@var{x}) = \\cases{1,&$x>0$;\\cr 0,&$x=0$;\\cr -1,&$x<0$.\\cr}\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
@@ -1896,18 +1939,17 @@ sign (x) =  0, x = 0;\n\
             1, x > 0.\n\
 @end group\n\
 @end example\n\
 \n\
 @end ifnottex\n\
 \n\
 For complex arguments, @code{sign} returns @code{x ./ abs (@var{x})}.\n\
 \n\
-Note that @code{sign (-0.0)} is 0.\n\
-Although IEEE 754 floating point\n\
+Note that @code{sign (-0.0)} is 0.  Although IEEE 754 floating point\n\
 allows zero to be signed, 0.0 and -0.0 compare equal.  If you must test\n\
 whether zero is signed, use the @code{signbit} function.\n\
 @seealso{signbit}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).signum ();
@@ -1930,20 +1972,22 @@ whether zero is signed, use the @code{si
 
 %!error sign ()
 %!error sign (1, 2)
 */
 
 DEFUNX ("signbit", Fsignbit, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} signbit (@var{x})\n\
-Return logical true if the value of @var{x} has its sign bit set.\n\
-Otherwise return logical false.  This behavior is consistent with the other\n\
-logical functions.  See@ref{Logical Values}.  The behavior differs from the\n\
-C language function which returns nonzero if the sign bit is set.\n\
+Return logical true if the value of @var{x} has its sign bit set and false\n\
+otherwise.\n\
+\n\
+This behavior is consistent with the other logical functions.\n\
+See @ref{Logical Values}.  The behavior differs from the C language function\n\
+which returns nonzero if the sign bit is set.\n\
 \n\
 This is not the same as @code{x < 0.0}, because IEEE 754 floating point\n\
 allows zero to be signed.  The comparison @code{-0.0 < 0.0} is false,\n\
 but @code{signbit (-0.0)} will return a nonzero value.\n\
 @seealso{sign}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -2037,19 +2081,21 @@ Compute the hyperbolic sine for each ele
 
 %!error sinh ()
 %!error sinh (1, 2)
 */
 
 DEFUN (sqrt, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} sqrt (@var{x})\n\
-Compute the square root of each element of @var{x}.  If @var{x} is negative,\n\
-a complex result is returned.  To compute the matrix square root, see\n\
-@ref{Linear Algebra}.\n\
+Compute the square root of each element of @var{x}.\n\
+\n\
+If @var{x} is negative, a complex result is returned.\n\
+\n\
+To compute the matrix square root, see @ref{Linear Algebra}.\n\
 @seealso{realsqrt, nthroot}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).sqrt ();
   else
     print_usage ();
@@ -2136,17 +2182,19 @@ Compute hyperbolic tangent for each elem
 
 %!error tanh ()
 %!error tanh (1, 2)
 */
 
 DEFUNX ("toascii", Ftoascii, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} toascii (@var{s})\n\
-Return ASCII representation of @var{s} in a matrix.  For example:\n\
+Return ASCII representation of @var{s} in a matrix.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 toascii (\"ASCII\")\n\
      @result{} [ 65, 83, 67, 73, 73 ]\n\
 @end group\n\
 \n\
 @end example\n\
@@ -2175,17 +2223,19 @@ toascii (\"ASCII\")\n\
 */
 
 DEFUNX ("tolower", Ftolower, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Mapping Function} {} tolower (@var{s})\n\
 @deftypefnx {Mapping Function} {} lower (@var{s})\n\
 Return a copy of the string or cell string @var{s}, with each uppercase\n\
 character replaced by the corresponding lowercase one; non-alphabetic\n\
-characters are left unchanged.  For example:\n\
+characters are left unchanged.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 tolower (\"MiXeD cAsE 123\")\n\
       @result{} \"mixed case 123\"\n\
 @end group\n\
 @end example\n\
 @seealso{toupper}\n\
@@ -2235,17 +2285,19 @@ DEFALIAS (lower, tolower);
 */
 
 DEFUNX ("toupper", Ftoupper, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Mapping Function} {} toupper (@var{s})\n\
 @deftypefnx {Mapping Function} {} upper (@var{s})\n\
 Return a copy of the string or cell string @var{s}, with each lowercase\n\
 character replaced by the corresponding uppercase one; non-alphabetic\n\
-characters are left unchanged.  For example:\n\
+characters are left unchanged.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 toupper (\"MiXeD cAsE 123\")\n\
       @result{} \"MIXED CASE 123\"\n\
 @end group\n\
 @end example\n\
 @seealso{tolower}\n\
diff --git a/libinterp/corefcn/matrix_type.cc b/libinterp/corefcn/matrix_type.cc
--- a/libinterp/corefcn/matrix_type.cc
+++ b/libinterp/corefcn/matrix_type.cc
@@ -39,21 +39,26 @@ along with Octave; see the file COPYING.
 DEFUN (matrix_type, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{type} =} matrix_type (@var{A})\n\
 @deftypefnx {Built-in Function} {@var{type} =} matrix_type (@var{A}, \"nocompute\")\n\
 @deftypefnx {Built-in Function} {@var{A} =} matrix_type (@var{A}, @var{type})\n\
 @deftypefnx {Built-in Function} {@var{A} =} matrix_type (@var{A}, \"upper\", @var{perm})\n\
 @deftypefnx {Built-in Function} {@var{A} =} matrix_type (@var{A}, \"lower\", @var{perm})\n\
 @deftypefnx {Built-in Function} {@var{A} =} matrix_type (@var{A}, \"banded\", @var{nl}, @var{nu})\n\
-Identify the matrix type or mark a matrix as a particular type.  This allows\n\
-more rapid solutions of linear equations involving @var{A} to be performed.\n\
+Identify the matrix type or mark a matrix as a particular type.\n\
+\n\
+This allows more rapid solutions of linear equations involving @var{A} to be\n\
+performed.\n\
+\n\
 Called with a single argument, @code{matrix_type} returns the type of the\n\
-matrix and caches it for future use.  Called with more than one argument,\n\
-@code{matrix_type} allows the type of the matrix to be defined.\n\
+matrix and caches it for future use.\n\
+\n\
+Called with more than one argument, @code{matrix_type} allows the type of\n\
+the matrix to be defined.\n\
 \n\
 If the option @qcode{\"nocompute\"} is given, the function will not attempt\n\
 to guess the type if it is still unknown.  This is useful for debugging\n\
 purposes.\n\
 \n\
 The possible matrix types depend on whether the matrix is full or sparse, and\n\
 can be one of the following\n\
 \n\
diff --git a/libinterp/corefcn/max.cc b/libinterp/corefcn/max.cc
--- a/libinterp/corefcn/max.cc
+++ b/libinterp/corefcn/max.cc
@@ -426,21 +426,20 @@ do_minmax_body (const octave_value_list&
 DEFUN (min, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} min (@var{x})\n\
 @deftypefnx {Built-in Function} {} min (@var{x}, [], @var{dim})\n\
 @deftypefnx {Built-in Function} {[@var{w}, @var{iw}] =} min (@var{x})\n\
 @deftypefnx {Built-in Function} {} min (@var{x}, @var{y})\n\
 Find minimum values in the array @var{x}.\n\
 \n\
-For a vector argument, return the minimum value.\n\
-For a matrix argument, return a row vector with the minimum value of each\n\
-column.\n\
-For a multi-dimensional array, @code{min} operates along the first\n\
-non-singleton dimension.\n\
+For a vector argument, return the minimum value.  For a matrix argument,\n\
+return a row vector with the minimum value of each column.  For a\n\
+multi-dimensional array, @code{min} operates along the first non-singleton\n\
+dimension.\n\
 \n\
 If the optional third argument @var{dim} is present then operate along\n\
 this dimension.  In this case the second argument is ignored and should be\n\
 set to the empty matrix.\n\
 \n\
 For two matrices (or a matrix and a scalar), return the pairwise minimum.\n\
 \n\
 Thus,\n\
@@ -455,37 +454,36 @@ returns the smallest element of the 2-D 
 @example\n\
 @group\n\
 min (2:5, pi)\n\
     @result{}  2.0000  3.0000  3.1416  3.1416\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
-compares each element of the range @code{2:5} with @code{pi}, and\n\
-returns a row vector of the minimum values.\n\
+compares each element of the range @code{2:5} with @code{pi}, and returns a\n\
+row vector of the minimum values.\n\
 \n\
 For complex arguments, the magnitude of the elements are used for\n\
 comparison.  If the magnitudes are identical, then the results are ordered\n\
 by phase angle in the range (-pi, pi].  Hence,\n\
 \n\
 @example\n\
 @group\n\
 min ([-1 i 1 -i])\n\
     @result{} -i\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 because all entries have magnitude 1, but -i has the smallest phase angle\n\
 with value -pi/2.\n\
 \n\
-If called with one input and two output arguments,\n\
-@code{min} also returns the first index of the\n\
-minimum value(s).  Thus,\n\
+If called with one input and two output arguments, @code{min} also returns\n\
+the first index of the minimum value(s).  Thus,\n\
 \n\
 @example\n\
 @group\n\
 [x, ix] = min ([1, 3, 0, 2, 0])\n\
     @result{}  x = 0\n\
         ix = 3\n\
 @end group\n\
 @end example\n\
@@ -649,21 +647,20 @@ minimum value(s).  Thus,\n\
 DEFUN (max, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} max (@var{x})\n\
 @deftypefnx {Built-in Function} {} max (@var{x}, [], @var{dim})\n\
 @deftypefnx {Built-in Function} {[@var{w}, @var{iw}] =} max (@var{x})\n\
 @deftypefnx {Built-in Function} {} max (@var{x}, @var{y})\n\
 Find maximum values in the array @var{x}.\n\
 \n\
-For a vector argument, return the maximum value.\n\
-For a matrix argument, return a row vector with the maximum value of each\n\
-column.\n\
-For a multi-dimensional array, @code{max} operates along the first\n\
-non-singleton dimension.\n\
+For a vector argument, return the maximum value.  For a matrix argument,\n\
+return a row vector with the maximum value of each column.  For a\n\
+multi-dimensional array, @code{max} operates along the first non-singleton\n\
+dimension.\n\
 \n\
 If the optional third argument @var{dim} is present then operate along\n\
 this dimension.  In this case the second argument is ignored and should be\n\
 set to the empty matrix.\n\
 \n\
 For two matrices (or a matrix and a scalar), return the pairwise maximum.\n\
 \n\
 Thus,\n\
@@ -696,19 +693,18 @@ max ([-1 i 1 -i])\n\
     @result{} -1\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 because all entries have magnitude 1, but -1 has the largest phase angle\n\
 with value pi.\n\
 \n\
-If called with one input and two output arguments,\n\
-@code{max} also returns the first index of the\n\
-maximum value(s).  Thus,\n\
+If called with one input and two output arguments, @code{max} also returns\n\
+the first index of the maximum value(s).  Thus,\n\
 \n\
 @example\n\
 @group\n\
 [x, ix] = max ([1, 3, 5, 2, 5])\n\
     @result{}  x = 5\n\
         ix = 3\n\
 @end group\n\
 @end example\n\
diff --git a/libinterp/corefcn/md5sum.cc b/libinterp/corefcn/md5sum.cc
--- a/libinterp/corefcn/md5sum.cc
+++ b/libinterp/corefcn/md5sum.cc
@@ -35,19 +35,20 @@ along with Octave; see the file COPYING.
 #include "oct-env.h"
 #include "oct-md5.h"
 #include "utils.h"
 
 DEFUN (md5sum, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} md5sum (@var{file})\n\
 @deftypefnx {Built-in Function} {} md5sum (@var{str}, @var{opt})\n\
-Calculate the MD5 sum of the file @var{file}.  If the second parameter\n\
-@var{opt} exists and is true, then calculate the MD5 sum of the\n\
-string @var{str}.\n\
+Calculate the MD5 sum of the file @var{file}.\n\
+\n\
+If the second parameter @var{opt} exists and is true, then calculate the MD5\n\
+sum of the string @var{str}.\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   else
diff --git a/libinterp/corefcn/mgorth.cc b/libinterp/corefcn/mgorth.cc
--- a/libinterp/corefcn/mgorth.cc
+++ b/libinterp/corefcn/mgorth.cc
@@ -47,18 +47,19 @@ do_mgorth (ColumnVector& x, const Matrix
   if (real (h(Vc)) > 0)
     x = x / h(Vc);
 }
 
 DEFUN (mgorth, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{y}, @var{h}] =} mgorth (@var{x}, @var{v})\n\
 Orthogonalize a given column vector @var{x} with respect to a set of\n\
-orthonormal vectors comprising the columns of @var{v}\n\
-using the modified Gram-Schmidt method.\n\
+orthonormal vectors comprising the columns of @var{v} using the modified\n\
+Gram-Schmidt method.\n\
+\n\
 On exit, @var{y} is a unit vector such that:\n\
 \n\
 @example\n\
 @group\n\
   norm (@var{y}) = 1\n\
   @var{v}' * @var{y} = 0\n\
   @var{x} = [@var{v}, @var{y}]*@var{h}'\n\
 @end group\n\
diff --git a/libinterp/corefcn/nproc.cc b/libinterp/corefcn/nproc.cc
--- a/libinterp/corefcn/nproc.cc
+++ b/libinterp/corefcn/nproc.cc
@@ -39,18 +39,18 @@ are counted as follows:\n\
 @table @code\n\
 @item all\n\
 total number of processors.\n\
 \n\
 @item current\n\
 processors available to the current process.\n\
 \n\
 @item overridable\n\
-likewise, but overridable through the @w{@env{OMP_NUM_THREADS}} environment\n\
-variable.\n\
+same as @code{current}, but overridable through the @w{@env{OMP_NUM_THREADS}}\n\
+environment variable.\n\
 @end table\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if ((nargin != 0 && nargin != 1) || (nargout != 0 && nargout != 1))
diff --git a/libinterp/corefcn/oct-hist.cc b/libinterp/corefcn/oct-hist.cc
--- a/libinterp/corefcn/oct-hist.cc
+++ b/libinterp/corefcn/oct-hist.cc
@@ -582,18 +582,17 @@ octave_history_write_timestamp (void)
       octave_link::append_history (timestamp);
 }
 
 DEFUN (edit_history, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} edit_history\n\
 @deftypefnx {Command} {} edit_history @var{cmd_number}\n\
 @deftypefnx {Command} {} edit_history @var{first} @var{last}\n\
-Edit the history list using the editor named by the variable\n\
-@w{@env{EDITOR}}.\n\
+Edit the history list using the editor named by the variable @env{EDITOR}.\n\
 \n\
 The commands to be edited are first copied to a temporary file.  When you\n\
 exit the editor, Octave executes the commands that remain in the file.  It\n\
 is often more convenient to use @code{edit_history} to define functions\n\
 rather than attempting to enter them directly on the command line.\n\
 The block of commands is executed as soon as you exit the editor.\n\
 To avoid executing any commands, simply delete all the lines from the buffer\n\
 before leaving the editor.\n\
@@ -610,34 +609,36 @@ The following are equivalent and edit th
 edit_history\n\
 edit_history -1\n\
 @end group\n\
 @end example\n\
 \n\
 When using ranges, specifying a larger number for the first command than the\n\
 last command reverses the list of commands before they are placed in the\n\
 buffer to be edited.\n\
-@seealso{run_history}\n\
+@seealso{run_history, history}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   do_edit_history (args);
 
   return retval;
 }
 
 DEFUN (history, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} history\n\
 @deftypefnx {Command} {} history @var{opt1} @dots{}\n\
 @deftypefnx {Built-in Function} {@var{h} =} history ()\n\
 @deftypefnx {Built-in Function} {@var{h} =} history (@var{opt1}, @dots{})\n\
 If invoked with no arguments, @code{history} displays a list of commands\n\
-that you have executed.  Valid options are:\n\
+that you have executed.\n\
+\n\
+Valid options are:\n\
 \n\
 @table @code\n\
 @item   @var{n}\n\
 @itemx -@var{n}\n\
 Display only the most recent @var{n} lines of history.\n\
 \n\
 @item -c\n\
 Clear the history list.\n\
@@ -657,16 +658,17 @@ omitted, use the default history file (n
 @end table\n\
 \n\
 For example, to display the five most recent commands that you have\n\
 typed without displaying line numbers, use the command\n\
 @kbd{history -q 5}.\n\
 \n\
 If invoked with a single output argument, the history will be saved to that\n\
 argument as a cell string and will not be output to screen.\n\
+@seealso{edit_history, run_history}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   string_vector hlist = do_history (args, nargout);
 
   if (nargout > 0)
     retval = Cell (hlist);
@@ -677,21 +679,22 @@ argument as a cell string and will not b
 DEFUN (run_history, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} run_history\n\
 @deftypefnx {Command} {} run_history @var{cmd_number}\n\
 @deftypefnx {Command} {} run_history @var{first} @var{last}\n\
 Run commands from the history list.\n\
 \n\
 When invoked with no arguments, run the previously executed command;\n\
+\n\
 With one argument, run the specified command @var{cmd_number};\n\
+\n\
 With two arguments, run the list of commands between @var{first} and\n\
 @var{last}.  Command number specifiers may also be negative where -1\n\
-refers to the most recently executed command.\n\
-For example, the command\n\
+refers to the most recently executed command.  For example, the command\n\
 \n\
 @example\n\
 @group\n\
 run_history\n\
      OR\n\
 run_history -1\n\
 @end group\n\
 @end example\n\
@@ -717,34 +720,35 @@ disp (1)\n\
 disp (2)\n\
 run_history -1 -2\n\
 @result{}\n\
  2\n\
  1\n\
 @end group\n\
 @end example\n\
 \n\
-@seealso{edit_history}\n\
+@seealso{edit_history, history}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   do_run_history (args);
 
   return retval;
 }
 
 DEFUN (history_control, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} history_control ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} history_control (@var{new_val})\n\
 Query or set the internal variable that specifies how commands are saved\n\
-to the history list.  The default value is an empty character string,\n\
-but may be overridden by the environment variable\n\
-@w{@env{OCTAVE_HISTCONTROL}}.\n\
+to the history list.\n\
+\n\
+The default value is an empty character string, but may be overridden by the\n\
+environment variable @w{@env{OCTAVE_HISTCONTROL}}.\n\
 \n\
 The value of @code{history_control} is a colon-separated list of values\n\
 controlling how commands are saved on the history list.  If the list\n\
 of values includes @code{ignorespace}, lines which begin with a space\n\
 character are not saved in the history list.  A value of @code{ignoredups}\n\
 causes lines matching the previous history entry to not be saved.\n\
 A value of @code{ignoreboth} is shorthand for @code{ignorespace} and\n\
 @code{ignoredups}.  A value of @code{erasedups} causes all previous lines\n\
@@ -769,18 +773,20 @@ the history list, subject to the value o
   return retval;
 }
 
 DEFUN (history_size, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} history_size ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} history_size (@var{new_val})\n\
 Query or set the internal variable that specifies how many entries\n\
-to store in the history file.  The default value is @code{1000},\n\
-but may be overridden by the environment variable @w{@env{OCTAVE_HISTSIZE}}.\n\
+to store in the history file.\n\
+\n\
+The default value is @code{1000}, but may be overridden by the environment\n\
+variable @w{@env{OCTAVE_HISTSIZE}}.\n\
 @seealso{history_file, history_timestamp_format_string, history_save}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int old_history_size = command_history::size ();
 
   int tmp = old_history_size;
@@ -795,19 +801,20 @@ but may be overridden by the environment
   return retval;
 }
 
 DEFUN (history_file, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} history_file ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} history_file (@var{new_val})\n\
 Query or set the internal variable that specifies the name of the\n\
-file used to store command history.  The default value is\n\
-@file{~/.octave_hist}, but may be overridden by the environment\n\
-variable @w{@env{OCTAVE_HISTFILE}}.\n\
+file used to store command history.\n\
+\n\
+The default value is @file{~/.octave_hist}, but may be overridden by the\n\
+environment variable @w{@env{OCTAVE_HISTFILE}}.\n\
 @seealso{history_size, history_save, history_timestamp_format_string}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   std::string old_history_file = command_history::file ();
 
   std::string tmp = old_history_file;
@@ -822,42 +829,43 @@ variable @w{@env{OCTAVE_HISTFILE}}.\n\
 
 DEFUN (history_timestamp_format_string, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} history_timestamp_format_string ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} history_timestamp_format_string (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} history_timestamp_format_string (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the format string\n\
 for the comment line that is written to the history file when Octave\n\
-exits.  The format string is passed to @code{strftime}.  The default\n\
-value is\n\
+exits.\n\
+\n\
+The format string is passed to @code{strftime}.  The default value is\n\
 \n\
 @example\n\
 \"# Octave VERSION, %a %b %d %H:%M:%S %Y %Z <USER@@HOST>\"\n\
 @end example\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{strftime, history_file, history_size, history_save}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (history_timestamp_format_string);
 }
 
 DEFUN (history_save, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} history_save ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} history_save (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} history_save (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether commands entered\n\
 on the command line are saved in the history file.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{history_control, history_file, history_size, history_timestamp_format_string}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   bool old_history_save = ! command_history::ignoring_entries ();
 
diff --git a/libinterp/corefcn/ordschur.cc b/libinterp/corefcn/ordschur.cc
--- a/libinterp/corefcn/ordschur.cc
+++ b/libinterp/corefcn/ordschur.cc
@@ -63,16 +63,17 @@ extern "C"
 }
 
 DEFUN (ordschur, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{UR}, @var{SR}] =} ordschur (@var{U}, @var{S}, @var{select})\n\
 Reorders the real Schur factorization (@var{U},@var{S}) obtained with the\n\
 @code{schur} function, so that selected eigenvalues appear in the upper left\n\
 diagonal blocks of the quasi triangular Schur matrix.\n\
+\n\
 The logical vector @var{select} specifies the selected eigenvalues as they\n\
 appear along @var{S}'s diagonal.\n\
 \n\
 For example, given the matrix @code{@var{A} = [1, 2; 3, 4]}, and its Schur\n\
 decomposition\n\
 \n\
 @example\n\
 [@var{U}, @var{S}] = schur (@var{A})\n\
diff --git a/libinterp/corefcn/pager.cc b/libinterp/corefcn/pager.cc
--- a/libinterp/corefcn/pager.cc
+++ b/libinterp/corefcn/pager.cc
@@ -607,18 +607,20 @@ Undocumented internal function\n\
   return ovl (write_to_diary_file);
 }
 
 DEFUN (more, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} more\n\
 @deftypefnx {Command} {} more on\n\
 @deftypefnx {Command} {} more off\n\
-Turn output pagination on or off.  Without an argument, @code{more}\n\
-toggles the current state.\n\
+Turn output pagination on or off.\n\
+\n\
+Without an argument, @code{more} toggles the current state.\n\
+\n\
 The current state can be determined via @code{page_screen_output}.\n\
 @seealso{page_screen_output, page_output_immediately, PAGER, PAGER_FLAGS}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
@@ -644,18 +646,18 @@ The current state can be determined via 
     print_usage ();
 
   return retval;
 }
 
 DEFUN (terminal_size, , ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} terminal_size ()\n\
-Return a two-element row vector containing the current size of the\n\
-terminal window in characters (rows and columns).\n\
+Return a two-element row vector containing the current size of the terminal\n\
+window in characters (rows and columns).\n\
 @seealso{list_in_columns}\n\
 @end deftypefn")
 {
   RowVector size (2, 0.0);
 
   size(0) = command_editor::terminal_rows ();
   size(1) = command_editor::terminal_cols ();
 
@@ -663,77 +665,81 @@ terminal window in characters (rows and 
 }
 
 DEFUN (page_output_immediately, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} page_output_immediately ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} page_output_immediately (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} page_output_immediately (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave sends\n\
-output to the pager as soon as it is available.  Otherwise, Octave\n\
-buffers its output and waits until just before the prompt is printed to\n\
-flush it to the pager.\n\
+output to the pager as soon as it is available.\n\
+\n\
+Otherwise, Octave buffers its output and waits until just before the prompt\n\
+is printed to flush it to the pager.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{page_screen_output, more, PAGER, PAGER_FLAGS}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (page_output_immediately);
 }
 
 DEFUN (page_screen_output, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} page_screen_output ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} page_screen_output (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} page_screen_output (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether output intended\n\
 for the terminal window that is longer than one page is sent through a\n\
-pager.  This allows you to view one screenful at a time.  Some pagers\n\
+pager.\n\
+\n\
+This allows you to view one screenful at a time.  Some pagers\n\
 (such as @code{less}---see @ref{Installation}) are also capable of moving\n\
 backward on the output.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{more, page_output_immediately, PAGER, PAGER_FLAGS}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (page_screen_output);
 }
 
 DEFUN (PAGER, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} PAGER ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} PAGER (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} PAGER (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the program to use\n\
-to display terminal output on your system.  The default value is\n\
-normally @qcode{\"less\"}, @qcode{\"more\"}, or\n\
+to display terminal output on your system.\n\
+\n\
+The default value is normally @qcode{\"less\"}, @qcode{\"more\"}, or\n\
 @qcode{\"pg\"}, depending on what programs are installed on your system.\n\
 @xref{Installation}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{PAGER_FLAGS, page_output_immediately, more, page_screen_output}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (PAGER);
 }
 
 DEFUN (PAGER_FLAGS, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} PAGER_FLAGS ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} PAGER_FLAGS (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} PAGER_FLAGS (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the options to pass\n\
 to the pager.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{PAGER, more, page_screen_output, page_output_immediately}\n\
 @end deftypefn")
 {
   return SET_NONEMPTY_INTERNAL_STRING_VARIABLE (PAGER_FLAGS);
 }
diff --git a/libinterp/corefcn/pinv.cc b/libinterp/corefcn/pinv.cc
--- a/libinterp/corefcn/pinv.cc
+++ b/libinterp/corefcn/pinv.cc
@@ -35,18 +35,19 @@ along with Octave; see the file COPYING.
 #include "ov-flt-re-diag.h"
 #include "ov-flt-cx-diag.h"
 #include "ov-perm.h"
 
 DEFUN (pinv, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} pinv (@var{x})\n\
 @deftypefnx {Built-in Function} {} pinv (@var{x}, @var{tol})\n\
-Return the pseudoinverse of @var{x}.  Singular values less than\n\
-@var{tol} are ignored.\n\
+Return the pseudoinverse of @var{x}.\n\
+\n\
+Singular values less than @var{tol} are ignored.\n\
 \n\
 If the second argument is omitted, it is taken to be\n\
 \n\
 @example\n\
 tol = max (size (@var{x})) * sigma_max (@var{x}) * eps,\n\
 @end example\n\
 \n\
 @noindent\n\
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -3402,17 +3402,18 @@ octave_print_internal (std::ostream&, co
 {
   panic_impossible ();
 }
 
 DEFUN (rats, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} rats (@var{x}, @var{len})\n\
 Convert @var{x} into a rational approximation represented as a string.\n\
-You can convert the string back into a matrix as follows:\n\
+\n\
+The string can be converted back into a matrix as follows:\n\
 \n\
 @example\n\
 @group\n\
 r = rats (hilb (4));\n\
 x = str2num (r)\n\
 @end group\n\
 @end example\n\
 \n\
@@ -3484,32 +3485,34 @@ If the length of the smallest possible r
     }
 
   return retval;
 }
 
 DEFUN (disp, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} disp (@var{x})\n\
-Display the value of @var{x}.  For example:\n\
+Display the value of @var{x}.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 disp (\"The value of pi is:\"), disp (pi)\n\
 \n\
      @print{} the value of pi is:\n\
      @print{} 3.1416\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 Note that the output from @code{disp} always ends with a newline.\n\
 \n\
-If an output value is requested, @code{disp} prints nothing and\n\
-returns the formatted output in a string.\n\
+If an output value is requested, @code{disp} prints nothing and returns the\n\
+formatted output in a string.\n\
 @seealso{fdisp}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 && nargout < 2)
@@ -3529,17 +3532,19 @@ returns the formatted output in a string
     print_usage ();
 
   return retval;
 }
 
 DEFUN (fdisp, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} fdisp (@var{fid}, @var{x})\n\
-Display the value of @var{x} on the stream @var{fid}.  For example:\n\
+Display the value of @var{x} on the stream @var{fid}.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 fdisp (stdout, \"The value of pi is:\"), fdisp (stdout, pi)\n\
 \n\
      @print{} the value of pi is:\n\
      @print{} 3.1416\n\
 @end group\n\
@@ -3885,20 +3890,22 @@ set_format_style (int argc, const string
 }
 
 
 DEFUN (format, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} format\n\
 @deftypefnx {Command} {} format options\n\
 Reset or specify the format of the output produced by @code{disp} and\n\
-Octave's normal echoing mechanism.  This command only affects the display\n\
-of numbers but not how they are stored or computed.  To change the internal\n\
-representation from the default double use one of the conversion functions\n\
-such as @code{single}, @code{uint8}, @code{int64}, etc.\n\
+Octave's normal echoing mechanism.\n\
+\n\
+This command only affects the display of numbers but not how they are stored\n\
+or computed.  To change the internal representation from the default double\n\
+use one of the conversion functions such as @code{single}, @code{uint8},\n\
+@code{int64}, etc.\n\
 \n\
 By default, Octave displays 5 significant digits in a human readable form\n\
 (option @samp{short} paired with @samp{loose} format for matrices).\n\
 If @code{format} is invoked without any options, this default format\n\
 is restored.\n\
 \n\
 Valid formats for floating point numbers are listed in the following\n\
 table.\n\
@@ -4048,17 +4055,17 @@ The following two options affect the dis
 @item compact\n\
 Remove blank lines around column number labels and between\n\
 matrices producing more compact output with more data per page.\n\
 \n\
 @item loose\n\
 Insert blank lines above and below column number labels and between matrices\n\
 to produce a more readable output with less data per page.  (default).\n\
 @end table\n\
-@seealso{fixed_point_format, output_max_field_width, output_precision, split_long_rows, rats}\n\
+@seealso{fixed_point_format, output_max_field_width, output_precision, split_long_rows, print_empty_dimensions, rats}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("format");
 
@@ -4117,64 +4124,66 @@ ans =\n\
 @end example\n\
 \n\
 @noindent\n\
 Notice that the first value appears to be 0 when it is actually 1.  Because\n\
 of the possibility for confusion you should be careful about enabling\n\
 @code{fixed_point_format}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{format, output_max_field_width, output_precision}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (fixed_point_format);
 }
 
 DEFUN (print_empty_dimensions, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} print_empty_dimensions ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} print_empty_dimensions (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} print_empty_dimensions (@var{new_val}, \"local\")\n\
-Query or set the internal variable that controls whether the\n\
-dimensions of empty matrices are printed along with the empty matrix\n\
-symbol, @samp{[]}.  For example, the expression\n\
+Query or set the internal variable that controls whether the dimensions of\n\
+empty matrices are printed along with the empty matrix symbol, @samp{[]}.\n\
+\n\
+For example, the expression\n\
 \n\
 @example\n\
 zeros (3, 0)\n\
 @end example\n\
 \n\
 @noindent\n\
 will print\n\
 \n\
 @example\n\
 ans = [](3x0)\n\
 @end example\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{format}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (print_empty_dimensions);
 }
 
 DEFUN (split_long_rows, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} split_long_rows ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} split_long_rows (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} split_long_rows (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether rows of a matrix\n\
-may be split when displayed to a terminal window.  If the rows are split,\n\
-Octave will display the matrix in a series of smaller pieces, each of\n\
-which can fit within the limits of your terminal width and each set of\n\
-rows is labeled so that you can easily see which columns are currently\n\
-being displayed.  For example:\n\
+may be split when displayed to a terminal window.\n\
+\n\
+If the rows are split, Octave will display the matrix in a series of smaller\n\
+pieces, each of which can fit within the limits of your terminal width and\n\
+each set of rows is labeled so that you can easily see which columns are\n\
+currently being displayed.  For example:\n\
 \n\
 @example\n\
 @group\n\
 octave:13> rand (2,10)\n\
 ans =\n\
 \n\
  Columns 1 through 6:\n\
 \n\
@@ -4184,34 +4193,34 @@ ans =\n\
  Columns 7 through 10:\n\
 \n\
   0.90174  0.11854  0.72313  0.73326\n\
   0.44672  0.94303  0.56564  0.82150\n\
 @end group\n\
 @end example\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{format}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (split_long_rows);
 }
 
 DEFUN (output_max_field_width, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} output_max_field_width ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} output_max_field_width (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} output_max_field_width (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the maximum width\n\
 of a numeric output field.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{format, fixed_point_format, output_precision}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE_WITH_LIMITS (output_max_field_width, 0,
                                             std::numeric_limits<int>::max ());
 }
 
@@ -4219,16 +4228,16 @@ DEFUN (output_precision, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} output_precision ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} output_precision (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} output_precision (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the minimum number of\n\
 significant figures to display for numeric output.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{format, fixed_point_format, output_max_field_width}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE_WITH_LIMITS (output_precision, -1,
                                             std::numeric_limits<int>::max ());
 }
diff --git a/libinterp/corefcn/pt-jit.cc b/libinterp/corefcn/pt-jit.cc
--- a/libinterp/corefcn/pt-jit.cc
+++ b/libinterp/corefcn/pt-jit.cc
@@ -2515,21 +2515,21 @@ jit_info::find (const vmap& extra_vars, 
 #endif
 
 DEFUN (jit_failcnt, UNUSED_WITHOUT_LLVM (args),
        UNUSED_WITHOUT_LLVM (nargout),
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} jit_failcnt ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} jit_failcnt (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} jit_failcnt (@var{new_val}, \"local\")\n\
-Query or set the internal variable that counts the number of\n\
-JIT fail exceptions for Octave's JIT compiler.\n\
+Query or set the internal variable that counts the number of JIT fail\n\
+exceptions for Octave's JIT compiler.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{jit_enable, jit_startcnt, debug_jit}\n\
 @end deftypefn")
 {
 #if defined (HAVE_LLVM)
   return SET_INTERNAL_VARIABLE (jit_failcnt);
 #else
   warning ("jit_failcnt: JIT compiling not available in this version of Octave");
@@ -2542,17 +2542,17 @@ DEFUN (debug_jit, UNUSED_WITHOUT_LLVM (a
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} debug_jit ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} debug_jit (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} debug_jit (@var{new_val}, \"local\")\n\
 Query or set the internal variable that determines whether\n\
 debugging/tracing is enabled for Octave's JIT compiler.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{jit_enable, jit_startcnt}\n\
 @end deftypefn")
 {
 #if defined (HAVE_LLVM)
   return SET_INTERNAL_VARIABLE (debug_jit);
 #else
   warning ("debug_jit: JIT compiling not available in this version of Octave");
@@ -2564,17 +2564,17 @@ DEFUN (jit_enable, UNUSED_WITHOUT_LLVM (
        UNUSED_WITHOUT_LLVM (nargout),
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} jit_enable ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} jit_enable (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} jit_enable (@var{new_val}, \"local\")\n\
 Query or set the internal variable that enables Octave's JIT compiler.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{jit_startcnt, debug_jit}\n\
 @end deftypefn")
 {
 #if defined (HAVE_LLVM)
   return SET_INTERNAL_VARIABLE (jit_enable);
 #else
   warning ("jit_enable: JIT compiling not available in this version of Octave");
@@ -2584,24 +2584,26 @@ The original variable value is restored 
 
 DEFUN (jit_startcnt, UNUSED_WITHOUT_LLVM (args),
        UNUSED_WITHOUT_LLVM (nargout),
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} jit_startcnt ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} jit_startcnt (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} jit_startcnt (@var{new_val}, \"local\")\n\
 Query or set the internal variable that determines whether JIT compilation\n\
-will take place for a specific loop.  Because compilation is a costly\n\
-operation it does not make sense to employ JIT when the loop count is low.\n\
-By default only loops with greater than 1000 iterations will be accelerated.\n\
+will take place for a specific loop.\n\
+\n\
+Because compilation is a costly operation it does not make sense to employ\n\
+JIT when the loop count is low.  By default only loops with greater than\n\
+1000 iterations will be accelerated.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
-@seealso{jit_enable, debug_jit}\n\
+@seealso{jit_enable, jit_failcnt, debug_jit}\n\
 @end deftypefn")
 {
 #if defined (HAVE_LLVM)
   return SET_INTERNAL_VARIABLE_WITH_LIMITS (jit_startcnt, 1,
                                             std::numeric_limits<int>::max ());
 #else
   warning ("jit_enable: JIT compiling not available in this version of Octave");
   return octave_value ();
diff --git a/libinterp/corefcn/quad.cc b/libinterp/corefcn/quad.cc
--- a/libinterp/corefcn/quad.cc
+++ b/libinterp/corefcn/quad.cc
@@ -174,43 +174,48 @@ quad_float_user_function (float x)
 
 DEFUN (quad, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{q} =} quad (@var{f}, @var{a}, @var{b})\n\
 @deftypefnx {Built-in Function} {@var{q} =} quad (@var{f}, @var{a}, @var{b}, @var{tol})\n\
 @deftypefnx {Built-in Function} {@var{q} =} quad (@var{f}, @var{a}, @var{b}, @var{tol}, @var{sing})\n\
 @deftypefnx {Built-in Function} {[@var{q}, @var{ier}, @var{nfun}, @var{err}] =} quad (@dots{})\n\
 Numerically evaluate the integral of @var{f} from @var{a} to @var{b} using\n\
-Fortran routines from @w{@sc{quadpack}}.  @var{f} is a function handle,\n\
-inline function, or a string containing the name of the function to\n\
-evaluate.  The function must have the form @code{y = f (x)} where @var{y} and\n\
-@var{x} are scalars.\n\
+Fortran routines from @w{@sc{quadpack}}.\n\
+\n\
+@var{f} is a function handle, inline function, or a string containing the\n\
+name of the function to evaluate.  The function must have the form @code{y =\n\
+f (x)} where @var{y} and @var{x} are scalars.\n\
 \n\
 @var{a} and @var{b} are the lower and upper limits of integration.  Either\n\
 or both may be infinite.\n\
 \n\
 The optional argument @var{tol} is a vector that specifies the desired\n\
 accuracy of the result.  The first element of the vector is the desired\n\
 absolute tolerance, and the second element is the desired relative\n\
 tolerance.  To choose a relative test only, set the absolute\n\
 tolerance to zero.  To choose an absolute test only, set the relative\n\
 tolerance to zero.  Both tolerances default to @code{sqrt (eps)} or\n\
 approximately @math{1.5e^{-8}}.\n\
 \n\
 The optional argument @var{sing} is a vector of values at which the\n\
 integrand is known to be singular.\n\
 \n\
-The result of the integration is returned in @var{q}.  @var{ier}\n\
-contains an integer error code (0 indicates a successful integration).\n\
+The result of the integration is returned in @var{q}.\n\
+\n\
+@var{ier} contains an integer error code (0 indicates a successful\n\
+integration).\n\
+\n\
 @var{nfun} indicates the number of function evaluations that were\n\
-made, and @var{err} contains an estimate of the error in the\n\
-solution.\n\
+made.\n\
 \n\
-The function @code{quad_options} can set other optional\n\
-parameters for @code{quad}.\n\
+@var{err} contains an estimate of the error in the solution.\n\
+\n\
+The function @code{quad_options} can set other optional parameters for\n\
+@code{quad}.\n\
 \n\
 Note: because @code{quad} is written in Fortran it cannot be called\n\
 recursively.  This prevents its use in integrating over more than one\n\
 variable by routines @code{dblquad} and @code{triplequad}.\n\
 @seealso{quad_options, quadv, quadl, quadgk, quadcc, trapz, dblquad, triplequad}\n\
 @end deftypefn")
 {
   octave_value_list retval;
diff --git a/libinterp/corefcn/quadcc.cc b/libinterp/corefcn/quadcc.cc
--- a/libinterp/corefcn/quadcc.cc
+++ b/libinterp/corefcn/quadcc.cc
@@ -1487,23 +1487,22 @@ downdate (double *c, int n, int d, int *
 
 DEFUN (quadcc, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Function File} {@var{q} =} quadcc (@var{f}, @var{a}, @var{b})\n\
 @deftypefnx {Function File} {@var{q} =} quadcc (@var{f}, @var{a}, @var{b}, @var{tol})\n\
 @deftypefnx {Function File} {@var{q} =} quadcc (@var{f}, @var{a}, @var{b}, @var{tol}, @var{sing})\n\
 @deftypefnx {Function File} {[@var{q}, @var{err}, @var{nr_points}] =} quadcc (@dots{})\n\
 Numerically evaluate the integral of @var{f} from @var{a} to @var{b}\n\
-using the doubly-adaptive @nospell{Clenshaw-Curtis} quadrature described by\n\
-@nospell{P. Gonnet} in @cite{Increasing the Reliability of Adaptive\n\
-Quadrature Using Explicit Interpolants}.\n\
-@var{f} is a function handle, inline function, or string\n\
-containing the name of the function to evaluate.\n\
-The function @var{f} must be vectorized and must return a vector of output\n\
-values if given a vector of input values.  For example,\n\
+using doubly-adaptive @nospell{Clenshaw-Curtis} quadrature.\n\
+\n\
+@var{f} is a function handle, inline function, or string containing the name\n\
+of the function to evaluate.  The function @var{f} must be vectorized and\n\
+must return a vector of output values if given a vector of input values. \n\
+For example,\n\
 \n\
 @example\n\
 f = @@(x) x .* sin (1./x) .* sqrt (abs (1 - x));\n\
 @end example\n\
 \n\
 @noindent\n\
 which uses the element-by-element ``dot'' form for all operators.\n\
 \n\
@@ -1520,37 +1519,40 @@ in any of its derivatives, inside the in
 For the example above, which has a discontinuity at x=1, the call to\n\
 @code{quadcc} would be as follows\n\
 \n\
 @example\n\
 int = quadcc (f, a, b, 1.0e-6, [ 1 ]);\n\
 @end example\n\
 \n\
 The result of the integration is returned in @var{q}.\n\
-@var{err} is an estimate of the absolute integration error and\n\
+\n\
+@var{err} is an estimate of the absolute integration error.\n\
+\n\
 @var{nr_points} is the number of points at which the integrand was evaluated.\n\
-If the adaptive integration did not converge, the value of\n\
-@var{err} will be larger than the requested tolerance.  Therefore, it is\n\
-recommended to verify this value for difficult integrands.\n\
+\n\
+If the adaptive integration did not converge, the value of @var{err} will be\n\
+larger than the requested tolerance.  Therefore, it is recommended to verify\n\
+this value for difficult integrands.\n\
 \n\
-@code{quadcc} is capable of dealing with non-numeric\n\
-values of the integrand such as @code{NaN} or @code{Inf}.\n\
-If the integral diverges, and @code{quadcc} detects this,\n\
-then a warning is issued and @code{Inf} or @code{-Inf} is returned.\n\
+@code{quadcc} is capable of dealing with non-numeric values of the integrand\n\
+such as @code{NaN} or @code{Inf}.  If the integral diverges, and\n\
+@code{quadcc} detects this, then a warning is issued and @code{Inf} or\n\
+@code{-Inf} is returned.\n\
 \n\
-Note: @code{quadcc} is a general purpose quadrature algorithm\n\
-and, as such, may be less efficient for a smooth or otherwise\n\
-well-behaved integrand than other methods such as @code{quadgk}.\n\
+Note: @code{quadcc} is a general purpose quadrature algorithm and, as such,\n\
+may be less efficient for a smooth or otherwise well-behaved integrand than\n\
+other methods such as @code{quadgk}.\n\
 \n\
 The algorithm uses @nospell{Clenshaw-Curtis} quadrature rules of increasing\n\
-degree in each interval and bisects the interval if either the\n\
-function does not appear to be smooth or a rule of maximum\n\
-degree has been reached.  The error estimate is computed from the\n\
-L2-norm of the difference between two successive interpolations\n\
-of the integrand over the nodes of the respective quadrature rules.\n\
+degree in each interval and bisects the interval if either the function does\n\
+not appear to be smooth or a rule of maximum degree has been reached.  The\n\
+error estimate is computed from the L2-norm of the difference between two\n\
+successive interpolations of the integrand over the nodes of the respective\n\
+quadrature rules.\n\
 \n\
 Reference: @nospell{P. Gonnet}, @cite{Increasing the Reliability of Adaptive\n\
 Quadrature Using Explicit Interpolants}, ACM Transactions on\n\
 Mathematical Software, Vol. 37, Issue 3, Article No. 3, 2010.\n\
 @seealso{quad, quadv, quadl, quadgk, trapz, dblquad, triplequad}\n\
 @end deftypefn")
 {
   octave_value_list retval;
diff --git a/libinterp/corefcn/qz.cc b/libinterp/corefcn/qz.cc
--- a/libinterp/corefcn/qz.cc
+++ b/libinterp/corefcn/qz.cc
@@ -291,33 +291,35 @@ fout (const octave_idx_type& lsize, cons
 
 //FIXME: Matlab does not produce lambda as the first output argument.
 //       Compatibility problem?
 DEFUN (qz, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{lambda} =} qz (@var{A}, @var{B})\n\
 @deftypefnx {Built-in Function} {@var{lambda} =} qz (@var{A}, @var{B}, @var{opt})\n\
 QZ@tie{}decomposition of the generalized eigenvalue problem\n\
-(@math{A x = s B x}).  There are three ways to call this function:\n\
+(@math{A x = s B x}).\n\
+\n\
+There are three ways to call this function:\n\
 @enumerate\n\
 @item @code{@var{lambda} = qz (@var{A}, @var{B})}\n\
 \n\
 Computes the generalized eigenvalues\n\
 @tex\n\
 $\\lambda$\n\
 @end tex\n\
 @ifnottex\n\
 @var{lambda}\n\
 @end ifnottex\n\
 of @math{(A - s B)}.\n\
 \n\
 @item @code{[AA, BB, Q, Z, V, W, @var{lambda}] = qz (@var{A}, @var{B})}\n\
 \n\
-Computes QZ@tie{}decomposition, generalized eigenvectors, and\n\
-generalized eigenvalues of @math{(A - s B)}\n\
+Computes QZ@tie{}decomposition, generalized eigenvectors, and generalized\n\
+eigenvalues of @math{(A - s B)}\n\
 @tex\n\
 $$ AV = BV{ \\rm diag }(\\lambda) $$\n\
 $$ W^T A = { \\rm diag }(\\lambda)W^T B $$\n\
 $$ AA = Q^T AZ, BB = Q^T BZ $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
@@ -330,26 +332,25 @@ AA = Q * A * Z, BB = Q * B * Z\n\
 @end group\n\
 @end example\n\
 \n\
 @end ifnottex\n\
 with @var{Q} and @var{Z} orthogonal (unitary)= @var{I}\n\
 \n\
 @item @code{[AA,BB,Z@{, @var{lambda}@}] = qz (@var{A}, @var{B}, @var{opt})}\n\
 \n\
-As in form [2], but allows ordering of generalized eigenpairs\n\
-for (e.g.) solution of discrete time algebraic Riccati equations.\n\
-Form 3 is not available for complex matrices, and does not compute\n\
-the generalized eigenvectors @var{V}, @var{W}, nor the orthogonal matrix\n\
-@var{Q}.\n\
+As in form [2], but allows ordering of generalized eigenpairs for, e.g.,\n\
+solution of discrete time algebraic Riccati equations.  Form 3 is not\n\
+available for complex matrices, and does not compute the generalized\n\
+eigenvectors @var{V}, @var{W}, nor the orthogonal matrix @var{Q}.\n\
 \n\
 @table @var\n\
 @item opt\n\
-for ordering eigenvalues of the @nospell{GEP} pencil.  The leading block\n\
-of the revised pencil contains all eigenvalues that satisfy:\n\
+for ordering eigenvalues of the @nospell{GEP} pencil.  The leading block of\n\
+the revised pencil contains all eigenvalues that satisfy:\n\
 \n\
 @table @asis\n\
 @item @qcode{\"N\"}\n\
 = unordered (default)\n\
 \n\
 @item @qcode{\"S\"}\n\
 = small: leading block has all |lambda| @leq{} 1\n\
 \n\
diff --git a/libinterp/corefcn/rand.cc b/libinterp/corefcn/rand.cc
--- a/libinterp/corefcn/rand.cc
+++ b/libinterp/corefcn/rand.cc
@@ -372,86 +372,84 @@ DEFUN (rand, args, ,
 @deftypefnx {Built-in Function} {} rand (\"state\", @var{v})\n\
 @deftypefnx {Built-in Function} {} rand (\"state\", \"reset\")\n\
 @deftypefnx {Built-in Function} {@var{v} =} rand (\"seed\")\n\
 @deftypefnx {Built-in Function} {} rand (\"seed\", @var{v})\n\
 @deftypefnx {Built-in Function} {} rand (\"seed\", \"reset\")\n\
 @deftypefnx {Built-in Function} {} rand (@dots{}, \"single\")\n\
 @deftypefnx {Built-in Function} {} rand (@dots{}, \"double\")\n\
 Return a matrix with random elements uniformly distributed on the\n\
-interval (0, 1).  The arguments are handled the same as the arguments\n\
-for @code{eye}.\n\
+interval (0, 1).\n\
 \n\
-You can query the state of the random number generator using the\n\
-form\n\
+The arguments are handled the same as the arguments for @code{eye}.\n\
+\n\
+You can query the state of the random number generator using the form\n\
 \n\
 @example\n\
 v = rand (\"state\")\n\
 @end example\n\
 \n\
-This returns a column vector @var{v} of length 625.  Later, you can\n\
-restore the random number generator to the state @var{v}\n\
-using the form\n\
+This returns a column vector @var{v} of length 625.  Later, you can restore\n\
+the random number generator to the state @var{v} using the form\n\
 \n\
 @example\n\
 rand (\"state\", v)\n\
 @end example\n\
 \n\
 @noindent\n\
-You may also initialize the state vector from an arbitrary vector of\n\
-length @leq{} 625 for @var{v}.  This new state will be a hash based on the\n\
-value of @var{v}, not @var{v} itself.\n\
+You may also initialize the state vector from an arbitrary vector of length\n\
+@leq{} 625 for @var{v}.  This new state will be a hash based on the value of\n\
+@var{v}, not @var{v} itself.\n\
 \n\
 By default, the generator is initialized from @code{/dev/urandom} if it is\n\
 available, otherwise from CPU time, wall clock time, and the current\n\
 fraction of a second.  Note that this differs from @sc{matlab}, which\n\
 always initializes the state to the same state at startup.  To obtain\n\
 behavior comparable to @sc{matlab}, initialize with a deterministic state\n\
 vector in Octave's startup files (@pxref{Startup Files}).\n\
 \n\
 To compute the pseudo-random sequence, @code{rand} uses the Mersenne\n\
-Twister with a period of @math{2^{19937}-1} (See\n\
-@nospell{M. Matsumoto and T. Nishimura},\n\
+Twister with a period of @math{2^{19937}-1}\n\
+(See @nospell{M. Matsumoto and T. Nishimura},\n\
 @cite{Mersenne Twister: A 623-dimensionally equidistributed uniform\n\
-pseudorandom number generator}, ACM Trans. on\n\
-Modeling and Computer Simulation Vol. 8, No. 1, pp. 3-30, January 1998,\n\
+pseudorandom number generator},\n\
+ACM Trans. on Modeling and Computer Simulation Vol. 8, No. 1, pp. 3--30,\n\
+January 1998,\n\
 @url{http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html}).\n\
-Do @strong{not} use for cryptography without securely hashing\n\
-several returned values together, otherwise the generator state\n\
-can be learned after reading 624 consecutive values.\n\
+Do @strong{not} use for cryptography without securely hashing several\n\
+returned values together, otherwise the generator state can be learned after\n\
+reading 624 consecutive values.\n\
 \n\
 Older versions of Octave used a different random number generator.\n\
-The new generator is used by default\n\
-as it is significantly faster than the old generator, and produces\n\
-random numbers with a significantly longer cycle time.  However, in\n\
-some circumstances it might be desirable to obtain the same random\n\
-sequences as used by the old generators.  To do this the keyword\n\
-@qcode{\"seed\"} is used to specify that the old generators should be use,\n\
-as in\n\
+The new generator is used by default as it is significantly faster than the\n\
+old generator, and produces random numbers with a significantly longer cycle\n\
+time.  However, in some circumstances it might be desirable to obtain the\n\
+same random sequences as produced by the old generators.  To do this the\n\
+keyword @qcode{\"seed\"} is used to specify that the old generators should\n\
+be used, as in\n\
 \n\
 @example\n\
 rand (\"seed\", val)\n\
 @end example\n\
 \n\
 @noindent\n\
 which sets the seed of the generator to @var{val}.  The seed of the\n\
 generator can be queried with\n\
 \n\
 @example\n\
 s = rand (\"seed\")\n\
 @end example\n\
 \n\
 However, it should be noted that querying the seed will not cause\n\
-@code{rand} to use the old generators, only setting the seed will.\n\
-To cause @code{rand} to once again use the new generators, the\n\
-keyword @qcode{\"state\"} should be used to reset the state of the\n\
-@code{rand}.\n\
+@code{rand} to use the old generators, only setting the seed will.  To cause\n\
+@code{rand} to once again use the new generators, the keyword\n\
+@qcode{\"state\"} should be used to reset the state of the @code{rand}.\n\
 \n\
-The state or seed of the generator can be reset to a new random value\n\
-using the @qcode{\"reset\"} keyword.\n\
+The state or seed of the generator can be reset to a new random value using\n\
+the @qcode{\"reset\"} keyword.\n\
 \n\
 The class of the value returned can be controlled by a trailing\n\
 @qcode{\"double\"} or @qcode{\"single\"} argument.  These are the only valid\n\
 classes.\n\
 @seealso{randn, rande, randg, randp}\n\
 @end deftypefn")
 {
   octave_value retval;
@@ -558,19 +556,20 @@ DEFUN (randn, args, ,
 @deftypefnx {Built-in Function} {@var{v} =} randn (\"state\")\n\
 @deftypefnx {Built-in Function} {} randn (\"state\", @var{v})\n\
 @deftypefnx {Built-in Function} {} randn (\"state\", \"reset\")\n\
 @deftypefnx {Built-in Function} {@var{v} =} randn (\"seed\")\n\
 @deftypefnx {Built-in Function} {} randn (\"seed\", @var{v})\n\
 @deftypefnx {Built-in Function} {} randn (\"seed\", \"reset\")\n\
 @deftypefnx {Built-in Function} {} randn (@dots{}, \"single\")\n\
 @deftypefnx {Built-in Function} {} randn (@dots{}, \"double\")\n\
-Return a matrix with normally distributed random\n\
-elements having zero mean and variance one.  The arguments are\n\
-handled the same as the arguments for @code{rand}.\n\
+Return a matrix with normally distributed random elements having zero mean\n\
+and variance one.\n\
+\n\
+The arguments are handled the same as the arguments for @code{rand}.\n\
 \n\
 By default, @code{randn} uses the @nospell{Marsaglia and Tsang}\n\
 ``Ziggurat technique'' to transform from a uniform to a normal distribution.\n\
 \n\
 The class of the value returned can be controlled by a trailing\n\
 @qcode{\"double\"} or @qcode{\"single\"} argument.  These are the only valid\n\
 classes.\n\
 \n\
@@ -630,18 +629,19 @@ DEFUN (rande, args, ,
 @deftypefnx {Built-in Function} {@var{v} =} rande (\"state\")\n\
 @deftypefnx {Built-in Function} {} rande (\"state\", @var{v})\n\
 @deftypefnx {Built-in Function} {} rande (\"state\", \"reset\")\n\
 @deftypefnx {Built-in Function} {@var{v} =} rande (\"seed\")\n\
 @deftypefnx {Built-in Function} {} rande (\"seed\", @var{v})\n\
 @deftypefnx {Built-in Function} {} rande (\"seed\", \"reset\")\n\
 @deftypefnx {Built-in Function} {} rande (@dots{}, \"single\")\n\
 @deftypefnx {Built-in Function} {} rande (@dots{}, \"double\")\n\
-Return a matrix with exponentially distributed random elements.  The\n\
-arguments are handled the same as the arguments for @code{rand}.\n\
+Return a matrix with exponentially distributed random elements.\n\
+\n\
+The arguments are handled the same as the arguments for @code{rand}.\n\
 \n\
 By default, @code{randn} uses the @nospell{Marsaglia and Tsang}\n\
 ``Ziggurat technique'' to transform from a uniform to a normal distribution.\n\
 \n\
 The class of the value returned can be controlled by a trailing\n\
 @qcode{\"double\"} or @qcode{\"single\"} argument.  These are the only valid\n\
 classes.\n\
 \n\
@@ -704,18 +704,19 @@ DEFUN (randg, args, ,
 @deftypefnx {Built-in Function} {} randg (\"state\", @var{v})\n\
 @deftypefnx {Built-in Function} {} randg (\"state\", \"reset\")\n\
 @deftypefnx {Built-in Function} {@var{v} =} randg (\"seed\")\n\
 @deftypefnx {Built-in Function} {} randg (\"seed\", @var{v})\n\
 @deftypefnx {Built-in Function} {} randg (\"seed\", \"reset\")\n\
 @deftypefnx {Built-in Function} {} randg (@dots{}, \"single\")\n\
 @deftypefnx {Built-in Function} {} randg (@dots{}, \"double\")\n\
 Return a matrix with @code{gamma (@var{a},1)} distributed random elements.\n\
-The arguments are handled the same as the arguments for @code{rand},\n\
-except for the argument @var{a}.\n\
+\n\
+The arguments are handled the same as the arguments for @code{rand}, except\n\
+for the argument @var{a}.\n\
 \n\
 This can be used to generate many distributions:\n\
 \n\
 @table @asis\n\
 @item @code{gamma (a, b)} for @code{a > -1}, @code{b > 0}\n\
 \n\
 @example\n\
 r = b * randg (a)\n\
@@ -981,22 +982,23 @@ DEFUN (randp, args, ,
 @deftypefnx {Built-in Function} {} randp (\"state\", @var{v})\n\
 @deftypefnx {Built-in Function} {} randp (\"state\", \"reset\")\n\
 @deftypefnx {Built-in Function} {@var{v} =} randp (\"seed\")\n\
 @deftypefnx {Built-in Function} {} randp (\"seed\", @var{v})\n\
 @deftypefnx {Built-in Function} {} randp (\"seed\", \"reset\")\n\
 @deftypefnx {Built-in Function} {} randp (@dots{}, \"single\")\n\
 @deftypefnx {Built-in Function} {} randp (@dots{}, \"double\")\n\
 Return a matrix with Poisson distributed random elements with mean value\n\
-parameter given by the first argument, @var{l}.  The arguments\n\
-are handled the same as the arguments for @code{rand}, except for the\n\
-argument @var{l}.\n\
+parameter given by the first argument, @var{l}.\n\
 \n\
-Five different algorithms are used depending on the range of @var{l}\n\
-and whether or not @var{l} is a scalar or a matrix.\n\
+The arguments are handled the same as the arguments for @code{rand}, except\n\
+for the argument @var{l}.\n\
+\n\
+Five different algorithms are used depending on the range of @var{l} and\n\
+whether or not @var{l} is a scalar or a matrix.\n\
 \n\
 @table @asis\n\
 @item For scalar @var{l} @leq{} 12, use direct method.\n\
 W.H. Press, et al., @cite{Numerical Recipes in C},\n\
 Cambridge University Press, 1992.\n\
 \n\
 @item For scalar @var{l} > 12, use rejection method.[1]\n\
 W.H. Press, et al., @cite{Numerical Recipes in C},\n\
@@ -1120,21 +1122,24 @@ classes.\n\
 %! endif
 */
 
 DEFUN (randperm, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} randperm (@var{n})\n\
 @deftypefnx {Built-in Function} {} randperm (@var{n}, @var{m})\n\
 Return a row vector containing a random permutation of @code{1:@var{n}}.\n\
+\n\
 If @var{m} is supplied, return @var{m} unique entries, sampled without\n\
-replacement from @code{1:@var{n}}.  The complexity is O(@var{n}) in\n\
-memory and O(@var{m}) in time, unless @var{m} < @var{n}/5, in which case\n\
-O(@var{m}) memory is used as well.  The randomization is performed using\n\
-rand().  All permutations are equally likely.\n\
+replacement from @code{1:@var{n}}.\n\
+\n\
+The complexity is O(@var{n}) in memory and O(@var{m}) in time, unless\n\
+@var{m} < @var{n}/5, in which case O(@var{m}) memory is used as well.  The\n\
+randomization is performed using rand().  All permutations are equally\n\
+likely.\n\
 @seealso{perms}\n\
 @end deftypefn")
 {
 
 #ifdef USE_UNORDERED_MAP_WITH_TR1
 using std::tr1::unordered_map;
 #else
 using std::unordered_map;
diff --git a/libinterp/corefcn/rcond.cc b/libinterp/corefcn/rcond.cc
--- a/libinterp/corefcn/rcond.cc
+++ b/libinterp/corefcn/rcond.cc
@@ -29,18 +29,20 @@ along with Octave; see the file COPYING.
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 DEFUN (rcond, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{c} =} rcond (@var{A})\n\
 Compute the 1-norm estimate of the reciprocal condition number as returned\n\
-by @sc{lapack}.  If the matrix is well-conditioned then @var{c} will be near\n\
-1 and if the matrix is poorly conditioned it will be close to zero.\n\
+by @sc{lapack}.\n\
+\n\
+If the matrix is well-conditioned then @var{c} will be near 1 and if the\n\
+matrix is poorly conditioned it will be close to 0.\n\
 \n\
 The matrix @var{A} must not be sparse.  If the matrix is sparse then\n\
 @code{condest (@var{A})} or @code{rcond (full (@var{A}))} should be used\n\
 instead.\n\
 @seealso{cond, condest}\n\
 @end deftypefn")
 {
   octave_value retval;
diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -584,19 +584,20 @@ octcellregexp (const octave_value_list &
   return retval;
 
 }
 
 DEFUN (regexp, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{s}, @var{e}, @var{te}, @var{m}, @var{t}, @var{nm}, @var{sp}] =} regexp (@var{str}, @var{pat})\n\
 @deftypefnx {Built-in Function} {[@dots{}] =} regexp (@var{str}, @var{pat}, \"@var{opt1}\", @dots{})\n\
-Regular expression string matching.  Search for @var{pat} in @var{str} and\n\
-return the positions and substrings of any matches, or empty values if there\n\
-are none.\n\
+Regular expression string matching.\n\
+\n\
+Search for @var{pat} in @var{str} and return the positions and substrings of\n\
+any matches, or empty values if there are none.\n\
 \n\
 The matched pattern @var{pat} can include any of the standard regex\n\
 operators, including:\n\
 \n\
 @table @code\n\
 @item .\n\
 Match any character\n\
 \n\
@@ -624,19 +625,18 @@ Match between @var{m} and @var{n} times\
 @end table\n\
 \n\
 @item [@dots{}] [^@dots{}]\n\
 \n\
 List operators.  The pattern will match any character listed between \"[\"\n\
 and \"]\".  If the first character is \"^\" then the pattern is inverted and\n\
 any character except those listed between brackets will match.\n\
 \n\
-Escape sequences defined below can also be used inside list\n\
-operators.  For example, a template for a floating point number might be\n\
-@code{[-+.\\d]+}.\n\
+Escape sequences defined below can also be used inside list operators.  For\n\
+example, a template for a floating point number might be @code{[-+.\\d]+}.\n\
 \n\
 @item () (?:)\n\
 Grouping operator.  The first form, parentheses only, also creates a token.\n\
 \n\
 @item |\n\
 Alternation operator.  Match one of a choice of regular expressions.  The\n\
 alternatives must be delimited by the grouping operator @code{()} above.\n\
 \n\
@@ -1067,20 +1067,21 @@ are zero or more @qcode{'b'} characters 
 %!assert (regexp ("\n", "\n"), 1);
 */
 
 DEFUN (regexpi, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {[@var{s}, @var{e}, @var{te}, @var{m}, @var{t}, @var{nm}, @var{sp}] =} regexpi (@var{str}, @var{pat})\n\
 @deftypefnx {Built-in Function} {[@dots{}] =} regexpi (@var{str}, @var{pat}, \"@var{opt1}\", @dots{})\n\
 \n\
-Case insensitive regular expression string matching.  Search for @var{pat} in\n\
-@var{str} and return the positions and substrings of any matches, or empty\n\
-values if there are none.  @xref{XREFregexp,,regexp}, for details on the\n\
-syntax of the search pattern.\n\
+Case insensitive regular expression string matching.\n\
+\n\
+Search for @var{pat} in @var{str} and return the positions and substrings of\n\
+any matches, or empty values if there are none.  @xref{XREFregexp,,regexp},\n\
+for details on the syntax of the search pattern.\n\
 @seealso{regexp}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin < 2)
@@ -1283,18 +1284,18 @@ DEFUN (regexprep, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{outstr} =} regexprep (@var{string}, @var{pat}, @var{repstr})\n\
 @deftypefnx {Built-in Function} {@var{outstr} =} regexprep (@var{string}, @var{pat}, @var{repstr}, \"@var{opt1}\", @dots{})\n\
 Replace occurrences of pattern @var{pat} in @var{string} with @var{repstr}.\n\
 \n\
 The pattern is a regular expression as documented for @code{regexp}.\n\
 @xref{XREFregexp,,regexp}.\n\
 \n\
-The replacement string may contain @code{$i}, which substitutes\n\
-for the ith set of parentheses in the match string.  For example,\n\
+The replacement string may contain @code{$i}, which substitutes for the ith\n\
+set of parentheses in the match string.  For example,\n\
 \n\
 @example\n\
 regexprep (\"Bill Dunn\", '(\\w+) (\\w+)', '$2, $1')\n\
 @end example\n\
 \n\
 @noindent\n\
 returns \"Dunn, Bill\"\n\
 \n\
diff --git a/libinterp/corefcn/schur.cc b/libinterp/corefcn/schur.cc
--- a/libinterp/corefcn/schur.cc
+++ b/libinterp/corefcn/schur.cc
@@ -60,17 +60,19 @@ mark_upper_triangular (const Matrix& a)
 DEFUN (schur, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{S} =} schur (@var{A})\n\
 @deftypefnx {Built-in Function} {@var{S} =} schur (@var{A}, \"real\")\n\
 @deftypefnx {Built-in Function} {@var{S} =} schur (@var{A}, \"complex\")\n\
 @deftypefnx {Built-in Function} {@var{S} =} schur (@var{A}, @var{opt})\n\
 @deftypefnx {Built-in Function} {[@var{U}, @var{S}] =} schur (@dots{})\n\
 @cindex Schur decomposition\n\
-Compute the Schur@tie{}decomposition of @var{A}\n\
+Compute the Schur@tie{}decomposition of @var{A}.\n\
+\n\
+The Schur@tie{}decomposition is defined as\n\
 @tex\n\
 $$\n\
  S = U^T A U\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
 @example\n\
@@ -81,20 +83,20 @@ Compute the Schur@tie{}decomposition of 
 where @var{U} is a unitary matrix\n\
 @tex\n\
 ($U^T U$ is identity)\n\
 @end tex\n\
 @ifnottex\n\
 (@code{@var{U}'* @var{U}} is identity)\n\
 @end ifnottex\n\
 and @var{S} is upper triangular.  The eigenvalues of @var{A} (and @var{S})\n\
-are the diagonal elements of @var{S}.  If the matrix @var{A}\n\
-is real, then the real Schur@tie{}decomposition is computed, in which the\n\
-matrix @var{U} is orthogonal and @var{S} is block upper triangular\n\
-with blocks of size at most\n\
+are the diagonal elements of @var{S}.  If the matrix @var{A} is real, then\n\
+the real Schur@tie{}decomposition is computed, in which the matrix @var{U}\n\
+is orthogonal and @var{S} is block upper triangular with blocks of size at\n\
+most\n\
 @tex\n\
 $2 \\times 2$\n\
 @end tex\n\
 @ifnottex\n\
 @code{2 x 2}\n\
 @end ifnottex\n\
 along the diagonal.  The diagonal elements of @var{S}\n\
 (or the eigenvalues of the\n\
@@ -105,30 +107,29 @@ along the diagonal.  The diagonal elemen
 @code{2 x 2}\n\
 @end ifnottex\n\
 blocks, when appropriate) are the eigenvalues of @var{A} and @var{S}.\n\
 \n\
 The default for real matrices is a real Schur@tie{}decomposition.\n\
 A complex decomposition may be forced by passing the flag\n\
 @qcode{\"complex\"}.\n\
 \n\
-The eigenvalues are optionally ordered along the diagonal according to\n\
-the value of @var{opt}.  @code{@var{opt} = \"a\"} indicates that all\n\
-eigenvalues with negative real parts should be moved to the leading\n\
-block of @var{S}\n\
-(used in @code{are}), @code{@var{opt} = \"d\"} indicates that all eigenvalues\n\
-with magnitude less than one should be moved to the leading block of @var{S}\n\
-(used in @code{dare}), and @code{@var{opt} = \"u\"}, the default, indicates\n\
-that no ordering of eigenvalues should occur.  The leading @var{k}\n\
-columns of @var{U} always span the @var{A}-invariant\n\
+The eigenvalues are optionally ordered along the diagonal according to the\n\
+value of @var{opt}.  @code{@var{opt} = \"a\"} indicates that all eigenvalues\n\
+with negative real parts should be moved to the leading block of @var{S}\n\
+(used in @code{are}), @code{@var{opt} = \"d\"} indicates that all\n\
+eigenvalues with magnitude less than one should be moved to the leading\n\
+block of @var{S} (used in @code{dare}), and @code{@var{opt} = \"u\"}, the\n\
+default, indicates that no ordering of eigenvalues should occur.  The\n\
+leading @var{k} columns of @var{U} always span the @var{A}-invariant\n\
 subspace corresponding to the @var{k} leading eigenvalues of @var{S}.\n\
 \n\
-The Schur@tie{}decomposition is used to compute eigenvalues of a\n\
-square matrix, and has applications in the solution of algebraic\n\
-Riccati equations in control (see @code{are} and @code{dare}).\n\
+The Schur@tie{}decomposition is used to compute eigenvalues of a square\n\
+matrix, and has applications in the solution of algebraic Riccati equations\n\
+in control (see @code{are} and @code{dare}).\n\
 @seealso{rsf2csf, ordschur, lu, chol, hess, qr, qz, svd}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2 || nargout > 2)
diff --git a/libinterp/corefcn/sighandlers.cc b/libinterp/corefcn/sighandlers.cc
--- a/libinterp/corefcn/sighandlers.cc
+++ b/libinterp/corefcn/sighandlers.cc
@@ -1075,21 +1075,23 @@ Return a structure containing Unix signa
 
 DEFUN (debug_on_interrupt, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} debug_on_interrupt ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} debug_on_interrupt (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} debug_on_interrupt (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave will try\n\
 to enter debugging mode when it receives an interrupt signal (typically\n\
-generated with @kbd{C-c}).  If a second interrupt signal is received\n\
-before reaching the debugging mode, a normal interrupt will occur.\n\
+generated with @kbd{C-c}).\n\
+\n\
+If a second interrupt signal is received before reaching the debugging mode,\n\
+a normal interrupt will occur.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{debug_on_error, debug_on_warning}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (debug_on_interrupt);
 }
 
 /*
@@ -1109,17 +1111,17 @@ DEFUN (sighup_dumps_octave_core, args, n
 @deftypefn  {Built-in Function} {@var{val} =} sighup_dumps_octave_core ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} sighup_dumps_octave_core (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} sighup_dumps_octave_core (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave tries\n\
 to save all current variables to the file @file{octave-workspace} if it\n\
 receives a hangup signal.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (sighup_dumps_octave_core);
 }
 
 /*
 %!test
@@ -1138,17 +1140,17 @@ DEFUN (sigterm_dumps_octave_core, args, 
 @deftypefn  {Built-in Function} {@var{val} =} sigterm_dumps_octave_core ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} sigterm_dumps_octave_core (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} sigterm_dumps_octave_core (@var{new_val}, \"local\")\n\
 Query or set the internal variable that controls whether Octave tries\n\
 to save all current variables to the file @file{octave-workspace} if it\n\
 receives a terminate signal.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (sigterm_dumps_octave_core);
 }
 
 /*
 %!test
diff --git a/libinterp/corefcn/sparse.cc b/libinterp/corefcn/sparse.cc
--- a/libinterp/corefcn/sparse.cc
+++ b/libinterp/corefcn/sparse.cc
@@ -60,17 +60,17 @@ Return true if @var{x} is a sparse matri
 DEFUN (sparse, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{s} =} sparse (@var{a})\n\
 @deftypefnx {Built-in Function} {@var{s} =} sparse (@var{i}, @var{j}, @var{sv}, @var{m}, @var{n})\n\
 @deftypefnx {Built-in Function} {@var{s} =} sparse (@var{i}, @var{j}, @var{sv})\n\
 @deftypefnx {Built-in Function} {@var{s} =} sparse (@var{m}, @var{n})\n\
 @deftypefnx {Built-in Function} {@var{s} =} sparse (@var{i}, @var{j}, @var{s}, @var{m}, @var{n}, \"unique\")\n\
 @deftypefnx {Built-in Function} {@var{s} =} sparse (@var{i}, @var{j}, @var{sv}, @var{m}, @var{n}, @var{nzmax})\n\
-Create a sparse matrix from a full matrix or row, column, value triplets.\n\
+Create a sparse matrix from a full matrix, or row, column, value triplets.\n\
 \n\
 If @var{a} is a full matrix, convert it to a sparse matrix representation,\n\
 removing all zero values in the process.\n\
 \n\
 Given the integer index vectors @var{i} and @var{j}, and a 1-by-@code{nnz}\n\
 vector of real or complex values @var{sv}, construct the sparse matrix\n\
 @code{S(@var{i}(@var{k}),@var{j}(@var{k})) = @var{sv}(@var{k})} with overall\n\
 dimensions @var{m} and @var{n}.  If any of @var{sv}, @var{i} or @var{j} are\n\
@@ -96,31 +96,31 @@ The argument @code{nzmax} is ignored but
 @sc{matlab}.\n\
 \n\
 Example 1 (sum at repeated indices):\n\
 \n\
 @example\n\
 @group\n\
 @var{i} = [1 1 2]; @var{j} = [1 1 2]; @var{sv} = [3 4 5];\n\
 sparse (@var{i}, @var{j}, @var{sv}, 3, 4)\n\
-@result{} \n\
+@result{}\n\
 Compressed Column Sparse (rows = 3, cols = 4, nnz = 2 [17%])\n\
 \n\
   (1, 1) ->  7\n\
   (2, 2) ->  5\n\
 @end group\n\
 @end example\n\
 \n\
 Example 2 (\"unique\" option):\n\
 \n\
 @example\n\
 @group\n\
 @var{i} = [1 1 2]; @var{j} = [1 1 2]; @var{sv} = [3 4 5];\n\
 sparse (@var{i}, @var{j}, @var{sv}, 3, 4, \"unique\")\n\
-@result{} \n\
+@result{}\n\
 Compressed Column Sparse (rows = 3, cols = 4, nnz = 2 [17%])\n\
 \n\
   (1, 1) ->  4\n\
   (2, 2) ->  5\n\
 @end group\n\
 @end example\n\
 @seealso{full, accumarray, spalloc, spdiags, speye, spones, sprand, sprandn, sprandsym, spconvert, spfun}\n\
 @end deftypefn")
diff --git a/libinterp/corefcn/spparms.cc b/libinterp/corefcn/spparms.cc
--- a/libinterp/corefcn/spparms.cc
+++ b/libinterp/corefcn/spparms.cc
@@ -39,20 +39,22 @@ DEFUN (spparms, args, nargout,
 @deftypefnx {Built-in Function} {@var{vals} =} spparms ()\n\
 @deftypefnx {Built-in Function} {[@var{keys}, @var{vals}] =} spparms ()\n\
 @deftypefnx {Built-in Function} {@var{val} =} spparms (@var{key})\n\
 @deftypefnx {Built-in Function} { } spparms (@var{vals})\n\
 @deftypefnx {Built-in Function} { } spparms (\"default\")\n\
 @deftypefnx {Built-in Function} { } spparms (\"tight\")\n\
 @deftypefnx {Built-in Function} { } spparms (@var{key}, @var{val})\n\
 Query or set the parameters used by the sparse solvers and factorization\n\
-functions.  The first four calls above get information about the current\n\
-settings, while the others change the current settings.  The parameters are\n\
-stored as pairs of keys and values, where the values are all floats and the\n\
-keys are one of the following strings:\n\
+functions.\n\
+\n\
+The first four calls above get information about the current settings, while\n\
+the others change the current settings.  The parameters are stored as pairs\n\
+of keys and values, where the values are all floats and the keys are one of\n\
+the following strings:\n\
 \n\
 @table @samp\n\
 @item spumoni\n\
 Printing level of debugging information of the solvers (default 0)\n\
 \n\
 @item ths_rel\n\
 Included for compatibility.  Not used.  (default 1)\n\
 \n\
diff --git a/libinterp/corefcn/str2double.cc b/libinterp/corefcn/str2double.cc
--- a/libinterp/corefcn/str2double.cc
+++ b/libinterp/corefcn/str2double.cc
@@ -294,18 +294,18 @@ str2double1 (const std::string& str_arg)
   return val;
 }
 
 DEFUN (str2double, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} str2double (@var{s})\n\
 Convert a string to a real or complex number.\n\
 \n\
-The string must be in one of the following formats where\n\
-a and b are real numbers and the complex unit is @qcode{'i'} or @qcode{'j'}:\n\
+The string must be in one of the following formats where a and b are real\n\
+numbers and the complex unit is @qcode{'i'} or @qcode{'j'}:\n\
 \n\
 @itemize\n\
 @item a + bi\n\
 \n\
 @item a + b*i\n\
 \n\
 @item a + i*b\n\
 \n\
@@ -316,22 +316,22 @@ a and b are real numbers and the complex
 @item i*b + a\n\
 @end itemize\n\
 \n\
 If present, a and/or b are of the form @nospell{[+-]d[,.]d[[eE][+-]d]} where\n\
 the brackets indicate optional arguments and @qcode{'d'} indicates zero or\n\
 more digits.  The special input values @code{Inf}, @code{NaN}, and @code{NA}\n\
 are also accepted.\n\
 \n\
-@var{s} may be a character string, character matrix, or cell array.\n\
-For character arrays the conversion is repeated for every row, and\n\
-a double or complex array is returned.  Empty rows in @var{s} are deleted\n\
-and not returned in the numeric array.  For cell arrays each character\n\
-string element is processed and a double or complex array of the same\n\
-dimensions as @var{s} is returned.\n\
+@var{s} may be a character string, character matrix, or cell array.  For\n\
+character arrays the conversion is repeated for every row, and a double or\n\
+complex array is returned.  Empty rows in @var{s} are deleted and not\n\
+returned in the numeric array.  For cell arrays each character string\n\
+element is processed and a double or complex array of the same dimensions as\n\
+@var{s} is returned.\n\
 \n\
 For unconvertible scalar or character string input @code{str2double} returns\n\
 a NaN@.  Similarly, for character array input @code{str2double} returns a\n\
 NaN for any row of @var{s} that could not be converted.  For a cell array,\n\
 @code{str2double} returns a NaN for any element of @var{s} for which\n\
 conversion fails.  Note that numeric elements in a mixed string/numeric\n\
 cell array are not strings and the conversion will fail for these elements\n\
 and return NaN.\n\
diff --git a/libinterp/corefcn/strfind.cc b/libinterp/corefcn/strfind.cc
--- a/libinterp/corefcn/strfind.cc
+++ b/libinterp/corefcn/strfind.cc
@@ -148,28 +148,29 @@ qs_search (const Array<char>& needle,
   return result;
 }
 
 DEFUN (strfind, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{idx} =} strfind (@var{str}, @var{pattern})\n\
 @deftypefnx {Built-in Function} {@var{idx} =} strfind (@var{cellstr}, @var{pattern})\n\
 @deftypefnx {Built-in Function} {@var{idx} =} strfind (@dots{}, \"overlaps\", @var{val})\n\
-Search for @var{pattern} in the string @var{str} and return the\n\
-starting index of every such occurrence in the vector @var{idx}.\n\
+Search for @var{pattern} in the string @var{str} and return the starting\n\
+index of every such occurrence in the vector @var{idx}.\n\
 \n\
-If there is no such occurrence, or if @var{pattern} is longer\n\
-than @var{str}, or if @var{pattern} itself is empty, then @var{idx} is the\n\
-empty array @code{[]}.\n\
+If there is no such occurrence, or if @var{pattern} is longer than\n\
+@var{str}, or if @var{pattern} itself is empty, then @var{idx} is the empty\n\
+array @code{[]}.\n\
+\n\
 The optional argument @qcode{\"overlaps\"} determines whether the pattern\n\
 can match at every position in @var{str} (true), or only for unique\n\
 occurrences of the complete pattern (false).  The default is true.\n\
 \n\
-If a cell array of strings @var{cellstr} is specified\n\
-then @var{idx} is a cell array of vectors, as specified above.\n\
+If a cell array of strings @var{cellstr} is specified then @var{idx} is a\n\
+cell array of vectors, as specified above.\n\
 \n\
 Examples:\n\
 \n\
 @example\n\
 @group\n\
 strfind (\"abababa\", \"aba\")\n\
      @result{} [1, 3, 5]\n\
 \n\
diff --git a/libinterp/corefcn/strfns.cc b/libinterp/corefcn/strfns.cc
--- a/libinterp/corefcn/strfns.cc
+++ b/libinterp/corefcn/strfns.cc
@@ -42,29 +42,29 @@ along with Octave; see the file COPYING.
 
 DEFUN (char, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} char (@var{x})\n\
 @deftypefnx {Built-in Function} {} char (@var{x}, @dots{})\n\
 @deftypefnx {Built-in Function} {} char (@var{s1}, @var{s2}, @dots{})\n\
 @deftypefnx {Built-in Function} {} char (@var{cell_array})\n\
 Create a string array from one or more numeric matrices, character\n\
-matrices, or cell arrays.  Arguments are concatenated vertically.\n\
-The returned values are padded with blanks as needed to make each row\n\
-of the string array have the same length.  Empty input strings are\n\
-significant and will concatenated in the output.\n\
+matrices, or cell arrays.\n\
 \n\
-For numerical input, each element is converted\n\
-to the corresponding ASCII character.  A range error results if an input\n\
-is outside the ASCII range (0-255).\n\
+Arguments are concatenated vertically.  The returned values are padded with\n\
+blanks as needed to make each row of the string array have the same length. \n\
+Empty input strings are significant and will concatenated in the output.\n\
+\n\
+For numerical input, each element is converted to the corresponding ASCII\n\
+character.  A range error results if an input is outside the ASCII range\n\
+(0-255).\n\
 \n\
 For cell arrays, each element is concatenated separately.  Cell arrays\n\
-converted through\n\
-@code{char} can mostly be converted back with @code{cellstr}.\n\
-For example:\n\
+converted through @code{char} can mostly be converted back with\n\
+@code{cellstr}.  For example:\n\
 \n\
 @example\n\
 @group\n\
 char ([97, 98, 99], \"\", @{\"98\", \"99\", 100@}, \"str1\", [\"ha\", \"lf\"])\n\
    @result{} [\"abc    \"\n\
        \"       \"\n\
        \"98     \"\n\
        \"99     \"\n\
@@ -173,29 +173,30 @@ char ([97, 98, 99], \"\", @{\"98\", \"99
 
 DEFUN (strvcat, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} strvcat (@var{x})\n\
 @deftypefnx {Built-in Function} {} strvcat (@var{x}, @dots{})\n\
 @deftypefnx {Built-in Function} {} strvcat (@var{s1}, @var{s2}, @dots{})\n\
 @deftypefnx {Built-in Function} {} strvcat (@var{cell_array})\n\
 Create a character array from one or more numeric matrices, character\n\
-matrices, or cell arrays.  Arguments are concatenated vertically.\n\
-The returned values are padded with blanks as needed to make each row\n\
-of the string array have the same length.  Unlike @code{char}, empty\n\
-strings are removed and will not appear in the output.\n\
+matrices, or cell arrays.\n\
 \n\
-For numerical input, each element is converted\n\
-to the corresponding ASCII character.  A range error results if an input\n\
-is outside the ASCII range (0-255).\n\
+Arguments are concatenated vertically.  The returned values are padded with\n\
+blanks as needed to make each row of the string array have the same length. \n\
+Unlike @code{char}, empty strings are removed and will not appear in the\n\
+output.\n\
+\n\
+For numerical input, each element is converted to the corresponding ASCII\n\
+character.  A range error results if an input is outside the ASCII range\n\
+(0-255).\n\
 \n\
 For cell arrays, each element is concatenated separately.  Cell arrays\n\
-converted through\n\
-@code{strvcat} can mostly be converted back with @code{cellstr}.\n\
-For example:\n\
+converted through @code{strvcat} can mostly be converted back with\n\
+@code{cellstr}.  For example:\n\
 \n\
 @example\n\
 @group\n\
 strvcat ([97, 98, 99], \"\", @{\"98\", \"99\", 100@}, \"str1\", [\"ha\", \"lf\"])\n\
       @result{} [\"abc    \"\n\
           \"98     \"\n\
           \"99     \"\n\
           \"d      \"\n\
@@ -865,24 +866,25 @@ This is just the opposite of the corresp
 
 /*
 %!assert (strncmpi ("abc123", "ABC456", 3), true)
 */
 
 DEFUN (list_in_columns, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} list_in_columns (@var{arg}, @var{width}, @var{prefix})\n\
-Return a string containing the elements of @var{arg} listed in\n\
-columns with an overall maximum width of @var{width} and optional\n\
-prefix @var{prefix}.  The argument @var{arg} must be a cell array\n\
-of character strings or a character array.  If @var{width} is not\n\
-specified or is an empty matrix, or less than or equal to zero,\n\
-the width of the terminal screen is used.\n\
-Newline characters are used to break the lines in the output string.\n\
-For example:\n\
+Return a string containing the elements of @var{arg} listed in columns with\n\
+an overall maximum width of @var{width} and optional prefix @var{prefix}.\n\
+\n\
+The argument @var{arg} must be a cell array of character strings or a\n\
+character array.\n\
+\n\
+If @var{width} is not specified or is an empty matrix, or less than or equal\n\
+to zero, the width of the terminal screen is used.  Newline characters are\n\
+used to break the lines in the output string.  For example:\n\
 @c Set example in small font to prevent overfull line\n\
 \n\
 @smallexample\n\
 @group\n\
 list_in_columns (@{\"abc\", \"def\", \"ghijkl\", \"mnop\", \"qrs\", \"tuv\"@}, 20)\n\
      @result{} abc     mnop\n\
         def     qrs\n\
         ghijkl  tuv\n\
diff --git a/libinterp/corefcn/sub2ind.cc b/libinterp/corefcn/sub2ind.cc
--- a/libinterp/corefcn/sub2ind.cc
+++ b/libinterp/corefcn/sub2ind.cc
@@ -64,20 +64,19 @@ get_dim_vector (const octave_value& val,
 }
 
 DEFUN (sub2ind, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Function File} {@var{ind} =} sub2ind (@var{dims}, @var{i}, @var{j})\n\
 @deftypefnx {Function File} {@var{ind} =} sub2ind (@var{dims}, @var{s1}, @var{s2}, @dots{}, @var{sN})\n\
 Convert subscripts to a linear index.\n\
 \n\
-The following example shows how to convert the two-dimensional\n\
-index @code{(2,3)} of a 3-by-3 matrix to a linear index.  The matrix\n\
-is linearly indexed moving from one column to next, filling up\n\
-all rows in each column.\n\
+The following example shows how to convert the two-dimensional index\n\
+@code{(2,3)} of a 3-by-3 matrix to a linear index.  The matrix is linearly\n\
+indexed moving from one column to next, filling up all rows in each column.\n\
 \n\
 @example\n\
 @group\n\
 linear_index = sub2ind ([3, 3], 2, 3)\n\
 @result{} 8\n\
 @end group\n\
 @end example\n\
 @seealso{ind2sub}\n\
diff --git a/libinterp/corefcn/svd.cc b/libinterp/corefcn/svd.cc
--- a/libinterp/corefcn/svd.cc
+++ b/libinterp/corefcn/svd.cc
@@ -403,21 +403,22 @@ decomposition, eliminating the unnecessa
 */
 
 DEFUN (svd_driver, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} svd_driver ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} svd_driver (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} svd_driver (@var{new_val}, \"local\")\n\
 Query or set the underlying @sc{lapack} driver used by @code{svd}.\n\
-Currently recognized values are @qcode{\"gesvd\"} and @qcode{\"gesdd\"}.  \n\
+\n\
+Currently recognized values are @qcode{\"gesvd\"} and @qcode{\"gesdd\"}.\n\
 The default is @qcode{\"gesvd\"}.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{svd}\n\
 @end deftypefn")
 {
   static const char *driver_names[] = { "gesvd", "gesdd", 0 };
 
   return SET_INTERNAL_VARIABLE_CHOICES (svd_driver, driver_names);
 }
diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -1645,25 +1645,27 @@ symbol_table::do_update_nest (void)
 }
 
 DEFUN (ignore_function_time_stamp, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} ignore_function_time_stamp ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} ignore_function_time_stamp (@var{new_val})\n\
 Query or set the internal variable that controls whether Octave checks\n\
 the time stamp on files each time it looks up functions defined in\n\
-function files.  If the internal variable is set to @qcode{\"system\"},\n\
-Octave will not automatically recompile function files in subdirectories of\n\
-@file{@var{octave-home}/lib/@var{version}} if they have changed since\n\
-they were last compiled, but will recompile other function files in the\n\
-search path if they change.  If set to @qcode{\"all\"}, Octave will not\n\
-recompile any function files unless their definitions are removed with\n\
-@code{clear}.  If set to @qcode{\"none\"}, Octave will always check time\n\
-stamps on files to determine whether functions defined in function files\n\
-need to recompiled.\n\
+function files.\n\
+\n\
+If the internal variable is set to @qcode{\"system\"}, Octave will not\n\
+automatically recompile function files in subdirectories of\n\
+@file{@var{octave-home}/lib/@var{version}} if they have changed since they were last compiled, but will recompile other function files in the search path if they change.\n\
+\n\
+If set to @qcode{\"all\"}, Octave will not recompile any function files\n\
+unless their definitions are removed with @code{clear}.\n\
+\n\
+If set to @qcode{\"none\"}, Octave will always check time stamps on files to\n\
+determine whether functions defined in function files need to recompiled.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargout > 0 || nargin == 0)
     {
diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -109,19 +109,19 @@ mk_stat_result (const base_file_stat& fs
   return retval;
 }
 
 DEFUNX ("dup2", Fdup2, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{fid}, @var{msg}] =} dup2 (@var{old}, @var{new})\n\
 Duplicate a file descriptor.\n\
 \n\
-If successful, @var{fid} is greater than zero and contains the new file\n\
-ID@.  Otherwise, @var{fid} is negative and @var{msg} contains a\n\
-system-dependent error message.\n\
+If successful, @var{fid} is greater than zero and contains the new file ID@.\n\
+Otherwise, @var{fid} is negative and @var{msg} contains a system-dependent\n\
+error message.\n\
 @seealso{fopen, fclose, fcntl}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1;
 
@@ -160,19 +160,21 @@ system-dependent error message.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUNX ("exec", Fexec, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} exec (@var{file}, @var{args})\n\
-Replace current process with a new process.  Calling @code{exec} without\n\
-first calling @code{fork} will terminate your current Octave process and\n\
-replace it with the program named by @var{file}.  For example,\n\
+Replace current process with a new process.\n\
+\n\
+Calling @code{exec} without first calling @code{fork} will terminate your\n\
+current Octave process and replace it with the program named by @var{file}. \n\
+For example,\n\
 \n\
 @example\n\
 exec (\"ls\" \"-l\")\n\
 @end example\n\
 \n\
 @noindent\n\
 will run @code{ls} and return you to your shell prompt.\n\
 \n\
@@ -243,23 +245,25 @@ error message.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUNX ("popen2", Fpopen2, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{in}, @var{out}, @var{pid}] =} popen2 (@var{command}, @var{args})\n\
-Start a subprocess with two-way communication.  The name of the process\n\
-is given by @var{command}, and @var{args} is an array of strings\n\
-containing options for the command.  The file identifiers for the input\n\
-and output streams of the subprocess are returned in @var{in} and\n\
-@var{out}.  If execution of the command is successful, @var{pid}\n\
-contains the process ID of the subprocess.  Otherwise, @var{pid} is\n\
-@minus{}1.\n\
+Start a subprocess with two-way communication.\n\
+\n\
+The name of the process is given by @var{command}, and @var{args} is an\n\
+array of strings containing options for the command.\n\
+\n\
+The file identifiers for the input and output streams of the subprocess are\n\
+returned in @var{in} and @var{out}.  If execution of the command is\n\
+successful, @var{pid} contains the process ID of the subprocess.  Otherwise,\n\
+@var{pid} is @minus{}1.\n\
 \n\
 For example:\n\
 \n\
 @example\n\
 [in, out, pid] = popen2 (\"sort\", \"-r\");\n\
 fputs (in, \"these\\nare\\nsome\\nstrings\\n\");\n\
 fclose (in);\n\
 EAGAIN = errno (\"EAGAIN\");\n\
@@ -489,24 +493,24 @@ Non-blocking mode.\n\
 @item O_SYNC\n\
 Wait for writes to complete.\n\
 \n\
 @item O_ASYNC\n\
 Asynchronous I/O.\n\
 @end vtable\n\
 \n\
 @item F_SETFL\n\
-Set the file status flags for @var{fid} to the value specified by\n\
-@var{arg}.  The only flags that can be changed are @w{@code{O_APPEND}} and\n\
+Set the file status flags for @var{fid} to the value specified by @var{arg}.\n\
+ The only flags that can be changed are @w{@code{O_APPEND}} and\n\
 @w{@code{O_NONBLOCK}}.\n\
 @end vtable\n\
 \n\
-If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
-Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
-system-dependent error message.\n\
+If successful, @var{err} is 0 and @var{msg} is an empty string.  Otherwise,\n\
+@var{err} is nonzero and @var{msg} contains a system-dependent error\n\
+message.\n\
 @seealso{fopen, dup2}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1;
 
@@ -552,19 +556,19 @@ DEFUNX ("fork", Ffork, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{pid}, @var{msg}] =} fork ()\n\
 Create a copy of the current process.\n\
 \n\
 Fork can return one of the following values:\n\
 \n\
 @table @asis\n\
 @item > 0\n\
-You are in the parent process.  The value returned from @code{fork} is\n\
-the process id of the child process.  You should probably arrange to\n\
-wait for any child processes to exit.\n\
+You are in the parent process.  The value returned from @code{fork} is the\n\
+process id of the child process.  You should probably arrange to wait for\n\
+any child processes to exit.\n\
 \n\
 @item 0\n\
 You are in the child process.  You can call @code{exec} to start another\n\
 process.  If that fails, you should probably call @code{exit}.\n\
 \n\
 @item < 0\n\
 The call to @code{fork} failed for some reason.  You must take evasive\n\
 action.  A system dependent error message will be waiting in @var{msg}.\n\
@@ -618,16 +622,17 @@ Return the process group id of the curre
 
   return retval;
 }
 
 DEFUNX ("getpid", Fgetpid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {pid =} getpid ()\n\
 Return the process id of the current process.\n\
+@seealso{getppid}\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     retval = octave_syscalls::getpid ();
@@ -636,16 +641,17 @@ Return the process id of the current pro
 
   return retval;
 }
 
 DEFUNX ("getppid", Fgetppid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {pid =} getppid ()\n\
 Return the process id of the parent process.\n\
+@seealso{getpid}\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     retval = octave_syscalls::getppid ();
@@ -654,16 +660,17 @@ Return the process id of the parent proc
 
   return retval;
 }
 
 DEFUNX ("getegid", Fgetegid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {egid =} getegid ()\n\
 Return the effective group id of the current process.\n\
+@seealso{getgid}\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     retval = octave_syscalls::getegid ();
@@ -672,16 +679,17 @@ Return the effective group id of the cur
 
   return retval;
 }
 
 DEFUNX ("getgid", Fgetgid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {gid =} getgid ()\n\
 Return the real group id of the current process.\n\
+@seealso{getegid}\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     retval = octave_syscalls::getgid ();
@@ -690,16 +698,17 @@ Return the real group id of the current 
 
   return retval;
 }
 
 DEFUNX ("geteuid", Fgeteuid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {euid =} geteuid ()\n\
 Return the effective user id of the current process.\n\
+@seealso{getuid}\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     retval = octave_syscalls::geteuid ();
@@ -708,16 +717,17 @@ Return the effective user id of the curr
 
   return retval;
 }
 
 DEFUNX ("getuid", Fgetuid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {uid =} getuid ()\n\
 Return the real user id of the current process.\n\
+@seealso{geteuid}\n\
 @end deftypefn")
 {
   octave_value retval = -1;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     retval = octave_syscalls::getuid ();
@@ -811,18 +821,18 @@ The function outputs are described in th
 
 DEFUNX ("mkfifo", Fmkfifo, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} mkfifo (@var{name}, @var{mode})\n\
 @deftypefnx {Built-in Function} {[@var{err}, @var{msg}] =} mkfifo (@var{name}, @var{mode})\n\
 Create a FIFO special file named @var{name} with file mode @var{mode}\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
-Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
-system-dependent error message.\n\
+Otherwise, @var{err} is nonzero and @var{msg} contains a system-dependent\n\
+error message.\n\
 @seealso{pipe}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1;
 
@@ -862,22 +872,22 @@ system-dependent error message.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUNX ("pipe", Fpipe, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{read_fd}, @var{write_fd}, @var{err}, @var{msg}] =} pipe ()\n\
-Create a pipe and return the reading and writing ends of the pipe\n\
-into @var{read_fd} and @var{write_fd} respectively.\n\
+Create a pipe and return the reading and writing ends of the pipe into\n\
+@var{read_fd} and @var{write_fd} respectively.\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
-Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
-system-dependent error message.\n\
+Otherwise, @var{err} is nonzero and @var{msg} contains a system-dependent\n\
+error message.\n\
 @seealso{mkfifo}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(3) = std::string ();
   retval(2) = -1;
   retval(1) = -1;
@@ -974,24 +984,24 @@ returned from @code{time}.  @xref{Timing
 \n\
 @item blksize\n\
 Size of blocks in the file.\n\
 \n\
 @item blocks\n\
 Number of blocks allocated for file.\n\
 @end table\n\
 \n\
-If the call is successful @var{err} is 0 and @var{msg} is an empty\n\
-string.  If the file does not exist, or some other error occurs, @var{info}\n\
-is an empty matrix, @var{err} is @minus{}1, and @var{msg} contains the\n\
+If the call is successful @var{err} is 0 and @var{msg} is an empty string.\n\
+If the file does not exist, or some other error occurs, @var{info} is an\n\
+empty matrix, @var{err} is @minus{}1, and @var{msg} contains the\n\
 corresponding system error message.\n\
 \n\
-If @var{file} is a symbolic link, @code{stat} will return information\n\
-about the actual file that is referenced by the link.  Use @code{lstat}\n\
-if you want information about the symbolic link itself.\n\
+If @var{file} is a symbolic link, @code{stat} will return information about\n\
+the actual file that is referenced by the link.  Use @code{lstat} if you\n\
+want information about the symbolic link itself.\n\
 \n\
 For example:\n\
 \n\
 @example\n\
 [info, err, msg] = stat (\"/vmlinuz\")\n\
   @result{} info =\n\
      @{\n\
        atime = 855399756\n\
@@ -1244,17 +1254,19 @@ Return the hostname of the system where 
     print_usage ();
 
   return retval;
 }
 
 DEFUN (uname, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{uts}, @var{err}, @var{msg}] =} uname ()\n\
-Return system information in the structure.  For example:\n\
+Return system information in the structure.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 uname ()\n\
    @result{} @{\n\
          sysname = x86_64\n\
          nodename = segfault\n\
          release = 2.6.15-1-amd64-k8-smp\n\
@@ -1294,18 +1306,19 @@ system-dependent error message.\n\
 }
 
 DEFUNX ("unlink", Funlink, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{err}, @var{msg}] =} unlink (@var{file})\n\
 Delete the file named @var{file}.\n\
 \n\
 If successful, @var{err} is 0 and @var{msg} is an empty string.\n\
-Otherwise, @var{err} is nonzero and @var{msg} contains a\n\
-system-dependent error message.\n\
+Otherwise, @var{err} is nonzero and @var{msg} contains a system-dependent\n\
+error message.\n\
+@seealso{delete, rmdir}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(1) = std::string ();
   retval(0) = -1;
 
   int nargin = args.length ();
@@ -1330,55 +1343,57 @@ system-dependent error message.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUNX ("waitpid", Fwaitpid, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{pid}, @var{status}, @var{msg}] =} waitpid (@var{pid}, @var{options})\n\
-Wait for process @var{pid} to terminate.  The @var{pid} argument can be:\n\
+Wait for process @var{pid} to terminate.\n\
+\n\
+The @var{pid} argument can be:\n\
 \n\
 @table @asis\n\
 @item @minus{}1\n\
 Wait for any child process.\n\
 \n\
 @item 0\n\
-Wait for any child process whose process group ID is equal to that of\n\
-the Octave interpreter process.\n\
+Wait for any child process whose process group ID is equal to that of the\n\
+Octave interpreter process.\n\
 \n\
 @item > 0\n\
 Wait for termination of the child process with ID @var{pid}.\n\
 @end table\n\
 \n\
-The @var{options} argument can be a bitwise OR of zero or more of\n\
-the following constants:\n\
+The @var{options} argument can be a bitwise OR of zero or more of the\n\
+following constants:\n\
 \n\
 @table @code\n\
 @item 0\n\
-Wait until signal is received or a child process exits (this is the\n\
-default if the @var{options} argument is missing).\n\
+Wait until signal is received or a child process exits (this is the default\n\
+if the @var{options} argument is missing).\n\
 \n\
 @item WNOHANG\n\
 Do not hang if status is not immediately available.\n\
 \n\
 @item WUNTRACED\n\
-Report the status of any child processes that are stopped, and whose\n\
-status has not yet been reported since they stopped.\n\
+Report the status of any child processes that are stopped, and whose status\n\
+has not yet been reported since they stopped.\n\
 \n\
 @item WCONTINUE\n\
 Return if a stopped child has been resumed by delivery of @code{SIGCONT}.\n\
 This value may not be meaningful on all systems.\n\
 @end table\n\
 \n\
-If the returned value of @var{pid} is greater than 0, it is the process\n\
-ID of the child process that exited.  If an error occurs, @var{pid} will\n\
-be less than zero and @var{msg} will contain a system-dependent error\n\
-message.  The value of @var{status} contains additional system-dependent\n\
-information about the subprocess that exited.\n\
+If the returned value of @var{pid} is greater than 0, it is the process ID\n\
+of the child process that exited.  If an error occurs, @var{pid} will be\n\
+less than zero and @var{msg} will contain a system-dependent error message. \n\
+The value of @var{status} contains additional system-dependent information\n\
+about the subprocess that exited.\n\
 @seealso{WCONTINUE, WCOREDUMP, WEXITSTATUS, WIFCONTINUED, WIFSIGNALED, WIFSTOPPED, WNOHANG, WSTOPSIG, WTERMSIG, WUNTRACED}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(2) = std::string ();
   retval(1) = 0;
   retval(0) = -1;
@@ -1419,18 +1434,18 @@ information about the subprocess that ex
     print_usage ();
 
   return retval;
 }
 
 DEFUNX ("WIFEXITED", FWIFEXITED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WIFEXITED (@var{status})\n\
-Given @var{status} from a call to @code{waitpid}, return true if the\n\
-child terminated normally.\n\
+Given @var{status} from a call to @code{waitpid}, return\n\
+true if the child terminated normally.\n\
 @seealso{waitpid, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
@@ -1442,19 +1457,20 @@ child terminated normally.\n\
     }
 
   return retval;
 }
 
 DEFUNX ("WEXITSTATUS", FWEXITSTATUS, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WEXITSTATUS (@var{status})\n\
-Given @var{status} from a call to @code{waitpid}, return the exit\n\
-status of the child.  This function should only be employed if\n\
-@code{WIFEXITED} returned true.\n\
+Given @var{status} from a call to @code{waitpid}, return\n\
+the exit status of the child.\n\
+\n\
+This function should only be employed if @code{WIFEXITED} returned true.\n\
 @seealso{waitpid, WIFEXITED, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = 0;
 
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
@@ -1466,18 +1482,18 @@ status of the child.  This function shou
     }
 
   return retval;
 }
 
 DEFUNX ("WIFSIGNALED", FWIFSIGNALED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WIFSIGNALED (@var{status})\n\
-Given @var{status} from a call to @code{waitpid}, return true if the\n\
-child process was terminated by a signal.\n\
+Given @var{status} from a call to @code{waitpid}, return\n\
+true if the child process was terminated by a signal.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
@@ -1489,19 +1505,20 @@ child process was terminated by a signal
     }
 
   return retval;
 }
 
 DEFUNX ("WTERMSIG", FWTERMSIG, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WTERMSIG (@var{status})\n\
-Given @var{status} from a call to @code{waitpid}, return the number of\n\
-the signal that caused the child process to terminate.  This function\n\
-should only be employed if @code{WIFSIGNALED} returned true.\n\
+Given @var{status} from a call to @code{waitpid}, return\n\
+the number of the signal that caused the child process to terminate.\n\
+\n\
+This function should only be employed if @code{WIFSIGNALED} returned true.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WCOREDUMP, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = 0;
 
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
@@ -1513,21 +1530,22 @@ should only be employed if @code{WIFSIGN
     }
 
   return retval;
 }
 
 DEFUNX ("WCOREDUMP", FWCOREDUMP, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WCOREDUMP (@var{status})\n\
-Given @var{status} from a call to @code{waitpid}, return true if the\n\
-child produced a core dump.  This function should only be employed if\n\
-@code{WIFSIGNALED} returned true.  The macro used to implement this\n\
-function is not specified in POSIX.1-2001 and is not available on some\n\
-Unix implementations (e.g., AIX, SunOS).\n\
+Given @var{status} from a call to @code{waitpid}, return\n\
+true if the child produced a core dump.\n\
+\n\
+This function should only be employed if @code{WIFSIGNALED} returned true. \n\
+The macro used to implement this function is not specified in POSIX.1-2001\n\
+and is not available on some Unix implementations (e.g., AIX, SunOS).\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WIFSTOPPED, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
@@ -1539,20 +1557,21 @@ Unix implementations (e.g., AIX, SunOS).
     }
 
   return retval;
 }
 
 DEFUNX ("WIFSTOPPED", FWIFSTOPPED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WIFSTOPPED (@var{status})\n\
-Given @var{status} from a call to @code{waitpid}, return true if the\n\
-child process was stopped by delivery of a signal; this is only\n\
-possible if the call was done using @code{WUNTRACED} or when the child\n\
-is being traced (see ptrace(2)).\n\
+Given @var{status} from a call to @code{waitpid}, return\n\
+true if the child process was stopped by delivery of a signal.\n\
+\n\
+This is only possible if the call was done using @code{WUNTRACED} or when\n\
+the child is being traced (see ptrace(2)).\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WSTOPSIG, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
@@ -1564,19 +1583,20 @@ is being traced (see ptrace(2)).\n\
     }
 
   return retval;
 }
 
 DEFUNX ("WSTOPSIG", FWSTOPSIG, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WSTOPSIG (@var{status})\n\
-Given @var{status} from a call to @code{waitpid}, return the number of\n\
-the signal which caused the child to stop.  This function should only\n\
-be employed if @code{WIFSTOPPED} returned true.\n\
+Given @var{status} from a call to @code{waitpid}, return\n\
+the number of the signal which caused the child to stop.\n\
+\n\
+This function should only be employed if @code{WIFSTOPPED} returned true.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WIFCONTINUED}\n\
 @end deftypefn")
 {
   octave_value retval = 0;
 
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
@@ -1588,18 +1608,18 @@ be employed if @code{WIFSTOPPED} returne
     }
 
   return retval;
 }
 
 DEFUNX ("WIFCONTINUED", FWIFCONTINUED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WIFCONTINUED (@var{status})\n\
-Given @var{status} from a call to @code{waitpid}, return true if the\n\
-child process was resumed by delivery of @code{SIGCONT}.\n\
+Given @var{status} from a call to @code{waitpid}, return\n\
+true if the child process was resumed by delivery of @code{SIGCONT}.\n\
 @seealso{waitpid, WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WCOREDUMP, WIFSTOPPED, WSTOPSIG}\n\
 @end deftypefn")
 {
   octave_value retval = false;
 
   if (args.length () == 1)
     {
       int status = args(0).int_value ();
@@ -1611,18 +1631,19 @@ child process was resumed by delivery of
     }
 
   return retval;
 }
 
 DEFUNX ("canonicalize_file_name", Fcanonicalize_file_name, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{cname}, @var{status}, @var{msg}] =} canonicalize_file_name (@var{fname})\n\
-Return the canonical name of file @var{fname}.  If the file does not exist\n\
-the empty string (\"\") is returned.\n\
+Return the canonical name of file @var{fname}.\n\
+\n\
+If the file does not exist the empty string (\"\") is returned.\n\
 @seealso{make_absolute_filename, is_absolute_filename, is_rooted_relative_filename}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 1)
     {
       if (args(0).is_string ())
@@ -1662,50 +1683,50 @@ const_value (const octave_value_list& ar
 
 #if !defined (O_NONBLOCK) && defined (O_NDELAY)
 #define O_NONBLOCK O_NDELAY
 #endif
 
 DEFUNX ("F_DUPFD", FF_DUPFD, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} F_DUPFD ()\n\
-Return the numerical value to pass to @code{fcntl} to return a\n\
-duplicate file descriptor.\n\
+Return the numerical value to pass to @code{fcntl} to return\n\
+a duplicate file descriptor.\n\
 @seealso{fcntl, F_GETFD, F_GETFL, F_SETFD, F_SETFL}\n\
 @end deftypefn")
 {
 #if defined (F_DUPFD)
   return const_value (args, F_DUPFD);
 #else
   error ("F_DUPFD: not available on this system");
   return octave_value ();
 #endif
 }
 
 DEFUNX ("F_GETFD", FF_GETFD, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} F_GETFD ()\n\
-Return the numerical value to pass to @code{fcntl} to return the\n\
-file descriptor flags.\n\
+Return the numerical value to pass to @code{fcntl} to return\n\
+the file descriptor flags.\n\
 @seealso{fcntl, F_DUPFD, F_GETFL, F_SETFD, F_SETFL}\n\
 @end deftypefn")
 {
 #if defined (F_GETFD)
   return const_value (args, F_GETFD);
 #else
   error ("F_GETFD: not available on this system");
   return octave_value ();
 #endif
 }
 
 DEFUNX ("F_GETFL", FF_GETFL, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} F_GETFL ()\n\
-Return the numerical value to pass to @code{fcntl} to return the\n\
-file status flags.\n\
+Return the numerical value to pass to @code{fcntl} to return\n\
+the file status flags.\n\
 @seealso{fcntl, F_DUPFD, F_GETFD, F_SETFD, F_SETFL}\n\
 @end deftypefn")
 {
 #if defined (F_GETFL)
   return const_value (args, F_GETFL);
 #else
   error ("F_GETFL: not available on this system");
   return octave_value ();
@@ -1776,18 +1797,18 @@ returned by @code{fcntl} to indicate asy
   return octave_value ();
 #endif
 }
 
 DEFUNX ("O_CREAT", FO_CREAT, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} O_CREAT ()\n\
 Return the numerical value of the file status flag that may be\n\
-returned by @code{fcntl} to indicate that a file should be\n\
-created if it does not exist.\n\
+returned by @code{fcntl} to indicate that a file should be created if it\n\
+does not exist.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_CREAT)
   return const_value (args, O_CREAT);
 #else
   error ("O_CREAT: not available on this system");
   return octave_value ();
@@ -1826,86 +1847,83 @@ or that may be passsed to @code{fcntl} t
   return octave_value ();
 #endif
 }
 
 DEFUNX ("O_RDONLY", FO_RDONLY, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} O_RDONLY ()\n\
 Return the numerical value of the file status flag that may be\n\
-returned by @code{fcntl} to indicate that a file is open for\n\
-reading only.\n\
+returned by @code{fcntl} to indicate that a file is open for reading only.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDWR, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_RDONLY)
   return const_value (args, O_RDONLY);
 #else
   error ("O_RDONLY: not available on this system");
   return octave_value ();
 #endif
 }
 
 DEFUNX ("O_RDWR", FO_RDWR, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} O_RDWR ()\n\
 Return the numerical value of the file status flag that may be\n\
-returned by @code{fcntl} to indicate that a file is open for both\n\
-reading and writing.\n\
+returned by @code{fcntl} to indicate that a file is open for both reading\n\
+and writing.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_SYNC, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_RDWR)
   return const_value (args, O_RDWR);
 #else
   error ("O_RDWR: not available on this system");
   return octave_value ();
 #endif
 }
 
 DEFUNX ("O_SYNC", FO_SYNC, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} O_SYNC ()\n\
 Return the numerical value of the file status flag that may be\n\
-returned by @code{fcntl} to indicate that a file is open for\n\
-synchronous I/O.\n\
+returned by @code{fcntl} to indicate that a file is open for synchronous I/O.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_TRUNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_SYNC)
   return const_value (args, O_SYNC);
 #else
   error ("O_SYNC: not available on this system");
   return octave_value ();
 #endif
 }
 
 DEFUNX ("O_TRUNC", FO_TRUNC, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} O_TRUNC ()\n\
 Return the numerical value of the file status flag that may be\n\
-returned by @code{fcntl} to indicate that if file exists, it should\n\
-be truncated when writing.\n\
+returned by @code{fcntl} to indicate that if file exists, it should be\n\
+truncated when writing.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_SYNC, O_WRONLY}\n\
 @end deftypefn")
 {
 #if defined (O_TRUNC)
   return const_value (args, O_TRUNC);
 #else
   error ("O_TRUNC: not available on this system");
   return octave_value ();
 #endif
 }
 
 DEFUNX ("O_WRONLY", FO_WRONLY, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} O_WRONLY ()\n\
 Return the numerical value of the file status flag that may be\n\
-returned by @code{fcntl} to indicate that a file is open for\n\
-writing only.\n\
+returned by @code{fcntl} to indicate that a file is open for writing only.\n\
 @seealso{fcntl, O_APPEND, O_ASYNC, O_CREAT, O_EXCL, O_NONBLOCK, O_RDONLY, O_RDWR, O_SYNC, O_TRUNC}\n\
 @end deftypefn")
 {
 #if defined (O_WRONLY)
   return const_value (args, O_WRONLY);
 #else
   error ("O_WRONLY: not available on this system");
   return octave_value ();
@@ -1915,50 +1933,48 @@ writing only.\n\
 #if !defined (WNOHANG)
 #define WNOHANG 0
 #endif
 
 DEFUNX ("WNOHANG", FWNOHANG, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WNOHANG ()\n\
 Return the numerical value of the option argument that may be\n\
-passed to @code{waitpid} to indicate that it should return its\n\
-status immediately instead of waiting for a process to exit.\n\
+passed to @code{waitpid} to indicate that it should return its status\n\
+immediately instead of waiting for a process to exit.\n\
 @seealso{waitpid, WUNTRACED, WCONTINUE}\n\
 @end deftypefn")
 {
   return const_value (args, WNOHANG);
 }
 
 #if !defined (WUNTRACED)
 #define WUNTRACED 0
 #endif
 
 DEFUNX ("WUNTRACED", FWUNTRACED, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WUNTRACED ()\n\
 Return the numerical value of the option argument that may be\n\
-passed to @code{waitpid} to indicate that it should also return\n\
-if the child process has stopped but is not traced via the\n\
-@code{ptrace} system call\n\
+passed to @code{waitpid} to indicate that it should also return if the child\n\
+process has stopped but is not traced via the @code{ptrace} system call\n\
 @seealso{waitpid, WNOHANG, WCONTINUE}\n\
 @end deftypefn")
 {
   return const_value (args, WUNTRACED);
 }
 
 #if !defined (WCONTINUE)
 #define WCONTINUE 0
 #endif
 
 DEFUNX ("WCONTINUE", FWCONTINUE, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} WCONTINUE ()\n\
 Return the numerical value of the option argument that may be\n\
-passed to @code{waitpid} to indicate that it should also return\n\
-if a stopped child has been resumed by delivery of a @code{SIGCONT}\n\
-signal.\n\
+passed to @code{waitpid} to indicate that it should also return if a stopped\n\
+child has been resumed by delivery of a @code{SIGCONT} signal.\n\
 @seealso{waitpid, WNOHANG, WUNTRACED}\n\
 @end deftypefn")
 {
   return const_value (args, WCONTINUE);
 }
 
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -594,17 +594,19 @@ Clear the terminal screen and move the c
   return octave_value_list ();
 }
 
 DEFALIAS (home, clc);
 
 DEFUN (getenv, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} getenv (@var{var})\n\
-Return the value of the environment variable @var{var}.  For example,\n\
+Return the value of the environment variable @var{var}.\n\
+\n\
+For example,\n\
 \n\
 @example\n\
 getenv (\"PATH\")\n\
 @end example\n\
 \n\
 @noindent\n\
 returns a string containing the value of your path.\n\
 @seealso{setenv, unsetenv}\n\
@@ -715,18 +717,21 @@ occurred.\n\
 */
 
 // FIXME: perhaps kbhit should also be able to print a prompt?
 
 DEFUN (kbhit, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} kbhit ()\n\
 @deftypefnx {Built-in Function} {} kbhit (1)\n\
-Read a single keystroke from the keyboard.  If called with an\n\
-argument, don't wait for a keypress.  For example,\n\
+Read a single keystroke from the keyboard.\n\
+\n\
+If called with an argument, don't wait for a keypress.\n\
+\n\
+For example,\n\
 \n\
 @example\n\
 x = kbhit ();\n\
 @end example\n\
 \n\
 @noindent\n\
 will set @var{x} to the next character typed at the keyboard as soon as\n\
 it is typed.\n\
@@ -764,16 +769,17 @@ returning the empty string if no key is 
 
 DEFUN (pause, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} pause ()\n\
 @deftypefnx {Built-in Function} {} pause (@var{n})\n\
 Suspend the execution of the program for @var{n} seconds.\n\
 \n\
 @var{n} is a positive real value and may be a fraction of a second.\n\
+\n\
 If invoked without an input arguments then the program is suspended until a\n\
 character is typed.\n\
 \n\
 The following example prints a message and then waits 5 seconds before\n\
 clearing the screen.\n\
 \n\
 @example\n\
 @group\n\
@@ -871,19 +877,21 @@ Suspend the execution of the program for
 %!error (sleep ())
 %!error (sleep (1, 2))
 */
 
 DEFUN (usleep, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} usleep (@var{microseconds})\n\
 Suspend the execution of the program for the given number of\n\
-microseconds.  On systems where it is not possible to sleep for periods\n\
-of time less than one second, @code{usleep} will pause the execution for\n\
-@code{round (@var{microseconds} / 1e6)} seconds.\n\
+microseconds.\n\
+\n\
+On systems where it is not possible to sleep for periods of time less than\n\
+one second, @code{usleep} will pause the execution for @code{round\n\
+(@var{microseconds} / 1e6)} seconds.\n\
 @seealso{sleep, pause}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 1)
     {
       double dval = args(0).double_value ();
@@ -919,54 +927,59 @@ of time less than one second, @code{usle
 
 // FIXME: maybe this should only return 1 if IEEE floating
 // point functions really work.
 
 DEFUN (isieee, , ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isieee ()\n\
 Return true if your computer @emph{claims} to conform to the IEEE standard\n\
-for floating point calculations.  No actual tests are performed.\n\
+for floating point calculations.\n\
+\n\
+No actual tests are performed.\n\
 @end deftypefn")
 {
   oct_mach_info::float_format flt_fmt = oct_mach_info::native_float_format ();
 
   return octave_value (flt_fmt == oct_mach_info::flt_fmt_ieee_little_endian
                        || flt_fmt == oct_mach_info::flt_fmt_ieee_big_endian);
 }
 
 /*
 %!assert (islogical (isieee ()))
 */
 
 DEFUN (native_float_format, , ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} native_float_format ()\n\
-Return the native floating point format as a string\n\
+Return the native floating point format as a string.\n\
 @end deftypefn")
 {
   oct_mach_info::float_format flt_fmt = oct_mach_info::native_float_format ();
 
   return octave_value (oct_mach_info::float_format_as_string (flt_fmt));
 }
 
 /*
 %!assert (ischar (native_float_format ()))
 */
 
 DEFUN (tilde_expand, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} tilde_expand (@var{string})\n\
-Perform tilde expansion on @var{string}.  If @var{string} begins with a\n\
-tilde character, (@samp{~}), all of the characters preceding the first\n\
-slash (or all characters, if there is no slash) are treated as a\n\
-possible user name, and the tilde and the following characters up to the\n\
-slash are replaced by the home directory of the named user.  If the\n\
-tilde is followed immediately by a slash, the tilde is replaced by the\n\
-home directory of the user running Octave.  For example:\n\
+Perform tilde expansion on @var{string}.\n\
+\n\
+If @var{string} begins with a tilde character, (@samp{~}), all of the\n\
+characters preceding the first slash (or all characters, if there is no\n\
+slash) are treated as a possible user name, and the tilde and the following\n\
+characters up to the slash are replaced by the home directory of the named\n\
+user.  If the tilde is followed immediately by a slash, the tilde is\n\
+replaced by the home directory of the user running Octave.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 tilde_expand (\"~joeuser/bin\")\n\
      @result{} \"/home/joeuser/bin\"\n\
 tilde_expand (\"~/bin\")\n\
      @result{} \"/home/jwe/bin\"\n\
 @end group\n\
diff --git a/libinterp/corefcn/time.cc b/libinterp/corefcn/time.cc
--- a/libinterp/corefcn/time.cc
+++ b/libinterp/corefcn/time.cc
@@ -99,20 +99,21 @@ extract_tm (const octave_scalar_map& m)
   tm.zone (stringfield (m, "zone"));
 
   return tm;
 }
 
 DEFUN (time, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{seconds} =} time ()\n\
-Return the current time as the number of seconds since the epoch.  The\n\
-epoch is referenced to 00:00:00 CUT (Coordinated Universal Time) 1 Jan\n\
-1970.  For example, on Monday February 17, 1997 at 07:15:06 CUT, the\n\
-value returned by @code{time} was 856163706.\n\
+Return the current time as the number of seconds since the epoch.\n\
+\n\
+The epoch is referenced to 00:00:00 CUT (Coordinated Universal Time) 1 Jan\n\
+1970.  For example, on Monday February 17, 1997 at 07:15:06 CUT, the value\n\
+returned by @code{time} was 856163706.\n\
 @seealso{strftime, strptime, localtime, gmtime, mktime, now, date, clock, datenum, datestr, datevec, calendar, weekday}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 0)
     retval = octave_time ();
   else
@@ -127,16 +128,17 @@ value returned by @code{time} was 856163
 %!error time (1)
 */
 
 DEFUN (gmtime, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{tm_struct} =} gmtime (@var{t})\n\
 Given a value returned from @code{time}, or any non-negative integer,\n\
 return a time structure corresponding to CUT (Coordinated Universal Time).\n\
+\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 gmtime (time ())\n\
      @result{} @{\n\
            usec = 0\n\
            sec = 6\n\
@@ -248,18 +250,20 @@ localtime (time ())\n\
 
 %!error localtime ()
 %!error localtime (1, 2)
 */
 
 DEFUN (mktime, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{seconds} =} mktime (@var{tm_struct})\n\
-Convert a time structure corresponding to the local time to the number\n\
-of seconds since the epoch.  For example:\n\
+Convert a time structure corresponding to the local time to the number of\n\
+seconds since the epoch.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 mktime (localtime (time ()))\n\
      @result{} 856163706\n\
 @end group\n\
 @end example\n\
 @seealso{strftime, strptime, localtime, gmtime, time, now, date, clock, datenum, datestr, datevec, calendar, weekday}\n\
@@ -304,35 +308,36 @@ mktime (localtime (time ()))\n\
 %!error mktime (1)
 %!error mktime (1, 2, 3)
 %!error mktime (struct ("year", "foo"))
 */
 
 DEFUN (strftime, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} strftime (@var{fmt}, @var{tm_struct})\n\
-Format the time structure @var{tm_struct} in a flexible way using the\n\
-format string @var{fmt} that contains @samp{%} substitutions\n\
-similar to those in @code{printf}.  Except where noted, substituted\n\
-fields have a fixed size; numeric fields are padded if necessary.\n\
-Padding is with zeros by default; for fields that display a single\n\
-number, padding can be changed or inhibited by following the @samp{%}\n\
-with one of the modifiers described below.  Unknown field specifiers are\n\
-copied as normal characters.  All other characters are copied to the\n\
-output without change.  For example:\n\
+Format the time structure @var{tm_struct} in a flexible way using the format\n\
+string @var{fmt} that contains @samp{%} substitutions similar to those in\n\
+@code{printf}.\n\
+\n\
+Except where noted, substituted fields have a fixed size; numeric fields are\n\
+padded if necessary.  Padding is with zeros by default; for fields that\n\
+display a single number, padding can be changed or inhibited by following\n\
+the @samp{%} with one of the modifiers described below.  Unknown field\n\
+specifiers are copied as normal characters.  All other characters are copied\n\
+to the output without change.  For example:\n\
 \n\
 @example\n\
 @group\n\
 strftime (\"%r (%Z) %A %e %B %Y\", localtime (time ()))\n\
       @result{} \"01:15:06 AM (CST) Monday 17 February 1997\"\n\
 @end group\n\
 @end example\n\
 \n\
-Octave's @code{strftime} function supports a superset of the ANSI C\n\
-field specifiers.\n\
+Octave's @code{strftime} function supports a superset of the ANSI C field\n\
+specifiers.\n\
 \n\
 @noindent\n\
 Literal character fields:\n\
 \n\
 @table @code\n\
 @item %%\n\
 % character.\n\
 \n\
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -953,25 +953,26 @@ enum system_exec_type { et_sync, et_asyn
 
 DEFUN (system, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} system (\"@var{string}\")\n\
 @deftypefnx {Built-in Function} {} system (\"@var{string}\", @var{return_output})\n\
 @deftypefnx {Built-in Function} {} system (\"@var{string}\", @var{return_output}, @var{type})\n\
 @deftypefnx {Built-in Function} {[@var{status}, @var{output}] =} system (@dots{})\n\
 Execute a shell command specified by @var{string}.\n\
-If the optional argument @var{type} is @qcode{\"async\"}, the process\n\
-is started in the background and the process ID of the child process\n\
-is returned immediately.  Otherwise, the child process is started and\n\
-Octave waits until it exits.  If the @var{type} argument is omitted, it\n\
-defaults to the value @qcode{\"sync\"}.\n\
+\n\
+If the optional argument @var{type} is @qcode{\"async\"}, the process is\n\
+started in the background and the process ID of the child process is\n\
+returned immediately.  Otherwise, the child process is started and Octave\n\
+waits until it exits.  If the @var{type} argument is omitted, it defaults to\n\
+the value @qcode{\"sync\"}.\n\
 \n\
 If @var{system} is called with one or more output arguments, or if the\n\
 optional argument @var{return_output} is true and the subprocess is started\n\
-synchronously, then the output from the command is returned as a variable.  \n\
+synchronously, then the output from the command is returned as a variable.\n\
 Otherwise, if the subprocess is executed synchronously, its output is sent\n\
 to the standard output.  To send the output of a command executed with\n\
 @code{system} through the pager, use a command like\n\
 \n\
 @example\n\
 @group\n\
 [output, text] = system (\"cmd\");\n\
 disp (text);\n\
@@ -1183,34 +1184,33 @@ function last_words ()\n\
 endfunction\n\
 atexit (\"last_words\");\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 will print the message @qcode{\"Bye bye\"} when Octave exits.\n\
 \n\
-The additional argument @var{flag} will register or unregister\n\
-@var{fcn} from the list of functions to be called when Octave\n\
-exits.  If @var{flag} is true, the function is registered, and if\n\
-@var{flag} is false, it is unregistered.  For example,\n\
-after registering the function @code{last_words} above,\n\
+The additional argument @var{flag} will register or unregister @var{fcn}\n\
+from the list of functions to be called when Octave exits.  If @var{flag} is\n\
+true, the function is registered, and if @var{flag} is false, it is\n\
+unregistered.  For example, after registering the function @code{last_words}\n\
+above,\n\
 \n\
 @example\n\
 atexit (\"last_words\", false);\n\
 @end example\n\
 \n\
 @noindent\n\
 will remove the function from the list and Octave will not call\n\
 @code{last_words} when it exits.\n\
 \n\
 Note that @code{atexit} only removes the first occurrence of a function\n\
-from the list, so if a function was placed in the list multiple\n\
-times with @code{atexit}, it must also be removed from the list\n\
-multiple times.\n\
+from the list, so if a function was placed in the list multiple times with\n\
+@code{atexit}, it must also be removed from the list multiple times.\n\
 @seealso{quit}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
diff --git a/libinterp/corefcn/tril.cc b/libinterp/corefcn/tril.cc
--- a/libinterp/corefcn/tril.cc
+++ b/libinterp/corefcn/tril.cc
@@ -350,26 +350,27 @@ DEFUN (tril, args, ,
 @deftypefn  {Function File} {} tril (@var{A})\n\
 @deftypefnx {Function File} {} tril (@var{A}, @var{k})\n\
 @deftypefnx {Function File} {} tril (@var{A}, @var{k}, @var{pack})\n\
 @deftypefnx {Function File} {} triu (@var{A})\n\
 @deftypefnx {Function File} {} triu (@var{A}, @var{k})\n\
 @deftypefnx {Function File} {} triu (@var{A}, @var{k}, @var{pack})\n\
 Return a new matrix formed by extracting the lower (@code{tril})\n\
 or upper (@code{triu}) triangular part of the matrix @var{A}, and\n\
-setting all other elements to zero.  The second argument is optional,\n\
-and specifies how many diagonals above or below the main diagonal should\n\
-also be set to zero.\n\
+setting all other elements to zero.\n\
+\n\
+The second argument is optional, and specifies how many diagonals above or\n\
+below the main diagonal should also be set to zero.\n\
 \n\
-The default value of @var{k} is zero, so that @code{triu} and\n\
-@code{tril} normally include the main diagonal as part of the result.\n\
+The default value of @var{k} is zero, so that @code{triu} and @code{tril}\n\
+normally include the main diagonal as part of the result.\n\
 \n\
-If the value of @var{k} is nonzero integer, the selection of elements\n\
-starts at an offset of @var{k} diagonals above or below the main\n\
-diagonal; above for positive @var{k} and below for negative @var{k}.\n\
+If the value of @var{k} is nonzero integer, the selection of elements starts\n\
+at an offset of @var{k} diagonals above or below the main diagonal; above\n\
+for positive @var{k} and below for negative @var{k}.\n\
 \n\
 The absolute value of @var{k} must not be greater than the number of\n\
 subdiagonals or superdiagonals.\n\
 \n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
@@ -402,16 +403,17 @@ above other.\n\
 }
 
 DEFUN (triu, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Function File} {} triu (@var{A})\n\
 @deftypefnx {Function File} {} triu (@var{A}, @var{k})\n\
 @deftypefnx {Function File} {} triu (@var{A}, @var{k}, @var{pack})\n\
 See the documentation for the @code{tril} function (@pxref{tril}).\n\
+@seealso{tril}\n\
 @end deftypefn")
 {
   return do_trilu ("triu", args);
 }
 
 /*
 %!test
 %! a = [1, 2, 3; 4, 5, 6; 7, 8, 9; 10, 11, 12];
diff --git a/libinterp/corefcn/tsearch.cc b/libinterp/corefcn/tsearch.cc
--- a/libinterp/corefcn/tsearch.cc
+++ b/libinterp/corefcn/tsearch.cc
@@ -57,20 +57,21 @@ inline double min (double a, double b, d
 // given point
 
 // e.g., build up a neighbouring triangle structure and use a simplex-like
 // method to traverse it
 
 DEFUN (tsearch, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{idx} =} tsearch (@var{x}, @var{y}, @var{t}, @var{xi}, @var{yi})\n\
-Search for the enclosing Delaunay convex hull.  For @code{@var{t} =\n\
-delaunay (@var{x}, @var{y})}, finds the index in @var{t} containing the\n\
-points @code{(@var{xi}, @var{yi})}.  For points outside the convex hull,\n\
-@var{idx} is NaN.\n\
+Search for the enclosing Delaunay convex hull.\n\
+\n\
+For @code{@var{t} = delaunay (@var{x}, @var{y})}, finds the index in @var{t}\n\
+containing the points @code{(@var{xi}, @var{yi})}.  For points outside the\n\
+convex hull, @var{idx} is NaN.\n\
 @seealso{delaunay, delaunayn}\n\
 @end deftypefn")
 {
   const double eps=1.0e-12;
 
   octave_value_list retval;
   const int nargin = args.length ();
   if (nargin != 5)
diff --git a/libinterp/corefcn/typecast.cc b/libinterp/corefcn/typecast.cc
--- a/libinterp/corefcn/typecast.cc
+++ b/libinterp/corefcn/typecast.cc
@@ -86,18 +86,18 @@ reinterpret_copy (const void *data, octa
       return ArrayType ();
     }
 }
 
 
 DEFUN (typecast, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{y} =} typecast (@var{x}, \"@var{class}\")\n\
-Return a new array @var{y} resulting from interpreting the data of\n\
-@var{x} in memory as data of the numeric class @var{class}.\n\
+Return a new array @var{y} resulting from interpreting the data of @var{x}\n\
+in memory as data of the numeric class @var{class}.\n\
 \n\
 Both the class of @var{x} and @var{class} must be one of the built-in\n\
 numeric classes:\n\
 \n\
 @example\n\
 @group\n\
 \"logical\"\n\
 \"char\"\n\
@@ -112,24 +112,27 @@ numeric classes:\n\
 \"double\"\n\
 \"single\"\n\
 \"double complex\"\n\
 \"single complex\"\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
-the last two are reserved for @var{class}; they indicate that a\n\
+the last two are only used with @var{class}; they indicate that a\n\
 complex-valued result is requested.  Complex arrays are stored in memory as\n\
 consecutive pairs of real numbers.  The sizes of integer types are given by\n\
 their bit counts.  Both logical and char are typically one byte wide;\n\
 however, this is not guaranteed by C++.  If your system is IEEE conformant,\n\
 single and double will be 4 bytes and 8 bytes wide, respectively.\n\
-@qcode{\"logical\"} is not allowed for @var{class}.  If the input is a row\n\
-vector, the return value is a row vector, otherwise it is a column vector.  \n\
+@qcode{\"logical\"} is not allowed for @var{class}.\n\
+\n\
+If the input is a row vector, the return value is a row vector, otherwise it\n\
+is a column vector.\n\
+\n\
 If the bit length of @var{x} is not divisible by that of @var{class}, an\n\
 error occurs.\n\
 \n\
 An example of the use of typecast on a little-endian machine is\n\
 \n\
 @example\n\
 @group\n\
 @var{x} = uint16 ([1, 65535]);\n\
@@ -320,18 +323,20 @@ Return a new array @var{y} resulting fro
 \"uint32\"\n\
 \"uint64\"\n\
 @end group\n\
 @end example\n\
 \n\
 The number of elements of @var{x} should be divisible by the bit length of\n\
 @var{class}.  If it is not, excess bits are discarded.  Bits come in\n\
 increasing order of significance, i.e., @code{x(1)} is bit 0, @code{x(2)} is\n\
-bit 1, etc.  The result is a row vector if @var{x} is a row vector, otherwise\n\
-it is a column vector.\n\
+bit 1, etc.\n\
+\n\
+The result is a row vector if @var{x} is a row vector, otherwise it is a\n\
+column vector.\n\
 @seealso{bitunpack, typecast}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () != 2)
     print_usage ();
   else if (! args(0).is_bool_type ())
diff --git a/libinterp/corefcn/urlwrite.cc b/libinterp/corefcn/urlwrite.cc
--- a/libinterp/corefcn/urlwrite.cc
+++ b/libinterp/corefcn/urlwrite.cc
@@ -290,45 +290,49 @@ ch_manager *ch_manager::instance = 0;
 
 DEFUN (urlwrite, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {} urlwrite (@var{url}, @var{localfile})\n\
 @deftypefnx {Loadable Function} {@var{f} =} urlwrite (@var{url}, @var{localfile})\n\
 @deftypefnx {Loadable Function} {[@var{f}, @var{success}] =} urlwrite (@var{url}, @var{localfile})\n\
 @deftypefnx {Loadable Function} {[@var{f}, @var{success}, @var{message}] =} urlwrite (@var{url}, @var{localfile})\n\
 Download a remote file specified by its @var{url} and save it as\n\
-@var{localfile}.  For example:\n\
+@var{localfile}.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 @group\n\
 urlwrite (\"ftp://ftp.octave.org/pub/README\",\n\
           \"README.txt\");\n\
 @end group\n\
 @end example\n\
 \n\
-The full path of the downloaded file is returned in @var{f}.  The\n\
-variable @var{success} is 1 if the download was successful,\n\
-otherwise it is 0 in which case @var{message} contains an error\n\
-message.  If no output argument is specified and an error occurs,\n\
-then the error is signaled through Octave's error handling mechanism.\n\
+The full path of the downloaded file is returned in @var{f}.\n\
 \n\
-This function uses libcurl.  Curl supports, among others, the HTTP,\n\
-FTP and FILE protocols.  Username and password may be specified in\n\
-the URL, for example:\n\
+The variable @var{success} is 1 if the download was successful,\n\
+otherwise it is 0 in which case @var{message} contains an error message.\n\
+ \n\
+If no output argument is specified and an error occurs, then the error is\n\
+signaled through Octave's error handling mechanism.\n\
+\n\
+This function uses libcurl.  Curl supports, among others, the HTTP, FTP and\n\
+FILE protocols.  Username and password may be specified in the URL, for\n\
+example:\n\
 \n\
 @example\n\
 @group\n\
 urlwrite (\"http://username:password@@example.com/file.txt\",\n\
           \"file.txt\");\n\
 @end group\n\
 @end example\n\
 \n\
 GET and POST requests can be specified by @var{method} and @var{param}.\n\
-The parameter @var{method} is either @samp{get} or @samp{post}\n\
-and @var{param} is a cell array of parameter and value pairs.\n\
+The parameter @var{method} is either @samp{get} or @samp{post} and\n\
+@var{param} is a cell array of parameter and value pairs.\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 urlwrite (\"http://www.google.com/search\", \"search.html\",\n\
           \"get\", @{\"query\", \"octave\"@});\n\
 @end group\n\
 @end example\n\
@@ -453,38 +457,42 @@ urlwrite (\"http://www.google.com/search
 
 DEFUN (urlread, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{s} =} urlread (@var{url})\n\
 @deftypefnx {Loadable Function} {[@var{s}, @var{success}] =} urlread (@var{url})\n\
 @deftypefnx {Loadable Function} {[@var{s}, @var{success}, @var{message}] =} urlread (@var{url})\n\
 @deftypefnx {Loadable Function} {[@dots{}] =} urlread (@var{url}, @var{method}, @var{param})\n\
 Download a remote file specified by its @var{url} and return its content\n\
-in string @var{s}.  For example:\n\
+in string @var{s}.\n\
+\n\
+For example:\n\
 \n\
 @example\n\
 s = urlread (\"ftp://ftp.octave.org/pub/README\");\n\
 @end example\n\
 \n\
 The variable @var{success} is 1 if the download was successful,\n\
 otherwise it is 0 in which case @var{message} contains an error\n\
-message.  If no output argument is specified and an error occurs,\n\
-then the error is signaled through Octave's error handling mechanism.\n\
+message.\n\
 \n\
-This function uses libcurl.  Curl supports, among others, the HTTP,\n\
-FTP and FILE protocols.  Username and password may be specified in the\n\
-URL@.  For example:\n\
+If no output argument is specified and an error occurs, then the error is\n\
+signaled through Octave's error handling mechanism.\n\
+\n\
+This function uses libcurl.  Curl supports, among others, the HTTP, FTP and\n\
+FILE protocols.  Username and password may be specified in the URL@.  For\n\
+example:\n\
 \n\
 @example\n\
 s = urlread (\"http://user:password@@example.com/file.txt\");\n\
 @end example\n\
 \n\
 GET and POST requests can be specified by @var{method} and @var{param}.\n\
-The parameter @var{method} is either @samp{get} or @samp{post}\n\
-and @var{param} is a cell array of parameter and value pairs.\n\
+The parameter @var{method} is either @samp{get} or @samp{post} and\n\
+@var{param} is a cell array of parameter and value pairs.\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 s = urlread (\"http://www.google.com/search\", \"get\",\n\
             @{\"query\", \"octave\"@});\n\
 @end group\n\
 @end example\n\
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -290,25 +290,26 @@ make_absolute (const string_vector& sv)
 
 DEFUN (file_in_loadpath, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} file_in_loadpath (@var{file})\n\
 @deftypefnx {Built-in Function} {} file_in_loadpath (@var{file}, \"all\")\n\
 \n\
 Return the absolute name of @var{file} if it can be found in\n\
 the list of directories specified by @code{path}.\n\
+\n\
 If no file is found, return an empty character string.\n\
 \n\
-If the first argument is a cell array of strings, search each\n\
-directory of the loadpath for element of the cell array and return\n\
-the first that matches.\n\
+If the first argument is a cell array of strings, search each directory of\n\
+the loadpath for element of the cell array and return the first that\n\
+matches.\n\
 \n\
-If the second optional argument @qcode{\"all\"} is supplied, return\n\
-a cell array containing the list of all files that have the same\n\
-name in the path.  If no files are found, return an empty cell array.\n\
+If the second optional argument @qcode{\"all\"} is supplied, return a cell\n\
+array containing the list of all files that have the same name in the path. \n\
+If no files are found, return an empty cell array.\n\
 @seealso{file_in_path, dir_in_loadpath, path}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
@@ -359,35 +360,35 @@ name in the path.  If no files are found
 %!error file_in_loadpath ([])
 %!error file_in_loadpath ("plot.m", "bar")
 */
 
 DEFUN (file_in_path, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} file_in_path (@var{path}, @var{file})\n\
 @deftypefnx {Built-in Function} {} file_in_path (@var{path}, @var{file}, \"all\")\n\
-Return the absolute name of @var{file} if it can be found in\n\
-@var{path}.  The value of @var{path} should be a colon-separated list of\n\
-directories in the format described for @code{path}.  If no file\n\
-is found, return an empty character string.  For example:\n\
+Return the absolute name of @var{file} if it can be found in @var{path}.\n\
+\n\
+The value of @var{path} should be a colon-separated list of directories in\n\
+the format described for @code{path}.  If no file is found, return an empty\n\
+character string.  For example:\n\
 \n\
 @example\n\
 @group\n\
 file_in_path (EXEC_PATH, \"sh\")\n\
      @result{} \"/bin/sh\"\n\
 @end group\n\
 @end example\n\
 \n\
-If the second argument is a cell array of strings, search each\n\
-directory of the path for element of the cell array and return\n\
-the first that matches.\n\
+If the second argument is a cell array of strings, search each directory of\n\
+the path for element of the cell array and return the first that matches.\n\
 \n\
-If the third optional argument @qcode{\"all\"} is supplied, return\n\
-a cell array containing the list of all files that have the same\n\
-name in the path.  If no files are found, return an empty cell array.\n\
+If the third optional argument @qcode{\"all\"} is supplied, return a cell\n\
+array containing the list of all files that have the same name in the path. \n\
+If no files are found, return an empty cell array.\n\
 @seealso{file_in_loadpath, dir_in_loadpath, path}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 2 || nargin == 3)
@@ -689,21 +690,31 @@ do_string_escapes (const std::string& s)
       i++;
       j++;
     }
 
   retval.resize (i);
 
   return retval;
 }
+/*
+Escape sequences begin with a leading backslash (@qcode{"@xbackslashchar{}"})\n\
+followed by 1--3 characters (.e.g., @qcode{"@xbackslashchar{}n"} => newline).\n\
 
+
+   */
 DEFUN (do_string_escapes, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} do_string_escapes (@var{string})\n\
-Convert special characters in @var{string} to their escaped forms.\n\
+Convert escape sequences in @var{string} to the characters they represent.\n\
+\n\
+Escape sequences begin with a leading backslash\n\
+(@qcode{'@xbackslashchar{}'}) followed by 1--3 characters\n\
+(.e.g., @qcode{\"@xbackslashchar{}n\"} => newline).\n\
+@seealso{undo_string_escapes}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
@@ -801,41 +812,42 @@ undo_string_escapes (const std::string& 
     retval.append (undo_string_escape (s[i]));
 
   return retval;
 }
 
 DEFUN (undo_string_escapes, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} undo_string_escapes (@var{s})\n\
-Convert special characters in strings back to their escaped forms.  For\n\
-example, the expression\n\
+Convert special characters in strings back to their escaped forms.\n\
+\n\
+For example, the expression\n\
 \n\
 @example\n\
 bell = \"\\a\";\n\
 @end example\n\
 \n\
 @noindent\n\
-assigns the value of the alert character (control-g, ASCII code 7) to\n\
-the string variable @code{bell}.  If this string is printed, the\n\
-system will ring the terminal bell (if it is possible).  This is\n\
-normally the desired outcome.  However, sometimes it is useful to be\n\
-able to print the original representation of the string, with the\n\
-special characters replaced by their escape sequences.  For example,\n\
+assigns the value of the alert character (control-g, ASCII code 7) to the\n\
+string variable @code{bell}.  If this string is printed, the system will\n\
+ring the terminal bell (if it is possible).  This is normally the desired\n\
+outcome.  However, sometimes it is useful to be able to print the original\n\
+representation of the string, with the special characters replaced by their\n\
+escape sequences.  For example,\n\
 \n\
 @example\n\
 @group\n\
 octave:13> undo_string_escapes (bell)\n\
 ans = \\a\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
-replaces the unprintable alert character with its printable\n\
-representation.\n\
+replaces the unprintable alert character with its printable representation.\n\
+@seealso{do_string_escapes}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
@@ -921,17 +933,19 @@ Return true if @var{file} is a rooted-re
 %!error is_rooted_relative_filename ()
 %!error is_rooted_relative_filename ("foo", "bar")
 */
 
 DEFUN (make_absolute_filename, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} make_absolute_filename (@var{file})\n\
 Return the full name of @var{file} beginning from the root of the file\n\
-system.  No check is done for the existence of @var{file}.\n\
+system.\n\
+\n\
+No check is done for the existence of @var{file}.\n\
 @seealso{canonicalize_file_name, is_absolute_filename, is_rooted_relative_filename, isdir}\n\
 @end deftypefn")
 {
   octave_value retval = std::string ();
 
   if (args.length () == 1)
     {
       std::string nm = args(0).string_value ();
@@ -953,25 +967,26 @@ system.  No check is done for the existe
 %!error make_absolute_filename ()
 %!error make_absolute_filename ("foo", "bar")
 */
 
 DEFUN (dir_in_loadpath, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} dir_in_loadpath (@var{dir})\n\
 @deftypefnx {Built-in Function} {} dir_in_loadpath (@var{dir}, \"all\")\n\
-Return the full name of the path element matching @var{dir}.  The\n\
-match is performed at the end of each path element.  For example, if\n\
+Return the full name of the path element matching @var{dir}.\n\
+\n\
+The match is performed at the end of each path element.  For example, if\n\
 @var{dir} is @qcode{\"foo/bar\"}, it matches the path element\n\
 @nospell{@qcode{\"/some/dir/foo/bar\"}}, but not\n\
 @nospell{@qcode{\"/some/dir/foo/bar/baz\"}}\n\
 @nospell{@qcode{\"/some/dir/allfoo/bar\"}}.\n\
 \n\
-The second argument is optional.  If it is supplied, return a cell array\n\
-containing all name matches rather than just the first.\n\
+If the optional second argument is supplied, return a cell array containing\n\
+all name matches rather than just the first.\n\
 @seealso{file_in_path, file_in_loadpath, path}\n\
 @end deftypefn")
 {
   octave_value retval = std::string ();
 
   int nargin = args.length ();
 
   std::string dir;
@@ -1018,16 +1033,17 @@ DEFUNX ("errno", Ferrno, args, ,
         "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{err} =} errno ()\n\
 @deftypefnx {Built-in Function} {@var{err} =} errno (@var{val})\n\
 @deftypefnx {Built-in Function} {@var{err} =} errno (@var{name})\n\
 Return the current value of the system-dependent variable errno,\n\
 set its value to @var{val} and return the previous value, or return\n\
 the named error code given @var{name} as a character string, or -1\n\
 if @var{name} is not found.\n\
+@seealso{errno_list}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
@@ -1069,16 +1085,17 @@ if @var{name} is not found.\n\
 
 %!error errno ("foo", 1)
 */
 
 DEFUN (errno_list, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} errno_list ()\n\
 Return a structure containing the system-dependent errno values.\n\
+@seealso{errno}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 0)
     retval = octave_errno::list ();
   else
     print_usage ();
@@ -1354,19 +1371,21 @@ octave_sleep (double seconds)
 
 DEFUN (isindex, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} isindex (@var{ind})\n\
 @deftypefnx {Built-in Function} {} isindex (@var{ind}, @var{n})\n\
 Return true if @var{ind} is a valid index.\n\
 \n\
 Valid indices are either positive integers (although possibly of real data\n\
-type), or logical arrays.  If present, @var{n} specifies the maximum extent\n\
-of the dimension to be indexed.  When possible the internal result is cached\n\
-so that subsequent indexing using @var{ind} will not perform the check again.\n\
+type), or logical arrays.\n\
+\n\
+If present, @var{n} specifies the maximum extent of the dimension to be\n\
+indexed.  When possible the internal result is cached so that subsequent\n\
+indexing using @var{ind} will not perform the check again.\n\
 \n\
 Implementation Note: Strings are first converted to double values before the\n\
 checks for valid indices are made.  Unless a string contains the NULL\n\
 character @nospell{\"\\0\"}, it will always be a valid index.\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
@@ -1520,17 +1539,16 @@ octave_preserve_stream_state::~octave_pr
 }
 
 DEFUN (isstudent, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isstudent ()\n\
 Return true if running in the student edition of @sc{matlab}.\n\
 \n\
 @code{isstudent} always returns false in Octave.\n\
-\n\
 @seealso{false}\n\
 @end deftypefn")
 {
   if (args.length () != 0)
     print_usage ();
 
   return octave_value (false);
 }
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -348,16 +348,17 @@ do_isglobal (const octave_value_list& ar
 
   return symbol_table::is_global (name);
 }
 
 DEFUN (isglobal, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isglobal (@var{name})\n\
 Return true if @var{name} is a globally visible variable.\n\
+\n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 global x\n\
 isglobal (\"x\")\n\
    @result{} 1\n\
 @end group\n\
@@ -541,18 +542,18 @@ The return code @var{c} is one of\n\
 @item 103\n\
 @var{name} is a function not associated with a file (entered on the command\n\
 line).\n\
 \n\
 @item 0\n\
 @var{name} does not exist.\n\
 @end table\n\
 \n\
-If the optional argument @var{type} is supplied, check only for\n\
-symbols of the specified type.  Valid types are\n\
+If the optional argument @var{type} is supplied, check only for symbols of\n\
+the specified type.  Valid types are\n\
 \n\
 @table @asis\n\
 @item @qcode{\"var\"}\n\
 Check only for variables.\n\
 \n\
 @item @qcode{\"builtin\"}\n\
 Check only for built-in functions.\n\
 \n\
@@ -564,17 +565,17 @@ Check only for files and directories.\n\
 \n\
 @item @qcode{\"class\"}\n\
 Check only for classes.  (Note: This option is accepted, but not currently\n\
 implemented)\n\
 @end table\n\
 \n\
 If no type is given, and there are multiple possible matches for name,\n\
 @code{exist} will return a code according to the following priority list:\n\
-variable, built-in function, oct-file, directory, file, class. \n\
+variable, built-in function, oct-file, directory, file, class.\n\
 \n\
 @code{exist} returns 2 if a regular file called @var{name} is present in\n\
 Octave's search path.  If you want information about other types of files\n\
 not on the search path you should use some combination of the functions\n\
 @code{file_in_path} and @code{stat} instead.\n\
 \n\
 @seealso{file_in_loadpath, file_in_path, dir_in_loadpath, stat}\n\
 @end deftypefn")
@@ -1841,31 +1842,33 @@ do_who (int argc, const string_vector& a
 }
 
 DEFUN (who, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} who\n\
 @deftypefnx {Command} {} who pattern @dots{}\n\
 @deftypefnx {Command} {} who option pattern @dots{}\n\
 @deftypefnx {Command} {C =} who (\"pattern\", @dots{})\n\
-List currently defined variables matching the given patterns.  Valid\n\
-pattern syntax is the same as described for the @code{clear} command.\n\
+List currently defined variables matching the given patterns.\n\
+\n\
+Valid pattern syntax is the same as described for the @code{clear} command.\n\
 If no patterns are supplied, all variables are listed.\n\
+\n\
 By default, only variables visible in the local scope are displayed.\n\
 \n\
-The following are valid options but may not be combined.\n\
+The following are valid options, but may not be combined.\n\
 \n\
 @table @code\n\
 @item global\n\
 List variables in the global scope rather than the current scope.\n\
 \n\
 @item -regexp\n\
 The patterns are considered to be regular expressions when matching the\n\
-variables to display.  The same pattern syntax accepted by\n\
-the @code{regexp} function is used.\n\
+variables to display.  The same pattern syntax accepted by the @code{regexp}\n\
+function is used.\n\
 \n\
 @item -file\n\
 The next argument is treated as a filename.  All variables found within the\n\
 specified file are listed.  No patterns are accepted when reading variables\n\
 from a file.\n\
 @end table\n\
 \n\
 If called as a function, return a cell array of defined variable names\n\
@@ -1892,19 +1895,22 @@ matching the given patterns.\n\
 
 DEFUN (whos, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Command} {} whos\n\
 @deftypefnx {Command} {} whos pattern @dots{}\n\
 @deftypefnx {Command} {} whos option pattern @dots{}\n\
 @deftypefnx {Command} {S =} whos (\"pattern\", @dots{})\n\
 Provide detailed information on currently defined variables matching the\n\
-given patterns.  Options and pattern syntax are the same as for the\n\
-@code{who} command.  Extended information about each variable is\n\
-summarized in a table with the following default entries.\n\
+given patterns.\n\
+\n\
+Options and pattern syntax are the same as for the @code{who} command.\n\
+\n\
+Extended information about each variable is summarized in a table with the\n\
+following default entries.\n\
 \n\
 @table @asis\n\
 @item Attr\n\
 Attributes of the listed variable.  Possible attributes are:\n\
 \n\
 @table @asis\n\
 @item blank\n\
 Variable in local scope\n\
@@ -2070,18 +2076,19 @@ Lock the current function into memory so
 
   return retval;
 }
 
 DEFUN (munlock, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} munlock ()\n\
 @deftypefnx {Built-in Function} {} munlock (@var{fcn})\n\
-Unlock the named function @var{fcn}.  If no function is named\n\
-then unlock the current function.\n\
+Unlock the named function @var{fcn}.\n\
+\n\
+If no function is named then unlock the current function.\n\
 @seealso{mlock, mislocked, persistent}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 1)
     {
       if (args(0).is_string ())
@@ -2107,18 +2114,19 @@ then unlock the current function.\n\
   return retval;
 }
 
 
 DEFUN (mislocked, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} mislocked ()\n\
 @deftypefnx {Built-in Function} {} mislocked (@var{fcn})\n\
-Return true if the named function @var{fcn} is locked.  If no function is\n\
-named then return true if the current function is locked.\n\
+Return true if the named function @var{fcn} is locked.\n\
+\n\
+If no function is named then return true if the current function is locked.\n\
 @seealso{mlock, munlock, persistent}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     {
       if (args(0).is_string ())
@@ -2365,18 +2373,19 @@ do_matlab_compatible_clear (const string
           return retval; \
         } \
     } \
   while (0)
 
 DEFUN (clear, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Command} {} clear [options] pattern @dots{}\n\
-Delete the names matching the given patterns from the symbol table.  The\n\
-pattern may contain the following special characters:\n\
+Delete the names matching the given patterns from the symbol table.\n\
+\n\
+The pattern may contain the following special characters:\n\
 \n\
 @table @code\n\
 @item ?\n\
 Match any single character.\n\
 \n\
 @item *\n\
 Match zero or more characters.\n\
 \n\
@@ -2393,54 +2402,56 @@ For example, the command\n\
 clear foo b*r\n\
 @end example\n\
 \n\
 @noindent\n\
 clears the name @code{foo} and all names that begin with the letter\n\
 @code{b} and end with the letter @code{r}.\n\
 \n\
 If @code{clear} is called without any arguments, all user-defined\n\
-variables (local and global) are cleared from the symbol table.  If\n\
-@code{clear} is called with at least one argument, only the visible\n\
+variables (local and global) are cleared from the symbol table.\n\
+\n\
+If @code{clear} is called with at least one argument, only the visible\n\
 names matching the arguments are cleared.  For example, suppose you have\n\
 defined a function @code{foo}, and then hidden it by performing the\n\
 assignment @code{foo = 2}.  Executing the command @kbd{clear foo} once\n\
 will clear the variable definition and restore the definition of\n\
 @code{foo} as a function.  Executing @kbd{clear foo} a second time will\n\
 clear the function definition.\n\
 \n\
 The following options are available in both long and short form\n\
 \n\
 @table @code\n\
 @item -all, -a\n\
-Clears all local and global user-defined variables and all functions\n\
-from the symbol table.\n\
+Clear all local and global user-defined variables and all functions from the\n\
+symbol table.\n\
 \n\
 @item -exclusive, -x\n\
-Clears the variables that don't match the following pattern.\n\
+Clear the variables that don't match the following pattern.\n\
 \n\
 @item -functions, -f\n\
-Clears the function names and the built-in symbols names.\n\
+Clear the function names and the built-in symbols names.\n\
 \n\
 @item -global, -g\n\
-Clears the global symbol names.\n\
+Clear global symbol names.\n\
 \n\
 @item -variables, -v\n\
-Clears the local variable names.\n\
+Clear local variable names.\n\
 \n\
 @item -classes, -c\n\
 Clears the class structure table and clears all objects.\n\
 \n\
 @item -regexp, -r\n\
 The arguments are treated as regular expressions as any variables that\n\
 match will be cleared.\n\
 @end table\n\
 \n\
 With the exception of @code{exclusive}, all long options can be used\n\
 without the dash as well.\n\
+@seealso{who, whos, exist}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("clear");
 
@@ -2586,18 +2597,18 @@ A full format string is:\n\
 @smallexample\n\
 %[modifier]<command>[:width[:left-min[:balance]]];\n\
 @end smallexample\n\
 \n\
 The following command sequences are available:\n\
 \n\
 @table @code\n\
 @item %a\n\
-Prints attributes of variables (g=global, p=persistent,\n\
-f=formal parameter, a=automatic variable).\n\
+Prints attributes of variables (g=global, p=persistent, f=formal parameter,\n\
+a=automatic variable).\n\
 \n\
 @item %b\n\
 Prints number of bytes occupied by variables.\n\
 \n\
 @item %c\n\
 Prints class names of variables.\n\
 \n\
 @item %e\n\
@@ -2637,17 +2648,17 @@ be aligned between entries.  Numbering s
 leftmost column.  @code{left-min} specifies the minimum field width to the\n\
 left of the specified balance column.\n\
 \n\
 The default format is:\n\
 \n\
 @qcode{\"  %a:4; %ln:6; %cs:16:6:1;  %rb:12;  %lc:-1;@xbackslashchar{}n\"}\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{whos}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (whos_line_format);
 }
 
 static std::string Vmissing_function_hook = "__unimplemented__";
@@ -2656,17 +2667,17 @@ DEFUN (missing_function_hook, args, narg
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} missing_function_hook ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} missing_function_hook (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} missing_function_hook (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the function to call when\n\
 an unknown identifier is requested.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 @seealso{missing_component_hook}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (missing_function_hook);
 }
 
 void maybe_missing_function_hook (const std::string& name)
@@ -2718,22 +2729,24 @@ Undocumented internal function.\n\
 static std::string Vmissing_component_hook;
 
 DEFUN (missing_component_hook, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} missing_component_hook ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} missing_component_hook (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} missing_component_hook (@var{new_val}, \"local\")\n\
 Query or set the internal variable that specifies the function to call when\n\
-a component of Octave is missing.  This can be useful for packagers that\n\
-may split the Octave installation into multiple sub-packages, for example,\n\
-to provide a hint to users for how to install the missing components.\n\
+a component of Octave is missing.\n\
+\n\
+This can be useful for packagers that may split the Octave installation into\n\
+multiple sub-packages, for example, to provide a hint to users for how to\n\
+install the missing components.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
-variable is changed locally for the function and any subroutines it calls.  \n\
+variable is changed locally for the function and any subroutines it calls.\n\
 The original variable value is restored when exiting the function.\n\
 \n\
 The hook function is expected to be of the form\n\
 \n\
 @example\n\
 @var{fcn} (@var{component})\n\
 @end example\n\
 \n\
diff --git a/scripts/polynomial/spline.m b/scripts/polynomial/spline.m
--- a/scripts/polynomial/spline.m
+++ b/scripts/polynomial/spline.m
@@ -30,20 +30,20 @@
 ## at the points @var{xi}.  The third calling form
 ## @code{spline (@var{x}, @var{y}, @var{xi})} is equivalent to
 ## @code{ppval (spline (@var{x}, @var{y}), @var{xi})}.
 ##
 ## The variable @var{x} must be a vector of length @var{n}.
 ##
 ## @var{y} can be either a vector or array.  If @var{y} is a vector it must
 ## have a length of either @var{n} or @code{@var{n} + 2}.  If the length of
-## @var{y} is @var{n}, then the "not-a-knot" end condition is used.  If the
-## length of @var{y} is @code{@var{n} + 2}, then the first and last values of
-## the vector @var{y} are the values of the first derivative of the cubic
-## spline at the endpoints.
+## @var{y} is @var{n}, then the @qcode{"not-a-knot"} end condition is used. 
+## If the length of @var{y} is @code{@var{n} + 2}, then the first and last
+## values of the vector @var{y} are the values of the first derivative of the
+## cubic spline at the endpoints.
 ##
 ## If @var{y} is an array, then the size of @var{y} must have the form
 ## @tex
 ## $$[s_1, s_2, \cdots, s_k, n]$$
 ## @end tex
 ## @ifnottex
 ## @code{[@var{s1}, @var{s2}, @dots{}, @var{sk}, @var{n}]}
 ## @end ifnottex
