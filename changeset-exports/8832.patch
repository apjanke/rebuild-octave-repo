# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1235159969 18000
#      Fri Feb 20 14:59:29 2009 -0500
# Node ID 9dddbad47122afb781ed30c14c88168aa63a0856
# Parent  71742f45571ed96e0cc91b14c3647276c0a03994
automatically reload out of date mex files

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2009-02-20  John W. Eaton  <jwe@octave.org>
 
+	* dynamic-ld.cc (octave_dynamic_loader::do_load_mex): Clear and
+	reload mex file if it is out of date.  Don't check path for file.
+
 	* pt-bp.cc (tree_breakpoint::visit_octave_user_script,
 	tree_breakpoint::visit_octave_user_function):
 	Don't panic.  Call accept on command list if it exists.
 
 2009-02-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base-mat.cc (octave_base_matrix<MT>::do_index_op):
 	Correctly compute all-scalar index.
diff --git a/src/dynamic-ld.cc b/src/dynamic-ld.cc
--- a/src/dynamic-ld.cc
+++ b/src/dynamic-ld.cc
@@ -391,77 +391,80 @@ octave_dynamic_loader::do_load_oct (cons
 
 octave_function *
 octave_dynamic_loader::do_load_mex (const std::string& fcn_name,
 				    const std::string& file_name,
 				    bool relative)
 {
   octave_function *retval = 0;
 
-  octave_shlib mex_file;
-
   unwind_protect::begin_frame ("octave_dynamic_loader::do_load");
 
   unwind_protect_bool (octave_dynamic_loader::doing_load);
 
   doing_load = true;
 
-  std::string mex_file_name = file_name;
+  octave_shlib mex_file = octave_shlib_list::find_file (file_name);
 
-  if (mex_file_name.empty ())
+  if (mex_file && mex_file.is_out_of_date ())
+    clear (mex_file);
+
+  if (! mex_file)
     {
-      mex_file_name = mex_file_in_path (fcn_name);
+      mex_file.open (file_name);
 
-      if (! mex_file_name.empty ())
-	relative = ! octave_env::absolute_pathname (mex_file_name);
+      if (! error_state && mex_file)
+	{
+	  octave_shlib_list::append (mex_file);
+
+	  if (relative)
+	    mex_file.mark_relative ();
+	}
     }
 
-  void *function = 0;
-
-  bool have_fmex = false;
+  if (! error_state)
+    {
+      if (mex_file)
+	{
+	  void *function = 0;
 
-  if (! mex_file_name.empty ())
-    {
-      mex_file.open (mex_file_name);
+	  bool have_fmex = false;
 
-      if (! error_state)
-	{
-	  if (mex_file)
+	  octave_mex_file_list::append (mex_file);
+
+	  function = mex_file.search (fcn_name, mex_mangler);
+
+	  if (! function)
 	    {
-	      octave_mex_file_list::append (mex_file);
+	      // FIXME -- can we determine this C mangling scheme
+	      // automatically at run time or configure time?
 
-	      function = mex_file.search (fcn_name, mex_mangler);
+	      function = mex_file.search (fcn_name, mex_uscore_mangler);
 
 	      if (! function)
 		{
-		  // FIXME -- can we determine this C mangling scheme
-		  // automatically at run time or configure time?
-
-		  function = mex_file.search (fcn_name, mex_uscore_mangler);
+		  function = mex_file.search (fcn_name, mex_f77_mangler);
 
-		  if (! function)
-		    {
-		      function = mex_file.search (fcn_name, mex_f77_mangler);
-
-		      if (function)
-			have_fmex = true;
-		    }
+		  if (function)
+		    have_fmex = true;
 		}
 	    }
+
+	  if (function)
+	    retval = new octave_mex_function (function, have_fmex,
+					      mex_file, fcn_name);
 	  else
-	    ::error ("%s is not a valid shared library",
-		     mex_file_name.c_str ());
-	}
+	    ::error ("failed to install .mex file function `%s'",
+		     fcn_name.c_str ());
+  	}
+      else
+	::error ("%s is not a valid shared library",
+		 file_name.c_str ());
     }
 
-  if (function)
-    retval = new octave_mex_function (function, have_fmex, mex_file, fcn_name);
-  else
-    ::error ("failed to install .mex file function `%s'", fcn_name.c_str ());
-  
   unwind_protect::run_frame ("octave_dynamic_loader::do_load");
 
   return retval;
 }
 
 bool
 octave_dynamic_loader::do_remove_oct (const std::string& fcn_name,
 				      octave_shlib& shl)
