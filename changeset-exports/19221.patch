# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1412541908 14400
#      Sun Oct 05 16:45:08 2014 -0400
# Node ID f5ad7470d9570ec1f96b07453e31d892edbe4e61
# Parent  6443693a176f007fbb26c5acf8b91e564b1b2f1d
fftw: Reword error messages to be consistent with other functions

* fftw.cc (Ffftw): Reword error messages to be consistent with other
Octave functions. Use gripe_disabled_feature to report when Octave is
built without FFTW.

diff --git a/libinterp/dldfcn/fftw.cc b/libinterp/dldfcn/fftw.cc
--- a/libinterp/dldfcn/fftw.cc
+++ b/libinterp/dldfcn/fftw.cc
@@ -27,16 +27,18 @@ along with Octave; see the file COPYING.
 #include <algorithm>
 
 #include "oct-fftw.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "ov.h"
 
+#include "gripes.h"
+
 DEFUN_DLD (fftw, args, ,
            "-*- texinfo -*-\n\
 @deftypefn  {Loadable Function} {@var{method} =} fftw (\"planner\")\n\
 @deftypefnx {Loadable Function} {} fftw (\"planner\", @var{method})\n\
 @deftypefnx {Loadable Function} {@var{wisdom} =} fftw (\"dwisdom\")\n\
 @deftypefnx {Loadable Function} {} fftw (\"dwisdom\", @var{wisdom})\n\
 @deftypefnx {Loadable Function} {} fftw (\"threads\", @var{nthreads})\n\
 @deftypefnx {Loadable Function} {@var{nthreads} =} fftw (\"threads\")\n\
@@ -184,17 +186,17 @@ used per default.\n\
                               methf = octave_float_fftw_planner::EXHAUSTIVE;
                             }
                           else if (arg1 == "hybrid")
                             {
                               meth = octave_fftw_planner::HYBRID;
                               methf = octave_float_fftw_planner::HYBRID;
                             }
                           else
-                            error ("unrecognized planner METHOD");
+                            error ("fftw: unrecognized planner METHOD");
 
                           if (!error_state)
                             {
                               meth = octave_fftw_planner::method (meth);
                               octave_float_fftw_planner::method (methf);
 
                               if (meth == octave_fftw_planner::MEASURE)
                                 retval = octave_value ("measure");
@@ -205,17 +207,17 @@ used per default.\n\
                               else if (meth == octave_fftw_planner::HYBRID)
                                 retval = octave_value ("hybrid");
                               else
                                 retval = octave_value ("estimate");
                             }
                         }
                     }
                   else
-                    error ("fftw planner expects a string value as METHOD");
+                    error ("fftw: planner expects a string value as METHOD");
                 }
               else //planner getter
                 {
                   octave_fftw_planner::FftwMethod meth =
                     octave_fftw_planner::method ();
 
                   if (meth == octave_fftw_planner::MEASURE)
                     retval = octave_value ("measure");
@@ -241,17 +243,17 @@ used per default.\n\
                       std::string arg1 = args(1).string_value ();
                       if (!error_state)
                         {
                           char *str = fftw_export_wisdom_to_string ();
 
                           if (arg1.length () < 1)
                             fftw_forget_wisdom ();
                           else if (! fftw_import_wisdom_from_string (arg1.c_str ()))
-                            error ("could not import supplied WISDOM");
+                            error ("fftw: could not import supplied WISDOM");
 
                           if (!error_state)
                             retval = octave_value (std::string (str));
 
                           free (str);
                         }
                     }
                 }
@@ -275,17 +277,17 @@ used per default.\n\
                       std::string arg1 = args(1).string_value ();
                       if (!error_state)
                         {
                           char *str = fftwf_export_wisdom_to_string ();
 
                           if (arg1.length () < 1)
                             fftwf_forget_wisdom ();
                           else if (! fftwf_import_wisdom_from_string (arg1.c_str ()))
-                            error ("could not import supplied WISDOM");
+                            error ("fftw: could not import supplied WISDOM");
 
                           if (!error_state)
                             retval = octave_value (std::string (str));
 
                           free (str);
                         }
                     }
                 }
@@ -303,46 +305,46 @@ used per default.\n\
                   if (args(1).is_real_scalar ())
                     {
                       int nthreads = args(1).int_value();
                       if (nthreads >= 1)
                         {
 #if defined (HAVE_FFTW3_THREADS)
                           octave_fftw_planner::threads (nthreads);
 #else
-                          warning ("this copy of Octave was not configured to use the multithreaded fftw libraries.");
+                          gripe_disabled_feature ("fftw", "multithreaded FFTW");
 #endif
 #if defined (HAVE_FFTW3F_THREADS)
                           octave_float_fftw_planner::threads (nthreads);
 #else
-                          warning ("this copy of Octave was not configured to use the multithreaded fftwf libraries.");
+                          gripe_disabled_feature ("fftw", "multithreaded FFTW");
 #endif
                         }
                       else
-                        error ("number of threads must be >=1");
+                        error ("fftw: number of threads must be >=1");
                     }
                   else
-                    error ("setting threads needs one integer argument.");
+                    error ("fftw: setting threads needs one integer argument");
                 }
               else //threads getter
 #if defined (HAVE_FFTW3_THREADS)
                 retval = octave_value (octave_fftw_planner::threads());
 #else
                 retval = 1;
 #endif
             }
           else
-            error ("unrecognized argument");
+            error ("fftw: unrecognized argument");
         }
     }
   else
-    error ("unrecognized argument");
+    error ("fftw: unrecognized argument");
 #else
 
-  warning ("fftw: this copy of Octave was not configured to use the FFTW3 planner");
+  gripe_disabled_feature ("fftw", "the FFTW3 planner");
 
 #endif
 
   return retval;
 }
 
 /*
 %!testif HAVE_FFTW
