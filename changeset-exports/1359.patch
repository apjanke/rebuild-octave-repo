# HG changeset patch
# User jwe
# Date 810336626 0
#      Tue Sep 05 21:30:26 1995 +0000
# Node ID a6994c934a50acca625f7ee553549170e3b72d6f
# Parent  dc9c01f66a192f416253a9fcb750c830f2fbd7bc
[project @ 1995-09-05 21:30:26 by jwe]

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -35,24 +35,23 @@ Software Foundation, 59 Temple Place - S
 // Classes we declare.
 
 template <class T> class ArrayRep;
 template <class T> class Array;
 template <class T> class Array2;
 template <class T> class Array3;
 template <class T> class DiagArray;
 
-/*
- * The real representation of all arrays.
- */
+// The real representation of all arrays.
 
 template <class T>
 class ArrayRep
 {
-// Rethink resize()?
+  // Rethink resize()?
+
   friend class Array<T>;
   friend class Array2<T>;
   friend class Array3<T>;
   friend class DiagArray<T>;
 
 protected:
 
   ArrayRep (T *d, int l);
@@ -75,20 +74,18 @@ public:
 
 private:
 
   T *data;
   int len;
   int count;
 };
 
-/*
- * One dimensional array class.  Handles the reference counting for
- * all the derived classes.
- */
+// One dimensional array class.  Handles the reference counting for
+// all the derived classes.
 
 template <class T>
 class Array
 {
 protected:
 
   ArrayRep<T> *rep;
 
@@ -108,34 +105,33 @@ public:
 
   int capacity (void) const;
   int length (void) const;
 
   T& elem (int n);
   T& checkelem (int n);
   T& operator () (int n);
 
-// No checking.
+  // No checking.
+
   T& xelem (int n);
 
   T elem (int n) const;
   T checkelem (int n) const;
   T operator () (int n) const;
 
   void resize (int n);
   void resize (int n, const T& val);
 
   const T *data (void) const;
 
   T *fortran_vec (void);
 };
 
-/*
- * Two dimensional array class.
- */
+// Two dimensional array class.
 
 template <class T>
 class Array2 : public Array<T>
 {
 protected:
 
   int d1;
   int d2;
@@ -160,30 +156,29 @@ public:
   int rows (void) const;
   int cols (void) const;
   int columns (void) const;
 
   T& elem (int i, int j);
   T& checkelem (int i, int j);
   T& operator () (int i, int j);
 
-// No checking.
+  // No checking.
+
   T& xelem (int i, int j);
 
   T elem (int i, int j) const;
   T checkelem (int i, int j) const;
   T operator () (int i, int j) const;
 
   void resize (int n, int m);
   void resize (int n, int m, const T& val);
 };
 
-/*
- * Three dimensional array class.
- */
+// Three dimensional array class.
 
 template <class T>
 class Array3 : public Array2<T>
 {
 protected:
 
   int d3;
 
@@ -201,41 +196,40 @@ public:
   Array3<T>& operator = (const Array3<T>& a);
 
   int dim3 (void) const;
 
   T& elem (int i, int j, int k);
   T& checkelem (int i, int j, int k);
   T& operator () (int i, int j, int k);
 
-// No checking.
+  // No checking.
+
   T& xelem (int i, int j, int k);
 
   T elem (int i, int j, int k) const;
   T checkelem (int i, int j, int k) const;
   T operator () (int i, int j, int k) const;
 
   void resize (int n, int m, int k);
   void resize (int n, int m, int k, const T& val);
 };
 
-/*
- * A two-dimensional array with diagonal elements only.
- *
- * Idea and example code for Proxy class and functions from:
- *
- * From: kanze@us-es.sel.de (James Kanze)
- * Subject: Re: How to overload [] to do READ/WRITE differently ?
- * Message-ID: <KANZE.93Nov29151407@slsvhdt.us-es.sel.de>
- * Sender: news@us-es.sel.de
- * Date: 29 Nov 1993 14:14:07 GMT
- * --
- * James Kanze                             email: kanze@us-es.sel.de
- * GABI Software, Sarl., 8 rue du Faisan, F-67000 Strasbourg, France
- */
+// A two-dimensional array with diagonal elements only.
+//
+// Idea and example code for Proxy class and functions from:
+//
+// From: kanze@us-es.sel.de (James Kanze)
+// Subject: Re: How to overload [] to do READ/WRITE differently ?
+// Message-ID: <KANZE.93Nov29151407@slsvhdt.us-es.sel.de>
+// Sender: news@us-es.sel.de
+// Date: 29 Nov 1993 14:14:07 GMT
+// --
+// James Kanze                             email: kanze@us-es.sel.de
+// GABI Software, Sarl., 8 rue du Faisan, F-67000 Strasbourg, France
 
 template <class T>
 class DiagArray : public Array<T>
 {
 private:
   inline T get (int i) { return Array<T>::elem (i); }
   inline void set (const T& val, int i) { Array<T>::elem (i) = val; }
 
@@ -270,19 +264,19 @@ private:
 	{
 	  static T foo (0);
 	  return foo;
 	}
     }
 
   private:
 
-// XXX FIXME XXX -- this is declared private to keep the user from
-// taking the address of a Proxy.  Maybe it should be implemented by
-// means of a companion function in the DiagArray class.
+    // XXX FIXME XXX -- this is declared private to keep the user from
+    // taking the address of a Proxy.  Maybe it should be implemented
+    // by means of a companion function in the DiagArray class.
 
     inline T *operator& () const { assert (0); return (T *) 0; }
 
     int i;
     int j;
 
     DiagArray<T> *object;
 
@@ -348,17 +342,18 @@ public:
       return Proxy (this, r, c);
   }
 #else
   T& elem (int r, int c);
   T& checkelem (int r, int c);
   T& operator () (int r, int c);
 #endif
 
-// No checking.
+  // No checking.
+
   T& xelem (int r, int c);
 
   T elem (int r, int c) const;
   T checkelem (int r, int c) const;
   T operator () (int r, int c) const;
 
   void resize (int n, int m);
   void resize (int n, int m, const T& val);
diff --git a/liboctave/CColVector.h b/liboctave/CColVector.h
--- a/liboctave/CColVector.h
+++ b/liboctave/CColVector.h
@@ -50,17 +50,17 @@ public:
     {
       MArray<Complex>::operator = (a);
       return *this;
     }
 
   int operator == (const ComplexColumnVector& a) const;
   int operator != (const ComplexColumnVector& a) const;
 
-// destructive insert/delete/reorder operations
+  // destructive insert/delete/reorder operations
 
   ComplexColumnVector& insert (const ColumnVector& a, int r);
   ComplexColumnVector& insert (const ComplexColumnVector& a, int r);
 
   ComplexColumnVector& fill (double val);
   ComplexColumnVector& fill (const Complex& val);
   ComplexColumnVector& fill (double val, int r1, int r2);
   ComplexColumnVector& fill (const Complex& val, int r1, int r2);
@@ -68,29 +68,29 @@ public:
   ComplexColumnVector stack (const ColumnVector& a) const;
   ComplexColumnVector stack (const ComplexColumnVector& a) const;
 
   ComplexRowVector hermitian (void) const;  // complex conjugate transpose.
   ComplexRowVector transpose (void) const;
 
   friend ComplexColumnVector conj (const ComplexColumnVector& a);
 
-// resize is the destructive equivalent for this one
+  // resize is the destructive equivalent for this one
 
   ComplexColumnVector extract (int r1, int r2) const;
 
-// column vector by column vector -> column vector operations
+  // column vector by column vector -> column vector operations
 
   ComplexColumnVector& operator += (const ColumnVector& a);
   ComplexColumnVector& operator -= (const ColumnVector& a);
 
   ComplexColumnVector& operator += (const ComplexColumnVector& a);
   ComplexColumnVector& operator -= (const ComplexColumnVector& a);
 
-// column vector by scalar -> column vector operations
+  // column vector by scalar -> column vector operations
 
   friend ComplexColumnVector operator + (const ComplexColumnVector& a,
 					 double s);
   friend ComplexColumnVector operator - (const ComplexColumnVector& a,
 					 double s);
   friend ComplexColumnVector operator * (const ComplexColumnVector& a,
 					 double s);
   friend ComplexColumnVector operator / (const ComplexColumnVector& a,
@@ -100,17 +100,17 @@ public:
 					 const Complex& s);  
   friend ComplexColumnVector operator - (const ColumnVector& a,
 					 const Complex& s);
   friend ComplexColumnVector operator * (const ColumnVector& a,
 					 const Complex& s);
   friend ComplexColumnVector operator / (const ColumnVector& a,
 					 const Complex& s);
 
-// scalar by column vector -> column vector operations
+  // scalar by column vector -> column vector operations
 
   friend ComplexColumnVector operator + (double s,
 					 const ComplexColumnVector& a); 
   friend ComplexColumnVector operator - (double s,
 					 const ComplexColumnVector& a);
   friend ComplexColumnVector operator * (double s,
 					 const ComplexColumnVector& a);
   friend ComplexColumnVector operator / (double s,
@@ -120,25 +120,25 @@ public:
 					 const ColumnVector& a); 
   friend ComplexColumnVector operator - (const Complex& s,
 					 const ColumnVector& a);
   friend ComplexColumnVector operator * (const Complex& s,
 					 const ColumnVector& a);
   friend ComplexColumnVector operator / (const Complex& s,
 					 const ColumnVector& a);
 
-// matrix by column vector -> column vector operations
+  // matrix by column vector -> column vector operations
 
   friend ComplexColumnVector operator * (const ComplexMatrix& a,
 					 const ColumnVector& b);
 
   friend ComplexColumnVector operator * (const ComplexMatrix& a,
 					 const ComplexColumnVector& b);
 
-// column vector by column vector -> column vector operations
+  // column vector by column vector -> column vector operations
 
   friend ComplexColumnVector operator + (const ComplexColumnVector& a,
 					 const ColumnVector& b);
   friend ComplexColumnVector operator - (const ComplexColumnVector& a,
 					 const ColumnVector& b);
 
   friend ComplexColumnVector operator + (const ColumnVector& a,
 					 const ComplexColumnVector& b);
@@ -150,41 +150,41 @@ public:
   friend ComplexColumnVector quotient (const ComplexColumnVector& a,
 				       const ColumnVector& b);
 
   friend ComplexColumnVector product (const ColumnVector& a,
 				      const ComplexColumnVector& b); 
   friend ComplexColumnVector quotient (const ColumnVector& a,
 				       const ComplexColumnVector& b); 
 
-// matrix by column vector -> column vector operations
+  // matrix by column vector -> column vector operations
 
   friend ComplexColumnVector operator * (const Matrix& a,
 					 const ComplexColumnVector& b);
 
-// diagonal matrix by column vector -> column vector operations
+  // diagonal matrix by column vector -> column vector operations
 
   friend ComplexColumnVector operator * (const DiagMatrix& a,
 					 const ComplexColumnVector& b);
 
   friend ComplexColumnVector operator * (const ComplexDiagMatrix& a,
 					 const ColumnVector& b);
 
   friend ComplexColumnVector operator * (const ComplexDiagMatrix& a,
 					 const ComplexColumnVector& b);
 
-// other operations
+  // other operations
 
   friend ComplexColumnVector map (c_c_Mapper f, const ComplexColumnVector& a);
   void map (c_c_Mapper f);
 
   Complex min (void) const;
   Complex max (void) const;
 
-// i/o
+  // i/o
 
   friend ostream& operator << (ostream& os, const ComplexColumnVector& a);
   friend istream& operator >> (istream& is, ComplexColumnVector& a);
 
 private:
 
   ComplexColumnVector (Complex *d, int l) : MArray<Complex> (d, l) { }
 };
diff --git a/liboctave/CDiagMatrix.h b/liboctave/CDiagMatrix.h
--- a/liboctave/CDiagMatrix.h
+++ b/liboctave/CDiagMatrix.h
@@ -80,54 +80,54 @@ public:
   ComplexDiagMatrix& fill (const RowVector& a, int beg);
   ComplexDiagMatrix& fill (const ComplexRowVector& a, int beg);
 
   ComplexDiagMatrix hermitian (void) const;  // complex conjugate transpose
   ComplexDiagMatrix transpose (void) const;
 
   friend ComplexDiagMatrix conj (const ComplexDiagMatrix& a);
 
-// resize is the destructive analog for this one
+  // resize is the destructive analog for this one
 
   ComplexMatrix extract (int r1, int c1, int r2, int c2) const;
 
-// extract row or column i.
+  // extract row or column i
 
   ComplexRowVector row (int i) const;
   ComplexRowVector row (char *s) const;
 
   ComplexColumnVector column (int i) const;
   ComplexColumnVector column (char *s) const;
 
   ComplexDiagMatrix inverse (int& info) const;
   ComplexDiagMatrix inverse (void) const;
 
-// diagonal matrix by diagonal matrix -> diagonal matrix operations
+  // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
   ComplexDiagMatrix& operator += (const DiagMatrix& a);
   ComplexDiagMatrix& operator -= (const DiagMatrix& a);
 
   ComplexDiagMatrix& operator += (const ComplexDiagMatrix& a);
   ComplexDiagMatrix& operator -= (const ComplexDiagMatrix& a);
 
-// diagonal matrix by scalar -> diagonal matrix operations
+  // diagonal matrix by scalar -> diagonal matrix operations
 
   friend ComplexDiagMatrix operator * (const ComplexDiagMatrix& a, double s);
   friend ComplexDiagMatrix operator / (const ComplexDiagMatrix& a, double s);
 
   friend ComplexDiagMatrix operator * (const DiagMatrix& a, const Complex& s);
   friend ComplexDiagMatrix operator / (const DiagMatrix& a, const Complex& s);
 
-// scalar by diagonal matrix -> diagonal matrix operations
+  // scalar by diagonal matrix -> diagonal matrix operations
 
   friend ComplexDiagMatrix operator * (double s, const ComplexDiagMatrix& a);
 
   friend ComplexDiagMatrix operator * (const Complex& s, const DiagMatrix& a);
 
-// diagonal matrix by diagonal matrix -> diagonal matrix operations
+  // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
   friend ComplexDiagMatrix operator * (const ComplexDiagMatrix& a,
 				       const ComplexDiagMatrix& b);
 
   friend ComplexDiagMatrix operator + (const ComplexDiagMatrix& a,
 				       const DiagMatrix& b);
   friend ComplexDiagMatrix operator - (const ComplexDiagMatrix& a,
 				       const DiagMatrix& b);
@@ -142,22 +142,22 @@ public:
 				       const ComplexDiagMatrix& b);
 
   friend ComplexDiagMatrix product (const ComplexDiagMatrix& a,
 				    const DiagMatrix& b); 
 
   friend ComplexDiagMatrix product (const DiagMatrix& a,
 				    const ComplexDiagMatrix& b);
 
-// other operations
+  // other operations
 
   ComplexColumnVector diag (void) const;
   ComplexColumnVector diag (int k) const;
 
-// i/o
+  // i/o
 
   friend ostream& operator << (ostream& os, const ComplexDiagMatrix& a);
 
 private:
 
   ComplexDiagMatrix (Complex *d, int nr, int nc)
     : MDiagArray<Complex> (d, nr, nc) { }
 };
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -62,17 +62,17 @@ public:
     {
       MArray2<Complex>::operator = (a);
       return *this;
     }
 
   int operator == (const ComplexMatrix& a) const;
   int operator != (const ComplexMatrix& a) const;
 
-// destructive insert/delete/reorder operations
+  // destructive insert/delete/reorder operations
 
   ComplexMatrix& insert (const Matrix& a, int r, int c);
   ComplexMatrix& insert (const RowVector& a, int r, int c);
   ComplexMatrix& insert (const ColumnVector& a, int r, int c);
   ComplexMatrix& insert (const DiagMatrix& a, int r, int c);
 
   ComplexMatrix& insert (const ComplexMatrix& a, int r, int c);
   ComplexMatrix& insert (const ComplexRowVector& a, int r, int c);
@@ -104,21 +104,21 @@ public:
   ComplexMatrix stack (const ComplexColumnVector& a) const;
   ComplexMatrix stack (const ComplexDiagMatrix& a) const;
 
   ComplexMatrix hermitian (void) const;  // complex conjugate transpose
   ComplexMatrix transpose (void) const;
 
   friend ComplexMatrix conj (const ComplexMatrix& a);
 
-// resize is the destructive equivalent for this one
+  // resize is the destructive equivalent for this one
 
   ComplexMatrix extract (int r1, int c1, int r2, int c2) const;
 
-// extract row or column i.
+  // extract row or column i.
 
   ComplexRowVector row (int i) const;
   ComplexRowVector row (char *s) const;
 
   ComplexColumnVector column (int i) const;
   ComplexColumnVector column (char *s) const;
 
   ComplexMatrix inverse (void) const;
@@ -155,69 +155,69 @@ public:
   ComplexMatrix lssolve (const ComplexMatrix& b, int& info,
 			 int& rank) const;
 
   ComplexColumnVector lssolve (const ComplexColumnVector& b) const;
   ComplexColumnVector lssolve (const ComplexColumnVector& b, int& info) const;
   ComplexColumnVector lssolve (const ComplexColumnVector& b, int& info,
 			       int& rank) const;
 
-// column vector by row vector -> matrix operations
+  // column vector by row vector -> matrix operations
 
   friend ComplexMatrix operator * (const ColumnVector& a,
 				   const ComplexRowVector& b);
 
   friend ComplexMatrix operator * (const ComplexColumnVector& a,
 				   const RowVector& b);
 
   friend ComplexMatrix operator * (const ComplexColumnVector& a,
 				   const ComplexRowVector& b);
 
-// diagonal matrix by scalar -> matrix operations
+  // diagonal matrix by scalar -> matrix operations
 
   friend ComplexMatrix operator + (const DiagMatrix& a, const Complex& s);
   friend ComplexMatrix operator - (const DiagMatrix& a, const Complex& s);
 
   friend ComplexMatrix operator + (const ComplexDiagMatrix& a, double s);
   friend ComplexMatrix operator - (const ComplexDiagMatrix& a, double s);
 
   friend ComplexMatrix operator + (const ComplexDiagMatrix& a,
 				   const Complex& s);
   friend ComplexMatrix operator - (const ComplexDiagMatrix& a,
 				   const Complex& s);
 
-// scalar by diagonal matrix -> matrix operations
+  // scalar by diagonal matrix -> matrix operations
 
   friend ComplexMatrix operator + (const Complex& s, const DiagMatrix& a);
   friend ComplexMatrix operator - (const Complex& s, const DiagMatrix& a);
 
   friend ComplexMatrix operator + (double s, const ComplexDiagMatrix& a);
   friend ComplexMatrix operator - (double s, const ComplexDiagMatrix& a);
 
   friend ComplexMatrix operator + (const Complex& s,
 				   const ComplexDiagMatrix& a);
   friend ComplexMatrix operator - (const Complex& s,
 				   const ComplexDiagMatrix& a);
 
-// matrix by diagonal matrix -> matrix operations
+  // matrix by diagonal matrix -> matrix operations
 
   ComplexMatrix& operator += (const DiagMatrix& a);
   ComplexMatrix& operator -= (const DiagMatrix& a);
 
   ComplexMatrix& operator += (const ComplexDiagMatrix& a);
   ComplexMatrix& operator -= (const ComplexDiagMatrix& a);
 
   friend ComplexMatrix operator + (const Matrix& a,
 				   const ComplexDiagMatrix& b); 
   friend ComplexMatrix operator - (const Matrix& a,
 				   const ComplexDiagMatrix& b);
   friend ComplexMatrix operator * (const Matrix& a,
 				   const ComplexDiagMatrix& b);
 
-// diagonal matrix by matrix -> matrix operations
+  // diagonal matrix by matrix -> matrix operations
 
   friend ComplexMatrix operator + (const DiagMatrix& a,
 				   const ComplexMatrix& b);
   friend ComplexMatrix operator - (const DiagMatrix& a,
 				   const ComplexMatrix& b);
   friend ComplexMatrix operator * (const DiagMatrix& a,
 				   const ComplexMatrix& b);
 
@@ -230,69 +230,69 @@ public:
 
   friend ComplexMatrix operator + (const ComplexDiagMatrix& a,
 				   const ComplexMatrix& b);
   friend ComplexMatrix operator - (const ComplexDiagMatrix& a,
 				   const ComplexMatrix& b);
   friend ComplexMatrix operator * (const ComplexDiagMatrix& a,
 				   const ComplexMatrix& b);
 
-// matrix by matrix -> matrix operations
+  // matrix by matrix -> matrix operations
 
   ComplexMatrix& operator += (const Matrix& a);
   ComplexMatrix& operator -= (const Matrix& a);
 
   ComplexMatrix& operator += (const ComplexMatrix& a);
   ComplexMatrix& operator -= (const ComplexMatrix& a);
 
-// unary operations
+  // unary operations
 
   Matrix operator ! (void) const;
 
-// matrix by scalar -> matrix operations
+  / matrix by scalar -> matrix operations
 
   friend ComplexMatrix operator + (const Matrix& a, const Complex& s);
   friend ComplexMatrix operator - (const Matrix& a, const Complex& s);
   friend ComplexMatrix operator * (const Matrix& a, const Complex& s);
   friend ComplexMatrix operator / (const Matrix& a, const Complex& s);
 
   friend ComplexMatrix operator + (const ComplexMatrix& a, double s);
   friend ComplexMatrix operator - (const ComplexMatrix& a, double s);
   friend ComplexMatrix operator * (const ComplexMatrix& a, double s);
   friend ComplexMatrix operator / (const ComplexMatrix& a, double s);
 
-// scalar by matrix -> matrix operations
+  // scalar by matrix -> matrix operations
 
   friend ComplexMatrix operator + (double s, const ComplexMatrix& a);
   friend ComplexMatrix operator - (double s, const ComplexMatrix& a);
   friend ComplexMatrix operator * (double s, const ComplexMatrix& a);
   friend ComplexMatrix operator / (double s, const ComplexMatrix& a);
 
   friend ComplexMatrix operator + (const Complex& s, const Matrix& a);
   friend ComplexMatrix operator - (const Complex& s, const Matrix& a);
   friend ComplexMatrix operator * (const Complex& s, const Matrix& a);
   friend ComplexMatrix operator / (const Complex& s, const Matrix& a);
 
-// matrix by diagonal matrix -> matrix operations
+  // matrix by diagonal matrix -> matrix operations
 
   friend ComplexMatrix operator + (const ComplexMatrix& a,
 				   const DiagMatrix& b);
   friend ComplexMatrix operator - (const ComplexMatrix& a,
 				   const DiagMatrix& b);
   friend ComplexMatrix operator * (const ComplexMatrix& a,
 				   const DiagMatrix& b);
 
   friend ComplexMatrix operator + (const ComplexMatrix& a,
 				   const ComplexDiagMatrix& b);
   friend ComplexMatrix operator - (const ComplexMatrix& a,
 				   const ComplexDiagMatrix& b);
   friend ComplexMatrix operator * (const ComplexMatrix& a,
 				   const ComplexDiagMatrix& b);
 
-// matrix by matrix -> matrix operations
+  // matrix by matrix -> matrix operations
 
   friend ComplexMatrix operator + (const ComplexMatrix& a, const Matrix& b);
   friend ComplexMatrix operator - (const ComplexMatrix& a, const Matrix& b);
 
   friend ComplexMatrix operator + (const Matrix& a, const ComplexMatrix& b);
   friend ComplexMatrix operator - (const Matrix& a, const ComplexMatrix& b);
 
   friend ComplexMatrix operator * (const ComplexMatrix& a, const Matrix& b);
@@ -303,17 +303,17 @@ public:
 				   const ComplexMatrix& b);
 
   friend ComplexMatrix product (const ComplexMatrix& a, const Matrix& b);
   friend ComplexMatrix quotient (const ComplexMatrix& a, const Matrix& b);
 
   friend ComplexMatrix product (const Matrix& a, const ComplexMatrix& b);
   friend ComplexMatrix quotient (const Matrix& a, const ComplexMatrix& b);
 
-// other operations
+  // other operations
 
   friend ComplexMatrix map (c_c_Mapper f, const ComplexMatrix& a);
   void map (c_c_Mapper f);
 
   Matrix all (void) const;
   Matrix any (void) const;
 
   ComplexMatrix cumprod (void) const;
@@ -332,17 +332,17 @@ public:
   ComplexColumnVector row_max_loc (void) const;
 
   ComplexRowVector column_min (void) const;
   ComplexRowVector column_min_loc (void) const;
 
   ComplexRowVector column_max (void) const;
   ComplexRowVector column_max_loc (void) const;
 
-// i/o
+  // i/o
 
   friend ostream& operator << (ostream& os, const ComplexMatrix& a);
   friend istream& operator >> (istream& is, ComplexMatrix& a);
 
 private:
 
   ComplexMatrix (Complex *d, int r, int c) : MArray2<Complex> (d, r, c) { }
 };
diff --git a/liboctave/CRowVector.h b/liboctave/CRowVector.h
--- a/liboctave/CRowVector.h
+++ b/liboctave/CRowVector.h
@@ -49,17 +49,17 @@ public:
     {
       MArray<Complex>::operator = (a);
       return *this;
     }
 
   int operator == (const ComplexRowVector& a) const;
   int operator != (const ComplexRowVector& a) const;
 
-// destructive insert/delete/reorder operations
+  // destructive insert/delete/reorder operations
 
   ComplexRowVector& insert (const RowVector& a, int c);
   ComplexRowVector& insert (const ComplexRowVector& a, int c);
 
   ComplexRowVector& fill (double val);
   ComplexRowVector& fill (const Complex& val);
   ComplexRowVector& fill (double val, int c1, int c2);
   ComplexRowVector& fill (const Complex& val, int c1, int c2);
@@ -67,61 +67,61 @@ public:
   ComplexRowVector append (const RowVector& a) const;
   ComplexRowVector append (const ComplexRowVector& a) const;
 
   ComplexColumnVector hermitian (void) const;  // complex conjugate transpose.
   ComplexColumnVector transpose (void) const;
 
   friend ComplexRowVector conj (const ComplexRowVector& a);
 
-// resize is the destructive equivalent for this one
+  // resize is the destructive equivalent for this one
 
   ComplexRowVector extract (int c1, int c2) const;
 
-// row vector by row vector -> row vector operations
+  // row vector by row vector -> row vector operations
 
   ComplexRowVector& operator += (const RowVector& a);
   ComplexRowVector& operator -= (const RowVector& a);
 
   ComplexRowVector& operator += (const ComplexRowVector& a);
   ComplexRowVector& operator -= (const ComplexRowVector& a);
 
-// row vector by scalar -> row vector operations
+  // row vector by scalar -> row vector operations
 
   friend ComplexRowVector operator + (const ComplexRowVector& a, double s);
   friend ComplexRowVector operator - (const ComplexRowVector& a, double s);
   friend ComplexRowVector operator * (const ComplexRowVector& a, double s);
   friend ComplexRowVector operator / (const ComplexRowVector& a, double s);
 
   friend ComplexRowVector operator + (const RowVector& a, const Complex& s);
   friend ComplexRowVector operator - (const RowVector& a, const Complex& s);
   friend ComplexRowVector operator * (const RowVector& a, const Complex& s);
   friend ComplexRowVector operator / (const RowVector& a, const Complex& s);
 
-// scalar by row vector -> row vector operations
+  // scalar by row vector -> row vector operations
 
   friend ComplexRowVector operator + (double s, const ComplexRowVector& a);
   friend ComplexRowVector operator - (double s, const ComplexRowVector& a);
   friend ComplexRowVector operator * (double s, const ComplexRowVector& a);
   friend ComplexRowVector operator / (double s, const ComplexRowVector& a);
 
   friend ComplexRowVector operator + (const Complex& s, const RowVector& a);
   friend ComplexRowVector operator - (const Complex& s, const RowVector& a);
   friend ComplexRowVector operator * (const Complex& s, const RowVector& a);
   friend ComplexRowVector operator / (const Complex& s, const RowVector& a);
 
-// row vector by matrix -> row vector
+  // row vector by matrix -> row vector
 
   friend ComplexRowVector operator * (const ComplexRowVector& a,
 				      const ComplexMatrix& b);
 
   friend ComplexRowVector operator * (const RowVector& a,
 				      const ComplexMatrix& b);
 
-// row vector by row vector -> row vector operations
+  // row vector by row vector -> row vector operations
 
   friend ComplexRowVector operator + (const ComplexRowVector& a,
 				      const RowVector& b);
   friend ComplexRowVector operator - (const ComplexRowVector& a,
 				      const RowVector& b);
 
   friend ComplexRowVector operator + (const RowVector& a,
 				      const ComplexRowVector& b);
@@ -133,25 +133,25 @@ public:
   friend ComplexRowVector quotient (const ComplexRowVector& a,
 				    const RowVector& b);
 
   friend ComplexRowVector product (const RowVector& a,
 				   const ComplexRowVector& b);
   friend ComplexRowVector quotient (const RowVector& a,
 				    const ComplexRowVector& b);
 
-// other operations
+  // other operations
 
   friend ComplexRowVector map (c_c_Mapper f, const ComplexRowVector& a);
   void map (c_c_Mapper f);
 
   Complex min (void) const;
   Complex max (void) const;
 
-// i/o
+  // i/o
 
   friend ostream& operator << (ostream& os, const ComplexRowVector& a);
   friend istream& operator >> (istream& is, ComplexRowVector& a);
 
 private:
 
   ComplexRowVector (Complex *d, int l) : MArray<Complex> (d, l) { }
 };
diff --git a/liboctave/DAE.h b/liboctave/DAE.h
--- a/liboctave/DAE.h
+++ b/liboctave/DAE.h
@@ -58,20 +58,18 @@ public:
   Vector integrate (double t);
 
   Matrix integrate (const Vector& tout, Matrix& xdot_out);
   Matrix integrate (const Vector& tout, Matrix& xdot_out,
 		    const Vector& tcrit); 
 
 protected:
 
-/*
- * Some of this is probably too closely related to DASSL, but hey,
- * this is just a first attempt...
- */
+  // Some of this is probably too closely related to DASSL, but hey,
+  // this is just a first attempt...
 
   Vector xdot;
 
 private:
 
   int integration_error;
   int restart;
   int liw;  
diff --git a/liboctave/FSQP.h b/liboctave/FSQP.h
--- a/liboctave/FSQP.h
+++ b/liboctave/FSQP.h
@@ -37,18 +37,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 class FSQP : public NLP
 {
  public:
  private:
 };
 
-#endif /* FSQP_MISSING */
-
+#endif
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/MArray.h b/liboctave/MArray.h
--- a/liboctave/MArray.h
+++ b/liboctave/MArray.h
@@ -31,19 +31,17 @@ Software Foundation, 59 Temple Place - S
 #include "Array.h"
 
 // Classes we declare.
 
 template <class T> class MArray;
 template <class T> class MArray2;
 template <class T> class MDiagArray;
 
-/*
- * One dimensional array with math ops.
- */
+// One dimensional array with math ops.
 
 template <class T>
 class MArray : public Array<T>
 {
 protected:
 
   MArray (T *d, int l) : Array<T> (d, l) { }
 
@@ -58,55 +56,53 @@ public:
   ~MArray (void) { }
 
   MArray<T>& operator = (const MArray<T>& a)
     {
       Array<T>::operator = (a);
       return *this;
     }
 
-// Element by element MArray by scalar ops.
+  // element by element MArray by scalar ops
 
   friend MArray<T>& operator += (MArray<T>& a, const T& s);
   friend MArray<T>& operator -= (MArray<T>& a, const T& s);
 
-// Element by element MArray by MArray ops.
+  // element by element MArray by MArray ops
 
   friend MArray<T>& operator += (MArray<T>& a, const MArray<T>& b);
   friend MArray<T>& operator -= (MArray<T>& a, const MArray<T>& b);
 
-// Element by element MArray by scalar ops.
+  // element by element MArray by scalar ops
 
   friend MArray<T> operator + (const MArray<T>& a, const T& s);
   friend MArray<T> operator - (const MArray<T>& a, const T& s);
   friend MArray<T> operator * (const MArray<T>& a, const T& s);
   friend MArray<T> operator / (const MArray<T>& a, const T& s);
 
-// Element by element scalar by MArray ops.
+  // element by element scalar by MArray ops
 
   friend MArray<T> operator + (const T& s, const MArray<T>& a);
   friend MArray<T> operator - (const T& s, const MArray<T>& a);
   friend MArray<T> operator * (const T& s, const MArray<T>& a);
   friend MArray<T> operator / (const T& s, const MArray<T>& a);
 
-// Element by element MArray by MArray ops.
+  // element by element MArray by MArray ops
 
   friend MArray<T> operator + (const MArray<T>& a, const MArray<T>& b);
 
   friend MArray<T> operator - (const MArray<T>& a, const MArray<T>& b);
 
   friend MArray<T> product (const MArray<T>& a, const MArray<T>& b);
   friend MArray<T> quotient (const MArray<T>& a, const MArray<T>& b);
 
   friend MArray<T> operator - (const MArray<T>& a);
 };
 
-/*
- * Two dimensional array with math ops.
- */
+// Two dimensional array with math ops.
 
 template <class T>
 class MArray2 : public Array2<T>
 {
 protected:
 
   MArray2 (T *d, int n, int m) : Array2<T> (d, n, m) { }
 
@@ -122,54 +118,52 @@ public:
   ~MArray2 (void) { }
 
   MArray2<T>& operator = (const MArray2<T>& a)
     {
       Array2<T>::operator = (a);
       return *this;
     }
 
-// Element by element MArray2 by scalar ops.
+  // element by element MArray2 by scalar ops
 
   friend MArray2<T>& operator += (MArray2<T>& a, const T& s);
   friend MArray2<T>& operator -= (MArray2<T>& a, const T& s);
 
-// Element by element MArray2 by MArray2 ops.
+  // element by element MArray2 by MArray2 ops
 
   friend MArray2<T>& operator += (MArray2<T>& a, const MArray2<T>& b);
   friend MArray2<T>& operator -= (MArray2<T>& a, const MArray2<T>& b);
 
-// Element by element MArray2 by scalar ops.
+  // element by element MArray2 by scalar ops
 
   friend MArray2<T> operator + (const MArray2<T>& a, const T& s);
   friend MArray2<T> operator - (const MArray2<T>& a, const T& s);
   friend MArray2<T> operator * (const MArray2<T>& a, const T& s);
   friend MArray2<T> operator / (const MArray2<T>& a, const T& s);
 
-// Element by element scalar by MArray2 ops.
+  // element by element scalar by MArray2 ops
 
   friend MArray2<T> operator + (const T& s, const MArray2<T>& a);
   friend MArray2<T> operator - (const T& s, const MArray2<T>& a);
   friend MArray2<T> operator * (const T& s, const MArray2<T>& a);
   friend MArray2<T> operator / (const T& s, const MArray2<T>& a);
 
-// Element by element MArray2 by MArray2 ops.
+  // element by element MArray2 by MArray2 ops
 
   friend MArray2<T> operator + (const MArray2<T>& a, const MArray2<T>& b);
   friend MArray2<T> operator - (const MArray2<T>& a, const MArray2<T>& b);
 
   friend MArray2<T> product (const MArray2<T>& a, const MArray2<T>& b);
   friend MArray2<T> quotient (const MArray2<T>& a, const MArray2<T>& b);
 
   friend MArray2<T> operator - (const MArray2<T>& a);
 };
 
-/*
- * Two dimensional diagonal array with math ops.
- */
+// Two dimensional diagonal array with math ops.
 
 template <class T>
 class MDiagArray : public DiagArray<T>
 {
 protected:
 
   MDiagArray (T *d, int r, int c) : DiagArray<T> (d, r, c) { }
 
@@ -187,31 +181,31 @@ public:
   ~MDiagArray (void) { }
 
   MDiagArray<T>& operator = (const MDiagArray<T>& a)
     {
       DiagArray<T>::operator = (a);
       return *this;
     }
 
-// Element by element MDiagArray by MDiagArray ops.
+  // element by element MDiagArray by MDiagArray ops
 
   friend MDiagArray<T>& operator += (MDiagArray<T>& a, const MDiagArray<T>& b);
   friend MDiagArray<T>& operator -= (MDiagArray<T>& a, const MDiagArray<T>& b);
 
-// Element by element MDiagArray by scalar ops.
+  // element by element MDiagArray by scalar ops
 
   friend MDiagArray<T> operator * (const MDiagArray<T>& a, const T& s);
   friend MDiagArray<T> operator / (const MDiagArray<T>& a, const T& s);
 
-// Element by element scalar by MDiagArray ops.
+  // element by element scalar by MDiagArray ops
 
   friend MDiagArray<T> operator * (const T& s, const MDiagArray<T>& a);
 
-// Element by element MDiagArray by MDiagArray ops.
+  // element by element MDiagArray by MDiagArray ops
 
   friend MDiagArray<T> operator + (const MDiagArray<T>& a,
 				   const MDiagArray<T>& b); 
 
   friend MDiagArray<T> operator - (const MDiagArray<T>& a,
 				   const MDiagArray<T>& b);
 
   friend MDiagArray<T> product (const MDiagArray<T>& a,
diff --git a/liboctave/Matrix.h b/liboctave/Matrix.h
--- a/liboctave/Matrix.h
+++ b/liboctave/Matrix.h
@@ -16,22 +16,18 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
-/*
-
-Should probably say something here about why these classes are not
-represented by some sort of inheritance tree...
-
-*/
+// Should probably say something here about why these classes are not
+// represented by some sort of inheritance tree...
 
 #if !defined (octave_Matrix_h)
 #define octave_Matrix_h 1
 
 #include "mx-base.h"
 
 #include "mx-ext.h"
 
diff --git a/liboctave/NPSOL.h b/liboctave/NPSOL.h
--- a/liboctave/NPSOL.h
+++ b/liboctave/NPSOL.h
@@ -185,18 +185,17 @@ class NPSOL : public NLP, public NPSOL_o
 // variable.
 // Nonzero means an error occurred in the calculation of the objective
 // function, and the user wants us to quit.
 extern int npsol_objective_error;
 
 inline NPSOL::NPSOL (const NPSOL& a) : NLP (a.x, a.phi, a.bnds, a.lc, a.nlc)
   { }
 
-#endif /* NPSOL_MISSING */
-
+#endif
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/ODE.h b/liboctave/ODE.h
--- a/liboctave/ODE.h
+++ b/liboctave/ODE.h
@@ -96,20 +96,18 @@ public:
 
   void integrate (int nsteps, double tstep, ostream& s);
 
   Matrix integrate (const ColumnVector& tout);
   Matrix integrate (const ColumnVector& tout, const ColumnVector& tcrit);
 
 protected:
 
-/*
- * Some of this is probably too closely related to LSODE, but hey,
- * this is just a first attempt...
- */
+  // Some of this is probably too closely related to LSODE, but hey,
+  // this is just a first attempt...
 
   int n;
   double t;
   ColumnVector x;
 
   double stop_time;
   int stop_time_set;
 
diff --git a/liboctave/QPSOL.h b/liboctave/QPSOL.h
--- a/liboctave/QPSOL.h
+++ b/liboctave/QPSOL.h
@@ -120,18 +120,17 @@ QPSOL::operator = (const QPSOL& a)
   x = a.x;
   H = a.H;
   c = a.c;
   bnds = a.bnds;
   lc = a.lc;
   return *this;
 }
 
-#endif /* QPSOL_MISSING */
-
+#endif
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dColVector.h b/liboctave/dColVector.h
--- a/liboctave/dColVector.h
+++ b/liboctave/dColVector.h
@@ -49,57 +49,57 @@ public:
     {
       MArray<double>::operator = (a);
       return *this;
     }
 
   int operator == (const ColumnVector& a) const;
   int operator != (const ColumnVector& a) const;
 
-// destructive insert/delete/reorder operations
+  // destructive insert/delete/reorder operations
 
   ColumnVector& insert (const ColumnVector& a, int r);
 
   ColumnVector& fill (double val);
   ColumnVector& fill (double val, int r1, int r2);
 
   ColumnVector stack (const ColumnVector& a) const;
 
   RowVector transpose (void) const;
 
   friend ColumnVector real (const ComplexColumnVector& a);
   friend ColumnVector imag (const ComplexColumnVector& a);
 
-// resize is the destructive equivalent for this one
+  // resize is the destructive equivalent for this one
 
   ColumnVector extract (int r1, int r2) const;
 
-// column vector by column vector -> column vector operations
+  // column vector by column vector -> column vector operations
 
   ColumnVector& operator += (const ColumnVector& a);
   ColumnVector& operator -= (const ColumnVector& a);
 
-// matrix by column vector -> column vector operations
+  // matrix by column vector -> column vector operations
 
   friend ColumnVector operator * (const Matrix& a, const ColumnVector& b);
 
-// diagonal matrix by column vector -> column vector operations
+  // diagonal matrix by column vector -> column vector operations
 
   friend ColumnVector operator * (const DiagMatrix& a, const ColumnVector& b);
 
-// other operations
+  // other operations
 
   friend ColumnVector map (d_d_Mapper f, const ColumnVector& a);
   friend ColumnVector map (d_c_Mapper f, const ComplexColumnVector& a);
   void map (d_d_Mapper f);
 
   double min (void) const;
   double max (void) const;
 
-// i/o
+  // i/o
 
   friend ostream& operator << (ostream& os, const ColumnVector& a);
   friend istream& operator >> (istream& is, ColumnVector& a);
 
 private:
 
   ColumnVector (double *d, int l) : MArray<double> (d, l) { }
 };
diff --git a/liboctave/dDiagMatrix.h b/liboctave/dDiagMatrix.h
--- a/liboctave/dDiagMatrix.h
+++ b/liboctave/dDiagMatrix.h
@@ -69,47 +69,47 @@ public:
   DiagMatrix& fill (const ColumnVector& a, int beg);
   DiagMatrix& fill (const RowVector& a, int beg);
 
   DiagMatrix transpose (void) const;
 
   friend DiagMatrix real (const ComplexDiagMatrix& a);
   friend DiagMatrix imag (const ComplexDiagMatrix& a);
 
-// resize is the destructive analog for this one
+  // resize is the destructive analog for this one
 
   Matrix extract (int r1, int c1, int r2, int c2) const;
 
-// extract row or column i.
+  // extract row or column i.
 
   RowVector row (int i) const;
   RowVector row (char *s) const;
 
   ColumnVector column (int i) const;
   ColumnVector column (char *s) const;
 
   DiagMatrix inverse (void) const;
   DiagMatrix inverse (int& info) const;
 
-// diagonal matrix by diagonal matrix -> diagonal matrix operations
+  // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
   DiagMatrix& operator += (const DiagMatrix& a);
   DiagMatrix& operator -= (const DiagMatrix& a);
 
-// diagonal matrix by diagonal matrix -> diagonal matrix operations
+  // diagonal matrix by diagonal matrix -> diagonal matrix operations
 
   friend DiagMatrix operator * (const DiagMatrix& a,
 				const DiagMatrix& b);
 
-// other operations
+  // other operations
 
   ColumnVector diag (void) const;
   ColumnVector diag (int k) const;
 
-// i/o
+  // i/o
 
   friend ostream& operator << (ostream& os, const DiagMatrix& a);
 
 private:
 
   DiagMatrix (double *d, int nr, int nc) : MDiagArray<double> (d, nr, nc) { }
 };
 
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -62,17 +62,17 @@ public:
     {
       MArray2<double>::operator = (a);
       return *this;
     }
 
   int operator == (const Matrix& a) const;
   int operator != (const Matrix& a) const;
 
-// destructive insert/delete/reorder operations
+  // destructive insert/delete/reorder operations
 
   Matrix& insert (const Matrix& a, int r, int c);
   Matrix& insert (const RowVector& a, int r, int c);
   Matrix& insert (const ColumnVector& a, int r, int c);
   Matrix& insert (const DiagMatrix& a, int r, int c);
 
   Matrix& fill (double val);
   Matrix& fill (double val, int r1, int c1, int r2, int c2);
@@ -87,21 +87,21 @@ public:
   Matrix stack (const ColumnVector& a) const;
   Matrix stack (const DiagMatrix& a) const;
 
   Matrix transpose (void) const;
 
   friend Matrix real (const ComplexMatrix& a);
   friend Matrix imag (const ComplexMatrix& a);
 
-// resize is the destructive equivalent for this one
+  // resize is the destructive equivalent for this one
 
   Matrix extract (int r1, int c1, int r2, int c2) const;
 
-// extract row or column i.
+  // extract row or column i.
 
   RowVector row (int i) const;
   RowVector row (char *s) const;
 
   ColumnVector column (int i) const;
   ColumnVector column (char *s) const;
 
   Matrix inverse (void) const;
@@ -156,51 +156,51 @@ public:
 			       int& rank) const;
 
   Matrix& operator += (const Matrix& a);
   Matrix& operator -= (const Matrix& a);
 
   Matrix& operator += (const DiagMatrix& a);
   Matrix& operator -= (const DiagMatrix& a);
 
-// unary operations
+  // unary operations
 
   Matrix operator ! (void) const;
 
-// column vector by row vector -> matrix operations
+  // column vector by row vector -> matrix operations
 
   friend Matrix operator * (const ColumnVector& a, const RowVector& a);
 
-// diagonal matrix by scalar -> matrix operations
+  // diagonal matrix by scalar -> matrix operations
 
   friend Matrix operator + (const DiagMatrix& a, double s);
   friend Matrix operator - (const DiagMatrix& a, double s);
 
-// scalar by diagonal matrix -> matrix operations
+  // scalar by diagonal matrix -> matrix operations
 
   friend Matrix operator + (double s, const DiagMatrix& a);
   friend Matrix operator - (double s, const DiagMatrix& a);
 
-// matrix by diagonal matrix -> matrix operations
+  // matrix by diagonal matrix -> matrix operations
 
   friend Matrix operator + (const Matrix& a, const DiagMatrix& b);
   friend Matrix operator - (const Matrix& a, const DiagMatrix& b);
   friend Matrix operator * (const Matrix& a, const DiagMatrix& b);
 
-// diagonal matrix by matrix -> matrix operations
+  // diagonal matrix by matrix -> matrix operations
 
   friend Matrix operator + (const DiagMatrix& a, const Matrix& b);
   friend Matrix operator - (const DiagMatrix& a, const Matrix& b);
   friend Matrix operator * (const DiagMatrix& a, const Matrix& b);
 
-// matrix by matrix -> matrix operations
+  // matrix by matrix -> matrix operations
 
   friend Matrix operator * (const Matrix& a, const Matrix& b);
 
-// other operations
+  // other operations
 
   friend Matrix map (d_d_Mapper f, const Matrix& a);
   friend Matrix map (d_c_Mapper f, const ComplexMatrix& a);
   void map (d_d_Mapper f);
 
   Matrix all (void) const;
   Matrix any (void) const;
 
@@ -220,26 +220,24 @@ public:
   ColumnVector row_max_loc (void) const;
 
   RowVector column_min (void) const;
   RowVector column_min_loc (void) const;
 
   RowVector column_max (void) const;
   RowVector column_max_loc (void) const;
 
-// i/o
+  // i/o
 
   friend ostream& operator << (ostream& os, const Matrix& a);
   friend istream& operator >> (istream& is, Matrix& a);
 
   int read (FILE *fptr, char *type);
   int write (FILE *fptr, char *type);
 
-// Until templates really work with g++:
-
 private:
 
   Matrix (double *d, int r, int c) : MArray2<double> (d, r, c) { }
 };
 
 #endif
 
 /*
diff --git a/liboctave/dRowVector.h b/liboctave/dRowVector.h
--- a/liboctave/dRowVector.h
+++ b/liboctave/dRowVector.h
@@ -48,53 +48,53 @@ public:
     {
       MArray<double>::operator = (a);
       return *this;
     }
 
   int operator == (const RowVector& a) const;
   int operator != (const RowVector& a) const;
 
-// destructive insert/delete/reorder operations
+  // destructive insert/delete/reorder operations
 
   RowVector& insert (const RowVector& a, int c);
 
   RowVector& fill (double val);
   RowVector& fill (double val, int c1, int c2);
 
   RowVector append (const RowVector& a) const;
 
   ColumnVector transpose (void) const;
 
   friend RowVector real (const ComplexRowVector& a);
   friend RowVector imag (const ComplexRowVector& a);
 
-// resize is the destructive equivalent for this one
+  // resize is the destructive equivalent for this one
 
   RowVector extract (int c1, int c2) const;
 
-// row vector by row vector -> row vector operations
+  // row vector by row vector -> row vector operations
 
   RowVector& operator += (const RowVector& a);
   RowVector& operator -= (const RowVector& a);
 
-// row vector by matrix -> row vector
+  // row vector by matrix -> row vector
 
   friend RowVector operator * (const RowVector& a, const Matrix& b);
 
-// other operations
+  // other operations
 
   friend RowVector map (d_d_Mapper f, const RowVector& a);
   friend RowVector map (d_c_Mapper f, const ComplexRowVector& a);
   void map (d_d_Mapper f);
 
   double min (void) const;
   double max (void) const;
 
-// i/o
+  // i/o
 
   friend ostream& operator << (ostream& os, const RowVector& a);
   friend istream& operator >> (istream& is, RowVector& a);
 
 private:
 
   RowVector (double *d, int l) : MArray<double> (d, l) { }
 };
diff --git a/liboctave/mx-base.h b/liboctave/mx-base.h
--- a/liboctave/mx-base.h
+++ b/liboctave/mx-base.h
@@ -19,40 +19,32 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_mx_base_h)
 #define octave_mx_base_h 1
 
-/*
- * Matrix classes.
- */
+// Matrix classes.
 
 #include "dMatrix.h"
 #include "CMatrix.h"
 
-/*
- * Column Vector classes.
- */
+// Column Vector classes.
 
 #include "dColVector.h"
 #include "CColVector.h"
 
-/*
- * Row Vector classes.
- */
+// Row Vector classes.
 
 #include "dRowVector.h"
 #include "CRowVector.h"
 
-/*
- * Diagonal Matrix classes.
- */
+// Diagonal Matrix classes.
 
 #include "dDiagMatrix.h"
 #include "CDiagMatrix.h"
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/mx-kludge.h b/liboctave/mx-kludge.h
--- a/liboctave/mx-kludge.h
+++ b/liboctave/mx-kludge.h
@@ -27,19 +27,17 @@ Software Foundation, 59 Temple Place - S
 // template functions, or not instatiating non-member template
 // functions.
 //
 // When templates work more reliably in g++, this will be replaced by
 // the MArray class.
 
 #ifdef KLUDGE_VECTORS
 
-/*
- * Like type operations for vectors.
- */
+// Like type operations for vectors.
 
 // Element by element vector by scalar ops.
 
 friend KL_VEC_TYPE operator + (const KL_VEC_TYPE& a, const TYPE& s);
 friend KL_VEC_TYPE operator - (const KL_VEC_TYPE& a, const TYPE& s);
 friend KL_VEC_TYPE operator * (const KL_VEC_TYPE& a, const TYPE& s);
 friend KL_VEC_TYPE operator / (const KL_VEC_TYPE& a, const TYPE& s);
 
@@ -61,19 +59,17 @@ friend KL_VEC_TYPE quotient (const KL_VE
 // Unary MArray ops.
 
 friend KL_VEC_TYPE operator - (const KL_VEC_TYPE& a);
 
 #endif
 
 #ifdef KLUDGE_MATRICES
 
-/*
- * Like type operations for matrices
- */
+// Like type operations for matrices
 
 // Element by element matrix by scalar ops.
 
 friend KL_MAT_TYPE operator + (const KL_MAT_TYPE& a, const TYPE& s);
 friend KL_MAT_TYPE operator - (const KL_MAT_TYPE& a, const TYPE& s);
 friend KL_MAT_TYPE operator * (const KL_MAT_TYPE& a, const TYPE& s);
 friend KL_MAT_TYPE operator / (const KL_MAT_TYPE& a, const TYPE& s);
 
@@ -95,19 +91,17 @@ friend KL_MAT_TYPE quotient (const KL_MA
 // Unary matrix ops.
 
 friend KL_MAT_TYPE operator - (const KL_MAT_TYPE& a);
 
 #endif
 
 #ifdef KLUDGE_DIAG_MATRICES
 
-/*
- * Like type operations for diagonal matrices.
- */
+// Like type operations for diagonal matrices.
 
 // Element by element MDiagArray by scalar ops.
 
 friend KL_DMAT_TYPE operator * (const KL_DMAT_TYPE& a, const TYPE& s);
 friend KL_DMAT_TYPE operator / (const KL_DMAT_TYPE& a, const TYPE& s);
 
 // Element by element scalar by MDiagArray ops.
 
diff --git a/liboctave/sun-utils.h b/liboctave/sun-utils.h
--- a/liboctave/sun-utils.h
+++ b/liboctave/sun-utils.h
@@ -21,31 +21,27 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #if !defined (octave_sun_utils_h)
 #define octave_sun_utils_h 1
 
 #if defined (sun)
 
-/*
- * I think that this is really only needed if linking to Fortran
- * compiled libraries on a Sun.  It should never be called.
- * There should probably be a sysdep.cc file, eh?
- */
+// I think that this is really only needed if linking to Fortran
+// compiled libraries on a Sun.  It should never be called.
+// There should probably be a sysdep.cc file, eh?
 
 extern "C" int MAIN_ (void);
 
-/*
- * This is only needed to dereference pointers to doubles if mixing
- * GCC and Sun f77/cc compiled code.  See the GCC manual (where the
- * function access_double() is described) and the Sun f77 manual,
- * which explains that doubles are not always aligned on 8 byte
- * boundaries.
- */
+// This is only needed to dereference pointers to doubles if mixing
+// GCC and Sun f77/cc compiled code.  See the GCC manual (where the
+// function access_double() is described) and the Sun f77 manual,
+// which explains that doubles are not always aligned on 8 byte
+// boundaries.
 
 #if defined (__GNUC__)
 
 inline double
 access_double (double *unaligned_ptr)
 {
   union d2i { double d; int i[2]; };
 
