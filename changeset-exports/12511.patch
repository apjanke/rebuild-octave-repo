# HG changeset patch
# User Jordi Gutiérrez Hermoso <jordigh@gmail.com>
# Date 1300167380 21600
#      Mon Mar 14 23:36:20 2011 -0600
# Node ID 85e87b865f71cdc2487679670aa77f5c0f26373f
# Parent  a1b2da4967ac7aa19a62e3deb2e835d3853cd99d
Change copy_backward to copy in Sparse<T>::assign, bug #32747
cf. changeset 3bddc4ea8141

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,14 +1,20 @@
 2011-02-13  David Bateman  <dbateman@free.fr>
 
 	* Sparse-perm-op-defs.h (template <typename SM>
 	SM octinternal_do_mul_colpm_sm (const octave_idx_type *,
 	const SM&)): Ensure that the row indices are sorted.
 
+2011-03-14  Jordi Gutiérrez Hermoso  <jordigh@gmail.com>
+
+	* Sparse.cc (Sparse<T>::alloc) Change std::copy_backward to
+	std::copy, since the destination is at the back and not the
+	front. Bug #32747, cf. entry from 2010-11-25
+
 2011-02-08  John W. Eaton  <jwe@octave.org>
 
 	* oct-alloc.h: Include <cstddef>.
 	From Orion Poplawski <orion@cora.nwra.com>.
 
 2011-02-06  John W. Eaton  <jwe@octave.org>
 
 	* PermMatrix.cc (operator*): Fix mixed row/column permutation
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -1923,18 +1923,20 @@ Sparse<T>::assign (const idx_vector& idx
 
               if (new_nz >= nz && new_nz <= capacity ())
                 {
                   // Adding/overwriting elements, enough capacity allocated.
 
                   if (new_nz > nz)
                     {
                       // Make room first.
-                      std::copy_backward (data () + ui, data () + nz, data () + li + rnz);
-                      std::copy_backward (ridx () + ui, ridx () + nz, ridx () + li + rnz);
+                      std::copy (data () + ui, data () + nz,
+                                 data () + li + rnz);
+                      std::copy (ridx () + ui, ridx () + nz,
+                                 ridx () + li + rnz);
                       mx_inline_add2 (nc - ub, cidx () + ub + 1, new_nz - nz);
                     }
 
                   // Copy data and indices from rhs.
                   copy_or_memcpy (rnz, rhs.data (), data () + li);
                   copy_or_memcpy (rnz, rhs.ridx (), ridx () + li);
                   mx_inline_add (ub - lb, cidx () + lb + 1, rhs.cidx () + 1, li);
 
