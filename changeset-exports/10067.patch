# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1262812621 -3600
#      Wed Jan 06 22:17:01 2010 +0100
# Node ID 6f79338c269b8cbb983701cb4805af2219551748
# Parent  2cd940306a0695817e78f105a0848c1e2cb4c725
omission from last patch

diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -1801,23 +1801,23 @@ maybe_warn_variable_switch_label (tree_e
     }
 }
 
 static tree_expression *
 fold (tree_binary_expression *e)
 {
   tree_expression *retval = e;
 
-  unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
-
-  unwind_protect::protect_var (error_state);
-  unwind_protect::protect_var (warning_state);
-
-  unwind_protect::protect_var (discard_error_messages);
-  unwind_protect::protect_var (discard_warning_messages);
+  unwind_protect frame;
+
+  frame.protect_var (error_state);
+  frame.protect_var (warning_state);
+
+  frame.protect_var (discard_error_messages);
+  frame.protect_var (discard_warning_messages);
 
   discard_error_messages = true;
   discard_warning_messages = true;
 
   tree_expression *op1 = e->lhs ();
   tree_expression *op2 = e->rhs ();
 
   octave_value::binary_op op_type = e->op_type ();
@@ -1844,33 +1844,31 @@ fold (tree_binary_expression *e)
 	  tc_retval->stash_original_text (buf.str ());
 
 	  delete e;
 
 	  retval = tc_retval;
 	}
     }
 
-  unwind_protect::run_frame (uwp_frame);
-
   return retval;
 }
 
 static tree_expression *
 fold (tree_unary_expression *e)
 {
   tree_expression *retval = e;
 
-  unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
-
-  unwind_protect::protect_var (error_state);
-  unwind_protect::protect_var (warning_state);
-
-  unwind_protect::protect_var (discard_error_messages);
-  unwind_protect::protect_var (discard_warning_messages);
+  unwind_protect frame;
+
+  frame.protect_var (error_state);
+  frame.protect_var (warning_state);
+
+  frame.protect_var (discard_error_messages);
+  frame.protect_var (discard_warning_messages);
 
   discard_error_messages = true;
   discard_warning_messages = true;
 
   tree_expression *op = e->operand ();
 
   if (op->is_constant ())
     {
@@ -1890,35 +1888,33 @@ fold (tree_unary_expression *e)
 	  tc_retval->stash_original_text (buf.str ());
 
 	  delete e;
 
 	  retval = tc_retval;
 	}
     }
 
-  unwind_protect::run_frame (uwp_frame);
-
   return retval;
 }
 
 // Finish building a range.
 
 static tree_expression *
 finish_colon_expression (tree_colon_expression *e)
 {
   tree_expression *retval = e;
 
-  unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
-
-  unwind_protect::protect_var (error_state);
-  unwind_protect::protect_var (warning_state);
-
-  unwind_protect::protect_var (discard_error_messages);
-  unwind_protect::protect_var (discard_warning_messages);
+  unwind_protect frame;
+
+  frame.protect_var (error_state);
+  frame.protect_var (warning_state);
+
+  frame.protect_var (discard_error_messages);
+  frame.protect_var (discard_warning_messages);
 
   discard_error_messages = true;
   discard_warning_messages = true;
 
   tree_expression *base = e->base ();
   tree_expression *limit = e->limit ();
   tree_expression *incr = e->increment ();
 
@@ -1956,18 +1952,16 @@ finish_colon_expression (tree_colon_expr
 	  delete e;
 
 	  // FIXME -- need to attempt constant folding here
 	  // too (we need a generic way to do that).
 	  retval = base;
 	}
     }
 
-  unwind_protect::run_frame (uwp_frame);
-
   return retval;
 }
 
 // Make a constant.
 
 static tree_constant *
 make_constant (int op, token *tok_val)
 {
@@ -3120,23 +3114,23 @@ make_decl_command (int tok, token *tok_v
 
 // Finish building a matrix list.
 
 static tree_expression *
 finish_matrix (tree_matrix *m)
 {
   tree_expression *retval = m;
 
-  unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
-
-  unwind_protect::protect_var (error_state);
-  unwind_protect::protect_var (warning_state);
-
-  unwind_protect::protect_var (discard_error_messages);
-  unwind_protect::protect_var (discard_warning_messages);
+  unwind_protect frame;
+
+  frame.protect_var (error_state);
+  frame.protect_var (warning_state);
+
+  frame.protect_var (discard_error_messages);
+  frame.protect_var (discard_warning_messages);
 
   discard_error_messages = true;
   discard_warning_messages = true;
 
   if (m->all_elements_are_constant ())
     {
       octave_value tmp = m->rvalue1 ();
 
@@ -3154,18 +3148,16 @@ finish_matrix (tree_matrix *m)
 	  tc_retval->stash_original_text (buf.str ());
 
 	  delete m;
 
 	  retval = tc_retval;
 	}
     }
 
-  unwind_protect::run_frame (uwp_frame);
-
   return retval;
 }
 
 // Finish building a cell list.
 
 static tree_expression *
 finish_cell (tree_cell *c)
 {
@@ -3237,17 +3229,17 @@ append_statement_list (tree_statement_li
   set_stmt_print_flag (list, sep, warn_missing_semi);
 
   list->append (stmt);
 
   return list;
 }
 
 static void
-safe_fclose (void *f)
+safe_fclose (FILE *f)
 {
   // FIXME -- comments at the end of an input file are
   // discarded (otherwise, they would be appended to the next
   // statement, possibly from the command line or another file, which
   // can be quite confusing).
 
   octave_comment_list *tc = octave_comment_buffer::get_comment ();
 
@@ -3424,81 +3416,80 @@ looking_at_function_keyword (FILE *ffile
   return status;
 }
 
 static octave_function *
 parse_fcn_file (const std::string& ff, const std::string& dispatch_type,
 		bool force_script = false, bool require_file = true,
 		const std::string& warn_for = std::string ())
 {
-  unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
+  unwind_protect frame;
 
   octave_function *fcn_ptr = 0;
 
   // Open function file and parse.
 
   FILE *in_stream = command_editor::get_input_stream ();
 
-  unwind_protect::add_fcn (command_editor::set_input_stream,
-                           in_stream);
-
-  unwind_protect::protect_var (ff_instream);
-
-  unwind_protect::protect_var (input_line_number);
-  unwind_protect::protect_var (current_input_column);
-  unwind_protect::protect_var (reading_fcn_file);
-  unwind_protect::protect_var (line_editing);
-  unwind_protect::protect_var (current_class_name);
-  unwind_protect::protect_var (current_function_depth);
-  unwind_protect::protect_var (max_function_depth);
-  unwind_protect::protect_var (parsing_subfunctions);
-  unwind_protect::protect_var (endfunction_found);
+  frame.add_fcn (command_editor::set_input_stream, in_stream);
+
+  frame.protect_var (ff_instream);
+
+  frame.protect_var (input_line_number);
+  frame.protect_var (current_input_column);
+  frame.protect_var (reading_fcn_file);
+  frame.protect_var (line_editing);
+  frame.protect_var (current_class_name);
+  frame.protect_var (current_function_depth);
+  frame.protect_var (max_function_depth);
+  frame.protect_var (parsing_subfunctions);
+  frame.protect_var (endfunction_found);
 
   input_line_number = 1;
   current_input_column = 1;
   reading_fcn_file = true;
   line_editing = false;
   current_class_name = dispatch_type;
   current_function_depth = 0;
   max_function_depth = 0;
   parsing_subfunctions = false;
   endfunction_found = false;
 
   // The next four lines must be in this order.
-  unwind_protect::add_fcn (command_history::ignore_entries, ! Vsaving_history);
+  frame.add_fcn (command_history::ignore_entries, ! Vsaving_history);
 
   // FIXME -- we shouldn't need both the
   // command_history object and the
   // Vsaving_history variable...
   command_history::ignore_entries ();
 
-  unwind_protect::protect_var (Vsaving_history);
+  frame.protect_var (Vsaving_history);
 
   Vsaving_history = false;
 
   FILE *ffile = get_input_from_file (ff, 0);
 
-  unwind_protect::add (safe_fclose, ffile);
+  frame.add_fcn (safe_fclose, ffile);
 
   if (ffile)
     {
       bool eof;
 
       std::string help_txt = gobble_leading_white_space (ffile, eof);
 
       if (! eof)
 	{
 	  std::string file_type;
 
-	  unwind_protect::protect_var (get_input_from_eval_string);
-	  unwind_protect::protect_var (parser_end_of_input);
-	  unwind_protect::protect_var (reading_fcn_file);
-	  unwind_protect::protect_var (reading_script_file);
-	  unwind_protect::protect_var (reading_classdef_file);
-	  unwind_protect::protect_var (Vecho_executing_commands);
+	  frame.protect_var (get_input_from_eval_string);
+	  frame.protect_var (parser_end_of_input);
+	  frame.protect_var (reading_fcn_file);
+	  frame.protect_var (reading_script_file);
+	  frame.protect_var (reading_classdef_file);
+	  frame.protect_var (Vecho_executing_commands);
 
 
 	  get_input_from_eval_string = false;
 	  parser_end_of_input = false;
 
 	  if (! force_script && looking_at_function_keyword (ffile))
 	    {
 	      file_type = "function";
@@ -3528,31 +3519,31 @@ parse_fcn_file (const std::string& ff, c
 	      reading_classdef_file = false;
 	      reading_fcn_file = false;
 	      reading_script_file = true;
 	    }
 
 	  YY_BUFFER_STATE old_buf = current_buffer ();
 	  YY_BUFFER_STATE new_buf = create_buffer (ffile);
 
-	  unwind_protect::add_fcn (switch_to_buffer, old_buf);
-	  unwind_protect::add_fcn (delete_buffer, new_buf);
+	  frame.add_fcn (switch_to_buffer, old_buf);
+	  frame.add_fcn (delete_buffer, new_buf);
 
 	  switch_to_buffer (new_buf);
 
-	  unwind_protect::protect_var (primary_fcn_ptr);
+	  frame.protect_var (primary_fcn_ptr);
 	  primary_fcn_ptr = 0;
 
 	  reset_parser ();
 
 	  // Do this with an unwind-protect cleanup function so that
 	  // the forced variables will be unmarked in the event of an
 	  // interrupt. 
 	  symbol_table::scope_id scope = symbol_table::top_scope ();
-	  unwind_protect::add_fcn (symbol_table::unmark_forced_variables, scope);
+	  frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
 	  if (! help_txt.empty ())
 	    help_buf.push (help_txt);
 
 	  if (reading_script_file)
 	    prep_lexer_for_script_file ();
 	  else
 	    prep_lexer_for_function_file ();
@@ -3573,18 +3564,16 @@ parse_fcn_file (const std::string& ff, c
 		   file_type.c_str(), ff.c_str ());
 	}
     }
   else if (require_file)
     error ("no such file, `%s'", ff.c_str ());
   else if (! warn_for.empty ())
     error ("%s: unable to open file `%s'", warn_for.c_str (), ff.c_str ());    
 
-  unwind_protect::run_frame (uwp_frame);
-
   return fcn_ptr;
 }
 
 std::string
 get_help_from_file (const std::string& nm, bool& symbol_found,
 		    std::string& file)
 {
   std::string retval;
@@ -3594,34 +3583,33 @@ get_help_from_file (const std::string& n
   if (! file.empty ())
     {
       symbol_found = true;
 
       FILE *fptr = fopen (file.c_str (), "r");
 
       if (fptr)
 	{
-	  unwind_protect::add (safe_fclose, fptr);
+	  unwind_protect frame;
+	  frame.add_fcn (safe_fclose, fptr);
 
 	  bool eof;
 	  retval = gobble_leading_white_space (fptr, eof);
 
 	  if (retval.empty ())
 	    {
 	      octave_function *fcn = parse_fcn_file (file, "");
 
 	      if (fcn)
 		{
 		  retval = fcn->doc_string ();
 
 		  delete fcn;
 		}
 	    }
-
-	  unwind_protect::run ();
 	}
     }
 
   return retval;
 }
 
 std::string
 get_help_from_file (const std::string& nm, bool& symbol_found)
@@ -3673,41 +3661,41 @@ reverse_lookup_autoload (const std::stri
 
 octave_function *
 load_fcn_from_file (const std::string& file_name, const std::string& dir_name,
 		    const std::string& dispatch_type,
 		    const std::string& fcn_name, bool autoload)
 {
   octave_function *retval = 0;
 
-  unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
+  unwind_protect frame;
 
   std::string nm = file_name;
 
   size_t nm_len = nm.length ();
 
   std::string file;
 
-  unwind_protect::protect_var (fcn_file_from_relative_lookup);
+  frame.protect_var (fcn_file_from_relative_lookup);
 
   fcn_file_from_relative_lookup = false;
 
   file = nm;
 
   if ((nm_len > 4 && nm.substr (nm_len-4) == ".oct")
       || (nm_len > 4 && nm.substr (nm_len-4) == ".mex")
       || (nm_len > 2 && nm.substr (nm_len-2) == ".m"))
     {
       nm = octave_env::base_pathname (file);
       nm = nm.substr (0, nm.find_last_of ('.'));
     }
 
   if (autoload)
     {
-      unwind_protect::protect_var (autoloading);
+      frame.protect_var (autoloading);
       autoloading = true;
     }
 
   fcn_file_from_relative_lookup = ! octave_env::absolute_pathname (file);
 
   file = octave_env::make_absolute (file, octave_env::getcwd ());
 
   int len = file.length ();
@@ -3720,18 +3708,18 @@ load_fcn_from_file (const std::string& f
       retval = octave_dynamic_loader::load_oct (nm, file, fcn_file_from_relative_lookup);
     }
   else if (len > 4 && file.substr (len-4, len-1) == ".mex")
     retval = octave_dynamic_loader::load_mex (nm, file, fcn_file_from_relative_lookup);
   else if (len > 2)
     {
       // These are needed by yyparse.
 
-      unwind_protect::protect_var (curr_fcn_file_name);
-      unwind_protect::protect_var (curr_fcn_file_full_name);
+      frame.protect_var (curr_fcn_file_name);
+      frame.protect_var (curr_fcn_file_full_name);
 
       curr_fcn_file_name = nm;
       curr_fcn_file_full_name = file;
 
       retval = parse_fcn_file (file, dispatch_type, autoloading);
     }
 
   if (retval)
@@ -3741,18 +3729,16 @@ load_fcn_from_file (const std::string& f
       if (retval->is_user_function ())
 	{
 	  symbol_table::scope_id id = retval->scope ();
 
 	  symbol_table::stash_dir_name_for_subfunctions (id, dir_name);
 	}
     }
 
-  unwind_protect::run_frame (uwp_frame);
-
   return retval;
 }
 
 DEFUN (autoload, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} autoload (@var{function}, @var{file})\n\
 Define @var{function} to autoload from @var{file}.\n\
 \n\
@@ -3857,35 +3843,35 @@ With no arguments, return a structure co
 }
 
 void
 source_file (const std::string& file_name, const std::string& context,
 	     bool verbose, bool require_file, const std::string& warn_for)
 {
   std::string file_full_name = file_ops::tilde_expand (file_name);
 
-  unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
-
-  unwind_protect::protect_var (curr_fcn_file_name);
-  unwind_protect::protect_var (curr_fcn_file_full_name);
+  unwind_protect frame;
+
+  frame.protect_var (curr_fcn_file_name);
+  frame.protect_var (curr_fcn_file_full_name);
 
   curr_fcn_file_name = file_name;
   curr_fcn_file_full_name = file_full_name;
 
   if (! context.empty ())
     {
       if (context == "caller")
 	octave_call_stack::goto_caller_frame ();
       else if (context == "base")
 	octave_call_stack::goto_base_frame ();
       else
 	error ("source: context must be \"caller\" or \"base\"");
 
       if (! error_state)
-	unwind_protect::add_fcn (octave_call_stack::pop);
+	frame.add_fcn (octave_call_stack::pop);
     }      
 
   if (! error_state)
     {
       octave_function *fcn = parse_fcn_file (file_full_name, "", true,
 					     require_file, warn_for);
 
       if (! error_state)
@@ -3908,18 +3894,16 @@ source_file (const std::string& file_nam
 
 	      delete fcn;
 	    }
 	}
       else
 	error ("source: error sourcing file `%s'",
 	       file_full_name.c_str ());
     }
-
-  unwind_protect::run_frame (uwp_frame);
 }
 
 DEFUN (mfilename, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} mfilename ()\n\
 @deftypefnx {Built-in Function} {} mfilename (@code{\"fullpath\"})\n\
 @deftypefnx {Built-in Function} {} mfilename (@code{\"fullpathext\"})\n\
 Return the name of the currently executing file.  At the top-level,\n\
@@ -4165,29 +4149,29 @@ by name, and use @code{feval} to call th
   return retval;
 }
 
 octave_value_list
 eval_string (const std::string& s, bool silent, int& parse_status, int nargout)
 {
   octave_value_list retval;
 
-  unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
-
-  unwind_protect::protect_var (input_line_number);
-  unwind_protect::protect_var (current_input_column);
-  unwind_protect::protect_var (get_input_from_eval_string);
-  unwind_protect::protect_var (input_from_eval_string_pending);
-  unwind_protect::protect_var (parser_end_of_input);
-  unwind_protect::protect_var (line_editing);
-  unwind_protect::protect_var (current_eval_string);
-  unwind_protect::protect_var (current_function_depth);
-  unwind_protect::protect_var (max_function_depth);
-  unwind_protect::protect_var (parsing_subfunctions);
-  unwind_protect::protect_var (endfunction_found);
+  unwind_protect frame;
+
+  frame.protect_var (input_line_number);
+  frame.protect_var (current_input_column);
+  frame.protect_var (get_input_from_eval_string);
+  frame.protect_var (input_from_eval_string_pending);
+  frame.protect_var (parser_end_of_input);
+  frame.protect_var (line_editing);
+  frame.protect_var (current_eval_string);
+  frame.protect_var (current_function_depth);
+  frame.protect_var (max_function_depth);
+  frame.protect_var (parsing_subfunctions);
+  frame.protect_var (endfunction_found);
 
   input_line_number = 1;
   current_input_column = 1;
   get_input_from_eval_string = true;
   input_from_eval_string_pending = true;
   parser_end_of_input = false;
   line_editing = false;
   current_function_depth = 0;
@@ -4195,42 +4179,40 @@ eval_string (const std::string& s, bool 
   parsing_subfunctions = false;
   endfunction_found = false;
 
   current_eval_string = s;
 
   YY_BUFFER_STATE old_buf = current_buffer ();
   YY_BUFFER_STATE new_buf = create_buffer (0);
 
-  unwind_protect::add_fcn (switch_to_buffer, old_buf);
-  unwind_protect::add_fcn (delete_buffer, new_buf);
+  frame.add_fcn (switch_to_buffer, old_buf);
+  frame.add_fcn (delete_buffer, new_buf);
 
   switch_to_buffer (new_buf);
 
   do
     {
       reset_parser ();
 
-      unwind_protect::protect_var (global_command);
+      frame.protect_var (global_command);
 
       // Do this with an unwind-protect cleanup function so that the
       // forced variables will be unmarked in the event of an
       // interrupt.
       symbol_table::scope_id scope = symbol_table::top_scope ();
-      unwind_protect::add_fcn (symbol_table::unmark_forced_variables, scope);
+      frame.add_fcn (symbol_table::unmark_forced_variables, scope);
 
       parse_status = yyparse ();
 
       tree_statement_list *command_list = global_command;
 
       // Unmark forced variables.
-      unwind_protect::run ();
-
       // Restore previous value of global_command.
-      unwind_protect::run ();
+      frame.run_top (2);
 
       if (parse_status == 0)
         {
 	  if (command_list)
 	    {
 	      tree_statement *stmt = 0;
 
 	      if (command_list->length () == 1
@@ -4278,18 +4260,16 @@ eval_string (const std::string& s, bool 
 		break;
 	    }
 	  else if (parser_end_of_input)
 	    break;
         }
     }
   while (parse_status == 0);
 
-  unwind_protect::run_frame (uwp_frame);
-
   return retval;
 }
 
 octave_value
 eval_string (const std::string& s, bool silent, int& parse_status)
 {
   octave_value retval;
 
@@ -4343,21 +4323,21 @@ eval ('error (\"This is a bad example\")
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin > 0)
     {
-      unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
+      unwind_protect frame;
 
       if (nargin > 1)
 	{
-	  unwind_protect::protect_var (buffer_error_messages);
+	  frame.protect_var (buffer_error_messages);
 	  buffer_error_messages++;
 	}
 
       int parse_status = 0;
 
       octave_value_list tmp = eval_string (args(0), nargout > 0,
 					   parse_status, nargout);
 
@@ -4372,18 +4352,16 @@ eval ('error (\"This is a bad example\")
 
 	  tmp = eval_string (args(1), nargout > 0, parse_status, nargout);
 
 	  if (nargout > 0)
 	    retval = tmp;
 	}
       else if (nargout > 0)
 	retval = tmp;
-
-      unwind_protect::run_frame (uwp_frame);
     }
   else
     print_usage ();
 
   return retval;
 }
 
 /*
@@ -4481,43 +4459,41 @@ may be either @code{\"base\"} or @code{\
   int nargin = args.length ();
 
   if (nargin == 3)
     {
       std::string context = args(0).string_value ();
 
       if (! error_state)
         {
-	  unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
+	  unwind_protect frame;
 
 	  if (context == "caller")
 	    octave_call_stack::goto_caller_frame ();
 	  else if (context == "base")
 	    octave_call_stack::goto_base_frame ();
 	  else
 	    error ("assignin: context must be \"caller\" or \"base\"");
 
 	  if (! error_state)
 	    {
-	      unwind_protect::add_fcn (octave_call_stack::pop);
+	      frame.add_fcn (octave_call_stack::pop);
 
 	      std::string nm = args(1).string_value ();
 
 	      if (! error_state)
 		{
 		  if (valid_identifier (nm))
 		    symbol_table::varref (nm) = args(2);
 		  else
 		    error ("assignin: invalid variable name");
 		}
 	      else
 		error ("assignin: expecting variable name as second argument");
 	    }
-
-	  unwind_protect::run_frame (uwp_frame);
 	}
       else
         error ("assignin: expecting string as first argument");
     }
   else
     print_usage ();
 
   return retval;
@@ -4536,32 +4512,32 @@ context @var{context}, which may be eith
   int nargin = args.length ();
 
   if (nargin > 1)
     {
       std::string context = args(0).string_value ();
 
       if (! error_state)
         {
-	  unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
+	  unwind_protect frame;
 
 	  if (context == "caller")
 	    octave_call_stack::goto_caller_frame ();
 	  else if (context == "base")
 	    octave_call_stack::goto_base_frame ();
 	  else
 	    error ("evalin: context must be \"caller\" or \"base\"");
 
 	  if (! error_state)
 	    {
-	      unwind_protect::add_fcn (octave_call_stack::pop);
+	      frame.add_fcn (octave_call_stack::pop);
 
 	      if (nargin > 2)
 	        {
-		  unwind_protect::protect_var (buffer_error_messages);
+		  frame.protect_var (buffer_error_messages);
 		  buffer_error_messages++;
 		}
 
 	      int parse_status = 0;
 
 	      octave_value_list tmp = eval_string (args(1), nargout > 0,
 						   parse_status, nargout);
 
@@ -4578,18 +4554,16 @@ context @var{context}, which may be eith
 		  buffer_error_messages--;
 
 		  tmp = eval_string (args(2), nargout > 0,
 				     parse_status, nargout);
 
 		  retval = (nargout > 0) ? tmp : octave_value_list ();
 		}
 	    }
-
-	  unwind_protect::run_frame (uwp_frame);
 	}
       else
         error ("evalin: expecting string as first argument");
     }
   else
     print_usage ();
 
   return retval;
