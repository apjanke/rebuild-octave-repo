# HG changeset patch
# User jwe
# Date 953788645 0
#      Thu Mar 23 05:17:25 2000 +0000
# Node ID 0886bbb236cb1abe697d211ff3bbf080eae6276a
# Parent  a7fe24b18fa43c0119f50fd2dfdd70e9e936f825
[project @ 2000-03-23 05:17:23 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2000-03-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in: Check for vsnprintf.
+
 2000-03-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (liboctave.$(SHLEXT)): Delete target before rebuilding.
 
 2000-03-21  Ben Sapp <bsapp@nua.lampf.lanl.gov>:
 
 	* Makeconf.in (%.o : %.c): Pass -o to compile command.
 	(%.o : %.cc): Ditto.
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -16,17 +16,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
-AC_REVISION($Revision: 1.325 $)
+AC_REVISION($Revision: 1.326 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 OCTAVE_HOST_TYPE
 
@@ -781,19 +781,20 @@ AC_SUBST(GLOB_INCFLAGS)
 
 ### Checks for functions and variables.
 
 AC_CHECK_FUNCS(atexit bcopy bzero dup2 endgrent endpwent execvp fcntl \
   fork getcwd getegid geteuid getgid getgrent getgrgid getgrnam \
   gethostname getpgrp getpid getppid getpwent getpwnam getpwuid \
   gettimeofday getuid getwd localtime_r lstat memmove mkdir mkfifo \
   on_exit pipe poll putenv rename rindex rmdir select setgrent \
-  setpwent setvbuf sigaction sigpending sigprocmask sigsuspend stat \
-  strcasecmp strdup strerror strftime stricmp strncasecmp strnicmp \
-  strptime tempnam umask unlink usleep vfprintf vsprintf waitpid)
+  setpwent setvbuf sigaction sigpending sigprocmask sigsuspend \
+  stat strcasecmp strdup strerror strftime stricmp strncasecmp \
+  strnicmp strptime tempnam umask unlink usleep vfprintf vsprintf \
+  vsnprintf waitpid)
 
 OCTAVE_SMART_PUTENV
 
 LIBDLFCN=
 DLFCN_INCFLAGS=
 RDYNAMIC_FLAG=
 if test "$WITH_DL" = yes || test "$WITH_DL" = maybe; then
   case "$canonical_host_type" in
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,20 @@
 2000-03-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* oct-stream.cc (do_printf_conv): Use octave_format instead of
+	ostream::form.  Return number of characters written.
+	(octave_base_stream::do_printf): Return number of characters written.
+
+	* error.cc (verror, vwarning): Use octave_format instead of
+	ostream::vform.
+
+	* utils.cc (octave_format, octave_vformat): New functions.
+	* cutils.c (octave_snprintf, octave_vsnprintf): New functions.
+
 	* oct-lvalue.h (dummy_val): New static variable.
 	(octave_lvalue::octave_lvalue): Use it to initialize val.
 
 	* variables.cc (is_valid_function): Look in the global symbol
 	table for functions.
 
 2000-03-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/cutils.c b/src/cutils.c
--- a/src/cutils.c
+++ b/src/cutils.c
@@ -34,16 +34,19 @@ Software Foundation, 59 Temple Place - S
 #include "systime.h"
 
 #ifdef HAVE_POLL_H
 #include <poll.h>
 #elif HAVE_SYS_POLL_H
 #include <sys/poll.h>
 #endif
 
+#include <stdarg.h>
+#include <stdio.h>
+#include <stdlib.h>
 #include <string.h>
 
 static void
 do_octave_usleep (unsigned int useconds)
 {
 #if defined (HAVE_USLEEP)
 
   usleep (useconds);
@@ -87,13 +90,53 @@ octave_strcasecmp (const char *s1, const
 }
 
 int
 octave_strncasecmp (const char *s1, const char *s2, size_t n)
 {
   return strncasecmp (s1, s2, n);
 }
 
+char *
+octave_vsnprintf (size_t n, const char *fmt, va_list args)
+{
+#if defined (HAVE_VSNPRINTF)
+  size_t size = 100;
+
+  char *buf = malloc (size);
+
+  while (1)
+    {
+      int nchars = vsnprintf (buf, size, fmt, args);
+
+      if (nchars > -1)
+	return buf;
+      else
+	{
+	  size *= 2;
+	  buf = realloc (buf, size);
+	}
+    }
+#else
+  return 0;
+#endif
+}
+
+char *
+octave_snprintf (size_t n, const char *fmt, ...)
+{
+  char *retval = 0;
+
+  va_list args;
+  va_start (args, fmt);
+
+  retval = octave_vsnprintf (n, fmt, args);
+
+  va_end (args);
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -67,18 +67,18 @@ vwarning (const char *name, const char *
   std::ostrstream output_buf;
 
   if (name)
     {
       octave_diary << name << ": ";
       std::cerr << name << ": ";
     }
 
-  octave_diary.vform (fmt, args);
-  std::cerr.vform (fmt, args);
+  octave_vformat (octave_diary, fmt, args);
+  octave_vformat (std::cerr, fmt, args);
 
   octave_diary << std::endl;
   std::cerr << std::endl;
 }
 
 static void
 verror (const char *name, const char *fmt, va_list args)
 {
@@ -86,19 +86,22 @@ verror (const char *name, const char *fm
     flush_octave_stdout ();
 
   bool to_beep_or_not_to_beep_p = Vbeep_on_error && ! error_state;
 
   std::ostrstream output_buf;
 
   if (to_beep_or_not_to_beep_p)
     output_buf << "\a";
+
   if (name)
     output_buf << name << ": ";
-  output_buf.vform (fmt, args);
+
+  octave_vformat (output_buf, fmt, args);
+
   output_buf << std::endl << std::ends;
 
   char *msg = output_buf.str ();
 
   if (buffer_error_messages)
     {
       char *ptr = msg;
 
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -2095,66 +2095,70 @@ printf_value_cache::string_value (void)
     curr_state = conversion_error;
 
   return retval;
 }
 
 // Ugh again and again.
 
 template <class T>
-void
+int
 do_printf_conv (std::ostream& os, const char *fmt, int nsa, int sa_1,
 		int sa_2, bool have_arg, T arg)
 {
+  int retval = 0;
+
   switch (nsa)
     {
     case 2:
       if (have_arg)
-	os.form (fmt, sa_1, sa_2, arg);
+	retval = octave_format (os, fmt, sa_1, sa_2, arg);
       else
-	os.form (fmt, sa_1, sa_2);
+	retval = octave_format (os, fmt, sa_1, sa_2);
       break;
 
     case 1:
       if (have_arg)
-	os.form (fmt, sa_1, arg);
+	retval = octave_format (os, fmt, sa_1, arg);
       else
-	os.form (fmt, sa_1);
+	retval = octave_format (os, fmt, sa_1);
       break;
 
     case 0:
       if (have_arg)
-	os.form (fmt, arg);
+	retval = octave_format (os, fmt, arg);
       else
-	os.form (fmt);
+	retval = octave_format (os, fmt);
       break;
 
     default:
       ::error ("fprintf: internal error handling format");
       break;
     }
+
+  return retval;
 }
 
-template void
+template int
 do_printf_conv (std::ostream&, const char*, int, int, int, bool, int);
 
-template void
+template int
 do_printf_conv (std::ostream&, const char*, int, int, int, bool, long);
 
-template void
+template int
 do_printf_conv (std::ostream&, const char*, int, int, int, bool, double);
 
-template void
+template int
 do_printf_conv (std::ostream&, const char*, int, int, int, bool, const char*);
 
 int
 octave_base_stream::do_printf (printf_format_list& fmt_list,
 			       const octave_value_list& args)
 {
-  int retval = -1;
+  int retval = 0;
 
   std::ostream *osp = output_stream ();
 
   if (osp)
     {
       std::ostream& os = *osp;
 
       const printf_format_elt *elt = fmt_list.first ();
@@ -2192,77 +2196,76 @@ octave_base_stream::do_printf (printf_fo
 			    break;
 			}
 		    }
 		}
 
 	      const char *fmt = elt->text;
 
 	      if (doing_percent || args == 0)
-		do_printf_conv (os, fmt, nsa, sa_1, sa_2, false, 0.0);
+		retval += do_printf_conv (os, fmt, nsa, sa_1, sa_2,
+					  false, 0.0);
 	      else
 		{
 		  if (elt->type == 's' && val_cache.looking_at_string ())
 		    {
 		      std::string val = val_cache.string_value ();
 
 		      if (val_cache)
-			do_printf_conv (os, fmt, nsa, sa_1, sa_2, true,
-					val.c_str ());
+			retval += do_printf_conv (os, fmt, nsa, sa_1,
+						  sa_2, true, val.c_str ());
 		      else
 			break;
 		    }
 		  else
 		    {
 		      double val = val_cache.double_value ();
 
 		      if (val_cache)
 			{
 			  switch (elt->type)
 			    {
 			    case 'd': case 'i': case 'o': case 'x':
 			    case 'X': case 'u': case 'c':
 			      {
 				if (elt->modifier == 'l')
-				  do_printf_conv (os, fmt, nsa, sa_1,
-						  sa_2, true,
-						  static_cast<long> (val));
+				  retval
+				    += do_printf_conv (os, fmt, nsa,
+						       sa_1, sa_2, true,
+						       static_cast<long> (val));
 				else
-				  do_printf_conv (os, fmt, nsa, sa_1,
-						  sa_2, true,
-						  static_cast<int> (val));
+				  retval
+				    += do_printf_conv (os, fmt, nsa,
+						       sa_1, sa_2, true,
+						       static_cast<int> (val));
 			      }
 			      break;
 
 			    case 'f': case 'e': case 'E':
 			    case 'g': case 'G':
-			      do_printf_conv (os, fmt, nsa, sa_1,
-					      sa_2, true, val);
+			      retval
+				+= do_printf_conv (os, fmt, nsa, sa_1,
+						   sa_2, true, val);
 			      break;
 
 			    default:
 			      error ("fprintf: invalid format specifier");
 			      return -1;
 			      break;
 			    }
 			}
 		      else
 			break;
 		    }
 
 		  if (val_cache.no_more_values ())
-		    {
-		      retval = 0;
-		      break;
-		    }
+		    break;
 		}
 
-	      if (os)
-		retval += nsa + (doing_percent ? 0 : 1);
-	      else
+	      if (! os)
 		{
 		  error ("fprintf: write error");
 		  retval = -1;
 		  break;
 		}
 	    }
 	  else
 	    {
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -669,16 +669,66 @@ get_dimensions (const octave_value& a, c
   nc = b.is_empty () ? 0 : b.nint_value ();
 
   if (error_state)
     error ("%s: expecting two scalar arguments", warn_for);
   else
     check_dimensions (nr, nc, warn_for); // May set error_state.
 }
 
+extern int
+octave_format (ostream& os, const char *fmt, ...)
+{
+  int retval = -1;
+
+  va_list args;
+  va_start (args, fmt);
+
+  retval = octave_vformat (os, fmt, args);
+
+  va_end (args);
+
+  return retval;
+}
+
+extern int
+octave_vformat (ostream& os, const char *fmt, va_list args)
+{
+  int retval = -1;
+
+#if defined (__GNUG__)
+
+  ostrstream buf;
+
+  buf.vform (fmt, args);
+
+  buf << ends;
+
+  char *s = buf.str ();
+
+  retval = strlen (s);
+
+  os << s;
+
+#else
+
+  char *s = octave_vsnprintf (fmt, args);
+
+  if (s)
+    {
+      os << s;
+
+      retval = strlen (s);
+    }
+
+#endif
+
+  return retval;
+}
+
 static int
 treat_neg_dim_as_zero (void)
 {
   Vtreat_neg_dim_as_zero = check_preference ("treat_neg_dim_as_zero");
 
   return 0;
 }
 
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -18,16 +18,18 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_utils_h)
 #define octave_utils_h 1
 
+#include <cstdarg>
+
 #include <iostream>
 #include <string>
 
 #include "lo-utils.h"
 
 class octave_value;
 class octave_value_list;
 class string_vector;
@@ -60,21 +62,31 @@ extern int check_preference (const std::
 extern void
 get_dimensions (const octave_value& a, const octave_value& b,
 		const char *warn_for, int& nr, int& nc);
 
 extern void
 get_dimensions (const octave_value& a,
 		const char *warn_for, int& nr, int& nc);
 
+extern int
+octave_format (ostream& os, const char *fmt, ...);
+
+extern int
+octave_vformat (ostream& os, const char *fmt, va_list args);
+
 extern "C" void octave_usleep (unsigned int useconds);
 
 extern "C" int octave_strcasecmp (const char *s1, const char *s2);
 
 extern "C" int octave_strncasecmp (const char *s1, const char *s2, size_t n);
 
+extern "C" char *octave_snprintf (size_t n, const char *fmt, ...);
+
+extern "C" char *octave_vsnprintf (size_t n, const char *fmt, va_list args);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
