# HG changeset patch
# User jwe
# Date 943118581 0
#      Sat Nov 20 17:23:01 1999 +0000
# Node ID a4cd1e9d9962f2602d897aa8ddb5822ca7e7e15f
# Parent  0748b03c351093eaa34099e1ca740ac7fac176a5
[project @ 1999-11-20 17:22:48 by jwe]

diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -551,22 +551,17 @@ list, Octave provides three functions fo
 re-running chunks of commands from the history list.
 
 @DOCSTRING(history)
 
 @DOCSTRING(edit_history)
 
 @DOCSTRING(run_history)
 
-@defvr {Built-in Variable} EDITOR
-A string naming the editor to use with the @code{edit_history} command.
-If the environment variable @code{EDITOR} is set when Octave starts, its
-value is used as the default.  Otherwise, @code{EDITOR} is set to
-@code{"emacs"}.
-@end defvr
+@DOCSTRING(EDITOR)
 
 @DOCSTRING(history_file)
 
 @DOCSTRING(history_size)
 
 @DOCSTRING(saving_history)
 
 @node Customizing the Prompt, Diary and Echo Commands, Commands For History, Command Line Editing
diff --git a/doc/interpreter/control.txi b/doc/interpreter/control.txi
--- a/doc/interpreter/control.txi
+++ b/doc/interpreter/control.txi
@@ -364,20 +364,16 @@ References:
 @DOCSTRING(h2norm)
 
 @DOCSTRING(hinfnorm)
 
 @DOCSTRING(obsv)
 
 @DOCSTRING(pzmap)
 
-@deftypefn{Function File} {outputs = } synKnames (inputs)
-Return controller signal names based in plant signal names and dimensions
-@end deftypefn
-
 @DOCSTRING(is_abcd)
 
 @DOCSTRING(is_controllable)
 
 @DOCSTRING(is_detectable)
 
 @DOCSTRING(is_dgkf)
 
@@ -450,64 +446,16 @@ Return controller signal names based in 
 @DOCSTRING(dlqr)
 
 @DOCSTRING(h2syn)
 
 @DOCSTRING(hinf_ctr)
 
 @DOCSTRING(hinfsyn)
 
-@DOCSTRING(hinfsyn_c)
-@deftypefn {Function File } {[@var{xx}, @var{err}] =} hinfsyn_c (@var{nn}, @var{ptol}, @var{s1}@{, @var{s2}@})
-used internally in hinfsyn to evaluate hamiltonian/symplectic
- eigenvalue problems.
-
-@strong{WARNING} Argument checking not performed.
-
-@strong{Inputs}
-@table @var
-@item  s1 @r{(alone)}
-hamiltonian matrix
-@item (s1,s2) @r{ as a pair}
-symplectic matrix pencil
-@end table
-@strong{Outputs}
-@table @var
-@item   xx: positive (semi-)definite solution of DARE (set to 0 if err <=2)
-@item   code:  error:
-@table @strong
-@item 0
-no error 
-@item 1
-   (s1): eigenvalues on imaginary axis
-
-          (s1,s2): gen. eigenvalues on unit circle
-@item 2
-   unequal number of stable/antistable (generalized) eigenvalues
-@item 3
-(s1): infinite entries in solution x 
-
-(s1,s2): infinite entires in solution x or (I + R X) singular
-@item 4
-x is not symmetric
-@item 5
-x has negative eigenvalues
-@end table
-@end table
-
-Solution method: Either Laub's schur method or Symplectic GEP approach; 
-uses Van Dooren's code to re-order qz decompostion 
-(www.netlib.com - toms/590)
-
-See also: Ran and Rodman, "Stable Hermitian Solutions of Discrete
- Algebraic Riccati Equations," Mathematics of Control, Signals and
- Systems, Vol 5, no 2 (1992)  pp 165-194.
-
-@end deftypefn
-
 @DOCSTRING(hinfsyn_chk)
 
 @DOCSTRING(lqe)
 
 @DOCSTRING(lqg)
 
 @DOCSTRING(lqr)
 
@@ -515,24 +463,16 @@ See also: Ran and Rodman, "Stable Hermit
 
 @DOCSTRING(place)
 
 @node misc,  , cacsd, Control Theory
 @section Miscellaneous Functions (Not yet properly filed/documented)
 
 @DOCSTRING(axis2dlim)
 
-@deftypefn {Function File } { outputs =} mb ( inputs ) 
-@format
- $Revision: 1.9 $
-
-
-@end format
-@end deftypefn
-
 @DOCSTRING(moddemo)
 
 @DOCSTRING(prompt)
 
 @DOCSTRING(rldemo)
 
 @DOCSTRING(rlocus)
 
diff --git a/doc/interpreter/nonlin.txi b/doc/interpreter/nonlin.txi
--- a/doc/interpreter/nonlin.txi
+++ b/doc/interpreter/nonlin.txi
@@ -21,29 +21,19 @@ Octave can solve sets of nonlinear equat
 F (x) = 0
 @end example
 @end ifinfo
 
 @noindent
 using the function @code{fsolve}, which is based on the @sc{Minpack}
 subroutine @code{hybrd}.
 
-@deftypefn {Loadable Function} {[@var{x}, @var{info}] =} fsolve (@var{fcn}, @var{x0})
-Given @var{fcn}, the name of a function of the form @code{f (@var{x})}
-and an initial starting point @var{x0}, @code{fsolve} solves the set of
-equations such that @code{f(@var{x}) == 0}.
-@end deftypefn
+@DOCSTRING(fsolve)
 
-@deftypefn {Loadable Function} {} fsolve_options (@var{opt}, @var{val})
-When called with two arguments, this function allows you set options
-parameters for the function @code{fsolve}.  Given one argument,
-@code{fsolve_options} returns the value of the corresponding option.  If
-no arguments are supplied, the names of all the available options and
-their current values are displayed.
-@end deftypefn
+@DOCSTRING(fsolve_options)
 
 Here is a complete example.  To solve the set of equations
 @iftex
 @tex
 $$
  \eqalign{-2x^2 + 3xy + 4\sin(y) - 6 &= 0\cr
            3x^2 - 2xy^2 + 3\cos(x) + 4 &= 0}
 $$
diff --git a/doc/interpreter/optim.txi b/doc/interpreter/optim.txi
--- a/doc/interpreter/optim.txi
+++ b/doc/interpreter/optim.txi
@@ -23,106 +23,11 @@
 @section Quadratic Programming
 
 @node Nonlinear Programming, Linear Least Squares, Quadratic Programming, Optimization
 @section Nonlinear Programming
 
 @node Linear Least Squares,  , Nonlinear Programming, Optimization
 @section Linear Least Squares
 
-@deftypefn {Function File} {[@var{beta}, @var{v}, @var{r}] =} gls (@var{y}, @var{x}, @var{o})
-Generalized least squares estimation for the multivariate model
-@iftex
-@tex
-$y = x b + e$
-with $\bar{e} = 0$ and cov(vec($e$)) = $(s^2)o$,
-@end tex
-@end iftex
-@ifinfo
-@code{@var{y} = @var{x} * @var{b} + @var{e}} with @code{mean (@var{e}) =
-0} and @code{cov (vec (@var{e})) = (@var{s}^2)*@var{o}},
-@end ifinfo
- where
-@iftex
-@tex 
-$y$ is a $t \times p$ matrix, $x$ is a $t \times k$ matrix, $b$ is a $k
-\times p$ matrix, $e$ is a $t \times p$ matrix, and $o$ is a $tp \times
-tp$ matrix.
-@end tex
-@end iftex
-@ifinfo
-@var{Y} is a @var{T} by @var{p} matrix, @var{X} is a @var{T} by @var{k}
-matrix, @var{B} is a @var{k} by @var{p} matrix, @var{E} is a @var{T} by
-@var{p} matrix, and @var{O} is a @var{T}@var{p} by @var{T}@var{p}
-matrix.
-@end ifinfo
-
-@noindent
-Each row of Y and X is an observation and each column a variable.
-
-The return values @var{beta}, @var{v}, and @var{r} are defined as
-follows.
-
-@table @var
-@item beta
-The GLS estimator for @var{b}.
-
-@item v
-The GLS estimator for @code{@var{s}^2}.
-
-@item r
-The matrix of GLS residuals, @code{@var{r} = @var{y} - @var{x} *
-@var{beta}}.
-@end table
-@end deftypefn
+@DOCSTRING(gls)
 
-@deftypefn {Function File} {[@var{beta}, @var{sigma}, @var{r}] =} ols (@var{y}, @var{x})
-Ordinary least squares estimation for the multivariate model
-@iftex
-@tex
-$y = x b + e$
-with
-$\bar{e} = 0$, and cov(vec($e$)) = kron ($s, I$)
-@end tex
-@end iftex
-@ifinfo
-@code{@var{y} = @var{x}*@var{b} + @var{e}} with
-@code{mean (@var{e}) = 0} and @code{cov (vec (@var{e})) = kron (@var{s},
-@var{I})}.
-@end ifinfo
- where
-@iftex
-@tex
-$y$ is a $t \times p$ matrix, $x$ is a $t \times k$ matrix, 
-$b$ is a $k \times p$ matrix, and $e$ is a $t \times p$ matrix.
-@end tex
-@end iftex
-@ifinfo
-@var{y} is a @var{t} by @var{p} matrix, @var{X} is a @var{t} by @var{k}
-matrix, @var{B} is a @var{k} by @var{p} matrix, and @var{e} is a @var{t}
-by @var{p} matrix.
-@end ifinfo
-
-Each row of @var{y} and @var{x} is an observation and each column a
-variable.
-
-The return values @var{beta}, @var{sigma}, and @var{r} are defined as
-follows.
-
-@table @var
-@item beta
-The OLS estimator for @var{b}, @code{@var{beta} = pinv (@var{x}) *
-@var{y}}, where @code{pinv (@var{x})} denotes the pseudoinverse of
-@var{x}.
-
-@item sigma
-The OLS estimator for the matrix @var{s},
-
-@example
-@group
-@var{sigma} = (@var{y}-@var{x}*@var{beta})' * (@var{y}-@var{x}*@var{beta}) / (@var{t}-rank(@var{x}))
-@end group
-@end example
-
-@item r
-The matrix of OLS residuals, @code{@var{r} = @var{y} - @var{x} * @var{beta}}.
-@end table
-@end deftypefn
+@DOCSTRING(ols)
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -157,339 +157,64 @@ lines with a replot command, gnuplot alw
 you probably don't want to have a completely new plot generated every
 time something as minor as an axis label changes.
 
 @findex shg
 The command @code{shg} is equivalent to executing @code{replot} without
 any arguments.
 @end deffn
 
-@defvr {Built-in Variable} automatic_replot
-You can tell Octave to redisplay the plot each time anything about it
-changes by setting the value of the builtin variable
-@code{automatic_replot} to a nonzero value.  Since this is fairly
-inefficient, the default value is 0.
-@end defvr
+@DOCSTRING(automatic_replot)
 
 Note that NaN values in the plot data are automatically omitted, and
 Inf values are converted to a very large value before calling gnuplot.
 
 @c XXX FIXME XXX -- add info about what to do to get plots on remote X
 @c terminals.  People often forget how to properly set DISPLAY and run
 @c xhost.
 
 @c XXX FIXME XXX -- add info about getting paper copies of plots.
 
 The @sc{Matlab}-style two-dimensional plotting commands are:
 
 @cindex plotting
 @cindex graphics
 
-@deftypefn {Function File} {} plot (@var{args})
-This function produces two-dimensional plots.  Many different
-combinations of arguments are possible.  The simplest form is
-
-@example
-plot (@var{y})
-@end example
-
-@noindent
-where the argument is taken as the set of @var{y} coordinates and the
-@var{x} coordinates are taken to be the indices of the elements,
-starting with 1.
-
-If more than one argument is given, they are interpreted as
-
-@example
-plot (@var{x}, @var{y}, @var{fmt} ...)
-@end example
-
-@noindent
-where @var{y} and @var{fmt} are optional, and any number of argument
-sets may appear.  The @var{x} and @var{y} values are
-interpreted as follows:
-
-@itemize @bullet
-@item
-If a single data argument is supplied, it is taken as the set of @var{y}
-coordinates and the @var{x} coordinates are taken to be the indices of
-the elements, starting with 1.
-
-@item
-If the first argument is a vector and the second is a matrix, the
-the vector is plotted versus the columns (or rows) of the matrix.
-(using whichever combination matches, with columns tried first.)
-
-@item
-If the first argument is a matrix and the second is a vector, the
-the columns (or rows) of the matrix are plotted versus the vector.
-(using whichever combination matches, with columns tried first.)
-
-@item
-If both arguments are vectors, the elements of @var{y} are plotted versus
-the elements of @var{x}.
+@DOCSTRING(plot)
 
-@item
-If both arguments are matrices, the columns of @var{y} are plotted
-versus the columns of @var{x}.  In this case, both matrices must have
-the same number of rows and columns and no attempt is made to transpose
-the arguments to make the number of rows match.
-
-If both arguments are scalars, a single point is plotted.
-@end itemize
-
-The @var{fmt} argument, if present is interpreted as follows.  If
-@var{fmt} is missing, the default gnuplot line style is assumed.
-
-@table @samp
-@item -
-Set lines plot style (default).
-
-@item .
-Set dots plot style.
-
-@item @@
-Set points plot style.
-
-@item -@@
-Set linespoints plot style.
+@DOCSTRING(hold)
 
-@item ^
-Set impulses plot style.
-
-@item L
-Set steps plot style.
-
-@item #
-Set boxes plot style.
-
-@item ~
-Set errorbars plot style.
-
-@item #~
-Set boxerrorbars plot style.
-
-@item @var{n}
-Interpreted as the plot color if @var{n} is an integer in the range 1 to
-6.
-
-@item @var{nm}
-If @var{nm} is a two digit integer and @var{m} is an integer in the
-range 1 to 6, @var{m} is interpreted as the point style.  This is only
-valid in combination with the @code{@@} or @code{-@@} specifiers.
-
-@item @var{c}
-If @var{c} is one of @code{"r"}, @code{"g"}, @code{"b"}, @code{"m"},
-@code{"c"}, or @code{"w"}, it is interpreted as the plot color (red,
-green, blue, magenta, cyan, or white).
+@DOCSTRING(ishold)
 
-@item +
-@itemx *
-@itemx o
-@itemx x
-Used in combination with the points or linespoints styles, set the point
-style.
-@end table
-
-The color line styles have the following meanings on terminals that
-support color.
-
-@example
-Number  Gnuplot colors  (lines)points style
-  1       red                   *
-  2       green                 +
-  3       blue                  o
-  4       magenta               x
-  5       cyan                house
-  6       brown            there exists
-@end example
-
-Here are some plot examples:
+@DOCSTRING(clearplot)
 
-@example
-plot (x, y, "@@12", x, y2, x, y3, "4", x, y4, "+")
-@end example
-
-This command will plot @code{y} with points of type 2 (displayed as
-@samp{+}) and color 1 (red), @code{y2} with lines, @code{y3} with lines of
-color 4 (magenta) and @code{y4} with points displayed as @samp{+}.
-
-@example
-plot (b, "*")
-@end example
-
-This command will plot the data in the variable @code{b} will be plotted
-with points displayed as @samp{*}.
-@end deftypefn
-
-@deftypefn {Function File} {} hold @var{args}
-Tell Octave to `hold' the current data on the plot when executing
-subsequent plotting commands.  This allows you to execute a series of
-plot commands and have all the lines end up on the same figure.  The
-default is for each new plot command to clear the plot device first.
-For example, the command
-
-@example
-hold on
-@end example
+@DOCSTRING(closeplot)
 
-@noindent
-turns the hold state on.  An argument of @code{off} turns the hold state
-off, and @code{hold} with no arguments toggles the current hold state.
-@end deftypefn
-
-@deftypefn {Function File} {} ishold
-Return 1 if the next line will be added to the current plot, or 0 if
-the plot device will be cleared before drawing the next line.
-@end deftypefn
-
-@deftypefn {Function File} {} clearplot
-@deftypefnx {Function File} {} clg
-Clear the plot window and any titles or axis labels.  The name
-@code{clg} is aliased to @code{clearplot} for compatibility with @sc{Matlab}.
-
-The commands @kbd{gplot clear}, @kbd{gsplot clear}, and @kbd{replot
-clear} are equivalent to @code{clearplot}.  (Previously, commands like
-@kbd{gplot clear} would evaluate @code{clear} as an ordinary expression
-and clear all the visible variables.)
-@end deftypefn
-
-@deftypefn {Function File} {} closeplot
-Close stream to the @code{gnuplot} subprocess.  If you are using X11,
-this will close the plot window.
-@end deftypefn
+@DOCSTRING(purge_tmp_files)
 
-@deftypefn {Function File} {} purge_tmp_files
-Delete the temporary files created by the plotting commands.
-
-Octave creates temporary data files for @code{gnuplot} and then sends
-commands to @code{gnuplot} through a pipe.  Octave will delete the
-temporary files on exit, but if you are doing a lot of plotting you may
-want to clean up in the middle of a session.
-
-A future version of Octave will eliminate the need to use temporary
-files to hold the plot data.
-@end deftypefn
-
-@deftypefn {Function File} {} axis (@var{limits})
-Sets the axis limits for plots.
-
-The argument @var{limits} should be a 2, 4, or 6 element vector.  The
-first and second elements specify the lower and upper limits for the x
-axis.  The third and fourth specify the limits for the y axis, and the
-fifth and sixth specify the limits for the z axis.
-
-With no arguments, @code{axis} turns autoscaling on.
-
-If your plot is already drawn, then you need to use @code{replot} before
-the new axis limits will take effect.  You can get this to happen
-automatically by setting the built-in variable @code{automatic_replot}
-to a nonzero value.
-@end deftypefn
+@DOCSTRING(axis)
 
 @node Specialized Two-Dimensional Plots, Three-Dimensional Plotting, Two-Dimensional Plotting, Plotting
 @section Specialized Two-Dimensional Plots
 
-@deftypefn {Function File} {} bar (@var{x}, @var{y})
-Given two vectors of x-y data, @code{bar} produces a bar graph.
-
-If only one argument is given, it is taken as a vector of y-values
-and the x coordinates are taken to be the indices of the elements.
-
-If two output arguments are specified, the data are generated but
-not plotted.  For example,
+@DOCSTRING(bar)
 
-@example
-bar (x, y);
-@end example
-
-@noindent
-and
-
-@example
-[xb, yb] = bar (x, y);
-plot (xb, yb);
-@end example
+@DOCSTRING(contour)
 
-@noindent
-are equivalent.
-@end deftypefn
-
-@deftypefn {Function File} {} contour (@var{z}, @var{n}, @var{x}, @var{y})
-Make a contour plot of the three-dimensional surface described by
-@var{z}.  Someone needs to improve @code{gnuplot}'s contour routines
-before this will be very useful.
-@end deftypefn
+@DOCSTRING(hist)
 
-@deftypefn {Function File} {} hist (@var{y}, @var{x})
-Produce histogram counts or plots.
-
-With one vector input argument, plot a histogram of the values with
-10 bins.  The range of the histogram bins is determined by the range
-of the data.
-
-Given a second scalar argument, use that as the number of bins.
-
-Given a second vector argument, use that as the centers of the bins,
-with the width of the bins determined from the adjacent values in
-the vector.
-
-Extreme values are lumped in the first and last bins.
+@DOCSTRING(loglog)
 
-With two output arguments, produce the values @var{nn} and @var{xx} such
-that @code{bar (@var{xx}, @var{nn})} will plot the histogram.
-@end deftypefn
-
-@deftypefn {Function File} {} loglog (@var{args})
-Make a two-dimensional plot using log scales for both axes.  See the
-description of @code{plot} above for a description of the arguments that
-@code{loglog} will accept.
-@end deftypefn
+@DOCSTRING(polar)
 
-@deftypefn {Function File} {} polar (@var{theta}, @var{rho})
-Make a two-dimensional plot given polar the coordinates @var{theta} and
-@var{rho}.
-@end deftypefn
-
-@deftypefn {Function File} {} semilogx (@var{args})
-Make a two-dimensional plot using a log scale for the @var{x} axis.  See
-the description of @code{plot} above for a description of the arguments
-that @code{semilogx} will accept.
-@end deftypefn
+@DOCSTRING(semilogx)
 
-@deftypefn {Function File} {} semilogy (@var{args})
-Make a two-dimensional plot using a log scale for the @var{y} axis.  See
-the description of @code{plot} above for a description of the arguments
-that @code{semilogy} will accept.
-@end deftypefn
-
-@deftypefn {Function File} {} stairs (@var{x}, @var{y})
-Given two vectors of x-y data, bar produces a `stairstep' plot.
-
-If only one argument is given, it is taken as a vector of y-values
-and the x coordinates are taken to be the indices of the elements.
-
-If two output arguments are specified, the data are generated but
-not plotted.  For example,
+@DOCSTRING(semilogy)
 
-@example
-stairs (x, y);
-@end example
-
-@noindent
-and
-
-@example
-[xs, ys] = stairs (x, y);
-plot (xs, ys);
-@end example
-
-@noindent
-are equivalent.
-@end deftypefn
+@DOCSTRING(stairs)
 
 @node Three-Dimensional Plotting, Plot Annotations, Specialized Two-Dimensional Plots, Plotting
 @section Three-Dimensional Plotting
 
 @deffn {Command} gsplot @var{ranges} @var{expression} @var{using} @var{title} @var{style}
 Generate a 3-dimensional plot.
 
 The @var{ranges}, @var{using}, @var{title}, and @var{style} arguments
@@ -558,190 +283,48 @@ 1 3 1 2 3 4 3 3 7
 @end ifinfo
 
 @noindent
 but not @code{rand (5, 30)}.
 @end deffn
 
 The @sc{Matlab}-style three-dimensional plotting commands are:
 
-@deftypefn {Function File} {} mesh (@var{x}, @var{y}, @var{z})
-Plot a mesh given matrices @code{x}, and @var{y} from @code{meshdom} and
-a matrix @var{z} corresponding to the @var{x} and @var{y} coordinates of
-the mesh.
-@end deftypefn
+@DOCSTRING(mesh)
 
-@deftypefn {Function File} {} meshdom (@var{x}, @var{y})
-Given vectors of @var{x} and @var{y} coordinates, return two matrices
-corresponding to the @var{x} and @var{y} coordinates of the mesh.
+@DOCSTRING(meshdom)
 
-See the file @file{sombrero.m} for an example of using @code{mesh} and
-@code{meshdom}.
-@end deftypefn
-
-@defvr {Built-in Variable} gnuplot_binary
-The name of the program invoked by the plot command.  The default value
-is @code{"gnuplot"}.  @xref{Installation}.
-@end defvr
+@DOCSTRING(gnuplot_binary)
 
-@defvr {Built-in Variable} gnuplot_has_frames
-If the value of this variable is nonzero, Octave assumes that your copy
-of gnuplot has support for multiple frames that is included in recent
-3.6beta releases.  It's initial value is determined by configure, but it
-can be changed in your startup script or at the command line in case
-configure got it wrong, or if you upgrade your gnuplot installation.
-@end defvr
+@DOCSTRING(gnuplot_has_frames)
 
-@deftypefn {Function File} {} figure (@var{n})
-Set the current plot window to plot window @var{n}.  This function
-currently requires X11 and a version of gnuplot that supports multiple
-frames.
-@end deftypefn
+@DOCSTRING(figure)
 
-@defvr {Built-in Variable} gnuplot_has_multiplot
-If the value of this variable is nonzero, Octave assumes that your copy
-of gnuplot has the multiplot support that is included in recent
-3.6beta releases.  It's initial value is determined by configure, but it
-can be changed in your startup script or at the command line in case
-configure got it wrong, or if you upgrade your gnuplot installation.
-@end defvr
+@DOCSTRING(gnuplot_has_multiplot)
 
 @node Plot Annotations, Multiple Plots on One Page, Three-Dimensional Plotting, Plotting
 @section Plot Annotations
 
-@deftypefn {Function File} {} grid
-For two-dimensional plotting, force the display of a grid on the plot.
-@end deftypefn
+@DOCSTRING(grid)
 
-@deftypefn {Function File} {} title (@var{string})
-Specify a title for the plot.  If you already have a plot displayed, use
-the command @code{replot} to redisplay it with the new title.
-@end deftypefn
+@DOCSTRING(title)
 
-@deftypefn {Function File} {} xlabel (@var{string})
-@deftypefnx {Function File} {} ylabel (@var{string})
-@deftypefnx {Function File} {} zlabel (@var{string})
-Specify x, y, and z axis labels for the plot.  If you already have a plot
-displayed, use the command @code{replot} to redisplay it with the new
-labels.
-@end deftypefn
+@DOCSTRING(xlabel)
 
 @node Multiple Plots on One Page,  , Plot Annotations, Plotting
 @section Multiple Plots on One Page
 
 The following functions all require a version of @code{gnuplot} that
 supports the multiplot feature.
 
-@deftypefn {Function File} {} mplot (@var{x}, @var{y})
-@deftypefnx {Function File} {} mplot (@var{x}, @var{y}, @var{fmt})
-@deftypefnx {Function File} {} mplot (@var{x1}, @var{y1}, @var{x2}, @var{y2})
-This is a modified version of the @code{plot} function that works with
-the multiplot version of @code{gnuplot} to plot multiple plots per page. 
-This plot version automatically advances to the next subplot position
-after each set of arguments are processed.
-
-See the description of the @var{plot} function for the various options.
-@end deftypefn
-
-@deftypefn {Function File} {} multiplot (@var{xn}, @var{yn})
-Sets and resets multiplot mode.
-
-If the arguments are non-zero, @code{multiplot} will set up multiplot
-mode with @var{xn}, @var{yn} subplots along the @var{x} and @var{y}
-axes.  If both arguments are zero, @code{multiplot} closes multiplot
-mode.
-@end deftypefn
-
-@deftypefn {Function File} {} oneplot ()
-If in multiplot mode, switches to single plot mode.
-@end deftypefn
-
-@deftypefn {Function File} {} plot_border (...)
-Multiple arguments allowed to specify the sides on which the border
-is shown.  Allowed arguments include:
+@DOCSTRING(mplot)
 
-@table @code
-@item "blank"
-No borders displayed.
-
-@item "all"
-All borders displayed
-
-@item "north"
-North Border
-
-@item "south"
-South Border
+@DOCSTRING(multiplot)
 
-@item "east"
-East Border
-
-@item "west"
-West Border
-@end table
-
-@noindent
-The arguments may be abbreviated to single characters.  Without any
-arguments, @code{plot_border} turns borders off.
-@end deftypefn
-
-@deftypefn {Function File} {} subplot (@var{rows}, @var{cols}, @var{index})
-@deftypefnx {Function File} {} subplot (@var{rcn})
-Sets @code{gnuplot} in multiplot mode and plots in location
-given by index (there are @var{cols} by @var{rows} subwindows).
+@DOCSTRING(oneplot)
 
-Input:
-
-@table @var
-@item rows
-Number of rows in subplot grid.
-
-@item columns
-Number of columns in subplot grid.
+@DOCSTRING(plot_border)
 
-@item index
-Index of subplot where to make the next plot.
-@end table
-
-If only one argument is supplied, then it must be a three digit value
-specifying the location in digits 1 (rows) and 2 (columns) and the plot
-index in digit 3.
-
-The plot index runs row-wise.  First all the columns in a row are filled
-and then the next row is filled.
+@DOCSTRING(subplot)
 
-For example, a plot with 4 by 2 grid will have plot indices running as
-follows:
-@iftex
-@tex
-\vskip 10pt
-\hfil\vbox{\offinterlineskip\hrule
-\halign{\vrule#&&\qquad\hfil#\hfil\qquad\vrule\cr
-height13pt&1&2&3&4\cr height12pt&&&&\cr\noalign{\hrule}
-height13pt&5&6&7&8\cr height12pt&&&&\cr\noalign{\hrule}}}
-\hfil
-\vskip 10pt
-@end tex
-@end iftex
-@ifinfo
-@display
-@group
-+-----+-----+-----+-----+
-|  1  |  2  |  3  |  4  |
-+-----+-----+-----+-----+
-|  5  |  6  |  7  |  8  |
-+-----+-----+-----+-----+
-@end group
-@end display
-@end ifinfo
-@end deftypefn
+@DOCSTRING(subwindow)
 
-@deftypefn {Function File} {} subwindow (@var{xn}, @var{yn})
-Sets the subwindow position in multiplot mode for the next plot.  The
-multiplot mode has to be previously initialized using the
-@code{multiplot} function, otherwise this command just becomes an alias
-to @code{multiplot}
-@end deftypefn
-
-@deftypefn {Function File} {} top_title (@var{string})
-@deftypefnx {Function File} {} bottom_title (@var{string})
-Makes a title with text @var{string} at the top (bottom) of the plot.
-@end deftypefn
+@DOCSTRING(top_title)
diff --git a/doc/interpreter/poly.txi b/doc/interpreter/poly.txi
--- a/doc/interpreter/poly.txi
+++ b/doc/interpreter/poly.txi
@@ -32,228 +32,31 @@ of length
 @ifinfo
  @var{N}
 
 @example
 p(x) = @var{c}(1) x^@var{N} + ... + @var{c}(@var{N}) x + @var{c}(@var{N}+1).
 @end example
 @end ifinfo
 
-@deftypefn {Function File} {} compan (@var{c})
-Compute the companion matrix corresponding to polynomial coefficient
-vector @var{c}.
-
-The companion matrix is
-@iftex
-@tex
-$$
-A = \left[\matrix{
- -c_2/c_1 & -c_3/c_1 & \cdots & -c_N/c_1 & -c_{N+1}/c_1\cr  
-     1    &     0    & \cdots &     0    &         0   \cr
-     0    &     1    & \cdots &     0    &         0   \cr
-  \vdots  &   \vdots & \ddots &  \vdots  &      \vdots \cr
-     0    &     0    & \cdots &     1    &         0}\right].
-$$
-@end tex
-@end iftex
-@ifinfo
+@DOCSTRING(compan)
 
-@smallexample
-     _                                                        _
-    |  -c(2)/c(1)   -c(3)/c(1)  ...  -c(N)/c(1)  -c(N+1)/c(1)  |
-    |       1            0      ...       0             0      |
-    |       0            1      ...       0             0      |
-A = |       .            .   .            .             .      |
-    |       .            .       .        .             .      |
-    |       .            .           .    .             .      |
-    |_      0            0      ...       1             0     _|
-@end smallexample
-@end ifinfo
+@DOCSTRING(conv)
 
-The eigenvalues of the companion matrix are equal to the roots of the
-polynomial.
-@end deftypefn
-
-@deftypefn {Function File} {} conv (@var{a}, @var{b})
-Convolve two vectors.
-
-@code{y = conv (a, b)} returns a vector of length equal to
-@code{length (a) + length (b) - 1}.
-If @var{a} and @var{b} are polynomial coefficient vectors, @code{conv}
-returns the coefficients of the product polynomial.
-@end deftypefn
-
-@deftypefn {Function File} {} deconv (@var{y}, @var{a})
-Deconvolve two vectors.
-
-@code{[b, r] = deconv (y, a)} solves for @var{b} and @var{r} such that
-@code{y = conv (a, b) + r}.
+@DOCSTRING(deconv)
 
-If @var{y} and @var{a} are polynomial coefficient vectors, @var{b} will
-contain the coefficients of the polynomial quotient and @var{r} will be
-a remander polynomial of lowest order.
-@end deftypefn
-
-@deftypefn {Function File} {} poly (@var{a})
-If @var{a} is a square @var{N}-by-@var{N} matrix, @code{poly (@var{a})}
-is the row vector of the coefficients of @code{det (z * eye (N) - a)},
-the characteristic polynomial of @var{a}.  If @var{x} is a vector,
-@code{poly (@var{x})} is a vector of coefficients of the polynomial
-whose roots are the elements of @var{x}.
-@end deftypefn
-
-@deftypefn {Function File} {} polyderiv (@var{c})
-Return the coefficients of the derivative of the polynomial whose
-coefficients are given by vector @var{c}.
-@end deftypefn
+@DOCSTRING(poly)
 
-@deftypefn {Function File} {[@var{p}, @var{yf}] =} polyfit (@var{x}, @var{y}, @var{n})
-Return the coefficients of a polynomial @var{p}(@var{x}) of degree
-@var{n} that minimizes 
-@iftex
-@tex
-$$
-\sum_{i=1}^N (p(x_i) - y_i)^2
-$$
-@end tex
-@end iftex
-@ifinfo
-@code{sumsq (p(x(i)) - y(i))},
-@end ifinfo
- to best fit the data in the least squares sense.
-@end deftypefn
-
-If two output arguments are requested, the second contains the values of
-the polynomial for each value of @var{x}.
+@DOCSTRING(polyderiv)
 
-@deftypefn {Function File} {} polyinteg (@var{c})
-Return the coefficients of the integral of the polynomial whose
-coefficients are represented by the vector @var{c}.
-
-The constant of integration is set to zero.
-@end deftypefn
-
-@deftypefn {Function File} {} polyreduce (@var{c})
-Reduces a polynomial coefficient vector to a minimum number of terms by
-stripping off any leading zeros.
-@end deftypefn
-
-@deftypefn {Function File} {} polyval (@var{c}, @var{x})
-Evaluate a polynomial.
-
-@code{polyval (@var{c}, @var{x})} will evaluate the polynomial at the
-specified value of @var{x}.
-
-If @var{x} is a vector or matrix, the polynomial is evaluated at each of
-the elements of @var{x}.
-@end deftypefn
+@DOCSTRING(polyfit)
 
-@deftypefn {Function File} {} polyvalm (@var{c}, @var{x})
-Evaluate a polynomial in the matrix sense.
-
-@code{polyvalm (@var{c}, @var{x})} will evaluate the polynomial in the
-matrix sense, i.e. matrix multiplication is used instead of element by
-element multiplication as is used in polyval.
-
-The argument @var{x} must be a square matrix.
-@end deftypefn
-
-@deftypefn {Function File} {} residue (@var{b}, @var{a}, @var{tol})
-If @var{b} and @var{a} are vectors of polynomial coefficients, then
-residue calculates the partial fraction expansion corresponding to the
-ratio of the two polynomials.
-@cindex partial fraction expansion
-
-The function @code{residue} returns @var{r}, @var{p}, @var{k}, and
-@var{e}, where the vector @var{r} contains the residue terms, @var{p}
-contains the pole values, @var{k} contains the coefficients of a direct
-polynomial term (if it exists) and @var{e} is a vector containing the
-powers of the denominators in the partial fraction terms.
+@DOCSTRING(polyinteg)
 
-Assuming @var{b} and @var{a} represent polynomials
-@iftex
-@tex
-$P(s)$ and $Q(s)$
-@end tex
-@end iftex
-@ifinfo
- P (s) and Q(s)
-@end ifinfo
- we have:
-@iftex
-@tex
-$$
-{P(s)\over Q(s)} = \sum_{m=1}^M {r_m\over (s-p_m)^e_m}
-  + \sum_{i=1}^N k_i s^{N-i}.
-$$
-@end tex
-@end iftex
-@ifinfo
+@DOCSTRING(polyreduce)
 
-@example
- P(s)    M       r(m)         N
- ---- = SUM -------------  + SUM k(i)*s^(N-i)
- Q(s)   m=1 (s-p(m))^e(m)    i=1
-@end example
-@end ifinfo
-
-@noindent
-where @var{M} is the number of poles (the length of the @var{r},
-@var{p}, and @var{e} vectors) and @var{N} is the length of the @var{k}
-vector.
+@DOCSTRING(polyval)
 
-The argument @var{tol} is optional, and if not specified, a default
-value of 0.001 is assumed.  The tolerance value is used to determine
-whether poles with small imaginary components are declared real.  It is
-also used to determine if two poles are distinct.  If the ratio of the
-imaginary part of a pole to the real part is less than @var{tol}, the
-imaginary part is discarded.  If two poles are farther apart than
-@var{tol} they are distinct.  For example,
-
-@example
-@group
- b = [1, 1, 1];
- a = [1, -5, 8, -4];
- [r, p, k, e] = residue (b, a);
-     @result{} r = [-2, 7, 3]
-     @result{} p = [2, 2, 1]
-     @result{} k = [](0x0)
-     @result{} e = [1, 2, 1]
-@end group
-@end example
+@DOCSTRING(polyvalm)
 
-@noindent
-which implies the following partial fraction expansion
-@iftex
-@tex
-$$
-{s^2+s+1\over s^3-5s^2+8s-4} = {-2\over s-2} + {7\over (s-2)^2} + {3\over s-1}
-$$
-@end tex
-@end iftex
-@ifinfo
-
-@example
-        s^2 + s + 1       -2        7        3
-   ------------------- = ----- + ------- + -----
-   s^3 - 5s^2 + 8s - 4   (s-2)   (s-2)^2   (s-1)
-@end example
-@end ifinfo
-@end deftypefn
+@DOCSTRING(residue)
 
-@deftypefn {Function File} {} roots (@var{v})
-
-For a vector @var{v} with @var{N} components, return
-the roots of the polynomial
-@iftex
-@tex
-$$
-v_1 z^{N-1} + \cdots + v_{N-1} z + v_N.
-$$
-@end tex
-@end iftex
-@ifinfo
-
-@example
-v(1) * z^(N-1) + ... + v(N-1) * z + v(N).
-@end example
-@end ifinfo
-@end deftypefn
+@DOCSTRING(roots)
diff --git a/doc/interpreter/quad.txi b/doc/interpreter/quad.txi
--- a/doc/interpreter/quad.txi
+++ b/doc/interpreter/quad.txi
@@ -8,55 +8,19 @@
 @menu
 * Functions of One Variable::   
 * Orthogonal Collocation::      
 @end menu
 
 @node Functions of One Variable, Orthogonal Collocation, Quadrature, Quadrature
 @section Functions of One Variable
 
-@deftypefn {Loadable Function} {[@var{v}, @var{ier}, @var{nfun}, @var{err}] =} quad (@var{f}, @var{a}, @var{b}, @var{tol}, @var{sing})
-Integrate a nonlinear function of one variable using Quadpack.
-The first argument is the name of the  function to call to compute the
-value of the integrand.  It must have the form
-
-@example
-y = f (x)
-@end example
-
-@noindent
-where @var{y} and @var{x} are scalars.
-
-The second and third arguments are limits of integration.  Either or
-both may be infinite.
+@DOCSTRING(quad)
 
-The optional argument @var{tol} is a vector that specifies the desired
-accuracy of the result.  The first element of the vector is the desired
-absolute tolerance, and the second element is the desired relative
-tolerance.  To choose a relative test only, set the absolute
-tolerance to zero.  To choose an absolute test only, set the relative
-tolerance to zero. 
-
-The optional argument @var{sing} is a vector of values at which the
-integrand is known to be singular.
-
-The result of the integration is returned in @var{v} and @var{ier}
-contains an integer error code (0 indicates a successful integration).
-The value of @var{nfun} indicates how many function evaluations were
-required, and @var{err} contains an estimate of the error in the
-solution.
-@end deftypefn
-
-@deftypefn {Loadable Function} {} quad_options (@var{opt}, @var{val})
-When called with two arguments, this function allows you set options
-parameters for the function @code{quad}.  Given one argument,
-@code{quad_options} returns the value of the corresponding option.  If
-no arguments are supplied, the names of all the available options and
-their current values are displayed.
-@end deftypefn
+@DOCSTRING(quad_options)
 
 Here is an example of using @code{quad} to integrate the function
 @iftex
 @tex
 $$
  f(x) = x \sin (1/x) \sqrt {|1 - x|}
 $$
 from $x = 0$ to $x = 3$.
@@ -104,22 +68,17 @@ Then we simply call quad:
 
 Although @code{quad} returns a nonzero value for @var{ier}, the result
 is reasonably accurate (to see why, examine what happens to the result
 if you move the lower bound to 0.1, then 0.01, then 0.001, etc.).
 
 @node Orthogonal Collocation,  , Functions of One Variable, Quadrature
 @section Orthogonal Collocation
 
-@deftypefn {Loadable Function} {[@var{r}, @var{A}, @var{B}, @var{q}] =} colloc (@var{n}, "left", "right")
-Compute derivative and integral weight matrices for orthogonal
-collocation using the subroutines given in J. Villadsen and
-M. L. Michelsen, @cite{Solution of Differential Equation Models by
-Polynomial Approximation}.
-@end deftypefn
+@DOCSTRING(colloc)
 
 Here is an example of using @code{colloc} to generate weight matrices
 for solving the second order differential equation
 @iftex
 @tex
 $u^\prime - \alpha u^{\prime\prime} = 0$ with the boundary conditions
 $u(0) = 0$ and $u(1) = 1$.
 @end tex
diff --git a/doc/interpreter/set.txi b/doc/interpreter/set.txi
--- a/doc/interpreter/set.txi
+++ b/doc/interpreter/set.txi
@@ -3,55 +3,15 @@
 @c For copying conditions, see the file gpl.texi.
 
 @node Sets, Polynomial Manipulations, Statistics, Top
 @chapter Sets
 
 Octave has a limited set of functions for managing sets of data, where a
 set is defined as a collection unique elements.
 
-@deftypefn {Function File} {} create_set (@var{x})
-Return a row vector containing the unique values in @var{x}, sorted in
-ascending order.  For example,
-
-@example
-@group
-create_set ([ 1, 2; 3, 4; 4, 2 ])
-     @result{} [ 1, 2, 3, 4 ]
-@end group
-@end example
-@end deftypefn
+@DOCSTRING(create_set)
 
-@deftypefn {Function File} {} union (@var{x}, @var{y})
-Return the set of elements that are in either of the sets @var{x} and
-@var{y}.  For example,
-
-@example
-@group
-union ([ 1, 2, 4 ], [ 2, 3, 5 ])
-     @result{} [ 1, 2, 3, 4, 5 ]
-@end group
-@end example
-@end deftypefn
+@DOCSTRING(union)
 
-@deftypefn {Function File} {} intersection (@var{x}, @var{y})
-Return the set of elements that are in both sets @var{x} and @var{y}.
-For example,
-
-@example
-@group
-intersection ([ 1, 2, 3 ], [ 2, 3, 5 ])
-     @result{} [ 2, 3 ]
-@end group
-@end example
-@end deftypefn
+@DOCSTRING(intersection)
 
-@deftypefn {Function File} {} complement (@var{x}, @var{y})
-Return the elements of set @var{y} that are not in set @var{x}.  For
-example,
-
-@example
-@group
-complement ([ 1, 2, 3 ], [ 2, 3, 5 ])
-     @result{} 5
-@end group
-@end example
-@end deftypefn
+@DOCSTRING(complement)
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -3,21 +3,58 @@ 1999-11-20  John W. Eaton  <jwe@bevo.che
 	* statistics/base/mean: Texinfoize doc string.
 	* statistics/base/median: Ditto.
 	* statistics/base/std: Ditto.
 	* statistics/base/cov: Ditto.
 	* statistics/base/corrcoef: Ditto.
 	* statistics/base/kurtosis: Ditto.
 	* statistics/base/mahalanobis: Ditto.
 	* statistics/base/skewness: Ditto.
+	* statistics/base/gls.m: Ditto.
+	* statistics/base/ols.m: Ditto.
 	* signal/detrend.m: Ditto.
 	* signal/freqz.m: Ditto.
 	* signal/sinc.m: Ditto.
 	* signal/fftconv.m: Ditto.
 	* signal/fftfilt.m: Ditto.
+	* set/create_set.m: Ditto.
+	* set/union.m: Ditto.
+	* set/intersection.m: Ditto.
+	* set/complement.m: Ditto.
+	* poly/compan.m: Ditto.
+	* poly/conv: Ditto.
+	* poly/deconv: Ditto.
+	* poly/poly: Ditto.
+	* poly/polyderiv: Ditto.
+	* poly/polyfit: Ditto.
+	* poly/polyinteg: Ditto.
+	* poly/polyreduce: Ditto.
+	* poly/polyval: Ditto.
+	* poly/polyvalm: Ditto.
+	* poly/residue: Ditto.
+	* poly/roots: Ditto.
+	* plot/top_title.m: Ditto
+	* plot/subwindow.m: Ditto
+	* plot/subplot.m: Ditto
+	* plot/plot_border.m: Ditto
+	* plot/oneplot.m: Ditto
+	* plot/multiplot.m: Ditto
+	* plot/mplot.m: Ditto
+	* plot/xlabel.m: Ditto
+	* plot/figure.m: Ditto
+	* plot/meshdom.m: Ditto
+	* plot/mesh.m: Ditto
+	* plot/stairs.m: Ditto
+	* plot/polar.m: Ditto
+	* plot/loglog.m: Ditto
+	* plot/hist.m: Ditto
+	* plot/contour.m: Ditto
+	* plot/bar.m: Ditto
+	* plot/axis.m: Ditto
+	* plot/plot.m: Ditto.
 
 1999-11-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* control/pinv.m: Delete.
 
 	* Makefile.in (DOCSTRINGS): Don't echo $(ALL_M_FILES).
 
 	* strings/blanks.m: Texinfoize doc string.
diff --git a/scripts/plot/axis.m b/scripts/plot/axis.m
--- a/scripts/plot/axis.m
+++ b/scripts/plot/axis.m
@@ -12,27 +12,32 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: axis ()
-##        axis ([xmin, xmax])
-##        axis ([xmin, xmax, ymin, ymax])
-##        axis ([xmin, xmax, ymin, ymax, zmin, zmax])
-##
-## Sets the axis limits.
-##
-## With no arguments, turns autoscaling on.
-##
-## If your plot is already drawn, then you need to REPLOT before
-## the new axis limits will take effect.
+## -*- texinfo -*-
+## @deftypefn {Function File} {} axis (@var{limits})
+## Sets the axis limits for plots.
+## 
+## The argument @var{limits} should be a 2, 4, or 6 element vector.  The
+## first and second elements specify the lower and upper limits for the x
+## axis.  The third and fourth specify the limits for the y axis, and the
+## fifth and sixth specify the limits for the z axis.
+## 
+## With no arguments, @code{axis} turns autoscaling on.
+## 
+## If your plot is already drawn, then you need to use @code{replot} before
+## the new axis limits will take effect.  You can get this to happen
+## automatically by setting the built-in variable @code{automatic_replot}
+## to a nonzero value.
+## @end deftypefn
 
 ## Author: jwe
 
 function curr_axis = axis (ax)
 
   ## This may not be correct if someone has used the gnuplot interface
   ## directly...
 
diff --git a/scripts/plot/bar.m b/scripts/plot/bar.m
--- a/scripts/plot/bar.m
+++ b/scripts/plot/bar.m
@@ -12,35 +12,42 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: [xb, yb] = bar (x, y)
-##
-## Given two vectors of x-y data, bar produces a `bar' graph.
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} bar (@var{x}, @var{y})
+## Given two vectors of x-y data, @code{bar} produces a bar graph.
+## 
 ## If only one argument is given, it is taken as a vector of y-values
 ## and the x coordinates are taken to be the indices of the elements.
-##
+## 
 ## If two output arguments are specified, the data are generated but
 ## not plotted.  For example,
-##
-##   bar (x, y);
-##
+## 
+## @example
+## bar (x, y);
+## @end example
+## 
+## @noindent
 ## and
-##
-##   [xb, yb] = bar (x, y);
-##   plot (xb, yb);
-##
+## 
+## @example
+## [xb, yb] = bar (x, y);
+## plot (xb, yb);
+## @end example
+## 
+## @noindent
 ## are equivalent.
-##
+## @end deftypefn
+
 ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ##           stairs, gplot, gsplot, replot, xlabel, ylabel, title
 
 ## Author: jwe
 
 function [xb, yb] = bar (x, y)
 
   if (nargin == 1)
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -12,18 +12,23 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: contour (z, n, x, y)
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} contour (@var{z}, @var{n}, @var{x}, @var{y})
+## Make a contour plot of the three-dimensional surface described by
+## @var{z}.  Someone needs to improve @code{gnuplot}'s contour routines
+## before this will be very useful.
+## @end deftypefn
+
 ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title
 
 ## Author: jwe
 
 function contour (z, n, x, y)
 
   if (nargin == 1)
diff --git a/scripts/plot/figure.m b/scripts/plot/figure.m
--- a/scripts/plot/figure.m
+++ b/scripts/plot/figure.m
@@ -12,20 +12,22 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: figure (n)
-##
-## Set the current plot window to plot window N.  This function
-## currently requires X11 and a recent version of gnuplot.
+## -*- texinfo -*-
+## @deftypefn {Function File} {} figure (@var{n})
+## Set the current plot window to plot window @var{n}.  This function
+## currently requires X11 and a version of gnuplot that supports multiple
+## frames.
+## @end deftypefn
 
 ## Author: jwe
 
 function f = figure (n)
 
   static figure_list = create_set (0);
   static figure_called = 0;
 
diff --git a/scripts/plot/grid.m b/scripts/plot/grid.m
--- a/scripts/plot/grid.m
+++ b/scripts/plot/grid.m
@@ -12,22 +12,23 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: grid ("on" | "off")
-##
-## Turn grid lines on or off for plotting.
-##
-## If the argument is omitted, "on" is assumed.
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} grid (@var{arg})
+## For two-dimensional plotting, force the display of a grid on the plot.
+## The argument may be either @code{"on"} or @code{"off"}.  If it is
+## omitted, @code{"on"} is assumed.
+## @end deftypefn
+
 ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title
 
 ## Author: jwe
 
 function grid (x)
 
   if (nargin == 0)
diff --git a/scripts/plot/hist.m b/scripts/plot/hist.m
--- a/scripts/plot/hist.m
+++ b/scripts/plot/hist.m
@@ -12,35 +12,36 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: [NN, XX] = hist (Y, X)  or  hist (Y, X)
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} hist (@var{y}, @var{x})
 ## Produce histogram counts or plots.
-##
+## 
 ## With one vector input argument, plot a histogram of the values with
 ## 10 bins.  The range of the histogram bins is determined by the range
 ## of the data.
-##
+## 
 ## Given a second scalar argument, use that as the number of bins.
-##
+## 
 ## Given a second vector argument, use that as the centers of the bins,
-## with the width of the bins determened from the adjacent values in
+## with the width of the bins determined from the adjacent values in
 ## the vector.
-##
+## 
 ## Extreme values are lumped in the first and last bins.
-##
-## With two output arguments, produce the values NN and XX such that
-## bar (XX, NN) will plot the histogram.
-##
+## 
+## With two output arguments, produce the values @var{nn} and @var{xx} such
+## that @code{bar (@var{xx}, @var{nn})} will plot the histogram.
+## @end deftypefn
+
 ## See also: bar
 
 ## Author: jwe
 
 function [nn, xx] = hist (y, x)
 
   if (nargin < 1 || nargin > 2)
     usage ("[nn, xx] = hist (y, x)");
diff --git a/scripts/plot/loglog.m b/scripts/plot/loglog.m
--- a/scripts/plot/loglog.m
+++ b/scripts/plot/loglog.m
@@ -12,25 +12,23 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: loglog (x, y)
-##        loglog (x1, y1, x2, y2, ...)
-##        loglog (x, y, fmt)
-##
-## Make a 2D plot of y versus x using a log scale for the x axis.
-##
-## See the help message for the plot command for a description of how
-## the arguments are interpreted.
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} loglog (@var{args})
+## Make a two-dimensional plot using log scales for both axes.  See the
+## description of @code{plot} for a description of the arguments that
+## @code{loglog} will accept.
+## @end deftypefn
+
 ## See also: plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
 ##           gplot, gsplot, replot, xlabel, ylabel, title
 
 ## Author: jwe
 
 function loglog (...)
 
   ## XXX FIXME XXX -- these plot states should really just be set
diff --git a/scripts/plot/mesh.m b/scripts/plot/mesh.m
--- a/scripts/plot/mesh.m
+++ b/scripts/plot/mesh.m
@@ -12,24 +12,26 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: mesh (x, y, z)
-##
-## Surface plot.  If x, y, and z are matrices with the same dimensions,
-## then corresponding elements represent vertices of the plot.  If x and
-## y are vectors, then a typical vertex is (x(j), y(i), z(i,j)).  Thus,
-## columns of z correspond to different x values and rows of z correspond
-## to different y values.
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} mesh (@var{x}, @var{y}, @var{z})
+## Plot a mesh given matrices @code{x}, and @var{y} from @code{meshdom} and
+## a matrix @var{z} corresponding to the @var{x} and @var{y} coordinates of
+## the mesh.  If @var{x} and @var{y} are vectors, then a typical vertex
+## is (@var{x}(j), @var{y}(i), @var{z}(i,j)).  Thus, columns of @var{z}
+## correspond to different @var{x} values and rows of @var{z} correspond
+## to different @var{y} values.
+## @end deftypefn
+
 ## See also: plot, semilogx, semilogy, loglog, polar, meshgrid, meshdom,
 ##           contour, bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title
 
 ## Author: jwe
 
 function mesh (x, y, z)
 
   ## XXX FIXME XXX -- the plot states should really just be set
diff --git a/scripts/plot/meshdom.m b/scripts/plot/meshdom.m
--- a/scripts/plot/meshdom.m
+++ b/scripts/plot/meshdom.m
@@ -12,20 +12,27 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: [xx, yy] = meshdom (x, y)
+## -*- texinfo -*-
+## @deftypefn {Function File} {} meshdom (@var{x}, @var{y})
+## Given vectors of @var{x} and @var{y} coordinates, return two matrices
+## corresponding to the @var{x} and @var{y} coordinates of the mesh.
+## 
+## See the file @file{sombrero.m} for an example of using @code{mesh} and
+## @code{meshdom}.
 ##
 ## Note: this function is provided for compatibility with older versions
-## of Matlab.  You should use meshgrid() instead.
+## of @sc{Matlab}.  You should use @code{meshgrid} instead.
+## @end deftypefn
 
 ## Author: jwe
 
 function [xx, yy] = meshdom (x, y)
 
   if (nargin == 2)
     if (is_vector (x) && is_vector (y))
       xlen = length (x);
diff --git a/scripts/plot/mplot.m b/scripts/plot/mplot.m
--- a/scripts/plot/mplot.m
+++ b/scripts/plot/mplot.m
@@ -12,28 +12,27 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: mplot (x, y)
-##        mplot (x1, y1, x2, y2, ...)
-##        mplot (x, y, fmt)
-##
-## This is a modified version of plot() command to work with
-## multiplot version of gnuplot to plot multiple plots per page.
-## This plot version automatically updates the plot position to
-## next plot position after making the plot in the given subplot
-## position.
-##
-## See command plot() for the various options to this command
-## as this is just mulitplot version of the same command.
+## -*- texinfo -*-
+## @deftypefn {Function File} {} mplot (@var{x}, @var{y})
+## @deftypefnx {Function File} {} mplot (@var{x}, @var{y}, @var{fmt})
+## @deftypefnx {Function File} {} mplot (@var{x1}, @var{y1}, @var{x2}, @var{y2})
+## This is a modified version of the @code{plot} function that works with
+## the multiplot version of @code{gnuplot} to plot multiple plots per page. 
+## This plot version automatically advances to the next subplot position
+## after each set of arguments are processed.
+## 
+## See the description of the @var{plot} function for the various options.
+## @end deftypefn
 
 ## Author: Vinayak Dutt <Dutt.Vinayak@mayo.EDU>
 ## Adapted-By: jwe
 
 function mplot (...)
 
   if (! gnuplot_has_multiplot)
     error ("mplot: gnuplot does not appear to support this feature");
diff --git a/scripts/plot/multiplot.m b/scripts/plot/multiplot.m
--- a/scripts/plot/multiplot.m
+++ b/scripts/plot/multiplot.m
@@ -12,26 +12,25 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: multiplot (xn, yn)
-##
-## Sets and resets multiplot mode
-##
-## If multiplot(0,0) then it will close multiplot mode and and if
-## arguments are non-zero, then it will set up multiplot mode with
-## xn,yn subplots along x and y axes.
-##
-## NOTE: this will work only with gnuplot installed with
-##       multiplot patch
+## -*- texinfo -*-
+## @deftypefn {Function File} {} multiplot (@var{xn}, @var{yn})
+## Sets and resets multiplot mode.
+## 
+## If the arguments are non-zero, @code{multiplot} will set up multiplot
+## mode with @var{xn}, @var{yn} subplots along the @var{x} and @var{y}
+## axes.  If both arguments are zero, @code{multiplot} closes multiplot
+## mode.
+## @end deftypefn
 
 ## Author: Vinayak Dutt, Dutt.Vinayak@mayo.EDU
 ## Created: 3 July 95
 ## Adapted-By: jwe
 
 function multiplot (xn, yn)
 
   if (! gnuplot_has_multiplot)
diff --git a/scripts/plot/oneplot.m b/scripts/plot/oneplot.m
--- a/scripts/plot/oneplot.m
+++ b/scripts/plot/oneplot.m
@@ -12,23 +12,20 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: oneplot
-##
-## NOTE: this will work only with gnuplot installed with
-##       multiplot patch
-##
-## Switches from multiplot (if in multiplot mode) to single plot
-## mode
+## -*- texinfo -*-
+## @deftypefn {Function File} {} oneplot ()
+## If in multiplot mode, switches to single plot mode.
+## @end deftypefn
 
 ## Author: Vinayak Dutt <Dutt.Vinayak@mayo.EDU>
 ## Created: 3 July 95
 ## Adapted-By: jwe
 
 function oneplot ()
 
   if (gnuplot_has_multiplot)
diff --git a/scripts/plot/plot.m b/scripts/plot/plot.m
--- a/scripts/plot/plot.m
+++ b/scripts/plot/plot.m
@@ -12,57 +12,155 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: plot (x, y)
-##        plot (x1, y1, x2, y2, ...)
-##        plot (x, y, fmt)
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} plot (@var{args})
+## This function produces two-dimensional plots.  Many different
+## combinations of arguments are possible.  The simplest form is
+## 
+## @example
+## plot (@var{y})
+## @end example
+## 
+## @noindent
+## where the argument is taken as the set of @var{y} coordinates and the
+## @var{x} coordinates are taken to be the indices of the elements,
+## starting with 1.
+## 
+## If more than one argument is given, they are interpreted as
+## 
+## @example
+## plot (@var{x}, @var{y}, @var{fmt} ...)
+## @end example
+## 
+## @noindent
+## where @var{y} and @var{fmt} are optional, and any number of argument
+## sets may appear.  The @var{x} and @var{y} values are
+## interpreted as follows:
+## 
+## @itemize @bullet
+## @item
+## If a single data argument is supplied, it is taken as the set of @var{y}
+## coordinates and the @var{x} coordinates are taken to be the indices of
+## the elements, starting with 1.
+## 
+## @item
 ## If the first argument is a vector and the second is a matrix, the
 ## the vector is plotted versus the columns (or rows) of the matrix.
 ## (using whichever combination matches, with columns tried first.)
-##
+## 
+## @item
 ## If the first argument is a matrix and the second is a vector, the
 ## the columns (or rows) of the matrix are plotted versus the vector.
 ## (using whichever combination matches, with columns tried first.)
-##
-## If both arguments are vectors, the elements of y are plotted versus
-## the elements of x.
-##
-## If both arguments are matrices, the columns of y are plotted versus
-## the columns of x.  In this case, both matrices must have the same
-## number of rows and columns and no attempt is made to transpose the
-## arguments to make the number of rows match.
-##
+## 
+## @item
+## If both arguments are vectors, the elements of @var{y} are plotted versus
+## the elements of @var{x}.
+## 
+## @item
+## If both arguments are matrices, the columns of @var{y} are plotted
+## versus the columns of @var{x}.  In this case, both matrices must have
+## the same number of rows and columns and no attempt is made to transpose
+## the arguments to make the number of rows match.
+## 
 ## If both arguments are scalars, a single point is plotted.
-##
-## If only one argument is given, it is taken as the set of y
-## coordinates and the x coordinates are taken to be the indices of the
-## elements, starting with 1.
-##
-## To see possible options for FMT please see __pltopt__.
-##
-## Examples:
-##
-##   plot (x, y, "@12", x, y2, x, y3, "4", x, y4, "+")
-##
-##     y will be plotted with points of type 2 ("+") and color 1 (red).
-##     y2 will be plotted with lines.
-##     y3 will be plotted with lines of color 4.
-##     y4 will be plotted with points which are "+"s.
-##
-##   plot (b, "*")
-##
-##     b will be plotted with points of type "*".
-##
+## @end itemize
+## 
+## If the @var{fmt} argument is supplied, it is interpreted as
+## follows.  If @var{fmt} is missing, the default gnuplot line style
+## is assumed.
+## 
+## @table @samp
+## @item -
+## Set lines plot style (default).
+## 
+## @item .
+## Set dots plot style.
+## 
+## @item @@
+## Set points plot style.
+## 
+## @item -@@
+## Set linespoints plot style.
+## 
+## @item ^
+## Set impulses plot style.
+## 
+## @item L
+## Set steps plot style.
+## 
+## @item #
+## Set boxes plot style.
+## 
+## @item ~
+## Set errorbars plot style.
+## 
+## @item #~
+## Set boxerrorbars plot style.
+## 
+## @item @var{n}
+## Interpreted as the plot color if @var{n} is an integer in the range 1 to
+## 6.
+## 
+## @item @var{nm}
+## If @var{nm} is a two digit integer and @var{m} is an integer in the
+## range 1 to 6, @var{m} is interpreted as the point style.  This is only
+## valid in combination with the @code{@@} or @code{-@@} specifiers.
+## 
+## @item @var{c}
+## If @var{c} is one of @code{"r"}, @code{"g"}, @code{"b"}, @code{"m"},
+## @code{"c"}, or @code{"w"}, it is interpreted as the plot color (red,
+## green, blue, magenta, cyan, or white).
+## 
+## @item +
+## @itemx *
+## @itemx o
+## @itemx x
+## Used in combination with the points or linespoints styles, set the point
+## style.
+## @end table
+## 
+## The color line styles have the following meanings on terminals that
+## support color.
+## 
+## @example
+## Number  Gnuplot colors  (lines)points style
+##   1       red                   *
+##   2       green                 +
+##   3       blue                  o
+##   4       magenta               x
+##   5       cyan                house
+##   6       brown            there exists
+## @end example
+## 
+## Here are some plot examples:
+## 
+## @example
+## plot (x, y, "@@12", x, y2, x, y3, "4", x, y4, "+")
+## @end example
+## 
+## This command will plot @code{y} with points of type 2 (displayed as
+## @samp{+}) and color 1 (red), @code{y2} with lines, @code{y3} with lines of
+## color 4 (magenta) and @code{y4} with points displayed as @samp{+}.
+## 
+## @example
+## plot (b, "*")
+## @end example
+## 
+## This command will plot the data in the variable @code{b} will be plotted
+## with points displayed as @samp{*}.
+## @end deftypefn
+
 ## See also: semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__
 ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title
 
 ## Author: jwe
 
 function plot (...)
 
   ## XXX FIXME XXX -- these plot states should really just be set
diff --git a/scripts/plot/plot_border.m b/scripts/plot/plot_border.m
--- a/scripts/plot/plot_border.m
+++ b/scripts/plot/plot_border.m
@@ -12,34 +12,45 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: plot_border (...)
-##
-## NOTE: this will work only with gnuplot installed with
-##       multiplot patch
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} plot_border (...)
 ## Multiple arguments allowed to specify the sides on which the border
-## is shown. allowed strings:
-##
-## allowed input strings:
-##
-##  "blank", "BLANK", "b", "B",   --->  No borders displayed
-##    "all",   "ALL", "a", "A",   ---> All borders displayed
-##  "north", "NORTH", "n", "N",   ---> North Border
-##  "south", "SOUTH", "s", "S",   ---> South Border
-##   "east",  "EAST", "e", "E",   --->  East Border
-##   "west",  "WEST", "w", "W",   --->  West Border
-##
-## Without any arguments, turns borders off.
+## is shown.  Allowed arguments include:
+## 
+## @table @code
+## @item "blank"
+## No borders displayed.
+## 
+## @item "all"
+## All borders displayed
+## 
+## @item "north"
+## North Border
+## 
+## @item "south"
+## South Border
+## 
+## @item "east"
+## East Border
+## 
+## @item "west"
+## West Border
+## @end table
+## 
+## @noindent
+## The arguments may be abbreviated to single characters.  Without any
+## arguments, @code{plot_border} turns borders off.
+## @end deftypefn
 
 ## Author: Vinayak Dutt <Dutt.Vinayak@mayo.EDU>
 ## Created: 3 July 95
 ## Adapted-By: jwe
 
 function plot_border (...)
 
   if (! gnuplot_has_multiplot)
diff --git a/scripts/plot/polar.m b/scripts/plot/polar.m
--- a/scripts/plot/polar.m
+++ b/scripts/plot/polar.m
@@ -12,22 +12,24 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: polar (theta, rho, fmt)
-##
-## Make a 2D plot given polar the coordinates theta and rho.
+## -*- texinfo -*-
+## @deftypefn {Function File} {} polar (@var{theta}, @var{rho}, @var{fmt})
+## Make a two-dimensional plot given polar the coordinates @var{theta} and
+## @var{rho}.
 ##
 ## The optional third argument specifies the line type.
-##
+## @end deftypefn
+
 ## See also: plot, semilogx, semilogy, loglog, mesh, contour, bar,
 ##           stairs, gplot, gsplot, replot, xlabel, ylabel, title
 
 ## Author: jwe
 
 function polar (x1, x2, fmt)
 
   ## XXX FIXME XXX -- these plot states should really just be set
diff --git a/scripts/plot/semilogx.m b/scripts/plot/semilogx.m
--- a/scripts/plot/semilogx.m
+++ b/scripts/plot/semilogx.m
@@ -12,25 +12,23 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: semilogx (x, y)
-##        semilogx (x1, y1, x2, y2, ...)
-##        semilogx (x, y, fmt)
-##
-## Make a 2D plot of y versus x using a log scale for the x axis.
-##
-## See the help message for the plot command for a description of how
-## the arguments are interpreted.
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} semilogx (@var{args})
+## Make a two-dimensional plot using a log scale for the @var{x} axis.  See
+## the description of @code{plot} for a description of the arguments
+## that @code{semilogx} will accept.
+## @end deftypefn
+
 ## See also: plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
 ##           gplot, gsplot, replot, xlabel, ylabel, title
 
 ## Author: jwe
 
 function semilogx (...)
 
   ## XXX FIXME XXX -- these plot states should really just be set
diff --git a/scripts/plot/semilogy.m b/scripts/plot/semilogy.m
--- a/scripts/plot/semilogy.m
+++ b/scripts/plot/semilogy.m
@@ -12,25 +12,23 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: semilogy (x, y)
-##        semilogy (x1, y1, x2, y2, ...)
-##        semilogy (x, y, fmt)
-##
-## Make a 2D plot of y versus x using a log scale for the x axis.
-##
-## See the help message for the plot command for a description of how
-## the arguments are interpreted.
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} semilogy (@var{args})
+## Make a two-dimensional plot using a log scale for the @var{y} axis.  See
+## the description of @code{plot} for a description of the arguments
+## that @code{semilogy} will accept.
+## @end deftypefn
+
 ## See also: plot, semilogx, loglog, polar, mesh, contour, bar, stairs,
 ##           gplot, gsplot, replot, xlabel, ylabel, title
 
 ## Author: jwe
 
 function semilogy (...)
 
   ## XXX FIXME XXX -- these plot states should really just be set
diff --git a/scripts/plot/stairs.m b/scripts/plot/stairs.m
--- a/scripts/plot/stairs.m
+++ b/scripts/plot/stairs.m
@@ -12,35 +12,42 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: [xs, ys] = stairs (x, y)
-##
-## Given two vectors of x-y data, stairs produces a `stairstep' plot.
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} stairs (@var{x}, @var{y})
+## Given two vectors of x-y data, bar produces a `stairstep' plot.
+## 
 ## If only one argument is given, it is taken as a vector of y-values
-## and the x coordiates are taken to be the indices of the elements.
-##
+## and the x coordinates are taken to be the indices of the elements.
+## 
 ## If two output arguments are specified, the data are generated but
 ## not plotted.  For example,
-##
-##   stairs (x, y);
-##
+## 
+## @example
+## stairs (x, y);
+## @end example
+## 
+## @noindent
 ## and
-##
-##   [xs, ys] = stairs (x, y);
-##   plot (xs, ys);
-##
+## 
+## @example
+## [xs, ys] = stairs (x, y);
+## plot (xs, ys);
+## @end example
+## 
+## @noindent
 ## are equivalent.
-##
+## @end deftypefn
+
 ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ##           bar, gplot, gsplot, replot, xlabel, ylabel, title
 
 ## Author: jwe
 
 function [xs, ys] = stairs (x, y)
 
 
diff --git a/scripts/plot/subplot.m b/scripts/plot/subplot.m
--- a/scripts/plot/subplot.m
+++ b/scripts/plot/subplot.m
@@ -12,51 +12,67 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: subplot (rows, columns, index)
-##        subplot (rcn)
-##
-## NOTE: this will work only with gnuplot installed with
-##       multiplot patch (or version 3.6 beta)
-##
-## Sets gnuplot in multiplot mode and plots in location
-## given by index (there are columns X rows subwindows)
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} subplot (@var{rows}, @var{cols}, @var{index})
+## @deftypefnx {Function File} {} subplot (@var{rcn})
+## Sets @code{gnuplot} in multiplot mode and plots in location
+## given by index (there are @var{cols} by @var{rows} subwindows).
+## 
 ## Input:
-##
-##   rows   : number of rows in subplot grid
-##   columns: number of columns in subplot grid
-##   index  : index of subplot where to make the next plot
-##
-## If only one arg, then it (crn) has to be three digit value
-## specifying the location in digit 1 (rows) and 2 (columns) and digit
-## 3 is the plot index
-##
-## The plot index runs row-wise,i.e., first all the columns in a row
-## are filled and then the next row is filled
-##
-## For example, plot with 4 X 2 grid, will have plot indices running as
+## 
+## @table @var
+## @item rows
+## Number of rows in subplot grid.
+## 
+## @item columns
+## Number of columns in subplot grid.
+## 
+## @item index
+## Index of subplot where to make the next plot.
+## @end table
+## 
+## If only one argument is supplied, then it must be a three digit value
+## specifying the location in digits 1 (rows) and 2 (columns) and the plot
+## index in digit 3.
+## 
+## The plot index runs row-wise.  First all the columns in a row are filled
+## and then the next row is filled.
+## 
+## For example, a plot with 4 by 2 grid will have plot indices running as
 ## follows:
-##
-##   -----------------------------------
-##   |        |       |       |        |
-##   |    1   |    2  |    3  |    4   |
-##   |        |       |       |        |
-##   -----------------------------------
-##   |        |       |       |        |
-##   |    5   |    6  |    7  |    8   |
-##   |        |       |       |        |
-##   -----------------------------------
-##
+## @iftex
+## @tex
+## \vskip 10pt
+## \hfil\vbox{\offinterlineskip\hrule
+## \halign{\vrule#&&\qquad\hfil#\hfil\qquad\vrule\cr
+## height13pt&1&2&3&4\cr height12pt&&&&\cr\noalign{\hrule}
+## height13pt&5&6&7&8\cr height12pt&&&&\cr\noalign{\hrule}}}
+## \hfil
+## \vskip 10pt
+## @end tex
+## @end iftex
+## @ifinfo
+## @display
+## @group
+## +-----+-----+-----+-----+
+## |  1  |  2  |  3  |  4  |
+## +-----+-----+-----+-----+
+## |  5  |  6  |  7  |  8  |
+## +-----+-----+-----+-----+
+## @end group
+## @end display
+## @end ifinfo
+## @end deftypefn
 
 ## Author: Vinayak Dutt <Dutt.Vinayak@mayo.EDU>
 ## Adapted-By: jwe
 
 function subplot (rows, columns, index)
 
   if (! gnuplot_has_multiplot)
     error ("subplot: gnuplot does not appear to support this feature");
diff --git a/scripts/plot/subwindow.m b/scripts/plot/subwindow.m
--- a/scripts/plot/subwindow.m
+++ b/scripts/plot/subwindow.m
@@ -12,24 +12,23 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: subwindow (xn, yn)
-##
-## NOTE: this will work only with gnuplot installed with
-##       multiplot patch
-##
-## Sets subwindow position in multiplot mode for next plot. The
-## multiplot mode has to be previously initialized using multiplot()
-## command, else this command just becomes an aliad to multiplot()
+## -*- texinfo -*-
+## @deftypefn {Function File} {} subwindow (@var{xn}, @var{yn})
+## Sets the subwindow position in multiplot mode for the next plot.  The
+## multiplot mode has to be previously initialized using the
+## @code{multiplot} function, otherwise this command just becomes an alias
+## to @code{multiplot}
+## @end deftypefn
 
 ## Author: Vinayak Dutt <Dutt.Vinayak@mayo.EDU>
 ## Created: 3 July 95
 ## Adapted-By: jwe
 
 function subwindow (xn, yn)
 
   if (! gnuplot_has_multiplot)
diff --git a/scripts/plot/title.m b/scripts/plot/title.m
--- a/scripts/plot/title.m
+++ b/scripts/plot/title.m
@@ -12,21 +12,22 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: title (text)
-##
-## Defines a title for a plot.  The title will appear the next time a
-## plot is displayed.
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} title (@var{string})
+## Specify a title for a plot.  If you already have a plot displayed, use
+## the command @code{replot} to redisplay it with the new title.
+## @end deftypefn
+
 ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel
 
 ## Author: jwe
 
 function title (text)
 
   if (nargin != 1)
diff --git a/scripts/plot/top_title.m b/scripts/plot/top_title.m
--- a/scripts/plot/top_title.m
+++ b/scripts/plot/top_title.m
@@ -12,22 +12,21 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: top_title (text)
-##
-## NOTE: this will work only with gnuplot installed with
-##       multiplot patch
-##
-## makes a title with text "text" at the top of the plot
+## -*- texinfo -*-
+## @deftypefn {Function File} {} top_title (@var{string})
+## @deftypefnx {Function File} {} bottom_title (@var{string})
+## Makes a title with text @var{string} at the top (bottom) of the plot.
+## @end deftypefn
 
 ## Author: Vinayak Dutt <Dutt.Vinayak@mayo.EDU>
 ## Created: 3 July 95
 ## Adapted-By: jwe
 
 function top_title (text)
 
   if (! gnuplot_has_multiplot)
diff --git a/scripts/plot/xlabel.m b/scripts/plot/xlabel.m
--- a/scripts/plot/xlabel.m
+++ b/scripts/plot/xlabel.m
@@ -12,21 +12,25 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: xlabel (text)
-##
-## Defines a label for the x-axis of a plot.  The label will appear the
-## next time a plot is displayed.
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} xlabel (@var{string})
+## @deftypefnx {Function File} {} ylabel (@var{string})
+## @deftypefnx {Function File} {} zlabel (@var{string})
+## Specify x, y, and z axis labels for the plot.  If you already have a plot
+## displayed, use the command @code{replot} to redisplay it with the new
+## labels.
+## @end deftypefn
+
 ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ##           bar, stairs, gplot, gsplot, replot, ylabel, title
 
 ## Author: jwe
 
 function xlabel (text)
 
   if (nargin != 1)
diff --git a/scripts/plot/ylabel.m b/scripts/plot/ylabel.m
--- a/scripts/plot/ylabel.m
+++ b/scripts/plot/ylabel.m
@@ -12,21 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: ylabel (text)
-##
-## Defines a label for the y-axis of a plot.  The label will appear the
-## next time a plot is displayed.
-##
+## See xlabel.
+
 ## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ##           bar, stairs, gplot, gsplot, replot, xlabel, title
 
 ## Author: jwe
 
 function ylabel (text)
 
   if (nargin != 1)
diff --git a/scripts/plot/zlabel.m b/scripts/plot/zlabel.m
--- a/scripts/plot/zlabel.m
+++ b/scripts/plot/zlabel.m
@@ -12,22 +12,20 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: zlabel (text)
-##
-## Defines a label for the z-axis of a plot.  The label will appear the
-## next time a plot is displayed.
-##
-## See other plotting commands also.
+## See xlabel.
+
+## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
+##           bar, stairs, gplot, gsplot, replot, xlabel, title
 
 ## Author: Vinayak Dutt <Dutt.Vinayak@mayo.EDU>
 ## Created: 3 July 95
 ## Adapted-By: jwe
 
 function zlabel (text)
 
   if (nargin != 1)
diff --git a/scripts/polynomial/compan.m b/scripts/polynomial/compan.m
--- a/scripts/polynomial/compan.m
+++ b/scripts/polynomial/compan.m
@@ -12,39 +12,52 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: compan (c)
-##
-## Compute the companion matrix corresponding to polynomial vector c.
-##
-## In octave a polynomial is represented by it's coefficients (arranged
-## in descending order). For example a vector c of length n+1 corresponds
-## to the following nth order polynomial
-##
-##   p(x) = c(1) x^n + ... + c(n) x + c(n+1).
-##
-## The corresponding companion matrix is
-##         _                                                        _
-##        |  -c(2)/c(1)   -c(3)/c(1)  ...  -c(n)/c(1)  -c(n+1)/c(1)  |
-##        |       1            0      ...       0             0      |
-##        |       0            1      ...       0             0      |
-##    A = |       .            .   .            .             .      |
-##        |       .            .       .        .             .      |
-##        |       .            .           .    .             .      |
-##        |_      0            0      ...       1             0     _|
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} compan (@var{c})
+## Compute the companion matrix corresponding to polynomial coefficient
+## vector @var{c}.
+## 
+## The companion matrix is
+## @iftex
+## @tex
+## $$
+## A = \left[\matrix{
+##  -c_2/c_1 & -c_3/c_1 & \cdots & -c_N/c_1 & -c_{N+1}/c_1\cr
+##      1    &     0    & \cdots &     0    &         0   \cr
+##      0    &     1    & \cdots &     0    &         0   \cr
+##   \vdots  &   \vdots & \ddots &  \vdots  &      \vdots \cr
+##      0    &     0    & \cdots &     1    &         0}\right].
+## $$
+## @end tex
+## @end iftex
+## @ifinfo
+## 
+## @smallexample
+##      _                                                        _
+##     |  -c(2)/c(1)   -c(3)/c(1)  ...  -c(N)/c(1)  -c(N+1)/c(1)  |
+##     |       1            0      ...       0             0      |
+##     |       0            1      ...       0             0      |
+## A = |       .            .   .            .             .      |
+##     |       .            .       .        .             .      |
+##     |       .            .           .    .             .      |
+##     |_      0            0      ...       1             0     _|
+## @end smallexample
+## @end ifinfo
+## 
 ## The eigenvalues of the companion matrix are equal to the roots of the
 ## polynomial.
-##
+## @end deftypefn
+
 ## SEE ALSO: poly, roots, residue, conv, deconv, polyval, polyderiv, polyinteg
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function A = compan (c)
 
diff --git a/scripts/polynomial/conv.m b/scripts/polynomial/conv.m
--- a/scripts/polynomial/conv.m
+++ b/scripts/polynomial/conv.m
@@ -12,26 +12,26 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: conv (a, b)
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} conv (@var{a}, @var{b})
 ## Convolve two vectors.
-##
-## y = conv (a, b) returns a vector of length equal to length (a) +
-## length (b) -1.
-##
-## If a and b are polynomial coefficient vectors, conv returns the
-## coefficients of the product polynomial.
-##
+## 
+## @code{y = conv (a, b)} returns a vector of length equal to
+## @code{length (a) + length (b) - 1}.
+## If @var{a} and @var{b} are polynomial coefficient vectors, @code{conv}
+## returns the coefficients of the product polynomial.
+## @end deftypefn
+
 ## SEE ALSO: deconv, poly, roots, residue, polyval, polyderiv, polyinteg
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function y = conv (a, b)
 
diff --git a/scripts/polynomial/deconv.m b/scripts/polynomial/deconv.m
--- a/scripts/polynomial/deconv.m
+++ b/scripts/polynomial/deconv.m
@@ -12,29 +12,29 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: deconv (y, a)
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} deconv (@var{y}, @var{a})
 ## Deconvolve two vectors.
-##
-## [b, r] = deconv (y, a) solves for b and r such that
-##    y = conv(a,b) + r
-##
-## If y and a are polynomial coefficient vectors, b will contain the
-## coefficients of the polynomial quotient and r will be a remander
-## polynomial of lowest order.
-##
-## SEE ALSO: conv, poly, roots, residue, polyval, polyderiv,
-## polyinteg
+## 
+## @code{[b, r] = deconv (y, a)} solves for @var{b} and @var{r} such that
+## @code{y = conv (a, b) + r}.
+## 
+## If @var{y} and @var{a} are polynomial coefficient vectors, @var{b} will
+## contain the coefficients of the polynomial quotient and @var{r} will be
+## a remander polynomial of lowest order.
+## @end deftypefn
+
+## SEE ALSO: conv, poly, roots, residue, polyval, polyderiv, polyinteg
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function [b, r] = deconv (y, a)
 
   if (nargin != 2)
diff --git a/scripts/polynomial/poly.m b/scripts/polynomial/poly.m
--- a/scripts/polynomial/poly.m
+++ b/scripts/polynomial/poly.m
@@ -12,24 +12,24 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: poly (x)
-##
-## If A is a square n-by-n matrix, poly (A) is the row vector of
-## the coefficients of det (z * eye(n) - A), the characteristic
-## polynomial of A.
-##
-## If x is a vector, poly (x) is a vector of coefficients of the
-## polynomial whose roots are the elements of x.
+## -*- texinfo -*-
+## @deftypefn {Function File} {} poly (@var{a})
+## If @var{a} is a square @var{N}-by-@var{N} matrix, @code{poly (@var{a})}
+## is the row vector of the coefficients of @code{det (z * eye (N) - a)},
+## the characteristic polynomial of @var{a}.  If @var{x} is a vector,
+## @code{poly (@var{x})} is a vector of coefficients of the polynomial
+## whose roots are the elements of @var{x}.
+## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@neuro.tuwien.ac.at>
 ## Created: 24 December 1993
 ## Adapted-By: jwe
 
 function y = poly (x)
 
   if (nargin != 1)
diff --git a/scripts/polynomial/polyderiv.m b/scripts/polynomial/polyderiv.m
--- a/scripts/polynomial/polyderiv.m
+++ b/scripts/polynomial/polyderiv.m
@@ -12,21 +12,22 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: polyderiv (p)
-##
-## Returns the coefficients of the derivative of the polynomial whose
-## coefficients are given by vector p.
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} polyderiv (@var{c})
+## Return the coefficients of the derivative of the polynomial whose
+## coefficients are given by vector @var{c}.
+## @end deftypefn
+
 ## SEE ALSO: poly, polyinteg, polyreduce, roots, conv, deconv, residue,
 ##           filter, polyval, polyvalm
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function q = polyderiv (p)
diff --git a/scripts/polynomial/polyfit.m b/scripts/polynomial/polyfit.m
--- a/scripts/polynomial/polyfit.m
+++ b/scripts/polynomial/polyfit.m
@@ -12,24 +12,35 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage:  [p, yf] = polyfit (x, y, n)
-##
-## Returns the coefficients of a polynomial p(x) of degree n that
-## minimizes sumsq (p(x(i)) - y(i)), i.e., that best fits the data
-## in the least squares sense.
-##
-## If two outputs are requested, also return the values of the
-## polynomial for each value of x.
+## -*- texinfo -*-
+## @deftypefn {Function File} {[@var{p}, @var{yf}] =} polyfit (@var{x}, @var{y}, @var{n})
+## Return the coefficients of a polynomial @var{p}(@var{x}) of degree
+## @var{n} that minimizes 
+## @iftex
+## @tex
+## $$
+## \sum_{i=1}^N (p(x_i) - y_i)^2
+## $$
+## @end tex
+## @end iftex
+## @ifinfo
+## @code{sumsq (p(x(i)) - y(i))},
+## @end ifinfo
+##  to best fit the data in the least squares sense.
+## 
+## If two output arguments are requested, the second contains the values of
+## the polynomial for each value of @var{x}.
+## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 13 December 1994
 ## Adapted-By: jwe
 
 function [p, yf] = polyfit (x, y, n)
 
 
diff --git a/scripts/polynomial/polyinteg.m b/scripts/polynomial/polyinteg.m
--- a/scripts/polynomial/polyinteg.m
+++ b/scripts/polynomial/polyinteg.m
@@ -12,23 +12,24 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: polyinteg (p)
-##
-## Returns the coefficients of the integral the polynomial whose coefficients
-## are represented by the vector p.
-##
-## The constant of integration is zero.
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} polyinteg (@var{c})
+## Return the coefficients of the integral of the polynomial whose
+## coefficients are represented by the vector @var{c}.
+## 
+## The constant of integration is set to zero.
+## @end deftypefn
+
 ## SEE ALSO: poly, polyderiv, polyreduce, roots, conv, deconv, residue,
 ##           filter, polyval, polyvalm
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function p = polyinteg (p)
diff --git a/scripts/polynomial/polyreduce.m b/scripts/polynomial/polyreduce.m
--- a/scripts/polynomial/polyreduce.m
+++ b/scripts/polynomial/polyreduce.m
@@ -12,21 +12,22 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: polyreduce(c)
-##
-## Reduces a polynomial coefficient vector to a minimum number of terms,
-## i.e. it strips off any leading zeros.
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} polyreduce (@var{c})
+## Reduces a polynomial coefficient vector to a minimum number of terms by
+## stripping off any leading zeros.
+## @end deftypefn
+
 ## SEE ALSO: poly, roots, conv, deconv, residue, filter, polyval, polyvalm,
 ##           polyderiv, polyinteg
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function p = polyreduce (p)
diff --git a/scripts/polynomial/polyval.m b/scripts/polynomial/polyval.m
--- a/scripts/polynomial/polyval.m
+++ b/scripts/polynomial/polyval.m
@@ -12,31 +12,27 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: polyval (c, x)
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} polyval (@var{c}, @var{x})
 ## Evaluate a polynomial.
-##
-## In octave, a polynomial is represented by it's coefficients (arranged
-## in descending order). For example a vector c of length n+1 corresponds
-## to the following nth order polynomial
-##
-##   p(x) = c(1) x^n + ... + c(n) x + c(n+1).
-##
-## polyval(c,x) will evaluate the polynomial at the specified value of x.
-##
-## If x is a vector or matrix, the polynomial is evaluated at each of the
-## elements of x.
-##
+## 
+## @code{polyval (@var{c}, @var{x})} will evaluate the polynomial at the
+## specified value of @var{x}.
+## 
+## If @var{x} is a vector or matrix, the polynomial is evaluated at each of
+## the elements of @var{x}.
+## @end deftypefn
+
 ## SEE ALSO: polyvalm, poly, roots, conv, deconv, residue, filter,
 ##           polyderiv, polyinteg
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function y = polyval (c, x)
diff --git a/scripts/polynomial/polyvalm.m b/scripts/polynomial/polyvalm.m
--- a/scripts/polynomial/polyvalm.m
+++ b/scripts/polynomial/polyvalm.m
@@ -12,32 +12,27 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: polyvalm (c, x)
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} polyvalm (@var{c}, @var{x})
 ## Evaluate a polynomial in the matrix sense.
-##
-## In octave, a polynomial is represented by it's coefficients (arranged
-## in descending order). For example a vector c of length n+1 corresponds
-## to the following nth order polynomial
-##
-##   p(x) = c(1) x^n + ... + c(n) x + c(n+1).
-##
-## polyvalm(c,X) will evaluate the polynomial in the matrix sense, i.e. matrix
-## multiplication is used instead of element by element multiplication as is
-## used in polyval.
-##
-## X must be a square matrix.
-##
+## 
+## @code{polyvalm (@var{c}, @var{x})} will evaluate the polynomial in the
+## matrix sense, i.e. matrix multiplication is used instead of element by
+## element multiplication as is used in polyval.
+## 
+## The argument @var{x} must be a square matrix.
+## @end deftypefn
+
 ## SEE ALSO: polyval, poly, roots, conv, deconv, residue, filter,
 ##           polyderiv, polyinteg
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function y = polyvalm (c, x)
diff --git a/scripts/polynomial/residue.m b/scripts/polynomial/residue.m
--- a/scripts/polynomial/residue.m
+++ b/scripts/polynomial/residue.m
@@ -12,59 +12,100 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: [r, p, k, e] = residue (b, a)
-##
-## If b and a are vectors of polynomial coefficients, then residue
-## calculates the partial fraction expansion corresponding to the
-## ratio of the two polynomials. The vector r contains the residue
-## terms, p contains the pole values, k contains the coefficients of
-## a direct polynomial term (if it exists) and e is a vector containing
-## the powers of the denominators in the partial fraction terms.
-## Assuming b and a represent polynomials P(s) and Q(s) we have:
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} residue (@var{b}, @var{a}, @var{tol})
+## If @var{b} and @var{a} are vectors of polynomial coefficients, then
+## residue calculates the partial fraction expansion corresponding to the
+## ratio of the two polynomials.
+## @cindex partial fraction expansion
+## 
+## The function @code{residue} returns @var{r}, @var{p}, @var{k}, and
+## @var{e}, where the vector @var{r} contains the residue terms, @var{p}
+## contains the pole values, @var{k} contains the coefficients of a direct
+## polynomial term (if it exists) and @var{e} is a vector containing the
+## powers of the denominators in the partial fraction terms.
+## 
+## Assuming @var{b} and @var{a} represent polynomials
+## @iftex
+## @tex
+## $P(s)$ and $Q(s)$
+## @end tex
+## @end iftex
+## @ifinfo
+##  P (s) and Q(s)
+## @end ifinfo
+##  we have:
+## @iftex
+## @tex
+## $$
+## {P(s)\over Q(s)} = \sum_{m=1}^M {r_m\over (s-p_m)^e_m}
+##   + \sum_{i=1}^N k_i s^{N-i}.
+## $$
+## @end tex
+## @end iftex
+## @ifinfo
+## 
+## @example
 ##  P(s)    M       r(m)         N
-##  ---- =  #  -------------  +  # k(n)*s^(N-n)
-##  Q(s)   m=1 (s-p(m))^e(m)    n=1
-##
-## (# represents summation) where M is the number of poles (the length of
-## the r, p, and e vectors) and N is the length of the k vector.
-##
-## [r p k e] = residue(b,a,tol)
-##
-## This form of the function call may be used to set a tolerance value.
-## The default value is 0.001. The tolerance value is used to determine
-## whether poles with small imaginary components are declared real. It is
-## also used to determine if two poles are distinct. If the ratio of the
-## imaginary part of a pole to the real part is less than tol, the
-## imaginary part is discarded. If two poles are farther apart than tol
-## they are distinct.
-##
-## Example:
-##  b = [1,  1, 1];
+##  ---- = SUM -------------  + SUM k(i)*s^(N-i)
+##  Q(s)   m=1 (s-p(m))^e(m)    i=1
+## @end example
+## @end ifinfo
+## 
+## @noindent
+## where @var{M} is the number of poles (the length of the @var{r},
+## @var{p}, and @var{e} vectors) and @var{N} is the length of the @var{k}
+## vector.
+## 
+## The argument @var{tol} is optional, and if not specified, a default
+## value of 0.001 is assumed.  The tolerance value is used to determine
+## whether poles with small imaginary components are declared real.  It is
+## also used to determine if two poles are distinct.  If the ratio of the
+## imaginary part of a pole to the real part is less than @var{tol}, the
+## imaginary part is discarded.  If two poles are farther apart than
+## @var{tol} they are distinct.  For example,
+## 
+## @example
+## @group
+##  b = [1, 1, 1];
 ##  a = [1, -5, 8, -4];
-##
-##  [r, p, k, e] = residue (b, a)
-##
-##  returns
-##
-##  r = [-2, 7, 3]; p = [2, 2, 1]; k = []; e = [1, 2, 1];
-##
-##  which implies the following partial fraction expansion
-##
-##        s^2 + s + 1         -2       7        3
+##  [r, p, k, e] = residue (b, a);
+##      @result{} r = [-2, 7, 3]
+##      @result{} p = [2, 2, 1]
+##      @result{} k = [](0x0)
+##      @result{} e = [1, 2, 1]
+## @end group
+## @end example
+## 
+## @noindent
+## which implies the following partial fraction expansion
+## @iftex
+## @tex
+## $$
+## {s^2+s+1\over s^3-5s^2+8s-4} = {-2\over s-2} + {7\over (s-2)^2} + {3\over s-1}
+## $$
+## @end tex
+## @end iftex
+## @ifinfo
+## 
+## @example
+##         s^2 + s + 1       -2        7        3
 ##    ------------------- = ----- + ------- + -----
 ##    s^3 - 5s^2 + 8s - 4   (s-2)   (s-2)^2   (s-1)
-##
+## @end example
+## @end ifinfo
+## @end deftypefn
+
 ## SEE ALSO: poly, roots, conv, deconv, polyval, polyderiv, polyinteg
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: June 1994
 ## Adapted-By: jwe
 
 function [r, p, k, e] = residue (b, a, toler)
 
diff --git a/scripts/polynomial/roots.m b/scripts/polynomial/roots.m
--- a/scripts/polynomial/roots.m
+++ b/scripts/polynomial/roots.m
@@ -12,20 +12,35 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: roots (v)
-##
-## For a vector v with n components, return the roots of the
-## polynomial v(1) * z^(n-1) + ... + v(n-1) * z + v(n).
+## -*- texinfo -*-
+## @deftypefn {Function File} {} roots (@var{v})
+## 
+## For a vector @var{v} with @var{N} components, return
+## the roots of the polynomial
+## @iftex
+## @tex
+## $$
+## v_1 z^{N-1} + \cdots + v_{N-1} z + v_N.
+## $$
+## @end tex
+## @end iftex
+## @ifinfo
+## 
+## @example
+## v(1) * z^(N-1) + ... + v(N-1) * z + v(N).
+## @end example
+## @end ifinfo
+## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 24 December 1993
 ## Adapted-By: jwe
 
 function r = roots (v)
 
   if (min (size (v)) > 1 || nargin != 1)
diff --git a/scripts/set/complement.m b/scripts/set/complement.m
--- a/scripts/set/complement.m
+++ b/scripts/set/complement.m
@@ -12,21 +12,30 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: complement (a, b)
-##
-## Returns the elements of set b that are not in set a.
-##
-## See - create_set, union, intersection
+## -*- texinfo -*-
+## @deftypefn {Function File} {} complement (@var{x}, @var{y})
+## Return the elements of set @var{y} that are not in set @var{x}.  For
+## example,
+## 
+## @example
+## @group
+## complement ([ 1, 2, 3 ], [ 2, 3, 5 ])
+##      @result{} 5
+## @end group
+## @end example
+## @end deftypefn
+
+## See also: create_set, union, intersection
 
 ## Author: jwe
 
 function y = complement (a, b)
 
   if (nargin != 2)
     usage ("complement(a,b)");
   endif
diff --git a/scripts/set/create_set.m b/scripts/set/create_set.m
--- a/scripts/set/create_set.m
+++ b/scripts/set/create_set.m
@@ -12,21 +12,30 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: create_set(x)
-##
-## Returns the unique elements of x, sorted in ascending order.
-##
-## See - union, intersection, complement
+## -*- texinfo -*-
+## @deftypefn {Function File} {} create_set (@var{x})
+## Return a row vector containing the unique values in @var{x}, sorted in
+## ascending order.  For example,
+## 
+## @example
+## @group
+## create_set ([ 1, 2; 3, 4; 4, 2 ])
+##      @result{} [ 1, 2, 3, 4 ]
+## @end group
+## @end example
+## @end deftypefn
+
+## See also: union, intersection, complement
 
 ## Author: jwe
 
 function y = create_set(x)
 
   if ( nargin != 1)
     usage ("create_set(x)");
   endif
diff --git a/scripts/set/intersection.m b/scripts/set/intersection.m
--- a/scripts/set/intersection.m
+++ b/scripts/set/intersection.m
@@ -12,21 +12,30 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: intersection(a,b)
-##
-## Returns the intersection of sets a and b.
-##
-## See - create_set, union, complement
+## -*- texinfo -*-
+## @deftypefn {Function File} {} intersection (@var{x}, @var{y})
+## Return the set of elements that are in both sets @var{x} and @var{y}.
+## For example,
+## 
+## @example
+## @group
+## intersection ([ 1, 2, 3 ], [ 2, 3, 5 ])
+##      @result{} [ 2, 3 ]
+## @end group
+## @end example
+## @end deftypefn
+
+## See also: create_set, union, complement
 
 ## Author: jwe
 
 function y = intersection(a,b)
 
   if (nargin != 2)
     usage ("intersection(a,b)");
   endif
diff --git a/scripts/set/union.m b/scripts/set/union.m
--- a/scripts/set/union.m
+++ b/scripts/set/union.m
@@ -12,21 +12,30 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: union(a,b)
-##
-## Returns the union of sets a and b.
-##
-## See - create_set, intersection, complement
+## -*- texinfo -*-
+## @deftypefn {Function File} {} union (@var{x}, @var{y})
+## Return the set of elements that are in either of the sets @var{x} and
+## @var{y}.  For example,
+## 
+## @example
+## @group
+## union ([ 1, 2, 4 ], [ 2, 3, 5 ])
+##      @result{} [ 1, 2, 3, 4, 5 ]
+## @end group
+## @end example
+## @end deftypefn
+
+## See also: create_set, intersection, complement
 
 ## Author: jwe
 
 function y = union(a,b)
 
   if (nargin != 2)
     usage ("union(a,b)");
   endif
diff --git a/scripts/statistics/base/gls.m b/scripts/statistics/base/gls.m
--- a/scripts/statistics/base/gls.m
+++ b/scripts/statistics/base/gls.m
@@ -12,31 +12,61 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: [BETA, v [,R]] = gls (Y, X, O)
-##
-## Generalized Least Squares (GLS) estimation for the multivariate model
-##
-##   Y = X*B + E,  mean(E) = 0,  cov(vec(E)) = (s^2)*O
-##
-## with Y ...  T x p      As usual, each row of Y and X is an observation
-##      X ...  T x k      and each column a variable.
-##      B ...  k x p
-##      E ...  T x p
-##      O ... Tp x Tp.
-##
-## BETA is the GLS estimator for B.
-## v is the GLS estimator for s^2.
-## R = Y - X*BETA is the matrix of GLS residuals.
+## @deftypefn {Function File} {[@var{beta}, @var{v}, @var{r}] =} gls (@var{y}, @var{x}, @var{o})
+## Generalized least squares estimation for the multivariate model
+## @iftex
+## @tex
+## $y = x b + e$
+## with $\bar{e} = 0$ and cov(vec($e$)) = $(s^2)o$,
+## @end tex
+## @end iftex
+## @ifinfo
+## @code{@var{y} = @var{x} * @var{b} + @var{e}} with @code{mean (@var{e}) =
+## 0} and @code{cov (vec (@var{e})) = (@var{s}^2)*@var{o}},
+## @end ifinfo
+##  where
+## @iftex
+## @tex 
+## $y$ is a $t \times p$ matrix, $x$ is a $t \times k$ matrix, $b$ is a $k
+## \times p$ matrix, $e$ is a $t \times p$ matrix, and $o$ is a $tp \times
+## tp$ matrix.
+## @end tex
+## @end iftex
+## @ifinfo
+## @var{Y} is a @var{T} by @var{p} matrix, @var{X} is a @var{T} by @var{k}
+## matrix, @var{B} is a @var{k} by @var{p} matrix, @var{E} is a @var{T} by
+## @var{p} matrix, and @var{O} is a @var{T}@var{p} by @var{T}@var{p}
+## matrix.
+## @end ifinfo
+## 
+## @noindent
+## Each row of Y and X is an observation and each column a variable.
+## 
+## The return values @var{beta}, @var{v}, and @var{r} are defined as
+## follows.
+## 
+## @table @var
+## @item beta
+## The GLS estimator for @var{b}.
+## 
+## @item v
+## The GLS estimator for @code{@var{s}^2}.
+## 
+## @item r
+## The matrix of GLS residuals, @code{@var{r} = @var{y} - @var{x} *
+## @var{beta}}.
+## @end table
+## @end deftypefn
 
 ## Author: Teresa Twaroch <twaroch@ci.tuwien.ac.at>
 ## Created: May 1993
 ## Adapted-By: jwe
 
 function [BETA, v, R] = gls (Y, X, O)
 
   if (nargin != 3)
diff --git a/scripts/statistics/base/ols.m b/scripts/statistics/base/ols.m
--- a/scripts/statistics/base/ols.m
+++ b/scripts/statistics/base/ols.m
@@ -12,37 +12,72 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: [BETA, SIGMA [, R]] = ols (Y, X)
-##
-## Ordinary Least Squares (OLS) estimation for the multivariate model
-##
-##     Y = X*B + E,  mean(E) = 0,  cov(vec(E)) = kron(S,I)
-##
-## with Y ... T x p     As usual, each row of Y and X is an observation
-##      X ... T x k     and each column a variable.
-##      B ... k x p
-##      E ... T x p.
-##
-## BETA is the OLS estimator for B, i.e.
-##
-##   BETA = pinv(X)*Y,
-##
-## where pinv(X) denotes the pseudoinverse of X.
-## SIGMA is the OLS estimator for the matrix S, i.e.
-##
-##   SIGMA = (Y - X*BETA)'*(Y - X*BETA) / (T - rank(X)).
-##
-## R = Y - X*BETA is the matrix of OLS residuals.
+##  -*- texinfo -*-
+## @deftypefn {Function File} {[@var{beta}, @var{sigma}, @var{r}] =} ols (@var{y}, @var{x})
+## Ordinary least squares estimation for the multivariate model
+## @iftex
+## @tex
+## $y = x b + e$
+## with
+## $\bar{e} = 0$, and cov(vec($e$)) = kron ($s, I$)
+## @end tex
+## @end iftex
+## @ifinfo
+## @code{@var{y} = @var{x}*@var{b} + @var{e}} with
+## @code{mean (@var{e}) = 0} and @code{cov (vec (@var{e})) = kron (@var{s},
+## @var{I})}.
+## @end ifinfo
+##  where
+## @iftex
+## @tex
+## $y$ is a $t \times p$ matrix, $x$ is a $t \times k$ matrix, 
+## $b$ is a $k \times p$ matrix, and $e$ is a $t \times p$ matrix.
+## @end tex
+## @end iftex
+## @ifinfo
+## @var{y} is a @var{t} by @var{p} matrix, @var{X} is a @var{t} by @var{k}
+## matrix, @var{B} is a @var{k} by @var{p} matrix, and @var{e} is a @var{t}
+## by @var{p} matrix.
+## @end ifinfo
+## 
+## Each row of @var{y} and @var{x} is an observation and each column a
+## variable.
+## 
+## The return values @var{beta}, @var{sigma}, and @var{r} are defined as
+## follows.
+## 
+## @table @var
+## @item beta
+## The OLS estimator for @var{b}, @code{@var{beta} = pinv (@var{x}) *
+## @var{y}}, where @code{pinv (@var{x})} denotes the pseudoinverse of
+## @var{x}.
+## 
+## @item sigma
+## The OLS estimator for the matrix @var{s},
+## 
+## @example
+## @group
+## @var{sigma} = (@var{y}-@var{x}*@var{beta})'
+##   * (@var{y}-@var{x}*@var{beta})
+##   / (@var{t}-rank(@var{x}))
+## @end group
+## @end example
+## 
+## @item r
+## The matrix of OLS residuals, @code{@var{r} = @var{y} - @var{x} *
+## @var{beta}}.
+## @end table
+## @end deftypefn
 
 ## Author: Teresa Twaroch <twaroch@ci.tuwien.ac.at>
 ## Created: May 1993
 ## Adapted-By: jwe
 
 function [BETA, SIGMA, R] = ols (Y, X)
 
   if (nargin != 2)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,15 +1,22 @@
 1999-11-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
-	* DLD-FUNCTIONS/fft.cc: Texinfoize doc string.
-	* DLD-FUNCTIONS/ifft.cc: Ditto.
-	* DLD-FUNCTIONS/fft2.cc: Ditto.
-	* DLD-FUNCTIONS/ifft2.cc: Ditto.
-	* DLD-FUNCTIONS/filter.cc: Ditto.
+	* DLD-FUNCTIONS/fft.cc (Ffft): Texinfoize doc string.
+	* DLD-FUNCTIONS/ifft.cc (Fifft): Ditto.
+	* DLD-FUNCTIONS/fft2.cc (Ffft2): Ditto.
+	* DLD-FUNCTIONS/ifft2.cc (Fifft2): Ditto.
+	* DLD-FUNCTIONS/filter.cc (Ffilter): Ditto.
+	* DLD-FUNCTIONS/quad.cc (Fquad, Fquad_options): Ditto.
+	* DLD-FUNCTIONS/colloc.cc (Fcolloc): Ditto.
+	* DLD-FUNCTIONS/fsolve.cc (Ffsolve, Ffsolve_options): Ditto.
+	* defaults.cc (Veditor): Ditto.
+	* pt-plot.cc (Vautomatic_replot, Vgnuplot_binary,
+	Vgnuplot_has_frames, Vgnuplot_has_multiplot, Fclearplot,
+	Fcloseplot, Fpurge_tmp_files, Fishold, Fhold): 
 
 	* Makefile.in (parse.cc): Expect 11 shift/reduce conflicts now.
 
 1999-11-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* parse.y (Vwarn_assign_as_truth_value,	Vwarn_variable_switch_label):
 	Texinfoize doc strings.
 
diff --git a/src/DLD-FUNCTIONS/colloc.cc b/src/DLD-FUNCTIONS/colloc.cc
--- a/src/DLD-FUNCTIONS/colloc.cc
+++ b/src/DLD-FUNCTIONS/colloc.cc
@@ -30,17 +30,23 @@ Software Foundation, 59 Temple Place - S
 #include "lo-mappers.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 DEFUN_DLD (colloc, args, ,
-  "[R, A, B, Q] = colloc (N [, \"left\"] [, \"right\"]): collocation weights")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {[@var{r}, @var{A}, @var{B}, @var{q}] =} colloc (@var{n}, \"left\", \"right\")\n\
+Compute derivative and integral weight matrices for orthogonal\n\
+collocation using the subroutines given in J. Villadsen and\n\
+M. L. Michelsen, @cite{Solution of Differential Equation Models by\n\
+Polynomial Approximation}.\n\
+@end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 3)
     {
       print_usage ("colloc");
diff --git a/src/DLD-FUNCTIONS/fsolve.cc b/src/DLD-FUNCTIONS/fsolve.cc
--- a/src/DLD-FUNCTIONS/fsolve.cc
+++ b/src/DLD-FUNCTIONS/fsolve.cc
@@ -144,26 +144,22 @@ fsolve_user_function (const ColumnVector
   do \
     { \
       ::error ("fsolve: " ## fmt, arg); \
       FSOLVE_ABORT (); \
     } \
   while (0)
 
 DEFUN_DLD (fsolve, args, nargout,
-  "Solve nonlinear equations using Minpack.  Usage:\n\
-\n\
-  [X, INFO] = fsolve (F, X0)\n\
-\n\
-Where the first argument is the name of the  function to call to\n\
-compute the vector of function values.  It must have the form\n\
-\n\
-  y = f (x)\n\
-\n\
-where y and x are vectors.")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {[@var{x}, @var{info}] =} fsolve (@var{fcn}, @var{x0})\n\
+Given @var{fcn}, the name of a function of the form @code{f (@var{x})}\n\
+and an initial starting point @var{x0}, @code{fsolve} solves the set of\n\
+equations such that @code{f(@var{x}) == 0}.\n\
+@end deftypefn")
 {
   octave_value_list retval;
 
   unwind_protect::begin_frame ("Ffsolve");
 
   unwind_protect_int (call_depth);
   call_depth++;
 
@@ -317,20 +313,24 @@ show_fsolve_option (const string& keywor
     }
 
   warning ("fsolve_options: no match for `%s'", keyword.c_str ());
 
   return retval;
 }
 
 DEFUN_DLD (fsolve_options, args, ,
-  "fsolve_options (KEYWORD, VALUE)\n\
-\n\
-Set or show options for fsolve.  Keywords may be abbreviated\n\
-to the shortest match.")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} fsolve_options (@var{opt}, @var{val})\n\
+When called with two arguments, this function allows you set options\n\
+parameters for the function @code{fsolve}.  Given one argument,\n\
+@code{fsolve_options} returns the value of the corresponding option.  If\n\
+no arguments are supplied, the names of all the available options and\n\
+their current values are displayed.\n\
+@end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       print_fsolve_option_list (octave_stdout);
diff --git a/src/DLD-FUNCTIONS/quad.cc b/src/DLD-FUNCTIONS/quad.cc
--- a/src/DLD-FUNCTIONS/quad.cc
+++ b/src/DLD-FUNCTIONS/quad.cc
@@ -112,35 +112,48 @@ quad_user_function (double x)
   do \
     { \
       ::error ("quad: " ## fmt, arg); \
       QUAD_ABORT (); \
     } \
   while (0)
 
 DEFUN_DLD (quad, args, nargout,
-  "[V, IER, NFUN] = quad (F, A, B [, TOL] [, SING])\n\
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {[@var{v}, @var{ier}, @var{nfun}, @var{err}] =} quad (@var{f}, @var{a}, @var{b}, @var{tol}, @var{sing})\n\
+Integrate a nonlinear function of one variable using Quadpack.\n\
+The first argument is the name of the  function to call to compute the\n\
+value of the integrand.  It must have the form\n\
 \n\
-Where the first argument is the name of the  function to call to\n\
-compute the value of the integrand.  It must have the form\n\
+@example\n\
+y = f (x)\n\
+@end example\n\
 \n\
-  y = f (x)\n\
-\n\
-where y and x are scalars.\n\
+@noindent\n\
+where @var{y} and @var{x} are scalars.\n\
 \n\
 The second and third arguments are limits of integration.  Either or\n\
 both may be infinite.\n\
 \n\
-The optional argument tol is a vector that specifies the desired\n\
+The optional argument @var{tol} is a vector that specifies the desired\n\
 accuracy of the result.  The first element of the vector is the desired\n\
 absolute tolerance, and the second element is the desired relative\n\
-tolerance.\n\
+tolerance.  To choose a relative test only, set the absolute\n\
+tolerance to zero.  To choose an absolute test only, set the relative\n\
+tolerance to zero. \n\
 \n\
 The optional argument @var{sing} is a vector of values at which the\n\
-integrand is singular.")
+integrand is known to be singular.\n\
+\n\
+The result of the integration is returned in @var{v} and @var{ier}\n\
+contains an integer error code (0 indicates a successful integration).\n\
+The value of @var{nfun} indicates how many function evaluations were\n\
+required, and @var{err} contains an estimate of the error in the\n\
+solution.\n\
+@end deftypefn")
 {
   octave_value_list retval;
 
   unwind_protect::begin_frame ("Fquad");
 
   unwind_protect_int (call_depth);
   call_depth++;
 
@@ -374,20 +387,24 @@ show_quad_option (const string& keyword)
     }
 
   warning ("quad_options: no match for `%s'", keyword.c_str ());
 
   return retval;
 }
 
 DEFUN_DLD (quad_options, args, ,
-  "quad_options (KEYWORD, VALUE)\n\
-\n\
-Set or show options for quad.  Keywords may be abbreviated\n\
-to the shortest match.")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} quad_options (@var{opt}, @var{val})\n\
+When called with two arguments, this function allows you set options\n\
+parameters for the function @code{quad}.  Given one argument,\n\
+@code{quad_options} returns the value of the corresponding option.  If\n\
+no arguments are supplied, the names of all the available options and\n\
+their current values are displayed.\n\
+@end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       print_quad_option_list (octave_stdout);
diff --git a/src/defaults.cc b/src/defaults.cc
--- a/src/defaults.cc
+++ b/src/defaults.cc
@@ -411,17 +411,23 @@ loadpath (void)
 
   return status;
 }
 
 void
 symbols_of_defaults (void)
 {
   DEFVAR (EDITOR, Veditor, editor,
-    "name of the editor to be invoked by the edit_history command");
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} EDITOR\n\
+A string naming the editor to use with the @code{edit_history} command.\n\
+If the environment variable @code{EDITOR} is set when Octave starts, its\n\
+value is used as the default.  Otherwise, @code{EDITOR} is set to\n\
+@code{\"emacs\"}.\n\
+@end defvr");
 
   DEFVAR (EXEC_PATH, Vexec_path, exec_path,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} EXEC_PATH\n\
 The variable @code{EXEC_PATH} is a colon separated list of directories\n\
 to search when executing subprograms.  Its initial value is taken from\n\
 the environment variable @code{OCTAVE_EXEC_PATH} (if it exists) or\n\
 @code{PATH}, but that value can be overridden by the command line\n\
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -555,17 +555,17 @@ are left unchanged.  For example,\n\
 @example\n\
 tolower (\"MiXeD cAsE 123\")\n\
      @result{} \"mixed case 123\"\n\
 @end example\n\
 @end deftypefn");
 
   DEFUN_MAPPER (toupper, xtoupper, 0, 0, 0, 0, 0, 0.0, 0.0, 2,
     "-*- texinfo -*-\n\
-@deftypefn {Function File} {} toupper (@var{s})\n\
+@deftypefn {Built-in Function} {} toupper (@var{s})\n\
 Return a copy of the string @var{s}, with each  lower-case character\n\
 replaced by the corresponding upper-case one; nonalphabetic characters\n\
 are left unchanged.  For example,\n\
 \n\
 @example\n\
 @group\n\
 toupper (\"MiXeD cAsE 123\")
      @result{} \"MIXED CASE 123\"\n\
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -932,17 +932,28 @@ do_external_plotter_cd (const string& ne
       plot_buf << "cd \"" << newdir << "\"" << Vgnuplot_command_end << ends;
       char *message = plot_buf.str ();
       send_to_plot_stream (message);
       delete [] message;
     }
 }
 
 DEFUN (clearplot, , ,
-  "clearplot (): clear the plot window")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} clearplot\n\
+@deftypefnx {Built-in Function} {} clg\n\
+Clear the plot window and any titles or axis labels.  The name\n\
+@code{clg} is aliased to @code{clearplot} for compatibility with\n\
+@sc{Matlab}.\n\
+\n\
+The commands @kbd{gplot clear}, @kbd{gsplot clear}, and @kbd{replot\n\
+clear} are equivalent to @code{clearplot}.  (Previously, commands like\n\
+@kbd{gplot clear} would evaluate @code{clear} as an ordinary expression\n\
+and clear all the visible variables.)\n\
+@end deftypefn")
 {
   octave_value_list retval;
   send_to_plot_stream ("clear\n");
 
   // XXX FIXME XXX -- instead of just clearing these things, it would
   // be nice if we could reset things to a user-specified default
   // state.
 
@@ -958,28 +969,44 @@ DEFUN (clearplot, , ,
   plot_line_count = 0;
 
   return retval;
 }
 
 DEFALIAS (clg, clearplot);
 
 DEFUN (closeplot, , ,
-  "closeplot (): close the stream to plotter")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} closeplot\n\
+Close stream to the @code{gnuplot} subprocess.  If you are using X11,\n\
+this will close the plot window.\n\
+@end deftypefn")
 {
   octave_value_list retval;
   close_plot_stream ();
   return retval;
 }
 
 DEFUN_TEXT (hold, args, ,
-  "hold [on|off]\n\
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} hold @var{args}\n\
+Tell Octave to `hold' the current data on the plot when executing\n\
+subsequent plotting commands.  This allows you to execute a series of\n\
+plot commands and have all the lines end up on the same figure.  The\n\
+default is for each new plot command to clear the plot device first.\n\
+For example, the command\n\
 \n\
-determine whether the plot window is cleared before the next line is\n\
-drawn.  With no argument, toggle the current state.") 
+@example\n\
+hold on\n\
+@end example\n\
+\n\
+@noindent\n\
+turns the hold state on.  An argument of @code{off} turns the hold state\n\
+off, and @code{hold} with no arguments toggles the current hold state.\n\
+@end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("hold");
 
   if (error_state)
@@ -1004,25 +1031,38 @@ drawn.  With no argument, toggle the cur
       print_usage ("hold");
       break;
     }
 
   return retval;
 }
 
 DEFUN (ishold, , ,
-  "ishold\n\
-\n\
-Return 1 if hold is on, otherwise return 0.")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} ishold\n\
+Return 1 if the next line will be added to the current plot, or 0 if\n\
+the plot device will be cleared before drawing the next line.\n\
+@end deftypefn")
 {
   return static_cast<double> (! clear_before_plotting);
 }
 
 DEFUN (purge_tmp_files, , ,
-  "delete temporary data files used for plotting")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} purge_tmp_files\n\
+Delete the temporary files created by the plotting commands.\n\
+\n\
+Octave creates temporary data files for @code{gnuplot} and then sends\n\
+commands to @code{gnuplot} through a pipe.  Octave will delete the\n\
+temporary files on exit, but if you are doing a lot of plotting you may\n\
+want to clean up in the middle of a session.\n\
+\n\
+A future version of Octave will eliminate the need to use temporary\n\
+files to hold the plot data.\n\
+@end deftypefn")
 {
   octave_value_list retval;
   cleanup_tmp_files ();
   return retval;
 }
 
 
 DEFUN (graw, args, ,
@@ -1236,20 +1276,30 @@ gnuplot_has_multiplot (void)
 
   return 0;
 }
 
 void
 symbols_of_pt_plot (void)
 {
   DEFVAR (automatic_replot, 0.0, automatic_replot,
-    "if true, auto-insert a replot command when a plot changes");
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} automatic_replot\n\
+You can tell Octave to redisplay the plot each time anything about it\n\
+changes by setting the value of the builtin variable\n\
+@code{automatic_replot} to a nonzero value.  Since this is fairly\n\
+inefficient, the default value is 0.\n\
+@end defvr");
 
   DEFVAR (gnuplot_binary, "gnuplot", gnuplot_binary,
-    "path to gnuplot binary");
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} gnuplot_binary\n\
+The name of the program invoked by the plot command.  The default value\n\
+is @code{\"gnuplot\"}.  @xref{Installation}.\n\
+@end defvr");
 
   DEFVAR (gnuplot_command_plot, "pl", gnuplot_command_plot,
     "");
 
   DEFVAR (gnuplot_command_replot, "rep", gnuplot_command_replot,
     "");
 
   DEFVAR (gnuplot_command_splot, "sp", gnuplot_command_splot,
@@ -1272,25 +1322,40 @@ symbols_of_pt_plot (void)
 
 #ifdef GNUPLOT_HAS_FRAMES
   double with_frames = 1.0;
 #else
   double with_frames = 0.0;
 #endif
 
   DEFVAR (gnuplot_has_frames, with_frames, gnuplot_has_frames,
-    "true if gnuplot supports multiple plot windows on X11, false otherwise");
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} gnuplot_has_frames\n\
+If the value of this variable is nonzero, Octave assumes that your copy\n\
+of gnuplot has support for multiple frames that is included in recent\n\
+3.6beta releases.  It's initial value is determined by configure, but it\n\
+can be changed in your startup script or at the command line in case\n\
+configure got it wrong, or if you upgrade your gnuplot installation.\n\
+@end defvr");
 
 #ifdef GNUPLOT_HAS_MULTIPLOT
   double with_multiplot = 1.0;
 #else
   double with_multiplot = 0.0;
 #endif
 
   DEFVAR (gnuplot_has_multiplot, with_multiplot, gnuplot_has_multiplot,
-    "true if gnuplot supports multiplot, false otherwise");
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} gnuplot_has_multiplot\n\
+If the value of this variable is nonzero, Octave assumes that your copy\n\
+of gnuplot has the multiplot support that is included in recent\n\
+3.6beta releases.  It's initial value is determined by configure, but it\n\
+can be changed in your startup script or at the command line in case\n\
+configure got it wrong, or if you upgrade your gnuplot installation.\n\
+@end defvr");
+
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
