# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1483606528 -3600
#      Thu Jan 05 09:55:28 2017 +0100
# Node ID 5dca1727ce94e11602eb8d58e81a0d60c215a9bf
# Parent  27e4ec3b0b49e228bf0c239d72e31e95c8e68de4
cla.m, newplot.m: make use of reset function to cleanup listeners (bug #49980).

* graphics.cc (base_graphics_object::reset_default_properties,
               root_figure::reset_default_properties,
               figure::reset_default_properties,
               axes::reset_default_properties,
               uitoolbar::reset_default_properties): call remove_all_listeners.
* graphics.cc (__go_axes_init__): Delete function.
* graphics.cc (axes::properties::set_defaults): Add FIXME note and assert
statement to check that mode is always "reset".

* cla.m: for "reset" option, make use of reset function instead of
__go_axis_init__.

* newplot.m: make use of reset function instead of __go_axis_init__.  Don't
reset just created figure/axes.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -3306,16 +3306,17 @@ base_graphics_object::reset_default_prop
       property_list::pval_map_type factory_pval =
         gh_manager::get_object (0).get_factory_defaults_list ()
         .find (type ())->second;
 
       // save warning state of "Octave:deprecated-property"
       int old_dep_prop = warning_enabled ("Octave:deprecated-property");
       disable_warning ("Octave:deprecated-property");
 
+      remove_all_listeners ();
       xreset_default_properties (get_handle (), factory_pval);
 
       // re-enable warning state of "Octave:deprecated-property"
       if (old_dep_prop == 1)
         set_warning_state ("Octave:deprecated-property", "on");
       else if (old_dep_prop == 2)
         set_warning_state ("Octave:deprecated-property", "error");
 
@@ -3628,16 +3629,17 @@ property_list
 root_figure::factory_properties = root_figure::init_factory_properties ();
 
 void
 root_figure::reset_default_properties (void)
 {
   // empty list of local defaults
   default_properties = property_list ();
 
+  remove_all_listeners ();
   xreset_default_properties (get_handle (),
                              xproperties.factory_defaults ());
 }
 
 // ---------------------------------------------------------------------
 
 void
 figure::properties::set_currentaxes (const octave_value& val)
@@ -4498,16 +4500,17 @@ figure::reset_default_properties (void)
   property_list::pval_map_type plist = xproperties.factory_defaults ();
   plist.erase ("units");
   plist.erase ("position");
   plist.erase ("outerposition");
   plist.erase ("paperunits");
   plist.erase ("paperposition");
   plist.erase ("windowstyle");
 
+  remove_all_listeners ();
   xreset_default_properties (get_handle (), plist);
 }
 
 // ---------------------------------------------------------------------
 
 void
 axes::properties::init (void)
 {
@@ -4866,16 +4869,23 @@ axes::properties::set_title (const octav
 
 void
 axes::properties::set_defaults (base_graphics_object& bgo,
                                 const std::string& mode)
 {
   // FIXME: Should this have all properties in it?
   // Including ones we do don't implement?
 
+  // FIXME: This function is probably never called without mode == "reset"
+  //        Check that this is the case with an assert statement (1/6/2017).
+  //        If there are reports of problems then figure out what code is
+  //        calling it with the mode set to something else.  Otherwise,
+  //        delete branches of the code in this function that depend on mode.
+  assert (mode == "reset");
+
   Matrix tlim (1, 2, 0.0);
   tlim(1) = 1;
   alim = tlim;
   xlim = tlim;
   ylim = tlim;
   zlim = tlim;
 
   alimmode = "auto";
@@ -5088,18 +5098,18 @@ axes::properties::set_defaults (base_gra
   xset (zlabel.handle_value (), "clipping", "off");
   xset (title.handle_value (), "clipping", "off");
 
   xset (xlabel.handle_value (), "__autopos_tag__", "xlabel");
   xset (ylabel.handle_value (), "__autopos_tag__", "ylabel");
   xset (zlabel.handle_value (), "__autopos_tag__", "zlabel");
   xset (title.handle_value (), "__autopos_tag__", "title");
 
-  double fs = labelfontsizemultiplier.double_value () * 
-    fontsize.double_value ();
+  double fs;
+  fs = labelfontsizemultiplier.double_value () * fontsize.double_value ();
   xset (xlabel.handle_value (), "fontsize", octave_value (fs));
   xset (ylabel.handle_value (), "fontsize", octave_value (fs));
   xset (zlabel.handle_value (), "fontsize", octave_value (fs));
   fs = titlefontsizemultiplier.double_value () * fontsize.double_value ();
   xset (title.handle_value (), "fontsize", octave_value (fs));
   xset (title.handle_value (), "fontweight", titlefontweight.get ());
 
   update_transform ();
@@ -8044,16 +8054,17 @@ axes::properties::clear_zoom_stack (bool
 
 void
 axes::reset_default_properties (void)
 {
   // empty list of local defaults
   default_properties = property_list ();
 
   // reset factory defaults
+  remove_all_listeners ();
   set_defaults ("reset");
 }
 
 void
 axes::initialize (const graphics_object& go)
 {
   base_graphics_object::initialize (go);
 
@@ -9330,16 +9341,17 @@ uitoolbar::get_default (const caseless_s
 }
 
 void
 uitoolbar::reset_default_properties (void)
 {
   // empty list of local defaults
   default_properties = property_list ();
 
+  remove_all_listeners ();
   xreset_default_properties (get_handle (), xproperties.factory_defaults ());
 }
 
 // ---------------------------------------------------------------------
 
 octave_value
 base_graphics_object::get_default (const caseless_str& pname) const
 {
@@ -10873,53 +10885,16 @@ Undocumented internal function.
         error ("delete: invalid graphics object (= %g)", vals(i));
     }
 
   delete_graphics_objects (vals);
 
   return ovl ();
 }
 
-DEFUN (__go_axes_init__, args, ,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {} __go_axes_init__ (@var{h}, @var{mode})
-Undocumented internal function.
-@end deftypefn */)
-{
-  gh_manager::auto_lock guard;
-
-  int nargin = args.length ();
-
-  if (nargin < 1 || nargin > 2)
-    print_usage ();
-
-  std::string mode;
-  if (nargin == 2)
-    mode = args(1).string_value ();
-
-  graphics_handle h = octave::numeric_limits<double>::NaN ();
-
-  double val = args(0).xdouble_value ("__go_axes_init__: invalid graphics object");
-
-  h = gh_manager::lookup (val);
-
-  if (! h.ok ())
-    error ("__go_axes_init__: invalid graphics object (= %g)", val);
-
-  graphics_object go = gh_manager::get_object (h);
-
-  go.set_defaults (mode);
-
-  h = gh_manager::lookup (val);
-  if (! h.ok ())
-    error ("__go_axes_init__: axis deleted during initialization (= %g)", val);
-
-  return ovl ();
-}
-
 DEFUN (__go_handles__, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} __go_handles__ (@var{show_hidden})
 Undocumented internal function.
 @end deftypefn */)
 {
   gh_manager::auto_lock guard;
 
diff --git a/scripts/plot/util/cla.m b/scripts/plot/util/cla.m
--- a/scripts/plot/util/cla.m
+++ b/scripts/plot/util/cla.m
@@ -64,18 +64,18 @@ function cla (varargin)
     else
       print_usage ();
     endif
   endif
 
   if (! do_reset)
     delete (get (hax, "children"));
   else
-    __go_axes_init__ (hax, "replace");
-    __request_drawnow__ ();
+    delete (allchild (hax));
+    reset (hax);
   endif
 
 endfunction
 
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
diff --git a/scripts/plot/util/newplot.m b/scripts/plot/util/newplot.m
--- a/scripts/plot/util/newplot.m
+++ b/scripts/plot/util/newplot.m
@@ -104,19 +104,24 @@ function hax = newplot (hsave = [])
       cf = ancestor (hsave, "figure", "toplevel");
       if (iscell (cf))
         cf = [cf{:}];
       endif
       cf = cf(find (cf, 1));
     endif
   endif
 
+  do_reset = true;
   if (isempty (cf))
     ## get current figure, or create a new one if necessary
-    cf = gcf ();
+    cf = get (0, "currentfigure");
+    if (isempty (cf))
+      cf = figure ();
+      do_reset = false;
+    endif
   else
     ## switch to figure provided without causing other updates
     set (0, "currentfigure", cf);
   endif
 
   fnp = get (cf, "nextplot");
   switch (fnp)
     case "add"
@@ -130,27 +135,34 @@ function hax = newplot (hsave = [])
       endif
     case "replacechildren"
       kids = get (cf, "children");
       if (! isempty (ca))
         kids(kids == ca) = [];
       endif
       delete (kids);
     case "replace"
-      kids = allchild (cf);
-      if (! isempty (ca))
-        kids(kids == ca) = [];
+      if (do_reset)
+        kids = allchild (cf);
+        if (! isempty (ca))
+          kids(kids == ca) = [];
+        endif
+        delete (kids);
+        reset (cf);
       endif
-      delete (kids);
-      reset (cf);
   endswitch
   set (cf, "nextplot", "add");  # Matlab compatibility
 
+  do_reset = true;
   if (isempty (ca))
-    ca = gca ();
+    ca = get (cf, "currentaxes");
+    if (isempty (ca))
+      ca = axes ();
+      do_reset = false;
+    endif
     deleteall = true;
   else
     set (cf, "currentaxes", ca);
     deleteall = false;
   endif
 
   anp = get (ca, "nextplot");
   switch (anp)
@@ -180,32 +192,21 @@ function hax = newplot (hsave = [])
         kids(kids == hkid) = [];
         delete (kids);
       else
         if (isprop (ca, "__plotyy_axes__"))
           ## Hack for bug #44246.  There is no way to reset or remove a
           ## property created with addproperty short of deleting the object.
           delete (ca);
           ca = axes ();
-        else
-          __go_axes_init__ (ca, "replace");
-          __request_drawnow__ ();
+        elseif (do_reset)
+          delete (allchild (ca));
+          reset (ca);
         endif
       endif
-      ## FIXME: The code above should perform the following:
-      ###########################
-      ## delete (allchild (ca));
-      ## reset (ca);
-      ###########################
-      ## Actually, __go_axes_init__ does both less and more.
-      ## It doesn't really remove all children since it re-instantiates
-      ## xlabel, ylabel, zlabel, and title text objects.
-      ## Also it preserves font properties like fontsize.
-      ## For the time being, in order to have axis labels and title work,
-      ## the above code is required.
   endswitch
 
   ## Reset line and color styles when hold is not on
   if (! strcmp (anp, "add"))
     set (ca, "colororderindex", 1, "linestyleorderindex", 1);
   endif
 
   if (nargout > 0)
