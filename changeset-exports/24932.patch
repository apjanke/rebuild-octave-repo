# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1521508704 25200
#      Mon Mar 19 18:18:24 2018 -0700
# Branch stable
# Node ID e178a73af18ee6984b77bf6e395cc08a659d3080
# Parent  16155531bda4b01c659d00a37e24026eede565da
doc: move @seealso lists inside the function doc string block

* intersect.m, rectangle.m, svds.m: Move @seealso lists inside the function
@deftypefn block.

diff --git a/scripts/plot/draw/rectangle.m b/scripts/plot/draw/rectangle.m
--- a/scripts/plot/draw/rectangle.m
+++ b/scripts/plot/draw/rectangle.m
@@ -47,18 +47,18 @@
 ##
 ## Additional property/value pairs are passed to the underlying patch command.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axes,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## The optional return value @var{h} is a graphics handle to the created
 ## rectangle object.
+## @seealso{patch, line, cylinder, ellipsoid, sphere}
 ## @end deftypefn
-## @seealso{patch, line, cylinder, ellipsoid, sphere}
 
 function h = rectangle (varargin)
 
   [hax, varargin] = __plt_get_axis_arg__ ("rectangle", varargin{:});
 
   if (isempty (hax))
     hax = gca ();
   else
diff --git a/scripts/set/intersect.m b/scripts/set/intersect.m
--- a/scripts/set/intersect.m
+++ b/scripts/set/intersect.m
@@ -30,18 +30,18 @@
 ## strings.
 ##
 ## If the optional input @qcode{"rows"} is given then return the common rows of
 ## @var{a} and @var{b}.  The inputs must be 2-D matrices to use this option.
 ##
 ## If requested, return index vectors @var{ia} and @var{ib} such that
 ## @code{@var{c} = @var{a}(@var{ia})} and @code{@var{c} = @var{b}(@var{ib})}.
 ##
+## @seealso{unique, union, setdiff, setxor, ismember}
 ## @end deftypefn
-## @seealso{unique, union, setdiff, setxor, ismember}
 
 function [c, ia, ib] = intersect (a, b, varargin)
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   [a, b] = validsetargs ("intersect", a, b, varargin{:});
diff --git a/scripts/sparse/svds.m b/scripts/sparse/svds.m
--- a/scripts/sparse/svds.m
+++ b/scripts/sparse/svds.m
@@ -83,18 +83,18 @@
 ## @group
 ## norm (@var{A}*@var{v} - @var{u}*@var{s}, 1) <= @var{tol} * norm (@var{A}, 1)
 ## @end group
 ## @end example
 ##
 ## @code{svds} is best for finding only a few singular values from a large
 ## sparse matrix.  Otherwise, @code{svd (full (@var{A}))} will likely be more
 ## efficient.
+## @seealso{svd, eigs}
 ## @end deftypefn
-## @seealso{svd, eigs}
 
 function [u, s, v, flag] = svds (A, k, sigma, opts)
 
   persistent root2 = sqrt (2);
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
