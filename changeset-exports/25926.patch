# HG changeset patch
# User Rik <rik@octave.org>
# Date 1539291887 25200
#      Thu Oct 11 14:04:47 2018 -0700
# Node ID 373fe1608f7c11cd2c435f5ec86d4a47f3e9bddf
# Parent  e9c24b5e867305796bba8ffcf7c002051057a9bb
Emit an error when utility matrices (zeros, ones, rand, etc.) are given a fractional dimension (bug #54781).

* data.cc (fill_matrix): Replace calls to "xidx_type_value" with
"idx_type_value (true)" which enables input checking.
* data.cc (Fones): Add new BIST tests for negative dimensions, fractional
dimensions, unknown conversion type.

* rand.cc (do_rand): Replace call to "xidx_type_value" with
"idx_type_value (true)" which enables input checking.
* rand.cc (Frand): Add new BIST tests for negative dimensions and fractional
dimensions.

* diag-perm.tst: Fix incorrect BIST test using a fractional dimension.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -3926,29 +3926,27 @@ fill_matrix (const octave_value_list& ar
       octave::get_dimensions (args(0), fcn, dims);
       break;
 
     default:
       {
         dims.resize (nargin);
 
         for (int i = 0; i < nargin; i++)
-          dims(i) = (args(i).isempty ()
-                     ? 0 : args(i).xidx_type_value ("%s: dimension arguments must be scalar integers", fcn));
+          dims(i) = (args(i).isempty () ? 0 : args(i).idx_type_value (true));
       }
       break;
     }
 
   dims.chop_trailing_singletons ();
 
   octave::check_dimensions (dims, fcn);
 
-  // FIXME: perhaps this should be made extensible by
-  // using the class name to lookup a function to call to create
-  // the new value.
+  // FIXME: Perhaps this should be made extensible by using the class name
+  //        to lookup a function to call to create the new value.
 
   // Note that automatic narrowing will handle conversion from
   // NDArray to scalar.
 
   switch (dt)
     {
     case oct_data_conv::dt_int8:
       retval = int8NDArray (dims, val);
@@ -4036,18 +4034,17 @@ fill_matrix (const octave_value_list& ar
       octave::get_dimensions (args(0), fcn, dims);
       break;
 
     default:
       {
         dims.resize (nargin);
 
         for (int i = 0; i < nargin; i++)
-          dims(i) = (args(i).isempty ()
-                     ? 0 : args(i).xidx_type_value ("%s: dimension arguments must be scalar integers", fcn));
+          dims(i) = (args(i).isempty () ? 0 : args(i).idx_type_value (true));
       }
       break;
     }
 
   dims.chop_trailing_singletons ();
 
   octave::check_dimensions (dims, fcn);
 
@@ -4100,18 +4097,17 @@ fill_matrix (const octave_value_list& ar
       octave::get_dimensions (args(0), fcn, dims);
       break;
 
     default:
       {
         dims.resize (nargin);
 
         for (int i = 0; i < nargin; i++)
-          dims(i) = (args(i).isempty ()
-                     ? 0 : args(i).xidx_type_value ("%s: dimension arguments must be scalar integers", fcn));
+          dims(i) = (args(i).isempty () ? 0 : args(i).idx_type_value (true));
       }
       break;
     }
 
   dims.chop_trailing_singletons ();
 
   octave::check_dimensions (dims, fcn);
 
@@ -4165,18 +4161,17 @@ fill_matrix (const octave_value_list& ar
       octave::get_dimensions (args(0), fcn, dims);
       break;
 
     default:
       {
         dims.resize (nargin);
 
         for (int i = 0; i < nargin; i++)
-          dims(i) = (args(i).isempty ()
-                     ? 0 : args(i).xidx_type_value ("%s: dimension arguments must be scalar integers", fcn));
+          dims(i) = (args(i).isempty () ? 0 : args(i).idx_type_value (true));
       }
       break;
     }
 
   dims.chop_trailing_singletons ();
 
   octave::check_dimensions (dims, fcn);
 
@@ -4220,18 +4215,17 @@ fill_matrix (const octave_value_list& ar
       octave::get_dimensions (args(0), fcn, dims);
       break;
 
     default:
       {
         dims.resize (nargin);
 
         for (int i = 0; i < nargin; i++)
-          dims(i) = (args(i).isempty ()
-                     ? 0 : args(i).xidx_type_value ("%s: dimension arguments must be scalar integers", fcn));
+          dims(i) = (args(i).isempty () ? 0 : args(i).idx_type_value (true));
       }
       break;
     }
 
   dims.chop_trailing_singletons ();
 
   octave::check_dimensions (dims, fcn);
 
@@ -4287,16 +4281,18 @@ val = ones (m,n, "uint8")
 %!assert (ones (2, 3, "single"), single ([1, 1, 1; 1, 1, 1]))
 %!assert (ones (3, 2, "single"), single ([1, 1; 1, 1; 1, 1]))
 %!assert (size (ones (3, 4, 5, "single")), [3, 4, 5])
 
 %!assert (ones (3, "int8"), int8 ([1, 1, 1; 1, 1, 1; 1, 1, 1]))
 %!assert (ones (2, 3, "int8"), int8 ([1, 1, 1; 1, 1, 1]))
 %!assert (ones (3, 2, "int8"), int8 ([1, 1; 1, 1; 1, 1]))
 %!assert (size (ones (3, 4, 5, "int8")), [3, 4, 5])
+
+%!assert (size (ones (1, -2, 2)), [1, 0, 2])
 */
 
 /*
 ## Tests for bug #47298
 ## Matlab requires the size to be a row vector.  In that logic, it supports
 ## n to be a 1x0 vector (returns 0x0) but not a 0x1 vector.  Octave supports
 ## any vector and therefore must support 0x1, 1x0, and 0x0x1 (but not 0x1x1).
 %!test <*47298>
@@ -4304,16 +4300,21 @@ val = ones (m,n, "uint8")
 %! for idx = 1:numel (funcs)
 %!   func = funcs{idx};
 %!   assert (func (zeros (1, 0)), zeros (0, 0));
 %!   assert (func (zeros (0, 1)), zeros (0, 0));
 %!   assert (func (zeros (0, 1, 1)), zeros (0, 0));
 %!   fail ([func2str(func) " ([])"]);
 %!   fail ([func2str(func) " (zeros (0, 0, 1))"]);
 %! endfor
+
+## Test input validation
+%!error <invalid data type specified> zeros (1, 1, "foobar")
+%!error <conversion of 1.1 .*failed> zeros (1, 1.1, 2)
+
 */
 
 DEFUN (zeros, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} zeros (@var{n})
 @deftypefnx {} {} zeros (@var{m}, @var{n})
 @deftypefnx {} {} zeros (@var{m}, @var{n}, @var{k}, @dots{})
 @deftypefnx {} {} zeros ([@var{m} @var{n} @dots{}])
@@ -4922,19 +4923,18 @@ INSTANTIATE_EYE (FloatNDArray);
 INSTANTIATE_EYE (NDArray);
 INSTANTIATE_EYE (boolNDArray);
 
 static octave_value
 identity_matrix (int nr, int nc, oct_data_conv::data_type dt)
 {
   octave_value retval;
 
-  // FIXME: perhaps this should be made extensible by using
-  // the class name to lookup a function to call to create the new
-  // value.
+  // FIXME: Perhaps this should be made extensible by using the class name
+  //        to lookup a function to call to create the new value.
 
   switch (dt)
     {
     case oct_data_conv::dt_int8:
       retval = identity_matrix<int8NDArray> (nr, nc);
       break;
 
     case oct_data_conv::dt_uint8:
diff --git a/libinterp/corefcn/rand.cc b/libinterp/corefcn/rand.cc
--- a/libinterp/corefcn/rand.cc
+++ b/libinterp/corefcn/rand.cc
@@ -281,20 +281,17 @@ do_rand (const octave_value_list& args, 
               error ("%s: unrecognized string argument", fcn);
           }
         else
           {
             dims.resize (nargin);
 
             for (int i = 0; i < nargin; i++)
               {
-                octave_idx_type elt =
-                  args(idx+i).xidx_type_value (
-                    "%s: dimension must be a scalar or array of integers",
-                    fcn);
+                octave_idx_type elt = args(idx+i).idx_type_value (true);
 
                 // Negative dimensions treated as zero for Matlab compatibility
                 dims(i) = (elt >= 0 ? elt : 0);
               }
 
             goto gen_matrix;
           }
       }
@@ -533,16 +530,24 @@ classes.
 %!
 %!assert (__rand_sample__ (-1), __rand_sample__ (0))
 %!assert (__rand_sample__ (-Inf), __rand_sample__ (0))
 %!assert (__rand_sample__ (2^33), __rand_sample__ (intmax ("uint32")))
 %!assert (__rand_sample__ (Inf), __rand_sample__ (0))
 %!assert (__rand_sample__ (NaN), __rand_sample__ (0))
 */
 
+/*
+## Check that negative dimensions are treated as zero for Matlab compatibility
+%!assert (size (rand (1, -1, 2)), [1, 0, 2])
+
+## Test input validation
+%!error <conversion of 1.1 to.* failed> rand (1, 1.1)
+*/
+
 static std::string current_distribution = octave::rand::distribution ();
 
 DEFUN (randn, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} randn (@var{n})
 @deftypefnx {} {} randn (@var{m}, @var{n}, @dots{})
 @deftypefnx {} {} randn ([@var{m} @var{n} @dots{}])
 @deftypefnx {} {@var{v} =} randn ("state")
diff --git a/test/diag-perm.tst b/test/diag-perm.tst
--- a/test/diag-perm.tst
+++ b/test/diag-perm.tst
@@ -72,17 +72,17 @@
 %! assert (full (Pr \ Ar), Pr \ full (Ar));
 
 ## structure rules for 1x1 dense / scalar and 1x1 perm
 %!test
 %! n = 7;
 %! P1 = eye (1) (:, [1]);
 %! A1 = 1;
 %! P = eye (n) (:, randperm (n));
-%! A = rand (n-3, n, .5);
+%! A = rand (n-3, n);
 %! assert (typeinfo (A * P1), "matrix");
 %! assert (full (A * P1), full (A) * P1);
 %! assert (typeinfo (P1 * A), "matrix");
 %! assert (full (P1 * A), P1 * full (A));
 %! assert (typeinfo (A1 * P), "matrix");
 %! assert (full (A1 * P), full (A1) * P);
 %! assert (typeinfo (P * A1), "matrix");
 %! assert (full (P * A1), P * full (A1));
