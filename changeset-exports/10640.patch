# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1274164442 -7200
#      Tue May 18 08:34:02 2010 +0200
# Node ID 5c594472f75e77f3e275f0a40c1be86e0a747392
# Parent  a52cc4f6ebfcaf2280caf051837b9abf166fe3ef
determine string enum length by trailing null rather than sizeof

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-05-18  Jaroslav Hajek  <highegg@gmail.com>
+
+	* variables.cc (set_internal_variable (int&, ..., const char **)):
+	Drop nchoices argument. Instead determine nchoices by trailing NULL.
+	* variables.h (SET_INTERNAL_VARIABLE_CHOICES): Update.
+	* DLD-FUNCTIONS/svd.cc (Fsvd_driver): Update.
+
 2010-05-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* variables.cc (set_internal_variable (int&, ..., const char **, int)):
 	New overload.
 	* variables.h: Declare it.
 	(SET_INTERNAL_VARIABLE_CHOICES): New macro.
 	* DLD-FUNCTIONS/svd.cc (Fsvd_driver): Use it here.
 
diff --git a/src/DLD-FUNCTIONS/svd.cc b/src/DLD-FUNCTIONS/svd.cc
--- a/src/DLD-FUNCTIONS/svd.cc
+++ b/src/DLD-FUNCTIONS/svd.cc
@@ -406,12 +406,12 @@ decomposition, eliminating the unnecessa
 DEFUN_DLD (svd_driver, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{old} =} svd_driver (@var{new})\n\
 Sets or queries the underlying LAPACK driver used by svd.\n\
 Currently recognized are \"gesvd\" and \"gesdd\". Default is \"gesvd\".\n\
 @seealso{svd}\n\
 @end deftypefn")
 {
-  static const char *driver_names[] = { "gesvd", "gesdd" };
+  static const char *driver_names[] = { "gesvd", "gesdd", 0 };
 
   return SET_INTERNAL_VARIABLE_CHOICES (svd_driver, driver_names);
 }
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -868,20 +868,22 @@ set_internal_variable (std::string& var,
   else if (nargin > 1)
     print_usage ();
 
   return retval;
 }
 
 octave_value
 set_internal_variable (int& var, const octave_value_list& args,
-                       int nargout, const char *nm, const char **choices,
-                       int nchoices)
+                       int nargout, const char *nm, const char **choices)
 {
   octave_value retval;
+  int nchoices = 0;
+  while (choices[nchoices] != 0)
+    nchoices++;
 
   int nargin = args.length ();
   assert (var < nchoices);
 
   if (nargout > 0 || nargin == 0)
     retval = choices[var];
 
   if (wants_local_change (args, nargin))
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -106,32 +106,30 @@ set_internal_variable (double& var, cons
                        double minval = DBL_MIN, double maxval = DBL_MAX);
 
 extern OCTINTERP_API octave_value
 set_internal_variable (std::string& var, const octave_value_list& args,
                        int nargout, const char *nm, bool empty_ok = true);
 
 extern OCTINTERP_API octave_value
 set_internal_variable (int& var, const octave_value_list& args,
-                       int nargout, const char *nm, const char **choices,
-                       int nchoices);
+                       int nargout, const char *nm, const char **choices);
 
 #define SET_INTERNAL_VARIABLE(NM) \
   set_internal_variable (V ## NM, args, nargout, #NM)
 
 #define SET_NONEMPTY_INTERNAL_STRING_VARIABLE(NM) \
   set_internal_variable (V ## NM, args, nargout, #NM, false)
 
 #define SET_INTERNAL_VARIABLE_WITH_LIMITS(NM, MINVAL, MAXVAL) \
   set_internal_variable (V ## NM, args, nargout, #NM, MINVAL, MAXVAL)
 
-// in the following, CHOICES must be a static C string array.
+// in the following, CHOICES must be a C string array terminated by null.
 #define SET_INTERNAL_VARIABLE_CHOICES(NM, CHOICES) \
-  set_internal_variable (V ## NM, args, nargout, #NM, CHOICES, \
-                         sizeof (CHOICES) / sizeof (const char *))
+  set_internal_variable (V ## NM, args, nargout, #NM, CHOICES)
 
 extern OCTINTERP_API std::string builtin_string_variable (const std::string&);
 extern OCTINTERP_API int builtin_real_scalar_variable (const std::string&, double&);
 extern OCTINTERP_API octave_value builtin_any_variable (const std::string&);
 
 extern OCTINTERP_API void bind_ans (const octave_value& val, bool print);
 
 extern OCTINTERP_API void
