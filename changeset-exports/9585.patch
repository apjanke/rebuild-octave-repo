# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1251499051 14400
#      Fri Aug 28 18:37:31 2009 -0400
# Node ID 06b8b51dca4897149461a14427203b9e801dced0
# Parent  0fcbfddaa87fc8c4adc9a82b84f8032adc6075a5
also handle user-defined graphics properties in new property name validation scheme

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2009-08-28  John W. Eaton  <jwe@octave.org>
+
+	* genprops.awk: Generate static member functions has_core_property
+	and core_property_names.  Make has_property and all_property_names
+	non-static const member functions.  Pass object type to
+	validate_property_name.
+	* graphics.cc (validate_property_name): New arg, WHAT.
+	Improve warning and error messages.
+	(property_list::set): Use has_core_property instead of has_property.
+	(base_properties::has_property): Delete definition.
+	(base_graphics_object::remove_all_listeners): Move unwind protect
+	block here, from old base_properties::has_property function.
+	* graphics.h.in (base_properties::has_property): Now virtual.
+	Unconditionally call panic_impossible.
+
 2009-08-28  John W. Eaton  <jwe@octave.org>
 
 	* graphics.cc (validate_property_name): Return full name of
 	matched property value.  Issue warning if given property name is
 	abbreviated.
 	* genprops.awk: Use name returned by validate_property_name for
 	subsequent matching.
 	* octave.cc (maximum_braindamage):
diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -252,21 +252,25 @@ function emit_common_declarations ()
   printf ("private:\n  static std::string go_name;\n\n");
 }
 
 function emit_declarations ()
 {
   if (class_name && ! base)
     emit_common_declarations();
 
-  printf ("public:\n\n");
+  printf ("public:\n\n\n  static std::set<std::string> core_property_names (void);\n\n  static bool has_core_property (const caseless_str& pname);\n\n  std::set<std::string> all_property_names (");
   if (base)
-    printf ("\n  static std::set<std::string> all_property_names (const std::string& cname);\n\n  static bool has_property (const std::string& pname, const std::string& cname);\n\n");
+    printf ("const std::string& cname");
   else
-    printf ("\n  static std::set<std::string> all_property_names (void);\n\n  static bool has_property (const std::string& pname);\n\n");
+    printf ("void");
+  printf (") const;\n\n");
+
+  if (! base)
+    printf ("  bool has_property (const caseless_str& pname) const;\n\n");
 
   if (idx > 0)
     print (base ? "protected:\n" : "private:\n");
 
   for (i = 1; i <= idx; i++)
     printf ("  %s%s %s;\n", mutable[i] ? "mutable " : "", type[i], name[i]);
 
   if (idx > 0)
@@ -429,17 +433,17 @@ function emit_source ()
 
     if (base)
       printf ("void\nbase_properties::set (const caseless_str& pname, const std::string& cname, const octave_value& val)\n{\n") >> filename;
     else
       printf ("void\n%s::properties::set (const caseless_str& pname_arg, const octave_value& val)\n{\n",
               class_name) >> filename;
 
     if (! base)
-      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  caseless_str pname = validate_property_name (\"get\", pnames, pname_arg);\n\n  if (error_state)\n    return;\n\n") >> filename;
+      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  caseless_str pname = validate_property_name (\"get\", go_name, pnames, pname_arg);\n\n  if (error_state)\n    return;\n\n") >> filename;
 
     first = 1;
 
     for (i = 1; i <= idx; i++)
     {
       if (! readonly[i])
       {
         printf ("  %sif (pname.compare (\"%s\"))\n    set_%s (val);\n",
@@ -483,17 +487,17 @@ function emit_source ()
     if (base)
       printf ("octave_value\nbase_properties::get (const caseless_str& pname) const\n{\n") >> filename;
     else
       printf ("octave_value\n%s::properties::get (const caseless_str& pname_arg) const\n{\n",
               class_name) >> filename;
     printf ("  octave_value retval;\n\n") >> filename;
 
     if (! base)
-      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  caseless_str pname = validate_property_name (\"get\", pnames, pname_arg);\n\n  if (error_state)\n    return retval;\n\n") >> filename;
+      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  caseless_str pname = validate_property_name (\"get\", go_name, pnames, pname_arg);\n\n  if (error_state)\n    return retval;\n\n") >> filename;
 
     for (i = 1; i<= idx; i++)
     {
       printf ("  %sif (pname.compare (\"%s\"))\n",
               (i > 1 ? "else " : ""), name[i]) >> filename;
       printf ("    retval = get_%s ()%s;\n", name[i],
               (type[i] == "handle_property" || type[i] == "graphics_handle" ? ".as_octave_value ()" : "")) >> filename;
     }
@@ -508,17 +512,17 @@ function emit_source ()
 
     if (base)
       printf ("property\nbase_properties::get_property (const caseless_str& pname)\n{\n") >> filename;
     else
       printf ("property\n%s::properties::get_property (const caseless_str& pname_arg)\n{\n",
               class_name) >> filename;
 
     if (! base)
-      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  caseless_str pname = validate_property_name (\"get\", pnames, pname_arg);\n\n  if (error_state)\n    return property ();\n\n") >> filename;
+      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  caseless_str pname = validate_property_name (\"get\", go_name, pnames, pname_arg);\n\n  if (error_state)\n    return property ();\n\n") >> filename;
 
     for (i = 1; i<= idx; i++)
     {
       if (ptype[i])
       {
         printf ("  %sif (pname.compare (\"%s\"))\n",
                 (i > 1 ? "else " : ""), name[i]) >> filename;
         printf ("    return property (&%s, true);\n", name[i]) >> filename;
@@ -570,35 +574,53 @@ function emit_source ()
     printf ("\n  return m;\n}\n\n") >> filename;
 
     ## go_name static field
 
     if (! base)
       printf ("std::string %s::properties::go_name (\"%s\");\n\n",
               class_name, object_name) >> filename;
 
+    printf ("std::set<std::string>\n") >> filename;
     if (base)
-      printf ("std::set<std::string>\nbase_properties::all_property_names (const std::string& cname") >> filename;
+      printf ("base_properties") >> filename;
     else
-      printf ("std::set<std::string>\n%s::properties::all_property_names (void", class_name) >> filename;
-    printf (")\n{\n  static std::set<std::string> all_pnames;\n\n  static bool initialized = false;\n\n  if (! initialized)\n    {\n") >> filename;
+      printf ("%s::properties", class_name) >> filename;
+    printf ("::core_property_names (void)\n{\n  static std::set<std::string> all_pnames;\n\n  static bool initialized = false;\n\n  if (! initialized)\n    {\n") >> filename;
     for (i = 1; i <= idx; i++)
       printf ("      all_pnames.insert (\"%s\");\n", name[i]) >> filename;
-    printf ("\n      initialized = true;\n    }\n\n") >> filename;
+    if (! base)
+      printf ("\n      std::set<std::string> base_pnames = base_properties::core_property_names ();\n      all_pnames.insert (base_pnames.begin (), base_pnames.end ());\n") >> filename;
+    printf ("\n      initialized = true;\n    }\n\n  return all_pnames;\n}\n\n") >> filename;
+
+    printf ("bool\n") >> filename;
     if (base)
-      printf ("  std::set<std::string> retval = all_pnames;\n  std::set<std::string> dyn_props = dynamic_property_names (cname);\n  retval.insert (dyn_props.begin(), dyn_props.end ());\n  return retval;\n}\n\n") >> filename;
+      printf ("base_properties") >> filename;
     else
-      printf ("  std::set<std::string> retval = all_pnames;\n  std::set<std::string> base_props = base_properties::all_property_names (\"%s\");\n  retval.insert (base_props.begin (), base_props.end ());\n  return retval;\n}\n\n", class_name) >> filename;
+      printf ("%s::properties", class_name) >> filename;
+    printf ("::has_core_property (const caseless_str& pname)\n{\n  std::set<std::string> pnames = core_property_names ();\n\n  return pnames.find (pname) != pnames.end ();\n}\n\n", class_name) >> filename;
 
+    printf ("std::set<std::string>\n") >> filename;
     if (base)
-      printf ("bool\nbase_properties::has_property (const std::string& pname, const std::string& cname)\n{\n  std::set<std::string> pnames = all_property_names (cname);\n\n") >> filename;
+	printf ("base_properties") >> filename;
+    else
+      printf ("%s::properties", class_name) >> filename;
+    printf ("::all_property_names (") >> filename;
+    if (base)
+      printf ("const std::string& cname") >> filename;
     else
-      printf ("bool\n%s::properties::has_property (const std::string& pname)\n{\n  std::set<std::string> pnames = all_property_names ();\n\n", class_name) >> filename;
+      printf ("void") >> filename;
+    printf (") const\n{\n  static std::set<std::string> all_pnames = core_property_names ();\n\n") >> filename;
+    if (base)
+      printf ("  std::set<std::string> retval = all_pnames;\n  std::set<std::string> dyn_props = dynamic_property_names (cname);\n  retval.insert (dyn_props.begin (), dyn_props.end ());\n  for (std::map<caseless_str, property, cmp_caseless_str>::const_iterator p = all_props.begin ();\n       p != all_props.end (); p++)\n    retval.insert (p->first);\n\n  return retval;\n}\n\n") >> filename;
+    else
+      printf ("  std::set<std::string> retval = all_pnames;\n  std::set<std::string> base_props = base_properties::all_property_names (\"%s\");\n  retval.insert (base_props.begin (), base_props.end ());\n\n  return retval;\n}\n\n", class_name) >> filename;
 
-    printf ("  return pnames.find (pname) != pnames.end ();\n}\n\n") >> filename;
+    if (! base)
+      printf ("bool\n%s::properties::has_property (const caseless_str& pname) const\n{\n  std::set<std::string> pnames = all_property_names ();\n\n  return pnames.find (pname) != pnames.end ();\n}\n\n", class_name) >> filename;
   }
 }
 
 BEGIN {
   filename = "graphics-props.cc";
   printf ("// DO NOT EDIT!  Generated automatically by genprops.awk.\n\n");
   printf ("// DO NOT EDIT!  Generated automatically by genprops.awk.\n\n") > filename;
   pcount = 0;
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -61,17 +61,17 @@ gripe_set_invalid (const std::string& pn
   error ("set: invalid value for %s property", pname.c_str ());
 }
 
 // Check to see that PNAME matches just one of PNAMES uniquely.
 // Return the full name of the match, or an empty caseless_str object
 // if there is no match, or the match is ambiguous.
 
 static caseless_str
-validate_property_name (const std::string& who,
+validate_property_name (const std::string& who, const std::string& what,
 			const std::set<std::string>& pnames,
 			const caseless_str& pname)
 {
   size_t len = pname.length ();
   std::set<std::string> matches;
 
   for (std::set<std::string>::const_iterator p = pnames.begin ();
        p != pnames.end (); p++)
@@ -87,40 +87,42 @@ validate_property_name (const std::strin
 	  matches.insert (*p);
 	}
     }
 
   size_t num_matches = matches.size ();
 
   if (num_matches == 0)
     {
-      error ("%s: unknown property %s", who.c_str (), pname.c_str ());
+      error ("%s: unknown %s property %s",
+	     who.c_str (), what.c_str (), pname.c_str ());
     }
   else if (num_matches > 1)
     {
       string_vector sv (matches);
 
       std::ostringstream os;
 
       sv.list_in_columns (os);
 
       std::string match_list = os.str ();
 
-      error ("%s: ambiguous property name %s; possible matches:\n\n%s",
-	     who.c_str (), pname.c_str (), match_list.c_str ());
+      error ("%s: ambiguous %s property name %s; possible matches:\n\n%s",
+	     who.c_str (), what.c_str (), pname.c_str (), match_list.c_str ());
     }
   else if (num_matches == 1)
     {
       // Exact match was handled above.
 
       std::string possible_match = *(matches.begin ());
 
       warning_with_id ("Octave:abbreviated-property-match",
-		       "%s: allowing %s to match %s", who.c_str (),
-		       pname.c_str (), possible_match.c_str ());
+		       "%s: allowing %s to match %s property %s",
+		       who.c_str (), pname.c_str (), what.c_str (),
+		       possible_match.c_str ());
 
       return possible_match;
     }
 
   return caseless_str ();
 }
 
 static Matrix
@@ -1243,31 +1245,31 @@ property_list::set (const caseless_str& 
 
 	  std::string pname = name.substr (offset);
 
 	  std::transform (pfx.begin (), pfx.end (), pfx.begin (), tolower);
 	  std::transform (pname.begin (), pname.end (), pname.begin (), tolower);
 
 	  bool has_property = false;
 	  if (pfx == "axes")
-	    has_property = axes::properties::has_property (pname);
+	    has_property = axes::properties::has_core_property (pname);
 	  else if (pfx == "line")
-	    has_property = line::properties::has_property (pname);
+	    has_property = line::properties::has_core_property (pname);
 	  else if (pfx == "text")
-	    has_property = text::properties::has_property (pname);
+	    has_property = text::properties::has_core_property (pname);
 	  else if (pfx == "image")
-	    has_property = image::properties::has_property (pname);
+	    has_property = image::properties::has_core_property (pname);
 	  else if (pfx == "patch")
-	    has_property = patch::properties::has_property (pname);
+	    has_property = patch::properties::has_core_property (pname);
 	  else if (pfx == "figure")
-	    has_property = figure::properties::has_property (pname);
+	    has_property = figure::properties::has_core_property (pname);
 	  else if (pfx == "surface")
-	    has_property = surface::properties::has_property (pname);
+	    has_property = surface::properties::has_core_property (pname);
 	  else if (pfx == "hggroup")
-	    has_property = hggroup::properties::has_property (pname);
+	    has_property = hggroup::properties::has_core_property (pname);
 
 	  if (has_property)
 	    {
 	      bool remove = false;
 	      if (val.is_string ())
 		{
 		  caseless_str tval = val.string_value ();
 
@@ -1848,35 +1850,16 @@ base_properties::get_property_dynamic (c
     {
       error ("get_property: unknown property \"%s\"", name.c_str ());
       return property ();
     }
   else
     return it->second;
 }
 
-bool
-base_properties::has_property (const caseless_str& name)
-{
-  property p;
-
-  unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
-
-  unwind_protect::protect_var (discard_error_messages);
-  unwind_protect::protect_var (error_state);
-
-  discard_error_messages = true;
-
-  p = get_property (name);
-
-  unwind_protect::run_frame (uwp_frame);
-
-  return (p.ok ());
-}
-
 void
 base_properties::remove_child (const graphics_handle& h)
 {
   octave_idx_type k = -1;
   octave_idx_type n = children.numel ();
   for (octave_idx_type i = 0; i < n; i++)
     {
       if (h.value () == children(i))
@@ -2164,23 +2147,33 @@ base_graphics_object::update_axis_limits
 
 void
 base_graphics_object::remove_all_listeners (void)
 {
   Octave_map m = get (true).map_value ();
 
   for (Octave_map::const_iterator pa = m.begin (); pa != m.end (); pa++)
     {
-      if (get_properties().has_property (pa->first))
-	{
-	  property p = get_properties ().get_property (pa->first);
-
-	  if (! error_state && p.ok ())
-	    p.delete_listener ();
-	}
+      // FIXME -- there has to be a better way.  I think we want to
+      // ask whether it is OK to delete the listener for the given
+      // property.  How can we know in advance that it will be OK?
+
+      unwind_protect::frame_id_t uwp_frame = unwind_protect::begin_frame ();
+
+      unwind_protect::protect_var (discard_error_messages);
+      unwind_protect::protect_var (error_state);
+
+      discard_error_messages = true;
+
+      property p = get_properties ().get_property (pa->first);
+
+      if (! error_state && p.ok ())
+	p.delete_listener ();
+
+      unwind_protect::run_frame (uwp_frame);
     }
 }
 
 // ---------------------------------------------------------------------
 
 #include "graphics-props.cc"
 
 // ---------------------------------------------------------------------
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1651,17 +1651,21 @@ public:
 	    const octave_value& val);
 
   virtual octave_value get (const caseless_str& pname) const;
 
   virtual octave_value get (bool all = false) const;
 
   virtual property get_property (const caseless_str& pname);
 
-  bool has_property (const caseless_str& pname);
+  virtual bool has_property (const caseless_str&) const
+  {
+    panic_impossible ();
+    return false;
+  }
 
   bool is_modified (void) const { return is___modified__ (); }
  
   virtual void remove_child (const graphics_handle& h);
 
   virtual void adopt (const graphics_handle& h)
   {
     octave_idx_type n = children.numel ();
