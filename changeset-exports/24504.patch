# HG changeset patch
# User Rik <rik@octave.org>
# Date 1515044978 28800
#      Wed Jan 03 21:49:38 2018 -0800
# Branch stable
# Node ID 5188d936c79abbdd476378f17616305df085aa5e
# Parent  ea1253f05dd31e9f59355732f0937ac910aef611
doc: Documentation fixes for linspace, logspace, lookup (bug #52785).

* data.cc (Flinspace): Use "start", "end" as input variables rather than "base"
and "limit".  Wrap docstring to 80 characters.  Add seealso link to colon.
* data.cc (Fcolon): Add seealso link to linspace.

* logspace.m: Document that when a single value is requested it is the right-hand
limit of range which is returned.

* lookup.cc (Flookup): Rename "val" to "y" which is name of input to function.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -5160,35 +5160,35 @@ do_linspace (const octave_value& base, c
         }
     }
 
   return retval;
 }
 
 DEFUN (linspace, args, ,
        doc: /* -*- texinfo -*-
-@deftypefn  {} {} linspace (@var{base}, @var{limit})
-@deftypefnx {} {} linspace (@var{base}, @var{limit}, @var{n})
-Return a row vector with @var{n} linearly spaced elements between
-@var{base} and @var{limit}.
-
-If the number of elements is greater than one, then the endpoints @var{base}
-and @var{limit} are always included in the range.  If @var{base} is greater
-than @var{limit}, the elements are stored in decreasing order.  If the
-number of points is not specified, a value of 100 is used.
-
-The @code{linspace} function returns a row vector when both @var{base}
-and @var{limit} are scalars.  If one, or both, inputs are vectors, then
+@deftypefn  {} {} linspace (@var{start}, @var{end})
+@deftypefnx {} {} linspace (@var{start}, @var{end}, @var{n})
+Return a row vector with @var{n} linearly spaced elements between @var{start}
+and @var{end}.
+
+If the number of elements is greater than one, then the endpoints @var{start}
+and @var{end} are always included in the range.  If @var{start} is greater than
+@var{end}, the elements are stored in decreasing order.  If the number of
+points is not specified, a value of 100 is used.
+
+The @code{linspace} function returns a row vector when both @var{start} and
+@var{end} are scalars.  If one, or both, inputs are vectors, then
 @code{linspace} transforms them to column vectors and returns a matrix where
 each row is an independent sequence between
-@w{@code{@var{base}(@var{row_n}), @var{limit}(@var{row_n})}}.
-
-For compatibility with @sc{matlab}, return the second argument (@var{limit})
-if fewer than two values are requested.
-@seealso{logspace}
+@w{@code{@var{start}(@var{row_n}), @var{end}(@var{row_n})}}.
+
+For compatibility with @sc{matlab}, return the second argument (@var{end}) when
+only a single value (@var{n} = 1) is requested.
+@seealso{colon, logspace}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin != 2 && nargin != 3)
     print_usage ();
 
   octave_idx_type npoints = 100;
@@ -6240,16 +6240,17 @@ DEFUN (colon, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{r} =} colon (@var{base}, @var{limit})
 @deftypefnx {} {@var{r} =} colon (@var{base}, @var{increment}, @var{limit})
 Return the result of the colon expression corresponding to @var{base},
 @var{limit}, and optionally, @var{increment}.
 
 This function is equivalent to the operator syntax @w{@code{base : limit}}
 or @w{@code{base : increment : limit}}.
+@seealso{linspace}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
 
   return (nargin == 2) ? do_colon_op (args(0), args(1))
diff --git a/libinterp/corefcn/lookup.cc b/libinterp/corefcn/lookup.cc
--- a/libinterp/corefcn/lookup.cc
+++ b/libinterp/corefcn/lookup.cc
@@ -214,17 +214,17 @@ is also sorted, the complexity is O(min(
 (or @var{y} can be a single string).  In this case, string lookup
 is performed using lexicographical comparison.
 
 If @var{opts} is specified, it must be a string with letters indicating
 additional options.
 
 @table @code
 @item m
-@code{table(idx(i)) == val(i)} if @code{val(i)}
+@code{table(idx(i)) == y(i)} if @code{y(i)}
 occurs in table; otherwise, @code{idx(i)} is zero.
 
 @item b
 @code{idx(i)} is a logical 1 or 0, indicating whether
 @code{val(i)} is contained in table or not.
 
 @item l
 For numeric lookups
diff --git a/scripts/general/logspace.m b/scripts/general/logspace.m
--- a/scripts/general/logspace.m
+++ b/scripts/general/logspace.m
@@ -48,18 +48,25 @@
 ## @tex
 ## $10^{a}$ and $10^{\pi}$,
 ## @end tex
 ## @ifnottex
 ## 10^@var{a} and 10^pi,
 ## @end ifnottex
 ## in order to be compatible with the corresponding @sc{matlab} function.
 ##
-## Also for compatibility with @sc{matlab}, return the second argument @var{b}
-## if fewer than two values are requested.
+## Also for compatibility with @sc{matlab}, return the right-hand side of
+## the range
+## @tex
+## ($10^{b}$)
+## @end tex
+## @ifnottex
+## (10^@var{b})
+## @end ifnottex
+## when just a single value is requested.
 ## @seealso{linspace}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = logspace (base, limit, n = 50)
 
   if (nargin != 2 && nargin != 3)
