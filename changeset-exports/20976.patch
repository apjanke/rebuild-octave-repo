# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1450910860 18000
#      Wed Dec 23 17:47:40 2015 -0500
# Node ID 0fd972b06a6f8093464357206140d7cc5d7385ab
# Parent  b4019ebd45c49b8c3509ab0b3e29f32641954ad2
maint: graphics.in.h: invert if/else/error instances.

diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -646,16 +646,17 @@ protected:
           {
             str = strings;
             return true;
           }
       }
     else
       error ("set: invalid string property value for \"%s\"",
              get_name ().c_str ());
+
     return false;
   }
 
 private:
   desired_enum desired_type;
   char separator;
   string_vector str;
 };
@@ -1175,29 +1176,28 @@ public:
     return *this;
   }
 
   base_property* clone (void) const { return new double_property (*this); }
 
 protected:
   bool do_set (const octave_value& v)
   {
-    if (v.is_scalar_type () && v.is_real_type ())
-      {
-        double new_val = v.double_value ();
-
-        if (new_val != current_val)
-          {
-            current_val = new_val;
-            return true;
-          }
-      }
-    else
+    if (! v.is_scalar_type () || ! v.is_real_type ())
       error ("set: invalid value for double property \"%s\"",
              get_name ().c_str ());
+
+    double new_val = v.double_value ();
+
+    if (new_val != current_val)
+      {
+        current_val = new_val;
+        return true;
+      }
+
     return false;
   }
 
 private:
   double current_val;
 };
 
 // ---------------------------------------------------------------------
@@ -2659,68 +2659,67 @@ public:
   friend class graphics_object;
 
   base_graphics_object (void) : count (1), toolkit_flag (false) { }
 
   virtual ~base_graphics_object (void) { }
 
   virtual void mark_modified (void)
   {
-    if (valid_object ())
-      get_properties ().mark_modified ();
-    else
+    if (! valid_object ())
       error ("base_graphics_object::mark_modified: invalid graphics object");
+
+    get_properties ().mark_modified ();
   }
 
   virtual void override_defaults (base_graphics_object& obj)
   {
-    if (valid_object ())
-      get_properties ().override_defaults (obj);
-    else
+    if (! valid_object ())
       error ("base_graphics_object::override_defaults: invalid graphics object");
+    get_properties ().override_defaults (obj);
   }
 
   void build_user_defaults_map (property_list::pval_map_type &def,
                                 const std::string go_name) const;
 
   virtual void set_from_list (property_list& plist)
   {
-    if (valid_object ())
-      get_properties ().set_from_list (*this, plist);
-    else
+    if (! valid_object ())
       error ("base_graphics_object::set_from_list: invalid graphics object");
+
+    get_properties ().set_from_list (*this, plist);
   }
 
   virtual void set (const caseless_str& pname, const octave_value& pval)
   {
-    if (valid_object ())
-      get_properties ().set (pname, pval);
-    else
+    if (! valid_object ())
       error ("base_graphics_object::set: invalid graphics object");
+
+    get_properties ().set (pname, pval);
   }
 
   virtual void set_defaults (const std::string&)
   {
     error ("base_graphics_object::set_defaults: invalid graphics object");
   }
 
   virtual octave_value get (bool all = false) const
   {
-    if (valid_object ())
-      return get_properties ().get (all);
-    else
+    if (! valid_object ())
       error ("base_graphics_object::get: invalid graphics object");
+
+    return get_properties ().get (all);
   }
 
   virtual octave_value get (const caseless_str& pname) const
   {
-    if (valid_object ())
-      return get_properties ().get (pname);
-    else
+    if (! valid_object ())
       error ("base_graphics_object::get: invalid graphics object");
+
+    return get_properties ().get (pname);
   }
 
   virtual octave_value get_default (const caseless_str&) const;
 
   virtual octave_value get_factory_default (const caseless_str&) const;
 
   virtual octave_value get_defaults (void) const
   {
@@ -2752,52 +2751,52 @@ public:
   virtual std::string values_as_string (void);
 
   virtual std::string value_as_string (const std::string& prop);
 
   virtual octave_scalar_map values_as_struct (void);
 
   virtual graphics_handle get_parent (void) const
   {
-    if (valid_object ())
-      return get_properties ().get_parent ();
-    else
+    if (! valid_object ())
       error ("base_graphics_object::get_parent: invalid graphics object");
+
+    return get_properties ().get_parent ();
   }
 
   graphics_handle get_handle (void) const
   {
-    if (valid_object ())
-      return get_properties ().get___myhandle__ ();
-    else
+    if (! valid_object ())
       error ("base_graphics_object::get_handle: invalid graphics object");
+
+    return get_properties ().get___myhandle__ ();
   }
 
   virtual void remove_child (const graphics_handle& h)
   {
-    if (valid_object ())
-      get_properties ().remove_child (h);
-    else
+    if (! valid_object ())
       error ("base_graphics_object::remove_child: invalid graphics object");
+
+    get_properties ().remove_child (h);
   }
 
   virtual void adopt (const graphics_handle& h)
   {
-    if (valid_object ())
-      get_properties ().adopt (h);
-    else
+    if (! valid_object ())
       error ("base_graphics_object::adopt: invalid graphics object");
+
+    get_properties ().adopt (h);
   }
 
   virtual void reparent (const graphics_handle& np)
   {
-    if (valid_object ())
-      get_properties ().reparent (np);
-    else
+    if (! valid_object ())
       error ("base_graphics_object::reparent: invalid graphics object");
+
+    get_properties ().reparent (np);
   }
 
   virtual void defaults (void) const
   {
     if (! valid_object ())
       error ("base_graphics_object::default: invalid graphics object");
 
     std::string msg = (type () + "::defaults");
@@ -2833,20 +2832,20 @@ public:
 
   bool isa (const std::string& go_name) const
   {
     return type () == go_name;
   }
 
   virtual graphics_toolkit get_toolkit (void) const
   {
-    if (valid_object ())
-      return get_properties ().get_toolkit ();
-    else
+    if (! valid_object ())
       error ("base_graphics_object::get_toolkit: invalid graphics object");
+
+    return get_properties ().get_toolkit ();
   }
 
   virtual void add_property_listener (const std::string& nm,
                                       const octave_value& v,
                                       listener_mode mode = POSTSET)
   {
     if (valid_object ())
       get_properties ().add_listener (nm, v, mode);
@@ -3332,17 +3331,18 @@ public:
       if (! val.is_string ())
         error ("set___graphics_toolkit__ must be a string");
 
       std::string nm = val.string_value ();
       graphics_toolkit b = gtk_manager::find_toolkit (nm);
 
       if (b.get_name () != nm)
         error ("set___graphics_toolkit__: invalid graphics toolkit");
-      else if (nm != get___graphics_toolkit__ ())
+
+      if (nm != get___graphics_toolkit__ ())
         {
           set_toolkit (b);
           mark_modified ();
         }
     }
 
     void adopt (const graphics_handle& h);
 
