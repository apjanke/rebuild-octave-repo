# HG changeset patch
# User Ben Abbott  <bpabbott@mac.com>
# Date 1336084479 14400
#      Thu May 03 18:34:39 2012 -0400
# Node ID 0d37fda09415e85de4a2726727f5937e02075300
# Parent  11a9d448fdc3e315d3bb92b203b93a37ed8c5fa4
Allow monotonically decending inputs to bicubic ().

bicubic.m: Permit the original inputs to be monotonically decending.
Slight improvments to coding style.  Add test.  (Bug # 36351).

diff --git a/scripts/general/bicubic.m b/scripts/general/bicubic.m
--- a/scripts/general/bicubic.m
+++ b/scripts/general/bicubic.m
@@ -45,33 +45,33 @@ function zi = bicubic (x, y, z, xi, yi, 
   endif
 
   if (nargin < 6)
     extrapval = NaN;
   endif
 
   if (isa (x, "single") || isa (y, "single") || isa (z, "single")
       || isa (xi, "single") || isa (yi, "single"))
-    myeps = eps("single");
+    myeps = eps ("single");
   else
-    myeps = eps;
+    myeps = eps ();
   endif
 
   if (nargin <= 2)
     ## bicubic (z) or bicubic (z, 2)
     if (nargin == 1)
       n = 1;
     else
       n = y;
     endif
     z = x;
     x = [];
     [rz, cz] = size (z);
-    s = linspace (1, cz, (cz-1)*pow2(n)+1);
-    t = linspace (1, rz, (rz-1)*pow2(n)+1);
+    s = linspace (1, cz, (cz-1) * pow2 (n) + 1);
+    t = linspace (1, rz, (rz-1) * pow2 (n) + 1);
   elseif (nargin == 3)
     if (! isvector (x) || ! isvector (y))
       error ("bicubic: XI and YI must be vector");
     endif
     s = y;
     t = z;
     z = x;
     [rz, cz] = size (z);
@@ -83,51 +83,74 @@ function zi = bicubic (x, y, z, xi, yi, 
       endif
     elseif (size_equal (x, y) && size_equal (x, z))
       x = x(1,:);
       y = y(:,1);
     else
       error ("bicubic: X, Y and Z must be equal size matrices of same size");
     endif
 
+    if (all (diff (x) < 0))
+      flipx = true;
+      x = fliplr (x);
+    elseif (all (diff (x) > 0))
+      flipx = false;
+    else
+      error ("bicubic:nonmonotonic", "bicubic: X values must be monotonic")
+    endif
+    if (all (diff (y) < 0))
+      flipy = true;
+      y = flipud (y);
+    elseif (all (diff (y) > 0))
+      flipy = false;
+    else
+      error ("bicubic:nonmonotonic", "bicubic: Y values must be monotonic")
+    endif
+
     ## Mark values outside the lookup table.
     xfirst_ind = find (xi < x(1));
     xlast_ind  = find (xi > x(cz));
     yfirst_ind = find (yi < y(1));
     ylast_ind  = find (yi > y(rz));
     ## Set value outside the table preliminary to min max index.
     xi(xfirst_ind) = x(1);
     xi(xlast_ind) = x(cz);
     yi(yfirst_ind) = y(1);
     yi(ylast_ind) = y(rz);
 
-
     x = reshape (x, 1, cz);
-    x(cz) *= 1 + sign (x(cz))*myeps;
+    x(cz) *= 1 + sign (x(cz)) * myeps;
     if (x(cz) == 0)
       x(cz) = myeps;
     endif;
     xi = reshape (xi, 1, length (xi));
     [m, i] = sort ([x, xi]);
     o = cumsum (i <= cz);
     xidx = o(find (i > cz));
 
     y = reshape (y, rz, 1);
-    y(rz) *= 1 + sign (y(rz))*myeps;
+    y(rz) *= 1 + sign (y(rz)) * myeps;
     if (y(rz) == 0)
       y(rz) = myeps;
     endif;
     yi = reshape (yi, length (yi), 1);
     [m, i] = sort ([y; yi]);
     o = cumsum (i <= rz);
     yidx = o([find(i > rz)]);
 
     ## Set s and t used follow codes.
-    s = xidx + ((xi .- x(xidx))./(x(xidx+1) .- x(xidx)));
-    t = yidx + ((yi - y(yidx))./(y(yidx+1) - y(yidx)));
+    s = xidx + ((xi .- x(xidx)) ./ (x(xidx+1) .- x(xidx)));
+    t = yidx + ((yi  - y(yidx)) ./ (y(yidx+1)  - y(yidx)));
+
+    if (flipx)
+      s = fliplr (s);
+    endif
+    if (flipy)
+      t = flipud (t);
+    endif
   else
     print_usage ();
   endif
 
   if (rz < 3 || cz < 3)
     error ("bicubic: Z at least a 3 by 3 matrices");
   endif
 
@@ -193,21 +216,32 @@ function zi = bicubic (x, y, z, xi, yi, 
     zi(:, [xfirst_ind, xlast_ind]) = extrapval;
   endif
   if (! (isempty (yfirst_ind) && isempty (ylast_ind)))
     zi([yfirst_ind; ylast_ind], :) = extrapval;
   endif
 
 endfunction
 
-
 %!demo
 %! clf;
 %! colormap ("default");
 %! A = [13,-1,12;5,4,3;1,6,2];
 %! x = [0,1,4]+10;
 %! y = [-10,-9,-8];
 %! xi = linspace (min (x), max (x), 17);
 %! yi = linspace (min (y), max (y), 26)';
 %! mesh (xi, yi, bicubic (x,y,A,xi,yi));
 %! [x,y] = meshgrid (x,y);
 %! hold on; plot3 (x(:),y(:),A(:),"b*"); hold off;
 
+%!test
+%! x = linspace (1, -1, 10);
+%! [xx, yy] = meshgrid (x);
+%! z = cos (6 * xx) + sin (6 * yy);
+%! x = linspace (1, -1, 30);
+%! [xx2, yy2] = meshgrid (x);
+%! z1 = interp2 (xx, yy, z, xx2, yy2, "cubic");
+%! z2 = interp2 (fliplr(xx), flipud(yy), fliplr(flipud(z)),
+%!               fliplr(xx2), flipud(yy2), "cubic");
+%! z2 = fliplr (flipud (z2));
+%! assert (z1, z2, 100 * eps ())
+
