# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1311699847 -7200
#      Tue Jul 26 19:04:07 2011 +0200
# Node ID a43ecce77eec3ba36f999bd2f9cd4606deccf2dc
# Parent  869c62c15e958f1db854c333b788d987a233811f
Introduced a central ResourceManager class.

diff --git a/gui/octave-gui.pro b/gui/octave-gui.pro
--- a/gui/octave-gui.pro
+++ b/gui/octave-gui.pro
@@ -79,17 +79,18 @@ SOURCES +=\
     	  src/FilesDockWidget.cpp \
     	  src/FileEditorMdiSubWindow.cpp \
     	  src/BrowserWidget.cpp \
     	  src/ImageViewerMdiSubWindow.cpp \
     src/IRCWidget.cpp \
     src/qirc/IRCClient.cpp \
     src/qirc/IClientSocket.cpp \
     src/SettingsDialog.cpp \
-    src/OctaveGUI.cpp
+    src/OctaveGUI.cpp \
+    src/ResourceManager.cpp
 
 HEADERS += \
         src/terminal/TerminalCharacterDecoder.h \
         src/terminal/Character.h \
         src/terminal/CharacterColor.h \
 		  src/terminal/ColorTables.h \
         src/terminal/KeyboardTranslator.h \
         src/terminal/Screen.h \
@@ -121,12 +122,13 @@ HEADERS += \
     	  src/FilesDockWidget.h \
     	  src/FileEditorMdiSubWindow.h \
     	  src/BrowserWidget.h \
     	  src/ImageViewerMdiSubWindow.h \
     src/IRCWidget.h \
     src/qirc/IRCCodes.h \
     src/qirc/IRCClient.h \
     src/qirc/IClientSocket.h \
-    src/SettingsDialog.h
+    src/SettingsDialog.h \
+    src/ResourceManager.h
 
 FORMS += \
     src/SettingsDialog.ui
diff --git a/gui/src/FilesDockWidget.cpp b/gui/src/FilesDockWidget.cpp
--- a/gui/src/FilesDockWidget.cpp
+++ b/gui/src/FilesDockWidget.cpp
@@ -11,24 +11,24 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
+#include "ResourceManager.h"
 #include "FilesDockWidget.h"
 
 #include <QApplication>
 #include <QFileInfo>
 #include <QCompleter>
 #include <QSettings>
 #include <QProcess>
-#include <QDesktopServices>
 
 FilesDockWidget::FilesDockWidget (QWidget * parent):QDockWidget (parent)
 {
   setObjectName ("FilesDockWidget");
   setWindowTitle (tr ("Current Folder"));
   setWidget (new QWidget (this));
 
   // Create a toolbar
@@ -106,24 +106,20 @@ FilesDockWidget::itemDoubleClicked (cons
       m_fileTreeView->setRootIndex (index);
       setCurrentDirectory (m_fileSystemModel->fileInfo (index).
 			   absoluteFilePath ());
     }
   // Otherwise attempt to open it.
   else
     {
       // Check if the user wants to use a custom file editor.
-      QDesktopServices desktopServices;
-      QString settingsFile =
-        desktopServices.storageLocation (QDesktopServices::HomeLocation) +
-        "/.quint/settings.ini";
-      QSettings settings (settingsFile, QSettings::IniFormat);
-      if (settings.value ("useCustomFileEditor").toBool ())
+      QSettings *settings = ResourceManager::instance ()->settings ();
+      if (settings->value ("useCustomFileEditor").toBool ())
         {
-          QString editor = settings.value ("customFileEditor").toString ();
+          QString editor = settings->value ("customFileEditor").toString ();
           QStringList arguments;
           arguments << fileInfo.filePath ();
           QProcess::execute (editor, arguments);
         }
       else
         {
           emit openFile (fileInfo.filePath ());
         }
@@ -164,10 +160,16 @@ FilesDockWidget::currentDirectoryEntered
       if (QFile::exists (fileInfo.absoluteFilePath ()))
 	emit openFile (fileInfo.absoluteFilePath ());
     }
 }
 
 void
 FilesDockWidget::noticeSettings ()
 {
-
+  QSettings *settings = ResourceManager::instance ()->settings ();
+  m_fileTreeView->setColumnHidden (0, !settings->value ("showFilenames").toBool ());
+  m_fileTreeView->setColumnHidden (1, !settings->value ("showFileSize").toBool ());
+  m_fileTreeView->setColumnHidden (2, !settings->value ("showFileType").toBool ());
+  m_fileTreeView->setColumnHidden (3, !settings->value ("showLastModified").toBool ());
+  m_fileTreeView->setAlternatingRowColors (settings->value ("useAlternatingRowColors").toBool ());
+  //if (settings.value ("showHiddenFiles").toBool ())
 }
diff --git a/gui/src/IRCWidget.cpp b/gui/src/IRCWidget.cpp
--- a/gui/src/IRCWidget.cpp
+++ b/gui/src/IRCWidget.cpp
@@ -11,35 +11,35 @@
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
+#include "ResourceManager.h"
 #include "IRCWidget.h"
 #include <QMessageBox>
 #include <QHBoxLayout>
 #include <QVBoxLayout>
 #include <QLabel>
 #include <QSettings>
 #include <QInputDialog>
 
-IRCWidget::IRCWidget (QWidget * parent, QString settingsFile):
+IRCWidget::IRCWidget (QWidget * parent):
 QWidget (parent)
 {
-  m_settingsFile = settingsFile;
   m_alternatingColor = false;
-  QSettings settings (m_settingsFile, QSettings::IniFormat);
-  bool connectOnStartup = settings.value ("connectOnStartup").toBool ();
-  m_autoIdentification = settings.value ("autoIdentification").toBool ();
-  m_nickServPassword = settings.value ("nickServPassword").toString ();
+  QSettings *settings = ResourceManager::instance ()->settings ();
+  bool connectOnStartup = settings->value ("connectOnStartup").toBool ();
+  m_autoIdentification = settings->value ("autoIdentification").toBool ();
+  m_nickServPassword = settings->value ("nickServPassword").toString ();
 
-  m_initialNick = settings.value ("IRCNick").toString ();
+  m_initialNick = settings->value ("IRCNick").toString ();
 
   if (m_initialNick.isEmpty ())
     m_initialNick = "OctaveGUI-User";
 
   QVBoxLayout *layout = new QVBoxLayout ();
 
   m_chatWindow = new QTextEdit (this);
   m_chatWindow->setReadOnly (true);
@@ -293,38 +293,38 @@ IRCWidget::sendInputLine ()
   sendMessage (m_inputLine->text ());
   m_inputLine->setText ("");
 }
 
 void
 IRCWidget::handleNickInUseChanged ()
 {
   m_nickButton->setText (m_ircClient->nickInUse ());
-  QSettings settings (m_settingsFile, QSettings::IniFormat);
-  settings.setValue ("IRCNick", m_ircClient->nickInUse ());
+  QSettings *settings = ResourceManager::instance ()->settings ();
+  settings->setValue ("IRCNick", m_ircClient->nickInUse ());
 }
 
 void
 IRCWidget::handleReplyCode (IRCEvent * event)
 {
-  QSettings settings (m_settingsFile, QSettings::IniFormat);
+  QSettings *settings = ResourceManager::instance ()->settings ();
 
   switch (event->getNumeric ())
     {
     case RPL_MOTDSTART:
     case RPL_MOTD:
     case ERR_NOMOTD:
     case RPL_ENDOFMOTD:
-      if (settings.value ("showMessageOfTheDay").toBool ())
+      if (settings->value ("showMessageOfTheDay").toBool ())
 	m_chatWindow->append (QString ("<font color=\"#777777\">%1</font>").
 			      arg (event->getParam (1)));
       break;
     case RPL_NOTOPIC:
     case RPL_TOPIC:
-      if (settings.value ("showTopic").toBool ())
+      if (settings->value ("showTopic").toBool ())
 	m_chatWindow->
 	  append (QString ("<font color=\"#000088\"><b>%1</b></font>").
 		  arg (event->getParam (2)));
       break;
     case RPL_NAMREPLY:
       m_chatWindow->
 	append (QString ("<font color=\"#000088\">Users online: %1</font>").
 		arg (event->getParam (3)));
diff --git a/gui/src/IRCWidget.h b/gui/src/IRCWidget.h
--- a/gui/src/IRCWidget.h
+++ b/gui/src/IRCWidget.h
@@ -24,17 +24,17 @@
 #include <QPushButton>
 #include <QLineEdit>
 #include <QCompleter>
 #include "IRCClient.h"
 
 class IRCWidget:public QWidget
 {
 Q_OBJECT public:
-  explicit IRCWidget (QWidget * parent, QString settingsFile);
+  explicit IRCWidget (QWidget * parent);
   void connectToServer ();
 
     signals:public slots:void showStatusMessage (const char *);
   void joinOctaveChannel (const char *);
   void loginSuccessful (const char *);
   void showPrivateMessage (const char *, const char *, const char *);
   void showNotice (const char *, const char *, const char *);
   void showTopic (const char *, const char *, const char *);
diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -28,18 +28,16 @@
 #include "SettingsDialog.h"
 #include "cmd-edit.h"
 
 #define VERSION_STRING "Octave GUI (0.6.0)"
 
 MainWindow::MainWindow (QWidget * parent):QMainWindow (parent),
 m_isRunning (true)
 {
-  QDesktopServices desktopServices;
-  m_settingsFile = desktopServices.storageLocation (QDesktopServices::HomeLocation) + "/.quint/settings.ini";
   construct ();
   establishOctaveLink ();
 }
 
 MainWindow::~MainWindow ()
 {
 }
 
@@ -73,35 +71,29 @@ void
 MainWindow::openWebPage (QString url)
 {
   m_documentationWidget->load (QUrl (url));
 }
 
 void
 MainWindow::handleSaveWorkspaceRequest ()
 {
-  QDesktopServices desktopServices;
   QString selectedFile =
     QFileDialog::getSaveFileName (this, tr ("Save Workspace"),
-				  desktopServices.
-				  storageLocation (QDesktopServices::
-                                                   HomeLocation));
+                                  ResourceManager::instance ()->homePath ());
   m_octaveTerminal->sendText (QString ("save \'%1\'\n").arg (selectedFile));
   m_octaveTerminal->setFocus ();
 }
 
 void
 MainWindow::handleLoadWorkspaceRequest ()
 {
-  QDesktopServices desktopServices;
   QString selectedFile =
     QFileDialog::getOpenFileName (this, tr ("Load Workspace"),
-				  desktopServices.
-				  storageLocation (QDesktopServices::
-                                                   HomeLocation));
+                                  ResourceManager::instance ()->homePath ());
   m_octaveTerminal->sendText (QString ("load \'%1\'\n").arg (selectedFile));
   m_octaveTerminal->setFocus ();
 }
 
 void
 MainWindow::handleClearWorkspaceRequest ()
 {
   m_octaveTerminal->sendText ("clear\n");
@@ -145,17 +137,17 @@ void
 MainWindow::openOctaveForgePage ()
 {
   QDesktopServices::openUrl (QUrl ("http://octave.sourceforge.net/"));
 }
 
 void
 MainWindow::processSettingsDialogRequest ()
 {
-  SettingsDialog settingsDialog (this, m_settingsFile);
+  SettingsDialog settingsDialog (this);
   settingsDialog.exec ();
   emit settingsChanged ();
 }
 
 void
 MainWindow::closeEvent (QCloseEvent * closeEvent)
 {
   m_isRunning = false;
@@ -167,30 +159,30 @@ MainWindow::closeEvent (QCloseEvent * cl
 
   m_octaveMainThread->terminate ();
   QMainWindow::closeEvent (closeEvent);
 }
 
 void
 MainWindow::readSettings ()
 {
-  QSettings settings (m_settingsFile, QSettings::IniFormat);
-  restoreGeometry (settings.value ("MainWindow/geometry").toByteArray ());
-  restoreState (settings.value ("MainWindow/windowState").toByteArray ());
-  m_centralMdiArea->restoreGeometry (settings.value ("MdiArea/geometry").toByteArray ());
+  QSettings *settings = ResourceManager::instance ()->settings ();
+  restoreGeometry (settings->value ("MainWindow/geometry").toByteArray ());
+  restoreState (settings->value ("MainWindow/windowState").toByteArray ());
+  m_centralMdiArea->restoreGeometry (settings->value ("MdiArea/geometry").toByteArray ());
   emit settingsChanged ();
 }
 
 void
 MainWindow::writeSettings ()
 {
-  QSettings settings (m_settingsFile, QSettings::IniFormat);
-  settings.setValue ("MainWindow/geometry", saveGeometry ());
-  settings.setValue ("MainWindow/windowState", saveState ());
-  settings.setValue ("MdiArea/geometry", m_centralMdiArea->saveGeometry ());
+  QSettings *settings = ResourceManager::instance ()->settings ();
+  settings->setValue ("MainWindow/geometry", saveGeometry ());
+  settings->setValue ("MainWindow/windowState", saveState ());
+  settings->setValue ("MdiArea/geometry", m_centralMdiArea->saveGeometry ());
 }
 
 void
 MainWindow::construct ()
 {
 
   if (QFile::exists ("../media/logo.png"))
     setWindowIcon (QIcon ("../media/logo.png"));
@@ -206,17 +198,17 @@ MainWindow::construct ()
   m_variablesDockWidget = new VariablesDockWidget (this);
   m_historyDockWidget = new HistoryDockWidget (this);
   m_filesDockWidget = new FilesDockWidget (this);
   m_statusBar = new QStatusBar (this);
 
   // Setup essential MDI Windows.
   m_octaveTerminal = new OctaveTerminal (this);
   m_documentationWidget = new BrowserWidget (this);
-  m_ircWidget = new IRCWidget (this, m_settingsFile);
+  m_ircWidget = new IRCWidget (this);
 
   m_documentationWidgetSubWindow =
     m_centralMdiArea->addSubWindow (m_documentationWidget,
 				    Qt::WindowTitleHint | Qt::
 				    WindowMinMaxButtonsHint);
   m_documentationWidgetSubWindow->
     setObjectName ("DocumentationWidgetSubWindow");
   m_documentationWidgetSubWindow->setWindowTitle (tr ("Documentation"));
diff --git a/gui/src/MainWindow.h b/gui/src/MainWindow.h
--- a/gui/src/MainWindow.h
+++ b/gui/src/MainWindow.h
@@ -21,16 +21,17 @@
 
 #include <QtGui/QMainWindow>
 #include <QThread>
 #include <QTabWidget>
 #include <QMdiArea>
 #include <QStatusBar>
 #include <QToolBar>
 #include <QQueue>
+#include "ResourceManager.h"
 #include "OctaveTerminal.h"
 #include "OctaveLink.h"
 #include "VariablesDockWidget.h"
 #include "HistoryDockWidget.h"
 #include "FilesDockWidget.h"
 #include "BrowserWidget.h"
 #include "IRCWidget.h"
 
@@ -108,18 +109,16 @@ private:
   // Dock widgets.
   VariablesDockWidget *m_variablesDockWidget;
   HistoryDockWidget *m_historyDockWidget;
   FilesDockWidget *m_filesDockWidget;
 
   // Toolbars.
   QStatusBar *m_statusBar;
 
-  QString m_settingsFile;
-
   // Threads for running octave and managing the data interaction.
   OctaveMainThread *m_octaveMainThread;
   OctaveCallbackThread *m_octaveCallbackThread;
   bool m_isRunning;
 };
 
 class OctaveMainThread:public QThread
 {
diff --git a/gui/src/OctaveGUI.cpp b/gui/src/OctaveGUI.cpp
--- a/gui/src/OctaveGUI.cpp
+++ b/gui/src/OctaveGUI.cpp
@@ -14,37 +14,25 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include <QtGui/QApplication>
 #include <QTranslator>
 #include <QSettings>
+#include "ResourceManager.h"
 #include "MainWindow.h"
 
 int
 main (int argc, char *argv[])
 {
   QApplication application (argc, argv);
-  QDesktopServices desktopServices;
-  QSettings settings (desktopServices.
-		      storageLocation (QDesktopServices::HomeLocation) +
-		      "/.quint/settings.ini", QSettings::IniFormat);
+  // QSettings *settings = ResourceManager::instance ()->instance ();
 
-  QTranslator translator;
-  QString translatorFile =
-    QString ("../languages/%1.qm").arg (settings.
-					value ("application/language").
-					toString ());
-  if (!QFile::exists (translatorFile))
-    translatorFile =
-      QString ("/usr/share/octave/quint/languages/%1.qm").arg (settings.
-							       value
-							       ("application/language").
-							       toString ());
-  translator.load (translatorFile);
-  application.installTranslator (&translator);
+  // TODO: reimplement translation.
+  // translator.load (translatorFile);
+  // application.installTranslator (&translator);
 
   MainWindow w;
   w.show ();
   return application.exec ();
 }
diff --git a/gui/src/ResourceManager.cpp b/gui/src/ResourceManager.cpp
new file mode 100644
--- /dev/null
+++ b/gui/src/ResourceManager.cpp
@@ -0,0 +1,27 @@
+#include "ResourceManager.h"
+
+ResourceManager ResourceManager::m_singleton;
+
+ResourceManager::ResourceManager ()
+{
+  QDesktopServices desktopServices;
+  m_homePath = desktopServices.storageLocation (QDesktopServices::HomeLocation);
+  m_settings = new QSettings (m_homePath + "/.octave-gui", QSettings::IniFormat);
+}
+
+ResourceManager::~ResourceManager ()
+{
+  delete m_settings;
+}
+
+QSettings *
+ResourceManager::settings ()
+{
+  return m_settings;
+}
+
+QString
+ResourceManager::homePath ()
+{
+  return m_homePath;
+}
diff --git a/gui/src/ResourceManager.h b/gui/src/ResourceManager.h
new file mode 100644
--- /dev/null
+++ b/gui/src/ResourceManager.h
@@ -0,0 +1,28 @@
+#ifndef RESOURCEMANAGER_H
+#define RESOURCEMANAGER_H
+
+#include <QSettings>
+#include <QDesktopServices>
+
+class ResourceManager
+{
+public:
+  ~ResourceManager ();
+
+  static ResourceManager *
+  instance ()
+  {
+    return &m_singleton;
+  }
+
+  QSettings *settings ();
+  QString homePath ();
+private:
+  ResourceManager ();
+
+  QSettings *m_settings;
+  QString m_homePath;
+  static ResourceManager m_singleton;
+};
+
+#endif // RESOURCEMANAGER_H
diff --git a/gui/src/SettingsDialog.cpp b/gui/src/SettingsDialog.cpp
--- a/gui/src/SettingsDialog.cpp
+++ b/gui/src/SettingsDialog.cpp
@@ -1,44 +1,44 @@
+#include "ResourceManager.h"
 #include "SettingsDialog.h"
 #include "ui_SettingsDialog.h"
 #include <QSettings>
 
-SettingsDialog::SettingsDialog (QWidget * parent, QString settingsFile):
+SettingsDialog::SettingsDialog (QWidget * parent):
 QDialog (parent), ui (new Ui::SettingsDialog)
 {
-  m_settingsFile = settingsFile;
   ui->setupUi (this);
 
-  QSettings settings (m_settingsFile, QSettings::IniFormat);
-  ui->connectOnStartup->setChecked (settings.value ("connectOnStartup").toBool ());
-  ui->showMessageOfTheDay->setChecked (settings.value ("showMessageOfTheDay").toBool ());
-  ui->showTopic->setChecked (settings.value ("showTopic").toBool ());
-  ui->autoIdentification->setChecked (settings.value ("autoIdentification").toBool ());
-  ui->nickServPassword->setText (settings.value ("nickServPassword").toString ());
-  ui->useCustomFileEditor->setChecked (settings.value ("useCustomFileEditor").toBool ());
-  ui->customFileEditor->setText (settings.value ("customFileEditor").toString ());
-  ui->showFilenames->setChecked (settings.value ("showFilenames").toBool());
-  ui->showFileSize->setChecked (settings.value ("showFileSize").toBool());
-  ui->showFileType->setChecked (settings.value ("showFileType").toBool());
-  ui->showLastModified->setChecked (settings.value ("showLastModified").toBool());
-  ui->showHiddenFiles->setChecked (settings.value ("showHiddenFiles").toBool());
-  ui->useAlternatingRowColors->setChecked (settings.value ("useAlternatingRowColors").toBool());
+  QSettings *settings = ResourceManager::instance ()->settings ();
+  ui->connectOnStartup->setChecked (settings->value ("connectOnStartup").toBool ());
+  ui->showMessageOfTheDay->setChecked (settings->value ("showMessageOfTheDay").toBool ());
+  ui->showTopic->setChecked (settings->value ("showTopic").toBool ());
+  ui->autoIdentification->setChecked (settings->value ("autoIdentification").toBool ());
+  ui->nickServPassword->setText (settings->value ("nickServPassword").toString ());
+  ui->useCustomFileEditor->setChecked (settings->value ("useCustomFileEditor").toBool ());
+  ui->customFileEditor->setText (settings->value ("customFileEditor").toString ());
+  ui->showFilenames->setChecked (settings->value ("showFilenames").toBool());
+  ui->showFileSize->setChecked (settings->value ("showFileSize").toBool());
+  ui->showFileType->setChecked (settings->value ("showFileType").toBool());
+  ui->showLastModified->setChecked (settings->value ("showLastModified").toBool());
+  ui->showHiddenFiles->setChecked (settings->value ("showHiddenFiles").toBool());
+  ui->useAlternatingRowColors->setChecked (settings->value ("useAlternatingRowColors").toBool());
 }
 
 SettingsDialog::~SettingsDialog ()
 {
-  QSettings settings (m_settingsFile, QSettings::IniFormat);
-  settings.setValue ("connectOnStartup", ui->connectOnStartup->isChecked ());
-  settings.setValue ("showMessageOfTheDay", ui->showMessageOfTheDay->isChecked ());
-  settings.setValue ("showTopic", ui->showTopic->isChecked ());
-  settings.setValue ("autoIdentification", ui->autoIdentification->isChecked ());
-  settings.setValue ("nickServPassword", ui->nickServPassword->text ());
-  settings.setValue ("useCustomFileEditor", ui->useCustomFileEditor->isChecked ());
-  settings.setValue ("customFileEditor", ui->customFileEditor->text ());
-  settings.setValue ("showFilenames", ui->showFilenames->isChecked ());
-  settings.setValue ("showFileSize", ui->showFileSize->isChecked ());
-  settings.setValue ("showFileType", ui->showFileType->isChecked ());
-  settings.setValue ("showLastModified", ui->showLastModified->isChecked ());
-  settings.setValue ("showHiddenFiles", ui->showHiddenFiles->isChecked ());
-  settings.setValue ("useAlternatingRowColors", ui->useAlternatingRowColors->isChecked ());
+  QSettings *settings = ResourceManager::instance ()->settings ();
+  settings->setValue ("connectOnStartup", ui->connectOnStartup->isChecked ());
+  settings->setValue ("showMessageOfTheDay", ui->showMessageOfTheDay->isChecked ());
+  settings->setValue ("showTopic", ui->showTopic->isChecked ());
+  settings->setValue ("autoIdentification", ui->autoIdentification->isChecked ());
+  settings->setValue ("nickServPassword", ui->nickServPassword->text ());
+  settings->setValue ("useCustomFileEditor", ui->useCustomFileEditor->isChecked ());
+  settings->setValue ("customFileEditor", ui->customFileEditor->text ());
+  settings->setValue ("showFilenames", ui->showFilenames->isChecked ());
+  settings->setValue ("showFileSize", ui->showFileSize->isChecked ());
+  settings->setValue ("showFileType", ui->showFileType->isChecked ());
+  settings->setValue ("showLastModified", ui->showLastModified->isChecked ());
+  settings->setValue ("showHiddenFiles", ui->showHiddenFiles->isChecked ());
+  settings->setValue ("useAlternatingRowColors", ui->useAlternatingRowColors->isChecked ());
   delete ui;
 }
diff --git a/gui/src/SettingsDialog.h b/gui/src/SettingsDialog.h
--- a/gui/src/SettingsDialog.h
+++ b/gui/src/SettingsDialog.h
@@ -6,17 +6,16 @@
 namespace Ui
 {
   class SettingsDialog;
 }
 
 class SettingsDialog:public QDialog
 {
 Q_OBJECT public:
-  explicit SettingsDialog (QWidget * parent, QString settingsFile);
+  explicit SettingsDialog (QWidget * parent);
   ~SettingsDialog ();
 
 private:
   Ui::SettingsDialog * ui;
-  QString m_settingsFile;
 };
 
 #endif // SETTINGSDIALOG_H
diff --git a/gui/src/SettingsDialog.ui b/gui/src/SettingsDialog.ui
--- a/gui/src/SettingsDialog.ui
+++ b/gui/src/SettingsDialog.ui
@@ -70,17 +70,17 @@
            <property name="text">
             <string>Automatically identify on NickServ</string>
            </property>
           </widget>
          </item>
          <item>
           <widget class="QLabel" name="label_2">
            <property name="text">
-            <string>Warning: Your password will be stored in ~/.quint/ in human-readable format. Do not enter your password if you worry about security issues.</string>
+            <string>Warning: Your password will be stored in ~/.octavegui in human-readable format. Do not enter your password if you worry about security issues.</string>
            </property>
            <property name="wordWrap">
             <bool>true</bool>
            </property>
           </widget>
          </item>
          <item>
           <layout class="QHBoxLayout" name="horizontalLayout">
