# HG changeset patch
# User John Donoghue
# Date 1432314272 14400
#      Fri May 22 13:04:32 2015 -0400
# Node ID dd2f547c21a0408b15b7aca13029b17696c0f4f3
# Parent  03cebe1fb0e3a65b89413702b6871e7e4104632b
QtHandles: firie listbox callback on click of selected item (Bug #44748)

* libgui/graphics/ListBoxControl.h, libgui/graphics/ListBoxControl.cc
  (class ListBoxControl) new variable m_selectionChanged
  (ListBoxControl::itemActivated): new function
  (ListBoxControl::itemPressed): new function
  (ListBoxControl::ListBoxControl): connect slots itemActivated, itemPressed
  (ListBoxControl::itemSelectionChanged) set selectionChanged flag, move old content to sendSelectionChange.
  (ListBoxControl::sendSelectionChange) new function.
  (ListBoxControl::eventFilter) new function.

* libgui/graphics/PopupMenuControl.cc
  (PopupMenuControl::PopupMenuControl): use activated instead of currentIndexChanged signal

diff --git a/libgui/graphics/ListBoxControl.cc b/libgui/graphics/ListBoxControl.cc
--- a/libgui/graphics/ListBoxControl.cc
+++ b/libgui/graphics/ListBoxControl.cc
@@ -20,16 +20,18 @@ along with Octave; see the file COPYING.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <QListWidget>
+#include <QEvent>
+#include <QMouseEvent>
 
 #include "Container.h"
 #include "ListBoxControl.h"
 #include "QtHandlesUtils.h"
 
 namespace QtHandles
 {
 
@@ -74,17 +76,17 @@ namespace QtHandles
         if (container)
           return new ListBoxControl (go, new QListWidget (container));
       }
 
     return 0;
   }
 
   ListBoxControl::ListBoxControl (const graphics_object& go, QListWidget* list)
-    : BaseControl (go, list), m_blockCallback (false)
+    : BaseControl (go, list), m_blockCallback (false), m_selectionChanged (false)
   {
     uicontrol::properties& up = properties<uicontrol> ();
 
     list->addItems (Utils::fromStringVector (up.get_string_vector ()));
     if ((up.get_max () - up.get_min ()) > 1)
       list->setSelectionMode (QAbstractItemView::ExtendedSelection);
     else
       list->setSelectionMode (QAbstractItemView::SingleSelection);
@@ -104,21 +106,24 @@ namespace QtHandles
                 list->scrollToItem (list->item (idx-1));
                 if (i == 0 && (list->selectionMode ()
                                == QAbstractItemView::SingleSelection))
                   break;
               }
           }
       }
 
-    list->removeEventFilter (this);
     list->viewport ()->installEventFilter (this);
 
     connect (list, SIGNAL (itemSelectionChanged (void)),
              SLOT (itemSelectionChanged (void)));
+    connect (list, SIGNAL (activated (const QModelIndex &)),
+             SLOT (itemActivated (const QModelIndex &)));
+    connect (list, SIGNAL (itemPressed (QListWidgetItem*)),
+           SLOT (itemPressed (QListWidgetItem*)));
   }
 
   ListBoxControl::~ListBoxControl (void)
   { }
 
   void
   ListBoxControl::update (int pId)
   {
@@ -152,28 +157,116 @@ namespace QtHandles
 
       default:
         BaseControl::update (pId);
         break;
       }
   }
 
   void
-  ListBoxControl::itemSelectionChanged (void)
+  ListBoxControl::sendSelectionChange()
   {
     if (! m_blockCallback)
       {
         QListWidget* list = qWidget<QListWidget> ();
 
         QModelIndexList l = list->selectionModel ()->selectedIndexes ();
         Matrix value (dim_vector (1, l.size ()));
         int i = 0;
 
         foreach (const QModelIndex& idx, l)
         value(i++) = (idx.row () + 1);
 
         gh_manager::post_set (m_handle, "value", octave_value (value), false);
         gh_manager::post_callback (m_handle, "callback");
       }
+
+      m_selectionChanged = false;
+  }
+
+  void
+  ListBoxControl::itemSelectionChanged (void)
+  {
+    if (! m_blockCallback)
+      m_selectionChanged = true;
+  }
+
+  void 
+  ListBoxControl::itemActivated (const QModelIndex &)
+  {
+    m_selectionChanged = true;
+  }
+  void 
+  ListBoxControl::itemPressed (QListWidgetItem*)
+  {
+    m_selectionChanged = true;
   }
 
+  bool 
+  ListBoxControl::eventFilter (QObject* watched, QEvent* e)
+  {
+    // listbox change
+    if (watched == m_qobject)
+      {
+        switch (e->type ())
+          {
+            case QEvent::KeyRelease:
+              if (m_selectionChanged)
+                sendSelectionChange ();
+              m_selectionChanged = false;
+              break;
+ 
+            default:
+              break;
+          } 
+          
+        return Object::eventFilter (watched, e);
+      }
+    // listbox viewport
+    else
+      {
+        bool override_return = false;
+        QListWidget* list = qWidget<QListWidget> ();
+
+        switch (e->type ())
+          {
+            case QEvent::MouseButtonPress: 
+              {
+                QMouseEvent* m = dynamic_cast<QMouseEvent*> (e);
+
+                if (m->button () & Qt::RightButton)
+                  override_return = true;
+                else
+                  {
+                    if(!list->indexAt(m->pos()).isValid()) override_return = true;
+                    m_selectionChanged = true;
+                  }
+                break;
+              }
+            case QEvent::MouseButtonRelease:
+              {
+                QMouseEvent* m = dynamic_cast<QMouseEvent*> (e);
+  
+                if (m->button () & Qt::RightButton)
+                  override_return = true;
+
+                else if(!list->indexAt(m->pos()).isValid()) 
+                  {
+                    list->setCurrentRow(list->count()-1); 
+                    override_return = true;
+                  }
+
+                if (m_selectionChanged)
+                  sendSelectionChange ();
+                m_selectionChanged = false;
+              
+                break;
+              }
+            default:
+              break;
+ 
+          }
+        return BaseControl::eventFilter (watched, e) || override_return;
+      }
+  }
 }
 
+
diff --git a/libgui/graphics/ListBoxControl.h b/libgui/graphics/ListBoxControl.h
--- a/libgui/graphics/ListBoxControl.h
+++ b/libgui/graphics/ListBoxControl.h
@@ -21,36 +21,43 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_ListBoxControl_h)
 #define octave_ListBoxControl_h 1
 
 #include "BaseControl.h"
 
 class QListWidget;
+class QListWidgetItem;
+class QModelIndex;
 
 namespace QtHandles
 {
 
   class ListBoxControl : public BaseControl
   {
     Q_OBJECT
 
   public:
     ListBoxControl (const graphics_object& go, QListWidget* list);
     ~ListBoxControl (void);
 
     static ListBoxControl* create (const graphics_object& go);
 
   protected:
     void update (int pId);
+    bool eventFilter (QObject* watched, QEvent* e);
+    void sendSelectionChange();
 
   private slots:
     void itemSelectionChanged (void);
+    void itemActivated (const QModelIndex &);
+    void itemPressed (QListWidgetItem*);
 
   private:
     bool m_blockCallback;
+    bool m_selectionChanged;
   };
 
 }
 
 #endif
 
diff --git a/libgui/graphics/PopupMenuControl.cc b/libgui/graphics/PopupMenuControl.cc
--- a/libgui/graphics/PopupMenuControl.cc
+++ b/libgui/graphics/PopupMenuControl.cc
@@ -53,17 +53,17 @@ namespace QtHandles
     : BaseControl (go, box), m_blockUpdate (false)
   {
     uicontrol::properties& up = properties<uicontrol> ();
 
     box->addItems (Utils::fromStdString (up.get_string_string ()).split ('|'));
 
     update (uicontrol::properties::ID_VALUE);
 
-    connect (box, SIGNAL (currentIndexChanged (int)),
+    connect (box, SIGNAL (activated (int)),
              SLOT (currentIndexChanged (int)));
   }
 
   PopupMenuControl::~PopupMenuControl (void)
   { }
 
   void PopupMenuControl::update (int pId)
   {
