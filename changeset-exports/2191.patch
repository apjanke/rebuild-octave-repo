# HG changeset patch
# User jwe
# Date 832062076 0
#      Tue May 14 08:21:16 1996 +0000
# Node ID 24bd930153238318c573057fd99364be44cab18d
# Parent  c0ec4630bd31edd80f7f365ffde0c196a5dd0673
[project @ 1996-05-14 08:19:42 by jwe]

diff --git a/src/arith-ops.cc b/src/arith-ops.cc
--- a/src/arith-ops.cc
+++ b/src/arith-ops.cc
@@ -35,20 +35,23 @@ Software Foundation, 59 Temple Place - S
 #include "mappers.h"
 #include "pt-const.h"
 #include "unwind-prot.h"
 #include "user-prefs.h"
 #include "utils.h"
 #include "xdiv.h"
 #include "xpow.h"
 
+// Allow divide by zero errors to be suppressed.
+static bool Vwarn_divide_by_zero;
+
 #define DIVIDE_BY_ZERO_ERROR \
   do \
     { \
-      if (user_pref.warn_divide_by_zero) \
+      if (Vwarn_divide_by_zero) \
         warning ("division by zero"); \
     } \
   while (0)
 
 // But first, some stupid functions that don't deserve to be in the
 // Matrix class...
 
 enum
@@ -2808,13 +2811,28 @@ do_binary_op (const ComplexMatrix& a, co
   assert (result_type != RT_unknown);
 
   if (result_type == RT_real)
     return octave_value (result);
   else
     return octave_value (complex_result);
 }
 
+static int
+warn_divide_by_zero (void)
+{
+  Vwarn_divide_by_zero = check_preference ("warn_divide_by_zero");
+
+  return 0;
+}
+
+void
+symbols_of_arith_ops (void)
+{
+  DEFVAR (warn_divide_by_zero, 1.0, 0, warn_divide_by_zero,
+    "If TRUE, warn about division by zero");
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/arith-ops.h b/src/arith-ops.h
--- a/src/arith-ops.h
+++ b/src/arith-ops.h
@@ -84,15 +84,17 @@ extern octave_value do_binary_op (const 
 
 extern octave_value do_binary_op (const ComplexMatrix& a, const Complex& b,
 				   tree_expression::type t); 
 
 extern octave_value do_binary_op (const ComplexMatrix& a,
 				   const ComplexMatrix& b,
 				   tree_expression::type t); 
 
+void symbols_of_arith_ops (void);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
