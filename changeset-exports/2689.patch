# HG changeset patch
# User jwe
# Date 856256952 0
#      Tue Feb 18 09:09:12 1997 +0000
# Node ID 8c7955a8d49f5ab8aedcf53b7ef13299f696d09c
# Parent  fe5e83216458d775332597c05e0315d0446a0dde
[project @ 1997-02-18 09:06:10 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+Tue Feb 18 00:33:36 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* examples/oregonator.m, examples/oregonator.cc: New files.
+	* examples/Makefile.in (SOURCES): Add them to the list.
+
 Fri Feb 14 14:07:08 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* install-octave: Don't fail if LIBRARIES file is missing.
 	Don't try to install .oct files if there aren't any.
 
 	* octMakefile.in (bin-dist-type): Delete target.
 	(binary-dist): Don't depend on bin-dist-type.
 	Don't delete config.status or config.h here.
diff --git a/doc/interpreter/Makefile.in b/doc/interpreter/Makefile.in
--- a/doc/interpreter/Makefile.in
+++ b/doc/interpreter/Makefile.in
@@ -42,17 +42,17 @@ else
   BINDISTFILES = $(srcdir)/octave.1 octave.info octave.info-[0-9]*
 endif
 
 # Look for version.h to get version information.
 xfiles := $(TOPDIR)/src/version.h $(srcdir)/$(TOPDIR)/src/version.h
 
 version_file := $(firstword $(foreach file, $(xfiles), $(wildcard $(file))))
 
-SPELL = $(patsubst %.texi, %.spell, $(ALL_TEXINFO))
+SPELL = $(patsubst %.texi, %.spell, $(TEXINFO))
 
 %.spell : %.texi
 	rm -f $@
 	sed -e 's/@@/ at /g' -e 's/@[a-zA-Z]*//g' $< | spell > $@.tmp
 	mv $@.tmp $@
 
 all: conf.texi octave.info octave.dvi octave.ps
 .PHONY: all
diff --git a/doc/interpreter/arith.texi b/doc/interpreter/arith.texi
--- a/doc/interpreter/arith.texi
+++ b/doc/interpreter/arith.texi
@@ -94,17 +94,17 @@ Compute the base-10 logarithm of @var{x}
 @end deftypefn
 
 @deftypefn {Mapping Function} {@var{y} =} log2 (@var{x})
 @deftypefnx {Mapping Function} {[@var{f}, @var{e}]} log2 (@var{x})
 Compute the base-2 logarithm of @var{x}.  With two outputs, returns
 @var{f} and @var{e} such that
 @iftex
 @tex
- $1/2 <= |f| < 1$ and $x = f * 2^e$.
+ $1/2 <= |f| < 1$ and $x = f \cdot 2^e$.
 @end tex
 @end iftex
 @ifinfo
  1/2 <= abs(f) < 1 and x = f * 2^e.
 @end ifinfo
 @end deftypefn
 
 @deftypefn {Loadable Function} {} max (@var{x})
@@ -149,17 +149,17 @@ With one argument, computes
 @end tex
 @end iftex
 @ifinfo
  2 .^ x
 @end ifinfo
 for each element of @var{x}.  With two arguments, returns
 @iftex
 @tex
- $f 2^e$.
+ $f \cdot 2^e$.
 @end tex
 @end iftex
 @ifinfo
  f .* (2 .^ e).
 @end ifinfo
 @end deftypefn
 
 @deftypefn {Mapping Function} {} rem (@var{x}, @var{y})
@@ -204,42 +204,98 @@ For complex arguments, @code{sign} retur
 Compute the square root of @var{x}.  If @var{x} is negative, a complex
 result is returned.  To compute the matrix square root, see
 @ref{Linear Algebra}.
 @end deftypefn
 
 @deftypefn {Mapping Function} {} xor (@var{x}, @var{y})
 Return the `exclusive or' of the entries of @var{x} and @var{y}.
 For boolean expressions @var{x} and @var{y},
-@code{xor (@var{x}, @var{y})} is true if and only if either @var{x} or
-@var{y} is true.
+@code{xor (@var{x}, @var{y})} is true if and only if @var{x} or @var{y}
+is true, but not if both @var{x} and @var{y} are true.
 @end deftypefn
 
 @node Complex Arithmetic, Trigonometry, Utility Functions, Arithmetic
 @section Complex Arithmetic
 
 The following functions are available for working with complex
 numbers.  Each expects a single argument.  Given a matrix they work on
-an element by element basis.
+an element by element basis.  In the descriptions of the following
+functions,
+@iftex
+@tex
+$z$ is the complex number $x + iy$, where $i$ is defined as
+$\sqrt{-1}$.
+@end tex
+@end iftex
+@ifinfo
+@var{z} is the complex number @var{x} + @var{i}@var{y}, where @var{i} is
+defined as @code{sqrt (-1)}.
+@end ifinfo
 
 @deftypefn {Mapping Function} {} abs (@var{z})
-Compute the magnitude of @var{z}.
+Compute the magnitude of @var{z}, defined as
+@iftex
+@tex
+$|z| = \sqrt{x^2 + y^2}$.
+@end tex
+@end iftex
+@ifinfo
+|@var{z}| = @code{sqrt (x^2 + y^2)}.
+@end ifinfo
+
+For example,
+
+@example
+@group
+abs (3 + 4i)
+     @result{} 5
+@end group
+@end example
 @end deftypefn
 
 @deftypefn {Mapping Function} {} arg (@var{z})
 @deftypefnx {Mapping Function} {} angle (@var{z})
-Compute the argument of @var{z}.
+Compute the argument of @var{z}, defined as
+@iftex
+@tex
+$\theta = \tan^{-1}(y/x)$.
+@end tex
+@end iftex
+@ifinfo
+@var{theta} = @code{atan (@var{y}/@var{x})}.
+@end ifinfo
+
+@noindent
+in radians. 
+
+For example,
+
+@example
+@group
+arg (3 + 4i)
+     @result{} 0.92730
+@end group
+@end example
 @end deftypefn
 
 @deftypefn {Mapping Function} {} conj (@var{z})
-Return the complex conjugate of @var{z}.
+Return the complex conjugate of @var{z}, defined as
+@iftex
+@tex
+$\bar{z} = x - iy$.
+@end tex
+@end iftex
+@ifinfo
+@code{conj (@var{z})} = @var{x} - @var{i}@var{y}.
+@end ifinfo
 @end deftypefn
 
 @deftypefn {Mapping Function} {} imag (@var{z})
-Return the imaginary part of @var{z}.
+Return the imaginary part of @var{z} as a real number.
 @end deftypefn
 
 @deftypefn {Mapping Function} {} real (@var{z})
 Return the real part of @var{z}.
 @end deftypefn
 
 @node Trigonometry, Sums and Products, Complex Arithmetic, Arithmetic
 @section Trigonometry
@@ -397,17 +453,45 @@ betai (a, b, x) = beta (a, b)^(-1) | t^(
 @end ifinfo
 
 If x has more than one component, both @var{a} and @var{b} must be
 scalars.  If @var{x} is a scalar, @var{a} and @var{b} must be of
 compatible dimensions.
 @end deftypefn
 
 @deftypefn {Mapping Function} {} bincoeff (@var{n}, @var{k})
-Returns the binomial coefficient of @var{n} and @var{k}.
+Returns the binomial coefficient of @var{n} and @var{k}, defined as
+@iftex
+@tex
+$$
+ {n \choose k} = {n (n-1) (n-2) \cdots (n-k+1) \over k!}
+$$
+@end tex
+@end iftex
+@ifinfo
+
+@example
+@group
+ /   \
+ | n |    n (n-1) (n-2) ... (n-k+1)
+ |   |  = -------------------------
+ | k |               k!
+ \   /
+@end group
+@end example
+@end ifinfo
+
+For example,
+
+@example
+@group
+bincoeff (5, 2)
+     @result{} 10
+@end group
+@end example
 @end deftypefn
 
 @deftypefn {Mapping Function} {} erf (@var{z})
 Computes the error function,
 @iftex
 @tex
 $$
  {\rm erf} (z) = {2 \over \sqrt{\pi}}\int_0^z e^{-t^2} dt
@@ -422,21 +506,29 @@ Computes the error function,
 erf (z) = (2/sqrt (pi)) | e^(-t^2) dt
                         /
                      t=0
 @end smallexample
 @end ifinfo
 @end deftypefn
 
 @deftypefn {Mapping Function} {} erfc (@var{z})
-Computes the complementary error function, @code{1 - erf (@var{z})}.
+Computes the complementary error function,
+@iftex
+@tex
+$1 - {\rm erf} (z)$.
+@end tex
+@end iftex
+@ifinfo
+@code{1 - erf (@var{z})}.
+@end ifinfo
 @end deftypefn
 
 @deftypefn {Mapping Function} {} erfinv (@var{z})
-Computes the inverse of the error function.
+Computes the inverse of the error function,
 @end deftypefn
 
 @deftypefn {Mapping Function} {} gamma (@var{z})
 Computes the Gamma function,
 @iftex
 @tex
 $$
  \Gamma (z) = \int_0^\infty t^{z-1} e^{-t} dt.
@@ -455,17 +547,17 @@ gamma (z) = | t^(z-1) exp (-t) dt.
 @end ifinfo
 @end deftypefn
 
 @deftypefn {Mapping Function} {} gammai (@var{a}, @var{x})
 Computes the incomplete gamma function,
 @iftex
 @tex
 $$
- \gamma (a, x) = {\int_0^x e^{-t} t^{a-1} dt \over \Gamma (a)}
+ \gamma (a, x) = {\displaystyle\int_0^x e^{-t} t^{a-1} dt \over \Gamma (a)}
 $$
 @end tex
 @end iftex
 @ifinfo
 
 @smallexample
                               x
                     1        /
@@ -484,24 +576,31 @@ If neither @var{a} nor @var{x} is scalar
 
 @deftypefn {Mapping Function} {} lgamma (@var{a}, @var{x})
 @deftypefnx {Mapping Function} {} gammaln (@var{a}, @var{x})
 Returns the natural logarithm of the gamma function.
 @end deftypefn
 
 @deftypefn {Function File} {} cross (@var{x}, @var{y})
 Computes the vector cross product of the two 3-dimensional vectors
-@var{x} and @var{y}.
+@var{x} and @var{y}.  For example,
+
+@example
+@group
+cross ([1,1,0], [0,1,1])
+     @result{} [ 1; -1; 1 ]
+@end group
+@end example
 @end deftypefn
 
 @deftypefn {Function File} {} commutation_matrix (@var{m}, @var{n})
 Returns the commutation matrix
 @iftex
+@tex
  $K_{m,n}$
-@tex
 @end tex
 @end iftex
 @ifinfo
  K(m,n)
 @end ifinfo
  which is the unique
 @iftex
 @tex
@@ -509,17 +608,17 @@ Returns the commutation matrix
 @end tex
 @end iftex
 @ifinfo
  @var{m}*@var{n} by @var{m}*@var{n}
 @end ifinfo
  matrix such that
 @iftex
 @tex
- $K_{m,n} * {\rm vec} (A) = {\rm vec} (A^T)$
+ $K_{m,n} \cdot {\rm vec} (A) = {\rm vec} (A^T)$
 @end tex
 @end iftex
 @ifinfo
  @var{K}(@var{m},@var{n}) * vec (@var{A}) = vec (@var{A}')
 @end ifinfo
  for all
 @iftex
 @tex
@@ -575,23 +674,23 @@ Returns the duplication matrix
 @end ifinfo
  matrix such that
 @iftex
 @tex
  $D_n * {\rm vech} (A) = {\rm vec} (A)$
 @end tex
 @end iftex
 @ifinfo
- @var{D}_@var{n} * vech (@var{A}) = vec (@var{A})
+ @var{D}_@var{n} \cdot vech (@var{A}) = vec (@var{A})
 @end ifinfo
  for all symmetric
 @iftex
 @tex
+ $n \times n$
 @end tex
- $n \times n$
 @end iftex
 @ifinfo
  @var{n} by @var{n}
 @end ifinfo
  matrices
 @iftex
 @tex
  $A$.
@@ -631,34 +730,26 @@ cleared @xref{Status of Variables}.
 @defvr {Built-in Variable} Inf
 @defvrx {Built-in Variable} inf
 Infinity.  This is the result of an operation like 1/0, or an operation
 that results in a floating point overflow.
 @end defvr
 
 @defvr {Built-in Variable} NaN
 @defvrx {Built-in Variable} nan
-Not a number.  This is the result of an operation like @samp{0/0}, or
-@samp{Inf - Inf}, or any operation with a NaN.
-@end defvr
-
-@defvr {Built-in Variable} eps
-The machine precision.  More precisely, @code{eps} is the largest
-relative spacing between any two adjacent numbers in the machine's
-floating point system.  This number is obviously system-dependent.  On
-machines that support 64 bit IEEE floating point arithmetic, @code{eps}
-is approximately
-@ifinfo
- 2.2204e-16.
-@end ifinfo
+Not a number.  This is the result of an operation like
 @iftex
 @tex
- $2.2204\times10^{-16}$.
+$0/0$, or $\infty - \infty$,
 @end tex
 @end iftex
+@ifinfo
+0/0, or @samp{Inf - Inf},
+@end ifinfo
+or any operation with a NaN.
 @end defvr
 
 @defvr {Built-in Variable} pi
 The ratio of the circumference of a circle to its diameter.
 Internally, @code{pi} is computed as @samp{4.0 * atan (1.0)}.
 @end defvr
 
 @defvr {Built-in Variable} e
@@ -677,16 +768,32 @@ The base of natural logarithms.  The con
  $\log (e) = 1$.
 @end tex
 @end iftex
 @ifinfo
  @code{log} (@var{e}) = 1.
 @end ifinfo
 @end defvr
 
+@defvr {Built-in Variable} eps
+The machine precision.  More precisely, @code{eps} is the largest
+relative spacing between any two adjacent numbers in the machine's
+floating point system.  This number is obviously system-dependent.  On
+machines that support 64 bit IEEE floating point arithmetic, @code{eps}
+is approximately
+@ifinfo
+ 2.2204e-16.
+@end ifinfo
+@iftex
+@tex
+ $2.2204\times10^{-16}$.
+@end tex
+@end iftex
+@end defvr
+
 @defvr {Built-in Variable} realmax
 The largest floating point number that is representable.  The actual
 value is system-dependent.  On machines that support 64 bit IEEE
 floating point arithmetic, @code{realmax} is approximately
 @ifinfo
  1.7977e+308
 @end ifinfo
 @iftex
diff --git a/doc/interpreter/audio.texi b/doc/interpreter/audio.texi
--- a/doc/interpreter/audio.texi
+++ b/doc/interpreter/audio.texi
@@ -25,30 +25,27 @@ FAQ ftp site, in particular in the direc
 Octave simply treats audio data as vectors of samples (non-mono data are
 not supported yet).  It is assumed that audio files using linear
 encoding have one of the extensions @file{lin} or @file{raw}, and that
 files holding data in mu-law encoding end in @file{au}, @file{mu}, or
 @file{snd}.
 
 @deftypefn {Function File} {} lin2mu (@var{x})
 If the vector @var{x} represents mono audio data in 8- or 16-bit
-linear encoding, @code{lin2mu (@var{x})} is the correspoding mu-law
+linear encoding, @code{lin2mu (@var{x})} is the corresponding mu-law
 encoding.
 @end deftypefn
 
 @deftypefn {Function File} {} mu2lin (@var{x}, @var{bps})
 If the vector @var{x} represents mono audio data in mu-law encoding,
-@code{mu2lin (@var{x} [, @var{bps}])} converts it to linear encoding.
-The optional argument @var{bps} specifies whether the input data uses
-8 bit per sample (default) or 16 bit.
+@code{mu2lin} converts it to linear encoding.  The optional argument
+@var{bps} specifies whether the input data uses 8 bit per sample
+(default) or 16 bit.
 @end deftypefn
 
-@c XXX FIXME XXX -- ext and bps are optional, but we need to note the
-@c default values here too.
-
 @deftypefn {Function File} {} loadaudio (@var{name}, @var{ext}, @var{bps})
 Loads audio data from the file @file{@var{name}.@var{ext}} into the
 vector @var{x}.  
 
 The extension @var{ext} determines how the data in the audio file is
 interpreted;  the extensions @file{lin} (default) and @file{raw}
 correspond to linear, the extensions @file{au}, @file{mu}, or @file{snd}
 to mu-law encoding.
@@ -64,30 +61,30 @@ Saves a vector @var{x} of audio data to 
 in the audio file (see @code{loadaudio});  defaults are @file{lin} and
 8, respectively.
 @end deftypefn
 
 The following functions for audio I/O require special A/D hardware and
 operating system support.  It is assumed that audio data in linear
 encoding can be played and recorded by reading from and writing to
 @file{/dev/dsp}, and that similarly @file{/dev/audio} is used for mu-law
-encoding.  This definitely works on Linux systems, and should also work
-on Suns.  If your hardware is accessed differently, please contact
-Andreas Weingessel <Andreas.Weingessel@@ci.tuwien.ac.at>.
+encoding.  These file names are system-dependent.  Improvements so that
+these functions will work without modification on a wide variety of
+hardware are welcome.
 
 @deftypefn {Function File} {} playaudio (@var{name}, @var{ext})
 @deftypefnx {Function File} {} playaudio (@var{x})
-Plays the audio file @file{@var{name}.@var{ext}} or in the vector
-@var{x}.
+Plays the audio file @file{@var{name}.@var{ext}} or the audio data
+stored in the vector @var{x}.
 @end deftypefn
 
 @deftypefn {Function File} {} record (@var{sec}, @var{sampling_rate})
 Records @var{sec} seconds of audio input into the vector @var{x}.  The
 default value for @var{sampling_rate} is 8000 samples per second, or
-8kHz.  The program waits until the user types @kbd{RET} and then
+8kHz.  The program waits until the user types @key{RET} and then
 immediately starts to record.
 @end deftypefn
 
 @deftypefn {Function File} {} setaudio (@var{type})
 @deftypefnx {Function File} {} setaudio (@var{type}, @var{value})
 Set or display various properties of your mixer hardware.
 
 For example, if @code{vol} corresponds to the volume property, you can
diff --git a/doc/interpreter/basics.texi b/doc/interpreter/basics.texi
--- a/doc/interpreter/basics.texi
+++ b/doc/interpreter/basics.texi
@@ -65,49 +65,49 @@ probably only useful if you are actually
 @cindex @code{--echo-commands}
 @cindex @code{-x}
 Echo commands as they are executed.
 
 @item --exec-path @var{path}
 @cindex @code{--exec-path @var{path}}
 Specify the path to search for programs to run.  The value of @var{path}
 specified on the command line will override any value of
-@samp{OCTAVE_EXEC_PATH} found in the environment, but not any 
-@samp{EXEC_PATH = "path"} commands found in the system or user startup
-files.
+@code{OCTAVE_EXEC_PATH} found in the environment, but not any commands
+in the system or user startup files that set @code{EXEC_PATH}.
 
 @item --help
 @itemx -h
 @itemx -?
 @cindex @code{--help}
 @cindex @code{-h}
 @cindex @code{-?}
 Print short help message and exit.
 
 @item --info-file @var{filename}
 @cindex @code{--info-file @var{filename}}
 Specify the name of the info file to use.  The value of @var{filename}
 specified on the command line will override any value of
-@samp{OCTAVE_INFO_FILE} found in the environment, but not any
-@samp{INFO_FILE = "filename"} commands found in the system or user
-startup files.
+@code{OCTAVE_INFO_FILE} found in the environment, but not any commands
+in the system or user startup files that set @samp{INFO_FILE}.
 
 @item --info-program @var{program}
 @cindex @code{--info-program @var{program}}
 Specify the name of the info program to use.  The value of @var{program}
 specified on the command line will override any value of
-@samp{OCTAVE_INFO_PROGRAM} found in the environment, but not any
-@samp{INFO_PROGRAM = "program"} commands found in the system or user
-startup files.
+@code{OCTAVE_INFO_PROGRAM} found in the environment, but not any
+commands in the system or user startup files that set
+@code{INFO_PROGRAM}.
 
 @item --interactive
 @itemx -i
 @cindex @code{--interactive}
 @cindex @code{-i}
-Force interactive behavior.
+Force interactive behavior.  This can be useful for running Octave via a
+remote shell command or inside an Emacs shell buffer.  For another way
+to run Octave within Emacs, see @ref{Emacs}.
 
 @item --no-init-file
 @cindex @code{--no-init-file}
 Don't read the @file{~/.octaverc} or @file{.octaverc} files.
 
 @item --no-line-editing
 @cindex @code{--no-line-editing}
 Disable command-line editing and history.
@@ -125,27 +125,26 @@ This is equivalent to using both of the 
 and @code{--no-site-file}.
 
 @item --path @var{path}
 @itemx -p @var{path}
 @cindex @code{--path @var{path}}
 @cindex @code{-p @var{path}}
 Specify the path to search for function files.  The value of @var{path}
 specified on the command line will override any value of
-@samp{OCTAVE_PATH} found in the environment, but not any
-@samp{LOADPATH = "path"} commands found in the system or user startup
-files.
+@code{OCTAVE_PATH} found in the environment, but not any commands in the
+system or user startup files that set @code{LOADPATH}.
 
 @item --silent
 @itemx --quiet
 @itemx -q
 @cindex @code{--silent}
 @cindex @code{--quiet}
 @cindex @code{-q}
-Don't print message at startup.
+Don't print the usual greeting and version message at startup.
 
 @item --traditional
 @itemx --braindead
 @cindex @code{--traditional}
 @cindex @code{--braindead}
 Set initial values for user-preference variables to the following
 values for compatibility with @sc{Matlab}.
 
@@ -302,17 +301,30 @@ definitions.
 @deftypefn {Built-in Function} {} exit (@var{status})
 @deftypefnx {Built-in Function} {} quit (@var{status})
 Exit the current Octave session.  If the optional integer value
 @var{status} is supplied, pass that value to the operating system as the
 Octave's exit status.
 @end deftypefn
 
 @deftypefn {Built-in Function} {} atexit (@var{fcn})
-Register function to be called when Octave exits.
+Register function to be called when Octave exits.  For example,
+
+@example
+@group
+function print_flops_at_exit ()
+  printf ("\n%s\n", system ("fortune"));
+  fflush (stdout);
+endfunction
+atexit ("print_flops_at_exit");
+@end group
+@end example
+
+@noindent
+will print a message when Octave exits.
 @end deftypefn
 
 @node Getting Help, Command Line Editing, Quitting Octave, Getting Started
 @section Commands for Getting Help
 @cindex on-line help
 @cindex help, on-line
 
 The entire text of this manual is available from the Octave prompt
@@ -331,17 +343,17 @@ arguments, @code{help} prints a list of 
 functions, and built-in variables.  If the first argument is @code{-i},
 the @code{help} command searches the index of the on-line version of
 this manual for the given topics.
 
 For example, the command @kbd{help help} prints a short message
 describing the @code{help} command, and @kbd{help -i help} starts the
 GNU Info browser at this node in the on-line version of the manual.
 
-Once the GNU Info browser is runnig, help for using it is available
+Once the GNU Info browser is running, help for using it is available
 using the command @kbd{C-h}.
 @end deffn
 
 The help command can give you information about operators, but not the
 comma and semicolons that are used as command separators.  To get help
 for those, you must type @kbd{help comma} or @kbd{help semicolon}.
 
 @defvr {Built-in Variable} INFO_FILE
@@ -368,17 +380,17 @@ the @code{help} command and usage messag
 @node Command Line Editing, Errors, Getting Help, Getting Started
 @section Command Line Editing
 @cindex command-line editing
 @cindex editing the command line
 
 Octave uses the GNU readline library to provide an extensive set of
 command-line editing and history features.  Only the most common
 features are described in this manual.  Please see The GNU Readline
-Library for more information.
+Library manual for more information.
 
 To insert printing characters (letters, digits, symbols, etc.), simply
 type the character.  Octave will insert the character at the cursor and
 advance the cursor forward.
 
 Many of the command-line editing functions operate using control
 characters.  For example, the character @kbd{Control-a} moves the cursor
 to the beginning of the line.  To type @kbd{C-a}, hold down @key{CTRL}
@@ -551,23 +563,23 @@ Uppercase the character following the cu
 next word if the cursor is between words), moving the cursor to the end
 of the word.
 @end table
 
 @node Commands For Completion, Commands For History, Commands For Text, Command Line Editing
 @subsection Letting Readline Type For You
 @cindex command completion
 
-The following commands allow Octave to complete commands and file names
-for you.
+The following commands allow Octave to complete command and variable
+names for you.
 
 @table @kbd
 @item TAB
 Attempt to do completion on the text before the cursor.  Octave can
-complete commands and variables.
+complete the names of commands and variables.
 
 @item M-?
 List the possible completions of the text before the cursor.
 @end table
 
 @defvr {Built-in Variable} completion_append_char
 The value of @code{completion_append_char} is used as the character to
 append to successful command-line completion attempts.  The default
@@ -653,17 +665,17 @@ Only display the most recent @var{N} lin
 
 @item -q
 Don't number the displayed lines of history.  This is useful for cutting
 and pasting commands if you are using the X Window System.
 @end table
 
 For example, to display the five most recent commands that you have
 typed without displaying line numbers, use the command
-@samp{history -q 5}.
+@kbd{history -q 5}.
 @end deffn
 
 @deffn {Command} edit_history options
 If invoked with no arguments, @code{edit_history} allows you to edit the
 history list using the editor named by the variable @code{EDITOR}.  The
 commands to be edited are first copied to a temporary file.  When you
 exit the editor, Octave executes the commands that remain in the file.
 It is often more convenient to use @code{edit_history} to define functions 
@@ -898,18 +910,17 @@ command and the command line option @cod
 @end defvr
 
 @node Errors, Executable Octave Programs, Command Line Editing, Getting Started
 @section How Octave Reports Errors
 @cindex error messages
 @cindex messages, error
 
 There are two classes of errors that Octave produces when it encounters
-input that it is unable to understand
-an action.
+input that it is unable to understand.
 
 A @dfn{parse error} occurs if Octave cannot understand something you
 have typed.  For example, if you misspell a keyword,
 
 @example
 octave:13> functon y = f (x) y = x^2; endfunction
 @end example
 
@@ -963,19 +974,19 @@ In the example above, the first line ind
 @samp{x} was found to be undefined near line 1 and column 24 of some
 function or expression.  For errors occurring within functions, lines
 from the beginning of the file containing the function definition.  For
 errors occurring at the top level, the line number indicates the input
 line number, which is usually displayed in the prompt string.
 
 The second and third lines in the example indicate that the error
 occurred within an assignment expression, and the last line of the error
-message indicates that the error occurred within the function @samp{f}.
-If the function @samp{f} had been called from another function, for
-example, @samp{g}, the list of errors would have ended with one more
+message indicates that the error occurred within the function @code{f}.
+If the function @code{f} had been called from another function, for
+example, @code{g}, the list of errors would have ended with one more
 line:
 
 @example
 error: called from `g'
 @end example
 
 These lists of function calls usually make it fairly easy to trace the
 path your program took before the error occurred, and to correct the
diff --git a/doc/interpreter/bugs.texi b/doc/interpreter/bugs.texi
--- a/doc/interpreter/bugs.texi
+++ b/doc/interpreter/bugs.texi
@@ -230,25 +230,21 @@ for improvement are welcome in any case.
 If you have Octave working at all, the easiest way to prepare a complete
 bug report is to use the Octave function @code{bug_report}.  When you
 execute this function, Octave will prompt you for a subject and then
 invoke the editor on a file that already contains all the configuration
 information.  When you exit the editor, Octave will mail the bug report
 for you.
 
 If for some reason you cannot use Octave's @code{bug_report} function,
-send bug reports for Octave to:
-
-@example
-bug-octave@@bevo.che.wisc.edu
-@end example
+send bug reports for Octave to @email{bug-octave@@bevo.che.wisc.edu}.
 
 @strong{Do not send bug reports to @samp{help-octave}}.  Most users of
 Octave do not want to receive bug reports.  Those that do have asked to
-be on @samp{bug-octave}.
+be on the mailing list.
 
 As a last resort, send bug reports on paper to:
 
 @example
 Octave Bugs c/o John W. Eaton
 University of Wisconsin-Madison
 Department of Chemical Engineering
 1415 Engineering Drive
@@ -355,17 +351,17 @@ Often the observed symptom is incorrect 
 Unfortunately, this is not enough information unless the program is
 short and simple.  It is very helpful if you can include an explanation
 of the expected output, and why the actual output is incorrect.
 
 @item
 If you wish to suggest changes to the Octave source, send them as
 context diffs.  If you even discuss something in the Octave source,
 refer to it by context, not by line number, because the line numbers in
-the development sources probalby won't match those in your sources.
+the development sources probably won't match those in your sources.
 @end itemize
 
 Here are some things that are not necessary:
 
 @itemize @bullet
 @cindex bugs, investigating
 @item
 A description of the envelope of the bug.
@@ -457,25 +453,20 @@ much more useful if you put it in commen
 If you would like your name to appear in the header line for who made
 the change, send us the header line.
 @end itemize
 
 @node Service,  , Sending Patches, Trouble
 @appendixsec How To Get Help with Octave
 @cindex help, where to find
 
-If you need help installing, using or changing Octave, the mailing list
-
-@example
-help-octave@@bevo.che.wisc.edu
-@end example
-
-exists for the discussion of Octave matters related to using,
-installing, and porting Octave.  If you would like to join the
-discussion, please send a short note to
-
-@example
-help-octave-request@@bevo.che.wisc.edu
-            ^^^^^^^
-@end example
+The mailing list @email{help-octave@@bevo.che.wisc.edu} exists for the
+discussion of matters related to using and installing Octave.  If would
+like to join the discussion, please send a short note to
+@email{help-octave@strong{-request}@@bevo.che.wisc.edu}.
 
 @strong{Please do not} send requests to be added or removed from the the
 mailing list, or other administrative trivia to the list itself.
+
+If you think you have found a bug in the installation procedure,
+however, you should send a complete bug report for the problem to
+@email{bug-octave@@bevo.che.wisc.edu}.  @xref{Bug Reporting} for
+information that will help you to submit a useful report.
diff --git a/doc/interpreter/control.texi b/doc/interpreter/control.texi
--- a/doc/interpreter/control.texi
+++ b/doc/interpreter/control.texi
@@ -1,66 +1,95 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @node Control Theory, Signal Processing, Polynomial Manipulations, Top
 @chapter Control Theory
 
-@deftypefn {Function File} {} abcddim (@var{a}, @var{b}, @var{c}, @var{d})
+Most of the functions described in this chapter were contributed by
+A. Scottedward Hodel @email{A.S.Hodel@@eng.auburn.edu} and R. Bruce Tenison
+@email{Bruce.Tenison@@eng.auburn.edu}.  They have also written a larger
+collection of functions for solving linear control problems.  It is
+currently being updated for Octave version 2, with snapshots of the
+sources available from @url{ftp://ftp.eng.auburn.edu/pub/hodel}.
+
+@deftypefn {Function File} {[@var{n}, @var{m}, @var{p}] =} abcddim (@var{a}, @var{b}, @var{c}, @var{d})
 Check for compatibility of the dimensions of the matrices defining
-the linear system [A, B, C, D] corresponding to
+the linear system
 @iftex
 @tex
-$$
- {dx\over dt} = A x + B u
+$[A, B, C, D]$ corresponding to
 $$
-$$
- y = C x + D u
+\eqalign{
+ {dx\over dt} &= A x + B u\cr
+            y &= C x + D u}
 $$
 @end tex
 @end iftex
 @ifinfo
+[A, B, C, D] corresponding to
 
 @example
 dx/dt = a x + b u
 y = c x + d u
 @end example
 
 @end ifinfo
 or a similar discrete-time system.
 
 If the matrices are compatibly dimensioned, then @code{abcddim} returns
-@var{n} = number of system states, @var{m} = number of system inputs,
-and @var{p} = number of system outputs.  Otherwise @code{abcddim}
-returns @var{n} = @var{m} = @var{p} = @minus{}1.
+
+@table @var
+@item n
+The number of system states.
+
+@item m
+The number of system inputs.
+
+@item p
+The number of system outputs.
+@end table
+
+Otherwise @code{abcddim} returns @var{n} = @var{m} = @var{p} = @minus{}1.
 @end deftypefn
 
 @deftypefn {Function File} {} are (@var{a}, @var{b}, @var{c}, @var{opt})
 
-Returns the solution, @var{x}, of the algebraic Riccati equation
+Return the solution, @var{x}, of the algebraic Riccati equation
+@iftex
+@tex
+$$
+A^TX + XA - XBX + C = 0
+$$
+@end tex
+@end iftex
+@ifinfo
 
 @example
-a' x + x a - x b x + c = 0
+a' * x + x * a - x * b * x + c = 0
 @end example
+@end ifinfo
 
 @noindent
-for identically dimensioned square matrices @var{a}, @var{b}, @var{c}.
-If @var{b} (@var{c}) is not square, then the function attempts to use
-@code{@var{b}*@var{b}'} (@code{@var{c}'*@var{c}}) instead.
+for identically dimensioned square matrices @var{a}, @var{b}, and
+@var{c}.  If @var{b} is not square, @code{are} attempts to use
+@code{@var{b}*@var{b}'} instead.  If @var{c} is not square, @code{are}
+attempts to use @code{@var{c}'*@var{c}}) instead.
 
-Solution method: apply Laub's Schur method (IEEE Transactions on
-Automatic Control, 1979) to the appropriate Hamiltonian matrix.
+To form the solution, Laub's Schur method (IEEE Transactions on
+Automatic Control, 1979) is applied to the appropriate Hamiltonian
+matrix.
 
-@var{opt} is an option passed to the eigenvalue balancing routine.
-Default is @code{"B"}.
+The optional argument @var{opt} is passed to the eigenvalue balancing
+routine.  If it is omitted, a value of @code{"B"} is assumed.
 @end deftypefn
 
 @deftypefn {Function File} {} c2d (@var{a}, @var{b}, @var{t})
-Converts the continuous time system described by:
+Convert the continuous time system described by:
 @iftex
 @tex
 $$
  {dx\over dt} = A x + B u
 $$
 @end tex
 @end iftex
 @ifinfo
@@ -87,49 +116,66 @@ x[k+1] = Ad x[k] + Bd u[k]
 
 @noindent
 via the matrix exponential assuming a zero-order hold on the input and
 sample time @var{t}.
 @end deftypefn
 
 @deftypefn {Function File} {} dare (@var{a}, @var{b}, @var{c}, @var{r}, @var{opt})
 
-Returns the solution, @var{x} of the discrete-time algebraic Riccati
+Return the solution, @var{x} of the discrete-time algebraic Riccati
 equation
+@iftex
+@tex
+$$
+A^TXA - X + A^TXB (R + B^TXB)^{-1} B^TXA + C = 0
+$$
+@end tex
+@end iftex
+@ifinfo
 
 @example
 a' x a - x + a' x b (r + b' x b)^(-1) b' x a + c = 0
 @end example
+@end ifinfo
 
 @noindent
 for matrices with dimensions:
 
-@example
-@var{a}: @var{n} by @var{n}
-@var{b}: @var{n} by @var{m}
-@var{c}: @var{n} by @var{n}, symmetric positive semidefinite
-@var{r}: @var{m} by @var{m}, symmetric positive definite (invertible)
-@end example
+@table @var
+@item a
+@var{n} by @var{n}.
+
+@item b
+@var{n} by @var{m}.
+
+@item c
+@var{n} by @var{n}, symmetric positive semidefinite.
+
+@item r
+@var{m} by @var{m}, symmetric positive definite (invertible).
+@end table
 
 If @var{c} is not square, then the function attempts to use
 @code{@var{c}'*@var{c}} instead.
 
-Solution method: Laub's Schur method (IEEE Transactions on Automatic
-Control, 1979) is applied to the appropriate symplectic matrix.
+To form the solution, Laub's Schur method (IEEE Transactions on
+Automatic Control, 1979) is applied to the appropriate symplectic
+matrix.
 
-See also: Ran and Rodman, @cite{Stable Hermitian Solutions of Discrete
+See also Ran and Rodman, @cite{Stable Hermitian Solutions of Discrete
 Algebraic Riccati Equations}, Mathematics of Control, Signals and 
 Systems, Volume 5, Number 2 (1992).
 
-@var{opt} is an option passed to the eigenvalue balancing routine.
-The default is @code{"B"}.
+The optional argument @var{opt} is passed to the eigenvalue balancing
+routine.  If it is omitted, a value of @code{"B"} is assumed.
 @end deftypefn
 
 @deftypefn {Function File} {} dgram (@var{a}, @var{b})
-Returns the discrete controllability and observability gramian for the
+Return the discrete controllability or observability gramian for the
 discrete time system described by
 @iftex
 @tex
 $$
  x_{k+1} = A x_k + B u_k
 $$
 $$
  y_k = C x_k + D u_k
@@ -139,24 +185,24 @@ discrete time system described by
 @ifinfo
 
 @example
 x[k+1] = A x[k] + B u[k]
   y[k] = C x[k] + D u[k]
 @end example
 @end ifinfo
 
-@code{dgram (@var{a}, @var{b})} returns the discrete controllability
-gramian and @code{dgram (@var{a}', @var{c}')} returns the observability
-gramian.
+For example, @code{dgram (@var{a}, @var{b})} returns the discrete
+controllability gramian and @code{dgram (@var{a}', @var{c}')} returns
+the observability gramian.
 @end deftypefn
 
-@deftypefn {Function File} {} dlqe (@var{a}, @var{g}, @var{c}, @var{sigw}, @var{sigv} [, @var{z}])
-Linear quadratic estimator (Kalman filter) design for the discrete time
-system
+@deftypefn {Function File} {[@var{l}, @var{m}, @var{p}, @var{e}] =} dlqe (@var{a}, @var{g}, @var{c}, @var{sigw}, @var{sigv}, @var{z})
+Construct the linear quadratic estimator (Kalman filter) for the
+discrete time system
 @iftex
 @tex
 $$
  x_{k+1} = A x_k + B u_k + G w_k
 $$
 $$
  y_k = C x_k + D u_k + w_k
 $$
@@ -188,138 +234,179 @@ The observer structure is
 @ifinfo
 
 @example
 z[k+1] = A z[k] + B u[k] + k(y[k] - C z[k] - D u[k])
 @end example
 @end ifinfo
 
 @noindent
-Returns:
+The following values are returned:
 
-@var{l} is the observer gain, @code{(A - A L C)} is stable.
+@table @var
+@item l
+The observer gain, 
+@iftex
+@tex
+$(A - ALC)$.
+@end tex
+@end iftex
+@ifinfo
+(@var{a} - @var{a}@var{l}@var{c}).
+@end ifinfo
+is stable.
 
-@var{m} is the Ricatti equation solution.
+@item m
+The Riccati equation solution.
+
+@item p
+The estimate error covariance after the measurement update.
 
-@var{p} is the estimate error covariance after the measurement update.
-
-@var{e} are the closed loop poles of @code{(A - A L C)}.
+@item e
+The closed loop poles of
+@iftex
+@tex
+$(A - ALC)$.
+@end tex
+@end iftex
+@ifinfo
+(@var{a} - @var{a}@var{l}@var{c}).
+@end ifinfo
+@end table
 @end deftypefn
 
-@deftypefn {Function File} {} dlqr (@var{a}, @var{b}, @var{q}, @var{r} [, @var{z}])
-Linear quadratic regulator design for the discrete time system
+@deftypefn {Function File} {[@var{k}, @var{p}, @var{e}] =} dlqr (@var{a}, @var{b}, @var{q}, @var{r}, @var{z})
+Construct the linear quadratic regulator for the discrete time system
 @iftex
 @tex
 $$
  x_{k+1} = A x_k + B u_k
 $$
 @end tex
 @end iftex
 @ifinfo
 
 @example
 x[k+1] = A x[k] + B u[k]
 @end example
 
 @end ifinfo
 to minimize the cost functional
+@iftex
+@tex
+$$
+ J = \sum x^T Q x + u^T R u
+$$
+@end tex
+@end iftex
+@ifinfo
 
 @example
-J = Sum [ x' Q x + u' R u ],              Z omitted
+J = Sum (x' Q x + u' R u)
 @end example
+@end ifinfo
 
 @noindent
-or
+@var{z} omitted or
+@iftex
+@tex
+$$
+ J = \sum x^T Q x + u^T R u + 2 x^T Z u
+$$
+@end tex
+@end iftex
+@ifinfo
 
 @example
-J = Sum [ x' Q x + u' R u +2 x' Z u ],    Z included
+J = Sum (x' Q x + u' R u + 2 x' Z u)
 @end example
 
-@noindent
-Returns:
+@end ifinfo
+@var{z} included.
+
+The following values are returned:
 
-@var{k} is the state feedback gain, @code{(A - B K)} is stable.
+@table @var
+@item k
+The state feedback gain,
+@iftex
+@tex
+$(A - B K)$
+@end tex
+@end iftex
+@ifinfo
+(@var{a} - @var{b}@var{k})
+@end ifinfo
+is stable.
 
-@var{p} is the solution of algebraic Riccati equation.
+@item p
+The solution of algebraic Riccati equation.
 
-@var{e} are the closed loop poles of @var{(A - B K)}.
+@item e
+The closed loop poles of
+@iftex
+@tex
+$(A - B K)$.
+@end tex
+@end iftex
+@ifinfo
+(@var{a} - @var{b}@var{k}).
+@end ifinfo
+@end table
 @end deftypefn
 
 @deftypefn {Function File} {} dlyap (@var{a}, @var{b})
 Solve the discrete-time Lyapunov equation
-
-@example
-a x a' - x + b = 0
-@end example
-
-@noindent
+@iftex
+@tex
+$AXA^T - X + B = 0$
+@end tex
+@end iftex
+@ifinfo
+@code{a x a' - x + b = 0}
+@end ifinfo
 for square matrices @var{a}, @var{b}.  If @var{b} is not square, then the
 function attempts to solve either
-
-@example
-a x a' - x + b b' = 0
-@end example
-
-@noindent
-or
-
-@example
-a' x a - x + b' b = 0
-@end example
-
-@noindent
+@iftex
+$AXA^T - X + B B^T = 0$ or $A^TXA - X + B^TB = 0$,
+@tex
+@end tex
+@ifinfo
+@code{a x a' - x + b b' = 0} or @code{a' x a - x + b' b = 0},
+@end ifinfo
 whichever is appropriate.
 
 Uses Schur decomposition method as in Kitagawa, International Journal of
 Control (1977); column-by-column solution method as suggested in
 Hammarling, IMA Journal of Numerical Analysis, (1982).
 @end deftypefn
 
 @deftypefn {Function File} {} is_controllable (@var{a}, @var{b}, @var{tol})
-
-If the pair (a, b) is controllable, then return value 1.
-Otherwise, returns a value of 0.
-
-@var{tol} is a roundoff parameter, set to @code{2*eps} if omitted.
+Return 1 if the pair (@var{a}, @var{b}) is controllable.  Otherwise,
+return 0.
 
-Currently just constructs the controllability matrix and checks rank.
-A better method is as follows (Boley and Golub, Systems and Control
-Letters, 1984):  Controllability is determined by applying Arnoldi
-iteration with complete re-orthogonalization to obtain an orthogonal
-basis of the Krylov subspace
-@iftex
-@tex
-$$
- {\rm span} \left(\left[b~ab~\ldots~a^{n-1}b\right]\right)
-$$
-@end tex
-@end iftex
-@ifinfo
+The optional argument @var{tol} is a roundoff parameter.  If it is
+omitted, a value of @code{2*eps} is used.
 
-@example
-                      n-1
- span ([b, a*b, ..., a^   *b]).
-@end example
-@end ifinfo
+Currently, @code{is_controllable} just constructs the controllability
+matrix and checks rank.
 @end deftypefn
 
 @deftypefn {Function File} {} is_observable (@var{a}, @var{c}, @var{tol})
 
-Returns 1 if the pair @code{(a, c)} is observable.
-Otherwise, returns a value of 0.
+Return 1 if the pair (@var{a}, @var{c}) is observable.
+Otherwise, return0.
+
+The optional argument @var{tol} is a roundoff parameter.  If it is
+omitted, a value of @code{2*eps} is used.
 @end deftypefn
 
-@deftypefn {Function File} {} lqe (@var{a}, @var{g}, @var{c}, @var{sigw}, @var{sigv}, @var{z})
-
-@example
-[k, p, e] = lqe (a, g, c, sigw, sigv, z)
-@end example
-
-Linear quadratic estimator (Kalman filter) design for the continuous
-time system
+@deftypefn {Function File} {[@var{k}, @var{p}, @var{e}] =} lqe (@var{a}, @var{g}, @var{c}, @var{sigw}, @var{sigv}, @var{z})
+Construct the linear quadratic estimator (Kalman filter) for the
+continuous time system
 @iftex
 @tex
 $$
  {dx\over dt} = A x + B u
 $$
 $$
  y = C x + D u
 $$
@@ -331,43 +418,63 @@ time system
 dx
 -- = a x + b u
 dt
 
 y = c x + d u
 @end example
 
 @end ifinfo
-where @var{w}, @var{v} are zero-mean gaussian noise processes with
+where @var{w} and @var{v} are zero-mean gaussian noise processes with
 respective intensities
 
 @example
 sigw = cov (w, w)
 sigv = cov (v, v)
 @end example
 
-@noindent
-@var{z} (if specified) is the cross-covariance
-@code{cov (@var{w}, @var{v})}; the default value is
-@code{cov (@var{w}, @var{v}) = 0}. 
+The optional argument @var{z} is the cross-covariance
+@code{cov (@var{w}, @var{v})}.  If it is omitted,
+@code{cov (@var{w}, @var{v}) = 0} is assumed.
 
 Observer structure is @code{dz/dt = A z + B u + k (y - C z - D u)}
 
-returns:
+The following values are returned:
 
-@var{k} is observer gain:  @code{(A - K C)} is stable.
+@table @var
+@item k
+The observer gain,
+@iftex
+@tex
+$(A - K C)$
+@end tex
+@end iftex
+@ifinfo
+(@var{a} - @var{k}@var{c})
+@end ifinfo
+is stable.
 
-@var{p} is solution of algebraic Riccati equation.
+@item p
+The solution of algebraic Riccati equation.
 
-@var{e} is the vector of closed loop poles of @code{(A - K C)}.
+@item e
+The vector of closed loop poles of
+@iftex
+@tex
+$(A - K C)$.
+@end tex
+@end iftex
+@ifinfo
+(@var{a} - @var{k}@var{c}).
+@end ifinfo
+@end table
 @end deftypefn
 
-@deftypefn {Function File} {} lqr (@var{a}, @var{b}, @var{q}, @var{r}, @var{z})
-@deftypefnx {Function File} {[@var{k}, @var{p}, @var{e}] =} lqr (@var{a}, @var{b}, @var{q}, @var{r}, @var{z})
-Linear quadratic regulator design for the continuous time system
+@deftypefn {Function File} {[@var{k}, @var{p}, @var{e}] =} lqr (@var{a}, @var{b}, @var{q}, @var{r}, @var{z})
+construct the linear quadratic regulator for the continuous time system
 @iftex
 @tex
 $$
  {dx\over dt} = A x + B u
 $$
 @end tex
 @end iftex
 @ifinfo
@@ -378,17 +485,17 @@ dx
 dt
 @end example
 
 @end ifinfo
 to minimize the cost functional
 @iftex
 @tex
 $$
- J = \int_0^\infty x' Q x + u' R u
+ J = \int_0^\infty x^T Q x + u^T R u
 $$
 @end tex
 @end iftex
 @ifinfo
 
 @example
       infinity
       /
@@ -398,82 +505,141 @@ to minimize the cost functional
 @end example
 @end ifinfo
 
 @noindent
 @var{z} omitted or
 @iftex
 @tex
 $$
- J = \int_0^\infty x' Q x + u' R u + 2 x' Z u
+ J = \int_0^\infty x^T Q x + u^T R u + 2 x^T Z u
 $$
 @end tex
 @end iftex
 @ifinfo
 
 @example
       infinity
       /
   J = |  x' Q x + u' R u + 2 x' Z u
      /
     t=0
 @end example
 
 @end ifinfo
-@var{z} included
+@var{z} included.
 
-@noindent
-Returns:
+The following values are returned:
 
-@var{k} is state feedback gain:  @code{(A - B K)} is stable.
+@table @var
+@item k
+The state feedback gain,
+@iftex
+$(A - B K)$
+@tex
+@end tex
+@end iftex
+@ifinfo
+(@var{a} - @var{b}@var{k})
+@end ifinfo
+is stable.
 
-@var{p} is the stabilizing solution of appropriate algebraic Riccati
-equation.
+@item p
+The stabilizing solution of appropriate algebraic Riccati equation.
 
-@var{e} is the vector of the closed loop poles of @code{(A - B K)}.
+@item e
+The vector of the closed loop poles of
+@iftex
+@tex
+$(A - B K)$.
+@end tex
+@end iftex
+@ifinfo
+(@var{a} - @var{b}@var{k}).
+@end ifinfo
+@end table
 @end deftypefn
 
 @deftypefn {Function File} {} lyap (@var{a}, @var{b}, @var{c})
 Solve the Lyapunov (or Sylvester) equation via the Bartels-Stewart
 algorithm (Communications of the ACM, 1972).
 
-If @code{(a, b, c)} are specified, then @code{lyap} returns the solution
-of the  Sylvester equation
+If @var{a}, @var{b}, and @var{c} are specified, then @code{lyap} returns
+the solution of the  Sylvester equation
+@iftex
+@tex
+$$
+ A X + X B + C = 0
+$$
+@end tex
+@end iftex
+@ifinfo
 
 @example
 a x + x b + c = 0
 @end example
+@end ifinfo
 
 If only @code{(a, b)} are specified, then @code{lyap} returns the
 solution of the Lyapunov equation
+@iftex
+@tex
+$$
+ A^T X + X A + B = 0
+$$
+@end tex
+@end iftex
+@ifinfo
 
 @example
 a' x + x a + b = 0
 @end example
+@end ifinfo
 
 If @var{b} is not square, then @code{lyap} returns the solution of either
+@iftex
+@tex
+$$
+ A^T X + X A + B^T B = 0
+$$
+@end tex
+@end iftex
+@ifinfo
 
 @example
 a' x + x a + b' b = 0
 @end example
+@end ifinfo
 
 @noindent
 or
+@iftex
+@tex
+$$
+ A X + X A^T + B B^T = 0
+$$
+@end tex
+@end iftex
+@ifinfo
 
 @example
 a x + x a' + b b' = 0
 @end example
+@end ifinfo
 
 @noindent
 whichever is appropriate.
-
-Solves by using the Bartels-Stewart algorithm (1972).
 @end deftypefn
 
-@deftypefn {Function File} {} tzero (@var{a}, @var{b}, @var{c}, @var{d}, @var{bal})
-Compute the transmission zeros of [A, B, C, D].
-
-@var{bal} = balancing option (see balance); default is @code{"B"}.
+@deftypefn {Function File} {} tzero (@var{a}, @var{b}, @var{c}, @var{d}, @var{opt})
+Compute the transmission zeros of
+@iftex
+@tex
+$[A, B, C, D]$.
+@end tex
+@end iftex
+@ifinfo
+[A, B, C, D].
+@end ifinfo
 
-Needs to incorporate @code{mvzero} algorithm to isolate finite zeros;
-see Hodel, @cite{Computation of System Zeros with Balancing}, Linear
-Algebra and its Applications, July 1993.
+The optional argument @var{opt} is passed to the eigenvalue balancing
+routine.  If it is omitted, a value of @code{"B"} is assumed.
 @end deftypefn
diff --git a/doc/interpreter/data.texi b/doc/interpreter/data.texi
--- a/doc/interpreter/data.texi
+++ b/doc/interpreter/data.texi
@@ -10,51 +10,52 @@ All versions of Octave include a number 
 including real and complex scalars and matrices, character strings, and
 a data structure type.
 
 It is also possible to define new specialized data types by writing a
 small amount of C++ code.  On some systems, new data types can be loaded
 dynamically while Octave is running, so it is not necessary to recompile
 all of Octave just to add a new type.  @xref{Dynamically Linked
 Functions} for more information about Octave's dynamic linking
-capabilities.
+capabilities.  @ref{User-defined Data Types} describes what you must do
+to define a new data type for Octave.
 
 @menu
 * Built-in Data Types::         
 * User-defined Data Types::     
 * Object Sizes::                
 @end menu
 
 @node Built-in Data Types, User-defined Data Types, Data Types, Data Types
 @section Built-in Data Types
 @cindex data types, built-in
 @cindex built-in data types
 
 The standard built-in data types are real and complex scalars and
-matrices, character strings, and a data structure type.  Additional
-built-in data types may be added in future versions.  If you need a
-specialize data type that is not currently provided as a built-in type,
-you are encouraged to write your own user-defined data type and
-contribute it for distribution in a future release of Octave.
+matrices, ranges, character strings, and a data structure type.
+Additional built-in data types may be added in future versions.  If you
+need a specialized data type that is not currently provided as a
+built-in type, you are encouraged to write your own user-defined data
+type and contribute it for distribution in a future release of Octave.
 
 @menu
 * Numeric Objects::             
 * String Objects::              
 * Data Structure Objects::      
 @end menu
 
 @node Numeric Objects, String Objects, Built-in Data Types, Built-in Data Types
 @subsection Numeric Objects
 @cindex numeric constant
 @cindex numeric value
 
 Octave's built-in numeric objects include real and complex scalars and
 matrices.  All built-in numeric data is currently stored as double
 precision numbers.  On systems that use the IEEE floating point format,
-values in the range
+values in the range of approximately
 @iftex
 @tex
  $2.2251\times10^{-308}$ to $1.7977\times10^{308}$
 @end tex
 @end iftex
 @ifinfo
  2.2251e-308 to 1.7977e+308
 @end ifinfo
@@ -62,22 +63,22 @@ values in the range
 @iftex
 @tex
  $2.2204\times10^{-16}$.
 @end tex
 @end iftex
 @ifinfo
  2.2204e-16.
 @end ifinfo
-The exact values are given by the variables @var{realmin},
-@var{realmax}, and @var{eps}, respectively.
+The exact values are given by the variables @code{realmin},
+@code{realmax}, and @code{eps}, respectively.
 
 Matrix objects can be of any size, and can be dynamically reshaped and
 resized.  It is easy to extract individual rows, columns, or submatrices
-is using a variety of powerful indexing features.
+is using a variety of powerful indexing features.  @xref{Index Expressions}.
 
 @xref{Numeric Data Types}, for more information.
 
 @node String Objects, Data Structure Objects, Numeric Objects, Built-in Data Types
 @subsection String Objects
 @cindex strings
 @cindex character strings
 @opindex "
@@ -102,24 +103,30 @@ structures.
 
 @xref{Data Structures}, for more information.
 
 @node User-defined Data Types, Object Sizes, Built-in Data Types, Data Types
 @section User-defined Data Types
 @cindex user-defined data types
 @cindex data types, user-defined
 
+Someday I hope to expand this to include a complete description of
+Octave's mechanism for managing user-defined data types.  Until this
+feature is documented here, you will have to make do by reading the code
+in the @file{ov.h}, @file{ops.h}, and related files from Octave's
+@file{src} directory.
+
 @node Object Sizes,  , User-defined Data Types, Data Types
 @section Object Sizes
 
 The following functions allow you to determine the size of a variable or
 expression.  These functions are defined for all objects.  They return
--1 when the operation doesn't make sense.  For example, Octave's data
-structure type doesn't have rows or columns, so @code{rows} and
-@code{columns} return -1 for structure arguments.
+@minus{}1 when the operation doesn't make sense.  For example, Octave's
+data structure type doesn't have rows or columns, so the @code{rows} and
+@code{columns} functions return @minus{}1 for structure arguments.
 
 @deftypefn {Function File} {} columns (@var{a})
 Return the number of columns of @var{a}.
 @end deftypefn
 
 @deftypefn {Function File} {} rows (@var{a})
 Return the number of rows of @var{a}.
 @end deftypefn
@@ -134,34 +141,33 @@ Return the number rows and columns of @v
 
 With one input argument and one output argument, the result is returned
 in a 2 element row vector.  If there are two output arguments, the
 number of rows is assigned to the first, and the number of columns to
 the second.  For example,
 
 @example
 @group
-octave:13> size ([1, 2; 3, 4; 5, 6])
-ans =
-
-  3  2
+size ([1, 2; 3, 4; 5, 6])
+     @result{} [ 3, 2 ]
 
-octave:14> [nr, nc] = size ([1, 2; 3, 4; 5, 6])
-nr = 3
+[nr, nc] = size ([1, 2; 3, 4; 5, 6])
 
-nc = 2
+     @result{} nr = 3
+
+     @result{} nc = 2
 @end group
 @end example
 
 If given a second argument of either 1 or 2, @code{size} will return
 only the row or column dimension.  For example
 
 @example
-octave:15> size ([1, 2; 3, 4; 5, 6], 2)
-ans = 2
+size ([1, 2; 3, 4; 5, 6], 2)
+     @result{} 2
 @end example
 
 @noindent
 returns the number of columns in the given matrix.
 @end deftypefn
 
 @deftypefn {Function File} {} isempty (@var{a})
 Return 1 if @var{a} is an empty matrix (either the number of rows, or
diff --git a/doc/interpreter/diffeq.texi b/doc/interpreter/diffeq.texi
--- a/doc/interpreter/diffeq.texi
+++ b/doc/interpreter/diffeq.texi
@@ -33,19 +33,19 @@ The function @code{lsode} can be used So
 @example
 dx
 -- = f (x, t)
 dt
 @end example
 @end ifinfo
 
 @noindent
-using Hindmarsh's ODE solver LSODE.
+using Hindmarsh's ODE solver @sc{Lsode}.
 
-@deftypefn {Lodable Function} {} lsode (@var{fcn}, @var{x0}, @var{t}, @var{t_crit})
+@deftypefn {Loadable Function} {} lsode (@var{fcn}, @var{x0}, @var{t}, @var{t_crit})
 Return a matrix of @var{x} as a function of @var{t}, given the initial
 state of the system @var{x0}.  Each row in the result matrix corresponds
 to one of the elements in the vector @var{t}.  The first element of
 @var{t} corresponds to the initial state @var{x0}, so that the first row
 of the output is @var{x0}.
 
 The first argument, @var{fcn}, is a string that names the function to
 call to compute the vector of right hand sides for the set of equations.
@@ -102,17 +102,17 @@ A more efficient set of output points mi
 
 @example
 @group
 t = [0, logspace (-1, log10(303), 150), \
         logspace (log10(304), log10(500), 150)];
 @end group
 @end example
 
-@deftypefn {Lodable Function} {} lsode_options (@var{opt}, @var{val})
+@deftypefn {Loadable Function} {} lsode_options (@var{opt}, @var{val})
 When called with two arguments, this function allows you set options
 parameters for the function @code{lsode}.  Given one argument,
 @code{lsode_options} returns the value of the corresponding option.  If
 no arguments are supplied, the names of all the available options and
 their current values are displayed.
 @end deftypefn
 
 See Alan C. Hindmarsh, @cite{ODEPACK, A Systematized Collection of ODE
@@ -132,18 +132,21 @@ The function @code{dassl} can be used So
 @end iftex
 @ifinfo
 
 @example
 0 = f (x-dot, x, t),    x(t=0) = x_0, x-dot(t=0) = x-dot_0
 @end example
 @end ifinfo
 
+@noindent
+using Petzold's DAE solver @sc{Dassl}.
+
 @deftypefn {Loadable Function} {[@var{x}, @var{xdot}] =} dassl (@var{fcn}, @var{x0}, @var{xdot0}, @var{t}, @var{t_crit})
-Return a matrix of states and their first derivaties with respect to
+Return a matrix of states and their first derivatives with respect to
 @var{t}.  Each row in the result matrices correspond to one of the
 elements in the vector @var{t}.  The first element of @var{t}
 corresponds to the initial state @var{x0} and derivative @var{xdot0}, so
 that the first row of the output @var{x} is @var{x0} and the first row
 of the output @var{xdot} is @var{xdot0}.
 
 The first argument, @var{fcn}, is a string that names the function to
 call to compute the vector of residuals for the set of equations.
@@ -158,17 +161,17 @@ where @var{x}, @var{xdot}, and @var{res}
 scalar.
 
 The second and third arguments to @code{dassl} specify the initial
 condition of the states and their derivatives, and the fourth argument
 specifies a vector of output times at which the solution is desired, 
 including the time corresponding to the initial condition.
 
 The set of initial states and derivatives are not strictly required to
-be consistent.  In practice, however, DASSL is not very good at
+be consistent.  In practice, however, @sc{Dassl} is not very good at
 determining a consistent set for you, so it is best if you ensure that
 the initial values result in the function evaluating to zero.
 
 The fifth argument is optional, and may be used to specify a set of
 times that the DAE solver should not integrate past.  It is useful for
 avoiding difficulties with singularities and points where there is a
 discontinuity in the derivative.
 @end deftypefn
@@ -178,9 +181,9 @@ When called with two arguments, this fun
 parameters for the function @code{lsode}.  Given one argument,
 @code{dassl_options} returns the value of the corresponding option.  If
 no arguments are supplied, the names of all the available options and
 their current values are displayed.
 @end deftypefn
 
 See K. E. Brenan, et al., @cite{Numerical Solution of Initial-Value
 Problems in Differential-Algebraic Equations}, North-Holland (1989) for
-more information about the implementation of DASSL.
+more information about the implementation of @sc{Dassl}.
diff --git a/doc/interpreter/emacs.texi b/doc/interpreter/emacs.texi
--- a/doc/interpreter/emacs.texi
+++ b/doc/interpreter/emacs.texi
@@ -19,18 +19,18 @@ by interacting with Octave from within a
 useful in particular for debugging Octave code.
 
 Finally, you can convince Octave to use the Emacs info reader for
 @kbd{help -i}.
 
 All functionality is provided by the Emacs Lisp package @file{octave}.
 This chapter describes how to set up and use this package.
 
-Please contact <Kurt.Hornik@@ci.tuwien.ac.at> if you have any questions
-or suggestions on using Emacs with Octave.
+Please contact @email{Kurt.Hornik@@ci.tuwien.ac.at} if you have any
+questions or suggestions on using Emacs with Octave.
 
 @menu
 * Installing the Emacs Octave Package::  
 * Using Octave Mode::           
 * Running Octave From Within Emacs::  
 * Using the Emacs Info Reader for Octave::  
 @end menu
 
diff --git a/doc/interpreter/errors.texi b/doc/interpreter/errors.texi
--- a/doc/interpreter/errors.texi
+++ b/doc/interpreter/errors.texi
@@ -1,15 +1,20 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @node Error Handling, Input and Output, Functions and Scripts, Top
 @chapter Error Handling
 
+Octave includes several functions for printing error and warning
+messages.  When you write functions that need to take special action
+when they encounter abnormal conditions, you should print the error
+messages using the functions described in this chapter.
+
 @deftypefn {Built-in Function} {} error (@var{template}, @dots{})
 The @code{error} function formats the optional arguments under the
 control of the template string @var{template} using the same rules as
 the @code{printf} family of functions (@pxref{Formatted Output}).
 The resulting message is prefixed by the string @samp{error: } and
 printed on the @code{stderr} stream.
 
 Calling @code{error} also sets Octave's internal error state such that
@@ -60,17 +65,17 @@ error: nargin != 1
 @end deftypefn
 
 @defvr {Built-in Variable} error_text
 This variable contains the the text of error messages that would have
 been printed in the body of the most recent @code{unwind_protect} or
 @code{try} statement or the @var{try} part of the most recent call to
 the @code{eval} function.  Outside of the @code{unwind_protect} and
 @code{try} statements or the @code{eval} function, or if no error has
-ocurred within them, the value of @code{error_text} is guaranteed to be
+occurred within them, the value of @code{error_text} is guaranteed to be
 the empty string.
 
 Note that the message does not include the first @samp{error: } prefix,
 so that it may easily be passed to the @code{error} function without
 additional processing@footnote{Yes, it's a kluge, but it seems to be a
 reasonably useful one.}.
 
 @xref{The try Statement} and @ref{The unwind_protect Statement}.
@@ -78,27 +83,48 @@ reasonably useful one.}.
 
 @defvr {Built-in Variable} beep_on_error
 If the value of @code{beep_on_error} is nonzero, Octave will try
 to ring your terminal's bell before printing an error message.  The
 default value is 0.
 @end defvr
 
 @deftypefn {Built-in Function} {} warning (@var{msg})
-Print the message @var{msg} prefixed by the string @samp{warning: }.
+Print a warning message @var{msg} prefixed by the string @samp{warning: }.  
+After printing the warning message, Octave will continue to execute
+commands.  You should use this function should when you want to notify
+the user of an unusual condition, but only when it makes sense for your
+program to go on.
 @end deftypefn
 
 @deftypefn {Built-in Function} {} usage (@var{msg})
 Print the message @var{msg}, prefixed by the string @samp{usage: }, and
 set Octave's internal error state such that control will return to the
 top level without evaluating any more commands.  This is useful for
 aborting from functions.
 
 After @code{usage} is evaluated, Octave will print a traceback of all
 the function calls leading to the usage message.
+
+You should use this function for reporting problems errors that result
+from an improper call to a function, such as calling a function with an
+incorrect number of arguments, or with arguments of the wrong type.  For
+example, most functions distributed with Octave begin with code like
+this
+
+@example
+@group
+if (nargin != 2)
+  usage ("foo (a, b)");
+endif
+@end group
+@end example
+
+@noindent
+to check for the proper number of arguments.
 @end deftypefn
 
 The following pair of functions are of limited usefulness, and may be
 removed from future versions of Octave.
 
 @deftypefn {Function File} {} perror (@var{name}, @var{num})
 Print the error message for function @var{name} corresponding to the
 error number @var{num}.  This function is intended to be used to print
diff --git a/doc/interpreter/eval.texi b/doc/interpreter/eval.texi
--- a/doc/interpreter/eval.texi
+++ b/doc/interpreter/eval.texi
@@ -18,47 +18,46 @@ call user-supplied functions.
 
 @deftypefn {Built-in Function} {} eval (@var{command})
 Parse the string @var{command} and evaluate it as if it were an Octave
 program, returning the last value computed.  The @var{command} is
 evaluated in the current context, so any results remain available after
 @code{eval} returns.  For example,
 
 @example
-octave:13> a
-error: `a' undefined
-octave:14> eval ("a = 13")
-a = 13
-ans = 13
-octave:15> a
-a = 13
+@group
+eval ("a = 13")
+
+     @print{} a = 13
+
+     @result{} 13
+@end group
 @end example
 
-In this case, two values are printed:  one for the expression that was
-evaluated, and one for the value returned from @code{eval}.  Just as
-with any other expression, you can turn printing off by ending the
-expression in a semicolon.  For example,
+In this case, the value of the evaluated expression is printed and it is
+also returned returned from @code{eval}.  Just as with any other
+expression, you can turn printing off by ending the expression in a
+semicolon.  For example,
 
 @example
-octave:13> a
-error: `a' undefined
-octave:14> eval ("a = 13;")
-ans = 13
-octave:15> a
-a = 13
+eval ("a = 13;")
+     @result{} 13
 @end example
+
+In this example, the variable @code{a} has been given the value 13, but
+the value of the expression is not printed.
 @end deftypefn
 
 @deftypefn {Built-in Function} {} feval (@var{name}, @dots{})
 Evaluate the function named @var{name}.  Any arguments after the first
 are passed on to the named function.  For example,
 
 @example
-octave:12> feval ("acos", -1)
-ans = 3.1416
+feval ("acos", -1)
+     @result{} 3.1416
 @end example
 
 @noindent
 calls the function @code{acos} with the argument @samp{-1}.
 
 The function @code{feval} is necessary in order to be able to write
 functions that call user-supplied functions, because Octave does not
 have a way to declare a pointer to a function (like C) or to declare a
diff --git a/doc/interpreter/expr.texi b/doc/interpreter/expr.texi
--- a/doc/interpreter/expr.texi
+++ b/doc/interpreter/expr.texi
@@ -80,17 +80,17 @@ index vector that are equal to one.  For
 @example
 @group
 a = [1, 2; 3, 4];
 a ([1, 0], :)
 @end group
 @end example
 
 @noindent
-selects the first row of the matrix @samp{a}.
+selects the first row of the matrix @code{a}.
 
 This operation can be useful for selecting elements of a matrix based on
 some condition, since the comparison operators return matrices of ones
 and zeros.
 
 This special zero-one form of indexing leads to a conflict with the
 standard indexing operation.  For example, should the following
 statements
@@ -122,19 +122,19 @@ a = [1, 2, 3, 4]
 with @code{prefer_zero_one_indexing} is set to nonzero, the
 expression
 
 @example
 a ([1, 1, 1, 1])
 @end example
 
 @noindent
-results in the matrix @samp{[ 1  2  3  4 ]}.  If the value of
+results in the matrix @code{[ 1, 2, 3, 4 ]}.  If the value of
 @code{prefer_zero_one_indexing} set to 0, the result would be
-the matrix @samp{[ 1 1 1 1 ]}.
+the matrix @code{[ 1, 1, 1, 1 ]}.
 
 In the first case, Octave is selecting each element corresponding to a
 @samp{1} in the index vector.  In the second, Octave is selecting the
 first element multiple times.
 
 The default value for @code{prefer_zero_one_indexing} is 0.
 @end defvr
 
@@ -161,31 +161,31 @@ a = 13;
 a ([1, 1], [1, 1, 1])
 @end group
 @end example
 
 @noindent
 create a 2 by 3 matrix with all elements equal to 13.
 
 This is an obscure notation and should be avoided.  It is better to
-use the function @samp{ones} to generate a matrix of the appropriate
+use the function @code{ones} to generate a matrix of the appropriate
 size whose elements are all one, and then to scale it to produce the
 desired result.  @xref{Special Utility Matrices}.
 
 @defvr {Built-in Variable} prefer_column_vectors
 If @code{prefer_column_vectors} is nonzero, operations like
 
 @example
 for i = 1:10
   a (i) = i;
 endfor
 @end example
 
 @noindent
-(for @samp{a} previously  undefined) produce column vectors.  Otherwise, row
+(for @code{a} previously  undefined) produce column vectors.  Otherwise, row
 vectors are preferred.  The default value is 0.
 
 If a variable is already defined to be a vector (a matrix with a single
 row or column), the original orientation is respected, regardless of the
 value of @code{prefer_column_vectors}.
 @end defvr
 
 @defvr {Built-in Variable} resize_on_range_error
@@ -194,17 +194,17 @@ like
 
 @example
 for i = 1:10
   a (i) = sqrt (i);
 endfor
 @end example
 
 @noindent
-(for @samp{a} previously undefined) result in the variable @samp{a}
+(for @code{a} previously undefined) result in the variable @code{a}
 being resized to be just large enough to hold the new value.  New
 elements that have not been given a value are set to zero.  If the value
 of @code{resize_on_range_error} is 0, an error message is printed and
 control is returned to the top level.  The default value is 1.
 @end defvr
 
 Note that it is quite inefficient to create a vector using a loop like
 the one shown in the example above.  In this particular case, it would
@@ -214,17 +214,17 @@ have been much more efficient to use the
 a = sqrt (1:10);
 @end example
 
 @noindent
 thus avoiding the loop entirely.  In cases where a loop is still
 required, or a number of values must be combined to form a larger
 matrix, it is generally much faster to set the size of the matrix first,
 and then insert elements using indexing commands.  For example, given a
-matrix @samp{a},
+matrix @code{a},
 
 @example
 @group
 [nr, nc] = size (a);
 x = zeros (nr, n * nc);
 for i = 1:n
   x(:,(i-1)*n+1:i*n) = a;
 endfor
@@ -298,18 +298,18 @@ the values of certain variables or doing
 Unlike most languages, functions in Octave may return multiple values.
 For example, the following statement
 
 @example
 [u, s, v] = svd (a)
 @end example
 
 @noindent
-computes the singular value decomposition of the matrix @samp{a} and
-assigns the three result matrices to @samp{u}, @samp{s}, and @samp{v}.
+computes the singular value decomposition of the matrix @code{a} and
+assigns the three result matrices to @code{u}, @code{s}, and @code{v}.
 
 The left side of a multiple assignment expression is itself a list of
 expressions, and is allowed to be a list of variable names or index
 expressions.  See also @ref{Index Expressions}, and @ref{Assignment Ops}.
 
 @menu
 * Call by Value::               
 * Recursion::                   
@@ -380,17 +380,17 @@ probably failing!) to modify the value o
 temporary result.
 
 @node Recursion,  , Call by Value, Calling Functions
 @subsection Recursion
 @cindex factorial function
 
 With some restrictions@footnote{Some of Octave's function are
 implemented in terms of functions that cannot be called recursively.
-For example, the ODE solver @code{lsode} is ultimiately implemented in a
+For example, the ODE solver @code{lsode} is ultimately implemented in a
 Fortran subroutine that cannot be called recursively, so @code{lsode}
 should not be called either directly or indirectly from within the
 user-supplied function that @code{lsode} requires.  Doing so will result
 in undefined behavior.}, recursive function calls are allowed.  A
 @dfn{recursive function} is one which calls itself, either directly or
 indirectly.  For example, here is an inefficient@footnote{It would be
 much better to use @code{prod (1:n)}, or @code{gamma (n+1)} instead,
 after first checking to ensure that the value @code{n} is actually a
@@ -607,17 +607,18 @@ such as equality.  They are written usin
 All of Octave's comparison operators return a value of 1 if the
 comparison is true, or 0 if it is false.  For matrix values, they all
 work on an element-by-element basis.  For example,
 
 @example
 @group
 [1, 2; 3, 4] == [1, 3; 2, 4]
 
-     @result{} [ 1, 0; 0, 1 ]
+     @result{}  1  0
+         0  1
 @end group
 @end example
 
 If one operand is a scalar and the other is a matrix, the scalar is
 compared to each element of the matrix in turn, and the result is the
 same size as the matrix.
 
 @table @code
@@ -795,34 +796,49 @@ the value of the variable @var{b} is onl
 
 This can be used to write somewhat more concise code.  For example, it
 is possible write
 
 @example
 @group
 function f (a, b, c)
   if (nargin > 2 && isstr (c))
-    ...
+    @dots{}
 @end group
 @end example
 
 @noindent
 instead of having to use two @code{if} statements to avoid attempting to
-evaluate an argument that doesn't exist.  For example, without hte
+evaluate an argument that doesn't exist.  For example, without the
 short-circuit feature, it would be necessary to write
 
 @example
 @group
 function f (a, b, c)
   if (nargin > 2)
     if (isstr (c))
-      ...
+      @dots{}
 @end group
 @end example
 
+Writing
+
+@example
+@group
+function f (a, b, c)
+  if (nargin > 2 & isstr (c))
+    @dots{}
+@end group
+@end example
+
+@noindent
+would result in an error if @code{f} were called with one or two
+arguments because Octave would be forced to try to evaluate both of the
+operands for the operator @samp{&}.
+
 @node Assignment Ops, Increment Ops, Boolean Expressions, Expressions
 @section Assignment Expressions
 @cindex assignment expressions
 @cindex assignment operators
 @cindex operators, assignment
 @cindex expressions, assignment
 
 @opindex =
@@ -885,16 +901,29 @@ octave:13> foo = "bar"
 foo = bar
 @end group
 @end example
 
 @noindent
 When the second assignment gives @code{foo} a string value, the fact that
 it previously had a numeric value is forgotten.
 
+Assignment of a scalar to an indexed matrix sets all of the elements
+that are referenced by the indices to the scalar value.  For example, if
+@code{a} is a matrix with at least two columns,
+
+@example
+@group
+a(:, 2) = 5
+@end group
+@end example
+
+@noindent
+sets all the elements in the second column of @code{a} to 5.
+
 Assigning an empty matrix @samp{[]} works in most cases to allow you to
 delete rows or columns of matrices and vectors.  @xref{Empty Matrices}.
 For example, given a 4 by 5 matrix @var{A}, the assignment
 
 @example
 A (3, :) = []
 @end example
 
diff --git a/doc/interpreter/func.texi b/doc/interpreter/func.texi
--- a/doc/interpreter/func.texi
+++ b/doc/interpreter/func.texi
@@ -191,17 +191,17 @@ automatically initialized to the number 
 been passed to the function.  For example, we might rewrite the
 @code{avg} function like this:
 
 @example
 @group
 function retval = avg (v)
   retval = 0;
   if (nargin != 1)
-    error ("usage: avg (vector)");
+    usage ("avg (vector)");
   endif
   if (is_vector (v))
     retval = sum (v) / length (v);
   else
     error ("avg: expecting vector argument");
   endif
 endfunction
 @end group
@@ -357,17 +357,17 @@ will result in @code{nargout} being set 
 @noindent
 will result in @code{nargout} being set to 2 inside the function
 @code{f}.
 
 At the top level, @code{nargout} is undefined.
 @end defvr
 
 @defvr {Built-in Variable} default_return_value
-The value given to otherwise unitialized return values if
+The value given to otherwise uninitialized return values if
 @code{define_all_return_values} is nonzero.  The default value is
 @code{[]}.
 @end defvr
 
 @defvr {Built-in Variable} define_all_return_values
 If the value of @code{define_all_return_values} is nonzero, Octave
 will substitute the value specified by @code{default_return_value} for
 any return values that remain undefined when a function returns.  The
@@ -417,17 +417,17 @@ Position an internal pointer to the firs
 you to cycle through the arguments more than once.  It is not necessary
 to call @code{va_start} if you do not plan to cycle through the
 arguments more than once.  This function may only be called inside
 functions that have been declared to accept a variable number of input
 arguments.
 @end deftypefn
 
 @deftypefn {Built-in Function} {} va_arg ()
-Return the value of the next available argument and moves the internal
+Return the value of the next available argument and move the internal
 pointer to the next argument.  It is an error to call @code{va_arg()}
 when there are no more arguments available.
 @end deftypefn
 
 Sometimes it is useful to be able to pass all unnamed arguments to
 another function.  The keyword @var{all_va_args} makes this very easy to
 do.  For example,
 
@@ -603,22 +603,24 @@ function.  If the time stamp indicates t
 the last time it was read, Octave reads it again.
 
 Checking the time stamp allows you to edit the definition of a function
 while Octave is running, and automatically use the new function
 definition without having to restart your Octave session.  Checking the
 time stamp every time a function is used is rather inefficient, but it
 has to be done to ensure that the correct function definition is used.
 
-Octave assumes that function files in the
-@file{@value{OCTAVEHOME}/share/octave/@value{VERSION}/m} directory tree
-will not change, so it doesn't have to check their time stamps every
-time the functions defined in those files are used.  This is normally a
-very good assumption and provides a significant improvement in
-performance for the function files that are distributed with Octave.
+To avoid degrading performance unnecessarily by checking the time stamps
+on functions that are not likely to change, Octave assumes that function
+files in the directory tree
+@file{@value{OCTAVEHOME}/share/octave/@value{VERSION}/m} will not
+change, so it doesn't have to check their time stamps every time the
+functions defined in those files are used.  This is normally a very good
+assumption and provides a significant improvement in performance for the
+function files that are distributed with Octave.
 
 If you know that your own function files will not change while you are
 running Octave, you can improve performance by setting the variable
 @code{ignore_function_time_stamp} to @code{"all"}, so that Octave will
 ignore the time stamps for all function files.  Setting it to
 @code{"system"} gives the default behavior.  If you set it to anything
 else, Octave will check the time stamps on all function files.
 
@@ -650,31 +652,31 @@ not a mixture of both.
 directories that are distributed with Octave.
 @end defvr
 
 @defvr {Built-in Variable} ignore_function_time_stamp
 This variable can be used to prevent Octave from making the system call
 @code{stat} each time it looks up functions defined in function files.
 If @code{ignore_function_time_stamp} to @code{"system"}, Octave will not
 automatically recompile function files in subdirectories of
-@code{@value{OCTAVEHOME}/lib/@value{VERSION}} if they have changed since
+@file{@value{OCTAVEHOME}/lib/@value{VERSION}} if they have changed since
 they were last compiled, but will recompile other function files in the
 @code{LOADPATH} if they change.  If set to @code{"all"}, Octave will not
 recompile any function files unless their definitions are removed with
 @code{clear}.  For any other value of @code{ignore_function_time_stamp},
 Octave will always check to see if functions defined in function files
 need to recompiled.  The default value of
 @code{ignore_function_time_stamp} is @code{"system"}.
 @end defvr
 
 @defvr {Built-in Variable} warn_function_name_clash
 If the value of @code{warn_function_name_clash} is nonzero, a warning is
 issued when Octave finds that the name of a function defined in a
 function file differs from the name of the file.  (If the names
-disagree, the name delcared inside the file is ignored.)  If the value
+disagree, the name declared inside the file is ignored.)  If the value
 is 0, the warning is omitted.  The default value is 1.
 @end defvr
 
 @node Script Files, Dynamically Linked Functions, Function Files, Functions and Scripts
 @section Script Files
 
 A script file is a file containing (almost) any sequence of Octave
 commands.  It is read and evaluated just as if you had typed each
@@ -718,17 +720,17 @@ simply type the base name of the file th
 (Octave uses the same rules to search for script files as it does to
 search for function files.)
 
 If the first token in a file (ignoring comments) is @code{function},
 Octave will compile the function and try to execute it, printing a
 message warning about any non-whitespace characters that appear after
 the function definition.
 
-Note that Octave does not try to lookup the definition of any identifier
+Note that Octave does not try to look up the definition of any identifier
 until it needs to evaluate it.  This means that Octave will compile the
 following statements if they appear in a script file, or are typed at
 the command line,
 
 @example
 @group
 # not a function file:
 1;
@@ -738,17 +740,17 @@ endfunction
 function do_something ()
   do_something_else ();
 endfunction
 @end group
 @end example
 
 @noindent
 even though the function @code{do_something} is not defined before it is
-referenced in the function @code{foo}.  This is not an error because the
+referenced in the function @code{foo}.  This is not an error because
 Octave does not need to resolve all symbols that are referenced by a
 function until the function is actually evaluated.
 
 Since Octave doesn't look for definitions until they are needed, the
 following code will always print @samp{bar = 3} whether it is typed
 directly on the command line, read from a script file, or is part of a
 function body, even if there is a function or script file called
 @file{bar.m} in Octave's @code{LOADPATH}.
@@ -765,170 +767,222 @@ definitions were resolved as the functio
 be virtually impossible to make Octave clever enough to evaluate this
 code in a consistent fashion.  The parser would have to be able to
 perform the call to @code{eval} at compile time, and that would be
 impossible unless all the references in the string to be evaluated could
 also be resolved, and requiring that would be too restrictive (the
 string might come from user input, or depend on things that are not
 known until the function is evaluated).
 
+Although Octave normally executes commands from script files that have
+the name @file{@var{file}.m}, you can use the function @code{source} to
+execute commands from any file.
+
 @deftypefn {Built-in Function} {} source (@var{file})
 Parse and execute the contents of @var{file}.  This is equivalent to
 executing commands from a script file, but without requiring the file to
-be named @var{file}.m.
+be named @file{@var{file}.m}.
 @end deftypefn
 
 @node Dynamically Linked Functions, Organization of Functions, Script Files, Functions and Scripts
 @section Dynamically Linked Functions
+@cindex dynamic linking
 
 On some systems, Octave can dynamically load and execute functions
-written in C++ or other compiled languages.  This currently only works
-on systems that have a working version of the GNU dynamic linker,
-@code{dld}. Unfortunately, @code{dld} does not work on very many
-systems, but someone is working on making @code{dld} use the GNU Binary
-File Descriptor library, @code{BFD}, so that may soon change.  In any
-case, it should not be too hard to make Octave's dynamic linking
-features work on other systems using system-specific dynamic linking
-facilities.
+written in C++.  Octave can only directly call functions written in C++,
+but you can also load functions written in other languages
+by calling them from a simple wrapper function written in C++.
 
 Here is an example of how to write a C++ function that Octave can load,
 with commentary.  The source for this function is included in the source
-distributions of Octave, in the file @file{examples/hello.cc}.
+distributions of Octave, in the file @file{examples/oregonator.cc}.  It
+defines the same set of differential equations that are used in the
+example problem of @ref{Ordinary Differential Equations}.  By running
+that example and this one, we can compare the execution times to see
+what sort of increase in speed you can expect by using dynamically
+linked functions.
 
-To use this file, your version of Octave must support dynamic
-linking.  To find out if it does, type the command
+The function defined in @file{oregonator.cc} contains just 8 statements,
+and is not much different than the code defined in the corresponding
+M-file (also distributed with Octave in the file
+@file{examples/oregonator.m}).
+
+Here is the complete text of @file{oregonator.cc}:
+
+just
 
 @example
-x = octave_config_info; x.DEFS
+@group
+#include <octave/oct.h>
+
+DEFUN_DLD (oregonator, args, ,
+  "The `oregonator'.")
+@{
+  ColumnVector dx (3);
+
+  ColumnVector x = args(0).vector_value ();
+
+  dx(0) = 77.27 * (x(1) - x(0)*x(1) + x(0)
+                   - 8.375e-06*pow (x(0), 2));
+
+  dx(1) = (x(2) - x(0)*x(1) - x(1)) / 77.27;
+
+  dx(2) = 0.161*(x(0) - x(2));
+
+  return octave_value (dx);
+@}
+@end group
+@end example
+
+The first line of the file,
+
+@example
+#include <octave/oct.h>
+@end example
+
+@noindent
+includes declarations for all of Octave's internal functions that you
+will need.  If you need other functions from the standard C++ or C
+libraries, you can include the necessary headers here.
+
+The next two lines
+@example
+@group
+DEFUN_DLD (oregonator, args, ,
+  "The `oregonator'.")
+@end group
 @end example
 
 @noindent
-at the Octave prompt.  Support for dynamic linking is included if
-the output contains the string @code{-DWITH_DYNAMIC_LINKING=1}.
+declares the function.  The macro @code{DEFUN_DLD} and the macros that
+it depends on are defined in the files @file{defun-dld.h},
+@file{defun.h}, and @file{defun-int.h} (these files are included in the
+header file @file{octave/oct.h}).
 
-To compile this file, type the command
+Note that the third parameter to @code{DEFUN_DLD} (@code{nargout}) is
+not used, so it is omitted from the list of arguments to in order to
+avoid  the warning from gcc about an unused function parameter.
+
+@noindent
+simply declares an object to store the right hand sides of the
+differential equation, and
+
+The statement
 
 @example
-mkoctfile hello.cc
+ColumnVector x = args(0).vector_value ();
 @end example
 
 @noindent
-at the shell prompt.  The script @file{mkoctfile} should have been
-installed along with Octave.  Running it will create a file called
-@file{hello.oct} that can be loaded by Octave.  To test the
-@file{hello.oct} file, start Octave and type the command
+extracts a column vector from the input arguments.  The variable
+@code{args} is passed to functions defined with @code{DEFUN_DLD} as an
+@code{octave_value_list} object, which includes methods for getting the
+length of the list and extracting individual elements.
+
+In this example, we don't check for errors, but that is not difficult.
+All of the Octave's built-in functions do some form of checking on their
+arguments, so you can check the source code for those functions for
+examples of various strategies for verifying that the correct number and
+types of arguments have been supplied.
+
+The next statements
 
 @example
-hello ("easy as", 1, 2, 3)
+@group
+ColumnVector dx (3);
+
+dx(0) = 77.27 * (x(1) - x(0)*x(1) + x(0)
+                 - 8.375e-06*pow (x(0), 2));
+
+dx(1) = (x(2) - x(0)*x(1) - x(1)) / 77.27;
+
+dx(2) = 0.161*(x(0) - x(2));
+@end group
+@end example
+
+@noindent
+define the right hand side of the differential equation.  Finally, we
+can return @code{dx}:
+
+@example
+return octave_value (dx);
+@end example
+
+@noindent
+The actual return type is @code{octave_value_list}, but it is only
+necessary to convert the return type to an @code{octave_value} because
+there is a default constructor that can automatically create an object
+of that type from an @code{octave_value} object, so we can just use that
+instead.
+
+To use this file, your version of Octave must support dynamic linking.
+To find out if it does, type the command
+@kbd{octave_config_info ("dld")} at the Octave prompt.  Support for
+dynamic linking is included if this command returns 1.
+
+To compile the example file, type the command @kbd{mkoctfile
+oregonator.cc} at the shell prompt.  The script @code{mkoctfile} should
+have been installed along with Octave.  Running it will create a file
+called @file{oregonator.oct} that can be loaded by Octave.  To test the
+@file{oregonator.oct} file, start Octave and type the command
+
+@example
+oregonator ([1, 2, 3], 0)
 @end example
 
 @noindent
 at the Octave prompt.  Octave should respond by printing
 
 @example
-Hello, world!
-easy as
-1
-2
-3
-ans = 3
+@group
+ans =
+
+   77.269353
+   -0.012942
+   -0.322000
+@end group
 @end example
 
-Additional examples are available in the files in the src directory
-of the Octave distribution that use the macro @code{DEFUN_DLD_BUILTIN}.
-Currently, this includes the files
+You can now use the @file{oregonator.oct} file just as you would the
+@code{oregonator.m} file to solve the set of differential equations.
+
+On a 133 MHz Pentium running Linux, Octave can solve the problem shown
+in @ref{Ordinary Differential Equations} in about 1.4 second using the
+dynamically linked function, compared to about 19 seconds using the
+M-file.  Similar decreases in execution time can be expected for other
+functions, particularly those that rely on functions like @code{lsode}
+that require user-supplied functions.
+
+Additional examples are available in the files in the @file{src}
+directory of the Octave distribution.  Currently, this includes the
+files
 
 @example
 @group
 balance.cc  fft.cc      hess.cc     lu.cc       schur.cc
 chol.cc     fft2.cc     ifft.cc     minmax.cc   sort.cc
 colloc.cc   filter.cc   ifft2.cc    pinv.cc     svd.cc
 dassl.cc    find.cc     inv.cc      qr.cc       syl.cc
 det.cc      fsolve.cc   log.cc      quad.cc
 eig.cc      fsqp.cc     lsode.cc    qzval.cc
 expm.cc     givens.cc   lu.cc       rand.cc
 @end group
 @end example
 
-The difference between @code{DEFUN_DLD} and @code{DEFUN_DLD_BUILTIN} is
-that @code{DEFUN_DLD_BUILTIN} can define a built-in function that is not
+@noindent
+These files use the macro @code{DEFUN_DLD_BUILTIN} instead of
+@code{DEFUN_DLD}.  The difference between these two macros is just that
+@code{DEFUN_DLD_BUILTIN} can define a built-in function that is not
 dynamically loaded if the operating system does not support dynamic
 linking.  To define your own dynamically linked functions you should use
 @code{DEFUN_DLD}.
 
-@example
-@group
-#include <octave/config.h>
-
-#include <iostream.h>
-
-#include <octave/defun-dld.h>
-#include <octave/error.h>
-#include <octave/oct-obj.h>
-#include <octave/pager.h>
-#include <octave/symtab.h>
-#include <octave/variables.h>
-@end group
-@end example
-
-@code{DEFUN_DLD} and the macros that it depends on are defined in the
-files @file{defun-dld.h}, @file{defun.h}, and @file{defun-int.h}.
-
-Note that the third parameter (@code{nargout}) is not used, so it is
-omitted from the list of arguments to @code{DEFUN_DLD} in order to avoid
-the warning from gcc about an unused function parameter. 
-
-@example
-@group
-DEFUN_DLD (hello, args, ,
-  "[...] = hello (...)\n\
-\n\
-Print greeting followed by the values of all the arguments passed.\n\
-Returns all arguments in reverse order.")
-@{
-@end group
-@end example
-
-The list of values to return.  See the declaration in @file{oct-obj.h}.
-
-@example
-  octave_value_list retval;
-@end example
-
-This stream is normally connected to the pager.
-
-@example
-  octave_stdout << "Hello, world!\n";
-@end example
-
-The arguments to this function are available in @samp{args}.
-
-@example
-  int nargin = args.length ();
-@end example
-
-The @code{octave_value_list} class is a zero-based array of
-@code{octave_value} objects.  The declaration for the
-@code{octave_value} class is in the file @code{pt-const.h}.  The
-@code{print} method will send its output to @code{octave_stdout}, so
-it will also end up going through the pager.
-
-@example
-@group
-  for (int i = 0; i < nargin; i++)
-    @{
-      octave_value tmp = args (i);
-      tmp.print ();
-      retval (nargin-i-1) = tmp;
-    @}
-
-  return retval;
-@}
-@end group
-@end example
+There is currently no detailed description of all the functions that you
+can call in a built-in function.  For the time being, you will have to
+read the source code for Octave.
 
 @node Organization of Functions,  , Dynamically Linked Functions, Functions and Scripts
 @section Organization of Functions Distributed with Octave
 
 Many of Octave's standard functions are distributed as function files.
 They are loosely organized by topic, in subdirectories of
 @file{OCTAVE_HOME/lib/octave/VERSION/m}, to make it easier to find
 them.
diff --git a/doc/interpreter/image.texi b/doc/interpreter/image.texi
--- a/doc/interpreter/image.texi
+++ b/doc/interpreter/image.texi
@@ -6,16 +6,23 @@
 @chapter Image Processing
 
 To display images using these functions, you must be using Octave with
 the X Window System, and you must have either @code{xloadimage} or
 @code{xv} installed.  You do not need to be running X in order to
 manipulate images, however, so some of these functions may be useful
 even if you are not able to view the results.
 
+Loading images only works with Octave's image format (a file with a
+matrix containing the image data, and a matrix containing the
+colormap).  Contributions of robust, well-written functions to read
+other image formats are welcome.  If you can provide them, or would like
+to improve Octave's image processing capabilities in other ways, please
+contact @email{bug-octave@@bevo.che.wisc.edu}.
+
 @deftypefn {Function File} {} colormap (@var{map})
 @deftypefnx {Function File} {} colormap ("default")
 Set the current colormap.
 
 @code{colormap (@var{map})} sets the current colormap to @var{map}.  The
 color map should be an @var{n} row by 3 column matrix.  The columns
 contain red, green, and blue intensities respectively.  All entries
 should be between 0 and 1 inclusive.  The new colormap is returned.
diff --git a/doc/interpreter/install.texi b/doc/interpreter/install.texi
--- a/doc/interpreter/install.texi
+++ b/doc/interpreter/install.texi
@@ -42,74 +42,84 @@ when building Octave:
 @item --prefix=@var{prefix}
 Install Octave in subdirectories below @var{prefix}.  The default value
 of @var{prefix} is @file{/usr/local}.
 
 @item --srcdir=@var{dir}
 Look for Octave sources in the directory @var{dir}.
 
 @item --with-f2c
-Use f2c even if Fortran compiler is available.
+Use @code{f2c} even if a Fortran compiler is available.
+
+@item --with-g77
+Use @code{g77} to compile Fortran code.
 
-@item --enable-dld
-Use DLD to make Octave capable of dynamically linking
-externally compiled functions.  This only works on systems that have a
-working port of DLD.
+@item --enable-dl
+Use @code{dlopen} and friends to make Octave capable of dynamically
+linking externally compiled functions.  This only works on systems that
+actually have these functions.
+
+@item --enable-shl
+Use @code{shl_load} and friends to make Octave capable of dynamically
+linking externally compiled functions.  This only works on systems that
+actually have these functions (only HP-UX systems).
 
 @item --enable-lite-kernel
-Compile smaller kernel.  This currently requires DLD so that Octave can
-load functions at run time that are not loaded at compile time.
+Compile smaller kernel.  This currently requires the dynamic linking
+functions @code{dlopen} or @code{shl_load} and friends so that Octave
+can load functions at run time that are not loaded at compile time.
 
 @item --help
 Print a summary of the options recognized by the configure script.
 @end table
 
 See the file @file{INSTALL} for more information about the command line
 options used by configure.  That file also contains instructions for
 compiling in a directory other than where the source is located.
 
 @item
 Run make.
 
-You will need a recent version of GNU make.  Modifying Octave's
+You will need a recent version of GNU Make.  Modifying Octave's
 makefiles to work with other make programs is probably not worth
-your time.  We recommend you get and compile GNU make instead.
+your time.  We recommend you get and compile GNU Make instead.
 
 For plotting, you will need to have gnuplot installed on your system.
 Gnuplot is a command-driven interactive function plotting program.
 Gnuplot is copyrighted, but freely distributable.  The `gnu' in gnuplot
 is a coincidence---it is not related to the GNU project or the FSF in
 any but the most peripheral sense.
 
-For version @value{VERSION}, you must have the GNU C++ compiler (gcc)
-version 2.7.2 or later to compile Octave.  You will also need version
-2.7.1 or 2.7.2 of the GNU C++ class library (libg++).  If you plan to
-modify the parser you will also need GNU bison and fles.  If you modify
-the documentation, you will need GNU Texinfo, along with the patch for
-the makeinfo program that is distributed with Octave.
+For version @value{VERSION}, you must have the GNU C++ compiler
+(@code{gcc}) version 2.7.2 or later to compile Octave.  You will also
+need version 2.7.1 or 2.7.2 of the GNU C++ class library
+(@code{libg++}).  If you plan to modify the parser you will also need
+GNU @code{bison} and @code{flex}.  If you modify the documentation, you
+will need GNU Texinfo, along with the patch for the @code{makeinfo}
+program that is distributed with Octave.
 
-GNU make, gcc, and libg++, gnuplot, bison, flex, and Texinfo are all
-available from many anonymous ftp archives.  The primary site is
-prep.ai.mit.edu, but it is often very busy.  A list of sites that mirror
-the software on prep is available by anonymous ftp from prep.ai.mit.edu
-in the file @file{/pub/gnu/GNUinfo/FTP}, or by fingering
-fsf@@prep.ai.mit.edu.
+GNU Make, @code{gcc}, and @code{libg++}, @code{gnuplot}, @code{bison},
+@code{flex}, and Texinfo are all available from many anonymous ftp
+archives.  The primary site is @url{prep.ai.mit.edu}, but it is often
+very busy.  A list of sites that mirror the software on @code{prep} is
+available by anonymous ftp from
+@url{ftp://prep.ai.mit.edu/pub/gnu/GNUinfo/FTP}, or by fingering 
+@email{fsf@@prep.ai.mit.edu}.
 
 If you don't have a Fortran compiler, or if your Fortran compiler
 doesn't work like the traditional Unix f77, you will need to have the
-Fortran to C translator f2c.  You can get f2c from any
-number of anonymous ftp archives.  The most recent version of f2c
-is always available from netlib.att.com.
+Fortran to C translator @code{f2c}.  You can get @code{f2c} from any
+number of anonymous ftp archives.  The most recent version of @code{f2c}
+is always available from @url{netlib.att.com}.
 
-On an otherwise idle SPARCstation II, it will take somewhere between 60
-and 90 minutes to compile everything, depending on whether you are
-compiling the Fortran libraries with f2c or using the Fortran compiler
-directly.  You will need about 50 megabytes of disk storage to work with
-(considerably less if you don't compile with debugging symbols).  To do
-that, use the command
+On an otherwise idle Pentium 133 running Linux, it will take somewhere
+between 1-1/2 to 3 hours to compile everything, depending on whether you
+are building shared libraries.  You will need about 100 megabytes of disk
+storage to work with (considerably less if you don't compile with debugging
+symbols).  To do that, use the command
 
 @example
 make CFLAGS=-O CXXFLAGS=-O LDFLAGS=
 @end example
 
 @noindent
 instead of just @samp{make}.
 
@@ -189,17 +199,17 @@ On some SCO systems, @code{info} fails t
 the definition from @file{info/config.h} should allow it to compile.
 
 @item
 If @code{configure} finds @code{dlopen}, @code{dlsym}, @code{dlclose},
 and @code{dlerror}, but not the header file @file{dlfcn.h}, you need to
 find the source for the header file and install it in the directory
 @file{usr/include}.  This is reportedly a problem with Slackware 3.1.
 For Linux/GNU systems, the source for @file{dlfcn.h} is in the
-@samp{ldso} package.
+@code{ldso} package.
 
 @item
 If you encounter errors like
 
 @smallexample
 @group
 passing `void (*)()' as argument 2 of
   `octave_set_signal_handler(int, void (*)(int))'
@@ -210,17 +220,17 @@ passing `void (*)()' as argument 2 of
 or
 
 @smallexample
 warning: ANSI C++ prohibits conversion from `(int)' to `(...)'
 @end smallexample
 
 @noindent
 while compiling @file{sighandlers.cc}, you may need to edit some files
-in the gcc include subdirectory to add proper prototypes for functions
+in the @code{gcc} include subdirectory to add proper prototypes for functions
 there.  For example, Ultrix 4.2 needs proper declarations for the
 @code{signal} function and the @code{SIG_IGN} macro in the file
 @file{signal.h}.
 
 On some systems the @code{SIG_IGN} macro is defined to be something like
 this:
 
 @example
@@ -235,39 +245,39 @@ when it should really be something like:
 @end example
 
 @noindent
 to match the prototype declaration for the @code{signal} function.  This
 change should also be made for the @code{SIG_DFL} and @code{SIG_ERR}
 symbols. It may be necessary to change the definitions in
 @file{sys/signal.h} as well.
 
-The gcc fixincludes/fixproto script should probably fix these problems
-when gcc installs its modified set of header files, but I don't think
-that's been done yet.
+The @code{gcc} @code{fixincludes} and @code{fixproto} scripts should
+probably fix these problems when @code{gcc} installs its modified set of
+header files, but I don't think that's been done yet.
 
 @strong{You should not change the files in @file{/usr/include}}.  You
-can find the gcc include directory tree by running the command
+can find the @code{gcc} include directory tree by running the command
 
 @example
 gcc -print-libgcc-file-name
 @end example
 
 @noindent
-The directory of gcc include files normally begins in the same directory
+The directory of @code{gcc} include files normally begins in the same directory
 that contains the file @file{libgcc.a}.
 
 @item
-There is a bug with the makeinfo program that is distributed with
+There is a bug with the @code{makeinfo} program that is distributed with
 Texinfo (through version 3.9) that causes the indices in Octave's
 on-line manual to be generated incorrectly.  If you need to recreate the
-on-line documentation, you should get the makeinfo program that is
-distributed with texinfo-3.9 and apply the patch for makeinfo that is
-distributed with Octave.  See the file @file{MAKEINFO.PATCH} for more
-details.
+on-line documentation, you should get the @code{makeinfo} program that
+is distributed with texinfo-3.9 and apply the patch for @code{makeinfo}
+that is distributed with Octave.  See the file @file{MAKEINFO.PATCH} for
+more details.
 
 @item
 Some of the Fortran subroutines may fail to compile with older versions
 of the Sun Fortran compiler.  If you get errors like
 
 @smallexample
 zgemm.f:
 	zgemm:
@@ -300,17 +310,17 @@ On NeXT systems, if you get errors like 
 @noindent
 when compiling @file{Array.cc} and @file{Matrix.cc}, try recompiling
 these files without @code{-g}.
 
 @item
 Some people have reported that calls to shell_cmd and the pager do not
 work on SunOS systems.  This is apparently due to having
 @code{G_HAVE_SYS_WAIT} defined to be 0 instead of 1 when compiling
-libg++.
+@code{libg++}.
 
 @item
 On NeXT systems, linking to @file{libsys_s.a} may fail to resolve the
 following functions
 
 @example
 _tcgetattr
 _tcsetattr
@@ -351,54 +361,72 @@ script incorrectly determined that it do
 problem by editing the file @file{config.h} to not define
 @code{HAVE_ISINF}, @code{HAVE_FINITE}, and @code{HAVE_ISNAN}.
 
 In any case, please report this as a bug since it might be possible to
 modify Octave's configuration script to automatically determine the
 proper thing to do.
 
 @item
-If you don't have NPSOL but you still want to be able to solve NLPs, or
-if you don't have QPSOL but you still want to solve QPs, you'll need to
-find replacements or order them from Stanford.  If you know of a freely
-redistributable replacement, please let us know---we might be interested
-in distributing it with Octave.
+If you don't have @sc{Npsol} but you still want to be able to solve
+NLPs, or if you don't have @sc{Qpsol} but you still want to solve QPs,
+you'll need to find replacements or order them from Stanford.  If you
+know of a freely redistributable replacement, please let us know---we
+might be interested in distributing it with Octave.
 
-You can get more information about NPSOL and QPSOL from
+You can get more information about @sc{Npsol} and @sc{Qpsol} from
 
 @quotation
 Stanford Business Sofrtware, Inc.@*
 2680 Bayshore Parkway, Suite 304@*
 Mountain View, CA 94043@*
 Tel: (415) 962-8719@*
 Fax: (415) 962-1869
 @end quotation
 
-Octave may soon support FSQP, an NLP solver from Andre Tits
-(andre@@src.umd.edu) of the University of Maryland.  FSQP is available
-free of charge to academic sites, but can not be redistributed to third
-parties.
+Octave may soon support @sc{Fsqp}, an NLP solver from Andre Tits
+@email{andre@@src.umd.edu} of the University of Maryland.  @sc{Fsqp} is
+available free of charge to academic sites, but can not be redistributed
+to third parties.
 @end itemize
 
 @node Binary Distributions,  , Installation Problems, Installation
 @appendixsec Binary Distributions
 
-This section contains instructions for creating and installing a
-binary distribution.
+Although Octave is not very difficult to build from its sources, it is a
+relatively large program that does require a significant amount of time
+and disk space to compile and install.  Because of this, many people
+want to be able to obtain binary distributions so they can start using
+Octave immediately, without having to bother with the details of
+compiling it first.  This is understandable, so I try to maintain a
+current collection of binary distributions at
+@url{ftp://ftp.che.wisc.edu/pub/octave/BINARIES}.
+
+Please understand, however, that there is only a limited amount of time
+available to devote to making binaries, so binaries may not be
+immediately available for some platforms.  (Please contact
+@email{bug-octave@@bevo.che.wisc.edu} if you are interested in helping
+make a binary distributions available for your system.)
+
+Also, binary distributions are limited to static binaries that do not
+support dynamic linking.  For earlier versions of Octave, I tried
+distributing dynamically linked binaries but that proved to be too much
+trouble to support.  If you want to have a copy of Octave that includes
+all the features described in this manual, you will have to build it
+from the sources yourself, or find someone else who is willing to do it
+for you.
 
 @menu
 * Installing Octave from a Binary Distribution::  
 * Creating a Binary Distribution::  
 @end menu
 
 @node Installing Octave from a Binary Distribution, Creating a Binary Distribution, Binary Distributions, Binary Distributions
 @appendixsubsec Installing Octave from a Binary Distribution
 
-@itemize @bullet
-@item
 To install Octave from a binary distribution, execute the command
 
 @example
 sh ./install-octave
 @end example
 
 @noindent
 in the top level directory of the distribution.
@@ -434,29 +462,29 @@ Object files that will be dynamically lo
 
 @item share/octave/@var{version}/imagelib
 Image files that are distributed with Octave.
 @end table
 
 @noindent
 where @var{version} stands for the current version number of the
 interpreter, and @var{host_type} is the type of computer on which Octave
-is installed (for example, @samp{i486-unknown-gnu}).
+is installed (for example, @samp{@value{TARGETHOSTTYPE}}).
 
-If these directories don't exist, the script @file{install-octave} will
+If these directories don't exist, the script @code{install-octave} will
 create them for you.  The installation script also creates the following
 subdirectories of @file{/usr/local} that are intended for locally
 installed functions:
 
 @table @file
 @item share/octave/site/m
 Locally installed M-files.
 
 @item libexec/octave/site/exec/@var{host_type}
-Locally installed binaries intendec to be run by Octave rather than by
+Locally installed binaries intended to be run by Octave rather than by
 the user.
 
 @item libexec/octave/site/octave/@var{host_type}
 Local object files that will be dynamically linked.
 @end table
 
 If it is not possible for you to install Octave in @file{/usr/local}, or
 if you would prefer to install it in a different directory, you can
@@ -465,62 +493,46 @@ specify the name of the top level direct
 
 @example
 sh ./install-octave /some/other/directory
 @end example
 
 @noindent
 will install Octave in subdirectories of the directory
 @file{/some/other/directory}.
-@end itemize
 
 @node Creating a Binary Distribution,  , Installing Octave from a Binary Distribution, Binary Distributions
 @appendixsubsec Creating a Binary Distribution
 
-Here is how to build a binary distribution for others.
+Here is how to build a binary distribution for others to use.  If you
+want to make a binary distribution for your system available along with
+the Octave sources and binaries on @url{ftp.che.wisc.edu}, please follow
+this procedure.  For directions explaining how to make the binary
+available on the ftp site, please contact
+@email{bug-octave@@bevo.che.wisc.edu}.
 
 @itemize @bullet
 @item
-Unpack the source distribution.
-
-@item
-Configure Octave using the command
+Unpack the source distribution:
 
 @example
-./configure --disable-dl --disable-shl --disable-shared
-@end example
-
-If your system supports shared libraries and dynamic linking, you should
-also build a binary that supports those features, but it is important to
-create a statically linked executable that will run no matter what
-versions of the libraries are installed on the target system.
-
-@item
-Build the binaries using the command
-
-@example
-make LDFLAGS=-static
+gunzip -c octave-@value{VERSION}.tar.gz | tar xf -
 @end example
 
 @item
-Type @samp{make static-binary-dist}.  This will create a compressed tar
-file ready for distribution.  The file will have a name like
-@file{octave-@var{version}-@var{host_type}-static.tar.gz}.
-
-@item
-If your system supports dynamic linking and shared libraries, build
-another version of Octave that supports these features.  Use the
-commands
+Change your current directory to the top-level directory of the source
+distribution:
 
 @example
-@group
-configure --enable-shared
-make
-make dynamic-binary-dist
-@end group
+cd octave-@value{VERSION}
 @end example
 
-@noindent
-This will create a compressed tar file ready for distribution.  The file
-will have a name like
-@file{octave-@var{version}-@var{host_type}-dynamic.tar.gz}.
+@item
+Make the binary distribution:
 
+@example
+make binary-dist
+@end example
+
+This will create a compressed tar file ready for distribution.
+It will contain statically linked binaries and have a name like
+@file{octave-@value{VERSION}-@value{TARGETHOSTTYPE}.tar.gz}
 @end itemize
diff --git a/doc/interpreter/intro.texi b/doc/interpreter/intro.texi
--- a/doc/interpreter/intro.texi
+++ b/doc/interpreter/intro.texi
@@ -32,29 +32,29 @@ This document corresponds to Octave vers
 * Simple Examples::             
 * Conventions::                 
 @end menu
 
 @node Running Octave, Simple Examples, Introduction, Introduction
 @section Running Octave
 
 On most systems, the way to invoke Octave is with the shell command
-@samp{octave}.  Octave displays an initial message and then a prompt
+@kbd{octave}.  Octave displays an initial message and then a prompt
 indicating it is ready to accept input.  You can begin typing Octave
 commands immediately afterward.
 
 If you get into trouble, you can usually interrupt Octave by typing
 @kbd{Control-C} (usually written @kbd{C-c} for short).  @kbd{C-c} gets
 its name from the fact that you type it by holding down @key{CTRL} and
 then pressing @key{c}.  Doing this will normally return you to Octave's
 prompt.
 
 @cindex exiting octave
 @cindex quitting octave
-To exit Octave, type @samp{quit}, or @samp{exit} at the Octave prompt.
+To exit Octave, type @kbd{quit}, or @kbd{exit} at the Octave prompt.
 
 On systems that support job control, you can suspend Octave by sending
 it a @code{SIGTSTP} signal, usually by typing @kbd{C-z}.
 
 @node Simple Examples, Conventions, Running Octave, Introduction
 @section Simple Examples
 
 The following chapters describe all of Octave's features in detail, but
@@ -85,93 +85,85 @@ octave:2> b = rand (3, 2);
 @end example
 
 @noindent
 will create a 3 row, 2 column matrix with each element set to a random
 value between zero and one.
 
 To display the value of any variable, simply type the name of the
 variable.  For example, to display the value stored in the matrix
-@samp{b}, type the command
+@code{b}, type the command
 
 @example
 octave:3> b
 @end example
 
 @unnumberedsubsec Matrix Arithmetic
 
 Octave has a convenient operator notation for performing matrix
-arithmetic.  For example, to multiply the matrix @var{a} by a scalar
+arithmetic.  For example, to multiply the matrix @code{a} by a scalar
 value, type the command
 
 @example
 octave:4> 2 * a
 @end example
 
-To multiply the two matrices @var{a} and @var{b}, type the command
+To multiply the two matrices @code{a} and @code{b}, type the command
 
 @example
 octave:5> a * b
 @end example
 
 To form the matrix product
 @iftex
 @tex
- $a^Ta$,
+$@code{a}^T@code{a}$,
 @end tex
 @end iftex
 @ifinfo
- @code{transpose (a) * a},
+@code{transpose (a) * a},
 @end ifinfo
 type the command
 
 @example
 octave:6> a' * a
 @end example
 
 @unnumberedsubsec Solving Linear Equations
 
-To solve the set of linear equations
-@iftex
-@tex
- ${\bf Ax} = {\bf b}$,
-@end tex
-@end iftex
-@ifinfo
-@code{Ax = b},
-@end ifinfo
+To solve the set of linear equations @code{a@var{x} = b},
 use the left division operator, @samp{\}:
 
 @example
 octave:7> a \ b
 @end example
 
 @noindent
 This is conceptually equivalent to
 @iftex
 @tex
- ${\bf A}^{-1}{\bf b}$,
+$@code{a}^{-1}@code{b}$,
 @end tex
 @end iftex
 @ifinfo
-inv (A) * b,
+@code{inv (a) * b},
 @end ifinfo
 but avoids computing the inverse of a matrix directly.
 
 If the coefficient matrix is singular, Octave will print a warning
 message and compute a minimum norm solution.
 
 @unnumberedsubsec Integrating Differential Equations
 
 Octave has built-in functions for solving nonlinear differential
 equations of the form
 @iftex
 @tex
 $$
- {dx \over dt} = f(x,t), \qquad {\rm with} x(t=t_0) = x_0
+ {dx \over dt} = f(x,t), \qquad x(t=t_0) = x_0
 $$
 @end tex
 @end iftex
 @ifinfo
 
 @example
 @group
 dx
@@ -242,17 +234,17 @@ t = linspace (0, 50, 200)';
 @noindent
 it is easy to integrate the set of differential equations:
 
 @example
 x = lsode ("f", x0, t);
 @end example
 
 @noindent
-The function @samp{lsode} uses the Livermore Solver for Ordinary
+The function @code{lsode} uses the Livermore Solver for Ordinary
 Differential Equations, described in A. C. Hindmarsh, @cite{ODEPACK, a
 Systematized Collection of ODE Solvers}, in: Scientific Computing, R. S.
 Stepleman et al. (Eds.), North-Holland, Amsterdam, 1983, pages 55--64.
 
 @unnumberedsubsec Producing Graphical Output
 
 To display the solution of the previous example graphically, use the
 command
@@ -262,49 +254,49 @@ plot (t, x)
 @end example
 
 If you are using the X Window System, Octave will automatically create
 a separate window to display the plot.  If you are using a terminal that
 supports some other graphics commands, you will need to tell Octave what
 kind of terminal you have.  Type the command
 
 @example
-set term
+gset term
 @end example
 
 @noindent
 to see a list of the supported terminal types.  Octave uses
 @code{gnuplot} to display graphics, and can display graphics on any
 terminal that is supported by @code{gnuplot}.
 
 To capture the output of the plot command in a file rather than sending
 the output directly to your terminal, you can use a set of commands like
 this
 
 @example
 @group
-set term postscript
-set output "foo.ps"
+gset term postscript
+gset output "foo.ps"
 replot
 @end group
 @end example
 
 @noindent
 This will work for other types of output devices as well.  Octave's
-@samp{set} command is really just piped to the @code{gnuplot}
+@code{gset} command is really just piped to the @code{gnuplot}
 subprocess, so that once you have a plot on the screen that you like,
 you should be able to do something like this to create an output file
 suitable for your graphics printer.
 
 Or, you can eliminate the intermediate file by using commands like this
 
 @example
 @group
-set term postscript
-set output "|lpr -Pname_of_your_graphics_printer"
+gset term postscript
+gset output "|lpr -Pname_of_your_graphics_printer"
 replot
 @end group
 @end example
 
 @unnumberedsubsec Editing What You Have Typed
 
 At the Octave prompt, you can recall, edit, and reissue previous
 commands using Emacs- or vi-style editing commands.  The default
@@ -337,19 +329,18 @@ argument to help.  For example,
 @example
 help plot
 @end example
 
 @noindent
 will display the help text for the @code{plot} function.
 
 Octave sends output that is too long to fit on one screen through a
-pager like @code{less} or @code{more}.  Type a carriage return to
-advance one line, a space character to advance one page, and @samp{q} to
-exit the pager.
+pager like @code{less} or @code{more}.  Type a @key{RET} to advance one
+line, a @key{SPC} to advance one page, and @key{q} to exit the pager.
 
 The part of Octave's help facility that allows you to read the complete
 text of the printed manual from within Octave normally uses a separate
 program called Info.  When you invoke Info you will be put into a menu
 driven program that contains the entire Octave manual.  Help for using
 Info is provided in this manual in @ref{Getting Help}.
 
 @node Conventions,  , Simple Examples, Introduction
@@ -555,16 +546,21 @@ The function described is written in a l
 On systems that support dynamic linking of user-supplied functions, it
 may be automatically linked while Octave is running, but only if it is
 needed.  @xref{Dynamically Linked Functions}.
 
 @item Function File
 @cindex function file
 The function described is defined using Octave commands stored in a text
 file.  @xref{Function Files}.
+
+@item Mapping Function
+@cindex mapping function
+The function described works element-by-element for matrix and vector
+arguments.
 @end table
 
 @node A Sample Command Description, A Sample Variable Description, A Sample Function Description, Format of Descriptions
 @subsubsection A Sample Command Description
 @cindex command descriptions
 
 Command descriptions have a format similar to function descriptions,
 except that the word `Function' is replaced by `Command.  Commands are
@@ -587,17 +583,17 @@ printed and the working directory is not
 A @dfn{variable} is a name that can hold a value.  Although any variable
 can be set by the user, @dfn{built-in variables} typically exist
 specifically so that users can change them to alter the way Octave
 behaves (built-in variables are also sometimes called @dfn{user
 options}).  Ordinary variables and built-in variables are described
 using a format like that for functions except that there are no
 arguments.
 
-Here is a description of the imaginary built-in variable
+Here is a description of the imaginary variable
 @code{do_what_i_mean_not_what_i_say}.
 
 @defvr {Built-in Variable} do_what_i_mean_not_what_i_say
 If the value of this variable is nonzero, Octave will do what you
 actually wanted, even if you have typed a completely different and
 meaningless list of commands.
 @end defvr
 
diff --git a/doc/interpreter/io.texi b/doc/interpreter/io.texi
--- a/doc/interpreter/io.texi
+++ b/doc/interpreter/io.texi
@@ -95,18 +95,18 @@ stream before calling @code{input}.
 @subsection Terminal Output
 
 Since Octave normally prints the value of an expression as soon as it
 has been evaluated, the simplest of all I/O functions is a simple
 expression.  For example, the following expression will display the
 value of pi
 
 @example
-octave:13> pi
-pi = 3.1416
+pi
+     @print{} pi = 3.1416
 @end example
 
 This works well as long as it is acceptable to have the name of the
 variable (or @samp{ans}) printed along with the value.  To print the
 value of a variable without printing its name, use the function
 @code{disp}.
 
 The @code{format} command offers some control over the way Octave prints
@@ -116,32 +116,27 @@ values with @code{disp} and through the 
 This variable holds the most recently computed result that was not
 explicitly assigned to a variable.  For example, after the expression
 
 @example
 3^2 + 4^2
 @end example
 
 @noindent
-is evaluated, the value of @code{ans} is @samp{25}.
+is evaluated, the value of @code{ans} is 25.
 @end defvr
 
 @deftypefn {Built-in Function} {} disp (@var{x})
-Display the value of @var{x}.  For example, the following expression
+Display the value of @var{x}.  For example,
 
 @example
 disp ("The value of pi is:"), disp (pi)
-@end example
 
-@noindent
-will print
-
-@example
-The value of pi is:
-3.1416
+     @print{} the value of pi is:
+     @print{} 3.1416
 @end example
 
 @noindent
 Note that the output from @code{disp} always ends with a newline.
 @end deftypefn
 
 @deffn {Command} format options
 Control the format of the output produced by @code{disp} and Octave's
@@ -165,31 +160,24 @@ within a field that is a maximum of 24 c
 As will the @samp{short} format, Octave will switch to an @samp{e}
 format if it is unable to format a matrix so that columns line up on the
 decimal point and all the numbers fit within the maximum field width.
 
 @item long e
 @itemx short e
 The same as @samp{format long} or @samp{format short} but always display
 output with an @samp{e} format.  For example, with the @samp{short e}
-format, pi is displayed as
-
-@example
- 3.14e+00
-@end example
+format, pi is displayed as @code{3.14e+00}.
 
 @item long E
 @itemx short E
 The same as @samp{format long e} or @samp{format short e} but always
 display output with an uppercase @samp{E} format.  For example, with
 the @samp{long E} format, pi is displayed as
-
-@example
- 3.14159265358979E+00
-@end example
+@code{3.14159265358979E+00}.
 
 @item free
 @itemx none
 Print output in free format, without trying to line up columns of
 matrices on the decimal point.  This also causes complex numbers to be
 formatted like this @samp{(0.604194, 0.607088)} instead of like this
 @samp{0.60419 + 0.60709i}.
 
@@ -370,17 +358,17 @@ Match zero or more characters.
 
 @item [ @var{list} ]
 Match the list of characters specified by @var{list}.  If the first
 character is @code{!} or @code{^}, match all characters except those
 specified by @var{list}.  For example, the pattern @samp{[a-zA-Z]} will
 match all lower and upper case alphabetic characters. 
 @end table
 
-Except when using hte @sc{Matlab} binary data file format, saving global
+Except when using the @sc{Matlab} binary data file format, saving global
 variables also saves the global status of the variable, so that if it is
 restored at a later time using @samp{load}, it will be restored as a
 global variable.
 
 The command
 
 @example
 save -binary data a b*
@@ -401,20 +389,20 @@ initial default save format is Octave's 
 @end defvr
 
 @defvr {Built-in Variable} save_precision
 This variable specifies the number of digits to keep when saving data in
 text format.  The default value is 17.
 @end defvr
 
 @deffn {Command} load options file v1 v2 @dots{}
-To restore the values from a file, use the @code{load} command.  As with
-@code{save}, you may specify a list of variables and @code{load} will
-only extract those variables with names that match.  For example, to
-restore the variables saved in the file @file{data}, use the command
+Load the named variables from the file @var{file}.  As with @code{save},
+you may specify a list of variables and @code{load} will only extract
+those variables with names that match.  For example, to restore the
+variables saved in the file @file{data}, use the command
 
 @example
 load data
 @end example
 
 Octave will refuse to overwrite existing variables unless you use the
 option @samp{-force}.
 
@@ -453,17 +441,17 @@ Force Octave to assume the file is in @s
 @node C-Style I/O Functions,  , Basic Input and Output, Input and Output
 @section C-Style I/O Functions
 
 Octave's C-style input and output functions provide most of the
 functionality of the C programming language's standard I/O library.  The
 argument lists for some of the input functions are slightly different,
 however, because Octave has no way of passing arguments by reference.
 
-In the following, @var{file} refers to a file name and @code{fid} returs
+In the following, @var{file} refers to a file name and @code{fid} refers
 to an integer file number, as returned by @code{fopen}.
 
 There are three files that are always available.  Although these files
 can be accessed using their corresponding numeric file ids, you should
 always use the symbolic names given in the table below, since it will
 make your programs easier to understand.
 
 @defvr {Built-in Variable} stdin
@@ -503,24 +491,24 @@ messages and prompts.
 * Temporary Files::             
 * EOF and Errors::              
 * File Positioning::            
 @end menu
 
 @node Opening and Closing Files, Simple Output, C-Style I/O Functions, C-Style I/O Functions
 @subsection Opening and Closing Files
 
-@deftypefn {Built-in Function} {[fid, msg] =} fopen (@var{name}, @var{mode}, @var{arch})
-@deftypefnx {Built-in Function} {fid_list =} fopen ("all")
-@deftypefnx {Built-in Function} {file =} fopen (@var{fid})
+@deftypefn {Built-in Function} {[@var{fid}, @var{msg}] =} fopen (@var{name}, @var{mode}, @var{arch})
+@deftypefnx {Built-in Function} {@var{fid_list} =} fopen ("all")
+@deftypefnx {Built-in Function} {@var{file} =} fopen (@var{fid})
 The first form of the @code{fopen} function opens the named file with
 the specified mode (read-write, read-only, etc.) and architecture
 interpretation (IEEE big endian, IEEE little endian, etc.), and returns
 an integer value that may be used to refer to the file later.  If an
-error occurs, @var{fid} is set to -1 and @var{msg} contains the
+error occurs, @var{fid} is set to @minus{}1 and @var{msg} contains the
 corresponding system error message.  The @var{mode} is a one or two
 character string that specifies whether the file is to be opened for
 reading, writing, or both.
 
 The second form of the @code{fopen} function returns a vector of file ids
 corresponding to all the currently open files, excluding the
 @code{stdin}, @code{stdout}, and @code{stderr} streams.
 
@@ -620,29 +608,29 @@ Write a string to the standard output wi
 Read characters from a file, stopping at the first newline character
 that is encountered or after @var{len} characters have been read, and
 returning the characters as a string.  The newline is not included in
 the returned value.
 
 If @var{len} is omitted, @code{fgetl} reads until the next newline
 character.
 
-If there are no more characters to read, @code{fgetl} returns -1.
+If there are no more characters to read, @code{fgetl} returns @minus{}1.
 @end deftypefn
 
 @deftypefn {Built-in Function} {} fgets (@var{fid}, @var{len})
 Read characters from a file, stopping at the first newline character
 that is encountered or after @var{len} characters have been read, and
 returning the characters as a string.  The newline is included in the
 returned value.
 
 If @var{len} is omitted, @code{fgets} reads until the next newline
 character.
 
-If there are no more characters to read, @code{fgets} returns -1.
+If there are no more characters to read, @code{fgets} returns @minus{}1.
 @end deftypefn
 
 @node Formatted Output, Output Conversion for Matrices, Line-Oriented Input, C-Style I/O Functions
 @subsection Formatted Output
 
 This section describes how to call @code{printf} and related functions.
 
 The following functions are available for formatted output.  They are
@@ -1038,37 +1026,72 @@ printf ("%3s%-6s", "no", "where");
 @end smallexample
 
 @noindent
 prints @samp{ nowhere } (note the leading and trailing spaces).
 
 @node Formatted Input, Input Conversion Syntax, Other Output Conversions, C-Style I/O Functions
 @subsection Formatted Input
 
-Here are the descriptions of the functions for performing formatted
-input.
+Octave provides the @code{scanf}, @code{fscanf}, and @code{sscanf}
+functions to read formatted input.  There are two forms of each of these
+functions.  One can be used to extract vectors of data from a file, and
+the other is more `C-like'.
+
+@deftypefn {Built-in Function} {[@var{val}, @var{count}] =} fscanf (@var{fid}, @var{template}, @var{size})
+@deftypefnx {Built-in Function} {[@var{v1}, @var{v2}, @dots{}] = } fscanf (@var{fid}, @var{template}, "C")
+In the first form, read from @var{fid} according to @var{template},
+returning the result in the matrix @var{val}.
+
+The optional argument @var{size} specifies the amount of data to read
+and may be one of
+
+@table @code
+@item Inf
+Read as much as possible, returning a column vector.
 
-@deftypefn {Built-in Function} {} scanf (@var{template})
-@deftypefnx {Built-in Function} {} scanf (@var{template}, "C")
-The @code{scanf} function reads formatted input from the stream
-@code{stdin} under the control of the template string @var{template}.
-The resulting values are returned.
+@item @var{nr}
+@itemx [@var{nr}, Inf]
+Read as much as possible, returning a matrix with @var{nr} rows.  If the
+number of elements read is not an exact multiple of @var{nr}, the last
+column is padded with zeros.
+
+@item [@var{nr}, @var{nc}]
+Read up to @code{@var{nr} * @var{nc}} elements, returning a matrix with
+@var{nr} rows.  If the number of elements read is not an exact multiple
+of @var{nr}, the last column is padded with zeros.
+@end table
+
+@noindent
+If @var{size} is omitted, a value of @code{Inf} is assumed.
+
+A string is returned if @var{template} specifies only character
+conversions.
+
+The number of items successfully read is returned in @var{count}.
+
+In the second form, read from @var{fid} according to @var{template},
+with each conversion specifier in @var{template} corresponding to a
+single scalar return value.  This form is more `C-like', and also
+compatible with previous versions of Octave.
 @end deftypefn
 
-@deftypefn {Built-in Function} {} fscanf (@var{fid}, @var{template})
-@deftypefnx {Built-in Function} {} fscanf (@var{fid}, @var{template}, "C")
-This function is just like @code{scanf}, except that the input is read
-from the stream @var{fid} instead of @code{stdin}.
+@deftypefn {Built-in Function} {[@var{val}, @var{count}] =} sscanf (@var{string}, @var{template}, @var{size})
+@deftypefnx {Built-in Function} {[@var{v1}, @var{v2}, @dots{}] = } sscanf (@var{string}, @var{template}, "C")
+This is like @code{fscanf}, except that the characters are taken from the
+string @var{string} instead of from a stream.  Reaching the end of the
+string is treated as an end-of-file condition.
 @end deftypefn
 
-@deftypefn {Built-in Function} {} sscanf (@var{string}, @var{template})
-@deftypefnx {Built-in Function} {} sscanf (@var{string}, @var{template}, "C")
-This is like @code{scanf}, except that the characters are taken from the
-string @var{string} instead of from a stream.  Reaching the end of the
-string is treated as an end-of-file condition.
+@deftypefn {Built-in Function} {[@var{val}, @var{count}] =} scanf (@var{template}, @var{size})
+@deftypefnx {Built-in Function} {[@var{v1}, @var{v2}, @dots{}] = } scanf (@var{template}, "C")
+This is equivalent to calling @code{fscanf} with @var{fid} = @code{stdin}.
+
+It is currently not useful to call @code{scanf} in interactive
+programs.
 @end deftypefn
 
 Calls to @code{scanf} are superficially similar to calls to
 @code{printf} in that arbitrary arguments are read under the control of
 a template string.  While the syntax of the conversion specifications in
 the template is very similar to that for @code{printf}, the
 interpretation of the template is oriented more towards free-format
 input and simple pattern matching, rather than fixed-field formatting.
@@ -1257,58 +1280,154 @@ For example, reading the input:
 @noindent
 with the conversion @samp{%10c} produces @code{" hello, wo"}, but
 reading the same input with the conversion @samp{%10s} produces
 @code{"hello,"}.
 
 @node Binary I/O, Temporary Files, String Input Conversions, C-Style I/O Functions
 @subsection Binary I/O
 
-Octave has to C-style functions for reading and writing binary data.
-They are @code{fread} and @code{fwrite} and are patterned after the
-standard C functions with the same names.
+Octave can read and write binary data using the functions @code{fread}
+and @code{fwrite}, which are patterned after the standard C functions
+with the same names.  The are able to automatically swap the byte order
+of integer data and convert among ths supported floating point formats
+as the data are read.
+
+@deftypefn {Built-in Function} {[@var{val}, @var{count}] =} fread (@var{fid}, @var{size}, @var{precision}, @var{skip}, @var{arch})
+Read binary data of type @var{precision} from the specified file ID
+@var{fid}.
+
+The optional argument @var{size} specifies the amount of data to read
+and may be one of
+
+@table @code
+@item Inf
+Read as much as possible, returning a column vector.
+
+@item @var{nr}
+@itemx [@var{nr}, Inf]
+Read as much as possible, returning a matrix with @var{nr} rows.  If the
+number of elements read is not an exact multiple of @var{nr}, the last
+column is padded with zeros.
+
+@item [@var{nr}, @var{nc}]
+Read up to @code{@var{nr} * @var{nc}} elements, returning a matrix with
+@var{nr} rows.  If the number of elements read is not an exact multiple
+of @var{nr}, the last column is padded with zeros.
+@end table
 
-@deftypefn {Built-in Function} {} fread (@var{fid}, @var{size}, @var{precision}, @var{arch})
-This function reads data in binary form of type @var{precision} from the
-specified @var{fid}, which may be either a file name, or a file id
-as returned from @code{fopen}.
+@noindent
+If @var{size} is omitted, a value of @code{Inf} is assumed.
+
+The optional argument @var{precision} is a string specifying the type of
+data to read and may be one of
+
+@table @code
+@item "char"
+@itemx "char*1"
+@itemx "integer*1"
+@itemx "int8"
+Single character.
+
+@item "signed char"
+@itemx "schar"
+Signed character.
+
+@item "unsigned char"
+@itemx "uchar"
+Unsigned character.
+
+@item "short"
+Short integer.
+
+@item "unsigned short"
+@itemx "ushort"
+Unsigned short integer.
+
+@item "int"
+Integer.
 
-The argument @var{size} specifies the size of the matrix to return.  It
-may be a scalar or a two-element vector.  If it is a scalar,
-@code{fread} returns a column vector of the specified length.  If it is
-a two-element vector, it specifies the number of rows and columns of the
-result matrix, and @code{fread} fills the elements of the matrix in
-column-major order.
+@item "unsigned int"
+@itemx "uint"
+Unsigned integer.
+
+@item "long"
+Long integer.
+
+@item "unsigned long"
+@itemx "ulong"
+Unsigned long integer.
+
+@item "float"
+@itemx "float32"
+@itemx "real*4"
+Single precision float.
+
+@item "double"
+@itemx "float64"
+@itemx "real*8"
+Double precision float.
+
+@item "integer*2"
+@itemx "int16"
+Two byte integer.
+
+@item "integer*4"
+@itemx "int32"
+Four byte integer.
+@end table
+
+@noindent
+The default precision is @code{"uchar"}.
 
-The argument @var{precision} is a string specifying the type of data to
-read and may be one of @code{"char"}, @code{"schar"}, @code{"short"},
-@code{"int"}, @code{"long"}, @code{"float"}, @code{"double"},
-@code{"uchar"}, @code{"ushort"}, @code{"uint"}, or @code{"ulong"}.  The
-default precision is @code{"uchar"}.
+The optional argument @var{skip} specifies the number of bytes to skip
+before each element is read.  If it is not specified, a value of 0 is
+assumed.
+
+The optional argument @var{arch} is a string specifying the data format
+for the file.  Valid values are
+
+@table @code
+@item "native"
+The format of the current machine.
+
+@item "ieee-le"
+IEEE big endian.
+
+@item "ieee-be"
+IEEE little endian.
 
-The @code{fread} function returns two values, @code{data}, which is the
-data read from the file, and @code{count}, which is the number of
-elements read.
+@item "vaxd"
+VAX D floating format.
+
+@item "vaxg"
+VAX G floating format.
+
+@item "cray"
+Cray floating format.
+@end table
+
+@noindent
+Conversions are currently only supported for @code{"ieee-be"} and
+@code{"ieee-le"} formats.
+
+The data read from the file is returned in @var{val}, and the number of
+values read is returned in @code{count}
 @end deftypefn
 
-@deftypefn {Built-in Function} {} fwrite (@var{fid}, @var{data}, @var{precision}, @var{arch})
-This function writes data in binary form of type @var{precision} to the
-specified @var{fid}, which may be either a file name, or a file id
-as returned from @code{fopen}.
+@deftypefn {Built-in Function} {@var{count} =} fwrite (@var{fid}, @var{data}, @var{precision}, @var{skip}, @var{arch})
+Write data in binary form of type @var{precision} to the specified file
+ID @var{fid}, returning the number of values successfully written to the
+file.
 
 The argument @var{data} is a matrix of values that are to be written to
 the file.  The values are extracted in column-major order.
 
-The argument @var{precision} is a string specifying the type of data to
-read and may be one of @code{"char"}, @code{"schar"}, @code{"short"},
-@code{"int"}, @code{"long"}, @code{"float"}, @code{"double"},
-@code{"uchar"}, @code{"ushort"}, @code{"uint"}, or @code{"ulong"}.  The
-default precision is @code{"uchar"}.
-
-The @code{fwrite} function returns the number of elements written.
+The remaining arguments @var{precision}, @var{skip}, and @var{arch} are
+optional, and are interpreted as described for @code{fread}.
 
 The behavior of @code{fwrite} is undefined if the values in @var{data}
 are too large to fit in the specified precision.
 @end deftypefn
 
 @node Temporary Files, EOF and Errors, Binary I/O, C-Style I/O Functions
 @subsection Temporary Files
 
@@ -1361,41 +1480,41 @@ freport ()
 Three functions are available for setting and determining the position of
 the file pointer for a given file.
 
 @deftypefn {Built-in Function} {} ftell (@var{fid})
 Return the position of the file pointer as the number of characters
 from the beginning of the file @var{fid}.
 @end deftypefn
 
-@deftypefn {Built-in Function} {} fseek (@var{fid}, offset, origin)
+@deftypefn {Built-in Function} {} fseek (@var{fid}, @var{offset}, @var{origin})
 Set the file pointer to any location within the file @var{fid}.  The
-pointer is positioned @code{offset} characters from the @code{origin},
+pointer is positioned @var{offset} characters from the @var{origin},
 which may be one of the predefined variables @code{SEEK_CUR} (current
 position), @code{SEEK_SET} (beginning), or @code{SEEK_END} (end of
-file). If @code{origin} is omitted, @code{SEEK_SET} is assumed.  The
+file). If @var{origin} is omitted, @code{SEEK_SET} is assumed.  The
 offset must be zero, or a value returned by @code{ftell} (in which case
-@code{origin} must be @code{SEEK_SET}.
+@var{origin} must be @code{SEEK_SET}.
 @end deftypefn
 
 @defvr {Built-in Variable} SEEK_SET
 @defvrx {Built-in Variable} SEEK_CUR
 @defvrx {Built-in Variable} SEEK_END
 These variables may be used as the optional third argument for the
 function @code{fseek}.
 @end defvr
 
 @deftypefn {Built-in Function} {} frewind (@var{fid})
 Move the file pointer to the beginning of the file @var{fid}, returning
 1 for success, and 0 if an error was encountered.  It is equivalent to
 @code{fseek (@var{fid}, 0, SEEK_SET)}.
 @end deftypefn
 
 The following example stores the current file position in the variable
-@samp{marker}, moves the pointer to the beginning of the file, reads
+@code{marker}, moves the pointer to the beginning of the file, reads
 four characters, and then returns to the original position.
 
 @example
 marker = ftell (myfile);
 frewind (myfile);
 fourch = fgets (myfile, 4);
 fseek (myfile, marker, SEEK_SET);
 @end example
diff --git a/doc/interpreter/linalg.texi b/doc/interpreter/linalg.texi
--- a/doc/interpreter/linalg.texi
+++ b/doc/interpreter/linalg.texi
@@ -3,43 +3,43 @@
 @c For copying conditions, see the file gpl.texi.
 
 @node Linear Algebra, Nonlinear Equations, Arithmetic, Top
 @chapter Linear Algebra
 
 This chapter documents the linear algebra functions of Octave.
 Reference material for many of these functions may be found in
 Golub and Van Loan, @cite{Matrix Computations, 2nd Ed.}, Johns Hopkins,
-1989, and in @cite{LAPACK Users' Guide}, SIAM, 1992.
+1989, and in @cite{@sc{Lapack} Users' Guide}, SIAM, 1992.
 
 @menu
 * Basic Matrix Functions::      
 * Matrix Factorizations::       
 * Functions of a Matrix::       
 @end menu
 
 @node Basic Matrix Functions, Matrix Factorizations, Linear Algebra, Linear Algebra
 @section Basic Matrix Functions
 
 @deftypefn {Loadable Function} {@var{aa} =} balance (@var{a}, @var{opt})
 @deftypefnx {Loadable Function} {[@var{dd}, @var{aa}] =} balance (@var{a}, @var{opt})
 @deftypefnx {Loadable Function} {[@var{cc}, @var{dd}, @var{aa}, @var{bb]} =} balance (@var{a}, @var{b}, @var{opt})
 
 @code{[dd, aa] = balance (a)} returns @code{aa = dd \ a * dd}.
-@code{aa} is a matrix whose row/column norms are roughly equal in
+@code{aa} is a matrix whose row and column norms are roughly equal in
 magnitude, and @code{dd} = @code{p * d}, where @code{p} is a permutation
 matrix and @code{d} is a diagonal matrix of powers of two.  This allows
 the equilibration to be computed without roundoff.  Results of
 eigenvalue calculation are typically improved by balancing first.
 
-@code{[cc, dd, aa, bb] = balance (a, b)}  returns @code{aa} (@code{bb})
-@code{= cc*a*dd (cc*b*dd)}), where @code{aa} and @code{bb} have
-non-zero elements of approximately the same magnitude and @code{cc}
-and @code{dd}  are permuted diagonal matrices as in @code{dd} for
-the algebraic eigenvalue problem.
+@code{[cc, dd, aa, bb] = balance (a, b)} returns @code{aa = cc*a*dd} and
+@code{bb = cc*b*dd)}, where @code{aa} and @code{bb} have non-zero
+elements of approximately the same magnitude and @code{cc} and @code{dd}
+are permuted diagonal matrices as in @code{dd} for the algebraic
+eigenvalue problem.
 
 The eigenvalue balancing option @code{opt} is selected as follows:
 
 @table @asis
 @item @code{"N"}, @code{"n"}
 No balancing; arguments copied, transformation(s) set to identity.
 
 @item @code{"P"}, @code{"p"}
@@ -49,56 +49,72 @@ Permute argument(s) to isolate eigenvalu
 Scale to improve accuracy of computed eigenvalues.
 
 @item @code{"B"}, @code{"b"}
 Permute and scale, in that order. Rows/columns of a (and b)
 that are isolated by permutation are not scaled.  This is the default
 behavior.
 @end table
 
-Algebraic eigenvalue balancing uses standard LAPACK routines.
+Algebraic eigenvalue balancing uses standard @sc{Lapack} routines.
 
 Generalized eigenvalue problem balancing uses Ward's algorithm
 (SIAM Journal on Scientific and Statistical Computing, 1981).
 @end deftypefn
 
 @deftypefn {} {} cond (@var{a})
 Compute the (two-norm) condition number of a matrix. @code{cond (a)} is
 defined as @code{norm (a) * norm (inv (a))}, and is computed via a
 singular value decomposition.
 @end deftypefn
 
 @deftypefn {Loadable Function} {} det (@var{a})
-Compute the determinant of @var{a} using LINPACK.
+Compute the determinant of @var{a} using @sc{Linpack}.
 @end deftypefn
 
 @deftypefn {Loadable Function} {@var{lambda} =} eig (@var{a})
 @deftypefnx {Loadable Function} {[@var{v}, @var{lambda}] =} eig (@var{a})
 The eigenvalues (and eigenvectors) of a matrix are computed in a several
-step process which begins with a Hessenberg decomposition (see
-@code{hess}), followed by a Schur decomposition (see @code{schur}), from
-which the eigenvalues are apparent.  The eigenvectors, when desired, are
-computed by further manipulations of the Schur decomposition.
-
-See also: @code{hess}, @code{schur}.
+step process which begins with a Hessenberg decomposition, followed by a
+Schur decomposition, from which the eigenvalues are apparent.  The
+eigenvectors, when desired, are computed by further manipulations of the
+Schur decomposition.
 @end deftypefn
 
 @deftypefn {Loadable Function} {@var{G} =} givens (@var{x}, @var{y})
 @deftypefnx {Loadable Function} {[@var{c}, @var{s}] =} givens (@var{x}, @var{y})
-@code{G = givens(x, y)} returns a
 @iftex
 @tex
-$2\times 2$
+Return a $2\times 2$ orthogonal matrix
+$$
+ G = \left[\matrix{c & s\cr -s'& c\cr}\right]
+$$
+such that
+$$
+ G \left[\matrix{x\cr y}\right] = \left[\matrix{\ast\cr 0}\right]
+$$
+with $x$ and $y$ scalars.
 @end tex
 @end iftex
 @ifinfo
-2 x 2
+Return a 2 by 2 orthogonal matrix
+@code{@var{G} = [@var{c} @var{s}; -@var{s}' @var{c}]} such that
+@code{@var{G} [@var{x}; @var{y}] = [*; 0]} with @var{x} and @var{y} scalars.
 @end ifinfo
-orthogonal matrix @code{G = [c s; -s' c]} such that
-@code{G [x; y] = [*; 0]}  (x, y scalars)
+
+For example,
+
+@example
+@group
+givens (1, 1)
+
+     @result{}   0.70711   0.70711
+         -0.70711   0.70711
+@end group
+@end example
 @end deftypefn
 
 @deftypefn {Loadable Function} {} inv (@var{a})
 @deftypefnx {Loadable Function} {} inverse (@var{a})
 Compute the inverse of the square matrix @var{a}.
 @end deftypefn
 
 @deftypefn {Function File} {} norm (@var{a}, @var{p})
@@ -110,97 +126,100 @@ If @var{a} is a matrix:
 @table @asis
 @item @var{p} = @code{1}
 1-norm, the largest column sum of @var{a}.
 
 @item @var{p} = @code{2}
 Largest singular value of @var{a}.
 
 @item @var{p} = @code{Inf}
+@cindex infinity norm
 Infinity norm, the largest row sum of @var{a}.
 
 @item @var{p} = @code{"fro"}
-Frobenius norm of @var{a}, @code{sqrt (sum (diag (a' * a)))}.
+@cindex Frobenius norm
+Frobenius norm of @var{a}, @code{sqrt (sum (diag (@var{a}' * @var{a})))}.
 @end table
 
 If @var{a} is a vector or a scalar:
 
 @table @asis
 @item @var{p} = @code{Inf}
-@code{max (abs (a))}.
+@code{max (abs (@var{a}))}.
 
 @item @var{p} = @code{-Inf}
-@code{min (abs (a))}.
+@code{min (abs (@var{a}))}.
 
 @item other
-p-norm of @var{a}, @code{(sum (abs (a) .^ p)) ^ (1/p)}.
+p-norm of @var{a}, @code{(sum (abs (@var{a}) .^ @var{p})) ^ (1/@var{p})}.
 @end table
 @end deftypefn
 
 @deftypefn {Function File} {} null (@var{a}, @var{tol})
 Returns an orthonormal basis of the null space of @var{a}.
 
 The dimension of the null space is taken as the number of singular
 values of @var{a} not greater than @var{tol}.  If the argument @var{tol}
 is missing, it is computed as
 
 @example
-max (size (a)) * max (svd (a)) * eps
+max (size (@var{a})) * max (svd (@var{a})) * eps
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} orth (@var{a}, @var{tol})
 Returns an orthonormal basis of the range space of @var{a}.
 
 The dimension of the range space is taken as the number of singular
 values of @var{a} greater than @var{tol}.  If the argument @var{tol} is
 missing, it is computed as
 
 @example
-max (size (a)) * max (svd (a)) * eps
+max (size (@var{a})) * max (svd (@var{a})) * eps
 @end example
 @end deftypefn
 
-@deftypefn {Function File} {} pinv (@var{X}, @var{tol})
-Returns the pseudoinverse of @var{X}.  Singular values less than
+@deftypefn {Function File} {} pinv (@var{x}, @var{tol})
+Returns the pseudoinverse of @var{x}.  Singular values less than
 @var{tol} are ignored. 
 
 If the second argument is omitted, it is assumed that
 
 @example
-tol = max (size (X)) * sigma_max (X) * eps,
+tol = max (size (@var{x})) * sigma_max (@var{x}) * eps,
 @end example
 
 @noindent
-where @code{sigma_max (@var{X})} is the maximal singular value of @var{X}.
+where @code{sigma_max (@var{x})} is the maximal singular value of @var{x}.
 @end deftypefn
 
 @deftypefn {Function File} {} rank (@var{a}, @var{tol})
 Compute the rank of @var{a}, using the singular value decomposition.
 The rank is taken to be the number  of singular values of @var{a} that
 are greater than the specified tolerance @var{tol}.  If the second
 argument is omitted, it is taken to be
 
 @example
-tol = max (size (a)) * sigma (1) * eps;
+tol = max (size (@var{a})) * sigma (1) * eps;
 @end example
 
 @noindent
 where @code{eps} is machine precision and @code{sigma} is the largest
-singular value of @code{a}.
+singular value of @var{a}.
 @end deftypefn
 
 @deftypefn {Function File} {} trace (@var{a})
-Compute the trace of @var{a}, @code{sum (diag (a))}.
+Compute the trace of @var{a}, @code{sum (diag (@var{a}))}.
 @end deftypefn
 
 @node Matrix Factorizations, Functions of a Matrix, Basic Matrix Functions, Linear Algebra
 @section Matrix Factorizations
 
 @deftypefn {Loadable Function} {} chol (@var{a})
+@cindex Cholesky factorization
 Compute the Cholesky factor, @var{r}, of the symmetric positive definite
 matrix @var{a}, where
 @iftex
 @tex
 $ R^T R = A $.
 @end tex
 @end iftex
 @ifinfo
@@ -208,30 +227,43 @@ matrix @var{a}, where
 @example
 r' * r = a.
 @end example
 @end ifinfo
 @end deftypefn
 
 @deftypefn {Loadable Function} {@var{h} =} hess (@var{a})
 @deftypefnx {Loadable Function} {[@var{p}, @var{h}] =} hess (@var{a})
+@cindex Hessenberg decomposition
 Compute the Hessenberg decomposition of the matrix @var{a}.
 
 The Hessenberg decomposition is usually used as the first step in an
 eigenvalue computation, but has other applications as well (see Golub,
 Nash, and Van Loan, IEEE Transactions on Automatic Control, 1979.  The
-Hessenberg decomposition is @code{p * h * p' = a} where @code{p} is a
-square unitary matrix (@code{p' * p = I}, using complex-conjugate
-transposition) and @code{h} is upper Hessenberg
-(@code{i >= j+1 => h (i, j) = 0}).
+Hessenberg decomposition is
+@iftex
+@tex
+$$
+A = PHP^T
+$$
+where $P$ is a square unitary matrix ($P^HP = I$), and $H$
+is upper Hessenberg ($H_{i,j} = 0, \forall i \ge j+1$).
+@end tex
+@end iftex
+@ifinfo
+@code{p * h * p' = a} where @code{p} is a square unitary matrix
+(@code{p' * p = I}, using complex-conjugate transposition) and @code{h}
+is upper Hessenberg (@code{i >= j+1 => h (i, j) = 0}).
+@end ifinfo
 @end deftypefn
 
 @deftypefn {Loadable Function} {[@var{l}, @var{u}, @var{p}] =} lu (@var{a})
+@cindex LU decomposition
 Compute the LU decomposition of @var{a}, using subroutines from
-LAPACK.  The result is returned in a permuted form, according to
+@sc{Lapack}.  The result is returned in a permuted form, according to
 the optional return value @var{p}.  For example, given the matrix
 @code{a = [1, 2; 3, 4]},
 
 @example
 [l, u, p] = lu (a)
 @end example
 
 @noindent
@@ -251,17 +283,18 @@ u =
 p =
 
   0  1
   1  0
 @end example
 @end deftypefn
 
 @deftypefn {Loadable Function} {[@var{q}, @var{r}] =} qr (@var{a})
-Compute the QR factorization of @var{a}, using standard LAPACK
+@cindex QR factorization
+Compute the QR factorization of @var{a}, using standard @sc{Lapack}
 subroutines.  For example, given the matrix @code{a = [1, 2; 3, 4]},
 
 @example
 [q, r] = qr (a)
 @end example
 
 @noindent
 returns
@@ -337,16 +370,17 @@ p =
 
 The permuted @code{qr} factorization @code{[q, r, pi] = qr (a)}
 factorization allows the construction of an orthogonal basis of
 @code{span (a)}.
 @end deftypefn
 
 @deftypefn {Loadable Function} {@var{s}} schur (@var{a})
 @deftypefnx {Loadable Function} {[@var{u}, @var{s}] =} schur (@var{a}, @var{opt})
+@cindex Schur decomposition
 The Schur decomposition is used to compute eigenvalues of a
 square matrix, and has applications in the solution of algebraic
 Riccati equations in control (see @code{are} and @code{dare}).
 @code{schur} always returns
 @iftex
 @tex
 $S = U^T A U$
 @end tex
@@ -542,16 +576,17 @@ leading eigenvalues of
 @end iftex
 @ifinfo
 @code{s}.
 @end ifinfo
 @end deftypefn
 
 @deftypefn {Loadable Function} {@var{s} =} svd (@var{a})
 @deftypefnx {Loadable Function} {[@var{u}, @var{s}, @var{v}] =} svd (@var{a})
+@cindex singular value decomposition
 Compute the singular value decomposition of @var{a}
 @iftex
 @tex
 $$
  A = U\Sigma V^H
 $$
 @end tex
 @end iftex
@@ -724,49 +759,88 @@ needs to be improved to be more robust.
 @end deftypefn
 
 @deftypefn {Function File} {} kron (@var{a}, @var{b})
 Form the kronecker product of two matrices, defined block by block as
 
 @example
 x = [a(i, j) b]
 @end example
+
+For example,
+
+@example
+@group
+kron (1:4, ones (3, 1))
+
+     @result{}  1  2  3  4
+         1  2  3  4
+         1  2  3  4
+@end group
+@end example
 @end deftypefn
 
-@deftypefn {Function File} {} qzhess (@var{a}, @var{b})
+@deftypefn {Function File} {[@var{aa}, @var{bb}, @var{q}, @var{z}] =} qzhess (@var{a}, @var{b})
 Compute the Hessenberg-triangular decomposition of the matrix pencil
-@code{(a, b)}.  This function returns @code{aa = q * a * z},
-@code{bb = q * b * z}, @code{q}, @code{z} orthogonal.  For example,
+@code{(@var{a}, @var{b})}, returning
+@code{@var{aa} = @var{q} * @var{a} * @var{z}}, 
+@code{@var{bb} = @var{q} * @var{b} * @var{z}}, with @var{q} and @var{z}
+orthogonal.  For example,
 
 @example
-[aa, bb, q, z] = qzhess (a, b)
+@group
+[aa, bb, q, z] = qzhess ([1, 2; 3, 4], [5, 6; 7, 8])
+
+     @result{} aa = [ -3.02244, -4.41741;  0.92998,  0.69749 ]
+
+     @result{} bb = [ -8.60233, -9.99730;  0.00000, -0.23250 ]
+
+     @result{}  q = [ -0.58124, -0.81373; -0.81373,  0.58124 ]
+
+     @result{}  z = [ 1, 0; 0, 1 ]
+@end group
 @end example
 
 The Hessenberg-triangular decomposition is the first step in
-Moler and Stewart's QZ decomposition algorithm.  (The QZ decomposition
-will be included in a later release of Octave.)
+Moler and Stewart's QZ decomposition algorithm.
 
 Algorithm taken from Golub and Van Loan, @cite{Matrix Computations, 2nd
 edition}.
 @end deftypefn
 
 @deftypefn {Loadable Function} {} qzval (@var{a}, @var{b})
-Compute generalized eigenvalues.
+Compute generalized eigenvalues of the matrix pencil 
+@iftex
+@tex
+$a - \lambda b$.
+@end tex
+@end iftex
+@ifinfo
+@code{@var{a} - lambda @var{b}}.
+@end ifinfo
+
+The arguments @var{a} and @var{b} must be real matrices.
 @end deftypefn
 
-@deftypefn {Loadable Function} {} syl (@var{a}, @var{b}, @var{c})
+@deftypefn {Loadable Function} {@var{x} =} syl (@var{a}, @var{b}, @var{c})
 Solve the Sylvester equation
 @iftex
 @tex
 $$
  A X + X B + C = 0
 $$
 @end tex
 @end iftex
 @ifinfo
 
 @example
 A X + X B + C = 0
 @end example
+@end ifinfo
+using standard @sc{Lapack} subroutines.  For example,
 
-@end ifinfo
-using standard LAPACK subroutines.
+@example
+@group
+syl ([1, 2; 3, 4], [5, 6; 7, 8], [9, 10; 11, 12])
+     @result{} [ -0.50000, -0.66667; -0.66667, -0.50000 ]
+@end group
+@end example
 @end deftypefn
diff --git a/doc/interpreter/matrix.texi b/doc/interpreter/matrix.texi
--- a/doc/interpreter/matrix.texi
+++ b/doc/interpreter/matrix.texi
@@ -72,22 +72,22 @@ all (all (rand (5) < 0.9))
 @noindent
 tests a random 5 by 5 matrix to see if all of it's elements are less
 than 0.9.
 
 Note that in conditional contexts (like the test clause of @code{if} and
 @code{while} statements) Octave treats the test as if you had typed
 @code{all (all (condition))}.
 
-@deftypefn {Function File} {[@var{errorcode}, @var{y_1}, ...] =} common_size (@var{x_1}, ...)
+@deftypefn {Function File} {[@var{err}, @var{y1}, ...] =} common_size (@var{x1}, ...)
 Determine if all input arguments are either scalar or of common
-size.  If so, errorcode is zero, and @var{y_i} is a matrix of the
-common size with all entries equal to @var{x_i} if this is a scalar or
-@var{x_i} otherwise.  If the inputs cannot be brought to a common size,
-errorcode is 1, and @var{y_i} is @var{x_i}.  For example,
+size.  If so, @var{err} is zero, and @var{yi} is a matrix of the
+common size with all entries equal to @var{xi} if this is a scalar or
+@var{xi} otherwise.  If the inputs cannot be brought to a common size,
+errorcode is 1, and @var{yi} is @var{xi}.  For example,
 
 @example
 @group
 [errorcode, a, b] = common_size ([1 2; 3 4], 5)
 
      @result{} errorcode = 0
 
      @result{} a = [ 1, 2; 3, 4 ]
@@ -406,41 +406,35 @@ tril (ones (3), 1)
          1  1  1
 @end group
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} vec (@var{x})
 For a matrix @var{x}, returns the vector obtained by stacking the
 columns of @var{x} one above the other.
-
-See Magnus and Neudecker (1988), Matrix differential calculus with
-applications in statistics and econometrics.
 @end deftypefn
 
 @deftypefn {Function File} {} vech (@var{x})
 For a square matrix @var{x}, returns the vector obtained from @var{x}
 by eliminating all supradiagonal elements and stacking the result
 one column above the other.
-
-See Magnus and Neudecker (1988), Matrix differential calculus with
-applications in statistics and econometrics.
 @end deftypefn
 
 @node Special Utility Matrices, Famous Matrices, Rearranging Matrices, Matrix Manipulation
 @section Special Utility Matrices
 
 @deftypefn {Built-in Function} {} eye (@var{x})
 @deftypefnx {Built-in Function} {} eye (@var{n}, @var{m})
 Returns an identity matrix.  If invoked with a single scalar argument,
 @code{eye} returns a square matrix with the dimension specified.  If you
 supply two scalar arguments, @code{eye} takes them to be the number of
 rows and columns.  If given a vector with two elements, @code{eye} uses
 the values of the elements as the number of rows and columns,
-respecively.  For example,
+respectively.  For example,
 
 @example
 @group
 eye (3)
 
      @result{}  1  0  0
          0  1  0
          0  0  1
@@ -487,17 +481,17 @@ the same as the arguments for @code{eye}
 @deftypefnx {Loadable Function} {} rand (@code{"seed"}, @var{x})
 Returns a matrix with random elements uniformly distributed on the
 interval (0, 1).  The arguments are handled the same as the arguments
 for @code{eye}.  In
 addition, you can set the seed for the random number generator using the
 form
 
 @example
-randn ("seed", @var{x})
+rand ("seed", @var{x})
 @end example
 
 @noindent
 where @var{x} is a scalar value.  If called as
 
 @example
 rand ("seed")
 @end example
@@ -564,20 +558,21 @@ Normally, @code{rand} and @code{randn} o
 seeds from the system clock, so that the sequence of random numbers is
 not the same each time you run Octave.  If you really do need for to
 reproduce a sequence of numbers exactly, you can set the seed to a
 specific value.
 
 If it is invoked without arguments, @code{rand} and @code{randn} return a
 single element of a random sequence.
 
-The @code{rand} and @code{randn} functions use Fortran code from RANLIB,
-a library of fortran routines for random number generation, compiled by
-Barry W. Brown and James Lovato of the Department of Biomathematics at
-The University of Texas, M.D. Anderson Cancer Center, Houston, TX 77030.
+The @code{rand} and @code{randn} functions use Fortran code from
+@sc{Ranlib}, a library of fortran routines for random number generation,
+compiled by Barry W. Brown and James Lovato of the Department of
+Biomathematics at The University of Texas, M.D. Anderson Cancer Center,
+Houston, TX 77030.
 
 @deftypefn {Built-in Function} {} diag (@var{v}, @var{k})
 Returns a diagonal matrix with vector @var{v} on diagonal @var{k}.  The
 second argument is optional.  If it is positive, the vector is placed on
 the @var{k}-th super-diagonal.  If it is negative, it is placed on the
 @var{-k}-th sub-diagonal.  The default value of @var{k} is 0, and the
 vector is placed on the main diagonal.  For example,
 
@@ -607,21 +602,22 @@ diag ([1, 2, 3], 1)
 @c @code{zeros}, @code{rand}, etc.
 @c @end defvr
 
 The functions @code{linspace} and @code{logspace} make it very easy to
 create vectors with evenly or logarithmically spaced elements.
 @xref{Ranges}.
 
 @deftypefn {Function File} {} linspace (@var{base}, @var{limit}, @var{n})
-creates a row vector with @var{n} (@var{n} greater than 1) linearly
-spaced elements between @var{base} and @var{limit}.  The @var{base} and
-@var{limit} are always included in the range.  If @var{base} is greater
-than @var{limit}, the elements are stored in decreasing order.  If the
-number of points is not specified, a value of 100 is used.
+Return a row vector with @var{n} linearly spaced elements between
+@var{base} and @var{limit}.  The number of elements, @var{n}, must be
+greater than 1.  The @var{base} and @var{limit} are always included in
+the range.  If @var{base} is greater than @var{limit}, the elements are
+stored in decreasing order.  If the number of points is not specified, a
+value of 100 is used.
 
 The @code{linspace} function always returns a row vector, regardless of
 the value of @code{prefer_column_vectors}.
 @end deftypefn
 
 @deftypefn {Function File} {} logspace (@var{base}, @var{limit}, @var{n})
 Similar to @code{linspace} except that the values are logarithmically
 spaced from
@@ -679,17 +675,25 @@ top level.  The default value is 0.
 @end defvr
 
 @node Famous Matrices,  , Special Utility Matrices, Matrix Manipulation
 @section Famous Matrices
 
 The following functions return famous matrix forms.
 
 @deftypefn {Function File} {} hadamard (@var{k})
-Return the Hadamard matrix of order n = 2^k.
+Return the Hadamard matrix of order
+@iftex
+@tex
+$n = 2^k$.
+@end tex
+@end iftex
+@ifinfo
+n = 2^k.
+@end ifinfo
 @end deftypefn
 
 @deftypefn {Function File} {} hankel (@var{c}, @var{r})
 Return the Hankel matrix constructed given the first column @var{c}, and
 (optionally) the last row @var{r}.  If the last element of @var{c} is
 not the same as the first element of @var{r}, the last element of
 @var{c} is used.  If the second argument is omitted, the last row is
 taken to be the same as the first column.
diff --git a/doc/interpreter/nonlin.texi b/doc/interpreter/nonlin.texi
--- a/doc/interpreter/nonlin.texi
+++ b/doc/interpreter/nonlin.texi
@@ -18,17 +18,17 @@ Octave can solve sets of nonlinear equat
 @ifinfo
 
 @example
 F (x) = 0
 @end example
 @end ifinfo
 
 @noindent
-using the function @code{fsolve}, which is based on the MINPACK
+using the function @code{fsolve}, which is based on the @sc{Minpack}
 subroutine @code{hybrd}.
 
 @deftypefn {Loadable Function} {[@var{x}, @var{info}] =} fsolve (@var{fcn}, @var{x0})
 Given @var{fcn}, the name of a function of the form @code{f (@var{x})}
 and an initial starting point @var{x0}, @code{fsolve} solves the set of
 equations such that @code{f(@var{x}) == 0}.
 @end deftypefn
 
@@ -58,20 +58,18 @@ Here is a complete example.  To solve th
 @end ifinfo
 
 @noindent
 you first need to write a function to compute the value of the given
 function.  For example:
 
 @example
 function y = f (x)
-
   y(1) = -2*x(1)^2 + 3*x(1)*x(2)   + 4*sin(x(2)) - 6;
   y(2) =  3*x(1)^2 - 2*x(1)*x(2)^2 + 3*cos(x(1)) + 4;
-
 endfunction
 @end example
 
 Then, call @code{fsolve} with a specified initial condition to find the
 roots of the system of equations.  For example, given the function
 @code{f} defined above,
 
 @example
@@ -91,17 +89,15 @@ info = 1
 @end example
 
 A value of @code{info = 1} indicates that the solution has converged.
 
 The function @code{perror} may be used to print English messages
 corresponding to the numeric error codes.  For example,
 
 @example
+@group
 perror ("fsolve", 1)
+     @print{} solution converged to requested tolerance
+@end group
 @end example
 
-@noindent
-prints
 
-@example
-solution converged to requested tolerance
-@end example
diff --git a/doc/interpreter/numbers.texi b/doc/interpreter/numbers.texi
--- a/doc/interpreter/numbers.texi
+++ b/doc/interpreter/numbers.texi
@@ -85,23 +85,23 @@ matrix is determined automatically, so i
 state the dimensions.  The expression
 
 @example
 a = [1, 2; 3, 4]
 @end example
 
 @noindent
 results in the matrix
-
 @iftex
 @tex
 $$ a = \left[ \matrix{ 1 & 2 \cr 3 & 4 } \right] $$
 @end tex
 @end iftex
 @ifinfo
+
 @example
 @group
 
         /      \
         | 1  2 |
   a  =  |      |
         | 3  4 |
         \      /
@@ -180,27 +180,27 @@ the @samp{-} is treated as a binary oper
 scalar 0, but in the expression
 
 @example
 [ 1 -1 ]
 @end example
 
 @noindent
 the @samp{-} is treated as a unary operator and the result is the
-vector @code{[ 1 -1 ]}.
+vector @code{[ 1, -1 ]}.
 
 Given @code{a = 1}, the expression
 
 @example
 [ 1 a' ]
 @end example
 
 @noindent
 results in the single quote character @samp{'} being treated as a
-transpose operator and the result is the vector @code{[ 1 1 ]}, but the
+transpose operator and the result is the vector @code{[ 1, 1 ]}, but the
 expression
 
 @example
 [ 1 a ' ]
 @end example
 
 @noindent
 produces the error message
@@ -220,35 +220,35 @@ valid expression
 For clarity, it is probably best to always use commas and semicolons to
 separate matrix elements and rows.  It is possible to enforce this style
 by setting the built-in variable @code{whitespace_in_literal_matrix} to
 @code{"ignore"}.
 
 @defvr {Built-in Variable} whitespace_in_literal_matrix
 This variable allows some control over how Octave decides to convert
 spaces to commas and semicolons in matrix expressions like
-@samp{[m (1)]} or
+@code{[m (1)]} or
 
 @example
 [ 1, 2,
   3, 4 ]
 @end example
 
 If the value of @code{whitespace_in_literal_matrix} is @code{"ignore"},
 Octave will never insert a comma or a semicolon in a literal matrix
-list.  For example, the expression @samp{[1 2]} will result in an error
-instead of being treated the same as @samp{[1, 2]}, and the expression
+list.  For example, the expression @code{[1 2]} will result in an error
+instead of being treated the same as @code{[1, 2]}, and the expression
 
 @example
 [ 1, 2,
   3, 4 ]
 @end example
 
 @noindent
-will result in the vector [1 2 3 4] instead of a matrix.
+will result in the vector @code{[ 1, 2, 3, 4 ]} instead of a matrix.
 
 If the value of @code{whitespace_in_literal_matrix} is @code{"traditional"},
 Octave will convert spaces to a comma between identifiers and @samp{(}.  For
 example, given the matrix
 
 @example
 m = [3 2]
 @end example
@@ -364,17 +364,34 @@ The default value of @code{split_long_ro
 @node Empty Matrices,  , Matrices, Matrices
 @subsection Empty Matrices
 
 A matrix may have one or both dimensions zero, and operations on empty
 matrices are handled as described by Carl de Boor in @cite{An Empty
 Exercise}, SIGNUM, Volume 25, pages 2--6, 1990 and C. N. Nett and W. M.
 Haddad, in @cite{A System-Theoretic Appropriate Realization of the Empty
 Matrix Concept}, IEEE Transactions on Automatic Control, Volume 38,
-Number 5, May 1993.  Briefly, given a scalar @code{s}, and an @var{m} by
+Number 5, May 1993.
+@iftex
+@tex
+Briefly, given a scalar $s$, an $m\times n$ matrix $M_{m\times n}$,
+and an $m\times n$ empty matrix $[\,]_{m\times n}$ (with either one or
+both dimensions equal to zero), the following are true:
+$$
+\eqalign{%
+s \cdot [\,]_{m\times n} = [\,]_{m\times n} \cdot s &= [\,]_{m\times n}\cr
+[\,]_{m\times n} + [\,]_{m\times n} &= [\,]_{m\times n}\cr
+[\,]_{0\times m} \cdot  M_{m\times n} &= [\,]_{0\times n}\cr
+M_{m\times n} \cdot [\,]_{n\times 0} &= [\,]_{m\times 0}\cr
+[\,]_{m\times 0} \cdot [\,]_{0\times n} &=  0_{m\times n}}
+$$
+@end tex
+@end iftex
+@ifinfo
+Briefly, given a scalar @var{s}, an @var{m} by
 @var{n} matrix @code{M(mxn)}, and an @var{m} by @var{n} empty matrix
 @code{[](mxn)} (with either one or both dimensions equal to zero), the
 following are true:
 
 @example
 @group
 s * [](mxn) = [](mxn) * s = [](mxn)
 
@@ -382,48 +399,36 @@ s * [](mxn) = [](mxn) * s = [](mxn)
 
     [](0xm) *  M(mxn) = [](0xn)
 
      M(mxn) * [](nx0) = [](mx0)
 
     [](mx0) * [](0xn) =  0(mxn)
 @end group
 @end example
+@end ifinfo
 
 By default, dimensions of the empty matrix are printed along with the
-empty matrix symbol, @samp{[]}.  For example:
-
-@example
-@group
-octave:13> zeros (3, 0)
-ans = 
-
-[](3x0)
-@end group
-@end example
-
-The built-in variable @code{print_empty_dimensions} controls this
-behavior.
+empty matrix symbol, @samp{[]}.  The built-in variable
+@code{print_empty_dimensions} controls this behavior.
 
 @defvr {Built-in Variable} print_empty_dimensions
 If the value of @code{print_empty_dimensions} is nonzero, the
 dimensions of empty matrices are printed along with the empty matrix
 symbol, @samp{[]}.  For example, the expression
 
 @example
 zeros (3, 0)
 @end example
 
 @noindent
 will print
 
 @example
-ans =
-
-[](3x0)
+ans = [](3x0)
 @end example
 @end defvr
 
 Empty matrices may also be used in assignment statements as a convenient
 way to delete rows or columns of matrices.
 @xref{Assignment Ops, ,Assignment Expressions}.
 
 Octave will normally issue a warning if it finds an empty matrix in the
@@ -438,17 +443,17 @@ list.
 For example, if the value of @code{empty_list_elements_ok} is
 nonzero, Octave will ignore the empty matrices in the expression
 
 @example
 a = [1, [], 3, [], 5]
 @end example
 
 @noindent
-and the variable @samp{a} will be assigned the value @samp{[ 1 3 5 ]}.
+and the variable @code{a} will be assigned the value @code{[ 1, 3, 5 ]}.
 
 The default value is @code{"warn"}.
 @end defvr
 
 When Octave parses a matrix expression, it examines the elements of the
 list to determine whether they are all constants.  If they are, it
 replaces the list with a single matrix constant.
 
@@ -474,24 +479,24 @@ exceed.  The base, increment, and limit 
 function calls.  If the increment is omitted, it is assumed to be 1.
 For example, the range
 
 @example
 1 : 5
 @end example
 
 @noindent
-defines the set of values @samp{[ 1 2 3 4 5 ]}, and the range
+defines the set of values @samp{[ 1, 2, 3, 4, 5 ]}, and the range
 
 @example
 1 : 3 : 5
 @end example
 
 @noindent
-defines the set of values @samp{[ 1 4 ]}.
+defines the set of values @samp{[ 1, 4 ]}.
 
 Although a range constant specifies a row vector, Octave does @emph{not}
 convert range constants to vectors unless it is necessary to do so.
 This allows you to write a constant like @samp{1 : 10000} without using
 80,000 bytes of storage on a typical 32-bit workstation.
 
 Note that the upper (or lower, if the increment is negative) bound on
 the range is not always included in the set of values, and that ranges
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -64,17 +64,17 @@ Permission is granted to copy and distri
 manual into another language, under the above conditions for
 modified versions.
 @end ifinfo
 
 @titlepage
 @title Octave
 @subtitle A high-level interactive language for numerical computations
 @subtitle Edition 3 for Octave version @value{VERSION}
-@subtitle October 1996
+@subtitle February 1997
 @author John W. Eaton
 @page
 @vskip 0pt plus 1filll
 Copyright @copyright{} 1996, 1997 John W. Eaton.
 
 This is the third edition of the Octave documentation, and is consistent
 with version @value{VERSION} of Octave.
 
@@ -146,17 +146,17 @@ It corresponds to Octave version @value{
 * Variable Index::              An item for each documented variable.
 * Function Index::              An item for each documented function.
 * Operator Index::              An item for each documented operator.
 
  --- The Detailed Node Listing ---
 
 Preface
 
-* Acknowlegements::             
+* Acknowledgements::             
 * How You Can Contribute to Octave::  
 * Distribution::                
 
 A Brief Introduction to Octave
 
 * Running Octave::              
 * Simple Examples::             
 * Conventions::                 
@@ -315,19 +315,20 @@ C-Style I/O Functions
 * Binary I/O::                  
 * Temporary Files::             
 * EOF and Errors::              
 * File Positioning::            
 
 Plotting
 
 * Two-Dimensional Plotting::    
+* Specialized Two-Dimensional Plots::  
 * Three-Dimensional Plotting::  
+* Plot Annotations::            
 * Multiple Plots on One Page::  
-* Miscellaneous Plotting Functions::  
 
 Matrix Manipulation
 
 * Finding Elements and Checking Conditions::  
 * Rearranging Matrices::        
 * Special Utility Matrices::    
 * Famous Matrices::             
 
diff --git a/doc/interpreter/optim.texi b/doc/interpreter/optim.texi
--- a/doc/interpreter/optim.texi
+++ b/doc/interpreter/optim.texi
@@ -18,19 +18,20 @@
 @cindex LP
 @cindex QP
 @cindex NLP
 
 @node Quadratic Programming, Nonlinear Programming, Optimization, Optimization
 @section Quadratic Programming
 
 @deftypefn {Loadable Function} {[@var{x}, @var{obj}, @var{info}, @var{lambda}] =} qpsol (@var{x}, @var{H}, @var{c}, @var{lb}, @var{ub}, @var{lb}, @var{A}, @var{ub})
-Solve quadratic programs using Gill and Murray's QPSOL.  Because QPSOL
-is not freely redistributable, this function is only available if you
-have obtained your own copy of QPSOL.  @xref{Installation}.
+Solve quadratic programs using Gill and Murray's @sc{Qpsol}.  Because
+@sc{Qpsol} is not freely redistributable, this function is only
+available if you have obtained your own copy of @sc{Qpsol}.
+@xref{Installation}.
 @end deftypefn
 
 @deftypefn {Loadable Function} {} qpsol_options (@var{opt}, @var{val})
 When called with two arguments, this function allows you set options
 parameters for the function @code{qpsol}.  Given one argument,
 @code{qpsol_options} returns the value of the corresponding option.  If
 no arguments are supplied, the names of all the available options and
 their current values are displayed.
@@ -50,19 +51,20 @@ parameters for the function @code{fsqp}.
 no arguments are supplied, the names of all the available options and
 their current values are displayed.
 @end deftypefn
 
 Sorry, this hasn't been implemented yet.
 @end ignore
 
 @deftypefn {Loadable Function} {[@var{x}, @var{obj}, @var{info}, @var{lambda}] =} npsol (@var{x}, @var{phi}, @var{lb}, @var{ub}, @var{lb}, @var{A}, @var{ub}, @var{lb}, @var{g}, @var{ub})
-Solve nonlinear programs using Gill and Murray's NPSOL.  Because NPSOL
-is not freely redistributable, this function is only available if you
-have obtained your own copy of NPSOL.  @xref{Installation}.
+Solve nonlinear programs using Gill and Murray's @sc{Npsol}.  Because
+@sc{Npsol} is not freely redistributable, this function is only
+available if you have obtained your own copy of @sc{Npsol}.
+@xref{Installation}.
 
 The second argument is a string containing the name of the objective
 function to call.  The objective function must be of the form
 
 @example
 y = phi (x)
 @end example
 
@@ -78,17 +80,16 @@ no arguments are supplied, the names of 
 their current values are displayed.
 @end deftypefn
 
 @node Linear Least Squares,  , Nonlinear Programming, Optimization
 @section Linear Least Squares
 
 @deftypefn {Function File} {[@var{beta}, @var{v}, @var{r}] =} gls (@var{y}, @var{x}, @var{o})
 Generalized least squares estimation for the multivariate model
-
 @iftex
 @tex
 $y = x b + e$
 with $\bar{e} = 0$ and cov(vec($e$)) = $(s^2)o$,
 @end tex
 @end iftex
 @ifinfo
 @code{@var{y} = @var{x} * @var{b} + @var{e}} with @code{mean (@var{e}) =
@@ -125,17 +126,16 @@ The GLS estimator for @code{@var{s}^2}.
 @item r
 The matrix of GLS residuals, @code{@var{r} = @var{y} - @var{x} *
 @var{beta}}.
 @end table
 @end deftypefn
 
 @deftypefn {Function File} {[@var{beta}, @var{sigma}, @var{r}] =} ols (@var{y}, @var{x})
 Ordinary least squares estimation for the multivariate model
-
 @iftex
 @tex
 $y = x b + e$
 with
 $\bar{e} = 0$, and cov(vec($e$)) = kron ($s, I$)
 @end tex
 @end iftex
 @ifinfo
@@ -146,21 +146,19 @@ with
  where
 @iftex
 @tex
 $y$ is a $t \times p$ matrix, $x$ is a $t \times k$ matrix, 
 $b$ is a $k \times p$ matrix, and $e$ is a $t \times p$ matrix.
 @end tex
 @end iftex
 @ifinfo
-@example
 @var{y} is a @var{t} by @var{p} matrix, @var{X} is a @var{t} by @var{k}
 matrix, @var{B} is a @var{k} by @var{p} matrix, and @var{e} is a @var{t}
 by @var{p} matrix.
-@end example
 @end ifinfo
 
 Each row of @var{y} and @var{x} is an observation and each column a
 variable.
 
 The return values @var{beta}, @var{sigma}, and @var{r} are defined as
 follows.
 
diff --git a/doc/interpreter/plot.texi b/doc/interpreter/plot.texi
--- a/doc/interpreter/plot.texi
+++ b/doc/interpreter/plot.texi
@@ -11,22 +11,23 @@ actual graphics.  There are two low-leve
 @code{gnuplot} functions @code{plot} and @code{splot}.  A number of
 other higher level plotting functions, patterned after the graphics
 functions found in @sc{Matlab} version 3.5, are also available.
 These higher level functions are all implemented in terms of the two
 low-level plotting functions.
 
 @menu
 * Two-Dimensional Plotting::    
+* Specialized Two-Dimensional Plots::  
 * Three-Dimensional Plotting::  
+* Plot Annotations::            
 * Multiple Plots on One Page::  
-* Miscellaneous Plotting Functions::  
 @end menu
 
-@node Two-Dimensional Plotting, Three-Dimensional Plotting, Plotting, Plotting
+@node Two-Dimensional Plotting, Specialized Two-Dimensional Plots, Plotting, Plotting
 @section Two-Dimensional Plotting
 
 @deffn {Command} gplot @var{ranges} @var{expression} @var{using} @var{title} @var{style}
 Generate a 2-dimensional plot.
 
 The @var{ranges}, @var{using}, @var{title}, and @var{style} arguments
 are optional, and the @var{using}, @var{title} and @var{style}
 qualifiers may appear in any order after the expression.  You may plot
@@ -83,19 +84,19 @@ the command
 @example
 gplot [-11:11] [-1.1:1.1] \
   data with lines, data using 1:3 with impulses
 @end example
 
 @noindent
 will plot two lines.  The first line is generated by the command
 @code{data with lines}, and is a graph of the sine function over the
-range -10 to 10.  The data is taken from the first two columns of the
-matrix because columns to plot were not specified with the @var{using}
-qualifier.
+range @minus{}10 to 10.  The data is taken from the first two columns of
+the matrix because columns to plot were not specified with the
+@var{using} qualifier.
 
 The clause @code{using 1:3} in the second part of this plot command
 specifies that the first and third columns of the matrix @code{data}
 should be taken as the values to plot.
 
 In this example, the ranges have been explicitly specified to be a bit
 larger than the actual range of the data so that the curves do not touch
 the border of the plot.
@@ -134,17 +135,26 @@ For example,
 @example
 gset term tek40
 gset output "/dev/plotter"
 gset title "sine with lines and cosine with impulses"
 replot "sin (x) w l"
 @end example
 
 will change the terminal type for plotting, add a title to the current
-plot, add a graph of sin (x) to the plot, and force the new plot to be
+plot, add a graph of
+@iftex
+@tex
+$\sin(x)$
+@end tex
+@end iftex
+@ifinfo
+sin (x) 
+@end ifinfo
+to the plot, and force the new plot to be
 sent to the plot device.  This last step is normally required in order
 to update the plot.  This default is reasonable for slow terminals or
 hardcopy output devices because even when you are adding additional
 lines with a replot command, gnuplot always redraws the entire plot, and
 you probably don't want to have a completely new plot generated every
 time something as minor as an axis label changes.
 
 @findex shg
@@ -173,28 +183,28 @@ The @sc{Matlab}-style two-dimensional pl
 @cindex plotting
 @cindex graphics
 
 @deftypefn {Function File} {} plot (@var{args})
 This function produces two-dimensional plots.  Many different
 combinations of arguments are possible.  The simplest form is
 
 @example
-plot (y)
+plot (@var{y})
 @end example
 
 @noindent
 where the argument is taken as the set of @var{y} coordinates and the
 @var{x} coordinates are taken to be the indices of the elements,
 starting with 1.
 
 If more than one argument is given, they are interpreted as
 
 @example
-plot (x [, y] [, fmt] ...)
+plot (@var{x}, @var{y}, @var{fmt} ...)
 @end example
 
 @noindent
 where @var{y} and @var{fmt} are optional, and any number of argument
 sets may appear.  The @var{x} and @var{y} values are
 interpreted as follows:
 
 @itemize @bullet
@@ -252,28 +262,28 @@ Set steps plot style.
 Set boxes plot style.
 
 @item ~
 Set errorbars plot style.
 
 @item #~
 Set boxerrorbars plot style.
 
-@item n
+@item @var{n}
 Interpreted as the plot color if @var{n} is an integer in the range 1 to
 6.
 
-@item nm
+@item @var{nm}
 If @var{nm} is a two digit integer and @var{m} is an integer in the
 range 1 to 6, @var{m} is interpreted as the point style.  This is only
 valid in combination with the @code{@@} or @code{-@@} specifiers.
 
-@item c
-If @var{c} is one of @var{"r"}, @var{"g"}, @var{"b"}, @var{"m"},
-@var{"c"}, or @var{"w"}, it is interpreted as the plot color (red,
+@item @var{c}
+If @var{c} is one of @code{"r"}, @code{"g"}, @code{"b"}, @code{"m"},
+@code{"c"}, or @code{"w"}, it is interpreted as the plot color (red,
 green, blue, magenta, cyan, or white).
 
 @item +
 @itemx *
 @itemx o
 @itemx x
 Used in combination with the points or linespoints styles, set the point
 style.
@@ -293,26 +303,26 @@ Number  Gnuplot colors  (lines)points st
 @end example
 
 Here are some plot examples:
 
 @example
 plot (x, y, "@@12", x, y2, x, y3, "4", x, y4, "+")
 @end example
 
-This command will plot @var{y} with points of type 2 (displayed as
-@samp{+}) and color 1 (red), @var{y2} with lines, @var{y3} with lines of
-color 4 (magenta) and @var{y4} with points displayed as @samp{+}.
+This command will plot @code{y} with points of type 2 (displayed as
+@samp{+}) and color 1 (red), @code{y2} with lines, @code{y3} with lines of
+color 4 (magenta) and @code{y4} with points displayed as @samp{+}.
 
 @example
 plot (b, "*")
 @end example
 
-This command will plot the data in @var{b} will be plotted with points
-displayed as @samp{*}.
+This command will plot the data in the variable @code{b} will be plotted
+with points displayed as @samp{*}.
 @end deftypefn
 
 @deftypefn {Function File} {} hold @var{args}
 Tell Octave to `hold' the current data on the plot when executing
 subsequent plotting commands.  This allows you to execute a series of
 plot commands and have all the lines end up on the same figure.  The
 default is for each new plot command to clear the plot device first.
 For example, the command
@@ -322,50 +332,166 @@ hold on
 @end example
 
 @noindent
 turns the hold state on.  An argument of @code{off} turns the hold state
 off, and @code{hold} with no arguments toggles the current hold state.
 @end deftypefn
 
 @deftypefn {Function File} {} ishold
-Returns 1 if the next line will be added to the current plot, or 0 if
+Return 1 if the next line will be added to the current plot, or 0 if
 the plot device will be cleared before drawing the next line.
 @end deftypefn
 
+@deftypefn {Function File} {} clearplot
+@deftypefnx {Function File} {} clg
+Clear the plot window and any titles or axis labels.  The name
+@code{clg} is aliased to @code{clearplot} for compatibility with @sc{Matlab}.
+
+The commands @kbd{gplot clear}, @kbd{gsplot clear}, and @kbd{replot
+clear} are equivalent to @code{clearplot}.  (Previously, commands like
+@kbd{gplot clear} would evaluate @code{clear} as an ordinary expression
+and clear all the visible variables.)
+@end deftypefn
+
+@deftypefn {Function File} {} closeplot
+Close stream to the @code{gnuplot} subprocess.  If you are using X11,
+this will close the plot window.
+@end deftypefn
+
+@deftypefn {Function File} {} purge_tmp_files
+Delete the temporary files created by the plotting commands.
+
+Octave creates temporary data files for @code{gnuplot} and then sends
+commands to @code{gnuplot} through a pipe.  Octave will delete the
+temporary files on exit, but if you are doing a lot of plotting you may
+want to clean up in the middle of a session.
+
+A future version of Octave will eliminate the need to use temporary
+files to hold the plot data.
+@end deftypefn
+
+@deftypefn {Function File} {} axis (@var{limits})
+Sets the axis limits for plots.
+
+The argument @var{limits} should be a 2, 4, or 6 element vector.  The
+first and second elements specify the lower and upper limits for the x
+axis.  The third and fourth specify the limits for the y axis, and the
+fifth and sixth specify the limits for the z axis.
+
+With no arguments, @code{axis} turns autoscaling on.
+
+If your plot is already drawn, then you need to use @code{replot} before
+the new axis limits will take effect.  You can get this to happen
+automatically by setting the built-in variable @code{automatic_replot}
+to a nonzero value.
+@end deftypefn
+
+@node Specialized Two-Dimensional Plots, Three-Dimensional Plotting, Two-Dimensional Plotting, Plotting
+@section Specialized Two-Dimensional Plots
+
+@deftypefn {Function File} {} bar (@var{x}, @var{y})
+Given two vectors of x-y data, @code{bar} produces a bar graph.
+
+If only one argument is given, it is taken as a vector of y-values
+and the x coordinates are taken to be the indices of the elements.
+
+If two output arguments are specified, the data are generated but
+not plotted.  For example,
+
+@example
+bar (x, y);
+@end example
+
+@noindent
+and
+
+@example
+[xb, yb] = bar (x, y);
+plot (xb, yb);
+@end example
+
+@noindent
+are equivalent.
+@end deftypefn
+
+@deftypefn {Function File} {} contour (@var{z}, @var{n}, @var{x}, @var{y})
+Make a contour plot of the three-dimensional surface described by
+@var{z}.  Someone needs to improve @code{gnuplot}'s contour routines
+before this will be very useful.
+@end deftypefn
+
+@deftypefn {Function File} {} hist (@var{y}, @var{x})
+Produce histogram counts or plots.
+
+With one vector input argument, plot a histogram of the values with
+10 bins.  The range of the histogram bins is determined by the range
+of the data.
+
+Given a second scalar argument, use that as the number of bins.
+
+Given a second vector argument, use that as the centers of the bins,
+with the width of the bins determined from the adjacent values in
+the vector.
+
+Extreme values are lumped in the first and last bins.
+
+With two output arguments, produce the values @var{nn} and @var{xx} such
+that @code{bar (@var{xx}, @var{nn})} will plot the histogram.
+@end deftypefn
+
 @deftypefn {Function File} {} loglog (@var{args})
 Make a two-dimensional plot using log scales for both axes.  See the
 description of @code{plot} above for a description of the arguments that
 @code{loglog} will accept.
 @end deftypefn
 
+@deftypefn {Function File} {} polar (@var{theta}, @var{rho})
+Make a two-dimensional plot given polar the coordinates @var{theta} and
+@var{rho}.
+@end deftypefn
+
 @deftypefn {Function File} {} semilogx (@var{args})
 Make a two-dimensional plot using a log scale for the @var{x} axis.  See
 the description of @code{plot} above for a description of the arguments
 that @code{semilogx} will accept.
 @end deftypefn
 
 @deftypefn {Function File} {} semilogy (@var{args})
 Make a two-dimensional plot using a log scale for the @var{y} axis.  See
 the description of @code{plot} above for a description of the arguments
 that @code{semilogy} will accept.
 @end deftypefn
 
-@deftypefn {Function File} {} contour (@var{z}, @var{n}, @var{x}, @var{y})
-Make a contour plot of the three-dimensional surface described by
-@var{z}.  Someone needs to improve @code{gnuplot}'s contour routines
-before this will be very useful.
+@deftypefn {Function File} {} stairs (@var{x}, @var{y})
+Given two vectors of x-y data, bar produces a `stairstep' plot.
+
+If only one argument is given, it is taken as a vector of y-values
+and the x coordinates are taken to be the indices of the elements.
+
+If two output arguments are specified, the data are generated but
+not plotted.  For example,
+
+@example
+stairs (x, y);
+@end example
+
+@noindent
+and
+
+@example
+[xs, ys] = stairs (x, y);
+plot (xs, ys);
+@end example
+
+@noindent
+are equivalent.
 @end deftypefn
 
-@deftypefn {Function File} {} polar (@var{theta}, @var{rho})
-Make a two-dimensional plot given polar the coordinates @var{theta} and
-@var{rho}.
-@end deftypefn
-
-@node Three-Dimensional Plotting, Multiple Plots on One Page, Two-Dimensional Plotting, Plotting
+@node Three-Dimensional Plotting, Plot Annotations, Specialized Two-Dimensional Plots, Plotting
 @section Three-Dimensional Plotting
 
 @deffn {Command} gsplot @var{ranges} @var{expression} @var{using} @var{title} @var{style}
 Generate a 3-dimensional plot.
 
 The @var{ranges}, @var{using}, @var{title}, and @var{style} arguments
 are optional, and the @var{using}, @var{title} and @var{style}
 qualifiers may appear in any order after the expression.  You may plot
@@ -405,17 +531,17 @@ gsplot rand (5, 2)
 @noindent
 will plot a random surface, with the x and y values taken from the row
 and column indices of the matrix.
 
 If parametric plotting mode is set (using the command
 @kbd{gset parametric}, then @code{gsplot} takes the columns of the
 matrix three at a time as the x, y and z values that define a line in
 three space.  Any extra columns are ignored, and the x and y values are
-expected to be sorted.  For example, with @kbd{parametric} set, it
+expected to be sorted.  For example, with @code{parametric} set, it
 makes sense to plot a matrix like
 @iftex
 @tex
 $$
 \left[\matrix{
 1 & 1 & 3 & 2 & 1 & 6 & 3 & 1 & 9 \cr
 1 & 2 & 2 & 2 & 2 & 5 & 3 & 2 & 8 \cr
 1 & 3 & 1 & 2 & 3 & 4 & 3 & 3 & 7}\right]
@@ -473,17 +599,37 @@ frames.
 @defvr {Built-in Variable} gnuplot_has_multiplot
 If the value of this variable is nonzero, Octave assumes that your copy
 of gnuplot has the multiplot support that is included in recent
 3.6beta releases.  It's initial value is determined by configure, but it
 can be changed in your startup script or at the command line in case
 configure got it wrong, or if you upgrade your gnuplot installation.
 @end defvr
 
-@node Multiple Plots on One Page, Miscellaneous Plotting Functions, Three-Dimensional Plotting, Plotting
+@node Plot Annotations, Multiple Plots on One Page, Three-Dimensional Plotting, Plotting
+@section Plot Annotations
+
+@deftypefn {Function File} {} grid
+For two-dimensional plotting, force the display of a grid on the plot.
+@end deftypefn
+
+@deftypefn {Function File} {} title (@var{string})
+Specify a title for the plot.  If you already have a plot displayed, use
+the command @code{replot} to redisplay it with the new title.
+@end deftypefn
+
+@deftypefn {Function File} {} xlabel (@var{string})
+@deftypefnx {Function File} {} ylabel (@var{string})
+@deftypefnx {Function File} {} zlabel (@var{string})
+Specify x, y, and z axis labels for the plot.  If you already have a plot
+displayed, use the command @code{replot} to redisplay it with the new
+labels.
+@end deftypefn
+
+@node Multiple Plots on One Page,  , Plot Annotations, Plotting
 @section Multiple Plots on One Page
 
 The following functions all require a version of @code{gnuplot} that
 supports the multiplot feature.
 
 @deftypefn {Function File} {} mplot (@var{x}, @var{y})
 @deftypefnx {Function File} {} mplot (@var{x}, @var{y}, @var{fmt})
 @deftypefnx {Function File} {} mplot (@var{x1}, @var{y1}, @var{x2}, @var{y2})
@@ -559,17 +705,16 @@ If only one argument is supplied, then i
 specifying the location in digits 1 (rows) and 2 (columns) and the plot
 index in digit 3.
 
 The plot index runs row-wise.  First all the columns in a row are filled
 and then the next row is filled.
 
 For example, a plot with 4 by 2 grid will have plot indices running as
 follows:
-
 @iftex
 @tex
 \vskip 10pt
 \hfil\vbox{\offinterlineskip\hrule
 \halign{\vrule#&&\qquad\hfil#\hfil\qquad\vrule\cr
 height13pt&1&2&3&4\cr height12pt&&&&\cr\noalign{\hrule}
 height13pt&5&6&7&8\cr height12pt&&&&\cr\noalign{\hrule}}}
 \hfil
@@ -588,153 +733,15 @@ height13pt&5&6&7&8\cr height12pt&&&&\cr\
 @end display
 @end ifinfo
 @end deftypefn
 
 @deftypefn {Function File} {} subwindow (@var{xn}, @var{yn})
 Sets the subwindow position in multiplot mode for the next plot.  The
 multiplot mode has to be previously initialized using the
 @code{multiplot} function, otherwise this command just becomes an alias
-to @var{multiplot}
+to @code{multiplot}
 @end deftypefn
 
 @deftypefn {Function File} {} top_title (@var{string})
 @deftypefnx {Function File} {} bottom_title (@var{string})
 Makes a title with text @var{string} at the top (bottom) of the plot.
 @end deftypefn
-
-@node Miscellaneous Plotting Functions,  , Multiple Plots on One Page, Plotting
-@section Miscellaneous Plotting Functions
-
-@deftypefn {Function File} {} bar (@var{x}, @var{y})
-Given two vectors of x-y data, @code{bar} produces a bar graph.
-
-If only one argument is given, it is taken as a vector of y-values
-and the x coordinates are taken to be the indices of the elements.
-
-If two output arguments are specified, the data are generated but
-not plotted.  For example,
-
-@example
-bar (x, y);
-@end example
-
-@noindent
-and
-
-@example
-[xb, yb] = bar (x, y);
-plot (xb, yb);
-@end example
-
-@noindent
-are equivalent.
-@end deftypefn
-
-@deftypefn {Function File} {} grid
-For two-dimensional plotting, force the display of a grid on the plot.
-@end deftypefn
-
-@deftypefn {Function File} {} stairs (@var{x}, @var{y})
-Given two vectors of x-y data, bar produces a `stairstep' plot.
-
-If only one argument is given, it is taken as a vector of y-values
-and the x coordinates are taken to be the indices of the elements.
-
-If two output arguments are specified, the data are generated but
-not plotted.  For example,
-
-@example
-stairs (x, y);
-@end example
-
-@noindent
-and
-
-@example
-[xs, ys] = stairs (x, y);
-plot (xs, ys);
-@end example
-
-@noindent
-are equivalent.
-@end deftypefn
-
-@deftypefn {Function File} {} title (@var{string})
-Specify a title for the plot.  If you already have a plot displayed, use
-the command @code{replot} to redisplay it with the new title.
-@end deftypefn
-
-@deftypefn {Function File} {} xlabel (@var{string})
-@deftypefnx {Function File} {} ylabel (@var{string})
-@deftypefnx {Function File} {} zlabel (@var{string})
-Specify x, y, and z axis labels for the plot.  If you already have a plot
-displayed, use the command @code{replot} to redisplay it with the new
-labels.
-@end deftypefn
-
-@deftypefn {Function File} {} sombrero (@var{n})
-Display a classic three-dimensional mesh plot.  The parameter @var{n}
-allows you to increase the resolution.
-@end deftypefn
-
-@deftypefn {Function File} {} clearplot
-@deftypefnx {Function File} {} clg
-Clear the plot window and any titles or axis labels.  The name
-@code{clg} is aliased to @code{clearplot} for compatibility with @sc{Matlab}.
-
-The commands @kbd{gplot clear}, @kbd{gsplot clear}, and @kbd{replot
-clear} are equivalent to @code{clearplot}.  (Previously, commands like
-@kbd{gplot clear} would evaluate @code{clear} as an ordinary expression
-and clear all the visible variables.)
-@end deftypefn
-
-@deftypefn {Function File} {} closeplot
-Close stream to the @code{gnuplot} subprocess.  If you are using X11,
-this will close the plot window.
-@end deftypefn
-
-@deftypefn {Function File} {} purge_tmp_files
-Delete the temporary files created by the plotting commands.
-
-Octave creates temporary data files for @code{gnuplot} and then sends
-commands to @code{gnuplot} through a pipe.  Octave will delete the
-temporary files on exit, but if you are doing a lot of plotting you may
-want to clean up in the middle of a session.
-
-A future version of Octave will eliminate the need to use temporary
-files to hold the plot data.
-@end deftypefn
-
-@deftypefn {Function File} {} axis (@var{limits})
-Sets the axis limits for plots.
-
-The argument @var{limits} should be a 2, 4, or 6 element vector.  The
-first and second elements specify the lower and upper limits for the x
-axis.  The third and fourth specify the limits for the y axis, and the
-fifth and sixth specify the limits for the z axis.
-
-With no arguments, @code{axis} turns autoscaling on.
-
-If your plot is already drawn, then you need to use @code{replot} before
-the new axis limits will take effect.  You can get this to happen
-automatically by setting the built-in variable @code{automatic_replot}
-to a nonzero value.
-@end deftypefn
-
-@deftypefn {Function File} {} hist (@var{y}, @var{x})
-Produce histogram counts or plots.
-
-With one vector input argument, plot a histogram of the values with
-10 bins.  The range of the histogram bins is determined by the range
-of the data.
-
-Given a second scalar argument, use that as the number of bins.
-
-Given a second vector argument, use that as the centers of the bins,
-with the width of the bins determined from the adjacent values in
-the vector.
-
-Extreme values are lumped in the first and last bins.
-
-With two output arguments, produce the values @var{nn} and @var{xx} such
-that @code{bar (@var{xx}, @var{nn})} will plot the histogram.
-@end deftypefn
diff --git a/doc/interpreter/poly.texi b/doc/interpreter/poly.texi
--- a/doc/interpreter/poly.texi
+++ b/doc/interpreter/poly.texi
@@ -15,34 +15,27 @@ in descending order).  For example, a ve
 of length
 @iftex
 @tex
  $N+1$
 @end tex
 @ifinfo
  @var{N+1}
 @end ifinfo
- corresponds to the following
+ corresponds to the following polynomial of order
 @iftex
 @tex
- $N^{th}$
-@end tex
-@end iftex
-@ifinfo
- @var{N}-th
-@end ifinfo
- order polynomial
-@iftex
-@tex
+ $N$
 $$
  p (x) = c_1 x^N + ... + c_N x + c_{N+1}.
 $$
 @end tex
 @end iftex
 @ifinfo
+ @var{N}
 
 @example
 p(x) = @var{c}(1) x^@var{N} + ... + @var{c}(@var{N}) x + @var{c}(@var{N}+1).
 @end example
 @end ifinfo
 
 @deftypefn {Function File} {} compan (@var{c})
 Compute the companion matrix corresponding to polynomial coefficient
@@ -159,16 +152,17 @@ element multiplication as is used in pol
 
 The argument @var{x} must be a square matrix.
 @end deftypefn
 
 @deftypefn {Function File} {} residue (@var{b}, @var{a}, @var{tol})
 If @var{b} and @var{a} are vectors of polynomial coefficients, then
 residue calculates the partial fraction expansion corresponding to the
 ratio of the two polynomials.
+@cindex partial fraction expansion
 
 The function @code{residue} returns @var{r}, @var{p}, @var{k}, and
 @var{e}, where the vector @var{r} contains the residue terms, @var{p}
 contains the pole values, @var{k} contains the coefficients of a direct
 polynomial term (if it exists) and @var{e} is a vector containing the
 powers of the denominators in the partial fraction terms.
 
 Assuming @var{b} and @var{a} represent polynomials
diff --git a/doc/interpreter/preface.texi b/doc/interpreter/preface.texi
--- a/doc/interpreter/preface.texi
+++ b/doc/interpreter/preface.texi
@@ -43,123 +43,124 @@ people to do more ambitious computations
 
 Everyone is encouraged to share this software with others under the
 terms of the GNU General Public License (@pxref{Copying}) as described
 at the beginning of this manual.  You are also encouraged to help make
 Octave more useful by writing and contributing additional functions for
 it, and by reporting any problems you may have.
 
 @menu
-* Acknowlegements::             
+* Acknowledgements::             
 * How You Can Contribute to Octave::  
 * Distribution::                
 @end menu
 
-@node Acknowlegements, How You Can Contribute to Octave, Preface, Preface
-@unnumberedsec Acknowlegements
+@node Acknowledgements, How You Can Contribute to Octave, Preface, Preface
+@unnumberedsec Acknowledgements
 @cindex acknowledgements
 
 Many people have already contributed to Octave's development.  In
 addition to John W. Eaton, the following people have helped write parts
 of Octave or helped out in various other ways.
 
 @c Once lp_solve has been added, don't forget to include the lp_solve
 @c author, and Kantor, for providing an example.
 
 @itemize @bullet
 @item
-Thomas Baier (baier@@ci.tuwien.ac.at) wrote the original versions of
-@code{popen}, @code{pclose}, @code{execute}, @code{sync_system}, and
+Thomas Baier @email{baier@@ci.tuwien.ac.at} wrote the original versions
+of @code{popen}, @code{pclose}, @code{execute}, @code{sync_system}, and
 @code{async_system}.
 
 @item
-Karl Berry (karl@@cs.umb.edu) wrote the @code{kpathsea} library that
-allows Octave to recursively search directory paths for function and
-script files.
+Karl Berry @email{karl@@cs.umb.edu} wrote the @code{kpathsea} library
+that allows Octave to recursively search directory paths for function
+and script files.
 
 @item
-Georg Beyerle (gbeyerle@@awi-potsdam.de) contributed code to save values
-in @sc{Matlab}'s @file{.mat}-file format, and has provided many useful bug
-reports and suggestions.
+Georg Beyerle @email{gbeyerle@@awi-potsdam.de} contributed code to save
+values in @sc{Matlab}'s @file{.mat}-file format, and has provided many
+useful bug reports and suggestions.
 
 @item
-John Campbell (jcc@@bevo.che.wisc.edu) wrote most of the file and
+John Campbell @email{jcc@@bevo.che.wisc.edu} wrote most of the file and
 C-style input and output functions.
 
 @item
-Brian Fox (bfox@@gnu.ai.mit.edu) wrote the @code{readline} library used
-for command history editing, and the portion of this manual that
+Brian Fox @email{bfox@@gnu.ai.mit.edu} wrote the @code{readline} library
+used for command history editing, and the portion of this manual that
 documents it.
 
 @item
-Klaus Gebhardt <gebhardt@@crunch.ikp.physik.th-darmstadt.de> ported
-Octave to OS/2 and worked with Michel Juillard <juillard@@msh-paris.fr>
-on the port to DOS.
+Klaus Gebhardt @email{gebhardt@@crunch.ikp.physik.th-darmstadt.de}
+ported Octave to OS/2 and worked with Michel Juillard
+@email{juillard@@msh-paris.fr} on the port to DOS.
 
 @item
-A. Scottedward Hodel (scotte@@eng.auburn.edu) contributed a number
+A. Scottedward Hodel @email{A.S.Hodel@@eng.auburn.edu} contributed a number
 of functions including @code{expm}, @code{qzval}, @code{qzhess},
 @code{syl}, @code{lyap}, and @code{balance}.
 
 @item
-Kurt Hornik (Kurt.Hornik@@ci.tuwien.ac.at) provided the @code{corrcoef},
-@code{cov}, @code{fftconv}, @code{fftfilt}, @code{gcd}, @code{lcd},
-@code{kurtosis}, @code{null}, @code{orth}, @code{poly}, @code{polyfit},
-@code{roots}, and @code{skewness} functions, supplied documentation for
-these and numerous other functions, rewrote the Emacs mode for editing 
-Octave code and provided its documentation, and has helped tremendously
-with testing.  He has also been a constant source of new ideas for
-improving Octave.
+Kurt Hornik @email{Kurt.Hornik@@ci.tuwien.ac.at} provided the
+@code{corrcoef}, @code{cov}, @code{fftconv}, @code{fftfilt}, @code{gcd},
+@code{lcd}, @code{kurtosis}, @code{null}, @code{orth}, @code{poly},
+@code{polyfit}, @code{roots}, and @code{skewness} functions, supplied
+documentation for these and numerous other functions, rewrote the Emacs
+mode for editing Octave code and provided its documentation, and has
+helped tremendously with testing.  He has also been a constant source of
+new ideas for improving Octave.
 
 @item
-Phil Johnson (johnsonp@@nicco.sscnet.ucla.edu) has helped to make Linux
-releases available.
+Phil Johnson @email{johnsonp@@nicco.sscnet.ucla.edu} has helped to make
+Linux releases available.
 
 @item
-Michel Juillard <juillard@@msh-paris.fr> ported Octave to DOS systems.
+Michel Juillard @email{juillard@@msh-paris.fr} ported Octave to DOS
+systems.
 
 @item
-Friedrich Leisch (leisch@@ci.tuwien.ac.at) provided the
+Friedrich Leisch @email{leisch@@ci.tuwien.ac.at} provided the
 @code{mahalanobis} function.
 
 @item
-Ken Neighbors (wkn@@leland.stanford.edu) has provided many useful bug
-reports and comments on @sc{Matlab} compatibility.
+Ken Neighbors @email{wkn@@leland.stanford.edu} has provided many useful
+bug reports and comments on @sc{Matlab} compatibility.
 
 @item
-Rick Niles (niles@@axp745.gsfc.nasa.gov) rewrote Octave's plotting
+Rick Niles @email{niles@@axp745.gsfc.nasa.gov} rewrote Octave's plotting
 functions to add line styles and the ability to specify an unlimited
-number of lines in a single call.  He also continues to track down
-odd incompatibilities and bugs.
+number of lines in a single call.  He also continues to track down odd
+incompatibilities and bugs.
 
 @item
-Mark Odegard (meo@@sugarland.unocal.com) provided the initial
+Mark Odegard @email{meo@@sugarland.unocal.com} provided the initial
 implementation of @code{fread}, @code{fwrite}, @code{feof}, and
 @code{ferror}.
 
 @item
-Tony Richardson (tony@@guts.biomed.uakron.edu) wrote Octave's image
-processing functions as well as most of the original polynomial
+Tony Richardson @email{tony@@guts.biomed.uakron.edu} wrote Octave's
+image processing functions as well as most of the original polynomial
 functions.
 
 @item
-R. Bruce Tenison (Bruce.Tenison@@eng.auburn.edu) wrote the @code{hess} and
-@code{schur} functions.
+R. Bruce Tenison @email{Bruce.Tenison@@eng.auburn.edu} wrote the
+@code{hess} and @code{schur} functions.
 
 @item
-Teresa Twaroch (twaroch@@ci.tuwien.ac.at) provided the functions
+Teresa Twaroch @email{twaroch@@ci.tuwien.ac.at} provided the functions
 @code{gls} and @code{ols}.
 
 @item
-Andreas Weingessel (Andreas.Weingessel@@ci.tuwien.ac.at) wrote the
+Andreas Weingessel @email{Andreas.Weingessel@@ci.tuwien.ac.at} wrote the
 audio functions @code{lin2mu}, @code{loadaudio}, @code{mu2lin},
 @code{playaudio}, @code{record}, @code{saveaudio}, and @code{setaudio}.
 
 @item
-Fook Fah Yap (ffy@@eng.cam.ac.uk) provided the @code{fft} and
+Fook Fah Yap @email{ffy@@eng.cam.ac.uk} provided the @code{fft} and
 @code{ifft} functions and valuable bug reports for early versions.
 @end itemize
 
 Special thanks to the following people and organizations for
 supporting the development of Octave:
 
 @itemize @bullet
 @item
@@ -195,17 +196,17 @@ Department of Chemical Engineering.
 
 @item
 Richard Stallman, for writing GNU.
 @end itemize
 
 This project would not have been possible without the GNU software used
 in and used to produce Octave.
 
-@node How You Can Contribute to Octave, Distribution, Acknowlegements, Preface
+@node How You Can Contribute to Octave, Distribution, Acknowledgements, Preface
 @unnumberedsec How You Can Contribute to Octave
 @cindex contributing to Octave
 @cindex funding Octave development
 
 There are a number of ways that you can contribute to help make Octave a
 better system.  Perhaps the most important way to contribute is to write
 high-quality code for solving new problems, and to make your code freely
 available for others to use.
diff --git a/doc/interpreter/quad.texi b/doc/interpreter/quad.texi
--- a/doc/interpreter/quad.texi
+++ b/doc/interpreter/quad.texi
@@ -49,26 +49,26 @@ solution.
 When called with two arguments, this function allows you set options
 parameters for the function @code{quad}.  Given one argument,
 @code{quad_options} returns the value of the corresponding option.  If
 no arguments are supplied, the names of all the available options and
 their current values are displayed.
 @end deftypefn
 
 Here is an example of using @code{quad} to integrate the function
-
 @iftex
 @tex
 $$
  f(x) = x \sin (1/x) \sqrt {|1 - x|}
 $$
 from $x = 0$ to $x = 3$.
 @end tex
 @end iftex
 @ifinfo
+
 @example
   @var{f}(@var{x}) = @var{x} * sin (1/@var{x}) * sqrt (abs (1 - @var{x}))
 @end example
 
 @noindent
 from @var{x} = 0 to @var{x} = 3.
 @end ifinfo
 
@@ -82,17 +82,18 @@ The first step is to define the function
 function y = f (x)
   y = x .* sin (1 ./ x) .* sqrt (abs (1 - x));
 endfunction
 @end group
 @end example
 
 Note the use of the `dot' forms of the operators.  This is not necessary
 for the call to @code{quad}, but it makes it much easier to generate a
-set of points for plotting.
+set of points for plotting (because it makes it possible to call the
+function with a vector argument to produce a vector result).
 
 Then we simply call quad:
 
 @example
 @group
 [v, ier, nfun, err] = quad ("f", 0, 3)
 
      @result{} 1.9819
@@ -101,21 +102,63 @@ Then we simply call quad:
 
      @result{} 5061
 
      @result{} 1.1522e-07
 @end group
 @end example
 
 Although @code{quad} returns a nonzero value for @var{ier}, the result
-is reasonably accurate (to understand what is happening, examine what
-happens to the result if you move the lower bound to 0.1, then 0.01,
-then 0.001, etc.).
+is reasonably accurate (to see why, examine what happens to the result
+if you move the lower bound to 0.1, then 0.01, then 0.001, etc.).
 
 @node Orthogonal Collocation,  , Functions of One Variable, Quadrature
 @section Orthogonal Collocation
 
 @deftypefn {Loadable Function} {[@var{r}, @var{A}, @var{B}, @var{q}] =} colloc (@var{n}, "left", "right")
 Compute derivative and integral weight matrices for orthogonal
 collocation using the subroutines given in J. Villadsen and
 M. L. Michelsen, @cite{Solution of Differential Equation Models by
 Polynomial Approximation}.
 @end deftypefn
+
+Here is an example of using @code{colloc} to generate weight matrices
+for solving the second order differential equation
+@iftex
+@tex
+$u^\prime - \alpha u^{\prime\prime} = 0$ with the boundary conditions
+$u(0) = 0$ and $u(1) = 1$.
+@end tex
+@end iftex
+@ifinfo
+@var{u}' - @var{alpha} * @var{u}'' = 0 with the boundary conditions
+@var{u}(0) = 0 and @var{u}(1) = 1.
+@end ifinfo
+
+First, we can generate the weight matrices for @var{n} points (including
+the endpoints of the interval), and incorporate the boundary conditions
+in the right hand side (for a specific value of
+@iftex
+@tex
+$\alpha$).
+@end tex
+@end iftex
+@ifinfo
+@var{alpha}).
+@end ifinfo
+
+@example
+@group
+n = 7;
+alpha = 0.1;
+[r, a, b] = colloc (n-2, "left", "right");
+at = a(2:n-1,2:n-1);
+bt = b(2:n-1,2:n-1);
+rhs = alpha * b(2:n-1,n) - a(2:n-1,n);
+@end group
+@end example
+
+Then the solution at the roots @var{r} is
+
+@example
+u = [ 0; (at - alpha * bt) \ rhs; 1]
+     @result{} [ 0.00; 0.004; 0.01 0.00; 0.12; 0.62; 1.00 ]
+@end example
diff --git a/doc/interpreter/set.texi b/doc/interpreter/set.texi
--- a/doc/interpreter/set.texi
+++ b/doc/interpreter/set.texi
@@ -9,50 +9,50 @@ Octave has a limited set of functions fo
 set is defined as a collection unique elements.
 
 @deftypefn {Function File} {} create_set (@var{x})
 Given a matrix or vector of values, the function @code{create_set}
 returns a row vector containing unique values, sorted in ascending
 order.  For example,
 
 @example
+@group
 create_set ([ 1, 2; 3, 4; 4, 2 ])
-@end example
-
-@noindent
-returns the vector
-
-@example
-[ 1, 2, 3, 4 ]
+     @result{} [ 1, 2, 3, 4 ]
+@end group
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} union (@var{x}, @var{y})
 Return the set of elements that are in either of the sets @var{x} and
 @var{y}.  For example,
 
 @example
+@group
 union ([ 1, 2, 3 ], [ 2, 3, 5 ])
-@end example
-
-@noindent
-returns the vector
-
-@example
-[ 1, 2, 5 ]
+     @result{} [ 1, 2, 5 ]
+@end group
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} intersection (@var{x}, @var{y})
 Return the set of elements that are in both sets @var{x} and @var{y}.
+For example,
+
+@example
+@group
+intersection ([ 1, 2, 3 ], [ 2, 3, 5 ])
+     @result{} [ 2, 3 ]
+@end group
+@end example
 @end deftypefn
 
 @deftypefn {Function File} {} complement (@var{x}, @var{y})
 Returns the elements of set @var{y} that are not in set @var{x}.  For
 example,
 
 @example
+@group
 complement ([ 1, 2, 3 ], [ 2, 3, 5 ])
+     @result{} 5
+@end group
 @end example
-
-@noindent
-returns the value @samp{5}.
 @end deftypefn
diff --git a/doc/interpreter/signal.texi b/doc/interpreter/signal.texi
--- a/doc/interpreter/signal.texi
+++ b/doc/interpreter/signal.texi
@@ -2,42 +2,42 @@
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @node Signal Processing, Image Processing, Control Theory, Top
 @chapter Signal Processing
 
 I hope that someday Octave will include more signal processing
 functions.  If you would like to help improve Octave in this area,
-please contact @code{bug-octave@@bevo.che.wisc.edu}.
+please contact @email{bug-octave@@bevo.che.wisc.edu}.
 
 @deftypefn {Function File} {} detrend (@var{x}, @var{p})
 If @var{x} is a vector, @code{detrend (@var{x}, @var{p})} removes the
 best fit of a polynomial of order @var{p} from the data @var{x}.
 
 If @var{x} is a matrix, @code{detrend (@var{x}, @var{p})} does the same
 for each column in @var{x}.
 
 The second argument is optional.  If it is not specified, a value of 1
 is assumed.  This corresponds to removing a linear trend.
 @end deftypefn
 
 @deftypefn {Function} {} fft (@var{a}, @var{n})
-Compute the FFT of @var{a} using subroutines from FFTPACK.  If @var{a}
+Compute the FFT of @var{a} using subroutines from @sc{Fftpack}.  If @var{a}
 is a matrix, @code{fft} computes the FFT for each column of @var{a}.
 
 If called with two arguments, @var{n} is expected to be an integer
 specifying the number of elements of @var{a} to use.  If @var{a} is a
 matrix, @var{n} specifies the number of rows of @var{a} to use.  If
 @var{n} is larger than the size of @var{a}, @var{a} is resized and
 padded with zeros.
 @end deftypefn
 
 @deftypefn {Loadable Function} {} ifft (@var{a}, @var{n})
-Compute the inverse FFT of @var{a} using subroutines from FFTPACK.  If
+Compute the inverse FFT of @var{a} using subroutines from @sc{Fftpack}.  If
 @var{a} is a matrix, @code{fft} computes the inverse FFT for each column
 of @var{a}.
 
 If called with two arguments, @var{n} is expected to be an integer
 specifying the number of elements of @var{a} to use.  If @var{a} is a
 matrix, @var{n} specifies the number of rows of @var{a} to use.  If
 @var{n} is larger than the size of @var{a}, @var{a} is resized and
 padded with zeros.
@@ -141,17 +141,18 @@ where
 @end iftex
 
 In terms of the z-transform, y is the result of passing the discrete-
 time signal x through a system characterized by the following rational
 system function:
 @iftex
 @tex
 $$
-H(z) = {\sum_{k=0}^M d_{k+1} z^{-k} \over 1 + \sum_{k+1}^N c_{k+1} z^{-k}}
+H(z) = {\displaystyle\sum_{k=0}^M d_{k+1} z^{-k}
+        \over 1 + \displaystyle\sum_{k+1}^N c_{k+1} z^{-k}}
 $$
 @end tex
 @end iftex
 @ifinfo
 
 @example
              M
             SUM d(k+1) z^(-k)
@@ -206,17 +207,17 @@ If @var{n} is omitted, a value of 512 is
 If @var{a} is omitted, the denominator is assumed to be 1 (this
 corresponds to a simple FIR filter).
 
 For fastest computation, @var{n} should factor into a small number of
 small primes.
 @end deftypefn
 
 @deftypefn {Function File} {} sinc (@var{x})
-Returns
+Return
 @iftex
 @tex
 $ \sin (\pi x)/(\pi x)$.
 @end tex
 @end iftex
 @ifinfo
  sin(pi*x)/(pi*x).
 @end ifinfo
diff --git a/doc/interpreter/special.texi b/doc/interpreter/special.texi
--- a/doc/interpreter/special.texi
+++ b/doc/interpreter/special.texi
@@ -19,17 +19,17 @@ purpose than to try to use other tricks 
 
 @deftypefn {Built-in Function} {} eye (@var{x})
 @deftypefnx {Built-in Function} {} eye (@var{n}, @var{m})
 Returns an identity matrix.  If invoked with a single scalar argument,
 @code{eye} returns a square matrix with the dimension specified.  If you
 supply two scalar arguments, @code{eye} takes them to be the number of
 rows and columns.  If given a vector with two elements, @code{eye} uses
 the values of the elements as the number of rows and columns,
-respecively.  For example,
+respectively.  For example,
 
 @example
 @group
 eye (3)
 
      @result{}  1  0  0
          0  1  0
          0  0  1
diff --git a/doc/interpreter/stats.texi b/doc/interpreter/stats.texi
--- a/doc/interpreter/stats.texi
+++ b/doc/interpreter/stats.texi
@@ -2,17 +2,17 @@
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @node Statistics, Sets, Optimization, Top
 @chapter Statistics
 
 I hope that someday Octave will include more statistics functions.  If
 you would like to help improve Octave in this area, please contact
-@code{bug-octave@@bevo.che.wisc.edu}.
+@email{bug-octave@@bevo.che.wisc.edu}.
 
 @deftypefn {Function File} {} mean (@var{x})
 If @var{x} is a vector, compute the mean of the elements of @var{x}
 @iftex
 @tex
 $$ {\rm mean}(x) = \bar{x} = {1\over N} \sum_{i=1}^N x_i $$
 @end tex
 @end iftex
diff --git a/doc/interpreter/stmt.texi b/doc/interpreter/stmt.texi
--- a/doc/interpreter/stmt.texi
+++ b/doc/interpreter/stmt.texi
@@ -122,17 +122,17 @@ endif
 @end example
 
 @noindent
 Any number of @code{elseif} clauses may appear.  Each condition is
 tested in turn, and if one is found to be true, its corresponding
 @var{body} is executed.  If none of the conditions are true and the
 @code{else} clause is present, its body is executed.  Only one
 @code{else} clause may appear, and it must be the last part of the
-satement.
+statement.
 
 In the following example, if the first condition is true (that is, the
 value of @code{x} is divisible by 2), then the first @code{printf}
 statement is executed.  If it is false, then the second condition is
 tested, and if it is true (that is, the value of @code{x} is divisible
 by 3), then the second @code{printf} statement is executed.  Otherwise,
 the third @code{printf} statement is performed.
 
@@ -288,18 +288,18 @@ controls how long the loop keeps running
 
 The first thing the @code{while} statement does is test @var{condition}.
 If @var{condition} is true, it executes the statement @var{body}.  After
 @var{body} has been executed, @var{condition} is tested again, and if it
 is still true, @var{body} is executed again.  This process repeats until
 @var{condition} is no longer true.  If @var{condition} is initially
 false, the body of the loop is never executed.
 
-This example creates a variable @code{fib} that contains the elements of
-the Fibonacci sequence.
+This example creates a variable @code{fib} that contains the first ten
+elements of the Fibonacci sequence.
 
 @example
 @group
 fib = ones (1, 10);
 i = 3;
 while (i <= 10)
   fib (i) = fib (i-1) + fib (i-2);
   i++;
@@ -366,17 +366,17 @@ the first ten elements of the Fibonacci 
 fib = ones (1, 10);
 for i = 3:10
   fib (i) = fib (i-1) + fib (i-2);
 endfor
 @end group
 @end example
 
 @noindent
-This code works by first evaluating the expression @samp{3:10}, to
+This code works by first evaluating the expression @code{3:10}, to
 produce a range of values from 3 to 10 inclusive.  Then the variable
 @code{i} is assigned the first element of the range and the body of the
 loop is executed once.  When the end of the loop body is reached, the
 next value in the range is assigned to the variable @code{i}, and the
 loop body is executed again.  This process continues until there are no
 more elements to assign.
 
 Although it is possible to rewrite all @code{for} loops as @code{while}
diff --git a/doc/interpreter/strings.texi b/doc/interpreter/strings.texi
--- a/doc/interpreter/strings.texi
+++ b/doc/interpreter/strings.texi
@@ -37,25 +37,26 @@ sequences beginning with a backslash (@s
 
 One use of an escape sequence is to include a double-quote
 (single-quote) character in a string constant that has been defined
 using double-quote (single-quote) marks.  Since a plain double-quote
 would end the string, you must use @samp{\"} to represent a single
 double-quote character as a part of the string.  The backslash character
 itself is another character that cannot be included normally.  You must
 write @samp{\\} to put one backslash in the string.  Thus, the string
-whose contents are the two characters @samp{"\} must be written
-@code{"\"\\"}.
+whose contents are the two characters @samp{"\} may be written
+@code{"\"\\"} or @code{'"\\'}.  Similarly, the string whose contents are
+the two characters @samp{'\} may be written @code{'\'\\'} or @code{"'\\"}.
 
 Another use of backslash is to represent unprintable characters
 such as newline.  While there is nothing to stop you from writing most
 of these characters directly in a string constant, they may look ugly.
 
 Here is a table of all the escape sequences used in Octave.  They are
-the same as those used in the C programming langauge.
+the same as those used in the C programming language.
 
 @table @code
 @item \\
 Represents a literal backslash, @samp{\}.
 
 @item \"
 Represents a literal double-quote character, @samp{"}.
 
@@ -103,18 +104,18 @@ Represents a vertical tab, control-k, AS
 Strings may be concatenated using the notation for defining matrices.
 For example, the expression
 
 @example
 [ "foo" , "bar" , "baz" ]
 @end example
 
 @noindent
-produces the string whose contents are @samp{foobarbaz}.  The next
-section explains more about how to create matrices.
+produces the string whose contents are @samp{foobarbaz}.  @xref{Numeric
+Data Types} for more information about creating matrices.
 
 @menu
 * Creating Strings::            
 * Searching and Replacing::     
 * String Conversions::          
 * Character Class Functions::   
 @end menu
 
@@ -141,137 +142,149 @@ character.  For example,
 @group
 setstr ([97, 98, 99])
      @result{} "abc"
 @end group
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} strcat (@var{s1}, @var{s2}, @dots{})
-Return a string containing all the arguments contatenated.  For example,
+Return a string containing all the arguments concatenated.  For example,
 
 @example
 @group
 s = [ "ab"; "cde" ]
 strcat (s, s, s)
 
-     @result{}  ab ab ab
-         cdecdecde
+     @result{}  "ab ab ab "
+         "cdecdecde"
 @end group
 @end example
 @end deftypefn
 
 @defvr {Built-in Variable} string_fill_char
+The value of this variable is used to pad all strings in a string matrix
+to the same length.  It should be a single character.  The default value
+is @code{" "} (a single space).  For example,
+
+@example
+@group
+string_fill_char = "X";
+[ "these"; "are"; "strings" ]
+     @result{} "theseXX"
+     @result{} "areXXXX"
+     @result{} "strings"
+@end group
+@end example
 @end defvr
 
 @deftypefn {Function File} {} str2mat (@var{s_1}, @dots{}, @var{s_n})
 Returns a matrix containing the strings @var{s_1}, @dots{}, @var{s_n} as
 its rows.  Each string is padded with blanks in order to form a valid
 matrix.
 
-@quotation
 @strong{Note:}
 This function is modelled after @sc{MATLAB}.  In Octave, you can create
-a matrix of strings by @kbd{[@var{s_1}; @dots{}; @var{s_n}]}.
-@end quotation
+a matrix of strings by @code{[@var{s_1}; @dots{}; @var{s_n}]} even if
+the strings are not all the same length.
 @end deftypefn
 
 @deftypefn {Built-in Function} {} isstr (@var{a})
 Return 1 if @var{a} is a string.  Otherwise, return 0.
 @end deftypefn
 
 @node Searching and Replacing, String Conversions, Creating Strings, Strings
 @section Searching and Replacing
 
 @deftypefn {Function File} {} deblank (@var{s})
 Removes the trailing blanks from the string @var{s}. 
 @end deftypefn
 
 @deftypefn {Function File} {} findstr (@var{s}, @var{t}, @var{overlap})
 Returns the vector of all positions in the longer of the two strings
-@var{s} and @var{t} where an occurence of the shorter of the two starts.
+@var{s} and @var{t} where an occurrence of the shorter of the two starts.
 If the optional argument @var{overlap} is nonzero, the returned vector
 can include overlapping positions (this is the default).  For example,
 
 @example
 findstr ("ababab", "a")
-     @result{} [1  3  5]
+     @result{} [ 1, 3, 5 ]
 findstr ("abababa", "aba", 0)
-     @result{} [1, 5]
+     @result{} [ 1, 5 ]
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} index (@var{s}, @var{t})
-Returns the position of the first occurence of the string @var{t} in the
-string @var{s}, or 0 if no occurence is found.  For example,
+Returns the position of the first occurrence of the string @var{t} in the
+string @var{s}, or 0 if no occurrence is found.  For example,
 
 @example
 index ("Teststring", "t")
      @result{} 4
 @end example
 
 @strong{Note:}  This function does not work for arrays of strings.
 @end deftypefn
 
 @deftypefn {Function File} {} rindex (@var{s}, @var{t})
-Returns the position of the last occurence of the string @var{t} in the
-string @var{s}, or 0 if no occurence is found.  For example,
+Returns the position of the last occurrence of the string @var{t} in the
+string @var{s}, or 0 if no occurrence is found.  For example,
 
 @example
 rindex ("Teststring", "t")
      @result{} 6
 @end example
 
 @strong{Note:}  This function does not work for arrays of strings.
 @end deftypefn
 
 @deftypefn {Function File} {} split (@var{s}, @var{t})
 Divides the string @var{s} into pieces separated by @var{t}, returning
 the result in a string array (padded with blanks to form a valid
 matrix).  For example,
 
 @example
 split ("Test string", "t")
-     @result{} Tes 
-         s  
-        ring
+     @result{} "Tes "
+        " s  "
+        "ring"
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} strcmp (@var{s1}, @var{s2})
 Compares two strings, returning 1 if they are the same, and 0 otherwise.
 
-@strong{Note: For compatibility with @sc{Matlab}, Octave's strcmp
+@strong{Note:}  For compatibility with @sc{Matlab}, Octave's strcmp
 function returns 1 if the strings are equal, and 0 otherwise.  This is
-just the opposite of the corresponding C library function.}
+just the opposite of the corresponding C library function.
 @end deftypefn
 
 @deftypefn {Function File} {} strrep (@var{s}, @var{x}, @var{y})
-Replaces all occurences of the substring @var{x} of the string @var{s}
+Replaces all occurrences of the substring @var{x} of the string @var{s}
 with the string @var{y}.  For example,
 
 @example
 strrep ("This is a test string", "is", "&%$")
-     @result{} Th&%$ &%$ a test string
+     @result{} "Th&%$ &%$ a test string"
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} substr (@var{s}, @var{beg}, @var{len})
 Returns the substring of @var{s} which starts at character number
 @var{beg} and is @var{len} characters long.  For example,
 
 @example
 substr ("This is a test string", 6, 9)
-     @result{} is a test
+     @result{} "is a test"
 @end example
 
 @quotation
 @strong{Note:}
 This function is patterned after AWK.  You can get the same result by
-@kbd{@var{s} (@var{beg} : (@var{beg} + @var{len} - 1))}.  
+@code{@var{s} (@var{beg} : (@var{beg} + @var{len} - 1))}.  
 @end quotation
 @end deftypefn
 
 @node String Conversions, Character Class Functions, Searching and Replacing, Strings
 @section String Conversions
 
 @deftypefn {Function File} {} bin2dec (@var{s})
 Given a binary number represented as a string of zeros and ones,
@@ -386,20 +399,28 @@ If the value of @code{implicit_str_to_nu
 conversions of strings to their numeric ASCII equivalents are allowed.
 Otherwise, an error message is printed and control is returned to the
 top level.  The default value is 0.
 @end defvr
 
 @node Character Class Functions,  , String Conversions, Strings
 @section Character Class Functions
 
-Octave also provides the following C-type character class test
-functions.  They all operate on string arrays and return matrices of
-zeros and ones.  Elements that are nonzero indicate that the condition
-was true for the corresponding character in the string array.
+Octave also provides the following character class test functions
+patterned after the functions in the standard C library.  They all
+operate on string arrays and return matrices of zeros and ones.
+Elements that are nonzero indicate that the condition was true for the
+corresponding character in the string array.  For example,
+
+@example
+@group
+isalpha ("!Q@@WERT^Y&")
+     @result{} [ 0, 1, 0, 1, 1, 1, 1, 0, 1, 0 ]
+@end group
+@end example
 
 @deftypefn {Mapping Function} {} isalnum (@var{s})
 Returns true for characters that are letters or digits (@code{isalpha
 (@var{a})} or @code{isdigit (@var{})} is true).
 @end deftypefn
 
 @deftypefn {Mapping Function} {} isalpha (@var{s})
 Returns true for characters that are letters (@code{isupper (@var{a})}
diff --git a/doc/interpreter/system.texi b/doc/interpreter/system.texi
--- a/doc/interpreter/system.texi
+++ b/doc/interpreter/system.texi
@@ -69,55 +69,124 @@ Time zone.
 
 @noindent
 In the descriptions of the following functions, this structure is
 referred to as a @var{tm_struct}.
 
 @deftypefn {Loadable Function} {} time ()
 Return the current time as the number of seconds since the epoch.  The
 epoch is referenced to 00:00:00 CUT (Coordinated Universal Time) 1 Jan
-1970.
+1970.  For example, on Monday February 17, 1997 at 07:15:06 CUT, the
+value returned by @code{time} was 856163706.
 @end deftypefn
 
 @deftypefn {Function File} {} ctime (@var{t})
 Convert a value returned from @code{time} (or any other nonnegative
 integer), to the local time and return a string of the same form as
 @code{asctime}.  The function @code{ctime (time)} is equivalent to
-@code{asctime (localtime (time))}.
+@code{asctime (localtime (time))}.  For example,
+
+@example
+@group
+ctime (time ())
+     @result{} "Mon Feb 17 01:15:06 1997"
+@end group
+@end example
 @end deftypefn
 
 @deftypefn {Loadable Function} {} gmtime (@var{t})
 Given a value returned from time (or any nonnegative integer),
-return a time structure corresponding to CUT.
+return a time structure corresponding to CUT.  For example,
+
+@example
+@group
+gmtime (time ())
+     @result{} @{
+           usec = 0
+           year = 97
+           mon = 1
+           mday = 17
+           sec = 6
+           zone = CST
+           min = 15
+           wday = 1
+           hour = 7
+           isdst = 0
+           yday = 47
+         @}
+@end group
+@end example
 @end deftypefn
 
 @deftypefn {Loadable Function} {} localtime (@var{t})
 Given a value returned from time (or any nonnegative integer),
 return a time structure corresponding to the local time zone.
+
+@example
+@group
+locatltime (time ())
+     @result{} @{
+           usec = 0
+           year = 97
+           mon = 1
+           mday = 17
+           sec = 6
+           zone = CST
+           min = 15
+           wday = 1
+           hour = 1
+           isdst = 0
+           yday = 47
+         @}
+@end group
+@end example
 @end deftypefn
 
 @deftypefn {Loadable Function} {} mktime (@var{tm_struct})
-Convert a time structure to the number of seconds since the epoch.
+Convert a time structure to the number of seconds since the epoch.  For
+example,
+
+@example
+@group
+mktime (localtime (time ())
+     @result{} 856163706
+@end group
+@end example
 @end deftypefn
 
 @deftypefn {Function File} {} asctime (@var{tm_struct})
 Convert a time structure to a string using the following five-field
-format: Thu Mar 28 08:40:14 1996.  The function @code{ctime (time)} is
-equivalent to @code{asctime (localtime (time))}.
+format: Thu Mar 28 08:40:14 1996.  For example,
+
+@example
+@group
+asctime (localtime (time ())
+     @result{} "Mon Feb 17 01:15:06 1997\n"
+@end group
+@end example
+
+This is equivalent to @code{ctime (time ())}.
 @end deftypefn
 
 @deftypefn {Loadable Function} {} strftime (@var{tm_struct})
 Format a time structure in a flexible way using @samp{%} substitutions
 similar to those in @code{printf}.  Except where noted, substituted
 fields have a fixed size; numeric fields are padded if necessary.
 Padding is with zeros by default; for fields that display a single
 number, padding can be changed or inhibited by following the @samp{%}
 with one of the modifiers described below.  Unknown field specifiers are
 copied as normal characters.  All other characters are copied to the
-output without change.
+output without change.  For example,
+
+@example
+@group
+strftime ("%r (%Z) %A %e %B %Y", localtime (time ())
+     @result{} "01:15:06 AM (CST) Monday 17 February 1997"
+@end group
+@end example
 
 Octave's @code{strftime} function supports a superset of the ANSI C
 field specifiers.
 
 @noindent
 Literal character fields:
 
 @table @code
@@ -251,33 +320,35 @@ patterned after the standard C library. 
 compatiblity with @sc{Matlab} and others are provided because they are
 useful.
 
 @deftypefn {Function File} {} clock ()
 Return a vector containing the current year, month (1-12), day (1-31),
 hour (0-23), minute (0-59) and second (0-61).  For example,
 
 @example
-octave:13> clock
-ans =
-
-  1993     8    20     4    56     1
+@group
+clock ()
+     @result{} [ 1993, 8, 20, 4, 56, 1 ]
+@end group
 @end example
 
 The function clock is more accurate on systems that have the
 @code{gettimeofday} function.
 @end deftypefn
 
 @deftypefn {Function File} {} date ()
 Returns the date as a character string in the form DD-MMM-YY.  For
 example,
 
 @example
-octave:13> date
-ans = 20-Aug-93
+@group
+date ()
+     @result{} "20-Aug-93"
+@end group
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} etime (@var{t1}, @var{t2})
 Return the difference (in seconds) between two time values returned from
 @code{clock}.  For example:
 
 @example
@@ -304,18 +375,20 @@ CPU time used is nonzero.
 @end deftypefn
 
 @deftypefn {Function File} {} is_leap_year (@var{year})
 Return 1 if the given year is a leap year and 0 otherwise.  If no
 arguments are provided, @code{is_leap_year} will use the current year.
 For example,
 
 @example
-octave:13> is_leap_year (2000)
-ans = 1
+@group
+is_leap_year (2000)
+     @result{} 1
+@end group
 @end example
 @end deftypefn
 
 @deftypefn {Function File} {} tic ()
 @deftypefnx {Function File} {} toc ()
 These functions set and check a wall-clock timer.  For example,
 
 @example
@@ -360,21 +433,24 @@ screen.
 fprintf (stderr, "wait please...\n");
 pause (5);
 clc;
 @end group
 @end example
 @end deftypefn
 
 @deftypefn {Built-in Function} {} sleep (@var{seconds})
-Suspend the execution of the program.
+Suspend the execution of the program for the given number of seconds.
 @end deftypefn
 
 @deftypefn {Built-in Function} {} usleep (@var{microseconds})
-Suspend the execution of the program.
+Suspend the execution of the program for the given number of
+microseconds.  On systems where it is not possible to sleep for periods
+of time less than one second, @code{usleep} will pause the execution for
+@code{round (@var{microseconds} / 1e6)} seconds.
 @end deftypefn
 
 @node Filesystem Utilities, Controlling Subprocesses, Timing Utilities, System Utilities
 @section Filesystem Utilities
 
 Octave includes the following functions for renaming and deleting files,
 creating, deleting, and reading directories, and for getting information
 about the status of files.
@@ -431,18 +507,18 @@ system-dependent error message.
 @c XXX FIXME XXX -- this needs to be explained, but I don't feel up to
 @c it just now...
 
 @deftypefn {Built-in Function} {} umask (@var{mask})
 Set the permission mask for file creation.  The parameter @var{mask} is
 interpreted as an octal number.
 @end deftypefn
 
-@deftypefn {Built-in Function} {[info, err, msg] =} stat (@var{file})
-@deftypefnx {Built-in Function} {[info, err, msg] =} lstat (@var{file})
+@deftypefn {Built-in Function} {[@var{info}, @var{err}, @var{msg}] =} stat (@var{file})
+@deftypefnx {Built-in Function} {[@var{info}, @var{err}, @var{msg}] =} lstat (@var{file})
 Return a structure @var{s} containing the following information about
 @var{file}.
 
 @table @code
 @item dev
 ID of device containing a directory entry for this file.
 
 @item ino
@@ -483,17 +559,17 @@ Time of last file status change in the s
 Size of blocks in the file.
 
 @item blocks
 Number of blocks allocated for file.
 @end table
 
 If the call is successful @var{err} is 0 and @var{msg} is an empty
 string.  If the file does not exist, or some other error occurs, @var{s}
-is an empty matrix, @var{err} is -1, and @var{msg} contains the
+is an empty matrix, @var{err} is @minus{}1, and @var{msg} contains the
 corresponding system error message.
 
 If @var{file} is a symbolic link, @code{stat} will return information
 about the actual file the is referenced by the link.  Use @code{lstat}
 if you want information about the symbolic link itself.
 
 For example,
 
@@ -525,42 +601,74 @@ For example,
 @end group
 @end example
 @end deftypefn
 
 @deftypefn {Built-in Function} {} glob (@var{pattern})
 Given an array of strings in @var{pattern}, return the list of file
 names that any of them, or an empty string if no patterns match.  Tilde
 expansion is performed on each of the patterns before looking for
-matching file names.
+matching file names.  For example,
+
+@example
+@group
+glob ("/vm*")
+     @result{} "/vmlinuz"
+@end group
+@end example
+
+Note that multiple values are returned in a string matrix with the fill
+character set to ASCII NUL.
 @end deftypefn
 
 @deftypefn {Built-in Function} {} fnmatch (@var{pattern}, @var{string})
 Return 1 or zero for each element of @var{string} that matches any of
 the elements of the string array @var{pattern}, using the rules of
-filename pattern matching.
+filename pattern matching.  For example,
+
+@example
+@group
+fnmatch ("a*b", ["ab"; "axyzb"; "xyzab"])
+     @result{} [ 1; 1; 0 ]
+@end group
+@end example
 @end deftypefn
 
 @deftypefn {Built-in Function} {} file_in_path (@var{path}, @var{file})
 Return the absolute name name of @var{file} if it can be found in
 @var{path}.  The value of @var{path} should be a colon-separated list of
 directories in the format described for the built-in variable
 @code{LOADPATH}.
 
 If the file cannot be found in the path, an empty matrix is returned.
 For example,
 
 @example
-octave:13> file_in_path (LOADPATH, "nargchk.m")
-ans = "@value{OCTAVEHOME}/share/octave/2.0/m/general/nargchk.m"
+file_in_path (LOADPATH, "nargchk.m")
+     @result{} "@value{OCTAVEHOME}/share/octave/2.0/m/general/nargchk.m"
 @end example
 @end deftypefn
 
 @deftypefn {Built-in Function} {} tilde_expand (@var{string})
-Performs tilde expansion on @var{string}.
+Performs tilde expansion on @var{string}.  If @var{string} begins with a
+tilde character, (@samp{~}), all of the characters preceding the first
+slash (or all characters, if there is no slash) are treated as a
+possible user name, and the tilde and the following characters up to the
+slash are replaced by the home directory of the named user.  If the
+tilde is followed immediately by a slash, the tilde is replaced by the
+home directory of the user running Octave.  For example,
+
+@example
+@group
+tilde_expand ("~joeuser/bin")
+     @result{} "/home/joeuser/bin"
+tilde_expand ("~/bin")
+     @result{} "/home/jwe/bin"
+@end group
+@end example
 @end deftypefn
 
 @node Controlling Subprocesses, Process ID Information, Filesystem Utilities, System Utilities
 @section Controlling Subprocesses
 
 Octave includes some high-level commands like @code{system} and
 @code{popen} for starting subprocesses.  If you want to run another
 program to perform some task and then look at its output, you will
@@ -569,17 +677,17 @@ probably want to use these functions.
 Octave also provides several very low-level Unix-like functions which
 can also be used for starting subprocesses, but you should probably only
 use them if you can't find any way to do what you need with the
 higher-level functions.
 
 @deftypefn {Built-in Function} {} system (@var{string}, @var{return_output}, @var{type})
 Execute a shell command specified by @var{string}.  The second argument is optional.
 If @var{type} is @code{"async"}, the process is started in the
-background and the process id of the child proces is returned
+background and the process id of the child process is returned
 immediately.  Otherwise, the process is started, and Octave waits until
 it exits.  If @var{type} argument is omitted, a value of @code{"sync"}
 is assumed.
 
 If two input arguments are given (the actual value of
 @var{return_output} is irrelevant) and the subprocess is started
 synchronously, or if @var{system} is called with one input argument and
 one or more output arguments, the output from the command is returned.
@@ -607,40 +715,93 @@ and the second is the output status of t
 @end example
 
 @noindent
 will set the variable @code{output} to the string @samp{foo}, and the
 variable @code{status} to the integer @samp{2}.
 @end deftypefn
 
 @deftypefn {Built-in Function} {fid =} popen (@var{command}, @var{mode})
-Open a pipe to a subprocess.
+Start a process and create a pipe.  The name of the command to run is
+given by @var{command}.  The file identifier corresponding to the input
+or output stream of the process is returned in @var{fid}.  The argument
+@var{mode} may be
+
+@table @code
+@item "r"
+The pipe will be connected to the standard output of the process, and
+open for reading.
+
+@item "w"
+The pipe will be connected to the standard input of the process, and
+open for writing.
+@end table
+
+For example,
+
+@example
+@group
+fid = popen ("ls -ltr / | tail -3", "r");
+while (isstr (s = fgets (fid)))
+  fputs (stdout, s);
+endwhile
+     @print{} drwxr-xr-x  33 root  root  3072 Feb 15 13:28 etc
+     @print{} drwxr-xr-x   3 root  root  1024 Feb 15 13:28 lib
+     @print{} drwxrwxrwt  15 root  root  2048 Feb 17 14:53 tmp
+@end group
+@end example
 @end deftypefn
 
 @deftypefn {Built-in Function} {} pclose (@var{fid})
-Close a pipe from a subprocess.
+Close a file identifier that was opened by @code{popen}.  You may also
+use @code{fclose} for the same purpose.
 @end deftypefn
 
 @deftypefn {Built-in Function} {[@var{in}, @var{out}, @var{pid}] =} popen2 (@var{command}, @var{args})
-Start a subprocess with 2-way communication.
+Start a subprocess with two-way communication.  The name of the process
+is given by @var{command}, and @var{args} is an array of strings
+containing options for the command.  The file identifiers for the input
+and output streams of the subprocess are returned in @var{in} and
+@var{out}.  If execution of the command is successful, @var{pid}
+contains the process ID of the subprocess.  Otherwise, @var{pid} is
+@minus{}1.
+
+For example,
+
+@example
+@group
+[in, out, pid] = popen2 ("sort", "-nr");
+fputs (in, "these\nare\nsome\nstrings\n");
+fclose (in);
+while (isstr (s = fgets (out)))
+  fputs (stdout, s);
+endwhile
+fclose (out);
+     @print{} are
+     @print{} some
+     @print{} strings
+     @print{} these
+@end group
+@end example
 @end deftypefn
 
 @defvr {Built-in Variable} EXEC_PATH
 The variable @code{EXEC_PATH} is a colon separated list of directories
 to search when executing subprograms.  Its initial value is taken from
 the environment variable @code{OCTAVE_EXEC_PATH} (if it exists) or
 @code{PATH}, but that value can be overridden by the the command line
 argument @code{--exec-path PATH}, or by setting the value of
 @code{EXEC_PATH} in a startup script.  If the value of @code{EXEC_PATH}
 begins (ends) with a colon, the directories
 
 @example
+@group
 OCTAVE_HOME/libexec/octave/site/exec/ARCH
 OCTAVE_HOME/libexec/octave/VERSION/exec/ARCH
-OCTAVE_HOME/bin
+@end group
 @end example
 
 @noindent
 are prepended (appended) to @code{EXEC_PATH}, where @code{OCTAVE_HOME}
 is the top-level directory where all of Octave is installed
 (@file{/usr/local} by default).  If you don't specify a value for
 @code{EXEC_PATH} explicitly, these special directories are prepended to
 your shell path.
@@ -704,17 +865,17 @@ If successful, @var{fid} is greater than
 ID.  Otherwise, @var{fid} is negative and @var{msg} contains a
 system-dependent error message.
 @end deftypefn
 
 @deftypefn {Built-in Function} {[@var{pid}, @var{msg}] =} waitpid (@var{pid}, @var{options})
 Wait for process @var{pid} to terminate.  The @var{pid} argument can be:
 
 @table @asis
-@item -1
+@item @minus{}1
 Wait for any child process.
 
 @item 0
 Wait for any child process whose process group ID is equal to that of
 the Octave interpreter process.
 
 @item > 0
 Wait for termination of the child process with ID @var{PID}.
@@ -823,17 +984,17 @@ Return the real user id of the current p
 Return the effective group id of the current process.
 @end deftypefn
 
 @deftypefn {Built-in Function} {} getgid ()
 Return the real group id of the current process.
 @end deftypefn
 
 @node Environment Variables, Current Working Directory, Process ID Information, System Utilities
-@section Environemnt Variables
+@section Environment Variables
 
 @deftypefn {Built-in Function} {} getenv (@var{var})
 Returns the value of the environment variable @var{var}.  For example,
 
 @example
 getenv ("PATH")
 @end example
 
@@ -872,20 +1033,20 @@ time the current working directory is ch
 command.
 @end defvr
 
 @deffn {Command} ls options
 @deffnx {Command} dir options
 List directory contents.  For example,
 
 @example
-octave:13> ls -l
-total 12
--rw-r--r--   1 jwe      users        4488 Aug 19 04:02 foo.m
--rw-r--r--   1 jwe      users        1315 Aug 17 23:14 bar.m
+ls -l
+     @print{} total 12
+     @print{} -rw-r--r--   1 jwe  users  4488 Aug 19 04:02 foo.m
+     @print{} -rw-r--r--   1 jwe  users  1315 Aug 17 23:14 bar.m
 @end example
 
 The @code{dir} and @code{ls} commands are implemented by calling your
 system's directory listing command, so the available options may vary
 from system to system.
 @end deffn
 
 @node Password Database Functions, Group Database Functions, Current Working Directory, System Utilities
@@ -912,29 +1073,32 @@ The GECOS field.
 
 @item dir
 The home directory.
 
 @item shell
 The initial shell.
 @end table
 
-@deftypefn {Loadable Function} {} getpwent ()
+In the descriptions of the following functions, this data structure is
+referred to as a @var{pw_struct}.
+
+@deftypefn {Loadable Function} {@var{pw_struct} = } getpwent ()
 Return a structure containing an entry from the password database,
 opening it if necessary. Once the end of the data has been reached,
 @code{getpwent} returns 0.
 @end deftypefn
 
-@deftypefn {Loadable Function} {} getpwuid (@var{uid}).
+@deftypefn {Loadable Function} {@var{pw_struct} = } getpwuid (@var{uid}).
 Return a structure containing the first entry from the password database
 with the user ID @var{uid}.  If the user ID does not exist in the
 database, @code{getpwuid} returns 0.
 @end deftypefn
 
-@deftypefn {Loadable Function} {} getpwnam (@var{name})
+@deftypefn {Loadable Function} {@var{pw_struct} = } getpwnam (@var{name})
 Return a structure containing the first entry from the password database
 with the user name @var{name}.  If the user name does not exist in the
 database, @code{getpwname} returns 0.
 @end deftypefn
 
 @deftypefn {Loadable Function} {} setpwent ()
 Return the internal pointer to the beginning of the password database.
 @end deftypefn
@@ -958,28 +1122,31 @@ The encrypted password, if available.
 
 @item gid
 The numeric group id.
 
 @item mem
 The members of the group.
 @end table
 
-@deftypefn {Loadable Function} {group_struct =} getgrent ()
+In the descriptions of the following functions, this data structure is
+referred to as a @var{grp_struct}.
+
+@deftypefn {Loadable Function} {grp_struct =} getgrent ()
 Return an entry from the group database, opening it if necessary.
 Once the end of the data has been reached, @code{getgrent} returns 0.
 @end deftypefn
 
-@deftypefn {Loadable Function} {group_struct =} getgrgid (@var{gid}).
+@deftypefn {Loadable Function} {grp_struct =} getgrgid (@var{gid}).
 Return the first entry from the group database with the group ID
 @var{gid}.  If the group ID does not exist in the database,
 @code{getgrgid} returns 0.
 @end deftypefn
 
-@deftypefn {Loadable Function} {group_struct =} getgrnam (@var{name})
+@deftypefn {Loadable Function} {grp_struct =} getgrnam (@var{name})
 Return the first entry from the group database with the group name
 @var{name}.  If the group name does not exist in the database,
 @code{getgrname} returns 0.
 @end deftypefn
 
 @deftypefn {Loadable Function} {} setgrent ()
 Return the internal pointer to the beginning of the group database.
 @end deftypefn
@@ -987,22 +1154,29 @@ Return the internal pointer to the begin
 @deftypefn {Loadable Function} {} endgrent ()
 Close the group database.
 @end deftypefn
 
 @node System Information,  , Group Database Functions, System Utilities
 @section System Information
 
 @deftypefn {Built-in Function} {} computer ()
-Returns a string of the form @var{cpu}-@var{vendor}-@var{os} that
-identifies the kind of computer Octave is running on.  For example,
+Print or return a string of the form @var{cpu}-@var{vendor}-@var{os}
+that identifies the kind of computer Octave is running on.  If invoked
+with an output argument, the value is returned instead of printed.  For
+example,
 
 @example
-octave:13> computer
-sparc-sun-sunos4.1.2
+@group
+computer ()
+     @print{} i586-pc-linux-gnu
+
+x = computer ()
+     @result{} x = "i586-pc-linux-gnu"
+@end group
 @end example
 @end deftypefn
 
 @deftypefn {Built-in Function} {} isieee ()
 Return 1 if your computer claims to conform to the IEEE standard for
 floating point calculations.
 @end deftypefn
 
diff --git a/doc/interpreter/tips.texi b/doc/interpreter/tips.texi
--- a/doc/interpreter/tips.texi
+++ b/doc/interpreter/tips.texi
@@ -30,32 +30,33 @@ intended for widespread use:
 @item
 Since all global variables share the same name space, and all functions
 share another name space, you should choose a short word to distinguish
 your program from other Octave programs.  Then take care to begin the
 names of all global variables, constants, and functions with the chosen
 prefix.  This helps avoid name conflicts.
 
 If you write a function that you think ought to be added to Octave under
-a certain name, such as @code{twiddle-matrix}, don't call it by that name
-in your program.  Call it @code{mylib-twiddle-matrix} in your program,
-and send mail to @samp{bug-octave@@bevo.che.wisc.edu} suggesting that it
+a certain name, such as @code{fiddle_matrix}, don't call it by that name
+in your program.  Call it @code{mylib_fiddle_matrix} in your program,
+and send mail to @email{bug-octave@@bevo.che.wisc.edu} suggesting that it
 be added to Octave.  If and when it is, the name can be changed easily
 enough.
 
 If one prefix is insufficient, your package may use two or three
 alternative common prefixes, so long as they make sense.
 
 Separate the prefix from the rest of the symbol name with an underscore
 @samp{_}.  This will be consistent with Octave itself and with most
 Octave programs.
 
 @item
 When you encounter an error condition, call the function @code{error}
-(or @code{usage}).  The function @code{error} does not return.
+(or @code{usage}).  The @code{error} and @code{usage} functions do not
+return.
 @xref{Errors}.
 
 @item
 Please put a copyright notice on the file if you give copies to anyone.
 Use the same lines that appear at the top of the function files
 distributed with Octave.  If you have not signed papers to assign the
 copyright to anyone else, then place your name in the copyright notice.
 @end itemize
@@ -106,16 +107,23 @@ endfor
 @item
 Avoid calling @code{eval} or @code{feval} whenever possible, because
 they require Octave to parse input or look up the name of a function in
 the symbol table.
 
 If you are using @code{eval} as an exception handling mechanism and not
 because you need to execute some arbitrary text, use the @code{try}
 statement instead.  @xref{The try Statement}.
+
+@item
+If you are calling lots of functions but none of them will need to
+change during your run, set the variable
+@code{ignore_function_time_stamp} to @code{"all"} so that Octave doesn't
+waste a lot of time checking to see if you have updated your function
+files.
 @end itemize
 
 @node Documentation Tips, Comment Tips, Coding Tips, Tips
 @section Tips for Documentation Strings
 
 Here are some tips for the writing of documentation strings.
 
 @itemize @bullet
diff --git a/doc/interpreter/var.texi b/doc/interpreter/var.texi
--- a/doc/interpreter/var.texi
+++ b/doc/interpreter/var.texi
@@ -82,25 +82,25 @@ global c = 3, d, e = 5
 
 It is necessary declare a variable as global within a function body in
 order to access it.  For example,
 
 @example
 @group
 global x
 function f ()
-x = 1;
+  x = 1;
 endfunction
 f ()
 @end group
 @end example
 
 @noindent
-does @emph{not} set the value of the global variable @samp{x} to 1.  In
-order to change the value of the global variable @samp{x}, you must also
+does @emph{not} set the value of the global variable @code{x} to 1.  In
+order to change the value of the global variable @code{x}, you must also
 declare it to be global within the function body, like this
 
 @example
 @group
 function f ()
   global x;
   x = 1;
 endfunction
@@ -115,45 +115,45 @@ the function
 @group
 function f (x)
   x = 0
 endfunction
 @end group
 @end example
 
 @noindent
-and the definition of @samp{x} as a global variable at the top level,
+and the definition of @code{x} as a global variable at the top level,
 
 @example
 global x = 13
 @end example
 
 @noindent
 the expression
 
 @example
 f (x)
 @end example
 
 @noindent
-will display the value of @samp{x} from inside the function as @samp{0},
-but the value of @samp{x} at the top level remains unchanged, because
+will display the value of @code{x} from inside the function as 0,
+but the value of @code{x} at the top level remains unchanged, because
 the function works with a @emph{copy} of its argument.
 
 @defvr {Built-in Variable} warn_comma_in_global_decl
 If the value of @code{warn_comma_in_global_decl} is nonzero, a
 warning is issued for statements like
 
 @example
 global a = 1, b
 @end example
 
 @noindent
-which makes the variables @samp{a} and @samp{b} global and assigns the
-value 1 to the variable @samp{a}, because in this context, the comma is
+which makes the variables @code{a} and @code{b} global and assigns the
+value 1 to the variable @code{a}, because in this context, the comma is
 not interpreted as a statement separator.
 
 The default value of @code{warn_comma_in_global_decl} is nonzero.
 @end defvr
 
 @deftypefn {Built-in Function} {} is_global (@var{name})
 Return 1 if @var{name} is globally visible.  Otherwise, return 0.  For
 example,
@@ -197,19 +197,19 @@ clear foo b*r
 clears the name @code{foo} and all names that begin with the letter
 @code{b} and end with the letter @code{r}.
 
 If @code{clear} is called without any arguments, all user-defined
 variables (local and global) are cleared from the symbol table.  If
 @code{clear} is called with at least one argument, only the visible
 names matching the arguments are cleared.  For example, suppose you have
 defined a function @code{foo}, and then hidden it by performing the
-assignment @code{foo = 2}.  Executing the command @samp{clear foo} once
+assignment @code{foo = 2}.  Executing the command @kbd{clear foo} once
 will clear the variable definition and restore the definition of
-@code{foo} as a function.  Executing @samp{clear foo} a second time will
+@code{foo} as a function.  Executing @kbd{clear foo} a second time will
 clear the function definition.
 
 This command may not be used within a function body.
 @end deffn
 
 @deffn {Command} who options pattern @dots{}
 @deffnx {Command} whos options pattern @dots{}
 List currently defined symbols matching the given patterns.  The
@@ -238,17 +238,17 @@ cleared.
 List user-defined variables.
 @end table
 
 Valid patterns are the same as described for the @code{clear} command
 above.  If no patterns are supplied, all symbols from the given category
 are listed.  By default, only user defined functions and variables
 visible in the local scope are displayed.
 
-The command @code{whos} is equivalent to @code{who -long}.
+The command @kbd{whos} is equivalent to @kbd{who -long}.
 @end deffn
 
 @deftypefn {Built-in Function} {} exist (@var{name})
 Return 1 if the name exists as a variable, and 2 if the name (after
 appending @samp{.m}) is a function file in the path.  Otherwise, return
 0.
 @end deftypefn
 
diff --git a/doc/texinfo.tex b/doc/texinfo.tex
--- a/doc/texinfo.tex
+++ b/doc/texinfo.tex
@@ -1,10 +1,10 @@
 %% TeX macros to handle Texinfo files.
-%% $Id: texinfo.tex,v 1.3 1997-02-13 18:33:50 jwe Exp $
+%% $Id: texinfo.tex,v 1.4 1997-02-18 09:08:50 jwe Exp $
 
 %  Copyright (C) 1985, 86, 88, 90, 91, 92, 93,
 %                94, 95, 96, 97 Free Software Foundation, Inc.
 
 %This texinfo.tex file is free software; you can redistribute it and/or
 %modify it under the terms of the GNU General Public License as
 %published by the Free Software Foundation; either version 2, or (at
 %your option) any later version.
@@ -31,17 +31,17 @@
 
 % Make it possible to create a .fmt file just by loading this file:
 % if the underlying format is not loaded, start by loading it now.
 % Added by gildea November 1993.
 \expandafter\ifx\csname fmtname\endcsname\relax\input plain\fi
 
 % This automatically updates the version number based on RCS.
 \def\deftexinfoversion$#1: #2 ${\def\texinfoversion{#2}}
-\deftexinfoversion$Revision: 1.3 $
+\deftexinfoversion$Revision: 1.4 $
 \message{Loading texinfo package [Version \texinfoversion]:}
 
 % If in a .fmt file, print the version number
 % and turn on active characters that we couldn't do earlier because
 % they might have appeared in the input file name.
 \everyjob{\message{[Texinfo version \texinfoversion]}\message{}
   \catcode`+=\active \catcode`\_=\active}
 
@@ -946,18 +946,17 @@ where each line of input produces a line
 \def\conditionalsucceed#1{%
   \edef\temp{%
     % Remember the current value of \E#1.
     \let\nece{prevE#1} = \nece{E#1}%
     %
     % At the `@end #1', redefine \E#1 to be its previous value.
     \def\nece{E#1}{\let\nece{E#1} = \nece{prevE#1}}%
   }%
-  \temp
-}
+  \temp}
 
 % We need to expand lots of \csname's, but we don't want to expand the
 % control sequences after we've constructed them.
 %
 \def\nece#1{\expandafter\noexpand\csname#1\endcsname}
 
 % @asis just yields its argument.  Used with @table, for example.
 %
@@ -3388,19 +3387,19 @@ width0pt\relax} \fi
 \catcode`\>=12
 \escapechar=`\\
 %
 \let\,=\ptexcomma
 \let\{=\ptexlbrace
 \let\}=\ptexrbrace
 \let\.=\ptexdot
 \let\*=\ptexstar
-\let\dots=\ptexdots
-\def\endldots{\mathinner{\ldots\ldots\ldots\ldots}}
-\def\enddots{\relax\ifmmode\endldots\else$\mathsurround=0pt \endldots\,$\fi}
+\let\dots=\ptexdots%
+\def\endldots{\mathinner{\ldots\ldots\ldots\ldots}}%
+\def\enddots{\relax\ifmmode\endldots\else$\mathsurround=0pt \endldots\,$\fi}%
 \def\@{@}%
 \let\bullet=\ptexbullet
 \let\b=\ptexb \let\c=\ptexc \let\i=\ptexi \let\t=\ptext
 %
 \let\Etex=\endgroup}
 
 % Define @lisp ... @endlisp.
 % @lisp does a \begingroup so it can rebind things,
diff --git a/examples/Makefile.in b/examples/Makefile.in
--- a/examples/Makefile.in
+++ b/examples/Makefile.in
@@ -16,17 +16,17 @@ include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_DATA = @INSTALL_DATA@
 
 SCRIPTS = info-emacs-info info-emacs-octave-help
 
-SOURCES = hello.cc make_int.cc
+SOURCES = hello.cc oregonator.m oregonator.cc make_int.cc
 
 DISTFILES = Makefile.in $(SOURCES) $(SCRIPTS)
 
 BINDISTFILES = $(addprefix $(srcdir)/, $(SCRIPTS))
 
 SUBDIRS = 
 
 DISTSUBDIRS = 
diff --git a/examples/oregonator.cc b/examples/oregonator.cc
new file mode 100644
--- /dev/null
+++ b/examples/oregonator.cc
@@ -0,0 +1,17 @@
+#include <octave/oct.h>
+
+#include <iostream.h>
+
+DEFUN_DLD (oregonator, args, ,
+  "The `oregonator'.")
+{
+  ColumnVector dx (3);
+
+  ColumnVector x = args(0).vector_value ();
+
+  dx(0) = 77.27 * (x(1) - x(0)*x(1) + x(0) - 8.375e-06*pow (x(0), 2));
+  dx(1) = (x(2) - x(0)*x(1) - x(1)) / 77.27;
+  dx(2) = 0.161*(x(0) - x(2));
+
+  return octave_value (dx);
+}
diff --git a/examples/oregonator.m b/examples/oregonator.m
new file mode 100644
--- /dev/null
+++ b/examples/oregonator.m
@@ -0,0 +1,11 @@
+## The `oregonator'.
+
+function dx = oregonator (x, t)
+
+  dx = zeros (3, 1);
+
+  dx(1) = 77.27*(x(2) - x(1)*x(2) + x(1) - 8.375e-06*x(1)^2);
+  dx(2) = (x(3) - x(1)*x(2) - x(2)) / 77.27;
+  dx(3) = 0.161*(x(1) - x(3));
+
+end
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+Tue Feb 18 00:27:49 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* toplev.cc (octave_config_info): Handle option argument.
+
 Fri Feb 14 16:23:30 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-stream.cc (octave_base_stream::do_scanf): Don't forget to
 	check to see if the result matrix needs resizing!
 
 	* Makefile.in (bin-dist): Don't write empty strings to LIBRARIES.
 
 Thu Feb 13 03:02:08 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -841,25 +841,42 @@ which they were registered with atexit()
 #endif
     }
   else
     print_usage ("atexit");
 
   return retval;
 }
 
-DEFUN (octave_config_info, , ,
-  "return a structure containing configuration information")
+DEFUN (octave_config_info, args, ,
+  "octave_config_info (OPTION)\n\
+\n\
+If OPTION is a string, return the configuration information for the\n\
+specified option.\n\
+\n\
+With no arguments, return a structure containing configuration\n\
+information.")
 {
+  octave_value retval;
+
+#if defined (WITH_DYNAMIC_LINKING)
+#if defined (WITH_DL) || defined (WITH_SHL)
+  bool octave_supports_dynamic_linking = true;
+#else
+  bool octave_supports_dynamic_linking = false;
+#endif
+#endif
+
   Octave_map m;
 
   m ["default_pager"] = DEFAULT_PAGER;
   m ["prefix"] = OCTAVE_PREFIX;
   m ["exec_prefix"] = OCTAVE_EXEC_PREFIX;
   m ["datadir"] = OCTAVE_DATADIR;
+  m ["dld"] = (double) octave_supports_dynamic_linking;
   m ["libdir"] = OCTAVE_LIBDIR;
   m ["bindir"] = OCTAVE_BINDIR;
   m ["infodir"] = OCTAVE_INFODIR;
   m ["fcnfiledir"] = OCTAVE_FCNFILEDIR;
   m ["localfcnfiledir"] = OCTAVE_LOCALFCNFILEDIR;
   m ["localstartupfiledir"] = OCTAVE_LOCALSTARTUPFILEDIR;
   m ["startupfiledir"] = OCTAVE_STARTUPFILEDIR;
   m ["localfcnfilepath"] = OCTAVE_LOCALFCNFILEPATH;
@@ -891,17 +908,31 @@ DEFUN (octave_config_info, , ,
   m ["CXXLIBS"] = CXXLIBS;
   m ["TERMLIBS"] = TERMLIBS;
   m ["LIBS"] = LIBS;
   m ["LEXLIB"] = LEXLIB;
   m ["LIBPLPLOT"] = LIBPLPLOT;
   m ["LIBDLFCN"] = LIBDLFCN;
   m ["DEFS"] = DEFS;
 
-  return octave_value (m);
+  int nargin = args.length ();
+
+  if (nargin == 1)
+    {
+      string arg = args(0).string_value ();
+
+      if (! error_state)
+	retval = octave_value (m [arg.c_str ()]);
+    }
+  else if (nargin == 0)
+    retval = octave_value (m);
+  else
+    print_usage ("octave_config_info");
+
+  return retval;
 }
 
 #if defined (__GNUG__) && defined (DEBUG_NEW_DELETE)
 int debug_new_delete = 0;
 
 typedef void (*vfp)(void);
 extern vfp __new_handler;
 
