# HG changeset patch
# User jwe
# Date 1022122800 0
#      Thu May 23 03:00:00 2002 +0000
# Node ID 9be12c29c7d5390b3f3417bf6c0136a5f3888c16
# Parent  294f13627ee88828bf83a9af077d49e93d72e6d0
[project @ 2002-05-23 03:00:00 by jwe]

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,14 @@
+2002-05-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* misc/f77-fcn.c (xstopx): Return type is void, not volatile void.
+	* misc/f77-fcn.h (xstopx): Provide decl.  Add special gcc noreturn
+	attribute here.
+
 2002-05-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* misc/f77-fcn.h: Define F77_FCN for backward compatibility.
 
 2002-04-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* slatec-err/ixsav.f, slatec-err/xerrwd.f: New files.
 
diff --git a/libcruft/misc/f77-fcn.c b/libcruft/misc/f77-fcn.c
--- a/libcruft/misc/f77-fcn.c
+++ b/libcruft/misc/f77-fcn.c
@@ -38,17 +38,17 @@ copy_f77_context (void *from, void *to, 
 
 /* All the STOP statements in the Fortran routines have been replaced
    with a call to XSTOPX.
 
    XSTOPX jumps back to the entry point for the Fortran function that
    called us.  Then the calling function should do whatever cleanup
    is necessary.  */
 
-volatile void
+void
 F77_FUNC (xstopx, XSTOPX) (const char *s, long int slen)
 {
   /* Skip printing message if it is just a single blank character.  */
   if (s && slen > 0 && ! (slen == 1 && *s == ' '))
     (*current_liboctave_error_handler) ("%.*s", s, slen);
 
   longjmp (f77_context, 1);
 }
diff --git a/libcruft/misc/f77-fcn.h b/libcruft/misc/f77-fcn.h
--- a/libcruft/misc/f77-fcn.h
+++ b/libcruft/misc/f77-fcn.h
@@ -70,16 +70,19 @@ extern int f77_exception_encountered;
 /* For setjmp/longjmp. */
 extern jmp_buf f77_context;
 
 /* Defining this as a separate function allows us to avoid having to
    include string.h in this file. */
 
 extern void copy_f77_context (void *, void *, unsigned int);
 
+extern void
+F77_FUNC (xstopx, XSTOPX) (const char *s, long int slen) GCC_ATTR_NORETURN;
+
 #if !defined (F77_FCN)
 #define F77_FCN(f, F) F77_FUNC (f, F)
 #endif
 
 #ifdef __cplusplus
 }
 #endif
 
