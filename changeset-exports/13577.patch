# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1312217496 -7200
#      Mon Aug 01 18:51:36 2011 +0200
# Node ID e440b3f32f023b37cdd9a03b3b2bee62c497d9d1
# Parent  11fcb70949450f5125aa96d8519900bbfcb0d826
Fixed bug with closing subwindows.

diff --git a/gui/src/FilesDockWidget.cpp b/gui/src/FilesDockWidget.cpp
--- a/gui/src/FilesDockWidget.cpp
+++ b/gui/src/FilesDockWidget.cpp
@@ -92,16 +92,18 @@ FilesDockWidget::FilesDockWidget (QWidge
   widget ()->setLayout (layout);
   // TODO: Add right-click contextual menus for copying, pasting, deleting files (and others)
 
   connect (m_currentDirectory, SIGNAL (returnPressed ()), this,
 	   SLOT (currentDirectoryEntered ()));
   QCompleter *
     completer = new QCompleter (m_fileSystemModel, this);
   m_currentDirectory->setCompleter (completer);
+
+  connect (this, SIGNAL (visibilityChanged(bool)), this, SLOT(handleVisibilityChanged(bool)));
 }
 
 void
 FilesDockWidget::itemDoubleClicked (const QModelIndex & index)
 {
   // Retrieve the file info associated with the model index.
   QFileInfo fileInfo = m_fileSystemModel->fileInfo (index);
 
@@ -175,8 +177,22 @@ FilesDockWidget::noticeSettings ()
   m_fileTreeView->setColumnHidden (0, !settings->value ("showFilenames").toBool ());
   m_fileTreeView->setColumnHidden (1, !settings->value ("showFileSize").toBool ());
   m_fileTreeView->setColumnHidden (2, !settings->value ("showFileType").toBool ());
   m_fileTreeView->setColumnHidden (3, !settings->value ("showLastModified").toBool ());
   m_fileTreeView->setAlternatingRowColors (settings->value ("useAlternatingRowColors").toBool ());
   //if (settings.value ("showHiddenFiles").toBool ())
   // TODO: React on option for hidden files.
 }
+
+void
+FilesDockWidget::handleVisibilityChanged (bool visible)
+{
+  if (visible)
+    emit activeChanged (true);
+}
+
+void
+FilesDockWidget::closeEvent (QCloseEvent *event)
+{
+  emit activeChanged (false);
+  QDockWidget::closeEvent (event);
+}
diff --git a/gui/src/FilesDockWidget.h b/gui/src/FilesDockWidget.h
--- a/gui/src/FilesDockWidget.h
+++ b/gui/src/FilesDockWidget.h
@@ -60,20 +60,27 @@ public slots:
   void onUpDirectory ();
 
   void setCurrentDirectory (QString currentDirectory);
 
   void currentDirectoryEntered ();
 
   /** Tells the widget to notice settings that are probably new. */
   void noticeSettings ();
+  void handleVisibilityChanged (bool visible);
 
 signals:
   void openFile (QString fileName);
 
+  /** Custom signal that tells if a user has clicke away that dock widget. */
+  void activeChanged (bool active);
+
+protected:
+  void closeEvent (QCloseEvent *event);
+
 private:
   // TODO: Add toolbar with buttons for navigating the path, creating dirs, etc
 
     /** Toolbar for file and directory manipulation. */
     QToolBar * m_navigationToolBar;
 
     /** Variables for the up-directory action. */
   QIcon m_directoryIcon;
diff --git a/gui/src/HistoryDockWidget.cpp b/gui/src/HistoryDockWidget.cpp
--- a/gui/src/HistoryDockWidget.cpp
+++ b/gui/src/HistoryDockWidget.cpp
@@ -44,21 +44,36 @@ HistoryDockWidget::construct ()
   layout->addWidget (m_historyListView);
   layout->addWidget (m_filterLineEdit);
   layout->setMargin (2);
 
   widget ()->setLayout (layout);
 
   connect (m_filterLineEdit, SIGNAL (textEdited (QString)), &m_sortFilterProxyModel, SLOT (setFilterWildcard(QString)));
   connect (m_historyListView, SIGNAL (doubleClicked (QModelIndex)), this, SLOT (handleDoubleClick (QModelIndex)));
+  connect (this, SIGNAL (visibilityChanged(bool)), this, SLOT(handleVisibilityChanged(bool)));
 }
 
 void
 HistoryDockWidget::noticeSettings ()
 {
 
 }
 
 void
 HistoryDockWidget::handleDoubleClick (QModelIndex modelIndex)
 {
   emit commandDoubleClicked (modelIndex.data().toString());
 }
+
+void
+HistoryDockWidget::handleVisibilityChanged (bool visible)
+{
+  if (visible)
+    emit activeChanged (true);
+}
+
+void
+HistoryDockWidget::closeEvent (QCloseEvent *event)
+{
+  emit activeChanged (false);
+  QDockWidget::closeEvent (event);
+}
diff --git a/gui/src/HistoryDockWidget.h b/gui/src/HistoryDockWidget.h
--- a/gui/src/HistoryDockWidget.h
+++ b/gui/src/HistoryDockWidget.h
@@ -30,21 +30,25 @@ class HistoryDockWidget:public QDockWidg
 Q_OBJECT
 public:
   HistoryDockWidget (QWidget *parent = 0);
   void updateHistory (QStringList history);
 
 public slots:
   /** Tells the widget to notice settings that are probably new. */
   void noticeSettings ();
+  void handleVisibilityChanged (bool visible);
 
 signals:
   void information (QString message);
   void commandDoubleClicked (QString command);
-
+  /** Custom signal that tells if a user has clicke away that dock widget. */
+  void activeChanged (bool active);
+protected:
+  void closeEvent (QCloseEvent *event);
 private slots:
   void handleDoubleClick (QModelIndex modelIndex);
 
 private:
   void construct ();
   QListView *m_historyListView;
   QLineEdit *m_filterLineEdit;
   QSortFilterProxyModel m_sortFilterProxyModel;
diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -23,17 +23,17 @@
 #include <QDesktopServices>
 #include <QFileDialog>
 #include "MainWindow.h"
 #include "FileEditorMdiSubWindow.h"
 #include "ImageViewerMdiSubWindow.h"
 #include "SettingsDialog.h"
 #include "cmd-edit.h"
 
-#define VERSION_STRING "Octave GUI (0.7.2)"
+#define VERSION_STRING "Octave GUI (0.7.3)"
 
 MainWindow::MainWindow (QWidget * parent):QMainWindow (parent)
 {
   construct ();
   OctaveLink::instance ()->launchOctave();
 }
 
 MainWindow::~MainWindow ()
@@ -345,24 +345,22 @@ MainWindow::construct ()
   connect (alignWindowsAction, SIGNAL (triggered ()), this, SLOT (alignMdiWindows ()));
   connect (openEditorAction, SIGNAL (triggered ()), this, SLOT (openEditor ()));
   connect (reportBugAction, SIGNAL (triggered ()), this, SLOT (openBugTrackerPage ()));
   connect (agoraAction, SIGNAL (triggered ()), this, SLOT (openAgoraPage ()));
   connect (octaveForgeAction, SIGNAL (triggered ()), this, SLOT (openOctaveForgePage ()));
   connect (aboutOctaveAction, SIGNAL (triggered ()), this, SLOT (showAboutOctave ()));
   connect (aboutQt, SIGNAL (triggered ()), this, SLOT (showAboutQt ()));
 
-  // TODO: Visibility cannot be taken as a signal, because it will be emitted even then
-  // the dock widget is tabbed or minimized.
   connect (showWorkspaceAction, SIGNAL (toggled (bool)), m_variablesDockWidget, SLOT (setShown (bool)));
-  //connect (m_variablesDockWidget, SIGNAL (visibilityChanged (bool)), showWorkspaceAction, SLOT (setChecked (bool)));
+  connect (m_variablesDockWidget, SIGNAL (activeChanged (bool)), showWorkspaceAction, SLOT (setChecked (bool)));
   connect (showHistoryAction, SIGNAL (toggled (bool)), m_historyDockWidget, SLOT (setShown (bool)));
-  //connect (m_historyDockWidget, SIGNAL (visibilityChanged (bool)), showHistoryAction, SLOT (setChecked (bool)));
+  connect (m_historyDockWidget, SIGNAL (activeChanged (bool)), showHistoryAction, SLOT (setChecked (bool)));
   connect (showFileBrowserAction, SIGNAL (toggled (bool)), m_filesDockWidget, SLOT (setShown (bool)));
-  //connect (m_filesDockWidget, SIGNAL (visibilityChanged (bool)), showFileBrowserAction, SLOT (setChecked (bool)));
+  connect (m_filesDockWidget, SIGNAL (activeChanged (bool)), showFileBrowserAction, SLOT (setChecked (bool)));
 
   connect (this, SIGNAL (settingsChanged ()), m_variablesDockWidget, SLOT (noticeSettings ()));
   connect (this, SIGNAL (settingsChanged ()), m_historyDockWidget, SLOT (noticeSettings ()));
   connect (this, SIGNAL (settingsChanged ()), m_filesDockWidget, SLOT (noticeSettings ()));
 
   connect (m_filesDockWidget, SIGNAL (openFile (QString)), this, SLOT (handleOpenFileRequest (QString)));
   connect (m_historyDockWidget, SIGNAL (information (QString)), this, SLOT (reportStatusMessage (QString)));
   connect (m_historyDockWidget, SIGNAL (commandDoubleClicked (QString)), this, SLOT (handleCommandDoubleClicked (QString)));
diff --git a/gui/src/VariablesDockWidget.cpp b/gui/src/VariablesDockWidget.cpp
--- a/gui/src/VariablesDockWidget.cpp
+++ b/gui/src/VariablesDockWidget.cpp
@@ -62,16 +62,18 @@ VariablesDockWidget::construct ()
 
   treeWidgetItem = new QTreeWidgetItem ();
   treeWidgetItem->setData (0, 0, QString (tr ("Hidden")));
   m_variablesTreeWidget->insertTopLevelItem (3, treeWidgetItem);
 
   m_variablesTreeWidget->expandAll ();
   m_variablesTreeWidget->setAlternatingRowColors (true);
   m_variablesTreeWidget->setAnimated (true);
+
+  connect (this, SIGNAL (visibilityChanged(bool)), this, SLOT(handleVisibilityChanged(bool)));
 }
 
 void
 VariablesDockWidget::updateTreeEntry (QTreeWidgetItem * treeItem,
 				      SymbolRecord symbolRecord)
 {
   treeItem->setData (0, 0, QString (symbolRecord.name ().c_str ()));
   treeItem->setData (1, 0,
@@ -198,8 +200,22 @@ VariablesDockWidget::noticeSettings ()
 }
 
 void
 VariablesDockWidget::fetchSymbolTable ()
 {
   QList < SymbolRecord > symbolTable = OctaveLink::instance ()->copyCurrentSymbolTable ();
   setVariablesList (symbolTable);
 }
+
+void
+VariablesDockWidget::handleVisibilityChanged (bool visible)
+{
+  if (visible)
+    emit activeChanged (true);
+}
+
+void
+VariablesDockWidget::closeEvent (QCloseEvent *event)
+{
+  emit activeChanged (false);
+  QDockWidget::closeEvent (event);
+}
diff --git a/gui/src/VariablesDockWidget.h b/gui/src/VariablesDockWidget.h
--- a/gui/src/VariablesDockWidget.h
+++ b/gui/src/VariablesDockWidget.h
@@ -30,17 +30,22 @@ class VariablesDockWidget:public QDockWi
 public:
   VariablesDockWidget (QWidget * parent = 0);
   void setVariablesList (QList < SymbolRecord > symbolTable);
 
 public slots:
   /** Tells the widget to notice settings that are probably new. */
   void noticeSettings ();
   void fetchSymbolTable ();
-
+  void handleVisibilityChanged (bool visible);
+signals:
+  /** Custom signal that tells if a user has clicke away that dock widget. */
+  void activeChanged (bool active);
+protected:
+  void closeEvent (QCloseEvent *event);
 private:
   void construct ();
   void updateTreeEntry (QTreeWidgetItem * treeItem,
 			SymbolRecord symbolRecord);
   void updateScope (int topLevelItemIndex,
 		    QList < SymbolRecord > symbolTable);
   QTreeWidget *m_variablesTreeWidget;
   QSemaphore *m_updateSemaphore;
