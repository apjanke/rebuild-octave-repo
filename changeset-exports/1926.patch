# HG changeset patch
# User jwe
# Date 824073935 0
#      Sun Feb 11 21:25:35 1996 +0000
# Node ID 3ce2c289c9781ea04be1bfe4dc9aa35237ed8e7c
# Parent  f69f71d23771fd2531858efe75843544f54731d5
[project @ 1996-02-11 21:25:35 by jwe]

diff --git a/liboctave/CmplxLU.cc b/liboctave/CmplxLU.cc
--- a/liboctave/CmplxLU.cc
+++ b/liboctave/CmplxLU.cc
@@ -38,84 +38,79 @@ extern "C"
 {
   int F77_FCN (zgesv, ZGESV) (const int&, const int&, Complex*,
 			      const int&, int*, Complex*, const int&,
 			      int&);
 }
 
 ComplexLU::ComplexLU (const ComplexMatrix& a)
 {
-  ipvt = 0;
-  pvt = 0;
-
   int a_nr = a.rows ();
   int a_nc = a.cols ();
 
   if (a_nr == 0 || a_nc == 0 || a_nr != a_nc)
     {
       (*current_liboctave_error_handler) ("ComplexLU requires square matrix");
       return;
     }
 
   int n = a_nr;
 
-  ipvt = new int [n];
-  pvt = new int [n];
+  Array<int> ipvt (n);
+
+  int *pipvt = ipvt.fortran_vec ();
 
   ComplexMatrix A_fact = a;
   Complex *tmp_data = A_fact.fortran_vec ();
 
   int info = 0;
   Complex *dummy = 0;
 
-  F77_XFCN (zgesv, ZGESV, (n, 0, tmp_data, n, ipvt, dummy, n, info));
+  F77_XFCN (zgesv, ZGESV, (n, 0, tmp_data, n, pipvt, dummy, n, info));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in zgesv");
   else
     {
+      Array<int> pvt (n);
+
       for (int i = 0; i < n; i++)
 	{
-	  ipvt[i] -= 1;
-	  pvt[i] = i;
+	  ipvt.elem (i) -= 1;
+	  pvt.elem (i) = i;
 	}
 
       for (int i = 0; i < n - 1; i++)
 	{
-	  int k = ipvt[i];
+	  int k = ipvt.elem (i);
+
 	  if (k != i)
 	    {
-	      int tmp = pvt[k];
-	      pvt[k] = pvt[i];
-	      pvt[i] = tmp;
+	      int tmp = pvt.elem (k);
+	      pvt.elem (k) = pvt.elem (i);
+	      pvt.elem (i)= tmp;
 	    }
 	}
 
       l.resize (n, n, 0.0);
       u.resize (n, n, 0.0);
       p.resize (n, n, 0.0);
 
       for (int i = 0; i < n; i++)
 	{
-	  p.elem (i, pvt[i]) = 1.0;
+	  p.elem (i, pvt.elem (i)) = 1.0;
 
 	  l.elem (i, i) = 1.0;
 	  for (int j = 0; j < i; j++)
 	    l.elem (i, j) = A_fact.elem (i, j);
 
 	  for (int j = i; j < n; j++)
 	    u.elem (i, j) = A_fact.elem (i, j);
 	}
     }
-
-  delete [] ipvt;
-  ipvt = 0;
-
-  delete [] pvt;
-  pvt = 0;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/CmplxLU.h b/liboctave/CmplxLU.h
--- a/liboctave/CmplxLU.h
+++ b/liboctave/CmplxLU.h
@@ -33,54 +33,47 @@ class ostream;
 #include "dMatrix.h"
 #include "CMatrix.h"
 
 class
 ComplexLU
 {
 public:
 
-  ComplexLU (void) : l (), u (), p (), ipvt (0), pvt (0) { }
+  ComplexLU (void) : l (), u (), p () { }
 
   ComplexLU (const ComplexMatrix& a);
 
   ComplexLU (const ComplexLU& a) : l (a.l), u (a.u), p (a.p) { }
 
   ComplexLU& operator = (const ComplexLU& a)
     {
       if (this != &a)
 	{
 	  l = a.l;
 	  u = a.u;
 	  p = a.p;
 	}
       return *this;
     }
 
-  ~ComplexLU (void)
-    {
-      delete [] ipvt;
-      delete [] pvt;
-    }
+  ~ComplexLU (void) { }
 
   ComplexMatrix L (void) const { return l; }
   ComplexMatrix U (void) const { return u; }
 
   Matrix P (void) const { return p; }
 
   friend ostream&  operator << (ostream& os, const ComplexLU& a);
 
 private:
 
   ComplexMatrix l;
   ComplexMatrix u;
   Matrix p;
-
-  int *ipvt;
-  int *pvt;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/liboctave/dbleLU.cc b/liboctave/dbleLU.cc
--- a/liboctave/dbleLU.cc
+++ b/liboctave/dbleLU.cc
@@ -38,84 +38,77 @@ extern "C"
 {
   int F77_FCN (dgesv, DGESV) (const int&, const int&, double*,
 			      const int&, int*, double&, const int&,
 			      int&);
 }
 
 LU::LU (const Matrix& a)
 {
-  ipvt = 0;
-  pvt = 0;
-
   int a_nr = a.rows ();
   int a_nc = a.cols ();
 
   if (a_nr == 0 || a_nc == 0 || a_nr != a_nc)
     {
       (*current_liboctave_error_handler) ("LU requires square matrix");
       return;
     }
 
   int n = a_nr;
 
-  ipvt = new int [n];
-  pvt = new int [n];
+  Array<int> ipvt (n);
+  int *pipvt = ipvt.fortran_vec ();
 
   Matrix A_fact = a;
   double *tmp_data = A_fact.fortran_vec ();
 
   int info = 0;
   double dummy = 0;
 
-  F77_XFCN (dgesv, DGESV, (n, 0, tmp_data, n, ipvt, dummy, n, info));
+  F77_XFCN (dgesv, DGESV, (n, 0, tmp_data, n, pipvt, dummy, n, info));
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in dgesv");
   else
     {
+      Array<int> pvt (n);
+
       for (int i = 0; i < n; i++)
 	{
-	  ipvt[i] -= 1;
-	  pvt[i] = i;
+	  ipvt.elem (i) -= 1;
+	  pvt.elem (i) = i;
 	}
 
       for (int i = 0; i < n - 1; i++)
 	{
-	  int k = ipvt[i];
+	  int k = ipvt.elem (i);
 	  if (k != i)
 	    {
-	      int tmp = pvt[k];
-	      pvt[k] = pvt[i];
-	      pvt[i] = tmp;
+	      int tmp = pvt.elem (k);
+	      pvt.elem (k) = pvt.elem (i);
+	      pvt.elem (i) = tmp;
 	    }
 	}
 
       l.resize (n, n, 0.0);
       u.resize (n, n, 0.0);
       p.resize (n, n, 0.0);
 
       for (int i = 0; i < n; i++)
 	{
-	  p.elem (i, pvt[i]) = 1.0;
+	  p.elem (i, pvt.elem (i)) = 1.0;
 
 	  l.elem (i, i) = 1.0;
 	  for (int j = 0; j < i; j++)
 	    l.elem (i, j) = A_fact.elem (i, j);
 
 	  for (int j = i; j < n; j++)
 	    u.elem (i, j) = A_fact.elem (i, j);
 	}
     }
-
-  delete [] ipvt;
-  ipvt = 0;
-
-  delete [] pvt;
-  pvt = 0;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/dbleLU.h b/liboctave/dbleLU.h
--- a/liboctave/dbleLU.h
+++ b/liboctave/dbleLU.h
@@ -31,55 +31,48 @@ Software Foundation, 59 Temple Place - S
 class ostream;
 
 #include "dMatrix.h"
 
 class LU
 {
 public:
 
-  LU (void) : l (), u (), p (), ipvt (0), pvt (0) { }
+  LU (void) : l (), u (), p () { }
 
   LU (const Matrix& a);
 
   LU (const LU& a) : l (a.l), u (a.u), p (a.p) { }
 
   LU& operator = (const LU& a)
     {
       if (this != &a)
 	{
 	  l = a.l;
 	  u = a.u;
 	  p = a.p;
 	}
       return *this;
     }
 
-  ~LU (void)
-    {
-      delete [] ipvt;
-      delete [] pvt;
-    }
+  ~LU (void) { }
 
   Matrix L (void) const { return l; }
 
   Matrix U (void) const { return u; }
 
   Matrix P (void) const { return p; }
 
   friend ostream&  operator << (ostream& os, const LU& a);
 
 private:
 
   Matrix l;
   Matrix u;
   Matrix p;
-
-  int *ipvt;
-  int *pvt;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
