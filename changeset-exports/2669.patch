# HG changeset patch
# User jwe
# Date 855858340 0
#      Thu Feb 13 18:25:40 1997 +0000
# Node ID c821858188b6eb6819fcf00b4fff0a7e5fbcb9ef
# Parent  0d865ef7478f786a06f8a05628c8519d550b5340
[project @ 1997-02-13 18:25:39 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,25 @@
+Thu Feb 13 03:02:08 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* gripes.cc (gripe_wrong_type_arg (const char*, const string&)):
+	New function.
+
+Wed Feb 12 17:27:53 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* syscalls.cc (symbols_of_syscalls): Add O_ASYNC and O_SYNC.
+
+Mon Feb 10 01:22:27 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dirfns.cc (Freaddir, Fmkdir, Frmdir, Frename):
+	Also return status and error message.
+
+	* syscalls.cc (Fdup2, Fexec, Ffork, Ffcntl, Funlink, Fmkfifo,
+	Fpipe, Fwaitpid): Also return error message.
+
 Sat Feb  8 17:16:09 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-exp.cc (tree_simple_assignment_expression::eval): Return
 	value of RHS, but (if printing) print complete value of LHS.
 
 	* pr-output.cc (octave_print_internal): Print a new line for empty
 	string matrices.
 
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -436,162 +436,177 @@ DEFUN (pwd, , nargout,
       else
 	retval = directory;
     }
 
   return retval;
 }
 
 DEFUN (readdir, args, ,
-  "readdir (NAME)\n\
+  "[FILES, STATUS, MSG] = readdir (NAME)\n\
 \n\
 Return an array of strings containing the list of all files in the
-named directory.  If sucessful, returns 0; otherwise an error message
-is printed.")
+named directory in FILES, or an empty matrix if an error occurs\n\
+\n\
+If successful, STATUS is 0 and MSG is an empty string.  Otherwise,\n\
+STATUS is nonzero and MSG contains a system-dependent error message.")
 {
   octave_value_list retval;
 
+  retval(2) = string ();
+  retval(1) = -1.0;
+  retval(0) = Matrix ();
+
   if (args.length () == 1)
     {
       string dirname = args(0).string_value ();
 
       if (error_state)
 	gripe_wrong_type_arg ("readdir", args(0));
       else
 	{
 	  dir_entry dir (oct_tilde_expand (dirname));
 
 	  if (dir)
 	    {
 	      string_vector dirlist = dir.read ();
 	      retval(0) = dirlist.qsort ();
+	      retval(1) = 0.0;
 	    }
 	  else
 	    {
-	      string msg = dir.error ();
-	      error ("%s", msg.c_str ());
+	      retval(2) = dir.error ();
 	    }
 	}
     }
   else
     print_usage ("readdir");
 
   return retval;
 }
 
 // XXX FIXME XXX -- should probably also allow second arg to specify
 // mode.
 
 DEFUN (mkdir, args, ,
-  "mkdir (NAME)\n\
+  "[STATUS, MSG] = mkdir (NAME)\n\
 \n\
-Create the directory named by NAME.  If successful, returns 0;\n\
-otherwise prints an error message.")
+Create the directory named by NAME.\n\
+\n\
+If successful, STATUS is 0 and MSG is an empty string.  Otherwise,\n\
+STATUS is nonzero and MSG contains a system-dependent error message.")
 {
   octave_value_list retval;
 
-  int status = 0;
+  retval(1) = string ();
+  retval(0) = -1.0;
 
   if (args.length () == 1)
     {
       string dirname = args(0).string_value ();
 
       if (error_state)
 	gripe_wrong_type_arg ("mkdir", args(0));
       else
 	{
-	  int mkdir_retval = oct_mkdir (oct_tilde_expand (dirname), 0777);
+	  string msg;
+
+	  int status = oct_mkdir (oct_tilde_expand (dirname),
+				  0777, msg);
 
-	  if (mkdir_retval < 0)
-	    {
-	      status = -1;
-	      error ("%s", strerror (errno));
-	    }
+	  retval(0) = (double) status;
+
+	  if (status < 0)
+	    retval(1) = msg;
 	}
     }
   else
     print_usage ("mkdir");
 
-  if (status == 0)
-    retval (0) = (double) status;
-
   return retval;
 }
 
 DEFUN (rmdir, args, ,
-  "rmdir (NAME)\n\
+  "[STATUS, MSG] = rmdir (NAME)\n\
 \n\
-Remove the directory named by NAME.  If successful, returns 0;\n\
-otherwise prints an error message.")
+Remove the directory named by NAME.\n\
+\n\
+If successful, STATUS is 0 and MSG is an empty string.  Otherwise,\n\
+STATUS is nonzero and MSG contains a system-dependent error message.")
 {
   octave_value_list retval;
 
-  int status = 0;
+  retval(1) = string ();
+  retval(0) = -1.0;
 
   if (args.length () == 1)
     {
       string dirname = args(0).string_value ();
 
       if (error_state)
 	gripe_wrong_type_arg ("rmdir", args(0));
       else
 	{
-	  int rmdir_retval = oct_rmdir (oct_tilde_expand (dirname));
+	  string msg;
+
+	  int status = oct_rmdir (oct_tilde_expand (dirname), msg);
 
-	  if (rmdir_retval < 0)
-	    {
-	      status = -1;
-	      error ("%s", strerror (errno));
-	    }
+	  retval(0) = (double) status;
+
+	  if (status < 0)
+	    retval(1) = msg;
 	}
     }
   else
     print_usage ("rmdir");
 
-  if (status == 0)
-    retval (0) = (double) status;
-
   return retval;
 }
 
 DEFUN (rename, args, ,
-  "rename (FROM, TO)\n\
+  "[STATUS, MSG] = rename (FROM, TO)\n\
 \n\
-Rename a file.  If successful, returns 0;\n\
-otherwise prints an error message and returns -1.")
+Rename a file.\n\
+\n\
+If successful, STATUS is 0 and MSG is an empty string.  Otherwise,\n\
+STATUS is nonzero and MSG contains a system-dependent error message.")
 {
   octave_value_list retval;
 
-  int status = 0;
+  retval(1) = string ();
+  retval(0) = -1.0;
 
   if (args.length () == 2)
     {
       string from = args(0).string_value ();
 
       if (error_state)
 	gripe_wrong_type_arg ("rename", args(0));
       else
 	{
 	  string to = args(1).string_value ();
 
 	  if (error_state)
 	    gripe_wrong_type_arg ("rename", args(1));
-	  else if (oct_rename (from, to) < 0)
+	  else
 	    {
-	      status = -1;
-	      error ("%s", strerror (errno));
+	      string msg;
+
+	      int status = oct_rename (from, to, msg);
+
+	      retval(0) = (double) status;
+
+	      if (status < 0)
+		retval(1) = msg;
 	    }
 	}
     }
   else
     print_usage ("rename");
 
-  if (status == 0)
-    retval (0) = (double) status;
-
   return retval;
 }
 
 DEFUN (glob, args, ,
   "glob (PATTERN)\n\
 \n\
 Given an array of strings in PATTERN, return the list of file names\n\
 that any of them, or an empty string if no patterns match.  Tilde\n\
diff --git a/src/syscalls.cc b/src/syscalls.cc
--- a/src/syscalls.cc
+++ b/src/syscalls.cc
@@ -24,17 +24,19 @@ Software Foundation, 59 Temple Place - S
 // the following functions:
 //
 //   mkfifo  unlink  waitpid
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <cerrno>
 #include <cstdio>
+#include <cstring>
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
@@ -81,19 +83,27 @@ mk_stat_map (const file_stat& fs)
 #if defined (HAVE_ST_BLOCKS)
   m["blocks"] = (double) fs.blocks ();
 #endif
 
   return m;
 }
 
 DEFUN (dup2, args, ,
- "fid = dup2 (old, new): duplicate a file descriptor")
+ "[FID, MSG] = dup2 (OLD, NEW)\n\
+\n\
+Duplicate a file descriptor.\n\
+\n\
+If successful, FID is greater than zero and contains the new file ID.\n\
+Otherwise, FID is negative and MSG contains a system-dependent error message.")
 {
-  double retval = -1.0;
+  octave_value_list retval;
+
+  retval(1) = string ();
+  retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 2)
     {
 #if defined (HAVE_DUP2)
       double d_old = args(0).double_value ();
       double d_new = args(1).double_value ();
@@ -102,17 +112,24 @@ DEFUN (dup2, args, ,
 	{
 	  if (D_NINT (d_old) == d_old && D_NINT (d_new) == d_new)
 	    {
 	      int i_old = NINT (d_old);
 	      int i_new = NINT (d_new);
 
 	      // XXX FIXME XXX -- are these checks sufficient?
 	      if (i_old >= 0 && i_new >= 0)
-		retval = (double) dup2 (i_old, i_new);
+		{
+		  int status = dup2 (i_old, i_new);
+
+		  retval(0) = (double) status;
+
+		  if (status < 0)
+		    retval(1) = strerror (errno);
+		}
 	      else
 		error ("dup2: invalid file id");
 	    }
 	  else
 	    error ("dup2: arguments must be integer values");
 	}
 #else
       gripe_not_supported ("dup2");
@@ -120,19 +137,27 @@ DEFUN (dup2, args, ,
     }
   else
     print_usage ("dup2");
 
   return retval;
 }
 
 DEFUN (exec, args, ,
- "exec (file, args): replace current process with a new process")
+ "[STATUS, MSG] = exec (FILE, ARGS)\n\
+\n\
+Replace current process with a new process.\n\
+\n\
+If successful, exec does not return.  If exec does return, status will
+be nonzero, and MSG will contain a system-dependent error message.")
 {
-  double retval = -1.0;
+  octave_value_list retval;
+
+  retval(1) = string ();
+  retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
 #if defined (HAVE_EXECVP)
       string exec_file = args(0).string_value ();
 
@@ -173,34 +198,49 @@ DEFUN (exec, args, ,
 	    {
 	      exec_args = new char * [2];
 
 	      exec_args[0] = strsave (exec_file.c_str ());
 	      exec_args[1] = 0;
 	    }
 
 	  if (! error_state)
-	    execvp (exec_file.c_str (), exec_args);
+	    {
+	      int status = execvp (exec_file.c_str (), exec_args);
+
+	      retval(0) = (double) status;
+
+	      if (status < 0)
+		retval(1) = strerror (errno);
+	    }
 	}
       else
 	error ("exec: first argument must be a string");
 #else
       gripe_not_supported ("exec");
 #endif
     }
   else
     print_usage ("exec");
 
   return retval;
 }
 
 DEFUN (fcntl, args, ,
- "fcntl (fid, request, argument): control open file descriptors")
+ "[STATUS, MSG] = fcntl (FID, REQUEST, ARGUMENT)\n\
+\n\
+Control open file descriptors.\n\
+\n\
+If successful, STATUS is 0 and MSG is an empty string.  Otherwise,\n\
+STATUS is nonzero and MSG contains a system-dependent error message.")
 {
-  double retval = -1.0;
+  octave_value_list retval;
+
+  retval(1) = string ();
+  retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 3)
     {
 #if defined (HAVE_FCNTL)
       double d_fid = args(0).double_value ();
       double d_req = args(1).double_value ();
@@ -214,41 +254,62 @@ DEFUN (fcntl, args, ,
 	  int fid = NINT (d_fid);
 	  int req = NINT (d_req);
 	  int arg = NINT (d_arg);
 
 	  // XXX FIXME XXX -- Need better checking here?
 	  if (fid < 0)
 	    error ("fcntl: invalid file id");
 	  else
-	    retval = fcntl (fid, req, arg);
+	    {
+	      int status = fcntl (fid, req, arg);
+
+	      retval(0) = (double) status;
+
+	      if (status < 0)
+		retval(1) = strerror (errno);
+	    }
 	}
       else
 	error ("fcntl: file id must be an integer");
 #else
       gripe_not_supported ("fcntl");
 #endif
     }
   else
     print_usage ("fcntl");
 
   return retval;
 }
 
 DEFUN (fork, args, ,
- "fork (): create a copy of the current process")
+ "[PID, MSG] = fork ()\n\
+\n\
+Create a copy of the current process.\n\
+\n\
+If successful, PID is either the process ID and you are in the parent,\n\
+or 0, and you are in the child.  If PID is less than zero, an error\n\
+has occured, and MSG contains a system-dependent error message.")
 {
-  double retval = -1.0;
+  octave_value_list retval;
+
+  retval(1) = string ();
+  retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
 #if defined (HAVE_FORK)
-      retval = fork ();
+      pid_t pid = fork ();
+
+      retval(0) = (double) pid;
+
+      if (pid < 0)
+	retval(1) = strerror (errno);
 #else
       gripe_not_supported ("fork");
 #endif
     }
   else
     print_usage ("fork");
 
   return retval;
@@ -434,85 +495,109 @@ points to.")
     }
   else
     print_usage ("lstat");
 
   return retval;
 }
 
 DEFUN (mkfifo, args, ,
-  "STATUS = mkfifo (NAME, MODE)\n\
+  "[STATUS, MSG] = mkfifo (NAME, MODE)\n\
 \n\
-  Create a FIFO special file named NAME with file mode MODE\n\
+Create a FIFO special file named NAME with file mode MODE\n\
 \n\
-  STATUS is:\n\
-\n\
-    != 0 : if mkfifo failed\n\
-       0 : if the FIFO special file could be created")
+If successful, STATUS is 0 and MSG is an empty string.  Otherwise,\n\
+STATUS is nonzero and MSG contains a system-dependent error message.")
 {
-  double retval = -1.0;
+  octave_value_list retval;
+
+  retval(1) = string ();
+  retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 2)
     {
       if (args(0).is_string ())
 	{
 	  string name = args(0).string_value ();
 
 	  if (args(1).is_scalar_type ())
 	    {
 	      long mode = (long) args(1).double_value ();
 
-	      retval = oct_mkfifo (name, mode);
+	      string msg;
+
+	      int status = oct_mkfifo (name, mode, msg);
+
+	      retval(0) = (double) status;
+
+	      if (status < 0)
+		retval(1) = msg;
 	    }
 	  else
 	    error ("mkfifo: MODE must be an integer");
 	}
       else
 	error ("mkfifo: file name must be a string");
 
     }
   else
     print_usage ("mkfifo");
 
   return retval;
 }
 
 DEFUN (pipe, args, ,
-  "[file_ids, status] = pipe (): create an interprocess channel")
+  "[FILE_IDS, STATUS, MSG] = pipe (): create an interprocess channel.\n\
+\n\
+Return the FILE_IDS corresponding to the reading and writing ends of\n\
+the pipe, as a vector.\n\
+\n\
+If successful, STATUS is 0 and MSG is an empty string.  Otherwise,\n\
+STATUS is nonzero and MSG contains a system-dependent error message.")
 {
-  octave_value_list retval (2, octave_value (-1.0));
+  octave_value_list retval;
+
+  retval(2) = string ();
+  retval(1) = -1.0;
+  retval(0) = Matrix ();
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
 #if defined (HAVE_PIPE)
       int fid[2];
 
-      if (pipe (fid) >= 0)
+      int status = pipe (fid);
+
+      if (status < 0)
+	{
+	  retval(2) = strerror (errno);
+	}
+      else
 	{
 	  FILE *in_file = fdopen (fid[0], "r");
 	  FILE *out_file = fdopen (fid[1], "w");
 
 	  octave_istdiostream *is
 	    = new octave_istdiostream (string (), in_file);
 
 	  octave_ostdiostream *os
 	    = new octave_ostdiostream (string (), out_file);
 
 	  Matrix file_ids (1, 2);
 
 	  file_ids (0, 0) = octave_stream_list::insert (is);
 	  file_ids (0, 1) = octave_stream_list::insert (os);
 
           retval(0) = file_ids;
-	  retval(1) = 0.0;
-	}	  
+	  retval(1) = (double) status;
+	}
 #else
       gripe_not_supported ("pipe");
 #endif
     }
   else
     print_usage ("pipe");
 
   return retval;
@@ -570,50 +655,58 @@ DEFUN (stat, args, ,
     }
   else
     print_usage ("stat");
 
   return retval;
 }
 
 DEFUN (unlink, args, ,
-  "STATUS = unlink (NAME)\n\
+  "[STATUS, MSG] = unlink (NAME)\n\
 \n\
-  Delete the file NAME\n\
+Delete the file NAME\n\
 \n\
-  STATUS is:\n\
-\n\
-    != 0 : if unlink failed\n\
-       0 : if the file could be successfully deleted")
+If successful, STATUS is 0 and MSG is an empty string.  Otherwise,\n\
+STATUS is nonzero and MSG contains a system-dependent error message.")
 {
-  double retval = -1.0;
+  octave_value_list retval;
+
+  retval(1) = string ();
+  retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       if (args(0).is_string ())
 	{
 	  string name = args(0).string_value ();
 
-	  retval = oct_unlink (name);
+	  string msg;
+
+	  int status = oct_unlink (name, msg);
+
+	  retval(0) = (double) status;
+
+	  if (status < 0)
+	    retval(1) = msg;	    
 	}
       else
 	error ("unlink: file name must be a string");
     }
   else
     print_usage ("unlink");
 
   return retval;
 }
 
 DEFUN (waitpid, args, ,
-  "STATUS = waitpid (PID, OPTIONS)\n\
+  "[PID, MSG] = waitpid (PID, OPTIONS)\n\
 \n\
-  wait for process PID to terminate\n\
+Wait for process PID to terminate\n\
 \n\
   PID can be:\n\
 \n\
      -1 : wait for any child process\n\
       0 : wait for any child process whose process group ID is equal to\n\
           that of the Octave interpreter process.\n\
     > 0 : wait for termination of the child process with ID PID.\n\
 \n\
@@ -622,22 +715,25 @@ DEFUN (waitpid, args, ,
      0 : wait until signal is received or a child process exits (this\n\
          is the default if the OPTIONS argument is missing) \n\
      1 : do not hang if status is not immediately available\n\
      2 : report the status of any child processes that are\n\
          stopped, and whose status has not yet been reported\n\
          since they stopped\n\
      3 : implies both 1 and 2\n\
 \n\
-  STATUS is:\n\
-\n\
-     -1 : if an error occured\n\
-    > 0 : the process ID of the child process that exited")
+If successful, PID is greater than 0 and contains the process ID of\n\
+the child process that exited and MSG is an empty string.\n\
+Otherwise, PID is less than zero and MSG contains a system-dependent\n\
+error message.")
 {
-  double retval = -1.0;
+  octave_value_list retval;
+
+  retval(1) = string ();
+  retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
 #if defined (HAVE_WAITPID)
       double pid_num = args(0).double_value ();
   
@@ -664,17 +760,24 @@ DEFUN (waitpid, args, ,
 			  options = NINT (options_num);
 			  if (options < 0 || options > 3)
 			    error ("waitpid: invalid OPTIONS value specified");
 			}
 		    }
 		}
 
 	      if (! error_state)
-		retval = waitpid (pid, 0, options);
+		{
+		  pid_t status = waitpid (pid, 0, options);
+
+		  retval(0) = (double) status;
+
+		  if (status < 0)
+		    retval(1) = strerror (errno);
+		}
 	    }
 	}
 #else
       gripe_not_supported ("waitpid");
 #endif
     }
   else
     print_usage ("waitpid");
@@ -714,16 +817,21 @@ symbols_of_syscalls (void)
     "");
 #endif
 
 #if defined (O_APPEND)
   DEFCONST (O_APPEND, (double) O_APPEND, 0, 0,
     "");
 #endif
 
+#if defined (O_ASYNC)
+  DEFCONST (O_ASYNC, (double) O_ASYNC, 0, 0,
+    "");
+#endif
+
 #if defined (O_CREAT)
   DEFCONST (O_CREAT, (double) O_CREAT, 0, 0,
     "");
 #endif
 
 #if defined (O_EXCL)
   DEFCONST (O_EXCL, (double) O_EXCL, 0, 0,
     "");
@@ -739,16 +847,21 @@ symbols_of_syscalls (void)
     "");
 #endif
 
 #if defined (O_RDWR)
   DEFCONST (O_RDWR, (double) O_RDWR, 0, 0,
     "");
 #endif
 
+#if defined (O_SYNC)
+  DEFCONST (O_SYNC, (double) O_SYNC, 0, 0,
+    "");
+#endif
+
 #if defined (O_TRUNC)
   DEFCONST (O_TRUNC, (double) O_TRUNC, 0, 0,
     "");
 #endif
 
 #if defined (O_WRONLY)
   DEFCONST (O_WRONLY, (double) O_WRONLY, 0, 0,
     "");
