# HG changeset patch
# User Markus Mützel <markus.muetzel@gmx.de>
# Date 1518128113 18000
#      Thu Feb 08 17:15:13 2018 -0500
# Node ID d2c727a438abe0f25881ab923c6ac9a437c519fb
# Parent  36cd70fc2d63a6a16d6c02d6664afb787d927e5b
Add "-blas" and "-lapack" options to "version" (bug #45659).

* lo-sysinfo.h, lo-sysinfo.cc: New files.
* liboctave/system/module.mk: Update.

* sysdep.cc (F__blas_version__, F__lapack_version__): New functions.
* version.m:  Accept -blas and -lapack options.
Make options case insensitive.

diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -56,16 +56,17 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_OMP_H)
 #  include <omp.h>
 #endif
 
 #include "cmd-edit.h"
 #include "file-ops.h"
 #include "lo-mappers.h"
+#include "lo-sysinfo.h"
 #include "mach-info.h"
 #include "oct-env.h"
 #include "unistd-wrappers.h"
 #include "unsetenv-wrapper.h"
 
 #include "builtin-defun-decls.h"
 #include "Cell.h"
 #include "defun.h"
@@ -1224,8 +1225,26 @@ equivalent to
 }
 
 /*
 %!test
 %! if (! ispc ())
 %!   assert (get_home_directory (), getenv ("HOME"));
 %! endif
 */
+
+DEFUN (__blas_version__, , ,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} __blas_version__ ()
+Undocumented internal function.
+@end deftypefn */)
+{
+  return ovl (octave::sys::blas_version ());
+}
+
+DEFUN (__lapack_version__, , ,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} __lapack_version__ ()
+Undocumented internal function.
+@end deftypefn */)
+{
+  return ovl (octave::sys::lapack_version ());
+}
diff --git a/liboctave/system/lo-sysinfo.cc b/liboctave/system/lo-sysinfo.cc
new file mode 100644
--- /dev/null
+++ b/liboctave/system/lo-sysinfo.cc
@@ -0,0 +1,186 @@
+/*
+
+Copyright (C) 2018 Markus Mützel
+
+This file is part of Octave.
+
+Octave is free software: you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<https://www.gnu.org/licenses/>.
+
+*/
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <sstream>
+#include <string>
+
+#include "f77-fcn.h"
+#include "lo-sysinfo.h"
+#include "oct-shlib.h"
+
+// Hack to stringize macro results.
+#define xSTRINGIZE(x) #x
+#define STRINGIZE(x) xSTRINGIZE(x)
+
+namespace octave
+{
+  namespace sys
+  {
+    std::string blas_version (void)
+    {
+      dynamic_library dyn_libs ("");
+
+      if (! dyn_libs)
+        return "unknown BLAS";
+
+      std::string retval;
+
+      // Check for functions that are specific to certain BLAS implementations.
+
+      // FlexiBLAS
+      typedef void (*flexi_f_type) (int*, int*, int*);
+      flexi_f_type flexi_f_ptr = reinterpret_cast<flexi_f_type>
+        (dyn_libs.search ("flexiblas_get_version"));
+
+      if (flexi_f_ptr)
+        {
+          int v_major = 0;
+          int v_minor = 0;
+          int v_patch = 0;
+          flexi_f_ptr (&v_major, &v_minor, &v_patch);
+
+          std::ostringstream s;
+          s << "FlexiBLAS Version "
+            << v_major << "." << v_minor << "." << v_patch;
+
+          if (! retval.empty ())
+            retval += "\n";
+
+          retval += s.str ();
+        }
+
+      // OpenBLAS
+      typedef char * (*open_fcn_type) (void);
+      open_fcn_type open_f_ptr = reinterpret_cast<open_fcn_type>
+        (dyn_libs.search ("openblas_get_config"));
+
+      if (open_f_ptr)
+        {
+          if (! retval.empty ())
+            retval += "\n";
+
+          retval += "OpenBLAS (config: " + std::string (open_f_ptr ()) + ")";
+        }
+
+      // GotoBLAS(2)
+      if (dyn_libs.search ("gotoblas_profile_init"))
+        {
+          if (! retval.empty ())
+            retval += "\n";
+
+          retval += "GotoBLAS(2)";
+        }
+
+      // ATLAS
+      // FIXME: If we are really interested, we could use a pipe to
+      // redirect the output of "ATL_buildinfo".
+      if (dyn_libs.search ("ATL_buildinfo"))
+        {
+          if (! retval.empty ())
+            retval += "\n";
+
+          retval += "ATLAS";
+        }
+
+      // ACML
+      typedef void (*acml_f_type) (int*, int*, int*);
+      acml_f_type acml_f_ptr = reinterpret_cast<acml_f_type>
+        (dyn_libs.search ("acmlversion"));
+
+      if (acml_f_ptr)
+        {
+          int v_major = 0;
+          int v_minor = 0;
+          int v_patch = 0;
+          acml_f_ptr (&v_major, &v_minor, &v_patch);
+
+          std::ostringstream s;
+          s << "ACML BLAS Version "
+            << v_major << "." << v_minor << "." << v_patch;
+
+          if (! retval.empty ())
+            retval += "\n";
+
+          retval += s.str ();
+        }
+
+      // Intel MKL
+      typedef void (*mkl_f_type) (char*, int);
+      mkl_f_type mkl_f_ptr = reinterpret_cast<mkl_f_type>
+        (dyn_libs.search ("mkl_get_version_string"));
+
+      if (mkl_f_ptr)
+        {
+          char buf[198];
+          int len = 198;
+          mkl_f_ptr (buf, len);
+
+          if (! retval.empty ())
+            retval += "\n";
+
+          retval += std::string (buf);
+        }
+
+      // Otherwise
+      if (retval.empty ())
+        retval = "unknown or reference BLAS";
+
+      return retval;
+    }
+
+    std::string lapack_version (void)
+    {
+      std::string retval = "unknown LAPACK";
+
+      dynamic_library dyn_libs ("");
+
+      if (! dyn_libs)
+        return retval;
+
+      // query LAPACK version
+      typedef F77_RET_T
+        (*ilaver_fcn_type) (const F77_INT&, const F77_INT&, const F77_INT&);
+      ilaver_fcn_type f_ptr = reinterpret_cast<ilaver_fcn_type>
+        (dyn_libs.search (STRINGIZE (F77_FUNC (ilaver, ILAVER))));
+
+      if (f_ptr)
+        {
+          int v_major = 0;
+          int v_minor = 0;
+          int v_patch = 0;
+          f_ptr (v_major, v_minor, v_patch);
+
+          std::ostringstream s;
+          s << "Linear Algebra PACKage Version "
+            << v_major << "." << v_minor << "." << v_patch;
+
+          retval = s.str ();
+        }
+
+      return retval;
+    }
+  }
+}
diff --git a/liboctave/system/lo-sysinfo.h b/liboctave/system/lo-sysinfo.h
new file mode 100644
--- /dev/null
+++ b/liboctave/system/lo-sysinfo.h
@@ -0,0 +1,40 @@
+/*
+
+Copyright (C) 2018 Markus Mützel
+
+This file is part of Octave.
+
+Octave is free software: you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<https://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_lo_sysinfo_h)
+#define octave_lo_sysinfo_h 1
+
+#include "octave-config.h"
+
+#include <string>
+
+namespace octave
+{
+  namespace sys
+  {
+    extern std::string blas_version (void);
+
+    extern std::string lapack_version (void);
+  }
+}
+
+#endif
diff --git a/liboctave/system/module.mk b/liboctave/system/module.mk
--- a/liboctave/system/module.mk
+++ b/liboctave/system/module.mk
@@ -1,29 +1,31 @@
 SYSTEM_INC = \
   %reldir%/child-list.h \
   %reldir%/dir-ops.h \
   %reldir%/file-ops.h \
   %reldir%/file-stat.h \
   %reldir%/lo-sysdep.h \
+  %reldir%/lo-sysinfo.h \
   %reldir%/mach-info.h \
   %reldir%/oct-env.h \
   %reldir%/oct-group.h \
   %reldir%/oct-passwd.h \
   %reldir%/oct-syscalls.h \
   %reldir%/oct-time.h \
   %reldir%/oct-uname.h
 
 SYSTEM_SRC = \
   %reldir%/child-list.cc \
   %reldir%/cmach-info.c \
   %reldir%/dir-ops.cc \
   %reldir%/file-ops.cc \
   %reldir%/file-stat.cc \
   %reldir%/lo-sysdep.cc \
+  %reldir%/lo-sysinfo.cc \
   %reldir%/mach-info.cc \
   %reldir%/oct-env.cc \
   %reldir%/oct-group.cc \
   %reldir%/oct-passwd.cc \
   %reldir%/oct-syscalls.cc \
   %reldir%/oct-time.cc \
   %reldir%/oct-uname.cc
 
diff --git a/scripts/miscellaneous/version.m b/scripts/miscellaneous/version.m
--- a/scripts/miscellaneous/version.m
+++ b/scripts/miscellaneous/version.m
@@ -40,20 +40,20 @@
 ##
 ## @item @qcode{"-java"}
 ## for version information of the Java @nospell{VM},
 ##
 ## @item @qcode{"-fftw"}
 ## for version information for the linked @sc{fftw},
 ##
 ## @item @qcode{"-blas"}
-## for version information for the linked @sc{blas} (not implemented),
+## for version information for the linked @sc{blas},
 ##
 ## @item @qcode{"-lapack"}
-## for version information for the linked @sc{lapack} (not implemented).
+## for version information for the linked @sc{lapack}.
 ## @end table
 ##
 ## The variant with no input and output argument is an alias for the function
 ## @w{@env{OCTAVE_VERSION}} provided for compatibility.
 ## @seealso{OCTAVE_VERSION, ver}
 ## @end deftypefn
 
 ## Author: jwe
@@ -66,17 +66,17 @@ function [v, d] = version (feature)
 
   if (nargin == 0)
     v = OCTAVE_VERSION ();
 
     if (nargout > 1)
       d = __octave_config_info__ ("release_date");
     end
   else
-    switch (feature)
+    switch (lower (feature))
       case "-date"
         v = __octave_config_info__ ("release_date");
       case "-description"
         v = "";
       case "-release"
         v = "";
       case "-java"
         try
@@ -85,26 +85,24 @@ function [v, d] = version (feature)
           jvendor = javaMethod ("getProperty", "java.lang.System", ...
                                 "java.vendor");
           jname = javaMethod ("getProperty", "java.lang.System", ...
                               "java.vm.name");
           jjitmode = javaMethod ("getProperty", "java.lang.System", ...
                                  "java.vm.info");
           v = ["Java " jversion " with " jvendor " " jname " " jjitmode];
         catch
-          v = "no java available";
+          v = "no Java available";
         end_try_catch
       case "-fftw"
         v = __octave_config_info__ ("fftw_version");
       case "-blas"
-        v = "";
-        warning ("version: option '-blas' not implemented");
+        v = __blas_version__ ();
       case "-lapack"
-        v = "";
-        warning ("version: option '-lapack' not implemented");
+        v = __lapack_version__ ();
       otherwise
         error ("version: invalid FEATURE");
     endswitch
   endif
 
 endfunction
 
 
@@ -114,16 +112,16 @@ endfunction
 %! [v, d] = version ();
 %! assert (v, OCTAVE_VERSION);
 %! assert (d, __octave_config_info__ ("release_date"));
 
 %!assert (version ("-date"), __octave_config_info__ ("release_date"))
 
 %!assert (version ("-description"), "")
 %!assert (version ("-release"), "")
+%!assert (ischar (version ("-blas")))
+%!assert (ischar (version ("-LAPACK")))
 
 ## Test input validation
 %!error version ("-date", "-release")
 %!error [v, d] = version ("-date")
 %!error version (1)
-%!warning <option '-blas' not implemented> version ("-blas");
-%!warning <option '-lapack' not implemented> version ("-lapack");
 %!error <invalid FEATURE> version ("-foobar")
