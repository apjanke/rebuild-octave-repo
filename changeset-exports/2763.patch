# HG changeset patch
# User jwe
# Date 857182473 0
#      Sat Mar 01 02:14:33 1997 +0000
# Node ID d9d00d7e271e1346e7614764a6b2ea3894296501
# Parent  ac1427f5c9e635d1998f09feb3c315f72490b22b
[project @ 1997-03-01 02:14:33 by jwe]

diff --git a/liboctave/CmplxQR.cc b/liboctave/CmplxQR.cc
--- a/liboctave/CmplxQR.cc
+++ b/liboctave/CmplxQR.cc
@@ -40,16 +40,23 @@ extern "C"
 				const int&, int&); 
 
   int F77_FCN (zungqr, ZUNGQR) (const int&, const int&, const int&,
 				Complex*, const int&, Complex*,
 				Complex*, const int&, int&);
 }
 
 ComplexQR::ComplexQR (const ComplexMatrix& a, QR::type qr_type)
+  : q (), r ()
+{
+  init (a, qr_type);
+}
+
+void
+ComplexQR::init (const ComplexMatrix& a, QR::type qr_type)
 {
   int m = a.rows ();
   int n = a.cols ();
 
   if (m == 0 || n == 0)
     {
       (*current_liboctave_error_handler)
 	("ComplexQR must have non-empty matrix");
diff --git a/liboctave/CmplxQR.h b/liboctave/CmplxQR.h
--- a/liboctave/CmplxQR.h
+++ b/liboctave/CmplxQR.h
@@ -34,36 +34,39 @@ class ostream;
 
 class
 ComplexQR
 {
 public:
 
   ComplexQR (void) : q (), r () { }
 
-  ComplexQR (const ComplexMatrix& A, QR::type qr_type = QR::std);
+  ComplexQR (const ComplexMatrix&, QR::type = QR::std);
 
   ComplexQR (const ComplexQR& a) : q (a.q), r (a.r) { }
 
   ComplexQR& operator = (const ComplexQR& a)
     {
       if (this != &a)
 	{
 	  q = a.q;
 	  r = a.r;
 	}
       return *this;
     }
 
   ~ComplexQR (void) { }
 
+  void init (const ComplexMatrix&, QR::type = QR::std);
+
   ComplexMatrix Q (void) const { return q; }
+
   ComplexMatrix R (void) const { return r; }
 
-  friend ostream&  operator << (ostream& os, const ComplexQR& a);
+  friend ostream&  operator << (ostream&, const ComplexQR&);
 
 protected:
 
   ComplexMatrix q;
   ComplexMatrix r;
 };
 
 #endif
diff --git a/liboctave/CmplxQRP.cc b/liboctave/CmplxQRP.cc
--- a/liboctave/CmplxQRP.cc
+++ b/liboctave/CmplxQRP.cc
@@ -44,47 +44,48 @@ extern "C"
   int F77_FCN (zungqr, ZUNGQR) (const int&, const int&, const int&,
 				Complex*, const int&, Complex*,
 				Complex*, const int&, int&);
 }
 
 // It would be best to share some of this code with ComplexQR class...
 
 ComplexQRP::ComplexQRP (const ComplexMatrix& a, QR::type qr_type)
+  : ComplexQR (), p ()
+{
+  init (a, qr_type);
+}
+
+void
+ComplexQRP::init (const ComplexMatrix& a, QR::type qr_type)
 {
   assert (qr_type != QR::raw);
 
   int m = a.rows ();
   int n = a.cols ();
 
   if (m == 0 || n == 0)
     {
       (*current_liboctave_error_handler)
 	("ComplexQR must have non-empty matrix");
       return;
     }
 
-  int min_mn = m < n ? m : n;
-  Array<Complex> tau (min_mn);
+  Array<Complex> tau (m < n ? m : n);
   Complex *ptau = tau.fortran_vec ();
 
-  int lwork = n;
+  int lwork = 3*n > 32*m ? 3*n : 32*m;
   Array<Complex> work (lwork);
   Complex *pwork = work.fortran_vec ();
 
   int info = 0;
 
-  ComplexMatrix A_fact;
+  ComplexMatrix A_fact = a;
   if (m > n)
-    {
-      A_fact.resize (m, m);
-      A_fact.insert (a, 0, 0);
-    }
-  else
-    A_fact = a;
+    A_fact.resize (m, m, 0.0);
 
   Complex *tmp_data = A_fact.fortran_vec ();
 
   Array<double> rwork (2*n);
   double *prwork = rwork.fortran_vec ();
 
   Array<int> jpvt (n, 0);
   int *pjpvt = jpvt.fortran_vec ();
@@ -96,54 +97,48 @@ ComplexQRP::ComplexQRP (const ComplexMat
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in zgeqpf");
   else
     {
       // Form Permutation matrix (if economy is requested, return the
       // indices only!)
 
-      if (qr_type == QR::economy && m > n)
+      if (qr_type == QR::economy)
 	{
 	  p.resize (1, n, 0.0);
 	  for (int j = 0; j < n; j++)
 	    p.elem (0, j) = jpvt.elem (j);
 	}
       else
 	{
 	  p.resize (n, n, 0.0);
 	  for (int j = 0; j < n; j++)
 	    p.elem (jpvt.elem (j) - 1, j) = 1.0;
 	}
 
-      volatile int n2;
+      if (qr_type == QR::economy && m > n)
+	r.resize (n, n, 0.0);
+      else
+	r.resize (m, n, 0.0);
 
-      if (qr_type == QR::economy && m > n)
-	{
-	  n2 = n;
-	  r.resize (n, n, 0.0);
-	}
-      else
-	{
-	  n2 = m;
-	  r.resize (m, n, 0.0);
-	}
+      int min_mn = m < n ? m : n;
 
       for (int j = 0; j < n; j++)
 	{
 	  int limit = j < min_mn-1 ? j : min_mn-1;
 	  for (int i = 0; i <= limit; i++)
 	    r.elem (i, j) = A_fact.elem (i, j);
 	}
 
-      lwork = 32*m;
-      work.resize (lwork);
-      Complex *pwork = work.fortran_vec ();
+      int n2 = m;
+      if (qr_type == QR::economy)
+	n2 = min_mn;
 
-      F77_XFCN (zungqr, ZUNGQR, (m, m, min_mn, tmp_data, m, ptau,
+      F77_XFCN (zungqr, ZUNGQR, (m, n2, min_mn, tmp_data, m, ptau,
 				 pwork, lwork, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zungqr");
       else
 	{
 	  q = A_fact;
 	  q.resize (m, n2);
diff --git a/liboctave/CmplxQRP.h b/liboctave/CmplxQRP.h
--- a/liboctave/CmplxQRP.h
+++ b/liboctave/CmplxQRP.h
@@ -33,35 +33,37 @@ class ostream;
 
 class
 ComplexQRP : public ComplexQR
 {
 public:
 
   ComplexQRP (void) : ComplexQR (), p () { }
 
-  ComplexQRP (const ComplexMatrix& A, QR::type qr_type = QR::std);
+  ComplexQRP (const ComplexMatrix&, QR::type = QR::std);
 
   ComplexQRP (const ComplexQRP& a) : ComplexQR (a), p (a.p) { }
 
   ComplexQRP& operator = (const ComplexQRP& a)
     {
       if (this != &a)
 	{
 	  ComplexQR::operator = (a);
 	  p = a.p;
 	}
       return *this;
     }
 
   ~ComplexQRP (void) { }
 
+  void init (const ComplexMatrix&, QR::type = QR::std);
+
   Matrix P (void) const { return p; }
 
-  friend ostream&  operator << (ostream& os, const ComplexQRP& a);
+  friend ostream&  operator << (ostream&, const ComplexQRP&);
 
 private:
 
   Matrix p;
 };
 
 #endif
 
diff --git a/liboctave/dbleQR.cc b/liboctave/dbleQR.cc
--- a/liboctave/dbleQR.cc
+++ b/liboctave/dbleQR.cc
@@ -40,16 +40,23 @@ extern "C"
 				const int&, int&); 
 
   int F77_FCN (dorgqr, DORGQR) (const int&, const int&, const int&,
 				double*, const int&, double*, double*,
 				const int&, int&);
 }
 
 QR::QR (const Matrix& a, QR::type qr_type)
+  : q (), r ()
+{
+  init (a, qr_type);
+}
+
+void
+QR::init (const Matrix& a, QR::type qr_type)
 {
   int m = a.rows ();
   int n = a.cols ();
 
   if (m == 0 || n == 0)
     {
       (*current_liboctave_error_handler) ("QR must have non-empty matrix");
       return;
diff --git a/liboctave/dbleQR.h b/liboctave/dbleQR.h
--- a/liboctave/dbleQR.h
+++ b/liboctave/dbleQR.h
@@ -40,37 +40,39 @@ public:
     {
       std,
       raw,
       economy,
     };
 
   QR (void) : q (), r () { }
 
-  QR (const Matrix& A, type qr_type = QR::std);
+  QR (const Matrix&, QR::type = QR::std);
 
   QR (const QR& a) : q (a.q), r (a.r) { }
 
   QR& operator = (const QR& a)
     {
       if (this != &a)
 	{
 	  q = a.q;
 	  r = a.r;
 	}
       return *this;
     }
 
   ~QR (void) { }
 
+  void init (const Matrix&, QR::type);
+
   Matrix Q (void) const { return q; }
 
   Matrix R (void) const { return r; }
 
-  friend ostream&  operator << (ostream& os, const QR& a);
+  friend ostream&  operator << (ostream&, const QR&);
 
 protected:
 
   Matrix q;
   Matrix r;
 };
 
 #endif
diff --git a/liboctave/dbleQRP.cc b/liboctave/dbleQRP.cc
--- a/liboctave/dbleQRP.cc
+++ b/liboctave/dbleQRP.cc
@@ -44,46 +44,47 @@ extern "C"
   int F77_FCN (dorgqr, DORGQR) (const int&, const int&, const int&,
 				double*, const int&, double*, double*,
 				const int&, int&); 
 }
 
 // It would be best to share some of this code with QR class...
 
 QRP::QRP (const Matrix& a, QR::type qr_type)
+  : QR (), p ()
+{
+  init (a, qr_type);
+}
+
+void
+QRP::init (const Matrix& a, QR::type qr_type)
 {
   assert (qr_type != QR::raw);
 
   int m = a.rows ();
   int n = a.cols ();
 
   if (m == 0 || n == 0)
     {
       (*current_liboctave_error_handler) ("QR must have non-empty matrix");
       return;
     }
 
-  int min_mn = m < n ? m : n;
-  Array<double> tau (min_mn);
+  Array<double> tau (m < n ? m : n);
   double *ptau = tau.fortran_vec ();
 
-  int lwork = 3*n;
+  int lwork = 3*n > 32*m ? 3*n : 32*m;
   Array<double> work (lwork);
   double *pwork = work.fortran_vec ();
 
   int info = 0;
 
-  Matrix A_fact;
+  Matrix A_fact = a;
   if (m > n)
-    {
-      A_fact.resize (m, m);
-      A_fact.insert (a, 0, 0);
-    }
-  else
-    A_fact = a;
+    A_fact.resize (m, m, 0.0);
 
   double *tmp_data = A_fact.fortran_vec ();
 
   Array<int> jpvt (n, 0);
   int *pjpvt = jpvt.fortran_vec ();
 
   // Code to enforce a certain permutation could go here...
 
@@ -91,54 +92,48 @@ QRP::QRP (const Matrix& a, QR::type qr_t
 
   if (f77_exception_encountered)
     (*current_liboctave_error_handler) ("unrecoverable error in dgeqpf");
   else
     {
       // Form Permutation matrix (if economy is requested, return the
       // indices only!)
 
-      if (qr_type == QR::economy && m > n)
+      if (qr_type == QR::economy)
 	{
 	  p.resize (1, n, 0.0);
 	  for (int j = 0; j < n; j++)
 	    p.elem (0, j) = jpvt.elem (j);
 	}
       else
 	{
 	  p.resize (n, n, 0.0);
 	  for (int j = 0; j < n; j++)
 	    p.elem (jpvt.elem (j) - 1, j) = 1.0;
 	}
 
-      volatile int n2;
+      if (qr_type == QR::economy && m > n)
+	r.resize (n, n, 0.0);
+      else
+	r.resize (m, n, 0.0);
 
-      if (qr_type == QR::economy && m > n)
-	{
-	  n2 = n;
-	  r.resize (n, n, 0.0);
-	}
-      else
-	{
-	  n2 = m;
-	  r.resize (m, n, 0.0);
-	}
+      int min_mn = m < n ? m : n;
 
       for (int j = 0; j < n; j++)
 	{
 	  int limit = j < min_mn-1 ? j : min_mn-1;
 	  for (int i = 0; i <= limit; i++)
 	    r.elem (i, j) = A_fact.elem (i, j);
 	}
 
-      lwork = 32*m;
-      work.resize (lwork);
-      double *pwork = work.fortran_vec ();
+      int n2 = m;
+      if (qr_type == QR::economy)
+	n2 = min_mn;
 
-      F77_XFCN (dorgqr, DORGQR, (m, m, min_mn, tmp_data, m, ptau,
+      F77_XFCN (dorgqr, DORGQR, (m, n2, min_mn, tmp_data, m, ptau,
 				 pwork, lwork, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in dorgqr");
       else
 	{
 	  q = A_fact;
 	  q.resize (m, n2);
diff --git a/liboctave/dbleQRP.h b/liboctave/dbleQRP.h
--- a/liboctave/dbleQRP.h
+++ b/liboctave/dbleQRP.h
@@ -33,36 +33,38 @@ class ostream;
 
 class
 QRP : public QR
 {
 public:
 
   QRP (void) : QR (), p () { }
 
-  QRP (const Matrix& A, QR::type qr_type = QR::std);
+  QRP (const Matrix&, QR::type = QR::std);
 
   QRP (const QRP& a) : QR (a), p (a.p) { }
 
   QRP& operator = (const QRP& a)
     {
       if (this != &a)
 	{
 	  QR::operator = (a);
 	  p = a.p;
 	}
 
       return *this;
     }
 
   ~QRP (void) { }
 
+  void init (const Matrix&, QR::type = QR::std);
+
   Matrix P (void) const { return p; }
 
-  friend ostream&  operator << (ostream& os, const QRP& a);
+  friend ostream&  operator << (ostream&, const QRP&);
 
 protected:
 
   Matrix p;
 };
 
 #endif
 
