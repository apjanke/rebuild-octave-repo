# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1285691114 25200
#      Tue Sep 28 09:25:14 2010 -0700
# Node ID c9b0a75b02e834b245ad69d0d6c017a709448f89
# Parent  d81b6144c4ba8dffaca4931f4a784141af15ab1a
Make all regexp in Octave compatible with both POSIX and PCRE.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,9 +1,14 @@
-2010-08-15  Rik <octave@nomad.inbox5.com>
+2010-09-27  Rik <octave@nomad.inbox5.com>
+
+	* interpreter/mk_doc_cache.m: Use single quotes for regular expression
+	patterns where possible.
+
+2010-09-25  Rik <octave@nomad.inbox5.com>
 
 	* interpreter/mk_doc_cache.m: Remove requirement for PCRE to build
 	doc cache.  Correctly parse first sentence from docstrings with 
 	multiple @deftypefn lines.
 
 2010-09-15  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/Makefile.am (EXTRA_DIST): Add images.awk to the list.
diff --git a/doc/interpreter/mk_doc_cache.m b/doc/interpreter/mk_doc_cache.m
--- a/doc/interpreter/mk_doc_cache.m
+++ b/doc/interpreter/mk_doc_cache.m
@@ -40,20 +40,20 @@ for i = 1:nfiles
     tmp = fread (fid, Inf, "*char")';
     ## Strip off header lines
     [null, text{i}] = strtok (tmp, doc_delim);
   endif
 endfor
 text = [text{:}, doc_delim];
 
 ## Modify Octave-specific macros before passing to makeinfo
-text = regexprep (text, "@seealso *\\{([^}]*)\\}", "See also: $1.");
-text = regexprep (text, "@nospell *\\{([^}]*)\\}", "$1");
+text = regexprep (text, '@seealso *\{([^}]*)\}', "See also: $1.");
+text = regexprep (text, '@nospell *\{([^}]*)\}', "$1");
 text = regexprep (text, "-\\*- texinfo -\\*-[ \t]*[\r\n]*", "");
-text = regexprep (text, "@", "@@");
+text = regexprep (text, '@', "@@");
 
 ## Write data to temporary file for input to makeinfo
 [fid, name, msg] = mkstemp ("octave_doc_XXXXXX", true);
 if (fid < 0)
   error ("%s: %s\n", name, msg);
 endif
 fwrite (fid, text, "char");
 fclose (fid);
@@ -84,17 +84,17 @@ for i = 2:n
   block = formatted_text(delim_idx(i-1)+1:delim_idx(i)-1);
 
   [symbol, doc] = strtok (block, "\r\n");
 
   doc = regexprep (doc, "^[\r\n]+", '');
 
   ## Skip internal functions that start with __ as these aren't 
   ## indexed by lookfor.
-  if (length (symbol) > 2 && regexp (symbol, "^__.+__$"))
+  if (length (symbol) > 2 && regexp (symbol, '^__.+__$'))
     continue;
   endif
 
   if (isempty (doc))
     continue;
   endif
 
   tmp = doc;
@@ -106,26 +106,26 @@ for i = 2:n
       tmp = tmp(e+1:end);
     endif
   until (isempty (s))
 
   if (! found)
     continue;
   endif
 
-  end_of_first_sentence = regexp (tmp, '(\.|[\r\n][\r\n])', "once");
+  end_of_first_sentence = regexp (tmp, "(\\.|[\r\n][\r\n])", "once");
   if (isempty (end_of_first_sentence))
     end_of_first_sentence = length (tmp);
   else
     end_of_first_sentence = end_of_first_sentence;
   endif
 
   first_sentence = tmp(1:end_of_first_sentence);
-  first_sentence = regexprep (first_sentence, "([\r\n]|  *)", " ");
-  first_sentence = regexprep (first_sentence, "^ +", "");
+  first_sentence = regexprep (first_sentence, "([\r\n]| {2,})", " ");
+  first_sentence = regexprep (first_sentence, '^ +', "");
 
   cache{1,k} = symbol;
   cache{2,k} = doc;
   cache{3,k} = first_sentence;
   k++;
 endfor
 
 cache(:,k:end) = [];    # delete unused pre-allocated entries
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,20 +1,46 @@
+2010-09-27  Rik <octave@nomad.inbox5.com>
+
+	* scripts/io/dlmwrite.m: Replace non-POSIX '\d' regex pattern.
+
+	* scripts/miscellaneous/edit.m, scripts/path/savepath.m, 
+	scripts/plot/__gnuplot_get_var__.m,
+	scripts/plot/private/__gnuplot_has_terminal__.m,
+	scripts/plot/refreshdata.m, scripts/plot/whitebg.m,
+	scripts/testfun/runtests.m, scripts/time/datestr.m: Use single quotes
+	for regular expression patterns when possible.
+
+	* scripts/miscellaneous/ls.m, scripts/plot/__gnuplot_ginput__.m, 
+	scripts/plot/__go_draw_axes__.m, scripts/plot/private/__ezplot__.m,
+	scripts/testfun/test.m: Remove uses of shorthand character classes
+	within list operators which is unsupported by POSIX regex.
+
+	* scripts/pkg/get_forge_pkg.m: Select desired output from regexp
+	rather than ignoring most outputs.
+
 2010-09-28  Ben Abbott <bpabbott@mac.com>
 
 	* plot/__print_parse_opts__.m: Fix test.
 
 2010-09-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* elfun/lcm.m: Simplify.
 
 2010-09-27  Ben Abbott <bpabbott@mac.com>
 
 	* plot/__print_parse_opts__.m: Properly crop eps image and fix tests.
 
+	scripts/plot/__go_draw_axes__.m, scripts/plot/private/__ezplot__.m,
+	scripts/testfun/test.m: Remove uses of shorthand character classes
+	within list operators which is unsupported by POSIX regex.
+
+	* scripts/pkg/get_forge_pkg.m: Select desired output from regexp
+	rather than ignoring most outputs.
+
 2010-09-26  Rik <octave@nomad.inbox5.com>
 
 	* testfun/runtests.m (has_tests): Recode to remove requirement for PCRE.
 	Bug #31025.
 
 2010-09-25  Ben Abbott <bpabbott@mac.com>
 
 	* plot/__print_parse_opts__.m: Recongize gs devices {eps/pdf/ps}write.
diff --git a/scripts/io/dlmwrite.m b/scripts/io/dlmwrite.m
--- a/scripts/io/dlmwrite.m
+++ b/scripts/io/dlmwrite.m
@@ -167,17 +167,17 @@ function dlmwrite (file, a, varargin)
   if (fid < 0)
     error (msg);
   else
     if (r > 0)
       fprintf (fid, "%s",
                repmat ([repmat(delim, 1, c + columns(a)-1), newline], 1, r));
     endif
     if (iscomplex (a))
-      cprecision = regexprep (precision, '^%([-\d.])','%+$1');
+      cprecision = regexprep (precision, '^%([-.0-9])','%+$1');
       template = [precision, cprecision, "i", ...
                   repmat([delim, precision, cprecision, "i"], 1, ...
                   columns(a) - 1), newline ];
     else
       template = [precision, repmat([delim, precision], 1, columns(a)-1),...
                   newline];
     endif
     if (c > 0)
diff --git a/scripts/miscellaneous/edit.m b/scripts/miscellaneous/edit.m
--- a/scripts/miscellaneous/edit.m
+++ b/scripts/miscellaneous/edit.m
@@ -241,21 +241,21 @@ function ret = edit (file, state)
 
   ## Create list of explicit and implicit file names.
   filelist = {file};
   ## If file has no extension, add file.m and file.cc to the list.
   idx = rindex (file, ".");
   if (idx == 0)
     ## Create the list of files to look for
     filelist = {file};
-    if (isempty (regexp (file, "\\.m$")))
+    if (isempty (regexp (file, '\.m$')))
       ## No ".m" at the end of the file, add to the list.
       filelist{end+1} = cat (2, file, ".m");
     endif
-    if (isempty (regexp (file, "\\.cc$")))
+    if (isempty (regexp (file, '\.cc$')))
       ## No ".cc" at the end of the file, add to the list.
       filelist{end+1} = cat (2, file, ".cc");
     endif
   endif
 
   ## If the file includes a path, it may be an overloaded function.
   if (! strcmp (file, "@") && index (file, filesep))
     ## No "@" at the beginning of the file, add to the list.
diff --git a/scripts/miscellaneous/ls.m b/scripts/miscellaneous/ls.m
--- a/scripts/miscellaneous/ls.m
+++ b/scripts/miscellaneous/ls.m
@@ -55,17 +55,17 @@ function retval = ls (varargin)
     if (page_screen_output () || nargout > 0)
 
       [status, output] = system (cmd);
 
       if (status == 0)
         if (nargout == 0)
           puts (output);
         else
-          retval = strvcat (regexp (output, '[^\s]+', 'match'){:});
+          retval = strvcat (regexp (output, '\S+', 'match'){:});
         endif
       else
         error ("ls: command exited abnormally with status %d", status);
       endif
 
     else
       ## Just let the output flow if the pager is off.  That way the
       ## output from things like "ls -R /" will show up immediately and
diff --git a/scripts/path/savepath.m b/scripts/path/savepath.m
--- a/scripts/path/savepath.m
+++ b/scripts/path/savepath.m
@@ -203,12 +203,12 @@ function varargout = savepath (savefile)
 
   if (nargout == 1)
     varargout{1} = retval;
   endif
   
 endfunction  
 
 function path_elements = parsepath (p)
-  pat = sprintf ("([^%s]+[%s$])", pathsep, pathsep);
+  pat = sprintf ('([^%s]+[%s$])', pathsep, pathsep);
   [jnk1, jnk2, jnk3, path_elements] = regexpi (strcat (p, pathsep), pat);
 endfunction
 
diff --git a/scripts/pkg/get_forge_pkg.m b/scripts/pkg/get_forge_pkg.m
--- a/scripts/pkg/get_forge_pkg.m
+++ b/scripts/pkg/get_forge_pkg.m
@@ -36,18 +36,18 @@ function [ver, url] = get_forge_pkg (nam
   name = tolower (name);
 
   ## Try to download package's index page.
   [html, succ] = urlread (sprintf ("http://octave.sourceforge.net/%s/index.html", name));
   if (succ)
     ## Remove blanks for simpler matching.
     html(isspace(html)) = [];
     ## Good. Let's grep for the version.
-    pat = "<tdclass=""package_table"">PackageVersion:</td><td>([0-9\\.]*)</td>";
-    [~, ~, ~, ~, t] = regexp (html, pat);
+    pat = "<tdclass=""package_table"">PackageVersion:</td><td>([0-9.]*)</td>";
+    t = regexp (html, pat, "tokens");
     if (isempty (t) || isempty(t{1}))
       error ("get_forge_pkg: could not read version number from package's page.");
     else
       ver = t{1}{1};
       if (nargout > 1)
         # Build download string.
         urlbase = "http://downloads.sourceforge.net/octave/%s-%s.tar.gz?download";
         url = sprintf (urlbase, name, ver);
@@ -56,17 +56,17 @@ function [ver, url] = get_forge_pkg (nam
           warning ("get_forge_pkg: download URL not verified.");
         endif
       endif
     endif
   else
     ## Try get the list of all packages.
     [html, succ] = urlread ("http://octave.sourceforge.net/packages.php");
     if (succ)
-      [~, ~, ~, ~, t] = regexp (html, "<div class=""package"" id=""(\\w+)"">");
+      t = regexp (html, "<div class=""package"" id=""(\\w+)"">", "tokens");
       t = horzcat (t{:});
       if (any (strcmp (t, name)))
         error ("get_forge_pkg: package name exists, but index page not available");
       else
         ## Try a simplistic method to determine close names.
         dist = cellfun (@(n) length (setdiff (name, n)), t);
         [~, i] = min (dist);
         error ("get_forge_pkg: package not found: ""%s"". Maybe you meant ""%s?""", name, t{i});
diff --git a/scripts/plot/__gnuplot_get_var__.m b/scripts/plot/__gnuplot_get_var__.m
--- a/scripts/plot/__gnuplot_get_var__.m
+++ b/scripts/plot/__gnuplot_get_var__.m
@@ -125,17 +125,17 @@ function gp_var_value = __gnuplot_get_va
       fflush (ostream);
 
       str = {};
       while (isempty (str))
         str = char (fread (istream)');
         if (isempty (str))
           sleep (0.05);
         else
-          str = regexp (str, "OCTAVE:.*", "match");
+          str = regexp (str, 'OCTAVE:.*', "match");
           str = str{end}(8:end);
         endif
         fclear (istream);
       endwhile
     endif
 
     ## Strip out EOLs and the continuation character "|"
     str(str=="\n") = "";
diff --git a/scripts/plot/__gnuplot_ginput__.m b/scripts/plot/__gnuplot_ginput__.m
--- a/scripts/plot/__gnuplot_ginput__.m
+++ b/scripts/plot/__gnuplot_ginput__.m
@@ -108,17 +108,17 @@ function [x, y, button] = __gnuplot_ginp
         fflush (ostream);
 
         str = {};
         while (isempty (str))
           str = char (fread (istream)');
           if (isempty (str))
             sleep (0.05);
           else
-            str = regexp (str, 'OCTAVE:\s+[\d.\+-]+\s+[\d.\+-]+\s+\d*', 'match');
+            str = regexp (str, 'OCTAVE:\s+[-+.0-9]+\s+[-+.0-9]+\s+[0-9]*', 'match');
           endif
           fclear (istream);
         endwhile
         [x(k), y(k), button(k), count] = sscanf (str{end}(8:end), "%f %f %d", "C");
       endif
 
       if ([x(k), y(k), button(k)] == [0, 0, -1])
         ## Mousing not active (no plot yet).
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -1985,17 +1985,17 @@ function do_tics_1 (ticmode, tics, mtics
         if (mirror)
           fprintf (plot_stream, "set %stics %s %s %s mirror (", ax, 
                    tickdir, ticklength, axispos);
         else
           fprintf (plot_stream, "set %stics %s %s %s nomirror (", ax,
                    tickdir, ticklength, axispos);
         endif
  
-        labels = regexprep(labels, "%", "%%");
+        labels = regexprep(labels, '%', "%%");
         for i = 1:ntics
           fprintf (plot_stream, " \"%s\" %.15g", labels{k++}, tics(i));
           if (i < ntics)
             fputs (plot_stream, ", ");
           endif
           if (k > nlabels)
             k = 1;
           endif
@@ -2310,17 +2310,17 @@ function str = __tex2enhanced__ (str, fn
       i ++;
     endif
   endwhile
 
 endfunction
 
 function l = length_string (s)
   l = length (s) - length (strfind(s,'{')) - length (strfind(s,'}'));
-  m = regexp (s, '/([\w\-]+|[\w\-]+=\d+)', 'matches');
+  m = regexp (s, '/([a-zA-Z0-9_-]+|[a-zA-Z0-9_-]+=[0-9]+)', 'matches');
   if (!isempty (m))
     l = l - sum (cellfun (@length, m));
   endif
 endfunction
 
 function sym = __setup_sym_table__ ()
   ## Setup the translation table for TeX to gnuplot enhanced mode.
   sym.forall = '{/Symbol \042}';
diff --git a/scripts/plot/private/__ezplot__.m b/scripts/plot/private/__ezplot__.m
--- a/scripts/plot/private/__ezplot__.m
+++ b/scripts/plot/private/__ezplot__.m
@@ -114,17 +114,17 @@ function [h, needusage] = __ezplot__ (pf
     else
       xarg = argnames(fun)(1);
       yarg = argnames(fun)(2);
     endif
   elseif (isa (fun, "function_handle"))
     fstr = func2str (fun);
     if (length (findstr (fstr, ")")) != 0)
       args = regexp (substr (fstr, 3, findstr (fstr, ")")(1) - 3), 
-                     '(\w[\w\d]*)', 'tokens');
+                     '(\w+)', 'tokens');
     fstr = substr (fstr, findstr (fstr, ")")(1) + 1);
     else
       args = {{"x"}};
     endif
     if (isplot && length (args) == 2)
       nargs = 2;
     elseif (length (args) != nargs)
       error ("%s: excepting a function of %d arguments", func, nargs);
@@ -172,17 +172,17 @@ function [h, needusage] = __ezplot__ (pf
       endif
       funy = vectorize (funy);
       fstry = formula (funy);
     elseif (isa (funy, "function_handle"))
       parametric = true;
       fstry = func2str (funy);
       if (length (findstr (fstry, ")")) != 0)
         args = regexp (substr (fstry, 3, findstr (fstry, ")")(1) - 3), 
-                       '(\w[\w\d]*)', 'tokens');
+                       '(\w+)', 'tokens');
         fstry = substr (fstry, findstr (fstry, ")")(1) + 1);
       else
         args = {{"y"}};
       endif
       if (length (args) != nargs)
         error ("%s: excepting a function of %d arguments", func, nargs);
       endif
     endif
@@ -212,17 +212,17 @@ function [h, needusage] = __ezplot__ (pf
         if (length (argnames (funz)) != nargs)
           error ("%s: excepting a function of %d arguments", func, nargs);
         endif
         funz = vectorize (funz);
         fstrz = formula (funz);
       elseif (isa (funz, "function_handle"))
         fstrz = func2str (funz);
         args = regexp (substr (fstrz, 3, findstr (fstrz, ")")(1) - 3), 
-                       '(\w[\w\d]*)', 'tokens');
+                       '(\w+)', 'tokens');
         if (length (args) != nargs)
           error ("%s: excepting a function of %d arguments", func, nargs);
         endif
         fstrz = substr (fstrz, findstr (fstrz, ")")(1) + 1);
       else
         error ("%s: parametric plots expect 3 functions", func);
       endif
     endif
@@ -325,35 +325,35 @@ function [h, needusage] = __ezplot__ (pf
       Y = YY;
 
       ## Eliminate the singularities
       X = __eliminate_sing__ (X);
       Y = __eliminate_sing__ (Y);
       Z = __eliminate_sing__ (Z);
     endif
 
-    fstrx = regexprep (regexprep (regexprep (fstrx,'\.\^\s*','^'), 
-                      '\./', '/'), '[\.]*\*', '');
-    fstry = regexprep (regexprep (regexprep (fstry,'\.\^\s*','^'), 
-                      '\./', '/'), '[\.]*\*', '');
+    fstrx = regexprep (regexprep (regexprep (fstrx,'\s*\.?\^\s*','^'), 
+                      '\./', '/'), '\.?\*', '');
+    fstry = regexprep (regexprep (regexprep (fstry,'\s*\.?\^\s*','^'), 
+                      '\./', '/'), '\.?\*', '');
     if (isplot)
       fstr = cstrcat ("x = ",fstrx,", y = ",fstry);
     else
-      fstrz = regexprep (regexprep (regexprep (fstrz,'\.\^\s*','^'), 
-                                    '\./', '/'), '[\.]*\*', '');
+      fstrz = regexprep (regexprep (regexprep (fstrz,'\s*\.?\^\s*','^'), 
+                                    '\./', '/'), '\.?\*', '');
       fstr = cstrcat ("x = ",fstrx,",y = ",fstry,", z = ",fstrz);
     endif
   else
     if (isplot3)
       needusage = true;
       return;
     endif
 
-    fstr = regexprep (regexprep (regexprep (fstr,'\.\^\s*','^'), '\./', '/'), 
-                      '[\.]*\*', '');
+    fstr = regexprep (regexprep (regexprep (fstr,'\s*\.?\^\s*','^'), '\./', '/'), 
+                      '\.?\*', '');
     if (isplot && nargs == 2)
       if (strcmp (typeinfo (fun), "inline function") && 
           !isempty (strfind (formula (fun) , "=")))
         fun = inline (cstrcat (strrep (formula (fun), "=", "- ("), ")"));
       else
         fstr = cstrcat (fstr, " = 0");
       endif
 
diff --git a/scripts/plot/private/__gnuplot_has_terminal__.m b/scripts/plot/private/__gnuplot_has_terminal__.m
--- a/scripts/plot/private/__gnuplot_has_terminal__.m
+++ b/scripts/plot/private/__gnuplot_has_terminal__.m
@@ -28,17 +28,17 @@ function gnuplot_supports_term = __gnupl
   if (! isempty (n))
     term = term(1:n-1);
   endif
   if (__gnuplot_has_feature__ ("variable_GPVAL_TERMINALS"))
     if (nargin < 2)
       plot_stream = __gnuplot_open_stream__ (2);
     endif
     available_terminals = __gnuplot_get_var__ (plot_stream, "GPVAL_TERMINALS");
-    available_terminals = regexp (available_terminals, "\\b\\w+\\b", "match");
+    available_terminals = regexp (available_terminals, '\b\w+\b', "match");
     if (nargin < 2 && ! isempty (plot_stream))
       pclose (plot_stream(1));
       if (numel (plot_stream) > 1)
         pclose (plot_stream(2));
       endif
       if (numel (plot_stream) > 2)
         waitpid (plot_stream(3));
       endif
diff --git a/scripts/plot/refreshdata.m b/scripts/plot/refreshdata.m
--- a/scripts/plot/refreshdata.m
+++ b/scripts/plot/refreshdata.m
@@ -75,17 +75,17 @@ function refreshdata (h, ws)
 
   h = findall (h);
   objs = [];
   props = {};
 
   for i = 1 : numel (h)
     obj = get (h (i));
     fldnames = fieldnames (obj);
-    m = regexpi (fieldnames(obj), "^.+datasource$", "match");
+    m = regexpi (fieldnames(obj), '^.+datasource$', "match");
     idx = cellfun (@(x) !isempty(x), m);
     if (any (idx))
       tmp = m(idx);
       props = [props; {vertcat(tmp{:})}];
       objs  = [objs ; h(i)];
     endif
   endfor
 
diff --git a/scripts/plot/whitebg.m b/scripts/plot/whitebg.m
--- a/scripts/plot/whitebg.m
+++ b/scripts/plot/whitebg.m
@@ -67,17 +67,17 @@ function whitebg (varargin)
 
   axes = findall (fig, "type", "axes");
   if (isnan (color))
     ## Root figure. Set the default axes and figure properties so that
     ## subsequent plots have the new color scheme
     if (isroot)
       fac = get (0, "factory");
       fields = fieldnames (fac);
-      fieldindex = intersect (find (!cellfun (@isempty, regexp(fields, ".*color.*"))), union (find (!cellfun (@isempty, regexp(fields, "factoryaxes.*"))), find (!cellfun (@isempty, regexp(fields, "factoryfigure.*")))));
+      fieldindex = intersect (find (!cellfun (@isempty, regexp(fields, '.*color.*'))), union (find (!cellfun (@isempty, regexp(fields, 'factoryaxes.*'))), find (!cellfun (@isempty, regexp(fields, 'factoryfigure.*')))));
 
       ## Check whether the factory value has been replaced
       for nf = 1 : numel (fieldindex);
         defaultfield = strrep (fields {fieldindex (nf)}, "factory", "default");
         try
           defaultvalue = 1 - get (0, defaultfield {n});
         catch
           field = fields {fieldindex (nf)};
@@ -97,34 +97,34 @@ function whitebg (varargin)
       endfor 
       handles = children;
       h = union (h, children);
     endwhile
 
     for nh = 1 : numel(h)
       p = get (h (nh));
       fields = fieldnames (p);
-      fieldindex = find (!cellfun (@isempty, regexp(fields, ".*color.*")));
+      fieldindex = find (!cellfun (@isempty, regexp(fields, '.*color.*')));
       if (numel (fieldindex))
         for nf = 1 : numel (fieldindex);
           field = fields {fieldindex (nf)};
           c = subsref (p, struct ("type", ".", "subs", field));
           if (! ischar(c) && columns(c) == 3)
             set (h (nh), field, 1 - c);
           endif
         endfor
       endif
 
       ## If h(nh) is a figure or axes invert default color properties
       typ = subsref (p, struct ("type", ".", "subs", "type"));
       if (strcmp (typ, "axes") || strcmp (typ, "figure"))
         def = get (h (nh), "default");
         fields = fieldnames (def);
         if (! isempty (fields))
-          fieldindex = find (!cellfun (@isempty, regexp(fields, ".*color.*")));
+          fieldindex = find (!cellfun (@isempty, regexp(fields, '.*color.*')));
           for nf = 1 : numel (fieldindex)
             defaultfield = fields {fieldindex (nf)};
             defaultvalue = 1 - subsref (def, struct ("type", ".", "subs", defaultfield));
             set (h (nh), defaultfield, defaultvalue);
           endfor
         endif
       endif
     endfor
diff --git a/scripts/testfun/runtests.m b/scripts/testfun/runtests.m
--- a/scripts/testfun/runtests.m
+++ b/scripts/testfun/runtests.m
@@ -77,17 +77,17 @@ endfunction
 
 function retval = has_tests (f)
   fid = fopen (f);
   if (fid >= 0)
     str = fread (fid, "*char")';
     fclose (fid);
     ## Avoid PCRE 'lineanchors' by searching for newline followed by PTN.
     ## Equivalent to regexp ('^PTN','lineanchors')
-    retval = ! isempty (regexp (str, '[\r\n]\s*%!(test|assert|error|warning)', "once"));
+    retval = ! isempty (regexp (str, "[\r\n]\\s*%!(test|assert|error|warning)", "once"));
   else
     error ("runtests: fopen failed: %s", f);
   endif
 endfunction
 
 function print_pass_fail (n, p)
   if (n > 0)
     printf (" PASS %4d/%-4d", p, n);
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -439,17 +439,17 @@ function [__ret1, __ret2, __ret3, __ret4
         clear __test__;
       endif
       ## Code already processed.
       __code = "";
       
 ### TESTIF
 
     elseif (strcmp (__type, "testif"))
-      [__e, __feat] = regexp (__code, '^\s*([^\s]+)', 'end', 'tokens');
+      [__e, __feat] = regexp (__code, '^\s*(\S+)', 'end', 'tokens');
       if (isempty (findstr (octave_config_info ("DEFS"), __feat{1}{1})))
         __xskip++;
         __istest = 0;
         __code = ""; # Skip the code.
         __msg = sprintf ("%sskipped test\n", __signal_skip);
       else
         __istest = 1;
         __code = __code(__e + 1 : end);
diff --git a/scripts/time/datestr.m b/scripts/time/datestr.m
--- a/scripts/time/datestr.m
+++ b/scripts/time/datestr.m
@@ -224,54 +224,54 @@ function retval = datestr (date, f, p)
 
     if (isnumeric (f))
       df = dateform{f + 1};
     else
       df = f;
     endif
 
     df_orig = df;
-    df = regexprep (df, "[AP]M", "%p");
+    df = regexprep (df, '[AP]M', "%p");
     if (strcmp (df, df_orig))
       ## PM not set.
       df = strrep (df, "HH", "%H");
     else
       df = strrep (df, "HH", sprintf ("%2d", v(i,4)));
     endif  
 
-    df = regexprep (df, "[Yy][Yy][Yy][Yy]", "%Y");
+    df = regexprep (df, '[Yy][Yy][Yy][Yy]', "%Y");
 
-    df = regexprep (df, "[Yy][Yy]", "%y");
+    df = regexprep (df, '[Yy][Yy]', "%y");
 
-    df = regexprep (df, "[Dd][Dd][Dd][Dd]", "%A");
+    df = regexprep (df, '[Dd][Dd][Dd][Dd]', "%A");
 
-    df = regexprep (df, "[Dd][Dd][Dd]", "%a");
+    df = regexprep (df, '[Dd][Dd][Dd]', "%a");
 
-    df = regexprep (df, "[Dd][Dd]", "%d");
+    df = regexprep (df, '[Dd][Dd]', "%d");
 
     tmp = names_d{weekday (datenum (v(i,1), v(i,2), v(i,3)))};
-    df = regexprep (df, "([^%])[Dd]", sprintf ("$1%s", tmp));
-    df = regexprep (df, "^[Dd]", sprintf ("%s", tmp));
+    df = regexprep (df, '([^%])[Dd]', sprintf ("$1%s", tmp));
+    df = regexprep (df, '^[Dd]', sprintf ("%s", tmp));
 
     df = strrep (df, "mmmm", "%B");
 
     df = strrep (df, "mmm", "%b");
 
     df = strrep (df, "mm", "%m");
 
     tmp = names_m{v(i,2)};
-    pos = regexp (df, "[^%]m") + 1;
+    pos = regexp (df, '[^%]m') + 1;
     df(pos) = tmp;
-    df = regexprep (df, "^m", tmp);
+    df = regexprep (df, '^m', tmp);
 
     df = strrep (df, "MM", "%M");
 
     df = strrep (df, "SS", "%S");
 
-    df = regexprep (df, "[Qq][Qq]", sprintf ("Q%d", fix ((v(i,2) + 2) / 3)));
+    df = regexprep (df, '[Qq][Qq]', sprintf ("Q%d", fix ((v(i,2) + 2) / 3)));
 
     vi = v(i,:);
     tm.year = vi(1) - 1900;
     tm.mon = vi(2) - 1;
     tm.mday = vi(3);
     tm.hour = vi(4);
     tm.min = vi(5);
     sec = vi(6);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -13,16 +13,27 @@ 2010-09-28  Jaroslav Hajek  <highegg@gma
 
 2010-09-27  John W. Eaton  <jwe@octave.org>
 
 	* gl-render.cc (opengl_renderer::draw_axes): Reverse order in
 	which child objects are processed.
 
 2010-09-26  Rik <octave@nomad.inbox5.com>
 
+	* load-path.cc: Use single quotes for regex when possible.
+	* DLD-FUNCTIONS/regexp.cc (regexp): Update docstring to highlight
+	differences between POSIX and PCRE regex.
+
+2010-09-26  Rik <octave@nomad.inbox5.com>
+
+	* load-path.cc: Use single quotes for regular expression patterns when
+	possible.
+
+2010-09-26  Rik <octave@nomad.inbox5.com>
+
 	* DLD-FUNCTIONS/regexp.cc (regexp, regexprep, regexpi): Update
 	docstrings to more fully explain PCRE.  Modify advanced tests to run
 	only run when PCRE is present.
 
 2010-09-25  John W. Eaton  <jwe@octave.org>
 
 	* toplev.cc (Fquit): Allow any number of output parameters.
 
diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -916,28 +916,34 @@ Match @var{n} or more times\n\
 @item @{@var{m},@var{n}@}\n\
 Match between @var{m} and @var{n} times\n\
 @end table\n\
 \n\
 @item [@dots{}] [^@dots{}]\n\
 \n\
 List operators.  The pattern will match any character listed between \"[\"\n\
 and \"]\".  If the first character is \"^\" then the pattern is inverted and\n\
-any character except those listed between brackets will match\n\
+any character except those listed between brackets will match.\n\
+\n\
+With PCRE support, escape sequences defined below can be used inside list\n\
+operators.  For example, a template for a floating point number might be\n\
+@code{[-+.\\d]+}.  POSIX regular expressions do not use escape sequences\n\
+and any backslash @samp{\\} will be interpreted literally as one\n\
+of the list of characters to match.\n\
 \n\
 @item ()\n\
 Grouping operator\n\
 \n\
 @item |\n\
 Alternation operator.  Match one of a choice of regular expressions.  The\n\
-alternatives must be delimited by the grouping operator @code{()} above\n\
+alternatives must be delimited by the grouping operator @code{()} above.\n\
 \n\
 @item ^ $\n\
 Anchoring operators.  Requires pattern to occur at the start (@code{^}) or\n\
-end (@code{$}) of the string\n\
+end (@code{$}) of the string.\n\
 @end table\n\
 \n\
 In addition, the following escaped characters have special meaning.  Note,\n\
 it is recommended to quote @var{pat} in single quotes, rather than double\n\
 quotes, to avoid the escape sequences being interpreted by Octave before\n\
 being passed to @code{regexp}.\n\
 \n\
 @table @code\n\
@@ -963,40 +969,46 @@ Match the end of a word\n\
 Match any whitespace character\n\
 \n\
 @item \\S\n\
 Match any non-whitespace character\n\
 \n\
 @item \\d\n\
 Match any digit\n\
 \n\
+This sequence is only available with PCRE support.  For POSIX regular\n\
+expressions use the following list operator @code{[0-9]}.\n\
+\n\
 @item \\D\n\
 Match any non-digit\n\
+\n\
+This sequence is only available with PCRE support.  For POSIX regular\n\
+expressions use the following list operator @code{[^0-9]}.\n\
 @end table\n\
 \n\
 The outputs of @code{regexp} default to the order given below\n\
 \n\
-@table @asis\n\
-@item @var{s}\n\
+@table @var\n\
+@item s\n\
 The start indices of each matching substring\n\
 \n\
-@item @var{e}\n\
+@item e\n\
 The end indices of each matching substring\n\
 \n\
-@item @var{te}\n\
+@item te\n\
 The extents of each matched token surrounded by @code{(@dots{})} in\n\
 @var{pat}\n\
 \n\
-@item @var{m}\n\
+@item m\n\
 A cell array of the text of each match\n\
 \n\
-@item @var{t}\n\
+@item t\n\
 A cell array of the text of each token matched\n\
 \n\
-@item @var{nm}\n\
+@item nm\n\
 A structure containing the text of each matched named token, with the name\n\
 being used as the fieldname.  A named token is denoted by\n\
 @code{(?<name>@dots{})} and is only available with PCRE support.\n\
 @end table\n\
 \n\
 Particular output arguments, or the order of the output arguments, can be\n\
 selected by additional @var{opt} arguments.  These are strings and the\n\
 correspondence between the output arguments and the optional argument\n\
@@ -1151,51 +1163,48 @@ Alternatively, use (?x) in the pattern w
 %! [m, te, e, s, t] = regexp('short test string','\w*r\w*','once', 'match', 'tokenExtents', 'end', 'start', 'tokens');
 %! assert (s,1)
 %! assert (e,5)
 %! assert (isempty(te))
 %! assert (m,'short')
 %! assert (isempty(t))
 
 %!testif HAVE_PCRE
-%! ## This test is expected to fail if PCRE is not installed
 %! [s, e, te, m, t, nm] = regexp('short test string','(?<word1>\w*t)\s*(?<word2>\w*t)');
 %! assert (s,1)
 %! assert (e,10)
 %! assert (size(te), [1,1])
 %! assert (te{1}, [1 5; 7, 10])
 %! assert (m{1},'short test')
 %! assert (size(t),[1,1])
 %! assert (t{1}{1},'short')
 %! assert (t{1}{2},'test')
 %! assert (size(nm), [1,1])
 %! assert (!isempty(fieldnames(nm)))
 %! assert (sort(fieldnames(nm)),{'word1';'word2'})
 %! assert (nm.word1,'short')
 %! assert (nm.word2,'test')
 
 %!testif HAVE_PCRE
-%! ## This test is expected to fail if PCRE is not installed
 %! [nm, m, te, e, s, t] = regexp('short test string','(?<word1>\w*t)\s*(?<word2>\w*t)', 'names', 'match', 'tokenExtents', 'end', 'start', 'tokens');
 %! assert (s,1)
 %! assert (e,10)
 %! assert (size(te), [1,1])
 %! assert (te{1}, [1 5; 7, 10])
 %! assert (m{1},'short test')
 %! assert (size(t),[1,1])
 %! assert (t{1}{1},'short')
 %! assert (t{1}{2},'test')
 %! assert (size(nm), [1,1])
 %! assert (!isempty(fieldnames(nm)))
 %! assert (sort(fieldnames(nm)),{'word1';'word2'})
 %! assert (nm.word1,'short')
 %! assert (nm.word2,'test')
 
 %!testif HAVE_PCRE
-%! ## This test is expected to fail if PCRE is not installed
 %! [t, nm] = regexp("John Davis\nRogers, James",'(?<first>\w+)\s+(?<last>\w+)|(?<last>\w+),\s+(?<first>\w+)','tokens','names');
 %! assert (size(t), [1,2]);
 %! assert (t{1}{1},'John');
 %! assert (t{1}{2},'Davis');
 %! assert (t{2}{1},'Rogers');
 %! assert (t{2}{2},'James');
 %! assert (size(nm), [1,1]);
 %! assert (nm.first{1},'John');
@@ -1339,34 +1348,32 @@ syntax of the search pattern.\n\
 %! [m, te, e, s, t] = regexpi('ShoRt Test String','\w*r\w*','once', 'match', 'tokenExtents', 'end', 'start', 'tokens');
 %! assert (s,1)
 %! assert (e,5)
 %! assert (isempty(te))
 %! assert (m,'ShoRt')
 %! assert (isempty(t))
 
 %!testif HAVE_PCRE
-%! ## This test is expected to fail if PCRE is not installed
 %! [s, e, te, m, t, nm] = regexpi('ShoRt Test String','(?<word1>\w*t)\s*(?<word2>\w*t)');
 %! assert (s,1)
 %! assert (e,10)
 %! assert (size(te), [1,1])
 %! assert (te{1}, [1 5; 7, 10])
 %! assert (m{1},'ShoRt Test')
 %! assert (size(t),[1,1])
 %! assert (t{1}{1},'ShoRt')
 %! assert (t{1}{2},'Test')
 %! assert (size(nm), [1,1])
 %! assert (!isempty(fieldnames(nm)))
 %! assert (sort(fieldnames(nm)),{'word1';'word2'})
 %! assert (nm.word1,'ShoRt')
 %! assert (nm.word2,'Test')
 
 %!testif HAVE_PCRE
-%! ## This test is expected to fail if PCRE is not installed
 %! [nm, m, te, e, s, t] = regexpi('ShoRt Test String','(?<word1>\w*t)\s*(?<word2>\w*t)', 'names', 'match', 'tokenExtents', 'end', 'start', 'tokens');
 %! assert (s,1)
 %! assert (e,10)
 %! assert (size(te), [1,1])
 %! assert (te{1}, [1 5; 7, 10])
 %! assert (m{1},'ShoRt Test')
 %! assert (size(t),[1,1])
 %! assert (t{1}{1},'ShoRt')
@@ -1732,23 +1739,24 @@ This option is present for compatibility
 %! t = regexprep(xml,'<[!?][^>]*>','?');
 %! assert(t,'? <tag v="hello">some stuff?</tag>')
 
 %!test  # Check that 'tokenize' is ignored
 %! xml = '<!-- This is some XML --> <tag v="hello">some stuff<!-- sample tag--></tag>';
 %! t = regexprep(xml,'<[!?][^>]*>','','tokenize');
 %! assert(t,' <tag v="hello">some stuff</tag>')
 
-%!testif HAVE_PCRE # Capture replacement
+## Test capture replacement
+%!testif HAVE_PCRE
 %! data = "Bob Smith\nDavid Hollerith\nSam Jenkins";
 %! result = "Smith, Bob\nHollerith, David\nJenkins, Sam";
 %! t = regexprep(data,'(?m)^(\w+)\s+(\w+)$','$2, $1');
 %! assert(t,result)
 
-# Return the original if no match
+## Return the original if no match
 %!assert(regexprep('hello','world','earth'),'hello')
 
 ## Test a general replacement
 %!assert(regexprep("a[b]c{d}e-f=g", "[^A-Za-z0-9_]", "_"), "a_b_c_d_e_f_g");
 
 ## Make sure it works at the beginning and end
 %!assert(regexprep("a[b]c{d}e-f=g", "a", "_"), "_[b]c{d}e-f=g");
 %!assert(regexprep("a[b]c{d}e-f=g", "g", "_"), "a[b]c{d}e-f=_");
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -2142,18 +2142,18 @@ addpath (\"dir1:/dir2:~/dir3\");\n\
                 std::reverse (dir_elts.begin (), dir_elts.end ());
 
               for (std::list<std::string>::const_iterator p = dir_elts.begin ();
                    p != dir_elts.end ();
                    p++)
                 {
                   std::string dir = *p;
 
-                  //dir = regexprep (dir_elts{j}, "//+", "/");
-                  //dir = regexprep (dir, "/$", "");
+                  //dir = regexprep (dir_elts{j}, '//+', "/");
+                  //dir = regexprep (dir, '/$', "");
 
                   if (append)
                     load_path::append (dir, true);
                   else
                     load_path::prepend (dir, true);
 
                   need_to_update = true;
                 }
@@ -2208,18 +2208,18 @@ rmpath (\"dir1:/dir2:~/dir3\");\n\
               std::list<std::string> dir_elts = split_path (arg);
 
               for (std::list<std::string>::const_iterator p = dir_elts.begin ();
                    p != dir_elts.end ();
                    p++)
                 {
                   std::string dir = *p;
 
-                  //dir = regexprep (dir_elts{j}, "//+", "/");
-                  //dir = regexprep (dir, "/$", "");
+                  //dir = regexprep (dir_elts{j}, '//+', "/");
+                  //dir = regexprep (dir, '/$', "");
 
                   if (! load_path::remove (dir))
                     warning ("rmpath: %s: not found", dir.c_str ());
                   else
                     need_to_update = true;
                 }
             }
           else
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,12 @@
+2010-09-27  Rik <octave@nomad.inbox5.com>
+
+	* fntests.m: Use single quotes for regex when possible.
+
 2010-09-26  Rik <octave@nomad.inbox5.com>
 
 	* fntests.m (has_tests, has_functions): Recode to remove requirement 
 	for PCRE.
 
 2010-09-24  Rik <octave@nomad.inbox5.com>
 
 	* fntests.m: Rephrase output for clarity.
diff --git a/test/fntests.m b/test/fntests.m
--- a/test/fntests.m
+++ b/test/fntests.m
@@ -70,17 +70,17 @@ endfunction
 
 function retval = has_functions (f)
   n = length (f);
   if (n > 3 && strcmp (f((end-2):end), ".cc"))
     fid = fopen (f);
     if (fid >= 0)
       str = fread (fid, "*char")';
       fclose (fid);
-      retval = ! isempty (regexp (str,'[\r\n](DEFUN|DEFUN_DLD)\b', "once"));
+      retval = ! isempty (regexp (str,"[\r\n](DEFUN|DEFUN_DLD)\\b", "once"));
     else
       error ("fopen failed: %s", f);
     endif
   elseif (n > 2 && strcmp (f((end-1):end), ".m"))
     retval = true;
   else
     retval = false;
   endif
@@ -88,17 +88,17 @@ endfunction
 
 function retval = has_tests (f)
   fid = fopen (f);
   if (fid >= 0)
     str = fread (fid, "*char")';
     fclose (fid);
     ## Avoid PCRE 'lineanchors' by searching for newline followed by PTN.
     ## Equivalent to regexp ('^PTN','lineanchors')
-    retval = ! isempty (regexp (str, '[\r\n]\s*%!(test|assert|error|warning)', "once"));
+    retval = ! isempty (regexp (str, "[\r\n]\\s*%!(test|assert|error|warning)", "once"));
   else
     error ("fopen failed: %s", f);
   endif
 endfunction
 
 function [dp, dn, dxf, dsk] = run_test_dir (fid, d);
   global files_with_tests;
   global files_with_no_tests;
