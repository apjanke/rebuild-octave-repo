# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1512170917 21600
#      Fri Dec 01 17:28:37 2017 -0600
# Node ID f77da8da0f3f0b331414906af7c94b5990cb690b
# Parent  0fa322bf312dec91a1756e18ca2c6f8a8d0ba6ec
Fix textscan missing fields and number reads for cell-specified delimiters (bug #52550).

* oct-stream.cc (textscan::read_double): Remove what looks like repetitive code
  hunk concerning reading INF and NAN.
  (textscan::read_until): Treat eol1 and eol2 as delimiters.  When no valid
  data is found between delimiters, put the delimiter symbol back into the
  stream since the ensuing skip_delimiter() call will be removing it.
  (textscan::scan_string): Add eol1 and eol2 characters to "ends" string array.
  (textscan::read_format_once): Distinguish between the cell-specified and
  string-specified delimiter scenario.  For cell-specified delimiters, use the
  tellg-seekg restoration of the stream position similar to what is present
  inside lookahead().

* file-io.cc (Ftextscan): Add BIST tests for bug #52550.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -2209,22 +2209,54 @@ as the name of the function when reporti
 %!assert (textscan (["1 2 3 4"; "5 6 7 8"], "%f"), {[15; 26; 37; 48]})
 
 ## Check for delimiter after exponent
 %!assert (textscan ("1e-3|42", "%f", "delimiter", "|"), {[1e-3; 42]})
 
 %!test <*52479>
 %! str = "\t\ta\tb\tc\n";
 %! ret = textscan (str, "%s", "delimiter", "\t");
-%! assert (ret, { {''; ''; 'a'; 'b'; 'c'} }) ;
+%! assert (ret, { {''; ''; 'a'; 'b'; 'c'} });
 
 %!test <52479>
 %! str = "\t\ta\tb\tc\n";
 %! ret = textscan (str, "%s", "delimiter", {"\t"});
-%! assert (ret, { {''; ''; 'a'; 'b'; 'c'} }) ;
+%! assert (ret, { {''; ''; 'a'; 'b'; 'c'} });
+
+%!test <52550>
+%! str = ",,1,2,3\n";
+%! obs = textscan (str, "%d", "delimiter", ",");
+%! assert (obs, { [0; 0; 1; 2; 3] });
+%! obs = textscan (str, "%d", "delimiter", {","});
+%! assert (obs, { [0; 0; 1; 2; 3] });
+
+%!test <52550>
+%! str = " , ,1,2,3\n";
+%! obs = textscan (str, "%d", "delimiter", ",");
+%! assert (obs, { [0; 0; 1; 2; 3] });
+%! textscan (str, "%d", "delimiter", {","});
+%! assert (obs, { [0; 0; 1; 2; 3] });
+
+%!test <52550>
+%! str = " 0 , 5+6j , -INF+INFj ,NaN,3\n";
+%! obs = textscan (str, "%f", "delimiter", ",");
+%! assert (obs, { [0; 5+6i; complex(-Inf,Inf); NaN; 3] });
+%! obs = textscan (str, "%f", "delimiter", {","});
+%! assert (obs, { [0; 5+6i; complex(-Inf,Inf); NaN; 3] });
+
+%!test <52550>
+%! str = " 0;,;,1;,2;,3\n";
+%! assert (textscan (str, "%f", "delimiter", {";,"}), { [0; NaN; 1; 2; 3] });
+
+%!test <52550>
+%! str = " 0 ;1 , $ 2 ;3\n";
+%! obs = textscan (str, "%f", "delimiter", ",;$");
+%! assert (obs, { [0; 1; NaN; 2; 3] });
+%! obs = textscan (str, "%f", "delimiter", {",",";","$"});
+%! assert (obs, { [0; 1; NaN; 2; 3] });
 
 */
 
 // These tests have end-comment sequences, so can't just be in a comment
 #if 0
 ## Test unfinished comment
 %!test
 %! c = textscan ("1 2 /* half comment", "%n %u8", "CommentStyle", {"/*", "*/"});
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -2909,32 +2909,16 @@ namespace octave
           }
         else if (i == 1)
           {
             retval = numeric_limits<double>::NaN ();
             valid = true;
           }
       }
 
-    // Check for +/- inf and NaN
-    if (! valid && width_left >= 3)
-      {
-        int i = lookahead (is, inf_nan, 3, false);   // false -> case insensitive
-        if (i == 0)
-          {
-            retval = numeric_limits<double>::Inf ();
-            valid = true;
-          }
-        else if (i == 1)
-          {
-            retval = numeric_limits<double>::NaN ();
-            valid = true;
-          }
-      }
-
     if (! valid)
       is.setstate (std::ios::failbit);
     else
       is.setstate (is.rdstate () & ~std::ios::failbit);
 
     return retval * sign;
   }
 
@@ -3121,28 +3105,33 @@ namespace octave
         scan_caret (is, ends.c_str (), next);
         retval = retval + next;   // FIXME: could use repeated doubling of size
 
         int last = (! is.eof ()
                     ? is.get_undelim () : std::istream::traits_type::eof ());
 
         if (last != std::istream::traits_type::eof ())
           {
+            if (last == eol1 || last == eol2)
+                break;
+
             retval = retval + static_cast<char> (last);
             for (int i = 0; i < delimiters.numel (); i++)
               {
                 std::string delim = delimiters(i).string_value ();
                 size_t start = (retval.length () > delim.length ()
                                 ? retval.length () - delim.length ()
                                 : 0);
                 std::string may_match = retval.substr (start);
                 if (may_match == delim)
                   {
                     done = true;
                     retval = retval.substr (0, start);
+                    if (start == 0)
+                      is.putback (last);
                     break;
                   }
               }
           }
       }
     while (! done && is && ! is.eof ());
 
     return retval;
@@ -3176,22 +3165,25 @@ namespace octave
               }
             else
               val[i] = ch;
           }
         val = val.substr (0, i);          // trim pre-allocation
       }
     else  // Cell array of multi-character delimiters
       {
-        std::string ends (delim_list.numel (), '\0');
-        for (int i = 0; i < delim_list.numel (); i++)
+        std::string ends (delim_list.numel () + 2, '\0');
+        int i;
+        for (i = 0; i < delim_list.numel (); i++)
           {
             std::string tmp = delim_list(i).string_value ();
             ends[i] = tmp.back ();
           }
+        ends[i++] = eol1;
+        ends[i++] = eol2;
         val = textscan::read_until (is, delim_list, ends);
       }
   }
 
   // Return in VAL the run of characters from IS contained in PATTERN.
 
   int
   textscan::scan_bracket (delimited_stream& is, const std::string& pattern,
@@ -3483,18 +3475,32 @@ namespace octave
           {
             if (! elem->discard)
               no_conversions = false;
           }
         else
           {
             is.clear (is.rdstate () & ~std::ios::failbit);
 
-            if (! is.eof () && ! is_delim (is.peek ()))
-              this_conversion_failed = true;
+            if (! is.eof ())
+              {
+                if (delim_list.isempty ())
+                  {
+                    if (! is_delim (is.peek ()))
+                      this_conversion_failed = true;
+                  }
+                else  // Cell array of multi-character delimiters
+                  {
+                    char *pos = is.tellg ();
+                    if (-1 == lookahead (is, delim_list, delim_len))
+                      this_conversion_failed = true;
+                    is.clear ();
+                    is.seekg (pos);     // reset to position before look-ahead
+                  }
+              }
           }
 
         if (! elem->discard)
           out++;
 
         elem = fmt_list.next ();
         char *pos = is.tellg ();
 
@@ -3856,17 +3862,17 @@ namespace octave
     // that matches.
 
     char *pos = is.tellg ();
 
     std::string tmp (max_len, '\0');
     char *look = is.read (&tmp[0], tmp.size (), pos);
 
     is.clear ();
-    is.seekg (pos);              // reset to position before look-ahead
+    is.seekg (pos);              // reset to position before read
                                  // FIXME: pos may be corrupted by is.read
 
     int i;
     int (*compare)(const char *, const char *, size_t);
     compare = (case_sensitive ? strncmp : strncasecmp);
 
     for (i = 0; i < targets.numel (); i++)
       {
