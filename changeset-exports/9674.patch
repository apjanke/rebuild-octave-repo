# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1254340784 -7200
#      Wed Sep 30 21:59:44 2009 +0200
# Node ID 4cf195710ae80122224e9d0a835670033a508c93
# Parent  acf9952463c3850b0f656963388adecb7e942c02
simplify arrayfun

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-09-30  Jaroslav Hajek  <highegg@gmail.com>
+
+	* general/arrayfun.m: Simplify.
+
 2009-09-30  John W. Eaton  <jwe@octave.org>
 
 	* mkdoc: Work on list of file names instead of a directory.
 	* Makefile.in (ALL_M_FILES): Don't strip directories.
 	Also search build directory if it is different from $(srcdir).
 	Pass $(ALL_M_FILES) to mkdoc.
 
 2009-09-30  Michael D. Godfrey  <godfrey@isl.stanford.edu>
diff --git a/scripts/general/arrayfun.m b/scripts/general/arrayfun.m
--- a/scripts/general/arrayfun.m
+++ b/scripts/general/arrayfun.m
@@ -1,9 +1,10 @@
 ## Copyright (C) 2006, 2007, 2008, 2009 Bill Denney
+## Copyright (C) 2009 Jaroslav Hajek
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -123,57 +124,49 @@
 ## @}
 ## @end group
 ## @end example
 ##
 ## @seealso{cellfun, spfun, structfun}
 ## @end deftypefn
 
 ## Author: Bill Denney <denney@seas.upenn.edu>
+## Rewritten: Jaroslav Hajek <highegg@gmail.com>
 
 function varargout = arrayfun (func, varargin)
 
   if (nargin < 2)
     print_usage ();
   endif
 
-  ## Convert everything to cells and call cellfun (let cellfun error
-  ## check the options in case more options come available).
-  sizetomatch = size (varargin{1});
-  m2cargs{1} = ones (size (varargin{1}, 1), 1);
-  m2cargs{2} = ones (size (varargin{1}, 2), 1);
-  cfarg{1} = mat2cell (varargin{1}, m2cargs{:});
-  stillmatches = true;
-  idx = 1;
-  len = length (varargin);
-  while (stillmatches && idx < len)
-    idx++;
-    thissize = size (varargin{idx});
-    if (numel (thissize) == numel (sizetomatch)
-        && all (thissize == sizetomatch))
-      if (ischar (varargin{idx})
-          && (strcmpi (varargin{idx}, "UniformOutput")
-              || strcmpi (varargin{idx}, "ErrorHandler")))
-        ## Catch these strings just in case they happen to be the same
-        ## size as the other input.
-        stillmatches = false;
-      else
-        cfarg{idx} = mat2cell (varargin{idx}, m2cargs{:});
-      endif
+  nargs = length (varargin);
+
+  recognized_opts = {"UniformOutput", "ErrorHandler"};
+
+  while (nargs >= 2)
+    maybeopt = varargin{nargs-1};
+    if (ischar (maybeopt) && any (strcmpi (maybeopt, recognized_opts)))
+      nargs -= 2;
     else
-      stillmatches = false;
+      break;
     endif
   endwhile
 
-  varargout = cell (max ([nargout, 1]), 1);
-  if (idx >= len)
-    [varargout{:}] = cellfun (func, cfarg{:});
-  else
-    [varargout{:}] = cellfun (func, cfarg{:}, varargin{idx:len});
-  endif
+  args = varargin(1:nargs);
+  opts = varargin(nargs+1:end);
+
+  args = cellfun (@num2cell, args, "UniformOutput", false,
+  "ErrorHandler",  @arg_class_error);
+
+  [varargout{1:nargout}] = cellfun (func, args{:}, opts{:});
+
+endfunction
+
+function arg_class_error (S, X)
+  error ("arrayfun: invalid argument of class %s", class (X))
 endfunction
 
 %% Test function to check the "Errorhandler" option
 %!function [z] = arrayfunerror (S, varargin)
 %!      z = S;
 %!    endfunction
 %% First input argument can be a string, an inline function, a
 %% function_handle or an anonymous function
