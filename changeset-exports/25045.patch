# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1522273395 14400
#      Wed Mar 28 17:43:15 2018 -0400
# Node ID 135cc24efe4c5264ea3d2debee2bbf60aa7039b6
# Parent  cc20786d21654be0a1be9e35a36ebbff71bf2a6b
# Parent  b6aea95a7bf93546a2ab83eda7c515f57df5333f
maint: Merge stable to default.

diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -433,16 +433,20 @@ namespace QtHandles
 
     figure::properties& fp = properties<figure> ();
 
     if (fp.is___printing__ ())
       return;
 
     QMainWindow *win = qWidget<QMainWindow> ();
 
+    // If the window doesn't exist, there's nothing we can do.
+    if (! win)
+      return;
+
     m_blockUpdates = true;
 
     switch (pId)
       {
       case figure::properties::ID_POSITION:
         {
           m_innerRect = boundingBoxToRect (fp.get_boundingbox (true));
           int toffset = 0;
diff --git a/libgui/graphics/Object.cc b/libgui/graphics/Object.cc
--- a/libgui/graphics/Object.cc
+++ b/libgui/graphics/Object.cc
@@ -30,17 +30,17 @@ along with Octave; see the file COPYING.
 #include "Backend.h"
 #include "Object.h"
 #include "QtHandlesUtils.h"
 
 namespace QtHandles
 {
 
   Object::Object (const graphics_object& go, QObject *obj)
-    : QObject (), m_handle (go.get_handle ()), m_qobject (nullptr)
+    : QObject (), m_go (go), m_handle (go.get_handle ()), m_qobject (nullptr)
   {
     gh_manager::auto_lock lock (false);
 
     if (! lock)
       qCritical ("QtHandles::Object::Object: "
                  "creating Object (h=%g) without a valid lock!!!",
                  m_handle.value ());
 
@@ -73,17 +73,17 @@ namespace QtHandles
   {
     gh_manager::auto_lock lock (false);
 
     if (! lock)
       qCritical ("QtHandles::Object::object: "
                  "accessing graphics object (h=%g) without a valid lock!!!",
                  m_handle.value ());
 
-    return gh_manager::get_object (m_handle);
+    return m_go;
   }
 
   void
   Object::slotUpdate (int pId)
   {
     gh_manager::auto_lock lock;
 
     switch (pId)
diff --git a/libgui/graphics/Object.h b/libgui/graphics/Object.h
--- a/libgui/graphics/Object.h
+++ b/libgui/graphics/Object.h
@@ -92,15 +92,31 @@ namespace QtHandles
     virtual void update (int pId);
     virtual void finalize (void);
     virtual void redraw (void);
     virtual void print (const QString& file_cmd, const QString& term);
 
     virtual void beingDeleted (void);
 
   protected:
+
+    // Store the graphics object directly so that it will exist when
+    // we need it.  Previously, it was possible for the graphics
+    // backend to get a handle to a figure, then have the interpreter
+    // thread delete the corresponding object before the backend (GUI)
+    // thread had a chance to display it.  It should be OK to store
+    // this object and use it in both threads (graphics_object uses a
+    // std::shared_ptr) provided that we protect access with mutex locks.
+    graphics_object m_go;
+
+    // Handle to the graphics object.  This may be redundant now.
+    // Also, the whole ObjectProxy thing may not need to store a
+    // pointer now?  Maybe we can just have a lookup table from figure
+    // handle to Object?  What does the FLTK toolkit do?  Why does
+    // this seem to be so complicated?
     graphics_handle m_handle;
+
     QObject *m_qobject;
   };
 
 }
 
 #endif
