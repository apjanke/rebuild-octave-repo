# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1312391067 14400
#      Wed Aug 03 13:04:27 2011 -0400
# Node ID d6151d774283d5ea47ee48fc4bfab8d609ef4764
# Parent  e77284b6dac6c36c9344eb38e3ee954e526daeff
make completion work for command-line functions

* help.cc (make_name_list): Include command-line functions in
the list.
* symtab.h (symbol_table::fcn_info::find_cmdline_function):
New function.
(symbol_table::cmdline_function_names): New function.

diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -744,39 +744,46 @@ const static string_vector keyword_names
 string_vector
 make_name_list (void)
 {
   const int key_len = keyword_names.length ();
 
   const string_vector bif = symbol_table::built_in_function_names ();
   const int bif_len = bif.length ();
 
+  const string_vector cfl = symbol_table::cmdline_function_names ();
+  const int cfl_len = cfl.length ();
+
   const string_vector lcl = symbol_table::variable_names ();
   const int lcl_len = lcl.length ();
 
   const string_vector ffl = load_path::fcn_names ();
   const int ffl_len = ffl.length ();
 
   const string_vector afl = autoloaded_functions ();
   const int afl_len = afl.length ();
 
-  const int total_len = key_len + bif_len + lcl_len + ffl_len + afl_len;
+  const int total_len
+    = key_len + bif_len + cfl_len + lcl_len + ffl_len + afl_len;
 
   string_vector list (total_len);
 
   // Put all the symbols in one big list.
 
   int j = 0;
   int i = 0;
   for (i = 0; i < key_len; i++)
     list[j++] = keyword_names[i];
 
   for (i = 0; i < bif_len; i++)
     list[j++] = bif[i];
 
+  for (i = 0; i < cfl_len; i++)
+    list[j++] = cfl[i];
+
   for (i = 0; i < lcl_len; i++)
     list[j++] = lcl[i];
 
   for (i = 0; i < ffl_len; i++)
     list[j++] = ffl[i];
 
   for (i = 0; i < afl_len; i++)
     list[j++] = afl[i];
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -785,16 +785,21 @@ public:
       return rep->find_method (dispatch_type);
     }
 
     octave_value find_built_in_function (void) const
     {
       return rep->built_in_function;
     }
 
+    octave_value find_cmdline_function (void) const
+    {
+      return rep->cmdline_function;
+    }
+
     octave_value find_autoload (void)
     {
       return rep->find_autoload ();
     }
 
     octave_value find_user_function (void)
     {
       return rep->find_user_function ();
@@ -1782,16 +1787,35 @@ public:
       }
 
     if (! retval.empty ())
       retval.sort ();
 
     return retval;
   }
 
+  static std::list<std::string> cmdline_function_names (void)
+  {
+    std::list<std::string> retval;
+
+    for (fcn_table_const_iterator p = fcn_table.begin ();
+         p != fcn_table.end (); p++)
+      {
+        octave_value fcn = p->second.find_cmdline_function ();
+
+        if (fcn.is_defined ())
+          retval.push_back (p->first);
+      }
+
+    if (! retval.empty ())
+      retval.sort ();
+
+    return retval;
+  }
+
   static bool is_local_variable (const std::string& name)
   {
     if (xcurrent_scope == xglobal_scope)
       return false;
     else
       {
         symbol_table *inst = get_instance (xcurrent_scope);
 
