# HG changeset patch
# User Rik <rik@octave.org>
# Date 1355425024 28800
#      Thu Dec 13 10:57:04 2012 -0800
# Node ID c33594eefda718d92ca3b643765cf0ea131e1111
# Parent  f25101b1e37f7f88c7532e6e1f765136e344fe0f
Add fieldnames.m which extensds fieldnames() to work on Java objects.
Deprecate javafields.  Rename old C++ fieldnames to __fieldnames__.

* scripts/deprecated/javafields.m: Moved from scripts/java.  Added deprecated
warning.

* scripts/java/javafields.m: Moved to scripts/deprecated.

* scripts/general/fieldnames.m: New m-file which accepts Java, structure,
or Octave objects as inputs.

* libinterp/octave-value/ov-struct.cc(Ffieldnames): Renamed fieldnames to
__fieldnames__ to avoid class with fieldnames.m.

* scripts/deprecated/module.mk: Added javafields to deprecated build.

* scripts/general/module.mk: Added fieldnames.m to build.

* scripts/java/module.mk: Removed javafields.m from build.

diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -1920,59 +1920,43 @@ Return true if @var{x} is a structure or
   if (args.length () == 1)
     retval = args(0).is_map ();
   else
     print_usage ();
 
   return retval;
 }
 
-DEFUN (fieldnames, args, ,
+DEFUN (__fieldnames__, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} fieldnames (@var{struct})\n\
-Return a cell array of strings naming the elements of the structure\n\
-@var{struct}.  It is an error to call @code{fieldnames} with an\n\
-argument that is not a structure.\n\
+@deftypefn  {Built-in Function} {} __fieldnames__ (@var{struct})\n\
+@deftypefnx {Built-in Function} {} __fieldnames__ (@var{obj})\n\
+Internal function.\n\
+\n\
+Implements @code{fieldnames()} for structures and Octave objects.\n\
+@seealso{fieldnames}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  int nargin = args.length ();
-
-  if (nargin == 1)
-    {
-      octave_value arg = args(0);
-
-      if (arg.is_map () || arg.is_object ())
-        {
-          octave_map m = arg.map_value ();
-
-          string_vector keys = m.fieldnames ();
-
-          if (keys.length () == 0)
-            retval = Cell (0, 1);
-          else
-            retval = Cell (keys);
-        }
-      else
-        gripe_wrong_type_arg ("fieldnames", args(0));
-    }
+  // Input validation has already been done in fieldnames.m.
+  octave_value arg = args(0);
+
+  octave_map m = arg.map_value ();
+
+  string_vector keys = m.fieldnames ();
+
+  if (keys.length () == 0)
+    retval = Cell (0, 1);
   else
-    print_usage ();
+    retval = Cell (keys);
 
   return retval;
 }
 
-/*
-## test preservation of fieldname order
-%!test
-%! x(3).d=1;  x(2).a=2; x(1).b=3;  x(2).c=3;
-%! assert (fieldnames (x), {"d"; "a"; "b"; "c"});
-*/
-
 DEFUN (isfield, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isfield (@var{x}, @var{name})\n\
 Return true if the @var{x} is a structure and it\n\
 includes an element named @var{name}.  If @var{name} is a cell\n\
 array of strings then a logical array of equal dimension is returned.\n\
 @end deftypefn")
 {
diff --git a/scripts/java/javafields.m b/scripts/deprecated/javafields.m
rename from scripts/java/javafields.m
rename to scripts/deprecated/javafields.m
--- a/scripts/java/javafields.m
+++ b/scripts/deprecated/javafields.m
@@ -18,20 +18,27 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} javafields (@var{javaobj})
 ## @deftypefnx {Function File} {} javafields ("@var{classname}")
 ## @deftypefnx {Function File} {@var{fld_names} =} javafields (@dots{})
 ## Return the fields of a Java object or Java class in the form of a cell 
 ## array of strings.  If no output is requested, print the result
 ## to the standard output.
-## @seealso{javamethods, javaObject}
+## @seealso{fieldnames, methods, javamethods, javaObject}
 ## @end deftypefn
 
 function fld_names = javafields (javaobj)
+
+  persistent warned = false;
+  if (! warned)
+    warned = true;
+    warning ("Octave:deprecated-function",
+             "javafields is obsolete and will be removed from a future version of Octave, please use fieldnames instead");
+  endif
   
   if (nargin != 1)
     print_usage ();
   endif
   
   c_methods = java_invoke ("org.octave.ClassHelper", "getFields", javaobj);
   method_list = strsplit (c_methods, ';');
 
diff --git a/scripts/deprecated/module.mk b/scripts/deprecated/module.mk
--- a/scripts/deprecated/module.mk
+++ b/scripts/deprecated/module.mk
@@ -2,16 +2,17 @@ FCN_FILE_DIRS += deprecated
 
 deprecated_FCN_FILES = \
   deprecated/__error_text__.m \
   deprecated/cor.m \
   deprecated/corrcoef.m \
   deprecated/cut.m \
   deprecated/error_text.m \
   deprecated/isstr.m \
+  deprecated/javafields.m \
   deprecated/java_get.m \
   deprecated/java_new.m \
   deprecated/java_set.m \
   deprecated/polyderiv.m \
   deprecated/setstr.m \
   deprecated/shell_cmd.m \
   deprecated/studentize.m \
   deprecated/sylvester_matrix.m
diff --git a/scripts/general/fieldnames.m b/scripts/general/fieldnames.m
new file mode 100644
--- /dev/null
+++ b/scripts/general/fieldnames.m
@@ -0,0 +1,73 @@
+## Copyright (C) 2012 Rik Wehbring
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {Function File} {@var{names} =} fieldnames (@var{struct})
+## @deftypefnx {Function File} {@var{names} =} fieldnames (@var{obj})
+## @deftypefnx {Function File} {@var{names} =} fieldnames (@var{javaobj})
+## @deftypefnx {Function File} {@var{names} =} fieldnames ("@var{jclassname}")
+## Return a cell array of strings with the names of the fields in the
+## specified input.
+##
+## When the input is a structure @var{struct}, the names are the elements
+## of the structure.
+##
+## When the input is an Octave object @var{obj}, the names are the public
+## properties of the object.
+##
+## When the input is a Java object @var{javaobj} or Java classname
+## @var{jclassname}) the name are the public data elements of the object or
+## class.
+## @seealso{struct, methods}
+## @end deftypefn
+
+function names = fieldnames (obj)
+  
+  if (nargin != 1)
+    print_usage ();
+  endif
+  
+  if (isstruct (obj) || isobject (obj))
+    ## Call internal C++ function for structs or Octave objects
+    names = __fieldnames__ (obj);
+  elseif (isjava (obj) || ischar (obj))
+    names_str = java_invoke ("org.octave.ClassHelper", "getFields", obj);
+    names = strsplit (names_str, ';');
+  else
+    error ("fieldnames: Invalid input argument"); 
+  endif
+
+endfunction
+
+
+## test preservation of fieldname order
+%!test
+%! x(3).d=1;  x(2).a=2;  x(1).b=3;  x(2).c=3;
+%! assert (fieldnames (x), {"d"; "a"; "b"; "c"});
+
+## test empty structure
+%!test
+%! s = struct ();
+%! assert (fieldnames (s), cell (0, 1));
+
+## test Java classname
+%!testif HAVE_JAVA 
+%! names = fieldnames ("java.lang.Double");
+%! search = strfind (names, "java.lang.Double.MAX_VALUE");
+%! assert (! isempty ([search{:}]));
+
diff --git a/scripts/general/module.mk b/scripts/general/module.mk
--- a/scripts/general/module.mk
+++ b/scripts/general/module.mk
@@ -23,16 +23,17 @@ general_FCN_FILES = \
   general/cplxpair.m \
   general/cumtrapz.m \
   general/curl.m \
   general/dblquad.m \
   general/deal.m \
   general/del2.m \
   general/display.m \
   general/divergence.m \
+  general/fieldnames.m \
   general/flipdim.m \
   general/fliplr.m \
   general/flipud.m \
   general/genvarname.m \
   general/gradient.m \
   general/idivide.m \
   general/int2str.m \
   general/interp1.m \
diff --git a/scripts/java/module.mk b/scripts/java/module.mk
--- a/scripts/java/module.mk
+++ b/scripts/java/module.mk
@@ -4,17 +4,16 @@ java_FCN_FILES = \
   java/dlgtest.m \
   java/errordlg.m \
   java/helpdlg.m \
   java/inputdlg.m \
   java/java.m \
   java/javaArray.m \
   java/javaaddpath.m \
   java/javaclasspath.m \
-  java/javafields.m \
   java/javamem.m \
   java/javamethods.m \
   java/javarmpath.m \
   java/listdlg.m \
   java/msgbox.m \
   java/questdlg.m \
   java/warndlg.m
 
