# HG changeset patch
# User jwe
# Date 755913544 0
#      Tue Dec 14 23:59:04 1993 +0000
# Node ID 74d73a4b3fc78e1edcbd91ce68e78879021123eb
# Parent  23866011a5f2295864d7ec82276ac7ba57874237
[project @ 1993-12-14 23:57:42 by jwe]

diff --git a/liboctave/Quad.cc b/liboctave/Quad.cc
--- a/liboctave/Quad.cc
+++ b/liboctave/Quad.cc
@@ -26,25 +26,31 @@ Software Foundation, 675 Mass Ave, Cambr
 #endif
 
 #include "Quad.h"
 #include "f77-uscore.h"
 #include "sun-utils.h"
 
 static integrand_fcn user_fcn;
 
+// XXX FIXME XXX -- would be nice to not have to have this global
+// variable.
+// Nonzero means an error occurred in the calculation of the integrand
+// function, and the user wants us to quit.
+int quad_integration_error = 0;
+
 extern "C"
 {
-  int F77_FCN (dqagp) (const double (*)(double*), const double*,
+  int F77_FCN (dqagp) (const double (*)(double*, int*), const double*,
 		       const double*, const int*, const double*,
 		       const double*, const double*, double*, double*,
 		       int*, int*, const int*, const int*, int*, int*,
 		       double*);
 
-  int F77_FCN (dqagi) (const double (*)(double*), const double*,
+  int F77_FCN (dqagi) (const double (*)(double*, int*), const double*,
 		       const int*, const double*, const double*,
 		       double*, double*, int*, int*, const int*,
 		       const int*, int*, int*, double*);
 }
 
 Quad::Quad (integrand_fcn fcn)
 {
   absolute_tolerance = 1.0e-6;
@@ -78,25 +84,32 @@ Quad::integrate (int& ier)
 double
 Quad::integrate (int& ier, int& neval)
 {
   double abserr;
   return integrate (ier, neval, abserr);
 }
 
 static double
-user_function (double *x)
+user_function (double *x, int *ierr)
 {
 #if defined (sun) && defined (__GNUC__)
   double xx = access_double (x);
 #else
   double xx = *x;
 #endif
 
-  return (*user_fcn) (xx);
+  quad_integration_error = 0;
+
+  double retval = (*user_fcn) (xx);
+
+  if (quad_integration_error)
+    *ierr = -1;
+
+  return retval;
 }
 
 DefQuad::DefQuad (integrand_fcn fcn) : Quad (fcn)
 {
   lower_limit = 0.0;
   upper_limit = 1.0;
 }
 
diff --git a/liboctave/Quad.h b/liboctave/Quad.h
--- a/liboctave/Quad.h
+++ b/liboctave/Quad.h
@@ -32,16 +32,22 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #ifndef _Quad_typedefs
 #define _Quad_typedefs 1
 
 typedef double (*integrand_fcn) (double x);
 
 #endif
 
+// XXX FIXME XXX -- would be nice to not have to have this global
+// variable.
+// Nonzero means an error occurred in the calculation of the integrand
+// function, and the user wants us to quit.
+extern int quad_integration_error;
+
 class Quad
 {
  public:
 
   Quad (integrand_fcn fcn);
   Quad (integrand_fcn fcn, double abs, double rel);
 
   virtual double integrate (void);
@@ -91,16 +97,17 @@ class IndefQuad : public Quad
   IndefQuad (integrand_fcn fcn, double b, IntegralType t, double abs,
 	     double rel);
   IndefQuad (integrand_fcn fcn, double abs, double rel);
 
   double integrate (int& ier, int& neval, double& abserr);
 
  private:
 
+  int integration_error;
   double bound;
   IntegralType type;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -81,16 +81,17 @@ npsol_objective_function (const ColumnVe
       tree_constant *tmp = npsol_objective->eval (args, 2, 1, 0);
 
       delete [] args;
 
       if (error_state)
 	{
 	  error ("npsol: error evaluating objective function");
 	  npsol_objective_error = 1; // XXX FIXME XXX
+	  delete [] tmp;
 	  return retval;
 	}
 
       if (tmp != NULL_TREE_CONST && tmp[0].is_defined ())
 	{
 	  objective_value = tmp[0];
 	  delete [] tmp;
 	}
@@ -158,16 +159,17 @@ npsol_constraint_function (const ColumnV
   if (npsol_constraints != NULL_TREE)
     {
       tree_constant *tmp = npsol_constraints->eval (args, 2, 1, 0);
 
       delete [] args;
 
       if (error_state)
 	{
+	  delete [] tmp;
 	  error ("npsol: error evaluating constraints");
 	  return retval;
 	}
 
       if (tmp != NULL_TREE_CONST && tmp[0].is_defined ())
 	{
 	  retval = tmp[0].to_vector ();
 
diff --git a/src/quad.cc b/src/quad.cc
--- a/src/quad.cc
+++ b/src/quad.cc
@@ -54,27 +54,37 @@ quad_user_function (double x)
 //  tree_constant name = tree_constant (quad_fcn->name ());
   tree_constant *args = new tree_constant [2];
 //  args[0] = name;
   args[1] = tree_constant (x);
 
   if (quad_fcn != NULL_TREE)
     {
       tree_constant *tmp = quad_fcn->eval (args, 2, 1, 0);
+
       delete [] args;
+
+      if (error_state)
+	{
+	  delete [] tmp;
+	  quad_integration_error = 1;  // XXX FIXME XXX
+	  gripe_user_supplied_eval ("quad");
+	  return retval;
+	}
+
       if (tmp != NULL_TREE_CONST && tmp[0].is_defined ())
 	{
 	  retval = tmp[0].to_scalar ();
 	  delete [] tmp;
 	}
       else
 	{
 	  delete [] tmp;
+	  quad_integration_error = 1;  // XXX FIXME XXX
 	  gripe_user_supplied_eval ("quad");
-	  jump_to_top_level ();
 	}
     }
 
   return retval;
 }
 
 tree_constant *
 do_quad (const tree_constant *args, int nargin, int nargout)
