# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1447593878 -3600
#      Sun Nov 15 14:24:38 2015 +0100
# Node ID 632683d6396f2535ed5c18a85915aab2c1276f53
# Parent  571508c1ed0659556d569409dc8a5962f0ca4781
provide actions for moving the editor tabs by shortscuts

* file-editor.cc (construct): use the new subclassed tab-widget, add the
  actions for moving the tab left or right;
  (set_shortcuts): set the shortcuts for the new actions;
  (move_tab_left, move_tab_right): new slots for the actions;
  (switch_tab): common slot, added boolean parameter for moving/switching;

* file-editor.h: new class tab_widget inheriting QTabWidget with usable
  QTabBar, new actions and related slots, switch_tab with boolean parameter

* shortcut-manager.cc (do_init_data): init shortcuts for new move tab actions

diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -1261,17 +1261,17 @@ file_editor::construct (void)
   // FIXME: what was the intended purpose of this unused variable?
   // QStyle *editor_style = QApplication::style ();
   _menu_bar = new QMenuBar (editor_widget);
 #if defined (Q_OS_MAC)
   _menu_bar->setNativeMenuBar (false);
 #endif
   _tool_bar = new QToolBar (editor_widget);
   _tool_bar->setMovable (true);
-  _tab_widget = new QTabWidget (editor_widget);
+  _tab_widget = new tab_widget (editor_widget);
   _tab_widget->setTabsClosable (true);
 #ifdef HAVE_QTABWIDGET_SETMOVABLE
   _tab_widget->setMovable (true);
 #endif
 
 
   // the mru-list and an empty array of actions
   QSettings *settings = resource_manager::get_settings ();
@@ -1527,16 +1527,20 @@ file_editor::construct (void)
           tr ("&Documentation on Keyword"), SLOT (request_context_doc (bool)));
 
   // tab navigation (no menu, only actions)
 
   _switch_left_tab_action = add_action (0, QIcon (), "",
                                         SLOT (switch_left_tab ()));
   _switch_right_tab_action = add_action (0, QIcon (), "",
                                          SLOT (switch_right_tab ()));
+  _move_tab_left_action = add_action (0, QIcon (), "",
+                                      SLOT (move_tab_left ()));
+  _move_tab_right_action = add_action (0, QIcon (), "",
+                                       SLOT (move_tab_right ()));
 
   // toolbar
 
   // new and open actions are inserted later from main window
   _tool_bar->addAction (_save_action);
   _tool_bar->addAction (_save_as_action);
   _tool_bar->addSeparator ();
   _tool_bar->addAction (_print_action);
@@ -1888,16 +1892,18 @@ file_editor::set_shortcuts ()
 
   // Help menu
   shortcut_manager::set_shortcut (_context_help_action, "editor_help:help_keyword");
   shortcut_manager::set_shortcut (_context_doc_action,  "editor_help:doc_keyword");
 
   // Tab navigation without menu entries
   shortcut_manager::set_shortcut (_switch_left_tab_action, "editor_tabs:switch_left_tab");
   shortcut_manager::set_shortcut (_switch_right_tab_action, "editor_tabs:switch_right_tab");
+  shortcut_manager::set_shortcut (_move_tab_left_action, "editor_tabs:move_tab_left");
+  shortcut_manager::set_shortcut (_move_tab_right_action, "editor_tabs:move_tab_right");
 
 }
 
 void
 file_editor::check_actions ()
 {
   bool  have_tabs = _tab_widget->count () > 0;
 
@@ -2028,24 +2034,49 @@ file_editor::switch_left_tab ()
   switch_tab (-1);
 }
 void
 file_editor::switch_right_tab ()
 {
   switch_tab (1);
 }
 void
-file_editor::switch_tab (int direction)
+file_editor::move_tab_left ()
+{
+#ifdef HAVE_QTABWIDGET_SETMOVABLE
+  switch_tab (-1, true);
+#endif
+}
+void
+file_editor::move_tab_right ()
+{
+#ifdef HAVE_QTABWIDGET_SETMOVABLE
+  switch_tab (1, true);
+#endif
+}
+void
+file_editor::switch_tab (int direction, bool move)
 {
   int tabs = _tab_widget->count ();
 
   if (tabs < 2)
     return;
 
-  int new_index = _tab_widget->currentIndex () + direction;
+  int old_pos = _tab_widget->currentIndex ();
+  int new_pos = _tab_widget->currentIndex () + direction;
+
+  if (new_pos < 0 || new_pos >= tabs)
+    new_pos = new_pos - direction*tabs;
 
-  if (new_index < 0 || new_index >= tabs)
-    new_index = new_index - direction*tabs;
-
-  _tab_widget->setCurrentIndex (new_index);
+  if (move)
+    {
+#ifdef HAVE_QTABWIDGET_SETMOVABLE
+      _tab_widget->tabBar ()->moveTab (old_pos,new_pos);
+      _tab_widget->setCurrentIndex (old_pos);
+      _tab_widget->setCurrentIndex (new_pos);
+      focus ();
+#endif
+    }
+  else
+    _tab_widget->setCurrentIndex (new_pos);
 }
 
 #endif
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -34,16 +34,27 @@ along with Octave; see the file COPYING.
 #include <QDragEnterEvent>
 #include <QDropEvent>
 
 #include <map>
 
 #include "file-editor-interface.h"
 #include "file-editor-tab.h"
 
+// subclassed QTabWidget for usable tab-bar
+class tab_widget : public QTabWidget
+{
+  Q_OBJECT
+
+public:
+  tab_widget (QWidget *p) : QTabWidget (p) { }
+  ~tab_widget () { }
+  QTabBar* tabBar() const { return (QTabWidget::tabBar()); }
+};
+
 class file_editor : public file_editor_interface
 {
   Q_OBJECT
 
 public:
 
   typedef std::map<QString, QWidget *>::iterator editor_tab_map_iterator;
   typedef std::map<QString, QWidget *>::const_iterator editor_tab_map_const_iterator;
@@ -231,16 +242,18 @@ private slots:
   void show_indent_guides (bool);
   void show_long_line (bool);
   void zoom_in (bool);
   void zoom_out (bool);
   void zoom_normal (bool);
 
   void switch_left_tab ();
   void switch_right_tab ();
+  void move_tab_left ();
+  void move_tab_right ();
 
   void create_context_menu (QMenu *);
   void edit_status_update (bool, bool);
 
 protected:
 
   void dragEnterEvent(QDragEnterEvent *event);
   void dropEvent(QDropEvent *event);
@@ -251,17 +264,17 @@ private:
   void construct (void);
   void add_file_editor_tab (file_editor_tab *f, const QString& fn);
   void save_file_as (QWidget *fetabID = 0);
   void mru_menu_update (void);
   bool call_custom_editor (const QString& file_name = QString (), int line = -1);
 
   void toggle_preference (const QString& preference, bool def);
 
-  void switch_tab (int direction);
+  void switch_tab (int direction, bool move = false);
 
   bool editor_tab_has_focus ();
 
   QWidget *find_tab_widget (const QString& openFileName) const;
   QAction *add_action (QMenu *menu, const QIcon &icon, const QString &text,
                        const char *member);
 
   QMenu* m_add_menu (QMenuBar *p, QString text);
@@ -340,29 +353,31 @@ private:
   QAction *_redo_action;
   QAction *_undo_action;
 
   QAction *_preferences_action;
   QAction *_styles_preferences_action;
 
   QAction *_switch_left_tab_action;
   QAction *_switch_right_tab_action;
+  QAction *_move_tab_left_action;
+  QAction *_move_tab_right_action;
 
   QAction *_toggle_breakpoint_action;
   QAction *_next_breakpoint_action;
   QAction *_previous_breakpoint_action;
   QAction *_remove_all_breakpoints_action;
 
   QMenu *_edit_cmd_menu;
   QMenu *_edit_fmt_menu;
   QMenu *_edit_nav_menu;
   QMenu *_fileMenu;
   QMenu *_view_editor_menu;
 
-  QTabWidget *_tab_widget;
+  tab_widget *_tab_widget;
 
   int _marker_breakpoint;
 
   enum { MaxMRUFiles = 10 };
   QMenu *_mru_file_menu;
   QAction *_mru_file_actions[MaxMRUFiles];
   QStringList _mru_files;
 };
diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -313,20 +313,24 @@ shortcut_manager::do_init_data ()
 
   // help
   init (tr ("Help on Keyword"), "editor_help:help_keyword",
         QKeySequence::HelpContents);
   init (tr ("Document on Keyword"), "editor_help:doc_keyword",
         QKeySequence (Qt::SHIFT + Qt::Key_F1));
 
   // tab navigation
-  init (tr ("Switch to left tab"), "editor_tabs:switch_left_tab",
+  init (tr ("Switch to Left Tab"), "editor_tabs:switch_left_tab",
         QKeySequence (ctrl + Qt::Key_PageDown));
-  init (tr ("Switch to right tab"), "editor_tabs:switch_right_tab",
+  init (tr ("Switch to Right Tab"), "editor_tabs:switch_right_tab",
         QKeySequence (ctrl + Qt::Key_PageUp));
+  init (tr ("Move Tab Left"), "editor_tabs:move_tab_left",
+        QKeySequence (Qt::AltModifier + Qt::Key_PageDown));
+  init (tr ("Move Tab Right"), "editor_tabs:move_tab_right",
+        QKeySequence (Qt::AltModifier + Qt::Key_PageUp));
 
 }
 
 void
 shortcut_manager::init (QString description, QString key, QKeySequence def_sc)
 {
   QKeySequence actual
     = QKeySequence (_settings->value ("shortcuts/"+key, def_sc).toString ());
