# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1445452577 -7200
#      Wed Oct 21 20:36:17 2015 +0200
# Node ID 3e449f43e7080a2fa513380f9fcca30eadd4b60b
# Parent  2b0886f2c186952250f8344c6d894bd0dc134577
revised code for header context menu in file browser

* files-dock-widget.cc (files_dock_widget): initialize signal mapper as well
  as  string lists with menu entries and related keys in the settings file,
  removed code that is executed in notice_settings;
  (~files_dock_widget): delete signal mapper;
  (toggle_header): new slot for all header context menu entries instead of
  single slots toggle_headercontextitem_filesize,
  toggle_headercontextitem_filetype, toggle_headercontextitem_datemodified,
  toggle_headercontextitem_showhidden;
  (headercontextmenu_requested): menu entries by loop over string lists and
  trigger signal mapped according to loop count;
  (notice_settings): set column visibility by loop over string list

* files-dock-widget.h: only one slot for header context menu actions, new
  string lists for menu entries and related setting keys, signal mapper

diff --git a/libgui/src/files-dock-widget.cc b/libgui/src/files-dock-widget.cc
--- a/libgui/src/files-dock-widget.cc
+++ b/libgui/src/files-dock-widget.cc
@@ -64,16 +64,32 @@ public:
 files_dock_widget::files_dock_widget (QWidget *p)
   : octave_dock_widget (p)
 {
   setObjectName ("FilesDockWidget");
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
   set_title (tr ("File Browser"));
   setToolTip (tr ("Browse your files."));
 
+  _sig_mapper = 0;
+
+  _columns_shown = QStringList ();
+  _columns_shown.append (tr ("File size"));
+  _columns_shown.append (tr ("File type"));
+  _columns_shown.append (tr ("Date modified"));
+  _columns_shown.append (tr ("Show hidden"));
+  _columns_shown.append (tr ("Alternating row colors"));
+
+  _columns_shown_keys = QStringList ();
+  _columns_shown_keys.append (tr ("filesdockwidget/showFileSize"));
+  _columns_shown_keys.append (tr ("filesdockwidget/showFileType"));
+  _columns_shown_keys.append (tr ("filesdockwidget/showLastModified"));
+  _columns_shown_keys.append (tr ("filesdockwidget/showHiddenFiles"));
+  _columns_shown_keys.append (tr ("filesdockwidget/useAlternatingRowColors"));
+
   QWidget *container = new QWidget (this);
 
   setWidget (container);
 
   connect (this, SIGNAL (open_file (const QString&)),
            main_win (), SLOT (open_file (const QString&)));
 
   connect (this, SIGNAL (displayed_directory_changed (const QString&)),
@@ -175,25 +191,16 @@ files_dock_widget::files_dock_widget (QW
 
   if (! startup_dir.exists ())
     {
       // the configured startup dir does not exist, take actual one
       startup_dir = QDir ();
     }
 
   _file_system_model = new QFileSystemModel (this);
-  if (settings->value ("filesdockwidget/showHiddenFiles",false).toBool ())
-    {
-      _file_system_model->setFilter (QDir::NoDotAndDotDot | QDir::AllEntries
-                                     | QDir::Hidden);
-    }
-  else
-    {
-      _file_system_model->setFilter (QDir::NoDotAndDotDot | QDir::AllEntries);
-    }
   QModelIndex rootPathIndex = _file_system_model->setRootPath (
                                 startup_dir.absolutePath ());
 
   // Attach the model to the QTreeView and set the root index
   _file_tree_view = new FileTreeViewer (container);
   _file_tree_view->setSelectionMode (QAbstractItemView::ExtendedSelection);
   _file_tree_view->setModel (_file_system_model);
   _file_tree_view->setRootIndex (rootPathIndex);
@@ -278,16 +285,19 @@ files_dock_widget::~files_dock_widget ()
   QStringList dirs;
   for (int i=0; i< _current_directory->count (); i++)
     {
       dirs.append (_current_directory->itemText (i));
     }
   settings->setValue ("filesdockwidget/mru_dir_list", dirs);
 
   settings->sync ();
+
+  if (_sig_mapper)
+    delete _sig_mapper;
 }
 
 void
 files_dock_widget::item_double_clicked (const QModelIndex& index)
 {
   // Retrieve the file info associated with the model index.
   QFileInfo fileInfo = _file_system_model->fileInfo (index);
   set_current_directory (fileInfo.absoluteFilePath ());
@@ -385,94 +395,63 @@ files_dock_widget::open_item_in_app (con
   // Retrieve the file info associated with the model index.
   QFileInfo fileInfo = _file_system_model->fileInfo (index);
 
   QString file = fileInfo.absoluteFilePath ();
 
   QDesktopServices::openUrl (QUrl::fromLocalFile (file));
 }
 
-void files_dock_widget::toggle_headercontextitem_filesize ()
-{
-  QSettings *settings = resource_manager::get_settings ();
-  settings->setValue
-    ("filesdockwidget/showFileSize",
-     ! settings->value ("filesdockwidget/showFileSize",false).toBool ());
-  settings->sync ();
-  this->notice_settings (settings);
-}
-
-void files_dock_widget::toggle_headercontextitem_filetype ()
+void files_dock_widget::toggle_header (int col)
 {
   QSettings *settings = resource_manager::get_settings ();
-  settings->setValue
-    ("filesdockwidget/showFileType",
-     ! settings->value ("filesdockwidget/showFileType",false).toBool ());
+
+  QString key = _columns_shown_keys.at (col);
+  bool shown = settings->value (key,false).toBool ();
+  settings->setValue (key, ! shown);
   settings->sync ();
-  this->notice_settings (settings);
-}
 
-void files_dock_widget::toggle_headercontextitem_datemodified ()
-{
-  QSettings *settings = resource_manager::get_settings ();
-  settings->setValue
-    ("filesdockwidget/showLastModified",
-     ! settings->value ("filesdockwidget/showLastModified",false).toBool ());
-  settings->sync ();
-  this->notice_settings (settings);
-}
-
-void files_dock_widget::toggle_headercontextitem_showhidden ()
-{
-  QSettings *settings = resource_manager::get_settings ();
-  settings->setValue
-    ("filesdockwidget/showHiddenFiles",
-     ! settings->value ("filesdockwidget/showHiddenFiles",false).toBool ());
-  settings->sync ();
-  this->notice_settings (settings);
+  switch (col)
+    {
+      case 0:
+      case 1:
+      case 2:
+        // toggle column visibility
+        _file_tree_view->setColumnHidden (col + 1, shown);
+        break;
+      case 3:
+      case 4:
+        // other actions depending on new settings
+        notice_settings (settings);
+        break;
+    }
 }
 
 void
 files_dock_widget::headercontextmenu_requested (const QPoint& mpos)
 {
   QMenu menu (this);
 
+  if (_sig_mapper)
+    delete _sig_mapper;
+  _sig_mapper = new QSignalMapper (this);
+
   QSettings *settings = resource_manager::get_settings ();
 
-  QAction fileSizeAction (tr ("File size"), &menu);
-  fileSizeAction.setCheckable (true);
-  fileSizeAction.setChecked (
-    settings->value ("filesdockwidget/showFileSize",false).toBool ());
-  connect (&fileSizeAction, SIGNAL(triggered ()),
-           this, SLOT (toggle_headercontextitem_filesize ()));
-  menu.addAction (&fileSizeAction);
-
-  QAction fileTypeAction (tr ("File type"), &menu);
-  fileTypeAction.setCheckable (true);
-  fileTypeAction.setChecked (
-    settings->value ("filesdockwidget/showFileType",false).toBool ());
-  connect (&fileTypeAction, SIGNAL(triggered ()),
-           this, SLOT (toggle_headercontextitem_filetype ()));
-  menu.addAction (&fileTypeAction);
+  for (int i = 0; i < _columns_shown.size (); i++)
+    {
+      QAction *action = menu.addAction (_columns_shown.at (i),
+                                        _sig_mapper, SLOT (map ()));
+      _sig_mapper->setMapping(action, i);
+      action->setCheckable (true);
+      action->setChecked (
+            settings->value (_columns_shown_keys.at (i),true).toBool ());
+    }
 
-  QAction dateModifiedAction (tr ("Date modified"), &menu);
-  dateModifiedAction.setCheckable (true);
-  dateModifiedAction.setChecked(
-    settings->value ("filesdockwidget/showLastModified",false).toBool ());
-  connect (&dateModifiedAction, SIGNAL(triggered ()),
-           this, SLOT (toggle_headercontextitem_datemodified ()));
-  menu.addAction (&dateModifiedAction);
-
-  QAction showHiddenAction (tr ("Show hidden"), &menu);
-  showHiddenAction.setCheckable (true);
-  showHiddenAction.setChecked (
-    settings->value ("filesdockwidget/showHiddenFiles",false).toBool ());
-  connect (&showHiddenAction, SIGNAL (triggered ()),
-           this, SLOT (toggle_headercontextitem_showhidden ()));
-  menu.addAction (&showHiddenAction);
+  connect (_sig_mapper, SIGNAL (mapped (int)), this, SLOT (toggle_header (int)));
 
   menu.exec (_file_tree_view->mapToGlobal (mpos));
 }
 
 void
 files_dock_widget::contextmenu_requested (const QPoint& mpos)
 {
 
@@ -783,34 +762,28 @@ files_dock_widget::notice_settings (cons
   if (icon_size_settings == 1)
     icon_size = st->pixelMetric (QStyle::PM_LargeIconSize);
   else if (icon_size_settings == -1)
     icon_size = st->pixelMetric (QStyle::PM_SmallIconSize);
 
   _navigation_tool_bar->setIconSize (QSize (icon_size,icon_size));
 
   // file names are always shown, other columns can be hidden by settings
-  _file_tree_view->setColumnHidden (0, false);
-  _file_tree_view->setColumnHidden (1,
-    ! settings->value ("filesdockwidget/showFileSize",false).toBool ());
-  _file_tree_view->setColumnHidden (2,
-    ! settings->value ("filesdockwidget/showFileType",false).toBool ());
-  _file_tree_view->setColumnHidden (3,
-    ! settings->value ("filesdockwidget/showLastModified",false).toBool ());
-  _file_tree_view->setAlternatingRowColors (
-    settings->value ("filesdockwidget/useAlternatingRowColors",true).toBool ());
-  if (settings->value ("filesdockwidget/showHiddenFiles",false).toBool ())
-    {
+  for (int i = 0; i < 3; i++)
+     _file_tree_view->setColumnHidden (i + 1, ! settings->value (
+                                  _columns_shown_keys.at (i),false).toBool ());
+
+  if (settings->value (_columns_shown_keys.at (3),false).toBool ())
       _file_system_model->setFilter (QDir::NoDotAndDotDot | QDir::AllEntries
                                      | QDir::Hidden);
-    }
   else
-    {
       _file_system_model->setFilter (QDir::NoDotAndDotDot | QDir::AllEntries);
-    }
+
+  _file_tree_view->setAlternatingRowColors (
+    settings->value (_columns_shown_keys.at (4),true).toBool ());
   _file_tree_view->setModel (_file_system_model);
 
   // enable the buttons to sync octave/browser dir
   // only if this is not done by default
   _sync_octave_dir
     = settings->value ("filesdockwidget/sync_octave_directory",false).toBool ();
   _sync_octave_directory_action->setEnabled (!_sync_octave_dir);
   _sync_browser_directory_action->setEnabled (!_sync_octave_dir);
diff --git a/libgui/src/files-dock-widget.h b/libgui/src/files-dock-widget.h
--- a/libgui/src/files-dock-widget.h
+++ b/libgui/src/files-dock-widget.h
@@ -30,16 +30,17 @@ along with Octave; see the file COPYING.
 #include <QListWidget>
 #include <QFileSystemModel>
 #include <QToolBar>
 #include <QToolButton>
 #include <QVBoxLayout>
 #include <QAction>
 #include <QTreeView>
 #include <QMouseEvent>
+#include <QSignalMapper>
 
 #include <QComboBox>
 #include "octave-dock-widget.h"
 
 /**
    @class files_dock_widget
    @brief Dock widget to display files in the current directory.
 */
@@ -75,26 +76,22 @@ public slots:
 
   /** set the internal variable that holds the actual octave variable **/
   void update_octave_directory (const QString& dir);
 
   /** Tells the widget to react on changed settings. */
   void notice_settings (const QSettings *settings);
 
 private slots:
+
+  void headercontextmenu_requested (const QPoint& pos);
+  void toggle_header (int col);
+
   /** context menu wanted */
   void contextmenu_requested (const QPoint& pos);
-
-  void toggle_headercontextitem_filesize ();
-  void toggle_headercontextitem_filetype ();
-  void toggle_headercontextitem_datemodified ();
-  void toggle_headercontextitem_showhidden ();
-
-  void headercontextmenu_requested (const QPoint& pos);
-
   /* context menu actions */
   void contextmenu_open (bool);
   void contextmenu_open_in_app (bool);
   void contextmenu_copy_selection (bool);
   void contextmenu_run (bool);
   void contextmenu_load (bool);
   void contextmenu_rename (bool);
   void contextmenu_delete (bool);
@@ -155,11 +152,15 @@ private:
   QTreeView *       _file_tree_view;
   QComboBox *       _current_directory;
 
   /** Internal variables **/
   bool              _sync_octave_dir;    // flag if syncing with octave
   QString           _octave_dir;         // the actual octave dir
 
   enum { MaxMRUDirs = 10 };
+
+  QStringList _columns_shown;
+  QStringList _columns_shown_keys;
+  QSignalMapper *_sig_mapper;
 };
 
 #endif // FILESDOCKWIDGET_H
