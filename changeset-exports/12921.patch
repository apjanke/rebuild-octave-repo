# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@gmail.com>
# Date 1312517300 18000
#      Thu Aug 04 23:08:20 2011 -0500
# Node ID 7820a12baadddea0361759617fcc085169aa4490
# Parent  5d18231eee00217ee32e4bb8914f76434a18b5af
Style fixes on comments about profiling operators

diff --git a/src/pt-binop.cc b/src/pt-binop.cc
--- a/src/pt-binop.cc
+++ b/src/pt-binop.cc
@@ -119,18 +119,21 @@ tree_binary_expression::rvalue1 (int)
         {
           octave_value b = op_rhs->rvalue1 ();
 
           if (! error_state && b.is_defined ())
             {
               profile_data_accumulator::enter pe (profiler,
                                                   "binary " + oper ());
 
-              /* Note: The profiler does not catch the braindead-short-circuit
-                 evaluation code above.  But that should be ok.  */
+              // Note: The profiler does not catch the braindead
+              // short-circuit evaluation code above, but that should be
+              // ok. The evaluation of operands and the operator itself
+              // is entangled and it's not clear where to start/stop
+              // timing the operator to make it reasonable.
 
               retval = ::do_binary_op (etype, a, b);
 
               if (error_state)
                 retval = octave_value ();
             }
         }
     }
@@ -185,20 +188,20 @@ tree_boolean_expression::rvalue1 (int)
 {
   octave_value retval;
 
   if (error_state)
     return retval;
 
   bool result = false;
 
-  /* This evaluation is not caught by the profiler, since we can't find
-     a reasonable place where to time.  Note that we don't want to include
-     evaluation of LHS or RHS into the timing, but this is entangled
-     together with short-circuit evaluation here.  */
+  // This evaluation is not caught by the profiler, since we can't find
+  // a reasonable place where to time. Note that we don't want to
+  // include evaluation of LHS or RHS into the timing, but this is
+  // entangled together with short-circuit evaluation here.
 
   if (op_lhs)
     {
       octave_value a = op_lhs->rvalue1 ();
 
       if (! error_state)
         {
           bool a_true = a.is_true ();
