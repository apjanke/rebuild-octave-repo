# HG changeset patch
# User Rik <rik@octave.org>
# Date 1381773886 25200
#      Mon Oct 14 11:04:46 2013 -0700
# Node ID 57750dc54ab675422b1586298dee9316987e2e65
# Parent  b0f529c3671dc94f0fb0856567400d8346568013
maint: Correct indentation in graphics.cc, graphics.in.h.  No code changes.

* libinterp/corefcn/graphics.cc, libinterp/corefcn/graphics.in.h:
Correct indentation of constructors.  No code changes.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -8017,52 +8017,51 @@ gh_manager::do_pop_figure (const graphic
 }
 
 class
 callback_event : public base_graphics_event
 {
 public:
   callback_event (const graphics_handle& h, const std::string& name,
                   const octave_value& data = Matrix ())
-      : base_graphics_event (), handle (h), callback_name (name),
-        callback (), callback_data (data) { }
+    : base_graphics_event (), handle (h), callback_name (name),
+      callback (), callback_data (data) { }
 
   callback_event (const graphics_handle& h, const octave_value& cb,
                   const octave_value& data = Matrix ())
-      : base_graphics_event (), handle (h), callback_name (),
-        callback (cb), callback_data (data) { }
+    : base_graphics_event (), handle (h), callback_name (),
+      callback (cb), callback_data (data) { }
 
   void execute (void)
     {
       if (callback.is_defined ())
         gh_manager::execute_callback (handle, callback, callback_data);
       else
         gh_manager::execute_callback (handle, callback_name, callback_data);
     }
 
 private:
   callback_event (void)
-    : base_graphics_event (), handle (),
-      callback_name (), callback_data ()
+    : base_graphics_event (), handle (), callback_name (), callback_data ()
   { }
 
 private:
   graphics_handle handle;
   std::string callback_name;
   octave_value callback;
   octave_value callback_data;
 };
 
 class
 function_event : public base_graphics_event
 {
 public:
   function_event (graphics_event::event_fcn fcn, void* data = 0)
-      : base_graphics_event (), function (fcn),
-        function_data (data) { }
+    : base_graphics_event (), function (fcn), function_data (data)
+  { }
 
   void execute (void)
     {
       function (function_data);
     }
 
 private:
 
@@ -8081,18 +8080,18 @@ private:
 };
 
 class
 set_event : public base_graphics_event
 {
 public:
   set_event (const graphics_handle& h, const std::string& name,
              const octave_value& value, bool do_notify_toolkit = true)
-      : base_graphics_event (), handle (h), property_name (name),
-        property_value (value), notify_toolkit (do_notify_toolkit) { }
+    : base_graphics_event (), handle (h), property_name (name),
+      property_value (value), notify_toolkit (do_notify_toolkit) { }
 
   void execute (void)
     {
       gh_manager::auto_lock guard;
 
       graphics_object go = gh_manager::get_object (handle);
 
       if (go)
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -1229,33 +1229,33 @@ private:
 };
 
 // ---------------------------------------------------------------------
 
 class double_radio_property : public base_property
 {
 public:
   double_radio_property (double d, const radio_values& v)
-      : base_property ("", graphics_handle ()),
-        current_type (double_t), dval (d), radio_val (v),
-        current_val (v.default_value ())
+    : base_property ("", graphics_handle ()),
+      current_type (double_t), dval (d), radio_val (v),
+      current_val (v.default_value ())
   { }
 
   double_radio_property (const std::string& nm, const graphics_handle& h,
                          const std::string& v)
-      : base_property (nm, h),
-        current_type (radio_t), dval (0), radio_val (v),
-        current_val (radio_val.default_value ())
+    : base_property (nm, h),
+      current_type (radio_t), dval (0), radio_val (v),
+      current_val (radio_val.default_value ())
   { }
 
   double_radio_property (const std::string& nm, const graphics_handle& h,
                          const double_radio_property& v)
-      : base_property (nm, h),
-        current_type (v.current_type), dval (v.dval),
-        radio_val (v.radio_val), current_val (v.current_val)
+    : base_property (nm, h),
+      current_type (v.current_type), dval (v.dval),
+      radio_val (v.radio_val), current_val (v.current_val)
   { }
 
   double_radio_property (const double_radio_property& p)
     : base_property (p), current_type (p.current_type),
       dval (p.dval), radio_val (p.radio_val),
       current_val (p.current_val) { }
 
   octave_value get (void) const
@@ -2035,17 +2035,17 @@ class graphics_object;
 
 class base_graphics_toolkit
 {
 public:
   friend class graphics_toolkit;
 
 public:
   base_graphics_toolkit (const std::string& nm)
-      : name (nm), count (0) { }
+    : name (nm), count (0) { }
 
   virtual ~base_graphics_toolkit (void) { }
 
   std::string get_name (void) const { return name; }
 
   virtual bool is_valid (void) const { return false; }
 
   virtual void redraw_figure (const graphics_object&) const
@@ -2113,29 +2113,29 @@ private:
         error ("%s: invalid graphics toolkit", fname.c_str ());
     }
 };
 
 class graphics_toolkit
 {
 public:
   graphics_toolkit (void)
-      : rep (new base_graphics_toolkit ("unknown"))
+    : rep (new base_graphics_toolkit ("unknown"))
     {
       rep->count++;
     }
 
   graphics_toolkit (base_graphics_toolkit* b)
-      : rep (b)
+    : rep (b)
     {
       rep->count++;
     }
 
   graphics_toolkit (const graphics_toolkit& b)
-      : rep (b.rep)
+    : rep (b.rep)
     {
       rep->count++;
     }
 
   ~graphics_toolkit (void)
     {
       if (--rep->count == 0)
         delete rep;
@@ -3463,21 +3463,21 @@ public:
       sx ("linear"), sy ("linear"), sz ("linear"),  zlim (1, 2, 0.0)
     {
       zlim(1) = 1.0;
     }
 
   graphics_xform (const Matrix& xm, const Matrix& xim,
                   const scaler& x, const scaler& y, const scaler& z,
                   const Matrix& zl)
-      : xform (xm), xform_inv (xim), sx (x), sy (y), sz (z), zlim (zl) { }
+    : xform (xm), xform_inv (xim), sx (x), sy (y), sz (z), zlim (zl) { }
 
   graphics_xform (const graphics_xform& g)
-      : xform (g.xform), xform_inv (g.xform_inv), sx (g.sx),
-        sy (g.sy), sz (g.sz), zlim (g.zlim) { }
+    : xform (g.xform), xform_inv (g.xform_inv), sx (g.sx),
+      sy (g.sy), sz (g.sz), zlim (g.zlim) { }
 
   ~graphics_xform (void) { }
 
   graphics_xform& operator = (const graphics_xform& g)
     {
       xform = g.xform;
       xform_inv = g.xform_inv;
       sx = g.sx;
