# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1264819973 18000
#      Fri Jan 29 21:52:53 2010 -0500
# Node ID 2884758e265bc9c56f10fe9bc8392d530aa3f48e
# Parent  477d05b0a73948c964fc5568638cc4b24e6c07c8
Replace dataaspectratio props with plotboxaspectratio props.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,17 @@
+2010-01-29  Ben Abbott  <bpabbott@mac.com>
+
+	* plot/axis.m, plot/__go_draw_axes__.m, plot/colorbar.m,
+	plot/isocolors.m, plot/isonormals.m, plot/isosurface.m,
+	plot/plotyy.m, plot/polar.m, plot/surfl.m, 
+	plot/private/__actual_axis_position.m:
+	Replace dataaspectratio and dataaspectratiomode properties with
+	plotboxaspectratio and plotboxaspectratio properties.
+
 2010-01-29  John W. Eaton  <jwe@octave.org>
 
 	* polynomial/compan.m, polynomial/conv.m, polynomial/deconv.m,
 	polynomial/mpoles.m, polynomial/polyderiv.m,
 	polynomial/polygcd.m, polynomial/polyout.m,
 	polynomial/polyreduce.m, polynomial/polyval.m,
 	polynomial/polyvalm.m, polynomial/residue.m:
 	Point to polyint in @seealso, not polyinteg.
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -44,17 +44,17 @@ function __go_draw_axes__ (h, plot_strea
     else
       ymirror = true;
     endif
 
     nd = __calc_dimensions__ (axis_obj);
     pos = axis_obj.position;
     pos = pos - implicit_margin([1, 2, 1, 2]).*[1, 1, -0.5, -0.5];
     if (__gnuplot_has_feature__ ("screen_coordinates_for_{lrtb}margin"))
-      if (strcmpi (axis_obj.dataaspectratiomode, "manual"))
+      if (strcmpi (axis_obj.plotboxaspectratiomode, "manual"))
 	pos = __actual_axis_position__ (axis_obj);
       endif
       if (nd == 2)
 	x = [1, 1];
       else
 	## 3D plots need to be sized down to fit in the window.
 	x = 1.0 ./ sqrt([2, 2.5]);
       endif
@@ -67,18 +67,18 @@ function __go_draw_axes__ (h, plot_strea
       fprintf (plot_stream, "set tmargin 0;\n");
       fprintf (plot_stream, "set bmargin 0;\n");
       fprintf (plot_stream, "set lmargin 0;\n");
       fprintf (plot_stream, "set rmargin 0;\n");
 
       fprintf (plot_stream, "set origin %.15g, %.15g;\n", pos(1), pos(2));
       fprintf (plot_stream, "set size %.15g, %.15g;\n", pos(3), pos(4));
 
-      if (strcmpi (axis_obj.dataaspectratiomode, "manual"))
-        r = axis_obj.dataaspectratio;
+      if (strcmpi (axis_obj.plotboxaspectratiomode, "manual"))
+        r = axis_obj.plotboxaspectratio;
         fprintf (plot_stream, "set size ratio %.15g;\n", -r(2)/r(1));
       else
         fputs (plot_stream, "set size noratio;\n");
       endif
     endif
 
     ## Reset all labels, axis-labels, tick-labels, and title
     ## FIXME - We should have an function to initialize the axis.
diff --git a/scripts/plot/axis.m b/scripts/plot/axis.m
--- a/scripts/plot/axis.m
+++ b/scripts/plot/axis.m
@@ -160,32 +160,32 @@ function curr_axis = __axis__ (ca, ax, v
       set (ca, "ydir", "normal");
 
       ## aspect ratio
     elseif (strcmpi (ax, "image"))
       __axis__ (ca, "equal")
       __do_tight_option__ (ca);
     elseif (strcmpi (ax, "square"))
       if (__gnuplot_has_feature__ ("screen_coordinates_for_{lrtb}margin"))
-        set (ca, "dataaspectratio", [1, 1, 1]);
+        set (ca, "plotboxaspectratio", [1, 1, 1]);
       else
         x = xlim;
         y = ylim;
-        set (ca, "dataaspectratio", [(y(2)-y(1)), (x(2)-x(1)), 1]);
+        set (ca, "plotboxaspectratio", [(y(2)-y(1)), (x(2)-x(1)), 1]);
       endif
     elseif  (strcmp (ax, "equal"))
       if (__gnuplot_has_feature__ ("screen_coordinates_for_{lrtb}margin"))
         x = xlim;
         y = ylim;
-        set (ca, "dataaspectratio", [(x(2)-x(1)), (y(2)-y(1)), 1]);
+        set (ca, "plotboxaspectratio", [(x(2)-x(1)), (y(2)-y(1)), 1]);
       else
-        set (ca, "dataaspectratio", [1, 1, 1]);
+        set (ca, "plotboxaspectratio", [1, 1, 1]);
       endif
     elseif (strcmpi (ax, "normal"))
-      set (ca, "dataaspectratiomode", "auto");
+      set (ca, "plotboxaspectratiomode", "auto");
 
       ## axis limits
     elseif (len >= 4 && strcmpi (ax(1:4), "auto"))
       if (len > 4)
 	if (any (ax == "x"))
 	  set (ca, "xlimmode", "auto");
 	endif
 	if (any (ax == "y"))
diff --git a/scripts/plot/colorbar.m b/scripts/plot/colorbar.m
--- a/scripts/plot/colorbar.m
+++ b/scripts/plot/colorbar.m
@@ -141,28 +141,28 @@ function h = colorbar (varargin)
       else
 	set (cax, "ytick", [], "xdir", "normal", "ydir", "normal",
 	     "xlim", cext, "xlimmode", "manual",
 	     "xaxislocation", "bottom", args{:});
       endif
     endif
 
     if (! isnan (aspect))
-      set (cax, "dataaspectratio", aspect);
+      set (cax, "plotboxaspectratio", aspect);
     endif
 
     ctext = text (0, 0, "", "tag", "colorbar","visible", "off", 
 		  "handlevisibility", "off", "xliminclude", "off",  
 		  "yliminclude", "off", "zliminclude", "off",
 		  "deletefcn", {@deletecolorbar, cax, orig_pos, orig_opos});
 
     set (cax, "deletefcn", {@resetaxis, orig_pos, orig_opos});
 
     addlistener (ax, "clim", {@update_colorbar_clim, hi, vertical})
-    addlistener (ax, "dataaspectratio", {@update_colorbar_axis, cax})
+    addlistener (ax, "plotboxaspectratio", {@update_colorbar_axis, cax})
     addlistener (ax, "position", {@update_colorbar_axis, cax})
 
   endif
 
   if (nargout > 0)
     h = cax;
   endif
 endfunction
@@ -231,29 +231,29 @@ function update_colorbar_axis (h, d, cax
 	     "xaxislocation", "top", "position", cpos);
       else
 	set (cax, "ytick", [], "xdir", "normal", "ydir", "normal",
 	     "xaxislocation", "bottom", "position", cpos);
       endif
     endif
 
     if (! isnan (aspect))
-      set (cax, "dataaspectratio", aspect);
+      set (cax, "plotboxaspectratio", aspect);
     endif
   endif
 endfunction
 
 function [pos, cpos, vertical, mirr, aspect] = __position_colorbox__ (cbox, obj, cf)
 
   pos = obj.position;
   sz = pos(3:4);
 
   off = 0;
-  if (strcmpi (obj.dataaspectratiomode, "manual"))
-    r = obj.dataaspectratio;
+  if (strcmpi (obj.plotboxaspectratiomode, "manual"))
+    r = obj.plotboxaspectratio;
     if (pos(3) > pos(4))
       switch (cbox)
 	case {"east", "eastoutside", "west", "westoutside"}
 	  off = [(pos(3) - pos(4)) ./ (r(2) / r(1)), 0];	  
       endswitch
     else
       switch (cbox)
 	case {"north", "northoutside", "south", "southoutside"}
@@ -319,17 +319,17 @@ function [pos, cpos, vertical, mirr, asp
       origin = pos(1:2) + [0.05, 0.05] .* sz + off;
       sz = sz .* [0.06, 1.0] .* 0.9;
       mirr = true;
       vertical = true;
   endswitch
 
   cpos = [origin, sz];
 
-  if (strcmpi (obj.dataaspectratiomode, "manual"))
+  if (strcmpi (obj.plotboxaspectratiomode, "manual"))
     if (__gnuplot_has_feature__ ("screen_coordinates_for_{lrtb}margin"))
       obj.position = pos;
       actual_pos = __actual_axis_position__ (obj);
       if (strfind (cbox, "outside"))
 	scale = 1.0;
       else
 	scale = 0.9;
       endif
diff --git a/scripts/plot/isocolors.m b/scripts/plot/isocolors.m
--- a/scripts/plot/isocolors.m
+++ b/scripts/plot/isocolors.m
@@ -41,18 +41,18 @@
 ## argument to all variations of function calls instead of the vertices
 ## data @var{v}.  Finally, if no output argument is given then directly
 ## change the colors of a patch that is given by the patch handle
 ## @var{p}.
 ##
 ## For example,
 ## @example
 ## function [] = isofinish (p)
-##   set (gca, "DataAspectRatioMode", "manual", \
-##        "DataAspectRatio", [1 1 1]);
+##   set (gca, "PlotBoxAspectRatioMode", "manual", \
+##        "PlotBoxAspectRatio", [1 1 1]);
 ##   set (p, "FaceColor", "interp");
 ##   ## set (p, "FaceLighting", "flat");
 ##   ## light ("Position", [1 1 5]); ## Available with JHandles
 ## endfunction
 ## 
 ## N = 15;    ## Increase number of vertices in each direction
 ## iso = .4;  ## Change isovalue to .1 to display a sphere
 ## lin = linspace (0, 2, N);
diff --git a/scripts/plot/isonormals.m b/scripts/plot/isonormals.m
--- a/scripts/plot/isonormals.m
+++ b/scripts/plot/isonormals.m
@@ -39,17 +39,17 @@
 ## then compute the reverse vector normals of an isosurface geometry.
 ##
 ## If no output argument is given then directly redraw the patch that is
 ## given by the patch handle @var{p}.
 ##
 ## For example,
 ## @example
 ## function [] = isofinish (p)
-##   set (gca, "DataAspectRatioMode","manual","DataAspectRatio",[1 1 1]);
+##   set (gca, "PlotBoxAspectRatioMode","manual","PlotBoxAspectRatio",[1 1 1]);
 ##   set (p, "VertexNormals", -get(p,"VertexNormals")); ## Revert normals
 ##   set (p, "FaceColor", "interp");
 ##   ## set (p, "FaceLighting", "phong");
 ##   ## light ("Position", [1 1 5]); ## Available with JHandles
 ## endfunction
 ##
 ## N = 15;    ## Increase number of vertices in each direction
 ## iso = .4;  ## Change isovalue to .1 to display a sphere
diff --git a/scripts/plot/isosurface.m b/scripts/plot/isosurface.m
--- a/scripts/plot/isosurface.m
+++ b/scripts/plot/isosurface.m
@@ -73,38 +73,38 @@
 ## lin = linspace (0, 2, N);
 ## [x, y, z] = meshgrid (lin, lin, lin);
 ## c = abs ((x-.5).^2 + (y-.5).^2 + (z-.5).^2); 
 ## figure (); ## Open another figure window
 ##
 ## subplot (2, 2, 1); view (-38, 20); 
 ## [f, v] = isosurface (x, y, z, c, iso);
 ## p = patch ("Faces", f, "Vertices", v, "EdgeColor", "none");
-## set (gca, "DataAspectRatioMode","manual", "DataAspectRatio", [1 1 1]);
+## set (gca, "PlotBoxAspectRatioMode","manual", "PlotBoxAspectRatio", [1 1 1]);
 ## # set (p, "FaceColor", "green", "FaceLighting", "phong");
 ## # light ("Position", [1 1 5]); ## Available with the JHandles package
 ##
 ## subplot (2, 2, 2); view (-38, 20);
 ## p = patch ("Faces", f, "Vertices", v, "EdgeColor", "blue");
-## set (gca, "DataAspectRatioMode","manual", "DataAspectRatio", [1 1 1]);
+## set (gca, "PlotBoxAspectRatioMode","manual", "PlotBoxAspectRatio", [1 1 1]);
 ## # set (p, "FaceColor", "none", "FaceLighting", "phong");
 ## # light ("Position", [1 1 5]);
 ##
 ## subplot (2, 2, 3); view (-38, 20);
 ## [f, v, c] = isosurface (x, y, z, c, iso, y);
 ## p = patch ("Faces", f, "Vertices", v, "FaceVertexCData", c, \
 ##            "FaceColor", "interp", "EdgeColor", "none");
-## set (gca, "DataAspectRatioMode","manual", "DataAspectRatio", [1 1 1]);
+## set (gca, "PlotBoxAspectRatioMode","manual", "PlotBoxAspectRatio", [1 1 1]);
 ## # set (p, "FaceLighting", "phong");
 ## # light ("Position", [1 1 5]);
 ##
 ## subplot (2, 2, 4); view (-38, 20);
 ## p = patch ("Faces", f, "Vertices", v, "FaceVertexCData", c, \
 ##            "FaceColor", "interp", "EdgeColor", "blue");
-## set (gca, "DataAspectRatioMode","manual", "DataAspectRatio", [1 1 1]);
+## set (gca, "PlotBoxAspectRatioMode","manual", "PlotBoxAspectRatio", [1 1 1]);
 ## # set (p, "FaceLighting", "phong");
 ## # light ("Position", [1 1 5]);
 ## @end example
 ##
 ## @seealso{isocolors, isonormals, isocaps}
 ##
 ## @end deftypefn
 
diff --git a/scripts/plot/plotyy.m b/scripts/plot/plotyy.m
--- a/scripts/plot/plotyy.m
+++ b/scripts/plot/plotyy.m
@@ -178,18 +178,18 @@ function [ax, h1, h2] = __plotyy__ (ax, 
 
   set (t1, "deletefcn", {@deleteplotyy, ax(2), t2});
   set (t2, "deletefcn", {@deleteplotyy, ax(1), t1});
 
   addlistener (ax(1), "position", {@update_position, ax(2)});
   addlistener (ax(2), "position", {@update_position, ax(1)});
   addlistener (ax(1), "view", {@update_position, ax(2)});
   addlistener (ax(2), "view", {@update_position, ax(1)});
-  addlistener (ax(1), "dataaspectratio", {@update_position, ax(2)});
-  addlistener (ax(2), "dataaspectratio", {@update_position, ax(1)});
+  addlistener (ax(1), "plotboxaspectratio", {@update_position, ax(2)});
+  addlistener (ax(2), "plotboxaspectratio", {@update_position, ax(1)});
 
   ## Tag the plotyy axes, so we can use that information
   ## not to mirror the y axis tick marks
   set (ax, "tag", "plotyy")
 
   ## Store the axes handles for the sister axes.
   addproperty ("__plotyy_axes__", ax(1), "data", ax);
   addproperty ("__plotyy_axes__", ax(2), "data", ax);
@@ -232,29 +232,29 @@ function update_position (h, d, ax2)
   persistent recursion = false;
 
   ## Don't allow recursion
   if (! recursion)
     unwind_protect
       recursion = true;
       position = get (h, "position");
       view = get (h, "view");
-      dataaspectratio = get (h, "dataaspectratio");
-      dataaspectratiomode = get (h, "dataaspectratiomode");
+      plotboxaspectratio = get (h, "plotboxaspectratio");
+      plotboxaspectratiomode = get (h, "plotboxaspectratiomode");
       oldposition = get (ax2, "position");
       oldview = get (ax2, "view");
-      olddataaspectratio = get (ax2, "dataaspectratio");
-      olddataaspectratiomode = get (ax2, "dataaspectratiomode");
+      oldplotboxaspectratio = get (ax2, "plotboxaspectratio");
+      oldplotboxaspectratiomode = get (ax2, "plotboxaspectratiomode");
       if (! (isequal (position, oldposition) && isequal (view, oldview)))
 	set (ax2, "position", position, "view", view)
       endif
-      if (! (isequal (dataaspectratio, olddataaspectratio) 
-	     && isequal (dataaspectratiomode, olddataaspectratiomode)))
-	set (ax2, "dataaspectratio", dataaspectratio);
-	set (ax2, "dataaspectratiomode", dataaspectratiomode);
+      if (! (isequal (plotboxaspectratio, oldplotboxaspectratio) 
+	     && isequal (plotboxaspectratiomode, oldplotboxaspectratiomode)))
+	set (ax2, "plotboxaspectratio", plotboxaspectratio);
+	set (ax2, "plotboxaspectratiomode", plotboxaspectratiomode);
       endif
     unwind_protect_cleanup
       recursion = false;
     end_unwind_protect
   endif  
 endfunction
 
 function color = getcolor (ax)
diff --git a/scripts/plot/polar.m b/scripts/plot/polar.m
--- a/scripts/plot/polar.m
+++ b/scripts/plot/polar.m
@@ -65,17 +65,17 @@ function retval = polar (varargin)
 	maxr = max (varargin{1}(:));
       endif
     else
       print_usage ();
     endif
 
     set (h, "xlim", [-maxr, maxr], "ylim", [-maxr, maxr],
 	 "xaxislocation", "zero", "yaxislocation", "zero",
-	 "dataaspectratio", [1, 1, 1]); 
+	 "plotboxaspectratio", [1, 1, 1]); 
 
     if (nargout > 0)
       retval = tmp;
     endif
   unwind_protect_cleanup
     axes (oldh);
   end_unwind_protect
 
diff --git a/scripts/plot/private/__actual_axis_position__.m b/scripts/plot/private/__actual_axis_position__.m
--- a/scripts/plot/private/__actual_axis_position__.m
+++ b/scripts/plot/private/__actual_axis_position__.m
@@ -29,20 +29,20 @@ function pos = __actual_axis_position__ 
     axis_obj = get (axis_obj);
   endif
 
   ## When using {rltb}margin, Gnuplot does not handle the specified
   ## aspect ratio properly, so handle it here.
   if (__calc_dimensions__ (axis_obj) == 3)
     ## FIXME -- this works for "axis square", but has not been
     ##          thoroughly tested for other aspect ratios.
-    aspect_ratio_2d = [max(axis_obj.dataaspectratio(1:2)), ...
-			   axis_obj.dataaspectratio(3)/sqrt(2)];
+    aspect_ratio_2d = [max(axis_obj.plotboxaspectratio(1:2)), ...
+			   axis_obj.plotboxaspectratio(3)/sqrt(2)];
   else
-    aspect_ratio_2d = axis_obj.dataaspectratio(1:2);
+    aspect_ratio_2d = axis_obj.plotboxaspectratio(1:2);
   endif
   orig_fig_units = get (axis_obj.parent, "units");
   orig_fig_position = get (axis_obj.parent, "units");
   unwind_protect
     set (axis_obj.parent, "units", "pixels")
     fig_position = get (axis_obj.parent, "position");
     pos_in_pixels = axis_obj.position .* fig_position([3, 4, 3, 4]);
     orig_aspect_ratio_2d = pos_in_pixels(3:4);
diff --git a/scripts/plot/surfl.m b/scripts/plot/surfl.m
--- a/scripts/plot/surfl.m
+++ b/scripts/plot/surfl.m
@@ -133,17 +133,17 @@ function retval = surfl (varargin)
       Phi = 45.0 / 180.0 * pi;
       R = [cos(Phi), -sin(Phi), 0;
            sin(Phi),  cos(Phi), 0;
            0,          0,         1];
       lv = (R * vv.').';
     endif
 
     vn = get (tmp, "vertexnormals");
-    dar = get (h, "dataaspectratio");
+    dar = get (h, "plotboxaspectratio");
     vn(:,:,1) *= dar(1);
     vn(:,:,2) *= dar(2);
     vn(:,:,3) *= dar(3);
 
     ## Normalize vn.
     vn = vn ./ repmat (sqrt (sumsq (vn, 3)), [1, 1, 3]);
     [nr, nc] = size(get(tmp, "zdata"));
 
