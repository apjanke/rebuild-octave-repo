# HG changeset patch
# User jwe
# Date 1197270361 0
#      Mon Dec 10 07:06:01 2007 +0000
# Node ID 05ee52d7fad643f3367943822a01b1e243ad6971
# Parent  c18512d0ddb60051b1a802bbf5df24e68c133eb1
[project @ 2007-12-10 07:06:00 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2007-12-10  John W. Eaton  <jwe@octave.org>
+
+	* file-ops.cc (file_ops::concat): New function.
+	* file-ops.h: Provide decl.
+
 2007-12-07  John W. Eaton  <jwe@octave.org>
 
 	* oct-time.cc (octave_base_tm::init): Only assign t->tm_zone if it
 	is not 0.
 
 2007-12-07  David Bateman  <dbateman@free.fr>
 
 	* Sparse-op-defs.h (SPARSE_SMS_CMP_OP, SPARSE_SMS_BOOL_OP,
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -852,13 +852,23 @@ file_ops::unlink (const std::string& nam
 }
 
 bool
 file_ops::is_dir_sep (char c)
 {
   return dir_sep_chars.find (c) != NPOS;
 }
 
+std::string
+file_ops::concat (const std::string& dir, const std::string& file)
+{
+  return dir.empty ()
+    ? file
+    : (is_dir_sep (dir[dir.length()-1])
+       ? dir + file
+       : dir + file_ops::dir_sep_char + file);
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/file-ops.h b/liboctave/file-ops.h
--- a/liboctave/file-ops.h
+++ b/liboctave/file-ops.h
@@ -81,16 +81,18 @@ file_ops
 
   static int umask (mode_t);
 
   static int unlink (const std::string&);
   static int unlink (const std::string&, std::string&);
 
   static bool is_dir_sep (char);
 
+  static std::string concat (const std::string&, const std::string&);
+
   static char dir_sep_char;
   static std::string dir_sep_str;
   static std::string dir_sep_chars;
 };
 
 #endif
 
 /*
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
 2007-12-10  John W. Eaton  <jwe@octave.org>
 
+	* oct-hist.cc (default_history_file): Use file_ops::concat.
+	* load-path.cc (dir_info::initialize, dir_info::get_file_list,
+	load_path::do_find_fcn, load_path::do_find_file, genpath,
+	execute_pkg_add_or_del, load_path::do_find_first_of,
+	load_path::do_find_all_first_of): Likewise.
+
+	* help.cc (Flookfor): Avoid doubling directory separator.
+	* dirfns.cc (Fmkdir): Likewise.
+
 	* pt-mat.cc (tree_matrix::rvalue): Produce sq_string if any
 	strings are sq_string objects.
 
 2007-12-07  David Bateman  <dbateman@free.fr>
 
 	* data.cc (Fnorm): Don't return a scalar stored as a sparse
 	matrix. Convert it to a scalar.
 
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -235,17 +235,17 @@ message identifier.\n\
       std::string dir = args(1).string_value ();
 
       if (error_state)
 	{
 	  gripe_wrong_type_arg ("mkdir", args(0));
 	  return retval;
 	}
       else
-	dirname = parent + file_ops::dir_sep_char + dir;
+	dirname = file_ops::concat (parent, dir);
     }
   else if (nargin == 1)
     {
       dirname = args(0).string_value ();
 
       if (error_state)
 	{
 	  gripe_wrong_type_arg ("mkdir", args(0));
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -1977,17 +1977,20 @@ to find related functions that are not p
 		  symbol_record *sr = fbi_sym_tab->lookup (name);
 
 		  if (!sr)
 		    {
 		      // Check if this version is first in the path
 
 		      std::string file_name = load_path::find_fcn (name);
 		      
-		      std::string dir = dirs[i] + file_ops::dir_sep_str;
+		      std::string dir = dirs[i];
+
+		      if (! file_ops::is_dir_sep (dir[dir.length()-1]))
+			dir += file_ops::dir_sep_str;
 
 		      if (file_name == dir + name + ".oct"
 			  || file_name == dir + name + ".m")
 			{
 			  bool symbol_found;
 
 			  std::string h;
 			  if (file_name == dir + name + ".oct")
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -82,17 +82,17 @@ load_path::dir_info::initialize (void)
       dir_mtime = fs.mtime ();
 
       bool has_private_subdir = get_file_list (dir_name);
 
       if (! error_state)
 	{
 	  if (has_private_subdir)
 	    {
-	      std::string pdn = dir_name + file_ops::dir_sep_str + "private";
+	      std::string pdn = file_ops::concat (dir_name, "private");
 
 	      get_private_function_map (pdn);
 	    }
 	}
     }
   else
     {
       std::string msg = fs.error ();
@@ -118,17 +118,17 @@ load_path::dir_info::get_file_list (cons
 
       octave_idx_type all_files_count = 0;
       octave_idx_type fcn_files_count = 0;
 
       for (octave_idx_type i = 0; i < len; i++)
 	{
 	  std::string fname = flist[i];
 
-	  std::string full_name = d + file_ops::dir_sep_str + fname;
+	  std::string full_name = file_ops::concat (d, fname);
 
 	  file_stat fs (full_name);
 
 	  if (fs)
 	    {
 	      if (fs.is_dir ())
 		{
 		  if (! has_private_subdir && fname == "private")
@@ -636,17 +636,17 @@ load_path::do_find_fcn (const std::strin
       for (const_file_info_list_iterator i = file_info_list.begin ();
 	   i != file_info_list.end ();
 	   i++)
 	{
 	  const file_info& fi = *i;
 
 	  int t = fi.types;
 
-	  retval = fi.dir_name + file_ops::dir_sep_str + fcn;
+	  retval = file_ops::concat (fi.dir_name, fcn);
 
 	  if (type == load_path::OCT_FILE)
 	    {
 	      if ((type & t) == load_path::OCT_FILE)
 		{
 		  retval += ".oct";
 		  break;
 		}
@@ -753,17 +753,17 @@ load_path::do_find_file (const std::stri
 	    return file;
 	}
       else
 	{
 	  for (const_dir_info_list_iterator p = dir_info_list.begin ();
 	       p != dir_info_list.end ();
 	       p++)
 	    {
-	      std::string tfile = p->dir_name + file_ops::dir_sep_str + file;
+	      std::string tfile = file_ops::concat (p->dir_name, file);
 
 	      file_stat fs (tfile);
 
 	      if (fs.exists ())
 		return tfile;
 	    }
 	}
     }
@@ -775,17 +775,17 @@ load_path::do_find_file (const std::stri
 	{
 	  string_vector all_files = p->all_files;
 
 	  octave_idx_type len = all_files.length ();
 
 	  for (octave_idx_type i = 0; i < len; i++)
 	    {
 	      if (all_files[i] == file)
-		return p->dir_name + file_ops::dir_sep_str + file;
+		return file_ops::concat (p->dir_name, file);
 	    }
 	}
     }
 
   return retval;
 }
 
 std::string
@@ -837,17 +837,17 @@ load_path::do_find_first_of (const strin
 		}
 	    }
 	}
     }
 
  done:
 
   if (! dir_name.empty ())
-    retval = dir_name + file_ops::dir_sep_str + file_name;
+    retval = file_ops::concat (dir_name, file_name);
 
   return retval;
 }
 
 string_vector
 load_path::do_find_all_first_of (const string_vector& flist) const
 {
   std::list<std::string> retlist;
@@ -884,17 +884,17 @@ load_path::do_find_all_first_of (const s
       octave_idx_type len = all_files.length ();
 
       for (octave_idx_type i = 0; i < len; i++)
 	{
 	  for (octave_idx_type j = 0; j < rel_flen; j++)
 	    {
 	      if (all_files[i] == rel_flist[j])
 		retlist.push_back
-		  (p->dir_name + file_ops::dir_sep_str + rel_flist[j]);
+		  (file_ops::concat (p->dir_name, rel_flist[j]));
 	    }
 	}
     }
 
   size_t retsize = retlist.size ();
 
   string_vector retval (retsize);
 
@@ -1192,17 +1192,17 @@ genpath (const std::string& dirname, con
 		{
 		  skip_p = (elt == skip[j]);
 		  if (skip_p)
 		    break;
 		}
 
 	      if (! skip_p)
 		{
-		  std::string nm = dirname + file_ops::dir_sep_str + elt;
+		  std::string nm = file_ops::concat (dirname, elt);
 
 		  file_stat fs (nm);
 
 		  if (fs && fs.is_dir ())
 		    retval += dir_path::path_sep_str + genpath (nm);
 		}
 	    }
 	}
@@ -1219,17 +1219,17 @@ execute_pkg_add_or_del (const std::strin
     return;
 
   unwind_protect::begin_frame ("execute_pkg_add_or_del");
 
   unwind_protect_bool (input_from_startup_file);
 
   input_from_startup_file = true;
 
-  std::string file = dir + file_ops::dir_sep_str + script_file;
+  std::string file = file_ops::concat (dir, script_file);
 
   file_stat fs (file);
 
   if (fs.exists ())
     source_file (file, "base");
 
   unwind_protect::run_frame ("execute_pkg_add_or_del");
 }
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -82,29 +82,18 @@ default_history_file (void)
   std::string file;
 
   std::string env_file = octave_env::getenv ("OCTAVE_HISTFILE");
 
   if (! env_file.empty ())
     file = env_file;
 
   if (file.empty ())
-    {
-      std::string home_dir = octave_env::get_home_directory ();
-
-      if (! home_dir.empty ())
-	{
-	  file = home_dir;
-	  if (! file_ops::is_dir_sep (file[file.length()-1]))
-	    file += file_ops::dir_sep_char;
-	  file.append (".octave_hist");
-	}
-      else
-	file = ".octave_hist";
-    }
+    file = file_ops::concat (octave_env::get_home_directory (),
+			     ".octave_hist");
 
   return file;
 }
 
 // Where history is saved.
 static std::string Vhistory_file = default_history_file ();
 
 static int
