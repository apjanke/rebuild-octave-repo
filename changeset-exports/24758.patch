# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518652978 18000
#      Wed Feb 14 19:02:58 2018 -0500
# Node ID 09364b41ddb69e74d227a77aebd1364d91560d40
# Parent  3897b81979d52d144ea4f19f5f05e5497397e576
allow dynamic resizing of display rows and columns in variable editor

* variable-editor-model.h, variable-editor-model.cc
(ve_base_model::maybe_resize_rows, ve_base_model::maybe_resize_columns,
numeric_model::maybe_resize_rows, numeric_model::maybe_resize_columns,
cell_model::maybe_resize_rows, cell_model::maybe_resize_columns,
struct_vector_model::maybe_resize_rows,
struct_model::maybe_resize_rows, struct_model::maybe_resize_columns,
variable_editor_model::change_display_size): New functions.

(variable_editor_model::update_data): Call change_display_size if row
or column size changes.

(variable_editor_model::maybe_resize_rows,
variable_editor_model::maybe_resize_columns): New functions.

* variable-editor.h, variable-editor.cc
(variable_editor_tab::variable_editor_tab): Initialize all data
members.
(variable_editor_tab::keyPressEvent): New function.

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -325,28 +325,40 @@ class numeric_model : public base_ve_mod
 public:
 
   numeric_model (const QString& expr, const octave_value& val)
     : base_ve_model (expr, val)
   {
     // FIXME: should fill the window and expand on scrolling or
     // resizing.
 
-    m_display_rows = m_data_rows + 16;
-    m_display_cols = m_data_cols + 16;
+    maybe_resize_rows (m_data_rows + 16);
+    maybe_resize_columns (m_data_cols + 16);
   }
 
   ~numeric_model (void) = default;
 
   // No copying!
 
   numeric_model (const numeric_model&) = delete;
 
   numeric_model& operator = (const numeric_model&) = delete;
 
+  void maybe_resize_rows (int rows)
+  {
+    if (rows > m_display_rows)
+      m_display_rows = rows;
+  }
+
+  void maybe_resize_columns (int cols)
+  {
+    if (cols > m_display_cols)
+      m_display_cols = cols;
+  }
+
   QVariant edit_display (const QModelIndex& idx, int role) const
   {
     int row;
     int col;
 
     if (! index_ok (idx, row, col))
       return QVariant ();
 
@@ -414,28 +426,40 @@ class cell_model : public base_ve_model
 public:
 
   cell_model (const QString& expr, const octave_value& val)
     : base_ve_model (expr, val)
   {
     // FIXME: should fill the window and expand on scrolling or
     // resizing.
 
-    m_display_rows = m_data_rows + 16;
-    m_display_cols = m_data_cols + 16;
+    maybe_resize_rows (m_data_rows + 16);
+    maybe_resize_columns (m_data_cols + 16);
   }
 
   ~cell_model (void) = default;
 
   // No copying!
 
   cell_model (const cell_model&) = delete;
 
   cell_model& operator = (const cell_model&) = delete;
 
+  void maybe_resize_rows (int rows)
+  {
+    if (rows > m_display_rows)
+      m_display_rows = rows;
+  }
+
+  void maybe_resize_columns (int cols)
+  {
+    if (cols > m_display_cols)
+      m_display_cols = cols;
+  }
+
   QVariant edit_display (const QModelIndex& idx, int role) const
   {
     int row;
     int col;
 
     if (! index_ok (idx, row, col))
       return QVariant ();
 
@@ -677,28 +701,33 @@ public:
   {
     // FIXME: should fill the window vertically and expand on scrolling
     // or resizing.  No extra cells horizontally.  New fields must be
     // added specially.
 
     m_data_rows = val.numel ();
     m_data_cols = val.nfields ();
 
-    m_display_rows = m_data_rows + 16;
-    m_display_cols = m_data_cols;
+    maybe_resize_rows (m_data_rows + 16);
   }
 
   ~vector_struct_model (void) = default;
 
   // No copying!
 
   vector_struct_model (const vector_struct_model&) = delete;
 
   vector_struct_model& operator = (const vector_struct_model&) = delete;
 
+  void maybe_resize_rows (int rows)
+  {
+    if (rows > m_display_rows)
+      m_display_rows = rows;
+  }
+
   QVariant edit_display (const QModelIndex& idx, int role) const
   {
     int row;
     int col;
 
     if (! index_ok (idx, row, col))
       return QVariant ();
 
@@ -804,28 +833,40 @@ class struct_model : public base_ve_mode
 public:
 
   struct_model (const QString& expr, const octave_value& val)
     : base_ve_model (expr, val)
   {
     // FIXME: should fill the window and expand on scrolling or
     // resizing.
 
-    m_display_rows = m_data_rows + 16;
-    m_display_cols = m_data_cols + 16;
+    maybe_resize_rows (m_data_rows + 16);
+    maybe_resize_columns (m_data_cols + 16);
   }
 
   ~struct_model (void) = default;
 
   // No copying!
 
   struct_model (const struct_model&) = delete;
 
   struct_model& operator = (const struct_model&) = delete;
 
+  void maybe_resize_rows (int rows)
+  {
+    if (rows > m_display_rows)
+      m_display_rows = rows;
+  }
+
+  void maybe_resize_columns (int cols)
+  {
+    if (cols > m_display_cols)
+      m_display_cols = cols;
+  }
+
   QVariant edit_display (const QModelIndex& idx, int) const
   {
     int row;
     int col;
 
     if (! index_ok (idx, row, col))
       return QVariant ();
 
@@ -1213,50 +1254,91 @@ variable_editor_model::update_data (cons
 
       emit data_error_signal (msg);
 
       return;
     }
 
   // Add or remove rows and columns when the size changes.
 
-  int old_display_rows = display_rows ();
-  int old_display_cols = display_columns ();
+  int old_rows = display_rows ();
+  int old_cols = display_columns ();
 
   reset (val);
 
-  int new_display_rows = display_rows ();
-  int new_display_cols = display_columns ();
+  int new_rows = display_rows ();
+  int new_cols = display_columns ();
+
+  if (new_rows != old_rows || new_cols != old_cols)
+    change_display_size (old_rows, old_cols, new_rows, new_cols);
+
+  // Even if the size doesn't change, we still need to update here
+  // because the data may have changed.
 
-  if (new_display_rows < old_display_rows)
+  emit dataChanged (QAbstractTableModel::index (0, 0),
+                    QAbstractTableModel::index (new_rows-1, new_cols-1));
+
+  clear_update_pending ();
+}
+
+void
+variable_editor_model::change_display_size (int old_rows, int old_cols,
+                                            int new_rows, int new_cols)
+{
+  if (new_rows < old_rows)
     {
-      beginRemoveRows (QModelIndex (), new_display_rows, old_display_rows-1);
+      beginRemoveRows (QModelIndex (), new_rows, old_rows-1);
       endRemoveRows ();
     }
-  else if (new_display_rows > old_display_rows)
+  else if (new_rows > old_rows)
     {
-      beginInsertRows (QModelIndex (), old_display_rows, new_display_rows-1);
+      beginInsertRows (QModelIndex (), old_rows, new_rows-1);
       endInsertRows ();
     }
 
-  if (new_display_cols < old_display_cols)
+  if (new_cols < old_cols)
     {
-      beginRemoveColumns (QModelIndex (), new_display_cols, old_display_cols-1);
+      beginRemoveColumns (QModelIndex (), new_cols, old_cols-1);
       endRemoveColumns ();
     }
-  else if (new_display_cols > old_display_cols)
+  else if (new_cols > old_cols)
     {
-      beginInsertColumns (QModelIndex (), old_display_cols, new_display_cols-1);
+      beginInsertColumns (QModelIndex (), old_cols, new_cols-1);
       endInsertColumns ();
     }
+}
 
-  clear_update_pending ();
+void
+variable_editor_model::maybe_resize_rows (int rows)
+{
+  int old_rows = display_rows ();
+  int old_cols = display_columns ();
+
+  rep->maybe_resize_rows (rows);
+
+  int new_rows = display_rows ();
+  int new_cols = display_columns ();
 
-  emit dataChanged (QAbstractTableModel::index (0, 0),
-                    QAbstractTableModel::index (new_display_rows-1, new_display_cols-1));
+  if (new_rows != old_rows)
+    change_display_size (old_rows, old_cols, new_rows, new_cols);
+}
+
+void
+variable_editor_model::maybe_resize_columns (int cols)
+{
+  int old_rows = display_rows ();
+  int old_cols = display_columns ();
+
+  rep->maybe_resize_columns (cols);
+
+  int new_rows = display_rows ();
+  int new_cols = display_columns ();
+
+  if (new_cols != old_cols)
+    change_display_size (old_rows, old_cols, new_rows, new_cols);
 }
 
 void
 variable_editor_model::data_error (const QString& msg)
 {
   invalidate ();
 
   update_description (msg);
diff --git a/libgui/src/variable-editor-model.h b/libgui/src/variable-editor-model.h
--- a/libgui/src/variable-editor-model.h
+++ b/libgui/src/variable-editor-model.h
@@ -42,16 +42,20 @@ public:
   virtual ~base_ve_model (void) = default;
 
   // No copying!
 
   base_ve_model (const base_ve_model&) = delete;
 
   base_ve_model& operator = (const base_ve_model&) = delete;
 
+  virtual void maybe_resize_rows (int) { }
+
+  virtual void maybe_resize_columns (int) { }
+
   std::string name (void) const;
 
   bool index_ok (const QModelIndex& idx, int& row, int& col) const;
 
   virtual bool is_editable (void) const { return true; }
 
   virtual octave_value value_at (const QModelIndex& idx) const;
 
@@ -244,17 +248,31 @@ public:
   // access a sub-element of a data structure.  For example "{1,3}"
   // for cell array element {1,3} or "(2,4)" for array element (2,4).
 
   QString subscript_expression (const QModelIndex& idx) const
   {
     return rep->subscript_expression (idx);
   }
 
-signals: // private
+  int display_rows (void) const
+  {
+    return rep->display_rows ();
+  }
+
+  int display_columns (void) const
+  {
+    return rep->display_columns ();
+  }
+
+  void maybe_resize_rows (int rows);
+
+  void maybe_resize_columns (int cols);
+
+signals:
 
   void update_data_signal (const octave_value& val);
 
   void data_error_signal (const QString& name) const;
 
   void user_error_signal (const QString& title, const QString& msg) const;
 
   void set_editable_signal (bool);
@@ -294,25 +312,18 @@ private:
     return rep->data_rows ();
   }
 
   octave_idx_type data_columns (void) const
   {
     return rep->data_columns ();
   }
 
-  int display_rows (void) const
-  {
-    return rep->display_rows ();
-  }
-
-  int display_columns (void) const
-  {
-    return rep->display_columns ();
-  }
+  void change_display_size (int old_rows, int old_cols,
+                            int new_rows, int new_cols);
 
   QString make_description_text (void) const
   {
     return rep->make_description_text ();
   }
 
   void reset (const octave_value& val);
 
diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -80,28 +80,67 @@ var_editor_tab::set_edit_view (QTableVie
 }
 
 void
 var_editor_tab::set_disp_view (QTextEdit *disp_view)
 {
   m_disp_view_idx = m_widget_stack->addWidget (disp_view);
 }
 
-
 bool
 var_editor_tab::has_focus (void) const
 {
   QTableView *edit_view = get_edit_view ();
   QTextEdit *disp_view = get_disp_view ();
 
   return ((disp_view && disp_view->hasFocus ())
           || (edit_view && edit_view->hasFocus ()));
 }
 
 void
+var_editor_tab::keyPressEvent (QKeyEvent *event)
+{
+  QTableView *edit_view = get_edit_view ();
+
+  if (edit_view)
+    {
+      int key = event->key ();
+
+      if (key == Qt::Key_Right || key == Qt::Key_Tab)
+        {
+          QModelIndex idx = edit_view->currentIndex ();
+
+          int curr_row = idx.row ();
+          int next_col = idx.column () + 1;
+
+          if (next_col == m_model->display_columns ())
+            {
+              m_model->maybe_resize_columns (next_col + 16);
+
+              edit_view->setCurrentIndex (m_model->index (curr_row, next_col));
+            }
+        }
+      else if (key == Qt::Key_Down || key == Qt::Key_PageDown)
+        {
+          QModelIndex idx = edit_view->currentIndex ();
+
+          int next_row = idx.row () + 1;
+          int curr_col = idx.column ();
+
+          if (next_row == m_model->display_rows ())
+            {
+              m_model->maybe_resize_rows (next_row + 16);
+
+              edit_view->setCurrentIndex (m_model->index (next_row, curr_col));
+            }
+        }
+    }
+}
+
+void
 var_editor_tab::set_editable (bool editable)
 {
   int idx = (editable ? m_edit_view_idx : m_disp_view_idx);
 
   m_widget_stack->setCurrentIndex (idx);
 
   if (! editable)
     {
diff --git a/libgui/src/variable-editor.h b/libgui/src/variable-editor.h
--- a/libgui/src/variable-editor.h
+++ b/libgui/src/variable-editor.h
@@ -44,17 +44,18 @@ class variable_editor_model;
 
 class var_editor_tab : public QWidget
 {
   Q_OBJECT
 
 public:
 
   var_editor_tab (QStackedWidget *widget_stack, QWidget *p = nullptr)
-    : QWidget (p), m_widget_stack (widget_stack)
+    : QWidget (p), m_model (nullptr), m_widget_stack (widget_stack),
+      m_edit_view_idx (-1), m_disp_view_idx (-1)
   { }
 
   ~var_editor_tab (void) = default;
 
   // No copying!
 
   var_editor_tab (const var_editor_tab&) = delete;
 
@@ -68,16 +69,18 @@ public:
 
   void set_model (variable_editor_model *model)
   {
     m_model = model;
   }
 
   bool has_focus (void) const;
 
+  void keyPressEvent (QKeyEvent *event);
+
 public slots:
 
   void set_editable (bool);
 
 private:
 
   variable_editor_model *m_model;
 
