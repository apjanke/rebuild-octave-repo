# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1483832555 18000
#      Sat Jan 07 18:42:35 2017 -0500
# Node ID 6094018f5e72ecb90fb67bb6597427414b4dda77
# Parent  1dfbdd593c5babd17b27238d4f09fede8c751fac
refactor configure checks for Sundials (bug #50003)

* configure.ac: Check for Sundials nvecserial and ida libraries
separately from the IDAKLU feature.
* acinclude.m4 (OCTAVE_CHECK_SUNDIALS_IDAKLU): New macro.
* oct-conf-post.in.h: Define HAVE_SUNDIALS here, depending on the
values of other HAVE_SUNDIALS_XYZ macros.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1552,44 +1552,16 @@ if test $build_fftw_threads = yes; then
   OCTAVE_CHECK_FFTW_THREADS(fftw3, fftw_plan_with_nthreads)
   OCTAVE_CHECK_FFTW_THREADS(fftw3f, fftwf_plan_with_nthreads)
 fi
 
 ## Subdirectory of liboctave/cruft to build if FFTW is not found.
 FFT_DIR="fftpack"
 AC_SUBST(FFT_DIR)
 
-### Check for KLU library and header.
-OCTAVE_CHECK_LIB(klu, KLU,
-  [KLU library not found.  This will result in some lack of functionality for sparse matrices],
-  [suitesparse/klu.h ufsparse/klu.h klu/klu.h klu.h], [klu_solve],
-  [], [don't use KLU library, disable some sparse matrix functionality])
-
-### Check for SUNDIALS_IDA library and header.
-save_CPPFLAGS="$CPPFLAGS"
-save_LIBS="$LIBS"
-CPPFLAGS="$KLU_CPPFLAGS $CPPFLAGS"
-LIBS="$KLU_LDFLAGS $KLU_LIBS $LIBS"
-OCTAVE_CHECK_LIB(sundials_ida, SUNDIALS_IDA,
-  [SUNDIALS_IDA library with IDAKLU solver support not found.  Solvers ode15i and ode15s will be disabled.],
-  [ida/ida.h ida.h], [IDAKLU], [], [],
-  [warn_sundials_ida=
-   OCTAVE_CHECK_SIZEOF_SUNDIALS_IDA_REALTYPE])
-LIBS="$save_LIBS"
-CPPFLAGS="$save_CPPFLAGS"
-
-## Additional check for sundials_nvecserial library
-OCTAVE_CHECK_LIB(sundials_nvecserial, SUNDIALS_NVECSERIAL,
-  [SUNDIALS_NVECSERIAL library not found.  Solvers ode15i and ode15s will be disabled.],
-  [nvector/nvector_serial.h nvector_serial.h ], [N_VNew_Serial],[],[],[])
-
-if test -n "$SUNDIALS_IDA_LIBS" && test -n "$SUNDIALS_NVECSERIAL_LIBS" && test $octave_cv_sizeof_ida_double = yes; then
-  AC_DEFINE(HAVE_SUNDIALS, 1, [Define to 1 if both SUNDIALS_IDA and SUNDIALS_NVECSERIAL are available.])
-fi
-
 ### Check for GLPK library and header.
 
 save_CPPFLAGS="$CPPFLAGS"
 save_LIBS="$LIBS"
 CPPFLAGS="$Z_CPPFLAGS $CPPFLAGS"
 LIBS="$Z_LDFLAGS $Z_LIBS $LIBS"
 OCTAVE_CHECK_LIB(glpk, GLPK,
   [GLPK library not found.  The glpk function for solving linear programs will be disabled.],
@@ -2119,25 +2091,33 @@ if test -z "$UMFPACK_LIBS"; then
     [umfpack${UMFPACK_TAG}get_determinant],
     [], [don't use UMFPACK, disable some sparse matrix functionality])
   if test -n "$UMFPACK_LIBS"; then
     UMFPACK_LIBS="$UMFPACK_LIBS -lcblas"
   fi
   LIBS="$save_LIBS"
 fi
 
+### Check for KLU library and header.
+
+OCTAVE_CHECK_LIB(klu, KLU,
+  [KLU library not found.  This will result in some lack of functionality for sparse matrices],
+  [suitesparse/klu.h ufsparse/klu.h klu/klu.h klu.h], [klu_solve],
+  [], [don't use KLU library, disable some sparse matrix functionality])
+
 ## If using SuiteSparse libraries, check for suitesparseconfig library.
 
 SUITESPARSE_CONFIG_LIBS=
 if test x$octave_cv_lib_amd = xyes \
    || test x$octave_cv_lib_camd = xyes \
    || test x$octave_cv_lib_colamd = xyes \
    || test x$octave_cv_lib_ccolamd = xyes \
    || test x$octave_cv_lib_cholmod = xyes \
    || test x$octave_cv_lib_cxsparse = xyes \
+   || test x$octave_cv_lib_klu = xyes \
    || test x$octave_cv_lib_umfpack = xyes; then
   ## SuiteSparse >= 4.0 needs additional link library for SuiteSparse_time
   save_CPPFLAGS="$CPPFLAGS"
   save_LIBS="$LIBS";
   CPPFLAGS="$UMFPACK_CPPFLAGS $AMD_CPPFLAGS $CPPFLAGS"
   LIBS="$UMFPACK_LIBS $AMD_LDFLAGS $AMD_LIBS $BLAS_LIBS $FLIBS $LIBS"
   xtra_libs=
   AC_CHECK_LIB([suitesparseconfig], [SuiteSparse_time],
@@ -2156,16 +2136,45 @@ if test -n "$UMFPACK_LIBS"; then
   save_LIBS="$LIBS";
   CPPFLAGS="$UMFPACK_CPPFLAGS $AMD_CPPFLAGS $CPPFLAGS"
   LIBS="$UMFPACK_LIBS $CHOLMOD_LDFLAGS $CHOLMOD_LIBS $AMD_LDFLAGS $AMD_LIBS $COLAMD_LDFLAGS $COLAMD_LIBS $LAPACK_LIBS $BLAS_LIBS $FLIBS $LIBS $xtra_libs"
   OCTAVE_UMFPACK_SEPARATE_SPLIT
   LIBS="$save_LIBS"
   CPPFLAGS="$save_CPPFLAGS"
 fi
 
+### Check for Sundials nvecserial library and header.
+
+OCTAVE_CHECK_LIB(sundials_nvecserial, [Sundials nvecserial],
+  [Sundials nvecserial library not found.  Solvers ode15i and ode15s will be disabled.],
+  [nvector/nvector_serial.h nvector_serial.h ], [N_VNew_Serial],
+  [], [don't use Sundials nvecserial library, solvers ode15i and ode15s will be disabled])
+
+if test -n "$SUNDIALS_NVECSERIAL_LIBS"; then
+  AC_DEFINE(HAVE_SUNDIALS_NVECSERIAL, 1,
+    [Define to 1 if Sundials nvecserial is available.])
+fi
+
+### Check for Sundials IDA library and header.
+
+save_LIBS="$LIBS"
+LIBS="$SUNDIALS_NVECSERIAL_LIBS $BLAS_LIBS $FLIBS $LIBS"
+OCTAVE_CHECK_LIB(sundials_ida, [Sundials IDA],
+  [Sundials IDA library not found.  Solvers ode15i and ode15s will be disabled.],
+  [ida/ida.h ida.h], [IDAInit],
+  [], [don't use Sundials IDA library, solvers ode15i and ode15s will be disabled],
+  [warn_sundials_ida=
+   OCTAVE_CHECK_SIZEOF_SUNDIALS_IDA_REALTYPE
+   OCTAVE_CHECK_SUNDIALS_IDAKLU])
+LIBS="$save_LIBS"
+
+if test -n "$SUNDIALS_IDA_LIBS"; then
+  AC_DEFINE(HAVE_SUNDIALS_IDA, 1, [Define to 1 if Sundials IDA is available.])
+fi
+
 ### Check for ARPACK library.
 
 save_LIBS="$LIBS"
 LIBS="$LAPACK_LIBS $BLAS_LIBS $FLIBS $LIBS"
 OCTAVE_CHECK_LIB([arpack], ARPACK,
   [ARPACK not found.  The eigs function will be disabled.],
   [],
   [dseupd],
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1675,39 +1675,69 @@ c assume the default integer size is 32-
        octave_cv_sizeof_fortran_integer=8,
        octave_cv_sizeof_fortran_integer=4,
        octave_cv_sizeof_fortran_integer=4)
   ])
   AC_LANG_POP(Fortran 77)
   FFLAGS="$ac_octave_save_FFLAGS"
 ])
 dnl
-dnl Check whether sundials_ida library is configured with double precision realtype
+dnl Check whether Sundials IDA library is configured with double
+dnl precision realtype.
 dnl
 AC_DEFUN([OCTAVE_CHECK_SIZEOF_SUNDIALS_IDA_REALTYPE], [
-  AC_CACHE_CHECK([whether sundials_ida is configured with double precision realtype],
+  AC_CACHE_CHECK([whether Sundials IDA is configured with double precision realtype],
     [octave_cv_sizeof_ida_double],
     [AC_RUN_IFELSE([AC_LANG_PROGRAM([[
         #if defined (HAVE_IDA_IDA_H)
         #include <ida/ida.h>
         #else
         #include <ida.h>
         #endif
         #include <assert.h>
         ]], [[
         assert (sizeof (double) == sizeof (realtype));
       ]])],
       octave_cv_sizeof_ida_double=yes,
       octave_cv_sizeof_ida_double=no)
   ])
   if test $octave_cv_sizeof_ida_double = yes; then
     AC_DEFINE(HAVE_SUNDIALS_IDA_DOUBLE, 1,
-      [Define to 1 if sundials_ida is configured with realtype as double.])
+      [Define to 1 if Sundials IDA is configured with realtype as double.])
   else
-    warn_sundials_ida="sundials_ida library found, but it's not configured with double precision realtype; function ode15i and ode15s will be disabled"
+    warn_sundials_ida_double="Sundials IDA library not configured with double precision realtype, ode15i and ode15s will be disabled"
+    OCTAVE_CONFIGURE_WARNING([warn_sundials_ida_double])
+  fi
+])
+dnl
+dnl Check whether Sundials IDA library is configured with IDAKLU
+dnl enabled.
+dnl
+AC_DEFUN([OCTAVE_CHECK_SUNDIALS_IDAKLU], [
+  AC_CHECK_HEADERS([ida/ida_klu.h ida_klu.h])
+  AC_CACHE_CHECK([whether Sundials IDA is configured with IDAKLU enabled],
+    [octave_cv_sundials_idaklu],
+    [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+         #if defined (HAVE_IDA_IDA_KLU_H)
+         #include <ida/ida_klu.h>
+         #else
+         #include <ida_klu.h>
+         #endif
+         ]], [[
+         IDAKLU (0, 0, 0, 0);
+      ]])],
+      octave_cv_sundials_idaklu=yes,
+      octave_cv_sundials_idaklu=no)
+    ])
+  if test $octave_cv_sundials_idaklu = yes; then
+    AC_DEFINE(HAVE_SUNDIALS_IDAKLU, 1,
+      [Define to 1 if Sundials IDA is configured with IDAKLU enabled.])
+  else
+    warn_sundials_idaklu="Sundials IDA library not configured with IDAKLU, ode15i and ode15s will not support the sparse Jacobian feature"
+    OCTAVE_CONFIGURE_WARNING([warn_sundials_idaklu])
   fi
 ])
 dnl
 dnl Add warning to final summary.
 dnl
 AC_DEFUN([OCTAVE_CONFIGURE_WARNING], [
   AC_MSG_WARN([$][$1])
   m4_set_add([summary_warning_list], [$1])
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -188,8 +188,14 @@ typedef OCTAVE_F77_INT_TYPE octave_f77_i
 #define OCTAVE_HAVE_F77_INT_TYPE 1
 
 /* Tag indicating Octave's autoconf-generated config.h has been
    included.  This symbol is provided because autoconf-generated
    config.h files do not define a multiple-inclusion guard.  See also
    the notes at the top of the generated octave-config.h file.  */
 
 #define OCTAVE_AUTOCONFIG_H_INCLUDED 1
+
+#if defined (HAVE_SUNDIALS_NVECSERIAL) \
+  && defined (HAVE_SUNDIALS_IDA) \
+  && defined (HAVE_SUNDIALS_IDA_DOUBLE)
+#  define HAVE_SUNDIALS 1
+#endif
