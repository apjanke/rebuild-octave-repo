# HG changeset patch
# User jwe
# Date 1037335622 0
#      Fri Nov 15 04:47:02 2002 +0000
# Node ID 84fe3ca3a246dce4e514ef673785b678ffb659be
# Parent  8734ba917fea8e0d36171e34c4c498737a2b4fe1
[project @ 2002-11-15 04:47:01 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,14 @@
+2002-11-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in: Check for sigsetjmp and siglongjmp.
+	(AH_BOTTOM): If both are found, define OCTAVE_HAVE_SIG_JUMP.
+	Also check for sig_atomic_t, typedef it if not available.
+
 2002-11-10  Per Persson <persquare@mac.com>
 
 	* configure.in: Detect dyld API for dynamic linking on OS X.
 
 2002-11-09  Per Persson <persquare@mac.com>
 
 	* configure.in: Use $(TOPDIR)/src/octave, not $(bindir)/octave for
 	-bundle-loader argument.	
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -17,17 +17,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
 AC_INIT
-AC_REVISION($Revision: 1.388 $)
+AC_REVISION($Revision: 1.389 $)
 AC_PREREQ(2.52)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -893,20 +893,20 @@ AC_SUBST(GLOB_INCFLAGS)
 
 ### Checks for functions and variables.
 
 AC_CHECK_FUNCS(atexit bcopy bzero dup2 endgrent endpwent execvp \
   fcntl fork getcwd getegid geteuid getgid getgrent getgrgid \
   getgrnam getpgrp getpid getppid getpwent \
   getpwuid gettimeofday getuid getwd _kbhit kill link localtime_r lstat \
   memmove mkdir mkfifo on_exit pipe poll putenv raise readlink rename \
-  rindex rmdir select setgrent setpwent setvbuf sigaction sigpending \
-  sigprocmask sigsuspend stat strcasecmp strdup strerror strftime \
-  stricmp strncasecmp strnicmp strptime symlink tempnam umask unlink \
-  usleep vfprintf vsprintf vsnprintf waitpid)
+  rindex rmdir select setgrent setpwent setvbuf sigaction siglongjmp \
+  sigpending sigprocmask sigsuspend stat strcasecmp strdup \
+  strerror strftime stricmp strncasecmp strnicmp strptime symlink \
+  tempnam umask unlink usleep vfprintf vsprintf vsnprintf waitpid)
 
 OCTAVE_SMART_PUTENV
 
 ### Dynamic linking is now enabled only if we are building shared
 ### libs and some API for dynamic linking is detected.
 
 LD_CXX='$(CXX)'
 LIBDLFCN=
@@ -1129,17 +1129,17 @@ OCTAVE_REINSTALL_SIGHANDLERS
 ### Type stuff.
 
 AC_TYPE_MODE_T
 AC_TYPE_OFF_T
 AC_TYPE_PID_T
 AC_TYPE_SIZE_T
 AC_TYPE_UID_T
 AC_CHECK_TYPES([dev_t, ino_t, nlink_t, nlink_t])
-AC_CHECK_TYPES(sigset_t, , , [#include <signal.h>])
+AC_CHECK_TYPES([sigset_t, sig_atomic_t], , , [#include <signal.h>])
 
 ### A system dependent kluge or two.
 
 AC_CHECK_FUNCS(getrusage times)
 case "$canonical_host_type" in
   *-*-cygwin*)
     AC_DEFINE(RUSAGE_TIMES_ONLY, 1, [Define if your struct rusage only has time information.])
   ;;
@@ -1309,31 +1309,40 @@ typedef unsigned long ino_t;
 #if !defined(HAVE_NLINK_T)
 typedef short nlink_t;
 #endif
 
 #if !defined(HAVE_SIGSET_T)
 typedef int sigset_t;
 #endif
 
+#if !defined(HAVE_SIG_ATOMIC_T)
+typedef int sig_atomic_t;
+#endif
+
 #define OCTAVE_HAVE_POSIX_FILESYSTEM 1
 
 #if defined (__WIN32__)
 #define OCTAVE_HAVE_WINDOWS_FILESYSTEM 1
 #if ! defined (__CYGWIN__)
 #undef OCTAVE_HAVE_POSIX_FILESYSTEM
 #endif
 #endif
 
 /* Define if we expect to have <windows.h>, Sleep, etc. */
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
 #define OCTAVE_USE_WINDOWS_API 1
 #endif
 
 #define USE_EXCEPTIONS_FOR_INTERRUPTS 1
+
+/* sigsetjmp is a macro, not a function. */
+#if defined (sigsetjmp) && defined (HAVE_SIGLONGJMP)
+#define OCTAVE_HAVE_SIG_JUMP
+#endif
 ])
 
 ### Do the substitutions in all the Makefiles.
 
 AC_CONFIG_FILES([Makefile octMakefile Makeconf install-octave \
   test/Makefile dlfcn/Makefile \
   doc/Makefile doc/faq/Makefile doc/interpreter/Makefile \
   doc/liboctave/Makefile doc/refcard/Makefile emacs/Makefile \
diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,30 @@
+2002-11-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* misc/quit.cc (octave_allocation_error): New variable.
+	(octave_throw_bad_alloc): New function.
+	* misc/quit.h: Provide decls.
+	(OCTAVE_THROW_BAD_ALLOC): New macro.
+	(END_INTERRUPT_WITH_EXCEPTIONS): Also catch bad_alloc.
+	* misc/f77-fcn.h (F77_XFCN): Handle allocation errors.
+
+	* misc/quit.h (octave_jmp_buf): New typedef.
+	(current_context): Type is now octave_jmp_buf.
+	(octave_set_current_context): Use sigsetjmp if we have it.
+	(octave_interrupt_immediately, octave_interrupt_state): Type is
+	now sig_atomic_t.
+	(BEGIN_INTERRUPT_WITH_EXCEPTIONS, END_INTERRUPT_WITH_EXCEPTIONS):
+	New macros.
+
+	* misc/quit.cc (octave_jump_to_enclosing_context): Use siglongjmp
+	if we have it.	
+	(octave_save_current_context, octave_restore_current_context): Use
+	octave_jmp_buf type here.
+
 2002-11-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* misc/Makefile.in: Handle automatic dependency generation for
 	C/C++ source files.
 
 	* misc/quit.h (INCREMENT_OCTAVE_INTERRUPT_IMMEDIATELY,
 	DECREMENT_OCTAVE_INTERRUPT_IMMEDIATELY,
 	SET_OCTAVE_INTERRUPT_IMMEDIATELY): New macros.
diff --git a/libcruft/misc/f77-fcn.h b/libcruft/misc/f77-fcn.h
--- a/libcruft/misc/f77-fcn.h
+++ b/libcruft/misc/f77-fcn.h
@@ -24,18 +24,16 @@ Software Foundation, 59 Temple Place - S
 #define octave_f77_fcn_h 1
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 #include "quit.h"
 
-#include <stdio.h>
-
 /* Hack to stringize macro results. */
 #define xSTRINGIZE(x) #x
 #define STRINGIZE(x) xSTRINGIZE(x)
 
 /* How to print an error for the F77_XFCN macro. */
 
 #define F77_XFCN_ERROR(f, F) \
   (*current_liboctave_error_handler) \
@@ -56,16 +54,18 @@ extern "C" {
       jmp_buf saved_context; \
       f77_exception_encountered = 0; \
       octave_save_current_context ((char *) saved_context); \
       if (octave_set_current_context) \
 	{ \
           octave_restore_current_context ((char *) saved_context); \
 	  if (f77_exception_encountered) \
 	    F77_XFCN_ERROR (f, F); \
+          else if (octave_allocation_error) \
+            OCTAVE_THROW_BAD_ALLOC; \
           else \
             OCTAVE_THROW_TO_TOP_LEVEL; \
 	} \
       else \
         { \
 	  INCREMENT_OCTAVE_INTERRUPT_IMMEDIATELY; \
 	  F77_FUNC (f, F) args; \
 	  DECREMENT_OCTAVE_INTERRUPT_IMMEDIATELY; \
diff --git a/libcruft/misc/quit.cc b/libcruft/misc/quit.cc
--- a/libcruft/misc/quit.cc
+++ b/libcruft/misc/quit.cc
@@ -21,41 +21,47 @@ Software Foundation, 59 Temple Place - S
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cstring>
 
+#include <new>
+
 // Include signal.h, not csignal since the latter might only define
 // the ANSI standard C signal interface.
 
 #include <signal.h>
 
 #include "quit.h"
 
-jmp_buf current_context;
+octave_jmp_buf current_context;
 
 void
 octave_save_current_context (void *save_buf)
 {
-  memcpy (save_buf, current_context, sizeof (jmp_buf));
+  memcpy (save_buf, current_context, sizeof (octave_jmp_buf));
 }
 
 void
 octave_restore_current_context (void *save_buf)
 {
-  memcpy (current_context, save_buf, sizeof (jmp_buf));
+  memcpy (current_context, save_buf, sizeof (octave_jmp_buf));
 }
 
 void
 octave_jump_to_enclosing_context (void)
 {
+#if defined (OCTAVE_HAVE_SIG_JUMP)
+  siglongjmp (current_context, 1);
+#else
   longjmp (current_context, 1);
+#endif
 }
 
 // Allow us to save the signal mask and then restore it to the most
 // recently saved value.  This is necessary when using the POSIX
 // signal handling interface on some systems calling longjmp out of
 // the signal handler to get to the top level on an interrupt doesn't
 // restore the original signal mask.  Alternatively, we could use
 // sigsetjmp/siglongjmp, but saving and restoring the signal mask
@@ -78,25 +84,33 @@ octave_restore_signal_mask (void)
 {
 #if defined (HAVE_POSIX_SIGNALS)
   sigprocmask (SIG_SETMASK, &octave_signal_mask, 0);
 #endif
 }
 
 #if defined (USE_EXCEPTIONS_FOR_INTERRUPTS)
 
-int octave_interrupt_immediately = 0;
+sig_atomic_t octave_interrupt_immediately = 0;
 
-int octave_interrupt_state = 0;
+sig_atomic_t octave_interrupt_state = 0;
+
+sig_atomic_t octave_allocation_error = 0;
 
 void
 octave_throw_interrupt_exception (void)
 {
   throw octave_interrupt_exception ();
 }
 
+void
+octave_throw_bad_alloc (void)
+{
+  throw bad_alloc ();
+}
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/libcruft/misc/quit.h b/libcruft/misc/quit.h
--- a/libcruft/misc/quit.h
+++ b/libcruft/misc/quit.h
@@ -22,27 +22,39 @@ Software Foundation, 59 Temple Place - S
 
 #if !defined (octave_quit_h)
 #define octave_quit_h 1
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
-// Include setjmp.h, not csetjmp since the latter might only define
-// the ANSI standard C interface.
+#include <stdio.h>
 
+#include <signal.h>
 #include <setjmp.h>
 
-extern jmp_buf current_context;
+#if defined (OCTAVE_HAVE_SIG_JUMP)
+
+typedef sigjmp_buf octave_jmp_buf;
+
+#define octave_set_current_context sigsetjmp (current_context, 1)
+
+#else
+
+typedef jmp_buf octave_jmp_buf;
+
+#define octave_set_current_context setjmp (current_context)
+
+#endif
+
+extern octave_jmp_buf current_context;
 
 extern void octave_save_current_context (void *);
 
-#define octave_set_current_context setjmp (current_context)
-
 extern void octave_restore_current_context (void *);
 
 extern void octave_jump_to_enclosing_context (void) GCC_ATTR_NORETURN;
 
 extern void octave_save_signal_mask (void);
 
 extern void octave_restore_signal_mask (void);
 
@@ -50,42 +62,51 @@ extern void octave_restore_signal_mask (
 
 #ifdef __cplusplus
 class
 octave_interrupt_exception
 {
 };
 #endif
 
-extern int octave_interrupt_immediately;
+extern sig_atomic_t octave_interrupt_immediately;
 
-extern int octave_interrupt_state;
+extern sig_atomic_t octave_interrupt_state;
+
+extern sig_atomic_t octave_allocation_error;
 
 extern void octave_throw_interrupt_exception (void) GCC_ATTR_NORETURN;
 
+extern void octave_throw_bad_alloc (void) GCC_ATTR_NORETURN;
+
 #define OCTAVE_QUIT \
   do \
     { \
       if (octave_interrupt_state) \
         { \
           octave_interrupt_state = 0; \
           octave_throw_interrupt_exception (); \
         } \
     } \
   while (0)
 
 #define OCTAVE_JUMP_TO_TOP_LEVEL \
   do { octave_interrupt_state = 1; } while (0)
 
 #define OCTAVE_THROW_TO_TOP_LEVEL octave_throw_interrupt_exception ()
 
+#define OCTAVE_THROW_BAD_ALLOC octave_throw_bad_alloc ()
+
 #define OCTAVE_TRY_WITH_INTERRUPTS try
 
 #define OCTAVE_CATCH_INTERRUPTS catch (octave_interrupt_exception)
 
+#define SAVE_OCTAVE_INTERRUPT_IMMEDIATELY(var) \
+  sig_atomic_t var = octave_interrupt_immediately
+
 #define INCREMENT_OCTAVE_INTERRUPT_IMMEDIATELY \
   do { octave_interrupt_immediately++; } while (0)
 
 #define DECREMENT_OCTAVE_INTERRUPT_IMMEDIATELY \
   do { octave_interrupt_immediately--; } while (0)
 
 #define SET_OCTAVE_INTERRUPT_IMMEDIATELY(x) \
   do { octave_interrupt_immediately = x; } while (0)
@@ -108,36 +129,69 @@ extern void octave_throw_interrupt_excep
 
 #define END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE \
 	  DECREMENT_OCTAVE_INTERRUPT_IMMEDIATELY; \
           octave_restore_current_context ((char *) saved_context); \
         } \
     } \
   while (0)
 
+#define BEGIN_INTERRUPT_WITH_EXCEPTIONS \
+  SAVE_OCTAVE_INTERRUPT_IMMEDIATELY (saved_octave_interrupt_immediately); \
+ \
+  OCTAVE_TRY_WITH_INTERRUPTS \
+    { \
+      SET_OCTAVE_INTERRUPT_IMMEDIATELY (0)
+
+#define END_INTERRUPT_WITH_EXCEPTIONS \
+    } \
+  OCTAVE_CATCH_INTERRUPTS \
+    { \
+      SET_OCTAVE_INTERRUPT_IMMEDIATELY (saved_octave_interrupt_immediately); \
+      octave_jump_to_enclosing_context (); \
+    } \
+  catch (bad_alloc) \
+    { \
+      SET_OCTAVE_INTERRUPT_IMMEDIATELY (saved_octave_interrupt_immediately); \
+      octave_allocation_error = 1; \
+      octave_jump_to_enclosing_context (); \
+    } \
+ \
+  SET_OCTAVE_INTERRUPT_IMMEDIATELY (saved_octave_interrupt_immediately)
+
 #else
 
 #define OCTAVE_QUIT do { } while (0)
 
 #define OCTAVE_JUMP_TO_TOP_LEVEL octave_jump_to_enclosing_context ()
 
 #define OCTAVE_THROW_TO_TOP_LEVEL OCTAVE_JUMP_TO_TOP_LEVEL
 
+#define OCTAVE_THROW_BAD_ALLOC OCTAVE_JUMP_TO_TOP_LEVEL
+
 #define OCTAVE_TRY_WITH_INTERRUPTS
 
 #define OCTAVE_CATCH_INTERRUPTS if (0)
 
+#define SAVE_OCTAVE_INTERRUPT_IMMEDIATELY(var) do { } while (0)
+
+#define SET_OCTAVE_INTERRUPT_IMMEDIATELY(x) do { } while (0)
+
 #define INCREMENT_OCTAVE_INTERRUPT_IMMEDIATELY do { } while (0)
 
 #define DECREMENT_OCTAVE_INTERRUPT_IMMEDIATELY do { } while (0)
 
 #define BEGIN_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE do { } while (0)
 
 #define END_INTERRUPT_IMMEDIATELY_IN_FOREIGN_CODE do { } while (0)
 
+#define BEGIN_INTERRUPT_WITH_EXCEPTIONS do { } while (0)
+
+#define END_INTERRUPT_WITH_EXCEPTIONS do { } while (0)
+
 #endif
 
 #ifdef __cplusplus
 }
 #endif
 
 #endif
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,23 @@
+2002-11-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lo-specfun.cc: Use F77_FUNC instead of F77_XFCN for calls to
+	fortran code that should run fast enough that it is not worth all
+	the setup costs of F77_XFCN.
+
+	* Quad.cc (user_function): Surround body of function with
+	BEGIN_INTERRUPT_WITH_EXCEPTIONS, END_INTERRUPT_WITH_EXCEPTIONS.
+	* ODESSA.cc (odessa_f, odessa_j, odessa_b): Likewise.
+	* NLEqn.cc (hybrd1_fcn, hybrj1_fcn): Likewise.
+	* LSODE.cc (lsode_f, lsode_j): Likewise.
+	* DASSL.cc (ddassl_f, ddassl_j): Likewise.
+	* DASRT.cc (ddasrt_f, ddasrt_j, ddasrt_g): Likewise.
+	* DASPK.cc (ddaspk_f, ddaspk_psol, ddaspk_j): Likewise.
+
 2002-11-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-ieee.cc (octave_ieee_init): Check defined (__osf__) instead
 	of ! defined (linux).
 
 2002-11-09  Per Persson <persquare@mac.com>
 
 	* oct-shlib.cc (octave_dyld_shlib): New class.
diff --git a/liboctave/DASPK.cc b/liboctave/DASPK.cc
--- a/liboctave/DASPK.cc
+++ b/liboctave/DASPK.cc
@@ -63,16 +63,18 @@ int F77_FUNC (ddaspk, DDASPK) (daspk_fcn
 static DAEFunc::DAERHSFunc user_fun;
 static DAEFunc::DAEJacFunc user_jac;
 static int nn;
 
 static int
 ddaspk_f (const double& time, const double *state, const double *deriv,
 	  const double&, double *delta, int& ires, double *, int *)
 {
+  BEGIN_INTERRUPT_WITH_EXCEPTIONS;
+
   ColumnVector tmp_deriv (nn);
   ColumnVector tmp_state (nn);
   ColumnVector tmp_delta (nn);
 
   for (int i = 0; i < nn; i++)
     {
       tmp_deriv.elem (i) = deriv [i];
       tmp_state.elem (i) = state [i];
@@ -86,38 +88,47 @@ ddaspk_f (const double& time, const doub
 	ires = -2;
       else
 	{
 	  for (int i = 0; i < nn; i++)
 	    delta [i] = tmp_delta.elem (i);
 	}
     }
 
+  END_INTERRUPT_WITH_EXCEPTIONS;
+
   return 0;
 }
 
 //NEQ, T, Y, YPRIME, SAVR, WK, CJ, WGHT,
 //C                          WP, IWP, B, EPLIN, IER, RPAR, IPAR)
 
 static int
 ddaspk_psol (const int& neq, const double& time, const double *state,
 	     const double *deriv, const double *savr,
 	     const double& cj, const double *wght, double *wp,
 	     int *iwp, double *b, const double& eplin, int& ier,
 	     double *, int*)
 {
+  BEGIN_INTERRUPT_WITH_EXCEPTIONS;
+
   abort ();
+
+  END_INTERRUPT_WITH_EXCEPTIONS;
+
   return 0;
 }
 
 
 static int
 ddaspk_j (const double& time, const double *state, const double *deriv,
 	  double *pd, const double& cj, double *, int *)
 {
+  BEGIN_INTERRUPT_WITH_EXCEPTIONS;
+
   // XXX FIXME XXX -- would be nice to avoid copying the data.
 
   ColumnVector tmp_state (nn);
   ColumnVector tmp_deriv (nn);
 
   for (int i = 0; i < nn; i++)
     {
       tmp_deriv.elem (i) = deriv [i];
@@ -125,16 +136,18 @@ ddaspk_j (const double& time, const doub
     }
 
   Matrix tmp_pd = user_jac (tmp_state, tmp_deriv, time, cj);
 
   for (int j = 0; j < nn; j++)
     for (int i = 0; i < nn; i++)
       pd [nn * j + i] = tmp_pd.elem (i, j);
 
+  END_INTERRUPT_WITH_EXCEPTIONS;
+
   return 0;
 }
 
 ColumnVector
 DASPK::do_integrate (double tout)
 {
   // XXX FIXME XXX -- should handle all this option stuff just once
   // for each new problem.
diff --git a/liboctave/DASRT.cc b/liboctave/DASRT.cc
--- a/liboctave/DASRT.cc
+++ b/liboctave/DASRT.cc
@@ -30,16 +30,17 @@ Software Foundation, 59 Temple Place - S
 
 #include <cfloat>
 #include <cmath>
 
 #include "DASRT.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-sstream.h"
+#include "quit.h"
 
 typedef int (*dasrt_fcn_ptr) (const double&, const double*, const double*,
 			      double*, int&, double*, int*);
 
 typedef int (*dasrt_jac_ptr) (const double&, const double*, const double*,
 			      double*, const double&, double*, int*);
 
 typedef int (*dasrt_constr_ptr) (const int&, const double&, const double*,
@@ -58,16 +59,18 @@ static DAEFunc::DAEJacFunc user_jsub;
 static DAERTFunc::DAERTConstrFunc user_csub;
 
 static int nn;
 
 static int
 ddasrt_f (const double& t, const double *state, const double *deriv,
 	  double *delta, int& ires, double *rpar, int *ipar)
 {
+  BEGIN_INTERRUPT_WITH_EXCEPTIONS;
+
   ColumnVector tmp_state (nn);
   ColumnVector tmp_deriv (nn);
 
   for (int i = 0; i < nn; i++)
     {
       tmp_state(i) = state[i];
       tmp_deriv(i) = deriv[i];
     }
@@ -77,23 +80,27 @@ ddasrt_f (const double& t, const double 
   if (tmp_fval.length () == 0)
     ires = -2;
   else
     {
       for (int i = 0; i < nn; i++)
 	delta[i] = tmp_fval(i);
     }
 
+  END_INTERRUPT_WITH_EXCEPTIONS;
+
   return 0;
 }
 
 int
 ddasrt_j (const double& time, const double *state, const double *deriv,
 	  double *pd, const double& cj, double *, int *)
 {
+  BEGIN_INTERRUPT_WITH_EXCEPTIONS;
+
   // XXX FIXME XXX -- would be nice to avoid copying the data.
 
   ColumnVector tmp_state (nn);
   ColumnVector tmp_deriv (nn);
 
   for (int i = 0; i < nn; i++)
     {
       tmp_deriv.elem (i) = deriv [i];
@@ -101,34 +108,40 @@ ddasrt_j (const double& time, const doub
     }
 
   Matrix tmp_pd = (*user_jsub) (tmp_state, tmp_deriv, time, cj);
 
   for (int j = 0; j < nn; j++)
     for (int i = 0; i < nn; i++)
       pd [nn * j + i] = tmp_pd.elem (i, j);
 
+  END_INTERRUPT_WITH_EXCEPTIONS;
+
   return 0;
 }
 
 static int
 ddasrt_g (const int& neq, const double& t, const double *state,
 	  const int& ng, double *gout, double *rpar, int *ipar) 
 {
+  BEGIN_INTERRUPT_WITH_EXCEPTIONS;
+
   int n = neq;
 
   ColumnVector tmp_state (n);
   for (int i = 0; i < n; i++)
     tmp_state(i) = state[i];
 
   ColumnVector tmp_fval = (*user_csub) (tmp_state, t);
 
   for (int i = 0; i < ng; i++)
     gout[i] = tmp_fval(i);
 
+  END_INTERRUPT_WITH_EXCEPTIONS;
+
   return 0;
 }
 
 void
 DASRT::integrate (double tout)
 {
   DASRT_result retval;
 
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -30,16 +30,17 @@ Software Foundation, 59 Temple Place - S
 
 #include <cfloat>
 #include <cmath>
 
 #include "DASSL.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-sstream.h"
+#include "quit.h"
 
 typedef int (*dassl_fcn_ptr) (const double&, const double*, const double*,
 			      double*, int&, double*, int*);
 
 typedef int (*dassl_jac_ptr) (const double&, const double*, const double*,
 			      double*, const double&, double*, int*);
 
 extern "C"
@@ -54,16 +55,18 @@ static DAEFunc::DAERHSFunc user_fun;
 static DAEFunc::DAEJacFunc user_jac;
 
 static int nn;
 
 static int
 ddassl_f (const double& time, const double *state, const double *deriv,
 	  double *delta, int& ires, double *, int *)
 {
+  BEGIN_INTERRUPT_WITH_EXCEPTIONS;
+
   // XXX FIXME XXX -- would be nice to avoid copying the data.
 
   ColumnVector tmp_deriv (nn);
   ColumnVector tmp_state (nn);
   ColumnVector tmp_delta (nn);
 
   for (int i = 0; i < nn; i++)
     {
@@ -79,23 +82,27 @@ ddassl_f (const double& time, const doub
 	ires = -2;
       else
 	{
 	  for (int i = 0; i < nn; i++)
 	    delta [i] = tmp_delta.elem (i);
 	}
     }
 
+  END_INTERRUPT_WITH_EXCEPTIONS;
+
   return 0;
 }
 
 static int
 ddassl_j (const double& time, const double *state, const double *deriv,
 	  double *pd, const double& cj, double *, int *)
 {
+  BEGIN_INTERRUPT_WITH_EXCEPTIONS;
+
   // XXX FIXME XXX -- would be nice to avoid copying the data.
 
   ColumnVector tmp_state (nn);
   ColumnVector tmp_deriv (nn);
 
   for (int i = 0; i < nn; i++)
     {
       tmp_deriv.elem (i) = deriv [i];
@@ -103,16 +110,18 @@ ddassl_j (const double& time, const doub
     }
 
   Matrix tmp_pd = user_jac (tmp_state, tmp_deriv, time, cj);
 
   for (int j = 0; j < nn; j++)
     for (int i = 0; i < nn; i++)
       pd [nn * j + i] = tmp_pd.elem (i, j);
 
+  END_INTERRUPT_WITH_EXCEPTIONS;
+
   return 0;
 }
 
 ColumnVector
 DASSL::do_integrate (double tout)
 {
   ColumnVector retval;
 
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -30,16 +30,17 @@ Software Foundation, 59 Temple Place - S
 
 #include <cfloat>
 #include <cmath>
 
 #include "LSODE.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-sstream.h"
+#include "quit.h"
 
 typedef int (*lsode_fcn_ptr) (const int&, const double&, double*,
 			      double*, int&);
 
 typedef int (*lsode_jac_ptr) (const int&, const double&, double*,
 			      const int&, const int&, double*, const
 			      int&);
 
@@ -52,51 +53,59 @@ int F77_FUNC (lsode, LSODE) (lsode_fcn_p
 static ODEFunc::ODERHSFunc user_fun;
 static ODEFunc::ODEJacFunc user_jac;
 static ColumnVector *tmp_x;
 
 static int
 lsode_f (const int& neq, const double& time, double *,
 	 double *deriv, int& ierr) 
 {
+  BEGIN_INTERRUPT_WITH_EXCEPTIONS;
+
   ColumnVector tmp_deriv;
 
   // NOTE: this won't work if LSODE passes copies of the state vector.
   //       In that case we have to create a temporary vector object
   //       and copy.
 
   tmp_deriv = (*user_fun) (*tmp_x, time);
 
   if (tmp_deriv.length () == 0)
     ierr = -1;
   else
     {
       for (int i = 0; i < neq; i++)
 	deriv [i] = tmp_deriv.elem (i);
     }
 
+  END_INTERRUPT_WITH_EXCEPTIONS;
+
   return 0;
 }
 
 static int
 lsode_j (const int& neq, const double& time, double *,
 	 const int&, const int&, double *pd, const int& nrowpd)
 {
+  BEGIN_INTERRUPT_WITH_EXCEPTIONS;
+
   Matrix tmp_jac (neq, neq);
 
   // NOTE: this won't work if LSODE passes copies of the state vector.
   //       In that case we have to create a temporary vector object
   //       and copy.
 
   tmp_jac = (*user_jac) (*tmp_x, time);
 
   for (int j = 0; j < neq; j++)
     for (int i = 0; i < neq; i++)
       pd [nrowpd * j + i] = tmp_jac (i, j);
 
+  END_INTERRUPT_WITH_EXCEPTIONS;
+
   return 0;
 }
 
 ColumnVector
 LSODE::do_integrate (double tout)
 {
   ColumnVector retval;
 
diff --git a/liboctave/NLEqn.cc b/liboctave/NLEqn.cc
--- a/liboctave/NLEqn.cc
+++ b/liboctave/NLEqn.cc
@@ -27,16 +27,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "NLEqn.h"
 #include "dMatrix.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
+#include "quit.h"
 
 typedef int (*hybrd1_fcn_ptr) (int*, double*, double*, int*);
 
 extern "C"
 int F77_FUNC (hybrd1, HYBRD1) (hybrd1_fcn_ptr, const int&, double*,
 			      double*, const double&, int&, double*,
 			      const int&);
 
@@ -58,16 +59,18 @@ NLEqn::error (const char* msg)
   (*current_liboctave_error_handler) ("fatal NLEqn error: %s", msg);
 }
 
 // Other operations
 
 int
 hybrd1_fcn (int *n, double *x, double *fvec, int *iflag)
 {
+  BEGIN_INTERRUPT_WITH_EXCEPTIONS;
+
   int nn = *n;
   ColumnVector tmp_f (nn);
   ColumnVector tmp_x (nn);
 
   for (int i = 0; i < nn; i++)
     tmp_x.elem (i) = x[i];
 
   tmp_f = (*user_fun) (tmp_x);
@@ -75,23 +78,27 @@ hybrd1_fcn (int *n, double *x, double *f
   if (tmp_f.length () == 0)
     *iflag = -1;
   else
     {
       for (int i = 0; i < nn; i++)
 	fvec[i] = tmp_f.elem (i);
     }
 
+  END_INTERRUPT_WITH_EXCEPTIONS;
+
   return 0;
 }
 
 int
 hybrj1_fcn (int *n, double *x, double *fvec, double *fjac,
 	    int *ldfjac, int *iflag)
 {
+  BEGIN_INTERRUPT_WITH_EXCEPTIONS;
+
   int nn = *n;
   ColumnVector tmp_x (nn);
 
   for (int i = 0; i < nn; i++)
     tmp_x.elem (i) = x[i];
 
   int flag = *iflag;
   if (flag == 1)
@@ -120,16 +127,18 @@ hybrj1_fcn (int *n, double *x, double *f
 	{
 	  int ld = *ldfjac;
 	  for (int j = 0; j < nn; j++)
 	    for (int i = 0; i < nn; i++)
 	      fjac[j*ld+i] = tmp_fj.elem (i, j);
 	}
     }
 
+  END_INTERRUPT_WITH_EXCEPTIONS;
+
   return 0;
 }
 
 ColumnVector
 NLEqn::solve (int& info)
 {
   ColumnVector retval;
 
diff --git a/liboctave/ODESSA.cc b/liboctave/ODESSA.cc
--- a/liboctave/ODESSA.cc
+++ b/liboctave/ODESSA.cc
@@ -65,16 +65,18 @@ static ODESFunc::ODES_fsub user_fsub;
 static ODESFunc::ODES_bsub user_bsub;
 static ODESFunc::ODES_jsub user_jsub;
 
 
 static int
 odessa_f (int* neq, const double& t, double *state,
 	  double *par, double *fval)
 {
+  BEGIN_INTERRUPT_WITH_EXCEPTIONS;
+
   int n = neq[0];
   int n_par = neq[1];
 
   // Load the state and parameter arrays as Octave objects
 
   ColumnVector tmp_state (n);
   for (int i = 0; i < n; i++)
     tmp_state(i) = state[i];
@@ -88,24 +90,28 @@ odessa_f (int* neq, const double& t, dou
   if (tmp_fval.length () == 0)
     octave_jump_to_enclosing_context ();
   else
     {
       for (int i = 0; i < n; i++)
 	fval[i] = tmp_fval(i);
     }
 
+  END_INTERRUPT_WITH_EXCEPTIONS;
+
   return 0;
 }
 
 static int
 odessa_j (int* neq, const double& t, double *state,
 	  double *par, const int& ml, const int& mu, double *pd,
 	  const int& nrowpd)
 {
+  BEGIN_INTERRUPT_WITH_EXCEPTIONS;
+
   int n = neq[0];
   int n_par = neq[1];
 
   // Load the state and parameter arrays as Octave objects
   ColumnVector tmp_state (n);
   for (int i = 0; i < n; i++)
     tmp_state(i) = state[i];
 
@@ -119,24 +125,28 @@ odessa_j (int* neq, const double& t, dou
     octave_jump_to_enclosing_context ();
   else
     {
       for (int j = 0; j < n; j++)
 	for (int i = 0; i < nrowpd; i++)
 	  pd[nrowpd*j+i] = tmp_fval(i,j);
     }
 
+  END_INTERRUPT_WITH_EXCEPTIONS;
+
   return 0;
 }
 
 static int
 odessa_b (int* neq, const double& t, double *state,
 	  double *par, double *dfdp, const int& jpar)
 
 {
+  BEGIN_INTERRUPT_WITH_EXCEPTIONS;
+
   int n = neq[0];
   int n_par = neq[1];
 
   // Load the state and parameter arrays as Octave objects
   ColumnVector tmp_state (n);
   for (int i = 0; i < n; i++)
     tmp_state(i) = state[i];
 
@@ -149,16 +159,18 @@ odessa_b (int* neq, const double& t, dou
   if (tmp_fval.length () == 0)
     octave_jump_to_enclosing_context ();
   else
     {
       for (int i = 0; i < n; i++)
 	dfdp[i] = tmp_fval(i);
     }
 
+  END_INTERRUPT_WITH_EXCEPTIONS;
+
   return 0;
 }
 
 ODESSA::ODESSA (void) : ODES (), ODESSA_options ()
 {
   neq.resize(2);
   n = size ();
 
diff --git a/liboctave/Quad.cc b/liboctave/Quad.cc
--- a/liboctave/Quad.cc
+++ b/liboctave/Quad.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "Quad.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
+#include "quit.h"
 #include "sun-utils.h"
 
 static integrand_fcn user_fcn;
 
 // XXX FIXME XXX -- would be nice to not have to have this global
 // variable.
 // Nonzero means an error occurred in the calculation of the integrand
 // function, and the user wants us to quit.
@@ -54,16 +55,18 @@ extern "C"
 int F77_FUNC (dqagi, DQAGI) (quad_fcn_ptr, const double&, const int&,
 			    const double&, const double&, double&,
 			    double&, int&, int&, const int&,
 			    const int&, int&, int*, double*); 
 
 static int
 user_function (double *x, int& ierr, double *result)
 {
+  BEGIN_INTERRUPT_WITH_EXCEPTIONS;
+
 #if defined (sun) && defined (__GNUC__)
   double xx = access_double (x);
 #else
   double xx = *x;
 #endif
 
   quad_integration_error = 0;
 
@@ -73,16 +76,18 @@ user_function (double *x, int& ierr, dou
   assign_double (result, xresult);
 #else
   *result = xresult;
 #endif
 
   if (quad_integration_error)
     ierr = -1;
 
+  END_INTERRUPT_WITH_EXCEPTIONS;
+
   return 0;
 }
 
 double
 DefQuad::do_integrate (int& ier, int& neval, double& abserr)
 {
   int npts = singularities.capacity () + 2;
   double *points = singularities.fortran_vec ();
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -90,75 +90,75 @@ extern "C"
   int F77_FUNC (dlgams, DLGAMS) (const double&, double&, double&);
 }
 
 #if !defined (HAVE_ACOSH)
 double
 acosh (double x)
 {
   double retval;
-  F77_XFCN (xdacosh, XDACOSH, (x, retval));
+  F77_FUNC (xdacosh, XDACOSH) (x, retval);
   return retval;
 }
 #endif
 
 #if !defined (HAVE_ASINH)
 double
 asinh (double x)
 {
   double retval;
-  F77_XFCN (xdasinh, XDASINH, (x, retval));
+  F77_FUNC (xdasinh, XDASINH) (x, retval);
   return retval;
 }
 #endif
 
 #if !defined (HAVE_ATANH)
 double
 atanh (double x)
 {
   double retval;
-  F77_XFCN (xdatanh, XDATANH, (x, retval));
+  F77_FUNC (xdatanh, XDATANH) (x, retval);
   return retval;
 }
 #endif
 
 #if !defined (HAVE_ERF)
 double
 erf (double x)
 {
   double retval;
-  F77_XFCN (xderf, XDERF, (x, retval));
+  F77_FUNC (xderf, XDERF) (x, retval);
   return retval;
 }
 #endif
 
 #if !defined (HAVE_ERFC)
 double
 erfc (double x)
 {
   double retval;
-  F77_XFCN (xderfc, XDERFC, (x, retval));
+  F77_FUNC (xderfc, XDERFC) (x, retval);
   return retval;
 }
 #endif
 
 double
 xgamma (double x)
 {
   double result;
-  F77_XFCN (xdgamma, XDGAMMA, (x, result));
+  F77_FUNC (xdgamma, XDGAMMA) (x, result);
   return result;
 }
 
 double
 xlgamma (double x)
 {
   double result;
   double sgngam;
-  F77_XFCN (dlgams, DLGAMS, (x, result, sgngam));
+  F77_FUNC (dlgams, DLGAMS) (x, result, sgngam);
   return result;
 }
 
 static inline Complex
 zbesj (const Complex& z, double alpha, int kode, int& ierr);
 
 static inline Complex
 zbesy (const Complex& z, double alpha, int kode, int& ierr);
@@ -685,17 +685,17 @@ gripe_betainc_nonconformant (int r1, int
    ("betainc: nonconformant arguments (x is %dx%d, a is %dx%d, b is %dx%d)",
      r1, c1, r2, c2, r3, c3);
 }
 
 double
 betainc (double x, double a, double b)
 {
   double retval;
-  F77_XFCN (xdbetai, XDBETAI, (x, a, b, retval));
+  F77_FUNC (xdbetai, XDBETAI) (x, a, b, retval);
   return retval;
 }
 
 Matrix
 betainc (double x, double a, const Matrix& b)
 {
   int nr = b.rows ();
   int nc = b.cols ();
@@ -854,17 +854,17 @@ gammainc (double x, double a, bool& err)
   if (a < 0.0 || x < 0.0)
     {
       (*current_liboctave_error_handler)
 	("gammainc: A and X must be non-negative");
 
       err = true;
     }
   else
-    F77_XFCN (xgammainc, XGAMMAINC, (a, x, retval));
+    F77_FUNC (xgammainc, XGAMMAINC) (a, x, retval);
 
   return retval;
 }
 
 Matrix
 gammainc (double x, const Matrix& a)
 {
   int nr = a.rows ();
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2002-11-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* sighandlers.cc (octave_new_handler): Delete.
+	(install_signal_handlers): Don't call set_new_handler.
+	* toplev.cc (main_loop): Handle bad_alloc exception here.
+
+	* sighandlers.cc (octave_new_handler): Allow return after
+	OCTAVE_JUMP_TO_TOP_LEVEL.
+	(sigfpe_handler): Likewise.
+
 2002-11-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* variables.cc (is_variable): New static function.
 	(generate_struct_completions): Only evaluate objects that look
 	like variables.
 
 2002-11-12  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -119,32 +119,16 @@ my_friendly_exit (const char *sig_name, 
 #else
 	  exit (1);
 #endif
 	}
 
     }
 }
 
-// I know, not really a signal handler.
-
-static void
-octave_new_handler (void)
-{
-  std::cerr << "error: memory exhausted -- trying to return to prompt\n";
-
-  if (can_interrupt)
-    {
-      OCTAVE_JUMP_TO_TOP_LEVEL;
-      panic_impossible ();
-    }
-  else
-    my_friendly_exit ("operator new", OCTAVE_MEMORY_EXHAUSTED_ERROR);
-}
-
 sig_handler *
 octave_set_signal_handler (int sig, sig_handler *handler)
 {
 #if defined (HAVE_POSIX_SIGNALS)
   struct sigaction act, oact;
   act.sa_handler = handler;
   act.sa_flags = 0;
   sigemptyset (&act.sa_mask);
@@ -236,18 +220,21 @@ sigfpe_handler (int /* sig */)
   MAYBE_ACK_SIGNAL (SIGFPE);
 
   MAYBE_REINSTALL_SIGHANDLER (SIGFPE, sigfpe_handler);
 
   std::cerr << "error: floating point exception -- trying to return to prompt\n";
 
   if (can_interrupt)
     {
+      // XXX FIXME XXX -- this may simply set the interrupt state.  We
+      // can only hope for the best after returning?  We probably need
+      // to throw an exception.
+
       OCTAVE_OCTAVE_JUMP_TO_TOP_LEVEL;
-      panic_impossible ();
     }
 
   SIGHANDLER_RETURN (0);
 }
 #endif /* defined(__alpha__) */
 #endif /* defined(SIGFPE) */
 
 #if 0
@@ -370,18 +357,16 @@ octave_set_interrupt_handler (const vola
   return retval;
 }
 
 // Install all the handlers for the signals we might care about.
 
 void
 install_signal_handlers (void)
 {
-  std::set_new_handler (octave_new_handler);
-
   octave_catch_interrupts ();
 
 #ifdef SIGABRT
   octave_set_signal_handler (SIGABRT, generic_sig_handler);
 #endif
 
 #ifdef SIGALRM
   octave_set_signal_handler (SIGALRM, generic_sig_handler);
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -85,16 +85,28 @@ bool octave_initialized = false;
 tree_statement_list *global_command = 0;
 
 // Pointer to function that is currently being evaluated.
 octave_user_function *curr_function = 0;
 
 // Original value of TEXMFDBS environment variable.
 std::string octave_original_texmfdbs;
 
+static void
+recover_from_exception (void)
+{
+  unwind_protect::run_all ();
+  can_interrupt = true;
+  SET_OCTAVE_INTERRUPT_IMMEDIATELY (0);
+  octave_interrupt_state = 0;
+  octave_allocation_error = 0;
+  octave_restore_signal_mask ();
+  octave_catch_interrupts ();
+}
+
 int
 main_loop (void)
 {
   octave_save_signal_mask ();
 
   if (octave_set_current_context)
     {
 #if defined (USE_EXCEPTIONS_FOR_INTERRUPTS)
@@ -113,17 +125,17 @@ main_loop (void)
 
   octave_initialized = true;
 
   // The big loop.
 
   int retval = 0;
   do
     {
-      OCTAVE_TRY_WITH_INTERRUPTS
+      try
 	{
 	  curr_sym_tab = top_level_sym_tab;
 
 	  reset_parser ();
 
 	  retval = yyparse ();
 
 	  if (retval == 0)
@@ -171,23 +183,24 @@ main_loop (void)
 		    }
 		}
 	      else if (parser_end_of_input)
 		break;
 	    }
 	}
       OCTAVE_CATCH_INTERRUPTS
 	{
-	  unwind_protect::run_all ();
-	  can_interrupt = true;
-	  SET_OCTAVE_INTERRUPT_IMMEDIATELY (0);
-	  octave_interrupt_state = 0;
+	  recover_from_exception ();
 	  std::cout << "\n";
-	  octave_restore_signal_mask ();
-	  octave_catch_interrupts ();
+	}
+      catch (bad_alloc)
+	{
+	  recover_from_exception ();
+	  std::cerr
+	    << "error: memory exhausted -- trying to return to prompt\n";
 	}
     }
   while (retval == 0);
 
   return retval;
 }
 
 // Fix up things before exiting.
