# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1320334547 14400
#      Thu Nov 03 11:35:47 2011 -0400
# Node ID 4f112bebd474ae4463c5a4de98255741aa08eff5
# Parent  a2e158c3451ff602899883fa30d1c87532001c3e
use correct method to get window position for fltk

* __init_fltk__.cc (figure_manager::do_new_window): Use
figure::properties::get_boundingbox instead of convert_position and
screen_size_pixels.
* grpahics.h.in, graphics.cc (convert_position, screen_size_pixels):
Undo previous change, making these functions static once again.

diff --git a/src/DLD-FUNCTIONS/__init_fltk__.cc b/src/DLD-FUNCTIONS/__init_fltk__.cc
--- a/src/DLD-FUNCTIONS/__init_fltk__.cc
+++ b/src/DLD-FUNCTIONS/__init_fltk__.cc
@@ -1567,21 +1567,17 @@ private:
   }
 
   void do_new_window (figure::properties& fp)
   {
     int idx = figprops2idx (fp);
 
     if (idx >= 0 && windows.find (idx) == windows.end ())
       {
-        Matrix pos = fp.get_position ().matrix_value ();
-
-        Matrix screen_size = screen_size_pixels ();
-
-        pos = convert_position (pos, fp.get_units (), "pixels", screen_size);
+        Matrix pos = fp.get_boundingbox (true);
 
         int x = pos(0);
         int y = pos(1);
         int w = pos(2);
         int h = pos(3);
 
         idx2figprops (curr_index , fp);
 
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -406,17 +406,17 @@ convert_font_size (double font_size, con
           if (parent_height > 0)
             new_font_size = points_size * res / (parent_height * 72.0);
         }
     }
 
   return new_font_size;
 }
 
-Matrix
+static Matrix
 convert_position (const Matrix& pos, const caseless_str& from_units,
                   const caseless_str& to_units, const Matrix& parent_dim)
 {
   Matrix retval (1, pos.numel ());
   double res = 0;
   bool is_rectangle = (pos.numel () == 4);
   bool is_2d = (pos.numel () == 2);
 
@@ -630,17 +630,17 @@ convert_text_position (const Matrix& pos
             retval = convert_position (retval, "pixels", to_units, ax_size);
         }
     }
 
   return retval;
 }
 
 // This function always returns the screensize in pixels
-Matrix
+static Matrix
 screen_size_pixels (void)
 {
   graphics_object obj = gh_manager::get_object (0);
   Matrix sz = obj.get ("screensize").matrix_value ();
   return convert_position (sz, obj.get ("units").string_value (), "pixels", sz.extract_n (0, 2, 1, 2)).extract_n (0, 2, 1, 2);
 }
 
 static void
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -5512,16 +5512,9 @@ void get_children_limits (double& min_va
 OCTINTERP_API int calc_dimensions (const graphics_object& gh);
 
 // This function is NOT equivalent to the scripting language function gcf.
 OCTINTERP_API graphics_handle gcf (void);
 
 // This function is NOT equivalent to the scripting language function gca.
 OCTINTERP_API graphics_handle gca (void);
 
-extern OCTINTERP_API Matrix 
-convert_position (const Matrix& pos, const caseless_str& from_units,
-                  const caseless_str& to_units,
-                  const Matrix& parent_dim = Matrix (1, 2, 0.0));
-
-extern OCTINTERP_API Matrix screen_size_pixels (void);
-
 #endif
