# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1257847119 -3600
#      Tue Nov 10 10:58:39 2009 +0100
# Node ID 384616240a8fef58db84f33f52252abe9a344e7e
# Parent  6e425f6be618c297f09fb0beaa02b3d643f95154
fix internal numel on classes

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-11-10  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-class.cc (octave_class::numel): Use base version if called from
+	built-in assignment.
+	(octave_class::size): Ditto.
+
 2009-11-10  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/max.cc (Fcummin, Fcummax): Simplify examples in docs.
 
 2009-11-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base.cc (btyp_mixed_numeric): New function.
 	* ov-base.h: Declare it.
diff --git a/src/ov-class.cc b/src/ov-class.cc
--- a/src/ov-class.cc
+++ b/src/ov-class.cc
@@ -292,16 +292,19 @@ called_from_builtin (void)
   // avoiding dispatch?
 
   return (fcn && fcn->name () == "builtin");
 }
 
 Matrix
 octave_class::size (void)
 {
+  if (in_class_method () || called_from_builtin ())
+    return octave_base_value::size ();
+
   Matrix retval (1, 2, 1.0);
   octave_value meth = symbol_table::find_method ("size", class_name ());
 
   if (meth.is_defined ())
     {
       count++;
       octave_value_list args (1, octave_value (this));
 
@@ -313,16 +316,19 @@ octave_class::size (void)
     }
 
   return retval;
 }
 
 octave_idx_type
 octave_class::numel (const octave_value_list& idx)
 {
+  if (in_class_method () || called_from_builtin ())
+    return octave_base_value::numel (idx);
+
   octave_idx_type retval = -1;
   const std::string cn = class_name ();
 
   octave_value meth = symbol_table::find_method ("numel", cn);
 
   if (meth.is_defined ())
     {
       octave_value_list args (idx.length () + 1, octave_value ());
