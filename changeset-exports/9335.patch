# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1244744436 14400
#      Thu Jun 11 14:20:36 2009 -0400
# Node ID f2d354df53eeb71e995065a597545a8b84e1eff7
# Parent  4f96a77704922f974b5f27285c5b183f551dbcbc
new option, --no-window-system

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2009-06-11  John W. Eaton  <jwe@octave.org>
+
+	* display.h (display_info::no_window_system): New static function.
+	(display_info::display_info, display_info::init,
+	display_info::instance_ok): New argument, QUERY.
+	(display_info::init): Skip query if QUERY is false.
+
+	* octave.cc (long_opts, octave_main): Handle --no-window-system option.
+	(NO_WINDOW_SYSTEM_OPTION): New defined value.
+	(usage_string, verbose_usage): Mention --no-window-system option.
+
 2009-06-11  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-class.cc (octave_class::subsref): Set up proper nargout for call to subsref
 	method.
 	* ov-class.cc (octave_class::subsref): Unpack cs-list and setup nargin
 	for call to subsasgn.
 
 2009-06-10  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/display.cc b/src/display.cc
--- a/src/display.cc
+++ b/src/display.cc
@@ -35,112 +35,115 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "display.h"
 #include "error.h"
 
 display_info *display_info::instance = 0;
 
 void
-display_info::init (void)
+display_info::init (bool query)
 {
+  if (query)
+    {
 #if defined (OCTAVE_USE_WINDOWS_API)
 
-  HDC hdc = GetDC (0);
+      HDC hdc = GetDC (0);
 
-  if (hdc)
-    {
-      dp = GetDeviceCaps (hdc, BITSPIXEL);
+      if (hdc)
+	{
+	  dp = GetDeviceCaps (hdc, BITSPIXEL);
 
-      ht = GetDeviceCaps (hdc, VERTRES);
-      wd = GetDeviceCaps (hdc, HORZRES);
+	  ht = GetDeviceCaps (hdc, VERTRES);
+	  wd = GetDeviceCaps (hdc, HORZRES);
 
-      double ht_mm = GetDeviceCaps (hdc, VERTSIZE);
-      double wd_mm = GetDeviceCaps (hdc, HORZSIZE);
+	  double ht_mm = GetDeviceCaps (hdc, VERTSIZE);
+	  double wd_mm = GetDeviceCaps (hdc, HORZSIZE);
 
-      rx = wd * 25.4 / wd_mm;
-      ry = ht * 25.4 / ht_mm;
-    }
-  else
-    warning ("no graphical display found");
+	  rx = wd * 25.4 / wd_mm;
+	  ry = ht * 25.4 / ht_mm;
+	}
+      else
+	warning ("no graphical display found");
 
 #elif defined (HAVE_FRAMEWORK_CARBON)
 
-  CGDirectDisplayID display = CGMainDisplayID ();
-
-  if (display)
-    {
-      dp = CGDisplayBitsPerPixel (display);
-
-      ht = CGDisplayPixelsHigh (display);
-      wd = CGDisplayPixelsWide (display);
-
-      CGSize sz_mm = CGDisplayScreenSize (display);
-
-      // On modern Mac systems (>= 10.5) CGSize is a struct keeping 2
-      // CGFloat values, but the CGFloat typedef is not present on
-      // older systems, so use double instead.
-      double ht_mm = sz_mm.height;
-      double wd_mm = sz_mm.width;
-
-      rx = wd * 25.4 / wd_mm;
-      ry = ht * 25.4 / ht_mm;
-    }
-  else
-    warning ("no graphical display found");
-
-#elif defined (HAVE_X_WINDOWS)
-
-  const char *display_name = getenv ("DISPLAY");
-
-  if (display_name && *display_name)
-    {
-      Display *display = XOpenDisplay (display_name);
+      CGDirectDisplayID display = CGMainDisplayID ();
 
       if (display)
 	{
-	  Screen *screen = DefaultScreenOfDisplay (display);
+	  dp = CGDisplayBitsPerPixel (display);
+
+	  ht = CGDisplayPixelsHigh (display);
+	  wd = CGDisplayPixelsWide (display);
+
+	  CGSize sz_mm = CGDisplayScreenSize (display);
 
-	  if (screen)
-	    {
-	      dp = DefaultDepthOfScreen (screen);
+	  // On modern Mac systems (>= 10.5) CGSize is a struct keeping 2
+	  // CGFloat values, but the CGFloat typedef is not present on
+	  // older systems, so use double instead.
+	  double ht_mm = sz_mm.height;
+	  double wd_mm = sz_mm.width;
+
+	  rx = wd * 25.4 / wd_mm;
+	  ry = ht * 25.4 / ht_mm;
+	}
+      else
+	warning ("no graphical display found");
+
+#elif defined (HAVE_X_WINDOWS)
+
+      const char *display_name = getenv ("DISPLAY");
 
-	      ht = HeightOfScreen (screen);
-	      wd = WidthOfScreen (screen);
+      if (display_name && *display_name)
+	{
+	  Display *display = XOpenDisplay (display_name);
 
-	      int screen_number = XScreenNumberOfScreen (screen);
+	  if (display)
+	    {
+	      Screen *screen = DefaultScreenOfDisplay (display);
+
+	      if (screen)
+		{
+		  dp = DefaultDepthOfScreen (screen);
 
-	      double ht_mm = DisplayHeightMM (display, screen_number);
-	      double wd_mm = DisplayWidthMM (display, screen_number);
+		  ht = HeightOfScreen (screen);
+		  wd = WidthOfScreen (screen);
+
+		  int screen_number = XScreenNumberOfScreen (screen);
 
-	      rx = wd * 25.4 / wd_mm;
-	      ry = ht * 25.4 / ht_mm;
+		  double ht_mm = DisplayHeightMM (display, screen_number);
+		  double wd_mm = DisplayWidthMM (display, screen_number);
+
+		  rx = wd * 25.4 / wd_mm;
+		  ry = ht * 25.4 / ht_mm;
+		}
+	      else
+		warning ("X11 display has no default screen");
 	    }
 	  else
-	    warning ("X11 display has no default screen");
+	    warning ("unable to open X11 DISPLAY");
 	}
       else
-	warning ("unable to open X11 DISPLAY");
-    }
-  else
-    warning ("X11 DISPLAY environment variable not set");
+	warning ("X11 DISPLAY environment variable not set");
 #else
 
-  warning ("no graphical display found");
+      warning ("no graphical display found");
 
 #endif
+    }
 }
 
 bool
-display_info::instance_ok (void)
+display_info::instance_ok (bool query)
 {
   bool retval = true;
 
   if (! instance)
-    instance = new display_info ();
+    instance = new display_info (query);
 
   if (! instance)
     {
       ::error ("unable to create display_info object!");
 
       retval = false;
     }
 
diff --git a/src/display.h b/src/display.h
--- a/src/display.h
+++ b/src/display.h
@@ -24,20 +24,20 @@ along with Octave; see the file COPYING.
 #define octave_display_h 1
 
 class Matrix;
 
 class display_info
 {
 protected:
 
-  display_info (void)
+  display_info (bool query = true)
     : ht (1), wd (1), dp (0), rx (72), ry (72)
   {
-    init ();
+    init (query);
   }
 
 public:
 
   static int height (void)
   {
     return instance_ok () ? instance->do_height () : 0;
   }
@@ -57,16 +57,23 @@ public:
     return instance_ok () ? instance->do_x_dpi () : 0;
   }
 
   static double y_dpi (void)
   {
     return instance_ok () ? instance->do_y_dpi () : 0;
   }
 
+  // To disable querying the window system for defaults, this function
+  // must be called before any other display_info function.
+  static void no_window_system (void)
+  {
+    instance_ok (false);
+  }
+
 private:
 
   static display_info *instance;
 
   // Height, width, and depth of the display.
   int ht;
   int wd;
   int dp;
@@ -77,19 +84,19 @@ private:
 
   int do_height (void) const { return ht; }
   int do_width (void) const { return wd; }
   int do_depth (void) const { return dp; }
 
   double do_x_dpi (void) const { return rx; }
   double do_y_dpi (void) const { return ry; }
 
-  void init (void);
+  void init (bool query = true);
 
-  static bool instance_ok (void);
+  static bool instance_ok (bool query = true);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -49,16 +49,17 @@ along with Octave; see the file COPYING.
 #include "lo-error.h"
 #include "oct-env.h"
 #include "pathsearch.h"
 #include "str-vec.h"
 
 #include <defaults.h>
 #include "Cell.h"
 #include "defun.h"
+#include "display.h"
 #include "error.h"
 #include "file-io.h"
 #include "input.h"
 #include "lex.h"
 #include "load-path.h"
 #include "octave.h"
 #include "oct-hist.h"
 #include "oct-map.h"
@@ -122,17 +123,17 @@ static bool traditional = false;
 // (--verbose; -V)
 static bool verbose_flag = false;
 
 // Usage message
 static const char *usage_string = 
   "octave [-?HVdfhiqvx] [--debug] [--echo-commands] [--eval CODE]\n\
        [--exec-path path] [--help] [--image-path path] [--info-file file]\n\
        [--info-program prog] [--interactive] [--line-editing] [--no-history] [--no-init-file]\n\
-       [--no-line-editing] [--no-site-file] [--no-init-path] [-p path]\n\
+       [--no-line-editing] [--no-site-file] [--no-init-path] [--no-window-system] [-p path]\n\
        [--path path] [--silent] [--traditional] [--verbose] [--version] [file]";
 
 // This is here so that it's more likely that the usage message and
 // the real set of options will agree.  Note: the `+' must come first
 // to prevent getopt from permuting arguments!
 static const char *short_opts = "+?HVdfhip:qvx";
 
 // The code to evaluate at startup (--eval CODE)
@@ -151,16 +152,17 @@ static bool persist = false;
 #define INFO_PROG_OPTION 6
 #define NO_INIT_FILE_OPTION 7
 #define NO_LINE_EDITING_OPTION 8
 #define NO_SITE_FILE_OPTION 9
 #define NO_INIT_PATH_OPTION 10
 #define PERSIST_OPTION 11
 #define TRADITIONAL_OPTION 12
 #define LINE_EDITING_OPTION 13
+#define NO_WINDOW_SYSTEM_OPTION 14
 long_options long_opts[] =
   {
     { "debug",            prog_args::no_arg,       0, 'd' },
     { "braindead",        prog_args::no_arg,       0, TRADITIONAL_OPTION },
     { "doc-cache-file",   prog_args::required_arg, 0, DOC_CACHE_FILE_OPTION },
     { "echo-commands",    prog_args::no_arg,       0, 'x' },
     { "eval",             prog_args::required_arg, 0, EVAL_OPTION },
     { "exec-path",        prog_args::required_arg, 0, EXEC_PATH_OPTION },
@@ -170,16 +172,17 @@ long_options long_opts[] =
     { "info-program",     prog_args::required_arg, 0, INFO_PROG_OPTION },
     { "interactive",      prog_args::no_arg,       0, 'i' },
     { "line-editing",     prog_args::no_arg,       0, LINE_EDITING_OPTION },
     { "no-history",       prog_args::no_arg,       0, 'H' },
     { "no-init-file",     prog_args::no_arg,       0, NO_INIT_FILE_OPTION },
     { "no-line-editing",  prog_args::no_arg,       0, NO_LINE_EDITING_OPTION },
     { "no-site-file",     prog_args::no_arg,       0, NO_SITE_FILE_OPTION },
     { "no-init-path",     prog_args::no_arg,       0, NO_INIT_PATH_OPTION },
+    { "no-window-system", prog_args::no_arg,       0, NO_WINDOW_SYSTEM_OPTION },
     { "norc",             prog_args::no_arg,       0, 'f' },
     { "path",             prog_args::required_arg, 0, 'p' },
     { "persist",          prog_args::no_arg,       0, PERSIST_OPTION },
     { "quiet",            prog_args::no_arg,       0, 'q' },
     { "silent",           prog_args::no_arg,       0, 'q' },
     { "traditional",      prog_args::no_arg,       0, TRADITIONAL_OPTION },
     { "verbose",          prog_args::no_arg,       0, 'V' },
     { "version",          prog_args::no_arg,       0, 'v' },
@@ -507,16 +510,17 @@ Options:\n\
   --info-program PROGRAM  Use PROGRAM for reading info files.\n\
   --interactive, -i       Force interactive behavior.\n\
   --line-editing          Force readline use for command-line editing.\n\
   --no-history, -H        Don't save commands to the history list\n\
   --no-init-file          Don't read the ~/.octaverc or .octaverc files.\n\
   --no-init-path          Don't initialize function search path.\n\
   --no-line-editing       Don't use readline for command-line editing.\n\
   --no-site-file          Don't read the site-wide octaverc file.\n\
+  --no-window-system      Disable window system, including graphics.\n\
   --norc, -f              Don't read any initialization files.\n\
   --path PATH, -p PATH    Add PATH to head of function search path.\n\
   --persist               Go interactive after --eval or reading from FILE.\n\
   --silent, -q            Don't print message at startup.\n\
   --traditional           Set variables for closer MATLAB compatibility.\n\
   --verbose, -V           Enable verbose output in some cases.\n\
   --version, -v           Print version number and exit.\n\
 \n\
@@ -750,16 +754,20 @@ octave_main (int argc, char **argv, int 
 	case NO_SITE_FILE_OPTION:
 	  read_site_files = 0;
 	  break;
 
 	case NO_INIT_PATH_OPTION:
 	  set_initial_path = false;
 	  break;
 
+	case NO_WINDOW_SYSTEM_OPTION:
+	  display_info::no_window_system ();
+	  break;
+
 	case TRADITIONAL_OPTION:
 	  traditional = true;
 	  break;
 
 	case PERSIST_OPTION:
 	  persist = true;
 	  break;
 
