# HG changeset patch
# User jwe
# Date 1163456574 0
#      Mon Nov 13 22:22:54 2006 +0000
# Node ID 045038e0108a521a1b3c1042668d78dc1596f7f8
# Parent  a46f14cdbecd78b0c9cb5002e677b53d2ec98f70
[project @ 2006-11-13 22:22:53 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,32 @@
+2006-11-13  John W. Eaton  <jwe@octave.org>
+
+	* miscellaneous/substruct.m: New function.
+
+	* testfun/assert.m: Force orientation to match when comparing
+	struct elements.
+
+	* general/__isequal__.m: Avoid assignment of comma-separated lists
+	when comparing structs.
+
+2006-11-13  Søren Hauberg  <hauberg@gmail.com>
+
+	* scripts/general/bicubic.m, scripts/general/cart2pol.m
+	scripts/general/cart2sph.m, scripts/plot/contour.m,
+	scripts/linear-algebra/cross.m, scripts/general/cumtrapz.m,
+	scripts/linear-algebra/dot.m, scripts/image/imshow.m,
+	scripts/general/interp2.m, scripts/general/mod.m,
+	scripts/plot/plot3.m, scripts/plot/__plr2__.m,
+	scripts/plot/__plr__.m, scripts/general/pol2cart.m,
+	scripts/general/polyarea.m, scripts/polynomial/polyfit.m,
+	scripts/general/rem.m, scripts/image/rgb2ind.m,
+	scripts/general/sph2cart.m, scripts/general/trapz.m,
+	scripts/miscellaneous/xor.m: Use size_equal
+
 2006-11-13  John W. Eaton  <jwe@octave.org>
 
 	* plot/mesh.m: Use size_equal to compare dimensions.
 
 2006-11-13  Søren Hauberg  <soren@hauberg.org>
 
 	* plot/mesh.m: Simplify.  Set hidden3d for the plot.
 
diff --git a/scripts/general/__isequal__.m b/scripts/general/__isequal__.m
--- a/scripts/general/__isequal__.m
+++ b/scripts/general/__isequal__.m
@@ -99,19 +99,19 @@ function t = __isequal__ (nans_compare_e
 	## We'll allow the fieldnames to be in a different order.
 	t = all (strcmp (s_fn_x, sort (fn_v{idx})));
       endwhile
 
       idx = 0;
       while (t && idx < l_fn_x)
 	## Test that all field values are equal.
 	idx++;
-	args = {nans_compare_equal, x.(fn_x{idx})};
+	args = {nans_compare_equal, {x.(fn_x{idx})}};
 	for argn = 1:l_v
-	  args{argn+2} = varargin{argn}.(fn_x{idx});
+	  args{argn+2} = {varargin{argn}.(fn_x{idx})};
 	endfor
 	## Minimize function calls by calling for all the arguments at
 	## once.
         t = __isequal__ (args{:});
       endwhile
 
     elseif (iscell (x))
       ## Check that each element of a cell is equal.
diff --git a/scripts/general/bicubic.m b/scripts/general/bicubic.m
--- a/scripts/general/bicubic.m
+++ b/scripts/general/bicubic.m
@@ -65,17 +65,17 @@ function F = bicubic (X, Y, Z, XI, YI, s
     Z = X;
     [rz, cz] = size (Z);
   elseif (nargin == 5 || nargin == 6)
     [rz, cz] = size (Z) ; 
     if (isvector (X) && isvector (Y))
       if (rz != length (Y) || cz != length (X))
 	error ("length of X and Y must match the size of Z");
       endif
-    elseif (size(X) == size(Y) && size(X) == size(Z))
+    elseif (size_equal (X, Y) && size_equal (X, Z))
       X = X(1,:);
       Y = Y(:,1);
     else
       error ("X, Y and Z must be martrices of same size");
     endif
     
     ## mark values outside the lookup table
     xfirst_ind = find (XI < X(1));
diff --git a/scripts/general/cart2pol.m b/scripts/general/cart2pol.m
--- a/scripts/general/cart2pol.m
+++ b/scripts/general/cart2pol.m
@@ -36,17 +36,17 @@ function [Theta, R, Z] = cart2pol (X, Y,
     error ("cart2pol: number of arguments must be 2 or 3");
   endif
 
   if (nargin == 2 && nargout > 2)
     error ("cart2pol: number of output arguments must not be greater than number of input arguments");
   endif
 
   if ((! (ismatrix (X) && ismatrix (Y)))
-      || (size (X) != size (Y))
+      || (! size_equal (X, Y))
       || (nargin == 3 && (! (size (X) == size (Z) && ismatrix (Z)))))
     error ("cart2pol: arguments must be matrices of same size");
   endif
 
   Theta = atan2 (Y, X);
   R = sqrt (X .^ 2 + Y .^ 2);
 
 endfunction
diff --git a/scripts/general/cart2sph.m b/scripts/general/cart2sph.m
--- a/scripts/general/cart2sph.m
+++ b/scripts/general/cart2sph.m
@@ -32,18 +32,18 @@
 
 function [Theta, Phi, R] = cart2sph (X, Y, Z)
 
   if (nargin != 3)
     print_usage ();
   endif
 
   if ((! (ismatrix (X) && ismatrix (Y) && ismatrix (Z)))
-      || size (X) != size (Y)
-      || size (X) != size (Z))
+      || (! size_equal (X, Y))
+      || (! size_equal (X, Z))
     error ("cart2sph: arguments must be matrices of same size");
   endif
 
   Theta = atan2 (Y, X);
   Phi = atan2 (Z, sqrt (X .^ 2 + Y .^ 2));
   R = sqrt (X .^ 2 + Y .^ 2 + Z .^ 2);
 
 endfunction
diff --git a/scripts/general/cumtrapz.m b/scripts/general/cumtrapz.m
--- a/scripts/general/cumtrapz.m
+++ b/scripts/general/cumtrapz.m
@@ -48,17 +48,17 @@ function z = cumtrapz (x, y, dim)
 
   have_x = false;
   have_dim = false;
   if (nargin == 3)
     have_x = true;
     have_dim = true;
   endif
   if (nargin == 2)
-    if (size (x) != size (y) && isscalar (y))
+    if (! size_equal (x, y) && isscalar (y))
       dim = y;
       have_dim = true;
     else
       have_x = true;
     endif
   endif
 
   if (! have_dim)
@@ -85,17 +85,17 @@ function z = cumtrapz (x, y, dim)
   endfor
   idx2 = idx1;
   idx1{dim} = 2 : n;	
   idx2{dim} = 1 : (n - 1);
 
   if (! have_x)
     z = 0.5 * cumsum (x(idx1{:}) + x(idx2{:}), dim);
   else
-    if (size (x) != size (y))
+    if (! size_equal (x, y))
       error ("cumtrapz: x and y must have same shape");
     endif
     z = 0.5 * cumsum ((x(idx1{:}) - x(idx2{:})) .* 
 		      (y(idx1{:}) + y(idx2{:})), dim);
   endif
 
   sz(dim) = 1;
   z = cat (dim, zeros (sz), z);
diff --git a/scripts/general/interp2.m b/scripts/general/interp2.m
--- a/scripts/general/interp2.m
+++ b/scripts/general/interp2.m
@@ -159,28 +159,28 @@ function ZI = interp2 (varargin)
   endif
   if (! isnumeric (XI) || ! isnumeric (YI))
     error ("interp2 expected numeric XI, YI"); 
   endif
 
   ## If X and Y vectors produce a grid from them
   if (isvector (X) && isvector (Y))
     [X, Y] = meshgrid (X, Y);
-  elseif (! all (size (X) == size (Y)))
+  elseif (! size_equal (X, Y))
     error ("X and Y must be matrices of same size");
   endif
-  if (any (size (X) != size (Z)))
+  if (! size_equal (X, Z))
     error ("X and Y size must match Z dimensions");
   endif
 
   ## If Xi and Yi are vectors of different orientation build a grid
   if ((rows (XI) == 1 && columns (YI) == 1)
       || (columns (XI) == 1 && rows (YI) == 1))
     [XI, YI] = meshgrid (XI, YI);
-  elseif (any (size (XI) != size (YI)))
+  elseif (! size_equal (XI, YI))
     error ("XI and YI must be matrices of same size");
   endif
 
   shape = size (XI);
   XI = reshape (XI, 1, prod (shape));
   YI = reshape (YI, 1, prod (shape));
 
   xidx = lookup (X(1, 2:end-1), XI) + 1;
diff --git a/scripts/general/mod.m b/scripts/general/mod.m
--- a/scripts/general/mod.m
+++ b/scripts/general/mod.m
@@ -39,18 +39,17 @@
 ## Adapted by: jwe
 
 function r = mod (x, y)
 
   if (nargin != 2)
     print_usage ();
   endif
 
-  if (((ndims (x) != ndims (y)) || any (size (x) != size (y))) &&
-	 ! (isscalar (x) || isscalar (y)))
+  if (! size_equal (x, y) && ! (isscalar (x) || isscalar (y)))
     error ("mod: argument sizes must agree");
   endif
 
   ## Matlab allows complex arguments, but as far as I can tell, that's a
   ## bunch of hooey.
 
   if (isreal (x) && isreal (y))
     nz = y != 0.0;
diff --git a/scripts/general/pol2cart.m b/scripts/general/pol2cart.m
--- a/scripts/general/pol2cart.m
+++ b/scripts/general/pol2cart.m
@@ -36,17 +36,17 @@ function [X, Y, Z] = pol2cart (Theta, R,
     error ("pol2cart: number of arguments must be 2 or 3");
   endif
 
   if (nargin == 2 && nargout > 2)
     error ("pol2cart: number of output arguments must not be greater than number of input arguments");
   endif
 
   if ((! (ismatrix (Theta) && ismatrix (R)))
-      || (size (Theta) != size (R))
-      || (nargin == 3 && (! (size (R) == size (Z) && ismatrix (Z)))))
+      || (! size_equal (Theta, R))
+      || (nargin == 3 && ! (size_equal (R, Z) && ismatrix (Z))))
     error ("pol2cart: arguments must be matrices of same size");
   endif
 
   X = cos (Theta) .* R;
   Y = sin (Theta) .* R;
 
 endfunction
diff --git a/scripts/general/polyarea.m b/scripts/general/polyarea.m
--- a/scripts/general/polyarea.m
+++ b/scripts/general/polyarea.m
@@ -46,17 +46,17 @@
 ##    * use matlab compatible interface
 ##    * return absolute value of area so traversal order doesn't matter
 ##    2005-10-13 Torsten Finke
 ##    * optimization saving half the sums and multiplies
 
 function a = polyarea (x, y, dim)
   if (nargin != 2 && nargin != 3)
     print_usage ();
-  elseif (ndims (x) == ndims (y) && size (x) == size (y))
+  elseif (size_equal (x, y))
     if (nargin == 2)
       a = abs (sum (x .* (shift (y, -1) - shift (y, 1)))) / 2;
     else
       a = abs (sum (x .* (shift (y, -1, dim) - shift (y, 1, dim)), dim)) / 2;
     endif
   else
     error ("polyarea: x and y must have the same shape");
   endif
diff --git a/scripts/general/rem.m b/scripts/general/rem.m
--- a/scripts/general/rem.m
+++ b/scripts/general/rem.m
@@ -34,18 +34,17 @@
 ## Author: jwe
 
 function r = rem (x, y)
 
   if (nargin != 2)
     print_usage ();
   endif
 
-  if (((ndims (x) != ndims (y)) || any (size (x) != size (y))) &&
-	 ! (isscalar (x) || isscalar (y)))
+  if (! size_equal (x, y) && ! (isscalar (x) || isscalar (y)))
     error ("rem: argument sizes must agree");
   endif
 
   ## Matlab allows complex arguments, but as far as I can tell, that's a
   ## bunch of hooey.
 
   if (isreal (x) && isreal (y))
     r = x - y .* fix (x ./ y);
diff --git a/scripts/general/sph2cart.m b/scripts/general/sph2cart.m
--- a/scripts/general/sph2cart.m
+++ b/scripts/general/sph2cart.m
@@ -32,18 +32,18 @@
 
 function [X, Y, Z] = sph2cart (Theta, Phi, R)
 
   if (nargin != 3)
     print_usage ();
   endif
 
   if ((! (ismatrix (Theta) && ismatrix (Phi) && ismatrix (R)))
-      || size (Theta) != size (Phi)
-      || size (Theta) != size (R))
+      || (! size_equal (Theta, Phi))
+      || (! size_equal (Theta, R)))
     error ("sph2cart: arguments must be matrices of same size");
   endif
 
   X = R .* cos (Phi) .* cos (Theta);
   Y = R .* cos (Phi) .* sin (Theta);
   Z = R .* sin (Phi);
 
 endfunction
diff --git a/scripts/general/trapz.m b/scripts/general/trapz.m
--- a/scripts/general/trapz.m
+++ b/scripts/general/trapz.m
@@ -48,17 +48,17 @@ function z = trapz (x, y, dim)
 
   have_x = false;
   have_dim = false;
   if (nargin == 3)
     have_x = true;
     have_dim = true;
   endif
   if (nargin == 2)
-    if (size (x) != size (y) && isscalar (y))
+    if (! size_equal (x, y) && isscalar (y))
       dim = y;
       have_dim = true;
     else
       have_x = true;
     endif
   endif
 
   if (! have_dim)
@@ -85,17 +85,17 @@ function z = trapz (x, y, dim)
   endfor
   idx2 = idx1;
   idx1{dim} = 2 : n;	
   idx2{dim} = 1 : (n - 1);
 
   if (! have_x)
     z = 0.5 * sum (x(idx1{:}) + x(idx2{:}), dim);
   else
-    if (size (x) != size (y))
+    if (! size_equal (x, y))
       error ("cumtrapz: x and y must have same shape");
     endif
     z = 0.5 * sum ((x(idx1{:}) - x(idx2{:})) .* 
 		   (y(idx1{:}) + y(idx2{:})), dim);
   endif
 endfunction
 
 %!assert (trapz(1:5), 12)
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -70,18 +70,18 @@ function imshow (im, varargin)
     error ("imshow: first argument must be an image or the filename of an image");
   endif
   
   ## Is the function called with 3 matrices (i.e., imshow (R, G, B))?
   if (nargin >= 3
       && ndims (im) == 2
       && ndims (varargin{1}) == 2
       && ndims (varargin{2}) == 2
-      && size (im) == size (varargin{1})
-      && size (im) == size (varargin{2}))
+      && size_equal (im, varargin{1})
+      && size_equal (im, varargin{2}))
     im(:,:,3) = varargin{2};
     im(:,:,2) = varargin{1};
     varargin(1:2) = [];
   endif
 
   ## Set default display range.
   switch class (im)
     case {"uint8"}
diff --git a/scripts/image/rgb2ind.m b/scripts/image/rgb2ind.m
--- a/scripts/image/rgb2ind.m
+++ b/scripts/image/rgb2ind.m
@@ -42,17 +42,17 @@ function [X, map] = rgb2ind (R, G, B)
       R = rgb(:,:,1);
       G = rgb(:,:,2);
       B = rgb(:,:,3);
     else
       error ("rgb2ind: argument is not an RGB image");
     endif
   endif
 
-  if (size (R) != size (G) || size (R) != size (B))
+  if (! size_equal (R, G) || ! size_equal (R, B))
     error ("rgb2ind: arguments must all have the same size");
   endif
 
   [hi, wi] = size (R);
 
   X = zeros (hi, wi);
 
   map = zeros (hi*wi, 3);
diff --git a/scripts/linear-algebra/cross.m b/scripts/linear-algebra/cross.m
--- a/scripts/linear-algebra/cross.m
+++ b/scripts/linear-algebra/cross.m
@@ -75,17 +75,17 @@ function z = cross (x, y, dim)
   for i = 1:nd
     idx1{i} = 1:sz(i);
   endfor
   idx2 = idx3 = idx1;
   idx1(dim) = 1;
   idx2(dim) = 2;
   idx3(dim) = 3;
 
-  if (size (x) == size (y))
+  if (size_equal (x, y))
     z = cat (dim, 
 	     (x(idx2{:}) .* y(idx3{:}) - x(idx3{:}) .* y(idx2{:})),
              (x(idx3{:}) .* y(idx1{:}) - x(idx1{:}) .* y(idx3{:})),
              (x(idx1{:}) .* y(idx2{:}) - x(idx2{:}) .* y(idx1{:})));
   else
     error ("cross: x and y must have the same dimensions");
   endif
 
diff --git a/scripts/linear-algebra/dot.m b/scripts/linear-algebra/dot.m
--- a/scripts/linear-algebra/dot.m
+++ b/scripts/linear-algebra/dot.m
@@ -35,20 +35,20 @@ function z = dot (x, y, dim)
 
   if (nargin < 3)
     if isvector (x)
       x = x(:);
     endif
     if isvector (y)
       y = y(:);
     endif
-    if (size (x) != size (y))
+    if (! size_equal (x, y))
       error ("dot: sizes of arguments must match")
     endif
     z = sum(x .* y);
   else
-    if (size (x) != size (y))
+    if (! size_equal (x, y))
       error ("dot: sizes of arguments must match")
     endif
     z = sum(x .* y, dim);
   endif
 
 endfunction
diff --git a/scripts/miscellaneous/setfield.m b/scripts/miscellaneous/setfield.m
--- a/scripts/miscellaneous/setfield.m
+++ b/scripts/miscellaneous/setfield.m
@@ -13,17 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Built-in Function} {[@var{k1},..., @var{v1}] =} setfield (@var{s}, @var{k1}, @var{v1}, @dots{})
+## @deftypefn {Function File} {[@var{k1},..., @var{v1}] =} setfield (@var{s}, @var{k1}, @var{v1}, @dots{})
 ## Set field members in a structure.
 ##
 ## @example
 ## @group
 ## oo(1,1).f0= 1;
 ## oo = setfield(oo,@{1,2@},'fd',@{3@},'b', 6);
 ## oo(1,2).fd(3).b == 6
 ## @result{} ans = 1
diff --git a/scripts/miscellaneous/xor.m b/scripts/miscellaneous/xor.m
--- a/scripts/miscellaneous/xor.m
+++ b/scripts/miscellaneous/xor.m
@@ -27,17 +27,17 @@
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Created: 16 September 1994
 ## Adapted-By: jwe
 
 function z = xor (x, y)
 
   if (nargin == 2)
-    if (isscalar (x) || isscalar (y) || size (x) == size (y))
+    if (isscalar (x) || isscalar (y) || size_equal (x, y))
       z = logical ((x | y) - (x & y));
     else
       error ("xor: x and y must be of common size or scalars");
     endif
   else
     print_usage ();
   endif
 
diff --git a/scripts/plot/__plr2__.m b/scripts/plot/__plr2__.m
--- a/scripts/plot/__plr2__.m
+++ b/scripts/plot/__plr2__.m
@@ -102,17 +102,17 @@ function __plr2__ (theta, rho, fmt)
       if (r_nr != t_nr)
         error ("__plr2__: vector and matrix sizes must match");
       endif
       diag_r = diag (rho);
       x = diag_r * cos (theta);
       y = diag_r * sin (theta);
       __plt__ ("polar", x, y, fmt);
     elseif (ismatrix (rho))
-      if (size (rho) != size (theta))
+      if (! size_equal (rho, theta))
         error ("__plr2__: matrix dimensions must match");
       endif
       x = rho .* cos (theta);
       y = rho .* sin (theta);
       __plt__ ("polar", x, y, fmt);
     else
       error ("__plr2__: invalid data for plotting")
     endif
diff --git a/scripts/plot/__plr__.m b/scripts/plot/__plr__.m
--- a/scripts/plot/__plr__.m
+++ b/scripts/plot/__plr__.m
@@ -116,17 +116,17 @@ function __plr__ (theta, rho, fmt)
         if (r_nr != t_nr)
           error ("polar: vector and matrix sizes must match");
         endif
         diag_r = diag (r);
         x = diag_r * cos (theta);
         y = diag_r * sin (theta);
         __plt__ ("polar", x, y, fmt);
       elseif (ismatrix (rho))
-        if (size (rho) != size (theta))
+        if (! size_equal (rho, theta))
           error ("polar: matrix dimensions must match");
         endif
         x = rho .* cos (theta);
         y = rho .* sin (theta);
         __plt__ ("polar", x, y, fmt);
       endif
     endif
   else
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -87,17 +87,17 @@ function contour (x, y, z, n)
             zz(:,i+2) = z(k,:)';
             k++;
           endfor
 	else
           error (size_msg);
 	endif
       else
 	z_size = size (z);
-	if (z_size == size (x) && z_size == size (y))
+	if (size_equal (z, x) && size_equal (z, y))
 	  nc = 3*z_size(1);
 	  zz = zeros (z_size(2), nc);
 	  zz(:,1:3:nc) = x';
 	  zz(:,2:3:nc) = y';
 	  zz(:,3:3:nc) = z';
 	else
 	  error (size_msg);
 	endif
diff --git a/scripts/plot/plot3.m b/scripts/plot/plot3.m
--- a/scripts/plot/plot3.m
+++ b/scripts/plot/plot3.m
@@ -208,17 +208,17 @@ function plot3 (varargin)
 	    z = z(:);
 	  elseif (length (x) == rows (z) && length (y) == columns (z))
 	    error ("plot3: [length(x), length(y)] must match size(z)");
 	  else
 	    [x, y] = meshgrid (x, y);
 	  endif
 	endif
 
-	if (any (size (x) != size (y)) || any (size (x) != size (z)))
+	if (! size_equal (x, y) || ! size_equal (x, z))
 	  error ("plot3: x, y, and z must have the same shape");
 	endif
 
 	__gnuplot_raw__ ("set nohidden3d;\n")
 	__gnuplot_set__ parametric; 
 
 	__plt3__ ([([x; NaN*ones(1,size(x,2))])(:), ...
 		 ([y; NaN*ones(1,size(y,2))])(:), ...
@@ -246,17 +246,17 @@ function plot3 (varargin)
 	    z = z(:);
 	  elseif (length (x) == rows (z) && length (y) == columns (z))
 	    error ("plot3: [length(x), length(y)] must match size(z)");
 	  else
 	    [x, y] = meshgrid (x, y);
 	  endif
 	endif
 
-	if (any (size (x) != size (y)) || any (size (x) != size (z)))
+	if (! size_equal (x, y) || ! size_equal (x, z))
 	  error ("plot3: x, y, and z must have the same shape");
 	endif
 
 	__gnuplot_raw__ ("set nohidden3d;\n")
 	__gnuplot_set__ parametric; 
 
 	__plt3__ ([([x; NaN*ones(1,size(x,2))])(:), ...
 		   ([y; NaN*ones(1,size(y,2))])(:), ...
@@ -298,17 +298,17 @@ function plot3 (varargin)
 	  z = z(:);
 	elseif (length (x) == rows (z) && length (y) == columns (z))
 	  error ("plot3: [length(x), length(y)] must match size(z)");
 	else
 	  [x, y] = meshgrid (x, y);
 	endif
       endif
 
-      if (any (size (x) != size (y)) || any (size (x) != size (z)))
+      if (! size_equal (x, y) || ! size_equal (x, z))
 	error ("plot3: x, y, and z must have the same shape");
       endif
 
       __gnuplot_raw__ ("set nohidden3d;\n")
       __gnuplot_set__ parametric; 
 
       __plt3__ ([([x; NaN*ones(1,size(x,2))])(:), ...
 		 ([y; NaN*ones(1,size(y,2))])(:), ...
diff --git a/scripts/polynomial/polyfit.m b/scripts/polynomial/polyfit.m
--- a/scripts/polynomial/polyfit.m
+++ b/scripts/polynomial/polyfit.m
@@ -59,17 +59,17 @@
 
 function [p, s, mu] = polyfit (x, y, n)
 
 
   if (nargin != 3)
     print_usage ();
   endif
 
-  if (! (isvector (x) && isvector (y) && size (x) == size (y)))
+  if (! (isvector (x) && isvector (y) && size_equal (x, y)))
     error ("polyfit: x and y must be vectors of the same size");
   endif
 
   if (! (isscalar (n) && n >= 0 && ! isinf (n) && n == round (n)))
     error ("polyfit: n must be a nonnegative integer");
   endif
 
   y_is_row_vector = (rows (y) == 1);
diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -105,20 +105,21 @@ function assert(cond, expected, tol)
       iserror = 1;
     else
       try
 	empty=prod(size(cond))==0;
 	normal=prod(size(cond))==1;
 	for [v,k] = cond
 	  if !struct_contains(expected,k), error; endif
 	  if empty, v = cell(1,0); endif
-	  if normal, v = {v}; endif
-	  assert(v,{expected.(k)},tol);
+	  if normal, v = {v}; else v = v(:)'; endif
+	  assert(v,{expected.(k)},tol)
 	endfor
       catch
+	"catch"
 	iserror = 1;
       end
     endif
 
   elseif (isempty (expected))
     iserror = (any (size (cond) != size (expected)));
 
   elseif (any (size (cond) != size (expected)))
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1957,16 +1957,17 @@ DEFUN (subsref, args, nargout,
 Perform the subscripted element selection operation according to\n\
 the subscript specified by @var{idx}.\n\
 \n\
 The subscript @var{idx} is expected to be a structure array with\n\
 fields @samp{type} and @samp{subs}.  Valid values for @samp{type}\n\
 are @samp{\"()\"}, @samp{\"@{@}\", and @samp{\".\"}.\n\
 The @samp{subs} field may be either @samp{\":\"} or a cell array\n\
 of index values.\n\
+@seealso{subsasgn, substruct}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 2)
     {
       std::string type;
       std::list<octave_value_list> idx;
@@ -1988,16 +1989,17 @@ DEFUN (subsasgn, args, ,
 Perform the subscripted assignment operation according to\n\
 the subscript specified by @var{idx}.\n\
 \n\
 The subscript @var{idx} is expected to be a structure array with\n\
 fields @samp{type} and @samp{subs}.  Valid values for @samp{type}\n\
 are @samp{\"()\"}, @samp{\"@{@}\", and @samp{\".\"}.\n\
 The @samp{subs} field may be either @samp{\":\"} or a cell array\n\
 of index values.\n\
+@seealso{subsref, substruct}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 3)
     {
       std::string type;
       std::list<octave_value_list> idx;
