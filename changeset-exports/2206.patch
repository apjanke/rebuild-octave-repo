# HG changeset patch
# User jwe
# Date 832145742 0
#      Wed May 15 07:35:42 1996 +0000
# Node ID 9be05ffc288ac907329ef499988a35b243f01691
# Parent  bd389b53befa66c9fc03caf74a56703ab49aacf3
[project @ 1996-05-15 07:32:58 by jwe]

diff --git a/src/pager.cc b/src/pager.cc
--- a/src/pager.cc
+++ b/src/pager.cc
@@ -70,16 +70,18 @@ static bool Vpage_output_immediately;
 // TRUE means all output intended for the screen should be passed
 // through the pager.
 static bool Vpage_screen_output;
 
 static sig_handler *saved_sigint_handler = 0;
 
 static int really_flush_to_pager = 0;
 
+static int flushing_output_to_pager = 0;
+
 static void
 clear_external_pager (void)
 {
   octave_pager_pid = -1;
 
   delete external_pager;
   external_pager = 0;
 
@@ -88,60 +90,57 @@ clear_external_pager (void)
       octave_set_signal_handler (SIGINT, saved_sigint_handler);
       saved_sigint_handler = 0;
     }
 }
 
 static void
 do_sync (const char *msg, bool bypass_pager)
 {
-  if (! error_state)
+  if (msg && *msg)
     {
-      if (msg && *msg)
+      if (bypass_pager)
+	cout << msg;
+      else
 	{
-	  if (bypass_pager)
-	    cout << msg;
-	  else
+	  if (! external_pager)
 	    {
-	      if (! external_pager)
-		{
-		  string pgr = Vpager_binary;
+	      string pgr = Vpager_binary;
 
-		  if (! pgr.empty ())
-		    {
-		      saved_sigint_handler
-			= octave_set_signal_handler (SIGINT, SIG_IGN);
+	      if (! pgr.empty ())
+		{
+		  saved_sigint_handler
+		    = octave_set_signal_handler (SIGINT, SIG_IGN);
 
-		      external_pager = new oprocstream (pgr.c_str ());
+		  external_pager = new oprocstream (pgr.c_str ());
 
-		      if (external_pager)
-			octave_pager_pid = external_pager->pid ();
-		    }
+		  if (external_pager)
+		    octave_pager_pid = external_pager->pid ();
 		}
+	    }
 
-	      if (external_pager)
+	  if (external_pager)
+	    {
+	      if (octave_pager_pid > 0 && external_pager->good ())
 		{
-		  if (octave_pager_pid > 0 && external_pager->good ())
-		    {
-		      *external_pager << msg;
+		  *external_pager << msg;
 
-		      // These checks are needed if a signal handler
-		      // invoked since the last set of checks attempts
-		      // to flush output and then returns
+		  // These checks are needed if a signal handler
+		  // invoked since the last set of checks attempts
+		  // to flush output and then returns
 
-		      if (octave_pager_pid > 0
-			  && external_pager
-			  && external_pager->good ())
-			external_pager->flush ();
-		    }
-		  clear_external_pager ();
+		  if (octave_pager_pid > 0
+		      && external_pager
+		      && external_pager->good ())
+		    external_pager->flush ();
 		}
-	      else
-		cout << msg;
+	      clear_external_pager ();
 	    }
+	  else
+	    cout << msg;
 	}
     }
 }
 
 static bool
 more_than_a_screenful (const char *s)
 {
   if (s)
@@ -253,28 +252,33 @@ octave_diary_stream::stream (void)
     instance = new octave_diary_stream ();
 
   return *instance;
 }
 
 void
 flush_octave_stdout (void)
 {
-  begin_unwind_frame ("flush_octave_stdout");
+  if (! flushing_output_to_pager)
+    {
+      begin_unwind_frame ("flush_octave_stdout");
 
-  unwind_protect_int (really_flush_to_pager);
-  
-  really_flush_to_pager = 1;
+      unwind_protect_int (really_flush_to_pager);
+      unwind_protect_int (flushing_output_to_pager);
 
-  octave_stdout.flush ();
+      really_flush_to_pager = 1;
+      flushing_output_to_pager = 1;
+
+      octave_stdout.flush ();
 
-  if (external_pager)
-    clear_external_pager ();
+      if (external_pager)
+	clear_external_pager ();
 
-  run_unwind_frame ("flush_octave_stdout");
+      run_unwind_frame ("flush_octave_stdout");
+    }
 }
 
 static void
 close_diary_file (void)
 {
   if (external_diary_file.is_open ())
     {
       octave_diary.flush ();
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -152,25 +152,21 @@ sigchld_handler (int /* sig */)
       pid_t pid = waitpid (octave_pager_pid, &status, 0);
 
       if (pid > 0)
 	{
 	  if (WIFEXITED (status) || WIFSIGNALLED (status))
 	    {
 	      octave_pager_pid = -1;
 
-	      // XXX FIXME XXX -- I'm not sure that this is the right
-	      // thing to do here, but it seems to work.
+	      // Don't call error() here because we don't want to set
+	      // the error state.
 
-	      // Don't call error() here because that tries to flush
-	      // pending output, which isn't going to do anything
-	      // anyway.
-
-	      cerr << "error: connection to external pager lost --\n";
-	      cerr << "error: pending computations and output have been discarded\n";
+	      warning ("connection to external pager lost --");
+	      warning ("pending computations and output have been discarded");
 	    }
 	}
     }
 }
 
 #if defined (__alpha__)
 static RETSIGTYPE
 sigfpe_handler (int /* sig */)
@@ -223,17 +219,17 @@ static RETSIGTYPE
 sigpipe_handler (int /* sig */)
 {
   // Can this ever cause trouble on systems that don't forget signal
   // handlers when they are invoked?
 
   octave_set_signal_handler (SIGPIPE, sigpipe_handler);
 
   if (pipe_handler_error_count++ == 0)
-    message (0, "broken pipe");
+    warning ("broken pipe");
 
   // Don't loop forever on account of this.
 
   if (pipe_handler_error_count  > 100)
     jump_to_top_level ();
 
 #if RETSIGTYPE == void
   return;
