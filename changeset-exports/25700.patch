# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1532759374 -7200
#      Sat Jul 28 08:29:34 2018 +0200
# Node ID ba8227df92ae491a18c5a3cf13d94ab4bebdc825
# Parent  825e1d0dfa8ed4b2c65719b0c0d5451019f6abf6
synchronize gui editor encoding when changing __mfile_encdoing__ (bug #54310)

* input.cc (mfile_encoding): call __octave_link_gui_preference__ for
  setting the preference editor/default_encoding accordingly

* main-window.cc (gui_preference_adjust): new method for adjusting
  and checking some new preferences that have to be set via gui_preference,
  in this case the default encoding;
  (gui_preference): use new method gui_preference_adjust and only set
  the new preference if it has changed;

*  main-window.h: new proivate method gui_preference_adjust

* resource-manager.cc (do_get_codecs): new method reading a string list
  with all available codecs;
  (do_combo_encoding): do net get a list of codecs here, but use the new
  method do_get_codecs

* resource-manager.h: new static method	get_codecs which only calls
  new method do_get_codecs

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -2487,28 +2487,67 @@ namespace octave
 
     connect (current_dir_up, SIGNAL (triggered (void)),
              this, SLOT (change_directory_up (void)));
 
     connect (m_undo_action, SIGNAL (triggered (void)),
              this, SLOT (handle_undo_request (void)));
   }
 
+  QString main_window::gui_preference_adjust (const QString& key,
+                                              const QString& value)
+  {
+    QString adjusted_value = value;
+
+    // Immediately return if no new value is given
+    if (adjusted_value.isEmpty ())
+      return adjusted_value;
+
+    // Not all encodings are available. Encodings are uppercase and do not
+    // use CPxxx but IBMxxx or WINDOWS-xxx.
+    if (key == "editor/default_encoding")
+      {
+        adjusted_value = adjusted_value.toUpper ();
+
+        QStringList codecs;
+        resource_manager::get_codecs (&codecs);
+
+        QRegExp re ("^CP(\\d+)$");
+        if (re.indexIn (adjusted_value) > -1)
+          {
+            if (codecs.contains ("IBM" + re.cap (1)))
+              adjusted_value = "IBM" + re.cap (1);
+            else if (codecs.contains ("WINDOWS-" + re.cap (1)))
+              adjusted_value = "WINDOWS-" + re.cap (1);
+            else
+              adjusted_value.clear ();
+          }
+        else if (! codecs.contains (adjusted_value))
+          adjusted_value.clear ();
+      }
+
+    return adjusted_value;
+  }
+
   void main_window::gui_preference (const QString& key, const QString& value,
                                     QString* read_value)
   {
     QSettings *settings = resource_manager::get_settings ();
     *read_value = settings->value (key).toString ();
 
     // Wait for worker to suspend
     m_octave_qt_link->lock ();
 
-    if (! value.isEmpty ())
+    // Some preferences need extra handling
+    QString adjusted_value = gui_preference_adjust (key, value);
+
+    if (! adjusted_value.isEmpty () && (*read_value != adjusted_value))
       {
-        settings->setValue (key, QVariant (value));
+        // Change settings only for new, non-empty values
+        settings->setValue (key, QVariant (adjusted_value));
         emit settings_changed (settings);
       }
 
     // We are done: Unlock and wake the worker thread
     m_octave_qt_link->unlock ();
     m_octave_qt_link->wake_all ();
   }
 
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -316,16 +316,18 @@ namespace octave
     void construct_window_menu (QMenuBar *p);
     void construct_help_menu (QMenuBar *p);
     void construct_documentation_menu (QMenu *p);
 
     void construct_news_menu (QMenuBar *p);
 
     void construct_tool_bar (void);
 
+    QString gui_preference_adjust (const QString& key, const QString& value);
+
     void save_workspace_callback (const std::string& file);
 
     void load_workspace_callback (const std::string& file);
 
     void open_any_callback (const std::string& file);
 
     void rename_variable_callback (const name_pair& names);
 
diff --git a/libgui/src/resource-manager.cc b/libgui/src/resource-manager.cc
--- a/libgui/src/resource-manager.cc
+++ b/libgui/src/resource-manager.cc
@@ -335,29 +335,35 @@ namespace octave
   {
     if (fallback)
       return QIcon::fromTheme (icon_name,
                                QIcon (":/actions/icons/" + icon_name + ".png"));
     else
       return QIcon::fromTheme (icon_name);
   }
 
-  // initialize a given combo box with available text encodings
-  void resource_manager::do_combo_encoding (QComboBox *combo, QString current)
+  // get a list of all available encodings
+  void resource_manager::do_get_codecs (QStringList *codecs)
   {
     // get the codec name for each mib
     QList<int> all_mibs = QTextCodec::availableMibs ();
-    QStringList all_codecs;
     foreach (int mib, all_mibs)
       {
         QTextCodec *c = QTextCodec::codecForMib (mib);
-        all_codecs << c->name ().toUpper ();
+        codecs->append (c->name ().toUpper ());
       }
-    all_codecs.removeDuplicates ();
-    qSort (all_codecs);
+    codecs->removeDuplicates ();
+    qSort (*codecs);
+  }
+
+  // initialize a given combo box with available text encodings
+  void resource_manager::do_combo_encoding (QComboBox *combo, QString current)
+  {
+    QStringList all_codecs;
+    do_get_codecs (&all_codecs);
 
     // the default encoding
 #if defined (Q_OS_WIN32)
     QString def_enc = "SYSTEM";
 #else
     QString def_enc = "UTF-8";
 #endif
 
diff --git a/libgui/src/resource-manager.h b/libgui/src/resource-manager.h
--- a/libgui/src/resource-manager.h
+++ b/libgui/src/resource-manager.h
@@ -88,16 +88,22 @@ namespace octave
     static bool update_settings_key (const QString& new_key,
                                      const QString& old_key)
     {
       return (instance_ok ()
               ? instance->do_update_settings_key (new_key, old_key)
               : false);
     }
 
+    static void get_codecs (QStringList *codecs)
+    {
+      if (instance_ok ())
+        instance->do_get_codecs (codecs);
+    }
+
     static void combo_encoding (QComboBox *combo, QString current = QString ())
     {
       if (instance_ok ())
         instance->do_combo_encoding (combo, current);
     }
 
     static QString get_gui_translation_dir (void);
 
@@ -151,16 +157,17 @@ namespace octave
     bool do_update_settings_key (const QString& new_key, const QString& old_key);
 
     bool do_is_first_run (void) const;
 
     void do_update_network_settings (void);
 
     QIcon do_icon (const QString& icon, bool fallback);
 
+    void do_get_codecs (QStringList *codecs);
     void do_combo_encoding (QComboBox *combo, QString current);
 
     QString m_settings_directory;
 
     QString m_settings_file;
 
     QSettings *m_settings;
 
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -547,18 +547,23 @@ namespace octave
                 m_mfile_encoding = saved_encoding;
 
                 error ("__mfile_encoding__: conversion from codepage '%s' not supported",
                        codepage.c_str ());
               }
 
             octave_iconv_close_wrapper (codec);
           }
+
       }
 
+    // Synchronize the related gui preference for editor encoding
+    octave::feval ("__octave_link_gui_preference__",
+                   ovl ("editor/default_encoding", m_mfile_encoding));
+
     return retval;
   }
 
   bool input_system::yes_or_no (const std::string& prompt)
   {
     std::string prompt_string = prompt + "(yes or no) ";
 
     while (1)
