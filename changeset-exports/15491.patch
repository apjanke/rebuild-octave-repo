# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1349440139 14400
#      Fri Oct 05 08:28:59 2012 -0400
# Node ID c9844b82945f2da45a8a9d8eb9c39985013b5d78
# Parent  dbc6b6b18286513ace738688c43dcc3db2799071
reformat interesting comment

diff --git a/libinterp/octave-value/ov-ch-mat.cc b/libinterp/octave-value/ov-ch-mat.cc
--- a/libinterp/octave-value/ov-ch-mat.cc
+++ b/libinterp/octave-value/ov-ch-mat.cc
@@ -147,22 +147,21 @@ octave_char_matrix::as_mxArray (void) co
   const char *p = matrix.data ();
 
   for (mwIndex i = 0; i < nel; i++)
     pr[i] = p[i];
 
   return retval;
 }
 
-// The C++ standard guarantees cctype defines functions, not macros
-// (and hence macros *CAN'T* be defined if only cctype is included)
-// so there's no need to f*ck around.
-// The exceptions are isascii and toascii, which are not C++.
-// Oddly enough, all those character functions are int (*) (int), even
-// in C++.  Wicked!
+// The C++ standard guarantees cctype defines functions, not macros (and
+// hence macros *CAN'T* be defined if only cctype is included) so
+// there's no need to fuck around. The exceptions are isascii and
+// toascii, which are not C++. Oddly enough, all those character
+// functions are int (*) (int), even in C++. Wicked!
 static inline int xisascii (int c)
 { return isascii (c); }
 
 static inline int xtoascii (int c)
 {
 #ifdef HAVE_TOASCII
   return toascii (c);
 #else
