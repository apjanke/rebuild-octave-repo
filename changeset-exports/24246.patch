# HG changeset patch
# User Julien Bect <jbect@users.sourceforge.net>
# Date 1502222450 -7200
#      Tue Aug 08 22:00:50 2017 +0200
# Node ID d74d01e39f91e444849cab309a2a8436a80a3af2
# Parent  b3b7677334f6d9995ccd3521a1d196446f6e08d8
jit: Use nullptr (instead of 0 or NULL) as much as possible

diff --git a/libinterp/parse-tree/jit-ir.cc b/libinterp/parse-tree/jit-ir.cc
--- a/libinterp/parse-tree/jit-ir.cc
+++ b/libinterp/parse-tree/jit-ir.cc
@@ -358,19 +358,18 @@ namespace octave
     iterator iloc = instructions.insert (loc, instr);
     instr->stash_parent (this, iloc);
     return instr;
   }
 
   jit_terminator *
   jit_block::terminator (void) const
   {
-    assert (this);
     if (instructions.empty ())
-      return 0;
+      return nullptr;
 
     jit_instruction *last = instructions.back ();
     return dynamic_cast<jit_terminator *> (last);
   }
 
   bool
   jit_block::branch_alive (jit_block *asucc) const
   {
diff --git a/libinterp/parse-tree/jit-typeinfo.cc b/libinterp/parse-tree/jit-typeinfo.cc
--- a/libinterp/parse-tree/jit-typeinfo.cc
+++ b/libinterp/parse-tree/jit-typeinfo.cc
@@ -1200,22 +1200,22 @@ namespace octave
     grab_fn.add_overload (create_identity (scalar));
     grab_fn.add_overload (create_identity (scalar_ptr));
     grab_fn.add_overload (create_identity (any_ptr));
     grab_fn.add_overload (create_identity (boolean));
     grab_fn.add_overload (create_identity (complex));
     grab_fn.add_overload (create_identity (index));
 
     // release any
-    fn = create_external (JIT_FN (octave_jit_release_any), 0, any);
+    fn = create_external (JIT_FN (octave_jit_release_any), nullptr, any);
     release_fn.add_overload (fn);
     release_fn.stash_name ("release");
 
     // release matrix
-    fn = create_external (JIT_FN (octave_jit_release_matrix), 0, matrix);
+    fn = create_external (JIT_FN (octave_jit_release_matrix), nullptr, matrix);
     release_fn.add_overload (fn);
 
     // destroy
     destroy_fn = release_fn;
     destroy_fn.stash_name ("destroy");
     destroy_fn.add_overload (create_identity(scalar));
     destroy_fn.add_overload (create_identity(boolean));
     destroy_fn.add_overload (create_identity(index));
@@ -1231,17 +1231,17 @@ namespace octave
 
     add_binary_fcmp (scalar, octave_value::op_lt, llvm::CmpInst::FCMP_ULT);
     add_binary_fcmp (scalar, octave_value::op_le, llvm::CmpInst::FCMP_ULE);
     add_binary_fcmp (scalar, octave_value::op_eq, llvm::CmpInst::FCMP_UEQ);
     add_binary_fcmp (scalar, octave_value::op_ge, llvm::CmpInst::FCMP_UGE);
     add_binary_fcmp (scalar, octave_value::op_gt, llvm::CmpInst::FCMP_UGT);
     add_binary_fcmp (scalar, octave_value::op_ne, llvm::CmpInst::FCMP_UNE);
 
-    jit_function gripe_div0 = create_external (JIT_FN (warn_divide_by_zero), 0);
+    jit_function gripe_div0 = create_external (JIT_FN (warn_divide_by_zero), nullptr);
     gripe_div0.mark_can_error ();
 
     // divide is annoying because it might error
     fn = create_internal ("octave_jit_div_scalar_scalar", scalar, scalar, scalar);
     fn.mark_can_error ();
 
     llvm::BasicBlock *body = fn.new_block ();
     builder.SetInsertPoint (body);
@@ -1504,17 +1504,17 @@ namespace octave
       fn.do_return (builder, ret);
     }
     for_index_fn.add_overload (fn);
 
     // logically true
     logically_true_fn.stash_name ("logically_true");
 
     jit_function gripe_nantl
-      = create_external (JIT_FN (octave_jit_err_nan_to_logical_conversion), 0);
+      = create_external (JIT_FN (octave_jit_err_nan_to_logical_conversion), nullptr);
     gripe_nantl.mark_can_error ();
 
     fn = create_internal ("octave_jit_logically_true_scalar", boolean, scalar);
     fn.mark_can_error ();
 
     body = fn.new_block ();
     builder.SetInsertPoint (body);
     {
@@ -1567,19 +1567,19 @@ namespace octave
       fn.do_return (builder, rng);
     }
     make_range_fn.add_overload (fn);
 
     // paren_subsref
     jit_type *jit_int = intN (sizeof (int) * 8);
     llvm::Type *int_t = jit_int->to_llvm ();
     jit_function ginvalid_index
-      = create_external (JIT_FN (octave_jit_ginvalid_index), 0);
+      = create_external (JIT_FN (octave_jit_ginvalid_index), nullptr);
     jit_function gindex_range = create_external (JIT_FN (octave_jit_gindex_range),
-                                                 0, jit_int, jit_int, index,
+                                                 nullptr, jit_int, jit_int, index,
                                                  index);
 
     fn = create_internal ("()subsref", scalar, matrix, scalar);
     fn.mark_can_error ();
 
     body = fn.new_block ();
     builder.SetInsertPoint (body);
     {
@@ -1889,17 +1889,17 @@ namespace octave
   }
 
   void
   jit_typeinfo::add_print (jit_type *ty, void *fptr)
   {
     std::stringstream name;
     name << "octave_jit_print_" << ty->name ();
     jit_function fn = create_external (engine, fptr, name.str (),
-                                       0, intN (8), ty);
+                                       nullptr, intN (8), ty);
     print_fn.add_overload (fn);
   }
 
   // FIXME: cp between add_binary_op, add_binary_icmp, and add_binary_fcmp
   void
   jit_typeinfo::add_binary_op (jit_type *ty, int op, int llvm_op)
   {
     std::stringstream fname;
diff --git a/libinterp/parse-tree/jit-util.h b/libinterp/parse-tree/jit-util.h
--- a/libinterp/parse-tree/jit-util.h
+++ b/libinterp/parse-tree/jit-util.h
@@ -135,17 +135,19 @@ namespace octave
   // a node for internal linked lists
   template <typename LIST_T, typename NODE_T>
   class
   jit_internal_node
   {
   public:
     typedef jit_internal_list<LIST_T, NODE_T> jit_ilist;
 
-    jit_internal_node (void) : mvalue (0), mnext (0), mprev (0) { }
+    jit_internal_node (void)
+      : mvalue (nullptr), mnext (nullptr), mprev (nullptr)
+    { }
 
     ~jit_internal_node (void) { remove (); }
 
     LIST_T * value (void) const { return mvalue; }
 
     void stash_value (LIST_T *avalue)
     {
       remove ();
