# HG changeset patch
# User jwe
# Date 947818500 0
#      Fri Jan 14 02:55:00 2000 +0000
# Node ID 5b77cf82393c2f07f21a94ca9cd3ac1f23697c66
# Parent  e098ebb770239cf52f7b13cb4522eeeaa5f9f623
[project @ 2000-01-14 02:54:53 by jwe]

diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -115,17 +115,17 @@ specified in radians.  To convert from d
 @DOCSTRING(asec)
 @DOCSTRING(acsc)
 @DOCSTRING(acot)
 
 @DOCSTRING(sinh)
 @DOCSTRING(cosh)
 @DOCSTRING(tanh)
 @DOCSTRING(sech)
-@DOCSTRING(scsh)
+@DOCSTRING(csch)
 @DOCSTRING(coth)
 
 @DOCSTRING(asinh)
 @DOCSTRING(acosh)
 @DOCSTRING(atanh)
 @DOCSTRING(asech)
 @DOCSTRING(acsch)
 @DOCSTRING(acoth)
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -101,16 +101,20 @@ variable @code{INFO_PROGRAM}.
 @item --interactive
 @itemx -i
 @cindex @code{--interactive}
 @cindex @code{-i}
 Force interactive behavior.  This can be useful for running Octave via a
 remote shell command or inside an Emacs shell buffer.  For another way
 to run Octave within Emacs, see @ref{Emacs}.
 
+@item --no-history
+@itemx -H
+Disable command-line history.
+
 @item --no-init-file
 @cindex @code{--no-init-file}
 Don't read the @file{~/.octaverc} or @file{.octaverc} files.
 
 @item --no-line-editing
 @cindex @code{--no-line-editing}
 Disable command-line editing.
 
@@ -319,22 +323,24 @@ Another set of command-line editing func
 some terminals, you type @kbd{M-u} by holding down @key{META} and
 pressing @key{u}.  If your terminal does not have a @key{META} key, you
 can still type Meta charcters using two-character sequences starting
 with @kbd{ESC}.  Thus, to enter @kbd{M-u}, you could type
 @key{ESC}@key{u}.  The @kbd{ESC} character sequences are also allowed on
 terminals with real Meta keys.  In the following sections, Meta
 characters such as @kbd{Meta-u} are written as @kbd{M-u}.
 
+
 @menu
 * Cursor Motion::               
 * Killing and Yanking::         
 * Commands For Text::           
 * Commands For Completion::     
 * Commands For History::        
+* Customizing @code{readline}::  
 * Customizing the Prompt::      
 * Diary and Echo Commands::     
 @end menu
 
 @node Cursor Motion, Killing and Yanking, Command Line Editing, Command Line Editing
 @subsection Cursor Motion
 
 The following commands allow you to position the cursor.
@@ -494,17 +500,17 @@ complete the names of commands and varia
 @item M-?
 List the possible completions of the text before the cursor.
 @end table
 
 @DOCSTRING(completion_append_char)
 
 @DOCSTRING(completion_matches)
 
-@node Commands For History, Customizing the Prompt, Commands For Completion, Command Line Editing
+@node Commands For History, Customizing @code{readline}, Commands For Completion, Command Line Editing
 @subsection Commands For Manipulating The History
 @cindex command history
 @cindex input history
 @cindex history of commands
 
 Octave normally keeps track of the commands you type so that you can
 recall previous commands to edit or execute them again.  When you exit
 Octave, the most recent commands you have typed, up to the number
@@ -559,17 +565,24 @@ re-running chunks of commands from the h
 @DOCSTRING(EDITOR)
 
 @DOCSTRING(history_file)
 
 @DOCSTRING(history_size)
 
 @DOCSTRING(saving_history)
 
-@node Customizing the Prompt, Diary and Echo Commands, Commands For History, Command Line Editing
+@node Customizing @code{readline}, Customizing the Prompt, Commands For History, Command Line Editing
+@subsection Customizing @code{readline}
+
+@c XXX FIXME XXX -- need a brief description of the ~/.inputrc file here.
+
+@DOCSTRING{read_readline_init_file}
+
+@node Customizing the Prompt, Diary and Echo Commands, Customizing @code{readline}, Command Line Editing
 @subsection Customizing the Prompt
 @cindex prompt customization
 @cindex customizing the prompt
 
 The following variables are available for customizing the appearance of
 the command-line prompts.  Octave allows the prompt to be customized by
 inserting a number of backslash-escaped special characters that are
 decoded as follows:
diff --git a/doc/interpreter/control.txi b/doc/interpreter/control.txi
--- a/doc/interpreter/control.txi
+++ b/doc/interpreter/control.txi
@@ -232,34 +232,36 @@ data structures are given in @ref{sysdis
 @DOCSTRING(sysgetsignals)
 
 @DOCSTRING(sysgettype)
 
 @DOCSTRING(syssetsignals)
 
 @DOCSTRING(sysupdate)
 
+@DOCSTRING(minfo)
+
+@DOCSTRING(sysgettsam)
+
 @node structintern,  , structaccess, sysinterface
 @subsection Data structure internal functions
 
 @DOCSTRING(syschnamesl)
 
 @DOCSTRING(sysdefioname)
 
 @DOCSTRING(sysdefstname)
 
 @DOCSTRING(tf2sysl)
 
 @node sysdisp, blockdiag, sysinterface, Control Theory
 @section System display functions
 
 @DOCSTRING(sysout)
 
-@DOCSTRING(polyout)
-
 @DOCSTRING(tfout)
 
 @DOCSTRING(zpout)
 
 @DOCSTRING(outlist)
 
 @node blockdiag, numerical, sysdisp, Control Theory
 @section Block Diagram Manipulations
@@ -304,23 +306,29 @@ system data structures.
 @DOCSTRING(sysscale)
 
 @DOCSTRING(syssub)
 
 @DOCSTRING(ugain)
 
 @DOCSTRING(wgt1o)
 
+@DOCSTRING(parallel)
+
+@DOCSTRING(sysmin)
+
 @node numerical, sysprop, blockdiag, Control Theory
 @section Numerical Functions
 
 @DOCSTRING(are)
 
 @DOCSTRING(dare)
 
+@DOCSTRING(dre)
+
 @DOCSTRING(dgram)
 
 @DOCSTRING(dlyap)
 
 @DOCSTRING(gram)
 
 @DOCSTRING(lyap)
 
@@ -451,16 +459,18 @@ References:
 @DOCSTRING(h2syn)
 
 @DOCSTRING(hinf_ctr)
 
 @DOCSTRING(hinfsyn)
 
 @DOCSTRING(hinfsyn_chk)
 
+@DOCSTRING(hinfsyn_ric)
+
 @DOCSTRING(lqe)
 
 @DOCSTRING(lqg)
 
 @DOCSTRING(lqr)
 
 @DOCSTRING(lsim)
 
diff --git a/doc/interpreter/data.txi b/doc/interpreter/data.txi
--- a/doc/interpreter/data.txi
+++ b/doc/interpreter/data.txi
@@ -13,16 +13,18 @@ a data structure type.
 It is also possible to define new specialized data types by writing a
 small amount of C++ code.  On some systems, new data types can be loaded
 dynamically while Octave is running, so it is not necessary to recompile
 all of Octave just to add a new type.  @xref{Dynamically Linked
 Functions}, for more information about Octave's dynamic linking
 capabilities.  @ref{User-defined Data Types} describes what you must do
 to define a new data type for Octave.
 
+@DOCSTRING(typeinfo)
+
 @menu
 * Built-in Data Types::         
 * User-defined Data Types::     
 * Object Sizes::                
 @end menu
 
 @node Built-in Data Types, User-defined Data Types, Data Types, Data Types
 @section Built-in Data Types
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -953,16 +953,18 @@ b = s
 @end example
 
 You can use an assignment anywhere an expression is called for.  For
 example, it is valid to write @code{x != (y = 1)} to set @code{y} to 1
 and then test whether @code{x} equals 1.  But this style tends to make
 programs hard to read.  Except in a one-shot program, you should rewrite
 it to get rid of such nesting of assignments.  This is never very hard.
 
+@DOCSTRING(print_rhs_assign_val)
+
 @cindex increment operator
 @cindex decrement operator
 @cindex operators, increment
 @cindex operators, decrement
 
 @node Increment Ops, Operator Precedence, Assignment Ops, Expressions
 @section Increment Operators
 
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -555,20 +555,26 @@ ignore the time stamps for all function 
 else, Octave will check the time stamps on all function files.
 
 @c XXX FIXME XXX -- note about time stamps on files in NFS environments?
 
 @DOCSTRING(DEFAULT_LOADPATH)
 
 @DOCSTRING(LOADPATH)
 
+@DOCSTRING(rehash)
+
+@DOCSTRING(file_in_loadpath)
+
 @DOCSTRING(ignore_function_time_stamp)
 
 @DOCSTRING(warn_function_name_clash)
 
+@DOCSTRING(warn_future_time_stamp)
+
 @node Script Files, Dynamically Linked Functions, Function Files, Functions and Scripts
 @section Script Files
 
 A script file is a file containing (almost) any sequence of Octave
 commands.  It is read and evaluated just as if you had typed each
 command at the Octave prompt, and provides a convenient way to perform a
 sequence of commands that do not logically belong inside a function.
 
@@ -831,32 +837,30 @@ You can now use the @file{oregonator.oct
 
 On a 133 MHz Pentium running Linux, Octave can solve the problem shown
 in @ref{Ordinary Differential Equations}, in about 1.4 seconds using the
 dynamically linked function, compared to about 19 seconds using the
 M-file.  Similar decreases in execution time can be expected for other
 functions, particularly those that rely on functions like @code{lsode}
 that require user-supplied functions.
 
-Just as for M-files, Octave will automatically reload dynamically linked
-functions when the files that define them are more recent than the last
-time that the function was loaded.  Two variables are available to
-control how Octave behaves when dynamically linked functions are cleared
-or reloaded.
-
-@c XXX FIXME XXX -- this variable no longer exists!
-
-@defvr {Built-in Variable} auto_unload_dot_oct_files
-If the value of @code{auto_unload_dot_oct_files} is nonzero, Octave will
-automatically unload any @file{.oct} files when there are no longer any
-functions in the symbol table that reference them.
-@end defvr
+Just as for M-files, Octave will automatically reload a dynamically linked
+function when the file that defines it is more recent than the last
+time that the function was loaded.  If more than one function is defined
+in a single @file{.oct} file, reloading the file may force other
+functions to be cleared and reloaded.  If all the functions loaded from
+a given @file{.oct} file are cleared, Octave will automatically unload
+the @file{.oct} file.
 
 @DOCSTRING(warn_reload_forces_clear)
 
+@c XXX FIXME XXX -- is there a better place for this?
+
+@DOCSTRING(variables_can_hide_functions)
+
 Additional examples for writing dynamically linked functions are
 available in the files in the @file{src} directory of the Octave
 distribution.  Currently, this includes the files
 
 @example
 @group
 balance.cc   fft2.cc      inv.cc       qzval.cc
 chol.cc      filter.cc    log.cc       schur.cc
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -593,17 +593,17 @@ prints @samp{ nowhere } (note the leadin
 @node Formatted Input, Input Conversion Syntax, Other Output Conversions, C-Style I/O Functions
 @subsection Formatted Input
 
 Octave provides the @code{scanf}, @code{fscanf}, and @code{sscanf}
 functions to read formatted input.  There are two forms of each of these
 functions.  One can be used to extract vectors of data from a file, and
 the other is more `C-like'.
 
-DOSTRING(fscanf)
+@DOCSTRING(fscanf)
 
 @DOCSTRING(sscanf)
 
 Calls to @code{scanf} are superficially similar to calls to
 @code{printf} in that arbitrary arguments are read under the control of
 a template string.  While the syntax of the conversion specifications in
 the template is very similar to that for @code{printf}, the
 interpretation of the template is oriented more towards free-format
diff --git a/doc/interpreter/linalg.txi b/doc/interpreter/linalg.txi
--- a/doc/interpreter/linalg.txi
+++ b/doc/interpreter/linalg.txi
@@ -20,16 +20,20 @@ 1989, and in @cite{@sc{Lapack} Users' Gu
 @section Basic Matrix Functions
 
 @DOCSTRING(balance)
 
 @DOCSTRING(cond)
 
 @DOCSTRING(det)
 
+@DOCSTRING(dmult)
+
+@DOCSTRING(dot)
+
 @DOCSTRING(eig)
 
 @DOCSTRING(givens)
 
 @DOCSTRING(inv)
 
 @DOCSTRING(norm)
 
@@ -57,16 +61,22 @@ 1989, and in @cite{@sc{Lapack} Users' Gu
 @DOCSTRING(qz)
 
 @DOCSTRING(qzhess)
 
 @DOCSTRING(schur)
 
 @DOCSTRING(svd)
 
+@c XXX FIXME XXX -- should there be a new section here?
+
+@DOCSTRING(housh)
+
+@DOCSTRING(krylov)
+
 @node Functions of a Matrix,  , Matrix Factorizations, Linear Algebra
 @section Functions of a Matrix
 
 @DOCSTRING(expm)
 
 @DOCSTRING(logm)
 
 @DOCSTRING(sqrtm)
diff --git a/doc/interpreter/matrix.txi b/doc/interpreter/matrix.txi
--- a/doc/interpreter/matrix.txi
+++ b/doc/interpreter/matrix.txi
@@ -45,28 +45,32 @@ all (all (rand (5) < 0.9))
 @noindent
 tests a random 5 by 5 matrix to see if all of its elements are less
 than 0.9.
 
 Note that in conditional contexts (like the test clause of @code{if} and
 @code{while} statements) Octave treats the test as if you had typed
 @code{all (all (condition))}.
 
-@DOCSTRING(common_size)
+@DOCSTRING(xor)
+
+@DOCSTRING(is_duplicate_entry)
 
 @DOCSTRING(diff)
 
 @DOCSTRING(isinf)
 
 @DOCSTRING(isnan)
 
 @DOCSTRING(finite)
 
 @DOCSTRING(find)
         
+@DOCSTRING(common_size)
+
 @node Rearranging Matrices, Special Utility Matrices, Finding Elements and Checking Conditions, Matrix Manipulation
 @section Rearranging Matrices
 
 @DOCSTRING(fliplr)
 
 @DOCSTRING(flipud)
 
 @DOCSTRING(rot90)
@@ -99,16 +103,18 @@ a (i, :)
 @end example
 
 @DOCSTRING(tril)
 
 @DOCSTRING(vec)
 
 @DOCSTRING(vech)
 
+@DOCSTRING(prepad)
+
 @node Special Utility Matrices, Famous Matrices, Rearranging Matrices, Matrix Manipulation
 @section Special Utility Matrices
 
 @DOCSTRING(eye)
 
 @DOCSTRING(ones)
 
 @DOCSTRING(zeros)
@@ -158,16 +164,18 @@ If it is invoked without arguments, @cod
 single element of a random sequence.
 
 The @code{rand} and @code{randn} functions use Fortran code from
 @sc{Ranlib}, a library of fortran routines for random number generation,
 compiled by Barry W. Brown and James Lovato of the Department of
 Biomathematics at The University of Texas, M.D. Anderson Cancer Center,
 Houston, TX 77030.
 
+@DOCSTRING(randperm)
+
 @DOCSTRING(diag)
 
 @c XXX FIXME XXX -- is this really worth documenting?
 @c
 @c DOCSTRING(ok_to_lose_imaginary_part)
 @c 
 @c XXX FIXME XXX -- this is here because it is used by @code{ones},
 @c @code{zeros}, @code{rand}, etc.
@@ -177,16 +185,18 @@ create vectors with evenly or logarithmi
 @xref{Ranges}.
 
 @DOCSTRING(linspace)
 
 @DOCSTRING(logspace)
 
 @DOCSTRING(treat_neg_dim_as_zero)
 
+@DOCSTRING(ok_to_lose_imaginary_part)
+
 @node Famous Matrices,  , Special Utility Matrices, Matrix Manipulation
 @section Famous Matrices
 
 The following functions return famous matrix forms.
 
 @DOCSTRING(hankel)
 
 @DOCSTRING(hilb)
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -63,16 +63,17 @@ parse error:
 @end example
 
 You may also use @samp{j}, @samp{I}, or @samp{J} in place of the
 @samp{i} above.  All four forms are equivalent.
 
 @menu
 * Matrices::                    
 * Ranges::                      
+* Logical Values::              
 * Predicates for Numeric Objects::  
 @end menu
 
 @node Matrices, Ranges, Numeric Data Types, Numeric Data Types
 @section Matrices
 @cindex matrices
 
 @opindex [
@@ -219,16 +220,18 @@ valid expression
 
 For clarity, it is probably best to always use commas and semicolons to
 separate matrix elements and rows.  It is possible to enforce this style
 by setting the built-in variable @code{whitespace_in_literal_matrix} to
 @code{"ignore"}.
 
 @DOCSTRING(whitespace_in_literal_matrix)
 
+@DOCSTRING(warn_separator_insert)
+
 When you type a matrix or the name of a variable whose value is a
 matrix, Octave responds by printing the matrix in with neatly aligned
 rows and columns.  If the rows of the matrix are too large to fit on the
 screen, Octave splits the matrix and displays a header before each
 section to indicate which columns are being displayed.  You can use the
 following variables to control the format of the output.
 
 @DOCSTRING(output_max_field_width)
@@ -319,17 +322,17 @@ an error.
 @DOCSTRING(empty_list_elements_ok)
 
 When Octave parses a matrix expression, it examines the elements of the
 list to determine whether they are all constants.  If they are, it
 replaces the list with a single matrix constant.
 
 @DOCSTRING(propagate_empty_matrices)
 
-@node Ranges, Predicates for Numeric Objects, Matrices, Numeric Data Types
+@node Ranges, Logical Values, Matrices, Numeric Data Types
 @section Ranges
 @cindex range expressions
 @cindex expression, range
 
 @opindex :
 
 A @dfn{range} is a convenient way to write a row vector with evenly
 spaced elements.  A range expression is defined by the value of the first
@@ -366,20 +369,35 @@ Octave uses floating point arithmetic to
 range.  If it is important to include the endpoints of a range and the
 number of elements is known, you should use the @code{linspace} function
 instead (@pxref{Special Utility Matrices}).
 
 When Octave parses a range expression, it examines the elements of the
 expression to determine whether they are all constants.  If they are, it
 replaces the range expression with a single range constant.
 
-@node Predicates for Numeric Objects,  , Ranges, Numeric Data Types
+@node Logical Values, Predicates for Numeric Objects, Ranges, Numeric Data Types
+@section Logical Values
+
+@DOCSTRING(true)
+
+@DOCSTRING(false)
+
+@node Predicates for Numeric Objects,  , Logical Values, Numeric Data Types
 @section Predicates for Numeric Objects
 
+@DOCSTRING(isnumeric)
+
+@DOCSTRING(isreal)
+
+@DOCSTRING(is_complex)
+
 @DOCSTRING(is_matrix)
 
 @DOCSTRING(is_vector)
 
 @DOCSTRING(is_scalar)
 
 @DOCSTRING(is_square)
 
 @DOCSTRING(is_symmetric)
+
+@DOCSTRING(is_bool)
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -1,13 +1,13 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
-@node Plotting, Matrix Manipulation, Input and Output, Top
+@node Plotting
 @chapter Plotting
 
 All of Octave's plotting functions use @code{gnuplot} to handle the
 actual graphics.  There are two low-level functions, @code{gplot} and
 @code{gsplot}, that behave almost exactly like the corresponding
 @code{gnuplot} functions @code{plot} and @code{splot}.  A number of
 other higher level plotting functions, patterned after the graphics
 functions found in @sc{Matlab} version 3.5, are also available.
@@ -15,16 +15,18 @@ These higher level functions are all imp
 low-level plotting functions.
 
 @menu
 * Two-Dimensional Plotting::    
 * Specialized Two-Dimensional Plots::  
 * Three-Dimensional Plotting::  
 * Plot Annotations::            
 * Multiple Plots on One Page::  
+* Multiple Plot Windows::       
+* Interaction with @code{gnuplot}::  
 @end menu
 
 @node Two-Dimensional Plotting, Specialized Two-Dimensional Plots, Plotting, Plotting
 @section Two-Dimensional Plotting
 
 @deffn {Command} gplot @var{ranges} @var{expression} @var{using} @var{title} @var{style}
 Generate a 2-dimensional plot.
 
@@ -181,16 +183,18 @@ The @sc{Matlab}-style two-dimensional pl
 @DOCSTRING(plot)
 
 @DOCSTRING(hold)
 
 @DOCSTRING(ishold)
 
 @DOCSTRING(clearplot)
 
+@DOCSTRING(shg)
+
 @DOCSTRING(closeplot)
 
 @DOCSTRING(purge_tmp_files)
 
 @DOCSTRING(axis)
 
 @node Specialized Two-Dimensional Plots, Three-Dimensional Plotting, Two-Dimensional Plotting, Plotting
 @section Specialized Two-Dimensional Plots
@@ -285,36 +289,32 @@ 1 3 1 2 3 4 3 3 7
 @noindent
 but not @code{rand (5, 30)}.
 @end deffn
 
 The @sc{Matlab}-style three-dimensional plotting commands are:
 
 @DOCSTRING(mesh)
 
-@DOCSTRING(meshdom)
-
-@DOCSTRING(gnuplot_binary)
+@DOCSTRING(meshgrid)
 
-@DOCSTRING(gnuplot_has_frames)
-
-@DOCSTRING(figure)
-
-@DOCSTRING(gnuplot_has_multiplot)
+@DOCSTRING(meshdom)
 
 @node Plot Annotations, Multiple Plots on One Page, Three-Dimensional Plotting, Plotting
 @section Plot Annotations
 
 @DOCSTRING(grid)
 
 @DOCSTRING(title)
 
+@DOCSTRING(bottom_title)
+
 @DOCSTRING(xlabel)
 
-@node Multiple Plots on One Page,  , Plot Annotations, Plotting
+@node Multiple Plots on One Page, Multiple Plot Windows, Plot Annotations, Plotting
 @section Multiple Plots on One Page
 
 The following functions all require a version of @code{gnuplot} that
 supports the multiplot feature.
 
 @DOCSTRING(mplot)
 
 @DOCSTRING(multiplot)
@@ -323,8 +323,40 @@ supports the multiplot feature.
 
 @DOCSTRING(plot_border)
 
 @DOCSTRING(subplot)
 
 @DOCSTRING(subwindow)
 
 @DOCSTRING(top_title)
+
+@node Multiple Plot Windows, Interaction with @code{gnuplot}, Multiple Plots on One Page, Plotting
+@section Multiple Plot Windows
+
+@DOCSTRING(figure)
+
+@node Interaction with @code{gnuplot},  , Multiple Plot Windows, Plotting
+@section Interaction with @code{gnuplot}
+
+@DOCSTRING(gnuplot_binary)
+
+@DOCSTRING(gnuplot_has_frames)
+
+@DOCSTRING(gnuplot_has_multiplot)
+
+@DOCSTRING(graw)
+
+@DOCSTRING(gnuplot_command_plot)
+
+@DOCSTRING(gnuplot_command_replot)
+
+@DOCSTRING(gnuplot_command_splot)
+
+@DOCSTRING(gnuplot_command_using)
+
+@DOCSTRING(gnuplot_command_with)
+
+@DOCSTRING(gnuplot_command_axes)
+
+@DOCSTRING(gnuplot_command_title)
+
+@DOCSTRING(gnuplot_command_end)
diff --git a/doc/interpreter/poly.txi b/doc/interpreter/poly.txi
--- a/doc/interpreter/poly.txi
+++ b/doc/interpreter/poly.txi
@@ -55,8 +55,10 @@ p(x) = @var{c}(1) x^@var{N} + ... + @var
 
 @DOCSTRING(polyval)
 
 @DOCSTRING(polyvalm)
 
 @DOCSTRING(residue)
 
 @DOCSTRING(roots)
+
+@DOCSTRING(polyout)
diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -121,16 +121,18 @@ Data Types}, for more information about 
 
 @node Creating Strings, Searching and Replacing, Strings, Strings
 @section Creating Strings
 
 @DOCSTRING(blanks)
 
 @DOCSTRING(int2str)
 
+@DOCSTRING(com2str)
+
 @DOCSTRING(setstr)
 
 @DOCSTRING(strcat)
 
 @DOCSTRING(string_fill_char)
 
 @DOCSTRING(str2mat)
 
@@ -169,22 +171,26 @@ Data Types}, for more information about 
 @DOCSTRING(str2num)
 
 @DOCSTRING(toascii)
 
 @DOCSTRING(tolower)
 
 @DOCSTRING(toupper)
 
+@DOCSTRING(do_string_escapes)
+
 @DOCSTRING(undo_string_escapes)
 
 @DOCSTRING(implicit_num_to_str_ok)
 
 @DOCSTRING(implicit_str_to_num_ok)
 
+@DOCSTRING(warn_single_quote_string)
+
 @node Character Class Functions,  , String Conversions, Strings
 @section Character Class Functions
 
 Octave also provides the following character class test functions
 patterned after the functions in the standard C library.  They all
 operate on string arrays and return matrices of zeros and ones.
 Elements that are nonzero indicate that the condition was true for the
 corresponding character in the string array.  For example,
diff --git a/doc/interpreter/system.txi b/doc/interpreter/system.txi
--- a/doc/interpreter/system.txi
+++ b/doc/interpreter/system.txi
@@ -128,16 +128,18 @@ about the status of files.
 @DOCSTRING(mkfifo)
 
 @DOCSTRING(umask)
 
 @DOCSTRING(stat)
 
 @DOCSTRING(glob)
 
+@DOCSTRING(fnmatch)
+
 @DOCSTRING(file_in_path)
 
 @DOCSTRING(tilde_expand)
 
 @node Controlling Subprocesses, Process ID Information, Filesystem Utilities, System Utilities
 @section Controlling Subprocesses
 
 Octave includes some high-level commands like @code{system} and
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -133,16 +133,18 @@ the expression
 f (x)
 @end example
 
 @noindent
 will display the value of @code{x} from inside the function as 0,
 but the value of @code{x} at the top level remains unchanged, because
 the function works with a @emph{copy} of its argument.
 
+@DOCSTRING(initialize_global_variables)
+
 @DOCSTRING(default_global_variable_value)
 
 @DOCSTRING(is_global)
 
 @node Status of Variables, Summary of Built-in Variables, Global Variables, Variables
 @section Status of Variables
 
 @DOCSTRING(clear)
@@ -219,21 +221,16 @@ Default value: @code{"\s:\#> "}.
 
 Default value: @code{"> "}.
 
 @item PS4
 @xref{Customizing the Prompt}.
 
 Default value: @code{"+ "}.
 
-@item auto_unload_dot_oct_files
-@xref{Dynamically Linked Functions}.
-
-Default value: 0.
-
 @item automatic_replot
 @xref{Two-Dimensional Plotting}.
 
 Default value: 0.
 
 @item beep_on_error
 @xref{Error Handling}.
 
diff --git a/scripts/elfun/acot.m b/scripts/elfun/acot.m
--- a/scripts/elfun/acot.m
+++ b/scripts/elfun/acot.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Mapping Function} {} acot (@var{X})
-## acot (X): compute the inverse cotangent of X for each element of X
+## @deftypefn {Mapping Function} {} acot (@var{x})
+## Compute the inverse cotangent of each element of @var{x}.
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = acot (z)
 
   if (nargin != 1)
     usage ("acot (z)");
diff --git a/scripts/elfun/acoth.m b/scripts/elfun/acoth.m
--- a/scripts/elfun/acoth.m
+++ b/scripts/elfun/acoth.m
@@ -12,17 +12,20 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## acoth (z):  compute the inverse hyperbolic cotangent for each element of z.
+## -*- texinfo -*-
+## @deftypefn {Mapping Function} acoth (@var{x})
+## Compute the inverse hyperbolic cotangent of each element of @var{x}.
+## @end deftypefn
 
 ## Author: jwe
 
 function w = acoth (z)
 
   if (nargin != 1)
     usage ("acoth (z)");
   endif
diff --git a/scripts/elfun/acsc.m b/scripts/elfun/acsc.m
--- a/scripts/elfun/acsc.m
+++ b/scripts/elfun/acsc.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Mapping Function} {} acsc (@var{X})
-## acsc (X): compute the inverse cosecant of X for each element of X
+## @deftypefn {Mapping Function} {} acsc (@var{x})
+## Compute the inverse cosecant of each element of @var{x}.
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = acsc (z)
 
   if (nargin != 1)
     usage ("acsc (z)");
diff --git a/scripts/elfun/acsch.m b/scripts/elfun/acsch.m
--- a/scripts/elfun/acsch.m
+++ b/scripts/elfun/acsch.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Mapping Function} {} acsch (@var{X})
-## acsch (X): compute the inverse hyperbolic for each element of X
+## @deftypefn {Mapping Function} {} acsch (@var{x})
+## Compute the inverse hyperbolic cosecant of each element of @var{x}.
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = acsch (z)
 
   if (nargin != 1)
     usage ("acsch (z)");
diff --git a/scripts/elfun/asec.m b/scripts/elfun/asec.m
--- a/scripts/elfun/asec.m
+++ b/scripts/elfun/asec.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Mapping Function} {} asec (@var{X})
-## asec (X): compute the inverse secant of X for each element of X
+## @deftypefn {Mapping Function} {} asec (@var{x})
+## Compute the inverse secant of each element of @var{x}.
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = asec (z)
 
   if (nargin != 1)
     usage ("asec (z)");
diff --git a/scripts/elfun/asech.m b/scripts/elfun/asech.m
--- a/scripts/elfun/asech.m
+++ b/scripts/elfun/asech.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Mapping Function} {} asech (@var{X})
-## asech (X): compute the inverse hyperbolic secant of X for each element of X
+## @deftypefn {Mapping Function} {} asech (@var{x})
+## Compute the inverse hyperbolic secant of each element of @var{x}.
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = asech (z)
 
   if (nargin != 1)
     usage ("acosh (z)");
diff --git a/scripts/elfun/cot.m b/scripts/elfun/cot.m
--- a/scripts/elfun/cot.m
+++ b/scripts/elfun/cot.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Mapping Function} {} cot (@var{X})
-## cot (X): compute the cotangent of X for each element of X
+## @deftypefn {Mapping Function} {} cot (@var{x})
+## Compute the cotangent of each element of @var{x}.
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = cot (z)
 
   if (nargin != 1)
     usage ("cot (z)");
diff --git a/scripts/elfun/coth.m b/scripts/elfun/coth.m
--- a/scripts/elfun/coth.m
+++ b/scripts/elfun/coth.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Mapping Function} {} coth (@var{X})
-## coth (X): compute the hyperbolic cotangent of X for each element of X
+## @deftypefn {Mapping Function} {} coth (@var{x})
+## Compute the hyperbolic cotangent of each element of @var{x}.
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = coth (z)
 
   if (nargin != 1)
     usage ("coth (z)");
diff --git a/scripts/elfun/csc.m b/scripts/elfun/csc.m
--- a/scripts/elfun/csc.m
+++ b/scripts/elfun/csc.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Mapping Function} {} csc (@var{X})
-## csc (X): compute the cosecant of X for each element of X
+## @deftypefn {Mapping Function} {} csc (@var{x})
+## Compute the cosecant of each element of @var{x}.
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = csc (z)
 
   if (nargin != 1)
     usage ("csc (z)");
diff --git a/scripts/elfun/csch.m b/scripts/elfun/csch.m
--- a/scripts/elfun/csch.m
+++ b/scripts/elfun/csch.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Mapping Function} {} csch (@var{X})
-## csch (X): compute the hyperbolic cosecant of X for each element of X
+## @deftypefn {Mapping Function} {} csch (@var{x})
+## Compute the hyperbolic cosecant of each element of @var{x}.
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = csch (z)
 
   if (nargin != 1)
     usage ("csch (z)");
diff --git a/scripts/elfun/sec.m b/scripts/elfun/sec.m
--- a/scripts/elfun/sec.m
+++ b/scripts/elfun/sec.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Mapping Function} {} sec (@var{X})
-## sec (X): compute the secant of X for each element of X
+## @deftypefn {Mapping Function} {} sec (@var{x})
+## Compute the secant of each element of @var{x}.
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = sec (z)
 
   if (nargin != 1)
     usage ("sec (z)");
diff --git a/scripts/elfun/sech.m b/scripts/elfun/sech.m
--- a/scripts/elfun/sech.m
+++ b/scripts/elfun/sech.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Mapping Function} {} sech (@var{X})
-## sech (X): compute the hyperbolic secant of X for each element of X
+## @deftypefn {Mapping Function} {} sech (@var{x})
+## Compute the hyperbolic secant of each element of @var{x}.
 ## @end deftypefn
 
 ## Author: jwe
 
 function w = sech (z)
 
 if (nargin != 1)
     usage ("sech (z)");
diff --git a/scripts/general/postpad.m b/scripts/general/postpad.m
--- a/scripts/general/postpad.m
+++ b/scripts/general/postpad.m
@@ -12,31 +12,23 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## postpad (x, l)
-##
-## Appends zeros to the vector x until it is of length l.
-## postpad (x, l, c) appends the constant c instead of zero.
-##
-## If length (x) > l, elements from the end of x are removed
-## until a vector of length l is obtained.
+## See prepad.
+
+## Author: Tony Richardson <arichard@stark.cc.oh.us>
+## Created: June 1994
 
 function y = postpad (x, l, c)
 
-  ## Author:
-  ##  Tony Richardson
-  ##  arichard@stark.cc.oh.us
-  ##  June 1994
-
   if (nargin == 2)
     c = 0;
   elseif (nargin < 2 || nargin > 3)
     usage ("postpad (x, l) or postpad (x, l, c)");
   endif
 
   if (! is_vector (x))
     error ("first argument must be a vector");
diff --git a/scripts/general/prepad.m b/scripts/general/prepad.m
--- a/scripts/general/prepad.m
+++ b/scripts/general/prepad.m
@@ -12,31 +12,33 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## prepad (x, l)
+## -*- texinfo -*-
+## @deftypefn {Function File} {@var{x} =} prepad (@var{x}, @var{l}, @var{c})
+## @deftypefnx {Function File} {@var{x} =} postpad (@var{x}, @var{l}, @var{c})
 ##
-## Prepends zeros to the vector x until it is of length l.
-## prepad(x,l,c) prepends the constant c instead of zero.
+## Prepends (appends) the scalar value @var{c} to the vector @var{x}
+## until it is of length @var{l}.  If the third argument is not
+## supplied, a value of 0 is used.
 ##
-## If length (x) > l, elements from the beginning of x are removed
-## until a vector of length l is obtained.
+## If @code{length (x) > l}, elements from the beginning (end) of
+## @var{x} are removed until a vector of length l is obtained.
+## @end deftypefn
+
+## Author: Tony Richardson <arichard@stark.cc.oh.us>
+## Created: June 1994
 
 function y = prepad (x, l, c)
 
-  ## Author:
-  ##  Tony Richardson
-  ##  arichard@stark.cc.oh.us
-  ##  June 1994
-
   if (nargin == 2)
     c = 0;
   elseif (nargin < 2 || nargin > 3)
     usage ("prepad (x, l) or prepad (x, l, c)");
   endif
 
   if (! is_vector (x))
     error ("first argument must be a vector");
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,14 +1,17 @@
 2000-01-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* parse.y (gobble_leading_whitespace): Discard first space character
 	after consecutive comment characters.
 	* lex.l (grab_help_text): Ditto.
 
+	* lex.l (Vwhitespace_in_literal_matrix, Vwarn_separator_insert,
+	Vwarn_single_quote_string): Texinfoize doc string.
+
 2000-01-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov.h, ov.cc (octave_value::column_vector_value,
 	octave_value::row_vector_value,
 	octave_value::complex_column_vector_value,
 	octave_value::complex_row_vector_value): New functions.
 	(octave_value::vector_value): Now returns Array<double>.
 	(octave_value::complex_vector_value): Now returns Array<Complex>.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -156,17 +156,21 @@ map_m_m (d_dd_fcn f, const Matrix& x, co
   for (int j = 0; j < x_nc; j++)
     for (int i = 0; i < x_nr; i++)
       retval (i, j) = f (x (i, j), y (i, j));
 
   return retval;
 }
 
 DEFUN (atan2, args, ,
-  "atan2 (Y, X): atan (Y / X) in range -pi to pi")
+  "-*- texinfo -*-\n\
+@deftypefn {Mapping Function} {} atan2 (@var{y}, @var{x})\n\
+Compute atan (@var{y} / @var{x}) for corresponding elements of @var{y}\n\
+and @var{x}.  The result is in range -pi to pi.\n\
+@deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 2 && args(0).is_defined () && args(1).is_defined ())
     {
       octave_value arg_y = args(0);
@@ -242,17 +246,20 @@ DEFUN (atan2, args, ,
     }
   else
     print_usage ("atan2");
 
   return retval;
 }
 
 DEFUN (cumprod, args, ,
-  "cumprod (X): cumulative products")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} cumprod (@var{x})\n\
+Cumulative products.\n\
+@end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       octave_value arg = args(0);
@@ -279,17 +286,20 @@ DEFUN (cumprod, args, ,
     }
   else
     print_usage ("cumprod");
 
   return retval;
 }
 
 DEFUN (cumsum, args, ,
-  "cumsum (X): cumulative sums")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} cumsum (@var{x})\n\
+Cumulative sums.\n\
+@end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       octave_value arg = args(0);
@@ -550,17 +560,20 @@ diag ([1, 2, 3], 1)\n\
     retval = make_diag (args(0), args(1));
   else
     print_usage ("diag");
 
   return retval;
 }
 
 DEFUN (prod, args, ,
-  "prod (X): products")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} prod (@var{x})\n\
+Products.\n\
+@end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       octave_value arg = args(0);
@@ -687,17 +700,20 @@ returns the number of columns in the giv
     }
   else
     print_usage ("size");
 
   return retval;
 }
 
 DEFUN (sum, args, ,
-  "sum (X): sum of elements")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} sum (@var{x})\n\
+Sum of elements.\n\
+@end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       octave_value arg = args(0);
@@ -724,23 +740,26 @@ DEFUN (sum, args, ,
     }
   else
     print_usage ("sum");
 
   return retval;
 }
 
 DEFUN (sumsq, args, ,
-  "sumsq (X): sum of squares of elements.\n\
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} sumsq (@var{x})\n\
+Sum of squares of elements.\n\
 \n\
 This function is equivalent to computing\n\
 \n\
   sum (X .* conj (X))\n\
 \n\
-but it uses less memory and avoids calling conj if X is real.")
+but it uses less memory and avoids calling conj if X is real.\n\
+@end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       octave_value arg = args(0);
@@ -767,45 +786,54 @@ but it uses less memory and avoids calli
     }
   else
     print_usage ("sumsq");
 
   return retval;
 }
 
 DEFUN (is_bool, args, ,
-  "is_bool (x): return nonzero if x is a boolean object")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Functio} {} is_bool (@var{x})\n\
+Return true if @var{x} is a boolean object.\n\
+@deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).is_bool_type ();
   else
     print_usage ("is_bool");
 
   return retval;
 }
 
 DEFALIAS (islogical, is_bool);
 
 DEFUN (is_complex, args, ,
-  "is_complex (x): return nonzero if x is a complex-valued numeric object")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} is_complex (@var{x})\n\
+Return true if @var{x} is a complex-valued numeric object.\n\
+@end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).is_complex_type ();
   else
     print_usage ("is_complex");
 
   return retval;
 }
 
 DEFUN (isreal, args, ,
-  "isreal (x): return nonzero if x is a real-valued numeric object")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} isreal (@var{x})\n\
+Return true if @var{x} is a real-valued numeric object.\n\
+@end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).is_real_type ();
   else
     print_usage ("isreal");
 
@@ -832,30 +860,36 @@ the number of columns, or both are zero)
     }
   else
     print_usage ("isempty");
 
   return retval;
 }
 
 DEFUN (isnumeric, args, ,
-  "isnumeric (x): return nonzero if x is a numeric object")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} isnumeric (@var{x})\n\
+Return nonzero if @var{x} is a numeric object.\n\
+@end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).is_numeric_type ();
   else
     print_usage ("isnumeric");
 
   return retval;
 }
 
 DEFUN (is_list, args, ,
-  "is_list (x): return nonzero if x is a list")
+  "-*- texinfo -*-\n
+@deftypefn {Built-in Function} {} is_list (@var{x})\n\
+Return nonzero if @var{x} is a list.\n\
+@end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).is_list ();
   else
     print_usage ("is_list");
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -2284,24 +2284,34 @@ whitespace_in_literal_matrix (void)
 
   return 0;
 }
 
 void
 symbols_of_lex (void)
 {
   DEFVAR (warn_separator_insert, 0.0, warn_separator_insert,
-    "print warning if commas or semicolons that might be inserted\n\
-automatically in literal matrices");
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} warn_separator_insert\n\
+Print warning if commas or semicolons that might be inserted\n\
+automatically in literal matrices.\n\
+@end defvr");
 
   DEFVAR (warn_single_quote_string, 0.0, warn_single_quote_string,
-    "print warning if a signle quote character is used to introduce a\n\
- string constant");
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} warn_single_quote_string\n\
+Print warning if a signle quote character is used to introduce a\n\
+string constant.\n\
+@end defvr");
 
   DEFVAR (whitespace_in_literal_matrix, "", whitespace_in_literal_matrix,
-    "control auto-insertion of commas and semicolons in literal matrices");
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} whitespace_in_literal_matrix\n\
+Control auto-insertion of commas and semicolons in literal matrices.\n\
+@end defvr");
+
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -151,24 +151,24 @@ For example,\n\
 abs (3 + 4i)\n\
      @result{} 5\n\
 @end group\n\
 @end example\n\
 @end deftypefn");
 
   DEFUN_MAPPER (acos, 0, 0, 0, acos, 0, acos, -1.0, 1.0, 1,
     "-*- texinfo -*-\n\
-@deftypefn {Mapping Function} {} acos (@var{X})\n\
-acos (X): compute the inverse cosine of X for each element of X\n\
+@deftypefn {Mapping Function} {} acos (@var{x})\n\
+Compute the inverse cosine of each element of @var{x}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (acosh, 0, 0, 0, acosh, 0, acosh, 1.0, DBL_MAX, 1,
     "-*- texinfo -*-\n\
-@deftypefn {Mapping Function} {} acosh (@var{X})\n\
-acosh (X): compute the inverse hyperbolic cosine of X for each element of X.\n\
+@deftypefn {Mapping Function} {} acosh (@var{x})\n\
+Compute the inverse hyperbolic cosine of each element of @var{x}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (angle, 0, 0, 0, arg, arg, 0, 0.0, 0.0, 0,
     "See arg.");
 
   DEFUN_MAPPER (arg, 0, 0, 0, arg, arg, 0, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} angle (@var{z})\n\
@@ -192,36 +192,36 @@ For example,\n\
 arg (3 + 4i)\n\
      @result{} 0.92730\n\
 @end group\n\
 @end example\n\
 @end deftypefn");
 
   DEFUN_MAPPER (asin, 0, 0, 0, asin, 0, asin, -1.0, 1.0, 1,
     "-*- texinfo -*-\n\
-@deftypefn {Mapping Function} {} asin (@var{X})\n\
-asin (X): compute inverse sin (X) for each element of X\n\
+@deftypefn {Mapping Function} {} asin (@var{x})\n\
+Compute the inverse sine of each element of @var{x}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (asinh, 0, 0, 0, asinh, 0, asinh, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
-@deftypefn {Mapping Function} {} asinh (@var{X})\n\
-asinh (X): compute the inverse hyperbolic sin (X) for each element of X\n\
+@deftypefn {Mapping Function} {} asinh (@var{x})\n\
+Ompute the inverse hyperbolic sine of each element of @var{x}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (atan, 0, 0, 0, atan, 0, atan, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
-@deftypefn {Mapping Function} {} atan (@var{X})\n\
-atan (X): compute the inverse tangent of (X) for each element of X\n\
+@deftypefn {Mapping Function} {} atan (@var{x})\n\
+Compute the inverse tangent of each element of @var{x}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (atanh, 0, 0, 0, atanh, 0, atanh, -1.0, 1.0, 1,
     "-*- texinfo -*-\n\
-@deftypefn {Mapping Function} {} atanh (@var{X})\n\
-atanh (X): compute the inverse hyperbolic tanget of X for each element of X\n\
+@deftypefn {Mapping Function} {} atanh (@var{x})\n\
+Compute the inverse hyperbolic tanget of each element of @var{x}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (ceil, 0, 0, 0, ceil, 0, ceil, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} ceil (@var{x})\n\
 Return the smallest integer not less than @var{x}.  If @var{x} is\n\
 complex, return @code{ceil (real (@var{x})) + ceil (imag (@var{x})) * I}.\n\
 @end deftypefn");
@@ -238,24 +238,24 @@ Return the complex conjugate of @var{z},
 @ifinfo\n\
 @code{conj (@var{z})} = @var{x} - @var{i}@var{y}.\n\
 @end ifinfo\n\
 @end deftypefn\n\
 @seealso{real and imag}");
 
   DEFUN_MAPPER (cos, 0, 0, 0, cos, 0, cos, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
-@deftypefn {Mapping Function} {} cos (@var{X})\n\
-cos (X): compute the cosine of X for each element of X\n\
+@deftypefn {Mapping Function} {} cos (@var{x})\n\
+Compute the cosine of each element of @var{x}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (cosh, 0, 0, 0, cosh, 0, cosh, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
-@deftypefn {Mapping Function} {} acosh (@var{X})\n\
-acosh (X): compute the inverse hyperbolic cosine of X for each element of X\n\
+@deftypefn {Mapping Function} {} cosh (@var{x})\n\
+Compute the hyperbolic cosine of each element of @var{x}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (erf, 0, 0, 0, xerf, 0, 0, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} erf (@var{z})\n\
 Computes the error function,\n\
 @iftex\n\
 @tex\n\
@@ -522,44 +522,44 @@ sign (x) =  0, x = 0;\n\
 @end example\n\
 @end ifinfo\n\
 \n\
 For complex arguments, @code{sign} returns @code{x ./ abs (@var{x})}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (sin, 0, 0, 0, sin, 0, sin, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
-@deftypefn {Mapping Function} {} sin (@var{X})\n\
-sin (X): compute the sin of X for each element of X\n\
+@deftypefn {Mapping Function} {} sin (@var{x})\n\
+Compute the sin of each element of @var{x}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (sinh, 0, 0, 0, sinh, 0, sinh, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
-@deftypefn {Mapping Function} {} sinh (@var{X})\n\
-sinh (X): compute the inverse hyperbolic sin of X for each element of X\n\
+@deftypefn {Mapping Function} {} sinh (@var{x})\n\
+Compute the inverse hyperbolic sin of each element of @var{x}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (sqrt, 0, 0, 0, sqrt, 0, sqrt, 0.0, DBL_MAX, 1,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} sqrt (@var{x})\n\
 Compute the square root of @var{x}.  If @var{x} is negative, a complex\n\
 result is returned.  To compute the matrix square root, see\n\
 @ref{Linear Algebra}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (tan, 0, 0, 0, tan, 0, tan, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} tan (@var{z})\n\
-tan (X): compute tanget of X for each element of X\n\
+Compute tanget of each element of @var{x}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (tanh, 0, 0, 0, tanh, 0, tanh, 0.0, 0.0, 0,
     "-*- texinfo -*-\n\
-@deftypefn {Mapping Function} {} tanh (@var{X})\n\
-tanh (X): compute hyperbolic tangent of X for each element of X\n\
+@deftypefn {Mapping Function} {} tanh (@var{x})\n\
+Compute hyperbolic tangent of each element of @var{x}.\n\
 @end deftypefn");
 
   DEFUN_MAPPER (toascii, xtoascii, 0, 0, 0, 0, 0, 0.0, 0.0, 1,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} toascii (@var{s})\n\
 Return ASCII representation of @var{s} in a matrix.  For example,\n\
 \n\
 @example\n\
