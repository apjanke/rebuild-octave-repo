# HG changeset patch
# User Rik <rik@octave.org>
# Date 1387002931 28800
#      Fri Dec 13 22:35:31 2013 -0800
# Node ID 647d806868ee1973fea56ae15be7bdcc7e57975a
# Parent  8ca7b1906a41506cfc1b1cc95fe595aa79549606
Color patch face based upon first vertex (bug #40247).

* gl-render.cc (opengl_renderer::patch_tesselator::vertex): Only set per-vertex
color if "interp" is set.  Use GL_DIFFUSE when setting diffuse lighting (was
inccorrectly GL_AMBIENT).

* gl-render.cc (draw_patch): If using "flat" shading and no "facecolor"
specified then choose the color from the first vertex.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -437,34 +437,34 @@ protected:
       = reinterpret_cast<vertex_data::vertex_data_rep *> (data);
     //printf ("patch_tesselator::vertex (%g, %g, %g)\n", v->coords(0), v->coords(1), v->coords(2));
 
     // FIXME: why did I need to keep the first vertex of the face
     // in JHandles? I think it's related to the fact that the
     // tessellation process might re-order the vertices, such that
     // the first one you get here might not be the first one of the face;
     // but I can't figure out the actual reason.
-    if (color_mode > 0 && (first || color_mode == 2))
+    if (color_mode == 2)
       {
         Matrix col = v->color;
 
         if (col.numel () == 3)
           {
             glColor3dv (col.data ());
             if (light_mode > 0)
               {
                 float buf[4] = { 0, 0, 0, 1 };
 
                 for (int k = 0; k < 3; k++)
                   buf[k] = (v->ambient * col(k));
                 glMaterialfv (LIGHT_MODE, GL_AMBIENT, buf);
 
                 for (int k = 0; k < 3; k++)
                   buf[k] = (v->diffuse * col(k));
-                glMaterialfv (LIGHT_MODE, GL_AMBIENT, buf);
+                glMaterialfv (LIGHT_MODE, GL_DIFFUSE, buf);
               }
           }
       }
 
     if (light_mode > 0 && (first || light_mode == 2))
       glNormal3dv (v->normal.data ());
 
     glVertex3dv (v->coords.data ());
@@ -2332,17 +2332,48 @@ opengl_renderer::draw_patch (const patch
           for (int i = 0; i < nf; i++)
             {
               if (clip_f(i))
                 continue;
 
               tess.begin_polygon (true);
               tess.begin_contour ();
 
-              for (int j = 0; j < count_f(i); j++)
+              if (count_f(i) > 0)
+                {
+                  vertex_data::vertex_data_rep *vv = vdata[i].get_rep ();
+
+                  if (fc_mode == 1)
+                    {
+                      // For "flat" shading, use color of 1st vertex.
+                      Matrix col = vv->color;
+
+                      if (col.numel () == 3)
+                        {
+                          glColor3dv (col.data ());
+                          if (fl_mode > 0)
+                            {
+                              float cb[4] = { 0, 0, 0, 1 };
+
+                              for (int k = 0; k < 3; k++)
+                                cb[k] = (vv->ambient * col(k));
+                              glMaterialfv (LIGHT_MODE, GL_AMBIENT, cb);
+
+                              for (int k = 0; k < 3; k++)
+                                cb[k] = (vv->diffuse * col(k));
+                              glMaterialfv (LIGHT_MODE, GL_DIFFUSE, cb);
+                            }
+                        }
+                    }
+
+                  tess.add_vertex (vv->coords.fortran_vec (), vv);
+                }
+
+              // Add remaining vertices.
+              for (int j = 1; j < count_f(i); j++)
                 {
                   vertex_data::vertex_data_rep *vv = vdata[i+j*fr].get_rep ();
 
                   tess.add_vertex (vv->coords.fortran_vec (), vv);
                 }
 
               tess.end_contour ();
               tess.end_polygon ();
