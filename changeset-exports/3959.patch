# HG changeset patch
# User jwe
# Date 1022263097 0
#      Fri May 24 17:58:17 2002 +0000
# Node ID 5a848097fe4a8d1c7e153cb03ca5aa738aed155a
# Parent  b88e01ad515e4d700b4559594ff4f3d39f516ac0
[project @ 2002-05-24 17:58:16 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2002-05-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* LSODE.cc (LSODE::error_message): New function.
+	* LSODE.h: Provide decl.
+	(LSODE::integration_state): New function.
+	(LSODE::integration_ok): New function.
+
 2002-05-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* LSODE.cc (LSODE_options::x_integration_method): New data member.
 	(LSODE_options::set_integration_method,
 	LSODE_options::integration_method): New functions.
 
 	* LSODE.h (LSODE_options::x_absolute_tolerance): Now Array<double>.
 	Change all uses.
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -311,23 +311,17 @@ LSODE::do_integrate (double tout)
 	case -13: // Return requested in user-supplied function.
 	case -6:  // error weight became zero during problem. (solution
 	          // component i vanished, and atol or atol(i) = 0.)
 	case -5:  // repeated convergence failures (perhaps bad jacobian
 	          // supplied or wrong choice of mf or tolerances).
 	case -4:  // repeated error test failures (check all inputs).
 	case -3:  // illegal input detected (see printed message).
 	case -2:  // excess accuracy requested (tolerances too small).
-	  integration_error = 1;
-	  break;
-
 	case -1:  // excess work done on this call (perhaps wrong mf).
-	  (*current_liboctave_error_handler)
-	    ("giving up after more than %d steps attempted in lsode",
-	     step_limit ());
 	  integration_error = 1;
 	  break;
 
 	case 2:  // lsode was successful
 	  retval = x;
 	  t = tout;
 	  break;
 	  
@@ -336,16 +330,73 @@ LSODE::do_integrate (double tout)
 	    ("unrecognized value of istate returned from lsode");
 	  break;
 	}
     }
 
   return retval;
 }
 
+std::string
+LSODE::error_message (void) const
+{
+  std::string retval;
+
+  switch (istate)
+    {
+    case -13:
+      retval = "return requested in user-supplied function";
+      break;
+
+    case -6:
+      retval = "Error weight became zero during problem.\
+  (solution component i vanished, and atol or atol(i) == 0)";
+      break;
+
+    case -5:
+      retval = "repeated convergence failures (perhaps bad jacobian\
+ supplied or wrong choice of integration method or tolerances)";
+      break;
+
+    case -4:
+      retval = "repeated error test failures (check all inputs)";
+      break;
+
+    case -3:
+      retval = "invalid input detected (see printed message)";
+      break;
+
+    case -2:
+      retval = "excess accuracy requested (tolerances too small)";
+      break;
+
+    case -1:
+      retval = "excess work on this call (perhaps wrong integration method)";
+      break;
+
+    case 1:
+      retval = "prior to initial call";
+      break;
+
+    case 2:
+      retval = "successful exit";
+      break;
+	  
+    case 3:
+      retval = "prior to continuation call with modified parameters";
+      break;
+	  
+    default:
+      retval = "unknown error state";
+      break;
+    }
+
+  return retval;
+}
+
 Matrix
 LSODE::do_integrate (const ColumnVector& tout)
 {
   Matrix retval;
   int n_out = tout.capacity ();
 
   if (n_out > 0 && n > 0)
     {
diff --git a/liboctave/LSODE.h b/liboctave/LSODE.h
--- a/liboctave/LSODE.h
+++ b/liboctave/LSODE.h
@@ -159,16 +159,22 @@ public:
   void clear_stop_time (void);
 
   ColumnVector do_integrate (double t);
 
   Matrix do_integrate (const ColumnVector& tout);
 
   Matrix do_integrate (const ColumnVector& tout, const ColumnVector& tcrit);
 
+  int integration_state (void) const { return istate; }
+
+  bool integration_ok (void) const { return ! integration_error; }
+
+  std::string error_message (void) const;
+
 private:
 
   double stop_time;
   int stop_time_set;
 
   int n;
   int integration_error;
   int restart;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2002-05-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* DLD-FUNCTIONS/lsode.cc (Flsode): Also return istate and error
+	message.  Only generate error if user is not at least requesting
+	the istate output.
+
 	* load-save.cc (hdf5_import_multidim, hdf5_check_attr,
 	hdf5_callback_data, hdf5_read_next_data, read_hdf5_data,
 	add_hdf5_data): Use 0, not NULL in calls to HDF routines.
 
 	* oct-procbuf.cc (octave_procbuf::open): Use NULL, not 0 as last
 	arg in call to execl.xo
 
 	* debug.cc (get_user_function): Initialise dbg_fcn to 0, not NULL.
diff --git a/src/DLD-FUNCTIONS/lsode.cc b/src/DLD-FUNCTIONS/lsode.cc
--- a/src/DLD-FUNCTIONS/lsode.cc
+++ b/src/DLD-FUNCTIONS/lsode.cc
@@ -155,17 +155,17 @@ lsode_user_jacobian (const ColumnVector&
     { \
       ::error ("lsode: " fmt, arg); \
       LSODE_ABORT (); \
     } \
   while (0)
 
 DEFUN_DLD (lsode, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {} lsode (@var{fcn}, @var{x0}, @var{t}, @var{t_crit})\n\
+@deftypefn {Loadable Function} {[@var{x}, @var{istate}, @var{msg}]} lsode (@var{fcn}, @var{x0}, @var{t}, @var{t_crit})\n\
 Return a matrix of @var{x} as a function of @var{t}, given the initial\n\
 state of the system @var{x0}.  Each row in the result matrix corresponds\n\
 to one of the elements in the vector @var{t}.  The first element of\n\
 @var{t} corresponds to the initial state @var{x0}, so that the first row\n\
 of the output is @var{x0}.\n\
 \n\
 The first argument, @var{fcn}, is a string that names the function to\n\
 call to compute the vector of right hand sides for the set of equations.\n\
@@ -191,17 +191,17 @@ discontinuity in the derivative.\n\
   unwind_protect_int (call_depth);
   call_depth++;
 
   if (call_depth > 1)
     LSODE_ABORT1 ("invalid recursive call");
 
   int nargin = args.length ();
 
-  if (nargin > 2 && nargin < 5 && nargout < 2)
+  if (nargin > 2 && nargin < 5 && nargout < 4)
     {
       octave_value f_arg = args(0);
 
       switch (f_arg.rows ())
 	{
 	case 1:
 	  lsode_fcn = extract_function
 	    (args(0), "lsode", "__lsode_fcn__",
@@ -278,18 +278,31 @@ discontinuity in the derivative.\n\
       Matrix output;
       if (crit_times_set)
 	output = ode.integrate (out_times, crit_times);
       else
 	output = ode.integrate (out_times);
 
       if (! error_state)
 	{
-	  retval.resize (1);
-	  retval(0) = output;
+	  retval(2) = ode.error_message ();
+	  retval(1) = static_cast<double> (ode.integration_state ());
+
+	  if (ode.integration_ok ())
+	    retval = output;
+	  else
+	    {
+	      output = Matrix ();
+
+	      if (nargout < 2)
+		{
+		  std::string msg = ode.error_message ();
+		  error ("lsode: %s", msg.c_str ());
+		}
+	    }
 	}
     }
   else
     print_usage ("lsode");
 
   unwind_protect::run_frame ("Flsode");
 
   return retval;
