# HG changeset patch
# User Thorsten Meyer <thorsten.meyier@gmx.de>
# Date 1226707097 -3600
#      Sat Nov 15 00:58:17 2008 +0100
# Node ID 349a555729a94ae712f0bd854fa4bed5eff39761
# Parent  33337f1aca75e9d731455fd11dd563c191e25638
keep empty strings in char

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -63,16 +63,20 @@ 2008-11-13  John W. Eaton  <jwe@octave.o
 	* ov-intx.h (class OCTAVE_VALUE_INT_MATRIX_T,
 	class OCTAVE_VALUE_INT_SCALAR_T): Use intNDArray<OCTAVE_INT_T>
 	instead of OCTAVE_INT_NDARRAY_T.
 	(OCTAVE_VALUE_INT_MATRIX_T::increment,
 	OCTAVE_VALUE_INT_MATRIX_T::decrement,
 	OCTAVE_VALUE_INT_SCALAR_T::increment,
 	OCTAVE_VALUE_INT_SCALAR_T::decrement): Convert 1 to OCTAVE_INT_T.
 
+2008-11-15  Thorsten Meyer  <thorsten.meyier@gmx.de>
+
+        * strfns.cc (Fchar): adapt to conserve empty strings, add tests
+        
 2008-11-12  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* dirfcn.cc (Ffilesep): Make it return all file separators when 'all'
 	is given as argument.
 
 	* DLD-FUNCTIONS/getrusage.cc: Undefine min/max.
 	* TEMPLATE-INST/Array-os.cc: Declare Array<bool> as extern template.
 
diff --git a/src/strfns.cc b/src/strfns.cc
--- a/src/strfns.cc
+++ b/src/strfns.cc
@@ -85,17 +85,20 @@ of the string array have the same length
 	  string_vector s = args(i).all_strings ();
 
 	  if (error_state)
 	    {
 	      error ("char: unable to convert some args to strings");
 	      return retval;
 	    }
 
-	  n_elts += s.length ();
+	  if (s.length () > 0)
+            n_elts += s.length ();
+          else
+            n_elts += 1;
 
 	  int s_max_len = s.max_length ();
 
 	  if (s_max_len > max_len)
 	    max_len = s_max_len;
 	}
 
       string_vector result (n_elts);
@@ -103,36 +106,57 @@ of the string array have the same length
       int k = 0;
 
       for (int i = 0; i < nargin; i++)
 	{
 	  string_vector s = args(i).all_strings ();
 
 	  int n = s.length ();
 
-	  for (int j = 0; j < n; j++)
-	    {
-	      std::string t = s[j];
-	      int t_len = t.length ();
+          if (n > 0)
+            {
+	      for (int j = 0; j < n; j++)
+	        {
+	          std::string t = s[j];
+	          int t_len = t.length ();
 
-	      if (max_len > t_len)
-		t += std::string (max_len - t_len, ' ');
+	          if (max_len > t_len)
+		    t += std::string (max_len - t_len, ' ');
 
-	      result[k++] = t;
-	    }
+	          result[k++] = t;
+	        }
+            }
+          else
+            {
+               result[k++] = std::string (max_len, ' ');
+            }
 	}
 
       retval = octave_value (result, '\'');
     }
   else
     print_usage ();
 
   return retval;
 }
 
+/*
+%!error <Invalid call to char> char()
+%!assert (char (100) == "d");
+%!assert (all(char (100,100) == ["d";"d"]));
+%!assert (all(char ({100,100}) == ["d";"d"]));
+%!assert (all(char ([100,100]) == ["dd"]));
+%!assert (all(char ({100,{100}}) == ["d";"d"]));
+%!assert (all(char (100, [], 100) == ["d";" ";"d"]))
+%!assert (all(char ({100, [], 100}) == ["d";" ";"d"]))
+%!assert (all(char ({100,{100, {""}}}) == ["d";"d";" "]))
+%!assert (all(char (["a";"be"], {"c", 100}) == ["a";"be";"c";"d"]))
+*/
+
+
 DEFUN (ischar, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} ischar (@var{a})\n\
 Return 1 if @var{a} is a string.  Otherwise, return 0.\n\
 @end deftypefn")
 {
   octave_value retval;
 
