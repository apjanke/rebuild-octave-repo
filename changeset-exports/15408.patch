# HG changeset patch
# User Rik <rik@octave.org>
# Date 1347983417 25200
#      Tue Sep 18 08:50:17 2012 -0700
# Node ID c0dd3ce6d1e29fb93745d99368efdf3627642dae
# Parent  057beb799f13fff1fd1da1cecd2212ab67256204
randmtzig.c: Use spaces around '=' for readability.

* randmtzig.c: Use spaces around '=' for readability.

diff --git a/liboctave/numeric/randmtzig.c b/liboctave/numeric/randmtzig.c
--- a/liboctave/numeric/randmtzig.c
+++ b/liboctave/numeric/randmtzig.c
@@ -255,17 +255,17 @@ oct_init_by_array (uint32_t *init_key, i
 
 void
 oct_init_by_entropy (void)
 {
     uint32_t entropy[MT_N];
     int n = 0;
 
     /* Look for entropy in /dev/urandom */
-    FILE* urandom =fopen ("/dev/urandom", "rb");
+    FILE* urandom = fopen ("/dev/urandom", "rb");
     if (urandom)
       {
         while (n < MT_N)
           {
             unsigned char word[4];
             if (fread (word, 4, 1, urandom) != 1)
               break;
             entropy[n++] = word[0]+(word[1]<<8)+(word[2]<<16)+(word[3]<<24);
@@ -395,18 +395,18 @@ randu32 (void)
   return ((float)randi32 () + 0.5) * (1.0/4294967296.0);
   /* divided by 2^32 */
 }
 
 /* generates a random number on (0,1) with 53-bit resolution */
 static double
 randu53 (void)
 {
-  const uint32_t a=randi32 ()>>5;
-  const uint32_t b=randi32 ()>>6;
+  const uint32_t a = randi32 ()>>5;
+  const uint32_t b = randi32 ()>>6;
   return (a*67108864.0+b+0.4) * (1.0/9007199254740992.0);
 }
 
 /* Determine mantissa for uniform doubles */
 double
 oct_randu (void)
 {
   return randu53 ();
@@ -588,17 +588,17 @@ oct_randn (void)
       hi = randi32 ();
       si = hi&UMASK;
       p[0] = lo;
       p[1] = hi&0x1FFFFF;
       x = ( si ? -rabs : rabs ) * wi[idx];
 # else /* !HAVE_X86_32 */
       /* arbitrary mantissa (selected by NRANDI, with 1 bit for sign) */
       const uint64_t r = NRANDI;
-      const int64_t rabs=r>>1;
+      const int64_t rabs = r>>1;
       const int idx = (int)(rabs&0xFF);
       const double x = ( r&1 ? -rabs : rabs) * wi[idx];
 # endif /* !HAVE_X86_32 */
       if (rabs < (int64_t)ki[idx])
         return x;        /* 99.3% of the time we return here 1st try */
       else if (idx == 0)
         {
           /* As stated in Marsaglia and Tsang
