# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1322678063 28800
#      Wed Nov 30 10:34:23 2011 -0800
# Node ID 12fa52c6e886cc93e4493a4bb947a8de6ff4ceec
# Parent  663594b481e5b3170a77ffafc569cf52bd10026d
Use char() instead of deprecated setstr() in %!test code.

* mappers.cc: Use char() instead of deprecated setstr() in %!test code.

diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -947,17 +947,17 @@ letters or digits and false where they a
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 %!test
-%! charset = setstr (0:127);
+%! charset = char (0:127);
 %! result = zeros (1, 128);
 %! result ((toascii("A"):toascii("Z"))+1) = 1;
 %! result ((toascii("0"):toascii("9"))+1) = 1;
 %! result ((toascii("a"):toascii("z"))+1) = 1;
 %! assert(all (isalnum (charset) == result));
 
 %!error isalnum (1, 2);
 %!error isalnum ();
@@ -978,17 +978,17 @@ letters and false where they are not.  T
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 %!test
-%! charset = setstr (0:127);
+%! charset = char (0:127);
 %! result = zeros (1, 128);
 %! result ((toascii("A"):toascii("Z"))+1) = 1;
 %! result ((toascii("a"):toascii("z"))+1) = 1;
 %! assert(all (isalpha (charset) == result));
 
 %!error isalpha (1, 2);
 %!error isalpha ();
 */
@@ -1007,17 +1007,17 @@ not.\n\
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 %!test
-%! charset = setstr (0:127);
+%! charset = char (0:127);
 %! result = ones (1, 128);
 %! assert(all (isascii (charset) == result));
 
 %!error isascii (1, 2);
 %!error isascii ();
 */
 
 DEFUNX ("iscntrl", Fiscntrl, args, ,
@@ -1035,17 +1035,17 @@ control characters and false where they 
     print_usage ();
 
   return retval;
 }
 
 /*
 %% test/octave.test/string/iscntrl-1.m
 %!test
-%! charset = setstr (0:127);
+%! charset = char (0:127);
 %! result = zeros (1, 128);
 %! result (1:32) = 1;
 %! result (128) = 1;
 %! assert(all (iscntrl (charset) == result));
 
 %!error iscntrl (1, 2);
 %!error iscntrl ();
 */
@@ -1064,17 +1064,17 @@ decimal digits (0-9) and false where the
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 %!test
-%! charset = setstr (0:127);
+%! charset = char (0:127);
 %! result = zeros (1, 128);
 %! result ((toascii("0"):toascii("9"))+1) = 1;
 %! assert(all (isdigit (charset) == result));
 
 %!error isdigit (1, 2);
 %!error isdigit ();
 */
 
@@ -1132,17 +1132,17 @@ not.\n\
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 %!test
-%! charset = setstr (0:127);
+%! charset = char (0:127);
 %! result = zeros (1, 128);
 %! result (34:127) = 1;
 %! assert(all (isgraph (charset) == result));
 
 %!error isgraph (1, 2);
 %!error isgraph ();
 */
 
@@ -1160,17 +1160,17 @@ lowercase letters and false where they a
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 %!test
-%! charset = setstr (0:127);
+%! charset = char (0:127);
 %! result = zeros (1, 128);
 %! result ((toascii("a"):toascii("z"))+1) = 1;
 %! assert(all (islower (charset) == result));
 
 %!error islower (1, 2);
 %!error islower ();
 */
 
@@ -1267,17 +1267,17 @@ are not.\n\
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 %!test
-%! charset = setstr (0:127);
+%! charset = char (0:127);
 %! result = zeros (1, 128);
 %! result (33:127) = 1;
 %! if (ispc () && ! isunix ())
 %!   result(10) = 1;
 %! endif
 %! assert(all (isprint (charset) == result));
 
 %!error isprint (1, 2);
@@ -1298,17 +1298,17 @@ punctuation characters and false where t
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 %!test
-%! charset = setstr (0:127);
+%! charset = char (0:127);
 %! result = zeros (1, 128);
 %! result (34:48) = 1;
 %! result (59:65) = 1;
 %! result (92:97) = 1;
 %! result (124:127) = 1;
 %! assert(all (ispunct (charset) == result));
 
 %!error ispunct (1, 2);
@@ -1330,17 +1330,17 @@ vertical tab) and false where they are n
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 %!test
-%! charset = setstr (0:127);
+%! charset = char (0:127);
 %! result = zeros (1, 128);
 %! result (toascii (" \f\n\r\t\v")+1) = 1;
 %! assert(all (isspace (charset) == result));
 
 %!error isspace (1, 2);
 %!error isspace ();
 */
 
@@ -1358,17 +1358,17 @@ uppercase letters and false where they a
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 %!test
-%! charset = setstr (0:127);
+%! charset = char (0:127);
 %! result = zeros (1, 128);
 %! result ((toascii("A"):toascii("Z"))+1) = 1;
 %! assert(all (isupper (charset) == result));
 
 %!error isupper (1, 2);
 %!error isupper ();
 */
 
@@ -1386,17 +1386,17 @@ hexadecimal digits (0-9 and @nospell{a-f
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 %!test
-%! charset = setstr (0:127);
+%! charset = char (0:127);
 %! result = zeros (1, 128);
 %! result ((toascii("A"):toascii("F"))+1) = 1;
 %! result ((toascii("0"):toascii("9"))+1) = 1;
 %! result ((toascii("a"):toascii("f"))+1) = 1;
 %! assert(all (isxdigit (charset) == result));
 
 %!error isxdigit (1, 2);
 %!error isxdigit ();
@@ -1912,17 +1912,17 @@ DEFALIAS (lower, tolower);
 %!assert(tolower({["ABC"; "DEF"]}), {["abc";"def"]});
 %!assert(tolower(68), "d");
 %!assert(tolower({[68, 68; 68, 68]}), {["dd";"dd"]});
 %!test
 %!  a(3,3,3,3) = "D";
 %!  assert(tolower(a)(3,3,3,3), "d");
 
 %!test
-%! charset = setstr (0:127);
+%! charset = char (0:127);
 %! result = charset;
 %! result ((toascii("A"):toascii("Z"))+1) \
 %! = result ((toascii("a"):toascii("z"))+1);
 %! assert(all (tolower (charset) == result));
 */
 
 DEFUNX ("toupper", Ftoupper, args, ,
     "-*- texinfo -*-\n\
@@ -1962,17 +1962,17 @@ DEFALIAS (upper, toupper);
 %!assert(toupper(["abc"; "def"]), ["ABC"; "DEF"]);
 %!assert(toupper({["abc"; "def"]}), {["ABC";"DEF"]});
 %!assert(toupper(100), "D");
 %!assert(toupper({[100, 100; 100, 100]}), {["DD";"DD"]});
 %!test
 %!  a(3,3,3,3) = "d";
 %!  assert(toupper(a)(3,3,3,3), "D");
 %!test
-%! charset = setstr (0:127);
+%! charset = char (0:127);
 %! result = charset;
 %! result ((toascii("a"):toascii("z"))+1) \
 %! = result ((toascii("A"):toascii("Z"))+1);
 %! assert(all (toupper (charset) == result));
 */
 
 DEFALIAS (gammaln, lgamma);
 
