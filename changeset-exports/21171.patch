# HG changeset patch
# User Rik <rik@octave.org>
# Date 1454396383 28800
#      Mon Feb 01 22:59:43 2016 -0800
# Branch stable
# Node ID 2935d56203a4c583facaba4622a272b8f4792263
# Parent  8b1e030d3d4f7445db19b519e40d770ac624b77a
Fix regressions caused by ismatrix definition change (partial fix bug #47036).

* inputdlg.m: Test that linespec isnumeric.

* uigetfile.m: Check that position property value isnumeric.

* fminunc.m: Check that x0 isnumeric.

* fsolve.m: Check that x0 isnumeric.

* lsqnonneg.m: Check that inputs C & D are both isnumeric and ismatrix.

* pqpnonneg.m: Check that inputs C & D are both isnumeric and ismatrix.

* bicg.m: Check input A issquare.  Rephrase error messages.

* bicgstab.m: Check input A issquare.  Rephrase error messages.

* cgs.m: Check input A issquare.  Rephrase error messages.

* gmres.m: Check input A issquare.  Rephrase error messages.
Change BIST test to match new error message.

* qmr.m: Check input A issquare.  Rephrase error messages.

* spconvert.m: Check nargin first.  Simplify input validation.
Wrap long error message to < 80 chars.

* treeplot.m: Simplify input validation.

diff --git a/scripts/gui/inputdlg.m b/scripts/gui/inputdlg.m
--- a/scripts/gui/inputdlg.m
+++ b/scripts/gui/inputdlg.m
@@ -88,16 +88,20 @@ function cstr = inputdlg (prompt, title 
 
   ## specification of text field sizes as in Matlab
   ## Matlab requires a matrix for linespec, not a cell array...
   ## rc = [1,10; 2,20; 3,30];
   ##     c1  c2
   ## r1  1   10   first  text field is 1x10
   ## r2  2   20   second text field is 2x20
   ## r3  3   30   third  text field is 3x30
+  if (! isnumeric (linespec))
+    error ("inputdlg: ROWSCOLS must be numeric");
+  endif
+
   if (isscalar (linespec))
     ## only scalar value in lineTo, copy from linespec and add defaults
     rowscols = zeros (numel (prompt), 2);
     ## cols
     rowscols(:,2) = 25;
     rowscols(:,1) = linespec;
   elseif (isvector (linespec))
     if (numel (linespec) == numel (prompt))
diff --git a/scripts/gui/uigetfile.m b/scripts/gui/uigetfile.m
--- a/scripts/gui/uigetfile.m
+++ b/scripts/gui/uigetfile.m
@@ -152,17 +152,17 @@ function [retfile, retpath, retindex] = 
     if (rem (nargin - stridx + 1, 2))
       error ("uigetfile: expecting property/value pairs");
     endif
 
     for i = stridx : 2 : nargin
       prop = varargin{i};
       val = varargin{i + 1};
       if (strcmpi (prop, "position"))
-        if (ismatrix (val) && length (val) == 2)
+        if (isnumeric (val) && length (val) == 2)
           outargs{4} = val;
         else
           error ("uigetfile: expecting 2-element vector for position argument");
         endif
       elseif (strcmpi (prop, "multiselect"))
         if (ischar (val))
           outargs{5} = tolower (val);
         else
diff --git a/scripts/optimization/fminunc.m b/scripts/optimization/fminunc.m
--- a/scripts/optimization/fminunc.m
+++ b/scripts/optimization/fminunc.m
@@ -100,17 +100,17 @@ function [x, fval, info, output, grad, h
     x = optimset ("MaxIter", 400, "MaxFunEvals", Inf,
                   "GradObj", "off", "TolX", 1e-7, "TolFun", 1e-7,
                   "OutputFcn", [], "FunValCheck", "off",
                   "FinDiffType", "central",
                   "TypicalX", [], "AutoScaling", "off");
     return;
   endif
 
-  if (nargin < 2 || nargin > 3 || ! ismatrix (x0))
+  if (nargin < 2 || nargin > 3 || ! isnumeric (x0))
     print_usage ();
   endif
 
   if (ischar (fcn))
     fcn = str2func (fcn, "global");
   endif
 
   xsiz = size (x0);
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -141,17 +141,17 @@ function [x, fvec, info, output, fjac] =
     x = optimset ("MaxIter", 400, "MaxFunEvals", Inf, ...
     "Jacobian", "off", "TolX", 1e-7, "TolFun", 1e-7,
     "OutputFcn", [], "Updating", "on", "FunValCheck", "off",
     "ComplexEqn", "off", "FinDiffType", "central",
     "TypicalX", [], "AutoScaling", "off");
     return;
   endif
 
-  if (nargin < 2 || nargin > 3 || ! ismatrix (x0))
+  if (nargin < 2 || nargin > 3 || ! isnumeric (x0))
     print_usage ();
   endif
 
   if (ischar (fcn))
     fcn = str2func (fcn, "global");
   elseif (iscell (fcn))
     fcn = @(x) make_fcn_jac (x, fcn{1}, fcn{2});
   endif
diff --git a/scripts/optimization/lsqnonneg.m b/scripts/optimization/lsqnonneg.m
--- a/scripts/optimization/lsqnonneg.m
+++ b/scripts/optimization/lsqnonneg.m
@@ -82,17 +82,19 @@
 function [x, resnorm, residual, exitflag, output, lambda] = lsqnonneg (c, d, x = [], options = struct ())
 
   if (nargin == 1 && ischar (c) && strcmp (c, 'defaults'))
     x = optimset ("MaxIter", 1e5);
     return;
   endif
 
   if (nargin < 2 || nargin > 4
-      || ! (ismatrix (c) && ismatrix (d) && isstruct (options)))
+      || ! (isnumeric (c) && ismatrix (c))
+      || ! (isnumeric (d) && ismatrix (d))
+      || ! isstruct (options))
     print_usage ();
   endif
 
   ## Lawson-Hanson Step 1 (LH1): initialize the variables.
   m = rows (c);
   n = columns (c);
   if (isempty (x))
     ## Initial guess is 0s.
diff --git a/scripts/optimization/pqpnonneg.m b/scripts/optimization/pqpnonneg.m
--- a/scripts/optimization/pqpnonneg.m
+++ b/scripts/optimization/pqpnonneg.m
@@ -74,17 +74,19 @@
 function [x, minval, exitflag, output, lambda] = pqpnonneg (c, d, x = [], options = struct ())
 
   if (nargin == 1 && ischar (c) && strcmp (c, 'defaults'))
     x = optimset ("MaxIter", 1e5);
     return;
   endif
 
   if (nargin < 2 || nargin > 4
-      || ! (ismatrix (c) && ismatrix (d) && isstruct (options)))
+      || ! (isnumeric (c) && ismatrix (c))
+      || ! (isnumeric (d) && ismatrix (d))
+      || ! isstruct (options))
     print_usage ();
   endif
 
   ## Lawson-Hanson Step 1 (LH1): initialize the variables.
   m = rows (c);
   n = columns (c);
   if (m != n)
     error ("pqpnonneg: matrix must be square");
diff --git a/scripts/sparse/bicg.m b/scripts/sparse/bicg.m
--- a/scripts/sparse/bicg.m
+++ b/scripts/sparse/bicg.m
@@ -76,25 +76,24 @@
 function [x, flag, res1, k, resvec] = bicg (A, b, tol, maxit, M1, M2, x0)
 
   if (nargin >= 2 && isvector (full (b)))
 
     if (ischar (A))
       fun = str2func (A);
       Ax  = @(x) feval (fun, x, "notransp");
       Atx = @(x) feval (fun, x, "transp");
-    elseif (isnumeric (A) && ismatrix (A))
+    elseif (isnumeric (A) && issquare (A))
       Ax  = @(x) A  * x;
       Atx = @(x) A' * x;
     elseif (isa (A, "function_handle"))
       Ax  = @(x) feval (A, x, "notransp");
       Atx = @(x) feval (A, x, "transp");
     else
-      error (["bicg: first argument is expected to " ...
-              "be a function or a square matrix"]);
+      error ("bicg: A must be a function or square matrix");
     endif
 
     if (nargin < 3 || isempty (tol))
       tol = 1e-6;
     endif
 
     if (nargin < 4 || isempty (maxit))
       maxit = min (rows (b), 20);
@@ -111,36 +110,34 @@ function [x, flag, res1, k, resvec] = bi
       M1tm1x = @(x) feval (fun, x, "transp");
     elseif (isnumeric (M1) && ismatrix (M1))
       M1m1x  = @(x) M1  \ x;
       M1tm1x = @(x) M1' \ x;
     elseif (isa (M1, "function_handle"))
       M1m1x  = @(x) feval (M1, x, "notransp");
       M1tm1x = @(x) feval (M1, x, "transp");
     else
-      error (["bicg: preconditioner is expected to " ...
-              "be a function or matrix"]);
+      error ("bicg: preconditioner M1 must be a function or matrix");
     endif
 
     if (nargin < 6 || isempty (M2))
       M2m1x = @(x, ignore) x;
       M2tm1x = M2m1x;
     elseif (ischar (M2))
       fun = str2func (M2);
       M2m1x  = @(x) feval (fun, x, "notransp");
       M2tm1x = @(x) feval (fun, x, "transp");
     elseif (isnumeric (M2) && ismatrix (M2))
       M2m1x  = @(x) M2  \ x;
       M2tm1x = @(x) M2' \ x;
     elseif (isa (M2, "function_handle"))
       M2m1x  = @(x) feval (M2, x, "notransp");
       M2tm1x = @(x) feval (M2, x, "transp");
     else
-      error (["bicg: preconditioner is expected to " ...
-              "be a function or matrix"]);
+      error ("bicg: preconditioner M2 must be a function or matrix");
     endif
 
     Pm1x  = @(x) M2m1x  (M1m1x (x));
     Ptm1x = @(x) M1tm1x (M2tm1x (x));
 
     if (nargin < 7 || isempty (x0))
       x0 = zeros (size (b));
     endif
diff --git a/scripts/sparse/bicgstab.m b/scripts/sparse/bicgstab.m
--- a/scripts/sparse/bicgstab.m
+++ b/scripts/sparse/bicgstab.m
@@ -71,23 +71,22 @@
 
 function [x, flag, relres, iter, resvec] = bicgstab (A, b, tol, maxit,
                                                      M1, M2, x0)
 
   if (nargin >= 2 && nargin <= 7 && isvector (full (b)))
 
     if (ischar (A))
       A = str2func (A);
-    elseif (isnumeric(A) && ismatrix (A))
+    elseif (isnumeric(A) && issquare (A))
       Ax  = @(x) A  * x;
     elseif (isa (A, "function_handle"))
       Ax  = @(x) feval (A, x);
     else
-      error (["bicgstab: first argument is expected " ...
-              "to be a function or a square matrix"]);
+      error ("bicgstab: A must be a function or square matrix");
     endif
 
     if (nargin < 3 || isempty (tol))
       tol = 1e-6;
     endif
 
     if (nargin < 4 || isempty (maxit))
       maxit = min (rows (b), 20);
@@ -97,31 +96,29 @@ function [x, flag, relres, iter, resvec]
       M1m1x = @(x) x;
     elseif (ischar (M1))
       M1m1x = str2func (M1);
     elseif (isnumeric(M1) && ismatrix (M1))
       M1m1x = @(x) M1  \ x;
     elseif (isa (M1, "function_handle"))
       M1m1x = @(x) feval (M1, x);
     else
-      error (["bicgstab: preconditioner is " ...
-              "expected to be a function or matrix"]);
+      error ("bicgstab: preconditioner M1 must be a function or matrix");
     endif
 
     if (nargin < 6 || isempty (M2))
       M2m1x = @(x) x;
     elseif (ischar (M2))
       M2m1x = str2func (M2);
     elseif (isnumeric(M2) && ismatrix (M2))
       M2m1x = @(x) M2  \ x;
     elseif (isa (M2, "function_handle"))
       M2m1x = @(x) feval (M2, x);
     else
-      error (["bicgstab: preconditioner is "...
-              "expected to be a function or matrix"]);
+      error ("bicgstab: preconditioner M2 must be a function or matrix");
     endif
 
     precon = @(x) M2m1x (M1m1x (x));
 
     if (nargin < 7 || isempty (x0))
       x0 = zeros (size (b));
     endif
 
diff --git a/scripts/sparse/cgs.m b/scripts/sparse/cgs.m
--- a/scripts/sparse/cgs.m
+++ b/scripts/sparse/cgs.m
@@ -69,23 +69,22 @@
 ## @end deftypefn
 
 function [x, flag, relres, iter, resvec] = cgs (A, b, tol, maxit, M1, M2, x0)
 
   if (nargin >= 2 && nargin <= 7 && isvector (full (b)))
 
     if (ischar (A))
       A = str2func (A);
-    elseif (isnumeric (A) && ismatrix (A))
+    elseif (isnumeric (A) && issquare (A))
       Ax = @(x) A * x;
     elseif (isa (A, "function_handle"))
       Ax = @(x) feval (A, x);
     else
-      error (["cgs: first argument is expected to "...
-              "be a function or a square matrix"]);
+      error ("cgs: A must be a function or square matrix");
     endif
 
     if (nargin < 3 || isempty (tol))
       tol = 1e-6;
     endif
 
     if (nargin < 4 || isempty (maxit))
       maxit = min (rows (b), 20);
@@ -95,29 +94,29 @@ function [x, flag, relres, iter, resvec]
       M1m1x = @(x) x;
     elseif (ischar (M1))
       M1m1x = str2func (M1);
     elseif (isnumeric (M1) && ismatrix (M1))
       M1m1x = @(x) M1 \ x;
     elseif (isa (M1, "function_handle"))
       M1m1x = @(x) feval (M1, x);
     else
-      error ("cgs: preconditioner is expected to be a function or matrix");
+      error ("cgs: preconditioner M1 must be a function or matrix");
     endif
 
     if (nargin < 6 || isempty (M2))
       M2m1x = @(x) x;
     elseif (ischar (M2))
       M2m1x = str2func (M2);
     elseif (isnumeric (M2) && ismatrix (M2))
       M2m1x = @(x) M2 \ x;
     elseif (isa (M2, "function_handle"))
       M2m1x = @(x) feval (M2, x);
     else
-      error ("cgs: preconditioner is expected to be a function or matrix");
+      error ("cgs: preconditioner M2 must be a function or matrix");
     endif
 
     precon = @(x) M2m1x (M1m1x (x));
 
     if (nargin < 7 || isempty (x0))
       x0 = zeros (size (b));
     endif
 
diff --git a/scripts/sparse/gmres.m b/scripts/sparse/gmres.m
--- a/scripts/sparse/gmres.m
+++ b/scripts/sparse/gmres.m
@@ -74,22 +74,22 @@
 function [x, flag, relres, it, resvec] = gmres (A, b, restart, rtol, maxit, M1, M2, x0)
 
   if (nargin < 2 || nargin > 8)
     print_usage ();
   endif
 
   if (ischar (A))
     Ax = str2func (A);
-  elseif (isnumeric (A) && ismatrix (A))
+  elseif (isnumeric (A) && issquare (A))
     Ax = @(x) A*x;
   elseif (isa (A, "function_handle"))
     Ax = A;
   else
-    error ("gmres: A must be a function or matrix");
+    error ("gmres: A must be a function or square matrix");
   endif
 
   if (nargin < 3 || isempty (restart))
     restart = rows (b);
   endif
 
   if (nargin < 4 || isempty (rtol))
     rtol = 1e-6;
@@ -225,12 +225,12 @@ endfunction
 %!test
 %! x = gmres (@(x) A*x, b, dim, 1e-10, 1e6, @(x) x ./ diag (A), [], []);
 %! assert (x, A\b, 1e-7*norm (x, Inf));
 
 
 %!error gmres (1)
 %!error gmres (1,2,3,4,5,6,7,8,9)
 %!error <A must be> gmres ({1},2)
-%!error <A must be a function or matrix> gmres ({1},2)
+%!error <A must be a function or square matrix> gmres ({1},2)
 %!error <M1 must be a function or matrix> gmres (1,2,3,4,5,{6})
 %!error <M2 must be a function or matrix> gmres (1,2,3,4,5,6,{7})
 
diff --git a/scripts/sparse/qmr.m b/scripts/sparse/qmr.m
--- a/scripts/sparse/qmr.m
+++ b/scripts/sparse/qmr.m
@@ -92,22 +92,21 @@ function [x, flag, relres, iter, resvec]
 
     if (ischar (A))
       fun = str2func (A);
       Ax  = @(x) feval (fun, x, "notransp");
       Atx = @(x) feval (fun, x, "transp");
     elseif (isa (A, "function_handle"))
       Ax  = @(x) feval (A, x, "notransp");
       Atx = @(x) feval (A, x, "transp");
-    elseif (isnumeric (A) && ismatrix (A))
+    elseif (isnumeric (A) && issquare (A))
       Ax  = @(x) A  * x;
       Atx = @(x) A' * x;
     else
-      error (["qmr: first argument is expected to " ...
-                "be a function or a square matrix"]);
+      error ("qmr: A must be a function or square matrix");
     endif
 
     if (nargin < 3 || isempty (tol))
       tol = 1e-6;
     endif
 
     if (nargin < 4 || isempty (maxit))
       maxit = min (rows (b), 20);
@@ -124,39 +123,36 @@ function [x, flag, relres, iter, resvec]
       M1tm1x = @(x) feval (fun, x, "transp");
     elseif (isa (M1, "function_handle"))
       M1m1x  = @(x) feval (M1, x, "notransp");
       M1tm1x = @(x) feval (M1, x, "transp");
     elseif (isnumeric (M1) && ismatrix (M1))
       M1m1x  = @(x) M1  \ x;
       M1tm1x = @(x) M1' \ x;
     else
-      error (["qmr: preconditioner is expected to " ...
-                "be a function or matrix"]);
+      error ("qmr: preconditioner M1 must be a function or matrix");
     endif
 
     if (nargin < 6 || isempty (M2))
       M2m1x = @(x, ignore) x;
       M2tm1x = M2m1x;
     elseif (ischar (M2))
       fun = str2func (M2);
       M2m1x  = @(x) feval (fun, x, "notransp");
       M2tm1x = @(x) feval (fun, x, "transp");
     elseif (isa (M2, "function_handle"))
       M2m1x  = @(x) feval (M2, x, "notransp");
       M2tm1x = @(x) feval (M2, x, "transp");
     elseif (isnumeric (M2) && ismatrix (M2))
       M2m1x  = @(x) M2  \ x;
       M2tm1x = @(x) M2' \ x;
     else
-      error (["qmr: preconditioner is expected to " ...
-                "be a function or matrix"]);
+      error ("qmr: preconditioner M2 must be a function or matrix");
     endif
 
-
     if (nargin < 7 || isempty (x0))
       x = zeros (size (b));
     else
       x = x0;
     endif
 
     r = b - Ax (x);
 
diff --git a/scripts/sparse/spconvert.m b/scripts/sparse/spconvert.m
--- a/scripts/sparse/spconvert.m
+++ b/scripts/sparse/spconvert.m
@@ -25,23 +25,28 @@
 ## row, column, real, and imaginary parts of the elements of the sparse
 ## matrix.  An element with a zero real and imaginary part can be used to
 ## force a particular matrix size.
 ## @seealso{sparse}
 ## @end deftypefn
 
 function s = spconvert (m)
 
+  if (nargin != 1)
+    print_usage ();
+  endif
+
   if (issparse (m))
     s = m;
   else
     sz = size (m);
-    if (nargin != 1 || ! ismatrix (m) || ! isreal (m)
+    if (! ismatrix (m) || ! isreal (m)
         || length (sz) != 2 || (sz(2) != 3 && sz(2) != 4))
-      error ("spconvert: argument must be sparse or real matrix with 3 or 4 columns");
+      error (["spconvert: argument must be sparse or real matrix" ...
+              "with 3 or 4 columns"]);
     elseif (sz(2) == 3)
       s = sparse (m(:,1), m(:,2), m(:,3));
     else
       s = sparse (m(:,1), m(:,2), m(:,3) + 1i*m(:,4));
     endif
   endif
 
 endfunction
diff --git a/scripts/sparse/treeplot.m b/scripts/sparse/treeplot.m
--- a/scripts/sparse/treeplot.m
+++ b/scripts/sparse/treeplot.m
@@ -32,18 +32,17 @@
 ## @end deftypefn
 
 function treeplot (tree, node_style = "ko", edge_style = "r")
 
   if (nargin < 1 || nargin > 3 || nargout > 0)
     print_usage ();
   endif
 
-  if (! ismatrix (tree) || rows (tree) != 1 || ! isnumeric (tree)
-      || ! isvector (tree) || any (tree > length (tree)))
+  if (! isnumeric (tree) || ! isrow (tree) || any (tree > length (tree)))
     error ("treeplot: TREE must be a vector of predecessors");
   endif
 
   ##  Verify node_style
   if (nargin > 1)
     if (isempty (regexp (node_style, '[ox+*]', 'once')))
       node_style = [node_style, "o"];
     endif
