# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1339187407 18000
#      Fri Jun 08 15:30:07 2012 -0500
# Node ID c0a5ab3b92786fe64f50944874c991ef84caa6c5
# Parent  8efcaf5aa233d7adf574fec15520226e4c0248ea
jit_const no longer inherits from jit_instruction

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -1221,17 +1221,17 @@ jit_convert::jit_convert (llvm::Module *
   // for now just init arguments from entry, later we will have to do something
   // more interesting
   for (jit_block::iterator iter = entry_block->begin ();
        iter != entry_block->end (); ++iter)
     if (jit_extract_argument *extract = dynamic_cast<jit_extract_argument *> (*iter))
       arguments.push_back (std::make_pair (extract->name (), true));
 
   convert_llvm to_llvm;
-  function = to_llvm.convert (module, arguments, blocks);
+  function = to_llvm.convert (module, arguments, blocks, constants);
 
 #ifdef OCTAVE_JIT_DEBUG
   std::cout << "-------------------- llvm ir --------------------";
   llvm::raw_os_ostream llvm_cout (std::cout);
   function->print (llvm_cout);
   std::cout << std::endl;
   llvm::verifyFunction (*function);
 #endif
@@ -1284,28 +1284,25 @@ jit_convert::visit_break_command (tree_b
   breaks.push_back (block);
   breaking = true;
 }
 
 void
 jit_convert::visit_colon_expression (tree_colon_expression& expr)
 {
   // in the futher we need to add support for classes and deal with rvalues
-  jit_instruction *base = visit (expr.base ());
-  jit_instruction *limit = visit (expr.limit ());
-  jit_instruction *increment;
+  jit_value *base = visit (expr.base ());
+  jit_value *limit = visit (expr.limit ());
+  jit_value *increment;
   tree_expression *tinc = expr.increment ();
 
   if (tinc)
     increment = visit (tinc);
   else
-    {
-      increment = create<jit_const_scalar> (1);
-      block->append (increment);
-    }
+    increment = create<jit_const_scalar> (1);
 
   result = block->append (create<jit_call> (jit_typeinfo::make_range, base,
                                             limit, increment));
                                             
 }
 
 void
 jit_convert::visit_continue_command (tree_continue_command&)
@@ -1406,19 +1403,17 @@ jit_convert::visit_simple_for_command (t
   blocks.push_back (check_block);
 
   if (! breaking)
     block->append (create<jit_break> (check_block));
   finish_breaks (check_block, continues);
 
   block = check_block;
   const jit_function& add_fn = jit_typeinfo::binary_op (octave_value::op_add);
-  jit_instruction *one = create<jit_const_index> (1);
-  block->append (one);
-
+  jit_value *one = create<jit_const_index> (1);
   jit_call *iter_inc = create<jit_call> (add_fn, iterator, one);
   block->append (iter_inc);
   block->append (create<jit_assign> (iterator, iter_inc));
   check = block->append (create<jit_call> (jit_typeinfo::for_check, control,
                                            iterator));
   block->append (create<jit_cond_break> (check, body, tail));
 
   // breaks will go to our tail
@@ -1523,29 +1518,29 @@ jit_convert::visit_if_command_list (tree
       assert (block);
 
       if (i) // the first block is prev_block, so it has already been added
         blocks.push_back (entry_blocks[i]);
 
       if (! tic->is_else_clause ())
         {
           tree_expression *expr = tic->condition ();
-          jit_instruction *cond = visit (expr);
-          cond = create<jit_call> (&jit_typeinfo::logically_true, cond);
-          block->append (cond);
+          jit_value *cond = visit (expr);
+          jit_instruction *check = create<jit_call> (&jit_typeinfo::logically_true, cond);
+          block->append (check);
 
           jit_block *next = create<jit_block> (block->name () + "a");
           blocks.push_back (next);
           block->append (create<jit_check_error> (next, final_block));
           block = next;
 
           jit_block *body = create<jit_block> (i == 0 ? "if_body" : "ifelse_body");
           blocks.push_back (body);
 
-          jit_instruction *br = create<jit_cond_break> (cond, body,
+          jit_instruction *br = create<jit_cond_break> (check, body,
                                                         entry_blocks[i + 1]);
           block->append (br);
           block = body;
         }
 
       tree_statement_list *stmt_lst = tic->commands ();
       assert (stmt_lst); // jwe: Can this be null?
       stmt_lst->accept (*this);
@@ -1610,18 +1605,16 @@ jit_convert::visit_constant (tree_consta
     }
   else if (v.is_range ())
     {
       Range rv = v.range_value ();
       result = create<jit_const_range> (rv);
     }
   else
     fail ("Unknown constant");
-
-  block->append (result);
 }
 
 void
 jit_convert::visit_fcn_handle (tree_fcn_handle&)
 {
   fail ();
 }
 
@@ -1655,17 +1648,17 @@ jit_convert::visit_return_list (tree_ret
   fail ();
 }
 
 void
 jit_convert::visit_simple_assignment (tree_simple_assignment& tsa)
 {
   // resolve rhs
   tree_expression *rhs = tsa.right_hand_side ();
-  jit_instruction *rhsv = visit (rhs);
+  jit_value *rhsv = visit (rhs);
 
   // resolve lhs
   tree_expression *lhs = tsa.left_hand_side ();
   if (! lhs->is_identifier ())
     fail ();
 
   std::string lhs_name = lhs->name ();
   result = do_assign (lhs_name, rhsv, tsa.print_result ());
@@ -1688,17 +1681,17 @@ jit_convert::visit_statement (tree_state
         {
           tree_identifier *id = dynamic_cast<tree_identifier *> (expr);
 
           do_bind_ans = (! id->is_variable ());
         }
       else
         do_bind_ans = (! expr->is_assignment_expression ());
 
-      jit_instruction *expr_result = visit (expr);
+      jit_value *expr_result = visit (expr);
 
       if (do_bind_ans)
         do_assign ("ans", expr_result, expr->print_result ());
       else if (expr->is_identifier () && expr->print_result ())
         {
           // FIXME: ugly hack, we need to come up with a way to pass
           // nargout to visit_identifier
           const jit_function& fn = jit_typeinfo::print_value ();
@@ -1779,40 +1772,40 @@ jit_convert::get_variable (const std::st
   jit_type *type = jit_typeinfo::type_of (val);
   jit_extract_argument *extract;
   extract = create<jit_extract_argument> (type, var);
   entry_block->prepend (extract);
 
   return vmap[vname] = var;
 }
 
-jit_instruction *
-jit_convert::do_assign (const std::string& lhs, jit_instruction *rhs,
+jit_value *
+jit_convert::do_assign (const std::string& lhs, jit_value *rhs,
                         bool print)
 {
   jit_variable *var = get_variable (lhs);
   block->append (create<jit_assign> (var, rhs));
 
   if (print)
     {
       const jit_function& print_fn = jit_typeinfo::print_value ();
       jit_const_string *name = create<jit_const_string> (lhs);
       block->append (create<jit_call> (print_fn, name, var));
     }
 
-  return rhs;
+  return var;
 }
 
-jit_instruction *
+jit_value *
 jit_convert::visit (tree& tee)
 {
   result = 0;
   tee.accept (*this);
 
-  jit_instruction *ret = result;
+  jit_value *ret = result;
   result = 0;
   return ret;
 }
 
 void
 jit_convert::merge_blocks (void)
 {
   for (block_list::iterator iter = blocks.begin (); iter != blocks.end ();
@@ -1985,17 +1978,18 @@ jit_convert::release_placer::operator() 
       instr->push_variable ();
     }
 }
 
 // -------------------- jit_convert::convert_llvm --------------------
 llvm::Function *
 jit_convert::convert_llvm::convert (llvm::Module *module,
                                     const std::vector<std::pair< std::string, bool> >& args,
-                                    const std::list<jit_block *>& blocks)
+                                    const std::list<jit_block *>& blocks,
+                                    const std::list<jit_value *>& constants)
 {
   jit_type *any = jit_typeinfo::get_any ();
 
   // argument is an array of octave_base_value*, or octave_base_value**
   llvm::Type *arg_type = any->to_llvm (); // this is octave_base_value*
   arg_type = arg_type->getPointerTo ();
   llvm::FunctionType *ft = llvm::FunctionType::get (llvm::Type::getVoidTy (context),
                                                     arg_type, false);
@@ -2022,16 +2016,22 @@ jit_convert::convert_llvm::convert (llvm
           llvm::BasicBlock *block = llvm::BasicBlock::Create (context, jblock->name (),
                                                               function);
           jblock->stash_llvm (block);
         }
 
       jit_block *first = *blocks.begin ();
       builder.CreateBr (first->to_llvm ());
 
+      // constants aren't in the IR, we visit those first
+      for (std::list<jit_value *>::const_iterator iter = constants.begin ();
+           iter != constants.end (); ++iter)
+        if (! isa<jit_instruction> (*iter))
+          visit (*iter);
+
       // convert all instructions
       for (biter = blocks.begin (); biter != blocks.end (); ++biter)
         visit (*biter);
 
       // now finish phi nodes
       for (biter = blocks.begin (); biter != blocks.end (); ++biter)
         {
           jit_block& block = **biter;
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -926,32 +926,32 @@ private:
 
 // defnie accept methods for subclasses
 #define JIT_VALUE_ACCEPT(clname)                \
   virtual void accept (jit_ir_walker& walker);
 
 template <typename T, jit_type *(*EXTRACT_T)(void), typename PASS_T,
           bool QUOTE>
 class
-jit_const : public jit_instruction
+jit_const : public jit_value
 {
 public:
   typedef PASS_T pass_t;
 
   jit_const (PASS_T avalue) : mvalue (avalue)
   {
     stash_type (EXTRACT_T ());
   }
 
   PASS_T value (void) const { return mvalue; }
 
   virtual std::ostream& print (std::ostream& os, size_t indent) const
   {
     print_indent (os, indent);
-    short_print (os) << " = ";
+    jit_print (os, type ()) << ": ";
     if (QUOTE)
       os << "\"";
     os << mvalue;
     if (QUOTE)
       os << "\"";
     return os;
   }
 
@@ -1321,17 +1321,17 @@ public:
 private:
   jit_variable *mdest;
 };
 
 class
 jit_assign : public jit_assign_base
 {
 public:
-  jit_assign (jit_variable *adest, jit_instruction *asrc)
+  jit_assign (jit_variable *adest, jit_value *asrc)
     : jit_assign_base (adest, adest, asrc) {}
 
   jit_instruction *src (void) const
   {
     return static_cast<jit_instruction *> (argument (1));
   }
 
   virtual void push_variable (void)
@@ -1863,17 +1863,17 @@ public:
 private:
   typedef std::list<jit_block *> block_list;
   typedef block_list::iterator block_iterator;
 
   std::vector<std::pair<std::string, bool> > arguments;
   type_bound_vector bounds;
 
   // used instead of return values from visit_* functions
-  jit_instruction *result;
+  jit_value *result;
 
   jit_block *entry_block;
 
   jit_block *final_block;
 
   jit_block *block;
 
   llvm::Function *function;
@@ -1888,22 +1888,22 @@ private:
 
   size_t iterator_count;
 
   typedef std::map<std::string, jit_variable *> vmap_t;
   vmap_t vmap;
 
   jit_variable *get_variable (const std::string& vname);
 
-  jit_instruction *do_assign (const std::string& lhs, jit_instruction *rhs,
-                              bool print);
+  jit_value *do_assign (const std::string& lhs, jit_value *rhs, bool print);
+                        
 
-  jit_instruction *visit (tree *tee) { return visit (*tee); }
+  jit_value *visit (tree *tee) { return visit (*tee); }
 
-  jit_instruction *visit (tree& tee);
+  jit_value *visit (tree& tee);
 
   void append_users (jit_value *v)
   {
     for (jit_use *use = v->first_use (); use; use = use->next ())
       worklist.push_back (use->user ());
   }
 
   void track_value (jit_value *value)
@@ -1962,17 +1962,18 @@ private:
 
   // this case is much simpler, just convert from the jit ir to llvm
   class
   convert_llvm : public jit_ir_walker
   {
   public:
     llvm::Function *convert (llvm::Module *module,
                              const std::vector<std::pair<std::string, bool> >& args,
-                             const std::list<jit_block *>& blocks);
+                             const std::list<jit_block *>& blocks,
+                             const std::list<jit_value *>& constants);
 
 #define JIT_METH(clname)                        \
     virtual void visit (jit_ ## clname&);
 
     JIT_VISIT_IR_CLASSES;
 
 #undef JIT_METH
   private:
