# HG changeset patch
# User Rik <rik@octave.org>
# Date 1374462963 25200
#      Sun Jul 21 20:16:03 2013 -0700
# Node ID 8d84dc5f5b5de55dbf94a30ffc44d04dd0fa99ff
# Parent  02679492b0c60c27c7a445b08428d064ea0096d9
acinclude.m4: Use m4 quote '[' rather than '"' in AC_MSG_ERROR.
Alphebetize macro list.  Remove needless whitespace at end of lines.

* m4/acinclude.m4: Use m4 quote '[' rather than '"' in AC_MSG_ERROR.
Alphebetize macro list.  Remove needless whitespace at end of lines.

diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1,24 +1,24 @@
 dnl aclocal.m4 -- extra macros for configuring Octave
 dnl
 dnl Copyright (C) 1995-2012 John W. Eaton
-dnl 
+dnl
 dnl This file is part of Octave.
-dnl 
+dnl
 dnl Octave is free software; you can redistribute it and/or modify it
 dnl under the terms of the GNU General Public License as published by the
 dnl Free Software Foundation; either version 3 of the License, or (at
 dnl your option) any later version.
-dnl 
+dnl
 dnl Octave is distributed in the hope that it will be useful, but WITHOUT
 dnl ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 dnl FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 dnl for more details.
-dnl 
+dnl
 dnl You should have received a copy of the GNU General Public License
 dnl along with Octave; see the file COPYING.  If not, see
 dnl <http://www.gnu.org/licenses/>.
 dnl
 dnl
 dnl Copyright (C) 2008 - 2009 Free Software Foundation, Inc.
 dnl
 dnl If needed, define the m4_ifblank and m4_ifnblank macros from autoconf 2.64
@@ -79,17 +79,17 @@ AC_DEFUN([OCTAVE_CC_FLAG], [
     AC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],
       [eval "octave_cv_cc_flag_$ac_safe=yes"],
       [eval "octave_cv_cc_flag_$ac_safe=no"])
     CFLAGS="$ac_octave_save_CFLAGS"
     AC_LANG_POP(C)
   ])
   if eval "test \"`echo '$octave_cv_cc_flag_'$ac_safe`\" = yes"; then
     AC_MSG_RESULT([yes])
-    ifelse([$2], , 
+    ifelse([$2], ,
       [CFLAGS="$CFLAGS $1"
       AC_MSG_RESULT([adding $1 to CFLAGS])], [$2])
   else
     AC_MSG_RESULT([no])
     ifelse([$3], , , [$3])
   fi
 ])
 dnl
@@ -142,17 +142,17 @@ AC_DEFUN([OCTAVE_CHECK_FFTW_THREADS], [
   CPPFLAGS="$ac_octave_save_CPPFLAGS"
   LDFLAGS="$ac_octave_save_LDFLAGS"
   LIBS="$ac_octave_save_LIBS"
 ])
 dnl
 dnl Check whether a math mapper function is available in <cmath>.
 dnl Will define HAVE_CMATH_FUNC if there is a double variant and
 dnl HAVE_CMATH_FUNCF if there is a float variant.
-dnl Currently capable of checking for functions with single 
+dnl Currently capable of checking for functions with single
 dnl argument and returning bool/int/real.
 dnl
 AC_DEFUN([OCTAVE_CHECK_FUNC_CMATH], [
   ac_safe=`echo "$1" | sed 'y% ./+-:=%___p___%'`
 
   AC_CACHE_CHECK([for std::$1 in <cmath>],
     [octave_cv_func_cmath_$ac_safe],
     [AC_LANG_PUSH(C++)
@@ -237,17 +237,17 @@ AC_DEFUN([OCTAVE_CHECK_FUNC_FORTRAN_ISNA
         print *, 'x is NaN'
       end if
       if (isnan(y)) then
         print *, 'y is NaN'
       end if
       end program
 ]],
       octave_cv_func_fortran_isnan=yes, octave_cv_func_fortran_isnan=no)
-    AC_LANG_POP(Fortran 77)      
+    AC_LANG_POP(Fortran 77)
   ])
 ])
 dnl
 dnl Check if function gluTessCallback is called with "(...)".
 dnl
 AC_DEFUN([OCTAVE_CHECK_FUNC_GLUTESSCALLBACK_THREEDOTS], [
   AC_CACHE_CHECK([whether gluTessCallback is called with "(...)"],
     [octave_cv_func_glutesscallback_threedots],
@@ -262,17 +262,17 @@ AC_DEFUN([OCTAVE_CHECK_FUNC_GLUTESSCALLB
         GLvoid (*func)(...);
         gluTessCallback(0, 0, func);
         ]])],
       octave_cv_func_glutesscallback_threedots=yes,
       octave_cv_func_glutesscallback_threedots=no)
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_func_glutesscallback_threedots = yes; then
-    AC_DEFINE(HAVE_GLUTESSCALLBACK_THREEDOTS, 1, 
+    AC_DEFINE(HAVE_GLUTESSCALLBACK_THREEDOTS, 1,
       [Define to 1 if gluTessCallback is called with (...).])
   fi
 ])
 dnl
 dnl Check whether Qscintilla SetPlaceholderText function exists.
 dnl FIXME: This test uses a version number.  It potentially could
 dnl        be re-written to actually call the function, but is it worth it?
 dnl
@@ -290,17 +290,17 @@ AC_DEFUN([OCTAVE_CHECK_FUNC_SETPLACEHOLD
         #endif
         ]])],
       octave_cv_func_setplaceholdertext=yes,
       octave_cv_func_setplaceholdertext=no)
     CPPFLAGS="$ac_octave_save_CPPFLAGS"
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_func_setplaceholdertext = yes; then
-    AC_DEFINE(HAVE_SETPLACEHOLDERTEXT, 1, 
+    AC_DEFINE(HAVE_SETPLACEHOLDERTEXT, 1,
       [Define to 1 if you have the Qt SetPlaceholderText function.])
   fi
 ])
 dnl
 dnl Check whether HDF5 library has version 1.6 API functions.
 dnl
 AC_DEFUN([OCTAVE_CHECK_HDF5_HAS_VER_16_API], [
   AC_CACHE_CHECK([whether HDF5 library has enforced version 1.6 API],
@@ -465,33 +465,33 @@ doit (void)
   ip[3] = 1;   // NB blocksize in recurrence
   ip[4] = 0;   // nconv, number of Ritz values that satisfy convergence
   ip[5] = 0;   // ip[5] not referenced
   ip[6] = 1;   // mode
   ip[7] = 0;   // ip[7] to ip[10] are return values
   ip[8] = 0;
   ip[9] = 0;
   ip[10] = 0;
- 
+
   int *ipntr = new int [14];
 
   int k = 1;
   int p = 3;
   int lwork = 3 * p * (p + 2);
 
   double *v = new double [n * (p + 1)];
   double *workl = new double [lwork + 1];
   double *workd = new double [3 * n + 1];
 
   int ido = 0;
   int info = 0;
 
   double tol = DBL_EPSILON;
 
-  do 
+  do
     {
       F77_FUNC (dnaupd, DNAUPD) (ido, "I", n, "LM", k, tol, resid, p,
                                  v, n, ip, ipntr, workd, workl, lwork,
                                  info, 1L, 2L);
 
       if (ido == -1 || ido == 1 || ido == 2)
         {
           double *x = workd + ipntr[0] - 1;
@@ -504,17 +504,17 @@ doit (void)
         {
           if (info < 0)
             {
               return;  // Error
             }
 
           break;
         }
-    } 
+    }
   while (1);
 
   int *sel = new int [p];
 
   // In Octave, the dimensions of dr and di are k+1, but k+2 avoids segfault
   double *dr = new double [k + 1];
   double *di = new double [k + 1];
   double *workev = new double [3 * p];
@@ -647,17 +647,17 @@ AC_DEFUN([OCTAVE_CHECK_LIB_OPENGL], [
             #if HAVE_WINDOWS_H
             # include <windows.h>
             #endif
             #if defined (HAVE_GL_GL_H)
             # include <GL/gl.h>
             #elif defined (HAVE_OPENGL_GL_H)
             # include <OpenGL/gl.h>
             #endif
-            ]], [[ 
+            ]], [[
             glEnable(GL_SMOOTH);
             ]])], [OPENGL_LIBS="-lopengl32 -lglu32"])
 
           LIBS="$save_LIBS"
           if test "x$OPENGL_LIBS" != "x"; then
             AC_MSG_RESULT([yes])
           else
             AC_MSG_RESULT([no])
@@ -710,17 +710,17 @@ AC_DEFUN([OCTAVE_CHECK_LIB_QHULL_OK], [
         #ifdef NEED_QHULL_VERSION
           char *qh_version = "version";
         #endif
         ]], [[
         int dim = 2;
         int n = 4;
         coordT points[8] = { -0.5, -0.5, -0.5, 0.5, 0.5, -0.5, 0.5, 0.5 };
         boolT ismalloc = 0;
-        return qh_new_qhull (dim, n, points, ismalloc, "qhull ", 0, stderr); 
+        return qh_new_qhull (dim, n, points, ismalloc, "qhull ", 0, stderr);
       ]])],
       octave_cv_lib_qhull_ok=yes,
       octave_cv_lib_qhull_ok=no,
       octave_cv_lib_qhull_ok=yes)
   ])
   if test $octave_cv_lib_qhull_ok = yes; then
     $1
     :
@@ -735,17 +735,17 @@ dnl
 AC_DEFUN([OCTAVE_CHECK_LIB_TERMLIB], [
   TERM_LIBS=
   ac_octave_save_LIBS="$LIBS"
   AC_SEARCH_LIBS([tputs],
                  [ncurses curses termcap terminfo termlib],
                  [], [])
   LIBS="$ac_octave_save_LIBS"
   case "$ac_cv_search_tputs" in
-    -l*)  
+    -l*)
       TERM_LIBS="$ac_cv_search_tputs"
     ;;
     no)
       warn_termlibs="I couldn't find -ltermcap, -lterminfo, -lncurses, -lcurses, or -ltermlib!"
       AC_MSG_WARN([$warn_termlibs])
     ;;
   esac
 
@@ -771,17 +771,17 @@ AC_DEFUN([OCTAVE_CHECK_OPENMP], [
   CFLAGS="$CFLAGS $1"
   AC_CACHE_VAL([octave_cv_check_openmp],
     [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
         #include <omp.h>
         #include <stdio.h>
         ]], [[
         int main(int argc, char* argv[])
         {
-          _Pragma("omp parallel")  
+          _Pragma("omp parallel")
           printf("Hello, world.\n");
           return 0;
         }
       ]])],
       octave_cv_openmp=yes, octave_cv_openmmp=no, octave_cv_openmp=no)
   ])
   AC_MSG_RESULT([$octave_cv_openmp])
   if test $octave_cv_openmp = yes; then
@@ -823,17 +823,17 @@ AC_DEFUN([OCTAVE_CHECK_QHULL_VERSION], [
         # endif
         # include <qset.h>
         # include <geom.h>
         # include <poly.h>
         # include <io.h>
         #endif
         ]], [[
         const char *tmp = qh_version;
-      ]])], 
+      ]])],
       octave_cv_lib_qhull_version=yes, octave_cv_lib_qhull_version=no)
   ])
   if test $octave_cv_lib_qhull_version = no; then
     AC_DEFINE(NEED_QHULL_VERSION, 1,
       [Define to 1 if the Qhull library needs a qh_version variable defined.])
   fi
 ])
 dnl
@@ -993,34 +993,34 @@ AC_DEFUN([OCTAVE_CXX_COMPLEX_SETTERS], [
         std::complex<double> x;
         x.real (1.0);
         x.imag (2.0);
       ]])],
       octave_cv_cxx_complex_setters=yes, octave_cv_cxx_complex_setters=no)
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_cxx_complex_setters = yes; then
-    AC_DEFINE(HAVE_CXX_COMPLEX_SETTERS, 1, 
+    AC_DEFINE(HAVE_CXX_COMPLEX_SETTERS, 1,
       [Define to 1 if C++ complex class has void real (T) and void imag (T) methods.])
   fi
 ])
 dnl
 dnl Check if the compiler supports dynamic auto arrays.
 dnl
 AC_DEFUN([OCTAVE_CXX_DYNAMIC_AUTO_ARRAYS], [
   AC_CACHE_CHECK([whether C++ supports dynamic auto arrays],
     [octave_cv_cxx_dynamic_auto_arrays],
     [AC_LANG_PUSH(C++)
     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [[
         void test(char *);
         int length();
         char x[length()];
         test(x);
       ]])],
-      octave_cv_cxx_dynamic_auto_arrays=yes, 
+      octave_cv_cxx_dynamic_auto_arrays=yes,
       octave_cv_cxx_dynamic_auto_arrays=no)
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_cxx_dynamic_auto_arrays = yes; then
     AC_DEFINE(HAVE_DYNAMIC_AUTO_ARRAYS, 1,
       [Define to 1 if C++ supports dynamic auto arrays.])
   fi
 ])
@@ -1082,23 +1082,23 @@ AC_DEFUN([OCTAVE_CXX_ISO_COMPLIANT_LIBRA
         digits = 0;
       ]])],
       octave_cv_cxx_iso_compliant_library=yes,
       octave_cv_cxx_iso_compliant_library=no)
     AC_LANG_POP(C++)
   ])
   AC_MSG_RESULT([$octave_cv_cxx_iso_compliant_library])
   if test $octave_cv_cxx_iso_compliant_library = yes; then
-    AC_DEFINE(CXX_ISO_COMPLIANT_LIBRARY, 1, 
+    AC_DEFINE(CXX_ISO_COMPLIANT_LIBRARY, 1,
       [Define to 1 if your C++ runtime library is ISO compliant.])
   fi
 ])
 dnl
 dnl Check if C++ compiler needs the new friend template declaration
-dnl syntax. 
+dnl syntax.
 dnl
 AC_DEFUN([OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL], [
   AC_REQUIRE([AC_PROG_CXX])
   AC_MSG_CHECKING([for C++ support for new friend template declaration])
   AC_CACHE_VAL([octave_cv_cxx_new_friend_template_decl],
     [AC_LANG_PUSH(C++)
     rm -f conftest.h
     cat > conftest.h <<EOB
@@ -1136,17 +1136,17 @@ AC_DEFUN([OCTAVE_CXX_PLACEMENT_DELETE], 
   AC_CACHE_CHECK([whether <new> defines placement delete operator],
     [octave_cv_cxx_placement_delete],
     [AC_LANG_PUSH(C++)
     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
         #include <new>
         ]], [[
         operator delete((void *)0, (void *)0);
       ]])],
-      octave_cv_cxx_placement_delete=yes, 
+      octave_cv_cxx_placement_delete=yes,
       octave_cv_cxx_placement_delete=no)
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_cxx_placement_delete = yes; then
     AC_DEFINE(HAVE_PLACEMENT_DELETE, 1,
       [Define to 1 if C++ supports operator delete(void *, void *).])
   fi
 ])
@@ -1225,44 +1225,44 @@ dnl    except for the shifts.  Shifts ar
 dnl
 AC_DEFUN([OCTAVE_FAST_INT_OPS], [
   AC_CACHE_CHECK([whether fast integer arithmetics is usable],
     [octave_cv_fast_int_ops],
     [AC_LANG_PUSH(C++)
     AC_RUN_IFELSE([AC_LANG_PROGRAM([[
         #include <limits>
         template<class UT, class ST>
-        static bool 
+        static bool
         do_test (UT, ST)
         {
           volatile ST s = std::numeric_limits<ST>::min () / 3;
           volatile UT u = static_cast<UT> (s);
           if (*(reinterpret_cast<volatile ST *> (&u)) != s) return true;
-          
+
           u = 0; u = ~u;
           if (*(reinterpret_cast<volatile ST *> (&u)) != -1) return true;
-          
+
           ST sx, sy;
           sx = std::numeric_limits<ST>::max () / 2 + 1;
           sy = std::numeric_limits<ST>::max () / 2 + 2;
           if (static_cast<ST> (static_cast<UT> (sx) + static_cast<UT> (sy))
               != std::numeric_limits<ST>::min () + 1) return true;
           if (static_cast<ST> (static_cast<UT> (sx) - static_cast<UT> (sy))
               != -1) return true;
-          
+
           if ((sx & sy) != (static_cast<UT> (sx) & static_cast<UT> (sy)))
             return true;
           if ((sx | sy) != (static_cast<UT> (sx) | static_cast<UT> (sy)))
             return true;
           if ((sx ^ sy) != (static_cast<UT> (sx) ^ static_cast<UT> (sy)))
             return true;
           if ((-1 >> 1) != -1) return true;
           return false;
         }
-      
+
         #define DO_TEST(T) \
           if (do_test (static_cast<unsigned T> (0), static_cast<signed T> (0)))\
             return sizeof (T);
 
         ]],[[
 
         DO_TEST(char)
         DO_TEST(short)
@@ -1300,17 +1300,17 @@ AC_DEFUN([OCTAVE_HAVE_FRAMEWORK], [
       eval "octave_cv_framework_$1=yes",
       eval "octave_cv_framework_$1=no")
     AC_LANG_POP(C++)
     LDFLAGS="$ac_octave_save_LDFLAGS"
   ])
   if test "$octave_cv_framework_$1" = yes; then
     AC_MSG_RESULT([yes])
     AC_ARG_WITH(framework-m4_tolower($1),
-      [AS_HELP_STRING([--without-framework-m4_tolower($1)], 
+      [AS_HELP_STRING([--without-framework-m4_tolower($1)],
         [don't use framework $1])],
          with_have_framework=$withval, with_have_framework=yes)
     if test "$with_have_framework" = yes; then
       [$4]
       :
     else
       AC_MSG_NOTICE([framework rejected by --without-framework-m4_tolower($1)])
       [$5]
@@ -1344,20 +1344,20 @@ AC_DEFUN([OCTAVE_CANONICAL_HOST], [
 dnl
 dnl Check for IEEE 754 data format.
 dnl
 AC_DEFUN([OCTAVE_IEEE754_DATA_FORMAT], [
   AC_MSG_CHECKING([for IEEE 754 data format])
   AC_CACHE_VAL([octave_cv_ieee754_data_format],
     [AC_RUN_IFELSE([AC_LANG_SOURCE([[
         int
-        main (void) 
+        main (void)
         {
           typedef union { unsigned char c[8]; double d; } ieeebytes;
-           
+
           ieeebytes l = {0x1c, 0xbc, 0x6e, 0xf2, 0x54, 0x8b, 0x11, 0x43};
           ieeebytes b = {0x43, 0x11, 0x8b, 0x54, 0xf2, 0x6e, 0xbc, 0x1c};
 
           return l.d != 1234567891234567.0 && b.d != 1234567891234567.0;
         }
       ]])],
       octave_cv_ieee754_data_format=yes,
       octave_cv_ieee754_data_format=no,
@@ -1376,16 +1376,185 @@ AC_DEFUN([OCTAVE_IEEE754_DATA_FORMAT], [
     ## useful system, so we will abort here.  Anyone wishing to
     ## experiment with building Octave on a system without IEEE
     ## floating point should be capable of removing this check and
     ## the one in the octave_ieee_init function in liboctave/lo-ieee.cc.
     AC_MSG_ERROR([IEEE 754 data format required for building Octave])
   fi
 ])
 dnl
+dnl Check for CallInst::addAttribute API
+dnl
+AC_DEFUN([OCTAVE_LLVM_CALLINST_ADDATTRIBUTE_API], [
+  AC_CACHE_CHECK([check LLVM::CallInst::addAttribute arg type is llvm::Attributes],
+    [octave_cv_callinst_addattribute_arg_is_attributes],
+    [AC_LANG_PUSH(C++)
+      AC_COMPILE_IFELSE(
+        [AC_LANG_PROGRAM([[
+          #include <llvm/Instructions.h>
+          #include <llvm/Attributes.h>
+          #include <llvm/LLVMContext.h>
+          ]], [[
+          llvm::CallInst *callinst;
+          llvm::AttrBuilder attr_builder;
+          attr_builder.addAttribute(llvm::Attributes::StructRet);
+          llvm::Attributes attrs = llvm::Attributes::get(llvm::getGlobalContext(), attr_builder);
+          callinst->addAttribute (1, attrs);
+        ]])],
+        octave_cv_callinst_addattribute_arg_is_attributes=yes,
+        octave_cv_callinst_addattribute_arg_is_attributes=no)
+    AC_LANG_POP(C++)
+  ])
+  if test $octave_cv_callinst_addattribute_arg_is_attributes = yes; then
+    AC_DEFINE(CALLINST_ADDATTRIBUTE_ARG_IS_ATTRIBUTES, 1,
+      [Define to 1 if llvm::CallInst:addAttribute arg type is llvm::Attributes.])
+  else
+    AC_CACHE_CHECK([check LLVM::CallInst::addAttribute arg type is llvm::Attribute],
+      [octave_cv_callinst_addattribute_arg_is_attribute],
+      [AC_LANG_PUSH(C++)
+        AC_COMPILE_IFELSE(
+          [AC_LANG_PROGRAM([[
+            #include <llvm/Instructions.h>
+            #include <llvm/Attributes.h>
+            ]], [[
+            llvm::CallInst *callinst;
+            callinst->addAttribute (1, llvm::Attribute::StructRet);
+          ]])],
+          octave_cv_callinst_addattribute_arg_is_attribute=yes,
+          octave_cv_callinst_addattribute_arg_is_attribute=no)
+      AC_LANG_POP(C++)
+    ])
+    if test $octave_cv_callinst_addattribute_arg_is_attribute = no; then
+      AC_MSG_ERROR([llvm::CallInst::addAttribute is required.])
+    fi
+  fi
+])
+dnl
+dnl Detect TargetData.h or DataLayout.h.
+dnl
+AC_DEFUN([OCTAVE_LLVM_DATALAYOUT_HEADER], [
+  AC_CHECK_HEADER([llvm/DataLayout.h], [
+    octave_is_datalayout_header=yes], [
+    AC_CHECK_HEADER([llvm/Target/TargetData.h], [
+      octave_is_datalayout_header=no], [
+      AC_MSG_ERROR([DataLayout.h or Target/TargetData.h is required.])
+    ])
+  ])
+  if test $octave_is_datalayout_header = yes; then
+    AC_DEFINE(HAVE_DATALAYOUT, 1,
+      [Define to 1 if DataLayout.h exist.])
+  fi
+])
+dnl
+dnl Check for Function::addAttribute API
+dnl
+AC_DEFUN([OCTAVE_LLVM_FUNCTION_ADDATTRIBUTE_API], [
+  AC_CACHE_CHECK([check llvm::Function::addAttribute arg type is llvm::Attributes],
+    [octave_cv_function_addattribute_arg_is_attributes],
+    [AC_LANG_PUSH(C++)
+      AC_COMPILE_IFELSE(
+        [AC_LANG_PROGRAM([[
+          #include <llvm/Function.h>
+          #include <llvm/Attributes.h>
+          #include <llvm/LLVMContext.h>
+          ]], [[
+          llvm::Function *llvm_function;
+          llvm::AttrBuilder attr_builder;
+          attr_builder.addAttribute(llvm::Attributes::StructRet);
+          llvm::Attributes attrs = llvm::Attributes::get(llvm::getGlobalContext(), attr_builder);
+          llvm_function->addAttribute (1, attrs);
+        ]])],
+        octave_cv_function_addattribute_arg_is_attributes=yes,
+        octave_cv_function_addattribute_arg_is_attributes=no)
+    AC_LANG_POP(C++)
+  ])
+  if test $octave_cv_function_addattribute_arg_is_attributes = yes; then
+    AC_DEFINE(FUNCTION_ADDATTRIBUTE_ARG_IS_ATTRIBUTES, 1,
+      [Define to 1 if llvm::Function:addAttribute arg type is llvm::Attributes.])
+  else
+    AC_CACHE_CHECK([check llvm::Function::addAttribute arg type is llvm::Attribute],
+      [octave_cv_function_addattribute_arg_is_attribute],
+      [AC_LANG_PUSH(C++)
+        AC_COMPILE_IFELSE(
+          [AC_LANG_PROGRAM([[
+            #include <llvm/Function.h>
+            #include <llvm/Attributes.h>
+            ]], [[
+            llvm::Function *llvm_function;
+            llvm_function->addAttribute (1, llvm::Attribute::StructRet);
+          ]])],
+          octave_cv_function_addattribute_arg_is_attribute=yes,
+          octave_cv_function_addattribute_arg_is_attribute=no)
+      AC_LANG_POP(C++)
+    ])
+    if test $octave_cv_function_addattribute_arg_is_attribute = no; then
+      AC_MSG_ERROR([llvm::Function::addAttribute is required.])
+    fi
+  fi
+])
+dnl
+dnl Check for Function::addFnAttr API
+dnl
+AC_DEFUN([OCTAVE_LLVM_FUNCTION_ADDFNATTR_API], [
+  AC_CACHE_CHECK([check LLVM::Function::addFnAttr arg type is llvm::Attributes],
+    [octave_cv_function_addfnattr_arg_is_attributes],
+    [AC_LANG_PUSH(C++)
+      AC_COMPILE_IFELSE(
+        [AC_LANG_PROGRAM([[
+          #include <llvm/Function.h>
+          #include <llvm/Attributes.h>
+          ]], [[
+          llvm::Function *llvm_function;
+          llvm_function->addFnAttr (llvm::Attributes::AlwaysInline);
+        ]])],
+        octave_cv_function_addfnattr_arg_is_attributes=yes,
+        octave_cv_function_addfnattr_arg_is_attributes=no)
+    AC_LANG_POP(C++)
+  ])
+  if test $octave_cv_function_addfnattr_arg_is_attributes = yes; then
+    AC_DEFINE(FUNCTION_ADDFNATTR_ARG_IS_ATTRIBUTES, 1,
+      [Define to 1 if llvm::Function:addFnAttr arg type is llvm::Attributes.])
+  else
+    AC_CACHE_CHECK([check llvm::Function::addFnAttr arg type is llvm::Attribute],
+      [octave_cv_function_addfnattr_arg_is_attribute],
+      [AC_LANG_PUSH(C++)
+        AC_COMPILE_IFELSE(
+          [AC_LANG_PROGRAM([[
+            #include <llvm/Function.h>
+            #include <llvm/Attributes.h>
+            ]], [[
+            llvm::Function *llvm_function;
+            llvm_function->addFnAttr (llvm::Attribute::AlwaysInline);
+          ]])],
+          octave_cv_function_addfnattr_arg_is_attribute=yes,
+          octave_cv_function_addfnattr_arg_is_attribute=no)
+      AC_LANG_POP(C++)
+    ])
+    if test $octave_cv_function_addfnattr_arg_is_attribute = no; then
+      AC_MSG_ERROR([llvm::Function::addFnAttr is required.])
+    fi
+  fi
+])
+dnl
+dnl Check whether IRBuilder.h is in Support directory.
+dnl
+AC_DEFUN([OCTAVE_LLVM_IRBUILDER_HEADER], [
+  AC_CHECK_HEADER([llvm/IRBuilder.h], [
+    octave_irbuilder_header_in_support_dir=no], [
+    AC_CHECK_HEADER([llvm/Support/IRBuilder.h], [
+      octave_irbuilder_header_in_support_dir=yes], [
+      AC_MSG_ERROR([IRBuilder.h is required.])
+    ])
+  ])
+  if test $octave_irbuilder_header_in_support_dir = yes; then
+    AC_DEFINE(IRBUILDER_HEADER_IN_SUPPORT_DIR, 1,
+      [Define to 1 if IRBuilder.h in Support directory.])
+  fi
+])
+dnl
 dnl Check for ar.
 dnl
 AC_DEFUN([OCTAVE_PROG_AR], [
   if test -z "$AR"; then
     AR=ar
   fi
   AC_SUBST(AR)
 
@@ -1569,17 +1738,17 @@ dnl Check for gperf.
 dnl
 AC_DEFUN([OCTAVE_PROG_GPERF], [
   AC_CHECK_PROG(GPERF, gperf, gperf, [])
   if test -z "$GPERF"; then
     GPERF='$(top_srcdir)/build-aux/missing gperf'
     warn_gperf="
 
 I didn't find gperf, but it's only a problem if you need to
-reconstruct oct-gperf.h 
+reconstruct oct-gperf.h
 "
     OCTAVE_CONFIGURE_WARNING([warn_gperf])
     GPERF='$(top_srcdir)/build-aux/missing gperf'
   fi
   AC_SUBST(GPERF)
 ])
 dnl
 dnl Check for makeinfo.
@@ -1756,17 +1925,17 @@ AC_DEFUN([OCTAVE_SET_DEFAULT], [
 ])
 dnl
 dnl Check whether SuiteSparse_time is required by UMFPACK.
 dnl UMFPACK >= 4 requires linking in another library for SuiteSparse_time.
 dnl
 dnl Macro assumes that the check for umfpack has already been performed.
 dnl
 AC_DEFUN([OCTAVE_UMFPACK_NEED_SUITESPARSE_TIME], [
-  AC_CACHE_CHECK([whether UMFPACK needs SuiteSparse_time function], 
+  AC_CACHE_CHECK([whether UMFPACK needs SuiteSparse_time function],
     [octave_cv_umfpack_need_suitesparse_time],
     [AC_LANG_PUSH(C)
     AC_LINK_IFELSE([AC_LANG_PROGRAM([[
         #if defined (HAVE_SUITESPARSE_UMFPACK_H)
         # include <suitesparse/umfpack.h>
         #elif defined (HAVE_UFSPARSE_UMFPACK_H)
         # include <ufsparse/umfpack.h>
         #elif defined (HAVE_UMFPACK_UMFPACK_H)
@@ -1809,251 +1978,82 @@ AC_DEFUN([OCTAVE_UMFPACK_SEPARATE_SPLIT]
         #define UMFPACK_NAME(name) umfpack_zl_ ## name
         #else
         typedef int idx_type;
         #define UMFPACK_NAME(name) umfpack_zi_ ## name
         #endif
         idx_type n = 5;
         idx_type Ap[] = {0, 2, 5, 9, 10, 12};
         idx_type Ai[]  = {0, 1, 0, 2, 4, 1, 2, 3, 4, 2, 1, 4};
-        double Ax[] = {2., 0., 3., 0., 3., 0., -1., 0., 4., 0., 4., 0., 
+        double Ax[] = {2., 0., 3., 0., 3., 0., -1., 0., 4., 0., 4., 0.,
                       -3., 0., 1., 0., 2., 0., 2., 0., 6., 0., 1., 0.};
         double br[] = {8., 45., -3., 3., 19.};
         double bi[] = {0., 0., 0., 0., 0.};
         int main (void)
         {
           double *null = (double *) NULL ;
           double *x = (double *)malloc (2 * n * sizeof(double));
           idx_type i ;
           void *Symbolic, *Numeric ;
           (void) UMFPACK_NAME (symbolic) (n, n, Ap, Ai, Ax, null, &Symbolic, null, null) ;
           (void) UMFPACK_NAME (numeric) (Ap, Ai, Ax, null, Symbolic, &Numeric, null, null) ;
           UMFPACK_NAME (free_symbolic) (&Symbolic) ;
-          (void) UMFPACK_NAME (solve) (0, Ap, Ai, Ax, null, x, null, br, bi, 
+          (void) UMFPACK_NAME (solve) (0, Ap, Ai, Ax, null, x, null, br, bi,
                                    Numeric, null, null) ;
           UMFPACK_NAME (free_numeric) (&Numeric) ;
-          for (i = 0; i < n; i++, x+=2) 
+          for (i = 0; i < n; i++, x+=2)
             if (fabs (*x - i - 1.) > 1.e-13)
               return (1);
           return (0) ;
         }
       ]])],
       octave_cv_umfpack_separate_split=yes,
       octave_cv_umfpack_separate_split=no,
       octave_cv_umfpack_separate_split=yes)
   ])
   if test "$cross_compiling" = yes; then
     AC_MSG_RESULT([$octave_cv_umfpack_separate_split assumed for cross compilation])
   else
     AC_MSG_RESULT([$octave_cv_umfpack_separate_split])
   fi
   if test $octave_cv_umfpack_separate_split = yes; then
-    AC_DEFINE(UMFPACK_SEPARATE_SPLIT, 1, 
+    AC_DEFINE(UMFPACK_SEPARATE_SPLIT, 1,
       [Define to 1 if the UMFPACK Complex solver allows matrix and RHS to be split independently.])
   fi
 ])
 dnl
 dnl Check for unordered map headers and whether tr1 namespace is
 dnl required.
 dnl
 AC_DEFUN([OCTAVE_UNORDERED_MAP_HEADERS], [
   AC_CHECK_HEADERS([unordered_map], [],
     [AC_CHECK_HEADERS([tr1/unordered_map])])
-  AC_CACHE_CHECK([whether unordered_map requires tr1 namespace], 
+  AC_CACHE_CHECK([whether unordered_map requires tr1 namespace],
     [octave_cv_header_require_tr1_namespace],
     [AC_LANG_PUSH(C++)
     octave_cv_header_require_tr1_namespace=no
     if test $ac_cv_header_unordered_map = yes; then
       ## Have <unordered_map>, but still have to check whether
       ## tr1 namespace is required (like MSVC, for instance).
       AC_COMPILE_IFELSE(
         [AC_LANG_PROGRAM([[
           #include <unordered_map>
           ]], [[
           std::unordered_map<int,int> m;
         ]])],
-        octave_cv_header_require_tr1_namespace=no, 
+        octave_cv_header_require_tr1_namespace=no,
         octave_cv_header_require_tr1_namespace=yes)
     elif test $ac_cv_header_tr1_unordered_map = yes; then
       octave_cv_header_require_tr1_namespace=yes
     fi
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_header_require_tr1_namespace = yes; then
-    AC_DEFINE(USE_UNORDERED_MAP_WITH_TR1, 1, 
+    AC_DEFINE(USE_UNORDERED_MAP_WITH_TR1, 1,
       [Define to 1 if unordered_map requires the use of tr1 namespace.])
   fi
 ])
-dnl
-dnl Check whether IRBuilder.h is in Support directory.
-dnl
-AC_DEFUN([OCTAVE_LLVM_IRBUILDER_HEADER], [
-  AC_CHECK_HEADER([llvm/IRBuilder.h], [
-    octave_irbuilder_header_in_support_dir=no], [
-    AC_CHECK_HEADER([llvm/Support/IRBuilder.h], [
-      octave_irbuilder_header_in_support_dir=yes], [
-      AC_MSG_ERROR("IRBuilder.h is required.")
-    ])
-  ])
-  if test $octave_irbuilder_header_in_support_dir = yes; then
-    AC_DEFINE(IRBUILDER_HEADER_IN_SUPPORT_DIR, 1, 
-      [Define to 1 if IRBuilder.h in Support directory.])
-  fi
-])
-dnl
-dnl Detect TargetData.h or DataLayout.h.
-dnl
-AC_DEFUN([OCTAVE_LLVM_DATALAYOUT_HEADER], [
-  AC_CHECK_HEADER([llvm/DataLayout.h], [
-    octave_is_datalayout_header=yes], [
-    AC_CHECK_HEADER([llvm/Target/TargetData.h], [
-      octave_is_datalayout_header=no], [
-      AC_MSG_ERROR("DataLayout.h or Target/TargetData.h is required.")
-    ])
-  ])
-  if test $octave_is_datalayout_header = yes; then
-    AC_DEFINE(HAVE_DATALAYOUT, 1, 
-      [Define to 1 if DataLayout.h exist.])
-  fi
-])
-dnl
-dnl Check for Function::addAttribute API
-dnl
-AC_DEFUN([OCTAVE_LLVM_FUNCTION_ADDATTRIBUTE_API], [
-  AC_CACHE_CHECK([check llvm::Function::addAttribute arg type is llvm::Attributes], 
-    [octave_cv_function_addattribute_arg_is_attributes],
-    [AC_LANG_PUSH(C++)
-      AC_COMPILE_IFELSE(
-        [AC_LANG_PROGRAM([[
-          #include <llvm/Function.h>
-          #include <llvm/Attributes.h>
-          #include <llvm/LLVMContext.h>
-          ]], [[
-          llvm::Function *llvm_function;
-          llvm::AttrBuilder attr_builder;
-          attr_builder.addAttribute(llvm::Attributes::StructRet);
-          llvm::Attributes attrs = llvm::Attributes::get(llvm::getGlobalContext(), attr_builder);
-          llvm_function->addAttribute (1, attrs);
-        ]])],
-        octave_cv_function_addattribute_arg_is_attributes=yes, 
-        octave_cv_function_addattribute_arg_is_attributes=no)
-    AC_LANG_POP(C++)
-  ])
-  if test $octave_cv_function_addattribute_arg_is_attributes = yes; then
-    AC_DEFINE(FUNCTION_ADDATTRIBUTE_ARG_IS_ATTRIBUTES, 1, 
-      [Define to 1 if llvm::Function:addAttribute arg type is llvm::Attributes.])
-  else
-    AC_CACHE_CHECK([check llvm::Function::addAttribute arg type is llvm::Attribute], 
-      [octave_cv_function_addattribute_arg_is_attribute],
-      [AC_LANG_PUSH(C++)
-        AC_COMPILE_IFELSE(
-          [AC_LANG_PROGRAM([[
-            #include <llvm/Function.h>
-            #include <llvm/Attributes.h>
-            ]], [[
-            llvm::Function *llvm_function;
-            llvm_function->addAttribute (1, llvm::Attribute::StructRet);
-          ]])],
-          octave_cv_function_addattribute_arg_is_attribute=yes, 
-          octave_cv_function_addattribute_arg_is_attribute=no)
-      AC_LANG_POP(C++)
-    ])
-    if test $octave_cv_function_addattribute_arg_is_attribute = no; then
-      AC_MSG_ERROR("llvm::Function::addAttribute is required.")      
-    fi
-  fi
-])
-dnl
-dnl Check for Function::addFnAttr API
-dnl
-AC_DEFUN([OCTAVE_LLVM_FUNCTION_ADDFNATTR_API], [
-  AC_CACHE_CHECK([check LLVM::Function::addFnAttr arg type is llvm::Attributes], 
-    [octave_cv_function_addfnattr_arg_is_attributes],
-    [AC_LANG_PUSH(C++)
-      AC_COMPILE_IFELSE(
-        [AC_LANG_PROGRAM([[
-          #include <llvm/Function.h>
-          #include <llvm/Attributes.h>
-          ]], [[
-          llvm::Function *llvm_function;
-          llvm_function->addFnAttr (llvm::Attributes::AlwaysInline);
-        ]])],
-        octave_cv_function_addfnattr_arg_is_attributes=yes, 
-        octave_cv_function_addfnattr_arg_is_attributes=no)
-    AC_LANG_POP(C++)
-  ])
-  if test $octave_cv_function_addfnattr_arg_is_attributes = yes; then
-    AC_DEFINE(FUNCTION_ADDFNATTR_ARG_IS_ATTRIBUTES, 1, 
-      [Define to 1 if llvm::Function:addFnAttr arg type is llvm::Attributes.])
-  else
-    AC_CACHE_CHECK([check llvm::Function::addFnAttr arg type is llvm::Attribute], 
-      [octave_cv_function_addfnattr_arg_is_attribute],
-      [AC_LANG_PUSH(C++)
-        AC_COMPILE_IFELSE(
-          [AC_LANG_PROGRAM([[
-            #include <llvm/Function.h>
-            #include <llvm/Attributes.h>
-            ]], [[
-            llvm::Function *llvm_function;
-            llvm_function->addFnAttr (llvm::Attribute::AlwaysInline);
-          ]])],
-          octave_cv_function_addfnattr_arg_is_attribute=yes, 
-          octave_cv_function_addfnattr_arg_is_attribute=no)
-      AC_LANG_POP(C++)
-    ])
-    if test $octave_cv_function_addfnattr_arg_is_attribute = no; then
-      AC_MSG_ERROR("llvm::Function::addFnAttr is required.")      
-    fi
-  fi
-])
-dnl
-dnl Check for CallInst::addAttribute API
-dnl
-AC_DEFUN([OCTAVE_LLVM_CALLINST_ADDATTRIBUTE_API], [
-  AC_CACHE_CHECK([check LLVM::CallInst::addAttribute arg type is llvm::Attributes], 
-    [octave_cv_callinst_addattribute_arg_is_attributes],
-    [AC_LANG_PUSH(C++)
-      AC_COMPILE_IFELSE(
-        [AC_LANG_PROGRAM([[
-          #include <llvm/Instructions.h>
-          #include <llvm/Attributes.h>
-          #include <llvm/LLVMContext.h>
-          ]], [[
-          llvm::CallInst *callinst;
-          llvm::AttrBuilder attr_builder;
-          attr_builder.addAttribute(llvm::Attributes::StructRet);
-          llvm::Attributes attrs = llvm::Attributes::get(llvm::getGlobalContext(), attr_builder); 
-          callinst->addAttribute (1, attrs);
-        ]])],
-        octave_cv_callinst_addattribute_arg_is_attributes=yes, 
-        octave_cv_callinst_addattribute_arg_is_attributes=no)
-    AC_LANG_POP(C++)
-  ])
-  if test $octave_cv_callinst_addattribute_arg_is_attributes = yes; then
-    AC_DEFINE(CALLINST_ADDATTRIBUTE_ARG_IS_ATTRIBUTES, 1, 
-      [Define to 1 if llvm::CallInst:addAttribute arg type is llvm::Attributes.])
-  else
-    AC_CACHE_CHECK([check LLVM::CallInst::addAttribute arg type is llvm::Attribute], 
-      [octave_cv_callinst_addattribute_arg_is_attribute],
-      [AC_LANG_PUSH(C++)
-        AC_COMPILE_IFELSE(
-          [AC_LANG_PROGRAM([[
-            #include <llvm/Instructions.h>
-            #include <llvm/Attributes.h>
-            ]], [[
-            llvm::CallInst *callinst;
-            callinst->addAttribute (1, llvm::Attribute::StructRet);
-          ]])],
-          octave_cv_callinst_addattribute_arg_is_attribute=yes, 
-          octave_cv_callinst_addattribute_arg_is_attribute=no)
-      AC_LANG_POP(C++)
-    ])
-    if test $octave_cv_callinst_addattribute_arg_is_attribute = no; then
-      AC_MSG_ERROR("llvm::CallInst::addAttribute is required.")      
-    fi    
-  fi
-])
 
 dnl         End of macros written by Octave developers
 dnl ------------------------------------------------------------
 dnl
 
 ##############################################################################
