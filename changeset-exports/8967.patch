# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1236854816 -3600
#      Thu Mar 12 11:46:56 2009 +0100
# Node ID 5bbbf482909ad802dfd67b335bba8f5739d9330b
# Parent  1bba53c0a38dce5200737372289fd10ee9116fff
fix omissions adjusting JR's patches

diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -7587,106 +7587,106 @@ herm_mul (const SparseComplexMatrix& m, 
 {
   SPARSE_FULL_TRANS_MUL (ComplexMatrix, Complex, Complex (0.,0.), conj);
 }
 
 // diag * sparse and sparse * diag
 SparseComplexMatrix
 operator * (const DiagMatrix& d, const SparseComplexMatrix& a)
 {
-  return octave_impl::do_mul_dm_sm<SparseComplexMatrix> (d, a);
+  return do_mul_dm_sm<SparseComplexMatrix> (d, a);
 }
 SparseComplexMatrix
 operator * (const SparseComplexMatrix& a, const DiagMatrix& d)
 {
-  return octave_impl::do_mul_sm_dm<SparseComplexMatrix> (a, d);
+  return do_mul_sm_dm<SparseComplexMatrix> (a, d);
 }
 
 SparseComplexMatrix
 operator * (const ComplexDiagMatrix& d, const SparseMatrix& a)
 {
-  return octave_impl::do_mul_dm_sm<SparseComplexMatrix> (d, a);
+  return do_mul_dm_sm<SparseComplexMatrix> (d, a);
 }
 SparseComplexMatrix
 operator * (const SparseMatrix& a, const ComplexDiagMatrix& d)
 {
-  return octave_impl::do_mul_sm_dm<SparseComplexMatrix> (a, d);
+  return do_mul_sm_dm<SparseComplexMatrix> (a, d);
 }
 
 SparseComplexMatrix
 operator * (const ComplexDiagMatrix& d, const SparseComplexMatrix& a)
 {
-  return octave_impl::do_mul_dm_sm<SparseComplexMatrix> (d, a);
+  return do_mul_dm_sm<SparseComplexMatrix> (d, a);
 }
 SparseComplexMatrix
 operator * (const SparseComplexMatrix& a, const ComplexDiagMatrix& d)
 {
-  return octave_impl::do_mul_sm_dm<SparseComplexMatrix> (a, d);
+  return do_mul_sm_dm<SparseComplexMatrix> (a, d);
 }
 
 SparseComplexMatrix
 operator + (const ComplexDiagMatrix& d, const SparseMatrix& a)
 {
-  return octave_impl::do_add_dm_sm<SparseComplexMatrix> (d, a);
+  return do_add_dm_sm<SparseComplexMatrix> (d, a);
 }
 SparseComplexMatrix
 operator + (const DiagMatrix& d, const SparseComplexMatrix& a)
 {
-  return octave_impl::do_add_dm_sm<SparseComplexMatrix> (d, a);
+  return do_add_dm_sm<SparseComplexMatrix> (d, a);
 }
 SparseComplexMatrix
 operator + (const ComplexDiagMatrix& d, const SparseComplexMatrix& a)
 {
-  return octave_impl::do_add_dm_sm<SparseComplexMatrix> (d, a);
+  return do_add_dm_sm<SparseComplexMatrix> (d, a);
 }
 SparseComplexMatrix
 operator + (const SparseMatrix& a, const ComplexDiagMatrix& d)
 {
-  return octave_impl::do_add_sm_dm<SparseComplexMatrix> (a, d);
+  return do_add_sm_dm<SparseComplexMatrix> (a, d);
 }
 SparseComplexMatrix
 operator + (const SparseComplexMatrix& a, const DiagMatrix& d)
 {
-  return octave_impl::do_add_sm_dm<SparseComplexMatrix> (a, d);
+  return do_add_sm_dm<SparseComplexMatrix> (a, d);
 }
 SparseComplexMatrix
 operator + (const SparseComplexMatrix&a, const ComplexDiagMatrix& d)
 {
-  return octave_impl::do_add_sm_dm<SparseComplexMatrix> (a, d);
+  return do_add_sm_dm<SparseComplexMatrix> (a, d);
 }
 
 SparseComplexMatrix
 operator - (const ComplexDiagMatrix& d, const SparseMatrix& a)
 {
-  return octave_impl::do_sub_dm_sm<SparseComplexMatrix> (d, a);
+  return do_sub_dm_sm<SparseComplexMatrix> (d, a);
 }
 SparseComplexMatrix
 operator - (const DiagMatrix& d, const SparseComplexMatrix& a)
 {
-  return octave_impl::do_sub_dm_sm<SparseComplexMatrix> (d, a);
+  return do_sub_dm_sm<SparseComplexMatrix> (d, a);
 }
 SparseComplexMatrix
 operator - (const ComplexDiagMatrix& d, const SparseComplexMatrix& a)
 {
-  return octave_impl::do_sub_dm_sm<SparseComplexMatrix> (d, a);
+  return do_sub_dm_sm<SparseComplexMatrix> (d, a);
 }
 SparseComplexMatrix
 operator - (const SparseMatrix& a, const ComplexDiagMatrix& d)
 {
-  return octave_impl::do_sub_sm_dm<SparseComplexMatrix> (a, d);
+  return do_sub_sm_dm<SparseComplexMatrix> (a, d);
 }
 SparseComplexMatrix
 operator - (const SparseComplexMatrix& a, const DiagMatrix& d)
 {
-  return octave_impl::do_sub_sm_dm<SparseComplexMatrix> (a, d);
+  return do_sub_sm_dm<SparseComplexMatrix> (a, d);
 }
 SparseComplexMatrix
 operator - (const SparseComplexMatrix&a, const ComplexDiagMatrix& d)
 {
-  return octave_impl::do_sub_sm_dm<SparseComplexMatrix> (a, d);
+  return do_sub_sm_dm<SparseComplexMatrix> (a, d);
 }
 
 // FIXME -- it would be nice to share code among the min/max
 // functions below.
 
 #define EMPTY_RETURN_CHECK(T) \
   if (nr == 0 || nc == 0) \
     return T (nr, nc);
diff --git a/liboctave/Sparse-diag-op-defs.h b/liboctave/Sparse-diag-op-defs.h
--- a/liboctave/Sparse-diag-op-defs.h
+++ b/liboctave/Sparse-diag-op-defs.h
@@ -122,18 +122,16 @@ RT inner_do_add_sm_dm (const SM& a, cons
   const octave_idx_type nr = d.rows ();
   const octave_idx_type nc = d.cols ();
   const octave_idx_type n = min (nr, nc);
 
   const octave_idx_type a_nr = a.rows ();
   const octave_idx_type a_nc = a.cols ();
 
   const octave_idx_type nz = a.nnz ();
-  const typename SM::element_type zero = typename SM::element_type ();
-  const typename DM::element_type dzero = typename DM::element_type ();
   RT r (a_nr, a_nc, nz + n);
   octave_idx_type k = 0;
 
   for (octave_idx_type j = 0; j < nc; ++j)
     {
       OCTAVE_QUIT;
       const octave_idx_type colend = a.cidx (j+1);
       bool found_diag = false;
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -7702,47 +7702,47 @@ trans_mul (const SparseMatrix& m, const 
   SPARSE_FULL_TRANS_MUL (Matrix, double, 0., );
 }
 
 // diag * sparse and sparse * diag
 
 SparseMatrix
 operator * (const DiagMatrix& d, const SparseMatrix& a)
 {
-  return octave_impl::do_mul_dm_sm<SparseMatrix> (d, a);
+  return do_mul_dm_sm<SparseMatrix> (d, a);
 }
 
 SparseMatrix
 operator * (const SparseMatrix& a, const DiagMatrix& d)
 {
-  return octave_impl::do_mul_sm_dm<SparseMatrix> (a, d);
+  return do_mul_sm_dm<SparseMatrix> (a, d);
 }
 
 SparseMatrix
 operator + (const DiagMatrix& d, const SparseMatrix& a)
 {
-  return octave_impl::do_add_dm_sm<SparseMatrix> (d, a);
+  return do_add_dm_sm<SparseMatrix> (d, a);
 }
 
 SparseMatrix
 operator - (const DiagMatrix& d, const SparseMatrix& a)
 {
-  return octave_impl::do_sub_dm_sm<SparseMatrix> (d, a);
+  return do_sub_dm_sm<SparseMatrix> (d, a);
 }
 
 SparseMatrix
 operator + (const SparseMatrix& a, const DiagMatrix& d)
 {
-  return octave_impl::do_add_sm_dm<SparseMatrix> (a, d);
+  return do_add_sm_dm<SparseMatrix> (a, d);
 }
 
 SparseMatrix
 operator - (const SparseMatrix& a, const DiagMatrix& d)
 {
-  return octave_impl::do_sub_sm_dm<SparseMatrix> (a, d);
+  return do_sub_sm_dm<SparseMatrix> (a, d);
 }
 
 // FIXME -- it would be nice to share code among the min/max
 // functions below.
 
 #define EMPTY_RETURN_CHECK(T) \
   if (nr == 0 || nc == 0) \
     return T (nr, nc);
diff --git a/src/OPERATORS/op-dm-sm.cc b/src/OPERATORS/op-dm-sm.cc
--- a/src/OPERATORS/op-dm-sm.cc
+++ b/src/OPERATORS/op-dm-sm.cc
@@ -63,17 +63,17 @@ DEFBINOP (mul_dm_sm, diag_matrix, sparse
 DEFBINOP (ldiv_dm_sm, diag_matrix, sparse_matrix)
 {
   CAST_BINOP_ARGS (const octave_diag_matrix&, const octave_sparse_matrix&);
 
   MatrixType typ = v2.matrix_type ();
   return xleftdiv (v1.diag_matrix_value (), v2.sparse_matrix_value (), typ);
 }
 
-DEFBINOP_OP (add_dm_sm, diag_matrix, sparse_matrix)
+DEFBINOP (add_dm_sm, diag_matrix, sparse_matrix)
 {
   CAST_BINOP_ARGS (const octave_diag_matrix&, const octave_sparse_matrix&);
 
   if (v2.rows() == 1 && v2.columns() == 1)
     // If v2 is a scalar in disguise, return a diagonal matrix rather than
     // a sparse matrix.
     {
       double d = v2.scalar_value ();
