# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1346919549 21600
#      Thu Sep 06 02:19:09 2012 -0600
# Node ID de9bfcf637dfa40be608a7eb0952e80e7d261bb5
# Parent  b055fc07722408004f00c9c328f5940648be60f7
Fix error when compiling with complex matrix (bug #37247)

* jit-typeinfo.cc (jit_typeinfo::do_type_of): Correctly check for complex matricies.

* pt-jit.cc (jit_convert::visit_constant): Correctly check for complex values.

diff --git a/libinterp/interp-core/jit-typeinfo.cc b/libinterp/interp-core/jit-typeinfo.cc
--- a/libinterp/interp-core/jit-typeinfo.cc
+++ b/libinterp/interp-core/jit-typeinfo.cc
@@ -2193,17 +2193,17 @@ jit_typeinfo::do_type_of (const octave_v
         = dynamic_cast<octave_builtin *> (ov.internal_rep ());
       return builtin && builtin->to_jit () ? builtin->to_jit ()
         : unknown_function;
     }
 
   if (ov.is_range ())
     return get_range ();
 
-  if (ov.is_double_type ())
+  if (ov.is_double_type () && ! ov.is_complex_type ())
     {
       if (ov.is_real_scalar ())
         return get_scalar ();
 
       if (ov.is_matrix_type ())
         return get_matrix ();
     }
 
diff --git a/libinterp/interp-core/pt-jit.cc b/libinterp/interp-core/pt-jit.cc
--- a/libinterp/interp-core/pt-jit.cc
+++ b/libinterp/interp-core/pt-jit.cc
@@ -484,17 +484,17 @@ jit_convert::visit_no_op_command (tree_n
 {
   throw jit_fail_exception ();
 }
 
 void
 jit_convert::visit_constant (tree_constant& tc)
 {
   octave_value v = tc.rvalue1 ();
-  if (v.is_real_scalar () && v.is_double_type ())
+  if (v.is_real_scalar () && v.is_double_type () && ! v.is_complex_type ())
     {
       double dv = v.double_value ();
       result = factory.create<jit_const_scalar> (dv);
     }
   else if (v.is_range ())
     {
       Range rv = v.range_value ();
       result = factory.create<jit_const_range> (rv);
@@ -2094,9 +2094,18 @@ Test some simple cases that compile.
 %! for i=1:1e3
 %!   for j=1:2
 %!     a = a + b;
 %!   endfor
 %! endfor
 %! assert (a, 2000);
 %! assert (b, 1);
 
+%!test
+%! a = [1+1i 1+2i];
+%! b = 0;
+%! while 1
+%!   b = a(1);
+%!   break;
+%! endwhile
+%! assert (b, a(1));
+
 */
