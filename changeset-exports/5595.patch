# HG changeset patch
# User jwe
# Date 1137182469 0
#      Fri Jan 13 20:01:09 2006 +0000
# Node ID 83df01a26136e12a5dbee107dfd5336527cdf799
# Parent  f2c058edda4064f47b854d51d335efc9b2875e52
[project @ 2006-01-13 20:01:08 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2006-01-13  Bill Denney  <bill@givebillmoney.com>
+
+         * miscellaneous/dir.m: Use filesep instead of "/" where needed.
+	 * miscellaneous/fullfile.m: Likewise.
+
 2006-01-12  David Bateman  <dbateman@free.fr>
 
 	* general/blkdiag.m: Compatible behavior for empty matrices 
 	* statistics/base/unidrnd.m: Documentation buglet.
 
 2005-12-14  David Bateman  <dbateman@free.fr>
 
 	* testfun/assert.m, testfun/fail.m, testfun/test.m, testfun/demo.m,
diff --git a/scripts/miscellaneous/dir.m b/scripts/miscellaneous/dir.m
--- a/scripts/miscellaneous/dir.m
+++ b/scripts/miscellaneous/dir.m
@@ -76,17 +76,17 @@ function retval = dir (file)
 	    else
 	      if (st.modestr(1) == "d")
 		lst = readdir (fn);
 		n = length (lst);
 		for j = n:-1:1
 		  tfn = lst{j};
 		  ## The lstat call seems to be the bottleneck for large
 		  ## directories.
-		  [st, err, msg] = lstat (strcat (fn, "/", tfn));
+		  [st, err, msg] = lstat (strcat (fn, filesep, tfn));
 		  if (err < 0)
 		    warning ("dir: stat failed for %s (%s)", tfn, msg);
 		  else
 		    info(j).name = tfn;
 		    ## Generating the pretty time string also takes a
 		    ## significant amount of time for large directories.
 		    info(j).date = strftime ("%d-%b-%Y %T",
 					     localtime (st.mtime));
diff --git a/scripts/miscellaneous/fullfile.m b/scripts/miscellaneous/fullfile.m
--- a/scripts/miscellaneous/fullfile.m
+++ b/scripts/miscellaneous/fullfile.m
@@ -24,25 +24,25 @@
 
 function filename = fullfile (varargin)
 
   if (nargin > 0)
     filename = varargin{1};
     if (length (filename) < 1)
       filename = ".";
     endif
-    if (strcmp (filename(end), "/"))
+    if (strcmp (filename(end), filesep))
       filename(end) = "";
     endif
     for i = 2:nargin
       tmp = varargin{i};
-      if (strcmp (tmp(1), "/"))
+      if (strcmp (tmp(1), filesep))
 	tmp(1) = "";
       endif
-      if (i < nargin && strcmp (tmp(end), "/"))
+      if (i < nargin && strcmp (tmp(end), filesep))
 	tmp(end) = "";
       endif
       filename = strcat (filename, filesep, tmp);
     endfor
   else
     usage ("fullfile (dir1, dir2, ..., file)");
   endif
 
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,12 @@
+2006-01-13  Bill Denney  <bill@givebillmoney.com>
+
+	* test_system.m: Use filesep instead of "/" where needed.
+
 2005-12-14  David Bateman  <dbateman@free.fr>
 
 	* build_sparse_tests.sh: New script to build sparse matrix tests.
 	* fntests.m: New script to run the octave test code, with "make check".
 	* Makefile.in (DISTDIRS): Delete.
 	(dist): Simplify.
 	(OCTAVE_SCRIPT_PATH): Include . and $(srcdir).
 	(check): Run tests with fntest.m instead of runtest.
diff --git a/test/test_system.m b/test/test_system.m
--- a/test/test_system.m
+++ b/test/test_system.m
@@ -212,17 +212,17 @@
 %% test/octave.test/system/unlink-2.m
 %!error <... unlink:.*> unlink ();
 
 %% test/octave.test/system/unlink-3.m
 %!error <... unlink:.*> unlink ("foo", 1);
 
 %% test/octave.test/system/readdir-1.m
 %!test
-%! [files, status, msg] = readdir ("/");
+%! [files, status, msg] = readdir (filesep);
 %! assert(iscell (files) && status == 0 && msg == "");
 
 %% test/octave.test/system/readdir-2.m
 %!error <... readdir:.*> readdir ();
 
 %% test/octave.test/system/readdir-3.m
 %!error <... readdir:.*> readdir ("foo", 1);
 
@@ -269,17 +269,17 @@
 %% test/octave.test/system/umask-2.m
 %!error <... umask:.*> umask ();
 
 %% test/octave.test/system/umask-3.m
 %!error <... umask:.*> umask (1, 2);
 
 %% test/octave.test/system/stat-1.m
 %!test
-%! [s, err, msg] = stat ("/");
+%! [s, err, msg] = stat (filesep);
 %! assert((err == 0
 %! && isstruct (s)
 %! && struct_contains (s, "dev")
 %! && struct_contains (s, "ino")
 %! && struct_contains (s, "modestr")
 %! && struct_contains (s, "nlink")
 %! && struct_contains (s, "uid")
 %! && struct_contains (s, "gid")
@@ -292,17 +292,17 @@
 %% test/octave.test/system/stat-2.m
 %!error <... stat:.*> stat ();
 
 %% test/octave.test/system/stat-3.m
 %!error <... stat:.*> stat ("foo", 1);
 
 %% test/octave.test/system/lstat-1.m
 %!test
-%! [s, err, msg] = lstat ("/");
+%! [s, err, msg] = lstat (filesep);
 %! assert((err == 0
 %! && isstruct (s)
 %! && struct_contains (s, "dev")
 %! && struct_contains (s, "ino")
 %! && struct_contains (s, "modestr")
 %! && struct_contains (s, "nlink")
 %! && struct_contains (s, "uid")
 %! && struct_contains (s, "gid")
@@ -314,17 +314,17 @@
 
 %% test/octave.test/system/lstat-2.m
 %!error <... lstat:.*> lstat ();
 
 %% test/octave.test/system/lstat-3.m
 %!error <... lstat:.*> lstat ("foo", 1);
 
 %% test/octave.test/system/glob-1.m
-%!assert(iscell (glob ("/*")));
+%!assert(iscell (glob ([filesep "*"])));
 
 %% test/octave.test/system/glob-2.m
 %!error <... glob:*> glob ();
 
 %% test/octave.test/system/glob-3.m
 %!error <... glob:.*> glob ("foo", 1);
 
 %% test/octave.test/system/fnmatch-1.m
