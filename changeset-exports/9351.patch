# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1245063173 -7200
#      Mon Jun 15 12:52:53 2009 +0200
# Node ID e2344f4af0cb1cfe107c831f6fdf75bc3431eebe
# Parent  16a5f9e1fdb3d82cb3cf8ea7f4df6792cb3d691d
autocache indices returned from find et al.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2009-06-15  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-re-mat.h (octave_matrix::octave_matrix (const Array<octave_idx_type>&,
+	bool)): New constructor.
+	* ov.cc (octave_value::octave_value (const Array<octave_idx_type>&,
+	bool)): New constructor.
+	* ov.h: Declare it.
+
+	* data.cc (Fsort, F__sort_rows_idx__): Use the new constructor.
+	* DLD-FUNCTIONS/find.cc (Ffind): Ditto.
+	* DLD-FUNCTIONS/lookup.cc (Flookup): Ditto.
+	* DLD-FUNCTIONS/max.cc (Fmax, Fmin, Fcummax, Fcummin): Ditto.
+
 2009-06-15  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base-mat.h (octave_base_matrix::idx_cache): New member field.
 	(octave_base_matrix::typ): Turn to MatrixType *.
 	(octave_base_matrix::octave_base_matrix (...)): Update constructors.
 	(octave_base_matrix::clear_cached_info,
 	octave_base_matrix::set_idx_cache): New member functions.
 	* ov-base-mat.cc (octave_base_matrix::assign,
diff --git a/src/DLD-FUNCTIONS/find.cc b/src/DLD-FUNCTIONS/find.cc
--- a/src/DLD-FUNCTIONS/find.cc
+++ b/src/DLD-FUNCTIONS/find.cc
@@ -60,23 +60,23 @@ find_nonzero_elem_idx (const Array<T>& n
       {
         Array<octave_idx_type> jdx (idx.dims ());
         octave_idx_type n = idx.length (), nr = nda.rows ();
         for (octave_idx_type i = 0; i < n; i++)
           {
             jdx.xelem (i) = idx.xelem (i) / nr;
             idx.xelem (i) %= nr;
           }
-        retval(1) = NDArray (jdx, true);
+        retval(1) = octave_value (jdx, true, true);
       }
       // Fall through!
 
     case 1:
     case 0:
-      retval(0) = NDArray (idx, true);
+      retval(0) = octave_value (idx, true, true);
       break;
     }
 
   return retval;
 }
 
 #define INSTANTIATE_FIND_ARRAY(T) \
 template octave_value_list find_nonzero_elem_idx (const Array<T>&, int, \
diff --git a/src/DLD-FUNCTIONS/lookup.cc b/src/DLD-FUNCTIONS/lookup.cc
--- a/src/DLD-FUNCTIONS/lookup.cc
+++ b/src/DLD-FUNCTIONS/lookup.cc
@@ -120,17 +120,19 @@ do_numeric_lookup (const ArrayT& array, 
     {
       Array<octave_idx_type> idx;
 
       if (match_idx)
         idx = array.lookupm (values);
       else
         idx = array.lookup (values, UNSORTED, left_inf, right_inf);
 
-      retval = NDArray (idx, match_idx);
+      // if left_inf is specified, the result is a valid 1-based index.
+      bool cache_index = left_inf && array.numel () > 1;
+      retval = octave_value (idx, match_idx, cache_index);
     }
 
   return retval;
 }
 
 DEFUN_DLD (lookup, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{idx} =} lookup (@var{table}, @var{y}, @var{opt})\n\
@@ -309,17 +311,17 @@ For string lookup, 'i' indicates case-in
                              str_y.nelem (), idx.fortran_vec ());
             }
           else
             {
               lsort.lookup (str_table.data (), str_table.nelem (), str_y.data (),
                             str_y.nelem (), idx.fortran_vec ());
             }
 
-          retval = NDArray (idx, match_idx);
+          retval = octave_value (idx, match_idx);
         }
     }
   else
     print_usage ();
 
   return retval;
 
 }  
diff --git a/src/DLD-FUNCTIONS/max.cc b/src/DLD-FUNCTIONS/max.cc
--- a/src/DLD-FUNCTIONS/max.cc
+++ b/src/DLD-FUNCTIONS/max.cc
@@ -94,17 +94,17 @@ along with Octave; see the file COPYING.
 	    } \
 	} \
       else \
 	gripe_wrong_type_arg (#FCN, arg1); \
  \
       octave_idx_type len = index.numel (); \
  \
       if (len > 0) \
-	retval(1) = NDArray (index, true, true);	\
+	retval(1) = octave_value (index, true, true);	\
       else \
 	retval(1) = NDArray (); \
     } \
 }
 
 #define MINMAX_DOUBLE_BODY(FCN) \
 { \
   bool single_arg = (nargin == 1) || (arg2.is_empty() && nargin == 3);	\
@@ -261,17 +261,17 @@ along with Octave; see the file COPYING.
 	    } \
 	} \
       else \
 	gripe_wrong_type_arg (#FCN, arg1); \
  \
       octave_idx_type len = index.numel (); \
  \
       if (len > 0) \
-	retval(1) = NDArray (index, true, true);	\
+	retval(1) = octave_value (index, true, true);	\
       else \
 	retval(1) = NDArray (); \
     } \
 }
 
 #define MINMAX_SINGLE_BODY(FCN) \
 { \
   bool single_arg = (nargin == 1) || (arg2.is_empty() && nargin == 3);	\
@@ -398,17 +398,17 @@ along with Octave; see the file COPYING.
         { \
 	  TYP ## NDArray n = m. FCN (index, dim);	\
 	  retval(0) = n; \
 	} \
  \
       octave_idx_type len = index.numel (); \
  \
       if (len > 0) \
-	retval(1) = NDArray (index, true, true);	\
+	retval(1) = octave_value (index, true, true);	\
       else \
 	retval(1) = NDArray (); \
     } \
 }
 
 #define MINMAX_INT_BODY(FCN, TYP) \
  { \
   bool single_arg = (nargin == 1) || (arg2.is_empty() && nargin == 3);	\
@@ -484,17 +484,17 @@ along with Octave; see the file COPYING.
       else if (arg1.is_complex_type ()) \
 	retval(0) = arg1.sparse_complex_matrix_value () .FCN (index, dim); \
       else \
 	gripe_wrong_type_arg (#FCN, arg1); \
  \
       octave_idx_type len = index.numel (); \
  \
       if (len > 0) \
-	retval(1) = NDArray (index, true, true);	\
+	retval(1) = octave_value (index, true, true);	\
       else \
 	retval(1) = NDArray (); \
     } \
   else \
     { \
       int arg1_is_scalar = arg1.is_scalar_type (); \
       int arg2_is_scalar = arg2.is_scalar_type (); \
  \
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -5623,17 +5623,17 @@ ordered lists.\n\
 	}
     }
 
   if (return_idx)
     {
       Array<octave_idx_type> sidx;
 
       retval (0) = arg.sort (sidx, dim, smode);
-      retval (1) = NDArray (sidx, true);
+      retval (1) = octave_value (sidx, true, true);
     }
   else
     retval(0) = arg.sort (dim, smode);
 
   return retval;
 }
 
 /*
@@ -5853,17 +5853,17 @@ Undocumented internal function.\n\
   octave_value arg = args(0);
 
   if (arg.is_sparse_type ())
     error ("__sort_rows_idx__: sparse matrices not yet supported");
   if (arg.ndims () == 2)
     {
       Array<octave_idx_type> idx = arg.sort_rows_idx (smode);
 
-      retval = NDArray (idx, true);
+      retval = octave_value (idx, true, true);
     }
   else
     error ("__sort_rows_idx__: needs a 2-dimensional object");
 
   return retval;
 }
 
 DEFUN (issorted, args, ,
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -76,16 +76,25 @@ public:
     : octave_base_matrix<NDArray> (Matrix (v)) { }
 
   octave_matrix (const ColumnVector& v)
     : octave_base_matrix<NDArray> (Matrix (v)) { }
 
   octave_matrix (const octave_matrix& m)
     : octave_base_matrix<NDArray> (m) { }
 
+  octave_matrix (const Array<octave_idx_type>& idx, 
+                 bool zero_based = false, bool cache_index = false)
+    : octave_base_matrix<NDArray> (NDArray (idx, zero_based))
+    {
+      // Auto-create cache to speed up subsequent indexing.
+      if (zero_based && cache_index)
+        set_idx_cache (idx_vector (idx));
+    }
+
   ~octave_matrix (void) { }
 
   octave_base_value *clone (void) const { return new octave_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_matrix (); }
 
   type_conv_info numeric_demotion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -969,16 +969,23 @@ octave_value::octave_value (const uint64
 }
 
 octave_value::octave_value (const ArrayN<octave_uint64>& inda)
   : rep (new octave_uint64_matrix (inda))
 {
   maybe_mutate ();
 }
 
+octave_value::octave_value (const Array<octave_idx_type>& inda, bool zero_based,
+                            bool cache_index)
+  : rep (new octave_matrix (inda, zero_based, cache_index))
+{
+  maybe_mutate ();
+}
+
 octave_value::octave_value (double base, double limit, double inc)
   : rep (new octave_range (base, limit, inc))
 {
   maybe_mutate ();
 }
 
 octave_value::octave_value (const Range& r)
   : rep (new octave_range (r))
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -256,16 +256,18 @@ public:
   octave_value (const uint8NDArray& inda);
   octave_value (const ArrayN<octave_uint8>& inda);
   octave_value (const uint16NDArray& inda);
   octave_value (const ArrayN<octave_uint16>& inda);
   octave_value (const uint32NDArray& inda);
   octave_value (const ArrayN<octave_uint32>& inda);
   octave_value (const uint64NDArray& inda);
   octave_value (const ArrayN<octave_uint64>& inda);
+  octave_value (const Array<octave_idx_type>& inda, 
+                bool zero_based = false, bool cache_index = false);
   octave_value (double base, double limit, double inc);
   octave_value (const Range& r);
   octave_value (const Octave_map& m);
   octave_value (const Octave_map& m, const std::string& id);
   octave_value (const octave_value_list& m, bool is_cs_list = false);
   octave_value (octave_value::magic_colon);
 
   octave_value (octave_base_value *new_rep);
