# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1204012292 18000
#      Tue Feb 26 02:51:32 2008 -0500
# Branch release-3-0-x
# Node ID ef2b2df1ed9a7a616fd289c648a26dd5ac702cd8
# Parent  6adc43cce4c6fb3211653748e0a7cd23470fd098
avoid another xGELSD workspace query bug

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2562,16 +2562,23 @@ ComplexMatrix::lssolve (const ComplexMat
 	  if (n-3*m > addend)
 	    addend = n-3*m;
 
 	  const octave_idx_type lworkaround = 4*m + m*m + addend;
 
 	  if (std::real (work(0)) < lworkaround)
 	    work(0) = lworkaround;
 	}
+      else if (m >= n)
+	{
+	  octave_idx_type lworkaround = 2*m + m*nrhs;
+
+	  if (std::real (work(0)) < lworkaround)
+	    work(0) = lworkaround;
+	}
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) 
 	  ("unrecoverable error in zgelsd");
       else
 	{
 	  lwork = static_cast<octave_idx_type> (std::real (work(0)));
 	  work.resize (lwork);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2008-02-26  John W. Eaton  <jwe@octave.org>
+
+	* dMatrix.cc (Matrix::lssolve): Avoid another dgelsd lwork query bug.
+	* CMatrix.cc (ComplexMatrix::lssolve): Likewise, for zgelsd
+
 2008-02-15  John W. Eaton  <jwe@octave.org>
 
 	* dMatrix.cc (Matrix::lssolve): Check n > mnthr, not n > m when
 	deciding whether to calculate workspace size, with mnthr from ILAENV.
 	* CMatrix.cc (ComplexMatrix::lssolve): Likewise.
 
 2008-02-12  John W. Eaton  <jwe@octave.org>
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2171,16 +2171,24 @@ Matrix::lssolve (const Matrix& b, octave
 	  if (wlalsd > addend)
 	    addend = wlalsd;
 
 	  const octave_idx_type lworkaround = 4*m + m*m + addend;
 
 	  if (work(0) < lworkaround)
 	    work(0) = lworkaround;
 	}
+      else if (m >= n)
+	{
+	  octave_idx_type lworkaround
+	    = 12*n + 2*n*smlsiz + 8*n*nlvl + n*nrhs + (smlsiz+1)*(smlsiz+1);
+
+	  if (work(0) < lworkaround)
+	    work(0) = lworkaround;
+	}
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) 
 	  ("unrecoverable error in dgelsd");
       else
 	{
 	  lwork = static_cast<octave_idx_type> (work(0));
 	  work.resize (lwork);
