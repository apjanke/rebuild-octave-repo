# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1425116640 21600
#      Sat Feb 28 03:44:00 2015 -0600
# Node ID e814e202cd8449b2d98860758a268066dc6cea00
# Parent  65e6207f7ae464273bf16a8df60316dc305542d8
Account for whitespace and other anomalies in print function pipe/file string.

* graphics.cc (Fdrawnow): Use two positions from standard string finds to
address all whitespace and improper syntax in "file" variable, the first
"|" character and the first non "| " character.

* __osmesa_print__.cc (F__osmesa_print__): Ditto.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -11064,25 +11064,44 @@ undocumented.\n\
           term = args(0).string_value ();
 
           if (! error_state)
             {
               file = args(1).string_value ();
 
               if (! error_state)
                 {
-                  if (! file.empty () && file[0] == '|')
-                    file = file.substr (1);  // Strip leading pipe character
+                  size_t pos_p = file.find_first_of ("|");
+                  size_t pos_c = file.find_first_not_of ("| ");
+
+                  if (pos_p == std::string::npos &&
+                      pos_c == std::string::npos)
+                    {
+                      error ("drawnow: empty output ''");
+
+                      return retval;
+                    }
+                  else if (pos_c == std::string::npos)
+                    {
+                      error ("drawnow: empty pipe '|'");
+
+                      return retval;
+                    }
+                  else if (pos_p != std::string::npos && pos_p < pos_c)
+                    {
+                      // Strip leading pipe character
+                      file = file.substr (pos_c);
+                    }
                   else
                     {
                       size_t pos = file.find_last_of (file_ops::dir_sep_chars ());
 
                       if (pos != std::string::npos)
                         {
-                          std::string dirname = file.substr (0, pos+1);
+                          std::string dirname = file.substr (pos_c, pos+1);
 
                           file_stat fs (dirname);
 
                           if (! (fs && fs.is_dir ()))
                             {
                               error ("drawnow: nonexistent directory '%s'",
                                      dirname.c_str ());
 
diff --git a/libinterp/dldfcn/__osmesa_print__.cc b/libinterp/dldfcn/__osmesa_print__.cc
--- a/libinterp/dldfcn/__osmesa_print__.cc
+++ b/libinterp/dldfcn/__osmesa_print__.cc
@@ -100,31 +100,31 @@ instead.\n\
       print_usage ();
       return retval;
     }
 
   if (nargin == 3)
     {
       if (! (args(1).is_string () && args(2).is_string ()))
         {
-          error ("__osmesa_print__: FILE and TERM has to be strings");
+          error ("__osmesa_print__: FILE and TERM must be strings");
           return retval;
         }
 
 #ifndef HAVE_GL2PS_H
       error ("__osmesa_print__: Octave has been compiled without gl2ps");
       return retval;
 #endif
     }
 
   int h = args(0).double_value ();
   graphics_object fobj = gh_manager::get_object (h);
   if (! (fobj && fobj.isa ("figure")))
     {
-      error ("__osmesa_print__: H has to be a valid figure handle");
+      error ("__osmesa_print__: H must be a valid figure handle");
       return retval;
     }
 
   figure::properties& fp =
     dynamic_cast<figure::properties&> (fobj.get_properties ());
 
   bool internal = true;
   Matrix bb = fp.get_boundingbox (internal);
@@ -177,26 +177,33 @@ instead.\n\
   if (nargin == 3)
     {
       // use gl2ps
       std::string file = args(1).string_value ();
       std::string term = args(2).string_value ();
 
       if (! error_state)
         {
-          if (! file.empty () && file[0] == '|')
+          size_t pos_p = file.find_first_of ("|");
+          size_t pos_c = file.find_first_not_of ("| ");
+
+          if (pos_p == std::string::npos && pos_c == std::string::npos)
+            error ("__osmesa_print__: empty output ''");
+          else if (pos_c == std::string::npos)
+            error ("__osmesa_print__: empty pipe '|'");
+          else if (pos_p != std::string::npos && pos_p < pos_c)
             {
               // create process and pipe gl2ps output to it
-              std::string cmd = file.substr (1);
+              std::string cmd = file.substr (pos_c);
               gl2ps_print (fobj, cmd, term);
             }
           else
             {
               // write gl2ps output directly to file
-              FILE *filep = gnulib::fopen (file.c_str (), "w");
+              FILE *filep = gnulib::fopen (file.substr (pos_c).c_str (), "w");
 
               if (filep)
                 {
                   unwind_protect frame;
 
                   frame.add_fcn (close_fcn, filep);
 
                   glps_renderer rend (filep, term);
