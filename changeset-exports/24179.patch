# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1508753431 -7200
#      Mon Oct 23 12:10:31 2017 +0200
# Node ID 8365e584ebd837c2782fa4371262cb4e95e9b399
# Parent  857b553177a510b40d38e842b0629937aed59a5b
Add support for transparent polygons in svg output (bug #39535)

* gl2ps-print.cc (gl2ps_renderer::has_alpha): new static method to determine if
  an axes object has transparent children.
  (gl2ps_renderer::draw_axes): set GL2PS_OCCLUSION_CULL and enable GL2PS_BLEND
  conditioned on the presence of transparent polygons .
  (gl2ps_renderer::draw): remove GL2PS_NO_BLENDING and GL2PS_OCCLUSION_CULL
  from gl2psBeginPage options

diff --git a/libinterp/corefcn/gl2ps-print.cc b/libinterp/corefcn/gl2ps-print.cc
--- a/libinterp/corefcn/gl2ps-print.cc
+++ b/libinterp/corefcn/gl2ps-print.cc
@@ -88,39 +88,89 @@ namespace octave
 
   protected:
 
     Matrix render_text (const std::string& txt,
                         double x, double y, double z,
                         int halign, int valign, double rotation = 0.0);
 
     void set_font (const base_properties& props);
+  
+    static bool has_alpha (const graphics_handle& h)
+    {
+      bool retval = false;
+      graphics_object go = gh_manager::get_object (h);
+
+      if (! go.valid_object ())
+        return retval;
+
+      if (go.isa ("axes") || go.isa ("hggroup"))
+        {
+          Matrix  children = go.get ("children").matrix_value ();
+          for (octave_idx_type ii = 0; ii < children.numel (); ii++)
+            {
+              retval = has_alpha (graphics_handle (children(ii)));
+              if (retval)
+                break;
+            }
+        }
+      else if (go.isa ("patch") || go.isa ("surface"))
+        {
+          octave_value fa = go.get ("facealpha");
+          if (fa.is_scalar_type () && fa.is_double_type () 
+              && fa.double_value () < 1)
+            retval = true;
+        }
+
+      return retval;
+    }
 
     void draw_axes (const axes::properties& props)
     {
       // Initialize a sorting tree (viewport) in gl2ps for each axes
       GLint vp[4];
       glGetIntegerv (GL_VIEWPORT, vp);
       gl2psBeginViewport (vp);
 
-      // Draw and finish () or there may primitives missing in the gl2ps output.
+
+      // Don't remove hidden primitives when some of them are transparent
+      GLint opts;
+      gl2psGetOptions (&opts);
+      if (has_alpha (props.get___myhandle__ ()))
+        {
+          opts &= ~GL2PS_OCCLUSION_CULL;
+          // FIXME: currently the GL2PS_BLEND (which is more an equivalent of 
+          // GL_ALPHA_TEST than GL_BLEND) is not working on a per primitive
+          // basis. We thus set it once per viewport.
+          gl2psEnable (GL2PS_BLEND);
+        }
+      else
+        {
+          opts |= GL2PS_OCCLUSION_CULL;
+          gl2psDisable (GL2PS_BLEND);
+        }
+
+      gl2psSetOptions (opts);
+
+      // Draw and finish () or there may be primitives missing in the gl2ps 
+      // output.
       opengl_renderer::draw_axes (props);
       finish ();
 
       // Finalize viewport
       GLint state = gl2psEndViewport ();
       if (state == GL2PS_NO_FEEDBACK && props.is_visible ())
         warning ("gl2ps_renderer::draw_axes: empty feedback buffer and/or nothing else to print");
       else if (state == GL2PS_ERROR)
         error ("gl2ps_renderer::draw_axes: gl2psEndPage returned GL2PS_ERROR");
 
       buffer_overflow |= (state == GL2PS_OVERFLOW);
 
-      // Don't draw background for subsequent viewports (legends, subplots, etc.)
-      GLint opts;
+      // Don't draw background for subsequent viewports (legends, subplots, 
+      // etc.)
       gl2psGetOptions (&opts);
       opts &= ~GL2PS_DRAW_BACKGROUND;
       gl2psSetOptions (opts);
     }
 
     void draw_text (const text::properties& props);
 
     void draw_pixels (int w, int h, const float *data);
@@ -330,21 +380,19 @@ namespace octave
                 size_t n_end = include_graph.find_last_not_of (' ');
                 include_graph = include_graph.substr (n_begin,
                                                       n_end - n_begin + 1);
               }
             else
               include_graph = "foobar-inc";
 
             // GL2PS_SILENT was removed to allow gl2ps to print errors on stderr
-            GLint ret = gl2psBeginPage ("gl2ps_renderer figure", "Octave", nullptr,
-                                        gl2ps_term, gl2ps_sort,
-                                        (GL2PS_NO_BLENDING
-                                         | GL2PS_OCCLUSION_CULL
-                                         | GL2PS_BEST_ROOT
+            GLint ret = gl2psBeginPage ("gl2ps_renderer figure", "Octave", 
+                                        nullptr, gl2ps_term, gl2ps_sort,
+                                        (GL2PS_BEST_ROOT
                                          | gl2ps_text
                                          | GL2PS_DRAW_BACKGROUND
                                          | GL2PS_NO_PS3_SHADING
                                          | GL2PS_USE_CURRENT_VIEWPORT),
                                         GL_RGBA, 0, nullptr, 0, 0, 0,
                                         buffsize, tmpf, include_graph.c_str ());
             if (ret == GL2PS_ERROR)
               {
