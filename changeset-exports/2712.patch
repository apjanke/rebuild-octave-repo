# HG changeset patch
# User jwe
# Date 856561101 0
#      Fri Feb 21 21:38:21 1997 +0000
# Node ID 2ff2b536cc9d286755b3f2e80fb90872da57d4d1
# Parent  b50865d6de09b3a4425abc14cecce5a69d5ac0d8
[project @ 1997-02-21 21:38:21 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+Fri Feb 21 15:35:18 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-stream.cc (octave_base_stream::oscanf): Instead of returning
+	an error, just quit processing after a conversion fails.
+
 Thu Feb 20 02:58:05 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Version 2.0.4 released.
 
 Wed Feb 19 10:30:14 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* sighandlers.cc (octave_ignore_interrupts,
 	octave_catch_interrupts, octave_set_interrupt_handler):
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -1219,77 +1219,26 @@ octave_base_stream::scanf (const string&
 
 	    if (! error_state)
 	      retval = do_scanf (fmt_list, nr, nc, count);
 	  }
 	  break;
 	}
     }
   else
-    invalid_operation ("fscanf", "writing");
-
-  return retval;
-}
-
-template <class T>
-octave_value
-do_oscanf_num_conv (istream& is, const char *fmt, T valptr, bool discard)
-{
-  octave_value retval;
-
-  is.scan (fmt, valptr);
-
-  if (is)
-    {
-      if (! discard)
-	retval = (double) (*valptr);
-    }
-  else
-    error ("fscanf: conversion failed");
+    invalid_operation ("fscanf", "reading");
 
   return retval;
 }
 
-template octave_value
-do_oscanf_num_conv (istream&, const char*, int*, bool);
-
-#if 0
-template octave_value
-do_oscanf_num_conv (istream&, const char*, float*, bool);
-#endif
-
-template octave_value
-do_oscanf_num_conv (istream&, const char*, double*, bool);
-
-static inline octave_value
-do_oscanf_str_conv (istream& is, const char *fmt, char *sptr,
-		    int maxlen, bool discard)
+bool
+octave_base_stream::do_oscanf (const scanf_format_elt *elt,
+			       octave_value& retval)
 {
-  octave_value retval;
-
-  is.scan (fmt, sptr);
-
-  if (is)
-    {
-      if (! discard)
-	{
-	  sptr[maxlen] = '\0';
-	  retval = sptr;
-	}
-    }
-  else
-    error ("fscanf: conversion failed");
-
-  return retval;
-}
-
-octave_value
-octave_base_stream::do_oscanf (const scanf_format_elt *elt)
-{
-  octave_value retval;
+  bool quit = false;
 
   istream *isp = input_stream ();
 
   if (isp)
     {
       istream& is = *isp;
 
       ios::fmtflags flags = is.flags ();
@@ -1301,60 +1250,91 @@ octave_base_stream::do_oscanf (const sca
 	  bool discard = elt->discard;
 
 	  switch (elt->type)
 	    {
 	    case '%':
 	      {
 		int dummy;
 
-		is.scan (fmt, &dummy);
+		if (! is.scan (fmt, &dummy))
+		  quit = true;
 	      }
 	      break;
 
 	    case 'd': case 'i': case 'o': case 'u': case 'x':
 	      {
 		int tmp;
 
-		retval = do_oscanf_num_conv (is, fmt, &tmp, discard);
+		if (is.scan (fmt, &tmp))
+		  {
+		    if (! discard)
+		      retval = (double) tmp;
+		  }
+		else
+		  quit = true;
 	      }
 	      break;
 
 	    case 'e': case 'f': case 'g':
 	      {
 		double tmp;
 
-		retval = do_oscanf_num_conv (is, fmt, &tmp, discard);
+		if (is.scan (fmt, &tmp))
+		  {
+		    if (! discard)
+		      retval = tmp;
+		  }
+		else
+		  quit = true;
 	      }
 	      break;
 
 	    case 'c':
 	      {
 		is.unsetf (ios::skipws);
 
 		int width = elt->width ? elt->width : 1;
 
 		char *tmp = new char[width + 1];
 
-		retval = do_oscanf_str_conv (is, fmt, tmp, width, discard);
+		if (is.scan (fmt, tmp))
+		  {
+		    if (! discard)
+		      {
+			tmp[width] = '\0';
+			retval = tmp;
+		      }
+		  }
+		else
+		  quit = true;
 
 		is.setf (flags);
 
 		delete [] tmp;
 	      }
 	      break;
 
 	    case 's':
 	      {
 		// XXX FIXME XXX -- this must be fixed!
 
 		int width = elt->width ? elt->width : 65535;
 		char *tmp = new char [width+1];
 
-		retval = do_oscanf_str_conv (is, fmt, tmp, width, discard);
+		if (is.scan (fmt, tmp))
+		  {
+		    if (! discard)
+		      {
+			tmp[width] = '\0';
+			retval = tmp;
+		      }
+		  }
+		else
+		  quit = true;
 
 		delete [] tmp;
 	      }
 	      break;
 
 	    case 'p': case '[':
 	      error ("fscanf: unsupported format specifier");
 	      break;
@@ -1378,17 +1358,17 @@ octave_base_stream::do_oscanf (const sca
 	      // Skip to end of line.
 
 	      bool err;
 	      do_gets (-1, err, false, "fscanf");
 	    }
 	}
     }
 
-  return retval;
+  return quit;
 }
 
 octave_value_list
 octave_base_stream::oscanf (const string& fmt)
 {
   octave_value_list retval;
 
   istream *isp = input_stream ();
@@ -1446,40 +1426,54 @@ octave_base_stream::oscanf (const string
 	    int len = fmt_list.length ();
 
 	    retval.resize (nconv, Matrix ());
 
 	    const scanf_format_elt *elt = fmt_list.first ();
 
 	    int num_values = 0;
 
+	    bool quit = false;
+
 	    for (int i = 0; i < nconv; i++)
 	      {
-		octave_value tmp = do_oscanf (elt);
-
-		if (tmp.is_defined ())
-		  retval (num_values++) = tmp;
-
-		if (! ok ())
+		octave_value tmp;
+
+		quit = do_oscanf (elt, tmp);
+
+		if (quit)
 		  break;
-
-		elt = fmt_list.next ();
+		else
+		  {
+		    if (tmp.is_defined ())
+		      retval (num_values++) = tmp;
+
+		    if (! ok ())
+		      break;
+		    elt = fmt_list.next ();
+		  }
 	      }
 
 	    retval.resize (num_values);
 
-	    // Pick up any trailing stuff.
-	    if (ok () && len > nconv)
-	      do_oscanf (elt);
+	    if (! quit)
+	      {
+		// Pick up any trailing stuff.
+		if (ok () && len > nconv)
+		  {
+		    octave_value tmp;
+		    do_oscanf (elt, tmp);
+		  }
+	      }
 	  }
 	  break;
 	}
     }
   else
-    invalid_operation ("fscanf", "writing");
+    invalid_operation ("fscanf", "reading");
 
   return retval;
 }
 
 // Functions that are defined for all output streams (output streams
 // are those that define os).
 
 int
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -312,17 +312,17 @@ private:
   octave_value do_real_scanf (scanf_format_list& fmt_list,
 			      int nr, int nc, int& count);
 
   octave_value do_scanf (scanf_format_list& fmt_list, int nr, int nc,
 			 int& count);
 
   octave_value scanf (const string& fmt, const Matrix& size, int& count);
 
-  octave_value do_oscanf (const scanf_format_elt *elt);
+  bool do_oscanf (const scanf_format_elt *elt, octave_value&);
 
   octave_value_list oscanf (const string& fmt);
 
   // Functions that are defined for all output streams (output streams
   // are those that define os).
 
   int flush (void);
 
