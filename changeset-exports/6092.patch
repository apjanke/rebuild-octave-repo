# HG changeset patch
# User jwe
# Date 1161819916 0
#      Wed Oct 25 23:45:16 2006 +0000
# Node ID 30beea6739da852238249746294e2ce6a0c01fff
# Parent  96a11041f52b1fb3e1e495061dff4770b8b7b5e3
[project @ 2006-10-25 23:45:16 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2006-10-25  John W. Eaton  <jwe@octave.org>
+
+	* Sparse.cc (assign): Clear lhs index after error.
+
+2006-10-24  David Bateman  <dbateman@free.fr>
+
+	* Sparse.cc (assign (Sparse<LT>&, const Sparse<RT>&)):
+	Fix previous patch so it works.
+
 2006-10-25  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* Makefile.in (XTRA_CDEFS, XTRA_CXXDEFS): Substitute here.
 
 2006-10-24  David Bateman  <dbateman@free.fr>
 
 	* Sparse.cc (assign (Sparse<LT>&, const Sparse<RT>&)): Resize the
 	lhs at the point we know the assignment can succeed if the lhs is
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -2382,16 +2382,18 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 
   idx_vector idx_i;
   idx_vector idx_j;
 
   if (n_idx > 2)
     {
       (*current_liboctave_error_handler)
         ("A(I, J) = X: can only have 1 or 2 indexes for sparse matrices");
+
+      lhs.clear_index ();
       return 0;
     }
 
   if (n_idx > 1)
     idx_j = tmp[1];
 
   if (n_idx > 0)
     idx_i = tmp[0];
@@ -2466,34 +2468,30 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 			    }
 			}
 
 		      if (scalar != RT())
 			new_nzmx += m * n;
 
 		      Sparse<LT> stmp (new_nr, new_nc, new_nzmx);
 
-		      // Started with an empty matrix. Now that we know
-		      // the assignment will succeed, resize lhs 
-		      if (lhs_nr <= 0 || lhs_nc <= 0)
-			lhs = Sparse<RT>(n, m);
-
 		      octave_idx_type jji = 0;
 		      octave_idx_type jj = idx_j.elem (jji);
 		      octave_idx_type kk = 0;
 		      stmp.cidx(0) = 0;
 		      for (octave_idx_type j = 0; j < new_nc; j++)
 			{
 			  if (jji < m && jj == j)
 			    {
 			      octave_idx_type iii = 0;
 			      octave_idx_type ii = idx_i.elem (iii);
 			      octave_idx_type ppp = 0;
-			      octave_idx_type ppi = lhs.cidx(j+1) - 
-				lhs.cidx(j); 
+			      octave_idx_type ppi = (j >= lhs_nc ? 0 : 
+						     lhs.cidx(j+1) - 
+						     lhs.cidx(j));
 			      octave_idx_type pp = (ppp < ppi ? 
 						    lhs.ridx(lhs.cidx(j)+ppp) :
 						    new_nr);
 			      while (ppp < ppi || iii < n)
 				{
 				  if (iii < n && ii <= pp)
 				    {
 				      if (scalar != RT ())
@@ -2623,34 +2621,30 @@ assign (Sparse<LT>& lhs, const Sparse<RT
 			for (octave_idx_type i = 0; i < m; i++)
 			  rhs_idx_j[i] = i;
 
 		      // Maximum number of non-zero elements
 		      octave_idx_type new_nzmx = lhs.nnz() + rhs.nnz();
 
 		      Sparse<LT> stmp (new_nr, new_nc, new_nzmx);
 
-		      // Started with an empty matrix. Now that we know
-		      // the assignment will succeed, resize lhs 
-		      if (lhs_nr <= 0 || lhs_nc <= 0)
-			lhs = Sparse<RT>(n, m);
-
 		      octave_idx_type jji = 0;
 		      octave_idx_type jj = idx_j.elem (jji);
 		      octave_idx_type kk = 0;
 		      stmp.cidx(0) = 0;
 		      for (octave_idx_type j = 0; j < new_nc; j++)
 			{
 			  if (jji < m && jj == j)
 			    {
 			      octave_idx_type iii = 0;
 			      octave_idx_type ii = idx_i.elem (iii);
 			      octave_idx_type ppp = 0;
-			      octave_idx_type ppi = lhs.cidx(j+1) -
-				lhs.cidx(j);
+			      octave_idx_type ppi = (j >= lhs_nc ? 0 : 
+						     lhs.cidx(j+1) - 
+						     lhs.cidx(j));
 			      octave_idx_type pp = (ppp < ppi ? 
 						    lhs.ridx(lhs.cidx(j)+ppp) :
 						    new_nr);
 			      while (ppp < ppi || iii < n)
 				{
 				  if (iii < n && ii <= pp)
 				    {
 				      RT rtmp = rhs.elem (rhs_idx_i[iii], 
