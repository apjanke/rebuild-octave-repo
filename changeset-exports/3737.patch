# HG changeset patch
# User jwe
# Date 974397670 0
#      Thu Nov 16 18:01:10 2000 +0000
# Node ID b736f8b8f0a13048696bdc3c0f408c0ef0ec4b57
# Parent  ac4609ffc702bf36335357a3872e066a685a2443
[project @ 2000-11-16 18:01:08 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2000-11-16  Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
+
+	* plot/contour.m: Reorder args for Matlab compatibility.
+
 2000-10-27  Mats Jansson  <mats.e.jansson@home.se>
 
 	* set/create_set.m: Avoid empty matrix in matrix list warning.
 
 2000-09-08  Teemu Ikonen  <tpikonen@pcu.helsinki.fi>
 
 	* plot/errorbar.m, plot/__errplot__.m: New functions.
 
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -13,37 +13,40 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} contour (@var{z}, @var{n}, @var{x}, @var{y})
+## @deftypefn {Function File} {} contour (@var{z}, @var{n})
+## @deftypefnx {Function File} {} contour (@var{x}, @var{y}, @var{z}, @var{n})
 ## Make a contour plot of the three-dimensional surface described by
 ## @var{z}.  Someone needs to improve @code{gnuplot}'s contour routines
 ## before this will be very useful.
 ## @end deftypefn
 ## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
 ## bar, stairs, gplot, gsplot, replot, xlabel, ylabel, and title}
 
 ## Author: jwe
 
-function contour (z, n, x, y)
-
-  if (nargin == 1)
-    n = 10;
-  endif
+function contour (x, y, z, n)
 
   ## XXX FIXME XXX -- these plot states should really just be set
   ## temporarily, probably inside an unwind_protect block, but there is
   ## no way to determine their current values.
 
   if (nargin == 1 || nargin == 2)
+    z = x;
+    if (nargin == 1) 
+      n = 10;
+    else
+      n = y; 
+    endif
     if (is_matrix (z))
       gset nosurface;
       gset contour;
       gset cntrparam bspline;
       if (is_scalar (n))
         command = sprintf ("gset cntrparam levels %d", n);
       elseif (is_vector (n))
         tmp = sprintf ("%f", n(1));
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2000-11-16  Paul Kienzle  <pkienzle@kienzle.powernet.co.uk>
+
+	* file-io.cc (Ffprintf): If no file id parameter, don't return
+	count of characters if nargout is 0 (for compatibility with
+	Matlab).
+
+2000-11-16  Ben Sapp  <bsapp@lanl.gov>
+
+	* DLD-FUNCTIONS/rand.cc (do_rand): Declare loop counter as
+	volatile int, not just volatile.
+
 2000-10-31  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* load-save.cc (skip_comments): Allow % as comment character too.
 	(extract_keyword): Likewise.
 
 	* Makefile.in (oct-gperf.h): Remove -a, -g, and -p flags for gperf.
 
 2000-10-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -293,17 +293,17 @@ do_rand (const octave_value_list& args, 
       Matrix m;
       retval.resize (1, m);
     }
   else if (n > 0 && m > 0)
     {
       Matrix rand_mat (n, m);
 
       for (volatile int j = 0; j < m; j++)
-	for (volatile i = 0; i < n; i++)
+	for (volatile int i = 0; i < n; i++)
 	  {
 	    double val;
 	    switch (current_distribution)
 	      {
 	      case uniform_dist:
 		F77_XFCN (dgenunf, DGENUNF, (0.0, 1.0, val));
 		rand_mat (i, j) = val;
 		break;
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -625,34 +625,43 @@ from the beginning of the file @var{fid}
 	retval = static_cast<double> (os.tell ());
     }
   else
     print_usage ("ftell");
 
   return retval;
 }
 
-DEFUN (fprintf, args, ,
+DEFUN (fprintf, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} fprintf (@var{fid}, @var{template}, @dots{})\n\
 This function is just like @code{printf}, except that the output is\n\
 written to the stream @var{fid} instead of @code{stdout}.\n\
 @end deftypefn")
 {
   double retval = -1.0;
+  bool return_char_count = true;
 
   int nargin = args.length ();
 
   if (nargin > 1 || (nargin > 0 && args(0).is_string ()))
     {
       octave_stream os;
       int fmt_n = 0;
 
-      if (args(0).is_string ())
-	os = octave_stream_list::lookup (1, "fprintf");
+      if (args(0).is_string ()) 
+	{
+	  os = octave_stream_list::lookup (1, "fprintf");
+
+	  // For compatibility with Matlab, which does not return the
+	  // character count when behaving like printf (no file id
+	  // parameter).
+
+	  return_char_count = (nargout != 0);
+	}
       else
 	{
 	  fmt_n = 1;
 	  os = octave_stream_list::lookup (args(0), "fprintf");
 	}
 
       if (! error_state)
 	{
@@ -674,17 +683,20 @@ written to the stream @var{fid} instead 
 	    }
 	  else
 	    ::error ("fprintf: format must be a string");
 	}
     }
   else
     print_usage ("fprintf");
 
-  return retval;
+  if (return_char_count)
+    return retval;
+  else
+    return octave_value();
 }
 
 DEFUN (fputs, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} fputs (@var{fid}, @var{string})\n\
 Write a string to a file with no formatting.\n\
 @end deftypefn")
 {
