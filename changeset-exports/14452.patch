# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1331498580 25200
#      Sun Mar 11 13:43:00 2012 -0700
# Branch stable
# Node ID 721be41ea98875e04152570e7862dcf3a6610538
# Parent  245963d3d6289934c4d2e7689722aa43fc582359
Stop segfault when using regular expressions with named capture buffers (bug #35683).

liboctave/regexp.cc (match): Check current match has a named buffer before assigning it.

DLD-FUNCTIONS/regexp.cc: Add %!test for mix of named and unnamed buffers.

diff --git a/liboctave/regexp.cc b/liboctave/regexp.cc
--- a/liboctave/regexp.cc
+++ b/liboctave/regexp.cc
@@ -366,18 +366,31 @@ regexp::match (const std::string& buffer
           for (int i = 1; i < matches; i++)
             {
               if (ovector[2*i] >= 0 && ovector[2*i+1] > 0)
                 {
                   if (i == 1 || ovector[2*i] != ovector[2*i-2]
                       || ovector[2*i-1] != ovector[2*i+1])
                     {
                       if (namecount > 0)
-                        named_tokens(named_idx(i-pos_offset-1)) =
-                          std::string (*(listptr+nidx[i-pos_offset-1]));
+                        {
+                          // FIXME: Should probably do this with a map()
+                          // rather than a linear search.  However,
+                          // the number of captured, named expressions
+                          // is usually pretty small (< 4)
+                          for (int j = 0; j < namecount; j++)
+                            {
+                              if (nidx[j] == i)
+                                { 
+                                  named_tokens(named_idx(j)) =
+                                    std::string (*(listptr+i-pos_offset));
+                                  break;
+                                }
+                            }
+                        }
 
                       tokens(pos_match++) = std::string (*(listptr+i));
                     }
                   else
                     pos_offset++;
                 }
             }
 
diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -763,20 +763,30 @@ Alternatively, use (?x) in the pattern.\
 %! assert (t{2}{1},'Rogers');
 %! assert (t{2}{2},'James');
 %! assert (size(nm), [1,1]);
 %! assert (nm.first{1},'John');
 %! assert (nm.first{2},'James');
 %! assert (nm.last{1},'Davis');
 %! assert (nm.last{2},'Rogers');
 
+## Tests for named tokens
 %!test
 %! # Parenthesis in named token (ie (int)) causes a problem
 %! assert (regexp('qwe int asd', ['(?<typestr>(int))'], 'names'), struct ('typestr', 'int'));
 
+%!test
+%! ## Mix of named and unnamed tokens can cause segfault (bug #35683)
+%! str = "abcde";
+%! ptn = '(?<T1>a)(\w+)(?<T2>d\w+)';
+%! tokens = regexp (str, ptn, "names");
+%! assert (isstruct (tokens) && numel (tokens) == 1);
+%! assert (tokens.T1, "a");
+%! assert (tokens.T2, "de");
+
 %!assert(regexp("abc\nabc",'.'),[1:7])
 %!assert(regexp("abc\nabc",'.','dotall'),[1:7])
 %!test
 %! assert(regexp("abc\nabc",'(?s).'),[1:7])
 %! assert(regexp("abc\nabc",'.','dotexceptnewline'),[1,2,3,5,6,7])
 %! assert(regexp("abc\nabc",'(?-s).'),[1,2,3,5,6,7])
 
 %!assert(regexp("caseCaSe",'case'),1)
