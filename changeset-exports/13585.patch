# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1312369775 -7200
#      Wed Aug 03 13:09:35 2011 +0200
# Node ID f0d6f2ff45dee3ff6d7ce303d0050aef8f9ac999
# Parent  057ec114ac152934c68b0abf2d7708fa9b301540
Now making correct use of the interface for the IRC Interface.

diff --git a/gui/src/IRCWidget.cpp b/gui/src/IRCWidget.cpp
--- a/gui/src/IRCWidget.cpp
+++ b/gui/src/IRCWidget.cpp
@@ -19,16 +19,17 @@
 #include "ResourceManager.h"
 #include "IRCWidget.h"
 #include <QMessageBox>
 #include <QHBoxLayout>
 #include <QVBoxLayout>
 #include <QLabel>
 #include <QSettings>
 #include <QInputDialog>
+#include "IRCClientImpl.h"
 
 IRCWidget::IRCWidget (QWidget * parent):
 QWidget (parent)
 {
   QSettings *settings = ResourceManager::instance ()->settings ();
   bool connectOnStartup = settings->value ("connectOnStartup").toBool ();
   m_autoIdentification = settings->value ("autoIdentification").toBool ();
   m_nickServPassword = settings->value ("nickServPassword").toString ();
@@ -68,33 +69,33 @@ QWidget (parent)
   //m_chatWindow->setFocusProxy (m_inputLine);
   this->setFocusProxy (m_inputLine);
   m_nickButton->setFocusProxy (m_inputLine);
 
   QFont font;
   font.setFamily ("Courier");
   font.setPointSize (11);
   m_chatWindow->setFont (font);
-  m_ircClientImpl = new IRCClientImpl ();
+  m_ircClientInterface = new IRCClientImpl ();
 
-  connect (m_ircClientImpl, SIGNAL (connected (QString)),
+  connect (m_ircClientInterface, SIGNAL (connected (QString)),
            this, SLOT (handleConnected (QString)));
-  connect (m_ircClientImpl, SIGNAL(loggedIn(QString)),
+  connect (m_ircClientInterface, SIGNAL(loggedIn(QString)),
            this, SLOT (joinOctaveChannel (QString)));
-  connect (m_ircClientImpl, SIGNAL (error (QString)),
+  connect (m_ircClientInterface, SIGNAL (error (QString)),
            this, SLOT (showErrorMessage (QString)));
-  connect (m_ircClientImpl, SIGNAL (debugMessage (QString)),
+  connect (m_ircClientInterface, SIGNAL (debugMessage (QString)),
            this, SLOT (showStatusMessage (QString)));
-  connect (m_ircClientImpl, SIGNAL (message (QString, QString, QString)),
+  connect (m_ircClientInterface, SIGNAL (message (QString, QString, QString)),
            this, SLOT (showMessage (QString, QString, QString )));
-  connect (m_ircClientImpl, SIGNAL (nicknameChanged (QString,QString)),
+  connect (m_ircClientInterface, SIGNAL (nicknameChanged (QString,QString)),
            this, SLOT (handleNickChange (QString,QString)));
-  connect (m_ircClientImpl, SIGNAL (notification (QString,QString)),
+  connect (m_ircClientInterface, SIGNAL (notification (QString,QString)),
            this, SLOT (showNotification (QString,QString)));
-  connect (m_ircClientImpl, SIGNAL (loggedIn(QString)),
+  connect (m_ircClientInterface, SIGNAL (loggedIn(QString)),
            this, SLOT (handleLoggedIn(QString)));
   connect (m_nickButton, SIGNAL (clicked ()), this, SLOT (nickPopup ()));
   connect (m_inputLine, SIGNAL (returnPressed ()), this,
 	   SLOT (sendInputLine ()));
 
   if (connectOnStartup)
     connectToServer ();
 }
@@ -110,17 +111,17 @@ IRCWidget::connectToServer ()
   if (hostAddresses.isEmpty ())
     {
       showStatusMessage ("Failed to lookup irc.freenode.net.");
     }
   else
     {
       showStatusMessage (QString ("Attempting to connect to %1.")
                          .arg (hostAddresses.at (0).toString ()));
-      m_ircClientImpl->connectToHost(hostAddresses.at (0), 6667, m_initialNick);
+      m_ircClientInterface->connectToHost(hostAddresses.at (0), 6667, m_initialNick);
     }
 }
 
 void
 IRCWidget::showStatusMessage (const QString& message)
 {
   m_chatWindow->append (QString ("<i>%1</i>").arg (message));
 }
@@ -137,25 +138,26 @@ IRCWidget::handleConnected (const QStrin
   showStatusMessage (QString ("Connected to server %1.").arg (host));
 }
 
 void
 IRCWidget::joinOctaveChannel (const QString& nick)
 {
   Q_UNUSED (nick);
   showStatusMessage (QString ("Joining channel #octave."));
-  m_ircClientImpl->sendJoinRequest ("#octave");
+  m_ircClientInterface->sendJoinRequest ("#octave");
+  m_ircClientInterface->focusChannel ("#octave");
 }
 
 void
 IRCWidget::showMessage (const QString& channel, const QString& sender, const QString& message)
 {
   Q_UNUSED (channel);
   QString output;
-  if (message.contains (m_ircClientImpl->nickname ()))
+  if (message.contains (m_ircClientInterface->nickname ()))
     {
       output =
         QString ("<font color=\"#990000\"><b>%1:</b> %2</font>").arg (sender).
         arg (message);
     }
   else
     {
       output =
@@ -174,20 +176,20 @@ IRCWidget::showNotification (const QStri
 
 void
 IRCWidget::nickPopup ()
 {
   bool ok;
   QString newNick =
     QInputDialog::getText (this, QString ("Nickname"),
 			   QString ("Type in your nickname:"),
-                           QLineEdit::Normal, m_ircClientImpl->nickname (), &ok);
+                           QLineEdit::Normal, m_ircClientInterface->nickname (), &ok);
   if (ok)
     {
-      m_ircClientImpl->sendNicknameChangeRequest (newNick);
+      m_ircClientInterface->sendNicknameChangeRequest (newNick);
     }
 }
 
 void
 IRCWidget::sendMessage (QString message)
 {
   // Do not send empty messages.
   if (message.isEmpty ())
@@ -197,42 +199,42 @@ IRCWidget::sendMessage (QString message)
   while (message.at (0).isSpace ())
     message.remove (0, 1);
   if (message.startsWith ("/"))
     {
       QStringList line =
 	message.split (QRegExp ("\\s+"), QString::SkipEmptyParts);
       if (line.at (0) == "/join")
 	{
-          m_ircClientImpl->sendJoinRequest (line.at (1));
+          m_ircClientInterface->sendJoinRequest (line.at (1));
 	}
       else if (line.at (0) == "/nick")
 	{
-          m_ircClientImpl->sendNicknameChangeRequest (line.at (1));
+          m_ircClientInterface->sendNicknameChangeRequest (line.at (1));
 	}
       else if (line.at (0) == "/msg")
 	{
 	  QString recipient = line.at (1);
 	  // Since we splitted the message before, we have to glue it together again.
 	  QString pmsg = "";
 	  for (int i = 2; i < line.length (); i++)
 	    {
 	      pmsg += line.at (i);
 	      pmsg += " ";
 	    }
-          m_ircClientImpl->sendPrivateMessage(recipient, pmsg);
+          m_ircClientInterface->sendPrivateMessage(recipient, pmsg);
 	}
     }
   else
     {
-      m_ircClientImpl->sendPublicMessage (message);
+      m_ircClientInterface->sendPublicMessage (message);
       message.replace ("<", "&lt;");
       message.replace (">", "&gt;");
       m_chatWindow->append (QString ("<b>%1:</b> %2").
-                            arg (m_ircClientImpl->nickname ()).arg (message));
+                            arg (m_ircClientInterface->nickname ()).arg (message));
     }
 }
 
 void
 IRCWidget::sendInputLine ()
 {
   sendMessage (m_inputLine->text ());
   m_inputLine->setText ("");
@@ -248,17 +250,17 @@ IRCWidget::handleLoggedIn (const QString
   m_nickButton->setEnabled (true);
   m_inputLine->setEnabled (true);
   m_chatWindow->setEnabled (true);
   m_inputLine->setFocus ();
 
 
   if (m_autoIdentification)
     {
-      m_ircClientImpl->sendPrivateMessage("NickServ", QString ("identify %1").
+      m_ircClientInterface->sendPrivateMessage("NickServ", QString ("identify %1").
                                           arg (m_nickServPassword));
     }
 }
 
 void
 IRCWidget::handleNickChange (const QString &oldNick, const QString &newNick)
 {
   m_chatWindow->append (QString ("%1 is now known as %2.").arg (oldNick).arg (newNick));
diff --git a/gui/src/IRCWidget.h b/gui/src/IRCWidget.h
--- a/gui/src/IRCWidget.h
+++ b/gui/src/IRCWidget.h
@@ -19,17 +19,17 @@
 #ifndef IRCWIDGET_H
 #define IRCWIDGET_H
 
 #include <QWidget>
 #include <QTextEdit>
 #include <QPushButton>
 #include <QLineEdit>
 #include <QCompleter>
-#include "IRCClientImpl.h"
+#include "IRCClientInterface.h"
 
 class IRCWidget:public QWidget
 {
 Q_OBJECT public:
   explicit IRCWidget (QWidget * parent);
   void connectToServer ();
 
 public slots:
@@ -47,17 +47,17 @@ public slots:
   void handleUserQuit (const QString& nick, const QString& reason);
 
   void nickPopup ();
   void sendMessage (QString);
   void sendInputLine ();
   void updateNickCompleter ();
 
 private:
-  IRCClientImpl * m_ircClientImpl;
+  IRCClientInterface * m_ircClientInterface;
   QTextEdit *m_chatWindow;
   QPushButton *m_nickButton;
   QLineEdit *m_inputLine;
 
   QString m_initialNick;
   bool m_autoIdentification;
   QString m_nickServPassword;
   QString m_settingsFile;
diff --git a/gui/src/qirc/IRCClientImpl.cpp b/gui/src/qirc/IRCClientImpl.cpp
--- a/gui/src/qirc/IRCClientImpl.cpp
+++ b/gui/src/qirc/IRCClientImpl.cpp
@@ -13,27 +13,27 @@
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include "IRCClientImpl.h"
 
-IRCEvent::IRCEvent (const char *serverMessage)
+IRCServerMessage::IRCServerMessage (const char *serverMessage)
 {
   char prefix[MAX_LINE_LEN];
   int index = 0;
 
-  nick = "";
-  user = "";
-  host = "";
+  n_nick = "";
+  m_user = "";
+  m_host = "";
   for (int i = 0; i < 15; i++)
     {
-      param[i] = "";
+      m_parameter[i] = "";
     }
 
   if (serverMessage[0] == CHR_COLON)
     {
       index++;
       strcpy (prefix,
               getStringToken (serverMessage, index).toStdString ().c_str ());
 
@@ -47,122 +47,134 @@ IRCEvent::IRCEvent (const char *serverMe
               break;
             case '@':
               etapa = 2;
               break;
             default:
               switch (etapa)
                 {
                 case 0:
-                  nick += prefix[i];
+                  n_nick += prefix[i];
                   break;
                 case 1:
-                  user += prefix[i];
+                  m_user += prefix[i];
                   break;
                 default:
-                  host += prefix[i];
+                  m_host += prefix[i];
                   break;
                 }
             }
         }
     }
 
-  command = getStringToken (serverMessage, index);
-  command = command.toUpper ();
+  m_command = getStringToken (serverMessage, index);
+  m_command = m_command.toUpper ();
 
-  paramCount = 0;
+  m_parameterCount = 0;
   while (serverMessage[index] != 0)
     {
-      if ((serverMessage[index] == CHR_COLON) || (paramCount == 14))
+      if ((serverMessage[index] == CHR_COLON) || (m_parameterCount == 14))
         {
 
           if (serverMessage[index] == CHR_COLON)
             {
               index++;
             }
 
-          param[paramCount] = (const char *) (serverMessage + index);
+          m_parameter[m_parameterCount] = (const char *) (serverMessage + index);
           index += strlen (serverMessage + index);
         }
       else
         {
-          param[paramCount] = getStringToken (serverMessage, index);
+          m_parameter[m_parameterCount] = getStringToken (serverMessage, index);
         }
-      paramCount++;
+      m_parameterCount++;
     }
 
-  if (strlen (command.toStdString ().c_str ()) ==
-      strspn (command.toStdString ().c_str (), DIGITS))
+  if (strlen (m_command.toStdString ().c_str ()) ==
+      strspn (m_command.toStdString ().c_str (), DIGITS))
     {
-      numeric = true;
-      codeNumber = atoi (command.toStdString ().c_str ());
+      n_numeric = true;
+      m_codeNumber = atoi (m_command.toStdString ().c_str ());
     }
   else
     {
-      numeric = false;
+      n_numeric = false;
     }
 }
 
 int
-IRCEvent::getNumeric ()
+IRCServerMessage::numericValue ()
 {
-  if (!numeric)
+  if (!n_numeric)
     {
       return -1;
     }
   else
     {
-      return codeNumber;
+      return m_codeNumber;
     }
 }
 
 QString
-IRCEvent::getParam (int index)
+IRCServerMessage::parameter (int index)
 {
   if ((index < 0) || (index > 14))
     {
       return QString ();
     }
   else
     {
-      return param[index];
+      return m_parameter[index];
     }
 }
 
 int
-IRCEvent::skipSpaces (const char *line, int &index)
+IRCServerMessage::skipSpaces (const char *line, int &index)
 {
   while (line[index] == CHR_SPACE)
     {
       index++;
     }
   return index;
 }
 
 QString
-IRCEvent::getStringToken (const char *line, int &index)
+IRCServerMessage::getStringToken (const char *line, int &index)
 {
   QString token ("");
   skipSpaces (line, index);
   while ((line[index] != CHR_SPACE) && (line[index] != CHR_ZERO))
     {
       token += line[index];
       index++;
     }
 
   skipSpaces (line, index);
   return token;
 }
 
 QString
-IRCEvent::getStringToken (QString line, int &index)
+IRCServerMessage::getStringToken (QString line, int &index)
 {
   return getStringToken (line.toStdString ().c_str (), index);
 }
 
+IRCChannelProxy::IRCChannelProxy ()
+  : IRCChannelProxyInterface ()
+{
+
+}
+
+QTextDocument *
+IRCChannelProxy::conversation ()
+{
+  return &m_conversation;
+}
+
 IRCClientImpl::IRCClientImpl ()
   : IRCClientInterface ()
 {
   connect (&m_tcpSocket, SIGNAL (connected ()), this, SLOT (handleConnected ()));
   connect (&m_tcpSocket, SIGNAL (disconnected ()), this, SLOT (handleDisconnected ()));
   connect (&m_tcpSocket, SIGNAL (readyRead ()), this, SLOT (handleReadyRead ()));
 }
 
@@ -199,21 +211,28 @@ IRCClientImpl::host()
 }
 
 int
 IRCClientImpl::port()
 {
   return m_port;
 }
 
+IRCChannelProxyInterface *
+IRCClientImpl::ircChannelProxy (const QString &channel)
+{
+  if (m_channels.contains (channel))
+    return m_channels[channel];
+  return 0;
+}
+
 void
 IRCClientImpl::sendJoinRequest (const QString& channel)
 {
   sendCommand (1, COMMAND_JOIN, channel.toStdString ().c_str ());
-  focusChannel (channel);
 }
 
 void
 IRCClientImpl::leaveChannel (const QString& channel, const QString& reason)
 {
   Q_UNUSED (channel);
   Q_UNUSED (reason);
 }
@@ -278,24 +297,42 @@ IRCClientImpl::handleReadyRead ()
         handleIncomingLine(QString(line));
       else
         break;
     }
   while (true);
 }
 
 void
+IRCClientImpl::handleNicknameChanged (const QString &oldNick, const QString &newNick)
+{
+  emit nicknameChanged (oldNick, newNick);
+}
+
+void
+IRCClientImpl::handleUserJoined (const QString &nick, const QString &channel)
+{
+  emit userJoined (nick, channel);
+}
+
+void
+IRCClientImpl::handleUserQuit (const QString &nick, const QString &reason)
+{
+  emit userQuit (nick, reason);
+}
+
+void
 IRCClientImpl::handleIncomingLine (const QString &line)
 {
   if (m_connected && !line.isEmpty())
     {
-      IRCEvent ircEvent(line.toStdString().c_str());
-      if (ircEvent.isNumeric () == true)
+      IRCServerMessage ircEvent(line.toStdString().c_str());
+      if (ircEvent.isNumericValue () == true)
         {
-          switch (ircEvent.getNumeric ())
+          switch (ircEvent.numericValue ())
             {
               case RPL_WELCOME:
                 emit loggedIn (nickname ());
                 break;
               case ERR_NICKNAMEINUSE:
               case ERR_NICKCOLLISION:
                 emit debugMessage ("FIXME: Received nickname in use reply.");
                 break;
@@ -306,37 +343,35 @@ IRCClientImpl::handleIncomingLine (const
               case RPL_MOTD:
               case ERR_NOMOTD:
               case RPL_ENDOFMOTD:
                 break;
               case RPL_NOTOPIC:
               case RPL_TOPIC:
                 break;
               case RPL_NAMREPLY:
-                /*
-                m_nickList =
-                  event->getParam (3).split (QRegExp ("\\s+"), QString::SkipEmptyParts);
-                updateNickCompleter ();*/
+
+                //m_nickList = event->getParam (3).split (QRegExp ("\\s+"), QString::SkipEmptyParts);
                 break;
             }
         }
       else
         {
-          QString command = ircEvent.getCommand ();
+          QString command = ircEvent.command ();
           if (command == COMMAND_NICK)
             {
-              emit nicknameChanged (ircEvent.getParam(0), ircEvent.getParam(1));
+              handleNicknameChanged (ircEvent.parameter (0), ircEvent.parameter (1));
             }
           else if (command == COMMAND_QUIT)
             {
-              emit userQuit (ircEvent.getNick (), ircEvent.getParam (0));
+              handleUserQuit (ircEvent.nick (), ircEvent.parameter (0));
             }
           else if (command == COMMAND_JOIN)
             {
-              emit userJoined (ircEvent.getNick (), ircEvent.getParam (0));
+              handleUserJoined(ircEvent.nick (), ircEvent.parameter (0));
             }
           else if (command == COMMAND_PART)
             {
               emit debugMessage ("WRITEME: Received part.");
               //emit part (ircEvent.getNick ().toStdString ().c_str (),
               //           ircEvent.getParam (0).toStdString ().c_str (),
               //           ircEvent.getParam (1).toStdString ().c_str ());
             }
@@ -363,30 +398,30 @@ IRCClientImpl::handleIncomingLine (const
           else if (command == COMMAND_INVITE)
             {
               emit debugMessage ("WRITEME: Received invite.");
               //emit invite (ircEvent.getNick ().toStdString ().c_str (),
               //             ircEvent.getParam (1).toStdString ().c_str ());
             }
           else if (command == COMMAND_PRIVMSG)
             {
-              emit message (ircEvent.getParam (0), ircEvent.getNick (), ircEvent.getParam (1));
+              emit message (ircEvent.parameter (0), ircEvent.nick (), ircEvent.parameter (1));
             }
           else if (command == COMMAND_NOTICE)
             {
-              emit notification (ircEvent.getNick ().toStdString ().c_str (),
-                                 ircEvent.getParam (1).toStdString ().c_str ());
+              emit notification (ircEvent.nick ().toStdString ().c_str (),
+                                 ircEvent.parameter (1).toStdString ().c_str ());
             }
           else if (command == COMMAND_PING)
             {
               sendCommand (1, COMMAND_PONG, m_nickname.toStdString ().c_str ());
             }
           else if (command == COMMAND_ERROR)
             {
-              emit error (ircEvent.getParam (0));
+              emit error (ircEvent.parameter (0));
             }
           else
             {
               emit debugMessage (QString("FIXME: Received unknown reply: %1").arg(command));
               // not recognized.
             }
         }
     }
diff --git a/gui/src/qirc/IRCClientImpl.h b/gui/src/qirc/IRCClientImpl.h
--- a/gui/src/qirc/IRCClientImpl.h
+++ b/gui/src/qirc/IRCClientImpl.h
@@ -16,119 +16,123 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef IRCCLIENTIMPL_H
 #define IRCCLIENTIMPL_H
 
 #include <QTcpSocket>
 #include <QHostInfo>
+#include <QStringList>
+#include <QTextDocument>
 #include "IRCClientInterface.h"
 
-#define MAX_LINE_LEN 512
-#define PARAM_MAX_COUNT 15
-#define CHR_COLON ':'
-#define CHR_SPACE ' '
-#define CHR_ZERO '\0'
-#ifdef Q_OS_LINUX
-#define CRLF "\n"
-#else
-#define CRLF "\r\n"
-#endif
-#define DIGITS	"0123456789"
+class IRCServerMessage
+{
+  #define MAX_LINE_LEN 512
+  #define PARAM_MAX_COUNT 15
+  #define CHR_COLON ':'
+  #define CHR_SPACE ' '
+  #define CHR_ZERO '\0'
+  #ifdef Q_OS_LINUX
+  #define CRLF "\n"
+  #else
+  #define CRLF "\r\n"
+  #endif
+  #define DIGITS	"0123456789"
+
+public:
+  IRCServerMessage (const char *serverMessage);
 
-class IRCEvent
-{
-private:
-  int codeNumber;
-  bool numeric;
+  bool isNumericValue ()
+  {
+    return n_numeric;
+  }
+
+  QString nick ()
+  {
+    return n_nick;
+  }
 
-  QString nick, user, host;
-  QString command;
-  int paramCount;
-  QString param[PARAM_MAX_COUNT];
+  QString command ()
+  {
+    return m_command;
+  }
 
-protected:
+  int numericValue ();
+  QString parameter (int index);
+
+private:
   int skipSpaces (const char *linea, int &index);
   QString getStringToken (const char *linea, int &index);
   QString getStringToken (QString linea, int &index);
 
-public:
-    IRCEvent (const char *serverMessage);
+  int m_codeNumber;
+  bool n_numeric;
 
-  bool isNumeric ()
-  {
-    return numeric;
-  }
+  QString n_nick, m_user, m_host;
+  QString m_command;
+  int m_parameterCount;
+  QString m_parameter[PARAM_MAX_COUNT];
+};
 
-  QString getNick ()
-  {
-    return nick;
-  }
-  QString getUser ()
-  {
-    return user;
-  }
-  QString getHost ()
-  {
-    return host;
-  }
-  QString getCommand ()
-  {
-    return command;
-  }
-  int getNumeric ();
-
-  int getParamCount ()
-  {
-    return paramCount;
-  }
-  QString getParam (int index);
+class IRCChannelProxy : public IRCChannelProxyInterface
+{
+public:
+  IRCChannelProxy ();
+  QTextDocument *conversation ();
+private:
+  QStringList m_userList;
+  QTextDocument m_conversation;
 };
 
 class IRCClientImpl : public IRCClientInterface
 {
   Q_OBJECT
 public:
-  IRCClientImpl();
+  IRCClientImpl ();
+
+  const QString& nickname ();
+  bool isConnected ();
+  const QHostAddress& host();
+  int port();
+  IRCChannelProxyInterface *ircChannelProxy(const QString& channel);
 
 public slots:
   void connectToHost (const QHostAddress& host, int port, const QString& initialNick);
   void disconnect ();
   void reconnect ();
 
-  bool isConnected ();
-  const QHostAddress& host();
-  int port();
-
   void sendJoinRequest (const QString& channel);
   void leaveChannel (const QString& channel, const QString& reason);
 
   void focusChannel (const QString& channel);
   void sendNicknameChangeRequest (const QString &nickname);
   void sendPublicMessage (const QString& message);
   void sendPrivateMessage (const QString &recipient, const QString &message);
 
-  const QString& nickname ();
-
 signals:
   void debugMessage (const QString& message);
 
 private slots:
   void handleConnected ();
   void handleDisconnected ();
   void handleReadyRead ();
 
 private:
+  void handleNicknameChanged (const QString& oldNick, const QString& newNick);
+  void handleUserJoined (const QString& nick, const QString& channel);
+  void handleUserQuit (const QString& nick, const QString& reason);
   void handleIncomingLine (const QString& line);
   void sendLine (const QString& line);
   void sendCommand (int numberOfCommands, const char *command, ...);
 
-  QHostAddress  m_host;
-  int           m_port;
-  QString       m_nickname;
-  bool          m_connected;
-  QString       m_focussedChannel;
+  QHostAddress                    m_host;
+  int                             m_port;
+  QString                         m_nickname;
+  bool                            m_connected;
+  QString                         m_focussedChannel;
 
-  QTcpSocket    m_tcpSocket;
+  QTcpSocket                      m_tcpSocket;
+  QMap<QString, IRCChannelProxyInterface*> m_channels;
 };
 
 #endif // IRCCLIENTIMPL_H
diff --git a/gui/src/qirc/IRCClientInterface.h b/gui/src/qirc/IRCClientInterface.h
--- a/gui/src/qirc/IRCClientInterface.h
+++ b/gui/src/qirc/IRCClientInterface.h
@@ -17,56 +17,65 @@
  */
 
 #ifndef IRCCLIENTINTERFACE_H
 #define IRCCLIENTINTERFACE_H
 
 #include <QString>
 #include <QObject>
 #include <QHostAddress>
+#include <QTextDocument>
+#include "IRCCodes.h"
 
-#include "IRCCodes.h"
+class IRCChannelProxyInterface
+{
+public:
+  IRCChannelProxyInterface () { }
+  virtual QTextDocument *conversation () = 0;
+};
 
 /**
   * \class IRCClientInterface
   * IRC Clients need to implement this interface.
   */
 class IRCClientInterface : public QObject
 {
   Q_OBJECT
 public:
   IRCClientInterface () { }
   virtual ~IRCClientInterface () { }
 
+  virtual const QString& nickname () = 0;
+  virtual bool isConnected () = 0;
+  virtual const QHostAddress& host() = 0;
+  virtual int port() = 0;
+  virtual IRCChannelProxyInterface *ircChannelProxy(const QString& channel) = 0;
+
 public slots:
   // Connection state:
   virtual void connectToHost (const QHostAddress& host, int port, const QString& initialNick) = 0;
   virtual void disconnect () = 0;
   virtual void reconnect () = 0;
 
-  virtual bool isConnected () = 0;
-  virtual const QHostAddress& host() = 0;
-  virtual int port() = 0;
-
   virtual void sendJoinRequest (const QString& channel) = 0;
   virtual void leaveChannel (const QString& channel, const QString& reason) = 0;
 
   // Messaging:
   virtual void focusChannel (const QString& channel) = 0;
   virtual void sendNicknameChangeRequest (const QString& nickname) = 0;
   virtual void sendPublicMessage (const QString& message) = 0;
   virtual void sendPrivateMessage (const QString& recipient, const QString& message) = 0;
-  virtual const QString& nickname () = 0;
 
 signals:
   void newMessage (const QString& channel, const QString& sender, const QString& message);
   void connected (const QString& server);
   void disconnected ();
   void error (const QString& message);
   void notification (const QString& sender, const QString& message);
   void message (const QString& channel, const QString& sender, const QString& message);
   void nicknameChanged (const QString& oldNick, const QString& newNick);
   void userJoined (const QString& nick, const QString& channel);
   void userQuit (const QString& nick, const QString& reason);
   void loggedIn (const QString& nick);
+  void userList (const QString& channel, const QStringList& list);
 };
 
 #endif // IRCCLIENTINTERFACE_H
