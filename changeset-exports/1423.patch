# HG changeset patch
# User jwe
# Date 811440277 0
#      Mon Sep 18 16:04:37 1995 +0000
# Node ID 2d88758ed94bde6fba1bdf6b03442cedfe0466b8
# Parent  afde7233c4dc6a52a74088526c4ade8a31e4fb51
[project @ 1995-09-18 16:04:37 by jwe]

diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -29,36 +29,43 @@ Software Foundation, 59 Temple Place - S
 
 #include <strstream.h>
 
 #include "defun.h"
 #include "error.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "tree-const.h"
+#include "user-prefs.h"
 #include "utils.h"
 
 // Current error state.
 int error_state = 0;
 
 // XXX FIXME XXX
 int suppress_octave_error_messages = 0;
 
 static void
 verror (const char *name, const char *fmt, va_list args)
 {
   flush_output_to_pager ();
 
+  int to_beep_or_not_to_beep = user_pref.beep_on_error && ! error_state;
+
+  if (to_beep_or_not_to_beep)
+    cerr << "\a";
   if (name)
     cerr << name << ": ";
   cerr.vform (fmt, args);
   cerr << endl;
 
   ostrstream output_buf;
 
+  if (to_beep_or_not_to_beep)
+    output_buf << "\a";
   if (name)
     output_buf << name << ": ";
   output_buf.vform (fmt, args);
   output_buf << endl << ends;
 
   char *msg = output_buf.str ();
 
   maybe_write_to_diary_file (msg);
@@ -70,45 +77,45 @@ verror (const char *name, const char *fm
 // is just "" or "\n".  This allows error ("") and error ("\n") to
 // just set the error state.
 
 static void
 error_1 (const char *name, const char *fmt, va_list args)
 {
   if (error_state != -2)
     {
-      if (! error_state)
-	error_state = 1;
-
       if (! suppress_octave_error_messages)
 	{
 	  if (fmt)
 	    {
 	      if (*fmt)
 		{
 		  int len = strlen (fmt);
 		  if (fmt[len - 1] == '\n')
 		    {
-		      error_state = -2;
-
 		      if (len > 1)
 			{
 			  char *tmp_fmt = strsave (fmt);
 			  tmp_fmt[len - 1] = '\0';
 			  verror (name, tmp_fmt, args);
 			  delete [] tmp_fmt;
 			}
+
+		      error_state = -2;
 		    }
 		  else
 		    verror (name, fmt, args);
 		}
 	    }
 	  else
 	    panic ("error_1: invalid format");
 	}
+
+      if (! error_state)
+	error_state = 1;
     }
 }
 
 void
 message (const char *name, const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -502,16 +502,17 @@ initialize_error_handlers ()
 
 // What happens on --traditional.
 
 static void
 maximum_braindamage (void)
 {
   bind_builtin_variable ("PS1", ">> ");
   bind_builtin_variable ("PS2", "");
+  bind_builtin_variable ("beep_on_error", "true");
   bind_builtin_variable ("default_save_format", "mat-binary");
   bind_builtin_variable ("define_all_return_values", "true");
   bind_builtin_variable ("do_fortran_indexing", "true");
   bind_builtin_variable ("empty_list_elements_ok", "true");
   bind_builtin_variable ("implicit_str_to_num_ok", "true");
   bind_builtin_variable ("ok_to_lose_imaginary_part", "true");
   bind_builtin_variable ("page_screen_output", "false");
   bind_builtin_variable ("prefer_column_vectors", "false");
diff --git a/src/user-prefs.cc b/src/user-prefs.cc
--- a/src/user-prefs.cc
+++ b/src/user-prefs.cc
@@ -40,16 +40,17 @@ Software Foundation, 59 Temple Place - S
 user_preferences user_pref;
 
 // Initialize global user_pref structure.
 
 void
 init_user_prefs (void)
 {
   user_pref.automatic_replot = 0;
+  user_pref.beep_on_error = 0;
   user_pref.define_all_return_values = 0;
   user_pref.do_fortran_indexing = 0;
   user_pref.empty_list_elements_ok = 0;
   user_pref.ignore_function_time_stamp = 0;
   user_pref.implicit_str_to_num_ok = 0;
   user_pref.ok_to_lose_imaginary_part = 0;
   user_pref.output_max_field_width = 0;
   user_pref.output_precision = 0;
@@ -125,16 +126,27 @@ int
 automatic_replot (void)
 {
   user_pref.automatic_replot = check_str_pref ("automatic_replot");
 
   return 0;
 }
 
 
+// Should we beep obnoxiously before printing error messages?
+
+int
+beep_on_error (void)
+{
+  user_pref.beep_on_error = check_str_pref ("beep_on_error");
+
+  return 0;
+}
+
+
 // Should variables returned from functions have default values if
 // they are otherwise uninitialized?
 
 int
 define_all_return_values (void)
 {
   user_pref.define_all_return_values =
     check_str_pref ("define_all_return_values");
diff --git a/src/user-prefs.h b/src/user-prefs.h
--- a/src/user-prefs.h
+++ b/src/user-prefs.h
@@ -22,16 +22,17 @@ Software Foundation, 59 Temple Place - S
 */
 
 #if !defined (octave_user_prefs_h)
 #define octave_user_prefs_h 1
 
 struct user_preferences
 {
   int automatic_replot;
+  int beep_on_error;
   int define_all_return_values;
   int do_fortran_indexing;
   int empty_list_elements_ok;
   int ignore_function_time_stamp;
   int implicit_str_to_num_ok;
   int ok_to_lose_imaginary_part;
   int output_max_field_width;
   int output_precision;
@@ -69,16 +70,17 @@ struct user_preferences
   char *pwd;
 };
 
 extern user_preferences user_pref;
 
 extern void init_user_prefs (void);
 
 extern int automatic_replot (void);
+extern int beep_on_error (void);
 extern int define_all_return_values (void);
 extern int do_fortran_indexing (void);
 extern int empty_list_elements_ok (void);
 extern int ignore_function_time_stamp (void);
 extern int implicit_str_to_num_ok (void);
 extern int ok_to_lose_imaginary_part (void);
 extern int page_screen_output (void);
 extern int prefer_column_vectors (void);
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1604,16 +1604,20 @@ install_builtin_variables (void)
 
   DEFCONST ("argv", SBV_argv, , 0, 0,
     "the command line arguments this program was invoked with");
 
   DEFVAR ("automatic_replot", SBV_automatic_replot, "false",
 	  0, automatic_replot,
     "if true, auto-insert a replot command when a plot changes");
 
+  DEFVAR ("beep_on_error", SBV_beep_on_error, "false", 0,
+	  beep_on_error,
+    "if true, beep before printing error messages");
+
   DEFVAR ("default_return_value", SBV_default_return_value, Matrix (),
 	  0, 0,
     "the default for value for unitialized variables returned from\n\
 functions.  Only used if the variable initialize_return_values is\n\
 set to \"true\".");
 
   DEFVAR ("default_save_format", SBV_default_save_format, "ascii",
 	  0, sv_default_save_format,
