# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1295053124 28800
#      Fri Jan 14 16:58:44 2011 -0800
# Node ID 6eded7561d9d066c84c89182d21e865855fdc950
# Parent  a4b0e292107f3884de0136dec200cde7311027f9
Add undocumented polyaffine function to documentation.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2011-01-14  Rik  <octave@nomad.inbox5.com>
+
+	* interpreter/octave.texi, interpreter/poly.txi: Add undocumented 
+	polyaffine to documentation.
+
 2011-01-14  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/container.txi: Add undocumented nfields to documentation.
 
 2011-01-14  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/poly.txi: Add undocumented ppder, ppint, ppjumps
 	functions to documentation.
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -665,17 +665,17 @@ Sets
 
 * Set Operations::
 
 Polynomial Manipulations
 
 * Evaluating Polynomials::
 * Finding Roots::
 * Products of Polynomials::
-* Derivatives and Integrals::
+* Derivatives / Integrals / Transforms::
 * Polynomial Interpolation::
 * Miscellaneous Functions::
 
 Interpolation
 
 * One-dimensional Interpolation::
 * Multi-dimensional Interpolation::
 
diff --git a/doc/interpreter/poly.txi b/doc/interpreter/poly.txi
--- a/doc/interpreter/poly.txi
+++ b/doc/interpreter/poly.txi
@@ -36,17 +36,17 @@ p(x) = @var{c}(1) x^@var{N} + @dots{} + 
 @end example
 
 @end ifnottex
 
 @menu
 * Evaluating Polynomials::
 * Finding Roots::
 * Products of Polynomials::
-* Derivatives and Integrals::
+* Derivatives / Integrals / Transforms::
 * Polynomial Interpolation::
 * Miscellaneous Functions::
 @end menu
 
 @node Evaluating Polynomials
 @section Evaluating Polynomials
 
 The value of a polynomial represented by the vector @var{c} can be evaluated
@@ -98,18 +98,18 @@ for a definition), and then finding its 
 @DOCSTRING(deconv)
 
 @DOCSTRING(conv2)
 
 @DOCSTRING(polygcd)
 
 @DOCSTRING(residue)
 
-@node Derivatives and Integrals
-@section Derivatives and Integrals
+@node Derivatives / Integrals / Transforms
+@section Derivatives / Integrals / Transforms
 
 Octave comes with functions for computing the derivative and the integral
 of a polynomial.  The functions @code{polyderiv} and @code{polyint}
 both return new polynomials describing the result.  As an example we'll
 compute the definite integral of @math{p(x) = x^2 + 1} from 0 to 3.
 
 @example
 @group
@@ -121,16 +121,18 @@ area = polyval(integral, 3) - polyval(in
 @end example
 
 @DOCSTRING(polyderiv)
 
 @DOCSTRING(polyder)
 
 @DOCSTRING(polyint)
 
+@DOCSTRING(polyaffine)
+
 @node Polynomial Interpolation
 @section Polynomial Interpolation
 
 Octave comes with good support for various kinds of interpolation,
 most of which are described in @ref{Interpolation}.  One simple alternative
 to the functions described in the aforementioned chapter, is to fit
 a single polynomial to some given data points.  To avoid a highly
 fluctuating polynomial, one most often wants to fit a low-order polynomial
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2011-01-14  Rik  <octave@nomad.inbox5.com>
+
+	* ploynomial/polyaffine.m: Improve docstring.
+
 2011-01-14  Rik  <octave@nomad.inbox5.com>
 
 	* general/interp1.m, general/interp2.m, polynomial/mkpp.m,
 	polynomial/pchip.m, polynomial/ppder.m, polynomial/ppint.m,
 	polynomial/ppjumps.m, polynomial/ppval.m, polynomial/spline.m,
 	polynomial/unmkpp.m: Improve docstrings
 
 2011-01-14  Rik  <octave@nomad.inbox5.com>
diff --git a/scripts/polynomial/polyaffine.m b/scripts/polynomial/polyaffine.m
--- a/scripts/polynomial/polyaffine.m
+++ b/scripts/polynomial/polyaffine.m
@@ -13,20 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} polyaffine (@var{f}, @var{mu})
-## Return the coefficients of the polynomial whose coefficients are given by
-## vector @var{f} after an affine tranformation.  If @var{f} is the vector
-## representing the polynomial f(x), then @code{@var{g} = polyaffine (@var{f},
-## @var{mu})} is the vector representing 
+## Return the coefficients of the polynomial vector @var{f} after an affine
+## tranformation.  If @var{f} is the vector representing the polynomial f(x),
+## then @code{@var{g} = polyaffine (@var{f}, @var{mu})} is the vector
+## representing:
 ##
 ## @example
 ## g(x) = f((x-@var{mu}(1))/@var{mu}(2)).
 ## @end example
 ## 
 ## @seealso{polyval}
 ## @end deftypefn
 
@@ -64,27 +64,28 @@ function g = polyaffine (f, mu)
      w = (-mu(1)) .^ (0:lf-1);
      ii = lf:-1:1;
      g = g(ii) * (toeplitz (w) .* pascal (lf, -1));
      g = g(ii);
    endif
 
 endfunction
 
+
 %!test
 %! f = [1/5 4/5 -7/5 -2];
 %!
 %! mu = [1, 1.2];
 %!
 %! g = polyaffine (f, mu);
 %!
 %! x = linspace (-4, 4, 100);
 %!
 %! assert (polyval(f, x, [], mu), polyval (g, x), 1e-10);
-%!
+
 %!demo
 %! f = [1/5 4/5 -7/5 -2];
 %!
 %! g = polyaffine (f, [1, 1.2]);
 %!
 %! x = linspace (-4, 4, 100);
 %!
 %! plot(x, polyval (f, x), x, polyval (g, x));
