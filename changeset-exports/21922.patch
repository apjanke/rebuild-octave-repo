# HG changeset patch
# User Rik <rik@octave.org>
# Date 1466090610 25200
#      Thu Jun 16 08:23:30 2016 -0700
# Node ID c34f9c182dcf91da860e7b051c53a0132dc22058
# Parent  ecfcc852766134bb423b416c00084aee65fa51ee
Make debug_on_error to apply to the "catch" block of try/catch (bug #47685)

* pt-eval.cc (tree_evaluator::visit_try_catch_command):
  Unwind  Vdebug_on_error etc. before executing catch_code.

diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -825,79 +825,77 @@ tree_evaluator::visit_switch_command (tr
             }
         }
     }
 }
 
 void
 tree_evaluator::visit_try_catch_command (tree_try_catch_command& cmd)
 {
-  octave::unwind_protect frame;
-
-  frame.protect_var (buffer_error_messages);
-  frame.protect_var (Vdebug_on_error);
-  frame.protect_var (Vdebug_on_warning);
-
-  buffer_error_messages++;
-  Vdebug_on_error = false;
-  Vdebug_on_warning = false;
-
-  tree_statement_list *catch_code = cmd.cleanup ();
-
-  // The catch code is *not* added to unwind_protect stack; it doesn't need
-  // to be run on interrupts.
-
-  tree_statement_list *try_code = cmd.body ();
-
   bool execution_error = false;
 
-  if (try_code)
-    {
-      try
-        {
-          in_try_catch++;
-          try_code->accept (*this);
-          in_try_catch--;
-        }
-      catch (const octave_execution_exception&)
-        {
-          recover_from_exception ();
+  { // unwind frame before catch block
+    octave::unwind_protect frame;
+
+    frame.protect_var (buffer_error_messages);
+    frame.protect_var (Vdebug_on_error);
+    frame.protect_var (Vdebug_on_warning);
+
+    buffer_error_messages++;
+    Vdebug_on_error = false;
+    Vdebug_on_warning = false;
+
+    // The catch code is *not* added to unwind_protect stack;
+    // it doesn't need to be run on interrupts.
+
+    tree_statement_list *try_code = cmd.body ();
 
-          in_try_catch--;          // must be restored before "catch" block
-          execution_error = true;
-        }
-    }
+    if (try_code)
+      {
+        try
+          {
+            in_try_catch++;
+            try_code->accept (*this);
+            in_try_catch--;
+          }
+        catch (const octave_execution_exception&)
+          {
+            recover_from_exception ();
+
+            in_try_catch--;          // must be restored before "catch" block
+            execution_error = true;
+          }
+      }
+  // Unwind to let the user print any messages from
+  // errors that occurred in the body of the try_catch statement,
+  // or throw further errors.
+  }
 
   if (execution_error)
     {
+      tree_statement_list *catch_code = cmd.cleanup ();
       if (catch_code)
         {
-          // Set up for letting the user print any messages from errors that
-          // occurred in the body of the try_catch statement.
-
-          buffer_error_messages--;
-
           tree_identifier *expr_id = cmd.identifier ();
           octave_lvalue ult;
 
           if (expr_id)
             {
               ult = expr_id->lvalue ();
 
               octave_scalar_map err;
 
               err.assign ("message", last_error_message ());
               err.assign ("identifier", last_error_id ());
               err.assign ("stack", last_error_stack ());
 
               ult.assign (octave_value::op_asn_eq, err);
-
             }
 
-              // perform actual "catch" block
+          // perform actual "catch" block
           if (catch_code)
             catch_code->accept (*this);
         }
     }
 }
 
 void
 tree_evaluator::do_unwind_protect_cleanup_code (tree_statement_list *list)
