# HG changeset patch
# User Vytautas Jančauskas <unaudio@gmail.com>
# Date 1379337989 -10800
#      Mon Sep 16 16:26:29 2013 +0300
# Node ID 9d1917a61759b34c9d503c0243d50c2868170153
# Parent  13082628e7e8e1af94bb6d6d8f25590f5bc231e7
allow __player_audioplayer__ to build even when PortAudio is not present

* __player_audioplayer__.cc: added conditional compilation constructs to
prevent parts requiring PortAudio from being built if it is not present

diff --git a/libinterp/dldfcn/__player_audioplayer__.cc b/libinterp/dldfcn/__player_audioplayer__.cc
--- a/libinterp/dldfcn/__player_audioplayer__.cc
+++ b/libinterp/dldfcn/__player_audioplayer__.cc
@@ -1,18 +1,21 @@
 #include "oct.h"
 #include "ov-struct.h"
 
+#ifdef HAVE_PORTAUDIO
 #include "player_class.cc"
 #include "recorder_class.cc"
+#endif
    
 DEFUN_DLD(__player_audioplayer__, args, ,
 "__player_audioplayer__"
 )
 {
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   audioplayer* retval = new audioplayer ();
   bool is_function = args(0).is_string () || args(0).is_function_handle () || args(0).is_inline_function ();
   if (is_function)
     {
       retval->set_y (args (0).function_value ());
     }
   else
@@ -34,190 +37,236 @@ DEFUN_DLD(__player_audioplayer__, args, 
     {
       retval->init_fn ();
     }
   else
     {
       retval->init (); 
     }
   return octave_value(retval);
+#else
+  octave_value retval;
+  error("portaudio not found on your system and thus audio functionality is not present");
+  return retval;
+#endif
 }
    
 DEFUN_DLD(__player_get_channels__, args, ,
 "__player_get_channels__"
 )
 {
   octave_value retval;
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       audioplayer* player = 0;
       const octave_base_value& rep = args (0).get_rep ();
       player = &((audioplayer &)rep);
       retval = octave_value(player->get_channels());
     }
+#else
+  error("portaudio not found on your system and thus audio functionality is not present");
+#endif
   return retval;
 }
    
 DEFUN_DLD(__player_get_fs__, args, ,
 "__player_get_fs__"
 )
 {
   octave_value retval;
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       audioplayer* player = 0;
       const octave_base_value& rep = args (0).get_rep ();
       player = &((audioplayer &)rep);
       retval = octave_value(player->get_fs());
     }
+#else
+  error("portaudio not found on your system and thus audio functionality is not present");
+#endif
   return retval;
 }
 
 DEFUN_DLD(__player_get_id__, args, ,
 "__player_get_id__"
 )
 {
   octave_value retval;
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       audioplayer* player = 0;
       const octave_base_value& rep = args (0).get_rep ();
       player = &((audioplayer &)rep);
       retval = octave_value(player->get_id());
     }
+#else
+  error("portaudio not found on your system and thus audio functionality is not present");
+#endif
   return retval;
 }
 
 DEFUN_DLD(__player_get_nbits__, args, ,
 "__player_get_nbits__"
 )
 {
   octave_value retval;
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       audioplayer* player = 0;
       const octave_base_value& rep = args (0).get_rep ();
       player = &((audioplayer &)rep);
       retval = octave_value(player->get_nbits());
     }
+#else
+  error("portaudio not found on your system and thus audio functionality is not present");
+#endif
   return retval;
 }
  
 DEFUN_DLD(__player_get_sample_number__, args, ,
 "__player_get_sample_number__"
 )
 {
   octave_value retval;
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       audioplayer* player = 0;
       const octave_base_value& rep = args (0).get_rep ();
       player = &((audioplayer &)rep);
       retval = octave_value(player->get_sample_number());
     }
+#else
+  error("portaudio not found on your system and thus audio functionality is not present");
+#endif
   return retval;
 }
 
 DEFUN_DLD(__player_get_tag__, args, ,
 "__player_get_tag__"
 )
 {
   octave_value retval;
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       audioplayer* player = 0;
       const octave_base_value& rep = args (0).get_rep ();
       player = &((audioplayer &)rep);
       retval = octave_value (player->get_tag ());
     }
+#else
+  error("portaudio not found on your system and thus audio functionality is not present");
+#endif
   return retval;
 }
 
 DEFUN_DLD(__player_get_total_samples__, args, ,
 "__player_get_total_samples__"
 )
 {
   octave_value retval;
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       audioplayer* player = 0;
       const octave_base_value& rep = args (0).get_rep ();
       player = &((audioplayer &)rep);
       retval = octave_value(player->get_total_samples());
     }
+#else
+  error("portaudio not found on your system and thus audio functionality is not present");
+#endif
   return retval;
 }
 
 DEFUN_DLD(__player_get_userdata__, args, ,
 "__player_get_userdata__"
 )
 {
   octave_value retval;
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       audioplayer* player = 0;
       const octave_base_value& rep = args (0).get_rep ();
       player = &((audioplayer &)rep);
       retval = player->get_userdata ();
     }
+#else
+  error("portaudio not found on your system and thus audio functionality is not present");
+#endif
   return retval;
 }
 
 DEFUN_DLD(__player_isplaying__, args, ,
 "__player_isplaying__"
 )
 {
   octave_value retval;
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       audioplayer* player = 0;
       const octave_base_value& rep = args (0).get_rep ();
       player = &((audioplayer &)rep);
       if (player->isplaying())
         {
           return octave_value(1);
         }
       else
         {
           return octave_value(0);
         }
     }
+#else
+  error("portaudio not found on your system and thus audio functionality is not present");
+#endif
   return retval;
 }
 
 DEFUN_DLD(__player_pause__, args, ,
 "__player_pause__"
 )
 {
   octave_value retval;
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       audioplayer* player = 0;
       const octave_base_value& rep = args (0).get_rep ();
       player = &((audioplayer &)rep);
       player->pause();
     }
+#else
+  error("portaudio not found on your system and thus audio functionality is not present");
+#endif
   return retval;
 }
 
 DEFUN_DLD(__player_playblocking__, args, ,
 "__player_playblocking__"
 )
 {
   octave_value retval;
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       audioplayer* player = 0;
       const octave_base_value& rep = args (0).get_rep ();
       player = &((audioplayer &)rep);
       player->playblocking();
     }
@@ -247,24 +296,28 @@ DEFUN_DLD(__player_playblocking__, args,
           if (start < 0 or start > player->get_total_samples())
             {
               error("audioplayer: invalid range specified for playback");
             }
           player->set_sample_number(start);
         }
       player->playblocking();
     }
+#else
+  error("portaudio not found on your system and thus audio functionality is not present");
+#endif
   return retval;
 }
 
 DEFUN_DLD(__player_play__, args, ,
 "__player_play__"
 )
 {
   octave_value retval;
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       audioplayer* player = 0;
       const octave_base_value& rep = args (0).get_rep ();
       player = &((audioplayer &)rep);
       player->play();
     }
@@ -294,90 +347,113 @@ DEFUN_DLD(__player_play__, args, ,
           if (start < 0 or start > player->get_total_samples())
             {
               error("audioplayer: invalid range specified for playback");
             }
           player->set_sample_number(start);
         }
       player->play();
     }
+#else
+  error("portaudio not found on your system and thus audio functionality is not present");
+#endif
   return retval;
 }
 
 DEFUN_DLD(__player_resume__, args, ,
 "__player_resume__"
 )
 {
   octave_value retval;
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       audioplayer* player = 0;
       const octave_base_value& rep = args (0).get_rep ();
       player = &((audioplayer &)rep);
       player->resume();
     }
+#else
+  error("portaudio not found on your system and thus audio functionality is not present");
+#endif
   return retval;
 }
 
 DEFUN_DLD(__player_set_fs__, args, ,
 "__player_set_fs__"
 )
 {
   octave_value retval;
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 2)
     {
       audioplayer* player = 0;
       const octave_base_value& rep = args (0).get_rep ();
       player = &((audioplayer &)rep);
       player->set_fs (args(1).int_value ());
     }
+#else
+  error("portaudio not found on your system and thus audio functionality is not present");
+#endif
   return retval;
 }
 
 DEFUN_DLD(__player_set_tag__, args, ,
 "__player_set_tag__"
 )
 {
   octave_value retval;
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 2)
     {
       audioplayer* player = 0;
       const octave_base_value& rep = args (0).get_rep ();
       player = &((audioplayer &)rep);
       player->set_tag (args(1).char_matrix_value ());
     }
+#else
+  error("portaudio not found on your system and thus audio functionality is not present");
+#endif
   return retval;
 }
 
 DEFUN_DLD(__player_set_userdata__, args, ,
 "__player_set_userdata__"
 )
 {
   octave_value retval;
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 2)
     {
       audioplayer* player = 0;
       const octave_base_value& rep = args (0).get_rep ();
       player = &((audioplayer &)rep);
       player->set_userdata (args(1));
     }
+#else
+  error("portaudio not found on your system and thus audio functionality is not present");
+#endif
   return retval;
 }
 
 DEFUN_DLD(__player_stop__, args, ,
 "__player_stop__"
 )
 {
   octave_value retval;
+#ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       audioplayer* player = 0;
       const octave_base_value& rep = args (0).get_rep ();
       player = &((audioplayer &)rep);
       player->stop();
     }
+#else
+  error("portaudio not found on your system and thus audio functionality is not present");
+#endif
   return retval;
 }
