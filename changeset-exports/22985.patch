# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1483112195 18000
#      Fri Dec 30 10:36:35 2016 -0500
# Node ID a8e83b0144fed0b4543a6228e771e8e4ad8fb283
# Parent  45dba14ca7af2a703e28e968718c2095049caefa
eliminate obsolete SIZEOF macros

* configure.ac: Don't check size of short, int, long, long long, or
int64_t.
* oct-conf-post.in.h: Don't define SIZEOF_OCTAVE_IDX_TYPE.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -336,19 +336,16 @@ AC_ARG_ENABLE([docs],
 ENABLE_64=no
 OCTAVE_IDX_TYPE=int
 AC_ARG_ENABLE(64,
   [AS_HELP_STRING([--enable-64],
     [(EXPERIMENTAL) use 64-bit integers for array dimensions and indexing])],
   [if test "$enableval" = yes; then ENABLE_64=yes; fi], [])
 if test $ENABLE_64 = yes; then
   AC_CHECK_SIZEOF([void *])
-  AC_CHECK_SIZEOF([int])
-  AC_CHECK_SIZEOF([long])
-  AC_CHECK_SIZEOF([int64_t])
   if test $ac_cv_sizeof_void_p -eq 8; then
     OCTAVE_IDX_TYPE=int64_t
   else
     warn_64_bit="pointers are not 64-bits wide; disabling 64-bit features"
     OCTAVE_CONFIGURE_WARNING([warn_64_bit])
     ENABLE_64=no
   fi
 fi
@@ -2283,24 +2280,17 @@ if test $ac_cv_type_long_long_int = yes;
 fi
 
 AC_CHECK_TYPES([unsigned long long int])
 if test $ac_cv_type_unsigned_long_long_int = yes; then
   AC_DEFINE(OCTAVE_HAVE_UNSIGNED_LONG_LONG_INT, 1,
     [Define to 1 if the system has the type 'unsigned long long int'.])
 fi
 
-## How big are ints and how are they oriented?
-## These could probably be eliminated in favor of run-time checks.
-
-AC_CHECK_SIZEOF([short])
-AC_CHECK_SIZEOF([int])
-AC_CHECK_SIZEOF([long])
-AC_CHECK_SIZEOF([long long])
-## Check for long double type (for 64-bit integers)
+## Check for long double type (may be used for 64-bit integer computations).
 AC_CHECK_SIZEOF([long double])
 
 ### Check structures and existence of necessary members
 
 AC_CHECK_MEMBERS([struct stat.st_blksize, struct stat.st_blocks,
                   struct stat.st_rdev])
 AC_CHECK_MEMBERS([struct group.gr_passwd])
 
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -98,22 +98,16 @@ typedef unsigned long ino_t;
 #  define OCTAVE_HAVE_POSIX_FILESYSTEM 1
 #endif
 
 /* sigsetjmp is a macro, not a function. */
 #if defined (sigsetjmp) && defined (HAVE_SIGLONGJMP)
 #  define OCTAVE_HAVE_SIG_JUMP 1
 #endif
 
-#if defined (OCTAVE_ENABLE_64)
-#  define SIZEOF_OCTAVE_IDX_TYPE SIZEOF_INT64_T
-#else
-#  define SIZEOF_OCTAVE_IDX_TYPE SIZEOF_INT
-#endif
-
 /* To be able to use long doubles for 64-bit mixed arithmetics, we need
    them at least 80 bits wide and we need roundl declared in math.h.
    FIXME: Maybe substitute this by a more precise check in the future?  */
 #if (SIZEOF_LONG_DOUBLE >= 10) && defined (HAVE_ROUNDL)
 #  define OCTAVE_INT_USE_LONG_DOUBLE
 #  if (SIZEOF_LONG_DOUBLE < 16                                          \
        && (defined __i386__ || defined __x86_64__) && defined __GNUC__)
 #    define OCTAVE_ENSURE_LONG_DOUBLE_OPERATIONS_ARE_NOT_TRUNCATED 1
