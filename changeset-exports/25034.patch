# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1522229865 14400
#      Wed Mar 28 05:37:45 2018 -0400
# Branch stable
# Node ID 6e4121c399575353c58924a6ac6a2e0e184b2d30
# Parent  336c167b1883e47f07fd3f588b15c8eb6d567fb5
enable debugging flag and code echo for command-line functions

* input.cc (get_debug_input): Signal debug mode for octave_link and
echo code when code comes from command line.

diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -618,26 +618,22 @@ get_debug_input (octave::interpreter& in
   octave::tree_evaluator::quiet_breakpoint_flag = false;
 
   octave::call_stack& cs = interp.get_call_stack ();
 
   octave_user_code *caller = cs.caller_user_code ();
   std::string nm;
   int curr_debug_line;
 
-  bool have_file = false;
-
   if (caller)
     {
       nm = caller->fcn_file_name ();
 
       if (nm.empty ())
         nm = caller->name ();
-      else
-        have_file = true;
 
       curr_debug_line = cs.caller_user_code_line ();
     }
   else
     curr_debug_line = cs.current_line ();
 
   std::ostringstream buf;
 
@@ -658,35 +654,32 @@ get_debug_input (octave::interpreter& in
           if (! silent)
             {
               buf << "stopped in " << nm;
 
               if (curr_debug_line > 0)
                 buf << " at line " << curr_debug_line;
             }
 
-          if (have_file)
-            {
-              octave_link::enter_debugger_event (nm, curr_debug_line);
+          octave_link::enter_debugger_event (nm, curr_debug_line);
 
-              octave_link::set_workspace ();
+          octave_link::set_workspace ();
 
-              frame.add_fcn (execute_in_debugger_handler,
-                             std::pair<std::string, int> (nm, curr_debug_line));
+          frame.add_fcn (execute_in_debugger_handler,
+                         std::pair<std::string, int> (nm, curr_debug_line));
 
-              if (! silent)
-                {
-                  std::string line_buf;
+          if (! silent)
+            {
+              std::string line_buf;
 
-                  if (caller)
-                    line_buf = caller->get_code_line (curr_debug_line);
+              if (caller)
+                line_buf = caller->get_code_line (curr_debug_line);
 
-                  if (! line_buf.empty ())
-                    buf << "\n" << curr_debug_line << ": " << line_buf;
-                }
+              if (! line_buf.empty ())
+                buf << "\n" << curr_debug_line << ": " << line_buf;
             }
         }
     }
 
   if (silent)
     octave::command_editor::erase_empty_line (true);
 
   std::string msg = buf.str ();
