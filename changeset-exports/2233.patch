# HG changeset patch
# User jwe
# Date 832354290 0
#      Fri May 17 17:31:30 1996 +0000
# Node ID 0da2c91573d9245ffd23229e3b6729da1ef66e7b
# Parent  834eab508368b727bb61ea326faecddbc5036428
[project @ 1996-05-17 17:27:17 by jwe]

diff --git a/src/fn-cache.cc b/src/fn-cache.cc
--- a/src/fn-cache.cc
+++ b/src/fn-cache.cc
@@ -35,27 +35,25 @@ Software Foundation, 59 Temple Place - S
 #include "error.h"
 #include "fn-cache.h"
 #include "pathsearch.h"
 
 octave_fcn_file_name_cache *octave_fcn_file_name_cache::instance = 0;
 
 // Update the cache.  Returns TRUE if something needed to be updated.
 
-// XXX FIXME XXX -- I suppose we could also keep track of the load
-// path.  Then if a directory is deleted from the load path, we could
-// also delete it from the cache.  Currently, we just accumulate all
-// directories ever referenced in the cache.
+// We just accumulate all directories ever referenced in the cache and
+// we don't delete any old ones.
 
 bool
-octave_fcn_file_name_cache::update (void)
+octave_fcn_file_name_cache::update (const string& path)
 {
   bool retval = false;
 
-  dir_path p (Vload_path);
+  dir_path p = path.empty () ? dir_path (Vload_path) : dir_path (path);
 
   string_vector dirs = p.all_directories ();
 
   int len = dirs.length ();
 
   for (int i = 0; i < len; i++)
     {
       string d = dirs[i];
@@ -74,21 +72,21 @@ octave_fcn_file_name_cache::update (void
 
   return retval;
 }
 
 // Check to see if any of the elements in the cache need to be
 // updated, then return the list of names in the cache.
 
 string_vector
-octave_fcn_file_name_cache::do_list (bool no_suffix)
+octave_fcn_file_name_cache::do_list (const string& path, bool no_suffix)
 {
   // Only recompute the cache if something has changed.
 
-  if (update ())
+  if (update (path))
     {
       int total_len = 0;
 
       dir_path p (Vload_path);
 
       string_vector dirs = p.all_directories ();
 
       int ndirs = dirs.length ();
@@ -125,25 +123,25 @@ octave_fcn_file_name_cache::do_list (boo
 	    }
 	}
     }
 
   return no_suffix ? fcn_file_names_no_suffix : fcn_file_names;
 }
 
 string_vector
-octave_fcn_file_name_cache::list (bool no_suffix = false)
+octave_fcn_file_name_cache::list (const string& path, bool no_suffix)
 {
   string_vector retval;
 
   if (! instance)
     instance = new octave_fcn_file_name_cache ();
 
   if (instance)
-    retval = instance->do_list (no_suffix);
+    retval = instance->do_list (path, no_suffix);
   else
     panic_impossible ();
 
   return retval;
 }
 
 // Create a list of the function names in a given directory.  Returns
 // TRUE if the cache element was out of date.
diff --git a/src/fn-cache.h b/src/fn-cache.h
--- a/src/fn-cache.h
+++ b/src/fn-cache.h
@@ -84,38 +84,45 @@ protected:
   octave_fcn_file_name_cache (void)
     : cache (file_name_cache_elt ())
       { update (); }
 
 public:
 
   ~octave_fcn_file_name_cache (void) { }
 
-  bool update (void);
+  bool update (const string& path = string ());
+
+  static string_vector list (bool no_suffix = false)
+    { return list (string (), no_suffix); }
 
-  static string_vector list (bool no_suffix = false);
+  static string_vector list (const string& path, bool no_suffix = false);
 
-  static string_vector list_no_suffix (void) { return list (true); }
+  static string_vector list_no_suffix (void)
+    { return list (true); }
+
+  static string_vector list_no_suffix (const string& path)
+    { return list (path, true); }
 
 private:
 
   static octave_fcn_file_name_cache *instance;
 
   // An associative array of all the directory names in the load path
   // and the corresponding cache elements.
   CHMap<file_name_cache_elt> cache;
 
   // The list of function file names in the cache.
   string_vector fcn_file_names;
 
   // The list of function file names in the cache without the .m or
   // .oct suffixes.
   string_vector fcn_file_names_no_suffix;
 
-  string_vector do_list (bool no_suffix);
+  string_vector do_list (const string& path, bool no_suffix);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -39,16 +39,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "str-vec.h"
 
 #include "defaults.h"
 #include "defun.h"
 #include "dirfns.h"
 #include "error.h"
+#include "fn-cache.h"
 #include "gripes.h"
 #include "help.h"
 #include "input.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "pathsearch.h"
 #include "pt-const.h"
 #include "pt-exp.h"
@@ -495,17 +496,17 @@ simple_help (void)
   dir_path p (Vload_path);
 
   string_vector dirs = p.all_directories ();
 
   int len = dirs.length ();
 
   for (int i = 0; i < len; i++)
     {
-      string_vector names = get_fcn_file_names (dirs[i]);
+      string_vector names = octave_fcn_file_name_cache::list (dirs[i]);
 
       if (! names.empty ())
 	{
 	  octave_stdout << "\n*** function files in "
 			<< make_absolute (dirs[i], Vcurrent_directory)
 			<< ":\n\n";
 
 	  names.list_in_columns (octave_stdout);
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -50,16 +50,17 @@ LOSE! LOSE!
 #endif
 
 #ifndef HAVE_STRNCASECMP
 extern "C" int strncasecmp (const char*, const char*, size_t);
 #endif
 
 #include "SLStack.h"
 
+#include "file-ops.h"
 #include "oct-cmplx.h"
 #include "str-vec.h"
 
 #include "defaults.h"
 #include "defun.h"
 #include "dir-ops.h"
 #include "dirfns.h"
 #include "error.h"
@@ -202,133 +203,16 @@ keyword_almost_match (const char **std, 
  done:
 
   delete [] kw;
   delete [] to_match;
 
   return status;
 }
 
-string_vector
-get_fcn_file_names (const string& name, int no_suffix)
-{
-  string_vector retval;
-
-  dir_entry dir (name);
-
-  if (dir)
-    {
-      string_vector tmp = dir.read ();
-
-      int max_len = tmp.length ();
-
-      retval.resize (max_len);
-
-      int k = 0;
-      int i;
-      for (i = 0; i < max_len; i++)
-	{
-	  string entry = tmp[i];
-
-	  int len = entry.length ();
-
-#if defined (WITH_DYNAMIC_LINKING)
-	  if ((len > 2
-	       && entry[len-2] == '.' && entry[len-1] == 'm')
-	      || (len > 4
-		  && entry[len-4] == '.' && entry[len-3] == 'o'
-		  && entry[len-2] == 'c' && entry[len-1] == 't'))
-#else
-	  if (len > 2
-	      && entry[len-2] == '.' && entry[len-1] == 'm')
-#endif
-	    {
-	      if (no_suffix)
-		{
-		  if (entry[len-1] == 'm')
-		    entry.resize (len-2);
-		  else
-		    entry.resize (len-4);
-		}
-
-	      retval[k++] = entry;
-	    }
-	}
-
-      retval.resize (k);
-    }
-
-  return retval;
-}
-
-string_vector
-get_fcn_file_names (int no_suffix)
-{
-  static int num_max = 1024;
-
-  string_vector retval (num_max);
-
-  dir_path p (Vload_path);
-
-  string_vector dirs = p.all_directories ();
-
-  int len = dirs.length ();
-
-  int k = 0;
-
-  for (int i = 0; i < len; i++)
-    {
-      string_vector names = get_fcn_file_names (dirs[i], no_suffix);
-
-      int tmp_num = names.length ();
-
-      if (k + tmp_num > num_max)
-	{
-	  num_max += tmp_num;
-	  retval.resize (num_max);
-	}
-
-      for (int j = 0; j < tmp_num; j++)
-	retval[k++] = names[j];
-    }
-
-  retval.resize (k);
-
-  return retval;
-}
-
-// Return non-zero if either NR or NC is zero.  Return -1 if this
-// should be considered fatal; return 1 if this is ok.
-
-int
-empty_arg (const char *name, int nr, int nc)
-{
-  int is_empty = 0;
-
-  if (nr == 0 || nc == 0)
-    {
-      int flag = Vpropagate_empty_matrices;
-
-      if (flag < 0)
-	{
-	  gripe_empty_arg (name, 0);
-	  is_empty = 1;
-	}
-      else if (flag == 0)
-	{
-	  gripe_empty_arg (name, 1);
-	  is_empty = -1;
-	}
-      else
-	is_empty = 1;
-    }
-
-  return is_empty;
-}
-
 // See if the given file is in the path.
 
 string
 search_path_for_file (const string& path, const string& name)
 {
   dir_path p (path);
 
   return make_absolute (p.find (name), Vcurrent_directory);
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -45,20 +45,16 @@ extern "C" void jump_to_top_level (void)
 extern int almost_match (const string& std, const string& s,
 			 int min_match_len = 1, int case_sens = 1);
 
 extern int
 keyword_almost_match (const char **std, int *min_len,
 		      const string& s, int min_toks_to_match,
 		      int max_toks);
 
-extern string_vector get_fcn_file_names (const string&, int = 0);
-
-extern string_vector get_fcn_file_names (int = 0);
-
 extern int empty_arg (const char *name, int nr, int nc);
 
 extern const char *undo_string_escape (char c);
 
 extern string undo_string_escapes (const string& s);
 
 extern void oct_putenv (const char *, const char *);
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -48,16 +48,17 @@ Software Foundation, 59 Temple Place - S
 #include "arith-ops.h"
 #include "defaults.h"
 #include "data.h"
 #include "defun.h"
 #include "dirfns.h"
 #include "dynamic-ld.h"
 #include "error.h"
 #include "file-io.h"
+#include "fn-cache.h"
 #include "gripes.h"
 #include "help.h"
 #include "input.h"
 #include "lex.h"
 #include "load-save.h"
 #include "mappers.h"
 #include "oct-hist.h"
 #include "toplev.h"
@@ -908,17 +909,17 @@ make_name_list (void)
 
   glb = global_sym_tab->list (glb_len);
 
   top = top_level_sym_tab->list (top_len);
 
   if (top_level_sym_tab != curr_sym_tab)
     lcl = curr_sym_tab->list (lcl_len);
 
-  ffl = get_fcn_file_names (1);
+  ffl = octave_fcn_file_name_cache::list_no_suffix ();
   int ffl_len = ffl.length ();
 
   int total_len = key_len + glb_len + top_len + lcl_len + ffl_len;
 
   string_vector list (total_len);
 
   // Put all the symbols in one big list.  Only copy pointers, not the
   // strings they point to, then only delete the original array of
