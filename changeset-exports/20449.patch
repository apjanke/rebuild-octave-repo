# HG changeset patch
# User Rik <rik@octave.org>
# Date 1439829140 25200
#      Mon Aug 17 09:32:20 2015 -0700
# Node ID df4165dfc6769cec39de217ab5c76b9edcf34a01
# Parent  1690807b226c0be62e2e0d3904af2c9de4224c09
maint: Fix misspelled word compatibility in code comments.

* ls-hdf5.cc, ov-bool-mat.cc, ov-cell.cc, ov-cx-mat.cc, ov-flt-cx-mat.cc,
ov-flt-re-mat.cc, ov-re-mat.cc, ov-str-mat.cc:
Fix misspelled word compatibility in code comments.

diff --git a/libinterp/corefcn/ls-hdf5.cc b/libinterp/corefcn/ls-hdf5.cc
--- a/libinterp/corefcn/ls-hdf5.cc
+++ b/libinterp/corefcn/ls-hdf5.cc
@@ -410,17 +410,17 @@ hdf5_read_next_data (octave_hdf5_id grou
           H5Gclose (subgroup_id);
 
           retval = (d->tc.load_hdf5 (group_id, name) ? 1 : -1);
         }
 
     }
   else if (info.type == H5G_DATASET && ident_valid)
     {
-      // For backwards compatiability.
+      // For backwards compatibility.
 #if HAVE_HDF5_18
       data_id = H5Dopen (group_id, name, H5P_DEFAULT);
 #else
       data_id = H5Dopen (group_id, name);
 #endif
 
       if (data_id < 0)
         {
diff --git a/libinterp/octave-value/ov-bool-mat.cc b/libinterp/octave-value/ov-bool-mat.cc
--- a/libinterp/octave-value/ov-bool-mat.cc
+++ b/libinterp/octave-value/ov-bool-mat.cc
@@ -195,17 +195,17 @@ octave_bool_matrix::save_ascii (std::ost
       for (int i = 0; i < d.length (); i++)
         os << " " << d(i);
 
       os << "\n" << tmp;
     }
   else
     {
       // Keep this case, rather than use generic code above for backward
-      // compatiability. Makes load_ascii much more complex!!
+      // compatibility.  Makes load_ascii much more complex!!
       os << "# rows: " << rows () << "\n"
          << "# columns: " << columns () << "\n";
 
       Matrix tmp = matrix_value ();
 
       os << tmp;
     }
 
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -781,17 +781,17 @@ octave_cell::save_ascii (std::ostream& o
 
           if (! b)
             return ! os.fail ();
         }
     }
   else
     {
       // Keep this case, rather than use generic code above for backward
-      // compatiability. Makes load_ascii much more complex!!
+      // compatibility.  Makes load_ascii much more complex!!
       os << "# rows: " << rows () << "\n"
          << "# columns: " << columns () << "\n";
 
       Cell tmp = cell_value ();
 
       for (octave_idx_type j = 0; j < tmp.cols (); j++)
         {
           for (octave_idx_type i = 0; i < tmp.rows (); i++)
diff --git a/libinterp/octave-value/ov-cx-mat.cc b/libinterp/octave-value/ov-cx-mat.cc
--- a/libinterp/octave-value/ov-cx-mat.cc
+++ b/libinterp/octave-value/ov-cx-mat.cc
@@ -339,17 +339,17 @@ octave_complex_matrix::save_ascii (std::
       for (int i = 0; i < d.length (); i++)
         os << " " << d(i);
 
       os << "\n" << tmp;
     }
   else
     {
       // Keep this case, rather than use generic code above for backward
-      // compatiability. Makes load_ascii much more complex!!
+      // compatibility.  Makes load_ascii much more complex!!
       os << "# rows: " << rows () << "\n"
          << "# columns: " << columns () << "\n";
 
       os << complex_matrix_value ();
     }
 
   return true;
 }
diff --git a/libinterp/octave-value/ov-flt-cx-mat.cc b/libinterp/octave-value/ov-flt-cx-mat.cc
--- a/libinterp/octave-value/ov-flt-cx-mat.cc
+++ b/libinterp/octave-value/ov-flt-cx-mat.cc
@@ -313,17 +313,17 @@ octave_float_complex_matrix::save_ascii 
       for (int i = 0; i < d.length (); i++)
         os << " " << d(i);
 
       os << "\n" << tmp;
     }
   else
     {
       // Keep this case, rather than use generic code above for backward
-      // compatiability. Makes load_ascii much more complex!!
+      // compatibility.  Makes load_ascii much more complex!!
       os << "# rows: " << rows () << "\n"
          << "# columns: " << columns () << "\n";
 
       os << complex_matrix_value ();
     }
 
   return true;
 }
diff --git a/libinterp/octave-value/ov-flt-re-mat.cc b/libinterp/octave-value/ov-flt-re-mat.cc
--- a/libinterp/octave-value/ov-flt-re-mat.cc
+++ b/libinterp/octave-value/ov-flt-re-mat.cc
@@ -340,17 +340,17 @@ octave_float_matrix::save_ascii (std::os
       for (int i=0; i < d.length (); i++)
         os << " " << d(i);
 
       os << "\n" << tmp;
     }
   else
     {
       // Keep this case, rather than use generic code above for backward
-      // compatiability. Makes load_ascii much more complex!!
+      // compatibility.  Makes load_ascii much more complex!!
       os << "# rows: " << rows () << "\n"
          << "# columns: " << columns () << "\n";
 
       os << float_matrix_value ();
     }
 
   return true;
 }
diff --git a/libinterp/octave-value/ov-re-mat.cc b/libinterp/octave-value/ov-re-mat.cc
--- a/libinterp/octave-value/ov-re-mat.cc
+++ b/libinterp/octave-value/ov-re-mat.cc
@@ -442,17 +442,17 @@ octave_matrix::save_ascii (std::ostream&
       for (int i=0; i < d.length (); i++)
         os << " " << d(i);
 
       os << "\n" << tmp;
     }
   else
     {
       // Keep this case, rather than use generic code above for backward
-      // compatiability. Makes load_ascii much more complex!!
+      // compatibility.  Makes load_ascii much more complex!!
       os << "# rows: " << rows () << "\n"
          << "# columns: " << columns () << "\n";
 
       os << matrix_value ();
     }
 
   return true;
 }
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -295,17 +295,17 @@ octave_char_matrix_str::save_ascii (std:
         os << " " << d(i);
       os << "\n";
       os.write (tmp.fortran_vec (), d.numel ());
       os << "\n";
     }
   else
     {
       // Keep this case, rather than use generic code above for
-      // backward compatiability. Makes load_ascii much more complex!!
+      // backward compatibility.  Makes load_ascii much more complex!!
       charMatrix chm = char_matrix_value ();
       octave_idx_type elements = chm.rows ();
       os << "# elements: " << elements << "\n";
       for (octave_idx_type i = 0; i < elements; i++)
         {
           unsigned len = chm.cols ();
           os << "# length: " << len << "\n";
           std::string tstr = chm.row_as_string (i);
@@ -437,17 +437,17 @@ octave_char_matrix_str::load_ascii (std:
             }
         }
       else if (kw == "length")
         {
           int len = val;
 
           if (len >= 0)
             {
-              // This is cruft for backward compatiability,
+              // This is cruft for backward compatibility,
               // but relatively harmless.
 
               // Use this instead of a C-style character buffer so
               // that we can properly handle embedded NUL characters.
               charMatrix tmp (1, len);
               char *ptmp = tmp.fortran_vec ();
 
               if (len > 0 && ! is.read (ptmp, len))
@@ -692,17 +692,17 @@ octave_char_matrix_str::load_hdf5 (octav
 
       H5Tclose (type_hid);
       H5Sclose (space_hid);
       H5Dclose (data_hid);
       return true;
     }
   else
     {
-      // This is cruft for backward compatiability and easy data
+      // This is cruft for backward compatibility and easy data
       // importation
       if (rank == 0) //FIXME: Does rank==0 even exist for strings in HDF5?
         {
           // a single string:
           int slen = H5Tget_size (type_hid);
           if (slen < 0)
             {
               H5Tclose (type_hid);
