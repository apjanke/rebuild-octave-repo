# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1534270646 25200
#      Tue Aug 14 11:17:26 2018 -0700
# Node ID 3293cd2651fbd7eaf05b1fec5dbaa0612656696d
# Parent  b102a94cc3b27fd2eb93c3ade548294ff6008857
prefer 'isfolder' over 'exist (..., "dir")' in Octave functions

* javaaddpath.m, javarmpath.m, edit.m, run.m, pkg.m, build.m,
configure_make.m, dirempty.m, install.m, load_packages_and_dependencies.m,
uninstall.m, unload_packages.m, util/print.m, getpref.m, prefdir.m, setpref.m,
profexport.m, dump_demos.m: Use 'isfolder' instead of 'exist (..., "dir")'.

diff --git a/scripts/java/javaaddpath.m b/scripts/java/javaaddpath.m
--- a/scripts/java/javaaddpath.m
+++ b/scripts/java/javaaddpath.m
@@ -36,17 +36,17 @@ function javaaddpath (varargin)
 
   for i = 1:numel (varargin)
     clspath = varargin{i};
     if (! ischar (clspath))
       error ("javaaddpath: CLSPATH must be a string");
     endif
 
     new_path = canonicalize_file_name (tilde_expand (clspath));
-    if (exist (new_path, "dir"))
+    if (isfolder (new_path))
       if (new_path(end) != filesep ())
         new_path = [new_path, filesep()];
       endif
     elseif (! exist (new_path, "file"))
       error ("javaaddpath: CLSPATH does not exist: %s", clspath);
     endif
 
     success = javaMethod ("addClassPath", "org.octave.ClassHelper", new_path);
diff --git a/scripts/java/javarmpath.m b/scripts/java/javarmpath.m
--- a/scripts/java/javarmpath.m
+++ b/scripts/java/javarmpath.m
@@ -37,17 +37,17 @@ function javarmpath (varargin)
 
   for i = 1:numel (varargin)
     clspath = varargin{i};
     if (! ischar (clspath))
       error ("javarmpath: CLSPATH must be a string");
     endif
 
     old_path = canonicalize_file_name (tilde_expand (clspath));
-    if (exist (old_path, "dir"))
+    if (isfolder (old_path))
       if (old_path(end) != filesep ())
         old_path = [old_path, filesep()];
       endif
     endif
 
     success = javaMethod ("removeClassPath", "org.octave.ClassHelper",
                            old_path);
 
diff --git a/scripts/miscellaneous/edit.m b/scripts/miscellaneous/edit.m
--- a/scripts/miscellaneous/edit.m
+++ b/scripts/miscellaneous/edit.m
@@ -215,17 +215,17 @@ function retval = edit (varargin)
       editfilelist = varargin;
     else
       error ("edit: if supplying more than one input all inputs must be strings containing field names to open.");
     endif
   endif
 
   ## Start the editor without a file if no file is given.
   if (nargin == 0)
-    if (exist (FUNCTION.HOME, "dir") == 7)
+    if (isfolder (FUNCTION.HOME))
       curr_dir = pwd ();
       unwind_protect
         cd (FUNCTION.HOME);
         do_edit (FUNCTION.EDITOR, "", FUNCTION.MODE);
       unwind_protect_cleanup
         cd (curr_dir);
       end_unwind_protect
     else
diff --git a/scripts/miscellaneous/run.m b/scripts/miscellaneous/run.m
--- a/scripts/miscellaneous/run.m
+++ b/scripts/miscellaneous/run.m
@@ -54,17 +54,17 @@ function run (script)
     endif
   endif
 
   if (! exist (script, "file"))
     error ("run: file SCRIPT must exist and be a valid Octave scriptfile");
   endif
 
   if (! isempty (d))
-    if (! exist (d, "dir"))
+    if (! isfolder (d))
       error ("run: the path %s doesn't exist", d);
     endif
 
     startdir = pwd ();
     scriptdir = "";
     unwind_protect
       cd (d);
       scriptdir = pwd ();
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -469,28 +469,28 @@ function [local_packages, global_package
       if (isempty (files) && ! nargout)
         printf ("Installation prefix:             %s\n", prefix);
         printf ("Architecture dependent prefix:   %s\n", archprefix);
       elseif (isempty (files) && nargout)
         local_packages = prefix;
         global_packages = archprefix;
       elseif (numel (files) >= 1 && ischar (files{1}))
         prefix = tilde_expand (files{1});
-        if (! exist (prefix, "dir"))
+        if (! isfolder (prefix))
           [status, msg] = mkdir (prefix);
           if (status == 0)
             error ("pkg: cannot create prefix %s: %s", prefix, msg);
           endif
           warning ("pkg: creating the directory %s\n", prefix);
         endif
         local_packages = prefix = canonicalize_file_name (prefix);
         user_prefix = true;
         if (numel (files) >= 2 && ischar (files{2}))
           archprefix = tilde_expand (files{2});
-          if (! exist (archprefix, "dir"))
+          if (! isfolder (archprefix))
             [status, msg] = mkdir (archprefix);
             if (status == 0)
               error ("pkg: cannot create archprefix %s: %s", archprefix, msg);
             endif
             warning ("pkg: creating the directory %s\n", archprefix);
             global_packages = archprefix = canonicalize_file_name (archprefix);
           endif
         endif
diff --git a/scripts/pkg/private/build.m b/scripts/pkg/private/build.m
--- a/scripts/pkg/private/build.m
+++ b/scripts/pkg/private/build.m
@@ -33,17 +33,17 @@
 ## @end deftypefn
 
 function build (builddir, tarballs, verbose)
 
   if (nargin != 3)
     print_usage ();
   endif
 
-  if (! exist (builddir, "dir"))
+  if (! isfolder (builddir))
     warning ("creating build directory %s", builddir);
     [status, msg] = mkdir (builddir);
     if (status != 1)
       error ("could not create installation directory: %s", msg);
     endif
   endif
 
   for i = 1:numel(tarballs)
diff --git a/scripts/pkg/private/configure_make.m b/scripts/pkg/private/configure_make.m
--- a/scripts/pkg/private/configure_make.m
+++ b/scripts/pkg/private/configure_make.m
@@ -20,17 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {} {} configure_make (@var{desc}, @var{packdir}, @var{verbose})
 ## Undocumented internal function.
 ## @end deftypefn
 
 function configure_make (desc, packdir, verbose)
 
   ## Perform ./configure, make, make install in "src".
-  if (exist (fullfile (packdir, "src"), "dir"))
+  if (isfolder (fullfile (packdir, "src")))
     src = fullfile (packdir, "src");
     octave_bindir = __octave_config_info__ ("bindir");
     ver = version ();
     ext = __octave_config_info__ ("EXEEXT");
     mkoctfile_program = fullfile (octave_bindir, ...
                                   sprintf ("mkoctfile-%s%s", ver, ext));
     octave_config_program = fullfile (octave_bindir, ...
                                       sprintf ("octave-config-%s%s", ver, ext));
diff --git a/scripts/pkg/private/dirempty.m b/scripts/pkg/private/dirempty.m
--- a/scripts/pkg/private/dirempty.m
+++ b/scripts/pkg/private/dirempty.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {} {@var{emp} =} dirempty (@var{nm}, @var{ign})
 ## Undocumented internal function.
 ## @end deftypefn
 
 function emp = dirempty (nm, ign)
 
-  if (exist (nm, "dir"))
+  if (isfolder (nm))
     if (nargin < 2)
       ign = {".", ".."};
     else
       ign = [{".", ".."}, ign];
     endif
     l = dir (nm);
     for i = 1:length (l)
       found = false;
diff --git a/scripts/pkg/private/install.m b/scripts/pkg/private/install.m
--- a/scripts/pkg/private/install.m
+++ b/scripts/pkg/private/install.m
@@ -21,17 +21,17 @@
 ## @deftypefn {} {} install (@var{files}, @var{handle_deps}, @var{prefix}, @var{archprefix}, @var{verbose}, @var{local_list}, @var{global_list}, @var{global_install})
 ## Undocumented internal function.
 ## @end deftypefn
 
 function install (files, handle_deps, prefix, archprefix, verbose,
                   local_list, global_list, global_install)
 
   ## Check that the directory in prefix exist.  If it doesn't: create it!
-  if (! exist (prefix, "dir"))
+  if (! isfolder (prefix))
     warning ("creating installation directory %s", prefix);
     [status, msg] = mkdir (prefix);
     if (status != 1)
       error ("could not create installation directory: %s", msg);
     endif
   endif
 
   ## Get the list of installed packages.
@@ -87,21 +87,21 @@ function install (files, handle_deps, pr
         endif
 
         if (length (dirlist) > 3)
           error ("bundles of packages are not allowed");
         endif
       endif
 
       ## The filename pointed to an uncompressed package to begin with.
-      if (exist (tgz, "dir"))
+      if (isfolder (tgz))
         dirlist = {".", "..", tgz};
       endif
 
-      if (exist (tgz, "file") || exist (tgz, "dir"))
+      if (exist (tgz, "file") || isfolder (tgz))
         ## The two first entries of dirlist are "." and "..".
         if (exist (tgz, "file"))
           packdir = fullfile (tmpdir, dirlist{3});
         else
           packdir = fullfile (pwd (), dirlist{3});
         endif
         packdirs{end+1} = packdir;
 
@@ -273,17 +273,17 @@ function install (files, handle_deps, pr
       printf ("error: couldn't append to %s\n", local_list);
     endif
     rethrow (lasterror ());
   end_try_catch
 
   ## All is well, let's clean up.
   for i = 1:length (tmpdirs)
     [status, msg] = rmdir (tmpdirs{i}, "s");
-    if (status != 1 && exist (tmpdirs{i}, "dir"))
+    if (status != 1 && isfolder (tmpdirs{i}))
       warning ("couldn't clean up after my self: %s\n", msg);
     endif
   endfor
 
   ## If there is a NEWS file, mention it.
   ## Check if desc exists too because it's possible to get to this point
   ## without creating it such as giving an invalid filename for the package
   if (exist ("desc", "var")
@@ -344,32 +344,32 @@ function prepare_installation (desc, pac
     catch
       cd (wd);
       rethrow (lasterror ());
     end_try_catch
   endif
 
   ## If the directory "inst" doesn't exist, we create it.
   inst_dir = fullfile (packdir, "inst");
-  if (! exist (inst_dir, "dir"))
+  if (! isfolder (inst_dir))
     [status, msg] = mkdir (inst_dir);
     if (status != 1)
       rmdir (desc.dir, "s");
       error ("the 'inst' directory did not exist and could not be created: %s",
              msg);
     endif
   endif
 
 endfunction
 
 
 function copy_built_files (desc, packdir, verbose)
 
   src = fullfile (packdir, "src");
-  if (! exist (src, "dir"))
+  if (! isfolder (src))
     return
   endif
 
   ## Copy files to "inst" and "inst/arch" (this is instead of 'make install').
   files = fullfile (src, "FILES");
   instdir = fullfile (packdir, "inst");
   archdir = fullfile (packdir, "inst", getarch ());
 
@@ -410,17 +410,17 @@ function copy_built_files (desc, packdir
   else
     idx = cellfun ("is_architecture_dependent", filenames);
   endif
   archdependent = filenames(idx);
   archindependent = filenames(! idx);
 
   ## Copy the files.
   if (! all (isspace ([filenames{:}])))
-      if (! exist (instdir, "dir"))
+      if (! isfolder (instdir))
         mkdir (instdir);
       endif
       if (! all (isspace ([archindependent{:}])))
         if (verbose)
           printf ("copyfile");
           printf (" %s", archindependent{:});
           printf ("%s\n", instdir);
         endif
@@ -431,17 +431,17 @@ function copy_built_files (desc, packdir
         endif
       endif
       if (! all (isspace ([archdependent{:}])))
         if (verbose)
           printf ("copyfile");
           printf (" %s", archdependent{:});
           printf (" %s\n", archdir);
         endif
-        if (! exist (archdir, "dir"))
+        if (! isfolder (archdir))
           mkdir (archdir);
         endif
         [status, output] = copyfile (archdependent, archdir);
         if (status != 1)
           rmdir (desc.dir, "s");
           error ("Couldn't copy files from 'src' to 'inst': %s", output);
         endif
       endif
@@ -473,17 +473,17 @@ function dep = is_architecture_dependent
   endfor
 
 endfunction
 
 
 function copy_files (desc, packdir, global_install)
 
   ## Create the installation directory.
-  if (! exist (desc.dir, "dir"))
+  if (! isfolder (desc.dir))
     [status, output] = mkdir (desc.dir);
     if (status != 1)
       error ("couldn't create installation directory %s : %s",
       desc.dir, output);
     endif
   endif
 
   octfiledir = getarchdir (desc);
@@ -491,27 +491,27 @@ function copy_files (desc, packdir, glob
   ## Copy the files from "inst" to installdir.
   instdir = fullfile (packdir, "inst");
   if (! dirempty (instdir))
     [status, output] = copyfile (fullfile (instdir, "*"), desc.dir);
     if (status != 1)
       rmdir (desc.dir, "s");
       error ("couldn't copy files to the installation directory");
     endif
-    if (exist (fullfile (desc.dir, getarch ()), "dir")
+    if (isfolder (fullfile (desc.dir, getarch ()))
         && ! strcmp (canonicalize_file_name (fullfile (desc.dir, getarch ())),
                      canonicalize_file_name (octfiledir)))
-      if (! exist (octfiledir, "dir"))
+      if (! isfolder (octfiledir))
         ## Can be required to create up to three levels of dirs.
         octm1 = fileparts (octfiledir);
-        if (! exist (octm1, "dir"))
+        if (! isfolder (octm1))
           octm2 = fileparts (octm1);
-          if (! exist (octm2, "dir"))
+          if (! isfolder (octm2))
             octm3 = fileparts (octm2);
-            if (! exist (octm3, "dir"))
+            if (! isfolder (octm3))
               [status, output] = mkdir (octm3);
               if (status != 1)
                 rmdir (desc.dir, "s");
                 error ("couldn't create installation directory %s : %s",
                        octm3, output);
               endif
             endif
             [status, output] = mkdir (octm2);
@@ -579,24 +579,24 @@ function copy_files (desc, packdir, glob
     end_try_catch
   endif
 
   ## Is there an 'on_uninstall.m' to install?
   packinfo_copy_file ("on_uninstall.m", "optional", packdir, packinfo, desc, octfiledir);
 
   ## Is there a doc/ directory that needs to be installed?
   docdir = fullfile (packdir, "doc");
-  if (exist (docdir, "dir") && ! dirempty (docdir))
+  if (isfolder (docdir) && ! dirempty (docdir))
     [status, output] = copyfile (docdir, desc.dir);
   endif
 
   ## Is there a bin/ directory that needs to be installed?
   ## FIXME: Need to treat architecture dependent files in bin/
   bindir = fullfile (packdir, "bin");
-  if (exist (bindir, "dir") && ! dirempty (bindir))
+  if (isfolder (bindir) && ! dirempty (bindir))
     [status, output] = copyfile (bindir, desc.dir);
   endif
 
 endfunction
 
 
 function packinfo_copy_file (filename, requirement, packdir, packinfo, desc, octfiledir)
 
@@ -627,29 +627,29 @@ function write_index (desc, dir, index_f
     error ("couldn't read directory %s: %s", dir, msg);
   endif
 
   ## Get classes in dir
   class_idx = find (strncmp (files, '@', 1));
   for k = 1:length (class_idx)
     class_name = files {class_idx(k)};
     class_dir = fullfile (dir, class_name);
-    if (exist (class_dir, "dir"))
+    if (isfolder (class_dir))
       [files2, err, msg] = readdir (class_dir);
       if (err)
         error ("couldn't read directory %s: %s", class_dir, msg);
       endif
       files2 = strcat (class_name, filesep (), files2);
       files = [files; files2];
     endif
   endfor
 
   ## Check for architecture dependent files.
   tmpdir = getarchdir (desc);
-  if (exist (tmpdir, "dir"))
+  if (isfolder (tmpdir))
     [files2, err, msg] = readdir (tmpdir);
     if (err)
       error ("couldn't read directory %s: %s", tmpdir, msg);
     endif
     files = [files; files2];
   endif
 
   functions = {};
@@ -690,17 +690,17 @@ function create_pkgadddel (desc, packdir
   instpkg = fullfile (desc.dir, nm);
   instfid = fopen (instpkg, "at"); # append to support PKG_ADD at inst/
   ## If it is exists, most of the PKG_* file should go into the
   ## architecture dependent directory so that the autoload/mfilename
   ## commands work as expected.  The only part that doesn't is the
   ## part in the main directory.
   archdir = fullfile (getarchprefix (desc, global_install),
                       [desc.name "-" desc.version], getarch ());
-  if (exist (getarchdir (desc, global_install), "dir"))
+  if (isfolder (getarchdir (desc, global_install)))
     archpkg = fullfile (getarchdir (desc, global_install), nm);
     archfid = fopen (archpkg, "at");
   else
     archpkg = instpkg;
     archfid = instfid;
   endif
 
   if (archfid >= 0 && instfid >= 0)
diff --git a/scripts/pkg/private/load_packages_and_dependencies.m b/scripts/pkg/private/load_packages_and_dependencies.m
--- a/scripts/pkg/private/load_packages_and_dependencies.m
+++ b/scripts/pkg/private/load_packages_and_dependencies.m
@@ -26,23 +26,23 @@ function load_packages_and_dependencies 
                                          global_install)
 
   idx = load_package_dirs (idx, [], handle_deps, installed_pkgs_lst);
   dirs = {};
   execpath = EXEC_PATH ();
   for i = idx;
     ndir = installed_pkgs_lst{i}.dir;
     dirs{end+1} = ndir;
-    if (exist (fullfile (dirs{end}, "bin"), "dir"))
+    if (isfolder (fullfile (dirs{end}, "bin")))
       execpath = [execpath pathsep() fullfile(dirs{end}, "bin")];
     endif
     tmpdir = getarchdir (installed_pkgs_lst{i});
-    if (exist (tmpdir, "dir"))
+    if (isfolder (tmpdir))
       dirs{end + 1} = tmpdir;
-      if (exist (fullfile (dirs{end}, "bin"), "dir"))
+      if (isfolder (fullfile (dirs{end}, "bin")))
         execpath = [execpath pathsep() fullfile(dirs{end}, "bin")];
       endif
     endif
   endfor
 
   ## Load the packages.
   if (length (dirs) > 0)
     addpath (dirs{:});
diff --git a/scripts/pkg/private/uninstall.m b/scripts/pkg/private/uninstall.m
--- a/scripts/pkg/private/uninstall.m
+++ b/scripts/pkg/private/uninstall.m
@@ -105,27 +105,27 @@ function uninstall (pkgnames, handle_dep
         wd = pwd ();
         cd (fullfile (desc.dir, "packinfo"));
         on_uninstall (desc);
         cd (wd);
       endif
       ## Do the actual deletion.
       if (desc.loaded)
         rmpath (desc.dir);
-        if (exist (getarchdir (desc)))
+        if (isfolder (getarchdir (desc)))
           rmpath (getarchdir (desc));
         endif
       endif
-      if (exist (desc.dir, "dir"))
+      if (isfolder (desc.dir))
         [status, msg] = rmdir (desc.dir, "s");
-        if (status != 1 && exist (desc.dir, "dir"))
+        if (status != 1 && isfolder (desc.dir))
           error ("couldn't delete directory %s: %s", desc.dir, msg);
         endif
         [status, msg] = rmdir (getarchdir (desc), "s");
-        if (status != 1 && exist (getarchdir (desc), "dir"))
+        if (status != 1 && isfolder (getarchdir (desc)))
           error ("couldn't delete directory %s: %s", getarchdir (desc), msg);
         endif
         if (dirempty (desc.archprefix))
           rmdir (desc.archprefix, "s");
         endif
       else
         warning ("directory %s previously lost", desc.dir);
       endif
diff --git a/scripts/pkg/private/unload_packages.m b/scripts/pkg/private/unload_packages.m
--- a/scripts/pkg/private/unload_packages.m
+++ b/scripts/pkg/private/unload_packages.m
@@ -49,17 +49,17 @@ function unload_packages (files, handle_
     dirs{end+1} = pdirs{idx};
     desc{end+1} = installed_pkgs_lst{idx};
   endfor
 
   ## Check for architecture dependent directories.
   archdirs = {};
   for i = 1:length (dirs)
     tmpdir = getarchdir (desc{i});
-    if (exist (tmpdir, "dir"))
+    if (isfolder (tmpdir))
       archdirs{end+1} = dirs{i};
       archdirs{end+1} = tmpdir;
     else
       archdirs{end+1} = dirs{i};
     endif
   endfor
 
   ## Unload the packages.
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -321,17 +321,17 @@
 ## @seealso{saveas, hgsave, orient, figure}
 ## @end deftypefn
 
 function print (varargin)
 
   opts = __print_parse_opts__ (varargin{:});
 
   folder = fileparts (opts.name);
-  if (! isempty (folder) && ! exist (folder, "dir"))
+  if (! isempty (folder) && ! isfolder (folder))
     error ("print: directory %s does not exist", folder);
   endif
 
   ## Check the requested file is writable
   do_unlink = (exist (opts.name, "file") != 2);
   fid = fopen (opts.name, "a");
   if (fid == -1)
     error ("print: cannot open file %s for writing", opts.name);
diff --git a/scripts/prefs/getpref.m b/scripts/prefs/getpref.m
--- a/scripts/prefs/getpref.m
+++ b/scripts/prefs/getpref.m
@@ -140,17 +140,17 @@ endfunction
 %!   assert (getpref ("group2", "prefC"), "StringC");
 %!   fail ('getpref ("group1", {"p1", "p2"}, 1)', ...
 %!         "size mismatch for PREF and DEFAULT");
 %!   fail ('getpref ("group2", {"prefA", "prefD"})',
 %!         "preference prefD does not exist in GROUP group2");
 %!
 %! unwind_protect_cleanup
 %!   unlink (fullfile (tmp_home, ".octave_prefs"));
-%!   if (exist (tmp_home, "dir"))
+%!   if (isfolder (tmp_home))
 %!     rmdir (tmp_home);
 %!   endif
 %!   if (isempty (HOME))
 %!     unsetenv ("HOME");
 %!   else
 %!     setenv ("HOME", HOME);
 %!   endif
 %! end_unwind_protect
diff --git a/scripts/prefs/prefdir.m b/scripts/prefs/prefdir.m
--- a/scripts/prefs/prefdir.m
+++ b/scripts/prefs/prefdir.m
@@ -43,14 +43,14 @@
 
 ## Author: John Donoghue
 
 function dir = prefdir ()
 
   dir = get_home_directory ();
 
   if (nargin > 0)
-    if (! exist (dir, "dir"))
+    if (! isfolder (dir))
       mkdir (dir);
     endif
   endif
 
 endfunction
diff --git a/scripts/prefs/setpref.m b/scripts/prefs/setpref.m
--- a/scripts/prefs/setpref.m
+++ b/scripts/prefs/setpref.m
@@ -86,17 +86,17 @@ endfunction
 %!   setpref ("group1", {"pref1", "pref2"}, {1, 2});
 %!   assert (getpref ("group1", "pref1"), 1);
 %!   assert (getpref ("group1", "pref2"), 2);
 %!
 %!   fail ('setpref ("group1", {"p1", "p2"}, 1)', ...
 %!         "size mismatch for PREF and VAL");
 %! unwind_protect_cleanup
 %!   unlink (fullfile (tmp_home, ".octave_prefs"));
-%!   if (exist (tmp_home, "dir"))
+%!   if (isfolder (tmp_home))
 %!     rmdir (tmp_home);
 %!   endif
 %!   if (isempty (HOME))
 %!     unsetenv ("HOME");
 %!   else
 %!     setenv ("HOME", HOME);
 %!   endif
 %! end_unwind_protect
diff --git a/scripts/profiler/profexport.m b/scripts/profiler/profexport.m
--- a/scripts/profiler/profexport.m
+++ b/scripts/profiler/profexport.m
@@ -59,17 +59,17 @@ function profexport (dir, name = "", dat
     else
       if (! ischar (name))
         error ("profexport: NAME must be a string");
       endif
       data = profile ("info");
     endif
   endif
 
-  if (! exist (dir, "dir"))
+  if (! isfolder (dir))
     ok = mkdir (dir);
     if (! ok)
       error ("profexport: failed to create output directory '%s'", dir);
     endif
   endif
 
   if (! copyfile (__dataFilename ("style.css"), dir))
     error ("profexport: failed to copy data file to directory '%s'", dir)
diff --git a/scripts/testfun/private/dump_demos.m b/scripts/testfun/private/dump_demos.m
--- a/scripts/testfun/private/dump_demos.m
+++ b/scripts/testfun/private/dump_demos.m
@@ -88,17 +88,17 @@ function dump_demos (dirs={"plot/appeara
   fprintf (fid, "diary diary.log\n");
 
   ## Run and print the demos in each directory
   for i = 1:numel (dirs)
     d = dirs{i};
     if (! is_absolute_filename (d))
       d = dir_in_loadpath (d);
     endif
-    if (! exist (d, "dir"))
+    if (! isfolder (d))
       error ("dump_demos: directory %s does not exist", d);
     endif
     dump_all_demos (d, fid, fmt);
   endfor
 
   ## Add helper functions like sombrero
   dump_helper_fcns (fid);
 
