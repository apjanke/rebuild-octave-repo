# HG changeset patch
# User jwe
# Date 823429582 0
#      Sun Feb 04 10:26:22 1996 +0000
# Node ID 620a65533630e232a4042753a342955d8b4e3cf7
# Parent  821870c30840022f7edb01afde4c19ebae4d6e40
[project @ 1996-02-04 10:17:34 by jwe]

diff --git a/liboctave/ODE.h b/liboctave/ODE.h
--- a/liboctave/ODE.h
+++ b/liboctave/ODE.h
@@ -22,17 +22,18 @@ Software Foundation, 59 Temple Place - S
 */
 
 #if !defined (octave_ODE_h)
 #define octave_ODE_h 1
 
 #include "ODEFunc.h"
 #include "base-de.h"
 
-class ODE : public base_diff_eqn, public ODEFunc
+class
+ODE : public base_diff_eqn, public ODEFunc
 {
 public:
 
   ODE (void)
     : base_diff_eqn (), ODEFunc () { }
 
   ODE (const ColumnVector& state, double time, const ODEFunc& f)
     : base_diff_eqn (state, time), ODEFunc (f) { }
diff --git a/liboctave/ODEFunc.h b/liboctave/ODEFunc.h
--- a/liboctave/ODEFunc.h
+++ b/liboctave/ODEFunc.h
@@ -22,17 +22,18 @@ Software Foundation, 59 Temple Place - S
 */
 
 #if !defined (octave_ODEFunc_h)
 #define octave_ODEFunc_h 1
 
 class Matrix;
 class ColumnVector;
 
-class ODEFunc
+class
+ODEFunc
 {
 public:
 
   typedef ColumnVector (*ODERHSFunc) (const ColumnVector&, double);
   typedef Matrix (*ODEJacFunc) (const ColumnVector&, double);
 
   ODEFunc (void)
     : fun (0), jac (0) { }
@@ -51,16 +52,18 @@ public:
       if (this != &a)
 	{
 	  fun = a.fun;
 	  jac = a.jac;
 	}
       return *this;
     }
 
+  ~ODEFunc (void) { }
+
   ODERHSFunc function (void) const { return fun; }
 
   ODEFunc& set_function (ODERHSFunc f)
     {
       fun = f;
       return *this;
     }
 
@@ -70,17 +73,16 @@ public:
     {
       jac = j;
       return *this;
     }
 
 protected:
 
   ODERHSFunc fun;
-
   ODEJacFunc jac;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/Objective.h b/liboctave/Objective.h
--- a/liboctave/Objective.h
+++ b/liboctave/Objective.h
@@ -1,12 +1,12 @@
 // Objective.h                                          -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -21,72 +21,65 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #if !defined (octave_Objective_h)
 #define octave_Objective_h 1
 
 #include "dColVector.h"
 
-class Objective
+class
+Objective
 {
- public:
+public:
 
   typedef double (*objective_fcn) (const ColumnVector&);
   typedef ColumnVector (*gradient_fcn) (const ColumnVector&);
 
   Objective (void)
-    {
-      phi = 0;
-      grad = 0;
-    }
+    : phi (0), grad (0) { }
 
   Objective (const objective_fcn obj)
-    {
-      phi = obj;
-      grad = 0;
-    }
+    : phi (obj), grad (0) { }
 
   Objective (const objective_fcn obj, const gradient_fcn g)
-    {
-      phi = obj;
-      grad = g;
-    }
+    : phi (obj), grad (g) { }
 
   Objective (const Objective& a)
-    {
-      phi = a.phi;
-      grad = a.grad;
-    }
+    : phi (a.phi), grad (a.grad) { }
 
   Objective& operator = (const Objective& a)
     {
-      phi = a.phi;
-      grad = a.grad;
-
+      if (this != &a)
+	{
+	  phi = a.phi;
+	  grad = a.grad;
+	}
       return *this;
     }
 
+  ~Objective (void) { }
+
   objective_fcn objective_function (void) const { return phi; }
 
   Objective& set_objective_function (const objective_fcn obj)
     {
       phi = obj;
       return *this;
     }
 
   gradient_fcn gradient_function (void) const { return grad; }
 
   Objective& set_gradient_function (const gradient_fcn g)
     {
       grad = g;
       return *this;
     }
 
- private:
+private:
 
   objective_fcn phi;
   gradient_fcn grad;
 
 };
 
 #endif
 
diff --git a/liboctave/QLD.cc b/liboctave/QLD.cc
--- a/liboctave/QLD.cc
+++ b/liboctave/QLD.cc
@@ -122,20 +122,14 @@ QLD::minimize (double& objf, int& inform
 
   objf = (x.transpose () * H * x) / 2.0;
   if (c.capacity () > 0)
     objf += c.transpose () * x;
 
   return x;
 }
 
-void
-QLD::set_default_options (void)
-{
-  iprint = 0;
-}
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/liboctave/QLD.h b/liboctave/QLD.h
--- a/liboctave/QLD.h
+++ b/liboctave/QLD.h
@@ -1,12 +1,12 @@
 // QLD.h                                                -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -28,68 +28,72 @@ Software Foundation, 59 Temple Place - S
 #pragma interface
 #endif
 
 class Matrix;
 class ColumnVector;
 
 #include "QP.h"
 
-class QLD : public QP
+class
+QLD : public QP
 {
- public:
+public:
 
-  QLD (void) : QP ()
-    { set_default_options (); }
+  QLD (void)
+    : QP (), iprint (0) { }
 
-  QLD (const ColumnVector& x, const Matrix& H) : QP (x, H)
-    { set_default_options (); }
+  QLD (const ColumnVector& x, const Matrix& H)
+    : QP (x, H), iprint (0) { }
 
   QLD (const ColumnVector& x, const Matrix& H, const ColumnVector& c)
-    : QP (x, H, c) { set_default_options (); }
+    : QP (x, H, c), iprint (0) { }
 
-  QLD (const ColumnVector& x, const Matrix& H, const Bounds& b) : QP (x, H, b)
-    { set_default_options (); }
+  QLD (const ColumnVector& x, const Matrix& H, const Bounds& b)
+    : QP (x, H, b), iprint (0) { }
 
   QLD (const ColumnVector& x, const Matrix& H, const LinConst& lc)
-    : QP (x, H, lc)
-      { set_default_options (); }
+    : QP (x, H, lc), iprint (0) { }
 
   QLD (const ColumnVector& x, const Matrix& H, const ColumnVector& c,
-       const Bounds& b) : QP (x, H, c, b) { set_default_options (); }
+       const Bounds& b)
+    : QP (x, H, c, b), iprint (0) { }
 
   QLD (const ColumnVector& x, const Matrix& H, const ColumnVector& c,
-       const LinConst& lc) : QP (x, H, c, lc) { set_default_options (); }
+       const LinConst& lc)
+    : QP (x, H, c, lc), iprint (0) { }
 
   QLD (const ColumnVector& x, const Matrix& H, const Bounds& b,
-       const LinConst& lc) : QP (x, H, b, lc) { set_default_options (); }
+       const LinConst& lc)
+    : QP (x, H, b, lc), iprint (0) { }
 
   QLD (const ColumnVector& x, const Matrix& H, const ColumnVector& c,
-       const Bounds& b, const LinConst& lc) : QP (x, H, c, b, lc)
-   { set_default_options (); }
+       const Bounds& b, const LinConst& lc)
+    : QP (x, H, c, b, lc), iprint (0) { }
 
-  QLD (const QLD& a) : QP (a.x, a.H, a.c, a.bnds, a.lc)
-    { set_default_options (); }
+  QLD (const QLD& a)
+    : QP (a.x, a.H, a.c, a.bnds, a.lc), iprint (0) { }
 
   QLD& operator = (const QLD& a)
     {
-      x = a.x;
-      H = a.H;
-      c = a.c;
-      bnds = a.bnds;
-      lc = a.lc;
-      iprint = a.iprint;
+      if (this != &a)
+	{
+	  QP::operator = (a);
 
+	  iprint = a.iprint;
+	}
       return *this;
     }
 
+  ~QLD (void) { }
+
   ColumnVector minimize (double& objf, int& inform);
 
 private:
-  void set_default_options (void);
+
   int iprint;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/liboctave/QP.h b/liboctave/QP.h
--- a/liboctave/QP.h
+++ b/liboctave/QP.h
@@ -1,12 +1,12 @@
 // QP.h                                                -*- C++ -*-
 /*
 
-Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
+Copyright (C) 1996 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -25,69 +25,97 @@ Software Foundation, 59 Temple Place - S
 #define octave_QP_h 1
 
 #include "dMatrix.h"
 #include "dColVector.h"
 #include "Bounds.h"
 #include "LinConst.h"
 #include "base-min.h"
 
-class QP : public base_minimizer
+class
+QP : public base_minimizer
 {
- public:
+public:
 
-  QP (void) : base_minimizer () { }
+  QP (void)
+    : base_minimizer (), H (), c (), bnds (), lc () { }
 
   QP (const ColumnVector& x, const Matrix& H_arg)
-    : base_minimizer (x), H (H_arg)
+    : base_minimizer (x), H (H_arg), c (), bnds (), lc ()
       { make_h_symmetric (); }
 
   QP (const ColumnVector& x, const Matrix& H_arg, const ColumnVector& c_arg)
-    : base_minimizer (x), H (H_arg), c (c_arg)
+    : base_minimizer (x), H (H_arg), c (c_arg), bnds (), lc ()
       { make_h_symmetric (); }
 
   QP (const ColumnVector& x, const Matrix& H_arg, const Bounds& b)
-    : base_minimizer (x), H (H_arg), bnds (b)
+    : base_minimizer (x), H (H_arg), c (), bnds (b), lc ()
       { make_h_symmetric (); }
 
   QP (const ColumnVector& x, const Matrix& H_arg, const LinConst& l)
-    : base_minimizer (x), H (H_arg), lc (l)
+    : base_minimizer (x), H (H_arg), lc (l), bnds (), lc ()
       { make_h_symmetric (); }
 
   QP (const ColumnVector& x, const Matrix& H_arg, const ColumnVector& c_arg,
       const Bounds& b)
-    : base_minimizer (x), H (H_arg), c (c_arg), bnds (b)
+    : base_minimizer (x), H (H_arg), c (c_arg), bnds (b), lc ()
       { make_h_symmetric (); }
 
   QP (const ColumnVector& x, const Matrix& H_arg, const ColumnVector& c_arg,
       const LinConst& l)
-    : base_minimizer (x), H (H_arg), c (c_arg), lc (l)
+    : base_minimizer (x), H (H_arg), c (c_arg), bnds (), lc (l)
       { make_h_symmetric (); }
 
   QP (const ColumnVector& x, const Matrix& H_arg, const Bounds& b,
       const LinConst& l)
-    : base_minimizer (x), H (H_arg), bnds (b), lc (l)
+    : base_minimizer (x), H (H_arg), c (), bnds (b), lc (l)
       { make_h_symmetric (); }
 
   QP (const ColumnVector& x, const Matrix& H_arg, const ColumnVector& c_arg,
       const Bounds& b, const LinConst& l)
     : base_minimizer (x), H (H_arg), c (c_arg), bnds (b), lc (l)
       { make_h_symmetric (); }
 
+  QP (const QP& qp)
+    : base_minimizer (qp), H (qp.H), c (qp.c), bnds (qp.bnds), lc (qp.lc) { }
+
+  QP& operator = (const QP& qp)
+    {
+      if (this != &qp)
+	{
+	  base_minimizer::operator = (qp);
+
+	  H = qp.H;
+	  c = qp.c;
+	  bnds = qp.bnds;
+	  lc = qp.lc;
+	}
+      return *this;
+    }
+
+  ~QP (void) { }
+
+  Matrix hessian (void) const { return H; }
+
+  ColumnVector linear_obj_coeff (void) const { return c; }
+
+  Bounds bounds (void) const { return bnds; }
+
+  LinConst linear_constraints (void) const { return lc; }
+
   virtual ~QP (void) { }
 
- protected:
+protected:
 
-  ColumnVector x;
   Matrix H;  
   ColumnVector c;
   Bounds bnds;
   LinConst lc;
 
- private:
+private:
 
   Matrix make_h_symmetric (void) { return 0.5 * (H + H.transpose ()); }
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
