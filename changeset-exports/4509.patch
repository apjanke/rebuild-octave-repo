# HG changeset patch
# User jwe
# Date 1063307306 0
#      Thu Sep 11 19:08:26 2003 +0000
# Node ID 9ec494b3eb5f4aaebb25d25a3902b6ec0aeadea9
# Parent  2bc437206787eb67f9e99571e91c703a4c8e04f3
[project @ 2003-09-11 19:08:25 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -988,48 +988,48 @@ ComplexMatrix::inverse (int& info, doubl
 
       F77_XFCN (zgetrf, ZGETRF, (nc, nc, tmp_data, nr, pipvt, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zgetrf");
       else
 	{
 	  // Throw-away extra info LAPACK gives so as to not change output.
-	  rcond = 0.;
-	  if ( info != 0) 
+	  rcond = 0.0;
+	  if (info != 0) 
 	    info = -1;
 	  else if (calc_cond) 
 	    {
 	      // Now calculate the condition number for non-singular matrix.
 	      char job = '1';
 	      Array<double> rz (2 * nc);
 	      double *prz = rz.fortran_vec ();
-	      F77_XFCN (zgecon, ZGECON, ( &job, nc, tmp_data, nr, anorm, 
-					  rcond, pz, prz, info));
+	      F77_XFCN (zgecon, ZGECON, (&job, nc, tmp_data, nr, anorm, 
+					 rcond, pz, prz, info));
 
 	      if (f77_exception_encountered)
 		(*current_liboctave_error_handler) 
 		  ("unrecoverable error in zgecon");
 
-	      if ( info != 0) 
+	      if (info != 0) 
 		info = -1;
 	    }
 
 	  if (info == -1 && ! force)
 	    retval = *this;  // Restore contents.
 	  else
 	    {
 	      F77_XFCN (zgetri, ZGETRI, (nc, tmp_data, nr, pipvt,
 				       pz, lwork, info));
 
 	      if (f77_exception_encountered)
 		(*current_liboctave_error_handler)
 		  ("unrecoverable error in zgetri");
 
-	      if ( info != 0) 
+	      if (info != 0) 
 		info = -1;
 	    }
 	}
     }
   
   return retval;
 }
 
@@ -1443,63 +1443,63 @@ ComplexMatrix::determinant (int& info, d
 
       F77_XFCN (zgetrf, ZGETRF, (nr, nc, tmp_data, nr, pipvt, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zgetrf");
       else
 	{
 	  // Throw-away extra info LAPACK gives so as to not change output.
-	  rcond = 0.;
-	  if ( info != 0) 
+	  rcond = 0.0;
+	  if (info != 0) 
 	    {
 	      info = -1;
 	      retval = ComplexDET ();
 	    } 
 	  else 
 	    {
 	      if (calc_cond) 
 		{
 		  // Now calc the condition number for non-singular matrix.
 		  char job = '1';
 		  Array<Complex> z (2*nr);
 		  Complex *pz = z.fortran_vec ();
 		  Array<double> rz (2*nr);
 		  double *prz = rz.fortran_vec ();
 		  
-		  F77_XFCN (zgecon, ZGECON, ( &job, nc, tmp_data, nr, anorm, 
-					      rcond, pz, prz, info));
+		  F77_XFCN (zgecon, ZGECON, (&job, nc, tmp_data, nr, anorm, 
+					     rcond, pz, prz, info));
 
 		  if (f77_exception_encountered)
 		    (*current_liboctave_error_handler) 
 		      ("unrecoverable error in zgecon");
 		}
 
-	      if ( info != 0) 
+	      if (info != 0) 
 		{
 		  info = -1;
 		  retval = ComplexDET ();
 		} 
 	      else 
 		{
 		  Complex d[2] = { 1., 0.};
 		  for (int i=0; i<nc; i++) 
 		    {
 		      if (ipvt(i) != (i+1)) d[0] = -d[0];
 		      d[0] = d[0] * atmp(i,i);
 		      if (d[0] == 0.) break;
 		      while (::abs(d[0]) < 1.) 
 			{
 			  d[0] = 10. * d[0];
-			  d[1] = d[1] - 1.;
+			  d[1] = d[1] - 1.0;
 			}
 		      while (::abs(d[0]) >= 10.) 
 			{
 			  d[0] = 0.1 * d[0];
-			  d[1] = d[1] + 1.;
+			  d[1] = d[1] + 1.0;
 			}
 		    }
 		  retval = ComplexDET (d);
 		}
 	    }
 	}
     }
   
@@ -1588,40 +1588,40 @@ ComplexMatrix::solve (const ComplexMatri
 
       F77_XFCN (zgetrf, ZGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zgetrf");
       else
 	{
 	  // Throw-away extra info LAPACK gives so as to not change output.
-	  rcond = 0.;
-	  if ( info != 0) 
+	  rcond = 0.0;
+	  if (info != 0) 
 	    { 
 	      info = -2;
 
 	      if (sing_handler)
 		sing_handler (rcond);
 	      else
 		(*current_liboctave_error_handler)
 		  ("matrix singular to machine precision");
 
 	    } 
 	  else 
 	    {
 	      // Now calculate the condition number for non-singular matrix.
 	      char job = '1';
-	      F77_XFCN (zgecon, ZGECON, ( &job, nc, tmp_data, nr, anorm, 
-					  rcond, pz, prz, info));
+	      F77_XFCN (zgecon, ZGECON, (&job, nc, tmp_data, nr, anorm, 
+					 rcond, pz, prz, info));
 
 	      if (f77_exception_encountered)
 		(*current_liboctave_error_handler) 
 		  ("unrecoverable error in zgecon");
 
-	      if ( info != 0) 
+	      if (info != 0) 
 		info = -2;
 
 	      volatile double rcond_plus_one = rcond + 1.0;
 
 	      if (rcond_plus_one == 1.0 || xisnan (rcond))
 		{
 		  info = -2;
 
@@ -1737,40 +1737,40 @@ ComplexMatrix::solve (const ComplexColum
 
       F77_XFCN (zgetrf, ZGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in zgetrf");
       else
 	{
 	  // Throw-away extra info LAPACK gives so as to not change output.
-	  rcond = 0.;
-	  if ( info != 0) 
+	  rcond = 0.0;
+	  if (info != 0) 
 	    { 
 	      info = -2;
 
 	      if (sing_handler)
 		sing_handler (rcond);
 	      else
 		(*current_liboctave_error_handler)
 		  ("matrix singular to machine precision, rcond = %g",
 		   rcond);
 	    } 
 	  else 
 	    {
 	      // Now calculate the condition number for non-singular matrix.
 	      char job = '1';
-	      F77_XFCN (zgecon, ZGECON, ( &job, nc, tmp_data, nr, anorm, 
-					  rcond, pz, prz, info));
+	      F77_XFCN (zgecon, ZGECON, (&job, nc, tmp_data, nr, anorm, 
+					 rcond, pz, prz, info));
 
 	      if (f77_exception_encountered)
 		(*current_liboctave_error_handler) 
 		  ("unrecoverable error in zgecon");
 
-	      if ( info != 0) 
+	      if (info != 0) 
 		info = -2;
 
 	      volatile double rcond_plus_one = rcond + 1.0;
 
 	      if (rcond_plus_one == 1.0 || xisnan (rcond))
 		{
 		  info = -2;
 		
@@ -2674,17 +2674,17 @@ ComplexMatrix::diag (int k) const
 
       d.resize (ndiag);
 
       if (k > 0)
 	{
 	  for (int i = 0; i < ndiag; i++)
 	    d.elem (i) = elem (i, i+k);
 	}
-      else if ( k < 0)
+      else if (k < 0)
 	{
 	  for (int i = 0; i < ndiag; i++)
 	    d.elem (i) = elem (i-k, i);
 	}
       else
 	{
 	  for (int i = 0; i < ndiag; i++)
 	    d.elem (i) = elem (i, i);
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -655,48 +655,48 @@ Matrix::inverse (int& info, double& rcon
 
       F77_XFCN (dgetrf, DGETRF, (nc, nc, tmp_data, nr, pipvt, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in dgetrf");
       else
 	{
 	  // Throw-away extra info LAPACK gives so as to not change output.
-	  rcond = 0.;
-	  if ( info != 0) 
+	  rcond = 0.0;
+	  if (info != 0) 
 	    info = -1;
 	  else if (calc_cond) 
 	    {
 	      // Now calculate the condition number for non-singular matrix.
 	      char job = '1';
 	      Array<int> iz (nc);
 	      int *piz = iz.fortran_vec ();
-	      F77_XFCN (dgecon, DGECON, ( &job, nc, tmp_data, nr, anorm, 
-					  rcond, pz, piz, info));
+	      F77_XFCN (dgecon, DGECON, (&job, nc, tmp_data, nr, anorm, 
+					 rcond, pz, piz, info));
 
 	      if (f77_exception_encountered)
 		(*current_liboctave_error_handler) 
 		  ("unrecoverable error in dgecon");
 
-	      if ( info != 0) 
+	      if (info != 0) 
 		info = -1;
 	    }
 
 	  if (info == -1 && ! force)
 	    retval = *this; // Restore matrix contents.
 	  else
 	    {
 	      F77_XFCN (dgetri, DGETRI, (nc, tmp_data, nr, pipvt,
 				       pz, lwork, info));
 
 	      if (f77_exception_encountered)
 		(*current_liboctave_error_handler)
 		  ("unrecoverable error in dgetri");
 
-	      if ( info != 0) 
+	      if (info != 0) 
 		info = -1;
 	    }
 	}
     }
 
   return retval;
 }
 
@@ -1108,63 +1108,63 @@ Matrix::determinant (int& info, double& 
 
       F77_XFCN (dgetrf, DGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in dgetrf");
       else
 	{
 	  // Throw-away extra info LAPACK gives so as to not change output.
-	  rcond = 0.;
-	  if ( info != 0) 
+	  rcond = 0.0;
+	  if (info != 0) 
 	    {
-	    info = -1;
-	    retval = DET ();
+	      info = -1;
+	      retval = DET ();
 	    } 
 	  else 
 	    {
 	      if (calc_cond) 
 		{
 		  // Now calc the condition number for non-singular matrix.
 		  char job = '1';
 		  Array<double> z (4 * nc);
 		  double *pz = z.fortran_vec ();
 		  Array<int> iz (nc);
 		  int *piz = iz.fortran_vec ();
 
-		  F77_XFCN (dgecon, DGECON, ( &job, nc, tmp_data, nr, anorm, 
-					      rcond, pz, piz, info));
+		  F77_XFCN (dgecon, DGECON, (&job, nc, tmp_data, nr, anorm, 
+					     rcond, pz, piz, info));
 
 		  if (f77_exception_encountered)
 		    (*current_liboctave_error_handler) 
 		      ("unrecoverable error in dgecon");
 		}
 
-	      if ( info != 0) 
+	      if (info != 0) 
 		{
 		  info = -1;
 		  retval = DET ();
 		} 
 	      else 
 		{
 		  double d[2] = { 1., 0.};
 		  for (int i=0; i<nc; i++) 
 		    {
 		      if (ipvt(i) != (i+1)) d[0] = -d[0];
 		      d[0] *= atmp(i,i);
 		      if (d[0] == 0.) break;
 		      while (fabs(d[0]) < 1.) 
 			{
 			  d[0] = 10. * d[0];
-			  d[1] = d[1] - 1.;
+			  d[1] = d[1] - 1.0;
 			}
 		      while (fabs(d[0]) >= 10.) 
 			{
 			  d[0] = 0.1 * d[0];
-			  d[1] = d[1] + 1.;
+			  d[1] = d[1] + 1.0;
 			}
 		    }
 		  retval = DET (d);
 		}
 	    }
 	}
     }
 
@@ -1224,40 +1224,40 @@ Matrix::solve (const Matrix& b, int& inf
 
       F77_XFCN (dgetrf, DGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in dgetrf");
       else
 	{
 	  // Throw-away extra info LAPACK gives so as to not change output.
-	  rcond = 0.;
-	  if ( info != 0) 
+	  rcond = 0.0;
+	  if (info != 0) 
 	    {
 	      info = -2;
 
 	      if (sing_handler)
 		sing_handler (rcond);
 	      else
 		(*current_liboctave_error_handler)
 		  ("matrix singular to machine precision");
 
 	    } 
 	  else 
 	    {
 	      // Now calculate the condition number for non-singular matrix.
 	      char job = '1';
-	      F77_XFCN (dgecon, DGECON, ( &job, nc, tmp_data, nr, anorm, 
-					  rcond, pz, piz, info));
+	      F77_XFCN (dgecon, DGECON, (&job, nc, tmp_data, nr, anorm, 
+					 rcond, pz, piz, info));
 	      
 	      if (f77_exception_encountered)
 		(*current_liboctave_error_handler) 
 		  ("unrecoverable error in dgecon");
 	      
-	      if ( info != 0) 
+	      if (info != 0) 
 		info = -2;
 
 	      volatile double rcond_plus_one = rcond + 1.0;
 
 	      if (rcond_plus_one == 1.0 || xisnan (rcond))
 		{
 		  info = -2;
 
@@ -1371,40 +1371,40 @@ Matrix::solve (const ColumnVector& b, in
 
       F77_XFCN (dgetrf, DGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
       if (f77_exception_encountered)
 	(*current_liboctave_error_handler) ("unrecoverable error in dgetrf");
       else
 	{
 	  // Throw-away extra info LAPACK gives so as to not change output.
-	  rcond = 0.;
-	  if ( info > 0) 
+	  rcond = 0.0;
+	  if (info > 0) 
 	    {
 	      info = -2;
 
 	      if (sing_handler)
 		sing_handler (rcond);
 	      else
 		(*current_liboctave_error_handler)
 		  ("matrix singular to machine precision");
 
 	    } 
 	  else 
 	    {
 	      // Now calculate the condition number for non-singular matrix.
 	      char job = '1';
-	      F77_XFCN (dgecon, DGECON, ( &job, nc, tmp_data, nr, anorm, 
-					  rcond, pz, piz, info));
+	      F77_XFCN (dgecon, DGECON, (&job, nc, tmp_data, nr, anorm, 
+					 rcond, pz, piz, info));
 	      
 	      if (f77_exception_encountered)
 		(*current_liboctave_error_handler) 
 		  ("unrecoverable error in dgecon");
 
-	      if ( info != 0) 
+	      if (info != 0) 
 		info = -2;
 
 	      volatile double rcond_plus_one = rcond + 1.0;
 
 	      if (rcond_plus_one == 1.0 || xisnan (rcond))
 		{
 		  info = -2;
 
@@ -2191,17 +2191,17 @@ Matrix::diag (int k) const
 
       d.resize (ndiag);
 
       if (k > 0)
 	{
 	  for (int i = 0; i < ndiag; i++)
 	    d.elem (i) = elem (i, i+k);
 	}
-      else if ( k < 0)
+      else if (k < 0)
 	{
 	  for (int i = 0; i < ndiag; i++)
 	    d.elem (i) = elem (i-k, i);
 	}
       else
 	{
 	  for (int i = 0; i < ndiag; i++)
 	    d.elem (i) = elem (i, i);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,24 @@
+2003-09-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pr-output.cc (Fformat): Doc fix.
+	(current_output_max_field_width, current_output_precision):
+	New functions.
+	(float_format::float_format (int, int, int)): Use them to provide
+	default values for field width and precision.
+	(print_g): New static variable.
+	(set_real_format, set_real_matrix_format, set_complex_format) 
+	(set_complex_matrix_format, set_range_format): Handle print_g.
+	(pr_float, pr_complex): Don't scale if using print_g.
+	(set_format_style): Accept new "g" and "G" modifiers for short and
+	long formats and set print_g.
+	Set default precision and width for short to 5, 10.
+	Set default precision and width for long to 15, 20.
+
 2003-09-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* OPERATORS/op-m-cs.cc (complex_matrix_conv): Delete function.
 	(install_m_cs_ops): Don't install complex_matrix_conv here.
 
 	* OPERATORS/op-s-cs.cc (complex_matrix_conv): Delete function.
 	(install_s_cs_ops): Don't install complex_matrix_conv here.
 
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -92,27 +92,43 @@ static int hex_format = 0;
 static int bit_format = 0;
 
 // TRUE means don't put newlines around the column number headers.
 static bool compact_format = false;
 
 // TRUE means use an e format.
 static bool print_e = false;
 
+// TRUE means use a g format.
+static bool print_g = false;
+
 // TRUE means print E instead of e for exponent field.
 static bool print_big_e = false;
 
 class pr_formatted_float;
 
+static int
+current_output_max_field_width (void)
+{
+  return Voutput_max_field_width;
+}
+
+static int
+current_output_precision (void)
+{
+  return Voutput_precision;
+}
+
 class
 float_format
 {
 public:
 
-  float_format (int w = -1, int p = -1, int f = 0)
+  float_format (int w = current_output_max_field_width (),
+		int p = current_output_precision (), int f = 0)
     : fw (w), prec (p), fmt (f), up (0), sp (0) { }
 
   float_format (const float_format& ff)
     : fw (ff.fw), prec (ff.prec), fmt (ff.fmt), up (ff.up), sp (ff.sp) { }
 
   float_format& operator = (const float_format& ff)
     {
       if (&ff != this)
@@ -304,28 +320,33 @@ set_real_format (bool sign, int digits, 
 
       fw = ld + 1 + rd;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
     }
 
   if (! (bank_format || hex_format || bit_format)
-      && (fw > Voutput_max_field_width || print_e))
+      && (fw > Voutput_max_field_width || print_e || print_g))
     {
-      int exp_field = 4;
-      if (digits > 100)
-	exp_field++;
+      if (print_g)
+	fmt = float_format ();
+      else
+	{
+	  int exp_field = 4;
+	  if (digits > 100)
+	    exp_field++;
 
-      fw = 2 + prec + exp_field;
-      if (inf_or_nan && fw < 3)
-	fw = 3;
-      fw += sign;
+	  fw = 2 + prec + exp_field;
+	  if (inf_or_nan && fw < 3)
+	    fw = 3;
+	  fw += sign;
 
-      fmt = float_format (fw, prec - 1, std::ios::scientific);
+	  fmt = float_format (fw, prec - 1, std::ios::scientific);
+	}
 
       if (print_big_e)
 	fmt.uppercase ();
     }
   else if (inf_or_nan || int_only)
     fmt = float_format (fw, rd);
   else
     fmt = float_format (fw, rd, std::ios::fixed);
@@ -387,17 +408,17 @@ set_real_matrix_format (bool sign, int x
       fw = 2 * sizeof (double);
       rd = 0;
     }
   else if (bit_format)
     {
       fw = 8 * sizeof (double);
       rd = 0;
     }
-  else if (Vfixed_point_format)
+  else if (Vfixed_point_format && ! print_g)
     {
       rd = prec;
       fw = rd + 2;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
     }
   else if (int_or_inf_or_nan)
@@ -445,28 +466,34 @@ set_real_matrix_format (bool sign, int x
       fw = ld + 1 + rd;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
     }
 
   if (! (bank_format || hex_format || bit_format)
       && (print_e
+	  || print_g
 	  || (! Vfixed_point_format && fw > Voutput_max_field_width)))
     {
-      int exp_field = 4;
-      if (x_max > 100 || x_min > 100)
-	exp_field++;
+      if (print_g)
+	fmt = float_format ();
+      else
+	{
+	  int exp_field = 4;
+	  if (x_max > 100 || x_min > 100)
+	    exp_field++;
 
-      fw = 2 + prec + exp_field;
-      if (inf_or_nan && fw < 3)
-	fw = 3;
-      fw += sign;
+	  fw = 2 + prec + exp_field;
+	  if (inf_or_nan && fw < 3)
+	    fw = 3;
+	  fw += sign;
 
-      fmt = float_format (fw, prec - 1, std::ios::scientific);
+	  fmt = float_format (fw, prec - 1, std::ios::scientific);
+	}
 
       if (print_big_e)
 	fmt.uppercase ();
     }
   else if (int_or_inf_or_nan)
     fmt = float_format (fw, rd);
   else
     fmt = float_format (fw, rd, std::ios::fixed);
@@ -590,29 +617,37 @@ set_complex_format (bool sign, int x_max
 
       i_fw = r_fw = ld + 1 + rd;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
     }
 
   if (! (bank_format || hex_format || bit_format)
-      && (r_fw > Voutput_max_field_width || print_e))
+      && (r_fw > Voutput_max_field_width || print_e || print_g))
     {
-      int exp_field = 4;
-      if (x_max > 100 || x_min > 100)
-	exp_field++;
+      if (print_g)
+	{
+	  r_fmt = float_format ();
+	  i_fmt = float_format ();
+	}
+      else
+	{
+	  int exp_field = 4;
+	  if (x_max > 100 || x_min > 100)
+	    exp_field++;
 
-      i_fw = r_fw = 1 + prec + exp_field;
-      if (inf_or_nan && i_fw < 3)
-	i_fw = r_fw = 3;
-      r_fw += sign;
+	  i_fw = r_fw = 1 + prec + exp_field;
+	  if (inf_or_nan && i_fw < 3)
+	    i_fw = r_fw = 3;
+	  r_fw += sign;
 
-      r_fmt = float_format (r_fw, prec - 1, std::ios::scientific);
-      i_fmt = float_format (i_fw, prec - 1, std::ios::scientific);
+	  r_fmt = float_format (r_fw, prec - 1, std::ios::scientific);
+	  i_fmt = float_format (i_fw, prec - 1, std::ios::scientific);
+	}
 
       if (print_big_e)
 	{
 	  r_fmt.uppercase ();
 	  i_fmt.uppercase ();
 	}
     }
   else if (inf_or_nan || int_only)
@@ -710,17 +745,17 @@ set_complex_matrix_format (bool sign, in
       rd = 0;
     }
   else if (bit_format)
     {
       r_fw = 8 * sizeof (double);
       i_fw = 8 * sizeof (double);
       rd = 0;
     }
-  else if (Vfixed_point_format)
+  else if (Vfixed_point_format && ! print_g)
     {
       rd = prec;
       i_fw = r_fw = rd + 2;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
     }
   else if (int_or_inf_or_nan)
@@ -768,29 +803,38 @@ set_complex_matrix_format (bool sign, in
       i_fw = r_fw = ld + 1 + rd;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
     }
 
   if (! (bank_format || hex_format || bit_format)
       && (print_e
+	  || print_g
 	  || (! Vfixed_point_format && r_fw > Voutput_max_field_width)))
     {
-      int exp_field = 4;
-      if (x_max > 100 || x_min > 100)
-	exp_field++;
+      if (print_g)
+	{
+	  r_fmt = float_format ();
+	  i_fmt = float_format ();
+	}
+      else
+	{
+	  int exp_field = 4;
+	  if (x_max > 100 || x_min > 100)
+	    exp_field++;
 
-      i_fw = r_fw = 1 + prec + exp_field;
-      if (inf_or_nan && i_fw < 3)
-	i_fw = r_fw = 3;
-      r_fw += sign;
+	  i_fw = r_fw = 1 + prec + exp_field;
+	  if (inf_or_nan && i_fw < 3)
+	    i_fw = r_fw = 3;
+	  r_fw += sign;
 
-      r_fmt = float_format (r_fw, prec - 1, std::ios::scientific);
-      i_fmt = float_format (i_fw, prec - 1, std::ios::scientific);
+	  r_fmt = float_format (r_fw, prec - 1, std::ios::scientific);
+	  i_fmt = float_format (i_fw, prec - 1, std::ios::scientific);
+	}
 
       if (print_big_e)
 	{
 	  r_fmt.uppercase ();
 	  i_fmt.uppercase ();
 	}
     }
   else if (int_or_inf_or_nan)
@@ -890,17 +934,17 @@ set_range_format (bool sign, int x_max, 
       rd = 0;
     }
   else if (all_ints)
     {
       int digits = x_max > x_min ? x_max : x_min;
       fw = sign + digits;
       rd = fw;
     }
-  else if (Vfixed_point_format)
+  else if (Vfixed_point_format && ! print_g)
     {
       rd = prec;
       fw = rd + 2 + sign;
     }
   else
     {
       int ld_max, rd_max;
       if (x_max > 0)
@@ -933,25 +977,31 @@ set_range_format (bool sign, int x_max, 
       ld = ld_max > ld_min ? ld_max : ld_min;
       rd = rd_max > rd_min ? rd_max : rd_min;
 
       fw = sign + ld + 1 + rd;
     }
 
   if (! (bank_format || hex_format || bit_format)
       && (print_e
+	  || print_g
 	  || (! Vfixed_point_format && fw > Voutput_max_field_width)))
     {
-      int exp_field = 4;
-      if (x_max > 100 || x_min > 100)
-	exp_field++;
+      if (print_g)
+	fmt = float_format ();
+      else
+	{
+	  int exp_field = 4;
+	  if (x_max > 100 || x_min > 100)
+	    exp_field++;
 
-      fw = sign + 2 + prec + exp_field;
+	  fw = sign + 2 + prec + exp_field;
 
-      fmt = float_format (fw, prec - 1, std::ios::scientific);
+	  fmt = float_format (fw, prec - 1, std::ios::scientific);
+	}
 
       if (print_big_e)
 	fmt.uppercase ();
     }
   else if (all_ints)
     fmt = float_format (fw, rd);
   else
     fmt = float_format (fw, rd, std::ios::fixed);
@@ -1158,33 +1208,34 @@ pr_any_float (const float_format *fmt, s
     }
   else
     os << d;
 }
 
 static inline void
 pr_float (std::ostream& os, double d, int fw = 0, double scale = 1.0)
 {
-  if (Vfixed_point_format && scale != 1.0)
+  if (Vfixed_point_format && ! print_g && scale != 1.0)
     d /= scale;
 
   pr_any_float (curr_real_fmt, os, d, fw);
 }
 
 static inline void
 pr_imag_float (std::ostream& os, double d, int fw = 0)
 {
   pr_any_float (curr_imag_fmt, os, d, fw);
 }
 
 static void
 pr_complex (std::ostream& os, const Complex& c, int r_fw = 0,
 	    int i_fw = 0, double scale = 1.0)
 {
-  Complex tmp = (Vfixed_point_format && scale != 1.0) ? c / scale : c;
+  Complex tmp
+    = (Vfixed_point_format && ! print_g && scale != 1.0) ? c / scale : c;
 
   double r = tmp.real ();
 
   pr_float (os, r, r_fw);
 
   if (! bank_format)
     {
       double i = tmp.imag ();
@@ -1225,17 +1276,17 @@ print_empty_matrix (std::ostream& os, in
       if (Vprint_empty_dimensions)
 	os << "(" << nr << "x" << nc << ")";
     }
 }
 
 static void
 pr_scale_header (std::ostream& os, double scale)
 {
-  if (Vfixed_point_format && scale != 1.0)
+  if (Vfixed_point_format && ! print_g && scale != 1.0)
     {
       os << "  "
 	 << std::setw (8) << std::setprecision (1)
 	 << std::setiosflags (std::ios::scientific|std::ios::left)
 	 << scale
 	 << std::resetiosflags (std::ios::scientific|std::ios::left)
 	 << " *\n";
 
@@ -1872,16 +1923,17 @@ init_format_state (void)
 {
   free_format = false;
   plus_format = false;
   bank_format = false;
   hex_format = 0;
   bit_format = 0;
   print_e = false;
   print_big_e = false;
+  print_g = false;
 }
 
 static void
 set_output_prec_and_fw (int prec, int fw)
 {
   bind_builtin_variable ("output_precision", prec);
   bind_builtin_variable ("output_max_field_width", fw);
 }
@@ -1907,27 +1959,38 @@ set_format_style (int argc, const string
 		  print_e = true;
 		}
 	      else if (arg == "E")
 		{
 		  init_format_state ();
 		  print_e = true;
 		  print_big_e = true;
 		}
+	      else if (arg == "g")
+		{
+		  init_format_state ();
+		  print_g = true;
+		}
+	      else if (arg == "G")
+		{
+		  init_format_state ();
+		  print_g = true;
+		  print_big_e = true;
+		}
 	      else
 		{
 		  error ("format: unrecognized option `short %s'",
 			 arg.c_str ());
 		  return;
 		}
 	    }
 	  else
 	    init_format_state ();
 
-	  set_output_prec_and_fw (3, 8);
+	  set_output_prec_and_fw (5, 10);
 	}
       else if (arg == "long")
 	{
 	  if (--argc > 0)
 	    {
 	      arg = argv[idx++];
 
 	      if (arg == "e")
@@ -1936,27 +1999,38 @@ set_format_style (int argc, const string
 		  print_e = true;
 		}
 	      else if (arg == "E")
 		{
 		  init_format_state ();
 		  print_e = true;
 		  print_big_e = true;
 		}
+	      else if (arg == "g")
+		{
+		  init_format_state ();
+		  print_g = true;
+		}
+	      else if (arg == "G")
+		{
+		  init_format_state ();
+		  print_g = true;
+		  print_big_e = true;
+		}
 	      else
 		{
 		  error ("format: unrecognized option `long %s'",
 			 arg.c_str ());
 		  return;
 		}
 	    }
 	  else
 	    init_format_state ();
 
-	  set_output_prec_and_fw (15, 24);
+	  set_output_prec_and_fw (15, 20);
 	}
       else if (arg == "hex")
 	{
 	  init_format_state ();
 	  hex_format = 1;
 	}
       else if (arg == "native-hex")
 	{
@@ -2016,43 +2090,83 @@ DEFCMD (format, args, ,
 @deffn {Command} format options\n\
 Control the format of the output produced by @code{disp} and Octave's\n\
 normal echoing mechanism.  Valid options are listed in the following\n\
 table.\n\
 \n\
 @table @code\n\
 @item short\n\
 Octave will try to print numbers with at\n\
-least 3 significant figures within a field that is a maximum of 8\n\
-characters wide.\n\
+least 5 significant figures within a field that is a maximum of 10\n\
+characters wide (not counting additional spacing that is added between\n\
+columns of a matrix).\n\
 \n\
 If Octave is unable to format a matrix so that columns line up on the\n\
 decimal point and all the numbers fit within the maximum field width,\n\
 it switches to an @samp{e} format.\n\
 \n\
 @item long\n\
 Octave will try to print numbers with at least 15 significant figures\n\
-within a field that is a maximum of 24 characters wide.\n\
+within a field that is a maximum of 20 characters wide (not counting\n\
+additional spacing that is added between columns of a matrix).\n\
 \n\
 As will the @samp{short} format, Octave will switch to an @samp{e}\n\
 format if it is unable to format a matrix so that columns line up on the\n\
 decimal point and all the numbers fit within the maximum field width.\n\
 \n\
 @item long e\n\
 @itemx short e\n\
 The same as @samp{format long} or @samp{format short} but always display\n\
 output with an @samp{e} format.  For example, with the @samp{short e}\n\
-format, pi is displayed as @code{3.14e+00}.\n\
+format, @code{pi} is displayed as @code{3.14e+00}.\n\
 \n\
 @item long E\n\
 @itemx short E\n\
 The same as @samp{format long e} or @samp{format short e} but always\n\
 display output with an uppercase @samp{E} format.  For example, with\n\
-the @samp{long E} format, pi is displayed as\n\
+the @samp{long E} format, @code{pi} is displayed as\n\
 @code{3.14159265358979E+00}.\n\
+@item long g\n\
+@itemx short g\n\
+Choose between normal @samp{long} (or @samp{short}) and and\n\
+@samp{long e} (or @samp{short e}) formats based on the magnitude\n\
+of the number.  For example, with the @samp{short g} format,\n\
+@code{pi .^ [2; 4; 8; 16; 32]} is displayed as\n\
+\n\
+@example\n\
+@group\n\
+ans =\n\
+\n\
+      3.1416\n\
+      9.8696\n\
+      97.409\n\
+      9488.5\n\
+  9.0032e+07\n\
+  8.1058e+15\n\
+@end group\n\
+@end example\n\
+\n\
+@item long G\n\
+@itemx short G\n\
+The same as @samp{format long g} or @samp{format short g} but use an\n\
+uppercase @samp{E} format.  For example, with the @samp{short G} format,\n\
+@code{pi .^ [2; 4; 8; 16; 32]} is displayed as\n\
+\n\
+@example\n\
+@group\n\
+ans =\n\
+\n\
+      3.1416\n\
+      9.8696\n\
+      97.409\n\
+      9488.5\n\
+  9.0032E+07\n\
+  8.1058E+15\n\
+@end group\n\
+@end example\n\
 \n\
 @item free\n\
 @itemx none\n\
 Print output in free format, without trying to line up columns of\n\
 matrices on the decimal point.  This also causes complex numbers to be\n\
 formatted like this @samp{(0.604194, 0.607088)} instead of like this\n\
 @samp{0.60419 + 0.60709i}.\n\
 \n\
