# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1211720677 -7200
#      Sun May 25 15:04:37 2008 +0200
# Node ID 5640a70cbab196610cfc6c488552606a28261c09
# Parent  31fb919ba0c08df58a6c8e9008ee730d6deef4c1
Add Ffilemarker and fix for 'dbstep in'

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,34 @@
 2008-06-02  David Bateman  <dbateman@free.fr>
 
+	* pt.cc (tree:last_break_function): Next pointer to last function
+	with a breakpoint.
+	* pt.h (tree:last_break_function): ditto.
+	* debug.cc (Fdbstep): Use tree::break_function value of zero to
+	signal to step into the next function. Set tree::last_break_function
+	to indicate position of last breakpoint.
+	(Fdbnext):  Set tree::last_break_function to indicate position of
+	last breakpoint.
+	* pt-bp.h (MAYBE_DO_BREAKPOINT): Check tree::break_function value
+	of zero as well. Only check tree::last_line if we are in teh same
+	function as the last breakpoint.
+	* input.cc (char Vfilemarker): New global variable.
+	(Ffilemarker): New function to query and set Vfilemarker.
+	* input.h (extern char Vfilemarker): Make Vfilemarker available.
+	* util.cc (fcn_file_in_path): If the input argument contains
+	Vfilemarker, strip the trailing part of string from this point
+	when looking for function file.
+	* toplev.cc (octave_call_stack::fo_backtrace): Mark subfunctions
+	with the name of the parent function and Vfilemarker.
+	* symtab.cc (symbol_table::find_function (const std::string&,
+	tree_argument_list *, const string_vector&, octave_value_list*,
+	bool&): If function name contains Vfilemarker, check in scope of
+	specified parent function.
+
 	* DLD-FUNCTIONS/betainc.cc: Move test code here. Add test code for
 	single precision type.
 	* DLD-FUNCTIONS/gammainc.cc: Ditto.
 	* DLD-FUNCTIONS/gcd.cc (Fgcd): Support single precision. Move test
 	code here. Add test code for single precision type.
 	* data.cc: Move test code here and add tests for single precision
 	type. Add tests for Fislogical.
 	(NATIVE_REDUCTION): Support the 'double' argument.
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -864,58 +864,71 @@ execution to continue until the current 
 	  if (! error_state)
 	    {
 	      if (arg == "in")
 		{
 		  Vdebugging = false;
 
 		  tree::break_next = 0;
 
-		  tree::last_line = 0;
+		  tree::last_line = Vdebugging_current_line;
 
-		  tree::break_function = octave_call_stack::caller_user_code ();
+		  tree::break_function = 0;
+
+		  tree::last_break_function = 
+		    octave_call_stack::caller_user_code ();
 		}
 	      else if (arg == "out")
 		{
 		  Vdebugging = false;
 
 		  tree::break_next = 0;
 
 		  tree::last_line = -1;
 
 		  // Next to skip 2 here. One for the oct-file dbstep and 
 		  // another for the function we actually want to step out of.
-		  tree::break_function = octave_call_stack::caller_user_code (2);
+		  tree::break_function = 
+		    octave_call_stack::caller_user_code (2);
+
+		  tree::last_break_function = 
+		    octave_call_stack::caller_user_code ();
 		}
 	      else
 		{
 		  int n = atoi (arg.c_str ());
 
 		  Vdebugging = false;
 
 		  if (n < 0)
 		    tree::break_next = 0;
 		  else
 		    tree::break_next = n;
 
 		  tree::last_line = Vdebugging_current_line;
 		  
 		  tree::break_function = octave_call_stack::caller_user_code ();
+
+		  tree::last_break_function = 
+		    octave_call_stack::caller_user_code ();
 		}
 	    }
 	}
       else
 	{
 	  Vdebugging = false;
 
 	  tree::break_next = 0;
 
 	  tree::last_line = Vdebugging_current_line;
 		  
 	  tree::break_function = octave_call_stack::caller_user_code ();
+
+	  tree::last_break_function = 
+	    octave_call_stack::caller_user_code ();
 	}
     }
   else
     error ("dbstep: can only be called in debug mode");
 
   return octave_value_list ();
 }
 
@@ -969,16 +982,18 @@ functions. This is synonymous with @code
       {
 	Vdebugging = false;
 
 	tree::break_next = 0;
 
 	tree::last_line = Vdebugging_current_line;
 		  
 	tree::break_function = octave_call_stack::caller_user_code ();
+
+	tree::last_break_function = octave_call_stack::caller_user_code ();
       }
     else
       print_usage ();
     }
   else
     error ("dbnext: can only be called in debug mode");
 
   return octave_value_list ();
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -148,16 +148,19 @@ bool Vdrawnow_requested = false;
 bool Vdebugging = false;
 
 // The current line that we are debugging
 int Vdebugging_current_line = -1;
 
 // TRUE if we are running in the Emacs GUD mode.
 static bool Vgud_mode = false;
 
+// The filemarker used to separate filenames from subfunction names
+char Vfilemarker = '>';
+
 static void
 do_input_echo (const std::string& input_string)
 {
   int do_echo = reading_script_file ?
     (Vecho_executing_commands & ECHO_SCRIPTS)
       : (Vecho_executing_commands & ECHO_CMD_LINE) && ! forced_interactive;
 
   if (do_echo)
@@ -1328,13 +1331,51 @@ Undocumented internal function.\n\
   else if (nargin == 1)
     Vgud_mode = args(0).bool_value ();
   else
     print_usage ();
 
   return retval;
 }
 
+DEFUN (filemarker, args, nargout,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} filemarker ()\n\
+Returns or sets the character used to separate filename from the\n\
+the subfunction names contained within the file. This can be used in\n\
+a generic manner to interact with subfunctions. For example\n\
+\n\
+@example\n\
+help ([\"myfunc\", filemarker, \"mysubfunc\"])\n\
+@end example\n\
+\n\
+@noindent\n\
+returns the help string associated with the sub-function @code{mysubfunc}\n\
+of the function @code{myfunc}. Another use of @code{filemarker} is when\n\
+debugging it allows easier placement of breakpoints within sub-functions.\n\
+For example\n\
+\n\
+@example\n\
+dbstop ([\"myfunc\", filemarker, \"mysubfunc\"])\n\
+@end example\n\
+\n\
+@noindent\n\
+will set a breakpoint at the first line of the subfunction @code{mysubfunc}.\n\
+@end deftypefn")
+{
+  char tmp = Vfilemarker;
+  octave_value retval = SET_INTERNAL_VARIABLE (filemarker);
+
+  // The character passed must not be a legal character for a function name
+  if (! error_state && (::isalnum (Vfilemarker) || Vfilemarker == '_'))
+    {
+      Vfilemarker = tmp;
+      error ("filemarker: character can not be a valid character for a function name");
+    }
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/input.h b/src/input.h
--- a/src/input.h
+++ b/src/input.h
@@ -99,16 +99,18 @@ extern std::string gnu_readline (const s
 extern void initialize_command_input (void);
 
 extern bool octave_yes_or_no (const std::string& prompt);
 
 extern octave_value do_keyboard (const octave_value_list& args = octave_value_list ());
 
 extern std::string VPS4;
 
+extern char Vfilemarker;
+
 enum echo_state
 {
   ECHO_OFF = 0,
   ECHO_SCRIPTS = 1,
   ECHO_FUNCTIONS = 2,
   ECHO_CMD_LINE = 4
 };
 
diff --git a/src/pt-bp.h b/src/pt-bp.h
--- a/src/pt-bp.h
+++ b/src/pt-bp.h
@@ -161,20 +161,19 @@ tree_breakpoint : public tree_walker
 extern bool octave_debug_on_interrupt_state;
 
 #define MAYBE_DO_BREAKPOINT \
   do \
     { \
       octave_function *xfcn = octave_call_stack::current (); \
  \
       if (octave_debug_on_interrupt_state \
-	  || (tree::break_next >= 0 && tree::last_line == 0) \
 	  || (tree::break_next >= 0 \
-	      && xfcn == tree::break_function \
-	      && tree::last_line != line ()) \
+	      && (tree::break_function == 0 || tree::break_function == xfcn) \
+	      && (tree::last_break_function != xfcn || tree::last_line != line ())) \
 	  || is_breakpoint ()) \
         { \
 	  if (!octave_debug_on_interrupt_state && tree::break_next > 0) \
 	    { \
 	      tree::break_next--; \
 	      if (tree::last_line > 0) \
 		tree::last_line = line(); \
 	    } \
diff --git a/src/pt.cc b/src/pt.cc
--- a/src/pt.cc
+++ b/src/pt.cc
@@ -35,16 +35,19 @@ along with Octave; see the file COPYING.
 
 // If zero, stop executing at the next possible point.
 int tree::break_next = -1;
 
 // The line where dbnext was executed.
 int tree::last_line = 0;
 
 // The function where the last breakpoint occurred.
+const octave_function *tree::last_break_function = 0;
+
+// The function where the next breakpoint is request.
 const octave_function *tree::break_function = 0;
 
 // The statement where the last breakpoint occurred.
 const tree *tree::break_statement = 0;
 
 // Hide the details of the string buffer so that we are less likely to
 // create a memory leak.
 
diff --git a/src/pt.h b/src/pt.h
--- a/src/pt.h
+++ b/src/pt.h
@@ -67,16 +67,19 @@ public:
 
   // If true, stop executing at the next possible point.
   static int break_next;
   
   // The line where dbnext was executed.
   static int last_line; 
 
   // The function where the last breakpoint occurred.
+  static const octave_function *last_break_function;
+
+  // The function where the next breakpoint is request.
   static const octave_function *break_function;
 
   // The statement where the last breakpoint occurred.
   static const tree *break_statement;
 
 private:
 
   // The input line and column where we found the text that was
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -787,17 +787,42 @@ symbol_table::find (const std::string& n
 }
 
 octave_value
 symbol_table::find_function (const std::string& name, tree_argument_list *args,
 			     const string_vector& arg_names,
 			     octave_value_list& evaluated_args,
 			     bool& args_evaluated)
 {
-  return find (name, args, arg_names, evaluated_args, args_evaluated, true);
+  octave_value retval;
+  size_t pos = name.find_first_of (Vfilemarker);
+
+  if (pos == NPOS)
+    retval = find (name, args, arg_names, evaluated_args, args_evaluated, true);
+  else
+    {
+      std::string fcn_scope = name.substr(0, pos);
+      scope_id stored_scope = xcurrent_scope;
+      xcurrent_scope = xtop_scope;
+      octave_value parent = find_function (name.substr(0, pos));
+      if (parent.is_defined ())
+	{
+	  octave_function *parent_fcn = parent.function_value ();
+	  if (parent_fcn)
+	    {
+	      xcurrent_scope = parent_fcn->scope ();
+	      if (xcurrent_scope > 1)
+		retval = find_function (name.substr (pos + 1), args, arg_names, 
+					evaluated_args, args_evaluated);
+	    }
+	}
+      xcurrent_scope = stored_scope;
+    }
+
+  return retval;
 }
 
 void
 symbol_table::dump (std::ostream& os, scope_id scope)
 {
   if (scope == xglobal_scope)
     dump_global (os);
   else
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -208,17 +208,21 @@ octave_call_stack::do_backtrace (int n) 
 	  scope(k) = elt.scope;
 	  context(k) = elt.context;
 
 	  octave_function *f = elt.fcn;
 
 	  if (f)
 	    {
 	      file(k) = f->fcn_file_name ();
-	      name(k) = f->name ();
+	      std::string parent_fcn_name = f->parent_fcn_name ();
+	      if (parent_fcn_name == std::string ())
+		name(k) = f->name ();
+	      else
+		name(k) = f->parent_fcn_name () + Vfilemarker + f->name ();
 
 	      tree_statement *stmt = elt.stmt;
 
 	      if (stmt)
 		{
 		  line(k) = stmt->line ();
 		  column(k) = stmt->column ();
 		}
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -430,17 +430,24 @@ fcn_file_in_path (const std::string& nam
 	  file_stat fs (name);
 
 	  if (fs.exists ())
 	    retval = name;
 	}
       else if (len > 2 && name [len - 2] == '.' && name [len - 1] == 'm')
 	retval = load_path::find_fcn_file (name.substr (0, len-2));
       else
-	retval = load_path::find_fcn_file (name);
+	{
+	  std::string fname = name;
+	  size_t pos = name.find_first_of (Vfilemarker);
+	  if (pos != NPOS)
+	    fname = name.substr (0, pos);
+
+	  retval = load_path::find_fcn_file (fname);
+	}
     }
 
   return retval;
 }
 
 // See if there is a .oct file in the path.  If so, return the
 // full path to the file.
 
