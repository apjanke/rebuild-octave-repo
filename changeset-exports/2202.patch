# HG changeset patch
# User jwe
# Date 832140475 0
#      Wed May 15 06:07:55 1996 +0000
# Node ID 31b62b7c5d2df6152e81c77930b0b794ea23dda9
# Parent  e5db2ea7f7c81ad1ac4a184ddb3d9176729408f9
[project @ 1996-05-15 06:07:11 by jwe]

diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -35,35 +35,44 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_UNISTD_H
 #include <sys/types.h>
 #include <unistd.h>
 #endif
 
 #include "str-vec.h"
 
+#include "defaults.h"
 #include "defun.h"
 #include "dirfns.h"
 #include "error.h"
+#include "gripes.h"
 #include "help.h"
 #include "input.h"
 #include "oct-obj.h"
 #include "pager.h"
 #include "pathsearch.h"
 #include "pt-const.h"
 #include "pt-exp.h"
 #include "pt-pr-code.h"
 #include "sighandlers.h"
 #include "symtab.h"
 #include "toplev.h"
 #include "unwind-prot.h"
-#include "user-prefs.h"
 #include "utils.h"
 #include "variables.h"
 
+// Name of the info file specified on command line.
+// (--info-file file)
+string Vinfo_file;
+
+// Name of the info reader we'd like to use.
+// (--info-program program)
+string Vinfo_prog;
+
 // If TRUE, don't print additional help message in help and usage
 // functions.
 static bool Vsuppress_verbose_help_message;
 
 static help_list operators[] =
 {
   { "!",
     "Logical not operator.  See also `~'.\n", },
@@ -478,31 +487,30 @@ simple_help (void)
 
   LIST_SYMBOLS (symbol_def::BUILTIN_VARIABLE, "builtin variables");
 
   // Also need to list variables and currently compiled functions from
   // the symbol table, if there are any.
 
   // Also need to search octave_path for script files.
 
-  dir_path p (user_pref.loadpath);
+  dir_path p (Vload_path);
 
   string_vector dirs = p.all_directories ();
 
   int len = dirs.length ();
 
   for (int i = 0; i < len; i++)
     {
       string_vector names = get_fcn_file_names (dirs[i]);
 
       if (! names.empty ())
 	{
 	  octave_stdout << "\n*** function files in "
-			<< make_absolute (dirs[i],
-					  the_current_working_directory)
+			<< make_absolute (dirs[i], Vcurrent_directory)
 			<< ":\n\n";
 
 	  names.list_in_columns (octave_stdout);
 	}
     }
 
   additional_help_message (octave_stdout);
 }
@@ -515,19 +523,19 @@ try_info (const string& nm)
 
   static char *cmd_str = 0;
 
   delete [] cmd_str;
   cmd_str = 0;
 
   ostrstream cmd_buf;
 
-  cmd_buf << user_pref.info_prog << " --file " << user_pref.info_file;
+  cmd_buf << Vinfo_prog << " --file " << Vinfo_file;
 
-  string directory_name = user_pref.info_file;
+  string directory_name = Vinfo_file;
   size_t pos = directory_name.rfind ('/');
 
   if (pos != NPOS)
     {
       directory_name.resize (pos + 1);
       cmd_buf << " --directory " << directory_name;
     }
 
@@ -901,19 +909,61 @@ static int
 suppress_verbose_help_message (void)
 {
   Vsuppress_verbose_help_message
     = check_preference ("suppress_verbose_help_message");
 
   return 0;
 }
 
+static int
+info_file (void)
+{
+  int status = 0;
+
+  string s = builtin_string_variable ("INFO_FILE");
+
+  if (s.empty ())
+    {
+      gripe_invalid_value_specified ("INFO_FILE");
+      status = -1;
+    }
+  else
+    Vinfo_file = s;
+
+  return status;
+}
+
+static int
+info_prog (void)
+{
+  int status = 0;
+
+  string s = builtin_string_variable ("INFO_PROGRAM");
+
+  if (s.empty ())
+    {
+      gripe_invalid_value_specified ("INFO_PROGRAM");
+      status = -1;
+    }
+  else
+    Vinfo_prog = s;
+
+  return status;
+}
+
 void
 symbols_of_help (void)
 {
+  DEFVAR (INFO_FILE, Vinfo_file, 0, info_file,
+    "name of the Octave info file");
+
+  DEFVAR (INFO_PROGRAM, Vinfo_prog, 0, info_prog,
+    "name of the Octave info reader");
+
 #ifdef USE_GNU_INFO
   DEFVAR (suppress_verbose_help_message, 0.0, 0, suppress_verbose_help_message,
     "suppress printing of message pointing to additional help in the\n\
 help and usage functions");
 #endif
 }
 
 /*
diff --git a/src/help.h b/src/help.h
--- a/src/help.h
+++ b/src/help.h
@@ -42,16 +42,24 @@ extern help_list *operator_help (void);
 extern help_list *keyword_help (void);
 
 extern void print_usage (const string& nm, int just_usage = 0);
 
 extern int help_from_list (ostrstream& output_buf,
 			   const help_list *list, const string& nm,
 			   int usage);
 
+// Name of the info file specified on command line.
+// (--info-file file)
+extern string Vinfo_file;
+
+// Name of the info reader we'd like to use.
+// (--info-program program)
+extern string Vinfo_prog;
+
 extern void symbols_of_help (void);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/pt-fcn.cc b/src/pt-fcn.cc
--- a/src/pt-fcn.cc
+++ b/src/pt-fcn.cc
@@ -25,31 +25,31 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream.h>
 
+#include "defaults.h"
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "pager.h"
 #include "symtab.h"
 #include "toplev.h"
 #include "pt-const.h"
 #include "pt-exp.h"
 #include "pt-fcn.h"
 #include "pt-misc.h"
 #include "pt-pr-code.h"
 #include "pt-walk.h"
 #include "unwind-prot.h"
-#include "user-prefs.h"
 #include "utils.h"
 #include "variables.h"
 
 // If TRUE, variables returned from functions have default values even
 // if they are not explicitly initialized.
 static bool Vdefine_all_return_values;
 
 // If TRUE, the last computed value is returned from functions that
@@ -150,19 +150,17 @@ tree_function::mark_as_system_fcn_file (
       //
       // We probably also don't need to get the library directory
       // every time, but since this function is only called when the
       // function file is parsed, it probably doesn't matter that
       // much.
 
       string ff_name = fcn_file_in_path (file_name);
 
-      string system_dir = octave_fcn_file_dir ();
-
-      if (system_dir.compare (ff_name, 0, system_dir.length ()) == 0)
+      if (Vfcn_file_dir.compare (ff_name, 0, Vfcn_file_dir.length ()) == 0)
 	system_fcn_file = 1;
     }
   else
     system_fcn_file = 0;
 }
 
 bool
 tree_function::takes_varargs (void) const
@@ -332,18 +330,17 @@ tree_function::eval (bool /* print */, i
 
   // The following code is in a separate scope to avoid warnings from
   // G++ about `goto abort' crossing the initialization of some
   // variables.
 
   {
     bind_nargin_and_nargout (nargin, nargout);
 
-    bool echo_commands
-      = (user_pref.echo_executing_commands & ECHO_FUNCTIONS);
+    bool echo_commands = (Vecho_executing_commands & ECHO_FUNCTIONS);
 
     if (echo_commands)
       print_code_function_header ();
 
     // Evaluate the commands that make up the function.
 
     bool pf = ! Vsilent_functions;
     octave_value last_computed_value = cmd_list->eval (pf);
