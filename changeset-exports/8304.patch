# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1225436774 -3600
#      Fri Oct 31 08:06:14 2008 +0100
# Node ID eeaee297c0dad301cbcbdef637f7a53b452127f7
# Parent  b11c31849b449448fd82e116e563df0fb69e46d6
modify optimset & implement optimget

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+2008-10-31  Jaroslav Hajek  <highegg@gmail.com>
+
+	* optimization/optimset.m: Don't include empty options in option
+	structure.
+	* optimization/optimget.m: New function file.
+	* optimization/Makefile.in: Add it.
+	* optimization/lsqnonneg.m: Query options using optimget.
+
 2008-10-31  Jaroslav Hajek <highegg@gmail.com>
 
 	* linear-algebra/__norm__.m: Remove.
 
 2008-10-31  David Bateman  <dbateman@free.fr>
 
 	* plot/__contour__.m: Exclude infinite values when calculating contour
 	levels.
diff --git a/scripts/optimization/Makefile.in b/scripts/optimization/Makefile.in
--- a/scripts/optimization/Makefile.in
+++ b/scripts/optimization/Makefile.in
@@ -33,16 +33,17 @@ INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 SOURCES = \
   __fsolve_defopts__.m \
   glpk.m \
   glpkmex.m \
   lsqnonneg.m \
   optimset.m \
+  optimget.m \
   qp.m \
   sqp.m
 
 EXTRAS = glpktest1 glpktest2
 
 DISTFILES = $(addprefix $(srcdir)/, Makefile.in $(SOURCES))
 
 FCN_FILES = $(addprefix $(srcdir)/, $(SOURCES))
diff --git a/scripts/optimization/lsqnonneg.m b/scripts/optimization/lsqnonneg.m
--- a/scripts/optimization/lsqnonneg.m
+++ b/scripts/optimization/lsqnonneg.m
@@ -62,43 +62,40 @@
 function [x, resnorm, residual, exitflag, output, lambda] = lsqnonneg (c, d, x = [], options = [])
 
   ## Lawson-Hanson Step 1 (LH1): initialize the variables.
   if (isempty (x))
     ## Initial guess is 0s.
     x = zeros (columns (c), 1);
   endif
 
-  if (isempty (options))
-    ## FIXME: what are the correct defaults?
-    options = optimset ("maxiter", 1e5, "tolx", 1e-8);
-  endif
+  MaxIter = optimget (options, "MaxIter", 1e5);
 
   ## Initialize the values.
   p = [];
   z = 1:numel (x);
   ## LH2: compute the gradient.
   w = c'*(d - c*x);
 
   iter = 0;
   ## LH3: test for completion.
-  while (! isempty (z) && any (w(z) > 0) && iter < options.MaxIter)
+  while (! isempty (z) && any (w(z) > 0) && iter < MaxIter)
     ## LH4: find the maximum gradient.
     idx = find (w == max (w));
     if (numel (idx) > 1)
       warning ("lsqnonneg:nonunique",
                "A non-unique solution may be returned due to equal gradients.");
       idx = idx(1);
     endif
     ## LH5: move the index from Z to P.
     z(z == idx) = [];
     p(end+1) = idx;
 
     newx = false;
-    while (! newx && iter < options.MaxIter)
+    while (! newx && iter < MaxIter)
       iter++;
 
       ## LH6: compute the positive matrix and find the min norm solution
       ## of the positive problem.
       cpos = c;
       cpos(:,z) = 0;
       ## Find min norm solution to the positive matrix.
       [cpos_q, cpos_r] = qr (cpos, 0);
@@ -127,17 +124,17 @@ function [x, resnorm, residual, exitflag
   ## Generate the additional output arguments.
   if (nargout > 1)
     resnorm = norm (C*x-d) ^ 2;
   endif
   if (nargout > 2)
     residual = d-C*x;
   endif
   exitflag = iter;
-  if (nargout > 3 && iter >= options.MaxIter)
+  if (nargout > 3 && iter >= MaxIter)
     exitflag = 0;
   endif
   if (nargout > 4)
     output = struct ("algorithm", "nnls", "iterations", iter);
   endif
   if (nargout > 5)
     ## FIXME
     error ("lsqnonneg: lambda is not yet implemented");
diff --git a/scripts/optimization/optimget.m b/scripts/optimization/optimget.m
new file mode 100644
--- /dev/null
+++ b/scripts/optimization/optimget.m
@@ -0,0 +1,39 @@
+## Copyright (C) 2008 Jaroslav Hajek <highegg@gmail.com>
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {} optimget (@var{options}, @var{parname})
+## @deftypefn {Function File} {} optimget (@var{options}, @var{parname}, @var{default})
+## Used to retrieve a specific option from a structure created by 
+## @code{optimset}. If @var{parname} is not a field of the @var{options}
+## structure, return @var{default} if supplied, otherwise return an 
+## empty matrix.
+## @end deftypefn
+
+function retval = optimget (options, parname, default)
+
+  if (isfield (options, parname))
+    retval = options.(parname);
+  elseif (nargin > 2)
+    retval = default;
+  else
+    retval = [];
+  endif
+
+endfunction
+
diff --git a/scripts/optimization/optimset.m b/scripts/optimization/optimset.m
--- a/scripts/optimization/optimset.m
+++ b/scripts/optimization/optimset.m
@@ -40,28 +40,26 @@ function retval = optimset (varargin)
   };
 
   if (nargs == 0)
     if (nargout == 0)
       ## Display possibilities.
       tmp = opts';
       disp (struct (tmp{:}));
     else
-      ## Return structure with empty values.
-      t1 = opts(:,1)';
-      t2 = cell (size (t1));
-      tmp = [t1; t2];
-      retval = struct (tmp{:});
+      ## Return empty structure.
+      ## We're incompatible with Matlab at this point.
+      retval = struct ();
     endif
   elseif (nargs == 1 && ischar (varargin{1}))
     ## Return defaults for named function.
     fcn = varargin{1};
     optfcn = sprintf ("__%s_defopts__", fcn);
     if (exist (optfcn))
-      retval = optimset (optimset (), feval (optfcn));
+      retval = optimset (struct (), feval (optfcn));
     else
       error ("no defaults for function `%s'", fcn);
     endif
   elseif (nargs == 2 && isstruct (varargin{1}) && isstruct (varargin{2}))
     ## Set slots in old from nonempties in new.  Should we be checking
     ## to ensure that the field names are expected?
     old = varargin{1};
     new = varargin{2};
@@ -75,14 +73,14 @@ function retval = optimset (varargin)
     endfor
     retval = old;
   elseif (rem (nargs, 2) && isstruct (varargin{1}))
     ## Set values in old from name/value pairs.
     retval = optimset (varargin{1}, struct (varargin{2:end}));
   elseif (rem (nargs, 2) == 0)
     ## Create struct.  Default values are replaced by those specified by
     ## name/value pairs.
-    retval = optimset (optimset (), struct (varargin{:}));
+    retval = optimset (struct (), struct (varargin{:}));
   else
     print_usage ();
   endif
 
 endfunction
