# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1549711466 -3600
#      Sat Feb 09 12:24:26 2019 +0100
# Node ID 24e11ee4fe4505e7fee44a35975d522a11220e5e
# Parent  4a11a8ae0a04cd952350470880bb54b89cfaa56a
Improve calculation of zlim and aspect ratios for 2d objects (bug #55634).

* graphics.in.h (line::properties): Always include zlim of line in axes zlim
  calculation.
* graphics.cc (check_limit_vals): Use default limits for objects without extent.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -303,16 +303,29 @@ default_data (void)
 
   retval(0) = 0;
   retval(1) = 1;
 
   return retval;
 }
 
 static Matrix
+default_data_lim (void)
+{
+  Matrix retval (1, 4);
+
+  retval(0) = 0;
+  retval(1) = 1;
+  retval(2) = 1;  // minimum positive
+  retval(3) = -octave::numeric_limits<double>::Inf (); // maximum negative
+
+  return retval;
+}
+
+static Matrix
 default_image_cdata (void)
 {
   Matrix m (64, 64);
 
   int i = 0;
   for (int col = 0; col < 64; col++)
     for (int row = 0; row < 64; row++)
       {
@@ -7200,41 +7213,45 @@ check_limit_vals (double& min_val, doubl
 }
 */
 
 static void
 check_limit_vals (double& min_val, double& max_val,
                   double& min_pos, double& max_neg,
                   const octave_value& data)
 {
+  Matrix m;
+
   if (data.is_matrix_type ())
-    {
-      Matrix m = data.matrix_value ();
-
-      if (m.numel () == 4)
-        {
-          double val;
-
-          val = m(0);
-          if (octave::math::isfinite (val) && val < min_val)
-            min_val = val;
-
-          val = m(1);
-          if (octave::math::isfinite (val) && val > max_val)
-            max_val = val;
-
-          val = m(2);
-          if (octave::math::isfinite (val) && val > 0 && val < min_pos)
-            min_pos = val;
-
-          val = m(3);
-          if (octave::math::isfinite (val) && val < 0 && val > max_neg)
-            max_neg = val;
-        }
-    }
+    m = data.matrix_value ();
+
+  if (m.numel () != 4)
+    {
+      m = Matrix (1, 4, 0.0);
+      m(2) = octave::numeric_limits<double>::Inf ();
+      m(3) = -octave::numeric_limits<double>::Inf ();
+    }
+
+  double val;
+
+  val = m(0);
+  if (octave::math::isfinite (val) && val < min_val)
+    min_val = val;
+
+  val = m(1);
+  if (octave::math::isfinite (val) && val > max_val)
+    max_val = val;
+
+  val = m(2);
+  if (octave::math::isfinite (val) && val > 0 && val < min_pos)
+    min_pos = val;
+
+  val = m(3);
+  if (octave::math::isfinite (val) && val < 0 && val > max_neg)
+    max_neg = val;
 }
 
 // magform(x) Returns (a, b),
 // where x = a * 10^b, abs (a) >= 1., and b is integer.
 
 static void
 magform (double x, double& a, int& b)
 {
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -4241,22 +4241,22 @@ public:
       row_vector_property xdata u , default_data ()
       string_property xdatasource , ""
       row_vector_property ydata u , default_data ()
       string_property ydatasource , ""
       row_vector_property zdata u , Matrix ()
       string_property zdatasource , ""
 
       // hidden properties for limit computation
-      row_vector_property xlim hlr , Matrix ()
-      row_vector_property ylim hlr , Matrix ()
+      row_vector_property xlim hlr , default_data_lim ()
+      row_vector_property ylim hlr , default_data_lim ()
       row_vector_property zlim hlr , Matrix ()
       bool_property xliminclude hl , "on"
       bool_property yliminclude hl , "on"
-      bool_property zliminclude hl , "off"
+      bool_property zliminclude hl , "on"
     END_PROPERTIES
 
   protected:
     void init (void)
     {
       linewidth.add_constraint ("min", 0, false);
       markersize.add_constraint ("min", 0, false);
     }
@@ -4264,21 +4264,17 @@ public:
   private:
     Matrix compute_xlim (void) const;
     Matrix compute_ylim (void) const;
 
     void update_xdata (void) { set_xlim (compute_xlim ()); }
 
     void update_ydata (void) { set_ylim (compute_ylim ()); }
 
-    void update_zdata (void)
-    {
-      set_zlim (zdata.get_limits ());
-      set_zliminclude (get_zdata ().numel () > 0);
-    }
+    void update_zdata (void) { set_zlim (zdata.get_limits ()); }
   };
 
 private:
   properties xproperties;
 
 public:
   line (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
