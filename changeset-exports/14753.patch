# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1339260695 -7200
#      Sat Jun 09 18:51:35 2012 +0200
# Branch gui
# Node ID c30916f904fb2066c5be988cb86d827f83a7569c
# Parent  564cc673bcc5efd8160ff04b007a4a45e3e8c9ee
Fixed controlling debugger from within the GUI.

* octave-event.h: Adjusted events with calls to the octave interpreter.

diff --git a/gui/src/octave-adapter/octave-event.h b/gui/src/octave-adapter/octave-event.h
--- a/gui/src/octave-adapter/octave-event.h
+++ b/gui/src/octave-adapter/octave-event.h
@@ -18,16 +18,18 @@
 #ifndef OCTAVEEVENT_H
 #define OCTAVEEVENT_H
 
 #include <string>
 #include "octave-event-observer.h"
 #include "oct-env.h"
 #include "pt-eval.h"
 #include "toplev.h"
+#include "parse.h"
+#include "debug.h"
 
 #include <readline/readline.h>
 
 /**
   * \class octave_event
   * \brief Base class for an octave event.
   * In order to make communication with octave threadsafe, comunication is
   * implemented via events. An application may create events and post them,
@@ -46,153 +48,181 @@ class octave_event
     { }
 
     virtual ~octave_event ()
     { }
 
     /** Performs what is necessary to make this event happen.
       * This code is thread-safe since it will be executed in the octave thread.
       * However, you should take care to keep this code as short as possible. */
-    virtual bool perform () const = 0;
+    virtual bool perform () = 0;
 
     /**
       * Accepts this event. This allows the event observer to react properly
       * onto the event.
       */
     void accept ()
     { _octave_event_observer.event_accepted (this); }
 
     /**
       * Rejects this event. This allows the event observer to react properly
       * onto the event.
       */
     void reject ()
     { _octave_event_observer.event_reject (this); }
 
+  protected:
+    void call_octave_function (std::string name,
+                               const octave_value_list& args = octave_value_list (),
+                               int nargout = 0)
+    {
+      try
+      {
+        feval (name, args, nargout);
+      } catch (...) { } // Ignore exceptions. Crashes without that.
+    }
+
+    void finish_readline_event () const
+    {
+      rl_line_buffer[0] = '\0';
+      rl_point = rl_end = 0;
+      rl_done = 1;
+      //rl_forced_update_display ();
+    }
+
   private:
     octave_event_observer& _octave_event_observer;
 };
 
 class octave_update_history_event : public octave_event
 {
   public:
     /** Creates a new octave_exit_event. */
     octave_update_history_event (octave_event_observer& o)
       : octave_event (o)
     { }
 
-    bool perform () const
+    bool perform ()
     { return true; /* Always grant. */ }
 };
 
 class octave_update_workspace_event : public octave_event
 {
   public:
     /** Creates a new octave_exit_event. */
     octave_update_workspace_event (octave_event_observer& o)
       : octave_event (o)
     { }
 
-    bool perform () const
+    bool perform ()
     { return true; /* Always grant. */ }
 };
 
 /** Implements an octave exit event. */
 class octave_exit_event : public octave_event
 {
   public:
     /** Creates a new octave_exit_event. */
     octave_exit_event (octave_event_observer& o)
       : octave_event (o)
     { }
 
-    bool perform () const
+    bool perform ()
     { clean_up_and_exit (0); return true; }
 };
 
 /** Implements a change directory events. */
 class octave_change_directory_event : public octave_event
 {
   public:
     /** Creates a new octave_change_directory_event. */
     octave_change_directory_event (octave_event_observer& o,
                                    std::string directory)
       : octave_event (o)
     { _directory = directory; }
 
-    bool perform () const
+    bool perform ()
     { return octave_env::chdir (_directory); }
 
   private:
     std::string _directory;
 };
 
 class octave_debug_step_into_event : public octave_event
 {
   public:
     /** Creates a new octave_debug_step_into_event. */
     octave_debug_step_into_event (octave_event_observer& o)
       : octave_event (o) { }
 
-    bool perform () const
+    bool perform ()
     {
-      tree_evaluator::dbstep_flag = -1;
+      octave_value_list args;
+      args.append (octave_value ("in"));
+      call_octave_function ("dbstep", args);
+      finish_readline_event ();
       return true;
     }
 };
 
 class octave_debug_step_over_event : public octave_event
 {
   public:
     /** Creates a new octave_debug_step_over_event. */
     octave_debug_step_over_event (octave_event_observer& o)
       : octave_event (o) { }
 
-    bool perform () const
+    bool perform ()
     {
-      tree_evaluator::dbstep_flag = 1;
+      call_octave_function ("dbnext");
+      finish_readline_event ();
       return true;
     }
 };
 
 class octave_debug_step_out_event : public octave_event
 {
   public:
     /** Creates a new octave_debug_step_out_event. */
     octave_debug_step_out_event (octave_event_observer& o)
       : octave_event (o) { }
 
-    bool perform () const
+    bool perform ()
     {
-      tree_evaluator::dbstep_flag = -2;
+      octave_value_list args;
+      args.append (octave_value ("out"));
+      call_octave_function ("dbstep", args);
+      finish_readline_event ();
       return true;
     }
 };
 
 class octave_debug_continue_event : public octave_event
 {
   public:
     /** Creates a new octave_debug_step_out_event. */
     octave_debug_continue_event (octave_event_observer& o)
       : octave_event (o) { }
 
-    bool perform () const
+    bool perform ()
     {
-      tree_evaluator::dbstep_flag = 0;
+      call_octave_function ("dbcont");
+      finish_readline_event ();
       return true;
     }
 };
 
 class octave_debug_quit_event : public octave_event
 {
   public:
     /** Creates a new octave_debug_step_out_event. */
     octave_debug_quit_event (octave_event_observer& o)
       : octave_event (o) { }
 
-    bool perform () const
+    bool perform ()
     {
-      tree_evaluator::dbstep_flag = 0;
+      call_octave_function ("dbquit");
+      finish_readline_event ();
       return true;
     }
 };
 
 #endif // OCTAVEEVENT_H
