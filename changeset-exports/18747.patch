# HG changeset patch
# User Sergey Plotnikov <seryozha.plotnikov@gmail.com>
# Date 1399853650 25200
#      Sun May 11 17:14:10 2014 -0700
# Node ID 9eb72fa5f8b5b2fb19e3f49261abebe1d7034929
# Parent  56bff71de2ca9a968ab85975a1239636ff7118b2
datevec.m: Return value with same shape as input (bug #42334).

datevec.m: If input is not a row vector, record size of input and restore with
reshape at end of function.  Add input validation tests.

diff --git a/scripts/time/datevec.m b/scripts/time/datevec.m
--- a/scripts/time/datevec.m
+++ b/scripts/time/datevec.m
@@ -108,16 +108,18 @@ function [y, m, d, h, mi, s] = datevec (
   if (isempty (f))
     f = -1;
   endif
 
   if (isempty (p))
     p = (localtime (time ())).year + 1900 - 50;
   endif
 
+  do_resize = false;
+
   if (iscell (date))
 
     nd = numel (date);
 
     y = m = d = h = mi = s = zeros (nd, 1);
 
     if (f == -1)
       for k = 1:nd
@@ -141,16 +143,20 @@ function [y, m, d, h, mi, s] = datevec (
         if (! found)
           error ("datevec: DATE not parsed correctly with given format");
         endif
       endfor
     endif
 
   else   # datenum input
 
+    if (! isrow (date))
+      date_sz = size (date);
+      do_resize = true;
+    endif
     date = date(:);
 
     ## Move day 0 from midnight -0001-12-31 to midnight 0000-3-1
     z = floor (date) - 60;
     ## Calculate number of centuries; K1 = 0.25 is to avoid rounding problems.
     a = floor ((z - 0.25) / 36524.25);
     ## Days within century; K2 = 0.25 is to avoid rounding problems.
     b = z - 0.25 + a - floor (a / 4);
@@ -177,16 +183,23 @@ function [y, m, d, h, mi, s] = datevec (
     s = s - 3600 * h;
     mi = floor (s / 60);
     s = s - 60 * mi;
 
   endif
 
   if (nargout <= 1)
     y = [y, m, d, h, mi, s];
+  elseif (do_resize)
+    y = reshape (y, date_sz);
+    m = reshape (m, date_sz);
+    d = reshape (d, date_sz);
+    h = reshape (h, date_sz);
+    mi = reshape (mi, date_sz);
+    s = reshape (s, date_sz);
   endif
 
 endfunction
 
 function [f, rY, ry, fy, fm, fd, fh, fmi, fs] = __date_vfmt2sfmt__ (f)
 
   ## Play safe with percent signs.
   f = strrep (f, "%", "%%");
@@ -301,17 +314,28 @@ endfunction
 %!assert (datevec ("09/07/00"), [2000,9,7,0,0,0])
 %!assert (datevec ("09/13"), [yr,9,13,0,0,0])
 %!assert (datevec ("15:38:09"), [yr,1,1,15,38,9])
 %!assert (datevec ("3:38:09 PM"), [yr,1,1,15,38,9])
 %!assert (datevec ("15:38"), [yr,1,1,15,38,0])
 %!assert (datevec ("03:38 PM"), [yr,1,1,15,38,0])
 %!assert (datevec ("03/13/1962"), [1962,3,13,0,0,0])
 
-%% Test millisecond format FFF
+## Test millisecond format FFF
 %!assert (datevec ("15:38:21.25", "HH:MM:SS.FFF"), [yr,1,1,15,38,21.025])
 
-# Other tests
+## Test structure of return value (bug #42334)
+%!test
+%! [~, ~, d] = datevec ([1 2; 3 4]);
+%! assert (d, [1 2; 3 4]);
+
+## Other tests
 %!assert (datenum (datevec ([-1e4:1e4])), [-1e4:1e4]');
 %!test
 %! t = linspace (-2e5, 2e5, 10993);
 %! assert (all (abs (datenum (datevec (t)) - t') < 1e-5));
 
+%% Test input validation
+%!error datevec ()
+%!error datevec (1,2,3,4)
+%!error <none of the standard formats match> datevec ("foobar")
+%!error <DATE not parsed correctly with given format> datevec ("foobar", "%d")
+
