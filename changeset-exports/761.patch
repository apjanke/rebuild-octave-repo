# HG changeset patch
# User jwe
# Date 781136565 0
#      Sun Oct 02 22:22:45 1994 +0000
# Node ID f0133cd328521939765c1d59fe8b79a354e03df9
# Parent  b284388e8999817faf7ccf085b0eb6c923d3dfbc
[project @ 1994-10-02 22:22:45 by jwe]

diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -139,20 +139,19 @@ initialize_file_io (void)
 
   file_list.append (octave_stdin);
   file_list.append (octave_stdout);
   file_list.append (octave_stderr);
 
   file_count = 3;
 }
 
-/*
- * Given a file name or number, return a pointer to the corresponding
- * open file.  If the file has not already been opened, return NULL.
- */
+// Given a file name or number, return a pointer to the corresponding
+// open file.  If the file has not already been opened, return NULL.
+
 Pix
 return_valid_file (const tree_constant& arg)
 {
   if (arg.is_string ())
     {
       Pix p = file_list.first ();
       file_info file;
       for (int i = 0; i < file_count; i++)
@@ -664,19 +663,18 @@ fseek_internal (const Octave_object& arg
     {
       error ("fseek: file error");
       retval(0) = 0.0; // failed
     }
 
   return retval;
 }
 
-/*
- * Tell current position of file.
- */
+// Tell current position of file.
+
 DEFUN ("ftell", Fftell, Sftell, 1, 1,
   "POSITION = ftell (FILENAME or FILENUM): returns the current file position")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin != 1)
@@ -921,56 +919,52 @@ process_printf_format (const char *s, co
   error ("%s: invalid conversion", type);
   return -1;
 
  invalid_format:
   error ("%s: invalid format", type);
   return -1;
 }
 
+// Formatted printing to a file.
 
-/*
- * Formatted printing to a file.
- */
 DEFUN ("fprintf", Ffprintf, Sfprintf, -1, 1,
   "fprintf (FILENAME or FILENUM, FORMAT, ...)")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin < 2)
     print_usage ("fprintf");
   else
     retval = do_printf ("fprintf", args, nargout);
 
   return retval;
 }
 
-/*
- * Formatted printing.
- */
+// Formatted printing.
+
 DEFUN ("printf", Fprintf, Sprintf, -1, 1,
   "printf (FORMAT, ...)")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin < 1)
     print_usage ("printf");
   else
     retval = do_printf ("printf", args, nargout);
 
   return retval;
 }
 
-/*
- * Formatted printing to a string.
- */
+// Formatted printing to a string.
+
 DEFUN ("sprintf", Fsprintf, Ssprintf, -1, 1,
   "s = sprintf (FORMAT, ...)")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin < 1)
@@ -1246,55 +1240,52 @@ process_scanf_format (const char *s, ost
     {
     invalid_format:
       warning ("%s: invalid format", type);
     }
 
   return -1;
 }
 
-/*
- * Formatted reading from a file.
- */
+// Formatted reading from a file.
+
 DEFUN ("fscanf", Ffscanf, Sfscanf, 2, -1,
   "[A, B, C, ...] = fscanf (FILENAME or FILENUM, FORMAT)")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin != 1 && nargin != 2)
     print_usage ("fscanf");
   else
     retval = do_scanf ("fscanf", args, nargout);
 
   return retval;
 }
 
-/*
- * Formatted reading.
- */
+// Formatted reading.
+
 DEFUN ("scanf", Fscanf, Sscanf, 1, -1,
   "[A, B, C, ...] = scanf (FORMAT)")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin != 1)
     print_usage ("scanf");
   else
     retval = do_scanf ("scanf", args, nargout);
 
   return retval;
 }
 
-/*
- * Formatted reading from a string.
- */
+// Formatted reading from a string.
+
 DEFUN ("sscanf", Fsscanf, Ssscanf, 2, -1,
   "[A, B, C, ...] = sscanf (STRING, FORMAT)")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin != 2)
@@ -1436,19 +1427,18 @@ do_scanf (const char *type, const Octave
     }
 
   if (tmp_file_open)
     fclose (fptr);
 
   return retval;
 }
 
-/*
- * Find out how many elements are left to read.
- */
+// Find out how many elements are left to read.
+
 static long
 num_items_remaining (FILE *fptr, char *type)
 {
   size_t size;
 
   if (strcasecmp (type, "uchar") == 0)
     size = sizeof (u_char);
   else if (strcasecmp (type, "char") == 0)
@@ -1506,39 +1496,38 @@ DEFUN ("fread", Ffread, Sfread, 3, 2,
   if (nargin < 1 || nargin > 3)
     print_usage ("fread");
   else
     retval = fread_internal (args, nargout);
 
   return retval;
 }
 
-/*
- * Read binary data from a file.
- *
- *   [data, count] = fread (fid, size, 'precision')
- *
- *     fid       : the file id from fopen
- *     size      : the size of the matrix or vector or scaler to read
- *
- *                 n	  : reads n elements of a column vector
- *                 inf	  : reads to the end of file (default)
- *                 [m, n] : reads enough elements to fill the matrix
- *                          the number of columns can be inf
- *
- *     precision : type of the element.  Can be:
- *
- *                 char, uchar, schar, short, ushort, int, uint,
- *                 long, ulong, float, double
- *
- *                 Default  is uchar.
- *
- *     data	 : output data
- *     count	 : number of elements read
- */
+// Read binary data from a file.
+//
+//   [data, count] = fread (fid, size, 'precision')
+//
+//     fid       : the file id from fopen
+//     size      : the size of the matrix or vector or scaler to read
+//
+//                 n	  : reads n elements of a column vector
+//                 inf	  : reads to the end of file (default)
+//                 [m, n] : reads enough elements to fill the matrix
+//                          the number of columns can be inf
+//
+//     precision : type of the element.  Can be:
+//
+//                 char, uchar, schar, short, ushort, int, uint,
+//                 long, ulong, float, double
+//
+//                 Default  is uchar.
+//
+//     data	 : output data
+//     count	 : number of elements read
+
 Octave_object
 fread_internal (const Octave_object& args, int nargout)
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   Pix p = file_io_get_file (args(0), "r", "fread");
@@ -1671,60 +1660,59 @@ DEFUN ("fwrite", Ffwrite, Sfwrite, 3, 1,
   if (nargin < 2 || nargin > 3)
     print_usage ("fwrite");
   else
     retval = fwrite_internal (args, nargout);
 
   return retval;
 }
 
-/*
- * Write binary data to a file.
- *
- *   count = fwrite (fid, data, 'precision')
- *
- *    fid	: file id from fopen
- *    Data	: data to be written
- *    precision	: type of output element.  Can be:
- *
- *                char, uchar, schar, short, ushort, int, uint,
- *                long, float, double
- *
- *                 Default is uchar.
- *
- *    count     : the number of elements written
- */
+// Write binary data to a file.
+//
+//   count = fwrite (fid, data, 'precision')
+//
+//    fid	: file id from fopen
+//    Data	: data to be written
+//    precision	: type of output element.  Can be:
+//
+//                char, uchar, schar, short, ushort, int, uint,
+//                long, float, double
+//
+//                 Default is uchar.
+//
+//    count     : the number of elements written
+
 Octave_object
 fwrite_internal (const Octave_object& args, int nargout)
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
-  Pix p = file_io_get_file (args(1), "a+", "fwrite");
+  Pix p = file_io_get_file (args(0), "a+", "fwrite");
 
   if (! p)
     return retval;
 
 // Get type and number of bytes per element to read.
   char *prec = "uchar";
   if (nargin > 2)
     {
-      prec = args(3).string_value ();
+      prec = args(2).string_value ();
 
       if (error_state)
 	{
 	  error ("fwrite: precision must be a specified as a string");
 	  return retval;
 	}
     }
 
   file_info file = file_list (p);
 
-  Matrix m = args(2).matrix_value ();
+  Matrix m = args(1).matrix_value ();
 
   if (! error_state)
     {
       int count = m.write (file.fptr (), prec);
 
       retval(0) = (double) count;
     }
 
@@ -1744,24 +1732,23 @@ DEFUN ("feof", Ffeof, Sfeof, 1, 1,
   if (nargin != 1)
     print_usage ("feof");
   else
     retval = feof_internal (args, nargout);
 
   return retval;
 }
 
-/*
- * Check for an EOF condition on a file opened by fopen.
- *
- *   eof = feof (fid)
- *
- *     fid : file id from fopen
- *     eof : non zero for an end of file condition
- */
+// Check for an EOF condition on a file opened by fopen.
+//
+//   eof = feof (fid)
+//
+//     fid : file id from fopen
+//     eof : non zero for an end of file condition
+
 Octave_object
 feof_internal (const Octave_object& args, int nargout)
 {
   Octave_object retval;
 
 // Get file info.
   Pix p = return_valid_file (args(1));
 
@@ -1788,25 +1775,24 @@ DEFUN ("ferror", Fferror, Sferror, 1, 1,
   if (nargin != 1)
     print_usage ("ferror");
   else
     retval = ferror_internal (args, nargout);
 
   return retval;
 }
 
-/*
- * Check for an error condition on a file opened by fopen.
- *
- *   [message, errnum] = ferror (fid)
- *
- *     fid     : file id from fopen
- *     message : system error message
- *     errnum  : error number
- */
+// Check for an error condition on a file opened by fopen.
+//
+//   [message, errnum] = ferror (fid)
+//
+//     fid     : file id from fopen
+//     message : system error message
+//     errnum  : error number
+
 Octave_object
 ferror_internal (const Octave_object& args, int nargout)
 {
   Octave_object retval;
 
 // Get file info.
   Pix p = return_valid_file (args(0));
 
