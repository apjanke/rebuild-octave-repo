# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1450214649 18000
#      Tue Dec 15 16:24:09 2015 -0500
# Node ID 359476667c4ccac13a46d08e3f57f0595b7e76e2
# Parent  03e4ddd49396c8a02b6353a9662b4421c0de3a08
* quadcc.cc: Style fixes.

diff --git a/libinterp/corefcn/quadcc.cc b/libinterp/corefcn/quadcc.cc
--- a/libinterp/corefcn/quadcc.cc
+++ b/libinterp/corefcn/quadcc.cc
@@ -29,34 +29,33 @@ along with Octave; see the file COPYING.
 
 #include "defun.h"
 #include "error.h"
 #include "oct-obj.h"
 #include "parse.h"
 #include "utils.h"
 #include "variables.h"
 
-/* Extended debugging */
+// Extended debugging.
 #define DEBUG_QUADCC 0
 
-/* Define the minimum size of the interval heap. */
+// Define the minimum size of the interval heap.
 #define min_cquad_heapsize  200
 
-
-/* Data of a single interval */
+// Data of a single interval.
 typedef struct
 {
   double a, b;
   double c[64];
   double fx[33];
   double igral, err;
   int depth, rdepth, ndiv;
 } cquad_ival;
 
-/* Some constants and matrices that we'll need.  */
+// Some constants and matrices that we'll need.
 
 static const double xi[33] =
 {
   -1., -0.99518472667219688624, -0.98078528040323044912,
   -0.95694033573220886493, -0.92387953251128675612,
   -0.88192126434835502970, -0.83146961230254523708,
   -0.77301045336273696082, -0.70710678118654752440,
   -0.63439328416364549822, -0.55557023301960222475,
@@ -1390,30 +1389,28 @@ static const double Tright[33 * 33] =
   .28867244235852488244e-7, .43982811713864556957e-6, 0., 0., 0., 0., 0.,
   0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
   0., 0., 0., 0., 0., 0., 0., 0., .46566128730773925781e-9,
   .14899342093408253335e-7, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
   0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
   0., 0., .23283064365386962891e-9
 };
 
-/* Allocates a workspace for the given maximum number of intervals.
-    Note that if the workspace gets filled, the intervals with the
-    lowest error estimates are dropped. The maximum number of
-    intervals is therefore not the maximum number of intervals
-    that will be computed, but merely the size of the buffer.
-    */
+// Allocates a workspace for the given maximum number of intervals.
+// Note that if the workspace gets filled, the intervals with the lowest
+// error estimates are dropped. The maximum number of intervals is
+// therefore not the maximum number of intervals that will be computed,
+// but merely the size of the buffer.
 
-/* Compute the product of the fx with one of the inverse
-    Vandermonde-like matrices. */
+// Compute the product of the fx with one of the inverse
+// Vandermonde-like matrices.
 
 void
 Vinvfx (const double *fx, double *c, const int d)
 {
-
   int i, j;
 
   switch (d)
     {
     case 0:
       for (i = 0; i <= 4; i++)
         {
           c[i] = 0.0;
@@ -1441,27 +1438,24 @@ Vinvfx (const double *fx, double *c, con
       for (i = 0; i <= 32; i++)
         {
           c[i] = 0.0;
           for (j = 0; j <= 32; j++)
             c[i] += V4inv[i * 33 + j] * fx[j];
         }
       break;
     }
-
 }
 
-
-/* Downdate the interpolation given by the n coefficients c
-    by removing the nodes with indices in nans. */
+// Downdate the interpolation given by the N coefficients C by removing
+// the nodes with indices in nans.
 
 void
 downdate (double *c, int n, int d, int *nans, int nnans)
 {
-
   static const int bidx[4] = { 0, 6, 16, 34 };
   double b_new[34], alpha;
   int i, j;
 
   for (i = 0; i <= n + 1; i++)
     b_new[i] = bee[bidx[d] + i];
   for (i = 0; i < nnans; i++)
     {
@@ -1474,21 +1468,19 @@ downdate (double *c, int n, int d, int *
       for (j = 0; j <= n; j++)
         b_new[j] = b_new[j + 1];
       alpha = c[n] / b_new[n];
       for (j = 0; j < n; j++)
         c[j] -= alpha * b_new[j];
       c[n] = 0;
       n--;
     }
-
 }
 
-
-/* The actual integration routine.  */
+// The actual integration routine.
 
 DEFUN (quadcc, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {} {@var{q} =} quadcc (@var{f}, @var{a}, @var{b})\n\
 @deftypefnx {} {@var{q} =} quadcc (@var{f}, @var{a}, @var{b}, @var{tol})\n\
 @deftypefnx {} {@var{q} =} quadcc (@var{f}, @var{a}, @var{b}, @var{tol}, @var{sing})\n\
 @deftypefnx {} {[@var{q}, @var{err}, @var{nr_points}] =} quadcc (@dots{})\n\
 Numerically evaluate the integral of @var{f} from @var{a} to @var{b}\n\
@@ -1550,46 +1542,45 @@ successive interpolations of the integra
 quadrature rules.\n\
 \n\
 Reference: @nospell{P. Gonnet}, @cite{Increasing the Reliability of Adaptive\n\
 Quadrature Using Explicit Interpolants}, ACM Transactions on\n\
 Mathematical Software, Vol. 37, Issue 3, Article No. 3, 2010.\n\
 @seealso{quad, quadv, quadl, quadgk, trapz, dblquad, triplequad}\n\
 @end deftypefn")
 {
-  /* Some constants that we will need. */
+  // Some constants that we will need.
   static const int n[4] = { 4, 8, 16, 32 };
   static const int skip[4] = { 8, 4, 2, 1 };
   static const int idx[4] = { 0, 5, 14, 31 };
   static const double w = M_SQRT2 / 2;
   static const int ndiv_max = 20;
 
-  /* Arguments left and right */
+  // Arguments left and right.
   int nargin = args.length ();
   octave_function *fcn;
   double a, b, tol, *sing;
 
-  /* Variables needed for transforming the integrand. */
+  // Variables needed for transforming the integrand.
   bool wrap = false;
   double xw;
 
-  /* Stuff we will need to call the integrand. */
+  // Stuff we will need to call the integrand.
   octave_value_list fargs, fvals;
 
-  /* Actual variables (as opposed to constants above). */
+  // Actual variables (as opposed to constants above).
   double m, h, ml, hl, mr, hr, temp;
   double igral, err, igral_final, err_final;
   int nivals, neval = 0;
   int i, j, d, split, t;
   int nnans, nans[33];
   cquad_ival *iv, *ivl, *ivr;
   double nc, ncdiff;
 
-
-  /* Parse the input arguments. */
+  // Parse the input arguments.
   if (nargin < 3)
     print_usage ();
 
   if (args(0).is_function_handle () || args(0).is_inline_function ())
     fcn = args(0).function_value ();
   else
     {
       std::string fcn_name = unique_symbol_name ("__quadcc_fcn__");
@@ -1613,71 +1604,65 @@ Mathematical Software, Vol. 37, Issue 3,
   if (nargin < 4 || args(3).is_empty ())
     tol = 1.0e-6;
   else if (! args(3).is_real_scalar () || args(3).double_value () <= 0)
     error ("quadcc: tolerance (TOL) must be a single real scalar > 0");
   else
     tol = args(3).double_value ();
 
   if (nargin < 5)
-    {
-      nivals = 1;
-    }
+    nivals = 1;
   else if (!(args(4).is_real_scalar () || args(4).is_real_matrix ()))
     error ("quadcc: list of singularities (SING) must be a vector of real values");
   else
-    {
-      nivals = 1 + args(4).numel ();
-    }
+    nivals = 1 + args(4).numel ();
 
   int cquad_heapsize = (nivals >= min_cquad_heapsize ? nivals + 1
                                                      : min_cquad_heapsize);
-  /* The interval heap. */
+  // The interval heap.
   OCTAVE_LOCAL_BUFFER (cquad_ival, ivals, cquad_heapsize);
   OCTAVE_LOCAL_BUFFER (double, iivals, cquad_heapsize);
   OCTAVE_LOCAL_BUFFER (int, heap, cquad_heapsize);
 
   if (nivals == 1)
     {
       iivals[0] = a;
       iivals[1] = b;
     }
   else
     {
-      // Intervals around singularities
+      // Intervals around singularities.
       sing = args(4).array_value ().fortran_vec ();
       iivals[0] = a;
       for (i = 0; i < nivals - 1; i++)
         iivals[i + 1] = sing[i];
       iivals[nivals] = b;
     }
 
-  /* If a or b are +/-Inf, transform the integral. */
+  // If a or b are +/-Inf, transform the integral.
   if (xisinf (a) || xisinf (b))
     {
       wrap = true;
       for (i = 0; i < nivals + 1; i++)
         if (xisinf (iivals[i]))
           iivals[i] = gnulib::copysign (1.0, iivals[i]);
         else
           iivals[i] = 2.0 * atan (iivals[i]) / M_PI;
     }
 
-
-  /* Initialize the heaps. */
+  // Initialize the heaps.
   for (i = 0; i < cquad_heapsize; i++)
     heap[i] = i;
 
-  /* Create the first interval(s). */
+  // Create the first interval(s).
   igral = 0.0;
   err = 0.0;
   for (j = 0; j < nivals; j++)
     {
-
-      /* Initialize the interval. */
+      // Initialize the interval.
       iv = &(ivals[heap[j]]);
       m = (iivals[j] + iivals[j + 1]) / 2;
       h = (iivals[j + 1] - iivals[j]) / 2;
       nnans = 0;
       ColumnVector ex (33);
       if (wrap)
         {
           for (i = 0; i <= n[3]; i++)
@@ -1737,65 +1722,60 @@ Mathematical Software, Vol. 37, Issue 3,
           nc += iv->c[idx[3] + i] * iv->c[idx[3] + i];
         }
       ncdiff = sqrt (ncdiff);
       nc = sqrt (nc);
       iv->err = ncdiff * 2 * h;
       if (ncdiff / nc > 0.1 && iv->err < 2 * h * nc)
         iv->err = 2 * h * nc;
 
-      /* Tabulate this interval's data. */
+      // Tabulate this interval's data.
       igral += iv->igral;
       err += iv->err;
 
-      /* Sift it up the heap. */
+      // Sift it up the heap.
       i = j;
       while (i > 0 && ivals[heap[i / 2]].err < ivals[heap[i]].err)
         {
           temp = heap[i];
           heap[i] = heap[i / 2];
           heap[i / 2] = temp;
           i /= 2;
         }
-
     }
 
-
-  /* Initialize some global values. */
+  // Initialize some global values.
   igral_final = 0.0;
   err_final = 0.0;
 
-
-  /* Main loop. */
+  // Main loop.
   while (nivals > 0 && err > 0.0 && err > fabs (igral) * tol
          && !(err_final > fabs (igral) * tol
               && err - err_final < fabs (igral) * tol))
     {
-
-      /* Allow the user to interrupt. */
+      // Allow the user to interrupt.
       OCTAVE_QUIT;
 
-      /* Put our finger on the interval with the largest error. */
+      // Put our finger on the interval with the largest error.
       iv = &(ivals[heap[0]]);
       m = (iv->a + iv->b) / 2;
       h = (iv->b - iv->a) / 2;
 
 #if (DEBUG_QUADCC)
       printf ("quadcc: processing ival %i (of %i) with [%e,%e] int=%e, err=%e, depth=%i\n",
               heap[0], nivals, iv->a, iv->b, iv->igral, iv->err, iv->depth);
 #endif
 
-      /* Should we try to increase the degree? */
+      // Should we try to increase the degree?
       if (iv->depth < 3)
         {
-
-          /* Keep tabs on some variables. */
+          // Keep tabs on some variables.
           d = ++iv->depth;
 
-          /* Get the new (missing) function values */
+          // Get the new (missing) function values.
           {
             ColumnVector ex (n[d] / 2);
             if (wrap)
               {
                 for (i = 0; i < n[d] / 2; i++)
                   ex(i) = tan (M_PI / 2 * (m + xi[(2 * i + 1) * skip[d]] * h));
               }
             else
@@ -1829,108 +1809,101 @@ Mathematical Software, Vol. 37, Issue 3,
             {
               if (! xfinite (iv->fx[i]))
                 {
                   nans[nnans++] = i;
                   iv->fx[i] = 0.0;
                 }
             }
 
-          /* Compute the new coefficients. */
+          // Compute the new coefficients.
           Vinvfx (iv->fx, &(iv->c[idx[d]]), d);
-          /* Downdate any NaNs. */
+          // Downdate any NaNs.
           if (nnans > 0)
             {
               downdate (&(iv->c[idx[d]]), n[d], d, nans, nnans);
               for (i = 0; i < nnans; i++)
                 iv->fx[nans[i]] = octave_NaN;
             }
 
-          /* Compute the error estimate. */
+          // Compute the error estimate.
           nc = 0.0;
           for (i = n[d - 1] + 1; i <= n[d]; i++)
             {
               temp = iv->c[idx[d] + i];
               nc += temp * temp;
             }
           ncdiff = nc;
           for (i = 0; i <= n[d - 1]; i++)
             {
               temp = iv->c[idx[d - 1] + i] - iv->c[idx[d] + i];
               ncdiff += temp * temp;
               nc += iv->c[idx[d] + i] * iv->c[idx[d] + i];
             }
           ncdiff = sqrt (ncdiff);
           nc = sqrt (nc);
           iv->err = ncdiff * 2 * h;
-          /* Compute the local integral. */
+          // Compute the local integral.
           iv->igral = 2 * h * w * iv->c[idx[d]];
-          /* Split the interval prematurely? */
+          // Split the interval prematurely?
           split = (nc > 0 && ncdiff / nc > 0.1);
         }
-
-      /* Maximum degree reached, just split. */
       else
         {
+          // Maximum degree reached, just split.
           split = 1;
         }
 
-
-      /* Should we drop this interval? */
+      // Should we drop this interval?
       if ((m + h * xi[0]) >= (m + h * xi[1])
           || (m + h * xi[31]) >= (m + h * xi[32])
           || iv->err < fabs (iv->igral)
                        * std::numeric_limits<double>::epsilon () * 10)
         {
-
 #if (DEBUG_QUADCC)
           printf ("quadcc: dropping ival %i (of %i) with [%e,%e] int=%e, err=%e, depth=%i\n",
                   heap[0], nivals, iv->a, iv->b, iv->igral, iv->err, iv->depth);
 #endif
 
-          /* Keep this interval's contribution */
+          // Keep this interval's contribution.
           err_final += iv->err;
           igral_final += iv->igral;
-          /* Swap with the last element on the heap */
+          // Swap with the last element on the heap.
           t = heap[nivals - 1];
           heap[nivals - 1] = heap[0];
           heap[0] = t;
           nivals--;
-          /* Fix up the heap */
+          // Fix up the heap.
           i = 0;
           while (2 * i + 1 < nivals)
             {
-              /* Get the kids */
+              // Get the kids.
               j = 2 * i + 1;
-              /* If the j+1st entry exists and is larger than the jth,
-                 use it instead. */
+              // If the j+1st entry exists and is larger than the jth,
+              // use it instead.
               if (j + 1 < nivals
                   && ivals[heap[j + 1]].err >= ivals[heap[j]].err)
                 j++;
-              /* Do we need to move the ith entry up? */
+              // Do we need to move the ith entry up?
               if (ivals[heap[j]].err <= ivals[heap[i]].err)
                 break;
               else
                 {
                   t = heap[j];
                   heap[j] = heap[i];
                   heap[i] = t;
                   i = j;
                 }
             }
-
         }
-
-      /* Do we need to split this interval? */
       else if (split)
         {
-
-          /* Some values we will need often... */
+          // Some values we will need often...
           d = iv->depth;
-          /* Generate the interval on the left */
+          // Generate the interval on the left.
           ivl = &(ivals[heap[nivals++]]);
           ivl->a = iv->a;
           ivl->b = m;
           ml = (ivl->a + ivl->b) / 2;
           hl = h / 2;
           ivl->depth = 0;
           ivl->rdepth = iv->rdepth + 1;
           ivl->fx[0] = iv->fx[0];
@@ -1998,31 +1971,30 @@ Mathematical Software, Vol. 37, Issue 3,
             }
           for (i = n[0] + 1; i <= n[d]; i++)
             {
               temp = ivl->c[idx[d] + i];
               ncdiff += temp * temp;
             }
           ncdiff = sqrt (ncdiff);
           ivl->err = ncdiff * h;
-          /* Check for divergence. */
+          // Check for divergence.
           ivl->ndiv = iv->ndiv + (fabs (iv->c[0]) > 0
                                   && ivl->c[0] / iv->c[0] > 2);
           if (ivl->ndiv > ndiv_max && 2 * ivl->ndiv > ivl->rdepth)
             {
               igral = gnulib::copysign (octave_Inf, igral);
               warning ("quadcc: divergent integral detected");
               break;
             }
 
-          /* Compute the local integral. */
+          // Compute the local integral.
           ivl->igral = h * w * ivl->c[0];
 
-
-          /* Generate the interval on the right */
+          // Generate the interval on the right.
           ivr = &(ivals[heap[nivals++]]);
           ivr->a = m;
           ivr->b = iv->b;
           mr = (ivr->a + ivr->b) / 2;
           hr = h / 2;
           ivr->depth = 0;
           ivr->rdepth = iv->rdepth + 1;
           ivr->fx[0] = iv->fx[16];
@@ -2090,40 +2062,39 @@ Mathematical Software, Vol. 37, Issue 3,
             }
           for (i = n[0] + 1; i <= n[d]; i++)
             {
               temp = ivr->c[idx[d] + i];
               ncdiff += temp * temp;
             }
           ncdiff = sqrt (ncdiff);
           ivr->err = ncdiff * h;
-          /* Check for divergence. */
+          // Check for divergence.
           ivr->ndiv = iv->ndiv + (fabs (iv->c[0]) > 0
                                   && ivr->c[0] / iv->c[0] > 2);
           if (ivr->ndiv > ndiv_max && 2 * ivr->ndiv > ivr->rdepth)
             {
               igral = gnulib::copysign (octave_Inf, igral);
               warning ("quadcc: divergent integral detected");
               break;
             }
 
-          /* Compute the local integral. */
+          // Compute the local integral.
           ivr->igral = h * w * ivr->c[0];
 
+          // Fix-up the heap: we now have one interval on top that we
+          // don't need any more and two new, unsorted ones at the
+          // bottom.
 
-          /* Fix-up the heap: we now have one interval on top
-             that we don't need any more and two new, unsorted
-             ones at the bottom. */
-          /* Flip the last interval to the top of the heap and
-             sift down. */
+          // Flip the last interval to the top of the heap and sift down.
           t = heap[nivals - 1];
           heap[nivals - 1] = heap[0];
           heap[0] = t;
           nivals--;
-          /* Sift this interval back down the heap. */
+          // Sift this interval back down the heap.
           i = 0;
           while (2 * i + 1 < nivals - 1)
             {
               j = 2 * i + 1;
               if (j + 1 < nivals - 1
                   && ivals[heap[j + 1]].err >= ivals[heap[j]].err)
                 j++;
               if (ivals[heap[j]].err <= ivals[heap[i]].err)
@@ -2132,38 +2103,35 @@ Mathematical Software, Vol. 37, Issue 3,
                 {
                   t = heap[j];
                   heap[j] = heap[i];
                   heap[i] = t;
                   i = j;
                 }
             }
 
-          /* Now grab the last interval and sift it up the heap. */
+          // Now grab the last interval and sift it up the heap.
           i = nivals - 1;
           while (i > 0)
             {
               j = (i - 1) / 2;
               if (ivals[heap[j]].err < ivals[heap[i]].err)
                 {
                   t = heap[j];
                   heap[j] = heap[i];
                   heap[i] = t;
                   i = j;
                 }
               else
                 break;
             }
-
-
         }
-
-      /* Otherwise, just fix-up the heap. */
       else
         {
+          // Otherwise, just fix-up the heap.
           i = 0;
           while (2 * i + 1 < nivals)
             {
               j = 2 * i + 1;
               if (j + 1 < nivals
                   && ivals[heap[j + 1]].err >= ivals[heap[j]].err)
                 j++;
               if (ivals[heap[j]].err <= ivals[heap[i]].err)
@@ -2171,58 +2139,56 @@ Mathematical Software, Vol. 37, Issue 3,
               else
                 {
                   t = heap[j];
                   heap[j] = heap[i];
                   heap[i] = t;
                   i = j;
                 }
             }
-
         }
 
-      /* If the heap is about to overflow, remove the last two intervals. */
+      // If the heap is about to overflow, remove the last two
+      // intervals.
       while (nivals > cquad_heapsize - 2)
         {
           iv = &(ivals[heap[nivals - 1]]);
 #if (DEBUG_QUADCC)
           printf ("quadcc: dropping ival %i (of %i) with [%e,%e] int=%e, err=%e, depth=%i\n",
                   heap[0], nivals, iv->a, iv->b, iv->igral, iv->err, iv->depth);
 #endif
           err_final += iv->err;
           igral_final += iv->igral;
           nivals--;
         }
 
-      /* Collect the value of the integral and error. */
+      // Collect the value of the integral and error.
       igral = igral_final;
       err = err_final;
       for (i = 0; i < nivals; i++)
         {
           igral += ivals[heap[i]].igral;
           err += ivals[heap[i]].err;
         }
-
     }
 
-  /* Dump the contents of the heap. */
+  // Dump the contents of the heap.
 #if (DEBUG_QUADCC)
   for (i = 0; i < nivals; i++)
     {
       iv = &(ivals[heap[i]]);
       printf ("quadcc: ival %i (%i) with [%e,%e], int=%e, err=%e, depth=%i, rdepth=%i, ndiv=%i\n",
               i, heap[i], iv->a, iv->b, iv->igral, iv->err, iv->depth,
               iv->rdepth, iv->ndiv);
     }
 #endif
 
   return ovl (igral, err, neval);
 }
 
-
 /*
 %!assert (quadcc (@sin, -pi, pi), 0, 1e-6)
 %!assert (quadcc (inline ("sin"),- pi, pi), 0, 1e-6)
 %!assert (quadcc ("sin", -pi, pi), 0, 1e-6)
 
 %!assert (quadcc (@sin, -pi, 0), -2, 1e-6)
 %!assert (quadcc (@sin, 0, pi), 2, 1e-6)
 %!assert (quadcc (@(x) 1./sqrt (x), 0, 1), 2, 1e-6)
