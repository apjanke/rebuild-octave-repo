# HG changeset patch
# User jwe
# Date 1191961963 0
#      Tue Oct 09 20:32:43 2007 +0000
# Node ID 2d326000e09b1b233a25a7abed4a171c66f822ba
# Parent  c7484dcadd4d9bedf4ccf49e44ae07f880e19225
[project @ 2007-10-09 20:32:42 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2007-10-09  John W. Eaton  <jwe@octave.org>
+
+	* dSparse.cc (SparseMatrix::all_elements_are_zero): New function.
+	* dNDArray.cc (NDArray::all_elements_are_zero): New function.
+
 2007-10-09  David Bateman  <dbateman@free.fr>
 
 	* Sparse.cc (Sparse<T> Sparse<T>::index (idx_vector&, idx_vector&,
 	int)): Remove a for loop in the random indexing case at the
 	expense of maintaining a set of linked lists of indices that point 
 	to the same column in the original matrix.
 	(int assign (Sparse<LT>&, Sparse<RT>)): Take a const copy of lhs
 	and use it on the RHS of expressions to avoid unnecessary calls to
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -541,16 +541,28 @@ NDArray::any_element_not_one_or_zero (vo
       if (val != 0 && val != 1)
 	return true;
     }
 
   return false;
 }
 
 bool
+NDArray::all_elements_are_zero (void) const
+{
+  octave_idx_type nel = nelem ();
+
+  for (octave_idx_type i = 0; i < nel; i++)
+    if (elem (i) != 0)
+      return false;
+
+  return true;
+}
+
+bool
 NDArray::all_elements_are_int_or_inf_or_nan (void) const
 {
   octave_idx_type nel = nelem ();
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
       double val = elem (i);
       if (xisnan (val) || D_NINT (val) == val)
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -61,16 +61,17 @@ public:
 
   // unary operations
 
   boolNDArray operator ! (void) const;
 
   bool any_element_is_negative (bool = false) const;
   bool any_element_is_inf_or_nan (void) const;
   bool any_element_not_one_or_zero (void) const;
+  bool all_elements_are_zero (void) const;
   bool all_elements_are_int_or_inf_or_nan (void) const;
   bool all_integers (double& max_val, double& min_val) const;
   bool too_large_for_float (void) const;
 
   // FIXME -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -7646,16 +7646,28 @@ SparseMatrix::any_element_is_inf_or_nan 
       if (xisinf (val) || xisnan (val))
 	return true;
     }
 
   return false;
 }
 
 bool
+SparseMatrix::all_elements_are_zero (void) const
+{
+  octave_idx_type nel = nnz ();
+
+  for (octave_idx_type i = 0; i < nel; i++)
+    if (data (i) != 0)
+      return false;
+
+  return true;
+}
+
+bool
 SparseMatrix::all_elements_are_int_or_inf_or_nan (void) const
 {
   octave_idx_type nel = nnz ();
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
       double val = data (i);
       if (xisnan (val) || D_NINT (val) == val)
diff --git a/liboctave/dSparse.h b/liboctave/dSparse.h
--- a/liboctave/dSparse.h
+++ b/liboctave/dSparse.h
@@ -371,16 +371,17 @@ public:
   // other operations
   SparseMatrix map (d_d_Mapper f) const;
   SparseBoolMatrix map (b_d_Mapper f) const;
 
   SparseMatrix& apply (d_d_Mapper f);
 
   bool any_element_is_negative (bool = false) const;
   bool any_element_is_inf_or_nan (void) const;
+  bool all_elements_are_zero (void) const;
   bool all_elements_are_int_or_inf_or_nan (void) const;
   bool all_integers (double& max_val, double& min_val) const;
   bool too_large_for_float (void) const;
  
   SparseBoolMatrix operator ! (void) const;
 
   SparseBoolMatrix all (int dim = -1) const;
   SparseBoolMatrix any (int dim = -1) const;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2007-10-09  John W. Eaton  <jwe@octave.org>
 
+	* ov-mapper.cc (octave_mapper::apply): If possible, use
+	d_d_map_fcn to handle complex values which have imag(z) == 0.
+
 	* DLD-FUNCTIONS/urlwrite.cc (Furlwrite, Furlread) [! HAVE_CURL]:
 	Throw error instead of returning empty string hiding error message
 	in third return value.
 	(progress_func): Delete.
 	(Furlread): Don't set progress callback for curl.
 	(write_data, form_query_string, urlget): Now static.
 
 2007-10-08  David Bateman  <dbateman@free.fr>
diff --git a/src/defun.h b/src/defun.h
--- a/src/defun.h
+++ b/src/defun.h
@@ -82,17 +82,17 @@ 02110-1301, USA.
 //     arguments that are expected to create bool results.
 //
 //   c_b_map is a pointer to a function that should be called for
 //     complex arguments that are expected to create bool results.
 //
 //   d_d_map is a pointer to a function that should be called for real
 //     arguments that are expected to create real results.
 //
-//   d_c_map is a pointer to a function that should be called for
+//   c_d_map is a pointer to a function that should be called for
 //     complex arguments that are expected to create real results.
 //
 //   c_c_map is a pointer to a function that should be called for
 //     complex arguments that are expected to create complex results.
 //
 //   lo is the lower bound of the range for which real arguments
 //     return real results (e.g., lo == 0 for sqrt).
 //
@@ -107,20 +107,20 @@ 02110-1301, USA.
 //
 //   can_ret_cmplx_for_real is a flag that says whether this function
 //     can create a complex number given a real-valued  argument
 //     (e.g., sqrt (-1)).
 //
 //   doc is the simple help text for the function.
 
 #define DEFUN_MAPPER(name, ch_map, d_b_map, c_b_map, d_d_map, \
-		     d_c_map, c_c_map, lo, hi, ch_map_flag, \
+		     c_d_map, c_c_map, lo, hi, ch_map_flag, \
 		     can_ret_cmplx_for_real, doc) \
   DEFUN_MAPPER_INTERNAL (name, ch_map, d_b_map, c_b_map, d_d_map, \
-			 d_c_map, c_c_map, lo, hi, ch_map_flag, \
+			 c_d_map, c_c_map, lo, hi, ch_map_flag, \
 			 can_ret_cmplx_for_real, doc)
 
 // Make alias another name for the existing function name.  This macro
 // must be used in the same file where name is defined, after the
 // definition for name.
 
 #define DEFALIAS(alias, name) \
   DEFALIAS_INTERNAL (alias, name)
diff --git a/src/ov-mapper.cc b/src/ov-mapper.cc
--- a/src/ov-mapper.cc
+++ b/src/ov-mapper.cc
@@ -290,65 +290,86 @@ octave_mapper::apply (const octave_value
 	    MAPPER_LOOP (boolNDArray, d_b_map_fcn, m);
 	  else
 	    error ("%s: unable to handle real arguments",
 		   name().c_str ());
 	}
     }
   else if (arg.is_complex_type ())
     {
+      // In the following, we use d_d_map_fcn to handle the case of
+      // imag (z) == 0.  This can happen when a complex value is not
+      // narrowed to a real value automatically, possibly due to some
+      // imaginary parts being -0.
+
       if (arg.is_scalar_type ())
 	{
 	  Complex c = arg.complex_value ();
 
-	  if (d_c_map_fcn)
-	    retval = d_c_map_fcn (c);
+	  if (c_d_map_fcn)
+	    retval = c_d_map_fcn (c);
 	  else if (c_c_map_fcn)
 	    retval = c_c_map_fcn (c);
 	  else if (c_b_map_fcn)
 	    retval = c_b_map_fcn (c);
+	  else if (d_d_map_fcn && imag (c) == 0)
+	    retval = d_d_map_fcn (real (c));
 	  else
 	    error ("%s: unable to handle complex arguments",
 		   name().c_str ());
 	}
       else if (arg.is_sparse_type ())
 	{
 	  SparseComplexMatrix cm = arg.sparse_complex_matrix_value ();
 
 	  if (error_state)
 	    return retval;
 
-	  if (d_c_map_fcn)
-	    SPARSE_MAPPER_LOOP (SparseMatrix, double, d_c_map_fcn, cm);
+	  if (c_d_map_fcn)
+	    SPARSE_MAPPER_LOOP (SparseMatrix, double, c_d_map_fcn, cm);
 	  else if (c_c_map_fcn)
 	    SPARSE_MAPPER_LOOP (SparseComplexMatrix, Complex, 
 				c_c_map_fcn, cm);
 	  else if (c_b_map_fcn)
 	    SPARSE_MAPPER_LOOP (SparseBoolMatrix, bool, 
 				c_b_map_fcn, cm);
 	  else
-	    error ("%s: unable to handle complex arguments",
-		   name().c_str ());
+	    {
+	      SparseMatrix im = imag (cm);
+
+	      if (d_d_map_fcn && im.all_elements_are_zero ())
+		SPARSE_MAPPER_LOOP (SparseMatrix, double, d_d_map_fcn, real (cm));
+	      else
+		error ("%s: unable to handle complex arguments",
+		       name().c_str ());
+	    }
 	}
       else
 	{
 	  ComplexNDArray cm = arg.complex_array_value ();
 
 	  if (error_state)
 	    return retval;
 
-	  if (d_c_map_fcn)
-	    MAPPER_LOOP (NDArray, d_c_map_fcn, cm);
+	  if (c_d_map_fcn)
+	    MAPPER_LOOP (NDArray, c_d_map_fcn, cm);
 	  else if (c_c_map_fcn)
 	    MAPPER_LOOP (ComplexNDArray, c_c_map_fcn, cm);
 	  else if (c_b_map_fcn)
 	    MAPPER_LOOP (boolNDArray, c_b_map_fcn, cm);
 	  else
-	    error ("%s: unable to handle complex arguments",
-		   name().c_str ());
+	    {
+	      NDArray im = imag (cm);
+
+	      if (d_d_map_fcn && im.all_elements_are_zero ())
+		MAPPER_LOOP (NDArray, d_d_map_fcn, real (cm));
+	      else
+		error ("%s: unable to handle complex arguments",
+		       name().c_str ());
+	    }
 	}
     }
   else if (ch_map_fcn)
     {
       // FIXME -- this could be done in a better way...
 
       octave_value tmp = arg.convert_to_str ();
 
diff --git a/src/ov-mapper.h b/src/ov-mapper.h
--- a/src/ov-mapper.h
+++ b/src/ov-mapper.h
@@ -41,28 +41,28 @@ octave_mapper : public octave_function
 public:
 
   octave_mapper (void) { }
 
   typedef int (*ch_mapper) (int);
   typedef bool (*d_b_mapper) (double);
   typedef bool (*c_b_mapper) (const Complex&);
   typedef double (*d_d_mapper) (double);
-  typedef double (*d_c_mapper) (const Complex&);
+  typedef double (*c_d_mapper) (const Complex&);
   typedef Complex (*c_c_mapper) (const Complex&);
 
   octave_mapper (ch_mapper ch, d_b_mapper db, c_b_mapper cb,
-		 d_d_mapper dd, d_c_mapper dc,
+		 d_d_mapper dd, c_d_mapper dc,
 		 c_c_mapper cc, double ll, double ul,
 		 int cmf, bool crcfr,
 		 const std::string& nm = std::string (),
 		 const std::string& ds = std::string ())
     : octave_function (nm, ds), ch_map_fcn (ch),
       d_b_map_fcn (db), c_b_map_fcn (cb),
-      d_d_map_fcn (dd), d_c_map_fcn (dc), c_c_map_fcn (cc),
+      d_d_map_fcn (dd), c_d_map_fcn (dc), c_c_map_fcn (cc),
       lower_limit (ll), upper_limit (ul), ch_map_flag (cmf),
       can_ret_cmplx_for_real (crcfr) { }
 
   ~octave_mapper (void) { }
 
   octave_function *function_value (bool = false) { return this; }
 
   octave_value subsref (const std::string&,
@@ -84,17 +84,17 @@ private:
   octave_value apply (const octave_value& arg) const;
 
   // ch_map_fcn is a kluge.
 
   ch_mapper ch_map_fcn;
   d_b_mapper d_b_map_fcn;
   c_b_mapper c_b_map_fcn;
   d_d_mapper d_d_map_fcn;
-  d_c_mapper d_c_map_fcn;
+  c_d_mapper c_d_map_fcn;
   c_c_mapper c_c_map_fcn;
 
   // If flag is nonzero and we are not calling ch_map_fcn, lower_limit
   // and  upper_limit specify the range of values for which a real arg
   // returns a real value.  Outside that range, we have to convert args
   // to complex, and call the complex valued function.
 
   double lower_limit;
