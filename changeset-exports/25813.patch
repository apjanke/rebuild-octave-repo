# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1534573305 -7200
#      Sat Aug 18 08:21:45 2018 +0200
# Node ID d98d7df9fd1543ef7e6f044f9bc798a5f3f4ff21
# Parent  fc74c8d2a584bb344e002e2637c18763c0fcfe69
updated context menus in editor and console window (bug #46884)

* QTerminal.cc (handleCustomContextMenuRequest): enable new run selection
  action depending on selected text;
  (run_selection): new slot for the action on running the selection;

* QTerminal.h: new signal execute_command_in_terminal_signal, new slot
  run_selection with related action;
  (QTerminal): adding the action to the context menu and connecting the
  new signal to the related slot in main_window

* file-editor.cc (create_context_menu): remove redo/undo from context menu

diff --git a/libgui/qterminal/libqterminal/QTerminal.cc b/libgui/qterminal/libqterminal/QTerminal.cc
--- a/libgui/qterminal/libqterminal/QTerminal.cc
+++ b/libgui/qterminal/libqterminal/QTerminal.cc
@@ -121,32 +121,44 @@ QTerminal::handleCustomContextMenuReques
             data << file_name << line;
             _edit_action->setData (data);
           }
       }
 #endif
 
     _paste_action->setEnabled (cb->text().length() > 0);
     _copy_action->setEnabled (has_selected_text);
+    _run_selection_action->setEnabled (has_selected_text);
 
     // Get the actions of any hotspots the filters may have found
     QList<QAction*> actions = get_hotspot_actions (at);
     if (actions.length ())
       _contextMenu->addSeparator ();
     for (int i = 0; i < actions.length (); i++)
       _contextMenu->addAction (actions.at(i));
 
     // Finally, show the context menu
     _contextMenu->exec (mapToGlobal (at));
 
     // Cleaning up, remove actions of the hotspot
     for (int i = 0; i < actions.length (); i++)
       _contextMenu->removeAction (actions.at(i));
   }
 
+// slot for running the selected code
+void
+QTerminal::run_selection ()
+{
+  QStringList commands = selectedText ().split (QRegExp ("[\r\n]"),
+                                                QString::SkipEmptyParts);
+  for (int i = 0; i < commands.size (); i++)
+    emit execute_command_in_terminal_signal (commands.at (i));
+
+}
+
 // slot for edit files in error messages
 void
 QTerminal::edit_file ()
 {
   QString file = _edit_action->data ().toStringList ().at (0);
   int line = _edit_action->data ().toStringList ().at (1).toInt ();
 
   emit edit_mfile_request (file,line);
diff --git a/libgui/qterminal/libqterminal/QTerminal.h b/libgui/qterminal/libqterminal/QTerminal.h
--- a/libgui/qterminal/libqterminal/QTerminal.h
+++ b/libgui/qterminal/libqterminal/QTerminal.h
@@ -94,16 +94,18 @@ public:
 signals:
 
   void report_status_message (const QString&);
 
   void interrupt_signal (void);
 
   void edit_mfile_request (const QString&, int);
 
+  void execute_command_in_terminal_signal (const QString&);
+
 public slots:
 
   virtual void copyClipboard (void) = 0;
 
   virtual void pasteClipboard (void) = 0;
 
   virtual void selectAll (void) = 0;
 
@@ -112,16 +114,18 @@ public slots:
   void notice_settings (const QSettings *settings);
 
   virtual void init_terminal_size (void) { }
 
   void terminal_interrupt (void) { emit interrupt_signal (); }
 
   void set_global_shortcuts (bool focus_out);
 
+  void run_selection (void);
+
   void edit_file (void);
 
   virtual void handle_visibility_changed (bool) { };
 
 protected:
 
   QTerminal (QWidget *xparent = nullptr) : QWidget (xparent)
   {
@@ -138,16 +142,19 @@ protected:
                       resource_manager::icon ("edit-paste"),
                       tr ("Paste"), this, SLOT (pasteClipboard ()));
 
     _contextMenu->addSeparator ();
 
     _selectall_action = _contextMenu->addAction (
                           tr ("Select All"), this, SLOT (selectAll ()));
 
+    _run_selection_action = _contextMenu->addAction (
+                     tr ("Run Selection"), this, SLOT (run_selection ()));
+
     _edit_action = _contextMenu->addAction (
                      tr (""), this, SLOT (edit_file ()));
 
     _contextMenu->addSeparator ();
 
     _contextMenu->addAction (tr ("Clear Window"), parent (),
                              SLOT (handle_clear_command_window_request ()));
 
@@ -155,16 +162,19 @@ protected:
              this, SLOT (handleCustomContextMenuRequested (QPoint)));
 
     connect (this, SIGNAL (report_status_message (const QString&)),
              xparent, SLOT (report_status_message (const QString&)));
 
     connect (this, SIGNAL (edit_mfile_request (const QString&, int)),
              xparent, SLOT (edit_mfile (const QString&, int)));
 
+    connect (this, SIGNAL (execute_command_in_terminal_signal (const QString&)),
+             xparent, SLOT (execute_command_in_terminal (const QString&)));
+
     connect (xparent, SIGNAL (settings_changed (const QSettings *)),
              this, SLOT (notice_settings (const QSettings *)));
 
     connect (xparent, SIGNAL (init_terminal_size_signal ()),
              this, SLOT (init_terminal_size ()));
 
     connect (xparent, SIGNAL (copyClipboard_signal ()),
              this, SLOT (copyClipboard ()));
@@ -195,14 +205,15 @@ protected:
 
 private:
 
   QMenu *_contextMenu;
   QAction * _copy_action;
   QAction * _paste_action;
   QAction * _selectall_action;
   QAction * _edit_action;
+  QAction * _run_selection_action;
 
   QAction *_interrupt_action;
   QAction *_nop_action;
 };
 
 #endif // QTERMINAL_H
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -1511,19 +1511,16 @@ namespace octave
     // remove all standard actions from scintilla
     QList<QAction *> all_actions = menu->actions ();
     QAction *a;
 
     foreach (a, all_actions)
       menu->removeAction (a);
 
     // add editor's actions with icons and customized shortcuts
-    menu->addAction (m_undo_action);
-    menu->addAction (m_redo_action);
-    menu->addSeparator ();
     menu->addAction (m_cut_action);
     menu->addAction (m_copy_action);
     menu->addAction (m_paste_action);
     menu->addSeparator ();
     menu->addAction (m_selectall_action);
     menu->addSeparator ();
     menu->addAction (m_find_files_action);
     menu->addAction (m_find_action);
@@ -2081,16 +2078,17 @@ namespace octave
     // new and open actions are inserted later from main window
     m_popdown_mru_action = m_tool_bar->addWidget (popdown_button);
     m_tool_bar->addAction (m_save_action);
     m_tool_bar->addAction (m_save_as_action);
     m_tool_bar->addAction (m_print_action);
     m_tool_bar->addSeparator ();
     // m_undo_action: later via main window
     m_tool_bar->addAction (m_redo_action);
+    m_tool_bar->addSeparator ();
     // m_copy_action: later via the main window
     m_tool_bar->addAction (m_cut_action);
     // m_paste_action: later via the main window
     m_tool_bar->addAction (m_find_action);
     //m_tool_bar->addAction (m_find_next_action);
     //m_tool_bar->addAction (m_find_previous_action);
     m_tool_bar->addSeparator ();
     m_tool_bar->addAction (m_run_action);
