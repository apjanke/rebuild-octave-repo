# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1265900883 -3600
#      Thu Feb 11 16:08:03 2010 +0100
# Node ID 0d928dd9eeb8dc5d17003677320eb037c7e4a782
# Parent  4e4270ab70d62b330610241cb2666aea43bbad23
extend parseparams

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2010-02-11  Jaroslav Hajek  <highegg@gmail.com>
+
+	* interpreter/expr.txi: Mention no ternary operator and the ifelse
+	fucntion as a possible replacement.
+
 2010-02-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* interpreter/tips.txi: More tips.
 
 2010-01-30  Jaroslav Hajek  <highegg@gmail.com>
 
 	* interpreter/expr.txi (Assignment): Document return value of
 	multi-assignment with skipped values.
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -821,16 +821,21 @@ function f (a, b, c)
 @end group
 @end example
 
 @noindent
 would result in an error if @code{f} were called with one or two
 arguments because Octave would be forced to try to evaluate both of the
 operands for the operator @samp{&}.
 
+The ternary operator (?:) is not supported in Octave. If short-circuiting is
+not important, it can be replaced by the @code{ifelse} function.
+
+@DOCSTRING(ifelse)
+
 @node Assignment Ops
 @section Assignment Expressions
 @cindex assignment expressions
 @cindex assignment operators
 @cindex operators, assignment
 @cindex expressions, assignment
 
 @opindex =
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-02-11  Jaroslav Hajek  <highegg@gmail.com>
+
+	* miscellaneous/parseparams.m: Extend to allow direct parsing of
+	options.
+
 2010-02-10  Jaroslav Hajek  <highegg@gmail.com>
 
 	* optimization/fminbnd.m: Undocument impossible info values.
 	* optimization/fzero.m: Ditto.
 
 	* optimization/fzero.m: Make default TolX consistent with fminbnd.
 2010-02-10  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/scripts/miscellaneous/parseparams.m b/scripts/miscellaneous/parseparams.m
--- a/scripts/miscellaneous/parseparams.m
+++ b/scripts/miscellaneous/parseparams.m
@@ -1,9 +1,10 @@
 ## Copyright (C) 2006, 2007 Alexander Barth
+## Copyright (C) 2010 VZLU Prague
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -13,16 +14,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{reg}, @var{prop}] =} parseparams (@var{params})
+## @deftypefnx {Function File} {[@var{reg}, @var{var1}, @dots{}] =} parseparams (@var{params}, @var{name1}, @var{default1}, @dots{})
 ## Return in @var{reg} the cell elements of @var{param} up to the first
 ## string element and in @var{prop} all remaining elements beginning
 ## with the first string element.  For example 
 ##
 ## @example
 ## @group
 ## [reg, prop] = parseparams (@{1, 2, "linewidth", 10@})
 ## reg =
@@ -36,29 +38,70 @@
 ##   [1,2] = 10
 ## @}
 ## @end group
 ## @end example
 ##
 ## The parseparams function may be used to separate 'regular'
 ## arguments and additional arguments given as property/value pairs of
 ## the @var{varargin} cell array.
+##
+## In the second form of the call, available options are specified directly
+## with their default values given as name-value pairs.
+## If @var{params} do not form name-value pairs, or if an option occurs
+## that does not match any of the available options, an error occurs.
+## When called from a m-file function, the error is prefixed with the
+## name of the caller function.
+## The matching of options is case-insensitive.
+##
 ## @seealso{varargin}
 ## @end deftypefn
 
 ## Author: Alexander Barth <abarth93@users.sourceforge.net>
 ## Author: Aida Alvera Azcarate <aida@netecho.info>
 
-function [reg, prop] = parseparams (params)
+function [reg, varargout] = parseparams (params, varargin)
 
-  i = 1;
+  strs = cellfun ("isclass", params, "char");
+  i = find (strs, 1);
+  if (i)
+    reg = params(1:i-1);
+    prop = params(i:end);
+  else
+    reg = params;
+    prop = {};
+  endif
 
-  while (i <= numel (params))
-    if (ischar (params{i}))
-      break;
+  if (nargin == 1)
+    varargout = {prop};
+  else
+    names = varargin(1:2:end);
+    defaults = varargin(2:2:end);
+    if (! size_equal (names, defaults))
+      error ("parseparams: needs odd number of arguments");
     endif
-    i++;
-  endwhile
+    [names, sidx] = sort (names);
 
-  reg = params(1:i-1);
-  prop = params(i:end);
+    varargout = defaults;
+    if (i)
+      ## Let's parse the properties.
+      pnames = prop(1:2:end);
+      values = prop(2:2:end);
+      if (! size_equal (pnames, values) || ! all (strs(i:2:end)))
+        error_as_caller ("options must be given as name-value pairs");
+      endif
+      idx = lookup (names, pnames, "mi");
+      if (! all (idx))
+        error_as_caller ("unrecognized option: %s", pnames{find (idx == 0, 1)});
+      else
+        varargout(sidx(idx)) = values;
+      endif
+    endif
+  endif
 
 endfunction
+
+function error_as_caller (msg, varargin)
+  stack = dbstack (1); # omit me
+  fname = stack(min (2, end)).name;
+  error ([fname, ": ", msg], varargin{:});
+endfunction
+
