# HG changeset patch
# User Rik <rik@octave.org>
# Date 1487566242 28800
#      Sun Feb 19 20:50:42 2017 -0800
# Branch stable
# Node ID 9b0a2bc07545c75696d52c48a3d65f2d83767c1f
# Parent  525c36d5f9857588768edeb9b87fef549c5ae58d
Guarantee returning std::string from tilde_expand functions (bug #50234).

* file-ops.cc (tilde_expand_word, tild_expand): In case of short-circuit, quick
return from function guarantee that a string, not a reference to a string, is
returned.

diff --git a/liboctave/system/file-ops.cc b/liboctave/system/file-ops.cc
--- a/liboctave/system/file-ops.cc
+++ b/liboctave/system/file-ops.cc
@@ -222,17 +222,17 @@ namespace octave
     // tilde.
 
     static std::string
     tilde_expand_word (const std::string& filename)
     {
       size_t f_len = filename.length ();
 
       if (f_len == 0 || filename[0] != '~')
-        return filename;
+        return std::string (filename);
 
       // A leading '~/' or a bare '~' is *always* translated to the value
       // of $HOME or the home directory of the current user, regardless of
       // any preexpansion hook.
 
       if (f_len == 1 || octave::sys::file_ops::is_dir_sep (filename[1]))
         return octave::sys::env::get_home_directory () + filename.substr (1);
 
@@ -296,17 +296,17 @@ namespace octave
 
     // If NAME has a leading ~ or ~user, Unix-style, expand it to the
     // user's home directory.  If no ~, or no <pwd.h>, just return NAME.
 
     std::string
     octave::sys::file_ops::tilde_expand (const std::string& name)
     {
       if (name.find ('~') == std::string::npos)
-        return name;
+        return std::string (name);
       else
         {
           std::string result;
 
           size_t name_len = name.length ();
 
           // Scan through S expanding tildes as we come to them.
 
