# HG changeset patch
# User Rik <rik@octave.org>
# Date 1485389332 28800
#      Wed Jan 25 16:08:52 2017 -0800
# Branch stable
# Node ID 8cb4a2c07bce14a14475c2e969e8caf709c3476d
# Parent  b19287c4e74a4dba880571d135ed575a11b665d0
doc: Fix '##' in middle of docstring/comment lines (bug #50145).50145).50145).50145).50145).

* warning_ids.m, xor.m, pqpnonneg.m: Remove '##' from middle of
docstring/comment lines.

diff --git a/scripts/help/warning_ids.m b/scripts/help/warning_ids.m
--- a/scripts/help/warning_ids.m
+++ b/scripts/help/warning_ids.m
@@ -290,17 +290,17 @@
 ## warn you when this happens, and print a list of the additional
 ## functions that it is forced to clear.
 ## By default, the @code{Octave:reload-forces-clear} warning is enabled.
 ##
 ## @item Octave:resize-on-range-error
 ## If the @code{Octave:resize-on-range-error} warning is enabled, print a
 ## warning when a matrix is resized by an indexed assignment with
 ## indices outside the current bounds.
-## By default, the ## @code{Octave:resize-on-range-error} warning is disabled.
+## By default, the @code{Octave:resize-on-range-error} warning is disabled.
 ##
 ## @item Octave:separator-insert
 ## Print warning if commas or semicolons might be inserted
 ## automatically in literal matrices.
 ## By default, the @code{Octave:separator-insert} warning is disabled.
 ##
 ## @item Octave:shadowed-function
 ## By default, the @code{Octave:shadowed-function} warning is enabled.
diff --git a/scripts/miscellaneous/xor.m b/scripts/miscellaneous/xor.m
--- a/scripts/miscellaneous/xor.m
+++ b/scripts/miscellaneous/xor.m
@@ -55,17 +55,17 @@ function z = xor (x, y, varargin)
 
   if (nargin < 2)
     print_usage ();
   endif
 
   z = __xor__ (x, y);
 
   ## Slow expansion to multiple arguments.
-  ## Probably okay number of elements ## will be small.
+  ## Probably okay number of elements will be small.
   if (! isempty (varargin))
     for i = 1:numel (varargin)
       z = __xor__ (z, varargin{i});
     endfor
   endif
 
 endfunction
 
diff --git a/scripts/optimization/pqpnonneg.m b/scripts/optimization/pqpnonneg.m
--- a/scripts/optimization/pqpnonneg.m
+++ b/scripts/optimization/pqpnonneg.m
@@ -22,17 +22,17 @@
 ## @deftypefn  {} {@var{x} =} pqpnonneg (@var{c}, @var{d})
 ## @deftypefnx {} {@var{x} =} pqpnonneg (@var{c}, @var{d}, @var{x0})
 ## @deftypefnx {} {[@var{x}, @var{minval}] =} pqpnonneg (@dots{})
 ## @deftypefnx {} {[@var{x}, @var{minval}, @var{exitflag}] =} pqpnonneg (@dots{})
 ## @deftypefnx {} {[@var{x}, @var{minval}, @var{exitflag}, @var{output}] =} pqpnonneg (@dots{})
 ## @deftypefnx {} {[@var{x}, @var{minval}, @var{exitflag}, @var{output}, @var{lambda}] =} pqpnonneg (@dots{})
 ## Minimize @code{1/2*x'*c*x + d'*x} subject to @code{@var{x} >= 0}.
 ##
-## @var{c} ## and @var{d} must be real, and @var{c} must be symmetric and
+## @var{c} and @var{d} must be real, and @var{c} must be symmetric and
 ## positive definite.
 ##
 ## @var{x0} is an optional initial guess for @var{x}.
 ##
 ## Outputs:
 ##
 ## @itemize @bullet
 ## @item minval
