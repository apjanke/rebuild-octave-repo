# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1209048211 -7200
#      Thu Apr 24 16:43:31 2008 +0200
# Node ID 56f781f38f0bd168b17cd63cf5a62ffd2b8eb315
# Parent  2a62d45fa21d8b0e5e2e08fc3e2be8cbc18791b3
Add dynamic property creation

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -42,16 +42,39 @@ 2008-06-04  Shai Ayal  <shaiay@users.sou
 
 	* graphics.h.in (axes::properties::update_xlim): call the new
 	axes::properties::calc_ticks_and_lims method
 	(axes::properties::update_ylim): ditto
 	(axes::properties::update_zlim): ditto
 
 2008-06-04  Michael Goffioul <michael.goffioul@gmail.com>
 
+	* graphics.h.in (base_property::clone, string_property::clone,
+	radio_property::clone, color_property::clone, double_property::clone,
+	double_radio_property::clone, array_property::clone,
+	row_vector_property::clone, bool_property::clone,
+	handle_property::clone, callback_property::clone, any_property::clone,
+	property::clone): New virtual method.
+	(property::create): New static method to create dynamic properties.
+	(base_properties::has_property): New method to check the existence of
+	a property.
+	(any_property::any_property, row_vector_property::row_vector_property,
+	double_radio_property::double_radio_property): New copy constructors.
+	* graphics.cc (lookup_object_name): New static utility function.
+	(make_graphics_object_from_type): Likewise.
+	(gh_manager::do_make_graphics_handle): Use it.
+	(dprop_obj_map): New static map used for chaching purpose in dynamic
+	property creation.
+	(property::create): New static method to create dynamic properties.
+	(base_properties::has_property): New method to check the existence of
+	a property.
+	(base_properties::override_defaults): Check parent validity.
+	(Faddlistener): Documentation fix.
+	(Faddproperty): New function to create dynamic properties.
+
 	* genprops.awk (emit_get_array): Don't produce get_xxx_property
 	accessors.
 	* graphics.h.in (array_property::get_limits): New method to return the
 	array limits.
 	(base_properties::get_xdata_property,
 	base_properties::get_ydata_property,
 	base_properties::get_zdata_property,
 	base_properties::get_ldata_property,
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -451,16 +451,89 @@ get_array_limits (const Array<T>& m, dou
 	    emax = e;
 
 	  if (e >= 0 && e < eminp)
 	    eminp = e;
 	}
     }
 }
 
+static bool
+lookup_object_name (const caseless_str& name, caseless_str& go_name,
+		    caseless_str& rest)
+{
+  int len = name.length ();
+  int offset = 0;
+  bool result = false;
+
+  if (len >= 4)
+    {
+      caseless_str pfx = name.substr (0, 4);
+
+      if (pfx.compare ("axes") || pfx.compare ("line")
+	  || pfx.compare ("text"))
+	offset = 4;
+      else if (len >= 5)
+	{
+	  pfx = name.substr (0, 5);
+
+	  if (pfx.compare ("image") || pfx.compare ("patch"))
+	    offset = 5;
+	  else if (len >= 6)
+	    {
+	      pfx = name.substr (0, 6);
+
+	      if (pfx.compare ("figure"))
+		offset = 6;
+	      else if (len >= 7)
+		{
+		  pfx = name.substr (0, 7);
+
+		  if (pfx.compare ("surface"))
+		    offset = 7;
+		}
+	    }
+	}
+
+      if (offset > 0)
+	{
+	  go_name = pfx;
+	  rest = name.substr (offset);
+	  result = true;
+	}
+    }
+
+  return result;
+}
+
+static base_graphics_object*
+make_graphics_object_from_type (const caseless_str& type,
+				const graphics_handle& h = graphics_handle (),
+				const graphics_handle& p = graphics_handle ())
+{
+  base_graphics_object *go = 0;
+
+  if (type.compare ("figure"))
+    go = new figure (h, p);
+  else if (type.compare ("axes"))
+    go = new axes (h, p);
+  else if (type.compare ("line"))
+    go = new line (h, p);
+  else if (type.compare ("text"))
+    go = new text (h, p);
+  else if (type.compare ("image"))
+    go = new image (h, p);
+  else if (type.compare ("patch"))
+    go = new patch (h, p);
+  else if (type.compare ("surface"))
+    go = new surface (h, p);
+
+  return go;
+}
+
 // ---------------------------------------------------------------------
 
 void
 base_property::run_listeners (listener_mode mode)
 {
   const octave_value_list& l = listeners[mode];
 
   for (int i = 0; i < l.length (); i++)
@@ -759,16 +832,171 @@ callback_property::execute (const octave
 void
 callback_property::execute (const octave_value& cb, const graphics_handle& h,
 			    const octave_value& data)
 {
   if (cb.is_defined () && ! cb.is_empty ())
     execute_callback (cb, h, data);
 }
 
+// Used to cache dummy graphics objects from which dynamic
+// properties can be cloned.
+static std::map<caseless_str, graphics_object> dprop_obj_map;
+
+property
+property::create (const std::string& name, const graphics_handle& h,
+		  const caseless_str& type, const octave_value_list& args)
+{
+  property retval;
+
+  if (type.compare ("string"))
+    {
+      std::string val = (args.length () > 0 ? args(0).string_value () : "");
+
+      if (! error_state)
+	retval = property (new string_property (name, h, val));
+    }
+  else if (type.compare ("any"))
+    {
+      octave_value val =
+	  (args.length () > 0 ? args(0) : octave_value (Matrix ()));
+
+      retval = property (new any_property (name, h, val));
+    }
+  else if (type.compare ("radio"))
+    {
+      if (args.length () > 0)
+	{
+	  std::string vals = args(0).string_value ();
+
+	  if (! error_state)
+	    {
+	      retval = property (new radio_property (name, h, vals));
+
+	      if (args.length () > 1)
+		retval.set (args(1));
+	    }
+	  else
+	    error ("addproperty: invalid argument for radio property, expected a string value");
+	}
+      else
+	error ("addproperty: missing possible values for radio property");
+    }
+  else if (type.compare ("double"))
+    {
+      double d = (args.length () > 0 ? args(0).double_value () : 0);
+
+      if (! error_state)
+	retval = property (new double_property (name, h, d));
+    }
+  else if (type.compare ("handle"))
+    {
+      double hh = (args.length () > 0 ? args(0).double_value () : octave_NaN);
+
+      if (! error_state)
+	{
+	  graphics_handle gh (hh);
+
+	  retval = property (new handle_property (name, h, gh));
+	}
+    }
+  else if (type.compare ("boolean"))
+    {
+      retval = property (new bool_property (name, h, false));
+
+      if (args.length () > 0)
+	retval.set (args(0));
+    }
+  else if (type.compare ("data"))
+    {
+      retval = property (new array_property (name, h, Matrix ()));
+
+      if (args.length () > 0)
+	{
+	  retval.set (args(0));
+
+	  // FIXME: additional argument could define constraints
+	  //        but is this really useful...?
+	}
+    }
+  else if (type.compare ("color"))
+    {
+      color_values cv (0, 0, 0);
+      radio_values rv;
+
+      if (args.length () > 1)
+	rv = radio_values (args(1).string_value ());
+
+      if (! error_state)
+	{
+	  retval = property (new color_property (name, h, cv, rv));
+
+	  if (! error_state)
+	    {
+	      if (args.length () > 0
+		  && ! args(0).is_empty ())
+		retval.set (args(0));
+	      else
+		retval.set (rv.default_value ());
+	    }
+	}
+    }
+  else
+    {
+      caseless_str go_name, go_rest;
+
+      if (lookup_object_name (type, go_name, go_rest))
+	{
+	  graphics_object go;
+
+	  std::map<caseless_str, graphics_object>::const_iterator it =
+	      dprop_obj_map.find (go_name);
+
+	  if (it == dprop_obj_map.end ())
+	    {
+	      base_graphics_object *bgo =
+		  make_graphics_object_from_type (go_name);
+
+	      if (bgo)
+		{
+		  go = graphics_object (bgo);
+
+		  dprop_obj_map[go_name] = go;
+		}
+	    }
+	  else
+	    go = it->second;
+
+	  if (go.valid_object ())
+	    {
+	      property prop = go.get_properties ().get_property (go_rest);
+
+	      if (! error_state)
+		{
+		  retval = prop.clone ();
+
+		  retval.set_parent (h);
+		  retval.set_name (name);
+
+		  if (args.length () > 0)
+		    retval.set (args(0));
+		}
+	    }
+	  else
+	    error ("addproperty: invalid object type (= %s)",
+		   go_name.c_str ());
+	}
+      else
+	error ("addproperty: unsupported type for dynamic property (= %s)",
+	       type.c_str ());
+    }
+  
+  return retval;
+}
+
 // ---------------------------------------------------------------------
 
 void
 property_list::set (const caseless_str& name, const octave_value& val)
 {
   size_t offset = 0;
 
   size_t len = name.length ();
@@ -1428,16 +1656,35 @@ base_properties::get_property (const cas
 	  error ("get_property: unknown property \"%s\"", name.c_str ());
 	  return property ();
 	}
       else
 	return it->second;
     }
 }
 
+bool
+base_properties::has_property (const caseless_str& name)
+{
+  property p;
+
+  unwind_protect::begin_frame("base_properties::has_property");
+
+  unwind_protect_bool (discard_error_messages);
+  unwind_protect_int (error_state);
+
+  discard_error_messages = true;
+
+  p = get_property (name);
+
+  unwind_protect::run_frame ("base_properties::has_property");
+
+  return (p.ok ());
+}
+
 void
 base_properties::remove_child (const graphics_handle& h)
 {
   octave_idx_type k = -1;
   octave_idx_type n = children.numel ();
   for (octave_idx_type i = 0; i < n; i++)
     {
       if (h.value () == children(i))
@@ -1497,17 +1744,19 @@ base_properties::mark_modified (void)
   if (parent_obj)
     parent_obj.mark_modified ();
 }
 
 void
 base_properties::override_defaults (base_graphics_object& obj)
 {
   graphics_object parent_obj = gh_manager::get_object (get_parent ());
-  parent_obj.override_defaults (obj);
+
+  if (parent_obj)
+    parent_obj.override_defaults (obj);
 }
 
 void
 base_properties::update_axis_limits (const std::string& axis_type) const
 {
   graphics_object obj = gh_manager::get_object (__myhandle__);
 
   if (obj)
@@ -3261,30 +3510,18 @@ gh_manager::gh_manager (void)
 graphics_handle
 gh_manager::do_make_graphics_handle (const std::string& go_name,
 				     const graphics_handle& p, bool do_createfcn)
 {
   graphics_handle h = get_handle (go_name);
 
   base_graphics_object *go = 0;
 
-  if (go_name == "figure")
-    go = new figure (h, p);
-  else if (go_name == "axes")
-    go = new axes (h, p);
-  else if (go_name == "line")
-    go = new line (h, p);
-  else if (go_name == "text")
-    go = new text (h, p);
-  else if (go_name == "image")
-    go = new image (h, p);
-  else if (go_name == "patch")
-    go = new patch (h, p);
-  else if (go_name == "surface")
-    go = new surface (h, p);
+  go = make_graphics_object_from_type (go_name, h, p);
+  
   if (go)
     {
       handle_map[h] = graphics_object (go);
       if (do_createfcn)
         go->get_properties ().execute_createfcn ();
     }
   else
     error ("gh_manager::do_make_graphics_handle: invalid object type `%s'",
@@ -3956,16 +4193,18 @@ listeners are executed.\n\
 element is a function handle. If @var{fcn} is a function handle, the\n\
 corresponding function should accept at least 2 arguments, that will be\n\
 set to the object handle and the empty matrix respectively. If @var{fcn}\n\
 is a string, it must be any valid octave expression. If @var{fcn} is a cell\n\
 array, the first element must be a function handle with the same signature\n\
 as described above. The next elements of the cell array are passed\n\
 as additional arguments to the function.\n\
 \n\
+Example:\n\
+\n\
 @example\n\
 function my_listener (h, dummy, p1)\n\
   fprintf (\"my_listener called with p1=%s\\n\", p1);\n\
 endfunction\n\
 \n\
 addlistener (gcf, \"position\", @{@@my_listener, \"my string\"@})\n\
 @end example\n\
 \n\
@@ -4002,16 +4241,128 @@ addlistener (gcf, \"position\", @{@@my_l
 	error ("addlistener: invalid handle");
     }
   else
     print_usage ();
 
   return retval;
 }
 
+DEFUN (addproperty, args, ,
+   "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} addproperty (@var{name}, @var{h}, @var{type}, [@var{arg}, ...])\n\
+Create a new property named @var{name} in graphics object @var{h}.\n\
+@var{type} determines the type of the property to create. @var{args}\n\
+usually contains the default value of the property, but additional\n\
+arguments might be given, depending on the type of the property.\n\
+\n\
+The supported property types are:\n\
+\n\
+@table @code\n\
+@item string\n\
+A string property. @var{arg} contains the default string value.\n\
+@item any\n\
+An un-typed property. This kind of property can hold any octave\n\
+value. @var{args} contains the default value.\n\
+@item radio\n\
+A string property with a limited set of accepted values. The first\n\
+argument must be a string with all accepted values separated by\n\
+a vertical bar ('|'). The default value can be marked by enclosing\n\
+it with a '@{' '@}' pair. The default value may also be given as\n\
+an optional second string argument.\n\
+@item boolean\n\
+A boolean property. This property type is equivalent to a radio\n\
+property with \"on|off\" as accepted values. @var{arg} contains\n\
+the default property value.\n\
+@item double\n\
+A scalar double property. @var{arg} contains the default value.\n\
+@item handle\n\
+A handle property. This kind of property holds the handle of a\n\
+graphics object. @var{arg} contains the default handle value.\n\
+When no default value is given, the property is initialized to\n\
+the empty matrix.\n\
+@item data\n\
+A data (matrix) property. @var{arg} contains the default data\n\
+value. When no default value is given, the data is initialized to\n\
+the empty matrix.\n\
+@item color\n\
+A color property. @var{arg} contains the default color value.\n\
+When no default color is given, the property is set to black.\n\
+An optional second string argument may be given to specify an\n\
+additional set of accepted string values (like a radio property).\n\
+@end table\n\
+\n\
+@var{type} may also be the concatenation of a core object type and\n\
+a valid property name for that object type. The property created\n\
+then has the same characteristics as the referenced property (type,\n\
+possible values, hidden state...). This allows to clone an existing\n\
+property into the graphics object @var{h}.\n\
+\n\
+Examples:\n\
+\n\
+@example\n\
+addproperty (\"my_property\", gcf, \"string\", \"a string value\");\n\
+addproperty (\"my_radio\", gcf, \"radio\", \"val_1|val_2|@{val_3@}\");\n\
+addproperty (\"my_style\", gcf, \"linelinestyle\", \"--\");\n\
+@end example\n\
+\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () >= 3)
+    {
+      std::string name = args(0).string_value ();
+
+      if (! error_state)
+	{
+	  double h = args(1).double_value ();
+
+	  if (! error_state)
+	    {
+	      graphics_handle gh = gh_manager::lookup (h);
+
+	      if (gh.ok ())
+		{
+		  graphics_object go = gh_manager::get_object (gh);
+
+		  std::string type = args(2).string_value ();
+
+		  if (! error_state)
+		    {
+		      if (! go.get_properties ().has_property (name))
+			{
+			  property p = property::create (name, gh, type,
+							 args.splice (0, 3));
+
+			  if (! error_state)
+			    go.get_properties ().insert_property (name, p);
+			}
+		      else
+			error ("addproperty: a `%s' property already exists in the graphics object",
+			       name.c_str ());
+		    }
+		  else
+		    error ("addproperty: invalid property type, expected a string value");
+		}
+	      else
+		error ("addproperty: invalid graphics object (= %g)", h);
+	    }
+	  else
+	    error ("addproperty: invalid handle value");
+	}
+      else
+	error ("addproperty: invalid property name, expected a string value");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
 octave_value
 get_property_from_handle (double handle, const std::string& property,
 			  const std::string& func)
 {
   graphics_object obj = gh_manager::get_object (handle);
   octave_value retval;
 
   if (obj)
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -394,16 +394,19 @@ public:
   void add_listener (const octave_value& v, listener_mode mode = POSTSET)
     {
       octave_value_list& l = listeners[mode];
       l.resize (l.length () + 1, v);
     }
 
   OCTINTERP_API void run_listeners (listener_mode mode = POSTSET);
 
+  virtual base_property* clone (void) const
+    { return new base_property (*this); }
+
 protected:
   virtual void do_set (const octave_value&)
     { error ("set: invalid property \"%s\"", name.c_str ()); }
 
 private:
   typedef std::map<listener_mode, octave_value_list> listener_map;
   typedef std::map<listener_mode, octave_value_list>::iterator listener_map_iterator;
   typedef std::map<listener_mode, octave_value_list>::const_iterator listener_map_const_iterator;
@@ -434,16 +437,18 @@ public:
   std::string string_value (void) const { return str; }
 
   string_property& operator = (const octave_value& val)
     {
       set (val);
       return *this;
     }
 
+  base_property* clone (void) const { return new string_property (*this); }
+
 protected:
   void do_set (const octave_value& val)
     {
       if (val.is_string ())
         str = val.string_value ();
       else
         error ("set: invalid string property value for \"%s\"",
                get_name ().c_str ());
@@ -529,16 +534,18 @@ public:
     { return v.compare (current_val); }
 
   radio_property& operator = (const octave_value& val)
     {
       set (val);
       return *this;
     }
 
+  base_property* clone (void) const { return new radio_property (*this); }
+
 protected:
   void do_set (const octave_value& newval) 
   {
     if (newval.is_string ())
       {
         std::string s = newval.string_value ();
         if (vals.validate (s))
           current_val = s;
@@ -689,16 +696,18 @@ public:
   color_property& operator = (const octave_value& val)
     {
       set (val);
       return *this;
     }
 
   operator octave_value (void) const { return get (); }
 
+  base_property* clone (void) const { return new color_property (*this); }
+
 protected:
   OCTINTERP_API void do_set (const octave_value& newval);
 
 private:
   enum current_enum { color_t, radio_t } current_type;
   color_values color_val;
   radio_values radio_val;
   std::string current_val;
@@ -722,16 +731,18 @@ public:
   double double_value (void) const { return current_val; }
 
   double_property& operator = (const octave_value& val)
     {
       set (val);
       return *this;
     }
 
+  base_property* clone (void) const { return new double_property (*this); }
+
 protected:
   void do_set (const octave_value& v)
     {
       if (v.is_scalar_type () && v.is_real_type ())
         current_val = v.double_value ();
       else
         error ("set: invalid value for double property \"%s\"",
                get_name ().c_str ());
@@ -761,16 +772,21 @@ public:
 
   double_radio_property (const std::string& nm, const graphics_handle& h,
 			 const double_radio_property& v)
       : base_property (nm, h),
         current_type (v.current_type), dval (v.dval),
 	radio_val (v.radio_val), current_val (v.current_val)
   { }
 
+  double_radio_property (const double_radio_property& p)
+    : base_property (p), current_type (p.current_type),
+      dval (p.dval), radio_val (p.radio_val),
+      current_val (p.current_val) { }
+
   octave_value get (void) const
   {
     if (current_type == double_t)
       return dval;
 
     return current_val;
   }
 
@@ -800,16 +816,19 @@ public:
   double_radio_property& operator = (const octave_value& val)
     {
       set (val);
       return *this;
     }
 
   operator octave_value (void) const { return get (); }
 
+  base_property* clone (void) const
+    { return new double_radio_property (*this); }
+
 protected:
   OCTINTERP_API void do_set (const octave_value& v);
 
 private:
   enum current_enum { double_t, radio_t } current_type;
   double dval;
   radio_values radio_val;
   std::string current_val;
@@ -864,16 +883,26 @@ public:
     }
 
   array_property& operator = (const octave_value& val)
     {
       set (val);
       return *this;
     }
 
+  base_property* clone (void) const
+    {
+      array_property *p = new array_property (*this);
+
+      p->type_constraints = type_constraints;
+      p->size_constraints = size_constraints;
+      
+      return p;
+    }
+
 protected:
   void do_set (const octave_value& v)
     {
       if (validate (v))
 	{
 	  data = v;
 
 	  get_data_limits ();
@@ -903,16 +932,23 @@ public:
   row_vector_property (const std::string& nm, const graphics_handle& h,
 		       const octave_value& m)
     : array_property (nm, h, m)
   {
     add_constraint (dim_vector (-1, 1));
     add_constraint (dim_vector (1, -1));
   }
 
+  row_vector_property (const row_vector_property& p)
+    : array_property (p)
+  {
+    add_constraint (dim_vector (-1, 1));
+    add_constraint (dim_vector (1, -1));
+  }
+
   void add_constraint (const std::string& type)
   {
     array_property::add_constraint (type);
   }
 
   void add_constraint (const dim_vector& dims)
   {
     array_property::add_constraint (dims);
@@ -928,16 +964,26 @@ public:
   }
 
   row_vector_property& operator = (const octave_value& val)
   {
     set (val);
     return *this;
   }
 
+  base_property* clone (void) const
+    {
+      row_vector_property *p = new row_vector_property (*this);
+
+      p->type_constraints = type_constraints;
+      p->size_constraints = size_constraints;
+
+      return p;
+    }
+
 protected:
   void do_set (const octave_value& v)
   {
     array_property::do_set (v);
 
     if (! error_state)
       {
 	dim_vector dv = data.dims ();
@@ -978,16 +1024,18 @@ public:
   bool is_on (void) const { return is ("on"); }
   
   bool_property& operator = (const octave_value& val)
     {
       set (val);
       return *this;
     }
 
+  base_property* clone (void) const { return new bool_property (*this); }
+
 protected:
   void do_set (const octave_value& val)
     {
       if (val.is_bool_scalar ())
         radio_property::do_set (val.bool_value () ? "on" : "off");
       else
         radio_property::do_set (val);
     }
@@ -1017,71 +1065,83 @@ public:
     }
 
   handle_property& operator = (const graphics_handle& h)
     {
       set (octave_value (h.value ()));
       return *this;
     }
 
+  base_property* clone (void) const { return new handle_property (*this); }
+
 protected:
   OCTINTERP_API void do_set (const octave_value& v);
 
 private:
   graphics_handle current_val;
 };
 
 // ---------------------------------------------------------------------
 
 class any_property : public base_property
 {
 public:
   any_property (const std::string& nm, const graphics_handle& h,
                   const octave_value& m = Matrix ())
     : base_property (nm, h), data (m) { }
 
+  any_property (const any_property& p)
+    : base_property (p), data (p.data) { }
+
   octave_value get (void) const { return data; }
 
   any_property& operator = (const octave_value& val)
     {
       set (val);
       return *this;
     }
 
+  base_property* clone (void) const { return new any_property (*this); }
+
 protected:
   void do_set (const octave_value& v) { data = v; }
 
 private:
   octave_value data;
 };
 
 // ---------------------------------------------------------------------
 
 class callback_property : public base_property
 {
 public:
   callback_property (const std::string& nm, const graphics_handle& h,
                      const octave_value& m)
     : base_property (nm, h), callback (m) { }
 
+  callback_property (const callback_property& p)
+    : base_property (p), callback (p.callback) { }
+
   octave_value get (void) const { return callback; }
 
   OCTINTERP_API void execute (const octave_value& data = octave_value ()) const;
 
   OCTINTERP_API static
       void execute (const octave_value& cb, const graphics_handle& h,
 		    const octave_value& data = octave_value ());
 
 
   callback_property& operator = (const octave_value& val)
     {
       set (val);
       return *this;
     }
 
+  base_property* clone (void) const { return new callback_property (*this); }
+
 protected:
   void do_set (const octave_value& v)
     {
       if (validate (v))
         callback = v;
       else
         error ("invalid value for callback property \"%s\"",
                get_name ().c_str ());
@@ -1162,16 +1222,24 @@ public:
     }
 
   void add_listener (const octave_value& v, listener_mode mode = POSTSET)
     { rep->add_listener (v, mode); }
 
   void run_listeners (listener_mode mode = POSTSET)
     { rep->run_listeners (mode); }
 
+  OCTINTERP_API static
+      property create (const std::string& name, const graphics_handle& parent,
+		       const caseless_str& type,
+		       const octave_value_list& args);
+
+  property clone (void) const
+    { return property (rep->clone ()); }
+
   /*
   const string_property& as_string_property (void) const
     { return *(dynamic_cast<string_property*> (rep)); }
 
   const radio_property& as_radio_property (void) const
     { return *(dynamic_cast<radio_property*> (rep)); }
 
   const color_property& as_color_property (void) const
@@ -1462,16 +1530,18 @@ public:
   virtual void set (const caseless_str&, const octave_value&);
 
   virtual octave_value get (const caseless_str&) const;
 
   virtual octave_value get (bool all = false) const;
 
   virtual property get_property (const caseless_str&);
 
+  bool has_property (const caseless_str&);
+
   std::string get_tag (void) const { return tag.string_value (); }
 
   graphics_handle get_parent (void) const { return parent.handle_value (); }
 
   std::string get_type (void) const { return type.string_value (); }
 
   bool is_modified (void) const { return __modified__.is_on (); }
  
