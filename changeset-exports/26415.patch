# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546557713 28800
#      Thu Jan 03 15:21:53 2019 -0800
# Branch stable
# Node ID f553b02e13c6bd201b23f14b9113021a107475a1
# Parent  8e39c5a22bc24adf38834267ff9d3e368f3a2b4d
Use "x == fix (x)" to detect integers rather than floor or round (bug #55347).

* find.cc, oct-stream.cc, ov-usr-fcn.cc, idx-vector.cc,
oct-inttypes.cc: Use "x == fix (x)" to detect integers rather than floor or
round for performance.

diff --git a/libinterp/corefcn/find.cc b/libinterp/corefcn/find.cc
--- a/libinterp/corefcn/find.cc
+++ b/libinterp/corefcn/find.cc
@@ -393,17 +393,17 @@ b = sparse (i, j, v, sz(1), sz(2));
 
   // Setup the default options.
   octave_idx_type n_to_find = -1;
   if (nargin > 1)
     {
       double val = args(1).xscalar_value ("find: N must be an integer");
 
       if (val < 0 || (! octave::math::isinf (val)
-                      && val != octave::math::round (val)))
+                      && val != octave::math::fix (val)))
         error ("find: N must be a non-negative integer");
       else if (! octave::math::isinf (val))
         n_to_find = val;
     }
 
   // Direction to do the searching (1 == forward, -1 == reverse).
   int direction = 1;
   if (nargin > 2)
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -5610,17 +5610,17 @@ namespace octave
           }
         else
           return true;
       }
     else
       {
         double dval = val.double_value (true);
 
-        if (dval == math::round (dval) && dval <= limit)
+        if (dval == math::fix (dval) && dval <= limit)
           return true;
       }
 
     return false;
   }
 
   static bool
   ok_for_unsigned_int_conv (const octave_value& val)
@@ -5637,17 +5637,17 @@ namespace octave
         return ov_is_ge_zero.is_true ();
       }
     else
       {
         double dval = val.double_value (true);
 
         uint64_t limit = std::numeric_limits<uint64_t>::max ();
 
-        if (dval == math::round (dval) && dval >= 0 && dval <= limit)
+        if (dval == math::fix (dval) && dval >= 0 && dval <= limit)
           return true;
       }
 
     return false;
   }
 
   static std::string
   switch_to_g_format (const printf_format_elt *elt)
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -819,17 +819,17 @@ static bool val_in_table (const Matrix& 
     return false;
 
   octave_idx_type i = table.lookup (val, ASCENDING);
   return (i > 0 && table(i-1) == val);
 }
 
 static bool isargout1 (int nargout, const Matrix& ignored, double k)
 {
-  if (k != octave::math::round (k) || k <= 0)
+  if (k != octave::math::fix (k) || k <= 0)
     error ("isargout: K must be a positive integer");
 
   return (k == 1 || k <= nargout) && ! val_in_table (ignored, k);
 }
 
 DEFMETHOD (isargout, interp, args, ,
            doc: /* -*- texinfo -*-
 @deftypefn {} {} isargout (@var{k})
diff --git a/liboctave/array/idx-vector.cc b/liboctave/array/idx-vector.cc
--- a/liboctave/array/idx-vector.cc
+++ b/liboctave/array/idx-vector.cc
@@ -147,17 +147,17 @@ idx_vector::idx_range_rep::idx_range_rep
           if (step < 0 && start + (len - 1)*step < 0)
             octave::err_invalid_index (start + (len - 1)*step);
         }
       else
         {
           // find first non-integer, then gripe about it
           double b = r.base ();
           double inc = r.inc ();
-          octave::err_invalid_index (b != std::floor (b) ? b : b + inc);
+          octave::err_invalid_index (b != std::trunc (b) ? b : b + inc);
         }
     }
 }
 
 octave_idx_type
 idx_vector::idx_range_rep::checkelem (octave_idx_type i) const
 {
   if (i < 0 || i >= len)
diff --git a/liboctave/util/oct-inttypes.cc b/liboctave/util/oct-inttypes.cc
--- a/liboctave/util/oct-inttypes.cc
+++ b/liboctave/util/oct-inttypes.cc
@@ -574,17 +574,17 @@ dbleget (bool sign, uint32_t mtis, int e
   double x = ldexp (static_cast<double> (mtis), exp);
   return sign ? -x : x;
 }
 
 template <>
 OCTAVE_API octave_uint64
 operator * (const octave_uint64& x, const double& y)
 {
-  if (y >= 0 && y < octave_uint64::max () && y == octave::math::round (y))
+  if (y >= 0 && y < octave_uint64::max () && y == octave::math::fix (y))
     return x * octave_uint64 (static_cast<uint64_t> (y));
   else if (y == 0.5)
     return x / octave_uint64 (static_cast<uint64_t> (2));
   else if (y < 0 || octave::math::isnan (y) || octave::math::isinf (y))
     return octave_uint64 (x.value () * y);
   else
     {
       bool sign;
@@ -609,17 +609,17 @@ operator * (const double& x, const octav
 {
   return y * x;
 }
 
 template <>
 OCTAVE_API octave_int64
 operator * (const octave_int64& x, const double& y)
 {
-  if (fabs (y) < octave_int64::max () && y == octave::math::round (y))
+  if (fabs (y) < octave_int64::max () && y == octave::math::fix (y))
     return x * octave_int64 (static_cast<int64_t> (y));
   else if (fabs (y) == 0.5)
     return x / octave_int64 (static_cast<uint64_t> (4*y));
   else if (octave::math::isnan (y) || octave::math::isinf (y))
     return octave_int64 (x.value () * y);
   else
     {
       bool sign;
@@ -659,27 +659,27 @@ operator / (const double& x, const octav
 {
   return octave_int64 (x / static_cast<double> (y));
 }
 
 template <>
 OCTAVE_API octave_uint64
 operator / (const octave_uint64& x, const double& y)
 {
-  if (y >= 0 && y < octave_uint64::max () && y == octave::math::round (y))
+  if (y >= 0 && y < octave_uint64::max () && y == octave::math::fix (y))
     return x / octave_uint64 (y);
   else
     return x * (1.0/y);
 }
 
 template <>
 OCTAVE_API octave_int64
 operator / (const octave_int64& x, const double& y)
 {
-  if (fabs (y) < octave_int64::max () && y == octave::math::round (y))
+  if (fabs (y) < octave_int64::max () && y == octave::math::fix (y))
     return x / octave_int64 (y);
   else
     return x * (1.0/y);
 }
 
 #define INSTANTIATE_INT64_DOUBLE_CMP_OP0(OP, T1, T2)                    \
   template OCTAVE_API bool                                              \
   octave_int_cmp_op::emulate_mop<octave_int_cmp_op::OP> (T1 x, T2 y)
@@ -746,32 +746,32 @@ octave_int<T>
 pow (const double& a, const octave_int<T>& b)
 { return octave_int<T> (std::pow (a, b.double_value ())); }
 
 template <typename T>
 octave_int<T>
 pow (const octave_int<T>& a, const double& b)
 {
   return ((b >= 0 && b < std::numeric_limits<T>::digits
-           && b == octave::math::round (b))
+           && b == octave::math::fix (b))
           ? pow (a, octave_int<T> (static_cast<T> (b)))
           : octave_int<T> (std::pow (a.double_value (), b)));
 }
 
 template <typename T>
 octave_int<T>
 pow (const float& a, const octave_int<T>& b)
 { return octave_int<T> (std::pow (a, b.float_value ())); }
 
 template <typename T>
 octave_int<T>
 pow (const octave_int<T>& a, const float& b)
 {
   return ((b >= 0 && b < std::numeric_limits<T>::digits
-           && b == octave::math::round (b))
+           && b == octave::math::fix (b))
           ? pow (a, octave_int<T> (static_cast<T> (b)))
           : octave_int<T> (std::pow (a.double_value (),
                                      static_cast<double> (b))));
 }
 
 // FIXME: Do we really need a differently named single-precision function
 //        integer power function here instead of an overloaded one?
 template <typename T>
@@ -779,17 +779,17 @@ octave_int<T>
 powf (const float& a, const octave_int<T>& b)
 { return octave_int<T> (pow (a, b.float_value ())); }
 
 template <typename T>
 octave_int<T>
 powf (const octave_int<T>& a, const float& b)
 {
   return ((b >= 0 && b < std::numeric_limits<T>::digits
-           && b == octave::math::round (b))
+           && b == octave::math::fix (b))
           ? pow (a, octave_int<T> (static_cast<T> (b)))
           : octave_int<T> (std::pow (a.double_value (),
                                      static_cast<double> (b))));
 }
 
 #define INSTANTIATE_INTTYPE(T)                                          \
   template class OCTAVE_API octave_int<T>;                              \
                                                                         \
