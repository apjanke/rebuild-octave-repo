# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1381489506 -7200
#      Fri Oct 11 13:05:06 2013 +0200
# Node ID 811019b9ef578f8684a5b4cae3d6447773fa31bd
# Parent  82b1778798d339103e2850f079966551345f1a59
Add help and documentation on actual keyword to the editor menu

* octave-qscintilla.cc(context_help_doc): new function for editor menu action;
  (get_global_textcursor_pos): new function for calculationg the cursor pos;
  (contextMenuEvent): uses get_global_textcursor_pos now, added context menu
  entry for documentation;
  (contextmenu_help,contextmenu_doc): slots for context menu;
  (contextmenu_help_doc): new common function used from context_help_doc and the
  context menu slots
* octave-qscintilla.h: new functions context_help_doc, contextmenu_doc,
  contextmenu_help_doc, get_global_textcursor_pos

* file-editor-tab.cc(context_help): new slot for editor menu action
* file-editor-tab.h: new slot context_help

* file-editor.cc(request_context_help,request_context_doc): new slots for
  help menu entries;
  (construct): new help menu with keyword help and documentation;
  (add_file_editor_tab): connect new signal fetab_context_help to the new
  slot context_help in file_editor_tab;
  (set_shortcuts): enable/disable new shortcuts when editor focus changes
  (check_actions): enable/disable new actions depending on existing tabs
* file-editor.h: new signal fetab_context_help, new slots request_context_help
  and request_contest_doc, new help and doc actions

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -404,16 +404,25 @@ file_editor_tab::paste (const QWidget *I
 {
   if (ID != this)
     return;
 
   _edit_area->paste ();
 }
 
 void
+file_editor_tab::context_help (const QWidget *ID, bool doc)
+{
+  if (ID != this)
+    return;
+
+  _edit_area->context_help_doc (doc);
+}
+
+void
 file_editor_tab::save_file (const QWidget *ID)
 {
   if (ID != this)
     return;
 
   save_file (_file_name);
 }
 void
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -65,16 +65,17 @@ public slots:
   void file_name_query (const QWidget *ID);
 
   void set_focus (const QWidget *ID);
   void undo (const QWidget *ID);
   void redo (const QWidget *ID);
   void copy (const QWidget *ID);
   void cut (const QWidget *ID);
   void paste (const QWidget *ID);
+  void context_help (const QWidget *ID, bool);
   void save_file (const QWidget *ID);
   void save_file (const QWidget *ID, const QString& fileName,
                   bool remove_on_success);
   void save_file_as (const QWidget *ID);
   void print_file (const QWidget *ID);
   void run_file (const QWidget *ID);
   void toggle_bookmark (const QWidget *ID);
   void next_bookmark (const QWidget *ID);
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -462,16 +462,27 @@ file_editor::request_cut (void)
 
 void
 file_editor::request_paste (void)
 {
   emit fetab_paste (_tab_widget->currentWidget ());
 }
 
 void
+file_editor::request_context_help (bool)
+{
+  emit fetab_context_help (_tab_widget->currentWidget (), false);
+}
+void
+file_editor::request_context_doc (bool)
+{
+  emit fetab_context_help (_tab_widget->currentWidget (), true);
+}
+
+void
 file_editor::request_save_file (void)
 {
   emit fetab_save_file (_tab_widget->currentWidget ());
 }
 
 void
 file_editor::request_save_file_as (void)
 {
@@ -922,16 +933,25 @@ file_editor::construct (void)
   _debug_menu->addSeparator ();
   // The other debug actions will be added by the main window.
   _menu_bar->addMenu (_debug_menu);
 
   QMenu *_run_menu = new QMenu (tr ("&Run"), _menu_bar);
   _run_menu->addAction (_run_action);
   _menu_bar->addMenu (_run_menu);
 
+  QMenu *_help_menu = new QMenu (tr ("&Help"), _menu_bar);
+  _context_help_action =
+    _help_menu->addAction (QIcon (), tr ("&Help on Keyword"),
+                           this, SLOT (request_context_help (bool)));
+  _context_doc_action =
+    _help_menu->addAction (QIcon (), tr ("&Documentation on Keyword"),
+                           this, SLOT (request_context_doc (bool)));
+  _menu_bar->addMenu (_help_menu);
+
   // shortcuts
   set_shortcuts (true);
 
   // layout
   QVBoxLayout *vbox_layout = new QVBoxLayout ();
   vbox_layout->addWidget (_menu_bar);
   vbox_layout->addWidget (_tool_bar);
   vbox_layout->addWidget (_tab_widget);
@@ -1102,16 +1122,19 @@ file_editor::add_file_editor_tab (file_e
            f, SLOT (copy (const QWidget*)));
 
   connect (this, SIGNAL (fetab_cut (const QWidget*)),
            f, SLOT (cut (const QWidget*)));
 
   connect (this, SIGNAL (fetab_paste (const QWidget*)),
            f, SLOT (paste (const QWidget*)));
 
+  connect (this, SIGNAL (fetab_context_help (const QWidget*, bool)),
+           f, SLOT (context_help (const QWidget*, bool)));
+
   connect (this, SIGNAL (fetab_save_file (const QWidget*)),
            f, SLOT (save_file (const QWidget*)));
 
   connect (this, SIGNAL (fetab_save_file_as (const QWidget*)),
            f, SLOT (save_file_as (const QWidget*)));
 
   connect (this, SIGNAL (fetab_print_file (const QWidget*)),
            f, SLOT (print_file (const QWidget*)));
@@ -1200,16 +1223,18 @@ file_editor::set_shortcuts (bool set)
   if (set)
     {
       _comment_selection_action->setShortcut (Qt::ControlModifier + Qt::Key_7);
       _uncomment_selection_action->setShortcut (Qt::ControlModifier + Qt::Key_8);
 
       _copy_action->setShortcut (QKeySequence::Copy);
       _cut_action->setShortcut (QKeySequence::Cut);
       _paste_action->setShortcut (QKeySequence::Paste);
+      _context_help_action->setShortcut (QKeySequence::HelpContents);
+      _context_doc_action->setShortcut (Qt::SHIFT + Qt::Key_F1);
 
       _find_action->setShortcut (QKeySequence::Find);
       _goto_line_action->setShortcut (Qt::ControlModifier+ Qt::Key_G);
 
       _next_bookmark_action->setShortcut (Qt::Key_F2);
       _previous_bookmark_action->setShortcut (Qt::SHIFT + Qt::Key_F2);
       _toggle_bookmark_action->setShortcut (Qt::Key_F7);
 
@@ -1228,16 +1253,17 @@ file_editor::set_shortcuts (bool set)
       QKeySequence no_key = QKeySequence ();
 
       _comment_selection_action->setShortcut (no_key);
       _uncomment_selection_action->setShortcut (no_key);
 
       _copy_action->setShortcut (no_key);
       _cut_action->setShortcut (no_key);
       _paste_action->setShortcut (no_key);
+      _context_help_action->setShortcut (no_key);
 
       _find_action->setShortcut (no_key);
       _goto_line_action->setShortcut (no_key);
 
       _next_bookmark_action->setShortcut (no_key);
       _previous_bookmark_action->setShortcut (no_key);
       _toggle_bookmark_action->setShortcut (no_key);
 
@@ -1259,16 +1285,18 @@ file_editor::check_actions ()
   bool  have_tabs = _tab_widget->count () > 0;
 
   _comment_selection_action->setEnabled (have_tabs);
   _uncomment_selection_action->setEnabled (have_tabs);
 
   _copy_action->setEnabled (have_tabs);
   _cut_action->setEnabled (have_tabs);
   _paste_action->setEnabled (have_tabs);
+  _context_help_action->setEnabled (have_tabs);
+  _context_doc_action->setEnabled (have_tabs);
 
   _find_action->setEnabled (have_tabs);
   _goto_line_action->setEnabled (have_tabs);
 
   _next_bookmark_action->setEnabled (have_tabs);
   _previous_bookmark_action->setEnabled (have_tabs);
   _toggle_bookmark_action->setEnabled (have_tabs);
 
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -69,16 +69,17 @@ signals:
                         bool remove_on_success);
   // No fetab_open, functionality in editor
   // No fetab_new, functionality in editor
   void fetab_undo (const QWidget* ID);
   void fetab_redo (const QWidget* ID);
   void fetab_copy (const QWidget* ID);
   void fetab_cut (const QWidget* ID);
   void fetab_paste (const QWidget* ID);
+  void fetab_context_help (const QWidget* ID, bool);
   void fetab_save_file (const QWidget* ID);
   void fetab_save_file_as (const QWidget* ID);
   void fetab_print_file (const QWidget* ID);
   void fetab_run_file (const QWidget* ID);
   void fetab_toggle_bookmark (const QWidget* ID);
   void fetab_next_bookmark (const QWidget* ID);
   void fetab_previous_bookmark (const QWidget* ID);
   void fetab_remove_bookmark (const QWidget* ID);
@@ -109,16 +110,18 @@ public slots:
   void request_mru_open_file (QAction *action);
   void request_print_file (void);
 
   void request_undo (void);
   void request_redo (void);
   void request_copy (void);
   void request_cut (void);
   void request_paste (void);
+  void request_context_help (bool);
+  void request_context_doc (bool);
   void request_save_file (void);
   void request_save_file_as (void);
   void request_run_file (void);
   void request_toggle_bookmark (void);
   void request_next_bookmark (void);
   void request_previous_bookmark (void);
   void request_remove_bookmark (void);
 
@@ -185,16 +188,18 @@ private:
   QMenu *_debug_menu;
 
   QAction *_comment_selection_action;
   QAction *_uncomment_selection_action;
 
   QAction *_copy_action;
   QAction *_cut_action;
   QAction *_paste_action;
+  QAction *_context_help_action;
+  QAction *_context_doc_action;
 
   QAction *_find_action;
   QAction *_goto_line_action;
 
   QAction *_next_bookmark_action;
   QAction *_previous_bookmark_action;
   QAction *_toggle_bookmark_action;
   QAction * _remove_bookmark_action;
diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -35,16 +35,40 @@ along with Octave; see the file COPYING.
 
 octave_qscintilla::octave_qscintilla (QWidget *p)
     : QsciScintilla (p)
 { }
 
 octave_qscintilla::~octave_qscintilla ()
 { }
 
+void
+octave_qscintilla::get_global_textcursor_pos (QPoint *global_pos, QPoint *local_pos)
+{
+  long position = SendScintilla (QsciScintillaBase::SCI_GETCURRENTPOS);
+  long point_x  = SendScintilla
+                    (QsciScintillaBase::SCI_POINTXFROMPOSITION,0,position);
+  long point_y  = SendScintilla
+                    (QsciScintillaBase::SCI_POINTYFROMPOSITION,0,position);
+  *local_pos = QPoint (point_x,point_y);  // local cursor position
+  *global_pos = mapToGlobal (*local_pos); // global position of cursor
+}
+
+// call documentation or help on the current word
+void
+octave_qscintilla::context_help_doc (bool documentation)
+{
+  QPoint global_pos, local_pos;
+  get_global_textcursor_pos (&global_pos, &local_pos);
+  _word_at_cursor = wordAtPoint (local_pos);
+  QString lexer_name = lexer ()->lexer ();
+  if ((lexer_name == "octave" || lexer_name == "matlab")
+                              && !_word_at_cursor.isEmpty ())
+    contextmenu_help_doc (documentation);
+}
 
 #ifdef HAVE_QSCI_VERSION_2_6_0
 // context menu requested
 void
 octave_qscintilla::contextMenuEvent (QContextMenuEvent *e)
 {
   QMenu *context_menu = createStandardContextMenu ( );  // standard menu
 
@@ -53,23 +77,17 @@ octave_qscintilla::contextMenuEvent (QCo
 
   if (e->reason () == QContextMenuEvent::Mouse)
     { // context menu by mouse
       global_pos = e->globalPos ();            // global mouse position
       local_pos  = e->pos ();                  // local mouse position
     }
   else
     { // context menu by keyboard or other: get point of text cursor
-      long position = SendScintilla (QsciScintillaBase::SCI_GETCURRENTPOS);
-      long point_x  = SendScintilla
-                        (QsciScintillaBase::SCI_POINTXFROMPOSITION,0,position);
-      long point_y  = SendScintilla
-                        (QsciScintillaBase::SCI_POINTYFROMPOSITION,0,position);
-      local_pos = QPoint (point_x,point_y);  // local cursor position
-      global_pos = mapToGlobal (local_pos); // global position of cursor
+      get_global_textcursor_pos (&global_pos, &local_pos);
       QRect editor_rect = geometry ();      // editor rect mapped to global
       editor_rect.moveTopLeft
               (parentWidget ()->mapToGlobal (editor_rect.topLeft ()));
       if (!editor_rect.contains (global_pos))  // is cursor outside editor?
         global_pos = editor_rect.topLeft ();   // yes, take top left corner
     }
 
   // additional custom entries of the context menu
@@ -77,27 +95,45 @@ octave_qscintilla::contextMenuEvent (QCo
 
   // help menu: get the position of the mouse or the text cursor
   // (only for octave files)
   QString lexer_name = lexer ()->lexer ();
   if (lexer_name == "octave" || lexer_name == "matlab")
     {
       _word_at_cursor = wordAtPoint (local_pos);
       if (!_word_at_cursor.isEmpty ())
-        context_menu->addAction (tr ("help") + " " + _word_at_cursor,
+        context_menu->addAction (tr ("Help on") + " " + _word_at_cursor,
                                 this, SLOT (contextmenu_help (bool)));
+        context_menu->addAction (tr ("Documentation on") + " " + _word_at_cursor,
+                                this, SLOT (contextmenu_doc (bool)));
     }
 
   // finaly show the menu
   context_menu->exec (global_pos);
 }
 #endif
 
 
-// handle the menu entry for calling help
+// handle the menu entry for calling help or doc
+void
+octave_qscintilla::contextmenu_doc (bool)
+{
+  contextmenu_help_doc (true);
+}
 void
 octave_qscintilla::contextmenu_help (bool)
 {
-  QString command = "help " + _word_at_cursor;
-  emit execute_command_in_terminal_signal (command);
+  contextmenu_help_doc (false);
+}
+
+// common function with flag for documentation
+void
+octave_qscintilla::contextmenu_help_doc (bool documentation)
+{
+  QString command;
+  if (documentation)
+    command = "doc ";
+  else
+    command = "help ";
+  emit execute_command_in_terminal_signal (command + _word_at_cursor);
 }
 
 #endif
diff --git a/libgui/src/m-editor/octave-qscintilla.h b/libgui/src/m-editor/octave-qscintilla.h
--- a/libgui/src/m-editor/octave-qscintilla.h
+++ b/libgui/src/m-editor/octave-qscintilla.h
@@ -36,24 +36,28 @@ class octave_qscintilla : public QsciSci
 public:
 
   octave_qscintilla (QWidget *p);
   ~octave_qscintilla ();
 
 #ifdef HAVE_QSCI_VERSION_2_6_0
   virtual void contextMenuEvent (QContextMenuEvent *e);
 #endif
+  void context_help_doc (bool);
 
 signals:
 
   void execute_command_in_terminal_signal (const QString&);
 
 private slots:
 
   void contextmenu_help (bool);
+  void contextmenu_doc (bool);
+  void contextmenu_help_doc (bool);
+  void get_global_textcursor_pos (QPoint *global_pos, QPoint *local_pos);
 
 private:
 
   QString _word_at_cursor;
 
 };
 
 #endif
