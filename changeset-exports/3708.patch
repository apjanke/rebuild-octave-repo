# HG changeset patch
# User jwe
# Date 964817620 0
#      Fri Jul 28 20:53:40 2000 +0000
# Node ID 9b9efdcbdfd35ab5135c11f89fc4c19ccfebfaaf
# Parent  58140935c8128a06330ebb26e331a780f8a53213
[project @ 2000-07-28 20:50:58 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 2000-07-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pt-pr-code.h (tree_print_code::curr_print_indent_level,
+	(tree_print_code::beginning_of_line): No longer static.
+	(tree_print_code::tree_print_code): Initialize them here.
+	* pt-pr-code.cc: Not here.
+
+	* pt-stmt.cc (tree_statement::eval): Set curr_statement here.
+	(tree_statement_list::eval): Not here.
+
 	Debug-on-error stuff based on a patch submitted by Paul Kienzle
 	<pkienzle@kienzle.powernet.co.uk> for 2.0.x.
 
 	* error.cc (Vdebug_on_warning): New static flag variable.
 	(debug_on_warning): New function.
 	(symbols_of_warning): DEFVAR debug_on_warning.
 	(warning): Handle debug_on_warning here.
 
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -215,41 +215,53 @@ pr_where_1 (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   error_1 (0, fmt, args);
   va_end (args);
 }
 
 static void
-pr_where (void)
+pr_where (const char *name)
 {
   if (curr_statement)
     {
-      std::string fcn_name = curr_function->function_name ();
-      std::string file_name = curr_function->fcn_file_name ();
+      const char *f_nm = 0;
 
-      const char *nm
-	= file_name.empty () ? fcn_name.c_str () : file_name.c_str ();
+      if (curr_function)
+	{
+	  std::string fcn_name = curr_function->function_name ();
+	  std::string file_name = curr_function->fcn_file_name ();
+
+	  f_nm = file_name.empty () ? fcn_name.c_str () : file_name.c_str ();
+	}
 
       int l = curr_statement->line ();
       int c = curr_statement->column ();
 
-      pr_where_1 ("error: in %s near line %d, column %d:", nm, l, c);
+      if (f_nm)
+	pr_where_1 ("%s: in %s near line %d, column %d:", name, f_nm, l, c);
+      else
+	pr_where_1 ("%s: near line %d, column %d:", name, l, c);
 
-      // Oops, note that the column number may not be correct
-      // since the code is being reproduced from the parse tree.
+      // XXX FIXME XXX -- Note that the column number is probably not
+      // going to mean much here since the code is being reproduced
+      // from the parse tree, and we are only showing one statement
+      // even if there were multiple statements on the original source
+      // line.
 
       std::ostrstream output_buf;
 
-      tree_print_code tpc (output_buf, "    ");
+      output_buf << "\n";
+
+      tree_print_code tpc (output_buf, ">>> ");
 
       curr_statement->accept (tpc);
 
-      output_buf << ends;
+      output_buf << "\n" << ends;
 
       char *msg = output_buf.str ();
 
       pr_where_1 (msg);
 
       delete [] msg;
     }
 }
@@ -258,24 +270,24 @@ void
 warning (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   warning_state = 1;
   vwarning ("warning", fmt, args);
   va_end (args);
 
+  pr_where ("warning");
+
   if ((interactive || forced_interactive)
       && Vdebug_on_warning && curr_function)
     {
       unwind_protect_bool (Vdebug_on_warning);
       Vdebug_on_warning = false;
 
-      pr_where ();
-
       do_keyboard (octave_value_list ());
 
       unwind_protect::run ();
     }
 }
 
 void
 error (const char *fmt, ...)
@@ -288,17 +300,17 @@ error (const char *fmt, ...)
   va_end (args);
 
   if ((interactive || forced_interactive)
       && Vdebug_on_error && init_state == 0 && curr_function)
     {
       unwind_protect_bool (Vdebug_on_error);
       Vdebug_on_error = false;
 
-      pr_where ();
+      pr_where ("error");
 
       error_state = 0;
 
       do_keyboard (octave_value_list ());
 
       unwind_protect::run ();
     }
 }
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -1213,22 +1213,16 @@ tree_print_code::visit_do_until_command 
   tree_expression *expr = cmd.condition ();
 
   if (expr)
     expr->accept (*this);
 
   newline ();
 }
 
-// Current indentation.
-int tree_print_code::curr_print_indent_level = 0;
-
-// TRUE means we are at the beginning of a line.
-bool tree_print_code::beginning_of_line = true;
-
 // Each print_code() function should call this before printing
 // anything.
 //
 // This doesn't need to be fast, but isn't there a better way?
 
 void
 tree_print_code::indent (void)
 {
diff --git a/src/pt-pr-code.h b/src/pt-pr-code.h
--- a/src/pt-pr-code.h
+++ b/src/pt-pr-code.h
@@ -36,19 +36,21 @@ class tree_expression;
 
 // How to print the code that the parse trees represent.
 
 class
 tree_print_code : public tree_walker
 {
 public:
 
-  tree_print_code (std::ostream& os_arg, const std::string& pfx = std::string (),
+  tree_print_code (std::ostream& os_arg,
+		   const std::string& pfx = std::string (),
 		   bool pr_orig_txt = true)
-    : os (os_arg), prefix (pfx), print_original_text (pr_orig_txt) { }
+    : os (os_arg), prefix (pfx), print_original_text (pr_orig_txt),
+      curr_print_indent_level (0), beginning_of_line (true) { }
 
   ~tree_print_code (void) { }
 
   void visit_argument_list (tree_argument_list&);
 
   void visit_binary_expression (tree_binary_expression&);
 
   void visit_break_command (tree_break_command&);
@@ -144,18 +146,21 @@ public:
 private:
 
   std::ostream& os;
 
   std::string prefix;
 
   bool print_original_text;
 
-  static int curr_print_indent_level;
-  static bool beginning_of_line;
+  // Current indentation.
+  int curr_print_indent_level;
+
+  // TRUE means we are at the beginning of a line.
+  bool beginning_of_line;
 
   void reset_indent_level (void)
     { curr_print_indent_level = 0; }
 
   void increment_indent_level (void)
     { curr_print_indent_level += 2; }
 
   void decrement_indent_level (void)
diff --git a/src/pt-stmt.cc b/src/pt-stmt.cc
--- a/src/pt-stmt.cc
+++ b/src/pt-stmt.cc
@@ -91,16 +91,19 @@ octave_value_list
 tree_statement::eval (bool silent, int nargout, bool in_function_body)
 {
   octave_value_list retval;
 
   bool pf = silent ? false : print_flag;
 
   if (cmd || expr)
     {
+      unwind_protect_ptr (curr_statement);
+      curr_statement = this;
+
       maybe_echo_code (in_function_body);
 
       if (cmd)
 	cmd->eval ();
       else
 	{
 	  expr->set_print_flag (pf);
 
@@ -125,16 +128,18 @@ tree_statement::eval (bool silent, int n
 	    do_bind_ans = (! (expr->is_indirect_ref ()
 			      || expr->is_assignment_expression ()));
 
 	  retval = expr->rvalue (nargout);
 
 	  if (do_bind_ans && ! (error_state || retval.empty ()))
 	    bind_ans (retval(0), pf);
 	}
+
+      unwind_protect::run ();
     }
 
   return retval;
 }
 
 void
 tree_statement::accept (tree_walker& tw)
 {
@@ -153,23 +158,18 @@ tree_statement_list::eval (bool silent, 
     {
       tree_statement *elt = this->operator () (p);
 
       if (elt)
 	{
 	  bool silent_flag =
 	    silent ? true : (function_body ? Vsilent_functions : false);
 
-	  unwind_protect_ptr (curr_statement);
-	  curr_statement = elt;
-
 	  retval = elt->eval (silent_flag, nargout, function_body);
 
-	  unwind_protect::run ();
-
 	  if (error_state)
 	    break;
 
 	  if (tree_break_command::breaking
 	      || tree_continue_command::continuing)
 	    break;
 
 	  if (tree_return_command::returning)
