# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1367182800 14400
#      Sun Apr 28 17:00:00 2013 -0400
# Node ID fa4a035e0cf433b0ad3742ac18fc698fd56f681b
# Parent  adc150db18099fdd02f4ad184faf3e3fe55a612b
Add octave_link uiputfile implementation

* libgui/src/dialog.cc, libgui/src/dialog.h
  (FileDialog::FileDialog): Change bool multiselect to QString multimode, add mode option of 'create' and set options accordingly.
  (QUIWidgetCreator::signal_filedialog): Change bool multiselect to QString multimode.
  (QUIWidgetCreator::create_filedialog): Change bool multiselect to QString multimode.

* libgui/src/main-window.cc, libgui/src/main-window.h
  (main_window::connect_uiwidget_links): update bool multiselect to QString multimode.
  (main_window::handle_create_filedialog): update bool multiselect to QString multimode.

* libgui/src/octave-qt-link.h
  (octave_qt_link::do_file_dialog): update bool multiselect to std::string multimode.

* libinterp/interpfcn/octave-link.h
  (octave_link::do_file_dialog): update bool multiselect to std::string multimode.
  (octave_link::file_dialog): update bool multiselect to std::string multimode.

* scripts/plot/uiputfile.m
  (uiputfile): update to call __octave_link_file_dialog__ if octave_link is present.

diff --git a/libgui/src/dialog.cc b/libgui/src/dialog.cc
--- a/libgui/src/dialog.cc
+++ b/libgui/src/dialog.cc
@@ -419,32 +419,45 @@ InputDialog::reject (void)
 {
   buttonCancel_clicked ();
 }
 
 FileDialog::FileDialog (const QStringList& filters,
                         const QString& title,
                         const QString& filename,
                         const QString& dirname,
-                        bool multiselect)
+                        const QString& multimode)
   : QFileDialog()
 {
   // Create a NonModal message.
   setWindowModality (Qt::NonModal);
 
   setWindowTitle (title.isEmpty () ? " " : title);
   setDirectory (dirname);
 
-  if (multiselect)
-    setFileMode (QFileDialog::ExistingFiles);
-  else
-    setFileMode (QFileDialog::ExistingFile);
+  if (multimode == "on")         // uigetfile multiselect=on
+    {
+      setFileMode (QFileDialog::ExistingFiles);
+      setAcceptMode (QFileDialog::AcceptOpen);
+    }
+  else if(multimode == "create") // uiputfile
+    {
+      setFileMode (QFileDialog::AnyFile); 
+      setAcceptMode (QFileDialog::AcceptSave);
+      setOption (QFileDialog::DontConfirmOverwrite, false);
+      setConfirmOverwrite(true);
+    }
+  else                           // uigetfile multiselect=off
+    {
+      setFileMode (QFileDialog::ExistingFile);
+      setAcceptMode (QFileDialog::AcceptOpen);
+    }
 
   setNameFilters (filters);
-  setAcceptMode (QFileDialog::AcceptOpen);
+
   selectFile (filename);
   
   connect (this,
            SIGNAL (finish_input (const QStringList&, const QString&, int)),
            &uiwidget_creator,
            SLOT (filedialog_finished (const QStringList&, const QString&,
                                       int)));
 }
diff --git a/libgui/src/dialog.h b/libgui/src/dialog.h
--- a/libgui/src/dialog.h
+++ b/libgui/src/dialog.h
@@ -101,19 +101,19 @@ public:
 
     return true;
   };
 
   const QStringList *get_string_list (void) { return string_list; }
 
   bool signal_filedialog (const QStringList& filters, const QString& title, 
                           const QString& filename, const QString& dirname, 
-                          bool multiselect)
+                          const QString &multimode)
   {
-    emit create_filedialog (filters, title, filename, dirname, multiselect);
+    emit create_filedialog (filters, title, filename, dirname, multimode);
     return true;
   }
 
   const QString *get_dialog_path (void) { return path_name; }
 
   void wait (void)
   {
     // Wait while the user is responding to message box.
@@ -130,17 +130,17 @@ signals:
                         const QString&, const QString&);
 
   void create_inputlayout (const QStringList&, const QString&,
                            const QFloatList&, const QFloatList&,
                            const QStringList&);
 
   void create_filedialog (const QStringList& filters, const QString& title,
                           const QString& filename, const QString& dirname,
-                          bool multiselect);
+                          const QString& multimode);
 public slots:
 
   void dialog_button_clicked (QAbstractButton *button);
 
   void list_select_finished (const QIntList& selected, int button_pressed);
 
   void input_finished (const QStringList& input, int button_pressed);
 
@@ -248,17 +248,17 @@ public slots:
 class FileDialog : public QFileDialog
 {
   Q_OBJECT
 
 public:
 
   explicit FileDialog (const QStringList& filters,
                        const QString& title, const QString& filename, 
-                       const QString& dirname, bool multiselect);
+                       const QString& dirname, const QString& multimode);
 
 signals:
 
   void finish_input (const QStringList&, const QString&, int);
 
 private slots:
 
   void reject (void);
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -649,21 +649,21 @@ main_window::connect_uiwidget_links ()
                                        const QStringList&)),
            this,
            SLOT (handle_create_inputlayout (const QStringList&, const QString&,
                                             const QFloatList&, const QFloatList&,
                                             const QStringList&)));
 
   connect (&uiwidget_creator,
            SIGNAL (create_filedialog (const QStringList &,const QString&,
-                                      const QString&, const QString&, bool)),
+                                      const QString&, const QString&, const QString&)),
            this,
            SLOT (handle_create_filedialog (const QStringList &, const QString&,
                                            const QString&, const QString&,
-                                           bool)));
+                                           const QString&)));
 }
 
 // Create a message dialog with specified string, buttons and decorative
 // text.
 
 void
 main_window::handle_create_dialog (const QString& message,
                                    const QString& title,
@@ -715,20 +715,20 @@ main_window::handle_create_inputlayout (
   input_dialog->show ();
 }
 
 void
 main_window::handle_create_filedialog (const QStringList& filters,
                                        const QString& title, 
                                        const QString& filename, 
                                        const QString& dirname,
-                                       bool multiselect)
+                                       const QString& multimode)
 {
   FileDialog *file_dialog = new FileDialog (filters, title, filename,
-                                            dirname, multiselect);
+                                            dirname, multimode);
 
   file_dialog->setAttribute (Qt::WA_DeleteOnClose);
   file_dialog->show ();
 }
 
 // Main subroutine of the constructor
 void
 main_window::construct (void)
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -155,17 +155,17 @@ public slots:
 
   void handle_create_inputlayout (const QStringList&, const QString&,
                                   const QFloatList&, const QFloatList&,
                                   const QStringList&);
 
   void handle_create_filedialog (const QStringList &filters, 
                                  const QString& title, const QString& filename, 
                                  const QString &dirname,
-                                 bool multiselect);
+                                 const QString& multimode);
 
   // find files dialog 
   void find_files(const QString &startdir=QDir::currentPath());
   void find_files_finished(int);
 protected:
   void closeEvent (QCloseEvent * closeEvent);
 
 private:
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -221,25 +221,25 @@ octave_qt_link::do_input_dialog (const s
   return retval;
 }
 
 std::list<std::string>
 octave_qt_link::do_file_dialog (const filter_list& filter,
                                 const std::string& title,
                                 const std::string& filename,
                                 const std::string& dirname,
-                                bool multiselect)
+                                const std::string& multimode)
 {
   std::list<std::string> retval;
 
   uiwidget_creator.signal_filedialog (make_filter_list (filter),
                                       QString::fromStdString (title),
                                       QString::fromStdString (filename),
                                       QString::fromStdString (dirname),
-                                      multiselect);
+                                      QString::fromStdString (multimode));
 
   // Wait while the user is responding to dialog.
   uiwidget_creator.wait ();
 
   // Add all the file dialog results to a string list.
   const QStringList *inputLine = uiwidget_creator.get_string_list ();
 
   for (QStringList::const_iterator it = inputLine->begin ();
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -82,17 +82,17 @@ public:
                    const std::string& title,
                    const std::list<float>& nr,
                    const std::list<float>& nc,
                    const std::list<std::string>& defaults);
 
   std::list<std::string>
   do_file_dialog (const filter_list& filter, const std::string& title, 
                   const std::string &filename, const std::string &pathname,
-                  bool multiselect);
+                  const std::string& multimode);
 
   int
   do_debug_cd_or_addpath_error (const std::string& file,
                                 const std::string& dir,
                                 bool addpath_option);
 
   void do_change_directory (const std::string& dir);
 
diff --git a/libinterp/interpfcn/octave-link.cc b/libinterp/interpfcn/octave-link.cc
--- a/libinterp/interpfcn/octave-link.cc
+++ b/libinterp/interpfcn/octave-link.cc
@@ -203,34 +203,34 @@ Undocumented internal function.\n\
 
   if (args.length () == 6)
     {
 
       const Array<std::string> flist = args (0).cellstr_value ();
       std::string title = args (1).string_value ();
       std::string filename = args (2).string_value ();
       Matrix pos = args (3).matrix_value ();
-      std::string multi_on = args (4).string_value (); // on, off
+      std::string multi_on = args (4).string_value (); // on, off, create
       std::string pathname = args (5).string_value ();
 
       octave_idx_type nel = flist.numel ();
       octave_link::filter_list filter_lst;
 
       for (octave_idx_type i = 0; i < flist.rows (); i++)
         filter_lst.push_back (std::make_pair (flist(i,0),
                                               (flist.columns () > 1
                                                ? flist(i,1) : "")));
 
       if (! error_state)
         {
           flush_octave_stdout ();
 
           std::list<std::string> items_lst
             = octave_link::file_dialog (filter_lst, title, filename, pathname,
-                                        multi_on == "on" ? true : false);
+                                        multi_on);
 
           nel = items_lst.size ();
 
           retval.resize (3);
 
           // If 3, then is filename, directory and selected index.
           if (nel <= 3)
             {
diff --git a/libinterp/interpfcn/octave-link.h b/libinterp/interpfcn/octave-link.h
--- a/libinterp/interpfcn/octave-link.h
+++ b/libinterp/interpfcn/octave-link.h
@@ -179,20 +179,20 @@ public:
       : std::list<std::string> ();
   }
 
   typedef std::list<std::pair<std::string, std::string> > filter_list;
 
   static std::list<std::string>
   file_dialog (const filter_list& filter, const std::string& title,
                const std::string& filename, const std::string& dirname,
-               bool multiselect)
+               const std::string& multimode)
   {
     return enabled ()
-      ? instance->do_file_dialog (filter, title, filename, dirname, multiselect)
+      ? instance->do_file_dialog (filter, title, filename, dirname, multimode)
       : std::list<std::string> ();
   }
 
 
   static int debug_cd_or_addpath_error (const std::string& file,
                                         const std::string& dir,
                                         bool addpath_option)
   {
@@ -381,17 +381,17 @@ protected:
                    const std::string& title,
                    const std::list<float>& nr,
                    const std::list<float>& nc,
                    const std::list<std::string>& defaults) = 0;
 
   virtual std::list<std::string>
   do_file_dialog (const filter_list& filter, const std::string& title,
                   const std::string& filename, const std::string& dirname,
-                  bool multiselect) = 0;
+                  const std::string& multimode) = 0;
 
   virtual int
   do_debug_cd_or_addpath_error (const std::string& file,
                                 const std::string& dir,
                                 bool addpath_option) = 0;
 
   virtual void do_change_directory (const std::string& dir) = 0;
 
diff --git a/scripts/plot/uiputfile.m b/scripts/plot/uiputfile.m
--- a/scripts/plot/uiputfile.m
+++ b/scripts/plot/uiputfile.m
@@ -51,26 +51,28 @@
 ## If, in addition, a path is given it is also used as current path.
 ## @seealso{uigetfile, uigetdir}
 ## @end deftypefn
 
 ## Author: Kai Habel
 
 function [retfile, retpath, retindex] = uiputfile (varargin)
 
-  defaulttoolkit = get (0, "defaultfigure__graphics_toolkit__");
-  funcname = ["__uiputfile_", defaulttoolkit, "__"];
-  functype = exist (funcname);
-  if (! __is_function__ (funcname))
-    funcname = "__uiputfile_fltk__";
+  if (! __octave_link_enabled__ ())
+    defaulttoolkit = get (0, "defaultfigure__graphics_toolkit__");
+    funcname = ["__uiputfile_", defaulttoolkit, "__"];
+    functype = exist (funcname);
     if (! __is_function__ (funcname))
-      error ("uiputfile: fltk graphics toolkit required");
-    elseif (! strcmp (defaulttoolkit, "gnuplot"))
-      warning ("uiputfile: no implementation for toolkit '%s', using 'fltk' instead",
+      funcname = "__uiputfile_fltk__";
+      if (! __is_function__ (funcname))
+        error ("uiputfile: fltk graphics toolkit required");
+      elseif (! strcmp (defaulttoolkit, "gnuplot"))
+        warning ("uiputfile: no implementation for toolkit '%s', using 'fltk' instead",
                defaulttoolkit);
+      endif
     endif
   endif
 
   if (nargin > 3)
     print_usage ();
   endif
 
   defaultvals = {cell(0, 2),     # File Filter
@@ -112,17 +114,21 @@ function [retfile, retpath, retindex] = 
       if (! isempty (fname) || ! isempty (fext))
         outargs{3} = strcat (fname, fext);
       endif
     elseif (! isempty (varargin{3}))
       print_usage ();
     endif
   endif
 
-  [retfile, retpath, retindex] = feval (funcname, outargs{:});
+  if (__octave_link_enabled__ ())
+    [retfile, retpath, retindex] = __octave_link_file_dialog__ (outargs{:});
+  else
+    [retfile, retpath, retindex] = feval (funcname, outargs{:});
+  endif
 
 endfunction
 
 
 %!demo
 %! uiputfile ({'*.gif;*.png;*.jpg', 'Supported Picture Formats'});
 
 ## Remove from test statistics.  No real tests possible.
