# HG changeset patch
# User jwe
# Date 1021572710 0
#      Thu May 16 18:11:50 2002 +0000
# Node ID 1b58576bdaa63305014931c818834758eaeb761e
# Parent  3dd8d3dc28d493dda3abbede24e7934c0bd4dfd0
[project @ 2002-05-16 18:11:50 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,16 @@
 2002-05-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov-cell.cc (octave_cell::subsasgn): If an error has occurred,
+	skip final assignment step.
+	* ov-list.cc (octave_list::subsasgn): Likewise.
+	* oct-lvalue.cc (octave_lvalue::assign): Add parens to clarify intent.
+	(octave_lvalue::do_unary_op): Likewise.
+
 	* parse.y (function_end): Also accept end of input as end of
 	function if input is coming from an eval string.
 
 	* pr-output.cc (pr_any_float): Don't convert -0 to 0.
 
 2002-05-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* input.cc (generate_completion): If it looks like we are
diff --git a/src/oct-lvalue.cc b/src/oct-lvalue.cc
--- a/src/oct-lvalue.cc
+++ b/src/oct-lvalue.cc
@@ -31,17 +31,17 @@ Software Foundation, 59 Temple Place - S
 
 void
 octave_lvalue::assign (octave_value::assign_op op, const octave_value& rhs)
 {
   octave_value tmp (idx.empty ()
 		    ? val->assign (op, rhs)
 		    : val->assign (op, type, idx, rhs));
 
-  if (! (error_state || chg_fcn && chg_fcn () < 0))
+  if (! (error_state || (chg_fcn && chg_fcn () < 0)))
     *val = tmp;
 }
 
 void
 octave_lvalue::set_index (const std::string& t,
 			  const SLList<octave_value_list>& i)
 {
   if (! index_set)
@@ -56,17 +56,17 @@ octave_lvalue::set_index (const std::str
 
 void
 octave_lvalue::do_unary_op (octave_value::unary_op op)
 {
   octave_value tmp (idx.empty ()
 		    ? val->do_non_const_unary_op (op)
 		    : val->do_non_const_unary_op (op, type, idx));
 
-  if (! (error_state || chg_fcn && chg_fcn () < 0))
+  if (! (error_state || (chg_fcn && chg_fcn () < 0)))
     *val = tmp;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -160,50 +160,53 @@ octave_cell::subsasgn (const std::string
 	  }
 	  break;
 
 	default:
 	  panic_impossible ();
 	}
     }
 
-  switch (type[0])
+  if (! error_state)
     {
-    case '(':
-      {
-	octave_value_list i = idx.front ();
+      switch (type[0])
+	{
+	case '(':
+	  {
+	    octave_value_list i = idx.front ();
 
-	if (t_rhs.is_cell ())
-	  octave_base_matrix<Cell>::assign (i, t_rhs.cell_value ());
-	else
-	  octave_base_matrix<Cell>::assign (i, Cell (t_rhs));
+	    if (t_rhs.is_cell ())
+	      octave_base_matrix<Cell>::assign (i, t_rhs.cell_value ());
+	    else
+	      octave_base_matrix<Cell>::assign (i, Cell (t_rhs));
 
-	retval = octave_value (this, count + 1);
-      }
-      break;
+	    retval = octave_value (this, count + 1);
+	  }
+	  break;
 
-    case '{':
-      {
-	octave_value_list i = idx.front ();
+	case '{':
+	  {
+	    octave_value_list i = idx.front ();
 
-	octave_base_matrix<Cell>::assign (i, Cell (t_rhs));
+	    octave_base_matrix<Cell>::assign (i, Cell (t_rhs));
 
-	retval = octave_value (this, count + 1);
-      }
-      break;
+	    retval = octave_value (this, count + 1);
+	  }
+	  break;
 
-    case '.':
-      {
-	std::string nm = type_name ();
-	error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
-      }
-      break;
+	case '.':
+	  {
+	    std::string nm = type_name ();
+	    error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
+	  }
+	  break;
 
-    default:
-      panic_impossible ();
+	default:
+	  panic_impossible ();
+	}
     }
 
   return retval;
 }
 
 void
 octave_cell::assign (const octave_value_list& idx, const octave_value& rhs)
 {
diff --git a/src/ov-list.cc b/src/ov-list.cc
--- a/src/ov-list.cc
+++ b/src/ov-list.cc
@@ -155,38 +155,41 @@ octave_list::subsasgn (const std::string
 	  }
 	  break;
 
 	default:
 	  panic_impossible ();
 	}
     }
 
-  switch (type[0])
+  if (! error_state)
     {
-    case '(':
-      {
-	octave_value_list i = idx.front ();
+      switch (type[0])
+	{
+	case '(':
+	  {
+	    octave_value_list i = idx.front ();
 
-	assign (i, t_rhs);
+	    assign (i, t_rhs);
 
-	retval = octave_value (this, count + 1);
-      }
-      break;
+	    retval = octave_value (this, count + 1);
+	  }
+	  break;
 
-    case '{':
-    case '.':
-      {
-	std::string nm = type_name ();
-	error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
-      }
-      break;
+	case '{':
+	case '.':
+	  {
+	    std::string nm = type_name ();
+	    error ("%s cannot be indexed with %c", nm.c_str (), type[0]);
+	  }
+	  break;
 
-    default:
-      panic_impossible ();
+	default:
+	  panic_impossible ();
+	}
     }
 
   return retval;
 }
 
 void
 octave_list::assign (const octave_value_list& idx, const octave_value& rhs)
 {
