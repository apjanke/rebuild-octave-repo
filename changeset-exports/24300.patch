# HG changeset patch
# User Rik <rik@octave.org>
# Date 1511472828 28800
#      Thu Nov 23 13:33:48 2017 -0800
# Branch stable
# Node ID 117107eed917a700eb82e4bb8a17dd6f2743652d
# Parent  deba10d3309b08b86fb5dd8a7fb63b63142374c4
Calculate 1-norm of matrices to assess whether NaN or Inf are present (bug #39000).

* CMatrix.cc, dMatrix.cc, fCMatrix.cc, fMatrix.cc (norm1): New local function
to calculate 1-norm.

* CMatrix.cc, dMatrix.cc, fCMatrix.cc, fMatrix.cc: Replace "xnorm (foo, 1)"
with "norm1 (foo)".  Replace "foo.abs ().sum ().row (0).max ()" with
"norm1 (foo)".

diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -708,16 +708,38 @@ ComplexMatrix::row (octave_idx_type i) c
 }
 
 ComplexColumnVector
 ComplexMatrix::column (octave_idx_type i) const
 {
   return index (idx_vector::colon, idx_vector (i));
 }
 
+// Local function to calculate the 1-norm.
+static
+double
+norm1 (const ComplexMatrix& a)
+{
+  ColumnVector colsum = a.abs ().sum ().row (0);
+  double anorm = -octave::numeric_limits<double>::Inf ();
+
+  for (octave_idx_type i = 0; i < colsum.numel (); i++)
+    {
+      if (octave::math::isnan (colsum.xelem (i)))
+        {
+          anorm = octave::numeric_limits<double>::NaN ();
+          break;
+        }
+      else
+        anorm = std::max (anorm, colsum.xelem (i));
+    }
+
+  return anorm;
+}
+
 ComplexMatrix
 ComplexMatrix::inverse (void) const
 {
   octave_idx_type info;
   double rcon;
   MatrixType mattype (*this);
   return inverse (mattype, info, rcon, 0, 0);
 }
@@ -836,19 +858,18 @@ ComplexMatrix::finverse (MatrixType &mat
 
   lwork = static_cast<octave_idx_type> (octave::math::real (z(0)));
   lwork = (lwork <  2 *nc ? 2*nc : lwork);
   z.resize (dim_vector (lwork, 1));
   Complex *pz = z.fortran_vec ();
 
   info = 0;
 
-  // Calculate (always, see bug #45577) the norm of the matrix, for later use.
-  double anorm =
-    retval.abs ().sum ().row (static_cast<octave_idx_type>(0)).max ();
+  // Calculate norm of the matrix (always, see bug #45577) for later use.
+  double anorm = norm1 (retval);
 
   // Work around bug #45577, LAPACK crashes Octave if norm is NaN
   // and bug #46330, segfault with matrices containing Inf & NaN
   if (octave::math::isnan (anorm) || octave::math::isinf (anorm))
     info = -1;
   else
     F77_XFCN (zgetrf, ZGETRF, (nc, nc, F77_DBLE_CMPLX_ARG (tmp_data), nr, pipvt,
                                info));
@@ -1351,17 +1372,18 @@ ComplexMatrix::determinant (MatrixType& 
         retval *= elem (i,i);
     }
   else if (typ == MatrixType::Hermitian)
     {
       ComplexMatrix atmp = *this;
       Complex *tmp_data = atmp.fortran_vec ();
 
       double anorm = 0;
-      if (calc_cond) anorm = xnorm (*this, 1);
+      if (calc_cond)
+        anorm = norm1 (*this);
 
       char job = 'L';
       F77_XFCN (zpotrf, ZPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                  F77_DBLE_CMPLX_ARG (tmp_data), nr, info
                                  F77_CHAR_ARG_LEN (1)));
 
       if (info != 0)
         {
@@ -1398,18 +1420,18 @@ ComplexMatrix::determinant (MatrixType& 
       Array<octave_idx_type> ipvt (dim_vector (nr, 1));
       octave_idx_type *pipvt = ipvt.fortran_vec ();
 
       ComplexMatrix atmp = *this;
       Complex *tmp_data = atmp.fortran_vec ();
 
       info = 0;
 
-      // Calculate (always, see bug #45577) the norm of the matrix, for later use.
-      double anorm = xnorm (*this, 1);
+      // Calculate norm of the matrix (always, see bug #45577) for later use.
+      double anorm = norm1 (*this);
 
       // Work around bug #45577, LAPACK crashes Octave if norm is NaN
       if (octave::math::isnan (anorm))
         info = -1;
       else
         F77_XFCN (zgetrf, ZGETRF, (nr, nr, F77_DBLE_CMPLX_ARG (tmp_data), nr, pipvt,
                                    info));
 
@@ -1546,18 +1568,17 @@ ComplexMatrix::rcond (MatrixType &mattyp
           if (typ == MatrixType::Hermitian)
             {
               octave_idx_type info = 0;
               char job = 'L';
 
               ComplexMatrix atmp = *this;
               Complex *tmp_data = atmp.fortran_vec ();
 
-              anorm = atmp.abs().sum().
-                      row(static_cast<octave_idx_type>(0)).max();
+              anorm = norm1 (atmp);
 
               F77_XFCN (zpotrf, ZPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                          F77_DBLE_CMPLX_ARG (tmp_data), nr, info
                                          F77_CHAR_ARG_LEN (1)));
 
               if (info != 0)
                 {
                   rcon = 0.0;
@@ -1588,18 +1609,17 @@ ComplexMatrix::rcond (MatrixType &mattyp
 
               ComplexMatrix atmp = *this;
               Complex *tmp_data = atmp.fortran_vec ();
 
               Array<octave_idx_type> ipvt (dim_vector (nr, 1));
               octave_idx_type *pipvt = ipvt.fortran_vec ();
 
               if (anorm < 0.)
-                anorm = atmp.abs ().sum ().
-                        row(static_cast<octave_idx_type>(0)).max ();
+                anorm = norm1 (atmp);
 
               Array<Complex> z (dim_vector (2 * nc, 1));
               Complex *pz = z.fortran_vec ();
               Array<double> rz (dim_vector (2 * nc, 1));
               double *prz = rz.fortran_vec ();
 
               // Work around bug #45577, LAPACK crashes Octave if norm is NaN
               if (octave::math::isnan (anorm))
@@ -1840,17 +1860,17 @@ ComplexMatrix::fsolve (MatrixType &matty
       if (typ == MatrixType::Hermitian)
         {
           info = 0;
           char job = 'L';
 
           ComplexMatrix atmp = *this;
           Complex *tmp_data = atmp.fortran_vec ();
 
-          anorm = atmp.abs().sum().row(static_cast<octave_idx_type>(0)).max();
+          anorm = norm1 (atmp);
 
           F77_XFCN (zpotrf, ZPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                      F77_DBLE_CMPLX_ARG (tmp_data), nr, info
                                      F77_CHAR_ARG_LEN (1)));
 
           // Throw-away extra info LAPACK gives so as to not change output.
           rcon = 0.0;
           if (info != 0)
@@ -1922,18 +1942,17 @@ ComplexMatrix::fsolve (MatrixType &matty
 
           Array<Complex> z (dim_vector (2 * nc, 1));
           Complex *pz = z.fortran_vec ();
           Array<double> rz (dim_vector (2 * nc, 1));
           double *prz = rz.fortran_vec ();
 
           // Calculate the norm of the matrix, for later use.
           if (anorm < 0.)
-            anorm = atmp.abs ().sum ().row (static_cast<octave_idx_type>(0))
-                    .max ();
+            anorm = norm1 (atmp);
 
           // Work around bug #45577, LAPACK crashes Octave if norm is NaN
           // and bug #46330, segfault with matrices containing Inf & NaN
           if (octave::math::isnan (anorm) || octave::math::isinf (anorm))
             info = -2;
           else
             F77_XFCN (zgetrf, ZGETRF, (nr, nr, F77_DBLE_CMPLX_ARG (tmp_data), nr, pipvt,
                                        info));
@@ -2470,17 +2489,17 @@ ComplexMatrix::lssolve (const ComplexMat
 
           if (octave::math::real (work(0)) < lworkaround)
             work(0) = lworkaround;
         }
 
       lwork = static_cast<octave_idx_type> (octave::math::real (work(0)));
       work.resize (dim_vector (lwork, 1));
 
-      anorm = xnorm (*this, 1);
+      anorm = norm1 (*this);
 
       if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
         {
           rcon = 0.0;
           octave::warn_singular_matrix ();
           retval = Matrix (n, m, 0.0);
         }
       else
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -420,16 +420,38 @@ Matrix::row (octave_idx_type i) const
 }
 
 ColumnVector
 Matrix::column (octave_idx_type i) const
 {
   return index (idx_vector::colon, idx_vector (i));
 }
 
+// Local function to calculate the 1-norm.
+static
+double
+norm1 (const Matrix& a)
+{
+  ColumnVector colsum = a.abs ().sum ().row (0);
+  double anorm = -octave::numeric_limits<double>::Inf ();
+
+  for (octave_idx_type i = 0; i < colsum.numel (); i++)
+    {
+      if (octave::math::isnan (colsum.xelem (i)))
+        {
+          anorm = octave::numeric_limits<double>::NaN ();
+          break;
+        }
+      else
+        anorm = std::max (anorm, colsum.xelem (i));
+    }
+
+  return anorm;
+}
+
 Matrix
 Matrix::inverse (void) const
 {
   octave_idx_type info;
   double rcon;
   MatrixType mattype (*this);
   return inverse (mattype, info, rcon, 0, 0);
 }
@@ -550,18 +572,17 @@ Matrix::finverse (MatrixType &mattype, o
   z.resize (dim_vector (lwork, 1));
   double *pz = z.fortran_vec ();
 
   info = 0;
 
   // Calculate the norm of the matrix, for later use.
   double anorm = 0;
   if (calc_cond)
-    anorm = retval.abs ().sum ().row (static_cast<octave_idx_type>(0))
-            .max ();
+    anorm = norm1 (retval);
 
   F77_XFCN (dgetrf, DGETRF, (nc, nc, tmp_data, nr, pipvt, info));
 
   // Throw-away extra info LAPACK gives so as to not change output.
   rcon = 0.0;
   if (info != 0)
     info = -1;
   else if (calc_cond)
@@ -1029,19 +1050,18 @@ Matrix::determinant (MatrixType& mattype
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (nr != nc)
     (*current_liboctave_error_handler) ("matrix must be square");
 
   volatile int typ = mattype.type ();
 
-  // Even though the matrix is marked as singular (Rectangular), we may
-  // still get a useful number from the LU factorization, because it always
-  // completes.
+  // Even though the matrix is marked as singular (Rectangular), we may still
+  // get a useful number from the LU factorization, because it always completes.
 
   if (typ == MatrixType::Unknown)
     typ = mattype.type (*this);
   else if (typ == MatrixType::Rectangular)
     typ = MatrixType::Full;
 
   if (typ == MatrixType::Lower || typ == MatrixType::Upper)
     {
@@ -1049,17 +1069,18 @@ Matrix::determinant (MatrixType& mattype
         retval *= elem (i,i);
     }
   else if (typ == MatrixType::Hermitian)
     {
       Matrix atmp = *this;
       double *tmp_data = atmp.fortran_vec ();
 
       double anorm = 0;
-      if (calc_cond) anorm = xnorm (*this, 1);
+      if (calc_cond)
+        anorm = norm1 (*this);
 
       char job = 'L';
       F77_XFCN (dpotrf, DPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                  tmp_data, nr, info
                                  F77_CHAR_ARG_LEN (1)));
 
       if (info != 0)
         {
@@ -1098,17 +1119,18 @@ Matrix::determinant (MatrixType& mattype
 
       Matrix atmp = *this;
       double *tmp_data = atmp.fortran_vec ();
 
       info = 0;
 
       // Calculate the norm of the matrix, for later use.
       double anorm = 0;
-      if (calc_cond) anorm = xnorm (*this, 1);
+      if (calc_cond)
+        anorm = norm1 (*this);
 
       F77_XFCN (dgetrf, DGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
       // Throw-away extra info LAPACK gives so as to not change output.
       rcon = 0.0;
       if (info != 0)
         {
           info = -1;
@@ -1240,18 +1262,17 @@ Matrix::rcond (MatrixType &mattype) cons
           if (typ == MatrixType::Hermitian)
             {
               octave_idx_type info = 0;
               char job = 'L';
 
               Matrix atmp = *this;
               double *tmp_data = atmp.fortran_vec ();
 
-              anorm = atmp.abs().sum().
-                      row(static_cast<octave_idx_type>(0)).max();
+              anorm = norm1 (atmp);
 
               F77_XFCN (dpotrf, DPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                          tmp_data, nr, info
                                          F77_CHAR_ARG_LEN (1)));
 
               if (info != 0)
                 {
                   rcon = 0.0;
@@ -1281,18 +1302,17 @@ Matrix::rcond (MatrixType &mattype) cons
 
               Matrix atmp = *this;
               double *tmp_data = atmp.fortran_vec ();
 
               Array<octave_idx_type> ipvt (dim_vector (nr, 1));
               octave_idx_type *pipvt = ipvt.fortran_vec ();
 
               if (anorm < 0.)
-                anorm = atmp.abs ().sum ().
-                        row(static_cast<octave_idx_type>(0)).max ();
+                anorm = norm1 (atmp);
 
               Array<double> z (dim_vector (4 * nc, 1));
               double *pz = z.fortran_vec ();
               Array<octave_idx_type> iz (dim_vector (nc, 1));
               octave_idx_type *piz = iz.fortran_vec ();
 
               F77_XFCN (dgetrf, DGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
@@ -1525,17 +1545,17 @@ Matrix::fsolve (MatrixType &mattype, con
       if (typ == MatrixType::Hermitian)
         {
           info = 0;
           char job = 'L';
 
           Matrix atmp = *this;
           double *tmp_data = atmp.fortran_vec ();
 
-          anorm = atmp.abs().sum().row(static_cast<octave_idx_type>(0)).max();
+          anorm = norm1 (atmp);
 
           F77_XFCN (dpotrf, DPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                      tmp_data, nr, info
                                      F77_CHAR_ARG_LEN (1)));
 
           // Throw-away extra info LAPACK gives so as to not change output.
           rcon = 0.0;
           if (info != 0)
@@ -1601,17 +1621,17 @@ Matrix::fsolve (MatrixType &mattype, con
 
           Array<octave_idx_type> ipvt (dim_vector (nr, 1));
           octave_idx_type *pipvt = ipvt.fortran_vec ();
 
           Matrix atmp = *this;
           double *tmp_data = atmp.fortran_vec ();
 
           if (anorm < 0.)
-            anorm = atmp.abs().sum().row(static_cast<octave_idx_type>(0)).max();
+            anorm = norm1 (atmp);
 
           Array<double> z (dim_vector (4 * nc, 1));
           double *pz = z.fortran_vec ();
           Array<octave_idx_type> iz (dim_vector (nc, 1));
           octave_idx_type *piz = iz.fortran_vec ();
 
           F77_XFCN (dgetrf, DGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
@@ -2127,17 +2147,17 @@ Matrix::lssolve (const Matrix& b, octave
 
           if (work(0) < lworkaround)
             work(0) = lworkaround;
         }
 
       lwork = static_cast<octave_idx_type> (work(0));
       work.resize (dim_vector (lwork, 1));
 
-      anorm = xnorm (*this, 1);
+      anorm = norm1 (*this);
 
       if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
         {
           rcon = 0.0;
           octave::warn_singular_matrix ();
           retval = Matrix (n, m, 0.0);
         }
       else
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -711,16 +711,38 @@ FloatComplexMatrix::row (octave_idx_type
 }
 
 FloatComplexColumnVector
 FloatComplexMatrix::column (octave_idx_type i) const
 {
   return index (idx_vector::colon, idx_vector (i));
 }
 
+// Local function to calculate the 1-norm.
+static
+float
+norm1 (const FloatComplexMatrix& a)
+{
+  FloatColumnVector colsum = a.abs ().sum ().row (0);
+  float anorm = -octave::numeric_limits<float>::Inf ();
+
+  for (octave_idx_type i = 0; i < colsum.numel (); i++)
+    {
+      if (octave::math::isnan (colsum.xelem (i)))
+        {
+          anorm = octave::numeric_limits<float>::NaN ();
+          break;
+        }
+      else
+        anorm = std::max (anorm, colsum.xelem (i));
+    }
+
+  return anorm;
+}
+
 FloatComplexMatrix
 FloatComplexMatrix::inverse (void) const
 {
   octave_idx_type info;
   float rcon;
   MatrixType mattype (*this);
   return inverse (mattype, info, rcon, 0, 0);
 }
@@ -839,19 +861,18 @@ FloatComplexMatrix::finverse (MatrixType
 
   lwork = static_cast<octave_idx_type> (octave::math::real (z(0)));
   lwork = (lwork <  2 *nc ? 2*nc : lwork);
   z.resize (dim_vector (lwork, 1));
   FloatComplex *pz = z.fortran_vec ();
 
   info = 0;
 
-  // Calculate (always, see bug #45577) the norm of the matrix, for later use.
-  float anorm =
-    retval.abs ().sum ().row (static_cast<octave_idx_type>(0)).max ();
+  // Calculate norm of the matrix (always, see bug #45577) for later use.
+  float anorm = norm1 (retval);
 
   // Work around bug #45577, LAPACK crashes Octave if norm is NaN
   // and bug #46330, segfault with matrices containing Inf & NaN
   if (octave::math::isnan (anorm) || octave::math::isinf (anorm))
     info = -1;
   else
     F77_XFCN (cgetrf, CGETRF, (nc, nc, F77_CMPLX_ARG (tmp_data), nr, pipvt, info));
 
@@ -1351,17 +1372,18 @@ FloatComplexMatrix::determinant (MatrixT
         retval *= elem (i,i);
     }
   else if (typ == MatrixType::Hermitian)
     {
       FloatComplexMatrix atmp = *this;
       FloatComplex *tmp_data = atmp.fortran_vec ();
 
       float anorm = 0;
-      if (calc_cond) anorm = xnorm (*this, 1);
+      if (calc_cond)
+        anorm = norm1 (*this);
 
       char job = 'L';
       F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                  F77_CMPLX_ARG (tmp_data), nr, info
                                  F77_CHAR_ARG_LEN (1)));
 
       if (info != 0)
         {
@@ -1398,26 +1420,26 @@ FloatComplexMatrix::determinant (MatrixT
       Array<octave_idx_type> ipvt (dim_vector (nr, 1));
       octave_idx_type *pipvt = ipvt.fortran_vec ();
 
       FloatComplexMatrix atmp = *this;
       FloatComplex *tmp_data = atmp.fortran_vec ();
 
       info = 0;
 
-      // Calculate (always, see bug #45577) the norm of the matrix, for later use.
-      float anorm = xnorm (*this, 1);
+      // Calculate norm of the matrix (always, see bug #45577) for later use.
+      float anorm = norm1 (*this);
 
       // Work around bug #45577, LAPACK crashes Octave if norm is NaN
       if (octave::math::isnan (anorm))
         info = -1;
       else
         F77_XFCN (cgetrf, CGETRF, (nr, nr, F77_CMPLX_ARG (tmp_data), nr, pipvt, info));
 
-      // Throw-away extra info LAPACK gives so as to not change output.
+      // Throw away extra info LAPACK gives so as to not change output.
       rcon = 0.0;
       if (info != 0)
         {
           info = -1;
           retval = FloatComplexDET ();
         }
       else
         {
@@ -1545,18 +1567,17 @@ FloatComplexMatrix::rcond (MatrixType &m
           if (typ == MatrixType::Hermitian)
             {
               octave_idx_type info = 0;
               char job = 'L';
 
               FloatComplexMatrix atmp = *this;
               FloatComplex *tmp_data = atmp.fortran_vec ();
 
-              anorm = atmp.abs().sum().
-                      row(static_cast<octave_idx_type>(0)).max();
+              anorm = norm1 (atmp);
 
               F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                          F77_CMPLX_ARG (tmp_data), nr, info
                                          F77_CHAR_ARG_LEN (1)));
 
               if (info != 0)
                 {
                   rcon = 0.0;
@@ -1587,18 +1608,17 @@ FloatComplexMatrix::rcond (MatrixType &m
 
               FloatComplexMatrix atmp = *this;
               FloatComplex *tmp_data = atmp.fortran_vec ();
 
               Array<octave_idx_type> ipvt (dim_vector (nr, 1));
               octave_idx_type *pipvt = ipvt.fortran_vec ();
 
               if (anorm < 0.)
-                anorm = atmp.abs ().sum ().
-                        row(static_cast<octave_idx_type>(0)).max ();
+                anorm = norm1 (atmp);
 
               Array<FloatComplex> z (dim_vector (2 * nc, 1));
               FloatComplex *pz = z.fortran_vec ();
               Array<float> rz (dim_vector (2 * nc, 1));
               float *prz = rz.fortran_vec ();
 
               // Work around bug #45577, LAPACK crashes Octave if norm is NaN
               if (octave::math::isnan (anorm))
@@ -1846,17 +1866,17 @@ FloatComplexMatrix::fsolve (MatrixType &
       if (typ == MatrixType::Hermitian)
         {
           info = 0;
           char job = 'L';
 
           FloatComplexMatrix atmp = *this;
           FloatComplex *tmp_data = atmp.fortran_vec ();
 
-          anorm = atmp.abs().sum().row(static_cast<octave_idx_type>(0)).max();
+          anorm = norm1 (atmp);
 
           F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                      F77_CMPLX_ARG (tmp_data), nr, info
                                      F77_CHAR_ARG_LEN (1)));
 
           // Throw-away extra info LAPACK gives so as to not change output.
           rcon = 0.0;
           if (info != 0)
@@ -1928,18 +1948,17 @@ FloatComplexMatrix::fsolve (MatrixType &
 
           Array<FloatComplex> z (dim_vector (2 * nc, 1));
           FloatComplex *pz = z.fortran_vec ();
           Array<float> rz (dim_vector (2 * nc, 1));
           float *prz = rz.fortran_vec ();
 
           // Calculate the norm of the matrix, for later use.
           if (anorm < 0.)
-            anorm = atmp.abs ().sum ().row (static_cast<octave_idx_type>(0))
-                    .max ();
+            anorm = norm1 (atmp);
 
           // Work around bug #45577, LAPACK crashes Octave if norm is NaN
           // and bug #46330, segfault with matrices containing Inf & NaN
           if (octave::math::isnan (anorm) || octave::math::isinf (anorm))
             info = -2;
           else
             F77_XFCN (cgetrf, CGETRF, (nr, nr, F77_CMPLX_ARG (tmp_data), nr, pipvt, info));
 
@@ -2487,17 +2506,17 @@ FloatComplexMatrix::lssolve (const Float
 
           if (octave::math::real (work(0)) < lworkaround)
             work(0) = lworkaround;
         }
 
       lwork = static_cast<octave_idx_type> (octave::math::real (work(0)));
       work.resize (dim_vector (lwork, 1));
 
-      anorm = xnorm (*this, 1);
+      anorm = norm1 (*this);
 
       if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
         {
           rcon = 0.0;
           octave::warn_singular_matrix ();
           retval = Matrix (n, m, 0.0);
         }
       else
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -426,16 +426,38 @@ FloatMatrix::row (octave_idx_type i) con
 }
 
 FloatColumnVector
 FloatMatrix::column (octave_idx_type i) const
 {
   return index (idx_vector::colon, idx_vector (i));
 }
 
+// Local function to calculate the 1-norm.
+static
+float
+norm1 (const FloatMatrix& a)
+{
+  FloatColumnVector colsum = a.abs ().sum ().row (0);
+  float anorm = -octave::numeric_limits<float>::Inf ();
+
+  for (octave_idx_type i = 0; i < colsum.numel (); i++)
+    {
+      if (octave::math::isnan (colsum.xelem (i)))
+        {
+          anorm = octave::numeric_limits<float>::NaN ();
+          break;
+        }
+      else
+        anorm = std::max (anorm, colsum.xelem (i));
+    }
+
+  return anorm;
+}
+
 FloatMatrix
 FloatMatrix::inverse (void) const
 {
   octave_idx_type info;
   float rcon;
   MatrixType mattype (*this);
   return inverse (mattype, info, rcon, 0, 0);
 }
@@ -556,18 +578,17 @@ FloatMatrix::finverse (MatrixType &matty
   z.resize (dim_vector (lwork, 1));
   float *pz = z.fortran_vec ();
 
   info = 0;
 
   // Calculate the norm of the matrix, for later use.
   float anorm = 0;
   if (calc_cond)
-    anorm = retval.abs ().sum ().row (static_cast<octave_idx_type>(0))
-            .max ();
+    anorm = norm1 (retval);
 
   F77_XFCN (sgetrf, SGETRF, (nc, nc, tmp_data, nr, pipvt, info));
 
   // Throw-away extra info LAPACK gives so as to not change output.
   rcon = 0.0;
   if (info != 0)
     info = -1;
   else if (calc_cond)
@@ -1055,17 +1076,18 @@ FloatMatrix::determinant (MatrixType& ma
         retval *= elem (i,i);
     }
   else if (typ == MatrixType::Hermitian)
     {
       FloatMatrix atmp = *this;
       float *tmp_data = atmp.fortran_vec ();
 
       float anorm = 0;
-      if (calc_cond) anorm = xnorm (*this, 1);
+      if (calc_cond)
+        anorm = norm1 (*this);
 
       char job = 'L';
       F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                  tmp_data, nr, info
                                  F77_CHAR_ARG_LEN (1)));
 
       if (info != 0)
         {
@@ -1104,17 +1126,18 @@ FloatMatrix::determinant (MatrixType& ma
 
       FloatMatrix atmp = *this;
       float *tmp_data = atmp.fortran_vec ();
 
       info = 0;
 
       // Calculate the norm of the matrix, for later use.
       float anorm = 0;
-      if (calc_cond) anorm = xnorm (*this, 1);
+      if (calc_cond)
+        anorm = norm1 (*this);
 
       F77_XFCN (sgetrf, SGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
       // Throw-away extra info LAPACK gives so as to not change output.
       rcon = 0.0;
       if (info != 0)
         {
           info = -1;
@@ -1246,18 +1269,17 @@ FloatMatrix::rcond (MatrixType &mattype)
           if (typ == MatrixType::Hermitian)
             {
               octave_idx_type info = 0;
               char job = 'L';
 
               FloatMatrix atmp = *this;
               float *tmp_data = atmp.fortran_vec ();
 
-              anorm = atmp.abs().sum().
-                      row(static_cast<octave_idx_type>(0)).max();
+              anorm = norm1 (atmp);
 
               F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                          tmp_data, nr, info
                                          F77_CHAR_ARG_LEN (1)));
 
               if (info != 0)
                 {
                   rcon = 0.0;
@@ -1287,18 +1309,17 @@ FloatMatrix::rcond (MatrixType &mattype)
 
               FloatMatrix atmp = *this;
               float *tmp_data = atmp.fortran_vec ();
 
               Array<octave_idx_type> ipvt (dim_vector (nr, 1));
               octave_idx_type *pipvt = ipvt.fortran_vec ();
 
               if (anorm < 0.)
-                anorm = atmp.abs ().sum ().
-                        row(static_cast<octave_idx_type>(0)).max ();
+                anorm = norm1 (atmp);
 
               Array<float> z (dim_vector (4 * nc, 1));
               float *pz = z.fortran_vec ();
               Array<octave_idx_type> iz (dim_vector (nc, 1));
               octave_idx_type *piz = iz.fortran_vec ();
 
               F77_XFCN (sgetrf, SGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
@@ -1543,17 +1564,17 @@ FloatMatrix::fsolve (MatrixType &mattype
       if (typ == MatrixType::Hermitian)
         {
           info = 0;
           char job = 'L';
 
           FloatMatrix atmp = *this;
           float *tmp_data = atmp.fortran_vec ();
 
-          anorm = atmp.abs().sum().row(static_cast<octave_idx_type>(0)).max();
+          anorm = norm1 (atmp);
 
           F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                      tmp_data, nr, info
                                      F77_CHAR_ARG_LEN (1)));
 
           // Throw-away extra info LAPACK gives so as to not change output.
           rcon = 0.0;
           if (info != 0)
@@ -1618,18 +1639,18 @@ FloatMatrix::fsolve (MatrixType &mattype
           info = 0;
 
           Array<octave_idx_type> ipvt (dim_vector (nr, 1));
           octave_idx_type *pipvt = ipvt.fortran_vec ();
 
           FloatMatrix atmp = *this;
           float *tmp_data = atmp.fortran_vec ();
 
-          if (anorm < 0.)
-            anorm = atmp.abs().sum().row(static_cast<octave_idx_type>(0)).max();
+          if (anorm < 0.0)
+            anorm = norm1 (atmp);
 
           Array<float> z (dim_vector (4 * nc, 1));
           float *pz = z.fortran_vec ();
           Array<octave_idx_type> iz (dim_vector (nc, 1));
           octave_idx_type *piz = iz.fortran_vec ();
 
           F77_XFCN (sgetrf, SGETRF, (nr, nr, tmp_data, nr, pipvt, info));
 
@@ -2034,16 +2055,17 @@ FloatMatrix::lssolve (const FloatMatrix&
 FloatMatrix
 FloatMatrix::lssolve (const FloatMatrix& b, octave_idx_type& info,
                       octave_idx_type& rank) const
 {
   float rcon;
   return lssolve (b, info, rank, rcon);
 }
 
+
 FloatMatrix
 FloatMatrix::lssolve (const FloatMatrix& b, octave_idx_type& info,
                       octave_idx_type& rank, float &rcon) const
 {
   FloatMatrix retval;
 
   octave_idx_type nrhs = b.cols ();
 
@@ -2154,17 +2176,17 @@ FloatMatrix::lssolve (const FloatMatrix&
 
           if (work(0) < lworkaround)
             work(0) = lworkaround;
         }
 
       lwork = static_cast<octave_idx_type> (work(0));
       work.resize (dim_vector (lwork, 1));
 
-      anorm = xnorm (*this, 1);
+      anorm = norm1 (*this);
 
       if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
         {
           rcon = 0.0;
           octave::warn_singular_matrix ();
           retval = Matrix (n, m, 0.0);
         }
       else
