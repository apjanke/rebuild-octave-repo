# HG changeset patch
# User jwe
# Date 837464885 0
#      Mon Jul 15 21:08:05 1996 +0000
# Node ID dac9933079e6f98e756752ca60072f001ff697fa
# Parent  ee3cf81365a32839384ddfbdd47cbfcfc648b1ec
[project @ 1996-07-15 21:08:05 by jwe]

diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -579,59 +579,51 @@ string CATCH.")
 
 static void
 cleanup_iprocstream (void *p)
 {
   delete (iprocstream *) p;
 }
 
 static octave_value_list
-do_system (const string& cmd_str, bool return_output)
+run_command_and_return_output (const string& cmd_str)
 {
   octave_value_list retval;
 
   iprocstream *cmd = new iprocstream (cmd_str.c_str ());
 
   add_unwind_protect (cleanup_iprocstream, cmd);
 
   int status = 127;
 
   if (cmd && *cmd)
     {
       ostrstream output_buf;
 
       char ch;
       while (cmd->get (ch))
-	{
-	  if (return_output)
-	    output_buf.put (ch);
-	  else
-	    octave_stdout.put (ch);
-	}
+	output_buf.put (ch);
 
       status = cmd->close ();
 
       // The value in status is as returned by waitpid.  If the
       // process exited normally, extract the actual exit status of
       // the command.  Otherwise, return 127 as a failure code.
 
       if ((status & 0xff) == 0)
 	status = (status & 0xff00) >> 8;
 
-      if (return_output)
-	{
-	  output_buf << ends;
+      output_buf << ends;
 
-	  char *msg = output_buf.str ();
+      char *msg = output_buf.str ();
 
-	  retval(1) = (double) status;
-	  retval(0) = msg;
+      retval(1) = (double) status;
+      retval(0) = msg;
 
-	  delete [] msg;
-	}
+      delete [] msg;
     }
   else
     error ("unable to start subprocess for `%s'", cmd_str.c_str ());
 
   run_unwind_protect ();
 
   return retval;
 }
@@ -645,18 +637,24 @@ If TYPE is \"async\", the process is sta
 pid of the child proces is returned immediately.  Otherwise, the\n\
 process is started, and Octave waits until it exits.  If TYPE argument\n\
 is omitted, a value of \"sync\" is assumed.\n\
 \n\
 If NARGIN == 2 (the actual value of RETURN_OUTPUT is irrelevant) and\n\
 the subprocess is started synchronously, or if system() is called with\n\
 NARGIN == 1 and NARGOUT > 0, the output from the command is returned.\n\
 Otherwise, if the subprocess is executed synchronously, it's output is\n\
-sent to Octave's standard output (possibly being passed through the\n\
-pager).")
+sent to the standard output.  To send the output of a command executed\n\
+with system() through the pager, use a command like\n\
+\n\
+   disp (system (CMD, 1));\n\
+\n\
+or\n\
+\n\
+   printf ("%s\n", system (CMD, 1));")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin > 0 && nargin < 4)
     {
       bool return_output = (nargout > 0 || nargin > 1);
@@ -701,18 +699,32 @@ pager).")
 		{
 		  system (cmd_str.c_str ());
 		  exit (0);
 		  retval(0) = 0.0;
 		}
 	      else
 		retval(0) = (double) pid;
 	    }
+	  else if (return_output)
+	    retval = run_command_and_return_output (cmd_str);
 	  else
-	    retval = do_system (cmd_str, return_output);
+	    {
+	      int status = system (cmd_str.c_str ());
+
+	      // The value in status is as returned by waitpid.  If
+	      // the process exited normally, extract the actual exit
+	      // status of the command.  Otherwise, return 127 as a
+	      // failure code.
+
+	      if ((status & 0xff) == 0)
+		status = (status & 0xff00) >> 8;
+
+	      retval = (double) status;
+	    }
 	}
     }
   else
     print_usage ("system");
 
   return retval;
 }
 
