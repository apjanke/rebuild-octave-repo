# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1541084614 -3600
#      Thu Nov 01 16:03:34 2018 +0100
# Node ID f5e08983d07cabbc3ab181becf1d79ef32593b16
# Parent  8d2b3e3ff18230fd7f9908affbd15818974e94ff
Clip images in figure limits if necessary (bug #49490)

* gl-render.cc (opengl_renderer::draw_image): Determine clipping limits not
  only using axes limits, but also figure limits. When clipping is of, clip at
  figure limits.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -3781,17 +3781,17 @@ namespace octave
     bool xflip = false;
     if (x(0) > x(1))
       {
         std::swap (x(0), x(1));
         xflip = true;
       }
     else if (w > 1 && x(1) == x(0))
       x(1) = x(1) + (w-1);
-    
+
     bool yflip = false;
     if (y(0) > y(1))
       {
         std::swap (y(0), y(1));
         yflip = true;
       }
     else if (h > 1 && y(1) == y(0))
       y(1) = y(1) + (h-1);
@@ -3841,32 +3841,44 @@ namespace octave
     int j0, j1, jj, i0, i1, ii;
     j0 = 0, j1 = w;
     i0 = 0, i1 = h;
 
     float im_xmin = x(0) - nor_dx/2;
     float im_xmax = x(1) + nor_dx/2;
     float im_ymin = y(0) - nor_dy/2;
     float im_ymax = y(1) + nor_dy/2;
-    if (props.is_clipping ()) // clip to axes
-      {
-        if (im_xmin < xmin)
-          j0 += (xmin - im_xmin)/nor_dx + 1;
-        if (im_xmax > xmax)
-          j1 -= (im_xmax - xmax)/nor_dx;
-
-        if (im_ymin < ymin)
-          i0 += (ymin - im_ymin)/nor_dy + 1;
-        if (im_ymax > ymax)
-          i1 -= (im_ymax - ymax)/nor_dy;
-      }
-    else // clip to viewport
-      {
-        // FIXME: actually add the code to do it!
-      }
+
+    // Clip to axes or viewport
+    bool do_clip = props.is_clipping ();
+    Matrix vp = get_viewport_scaled ();
+
+    ColumnVector vp_lim =
+      xform.untransform (std::numeric_limits <float>::epsilon (),
+                         std::numeric_limits <float>::epsilon ());
+    float clip_xmin =
+      (do_clip ? (vp_lim(0) > xmin ? vp_lim(0) : xmin) : vp_lim(0));
+    float clip_ymin =
+      (do_clip ? (vp_lim(1) > ymin ? vp_lim(1) : ymin) : vp_lim(1));
+
+    vp_lim = xform.untransform (vp(2), vp(3));
+    float clip_xmax =
+      (do_clip ? (vp_lim(0) < xmax ? vp_lim(0) : xmax) : vp_lim(0));
+    float clip_ymax =
+      (do_clip ? (vp_lim(1) < ymax ? vp_lim(1) : ymax) : vp_lim(1));
+
+    if (im_xmin < clip_xmin)
+      j0 += (clip_xmin - im_xmin)/nor_dx + 1;
+    if (im_xmax > clip_xmax)
+      j1 -= (im_xmax - clip_xmax)/nor_dx;
+
+    if (im_ymin < clip_ymin)
+      i0 += (clip_ymin - im_ymin)/nor_dy + 1;
+    if (im_ymax > clip_ymax)
+      i1 -= (im_ymax - clip_ymax)/nor_dy;
 
     if (i0 >= i1 || j0 >= j1)
       return;
 
     m_glfcns.glPixelZoom (m_devpixratio * pix_dx,
                           - m_devpixratio * pix_dy);
     m_glfcns.glRasterPos3d (im_xmin + nor_dx*j0, im_ymin + nor_dy*i0, 0);
 
@@ -3885,22 +3897,22 @@ namespace octave
             for (int i = i0; i < i1; i++)
               {
                 for (int j = j0, idx = (i-i0)*(j1-j0)*3; j < j1; j++, idx += 3)
                   {
                     if (! yflip)
                       ii = i;
                     else
                       ii = h - i - 1;
-                    
+
                     if (! xflip)
                       jj = j;
                     else
                       jj = w - j - 1;
-                      
+
                     a[idx]   = xcdata(ii,jj,0);
                     a[idx+1] = xcdata(ii,jj,1);
                     a[idx+2] = xcdata(ii,jj,2);
                   }
               }
 
             draw_pixels (j1-j0, i1-i0, a);
 
@@ -3914,22 +3926,22 @@ namespace octave
             for (int i = i0; i < i1; i++)
               {
                 for (int j = j0, idx = (i-i0)*(j1-j0)*3; j < j1; j++, idx += 3)
                   {
                     if (! yflip)
                       ii = i;
                     else
                       ii = h - i - 1;
-                    
+
                     if (! xflip)
                       jj = j;
                     else
                       jj = w - j - 1;
-                      
+
                     a[idx]   = xcdata(ii,jj,0);
                     a[idx+1] = xcdata(ii,jj,1);
                     a[idx+2] = xcdata(ii,jj,2);
                   }
               }
 
             draw_pixels (j1-j0, i1-i0, a);
 
@@ -3943,22 +3955,22 @@ namespace octave
             for (int i = i0; i < i1; i++)
               {
                 for (int j = j0, idx = (i-i0)*(j1-j0)*3; j < j1; j++, idx += 3)
                   {
                     if (! yflip)
                       ii = i;
                     else
                       ii = h - i - 1;
-                    
+
                     if (! xflip)
                       jj = j;
                     else
                       jj = w - j - 1;
-                      
+
                     a[idx]   = xcdata(ii,jj,0);
                     a[idx+1] = xcdata(ii,jj,1);
                     a[idx+2] = xcdata(ii,jj,2);
                   }
               }
 
             draw_pixels (j1-j0, i1-i0, a);
 
@@ -3972,22 +3984,22 @@ namespace octave
             for (int i = i0; i < i1; i++)
               {
                 for (int j = j0, idx = (i-i0)*(j1-j0)*3; j < j1; j++, idx += 3)
                   {
                     if (! yflip)
                       ii = i;
                     else
                       ii = h - i - 1;
-                    
+
                     if (! xflip)
                       jj = j;
                     else
                       jj = w - j - 1;
-                      
+
                     a[idx]   = xcdata(ii,jj,0);
                     a[idx+1] = xcdata(ii,jj,1);
                     a[idx+2] = xcdata(ii,jj,2);
                   }
               }
 
             draw_pixels (j1-j0, i1-i0, a);
 
