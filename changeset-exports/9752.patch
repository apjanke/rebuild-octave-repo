# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1256268308 25200
#      Thu Oct 22 20:25:08 2009 -0700
# Node ID 51c21837686f058c8e568a7189c333ee35b3322b
# Parent  2b0cc0b6db61f094d9811ed9dc50cd1607ee0d52
Period spellcheck of Octave documentation to check and fix newly added DOCSTRINGS

diff --git a/doc/interpreter/oop.txi b/doc/interpreter/oop.txi
--- a/doc/interpreter/oop.txi
+++ b/doc/interpreter/oop.txi
@@ -600,17 +600,17 @@ FIRfilter class will be derived from the
 filter does not have any data fields, but we must provide a struct to
 the @code{class} function.  The @code{class} function will add an
 element named polynomial to the object struct, so we simply add a
 dummy element named polynomial as the first line of the constructor.
 This dummy element will be overwritten by the class function.
 
 Note further that all our examples provide for the case in which no
 arguments are supplied.  This is important since octave will call the
-constructor with no arguments when loading ojects from save files to
+constructor with no arguments when loading objects from save files to
 determine the inheritance structure.
 
 A class may be a child of more than one class (see the documentation
 for the @code{class} function), and inheritance may be nested.  There
 is no limitation to the number of parents or the level of nesting
 other than memory or other physical issues.
 
 As before, we need a @code{display} method.  A simple example might be
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -862,17 +862,17 @@ are: @code{figure}, @code{axes},
 Each of these objects has a function by the
 same name. and, each of these functions returns a graphics handle pointing
 to an object of corresponding type. In addition there are several functions
 which operate on properties of the graphics objects and which return handles: the functions @code{ plot}
 and @code{plot3}
 return a handle pointing to an object of type line, the function @code{subplot}
 returns a handle pointing to an object of type axes, the function @code{fill} returns a
 handle pointing to an object of type patch, the functions @code{area}, @code{bar},
-@code{barh}, @code{contour}, @code{contuorf}, @code{contour3}, @code{surf}, @code{mesh},
+@code{barh}, @code{contour}, @code{contourf}, @code{contour3}, @code{surf}, @code{mesh},
 @code{surfc}, @code{meshc},
 @code{errorbar}, @code{quiver}, @code{quiver3}, @code{scatter}, @code{scatter3},
 @code{stair}, @code{stem}, @code{stem3} each return a handle as documented
 in @ref{doc-datasources,, Data Sources}.
 
 
 The graphics objects are arranged in a hierarchy:
 
diff --git a/scripts/help/type.m b/scripts/help/type.m
--- a/scripts/help/type.m
+++ b/scripts/help/type.m
@@ -12,17 +12,17 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this program; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} type @var{name} @dots{}
 ## @deftypefnx {Command} {} type -q @var{name} @dots{}
-## @deftypefnx {Function File} {defs =} type ("@var{name}", @dots{})
+## @deftypefnx {Function File} {dfns =} type ("@var{name}", @dots{})
 ## Display the definition of each @var{name} that refers to a function.
 ## 
 ## Normally also displays whether each @var{name} is user-defined or built-in;
 ## the @code{-q} option suppresses this behavior.
 ##
 ## If an output argument is requested nothing is displayed.  Instead, a cell 
 ## array of strings is returned, where each element corresponds to the 
 ## definition of each requested function.
diff --git a/scripts/plot/clf.m b/scripts/plot/clf.m
--- a/scripts/plot/clf.m
+++ b/scripts/plot/clf.m
@@ -17,17 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} clf ()
 ## @deftypefnx {Function File} {} clf ("reset")
 ## @deftypefnx {Function File} {} clf (@var{hfig})
 ## @deftypefnx {Function File} {} clf (@var{hfig}, "reset")
 ## Clear the current figure window.  @code{clf} operates by deleting child
-## graphics objects with visible handles (@code{HandleVisibility} = on).
+## graphics objects with visible handles (@code{handlevisibility} = on).
 ## If @var{hfig} is specified operate on it instead of the current figure.
 ## If the optional argument @code{"reset"} is specified, all objects including
 ## those with hidden handles are deleted.
 ## @seealso{cla, close, delete}
 ## @end deftypefn
 
 ## Author: jwe
 
