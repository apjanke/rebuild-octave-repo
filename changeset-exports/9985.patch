# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1260867695 -3600
#      Tue Dec 15 10:01:35 2009 +0100
# Node ID 43a29eeda9949eae63aaeee54f1e5271cd35aed4
# Parent  d1cc2e0ddf55807ee3b252c00d5ec20b54d62028
fix idx_vector::loop for masks

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-12-15  Jaroslav Hajek  <highegg@gmail.com>
+
+	* idx-vector.h (idx_vector::loop, idx_vector::bloop): Fix behavior for
+	masks.
+
 2009-12-13  Rik <octave@nomad.inbox5.com>
 
 	* Makefile.am: Use DISTCLEANFILES rather than distclean-local rule.
 	Use PERL variable defined by autoconf rather than direct call.  Use
 	simple_move_if_change rule to reduce useless compiles if OPTS_INC have not
 	changed.
 
 2009-12-12  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -819,18 +819,18 @@ public:
             for (octave_idx_type i = 0; i < len; i++) body (data[i]);
           }
           break;
         case class_mask:
           {
             idx_mask_rep * r = dynamic_cast<idx_mask_rep *> (rep);
             const bool *data = r->get_data ();
             octave_idx_type ext = r->extent (0);
-            for (octave_idx_type i = 0, j = 0; i < ext; i++)
-              if (data[i]) body (j++);
+            for (octave_idx_type i = 0; i < ext; i++)
+              if (data[i]) body (i);
           }
           break;
         default:
           assert (false);
           break;
         }
 
     }
@@ -889,18 +889,26 @@ public:
           }
           break;
         case class_mask:
           {
             idx_mask_rep * r = dynamic_cast<idx_mask_rep *> (rep);
             const bool *data = r->get_data ();
             octave_idx_type ext = r->extent (0), j = 0;
             for (octave_idx_type i = 0; i < ext; i++)
-              if (data[i] && body (j++))
-                break;
+              {
+                if (data[i])
+                  {
+                    if (body (i))
+                      break;
+                    else
+                      j++;
+                  }
+              }
+
             ret = j;
           }
           break;
         default:
           assert (false);
           break;
         }
 
