# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1324519282 18000
#      Wed Dec 21 21:01:22 2011 -0500
# Branch stable
# Node ID c3ea07298af4f8c61bf6326ac3502d2616cec5f3
# Parent  281ecc6fb43195c956421d5b5e24fc9d861f20e0
str2double: correctly handle things like ["1"; "2 3"; "4i"]

* str2double.cc (extract_num): Gobble trailing whitespace after
reading number.

diff --git a/src/DLD-FUNCTIONS/str2double.cc b/src/DLD-FUNCTIONS/str2double.cc
--- a/src/DLD-FUNCTIONS/str2double.cc
+++ b/src/DLD-FUNCTIONS/str2double.cc
@@ -57,38 +57,38 @@ single_num (std::istringstream& is, doub
   if (c == 'I')
     {
       // It's infinity.
       is.get ();
       char c1 = is.get (), c2 = is.get ();
       if (c1 == 'n' && c2 == 'f')
         {
           num = octave_Inf;
-          is.peek (); // Sets eof bit.
+          is.peek (); // May sets EOF bit.
         }
       else
         is.setstate (std::ios::failbit); // indicate that read has failed.
     }
   else if (c == 'N')
     {
       // It's NA or NaN
       is.get ();
       char c1 = is.get ();
       if (c1 == 'A')
         {
           num = octave_NA;
-          is.peek (); // Sets eof bit.
+          is.peek (); // May set EOF bit.
         }
       else
         {
           char c2 = is.get ();
           if (c1 == 'a' && c2 == 'N')
             {
               num = octave_NaN;
-              is.peek (); // Sets eof bit.
+              is.peek (); // May set EOF bit.
             }
           else
             is.setstate (std::ios::failbit); // indicate that read has failed.
         }
     }
   else
     is >> num;
 
@@ -125,32 +125,34 @@ extract_num (std::istringstream& is, dou
     {
       is.get ();
       c = is.peek ();
     }
 
   // It's i*num or just i.
   if (is_imag_unit (c))
     {
-      c = is.get ();
       imag = true;
-      char cn = is.peek ();
+      is.get ();
+      c = is.peek ();
 
       // Skip spaces after imaginary unit.
-      while (isspace (cn))
+      while (isspace (c))
         {
           is.get ();
-          cn = is.peek ();
+          c = is.peek ();
         }
 
-      if (cn == '*')
+      if (c == '*')
         {
           // Multiplier follows, we extract it as a number.
           is.get ();
           single_num (is, num);
+          if (is.good ())
+            c = is.peek ();
         }
       else
         num = 1.0;
     }
   else
     {
       // It's num, num*i, or numi.
       single_num (is, num);
@@ -176,30 +178,40 @@ extract_num (std::istringstream& is, dou
                   is.get ();
                   c = is.peek ();
                 }
 
               if (is_imag_unit (c))
                 {
                   imag = true;
                   is.get ();
-                  is.peek (); // Sets eof bit.
+                  c = is.peek ();
                 }
               else
                 is.setstate (std::ios::failbit); // indicate that read has failed.
             }
           else if (is_imag_unit (c))
             {
               imag = true;
               is.get ();
-              is.peek (); // Sets eof bit.
+              c = is.peek ();
             }
         }
     }
 
+  if (is.good ())
+    {
+      // Skip trailing spaces.
+      while (isspace (c))
+        {
+          is.get ();
+          c = is.peek ();
+        }
+    }
+
   if (negative)
     num = -num;
 
   return is;
 }
 
 static inline void
 set_component (Complex& c, double num, bool imag)
@@ -336,16 +348,18 @@ risk of using @code{eval} on unknown dat
 
   return retval;
 }
 
 /*
 
 %!assert (str2double ("1"), 1)
 %!assert (str2double ("-.1e-5"), -1e-6)
+%!assert (str2double (char ("1", "2 3", "4i")), [1; NaN; 4i]);
+%!assert (str2double ("-.1e-5"), -1e-6)
 %!assert (str2double ("1,222.5"), 1222.5)
 %!assert (str2double ("i"), i)
 %!assert (str2double ("2j"), 2i)
 %!assert (str2double ("2 + j"), 2+j)
 %!assert (str2double ("i*2 + 3"), 3+2i)
 %!assert (str2double (".5*i + 3.5"), 3.5+0.5i)
 %!assert (str2double ("1e-3 + i*.25"), 1e-3 + 0.25i)
 %!assert (str2double (["2 + j";"1.25e-3";"-05"]), [2+i; 1.25e-3; -5])
