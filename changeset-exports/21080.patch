# HG changeset patch
# User Rik <rik@octave.org>
# Date 1452918489 28800
#      Fri Jan 15 20:28:09 2016 -0800
# Node ID 529593df22faccc04c6631b37a10fcc45fe77e5f
# Parent  706dcaf7bf5fbf548bc8d5220e99244cf57c365a
bsxfun.cc: Pre-declare size of octave_value_list.

* bsxfun.cc (Fbsxfun): Pre-declare size of octave_value_list.  Cuddle
parenthesis when indexing.

diff --git a/libinterp/corefcn/bsxfun.cc b/libinterp/corefcn/bsxfun.cc
--- a/libinterp/corefcn/bsxfun.cc
+++ b/libinterp/corefcn/bsxfun.cc
@@ -397,26 +397,26 @@ dimensionality as the other array.\n\
       for (octave_idx_type i = 0; i < nd; i++)
         dvc(i) = (dva(i) < 1 ? dva(i)
                   : (dvb(i) < 1 ? dvb(i)
                      : (dva(i) > dvb(i)
                         ? dva(i) : dvb(i))));
 
       if (dva == dvb || dva.numel () == 1 || dvb.numel () == 1)
         {
-          octave_value_list inputs;
-          inputs (0) = A;
-          inputs (1) = B;
+          octave_value_list inputs (2);
+          inputs(0) = A;
+          inputs(1) = B;
           retval = func.do_multi_index_op (1, inputs);
         }
       else if (dvc.numel () < 1)
         {
-          octave_value_list inputs;
-          inputs (0) = A.resize (dvc);
-          inputs (1) = B.resize (dvc);
+          octave_value_list inputs (2);
+          inputs(0) = A.resize (dvc);
+          inputs(1) = B.resize (dvc);
           retval = func.do_multi_index_op (1, inputs);
         }
       else
         {
           octave_idx_type ncount = 1;
           for (octave_idx_type i = 1; i < nd; i++)
             ncount *= dvc(i);
 
@@ -438,27 +438,27 @@ dimensionality as the other array.\n\
           BSXDEF(uint32NDArray);
           BSXDEF(uint64NDArray);
 
           octave_value Ac ;
           octave_value_list idxA;
           octave_value Bc;
           octave_value_list idxB;
           octave_value C;
-          octave_value_list inputs;
+          octave_value_list inputs (2);
           Array<int> ra_idx (dim_vector (dvc.length (), 1), 0);
 
 
           for (octave_idx_type i = 0; i < ncount; i++)
             {
               if (maybe_update_column (Ac, A, dva, dvc, i, idxA))
-                inputs (0) = Ac;
+                inputs(0) = Ac;
 
               if (maybe_update_column (Bc, B, dvb, dvc, i, idxB))
-                inputs (1) = Bc;
+                inputs(1) = Bc;
 
               octave_value_list tmp = func.do_multi_index_op (1, inputs);
 
 #define BSXINIT(T, CLS, EXTRACTOR) \
   (result_type == CLS) \
     { \
       have_ ## T = true; \
       result_ ## T = tmp(0). EXTRACTOR ## _array_value (); \
