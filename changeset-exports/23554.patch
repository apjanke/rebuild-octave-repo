# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1496409362 14400
#      Fri Jun 02 09:16:02 2017 -0400
# Node ID b075b1629c2687f6b91ae18d7184099f20abf9d2
# Parent  14723784b9f25ebf1ad2ea9bc6bbca2bcc0a4ff2
don't use hook function in dynamic_library::dynlib_rep::close function

* oct-shlib.h, oct-shlib.cc
(dynamic_library::dynlib_rep::function_names): New function.
(dynamic_library::dynlib_rep::clear_fcn_names)): New function.
(dynamic_library::dynlib_rep::do_close_hook): Delete.
(dynamic_library::close): Return list of function names instead of
calling close_hook function on each function name.

* dynamic-ld.h, dynamic-ld.cc (dynamic_loader::shlibs_list::remove):
Return list of removed functions instead of passing close_hook
function to the shared-library close function.
(dynamic_loader::do_clear): Clear functions removed from dynamically
loaded library here.

diff --git a/libinterp/corefcn/dynamic-ld.cc b/libinterp/corefcn/dynamic-ld.cc
--- a/libinterp/corefcn/dynamic-ld.cc
+++ b/libinterp/corefcn/dynamic-ld.cc
@@ -49,33 +49,34 @@ along with Octave; see the file COPYING.
 namespace octave
 {
   void
   dynamic_loader::shlibs_list::append (const dynamic_library& shl)
   {
     lib_list.push_back (shl);
   }
 
-  void
-  dynamic_loader::shlibs_list::remove (dynamic_library& shl,
-                                       dynamic_library::close_hook cl_hook)
+  std::list<std::string>
+  dynamic_loader::shlibs_list::remove (dynamic_library& shl)
   {
+    std::list<std::string> removed_fcns;
+
     for (iterator p = lib_list.begin (); p != lib_list.end (); p++)
       {
         if (*p == shl)
           {
-            // Erase first to avoid potentially invalidating the pointer by the
-            // following hooks.
             lib_list.erase (p);
 
-            shl.close (cl_hook);
+            removed_fcns = shl.close ();
 
             break;
           }
       }
+
+    return removed_fcns;
   }
 
   dynamic_library
   dynamic_loader::shlibs_list::find_file (const std::string& file_name) const
   {
     dynamic_library retval;
 
     for (const auto& lib : lib_list)
@@ -133,20 +134,28 @@ namespace octave
   dynamic_loader::do_clear (dynamic_library& oct_file)
   {
     if (oct_file.number_of_functions_loaded () > 1)
       {
         warning_with_id ("Octave:reload-forces-clear",
                          "reloading %s clears the following functions:",
                          oct_file.file_name ().c_str ());
 
-        loaded_shlibs.remove (oct_file, do_clear_function);
+        std::list<std::string> removed_fcns = loaded_shlibs.remove (oct_file);
+
+        for (const auto& fcn_name : removed_fcns)
+          do_clear_function (fcn_name);
       }
     else
-      loaded_shlibs.remove (oct_file, symbol_table::clear_dld_function);
+      {
+        std::list<std::string> removed_fcns = loaded_shlibs.remove (oct_file);
+
+        for (const auto& fcn_name : removed_fcns)
+          symbol_table::clear_dld_function (fcn_name);
+      }
   }
 
   octave_function *
   dynamic_loader::do_load_oct (const std::string& fcn_name,
                                const std::string& file_name,
                                bool relative)
   {
     octave_function *retval = nullptr;
diff --git a/libinterp/corefcn/dynamic-ld.h b/libinterp/corefcn/dynamic-ld.h
--- a/libinterp/corefcn/dynamic-ld.h
+++ b/libinterp/corefcn/dynamic-ld.h
@@ -48,18 +48,17 @@ namespace octave
       typedef std::list<octave::dynamic_library>::const_iterator const_iterator;
 
       shlibs_list (void) : lib_list () { }
 
       ~shlibs_list (void) = default;
 
       void append (const octave::dynamic_library& shl);
 
-      void remove (octave::dynamic_library& shl,
-                   octave::dynamic_library::close_hook cl_hook = 0);
+      std::list<std::string> remove (octave::dynamic_library& shl);
 
       octave::dynamic_library find_file (const std::string& file_name) const;
 
       void display (void) const;
 
     private:
 
       // No copying!
diff --git a/liboctave/util/oct-shlib.cc b/liboctave/util/oct-shlib.cc
--- a/liboctave/util/oct-shlib.cc
+++ b/liboctave/util/oct-shlib.cc
@@ -109,16 +109,27 @@ namespace octave
           retval->fake_reload ();
       }
     else
       retval = new_instance (f);
 
     return retval;
   }
 
+  std::list<std::string>
+  dynamic_library::dynlib_rep::function_names (void) const
+  {
+    std::list<std::string> retval;
+
+    for (const auto& p : fcn_names)
+      retval.push_back (p.first);
+
+    return retval;
+  }
+
   void
   dynamic_library::dynlib_rep::add_fcn_name (const std::string& name)
   {
     auto p = fcn_names.find (name);
 
     if (p == fcn_names.end ())
       fcn_names[name] = 1;
     else
@@ -136,25 +147,16 @@ namespace octave
       {
         fcn_names.erase (fcn_name);
         retval = true;
       }
 
     return retval;
   }
 
-  void
-  dynamic_library::dynlib_rep::do_close_hook (dynamic_library::close_hook cl_hook)
-  {
-    for (auto& fcn_sz : fcn_names)
-      cl_hook (fcn_sz.first);
-
-    fcn_names.clear ();
-  }
-
   std::map<std::string, dynamic_library::dynlib_rep *>
     dynamic_library::dynlib_rep::instances;
 
   dynamic_library::dynlib_rep dynamic_library::nil_rep;
 
 #if defined (HAVE_DLOPEN_API)
 
   class
@@ -430,17 +432,17 @@ namespace octave
 
     ~octave_dyld_shlib (void);
 
     void open (const std::string& f);
 
     void * search (const std::string& name,
                    dynamic_library::name_mangler mangler = 0);
 
-    void close (dynamic_library::close_hook cl_hook = 0);
+    void close (void);
 
     bool is_open (void) const {return (handle != 0); }
 
   private:
 
     NSObjectFileImage img;
     NSModule handle;
   };
diff --git a/liboctave/util/oct-shlib.h b/liboctave/util/oct-shlib.h
--- a/liboctave/util/oct-shlib.h
+++ b/liboctave/util/oct-shlib.h
@@ -21,32 +21,32 @@ along with Octave; see the file COPYING.
 
 */
 
 #if ! defined (octave_oct_shlib_h)
 #define octave_oct_shlib_h 1
 
 #include "octave-config.h"
 
+#include <list>
 #include <string>
 #include <map>
 
 #include "oct-time.h"
 #include "oct-refcount.h"
 
 namespace octave
 {
   class
   OCTAVE_API
   dynamic_library
   {
   public: // FIXME: make this class private?
 
     typedef std::string (*name_mangler) (const std::string&);
-    typedef void (*close_hook) (const std::string&);
 
     class dynlib_rep
     {
     public:
 
       dynlib_rep (void)
         : count (1), file (), tm_loaded (time_t ()), fcn_names () { }
 
@@ -77,21 +77,23 @@ namespace octave
       octave::sys::time time_loaded (void) const
       { return tm_loaded; }
 
       std::string file_name (void) const
       { return file; }
 
       size_t num_fcn_names (void) const { return fcn_names.size (); }
 
+      std::list<std::string> function_names (void) const;
+
       void add_fcn_name (const std::string&);
 
       bool remove_fcn_name (const std::string&);
 
-      void do_close_hook (close_hook cl_hook);
+      void clear_fcn_names (void) { fcn_names.clear (); }
 
     public:
 
       octave::refcount<int> count;
 
     protected:
 
       void fake_reload (void);
@@ -148,22 +150,25 @@ namespace octave
     bool operator == (const dynamic_library& sl) const
     { return (rep == sl.rep); }
 
     operator bool () const { return rep->is_open (); }
 
     void open (const std::string& f)
     { *this = dynamic_library (f); }
 
-    void close (close_hook cl_hook = 0)
+    std::list<std::string> close (void)
     {
-      if (cl_hook)
-        rep->do_close_hook (cl_hook);
+      std::list<std::string> removed_fcns = rep->function_names ();
+
+      rep->clear_fcn_names ();
 
       *this = dynamic_library ();
+
+      return removed_fcns;
     }
 
     void * search (const std::string& nm, name_mangler mangler = 0) const
     {
       void *f = rep->search (nm, mangler);
       if (f)
         rep->add_fcn_name (nm);
 
