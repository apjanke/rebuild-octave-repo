# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1492661068 25200
#      Wed Apr 19 21:04:28 2017 -0700
# Node ID 80c1fc2b411232043f305df15206c4b2ad28c818
# Parent  a40434df6f5432fb1a89a64dc4519eb0e147bdf2
system.tst: fix failing system call tests in some corner cases

* system.tst: Adjust test of getppid to allow return value to be zero,
for example if Octave runs as PID 1.  Ensure that endpwent is called
before tests of getpwent.  Ensure that endgrent is called before tests
of getgrent.

diff --git a/test/system.tst b/test/system.tst
--- a/test/system.tst
+++ b/test/system.tst
@@ -227,17 +227,17 @@
 
 %!error <... getpgrp> getpgrp (1)
 
 %!assert (getpid () > 0)
 
 %!error <... getpid> getpid (1)
 
 %!testif HAVE_GETPPID
-%! assert (getppid () > 0);
+%! assert (getppid () >= 0);
 
 %!error <... getppid> getppid (1)
 
 %!testif HAVE_GETEUID
 %! assert (geteuid () >= 0)
 
 %!error <... geteuid> geteuid (1)
 
@@ -291,87 +291,95 @@
 %! endif
 %! assert (pwd (), xdir);
 
 %!error cd (1)
 
 %!assert (ischar (pwd ()))
 
 %!testif HAVE_GETPWENT
+%! endpwent ();
 %! s = getpwent ();
 %! endpwent ();
 %! assert (isstruct (s)
 %!         && isfield (s, "name")
 %!         && isfield (s, "passwd")
 %!         && isfield (s, "uid")
 %!         && isfield (s, "gid")
 %!         && isfield (s, "gecos")
 %!         && isfield (s, "dir")
 %!         && isfield (s, "shell"));
 
 %!error <Invalid call to getpwent> getpwent (1)
 
 %!testif HAVE_GETPWUID
+%! endpwent ();
 %! x = getpwent ();
 %! y = getpwuid (x.uid);
 %! endpwent ();
 %! assert (strcmp (x.name, y.name) && x.uid == y.uid && x.gid == y.gid);
 
 %!error <Invalid call to getpwuid> getpwuid ()
 %!error <Invalid call to getpwuid> getpwuid (1, 2)
 
 %!testif HAVE_GETPWNAM
+%! endpwent ();
 %! x = getpwent ();
 %! y = getpwnam (x.name);
 %! endpwent ();
 %! assert (strcmp (x.name, y.name) && x.uid == y.uid && x.gid == y.gid);
 
 %!error <Invalid call to getpwnam> getpwnam ()
 %!error <Invalid call to getpwnam> getpwnam ("foo", 1)
 
 %!testif HAVE_SETPWENT
+%! endpwent ();
 %! x = getpwent ();
 %! setpwent ();
 %! y = getpwent ();
 %! endpwent ();
 %! assert (strcmp (x.name, y.name) && x.uid == y.uid && x.gid == y.gid);
 
 %!error <Invalid call to setpwent> setpwent (1)
 %!error <Invalid call to endpwent> endpwent (1)
 
 %!testif HAVE_GETGRENT
+%! endgrent ();
 %! x = getgrent ();
 %! endgrent ();
 %! assert (isstruct (x)
 %!         && isfield (x, "name")
 %!         && isfield (x, "passwd")
 %!         && isfield (x, "gid")
 %!         && isfield (x, "mem"));
 
 %!error <Invalid call to getgrent> getgrent (1)
 
 %!testif HAVE_GETGRGID
+%! endgrent ();
 %! x = getgrent ();
 %! y = getgrgid (x.gid);
 %! endgrent ();
 %! assert (strcmp (x.name, y.name) && x.gid == y.gid);
 
 %!error <Invalid call to getgrgid> getgrgid ()
 %!error <Invalid call to getgrgid> getgrgid (1, 2)
 
 %!testif HAVE_GETGRNAM
+%! endgrent ();
 %! x = getgrent ();
 %! y = getgrnam (x.name);
 %! endgrent ();
 %! assert (strcmp (x.name, y.name) && x.gid == y.gid);
 
 %!error <Invalid call to getgrnam> getgrnam ()
 %!error <Invalid call to getgrnam> getgrnam ("foo", 1)
 
 %!testif HAVE_SETGRENT
+%! endgrent ();
 %! x = getgrent ();
 %! setgrent ();
 %! y = getgrent ();
 %! endgrent ();
 %! assert (strcmp (x.name, y.name) && x.gid == y.gid);
 
 %!error <Invalid call to setgrent> setgrent (1)
 %!error <Invalid call to endgrent> endgrent (1)
