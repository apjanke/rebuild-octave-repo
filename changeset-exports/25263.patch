# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1523861964 25200
#      Sun Apr 15 23:59:24 2018 -0700
# Branch stable
# Node ID 316b75b0d886d982eef3557811231cc05dd60a5e
# Parent  32323f5e61d264b3a1efc63f6b8251fee7f189bb
restore find (false) to be compatible with Matlab again (bug #53655)

* find.cc (Ffind): Keep the dimensions of an empty logical result, so that
find (false) returns the correct size and shape.  Add related BISTs.

diff --git a/libinterp/corefcn/find.cc b/libinterp/corefcn/find.cc
--- a/libinterp/corefcn/find.cc
+++ b/libinterp/corefcn/find.cc
@@ -441,17 +441,18 @@ b = sparse (i, j, v, sz(1), sz(2));
           // No need to catch index_exception, since arg is bool.
           // Out-of-range errors have already set pos, and will be
           // caught later.
 
           octave_value result = arg.index_vector ().unmask ();
 
           dim_vector dv = result.dims ();
 
-          retval(0) = (dv.isvector () ? result : result.reshape (dv.as_column ()));
+          retval(0) = (dv.all_zero () || dv.isvector ()
+                       ? result : result.reshape (dv.as_column ()));
         }
       else
         {
           boolNDArray v = arg.bool_array_value ();
 
           retval = find_nonzero_elem_idx (v, nargout, n_to_find, direction);
         }
     }
@@ -580,16 +581,21 @@ b = sparse (i, j, v, sz(1), sz(2));
 %! prow = [5 1 4 3 2];
 %! P = eye (5) (prow, :);
 %! [i, j, v] = find (P);
 %! [ifull, jfull, vfull] = find (full (P));
 %! assert (i, ifull);
 %! assert (j, jfull);
 %! assert (all (v == 1));
 
+%!assert <*53655> (find (false), zeros (0, 0))
+%!assert <*53655> (find ([false, false]), zeros (1, 0))
+%!assert <*53655> (find ([false; false]), zeros (0, 1))
+%!assert <*53655> (find ([false, false; false, false]), zeros (0, 1))
+
 %!assert (find ([2 0 1 0 5 0], 1), 1)
 %!assert (find ([2 0 1 0 5 0], 2, "last"), [3, 5])
 
 %!assert (find ([2 0 1 0 5 0], Inf), [1, 3, 5])
 %!assert (find ([2 0 1 0 5 0], Inf, "last"), [1, 3, 5])
 
 %!error find ()
 */
