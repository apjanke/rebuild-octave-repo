# HG changeset patch
# User jwe
# Date 1094073894 0
#      Wed Sep 01 21:24:54 2004 +0000
# Node ID ed0f3cb6d3d40742052301b84146bb76a7131055
# Parent  7a3a480e86450dff670f0ea7a3a6f94925bb8816
[project @ 2004-09-01 21:24:53 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,27 @@
+2004-09-01  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTION/quad.cc: Allow function handle and inline functions.
+	Use a unique function name and delete it on exit.
+
+	* ov.h (is_inline_function): New virtual function.
+	* ov-fcn-inline.h (is_inline_function): New function.
+	* ov-base.h (is_inline_function): New function.
+
+	* ov-fcn-inline.cc (octave_fcn_handle::octave_fcn_handle):
+	Use unique_symbol_name and clear_function instead of manipulating
+	symbol table directly.
+
+	* variables.cc (unique_symbol_name): New function.
+	(clear_function): New function.
+	* variables.h: Provide decls.
+
+	* dynamic-ld.cc (do_clear_function): Rename from clear_function.
+
 2004-09-01  John W. Eaton  <jwe@octave.org>
 
 	* OPERATORS/op-i8-i8.cc, OPERATORS/op-i16-i16.cc,
 	OPERATORS/op-i32-i32.cc, OPERATORS/op-i64-i64.cc,
 	OPERATORS/op-ui8-ui8.cc, OPERATORS/op-ui16-ui16.cc,
 	OPERATORS/op-ui32-ui32.cc, OPERATORS/op-ui64-ui64.cc:
 	Define and install mixed assignment ops.
 	* op-int.h: Define mixed integer/double ops.
diff --git a/src/DLD-FUNCTIONS/quad.cc b/src/DLD-FUNCTIONS/quad.cc
--- a/src/DLD-FUNCTIONS/quad.cc
+++ b/src/DLD-FUNCTIONS/quad.cc
@@ -100,16 +100,18 @@ quad_user_function (double x)
     }
 
   return retval;
 }
 
 #define QUAD_ABORT() \
   do \
     { \
+      if (fcn_name.length()) \
+	clear_function (fcn_name); \
       unwind_protect::run_frame ("Fquad"); \
       return retval; \
     } \
   while (0)
 
 #define QUAD_ABORT1(msg) \
   do \
     { \
@@ -125,18 +127,19 @@ quad_user_function (double x)
       QUAD_ABORT (); \
     } \
   while (0)
 
 DEFUN_DLD (quad, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{v}, @var{ier}, @var{nfun}, @var{err}] =} quad (@var{f}, @var{a}, @var{b}, @var{tol}, @var{sing})\n\
 Integrate a nonlinear function of one variable using Quadpack.\n\
-The first argument is the name of the  function to call to compute the\n\
-value of the integrand.  It must have the form\n\
+The first argument is the name of the  function, the function handle or\n\
+the inline function to call to compute the value of the integrand.  It\n\
+must have the form\n\
 \n\
 @example\n\
 y = f (x)\n\
 @end example\n\
 \n\
 @noindent\n\
 where @var{y} and @var{x} are scalars.\n\
 \n\
@@ -160,33 +163,44 @@ required, and @var{err} contains an esti
 solution.\n\
 \n\
 You can use the function @code{quad_options} to set optional\n\
 parameters for @code{quad}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
+  std::string fcn_name;
+
   warned_imaginary = false;
 
   unwind_protect::begin_frame ("Fquad");
 
   unwind_protect_int (call_depth);
   call_depth++;
 
   if (call_depth > 1)
     QUAD_ABORT1 ("invalid recursive call");
 
   int nargin = args.length ();
 
   if (nargin > 2 && nargin < 6 && nargout < 5)
     {
-      quad_fcn = extract_function (args(0), "quad", "__quad_fcn__",
-				   "function y = __quad_fcn__ (x) y = ",
-				   "; endfunction");
+      if (args(0).is_function_handle () || args(0).is_inline_function ())
+	quad_fcn = args(0).function_value ();
+      else
+	{
+	  fcn_name = unique_symbol_name ("__quad__fcn__");
+	  std::string fname = "function y = ";
+	  fname.append (fcn_name);
+	  fname.append ("(x) y = ");
+	  quad_fcn = extract_function (args(0), "quad", fcn_name, fname,
+				       "; endfunction");
+	}
+
       if (! quad_fcn)
 	QUAD_ABORT ();
 
       double a = args(1).double_value ();
 
       if (error_state)
 	QUAD_ABORT1 ("expecting second argument to be a scalar");
 
@@ -284,16 +298,19 @@ parameters for @code{quad}.\n\
 	  panic_impossible ();
 	  break;
 	}
 
       retval(3) = abserr;
       retval(2) = static_cast<double> (nfun);
       retval(1) = static_cast<double> (ier);
       retval(0) = val;
+
+      if (fcn_name.length())
+	clear_function (fcn_name);
     }
   else
     print_usage ("quad");
 
   unwind_protect::run_frame ("Fquad");
 
   return retval;
 }
diff --git a/src/dynamic-ld.cc b/src/dynamic-ld.cc
--- a/src/dynamic-ld.cc
+++ b/src/dynamic-ld.cc
@@ -190,17 +190,17 @@ octave_dynamic_loader::instance_ok (void
 
       retval = false;
     }
 
   return retval;
 }
 
 static
-void clear_function (const std::string& fcn_name)
+void do_clear_function (const std::string& fcn_name)
 {
   if (Vwarn_reload_forces_clear)
     warning ("  %s", fcn_name.c_str ());
 
   curr_sym_tab->clear (fcn_name);
 
   if (curr_sym_tab != top_level_sym_tab)
     top_level_sym_tab->clear (fcn_name);
@@ -230,17 +230,17 @@ octave_dynamic_loader::do_load (const st
       if (function && oct_file.is_out_of_date ())
 	{
 	  int n = oct_file.number_of_functions_loaded ();
 
 	  if (n > 0 && Vwarn_reload_forces_clear)
 	    warning ("reloading %s clears the following functions:",
 		     oct_file.file_name().c_str ());
 
-	  oct_file.close (clear_function);
+	  oct_file.close (do_clear_function);
 
 	  function = 0;
 	}
 
       if (! function)
 	{
 	  std::string oct_file_name
 	    = file_name.empty () ? oct_file_in_path (fcn_name) : file_name;
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -166,16 +166,18 @@ public:
 
   bool is_zero_by_zero (void) const
     { return (rows () == 0 && columns () == 0); }
 
   bool is_constant (void) const { return false; }
 
   bool is_function_handle (void) const { return false; }
 
+  bool is_inline_function (void) const { return false; }
+
   bool is_function (void) const { return false; }
 
   bool is_builtin_function (void) const { return false; }
 
   bool is_dld_function (void) const { return false; }
 
   short int short_value (bool = false, bool = false) const;
 
diff --git a/src/ov-fcn-inline.cc b/src/ov-fcn-inline.cc
--- a/src/ov-fcn-inline.cc
+++ b/src/ov-fcn-inline.cc
@@ -50,21 +50,17 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
 				     "inline function");
 
 octave_fcn_inline::octave_fcn_inline (const std::string& f,
 				      const string_vector& a, 
 				      const std::string& n)
   : octave_fcn_handle (0, n), iftext (f), ifargs (a) 
 {
   // Find a function name that isn't already in the symbol table.
-
-  std::string fname = "__inline__";
-
-  while (symbol_exist (fname))
-    fname.append ("X");
+  std::string fname = unique_symbol_name ("__inline__");
 
   // Form a string representing the function. 
 
   OSSTREAM buf;
 
   buf << "function __retval__ = " << fname << "(";
 
   for (int i = 0; i < ifargs.length (); i++)
@@ -86,20 +82,17 @@ octave_fcn_inline::octave_fcn_inline (co
   OSSTREAM_FREEZE (buf);
 
   octave_value tmp = lookup_function (fname);
 
   if (tmp.is_function ())
     {
       fcn = tmp;
 
-      // XXX FIXME XXX -- probably shouldn't be directly altering the
-      // symbol table here.
-
-      fbi_sym_tab->clear_function (fname);
+      clear_function (fname);
     }
   else
     error ("inline: unable to define function");
 }
 
 void
 octave_fcn_inline::print (std::ostream& os, bool pr_as_read_syntax) const
 {
diff --git a/src/ov-fcn-inline.h b/src/ov-fcn-inline.h
--- a/src/ov-fcn-inline.h
+++ b/src/ov-fcn-inline.h
@@ -52,16 +52,18 @@ public:
   octave_fcn_inline (void)
     : octave_fcn_handle(), iftext (), ifargs () { }
 
   octave_fcn_inline (const std::string& f, const string_vector& a, 
 		     const std::string& n = std::string ());
 
   ~octave_fcn_inline (void) { }
 
+  bool is_inline_function (void) const { return true; }
+
   octave_fcn_inline *fcn_inline_value (bool = false) { return this; }
 
   std::string fcn_text (void) const { return iftext; }
 
   string_vector fcn_arg_names (void) const { return ifargs; }
 
   octave_value convert_to_str_internal (bool, bool) const;
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -479,16 +479,19 @@ public:
     { return rep->is_zero_by_zero (); }
 
   virtual bool is_constant (void) const
     { return rep->is_constant (); }
 
   virtual bool is_function_handle (void) const
     { return rep->is_function_handle (); }
 
+  virtual bool is_inline_function (void) const
+    { return rep->is_inline_function (); }
+
   virtual bool is_function (void) const
     { return rep->is_function (); }
 
   virtual bool is_builtin_function (void) const
     { return rep->is_builtin_function (); }
 
   virtual bool is_dld_function (void) const
     { return rep->is_dld_function (); }
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -657,16 +657,26 @@ symbol_exist (const std::string& name, c
 	      retval = 7;
 	    }
 	}
     }
 
   return retval;
 }
 
+std::string
+unique_symbol_name (const std::string& basename)
+{
+  // XXX FIXME XXX Can we be smarter than just adding characters?
+  std::string name = basename;
+  while (symbol_exist (name, "any"))
+    name.append ("X");
+  return name;
+}
+
 DEFUN (exist, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} exist (@var{name}, @var{type})\n\
 Return 1 if the name exists as a variable, 2 if the name (after\n\
 appending @samp{.m}) is a function file in Octave's LOADPATH, 3 if the\n\
 name is a @samp{.oct} file in Octave's LOADPATH, 5 if the name is a\n\
 built-in function, 7 if the name is a directory, 101 if the name is\n\
 a built-in variable, 102 if the name is a built-in constant, or 103\n\
@@ -1892,16 +1902,23 @@ do_matlab_compatible_clear (const string
       if (cond) \
         { \
           print_usage ("clear"); \
           return retval; \
         } \
     } \
   while (0)
 
+
+bool
+clear_function (const std::string& nm)
+{
+  return do_clear_function (nm);
+}
+
 DEFCMD (clear, args, ,
   "-*- texinfo -*-\n\
 @deffn {Command} clear [-x] pattern @dots{}\n\
 Delete the names matching the given patterns from the symbol table.  The\n\
 pattern may contain the following special characters:\n\
 \n\
 @table @code\n\
 @item ?\n\
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -72,16 +72,19 @@ generate_struct_completions (const std::
 			     std::string& hint);
 
 extern bool
 looks_like_struct (const std::string& text);
 
 extern int
 symbol_exist (const std::string& name, const std::string& type = "any");
 
+extern std::string
+unique_symbol_name (const std::string& basename);
+
 extern bool lookup (symbol_record *s, bool exec_script = true);
 
 extern symbol_record *
 lookup_by_name (const std::string& nm, bool exec_script = true);
 
 extern octave_value lookup_function (const std::string& nm);
 
 extern octave_value lookup_user_function (const std::string& nm);
@@ -111,16 +114,18 @@ bind_builtin_variable (const std::string
 		       bool protect = false, bool eternal = false,
 		       symbol_record::change_function f = 0,
 		       const std::string& help = std::string ());
 
 extern void mlock (const std::string&);
 extern void munlock (const std::string&);
 extern bool mislocked (const std::string&);
 
+extern bool clear_function (const std::string& nm);
+
 // Symbol table for symbols at the top level.
 extern symbol_table *top_level_sym_tab;
 
 // Symbol table for the current scope.
 extern symbol_table *curr_sym_tab;
 
 // Symbol table for the current caller scope.
 extern symbol_table *curr_caller_sym_tab;
