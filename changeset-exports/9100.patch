# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1239081398 -7200
#      Tue Apr 07 07:16:38 2009 +0200
# Node ID 1a8bbfb2f7cfa7527ac86d6a49cc0dec92eb9b1d
# Parent  3a5d41b382abf2e63736f909923f253922f4de56
optimize simple stack operations on arrays

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -50,24 +50,16 @@ void
 Array<T>::make_unique (void)
 {
   if (rep->count > 1)
     {
       --rep->count;
       rep = new ArrayRep (slice_data, slice_len, true);
       slice_data = rep->data;
     }
-  else if (slice_len != rep->len)
-    {
-      // Possibly economize here.
-      ArrayRep *new_rep = new ArrayRep (slice_data, slice_len, true);
-      delete rep;
-      rep = new_rep;
-      slice_data = rep->data;
-    }
 }
 
 template <class T>
 Array<T>::Array (const Array<T>& a, const dim_vector& dv)
   : rep (a.rep), dimensions (dv), 
     slice_data (a.slice_data), slice_len (a.slice_len)
 {
   rep->count++;
@@ -1067,17 +1059,46 @@ Array<T>::resize_fill (octave_idx_type n
       else
          invalid = true;
         
       if (invalid)
         gripe_invalid_resize ();
       else
         {
           octave_idx_type nx = numel ();
-          if (n != nx)
+          if (n == nx - 1 && n > 0)
+            {
+              // Stack "pop" operation.
+              if (rep->count == 1)
+                slice_data[slice_len-1] = T ();
+              slice_len--;
+              dimensions = dv;
+            }
+          else if (n == nx + 1 && nx > 0)
+            {
+              // Stack "push" operation.
+              if (rep->count == 1 && slice_data + slice_len < rep->data + rep->len)
+                {
+                  slice_data[slice_len++] = rfv;
+                  dimensions = dv;
+                }
+              else
+                {
+                  static const octave_idx_type max_stack_chunk = 1024;
+                  octave_idx_type nn = n + std::min (nx, max_stack_chunk);
+                  Array<T> tmp (Array<T> (nn), dv, 0, n);
+                  T *dest = tmp.fortran_vec ();
+
+                  std::copy (data (), data () + nx, dest);
+                  dest[nx] = rfv;
+
+                  *this = tmp;
+                }
+            }
+          else if (n != nx)
             {
               Array<T> tmp = Array<T> (dv);
               T *dest = tmp.fortran_vec ();
 
               octave_idx_type n0 = std::min (n, nx), n1 = n - n0;
               dest = std::copy (data (), data () + n0, dest);
               std::fill (dest, dest + n1, rfv);
 
@@ -1484,19 +1505,23 @@ Array<T>::delete_elements (const idx_vec
     }
   else if (i.extent (n) != n)
     {
       gripe_index_out_of_range ();
     }
   else if (i.length (n) != 0)
     {
       octave_idx_type l, u;
-
       bool col_vec = ndims () == 2 && columns () == 1 && rows () != 1;
-      if (i.is_cont_range (n, l, u))
+      if (i.is_scalar () && i(0) == n-1)
+        {
+          // Stack "pop" operation.
+          resize (n-1);
+        }
+      else if (i.is_cont_range (n, l, u))
         {
           // Special case deleting a contiguous range.
           octave_idx_type m = n + l - u;
           Array<T> tmp (dim_vector (col_vec ? m : 1, !col_vec ? m : 1));
           const T *src = data ();
           T *dest = tmp.fortran_vec ();
           dest = std::copy (src, src + l, dest);
           dest = std::copy (src + u, src + n, dest);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2009-04-04  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (Array<T>::make_unique): Don't economize when unique.
+	(Array<T>::resize_fill (octave_idx_type, const T&)): Optimize push &
+	pop operations.
+	(Array<T>::delete_elements (const idx_vector&)): Do pop operation
+	using resize.
+
 2009-03-29  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (Array<T>::assign): Remove redundant checks after invalid
 	resize.
 
 2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (Array<T>::find): Reshape result for Matlab compatibility.
