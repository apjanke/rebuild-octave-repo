# HG changeset patch
# User Rik <rik@octave.org>
# Date 1444441978 25200
#      Fri Oct 09 18:52:58 2015 -0700
# Node ID 7c0e10f035bd74dbfe9451c72bbd083f4917d418
# Parent  e34692daf663ec52bd88dcb2d3a21253527220fe
Extend parser to accept binary constants that begin with '0b' or '0B'.

* NEWS: Announce change:

* lex.ll: Define NUMBIN to be 0[bB] followed by 0,1, or '_'.
Define NUMBER to be NUMREAL|NUMHEX|NUMBIN.
*lex.ll (looks_like_bin): New function to detect 0[bB] prefix.
*lex.ll (handle_numbe): Call looks_like_bin() and if found then convert
binary string to double.

* parser.tst: Add tests for new behavior.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -2,16 +2,23 @@ Summary of important user-visible change
 ---------------------------------------------------------
 
  ** The parser has been extended to accept, but ignore, underscore characters
     in numbers.  This facilitates writing more legible code by using '_' as
     a thousands separator or to group nibbles into bytes in hex constants.
 
     Examples: 1_000_000 == 1e6 or 0xDE_AD_BE_EF
 
+ ** The parser has been extended to understand binary numbers which begin
+    with the prefix '0b' or '0B'.  The value returned is Octave's default
+    numeric class of double, not at unsigned integer class.  Therefore numbers
+    greater than flintmax (2^53) will lose some precision.
+
+    Examples: 0b101 == 5 or 0B1100_0001 == 0xC1
+
  ** The default colormap is now set to 'viridis' which is also
     the default colormap in matplotlib. This new colormap fixes
     some of the main issues with the old default colormap 'jet'
     such as its bad 'luminance profile' and is also more similar
     to Matlab's new default colormap 'parula'.
 
  ** Octal ('\NNN') and hex ('\xNN') escape sequences in single quoted
     strings are now interpreted by the function do_string_escapes().
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -59,16 +59,17 @@ object) relevant global values before an
 %x SQ_STRING_START
 
 %x FQ_IDENT_START
 
 %{
 
 #include <cctype>
 #include <cstring>
+#include <stdint.h>
 
 #include <iostream>
 #include <set>
 #include <sstream>
 #include <string>
 #include <stack>
 
 #include <sys/types.h>
@@ -323,19 +324,20 @@ D       [0-9]
 D_      [0-9_]
 S       [ \t]
 NL      ((\n)|(\r)|(\r\n))
 Im      [iIjJ]
 CCHAR   [#%]
 IDENT   ([_$a-zA-Z][_$a-zA-Z0-9]*)
 FQIDENT ({IDENT}(\.{IDENT})*)
 EXPON   ([DdEe][+-]?{D}{D_}*)
-NUMREAL (({D}{D_}*\.?{D_}*{EXPON}?)|(\.{D}{D_}*{EXPON}?))
+NUMBIN  (0[bB][01_]+)
 NUMHEX  (0[xX][0-9a-fA-F][0-9a-fA-F_]*)
-NUMBER  ({NUMREAL}|{NUMHEX})
+NUMREAL (({D}{D_}*\.?{D_}*{EXPON}?)|(\.{D}{D_}*{EXPON}?))
+NUMBER  ({NUMREAL}|{NUMHEX}|{NUMBIN})
 
 ANY_EXCEPT_NL [^\r\n]
 ANY_INCLUDING_NL (.|{NL})
 
 %%
 
 %{
 // Make script and function files start with a bogus token. This makes
@@ -2653,16 +2655,22 @@ bool
 octave_base_lexer::whitespace_is_significant (void)
 {
   return (nesting_level.is_bracket ()
           || (nesting_level.is_brace ()
               && ! looking_at_object_index.front ()));
 }
 
 static inline bool
+looks_like_bin (const char *s, int len)
+{
+  return (len > 2 && s[0] == '0' && (s[1] == 'b' || s[1] == 'B'));
+}
+
+static inline bool
 looks_like_hex (const char *s, int len)
 {
   return (len > 2 && s[0] == '0' && (s[1] == 'x' || s[1] == 'X'));
 }
 
 void
 octave_base_lexer::handle_number (void)
 {
@@ -2685,16 +2693,29 @@ octave_base_lexer::handle_number (void)
   if (looks_like_hex (tmptxt, strlen (tmptxt)))
     {
       unsigned long ival;
 
       nread = sscanf (tmptxt, "%lx", &ival);
 
       value = static_cast<double> (ival);
     }
+  else if (looks_like_bin (tmptxt, strlen (tmptxt)))
+    {
+      uint64_t ivalue = 0;
+
+      for (int i = 0; i < strlen (tmptxt); i++)
+        {
+          ivalue <<= 1;
+          ivalue += static_cast<uint64_t> (tmptxt[i] == '1');
+        }
+
+      value = static_cast<double> (ivalue);
+      nread = 1;  // Just to pass the assert stmt below
+    }
   else
     {
       char *idx = strpbrk (tmptxt, "Dd");
 
       if (idx)
         *idx = 'e';
 
       nread = sscanf (tmptxt, "%lf", &value);
diff --git a/test/parser.tst b/test/parser.tst
--- a/test/parser.tst
+++ b/test/parser.tst
@@ -277,16 +277,21 @@
 
 ## Test extended number format which allows '_' as NOP character
 %!assert (123_456, 123456)
 %!assert (.123_456, .123456)
 %!assert (123_456.123_456, 123456.123456)
 %!assert (0xAB_CD, 43981)
 %!assert (2e0_1, 20);
 
+## Test binary constants
+%!assert (0b101, 5)
+%!assert (0B1100_0001, 0xC1)
+%!assert (class (0b1), "double")
+
 ## Test creation of anonymous functions
 
 %!test
 %! af_in_cell = {@(x) [1 2]};
 %! assert (af_in_cell{1}(), [1, 2]);
 
 %!test
 %! R = @(rot) [cos(rot) -sin(rot); sin(rot) cos(rot)];
