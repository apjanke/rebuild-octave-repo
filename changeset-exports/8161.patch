# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1222726133 14400
#      Mon Sep 29 18:08:53 2008 -0400
# Node ID 64f1cd525656e12fbb82b239f5673006119096d5
# Parent  4364389547978a48909f22c3fbde4c411675558a
symtab.cc: style fixes

diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -936,52 +936,57 @@ symbol_table::find (const std::string& n
 octave_value
 symbol_table::find_function (const std::string& name, tree_argument_list *args,
 			     const string_vector& arg_names,
 			     octave_value_list& evaluated_args,
 			     bool& args_evaluated)
 {
   octave_value retval;
 
-  if (name.at(0) == '@')
+  if (! name.empty () && name[0] == '@')
     {
-      // Looking for a class specific function
+      // Look for a class specific function.
       std::string dispatch_type = 
-	name.substr(1, name.find_first_of(file_ops::dir_sep_str ()) - 1);
+	name.substr (1, name.find_first_of (file_ops::dir_sep_str ()) - 1);
+
       std::string method = 
-	name.substr (name.find_last_of(file_ops::dir_sep_str ()) + 1, 
+	name.substr (name.find_last_of (file_ops::dir_sep_str ()) + 1, 
 		     std::string::npos);
 
       retval = find_method (method, dispatch_type);
     }
   else
     {
       size_t pos = name.find_first_of (Vfilemarker);
 
       if (pos == std::string::npos)
-	retval = 
-	  find (name, args, arg_names, evaluated_args, args_evaluated, true);
+	retval = find (name, args, arg_names, evaluated_args,
+		       args_evaluated, true);
       else
 	{
-	  std::string fcn_scope = name.substr(0, pos);
+	  std::string fcn_scope = name.substr (0, pos);
 	  scope_id stored_scope = xcurrent_scope;
 	  xcurrent_scope = xtop_scope;
 	  octave_value parent = find_function (name.substr(0, pos));
+
 	  if (parent.is_defined ())
 	    {
 	      octave_function *parent_fcn = parent.function_value ();
+
 	      if (parent_fcn)
 		{
 		  xcurrent_scope = parent_fcn->scope ();
+
 		  if (xcurrent_scope > 1)
 		    retval = find_function (name.substr (pos + 1), args,
 					    arg_names, evaluated_args, 
 					    args_evaluated);
 		}
 	    }
+
 	  xcurrent_scope = stored_scope;
 	}
     }
 
   return retval;
 }
 
 void
@@ -1007,17 +1012,16 @@ symbol_table::dump (std::ostream& os, sc
 
 	      for (std::map<std::string, octave_value>::const_iterator p = sfuns.begin ();
 		   p != sfuns.end (); p++)
 		os << "    " << p->first << "\n";
 
 	      os << "\n";
 	    }
 
-
 	  inst->do_dump (os);
 	}
     }
 }
 
 void
 symbol_table::dump_global (std::ostream& os)
 {
