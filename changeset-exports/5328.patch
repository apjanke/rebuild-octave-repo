# HG changeset patch
# User jwe
# Date 1115030923 0
#      Mon May 02 10:48:43 2005 +0000
# Node ID 322ab0da00f8e637bad7c96937975953ef2e1c68
# Parent  68eae0f668c4b8e4c798d0e8d0e81c8fcfef5564
[project @ 2005-05-02 10:48:43 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2005-05-02  John W. Eaton  <jwe@octave.org>
+
+	* oct-map.h (Octave_map::seek, Octave_map::contents): New
+	non-const versions.
+	* oct-map.cc (Octave_map::assign (const octave_value_list&,
+	const std::string&, const Cell&)): For clarity, always resize to
+	new_dims.
+
 2005-05-02  David Bateman  <dbateman@free.fr>
 
 	* ov-re-sparse.cc, ov-cx-sparse.cc (load_binary): read save_type into
 	one byte variable.
 	
 2005-04-29  John W. Eaton  <jwe@octave.org>
 
 	* oct-stream.cc (DO_LITERAL_CONVERSION): Cast fmt[i] to unsigned
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -26,16 +26,22 @@ 02110-1301, USA.
 #endif
 
 #include "error.h"
 #include "str-vec.h"
 
 #include "oct-map.h"
 #include "utils.h"
 
+Cell&
+Octave_map::contents (const std::string& k)
+{
+  return map[k];
+}
+
 Cell
 Octave_map::contents (const std::string& k) const
 {
   const_iterator p = seek (k);
 
   return p != end () ? p->second : Cell ();
 }
 
@@ -266,17 +272,17 @@ Octave_map::assign (const octave_value_l
 
       if (new_dims != rhs_dims)
 	{
 	  tmp.resize (new_dims, fill_value);
 	}
       else if (new_dims != curr_dims)
 	{
 	  for (iterator p = begin (); p != end (); p++)
-	    contents(p).resize (rhs_dims, fill_value);
+	    contents(p).resize (new_dims, fill_value);
 	}
 
       dimensions = new_dims;
 
       map[k] = tmp;
     }
 
   return *this;
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -86,26 +86,31 @@ Octave_map
   iterator begin (void) { return iterator (map.begin ()); }
   const_iterator begin (void) const { return const_iterator (map.begin ()); }
 
   iterator end (void) { return iterator (map.end ()); }
   const_iterator end (void) const { return const_iterator (map.end ()); }
 
   std::string key (const_iterator p) const { return p->first; }
 
+  Cell& contents (const std::string& k);
   Cell contents (const std::string& k) const;
 
+  Cell& contents (const_iterator p)
+    { return contents (key(p)); }
+
   Cell contents (const_iterator p) const
     { return contents (key(p)); }
 
   int intfield (const std::string& k, int def_val = 0) const;
 
   std::string stringfield (const std::string& k,
 			   const std::string& def_val = std::string ()) const;
 
+  iterator seek (const std::string& k) { return map.find (k); }
   const_iterator seek (const std::string& k) const { return map.find (k); }
 
   bool contains (const std::string& k) const
     { return (seek (k) != map.end ()); }
 
   void clear (void) { map.clear (); }
 
   string_vector keys (void) const;
