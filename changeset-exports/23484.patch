# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1494443123 -3600
#      Wed May 10 20:05:23 2017 +0100
# Node ID 3ace16b8f0628599c64cf21748313f339ae3bb00
# Parent  6d5a646ede0c71c3fa8ed385af0a9263acb07eef
Support uint32 and uint64 on image conversion functions (bug #47115)

* image/private/ind2x.n: check for any unsigned integer type instead of
  limit to uint16 and uint8.  This affects ind2rgb and ind2gray.
* ind2rgb.m: add tests.

diff --git a/scripts/image/ind2rgb.m b/scripts/image/ind2rgb.m
--- a/scripts/image/ind2rgb.m
+++ b/scripts/image/ind2rgb.m
@@ -112,8 +112,29 @@ endfunction
 %!error <MAP must be a valid colormap> ind2rgb (1, ones (2,4))
 %!error <MAP must be a valid colormap> ind2rgb (1, [-1])
 %!error <MAP must be a valid colormap> ind2rgb (1, [2])
 
 %!warning <contains colors outside of colormap> ind2rgb ([-1 1], jet (64));
 %!warning <contains colors outside of colormap> ind2rgb ([0 1 2], gray (5));
 %!warning <contains colors outside of colormap> ind2rgb ([1 2 6], gray (5));
 %!warning <contains colors outside of colormap> ind2rgb (uint8 ([1 2 5]), gray (5));
+
+## We support any unsigned integer type which Matlab does not.  See
+## bug #47115.
+%!test
+%! cmap = repmat (linspace (0, 1, 9)(:), [1 3]);
+%! ind = [0 3 6; 1 4 7; 2 5 8];
+%! rgb = repmat (reshape (linspace (0, 1, 9), [3 3]), [1 1 3]);
+%! assert (ind2rgb (uint8  (ind), cmap), rgb)
+%! assert (ind2rgb (uint16 (ind), cmap), rgb)
+%! assert (ind2rgb (uint32 (ind), cmap), rgb)
+%! assert (ind2rgb (uint64 (ind), cmap), rgb)
+%! fail ("ind2rgb (int8  (ind), cmap)", "X must be an indexed image")
+%! fail ("ind2rgb (int16 (ind), cmap)", "X must be an indexed image")
+%! fail ("ind2rgb (int32 (ind), cmap)", "X must be an indexed image")
+%! fail ("ind2rgb (int64 (ind), cmap)", "X must be an indexed image")
+%!
+%! cmap(65541,:) = cmap(9,:); # index outside the uint16 range
+%! cmap(9,:) = 0;
+%! ind(3,3) = 65540;
+%! assert (ind2rgb (uint32 (ind), cmap), rgb)
+%! assert (ind2rgb (uint64 (ind), cmap), rgb)
diff --git a/scripts/image/private/ind2x.m b/scripts/image/private/ind2x.m
--- a/scripts/image/private/ind2x.m
+++ b/scripts/image/private/ind2x.m
@@ -22,18 +22,18 @@
 function [x, map] = ind2x (caller, x, map)
 
   ## Check if X is an indexed image.
   ## An indexed image is defined has having only 2D, and that's how Matlab
   ## behaves.  But we want to support ND images, so we will allow up to 4D
   ## and check that the 3rd dimension is a singleton.
   if (all (ndims (x) != [2 4]) || size (x, 3) != 1
       || iscomplex (x) || issparse (x)
-      || (isfloat (x) && x != fix (x))
-      || ! any (strcmp (class (x), {"uint8", "uint16", "single", "double"})))
+      || ! (isfloat (x) && all (x(:) == fix (x(:)))
+            || (isinteger (x) && intmin (class (x)) == 0)))
     error ("%s: X must be an indexed image", caller);
   endif
 
   ## Check if map is a valid colormap.
   if (! iscolormap (map))
     error ("%s: MAP must be a valid colormap", caller);
   endif
 
