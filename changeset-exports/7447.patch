# HG changeset patch
# User jwe
# Date 1202251252 0
#      Tue Feb 05 22:40:52 2008 +0000
# Node ID 25018e35b4cbf531590eb17e2457b236936886ee
# Parent  4bfbec4b0e244fc6fa68c7e57e8a861757304302
[project @ 2008-02-05 22:38:57 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2008-02-05  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* graphics.h.in (base_properties::get_boundingbox): New method.
+	(figure::properties::get_boundingbox): Overload method.
+	(axes::properties::get_boundingbox): Likewise.
+	* graphics.cc (figure::properties::get_boundingbox): Return a
+	left-to-right/top-to-bottom bounding box rectangle.
+	(axes::properties::get_boundingbox): Likewise.
+	(axes::properties::update_camera): Remove backend access and
+	use the new axes bounding box.
+
 2008-02-04  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* graphics.h.in (axes::properties::update_xlim,
 	axes::properties::update_ylim, axes::properties::update_zlim):
 	New update methods.
 
 	* graphics.cc (axes::properties::calc_ticks): New function.
 	(axes::properties::magform): New function.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -1414,28 +1414,29 @@ figure::properties::close (bool pop)
 
       graphics_handle cf = gh_manager::current_figure ();
 
       xset (0, "currentfigure", cf.value ());
     }
 }
 
 Matrix
-figure::properties::get_boundingbox (void) const
+figure::properties::get_boundingbox (bool) const
 {
   graphics_backend b = get_backend ();
   // FIXME: screen size should be obtained from root object
   Matrix screen_size = b.get_screen_size ();
   Matrix pos;
 
   pos = convert_position (get_position ().matrix_value (), get_units (),
 			  "pixels", screen_size, b);
 
   pos(0)--;
   pos(1)--;
+  pos(1) = screen_size(1) - pos(1) - pos(3);
 
   return pos;
 }
 
 octave_value
 figure::get_default (const caseless_str& name) const
 {
   octave_value retval = default_properties.lookup (name);
@@ -1951,19 +1952,17 @@ axes::properties::update_camera (void)
   scale (x_view, pb(0), pb(1), pb(2));
   translate (x_view, -0.5, -0.5, -0.5);
 
   Matrix x_cube = x_view * unit_cube ();
   ColumnVector cmin = x_cube.row_min (), cmax = x_cube.row_max ();
   double xM = cmax(0)-cmin(0);
   double yM = cmax(1)-cmin(1);
 
-  Matrix bb = get_boundingbox ();
-  Matrix cs = get_backend ().get_canvas_size (__myhandle__);
-  double fh = cs(1);
+  Matrix bb = get_boundingbox (true);
 
   double v_angle;
 
   if (cameraviewanglemode_is ("auto"))
     {
       double af;
 
       // FIXME: Was this really needed? When compared to Matlab, it
@@ -1987,32 +1986,32 @@ axes::properties::update_camera (void)
 
   double pf = 1 / (2 * tan ((v_angle / 2) * M_PI / 180.0) * norm (F));
   scale (x_projection, pf, pf, 1);
 
   if (dowarp)
     {
       xM *= pf;
       yM *= pf;
-      translate (x_viewport, bb(0)+bb(2)/2, fh-(bb(1)+bb(3)/2)+1, 0);
+      translate (x_viewport, bb(0)+bb(2)/2, bb(1)+bb(3)/2, 0);
       scale (x_viewport, bb(2)/xM, -bb(3)/yM, 1);
     }
   else
     {
       double pix = 1;
       if (autocam)
 	{
 	  if ((bb(2)/bb(3)) > (xM/yM))
 	    pix = bb(3);
 	  else
 	    pix = bb(2);
 	}
       else
 	pix = (bb(2) < bb(3) ? bb(2) : bb(3));
-      translate (x_viewport, bb(0)+bb(2)/2, fh-(bb(1)+bb(3)/2)+1, 0);
+      translate (x_viewport, bb(0)+bb(2)/2, bb(1)+bb(3)/2, 0);
       scale (x_viewport, pix, -pix, 1);
     }
 
   x_normrender = x_viewport * x_projection * x_view;
 
   x_cube = x_normrender * unit_cube ();
   cmin = x_cube.row_min ();
   cmax = x_cube.row_max ();
@@ -2080,26 +2079,33 @@ axes::properties::update_aspectratios (v
 	  pba(2) = dz/da(2);
 	}
     }
   
   // FIXME: if plotboxaspectratiomode is "manual", limits
   // and/or dataaspectratio might be adapted
 }
 
+// The INTERNAL flag defines whether position or outerposition is used.
+
 Matrix
-axes::properties::get_boundingbox (void) const
+axes::properties::get_boundingbox (bool internal) const
 {
-  graphics_backend b = get_backend ();
-  Matrix pos;
-  
-  pos = convert_position (get_position ().matrix_value (), get_units (),
-			  "pixels", b.get_canvas_size (__myhandle__), b);
+  graphics_object obj = gh_manager::get_object (get_parent ());
+  Matrix parent_bb = obj.get_properties ().get_boundingbox (true);
+  Matrix pos = (internal ?
+		  get_position ().matrix_value ()
+		  : get_outerposition ().matrix_value ());
+
+
+  pos = convert_position (pos, get_units (), "pixels",
+			  parent_bb.extract_n (0, 2, 1, 2), get_backend ());
   pos(0)--;
   pos(1)--;
+  pos(1) = parent_bb(3) - pos(1) - pos(3);
 
   return pos;
 }
 
 ColumnVector
 graphics_xform::xform_vector (double x, double y, double z)
 { return ::xform_vector (x, y, z); }
 
@@ -2228,20 +2234,20 @@ get_axis_limits (double xmin, double xma
 
   retval(0) = min_val;
   retval(1) = max_val;
 
   return retval;
 }
 
 // magform(x) Returns (a, b), where x = a * 10^b, a >= 1., and b is
-// integral. Used by calc_ticks
+// integral.
 
 void 
-axes::properties::magform (double x, double& a, int &b)
+axes::properties::magform (double x, double& a, int& b)
 {
   if (x == 0)
     {
       a = 0;
       b = 0;
     }
   else
     {
@@ -2258,65 +2264,68 @@ axes::properties::magform (double x, dou
       if (x < 0)
 	a = -a;
     }
 }
 
 // A translation from Tom Holoryd's python code at
 // http://kurage.nimh.nih.gov/tomh/tics.py
 // FIXME -- add log ticks
+
 void 
 axes::properties::calc_ticks (const array_property& lims, array_property& ticks)
 {
-
   int ticint = 5;
 
   if (lims.get ().is_empty ())
     return;
 
   double lo = (lims.get ().matrix_value ()) (0);
   double hi = (lims.get ().matrix_value ()) (1);
 
   // Reference: Lewart, C. R., "Algorithms SCALE1, SCALE2, and
   // SCALE3 for Determination of Scales on Computer Generated
   // Plots", Communications of the ACM, 10 (1973), 639-640.
   // Also cited as ACM Algorithm 463.
 
   double a;
   int b, x;
-  magform ( (hi-lo)/ticint, a, b);
-  if (a < 1.41) // sqrt(2)
+
+  magform ((hi-lo)/ticint, a, b);
+
+  static const double sqrt_2 = sqrt (2.0);
+  static const double sqrt_10 = sqrt (10.0);
+  static const double sqrt_50 = sqrt (50.0);
+
+  if (a < sqrt_2)
     x = 1;
-  else if (a < 3.16) // sqrt(10)
+  else if (a < sqrt_10)
     x = 2;
-  else if (a < 7.07) // sqrt(50)
+  else if (a < sqrt_50)
     x = 5;
   else
     x = 10;
 
-
   double sep = x * std::pow (10., b);
 
   // FIXME x can now be used to set minor ticks
   if (x == 10)
     x = 1;
 
-
   // The following guarantees that if zero is in the range, it will be
   // included as a tic.
 
   int i1 = static_cast<int> (std::floor (lo / sep));
   int i2 = static_cast<int> (std::ceil (hi / sep));
 
   Matrix limits (1, i2-i1+1);
-  for (int i=0; i<i2-i1+1; i++)
+  for (int i = 0; i < i2-i1+1; i++)
     limits (i) = sep*(i+i1);
 
   ticks = limits;
-  
 }
 
 static bool updating_axis_limits = false;
 
 void
 axes::update_axis_limits (const std::string& axis_type)
 {
   if (updating_axis_limits)
@@ -3210,36 +3219,36 @@ Undocumented internal function.\n\
     }
 
   unwind_protect::run_frame ("Fdrawnow");
 
   return retval;
 }
 
 octave_value
-get_property_from_handle (double handle, const std::string &property,
-			  const std::string &func)
+get_property_from_handle (double handle, const std::string& property,
+			  const std::string& func)
 {
   graphics_object obj = gh_manager::get_object (handle);
   octave_value retval;
 
   if (obj)
     {
       caseless_str p = std::string (property);
       retval = obj.get (p);
     }
   else
     error ("%s: invalid handle (= %g)", func.c_str(), handle);
 
   return retval;
 }
 
 bool
-set_property_in_handle (double handle, const std::string &property,
-			const octave_value &arg, const std::string &func)
+set_property_in_handle (double handle, const std::string& property,
+			const octave_value& arg, const std::string& func)
 {
   graphics_object obj = gh_manager::get_object (handle);
   int ret = false;
 
   if (obj)
     {
       caseless_str p = std::string (property);
       obj.set (p, arg);
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1336,16 +1336,19 @@ public:
   {
     octave_idx_type n = children.numel ();
     children.resize (1, n+1);
     children(n) = h.value ();
   }
 
   virtual graphics_backend get_backend (void) const;
 
+  virtual Matrix get_boundingbox (bool internal = false) const
+    { return Matrix (1, 4, 0.0); }
+
   void set_tag (const octave_value& val) { tag = val; }
 
   void set_parent (const octave_value& val);
 
   void set_modified (const octave_value& val) { __modified__ = val; }
 
   void set_busyaction (const octave_value& val)
   {
@@ -2071,17 +2074,17 @@ public:
 		  mark_modified ();
 		}
 	    }
 	  else
 	    error ("__backend__ must be a string");
 	}
     }
 
-    Matrix get_boundingbox (void) const;
+    Matrix get_boundingbox (bool internal = false) const;
 
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES(figure)
       any_property __plot_stream__ h , Matrix ()
       bool_property __enhanced__ h , "on"
       radio_property nextplot , "new|{add}|replace_children|replace"
@@ -2283,17 +2286,17 @@ public:
     void remove_child (const graphics_handle& h);
 
     void delete_children (void);
 
     const scaler& get_x_scaler (void) const { return sx; }
     const scaler& get_y_scaler (void) const { return sy; }
     const scaler& get_z_scaler (void) const { return sz; }
 
-    Matrix get_boundingbox (void) const;
+    Matrix get_boundingbox (bool internal = false) const;
 
     void update_camera (void);
     void update_aspectratios (void);
     void update_transform (void)
       {
 	update_aspectratios ();
 	update_camera ();
       }
