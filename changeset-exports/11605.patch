# HG changeset patch
# User jwe
# Date 1199729046 0
#      Mon Jan 07 18:04:06 2008 +0000
# Branch release-3-0-x
# Node ID fd4eb4f95bb4919b1426f2d15108f014020cf873
# Parent  4c9677b526b15c5feaaa1a1a6fb728dbd80bb6c3
[3-0-0-branch @ 2008-01-07 18:04:06 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2008-01-07  David Bateman  <dbateman@free.fr>
+
+	* Sparse-op-defs.h (SPARSE_ANY_ALL_OP_ROW_CODE): Don't break from
+	loop if this test succeeds.
+
 2008-01-03  David Bateman  <dbateman@free.fr>
 
 	* MSparse.cc (SPARSE_A2A2_OP): If first arg is scalar zero, then
 	need unary operator on remaining argument
 	* Sparse-op-defs.h (SPARSE_SMSM_BIN_OP_1): ditto.
 
 2007-12-21  John W. Eaton  <jwe@octave.org>
 
diff --git a/liboctave/Sparse-op-defs.h b/liboctave/Sparse-op-defs.h
--- a/liboctave/Sparse-op-defs.h
+++ b/liboctave/Sparse-op-defs.h
@@ -1,11 +1,11 @@
 /*
 
-Copyright (C) 2004, 2005, 2006, 2007 David Bateman
+Copyright (C) 2004, 2005, 2006, 2007, 2008 David Bateman
 Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004 Andy Adler
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
@@ -1689,22 +1689,22 @@ along with Octave; see the file COPYING.
   tmp[j] OP data (i)
 
 #define SPARSE_REDUCTION_OP(RET_TYPE, EL_TYPE, OP, INIT_VAL, MT_RESULT)	\
   SPARSE_BASE_REDUCTION_OP (RET_TYPE, EL_TYPE, \
 			SPARSE_REDUCTION_OP_ROW_EXPR (OP), \
 			SPARSE_REDUCTION_OP_COL_EXPR (OP), \
 			INIT_VAL, MT_RESULT)
 
+// Don't break from this loop if the test succeeds because
+// we are looping over the rows and not the columns in the inner
+// loop.
 #define SPARSE_ANY_ALL_OP_ROW_CODE(TEST_OP, TEST_TRUE_VAL) \
   if (data (i) TEST_OP 0.0) \
-    { \
-      tmp[ridx(i)] = TEST_TRUE_VAL; \
-      break; \
-    }
+    tmp[ridx(i)] = TEST_TRUE_VAL; \
 
 #define SPARSE_ANY_ALL_OP_COL_CODE(TEST_OP, TEST_TRUE_VAL) \
   if (data (i) TEST_OP 0.0) \
     { \
       tmp[j] = TEST_TRUE_VAL; \
       break; \
     }
 
