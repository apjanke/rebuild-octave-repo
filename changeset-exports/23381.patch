# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1491832825 -3600
#      Mon Apr 10 15:00:25 2017 +0100
# Node ID e15ffa2b22620215c260c5cbb63690d858a4c55e
# Parent  c319e6d737f266fc1a0bd5e654eb6a58b9448d73
gallery: use broadcasting to generate cauchy and fiedler matrices

diff --git a/scripts/special-matrix/gallery.m b/scripts/special-matrix/gallery.m
--- a/scripts/special-matrix/gallery.m
+++ b/scripts/special-matrix/gallery.m
@@ -550,18 +550,17 @@ function C = cauchy (x, y)
 
   ## Ensure x and y are column vectors
   x = x(:);
   y = y(:);
   if (numel (x) != numel (y))
     error ("gallery: X and Y must be vectors of same length for cauchy matrix.");
   endif
 
-  C = x * ones (1, n) + ones (n, 1) * y.';
-  C = ones (n) ./ C;
+  C = 1 ./ (x .+ y.');
 endfunction
 
 function C = chebspec (n, k = 0)
   ## CHEBSPEC  Chebyshev spectral differentiation matrix.
   ##   C = CHEBSPEC(N, K) is a Chebyshev spectral differentiation
   ##   matrix of order N.  K = 0 (the default) or 1.
   ##   For K = 0 (`no boundary conditions'), C is nilpotent, with
   ##       C^N = 0 and it has the null vector ONES(N,1).
@@ -1092,18 +1091,17 @@ function A = fiedler (c)
     c = 1:n;
   elseif (n > 1 && isvector (c))
     ## do nothing
   else
     error ("gallery: C must be an integer or a vector for fiedler matrix.");
   endif
   c = c(:).';           # Ensure c is a row vector.
 
-  A = ones (n, 1) * c;
-  A = abs (A - A.');    # NB. array transpose.
+  A = abs (c - c.');
 endfunction
 
 function A = forsythe (n, alpha = sqrt (eps), lambda = 0)
   ## FORSYTHE  Forsythe matrix - a perturbed Jordan block.
   ##   FORSYTHE(N, ALPHA, LAMBDA) is the N-by-N matrix equal to
   ##   JORDBLOC(N, LAMBDA) except it has an ALPHA in the (N,1) position.
   ##   It has the characteristic polynomial
   ##           DET(A-t*EYE) = (LAMBDA-t)^N - (-1)^N ALPHA.
@@ -2913,18 +2911,53 @@ endfunction
 %!error <unknown matrix with NAME foobar> gallery ("foobar")
 
 ## BIST testing for individual gallery functions
 %!assert (gallery ("minij", 4), [1 1 1 1; 1 2 2 2; 1 2 3 3; 1 2 3 4])
 %!assert (gallery ("minij", 1), 1)
 %!assert (gallery ("minij", 0), [])
 %!assert (gallery ("minij", -1), [])
 
-%!assert (size (gallery ("cauchy", 5)), [5 5])
-%!assert (size (gallery ("cauchy", 2:5, 5:8)), [4 4])
+%!test
+%! exp = 1 ./ [
+%!   2  3  4  5  6
+%!   3  4  5  6  7
+%!   4  5  6  7  8
+%!   5  6  7  8  9
+%!   6  7  8  9  10];
+%! assert (gallery ("cauchy", 5), exp)
+%! assert (gallery ("cauchy", 1:5), exp)
+%! assert (gallery ("cauchy", 1:5, 1:5), exp)
+%!
+%! exp = 1 ./ [
+%!   1  2  3  4  5
+%!   2  3  4  5  6
+%!   3  4  5  6  7
+%!   4  5  6  7  8
+%!   5  6  7  8  9];
+%! assert (gallery ("cauchy", 0:4, 1:5), exp)
+%! assert (gallery ("cauchy", 1:5, 0:4), exp)
+%! assert (gallery ("cauchy", 1:5, 4:-1:0), fliplr (exp))
+%!
+%! exp = 1 ./ [
+%!  -1  0  1  2  3
+%!   0  1  2  3  4
+%!   1  2  3  4  5
+%!   2  3  4  5  6
+%!   3  4  5  6  7];
+%! assert (gallery ("cauchy", 1:5, -2:2), exp)
+%!
+%! exp = 1 ./ [
+%!    8  18  -4  2
+%!   13  23   1  7
+%!    9  19  -3  3
+%!   15  25   3  9];
+%! assert (gallery ("cauchy", [-2 3 -1 5], [10 20 -2 4]), exp)
+%! assert (gallery ("cauchy", [-2 3 -1 5], [10 20 -2 4]'), exp)
+%! assert (gallery ("cauchy", [-2 3 -1 5]', [10 20 -2 4]), exp)
 
 %!assert (size (gallery ("chebspec", 5)), [5 5])
 %!assert (size (gallery ("chebspec", 5, 1)), [5 5])
 %!assert (size (gallery ("chebspec", 5, 0)), [5 5])
 
 %!assert (size (gallery ("chebvand", 7)), [7 7])
 %!assert (size (gallery ("chebvand", 1:7)), [7 7])
 %!assert (size (gallery ("chebvand", 5, 7)), [5 7])
@@ -2954,18 +2987,27 @@ endfunction
 %!assert (size (gallery ("cycol", 4, 1)), [4 4])
 
 %!assert (size (gallery ("dorr", 4)), [4 4])
 %!assert (cellfun (@rows, nthargout (1:3, @gallery, "dorr", 4)), [3 4 3])
 
 %!assert (size (gallery ("dramadah", 5)), [5 5])
 %!assert (size (gallery ("dramadah", 5, 2)), [5 5])
 
-%!assert (size (gallery ("fiedler", 5)), [5 5])
-%!assert (size (gallery ("fiedler", 2:5)), [4 4])
+%!test
+%! exp = [
+%!   0   1   2   3   4
+%!   1   0   1   2   3
+%!   2   1   0   1   2
+%!   3   2   1   0   1
+%!   4   3   2   1   0];
+%! assert (gallery ("fiedler", 5), exp)
+%! assert (gallery ("fiedler", 1:5), exp)
+%! assert (gallery ("fiedler", -2:2), exp)
+%! assert (gallery ("fiedler", 2:4), exp(1:4,1:4))
 
 %!assert (size (gallery ("forsythe", 5)), [5 5])
 %!assert (size (gallery ("forsythe", 5, 1, 0.5)), [5 5])
 %!assert (size (gallery ("forsythe", 5, 4, 7)), [5 5])
 
 %!assert (size (gallery ("frank", 5)), [5 5])
 %!assert (size (gallery ("frank", 5, 1)), [5 5])
 
