# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1421354214 18000
#      Thu Jan 15 15:36:54 2015 -0500
# Node ID 6464cd19e0f4083cef9ed4980217f7981d2b9b63
# Parent  27c5f42a7a64117a589b8172054c9d43b5c9d40e
* audiodevinfo.cc: Style fixes.  Warning IDs.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -853,19 +853,20 @@ audioplayer::audioplayer (void)
   : octave_callback_function (0),
     id (-1), fs (0), nbits (16), channels (0), sample_number (0),
     end_sample (-1), tag (""), y (), userdata (Matrix ()),
     left (), right (), stream (0), output_parameters (), type ()
 { }
 
 audioplayer::~audioplayer (void)
 {
-  if (isplaying())
+  if (isplaying ())
     {
-      warning ("audioplayer::~audioplayer: Interrupting playing audioplayer");
+      warning ("Octave:audio-interrupt",
+               "interrupting playing audioplayer");
       stop ();
     }
 }
 
 void
 audioplayer::print (std::ostream& os, bool pr_as_read_syntax) const
 {
   print_raw (os, pr_as_read_syntax);
@@ -1158,24 +1159,24 @@ audioplayer::playblocking (void)
         portaudio_play_callback (0, buffer, BUFFER_SIZE, 0, 0, this);
 
       err = Pa_WriteStream (stream, buffer, BUFFER_SIZE);
     }
 
   err = Pa_StopStream (stream);
   if (err != paNoError)
     {
-      error ("audioplayer: Error stoping audio playback stream");
+      error ("audioplayer: failed to stop audio playback stream");
       return;
     }
 
   err = Pa_CloseStream (stream);
   if (err != paNoError)
     {
-      error ("audioplayer: Error closing audio playback stream");
+      error ("audioplayer: failed to close audio playback stream");
       return;
     }
 
   stream = 0;
   set_sample_number (0);
   reset_end_sample ();
 }
 
@@ -1192,54 +1193,54 @@ audioplayer::play (void)
                          octave_play_callback, this);
   else
     err = Pa_OpenStream (&stream, 0, &(output_parameters),
                          get_fs (), BUFFER_SIZE, paClipOff,
                          portaudio_play_callback, this);
 
   if (err != paNoError)
     {
-      error ("audioplayer: Error opening audio playback stream");
+      error ("audioplayer: failed to open audio playback stream");
       return;
     }
 
   err = Pa_StartStream (stream);
   if (err != paNoError)
     {
-      error ("audioplayer: Error starting audio playback stream");
+      error ("audioplayer: failed to start audio playback stream");
       return;
     }
 }
 
 void
 audioplayer::pause (void)
 {
   if (get_stream () == 0)
     return;
 
   PaError err;
   err = Pa_StopStream (stream);
   if (err != paNoError)
     {
-      error ("audiorecorder: Error stoping audio recording stream");
+      error ("audiorecorder: failed to stop audio recording stream");
       return;
     }
 }
 
 void
 audioplayer::resume (void)
 {
   if (get_stream () == 0)
     return;
 
   PaError err;
   err = Pa_StartStream (stream);
   if (err != paNoError)
     {
-      error ("audiorecorder: Error starting audio recording stream");
+      error ("audiorecorder: failed to start audio recording stream");
       return;
     }
 }
 
 PaStream *
 audioplayer::get_stream (void)
 {
   return stream;
@@ -1254,42 +1255,42 @@ audioplayer::stop (void)
   PaError err;
   set_sample_number (0);
   reset_end_sample ();
   if (not Pa_IsStreamStopped (get_stream ()))
     {
       err = Pa_AbortStream (get_stream ());
       if (err != paNoError)
         {
-          error ("audioplayer: Error stopping audio playback stream");
+          error ("audioplayer: failed to stop audio playback stream");
           return;
         }
     }
 
   err = Pa_CloseStream (get_stream ());
   if (err != paNoError)
     {
-      error ("audioplayer: Error closing audio playback stream");
+      error ("audioplayer: failed to close audio playback stream");
       return;
     }
 
   stream = 0;
 }
 
 bool
 audioplayer::isplaying (void)
 {
   if (get_stream () == 0)
     return false;
 
   PaError err;
   err = Pa_IsStreamActive (stream);
   if (err != 0 && err != 1)
     {
-      error ("audiorecorder: Error checking stream activity status");
+      error ("audiorecorder: checking stream activity status failed");
       return false;
     }
 
   return (err == 1);
 }
 
 class audiorecorder : public octave_base_value
 {
@@ -1391,33 +1392,33 @@ octave_record_callback (const void *inpu
 
       const int8_t *input8 = static_cast<const int8_t *> (input);
 
       for (unsigned long i = 0; i < frames; i++)
         {
           float sample_l = input8[i*channels] / scale_factor;
           float sample_r = input8[i*channels + (channels - 1)] / scale_factor;
 
-          sound(i, 0) = sample_l;
-          sound(i, 1) = sample_r;
+          sound(i,0) = sample_l;
+          sound(i,1) = sample_r;
         }
     }
   else if (recorder->get_nbits () == 16)
     {
       static double scale_factor = std::pow (2.0, 15) - 1.0;
 
       const int16_t *input16 = static_cast<const int16_t *> (input);
 
       for (unsigned long i = 0; i < frames; i++)
         {
           float sample_l = input16[i*channels] / scale_factor;
           float sample_r = input16[i*channels + (channels - 1)] / scale_factor;
 
-          sound(i, 0) = sample_l;
-          sound(i, 1) = sample_r;
+          sound(i,0) = sample_l;
+          sound(i,1) = sample_r;
         }
     }
   else if (recorder->get_nbits () == 24)
     {
       static double scale_factor = std::pow (2.0, 23);
 
       // FIXME: Is there a better way?
       const uint8_t *input24 = static_cast<const uint8_t *> (input);
@@ -1436,18 +1437,18 @@ octave_record_callback (const void *inpu
             }
 
           if (sample_l32 & 0x00800000)
             sample_l32 |= 0xff000000;
 
           if (sample_r32 & 0x00800000)
             sample_r32 |= 0xff000000;
 
-          sound(i, 0) = sample_l32 / scale_factor;
-          sound(i, 1) = sample_r32 / scale_factor;
+          sound(i,0) = sample_l32 / scale_factor;
+          sound(i,1) = sample_r32 / scale_factor;
         }
     }
 
   octave_value_list retval
     = feval (recorder->octave_callback_function, ovl (sound), 1);
 
   return retval(0).int_value ();
 }
@@ -1538,17 +1539,18 @@ audiorecorder::audiorecorder (void)
     end_sample (-1), tag (""), y (), userdata (Matrix ()),
     left (), right (), stream (0), input_parameters (), type ()
 { }
 
 audiorecorder::~audiorecorder (void)
 {
   if (isrecording ())
     {
-      warning ("audiorecorder::~audiorecorder: Interrupting recording audiorecorder");
+      warning ("Octave:audio-interrupt",
+               "interrupting recording audiorecorder");
       stop ();
     }
 }
 
 void
 audiorecorder::print (std::ostream& os, bool pr_as_read_syntax) const
 {
   print_raw (os, pr_as_read_syntax);
@@ -1714,18 +1716,18 @@ audiorecorder::get_userdata (void)
 
 octave_value
 audiorecorder::getaudiodata (void)
 {
   Matrix audio (2, left.size ());
 
   for (unsigned int i = 0; i < left.size (); i++)
     {
-      audio(0, i) = left[i];
-      audio(1, i) = right[i];
+      audio(0,i) = left[i];
+      audio(1,i) = right[i];
     }
 
   return audio;
 }
 
 audioplayer *
 audiorecorder::getplayer (void)
 {
@@ -1744,17 +1746,17 @@ audiorecorder::isrecording (void)
 {
   if (get_stream () == 0)
     return false;
 
   PaError err;
   err = Pa_IsStreamActive (stream);
   if (err != 0 && err != 1)
     {
-      error ("audiorecorder: unable to check stream activity status");
+      error ("audiorecorder: checking stream activity status failed");
       return false;
     }
 
   return (err == 1);
 }
 
 void
 audiorecorder::record (void)
