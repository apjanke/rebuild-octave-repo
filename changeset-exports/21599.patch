# HG changeset patch
# User Rik <rik@octave.org>
# Date 1460306952 25200
#      Sun Apr 10 09:49:12 2016 -0700
# Node ID f29d68e24c5a9a10b6dbfcc1dcab6412bd7e4787
# Parent  cf552443c10455ede48e90c9a65ef99af6167577
ode23.m, ode45.m: More reformatting of demos to Octave coding standards.

* ode23.m, ode45.m: More reformatting of demos to Octave coding standards.

diff --git a/scripts/ode/ode23.m b/scripts/ode/ode23.m
--- a/scripts/ode/ode23.m
+++ b/scripts/ode/ode23.m
@@ -399,16 +399,43 @@ function varargout = ode23 (fun, trange,
       varargout{4} = solution.event{4};  # Results when an event occurred
       varargout{5} = solution.event{2};  # Index info which event occurred
     endif
   endif
 
 endfunction
 
 
+%!demo
+%!
+%! ## Demonstrate convergence order for ode23
+%! tol = 1e-5 ./ 10.^[0:8];
+%! for i = 1 : numel (tol)
+%!   opt = odeset ("RelTol", tol(i), "AbsTol", realmin);
+%!   [t, y] = ode23 (@(t, y) -y, [0, 1], 1, opt);
+%!   h(i) = 1 / (numel (t) - 1);
+%!   err(i) = norm (y .* exp (t) - 1, Inf);
+%! endfor
+%!
+%! ## Estimate order numerically
+%! p = diff (log (err)) ./ diff (log (h))
+%!
+%! ## Estimate order visually
+%! figure ();
+%! loglog (h, tol, "-ob",
+%!         h, err, "-b",
+%!         h, (h/h(end)) .^ 2 .* tol(end), "k--",
+%!         h, (h/h(end)) .^ 3 .* tol(end), "k-");
+%! axis tight
+%! xlabel ("h");
+%! ylabel ("err(h)");
+%! title ("Convergence plot for ode23");
+%! legend ("imposed tolerance", "ode23 (relative) error",
+%!         "order 2", "order 3", "location", "northwest");
+
 ## We are using the "Van der Pol" implementation for all tests that are done
 ## for this function.
 ## For further tests we also define a reference solution (computed at high
 ## accuracy)
 %!function ydot = fpol (t, y)  # The Van der Pol
 %! ydot = [y(2); (1 - y(1)^2) * y(2) - y(1)];
 %!endfunction
 %!function ref = fref ()       # The computed reference sol
@@ -585,33 +612,8 @@ endfunction
 %!error <INIT must be a .* vector>
 %!  ode23 (@fpol, [0 25], [3 15 1; 3 15 1]);
 %!error <FUN must be a valid function handle>
 %!  ode23 (1, [0 25], [3 15 1]);
 %!error  # strange ODEOPT structure
 %!  opt = struct ("foo", 1);
 %!  [t, y] = ode23 (@fpol, [0 2], [2 0], opt);
 
-%!demo
-%!
-%! # Demonstrate convergence order for ode23
-%! tol = 1e-5 ./ 10.^[0:8];
-%! for ii = 1 : numel (tol)
-%!   opt = odeset ("RelTol", tol(ii), "AbsTol", realmin);
-%!   [t, y] = ode23 (@(t, y) -y, [0, 1], 1, opt);
-%!   h(ii) = 1 / (numel (t) - 1);
-%!   err(ii) = norm (y .* exp (t) - 1, inf);
-%! endfor
-%!
-%! # Estimate order numerically
-%! p = diff (log (err)) ./ diff (log (h))
-%!
-%! %! # Estimate order visually
-%! figure;
-%! loglog (h, tol, '-ob', h, err,
-%!         h, (h/h(end)) .^ 2 .* tol(end), "k--",
-%!         h, (h/h(end)) .^ 3 .* tol(end), "k-")
-%! axis tight
-%! xlabel ("h");
-%! ylabel ("err(h)");
-%! title ("Convergence plot for ode23");
-%! legend ("imposed tolerance", "ode23 (relative) error",
-%!         "order 2", "order 3");
diff --git a/scripts/ode/ode45.m b/scripts/ode/ode45.m
--- a/scripts/ode/ode45.m
+++ b/scripts/ode/ode45.m
@@ -384,16 +384,43 @@ function varargout = ode45 (fun, trange,
       varargout{4} = solution.event{4};  # Results when an event occurred
       varargout{5} = solution.event{2};  # Index info which event occurred
     endif
   endif
 
 endfunction
 
 
+%!demo
+%!
+%! ## Demonstrate convergence order for ode45
+%! tol = 1e-5 ./ 10.^[0:8];
+%! for i = 1 : numel (tol)
+%!   opt = odeset ("RelTol", tol(i), "AbsTol", realmin);
+%!   [t, y] = ode45 (@(t, y) -y, [0, 1], 1, opt);
+%!   h(i) = 1 / (numel (t) - 1);
+%!   err(i) = norm (y .* exp (t) - 1, Inf);
+%! endfor
+%!
+%! ## Estimate order numerically
+%! p = diff (log (err)) ./ diff (log (h))
+%!
+%! ## Estimate order visually
+%! figure ();
+%! loglog (h, tol, "-ob",
+%!         h, err, "-b"
+%!         h, (h/h(end)) .^ 4 .* tol(end), "k--",
+%!         h, (h/h(end)) .^ 5 .* tol(end), "k-") 
+%! axis tight
+%! xlabel ("h");
+%! ylabel ("err(h)");
+%! title ("Convergence plot for ode45");
+%! legend ("imposed tolerance", "ode45 (relative) error",
+%!         "order 4", "order 5", "location", "northwest");
+
 ## We are using the "Van der Pol" implementation for all tests that are done
 ## for this function.
 ## For further tests we also define a reference solution (computed at high
 ## accuracy)
 %!function ydot = fpol (t, y)  # The Van der Pol
 %! ydot = [y(2); (1 - y(1)^2) * y(2) - y(1)];
 %!endfunction
 %!function ref = fref ()       # The computed reference solution
@@ -582,34 +609,8 @@ endfunction
 %!error <INIT must be a .* vector>
 %!  ode45 (@fpol, [0 25], [3 15 1; 3 15 1]);
 %!error <FUN must be a valid function handle>
 %!  ode45 (1, [0 25], [3 15 1]);
 %!error  # strange ODEOPT structure
 %! opt = struct ("foo", 1);
 %! [t, y] = ode45 (@fpol, [0 2], [2 0], opt);
 
-
-%!demo
-%!
-%! # Demonstrate convergence order for ode45
-%! tol = 1e-5 ./ 10.^[0:8];
-%! for ii = 1 : numel (tol)
-%!   opt = odeset ("RelTol", tol(ii), "AbsTol", realmin);
-%!   [t, y] = ode45 (@(t, y) -y, [0, 1], 1, opt);
-%!   h(ii) = 1 / (numel (t) - 1);
-%!   err(ii) = norm (y .* exp (t) - 1, inf);
-%! endfor
-%!
-%! # Estimate order numerically
-%! p = diff (log (err)) ./ diff (log (h))
-%!
-%! %! # Estimate order visually
-%! figure;
-%! loglog (h, tol, '-ob', h, err,
-%!         h, (h/h(end)) .^ 4 .* tol(end), "k--",
-%!         h, (h/h(end)) .^ 5 .* tol(end), "k-")
-%! axis tight
-%! xlabel ("h");
-%! ylabel ("err(h)");
-%! title ("Convergence plot for ode45");
-%! legend ("imposed tolerance", "ode45 (relative) error",
-%!         "order 4", "order 5");
