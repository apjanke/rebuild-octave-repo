# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1405550335 14400
#      Wed Jul 16 18:38:55 2014 -0400
# Node ID cc8aaf9c9e331261533b4ae6845bdac45a517de4
# Parent  87324260043d908668824326bc97eb9598931630
exist: don't search path for absolute or rooted relative file names

* load-path.cc (load_path::do_find_file): If file name is absolute or
rooted relative simply check for existence of file.
* variables.cc: New tests.

diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -1295,18 +1295,17 @@ load_path::do_find_file (const std::stri
 {
   std::string retval;
 
   if (octave_env::absolute_pathname (file)
       || octave_env::rooted_relative_pathname (file))
     {
       file_stat fs (file);
 
-      if (fs.exists ())
-        return file;
+      return fs.exists () ? file : retval;
     }
   else
     {
       std::string tfile = find_private_file (file);
 
       if (! tfile.empty ())
         return tfile;
     }
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -658,16 +658,26 @@ not on the search path you should use so
 %!assert (exist (dirtmp, "file"), 7)
 
 %!error exist ()
 %!error exist (1,2,3)
 %!warning <"class" type argument is not implemented> exist ("a", "class");
 %!error <TYPE must be a string> exist ("a", 1)
 %!error <NAME must be a string> exist (1)
 
+%!test
+%! flist = dir ();
+%! fname = flist(3).name;  ## skip . and ..
+%! assert (exist (fullfile (pwd (), fname), "file"), 2)
+%! assert (exist (fullfile (pwd (), "nonexistentfile"), "file"), 0)
+
+%!assert (exist ("plot.m", "file"), 2);
+%!assert (exist ("./plot.m", "file"), 0);
+%!assert (exist ("./nonexistentfile", "file"), 0);
+%!assert (exist ("nonexistentfile", "file"), 0);
 */
 
 octave_value
 lookup_function_handle (const std::string& nm)
 {
   octave_value val = symbol_table::varval (nm);
 
   return val.is_function_handle () ? val : octave_value ();
