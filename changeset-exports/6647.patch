# HG changeset patch
# User jwe
# Date 1179802736 0
#      Tue May 22 02:58:56 2007 +0000
# Node ID 415b8b0106d0c0fb7b42a33c551e9e2201185b74
# Parent  bd0a70c3f2dbf95d3c7385e6180baf46f7824d2a
[project @ 2007-05-22 02:57:21 by jwe]

diff --git a/doc/interpreter/debug.txi b/doc/interpreter/debug.txi
--- a/doc/interpreter/debug.txi
+++ b/doc/interpreter/debug.txi
@@ -21,17 +21,17 @@ write
 
 @example
 debug> for i = 1:n, foo(i); endfor
 @end example
 
 @noindent
 in debug mode. However, writing the above in three lines will not be
 correctly evaluated. To leave the debug mode, you should simply type
-either @code{quit} or @code{exit}.
+either @code{quit}, @code{exit}, @code{return} or @code{dbcont}.
 
 @menu
 * Entering Debug Mode::
 * Breakpoints::
 * Debug Mode::
 @end menu
 
 @node Entering Debug Mode
@@ -111,8 +111,18 @@ automatically sets the running script in
 There are two additional support functions that allow the user to
 interrogate where in the execution of a script Octave entered the debug
 mode and to print the code in the script surrounding the point where
 Octave entered debug mode.
 
 @DOCSTRING(dbwhere)
 
 @DOCSTRING(dbtype)
+
+Within debug mode it is equally allows single line stepping through a
+function.  To allow this two additional commands are available;
+@code{dbstep} and @code{dbnext}.  These differ slightly in the way
+they treat the next executable line if the next line itself is a
+function defined in an m-file.
+
+@code{dbnext} will execute the next line, while staying in the existing
+function being debugged. Whereas @code{dbstep} will step in to this new
+function defined in an m-file.
