# HG changeset patch
# User jwe
# Date 1164765600 0
#      Wed Nov 29 02:00:00 2006 +0000
# Node ID 2a8922007c122e7b037c34c9f0fda16fc2cceedb
# Parent  237a7f535bbc0fbdda882ae18da4bd8e2f6237cc
[project @ 2006-11-29 01:59:59 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,9 +1,14 @@
-2006-10-03  David Bateman  <dbateman@free.fr>
+2006-11-28  John W. Eaton  <jwe@octave.org>
+
+	* mkoctfile.in: Construct default output file from basename of
+	input file name.
+
+2006-11-28  David Bateman  <dbateman@free.fr>
 
 	* configure.in: Check for sparse header files in the sparsesuite
 	sub-directory. In the cholmod tests, include the camd libraries, as
 	this might be a dependency for cholmod.
 
 2006-11-15  John W. Eaton  <jwe@octave.org>
 
 	* run-octave.in: Don't forget LD_PRELOAD if there are args.
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,15 +1,13 @@
-2006-11-22  David Bateman  <dbateman@free.fr>
+2006-11-28  David Bateman  <dbateman@free.fr>
 
 	* oct-sparse.h: Allow sparse headers to also be in a sparsesuite
 	sub-directory.
 
-2006-11-22  David Bateman  <dbateman@free.fr>
-
         * dSparse.cc (SparseMatrix SparseMatrix::inverse(...)): Transpose
 	the matrix type as well when calling tinverse for lower
 	triangular
 	matrices
         * CSparse.cc (SparseComplexMatrix SparseComplexMatrix::inverse(...)):
         ditto.
 					
 2006-11-21  John W. Eaton  <jwe@octave.org>
diff --git a/mkoctfile.in b/mkoctfile.in
--- a/mkoctfile.in
+++ b/mkoctfile.in
@@ -286,16 +286,17 @@ done
 if $link_stand_alone; then
   if [ -n "$outputfile" ]; then
     output_option="-o $outputfile"
   fi
 else
   if [ -n "$outputfile" ]; then
     octfile="$outputfile"
   else
+    octfile=`basename $octfile`
     octfile=`echo $octfile | $SED 's,\.[^.]*$,,'`$output_ext
   fi
 fi
 
 # Generate dependency files for C and C++ files.
 
 if $depend; then
   if [ -n "$cfiles" ]; then
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,28 @@
+2006-11-28  John W. Eaton  <jwe@octave.org>
+
+	* mex.cc (mxArray_struct::get_field_by_number):
+	Return 0 if key_num is out of range.
+	(mxArray_struct::set_field_by_number):
+	Do nothing if key_num is out of range.
+	(mxArray_cell::get_cell, mxArray_cell::set_cell):
+	Avoid out-of-bounds indexing
+
+2006-11-28  Luis F. Ortiz  <lortiz@interactivesupercomputing.com>
+
+	* mex.cc (mxArray_matlab::get_n, mxArray_octave_value::get_n):
+	Return product of last N-1 dims.
+
+2006-11-28  John W. Eaton  <jwe@octave.org>
+
+	* lex.l (eat_whitespace): Also handle CRLF as EOL.
+
+	* dirfns.cc (Fmkdir): Handle "mkdir (parent, dir)".
+
 2006-11-21  John W. Eaton  <jwe@octave.org>
 
 	* load-path.cc (load_path::do_find_file,
 	load_path::do_find_first_of, load_path::do_find_all_first_of): 
 	Call rooted_pathname instead of absolute_pathname.
 	* utils.cc (fcn_file_in_path, oct_file_in_path, mex_file_in_path):
 	Likewise.
 
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -199,52 +199,74 @@ system-dependent error message.\n\
 }
 
 // FIXME -- should maybe also allow second arg to specify
 // mode?  OTOH, that might cause trouble with compatibility later...
 
 DEFCMD (mkdir, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{status}, @var{msg}, @var{msgid}] =} mkdir (@var{dir})\n\
+@deftypefn {Built-in Function} {[@var{status}, @var{msg}, @var{msgid}] =} mkdir (@var{parent}, @var{dir})\n\
 Create a directory named @var{dir}.\n\
 \n\
 If successful, @var{status} is 1, with @var{msg} and @var{msgid} empty\n\
 character strings.  Otherwise, @var{status} is 0, @var{msg} contains a\n\
 system-dependent error message, and @var{msgid} contains a unique\n\
 message identifier.\n\
 @seealso{rmdir}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   retval(2) = std::string ();
   retval(1) = std::string ();
   retval(0) = false;
 
-  if (args.length () == 1)
+  int nargin = args.length ();
+
+  std::string dirname;
+
+  if (nargin == 2)
     {
-      std::string dirname = args(0).string_value ();
+      std::string parent = args(0).string_value ();
+      std::string dir = args(1).string_value ();
 
       if (error_state)
-	gripe_wrong_type_arg ("mkdir", args(0));
-      else
 	{
-	  std::string msg;
+	  gripe_wrong_type_arg ("mkdir", args(0));
+	  return retval;
+	}
+      else
+	dirname = parent + file_ops::dir_sep_char + dir;
+    }
+  else
+    {
+      dirname = args(0).string_value ();
 
-	  int status = file_ops::mkdir (file_ops::tilde_expand (dirname),
+      if (error_state)
+	{
+	  gripe_wrong_type_arg ("mkdir", args(0));
+	  return retval;
+	}
+    }
+
+  if (nargin == 1 || nargin == 2)
+    {
+      std::string msg;
+
+      int status = file_ops::mkdir (file_ops::tilde_expand (dirname),
 					0777, msg);
 
-	  if (status < 0)
-	    {
-	      retval(2) = "mkdir";
-	      retval(1) = msg;
-	    }
-	  else
-	    retval(0) = true;
+      if (status < 0)
+	{
+	  retval(2) = "mkdir";
+	  retval(1) = msg;
 	}
+      else
+	retval(0) = true;
     }
   else
     print_usage ();
 
   return retval;
 }
 
 DEFCMD (rmdir, args, ,
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1671,16 +1671,38 @@ eat_whitespace (void)
 	  else
 	    {
 	      if (have_continuation ())
 		break;
 	      else
 		goto done;
 	    }
 
+	case '\r':
+	  if (in_comment)
+	    comment_buf += static_cast<char> (c);
+	  c = yyinput ();
+	  if (c == EOF)
+	    break;
+	  else if (c == '\n')
+	    {
+	      retval |= ATE_NEWLINE;
+	      if (in_comment)
+		{
+		  comment_buf += static_cast<char> (c);
+		  octave_comment_buffer::append (comment_buf);
+		  in_comment = false;
+		  beginning_of_comment = false;
+		}
+	      current_input_column = 0;
+	      break;
+	    }
+
+	  // Fall through...
+
 	default:
 	  if (in_comment)
 	    {
 	      comment_buf += static_cast<char> (c);
 	      beginning_of_comment = false;
 	      break;
 	    }
 	  else
diff --git a/src/mex.cc b/src/mex.cc
--- a/src/mex.cc
+++ b/src/mex.cc
@@ -315,17 +315,28 @@ public:
 
   int is_logical_scalar_true (void) const
   {
     return (is_logical_scalar () && val.is_true ());
   }
 
   int get_m (void) const { return val.rows (); }
 
-  int get_n (void) const { return val.columns (); }
+  int get_n (void) const 
+  {
+    int n = 1;
+
+    // Force dims and ndims to be cached.
+    get_dimensions();
+
+    for (int i = ndims - 1; i > 0; i--)
+      n *= dims[i];
+
+    return n;
+  }
 
   int *get_dimensions (void) const
   {
     if (! dims)
       {
 	// Force ndims to be cached.
 	get_number_of_dimensions ();
 
@@ -776,17 +787,25 @@ public:
   int is_logical_scalar_true (void) const
   {
     return (is_logical_scalar ()
 	    && static_cast<mxLogical *> (get_data ())[0] != 0);
   }
 
   int get_m (void) const { return dims[0]; }
 
-  int get_n (void) const { return dims[1]; }
+  int get_n (void) const
+  {
+    int n = 1;
+
+    for (int i = ndims - 1 ; i > 0 ; i--)
+      n *= dims[i];
+
+    return n;
+  }
 
   int *get_dimensions (void) const { return dims; }
 
   int get_number_of_dimensions (void) const { return ndims; }
 
   void set_m (int m) { dims[0] = m; }
 
   void set_n (int n) { dims[1] = n; }
@@ -1636,19 +1655,18 @@ public:
 
 	fields = new_fields;
 	data = new_data;
       }
   }
 
   mxArray *get_field_by_number (int index, int key_num) const
   {
-    int idx = nfields * index + key_num;
-
-    return data[idx];
+    return key_num >= 0 && key_num < nfields
+      ? : data[nfields * index + key_num] : 0;
   }
 
   void set_field_by_number (int index, int key_num, mxArray *val);
 
   int get_number_of_fields (void) const { return nfields; }
 
   const char *get_field_name_by_number (int key_num) const
   {
@@ -1751,17 +1769,20 @@ public:
     int nel = get_number_of_elements ();
 
     for  (int i = 0; i < nel; i++)
       delete data[i];
 
     mxFree (data);
   }
 
-  mxArray *get_cell (int idx) const { return data[idx]; }
+  mxArray *get_cell (int idx) const
+  {
+    return idx >= 0 && idx < get_number_of_elements () ? data[idx] : 0;
+  }
 
   void set_cell (int idx, mxArray *val);
 
   void *get_data (void) const { return data; }
 
   void set_data (void *data_arg) { data = static_cast<mxArray **> (data_arg); }
 
 protected:
@@ -2205,25 +2226,25 @@ maybe_unmark_array (mxArray *ptr)
     mex_context->unmark_array (ptr);
 
   return ptr;
 }
 
 void
 mxArray_struct::set_field_by_number (int index, int key_num, mxArray *val)
 {
-  int idx = nfields * index + key_num;
-
-  data[idx] = maybe_unmark_array (val);
+  if (key_num >= 0 && key_num < nfields)
+    data[nfields * index + key_num] = maybe_unmark_array (val);
 }
 
 void
 mxArray_cell::set_cell (int idx, mxArray *val)
 {
-  data[idx] = maybe_unmark_array (val);
+  if (idx >= 0 && idx < get_number_of_elements ())
+    data[idx] = maybe_unmark_array (val);
 }
 
 // ------------------------------------------------------------------
 
 // C interface to mxArray objects:
 
 // Floating point predicates.
 
