# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1512511764 18000
#      Tue Dec 05 17:09:24 2017 -0500
# Node ID 3fc24b792a244f43b6614b9c5f084bcadf2e4e79
# Parent  8bcfddad15ecc016ca63ea7b1e22f8bfa4eb8ae0
avoid including symtab.h, symscope.h, or symrec.h unnecessarily

* main-window.cc, workspace-view.cc, call-stack.cc, call-stack.h,
defun-int.h, input.cc, load-save.h, symscope.h, symtab.h, variables.h,
ov-fcn-inline.h, ov-fcn.h, ov-usr-fcn.cc, ov-usr-fcn.h, lex.h,
oct-lvalue.h, parse.h, pt-arg-list.h, pt-array-list.h, pt-assign.h,
pt-binop.h, pt-cbinop.h, pt-cell.h, pt-cmd.h, pt-colon.h, pt-const.h,
pt-decl.h, pt-eval.h, pt-except.h, pt-exp.h, pt-fcn-handle.h,
pt-idx.h, pt-jit.h, pt-jump.h, pt-loop.h, pt-mat.h, pt-misc.h,
pt-select.h, pt-stmt.h, pt-unop.h, token.cc, token.h:

Where possible, use forward declarations for symbol_table,
symbol_scope, and symbol_record.  Don't include symtab.h, symscope.h,
or symrec.h unless needed.  Use symbol_record::context_id instead of
symbol_table::context_id or symbol_scope::context_id.  Delete typedefs
for symbol_table::context_id and symbol_scope::context_id.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -63,17 +63,17 @@ along with Octave; see the file COPYING.
 #include "defaults.h"
 #if defined (HAVE_QT_GRAPHICS)
 #  include "__init_qt__.h"
 #endif
 #include "interpreter-private.h"
 #include "interpreter.h"
 #include "oct-map.h"
 #include "octave.h"
-#include "symtab.h"
+#include "symscope.h"
 #include "utils.h"
 #include "version.h"
 
 static file_editor_interface *
 create_default_editor (QWidget *p)
 {
 #if defined (HAVE_QSCINTILLA)
   return new file_editor (p);
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -38,17 +38,17 @@ along with Octave; see the file COPYING.
 #include <QLabel>
 #include <QCompleter>
 #include <QSignalMapper>
 
 #include "workspace-view.h"
 #include "resource-manager.h"
 
 #include "interpreter-private.h"
-#include "symtab.h"
+#include "symscope.h"
 
 workspace_view::workspace_view (QWidget *p)
   : octave_dock_widget (p), m_view (new QTableView (this))
 {
   setObjectName ("WorkspaceView");
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
   set_title (tr ("Workspace"));
   setStatusTip (tr ("View the variables in the active workspace."));
diff --git a/libinterp/corefcn/call-stack.cc b/libinterp/corefcn/call-stack.cc
--- a/libinterp/corefcn/call-stack.cc
+++ b/libinterp/corefcn/call-stack.cc
@@ -356,17 +356,17 @@ namespace octave
   {
     symbol_table& symtab = m_interpreter.get_symbol_table ();
 
     push (fcn, symtab.current_scope (), symtab.current_context ());
   }
 
   void
   call_stack::push (octave_function *fcn, const symbol_scope& scope,
-                    symbol_table::context_id context)
+                    symbol_record::context_id context)
   {
     size_t prev_frame = curr_frame;
     curr_frame = cs.size ();
     cs.push_back (stack_frame (fcn, scope, context, prev_frame));
 
     symbol_table& symtab = m_interpreter.get_symbol_table ();
 
     symtab.set_scope_and_context (scope, context);
diff --git a/libinterp/corefcn/call-stack.h b/libinterp/corefcn/call-stack.h
--- a/libinterp/corefcn/call-stack.h
+++ b/libinterp/corefcn/call-stack.h
@@ -28,17 +28,17 @@ along with Octave; see the file COPYING.
 #include <deque>
 #include <string>
 
 class octave_function;
 class octave_map;
 class octave_user_code;
 class octave_user_script;
 
-#include "symtab.h"
+#include "symscope.h"
 
 namespace octave
 {
   class interpreter;
 
   class
   OCTINTERP_API
   call_stack
@@ -48,17 +48,17 @@ namespace octave
     class stack_frame
     {
     public:
 
       friend class call_stack;
 
       stack_frame (octave_function *fcn = nullptr,
                    const symbol_scope& scope = symbol_scope (),
-                   symbol_table::context_id context = 0, size_t prev = 0)
+                   symbol_record::context_id context = 0, size_t prev = 0)
         : m_fcn (fcn), m_line (-1), m_column (-1), m_scope (scope),
           m_context (context), m_prev (prev)
       { }
 
       stack_frame (const stack_frame& elt)
         : m_fcn (elt.m_fcn), m_line (elt.m_line), m_column (elt.m_column),
           m_scope (elt.m_scope), m_context (elt.m_context), m_prev (elt.m_prev)
       { }
@@ -74,17 +74,17 @@ namespace octave
       bool operator == (const stack_frame& rhs) const;
 
     private:
 
       octave_function *m_fcn;
       int m_line;
       int m_column;
       symbol_scope m_scope;
-      symbol_table::context_id m_context;
+      symbol_record::context_id m_context;
       size_t m_prev;
     };
 
     typedef std::deque<stack_frame>::iterator iterator;
     typedef std::deque<stack_frame>::const_iterator const_iterator;
 
     typedef std::deque<stack_frame>::reverse_iterator reverse_iterator;
     typedef std::deque<stack_frame>::const_reverse_iterator const_reverse_iterator;
@@ -125,17 +125,17 @@ namespace octave
     size_t num_user_code_frames (octave_idx_type& curr_user_frame) const;
 
     symbol_scope current_scope (void) const
     {
       return (curr_frame > 0 && curr_frame < cs.size ()
               ? cs[curr_frame].m_scope : symbol_scope ());
     }
 
-    symbol_table::context_id current_context (void) const
+    symbol_record::context_id current_context (void) const
     {
       return (curr_frame > 0 && curr_frame < cs.size ()
               ? cs[curr_frame].m_context : 0);
     }
 
     // Function at location N on the call stack (N == 0 is current), may
     // be built-in.
     octave_function * element (size_t n)
@@ -169,24 +169,24 @@ namespace octave
     // Column number in current function that we are debugging.
     int debug_user_code_column (void) const;
 
     // Return TRUE if all elements on the call stack are scripts.
     bool all_scripts (void) const;
 
     void push (octave_function *fcn);
     void push (octave_function *fcn, const symbol_scope& scope,
-               symbol_table::context_id context);
+               symbol_record::context_id context);
 
     void push (void)
     {
       push (nullptr);
     }
 
-    void push (const symbol_scope& scope, symbol_table::context_id context)
+    void push (const symbol_scope& scope, symbol_record::context_id context)
     {
       push (nullptr, scope, context);
     }
 
     void set_location (int l, int c)
     {
       if (! cs.empty ())
         {
diff --git a/libinterp/corefcn/defun-int.h b/libinterp/corefcn/defun-int.h
--- a/libinterp/corefcn/defun-int.h
+++ b/libinterp/corefcn/defun-int.h
@@ -24,17 +24,16 @@ along with Octave; see the file COPYING.
 #define octave_defun_int_h 1
 
 #include "octave-config.h"
 
 #include <string>
 
 #include "ov-builtin.h"
 #include "ov-dld-fcn.h"
-#include "symtab.h"
 #include "version.h"
 
 namespace octave
 {
   class interpreter;
 }
 
 class octave_value;
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -63,17 +63,16 @@ along with Octave; see the file COPYING.
 #include "ovl.h"
 #include "ov-fcn-handle.h"
 #include "ov-usr-fcn.h"
 #include "pager.h"
 #include "parse.h"
 #include "pt-eval.h"
 #include "pt-stmt.h"
 #include "sighandlers.h"
-#include "symtab.h"
 #include "sysdep.h"
 #include "interpreter.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 // Primary prompt string.
 static std::string VPS1;
diff --git a/libinterp/corefcn/load-save.h b/libinterp/corefcn/load-save.h
--- a/libinterp/corefcn/load-save.h
+++ b/libinterp/corefcn/load-save.h
@@ -24,18 +24,23 @@ along with Octave; see the file COPYING.
 #define octave_load_save_h 1
 
 #include "octave-config.h"
 
 #include <iosfwd>
 #include <string>
 
 #include "mach-info.h"
-#include "symtab.h"
 
+namespace octave
+{
+  class symbol_record;
+}
+
+class string_vector;
 class octave_value;
 
 // FIXME: maybe MAT5 and MAT7 should be options to MAT_BINARY.
 // Similarly, save_as_floats may be an option for LS_BINARY, LS_HDF5 etc.
 enum load_save_format_type
 {
   LS_TEXT,
   LS_BINARY,
diff --git a/libinterp/corefcn/symscope.h b/libinterp/corefcn/symscope.h
--- a/libinterp/corefcn/symscope.h
+++ b/libinterp/corefcn/symscope.h
@@ -49,18 +49,16 @@ class octave_user_function;
 namespace octave
 {
   class symbol_scope;
 
   class symbol_scope_rep
   {
   public:
 
-    typedef symbol_record::context_id context_id;
-
     typedef std::map<std::string, symbol_record>::const_iterator
     table_const_iterator;
     typedef std::map<std::string, symbol_record>::iterator
     table_iterator;
 
     typedef std::map<std::string, octave_value>::const_iterator
     subfunctions_const_iterator;
     typedef std::map<std::string, octave_value>::iterator
@@ -106,19 +104,25 @@ namespace octave
         new_sid->insert_symbol_record (nm_sr.second.dup (new_sid));
 
       new_sid->m_parent = m_parent;
       new_sid->m_parent_fcn = m_parent_fcn;
 
       return new_sid;
     }
 
-    void set_context (context_id context) { m_context = context; }
+    void set_context (symbol_record::context_id context)
+    {
+      m_context = context;
+    }
 
-    context_id current_context (void) const { return m_context; }
+    symbol_record::context_id current_context (void) const
+    {
+      return m_context;
+    }
 
     symbol_record find_symbol (const std::string& name)
     {
       table_iterator p = m_symbols.find (name);
 
       if (p == m_symbols.end ())
         return insert (name);
       else
@@ -546,25 +550,23 @@ namespace octave
     std::vector<symbol_scope> m_children;
 
     // If true, then this scope belongs to a nested function.
     bool m_is_nested;
 
     // If true then no variables can be added.
     bool m_is_static;
 
-    context_id m_context;
+    symbol_record::context_id m_context;
   };
 
   class symbol_scope
   {
   public:
 
-    typedef symbol_record::context_id context_id;
-
     symbol_scope (const std::string& name = "")
       : m_rep (new symbol_scope_rep (name))
     { }
 
     symbol_scope (const symbol_scope&) = default;
 
     symbol_scope& operator = (const symbol_scope&) = default;
 
@@ -609,22 +611,22 @@ namespace octave
       return m_rep->parent_fcn ();
     }
 
     symbol_scope dup (void) const
     {
       return symbol_scope (m_rep->dup ());
     }
 
-    void set_context (context_id context)
+    void set_context (symbol_record::context_id context)
     {
       m_rep->set_context (context);
     }
 
-    context_id current_context (void) const
+    symbol_record::context_id current_context (void) const
     {
       return m_rep->current_context ();
     }
 
     symbol_record find_symbol (const std::string& name)
     {
       return m_rep->find_symbol (name);
     }
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -38,32 +38,29 @@ along with Octave; see the file COPYING.
 #include "oct-refcount.h"
 
 class tree_argument_list;
 class octave_user_function;
 
 #include "fcn-info.h"
 #include "ov.h"
 #include "ovl.h"
-#include "symrec.h"
 #include "symscope.h"
 #include "workspace-element.h"
 
 namespace octave
 {
   class OCTINTERP_API symbol_table
   {
   public:
 
     typedef octave::symbol_record symbol_record;
     typedef octave::symbol_scope scope;
     typedef octave::fcn_info fcn_info;
 
-    typedef scope::context_id context_id;
-
     symbol_table (void)
       : m_fcn_table (), m_class_precedence_table (),
         m_parent_map (), m_global_scope ("global scope"),
         m_top_scope ("top scope"), m_current_scope (m_top_scope)
       { }
 
     // No copying!
 
@@ -81,27 +78,28 @@ namespace octave
     symbol_scope require_current_scope (const std::string& who)
     {
       if (! m_current_scope)
         error ("%s: missing scope", who.c_str ());
 
       return m_current_scope;
     }
 
-    context_id current_context (void) const
+    symbol_record::context_id current_context (void) const
     {
       return m_current_scope ? m_current_scope.current_context () : 0;
     }
 
     void set_scope (const symbol_scope& sid)
     {
       set_scope_and_context (sid, 0);
     }
 
-    void set_scope_and_context (const symbol_scope& sid, context_id context)
+    void set_scope_and_context (const symbol_scope& sid,
+                                symbol_record::context_id context)
     {
       if (sid == m_global_scope)
         error ("can't set scope to global");
 
       m_current_scope = sid;
 
       if (m_current_scope)
         m_current_scope.set_context (context);
diff --git a/libinterp/corefcn/variables.h b/libinterp/corefcn/variables.h
--- a/libinterp/corefcn/variables.h
+++ b/libinterp/corefcn/variables.h
@@ -38,19 +38,17 @@ namespace octave
   class tree_identifier;
 }
 
 #include <limits>
 #include <string>
 
 #include "lo-ieee.h"
 
-//#include "ov.h"
 #include "ov-builtin.h"
-#include "symtab.h"
 
 extern OCTINTERP_API octave_function *
 is_valid_function (const octave_value&, const std::string& = "",
                    bool warn = false);
 
 extern OCTINTERP_API octave_function *
 is_valid_function (const std::string&, const std::string& = "",
                    bool warn = false);
diff --git a/libinterp/octave-value/ov-fcn-inline.h b/libinterp/octave-value/ov-fcn-inline.h
--- a/libinterp/octave-value/ov-fcn-inline.h
+++ b/libinterp/octave-value/ov-fcn-inline.h
@@ -27,17 +27,16 @@ along with Octave; see the file COPYING.
 
 #include <iosfwd>
 #include <string>
 
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "ov-fcn.h"
 #include "ov-typeinfo.h"
-#include "symtab.h"
 #include "ov-fcn-handle.h"
 
 // Inline functions.
 
 class
 OCTINTERP_API
 octave_fcn_inline : public octave_fcn_handle
 {
diff --git a/libinterp/octave-value/ov-fcn.h b/libinterp/octave-value/ov-fcn.h
--- a/libinterp/octave-value/ov-fcn.h
+++ b/libinterp/octave-value/ov-fcn.h
@@ -28,17 +28,17 @@ along with Octave; see the file COPYING.
 #include <string>
 
 #include "oct-time.h"
 #include "str-vec.h"
 
 #include "ovl.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
-#include "symtab.h"
+#include "symscope.h"
 
 namespace octave
 {
   class tree_evaluator;
   class tree_walker;
 }
 
 // Functions.
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -528,17 +528,19 @@ octave_user_function::call (octave::tree
     error ("max_recursion_depth exceeded");
 
   // Save old and set current symbol table context, for
   // eval_undefined_error().
 
   octave::call_stack& cs
     = octave::__get_call_stack__ ("octave_user_function::call");
 
-  octave::symbol_table::context_id context = anonymous_function ? 0 : call_depth;
+  octave::symbol_record::context_id context
+    = anonymous_function ? 0 : call_depth;
+
   cs.push (this, m_scope, context);
 
   // Set pointer to the current unwind_protect frame to allow
   // certain builtins register simple cleanup in a very optimized manner.
   // This is *not* intended as a general-purpose on-cleanup mechanism,
   frame.protect_var (curr_unwind_protect_frame);
   curr_unwind_protect_frame = &frame;
 
diff --git a/libinterp/octave-value/ov-usr-fcn.h b/libinterp/octave-value/ov-usr-fcn.h
--- a/libinterp/octave-value/ov-usr-fcn.h
+++ b/libinterp/octave-value/ov-usr-fcn.h
@@ -29,17 +29,17 @@ along with Octave; see the file COPYING.
 
 #include <string>
 #include <stack>
 
 #include "comment-list.h"
 #include "ovl.h"
 #include "ov-fcn.h"
 #include "ov-typeinfo.h"
-#include "symtab.h"
+#include "symscope.h"
 #include "unwind-prot.h"
 
 class string_vector;
 
 class octave_value;
 
 namespace octave
 {
@@ -215,20 +215,20 @@ public:
   // No copying!
 
   octave_user_function (const octave_user_function& fn) = delete;
 
   octave_user_function& operator = (const octave_user_function& fn) = delete;
 
   ~octave_user_function (void);
 
-  octave::symbol_table::context_id active_context () const
+  octave::symbol_record::context_id active_context () const
   {
     return is_anonymous_function ()
-      ? 0 : static_cast<octave::symbol_table::context_id>(call_depth);
+      ? 0 : static_cast<octave::symbol_record::context_id>(call_depth);
   }
 
   octave_function * function_value (bool = false) { return this; }
 
   octave_user_function * user_function_value (bool = false) { return this; }
 
   octave_user_code * user_code_value (bool = false) { return this; }
 
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -33,17 +33,17 @@ along with Octave; see the file COPYING.
 
 #include "comment-list.h"
 #include "input.h"
 #include "token.h"
 
 namespace octave
 {
   class interpreter;
-  class symbol_table;
+  class symbol_scope;
 
   // Is the given string a keyword?
   extern bool is_keyword (const std::string& s);
 
   // For communication between the lexer and parser.
 
   class
   lexical_feedback
diff --git a/libinterp/parse-tree/oct-lvalue.h b/libinterp/parse-tree/oct-lvalue.h
--- a/libinterp/parse-tree/oct-lvalue.h
+++ b/libinterp/parse-tree/oct-lvalue.h
@@ -23,17 +23,17 @@ along with Octave; see the file COPYING.
 #if ! defined (octave_oct_lvalue_h)
 #define octave_oct_lvalue_h 1
 
 #include "octave-config.h"
 
 #include <string>
 
 #include "ovl.h"
-#include "symtab.h"
+#include "symrec.h"
 
 namespace octave
 {
   class octave_lvalue
   {
   public:
 
     octave_lvalue (void)
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -29,18 +29,18 @@ along with Octave; see the file COPYING.
 
 #include <string>
 
 #include <deque>
 #include <map>
 #include <set>
 
 #include "lex.h"
-#include "symtab.h"
 #include "pt-misc.h"
+#include "symscope.h"
 #include "token.h"
 
 class octave_function;
 class octave_user_function;
 
 namespace octave
 {
   class comment_list;
diff --git a/libinterp/parse-tree/pt-arg-list.h b/libinterp/parse-tree/pt-arg-list.h
--- a/libinterp/parse-tree/pt-arg-list.h
+++ b/libinterp/parse-tree/pt-arg-list.h
@@ -22,26 +22,27 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_pt_arg_list_h)
 #define octave_pt_arg_list_h 1
 
 #include "octave-config.h"
 
 #include <list>
 
+class octave_value;
 class octave_value_list;
 
 #include "str-vec.h"
 
 #include "base-list.h"
 #include "pt-walk.h"
-#include "symtab.h"
 
 namespace octave
 {
+  class symbol_scope;
   class tree_evaluator;
   class tree_expression;
 
   // Argument lists.  Used to hold the list of expressions that are the
   // arguments in a function call or index expression.
 
   class tree_argument_list : public base_list<tree_expression *>
   {
@@ -84,18 +85,19 @@ namespace octave
     void mark_as_simple_assign_lhs (void) { simple_assign_lhs = true; }
 
     bool is_simple_assign_lhs (void) { return simple_assign_lhs; }
 
     bool all_elements_are_constant (void) const;
 
     bool is_valid_lvalue_list (void) const;
 
-    octave_value_list convert_to_const_vector (tree_evaluator *tw,
-                                               const octave_value *object = nullptr);
+    octave_value_list
+    convert_to_const_vector (tree_evaluator *tw,
+                             const octave_value *object = nullptr);
 
     string_vector get_arg_names (void) const;
 
     std::list<std::string> variable_names (void) const;
 
     tree_argument_list * dup (symbol_scope& scope) const;
 
     void accept (tree_walker& tw)
diff --git a/libinterp/parse-tree/pt-array-list.h b/libinterp/parse-tree/pt-array-list.h
--- a/libinterp/parse-tree/pt-array-list.h
+++ b/libinterp/parse-tree/pt-array-list.h
@@ -23,20 +23,20 @@ along with Octave; see the file COPYING.
 #if ! defined (octave_pt_array_list_h)
 #define octave_pt_array_list_h 1
 
 #include "octave-config.h"
 
 #include "base-list.h"
 #include "pt-arg-list.h"
 #include "pt-exp.h"
-#include "symtab.h"
 
 namespace octave
 {
+  class symbol_scope;
   class tree_walker;
 
   // Base class for cell arrays and matrices.
 
   class tree_array_list : public tree_expression,
                           public base_list<tree_argument_list *>
   {
   public:
diff --git a/libinterp/parse-tree/pt-assign.h b/libinterp/parse-tree/pt-assign.h
--- a/libinterp/parse-tree/pt-assign.h
+++ b/libinterp/parse-tree/pt-assign.h
@@ -29,20 +29,20 @@ along with Octave; see the file COPYING.
 #include <string>
 
 class octave_value;
 class octave_value_list;
 
 #include "ov.h"
 #include "pt-exp.h"
 #include "pt-walk.h"
-#include "symtab.h"
 
 namespace octave
 {
+  class symbol_scope;
   class octave_lvalue;
   class tree_argument_list;
 
   // Simple assignment expressions.
 
   class tree_simple_assignment : public tree_expression
   {
   public:
diff --git a/libinterp/parse-tree/pt-binop.h b/libinterp/parse-tree/pt-binop.h
--- a/libinterp/parse-tree/pt-binop.h
+++ b/libinterp/parse-tree/pt-binop.h
@@ -28,20 +28,21 @@ along with Octave; see the file COPYING.
 #include <string>
 
 class octave_value;
 class octave_value_list;
 
 #include "ov.h"
 #include "pt-exp.h"
 #include "pt-walk.h"
-#include "symtab.h"
 
 namespace octave
 {
+  class symbol_scope;
+
   // Binary expressions.
 
   class tree_binary_expression : public tree_expression
   {
   public:
 
     tree_binary_expression (int l = -1, int c = -1,
                             octave_value::binary_op t
diff --git a/libinterp/parse-tree/pt-cbinop.h b/libinterp/parse-tree/pt-cbinop.h
--- a/libinterp/parse-tree/pt-cbinop.h
+++ b/libinterp/parse-tree/pt-cbinop.h
@@ -28,17 +28,16 @@ along with Octave; see the file COPYING.
 #include <string>
 
 class octave_value;
 class octave_value_list;
 
 #include "ov.h"
 #include "pt-binop.h"
 #include "pt-walk.h"
-#include "symtab.h"
 
 namespace octave
 {
   // Binary expressions that can be reduced to compound operations
 
   class tree_compound_binary_expression : public tree_binary_expression
   {
   public:
diff --git a/libinterp/parse-tree/pt-cell.h b/libinterp/parse-tree/pt-cell.h
--- a/libinterp/parse-tree/pt-cell.h
+++ b/libinterp/parse-tree/pt-cell.h
@@ -27,20 +27,20 @@ along with Octave; see the file COPYING.
 
 #include <iosfwd>
 
 class octave_value;
 class octave_value_list;
 
 #include "pt-mat.h"
 #include "pt-walk.h"
-#include "symtab.h"
 
 namespace octave
 {
+  class symbol_scope;
   class tree_argument_list;
 
   // General cells.
 
   class tree_cell : public tree_array_list
   {
   public:
 
diff --git a/libinterp/parse-tree/pt-cmd.h b/libinterp/parse-tree/pt-cmd.h
--- a/libinterp/parse-tree/pt-cmd.h
+++ b/libinterp/parse-tree/pt-cmd.h
@@ -26,17 +26,16 @@ along with Octave; see the file COPYING.
 #include "octave-config.h"
 
 #include <string>
 
 #include "ov-fcn.h"
 #include "pt.h"
 #include "pt-bp.h"
 #include "pt-walk.h"
-#include "symtab.h"
 
 namespace octave
 {
   // A base class for commands.
 
   class tree_command : public tree
   {
   public:
diff --git a/libinterp/parse-tree/pt-colon.h b/libinterp/parse-tree/pt-colon.h
--- a/libinterp/parse-tree/pt-colon.h
+++ b/libinterp/parse-tree/pt-colon.h
@@ -27,20 +27,21 @@ along with Octave; see the file COPYING.
 
 #include <string>
 
 class octave_value;
 class octave_value_list;
 
 #include "pt-exp.h"
 #include "pt-walk.h"
-#include "symtab.h"
 
 namespace octave
 {
+  class symbol_scope;
+
   // Colon expressions.
 
   class tree_colon_expression : public tree_expression
   {
   public:
 
     tree_colon_expression (int l = -1, int c = -1)
       : tree_expression (l, c), op_base (nullptr), op_limit (nullptr),
diff --git a/libinterp/parse-tree/pt-const.h b/libinterp/parse-tree/pt-const.h
--- a/libinterp/parse-tree/pt-const.h
+++ b/libinterp/parse-tree/pt-const.h
@@ -29,20 +29,21 @@ along with Octave; see the file COPYING.
 #include <string>
 
 class octave_value_list;
 
 #include "ov.h"
 #include "pt-bp.h"
 #include "pt-exp.h"
 #include "pt-walk.h"
-#include "symtab.h"
 
 namespace octave
 {
+  class symbol_scope;
+
   class tree_constant : public tree_expression
   {
   public:
 
     tree_constant (int l = -1, int c = -1)
       : tree_expression (l, c), val (), orig_text () { }
 
     tree_constant (const octave_value& v, int l = -1, int c = -1)
diff --git a/libinterp/parse-tree/pt-decl.h b/libinterp/parse-tree/pt-decl.h
--- a/libinterp/parse-tree/pt-decl.h
+++ b/libinterp/parse-tree/pt-decl.h
@@ -28,20 +28,21 @@ along with Octave; see the file COPYING.
 #include <list>
 #include <string>
 
 #include "base-list.h"
 #include "oct-lvalue.h"
 #include "pt-cmd.h"
 #include "pt-id.h"
 #include "pt-walk.h"
-#include "symtab.h"
+#include "symrec.h"
 
 namespace octave
 {
+  class symbol_scope;
   class tree_evaluator;
   class tree_expression;
   class tree_identifier;
 
   // List of expressions that make up a declaration statement.
 
   class tree_decl_elt
   {
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -30,20 +30,20 @@ along with Octave; see the file COPYING.
 #include <stack>
 #include <string>
 
 #include "call-stack.h"
 #include "ovl.h"
 #include "profiler.h"
 #include "pt-exp.h"
 #include "pt-walk.h"
-#include "symtab.h"
 
 namespace octave
 {
+  class symbol_scope;
   class tree_decl_elt;
   class tree_expression;
 
   class interpreter;
   class unwind_protect;
 
   // How to evaluate the code that the parse trees represent.
 
diff --git a/libinterp/parse-tree/pt-except.h b/libinterp/parse-tree/pt-except.h
--- a/libinterp/parse-tree/pt-except.h
+++ b/libinterp/parse-tree/pt-except.h
@@ -23,17 +23,16 @@ along with Octave; see the file COPYING.
 #if ! defined (octave_pt_except_h)
 #define octave_pt_except_h 1
 
 #include "octave-config.h"
 
 #include "pt-cmd.h"
 #include "pt-id.h"
 #include "pt-walk.h"
-#include "symtab.h"
 
 namespace octave
 {
   class comment_list;
   class tree_statement_list;
 
   // Simple exception handling.
 
diff --git a/libinterp/parse-tree/pt-exp.h b/libinterp/parse-tree/pt-exp.h
--- a/libinterp/parse-tree/pt-exp.h
+++ b/libinterp/parse-tree/pt-exp.h
@@ -26,20 +26,20 @@ along with Octave; see the file COPYING.
 #include "octave-config.h"
 
 #include <string>
 #include <list>
 
 class octave_value;
 
 #include "pt.h"
-#include "symtab.h"
 
 namespace octave
 {
+  class symbol_scope;
   class octave_lvalue;
   class tree_evaluator;
 
   // A base class for expressions.
 
   class tree_expression : public tree
   {
   public:
diff --git a/libinterp/parse-tree/pt-fcn-handle.h b/libinterp/parse-tree/pt-fcn-handle.h
--- a/libinterp/parse-tree/pt-fcn-handle.h
+++ b/libinterp/parse-tree/pt-fcn-handle.h
@@ -28,23 +28,22 @@ along with Octave; see the file COPYING.
 #include <iosfwd>
 #include <string>
 
 #include "pt-bp.h"
 #include "pt-exp.h"
 #include "pt-misc.h"
 #include "pt-stmt.h"
 #include "pt-walk.h"
-#include "symtab.h"
+#include "symscope.h"
 
 class octave_value_list;
 
 #include "ov.h"
 #include "ov-usr-fcn.h"
-#include "symtab.h"
 
 namespace octave
 {
   class tree_fcn_handle : public tree_expression
   {
   public:
 
     tree_fcn_handle (int l = -1, int c = -1)
diff --git a/libinterp/parse-tree/pt-idx.h b/libinterp/parse-tree/pt-idx.h
--- a/libinterp/parse-tree/pt-idx.h
+++ b/libinterp/parse-tree/pt-idx.h
@@ -30,21 +30,21 @@ along with Octave; see the file COPYING.
 class octave_map;
 class octave_value;
 class octave_value_list;
 
 #include "str-vec.h"
 
 #include "pt-exp.h"
 #include "pt-walk.h"
-#include "symtab.h"
 
 namespace octave
 {
   class octave_lvalue;
+  class symbol_scope;
   class tree_argument_list;
   class tree_evaluator;
 
   // Index expressions.
 
   class tree_index_expression : public tree_expression
   {
   public:
diff --git a/libinterp/parse-tree/pt-jit.h b/libinterp/parse-tree/pt-jit.h
--- a/libinterp/parse-tree/pt-jit.h
+++ b/libinterp/parse-tree/pt-jit.h
@@ -27,17 +27,17 @@ along with Octave; see the file COPYING.
 
 #include "octave-config.h"
 
 #if defined (HAVE_LLVM)
 
 #include "jit-typeinfo.h"
 #include "jit-ir.h"
 #include "pt-walk.h"
-#include "symtab.h"
+#include "symscope.h"
 
 // octave_value_list is not (yet) in the octave namespace
 class octave_value_list;
 
 namespace octave
 {
   namespace jit
   {
diff --git a/libinterp/parse-tree/pt-jump.h b/libinterp/parse-tree/pt-jump.h
--- a/libinterp/parse-tree/pt-jump.h
+++ b/libinterp/parse-tree/pt-jump.h
@@ -22,17 +22,16 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_pt_jump_h)
 #define octave_pt_jump_h 1
 
 #include "octave-config.h"
 
 #include "pt-cmd.h"
 #include "pt-walk.h"
-#include "symtab.h"
 
 namespace octave
 {
   // Break.
 
   class tree_break_command : public tree_command
   {
   public:
diff --git a/libinterp/parse-tree/pt-loop.h b/libinterp/parse-tree/pt-loop.h
--- a/libinterp/parse-tree/pt-loop.h
+++ b/libinterp/parse-tree/pt-loop.h
@@ -24,17 +24,16 @@ along with Octave; see the file COPYING.
 #define octave_pt_loop_h 1
 
 #include "octave-config.h"
 
 class octave_value;
 
 #include "pt-cmd.h"
 #include "pt-walk.h"
-#include "symtab.h"
 #include "pt-jit.h"
 
 namespace octave
 {
   class jit_info;
   class tree_argument_list;
   class tree_expression;
   class tree_statement_list;
diff --git a/libinterp/parse-tree/pt-mat.h b/libinterp/parse-tree/pt-mat.h
--- a/libinterp/parse-tree/pt-mat.h
+++ b/libinterp/parse-tree/pt-mat.h
@@ -29,20 +29,20 @@ along with Octave; see the file COPYING.
 
 class octave_value;
 class octave_value_list;
 
 #include "base-list.h"
 #include "pt-array-list.h"
 #include "pt-exp.h"
 #include "pt-walk.h"
-#include "symtab.h"
 
 namespace octave
 {
+  class symbol_scope;
   class tree_argument_list;
 
   // General matrices.  This allows us to construct matrices from
   // other matrices, variables, and functions.
 
   class tree_matrix : public tree_array_list
   {
   public:
diff --git a/libinterp/parse-tree/pt-misc.h b/libinterp/parse-tree/pt-misc.h
--- a/libinterp/parse-tree/pt-misc.h
+++ b/libinterp/parse-tree/pt-misc.h
@@ -23,20 +23,21 @@ along with Octave; see the file COPYING.
 #if ! defined (octave_pt_misc_h)
 #define octave_pt_misc_h 1
 
 #include "octave-config.h"
 
 #include "base-list.h"
 #include "pt-decl.h"
 #include "pt-walk.h"
-#include "symtab.h"
+#include "symrec.h"
 
 namespace octave
 {
+  class symbol_scope;
   class tree_identifier;
   class tree_index_expression;
 
   // Parameter lists.  Used to hold the list of input and output
   // parameters in a function definition.  Elements are identifiers
   // only.
 
   class tree_parameter_list : public base_list<tree_decl_elt *>
diff --git a/libinterp/parse-tree/pt-select.h b/libinterp/parse-tree/pt-select.h
--- a/libinterp/parse-tree/pt-select.h
+++ b/libinterp/parse-tree/pt-select.h
@@ -24,17 +24,16 @@ along with Octave; see the file COPYING.
 #define octave_pt_select_h 1
 
 #include "octave-config.h"
 
 #include "base-list.h"
 #include "comment-list.h"
 #include "pt-cmd.h"
 #include "pt-walk.h"
-#include "symtab.h"
 
 namespace octave
 {
   class tree_expression;
   class tree_statement_list;
 
   // If.
 
diff --git a/libinterp/parse-tree/pt-stmt.h b/libinterp/parse-tree/pt-stmt.h
--- a/libinterp/parse-tree/pt-stmt.h
+++ b/libinterp/parse-tree/pt-stmt.h
@@ -28,17 +28,16 @@ along with Octave; see the file COPYING.
 class octave_value_list;
 
 #include <deque>
 
 #include "base-list.h"
 #include "bp-table.h"
 #include "pt.h"
 #include "pt-walk.h"
-#include "symtab.h"
 
 namespace octave
 {
   class comment_list;
   class tree_command;
   class tree_expression;
 
   // A statement is either a command to execute or an expression to
diff --git a/libinterp/parse-tree/pt-unop.h b/libinterp/parse-tree/pt-unop.h
--- a/libinterp/parse-tree/pt-unop.h
+++ b/libinterp/parse-tree/pt-unop.h
@@ -27,20 +27,21 @@ along with Octave; see the file COPYING.
 
 #include <string>
 
 class octave_value;
 class octave_value_list;
 
 #include "pt-exp.h"
 #include "pt-walk.h"
-#include "symtab.h"
 
 namespace octave
 {
+  class symbol_scope;
+
   // Unary expressions.
 
   class tree_unary_expression : public tree_expression
   {
   protected:
 
     tree_unary_expression (int l = -1, int c = -1,
                            octave_value::unary_op t
diff --git a/libinterp/parse-tree/token.cc b/libinterp/parse-tree/token.cc
--- a/libinterp/parse-tree/token.cc
+++ b/libinterp/parse-tree/token.cc
@@ -21,17 +21,17 @@ along with Octave; see the file COPYING.
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <cassert>
 
-#include "symtab.h"
+#include "symrec.h"
 #include "token.h"
 
 namespace octave
 {
   token::token (int tv, int l, int c)
     : m_maybe_cmd (false), m_tspc (false), m_line_num (l), m_column_num (c),
       m_tok_val (tv), m_type_tag (generic_token), m_tok_info (),
       m_orig_text ()
diff --git a/libinterp/parse-tree/token.h b/libinterp/parse-tree/token.h
--- a/libinterp/parse-tree/token.h
+++ b/libinterp/parse-tree/token.h
@@ -22,17 +22,17 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_token_h)
 #define octave_token_h 1
 
 #include "octave-config.h"
 
 #include <string>
 
-#include "symtab.h"
+#include "symrec.h"
 
 namespace octave
 {
   class
   token
   {
   public:
 
