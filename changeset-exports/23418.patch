# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1492661768 14400
#      Thu Apr 20 00:16:08 2017 -0400
# Node ID 0412433f016f7155076d15cf367530b52c13c7da
# Parent  80c1fc2b411232043f305df15206c4b2ad28c818
rename load_path::loader to load_path::package_info

* load-path.h, load-path.cc (load_path::package_info): Rename from
load_path::loader.  Change all uses.
(load_path::get_package): Rename from load_path::get_loader.
Change all uses.
(load_path::package_info::m_package_name): Rename from
load_path::package_info::prefix.  Change all uses.
(load_path::top_level_package): Rename from load_path::default_loader.
Change all uses.
(load_path::package_map): Rename from load_path::loader_map.
Change all uses.

diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -403,17 +403,17 @@ load_path::do_contains_canonical (const 
           break;
         }
     }
 
   return retval;
 }
 
 void
-load_path::loader::move_fcn_map (const std::string& dir_name,
+load_path::package_info::move_fcn_map (const std::string& dir_name,
                                  const string_vector& fcn_files, bool at_end)
 {
   octave_idx_type len = fcn_files.numel ();
 
   for (octave_idx_type k = 0; k < len; k++)
     {
       std::string fname = fcn_files[k];
 
@@ -452,17 +452,17 @@ load_path::loader::move_fcn_map (const s
                   break;
                 }
             }
         }
     }
 }
 
 void
-load_path::loader::move_method_map (const std::string& dir_name, bool at_end)
+load_path::package_info::move_method_map (const std::string& dir_name, bool at_end)
 {
   for (auto& cls_fnmap : method_map)
     {
       std::string class_name = cls_fnmap.first;
 
       fcn_map_type& fn_map = cls_fnmap.second;
 
       std::string full_dir_name
@@ -514,35 +514,35 @@ load_path::do_move (dir_info_list_iterat
 
       move (di, at_end);
     }
 }
 
 void
 load_path::move (const dir_info& di, bool at_end, const std::string& pname)
 {
-  loader& l = get_loader (pname);
-
-  l.move (di, at_end);
+  package_info& pkg = get_package (pname);
+
+  pkg.move (di, at_end);
 
   dir_info::package_dir_map_type package_dir_map = di.package_dir_map;
 
   for (const auto& pkg_di : package_dir_map)
     {
       std::string full_name = pkg_di.first;
 
       if (! pname.empty ())
         full_name = pname + "." + full_name;
 
       move (pkg_di.second, at_end, full_name);
     }
 }
 
 void
-load_path::loader::move (const dir_info& di, bool at_end)
+load_path::package_info::move (const dir_info& di, bool at_end)
 {
   std::string dir_name = di.dir_name;
 
   std::list<std::string>::iterator s =
     std::find (dir_list.begin (), dir_list.end (), dir_name);
 
   if (s != dir_list.end ())
     {
@@ -613,19 +613,19 @@ load_path::do_initialize (bool set_initi
   do_set (xpath, false, true);
 }
 
 void
 load_path::do_clear (void)
 {
   dir_info_list.clear ();
 
-  default_loader.clear ();
-
-  loader_map.clear ();
+  top_level_package.clear ();
+
+  package_map.clear ();
 }
 
 static std::list<std::string>
 split_path (const std::string& p)
 {
   std::list<std::string> retval;
 
   size_t beg = 0;
@@ -790,17 +790,17 @@ load_path::do_add (const std::string& di
 
   i = find_dir_info (".");
 
   if (i != dir_info_list.end ())
     do_move (i, false);
 }
 
 void
-load_path::loader::remove_fcn_map (const std::string& dir,
+load_path::package_info::remove_fcn_map (const std::string& dir,
                                    const string_vector& fcn_files)
 {
   octave_idx_type len = fcn_files.numel ();
 
   for (octave_idx_type k = 0; k < len; k++)
     {
       std::string fname = fcn_files[k];
 
@@ -830,26 +830,26 @@ load_path::loader::remove_fcn_map (const
 
               break;
             }
         }
     }
 }
 
 void
-load_path::loader::remove_private_fcn_map (const std::string& dir)
+load_path::package_info::remove_private_fcn_map (const std::string& dir)
 {
   private_fcn_map_iterator p = private_fcn_map.find (dir);
 
   if (p != private_fcn_map.end ())
     private_fcn_map.erase (p);
 }
 
 void
-load_path::loader::remove_method_map (const std::string& dir)
+load_path::package_info::remove_method_map (const std::string& dir)
 {
   for (auto& cls_fnmap : method_map)
     {
       std::string class_name = cls_fnmap.first;
 
       fcn_map_type& fn_map = cls_fnmap.second;
 
       std::string full_dir_name
@@ -920,35 +920,35 @@ load_path::do_remove (const std::string&
     }
 
   return retval;
 }
 
 void
 load_path::remove (const dir_info& di, const std::string& pname)
 {
-  loader& l = get_loader (pname);
-
-  l.remove (di);
+  package_info& pkg = get_package (pname);
+
+  pkg.remove (di);
 
   dir_info::package_dir_map_type package_dir_map = di.package_dir_map;
 
   for (const auto& pkg_di : package_dir_map)
     {
       std::string full_name = pkg_di.first;
 
       if (! pname.empty ())
         full_name = pname + "." + full_name;
 
       remove (pkg_di.second, full_name);
     }
 }
 
 void
-load_path::loader::remove (const dir_info& di)
+load_path::package_info::remove (const dir_info& di)
 {
   std::string dir = di.dir_name;
 
   string_vector fcn_files = di.fcn_files;
 
   dir_list.remove (dir);
 
   remove_fcn_map (dir, fcn_files);
@@ -960,19 +960,19 @@ load_path::loader::remove (const dir_inf
 
 void
 load_path::do_update (void) const
 {
   // I don't see a better way to do this because we need to
   // preserve the correct directory ordering for new files that
   // have appeared.
 
-  default_loader.clear ();
-
-  loader_map.clear ();
+  top_level_package.clear ();
+
+  package_map.clear ();
 
   for (auto& di : dir_info_list)
     {
       di.update ();
 
       add (di, true, "", true);
     }
 }
@@ -1067,17 +1067,17 @@ load_path::check_file_type (std::string&
     }
   else
     error ("%s: %s: invalid type code = %d", who, fcn.c_str (), type);
 
   return retval;
 }
 
 std::string
-load_path::loader::find_fcn (const std::string& fcn, std::string& dir_name,
+load_path::package_info::find_fcn (const std::string& fcn, std::string& dir_name,
                              int type) const
 {
   std::string retval;
 
   //  update ();
 
   if (fcn.length () > 0 && fcn[0] == '@')
     {
@@ -1118,17 +1118,17 @@ load_path::loader::find_fcn (const std::
             }
         }
     }
 
   return retval;
 }
 
 std::string
-load_path::loader::find_private_fcn (const std::string& dir,
+load_path::package_info::find_private_fcn (const std::string& dir,
                                      const std::string& fcn, int type) const
 {
   std::string retval;
 
   //  update ();
 
   const_private_fcn_map_iterator q = private_fcn_map.find (dir);
 
@@ -1148,17 +1148,17 @@ load_path::loader::find_private_fcn (con
             retval = fname;
         }
     }
 
   return retval;
 }
 
 std::string
-load_path::loader::find_method (const std::string& class_name,
+load_path::package_info::find_method (const std::string& class_name,
                                 const std::string& meth,
                                 std::string& dir_name, int type) const
 {
   std::string retval;
 
   //  update ();
 
   dir_name = "";
@@ -1192,17 +1192,17 @@ load_path::loader::find_method (const st
             }
         }
     }
 
   return retval;
 }
 
 std::list<std::string>
-load_path::loader::methods (const std::string& class_name) const
+load_path::package_info::methods (const std::string& class_name) const
 {
   std::list<std::string> retval;
 
   //  update ();
 
   const_method_map_iterator mtd_map_it = method_map.find (class_name);
 
   if (mtd_map_it != method_map.end ())
@@ -1231,38 +1231,38 @@ load_path::is_package (const std::string
 
 std::list<std::string>
 load_path::do_overloads (const std::string& meth) const
 {
   std::list<std::string> retval;
 
   //  update ();
 
-  default_loader.overloads (meth, retval);
-
-  for (const auto& nm_ldr : loader_map)
+  top_level_package.overloads (meth, retval);
+
+  for (const auto& nm_ldr : package_map)
     nm_ldr.second.overloads (meth, retval);
 
   return retval;
 }
 
 void
-load_path::loader::overloads (const std::string& meth,
+load_path::package_info::overloads (const std::string& meth,
                               std::list<std::string>& l) const
 {
   for (const auto& cls_fnmap : method_map)
     {
       const fcn_map_type& m = cls_fnmap.second;
 
       if (m.find (meth) != m.end ())
         {
           std::string class_name = cls_fnmap.first;
 
-          if (! prefix.empty ())
-            class_name = prefix + "." + class_name;
+          if (! m_package_name.empty ())
+            class_name = m_package_name + "." + class_name;
 
           l.push_back (class_name);
         }
     }
 }
 
 // Should we cache all files in private directories, or is it OK to just
 // look them up each time as needed?
@@ -1644,21 +1644,21 @@ load_path::do_files (const std::string& 
     }
 
   return retval;
 }
 
 string_vector
 load_path::do_fcn_names (void) const
 {
-  return default_loader.fcn_names ();
+  return top_level_package.fcn_names ();
 }
 
 string_vector
-load_path::loader::fcn_names (void) const
+load_path::package_info::fcn_names (void) const
 {
   size_t len = fcn_map.size ();
 
   string_vector retval (len);
 
   octave_idx_type count = 0;
 
   for (const auto& nm_filst : fcn_map)
@@ -1783,19 +1783,19 @@ load_path::do_display (std::ostream& os)
 
               string_vector method_files = get_file_list (ci.method_file_map);
 
               method_files.list_in_columns (os);
             }
         }
     }
 
-  default_loader.display (os);
-
-  for (const auto& nm_ldr : loader_map)
+  top_level_package.display (os);
+
+  for (const auto& nm_ldr : package_map)
     nm_ldr.second.display (os);
 }
 
 // True if a path is contained in a path list separated by path_sep_char
 static bool
 in_path_list (const std::string& path_list, const std::string& path)
 {
   size_t ps = path.size ();
@@ -1813,35 +1813,35 @@ in_path_list (const std::string& path_li
 
   return false;
 }
 
 void
 load_path::add (const dir_info& di, bool at_end,
                 const std::string& pname, bool updating) const
 {
-  loader& l = get_loader (pname);
-
-  l.add (di, at_end, updating);
+  package_info& pkg = get_package (pname);
+
+  pkg.add (di, at_end, updating);
 
   dir_info::package_dir_map_type package_dir_map = di.package_dir_map;
 
   for (const auto& pkg_di : package_dir_map)
     {
       std::string full_name = pkg_di.first;
 
       if (! pname.empty ())
         full_name = pname + "." + full_name;
 
       add (pkg_di.second, at_end, full_name);
     }
 }
 
 void
-load_path::loader::add_to_fcn_map (const dir_info& di, bool at_end,
+load_path::package_info::add_to_fcn_map (const dir_info& di, bool at_end,
                                    bool updating)
 {
   std::string dir_name = di.dir_name;
 
   string_vector fcn_files = di.fcn_files;
 
   octave_idx_type len = fcn_files.numel ();
 
@@ -1934,26 +1934,26 @@ load_path::loader::add_to_fcn_map (const
           file_info& fi = *p;
 
           fi.types |= t;
         }
     }
 }
 
 void
-load_path::loader::add_to_private_fcn_map (const dir_info& di)
+load_path::package_info::add_to_private_fcn_map (const dir_info& di)
 {
   dir_info::fcn_file_map_type private_file_map = di.private_file_map;
 
   if (! private_file_map.empty ())
     private_fcn_map[di.dir_name] = private_file_map;
 }
 
 void
-load_path::loader::add_to_method_map (const dir_info& di, bool at_end)
+load_path::package_info::add_to_method_map (const dir_info& di, bool at_end)
 {
   std::string dir_name = di.dir_name;
 
   // <CLASS_NAME, CLASS_INFO>
   dir_info::method_file_map_type method_file_map = di.method_file_map;
 
   for (const auto& cls_ci : method_file_map)
     {
@@ -2007,19 +2007,20 @@ load_path::loader::add_to_method_map (co
       dir_info::fcn_file_map_type private_file_map = ci.private_file_map;
 
       if (! private_file_map.empty ())
         private_fcn_map[full_dir_name] = private_file_map;
     }
 }
 
 void
-load_path::loader::display (std::ostream& os) const
+load_path::package_info::display (std::ostream& os) const
 {
-  os << "*** loader: " << (prefix.empty () ? "<top-level>" : prefix) << "\n\n";
+  os << "*** package info: "
+     << (m_package_name.empty () ? "<top-level>" : m_package_name) << "\n\n";
 
   for (const auto& dir : dir_list)
     os << dir << "\n";
   os << "\n";
 
   for (const auto& dir_fnlst : private_fcn_map)
     {
       os << "\n*** private functions in "
@@ -2121,17 +2122,17 @@ genpath (const std::string& dirname, con
   return retval;
 }
 
 std::list<std::string>
 load_path::do_get_all_package_names (bool only_top_level) const
 {
   std::list<std::string> retval;
 
-  for (const auto& dir_ldr : loader_map)
+  for (const auto& dir_ldr : package_map)
     {
       if (! only_top_level || dir_ldr.first.find ('.') == std::string::npos)
         retval.push_back (dir_ldr.first);
     }
 
   return retval;
 }
 
diff --git a/libinterp/corefcn/load-path.h b/libinterp/corefcn/load-path.h
--- a/libinterp/corefcn/load-path.h
+++ b/libinterp/corefcn/load-path.h
@@ -37,17 +37,17 @@ along with Octave; see the file COPYING.
 
 class
 OCTINTERP_API
 load_path
 {
 protected:
 
   load_path (void)
-    : loader_map (), default_loader (), dir_info_list (), init_dirs () { }
+    : package_map (), top_level_package (), dir_info_list (), init_dirs () { }
 
 public:
 
   typedef void (*hook_fcn_ptr) (const std::string& dir);
 
   ~load_path (void) = default;
 
   static void initialize (bool set_initial_path = false)
@@ -97,34 +97,34 @@ public:
   }
 
   static std::string find_method (const std::string& class_name,
                                   const std::string& meth,
                                   std::string& dir_name,
                                   const std::string& pack_name = "")
   {
     return instance_ok ()
-      ? instance->get_loader (pack_name).find_method (class_name, meth,
+      ? instance->get_package (pack_name).find_method (class_name, meth,
                                                       dir_name)
       : "";
   }
 
   static std::string find_method (const std::string& class_name,
                                   const std::string& meth,
                                   const std::string& pack_name = "")
   {
     std::string dir_name;
     return find_method (class_name, meth, dir_name, pack_name);
   }
 
   static std::list<std::string> methods (const std::string& class_name,
                                          const std::string& pack_name = "")
   {
     return instance_ok ()
-      ? instance->get_loader(pack_name).methods (class_name)
+      ? instance->get_package (pack_name).methods (class_name)
       : std::list<std::string> ();
   }
 
   static std::list<std::string> overloads (const std::string& meth)
   {
     return instance_ok ()
            ? instance->do_overloads (meth) : std::list<std::string> ();
   }
@@ -142,63 +142,63 @@ public:
       ? instance->do_get_all_package_names (only_top_level)
       : std::list<std::string> ();
   }
 
   static std::string find_fcn (const std::string& fcn, std::string& dir_name,
                                const std::string& pack_name = "")
   {
     return instance_ok ()
-      ? instance->get_loader (pack_name).find_fcn (fcn, dir_name)
+      ? instance->get_package (pack_name).find_fcn (fcn, dir_name)
       : "";
   }
 
   static std::string find_fcn (const std::string& fcn,
                                const std::string& pack_name = "")
   {
     std::string dir_name;
     return find_fcn (fcn, dir_name, pack_name);
   }
 
   static std::string find_private_fcn (const std::string& dir,
                                        const std::string& fcn,
                                        const std::string& pack_name = "")
   {
     return instance_ok ()
-      ? instance->get_loader (pack_name).find_private_fcn (dir, fcn)
+      ? instance->get_package (pack_name).find_private_fcn (dir, fcn)
       : "";
   }
 
   static std::string find_fcn_file (const std::string& fcn,
                                     const std::string& pack_name = "")
   {
     std::string dir_name;
 
     return instance_ok ()
-      ? instance->get_loader (pack_name).find_fcn (fcn, dir_name, M_FILE)
+      ? instance->get_package (pack_name).find_fcn (fcn, dir_name, M_FILE)
       : "";
   }
 
   static std::string find_oct_file (const std::string& fcn,
                                     const std::string& pack_name = "")
   {
     std::string dir_name;
 
     return instance_ok ()
-      ? instance->get_loader (pack_name).find_fcn (fcn, dir_name, M_FILE)
+      ? instance->get_package (pack_name).find_fcn (fcn, dir_name, M_FILE)
       : "";
   }
 
   static std::string find_mex_file (const std::string& fcn,
                                     const std::string& pack_name = "")
   {
     std::string dir_name;
 
     return instance_ok ()
-      ? instance->get_loader (pack_name).find_fcn (fcn, dir_name, M_FILE)
+      ? instance->get_package (pack_name).find_fcn (fcn, dir_name, M_FILE)
       : "";
   }
 
   static std::string find_file (const std::string& file)
   {
     return instance_ok ()
            ? instance->do_find_file (file) : "";
   }
@@ -490,34 +490,34 @@ private:
   typedef private_fcn_map_type::iterator private_fcn_map_iterator;
 
   // <CLASS_NAME, <FCN_NAME, FILE_INFO_LIST>>
   typedef std::map<std::string, fcn_map_type> method_map_type;
 
   typedef method_map_type::const_iterator const_method_map_iterator;
   typedef method_map_type::iterator method_map_iterator;
 
-  class loader
+  class package_info
   {
   public:
-    loader (const std::string& pfx = "")
-      : prefix (pfx), dir_list (), fcn_map (), private_fcn_map (),
+    package_info (const std::string& package_name = "")
+      : m_package_name (package_name), dir_list (), fcn_map (), private_fcn_map (),
         method_map () { }
 
-    loader (const loader& l)
-      : prefix (l.prefix), dir_list (l.dir_list),
+    package_info (const package_info& l)
+      : m_package_name (l.m_package_name), dir_list (l.dir_list),
         private_fcn_map (l.private_fcn_map), method_map (l.method_map) { }
 
-    ~loader (void) = default;
+    ~package_info (void) = default;
 
-    loader& operator = (const loader& l)
+    package_info& operator = (const package_info& l)
     {
       if (&l != this)
         {
-          prefix = l.prefix;
+          m_package_name = l.m_package_name;
           dir_list = l.dir_list;
           fcn_map = l.fcn_map;
           private_fcn_map = l.private_fcn_map;
           method_map = l.method_map;
         }
 
       return *this;
     }
@@ -587,36 +587,37 @@ private:
     void remove_fcn_map (const std::string& dir,
                          const string_vector& fcn_files);
 
     void remove_private_fcn_map (const std::string& dir);
 
     void remove_method_map (const std::string& dir);
 
   private:
-    std::string prefix;
+
+    std::string m_package_name;
 
     std::list<std::string> dir_list;
 
     fcn_map_type fcn_map;
 
     private_fcn_map_type private_fcn_map;
 
     method_map_type method_map;
   };
 
   // <PACKAGE_NAME, LOADER>
-  typedef std::map<std::string, loader> loader_map_type;
+  typedef std::map<std::string, package_info> package_map_type;
 
-  typedef loader_map_type::const_iterator const_loader_map_iterator;
-  typedef loader_map_type::iterator loader_map_iterator;
+  typedef package_map_type::const_iterator const_package_map_iterator;
+  typedef package_map_type::iterator package_map_iterator;
 
-  mutable loader_map_type loader_map;
+  mutable package_map_type package_map;
 
-  mutable loader default_loader;
+  mutable package_info top_level_package;
 
   mutable dir_info_list_type dir_info_list;
 
   mutable std::set<std::string> init_dirs;
 
   static load_path *instance;
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
@@ -665,37 +666,37 @@ private:
   void do_update (void) const;
 
   static bool
   check_file_type (std::string& fname, int type, int possible_types,
                    const std::string& fcn, const char *who);
 
   bool is_package (const std::string& name) const;
 
-  loader& get_loader (const std::string& name) const
+  package_info& get_package (const std::string& name) const
   {
     if (! name.empty () && is_package (name))
       {
-        loader_map_iterator l = loader_map.find (name);
+        package_map_iterator pi = package_map.find (name);
 
-        if (l == loader_map.end ())
-          l = loader_map.insert (loader_map.end (),
-                                 loader_map_type::value_type (name, loader (name)));
+        if (pi == package_map.end ())
+          pi = package_map.insert (package_map.end (),
+                                   package_map_type::value_type (name, package_info (name)));
 
-        return l->second;
+        return pi->second;
       }
 
-    return default_loader;
+    return top_level_package;
   }
 
   std::list<std::string> do_overloads (const std::string& meth) const;
 
   bool do_find_package (const std::string& package_name) const
   {
-    return (loader_map.find (package_name) != loader_map.end ());
+    return (package_map.find (package_name) != package_map.end ());
   }
 
   std::list<std::string> do_get_all_package_names (bool only_top_level) const;
 
   std::string do_find_file (const std::string& file) const;
 
   std::string do_find_dir (const std::string& dir) const;
 
