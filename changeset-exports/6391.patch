# HG changeset patch
# User jwe
# Date 1173291284 0
#      Wed Mar 07 18:14:44 2007 +0000
# Node ID 3f3e86e9fb57eb2de4ce60d0bc9e4731ff1688e8
# Parent  334499d75c5c8dc8423777e4166e83b9aefad925
[project @ 2007-03-07 18:14:44 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2007-03-07  Muthiah Annamalai  <muthuspost@gmail.com>
+
+	* specfun/perms.m, specfun/factorial.m: Check args.
+
 2007-03-07  John W. Eaton  <jwe@octave.org>
 
 	* plot/mesh.m: Call newplot before doing anything.
 
 	* plot/__uiobject_draw_axes__.m: Send "e\n" at end of data, not
 	just "e".  Only flush plot stream once.
 	From Daniel J Sebald <daniel.sebald@ieee.org>.
 
diff --git a/scripts/specfun/factorial.m b/scripts/specfun/factorial.m
--- a/scripts/specfun/factorial.m
+++ b/scripts/specfun/factorial.m
@@ -20,17 +20,19 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} factorial (@var{n})
 ## Return the factorial of @var{n}. If @var{n} is scalar, this is
 ## equivalent to @code{prod (1:@var{n})}.  If @var{n} is an array,
 ## the factorial of the elements of the array are returned.
 ## @end deftypefn
 
 function x = factorial (n)
-  if (any (n(:) < 0))
+  if (nargin != 1)
+    print_usage ();
+  elseif (any (n(:) < 0))
     error ("factorial: n be be a scalar or array of positive integers");
   endif
   if (isscalar (n))
     x = prod (2:n);
   else
     n (n < 1) = 1;
     m = max (n(:));
     c = cumprod (1:m);
diff --git a/scripts/specfun/perms.m b/scripts/specfun/perms.m
--- a/scripts/specfun/perms.m
+++ b/scripts/specfun/perms.m
@@ -22,16 +22,19 @@
 ##
 ## Generate all permutations of @var{v}, one row per permutation. The
 ## result has size @code{factorial (@var{n}) * @var{n}}, where @var{n}
 ## is the length of @var{v}.
 ##
 ## @end deftypefn
 
 function A = perms (v)
+  if (nargin != 1)
+    print_usage ();
+  endif
   v = v(:);
   n = length (v);
   if (n == 1)
     A = v;
   else
     B = perms (v(1:n-1));
     Bidx = 1:size (B, 1);
     A = v(n) * ones (prod (2:n), n);
