# HG changeset patch
# User Rik <rik@octave.org>
# Date 1449940676 28800
#      Sat Dec 12 09:17:56 2015 -0800
# Node ID e81276e8f4819e0f053bcc754aeea1f41bad9131
# Parent  ac1f8c640d8f31fcf484e2f1b82e1cd5ef558910
2015 Code Sprint: chol.cc: use ovl().

diff --git a/libinterp/dldfcn/chol.cc b/libinterp/dldfcn/chol.cc
--- a/libinterp/dldfcn/chol.cc
+++ b/libinterp/dldfcn/chol.cc
@@ -249,37 +249,31 @@ sparse matrices.\n\
           FloatMatrix m = arg.float_matrix_value ();
 
           octave_idx_type info;
 
           FloatCHOL fact;
           fact = FloatCHOL (m, info, LLt != true);
 
           if (nargout == 2 || info == 0)
-            {
-              retval(1) = info;
-              retval(0) = get_chol (fact);
-            }
+            retval = ovl (get_chol (fact), info);
           else
             error ("chol: input matrix must be positive definite");
         }
       else if (arg.is_complex_type ())
         {
           FloatComplexMatrix m = arg.float_complex_matrix_value ();
 
           octave_idx_type info;
 
           FloatComplexCHOL fact;
           fact = FloatComplexCHOL (m, info, LLt != true);
 
           if (nargout == 2 || info == 0)
-            {
-              retval(1) = info;
-              retval(0) = get_chol (fact);
-            }
+            retval = ovl (get_chol (fact), info);
           else
             error ("chol: input matrix must be positive definite");
         }
       else
         gripe_wrong_type_arg ("chol", arg);
     }
   else
     {
@@ -288,37 +282,31 @@ sparse matrices.\n\
           Matrix m = arg.matrix_value ();
 
           octave_idx_type info;
 
           CHOL fact;
           fact = CHOL (m, info, LLt != true);
 
           if (nargout == 2 || info == 0)
-            {
-              retval(1) = info;
-              retval(0) = get_chol (fact);
-            }
+            retval = ovl (get_chol (fact), info);
           else
             error ("chol: input matrix must be positive definite");
         }
       else if (arg.is_complex_type ())
         {
           ComplexMatrix m = arg.complex_matrix_value ();
 
           octave_idx_type info;
 
           ComplexCHOL fact;
           fact = ComplexCHOL (m, info, LLt != true);
 
           if (nargout == 2 || info == 0)
-            {
-              retval(1) = info;
-              retval(0) = get_chol (fact);
-            }
+            retval = ovl (get_chol (fact), info);
           else
             error ("chol: input matrix must be positive definite");
         }
       else
         gripe_wrong_type_arg ("chol", arg);
     }
 
   return retval;
@@ -577,121 +565,119 @@ If @var{op} is @qcode{\"-\"}, @var{info}
 @end itemize\n\
 \n\
 If @var{info} is not present, an error message is printed in cases 1 and 2.\n\
 @seealso{chol, cholinsert, choldelete, cholshift}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
-  octave_value_list retval;
-
   if (nargin > 3 || nargin < 2)
     print_usage ();
 
   octave_value argr = args(0);
   octave_value argu = args(1);
 
   if (! argr.is_numeric_type () || ! argu.is_numeric_type ()
       || (nargin > 2 && ! args(2).is_string ()))
     print_usage ();
 
+  octave_value_list retval (nargout == 2 ? 2 : 1);
+
   octave_idx_type n = argr.rows ();
 
   std::string op = (nargin < 3) ? "+" : args(2).string_value ();
 
-  bool down = op == "-";
+  bool down = (op == "-");
+
+  if (! down && op != "+")
+    error ("cholupdate: OP must be \"+\" or \"-\"");
+
+  if (argr.columns () != n || argu.rows () != n || argu.columns () != 1)
+    error ("cholupdate: dimension mismatch between R and U");
 
-  if (down || op == "+")
-    if (argr.columns () == n && argu.rows () == n && argu.columns () == 1)
-      {
-        int err = 0;
-        if (argr.is_single_type () || argu.is_single_type ())
-          {
-            if (argr.is_real_type () && argu.is_real_type ())
-              {
-                // real case
-                FloatMatrix R = argr.float_matrix_value ();
-                FloatColumnVector u = argu.float_column_vector_value ();
+  int err = 0;
+  if (argr.is_single_type () || argu.is_single_type ())
+    {
+      if (argr.is_real_type () && argu.is_real_type ())
+        {
+          // real case
+          FloatMatrix R = argr.float_matrix_value ();
+          FloatColumnVector u = argu.float_column_vector_value ();
 
-                FloatCHOL fact;
-                fact.set (R);
+          FloatCHOL fact;
+          fact.set (R);
 
-                if (down)
-                  err = fact.downdate (u);
-                else
-                  fact.update (u);
+          if (down)
+            err = fact.downdate (u);
+          else
+            fact.update (u);
 
-                retval(0) = get_chol_r (fact);
-              }
-            else
-              {
-                // complex case
-                FloatComplexMatrix R = argr.float_complex_matrix_value ();
-                FloatComplexColumnVector u =
-                  argu.float_complex_column_vector_value ();
+          retval(0) = get_chol_r (fact);
+        }
+      else
+        {
+          // complex case
+          FloatComplexMatrix R = argr.float_complex_matrix_value ();
+          FloatComplexColumnVector u =
+            argu.float_complex_column_vector_value ();
 
-                FloatComplexCHOL fact;
-                fact.set (R);
+          FloatComplexCHOL fact;
+          fact.set (R);
 
-                if (down)
-                  err = fact.downdate (u);
-                else
-                  fact.update (u);
+          if (down)
+            err = fact.downdate (u);
+          else
+            fact.update (u);
 
-                retval(0) = get_chol_r (fact);
-              }
-          }
-        else
-          {
-            if (argr.is_real_type () && argu.is_real_type ())
-              {
-                // real case
-                Matrix R = argr.matrix_value ();
-                ColumnVector u = argu.column_vector_value ();
+          retval(0) = get_chol_r (fact);
+        }
+    }
+  else
+    {
+      if (argr.is_real_type () && argu.is_real_type ())
+        {
+          // real case
+          Matrix R = argr.matrix_value ();
+          ColumnVector u = argu.column_vector_value ();
 
-                CHOL fact;
-                fact.set (R);
+          CHOL fact;
+          fact.set (R);
 
-                if (down)
-                  err = fact.downdate (u);
-                else
-                  fact.update (u);
+          if (down)
+            err = fact.downdate (u);
+          else
+            fact.update (u);
 
-                retval(0) = get_chol_r (fact);
-              }
-            else
-              {
-                // complex case
-                ComplexMatrix R = argr.complex_matrix_value ();
-                ComplexColumnVector u = argu.complex_column_vector_value ();
+          retval(0) = get_chol_r (fact);
+        }
+      else
+        {
+          // complex case
+          ComplexMatrix R = argr.complex_matrix_value ();
+          ComplexColumnVector u = argu.complex_column_vector_value ();
 
-                ComplexCHOL fact;
-                fact.set (R);
-
-                if (down)
-                  err = fact.downdate (u);
-                else
-                  fact.update (u);
+          ComplexCHOL fact;
+          fact.set (R);
 
-                retval(0) = get_chol_r (fact);
-              }
-          }
+          if (down)
+            err = fact.downdate (u);
+          else
+            fact.update (u);
 
-        if (nargout > 1)
-          retval(1) = err;
-        else if (err == 1)
-          error ("cholupdate: downdate violates positiveness");
-        else if (err == 2)
-          error ("cholupdate: singular matrix");
-      }
-    else
-      error ("cholupdate: dimension mismatch between R and U");
-  else
-    error ("cholupdate: OP must be \"+\" or \"-\"");
+          retval(0) = get_chol_r (fact);
+        }
+    }
+
+  if (nargout > 1)
+    retval(1) = err;
+  else if (err == 1)
+    error ("cholupdate: downdate violates positiveness");
+  else if (err == 2)
+    error ("cholupdate: singular matrix");
 
   return retval;
 }
 
 /*
 %!shared A, u, Ac, uc
 %! A = [  0.436997  -0.131721   0.124120  -0.061673 ;
 %!       -0.131721   0.738529   0.019851  -0.140295 ;
@@ -772,108 +758,104 @@ On return, @var{info} is set to\n\
 \n\
 @item 2 if @var{R} is singular.\n\
 @end itemize\n\
 \n\
 If @var{info} is not present, an error message is printed in cases 1 and 2.\n\
 @seealso{chol, cholupdate, choldelete, cholshift}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
   if (args.length () != 3)
     print_usage ();
 
   octave_value argr = args(0);
   octave_value argj = args(1);
   octave_value argu = args(2);
 
   if (! argr.is_numeric_type () || ! argu.is_numeric_type ()
       || ! argj.is_real_scalar ())
     print_usage ();
 
+  octave_value_list retval (nargout == 2 ? 2 : 1);
+
   octave_idx_type n = argr.rows ();
   octave_idx_type j = argj.scalar_value ();
 
-  if (argr.columns () == n && argu.rows () == n+1 && argu.columns () == 1)
-    {
-      if (j > 0 && j <= n+1)
-        {
-          int err = 0;
-          if (argr.is_single_type () || argu.is_single_type ())
-            {
-              if (argr.is_real_type () && argu.is_real_type ())
-                {
-                  // real case
-                  FloatMatrix R = argr.float_matrix_value ();
-                  FloatColumnVector u = argu.float_column_vector_value ();
+  if (argr.columns () != n || argu.rows () != n+1 || argu.columns () != 1)
+    error ("cholinsert: dimension mismatch between R and U");
 
-                  FloatCHOL fact;
-                  fact.set (R);
-                  err = fact.insert_sym (u, j-1);
-
-                  retval(0) = get_chol_r (fact);
-                }
-              else
-                {
-                  // complex case
-                  FloatComplexMatrix R = argr.float_complex_matrix_value ();
-                  FloatComplexColumnVector u =
-                    argu.float_complex_column_vector_value ();
-
-                  FloatComplexCHOL fact;
-                  fact.set (R);
-                  err = fact.insert_sym (u, j-1);
+  if (j < 1 || j > n+1)
+    error ("cholinsert: index J out of range");
 
-                  retval(0) = get_chol_r (fact);
-                }
-            }
-          else
-            {
-              if (argr.is_real_type () && argu.is_real_type ())
-                {
-                  // real case
-                  Matrix R = argr.matrix_value ();
-                  ColumnVector u = argu.column_vector_value ();
-
-                  CHOL fact;
-                  fact.set (R);
-                  err = fact.insert_sym (u, j-1);
+  int err = 0;
+  if (argr.is_single_type () || argu.is_single_type ())
+    {
+      if (argr.is_real_type () && argu.is_real_type ())
+        {
+          // real case
+          FloatMatrix R = argr.float_matrix_value ();
+          FloatColumnVector u = argu.float_column_vector_value ();
 
-                  retval(0) = get_chol_r (fact);
-                }
-              else
-                {
-                  // complex case
-                  ComplexMatrix R = argr.complex_matrix_value ();
-                  ComplexColumnVector u =
-                    argu.complex_column_vector_value ();
-
-                  ComplexCHOL fact;
-                  fact.set (R);
-                  err = fact.insert_sym (u, j-1);
+          FloatCHOL fact;
+          fact.set (R);
+          err = fact.insert_sym (u, j-1);
 
-                  retval(0) = get_chol_r (fact);
-                }
-            }
-
-          if (nargout > 1)
-            retval(1) = err;
-          else if (err == 1)
-            error ("cholinsert: insertion violates positiveness");
-          else if (err == 2)
-            error ("cholinsert: singular matrix");
-          else if (err == 3)
-            error ("cholinsert: diagonal element must be real");
+          retval(0) = get_chol_r (fact);
         }
       else
-        error ("cholinsert: index J out of range");
+        {
+          // complex case
+          FloatComplexMatrix R = argr.float_complex_matrix_value ();
+          FloatComplexColumnVector u =
+            argu.float_complex_column_vector_value ();
+
+          FloatComplexCHOL fact;
+          fact.set (R);
+          err = fact.insert_sym (u, j-1);
+
+          retval(0) = get_chol_r (fact);
+        }
     }
   else
-    error ("cholinsert: dimension mismatch between R and U");
+    {
+      if (argr.is_real_type () && argu.is_real_type ())
+        {
+          // real case
+          Matrix R = argr.matrix_value ();
+          ColumnVector u = argu.column_vector_value ();
+
+          CHOL fact;
+          fact.set (R);
+          err = fact.insert_sym (u, j-1);
+
+          retval(0) = get_chol_r (fact);
+        }
+      else
+        {
+          // complex case
+          ComplexMatrix R = argr.complex_matrix_value ();
+          ComplexColumnVector u =
+            argu.complex_column_vector_value ();
+
+          ComplexCHOL fact;
+          fact.set (R);
+          err = fact.insert_sym (u, j-1);
+
+          retval(0) = get_chol_r (fact);
+        }
+    }
+
+  if (nargout > 1)
+    retval(1) = err;
+  else if (err == 1)
+    error ("cholinsert: insertion violates positiveness");
+  else if (err == 2)
+    error ("cholinsert: singular matrix");
+  else if (err == 3)
+    error ("cholinsert: diagonal element must be real");
 
   return retval;
 }
 
 /*
 %!test
 %! u2 = [  0.35080 ;
 %!         0.63930 ;
