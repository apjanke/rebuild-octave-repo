# HG changeset patch
# User jwe
# Date 1196283112 0
#      Wed Nov 28 20:51:52 2007 +0000
# Node ID 720c2b4271f82ae0a68a7f91bf5015b8b2bd6b25
# Parent  621111e57a867a3110160f75022ad9f2309c1ee4
[project @ 2007-11-28 20:51:51 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2007-11-28  John W. Eaton  <jwe@octave.org>
 
+	* graphics.h.in (class data_property): New class.
+	(class line, class image, class patch, class surface): Use it
+	instead of octave_value for data properties.
+
 	* mkbuiltins: Emit #include "builtins.h" for the builtins.cc file.
 	From Christoph Mayer <Christoph.Mayer@dlr.de>.
 
 	* TEMPLATE-INST/Array-tc.cc (resize_fill_value<octave_value>):
 	Delete.
 
 	* Cell.cc (Cell::Cell (const dim_vector&, const string_vector&, bool)):
 	Initialize undefined values to resize_fill_value ().
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -77,18 +77,17 @@ public:
       }
 
     return (limit == NPOS) ? size () == s.size () : k == limit;
   }
 };
 
 // ---------------------------------------------------------------------
 
-class
-radio_values
+class radio_values
 {
 public:
   radio_values (const std::string& opt_string = std::string ());
 
   radio_values (const radio_values& a)
     : default_val (a.default_val), possible_vals (a.possible_vals) { }
 
   radio_values& operator = (const radio_values& a)
@@ -123,18 +122,17 @@ public:
   }
 
 private:
   // Might also want to cache
   std::string default_val;
   std::set<caseless_str> possible_vals;
 };
 
-class
-radio_property
+class radio_property
 {
 public:
   radio_property (const radio_values& v)
     : vals (v), current_val (v.default_value ()) { }
 
   radio_property (const radio_values& v, const std::string& initial_value)
     : vals (v), current_val (initial_value) { }
 
@@ -182,18 +180,17 @@ public:
 
   const std::string& current_value (void) const { return current_val; }
 
 private:
   radio_values vals;
   std::string current_val;
 };
 
-class
-color_values
+class color_values
 {
 public:
   color_values (double r = 0, double g = 0, double b = 1)
   {
     xrgb[0] = r;
     xrgb[1] = g;
     xrgb[2] = b;
 
@@ -242,18 +239,17 @@ public:
 
 private:
   double xrgb[3];
 
   bool str2rgb (std::string str);
 };
 
 
-class 
-color_property
+class color_property
 {
 public:
   color_property (const color_values& c = color_values (),
 		  const radio_values& v = radio_values ())
     : current_type (color_t), color_val (c), radio_val (v),
       current_val (v.default_value ())
   { }
 
@@ -341,18 +337,17 @@ public:
 
 private:
   enum current_enum { color_t, radio_t } current_type;
   color_values color_val;
   radio_values radio_val;
   std::string current_val;
 };
 
-class 
-colormap_property
+class colormap_property
 {
 public:
   colormap_property (const Matrix& m = Matrix ())
     : cmap (m)
   {
     if (cmap.is_empty ())
       {
 	cmap = Matrix (64, 3, 0.0);
@@ -408,16 +403,103 @@ public:
   }
 
   operator octave_value (void) const { return cmap; }
 
 private:
   Matrix cmap;
 };
 
+class data_property
+{
+public:
+  data_property (const Matrix& m = Matrix ())
+    : data (m), lo (min_val (m)), hi (max_val (m)) { }
+
+  data_property (const octave_value& val)
+  {
+    data = val.matrix_value ();
+
+    lo = min_val (data);
+    hi = max_val (data);
+  }
+
+  data_property& operator = (const data_property& a)
+  {
+    if (&a != this)
+      {
+	data = a.data;
+	lo = a.lo;
+	hi = a.hi;
+      }
+
+    return *this;
+  }
+
+  data_property& operator = (const octave_value& val) 
+  {
+    data = val.matrix_value ();
+
+    lo = min_val (data);
+    hi = max_val (data);
+
+    return *this;
+  }
+
+  operator octave_value (void) const { return data; }
+
+private:
+  Matrix data;
+  double lo;
+  double hi;
+
+  static double min_val (const Matrix& m)
+  {
+    double retval = octave_NaN;
+
+    octave_idx_type nel = m.numel ();
+
+    if (nel > 0)
+      {
+	retval = octave_Inf;
+
+	for (octave_idx_type i = 0; i < nel; i++)
+	  {
+	    double d = m(i);
+
+	    if (! isnan (d) && m(i) < retval)
+	      retval = d;
+	  }
+      }
+
+    return retval;
+  }
+
+  static double max_val (const Matrix& m)
+  {
+    double retval = octave_NaN;
+
+    octave_idx_type nel = m.numel ();
+
+    if (nel > 0)
+      {
+	retval = -octave_Inf;
+
+	for (octave_idx_type i = 0; i < nel; i++)
+	  {
+	    double d = m(i);
+
+	    if (! isnan (d) && m(i) > retval)
+	      retval = d;
+	  }
+      }
+
+    return retval;
+  }
+};
 
 class property_list
 {
 public:
   typedef std::map<std::string, octave_value> pval_map_type;
   typedef std::map<std::string, pval_map_type> plist_map_type;
   
   typedef pval_map_type::iterator pval_map_iterator;
@@ -1323,23 +1405,23 @@ public:
     std::string graphics_object_name (void) const { return go_name; }
 
     static property_list::pval_map_type factory_defaults (void);
 
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES
-      octave_value xdata
-      octave_value ydata
-      octave_value zdata
-      octave_value ldata
-      octave_value udata
-      octave_value xldata
-      octave_value xudata
+      data_property xdata
+      data_property ydata
+      data_property zdata
+      data_property ldata
+      data_property udata
+      data_property xldata
+      data_property xudata
       color_property color
       octave_value linestyle
       octave_value linewidth
       octave_value marker
       octave_value markeredgecolor
       octave_value markerfacecolor
       octave_value markersize
       octave_value keylabel
@@ -1528,19 +1610,19 @@ public:
     std::string graphics_object_name (void) const { return go_name; }
 
     static property_list::pval_map_type factory_defaults (void);
 
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES
-      octave_value cdata
-      octave_value xdata
-      octave_value ydata
+      data_property xdata
+      data_property ydata
+      data_property cdata
     END_PROPERTIES
 
     static std::string go_name;
   };
 
 private:
   properties xproperties;
 
@@ -1620,20 +1702,20 @@ public:
     std::string graphics_object_name (void) const { return go_name; }
 
     static property_list::pval_map_type factory_defaults (void);
 
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES
-      octave_value cdata
-      octave_value xdata
-      octave_value ydata
-      octave_value zdata
+      data_property xdata
+      data_property ydata
+      data_property zdata
+      data_property cdata
       octave_value faces
       octave_value vertices
       color_property facecolor a
       octave_value facealpha
       color_property edgecolor a
       octave_value linestyle
       octave_value linewidth
       octave_value marker
@@ -1726,20 +1808,20 @@ public:
     std::string graphics_object_name (void) const { return go_name; }
 
     static property_list::pval_map_type factory_defaults (void);
 
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES
-      octave_value xdata
-      octave_value ydata
-      octave_value zdata
-      octave_value cdata
+      data_property xdata
+      data_property ydata
+      data_property zdata
+      data_property cdata
       color_property facecolor a
       octave_value facealpha
       color_property edgecolor a
       octave_value linestyle
       octave_value linewidth
       octave_value marker
       octave_value markeredgecolor
       octave_value markerfacecolor
