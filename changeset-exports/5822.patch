# HG changeset patch
# User jwe
# Date 1147980697 0
#      Thu May 18 19:31:37 2006 +0000
# Node ID 4fdc2515ebadf361b534f7c1d2a684427870487b
# Parent  11e4ae44984f666830694f8ae01fea8cd725f1b9
[project @ 2006-05-18 19:31:36 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2006-05-18  John W. Eaton  <jwe@octave.org>
+
+	* EIG.cc (EIG::init): Trap Inf and NaN values here.
+	From Keith Goodman <kwgoodman@gmail.com>.
+
 2006-05-08  David Bateman  <dbateman@free.fr>
 
 	* Sparse-op-defs.h (SPARSE_SPARSE_MUL): fix bug in previous
 	modification.
 
 2006-05-09  David Bateman  <dbateman@free.fr>
 
 	* sparse-dmsolve.cc: Remove reference to ov-re-sparse.h,
diff --git a/liboctave/EIG.cc b/liboctave/EIG.cc
--- a/liboctave/EIG.cc
+++ b/liboctave/EIG.cc
@@ -65,16 +65,23 @@ extern "C"
 			   Complex*, const octave_idx_type&, double*, octave_idx_type&
 			   F77_CHAR_ARG_LEN_DECL
 			   F77_CHAR_ARG_LEN_DECL);
 }
 
 octave_idx_type
 EIG::init (const Matrix& a, bool calc_ev)
 {
+  if (a.any_element_is_inf_or_nan ())
+    {
+      (*current_liboctave_error_handler)
+	("EIG: matrix contains Inf or NaN values");
+      return -1;
+    }
+
   if (a.is_symmetric ())
     return symmetric_init (a, calc_ev);
 
   octave_idx_type n = a.rows ();
 
   if (n != a.cols ())
     {
       (*current_liboctave_error_handler) ("EIG requires square matrix");
@@ -232,16 +239,23 @@ EIG::symmetric_init (const Matrix& a, bo
     (*current_liboctave_error_handler) ("dsyev workspace query failed");
 
   return info;
 }
 
 octave_idx_type
 EIG::init (const ComplexMatrix& a, bool calc_ev)
 {
+  if (a.any_element_is_inf_or_nan ())
+    {
+      (*current_liboctave_error_handler)
+	("EIG: matrix contains Inf or NaN values");
+      return -1;
+    }
+
   if (a.is_hermitian ())
     return hermitian_init (a, calc_ev);
 
   octave_idx_type n = a.rows ();
 
   if (n != a.cols ())
     {
       (*current_liboctave_error_handler) ("EIG requires square matrix");
diff --git a/src/DLD-FUNCTIONS/conv2.cc b/src/DLD-FUNCTIONS/conv2.cc
--- a/src/DLD-FUNCTIONS/conv2.cc
+++ b/src/DLD-FUNCTIONS/conv2.cc
@@ -264,17 +264,17 @@ in the column direction and by vector @v
 
   if (nargin < 2)
     {
      print_usage ("conv2");
      return retval;
     }
   else if (nargin == 3)
     {
-      if  args(2).is_string ())
+      if (args(2).is_string ())
         shape = args(2).string_value ();
       else
         separable = true;
     }
   else if (nargin >= 4)
     {
       separable = true;
       shape = args(3).string_value ();
@@ -283,17 +283,17 @@ in the column direction and by vector @v
   if (shape == "full")
     ishape = SHAPE_FULL;
   else if (shape == "same")
     ishape = SHAPE_SAME;
   else if (shape == "valid")
     ishape = SHAPE_VALID;
   else
     {
-      error("Shape type not valid");
+      error ("conv2: shape type not valid");
       print_usage ("conv2");
       return retval;
     }
 
    if (separable)
      {
       // If user requests separable, check first two params are vectors
 
