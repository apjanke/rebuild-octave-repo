# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1233752037 -3600
#      Wed Feb 04 13:53:57 2009 +0100
# Node ID af72c8137d6455ce93d30c17782fe259d54f5a16
# Parent  9c092b111b1d3d57f651e2c12775c1810af8ec3d
improve looping over arrays

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2009-02-04  Jaroslav Hajek  <highegg@gmail.com>
+
+	* pt-loop.h (tree_simple_for_command::do_for_loop_once,
+	tree_complex_for_command::do_for_loop_once): Remove obsolete decls.
+	* pt-loop.cc (quit_loop_now): Remove obsolete method.
+	* pt-eval.cc (DO_ND_LOOP): Delete macro.
+	(tree_evaluator::visit_simple_for_command): Use the generic
+	do_index_op for iterating matrices.
+
 2009-02-04  John W. Eaton  <jwe@octave.org>
 
 	New evaluator and debugger derived from tree-walker class.
 
 	* pt-eval.h, pt-eval.cc: New files.  Parse tree evaluator code
 	adapted from eval member functions in classes derived from
 	tree_command.
 	* Makefile.in (PT_INCLUDES, PT_SRC): Add them to the lists
diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -253,93 +253,16 @@ quit_loop_now (void)
  \
       if (! error_state && loop_body) \
 	loop_body->accept (*this); \
  \
       quit = quit_loop_now (); \
     } \
   while (0)
 
-#define DO_ND_LOOP(MTYPE, TYPE, CONV, ARG) \
-  do \
-    { \
-      dim_vector dv = ARG.dims (); \
- \
-      bool quit = false; \
- \
-      TYPE *atmp = ARG.fortran_vec (); \
- \
-      octave_idx_type steps = dv(1); \
- \
-      octave_idx_type nrows = dv(0); \
- \
-      int ndims = dv.length (); \
-      if (ndims > 2) \
-        { \
-          for (int i = 2; i < ndims; i++) \
-            steps *= dv(i); \
-          dv(1) = steps; \
-          dv.resize (2); \
-        } \
- \
-      if (steps > 0) \
-	{ \
-          if (nrows == 0) \
-            { \
-	      MTYPE tarray (dim_vector (0, 1)); \
- \
-	      octave_value val (tarray); \
- \
-	      for (octave_idx_type i = 0; i < steps; i++) \
-		{ \
-	          DO_SIMPLE_FOR_LOOP_ONCE (val); \
- \
-	          if (quit) \
-	            break; \
-	       } \
-            } \
-          else if (nrows == 1) \
-            { \
-	      for (octave_idx_type i = 0; i < steps; i++) \
-		{ \
-		  octave_value val (CONV (*atmp++)); \
- \
-	          DO_SIMPLE_FOR_LOOP_ONCE (val); \
- \
-	          if (quit) \
-	            break; \
-	       } \
-            } \
-          else \
-            { \
-              if (ndims > 2) \
-                ARG = ARG.reshape (dv); \
- \
-              MTYPE tmp (dim_vector (nrows, 1)); \
- \
-              TYPE *ftmp = tmp.fortran_vec (); \
- \
-              for (octave_idx_type i = 0; i < steps; i++) \
-	        { \
- 	          for (int j = 0; j < nrows; j++) \
-	            ftmp[j] = *atmp++;  \
- \
-                  octave_value val (tmp); \
- \
-                  DO_SIMPLE_FOR_LOOP_ONCE (val); \
-                  quit = (i == steps - 1 ? true : quit); \
- \
-	          if (quit) \
-	            break; \
-	        } \
-	    } \
-        } \
-    } \
-  while (0)
-
 void
 tree_evaluator::visit_simple_for_command (tree_simple_for_command& cmd)
 {
   if (error_state)
     return;
 
   unwind_protect::begin_frame ("tree_evaluator::visit_simple_for_command");
 
@@ -393,71 +316,49 @@ tree_evaluator::visit_simple_for_command
 	  }
       }
     else if (rhs.is_scalar_type ())
       {
 	bool quit = false;
 
 	DO_SIMPLE_FOR_LOOP_ONCE (rhs);
       }
-    else if (rhs.is_string ())
+    else if (rhs.is_matrix_type () 
+             || rhs.is_cell () || rhs.is_string ())
       {
-	charMatrix chm_tmp = rhs.char_matrix_value ();
-	octave_idx_type nr = chm_tmp.rows ();
-	octave_idx_type steps = chm_tmp.columns ();
-	bool quit = false;
-
-	if (error_state)
-	  goto cleanup;
+        // A matrix or cell is reshaped to 2 dimensions and iterated by
+        // columns.
 
-	if (nr == 1)
-	  {
-	    for (octave_idx_type i = 0; i < steps; i++)
-	      {
-		octave_value val (chm_tmp.xelem (0, i));
-
-		DO_SIMPLE_FOR_LOOP_ONCE (val);
+        bool quit = false;
 
-		if (quit)
-		  break;
-	      }
-	  }
-	else
-	  {
-	    for (octave_idx_type i = 0; i < steps; i++)
-	      {
-		octave_value val (chm_tmp.extract (0, i, nr-1, i), true);
+        dim_vector dv = rhs.dims ().redim (2);
+
+        octave_idx_type steps = dv(1);
 
-		DO_SIMPLE_FOR_LOOP_ONCE (val);
+        if (steps > 0)
+          {
+            octave_value arg = rhs;
+            if (rhs.ndims () > 2)
+              arg = arg.reshape (dv);
 
-		if (quit)
-		  break;
-	      }
-	  }
-      }
-    else if (rhs.is_matrix_type ())
-      {
-	if (rhs.is_real_type ())
-	  {
-	    NDArray m_tmp = rhs.array_value ();
+            //octave_value_list idx(2, octave_value ());
+            octave_value_list idx(2, octave_value ());
+            idx(0) = octave_value::magic_colon_t;
 
-	    if (error_state)
-	      goto cleanup;
+            for (octave_idx_type i = 1; i <= steps; i++)
+              {
+                // do_index_op expects one-based indices.
+                idx(1) = i;
+                octave_value val = arg.do_index_op (idx);
+                DO_SIMPLE_FOR_LOOP_ONCE (val);
 
-	    DO_ND_LOOP (NDArray, double, , m_tmp);
-	  }
-	else
-	  {
-	    ComplexNDArray cm_tmp = rhs.complex_array_value ();
-
-	    if (error_state)
-	      goto cleanup;
-
-	    DO_ND_LOOP (ComplexNDArray, Complex, , cm_tmp);
-	  }
+                if (quit)
+                  break;
+              }
+          }
       }
     else if (rhs.is_map ())
       {
 	Octave_map tmp_val (rhs.map_value ());
 
 	bool quit = false;
 
 	for (Octave_map::iterator p = tmp_val.begin ();
@@ -470,22 +371,16 @@ tree_evaluator::visit_simple_for_command
 	      = (val_lst.length () == 1) ? val_lst(0) : octave_value (val_lst);
 
 	    DO_SIMPLE_FOR_LOOP_ONCE (val);
 
 	    if (quit)
 	      break;
 	  }
       }
-    else if (rhs.is_cell ())
-      {
-	Cell c_tmp = rhs.cell_value ();
-
-	DO_ND_LOOP (Cell, octave_value, Cell, c_tmp);
-      }
     else
       {
 	::error ("invalid type in for loop expression near line %d, column %d",
 		 cmd.line (), cmd.column ());
       }
   }
 
  cleanup:
diff --git a/src/pt-loop.cc b/src/pt-loop.cc
--- a/src/pt-loop.cc
+++ b/src/pt-loop.cc
@@ -40,38 +40,16 @@ along with Octave; see the file COPYING.
 #include "pt-loop.h"
 #include "pt-stmt.h"
 #include "pt-walk.h"
 #include "unwind-prot.h"
 
 // TRUE means we are evaluating some kind of looping construct.
 bool evaluating_looping_command = false;
 
-// Decide if it's time to quit a for or while loop.
-static inline bool
-quit_loop_now (void)
-{
-  OCTAVE_QUIT;
-
-  // Maybe handle `continue N' someday...
-
-  if (tree_continue_command::continuing)
-    tree_continue_command::continuing--;
-
-  bool quit = (error_state
-	       || tree_return_command::returning
-	       || tree_break_command::breaking
-	       || tree_continue_command::continuing);
-
-  if (tree_break_command::breaking)
-    tree_break_command::breaking--;
-
-  return quit;
-}
-
 // While.
 
 tree_while_command::~tree_while_command (void)
 {
   delete expr;
   delete list;
   delete lead_comm;
   delete trail_comm;
diff --git a/src/pt-loop.h b/src/pt-loop.h
--- a/src/pt-loop.h
+++ b/src/pt-loop.h
@@ -189,19 +189,16 @@ private:
   tree_statement_list *list;
 
   // Comment preceding FOR token.
   octave_comment_list *lead_comm;
 
   // Comment preceding ENDFOR token.
   octave_comment_list *trail_comm;
 
-  void do_for_loop_once (octave_lvalue &ult, const octave_value& rhs,
-			 bool& quit);
-
   // No copying!
 
   tree_simple_for_command (const tree_simple_for_command&);
 
   tree_simple_for_command& operator = (const tree_simple_for_command&);
 };
 
 class
@@ -250,20 +247,16 @@ private:
   tree_statement_list *list;
 
   // Comment preceding FOR token.
   octave_comment_list *lead_comm;
 
   // Comment preceding ENDFOR token.
   octave_comment_list *trail_comm;
 
-  void do_for_loop_once (octave_lvalue &val_ref, octave_lvalue &key_ref,
-			 const octave_value& val, const octave_value& key,
-			 bool& quit);
-
   // No copying!
 
   tree_complex_for_command (const tree_complex_for_command&);
 
   tree_complex_for_command& operator = (const tree_complex_for_command&);
 };
 
 #endif
