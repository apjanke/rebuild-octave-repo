# HG changeset patch
# User Rik <rik@octave.org>
# Date 1448495146 28800
#      Wed Nov 25 15:45:46 2015 -0800
# Node ID 2892f62fb37cb9586f98c26948bf8683ddbb9833
# Parent  b4f5962b3373263405ca1a5e437f235b0bfa16da
inputname.m: Return "" rather than strange errors if fcn fails (partial fix for bug #41992).

* inputname.m: Use try/catch block around evalin() in case it fails.
Add more BIST tests.

diff --git a/scripts/miscellaneous/inputname.m b/scripts/miscellaneous/inputname.m
--- a/scripts/miscellaneous/inputname.m
+++ b/scripts/miscellaneous/inputname.m
@@ -30,41 +30,54 @@
 ## @end deftypefn
 
 function s = inputname (n)
 
   if (nargin != 1)
     print_usage ();
   endif
 
-  s = evalin ("caller", sprintf ("__varval__ (\".argn.\"){%d};", fix (n)));
+  s = "";
+  try
+    s = evalin ("caller", sprintf ("__varval__ ('.argn.'){%d}", fix (n)));
+  catch
+    return;
+  end_try_catch
+
   ## For compatibility with Matlab,
   ## return empty string if argument name is not a valid identifier.
   if (! isvarname (s))
     s = "";
   endif
 
 endfunction
 
 
 ## Warning: heap big magic in the following tests!!!
-## The test function builds a private context for each
-## test, with only the specified values shared between
-## them.  It does this using the following template:
+## The test function builds a private context for each test, with only the
+## specified values shared between them.  It does this using the following
+## template:
 ##
-##     function [<shared>] = testfn(<shared>)
+##     function [<shared>] = testfn (<shared>)
 ##        <test>
+##     endfunction
 ##
-## To test inputname, I need a function context invoked
-## with known parameter names.  So define a couple of
-## shared parameters, et voila!, the test is trivial.
+## To test inputname, I need a function context invoked with known parameter
+## names.  So define a couple of shared parameters, et voila!, the test is
+## trivial.
 
 %!shared hello, worldly
 %!assert (inputname (1), "hello")
 %!assert (inputname (2), "worldly")
+%!assert (inputname (3), "")
+
+## Clear parameter list so that testfn is created with zero inputs/outputs
+%!shared  
+%!assert (inputname (-1), "")
+%!assert (inputname (1), "")
 
 %!function r = __foo__ (x, y)
 %!  r = inputname (2);
 %!endfunction
 %!assert (__foo__ (pi, e), "e");
 %!assert (feval (@__foo__, pi, e), "e");
 
 %!error inputname ()
