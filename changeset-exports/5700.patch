# HG changeset patch
# User jwe
# Date 1142962305 0
#      Tue Mar 21 17:31:45 2006 +0000
# Node ID 67118c88cee7d688410fcf06e7a51b4b2b0065ca
# Parent  8459ed2e2668b1d1333398cdd23ea1d71beb6c29
[project @ 2006-03-21 17:31:45 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,18 +1,26 @@
+2006-03-21  John W. Eaton  <jwe@octave.org>
+
+	* lo-specfun.cc (betainc): Use F77_XFCN instead of F77_FUNC for
+	call to xdbetai.
+
 2006-03-21  David Bateman  <dbateman@free.fr>
 
-	    * dSparse.cc (solve): Add argument singular_fallback, to allow
-	    fallback to QR solvers to be optional.
-	    * CSparse.cc (solve): ditto.
-	    * dSparse.h (solve): update declaration for new argument.
-	    * CSparse.h (solve): ditto.
-	    * sparse-dmsolve.cc (dmsolve): Use singular_fallback argument
-	    to bypass QR solvers when solving the well determined part of
-	    the problem.
+	* lo-specfun.cc (xlgamma): Require arg strictly greater than 0.
+	Use F77_XFCN instead of F77_FUNC for call to dlgams.
+
+	* dSparse.cc (solve): Add argument singular_fallback, to allow
+	fallback to QR solvers to be optional.
+	* CSparse.cc (solve): Ditto.
+	* dSparse.h (solve): update declaration for new argument.
+	* CSparse.h (solve): Ditto.
+	* sparse-dmsolve.cc (dmsolve): Use singular_fallback argument
+	to bypass QR solvers when solving the well determined part of
+	the problem.
 
 2006-03-17  John W. Eaton  <jwe@octave.org>
 
 	* str-vec.cc (vector::list_in_columns): New optional arg, width.
 
 2006-03-16  David Bateman  <dbateman@free.fr>
 
 	* CSparse.cc: Change use of nzmax to nnz to allow automatic
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -165,21 +165,21 @@ xgamma (double x)
 }
 
 double
 xlgamma (double x)
 {
   double result;
   double sgngam;
 
-  if (x < 0)
+  if (x <= 0)
     (*current_liboctave_error_handler)
       ("xlgamma: argument must be nonnegative");
-
-  F77_XFCN (dlgams, DLGAMS, (x, result, sgngam));
+  else
+    F77_XFCN (dlgams, DLGAMS, (x, result, sgngam));
 
   return result;
 }
 
 static inline Complex
 zbesj (const Complex& z, double alpha, int kode, octave_idx_type& ierr);
 
 static inline Complex
@@ -942,17 +942,17 @@ gripe_betainc_nonconformant (const dim_v
   ("betainc: nonconformant arguments (x is %s, a is %s, b is %s)",
    d1_str.c_str (), d2_str.c_str (), d3_str.c_str ());
 }
 
 double
 betainc (double x, double a, double b)
 {
   double retval;
-  F77_FUNC (xdbetai, XDBETAI) (x, a, b, retval);
+  F77_XFCN (xdbetai, XDBETAI, (x, a, b, retval));
   return retval;
 }
 
 Matrix
 betainc (double x, double a, const Matrix& b)
 {
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
