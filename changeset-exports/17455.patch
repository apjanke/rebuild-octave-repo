# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1379717023 14400
#      Fri Sep 20 18:43:43 2013 -0400
# Node ID b76b14e386b3f4e76200c54184ae192cfe4f8383
# Parent  36877a45bd1be102922d399c4554f3db3616a1ff
Replace ambiguous call to pow with bit shift

* __magick_read__.cc (encode_uint_image<T>): Replace ambiguous call to pow
with bit shift for computing integer powers of two.

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -22,18 +22,16 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <cmath>
-
 #include "file-stat.h"
 #include "oct-env.h"
 #include "oct-time.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "ov-struct.h"
 
@@ -1030,17 +1028,17 @@ encode_uint_image (std::vector<Magick::I
 
   // We will be passing the values as integers with depth as specified
   // by QuantumDepth (maximum value specified by MaxRGB). This is independent
   // of the actual depth of the image. GM will then convert the values but
   // while in memory, it always keeps the values as specified by QuantumDepth.
   // From GM documentation:
   //  Color arguments are must be scaled to fit the Quantum size according to
   //  the range of MaxRGB
-  const double divisor = (pow (2, bitdepth) - 1) / MaxRGB;
+  const double divisor = static_cast<double>((1 << bitdepth) - 1) / MaxRGB;
 
   const P *img_fvec = img.fortran_vec ();
   const P *a_fvec   = alpha.fortran_vec ();
   switch (type)
     {
     case Magick::GrayscaleType:
       {
         octave_idx_type GM_idx = 0;
