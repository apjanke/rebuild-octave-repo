# HG changeset patch
# User jwe
# Date 758099456 0
#      Sun Jan 09 07:10:56 1994 +0000
# Node ID ea306e13ce22ba6f1e0949320bb8a8c88872fbfb
# Parent  49a716824a863906181eccfd5ef25db7f5c1eeee
[project @ 1994-01-09 07:10:56 by jwe]

diff --git a/src/builtins.cc b/src/builtins.cc
--- a/src/builtins.cc
+++ b/src/builtins.cc
@@ -367,17 +367,23 @@ where y and x are vectors.", },
        libcruft/fsqp/README.MISSING in the source distribution.", },
 #else
   "[x, phi] = fsqp (x, \"phi\" [, lb, ub] [, lb, A, ub] [, lb, \"g\", ub])\n\n\
   Groups of arguments surrounded in `[]' are optional, but\n\
   must appear in the same relative order shown above.", },
 #endif
 
   { "fsqp_options", -1, 1, builtin_fsqp_options,
+#if defined (FSQP_MISSING)
+    "This function requires FSQP, which is not freely\n\
+       redistributable.  For more information, read the file\n\
+       libcruft/fsqp/README.MISSING in the source distribution.", },
+#else
     "fsqp_options (keyword, value): set or show options for fsqp", },
+#endif
 
   { "ftell", 2, 1, builtin_ftell,
     "position = ftell (\"filename\" or filenum): returns the current file position", },
 
   { "getenv", 2, 1, builtin_getenv,
     "getenv (\"string\"): get environment variable values", },
 
   { "givens", 3, 2, builtin_givens,
@@ -458,17 +464,23 @@ where xdot and x are vectors and t is a 
   function to call.  The objective function must be of the form\n\
 \n\
     y = phi (x)\n\
 \n\
   where x is a vector and y is a scalar.", },
 #endif
 
   { "npsol_options", -1, 1, builtin_npsol_options,
+#if defined (NPSOL_MISSING)
+    "This function requires NPSOL, which is not freely\n\
+       redistributable.  For more information, read the file\n\
+       libcruft/npsol/README.MISSING in the source distribution.", },
+#else
     "npsol_options (keyword, value): set or show options for npsol", },
+#endif
 
   { "ones", 3, 1, builtin_ones,
     "ones (n), ones (n, m), ones (x): create a matrix of all ones", },
 
   { "pause", 1, 0, builtin_pause,
     "pause (seconds): suspend program execution", },
 
   { "purge_tmp_files", 5, 1, builtin_purge_tmp_files,
@@ -491,17 +503,23 @@ where xdot and x are vectors and t is a 
 #else
     "[x, obj, info, lambda] = qpsol (x, H, c [, lb, ub] [, lb, A, ub])\n\
 \n\
   Groups of arguments surrounded in `[]' are optional, but\n\
   must appear in the same relative order shown above.", },
 #endif
 
   { "qpsol_options", -1, 1, builtin_qpsol_options,
+#if defined (QPSOL_MISSING)
+    "This function requires QPSOL, which is not freely\n\
+       redistributable.  For more information, read the file\n\
+       libcruft/qpsol/README.MISSING in the source distribution.", },
+#else
     "qpsol_options (keyword, value): set or show options for qpsol", },
+#endif
 
   { "qr", 2, 2, builtin_qr,
     "[q, r] = qr (X): form QR factorization of X", },
 
   { "quad", 6, 3, builtin_quad,
     "[v, ier, nfun] = quad (\"f\", a, b [, tol] [, sing])\n\
 \n\
 Where the first argument is the name of the  function to call to\n\
diff --git a/src/g-builtins.cc b/src/g-builtins.cc
--- a/src/g-builtins.cc
+++ b/src/g-builtins.cc
@@ -810,17 +810,17 @@ builtin_fsolve_options (const tree_const
  * NLPs.
  */
 tree_constant *
 builtin_fsqp (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
 #if defined (FSQP_MISSING)
-  print_usage ("fsolve");
+  print_usage ("fsqp");
 #else
   if ((nargin == 3 || nargin == 5 || nargin == 6 || nargin == 8
        || nargin == 9 || nargin == 11)
       && (nargout >= 1 && nargout <= 3))
     DLD_BUILTIN (args, nargin, nargout, fsqp,
 		 retval = fsqp (args, nargin, nargout);)
   else
     print_usage ("fsolve");
@@ -829,21 +829,22 @@ builtin_fsqp (const tree_constant *args,
   return retval;
 }
 
 tree_constant *
 builtin_fsqp_options (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
-  if (nargin >= 3 && nargin <= 7 && nargout >= 1 && nargout <= 3)
-    DLD_BUILTIN (args, nargin, nargout, fsqp_options,
-		 retval = fsqp_options (args, nargin, nargout);)
-  else
-    print_usage ("fsqp_options");
+#if defined (FSQP_MISSING)
+  print_usage ("fsqp_options");
+#else
+  DLD_BUILTIN (args, nargin, nargout, fsqp_options,
+	       retval = fsqp_options (args, nargin, nargout);)
+#endif
 
   return retval;
 }
 
 /*
  * tell current position of file
  */
 tree_constant *
@@ -1169,21 +1170,22 @@ builtin_npsol (const tree_constant *args
   return retval;
 }
 
 tree_constant *
 builtin_npsol_options (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
-  if (nargin >= 3 && nargin <= 7 && nargout >= 1 && nargout <= 3)
-    DLD_BUILTIN (args, nargin, nargout, npsol_options,
-		 retval = npsol_options (args, nargin, nargout);)
-  else
-    print_usage ("npsol_options");
+#if defined (NPSOL_MISSING)
+  print_usage ("npsol_options");
+#else
+  DLD_BUILTIN (args, nargin, nargout, npsol_options,
+	       retval = npsol_options (args, nargin, nargout);)
+#endif
 
   return retval;
 }
 
 /*
  * A matrix of ones.
  */
 tree_constant *
@@ -1344,21 +1346,22 @@ builtin_qpsol (const tree_constant *args
   return retval;
 }
 
 tree_constant *
 builtin_qpsol_options (const tree_constant *args, int nargin, int nargout)
 {
   tree_constant *retval = NULL_TREE_CONST;
 
-  if (nargin >= 3 && nargin <= 7 && nargout >= 1 && nargout <= 3)
-    DLD_BUILTIN (args, nargin, nargout, qpsol_options,
-		 retval = qpsol_options (args, nargin, nargout);)
-  else
-    print_usage ("qpsol_options");
+#if defined (QPSOL_MISSING)
+  print_usage ("qpsol");
+#else
+  DLD_BUILTIN (args, nargin, nargout, qpsol_options,
+	       retval = qpsol_options (args, nargin, nargout);)
+#endif
 
   return retval;
 }
 
 /*
  * QR factorization.
  */
 tree_constant *
