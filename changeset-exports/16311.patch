# HG changeset patch
# User Philip Nienhuis <prnienhuis@users.sf.net>
# Date 1363337693 -3600
#      Fri Mar 15 09:54:53 2013 +0100
# Node ID 9c4ac8f25a8c542cc45b5866483ee9d3a222ffe6
# Parent  e7f6c479ce1ccbe977e4040600ea91186e14bc3b
textscan.m, textread.m: fix wrong code assessing EOL char(s), remove duplicate code

diff --git a/scripts/io/textread.m b/scripts/io/textread.m
--- a/scripts/io/textread.m
+++ b/scripts/io/textread.m
@@ -111,22 +111,22 @@ function varargout = textread (filename,
     ## 'endofline' option set by user.
     if (! ischar (varargin{endofline + 1}));
       error ("character value required for EndOfLine");
     endif
   else
     ## Determine EOL from file.  Search for EOL candidates in first BUFLENGTH chars
     eol_srch_len = min (length (str), BUFLENGTH);
     ## First try DOS (CRLF)
-    if (! isempty (strfind ("\r\n", str(1 : eol_srch_len))))
+    if (! isempty (strfind (str(1 : eol_srch_len), "\r\n")))
       eol_char = "\r\n";
     ## Perhaps old Macintosh? (CR)
-    elseif (! isempty (strfind ("\r", str(1 : eol_srch_len))))
+    elseif (! isempty (strfind (str(1 : eol_srch_len), "\r")))
       eol_char = "\r";
-    ## Otherwise, use plain UNIX (LF)
+    ## Otherwise, use plain *nix (LF)
     else
       eol_char = "\n";
     endif
     ## Set up default endofline param value
     varargin(end+1:end+2) = {"endofline", eol_char};
   endif
  
   ## Now that we know what EOL looks like, we can process format_repeat_count.
diff --git a/scripts/io/textscan.m b/scripts/io/textscan.m
--- a/scripts/io/textscan.m
+++ b/scripts/io/textscan.m
@@ -206,20 +206,20 @@ function [C, position] = textscan (fid, 
     else
       error ("textscan: character value required for EndOfLine");
     endif
   else
     if (! ischar (fid))
     ## Determine EOL from file.  Search for EOL candidates in first BUFLENGTH chars
     eol_srch_len = min (length (str), BUFLENGTH);
     ## First try DOS (CRLF)
-    if (! isempty (strfind ("\r\n", str(1 : eol_srch_len))))
+    if (! isempty (strfind (str(1 : eol_srch_len), "\r\n")))
       eol_char = "\r\n";
     ## Perhaps old Macintosh? (CR)
-    elseif (! isempty (strfind ("\r", str(1 : eol_srch_len))))
+    elseif (! isempty (strfind (str(1 : eol_srch_len), "\r")))
       eol_char = "\r";
     ## Otherwise, use plain UNIX (LF)
     else
       eol_char = "\n";
     endif
     else
       eol_char = "\n";
     endif
@@ -262,19 +262,16 @@ function [C, position] = textscan (fid, 
       fseek (fid, st_pos, "bof");
       str = fscanf (fid, "%c", data_size);
     else
       fseek (fid, st_pos, "bof");
       str = fread (fid, "char=>char").';
     endif
   endif
 
-  ## Determine the number of data fields
-  num_fields = numel (strfind (format, "%")) - numel (strfind (format, "%*"));
-
   ## Strip trailing EOL to avoid returning stray missing values (f. strread).
   ## However, in case of CollectOutput request, presence of EOL is required
   eol_at_end = strcmp (str(end-length (eol_char) + 1 : end), eol_char);
   if (collop)
     if (! eol_at_end)
       str(end+1 : end+length (eol_char)) = eol_char;
     endif
   elseif (eol_at_end)
