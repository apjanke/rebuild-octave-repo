# HG changeset patch
# User jwe
# Date 1177094381 0
#      Fri Apr 20 18:39:41 2007 +0000
# Node ID 8810bbf321cec7d3cf9ab57e12dd69d08fc87d3b
# Parent  69e864d21c11e85db523fca5d121341063c3938a
[project @ 2007-04-20 18:39:40 by jwe]

diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -155,29 +155,40 @@ named on the command line.
 @cindex @code{--quiet}
 @cindex @code{-q}
 Don't print the usual greeting and version message at startup.
 
 @item --traditional
 @itemx --braindead
 @cindex @code{--traditional}
 @cindex @code{--braindead}
-Set initial values for user-preference variables to the following
-values for compatibility with @sc{Matlab}.
+For compatibility with @sc{Matlab}, set initial values for
+user-preferences to the following values
 
 @example
 @group
-  PS1                           = ">> "
-  PS2                           = ""
-  beep_on_error                 = true
-  crash_dumps_octave_core       = false
-  default_save_options          = "-mat-binary"
-  fixed_point_format            = true
-  page_screen_output            = false
-  print_empty_dimensions        = false
+  PS1                             = ">> "
+  PS2                             = ""
+  beep_on_error                   = true
+  crash_dumps_octave_core         = false
+  default_save_options            = "-mat-binary"
+  fixed_point_format              = true
+  history_timestamp_format_string = "%%-- %D %I:%M %p --%%"
+  page_screen_output              = false
+  print_empty_dimensions          = false
+@end group
+@end example
+
+@noindent
+and disable the following warnings
+@example
+@group
+  Octave:fopen-file-in-path
+  Octave:function-name-clash
+  Octave:load-file-in-path
 @end group
 @end example
 
 @item --verbose
 @itemx -V
 @cindex @code{--verbose}
 @cindex @code{-V}
 Turn on verbose output.
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -536,29 +536,31 @@ hello (:);
      @print{} Hello, World!
 @end group
 @end example
 
 @node Function Files
 @section Function Files
 @cindex function file
 
+@c FIXME need discussion of subfunctions here
+
 Except for simple one-shot programs, it is not practical to have to
 define all the functions you need each time you need them.  Instead, you
 will normally want to save them in a file so that you can easily edit
 them, and save them for use at a later time.
 
 Octave does not require you to load function definitions from files
 before using them.  You simply need to put the function definitions in a
 place where Octave can find them.
 
 When Octave encounters an identifier that is undefined, it first looks
 for variables or functions that are already compiled and currently
 listed in its symbol table.  If it fails to find a definition there, it
-searches a list of directories (the @deffn{path}) for files ending in
+searches a list of directories (the @dfn{path}) for files ending in
 @file{.m} that have the same base name as the undefined
 identifier.@footnote{The @samp{.m} suffix was chosen for compatibility
 with @sc{Matlab}.}  Once Octave finds a file with a name that matches,
 the contents of the file are read.  If it defines a @emph{single}
 function, it is compiled and executed.  @xref{Script Files}, for more
 information about how you can define more than one function in a single
 file.
 
@@ -619,16 +621,49 @@ ignore the time stamps for all function 
 @DOCSTRING(ignore_function_time_stamp)
 
 @DOCSTRING(autoload)
 
 @DOCSTRING(builtin)
 
 @DOCSTRING(dispatch)
 
+@menu
+* Subfunctions::
+@end menu
+
+@node Subfunctions
+@subsection Subfunctions
+
+A function file may contain secondary functions called
+@dfn{subfunctions}.  These secondary functions are only visible to the
+other functions in the same function file.  For example, a file
+@file{f.m} containing
+
+@example
+@group
+function f ()
+  printf ("in f, calling g\n");
+  g ()
+endfunction
+function g ()
+  printf ("in g, calling h\n");
+endfunction
+function h ()
+  printf ("in h\n")
+endfunction
+@end group
+@end example
+
+@noindent
+defines a main function @code{f} and two subfunctions.  The
+subfunctions @code{g} and @code{h} may only be called from the main
+function @code{f} or from the other subfunctions, but not from outside
+the file @file{f.m}.
+
 @node Script Files
 @section Script Files
 
 A script file is a file containing (almost) any sequence of Octave
 commands.  It is read and evaluated just as if you had typed each
 command at the Octave prompt, and provides a convenient way to perform a
 sequence of commands that do not logically belong inside a function.
 
@@ -950,40 +985,40 @@ the syntax
 @example
 @@@var{function-name}
 @end example
 
 @noindent
 For example
 
 @example
-f = @sin;
+f = @@sin;
 @end example
 
 @noindent
 Creates a function handle called @code{f} that refers to the the
 function @code{sin}.
 
 Function handles are used to call other functions indirectly, or to pass
 a function as an argument to another function like @code{quad} or
 @code{fsolve}.  For example
 
 @example
-f = @sin;
+f = @@sin;
 quad (f, 0, pi)
     @result 1.8391
 @end example
 
 You may use @code{feval} to call a function using function handle, or
 simply write the name of the function handle follwed by an argument
 list.  If there are no arguments, you must use an empty argument list
 @samp{()}.  For example
 
 @example
-f = @sin;
+f = @@sin;
 feval (f, pi/4)
     @result 0.70711
 f (pi/4)
     @result 0.70711
 @end example
 
 @DOCSTRING(functions)
 
@@ -1111,17 +1146,17 @@ Minimization of functions.
 
 @item path
 Functions to manage the directory path Octave uses to find functions.
 
 @item pkg
 Install external packages of functions in Octave.
 
 @item plot
-A set of functions that implement the @sc{Matlab}-like plotting functions.
+Functions for displaying and printing two- and three-dimensional graphs.
 
 @item polynomial
 Functions for manipulating polynomials.
 
 @item set
 Functions for creating and manipulating sets of unique values.
 
 @item signal
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -1,21 +1,15 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @node Input and Output
 @chapter Input and Output
 
-There are two distinct classes of input and output functions.  The first
-set are modeled after the functions available in @sc{Matlab}.  The
-second set are modeled after the standard I/O library used by the C
-programming language and offer more flexibility and control over the
-output.
-
 When running interactively, Octave normally sends any output intended
 for your terminal that is more than one screen long to a paging program,
 such as @code{less} or @code{more}.  This avoids the problem of having a
 large volume of output stream by before you can read it.  With
 @code{less} (and some versions of @code{more}) you can also scan forward
 and backward, and search for specific items.
 
 Normally, no output is displayed by the pager until just before Octave
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -1,36 +1,31 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @node Plotting
 @chapter Plotting
 
-All of Octave's plotting functions use @code{gnuplot} to handle the
-actual graphics. Most types of plots can be generated using the basic
-plotting functions, which are patterned after the equivalent functions
-in @sc{Matlab}.
-
 @menu
-* Two-Dimensional Plotting::    
+* Plotting::    
 * Specialized Two-Dimensional Plots::  
 * Three-Dimensional Plotting::  
 * Manipulating Existing Plots::
 * Plot Annotations::            
 * Multiple Plots on One Page::  
 * Multiple Plot Windows::       
 * Printing Plots::
 * Interaction with gnuplot::    
 @end menu
 
-@node Two-Dimensional Plotting
-@section Two-Dimensional Plotting
+@node Plotting
+@section Plotting
 
-The @sc{Matlab}-style two-dimensional plotting commands are:
+The basic plotting commands are:
 
 @cindex plotting
 @cindex graphics
 
 @DOCSTRING(axes)
 
 @DOCSTRING(plot)
 
@@ -85,18 +80,16 @@ The @sc{Matlab}-style two-dimensional pl
 @DOCSTRING(plot3)
 
 @DOCSTRING(mesh)
 
 @DOCSTRING(meshgrid)
 
 @DOCSTRING(ndgrid)
 
-@DOCSTRING(meshdom)
-
 @DOCSTRING(view)
 
 @node Manipulating Existing Plots
 @section Manipulating Existing Plots
 
 @DOCSTRING(axis)
 
 @DOCSTRING(gca)
diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -25,37 +25,39 @@ represent the string whose contents are 
 Octave can be of any length.
 
 Since the single-quote mark is also used for the transpose operator
 (@pxref{Arithmetic Ops}) but double-quote marks have no other purpose in
 Octave, it is best to use double-quote marks to denote strings.
 
 @cindex escape sequence notation
 In double-quoted strings, the backslash character is used to introduce
-@deffn{escape sequences} that reresent other characters.  For example,
+@dfn{escape sequences} that reresent other characters.  For example,
 @samp{\n} embeds a newline character in a double-quoted string and
 @samp{\"} embeds a double quote character.
 
 In single-quoted strings, backslash is not a special character.
 
 Here is an example showing the difference
 
 @example
+@group
 toascii ("\n")
     @result 10
 toascii ('\n')
     @result [ 92 110 ]
+@end group
 @end example
 
 You may also insert a single quote character in a single-quoted string
 by using two single quote characters in succession.  For example,
 
 @example
 'I can''t escape'
-  @result I can't escape
+    @result I can't escape
 @end example
 
 Here is a table of all the escape sequences used in Octave.  They are
 the same as those used in the C programming language.
 
 @table @code
 @item \\
 Represents a literal backslash, @samp{\}.
diff --git a/doc/interpreter/struct.txi b/doc/interpreter/struct.txi
--- a/doc/interpreter/struct.txi
+++ b/doc/interpreter/struct.txi
@@ -1,12 +1,15 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
+@c FIXME update for structure arrays
+@c FIXME need discussion of comma-separated lists somewhere
+
 @node Data Structures
 @chapter Data Structures
 @cindex structures
 @cindex data structures
 
 Octave includes support for organizing data in structures.  The current
 implementation uses an associative array with indices limited to
 strings, but the syntax is more like C-style structures.  Here are some
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,16 @@
 2007-04-20  John W. Eaton  <jwe@octave.org>
 
+	* DLD-FUNCTIONS/__gnuplot_raw__.l (deftypefn): 
+	(Vautomatic_replot): Delete static variable.
+	(Fautomatic_replot): Delete function.
+
+	* toplev.cc (Fcasesen): Delete obsolete function.
+
 	* DLD-FUNCTIONS/__gnuplot_raw__.l (gnuplot::makeplot): Check
 	whether caller is "splot", not "gsplot".
 
 2007-04-19  John W. Eaton  <jwe@octave.org>
 
 	* lex.l (is_keyword_token): Delete all_va_args_kw switch case.
 	* octave.gperf: Remove all_va_args_kw from the list.
 
diff --git a/src/DLD-FUNCTIONS/__gnuplot_raw__.l b/src/DLD-FUNCTIONS/__gnuplot_raw__.l
--- a/src/DLD-FUNCTIONS/__gnuplot_raw__.l
+++ b/src/DLD-FUNCTIONS/__gnuplot_raw__.l
@@ -268,20 +268,16 @@ static std::string Vgnuplot_command_plot
 static std::string Vgnuplot_command_replot = "rep";
 static std::string Vgnuplot_command_splot = "sp";
 static std::string Vgnuplot_command_using = "u";
 static std::string Vgnuplot_command_with = "w";
 static std::string Vgnuplot_command_axes = "ax";
 static std::string Vgnuplot_command_title = "t";
 static std::string Vgnuplot_command_end = "\n";
 
-// If TRUE, a replot command is issued automatically each time a plot
-// changes in some way.
-static bool Vautomatic_replot = true;
-
 // Check if the parser state is such that a plot keyword can occur.
 
 static bool
 can_be_plotkw (void)
 {
     return (gpt_allow_plotkw
 	    && (gpt_braces == 0)
 	    && (gpt_brackets == 0)
@@ -1547,28 +1543,16 @@ public:
 };
 
 static gnuplot_X X;
 
 // -----------------------
 // User-callable functions
 // -----------------------
 
-DEFUN_DLD (automatic_replot, args, nargout,
-  "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {@var{val} =} automatic_replot ()\n\
-@deftypefnx {Loadable Function} {@var{old_val} =} automatic_replot (@var{new_val})\n\
-Query or set the current automatic replot state.  Although it is fairly\n\
-inefficient, especially for large plots, automatic replotting is enabled\n\
-by default for compatibility with Matlab.\n\
-@end deftypefn")
-{
-  return SET_INTERNAL_VARIABLE (automatic_replot);
-}
-
 DEFUN_DLD (gnuplot_binary, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{val} =} gnuplot_binary ()\n\
 @deftypefnx {Loadable Function} {@var{old_val} =} gnuplot_binary (@var{new_val})\n\
 Query or set the name of the program invoked by the plot command.\n\
 The default value @code{\"gnuplot\"}.  @xref{Installation}.\n\
 @end deftypefn")
 {
diff --git a/src/DLD-FUNCTIONS/sparse.cc b/src/DLD-FUNCTIONS/sparse.cc
--- a/src/DLD-FUNCTIONS/sparse.cc
+++ b/src/DLD-FUNCTIONS/sparse.cc
@@ -56,60 +56,56 @@ Return 1 if the value of the expression 
        return octave_value ();
      }
    else 
      return octave_value (is_sparse (args(0)));
 }
 
 DEFUN_DLD (sparse, args, ,
     "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {@var{sparse_val} =} sparse (@dots{})\n\
-SPARSE: create a sparse matrix\n\
-\n\
-sparse can be called in the following ways:\n\
+@deftypefn {Loadable Function} {@var{s} =} sparse (@var{a})\n\
+Create a sparse matrix from the full matrix @var{a}.\n\
+is forced back to a full matrix is resulting matrix is sparse\n\
 \n\
-@enumerate\n\
-@item @var{S} = sparse(@var{A})  where @var{A} is a full matrix\n\
-\n\
-@item @var{S} = sparse(@var{A},1)  where @var{A} is a full matrix, result\n\
+@deftypefnx {Loadable Function} {@var{s} =} sparse (@var{a}, 1)\n\
+Create a sparse matrix and convert it back to a full matrix.\n\
 is forced back to a full matrix is resulting matrix is sparse\n\
 \n\
-@item @var{S} = sparse(@var{i},@var{j},@var{s},@var{m},@var{n},@var{nzmax})  where\n\
-   @itemize @w \n\
-@var{i},@var{j}   are integer index vectors (1 x nnz) @* \n\
-@var{s}     is the vector of real or complex entries (1 x nnz) @* \n\
-@var{m},@var{n}   are the scalar dimentions of S @* \n\
-@var{nzmax} is ignored (here for compatability with Matlab) @* \n\
+@deftypefnx {Loadable Function} {@var{s} =} sparse (@var{i}, @var{j}, @var{sv}, @var{m}, @var{n}, @var{nzmax})\n\
+Create a sparse matrix given integer index vectors @var{i} and @var{j},\n\
+a 1-by-@code{nnz} vector of real of complex values @var{sv}, overall\n\
+dimensions @var{m} and @var{n} of the sparse matrix.  The argument\n\
+@code{nzmax} is ignored but accepted for compatability with @sc{Matlab}.\n\
 \n\
-        if multiple values are specified with the same @var{i},@var{j}\n\
-        position, the corresponding values in @var{s} will be added\n\
-   @end itemize\n\
+@strong{Note}: if multiple values are specified with the same\n\
+@var{i}, @var{j} indices, the corresponding values in @var{s} will\n\
+be added.\n\
+\n\
+@item The following usages are equivalent:\n\
 \n\
-@item The following usages are equivalent to (2) above:\n\
-   @itemize @w \n\
-@var{S} = sparse(@var{i},@var{j},@var{s},@var{m},@var{n})@*\n\
-@var{S} = sparse(@var{i},@var{j},@var{s},@var{m},@var{n},'summation')@*\n\
-@var{S} = sparse(@var{i},@var{j},@var{s},@var{m},@var{n},'sum')@*\n\
-   @end itemize\n\
-\n\
-@item @var{S} = sparse(@var{i},@var{j},@var{s},@var{m},@var{n},'unique')@*\n\
+@example\n\
+@group\n\
+s = sparse (i, j, s, m, n)\n\
+s = sparse (i, j, s, m, n, \"summation\")\n\
+s = sparse (i, j, s, m, n, \"sum\")\n\
+@end group\n\
+@end example\n\
 \n\
-   @itemize @w \n\
-same as (2) above, except that rather than adding,\n\
-if more than two values are specified for the same @var{i},@var{j}\n\
-position, then the last specified value will be kept\n\
-   @end itemize\n\
+@deftypefnx {Loadable Function} {@var{s} =} sparse (@var{i}, @var{j}, @var{s}, @var{m}, @var{n}, \"unique\")\n\
+Same as above, except that if more than two values are specified for the\n\
+same @var{i}, @var{j} indices, the last specified value will be used.\n\
 \n\
-@item @var{S}=  sparse(@var{i},@var{j},@var{sv})          uses @var{m}=max(@var{i}), @var{n}=max(@var{j})\n\
-\n\
-@item @var{S}=  sparse(@var{m},@var{n})            does sparse([],[],[],@var{m},@var{n},0)\n\
+@deftypefnx {Loadable Function} {@var{s} =} sparse (@var{i}, @var{j}, @var{sv})\n\
+Uses @code{@var{m} = max (@var{i})}, @code{@var{n} = max (@var{j})}\n\
 \n\
-@var{sv}, and @var{i} or @var{j} may be scalars, in\n\
-which case they are expanded to all have the same length\n\
-@end enumerate\n\
+@deftypefnx {Loadable Function} {@var{s} =} sparse (@var{m}, @var{n})\n\
+Equivalent to @code{sparse ([], [], [], @var{m}, @var{n}, 0)}\n\
+\n\
+If any of @var{sv}, @var{i} or @var{j} are scalars, they are expanded\n\
+to have a common size.\n\
 @seealso{full}\n\
 @end deftypefn")
 {
    octave_value retval;
    bool mutate = false;
 
    // WARNING: This function should always use constructions like
    //   retval = new octave_sparse_matrix (sm);
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -925,17 +925,17 @@ returns the original array @var{a}.\n\
   return do_permute (args, true, "ipermute");
 }
 
 DEFUN (length, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} length (@var{a})\n\
 Return the `length' of the object @var{a}.  For matrix objects, the\n\
 length is the number of rows or columns, whichever is greater (this\n\
-odd definition is used for compatibility with Matlab).\n\
+odd definition is used for compatibility with @sc{Matlab}).\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     {
       int len = args(0).length ();
 
@@ -2247,18 +2247,19 @@ eye (size ([1, 2; 3, 4])\n\
 \n\
 The optional argument @var{class}, allows @code{eye} to return an array of\n\
 the specified type, like\n\
 \n\
 @example\n\
 val = zeros (n,m, \"uint8\")\n\
 @end example\n\
 \n\
-For compatibility with @sc{Matlab}, calling @code{eye} with no arguments\n\
-is equivalent to calling it with an argument of 1.\n\
+Calling @code{eye} with no arguments is equivalent to calling it\n\
+with an argument of 1.  This odd definition is for compatibility\n\
+with @sc{Matlab}.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   oct_data_conv::data_type dt = oct_data_conv::dt_double;
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -290,41 +290,16 @@ clean_up_and_exit (int retval)
 {
   do_octave_atexit ();
 
   sysdep_cleanup ();
 
   exit (retval == EOF ? 0 : retval);
 }
 
-DEFCMD (casesen, args, ,
-  "-*- texinfo -*-\n\
-@deffn {Command} casesen arg\n\
-Provided for compatibility with Matlab, but does nothing.\n\
-@end deffn")
-{
-  octave_value_list retval;
-
-  int argc = args.length () + 1;
-
-  string_vector argv = args.make_argv ("casesen");
-
-  if (error_state)
-    return retval;
-
-  if (argc == 1 || (argc > 1 && argv[1] == "off"))
-    warning ("casesen: sorry, Octave is always case sensitive");
-  else if (argc > 1 && argv[1] == "on")
-    ; // ok.
-  else
-    print_usage ();
-
-  return retval;
-}
-
 DEFUN (quit, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} exit (@var{status})\n\
 @deftypefnx {Built-in Function} {} quit (@var{status})\n\
 Exit the current Octave session.  If the optional integer value\n\
 @var{status} is supplied, pass that value to the operating system as the\n\
 Octave's exit status.\n\
 @end deftypefn")
