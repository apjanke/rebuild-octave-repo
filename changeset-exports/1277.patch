# HG changeset patch
# User jwe
# Date 798755706 0
#      Mon Apr 24 20:35:06 1995 +0000
# Node ID db4f4009d6e8cef42a19d776b1e31e91c5d0880a
# Parent  cbdf7db9855476c5e882b57335ff93d458df7ea8
[project @ 1995-04-24 20:35:06 by jwe]

diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -748,24 +748,21 @@ return nonzero if S is a structure with 
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin == 2)
     {
       retval = 0.0;
-      if (args(0).is_map ())
+      if (args(0).is_map () && args(1).is_string ())
 	{
-	  if (args(1).is_string ())
-	    {
-	      Octave_map m = args(0).map_value ();
-	      char *s = args(1).string_value ();
-	      retval = (double) (s && m.contains (s));
-	    }
+	  char *s = args(1).string_value ();
+	  tree_constant tmp = args(0).lookup_map_element (s, 0, 1);
+	  retval = (double) tmp.is_defined ();
 	}
     }
   else
     print_usage ("struct_contains");
 
   return retval;
 }
 
diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <string.h>
 #include <iostream.h>
 #include <strstream.h>
 
 #include "tree-const.h"
 #include "user-prefs.h"
 #include "pager.h"
 #include "error.h"
 #include "gripes.h"
@@ -104,30 +105,65 @@ tree_constant::operator = (const tree_co
 	delete rep;
       rep = a.rep;
       rep->count++;
     }
   return *this;  
 }
 
 tree_constant
-tree_constant::lookup_map_element (SLList<char*>& list)
+tree_constant::lookup_map_element (const char *ref, int insert,
+				   int silent)
+{
+  tree_constant retval;
+
+  if (ref)
+    {
+      char *tmp = strsave (ref);
+
+      SLList<char *> list;
+
+      char *beg = tmp;
+      char *end = 0;
+      do
+	{
+	  end = strchr (beg, '.');
+	  if (end)
+	    *end = '\0';
+
+	  list.append (strsave (beg));
+	}
+      while (end && (beg = end + 1));
+
+      retval = lookup_map_element (list, insert, silent);
+
+      delete [] tmp;
+    }
+
+  return retval;
+}
+
+tree_constant
+tree_constant::lookup_map_element (SLList<char*>& list, int insert,
+				   int silent)
 {
   tree_constant retval;
 
   tree_constant_rep *tmp_rep = rep;
 
   Pix p = list.first ();
   while (p)
     {
       char *elt = list (p);
 
       list.next (p);
 
-      tree_constant tmp = tmp_rep->lookup_map_element (elt);
+      tree_constant tmp;
+
+      tmp = tmp_rep->lookup_map_element (elt, insert, silent);
 
       if (error_state)
 	break;
 
       tmp_rep = tmp.rep;
 
       if (! p)
 	retval = tmp;
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -250,20 +250,17 @@ public:
 
 // Does this constant correspond to a truth value?
 
   int is_true (void) const { return rep->is_true (); }
 
 // Is at least one of the dimensions of this constant zero?
 
   int is_empty (void) const
-    {
-      return ((! (is_magic_colon () || is_all_va_args () || is_unknown ()))
-	      && (rows () == 0 || columns () == 0));
-    }
+    { return rep->is_empty (); }
 
 // Are the dimensions of this constant zero by zero?
 
   int is_zero_by_zero (void) const
     {
       return ((! (is_magic_colon () || is_all_va_args () || is_unknown ()))
 	      && rows () == 0 && columns () == 0);
     } 
@@ -285,17 +282,21 @@ public:
   char *string_value (void) const
     { return rep->string_value (); }
 
   Range range_value (void) const
     { return rep->range_value (); }
 
   Octave_map map_value (void) const;
 
-  tree_constant lookup_map_element (SLList<char*>& list);
+  tree_constant lookup_map_element (const char *ref, int insert = 0,
+				    int silent = 0);
+
+  tree_constant lookup_map_element (SLList<char*>& list,
+				    int insert = 0, int silent = 0);
 
   ColumnVector vector_value (int force_string_conversion = 0,
 			     int force_vector_conversion = 0) const 
     { return rep->vector_value (); }
 
   ComplexColumnVector complex_vector_value (int force_string_conv = 0,
 					    int force_vec_conv = 0) const
     { return rep->complex_vector_value (); }
diff --git a/src/tc-rep.cc b/src/tc-rep.cc
--- a/src/tc-rep.cc
+++ b/src/tc-rep.cc
@@ -1076,32 +1076,32 @@ TC_REP::range_value (void) const
 Octave_map
 TC_REP::map_value (void) const
 {
   assert (type_tag == map_constant);
   return *a_map;
 }
 
 tree_constant&
-TC_REP::lookup_map_element (const char *name, int insert)
+TC_REP::lookup_map_element (const char *name, int insert, int silent)
 {
   static tree_constant retval;
 
   if (type_tag == map_constant)
     {
       Pix idx = a_map->seek (name);
 
       if (idx)
 	return a_map->contents (idx);
       else if (insert)
 	return (*a_map) [name];
-      else
+      else if (! silent)
 	error ("structure has no member `%s'", name);
     }
-  else
+  else if (! silent)
     error ("invalid structure access attempted");
 
   return retval;
 }
 
 // This could be made more efficient by doing all the work here rather
 // than relying on matrix_value() to do any possible type conversions.
 
diff --git a/src/tc-rep.h b/src/tc-rep.h
--- a/src/tc-rep.h
+++ b/src/tc-rep.h
@@ -171,25 +171,32 @@ private:
 	      || type_tag == range_constant);
     }
 
   int valid_as_scalar_index (void) const;
   int valid_as_zero_index (void) const;
 
   int is_true (void) const;
 
+  int is_empty (void) const
+    {
+      return ((! (is_magic_colon () || is_all_va_args () || is_unknown ()))
+	      && (rows () == 0 || columns () == 0));
+    }
+
   double double_value (int force_string_conversion = 0) const;
   Matrix matrix_value (int force_string_conversion = 0) const;
   Complex complex_value (int force_string_conversion = 0) const;
   ComplexMatrix complex_matrix_value (int force_string_conversion = 0) const;
   char *string_value (void) const;
   Range range_value (void) const;
   Octave_map map_value (void) const;
 
-  tree_constant& lookup_map_element (const char *name, int insert = 0);
+  tree_constant& lookup_map_element (const char *name, int insert = 0,
+				     int silent = 0);
 
   ColumnVector vector_value (int force_string_conversion = 0,
 			     int force_vector_conversion = 0) const;
 
   ComplexColumnVector complex_vector_value (int force_string_conv = 0,
 					    int force_vec_conv = 0) const;
 
   tree_constant convert_to_str (void) const;
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -219,32 +219,55 @@ a function.")
   int nargin = args.length ();
 
   if (nargin != 1)
     {
       print_usage ("exist");
       return retval;
     }
 
-  char *name = args(0).string_value ();
+  char *name = strsave (args(0).string_value ());
 
   if (error_state)
     {
       error ("exist: expecting string argument");
+      delete [] name;
       return retval;
     }
 
+  char *struct_elts = strchr (name, '.');
+  if (struct_elts)
+    {
+      *struct_elts = '\0';
+      struct_elts++;
+    }
+
   symbol_record *sr = curr_sym_tab->lookup (name, 0, 0);
   if (! sr)
     sr = global_sym_tab->lookup (name, 0, 0);
 
   retval = 0.0;
 
   if (sr && sr->is_variable () && sr->is_defined ())
-    retval = 1.0;
+    {
+      retval = 1.0;
+      tree_fvc *def = sr->def ();
+      if (struct_elts)
+	{
+	  retval = 0.0;
+	  if (def->is_constant ())
+	    {
+	      tree_constant *tmp = (tree_constant *) def;
+	      tree_constant ult;
+	      ult = tmp->lookup_map_element (struct_elts, 0, 1);
+	      if (ult.is_defined ())
+		retval = 1.0;
+	    }
+	}
+    }
   else if (sr && sr->is_function ())
     retval = 2.0;
   else
     {
       char *path = fcn_file_in_path (name);
       if (path)
 	{
 	  delete [] path;
@@ -253,16 +276,18 @@ a function.")
       else
 	{
 	  struct stat buf;
 	  if (stat (name, &buf) == 0 && S_ISREG (buf.st_mode))
 	    retval = 2.0;
 	}
     }
 
+  delete [] name;
+
   return retval;
 }
 
 // XXX FIXME XXX -- should these really be here?
 
 static char *
 octave_home (void)
 {
