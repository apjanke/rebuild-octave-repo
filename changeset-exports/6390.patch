# HG changeset patch
# User jwe
# Date 1173291089 0
#      Wed Mar 07 18:11:29 2007 +0000
# Node ID 334499d75c5c8dc8423777e4166e83b9aefad925
# Parent  f427b33aeb4c4e756bfb36183e3183f4bdfc3046
[project @ 2007-03-07 18:11:28 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1678,17 +1678,17 @@ ComplexMatrix::utsolve (MatrixType &matt
 	{
 	  octave_idx_type b_nc = b.cols ();
 	  rcond = 1.;
 	  info = 0;
 
 	  if (typ == MatrixType::Permuted_Upper)
 	    {
 	      (*current_liboctave_error_handler)
-		("Permuted triangular matrix not implemented");
+		("permuted triangular matrix not implemented");
 	    }
 	  else
 	    {
 	      const Complex *tmp_data = fortran_vec ();
 
 	      if (calc_cond)
 		{
 		  char norm = '1';
@@ -1785,17 +1785,17 @@ ComplexMatrix::ltsolve (MatrixType &matt
 	{
 	  octave_idx_type b_nc = b.cols ();
 	  rcond = 1.;
 	  info = 0;
 
 	  if (typ == MatrixType::Permuted_Lower)
 	    {
 	      (*current_liboctave_error_handler)
-		("Permuted triangular matrix not implemented");
+		("permuted triangular matrix not implemented");
 	    }
 	  else
 	    {
 	      const Complex *tmp_data = fortran_vec ();
 
 	      if (calc_cond)
 		{
 		  char norm = '1';
@@ -3763,32 +3763,40 @@ operator * (const ComplexMatrix& m, cons
 	  retval.resize (nr, a_nc);
 	  Complex *c = retval.fortran_vec ();
 
 	  if (a_nc == 1)
 	    {
 	      if (nr == 1)
 		F77_FUNC (xzdotu, XZDOTU) (nc, m.data (), 1, a.data (), 1, *c);
 	      else
-		F77_XFCN (zgemv, ZGEMV, (F77_CONST_CHAR_ARG2 ("N", 1),
-					 nr, nc, 1.0,  m.data (), ld,
-					 a.data (), 1, 0.0, c, 1
-					 F77_CHAR_ARG_LEN (1)));
+		{
+		  F77_XFCN (zgemv, ZGEMV, (F77_CONST_CHAR_ARG2 ("N", 1),
+					   nr, nc, 1.0,  m.data (), ld,
+					   a.data (), 1, 0.0, c, 1
+					   F77_CHAR_ARG_LEN (1)));
+
+		  if (f77_exception_encountered)
+		    (*current_liboctave_error_handler)
+		      ("unrecoverable error in zgemv");
+		}
 	    }
 	  else
-	    F77_XFCN (zgemm, ZGEMM, (F77_CONST_CHAR_ARG2 ("N", 1),
-				     F77_CONST_CHAR_ARG2 ("N", 1),
-				     nr, a_nc, nc, 1.0, m.data (),
-				     ld, a.data (), lda, 0.0, c, nr
-				     F77_CHAR_ARG_LEN (1)
-				     F77_CHAR_ARG_LEN (1)));
-
-	  if (f77_exception_encountered)
-	    (*current_liboctave_error_handler)
-	      ("unrecoverable error in zgemm");
+	    {
+	      F77_XFCN (zgemm, ZGEMM, (F77_CONST_CHAR_ARG2 ("N", 1),
+				       F77_CONST_CHAR_ARG2 ("N", 1),
+				       nr, a_nc, nc, 1.0, m.data (),
+				       ld, a.data (), lda, 0.0, c, nr
+				       F77_CHAR_ARG_LEN (1)
+				       F77_CHAR_ARG_LEN (1)));
+
+	      if (f77_exception_encountered)
+		(*current_liboctave_error_handler)
+		  ("unrecoverable error in zgemm");
+	    }
 	}
     }
 
   return retval;
 }
 
 // FIXME -- it would be nice to share code among the min/max
 // functions below.
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,13 @@
 2007-03-07  John W. Eaton  <jwe@octave.org>
 
+	* dMatrix.cc, CMatrix.cc (operator *): Only check
+	f77_exception_encountered immediately after calls that use F77_XFCN.
+
 	* Array.cc (assign1 (Array<LT>&, const Array<RT>&, const LT&)):
 	Only allow resizing empty LHS if it is 0x0.
 
 	* Array.cc (Array<T>::maybe_delete_elements (Array<idx_vector>&,
 	const T&)): Handle case of more indices than dimensions.
 	(assign (Array<LT>&, const Array<RT>&, const LT&)): Allow more
 	cases to be handled by assignN.
 	(assignN (Array<LT>&, const Array<RT>&, const LT&)):
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -1340,17 +1340,17 @@ Matrix::utsolve (MatrixType &mattype, co
 	{
 	  octave_idx_type b_nc = b.cols ();
 	  rcond = 1.;
 	  info = 0;
 
 	  if (typ == MatrixType::Permuted_Upper)
 	    {
 	      (*current_liboctave_error_handler)
-		("Permuted triangular matrix not implemented");
+		("permuted triangular matrix not implemented");
 	    }
 	  else
 	    {
 	      const double *tmp_data = fortran_vec ();
 
 	      if (calc_cond)
 		{
 		  char norm = '1';
@@ -1446,17 +1446,17 @@ Matrix::ltsolve (MatrixType &mattype, co
 	{
 	  octave_idx_type b_nc = b.cols ();
 	  rcond = 1.;
 	  info = 0;
 
 	  if (typ == MatrixType::Permuted_Lower)
 	    {
 	      (*current_liboctave_error_handler)
-		("Permuted triangular matrix not implemented");
+		("permuted triangular matrix not implemented");
 	    }
 	  else
 	    {
 	      const double *tmp_data = fortran_vec ();
 
 	      if (calc_cond)
 		{
 		  char norm = '1';
@@ -3140,32 +3140,40 @@ operator * (const Matrix& m, const Matri
 	  retval.resize (nr, a_nc);
 	  double *c = retval.fortran_vec ();
 
 	  if (a_nc == 1)
 	    {
 	      if (nr == 1)
 		F77_FUNC (xddot, XDDOT) (nc, m.data (), 1, a.data (), 1, *c);
 	      else
-		F77_XFCN (dgemv, DGEMV, (F77_CONST_CHAR_ARG2 ("N", 1),
-					 nr, nc, 1.0,  m.data (), ld,
-					 a.data (), 1, 0.0, c, 1
-					 F77_CHAR_ARG_LEN (1)));
+		{
+		  F77_XFCN (dgemv, DGEMV, (F77_CONST_CHAR_ARG2 ("N", 1),
+					   nr, nc, 1.0,  m.data (), ld,
+					   a.data (), 1, 0.0, c, 1
+					   F77_CHAR_ARG_LEN (1)));
+
+		  if (f77_exception_encountered)
+		    (*current_liboctave_error_handler)
+		      ("unrecoverable error in dgemv");
+		}
             }
 	  else
-	    F77_XFCN (dgemm, DGEMM, (F77_CONST_CHAR_ARG2 ("N", 1),
-				     F77_CONST_CHAR_ARG2 ("N", 1),
-				     nr, a_nc, nc, 1.0, m.data (),
-				     ld, a.data (), lda, 0.0, c, nr
-				     F77_CHAR_ARG_LEN (1)
-				     F77_CHAR_ARG_LEN (1)));
-
-	  if (f77_exception_encountered)
-	    (*current_liboctave_error_handler)
-	      ("unrecoverable error in dgemm");
+	    {
+	      F77_XFCN (dgemm, DGEMM, (F77_CONST_CHAR_ARG2 ("N", 1),
+				       F77_CONST_CHAR_ARG2 ("N", 1),
+				       nr, a_nc, nc, 1.0, m.data (),
+				       ld, a.data (), lda, 0.0, c, nr
+				       F77_CHAR_ARG_LEN (1)
+				       F77_CHAR_ARG_LEN (1)));
+
+	      if (f77_exception_encountered)
+		(*current_liboctave_error_handler)
+		  ("unrecoverable error in dgemm");
+	    }
 	}
     }
 
   return retval;
 }
 
 // FIXME -- it would be nice to share code among the min/max
 // functions below.
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,16 @@
 2007-03-07  John W. Eaton  <jwe@octave.org>
 
+	* plot/mesh.m: Call newplot before doing anything.
+
+	* plot/__uiobject_draw_axes__.m: Send "e\n" at end of data, not
+	just "e".  Only flush plot stream once.
+	From Daniel J Sebald <daniel.sebald@ieee.org>.
+
 	* strings/blanks.m: Omit first index in assignment.
 
 2007-03-07  Paul Kienzle  <pkienzle@users.sf.net>
 
 	* set/setdiff.m: Some code cleanup and a fix for setdiff on rows.
 
 2007-03-06  David Bateman  <dbateman@free.fr>
 	    John W. Eaton  <jwe@octave.org>
diff --git a/scripts/plot/__uiobject_adopt__.m b/scripts/plot/__uiobject_adopt__.m
--- a/scripts/plot/__uiobject_adopt__.m
+++ b/scripts/plot/__uiobject_adopt__.m
@@ -28,17 +28,17 @@ function s = __uiobject_adopt__ (parent,
 
   if (nargin == 2)
     obj = get (parent);
     if (! isempty (obj))
       kids = obj.children;
       ## Put this child at the end of the list.  If it is already in
       ## the list, move it.
       kids(kids == child) = [];
-      kids = [kids, child];
+      kids = [kids, child]
       set (parent, "children", kids);
     else
       error ("__uiobject_adopt__: expecting parent to be a handle");
     endif
   else
     print_usage ();
   endif
 
diff --git a/scripts/plot/__uiobject_draw_axes__.m b/scripts/plot/__uiobject_draw_axes__.m
--- a/scripts/plot/__uiobject_draw_axes__.m
+++ b/scripts/plot/__uiobject_draw_axes__.m
@@ -637,17 +637,16 @@ function __uiobject_draw_axes__ (h, plot
       else
 	fputs (plot_stream, "set key nobox;\n");
       endif
     else
       fputs (plot_stream, "unset key;\n");
     endif
 
     fputs (plot_stream, "set style data lines;\n");
-    fflush (plot_stream);
 
     if (! use_gnuplot_for_images)
       for i = 1:ximg_data_idx
 	view_fcn (xlim, ylim, ximg_data{i}, view_zoom, view_cmd);
       endfor
     endif
 
     if (have_data)
@@ -683,23 +682,21 @@ function __uiobject_draw_axes__ (h, plot
 	      tmp = data{i};
 	      nc = columns (tmp);
 	      for j = 1:3:nc
 		fprintf (plot_stream, "%g %g %g\n", tmp(:,j:j+2)');
 		fputs (plot_stream, "\n");
 	      endfor
 	    endif
 	  endif
-	  fputs (plot_stream, "e");
-	  fflush (plot_stream);
+	  fputs (plot_stream, "e\n");
 	endif
       endfor
     endif
 
-    fputs (plot_stream, "\n");
     fflush (plot_stream);
 
   else
     print_usage ();
   endif    
 
 endfunction
 
diff --git a/scripts/plot/__uiobject_make_handle__.in b/scripts/plot/__uiobject_make_handle__.in
--- a/scripts/plot/__uiobject_make_handle__.in
+++ b/scripts/plot/__uiobject_make_handle__.in
@@ -25,17 +25,17 @@
 ## Author: jwe
 
 function h = __uiobject_make_handle__ (s)
 
   __uiobject_globals__;
 
   if (nargin == 1)
     idx = __uiobject_alloc__ ();
-    h = __uiobject_get_handle__ ();
+    h = __uiobject_get_handle__ ()
     __uiobject_list__(idx).handle = h;
     __uiobject_list__(idx).object = s;
     __request_drawnow__ ();
   else
     print_usage ();
   endif
 
 endfunction
diff --git a/scripts/plot/mesh.m b/scripts/plot/mesh.m
--- a/scripts/plot/mesh.m
+++ b/scripts/plot/mesh.m
@@ -27,16 +27,18 @@
 ## to different @var{y} values.
 ## @seealso{meshgrid, contour}
 ## @end deftypefn
 
 ## Author: jwe
 
 function h = mesh (x, y, z)
 
+  newplot ();
+
   if (nargin == 1)
     z = x;
     if (ismatrix (z))
       [nr, nc] = size (z);
       x = 1:nc;
       y = (1:nr)';
     else
       error ("mesh: argument must be a matrix");
diff --git a/src/DLD-FUNCTIONS/urlwrite.cc b/src/DLD-FUNCTIONS/urlwrite.cc
--- a/src/DLD-FUNCTIONS/urlwrite.cc
+++ b/src/DLD-FUNCTIONS/urlwrite.cc
@@ -148,16 +148,19 @@ urlget (const std::string& url, const st
     }
 
   // Define our callback to get called when there's data to be written.
   curl_easy_setopt (curl, CURLOPT_WRITEFUNCTION, write_data);
 
   // Set a pointer to our struct to pass to the callback.
   curl_easy_setopt (curl, CURLOPT_WRITEDATA, static_cast<void*> (&stream));
 
+  // Follow redirects.
+  curl_easy_setopt (curl, CURLOPT_FOLLOWLOCATION, 1);
+
   curl_easy_setopt (curl, CURLOPT_NOPROGRESS, false);
   curl_easy_setopt (curl, CURLOPT_PROGRESSFUNCTION, progress_func);
   curl_easy_setopt (curl, CURLOPT_PROGRESSDATA, url.c_str ());
   curl_easy_setopt (curl, CURLOPT_FAILONERROR, true);
 
   // Switch on full protocol/debug output
   // curl_easy_setopt(curl, CURLOPT_VERBOSE, true);
 
