# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1502611698 -7200
#      Sun Aug 13 10:08:18 2017 +0200
# Node ID 8fa415ff2cb34371e339b9f8313a14abec8b7f86
# Parent  3b81ef7b562c7eec70a9ae9aa5d247b6fa57c811
reload editor tab when related file is renamed in file browser (bug #43922)

* files-dock-widget.cc (contextmenu_rename): emit remove signal (for editor)
  before renaming a file and another signal when the was renamed for reloading
  the new file

* files-dock-widget.h: new signal file_renamed_signal

* file-editor.cc (file_editor, check_closing): renamed the flag for
  preventing editor from getting focus;
  (handle_file_remove): always check old file name if it is open in the editor
  and close it; for renaming the file, store the new name and the encoding;
  (handle_file_renamed): new slot for the signal when the file is renamed,
  which reloads the file under its new name

* file-editor.h: new slot handle_file_renamed, renamed flag for preventing
  focus, new string list for the file and related encodings that have to be
  reloaded after renaming

* main-window.cc (construct): connect new file browser signal for a
  renamed file with the related new slot of the editor

diff --git a/libgui/src/files-dock-widget.cc b/libgui/src/files-dock-widget.cc
--- a/libgui/src/files-dock-widget.cc
+++ b/libgui/src/files-dock-widget.cc
@@ -660,17 +660,19 @@ files_dock_widget::contextmenu_rename (b
         = QInputDialog::getText (this, tr ("Rename file/directory"),
                                  tr ("Rename file/directory:\n")
                                  + old_name + tr ("\n to: "),
                                  QLineEdit::Normal, old_name, &ok);
       if (ok && new_name.length () > 0)
         {
           new_name = path.absolutePath () + '/' + new_name;
           old_name = path.absolutePath () + '/' + old_name;
+          emit file_remove_signal (old_name, new_name);  // editor: close old
           path.rename (old_name, new_name);
+          emit file_renamed_signal ();  // editor: load new file
           _file_system_model->revert ();
         }
     }
 
 }
 
 void
 files_dock_widget::contextmenu_delete (bool)
diff --git a/libgui/src/files-dock-widget.h b/libgui/src/files-dock-widget.h
--- a/libgui/src/files-dock-widget.h
+++ b/libgui/src/files-dock-widget.h
@@ -130,16 +130,19 @@ signals:
   void run_file_signal (const QFileInfo& info);
 
   /** Emitted, whenever wants to search for a file . */
   void find_files_signal (const QString& startdir);
 
   /** Emitted, whenever the user removes or renames a file. */
   void file_remove_signal (const QString& old_name, const QString& new_name);
 
+  /** Emitted, when a file or directory is renamed. */
+  void file_renamed_signal (void);
+
 private:
   void process_new_file (const QString& parent_name);
   void process_new_dir (const QString& parent_name);
   void process_set_current_dir (const QString& parent_name);
   void process_find_files (const QString& dir_name);
 
   /** set a new directory or open a file **/
   void display_directory (const QString& dir, bool set_octave_dir = true);
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -57,17 +57,17 @@ file_editor::file_editor (QWidget *p)
 
   // set action that are later added by the main window to null,
   // preventing access to them when they are still undefined
   _undo_action = nullptr;
   _copy_action = nullptr;
   _paste_action = nullptr;
   _selectall_action = nullptr;
   _closed = false;
-  _external_close_request = false;
+  _no_focus = false;
 
   construct ();
 
   // actions that should also be available in the find dialog
   _fetab_actions << _find_next_action;
   _fetab_actions << _find_previous_action;
 
   setVisible (false);
@@ -149,17 +149,17 @@ file_editor::check_closing (void)
     }
 
   return true;
 }
 
 void
 file_editor::focus (void)
 {
-  if (_external_close_request)
+  if (_no_focus)
     return;  // No focus for the editor if external open/close request
 
   octave_dock_widget::focus ();
 
   // set focus to current tab
   QWidget *fileEditorTab = _tab_widget->currentWidget ();
   if (fileEditorTab)
     emit fetab_set_focus (fileEditorTab);
@@ -577,42 +577,71 @@ file_editor::handle_update_breakpoint_ma
 }
 
 void
 file_editor::handle_edit_file_request (const QString& file)
 {
   request_open_file (file);
 }
 
+
+// Slot used for signals indicating that a file was changed/rename or
+// is going to be deleted/renamed
 void
 file_editor::handle_file_remove (const QString& old_name,
                                  const QString& new_name)
 {
+  // Is old file open?
+  file_editor_tab *editor_tab
+    = static_cast<file_editor_tab *> (find_tab_widget (old_name));
 
-  if (! old_name.isEmpty () && new_name.isEmpty ())
+  if (editor_tab)
     {
-      // Only old name is set, no new name -> close old name
-
-      // Have all file editor tabs signal what their filenames are.
-      editor_tab_map.clear ();
-      emit fetab_file_name_query (nullptr);
+      // Yes, close it silently
+      _no_focus = true;  // Remember for not focussing editor
+      editor_tab->file_has_changed (QString (), true);  // Close the tab
+      _no_focus = false;  // Back to normal
 
-      // Is old file open?
-      file_editor_tab *editor_tab
-        = static_cast<file_editor_tab *> (find_tab_widget (old_name));
+      if (! new_name.isEmpty ())
+        {
+          // New name is set, store new name and its encoding
+          // loading this file after the renaming is complete.
+          // The new name is not signaled after the renaming for being able
+          // to use this construct for renaming a whole directory, too.
+
+          _tmp_closed_files = QStringList ();
+          _tmp_closed_files << new_name;
 
-      if (editor_tab)
-        {
-          _external_close_request = true;  // Remember for not focussing editor
-          editor_tab->file_has_changed (QString (), true);  // Close the tab
-          _external_close_request = false;  // Back to normal
+          // Get and store the related encoding
+          for (editor_tab_map_const_iterator p = editor_tab_map.begin ();
+               p != editor_tab_map.end (); p++)
+            {
+              if (editor_tab == p->second.fet_ID)
+                {
+                  _tmp_closed_files << p->second.encoding;
+                  break;
+                }
+            }
         }
     }
 }
 
+
+// Slot for signal indicating that a file was renamed
+void
+file_editor::handle_file_renamed ()
+{
+  _no_focus = true;  // Remember for not focussing editor
+  for (int i = 0; i < _tmp_closed_files.count (); i = i + 2)
+    request_open_file (_tmp_closed_files.at (i),
+                       _tmp_closed_files.at (i+1));
+  _no_focus = false;  // Back to normal focus
+}
+
+
 void
 file_editor::do_undo ()
 {
   if (editor_tab_has_focus ())
     emit fetab_scintilla_command (_tab_widget->currentWidget (),
                                   QsciScintillaBase::SCI_UNDO);
 }
 
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -277,16 +277,17 @@ public slots:
   void handle_delete_debugger_pointer_request (const QString& file, int line);
   void handle_update_breakpoint_marker_request (bool insert,
                                                 const QString& file, int line,
                                                 const QString& cond);
 
   void handle_edit_file_request (const QString& file);
 
   void handle_file_remove (const QString&, const QString&);
+  void handle_file_renamed (void);
 
   // Tells the editor to react on changed settings.
   void notice_settings (const QSettings *settings);
 
   void set_shortcuts ();
 
   void handle_visibility (bool visible);
 
@@ -459,18 +460,21 @@ private:
 
   QList<QAction*> _fetab_actions;
 
   file_editor_tab_widget *_tab_widget;
 
   int _marker_breakpoint;
 
   bool _closed;
-  bool _external_close_request;
+  bool _no_focus;
 
   enum { MaxMRUFiles = 10 };
   QMenu *_mru_file_menu;
   QAction *_mru_file_actions[MaxMRUFiles];
   QStringList _mru_files;
   QStringList _mru_files_encodings;
+
+  // List of temporarily closed files while they are renamed
+  QStringList _tmp_closed_files;
 };
 
 #endif
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -1814,16 +1814,18 @@ main_window::construct (void)
                                                               const QString&,
                                                               int,
                                                               const QString&)));
 
       connect (file_browser_window,
                SIGNAL (file_remove_signal (const QString&, const QString&)),
                editor_window,
                SLOT (handle_file_remove (const QString&, const QString&)));
+      connect (file_browser_window, SIGNAL (file_renamed_signal (void)),
+               editor_window, SLOT (handle_file_renamed (void)));
 #endif
 
       octave_link::post_event (this,
                                &main_window::resize_command_window_callback);
 
       configure_shortcuts ();
     }
 }
