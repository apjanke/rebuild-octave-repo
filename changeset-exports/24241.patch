# HG changeset patch
# User Julien Bect <jbect@users.sourceforge.net>
# Date 1500615164 -7200
#      Fri Jul 21 07:32:44 2017 +0200
# Node ID ca25f6e48ca5d5f49d62997b0e27a3c6ca34e6ff
# Parent  939925a782e873e9b068971c2f4f086c8f2288fb
jit: Convert llvm::Function::arg_iterator to pointer explicitely

* libinterp/corefcn/jit-typeinfo.cc: Convert llvm::Function::arg_iterator to
  pointer explicitely.  Implicit conversion has been removed in LLVM 3.8.0.
* libinterp/corefcn/pt-jit.cc: Idem.

diff --git a/libinterp/parse-tree/jit-typeinfo.cc b/libinterp/parse-tree/jit-typeinfo.cc
--- a/libinterp/parse-tree/jit-typeinfo.cc
+++ b/libinterp/parse-tree/jit-typeinfo.cc
@@ -720,36 +720,36 @@ namespace octave
     // be much bigger than 4
     llvm::Function::arg_iterator iter = llvm_function->arg_begin ();
     if (sret ())
       ++iter;
 
     for (size_t i = 0; i < idx; ++i, ++iter);
 
     if (args[idx]->pointer_arg (call_conv))
-      return builder.CreateLoad (iter);
+      return builder.CreateLoad (&*iter);
 
-    return iter;
+    return &*iter;
   }
 
   void
   jit_function::do_return (llvm::IRBuilderD& builder, llvm::Value *rval,
                            bool verify)
   {
     assert (! rval == ! mresult);
 
     if (rval)
       {
         jit_type::convert_fn convert = mresult->pack (call_conv);
         if (convert)
           rval = convert (builder, rval);
 
         if (sret ())
           {
-            builder.CreateStore (rval, llvm_function->arg_begin ());
+            builder.CreateStore (rval, &*(llvm_function->arg_begin ()));
             builder.CreateRetVoid ();
           }
         else
           builder.CreateRet (rval);
       }
     else
       builder.CreateRetVoid ();
 
diff --git a/libinterp/parse-tree/pt-jit.cc b/libinterp/parse-tree/pt-jit.cc
--- a/libinterp/parse-tree/pt-jit.cc
+++ b/libinterp/parse-tree/pt-jit.cc
@@ -1325,17 +1325,17 @@ void
     function = llvm::Function::Create (ft, llvm::Function::ExternalLinkage,
                                        "foobar", module);
 
     try
       {
         prelude = llvm::BasicBlock::Create (context, "prelude", function);
         builder.SetInsertPoint (prelude);
 
-        llvm::Value *arg = function->arg_begin ();
+        llvm::Value *arg = &*(function->arg_begin ());
         for (size_t i = 0; i < argument_vec.size (); ++i)
           {
             llvm::Value *loaded_arg = builder.CreateConstInBoundsGEP1_32 (arg, i);
             arguments[argument_vec[i].first] = loaded_arg;
           }
 
         convert (blocks, constants);
       }
