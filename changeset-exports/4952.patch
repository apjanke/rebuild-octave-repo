# HG changeset patch
# User jwe
# Date 1093999746 0
#      Wed Sep 01 00:49:06 2004 +0000
# Node ID bfd57b466752bbf2f407154b7a07b73a0f00895c
# Parent  0a21e1bf18c4b2c2aab3f5e32e90d2e15790ca0f
[project @ 2004-09-01 00:49:05 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,29 @@
+2004-08-31  John W. Eaton  <jwe@octave.org>
+
+	* oct-inttypes.h (pow): Args now const reference.
+	(octave_int<T>::operator *=, octave_int<T>::operator /=,
+	octave_int<T>::operator <<=, octave_int<T>::operator >>=):
+	New member functions.
+	(OCTAVE_INT_BITSHIFT_OP): Delete macro.
+	(operator >> (const octave_int<T1>& x, const T2& y)):
+	Define in terms of >>=.
+	(operator << (const octave_int<T1>& x, const T2& y)):
+	Define in terms of <<=.
+	(bitshift): Operate on octave_int<T> objects, not the values, so
+	we get proper saturation properties.
+
+2004-08-31  David Bateman  <dbateman@free.fr>
+
+	* oct-inttypes.h (pow (constT, T)): New template.
+
+	* int8NDArray.cc, int16NDArray.cc, int32NDArray.cc, uint8NDArray.cc, 
+	uint16NDArray.cc, uint32NDArray.cc: Instantiate power function.
+
 2004-08-31  John W. Eaton  <jwe@octave.org>
 
 	* oct-inttypes.h (octave_int::byte_size): New function.
 
 2004-08-31  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (EXTRAS): Add intNDArray.cc to the list.
 
diff --git a/liboctave/int16NDArray.cc b/liboctave/int16NDArray.cc
--- a/liboctave/int16NDArray.cc
+++ b/liboctave/int16NDArray.cc
@@ -30,16 +30,18 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "int16NDArray.h"
 
 #include "intNDArray.cc"
 
 template class intNDArray<octave_int16>;
 
+template octave_int16 pow (const octave_int16& a, const octave_int16& b);
+
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_int16>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_int16>& a);
 
diff --git a/liboctave/int32NDArray.cc b/liboctave/int32NDArray.cc
--- a/liboctave/int32NDArray.cc
+++ b/liboctave/int32NDArray.cc
@@ -30,16 +30,18 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "int32NDArray.h"
 
 #include "intNDArray.cc"
 
 template class intNDArray<octave_int32>;
 
+template octave_int32 pow (const octave_int32& a, const octave_int32& b);
+
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_int32>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_int32>& a);
 
diff --git a/liboctave/int8NDArray.cc b/liboctave/int8NDArray.cc
--- a/liboctave/int8NDArray.cc
+++ b/liboctave/int8NDArray.cc
@@ -30,16 +30,18 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "int8NDArray.h"
 
 #include "intNDArray.cc"
 
 template class intNDArray<octave_int8>;
 
+template octave_int8 pow (const octave_int8& a, const octave_int8& b);
+
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_int8>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_int8>& a);
 
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -262,29 +262,96 @@ public:
   octave_int<T>& operator -= (const octave_int<T>& x)
   {
     double t = static_cast<double> (value ());
     double tx = static_cast<double> (x.value ());
     ival = OCTAVE_INT_FIT_TO_RANGE (t - tx, T);
     return *this;
   }
 
+  octave_int<T>& operator *= (const octave_int<T>& x)
+  {
+    double t = static_cast<double> (value ());
+    double tx = static_cast<double> (x.value ());
+    ival = OCTAVE_INT_FIT_TO_RANGE (t * tx, T);
+    return *this;
+  }
+
+  octave_int<T>& operator /= (const octave_int<T>& x)
+  {
+    double t = static_cast<double> (value ());
+    double tx = static_cast<double> (x.value ());
+    ival = OCTAVE_INT_FIT_TO_RANGE (t / tx, T);
+    return *this;
+  }
+
+  template <class T2>
+  octave_int<T>& operator <<= (const T2& x)
+  {
+    ival = ((ival << x) > std::numeric_limits<T>::max ()) ? 0 : (ival << x);
+    return *this;
+  }
+
+  template <class T2>
+  octave_int<T>& operator >>= (const T2& x)
+  {
+    ival >>= x;
+    return *this;
+  }
+
   octave_int<T> min (void) const { return std::numeric_limits<T>::min (); }
   octave_int<T> max (void) const { return std::numeric_limits<T>::max (); }
 
   static int nbits (void) { return sizeof (T) * CHAR_BIT; }
 
   static int byte_size (void) { return sizeof(T); }
 
 private:
 
   T ival;
 };
 
 template <class T>
+T
+pow (const T& a, const T& b)
+{
+  T retval;
+
+  T zero = T (0);
+  T one = T (1);
+
+  if (b == zero)
+    retval = one;
+  else if (b < zero)
+    retval = zero;
+  else
+    {
+      T a_val = a;
+      T b_val = b;
+
+      retval = a;
+
+      b_val -= 1;
+
+      while (b_val)
+	{
+	  if (b_val & one)
+	    retval = retval * a_val;
+
+	  b_val = b_val >> 1;
+
+	  if (b_val > zero)
+	    a_val = a_val * a_val;
+	}
+    }
+
+  return retval;
+}
+
+template <class T>
 std::ostream&
 operator << (std::ostream& os, const octave_int<T>& ival)
 {
   os << ival.value ();
   return os;
 }
 
 template <class T>
@@ -332,37 +399,41 @@ OCTAVE_INT_BIN_OP(/)
   { \
     return x.value () OP y.value (); \
   }
 
 OCTAVE_INT_BITCMP_OP (&)
 OCTAVE_INT_BITCMP_OP (|)
 OCTAVE_INT_BITCMP_OP (^)
 
-#define OCTAVE_INT_BITSHIFT_OP(OP) \
- \
-  template <class T1, class T2> \
-  octave_int<T1> \
-  operator OP (const octave_int<T1>& x, const T2& y) \
-  { \
-    return ((x.value () OP y) > std::numeric_limits<T1>::max ()) ? 0 : (x.value () OP y); \
-  }
+template <class T1, class T2>
+octave_int<T1>
+operator << (const octave_int<T1>& x, const T2& y)
+{
+  T1 retval = x;
+  return retval <<= y;
+}
 
-OCTAVE_INT_BITSHIFT_OP (<<)
-OCTAVE_INT_BITSHIFT_OP (>>)
+template <class T1, class T2>
+octave_int<T1>
+operator >> (const octave_int<T1>& x, const T2& y)
+{
+  T1 retval = x;
+  return retval >>= y;
+}
 
 template <class T>
 octave_int<T>
 bitshift (const octave_int<T>& a, int n,
 	  const octave_int<T>& mask = std::numeric_limits<T>::max ())
 {
   if (n > 0)
-    return (a.value () << n) & mask.value ();
+    return (a << n) & mask;
   else if (n < 0)
-    return (a.value () >> -n) & mask.value ();
+    return (a >> -n) & mask;
   else
     return a;
 }
 
 #define OCTAVE_INT_CMP_OP(OP) \
  \
   template <class T1, class T2> \
   bool \
diff --git a/liboctave/uint16NDArray.cc b/liboctave/uint16NDArray.cc
--- a/liboctave/uint16NDArray.cc
+++ b/liboctave/uint16NDArray.cc
@@ -30,16 +30,18 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "uint16NDArray.h"
 
 #include "intNDArray.cc"
 
 template class intNDArray<octave_uint16>;
 
+template octave_uint16 pow (const octave_uint16& a, const octave_uint16& b);
+
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_uint16>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_uint16>& a);
 
diff --git a/liboctave/uint32NDArray.cc b/liboctave/uint32NDArray.cc
--- a/liboctave/uint32NDArray.cc
+++ b/liboctave/uint32NDArray.cc
@@ -30,16 +30,18 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "uint32NDArray.h"
 
 #include "intNDArray.cc"
 
 template class intNDArray<octave_uint32>;
 
+template octave_uint32 pow (const octave_uint32& a, const octave_uint32& b);
+
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_uint32>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_uint32>& a);
 
diff --git a/liboctave/uint8NDArray.cc b/liboctave/uint8NDArray.cc
--- a/liboctave/uint8NDArray.cc
+++ b/liboctave/uint8NDArray.cc
@@ -30,16 +30,18 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include "uint8NDArray.h"
 
 #include "intNDArray.cc"
 
 template class intNDArray<octave_uint8>;
 
+template octave_uint8 pow (const octave_uint8& a, const octave_uint8& b);
+
 template
 std::ostream&
 operator << (std::ostream& os, const intNDArray<octave_uint8>& a);
 
 template
 std::istream&
 operator >> (std::istream& is, intNDArray<octave_uint8>& a);
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,31 @@
+2004-08-31  David Bateman  <dbateman@free.fr>
+
+	* OPERATORS/op-int.h (ss_pow, ms_el_pow, mm_el_pow): New power 
+	functions.
+	(sm_el_pow): Return correct type.
+	(OCTAVE_SS_POW_OPS, OCTAVE_SM_POW_OPS, OCTAVE_MS_POW_OPS,
+	OCTAVE_MM_POW_OPS): New macros to define the power operator over
+	integer types.
+	(OCTAVE_SS_INT_OPS, OCTAVE_SM_INT_OPS, OCTAVE_MS_INT_OPS,
+	OCTAVE_MM_INT_OPS): Use the new macros for the power operators.
+	(OCTAVE_INSTALL_SS_INT_OPS, OCTAVE_INSTALL_MS_INT_OPS,
+	OCTAVE_INSTALL_MM_INT_OPS): Install new power functions.
+
+	* OPERATORS/op-int-conv.cc (INT_CONV_FUNCTIONS): Correct return
+	types for unsigned integer scalars and signed integer matrices.
+
+	* ov-type-conv.h (OCTAVE_TYPE_CONV_BODY3): Conversion betwen same
+	types returns the original value.
+
+	* bitfcns.cc (BITOP): Fix for mixed scalar/matrix ops. Allow 
+	octave_range as an argument, by using class_name rather than
+	type_id to test.
+
 2004-08-31  John W. Eaton  <jwe@octave.org>
 
 	* pr-output.cc (pr_int): Also handle bank_format.
 	(octave_print_internal (std::ostream& os, const intNDArray<T>&,
 	bool, int)): Likewise.
 
 2004-08-31  David Bateman  <dbateman@free.fr>
 
diff --git a/src/OPERATORS/op-int-conv.cc b/src/OPERATORS/op-int-conv.cc
--- a/src/OPERATORS/op-int-conv.cc
+++ b/src/OPERATORS/op-int-conv.cc
@@ -78,25 +78,25 @@ DEFCONVFN (range_to_uint32, range, uint3
 DEFCONVFN (range_to_uint64, range, uint64)
 
 #define INT_CONV_FUNCTIONS(tfrom) \
   DEFCONVFN2 (tfrom ## _scalar_to_int8, tfrom, scalar, int8) \
   DEFCONVFN2 (tfrom ## _scalar_to_int16, tfrom, scalar, int16) \
   DEFCONVFN2 (tfrom ## _scalar_to_int32, tfrom, scalar, int32) \
   DEFCONVFN2 (tfrom ## _scalar_to_int64, tfrom, scalar, int64) \
  \
-  DEFCONVFN2 (tfrom ## _scalar_to_uint8, tfrom, scalar, int8) \
-  DEFCONVFN2 (tfrom ## _scalar_to_uint16, tfrom, scalar, int16) \
-  DEFCONVFN2 (tfrom ## _scalar_to_uint32, tfrom, scalar, int32) \
-  DEFCONVFN2 (tfrom ## _scalar_to_uint64, tfrom, scalar, int64) \
+  DEFCONVFN2 (tfrom ## _scalar_to_uint8, tfrom, scalar, uint8) \
+  DEFCONVFN2 (tfrom ## _scalar_to_uint16, tfrom, scalar, uint16) \
+  DEFCONVFN2 (tfrom ## _scalar_to_uint32, tfrom, scalar, uint32) \
+  DEFCONVFN2 (tfrom ## _scalar_to_uint64, tfrom, scalar, uint64) \
  \
-  DEFCONVFN2 (tfrom ## _matrix_to_int8, tfrom, matrix, uint8) \
-  DEFCONVFN2 (tfrom ## _matrix_to_int16, tfrom, matrix, uint16) \
-  DEFCONVFN2 (tfrom ## _matrix_to_int32, tfrom, matrix, uint32) \
-  DEFCONVFN2 (tfrom ## _matrix_to_int64, tfrom, matrix, uint64) \
+  DEFCONVFN2 (tfrom ## _matrix_to_int8, tfrom, matrix, int8) \
+  DEFCONVFN2 (tfrom ## _matrix_to_int16, tfrom, matrix, int16) \
+  DEFCONVFN2 (tfrom ## _matrix_to_int32, tfrom, matrix, int32) \
+  DEFCONVFN2 (tfrom ## _matrix_to_int64, tfrom, matrix, int64) \
  \
   DEFCONVFN2 (tfrom ## _matrix_to_uint8, tfrom, matrix, uint8) \
   DEFCONVFN2 (tfrom ## _matrix_to_uint16, tfrom, matrix, uint16) \
   DEFCONVFN2 (tfrom ## _matrix_to_uint32, tfrom, matrix, uint32) \
   DEFCONVFN2 (tfrom ## _matrix_to_uint64, tfrom, matrix, uint64)
 
 INT_CONV_FUNCTIONS (int8)
 INT_CONV_FUNCTIONS (int16)
diff --git a/src/OPERATORS/op-int.h b/src/OPERATORS/op-int.h
--- a/src/OPERATORS/op-int.h
+++ b/src/OPERATORS/op-int.h
@@ -15,16 +15,18 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
+#include "quit.h"
+
 #define OCTAVE_CONCAT_FN(TYPE) \
   DEFNDCATOP_FN (TYPE ## _s_s, TYPE ## _scalar, TYPE ## _scalar, TYPE ## _array, TYPE ## _array, concat) \
   DEFNDCATOP_FN (TYPE ## _s_m, TYPE ## _scalar, TYPE ## _matrix, TYPE ## _array, TYPE ## _array, concat) \
   DEFNDCATOP_FN (TYPE ## _m_s, TYPE ## _matrix, TYPE ## _scalar, TYPE ## _array, TYPE ## _array, concat) \
   DEFNDCATOP_FN (TYPE ## _m_m, TYPE ## _matrix, TYPE ## _matrix, TYPE ## _array, TYPE ## _array, concat)
 
 #define OCTAVE_INSTALL_CONCAT_FN(TYPE) \
   INSTALL_CATOP (octave_ ## TYPE ## _scalar, octave_ ## TYPE ## _scalar, TYPE ## _s_s) \
@@ -57,17 +59,17 @@ Software Foundation, 59 Temple Place - S
     double d = v2.T2 ## _scalar_value (); \
  \
     if (d == 0.0) \
       gripe_divide_by_zero (); \
  \
     return octave_value (v1.T1 ## _scalar_value () / d); \
   } \
  \
-  /* DEFBINOP_FN (ss_pow, T1 ## _scalar, T2 ## _scalar, xpow) */ \
+  DEFBINOP_FN (ss_pow, T1 ## _scalar, T2 ## _scalar, xpow) \
  \
   DEFBINOP (ss_ldiv, T1 ## _scalar, T2 ## _scalar) \
   { \
     CAST_BINOP_ARGS (const octave_ ## T1 ## _scalar&, const octave_ ## T2 ## _scalar&); \
  \
     double d = v1.T1 ## _scalar_value (); \
  \
     if (d == 0.0) \
@@ -111,18 +113,22 @@ Software Foundation, 59 Temple Place - S
 #define OCTAVE_SS_INT_CMP_OPS(T1, T2) \
   DEFBINOP_OP (ss_lt, T1 ## _scalar, T2 ## _scalar, <) \
   DEFBINOP_OP (ss_le, T1 ## _scalar, T2 ## _scalar, <=) \
   DEFBINOP_OP (ss_eq, T1 ## _scalar, T2 ## _scalar, ==) \
   DEFBINOP_OP (ss_ge, T1 ## _scalar, T2 ## _scalar, >=) \
   DEFBINOP_OP (ss_gt, T1 ## _scalar, T2 ## _scalar, >) \
   DEFBINOP_OP (ss_ne, T1 ## _scalar, T2 ## _scalar, !=)
 
+#define OCTAVE_SS_POW_OPS(T1, T2) \
+  octave_value xpow (octave_ ## T1 a, octave_ ## T2 b) {return pow (a, b);}
+
 #define OCTAVE_SS_INT_OPS(TYPE) \
   OCTAVE_S_INT_UNOPS (TYPE) \
+  OCTAVE_SS_POW_OPS (TYPE, TYPE) \
   OCTAVE_SS_INT_ARITH_OPS (TYPE, TYPE) \
   OCTAVE_SS_INT_CMP_OPS (TYPE, TYPE) \
   OCTAVE_SS_INT_BOOL_OPS (TYPE, TYPE)
 
 #define OCTAVE_SS_INT_OPS2(T1, T2) \
   OCTAVE_SS_INT_ARITH_OPS (T1, T2) \
   OCTAVE_SS_INT_CMP_OPS (T1, T2) \
   OCTAVE_SS_INT_BOOL_OPS (T1, T2)
@@ -155,25 +161,17 @@ Software Foundation, 59 Temple Place - S
   /* if (d == 0) */ \
   /* gripe_divide_by_zero (); */ \
   /* */ \
   /* return octave_value (v2.TS ## _scalar_value () / d); */ \
   /* } */ \
  \
   DEFNDBINOP_OP (sm_el_mul, TS ## _scalar, TM ## _matrix, TS ## _scalar, TM ## _array, *) \
   /* DEFNDBINOP_FN (sm_el_div, TS ## _scalar, TM ## _matrix, TS ## _scalar, TM ## _array, x_el_div) */ \
-  DEFBINOP (sm_el_pow, TS ## _scalar, TM ## _matrix) \
-  { \
-    CAST_BINOP_ARGS (const octave_ ## TS ## _scalar&, const octave_ ## TM ## _matrix&); \
- \
-    double d = v1.TS ## _scalar_value (); \
- \
-    /* XXX FIXME XXX Return type wrong */ \
-    return octave_value (elem_xpow (d, v2.array_value()));	\
-  } \
+  DEFNDBINOP_FN (sm_el_pow, TS ## _scalar, TM ## _matrix, TS ## _scalar, TM ## _array, elem_xpow) \
  \
   /* DEFBINOP (sm_el_ldiv, TS ## _scalar, TM ## _matrix) */ \
   /* { */ \
   /* CAST_BINOP_ARGS (const octave_ ## TS ## _scalar&, const octave_ ## TM ## _matrix&); */ \
   /* */ \
   /* double d = v1.TS ## _scalar_value (); */ \
   /* */ \
   /* if (d == 0) */ \
@@ -189,17 +187,30 @@ Software Foundation, 59 Temple Place - S
   DEFNDBINOP_FN (sm_ge, TS ## _scalar, TM ## _matrix, TS ## _scalar, TM ## _array, mx_el_ge) \
   DEFNDBINOP_FN (sm_gt, TS ## _scalar, TM ## _matrix, TS ## _scalar, TM ## _array, mx_el_gt) \
   DEFNDBINOP_FN (sm_ne, TS ## _scalar, TM ## _matrix, TS ## _scalar, TM ## _array, mx_el_ne)
 
 #define OCTAVE_SM_INT_BOOL_OPS(TS, TM) \
   /* DEFNDBINOP_FN (sm_el_and, TS ## _scalar, TYPE ## _matrix, TS ## _scalar, TYPE ## _array, mx_el_and) */ \
   /* DEFNDBINOP_FN (sm_el_or,  TS ## _scalar, TYPE ## _matrix, TS ## _scalar, TYPE ## _array, mx_el_or) */
 
+#define OCTAVE_SM_POW_OPS(T1, T2) \
+octave_value elem_xpow (octave_ ## T1 a, T2 ## NDArray b) \
+{ \
+  T2 ## NDArray result (b.dims ()); \
+  for (int i = 0; i < b.length (); i++) \
+    { \
+      OCTAVE_QUIT; \
+      result (i) = pow (a, b(i)); \
+    } \
+  return octave_value (result); \
+}
+
 #define OCTAVE_SM_INT_OPS(TYPE) \
+  OCTAVE_SM_POW_OPS (TYPE, TYPE) \
   OCTAVE_SM_INT_ARITH_OPS (TYPE, TYPE) \
   OCTAVE_SM_INT_CMP_OPS (TYPE, TYPE) \
   OCTAVE_SM_INT_BOOL_OPS (TYPE, TYPE) \
  \
   /* DEFCONV (TYPE ## _matrix_conv, TYPE ## _scalar, TYPE ## _matrix) */ \
   /* { */ \
   /* CAST_CONV_ARG (const octave_ ## TYPE ## _scalar&); */ \
   /* */ \
@@ -251,17 +262,17 @@ Software Foundation, 59 Temple Place - S
   /* double d = v2.TM ## _ ## TS ## _scalar_value (); */ \
   /* */ \
   /* if (d == 0.0) */ \
   /* gripe_divide_by_zero (); */ \
   /* */ \
   /* return octave_value (v1.TM ## _array_value () / d); */ \
   /* } */ \
  \
-  /* DEFNDBINOP_FN (ms_el_pow, TM ## _matrix, TS ## _scalar, TM ## _array, TS ## _scalar, elem_xpow) */ \
+  DEFNDBINOP_FN (ms_el_pow, TM ## _matrix, TS ## _scalar, TM ## _array, TS ## _scalar, elem_xpow) \
  \
   /* DEFBINOP (el_ldiv, TM ## _matrix, TS ## _scalar) */ \
   /* { */ \
   /* CAST_BINOP_ARGS (const octave_ ## TM ## _matrix&, const octave_ ## TS ## _scalar&); */ \
   /* */ \
   /* return x_el_div (v2.TM ## _ ## TS ## _scalar_value (), v1.TM ## _array_value ()); */ \
   /* } */
 
@@ -276,17 +287,30 @@ Software Foundation, 59 Temple Place - S
 #define OCTAVE_MS_INT_BOOL_OPS(TM, TS) \
   /* DEFNDBINOP_FN (ms_el_and, TM ## _matrix, TS ## _scalar, TM ## _array, TS ## _scalar, mx_el_and) */ \
   /* DEFNDBINOP_FN (ms_el_or, TM ## _matrix, TS ## _scalar, TM
      ## _array, TS ## _scalar, mx_el_or) */
 
 #define OCTAVE_MS_INT_ASSIGN_OPS(TM, TS) \
   DEFNDASSIGNOP_FN (ms_assign, TM ## _matrix, TS ## _scalar, TS ## _array, assign)
 
+#define OCTAVE_MS_POW_OPS(T1, T2) \
+octave_value elem_xpow (T1 ## NDArray a, octave_ ## T2  b) \
+{ \
+  T1 ## NDArray result (a.dims ()); \
+  for (int i = 0; i < a.length (); i++) \
+    { \
+      OCTAVE_QUIT; \
+      result (i) = pow (a(i), b);		\
+    } \
+  return octave_value (result); \
+}
+
 #define OCTAVE_MS_INT_OPS(TYPE) \
+  OCTAVE_MS_POW_OPS (TYPE, TYPE) \
   OCTAVE_MS_INT_ARITH_OPS (TYPE, TYPE) \
   OCTAVE_MS_INT_CMP_OPS (TYPE, TYPE) \
   OCTAVE_MS_INT_BOOL_OPS (TYPE, TYPE) \
   OCTAVE_MS_INT_ASSIGN_OPS (TYPE, TYPE)
 
 #define OCTAVE_M_INT_UNOPS(TYPE) \
   /* matrix unary ops. */ \
  \
@@ -325,17 +349,17 @@ Software Foundation, 59 Temple Place - S
   } \
  \
   /* DEFBINOP_FN (ldiv, T1 ## _matrix, T2 ## _matrix, xleftdiv) */ \
  \
   DEFNDBINOP_FN (mm_el_mul, T1 ## _matrix, T2 ## _matrix, T1 ## _array, T2 ## _array, product) \
  \
   DEFNDBINOP_FN (mm_el_div, T1 ## _matrix, T2 ## _matrix, T1 ## _array, T2 ## _array, quotient) \
  \
-  /* DEFNDBINOP_FN (mm_el_pow, T1 ## _matrix, T2 ## _matrix, T1 ## _array, T2 ## _array, elem_xpow) */ \
+  DEFNDBINOP_FN (mm_el_pow, T1 ## _matrix, T2 ## _matrix, T1 ## _array, T2 ## _array, elem_xpow) \
  \
   /* DEFBINOP (mm_el_ldiv, T1 ## _matrix, T2 ## _matrix) */ \
   /* { */ \
   /* CAST_BINOP_ARGS (const octave_matrix&, const octave_matrix&); */ \
   /* */ \
   /* return octave_value (quotient (v2.array_value (), v1.array_value ())); */ \
   /* } */
 
@@ -349,18 +373,38 @@ Software Foundation, 59 Temple Place - S
 
 #define OCTAVE_MM_INT_BOOL_OPS(T1, T2) \
   DEFNDBINOP_FN (mm_el_and, T1 ## _matrix, T2 ## _matrix, T1 ## _array, T2 ## _array, mx_el_and) \
   DEFNDBINOP_FN (mm_el_or,  T1 ## _matrix, T2 ## _matrix, T1 ## _array, T2 ## _array, mx_el_or)
 
 #define OCTAVE_MM_INT_ASSIGN_OPS(TYPE) \
   DEFNDASSIGNOP_FN (mm_assign, TYPE ## _matrix, TYPE ## _matrix, TYPE ## _array, assign)
 
+#define OCTAVE_MM_POW_OPS(T1, T2) \
+octave_value elem_xpow (T1 ## NDArray a, T2 ## NDArray  b) \
+{ \
+  dim_vector a_dims = a.dims (); \
+  dim_vector b_dims = b.dims (); \
+  if (a_dims != b_dims) \
+    { \
+      gripe_nonconformant ("operator .^", a_dims, b_dims); \
+      return octave_value (); \
+    } \
+  T1 ## NDArray result (a_dims); \
+  for (int i = 0; i < a.length (); i++) \
+    { \
+      OCTAVE_QUIT; \
+      result (i) = pow (a(i), b(i)); \
+    } \
+  return octave_value (result); \
+}
+
 #define OCTAVE_MM_INT_OPS(TYPE) \
   OCTAVE_M_INT_UNOPS (TYPE) \
+  OCTAVE_MM_POW_OPS (TYPE, TYPE) \
   OCTAVE_MM_INT_ARITH_OPS (TYPE, TYPE) \
   OCTAVE_MM_INT_CMP_OPS (TYPE, TYPE) \
   OCTAVE_MM_INT_BOOL_OPS (TYPE, TYPE) \
   OCTAVE_MM_INT_ASSIGN_OPS (TYPE)
 
 #define OCTAVE_MM_INT_OPS2(T1, T2) \
   OCTAVE_MM_INT_ARITH_OPS (T1, T2) \
   OCTAVE_MM_INT_CMP_OPS (T1, T2) \
@@ -382,17 +426,17 @@ Software Foundation, 59 Temple Place - S
   /* INSTALL_NCUNOP (op_incr, octave_ ## TYPE ## _scalar, s_incr); */ \
   /* INSTALL_NCUNOP (op_decr, octave_ ## TYPE ## _scalar, s_decr); */
 
 #define OCTAVE_INSTALL_SS_INT_ARITH_OPS(T1, T2) \
   INSTALL_BINOP (op_add, octave_ ## T1 ## _scalar, octave_ ## T2 ## _scalar, ss_add); \
   INSTALL_BINOP (op_sub, octave_ ## T1 ## _scalar, octave_ ## T2 ## _scalar, ss_sub); \
   INSTALL_BINOP (op_mul, octave_ ## T1 ## _scalar, octave_ ## T2 ## _scalar, ss_mul); \
   INSTALL_BINOP (op_div, octave_ ## T1 ## _scalar, octave_ ## T2 ## _scalar, ss_div); \
-  /* INSTALL_BINOP (op_pow, octave_ ## T1 ## _scalar, octave_ ## T2 ## _scalar, ss_pow); */ \
+  INSTALL_BINOP (op_pow, octave_ ## T1 ## _scalar, octave_ ## T2 ## _scalar, ss_pow); \
   INSTALL_BINOP (op_ldiv, octave_ ## T1 ## _scalar, octave_ ## T2 ## _scalar, ss_ldiv); \
   INSTALL_BINOP (op_el_mul, octave_ ## T1 ## _scalar, octave_ ## T2 ## _scalar, ss_el_mul); \
   INSTALL_BINOP (op_el_div, octave_ ## T1 ## _scalar, octave_ ## T2 ## _scalar, ss_el_div); \
   INSTALL_BINOP (op_el_pow, octave_ ## T1 ## _scalar, octave_ ## T2 ## _scalar, ss_el_pow); \
   INSTALL_BINOP (op_el_ldiv, octave_ ## T1 ## _scalar, octave_ ## T2 ## _scalar, ss_el_ldiv);
 
 #define OCTAVE_INSTALL_SS_INT_CMP_OPS(T1, T2) \
   INSTALL_BINOP (op_lt, octave_ ## T1 ## _scalar, octave_ ## T2 ## _scalar, ss_lt); \
@@ -459,17 +503,17 @@ Software Foundation, 59 Temple Place - S
   INSTALL_BINOP (op_sub, octave_ ## T1 ## _matrix, octave_ ## T2 ## _scalar, ms_sub); \
   INSTALL_BINOP (op_mul, octave_ ## T1 ## _matrix, octave_ ## T2 ## _scalar, ms_mul); \
   /* INSTALL_BINOP (op_div, octave_ ## T1 ## _matrix, octave_ ## T2 ## _scalar, ms_div); */ \
   /* INSTALL_BINOP (op_pow, octave_ ## T1 ## _matrix, octave_ ## T2 ## _scalar, ms_pow); */ \
   /* INSTALL_BINOP (op_ldiv, octave_ ## T1 ## _matrix, octave_ ## T2 ## _scalar, ms_ldiv); */ \
  \
   INSTALL_BINOP (op_el_mul, octave_ ## T1 ## _matrix, octave_ ## T2 ## _scalar, ms_el_mul); \
   /* INSTALL_BINOP (op_el_div, octave_ ## T1 ## _matrix, octave_ ## T2 ## _scalar, ms_el_div); */ \
-  /* INSTALL_BINOP (op_el_pow, octave_ ## T1 ## _matrix, octave_ ## T2 ## _scalar, ms_el_pow); */ \
+  INSTALL_BINOP (op_el_pow, octave_ ## T1 ## _matrix, octave_ ## T2 ## _scalar, ms_el_pow); \
   /* INSTALL_BINOP (op_el_ldiv, octave_ ## T1 ## _matrix, octave_ ## T2 ## _scalar, ms_el_ldiv); */
 
 #define OCTAVE_INSTALL_MS_INT_CMP_OPS(T1, T2) \
   /* INSTALL_BINOP (op_lt, octave_ ## T1 ## _matrix, octave_ ## T2 ## _scalar, ms_lt); */ \
  \
   octave_value_typeinfo::register_binary_op \
     (octave_value::op_lt, octave_ ## T1 ## _matrix::static_type_id (), \
      octave_ ## T2 ## _scalar::static_type_id (), oct_binop_ms_lt); \
@@ -508,17 +552,17 @@ Software Foundation, 59 Temple Place - S
   INSTALL_BINOP (op_add, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_add); \
   INSTALL_BINOP (op_sub, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_sub); \
   /* INSTALL_BINOP (op_mul, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_mul); */ \
   /* INSTALL_BINOP (op_div, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_div); */ \
   INSTALL_BINOP (op_pow, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_pow); \
   /* INSTALL_BINOP (op_ldiv, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_ldiv); */ \
   INSTALL_BINOP (op_el_mul, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_el_mul); \
   INSTALL_BINOP (op_el_div, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_el_div); \
-  /* INSTALL_BINOP (op_el_pow, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_el_pow); */ \
+  INSTALL_BINOP (op_el_pow, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_el_pow); \
   /* INSTALL_BINOP (op_el_ldiv, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_el_ldiv); */
 
 #define OCTAVE_INSTALL_MM_INT_CMP_OPS(T1, T2) \
   INSTALL_BINOP (op_lt, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_lt); \
   INSTALL_BINOP (op_le, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_le); \
   INSTALL_BINOP (op_eq, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_eq); \
   INSTALL_BINOP (op_ge, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_ge); \
   INSTALL_BINOP (op_gt, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_gt); \
diff --git a/src/bitfcns.cc b/src/bitfcns.cc
--- a/src/bitfcns.cc
+++ b/src/bitfcns.cc
@@ -81,33 +81,25 @@ Software Foundation, 59 Temple Place - S
 #define BITOP(OP, FNAME) \
  \
   octave_value retval; \
  \
   int nargin = args.length (); \
  \
   if (nargin == 2) \
     { \
-      if (args(0).type_id () == octave_matrix::static_type_id () \
-	  || args(0).type_id () == octave_scalar::static_type_id () \
-	  || args(1).type_id () == octave_matrix::static_type_id () \
-	  || args(1).type_id () == octave_scalar::static_type_id ()) \
+      if ((args(0).class_name () == octave_scalar::static_class_name ()) \
+	  || (args(1).class_name () == octave_scalar::static_class_name ())) \
 	{ \
-	  bool arg0_is_int = true; \
-	  bool arg1_is_int = true; \
- \
-	  if (args(0).type_id () == octave_matrix::static_type_id () \
-	      || args(0).type_id () == octave_scalar::static_type_id ()) \
-	    arg0_is_int = false; \
- \
-	  if (args(1).type_id () == octave_matrix::static_type_id () \
-	      || args(1).type_id () == octave_scalar::static_type_id ()) \
-	    arg1_is_int = false; \
- \
-	  if (!arg0_is_int && !arg1_is_int) \
+	  bool arg0_is_int = (args(0).class_name () !=	\
+			      octave_scalar::static_class_name ()); \
+	  bool arg1_is_int = (args(1).class_name () !=	\
+			      octave_scalar::static_class_name ()); \
+	  \
+	  if (! (arg0_is_int || arg1_is_int))	\
 	    { \
 	      uint64NDArray x (args(0).array_value ()); \
 	      uint64NDArray y (args(1).array_value ());	\
 	      if (! error_state) \
 		BITOPX (OP, FNAME, uint64NDArray); \
 	      retval = retval.array_value (); \
 	    } \
 	  else \
@@ -180,17 +172,17 @@ Software Foundation, 59 Temple Place - S
 		  int8NDArray y = args(q).int8_array_value (); \
 		  if (! error_state) \
 		    BITOPX (OP, FNAME, int8NDArray); \
 		} \
 	      else \
 		error ("%s: invalid operand type", FNAME); \
 	    } \
 	} \
-      else if (args(0).type_id () == args(1).type_id ()) \
+      else if (args(0).class_name () == args(1).class_name ()) \
 	{ \
 	  if (args(0).type_id () == octave_uint64_matrix::static_type_id () \
 	      || args(0).type_id () == octave_uint64_scalar::static_type_id ()) \
 	    { \
 	      uint64NDArray x = args(0).uint64_array_value (); \
 	      uint64NDArray y = args(1).uint64_array_value (); \
 	      if (! error_state) \
 		BITOPX (OP, FNAME, uint64NDArray); \
diff --git a/src/ov-type-conv.h b/src/ov-type-conv.h
--- a/src/ov-type-conv.h
+++ b/src/ov-type-conv.h
@@ -56,16 +56,18 @@ Software Foundation, 59 Temple Place - S
  \
 	      std::string result_tname = arg.numel () == 1 \
 		? SCALAR_RESULT_T::static_type_name () \
 		: MATRIX_RESULT_T::static_type_name (); \
  \
 	      gripe_invalid_conversion (arg_tname, result_tname); \
 	    } \
 	} \
+      else \
+        retval = arg; \
     } \
   else \
     print_usage (#NAME); \
  \
   return retval
 
 #define OCTAVE_TYPE_CONV_BODY(NAME) \
   OCTAVE_TYPE_CONV_BODY3 (NAME, octave_ ## NAME ## _matrix, \
