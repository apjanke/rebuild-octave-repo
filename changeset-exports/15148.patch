# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1344634867 18000
#      Fri Aug 10 16:41:07 2012 -0500
# Node ID 1b2fbc30e4e72c19723534a8281c52c89df6c0fa
# Parent  98a65d9e426f322d06fc672c7a243ad328f5695a
Postfix increment and decrement operations in JIT

* jit-typeinfo.cc (jit_typeinfo::jit_typeinfo): Initialize copy operation.
* jit-typeinfo.h (jit_typeinfo::copy): New function.

* pt-jit.cc (jit_convert::visit_postfix_expression): Implement for ++ and --.

diff --git a/src/interp-core/jit-typeinfo.cc b/src/interp-core/jit-typeinfo.cc
--- a/src/interp-core/jit-typeinfo.cc
+++ b/src/interp-core/jit-typeinfo.cc
@@ -1154,16 +1154,20 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   release_fn.stash_name ("release");
 
   // release matrix
   fn = create_function (jit_convention::external, "octave_jit_release_matrix",
                         0, matrix);
   fn.add_mapping (engine, &octave_jit_release_matrix);
   release_fn.add_overload (fn);
 
+  // copy
+  copy_fn.stash_name ("copy");
+  copy_fn.add_overload (create_identity (scalar));
+
   // now for binary scalar operations
   add_binary_op (scalar, octave_value::op_add, llvm::Instruction::FAdd);
   add_binary_op (scalar, octave_value::op_sub, llvm::Instruction::FSub);
   add_binary_op (scalar, octave_value::op_mul, llvm::Instruction::FMul);
   add_binary_op (scalar, octave_value::op_el_mul, llvm::Instruction::FMul);
 
   add_binary_fcmp (scalar, octave_value::op_lt, llvm::CmpInst::FCMP_ULT);
   add_binary_fcmp (scalar, octave_value::op_le, llvm::CmpInst::FCMP_ULE);
diff --git a/src/interp-core/jit-typeinfo.h b/src/interp-core/jit-typeinfo.h
--- a/src/interp-core/jit-typeinfo.h
+++ b/src/interp-core/jit-typeinfo.h
@@ -493,16 +493,21 @@ public:
     return instance->release_fn;
   }
 
   static const jit_function& get_release (jit_type *type)
   {
     return instance->release_fn.overload (type);
   }
 
+  static const jit_operation& copy (void)
+  {
+    return instance->copy_fn;
+  }
+
   static const jit_operation& print_value (void)
   {
     return instance->print_fn;
   }
 
   static const jit_operation& for_init (void)
   {
     return instance->for_init_fn;
@@ -746,16 +751,17 @@ private:
   std::map<std::string, jit_type *> builtins;
 
   llvm::StructType *complex_ret;
 
   std::vector<jit_operation> binary_ops;
   std::vector<jit_operation> unary_ops;
   jit_operation grab_fn;
   jit_operation release_fn;
+  jit_operation copy_fn;
   jit_operation print_fn;
   jit_operation for_init_fn;
   jit_operation for_check_fn;
   jit_operation for_index_fn;
   jit_operation logically_true_fn;
   jit_operation make_range_fn;
   jit_paren_subsref paren_subsref_fn;
   jit_paren_subsasgn paren_subsasgn_fn;
diff --git a/src/interp-core/pt-jit.cc b/src/interp-core/pt-jit.cc
--- a/src/interp-core/pt-jit.cc
+++ b/src/interp-core/pt-jit.cc
@@ -587,19 +587,19 @@ jit_convert::visit_postfix_expression (t
   tree_expression *operand = tpe.operand ();
   jit_value *operandv = visit (operand);
 
   const jit_operation& fn = jit_typeinfo::unary_op (etype);
   result = create_checked (fn, operandv);
 
   if (etype == octave_value::op_incr || etype == octave_value::op_decr)
     {
-      // FIXME: Somehow copy operandv
-      // do_assign (operand, operandv);
-      throw jit_fail_exception ("Postfix ++ and -- not yet supported");
+      jit_value *ret = create_checked (&jit_typeinfo::copy, operandv);
+      do_assign (operand, result);
+      result = ret;
     }
 }
 
 void
 jit_convert::visit_prefix_expression (tree_prefix_expression& tpe)
 {
   octave_value::unary_op etype = tpe.op_type ();
   tree_expression *operand = tpe.operand ();
@@ -1986,10 +1986,17 @@ Test some simple cases that compile.
 
 %!test
 %! i = 0;
 %! while i < 10
 %!   a = ++i;
 %! endwhile
 %! assert (i == 10);
 %! assert (a == 10);
+%!test
+%! i = 0;
+%! while i < 10
+%!   a = i++;
+%! endwhile
+%! assert (i == 10);
+%! assert (a == 9);
 
 */
