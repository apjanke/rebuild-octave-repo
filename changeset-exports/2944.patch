# HG changeset patch
# User jwe
# Date 863059361 0
#      Thu May 08 02:42:41 1997 +0000
# Node ID e9c24f32f175b642f517b3a5e28fe50ea05cbeb6
# Parent  e6dfc3ea62990374242d228a74c2143a9ec9c75c
[project @ 1997-05-08 02:42:22 by jwe]

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -79,16 +79,35 @@ Summary of changes since version 2.0.5:
   * It is now possible to declare static variables that retain their
     values across function calls.  For example,
 
       function ncall = f () static n = 0; ncall = ++n; endfunction
 
     defines a function that returns the number of times that it has
     been called.
 
+  * Within user-defined functions, the new automatic variable `argn'
+    contains the names of the arguments that were passed to the
+    function.  For example,
+
+      function f (...)
+        for i = 1:nargin
+          stdout << "argn(" << i << ") = `" << deblank (argn(i,:)) \
+                 << "' and its value is " << va_arg () << "\n";
+        endfor
+      endfunction
+      f (1+2, "foo", sin (pi/2))
+
+    prints
+
+      argn(1) = `1 + 2' and its value is 3
+      argn(2) = `"foo"' and its value is foo
+      argn(3) = `sin (pi)' and its value is 1
+
+    on the standard output stream.  If nargin is zero, argn is not defined.
   * Functions like quad, fsolve, and lsode can take either a function
     name or a simple function body as a string.  For example,
 
       quad ("sqrt (x)", 0, 1)
 
     is equivalent to
 
       function y = f (x) y = sqrt (x); endfunction
diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -309,19 +309,16 @@ Interpreter:
     variables.)
 
   * Make it possible to check if a variable is complex.
 
   * Consider making linspace() and logspace() return the value
     corresponding to the first argument if the number of requested
     points is 1.
 
-  * Make it possible to get the names of the arguments that are passed
-    to functions, at least if simple variables are passed.
-
   * Consider allowing an arbitrary property list to be attached to any
     variable.  This could be a more general way to handle the help
     string that can currently be added with `document'.
 
   * Allow more command line options to be accessible as built-in
     variables (--echo-commands, etc.).
 
   * Allow `octave -c STRING' to execute commands from STRING then
diff --git a/doc/interpreter/func.texi b/doc/interpreter/func.texi
--- a/doc/interpreter/func.texi
+++ b/doc/interpreter/func.texi
@@ -403,16 +403,17 @@ accept.
 
 Here is an example of a function that uses the new syntax to print a
 header followed by an unspecified number of values:
 
 @example
 function foo (heading, ...)
   disp (heading);
   va_start ();
+  ## Pre-decrement to skip `heading' arg.
   while (--nargin)
     disp (va_arg ());
   endwhile
 endfunction
 @end example
 
 The ellipsis that marks the variable argument list may only appear once
 and must be the last element in the list of arguments.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,39 @@
+Wed May  7 21:17:00 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* input.cc (generate_completion): Rename from command_generator.
+	Use string objects instead of char*.
+	(generate_possible_completions): Let qsort also make matches unique.
+	(initialize_command_input): Register generate_completion with the
+	command_editor class.
+	(completion_matches): Simplify using generate_completion.
+
+	* pt-pr-code.cc (tree_print_code::visit_constant): For val, call
+	print_raw, not print.
+
+	* oct-usr-fcn.h (octave_user_function::argn_sr): New data member.
+	(octave_user_function::install_automatic_vars): Rename from
+	install_nargin_and_nargout.
+	(octave_user_function::bind_automatic_vars): Rename from
+	bind_nargin_and_nargout.
+	* oct-usr-fcn.cc (octave_user_function::eval): Extract arg names
+	from args vector and bind them to argn.
+	* oct-obj.h (octave_value_list::names): New data member.
+	* oct-obj.cc (octave_value_list::stash_name_tags): New function.
+	(octave_value_list::name_tags): Ditto.
+	* pt-const.h, pt-const.cc (tree_constant::print_raw): New function.
+	* pt-misc.h, pt-misc.cc (tree_argument_list::get_arg_names):
+	New function.
+	* pt-mvr.h, pt-mvr.cc (class index_expression): Cache arg names.
+	* toplev.cc (feval): Now static.  Handle arg names.
+
+	* mkops: Cope with moving files defining operators to OPERATORS
+	subdirectory.
+
 Tue May  6 00:48:59 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/getgrent.cc: Use new octave_group class.
 	* DLD-FUNCTIONS/getpwent.cc: Use new octave_passwd class.
 
 	* syscalls.cc: Simplify by using new functions defined in
 	liboctave/oct-syscalls.cc.
 
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -76,17 +76,17 @@ PT_INCLUDES := pt-base.h pt-cmd.h \
 	pt-plot.h pt-pr-code.h pt-walk.h 
 
 INCLUDES := BaseSLList.h Map.h SLList.h SLStack.h Stack.h defun-dld.h \
 	defun-int.h defun.h dirfns.h dynamic-ld.h error.h file-io.h \
 	fn-cache.h gripes.h help.h input.h lex.h load-save.h \
 	oct-builtin.h oct-fcn.h oct-fstrm.h oct-hist.h oct-iostrm.h \
 	oct-map.h oct-mapper.h oct-obj.h oct-prcstrm.h oct-procbuf.h \
 	oct-stdstrm.h oct-stream.h oct-strstrm.h oct-sym.h \
-	oct-usr-fcn.h oct.h ops.h pager.h parse.h pathlen.h \
+	oct-usr-fcn.h oct.h ops.h pager.h parse.h \
 	pr-output.h procstream.h sighandlers.h symtab.h sysdep.h \
 	systime.h syswait.h token.h toplev.h unwind-prot.h utils.h \
 	variables.h version.h xdiv.h xpow.h $(OV_INCLUDES) $(PT_INCLUDES)
 
 TI_XSRC := Array-oc.cc Array-os.cc Array-tc.cc Map-fnc.cc \
 	Map-tc.cc SLList-expr.cc SLList-misc.cc SLList-plot.cc \
 	SLList-tc.cc SLList-tm.cc SLStack-i.cc SLStack-pc.cc \
 	SLStack-str.cc SLStack-sym.cc SLStack-tok.cc \
@@ -114,21 +114,22 @@ PT_SRC := pt-base.cc pt-cmd.cc pt-const.
 	pt-mvr-base.cc pt-mvr.cc pt-plot.cc pt-pr-code.cc 
 
 SOURCES := BaseSLList.cc Map.cc SLList.cc SLStack.cc Stack.cc \
 	data.cc defaults.cc dirfns.cc dynamic-ld.cc error.cc \
 	file-io.cc fn-cache.cc gripes.cc help.cc input.cc lex.l \
 	load-save.cc mappers.cc oct-fstrm.cc oct-hist.cc \
 	oct-iostrm.cc oct-map.cc oct-obj.cc oct-prcstrm.cc \
 	oct-procbuf.cc oct-stdstrm.cc oct-stream.cc oct-strstrm.cc \
-	pager.cc parse.y pr-output.cc procstream.cc sighandlers.cc \
-	strcasecmp.c strncase.c strfns.cc strftime.c symtab.cc \
-	syscalls.cc sysdep.cc token.cc toplev.cc unwind-prot.cc \
-	utils.cc variables.cc xdiv.cc xpow.cc oct-fcn.cc \
-	oct-builtin.cc oct-mapper.cc oct-usr-fcn.cc \
+	pager.cc parse.y pr-output.cc procstream.cc \
+	sighandlers.cc strcasecmp.c strncase.c strfns.cc \
+	strftime.c symtab.cc syscalls.cc sysdep.cc token.cc \
+	toplev.cc unwind-prot.cc utils.cc variables.cc xdiv.cc \
+	xpow.cc oct-fcn.cc oct-builtin.cc oct-mapper.cc \
+	oct-usr-fcn.cc \
 	$(OP_SRC) $(OV_SRC) $(PT_SRC) $(TI_SRC)
 
 OBJECTS_4 := $(notdir $(SOURCES))
 OBJECTS_3 := $(patsubst %.l, %.o, $(OBJECTS_4))
 OBJECTS_2 := $(patsubst %.y, %.o, $(OBJECTS_3))
 OBJECTS_1 := $(patsubst %.c, %.o, $(OBJECTS_2))
 OBJECTS := $(patsubst %.cc, %.o, $(OBJECTS_1))
 
@@ -239,19 +240,19 @@ builtins.cc: $(DEF_FILES) mkbuiltins
 	@echo making $@
 	@echo DEF_FILES = $(DEF_FILES)
 	@echo VAR_FILES = $(VAR_FILES)
 	@echo $(DEF_FILES) > def-files
 	@echo $(VAR_FILES) > var-files
 	@$(srcdir)/mkbuiltins def-files var-files > $@.t
 	@$(top_srcdir)/move-if-change $@.t $@
 
-ops.cc: $(OP_SOURCES) mkops
-	@echo making $@ from $(OP_SOURCES)
-	@$(srcdir)/mkops $(OP_SOURCES) > $@.t
+ops.cc: $(OP_SRC) mkops
+	@echo making $@ from $(OP_SRC)
+	@$(srcdir)/mkops $(OP_SRC) > $@.t
 	@$(top_srcdir)/move-if-change $@.t $@
 
 $(DEF_FILES): mkdefs defun-int.h defun-dld.h defun.h defaults.h oct-conf.h
 
 $(MAKEDEPS): defaults.h oct-gperf.h oct-conf.h
 
 @bsd_gcc_kluge_targets_frag@
 
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -355,45 +355,28 @@ generate_possible_completions (const str
 
   prefix = "";
 
   if (! text.empty () && text != "." && text.rfind ('.') != NPOS)
     names = generate_struct_completions (text, prefix, hint);
   else
     names = make_name_list ();
 
-  names.qsort ();
-
-  // Remove duplicates.
-
-  // XXX FIXME XXX -- maybe this should be defined for all Array objects.
-
-  int k = 0;
-
-  int len = names.length ();
+  // Sort and remove duplicates.
 
-  for (int i = 1; i < len; i++)
-    {
-      if (names[i] != names[k])
-	{
-	  k++;
-
-	  if (k != i)
-	    names[k] = names[i];
-	}
-    }
-
-  names.resize (k+1);
+  names.qsort (true);
 
   return names;
 }
 
-static char *
-command_generator (const char *text, int state)
+static string
+generate_completion (const string& text, int state)
 {
+  string retval;
+
   static string prefix;
   static string hint;
 
   static size_t prefix_len = 0;
   static size_t hint_len = 0;
 
   static int list_index = 0;
   static int name_list_len = 0;
@@ -429,62 +412,46 @@ command_generator (const char *text, int
       while (list_index < name_list_len)
 	{
 	  string name = name_list[list_index];
 
 	  list_index++;
 
 	  if (! name.compare (hint, 0, hint_len))
 	    {
-	      int len = 2 + prefix_len + name.length ();
-
-	      char *buf = static_cast<char *> (malloc (len));
+	      if (! prefix.empty ())
+		retval = prefix + "." + name;
+	      else
+		retval = name;
 
-	      if (! prefix.empty ())
-		{
-		  strcpy (buf, prefix.c_str ());
-		  strcat (buf, ".");
-		  strcat (buf, name.c_str ());
-		}
-	      else
-		strcpy (buf, name.c_str ());
-
-	      if (matches == 1 && looks_like_struct (buf))
+	      if (matches == 1 && looks_like_struct (retval))
 		command_editor::set_completion_append_character ('.');
 	      else
 		command_editor::set_completion_append_character
 		  (Vcompletion_append_char);
 
-	      return buf;
+	      break;
 	    }
 	}
     }
 
-  return 0;
+  return retval;
 }
 
-#if 0
-static char **
-command_completer (char *text, int /* start */, int /* end */)
-{
-  char **matches = 0;
-  matches = completion_matches (text, command_generator);
-  return matches;
-}
-#endif
-
 void
 initialize_command_input (void)
 {
   // If we are using readline, this allows conditional parsing of the
   // .inputrc file.
 
   command_editor::set_name ("Octave");
 
   command_editor::set_paren_string_delimiters ("\"");
+
+  command_editor::set_completion_function (generate_completion);
 }
 
 static bool
 match_sans_spaces (const string& standard, const string& test)
 {
   string tmp = test;
 
   size_t beg = test.find_first_not_of (" \t");
@@ -700,44 +667,39 @@ number is not incremented when this func
 not a bug.")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
-      string hint_string = args(0).string_value ();
+      string hint = args(0).string_value ();
 
       if (! error_state)
 	{
 	  int n = 32;
 
 	  string_vector list (n);
 
-	  const char *hint = hint_string.c_str ();
-
 	  int k = 0;
 
 	  for (;;)
 	    {
-	      const char *cmd = command_generator (hint, k);
+	      string cmd = generate_completion (hint, k);
 
-	      if (cmd)
+	      if (! cmd.empty ())
 		{
-		  if (*cmd)
+		  if (k == n)
 		    {
-		      if (k == n)
-			{
-			  n *= 2;
-			  list.resize (n);
-			}
+		      n *= 2;
+		      list.resize (n);
+		    }
 
-		      list[k++] = cmd;
-		    }
+		  list[k++] = cmd;
 		}
 	      else
 		{
 		  list.resize (k);
 		  break;
 		}
 	    }
 
