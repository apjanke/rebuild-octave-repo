# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1449390928 -3600
#      Sun Dec 06 09:35:28 2015 +0100
# Node ID 2da4058d65c758c622f86179704bec874f8fd10c
# Parent  7349de0bf744bcd5c76a878f0134f9139c4d9665
store the encoding of recent editor files in the mru list

* file-editor-tab.cc (set_file_name): signal mru_add_file now with encoding

* file-editor-tab.h: signal mru_add_file now with encoding

* file-editor.cc (call_custom_editor, request_open_file):
  handle_mru_add_file with encoding;
  (request_mru_open_file): call request_open_file with encoding;
  (handle_mru_add_file) takes encoding as additional parameter and adds it
  to a second list;
  (mru_menu_update): store encoding together with file name in action data,
  ensure correct length of both lists;
  (construct): get mru lists and check for length of lists with encodings;
  (add_file_editor_tab) update connection of mru_add_file signal;

* file-editor.h: slot handle_mru_add_file with encoding, class variable for
  list of mru encodingds

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -371,17 +371,17 @@ file_editor_tab::set_file_name (const QS
 
   // update lexer after _file_name change
   update_lexer ();
 
   // update the file editor with current editing directory
   emit editor_state_changed (_copy_available, _is_octave_file);
 
   // add the new file to the mru list
-  emit mru_add_file (_file_name);
+  emit mru_add_file (_file_name, _encoding);
 }
 
 // valid_file_name (file): checks whether "file" names a file
 // by default, "file" is empty, then _file_name is checked
 bool
 file_editor_tab::valid_file_name (const QString& file)
 {
   if (file.isEmpty ())
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -131,17 +131,17 @@ public slots:
   void handle_context_menu_edit (const QString&);
 
 signals:
 
   void file_name_changed (const QString& fileName, const QString& toolTip);
   void editor_state_changed (bool copy_available, bool is_octave_file);
   void tab_remove_request ();
   void add_filename_to_list (const QString&, const QString&, QWidget *);
-  void mru_add_file (const QString& file_name);
+  void mru_add_file (const QString& file_name, const QString& encoding);
   void editor_check_conflict_save (const QString& saveFileName,
                                    bool remove_on_success);
   void run_file_signal (const QFileInfo& info);
   void set_global_edit_shortcuts_signal (bool);
   void request_open_file (const QString&);
 
 protected:
 
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -339,17 +339,18 @@ file_editor::call_custom_editor (const Q
                                QMessageBox::Ok, this);
 
            msgBox->setWindowModality (Qt::NonModal);
            msgBox->setAttribute (Qt::WA_DeleteOnClose);
            msgBox->show ();
         }
 
       if (line < 0 && ! file_name.isEmpty ())
-        handle_mru_add_file (QFileInfo (file_name).canonicalFilePath ());
+        handle_mru_add_file (QFileInfo (file_name).canonicalFilePath (),
+                             QString ());
 
       return true;
     }
 
   return false;
 }
 
 bool
@@ -434,17 +435,18 @@ file_editor::request_open_file (const QS
               if (result == "")
                 {
                   // Supply empty title then have the file_editor_tab update
                   // with full or short name.
                   add_file_editor_tab (fileEditorTab, "");
                   fileEditorTab->update_window_title (false);
                   // file already loaded, add file to mru list here
                   QFileInfo file_info = QFileInfo (openFileName);
-                  handle_mru_add_file (file_info.canonicalFilePath ());
+                  handle_mru_add_file (file_info.canonicalFilePath (),
+                                       encoding);
 
                   if (line > 0)
                     {
                       emit fetab_goto_line (fileEditorTab, line);
 
                       if (debug_pointer)
                         emit fetab_insert_debugger_pointer (fileEditorTab,
                                                             line);
@@ -537,17 +539,18 @@ file_editor::request_open_file (const QS
 }
 
 // open a file from the mru list
 void
 file_editor::request_mru_open_file (QAction *action)
 {
   if (action)
     {
-      request_open_file (action->data ().toString ());
+      request_open_file (action->data ().toStringList ().at (0),
+                         action->data ().toStringList ().at (1));
     }
 }
 
 
 void
 file_editor::check_conflict_save (const QString& saveFileName,
                                   bool remove_on_success)
 {
@@ -933,55 +936,67 @@ file_editor::request_sel_match_brace (bo
 
 void
 file_editor::request_completion (bool)
 {
   emit fetab_completion (_tab_widget->currentWidget ());
 }
 
 void
-file_editor::handle_mru_add_file (const QString& file_name)
+file_editor::handle_mru_add_file (const QString& file_name,
+                                  const QString& encoding)
 {
-  if (_mru_files.count () && _mru_files.at (0) == file_name)
-    return;  // the first entry is already the actual filename
+  int index;
+  while ((index = _mru_files.indexOf (file_name)) >= 0)
+    {
+      _mru_files.removeAt (index);
+      _mru_files_encodings.removeAt (index);
+    }
 
-  _mru_files.removeAll (file_name);
   _mru_files.prepend (file_name);
+  _mru_files_encodings.prepend (encoding);
 
   mru_menu_update ();
 }
 
 void
 file_editor::mru_menu_update (void)
 {
   int num_files = qMin (_mru_files.size (), int (MaxMRUFiles));
 
   // configure and show active actions of mru-menu
   for (int i = 0; i < num_files; ++i)
     {
       QString text = tr ("&%1 %2").
                      arg ((i+1) % int (MaxMRUFiles)).arg (_mru_files.at (i));
       _mru_file_actions[i]->setText (text);
-      _mru_file_actions[i]->setData (_mru_files.at (i));
+
+      QStringList action_data;
+      action_data << _mru_files.at (i) << _mru_files_encodings.at (i);
+      _mru_file_actions[i]->setData (action_data);
+
       _mru_file_actions[i]->setVisible (true);
     }
 
   // hide unused mru-menu entries
   for (int j = num_files; j < MaxMRUFiles; ++j)
     _mru_file_actions[j]->setVisible (false);
 
   // delete entries in string-list beyond MaxMRUFiles
   while (_mru_files.size () > MaxMRUFiles)
-    _mru_files.removeLast ();
+    {
+      _mru_files.removeLast ();
+      _mru_files_encodings.removeLast ();
+    }
 
   // save actual mru-list in settings
   QSettings *settings = resource_manager::get_settings ();
 
-  // FIXME: what should happen if settings is 0?
   settings->setValue ("editor/mru_file_list", _mru_files);
+  settings->setValue ("editor/mru_file_encodings", _mru_files_encodings);
   settings->sync ();
 }
 
 void
 file_editor::handle_file_name_changed (const QString& fname,
                                        const QString& tip)
 {
   QObject *fileEditorTab = sender ();
@@ -1325,16 +1340,26 @@ file_editor::construct (void)
 #ifdef HAVE_QTABWIDGET_SETMOVABLE
   _tab_widget->setMovable (true);
 #endif
 
 
   // the mru-list and an empty array of actions
   QSettings *settings = resource_manager::get_settings ();
   _mru_files = settings->value ("editor/mru_file_list").toStringList ();
+  _mru_files_encodings = settings->value ("editor/mru_file_encodings")
+                                   .toStringList ();
+
+  if (_mru_files_encodings.count () != _mru_files.count ())
+    { // encodings don't have the same count -> do not use them!
+      _mru_files_encodings = QStringList ();
+      for (int i = 0; i < _mru_files.count (); i++)
+        _mru_files_encodings << QString ();
+    }
+
   for (int i = 0; i < MaxMRUFiles; ++i)
     {
       _mru_file_actions[i] = new QAction (this);
       _mru_file_actions[i]->setVisible (false);
     }
 
   // menu bar
 
@@ -1739,18 +1764,18 @@ file_editor::add_file_editor_tab (file_e
   connect (f, SIGNAL (add_filename_to_list (const QString&,
                                             const QString&, QWidget*)),
            this, SLOT (handle_add_filename_to_list (const QString&,
                                                     const QString&, QWidget*)));
 
   connect (f, SIGNAL (editor_check_conflict_save (const QString&, bool)),
            this, SLOT (check_conflict_save (const QString&, bool)));
 
-  connect (f, SIGNAL (mru_add_file (const QString&)),
-           this, SLOT (handle_mru_add_file (const QString&)));
+  connect (f, SIGNAL (mru_add_file (const QString&, const QString&)),
+           this, SLOT (handle_mru_add_file (const QString&, const QString&)));
 
   connect (f, SIGNAL (run_file_signal (const QFileInfo&)),
            main_win (), SLOT (run_file_in_terminal (const QFileInfo&)));
 
   connect (f, SIGNAL (request_open_file (const QString&)),
            this, SLOT (request_open_file (const QString&)));
 
   connect (f, SIGNAL (set_global_edit_shortcuts_signal (bool)),
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -215,17 +215,17 @@ public slots:
   void handle_file_name_changed (const QString& fileName,
                                  const QString& toolTip);
   void handle_tab_close_request (int index);
   void handle_tab_remove_request (void);
   void handle_add_filename_to_list (const QString& fileName,
                                     const QString& encoding, QWidget *ID);
   void active_tab_changed (int index);
   void handle_editor_state_changed (bool enableCopy, bool is_octave_file);
-  void handle_mru_add_file (const QString& file_name);
+  void handle_mru_add_file (const QString& file_name, const QString& encoding);
   void check_conflict_save (const QString& fileName, bool remove_on_success);
 
   void handle_insert_debugger_pointer_request (const QString& file, int line);
   void handle_delete_debugger_pointer_request (const QString& file, int line);
   void handle_update_breakpoint_marker_request (bool insert,
                                                 const QString& file, int line);
 
   void handle_edit_file_request (const QString& file);
@@ -402,11 +402,12 @@ private:
   int _marker_breakpoint;
 
   QString _file_encoding;
 
   enum { MaxMRUFiles = 10 };
   QMenu *_mru_file_menu;
   QAction *_mru_file_actions[MaxMRUFiles];
   QStringList _mru_files;
+  QStringList _mru_files_encodings;
 };
 
 #endif // FILEEDITORMDISUBWINDOW_H
