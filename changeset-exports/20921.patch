# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1450308106 18000
#      Wed Dec 16 18:21:46 2015 -0500
# Node ID 4d3daf7e43f3e586553de30190146f6c117f592b
# Parent  561fd20f121c9d004279958b8606a7684a5e8fb9
eliminate trailing whitespace in source files

* data.cc, graphics.cc, lu.cc, mappers.cc, max.cc, typecast.cc,
ov-classdef.cc, ov-usr-fcn.cc: Eliminate trailing whitespace.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -3443,17 +3443,17 @@ complex ([1, 2], [3, 4])\n\
                                          (result));
                 }
               else
                 {
                   const FloatNDArray im_val = im.float_array_value ();
 
                   if (re_val.dims () != im_val.dims ())
                     error ("complex: dimension mismatch");
-                  
+
                   FloatComplexNDArray result (re_val.dims (),
                                               FloatComplex ());
 
                   for (octave_idx_type i = 0; i < re_val.numel (); i++)
                     result.xelem (i) = FloatComplex (re_val(i),
                                                      im_val(i));
 
                   retval = octave_value (new octave_float_complex_matrix
@@ -6404,17 +6404,17 @@ ordered lists.\n\
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
 
   sortmode smode = ASCENDING;
   bool return_idx = (nargout > 1);
-  bool have_sortmode = (nargin > 1 && args(1).is_string ()); 
+  bool have_sortmode = (nargin > 1 && args(1).is_string ());
   octave_value arg = args(0);
 
   int dim = 0;
   if (nargin > 1)
     {
       if (have_sortmode)
         {
           std::string mode = args(1).string_value ();
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2993,17 +2993,17 @@ base_properties::set_dynamic (const case
 property
 base_properties::get_property_dynamic (const caseless_str& pname)
 {
   std::map<caseless_str, property, cmp_caseless_str>::const_iterator it =
     all_props.find (pname);
 
   if (it == all_props.end ())
     error ("get_property: unknown property \"%s\"", pname.c_str ());
-    
+
   return it->second;
 }
 
 void
 base_properties::set_parent (const octave_value& val)
 {
   double hp = val.xdouble_value ("set: parent must be a graphics handle");
 
diff --git a/libinterp/corefcn/lu.cc b/libinterp/corefcn/lu.cc
--- a/libinterp/corefcn/lu.cc
+++ b/libinterp/corefcn/lu.cc
@@ -209,17 +209,17 @@ information.\n\
               for (octave_idx_type i = 0; i < nc; i++)
                 Qinit(i) = i;
               SparseLU fact (m, Qinit, thres, false, true);
 
               if (nargout < 2)
                 retval(0) = fact.Y ();
               else
                 {
-                  retval.resize (nargout == 3 ? 3 : 2); 
+                  retval.resize (nargout == 3 ? 3 : 2);
                   retval(1)
                     = octave_value (
                         fact.U () * fact.Pc_mat ().transpose (),
                         MatrixType (MatrixType::Permuted_Upper,
                                     nc, fact.col_perm ()));
 
                   PermMatrix P = fact.Pr_mat ();
                   SparseMatrix L = fact.L ();
@@ -274,17 +274,17 @@ information.\n\
               for (octave_idx_type i = 0; i < nc; i++)
                 Qinit(i) = i;
               SparseComplexLU fact (m, Qinit, thres, false, true);
 
               if (nargout < 2)
                 retval(0) = fact.Y ();
               else
                 {
-                  retval.resize (nargout == 3 ? 3 : 2); 
+                  retval.resize (nargout == 3 ? 3 : 2);
                   retval(1)
                     = octave_value (
                         fact.U () * fact.Pc_mat ().transpose (),
                         MatrixType (MatrixType::Permuted_Upper,
                                     nc, fact.col_perm ()));
 
                   PermMatrix P = fact.Pr_mat ();
                   SparseComplexMatrix L = fact.L ();
diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -87,17 +87,17 @@ DEFUN (acos, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} acos (@var{x})\n\
 Compute the inverse cosine in radians for each element of @var{x}.\n\
 @seealso{cos, acosd}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).acos ());
 }
 
 /*
 %!shared rt2, rt3
 %! rt2 = sqrt (2);
 %! rt3 = sqrt (3);
 
@@ -133,17 +133,17 @@ DEFUN (acosh, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} acosh (@var{x})\n\
 Compute the inverse hyperbolic cosine for each element of @var{x}.\n\
 @seealso{cosh}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).acosh ());
 }
 
 /*
 %!test
 %! x = [1, 0, -1, 0];
 %! v = [0, pi/2*i, pi*i, pi/2*i];
 %! assert (acosh (x), v, sqrt (eps));
@@ -172,17 +172,17 @@ DEFUN (angle, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} angle (@var{z})\n\
 See @code{arg}.\n\
 @seealso{arg}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).arg ());
 }
 
 DEFUN (arg, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {} arg (@var{z})\n\
 @deftypefnx {} {} angle (@var{z})\n\
 Compute the argument, i.e., angle of @var{z}.\n\
@@ -204,17 +204,17 @@ arg (3 + 4i)\n\
      @result{} 0.92730\n\
 @end group\n\
 @end example\n\
 @seealso{abs}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).arg ());
 }
 
 /*
 %!assert (arg (1), 0)
 %!assert (arg (i), pi/2)
 %!assert (arg (-1), pi)
 %!assert (arg (-i), -pi/2)
@@ -240,17 +240,17 @@ DEFUN (asin, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} asin (@var{x})\n\
 Compute the inverse sine in radians for each element of @var{x}.\n\
 @seealso{sin, asind}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).asin ());
 }
 
 /*
 %!shared rt2, rt3
 %! rt2 = sqrt (2);
 %! rt3 = sqrt (3);
 
@@ -285,17 +285,17 @@ DEFUN (asinh, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} asinh (@var{x})\n\
 Compute the inverse hyperbolic sine for each element of @var{x}.\n\
 @seealso{sinh}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).asinh ());
 }
 
 /*
 %!test
 %! v = [0, pi/2*i, 0, -pi/2*i];
 %! x = [0, i, 0, -i];
 %! assert (asinh (x), v,  sqrt (eps));
@@ -313,17 +313,17 @@ DEFUN (atan, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} atan (@var{x})\n\
 Compute the inverse tangent in radians for each element of @var{x}.\n\
 @seealso{tan, atand}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).atan ());
 }
 
 /*
 %!shared rt2, rt3
 %! rt2 = sqrt (2);
 %! rt3 = sqrt (3);
 
@@ -345,17 +345,17 @@ DEFUN (atanh, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} atanh (@var{x})\n\
 Compute the inverse hyperbolic tangent for each element of @var{x}.\n\
 @seealso{tanh}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).atanh ());
 }
 
 /*
 %!test
 %! v = [0, 0];
 %! x = [0, 0];
 %! assert (atanh (x), v, sqrt (eps));
@@ -376,17 +376,17 @@ Compute the real cube root of each eleme
 \n\
 Unlike @code{@var{x}^(1/3)}, the result will be negative if @var{x} is\n\
 negative.\n\
 @seealso{nthroot}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).cbrt ());
 }
 
 /*
 %!assert (cbrt (64), 4)
 %!assert (cbrt (-125), -5)
 %!assert (cbrt (0), 0)
 %!assert (cbrt (Inf), Inf)
@@ -415,17 +415,17 @@ ceil ([-2.7, 2.7])\n\
     @result{} -2    3\n\
 @end group\n\
 @end example\n\
 @seealso{floor, round, fix}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).ceil ());
 }
 
 /*
 ## double precision
 %!assert (ceil ([2, 1.1, -1.1, -1]), [2, 2, -1, -1])
 
 ## complex double precison
@@ -453,17 +453,17 @@ The complex conjugate is defined as\n\
 @ifnottex\n\
 @code{conj (@var{z})} = @var{x} - @var{i}@var{y}.\n\
 @end ifnottex\n\
 @seealso{real, imag}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).conj ());
 }
 
 /*
 %!assert (conj (1), 1)
 %!assert (conj (i), -i)
 %!assert (conj (1+i), 1-i)
 %!assert (conj (1-i), 1+i)
@@ -483,17 +483,17 @@ DEFUN (cos, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} cos (@var{x})\n\
 Compute the cosine for each element of @var{x} in radians.\n\
 @seealso{acos, cosd, cosh}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).cos ());
 }
 
 /*
 %!shared rt2, rt3
 %! rt2 = sqrt (2);
 %! rt3 = sqrt (3);
 
@@ -517,17 +517,17 @@ DEFUN (cosh, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} cosh (@var{x})\n\
 Compute the hyperbolic cosine for each element of @var{x}.\n\
 @seealso{acosh, sinh, tanh}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).cosh ());
 }
 
 /*
 %!test
 %! x = [0, pi/2*i, pi*i, 3*pi/2*i];
 %! v = [1, 0, -1, 0];
 %! assert (cosh (x), v, sqrt (eps));
@@ -565,17 +565,17 @@ erf (z) = --------- *  | e^(-t^2) dt\n\
 @end example\n\
 \n\
 @end ifnottex\n\
 @seealso{erfc, erfcx, erfi, dawson, erfinv, erfcinv}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).erf ());
 }
 
 /*
 %!test
 %! a = -1i*sqrt (-1/(6.4187*6.4187));
 %! assert (erf (a), erf (real (a)));
 
@@ -620,17 +620,17 @@ The inverse error function is defined su
 @example\n\
 erf (@var{y}) == @var{x}\n\
 @end example\n\
 @seealso{erf, erfc, erfcx, erfi, dawson, erfcinv}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).erfinv ());
 }
 
 /*
 ## middle region
 %!assert (erf (erfinv ([-0.9 -0.3 0 0.4 0.8])), [-0.9 -0.3 0 0.4 0.8], eps)
 %!assert (erf (erfinv (single ([-0.9 -0.3 0 0.4 0.8]))), single ([-0.9 -0.3 0 0.4 0.8]), eps ("single"))
 ## tail region
@@ -657,17 +657,17 @@ The inverse complementary error function
 @example\n\
 erfc (@var{y}) == @var{x}\n\
 @end example\n\
 @seealso{erfc, erf, erfcx, erfi, dawson, erfinv}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).erfcinv ());
 }
 
 /*
 ## middle region
 %!assert (erfc (erfcinv ([1.9 1.3 1 0.6 0.2])), [1.9 1.3 1 0.6 0.2], eps)
 %!assert (erfc (erfcinv (single ([1.9 1.3 1 0.6 0.2]))), single ([1.9 1.3 1 0.6 0.2]), eps ("single"))
 ## tail region
@@ -696,17 +696,17 @@ The complementary error function is defi
 @ifnottex\n\
 @w{@code{1 - erf (@var{z})}}.\n\
 @end ifnottex\n\
 @seealso{erfcinv, erfcx, erfi, dawson, erf, erfinv}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).erfc ());
 }
 
 /*
 %!test
 %! a = -1i*sqrt (-1/(6.4187*6.4187));
 %! assert (erfc (a), erfc (real (a)));
 
@@ -732,17 +732,17 @@ exp (z^2) * erfc (z)\n\
 @end example\n\
 \n\
 @end ifnottex\n\
 @seealso{erfc, erf, erfi, dawson, erfinv, erfcinv}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).erfcx ());
 }
 
 /*
 
 %!test
 %! x = [1+2i,-1+2i,1e-6+2e-6i,0+2i];
 %! assert (erfcx (x), exp (x.^2) .* erfc(x), -1.e-10);
@@ -774,17 +774,17 @@ The imaginary error function is defined 
 @end example\n\
 \n\
 @end ifnottex\n\
 @seealso{erfc, erf, erfcx, dawson, erfinv, erfcinv}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).erfi ());
 }
 
 /*
 
 %!test
 %! x = [-0.1, 0.1, 1, 1+2i,-1+2i,1e-6+2e-6i,0+2i];
 %! assert (erfi (x), -i * erf(i*x), -1.e-10);
@@ -811,17 +811,17 @@ The Dawson function is defined as\n\
 @end example\n\
 \n\
 @end ifnottex\n\
 @seealso{erfc, erf, erfcx, erfi, erfinv, erfcinv}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).dawson ());
 }
 
 /*
 
 %!test
 %! x = [0.1, 1, 1+2i,-1+2i,1e-4+2e-4i,0+2i];
 %! v = [0.099335992397852861, 0.53807950691, -13.38892731648-11.828715104i, 13.38892731648-11.828715104i, 0.0001000000073333+0.000200000001333i, 48.160012114291i];
@@ -845,17 +845,17 @@ Compute\n\
 for each element of @var{x}.\n\
 \n\
 To compute the matrix exponential, see @ref{Linear Algebra}.\n\
 @seealso{log}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).exp ());
 }
 
 /*
 %!assert (exp ([0, 1, -1, -1000]), [1, e, 1/e, 0], sqrt (eps))
 %!assert (exp (1+i), e * (cos (1) + sin (1) * i), sqrt (eps))
 %!assert (exp (single ([0, 1, -1, -1000])), single ([1, e, 1/e, 0]), sqrt (eps ("single")))
 %!assert (exp (single (1+i)), single (e * (cos (1) + sin (1) * i)), sqrt (eps ("single")))
@@ -878,17 +878,17 @@ Compute\n\
 @code{exp (@var{x}) - 1}\n\
 @end ifnottex\n\
 accurately in the neighborhood of zero.\n\
 @seealso{exp}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).expm1 ());
 }
 
 /*
 %!assert (expm1 (2*eps), 2*eps, 1e-29)
 
 %!assert (expm1 ([Inf, -Inf, NaN]), [Inf -1 NaN])
 %!assert (expm1 (single ([Inf, -Inf, NaN])), single ([Inf -1 NaN]))
@@ -911,17 +911,17 @@ isfinite ([13, Inf, NA, NaN])\n\
      @result{} [ 1, 0, 0, 0 ]\n\
 @end group\n\
 @end example\n\
 @seealso{isinf, isnan, isna}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).finite ());
 }
 
 /*
 %!assert (!isfinite (Inf))
 %!assert (!isfinite (NaN))
 %!assert (isfinite (rand (1,10)))
 
@@ -947,17 +947,17 @@ fix ([-2.7, 2.7])\n\
    @result{} -2    2\n\
 @end group\n\
 @end example\n\
 @seealso{ceil, floor, round}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).fix ());
 }
 
 /*
 %!assert (fix ([1.1, 1, -1.1, -1]), [1, 1, -1, -1])
 %!assert (fix ([1.1+1.1i, 1+i, -1.1-1.1i, -1-i]), [1+i, 1+i, -1-i, -1-i])
 %!assert (fix (single ([1.1, 1, -1.1, -1])), single ([1, 1, -1, -1]))
 %!assert (fix (single ([1.1+1.1i, 1+i, -1.1-1.1i, -1-i])), single ([1+i, 1+i, -1-i, -1-i]))
@@ -980,17 +980,17 @@ floor ([-2.7, 2.7])\n\
      @result{} -3    2\n\
 @end group\n\
 @end example\n\
 @seealso{ceil, round, fix}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).floor ());
 }
 
 /*
 %!assert (floor ([2, 1.1, -1.1, -1]), [2, 1, -2, -1])
 %!assert (floor ([2+2i, 1.1+1.1i, -1.1-1.1i, -1-i]), [2+2i, 1+i, -2-2i, -1-i])
 %!assert (floor (single ([2, 1.1, -1.1, -1])), single ([2, 1, -2, -1]))
 %!assert (floor (single ([2+2i, 1.1+1.1i, -1.1-1.1i, -1-i])), single ([2+2i, 1+i, -2-2i, -1-i]))
@@ -1029,17 +1029,17 @@ input values.  In many cases it may be p
 logarithm of the gamma function (@code{gammaln}) in calculations to minimize\n\
 loss of precision.  The final result is then\n\
 @code{exp (@var{result_using_gammaln}).}\n\
 @seealso{gammainc, gammaln, factorial}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).gamma ());
 }
 
 /*
 %!test
 %! a = -1i*sqrt (-1/(6.4187*6.4187));
 %! assert (gamma (a), gamma (real (a)));
 
@@ -1072,17 +1072,17 @@ DEFUN (imag, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} imag (@var{z})\n\
 Return the imaginary part of @var{z} as a real number.\n\
 @seealso{real, conj}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).imag ());
 }
 
 /*
 %!assert (imag (1), 0)
 %!assert (imag (i), 1)
 %!assert (imag (1+i), 1)
 %!assert (imag ([i, 1; 1, i]), full (eye (2)))
@@ -1103,17 +1103,17 @@ Return a logical array which is true whe
 letters or digits and false where they are not.\n\
 \n\
 This is equivalent to (@code{isalpha (@var{s}) | isdigit (@var{s})}).\n\
 @seealso{isalpha, isdigit, ispunct, isspace, iscntrl}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).xisalnum ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(toascii ("A":"Z") + 1) = true;
@@ -1132,17 +1132,17 @@ Return a logical array which is true whe
 letters and false where they are not.\n\
 \n\
 This is equivalent to (@code{islower (@var{s}) | isupper (@var{s})}).\n\
 @seealso{isdigit, ispunct, isspace, iscntrl, isalnum, islower, isupper}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).xisalpha ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(toascii ("A":"Z") + 1) = true;
@@ -1158,17 +1158,17 @@ DEFUNX ("isascii", Fisascii, args, ,
 @deftypefn {} {} isascii (@var{s})\n\
 Return a logical array which is true where the elements of @var{s} are\n\
 ASCII characters (in the range 0 to 127 decimal) and false where they are\n\
 not.\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).xisascii ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = true (1, 128);
 %! assert (isascii (charset), result);
@@ -1182,17 +1182,17 @@ DEFUNX ("iscntrl", Fiscntrl, args, ,
 @deftypefn {} {} iscntrl (@var{s})\n\
 Return a logical array which is true where the elements of @var{s} are\n\
 control characters and false where they are not.\n\
 @seealso{ispunct, isspace, isalpha, isdigit}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).xiscntrl ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(1:32) = true;
@@ -1208,17 +1208,17 @@ DEFUNX ("isdigit", Fisdigit, args, ,
 @deftypefn {} {} isdigit (@var{s})\n\
 Return a logical array which is true where the elements of @var{s} are\n\
 decimal digits (0-9) and false where they are not.\n\
 @seealso{isxdigit, isalpha, isletter, ispunct, isspace, iscntrl}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).xisdigit ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(toascii ("0":"9") + 1) = true;
@@ -1242,17 +1242,17 @@ isinf ([13, Inf, NA, NaN])\n\
       @result{} [ 0, 1, 0, 0 ]\n\
 @end group\n\
 @end example\n\
 @seealso{isfinite, isnan, isna}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).isinf ());
 }
 
 /*
 %!assert (isinf (Inf))
 %!assert (!isinf (NaN))
 %!assert (!isinf (NA))
 %!assert (isinf (rand (1,10)), false (1,10))
@@ -1274,17 +1274,17 @@ DEFUNX ("isgraph", Fisgraph, args, ,
 Return a logical array which is true where the elements of @var{s} are\n\
 printable characters (but not the space character) and false where they are\n\
 not.\n\
 @seealso{isprint}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).xisgraph ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(34:127) = true;
@@ -1299,17 +1299,17 @@ DEFUNX ("islower", Fislower, args, ,
 @deftypefn {} {} islower (@var{s})\n\
 Return a logical array which is true where the elements of @var{s} are\n\
 lowercase letters and false where they are not.\n\
 @seealso{isupper, isalpha, isletter, isalnum}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).xislower ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(toascii ("a":"z") + 1) = true;
@@ -1333,17 +1333,17 @@ isna ([13, Inf, NA, NaN])\n\
      @result{} [ 0, 0, 1, 0 ]\n\
 @end group\n\
 @end example\n\
 @seealso{isnan, isinf, isfinite}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).isna ());
 }
 
 /*
 %!assert (!isna (Inf))
 %!assert (!isna (NaN))
 %!assert (isna (NA))
 %!assert (isna (rand (1,10)), false (1,10))
@@ -1373,17 +1373,17 @@ isnan ([13, Inf, NA, NaN])\n\
       @result{} [ 0, 0, 1, 1 ]\n\
 @end group\n\
 @end example\n\
 @seealso{isna, isinf, isfinite}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).isnan ());
 }
 
 /*
 %!assert (!isnan (Inf))
 %!assert (isnan (NaN))
 %!assert (isnan (NA))
 %!assert (isnan (rand (1,10)), false (1,10))
@@ -1405,17 +1405,17 @@ DEFUNX ("isprint", Fisprint, args, ,
 Return a logical array which is true where the elements of @var{s} are\n\
 printable characters (including the space character) and false where they\n\
 are not.\n\
 @seealso{isgraph}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).xisprint ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(33:127) = true;
@@ -1430,17 +1430,17 @@ DEFUNX ("ispunct", Fispunct, args, ,
 @deftypefn {} {} ispunct (@var{s})\n\
 Return a logical array which is true where the elements of @var{s} are\n\
 punctuation characters and false where they are not.\n\
 @seealso{isalpha, isdigit, isspace, iscntrl}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).xispunct ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(34:48) = true;
@@ -1459,17 +1459,17 @@ DEFUNX ("isspace", Fisspace, args, ,
 Return a logical array which is true where the elements of @var{s} are\n\
 whitespace characters (space, formfeed, newline, carriage return, tab, and\n\
 vertical tab) and false where they are not.\n\
 @seealso{iscntrl, ispunct, isalpha, isdigit}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).xisspace ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(toascii (" \f\n\r\t\v") + 1) = true;
@@ -1484,17 +1484,17 @@ DEFUNX ("isupper", Fisupper, args, ,
 @deftypefn {} {} isupper (@var{s})\n\
 Return a logical array which is true where the elements of @var{s} are\n\
 uppercase letters and false where they are not.\n\
 @seealso{islower, isalpha, isletter, isalnum}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).xisupper ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(toascii ("A":"Z") + 1) = true;
@@ -1509,17 +1509,17 @@ DEFUNX ("isxdigit", Fisxdigit, args, ,
 @deftypefn {} {} isxdigit (@var{s})\n\
 Return a logical array which is true where the elements of @var{s} are\n\
 hexadecimal digits (0-9 and @nospell{a-fA-F}).\n\
 @seealso{isdigit}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).xisxdigit ());
 }
 
 /*
 %!test
 %! charset = char (0:127);
 %! result = false (1, 128);
 %! result(toascii ("A":"F") + 1) = true;
@@ -1536,17 +1536,17 @@ DEFUN (lgamma, args, ,
 @deftypefn  {} {} gammaln (@var{x})\n\
 @deftypefnx {} {} lgamma (@var{x})\n\
 Return the natural logarithm of the gamma function of @var{x}.\n\
 @seealso{gamma, gammainc}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).lgamma ());
 }
 
 /*
 %!test
 %! a = -1i*sqrt (-1/(6.4187*6.4187));
 %! assert (gammaln (a), gammaln (real (a)));
 
@@ -1587,17 +1587,17 @@ Compute the natural logarithm,\n\
 for each element of @var{x}.\n\
 \n\
 To compute the matrix logarithm, see @ref{Linear Algebra}.\n\
 @seealso{exp, log1p, log2, log10, logspace}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).log ());
 }
 
 /*
 %!assert (log ([1, e, e^2]), [0, 1, 2], sqrt (eps))
 %!assert (log ([-0.5, -1.5, -2.5]), log ([0.5, 1.5, 2.5]) + pi*1i, sqrt (eps))
 
 %!assert (log (single ([1, e, e^2])), single ([0, 1, 2]), sqrt (eps ("single")))
@@ -1611,17 +1611,17 @@ DEFUN (log10, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} log10 (@var{x})\n\
 Compute the base-10 logarithm of each element of @var{x}.\n\
 @seealso{log, log2, logspace, exp}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).log10 ());
 }
 
 /*
 %!assert (log10 ([0.01, 0.1, 1, 10, 100]), [-2, -1, 0, 1, 2], sqrt (eps))
 %!assert (log10 (single ([0.01, 0.1, 1, 10, 100])), single ([-2, -1, 0, 1, 2]), sqrt (eps ("single")))
 
 %!error log10 ()
@@ -1639,17 +1639,17 @@ Compute\n\
 @code{log (1 + @var{x})}\n\
 @end ifnottex\n\
 accurately in the neighborhood of zero.\n\
 @seealso{log, exp, expm1}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).log1p ());
 }
 
 /*
 %!assert (log1p ([0, 2*eps, -2*eps]), [0, 2*eps, -2*eps], 1e-29)
 %!assert (log1p (single ([0, 2*eps, -2*eps])), single ([0, 2*eps, -2*eps]), 1e-29)
 
 %!error log1p ()
@@ -1660,17 +1660,17 @@ DEFUN (real, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} real (@var{z})\n\
 Return the real part of @var{z}.\n\
 @seealso{imag, conj}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).real ());
 }
 
 /*
 %!assert (real (1), 1)
 %!assert (real (i), 0)
 %!assert (real (1+i), 1)
 %!assert (real ([1, i; i, 1]), full (eye (2)))
@@ -1699,17 +1699,17 @@ round ([-2.7, 2.7])\n\
      @result{} -3    3\n\
 @end group\n\
 @end example\n\
 @seealso{ceil, floor, fix, roundb}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).round ());
 }
 
 /*
 %!assert (round (1), 1)
 %!assert (round (1.1), 1)
 %!assert (round (5.5), 6)
 %!assert (round (i), i)
@@ -1737,17 +1737,17 @@ integers, return the even one (banker's 
 \n\
 If @var{x} is complex,\n\
 return @code{roundb (real (@var{x})) + roundb (imag (@var{x})) * I}.\n\
 @seealso{round}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).roundb ());
 }
 
 /*
 %!assert (roundb (1), 1)
 %!assert (roundb (1.1), 1)
 %!assert (roundb (1.5), 2)
 %!assert (roundb (4.5), 4)
@@ -1797,17 +1797,17 @@ For complex arguments, @code{sign} retur
 Note that @code{sign (-0.0)} is 0.  Although IEEE 754 floating point\n\
 allows zero to be signed, 0.0 and -0.0 compare equal.  If you must test\n\
 whether zero is signed, use the @code{signbit} function.\n\
 @seealso{signbit}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).signum ());
 }
 
 /*
 %!assert (sign (-2) , -1)
 %!assert (sign (0), 0)
 %!assert (sign (3), 1)
 %!assert (sign ([1, -pi; e, 0]), [1, -1; 1, 0])
@@ -1864,17 +1864,17 @@ DEFUN (sin, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} sin (@var{x})\n\
 Compute the sine for each element of @var{x} in radians.\n\
 @seealso{asin, sind, sinh}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).sin ());
 }
 
 /*
 %!shared rt2, rt3
 %! rt2 = sqrt (2);
 %! rt3 = sqrt (3);
 
@@ -1896,17 +1896,17 @@ DEFUN (sinh, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} sinh (@var{x})\n\
 Compute the hyperbolic sine for each element of @var{x}.\n\
 @seealso{asinh, cosh, tanh}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).sinh ());
 }
 
 /*
 %!test
 %! x = [0, pi/2*i, pi*i, 3*pi/2*i];
 %! v = [0, i, 0, -i];
 %! assert (sinh (x), v, sqrt (eps));
@@ -1928,17 +1928,17 @@ Compute the square root of each element 
 If @var{x} is negative, a complex result is returned.\n\
 \n\
 To compute the matrix square root, see @ref{Linear Algebra}.\n\
 @seealso{realsqrt, nthroot}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).sqrt ());
 }
 
 /*
 %!assert (sqrt (4), 2)
 %!assert (sqrt (-1), i)
 %!assert (sqrt (1+i), exp (0.5 * log (1+i)), sqrt (eps))
 %!assert (sqrt ([4, -4; i, 1-i]), [2, 2i; exp(0.5 * log (i)), exp(0.5 * log (1-i))], sqrt (eps))
@@ -1956,17 +1956,17 @@ DEFUN (tan, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} tan (@var{z})\n\
 Compute the tangent for each element of @var{x} in radians.\n\
 @seealso{atan, tand, tanh}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).tan ());
 }
 
 /*
 %!shared rt2, rt3
 %! rt2 = sqrt (2);
 %! rt3 = sqrt (3);
 
@@ -1988,17 +1988,17 @@ DEFUN (tanh, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} tanh (@var{x})\n\
 Compute hyperbolic tangent for each element of @var{x}.\n\
 @seealso{atanh, sinh, cosh}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).tanh ());
 }
 
 /*
 %!test
 %! x = [0, pi*i];
 %! v = [0, 0];
 %! assert (tanh (x), v, sqrt (eps));
@@ -2026,17 +2026,17 @@ toascii (\"ASCII\")\n\
 @end group\n\
 \n\
 @end example\n\
 @seealso{char}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).xtoascii ());
 }
 
 /*
 %!assert (toascii (char (0:127)), 0:127)
 %!assert (toascii (" ":"@"), 32:64)
 %!assert (toascii ("A":"Z"), 65:90)
 %!assert (toascii ("[":"`"), 91:96)
@@ -2063,17 +2063,17 @@ tolower (\"MiXeD cAsE 123\")\n\
       @result{} \"mixed case 123\"\n\
 @end group\n\
 @end example\n\
 @seealso{toupper}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).xtolower ());
 }
 
 DEFALIAS (lower, tolower);
 
 /*
 %!assert (tolower ("OCTAVE"), "octave")
 %!assert (tolower ("123OCTave!_&"), "123octave!_&")
@@ -2122,17 +2122,17 @@ toupper (\"MiXeD cAsE 123\")\n\
       @result{} \"MIXED CASE 123\"\n\
 @end group\n\
 @end example\n\
 @seealso{tolower}\n\
 @end deftypefn")
 {
   if (args.length () != 1)
     print_usage ();
-  
+
   return octave_value (args(0).xtoupper ());
 }
 
 DEFALIAS (upper, toupper);
 
 /*
 %!assert (toupper ("octave"), "OCTAVE")
 %!assert (toupper ("123OCTave!_&"), "123OCTAVE!_&")
diff --git a/libinterp/corefcn/max.cc b/libinterp/corefcn/max.cc
--- a/libinterp/corefcn/max.cc
+++ b/libinterp/corefcn/max.cc
@@ -224,17 +224,17 @@ do_minmax_bin_op<charNDArray> (const oct
 static octave_value_list
 do_minmax_body (const octave_value_list& args,
                 int nargout, bool ismin)
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
-  
+
   octave_value_list retval (nargout > 1 ? 2 : 1);
 
   const char *func = ismin ? "min" : "max";
 
   if (nargin == 3 || nargin == 1)
     {
       octave_value arg = args(0);
       int dim = -1;
diff --git a/libinterp/corefcn/typecast.cc b/libinterp/corefcn/typecast.cc
--- a/libinterp/corefcn/typecast.cc
+++ b/libinterp/corefcn/typecast.cc
@@ -439,17 +439,17 @@ The result is a row vector if @var{x} is
 column vector.\n\
 @seealso{bitpack, typecast}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () != 1)
     print_usage ();
-  
+
   if (! (args(0).is_numeric_type () || args(0).is_string ()))
     error ("bitunpack: argument must be a number or a string");
 
   octave_value array = args(0);
 
   if (array.is_string ())
     retval = do_bitunpack (array.char_array_value ());
   else if (array.is_integer_type ())
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1832,17 +1832,17 @@ cdef_object_scalar::is_partially_constru
   for (std::list<cdef_class>::const_iterator lit = it->second.begin ();
        lit != it->second.end (); ++lit)
     if (! is_constructed_for (*lit))
       return false;
 
   return true;
 }
 
-inline void 
+inline void
 cdef_object_scalar::mark_as_constructed (const cdef_class& cls)
 {
   ctor_list.erase (cls);
 }
 
 handle_cdef_object::~handle_cdef_object (void)
 {
 #if DEBUG_TRACE
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -1031,17 +1031,17 @@ static bool val_in_table (const Matrix& 
   octave_idx_type i = table.lookup (val, ASCENDING);
   return (i > 0 && table(i-1) == val);
 }
 
 static bool isargout1 (int nargout, const Matrix& ignored, double k)
 {
   if (k != xround (k) || k <= 0)
     error ("isargout: K must be a positive integer");
-  
+
   return (k == 1 || k <= nargout) && ! val_in_table (ignored, k);
 }
 
 DEFUN (isargout, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} isargout (@var{k})\n\
 Within a function, return a logical value indicating whether the argument\n\
 @var{k} will be assigned to a variable on output.\n\
