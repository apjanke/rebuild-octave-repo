# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1491577241 14400
#      Fri Apr 07 11:00:41 2017 -0400
# Node ID 0cd0db82123d07d17ccd56db28b0a5700c429e4e
# Parent  ffbeda5a6502cd3ec72b5dd3afcaf19509708208
distinguish between reported bugs and known failures in tests

* __run_test_suite__.m, test.m: Display additional info to distinguish
  reported bugs from known failures.  Return separte counts for each.

diff --git a/scripts/testfun/__run_test_suite__.m b/scripts/testfun/__run_test_suite__.m
--- a/scripts/testfun/__run_test_suite__.m
+++ b/scripts/testfun/__run_test_suite__.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {} __run_test_suite__ (@var{fcndirs}, @var{fixedtestdirs})
 ## Undocumented internal function.
 ## @end deftypefn
 
-function [pass, fail, xfail, skip, rtskip] = __run_test_suite__ (fcndirs, fixedtestdirs)
+function [pass, fail, xfail, xbug, skip, rtskip] = __run_test_suite__ (fcndirs, fixedtestdirs)
 
   testsdir = __octave_config_info__ ("octtestsdir");
   libinterptestdir = fullfile (testsdir, "libinterp");
   liboctavetestdir = fullfile (testsdir, "liboctave");
   fixedtestdir = fullfile (testsdir, "fixed");
   fcnfiledir = __octave_config_info__ ("fcnfiledir");
   if (nargin == 0)
     fcndirs = { liboctavetestdir, libinterptestdir, fcnfiledir };
@@ -48,54 +48,60 @@ function [pass, fail, xfail, skip, rtski
     warning ("on", "quiet");
     warning ("off", "Octave:deprecated-function");
     try
       fid = fopen (logfile, "wt");
       if (fid < 0)
         error ("__run_test_suite__: could not open %s for writing", logfile);
       endif
       test ("", "explain", fid);
-      dp = dn = dxf = dsk = drtsk = 0;
+      dp = dn = dxf = dxb = dsk = drtsk = 0;
       puts ("\nIntegrated test scripts:\n\n");
       for i = 1:length (fcndirs)
-        [p, n, xf, sk, rtsk] = run_test_script (fid, fcndirs{i});
+        [p, n, xf, xb, sk, rtsk] = run_test_script (fid, fcndirs{i});
         dp += p;
         dn += n;
         dxf += xf;
+        dxb += xb;
         dsk += sk;
         drtsk += rtsk;
       endfor
       puts ("\nFixed test scripts:\n\n");
       for i = 1:length (fixedtestdirs)
-        [p, n, xf, sk, rtsk] = run_test_dir (fid, fixedtestdirs{i});
+        [p, n, xf, xb, sk, rtsk] = run_test_dir (fid, fixedtestdirs{i});
         dp += p;
         dn += n;
         dxf += xf;
+        dxb += xb;
         dsk += sk;
         drtsk += rtsk;
       endfor
       puts ("\nSummary:\n\n");
-      nfail = dn - dp - dxf;
-      printf ("  PASS                         %6d\n", dp);
-      printf ("  FAIL                         %6d\n", nfail);
+      nfail = dn - dp - dxf - dxb;
+      printf ("  %-30s %6d\n", "PASS", dp);
+      printf ("  %-30s %6d\n", "FAIL", nfail);
       if (dxf > 0)
-        printf ("  XFAIL                        %6d\n", dxf);
+        printf ("  %-30s %6d\n", "XFAIL (expected failure)", dxf);
+      endif
+      if (dxb > 0)
+        printf ("  %-30s %6d\n", "XFAIL (reported bug)", dxb);
       endif
       if (dsk > 0)
-        printf ("  SKIPPED (feature)            %6d\n", dsk);
+        printf ("  %-30s %6d\n", "SKIPPED (feature)", dsk);
       endif
       if (drtsk > 0)
-        printf ("  SKIPPED (run-time condition) %6d\n", drtsk);
+        printf ("  %-30s %6d\n", "SKIPPED (run-time condition)", drtsk);
       endif
       puts ("\n");
       printf ("See the file %s for additional details.\n", logfile);
-      if (dxf > 0)
+      if (dxf > 0 || dxb > 0)
         puts ("\n");
-        puts ("Items listed as XFAIL above are known bugs.\n");
-        puts ("Bug report numbers for them may be found in the log file:\n");
+        puts ("Items listed as XFAIL above are expected failures or\n");
+        puts ("bugs that have already been reported.  Bug report numbers\n");
+        puts ("for them may be found in the log file:\n");
         puts (logfile);
         puts ("\nPlease help improve Octave by contributing fixes for them.\n");
       endif
       if (dsk > 0 || drtsk > 0)
         puts ("\n");
         puts ("Tests are most often skipped because the features they require\n");
         puts ("have been disabled.  Features are most often disabled because\n");
         puts ("they require dependencies that were not present when Octave\n");
@@ -125,43 +131,47 @@ function [pass, fail, xfail, skip, rtski
     warning (orig_wstate);
     page_screen_output (pso);
   end_unwind_protect
 
   if (nargout > 0)
     pass = dp;
     fail = nfail;
     xfail = dxf;
+    xbug = dxb;
     skip = dsk;
     rtskip = drtsk;
   endif
 
 endfunction
 
 function print_test_file_name (nm)
   filler = repmat (".", 1, 60-length (nm));
   printf ("  %s %s", nm, filler);
 endfunction
 
-function print_pass_fail (p, n, xf, sk, rtsk)
+function print_pass_fail (p, n, xf, xb, sk, rtsk)
 
   if ((n + sk + rtsk) > 0)
     printf (" PASS   %4d/%-4d", p, n);
-    nfail = n - p - xf;
+    nfail = n - p - xf - xb;
     if (nfail > 0)
       printf ("\n%71s %3d", "FAIL ", nfail);
     endif
     if (sk > 0)
       printf ("\n%71s %3d", "(missing feature) SKIP ", sk);
     endif
     if (rtsk > 0)
       printf ("\n%71s %3d", "(run-time condition) SKIP ", rtsk);
     endif
     if (xf > 0)
-      printf ("\n%71s %3d", "XFAIL", xf);
+      printf ("\n%71s %3d", "(expected failure) XFAIL", xf);
+    endif
+    if (xb > 0)
+      printf ("\n%71s %3d", "(reported bug) XFAIL", xb);
     endif
   endif
   puts ("\n");
 
 endfunction
 
 function retval = has_functions (f)
 
@@ -193,106 +203,110 @@ function retval = has_tests (f)
   str = fread (fid, "*char")';
   fclose (fid);
   retval = ! isempty (regexp (str,
                               '^%!(assert|error|fail|test|xtest|warning)',
                               'lineanchors', 'once'));
 
 endfunction
 
-function [dp, dn, dxf, dsk, drtsk] = run_test_dir (fid, d)
+function [dp, dn, dxf, dxb, dsk, drtsk] = run_test_dir (fid, d)
   global files_with_tests;
   global files_with_no_tests;
 
   lst = dir (d);
-  dp = dn = dxf = dsk = drtsk = 0;
+  dp = dn = dxf = dxb = dsk = drtsk = 0;
   for i = 1:length (lst)
     nm = lst(i).name;
     if (lst(i).isdir
         && nm(1) != "." && ! strcmp (nm, "private") && nm(1) != "@")
-      [p, n, xf, sk, rtsk] = run_test_dir (fid, [d, filesep, nm]);
+      [p, n, xf, xb, sk, rtsk] = run_test_dir (fid, [d, filesep, nm]);
       dp += p;
       dn += n;
       dxf += xf;
+      dxb += xb;
       dsk += sk;
       drtsk += rtsk;
     endif
   endfor
 
   saved_dir = pwd ();
   unwind_protect
     cd (d);
     for i = 1:length (lst)
       nm = lst(i).name;
       if (length (nm) > 4 && strcmpi (nm((end-3):end), ".tst"))
-        p = n = xf = sk = rtsk = 0;
+        p = n = xf = xb = sk = rtsk = 0;
         ffnm = fullfile (d, nm);
         if (has_tests (ffnm))
           print_test_file_name (nm);
-          [p, n, xf, sk, rtsk] = test (nm, "quiet", fid);
-          print_pass_fail (p, n, xf, sk, rtsk);
+          [p, n, xf, xb, sk, rtsk] = test (nm, "quiet", fid);
+          print_pass_fail (p, n, xf, xb, sk, rtsk);
           files_with_tests(end+1) = ffnm;
         else
           files_with_no_tests(end+1) = ffnm;
         endif
         dp += p;
         dn += n;
         dxf += xf;
+        dxb += xb;
         dsk += sk;
         drtsk += rtsk;
       endif
     endfor
   unwind_protect_cleanup
     cd (saved_dir);
   end_unwind_protect
 
 endfunction
 
-function [dp, dn, dxf, dsk, drtsk] = run_test_script (fid, d)
+function [dp, dn, dxf, dxb, dsk, drtsk] = run_test_script (fid, d)
   global files_with_tests;
   global files_with_no_tests;
   global topsrcdir;
   global topbuilddir;
 
   lst = dir (d);
-  dp = dn = dxf = dsk = drtsk = 0;
+  dp = dn = dxf = dxb = dsk = drtsk = 0;
   for i = 1:length (lst)
     nm = lst(i).name;
     if (lst(i).isdir && nm(1) != ".")
-      [p, n, xf, sk, rtsk] = run_test_script (fid, [d, filesep, nm]);
+      [p, n, xf, xb, sk, rtsk] = run_test_script (fid, [d, filesep, nm]);
       dp += p;
       dn += n;
       dxf += xf;
+      dxb += xb;
       dsk += sk;
       drtsk += rtsk;
     endif
   endfor
 
   for i = 1:length (lst)
     nm = lst(i).name;
     ## Ignore hidden files
     if (nm(1) == '.')
       continue
     endif
     f = fullfile (d, nm);
     if ((length (nm) > 2 && strcmpi (nm((end-1):end), ".m"))
         || (length (nm) > 4
             && (   strcmpi (nm((end-3):end), "-tst")
                 || strcmpi (nm((end-3):end), ".tst"))))
-      p = n = xf = 0;
+      p = n = xf = xb = 0;
       ## Only run if it contains %!test, %!assert, %!error, %!fail, or %!warning
       if (has_tests (f))
         tmp = strrep (f, [topsrcdir, filesep], "");
         tmp = strrep (tmp, [topbuilddir, filesep], "");
         print_test_file_name (tmp);
-        [p, n, xf, sk, rtsk] = test (f, "quiet", fid);
-        print_pass_fail (p, n, xf, sk, rtsk);
+        [p, n, xf, xb, sk, rtsk] = test (f, "quiet", fid);
+        print_pass_fail (p, n, xf, xb, sk, rtsk);
         dp += p;
         dn += n;
         dxf += xf;
+        dxb += xb;
         dsk += sk;
         drtsk += rtsk;
         files_with_tests(end+1) = f;
       else
         ## To reduce the list length, only mark .cc files that contain
         ## DEFUN definitions.
         files_with_no_tests(end+1) = f;
       endif
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -17,17 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} test @var{name}
 ## @deftypefnx {} {} test @var{name} quiet|normal|verbose
 ## @deftypefnx {} {} test ("@var{name}", "quiet|normal|verbose", @var{fid})
 ## @deftypefnx {} {} test ("@var{name}", "quiet|normal|verbose", @var{fname})
 ## @deftypefnx {} {@var{success} =} test (@dots{})
-## @deftypefnx {} {[@var{n}, @var{nmax}, @var{nxfail}, @var{nskip}, @var{nrtskip}] =} test (@dots{})
+## @deftypefnx {} {[@var{n}, @var{nmax}, @var{nxfail}, @var{nbug}, @var{nskip}, @var{nrtskip}] =} test (@dots{})
 ## @deftypefnx {} {[@var{code}, @var{idx}] =} test ("@var{name}", "grabdemo")
 ## @deftypefnx {} {} test ([], "explain", @var{fid})
 ## @deftypefnx {} {} test ([], "explain", @var{fname})
 ##
 ## Perform built-in self-tests from the first file in the loadpath matching
 ## @var{name}.
 ##
 ## @code{test} can be called in either command or functional form.  The exact
@@ -76,19 +76,20 @@
 ## (@var{fname}) or an open file descriptor ID (@var{fid}).  To enable batch
 ## processing, but still print the results to the screen, use @code{stdout} for
 ## @var{fid}.
 ##
 ## When called with just a single output argument @var{success}, @code{test}
 ## returns true if all of the tests were successful.  If called with more
 ## than one output argument then the number of successful tests (@var{n}),
 ## the total number of tests in the file (@var{nmax}), the number of xtest
-## failures (@var{nxfail}), the number of tests skipped due to missing
-## features (@var{nskip}), and the number of tests skipped due to
-## run-time conditions (@var{nrtskip}) are returned.
+## failures (@var{nxfail}), the number of tests failed due known bugs
+## (@var{nbug}), the number of tests skipped due to missing features
+## (@var{nskip}), and the number of tests skipped due to run-time
+## conditions (@var{nrtskip}) are returned.
 ##
 ## Example
 ##
 ## @example
 ## @group
 ## test sind
 ## @result{}
 ## PASSES 5 out of 5 tests
@@ -114,17 +115,17 @@
 ##
 ## @seealso{assert, fail, demo, example, error}
 ## @end deftypefn
 
 ## Programming Note: All variables for test() must use the internal prefix "__".
 ## Shared variables are eval'ed into the current workspace and therefore might
 ## collide with the names used in the test.m function itself.
 
-function [__n, __nmax, __nxfail, __nskip, __nrtskip] = test (__name, __flag = "normal", __fid = [])
+function [__n, __nmax, __nxfail, __nbug, __nskip, __nrtskip] = test (__name, __flag = "normal", __fid = [])
 
   ## Output from test is prefixed by a "key" to quickly understand the issue.
   persistent __signal_fail  = "!!!!! ";
   persistent __signal_empty = "????? ";
   persistent __signal_block = "***** ";
   persistent __signal_file  = ">>>>> ";
   persistent __signal_skip  = "----- ";
 
@@ -291,17 +292,17 @@ function [__n, __nmax, __nxfail, __nskip
     disp ([__signal_file, __file]);
   endif
 
   ## Assume all tests will pass.
   __all_success = true;
 
   ## Process each block separately, initially with no shared variables.
   __tests = __successes = 0;
-  __xfail = __xskip = __xrtskip = 0;
+  __xfail = __xbug = __xskip = __xrtskip = 0;
   __shared = " ";
   __shared_r = " ";
   __clearfcn = "";
   for __i = 1:numel (__blockidx)-1
 
     ## FIXME: Should other global settings be similarly saved and restored?
     orig_wstate = warning ();
     unwind_protect
@@ -629,20 +630,21 @@ function [__n, __nmax, __nxfail, __nskip
                     "Use the %!function/%!endfunction syntax instead to define shared functions for testing.\n"]);
           endif
         catch
           if (isempty (lasterr ()))
             error ("test: empty error text, probably Ctrl-C --- aborting");
           else
             __success = false;
             if (__isxtest)
-              __xfail += 1;
               if (isempty (__bug_id))
+                __xfail += 1;
                 __msg = "known failure";
               else
+                __xbug += 1;
                 if (all (isdigit (__bug_id)))
                   __bug_id = ["http://octave.org/testfailure/?" __bug_id];
                 endif
                 __msg = ["known bug: " __bug_id];
               endif
             else
               __msg = "test failed";
             endif
@@ -695,21 +697,32 @@ function [__n, __nmax, __nxfail, __nskip
       warning (orig_wstate);
     end_unwind_protect
   endfor
 
   ## Clear any functions created during test run
   eval (__clearfcn, "");
 
   if (nargout == 0)
-    if (__tests || __xfail || __xskip || __xrtskip)
-      if (__xfail)
-        printf ("PASSES %d out of %d test%s (%d known failure%s)\n",
-                __successes, __tests, ifelse (__tests > 1, "s", ""),
-                __xfail, ifelse (__xfail > 1, "s", ""));
+    if (__tests || __xfail || __xbug || __xskip || __xrtskip)
+      if (__xfail || __xbug)
+        if (__xfail && __xbug)
+          printf ("PASSES %d out of %d test%s (%d known failure%s; %d known bug%s)\n",
+                  __successes, __tests, ifelse (__tests > 1, "s", ""),
+                  __xfail, ifelse (__xfail > 1, "s", ""),
+                  __xbug, ifelse (__xbug > 1, "s", ""));
+        elseif (__xfail)
+          printf ("PASSES %d out of %d test%s (%d known failure%s)\n",
+                  __successes, __tests, ifelse (__tests > 1, "s", ""),
+                  __xfail, ifelse (__xfail > 1, "s", ""));
+        elseif (__xbug)
+          printf ("PASSES %d out of %d test%s (%d known bug%s)\n",
+                  __successes, __tests, ifelse (__tests > 1, "s", ""),
+                  __xbug, ifelse (__xbug > 1, "s", ""));
+        endif
       else
         printf ("PASSES %d out of %d test%s\n", __successes, __tests,
                ifelse (__tests > 1, "s", ""));
       endif
       if (__xskip)
         printf ("Skipped %d test%s due to missing features\n", __xskip,
                 ifelse (__xskip > 1, "s", ""));
       endif
@@ -724,16 +737,17 @@ function [__n, __nmax, __nxfail, __nskip
     __n    = __demo_code;
     __nmax = __demo_idx;
   elseif (nargout == 1)
     __n = __all_success;
   else
     __n      = __successes;
     __nmax   = __tests;
     __nxfail = __xfail;
+    __nbug   = __xbug;
     __nskip  = __xskip;
     __nrtskip = __xrtskip;
   endif
 
 endfunction
 
 
 ## Create structure with fieldnames the name of the input variables.
