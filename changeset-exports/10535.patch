# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1271745723 -7200
#      Tue Apr 20 08:42:03 2010 +0200
# Node ID 3f973f6c841c44d9584b45dba8d6576b8477f580
# Parent  eb55e736060e841dd1a251e50684ab6076e99ab3
improve sparse concatenation operator

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2597,16 +2597,19 @@ Array<T>::diag (octave_idx_type k) const
 template <class T>
 Array<T>
 Array<T>::cat (int dim, octave_idx_type n, const Array<T> *array_list)
 {
   if (dim < 0)
     (*current_liboctave_error_handler)
       ("cat: invalid dimension");
 
+  if (n == 1)
+    return array_list[0];
+
   dim_vector dv;
   for (octave_idx_type i = 0; i < n; i++)
     if (! dv.concat (array_list[i].dims (), dim))
       (*current_liboctave_error_handler)
         ("cat: dimension mismatch");
 
   Array<T> retval (dv);
   int nidx = std::max (dv.length (), dim + 1);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-04-19  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (Array<T>::cat): Fast return for single array case.
+	* Sparse.cc (Sparse<T>::cat): Ditto.
+
 2010-04-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (Array<T>::cat): Miscellaneous fixes.
 	* Sparse.cc (Sparse<T>::cat): Ditto.
 
 2010-04-18  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.cc (Array<T>::cat): New method.
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -2379,24 +2379,30 @@ Sparse<T>::diag (octave_idx_type k) cons
 template <class T>
 Sparse<T>
 Sparse<T>::cat (int dim, octave_idx_type n, const Sparse<T> *sparse_list)
 {
   dim_vector dv;
   octave_idx_type total_nz = 0;
   if (dim == 0 || dim == 1)
     {
+      if (n == 1)
+        return sparse_list[0];
+
       for (octave_idx_type i = 0; i < n; i++)
         {
           if (! dv.concat (sparse_list[i].dims (), dim))
             (*current_liboctave_error_handler)
               ("cat: dimension mismatch");
           total_nz += sparse_list[i].nnz ();
         }
     }
+  else
+    (*current_liboctave_error_handler)
+      ("cat: invalid dimension for sparse concatenation");
 
   Sparse<T> retval (dv, total_nz);
 
   switch (dim)
     {
     case 0:
       {
         // sparse vertcat. This is not efficiently handled by assignment, so
@@ -2438,18 +2444,17 @@ Sparse<T>::cat (int dim, octave_idx_type
             octave_idx_type u = l + sparse_list[i].columns ();
             retval.assign (idx_vector::colon, idx_vector (l, u), sparse_list[i]);
             l = u;
           }
 
         break;
       }
     default:
-      (*current_liboctave_error_handler)
-        ("cat: invalid dimension for sparse concatenation");
+      assert (false);
     }
 
   return retval;
 }
 
 template <class T>
 Array<T>
 Sparse<T>::array_value () const
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2010-04-20  Jaroslav Hajek  <highegg@gmail.com>
+
+	* pt-mat.cc (single_type_concat): New overloads. Make TYPE an explicit
+	template parameter. Try to forward some cases to Array<T>::cat and
+	Sparse<T>::cat.
+	(do_single_type_concat, do_single_type_concat_no_mutate): Don't
+	allocate the array here, let single_type_concat do it.
+
 2010-04-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (single_type_concat, do_single_type_concat): Rewrite using
 	new liboctave facilities.
 	(do_cat): Don't compute result dims if the case can be forwarded to
 	liboctave.
 
 2010-04-13  David Bateman  <dbateman@free.fr>
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -719,19 +719,19 @@ tree_matrix::rvalue (int nargout)
 void
 maybe_warn_string_concat (bool all_dq_strings_p, bool all_sq_strings_p)
 {
   if (! (all_dq_strings_p || all_sq_strings_p))
     warning_with_id ("Octave:string-concat",
                      "concatenation of different character string types may have unintended consequences");
 }
 
-template<class TYPE>
+template<class TYPE, class T>
 static void 
-single_type_concat (TYPE& result,
+single_type_concat (Array<T>& result,
                     tm_const& tmp)
 {
   octave_idx_type r = 0, c = 0;
 
   for (tm_const::iterator p = tmp.begin (); p != tmp.end (); p++)
     {
       tm_row_const row = *p;
 
@@ -756,36 +756,101 @@ single_type_concat (TYPE& result,
             return;
         }
 
       r += row.rows ();
       c = 0;
     }
 }
 
+template<class TYPE, class T>
+static void 
+single_type_concat (Array<T>& result,
+                    const dim_vector& dv,
+                    tm_const& tmp)
+{
+  if (tmp.length () == 1)
+    {
+      // If possible, forward the operation to liboctave.
+      // Single row.
+      tm_row_const& row = tmp.front ();
+      octave_idx_type ncols = row.length (), i = 0;
+      OCTAVE_LOCAL_BUFFER (Array<T>, array_list, ncols);
+
+      for (tm_row_const::iterator q = row.begin ();
+           q != row.end () && ! error_state;
+           q++)
+        {
+          octave_quit ();
+
+          array_list[i++] = octave_value_extract<TYPE> (*q);
+        }
+
+      if (! error_state)
+        result = Array<T>::cat (1, ncols, array_list);
+    }
+  else
+    {
+      result = Array<T> (dv);
+      single_type_concat<TYPE> (result, tmp);
+    }
+}
+
+template<class TYPE, class T>
+static void 
+single_type_concat (Sparse<T>& result,
+                    const dim_vector&,
+                    tm_const& tmp)
+{
+  // Sparse matrices require preallocation for efficient indexing; besides,
+  // only horizontal concatenation can be efficiently handled by indexing.
+  // So we just cat all rows through liboctave, then cat the final column.
+  octave_idx_type nrows = tmp.length (), j = 0;
+  OCTAVE_LOCAL_BUFFER (Sparse<T>, sparse_row_list, nrows);
+  for (tm_const::iterator p = tmp.begin (); p != tmp.end (); p++)
+    {
+      tm_row_const row = *p;
+      octave_idx_type ncols = row.length (), i = 0;
+      OCTAVE_LOCAL_BUFFER (Sparse<T>, sparse_list, ncols);
+
+      for (tm_row_const::iterator q = row.begin ();
+           q != row.end () && ! error_state;
+           q++)
+        {
+          octave_quit ();
+
+          sparse_list[i++] = octave_value_extract<TYPE> (*q);
+        }
+
+      sparse_row_list[j++] = Sparse<T>::cat (1, ncols, sparse_list);
+    }
+
+  result = Sparse<T>::cat (0, nrows, sparse_row_list);
+}
+
 template<class TYPE>
 static octave_value 
 do_single_type_concat (const dim_vector& dv,
                        tm_const& tmp)
 {
-  TYPE result (dv);
+  TYPE result;
 
-  single_type_concat (result, tmp);
+  single_type_concat<TYPE> (result, dv, tmp);
 
   return result;
 }
 
 template<class TYPE, class OV_TYPE>
 static octave_value 
 do_single_type_concat_no_mutate (const dim_vector& dv,
                                  tm_const& tmp)
 {
-  TYPE result (dv);
+  TYPE result;
 
-  single_type_concat (result, tmp);
+  single_type_concat<TYPE> (result, dv, tmp);
 
   return new OV_TYPE (result);
 }
 
 octave_value
 tree_matrix::rvalue1 (int)
 {
   octave_value retval = Matrix ();
@@ -910,17 +975,17 @@ tree_matrix::rvalue1 (int)
       else if (result_type == "char")
         {
           char type = all_dq_strings_p ? '"' : '\'';
 
           maybe_warn_string_concat (all_dq_strings_p, all_sq_strings_p);
 
           charNDArray result (dv, Vstring_fill_char);
 
-          single_type_concat (result, tmp);
+          single_type_concat<charNDArray> (result, tmp);
 
           retval = octave_value (result, type);
         }
       else if (result_type == "logical")
         {
           if (any_sparse_p)
             retval = do_single_type_concat<SparseBoolMatrix> (dv, tmp);
           else
