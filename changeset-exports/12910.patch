# HG changeset patch
# User Konstantinos Poulios <logari81@gmail.com>
# Date 1312381701 -7200
#      Wed Aug 03 16:28:21 2011 +0200
# Node ID e77284b6dac6c36c9344eb38e3ee954e526daeff
# Parent  abb33ad310e66a94f1622bc2a011739303cad93e
avoid possible infinite recursion in autopositioning of labels and titles

* graphics.cc: new static boolean variables updating_xlabel_position,
updating_ylabel_position, updating_zlabel_position, updating_title_position.

diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -4325,25 +4325,32 @@ axes::properties::update_ticklengths (vo
   ztickoffset = (mode2d ? std::max (0., zticklen) : std::abs (zticklen)) + 5;
 
   update_xlabel_position ();
   update_ylabel_position ();
   update_zlabel_position ();
   update_title_position ();
 }
 
+static bool updating_xlabel_position = false;
+
 void
 axes::properties::update_xlabel_position (void)
 {
+  if (updating_xlabel_position)
+    return;
+
   text::properties& xlabel_props = reinterpret_cast<text::properties&>
     (gh_manager::get_object (get_xlabel ()).get_properties ());
 
   bool is_empty = xlabel_props.get_string ().empty ();
 
-  xlabel_props.set_autopos_tag ("none");
+  unwind_protect frame;
+  frame.protect_var (updating_xlabel_position);
+  updating_xlabel_position = true;
 
   if (! is_empty)
     {
       if (xlabel_props.horizontalalignmentmode_is ("auto"))
         {
           xlabel_props.set_horizontalalignment
             (xstate > AXE_DEPTH_DIR
              ? "center" : (xyzSym ? "left" : "right"));
@@ -4407,29 +4414,34 @@ axes::properties::update_xlabel_position
         }
 
       if (! is_empty && xlabel_props.rotationmode_is ("auto"))
         {
           xlabel_props.set_rotation (angle);
           xlabel_props.set_rotationmode ("auto");
         }
     }
-
-  xlabel_props.set_autopos_tag ("xlabel");
-}
+}
+
+static bool updating_ylabel_position = false;
 
 void
 axes::properties::update_ylabel_position (void)
 {
+  if (updating_ylabel_position)
+    return;
+
   text::properties& ylabel_props = reinterpret_cast<text::properties&>
     (gh_manager::get_object (get_ylabel ()).get_properties ());
 
   bool is_empty = ylabel_props.get_string ().empty ();
 
-  ylabel_props.set_autopos_tag ("none");
+  unwind_protect frame;
+  frame.protect_var (updating_ylabel_position);
+  updating_ylabel_position = true;
 
   if (! is_empty)
     {
       if (ylabel_props.horizontalalignmentmode_is ("auto"))
         {
           ylabel_props.set_horizontalalignment
             (ystate > AXE_DEPTH_DIR
              ? "center" : (!xyzSym ? "left" : "right"));
@@ -4493,30 +4505,35 @@ axes::properties::update_ylabel_position
         }
 
       if (! is_empty && ylabel_props.rotationmode_is ("auto"))
         {
           ylabel_props.set_rotation (angle);
           ylabel_props.set_rotationmode ("auto");
         }
     }
-
-  ylabel_props.set_autopos_tag ("ylabel");
-}
+}
+
+static bool updating_zlabel_position = false;
 
 void
 axes::properties::update_zlabel_position (void)
 {
+  if (updating_zlabel_position)
+    return;
+
   text::properties& zlabel_props = reinterpret_cast<text::properties&>
     (gh_manager::get_object (get_zlabel ()).get_properties ());
 
   bool camAuto = cameraupvectormode_is ("auto");
   bool is_empty = zlabel_props.get_string ().empty ();
 
-  zlabel_props.set_autopos_tag ("none");
+  unwind_protect frame;
+  frame.protect_var (updating_zlabel_position);
+  updating_zlabel_position = true;
 
   if (! is_empty)
     {
       if (zlabel_props.horizontalalignmentmode_is ("auto"))
         {
           zlabel_props.set_horizontalalignment
             ((zstate > AXE_DEPTH_DIR || camAuto) ? "center" : "right");
 
@@ -4601,42 +4618,45 @@ axes::properties::update_zlabel_position
         }
 
       if (! is_empty && zlabel_props.rotationmode_is ("auto"))
         {
           zlabel_props.set_rotation (angle);
           zlabel_props.set_rotationmode ("auto");
         }
     }
-
-  zlabel_props.set_autopos_tag ("zlabel");
-}
+}
+
+static bool updating_title_position = false;
 
 void
 axes::properties::update_title_position (void)
 {
+  if (updating_title_position)
+    return;
+
   text::properties& title_props = reinterpret_cast<text::properties&>
     (gh_manager::get_object (get_title ()).get_properties ());
 
-  title_props.set_autopos_tag ("none");
+  unwind_protect frame;
+  frame.protect_var (updating_title_position);
+  updating_title_position = true;
 
   if (title_props.positionmode_is ("auto"))
     {
       graphics_xform xform = get_transform ();
 
       // FIXME: bbox should be stored in axes::properties
       Matrix bbox = get_extent (false);
       ColumnVector p = xform.untransform (bbox(0)+bbox(2)/2, (bbox(1)-10),
                                           (x_zlim(0)+x_zlim(1))/2, true);
 
       title_props.set_position (p.extract_n(0, 3).transpose ());
       title_props.set_positionmode ("auto");
     }
-
-  title_props.set_autopos_tag ("title");
 }
 
 void
 axes::properties::update_autopos (const std::string& elem_type)
 {
   if (elem_type == "xlabel")
     update_xlabel_position ();
   else if (elem_type == "ylabel")
