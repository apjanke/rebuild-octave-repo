# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1519967995 21600
#      Thu Mar 01 23:19:55 2018 -0600
# Node ID 88665923596cc660cb54fbb38cd88f95879f41bc
# Parent  735175432a20dcc373f30b0b09d149160d17e4b1
Make variable editor code compile under Qt4 (bug #53259)

* variable_editor.cc (variable_dock_widget::toplevel_change):
Condition the maximizing of the floated variable widget on having
QGuiApplication.
(variable_editor::construct_tool_bar): Use Qt::FindDirectChildrenOnly
only if it is available.
* acinclude.m4 (OCTAVE_HAVE_QGUIAPPLICATION,
OCTAVE_QOBJECT_FINDCHILDREN_ACCEPTS_FINDCHILDOPTIONS): New macros.
(OCTAVE_CHECK_QT_VERSION): Use them.

diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -124,23 +124,29 @@ variable_dock_widget::toplevel_change (b
   if (toplevel)
     {
       m_dock_action->setIcon (QIcon (":/actions/icons/widget-dock.png"));
       m_dock_action->setToolTip (tr ("Dock widget"));
 
       // Make initial size expanded very large for "magnified" viewing
       if (m_initial_float)
         {
+          // This will be resolved based on user feedback and preference
+          // and will eventually work without QGuiApplication.  Perhaps
+          // a maximize button added to the label_dock_widget windows
+          // along with the dock/undock and close buttons is best.
+#if defined (HAVE_QGUIAPPLICATION)
           QScreen *pscreen = QGuiApplication::primaryScreen ();
           QRect rect (0, 0, 0, 0);
           rect = pscreen->availableGeometry ();
           rect = QRect (rect.x () + 5, rect.y () + 5,
                         rect.width () - 10, rect.height () - 10);
           setGeometry (rect);
           m_initial_float = false;
+#endif
         }
 
       setFocus (Qt::OtherFocusReason);
       activateWindow();
     }
   else
     {
       m_dock_action->setIcon (QIcon (":/actions/icons/widget-undock.png"));
@@ -1430,36 +1436,45 @@ variable_editor::construct_tool_bar (voi
 
   action = add_tool_bar_button (resource_manager::icon ("go-up"),
                                 tr ("Up"), this, SLOT (levelUp ()));
   action->setStatusTip(tr("Go one level up in variable hierarchy"));
 
   // The QToolButton mouse-clicks change active window, so connect all
   // HoverToolButton and RuternFocusToolButton objects to the mechanism
   // that restores active window and focus before acting.
-  QList<HoverToolButton *> hbuttonlist = m_tool_bar->
-      findChildren<HoverToolButton *> (QString (), Qt::FindDirectChildrenOnly);
+  QList<HoverToolButton *> hbuttonlist
+    = m_tool_bar->findChildren<HoverToolButton *> (""
+#if defined (QOBJECT_FINDCHILDREN_ACCEPTS_FINDCHILDOPTIONS)
+                                                   , Qt::FindDirectChildrenOnly
+#endif
+                                                   );
   for (int i = 0; i < hbuttonlist.size (); i++)
     {
       connect (hbuttonlist.at (i), SIGNAL (hovered_signal ()),
                this, SLOT (record_hovered_focus_variable ()));
       connect (hbuttonlist.at (i), SIGNAL (popup_shown_signal ()),
                this, SLOT (restore_hovered_focus_variable ()));
     }
-  QList<ReturnFocusToolButton *> rfbuttonlist = m_tool_bar->
-      findChildren<ReturnFocusToolButton *> (QString (), Qt::FindDirectChildrenOnly);
+
+  QList<ReturnFocusToolButton *> rfbuttonlist
+    = m_tool_bar->findChildren<ReturnFocusToolButton *> (""
+#if defined (QOBJECT_FINDCHILDREN_ACCEPTS_FINDCHILDOPTIONS)
+                                                         , Qt::FindDirectChildrenOnly
+#endif
+                                                         );
   for (int i = 0; i < rfbuttonlist.size (); i++)
     {
       connect (rfbuttonlist.at (i), SIGNAL (about_to_activate ()),
                this, SLOT (restore_hovered_focus_variable ()));
     }
 
   // Same for QMenu
-  QList<ReturnFocusMenu *> menulist = m_tool_bar->
-      findChildren<ReturnFocusMenu *> (QString ());
+  QList<ReturnFocusMenu *> menulist
+    = m_tool_bar->findChildren<ReturnFocusMenu *> ();
   for (int i = 0; i < menulist.size (); i++)
     {
       connect (menulist.at (i), SIGNAL (about_to_activate ()),
                this, SLOT (restore_hovered_focus_variable ()));
     }
 
   m_tool_bar->setAttribute(Qt::WA_ShowWithoutActivating);
   m_tool_bar->setFocusPolicy (Qt::NoFocus);
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1249,16 +1249,80 @@ AC_DEFUN([OCTAVE_CHECK_MEMBER_QFONT_MONO
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_decl_qfont_monospace = yes; then
     AC_DEFINE(HAVE_QFONT_MONOSPACE, 1,
       [Define to 1 if `Monospace' is a member of `QFont'.])
   fi
 ])
 dnl
+dnl Check whether the Qt class QGuiApplication exists.  This class
+dnl was introduced in Qt 5.0.
+dnl
+dnl FIXME: Delete this entirely when we drop support for Qt 4.
+dnl
+AC_DEFUN([OCTAVE_HAVE_QGUIAPPLICATION], [
+  AC_CACHE_CHECK([for QGuiApplication],
+    [octave_cv_decl_qguiapplication],
+    [AC_LANG_PUSH(C++)
+    ac_octave_save_CPPFLAGS="$CPPFLAGS"
+    ac_octave_save_CXXFLAGS="$CXXFLAGS"
+    CPPFLAGS="$QT_CPPFLAGS $CXXPICFLAG $CPPFLAGS"
+    CXXFLAGS="$CXXPICFLAG $CXXFLAGS"
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+        #include <QGuiApplication>
+        ]], [[
+        QScreen *pscreen = QGuiApplication::primaryScreen ();
+        ]])],
+      octave_cv_decl_qguiapplication=yes,
+      octave_cv_decl_qguiapplication=no)
+    CPPFLAGS="$ac_octave_save_CPPFLAGS"
+    CXXFLAGS="$ac_octave_save_CXXFLAGS"
+    AC_LANG_POP(C++)
+  ])
+  if test $octave_cv_decl_qguiapplication = yes; then
+    AC_DEFINE(HAVE_QGUIAPPLICATION, 1,
+      [Define to 1 if `QGuiApplication' class is available.])
+  fi
+])
+dnl
+dnl Check whether QObject::findChildren accepts Qt::FindChildOptions
+dnl argument.
+dnl
+dnl FIXME: Delete this entirely when we drop support for Qt 4.
+dnl
+AC_DEFUN([OCTAVE_QOBJECT_FINDCHILDREN_ACCEPTS_FINDCHILDOPTIONS], [
+  AC_CACHE_CHECK([whether QObject::findChildren accepts Qt::FindChildOptions],
+    [octave_cv_qobject_findchildren_accepts_findchildoptions],
+    [AC_LANG_PUSH(C++)
+    ac_octave_save_CPPFLAGS="$CPPFLAGS"
+    ac_octave_save_CXXFLAGS="$CXXFLAGS"
+    CPPFLAGS="$QT_CPPFLAGS $CXXPICFLAG $CPPFLAGS"
+    CXXFLAGS="$CXXPICFLAG $CXXFLAGS"
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+        #include <QList>
+        #include <QObject>
+        #include <QWidget>
+        ]], [[
+        QObject obj;
+        QList<QWidget *> widgets
+          = obj.findChildren<QWidget *> ("name", Qt::FindDirectChildrenOnly);
+        ]])],
+      octave_cv_qobject_findchildren_accepts_findchildoptions=yes,
+      octave_cv_qobject_findchildren_accepts_findchildoptions=no)
+    CPPFLAGS="$ac_octave_save_CPPFLAGS"
+    CXXFLAGS="$ac_octave_save_CXXFLAGS"
+    AC_LANG_POP(C++)
+  ])
+  if test $octave_cv_qobject_findchildren_accepts_findchildoptions = yes; then
+    AC_DEFINE(QOBJECT_FINDCHILDREN_ACCEPTS_QFINDCHILDOPTIONS, 1,
+      [Define to 1 if `QObject::findChildren' accepts 'Qt::FindChildOptions' argument.])
+  fi
+])
+dnl
 dnl Check for the Qhull version.
 dnl
 AC_DEFUN([OCTAVE_CHECK_QHULL_VERSION], [
   AC_CACHE_CHECK([for qh_version in $QHULL_LIBS],
     [octave_cv_lib_qhull_version],
     [AC_LINK_IFELSE([AC_LANG_PROGRAM([[
         #include <stdio.h>
         #if defined (HAVE_LIBQHULL_LIBQHULL_H)
@@ -1769,16 +1833,18 @@ AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_
     ## We don't need to unset cache variables for any of the remaining
     ## tests if they fail because we have already decided that the Qt
     ## version that we are testing now will be the one used.
 
     OCTAVE_CHECK_FUNC_QLINEEDIT_SETPLACEHOLDERTEXT
     OCTAVE_CHECK_FUNC_QTABWIDGET_SETMOVABLE
     OCTAVE_CHECK_MEMBER_QFONT_FORCE_INTEGER_METRICS
     OCTAVE_CHECK_MEMBER_QFONT_MONOSPACE
+    OCTAVE_HAVE_QGUIAPPLICATION
+    OCTAVE_QOBJECT_FINDCHILDREN_ACCEPTS_FINDCHILDOPTIONS
 
     if test -n "$OPENGL_LIBS"; then
       OCTAVE_CHECK_QT_OPENGL_OK([build_qt_graphics=yes],
         [warn_qt_opengl="Qt does not work with the OpenGL libs (GL and GLU); disabling OpenGL graphics with Qt GUI"])
 
       if test $build_qt_graphics = yes; then
         OCTAVE_CHECK_QT_OPENGL_OFFSCREEN_OK([have_qt_opengl_offscreen=yes])
         AC_DEFINE(HAVE_QT_GRAPHICS, 1, [Define to 1 if Qt works with OpenGL libs (GL and GLU)])
