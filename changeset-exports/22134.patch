# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1468850201 14400
#      Mon Jul 18 09:56:41 2016 -0400
# Node ID a51d5c5c71e65cf8b38c17b179c095b90982bc62
# Parent  59cadee1c74bf59d377f3720651aa7179196ecf2
handle gfortran and f2c calling conventions separately

* configure.ac: New option --enable-fortran-calling-convention.
Explicitly define config.h macros for gfortran, f2c, Cray, and Visual
Fortran options.

* f77-fcn.h: Handle gfortran separately from f2c.
(F77_CHAR_ARG_LEN_TYPE, F77_DBLE, F77_REAL, F77_DBLE_CMPLX, F77_CMPLX,
F77_INT, F77_INT4, F77_LOGICAL, F77_CMPLX_ARG, F77_CONST_CMPLX_ARG,
F77_DBLE_CMPLX_ARG, F77_CONST_DBLE_CMPLX_ARG): New macros.

* f77-fcn.c (xstopx):  Use F77_CHAR_ARG_LEN_TYPE.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -663,17 +663,16 @@ fi
 AC_MSG_CHECKING([whether a usable Fortran compiler was found])
 if test -n "$F77"; then
   AC_MSG_RESULT(yes)
 else
   AC_MSG_RESULT(no)
   AC_MSG_ERROR([A Fortran compiler is required])
 fi
 
-## Determine calling conventions for Fortran compiler
 AC_F77_LIBRARY_LDFLAGS
 AC_F77_DUMMY_MAIN
 AC_F77_WRAPPERS
 
 F77_TOLOWER=yes
 F77_APPEND_UNDERSCORE=yes
 F77_APPEND_EXTRA_UNDERSCORE=yes
 
@@ -701,26 +700,54 @@ case $canonical_host_type in
       OCTAVE_F77_FLAG([-fpe1])
     fi
   ;;
   powerpc-apple-machten*)
     FFLAGS=
   ;;
 esac
 
+if test $ac_cv_f77_compiler_gnu = yes; then
+  FORTRAN_CALLING_CONVENTION=gfortran
+else
+  FORTRAN_CALLING_CONVENTION=unknown
+fi
+AC_ARG_ENABLE([fortran-calling-convention],
+  [AS_HELP_STRING([--enable-fortran-calling-convention=OPTION],
+    [Select C++ to Fortran calling convention.  "gfortran" should be detected automatically.  Other options are "cray", "visual-fortran", or "f2c".])],
+  [FORTRAN_CALLING_CONVENTION="$enableval"], [])
+
+case "$FORTRAN_CALLING_CONVENTION" in
+  gfortran)
+    AC_DEFINE(F77_USES_GFORTRAN_CALLING_CONVENTION, 1, [Define to 1 if calling Fortran from C++ should use the gfortran calling convention.])
+  ;;
+  cray)
+    AC_DEFINE(F77_USES_CRAY_CALLING_CONVENTION, 1, [Define to 1 if calling Fortran from C++ should use the Cray Fortran calling convention.])
+  ;;
+  visual-fortran)
+    AC_DEFINE(F77_USES_VISUAL_FORTRAN_CALLING_CONVENTION, 1, [Define to 1 if calling Fortran from C++ should use the Visual Fortran calling convention.])
+  ;;
+  f2c)
+    AC_DEFINE(F77_USES_F2C_CALLING_CONVENTION, 1, [Define to 1 if calling Fortran from C++ should use the f2c calling convention.])
+  ;;
+  *)
+    AC_MSG_ERROR([to build Octave, the C++ to Fortran calling convention must be known.])
+  ;;
+esac
+
 if test -n "$FFLAGS"; then
   AC_MSG_NOTICE([defining FFLAGS to be $FFLAGS])
 fi
 
 AC_SUBST(F77_TOLOWER)
 AC_SUBST(F77_APPEND_UNDERSCORE)
 AC_SUBST(F77_APPEND_EXTRA_UNDERSCORE)
 
 if test -z "$F77"; then
-  AC_MSG_ERROR([in order to build Octave, you must have a compatible Fortran compiler or wrapper script for f2c that functions as a Fortran compiler installed and in your path.  See the file INSTALL for more information.])
+  AC_MSG_ERROR([to build Octave, you must have a compatible Fortran compiler or wrapper script for f2c that functions as a Fortran compiler installed and in your path.  See the file INSTALL for more information.])
 fi
 
 OCTAVE_CHECK_FUNC_FORTRAN_ISNAN
 F77_ISNAN_MACRO=
 if test $octave_cv_func_fortran_isnan = no; then
   AC_MSG_NOTICE([substituting ISNAN(X) with X.NE.X in Fortran sources])
   F77_ISNAN_MACRO="s|ISNAN(\(@<:@^)@:>@*\))|(\1.NE.\1)|"
 fi
@@ -751,17 +778,17 @@ if test $octave_cv_sizeof_fortran_intege
           ;;
         esac
       ;;
     esac
     if test -z "$octave_cv_sizeof_fortran_integer"; then
       OCTAVE_CHECK_SIZEOF_FORTRAN_INTEGER
     fi
     if test $octave_cv_sizeof_fortran_integer = no; then
-      AC_MSG_ERROR([in order to build Octave with 64-bit indexing support your Fortran compiler must have an option for setting the default integer size to 8 bytes.  See the file INSTALL for more information.])
+      AC_MSG_ERROR([to build Octave with 64-bit indexing support your Fortran compiler must have an option for setting the default integer size to 8 bytes.  See the file INSTALL for more information.])
     fi
   else
     AC_MSG_ERROR([your Fortran compiler must have an option to make integers the same size as octave_idx_type ($OCTAVE_IDX_TYPE).  See the file INSTALL for more information.])
   fi
 fi
 AC_SUBST(F77_INTEGER_8_FLAG)
 
 OCTAVE_F77_FLAG([-ffloat-store], [
diff --git a/liboctave/cruft/misc/f77-fcn.c b/liboctave/cruft/misc/f77-fcn.c
--- a/liboctave/cruft/misc/f77-fcn.c
+++ b/liboctave/cruft/misc/f77-fcn.c
@@ -31,25 +31,31 @@ along with Octave; see the file COPYING.
 #include "quit.h"
 #include "lo-error.h"
 
 /* All the STOP statements in the Fortran routines have been replaced
    with a call to XSTOPX.
 
    XSTOPX jumps back to the entry point for the Fortran function that
    called us.  Then the calling function should do whatever cleanup
-   is necessary.  */
+   is necessary.
+
+   Note that the order of arguments for the Visual Fortran function
+   signature is the same as for gfortran and f2c only becuase there is
+   a single assumed size character string argument.  Visual Fortran
+   inserts the length after each character string argument, f2c appends
+   all length arguments at the end of the parameter list, and gfortran
+   appends length arguments for assumed size character strings to the
+   end of the list (ignoring others).  */
 
 F77_RET_T
 #if defined (F77_USES_CRAY_CALLING_CONVENTION)
 F77_FUNC (xstopx, XSTOPX) (octave_cray_ftn_ch_dsc desc)
-#elif defined (F77_USES_VISUAL_FORTRAN_CALLING_CONVENTION)
-F77_FUNC (xstopx, XSTOPX) (const char *s, int slen)
 #else
-F77_FUNC (xstopx, XSTOPX) (const char *s, long slen)
+F77_FUNC (xstopx, XSTOPX) (const char *s, F77_CHAR_ARG_LEN_TYPE slen)
 #endif
 {
 #if defined (F77_USES_CRAY_CALLING_CONVENTION)
   const char *s = desc.const_ptr = ptr_arg;
   unsigned long slen = desc.mask.len;
 #endif
 
   f77_exception_encountered = 1;
diff --git a/liboctave/cruft/misc/f77-fcn.h b/liboctave/cruft/misc/f77-fcn.h
--- a/liboctave/cruft/misc/f77-fcn.h
+++ b/liboctave/cruft/misc/f77-fcn.h
@@ -81,23 +81,20 @@ OCTAVE_API extern int f77_exception_enco
 #if ! defined (F77_FCN)
 #define F77_FCN(f, F) F77_FUNC (f, F)
 #endif
 
 /*
 
 The following macros are used for handling Fortran <-> C calling
 conventions.  They are defined below for three different types of
-systems, Cray (possibly now obsolete), Visual Fortran, and any system
-that is compatible with the f2c calling conventions, including g77 and
-gfortran.  Note that gfortran is not completely compatible with the
-f2c calling conventions, but that we only use the parts that are
-compatible.  For example, f2c and gfortran differ in the way they
-handle Fortran functions that return complex values, but Octave does
-not call any Fortran functions like that directly from C or C++.
+systems, Cray (possibly now obsolete), Visual Fortran, and gfortran.
+Note that we don't attempt to handle Fortran functions, we always use
+subroutine wrappers for them and pass the return value as an extra
+argument.
 
 Use these macros to pass character strings from C to Fortran:
 
   F77_CHAR_ARG(x)
   F77_CONST_CHAR_ARG(x)
   F77_CXX_STRING_ARG(x)
   F77_CHAR_ARG_LEN(l)
   F77_CHAR_ARG_DECL
@@ -139,43 +136,48 @@ not returning a value from a function de
   F77_NORETURN(retval)
 
 */
 
 #if defined (F77_USES_CRAY_CALLING_CONVENTION)
 
 #include <fortran.h>
 
-/* Use these macros to pass character strings from C to Fortran.  */
+/* Use these macros to pass character strings from C to Fortran.  Cray
+   Fortran uses a descriptor structure to pass a pointer to the string
+   and the length in a single argument.  */
+
 #define F77_CHAR_ARG(x) octave_make_cray_ftn_ch_dsc (x, strlen (x))
 #define F77_CONST_CHAR_ARG(x) \
   octave_make_cray_const_ftn_ch_dsc (x, strlen (x))
 #define F77_CHAR_ARG2(x, l) octave_make_cray_ftn_ch_dsc (x, l)
 #define F77_CONST_CHAR_ARG2(x, l) octave_make_cray_const_ftn_ch_dsc (x, l)
 #define F77_CXX_STRING_ARG(x) \
   octave_make_cray_const_ftn_ch_dsc (x.c_str (), x.length ())
 #define F77_CHAR_ARG_LEN(l)
+#define F77_CHAR_ARG_LEN_TYPE
+#define F77_CHAR_ARG_LEN_DECL
 #define F77_CHAR_ARG_DECL octave_cray_ftn_ch_dsc
 #define F77_CONST_CHAR_ARG_DECL octave_cray_ftn_ch_dsc
-#define F77_CHAR_ARG_LEN_DECL
 
 /* Use these macros to write C-language functions that accept
    Fortran-style character strings.  */
 #define F77_CHAR_ARG_DEF(s, len) octave_cray_ftn_ch_dsc s
 #define F77_CONST_CHAR_ARG_DEF(s, len) octave_cray_ftn_ch_dsc s
 #define F77_CHAR_ARG_LEN_DEF(len)
 #define F77_CHAR_ARG_USE(s) s.ptr
 #define F77_CHAR_ARG_LEN_USE(s, len) (s.mask.len >> 3)
 
 #define F77_RET_T int
 
 /* Use these macros to return from C-language functions that are
    supposed to act like Fortran subroutines.  F77_NORETURN is intended
    to be used as the last statement of such a function that has been
    tagged with a "noreturn" attribute.  */
+
 #define F77_RETURN(retval) return retval;
 #if defined (HAVE_OCTAVE_NORETURN_ATTR)
 #  define F77_NORETURN(retval)
 #else
 #  define F77_NORETURN(retval) return retval;
 #endif
 
 /* FIXME: These should work for SV1 or Y-MP systems but will
@@ -218,67 +220,117 @@ octave_make_cray_const_ftn_ch_dsc (const
   desc.mask.len = len_arg << 3;
   return *((octave_cray_ftn_ch_dsc *) &desc);
 }
 
 #undef OCTAVE_F77_FCN_INLINE
   
 #elif defined (F77_USES_VISUAL_FORTRAN_CALLING_CONVENTION)
 
-/* Use these macros to pass character strings from C to Fortran.  */
+/* Use these macros to pass character strings from C to Fortran.
+   Visual Fortran inserts the length after each character string
+   argument.  */
+
 #define F77_CHAR_ARG(x) x, strlen (x)
 #define F77_CONST_CHAR_ARG(x) F77_CHAR_ARG (x)
 #define F77_CHAR_ARG2(x, l) x, l
 #define F77_CONST_CHAR_ARG2(x, l) F77_CHAR_ARG2 (x, l)
 #define F77_CXX_STRING_ARG(x) F77_CONST_CHAR_ARG2 (x.c_str (), x.length ())
 #define F77_CHAR_ARG_LEN(l)
-#define F77_CHAR_ARG_DECL char *, int
-#define F77_CONST_CHAR_ARG_DECL const char *, int
+#define F77_CHAR_ARG_LEN_TYPE int
 #define F77_CHAR_ARG_LEN_DECL
+#define F77_CHAR_ARG_DECL char *, F77_CHAR_ARG_LEN_TYPE
+#define F77_CONST_CHAR_ARG_DECL const char *, F77_CHAR_ARG_LEN_TYPE
 
-#define F77_CHAR_ARG_DEF(s, len) char *s, int len
-#define F77_CONST_CHAR_ARG_DEF(s, len) const char *s, int len
+#define F77_CHAR_ARG_DEF(s, len) char *s, F77_CHAR_ARG_LEN_TYPE len
+#define F77_CONST_CHAR_ARG_DEF(s, len) const char *s, F77_CHAR_ARG_LEN_TYPE len
 #define F77_CHAR_ARG_LEN_DEF(len)
 #define F77_CHAR_ARG_USE(s) s
 #define F77_CHAR_ARG_LEN_USE(s, len) len
 
 #define F77_RET_T void
 
 #define F77_RETURN(retval) return;
 #define F77_NORETURN(retval)
 
-#else
+#elif defined (F77_USES_GFORTRAN_CALLING_CONVENTION)
+
+/* Use these macros to pass character strings from C to Fortran.
+   gfortran appends length arguments for assumed size character
+   strings to the and ignores others.
 
-/* Assume f2c-compatible calling convention.  */
+   FIXME: I don't think we correctly handle the case of mixing some
+   fixed-length and some assumed-length character string arguments as
+   we don't handle each case separately, so it seems there could be
+   mismatch?  However, I don't think we currently have to handle this
+   case in Octave.  */
 
 #define F77_CHAR_ARG(x) x
 #define F77_CONST_CHAR_ARG(x) F77_CHAR_ARG (x)
 #define F77_CHAR_ARG2(x, l) x
 #define F77_CONST_CHAR_ARG2(x, l) F77_CHAR_ARG2 (x, l)
 #define F77_CXX_STRING_ARG(x) F77_CONST_CHAR_ARG2 (x.c_str (), x.length ())
 #define F77_CHAR_ARG_LEN(l) , l
+#define F77_CHAR_ARG_LEN_TYPE int
+#define F77_CHAR_ARG_LEN_DECL , F77_CHAR_ARG_LEN_TYPE
 #define F77_CHAR_ARG_DECL char *
 #define F77_CONST_CHAR_ARG_DECL const char *
-#define F77_CHAR_ARG_LEN_DECL , long
 
 #define F77_CHAR_ARG_DEF(s, len) char *s
 #define F77_CONST_CHAR_ARG_DEF(s, len) const char *s
-#define F77_CHAR_ARG_LEN_DEF(len) , long len
+#define F77_CHAR_ARG_LEN_DEF(len) , F77_CHAR_ARG_LEN_TYPE len
+#define F77_CHAR_ARG_USE(s) s
+#define F77_CHAR_ARG_LEN_USE(s, len) len
+
+#define F77_RET_T void
+
+#define F77_RETURN(retval) return retval;
+#if defined (HAVE_OCTAVE_NORETURN_ATTR)
+#  define F77_NORETURN(retval)
+#else
+#  define F77_NORETURN(retval) return retval;
+#endif
+
+#elif defined (F77_USES_F2C_CALLING_CONVENTION)
+
+/* Assume f2c-compatible calling convention.  */
+
+/* Use these macros to pass character strings from C to Fortran.  f2c
+   appends all length arguments at the end of the parameter list.  */
+
+#define F77_CHAR_ARG(x) x
+#define F77_CONST_CHAR_ARG(x) F77_CHAR_ARG (x)
+#define F77_CHAR_ARG2(x, l) x
+#define F77_CONST_CHAR_ARG2(x, l) F77_CHAR_ARG2 (x, l)
+#define F77_CXX_STRING_ARG(x) F77_CONST_CHAR_ARG2 (x.c_str (), x.length ())
+#define F77_CHAR_ARG_LEN(l) , l
+#define F77_CHAR_ARG_LEN_TYPE long
+#define F77_CHAR_ARG_LEN_DECL , F77_CHAR_ARG_LEN_TYPE
+#define F77_CHAR_ARG_DECL char *
+#define F77_CONST_CHAR_ARG_DECL const char *
+
+#define F77_CHAR_ARG_DEF(s, len) char *s
+#define F77_CONST_CHAR_ARG_DEF(s, len) const char *s
+#define F77_CHAR_ARG_LEN_DEF(len) , F77_CHAR_ARG_LEN_TYPE len
 #define F77_CHAR_ARG_USE(s) s
 #define F77_CHAR_ARG_LEN_USE(s, len) len
 
 #define F77_RET_T int
 
 #define F77_RETURN(retval) return retval;
 #if defined (HAVE_OCTAVE_NORETURN_ATTR)
 #  define F77_NORETURN(retval)
 #else
 #  define F77_NORETURN(retval) return retval;
 #endif
 
+#else
+
+#error "unknown C++ to Fortran calling convention"
+
 #endif
 
 #define F77_DBLE double
 #define F77_REAL float
 #define F77_DBLE_CMPLX Complex
 #define F77_CMPLX FloatComplex
 #define F77_INT octave_idx_type
 #define F77_INT4 int32_t
@@ -289,17 +341,16 @@ octave_make_cray_const_ftn_ch_dsc (const
    The string will be cleaned up at the end of the current block.
    Needs to include <cstring> and <vector>.  */
 
 #define F77_CSTRING(s, len, cs) \
  OCTAVE_LOCAL_BUFFER (char, cs, F77_CHAR_ARG_LEN_USE (s, len) + 1); \
  memcpy (cs, F77_CHAR_ARG_USE (s), F77_CHAR_ARG_LEN_USE (s, len)); \
  cs[F77_CHAR_ARG_LEN_USE(s, len)] = '\0'
 
-
 OCTAVE_NORETURN OCTAVE_API extern
 F77_RET_T
 F77_FUNC (xstopx, XSTOPX) (F77_CONST_CHAR_ARG_DECL
                            F77_CHAR_ARG_LEN_DECL);
 
 #if defined (__cplusplus)
 }
 #endif
