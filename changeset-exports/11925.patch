# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1232090019 -3600
#      Fri Jan 16 08:13:39 2009 +0100
# Branch release-3-0-x
# Node ID e09ae0f2c767fa062efb54b21235b6f70923504f
# Parent  bacb8412989643828b3c579fc7a9bd934a323e7f
make unique work for row vectors

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-01-13  Daniel J Sebald  <daniel.sebald@ieee.org>
+
+	* set/unique.m: Fix for vertical array inputs.
+
 2008-12-18  Daniel J Sebald <daniel.sebald@ieee.org>
 
 	* set/unique.m: Only check for options if nargin > 1.
 
 2008-07-10  Jaroslav Hajek <highegg@gmail.com>
 
 	* set/unique.m: Implement 'first' and 'last', some simplifications.
 	* set/union.m: Implement output indices.
diff --git a/scripts/set/unique.m b/scripts/set/unique.m
--- a/scripts/set/unique.m
+++ b/scripts/set/unique.m
@@ -69,18 +69,20 @@ function [y, i, j] = unique (x, varargin
 
   else
     optfirst = 0;
     optrows = 0;
   endif
 
   if (optrows)
     n = size (x, 1);
+    dim = 1;
   else
     n = numel (x);
+    dim = (size (x, 1) == 1) + 1;
   endif
 
   y = x;
   if (n < 1)
     i = j = [];
     return;
   elseif (n < 2)
     i = j = 1;
@@ -103,17 +105,21 @@ function [y, i, j] = unique (x, varargin
       match = (y(1:n-1) == y(2:n));
     endif
     idx = find (match);
     y(idx) = [];
   endif
 
   if (nargout >= 3)
     j = i;
-    j(i) = cumsum ([1, !match]);
+    if (dim == 1)
+      j(i) = cumsum ([1; !match]);
+    else
+      j(i) = cumsum ([1, !match]);
+    end
   endif
 
   if (optfirst)
     i(idx+1) = [];
   else
     i(idx) = [];
   endif
 
@@ -123,21 +129,34 @@ endfunction
 %!assert(unique([1 1 2; 1 2 1; 1 1 2]),[1;2])
 %!assert(unique([1 1 2; 1 0 1; 1 1 2],'rows'),[1 0 1; 1 1 2])
 %!assert(unique([]),[])
 %!assert(unique([1]),[1])
 %!assert(unique([1 2]),[1 2])
 %!assert(unique([1;2]),[1;2])
 %!assert(unique([1,NaN,Inf,NaN,Inf]),[1,Inf,NaN,NaN])
 %!assert(unique({'Foo','Bar','Foo'}),{'Bar','Foo'})
-%!assert(unique({'Foo','Bar','FooBar'}),{'Bar','Foo','FooBar'})
+%!assert(unique({'Foo','Bar','FooBar'}'),{'Bar','Foo','FooBar'}')
 
 %!test
 %! [a,i,j] = unique([1,1,2,3,3,3,4]);
 %! assert(a,[1,2,3,4])
 %! assert(i,[2,3,6,7])
 %! assert(j,[1,1,2,3,3,3,4])
 %!
 %!test
-%! [a,i,j] = unique([1,1,2,3,3,3,4],'first');
-%! assert(a,[1,2,3,4])
-%! assert(i,[1,3,4,7])
-%! assert(j,[1,1,2,3,3,3,4])
+%! [a,i,j] = unique([1,1,2,3,3,3,4]','first');
+%! assert(a,[1,2,3,4]')
+%! assert(i,[1,3,4,7]')
+%! assert(j,[1,1,2,3,3,3,4]')
+%!
+%!test
+%! [a,i,j] = unique({'z'; 'z'; 'z'});
+%! assert(a,{'z'})
+%! assert(i,[3]')
+%! assert(j,[1,1,1]')
+%!
+%!test
+%! A=[1,2,3;1,2,3];
+%! [a,i,j] = unique(A,'rows');
+%! assert(a,[1,2,3])
+%! assert(A(i,:),a)
+%! assert(a(j,:),A)
