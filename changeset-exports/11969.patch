# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1244355331 -7200
#      Sun Jun 07 08:15:31 2009 +0200
# Branch release-3-2-x
# Node ID 3daadc82aee909ee792effcc3f1ee64d36cd84d9
# Parent  087e5d3a82a68444a9ba3097000b64f476f92c54
fix behavior of find

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2471,17 +2471,17 @@ Array<T>::lookup (const Array<T>& values
 template <class T>
 Array<octave_idx_type> 
 Array<T>::find (octave_idx_type n, bool backward) const
 {
   Array<octave_idx_type> retval;
   const T *src = data ();
   octave_idx_type nel = nelem ();
   const T zero = T ();
-  if (n < 0)
+  if (n < 0 || n >= nel)
     {
       // We want all elements, which means we'll almost surely need
       // to resize. So count first, then allocate array of exact size.
       octave_idx_type cnt = 0;
       for (octave_idx_type i = 0; i < nel; i++)
         cnt += src[i] != zero;
 
       retval = Array<octave_idx_type> (cnt);
@@ -2504,16 +2504,18 @@ Array<T>::find (octave_idx_type n, bool 
               for (;l >= 0 && src[l] == zero; l--) ;
               if (l >= 0)
                 retval(k) = l--;
               else
                 break;
             }
           if (k < n)
             retval.resize (k);
+          octave_idx_type *rdata = retval.fortran_vec ();
+          std::reverse (rdata, rdata + k);
         }
       else
         {
           // Do the search as a series of successive single-element searches.
           octave_idx_type k = 0, l = 0;
           for (; k < n; k++)
             {
               for (;l != nel && src[l] == zero; l++) ;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-06-07  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (Array<T>::find): Avoid allocating excessive memory. Fix
+	order for backward searches.
+
 	2009-05-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	Version 3.2.0 released.
 
 2009-06-02  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array-C.cc (class DiagArray2<Complex>::Proxy): Only explicitly
 	instantiate DiagArray2<T>::Proxy on MSVC.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-06-07  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/find.cc (Ffind): Fix docs. Improve second argument
+	handling. Add regression tests.
+
 2009-06-06  Rik  <rdrider0-list@yahoo.com>
 
 	* data.cc: Update documentation for 'complex' function
 
 2009-06-06  Rik  <rdrider0-list@yahoo.com>
 
 	* load-save.cc: Update documentation for NA and isna functions
 
diff --git a/src/DLD-FUNCTIONS/find.cc b/src/DLD-FUNCTIONS/find.cc
--- a/src/DLD-FUNCTIONS/find.cc
+++ b/src/DLD-FUNCTIONS/find.cc
@@ -394,22 +394,22 @@ containing the nonzero values.  For exam
 @group\n\
 [i, j, v] = find (3 * eye (2))\n\
      @result{} i = [ 1; 2 ]\n\
      @result{} j = [ 1; 2 ]\n\
      @result{} v = [ 3; 3 ]\n\
 @end group\n\
 @end example\n\
 \n\
-If two inputs are given, @var{n} indicates the number of elements to\n\
-find from the beginning of the matrix or vector.\n\
+If two inputs are given, @var{n} indicates the maximum number of\n\
+elements to find from the beginning of the matrix or vector.\n\
 \n\
 If three inputs are given, @var{direction} should be one of \"first\" or\n\
-\"last\" indicating that it should start counting found elements from the\n\
-first or last element.\n\
+\"last\", requesting only the first or last @var{n} indices, respectively.\n\
+However, the indices are always returned in ascending order.\n\
 \n\
 Note that this function is particularly useful for sparse matrices, as\n\
 it extracts the non-zero elements as vectors, which can then be used to\n\
 create the original matrix.  For example,\n\
 \n\
 @example\n\
 @group\n\
 sz = size(a);\n\
@@ -429,22 +429,25 @@ b = sparse(i, j, v, sz(1), sz(2));\n\
       print_usage ();
       return retval;
     }
 
   // Setup the default options.
   octave_idx_type n_to_find = -1;
   if (nargin > 1)
     {
-      n_to_find = args(1).int_value ();
-      if (error_state)
+      double val = args(1).scalar_value ();
+
+      if (error_state || (! xisinf (val) && (val < 0 || val != xround (val))))
 	{
-	  error ("find: expecting second argument to be an integer");
+	  error ("find: expecting second argument to be a nonnegative integer");
 	  return retval;
 	}
+      else
+        n_to_find = val;
     }
 
   // Direction to do the searching (1 == forward, -1 == reverse).
   int direction = 1;
   if (nargin > 2)
     {
       direction = 0;
 
@@ -631,16 +634,22 @@ b = sparse(i, j, v, sz(1), sz(2));\n\
 %! prow = [5 1 4 3 2];
 %! P = eye (5) (prow, :);
 %! [i, j, v] = find (P);
 %! [ifull, jfull, vfull] = find (full (P));
 %! assert (i, ifull);
 %! assert (j, jfull);
 %! assert (all (v == 1));
 
+%!assert (find ([2 0 1 0 5 0], 1), 1)
+%!assert (find ([2 0 1 0 5 0], 2, "last"), [3, 5])
+
+%!assert (find ([2 0 1 0 5 0], Inf), [1, 3, 5])
+%!assert (find ([2 0 1 0 5 0], Inf, "last"), [1, 3, 5])
+
 %!error <Invalid call to find.*> find ();
 
  */
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
