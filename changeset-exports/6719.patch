# HG changeset patch
# User dbateman
# Date 1181773372 0
#      Wed Jun 13 22:22:52 2007 +0000
# Node ID 30e1320bb0eec831413eec706c225deb06913d58
# Parent  509469a21cde2211781ff7dafce6929020643e10
[project @ 2007-06-13 22:22:51 by dbateman]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,10 +1,11 @@
 2007-06-13  Michael Goffioul  <michael.goffioul@swing.be>
 
+	* configure.in: Check for CXSparse with C++.
 	* Makeconf.in (do-subst-config-vals): Also substitute ${libdir} as
 	OCTAVE_CONF_LIBDIR.
 	* mkoctfile.in: Set DEFAULT_LIBDIR and substitute OCTAVE_HOME.
 	Define LIBDIR.  Use LIBDIR to set DEFAULT_LFLAGS.
 
 2007-06-12  Benjamin Lindner  <lindnerben@gmx.net>
 
 	* configure.in: For mingw, add -lws2_32 -lkernel32 to LIBS and set
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.566 $)
+AC_REVISION($Revision: 1.567 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
@@ -990,23 +990,25 @@ AC_SUBST(CXSPARSE_LIBS)
 AC_ARG_WITH(cxsparse,
   [AS_HELP_STRING([--without-cxsparse],
      [don't use CXSparse, disable some sparse functionality])],
   with_cxsparse=$withval, with_cxsparse=yes)
 
 warn_cxsparse="CXSparse not found. This will result in some lack of functionality for sparse matrices."
 if test "$with_cxsparse" = yes; then
   with_cxsparse=no
+  AC_LANG_PUSH(C++)
   AC_CHECK_HEADERS([suitesparse/cs.h ufsparse/cs.h cxsparse/cs.h cs.h], [
     AC_CHECK_LIB(cxsparse, cs_di_sqr, [CXSPARSE_LIBS="-lcxsparse"; with_cxsparse=yes])
     if test "$with_cxsparse" = yes; then
       AC_DEFINE(HAVE_CXSPARSE, 1, [Define if the CXSparse library is used.])
       warn_cxsparse=
     fi
     break])
+  AC_LANG_POP(C++)
 fi
 if test -n "$warn_cxsparse"; then
   AC_MSG_WARN($warn_cxsparse)
 fi
 
 ### Handle shared library options.
 
 ### Enable creation of static libraries.
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,13 @@
 2007-06-13  Michael Goffioul  <michael.goffioul@swing.be>
 
+	* SparseCmplxQR.cc (OCTAVE_C99_ZERO): For CXSparse 2.2 and greater
+	use cs_complex_t(0,0) for the complex zero.
+
 	* MArray-ch.cc, MArray-d.cc, MArray-i.cc, MArray-s.cc:
 	Sprinkle class instantiations with OCTAVE_API as needed.
 
 	* Array.h (INSTANTIATE_ARRAY_ASSIGN, INSTANTIATE_ARRAY,
 	INSTANTIATE_ARRAY_AND_ASSIGN): New arg, API. Change all uses.
 	* MArray-defs.h (MARRAY_OP_ASSIGN_DECL, MARRAY_OP_ASSIGN_DECLS,
 	MARRAY_OP_ASSIGN_FWD_DECLS, MARRAY_OP_ASSIGN_FRIENDS,
 	MARRAY_OP_ASSIGN_DEFS, MARRAY_UNOP, MARRAY_UNOP_DECLS,
diff --git a/liboctave/SparseCmplxQR.cc b/liboctave/SparseCmplxQR.cc
--- a/liboctave/SparseCmplxQR.cc
+++ b/liboctave/SparseCmplxQR.cc
@@ -32,23 +32,23 @@ typedef double _Complex cs_complex_t;
 
 // Why did g++ 4.x stl_vector.h make
 //   OCTAVE_LOCAL_BUFFER (cs_complex_t, buf, n)
 // an error ?
 #define OCTAVE_C99_COMPLEX(buf, n) \
   OCTAVE_LOCAL_BUFFER (double, buf ## tmp, (2 * (n))); \
   cs_complex_t *buf = reinterpret_cast<cs_complex_t *> (buf ## tmp);
 
+#define OCTAVE_C99_ZERO (0. + 0.iF)
 #else
 #define OCTAVE_C99_COMPLEX(buf, n) \
   OCTAVE_LOCAL_BUFFER (cs_complex_t, buf, (n));
+#define OCTAVE_C99_ZERO cs_complex_t(0., 0.);
 #endif
 
-#define OCTAVE_C99_ZERO (0. + 0.iF)
-
 SparseComplexQR::SparseComplexQR_rep::SparseComplexQR_rep 
 (GCC_ATTR_UNUSED const SparseComplexMatrix& a, GCC_ATTR_UNUSED int order)
 {
 #ifdef HAVE_CXSPARSE
   CXSPARSE_ZNAME () A;
   A.nzmax = a.nnz ();
   A.m = a.rows ();
   A.n = a.cols ();
