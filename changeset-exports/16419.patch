# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365038130 14400
#      Wed Apr 03 21:15:30 2013 -0400
# Node ID 16bfbf9136d31d14205398945b502dc6889c3c32
# Parent  e1d92db3a715e4cbf9013cea642139bafd401dac
avoid creating unnecessary octave_value objects for octave_link calls

* octave-link.h (octave_linke::enter_debugger_event,
octave_linke::exit_debugger_event, octave_linke::update_breakpoint,
octave_linke::do_insert_debugger_pointer,
octave_linke::do_delete_debugger_pointer,
octave_linke::do_enter_debugger_event,
octave_linke::do_exit_debugger_event,
octave_linke::do_update_breakpoint): Pass file and line info as string
and int instead of octave_value_list.  Change all callers.
* octave-qt-link.h, octave-qt-link.cc
(octave_qt_link::do_insert_debugger_pointer,
octave_qt_link::do_delete_debugger_pointer,
octave_qt_link::do_enter_debugger_event,
octave_qt_link::do_exit_debugger_event,
octave_qt_link::do_update_breakpoint): Likewise.
* debug.h, debug.cc (location_info): Delete.
* input.cc (exit_debugger_handler): New function.
(get_debug_input): Use it.

diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -60,139 +60,70 @@ octave_qt_link::do_update_history (void)
     {
       event_listener->update_history ();
 
       do_process_events ();
     }
 }
 
 void
-octave_qt_link::do_insert_debugger_pointer (const octave_value_list& args)
+octave_qt_link::do_insert_debugger_pointer (const std::string& file, int line)
 {
   if (event_listener)
     {
-      if (args.length () == 1)
-        {
-          octave_scalar_map m = args(0).scalar_map_value ();
-
-          if (! error_state)
-            {
-              octave_value ov_file = m.getfield ("file");
-              octave_value ov_line = m.getfield ("line");
-
-              std::string file = ov_file.string_value ();
-              int line = ov_line.int_value ();
+      event_listener->insert_debugger_pointer (file, line);
 
-              if (! error_state)
-                {
-                  event_listener->insert_debugger_pointer (file, line);
-
-                  do_process_events ();
-                }
-              else
-                ::error ("invalid struct in debug pointer callback");
-            }
-          else
-            ::error ("expecting struct in debug pointer callback");
-        }
-      else
-        ::error ("invalid call to debug pointer callback");
+      do_process_events ();
     }
 }
 
 void
-octave_qt_link::do_delete_debugger_pointer (const octave_value_list& args)
+octave_qt_link::do_delete_debugger_pointer (const std::string& file, int line)
 {
   if (event_listener)
     {
-      if (args.length () == 1)
-        {
-          octave_scalar_map m = args(0).scalar_map_value ();
-
-          if (! error_state)
-            {
-              octave_value ov_file = m.getfield ("file");
-              octave_value ov_line = m.getfield ("line");
-
-              std::string file = ov_file.string_value ();
-              int line = ov_line.int_value ();
+      event_listener->delete_debugger_pointer (file, line);
 
-              if (! error_state)
-                {
-                  event_listener->delete_debugger_pointer (file, line);
-
-                  do_process_events ();
-                }
-              else
-                ::error ("invalid struct in debug pointer callback");
-            }
-          else
-            ::error ("expecting struct in debug pointer callback");
-        }
-      else
-        ::error ("invalid call to debug pointer callback");
+      do_process_events ();
     }
 }
 
 void
 octave_qt_link::do_pre_input_event (void)
 {
   do_update_workspace ();
 }
 
 void
 octave_qt_link::do_post_input_event (void)
 {
   do_update_history ();
 }
 
 void
-octave_qt_link::do_enter_debugger_event (const octave_value_list& args)
+octave_qt_link::do_enter_debugger_event (const std::string& file, int line)
 {
-  do_insert_debugger_pointer (args);
+  do_insert_debugger_pointer (file, line);
 }
 
 void
-octave_qt_link::do_exit_debugger_event (const octave_value_list& args)
+octave_qt_link::do_exit_debugger_event (const std::string& file, int line)
 {
-  do_delete_debugger_pointer (args);
+  do_delete_debugger_pointer (file, line);
 }
 
 void
 octave_qt_link::do_update_breakpoint (bool insert,
-                                      const octave_value_list& args)
+                                      const std::string& file, int line)
 {
   if (event_listener)
     {
-      if (args.length () == 1)
-        {
-          octave_scalar_map m = args(0).scalar_map_value ();
-
-          if (! error_state)
-            {
-              octave_value ov_file = m.getfield ("file");
-              octave_value ov_line = m.getfield ("line");
-
-              std::string file = ov_file.string_value ();
-              int line = ov_line.int_value ();
+      event_listener->update_dbstop_marker (insert, file, line);
 
-              if (! error_state)
-                {
-                  event_listener->update_dbstop_marker (insert, file, line);
-
-                  do_process_events ();
-                }
-              else
-                ::error ("invalid struct in dbstop marker callback");
-            }
-          else
-            ::error ("expecting struct in dbstop marker callback");
-        }
-      else
-        ::error ("invalid call to dbstop marker callback");
+      do_process_events ();
     }
 }
 
 void
 octave_qt_link::do_edit_file (const octave_value_list& args)
 {
   if (event_listener)
     {
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -52,26 +52,26 @@ public:
   octave_qt_link (void);
 
   ~octave_qt_link (void) { }
 
   void do_update_workspace (void);
 
   void do_update_history (void);
 
-  void do_insert_debugger_pointer (const octave_value_list& args);
-  void do_delete_debugger_pointer (const octave_value_list& args);
+  void do_insert_debugger_pointer (const std::string& file, int line);
+  void do_delete_debugger_pointer (const std::string& file, int line);
 
   void do_pre_input_event (void);
   void do_post_input_event (void);
 
-  void do_enter_debugger_event (const octave_value_list& args);
-  void do_exit_debugger_event (const octave_value_list& args);
+  void do_enter_debugger_event (const std::string& file, int line);
+  void do_exit_debugger_event (const std::string& file, int line);
 
-  void do_update_breakpoint (bool insert, const octave_value_list& args);
+  void do_update_breakpoint (bool insert, const std::string& file, int line);
 
   void do_edit_file (const octave_value_list& args);
 
 private:
 
   // No copying!
 
   octave_qt_link (const octave_qt_link&);
diff --git a/libinterp/interp-core/octave-link.h b/libinterp/interp-core/octave-link.h
--- a/libinterp/interp-core/octave-link.h
+++ b/libinterp/interp-core/octave-link.h
@@ -135,33 +135,33 @@ public:
   }
 
   static void post_input_event (void)
   {
     if (instance_ok ())
       instance->do_post_input_event ();
   }
 
-  static void enter_debugger_event (const octave_value_list& args)
+  static void enter_debugger_event (const std::string& file, int line)
   {
     if (instance_ok ())
-      instance->do_enter_debugger_event (args);
+      instance->do_enter_debugger_event (file, line);
   }
 
-  static void exit_debugger_event (const octave_value_list& args)
+  static void exit_debugger_event (const std::string& file, int line)
   {
     if (instance_ok ())
-      instance->do_exit_debugger_event (args);
+      instance->do_exit_debugger_event (file, line);
   }
 
   static void
-  update_breakpoint (bool insert, const octave_value_list& args)
+  update_breakpoint (bool insert, const std::string& file, int line)
   {
     if (instance_ok ())
-      instance->do_update_breakpoint (insert, args);
+      instance->do_update_breakpoint (insert, file, line);
   }
 
   static void
   edit_file (const octave_value_list& args)
   {
     if (instance_ok ())
       instance->do_edit_file (args);
   }
@@ -226,24 +226,27 @@ protected:
   void do_finished_readline_hook (void) { }
 
   std::string do_last_working_directory (void);
 
   virtual void do_update_workspace (void) = 0;
 
   virtual void do_update_history (void) = 0;
 
-  virtual void do_insert_debugger_pointer (const octave_value_list& args) = 0;
-  virtual void do_delete_debugger_pointer (const octave_value_list& args) = 0;
+  virtual void
+  do_insert_debugger_pointer (const std::string& file, int line) = 0;
+
+  virtual void
+  do_delete_debugger_pointer (const std::string& file, int line) = 0;
 
   virtual void do_pre_input_event (void) = 0;
   virtual void do_post_input_event (void) = 0;
 
-  virtual void do_enter_debugger_event (const octave_value_list& args) = 0;
-  virtual void do_exit_debugger_event (const octave_value_list& args) = 0;
+  virtual void do_enter_debugger_event (const std::string& file, int line) = 0;
+  virtual void do_exit_debugger_event (const std::string& file, int line) = 0;
 
   virtual void do_update_breakpoint (bool insert,
-                                     const octave_value_list& args) = 0;
+                                     const std::string& file, int line) = 0;
 
   virtual void do_edit_file (const octave_value_list& args) = 0;
 };
 
 #endif // OCTAVELINK_H
diff --git a/libinterp/interpfcn/debug.cc b/libinterp/interpfcn/debug.cc
--- a/libinterp/interpfcn/debug.cc
+++ b/libinterp/interpfcn/debug.cc
@@ -181,27 +181,16 @@ get_user_code (const std::string& fname 
 
       if (fcn.is_defined () && fcn.is_user_code ())
         dbg_fcn = fcn.user_code_value ();
     }
 
   return dbg_fcn;
 }
 
-octave_value
-location_info (const std::string& fname, int line)
-{
-  octave_scalar_map location_info_map;
-
-  location_info_map.setfield ("file", fname);
-  location_info_map.setfield ("line", line);
-
-  return octave_value (location_info_map);
-}
-
 static void
 parse_dbfunction_params (const char *who, const octave_value_list& args,
                          std::string& symbol_name, bp_table::intmap& lines)
 {
   int nargin = args.length ();
   int idx = 0;
   int list_idx = 0;
   symbol_name = std::string ();
@@ -313,22 +302,17 @@ bp_table::do_add_breakpoint (const std::
 
                   if (retval[i] != 0)
                     {
                       bp_set.insert (fname);
 
                       std::string file = dbg_fcn->fcn_file_name ();
 
                       if (! file.empty ())
-                        {
-                          octave_value_list
-                            args (location_info (file, retval[i]));
-
-                          octave_link::update_breakpoint (true, args);
-                        }
+                        octave_link::update_breakpoint (true, file, retval[i]);
                     }
                 }
             }
         }
     }
   else
     error ("add_breakpoint: unable to find the requested function\n");
 
@@ -373,22 +357,17 @@ bp_table::do_remove_breakpoint (const st
 
                       if (p != line.end ())
                         {
                           int lineno = p->second;
 
                           cmds->delete_breakpoint (lineno);
 
                           if (! file.empty ())
-                            {
-                              octave_value_list
-                                args (location_info (file, lineno));
-                              
-                              octave_link::update_breakpoint (false, args);
-                            }
+                            octave_link::update_breakpoint (false, file, lineno);
                         }
                     }
 
                   results = cmds->list_breakpoints ();
 
                   bp_set_iterator it = bp_set.find (fname);
                   if (results.length () == 0 && it != bp_set.end ())
                     bp_set.erase (it);
@@ -427,21 +406,17 @@ bp_table::do_remove_all_breakpoints_in_f
 
           for (int i = 0; i < bkpts.length (); i++)
             {
               int lineno = static_cast<int> (bkpts(i).int_value ());
               cmds->delete_breakpoint (lineno);
               retval[i] = lineno;
 
               if (! file.empty ())
-                {
-                  octave_value_list args (location_info (file, lineno));
-
-                  octave_link::update_breakpoint (false, args);
-                }
+                octave_link::update_breakpoint (false, file, lineno);
             }
 
           bp_set_iterator it = bp_set.find (fname);
           if (it != bp_set.end ())
             bp_set.erase (it);
         }
     }
   else if (! silent)
diff --git a/libinterp/interpfcn/debug.h b/libinterp/interpfcn/debug.h
--- a/libinterp/interpfcn/debug.h
+++ b/libinterp/interpfcn/debug.h
@@ -126,11 +126,9 @@ private:
 
   fname_line_map do_get_breakpoint_list (const octave_value_list& fname_list);
 
   bool do_have_breakpoints (void) { return (! bp_set.empty ()); }
 };
 
 extern std::string get_file_line (const std::string& fname, size_t line);
 
-extern octave_value location_info (const std::string& fname, int line);
-
 #endif
diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -450,16 +450,22 @@ initialize_command_input (void)
   command_editor::set_completer_quote_characters ("'\"");
 
   command_editor::set_completion_function (generate_completion);
 
   command_editor::set_quoting_function (quoting_filename);
 }
 
 static void
+exit_debugger_handler (const std::pair<std::string, int>& arg)
+{
+  octave_link::exit_debugger_event (arg.first, arg.second);
+}
+
+static void
 get_debug_input (const std::string& prompt)
 {
   unwind_protect frame;
 
   octave_user_code *caller = octave_call_stack::caller_user_code ();
   std::string nm;
 
   int curr_debug_line = octave_call_stack::current_line ();
@@ -496,23 +502,20 @@ get_debug_input (const std::string& prom
 
           buf << "stopped in " << nm;
 
           if (curr_debug_line > 0)
             buf << " at line " << curr_debug_line;
 
           if (have_file)
             {
-              octave_value loc_info = location_info (nm, curr_debug_line);
-
-              octave_value_list args (loc_info);
+              octave_link::enter_debugger_event (nm, curr_debug_line);
 
-              octave_link::enter_debugger_event (args);
-
-              frame.add_fcn (octave_link::exit_debugger_event, args);
+              frame.add_fcn (exit_debugger_handler,
+                             std::pair<std::string, int> (nm, curr_debug_line));
 
               std::string line_buf
                 = get_file_line (nm, curr_debug_line);
 
               if (! line_buf.empty ())
                 buf << "\n" << curr_debug_line << ": " << line_buf;
             }
         }
