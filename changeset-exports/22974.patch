# HG changeset patch
# User Rik <rik@octave.org>
# Date 1482962281 28800
#      Wed Dec 28 13:58:01 2016 -0800
# Node ID ecc5eeada8dcaab1041741757b04e3e7cbe7a3b6
# Parent  aa55d32100c9935cfccb511e42c59b6125ca6a19
Don't mark nested functions in primary function as subfunctions.

* help.cc (Flocalfunctions): Remove note from docstring about nested functions
causing problems with localfunctions usage.  Add @seealso to functions.
Don't check that function is a nested one before adding it to list.  If it is
in the subfunction_names list, it is valid.

* ov-fcn-handle.cc (octave_fcn_handle::octave_fcn_handle): In constructor,
only error out if function is a true nested function, rather than a subfunction
which happens to be the parent of a nested function.

* oct-parse.in.yy (base_parser::finish_function): Determine whether function
is a subfunction or nested function and only if it is a subfunction is it added
to the list of subfunctions of the primary function and marked as being a
subfunction.

diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -678,72 +678,66 @@ file.
 
 The return value is a column cell array of function handles to all local
 functions accessible from the function from which @code{localfunctions} is
 called.  Nested functions are @emph{not} included in the list.
 
 If the call is from the command line, an anonymous function, or a script,
 the return value is an empty cell array.
 
-Compatibility Note: Subfunctions which contain nested functions are not
-included in the list.  This is a known issue.
+@seealso{functions}
 @end deftypefn */)
 {
   if (args.length () != 0)
     print_usage ();
 
   Cell retval;
 
   // Find the main function we are in.
   octave_user_code *parent_fcn = octave_call_stack::debug_user_code ();
 
   if (! parent_fcn)
     return ovl (retval);
 
   // Find the subfunctions of this function.
-  // FIXME: This includes all nested functions.
-  //        Once handles of nested functions are implemented,
-  //        we will need to exclude ones not in scope.
+  // 1) subfunction_names contains only valid subfunctions
+  // 2) subfunctions contains both nested functions and subfunctions
   const std::list<std::string> names = parent_fcn->subfunction_names ();
   const std::map<std::string, octave_value> h = parent_fcn->subfunctions ();
 
   size_t sz = names.size ();
   retval.resize (dim_vector (sz, 1));
 
   // loop over them.
   size_t i = 0;
   for (const auto& nm : names)
     {
       std::map<std::string, octave_value>::const_iterator nm_fcn = h.find (nm);
-      if (nm_fcn != h.end () &&
-          ! nm_fcn->second.user_function_value ()->is_nested_function ())
+      if (nm_fcn != h.end ())
         retval(i++) = octave_value (new octave_fcn_handle (nm_fcn->second, nm));
     }
 
-  // remove pre-allocation for nested functions
-  retval.resize (dim_vector (i, 1));
-
   return ovl (retval);
 }
 
 /*
 %!test
 %! f = tempname (".", "oct_");
 %! fcn_name = f(3:end);
 %! f = [f ".m"];
 %! unwind_protect
 %!   fid = fopen (f, "w+");
 %!   fprintf (fid, "function z = %s\n z = localfunctions; end\n", fcn_name);
 %!   fprintf (fid, "function z = b(x)\n z = x+1; end\n");
 %!   fprintf (fid, "function z = c(x)\n z = 2*x; end\n");
 %!   fclose (fid);
 %!   d = eval (fcn_name);
 %!   assert (size (d), [2, 1]);
-%!   assert (d{1}(3), 4);
-%!   assert (d{2}(3), 6);
+%!   assert (d{1} (3), 4);
+%!   assert (d{2} (3), 6);
 %! unwind_protect_cleanup
 %!   unlink (f);
 %! end_unwind_protect
 */
 
 static std::string
 do_which (const std::string& name, std::string& type)
 {
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -79,17 +79,17 @@ octave_fcn_handle::octave_fcn_handle (co
                                       const std::string& n)
   : fcn (f), nm (n), has_overloads (false)
 {
   octave_user_function *uf = fcn.user_function_value (true);
 
   if (uf && nm != anonymous)
     symbol_table::cache_name (uf->scope (), nm);
 
-  if (uf && uf->is_nested_function ())
+  if (uf && uf->is_nested_function () && ! uf->is_subfunction ())
     error ("handles to nested functions are not yet supported");
 }
 
 octave_value_list
 octave_fcn_handle::subsref (const std::string& type,
                             const std::list<octave_value_list>& idx,
                             int nargout)
 {
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -3264,32 +3264,34 @@ namespace octave
 
         if (lc)
           fcn->stash_leading_comment (lc);
 
         fcn->define_ret_list (ret_list);
 
         if (curr_fcn_depth > 1 || parsing_subfunctions)
           {
-            fcn->mark_as_subfunction ();
             fcn->stash_fcn_location (l, c);
 
-            subfunction_names.push_back (nm);
-
             if (endfunction_found && function_scopes.size () > 1)
               {
                 symbol_table::scope_id pscope
                   = function_scopes[function_scopes.size ()-2];
 
                 symbol_table::install_nestfunction (nm, octave_value (fcn),
                                                     pscope);
               }
             else
-              symbol_table::install_subfunction (nm, octave_value (fcn),
-                                                 primary_fcn_scope);
+              {
+                fcn->mark_as_subfunction ();
+                subfunction_names.push_back (nm);
+
+                symbol_table::install_subfunction (nm, octave_value (fcn),
+                                                   primary_fcn_scope);
+               }
           }
 
         if (curr_fcn_depth == 1 && fcn)
           symbol_table::update_nest (fcn->scope ());
 
         if (! lexer.reading_fcn_file && curr_fcn_depth == 1)
           {
             // We are either reading a script file or defining a function
