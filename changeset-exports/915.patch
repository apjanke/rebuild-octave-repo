# HG changeset patch
# User jwe
# Date 784513551 0
#      Fri Nov 11 00:25:51 1994 +0000
# Node ID b632b159b4ed6528bcedda5f1611387ee60166a2
# Parent  6a10b90623ea4e48f8e5a6f147d32807a75f5510
[project @ 1994-11-11 00:23:27 by jwe]

diff --git a/src/tc-rep-ass.cc b/src/tc-rep-ass.cc
--- a/src/tc-rep-ass.cc
+++ b/src/tc-rep-ass.cc
@@ -53,16 +53,19 @@ Software Foundation, 675 Mass Ave, Cambr
 // decide if the left-hand side is currently a scalar or a matrix and
 // hand off to other functions to do the real work.
 
 void
 TC_REP::assign (tree_constant& rhs, const Octave_object& args)
 {
   tree_constant rhs_tmp = rhs.make_numeric ();
 
+  if (error_state)
+    return;
+
 // This is easier than actually handling assignments to strings.
 // An assignment to a range will normally require a conversion to a
 // vector since it will normally destroy the equally-spaced property
 // of the range elements.
 
   if (is_defined () && ! is_numeric_type ())
     force_numeric ();
 
@@ -326,16 +329,19 @@ TC_REP::do_matrix_assignment (const tree
 // multi-dimensional matrices.
 
 void
 TC_REP::fortran_style_matrix_assignment (const tree_constant& rhs,
 					 const tree_constant& i_arg)
 {
   tree_constant tmp_i = i_arg.make_numeric_or_magic ();
 
+  if (error_state)
+    return;
+
   TC_REP::constant_type itype = tmp_i.const_type ();
 
   int nr = rows ();
   int nc = columns ();
 
   int rhs_nr = rhs.rows ();
   int rhs_nc = rhs.columns ();
 
@@ -592,16 +598,19 @@ TC_REP::vector_assignment (const tree_co
   int nr = rows ();
   int nc = columns ();
 
   assert ((nr == 1 || nc == 1 || (nr == 0 && nc == 0))
 	  && ! user_pref.do_fortran_indexing);
 
   tree_constant tmp_i = i_arg.make_numeric_or_range_or_magic ();
 
+  if (error_state)
+    return;
+
   TC_REP::constant_type itype = tmp_i.const_type ();
 
   switch (itype)
     {
     case complex_scalar_constant:
     case scalar_constant:
       {
 	int i = tree_to_mat_idx (tmp_i.double_value ());
@@ -978,16 +987,19 @@ TC_REP::do_vector_assign (const tree_con
 
 void
 TC_REP::do_matrix_assignment (const tree_constant& rhs,
 			      const tree_constant& i_arg,
 			      const tree_constant& j_arg)
 {
   tree_constant tmp_i = i_arg.make_numeric_or_range_or_magic ();
 
+  if (error_state)
+    return;
+
   TC_REP::constant_type itype = tmp_i.const_type ();
 
   switch (itype)
     {
     case complex_scalar_constant:
     case scalar_constant:
       {
 	int i = tree_to_mat_idx (tmp_i.double_value ());
@@ -1044,16 +1056,19 @@ TC_REP::do_matrix_assignment (const tree
 
 /* MA1 */
 void
 TC_REP::do_matrix_assignment (const tree_constant& rhs, int i,
 			      const tree_constant& j_arg)
 {
   tree_constant tmp_j = j_arg.make_numeric_or_range_or_magic ();
 
+  if (error_state)
+    return;
+
   TC_REP::constant_type jtype = tmp_j.const_type ();
 
   int rhs_nr = rhs.rows ();
   int rhs_nc = rhs.columns ();
 
   switch (jtype)
     {
     case complex_scalar_constant:
@@ -1196,16 +1211,19 @@ TC_REP::do_matrix_assignment (const tree
 
 /* MA2 */
 void
 TC_REP::do_matrix_assignment (const tree_constant& rhs,
 			      idx_vector& iv, const tree_constant& j_arg)
 {
   tree_constant tmp_j = j_arg.make_numeric_or_range_or_magic ();
 
+  if (error_state)
+    return;
+
   TC_REP::constant_type jtype = tmp_j.const_type ();
 
   int rhs_nr = rhs.rows ();
   int rhs_nc = rhs.columns ();
 
   switch (jtype)
     {
     case complex_scalar_constant:
@@ -1333,16 +1351,19 @@ TC_REP::do_matrix_assignment (const tree
 
 /* MA3 */
 void
 TC_REP::do_matrix_assignment (const tree_constant& rhs, Range& ri,
 			      const tree_constant& j_arg)
 {
   tree_constant tmp_j = j_arg.make_numeric_or_range_or_magic ();
 
+  if (error_state)
+    return;
+
   TC_REP::constant_type jtype = tmp_j.const_type ();
 
   int rhs_nr = rhs.rows ();
   int rhs_nc = rhs.columns ();
 
   switch (jtype)
     {
     case complex_scalar_constant:
@@ -1476,16 +1497,19 @@ TC_REP::do_matrix_assignment (const tree
 /* MA4 */
 void
 TC_REP::do_matrix_assignment (const tree_constant& rhs,
 			      TC_REP::constant_type i,
 			      const tree_constant& j_arg)
 {
   tree_constant tmp_j = j_arg.make_numeric_or_range_or_magic ();
 
+  if (error_state)
+    return;
+
   TC_REP::constant_type jtype = tmp_j.const_type ();
 
   int rhs_nr = rhs.rows ();
   int rhs_nc = rhs.columns ();
 
   switch (jtype)
     {
     case complex_scalar_constant:
diff --git a/src/tc-rep-idx.cc b/src/tc-rep-idx.cc
--- a/src/tc-rep-idx.cc
+++ b/src/tc-rep-idx.cc
@@ -301,16 +301,19 @@ TC_REP::do_matrix_index (const tree_cons
 tree_constant
 TC_REP::do_matrix_index (const tree_constant& i_arg,
 			 const tree_constant& j_arg) const
 {
   tree_constant retval;
 
   tree_constant tmp_i = i_arg.make_numeric_or_range_or_magic ();
 
+  if (error_state)
+    return retval;
+
   TC_REP::constant_type itype = tmp_i.const_type ();
 
   switch (itype)
     {
     case complex_scalar_constant:
     case scalar_constant:
       {
         int i = tree_to_mat_idx (tmp_i.double_value ());
@@ -399,16 +402,19 @@ TC_REP::do_matrix_index (TC_REP::constan
 
 tree_constant
 TC_REP::fortran_style_matrix_index (const tree_constant& i_arg) const
 {
   tree_constant retval;
 
   tree_constant tmp_i = i_arg.make_numeric_or_magic ();
 
+  if (error_state)
+    return retval;
+
   TC_REP::constant_type itype = tmp_i.const_type ();
 
   int nr = rows ();
   int nc = columns ();
 
   switch (itype)
     {
     case complex_scalar_constant:
@@ -551,16 +557,19 @@ TC_REP::fortran_style_matrix_index (cons
 
 tree_constant
 TC_REP::do_vector_index (const tree_constant& i_arg) const
 {
   tree_constant retval;
 
   tree_constant tmp_i = i_arg.make_numeric_or_range_or_magic ();
 
+  if (error_state)
+    return retval;
+
   TC_REP::constant_type itype = tmp_i.const_type ();
 
   int nr = rows ();
   int nc = columns ();
 
   int len = MAX (nr, nc);
 
   assert ((nr == 1 || nc == 1) && ! user_pref.do_fortran_indexing);
@@ -676,16 +685,19 @@ TC_REP::do_vector_index (const tree_cons
 
 tree_constant
 TC_REP::do_matrix_index (int i, const tree_constant& j_arg) const
 {
   tree_constant retval;
 
   tree_constant tmp_j = j_arg.make_numeric_or_range_or_magic ();
 
+  if (error_state)
+    return retval;
+
   TC_REP::constant_type jtype = tmp_j.const_type ();
 
   int nr = rows ();
   int nc = columns ();
 
   switch (jtype)
     {
     case complex_scalar_constant:
@@ -774,16 +786,19 @@ TC_REP::do_matrix_index (int i, const tr
 tree_constant
 TC_REP::do_matrix_index (const idx_vector& iv,
 			 const tree_constant& j_arg) const
 {
   tree_constant retval;
 
   tree_constant tmp_j = j_arg.make_numeric_or_range_or_magic ();
 
+  if (error_state)
+    return retval;
+
   TC_REP::constant_type jtype = tmp_j.const_type ();
 
   int nr = rows ();
   int nc = columns ();
 
   switch (jtype)
     {
     case complex_scalar_constant:
@@ -864,16 +879,19 @@ TC_REP::do_matrix_index (const idx_vecto
 tree_constant
 TC_REP::do_matrix_index (const Range& ri,
 			 const tree_constant& j_arg) const
 {
   tree_constant retval;
 
   tree_constant tmp_j = j_arg.make_numeric_or_range_or_magic ();
 
+  if (error_state)
+    return retval;
+
   TC_REP::constant_type jtype = tmp_j.const_type ();
 
   int nr = rows ();
   int nc = columns ();
 
   switch (jtype)
     {
     case complex_scalar_constant:
@@ -959,16 +977,19 @@ TC_REP::do_matrix_index (const Range& ri
 tree_constant
 TC_REP::do_matrix_index (TC_REP::constant_type mci,
 			 const tree_constant& j_arg) const
 {
   tree_constant retval;
 
   tree_constant tmp_j = j_arg.make_numeric_or_range_or_magic ();
 
+  if (error_state)
+    return retval;
+
   TC_REP::constant_type jtype = tmp_j.const_type ();
 
   int nr = rows ();
   int nc = columns ();
 
   switch (jtype)
     {
     case complex_scalar_constant:
diff --git a/src/tc-rep.cc b/src/tc-rep.cc
--- a/src/tc-rep.cc
+++ b/src/tc-rep.cc
@@ -534,16 +534,20 @@ TC_REP::all (void) const
   tree_constant retval;
 
   if (error_state)
     return retval;
 
   if (! is_numeric_type ())
     {
       tree_constant tmp = make_numeric ();
+
+      if (error_state)
+	return retval;
+
       return tmp.all ();
     }
 
   switch (type_tag)
     {
     case scalar_constant:
       {
 	double status = (scalar != 0.0);
@@ -586,16 +590,20 @@ TC_REP::any (void) const
   tree_constant retval;
 
   if (error_state)
     return retval;
 
   if (! is_numeric_type ())
     {
       tree_constant tmp = make_numeric ();
+
+      if (error_state)
+	return retval;
+
       return tmp.any ();
     }
 
   switch (type_tag)
     {
     case scalar_constant:
       {
 	double status = (scalar != 0.0);
@@ -647,16 +655,20 @@ TC_REP::is_true (void) const
   int retval = 0;
 
   if (error_state)
     return retval;
 
   if (! is_numeric_type ())
     {
       tree_constant tmp = make_numeric ();
+
+      if (error_state)
+	return retval;
+
       return tmp.is_true ();
     }
 
   switch (type_tag)
     {
     case scalar_constant:
       retval = (scalar != 0.0);
       break;
@@ -1281,18 +1293,18 @@ TC_REP::force_numeric (int force_str_con
       break;
 
     case string_constant:
       {
 	if (! force_str_conv && ! user_pref.implicit_str_to_num_ok)
 	  {
 	    ::error ("failed to convert `%s' to a numeric type --", string);
 	    ::error ("default conversion turned off");
-// Abort!
-	    jump_to_top_level ();
+
+	    return;
 	  }
 
 	int len = strlen (string);
 	if (len > 1)
 	  {
 	    type_tag = matrix_constant;
 	    Matrix *tm = new Matrix (1, len);
 	    for (int i = 0; i < len; i++)
diff --git a/src/token.h b/src/token.h
--- a/src/token.h
+++ b/src/token.h
@@ -42,16 +42,17 @@ public:
 
   enum end_tok_type
     {
       simple_end,
       for_end,
       function_end,
       if_end,
       while_end,
+      unwind_protect_end,
     };
 
   enum plot_tok_type
     {
       replot = 1,
       two_dee = 2,
       three_dee = 3,
     };
