# HG changeset patch
# User Rik <rik@octave.org>
# Date 1449509553 28800
#      Mon Dec 07 09:32:33 2015 -0800
# Node ID 3d551b2ae9282c4f0933eabbcb6a37ed99acb299
# Parent  b16bcd7a2a33d7a7be40efea9ed2345ebf0278de
Use variable name nargin consistently in C++ code.


* debug.cc (do_dbstack): Rename variable len to nargin.  Change type to int
from octave_idx_type.

* dirfns.cc (Fcd): Rename variable argc to nargin and update code.  Add nargin
checking and print_usage.  Replace make_argv call with xstring_value() call.
Use !empty() rather than length > 0 for clarity.

* error.cc (Flasterr, Flastwarn): Rename variable argc to nargin and update code.

* filter.cc (Ffilter): Remove extra space in nargin declaration.

* input.cc (Fecho): Rename variable argc to nargin and update code.

* load-path.cc (Fpath): Rename variable argc to nargin and update code.
Eliminate unnecessary declaration of "octave_value retval;".  Add more
calling forms to docstring.

* pager.cc (Fdiary): Rename variable argc to nargin and update code.  Replace
make_argv call with xstring_value() call.  Eliminate unnecessary declaration of
"octave_value retval;".

diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -1140,28 +1140,28 @@ do_dbstack (const octave_value_list& arg
   octave_value_list retval;
 
   unwind_protect frame;
 
   octave_idx_type curr_frame = -1;
 
   size_t nskip = 0;
 
-  octave_idx_type len = args.length ();
+  int nargin = args.length ();
 
   // dbstack accepts up to 2 arguments.
 
-  if (len > 2)
+  if (nargin > 2)
     print_usage ();
 
-  if (len == 1 || len == 2)
+  if (nargin == 1 || nargin == 2)
     {
       int n = 0;
 
-      for (octave_idx_type i = 0; i < len; i++)
+      for (octave_idx_type i = 0; i < nargin; i++)
         {
           octave_value arg = args(i);
 
           if (arg.is_string ())
             {
               std::string s_arg = arg.string_value ();
 
               // Skip "-completenames", octave returns full names anyway.
diff --git a/libinterp/corefcn/dirfns.cc b/libinterp/corefcn/dirfns.cc
--- a/libinterp/corefcn/dirfns.cc
+++ b/libinterp/corefcn/dirfns.cc
@@ -117,30 +117,31 @@ directory is not changed.\n\
 @code{chdir} is an alias for @code{cd} and can be used in all of the same\n\
 calling formats.\n\
 \n\
 Compatibility Note: When called with no arguments, @sc{matlab} prints the\n\
 present working directory rather than changing to the user's home directory.\n\
 @seealso{pwd, mkdir, rmdir, dir, ls}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
+  int nargin = args.length ();
+ 
+  if (nargin > 1)
+    print_usage ();
 
-  int argc = args.length () + 1;
-
-  string_vector argv = args.make_argv ("cd");
+  octave_value_list retval;
 
   if (nargout > 0)
     retval = octave_value (octave_env::get_current_directory ());
 
-  if (argc > 1)
+  if (nargin == 1)
     {
-      std::string dirname = argv[1];
+      std::string dirname = args(0).xstring_value ("cd: DIR must be a string");
 
-      if (dirname.length () > 0)
+      if (! dirname.empty ())
         octave_change_to_directory (dirname);
     }
   else
     {
       std::string home_dir = octave_env::get_home_directory ();
 
       if (! home_dir.empty ())
         octave_change_to_directory (home_dir);
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1956,35 +1956,34 @@ When called without input arguments, ret
 message identifier.\n\
 \n\
 With one argument, set the last error message to @var{msg}.\n\
 \n\
 With two arguments, also set the last message identifier.\n\
 @seealso{lasterror, error, lastwarn}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
+  int nargin = args.length ();
 
-  int argc = args.length () + 1;
-
-  if (argc > 3)
+  if (nargin > 2)
     print_usage ();
 
+  octave_value_list retval;
   string_vector argv = args.make_argv ("lasterr");
 
   std::string prev_error_id = Vlast_error_id;
   std::string prev_error_message = Vlast_error_message;
 
-  if (argc > 2)
+  if (nargin == 2)
     Vlast_error_id = argv(2);
 
-  if (argc > 1)
+  if (nargin > 0)
     Vlast_error_message = argv(1);
 
-  if (argc == 1 || nargout > 0)
+  if (nargin == 0 || nargout > 0)
     {
       retval(1) = prev_error_id;
       retval(0) = prev_error_message;
     }
 
   return retval;
 }
 
@@ -1999,35 +1998,35 @@ When called without input arguments, ret
 message identifier.\n\
 \n\
 With one argument, set the last warning message to @var{msg}.\n\
 \n\
 With two arguments, also set the last message identifier.\n\
 @seealso{warning, lasterror, lasterr}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
 
-  int argc = args.length () + 1;
+  int nargin = args.length ();
 
-  if (argc > 3)
+  if (nargin > 2)
     print_usage ();
 
+  octave_value_list retval;
   string_vector argv = args.make_argv ("lastwarn");
 
   std::string prev_warning_id = Vlast_warning_id;
   std::string prev_warning_message = Vlast_warning_message;
 
-  if (argc > 2)
+  if (nargin == 2)
     Vlast_warning_id = argv(2);
 
-  if (argc > 1)
+  if (nargin > 0)
     Vlast_warning_message = argv(1);
 
-  if (argc == 1 || nargout > 0)
+  if (nargin == 0 || nargout > 0)
     {
       retval(1) = prev_warning_id;
       retval(0) = prev_warning_message;
     }
 
   return retval;
 }
 
diff --git a/libinterp/corefcn/filter.cc b/libinterp/corefcn/filter.cc
--- a/libinterp/corefcn/filter.cc
+++ b/libinterp/corefcn/filter.cc
@@ -389,17 +389,17 @@ H(z) = ---------------------\n\
 @end example\n\
 \n\
 @end ifnottex\n\
 @seealso{filter2, fftfilt, freqz}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  int nargin  = args.length ();
+  int nargin = args.length ();
 
   if (nargin < 3 || nargin > 5)
     print_usage ();
 
   const char *a_b_errmsg = "filter: A and B must be vectors";
   const char *x_si_errmsg = "filter: X and SI must be arrays";
 
   int dim;
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -968,46 +968,46 @@ functions.\n\
 @end table\n\
 \n\
 @noindent\n\
 With no arguments, @code{echo} toggles the current echo state.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  int argc = args.length () + 1;
+  int nargin = args.length ();
 
   string_vector argv = args.make_argv ("echo");
 
-  switch (argc)
+  switch (nargin)
     {
-    case 1:
+    case 0:
       {
         if ((Vecho_executing_commands & ECHO_SCRIPTS)
             || (Vecho_executing_commands & ECHO_FUNCTIONS))
           Vecho_executing_commands = ECHO_OFF;
         else
           Vecho_executing_commands = ECHO_SCRIPTS;
       }
       break;
 
-    case 2:
+    case 1:
       {
         std::string arg = argv[1];
 
         if (arg == "on")
           Vecho_executing_commands = ECHO_SCRIPTS;
         else if (arg == "off")
           Vecho_executing_commands = ECHO_OFF;
         else
           print_usage ();
       }
       break;
 
-    case 3:
+    case 2:
       {
         std::string arg = argv[1];
 
         if (arg == "on" && argv[2] == "all")
           {
             int tmp = (ECHO_SCRIPTS | ECHO_FUNCTIONS);
             Vecho_executing_commands = tmp;
           }
diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -2333,66 +2333,64 @@ DEFUN (__pathorig__, , ,
 Undocumented internal function.\n\
 @end deftypefn")
 {
   return octave_value (load_path::system_path ());
 }
 
 DEFUN (path, args, nargout,
        "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {} path (@dots{})\n\
+@deftypefn  {Built-in Function} {} path ()\n\
+@deftypefnx {Built-in Function} {@var{str} =} path ()\n\
+@deftypefnx {Built-in Function} {@var{str} =} path (@var{path1}, @dots{})\n\
 Modify or display Octave's load path.\n\
 \n\
 If @var{nargin} and @var{nargout} are zero, display the elements of\n\
 Octave's load path in an easy to read format.\n\
 \n\
 If @var{nargin} is zero and nargout is greater than zero, return the\n\
 current load path.\n\
 \n\
 If @var{nargin} is greater than zero, concatenate the arguments,\n\
 separating them with @code{pathsep}.  Set the internal search path\n\
 to the result and return it.\n\
 \n\
 No checks are made for duplicate elements.\n\
 @seealso{addpath, rmpath, genpath, pathdef, savepath, pathsep}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
-  int argc = args.length () + 1;
+  int nargin = args.length ();
 
   string_vector argv = args.make_argv ("path");
 
-  if (argc > 1)
+  if (nargin > 0)
     {
       std::string path = argv[1];
 
-      for (int i = 2; i < argc; i++)
+      for (int i = 2; i <= nargin; i++)
         path += dir_path::path_sep_str () + argv[i];
 
       load_path::set (path, true);
 
       rehash_internal ();
     }
 
   if (nargout > 0)
-    retval = load_path::path ();
-  else if (argc == 1 && nargout == 0)
+    return octave_value (load_path::path ());
+  else if (nargin == 0 && nargout == 0)
     {
       octave_stdout <<
         "\nOctave's search path contains the following directories:\n\n";
 
       string_vector dirs = load_path::dirs ();
 
       dirs.list_in_columns (octave_stdout);
 
       octave_stdout << "\n";
     }
-
-  return retval;
 }
 
 DEFUN (addpath, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {} addpath (@var{dir1}, @dots{})\n\
 @deftypefnx {Built-in Function} {} addpath (@var{dir1}, @dots{}, @var{option})\n\
 Add named directories to the function search path.\n\
 \n\
diff --git a/libinterp/corefcn/pager.cc b/libinterp/corefcn/pager.cc
--- a/libinterp/corefcn/pager.cc
+++ b/libinterp/corefcn/pager.cc
@@ -534,36 +534,32 @@ Stop recording the session in the diary 
 @item @var{filename}\n\
 Record the session in the file named @var{filename}.\n\
 @end table\n\
 \n\
 With no arguments, @code{diary} toggles the current diary state.\n\
 @seealso{history}\n\
 @end deftypefn")
 {
-  octave_value_list retval;
-
-  int argc = args.length () + 1;
+  int nargin = args.length ();
 
-  if (argc < 1 || argc > 2)
+  if (nargin > 1)
     print_usage ();
 
-  string_vector argv = args.make_argv ("diary");
-
   if (diary_file.empty ())
     diary_file = "diary";
 
-  if (argc == 1)
+  if (nargin == 0)
     {
       write_to_diary_file = ! write_to_diary_file;
       open_diary_file ();
     }
   else
     {
-      std::string arg = argv[1];
+      std::string arg = args(0).xstring_value ("diary: argument must be a string");
 
       if (arg == "on")
         {
           write_to_diary_file = true;
           open_diary_file ();
         }
       else if (arg == "off")
         {
@@ -572,18 +568,16 @@ With no arguments, @code{diary} toggles 
         }
       else
         {
           diary_file = arg;
           write_to_diary_file = true;
           open_diary_file ();
         }
     }
-
-  return retval;
 }
 
 DEFUN (__diaryfile__, , ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{fname} =} __diaryfile__ ()\n\
 Undocumented internal function\n\
 @end deftypefn")
 {
