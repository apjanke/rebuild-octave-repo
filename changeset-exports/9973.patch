# HG changeset patch
# User Shai Ayal <shaiay@users.sourceforge.net>
# Date 1260637720 -7200
#      Sat Dec 12 19:08:40 2009 +0200
# Node ID cd8f355157b88eeda91ab9f7ea3da32a0d6eb774
# Parent  d32a6cc0193b308048f0cfff94303382c6c4bca8
Handle figure visibility in fltk backend

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2009-12-12  Shai Ayal  <shaiay@users.sourceforge.net>
+
+	* DLD-FUNCTIONS/fltk_backend.cc (plot_window::plot_window):
+	Handle case where window is created but not visible. Cache
+	window label.
+	(figure_manager::toggle_window_visibility,
+	(figure_manager::do_toggle_window_visibility): New methods.
+	(fltk_backend::property_change): Handle figure visibility change.
+
 2009-12-11  John W. Eaton  <jwe@octave.org>
 
 	* graphics.h.in (base_properties::all_dynamic_properties):
 	No longer static.
 	(base_properties::set (const caseless_str&, const octave_value&)):
 	Only provide decl, not definition.
 	(base_properties::set (const caseless_str&, const std::string&,
 	const octave_value&)): Delete.
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -264,32 +264,36 @@ public:
       status->textcolor (FL_BLACK);
       status->color (FL_GRAY);
       status->textfont (FL_COURIER);
       status->textsize (10);
       status->box (FL_ENGRAVED_BOX);
 
       // This allows us to have a valid OpenGL context right away.
       canvas->mode (FL_DEPTH | FL_DOUBLE );
-      show ();
-      canvas->show ();
-      canvas->make_current ();
+      if (fp.is_visible ())
+        {
+          show ();
+          canvas->show ();
+          canvas->make_current ();
+        }
     }
     end ();
 
     status->show ();
     autoscale->show ();
     togglegrid->show ();
 
     resizable (canvas);
     size_range (4*status_h, 2*status_h);
 
     std::stringstream name;
     name << "octave: figure " << number ();
-    label (name.str ().c_str ());
+    window_label = name.str ();
+    label (window_label.c_str ());
   }
 
   ~plot_window (void)
   {
     canvas->hide ();
     status->hide ();
     this->hide ();
     delete canvas;
@@ -311,16 +315,19 @@ public:
 
   void mark_modified (void)
   {
     damage (FL_DAMAGE_ALL);
     canvas->damage (FL_DAMAGE_ALL);
   }
 
 private:
+  // window name -- this must exists for the duration of the window's
+  // life
+  std::string window_label;
 
   // Figure properties.
   figure::properties& fp;
 
   // Status area height.
   static const int status_h = 20;
 
   // Window callback.
@@ -670,16 +677,27 @@ public:
       instance->do_delete_window (idx);
   }
 
   static void delete_window (std::string idx_str)
   {
     delete_window (str2idx (idx_str));
   }
 
+  static void toggle_window_visibility (int idx, bool is_visible)
+  {
+    if (instance_ok ())
+      instance->do_toggle_window_visibility (idx, is_visible);
+  }
+
+  static void toggle_window_visibility (std::string idx_str, bool is_visible)
+  {
+    toggle_window_visibility (str2idx (idx_str), is_visible);
+  }
+
   static void mark_modified (int idx)
   {
     if (instance_ok ())
       instance->do_mark_modified (idx);
   }
 
   static void mark_modified (const graphics_handle& gh)
   {
@@ -747,16 +765,30 @@ private:
     wm_iterator win;
     if ((win = windows.find (idx)) != windows.end ())
       {
 	delete win->second;
 	windows.erase (win);
       }
   }
 
+  void do_toggle_window_visibility (int idx, bool is_visible)
+  {
+    wm_iterator win;
+    if ((win = windows.find (idx)) != windows.end ())
+      {
+        if (is_visible)
+          win->second->show ();
+        else
+          win->second->hide ();
+
+        win->second->redraw ();
+      }
+  }
+
   void do_mark_modified (int idx)
   {
     wm_iterator win;
     if ((win = windows.find (idx)) != windows.end ())
       {
 	win->second->mark_modified ();
       }
   }
@@ -906,20 +938,23 @@ public:
   void property_changed (const graphics_object& go, int id)
   {
     if (go.isa ("figure"))
       {
 	octave_value ov = go.get (caseless_str ("__plot_stream__"));
 	
 	if (! ov.is_empty ())
 	  {
+            const figure::properties& fp =
+              dynamic_cast<const figure::properties&> (go.get_properties ());
+            
 	    switch (id)
 	      {
 	      case base_properties::VISIBLE:
-		// FIXME -- something to do here.
+                figure_manager::toggle_window_visibility (ov.string_value(), fp.is_visible ());
 		break;
 	      }
 	  }
       }
   }
 
   void redraw_figure (const graphics_object& go) const
   {
