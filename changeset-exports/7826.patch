# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1202830676 -3600
#      Tue Feb 12 16:37:56 2008 +0100
# Node ID 68550ad9ee9c104b6cde93b24280048f3e7bb3fd
# Parent  13871b7de1244ef5cd4a2c4820b1bb28d09fbfdb
Add support for extern updaters. Add set_figure_position interface to graphics_backend.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
 2008-06-04  Michael Goffioul <michael.goffioul@gmail.com>
 
+	* genprops.awk: Add 'U' modifier to support extern updaters.
+	* graphics.h.in (base_graphics_backend::gripe_invalid): New method
+	to simplify error reporting.
+	(class base_graphics_backend): Use it.
+	(base_graphics_backend::set_figure_position): New backend method.
+	(graphics_backend::set_figure_position): Likewise.
+	(figure::properties::position): Mark property with updater.
+	(figure::properties::update_position): New updater.
+
 	* graphics.h.in (root_figure::properties::callbackobject):
 	New root property.
 	(root_figure::properties::cbo_stack): New field.
 	* graphics.cc (xset_gcbo, xreset_gcbo): New utility functions.
 	(execute_callback): Set callbackobject property in root object
 	before executing a callback.
 	(root_figure::properties::set_callbackobject): Implement accessor.
 
diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -286,27 +286,32 @@ function emit_declarations ()
     {
       printf ("  void set_%s (const octave_value& val)", name[i], type[i]);
 
       if (emit_set[i] == "definition")
       {
         printf ("\n  {\n    if (! error_state)\n      {\n        %s = val;\n",
           name[i]);
         if (updater[i])
-          printf ("        %s ();\n", updater[i]);
+          printf ("        update_%s ();\n", name[i]);
         if (limits[i])
           printf ("        update_axis_limits (\"%s\");\n", name[i]);
         if (mode[i])
           printf ("        set_%smode (\"manual\");\n", name[i]);
         printf ("        mark_modified ();\n      }\n  }\n\n");
       }
       else
         printf (";\n\n");
     }
 
+    if (updater[i] == "extern")
+    {
+      printf ("  void update_%s (void);\n\n", name[i]);
+    }
+
 ##    if (emit_ov_set[i])
 ##    {
 ##      printf ("  void set_%s (const octave_value& val)", name[i]);
 ##
 ##      if (emit_ov_set[i] == "definition")
 ##        printf (" { set_%s (%s (val)); }\n\n", name[i], type[i]);
 ##      else if (emit_ov_set[i] == "assignment")
 ##      {
@@ -523,20 +528,25 @@ BEGIN {
 	## The property is hidden
 	if (index (quals, "h"))
 	  hidden[idx] = 1;
 
 	## The property is read-only
 	if (index (quals, "r"))
 	  readonly[idx] = 1;
 
-        ## There is an updater method that should be called
+        ## There is an inline updater method that should be called
         ## from the set method
         if (index (quals, "u"))
-          updater[idx] = ("update_" name[idx]);
+          updater[idx] = "inline";
+        
+	## There is an extern updater method that should be called
+        ## from the set method
+        if (index (quals, "U"))
+          updater[idx] = "extern";
 
 ##        ## emmit an asignment set function
 ##        if (index (quals, "a"))
 ##          emit_ov_set[idx] = "assignment";
 ##
 ##        if (type[idx] != "octave_value")
 ##        {
 ##          ## The 'o' and 'O' qualifiers are only useful when the
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1157,47 +1157,57 @@ public:
 
   virtual ~base_graphics_backend (void) { }
 
   std::string get_name (void) const { return name; }
 
   virtual bool is_valid (void) const { return false; }
 
   virtual void close_figure (const octave_value&) const
-    { error ("close_figure: invalid graphics backend"); }
+    { gripe_invalid ("close_figure"); }
 
   virtual void redraw_figure (const graphics_handle&) const
-    { error ("redraw_figure: invalid graphics backend"); }
+    { gripe_invalid ("redraw_figure"); }
 
   virtual void print_figure (const graphics_handle&, const std::string&,
 			     const std::string&, bool,
 			     const std::string& = "") const
-    { error ("print_figure: invalid graphics backend"); }
+    { gripe_invalid ("print_figure"); }
 
   virtual Matrix get_canvas_size (const graphics_handle&) const
     {
-      error ("get_canvas_size: invalid graphics backend");
+      gripe_invalid ("get_canvas_size");
       return Matrix (1, 2, 0.0);
     }
 
   virtual double get_screen_resolution (void) const
     {
-      error ("get_screen_resolution: invalid graphics backend");
-      return -1;
+      gripe_invalid ("get_screen_resolution");
+      return 72.0;
     }
   
   virtual Matrix get_screen_size (void) const
     {
-      error ("get_screen_size: invalid graphics backend");
+      gripe_invalid ("get_screen_size");
       return Matrix (1, 2, 0.0);
     }
 
+  virtual void set_figure_position (const graphics_handle&, const Matrix&) const
+    { gripe_invalid ("set_figure_position"); }
+
 private:
   std::string name;
   int count;
+
+private:
+  void gripe_invalid (const std::string& fname) const
+    {
+      if (! is_valid ())
+	error ("%s: invalid graphics backend", fname.c_str ());
+    }
 };
 
 class graphics_backend
 {
 public:
   graphics_backend (void)
       : rep (new base_graphics_backend ("unknown"))
     {
@@ -1255,16 +1265,19 @@ public:
     { return rep->get_canvas_size (fh); }
 
   double get_screen_resolution (void) const
     { return rep->get_screen_resolution (); }
 
   Matrix get_screen_size (void) const
     { return rep->get_screen_size (); }
 
+  void set_figure_position (const graphics_handle& h, const Matrix& pos) const
+    { rep->set_figure_position (h, pos); }
+
   OCTINTERP_API static graphics_backend default_backend (void);
 
   static void register_backend (const graphics_backend& b)
     { available_backends[b.get_name ()] = b; }
 
   static void unregister_backend (const std::string& name)
     { available_backends.erase (name); }
 
@@ -2144,16 +2157,19 @@ public:
 	    }
 	  else
 	    error ("__backend__ must be a string");
 	}
     }
 
     Matrix get_boundingbox (bool internal = false) const;
 
+    void update_position (void)
+      { backend.set_figure_position (__myhandle__, get_boundingbox ()); }
+
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES(figure)
       any_property __plot_stream__ h , Matrix ()
       bool_property __enhanced__ h , "on"
       radio_property nextplot , "new|{add}|replace_children|replace"
       callback_property closerequestfcn , "closereq"
@@ -2179,17 +2195,17 @@ public:
       radio_property paperunits , "{inches}|centimeters|normalized|points"
       array_property paperposition , Matrix (1, 4 , 0) 
       radio_property paperpositionmode , "auto|{manual}"
       array_property papersize r , Matrix (1, 4, 0)
       radio_property papertype , "{usletter}|uslegal|a0|a1|a2|a3|a4|a5|b0|b1|b2|b3|b4|b5|arch-a|arch-b|arch-c|arch-d|arch-e|a|b|c|d|e|tabloid"
       radio_property pointer , "crosshair|fullcrosshair|{arrow}|ibeam|watch|topl|topr|botl|botr|left|top|right|bottom|circle|cross|fleur|custom|hand"
       array_property pointershapecdata , Matrix (16, 16, 0)
       array_property pointershapehotspot , Matrix (1, 2, 0)
-      array_property position , default_figure_position ()
+      array_property position u , default_figure_position ()
       radio_property renderer , "{painters}|zbuffer|opengl|none"
       radio_property renderermode , "{auto}|manual"
       bool_property resize , "on"
       callback_property resizefcn , Matrix ()
       radio_property selectiontype , "{normal}|open|alt|extend"
       radio_property toolbar , "none|{auto}|figure"
       radio_property units , "inches|centimeters|normalized|points|{pixels}|characters"
       callback_property windowbuttondownfcn , Matrix ()
