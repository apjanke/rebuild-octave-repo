# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1238999593 -7200
#      Mon Apr 06 08:33:13 2009 +0200
# Node ID 38c3a0f8c6d0c58909700c48814d9d39f4f65a7d
# Parent  45c832e9976d763d93510398fb670b9293e6a9d0
optimize toeplitz

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-04-06  Jaroslav Hajek  <highegg@gmail.com>
+
+	* special-matrix/toeplitz.m: Optimize.
+
 2008-04-03  David Bateman  <dbateman@free.fr>
 
 	* plot/__scatter__.m: correct indexing of cdata.x
 
 2009-04-03  Jaroslav Hajek  <highegg@gmail.com>
 
 	* optimization/fminunc.m: New function.
 	* optimization/Makefile.in: Update.
diff --git a/scripts/special-matrix/toeplitz.m b/scripts/special-matrix/toeplitz.m
--- a/scripts/special-matrix/toeplitz.m
+++ b/scripts/special-matrix/toeplitz.m
@@ -1,10 +1,11 @@
 ## Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2004,
 ##               2005, 2006, 2007, 2008, 2009 John W. Eaton
+## Copyright (C) 2009 VZLU Prague
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -49,68 +50,60 @@
 ##  .     ,      ,       .  .
 ## c(n) c(n-1) c(n-2) @dots{}  c(0)
 ## @end group
 ## @end example
 ## @end ifnottex
 ## @seealso{hankel, vander, sylvester_matrix, hilb, invhilb}
 ## @end deftypefn
 
-## Author: jwe
+## Author: jwe && jh
 
 function retval = toeplitz (c, r)
 
   if (nargin == 1)
     r = c;
   elseif (nargin != 2)
     print_usage ();
   endif
 
-  [c_nr, c_nc] = size (c);
-  [r_nr, r_nc] = size (r);
-
-  if ((c_nr != 1 && c_nc != 1) || (r_nr != 1 && r_nc != 1))
+  if (! (isvector (c) && isvector (r)))
     error ("toeplitz: expecting vector arguments");
   endif
 
-  if (c_nc != 1)
-    c = c.';
-  endif
+  nc = length (r);
+  nr = length (c);
 
-  if (r_nr != 1)
-    r = r.';
+  if (nr == 0 || nc == 0)
+    ## Empty matrix.
+    retval = zeros (nr, nc, class (c));
+    return;
   endif
 
   if (r (1) != c (1))
     warning ("toeplitz: column wins diagonal conflict");
   endif
 
   ## If we have a single complex argument, we want to return a
   ## Hermitian-symmetric matrix (actually, this will really only be
   ## Hermitian-symmetric if the first element of the vector is real).
 
-  if (nargin == 1)
+  if (nargin == 1 && iscomplex (c))
     c = conj (c);
     c(1) = conj (c(1));
   endif
 
-  ## This should probably be done with the colon operator...
-
-  nc = length (r);
-  nr = length (c);
-
-  retval = resize (resize (c, 0), nr, nc);
+  ## Concatenate data into a single column vector.
+  data = [r(end:-1:2)(:); c(:)];
 
-  for i = 1:min (nc, nr)
-    retval (i:nr, i) = c (1:nr-i+1);
-  endfor
+  ## Get slices.
+  slices = cellslices (data, nc:-1:1, nc+nr-1:-1:nr);
 
-  for i = 1:min (nr, nc-1)
-    retval (i, i+1:nc) = r (2:nc-i+1);
-  endfor
+  ## Form matrix.
+  retval = horzcat (slices{:});
 
 endfunction
 
 %!assert((toeplitz (1) == 1
 %! && toeplitz ([1, 2, 3], [1; -3; -5]) == [1, -3, -5; 2, 1, -3; 3, 2, 1]
 %! && toeplitz ([1, 2, 3], [1; -3i; -5i]) == [1, -3i, -5i; 2, 1, -3i; 3, 2, 1]));
 
 %!error toeplitz ([1, 2; 3, 4], 1);
