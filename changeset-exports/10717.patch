# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1277156811 -7200
#      Mon Jun 21 23:46:51 2010 +0200
# Node ID 9d4a198614ab5d247c9a3de0035175076c414135
# Parent  f7f26094021b3cafc8e262a6eaebad82f050572f
Add functionality set(handle)

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,37 @@
+2010-06-21  David Bateman  <dbateman@free.fr>
+
+	* graphics.cc (std::string radio_values:values_as_string (void)
+	const, Cell radio_values:values_as_cell (void) const): New functions.
+	(void graphics_object::set (const octave_value_list&)): Throw error
+	with no arguments.
+	(std::string base_graphics_object::values_as_string (void),
+	Octave_map base_graphics_object::values_as_struct (void)): New
+	functions.
+	(Fset): Allow single handle as an argument and return the radio
+	values.
+	* graphics.h.in (virtual bool base_property::is_radio (void) const,
+	virtual std::string base_property::values_as_string (void) const,
+	virtual Cell base_property::values_as_cell (void) const):
+	New function.
+	(std::string radio_values::values_as_string (void) const,
+	Cell radio_values::values_as_cell (void) const): Declaration.
+	(octave_idx_type radio_values::nelem (void) const): New function.
+	(std::string radio_property::values_as_string (void) const,
+	Cell radio_property::values_as_cell (void) const,
+	bool radio_property::is_radio (void) const): New functions.
+	(bool property::is_radio (void) const,
+	std::string raproperty::values_as_string (void) const,
+	Cell property::values_as_cell (void) const): New functions.
+	(std::string base_graphics_object::values_as_string (void),
+	Octave_map base_graphics_object::values_as_struct (void)): Declaration.
+	(std::string graphics_object::values_as_string (void),
+	Octave_map graphics_object::values_as_struct (void)): New functions.
+
 2010-06-21  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (single_type_concat): Assume matrix arguments start from
 	index zero.
 	(do_cat): Make dim a separate argument. Special-case support for dim =
 	-1 and dim = -2
 
 2010-06-18  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -813,16 +813,54 @@ radio_values::radio_values (const std::s
         default_val = t;
 
       possible_vals.insert (t);
 
       beg = end + 1;
     }
 }
 
+std::string
+radio_values::values_as_string (void) const
+{
+  std::string retval;
+  for (std::set<caseless_str>::const_iterator it = possible_vals.begin ();
+       it != possible_vals.end (); it++)
+    {
+      if (retval == "")
+        {
+          if (*it == default_value ())
+            retval = "{" + *it + "}";
+          else
+            retval = *it;
+        }
+      else
+        {
+          if (*it == default_value ())
+            retval += " | {" + *it + "}";
+          else
+            retval += " | " + *it;
+        }
+    }
+  if (retval != "")
+    retval = "[ " + retval + " ]";
+  return retval;
+}
+
+Cell
+radio_values::values_as_cell (void) const
+{
+  octave_idx_type i = 0;
+  Cell retval (nelem (), 1);
+  for (std::set<caseless_str>::const_iterator it = possible_vals.begin ();
+       it != possible_vals.end (); it++)
+    retval(i++) = std::string (*it);
+  return retval;
+}
+
 bool
 color_values::str2rgb (std::string str)
 {
   double tmp_rgb[3] = {0, 0, 0};
   bool retval = true;
   unsigned int len = str.length();
 
   std::transform (str.begin (), str.end (), str.begin (), tolower);
@@ -1512,17 +1550,17 @@ graphics_handle::graphics_handle (const 
 // Set properties given as a cs-list of name, value pairs.
 
 void
 graphics_object::set (const octave_value_list& args)
 {
   int nargin = args.length ();
 
   if (nargin == 0)
-    rep->defaults ();
+    error ("graphics_object::set: Nothing to set");
   else if (nargin % 2 == 0)
     {
       for (int i = 0; i < nargin; i += 2)
         {
           caseless_str name = args(i).string_value ();
 
           if (! error_state)
             {
@@ -2411,16 +2449,80 @@ base_graphics_object::remove_all_listene
 
       property p = get_properties ().get_property (pa->first);
 
       if (! error_state && p.ok ())
         p.delete_listener ();
     }
 }
 
+std::string
+base_graphics_object::values_as_string (void)
+{
+  std::string retval;
+
+  if (valid_object ())
+    {
+      Octave_map m = get ().map_value ();
+  
+      for (Octave_map::const_iterator pa = m.begin (); pa != m.end (); pa++)
+        {
+          if (pa->first != "children")
+            {
+              property p = get_properties ().get_property (pa->first);
+
+              if (p.ok () && ! p.is_hidden ())
+                {
+                  retval += "\n\t" + std::string (pa->first) + ":  "; 
+                  if (p.is_radio ())
+                    retval += p.values_as_string ();
+                }
+            }
+        }
+      if (retval != "")
+        retval += "\n";
+    }
+  else
+    error ("base_graphics_object::values_as_string: invalid graphics object");
+
+  return retval;
+}
+
+Octave_map
+base_graphics_object::values_as_struct (void)
+{
+  Octave_map retval;
+
+  if (valid_object ())
+    {
+      Octave_map m = get ().map_value ();
+  
+      for (Octave_map::const_iterator pa = m.begin (); pa != m.end (); pa++)
+        {
+          if (pa->first != "children")
+            {
+              property p = get_properties ().get_property (pa->first);
+
+              if (p.ok () && ! p.is_hidden ())
+                {
+                  if (p.is_radio ())
+                    retval.assign (p.get_name (), 
+                                   octave_value (p.values_as_cell ()));
+                  else
+                    retval.assign (p.get_name (), octave_value (Cell ()));
+                }
+            }
+        }
+    }
+  else
+    error ("base_graphics_object::values_as_struct: invalid graphics object");
+
+  return retval;
+}
+
 // ---------------------------------------------------------------------
 
 #include "graphics-props.cc"
 
 // ---------------------------------------------------------------------
 
 void
 root_figure::properties::set_currentfigure (const octave_value& v)
@@ -4925,17 +5027,17 @@ Return true if @var{h} is a graphics han
   if (args.length () == 1)
     retval = is_handle (args(0));
   else
     print_usage ();
 
   return retval;
 }
 
-DEFUN (set, args, ,
+DEFUN (set, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} set (@var{h}, @var{property}, @var{value}, @dots{})\n\
 @deftypefnx {Built-in Function} {} set (@var{h}, @var{properties}, @var{values})\n\
 @deftypefnx {Built-in Function} {} set (@var{h}, @var{pv})\n\
 Set named property values for the graphics handle (or vector of graphics\n\
 handles) @var{h}.\n\
 There are three ways how to give the property names and values:\n\
 \n\
@@ -5005,16 +5107,27 @@ the dimensions of @var{pv}.\n\
                           break;
 
                         }
                     }
                   else if (nargin == 2 && args(1).is_map ())
                     {
                       obj.set (args(1).map_value ());
                     }
+                  else if (nargin == 1)
+                    {
+                      if (nargout != 0)
+                        retval = obj.values_as_struct ();
+                      else
+                        {
+                          std::string s = obj.values_as_string ();
+                          if (! error_state)
+                            octave_stdout << s;
+                        }
+                    }
                   else
                     {
                       obj.set (args.splice (0, 1));
                       request_drawnow = true;
                     }
                 }
               else
                 {
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -376,30 +376,45 @@ public:
   graphics_handle get_parent (void) const { return parent; }
 
   void set_parent (const graphics_handle &h) { parent = h; }
 
   bool is_hidden (void) const { return hidden; }
 
   void set_hidden (bool flag) { hidden = flag; }
 
+  virtual bool is_radio (void) const { return false; }
+
   int get_id (void) const { return id; }
 
   void set_id (int d) { id = d; }
 
   // Sets property value, notifies backend.
   // If do_run is true, runs associated listeners.
   bool set (const octave_value& v, bool do_run = true);
   
   virtual octave_value get (void) const
     {
       error ("get: invalid property \"%s\"", name.c_str ());
       return octave_value ();
     }
 
+
+  virtual std::string values_as_string (void) const
+    {
+      error ("values_as_string: invalid property \"%s\"", name.c_str ());
+      return std::string ();
+    }
+
+  virtual Cell values_as_cell (void) const
+    {
+      error ("values_as_cell: invalid property \"%s\"", name.c_str ());
+      return Cell ();
+    }
+
   base_property& operator = (const octave_value& val)
     {
       set (val);
       return *this;
     }
 
   void add_listener (const octave_value& v, listener_mode mode = POSTSET)
     {
@@ -717,16 +732,22 @@ public:
     return retval;
   }
   
   bool contains (const std::string& val)
   {
     return (possible_vals.find (val) != possible_vals.end ());
   }
 
+  std::string values_as_string (void) const;
+
+  Cell values_as_cell (void) const;
+  
+  octave_idx_type nelem (void) const { return possible_vals.size (); }
+
 private:
   // Might also want to cache
   std::string default_val;
   std::set<caseless_str> possible_vals;
 };
 
 class radio_property : public base_property
 {
@@ -748,19 +769,25 @@ public:
 
   radio_property (const radio_property& p)
     : base_property (p), vals (p.vals), current_val (p.current_val) { }
 
   octave_value get (void) const { return octave_value (current_val); }
 
   const std::string& current_value (void) const { return current_val; }
 
+  std::string values_as_string (void) const { return vals.values_as_string (); }
+
+  Cell values_as_cell (void) const { return vals.values_as_cell (); }
+      
   bool is (const caseless_str& v) const
     { return v.compare (current_val); }
 
+  bool is_radio (void) const { return true; }
+
   radio_property& operator = (const octave_value& val)
     {
       set (val);
       return *this;
     }
 
   base_property* clone (void) const { return new radio_property (*this); }
 
@@ -1464,28 +1491,37 @@ public:
     { rep->set_parent (h); }
 
   bool is_hidden (void) const
     { return rep->is_hidden (); }
 
   void set_hidden (bool flag)
     { rep->set_hidden (flag); }
 
+  bool is_radio (void) const
+    { return rep->is_radio (); }
+
   int get_id (void) const
     { return rep->get_id (); }
 
   void set_id (int d)
     { rep->set_id (d); }
 
   octave_value get (void) const
     { return rep->get (); }
 
   bool set (const octave_value& val)
     { return rep->set (val); }
 
+  std::string values_as_string (void) const
+    { return rep->values_as_string (); }
+
+  Cell values_as_cell (void) const
+    { return rep->values_as_cell (); }
+
   property& operator = (const octave_value& val)
     {
       *rep = val;
       return *this;
     }
 
   property& operator = (const property& p)
     {
@@ -2063,16 +2099,20 @@ public:
   }
 
   virtual octave_value get_factory_defaults (void) const
   {
     error ("base_graphics_object::get_factory_defaults: invalid graphics object");
     return octave_value ();
   }
 
+  virtual std::string values_as_string (void);
+
+  virtual Octave_map values_as_struct (void);
+
   virtual graphics_handle get_parent (void) const
   {
     if (valid_object ())
       return get_properties ().get_parent ();
     else
       {
         error ("base_graphics_object::get_parent: invalid graphics object");
         return graphics_handle ();
@@ -2280,16 +2320,20 @@ public:
 
   octave_value get_defaults (void) const { return rep->get_defaults (); }
 
   octave_value get_factory_defaults (void) const
   {
     return rep->get_factory_defaults ();
   }
 
+  std::string values_as_string (void) { return rep->values_as_string (); }
+
+  Octave_map values_as_struct (void) { return rep->values_as_struct (); }
+
   graphics_handle get_parent (void) const { return rep->get_parent (); }
 
   graphics_handle get_handle (void) const { return rep->get_handle (); }
 
   void remove_child (const graphics_handle& h) { rep->remove_child (h); }
 
   void adopt (const graphics_handle& h) { rep->adopt (h); }
 
