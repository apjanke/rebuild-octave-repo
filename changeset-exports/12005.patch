# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1245654043 -7200
#      Mon Jun 22 09:00:43 2009 +0200
# Branch release-3-2-x
# Node ID d3b6e85aaf53ccf2db3b6e3ee9436982ec2caa13
# Parent  ff8c445edeb4b9ecdd861de5ed339e4efde5ebc0
fix slow cellstr -> char matrix conversions

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-06-22  Jaroslav Hajek  <highegg@gmail.com>
+
+	* chMatrix.cc (charMatrix::charMatrix (const string_vector&)):
+	Optimize w.r.t. COW of std::string.
+
 2009-06-18  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dMatrix.cc (xgemm): Replace resize() with uninitialized allocations
 	where appropriate.
 	* fMatrix.cc (xgemm): Ditto.
 	* CMatrix.cc (xgemm): Ditto.
 	* fCMatrix.cc (xgemm): Ditto.
 
diff --git a/liboctave/chMatrix.cc b/liboctave/chMatrix.cc
--- a/liboctave/chMatrix.cc
+++ b/liboctave/chMatrix.cc
@@ -76,19 +76,20 @@ charMatrix::charMatrix (const std::strin
 
 charMatrix::charMatrix (const string_vector& s)
   : MArray2<char> (s.length (), s.max_length (), 0)
 {
   octave_idx_type nr = rows ();
 
   for (octave_idx_type i = 0; i < nr; i++)
     {
-      octave_idx_type nc = s[i].length ();
+      const std::string si = s(i);
+      octave_idx_type nc = si.length ();
       for (octave_idx_type j = 0; j < nc; j++)
-	elem (i, j) = s[i][j];
+	elem (i, j) = si[j];
     }
 }
 
 bool
 charMatrix::operator == (const charMatrix& a) const
 {
   if (rows () != a.rows () || cols () != a.cols ())
     return 0;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-06-22  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-cell.cc (octave_cell::all_strings): Avoid duplicate conversions.
+
 2009-06-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov.cc (Fsubsasgn): Uniquify shared value before assigning to it.
 
 2009-06-17  John W. Eaton  <jwe@octave.org>
 
 	* mex.cc (mxArray_octave_value::get_data):
 	If octave_value::mex_get_data returns a valid pointer, mark it as
diff --git a/src/ov-cell.cc b/src/ov-cell.cc
--- a/src/ov-cell.cc
+++ b/src/ov-cell.cc
@@ -24,16 +24,17 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iomanip>
 #include <iostream>
 #include <sstream>
 #include <vector>
+#include <queue>
 
 #include "Array-util.h"
 #include "byte-swap.h"
 #include "lo-utils.h"
 #include "quit.h"
 #include "oct-locbuf.h"
 
 #include "defun.h"
@@ -567,40 +568,45 @@ octave_cell::all_strings (bool pad) cons
   string_vector retval;
 
   octave_idx_type nel = numel ();
 
   int n_elts = 0;
 
   octave_idx_type max_len = 0;
 
+  std::queue<string_vector> strvec_queue;
+
   for (octave_idx_type i = 0; i < nel; i++)
     {
       string_vector s = matrix(i).all_strings ();
 
       if (error_state)
 	return retval;
 
       octave_idx_type s_len = s.length ();
 
       n_elts += s_len ? s_len : 1;
 
       octave_idx_type s_max_len = s.max_length ();
 
       if (s_max_len > max_len)
 	max_len = s_max_len;
+
+      strvec_queue.push (s);
     }
 
-  retval.resize (n_elts);
+  retval = string_vector (n_elts);
 
   octave_idx_type k = 0;
 
   for (octave_idx_type i = 0; i < nel; i++)
     {
-      string_vector s = matrix(i).all_strings ();
+      const string_vector s = strvec_queue.front ();
+      strvec_queue.pop ();
 
       octave_idx_type s_len = s.length ();
 
       if (s_len)
 	{
 	  for (octave_idx_type j = 0; j < s_len; j++)
 	    {
 	      std::string t = s[j];
