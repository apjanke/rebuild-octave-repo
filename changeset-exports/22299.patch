# HG changeset patch
# User Rik <rik@octave.org>
# Date 1471280750 25200
#      Mon Aug 15 10:05:50 2016 -0700
# Node ID 9fc91bb2aec36fe5b691c745c1f46c014ef08aff
# Parent  18535a29a8e887b36767f9499417af4832091718
doc: grammarcheck documentation for 4.2 release.

* container.txi, contrib.txi, diagperm.txi, errors.txi, external.txi,
func.txi, image.txi, nonlin.txi, numbers.txi, plot.txi, quad.txi, sparse.txi,
strings.txi, tips.txi, var.txi, vectorize.txi, __dispatch__.cc, cellfun.cc,
file-io.cc, gsvd.cc, load-path.cc, regexp.cc, __init_gnuplot__.cc,
__osmesa_print__.cc, qr.cc, xzip.cc, ov-classdef.cc, octave_config_info.m,
grabcode.m, publish.m, dialog.m, condest.m, normest1.m, mkdir.m, ode23.m,
ode45.m, odeplot.m, AbsRel_Norm.m, integrate_adaptive.m, integrate_const.m,
integrate_n_steps.m, axis.m, isocaps.m, isocolors.m, isosurface.m, light.m,
__calc_isovalue_from_data__.m, __marching_cube__.m, cov.m, median.m:
doc: grammarcheck documentation for 4.2 release.

diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -829,18 +829,19 @@ x(1, :) = @{[]@}
         [2,1] = 3
         [1,2] = [](0x0)
         [2,2] = 4
       @}
 @end group
 @end example
 
 The indexing operations operate on the cell array and not on the objects
-within the cell array.  By contrast, @code{cellindexmat} applies matrix indexing
-to the objects within each cell array entry and returns the requested values.
+within the cell array.  By contrast, @code{cellindexmat} applies matrix
+indexing to the objects within each cell array entry and returns the requested
+values.
 
 @DOCSTRING(cellindexmat)
 
 @node Cell Arrays of Strings
 @subsection Cell Arrays of Strings
 
 One common use of cell arrays is to store multiple strings in the same
 variable.  It is also possible to store multiple strings in a
diff --git a/doc/interpreter/contrib.txi b/doc/interpreter/contrib.txi
--- a/doc/interpreter/contrib.txi
+++ b/doc/interpreter/contrib.txi
@@ -312,26 +312,30 @@ but
 @example
   A([1:i-1;i+1:n], XI(:,2:n-1))
 @end example
 
 When constructing matrices, prefer using the comma rather than the space to
 distinguish between columns.
 
 @example
+@group
   M = [1, 2, 3
        4, 5, 6];
+@end group
 @end example
 
 However, if the matrix is large or the indentation makes it clear the comma
 may be dropped.
 
 @example
+@group
   prices = [ 1.01  2.02  3.03
             44.04 55.05  6.06];
+@end group
 @end example
 
 Use lowercase names if possible.  Uppercase is acceptable for variable
 names consisting of 1-2 letters.  Do not use mixed case names.  Function
 names must be lowercase.  Function names are global, so choose them
 wisely.
 
 Always use a specific end-of-block statement (like @code{endif},
@@ -393,18 +397,18 @@ line.  The function name on the second l
 multi-line argument lists should be aligned on the first char after the open
 parenthesis.  You should put a space before the left open parenthesis and after
 commas, for both function definitions and function calls.
 
 The recommended indent is 2 spaces.  When indenting, indent the statement
 after control structures (like @code{if}, @code{while}, etc.).  If there
 is a compound statement, indent @emph{both} the curly braces and the
 body of the statement (so that the body gets indented by @emph{two}
-indents).  This format is known as "GNU style" and is an option for some
-code formatting tools.  Example indenting:
+indents).  This format is known as @nospell{"GNU style"} and is an option for
+some code formatting tools.  Example indenting:
 
 @example
 @group
 if (have_args)
   @{
     idx.push_back (first_args);
     have_args = false;
   @}
@@ -462,17 +466,17 @@ Use Octave's types and classes if possib
 standard library.  Use of STL containers and algorithms is encouraged.
 Use templates wisely to reduce code duplication.
 
 Avoid comma expressions, labels and gotos, and explicit typecasts.  If you need
 to typecast, use the modern C++ casting operators.  In functions, minimize the
 number of @code{return} statements, but elimination of all but one
 @code{return} is not required.
 
-When an empty string is required, use @code{""}, rather than creating an empty
+When an empty string is required, use @qcode{""}, rather than creating an empty
 string object with @code{std::string ()}.
 
 @node Other Sources
 @section Other Sources
 Apart from C++ and Octave language (m-files), Octave's sources include
 files written in C, Fortran, M4, Perl, Unix shell, AWK, Texinfo, and
 @TeX{}.  There are not many rules to follow when using these other
 languages; some of them are summarized below.  In any case, the golden
diff --git a/doc/interpreter/diagperm.txi b/doc/interpreter/diagperm.txi
--- a/doc/interpreter/diagperm.txi
+++ b/doc/interpreter/diagperm.txi
@@ -35,19 +35,19 @@
 A diagonal matrix is defined as a matrix that has zero entries outside the main
 diagonal; that is,
 @tex
 $D_{ij} = 0$ if $i \neq j$
 @end tex
 @ifnottex
 @code{D(i,j) == 0} if @code{i != j}.
 @end ifnottex
-Most often, square diagonal matrices are considered; however, the definition can
-equally be applied to non-square matrices, in which case we usually speak of a
-rectangular diagonal matrix.
+Most often, square diagonal matrices are considered; however, the definition
+can equally be applied to non-square matrices, in which case we usually speak
+of a rectangular diagonal matrix.
 
 A permutation matrix is defined as a square matrix that has a single element
 equal to unity in each row and each column; all other elements are zero.  That
 is, there exists a permutation (vector)
 @tex
 $p$ such that $P_{ij}=1$ if $j = p_i$ and
 $P_{ij}=0$ otherwise.
 @end tex
@@ -89,18 +89,18 @@ sizeof (xf)
 @node Creating Diagonal Matrices
 @subsection Creating Diagonal Matrices
 
 The most common and easiest way to create a diagonal matrix is using the
 built-in function @dfn{diag}.  The expression @code{diag (v)}, with @var{v} a
 vector, will create a square diagonal matrix with elements on the main diagonal
 given by the elements of @var{v}, and size equal to the length of @var{v}.
 @code{diag (v, m, n)} can be used to construct a rectangular diagonal matrix.
-The result of these expressions will be a special diagonal matrix object, rather
-than a general matrix object.
+The result of these expressions will be a special diagonal matrix object,
+rather than a general matrix object.
 
 Diagonal matrix with unit elements can be created using @dfn{eye}.
 Some other built-in functions can also return diagonal matrices.  Examples
 include
 @dfn{balance} or @dfn{inv}.
 
 Example:
 
@@ -124,19 +124,19 @@ Diagonal Matrix
    0   0   3
    0   0   0
    0   0   0
 @end example
 
 @node Creating Permutation Matrices
 @subsection Creating Permutation Matrices
 
-For creating permutation matrices, Octave does not introduce a new function, but
-rather overrides an existing syntax: permutation matrices can be conveniently
-created by indexing an identity matrix by permutation vectors.
+For creating permutation matrices, Octave does not introduce a new function,
+but rather overrides an existing syntax: permutation matrices can be
+conveniently created by indexing an identity matrix by permutation vectors.
 That is, if @var{q} is a permutation vector of length @var{n}, the expression
 
 @example
   P = eye (n) (:, q);
 @end example
 
 @noindent
 will create a permutation matrix - a special matrix object.
@@ -205,20 +205,20 @@ Permutation Matrix
 
 Some other built-in functions can also return permutation matrices.  Examples
 include
 @dfn{inv} or @dfn{lu}.
 
 @node Explicit and Implicit Conversions
 @subsection Explicit and Implicit Conversions
 
-The diagonal and permutation matrices are special objects in their own right.  A
-number of operations and built-in functions are defined for these matrices to
-use special, more efficient code than would be used for a full matrix in the
-same place.  Examples are given in further sections.
+The diagonal and permutation matrices are special objects in their own right.
+A number of operations and built-in functions are defined for these matrices
+to use special, more efficient code than would be used for a full matrix in
+the same place.  Examples are given in further sections.
 
 To facilitate smooth mixing with full matrices, backward compatibility, and
 compatibility with @sc{matlab}, the diagonal and permutation matrices should
 allow any operation that works on full matrices, and will either treat it
 specially, or implicitly convert themselves to full matrices.
 
 Instances include matrix indexing, except for extracting a single element or
 a leading submatrix, indexed assignment, or applying most mapper functions,
@@ -336,28 +336,29 @@ elements.  Thus,
 @example
 A = A + eps * eye (n)
 @end example
 
 @noindent
 is an efficient method of augmenting the diagonal of a matrix.  Subtraction
 works analogically.
 
-When involved in expressions with other element-by-element operators, @code{.*},
-@code{./}, @code{.\} or @code{.^}, an implicit conversion to full matrix will
-take place.  This is not always strictly necessary but chosen to facilitate
-better consistency with @sc{matlab}.
+When involved in expressions with other element-by-element operators,
+@code{.*}, @code{./}, @code{.\} or @code{.^}, an implicit conversion to full
+matrix will take place.  This is not always strictly necessary but chosen to
+facilitate better consistency with @sc{matlab}.
 
 @node Expressions Involving Permutation Matrices
 @subsection Expressions Involving Permutation Matrices
 
 If @var{P} is a permutation matrix and @var{M} a matrix, the expression
 @code{P*M} will permute the rows of @var{M}.  Similarly, @code{M*P} will
 yield a column permutation.
-Matrix division @code{P\M} and @code{M/P} can be used to do inverse permutation.
+Matrix division @code{P\M} and @code{M/P} can be used to do inverse
+permutation.
 
 The previously described syntax for creating permutation matrices can actually
 help an user to understand the connection between a permutation matrix and
 a permuting vector.  Namely, the following holds, where @code{I = eye (n)}
 is an identity matrix:
 
 @example
   I(p,:) * M = (I*M) (p,:) = M(p,:)
@@ -377,19 +378,19 @@ permutation, or equivalently, turning a 
 column-permutation one.  For permutation matrices, transpose is equivalent to
 inversion, thus @code{P\M} is equivalent to @code{P'*M}.  Transpose of a
 permutation matrix (or inverse) is a constant-time operation, flipping only a
 flag internally, and thus the choice between the two above equivalent
 expressions for inverse permuting is completely up to the user's taste.
 
 Multiplication and division by permutation matrices works efficiently also when
 combined with sparse matrices, i.e., @code{P*S}, where @var{P} is a permutation
-matrix and @var{S} is a sparse matrix permutes the rows of the sparse matrix and
-returns a sparse matrix.  The expressions @code{S*P}, @code{P\S}, @code{S/P}
-work analogically.
+matrix and @var{S} is a sparse matrix permutes the rows of the sparse matrix
+and returns a sparse matrix.  The expressions @code{S*P}, @code{P\S},
+@code{S/P} work analogically.
 
 Two permutation matrices can be multiplied or divided (if their sizes match),
 performing a composition of permutations.  Also a permutation matrix can be
 indexed by a permutation vector (or two vectors), giving again a permutation
 matrix.  Any other operations do not generally yield a permutation matrix and
 will thus trigger the implicit conversion.
 
 @node Function Support
@@ -508,24 +509,25 @@ only):
 Making diagonal and permutation matrices special matrix objects in their own
 right and the consequent usage of smarter algorithms for certain operations
 implies, as a side effect, small differences in treating zeros.
 The contents of this section apply also to sparse matrices, discussed in
 the following chapter.  (@pxref{Sparse Matrices})
 
 The IEEE floating point standard defines the result of the expressions
 @code{0*Inf} and @code{0*NaN} as @code{NaN}.  This is widely agreed to be a
-good compromise.  Numerical software dealing with structured and sparse matrices
-(including Octave) however, almost always makes a distinction between a
-"numerical zero" and an "assumed zero".  A "numerical zero" is a zero value
-occurring in a place where any floating-point value could occur.  It is
-normally stored somewhere in memory as an explicit value.  An "assumed zero", on
-the contrary, is a zero matrix element implied by the matrix structure
-(diagonal, triangular) or a sparsity pattern; its value is usually not stored
-explicitly anywhere, but is implied by the underlying data structure.
+good compromise.  Numerical software dealing with structured and sparse
+matrices (including Octave) however, almost always makes a distinction between
+a @nospell{"numerical zero"} and an @nospell{"assumed zero"}.  A
+@nospell{"numerical zero"} is a zero value occurring in a place where any
+floating-point value could occur.  It is normally stored somewhere in memory
+as an explicit value.  An @nospell{"assumed zero"}, on the contrary, is a zero
+matrix element implied by the matrix structure (diagonal, triangular) or a
+sparsity pattern; its value is usually not stored explicitly anywhere, but is
+implied by the underlying data structure.
 
 The primary distinction is that an assumed zero, when multiplied
 by any number, or divided by any nonzero number,
 yields *always* a zero, even when, e.g., multiplied by @code{Inf}
 or divided by @code{NaN}.
 The reason for this behavior is that the numerical multiplication is not
 actually performed anywhere by the underlying algorithm; the result is
 just assumed to be zero.  Equivalently, one can say that the part of the
diff --git a/doc/interpreter/errors.txi b/doc/interpreter/errors.txi
--- a/doc/interpreter/errors.txi
+++ b/doc/interpreter/errors.txi
@@ -74,18 +74,18 @@ and returns to the Octave prompt.  This 
 a call to @code{error} will be executed.
 
 It is also possible to assign an identification string to an error.
 If an error has such an ID the user can catch this error
 as will be described in the next section.  To assign an ID to an error,
 simply call @code{error} with two string arguments, where the first
 is the identification string, and the second is the actual error.  Note
 that error IDs are in the format @qcode{"NAMESPACE:ERROR-NAME"}.  The namespace
-@qcode{"Octave"} is used for Octave's own errors.  Any other string is available
-as a namespace for user's own errors.
+@qcode{"Octave"} is used for Octave's own errors.  Any other string is
+available as a namespace for user's own errors.
 
 @DOCSTRING(error)
 
 Since it is common to use errors when there is something wrong with
 the input to a function, Octave supports functions to simplify such code.
 When the @code{print_usage} function is called, it reads the help text
 of the function calling @code{print_usage}, and presents a useful error.
 If the help text is written in Texinfo it is possible to present an
diff --git a/doc/interpreter/external.txi b/doc/interpreter/external.txi
--- a/doc/interpreter/external.txi
+++ b/doc/interpreter/external.txi
@@ -41,19 +41,19 @@ Performance should generally @strong{not
 extensions.  Although compiled extensions can run faster, particularly
 if they replace a loop in Octave code, this is almost never the best path
 to take.  First, there are many techniques to speed up Octave performance while
 remaining within the language.  Second, Octave is a high-level language that
 makes it easy to perform common mathematical tasks.  Giving that up means
 shifting the focus from solving the real problem to solving a computer
 programming problem.  It means returning to low-level constructs such as
 pointers, memory management, mathematical overflow/underflow, etc.  Because
-of the low level nature, and the fact that the compiled code is executed outside
-of Octave, there is the very real possibility of crashing the interpreter and
-losing work.
+of the low level nature, and the fact that the compiled code is executed
+outside of Octave, there is the very real possibility of crashing the
+interpreter and losing work.
 
 Before going further, you should first determine if you really need to bother
 writing code outside of Octave.
 
 @itemize @bullet
 @item
 Can I get the same functionality using the Octave scripting language alone?
 
@@ -1311,19 +1311,19 @@ Consider the following short example:
 @group
 @EXAMPLEFILE(myhello.c)
 @end group
 @end example
 
 The first line @code{#include "mex.h"} makes available all of the definitions
 necessary for a mex-file.  One important difference between Octave and
 @sc{matlab} is that the header file @qcode{"matrix.h"} is implicitly included
-through the inclusion of @qcode{"mex.h"}.  This is necessary to avoid a conflict
-with the Octave file @qcode{"Matrix.h"} for operating systems and compilers that
-don't distinguish between filenames in upper and lower case.
+through the inclusion of @qcode{"mex.h"}.  This is necessary to avoid a
+conflict with the Octave file @qcode{"Matrix.h"} for operating systems and
+compilers that don't distinguish between filenames in upper and lower case.
 
 The entry point into the mex-file is defined by @code{mexFunction}.  The
 function takes four arguments:
 
 @enumerate 1
 @item The number of return arguments (# of left-hand side args).
 
 @item An array of pointers to return arguments.
@@ -2029,17 +2029,17 @@ The search rules for the file @file{java
 @item First, Octave tries to locate it in the current directory (where Octave
 was started from).  If such a file is found, it is read and defines the initial
 @var{static classpath}.  Thus, it is possible to define a static classpath on a
 'per Octave invocation' basis.
 
 @item Next, Octave searches in the user's home directory.  If a file
 @file{javaclasspath.txt} exists here, its contents are appended to the static
 classpath (if any).  Thus, it is possible to build an initial static classpath
-on a 'per user' basis.
+on a @nospell{'per user'} basis.
 
 @item Finally, Octave looks for a next occurrence of file
 @file{javaclasspath.txt} in the m-files directory where Octave Java functions
 live.  This is where @file{javaclasspath.m} resides, usually something like
 @file{@w{@env{OCTAVE_HOME}}/share/octave/@w{@env{OCTAVE_VERSION}}/m/java/}.  You can
 find this directory by executing the command
 
 @example
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -18,20 +18,20 @@
 
 @node Functions and Scripts
 @chapter Functions and Scripts
 @cindex defining functions
 @cindex user-defined functions
 @cindex functions, user-defined
 @cindex script files
 
-Complicated Octave programs can often be simplified by defining
-functions.  Functions can be defined directly on the command line during
-interactive Octave sessions, or in external files, and can be called just
-like built-in functions.
+Complicated Octave programs can often be simplified by defining functions.
+Functions can be defined directly on the command line during interactive
+Octave sessions, or in external files, and can be called just like built-in
+functions.
 
 @menu
 * Introduction to Function and Script Files::
 * Defining Functions::
 * Multiple Return Values::
 * Variable-length Argument Lists::
 * Ignoring Arguments::
 * Variable-length Return Lists::
@@ -939,19 +939,19 @@ foobar ()
 @end example
 
 @noindent
 It is important to note that the @var{x} and @var{y} in @code{foobar} remain
 zero, as in @code{foo} they are a return value and parameter respectively.  The
 @var{x} in @code{bat} refers to the @var{x} in @code{foo}.
 
 Variable inheritance leads to a problem for @code{eval} and scripts.  If a
-new variable is created in a parent function, it is not clear what should happen
-in nested child functions.  For example, consider a parent function @code{foo}
-with a nested child function @code{bar}:
+new variable is created in a parent function, it is not clear what should
+happen in nested child functions.  For example, consider a parent function
+@code{foo} with a nested child function @code{bar}:
 
 @example
 @group
 function y = foo (to_eval)
   bar ();
   eval (to_eval);
 
   function bar ()
@@ -1304,23 +1304,23 @@ The counterpart to @code{publish} is @co
 * HTML markup::
 * LaTeX markup::
 @end menu
 
 @node Using Publishing Markup in script files
 @subsubsection Using Publishing Markup in script files
 
 To use Publishing Markup, start by typing @samp{##} or @samp{%%} at the
-beginning of a new line.  For Matlab compatibility @samp{%%} is treated the
-same way as @samp{%%}.
+beginning of a new line.  For @sc{matlab} compatibility @samp{%%} is treated
+the same way as @samp{##}.
 
-The lines following @samp{##} or @samp{%%} start with only one of either
+The lines following @samp{##} or @samp{%%} start with one of either
 @samp{#} or @samp{%} followed by at least one space.  These lines are
-interpreted as section.  A section ends with the first line not starting
-with @samp{#} or @samp{%} or the end of the document is reached.
+interpreted as section.  A section ends at the first line not starting
+with @samp{#} or @samp{%}, or when the end of the document is reached.
 
 A section starting in the first line of the document, followed by another
 start of a section that might be empty, is interpreted as a document
 title and introduction text.
 
 See the example below for clarity:
 
 @example
@@ -1369,17 +1369,17 @@ Additionally two trademark symbols are s
 
 @node Sections
 @subsubsection Sections
 
 A section is started by typing @samp{##} or @samp{%%} at the beginning of
 a new line.  A section title can be provided by writing it, separated by a
 space, in the first line after @samp{##} or @samp{%%}.  Without a section
 title, the section is interpreted as a continuation of the previous section.
-For Matlab compatibility @samp{%%} is treated the same way as @samp{%%}.
+For @sc{matlab} compatibility @samp{%%} is treated the same way as @samp{%%}.
 
 @example
 @group
 some_code ();
 
 ## Section 1
 #
 ## Section 2
@@ -1430,17 +1430,17 @@ those lines.
 @group
 ##
 # This following text is preformatted:
 #
 #  "To be, or not to be: that is the question:
 #  Whether 'tis nobler in the mind to suffer
 #  The slings and arrows of outrageous fortune,
 #  Or to take arms against a sea of troubles,
-#  And by opposing end them? To die: to sleep;"
+#  And by opposing end them?  To die: to sleep;"
 #
 #  --"Hamlet" by W. Shakespeare
 @end group
 @end example
 
 @node Bulleted lists
 @subsubsection Bulleted lists
 
@@ -1451,20 +1451,22 @@ To create a bulleted list, type
 ##
 #
 # * Bulleted list item 1
 # * Bulleted list item 2
 #
 @end group
 @end example
 
+@noindent
 to get output like
 
 @itemize @bullet
 @item Bulleted list item 1
+
 @item Bulleted list item 2
 @end itemize
 
 Notice the blank lines, except for the @samp{#} or @samp{%} before and
 after the bulleted list!
 
 @node Numbered lists
 @subsubsection Numbered lists
@@ -1476,30 +1478,32 @@ To create a numbered list, type
 ##
 #
 # # Numbered list item 1
 # # Numbered list item 2
 #
 @end group
 @end example
 
+@noindent
 to get output like
 
 @enumerate
 @item Numbered list item 1
+
 @item Numbered list item 2
 @end enumerate
 
 Notice the blank lines, except for the @samp{#} or @samp{%} before and
 after the numbered list!
 
 @node Including file content
 @subsubsection Including file content
 
-To include the content of an external file, e.g. a file called
+To include the content of an external file, e.g., a file called
 @samp{my_function.m} at the same location as the published Octave script,
 use the following syntax to include it with Octave syntax highlighting.
 
 Alternatively, you can write the full or relative path to the file.
 
 @example
 @group
 ##
@@ -1511,17 +1515,17 @@ Alternatively, you can write the full or
 # <include>../relative/path/to/my_function.m</include>
 #
 @end group
 @end example
 
 @node Including graphics
 @subsubsection Including graphics
 
-To include external graphics, e.g. a graphic called @samp{my_graphic.png}
+To include external graphics, e.g., a graphic called @samp{my_graphic.png}
 at the same location as the published Octave script, use the following syntax.
 
 Alternatively, you can write the full path to the graphic.
 
 @example
 @group
 ##
 #
@@ -1566,17 +1570,17 @@ GNU Octave documentations function index
 ##
 # <octave:DISP The display function>
 @end group
 @end example
 
 @node Mathematical equations
 @subsubsection Mathematical equations
 
-One can insert LaTeX inline math, surrounded by single @samp{$} signs, or
+One can insert @LaTeX{} inline math, surrounded by single @samp{$} signs, or
 displayed math, surrounded by double @samp{$$} signs, directly inside
 sections.
 
 @example
 @group
 ##
 # Some shorter inline equation $e^@{ix@} = \cos x + i\sin x$.
 #
@@ -1600,18 +1604,18 @@ that is only visible in this kind of out
 # <tr><td>3</td><td>3</td></tr>
 # </html>
 @end group
 @end example
 
 @node LaTeX markup
 @subsubsection LaTeX markup
 
-If the published output is a LaTeX or PDF report, you can insert LaTeX markup,
-that is only visible in this kind of output.
+If the published output is a @LaTeX{} or PDF report, you can insert @LaTeX{}
+markup, that is only visible in this kind of output.
 
 @example
 @group
 ##
 # <latex>
 # Some output only visible in \LaTeX or PDF reports.
 # \begin@{equation@}
 # e^x = \lim\limits_@{n\rightarrow\infty@}\left(1+\dfrac@{x@}@{n@}\right)^@{n@}
diff --git a/doc/interpreter/image.txi b/doc/interpreter/image.txi
--- a/doc/interpreter/image.txi
+++ b/doc/interpreter/image.txi
@@ -66,18 +66,18 @@ imwrite (J, "my_output_image.img");
 @DOCSTRING(imread)
 
 @DOCSTRING(imwrite)
 
 @DOCSTRING(IMAGE_PATH)
 
 It is possible to get information about an image file on disk, without actually
 reading it into Octave.  This is done using the @code{imfinfo} function which
-provides read access to many of the parameters stored in the header of the image
-file.
+provides read access to many of the parameters stored in the header of the
+image file.
 
 @DOCSTRING(imfinfo)
 
 By default, Octave's image IO functions (@code{imread}, @code{imwrite},
 and @code{imfinfo}) use the @code{GraphicsMagick} library for their
 operations.  This means a vast number of image formats is supported
 but considering the large amount of image formats in science and
 its commonly closed nature, it is impossible to have a library
diff --git a/doc/interpreter/nonlin.txi b/doc/interpreter/nonlin.txi
--- a/doc/interpreter/nonlin.txi
+++ b/doc/interpreter/nonlin.txi
@@ -169,21 +169,22 @@ which gives the same solution as before.
 @cindex finding minimums
 
 Often it is useful to find the minimum value of a function rather than just
 the zeroes where it crosses the x-axis.  @code{fminbnd} is designed for the
 simpler, but very common, case of a univariate function where the interval
 to search is bounded.  For unbounded minimization of a function with
 potentially many variables use @code{fminunc} or @code{fminsearch}.  The two
 functions use different internal algorithms and some knowledge of the objective
-function is required.  For functions which can be differentiated, @code{fminunc}
-is appropriate.  For functions with discontinuities, or for which a gradient
-search would fail, use @code{fminsearch}.  @xref{Optimization}, for
-minimization with the presence of constraint functions.  Note that searches
-can be made for maxima by simply inverting the objective function
+function is required.  For functions which can be differentiated,
+@code{fminunc} is appropriate.  For functions with discontinuities, or for
+which a gradient search would fail, use @code{fminsearch}.
+@xref{Optimization}, for minimization with the presence of constraint
+functions.  Note that searches can be made for maxima by simply inverting the
+objective function
 @tex
 ($F_{max} = -F_{min}$).
 @end tex
 @ifnottex
 (@code{Fto_max = -Fto_min}).
 @end ifnottex
 
 @DOCSTRING(fminbnd)
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -381,28 +381,28 @@ exceed.  The base, increment, and limit 
 function calls.  If the increment is omitted, it is assumed to be 1.
 For example, the range
 
 @example
 1 : 5
 @end example
 
 @noindent
-defines the set of values @samp{[ 1, 2, 3, 4, 5 ]}, and the range
+defines the set of values @code{[ 1, 2, 3, 4, 5 ]}, and the range
 
 @example
 1 : 3 : 5
 @end example
 
 @noindent
-defines the set of values @samp{[ 1, 4 ]}.
+defines the set of values @code{[ 1, 4 ]}.
 
 Although a range constant specifies a row vector, Octave does @emph{not}
 normally convert range constants to vectors unless it is necessary to do so.
-This allows you to write a constant like @samp{1 : 10000} without using
+This allows you to write a constant like @code{1 : 10000} without using
 80,000 bytes of storage on a typical 32-bit workstation.
 
 A common example of when it does become necessary to convert ranges into
 vectors occurs when they appear within a vector (i.e., inside square
 brackets).  For instance, whereas
 
 @example
 x = 0 : 0.1 : 1;
@@ -438,26 +438,26 @@ range from a scalar) and multiplying by 
 unpacking the range and keep the result as a range, too, if it can determine
 that it is safe to do so.  For instance, doing
 
 @example
 a = 2*(1:1e7) - 1;
 @end example
 
 @noindent
-will produce the same result as @samp{1:2:2e7-1}, but without ever forming a
+will produce the same result as @code{1:2:2e7-1}, but without ever forming a
 vector with ten million elements.
 
-Using zero as an increment in the colon notation, as @samp{1:0:1} is not
+Using zero as an increment in the colon notation, as @code{1:0:1} is not
 allowed, because a division by zero would occur in determining the number of
 range elements.  However, ranges with zero increment (i.e., all elements equal)
 are useful, especially in indexing, and Octave allows them to be constructed
-using the built-in function @dfn{ones}.  Note that because a range must be a row
-vector, @samp{ones (1, 10)} produces a range, while @samp{ones (10, 1)} does
-not.
+using the built-in function @code{ones}.  Note that because a range must be a
+row vector, @code{ones (1, 10)} produces a range, while @code{ones (10, 1)}
+does not.
 
 When Octave parses a range expression, it examines the elements of the
 expression to determine whether they are all constants.  If they are, it
 replaces the range expression with a single range constant.
 
 @node Single Precision Data Types
 @section Single Precision Data Types
 
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -961,17 +961,17 @@ saves the current figure to an encapsula
 @file{foo.eps}.
 
 The current graphic toolkits produce very similar graphic displays but differ
 in their capability to display text and in print capabilities.  In particular,
 the OpenGL based toolkits such as @code{fltk} and @code{qt} do not support the
 @qcode{"interpreter"} property of text objects.  This means that when using
 OpenGL toolkits special symbols drawn with the @qcode{"tex"} interpreter will
 appear correctly on-screen but will be rendered with interpreter @qcode{"none"}
-when printing unless one of the @qcode{standalone} (see below) modes is used.
+when printing unless one of the @code{standalone} (see below) modes is used.
 These modes provide access to the pdflatex processor and therefore allow full
 use of @LaTeX{} commands.
 
 A complete example showing the capabilities of text printing using the
 @option{-dpdflatexstandalone} option is:
 
 @example
 @group
@@ -1406,20 +1406,21 @@ struct2hdl (fig_struct);
 * Uicontextmenu Properties::
 * Uipanel Properties::
 * Uicontrol Properties::
 * Uitoolbar Properties::
 * Uipushtool Properties::
 * Uitoggletool Properties::
 @end menu
 
-In this Section the graphics object properties are discussed in detail, starting
-with the root figure properties and continuing through the objects
-hierarchy.  The documentation about a specific graphics object can be displayed
-using @code{doc} function, e.g., @code{doc ("axes properties")} will show
+In this Section the graphics object properties are discussed in detail,
+starting with the root figure properties and continuing through the objects
+hierarchy.  The documentation about a specific graphics object can be
+displayed using @code{doc} function, e.g., @code{doc ("axes properties")} will
+show
 @ref{Axes Properties}.
 
 The allowed values for radio (string) properties can be retrieved
 programmatically or displayed using the one or
 two arguments call to @code{set} function.  @xref{XREFset, , set}.
 
 In the following documentation, default values are enclosed in @{ @}.
 
@@ -2084,17 +2085,18 @@ the bar series.
 
 @item  linewidth
 @itemx linestyle
 The line width and style of the edge of the patch objects making up the
 bars.  @xref{Line Styles}.
 
 @item  edgecolor
 @itemx facecolor
-The line and fill color of the patch objects making up the bars.  @xref{Colors}.
+The line and fill color of the patch objects making up the bars.
+@xref{Colors}.
 
 @item xdata
 The nominal x positions of the bars.  Changes in this property and
 propagated to the other members of the bar series.
 
 @item ydata
 The y value of the bars in the @code{hggroup}.
 
@@ -2283,17 +2285,18 @@ series.  The default value is 0.2.
 @item showarrowhead
 Flag whether the arrow heads are displayed in the quiver plot.
 
 @item color
 The RGB color or color name of the line objects of the quiver.  @xref{Colors}.
 
 @item  linewidth
 @itemx linestyle
-The line width and style of the line objects of the quiver.  @xref{Line Styles}.
+The line width and style of the line objects of the quiver.  @xref{Line
+Styles}.
 
 @item  marker
 @itemx markerfacecolor
 @itemx markersize
 The line and fill color of the marker objects at the original of the
 arrows.  @xref{Colors}.
 
 @item  xdata
@@ -2365,17 +2368,18 @@ Stair series objects are created by the 
 child representing the stair.  The properties of the stair series are
 
 @table @code
 @item color
 The RGB color or color name of the line objects of the stairs.  @xref{Colors}.
 
 @item  linewidth
 @itemx linestyle
-The line width and style of the line objects of the stairs.  @xref{Line Styles}.
+The line width and style of the line objects of the stairs.  @xref{Line
+Styles}.
 
 @item  marker
 @itemx markeredgecolor
 @itemx markerfacecolor
 @itemx markersize
 The line and fill color of the markers on the stairs.  @xref{Colors}.
 
 @item  xdata
diff --git a/doc/interpreter/quad.txi b/doc/interpreter/quad.txi
--- a/doc/interpreter/quad.txi
+++ b/doc/interpreter/quad.txi
@@ -204,18 +204,18 @@ spaced differently produces a more accur
 x = linspace (0, pi/2, 16);  # Uniformly spaced, but including endpoint
 y = sin (x);
 trapz (x, y)
      @result{} 0.99909
 @end group
 @end example
 
 In general there may be no way of knowing the best distribution of points ahead
-of time.  Or the points may come from an experiment where there is no freedom to
-select the best distribution.  In any case, one must remain aware of this
+of time.  Or the points may come from an experiment where there is no freedom
+to select the best distribution.  In any case, one must remain aware of this
 issue when using @code{trapz}.
 
 @DOCSTRING(trapz)
 
 @DOCSTRING(cumtrapz)
 
 @node Orthogonal Collocation
 @section Orthogonal Collocation
diff --git a/doc/interpreter/sparse.txi b/doc/interpreter/sparse.txi
--- a/doc/interpreter/sparse.txi
+++ b/doc/interpreter/sparse.txi
@@ -198,20 +198,20 @@ There are several basic functions to ret
 matrices.  For example the sparse identity matrix, is a matrix that is
 often needed.  It therefore has its own function to create it as
 @code{speye (@var{n})} or @code{speye (@var{r}, @var{c})}, which
 creates an @var{n}-by-@var{n} or @var{r}-by-@var{c} sparse identity
 matrix.
 
 Another typical sparse matrix that is often needed is a random distribution
 of random elements.  The functions @dfn{sprand} and @dfn{sprandn} perform
-this for uniform and normal random distributions of elements.  They have exactly
-the same calling convention, where @code{sprand (@var{r}, @var{c}, @var{d})},
-creates an @var{r}-by-@var{c} sparse matrix with a density of filled
-elements of @var{d}.
+this for uniform and normal random distributions of elements.  They have
+exactly the same calling convention, where @code{sprand (@var{r}, @var{c},
+@var{d})}, creates an @var{r}-by-@var{c} sparse matrix with a density of
+filled elements of @var{d}.
 
 Other functions of interest that directly create sparse matrices, are
 @dfn{diag} or its generalization @dfn{spdiags}, that can take the
 definition of the diagonals of the matrix and create the sparse matrix
 that corresponds to this.  For example,
 
 @example
 s = diag (sparse (randn (1,n)), -1);
@@ -735,19 +735,19 @@ reorder the matrix to maximize performan
 
 @DOCSTRING(symrcm)
 
 @node Sparse Linear Algebra
 @section Linear Algebra on Sparse Matrices
 
 Octave includes a polymorphic solver for sparse matrices, where
 the exact solver used to factorize the matrix, depends on the properties
-of the sparse matrix itself.  Generally, the cost of determining the matrix type
-is small relative to the cost of factorizing the matrix itself, but in any
-case the matrix type is cached once it is calculated, so that it is not
+of the sparse matrix itself.  Generally, the cost of determining the matrix
+type is small relative to the cost of factorizing the matrix itself, but in
+any case the matrix type is cached once it is calculated, so that it is not
 re-determined each time it is used in a linear equation.
 
 The selection tree for how the linear equation is solve is
 
 @enumerate 1
 @item If the matrix is diagonal, solve directly and goto 8
 
 @item If the matrix is a permuted diagonal, solve directly taking into
diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -34,18 +34,18 @@ following expressions
 @end group
 @end example
 
 @noindent
 represent the string whose contents are @samp{parrot}.  Strings in
 Octave can be of any length.
 
 Since the single-quote mark is also used for the transpose operator
-(@pxref{Arithmetic Ops}) but double-quote marks have no other purpose in Octave,
-it is best to use double-quote marks to denote strings.
+(@pxref{Arithmetic Ops}) but double-quote marks have no other purpose in
+Octave, it is best to use double-quote marks to denote strings.
 
 Strings can be concatenated using the notation for defining matrices.  For
 example, the expression
 
 @example
 [ "foo" , "bar" , "baz" ]
 @end example
 
diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
--- a/doc/interpreter/tips.txi
+++ b/doc/interpreter/tips.txi
@@ -60,17 +60,17 @@ alternative common prefixes, so long as 
 Separate the prefix from the rest of the symbol name with an underscore
 @samp{_}.  This will be consistent with Octave itself and with most
 Octave programs.
 
 @item
 When you encounter an error condition, call the function @code{error}
 (or @code{print_usage}).  The @code{error} and @code{print_usage} functions
 do not return.  @xref{Errors}.  It is customary to prefix the error message
-with the name of the function that generated it.  For example,
+with the name of the function that generated it.  For example:
 
 @example
 error ("my_cool_function: input A must be a matrix");
 @end example
 
 @item
 Please put a copyright notice on the file if you give copies to anyone.
 Use the same lines that appear at the top of the function files
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -48,19 +48,19 @@ Case is significant in variable names.  
 
 A variable name is a valid expression by itself.  It represents the
 variable's current value.  Variables are given new values with
 @dfn{assignment operators} and @dfn{increment operators}.
 @xref{Assignment Ops,,Assignment Expressions}.
 
 There is one built-in variable with a special meaning.  The @code{ans} variable
 always contains the result of the last computation, where the output wasn't
-assigned to any variable.  The code @code{a = cos (pi)} will assign the value -1
-to the variable @code{a}, but will not change the value of @code{ans}.  However,
-the code @code{cos (pi)} will set the value of @code{ans} to -1.
+assigned to any variable.  The code @code{a = cos (pi)} will assign the value
+-1 to the variable @code{a}, but will not change the value of @code{ans}.
+However, the code @code{cos (pi)} will set the value of @code{ans} to -1.
 
 Variables in Octave do not have fixed types, so it is possible to first
 store a numeric value in a variable and then to later use the same name
 to hold a string value in the same program.  Variables may not be used
 before they have been given a value.  Doing so results in an error.
 
 @cindex @code{ans}
 @DOCSTRING(ans)
diff --git a/doc/interpreter/vectorize.txi b/doc/interpreter/vectorize.txi
--- a/doc/interpreter/vectorize.txi
+++ b/doc/interpreter/vectorize.txi
@@ -674,18 +674,18 @@ relatively expensive operations.
 
 If you are using @code{eval} merely as an exception handling mechanism, and not
 because you need to execute some arbitrary text, use the @code{try}
 statement instead.  @xref{The try Statement}.
 
 @item Use @code{ignore_function_time_stamp} when appropriate.
 If you are calling lots of functions, and none of them will need to change
 during your run, set the variable @code{ignore_function_time_stamp} to
-@qcode{"all"}.  This will stop Octave from checking the time stamp of a function
-file to see if it has been updated while the program is being run.
+@qcode{"all"}.  This will stop Octave from checking the time stamp of a
+function file to see if it has been updated while the program is being run.
 @end itemize
 
 @node Examples
 @section Examples
 
 The following are examples of vectorization questions asked by actual
 users of Octave and their solutions.
 
diff --git a/libinterp/corefcn/__dispatch__.cc b/libinterp/corefcn/__dispatch__.cc
--- a/libinterp/corefcn/__dispatch__.cc
+++ b/libinterp/corefcn/__dispatch__.cc
@@ -36,17 +36,17 @@ along with Octave; see the file COPYING.
 #include "ov-typeinfo.h"
 #include "pager.h"
 #include "parse.h"
 #include "symtab.h"
 #include "variables.h"
 
 DEFUN (__dispatch__, args, nargout,
        doc: /* -*- texinfo -*-
-@deftypefn  {} {} __dispatch__ ()
+@deftypefn {} {} __dispatch__ ()
 Undocumented internal function.
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
 
diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -1011,17 +1011,17 @@ Execute a function on each element of an
 This is useful for functions that do not accept array arguments.  If the
 function does accept array arguments it is better to call the function
 directly.
 
 The first input argument @var{func} can be a string, a function
 handle, an inline function, or an anonymous function.  The input
 argument @var{A} can be a logic array, a numeric array, a string
 array, a structure array, or a cell array.  By a call of the function
-@command{arrayfun} all elements of @var{A} are passed on to the named
+@code{arrayfun} all elements of @var{A} are passed on to the named
 function @var{func} individually.
 
 The named function can also take more than two input arguments, with
 the input arguments given as third input argument @var{b}, fourth
 input argument @var{c}, @dots{}  If given more than one array input
 argument then all input arguments must have the same sizes, for
 example:
 
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -1448,17 +1448,17 @@ considered to end with an empty value, b
 of a line causes the line to be considered to start with an empty value.
 
 @item @qcode{"TreatAsEmpty"}
 Treat single occurrences (surrounded by delimiters or whitespace) of the
 string(s) in @var{value} as missing values.
 
 @item @qcode{"ReturnOnError"}
 If set to numerical 1 or true, return normally as soon as an error is
-encountered, such as trying to read a string using @qcode{%f}.
+encountered, such as trying to read a string using @code{%f}.
 If set to 0 or false, return an error and no data.
 
 @item @qcode{"Whitespace"}
 Any character in @var{value} will be interpreted as whitespace and trimmed;
 The default value for whitespace is
 @c Note: the next line specifically has a newline which generates a space
 @c       in the output of qcode, but keeps the next line < 80 characters.
 @qcode{"
diff --git a/libinterp/corefcn/gsvd.cc b/libinterp/corefcn/gsvd.cc
--- a/libinterp/corefcn/gsvd.cc
+++ b/libinterp/corefcn/gsvd.cc
@@ -40,105 +40,98 @@ gsvd_type (int nargout)
   return ((nargout == 0 || nargout == 1)
          ? gsvd<T>::Type::sigma_only
          : (nargout > 5) ? gsvd<T>::Type::std : gsvd<T>::Type::economy);
 }
 
 
 DEFUN (gsvd, args, nargout,
        doc: /* -*- texinfo -*-
-@deftypefn {Loadable Function} {@var{s} =} gsvd (@var{a}, @var{b})
-@deftypefnx {Loadable Function} {[@var{u}, @var{v}, @var{c}, @var{s}, @var{x} [, @var{r}]] =} gsvd (@var{a}, @var{b})
+@deftypefn  {} {@var{s} =} gsvd (@var{a}, @var{b})
+@deftypefnx {} {[@var{u}, @var{v}, @var{c}, @var{s}, @var{x} [, @var{r}]] =} gsvd (@var{a}, @var{b})
 @cindex generalised singular value decomposition
 Compute the generalised singular value decomposition of (@var{a}, @var{b}):
-@iftex
 @tex
 $$
  U^H A X = [I 0; 0 C] [0 R]
  V^H B X = [0 S; 0 0] [0 R]
  C*C + S*S = eye(columns(A))
  I and 0 are padding matrices of suitable size
  R is upper triangular
 $$
 @end tex
-@end iftex
 @ifinfo
 
 @example
+@group
 u' * a * x = [I 0; 0 c] * [0 r]
 v' * b * x = [0 s; 0 0] * [0 r]
 c * c + s * s = eye(columns(a))
 I and 0 are padding matrices of suitable size
 r is upper triangular
+@end group
 @end example
+
 @end ifinfo
 
 The function @code{gsvd} normally returns the vector of generalised singular
 values
-@iftex
 @tex
 diag(C)./diag(S).
 @end tex
-@end iftex
 @ifinfo
 diag(r)./diag(s).
 @end ifinfo
 If asked for five return values, it computes
-@iftex
 @tex
 $U$, $V$, and $X$.
 @end tex
-@end iftex
 @ifinfo
 U, V, and X.
 @end ifinfo
 With a sixth output argument, it also returns
-@iftex
 @tex
 R,
 @end tex
-@end iftex
 @ifinfo
 r,
 @end ifinfo
-The common upper triangular right term. Other authors, like S. Van Huffel,
+The common upper triangular right term.  Other authors, like S. Van Huffel,
 define this transformation as the simulatenous diagonalisation of the
 input matrices, this can be achieved by multiplying
-@iftex
 @tex
 X
 @end tex
-@end iftex
 @ifinfo
 x
 @end ifinfo
 by the inverse of
-@iftex
 @tex
 [I 0; 0 R].
 @end tex
-@end iftex
 @ifinfo
 [I 0; 0 r].
 @end ifinfo
 
 For example,
 
 @example
 gsvd (hilb (3), [1 2 3; 3 2 1])
 @end example
 
 @noindent
 returns
 
 @example
+@group
 ans =
 
   0.1055705
   0.0031759
+@end group
 @end example
 
 @noindent
 and
 
 @example
 [u, v, c, s, x, r] = gsvd (hilb (3),  [1 2 3; 3 2 1])
 @end example
@@ -174,17 +167,18 @@ x =
 
 r =
   -0.14093  -1.24345   0.43737
    0.00000  -3.90043   2.57818
    0.00000   0.00000  -2.52599
 
 @end example
 
-The code is a wrapper to the corresponding Lapack dggsvd and zggsvd routines.
+The code is a wrapper to the corresponding @sc{lapack} dggsvd and zggsvd
+routines.
 
 @end deftypefn */)
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin < 2 || nargin > 2 || (nargout > 1 && (nargout < 5 || nargout > 6)))
diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -2542,16 +2542,16 @@ rmpath ("dir1:/dir2:~/dir3")
   if (need_to_update)
     rehash_internal ();
 
   return retval;
 }
 
 DEFUN (__dump_load_path__, , ,
        doc: /* -*- texinfo -*-
-@deftypefn  {} {} __dump_load_path__ ()
+@deftypefn {} {} __dump_load_path__ ()
 Undocumented internal function.
 @end deftypefn */)
 {
   load_path::display (octave_stdout);
 
   return ovl ();
 }
diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -677,19 +677,20 @@ Match exactly @var{n} times
 Match @var{n} or more times
 
 @item @{@var{m},@var{n}@}
 Match between @var{m} and @var{n} times
 @end table
 
 @item [@dots{}] [^@dots{}]
 
-List operators.  The pattern will match any character listed between "["
-and "]".  If the first character is "^" then the pattern is inverted and
-any character except those listed between brackets will match.
+List operators.  The pattern will match any character listed between
+@qcode{"["} and @qcode{"]"}.  If the first character is @qcode{"^"} then the
+pattern is inverted and any character except those listed between brackets
+will match.
 
 Escape sequences defined below can also be used inside list operators.  For
 example, a template for a floating point number might be @code{[-+.\d]+}.
 
 @item () (?:)
 Grouping operator.  The first form, parentheses only, also creates a token.
 
 @item |
@@ -1340,17 +1341,17 @@ The pattern is a regular expression as d
 The replacement string may contain @code{$i}, which substitutes for the ith
 set of parentheses in the match string.  For example,
 
 @example
 regexprep ("Bill Dunn", '(\w+) (\w+)', '$2, $1')
 @end example
 
 @noindent
-returns "Dunn, Bill"
+returns @qcode{"Dunn, Bill"}
 
 Options in addition to those of @code{regexp} are
 
 @table @samp
 
 @item once
 Replace only the first occurrence of @var{pat} in the result.
 
diff --git a/libinterp/dldfcn/__init_gnuplot__.cc b/libinterp/dldfcn/__init_gnuplot__.cc
--- a/libinterp/dldfcn/__init_gnuplot__.cc
+++ b/libinterp/dldfcn/__init_gnuplot__.cc
@@ -204,17 +204,17 @@ have_gnuplot_binary (void)
 
   return retval;
 }
 
 // Initialize the gnuplot graphics toolkit.
 
 DEFUN_DLD (__init_gnuplot__, , ,
            doc: /* -*- texinfo -*-
-@deftypefn  {} {} __init_gnuplot__ ()
+@deftypefn {} {} __init_gnuplot__ ()
 Undocumented internal function.
 @end deftypefn */)
 {
   octave_value retval;
 
   if (! have_gnuplot_binary ())
     error ("__init_gnuplot__: the gnuplot program is not available, see 'gnuplot_binary'");
   else if (! toolkit_loaded)
diff --git a/libinterp/dldfcn/__osmesa_print__.cc b/libinterp/dldfcn/__osmesa_print__.cc
--- a/libinterp/dldfcn/__osmesa_print__.cc
+++ b/libinterp/dldfcn/__osmesa_print__.cc
@@ -58,30 +58,30 @@ DEFUN_DLD(__osmesa_print__, args, ,
 @deftypefn  {} {} __osmesa_print__ (@var{h}, @var{file}, @var{term})
 @deftypefnx {} {@var{img} =} __osmesa_print__ (@var{h})
 Print figure @var{h} using OSMesa and gl2ps for vector formats.
 
 This is a private internal function.
 
 The first method calls gl2ps with the appropriate @var{term} and writes
 the output of gl2ps to @var{file}.  If the first character of @var{file}
-is @qcode{|}, then a process is started and the output of gl2ps is piped
+is @code{|}, then a process is started and the output of gl2ps is piped
 to it.
 
 Valid options for @var{term}, which can be concatenated in one string, are:
 
 @table @asis
 @item @qcode{eps}, @qcode{pdf}, @qcode{ps}, @qcode{svg}, @qcode{pgf}, @qcode{tex}
 Select output format.
 
-@item @qcode{is2D}
+@item @code{is2D}
 Use GL2PS_SIMPLE_SORT instead of GL2PS_BSP_SORT as Z-depth sorting
 algorithm.
 
-@item @qcode{notext}
+@item @code{notext}
 Don't render text.
 @end table
 
 The second method doesn't use gl2ps and returns a RGB image in @var{img}
 instead.
 
 @end deftypefn */)
 {
diff --git a/libinterp/dldfcn/qr.cc b/libinterp/dldfcn/qr.cc
--- a/libinterp/dldfcn/qr.cc
+++ b/libinterp/dldfcn/qr.cc
@@ -73,17 +73,17 @@ qr_type (int nargin, int nargout)
 // qr (X) alone returns the output of the LAPACK routine dgeqrf, such
 // that R = triu (qr (X))
 
 DEFUN_DLD (qr, args, nargout,
            doc: /* -*- texinfo -*-
 @deftypefn  {} {[@var{Q}, @var{R}] =} qr (@var{A})
 @deftypefnx {} {[@var{Q}, @var{R}, @var{P}] =} qr (@var{A}) # non-sparse A
 @deftypefnx {} {@var{X} =} qr (@var{A})
-@deftypefnx {} {@var{R} =} qr (@var{A})  # sparse A
+@deftypefnx {} {@var{R} =} qr (@var{A}) # sparse A
 @deftypefnx {} {[@var{C}, @var{R}] =} qr (@var{A}, @var{B})
 @deftypefnx {} {[@dots{}] =} qr (@dots{}, 0)
 @deftypefnx {} {[@dots{}] =} qr (@dots{}, 'vector')
 @deftypefnx {} {[@dots{}] =} qr (@dots{}, 'matrix')
 @cindex QR factorization
 Compute the QR@tie{}factorization of @var{A}, using standard @sc{lapack}
 subroutines.
 The QR@tie{}factorization is
@@ -200,23 +200,23 @@ as
 @example
 @group
 [@var{C}, @var{R}] = qr (@var{A}, @var{B})
 x = @var{R} \ @var{C}
 @end group
 @end example
 
 If the final argument is the scalar 0 and the number of rows is larger
-than the number of columns, then an 'economy' factorization is returned,
-omitting zeroes of @var{R} and the corresponding columns of @var{Q}.
-That is, @var{R} will have only @code{size (@var{A},1)} rows.
-In this case, @var{P} is a vector rather than a matrix.
+than the number of columns, then an @qcode{"economy"} factorization is
+returned, omitting zeroes of @var{R} and the corresponding columns of @var{Q}.
+That is, @var{R} will have only @code{size (@var{A},1)} rows.  In this case,
+@var{P} is a vector rather than a matrix.
 
-If the final argument is the string 'vector' then @var{P} is a permutation
-vector instead of a permutation matrix.
+If the final argument is the string @qcode{"vector"} then @var{P} is a
+permutation vector instead of a permutation matrix.
 
 @seealso{chol, hess, lu, qz, schur, svd, qrupdate, qrinsert, qrdelete, qrshift}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
diff --git a/libinterp/dldfcn/xzip.cc b/libinterp/dldfcn/xzip.cc
--- a/libinterp/dldfcn/xzip.cc
+++ b/libinterp/dldfcn/xzip.cc
@@ -17,17 +17,17 @@
 /*!
   This was originally implemented as an m file which directly called
   bzip2 and gzip applications.  This may look simpler but causes some
   issues (see bug #43431) because we have no control over the output
   file:
 
     - created file is always in the same directory as the original file;
     - automatically skip files that already have gz/bz2/etc extension;
-    - some olders versions miss the --keep option.
+    - some older versions lack the --keep option.
 
   In addition, because system() does not have a method that allows
   passing a list of arguments, there is the issue of having to escape
   filenames.
 
   A solution is to pipe file contents into the applications instead of
   filenames.  However, that solution causes:
 
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -3715,17 +3715,17 @@ cdef_manager::do_find_package_symbol (co
 
   return retval;
 }
 
 //----------------------------------------------------------------------------
 
 DEFUN (__meta_get_package__, args, ,
        doc: /* -*- texinfo -*-
-@deftypefn  {} {} __meta_get_package__ ()
+@deftypefn {} {} __meta_get_package__ ()
 Undocumented internal function.
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
   std::string cname = args(0).xstring_value ("PACKAGE_NAME must be a string");
 
diff --git a/scripts/deprecated/octave_config_info.m b/scripts/deprecated/octave_config_info.m
--- a/scripts/deprecated/octave_config_info.m
+++ b/scripts/deprecated/octave_config_info.m
@@ -12,18 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Built-in Function} {} octave_config_info ()
-## @deftypefnx {Built-in Function} {} octave_config_info (@var{option})
+## @deftypefn  {} {} octave_config_info ()
+## @deftypefnx {} {} octave_config_info (@var{option})
 ##
 ## @code{octave_config_info} is deprecated and will be removed in
 ## Octave version 4.6.  Use @code{__have_feature__ (@var{option})} or
 ## @code{__octave_config_info__} as a replacement.
 ##
 ## Return a structure containing configuration and installation
 ## information for Octave.
 ##
diff --git a/scripts/general/grabcode.m b/scripts/general/grabcode.m
--- a/scripts/general/grabcode.m
+++ b/scripts/general/grabcode.m
@@ -12,17 +12,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {} {} grabcode (@var{url})
+## @deftypefn  {} {} grabcode (@var{url})
 ## @deftypefnx {} {@var{code_str} =} grabcode (@var{url})
 ##
 ## Grab by the @code{publish} function generated HTML reports from Octave
 ## script files.
 ##
 ## The input parameter @var{url} must point to a local or remote HTML file
 ## with extension @samp{.htm} or @samp{.html} which was generated by the
 ## @code{publish} function.  With any other HTML file this will not work!
diff --git a/scripts/general/publish.m b/scripts/general/publish.m
--- a/scripts/general/publish.m
+++ b/scripts/general/publish.m
@@ -13,17 +13,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {} {} publish (@var{filename})
+## @deftypefn  {} {} publish (@var{filename})
 ## @deftypefnx {} {} publish (@var{filename}, @var{output_format})
 ## @deftypefnx {} {} publish (@var{filename}, @var{option1}, @var{value1}, @dots{})
 ## @deftypefnx {} {} publish (@var{filename}, @var{options})
 ## @deftypefnx {} {@var{output_file} =} publish (@var{filename}, @dots{})
 ##
 ## Generate reports from Octave script files in several output formats.
 ##
 ## The generated reports consider Publishing Markup in comments,
@@ -66,16 +66,17 @@
 ##
 ## @example
 ## @group
 ## @var{options}.format = @var{output_format};
 ## publish (@var{filename}, @var{options})
 ## @end group
 ## @end example
 ##
+## @noindent
 ## which is described below.  The same holds for using option-value-pairs
 ##
 ## @example
 ## @group
 ## @var{options}.@var{option1} = @var{value1};
 ## publish (@var{filename}, @var{options})
 ## @end group
 ## @end example
@@ -86,46 +87,46 @@
 ## @itemize @bullet
 ## @item
 ## @samp{format} --- Output format of the published script file, one of
 ##
 ## @samp{html} (default), @samp{doc}, @samp{latex}, @samp{ppt},
 ## @samp{xml}, or @samp{pdf}.
 ##
 ## The output formats @samp{doc}, @samp{ppt}, and @samp{xml} are currently
-## not supported. To generate a @samp{doc} report, open a generated
+## not supported.  To generate a @samp{doc} report, open a generated
 ## @samp{html} report with your office suite.
 ##
 ## @item
 ## @samp{outputDir} --- Full path string of a directory, where the generated
 ## report will be located.  If no directory is given, the report is generated
 ## in a subdirectory @samp{html} relative to the current working directory.
 ##
 ## @item
-## @samp{stylesheet} --- Not supported, only for Matlab compatibility.
+## @samp{stylesheet} --- Not supported, only for @sc{matlab} compatibility.
 ##
 ## @item
-## @samp{createThumbnail} --- Not supported, only for Matlab compatibility.
+## @samp{createThumbnail} --- Not supported, only for @sc{matlab} compatibility.
 ##
 ## @item
-## @samp{figureSnapMethod} --- Not supported, only for Matlab compatibility.
+## @samp{figureSnapMethod} --- Not supported, only for @sc{matlab} compatibility.
 ##
 ## @item
 ## @samp{imageFormat} --- Desired format for images produced, while
 ## evaluating the code.  The allowed image formats depend on the output
 ## format:
 ##
 ## @itemize @bullet
 ## @item @samp{html} and @samp{xml} --- @samp{png} (default), any other
 ## image format supported by Octave
 ##
 ## @item @samp{latex} --- @samp{epsc2} (default), any other image format
 ## supported by Octave
 ##
-## @item @samp{pdf} --- @samp{jpg} (default) or @samp{bmp}, note Matlab
+## @item @samp{pdf} --- @samp{jpg} (default) or @samp{bmp}, note @sc{matlab}
 ## uses  @samp{bmp} as default
 ##
 ## @item @samp{doc} or @samp{ppt} --- @samp{png} (default), @samp{jpg},
 ## @samp{bmp}, or @samp{tiff}
 ## @end itemize
 ##
 ## @item
 ## @samp{maxHeight} and @samp{maxWidth} --- Maximum height (width) of the
diff --git a/scripts/gui/dialog.m b/scripts/gui/dialog.m
--- a/scripts/gui/dialog.m
+++ b/scripts/gui/dialog.m
@@ -12,21 +12,22 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {} {@var{h} = } dialog (@dots{}, "@var{property}", @var{value}, @dots{})
+## @deftypefn {} {@var{h} =} dialog (@dots{}, "@var{property}", @var{value}, @dots{})
 ##
 ## Create an empty modal dialog window that other uicontrols can be added to.
 ##
-## The dialog box is a figure object with properties as recommended for a dialog box.
+## The dialog box is a figure object with properties as recommended for a
+## dialog box.
 ##
 ## The default properties differing from a figure are:
 ##
 ## @table @asis
 ## @item buttondownfcn
 ## @code{if isempty(allchild(gcbf)), close(gcbf), end}
 ##
 ## @item colormap
diff --git a/scripts/linear-algebra/condest.m b/scripts/linear-algebra/condest.m
--- a/scripts/linear-algebra/condest.m
+++ b/scripts/linear-algebra/condest.m
@@ -30,47 +30,57 @@
 ## If @var{t} exceeds 5, then only 5 test vectors are used.
 ##
 ## If the matrix is not explicit, e.g., when estimating the condition
 ## number of @var{A} given an LU@tie{}factorization, @code{condest} uses the
 ## following functions:
 ##
 ## @itemize @minus
 ## @item @var{afun} which should returns
+##
 ## @itemize @bullet
 ## @item
-## the dimension @var{n} of @var{a}, if @var{flag} is "dim"
+## the dimension @var{n} of @var{a}, if @var{flag} is @qcode{"dim"}
+##
 ## @item
-## true if @var{a} is a real operator, if @var{flag} is "real"
+## true if @var{a} is a real operator, if @var{flag} is @qcode{"real"}
+##
 ## @item
 ## the result @code{@var{a} * @var{x}}, if @var{flag} is "notransp"
+##
 ## @item
 ## the result @code{@var{a}' * @var{x}}, if @var{flag} is "transp"
 ## @end itemize
+##
 ## @item @var{solvefun} which should returns
+##
 ## @itemize @bullet
 ## @item
-## the dimension @var{n} of @var{a}, if @var{flag} is "dim"
+## the dimension @var{n} of @var{a}, if @var{flag} is @qcode{"dim"}
+##
 ## @item
-## true if @var{a} is a real operator, if @var{flag} is "real"
+## true if @var{a} is a real operator, if @var{flag} is @qcode{"real"}
+##
 ## @item
 ## the result @code{@var{a} \ @var{x}}, if @var{flag} is "notransp"
+##
 ## @item
 ## the result @code{@var{a}' \ @var{x}}, if @var{flag} is "transp"
 ## @end itemize
 ## @end itemize
 ##
 ## The parameters @var{p1}, @var{p2}, @dots{} are arguments of
 ## @code{@var{afun} (@var{flag}, @var{x}, @var{p1}, @var{p2}, @dots{})}
 ## and @code{@var{solvefun} (@var{flag}, @var{x}, @var{p1}, @var{p2},
 ## @dots{})}.
 ##
 ## @code{condest} uses a randomized algorithm to approximate the
-## 1-norms. Therefore, if consistent results are required, the "state" of the
-## random generator should be fixed before invoking @code{normest1}.
+## 1-norms.  Therefore, if consistent results are required, the
+## @qcode{"state"} of the random generator should be fixed before invoking
+## @code{normest1}.
 ##
 ## @code{condest} returns the 1-norm condition estimate @var{est} and a vector
 ## @var{v} satisfying @code{norm (A*v, 1) == norm (A, 1) * norm
 ## (@var{v}, 1) / @var{est}}.  When @var{est} is large, @var{v} is an
 ## approximate null vector.
 ##
 ## References:
 ##
diff --git a/scripts/linear-algebra/normest1.m b/scripts/linear-algebra/normest1.m
--- a/scripts/linear-algebra/normest1.m
+++ b/scripts/linear-algebra/normest1.m
@@ -12,69 +12,74 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {Function File} {@var{c} =} normest1 (@var{a})
-## @deftypefnx {Function File} {@var{c} =} normest1 (@var{a}, @var{t})
-## @deftypefnx {Function File} {@var{c} =} normest1 (@var{a}, @var{t}, @var{x0})
-## @deftypefnx {Function File} {@var{c} =} normest1 (@var{afun}, @var{t}, @var{x0}, @var{p1}, @var{p2}, @dots{})
-## @deftypefnx {Function File} {[@var{c}, @var{v}] =} normest1 (@var{a}, @dots{})
-## @deftypefnx {Function File} {[@var{c}, @var{v}, @var{w}] =} normest1 (@var{a}, @dots{})
-## @deftypefnx {Function File} {[@var{c}, @var{v}, @var{w}, @var{it}] =} normest1 (@var{a}, @dots{})
+## @deftypefn  {} {@var{c} =} normest1 (@var{a})
+## @deftypefnx {} {@var{c} =} normest1 (@var{a}, @var{t})
+## @deftypefnx {} {@var{c} =} normest1 (@var{a}, @var{t}, @var{x0})
+## @deftypefnx {} {@var{c} =} normest1 (@var{afun}, @var{t}, @var{x0}, @var{p1}, @var{p2}, @dots{})
+## @deftypefnx {} {[@var{c}, @var{v}] =} normest1 (@var{a}, @dots{})
+## @deftypefnx {} {[@var{c}, @var{v}, @var{w}] =} normest1 (@var{a}, @dots{})
+## @deftypefnx {} {[@var{c}, @var{v}, @var{w}, @var{it}] =} normest1 (@var{a}, @dots{})
 ## Estimate the 1-norm of the matrix @var{a} using a block algorithm.
 ##
 ## For a medium size matrix @var{a}, @code{norm (@var{a}, 1)} should be
-## used instead. For a large sparse matrix, when only an estimate of the norm
-## is needed, @code{normest1 (@var{a})} might be faster. Moreover, it can be
+## used instead.  For a large sparse matrix, when only an estimate of the norm
+## is needed, @code{normest1 (@var{a})} might be faster.  Moreover, it can be
 ## used for the estimate of the 1-norm of a linear
 ## operator @var{a} when matrix-vector products @code{@var{a} * @var{x}} and
-## @code{@var{a}' * @var{x}} can be cheaply computed. In this case,
+## @code{@var{a}' * @var{x}} can be cheaply computed.  In this case,
 ## instead of the matrix @var{a}, a function
-## @code{@var{afun} (@var{flag}, @var{x})} can be used. It should return:
+## @code{@var{afun} (@var{flag}, @var{x})} can be used.  It should return:
 ##
 ## @itemize @bullet
 ## @item
 ## the dimension @var{n} of @var{a}, if @var{flag} is @qcode{"dim"}
+##
 ## @item
 ## true if @var{a} is a real operator, if @var{flag} is @qcode{"real"}
+##
 ## @item
 ## the result @code{@var{a} * @var{x}}, if @var{flag} is @qcode{"notransp"}
+##
 ## @item
 ## the result @code{@var{a}' * @var{x}}, if @var{flag} is @qcode{"transp"}
 ## @end itemize
 ##
 ## A typical case is @var{a} defined by @code{@var{b} ^ @var{m}},
 ## in which the result @code{@var{a} * @var{x}} can be computed without
 ## even forming explicitely @code{@var{b} ^ @var{m}} by:
 ##
 ## @example
+## @group
 ## @var{y} = @var{x};
 ## for @var{i} = 1:@var{m}
 ##   @var{y} = @var{b} * @var{y};
 ## endfor
+## @end group
 ## @end example
 ##
 ## The parameters @var{p1}, @var{p2}, @dots{} are arguments of
 ## @code{@var{afun} (@var{flag}, @var{x}, @var{p1}, @var{p2}, @dots{})}.
 ##
 ## The default value for @var{t} is 2. The algorithm requires
 ## matrix-matrix products with sizes @var{n} x @var{n} and
 ## @var{n} x @var{t}.
 ##
 ## The initial matrix @var{x0} should have columns of unit 1-norm.
 ## The default initial matrix @var{x0} has the first column
 ## @code{ones (@var{n}, 1) / @var{n}}
 ## and, if @var{t} >  1, the remaining columns with random elements
 ## @code{-1 / @var{n}}, @code{1 / @var{n}}, divided by @var{n}.
-## Therefore, if consistent results are required, the "state" of the
+## Therefore, if consistent results are required, the @qcode{"state"} of the
 ## random generator should be fixed before invoking @code{normest1}.
 ##
 ## On output, @var{c} is the desired estimate, @var{v} and @var{w}
 ## vectors such that @code{@var{w} = @var{a} * @var{v}}, with
 ## @code{norm (@var{w}, 1)} = @code{@var{c} * norm (@var{v}, 1)}.
 ## @var{it} contains in @code{@var{it}(1)} the number of iterations
 ## (the maximum number is hardcoded to 5) and in  @code{@var{it}(2)}
 ## the total number of products @code{@var{a} * @var{x}} or
diff --git a/scripts/miscellaneous/mkdir.m b/scripts/miscellaneous/mkdir.m
--- a/scripts/miscellaneous/mkdir.m
+++ b/scripts/miscellaneous/mkdir.m
@@ -12,17 +12,17 @@
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} mkdir @var{dir}
 ## @deftypefnx {} {} mkdir (@var{parent}, @var{dir})
-## @deftypefnx {} {[@var{status}, @var{msg}, @var{msgid}] =} mkdir (...)
+## @deftypefnx {} {[@var{status}, @var{msg}, @var{msgid}] =} mkdir (@dots{})
 ## Create a directory named @var{dir} in the directory @var{parent},
 ## creating any intermediate directories if necessary.
 ##
 ## If @var{dir} is a relative path and no @var{parent} directory is specified
 ## then the present working directory is used.
 ##
 ## If successful, @var{status} is 1, and @var{msg} and @var{msgid} are empty
 ## strings ("").  Otherwise, @var{status} is 0, @var{msg} contains a
diff --git a/scripts/ode/ode23.m b/scripts/ode/ode23.m
--- a/scripts/ode/ode23.m
+++ b/scripts/ode/ode23.m
@@ -35,17 +35,17 @@
 ## must accept two inputs where the first is time @var{t} and the second is a
 ## column vector of unknowns @var{y}.
 ##
 ## @var{trange} specifies the time interval over which the ODE will be
 ## evaluated.  Typically, it is a two-element vector specifying the initial and
 ## final times (@code{[tinit, tfinal]}).  If there are more than two elements
 ## then the solution will also be evaluated at these intermediate time
 ## instances unless the integrate function specified is
-## @command{integrate_n_steps}.
+## @code{integrate_n_steps}.
 ##
 ## By default, @code{ode23} uses an adaptive timestep with the
 ## @code{integrate_adaptive} algorithm.  The tolerance for the timestep
 ## computation may be changed by using the option @qcode{"Tau"}, that has a
 ## default value of @math{1e-6}.  If the ODE option @qcode{"TimeStepSize"} is
 ## not empty, then the stepper called will be @code{integrate_const}.  If, in
 ## addition, the option @qcode{"TimeStepNumber"} is also specified then the
 ## integrate function @code{integrate_n_steps} will be used.
diff --git a/scripts/ode/ode45.m b/scripts/ode/ode45.m
--- a/scripts/ode/ode45.m
+++ b/scripts/ode/ode45.m
@@ -33,17 +33,17 @@
 ## must accept two inputs where the first is time @var{t} and the second is a
 ## column vector of unknowns @var{y}.
 ##
 ## @var{trange} specifies the time interval over which the ODE will be
 ## evaluated.  Typically, it is a two-element vector specifying the initial and
 ## final times (@code{[tinit, tfinal]}).  If there are more than two elements
 ## then the solution will also be evaluated at these intermediate time
 ## instances unless the integrate function specified is
-## @command{integrate_n_steps}.
+## @code{integrate_n_steps}.
 ##
 ## By default, @code{ode45} uses an adaptive timestep with the
 ## @code{integrate_adaptive} algorithm.  The tolerance for the timestep
 ## computation may be changed by using the option @qcode{"Tau"}, that has a
 ## default value of @math{1e-6}.  If the ODE option @qcode{"TimeStepSize"} is
 ## not empty, then the stepper called will be @code{integrate_const}.  If, in
 ## addition, the option @qcode{"TimeStepNumber"} is also specified then the
 ## integrate function @code{integrate_n_steps} will be used.
diff --git a/scripts/ode/odeplot.m b/scripts/ode/odeplot.m
--- a/scripts/ode/odeplot.m
+++ b/scripts/ode/odeplot.m
@@ -36,17 +36,17 @@
 ## the return value is false (resp. value 0) for @qcode{"not stop solving"},
 ##
 ## @item  @qcode{"done"}
 ## then @var{t} must be a double scalar specifying the last time step and
 ## nothing is returned from this function.
 ## @end table
 ##
 ## This function is called by an ode solver function if it was specified in
-## an options structure with the @command{odeset}.  This function is an
+## an options structure with the @code{odeset}.  This function is an
 ## internal helper function therefore it should never be necessary that this
 ## function is called directly by a user.  There is only little error
 ## detection implemented in this function file to achieve the highest
 ## performance.
 ##
 ## For example, solve an anonymous implementation of the
 ## @nospell{@qcode{"Van der Pol"}} equation and display the results while
 ## solving
diff --git a/scripts/ode/private/AbsRel_Norm.m b/scripts/ode/private/AbsRel_Norm.m
--- a/scripts/ode/private/AbsRel_Norm.m
+++ b/scripts/ode/private/AbsRel_Norm.m
@@ -13,17 +13,17 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {} {retval =} AbsRel_Norm (@var{x}, @var{x_old}, @var{AbsTol}, @var{RelTol}, @var{normcoontrol}, @var{y})
+## @deftypefn {} {retval =} AbsRel_Norm (@var{x}, @var{x_old}, @var{AbsTol}, @var{RelTol}, @var{normcoontrol}, @var{y})
 ## Undocumented internal function.
 ## @end deftypefn
 
 function retval = AbsRel_Norm (x, x_old, AbsTol, RelTol, normcontrol, y)
 
   n = length (x);
 
   if (nargin == 5)
diff --git a/scripts/ode/private/integrate_adaptive.m b/scripts/ode/private/integrate_adaptive.m
--- a/scripts/ode/private/integrate_adaptive.m
+++ b/scripts/ode/private/integrate_adaptive.m
@@ -37,19 +37,21 @@
 ##
 ## The second input argument is the order of the stepper.  It is needed
 ## to compute the adaptive timesteps.
 ##
 ## The third input argument is a function handle or inline function that
 ## defines the ODE:
 ##
 ## @ifhtml
+##
 ## @example
 ## @math{y' = f(t,y)}
 ## @end example
+##
 ## @end ifhtml
 ## @ifnothtml
 ## @math{y' = f(t,y)}.
 ## @end ifnothtml
 ##
 ## The fourth input argument is the time vector which defines the integration
 ## interval, i.e., @var{[tspan(1), tspan(end)]} and all intermediate elements
 ## are taken as times at which the solution is required.
diff --git a/scripts/ode/private/integrate_const.m b/scripts/ode/private/integrate_const.m
--- a/scripts/ode/private/integrate_const.m
+++ b/scripts/ode/private/integrate_const.m
@@ -36,19 +36,21 @@
 ##
 ## The second input argument is the order of the stepper.  It is needed to
 ## compute the adaptive timesteps.
 ##
 ## The third input argument is a function handle or inline function that
 ## defines the ODE:
 ##
 ## @ifhtml
+##
 ## @example
 ## @math{y' = f(t,y)}
 ## @end example
+##
 ## @end ifhtml
 ## @ifnothtml
 ## @math{y' = f(t,y)}.
 ## @end ifnothtml
 ##
 ## The fourth input argument is the time vector which defines the integration
 ## interval, i.e., @var{[tspan(1), tspan(end)]} and all intermediate elements
 ## are taken as times at which the solution is required.
diff --git a/scripts/ode/private/integrate_n_steps.m b/scripts/ode/private/integrate_n_steps.m
--- a/scripts/ode/private/integrate_n_steps.m
+++ b/scripts/ode/private/integrate_n_steps.m
@@ -36,19 +36,21 @@
 ##
 ## The second input argument is the order of the stepper.  It is needed to
 ## compute the adaptive timesteps.
 ##
 ## The third input argument is a function handle or inline function that
 ## defines the ODE:
 ##
 ## @ifhtml
+##
 ## @example
 ## @math{y' = f(t,y)}
 ## @end example
+##
 ## @end ifhtml
 ## @ifnothtml
 ## @math{y' = f(t,y)}.
 ## @end ifnothtml
 ##
 ## The third input argument is the starting point for the integration.
 ##
 ## The fourth argument contains the initial conditions for the ODEs.
diff --git a/scripts/plot/appearance/axis.m b/scripts/plot/appearance/axis.m
--- a/scripts/plot/appearance/axis.m
+++ b/scripts/plot/appearance/axis.m
@@ -51,17 +51,18 @@
 ## @noindent
 ## forces a square aspect ratio, and
 ##
 ## @example
 ## axis ("tic", "labely");
 ## @end example
 ##
 ## @noindent
-## turns tick marks on for all axes and tick mark labels on for the y-axis only.
+## turns tick marks on for all axes and tick mark labels on for the y-axis
+## only.
 ##
 ## @noindent
 ## The following options control the aspect ratio of the axes.
 ##
 ## @table @asis
 ## @item @qcode{"square"}
 ## Force a square axis aspect ratio.
 ##
diff --git a/scripts/plot/draw/isocaps.m b/scripts/plot/draw/isocaps.m
--- a/scripts/plot/draw/isocaps.m
+++ b/scripts/plot/draw/isocaps.m
@@ -30,18 +30,18 @@
 ## Create end-caps for isosurfaces of 3-D data.
 ##
 ## This function places caps at the open ends of isosurfaces.
 ##
 ## The input argument @var{v} is a three-dimensional array that contains data
 ## sampled over a volume.
 ##
 ## The input @var{isoval} is a scalar that specifies the value for the
-## isosurface.  If @var{isoval} is omitted or empty, a "good" value for an
-## isosurface is determined from @var{v}.
+## isosurface.  If @var{isoval} is omitted or empty, a @nospell{"good"} value
+## for an isosurface is determined from @var{v}.
 ##
 ## When called with a single output argument, @code{isocaps} returns a
 ## structure array @var{fvc} with the fields: @code{faces}, @code{vertices},
 ## and @code{facevertexcdata}.  The results are computed at the points
 ## @code{[@var{x}, @var{y}, @var{z}] = meshgrid (1:l, 1:m, 1:n)} where
 ## @code{[l, m, n] = size (@var{v})}.  The output @var{fvc} can be used
 ## directly as input to the @code{patch} function.
 ##
diff --git a/scripts/plot/draw/isocolors.m b/scripts/plot/draw/isocolors.m
--- a/scripts/plot/draw/isocolors.m
+++ b/scripts/plot/draw/isocolors.m
@@ -26,25 +26,25 @@
 ##
 ## Compute isosurface colors.
 ##
 ## If called with one output argument and the first input argument
 ## @var{c} is a three-dimensional array that contains color values and
 ## the second input argument @var{v} keeps the vertices of a geometry
 ## then return a matrix @var{cd} with color data information for the
 ## geometry at computed points
-## @command{[x, y, z] = meshgrid (1:l, 1:m, 1:n)}.  The output argument
+## @code{[x, y, z] = meshgrid (1:l, 1:m, 1:n)}.  The output argument
 ## @var{cd} can be taken to manually set FaceVertexCData of a patch.
 ##
 ## If called with further input arguments @var{x}, @var{y} and @var{z}
 ## which are three--dimensional arrays of the same size than @var{c}
 ## then the color data is taken at those given points.  Instead of the
 ## color data @var{c} this function can also be called with RGB values
 ## @var{r}, @var{g}, @var{b}.  If input argumnets @var{x}, @var{y},
-## @var{z} are not given then again @command{meshgrid} computed values
+## @var{z} are not given then again @code{meshgrid} computed values
 ## are taken.
 ##
 ## Optionally, the patch handle @var{p} can be given as the last input
 ## argument to all variations of function calls instead of the vertices
 ## data @var{v}.  Finally, if no output argument is given then directly
 ## change the colors of a patch that is given by the patch handle
 ## @var{p}.
 ##
diff --git a/scripts/plot/draw/isosurface.m b/scripts/plot/draw/isosurface.m
--- a/scripts/plot/draw/isosurface.m
+++ b/scripts/plot/draw/isosurface.m
@@ -32,17 +32,17 @@
 ##
 ## An isosurface connects points with the same value and is analogous to a
 ## contour plot, but in three dimensions.
 ##
 ## The input argument @var{v} is a three-dimensional array that contains data
 ## sampled over a volume.
 ##
 ## The input @var{isoval} is a scalar that specifies the value for the
-## isosurface.  If @var{isoval} is omitted or empty, a @qcode{"good"} value
+## isosurface.  If @var{isoval} is omitted or empty, a @nospell{"good"} value
 ## for an isosurface is determined from @var{v}.
 ##
 ## When called with a single output argument @code{isosurface} returns a
 ## structure array @var{fv} that contains the fields @var{faces} and
 ## @var{vertices} computed at the points
 ## @code{[@var{x}, @var{y}, @var{z}] = meshgrid (1:l, 1:m, 1:n)} where
 ## @code{[l, m, n] = size (@var{v})}.  The output @var{fv} can be
 ## used directly as input to the @code{patch} function.
diff --git a/scripts/plot/draw/light.m b/scripts/plot/draw/light.m
--- a/scripts/plot/draw/light.m
+++ b/scripts/plot/draw/light.m
@@ -19,47 +19,47 @@
 ## -*- texinfo -*-
 ## @deftypefn  {} {} light ()
 ## @deftypefnx {} {} light (@dots{}, @var{prop}, @var{val}, @dots{})
 ## @deftypefnx {} {} light (@var{hax}, @dots{})
 ## @deftypefnx {} {@var{h} =} light (@dots{})
 ## Create light object in the current axes or for axes @var{hax}.
 ##
 ## When a light object is present in an axes object and the properties
-## @qcode{"EdgeLighting"} or @qcode{"FaceLighting"} of a @command{patch} or
-## @command{surface} object are set to a value other than @qcode{"none"}, these
+## @qcode{"EdgeLighting"} or @qcode{"FaceLighting"} of a @code{patch} or
+## @code{surface} object are set to a value other than @qcode{"none"}, these
 ## objects are drawn with light and shadow effects.  Supported values for these
 ## properties are @qcode{"none"} (no lighting effects), @qcode{"flat"}
 ## (facetted look of the objects) and @qcode{"gouraud"} (linear interpolation
 ## of the lighting effects between the vertices).
-## For @command{patch} objects, the normals must be set manually (property
+## For @code{patch} objects, the normals must be set manually (property
 ## @qcode{"VertexNormals"}).
 ##
 ## Up to eight light objects are supported per axes.
 ##
 ## Lighting is only supported for graphics toolkits supporting OpenGL (i.e.
 ## @qcode{"fltk"} and @qcode{"qt"}).
 ##
 ## The following properties specific to the light object can be passed with
 ## their respective values:
 ##
 ## @table @asis
 ## @item @qcode{"Color":} The color of the light object can be passed as an
-## RGB-vector (e.g. @qcode{[1 0 0]} for red) or as a string (e.g. @qcode{"r"}
-## for red).  The default color is white (@qcode{[1 1 1]}).
+## RGB-vector (e.g., @code{[1 0 0]} for red) or as a string (e.g., @qcode{"r"}
+## for red).  The default color is white (@code{[1 1 1]}).
 ##
 ## @item @qcode{"Position":} The direction from which the light emanates as an
-## 1x3-vector.  The default direction is @qcode{[1 0 1]}.
+## 1x3-vector.  The default direction is @code{[1 0 1]}.
 ##
 ## @item @qcode{"Style":} This string defines whether the light emanates from a
 ## light source at infinite distance (@qcode{"infinite"}) or from a local point
 ## source (@qcode{"local"}).
 ## @end table
 ##
-## If @command{light} is called with an axes handle @var{hax}, it must be passed
+## If @code{light} is called with an axes handle @var{hax}, it must be passed
 ## as the first argument.
 ##
 ## Optionally, the handle to the light object is returned in @var{h}.
 ##
 ## @seealso{get, set, patch, surface, lighting, material}
 ## @end deftypefn
 
 ## Author: mmuetzel
diff --git a/scripts/plot/draw/private/__calc_isovalue_from_data__.m b/scripts/plot/draw/private/__calc_isovalue_from_data__.m
--- a/scripts/plot/draw/private/__calc_isovalue_from_data__.m
+++ b/scripts/plot/draw/private/__calc_isovalue_from_data__.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## Undocumented internal function.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {@var{isoval} =} __calc_isovalue_from_data__ (@var{data})
-## Calculate a "good" iso value from histogram of data.
+## Calculate a @nospell{"good"} iso value from histogram of data.
 ## @end deftypefn
 
 ## called from isocaps, isosurface
 
 function isoval = __calc_isovalue_from_data__ (data)
 
   ## use a maximum of 10,000-20,000 samples to limit runtime of hist
   step = 1;
diff --git a/scripts/plot/draw/private/__marching_cube__.m b/scripts/plot/draw/private/__marching_cube__.m
--- a/scripts/plot/draw/private/__marching_cube__.m
+++ b/scripts/plot/draw/private/__marching_cube__.m
@@ -55,17 +55,17 @@
 ## c = (x-.5).^2 + (y-.5).^2 + (z-.5).^2;
 ## [t, p] = __marching_cube__ (x, y, z, c, .5);
 ##
 ## figure ();
 ## trimesh (t, p(:,1), p(:,2), p(:,3));
 ## @end group
 ## @end example
 ##
-## Instead of the @command{trimesh} function the @command{patch}
+## Instead of the @code{trimesh} function the @code{patch}
 ## function can be used to visualize the geometry.  For example:
 ##
 ## @example
 ## @group
 ## figure (); view (-38, 20);
 ## pa = patch ("Faces", t, "Vertices", p, "FaceVertexCData", p, ...
 ##             "FaceColor", "interp", "EdgeColor", "none");
 ##
diff --git a/scripts/statistics/base/cov.m b/scripts/statistics/base/cov.m
--- a/scripts/statistics/base/cov.m
+++ b/scripts/statistics/base/cov.m
@@ -57,18 +57,18 @@
 ## @end table
 ##
 ## Compatibility Note:: Octave always treats rows of @var{x} and @var{y}
 ## as multivariate random variables.
 ## For two inputs, however, @sc{matlab} treats @var{x} and @var{y} as two
 ## univariate distributions regardless of their shapes, and will calculate
 ## @code{cov ([@var{x}(:), @var{y}(:)])} whenever the number of elements in
 ## @var{x} and @var{y} are equal.  This will result in a 2x2 matrix.
-## Code relying on @sc{Matlab}'s definition will need to be
-## changed when running in Octave.
+## Code relying on @sc{matlab}'s definition will need to be changed when
+## running in Octave.
 ## @seealso{corr}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute covariances
 
 function c = cov (x, y = [], opt = 0)
 
diff --git a/scripts/statistics/base/median.m b/scripts/statistics/base/median.m
--- a/scripts/statistics/base/median.m
+++ b/scripts/statistics/base/median.m
@@ -37,17 +37,17 @@
 ##               x(ceil(N/2))             N odd
 ## median (x) =
 ##              (x(N/2) + x((N/2)+1))/2   N even
 ## @end group
 ## @end example
 ##
 ## @end ifnottex
 ## If @var{x} is of a discrete type such as integer or logical, then
-## the case of even N rounds up (or toward @qcode{true}).
+## the case of even N rounds up (or toward @code{true}).
 ##
 ## If @var{x} is a matrix, compute the median value for each column and
 ## return them in a row vector.
 ##
 ## If the optional @var{dim} argument is given, operate along this dimension.
 ## @seealso{mean, mode}
 ## @end deftypefn
 
