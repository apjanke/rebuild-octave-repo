# HG changeset patch
# User Ben Abbott  <bpabbott@mac.com>
# Date 1373134650 14400
#      Sat Jul 06 14:17:30 2013 -0400
# Node ID 5ea6a6d2b83f70660a8de4d3e071ab199c7950a3
# Parent  8a4e53cf79c950cd22a3cbfd189dfb45f07f516a
Fix contour() listeners.

scripts/plot/contour.m: Add tests.
scripts/plot/private/__contour__.m: Modify update_data() to set the mode
for levellist and levelstep. When levelstep is manually changed, set
the corrsponding levellist, but keep the levellistmode set to  "auto".
Fix recursion.

diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -89,8 +89,38 @@ endfunction
 %! clf;
 %! colormap ('default');
 %! x = linspace (-2, 2);
 %! [x, y] = meshgrid (x);
 %! z = sqrt (x.^2 + y.^2) ./ (x.^2 + y.^2 + 1);
 %! contourf (x, y, z, [0.4, 0.4]);
 %! title ('The hole should be filled with the background color');
 
+%!test
+%! hf = figure ("visible", "off");
+%! clf (hf);
+%! unwind_protect
+%!   [x, y, z] = peaks ();
+%!   [c, h] = contour (x, y, z);
+%!   levellist = (-6):6;
+%!   set (h, "levellist", levellist);
+%!   assert (get (h, "levellist"), levellist)
+%!   assert (get (h, "levellistmode"), "manual")
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
+
+%!test
+%! hf = figure ("visible", "off");
+%! clf (hf);
+%! unwind_protect
+%!   [x, y, z] = peaks ();
+%!   [c, h] = contour (x, y, z);
+%!   levelstep = 3;
+%!   set (h, "levelstep", levelstep);
+%!   assert (get (h, "levelstep"), levelstep)
+%!   assert (get (h, "levelstepmode"), "manual")
+%!   assert (get (h, "levellist"), (-6):levelstep:6)
+%!   assert (get (h, "levellistmode"), "auto")
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
+
diff --git a/scripts/plot/private/__contour__.m b/scripts/plot/private/__contour__.m
--- a/scripts/plot/private/__contour__.m
+++ b/scripts/plot/private/__contour__.m
@@ -87,24 +87,25 @@ function [c, hg] = __contour__ (varargin
     x1 = varargin{3};
     y1 = varargin{4};
     z1 = varargin{5};
   endif
   if (!ismatrix (z1) || isvector (z1) || isscalar (z1))
     error ("__contour__: z argument must be a matrix");
   endif
   if (length (varargin) == 4 || length (varargin) == 6)
-    vn = varargin {end};
+    vn = varargin{end};
     vnauto = false;
   else
     vnauto = true;
     vn = 10;
   endif
 
   if (isscalar (vn))
+    ## FIXME - the levels should be determined similarly to {x,y,z}ticks
     lvl = linspace (min (z1(!isinf (z1))), max (z1(!isinf (z1))),
                     vn + 2)(1:end-1);
   else
     lvl = vn;
   endif
 
   if (strcmpi (filled, "on"))
     if (isvector (x1) || isvector (y1))
@@ -186,18 +187,18 @@ function [c, hg] = __contour__ (varargin
   ## alias for linecolor
   addproperty ("edgecolor", hg, "color", edgecolor, "{flat}|none");
 
   addlistener (hg, "fill", @update_data);
 
   addlistener (hg, "zlevelmode", @update_zlevel);
   addlistener (hg, "zlevel", @update_zlevel);
 
-  addlistener (hg, "levellist", @update_data);
-  addlistener (hg, "levelstep", @update_data);
+  addlistener (hg, "levellist", {@update_data, "levellist"});
+  addlistener (hg, "levelstep", {@update_data, "levelstep"});
   addlistener (hg, "levellistmode", @update_data);
   addlistener (hg, "levelstepmode", @update_data);
 
   addlistener (hg, "labelspacing", @update_text);
   addlistener (hg, "textlist", @update_text);
   addlistener (hg, "textlistmode", @update_text);
   addlistener (hg, "textstep", @update_text);
   addlistener (hg, "textstepmode", @update_text);
@@ -430,29 +431,46 @@ function update_line (h, d)
   endif
   if (! isequal (ec, lc))
     set (h, "edgecolor", lc);
   endif
   set (findobj (h, "type", "patch"), "edgecolor", lc,
        "linewidth", get (h, "linewidth"), "linestyle", get (h, "linestyle"));
 endfunction
 
-function update_data (h, d)
+function update_data (h, d, prop = "")
   persistent recursive = false;
 
   if (!recursive)
     recursive = true;
 
     delete (get (h, "children"));
 
-    if (strcmpi (get (h, "levellistmode"), "manual"))
+    switch prop
+    case "levellist"
+      set (h, "levellistmode", "manual")
+    case "levelstep"
+      set (h, "levelstepmode", "manual")
+    endswitch
+
+    if (strcmpi (get (h, "levellistmode"), "manual")
+        && ! strcmp (prop, "levelstep"))
       lvl = get (h, "levellist");
     elseif (strcmpi (get (h, "levelstepmode"), "manual"))
       z = get (h, "zdata");
-      lvl = ceil ((max(z(:)) - min (z(:)) ./ get (h, "levelstep")));
+      lvs = get (h, "levelstep");
+      lvl(1) = ceil (min (z(:)) / lvs) * lvs;
+      lvl(2) = floor (max (z(:)) / lvs) * lvs;
+      if (lvl(1) >= lvl(2))
+        lvl = median (z(:));
+      else
+        lvl = lvl(1) : lvs : lvl(2);
+      endif
+      set (h, "levellist", lvl);
+      set (h, "levellistmode", "auto");
     else
       lvl = 10;
     endif
 
     if (strcmpi (get (h, "fill"), "on"))
       X = get (h, "xdata");
       Y = get (h, "ydata");
       Z = get (h, "zdata");
@@ -483,19 +501,19 @@ function update_data (h, d)
       set (h, "levellist", lev);
       z = get (h, "zdata");
       lvlstep = (max (z(:)) - min (z(:))) / 10;
       set (h, "levelstep", lvlstep);
     endif
 
     add_patch_children (h);
     update_text (h, d);
+    recursive = false;
   endif
 
-  recursive = false;
 endfunction
 
 function update_text (h, d)
   persistent recursive = false;
 
   if (!recursive)
     recursive = true;
 
