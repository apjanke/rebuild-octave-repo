# HG changeset patch
# User Rik <rik@octave.org>
# Date 1450932302 28800
#      Wed Dec 23 20:45:02 2015 -0800
# Node ID 7af34656efed325d07001b67b629de1b409041a0
# Parent  33793796aa6e8f4bf331e7d6a7ff04f9a10de0a4
maint: utils.cc: Clean up code.

* utils.cc: Break comment lines at sensible points, rather than just 80 characters.
* utils.cc (Ffile_in_loadpath, Ffile_in_path): Delete retval variable and
directly return results.  Use empty() rather than 'numel() == 0'.
* utils.cc (oct_file_in_path): use string function find() rather than looking
for each character in ".oct".
* utils.cc (mex_file_in_path): use string function find() rather than looking
for each character in ".mex".
* utils.cc (undo_string_escape): Change declaration of static one character
string to ensure that closing '\0' is only assigned once.
* utils.cc (Fis_rooted_relative_filename): Delete unused retval variable.
* utils.cc (do_simple_cellfun): Don't declare and initialize multiple variables
on one line.

diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -234,18 +234,18 @@ keyword_almost_match (const char * const
 done:
 
   delete [] kw;
   delete [] to_match;
 
   return status;
 }
 
-// Return nonzero if either NR or NC is zero.  Return -1 if this
-// should be considered fatal; return 1 if this is ok.
+// Return nonzero if either NR or NC is zero.
+// Return -1 if this should be considered fatal; return 1 if this is ok.
 
 int
 empty_arg (const char * /* name */, octave_idx_type nr, octave_idx_type nc)
 {
   return (nr == 0 || nc == 0);
 }
 
 // See if the given file is in the path.
@@ -310,34 +310,30 @@ If no files are found, return an empty c
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   string_vector names = args(0).xall_strings ("file_in_loadpath: FILE argument must be a string");
 
-  octave_value retval;
-
-  if (names.numel () == 0)
+  if (names.empty ())
     error ("file_in_loadpath: FILE argument must not be empty");
 
   if (nargin == 1)
-    retval = octave_env::make_absolute (load_path::find_first_of (names));
+    return ovl (octave_env::make_absolute (load_path::find_first_of (names)));
   else
     {
       std::string opt = args(1).xstring_value ("file_in_loadpath: optional second argument must be a string");
 
       if (opt != "all")
         error ("file_in_loadpath: \"all\" is only valid second argument");
 
-      retval = Cell (make_absolute (load_path::find_all_first_of (names)));
+      return ovl (Cell (make_absolute (load_path::find_all_first_of (names))));
     }
-
-  return retval;
 }
 
 /*
 %!test
 %! f = file_in_loadpath ("plot.m");
 %! assert (ischar (f));
 %! assert (! isempty (f));
 
@@ -385,34 +381,30 @@ If no files are found, return an empty c
 
   if (nargin < 2 || nargin > 3)
     print_usage ();
 
   std::string path = args(0).xstring_value ("file_in_path: PATH must be a string");
 
   string_vector names = args(1).xall_strings ("file_in_path: FILE argument must be a string");
 
-  octave_value retval;
-
-  if (names.numel () == 0)
+  if (names.empty ())
     error ("file_in_path: FILE argument must not be empty");
 
   if (nargin == 2)
-    retval = search_path_for_file (path, names);
+    return ovl (search_path_for_file (path, names));
   else
     {
       std::string opt = args(2).xstring_value ("file_in_path: optional third argument must be a string");
 
       if (opt != "all")
         error ("file_in_path: \"all\" is only valid third argument");
 
-      retval = Cell (make_absolute (search_path_for_all_files (path, names)));
+      return ovl (Cell (make_absolute (search_path_for_all_files (path, names))));
     }
-
-  return retval;
 }
 
 /*
 %!test
 %! f = file_in_path (path (), "plot.m");
 %! assert (ischar (f));
 %! assert (! isempty (f));
 
@@ -451,43 +443,41 @@ find_data_file_in_load_path  (const std:
   std::string fname = file;
 
   if (! (octave_env::absolute_pathname (fname)
          || octave_env::rooted_relative_pathname (fname)))
     {
       // Load path will also search "." first, but we don't want to
       // issue a warning if the file is found in the current directory,
       // so do an explicit check for that.
-
       file_stat fs (fname);
 
       bool local_file_ok
         = fs.exists () && (fs.is_reg () || ! require_regular_file);
 
       if (! local_file_ok)
         {
           // Not directly found; search load path.
-
           std::string tmp
             = octave_env::make_absolute (load_path::find_file (fname));
 
           if (! tmp.empty ())
             {
               gripe_data_file_in_path (fcn, tmp);
 
               fname = tmp;
             }
         }
     }
 
   return fname;
 }
 
-// See if there is an function file in the path.  If so, return the
-// full path to the file.
+// See if there is an function file in the path.
+// If so, return the full path to the file.
 
 std::string
 fcn_file_in_path (const std::string& name)
 {
   std::string retval;
 
   int len = name.length ();
 
@@ -512,17 +502,17 @@ fcn_file_in_path (const std::string& nam
           retval = load_path::find_fcn_file (fname);
         }
     }
 
   return retval;
 }
 
 // See if there is a directory called "name" in the path and if it
-// contains a Contents.m file return the full path to this file.
+// contains a Contents.m file.  If so, return the full path to this file.
 
 std::string
 contents_file_in_path (const std::string& dir)
 {
   std::string retval;
 
   if (dir.length () > 0)
     {
@@ -533,18 +523,18 @@ contents_file_in_path (const std::string
 
       if (fs.exists ())
         retval = octave_env::make_absolute (tcontents);
     }
 
   return retval;
 }
 
-// See if there is a .oct file in the path.  If so, return the
-// full path to the file.
+// See if there is a .oct file in the path.
+// If so, return the full path to the file.
 
 std::string
 oct_file_in_path (const std::string& name)
 {
   std::string retval;
 
   int len = name.length ();
 
@@ -552,28 +542,27 @@ oct_file_in_path (const std::string& nam
     {
       if (octave_env::absolute_pathname (name))
         {
           file_stat fs (name);
 
           if (fs.exists ())
             retval = name;
         }
-      else if (len > 4 && name[len - 4] == '.' && name[len - 3] == 'o'
-               && name[len - 2] == 'c' && name[len - 1] == 't')
+      else if (len > 4 && name.find (".oct", len-5))
         retval = load_path::find_oct_file (name.substr (0, len-4));
       else
         retval = load_path::find_oct_file (name);
     }
 
   return retval;
 }
 
-// See if there is a .mex file in the path.  If so, return the
-// full path to the file.
+// See if there is a .mex file in the path.
+// If so, return the full path to the file.
 
 std::string
 mex_file_in_path (const std::string& name)
 {
   std::string retval;
 
   int len = name.length ();
 
@@ -581,18 +570,17 @@ mex_file_in_path (const std::string& nam
     {
       if (octave_env::absolute_pathname (name))
         {
           file_stat fs (name);
 
           if (fs.exists ())
             retval = name;
         }
-      else if (len > 4 && name[len - 4] == '.' && name[len - 3] == 'm'
-               && name[len - 2] == 'e' && name[len - 1] == 'x')
+      else if (len > 4 && name.find (".mex", len-5))
         retval = load_path::find_mex_file (name.substr (0, len-4));
       else
         retval = load_path::find_mex_file (name);
     }
 
   return retval;
 }
 
@@ -710,19 +698,17 @@ do_string_escapes (const std::string& s)
             default:
               warning ("unrecognized escape sequence '\\%c' --\
  converting to '%c'", s[j], s[j]);
               retval[i] = s[j];
               break;
             }
         }
       else
-        {
-          retval[i] = s[j];
-        }
+        retval[i] = s[j];
 
       i++;
       j++;
     }
 
   retval.resize (i);
 
   return retval;
@@ -819,19 +805,19 @@ undo_string_escape (char c)
     case '\\': // backslash
       return "\\\\";
 
     case '"': // double quote
       return "\\\"";
 
     default:
       {
-        static char retval[2];
+        static char retval[2] = "\0";
+
         retval[0] = c;
-        retval[1] = '\0';
         return retval;
       }
     }
 }
 
 std::string
 undo_string_escapes (const std::string& s)
 {
@@ -927,18 +913,16 @@ Return true if @var{file} is an absolute
 
 DEFUN (is_rooted_relative_filename, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} is_rooted_relative_filename (@var{file})\n\
 Return true if @var{file} is a rooted-relative filename.\n\
 @seealso{is_absolute_filename, make_absolute_filename, isdir}\n\
 @end deftypefn")
 {
-  octave_value retval = false;
-
   if (args.length () != 1)
     print_usage ();
 
   return ovl (args(0).is_string ()
               && octave_env::rooted_relative_pathname (args(0).string_value ()));
 }
 
 /*
@@ -1411,17 +1395,18 @@ character @nospell{\"@xbackslashchar{}0\
 %!error isindex (1:3, 2, 3)
 */
 
 octave_value_list
 do_simple_cellfun (octave_value_list (*fun) (const octave_value_list&, int),
                    const char *fun_name, const octave_value_list& args,
                    int nargout)
 {
-  octave_value_list new_args = args, retval;
+  octave_value_list new_args = args;
+  octave_value_list retval;
   int nargin = args.length ();
   OCTAVE_LOCAL_BUFFER (bool, iscell, nargin);
   OCTAVE_LOCAL_BUFFER (Cell, cells, nargin);
   OCTAVE_LOCAL_BUFFER (Cell, rcells, nargout);
 
   const Cell *ccells = cells;
 
   octave_idx_type numel = 1;
@@ -1478,17 +1463,19 @@ do_simple_cellfun (octave_value_list (*f
   return retval;
 }
 
 octave_value
 do_simple_cellfun (octave_value_list (*fun) (const octave_value_list&, int),
                    const char *fun_name, const octave_value_list& args)
 {
   octave_value retval;
+
   const octave_value_list tmp = do_simple_cellfun (fun, fun_name, args, 1);
+
   if (tmp.length () > 0)
     retval = tmp(0);
 
   return retval;
 }
 
 DEFUN (isstudent, args, ,
        "-*- texinfo -*-\n\
