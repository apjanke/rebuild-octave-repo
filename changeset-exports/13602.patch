# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1313393132 -7200
#      Mon Aug 15 09:25:32 2011 +0200
# Node ID cfd231a4286ac61174ed2d06e1dab1abf6885784
# Parent  26956bb3c927a09ccbbbaeb82eec5477fff39afb
Fixed bug with server message. Parameters were not recognized correctly.

diff --git a/gui/src/qirc/IRCClientImpl.cpp b/gui/src/qirc/IRCClientImpl.cpp
--- a/gui/src/qirc/IRCClientImpl.cpp
+++ b/gui/src/qirc/IRCClientImpl.cpp
@@ -83,27 +83,33 @@ IRCServerMessage::IRCServerMessage (cons
   while (position < serverMessage.size ())
     {
       if (buffer.isEmpty () && !readUntilEnd && (serverMessage.at (position) == ':'))
         {
           readUntilEnd = true;
         }
       else
         {
-
           if (readUntilEnd)
             {
               buffer.append (serverMessage.at (position));
             }
           else
             {
-              if (serverMessage.at (position) == ' ')
+              if (serverMessage.at (position).isSpace ())
                 {
-                  m_parameters.append (buffer);
-                  buffer.clear ();
+                  if (!buffer.isEmpty ())
+                    {
+                      m_parameters.append (buffer);
+                      buffer.clear ();
+                    }
+                }
+              else
+                {
+                  buffer.append (serverMessage.at (position));
                 }
             }
         }
       position++;
     }
 
   if (!buffer.isEmpty ())
     m_parameters.append (buffer);
@@ -319,17 +325,17 @@ void
 IRCClientImpl::handleUserQuit (const QString &nick, const QString &reason)
 {
   emit userQuit (nick, reason);
 }
 
 void
 IRCClientImpl::handleIncomingLine (const QString &line)
 {
-  emit debugMessage (QString (">>>recv: \"%1\"").arg (line));
+  //emit debugMessage (QString (">>>recv: \"%1\"").arg (line));
   if (m_connected && !line.isEmpty())
     {
       IRCServerMessage ircServerMessage(line);
       if (ircServerMessage.isNumeric () == true)
         {
           switch (ircServerMessage.numericValue ())
             {
               case IRCReply::Welcome:
@@ -350,28 +356,28 @@ IRCClientImpl::handleIncomingLine (const
                 // Change the nick so that we can at least log in.
                 else
                   {
                     m_nickname += "_";
                     sendNicknameChangeRequest (m_nickname);
                   }
                 break;
               case IRCError::PasswordMismatch:
-                emit debugMessage ("FIXME: Received password mismatch reply.");
+                emit error ("The password you provided is not correct.");
                 break;
               case IRCReply::MessageOfTheDayStart:
               case IRCReply::MessageOfTheDay:
               case IRCReply::MessageOfTheDayEnd:
               case IRCError::NoMessageOfTheDay:
                 break;
               case IRCReply::NoTopic:
               case IRCReply::Topic:
                 break;
               case IRCReply::NameReply:
-                emit debugMessage (QString ("LINKME: (NameReply) \'%1\'").arg (ircServerMessage.parameter (3)));
+                emit debugMessage (QString ("LINKME: (NameReply) \'%1\'").arg (ircServerMessage.parameter(2)));
                 //m_nickList = event->getParam (3).split (QRegExp ("\\s+"), QString::SkipEmptyParts);
                 break;
             }
         }
       else
         {
           QString command = ircServerMessage.command ();
           if (command == IRCCommand::Nick)
@@ -443,17 +449,17 @@ IRCClientImpl::handleIncomingLine (const
             }
         }
     }
 }
 
 void
 IRCClientImpl::sendLine (const QString &line)
 {
-  emit debugMessage (QString (">>>send: \"%1\"").arg (line));
+  //emit debugMessage (QString (">>>send: \"%1\"").arg (line));
   if (m_connected)
     m_tcpSocket.write ((line + "\r\n").toStdString ().c_str ());
 }
 
 void
 IRCClientImpl::sendIRCCommand (const QString &command, const QStringList &arguments)
 {
   QString line = command;
