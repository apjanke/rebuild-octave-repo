# HG changeset patch
# User jwe
# Date 1034195187 0
#      Wed Oct 09 20:26:27 2002 +0000
# Node ID 596f88296519dcaedbd8e7a545924a34b908f39a
# Parent  66d7394f5822c899084e395202f8481782ac4162
[project @ 2002-10-09 20:26:27 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,28 @@
+2002-10-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-env.h (octave_env::current_directory): Now mutable.
+	(octave_env:do_getcwd): Now const.
+
+	* file-ops.h, file-ops.cc (file_ops::is_dir_sep): New function.
+	(OCTAVE_DIR_SEP_CHAR, OCTAVE_DIR_SEP_STR, OCTAVE_DIR_SEP_CHARS,
+	OCTAVE_CURRENT_DIR_STR): New macros.
+	* oct-env.cc (is_dir_sep): Delete.
+	(octave_env::do_base_pathname): Look for OCTAVE_DIR_SEP_CHARS, not '/'.
+	(octave_env::do_set_program_name): Likewise.
+	(octave_env::do_polite_directory_format): Use file_ops::is_dir_sep
+	instead of checking for '/'.
+	(octave_env::pathname_backup): Likewise.
+	(octave_env::do_absolute_pathname): Likewise.
+	(octave_env::do_make_absolute): Likewise.
+	If dot_path is empty, use getcwd to set current_dir.
+	(octave_env::do_get_home_directory): Use OCTAVE_DIR_SEP_STR
+	instead of "/".
+
 2002-10-07  Paul Kienzle <pkienzle@users.sf.net>
 
 	* lo-cutils.c: On non-Posix Windows systems, include winsock.h.
 
 2002-10-07  Paul Kienzle <pkienzle@users.sf.net>
 
 	* oct-env.cc (octave_env::do_absolute_pathname): Recognize
 	absolute path names under MinGW as well.
diff --git a/liboctave/file-ops.cc b/liboctave/file-ops.cc
--- a/liboctave/file-ops.cc
+++ b/liboctave/file-ops.cc
@@ -615,13 +615,23 @@ file_ops::unlink (const std::string& nam
     }
 #else
   msg = NOT_SUPPORTED ("unlink");
 #endif
 
   return status;
 }
 
+bool
+file_ops::is_dir_sep (char c)
+{
+#if defined (__WIN32__)
+  return (c == '/' || c == '\\');
+#else
+  return (c == '/');
+#endif
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/file-ops.h b/liboctave/file-ops.h
--- a/liboctave/file-ops.h
+++ b/liboctave/file-ops.h
@@ -71,17 +71,27 @@ file_ops
 
   static std::string tilde_expand (const std::string&);
   static string_vector tilde_expand (const string_vector&);
 
   static int umask (mode_t);
 
   static int unlink (const std::string&);
   static int unlink (const std::string&, std::string&);
+
+  static bool is_dir_sep (char);
 };
 
+#define OCTAVE_DIR_SEP_CHAR '/'
+#define OCTAVE_DIR_SEP_STR "/"
+#if defined (__WIN32__)
+#define OCTAVE_DIR_SEP_CHARS "/\\"
+#else
+#define OCTAVE_DIR_SEP_CHARS OCTAVE_DIR_SEP_STR
+#endif
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/oct-env.cc b/liboctave/oct-env.cc
--- a/liboctave/oct-env.cc
+++ b/liboctave/oct-env.cc
@@ -47,16 +47,17 @@ Free Software Foundation, Inc.
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
+#include "file-ops.h"
 #include "lo-error.h"
 #include "lo-sysdep.h"
 #include "lo-utils.h"
 #include "oct-env.h"
 #include "oct-passwd.h"
 #include "oct-syscalls.h"
 
 octave_env::octave_env (void)
@@ -195,17 +196,17 @@ octave_env::chdir (const std::string& ne
     ? instance->do_chdir (newdir) : false;
 }
 
 void
 octave_env::do_set_program_name (const std::string& s) const
 {
   program_invocation_name = s;
 
-  size_t pos = program_invocation_name.rfind ('/');
+  size_t pos = program_invocation_name.find_last_of (OCTAVE_DIR_SEP_CHARS);
 
   program_name = (pos == NPOS)
     ? program_invocation_name : program_invocation_name.substr (pos+1);
 }
 
 // Return a pretty pathname.  If the first part of the pathname is the
 // same as $HOME, then replace that with `~'.
 
@@ -214,149 +215,146 @@ octave_env::do_polite_directory_format (
 {
   std::string retval;
 
   std::string home_dir = do_get_home_directory ();
 
   size_t len = home_dir.length ();
 
   if (len > 1 && home_dir == name.substr (0, len)
-      && (name.length () == len || name[len] == '/'))
+      && (name.length () == len || file_ops::is_dir_sep (name[len])))
     {
       retval = "~";
       retval.append (name.substr (len));
     }
   else
     retval = name;
 
   return retval;
 }
 
-static inline bool
-is_dir_sep (char c)
-{
-#if defined (__CYGWIN__)
-  return (c == '/' || c == '\\');
-#else
-  return (c == '/');
-#endif
-}
-
 bool
 octave_env::do_absolute_pathname (const std::string& s) const
 {
   size_t len = s.length ();
 
   if (len == 0)
     return false;
 
-  if (s[0] == '/')
+#if defined (__CYGWIN__) || ! defined (__WIN32__)
+  if (file_ops::is_dir_sep (s[0]))
     return true;
+#endif
 
 #if defined (__WIN32__)
   if ((len == 2 && isalpha (s[0]) && s[1] == ':')
-      || (len > 2 && isalpha (s[0]) && s[1] == ':' && is_dir_sep (s[2])))
+      || (len > 2 && isalpha (s[0]) && s[1] == ':'
+	  && file_ops::is_dir_sep (s[2])))
     return true;
 #endif
 
   return false;
 }
 
 // Return the `basename' of the pathname in STRING (the stuff after
-// the last '/').  If STRING is not a full pathname, simply return it.
+// the last directory separator).  If STRING is not a full pathname,
+// simply return it.
 
 std::string
 octave_env::do_base_pathname (const std::string& s) const
 {
   if (! do_absolute_pathname (s))
     return s;
 
-  size_t pos = s.rfind ('/');
+  size_t pos = s.find_last_of (OCTAVE_DIR_SEP_CHARS);
 
   if (pos == NPOS)
     return s;
   else
     return s.substr (pos+1);
 }
 
 // Turn STRING (a pathname) into an absolute pathname, assuming that
-// DOT_PATH contains the symbolic location of '.'.
+// DOT_PATH contains the symbolic location of the current directory.
 
 std::string
 octave_env::do_make_absolute (const std::string& s,
 			      const std::string& dot_path) const
 {
 #if defined (__EMX__)
   if (s.length () > 1 && s[1] == ':')
     return s;
 #endif
 
   if (dot_path.empty () || s.empty () || do_absolute_pathname (s))
     return s;
 
-  std::string current_path = dot_path;
+  std::string current_dir = dot_path;
 
-  if (current_path.empty ())
-    current_path = "./";
+  if (current_dir.empty ())
+    current_dir = do_getcwd ();
 
-  size_t pos = current_path.length () - 1;
+  size_t pos = current_dir.length () - 1;
 
-  if (current_path[pos] != '/')
-    current_path.append ("/");
+  if (! file_ops::is_dir_sep (current_dir[pos]))
+    current_dir.append (OCTAVE_DIR_SEP_STR);
+
+  // XXX FIXME XXX -- this is probably not correct for all systems.
 
   size_t i = 0;
   size_t slen = s.length ();
 
   while (i < slen)
     {
       if (s[i] == '.')
 	{
 	  if (i + 1 == slen)
-	    return current_path;
+	    return current_dir;
 
-	  if (s[i+1] == '/')
+	  if (file_ops::is_dir_sep (s[i+1]))
 	    {
 	      i += 2;
 	      continue;
 	    }
 
-	  if (s[i+1] == '.' && (i + 2 == slen || s[i+2] == '/'))
+	  if (s[i+1] == '.'
+	      && (i + 2 == slen || file_ops::is_dir_sep (s[i+2])))
 	    {
 	      i += 2;
 
 	      if (i != slen)
 		i++;
 
-	      pathname_backup (current_path, 1);
+	      pathname_backup (current_dir, 1);
 
 	      continue;
 	    }
 	}
 
-      size_t tmp = s.find ('/', i);
+      size_t tmp = s.find_first_of (OCTAVE_DIR_SEP_CHARS, i);
 
       if (tmp == NPOS)
 	{
-	  current_path.append (s, i, tmp-i);
+	  current_dir.append (s, i, tmp-i);
 	  break;
 	}
       else
 	{
-	  current_path.append (s, i, tmp-i+1);
+	  current_dir.append (s, i, tmp-i+1);
 	  i = tmp + 1;
 	}
     }
 
-  return current_path;
+  return current_dir;
 }
 
-// Return a consed string which is the current working directory.
+// Return a string which is the current working directory.
 
 std::string
-octave_env::do_getcwd ()
+octave_env::do_getcwd () const
 {
   if (! follow_symbolic_links)
     current_directory = "";
 
   if (verbatim_pwd || current_directory.empty ())
     current_directory = ::octave_getcwd ();
 
   return current_directory;
@@ -369,17 +367,17 @@ std::string
 octave_env::do_get_home_directory (void) const
 {
   std::string hd = do_getenv ("HOME");
 
   if (hd.empty ())
     {
       octave_passwd pw = octave_passwd::getpwuid (octave_syscalls::getuid ());
 
-      hd = pw ? pw.dir () : std::string ("/");
+      hd = pw ? pw.dir () : std::string (OCTAVE_DIR_SEP_STR);
     }
 
   return hd;
 }
 
 std::string
 octave_env::do_get_user_name (void) const
 {
@@ -437,23 +435,23 @@ octave_env::do_chdir (const std::string&
       if (current_directory.empty ())
 	do_getcwd ();
 
       if (current_directory.empty ())
 	tmp = newdir;
       else
 	tmp = do_make_absolute (newdir, current_directory);
 
-      // Get rid of trailing `/'.
+      // Get rid of trailing directory separator.
 
       size_t len = tmp.length ();
 
       if (len > 1)
 	{
-	  if (is_dir_sep (tmp[--len]))
+	  if (file_ops::is_dir_sep (tmp[--len]))
 	    tmp.resize (len);
 	}
 
       if (! ::octave_chdir (tmp))
 	{
 	  current_directory = tmp;
 	  retval = true;
 	}
@@ -471,20 +469,20 @@ octave_env::pathname_backup (std::string
 {
   if (path.empty ())
     return;
 
   size_t i = path.length () - 1;
 
   while (n--)
     {
-      while (path[i] == '/' && i > 0)
+      while (file_ops::is_dir_sep (path[i]) && i > 0)
 	i--;
 
-      while (path[i] != '/' && i > 0)
+      while (! file_ops::is_dir_sep (path[i]) && i > 0)
 	i--;
 
       i++;
     }
 
   path.resize (i);
 }
 
diff --git a/liboctave/oct-env.h b/liboctave/oct-env.h
--- a/liboctave/oct-env.h
+++ b/liboctave/oct-env.h
@@ -35,17 +35,18 @@ protected:
 public:
 
   static std::string polite_directory_format (const std::string& name);
 
   static bool absolute_pathname (const std::string& s);
 
   static std::string base_pathname (const std::string& s);
 
-  static std::string make_absolute (const std::string& s, const std::string& dot_path);
+  static std::string make_absolute (const std::string& s,
+				    const std::string& dot_path);
 
   static std::string getcwd (void);
 
   static std::string get_home_directory (void);
 
   static std::string get_program_name (void);
 
   static std::string get_program_invocation_name (void);
@@ -67,19 +68,20 @@ private:
   static bool instance_ok (void);
 
   std::string do_polite_directory_format (const std::string& name) const;
 
   bool do_absolute_pathname (const std::string& s) const;
 
   std::string do_base_pathname (const std::string& s) const;
 
-  std::string do_make_absolute (const std::string& s, const std::string& dot_path) const;
+  std::string do_make_absolute (const std::string& s,
+				const std::string& dot_path) const;
 
-  std::string do_getcwd (void);
+  std::string do_getcwd (void) const;
 
   std::string do_get_home_directory (void) const;
 
   std::string do_get_user_name (void) const;
 
   std::string do_get_host_name (void) const;
 
   std::string do_getenv (const std::string& name) const;
@@ -109,17 +111,17 @@ private:
   // as if they are real directories.
   bool follow_symbolic_links;
 
   // TRUE means that pwd always give verbatim directory, regardless
   // of symbolic link following.
   bool verbatim_pwd;
 
   // Where are we?
-  std::string current_directory;
+  mutable std::string current_directory;
 
   // Etc.
   mutable std::string program_name;
 
   mutable std::string program_invocation_name;
 
   mutable std::string user_name;
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2002-10-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* octave.cc (execute_startup_files): 
+	Use octave_env::getcwd instead of "./".
+	Use OCTAVE_DIR_SEP_STR instead of "/".
+	(initialize_pathsearch): Use OCTAVE_DIR_SEP_STR instead of /.
+	(main): Look for OCTAVE_DIR_SEP_CHARS, not '/'.
+
 2002-10-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (gendoc): Use $(BUILD_CXX), not $(CXX).
 
 2002-10-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* utils.cc (octave_sleep): Cast result of modf to unsigned int.
 
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -38,16 +38,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
 #include "cmd-edit.h"
 #include "f77-fcn.h"
+#include "file-ops.h"
 #include "file-stat.h"
 #include "lo-error.h"
 #include "oct-env.h"
 #include "pathsearch.h"
 #include "str-vec.h"
 
 #include <defaults.h>
 #include "Cell.h"
@@ -185,17 +186,18 @@ initialize_pathsearch (void)
   std::string odb = octave_env::getenv ("OCTAVE_DB_PATH");
 
   // For backward compatibility.
 
   if (odb.empty ())
     odb = octave_env::getenv ("OCTAVE_DB_DIR");
 
   if (odb.empty ())
-    odb = Vdata_dir + std::string ("/octave:") + Vlibexec_dir + std::string ("/octave");
+    odb = Vdata_dir + OCTAVE_DIR_SEP_STR + "octave:"
+      + Vlibexec_dir + OCTAVE_DIR_SEP_STR + "octave";
 
   octave_original_texmfdbs = octave_env::getenv ("TEXMFDBS");
 
   octave_env::putenv ("TEXMFDBS", odb);
 }
 
 // Initialize by reading startup files.
 
@@ -235,18 +237,18 @@ execute_startup_files (void)
 
       std::string initfile = octave_env::getenv ("OCTAVE_INITFILE");
 
       if (initfile.empty ())
 	initfile = ".octaverc";
 
       std::string home_dir = octave_env::get_home_directory ();
 
-      std::string home_rc = home_dir + "/" + initfile;
-      std::string local_rc = std::string ("./") + initfile;
+      std::string home_rc = home_dir + OCTAVE_DIR_SEP_STR + initfile;
+      std::string local_rc = octave_env::getcwd () + initfile;
 
       if (! home_dir.empty ())
 	{
 	  parse_and_execute (home_rc, verbose);
 
 	  // Names alone are not enough.
 
 	  file_stat fs_home_rc (home_rc);
@@ -531,17 +533,17 @@ main (int argc, char **argv)
 
       if (infile)
 	{
 	  input_from_command_line_file = true;
 
 	  bind_builtin_variable ("program_invocation_name",
 				 curr_fcn_file_name);
 
-	  size_t pos = curr_fcn_file_name.rfind ('/');
+	  size_t pos = curr_fcn_file_name.find_last_of (OCTAVE_DIR_SEP_CHARS);
 
 	  std::string tmp = (pos != NPOS)
 	    ? curr_fcn_file_name.substr (pos+1) : curr_fcn_file_name;
 
 	  bind_builtin_variable ("program_name", tmp);
 
 	  intern_argv (remaining_args, argv+last_arg_idx);
 
