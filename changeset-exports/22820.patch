# HG changeset patch
# User Rik <rik@octave.org>
# Date 1479938456 28800
#      Wed Nov 23 14:00:56 2016 -0800
# Node ID c97b26662858173e6760fbbe56ae08ce7c550c20
# Parent  3dd91233bf078ad8310bd15a305e3d931734bc9c
Add Octave-only query mode for diary command to find status.

* pager.cc (Fdiary): Update docstring with calling form showing status output.
Describe outputs STATUS and DIARYFILE in docstring.  In code, check if nargout is
greater than 0, and return whether recording is on/off and the name of the diary
file used for recording.
* pager.cc (F__diaryfile__, F_diarystate__): Delete internal functions that were
part of an old attempt to provide the same information.

diff --git a/libinterp/corefcn/pager.cc b/libinterp/corefcn/pager.cc
--- a/libinterp/corefcn/pager.cc
+++ b/libinterp/corefcn/pager.cc
@@ -503,51 +503,67 @@ open_diary_file (void)
   octave_pager_stream::set_diary_skip ();
 
   external_diary_file.open (diary_file.c_str (), std::ios::app);
 
   if (! external_diary_file)
     error ("diary: can't open diary file '%s'", diary_file.c_str ());
 }
 
-DEFUN (diary, args, ,
+DEFUN (diary, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} diary
 @deftypefnx {} {} diary on
 @deftypefnx {} {} diary off
 @deftypefnx {} {} diary @var{filename}
+@deftypefnx {} {[@var{status}, @var{diaryfile}] =} diary
 Record a list of all commands @emph{and} the output they produce, mixed
 together just as they appear on the terminal.
 
 Valid options are:
 
 @table @asis
 @item on
-Start recording a session in a file called @file{diary} in the
-current working directory.
+Start recording a session in a file called @file{diary} in the current working
+directory.
 
 @item off
 Stop recording the session in the diary file.
 
 @item @var{filename}
 Record the session in the file named @var{filename}.
 @end table
 
-With no arguments, @code{diary} toggles the current diary state.
+With no input or output arguments, @code{diary} toggles the current diary
+state.
+
+If output arguments are requested, @code{diary} ignores inputs and returns
+the current status.  The boolean @var{status} indicates whether recording is on
+or off, and @var{diaryfile} is the name of the file where the session is
+stored.  
 @seealso{history, evalc}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin > 1)
     print_usage ();
 
   if (diary_file.empty ())
     diary_file = "diary";
 
+  if (nargout > 0)
+    {
+      // Querying diary variables
+      if (nargout == 1)
+        return ovl (write_to_diary_file);
+      else
+        return ovl (write_to_diary_file, diary_file);
+    }
+
   if (nargin == 0)
     {
       write_to_diary_file = ! write_to_diary_file;
       open_diary_file ();
     }
   else
     {
       std::string arg = args(0).xstring_value ("diary: argument must be a string");
@@ -568,34 +584,16 @@ With no arguments, @code{diary} toggles 
           write_to_diary_file = true;
           open_diary_file ();
         }
     }
 
   return ovl ();
 }
 
-DEFUN (__diaryfile__, , ,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {@var{fname} =} __diaryfile__ ()
-Undocumented internal function
-@end deftypefn */)
-{
-  return ovl (diary_file);
-}
-
-DEFUN (__diarystate__, , ,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {@var{state} =} __diarystate__ ()
-Undocumented internal function
-@end deftypefn */)
-{
-  return ovl (write_to_diary_file);
-}
-
 DEFUN (more, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} more
 @deftypefnx {} {} more on
 @deftypefnx {} {} more off
 Turn output pagination on or off.
 
 Without an argument, @code{more} toggles the current state.
