# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1265631729 -3600
#      Mon Feb 08 13:22:09 2010 +0100
# Node ID 19f2107d1fddaf606219ae6bd18d99e671d8c30e
# Parent  db613bccd9922423bff5e787d7048ffb0ce9e3aa
document accumarray complexity

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-02-08  Jaroslav Hajek  <highegg@gmail.com>
+
+	* general/accumarray.m: Document complexity.
+
 2010-02-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* general/accumarray.m: Add new test that also forces index cache
 	generation for faster sorting.
 
 2010-02-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* general/accumarray.m: 1 more small fix.
diff --git a/scripts/general/accumarray.m b/scripts/general/accumarray.m
--- a/scripts/general/accumarray.m
+++ b/scripts/general/accumarray.m
@@ -47,16 +47,24 @@
 ##
 ## @example
 ## @group
 ## accumarray ([1,1,1;2,1,2;2,3,2;2,1,2;2,3,2], 101:105)
 ## @result{} ans(:,:,1) = [101, 0, 0; 0, 0, 0]
 ##    ans(:,:,2) = [0, 0, 0; 206, 0, 208]
 ## @end group
 ## @end example
+##
+## The complexity in the non-sparse case is generally O(M+N), where N is the number of
+## subscripts and M is the maximum subscript (linearized in multidimensional case).
+## If @var{func} is one of @code{@@sum} (default), @code{@@max}, @code{@@min}
+## or @code{@@(x) @{x@}}, an optimized code path is used. 
+## Note that for general reduction function the interpreter overhead can play a
+## major part and it may be more efficient to do multiple accumarray calls and
+## compute the results in a vectorized manner.
 ## @end deftypefn
 
 function A = accumarray (subs, val, sz = [], func = [], fillval = [], isspar = [])  
 
   if (nargin < 2 || nargin > 6)
     print_usage ();
   endif
 
