# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1497661816 14400
#      Fri Jun 16 21:10:16 2017 -0400
# Node ID 0954bf188bedf39a2f77c30220ef68fd57a20a5b
# Parent  8a47d4735655919078b6514010d7e68cbd072422
avoid memory leak in source_file function

* oct-parse.in.yy (source_file): Ensure that code returned from
parse_fcn_file is deleted.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4751,17 +4751,18 @@ namespace octave
     // and called with
     //
     //   source ("foo1.m")
     //
     // (for example).
 
     static std::map<std::string, int> source_call_depth;
 
-    std::string file_full_name = octave::sys::file_ops::tilde_expand (file_name);
+    std::string file_full_name
+      = octave::sys::file_ops::tilde_expand (file_name);
 
     file_full_name = octave::sys::env::make_absolute (file_full_name);
 
     octave::unwind_protect frame;
 
     if (source_call_depth.find (file_full_name) == source_call_depth.end ())
       source_call_depth[file_full_name] = -1;
 
@@ -4782,89 +4783,89 @@ namespace octave
           cs.goto_base_frame ();
         else
           error ("source: context must be \"caller\" or \"base\"");
 
         frame.add_method (cs, &octave::call_stack::pop);
       }
 
     octave_function *fcn = 0;
-    // Don't delete a function already in symbol_table
-    bool delete_fcn = false;
 
     // Find symbol name that would be in symbol_table, if it were loaded.
-    size_t dir_end = file_name.find_last_of (octave::sys::file_ops::dir_sep_chars ());
+    size_t dir_end
+      = file_name.find_last_of (octave::sys::file_ops::dir_sep_chars ());
     dir_end = (dir_end == std::string::npos) ? 0 : dir_end + 1;
 
     size_t extension = file_name.find_last_of ('.');
     if (extension == std::string::npos)
       extension = file_name.length ();
 
     std::string symbol = file_name.substr (dir_end, extension - dir_end);
     std::string full_name = octave::sys::canonicalize_file_name (file_name);
 
     // Check if this file is already loaded (or in the path)
     symbol_table& symtab = octave::__get_symbol_table__ ("source_file");
-    octave_value loaded_sym = symtab.find (symbol);
-    if (loaded_sym.is_function ())
+    octave_value ov_code = symtab.find (symbol);
+    if (ov_code.is_function ())
       {
-        fcn = loaded_sym.function_value ();
+        fcn = ov_code.function_value ();
+
         if (fcn)
           {
             if (octave::sys::canonicalize_file_name (fcn->fcn_file_name ())
                 != full_name)
               {
-                fcn = 0;             // wrong file, so load it below
-                delete_fcn = true;   // and delete it when done.
+                // wrong file, so load it below.
+                fcn = 0;
               }
           }
       }
 
-    // If no symbol of this name, or the symbol is for a different file, load
+    // If no symbol of this name, or the symbol is for a different
+    // file, load.
+
     if (! fcn)
       {
         try
           {
             fcn = parse_fcn_file (file_full_name, file_name, "", "",
                                   require_file, true, false, false, warn_for);
+
+            if (fcn)
+              {
+                // Ensure that FCN will be deleted.
+                ov_code = octave_value (fcn);
+              }
           }
         catch (octave::execution_exception& e)
           {
             error (e, "source: error sourcing file '%s'",
                    file_full_name.c_str ());
           }
       }
 
     // Return or error if we don't have a valid script
     if (! fcn)
       return;
 
     if (! fcn->is_user_code ())
-      {
-        if (delete_fcn)
-          delete fcn;
-        error ("source: %s is not a script", full_name.c_str ());
-      }
+      error ("source: %s is not a script", full_name.c_str ());
 
     if (verbose)
       {
         std::cout << "executing commands from " << full_name << " ... ";
         std::cout.flush ();
       }
 
     tree_evaluator& tw = __get_evaluator__ ("source");
 
     fcn->call (tw, 0);
 
     if (verbose)
       std::cout << "done." << std::endl;
-
-    // Delete scripts not on the path, so they don't shadow ones that are.
-    if (delete_fcn)
-      delete fcn;
   }
 }
 
 DEFMETHOD (mfilename, interp, args, ,
            doc: /* -*- texinfo -*-
 @deftypefn  {} {} mfilename ()
 @deftypefnx {} {} mfilename ("fullpath")
 @deftypefnx {} {} mfilename ("fullpathext")
