# HG changeset patch
# User jwe
# Date 797475886 0
#      Mon Apr 10 01:04:46 1995 +0000
# Node ID 7d7c3eaa1d3b46de900685df8bdbd365da26ef1b
# Parent  38b876e46ff6241dd50b2beb12f1e0e30019542a
[project @ 1995-04-10 01:04:13 by jwe]

diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -23,17 +23,17 @@ Software Foundation, 675 Mass Ave, Cambr
 // Parser for Octave.
 
 // C decarations.
 
 %{
 #define YYDEBUG 1
 
 #ifdef HAVE_CONFIG_H
-#include "config.h"
+#include <config.h>
 #endif
 
 #include <strstream.h>
 
 #include "SLStack.h"
 
 #include "Matrix.h"
 
@@ -146,17 +146,17 @@ static tree_expression *make_postfix_op
 	 (int op, tree_identifier *op1, token *tok_val);
 
 // Build a binary expression.
 static tree_expression *make_unary_op
 	 (int op, tree_expression *op1, token *tok_val);
 
 // Make an expression that handles assignment of multiple values.
 static tree_expression *make_multi_val_ret
-	 (tree_expression *rhs, int l = -1, int c = -1);
+	(tree_matrix *m, tree_expression *rhs, int l = -1, int c = -1);
 
 // Make an index expression.
 static tree_index_expression *make_index_expression
 	 (tree_indirect_ref *indir, tree_argument_list *args);
 
 #define ABORT_PARSE \
   do \
     { \
@@ -623,16 +623,28 @@ command		: plot_command
 		| FOR variable '=' expression optsep opt_list END
 		  {
 		    if (check_end ($7, token::for_end))
 		      ABORT_PARSE;
 		    looping--;
 		    $$ = new tree_for_command ($2, $4, $6,
 					       $1->line (), $1->column ());
 		  }
+		| FOR '[' screwed_again matrix_row SCREW_TWO '='
+		    expression optsep opt_list END
+		  {
+		    if (check_end ($10, token::for_end))
+		      ABORT_PARSE;
+		    looping--;
+		    tree_matrix *tmp = ml.pop ();
+		    tmp = tmp->reverse ();
+		    tree_return_list *id_list = tmp->to_return_list ();
+		    $$ = new tree_for_command (id_list, $7, $9,
+					       $1->line (), $1->column ()); 
+		  }
 		| BREAK
 		  {
 		    if (! (looping || defining_func))
 		      {
 			yyerror ("break: only meaningful within a loop\
  or function body");
 			ABORT_PARSE;
 		      }
@@ -717,18 +729,20 @@ expression	: variable '=' expression
 		| NUM '=' expression
 		  {
 		    yyerror ("invalid assignment to a number");
 		    $$ = 0;
 		    ABORT_PARSE;
 		  }
 		| '[' screwed_again matrix_row SCREW_TWO '=' expression
 		  {
-		    $$ = make_multi_val_ret ($6, $5->line (), $5->column ());
-
+		    tree_matrix *tmp = ml.pop ();
+		    tmp = tmp->reverse ();
+		    $$ = make_multi_val_ret (tmp, $6, $5->line (),
+					     $5->column ());
 		    if (! $$)
 		      ABORT_PARSE;
 		  }
 		| simple_expr
 		  { $$ = $1; }
 		;
 
 simple_expr	: simple_expr1
@@ -1547,32 +1561,28 @@ make_unary_op (int op, tree_expression *
   int c = tok_val->column ();
 
   return new tree_unary_expression (op1, t, l, c);
 }
 
 // Make an expression that handles assignment of multiple values.
 
 static tree_expression *
-make_multi_val_ret (tree_expression *rhs, int l, int c) 
+make_multi_val_ret (tree_matrix *m, tree_expression *rhs, int l, int c)
 {
 // Convert the matrix list to a list of identifiers.  If that fails,
 // we can abort here, without losing anything -- no other possible
 // syntax is valid if we've seen the equals sign as the next token
 // after the `]'. 
 
   tree_expression *retval = 0;
 
   maybe_screwed_again--;
 
-  tree_matrix *tmp = ml.pop ();
-
-  tmp = tmp->reverse ();
-
-  tree_return_list *id_list = tmp->to_return_list ();
+  tree_return_list *id_list = m->to_return_list ();
 
   if (id_list)
     {
       int list_len = id_list->length ();
 
       if (list_len == 1)
 	{
 	  tree_index_expression *lhs = id_list->remove_front ();
@@ -1580,17 +1590,18 @@ make_multi_val_ret (tree_expression *rhs
 							  0, 0, l, c);
 	  
 	}
       else if (list_len > 1)
 	{
 	  if (rhs->is_multi_val_ret_expression ())
 	    {
 	      tree_multi_val_ret *t = (tree_multi_val_ret *) rhs;
-	      retval = new tree_multi_assignment_expression (id_list, t, l, c);
+	      retval = new tree_multi_assignment_expression (id_list, t,
+							     0, l, c);
 	    }
 	  else
 	    yyerror ("RHS must be an expression that returns multiple values");
 	}
       else
 	panic_impossible ();
     }
   else
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -629,16 +629,30 @@ tree_matrix::print_code (ostream& os)
 
 tree_constant
 tree_multi_val_ret::eval (int print)
 {
   panic ("invalid evaluation of generic expression");
   return tree_constant ();
 }
 
+// Used internally.
+
+tree_constant
+tree_oct_obj::eval (int print)
+{
+  return values(0);
+}
+
+Octave_object
+tree_oct_obj::eval (int print, int nargout, const Octave_object& args)
+{
+  return values;
+}
+
 // A base class for objects that can be evaluated with argument lists.
 
 tree_constant
 tree_fvc::assign (tree_constant& t, const Octave_object& args)
 {
   panic_impossible ();
   return tree_constant ();
 }
@@ -1979,17 +1993,19 @@ tree_simple_assignment_expression::print
   if (in_parens)
     os << ")";
 }
 
 // Multi-valued assignmnt expressions.
 
 tree_multi_assignment_expression::~tree_multi_assignment_expression (void)
 {
-  delete lhs;
+  if (! preserve)
+    delete lhs;
+
   delete rhs;
 }
 
 tree_constant
 tree_multi_assignment_expression::eval (int print)
 {
   tree_constant retval;
 
diff --git a/src/pt-exp-base.h b/src/pt-exp-base.h
--- a/src/pt-exp-base.h
+++ b/src/pt-exp-base.h
@@ -200,16 +200,40 @@ public:
     { return 1; }
 
   tree_constant eval (int print);
 
   virtual Octave_object eval (int print, int nargout,
 			      const Octave_object& args) = 0;
 };
 
+// Used internally.
+
+class
+tree_oct_obj : public tree_multi_val_ret
+{
+public:
+  tree_oct_obj (int l = -1, int c = -1) : tree_multi_val_ret (l, c) { }
+
+  tree_oct_obj (const Octave_object& v, int l = -1, int c = -1)
+    : tree_multi_val_ret (l, c)
+      {
+	values = v;
+      }
+
+  tree_constant eval (int print);
+
+  Octave_object eval (int print, int nargout, const Octave_object& args);
+
+  void print_code (ostream& os) { }
+
+private:
+  Octave_object values;
+};
+
 // A base class for objects that can be evaluated with argument lists.
 
 class
 tree_fvc : public tree_multi_val_ret
 {
 public:
   tree_fvc (int l = -1, int c = -1) : tree_multi_val_ret (l, c) { }
 
@@ -671,30 +695,33 @@ private:
 };
 
 // Multi-valued assignment expressions.
 
 class
 tree_multi_assignment_expression : public tree_multi_val_ret
 {
  public:
-  tree_multi_assignment_expression (int l = -1, int c = -1)
+  tree_multi_assignment_expression (int plhs = 0, int l = -1, int c = -1)
     : tree_multi_val_ret (l, c)
       {
 	etype = tree_expression::multi_assignment;
+	preserve = plhs;
 	lhs = 0;
 	rhs = 0;
       }
 
   tree_multi_assignment_expression (tree_return_list *lst,
 				    tree_multi_val_ret *r,
+				    int plhs = 0,
 				    int l = -1, int c = -1)
     : tree_multi_val_ret (l, c)
       {
 	etype = tree_expression::multi_assignment;
+	preserve = plhs;
 	lhs = lst;
 	rhs = r;
       }
 
   ~tree_multi_assignment_expression (void);
 
   tree_constant eval (int print);
 
@@ -703,16 +730,17 @@ tree_multi_assignment_expression : publi
   int is_assignment_expression (void) const
     { return 1; }
 
   void eval_error (void);
 
   void print_code (ostream& os);
 
  private:
+  int preserve;
   tree_return_list *lhs;
   tree_multi_val_ret *rhs;
 };
 
 // Colon expressions.
 
 class
 tree_colon_expression : public tree_expression
