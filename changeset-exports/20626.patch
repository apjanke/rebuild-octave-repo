# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1444872682 14400
#      Wed Oct 14 21:31:22 2015 -0400
# Node ID 9fb8133288e8272089e4a13627f11990e632e5a3
# Parent  974b218e7292f42f77f118159995eec3608c96ef
chol: Support chol(a, "lower") for complex float types (bug #34850)

* fCmplxCHOL.cc, fCmplxCHOL.h (FloatComplexCHOL::init, chol2inv_internal):
Add is_upper parameter, propagate to underlying library functions.
* fCMatrix.cc (FloatComplexMatrix::inverse): Use new argument.
* chol.cc (Fchol): Likewise.

This adds float complex support that was omitted in cset 5ce959c55cc0.

diff --git a/libinterp/dldfcn/chol.cc b/libinterp/dldfcn/chol.cc
--- a/libinterp/dldfcn/chol.cc
+++ b/libinterp/dldfcn/chol.cc
@@ -266,28 +266,22 @@ sparse matrices.\n\
         }
       else if (arg.is_complex_type ())
         {
           FloatComplexMatrix m = arg.float_complex_matrix_value ();
 
           octave_idx_type info;
 
           FloatComplexCHOL fact;
-          if (LLt)
-            fact = FloatComplexCHOL (m.transpose (), info);
-          else
-            fact = FloatComplexCHOL (m, info);
+          fact = FloatComplexCHOL (m, info, LLt != true);
 
           if (nargout == 2 || info == 0)
             {
               retval(1) = info;
-              if (LLt)
-                retval(0) = get_chol_l (fact);
-              else
-                retval(0) = get_chol_r (fact);
+              retval(0) = get_chol (fact);
             }
           else
             error ("chol: input matrix must be positive definite");
         }
       else
         gripe_wrong_type_arg ("chol", arg);
     }
   else
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -1194,17 +1194,17 @@ FloatComplexMatrix::inverse (MatrixType 
     typ = mattype.type (*this);
 
   if (typ == MatrixType::Upper || typ == MatrixType::Lower)
     ret = tinverse (mattype, info, rcon, force, calc_cond);
   else
     {
       if (mattype.is_hermitian ())
         {
-          FloatComplexCHOL chol (*this, info, calc_cond);
+          FloatComplexCHOL chol (*this, info, true, calc_cond);
           if (info == 0)
             {
               if (calc_cond)
                 rcon = chol.rcond ();
               else
                 rcon = 1.0;
               ret = chol.inverse ();
             }
diff --git a/liboctave/numeric/fCmplxCHOL.cc b/liboctave/numeric/fCmplxCHOL.cc
--- a/liboctave/numeric/fCmplxCHOL.cc
+++ b/liboctave/numeric/fCmplxCHOL.cc
@@ -81,48 +81,63 @@ extern "C"
   F77_RET_T
   F77_FUNC (cchshx, CCHSHX) (const octave_idx_type&, FloatComplex*,
                              const octave_idx_type&, const octave_idx_type&,
                              const octave_idx_type&, FloatComplex*, float*);
 #endif
 }
 
 octave_idx_type
-FloatComplexCHOL::init (const FloatComplexMatrix& a, bool calc_cond)
+FloatComplexCHOL::init (const FloatComplexMatrix& a, bool upper, bool calc_cond)
 {
   octave_idx_type a_nr = a.rows ();
   octave_idx_type a_nc = a.cols ();
 
   if (a_nr != a_nc)
     {
       (*current_liboctave_error_handler)
         ("FloatComplexCHOL requires square matrix");
       return -1;
     }
 
   octave_idx_type n = a_nc;
   octave_idx_type info;
 
+  is_upper = upper;
+
   chol_mat.clear (n, n);
-  for (octave_idx_type j = 0; j < n; j++)
-    {
-      for (octave_idx_type i = 0; i <= j; i++)
-        chol_mat.xelem (i, j) = a(i, j);
-      for (octave_idx_type i = j+1; i < n; i++)
-        chol_mat.xelem (i, j) = 0.0f;
-    }
+  if (is_upper)
+    for (octave_idx_type j = 0; j < n; j++)
+      {
+        for (octave_idx_type i = 0; i <= j; i++)
+          chol_mat.xelem (i, j) = a(i, j);
+        for (octave_idx_type i = j+1; i < n; i++)
+          chol_mat.xelem (i, j) = 0.0f;
+      }
+  else
+    for (octave_idx_type j = 0; j < n; j++)
+      {
+        for (octave_idx_type i = 0; i < j; i++)
+          chol_mat.xelem (i, j) = 0.0f;
+        for (octave_idx_type i = j; i < n; i++)
+          chol_mat.xelem (i, j) = a(i, j);
+      }
   FloatComplex *h = chol_mat.fortran_vec ();
 
   // Calculate the norm of the matrix, for later use.
   float anorm = 0;
   if (calc_cond)
     anorm = xnorm (a, 1);
 
-  F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 ("U", 1), n, h, n, info
-                             F77_CHAR_ARG_LEN (1)));
+  if (is_upper)
+    F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 ("U", 1), n, h, n, info
+                               F77_CHAR_ARG_LEN (1)));
+  else
+    F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 ("L", 1), n, h, n, info
+                               F77_CHAR_ARG_LEN (1)));
 
   xrcond = 0.0;
   if (info > 0)
     chol_mat.resize (info - 1, info - 1);
   else if (calc_cond)
     {
       octave_idx_type cpocon_info = 0;
 
@@ -138,55 +153,65 @@ FloatComplexCHOL::init (const FloatCompl
       if (cpocon_info != 0)
         info = -1;
     }
 
   return info;
 }
 
 static FloatComplexMatrix
-chol2inv_internal (const FloatComplexMatrix& r)
+chol2inv_internal (const FloatComplexMatrix& r, bool is_upper = true)
 {
   FloatComplexMatrix retval;
 
   octave_idx_type r_nr = r.rows ();
   octave_idx_type r_nc = r.cols ();
 
   if (r_nr == r_nc)
     {
       octave_idx_type n = r_nc;
       octave_idx_type info;
 
       FloatComplexMatrix tmp = r;
 
-      F77_XFCN (cpotri, CPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
-                                 tmp.fortran_vec (), n, info
-                                 F77_CHAR_ARG_LEN (1)));
+      if (is_upper)
+        F77_XFCN (cpotri, CPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
+                                   tmp.fortran_vec (), n, info
+                                   F77_CHAR_ARG_LEN (1)));
+      else
+        F77_XFCN (cpotri, CPOTRI, (F77_CONST_CHAR_ARG2 ("L", 1), n,
+                                   tmp.fortran_vec (), n, info
+                                   F77_CHAR_ARG_LEN (1)));
 
       // If someone thinks of a more graceful way of doing this (or
       // faster for that matter :-)), please let me know!
 
       if (n > 1)
-        for (octave_idx_type j = 0; j < r_nc; j++)
-          for (octave_idx_type i = j+1; i < r_nr; i++)
-            tmp.xelem (i, j) = std::conj (tmp.xelem (j, i));
+        if (is_upper)
+          for (octave_idx_type j = 0; j < r_nc; j++)
+            for (octave_idx_type i = j+1; i < r_nr; i++)
+              tmp.xelem (i, j) = tmp.xelem (j, i);
+        else
+          for (octave_idx_type j = 0; j < r_nc; j++)
+            for (octave_idx_type i = j+1; i < r_nr; i++)
+              tmp.xelem (j, i) = tmp.xelem (i, j);
 
       retval = tmp;
     }
   else
     (*current_liboctave_error_handler) ("chol2inv requires square matrix");
 
   return retval;
 }
 
 // Compute the inverse of a matrix using the Cholesky factorization.
 FloatComplexMatrix
 FloatComplexCHOL::inverse (void) const
 {
-  return chol2inv_internal (chol_mat);
+  return chol2inv_internal (chol_mat, is_upper);
 }
 
 void
 FloatComplexCHOL::set (const FloatComplexMatrix& R)
 {
   if (R.is_square ())
     chol_mat = R;
   else
diff --git a/liboctave/numeric/fCmplxCHOL.h b/liboctave/numeric/fCmplxCHOL.h
--- a/liboctave/numeric/fCmplxCHOL.h
+++ b/liboctave/numeric/fCmplxCHOL.h
@@ -32,27 +32,28 @@ along with Octave; see the file COPYING.
 class
 OCTAVE_API
 FloatComplexCHOL
 {
 public:
 
   FloatComplexCHOL (void) : chol_mat (), xrcond (0) { }
 
-  FloatComplexCHOL (const FloatComplexMatrix& a, bool calc_cond = false)
+  FloatComplexCHOL (const FloatComplexMatrix& a, bool upper = true,
+                    bool calc_cond = false)
     : chol_mat (), xrcond (0)
   {
-    init (a, calc_cond);
+    init (a, upper, calc_cond);
   }
 
   FloatComplexCHOL (const FloatComplexMatrix& a, octave_idx_type& info,
-                    bool calc_cond = false)
+                    bool upper = true, bool calc_cond = false)
     : chol_mat (), xrcond (0)
   {
-    info = init (a, calc_cond);
+    info = init (a, upper, calc_cond);
   }
 
   FloatComplexCHOL (const FloatComplexCHOL& a)
     : chol_mat (a.chol_mat), xrcond (a.xrcond) { }
 
   FloatComplexCHOL& operator = (const FloatComplexCHOL& a)
   {
     if (this != &a)
@@ -87,14 +88,16 @@ public:
                                                const FloatComplexCHOL& a);
 
 private:
 
   FloatComplexMatrix chol_mat;
 
   float xrcond;
 
-  octave_idx_type init (const FloatComplexMatrix& a, bool calc_cond);
+  bool is_upper;
+
+  octave_idx_type init (const FloatComplexMatrix& a, bool upper, bool calc_cond);
 };
 
 FloatComplexMatrix OCTAVE_API chol2inv (const FloatComplexMatrix& r);
 
 #endif
