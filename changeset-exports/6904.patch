# HG changeset patch
# User jwe
# Date 1189800537 0
#      Fri Sep 14 20:08:57 2007 +0000
# Node ID 1758d3d3d2663c8455e1ad146bc2301ef8fd412f
# Parent  a56ab599ac4ce7cbab755bc29de9a8fde41cbcb4
[project @ 2007-09-14 20:08:56 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2007-09-14  Shai Ayal  <shaiay@users.sourceforge.net>
+
+	* genprop.awk: Handle "a" modifier.
+
 2007-09-14  Kai Habel  <kai.habel@gmx.de>
 
 	* graphics.h.in (radio_values::contains): New function.
 	(radio_values::validate): Use it.
 	* graphics.cc (color_property::operator =): Call it instead of
 	validate here.
 
 2007-09-13  John W. Eaton  <jwe@octave.org>
diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -48,16 +48,39 @@
 ##       function, so we emit only the declaration.
 ##
 ##   o:  There is a custom inline definition for the octave_value version
 ##       of the set function, so we don't emit one.
 ##
 ##   O:  There is a custom extern definition for the octave_value version
 ##       of the set function, so we emit only the declaration.
 ##
+##   a:  The octave_value version of the set function will use assignment:
+##
+##         void
+##         set_NAME (const octave_value& val)
+##         {
+##           TYPE tmp (NAME);
+##           tmp = val;
+##           set_NAME (tmp);
+##         }
+##
+##       This is useful for things like the radio_value classes which
+##       use an overloaded assignment operator of the form
+##
+##         radio_property& operator = (const octave_value& val);
+##
+##       that preserves the list of possible values, which is different
+##       from what would happen if we simply used the
+##
+##         TYPE (const octave_value&)
+##
+##       constructor, which creates a new radio_property and so cannot
+##       preserve the old list of possible values.
+##
 ##   m:  Add the line
 ##
 ##         set_NAMEmode ("manual");
 ##
 ##       to the type-specific set function.
 ##
 ## The 'o' and 'O' qualifiers are only useful when the the property type
 ## is something other than octave_value.
@@ -108,16 +131,21 @@ function emit_decls ()
       }
 
       if (emit_ov_set[i])
       {
 	  printf ("  void set_%s (const octave_value& val)", name[i]);
 
 	  if (emit_ov_set[i] == "defn")
 	      printf (" { set_%s (%s (val)); }\n\n", name[i], type[i]);
+          else if (emit_ov_set[i] == "asign")
+          {
+              printf ("\n  {\n    %s tmp (%s);\n    tmp = val;\n    set_%s (tmp);\n  };\n\n",
+		      type[i], name[i], name[i], name[i]);
+         }
 	  else
 	      printf (";\n");
       }
   }
 
   if (idx > 0)
       print "\nprivate:";
 }
@@ -189,16 +217,20 @@ BEGIN {
 	    if (index (quals, "s"))
 		emit_set[idx] = "";
 
 	    ## There is a custom extern definition for the set function,
 	    ## but we still emit the declaration.
 	    if (index (quals, "S"))
 		emit_set[idx] = "decl";
 
+            ## emmit an asignment set function
+            if (index (quals, "a"))
+                emit_ov_set[idx] = "asign";
+
 	    if (type[idx] != "octave_value")
 	    {
 		## The 'o' and 'O' qualifiers are only useful when the
 		## the property type is something other than an
 		## octave_value.
 
 		## There is a custom inline definition for the
 		## octave_value version of the set function, so we
