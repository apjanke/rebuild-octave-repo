# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1448483326 18000
#      Wed Nov 25 15:28:46 2015 -0500
# Node ID b4f5962b3373263405ca1a5e437f235b0bfa16da
# Parent  200ae1d650b7a4a9dc21582cfd6ab07bbac6c79a
# Parent  a0655d18c9cc120f7755db054330f42c690116a8
maint: periodic merge of stable to default

diff --git a/doc/interpreter/stmt.txi b/doc/interpreter/stmt.txi
--- a/doc/interpreter/stmt.txi
+++ b/doc/interpreter/stmt.txi
@@ -81,18 +81,24 @@ endif
 @var{condition} is an expression that controls what the rest of the
 statement will do.  The @var{then-body} is executed only if
 @var{condition} is true.
 
 The condition in an @code{if} statement is considered true if its value
 is nonzero, and false if its value is zero.  If the value of the
 conditional expression in an @code{if} statement is a vector or a
 matrix, it is considered true only if it is non-empty and @emph{all}
-of the elements are nonzero.
+of the elements are nonzero.  The conceptually equivalent code when
+@var{condition} is a matrix is shown below.
 
+@example
+if (@var{matrix}) @equiv{} if (all (@var{matrix}(:)))
+@end example
+
+@noindent
 The second form of an if statement looks like this:
 
 @example
 @group
 if (@var{condition})
   @var{then-body}
 else
   @var{else-body}
@@ -584,19 +590,18 @@ a = [1,3;2,4]; c = cat (3, a, 2*a);
 for i = c
   i
 endfor
 @end group
 @end example
 
 @noindent
 In the above case, the multi-dimensional matrix @var{c} is reshaped to a
-two-dimensional matrix as @code{reshape (c, rows (c),
-prod (size (c)(2:end)))} and then the same behavior as a loop over a two
-dimensional matrix is produced.
+two-dimensional matrix as @code{reshape (c, rows (c), prod (size (c)(2:end)))}
+and then the same behavior as a loop over a two dimensional matrix is produced.
 
 Although it is possible to rewrite all @code{for} loops as @code{while}
 loops, the Octave language has both statements because often a
 @code{for} loop is both less work to type and more natural to think of.
 Counting the number of iterations is very common in loops and it can be
 easier to think of this counting as part of looping rather than as
 something to do inside the loop.
 
diff --git a/scripts/statistics/base/lscov.m b/scripts/statistics/base/lscov.m
--- a/scripts/statistics/base/lscov.m
+++ b/scripts/statistics/base/lscov.m
@@ -167,17 +167,17 @@ endfunction
 %! assert(msew, 3.4741e-004, -1E-4);
 %! V = .2*ones(length(x1)) + .8*diag(ones(size(x1)));
 %! [bg, sew_b, mseg] = lscov (X, y, V);
 %! assert(bg, [0.1203 0.3284 -0.1312]', 1E-4);
 %! assert(sew_b, [0.0672 0.2267 0.1488]', 1E-4);
 %! assert(mseg, 0.0019, 1E-4);
 %! y2 = [y 2*y];
 %! [b2, se_b2, mse2, S2] = lscov (X, y2);
-%! assert(b2, [b 2*b], eps)
+%! assert(b2, [b 2*b], 2*eps)
 %! assert(se_b2, [se_b 2*se_b], eps)
 %! assert(mse2, [mse 4*mse], eps)
 %! assert(S2(:, :, 1), S, eps)
 %! assert(S2(:, :, 2), 4*S, eps)
 
 %!test
 %! ## Artificial example with positive semidefinite weight matrix
 %! x = (0:0.2:2)';
