# HG changeset patch
# User Rik <rik@octave.org>
# Date 1465834683 25200
#      Mon Jun 13 09:18:03 2016 -0700
# Node ID 0806871e3e1eff4c7ec006d5cef27d7ef4154aab
# Parent  e8a8cb1a7258d684d9c0431c9ec4a7a8e09d3bd9
maint: Prefer is_empty() rather than "length () == 0".

* QtHandlesUtils.cc, octave-qt-link.cc, dasrt.cc, data.cc, debug.cc,
error.cc, input.cc, jit-typeinfo.cc, ls-mat5.cc, lsode.cc, oct-stream.cc,
variables.cc, ov-base-diag.cc, ov-bool-sparse.cc, ov-classdef.cc,
ov-cx-sparse.cc, ov-fcn-handle.cc, ov-flt-re-mat.cc, ov-intx.h, ov-perm.cc,
ov-re-mat.cc, ov-re-sparse.cc, pt.cc, file-ops.cc, url-transfer.cc:
Prefer is_empty() rather than "length () == 0".

diff --git a/libgui/graphics/QtHandlesUtils.cc b/libgui/graphics/QtHandlesUtils.cc
--- a/libgui/graphics/QtHandlesUtils.cc
+++ b/libgui/graphics/QtHandlesUtils.cc
@@ -80,23 +80,23 @@ toStringVector (const QStringList& l)
 
   return v;
 }
 
 Cell toCellString (const QStringList& l)
 {
   QStringList tmp = l;
 
-  // dont get any empty lines from end of the list
-  while ((tmp.length () > 0) && (tmp.last ().length () == 0))
+  // don't get any empty lines from end of the list
+  while ((tmp.length () > 0) && tmp.last ().isEmpty ())
     {
       tmp.removeLast ();
     }
-  // no strings will be a a 1x1 cell with empty string
-  if (tmp.length () == 0)
+  // no strings converts to a 1x1 cell with empty string
+  if (tmp.isEmpty ())
     tmp += "";
 
   Cell v(toStringVector (tmp));
   return v;
 }
 
 template <typename T>
 QFont
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -250,17 +250,17 @@ make_filter_list (const octave_link::fil
       QString name = QString::fromStdString (it->second);
 
       // Strip out extensions from name and replace ';' with spaces in
       // list.
 
       name.replace (QRegExp ("\\(.*\\)"), "");
       ext.replace (";", " ");
 
-      if (name.length () == 0)
+      if (name.isEmpty ())
         {
           // No name field.  Build one from the extensions.
           name = ext.toUpper () + " Files";
         }
 
       retval.append (name + " (" + ext + ")");
     }
 
diff --git a/libinterp/corefcn/dasrt.cc b/libinterp/corefcn/dasrt.cc
--- a/libinterp/corefcn/dasrt.cc
+++ b/libinterp/corefcn/dasrt.cc
@@ -79,17 +79,17 @@ dasrt_user_f (const ColumnVector& x, con
         {
           tmp = dasrt_f->do_multi_index_op (1, args);
         }
       catch (octave_execution_exception& e)
         {
           err_user_supplied_eval (e, "dasrt");
         }
 
-      if (tmp.length () == 0 || ! tmp(0).is_defined ())
+      if (tmp.empty () || ! tmp(0).is_defined ())
         err_user_supplied_eval ("dasrt");
 
       if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
         {
           warning ("dasrt: ignoring imaginary part returned from user-supplied function");
           warned_fcn_imaginary = true;
         }
 
@@ -120,17 +120,17 @@ dasrt_user_cf (const ColumnVector& x, do
         {
           tmp = dasrt_cf->do_multi_index_op (1, args);
         }
       catch (octave_execution_exception& e)
         {
           err_user_supplied_eval (e, "dasrt");
         }
 
-      if (tmp.length () == 0 || ! tmp(0).is_defined ())
+      if (tmp.empty () || ! tmp(0).is_defined ())
         err_user_supplied_eval ("dasrt");
 
       if (! warned_cf_imaginary && tmp(0).is_complex_type ())
         {
           warning ("dasrt: ignoring imaginary part returned from user-supplied constraint function");
           warned_cf_imaginary = true;
         }
 
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -1810,17 +1810,17 @@ attempt_type_conversion (const octave_va
           result = fcn.do_multi_index_op (1, octave_value_list (1, ov));
         }
       catch (octave_execution_exception& e)
         {
           error (e, "conversion from %s to %s failed", dtype.c_str (),
                  cname.c_str ());
         }
 
-      if (result.length () == 0)
+      if (result.empty ())
         error ("conversion from %s to %s failed", dtype.c_str (),
                cname.c_str ());
 
       retval = result(0);
     }
   else
     {
       // No conversion function available.  Try the constructor for the
@@ -1838,17 +1838,17 @@ attempt_type_conversion (const octave_va
           result = fcn.do_multi_index_op (1, octave_value_list (1, ov));
         }
       catch (octave_execution_exception& e)
         {
           error (e, "%s constructor failed for %s argument", dtype.c_str (),
                  cname.c_str ());
         }
 
-      if (result.length () == 0)
+      if (result.empty ())
         error ("%s constructor failed for %s argument", dtype.c_str (),
                cname.c_str ());
 
       retval = result(0);
     }
 
   return retval;
 }
@@ -1874,17 +1874,17 @@ do_class_concat (const octave_value_list
         {
           tmp2 = fcn.do_multi_index_op (1, ovl);
         }
       catch (octave_execution_exception& e)
         {
           error (e, "%s/%s method failed", dtype.c_str (), cattype.c_str ());
         }
 
-      if (tmp2.length () == 0)
+      if (tmp2.empty ())
         error ("%s/%s method did not return a value", dtype.c_str (),
                cattype.c_str ());
 
       retval = tmp2(0);
     }
   else
     {
       // No method for dominant type, so attempt type conversions for
diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -1129,17 +1129,17 @@ all breakpoints within the file are clea
                 mv = bkpt.cell_value () (0).map_value ();
               else
                 {
                   error ("dbstop: invalid 'bkpt' field");
                   mv = octave_map ();
                 }
             }
         }
-      if (mv.numel () == 0)
+      if (mv.is_empty ())
         {
           // no changes requested.  Occurs if "errs" non-empty but "bkpt" empty
         }
       else if (! mv.isfield ("name") || ! mv.isfield ("line"))
         {
           error ("dbstop: Cell array must contain fields 'name' and 'line'");
           retval = octave_value (0);
         }
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1888,17 +1888,17 @@ fields are set to their default values.\
             {
               const std::string tmp =
                 new_err.getfield ("identifier").string_value ();
               new_error_id = tmp;
             }
 
           if (new_err.contains ("stack"))
             {
-              if (new_err.getfield ("stack").numel () == 0)
+              if (new_err.getfield ("stack").is_empty ())
                 initialize_stack = true;
               else
                 {
                   new_err_stack =
                     new_err.getfield ("stack").scalar_map_value ();
 
                   if (new_err_stack.contains ("file"))
                     {
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -746,17 +746,17 @@ get_user_input (const octave_value_list&
         retval(0) = input_buf;
     }
   else
     {
       int parse_status = 0;
 
       retval = eval_string (input_buf, true, parse_status, nargout);
 
-      if (! Vdebugging && retval.length () == 0)
+      if (! Vdebugging && retval.empty ())
         retval(0) = Matrix ();
     }
 
   return retval;
 }
 
 DEFUN (input, args, nargout,
        "-*- texinfo -*-\n\
diff --git a/libinterp/corefcn/jit-typeinfo.cc b/libinterp/corefcn/jit-typeinfo.cc
--- a/libinterp/corefcn/jit-typeinfo.cc
+++ b/libinterp/corefcn/jit-typeinfo.cc
@@ -464,17 +464,17 @@ octave_jit_call (octave_builtin::fcn fn,
         err_bad_result ();
 
       octave_value result = ovl.xelem(0);
       octave_base_value *ret = result.internal_rep ();
       ret->grab ();
       return ret;
     }
 
-  if (! (ovl.length () == 0
+  if (! (ovl.empty () 
          || (ovl.length () == 1 && ovl.xelem (0).is_undefined ())))
     err_bad_result ();
 
   return 0;
 }
 
 // -------------------- jit_range --------------------
 bool
diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -849,17 +849,17 @@ read_mat5_binary_element (std::istream& 
         octave_scalar_map m1
           = m0.contents ("function_handle").scalar_map_value ();
         std::string ftype = m1.contents ("type").string_value ();
         std::string fname = m1.contents ("function").string_value ();
         std::string fpath = m1.contents ("file").string_value ();
 
         if (ftype == "simple" || ftype == "scopedfunction")
           {
-            if (fpath.length () == 0)
+            if (fpath.empty ())
               // We have a builtin function
               tc = make_fcn_handle (fname);
             else
               {
                 std::string mroot =
                   m0.contents ("matlabroot").string_value ();
 
                 if ((fpath.length () >= mroot.length ())
diff --git a/libinterp/corefcn/lsode.cc b/libinterp/corefcn/lsode.cc
--- a/libinterp/corefcn/lsode.cc
+++ b/libinterp/corefcn/lsode.cc
@@ -76,17 +76,17 @@ lsode_user_function (const ColumnVector&
         {
           tmp = lsode_fcn->do_multi_index_op (1, args);
         }
       catch (octave_execution_exception& e)
         {
           err_user_supplied_eval (e, "lsode");
         }
 
-      if (tmp.length () == 0 || ! tmp(0).is_defined ())
+      if (tmp.empty () || ! tmp(0).is_defined ())
         err_user_supplied_eval ("lsode");
 
       if (! warned_fcn_imaginary && tmp(0).is_complex_type ())
         {
           warning ("lsode: ignoring imaginary part returned from user-supplied function");
           warned_fcn_imaginary = true;
         }
 
@@ -116,17 +116,17 @@ lsode_user_jacobian (const ColumnVector&
         {
           tmp = lsode_jac->do_multi_index_op (1, args);
         }
       catch (octave_execution_exception& e)
         {
           err_user_supplied_eval (e, "lsode");
         }
 
-      if (tmp.length () == 0 || ! tmp(0).is_defined ())
+      if (tmp.empty () || ! tmp(0).is_defined ())
         err_user_supplied_eval ("lsode");
 
       if (! warned_jac_imaginary && tmp(0).is_complex_type ())
         {
           warning ("lsode: ignoring imaginary part returned from user-supplied jacobian function");
           warned_jac_imaginary = true;
         }
 
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -3145,17 +3145,17 @@ textscan::read_until (delimited_stream& 
 // Read stream until either fmt.width chars have been read, or
 // options.delimiter has been found.  Does *not* rely on fmt being 's'.
 // Used by formats like %6f to limit to 6.
 
 void
 textscan::scan_string (delimited_stream& is, const textscan_format_elt& fmt,
                        std::string& val) const
 {
-  if (delim_list.numel () == 0)
+  if (delim_list.is_empty ())
     {
       unsigned int i = 0;
       unsigned int width = fmt.width;
 
       for (i = 0; i < width; i++)
         {
           if (i+1 > val.length ())
             val = val + val + ' ';      // grow even if empty
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -1805,17 +1805,17 @@ do_who (int argc, const string_vector& a
 
           retval = symbol_stats.map_value (caller_function_name, 1);
         }
       else
         retval = Cell (string_vector (symbol_names));
     }
   else if (! (symbol_stats.empty () && symbol_names.empty ()))
     {
-      if (msg.length () == 0)
+      if (msg.empty ())
         if (global_only)
           octave_stdout << "Global variables:\n\n";
         else
           octave_stdout << "Variables in the current scope:\n\n";
       else
         octave_stdout << msg;
 
       if (verbose)
diff --git a/libinterp/octave-value/ov-base-diag.cc b/libinterp/octave-value/ov-base-diag.cc
--- a/libinterp/octave-value/ov-base-diag.cc
+++ b/libinterp/octave-value/ov-base-diag.cc
@@ -295,17 +295,17 @@ octave_base_diag<DMT, MT>::double_value 
 {
   double retval = lo_ieee_nan_value ();
   typedef typename DMT::element_type el_type;
 
   if (helper_iscomplex (el_type ()) && ! force_conversion)
     warn_implicit_conversion ("Octave:imag-to-real",
                               "complex matrix", "real scalar");
 
-  if (numel () == 0)
+  if (is_empty ())
     err_invalid_conversion (type_name (), "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             type_name (), "real scalar");
 
   retval = helper_getreal (el_type (matrix (0, 0)));
 
   return retval;
diff --git a/libinterp/octave-value/ov-bool-sparse.cc b/libinterp/octave-value/ov-bool-sparse.cc
--- a/libinterp/octave-value/ov-bool-sparse.cc
+++ b/libinterp/octave-value/ov-bool-sparse.cc
@@ -97,17 +97,17 @@ octave_sparse_bool_matrix::try_narrowing
   return retval;
 }
 
 double
 octave_sparse_bool_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
-  if (numel () == 0)
+  if (is_empty ())
     err_invalid_conversion ("bool sparse matrix", "real scalar");
 
   if (numel () > 1)
     warn_implicit_conversion ("Octave:array-to-scalar",
                               "bool sparse matrix", "real scalar");
 
   retval = matrix(0, 0);
 
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -907,17 +907,17 @@ octave_classdef::subsasgn (const std::st
           count++;
           args(0) = octave_value (this);
           args(2) = rhs;
 
           octave_value_list retlist;
 
           retlist = meth.execute (args, 1, true, "subsasgn");
 
-          if (retlist.length () == 0)
+          if (retlist.empty ())
             error ("overloaded method `subsasgn' did not return any value");
 
           retval = retlist(0);
         }
     }
 
   if (! retval.is_defined ())
     retval = object.subsasgn (type, idx, rhs);
diff --git a/libinterp/octave-value/ov-cx-sparse.cc b/libinterp/octave-value/ov-cx-sparse.cc
--- a/libinterp/octave-value/ov-cx-sparse.cc
+++ b/libinterp/octave-value/ov-cx-sparse.cc
@@ -108,17 +108,17 @@ octave_sparse_complex_matrix::double_val
 {
   double retval = lo_ieee_nan_value ();
 
   if (! force_conversion)
     warn_implicit_conversion ("Octave:imag-to-real",
                               "complex sparse matrix", "real scalar");
 
   // FIXME: maybe this should be a function, valid_as_scalar()
-  if (numel () == 0)
+  if (is_empty ())
     err_invalid_conversion ("complex sparse matrix", "real scalar");
 
   if (numel () > 1)
     warn_implicit_conversion ("Octave:array-to-scalar",
                               "complex sparse matrix", "real scalar");
 
   retval = std::real (matrix(0, 0));
 
@@ -142,17 +142,17 @@ octave_sparse_complex_matrix::matrix_val
 Complex
 octave_sparse_complex_matrix::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
 
   // FIXME: maybe this should be a function, valid_as_scalar()
-  if (numel () == 0)
+  if (is_empty ())
     err_invalid_conversion ("complex sparse matrix", "real scalar");
 
   if (numel () > 1)
     warn_implicit_conversion ("Octave:array-to-scalar",
                               "complex sparse matrix", "real scalar");
 
   retval = matrix(0, 0);
 
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -388,24 +388,24 @@ octave_fcn_handle::save_ascii (std::ostr
 
 bool
 octave_fcn_handle::load_ascii (std::istream& is)
 {
   bool success = true;
 
   std::streampos pos = is.tellg ();
   std::string octaveroot = extract_keyword (is, "octaveroot", true);
-  if (octaveroot.length () == 0)
+  if (octaveroot.empty ())
     {
       is.seekg (pos);
       is.clear ();
     }
   pos = is.tellg ();
   std::string fpath = extract_keyword (is, "path", true);
-  if (fpath.length () == 0)
+  if (fpath.empty ())
     {
       is.seekg (pos);
       is.clear ();
     }
 
   is >> nm;
 
   if (nm == anonymous)
diff --git a/libinterp/octave-value/ov-flt-re-mat.cc b/libinterp/octave-value/ov-flt-re-mat.cc
--- a/libinterp/octave-value/ov-flt-re-mat.cc
+++ b/libinterp/octave-value/ov-flt-re-mat.cc
@@ -86,33 +86,33 @@ octave_float_matrix::try_narrowing_conve
   return retval;
 }
 
 double
 octave_float_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
-  if (numel () == 0)
+  if (is_empty ())
     err_invalid_conversion ("real matrix", "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "real matrix", "real scalar");
 
   retval = matrix(0, 0);
 
   return retval;
 }
 
 float
 octave_float_matrix::float_value (bool) const
 {
   float retval = lo_ieee_float_nan_value ();
 
-  if (numel () == 0)
+  if (is_empty ())
     err_invalid_conversion ("real matrix", "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "real matrix", "real scalar");
 
   retval = matrix(0, 0);
 
   return retval;
diff --git a/libinterp/octave-value/ov-intx.h b/libinterp/octave-value/ov-intx.h
--- a/libinterp/octave-value/ov-intx.h
+++ b/libinterp/octave-value/ov-intx.h
@@ -104,33 +104,33 @@ public:
   uint64NDArray
   uint64_array_value (void) const { return uint64NDArray (matrix); }
 
   double
   double_value (bool = false) const
   {
     double retval = lo_ieee_nan_value ();
 
-    if (numel () == 0)
+    if (is_empty ())
       err_invalid_conversion (type_name (), "real scalar");
 
     warn_implicit_conversion ("Octave:array-to-scalar",
                               type_name (), "real scalar");
 
     retval = matrix(0).double_value ();
 
     return retval;
   }
 
   float
   float_value (bool = false) const
   {
     float retval = lo_ieee_float_nan_value ();
 
-    if (numel () == 0)
+    if (is_empty ())
       err_invalid_conversion (type_name (), "real scalar");
 
     warn_implicit_conversion ("Octave:array-to-scalar",
                               type_name (), "real scalar");
 
     retval = matrix(0).float_value ();
 
     return retval;
diff --git a/libinterp/octave-value/ov-perm.cc b/libinterp/octave-value/ov-perm.cc
--- a/libinterp/octave-value/ov-perm.cc
+++ b/libinterp/octave-value/ov-perm.cc
@@ -137,33 +137,33 @@ octave_perm_matrix::is_true (void) const
   return to_dense ().is_true ();
 }
 
 double
 octave_perm_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
-  if (numel () == 0)
+  if (is_empty ())
     err_invalid_conversion (type_name (), "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             type_name (), "real scalar");
 
   retval = matrix(0, 0);
 
   return retval;
 }
 
 float
 octave_perm_matrix::float_value (bool) const
 {
   float retval = lo_ieee_float_nan_value ();
 
-  if (numel () == 0)
+  if (is_empty ())
     err_invalid_conversion (type_name (), "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             type_name (), "real scalar");
 
   retval = matrix(0, 0);
 
   return retval;
diff --git a/libinterp/octave-value/ov-re-mat.cc b/libinterp/octave-value/ov-re-mat.cc
--- a/libinterp/octave-value/ov-re-mat.cc
+++ b/libinterp/octave-value/ov-re-mat.cc
@@ -101,33 +101,33 @@ octave_matrix::try_narrowing_conversion 
   return retval;
 }
 
 double
 octave_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
-  if (numel () == 0)
+  if (is_empty ())
     err_invalid_conversion ("real matrix", "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "real matrix", "real scalar");
 
   retval = matrix(0, 0);
 
   return retval;
 }
 
 float
 octave_matrix::float_value (bool) const
 {
   float retval = lo_ieee_float_nan_value ();
 
-  if (numel () == 0)
+  if (is_empty ())
     err_invalid_conversion ("real matrix", "real scalar");
 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "real matrix", "real scalar");
 
   retval = matrix(0, 0);
 
   return retval;
diff --git a/libinterp/octave-value/ov-re-sparse.cc b/libinterp/octave-value/ov-re-sparse.cc
--- a/libinterp/octave-value/ov-re-sparse.cc
+++ b/libinterp/octave-value/ov-re-sparse.cc
@@ -92,17 +92,17 @@ octave_sparse_matrix::try_narrowing_conv
   return retval;
 }
 
 double
 octave_sparse_matrix::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
-  if (numel () == 0)
+  if (is_empty ())
     err_invalid_conversion ("real sparse matrix", "real scalar");
 
   if (numel () > 1)
     warn_implicit_conversion ("Octave:array-to-scalar",
                               "real sparse matrix", "real scalar");
 
   retval = matrix(0, 0);
 
diff --git a/libinterp/parse-tree/pt.cc b/libinterp/parse-tree/pt.cc
--- a/libinterp/parse-tree/pt.cc
+++ b/libinterp/parse-tree/pt.cc
@@ -54,17 +54,17 @@ tree::str_print_code (void)
 octave_value_list eval_string (const std::string&, bool, int&, int);
 // Is the current breakpoint condition met?
 bool
 tree::meets_bp_condition () const
 {
   bool retval;
   if (bp == 0)
     retval = false;
-  else if (bp->length () == 0)     // empty condition always met
+  else if (bp->empty ())     // empty condition always met
     retval = true;
   else
     {
       int parse_status = 0;
 
       octave::unwind_protect frame;
       frame.protect_var (buffer_error_messages);
       frame.protect_var (Vdebug_on_error);
diff --git a/liboctave/system/file-ops.cc b/liboctave/system/file-ops.cc
--- a/liboctave/system/file-ops.cc
+++ b/liboctave/system/file-ops.cc
@@ -269,17 +269,17 @@ namespace octave
 
               if (! expansion.empty ())
                 dirname = expansion + filename.substr (user_len+1);
             }
 
           // If we don't have a failure hook, or if the failure hook did not
           // expand the tilde, return a copy of what we were passed.
 
-          if (dirname.length () == 0)
+          if (dirname.empty ())
             dirname = filename;
         }
       else
         dirname = pw.dir () + filename.substr (user_len+1);
 
       return dirname;
     }
 
diff --git a/liboctave/util/url-transfer.cc b/liboctave/util/url-transfer.cc
--- a/liboctave/util/url-transfer.cc
+++ b/liboctave/util/url-transfer.cc
@@ -128,17 +128,17 @@ namespace octave
 
   string_vector
   base_url_transfer::mput_directory (const std::string& base,
                                      const std::string& directory)
   {
     string_vector file_list;
 
     std::string realdir
-      = (base.length () == 0
+      = (base.empty ()
          ? directory : base + octave::sys::file_ops::dir_sep_str () + directory);
 
     mkdir (directory);
 
     if (! good ())
       return file_list;
 
     cwd (directory);
