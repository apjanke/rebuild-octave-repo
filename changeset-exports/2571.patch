# HG changeset patch
# User jwe
# Date 849907359 0
#      Fri Dec 06 21:22:39 1996 +0000
# Node ID 2480ef198c464c63aa77302bd917d5d864408d21
# Parent  58113987ee03ebad350758631d3ef96bebea37f2
[project @ 1996-12-06 21:18:39 by jwe]

diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -135,16 +135,19 @@ Strings:
     directly to the terminal.  (But don't do this for fprintf!)
 
   * Consider changing the default value of `string_fill_char' from SPC
     to NUL.
 
   * Consider making size ("") ==> [0, 0] for compatibility with
     Matlab, at least when some preference variable is set.
 
+  * Consider making [] equivalent to "" for compatibility with
+    Matlab, at least when some preference variable is set.
+
   * Consider making ["test", []] ==> "test", for compatibility with
     Matlab, at least when some set of preferences are set.
 
 ----------------
 Other Data Types:
 ----------------
 
   * New types (char, short, etc.).
diff --git a/src/Array-oc.cc b/src/Array-oc.cc
--- a/src/Array-oc.cc
+++ b/src/Array-oc.cc
@@ -17,16 +17,20 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 // Instantiate Arrays of octave_child objects.
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include "Array.h"
 #include "Array.cc"
 
 #include "sighandlers.h"
 
 template class Array<octave_child>;
 
 /*
diff --git a/src/Array-os.cc b/src/Array-os.cc
--- a/src/Array-os.cc
+++ b/src/Array-os.cc
@@ -17,16 +17,20 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 // Instantiate Arrays of octave_stream objects.
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include "Array.h"
 #include "Array.cc"
 
 #include "oct-stream.h"
 
 template class Array<scanf_format_elt*>;
 
 template class Array<printf_format_elt*>;
diff --git a/src/Array-string.cc b/src/Array-string.cc
--- a/src/Array-string.cc
+++ b/src/Array-string.cc
@@ -1,9 +1,8 @@
-// Array-String.cc                                        -*- C++ -*-
 /*
 
 Copyright (C) 1993, 1994, 1995 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
@@ -18,16 +17,20 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 // Instantiate Arrays of Strings.
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include "Array.h"
 #include "Array.cc"
 
 #include "oct-str.h"
 
 template class ArrayRep<Octave_string>;
 template class Array<Octave_string>;
 
diff --git a/src/Array-tc.cc b/src/Array-tc.cc
--- a/src/Array-tc.cc
+++ b/src/Array-tc.cc
@@ -15,22 +15,22 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
+// Instantiate Arrays of octave_values.
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-// Instantiate Arrays of octave_values.
-
 #include "Array.h"
 #include "Array.cc"
 
 #include "ov.h"
 
 extern template class Array<int>;
 extern template class Array2<int>;
 extern template class DiagArray2<int>;
diff --git a/src/BaseSLList.cc b/src/BaseSLList.cc
new file mode 100644
--- /dev/null
+++ b/src/BaseSLList.cc
@@ -0,0 +1,256 @@
+// This may look like C code, but it is really -*- C++ -*-
+/* 
+Copyright (C) 1988, 1992 Free Software Foundation
+    written by Doug Lea (dl@rocky.oswego.edu)
+
+This file is part of the GNU C++ Library.  This library is free
+software; you can redistribute it and/or modify it under the terms of
+the GNU Library General Public License as published by the Free
+Software Foundation; either version 2 of the License, or (at your
+option) any later version.  This library is distributed in the hope
+that it will be useful, but WITHOUT ANY WARRANTY; without even the
+implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
+PURPOSE.  See the GNU Library General Public License for more details.
+You should have received a copy of the GNU Library General Public
+License along with this library; if not, write to the Free Software
+Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+*/
+
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <limits.h>
+#include <stream.h>
+#include <builtin.h>
+#include "BaseSLList.h"
+
+void BaseSLList::error(const char* msg) const
+{
+  (*lib_error_handler)("SLList", msg);
+}
+
+int BaseSLList::length() const
+{
+  int l = 0;
+  BaseSLNode* t = last;
+  if (t != 0) do { ++l; t = t->tl; } while (t != last);
+  return l;
+}
+
+void BaseSLList::clear()
+{
+  if (last == 0)
+    return;
+
+  BaseSLNode* p = last->tl;
+  last->tl = 0;
+  last = 0;
+
+  while (p != 0)
+  {
+    BaseSLNode* nxt = p->tl;
+    delete_node(p);
+    p = nxt;
+  }
+}
+
+
+// Note:  This is an internal method.  It does *not* free old contents!
+
+void BaseSLList::copy(const BaseSLList& a)
+{
+  if (a.last == 0)
+    last = 0;
+  else
+  {
+    BaseSLNode* p = a.last->tl;
+    BaseSLNode* h = copy_node(p->item());
+    last = h;
+    for (;;)
+    {
+      if (p == a.last)
+      {
+        last->tl = h;
+        return;
+      }
+      p = p->tl;
+      BaseSLNode* n = copy_node(p->item());
+      last->tl = n;
+      last = n;
+    }
+  }
+}
+
+BaseSLList& BaseSLList::operator = (const BaseSLList& a)
+{
+  if (last != a.last)
+  {
+    clear();
+    copy(a);
+  }
+  return *this;
+}
+
+Pix BaseSLList::prepend(const void *datum)
+{
+  return prepend(copy_node(datum));
+}
+
+
+Pix BaseSLList::prepend(BaseSLNode* t)
+{
+  if (t == 0) return 0;
+  if (last == 0)
+    t->tl = last = t;
+  else
+  {
+    t->tl = last->tl;
+    last->tl = t;
+  }
+  return Pix(t);
+}
+
+
+Pix BaseSLList::append(const void *datum)
+{
+  return append(copy_node(datum));
+}
+
+Pix BaseSLList::append(BaseSLNode* t)
+{
+  if (t == 0) return 0;
+  if (last == 0)
+    t->tl = last = t;
+  else
+  {
+    t->tl = last->tl;
+    last->tl = t;
+    last = t;
+  }
+  return Pix(t);
+}
+
+void BaseSLList::join(BaseSLList& b)
+{
+  BaseSLNode* t = b.last;
+  b.last = 0;
+  if (last == 0)
+    last = t;
+  else if (t != 0)
+  {
+    BaseSLNode* f = last->tl;
+    last->tl = t->tl;
+    t->tl = f;
+    last = t;
+  }
+}
+
+Pix BaseSLList::ins_after(Pix p, const void *datum)
+{
+  BaseSLNode* u = (BaseSLNode*)p;
+  BaseSLNode* t = copy_node(datum);
+  if (last == 0)
+    t->tl = last = t;
+  else if (u == 0) // ins_after 0 means prepend
+  {
+    t->tl = last->tl;
+    last->tl = t;
+  }
+  else
+  {
+    t->tl = u->tl;
+    u->tl = t;
+    if (u == last) 
+      last = t;
+  }
+  return Pix(t);
+}
+
+void BaseSLList::del_after(Pix p)
+{
+  BaseSLNode* u = (BaseSLNode*)p;
+  if (last == 0 || u == last) error("cannot del_after last");
+  if (u == 0) u = last; // del_after 0 means delete first
+  BaseSLNode* t = u->tl;
+  if (u == t)
+    last = 0;
+  else
+  {
+    u->tl = t->tl;
+    if (last == t)
+      last = u;
+  }
+  delete_node(t);
+}
+
+int BaseSLList::owns(Pix p) const
+{
+  BaseSLNode* t = last;
+  if (t != 0 && p != 0)
+  {
+    do
+    {
+      if (Pix(t) == p) return 1;
+      t = t->tl;
+    } while (t != last);
+  }
+  return 0;
+}
+
+int BaseSLList::remove_front(void *dst, int signal_error)
+{
+  if (last)
+  {
+    BaseSLNode* t = last->tl;
+    copy_item(dst, t->item());
+    if (t == last)
+      last = 0;
+    else
+      last->tl = t->tl;
+    delete_node(t);
+    return 1;
+  }
+  if (signal_error)
+    error("remove_front of empty list");
+  return 0;
+}
+
+void BaseSLList::del_front()
+{
+  if (last == 0) error("del_front of empty list");
+  BaseSLNode* t = last->tl;
+  if (t == last)
+    last = 0;
+  else
+    last->tl = t->tl;
+  delete_node(t);
+}
+
+int BaseSLList::OK() const
+{
+  int v = 1;
+  if (last != 0)
+  {
+    BaseSLNode* t = last;
+    long count = LONG_MAX;      // Lots of chances to find last!
+    do
+    {
+      count--;
+      t = t->tl;
+    } while (count > 0 && t != last);
+    v &= count > 0;
+  }
+  if (!v) error("invariant failure");
+  return v;
+}
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/src/BaseSLList.h b/src/BaseSLList.h
new file mode 100644
--- /dev/null
+++ b/src/BaseSLList.h
@@ -0,0 +1,73 @@
+// This may look like C code, but it is really -*- C++ -*-
+/* 
+Copyright (C) 1988, 1992 Free Software Foundation
+    written by Doug Lea (dl@rocky.oswego.edu)
+
+This file is part of the GNU C++ Library.  This library is free
+software; you can redistribute it and/or modify it under the terms of
+the GNU Library General Public License as published by the Free
+Software Foundation; either version 2 of the License, or (at your
+option) any later version.  This library is distributed in the hope
+that it will be useful, but WITHOUT ANY WARRANTY; without even the
+implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
+PURPOSE.  See the GNU Library General Public License for more details.
+You should have received a copy of the GNU Library General Public
+License along with this library; if not, write to the Free Software
+Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+*/
+
+#ifndef _BaseSLList_h
+#define _BaseSLList_h 1
+
+#if defined (__GNUG__)
+#pragma interface
+#endif
+
+#undef OK
+
+#include <Pix.h>
+
+struct BaseSLNode
+{
+   union {
+     struct BaseSLNode *tl;
+     double dummy;  /* To force correct alignment */
+   };
+   void *item() {return (void*)(this+1);} // Return ((SLNode<T>*)this)->hd
+};
+
+class BaseSLList {
+  protected:
+    BaseSLNode *last;
+    virtual void delete_node(BaseSLNode*node) = 0;
+    virtual BaseSLNode* copy_node(const void* datum) = 0;
+    virtual void copy_item(void *dst, void *src) = 0;
+    virtual ~BaseSLList() { }
+    BaseSLList() { last = 0; }
+    void copy(const BaseSLList&);
+    BaseSLList& operator = (const BaseSLList& a);
+    Pix ins_after(Pix p, const void *datum);
+    Pix prepend(const void *datum);
+    Pix append(const void *datum);
+    int remove_front(void *dst, int signal_error = 0);
+    void join(BaseSLList&);
+  public:
+    int length() const;
+    int empty() const { return last == 0; }
+    void clear();
+    Pix                   prepend(BaseSLNode*);
+    Pix                   append(BaseSLNode*);
+    int                   OK() const;
+    void                  error(const char* msg) const;
+    void                  del_after(Pix p);
+    int                   owns(Pix p) const;
+    void                  del_front();
+};
+
+#endif
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
 Fri Dec  6 00:20:25 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* Map-*.cc, SLList-*.cc, SLStack-*.cc: Include config.h.
+
+	* ov.h: Don't include SLList.h.
+
+	* SLStack.cc: Delete.  Move everything to SLStack.h.
+
+	* BaseSLList.h, BaseSLList.cc: New files.  Split out the
+	non-template base class parts of SLList.
+
 	* Makefile.in (TEMPLATE_SRC): Delete.  Move files to SOURCES.
 	* Map.h, Map.cc: Add #pragma interface/implementation.
 	* SLStack.h, SLStack.cc: Add #pragma interface/implementation.
 
 	* SLList.h, SLList.cc: New files, from libg++, but with #pragma
 	interface/implementation.
 	* Makefile.in (SOURCES): Add SLList.cc.
 	(INCLUDES): Add SLList.h.
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -75,17 +75,17 @@ INCLUDES := builtins.h data.h defun.h de
 	oct-map.h oct-obj.h oct-prcstrm.h oct-procbuf.h \
 	oct-stdstrm.h oct-stream.h oct-strstrm.h pager.h parse.h \
 	pathlen.h pr-output.h procstream.h pt-base.h pt-cmd.h \
 	pt-const.h pt-exp-base.h pt-exp.h pt-fcn.h pt-fvc-base.h \
 	pt-fvc.h pt-mat.h pt-misc.h pt-mvr-base.h pt-mvr.h \
 	pt-plot.h pt-pr-code.h pt-walk.h sighandlers.h symtab.h \
 	syscalls.h sysdep.h systime.h syswait.h token.h toplev.h \
 	unwind-prot.h utils.h variables.h version.h \
-	xdiv.h xpow.h Map.h SLList.h SLStack.h Stack.h \
+	xdiv.h xpow.h BaseSLList.h Map.h SLList.h SLStack.h Stack.h \
 	ov-re-mat.h ov-cx-mat.h ov-ch-mat.h ov-struct.h ov-scalar.h \
 	ov-range.h ov-complex.h ov-va-args.h ov-colon.h ov-base.h \
 	ov-str-mat.h ov.h ov-typeinfo.h ops.h \
 	op-cm-cm.h op-cm-cs.h op-cm-m.h op-cm-s.h op-cs-cm.h \
 	op-cs-cs.h op-cs-m.h op-cs-s.h op-m-cm.h op-m-cs.h \
 	op-m-m.h op-m-s.h op-s-cm.h op-s-cs.h op-s-m.h op-s-s.h \
 	op-str-str.h
 
@@ -99,18 +99,18 @@ TI_OBJ := $(patsubst %.cc, %.o, $(TI_SRC
 
 TI_PICOBJ := $(TI_OBJ)
 ifeq ($(SHARED_LIBS), true)
   ifdef CXXPICFLAG
     TI_PICOBJ := $(addprefix pic/, $(TI_OBJ))
   endif
 endif
 
-SOURCES := Map.cc SLList.cc SLStack.cc data.cc defaults.cc dirfns.cc \
-	dynamic-ld.cc error.cc file-io.cc fn-cache.cc gripes.cc \
+SOURCES := BaseSLList.cc Map.cc data.cc defaults.cc \
+	dirfns.cc dynamic-ld.cc error.cc file-io.cc fn-cache.cc gripes.cc \
 	help.cc input.cc lex.l load-save.cc mappers.cc oct-fstrm.cc \
 	oct-hist.cc oct-iostrm.cc oct-map.cc oct-obj.cc oct-prcstrm.cc \
 	oct-procbuf.cc oct-stdstrm.cc oct-stream.cc oct-strstrm.cc \
 	pager.cc parse.y pr-output.cc procstream.cc pt-base.cc \
 	pt-cmd.cc pt-const.cc pt-exp-base.cc pt-exp.cc pt-fcn.cc \
 	pt-fvc-base.cc pt-fvc.cc pt-mat.cc pt-misc.cc pt-mvr-base.cc \
 	pt-mvr.cc pt-plot.cc pt-pr-code.cc \
 	sighandlers.cc strcasecmp.c strncase.c strfns.cc strftime.c \
diff --git a/src/Map-fnc.cc b/src/Map-fnc.cc
--- a/src/Map-fnc.cc
+++ b/src/Map-fnc.cc
@@ -17,16 +17,20 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 // Instantiate Maps of file_name_cache_elts.
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include <string>
 
 #include "Map.h"
 #include "Map.cc"
 
 #include "str-vec.h"
 
 #include "fn-cache.h"
diff --git a/src/Map-i.cc b/src/Map-i.cc
--- a/src/Map-i.cc
+++ b/src/Map-i.cc
@@ -17,16 +17,20 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 // Instantiate Maps of octave_values.
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include "Map.h"
 #include "Map.cc"
 
 template class Map<int>;
 template class CHNode<int>;
 template class CHMap<int>;
 
 template static int goodCHptr (CHNode<int> *t);
diff --git a/src/Map-tc.cc b/src/Map-tc.cc
--- a/src/Map-tc.cc
+++ b/src/Map-tc.cc
@@ -17,16 +17,20 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 // Instantiate Maps of octave_values.
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include "Map.h"
 #include "Map.cc"
 
 #include "ov.h"
 
 template class Map<octave_value>;
 template class CHNode<octave_value>;
 template class CHMap<octave_value>;
diff --git a/src/SLList-expr.cc b/src/SLList-expr.cc
--- a/src/SLList-expr.cc
+++ b/src/SLList-expr.cc
@@ -21,17 +21,17 @@ Software Foundation, 59 Temple Place - S
 */
 
 // Instantiate Lists of various values.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <SLList.h>
+#include "SLList.h"
 
 #include "pt-exp.h"
 #include "pt-fvc.h"
 #include "pt-mvr.h"
 
 template class SLNode<tree_expression *>;
 template class SLList<tree_expression *>;
 
diff --git a/src/SLList-i.cc b/src/SLList-i.cc
--- a/src/SLList-i.cc
+++ b/src/SLList-i.cc
@@ -17,21 +17,28 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 // Instantiate Stacks of int values.
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "SLList.h"
+
 #include "SLStack.h"
 #include "SLStack.cc"
 
 template class SLNode<int>;
 template class SLList<int>;
+
 template class Stack<int>;
 template class SLStack<int>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/SLList-misc.cc b/src/SLList-misc.cc
--- a/src/SLList-misc.cc
+++ b/src/SLList-misc.cc
@@ -21,17 +21,17 @@ Software Foundation, 59 Temple Place - S
 */
 
 // Instantiate Lists of various values.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <SLList.h>
+#include "SLList.h"
 
 #include "pt-exp.h"
 #include "ov.h"
 #include "pt-misc.h"
 
 template class SLNode<tree_statement *>;
 template class SLList<tree_statement *>;
 
diff --git a/src/SLList-pc.cc b/src/SLList-pc.cc
--- a/src/SLList-pc.cc
+++ b/src/SLList-pc.cc
@@ -17,21 +17,28 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 // Instantiate Stacks of char* values.
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "SLList.h"
+
 #include "SLStack.h"
 #include "SLStack.cc"
 
 template class SLNode<char *>;
 template class SLList<char *>;
+
 template class Stack<char *>;
 template class SLStack<char *>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/SLList-plot.cc b/src/SLList-plot.cc
--- a/src/SLList-plot.cc
+++ b/src/SLList-plot.cc
@@ -21,17 +21,17 @@ Software Foundation, 59 Temple Place - S
 */
 
 // Instantiate Lists of various values.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <SLList.h>
+#include "SLList.h"
 
 #include "pt-plot.h"
 
 template class SLNode<subplot *>;
 template class SLList<subplot *>;
 
 /*
 ;;; Local Variables: ***
diff --git a/src/SLList-str.cc b/src/SLList-str.cc
--- a/src/SLList-str.cc
+++ b/src/SLList-str.cc
@@ -21,17 +21,17 @@ Software Foundation, 59 Temple Place - S
 */
 
 // Instantiate Lists of strings.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <SLList.h>
+#include "SLList.h"
 
 #include <string>
 
 template class SLNode<string>;
 template class SLList<string>;
 
 /*
 ;;; Local Variables: ***
diff --git a/src/SLList-tc.cc b/src/SLList-tc.cc
--- a/src/SLList-tc.cc
+++ b/src/SLList-tc.cc
@@ -21,17 +21,17 @@ Software Foundation, 59 Temple Place - S
 */
 
 // Instantiate Lists of various values.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <SLList.h>
+#include "SLList.h"
 
 #include "ov.h"
 
 template class SLNode<octave_value>;
 template class SLList<octave_value>;
 
 /*
 ;;; Local Variables: ***
diff --git a/src/SLList-tm.cc b/src/SLList-tm.cc
--- a/src/SLList-tm.cc
+++ b/src/SLList-tm.cc
@@ -17,18 +17,21 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 // Instantiate Stacks of tree_matrix* values.
 
-#include "SLStack.h"
-#include "SLStack.cc"
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "SLList.h"
 
 #include "pt-mat.h"
 
 template class SLNode<tree_matrix_row *>;
 template class SLList<tree_matrix_row *>;
 
 template class SLNode<tree_matrix *>;
 template class SLList<tree_matrix *>;
diff --git a/src/SLList.cc b/src/SLList.cc
--- a/src/SLList.cc
+++ b/src/SLList.cc
@@ -19,238 +19,24 @@ Foundation, 59 Temple Place - Suite 330,
 #if defined (__GNUG__)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <limits.h>
-#include <stream.h>
-#include <builtin.h>
 #include "SLList.h"
 
-void BaseSLList::error(const char* msg) const
-{
-  (*lib_error_handler)("SLList", msg);
-}
-
-int BaseSLList::length() const
-{
-  int l = 0;
-  BaseSLNode* t = last;
-  if (t != 0) do { ++l; t = t->tl; } while (t != last);
-  return l;
-}
-
-void BaseSLList::clear()
-{
-  if (last == 0)
-    return;
-
-  BaseSLNode* p = last->tl;
-  last->tl = 0;
-  last = 0;
-
-  while (p != 0)
-  {
-    BaseSLNode* nxt = p->tl;
-    delete_node(p);
-    p = nxt;
-  }
-}
-
-
-// Note:  This is an internal method.  It does *not* free old contents!
+// I'm not sure if putting this here is really necessary, but it
+// shouldn't hurt.
 
-void BaseSLList::copy(const BaseSLList& a)
-{
-  if (a.last == 0)
-    last = 0;
-  else
-  {
-    BaseSLNode* p = a.last->tl;
-    BaseSLNode* h = copy_node(p->item());
-    last = h;
-    for (;;)
-    {
-      if (p == a.last)
-      {
-        last->tl = h;
-        return;
-      }
-      p = p->tl;
-      BaseSLNode* n = copy_node(p->item());
-      last->tl = n;
-      last = n;
-    }
-  }
-}
-
-BaseSLList& BaseSLList::operator = (const BaseSLList& a)
-{
-  if (last != a.last)
-  {
-    clear();
-    copy(a);
-  }
-  return *this;
-}
-
-Pix BaseSLList::prepend(const void *datum)
-{
-  return prepend(copy_node(datum));
-}
-
-
-Pix BaseSLList::prepend(BaseSLNode* t)
-{
-  if (t == 0) return 0;
-  if (last == 0)
-    t->tl = last = t;
-  else
-  {
-    t->tl = last->tl;
-    last->tl = t;
-  }
-  return Pix(t);
-}
-
-
-Pix BaseSLList::append(const void *datum)
-{
-  return append(copy_node(datum));
-}
-
-Pix BaseSLList::append(BaseSLNode* t)
-{
-  if (t == 0) return 0;
-  if (last == 0)
-    t->tl = last = t;
-  else
-  {
-    t->tl = last->tl;
-    last->tl = t;
-    last = t;
-  }
-  return Pix(t);
-}
-
-void BaseSLList::join(BaseSLList& b)
+template <class T>
+SLList<T>::~SLList (void)
 {
-  BaseSLNode* t = b.last;
-  b.last = 0;
-  if (last == 0)
-    last = t;
-  else if (t != 0)
-  {
-    BaseSLNode* f = last->tl;
-    last->tl = t->tl;
-    t->tl = f;
-    last = t;
-  }
-}
-
-Pix BaseSLList::ins_after(Pix p, const void *datum)
-{
-  BaseSLNode* u = (BaseSLNode*)p;
-  BaseSLNode* t = copy_node(datum);
-  if (last == 0)
-    t->tl = last = t;
-  else if (u == 0) // ins_after 0 means prepend
-  {
-    t->tl = last->tl;
-    last->tl = t;
-  }
-  else
-  {
-    t->tl = u->tl;
-    u->tl = t;
-    if (u == last) 
-      last = t;
-  }
-  return Pix(t);
-}
-
-void BaseSLList::del_after(Pix p)
-{
-  BaseSLNode* u = (BaseSLNode*)p;
-  if (last == 0 || u == last) error("cannot del_after last");
-  if (u == 0) u = last; // del_after 0 means delete first
-  BaseSLNode* t = u->tl;
-  if (u == t)
-    last = 0;
-  else
-  {
-    u->tl = t->tl;
-    if (last == t)
-      last = u;
-  }
-  delete_node(t);
-}
-
-int BaseSLList::owns(Pix p) const
-{
-  BaseSLNode* t = last;
-  if (t != 0 && p != 0)
-  {
-    do
-    {
-      if (Pix(t) == p) return 1;
-      t = t->tl;
-    } while (t != last);
-  }
-  return 0;
-}
-
-int BaseSLList::remove_front(void *dst, int signal_error)
-{
-  if (last)
-  {
-    BaseSLNode* t = last->tl;
-    copy_item(dst, t->item());
-    if (t == last)
-      last = 0;
-    else
-      last->tl = t->tl;
-    delete_node(t);
-    return 1;
-  }
-  if (signal_error)
-    error("remove_front of empty list");
-  return 0;
-}
-
-void BaseSLList::del_front()
-{
-  if (last == 0) error("del_front of empty list");
-  BaseSLNode* t = last->tl;
-  if (t == last)
-    last = 0;
-  else
-    last->tl = t->tl;
-  delete_node(t);
-}
-
-int BaseSLList::OK() const
-{
-  int v = 1;
-  if (last != 0)
-  {
-    BaseSLNode* t = last;
-    long count = LONG_MAX;      // Lots of chances to find last!
-    do
-    {
-      count--;
-      t = t->tl;
-    } while (count > 0 && t != last);
-    v &= count > 0;
-  }
-  if (!v) error("invariant failure");
-  return v;
+  clear();
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/SLList.h b/src/SLList.h
--- a/src/SLList.h
+++ b/src/SLList.h
@@ -14,89 +14,45 @@ PURPOSE.  See the GNU Library General Pu
 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the Free Software
 Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
 
 #ifndef _SLList_h
 #define _SLList_h 1
 
-#if defined (__GNUG__)
-#pragma interface
-#endif
-
-#undef OK
-
 #include <Pix.h>
-
-struct BaseSLNode
-{
-   union {
-     struct BaseSLNode *tl;
-     double dummy;  /* To force correct alignment */
-   };
-   void *item() {return (void*)(this+1);} // Return ((SLNode<T>*)this)->hd
-};
+#include <BaseSLList.h>
 
 template<class T>
 class SLNode : public BaseSLNode
 {
   public:
     T                    hd; // Data part of node
                          SLNode() { }
                          SLNode(const T& h, SLNode* t = 0)
 			     : hd(h) { tl = t; }
                          ~SLNode() { }
 };
 
-extern int __SLListLength(BaseSLNode *ptr);
-
-class BaseSLList {
-  protected:
-    BaseSLNode *last;
-    virtual void delete_node(BaseSLNode*node) = 0;
-    virtual BaseSLNode* copy_node(const void* datum) = 0;
-    virtual void copy_item(void *dst, void *src) = 0;
-    virtual ~BaseSLList() { }
-    BaseSLList() { last = 0; }
-    void copy(const BaseSLList&);
-    BaseSLList& operator = (const BaseSLList& a);
-    Pix ins_after(Pix p, const void *datum);
-    Pix prepend(const void *datum);
-    Pix append(const void *datum);
-    int remove_front(void *dst, int signal_error = 0);
-    void join(BaseSLList&);
-  public:
-    int length() const;
-    int empty() const { return last == 0; }
-    void clear();
-    Pix                   prepend(BaseSLNode*);
-    Pix                   append(BaseSLNode*);
-    int                   OK() const;
-    void                  error(const char* msg) const;
-    void                  del_after(Pix p);
-    int                   owns(Pix p) const;
-    void                  del_front();
-};
-
 template <class T>
 class SLList : public BaseSLList
 {
   private:
     virtual void delete_node(BaseSLNode *node) { delete (SLNode<T>*)node; }
     virtual BaseSLNode* copy_node(const void *datum)
 	{ return new SLNode<T>(*(const T*)datum); }
     virtual void copy_item(void *dst, void *src) { *(T*)dst = *(T*)src; }
 
 public:
     SLList() : BaseSLList() { }
     SLList(const SLList<T>& a) : BaseSLList() { copy(a); }
     SLList<T>&            operator = (const SLList<T>& a)
 	{ BaseSLList::operator=((const BaseSLList&) a); return *this; }
-    virtual ~SLList() { clear(); }
+  ~SLList (void) { clear (); }
 
     Pix prepend(const T& item) {return BaseSLList::prepend(&item);}
     Pix append(const T& item) {return BaseSLList::append(&item);}
     Pix prepend(SLNode<T>* node) {return BaseSLList::prepend(node);}
     Pix append(SLNode<T>* node) {return BaseSLList::append(node);}
 
     T& operator () (Pix p) {
 	if (p == 0) error("null Pix");
diff --git a/src/SLStack-i.cc b/src/SLStack-i.cc
--- a/src/SLStack-i.cc
+++ b/src/SLStack-i.cc
@@ -17,21 +17,27 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 // Instantiate Stacks of int values.
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "SLList.h"
+
 #include "SLStack.h"
-#include "SLStack.cc"
 
 template class SLNode<int>;
 template class SLList<int>;
+
 template class Stack<int>;
 template class SLStack<int>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/SLStack-pc.cc b/src/SLStack-pc.cc
--- a/src/SLStack-pc.cc
+++ b/src/SLStack-pc.cc
@@ -17,21 +17,27 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 // Instantiate Stacks of char* values.
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "SLList.h"
+
 #include "SLStack.h"
-#include "SLStack.cc"
 
 template class SLNode<char*>;
 template class SLList<char*>;
+
 template class Stack<char*>;
 template class SLStack<char*>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/SLStack-str.cc b/src/SLStack-str.cc
--- a/src/SLStack-str.cc
+++ b/src/SLStack-str.cc
@@ -17,18 +17,21 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 // Instantiate Stacks of string values.
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include "SLStack.h"
-#include "SLStack.cc"
 
 #include <string>
 
 // We already have SLList<string>, so we don't need to make them here.
 
 // template class SLNode<string>;
 // template class SLList<string>;
 template class Stack<string>;
diff --git a/src/SLStack-sym.cc b/src/SLStack-sym.cc
--- a/src/SLStack-sym.cc
+++ b/src/SLStack-sym.cc
@@ -17,28 +17,35 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 // Instantiate Stacks of symbol_def* values.
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "SLList.h"
+
 #include "SLStack.h"
-#include "SLStack.cc"
 
 #include "symtab.h"
 
 extern template class SLNode<unsigned>;
 extern template class SLList<unsigned>;
+
 extern template class Stack<unsigned>;
 extern template class SLStack<unsigned>;
 
 template class SLNode<symbol_def *>;
 template class SLList<symbol_def *>;
+
 template class Stack<symbol_def *>;
 template class SLStack<symbol_def *>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/SLStack-tm.cc b/src/SLStack-tm.cc
--- a/src/SLStack-tm.cc
+++ b/src/SLStack-tm.cc
@@ -1,9 +1,8 @@
-// SLStack-tm.cc                                          -*- C++ -*-
 /*
 
 Copyright (C) 1993, 1994, 1995 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
@@ -18,23 +17,29 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 // Instantiate Stacks of tree_matrix* values.
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "SLList.h"
+
 #include "SLStack.h"
-#include "SLStack.cc"
 
 #include "pt-mat.h"
 
 template class SLNode<tree_matrix *>;
 template class SLList<tree_matrix *>;
+
 template class Stack<tree_matrix *>;
 template class SLStack<tree_matrix *>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
diff --git a/src/SLStack-tok.cc b/src/SLStack-tok.cc
--- a/src/SLStack-tok.cc
+++ b/src/SLStack-tok.cc
@@ -17,23 +17,29 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 // Instantiate Stacks of token* values.
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "SLList.h"
+
 #include "SLStack.h"
-#include "SLStack.cc"
 
 #include "token.h"
 
 template class SLNode<token *>;
 template class SLList<token *>;
+
 template class Stack<token *>;
 template class SLStack<token *>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/SLStack-ue.cc b/src/SLStack-ue.cc
--- a/src/SLStack-ue.cc
+++ b/src/SLStack-ue.cc
@@ -17,23 +17,29 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 // Instantiate Stacks of unwind_elem values.
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "SLList.h"
+
 #include "SLStack.h"
-#include "SLStack.cc"
 
 #include "unwind-prot.h"
 
 template class SLNode<unwind_elem>;
 template class SLList<unwind_elem>;
+
 template class Stack<unwind_elem>;
 template class SLStack<unwind_elem>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/SLStack-ui.cc b/src/SLStack-ui.cc
--- a/src/SLStack-ui.cc
+++ b/src/SLStack-ui.cc
@@ -17,21 +17,27 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 // Instantiate Stacks of unsigned values.
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "SLList.h"
+
 #include "SLStack.h"
-#include "SLStack.cc"
 
 template class SLNode<unsigned>;
 template class SLList<unsigned>;
+
 template class Stack<unsigned>;
 template class SLStack<unsigned>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/SLStack.cc b/src/SLStack.cc
deleted file mode 100644
--- a/src/SLStack.cc
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
-
-Copyright (C) 1996 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 2, or (at your option) any
-later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, write to the Free
-Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-
-*/
-
-#if defined (__GNUG__)
-#pragma implementation
-#endif
-
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-#include "SLStack.h"
-
-template <class T>
-SLStack<T>::SLStack (void) : p ()
-{
-}
-
-template <class T>
-SLStack<T>::SLStack (const SLStack<T>& a) : p (a.p)
-{
-}
-
-template <class T>
-SLStack<T>::~SLStack (void)
-{
-}
-
-template <class T>
-void
-SLStack<T>::push (const T& item)
-{
-  p.prepend (item);
-}
-
-template <class T>
-T
-SLStack<T>::pop (void)
-{
-  return p.remove_front ();
-}
-
-template <class T>
-T&
-SLStack<T>::top (void)
-{
-  return p.front ();
-}
-
-template <class T>
-void
-SLStack<T>::del_top (void)
-{
-  p.del_front ();
-}
-
-template <class T>
-SLStack<T>&
-SLStack<T>::operator = (const SLStack<T>& s)
-{
-  p = s.p;
-  return *this;
-}
-
-template <class T>
-int
-SLStack<T>::empty (void)
-{
-  return p.empty ();
-}
-
-template <class T>
-int
-SLStack<T>::full (void)
-{
-  return 0;
-}
-
-template <class T>
-int
-SLStack<T>::length (void)
-{
-  return p.length ();
-}
-
-template <class T>
-int
-SLStack<T>::OK (void)
-{
-  return p.OK ();
-}
-
-template <class T>
-void
-SLStack<T>::clear (void)
-{
-  p.clear ();
-}
-
-/*
-;;; Local Variables: ***
-;;; mode: C++ ***
-;;; End: ***
-*/
diff --git a/src/SLStack.h b/src/SLStack.h
--- a/src/SLStack.h
+++ b/src/SLStack.h
@@ -31,49 +31,58 @@ of SLStack from libg++, originally:
 and distributed under the terms of the GNU Library General Public
 License as published by the Free Software Foundation.
 
 */
 
 #if !defined (_SLStack_h)
 #define _SLStack_h 1
 
-#if defined (__GNUG__)
-#pragma interface
-#endif
-
 #include "SLList.h"
 #include "Stack.h"
 
 template <class T>
 class
 SLStack : public Stack<T>
 {
- private:
+private:
+
   SLList<T> p;
 
- public:
-  SLStack (void);
-  SLStack (const SLStack<T>& s);
-  ~SLStack (void);
+public:
+
+  SLStack (void) : p () { }
+
+  SLStack (const SLStack<T>& s) : p (s.p) { }
+
+  ~SLStack (void) { }
 
-  SLStack<T>& operator = (const SLStack<T>&);
+  SLStack<T>& operator = (const SLStack<T>& s)
+  {
+    p = s.p;
+    return *this;
+  }
+
+  void push (const T& item) { p.prepend (item); }
 
-  void push (const T& item);
-  T pop (void);
-  T& top (void);
-  void del_top (void);
+  T pop (void) { return p.remove_front (); }
+
+  T& top (void) { return p.front (); }
+
+  void del_top (void) { p.del_front (); }
+
+  int empty (void) { return p.empty (); }
 
-  int empty (void);
-  int full (void);
-  int length (void);
+  int full (void) { return 0; }
+
+  int length (void) { return p.length (); }
 
-  void clear (void);
+  void clear (void) { p.clear (); }
 
-  int OK (void);
+  int OK (void) { return p.OK (); }
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -93,37 +93,42 @@ octave_char_matrix_str::index (const oct
 extern void assign (Array2<char>&, const Array2<char>&);
 
 void
 octave_char_matrix_str::assign (const octave_value_list& idx,
 				const charMatrix& rhs)
 {
   int len = idx.length ();
 
+  // XXX FIXME XXX
+  charMatrix tmp = rhs;
+  if (tmp.rows () == 1 && tmp.columns () == 0)
+    tmp.resize (0, 0);    
+
   switch (len)
     {
     case 2:
       {
 	idx_vector i = idx (0).index_vector ();
 	idx_vector j = idx (1).index_vector ();
 
 	matrix.set_index (i);
 	matrix.set_index (j);
 
-	::assign (matrix, rhs);
+	::assign (matrix, tmp);
       }
       break;
 
     case 1:
       {
 	idx_vector i = idx (0).index_vector ();
 
 	matrix.set_index (i);
 
-	::assign (matrix, rhs);
+	::assign (matrix, tmp);
       }
       break;
 
     default:
       error ("invalid number of indices (%d) for indexed matrix assignment",
 	     len);
       break;
     }
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -28,18 +28,16 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <cstdlib>
 
 #include <string>
 
 class ostream;
 
-#include <SLList.h>
-
 #include "Range.h"
 #include "idx-vector.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
 #include "pt-exp.h"
