# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1203123265 18000
#      Fri Feb 15 19:54:25 2008 -0500
# Node ID 6470f946a4250cbee4801ab9380162851497b395
# Parent  1e01db14700bb1d3a53592dc5daaf7fd14b20eda
another small xGELSD workspace fix

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2459,20 +2459,20 @@ ComplexMatrix::lssolve (const ComplexMat
       Array<octave_idx_type> iwork (liwork);
       octave_idx_type* piwork = iwork.fortran_vec ();
 
       F77_XFCN (zgelsd, ZGELSD, (m, n, nrhs, tmp_data, m, pretval, maxmn,
 				 ps, rcond, rank, work.fortran_vec (),
 				 lwork, prwork, piwork, info));
 
       // The workspace query is broken in at least LAPACK 3.0.0
-      // through 3.1.1 when n > mnthr.  The obtuse formula below
+      // through 3.1.1 when n >= mnthr.  The obtuse formula below
       // should provide sufficient workspace for ZGELSD to operate
       // efficiently.
-      if (n > mnthr)
+      if (n >= mnthr)
 	{
 	  octave_idx_type addend = m;
 
 	  if (2*m-4 > addend)
 	    addend = 2*m-4;
 
 	  if (nrhs > addend)
 	    addend = nrhs;
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2062,20 +2062,20 @@ Matrix::lssolve (const Matrix& b, octave
       Array<octave_idx_type> iwork (liwork);
       octave_idx_type* piwork = iwork.fortran_vec ();
 
       F77_XFCN (dgelsd, DGELSD, (m, n, nrhs, tmp_data, m, pretval, maxmn,
 				 ps, rcond, rank, work.fortran_vec (),
 				 lwork, piwork, info));
 
       // The workspace query is broken in at least LAPACK 3.0.0
-      // through 3.1.1 when n > mnthr.  The obtuse formula below
+      // through 3.1.1 when n >= mnthr.  The obtuse formula below
       // should provide sufficient workspace for DGELSD to operate
       // efficiently.
-      if (n > mnthr)
+      if (n >= mnthr)
 	{
 	  const octave_idx_type wlalsd
 	    = 9*m + 2*m*smlsiz + 8*m*nlvl + m*nrhs + (smlsiz+1)*(smlsiz+1);
 
 	  octave_idx_type addend = m;
 
 	  if (2*m-4 > addend)
 	    addend = 2*m-4;
