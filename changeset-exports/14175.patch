# HG changeset patch
# User Juan Pablo Carbajal <carbajal@ifi.uzh.ch>
# Date 1326083195 28800
#      Sun Jan 08 20:26:35 2012 -0800
# Branch stable
# Node ID 3972c4caa60ac7b6f36841da919454757e0004c6
# Parent  447b57ebc27b6b6be2bcaf1f17871a13f438d1e2
Add new function is_function_handle (patch #7695)

* contributors.in: Add Juan Pablo Carbajal to list of contributors.

* func.txi: Add docstring to function handle chapter.

* ov-fcn-handle.cc: Add new function is_function_handle ().

diff --git a/doc/interpreter/contributors.in b/doc/interpreter/contributors.in
--- a/doc/interpreter/contributors.in
+++ b/doc/interpreter/contributors.in
@@ -20,16 +20,17 @@ Paul Boven
 Richard Bovey
 John Bradshaw
 Marcus Brinkmann
 Remy Bruno
 Ansgar Burchard
 Marco Caliari
 Daniel Calvelo
 John C. Campbell
+Juan Pablo Carbajal
 Jean-Francois Cardoso
 Joao Cardoso
 Larrie Carr
 David Castelow
 Vincent Cautaerts
 Clinton Chee
 Albert Chin-A-Young
 Carsten Clark
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -1140,16 +1140,18 @@ list.  If there are no arguments, you mu
 f = @@sin;
 feval (f, pi/4)
     @result{} 0.70711
 f (pi/4)
     @result{} 0.70711
 @end group
 @end example
 
+@DOCSTRING(is_function_handle)
+
 @DOCSTRING(functions)
 
 @DOCSTRING(func2str)
 
 @DOCSTRING(str2func)
 
 @node Anonymous Functions
 @subsection Anonymous Functions
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -1771,16 +1771,48 @@ are ignored in the lookup.\n\
 %!    y = __testrecursionfunc (@(x) f(2*x), x, n);
 %!  endif
 %!endfunction
 %!
 %!assert (__testrecursionfunc (@(x) x, 1), 8)
 
 */
 
+DEFUN (is_function_handle, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} is_function_handle (@var{x})\n\
+Return true if @var{x} is a function handle.\n\
+@seealso{isa, typeinfo, class}\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1)
+    retval = args(0).is_function_handle ();
+  else
+    print_usage ();
+
+  return retval;
+}
+
+/*
+%!shared fh
+%! fh = @(x) x;
+
+%!assert (is_function_handle (fh))
+%!assert (! is_function_handle ({fh}))
+%!assert (! is_function_handle (1))
+%!error is_function_handle ();
+%!error is_function_handle (1, 2);
+
+*/
+
+
 octave_fcn_binder::octave_fcn_binder (const octave_value& f,
                                       const octave_value& root,
                                       const octave_value_list& templ,
                                       const std::vector<int>& mask,
                                       int exp_nargin)
 : octave_fcn_handle (f), root_handle (root), arg_template (templ),
   arg_mask (mask), expected_nargin (exp_nargin)
 {
