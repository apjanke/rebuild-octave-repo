# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1339255408 18000
#      Sat Jun 09 10:23:28 2012 -0500
# Node ID 3564bb14139620ec8d4c2d3f1d919798881b8f6f
# Parent  591aeec5c5200c20c260ea340afedb3815f61aef
Only add items to worklist in type inferece if not already there

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -1280,29 +1280,30 @@ jit_convert::jit_convert (llvm::Module *
        iter != constants.end (); ++iter)
     append_users (*iter);
 
   // FIXME: Describe algorithm here
   while (worklist.size ())
     {
       jit_instruction *next = worklist.front ();
       worklist.pop_front ();
+      next->stash_in_worklist (false);
 
       if (next->infer ())
         {
           // terminators need to be handles specially
           if (jit_terminator *term = dynamic_cast<jit_terminator *> (next))
             append_users_term (term);
           else
             append_users (next);
         }
     }
 
   remove_dead ();
-
+  merge_blocks ();
   place_releases ();
 
 #ifdef OCTAVE_JIT_DEBUG
   std::cout << "-------------------- Compiling tree --------------------\n";
   std::cout << tee.str_print_code () << std::endl;
   print_blocks ("octave jit ir");
 #endif
 
@@ -1899,20 +1900,21 @@ jit_convert::append_users_term (jit_term
 {
   for (size_t i = 0; i < term->sucessor_count (); ++i)
     {
       if (term->alive (i))
         {
           jit_block *succ = term->sucessor (i);
           for (jit_block::iterator iter = succ->begin (); iter != succ->end ()
                  && isa<jit_phi> (*iter); ++iter)
-            worklist.push_back (*iter);
-
-          if (succ->terminator ())
-            worklist.push_back (succ->terminator ());
+            push_worklist (*iter);
+
+          jit_terminator *sterm = succ->terminator ();
+          if (sterm)
+            push_worklist (sterm);
         }
     }
 }
 
 void
 jit_convert::merge_blocks (void)
 {
   for (block_list::iterator iter = blocks.begin (); iter != blocks.end ();
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -592,19 +592,30 @@ class jit_ir_walker;
 class jit_use;
 
 class
 jit_value
 {
   friend class jit_use;
 public:
   jit_value (void) : llvm_value (0), ty (0), use_head (0), use_tail (0),
-                     myuse_count (0), mlast_use (0) {}
+                     myuse_count (0), mlast_use (0),
+		     min_worklist (false) {}
 
   virtual ~jit_value (void);
+  
+  bool in_worklist (void) const
+  {
+    return min_worklist;
+  }
+
+  void stash_in_worklist (bool ain_worklist)
+  {
+    min_worklist = ain_worklist;
+  }
 
   // replace all uses with
   void replace_with (jit_value *value);
 
   jit_type *type (void) const { return ty; }
 
   llvm::Type *type_llvm (void) const
   {
@@ -669,16 +680,17 @@ protected:
 
   llvm::Value *llvm_value;
 private:
   jit_type *ty;
   jit_use *use_head;
   jit_use *use_tail;
   size_t myuse_count;
   jit_instruction *mlast_use;
+  bool min_worklist;
 };
 
 std::ostream& operator<< (std::ostream& os, const jit_value& value);
 
 class
 jit_use
 {
 public:
@@ -1923,20 +1935,29 @@ private:
 
   jit_value *do_assign (const std::string& lhs, jit_value *rhs, bool print);
                         
 
   jit_value *visit (tree *tee) { return visit (*tee); }
 
   jit_value *visit (tree& tee);
 
+  void push_worklist (jit_instruction *instr)
+  {
+    if (! instr->in_worklist ())
+      {
+	instr->stash_in_worklist (true);
+	worklist.push_back (instr);
+      }
+  }
+
   void append_users (jit_value *v)
   {
     for (jit_use *use = v->first_use (); use; use = use->next ())
-      worklist.push_back (use->user ());
+      push_worklist (use->user ());
   }
 
   void append_users_term (jit_terminator *term);
 
   void track_value (jit_value *value)
   {
     if (value->type ())
       constants.push_back (value);
