# HG changeset patch
# User Rik <rik@octave.org>
# Date 1545031248 28800
#      Sun Dec 16 23:20:48 2018 -0800
# Node ID 481708dbc540238ce76539562a080439229b2033
# Parent  78c4aadfbfd91550880942838f5d78cb9ba54c2e
movfun.m: Implement <numeric scalar> as value for "Endpoints" property for Matlab compatibility.

* movfun.m: Write more documentation for "fill" value for "Endpoints" property.
Delete documentation for "zero" value.  Add documentation for <user_value> as
a value for "Endpoints" property.  Remove "zero" from list valid_bc of possible
bc functions.  Change InputParser validation function for Endpoints to also
accept a numeric scalar in addition to valid_bc.  Decode "Endpoints" property
and if it is numeric then initialize the replacement value in replaceval_bc
function.  Replace "zero" in BIST tests with numeric value 0.
* movfun.m (replaceval_bc): New subfunction that replaces values in window
outside the original data with a specified value.

diff --git a/scripts/signal/movfun.m b/scripts/signal/movfun.m
--- a/scripts/signal/movfun.m
+++ b/scripts/signal/movfun.m
@@ -26,17 +26,17 @@
 ## Apply function @var{fcn} to a moving window of length @var{wlen} on data
 ## @var{x}.
 ##
 ## If @var{wlen} is a scalar, the function @var{fcn} is applied to a moving
 ## window of length @var{wlen}.  When @var{wlen} is an odd number the window is
 ## symmetric and includes @code{(@var{wlen} - 1) / 2} elements on either side
 ## of the central element.  For example, when calculating the output at
 ## index 5 with a window length of 3, @code{movfun} uses data elements
-## @code{[4, 5, 6].  If @var{wlen} is an even number, the window is asymmetric
+## @code{[4, 5, 6]}.  If @var{wlen} is an even number, the window is asymmetric
 ## and has @code{@var{wlen}/2} elements to the left of the central element
 ## and @code{@var{wlen}/2 - 1} elements to the right of the central element.
 ## For example, when calculating the output at index 5 with a window length of
 ## 4, @code{movfun} uses data elements @code{[3, 4, 5, 6]}.
 ##
 ## If @var{wlen} is an array with two elements @w{@code{[@var{nb}, @var{na}]}},
 ## the function is applied to a moving window @code{-@var{nb}:@var{na}}.  This
 ## window includes @var{nb} number of elements @strong{before} the current
@@ -89,29 +89,37 @@
 ##
 ## @item @qcode{"periodic"}
 ## The window is wrapped around so that
 ## @code{@var{y}(1) = @var{fcn} ([@var{x}(end-@var{k}:end),
 ## @var{x}(1:@var{k})])}, where @var{k} is the radius of the window.  For
 ## example, with a window of length 3,
 ## @code{@var{y}(1) = @var{fcn} ([@var{x}(end-1:end), @var{x}(1)])},
 ##
-## @item @qcode{"zero"}
-## The array is pre-padded and post-padded with zeros to exactly contain the
-## window.  For example, with a window of length 3,
-## @code{@var{y}(1) = @var{fcn} ([0, @var{x}(1:2)])}, and
-## @code{@var{y}(end) = @var{fcn} ([@var{x}(end-1:end), 0])}.
+## @item @qcode{"fill"}
+## Any window elements outside the data array are replaced by @code{NaN}.  For
+## example, with a window of length 3,
+## @code{@var{y}(1) = @var{fcn} ([NaN, @var{x}(1:2)])}, and
+## @code{@var{y}(end) = @var{fcn} ([@var{x}(end-1:end), NaN])}.
+## This option usually results in @var{y} having @code{NaN} values at the
+## boundaries, although it is influenced by how @var{fcn} handles @code{NaN},
+## and also by the property @qcode{"nancond"}.
+##
+## @item @var{user_value}
+## Any window elements outside the data array are replaced by the specified
+## value @var{user_value} which must be a numeric scalar.  For example, with a
+## window of length 3,
+## @code{@var{y}(1) = @var{fcn} ([@var{user_value}, @var{x}(1:2)])}, and
+## @code{@var{y}(end) = @var{fcn} ([@var{x}(end-1:end), @var{user_value}])}.
+## A common choice for @var{user_value} is 0.
 ##
 ## @item @qcode{"same"}
 ## The resulting array @var{y} has the same values as @var{x} at the
 ## boundaries.
 ##
-## @item @qcode{"fill"}
-## The resulting array @var{y} has @code{NaN} at the boundaries.
-##
 ## @end table
 ##
 ## Note that for some of these values, the window size at the boundaries is not
 ## the same as in the middle part, and @var{fcn} must work with these cases.
 ##
 ## @item @qcode{"nancond"}
 ## Controls whether @code{NaN} or @code{NA} values should be excluded (value:
 ## @qcode{"omitnan"}), or included (value: @qcode{"includenan"}) in the
@@ -146,32 +154,32 @@
 ## @end deftypefn
 
 function y = movfun (fcn, x, wlen, varargin)
 
   if (nargin < 3)
     print_usage ();
   endif
 
-  valid_bc = {"shrink", "periodic", "same", "zero", "fill"};
+  valid_bc = {"shrink", "periodic", "same", "fill"};
 
   persistent dispatch;
   if (isempty (dispatch))
     dispatch = struct ();
     for k = valid_bc
       cmd = sprintf ("dispatch.%s = @%s_bc;", k{1}, k{1});
       eval (cmd);
     endfor
   endif
 
   ## Parse input arguments
   parser = inputParser ();
   parser.FunctionName = "movfun";
   parser.addParamValue ("Endpoints", "shrink", ...
-    @(x) any (strcmpi (x, valid_bc)));
+    @(x) any (strcmpi (x, valid_bc)) || (isscalar (x) && isnumeric (x)));
   parser.addParamValue ("dim", [], ...
     @(d) isempty (d) || (isscalar (d) && isindex (d, ndims (x))));
   parser.addParamValue ("nancond", "omitnan", ...
     @(x) any (strcmpi (x, {"omitnan", "includenan"})));
   parser.addParamValue ("outdim", [], ...
     @(d) isempty (d) || (isvector (d) && isindex (d)));
 
   parser.parse (varargin{:});
@@ -202,34 +210,39 @@ function y = movfun (fcn, x, wlen, varar
     ## FIXME: Any further tests needed to validate form: wlen = [nb, na] ???
   else
     error ("Octave:invalid-input-arg",
            "movfun: WLEN must be a scalar or 2-element array of integers >= 0");
   endif
 
   ## Check that array is longer than WLEN at dimension DIM.  At least one full
   ## window must fit.  Function max is used to include the case when WLEN is an
-  ## array. 
+  ## array.
   ## FIXME: Consider using bc to decide what to do here.
   if (max (wlen) > szx(dim))
       error ("Octave:invalid-input-arg", ...
              "movfun: window length WLEN (%d) must be shorter than length along DIM%d (%d)", ...
              max (wlen), dim, szx(dim));
   endif
 
   ## Move the desired dim to the 1st dimension
   nd    = length (szx);                  # number of dimensions
   dperm = [dim, 1:(dim-1), (dim+1):nd];  # permutation of dimensions
   x     = permute (x, dperm);            # permute dim to first dimensions
   ncols = prod (szx(dperm(2:end)));      # rest dimensions as single column
   N     = szx(dperm(1));                 # length of dim
   x     = reshape (x, N, ncols);         # reshape input
 
   ## Obtain function for boundary conditions
-  bcfunc = dispatch.(tolower (bc));
+  if (isnumeric (bc))
+    bcfunc = @replaceval_bc;
+    bcfunc (true, bc);  # initialize replaceval function with value
+  else
+    bcfunc = dispatch.(tolower (bc));
+  endif
 
   ## Obtain slicer
   [slc, C, Cpre, Cpos, win] = movslice (N, wlen);
 
   ## FIXME: Validation doesn't seem to work correctly (noted 12/16/2018).
   ## Validate that outdim makes sense
   tmp     = fcn (zeros (length (win), 1));  # output for window
   noutdim = length (tmp);                   # number of output dimensions
@@ -317,49 +330,64 @@ endfunction
 function y = same_bc (fcn, x, idxp, win)
   idx          = idxp + win;
   idx(idx < 1) = 1;
   N            = length (x);
   idx(idx > N) = N;
   y            = fcn (x(idx));
 endfunction
 
-## Apply "zero" boundary conditions
-## Window is padded at beginning and end with zeros
-function y = zero_bc (fcn, x, idxp, win, wlen)
+## Apply replacement value boundary conditions
+## Window is padded at beginning and end with user-specified value.
+function y = replaceval_bc (fcn, x, idxp, win, wlen)
+
+  persistent substitute;
+
+  ## In-band method to initialize substitute value
+  if (islogical (fcn))
+    substitute = x;
+    return;
+  endif
+
+  ## Pad beginning and end of window with specified value.
   if (isscalar (wlen))
     wlen = [wlen, wlen];
   endif
   N = length (x);
   if (min (idxp) == 1)
-    x = prepad (x, N + wlen(1));
+    x = prepad (x, N + wlen(1), substitute);
     idx = idxp + win + wlen(1);
   elseif (max (idxp) == N)
-    x   = postpad (x, N + wlen(2));
+    x   = postpad (x, N + wlen(2), substitute);
     idx = idxp + win;
   endif
+
   y = fcn (x(idx));
+
 endfunction
 
 ## Apply "fill" boundary conditions
+## FIXME: This is incorrect.  This directly changes the output when it
+## must only change the values that @fcn considers.  Some functions do not
+## return NaN when there are NaN inputs such as "min (NaN, 5)".
 ## Window is padded at beginning and end with NaN
 function y = fill_bc (fcn, x, idxp, win, wlen, odim)
   y = NaN (length (idxp), odim);
 endfunction
 
 
 %!demo
 %! clf;
 %! t  = 2 * pi * linspace (0,1,100).';
 %! x  = sin (3 * t);
 %! xn = x + 0.1 * randn (size (x));
 %! x_s = movfun (@mean, xn, 5, "Endpoints", "shrink");
 %! x_p = movfun (@mean, xn, 5, "Endpoints", "periodic");
 %! x_m = movfun (@mean, xn, 5, "Endpoints", "same");
-%! x_z = movfun (@mean, xn, 5, "Endpoints", "zero");
+%! x_z = movfun (@mean, xn, 5, "Endpoints", 0);
 %! x_f = movfun (@mean, xn, 5, "Endpoints", "fill");
 %!
 %! h = plot (t, xn, "o;noisy signal;",
 %!           t, x, "-;true;",
 %!           t, x_s, "-;shrink;",
 %!           t, x_p, "-;periodic;",
 %!           t, x_m, "-;same;",
 %!           t, x_z, "-;zero;",
@@ -494,30 +522,30 @@ endfunction
 %! legend (h(1:2), {"data1", "data2"})
 %! #-----------------------------------------------------------------
 %! # Moving min() and max() on the same window.
 %! # Demo illustrates the use of functions with flat multidimensional output.
 
 %!test
 %! x = (1:10).' + [-3, 0, 4];
 %! ctrfun = @(x) x(2,:);
-%! valid_bc = {"same", "periodic", "zero"};
+%! valid_bc = {"same", "periodic", 0};
 %! for bc = valid_bc
 %!   assert (movfun (ctrfun, x, 3, "Endpoints", bc{1}), x);
 %! endfor
 %! x_ = x; x_([1 end],:) = NaN;
 %! assert (movfun (ctrfun, x, 3, "Endpoints", "fill"), x_);
 %! x_ = x; x_([1 end],:) = x([2 end],:);
 %! assert (movfun (ctrfun, x, 3, "Endpoints", "shrink"), x_);
 
 %!test
 %! ## dim == 2, same as transpose
 %! x = randi (10, 3);
 %! ctrfun = @(x) x(2,:);
-%! valid_bc = {"same", "periodic", "zero"};
+%! valid_bc = {"same", "periodic", 0};
 %! for bc = valid_bc
 %!   assert (movfun (ctrfun, x.', 3, "Endpoints", bc{1}, "dim", 2), x.');
 %! endfor
 %! x_ = x; x_([1 end],:) = NaN;
 %! assert (movfun (ctrfun, x.', 3, "Endpoints", "fill", "dim", 2), x_.');
 %! x_ = x; x_([1 end],:) = x([2 end],:);
 %! assert (movfun (ctrfun, x.', 3, "Endpoints", "shrink", "dim", 2), x_.');
 
@@ -525,17 +553,17 @@ endfunction
 %! x = randi (10, 3, 10, 2);
 %! y = movfun (@(x) x(2,:), x, 3, "Endpoints", "same", "dim", 2);
 %! assert (x, y);
 
 %!test
 %! ## bad zero_bc
 %! x = ones (10, 1);
 %! y = x; y(1:2) = y([end end-1]) = [0.6;0.8];
-%! assert (movfun (@mean, x, 5, "Endpoints", "zero"), y);
+%! assert (movfun (@mean, x, 5, "Endpoints", 0), y);
 
 ## Asymmetric windows
 %!shared x,wlen,wlen0b,wlen0f,ctrfun,xd,UNO,UNOd0b,UNOd0f
 %! x = (1:10).' + [-3, 0, 4];
 %! wlen = [2 1];
 %! wlen0b = [0 2];
 %! wlen0f = [2 0];
 %! ctrfun = @(x) x(wlen(1)+1,:);
@@ -543,35 +571,35 @@ endfunction
 %! UNO = ones (7,1);
 %! UNOd0b = UNOd0f = UNO;
 %! UNOd0b(end-1:end,:) = NaN;
 %! UNOd0f(1:2,:) = NaN;
 
 %!assert (movfun (ctrfun, x, wlen, "Endpoints", "same"), x)
 %!assert (movfun (ctrfun, x, wlen, "Endpoints", "fill"), xd)
 %!assert (movfun (ctrfun, x, wlen, "Endpoints", "periodic"), x)
-%!assert (movfun (ctrfun, x, wlen, "Endpoints", "zero"), x)
+%!assert (movfun (ctrfun, x, wlen, "Endpoints", 0), x)
 ## for shorter x, indexing fails
 %!error movfun (ctrfun, x, wlen, "Endpoints", "shrink")
 
 %!assert (movfun (@min, UNO, wlen0b, "Endpoints", "same"), UNO)
 %!assert (movfun (@min, UNO, wlen0f, "Endpoints", "same"), UNO)
 
 %!assert (movfun (@min, UNO, wlen, "Endpoints", "shrink"), UNO)
 %!assert (movfun (@min, UNO, wlen0b, "Endpoints", "shrink"), UNO)
 %!assert (movfun (@min, UNO, wlen0f, "Endpoints", "shrink"), UNO)
 
 %!assert (movfun (@min, UNO, wlen0b, "Endpoints", "fill"), UNOd0b)
 %!assert (movfun (@min, UNO, wlen0f, "Endpoints", "fill"), UNOd0f)
 
 %!assert (movfun (@min, UNO, wlen0b, "Endpoints", "periodic"), UNO)
 %!assert (movfun (@min, UNO, wlen0f, "Endpoints", "periodic"), UNO)
 
-%!assert (movfun (@max, UNO, wlen0b, "Endpoints", "zero"), UNO)
-%!assert (movfun (@max, UNO, wlen0f, "Endpoints", "zero"), UNO)
+%!assert (movfun (@max, UNO, wlen0b, "Endpoints", 0), UNO)
+%!assert (movfun (@max, UNO, wlen0f, "Endpoints", 0), UNO)
 
 ## Multidimensional output
 %!assert(size(movfun (@(x)[min(x) max(x)], (1:10).', 3)), [10 2])
 %!assert(size(movfun (@(x)[min(x) max(x)], cumsum(ones(10,5),2), 3)), [10 5 2])
 ## outdim > dim
 %!error (movfun (@(x) [min(x), max(x)], (1:10).', 3, "Outdim", 3))
 
 ## Test input validation
