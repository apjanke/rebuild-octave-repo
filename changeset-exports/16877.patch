# HG changeset patch
# User Rik <rik@octave.org>
# Date 1372630566 25200
#      Sun Jun 30 15:16:06 2013 -0700
# Node ID 5482cd26311a7f275cc1a4a90cf623b531bcdaa5
# Parent  9e0618443c2b5afdcb084a3c96018958992f4b34
Rename enable_jit_compiler to jit_enable, enable_jit_debugging to debug_jit.
Rename command line option --debug-jit to --jit-debug.

* doc/interpreter/basics.txi: Rename command line option --jit-debug to --debug-jit.

* libinterp/interp-core/pt-jit.cc(Fenable_jit_debugging, Fenable_jit_compiler): Rename
functions and all references to new names.

*libinterp/octave.cc(octave_process_command_line): Update references to Fenable_jit_debugging.
Update long_opts struct and usage_string to refer to debug-jit rather than jit-debug.

diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -77,16 +77,20 @@ only need to specified in extraordinary 
 @item  --debug
 @itemx -d
 @cindex @code{--debug}
 @cindex @code{-d}
 Enter parser debugging mode.  Using this option will cause Octave's
 parser to print a lot of information about the commands it reads, and is
 probably only useful if you are actually trying to debug the parser.
 
+@item --debug-jit
+@cindex @code{--debug-jit}
+Enable JIT compiler debugging and tracing.
+
 @item --doc-cache-file @var{filename}
 @cindex @code{--doc-cache-file @var{filename}}
 Specify the name of the doc cache file to use.  The value of @var{filename}
 specified on the command line will override any value of
 @w{@env{OCTAVE_DOC_CACHE_FILE}} found in the environment, but not any commands
 in the system or user startup files that use the @code{doc_cache_file}
 function.
 
@@ -147,20 +151,16 @@ commands in the system or user startup f
 @item  --interactive
 @itemx -i
 @cindex @code{--interactive}
 @cindex @code{-i}
 Force interactive behavior.  This can be useful for running Octave via a
 remote shell command or inside an Emacs shell buffer.  For another way
 to run Octave within Emacs, see @ref{Emacs Octave Support}.
 
-@item --jit-debug
-@cindex @code{--jit-debug}
-Enable JIT compiler debugging and tracing.
-
 @item --line-editing
 @cindex @code{--line-editing}
 Force readline use for command-line editing.
 
 @item --no-gui
 @cindex @code{--no-gui}
 Disable the graphical user interface (GUI) and use the command line
 interface (CLI) instead.
diff --git a/libinterp/interp-core/pt-jit.cc b/libinterp/interp-core/pt-jit.cc
--- a/libinterp/interp-core/pt-jit.cc
+++ b/libinterp/interp-core/pt-jit.cc
@@ -35,19 +35,19 @@ along with Octave; see the file COPYING.
 #include "pt-all.h"
 #include "pt-jit.h"
 #include "sighandlers.h"
 #include "symtab.h"
 #include "variables.h"
 
 #ifdef HAVE_LLVM
 
-static bool Venable_jit_debugging = false;
-
-static bool Venable_jit_compiler = true;
+static bool Vdebug_jit = false;
+
+static bool Vjit_enable = true;
 
 #include <llvm/Analysis/CallGraph.h>
 #include <llvm/Analysis/Passes.h>
 #include <llvm/Analysis/Verifier.h>
 #include <llvm/Bitcode/ReaderWriter.h>
 #include <llvm/LLVMContext.h>
 #include <llvm/ExecutionEngine/ExecutionEngine.h>
 #include <llvm/ExecutionEngine/JIT.h>
@@ -1939,17 +1939,17 @@ tree_jit::do_execute (octave_user_functi
 }
 
 bool
 tree_jit::enabled (void)
 {
   // Ideally, we should only disable JIT if there is a breakpoint in the code we
   // are about to run. However, we can't figure this out in O(1) time, so we
   // conservatively check for the existence of any breakpoints.
-  return Venable_jit_compiler && ! bp_table::have_breakpoints ()
+  return Vjit_enable && ! bp_table::have_breakpoints ()
     && ! Vdebug_on_interrupt && ! Vdebug_on_error;
 }
 
 size_t
 tree_jit::trip_count (const octave_value& bounds) const
 {
   if (bounds.is_range ())
     {
@@ -1960,23 +1960,23 @@ tree_jit::trip_count (const octave_value
   // unsupported type
   return 0;
 }
 
 
 void
 tree_jit::optimize (llvm::Function *fn)
 {
-  if (Venable_jit_debugging)
+  if (Vdebug_jit)
     llvm::verifyModule (*module);
 
   module_pass_manager->run (*module);
   pass_manager->run (*fn);
 
-  if (Venable_jit_debugging)
+  if (Vdebug_jit)
     {
       std::string error;
       llvm::raw_fd_ostream fout ("test.bc", error,
                                  llvm::raw_fd_ostream::F_Binary);
       llvm::WriteBitcodeToFile (module, fout);
     }
 }
 
@@ -1995,17 +1995,17 @@ jit_function_info::jit_function_info (tr
 
   try
     {
       jit_convert conv (fcn, argument_types);
       jit_infer infer (conv.get_factory (), conv.get_blocks (),
                        conv.get_variable_map ());
       infer.infer ();
 
-      if (Venable_jit_debugging)
+      if (Vdebug_jit)
         {
           jit_block_list& blocks = infer.get_blocks ();
           blocks.label ();
           std::cout << "-------------------- Compiling function ";
           std::cout << "--------------------\n";
 
           tree_print_code tpc (std::cout);
           tpc.visit_octave_user_function_header (fcn);
@@ -2016,17 +2016,17 @@ jit_function_info::jit_function_info (tr
 
       jit_factory& factory = conv.get_factory ();
       llvm::Module *module = tjit.get_module ();
       jit_convert_llvm to_llvm;
       raw_fn = to_llvm.convert_function (module, infer.get_blocks (),
                                          factory.constants (), fcn,
                                          argument_types);
 
-      if (Venable_jit_debugging)
+      if (Vdebug_jit)
         {
           std::cout << "-------------------- raw function ";
           std::cout << "--------------------\n";
           std::cout << *raw_fn.to_llvm () << std::endl;
           llvm::verifyFunction (*raw_fn.to_llvm ());
         }
 
       std::string wrapper_name = fcn.name () + "_wrapper";
@@ -2064,33 +2064,33 @@ jit_function_info::jit_function_info (tr
           result = builder.CreateBitCast (zero, any_t->to_llvm ());
         }
 
       wrapper.do_return (builder, result);
 
       llvm::Function *llvm_function = wrapper.to_llvm ();
       tjit.optimize (llvm_function);
 
-      if (Venable_jit_debugging)
+      if (Vdebug_jit)
         {
           std::cout << "-------------------- optimized and wrapped ";
           std::cout << "--------------------\n";
           std::cout << *llvm_function << std::endl;
           llvm::verifyFunction (*llvm_function);
         }
 
       llvm::ExecutionEngine* engine = tjit.get_engine ();
       void *void_fn = engine->getPointerToFunction (llvm_function);
       function = reinterpret_cast<jited_function> (void_fn);
     }
   catch (const jit_fail_exception& e)
     {
       argument_types.clear ();
 
-      if (Venable_jit_debugging)
+      if (Vdebug_jit)
         {
           if (e.known ())
             std::cout << "jit fail: " << e.what () << std::endl;
         }
 
       wrapper.erase ();
       raw_fn.erase ();
     }
@@ -2218,17 +2218,17 @@ jit_info::compile (tree_jit& tjit, tree&
   try
     {
       jit_convert conv (tee, for_bounds);
       jit_infer infer (conv.get_factory (), conv.get_blocks (),
                        conv.get_variable_map ());
 
       infer.infer ();
 
-      if (Venable_jit_debugging)
+      if (Vdebug_jit)
         {
           jit_block_list& blocks = infer.get_blocks ();
           blocks.label ();
           std::cout << "-------------------- Compiling tree --------------------\n";
           std::cout << tee.str_print_code () << std::endl;
           blocks.print (std::cout, "octave jit ir");
         }
 
@@ -2237,35 +2237,35 @@ jit_info::compile (tree_jit& tjit, tree&
       llvm_function = to_llvm.convert_loop (tjit.get_module (),
                                             infer.get_blocks (),
                                             factory.constants ());
       arguments = to_llvm.get_arguments ();
       bounds = conv.get_bounds ();
     }
   catch (const jit_fail_exception& e)
     {
-      if (Venable_jit_debugging)
+      if (Vdebug_jit)
         {
           if (e.known ())
             std::cout << "jit fail: " << e.what () << std::endl;
         }
     }
 
   if (llvm_function)
     {
-      if (Venable_jit_debugging)
+      if (Vdebug_jit)
         {
           std::cout << "-------------------- llvm ir --------------------";
           std::cout << *llvm_function << std::endl;
           llvm::verifyFunction (*llvm_function);
         }
 
       tjit.optimize (llvm_function);
 
-      if (Venable_jit_debugging)
+      if (Vdebug_jit)
         {
           std::cout << "-------------------- optimized llvm ir "
                     << "--------------------\n";
           std::cout << *llvm_function << std::endl;
         }
 
       void *void_fn = engine->getPointerToFunction (llvm_function);
       function = reinterpret_cast<jited_function> (void_fn);
@@ -2277,55 +2277,55 @@ jit_info::find (const vmap& extra_vars, 
 {
   vmap::const_iterator iter = extra_vars.find (vname);
   return iter == extra_vars.end () ? symbol_table::varval (vname)
     : *iter->second;
 }
 
 #endif
 
-DEFUN (enable_jit_debugging, args, nargout,
+DEFUN (debug_jit, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {@var{val} =} enable_jit_debugging ()\n\
-@deftypefnx {Built-in Function} {@var{old_val} =} enable_jit_debugging (@var{new_val})\n\
-@deftypefnx {Built-in Function} {} enable_jit_debugging (@var{new_val}, \"local\")\n\
+@deftypefn  {Built-in Function} {@var{val} =} debug_jit ()\n\
+@deftypefnx {Built-in Function} {@var{old_val} =} debug_jit (@var{new_val})\n\
+@deftypefnx {Built-in Function} {} debug_jit (@var{new_val}, \"local\")\n\
 Query or set the internal variable that determines whether\n\
 debugging/tracing is enabled for Octave's JIT compiler.\n\
 \n\
 When called from inside a function with the \"local\" option, the variable is\n\
 changed locally for the function and any subroutines it calls.  The original\n\
 variable value is restored when exiting the function.\n\
-@seealso{enable_jit_compiler}\n\
+@seealso{jit_enable}\n\
 @end deftypefn")
 {
 #if defined (HAVE_LLVM)
-  return SET_INTERNAL_VARIABLE (enable_jit_debugging);
+  return SET_INTERNAL_VARIABLE (debug_jit);
 #else
-  warning ("enable_jit_debugging: JIT compiling not available in this version of Octave");
+  warning ("debug_jit: JIT compiling not available in this version of Octave");
   return octave_value ();
 #endif
 }
 
-DEFUN (enable_jit_compiler, args, nargout,
+DEFUN (jit_enable, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn  {Built-in Function} {@var{val} =} enable_jit_compiler ()\n\
-@deftypefnx {Built-in Function} {@var{old_val} =} enable_jit_compiler (@var{new_val})\n\
-@deftypefnx {Built-in Function} {} enable_jit_compiler (@var{new_val}, \"local\")\n\
+@deftypefn  {Built-in Function} {@var{val} =} jit_enable ()\n\
+@deftypefnx {Built-in Function} {@var{old_val} =} jit_enable (@var{new_val})\n\
+@deftypefnx {Built-in Function} {} jit_enable (@var{new_val}, \"local\")\n\
 Query or set the internal variable that enables Octave's JIT compiler.\n\
 \n\
 When called from inside a function with the \"local\" option, the variable is\n\
 changed locally for the function and any subroutines it calls.  The original\n\
 variable value is restored when exiting the function.\n\
-@seealso{enable_jit_debugging}\n\
+@seealso{debug_jit}\n\
 @end deftypefn")
 {
 #if defined (HAVE_LLVM)
-  return SET_INTERNAL_VARIABLE (enable_jit_compiler);
+  return SET_INTERNAL_VARIABLE (jit_enable);
 #else
-  warning ("enable_jit_compiler: JIT compiling not available in this version of Octave");
+  warning ("jit_enable: JIT compiling not available in this version of Octave");
   return octave_value ();
 #endif
 }
 
 /*
 Test some simple cases that compile.
 
 %!test
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -150,21 +150,21 @@ static std::string exec_path;
 static std::string image_path;
 
 // If TRUE, ignore the window system even if it is available.
 // (--no-window-system, -W)
 static bool no_window_system = false;
 
 // Usage message
 static const char *usage_string =
-  "octave [-HVWdfhiqvx] [--debug] [--doc-cache-file file]\n\
+  "octave [-HVWdfhiqvx] [--debug] [--debug-jit] [--doc-cache-file file]\n\
        [--echo-commands] [--eval CODE] [--exec-path path]\n\
        [--force-gui] [--help] [--image-path path]\n\
        [--info-file file] [--info-program prog] [--interactive]\n\
-       [--jit-debug] [--line-editing] [--no-gui] [--no-history]\n\
+       [--line-editing] [--no-gui] [--no-history]\n\
        [--no-init-file] [--no-init-path] [--no-jit-compiler]\n\
        [--no-line-editing] [--no-site-file] [--no-window-system]\n\
        [--norc] [-p path] [--path path] [--persist] [--silent]\n\
        [--traditional] [--verbose] [--version] [file]";
 
 // This is here so that it's more likely that the usage message and
 // the real set of options will agree.  Note: the '+' must come first
 // to prevent getopt from permuting arguments!
@@ -187,42 +187,42 @@ static bool traditional = false;
 #define BUILT_IN_DOCSTRINGS_FILE_OPTION 1
 #define DOC_CACHE_FILE_OPTION 2
 #define EVAL_OPTION 3
 #define EXEC_PATH_OPTION 4
 #define FORCE_GUI_OPTION 5
 #define IMAGE_PATH_OPTION 6
 #define INFO_FILE_OPTION 7
 #define INFO_PROG_OPTION 8
-#define JIT_DEBUG_OPTION 9
+#define DEBUG_JIT_OPTION 9
 #define LINE_EDITING_OPTION 10
 #define NO_GUI_OPTION 11
 #define NO_INIT_FILE_OPTION 12
 #define NO_INIT_PATH_OPTION 13
 #define NO_JIT_COMPILER_OPTION 14
 #define NO_LINE_EDITING_OPTION 15
 #define NO_SITE_FILE_OPTION 16
 #define PERSIST_OPTION 17
 #define TEXI_MACROS_FILE_OPTION 18
 #define TRADITIONAL_OPTION 19
 struct option long_opts[] = {
   { "braindead",                no_argument,       0, TRADITIONAL_OPTION },
   { "built-in-docstrings-file", required_argument, 0, BUILT_IN_DOCSTRINGS_FILE_OPTION },
   { "debug",                    no_argument,       0, 'd' },
+  { "debug-jit",                no_argument,       0, DEBUG_JIT_OPTION },
   { "doc-cache-file",           required_argument, 0, DOC_CACHE_FILE_OPTION },
   { "echo-commands",            no_argument,       0, 'x' },
   { "eval",                     required_argument, 0, EVAL_OPTION },
   { "exec-path",                required_argument, 0, EXEC_PATH_OPTION },
   { "force-gui",                no_argument,       0, FORCE_GUI_OPTION },
   { "help",                     no_argument,       0, 'h' },
   { "image-path",               required_argument, 0, IMAGE_PATH_OPTION },
   { "info-file",                required_argument, 0, INFO_FILE_OPTION },
   { "info-program",             required_argument, 0, INFO_PROG_OPTION },
   { "interactive",              no_argument,       0, 'i' },
-  { "jit-debug",                no_argument,       0, JIT_DEBUG_OPTION },
   { "line-editing",             no_argument,       0, LINE_EDITING_OPTION },
   { "no-gui",                   no_argument,       0, NO_GUI_OPTION },
   { "no-history",               no_argument,       0, 'H' },
   { "no-init-file",             no_argument,       0, NO_INIT_FILE_OPTION },
   { "no-init-path",             no_argument,       0, NO_INIT_PATH_OPTION },
   { "no-jit-compiler",          no_argument,       0, NO_JIT_COMPILER_OPTION },
   { "no-line-editing",          no_argument,       0, NO_LINE_EDITING_OPTION },
   { "no-site-file",             no_argument,       0, NO_SITE_FILE_OPTION },
@@ -519,27 +519,27 @@ verbose_usage (void)
   std::cout << OCTAVE_NAME_VERSION_COPYRIGHT_COPYING_AND_WARRANTY "\n\
 \n\
 Usage: octave [options] [FILE]\n\
 \n\
 Options:\n\
 \n\
   --built-in-docstrings-file FILE Use docs for built-ins from FILE.\n\
   --debug, -d             Enter parser debugging mode.\n\
+  --debug-jit             Enable JIT compiler debugging/tracing.\n\
   --doc-cache-file FILE   Use doc cache file FILE.\n\
   --echo-commands, -x     Echo commands as they are executed.\n\
   --eval CODE             Evaluate CODE.  Exit when done unless --persist.\n\
   --exec-path PATH        Set path for executing subprograms.\n\
   --force-gui             Force graphical user interface to start.\n\
   --help, -h,             Print short help message and exit.\n\
   --image-path PATH       Add PATH to head of image search path.\n\
   --info-file FILE        Use top-level info file FILE.\n\
   --info-program PROGRAM  Use PROGRAM for reading info files.\n\
   --interactive, -i       Force interactive behavior.\n\
-  --jit-debug             Enable JIT compiler debugging/tracing.\n\
   --line-editing          Force readline use for command-line editing.\n\
   --no-gui                Disable the graphical user interface.\n\
   --no-history, -H        Don't save commands to the history list\n\
   --no-init-file          Don't read the ~/.octaverc or .octaverc files.\n\
   --no-init-path          Don't initialize function search path.\n\
   --no-jit-compiler       Disable the JIT compiler.\n\
   --no-line-editing       Don't use readline for command-line editing.\n\
   --no-site-file          Don't read the site-wide octaverc file.\n\
@@ -771,18 +771,18 @@ octave_process_command_line (int argc, c
             Finfo_file (octave_value (optarg));
           break;
 
         case INFO_PROG_OPTION:
           if (optarg)
             Finfo_program (octave_value (optarg));
           break;
 
-        case JIT_DEBUG_OPTION:
-          Fenable_jit_debugging (octave_value (true));
+        case DEBUG_JIT_OPTION:
+          Fdebug_jit (octave_value (true));
           break;
 
         case LINE_EDITING_OPTION:
           forced_line_editing = true;
           break;
 
         case NO_GUI_OPTION:
           no_gui_option = true;
@@ -792,17 +792,17 @@ octave_process_command_line (int argc, c
           read_init_files = false;
           break;
 
         case NO_INIT_PATH_OPTION:
           set_initial_path = false;
           break;
 
         case NO_JIT_COMPILER_OPTION:
-          Fenable_jit_compiler (octave_value (false));
+          Fjit_enable (octave_value (false));
           break;
 
         case NO_LINE_EDITING_OPTION:
           line_editing = false;
           break;
 
         case NO_SITE_FILE_OPTION:
           read_site_files = 0;
