# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1290069053 18000
#      Thu Nov 18 03:30:53 2010 -0500
# Node ID a117dc8ea1b934ba90f77add3c5698f1383f7440
# Parent  79b77d71d01e6936ee7c2dbc2bf70abf55f7fe83
charMatrix::row_as_string: never strip trailing nul characters

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-11-18  John W. Eaton  <jwe@octave.org>
+
+	* chMatrix.cc (charMatrix::row_as_string): Never strip trailing
+	nul characters.  Bug #31689.
+
 2010-11-12  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.am (LIBOCTAVE_SOURCES): Delete variable.
 	(liboctave_la_SOURCES): Include $(LIBOCTAVE_CXX_SOURCES) and
 	$(LIBOCTAVE_C_SOURCES) in this list instead of
 	$(LIBOCTAVE_SOURCES).
 	(nodist_liboctave_la_SOURCES): New variable.
 	(octinclude_HEADERS): Don't include $(BUILT_INCS) in the list.
diff --git a/liboctave/chMatrix.cc b/liboctave/chMatrix.cc
--- a/liboctave/chMatrix.cc
+++ b/liboctave/chMatrix.cc
@@ -126,17 +126,17 @@ charMatrix::insert (const char *s, octav
 charMatrix&
 charMatrix::insert (const charMatrix& a, octave_idx_type r, octave_idx_type c)
 {
   Array<char>::insert (a, r, c);
   return *this;
 }
 
 std::string
-charMatrix::row_as_string (octave_idx_type r, bool strip_ws, bool raw) const 
+charMatrix::row_as_string (octave_idx_type r, bool strip_ws) const 
 {
   std::string retval;
 
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
 
   if (r == 0 && nr == 0 && nc == 0)
     return retval;
@@ -147,32 +147,23 @@ charMatrix::row_as_string (octave_idx_ty
       return retval;
     }
 
   retval.resize (nc, '\0');
 
   for (octave_idx_type i = 0; i < nc; i++)
     retval[i] = elem (r, i);
 
-  if (! raw)
+  if (strip_ws)
     {
-      if (strip_ws)
+      while (--nc >= 0)
         {
-          while (--nc >= 0)
-            {
-              char c = retval[nc];
-              if (c && c != ' ')
-                break;
-            }
-        }
-      else
-        {
-          while (--nc >= 0)
-            if (retval[nc])
-              break;
+          char c = retval[nc];
+          if (c && c != ' ')
+            break;
         }
 
       retval.resize (nc+1);
     }
 
   return retval;
 }
 
diff --git a/liboctave/chMatrix.h b/liboctave/chMatrix.h
--- a/liboctave/chMatrix.h
+++ b/liboctave/chMatrix.h
@@ -64,17 +64,17 @@ public:
 
   charMatrix transpose (void) const { return Array<char>::transpose (); }
 
   // destructive insert/delete/reorder operations
 
   charMatrix& insert (const char *s, octave_idx_type r, octave_idx_type c);
   charMatrix& insert (const charMatrix& a, octave_idx_type r, octave_idx_type c);
 
-  std::string row_as_string (octave_idx_type, bool strip_ws = false, bool raw = false) const;
+  std::string row_as_string (octave_idx_type, bool strip_ws = false) const;
 
   // resize is the destructive equivalent for this one
 
   charMatrix extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const;
 
   charMatrix diag (octave_idx_type k = 0) const;
 
   boolMatrix all (int dim = -1) const;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2010-11-18  John W. Eaton  <jwe@octave.org>
+
+	Bug # 31689.
+
+	* ov-str-mat.cc (octave_char_matrix_str::save_ascii):
+	Adapt to change in charMatrix::row_as_string function.
+	* DLD-FUNCTIONS/md5sum.cc: New tests.
+
 2010-11-17  John W. Eaton  <jwe@octave.org>
 
 	* pt-fcn-handle.cc (tree_anon_fcn_handle::rvalue1): Also stash
 	the directory name of the parent function in the newly created
 	anonymous function.  Bug #31484.
 
 2010-11-17  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/DLD-FUNCTIONS/md5sum.cc b/src/DLD-FUNCTIONS/md5sum.cc
--- a/src/DLD-FUNCTIONS/md5sum.cc
+++ b/src/DLD-FUNCTIONS/md5sum.cc
@@ -81,8 +81,21 @@ string @var{str}.\n\
 
               retval = oct_md5_file (str);
             }
         }
     }
 
   return retval;
 }
+
+/*
+%!assert (md5sum ("abc\0", true), "147a664a2ca9410911e61986d3f0d52a");
+
+%!test
+%! tfile = tmpnam ();
+%! fid = fopen (tfile, "wb");
+%! fwrite (fid, "abc\0");
+%! fclose (fid);
+%! assert (md5sum (tfile), "147a664a2ca9410911e61986d3f0d52a");
+%! unlink (tfile);
+*/
+
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -288,17 +288,17 @@ octave_char_matrix_str::save_ascii (std:
       // backward compatiability. Makes load_ascii much more complex!!
       charMatrix chm = char_matrix_value ();
       octave_idx_type elements = chm.rows ();
       os << "# elements: " << elements << "\n";
       for (octave_idx_type i = 0; i < elements; i++)
         {
           unsigned len = chm.cols ();
           os << "# length: " << len << "\n";
-          std::string tstr = chm.row_as_string (i, false, true);
+          std::string tstr = chm.row_as_string (i);
           const char *tmp = tstr.data ();
           if (tstr.length () > len)
             panic_impossible ();
           os.write (tmp, len);
           os << "\n";
         }
     }
 
