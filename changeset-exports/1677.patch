# HG changeset patch
# User jwe
# Date 820182123 0
#      Thu Dec 28 20:22:03 1995 +0000
# Node ID ef7f804cb7225fa0647185d47ab6eac9c270a9b0
# Parent  628c9dcd081dfd6d9a46124bfe6540b87458139f
[project @ 1995-12-28 20:20:29 by jwe]

diff --git a/liboctave/CRowVector.cc b/liboctave/CRowVector.cc
--- a/liboctave/CRowVector.cc
+++ b/liboctave/CRowVector.cc
@@ -431,32 +431,32 @@ operator * (const ComplexRowVector& v, c
   int len = v.length ();
   if (a.rows () != len)
     {
       (*current_liboctave_error_handler)
 	("nonconformant vector multiplication attempted");
       return ComplexRowVector ();
     }
 
-  if (len == 0 || a.cols () == 0)
-    return ComplexRowVector (0);
+  if (len == 0)
+    return ComplexRowVector (a.cols (), 0.0);
 
   // Transpose A to form A'*x == (x'*A)'
 
   int a_nr = a.rows ();
   int a_nc = a.cols ();
 
   int ld = a_nr;
 
-  Complex *y = new Complex [len];
+  Complex *y = new Complex [a_nc];
 
   F77_FCN (zgemv, ZGEMV) ("T", a_nc, a_nr, 1.0, a.data (), ld,
 			  v.data (), 1, 0.0, y, 1, 1L); 
 
-  return ComplexRowVector (y, len);
+  return ComplexRowVector (y, a_nc);
 }
 
 ComplexRowVector
 operator * (const RowVector& v, const ComplexMatrix& a)
 {
   ComplexRowVector tmp (v);
   return tmp * a;
 }
diff --git a/liboctave/dRowVector.cc b/liboctave/dRowVector.cc
--- a/liboctave/dRowVector.cc
+++ b/liboctave/dRowVector.cc
@@ -215,32 +215,32 @@ operator * (const RowVector& v, const Ma
   int len = v.length ();
   if (a.rows () != len)
     {
       (*current_liboctave_error_handler)
 	("nonconformant vector multiplication attempted");
       return RowVector ();
     }
 
-  if (len == 0 || a.cols () == 0)
-    return RowVector (0);
+  if (len == 0)
+    return RowVector (a.cols (), 0.0);
 
   // Transpose A to form A'*x == (x'*A)'
 
   int a_nr = a.rows ();
   int a_nc = a.cols ();
 
   int ld = a_nr;
 
-  double *y = new double [len];
+  double *y = new double [a_nc];
 
   F77_FCN (dgemv, DGEMV) ("T", a_nc, a_nr, 1.0, a.data (), ld,
 			  v.data (), 1, 0.0, y, 1, 1L);
 
-  return RowVector (y, len);
+  return RowVector (y, a_nc);
 }
 
 // other operations
 
 RowVector
 map (d_d_Mapper f, const RowVector& a)
 {
   RowVector b (a);
