# HG changeset patch
# User Rik <rik@octave.org>
# Date 1543663502 28800
#      Sat Dec 01 03:25:02 2018 -0800
# Node ID e5a40e1395fb079d0a965d0ef65daf5188f167dd
# Parent  e2626799445f60f24e01d0906825e122504dad0f
polyeig.m: Simplify code by using nargin.

* polyeig.m: Use pre-defined variable nargin rather than
'nin = numel (varargin)'.  Use in-place operator with broadcasting './=' rather
than './ diag (t)'.  Align code for readability.

diff --git a/scripts/polynomial/polyeig.m b/scripts/polynomial/polyeig.m
--- a/scripts/polynomial/polyeig.m
+++ b/scripts/polynomial/polyeig.m
@@ -35,73 +35,71 @@
 ## Note that the eigenvalues @var{z} are the zeros of the matrix polynomial.
 ## @var{z} is a row vector with @code{@var{n}*@var{l}} elements.  @var{v} is a
 ## matrix (@var{n} x @var{n}*@var{l}) with columns that correspond to the
 ## eigenvectors.
 ##
 ## @seealso{eig, eigs, compan}
 ## @end deftypefn
 
-## Author: Fotios Kasolis
-
 function [z, v] = polyeig (varargin)
 
   if (nargin < 1 || nargout > 2)
     print_usage ();
   endif
 
-  nin = numel (varargin);
   n = rows (varargin{1});
 
-  for i = 1 : nin
+  for i = 1 : nargin
     if (! issquare (varargin{i}))
       error ("polyeig: coefficients must be square matrices");
     endif
     if (rows (varargin{i}) != n)
       error ("polyeig: coefficients must have the same dimensions");
     endif
   endfor
 
   ## matrix polynomial degree
-  l = nin - 1;
+  l = nargin - 1;
 
   ## form needed matrices
   C = [ zeros(n * (l - 1), n), eye(n * (l - 1));
        -cell2mat(varargin(1:end-1)) ];
 
   D = [ eye(n * (l - 1)), zeros(n * (l - 1), n);
-       zeros(n, n * (l - 1)), varargin{end} ];
+        zeros(n, n * (l - 1)), varargin{end} ];
 
   ## solve generalized eigenvalue problem
-  if (nargout == 2)
+  if (nargout < 2)
+    z = eig (C, D);
+  else
     [z, v] = eig (C, D);
     v = diag (v);
     ## return n-element eigenvectors normalized so that the infinity-norm = 1
     z = z(1:n,:);
-    ## max() takes the abs if complex:
-    t = max (z);
-    z /= diag (t);
-  else
-    z = eig (C, D);
+    t = max (z);    # max() takes the abs if complex.
+    z ./= t;
   endif
 
 endfunction
 
 
 %!shared C0, C1
-%! C0 = [8, 0; 0, 4]; C1 = [1, 0; 0, 1];
+%! C0 = [8, 0; 0, 4];
+%! C1 = [1, 0; 0, 1];
 
 %!test
 %! z = polyeig (C0, C1);
 %! assert (z, [-8; -4]);
 
 %!test
 %! [v,z] = polyeig (C0, C1);
 %! assert (z, [-8; -4]);
 %! z = diag (z);
 %! d = C0*v + C1*v*z;
 %! assert (norm (d), 0.0);
 
 ## Test input validation
 %!error polyeig ()
 %!error [a,b,c] = polyeig (1)
 %!error <coefficients must be square matrices> polyeig (ones (3,2))
-%!error <coefficients must have the same dimensions> polyeig (ones (3,3), ones (2,2))
+%!error <coefficients must have the same dimensions>
+%! polyeig (ones (3,3), ones (2,2))
