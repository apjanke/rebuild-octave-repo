# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1265910925 18000
#      Thu Feb 11 12:55:25 2010 -0500
# Node ID 9966f1f71c32e6d314cb0a49d9fab696daff4033
# Parent  57a59eae83cc631f1d74adad1bffc74ca0c37573
use DEFUNX instead of DEFUN for strcmpi and strncmpi

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-02-11  John W. Eaton  <jwe@octave.org>
+
+	* strfns.cc (Fstrcmpi, Fstrncmpi): Use DEFUNX instead of DEFUN.
+	(Fstrncmpi): Report strncmpi in error message, not strncmp.
+
 2010-02-11  John W. Eaton  <jwe@octave.org>
 
 	* Cell.cc, bitfcns.cc, c-file-ptr-stream.cc, comment-list.cc,
 	data.cc, debug.cc, defaults.cc, defun.cc, dirfns.cc, display.cc,
 	dynamic-ld.cc, error.cc, file-io.cc, gl-render.cc,
 	gl2ps-renderer.cc, graphics.cc, gripes.cc, help.cc, input.cc,
 	load-path.cc, load-save.cc, ls-ascii-helper.cc, ls-hdf5.cc,
 	ls-mat-ascii.cc, ls-mat4.cc, ls-mat5.cc, ls-oct-ascii.cc,
diff --git a/src/strfns.cc b/src/strfns.cc
--- a/src/strfns.cc
+++ b/src/strfns.cc
@@ -724,17 +724,17 @@ static bool
 strcmpi_str_op (const std::string& s1, const std::string& s2,
                octave_idx_type)
 {
   return (s1.size () == s2.size ()
           && std::equal (s1.data (), s1.data () + s1.size (), s2.data (),
                          icmp_char_eq ()));
 }
 
-DEFUN (strcmpi, args, ,
+DEFUNX ("strcmpi", Fstrcmpi, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} strcmpi (@var{s1}, @var{s2})\n\
 Returns 1 if the character strings @var{s1} and @var{s2} are the same,\n\
 disregarding case of alphabetic characters, and 0 otherwise.\n\
 \n\
 If either @var{s1} or @var{s2} is a cell array of strings, then an array\n\
 of the same size is returned, containing the values described above for\n\
 every member of the cell array.  The other argument may also be a cell\n\
@@ -781,17 +781,17 @@ static bool
 strncmpi_str_op (const std::string& s1, const std::string& s2, octave_idx_type n)
 {
   octave_idx_type l1 = s1.length (), l2 = s2.length ();
   return (n > 0 && n <= l1 && n <= l2 
           && std::equal (s1.data (), s1.data () + n, s2.data (),
                          icmp_char_eq ()));
 }
 
-DEFUN (strncmpi, args, ,
+DEFUN (strncmpi, Fstrncmpi, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} strncmpi (@var{s1}, @var{s2}, @var{n})\n\
 Returns 1 if the first @var{n} character of @var{s1} and @var{s2} are the same,\n\
 disregarding case of alphabetic characters, and 0 otherwise.\n\
 \n\
 If either @var{s1} or @var{s2} is a cell array of strings, then an array\n\
 of the same size is returned, containing the values described above for\n\
 every member of the cell array.  The other argument may also be a cell\n\
@@ -815,17 +815,17 @@ This is just the opposite of the corresp
       if (! error_state)
         {
           if (n > 0)
             {
               retval = do_strcmp_fun (args(0), args(1), n, "strncmpi",
                                       strncmpi_array_op, strncmpi_str_op);
             }
           else
-            error ("strncmp: N must be greater than 0");
+            error ("strncmpi: N must be greater than 0");
         }
     }
   else
     print_usage ();
 
   return retval;
 }
 
