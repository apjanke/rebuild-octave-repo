# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1233585332 -3600
#      Mon Feb 02 15:35:32 2009 +0100
# Node ID a1ae2aae903e4bd246e6a3c45e54716bc6d41358
# Parent  e50b44b7589155edd047c49f73f918d0c9214389
abs,real,imag,conj: use code from mx-inlines rather than the generic map

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -903,22 +903,18 @@ ComplexMatrix::stack (const ComplexDiagM
   retval.insert (*this, 0, 0);
   retval.insert (a, nr_insert, 0);
   return retval;
 }
 
 ComplexMatrix
 conj (const ComplexMatrix& a)
 {
-  octave_idx_type a_len = a.length ();
-  ComplexMatrix retval;
-  if (a_len > 0)
-    retval = ComplexMatrix (mx_inline_conj_dup (a.data (), a_len),
-			    a.rows (), a.cols ());
-  return retval;
+  return ComplexMatrix (mx_inline_conj_dup (a.data (), a.length ()),
+                        a.rows (), a.cols ());
 }
 
 // resize is the destructive equivalent for this one
 
 ComplexMatrix
 ComplexMatrix::extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const
 {
   if (r1 > r2) { octave_idx_type tmp = r1; r1 = r2; r2 = tmp; }
@@ -3303,26 +3299,18 @@ ComplexMatrix::sumsq (int dim) const
   MX_BASE_REDUCTION_OP (ComplexMatrix, ROW_EXPR, COL_EXPR, 0.0, 0.0);
 
 #undef ROW_EXPR
 #undef COL_EXPR
 }
 
 Matrix ComplexMatrix::abs (void) const
 {
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = cols ();
-
-  Matrix retval (nr, nc);
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      retval (i, j) = std::abs (elem (i, j));
-
-  return retval;
+  return Matrix (mx_inline_cabs_dup (data (), length ()),
+                 rows (), cols ());
 }
 
 ComplexMatrix
 ComplexMatrix::diag (octave_idx_type k) const
 {
   return MArray2<Complex>::diag (k);
 }
 
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -368,16 +368,18 @@ public:
 
   static Complex resize_fill_value (void) { return Complex (0.0, 0.0); }
 
 private:
 
   ComplexMatrix (Complex *d, octave_idx_type r, octave_idx_type c) : MArray2<Complex> (d, r, c) { }
 };
 
+extern OCTAVE_API ComplexMatrix conj (const ComplexMatrix& a);
+
 // column vector by row vector -> matrix operations
 
 extern OCTAVE_API ComplexMatrix
 operator * (const ColumnVector& a, const ComplexRowVector& b);
 
 extern OCTAVE_API ComplexMatrix
 operator * (const ComplexColumnVector& a, const RowVector& b);
 
diff --git a/liboctave/CNDArray.cc b/liboctave/CNDArray.cc
--- a/liboctave/CNDArray.cc
+++ b/liboctave/CNDArray.cc
@@ -885,24 +885,25 @@ ComplexNDArray::min (ArrayN<octave_idx_t
   idx_arg.chop_trailing_singletons ();
 
   return result;
 }
 
 NDArray
 ComplexNDArray::abs (void) const
 {
-  NDArray retval (dims ());
-
-  octave_idx_type nel = nelem ();
+  return NDArray (mx_inline_cabs_dup (data (), length ()),
+                  dims ());
+}
 
-  for (octave_idx_type i = 0; i < nel; i++)
-    retval(i) = std::abs (elem (i));
-      
-  return retval;
+ComplexNDArray
+conj (const ComplexNDArray& a)
+{
+  return ComplexNDArray (mx_inline_conj_dup (a.data (), a.length ()),
+                         a.dims ());
 }
 
 ComplexNDArray&
 ComplexNDArray::insert (const NDArray& a, octave_idx_type r, octave_idx_type c)
 {
   dim_vector a_dv = a.dims ();
   
   int n = a_dv.length ();
diff --git a/liboctave/CNDArray.h b/liboctave/CNDArray.h
--- a/liboctave/CNDArray.h
+++ b/liboctave/CNDArray.h
@@ -86,16 +86,18 @@ public:
   ComplexNDArray min (int dim = 0) const;
   ComplexNDArray min (ArrayN<octave_idx_type>& index, int dim = 0) const;
   ComplexNDArray& insert (const NDArray& a, octave_idx_type r, octave_idx_type c);
   ComplexNDArray& insert (const ComplexNDArray& a, octave_idx_type r, octave_idx_type c);
   ComplexNDArray& insert (const ComplexNDArray& a, const Array<octave_idx_type>& ra_idx);
   
   NDArray abs (void) const;
 
+  friend ComplexNDArray conj (const ComplexNDArray& a);
+
   ComplexNDArray fourier (int dim = 1) const;
   ComplexNDArray ifourier (int dim = 1) const;
 
   ComplexNDArray fourier2d (void) const;
   ComplexNDArray ifourier2d (void) const;
 
   ComplexNDArray fourierNd (void) const;
   ComplexNDArray ifourierNd (void) const;
@@ -132,16 +134,18 @@ public:
   boolNDArray map (bmapper fcn) const;
 
 private:
 
   ComplexNDArray (Complex *d, const dim_vector& dv)
     : MArrayN<Complex> (d, dv) { }
 };
 
+extern OCTAVE_API ComplexNDArray conj (const ComplexNDArray& a);
+
 extern OCTAVE_API ComplexNDArray min (const Complex& c, const ComplexNDArray& m);
 extern OCTAVE_API ComplexNDArray min (const ComplexNDArray& m, const Complex& c);
 extern OCTAVE_API ComplexNDArray min (const ComplexNDArray& a, const ComplexNDArray& b);
 
 extern OCTAVE_API ComplexNDArray max (const Complex& c, const ComplexNDArray& m);
 extern OCTAVE_API ComplexNDArray max (const ComplexNDArray& m, const Complex& c);
 extern OCTAVE_API ComplexNDArray max (const ComplexNDArray& a, const ComplexNDArray& b);
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,26 @@
+2009-02-02  Jaroslav Hajek  <highegg@gmail.com>
+
+	* mx-inlines.cc (mx_inline_fabs_dup, mx_inline_cabs_dup): New funcs.
+
+	* dMatrix.cc (real, imag, Matrix::abs): Simplify.
+	* fMatrix.cc (real, imag, FloatMatrix::abs): Simplify.
+	* CMatrix.cc (ComplexMatrix::abs, ComplexMatrix::conj): Simplify.
+	* fCMatrix.cc (FloatComplexMatrix::abs, FloatComplexMatrix::conj): Simplify.
+
+	* CMatrix.h, fCMatrix.h (conj): Add missing decl.
+
+	* dNDArray.cc (real, imag, NDArray::abs): Simplify.
+	* fNDArray.cc (real, imag, FloatNDArray::abs): Simplify.
+	* CNDArray.cc (ComplexNDArray::abs, ComplexNDArray::conj): Simplify.
+	* fCNDArray.cc (FloatComplexNDArray::abs, FloatComplexNDArray::conj): Simplify.
+
+	* CMatrix.h, fCMatrix.h (conj): New decl.
+
 2009-01-29  John W. Eaton  <jwe@octave.org>
 
 	* intNDArray.h (intNDArray<T>:any_element_is_nan): New function.
 	* boolNDArrah.h (boolNDArray::any_element_is_nan): New function.
 	* chNDArray.h (charNDArray::any_element_is_nan): New function.
 
 2009-01-28  John W. Eaton  <jwe@octave.org>
 
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -578,33 +578,25 @@ Matrix::stack (const DiagMatrix& a) cons
   retval.insert (*this, 0, 0);
   retval.insert (a, nr_insert, 0);
   return retval;
 }
 
 Matrix
 real (const ComplexMatrix& a)
 {
-  octave_idx_type a_len = a.length ();
-  Matrix retval;
-  if (a_len > 0)
-    retval = Matrix (mx_inline_real_dup (a.data (), a_len),
-		     a.rows (), a.cols ());
-  return retval;
+  return Matrix (mx_inline_real_dup (a.data (), a.length ()),
+                 a.rows (), a.cols ());
 }
 
 Matrix
 imag (const ComplexMatrix& a)
 {
-  octave_idx_type a_len = a.length ();
-  Matrix retval;
-  if (a_len > 0)
-    retval = Matrix (mx_inline_imag_dup (a.data (), a_len),
-		     a.rows (), a.cols ());
-  return retval;
+  return Matrix (mx_inline_imag_dup (a.data (), a.length ()),
+                 a.rows (), a.cols ());
 }
 
 Matrix
 Matrix::extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const
 {
   if (r1 > r2) { octave_idx_type tmp = r1; r1 = r2; r2 = tmp; }
   if (c1 > c2) { octave_idx_type tmp = c1; c1 = c2; c2 = tmp; }
 
@@ -2842,26 +2834,18 @@ Matrix::sumsq (int dim) const
 
 #undef ROW_EXPR
 #undef COL_EXPR
 }
 
 Matrix
 Matrix::abs (void) const
 {
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = cols ();
-
-  Matrix retval (nr, nc);
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      retval (i, j) = fabs (elem (i, j));
-
-  return retval;
+  return Matrix (mx_inline_fabs_dup (data (), length ()),
+                 rows (), cols ());
 }
 
 Matrix
 Matrix::diag (octave_idx_type k) const
 {
   return MArray2<double>::diag (k);
 }
 
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -99,16 +99,18 @@ public:
   Matrix stack (const Matrix& a) const;
   Matrix stack (const RowVector& a) const;
   Matrix stack (const ColumnVector& a) const;
   Matrix stack (const DiagMatrix& a) const;
 
   friend OCTAVE_API Matrix real (const ComplexMatrix& a);
   friend OCTAVE_API Matrix imag (const ComplexMatrix& a);
 
+  friend class ComplexMatrix;
+
   Matrix transpose (void) const { return MArray2<double>::transpose (); }
 
   // resize is the destructive equivalent for this one
 
   Matrix extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const;
 
   Matrix extract_n (octave_idx_type r1, octave_idx_type c1, octave_idx_type nr, octave_idx_type nc) const;
 
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -937,31 +937,25 @@ NDArray::concat (const charNDArray& rb, 
 
   retval.insert (rb, ra_idx);
   return retval;
 }
 
 NDArray
 real (const ComplexNDArray& a)
 {
-  octave_idx_type a_len = a.length ();
-  NDArray retval;
-  if (a_len > 0)
-    retval = NDArray (mx_inline_real_dup (a.data (), a_len), a.dims ());
-  return retval;
+  return NDArray (mx_inline_real_dup (a.data (), a.length ()),
+                  a.dims ());
 }
 
 NDArray
 imag (const ComplexNDArray& a)
 {
-  octave_idx_type a_len = a.length ();
-  NDArray retval;
-  if (a_len > 0)
-    retval = NDArray (mx_inline_imag_dup (a.data (), a_len), a.dims ());
-  return retval;
+  return NDArray (mx_inline_imag_dup (a.data (), a.length ()),
+                  a.dims ());
 }
 
 NDArray&
 NDArray::insert (const NDArray& a, octave_idx_type r, octave_idx_type c)
 {
   Array<double>::insert (a, r, c);
   return *this;
 }
@@ -971,24 +965,18 @@ NDArray::insert (const NDArray& a, const
 {
   Array<double>::insert (a, ra_idx);
   return *this;
 }
 
 NDArray
 NDArray::abs (void) const
 {
-  NDArray retval (dims ());
-
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    retval(i) = fabs (elem (i));
-
-  return retval;
+  return NDArray (mx_inline_fabs_dup (data (), length ()),
+                  dims ());
 }
 
 Matrix
 NDArray::matrix_value (void) const
 {
   Matrix retval;
 
   int nd = ndims ();
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -109,16 +109,18 @@ public:
   ComplexNDArray ifourier2d (void) const;
 
   ComplexNDArray fourierNd (void) const;
   ComplexNDArray ifourierNd (void) const;
 
   friend OCTAVE_API NDArray real (const ComplexNDArray& a);
   friend OCTAVE_API NDArray imag (const ComplexNDArray& a);
 
+  friend class ComplexNDArray;
+
   Matrix matrix_value (void) const;
 
   NDArray squeeze (void) const { return MArrayN<double>::squeeze (); }
 
   static void increment_index (Array<octave_idx_type>& ra_idx,
 			       const dim_vector& dimensions,
 			       int start_dimension = 0);
 
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -897,22 +897,18 @@ FloatComplexMatrix::stack (const FloatCo
   retval.insert (*this, 0, 0);
   retval.insert (a, nr_insert, 0);
   return retval;
 }
 
 FloatComplexMatrix
 conj (const FloatComplexMatrix& a)
 {
-  octave_idx_type a_len = a.length ();
-  FloatComplexMatrix retval;
-  if (a_len > 0)
-    retval = FloatComplexMatrix (mx_inline_conj_dup (a.data (), a_len),
-			    a.rows (), a.cols ());
-  return retval;
+  return FloatComplexMatrix (mx_inline_conj_dup (a.data (), a.length ()),
+                             a.rows (), a.cols ());
 }
 
 // resize is the destructive equivalent for this one
 
 FloatComplexMatrix
 FloatComplexMatrix::extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const
 {
   if (r1 > r2) { octave_idx_type tmp = r1; r1 = r2; r2 = tmp; }
@@ -3337,26 +3333,18 @@ FloatComplexMatrix::sumsq (int dim) cons
   MX_BASE_REDUCTION_OP (FloatComplexMatrix, ROW_EXPR, COL_EXPR, 0.0, 0.0);
 
 #undef ROW_EXPR
 #undef COL_EXPR
 }
 
 FloatMatrix FloatComplexMatrix::abs (void) const
 {
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = cols ();
-
-  FloatMatrix retval (nr, nc);
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      retval (i, j) = std::abs (elem (i, j));
-
-  return retval;
+  return FloatMatrix (mx_inline_cabs_dup (data (), length ()),
+                      rows (), cols ());
 }
 
 FloatComplexMatrix
 FloatComplexMatrix::diag (octave_idx_type k) const
 {
   return MArray2<FloatComplex>::diag (k);
 }
 
diff --git a/liboctave/fCMatrix.h b/liboctave/fCMatrix.h
--- a/liboctave/fCMatrix.h
+++ b/liboctave/fCMatrix.h
@@ -368,16 +368,18 @@ public:
 
   static FloatComplex resize_fill_value (void) { return FloatComplex (0.0, 0.0); }
 
 private:
 
   FloatComplexMatrix (FloatComplex *d, octave_idx_type r, octave_idx_type c) : MArray2<FloatComplex> (d, r, c) { }
 };
 
+extern OCTAVE_API FloatComplexMatrix conj (const FloatComplexMatrix& a);
+
 // column vector by row vector -> matrix operations
 
 extern OCTAVE_API FloatComplexMatrix
 operator * (const FloatColumnVector& a, const FloatComplexRowVector& b);
 
 extern OCTAVE_API FloatComplexMatrix
 operator * (const FloatComplexColumnVector& a, const FloatRowVector& b);
 
diff --git a/liboctave/fCNDArray.cc b/liboctave/fCNDArray.cc
--- a/liboctave/fCNDArray.cc
+++ b/liboctave/fCNDArray.cc
@@ -879,24 +879,25 @@ FloatComplexNDArray::min (ArrayN<octave_
   idx_arg.chop_trailing_singletons ();
 
   return result;
 }
 
 FloatNDArray
 FloatComplexNDArray::abs (void) const
 {
-  FloatNDArray retval (dims ());
-
-  octave_idx_type nel = nelem ();
+  return FloatNDArray (mx_inline_cabs_dup (data (), length ()),
+                       dims ());
+}
 
-  for (octave_idx_type i = 0; i < nel; i++)
-    retval(i) = std::abs (elem (i));
-      
-  return retval;
+FloatComplexNDArray
+conj (const FloatComplexNDArray& a)
+{
+  return FloatComplexNDArray (mx_inline_conj_dup (a.data (), a.length ()),
+                              a.dims ());
 }
 
 FloatComplexNDArray&
 FloatComplexNDArray::insert (const NDArray& a, octave_idx_type r, octave_idx_type c)
 {
   dim_vector a_dv = a.dims ();
   
   int n = a_dv.length ();
diff --git a/liboctave/fCNDArray.h b/liboctave/fCNDArray.h
--- a/liboctave/fCNDArray.h
+++ b/liboctave/fCNDArray.h
@@ -86,16 +86,18 @@ public:
   FloatComplexNDArray min (int dim = 0) const;
   FloatComplexNDArray min (ArrayN<octave_idx_type>& index, int dim = 0) const;
   FloatComplexNDArray& insert (const NDArray& a, octave_idx_type r, octave_idx_type c);
   FloatComplexNDArray& insert (const FloatComplexNDArray& a, octave_idx_type r, octave_idx_type c);
   FloatComplexNDArray& insert (const FloatComplexNDArray& a, const Array<octave_idx_type>& ra_idx);
   
   FloatNDArray abs (void) const;
 
+  friend FloatComplexNDArray conj (const FloatComplexNDArray& a);
+
   FloatComplexNDArray fourier (int dim = 1) const;
   FloatComplexNDArray ifourier (int dim = 1) const;
 
   FloatComplexNDArray fourier2d (void) const;
   FloatComplexNDArray ifourier2d (void) const;
 
   FloatComplexNDArray fourierNd (void) const;
   FloatComplexNDArray ifourierNd (void) const;
@@ -132,16 +134,18 @@ public:
   boolNDArray map (bmapper fcn) const;
 
 private:
 
   FloatComplexNDArray (FloatComplex *d, const dim_vector& dv)
     : MArrayN<FloatComplex> (d, dv) { }
 };
 
+extern OCTAVE_API FloatComplexNDArray conj (const FloatComplexNDArray& a);
+
 extern OCTAVE_API FloatComplexNDArray min (const FloatComplex& c, const FloatComplexNDArray& m);
 extern OCTAVE_API FloatComplexNDArray min (const FloatComplexNDArray& m, const FloatComplex& c);
 extern OCTAVE_API FloatComplexNDArray min (const FloatComplexNDArray& a, const FloatComplexNDArray& b);
 
 extern OCTAVE_API FloatComplexNDArray max (const FloatComplex& c, const FloatComplexNDArray& m);
 extern OCTAVE_API FloatComplexNDArray max (const FloatComplexNDArray& m, const FloatComplex& c);
 extern OCTAVE_API FloatComplexNDArray max (const FloatComplexNDArray& a, const FloatComplexNDArray& b);
 
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -577,33 +577,25 @@ FloatMatrix::stack (const FloatDiagMatri
   retval.insert (*this, 0, 0);
   retval.insert (a, nr_insert, 0);
   return retval;
 }
 
 FloatMatrix
 real (const FloatComplexMatrix& a)
 {
-  octave_idx_type a_len = a.length ();
-  FloatMatrix retval;
-  if (a_len > 0)
-    retval = FloatMatrix (mx_inline_real_dup (a.data (), a_len),
-		     a.rows (), a.cols ());
-  return retval;
+  return FloatMatrix (mx_inline_real_dup (a.data (), a.length ()),
+                      a.rows (), a.cols ());
 }
 
 FloatMatrix
 imag (const FloatComplexMatrix& a)
 {
-  octave_idx_type a_len = a.length ();
-  FloatMatrix retval;
-  if (a_len > 0)
-    retval = FloatMatrix (mx_inline_imag_dup (a.data (), a_len),
-		     a.rows (), a.cols ());
-  return retval;
+  return FloatMatrix (mx_inline_imag_dup (a.data (), a.length ()),
+                      a.rows (), a.cols ());
 }
 
 FloatMatrix
 FloatMatrix::extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const
 {
   if (r1 > r2) { octave_idx_type tmp = r1; r1 = r2; r2 = tmp; }
   if (c1 > c2) { octave_idx_type tmp = c1; c1 = c2; c2 = tmp; }
 
@@ -2841,26 +2833,18 @@ FloatMatrix::sumsq (int dim) const
 
 #undef ROW_EXPR
 #undef COL_EXPR
 }
 
 FloatMatrix
 FloatMatrix::abs (void) const
 {
-  octave_idx_type nr = rows ();
-  octave_idx_type nc = cols ();
-
-  FloatMatrix retval (nr, nc);
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      retval (i, j) = fabs (elem (i, j));
-
-  return retval;
+  return FloatMatrix (mx_inline_fabs_dup (data (), length ()),
+                      rows (), cols ());
 }
 
 FloatMatrix
 FloatMatrix::diag (octave_idx_type k) const
 {
   return MArray2<float>::diag (k);
 }
 
diff --git a/liboctave/fMatrix.h b/liboctave/fMatrix.h
--- a/liboctave/fMatrix.h
+++ b/liboctave/fMatrix.h
@@ -100,16 +100,18 @@ public:
   FloatMatrix stack (const FloatMatrix& a) const;
   FloatMatrix stack (const FloatRowVector& a) const;
   FloatMatrix stack (const FloatColumnVector& a) const;
   FloatMatrix stack (const FloatDiagMatrix& a) const;
 
   friend OCTAVE_API FloatMatrix real (const FloatComplexMatrix& a);
   friend OCTAVE_API FloatMatrix imag (const FloatComplexMatrix& a);
 
+  friend class FloatComplexMatrix;
+
   FloatMatrix transpose (void) const { return MArray2<float>::transpose (); }
 
   // resize is the destructive equivalent for this one
 
   FloatMatrix extract (octave_idx_type r1, octave_idx_type c1, octave_idx_type r2, octave_idx_type c2) const;
 
   FloatMatrix extract_n (octave_idx_type r1, octave_idx_type c1, octave_idx_type nr, octave_idx_type nc) const;
 
diff --git a/liboctave/fNDArray.cc b/liboctave/fNDArray.cc
--- a/liboctave/fNDArray.cc
+++ b/liboctave/fNDArray.cc
@@ -892,31 +892,25 @@ FloatNDArray::concat (const charNDArray&
 
   retval.insert (rb, ra_idx);
   return retval;
 }
 
 FloatNDArray
 real (const FloatComplexNDArray& a)
 {
-  octave_idx_type a_len = a.length ();
-  FloatNDArray retval;
-  if (a_len > 0)
-    retval = FloatNDArray (mx_inline_real_dup (a.data (), a_len), a.dims ());
-  return retval;
+  return FloatNDArray (mx_inline_real_dup (a.data (), a.length ()),
+                       a.dims ());
 }
 
 FloatNDArray
 imag (const FloatComplexNDArray& a)
 {
-  octave_idx_type a_len = a.length ();
-  FloatNDArray retval;
-  if (a_len > 0)
-    retval = FloatNDArray (mx_inline_imag_dup (a.data (), a_len), a.dims ());
-  return retval;
+  return FloatNDArray (mx_inline_imag_dup (a.data (), a.length ()),
+                       a.dims ());
 }
 
 FloatNDArray&
 FloatNDArray::insert (const FloatNDArray& a, octave_idx_type r, octave_idx_type c)
 {
   Array<float>::insert (a, r, c);
   return *this;
 }
@@ -926,24 +920,18 @@ FloatNDArray::insert (const FloatNDArray
 {
   Array<float>::insert (a, ra_idx);
   return *this;
 }
 
 FloatNDArray
 FloatNDArray::abs (void) const
 {
-  FloatNDArray retval (dims ());
-
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    retval(i) = fabs (elem (i));
-
-  return retval;
+  return FloatNDArray (mx_inline_fabs_dup (data (), length ()),
+                       dims ());
 }
 
 Matrix
 FloatNDArray::matrix_value (void) const
 {
   Matrix retval;
 
   int nd = ndims ();
diff --git a/liboctave/fNDArray.h b/liboctave/fNDArray.h
--- a/liboctave/fNDArray.h
+++ b/liboctave/fNDArray.h
@@ -106,16 +106,18 @@ public:
   FloatComplexNDArray ifourier2d (void) const;
 
   FloatComplexNDArray fourierNd (void) const;
   FloatComplexNDArray ifourierNd (void) const;
 
   friend OCTAVE_API FloatNDArray real (const FloatComplexNDArray& a);
   friend OCTAVE_API FloatNDArray imag (const FloatComplexNDArray& a);
 
+  friend class FloatComplexNDArray;
+
   Matrix matrix_value (void) const;
 
   FloatNDArray squeeze (void) const { return MArrayN<float>::squeeze (); }
 
   static void increment_index (Array<octave_idx_type>& ra_idx,
 			       const dim_vector& dimensions,
 			       int start_dimension = 0);
 
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_mx_inlines_h)
 #define octave_mx_inlines_h 1
 
 #include <cstddef>
+#include <cmath>
 
 #include "quit.h"
 
 #include "oct-cmplx.h"
 
 template <class R, class S>
 inline void
 mx_inline_fill_vs (R *r, size_t n, S s)
@@ -256,28 +257,32 @@ OP_DUP_FCN (, mx_inline_dup, FloatComple
 OP_DUP_FCN (0.0 ==, mx_inline_not, double, double)
 OP_DUP_FCN (0.0 ==, mx_inline_not, double, Complex)
 
 OP_DUP_FCN (, mx_inline_make_complex, Complex, double)
 
 OP_DUP_FCN (-, mx_inline_change_sign, double,  double)
 OP_DUP_FCN (-, mx_inline_change_sign, Complex, Complex)
 
+OP_DUP_FCN (std::abs, mx_inline_fabs_dup, double,  double)
+OP_DUP_FCN (std::abs, mx_inline_cabs_dup, double,  Complex)
 OP_DUP_FCN (real, mx_inline_real_dup, double,  Complex)
 OP_DUP_FCN (imag, mx_inline_imag_dup, double,  Complex)
 OP_DUP_FCN (conj, mx_inline_conj_dup, Complex, Complex)
 
 OP_DUP_FCN (0.0 ==, mx_inline_not, float, float)
 OP_DUP_FCN (static_cast<float>(0.0) ==, mx_inline_not, float, FloatComplex)
 
 OP_DUP_FCN (, mx_inline_make_complex, FloatComplex, float)
 
 OP_DUP_FCN (-, mx_inline_change_sign, float,  float)
 OP_DUP_FCN (-, mx_inline_change_sign, FloatComplex, FloatComplex)
 
+OP_DUP_FCN (std::abs, mx_inline_fabs_dup, float,  float)
+OP_DUP_FCN (std::abs, mx_inline_cabs_dup, float,  FloatComplex)
 OP_DUP_FCN (real, mx_inline_real_dup, float,  FloatComplex)
 OP_DUP_FCN (imag, mx_inline_imag_dup, float,  FloatComplex)
 OP_DUP_FCN (conj, mx_inline_conj_dup, FloatComplex, FloatComplex)
 
 // Avoid some code duplication.  Maybe we should use templates.
 
 #define MX_CUMULATIVE_OP(RET_TYPE, ELT_TYPE, OP) \
  \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2009-02-02  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-re-mat.cc (octave_matrix::abs, octave_matrix::real,
+	octave_matrix::imag, octave_matrix::conj): Use special code.
+	* ov-flt-re-mat.cc (octave_float_matrix::abs, octave_float_matrix::real,
+	octave_float_matrix::imag, octave_float_matrix::conj): Use special code.
+	* ov-cx-mat.cc (octave_complex_matrix::abs, octave_complex_matrix::real,
+	octave_complex_matrix::imag, octave_complex_matrix::conj): Use special code.
+	* ov-flt-cx-mat.cc (octave_float_complex_matrix::abs, octave_float_complex_matrix::real,
+	octave_float_complex_matrix::imag, octave_float_complex_matrix::conj): Use special code.
+
 2009-01-30  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/lookup.cc (Flookup): Add missing check.
 
 2009-01-29  John W. Eaton  <jwe@octave.org>
 
 	* pt-stmt.cc (tree_statement::eval): Check
 	in_function_or_script_body instead of symbol_table::at_top_level ()
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -845,44 +845,65 @@ any_element_greater_than (const NDArray&
       } \
     else \
       { \
         /*error ("%s: not defined for complex arguments", #MAP); */	\
         return octave_value (m); \
       } \
   }
 
+// The fast mappers.
+octave_value
+octave_complex_matrix::abs (void) const
+{
+  return matrix.abs ();
+}
+
+octave_value
+octave_complex_matrix::real (void) const
+{
+  return ::real (matrix);
+}
+
+octave_value
+octave_complex_matrix::conj (void) const
+{
+  return ::conj (matrix);
+}
+
+octave_value
+octave_complex_matrix::imag (void) const
+{
+  return ::imag (matrix);
+}
+
 DARRAY_MAPPER (erf, NDArray::dmapper, ::erf)
 DARRAY_MAPPER (erfc, NDArray::dmapper, ::erfc)
 DARRAY_MAPPER (gamma, NDArray::dmapper, xgamma)
 CD_ARRAY_MAPPER (lgamma, xlgamma, xlgamma, 0.0, octave_Inf)
 
-ARRAY_MAPPER (abs, ComplexNDArray::dmapper, xabs)
 ARRAY_MAPPER (acos, ComplexNDArray::cmapper, ::acos)
 ARRAY_MAPPER (acosh, ComplexNDArray::cmapper, ::acosh)
 ARRAY_MAPPER (angle, ComplexNDArray::dmapper, std::arg)
 ARRAY_MAPPER (arg, ComplexNDArray::dmapper, std::arg)
 ARRAY_MAPPER (asin, ComplexNDArray::cmapper, ::asin)
 ARRAY_MAPPER (asinh, ComplexNDArray::cmapper, ::asinh)
 ARRAY_MAPPER (atan, ComplexNDArray::cmapper, ::atan)
 ARRAY_MAPPER (atanh, ComplexNDArray::cmapper, ::atanh)
 ARRAY_MAPPER (ceil, ComplexNDArray::cmapper, ::ceil)
-ARRAY_MAPPER (conj, ComplexNDArray::cmapper, std::conj)
 ARRAY_MAPPER (cos, ComplexNDArray::cmapper, std::cos)
 ARRAY_MAPPER (cosh, ComplexNDArray::cmapper, std::cosh)
 ARRAY_MAPPER (exp, ComplexNDArray::cmapper, std::exp)
 ARRAY_MAPPER (expm1, ComplexNDArray::cmapper, ::expm1)
 ARRAY_MAPPER (fix, ComplexNDArray::cmapper, ::fix)
 ARRAY_MAPPER (floor, ComplexNDArray::cmapper, ::floor)
-ARRAY_MAPPER (imag, ComplexNDArray::dmapper, ximag)
 ARRAY_MAPPER (log, ComplexNDArray::cmapper, std::log)
 ARRAY_MAPPER (log2, ComplexNDArray::cmapper, xlog2)
 ARRAY_MAPPER (log10, ComplexNDArray::cmapper, std::log10)
 ARRAY_MAPPER (log1p, ComplexNDArray::cmapper, ::log1p)
-ARRAY_MAPPER (real, ComplexNDArray::dmapper, xreal)
 ARRAY_MAPPER (round, ComplexNDArray::cmapper, xround)
 ARRAY_MAPPER (roundb, ComplexNDArray::cmapper, xroundb)
 ARRAY_MAPPER (signum, ComplexNDArray::cmapper, ::signum)
 ARRAY_MAPPER (sin, ComplexNDArray::cmapper, std::sin)
 ARRAY_MAPPER (sinh, ComplexNDArray::cmapper, std::sinh)
 ARRAY_MAPPER (sqrt, ComplexNDArray::cmapper, std::sqrt)
 ARRAY_MAPPER (tan, ComplexNDArray::cmapper, std::tan)
 ARRAY_MAPPER (tanh, ComplexNDArray::cmapper, std::tanh)
diff --git a/src/ov-flt-cx-mat.cc b/src/ov-flt-cx-mat.cc
--- a/src/ov-flt-cx-mat.cc
+++ b/src/ov-flt-cx-mat.cc
@@ -812,44 +812,65 @@ any_element_greater_than (const FloatNDA
       } \
     else \
       { \
         /*error ("%s: not defined for complex arguments", #MAP); */	\
         return octave_value (m); \
       } \
   }
 
+// The fast mappers.
+octave_value
+octave_float_complex_matrix::abs (void) const
+{
+  return matrix.abs ();
+}
+
+octave_value
+octave_float_complex_matrix::real (void) const
+{
+  return ::real (matrix);
+}
+
+octave_value
+octave_float_complex_matrix::conj (void) const
+{
+  return ::conj (matrix);
+}
+
+octave_value
+octave_float_complex_matrix::imag (void) const
+{
+  return ::imag (matrix);
+}
+
 DARRAY_MAPPER (erf, FloatNDArray::dmapper, ::erff)
 DARRAY_MAPPER (erfc, FloatNDArray::dmapper, ::erfcf)
 DARRAY_MAPPER (gamma, FloatNDArray::dmapper, xgamma)
 CD_ARRAY_MAPPER (lgamma, xlgamma, xlgamma, 0.0, octave_Inf)
 
-ARRAY_MAPPER (abs, FloatComplexNDArray::dmapper, xabs)
 ARRAY_MAPPER (acos, FloatComplexNDArray::cmapper, ::acos)
 ARRAY_MAPPER (acosh, FloatComplexNDArray::cmapper, ::acosh)
 ARRAY_MAPPER (angle, FloatComplexNDArray::dmapper, std::arg)
 ARRAY_MAPPER (arg, FloatComplexNDArray::dmapper, std::arg)
 ARRAY_MAPPER (asin, FloatComplexNDArray::cmapper, ::asin)
 ARRAY_MAPPER (asinh, FloatComplexNDArray::cmapper, ::asinh)
 ARRAY_MAPPER (atan, FloatComplexNDArray::cmapper, ::atan)
 ARRAY_MAPPER (atanh, FloatComplexNDArray::cmapper, ::atanh)
 ARRAY_MAPPER (ceil, FloatComplexNDArray::cmapper, ::ceil)
-ARRAY_MAPPER (conj, FloatComplexNDArray::cmapper, std::conj)
 ARRAY_MAPPER (cos, FloatComplexNDArray::cmapper, std::cos)
 ARRAY_MAPPER (cosh, FloatComplexNDArray::cmapper, std::cosh)
 ARRAY_MAPPER (exp, FloatComplexNDArray::cmapper, std::exp)
 ARRAY_MAPPER (expm1, FloatComplexNDArray::cmapper, ::expm1f)
 ARRAY_MAPPER (fix, FloatComplexNDArray::cmapper, ::fix)
 ARRAY_MAPPER (floor, FloatComplexNDArray::cmapper, ::floor)
-ARRAY_MAPPER (imag, FloatComplexNDArray::dmapper, ximag)
 ARRAY_MAPPER (log, FloatComplexNDArray::cmapper, std::log)
 ARRAY_MAPPER (log2, FloatComplexNDArray::cmapper, xlog2)
 ARRAY_MAPPER (log10, FloatComplexNDArray::cmapper, std::log10)
 ARRAY_MAPPER (log1p, FloatComplexNDArray::cmapper, ::log1pf)
-ARRAY_MAPPER (real, FloatComplexNDArray::dmapper, xreal)
 ARRAY_MAPPER (round, FloatComplexNDArray::cmapper, xround)
 ARRAY_MAPPER (roundb, FloatComplexNDArray::cmapper, xroundb)
 ARRAY_MAPPER (signum, FloatComplexNDArray::cmapper, ::signum)
 ARRAY_MAPPER (sin, FloatComplexNDArray::cmapper, std::sin)
 ARRAY_MAPPER (sinh, FloatComplexNDArray::cmapper, std::sinh)
 ARRAY_MAPPER (sqrt, FloatComplexNDArray::cmapper, std::sqrt)
 ARRAY_MAPPER (tan, FloatComplexNDArray::cmapper, std::tan)
 ARRAY_MAPPER (tanh, FloatComplexNDArray::cmapper, std::tanh)
diff --git a/src/ov-flt-re-diag.cc b/src/ov-flt-re-diag.cc
--- a/src/ov-flt-re-diag.cc
+++ b/src/ov-flt-re-diag.cc
@@ -106,17 +106,17 @@ octave_value
 octave_float_diag_matrix::conj (void) const
 {
   return matrix;
 }
 
 octave_value
 octave_float_diag_matrix::imag (void) const
 {
-  return DiagMatrix (matrix.rows (), matrix.cols ());
+  return DiagMatrix (matrix.rows (), matrix.cols (), 0.0f);
 }
 
 bool 
 octave_float_diag_matrix::save_binary (std::ostream& os, bool& save_as_floats)
 {
 
   int32_t r = matrix.rows (), c = matrix.cols ();
   os.write (reinterpret_cast<char *> (&r), 4);
diff --git a/src/ov-flt-re-mat.cc b/src/ov-flt-re-mat.cc
--- a/src/ov-flt-re-mat.cc
+++ b/src/ov-flt-re-mat.cc
@@ -737,49 +737,64 @@ any_element_greater_than (const FloatNDA
  \
     return (any_element_less_than (matrix, L1) \
             ? octave_value (matrix.map (cmap)) \
 	    : (any_element_greater_than (matrix, L2) \
 	       ? octave_value (matrix.map (cmap)) \
 	       : octave_value (matrix.map (dmap)))); \
   }
 
-static float
-xconj (float x)
+// The fast mappers.
+octave_value
+octave_float_matrix::abs (void) const
+{
+  return matrix.abs ();
+}
+
+octave_value
+octave_float_matrix::real (void) const
 {
-  return x;
+  return matrix;
+}
+
+octave_value
+octave_float_matrix::conj (void) const
+{
+  return matrix;
+}
+
+octave_value
+octave_float_matrix::imag (void) const
+{
+  return FloatNDArray (matrix.dims (), 0.0);
 }
 
 ARRAY_MAPPER (erf, FloatNDArray::dmapper, ::erff)
 ARRAY_MAPPER (erfc, FloatNDArray::dmapper, ::erfcf)
 ARRAY_MAPPER (gamma, FloatNDArray::dmapper, xgamma)
 CD_ARRAY_MAPPER (lgamma, xlgamma, xlgamma, 0.0, octave_Float_Inf)
-ARRAY_MAPPER (abs, FloatNDArray::dmapper, ::fabsf)
 ARRAY_MAPPER (acos, FloatNDArray::dmapper, ::acosf)
 CD_ARRAY_MAPPER (acosh, ::acoshf, ::acosh, 1.0, octave_Float_Inf)
 ARRAY_MAPPER (angle, FloatNDArray::dmapper, ::arg)
 ARRAY_MAPPER (arg, FloatNDArray::dmapper, ::arg)
 CD_ARRAY_MAPPER (asin, ::asinf, ::asin, -1.0, 1.0)
 ARRAY_MAPPER (asinh, FloatNDArray::dmapper,::asinhf)
 ARRAY_MAPPER (atan, FloatNDArray::dmapper, ::atanf)
 CD_ARRAY_MAPPER (atanh, ::atanhf, ::atanh, -1.0, 1.0)
 ARRAY_MAPPER (ceil, FloatNDArray::dmapper, ::ceilf)
-ARRAY_MAPPER (conj, FloatNDArray::dmapper, xconj)
 ARRAY_MAPPER (cos, FloatNDArray::dmapper, ::cosf)
 ARRAY_MAPPER (cosh, FloatNDArray::dmapper, ::coshf)
 ARRAY_MAPPER (exp, FloatNDArray::dmapper, ::expf)
 ARRAY_MAPPER (expm1, FloatNDArray::dmapper, ::expm1f)
 ARRAY_MAPPER (fix, FloatNDArray::dmapper, ::fix)
 ARRAY_MAPPER (floor, FloatNDArray::dmapper, ::floorf)
-ARRAY_MAPPER (imag, FloatNDArray::dmapper, ::imag)
 CD_ARRAY_MAPPER (log, ::logf, std::log, 0.0, octave_Float_Inf)
 CD_ARRAY_MAPPER (log2, xlog2, xlog2, 0.0, octave_Float_Inf)
 CD_ARRAY_MAPPER (log10, ::log10f, std::log10, 0.0, octave_Float_Inf)
 CD_ARRAY_MAPPER (log1p, ::log1pf, ::log1pf, -1.0, octave_Float_Inf)
-ARRAY_MAPPER (real, FloatNDArray::dmapper, ::real)
 ARRAY_MAPPER (round, FloatNDArray::dmapper, xround)
 ARRAY_MAPPER (roundb, FloatNDArray::dmapper, xroundb)
 ARRAY_MAPPER (signum, FloatNDArray::dmapper, ::signum)
 ARRAY_MAPPER (sin, FloatNDArray::dmapper, ::sinf)
 ARRAY_MAPPER (sinh, FloatNDArray::dmapper, ::sinhf)
 CD_ARRAY_MAPPER (sqrt, ::sqrtf, std::sqrt, 0.0, octave_Float_Inf)
 ARRAY_MAPPER (tan, FloatNDArray::dmapper, ::tanf)
 ARRAY_MAPPER (tanh, FloatNDArray::dmapper, ::tanhf)
diff --git a/src/ov-re-diag.cc b/src/ov-re-diag.cc
--- a/src/ov-re-diag.cc
+++ b/src/ov-re-diag.cc
@@ -121,17 +121,17 @@ octave_value
 octave_diag_matrix::conj (void) const
 {
   return matrix;
 }
 
 octave_value
 octave_diag_matrix::imag (void) const
 {
-  return DiagMatrix (matrix.rows (), matrix.cols ());
+  return DiagMatrix (matrix.rows (), matrix.cols (), 0.0);
 }
 
 bool 
 octave_diag_matrix::save_binary (std::ostream& os, bool& save_as_floats)
 {
 
   int32_t r = matrix.rows (), c = matrix.cols ();
   os.write (reinterpret_cast<char *> (&r), 4);
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -764,49 +764,64 @@ any_element_greater_than (const NDArray&
  \
     return (any_element_less_than (matrix, L1) \
             ? octave_value (matrix.map (cmap)) \
 	    : (any_element_greater_than (matrix, L2) \
 	       ? octave_value (matrix.map (cmap)) \
 	       : octave_value (matrix.map (dmap)))); \
   }
 
-static double
-xconj (double x)
+// The fast mappers.
+octave_value
+octave_matrix::abs (void) const
+{
+  return matrix.abs ();
+}
+
+octave_value
+octave_matrix::real (void) const
 {
-  return x;
+  return matrix;
+}
+
+octave_value
+octave_matrix::conj (void) const
+{
+  return matrix;
+}
+
+octave_value
+octave_matrix::imag (void) const
+{
+  return NDArray (matrix.dims (), 0.0);
 }
 
 ARRAY_MAPPER (erf, NDArray::dmapper, ::erf)
 ARRAY_MAPPER (erfc, NDArray::dmapper, ::erfc)
 ARRAY_MAPPER (gamma, NDArray::dmapper, xgamma)
 CD_ARRAY_MAPPER (lgamma, xlgamma, xlgamma, 0.0, octave_Inf)
-ARRAY_MAPPER (abs, NDArray::dmapper, ::fabs)
 ARRAY_MAPPER (acos, NDArray::dmapper, ::acos)
 CD_ARRAY_MAPPER (acosh, ::acosh, ::acosh, 1.0, octave_Inf)
 ARRAY_MAPPER (angle, NDArray::dmapper, ::arg)
 ARRAY_MAPPER (arg, NDArray::dmapper, ::arg)
 CD_ARRAY_MAPPER (asin, ::asin, ::asin, -1.0, 1.0)
 ARRAY_MAPPER (asinh, NDArray::dmapper,::asinh)
 ARRAY_MAPPER (atan, NDArray::dmapper, ::atan)
 CD_ARRAY_MAPPER (atanh, ::atanh, ::atanh, -1.0, 1.0)
 ARRAY_MAPPER (ceil, NDArray::dmapper, ::ceil)
-ARRAY_MAPPER (conj, NDArray::dmapper, xconj)
 ARRAY_MAPPER (cos, NDArray::dmapper, ::cos)
 ARRAY_MAPPER (cosh, NDArray::dmapper, ::cosh)
 ARRAY_MAPPER (exp, NDArray::dmapper, ::exp)
 ARRAY_MAPPER (expm1, NDArray::dmapper, ::expm1)
 ARRAY_MAPPER (fix, NDArray::dmapper, ::fix)
 ARRAY_MAPPER (floor, NDArray::dmapper, ::floor)
-ARRAY_MAPPER (imag, NDArray::dmapper, ::imag)
 CD_ARRAY_MAPPER (log, ::log, std::log, 0.0, octave_Inf)
 CD_ARRAY_MAPPER (log2, xlog2, xlog2, 0.0, octave_Inf)
 CD_ARRAY_MAPPER (log10, ::log10, std::log10, 0.0, octave_Inf)
 CD_ARRAY_MAPPER (log1p, ::log1p, ::log1p, -1.0, octave_Inf)
-ARRAY_MAPPER (real, NDArray::dmapper, ::real)
 ARRAY_MAPPER (round, NDArray::dmapper, xround)
 ARRAY_MAPPER (roundb, NDArray::dmapper, xroundb)
 ARRAY_MAPPER (signum, NDArray::dmapper, ::signum)
 ARRAY_MAPPER (sin, NDArray::dmapper, ::sin)
 ARRAY_MAPPER (sinh, NDArray::dmapper, ::sinh)
 CD_ARRAY_MAPPER (sqrt, ::sqrt, std::sqrt, 0.0, octave_Inf)
 ARRAY_MAPPER (tan, NDArray::dmapper, ::tan)
 ARRAY_MAPPER (tanh, NDArray::dmapper, ::tanh)
