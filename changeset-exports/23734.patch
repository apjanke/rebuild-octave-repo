# HG changeset patch
# User Brad Kennedy <bk@co60.ca>
# Date 1499294105 25200
#      Wed Jul 05 15:35:05 2017 -0700
# Node ID 3e93a2a66cdf7a81a5ec2e4e1a5adb8b07b964dd
# Parent  4c048a2792bc0dd8105fa0554a9ddbbeb7f2680b
nth_element: allow sequence of indices to be passed as a vector (bug #51329)

* Array.cc (Array<T>::nth_element): Allow indices to be a vector, ensure that
it is a contiguous integer sequence.
* data.cc: Add basic %!tests for nth_element, including test for this fix.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -6925,16 +6925,31 @@ the ratio K/M is small; otherwise, it ma
     {
       index_error ("nth_element: invalid N value %s. %s",
                    e.idx (), e.details ());
     }
 
   return retval;
 }
 
+/*
+%!assert (nth_element ([1:10], 1), 1)
+%!assert (nth_element ([1:10], 10), 10)
+%!assert (nth_element ([1:10], 1:3), [1 2 3])
+%!assert (nth_element ([1:10], 1:10), [1:10])
+
+%!assert <*51329> (nth_element ([1:10], [1:10]), [1:10])
+
+%!error nth_element ()
+%!error nth_element (1)
+%!error nth_element (1, 1.5)
+%!error nth_element (1, 2, 3, 4)
+%!error nth_element ("abcd", 3)
+*/
+
 template <typename NDT>
 static NDT
 do_accumarray_sum (const idx_vector& idx, const NDT& vals,
                    octave_idx_type n = -1)
 {
   typedef typename NDT::element_type T;
   if (n < 0)
     n = idx.extent (0);
diff --git a/liboctave/array/Array.cc b/liboctave/array/Array.cc
--- a/liboctave/array/Array.cc
+++ b/liboctave/array/Array.cc
@@ -2346,16 +2346,35 @@ Array<T>::nth_element (const idx_vector&
             lo = n(0);
           }
         else if (inc == -1)
           {
             mode = DESCENDING;
             lo = ns - 1 - n(0);
           }
       }
+    case idx_vector::class_vector:
+      // This case resolves bug #51329, a fallback to allow the given index
+      // to be a sequential vector instead of the typical scalar or range
+      if (n(1) - n(0) == 1)
+        {
+          mode = ASCENDING;
+          lo = n(0);
+        }
+      else if (n(1) - n(0) == -1)
+        {
+          mode = DESCENDING;
+          lo = ns - 1 - n(0);
+        }
+      // Ensure that the vector is actually an arithmetic contiguous sequence
+      for (octave_idx_type i = 2; i < n.length () && mode != UNSORTED; i++)
+        if ((mode == ASCENDING && n(i) - n(i-1) != 1)
+            || (mode == DESCENDING && n(i) - n(i-1) != -1))
+          mode = UNSORTED;
+      break;
     default:
       break;
     }
 
   if (mode == UNSORTED)
     (*current_liboctave_error_handler)
       ("nth_element: n must be a scalar or a contiguous range");
 
