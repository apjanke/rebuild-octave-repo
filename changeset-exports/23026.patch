# HG changeset patch
# User Rik <rik@octave.org>
# Date 1483992824 28800
#      Mon Jan 09 12:13:44 2017 -0800
# Node ID ef5e1bb926c0efe869838c6fe5de0712e6b47295
# Parent  a6a7b054e4baff3e076c0aa56fb4ef7a53369ee0
# Parent  cae62c8d4f96094dd2f6cc1e7d32078d493b4b4c
maint: Periodic merge of stable to default.

diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -521,20 +521,60 @@ value should be ignored and not stored t
 function val = pick2nd (~, arg2)
   val = arg2;
 endfunction
 @end group
 @end example
 
 The value of @code{nargin} is not affected by using this declaration.
 
-Return arguments can also be ignored using the same syntax.  Functions may
-take advantage of ignored outputs to reduce the number of calculations
-performed.  To do so, use the @code{isargout} function to query whether the
-output argument is wanted.  For example:
+Return arguments can also be ignored using the same syntax.  For example, the
+sort function returns both the sorted values, and an index vector for the
+original input which will result in a sorted output.  Ignoring the second
+output is simple---don't request more than one output.  But ignoring the first,
+and calculating just the second output, requires the use of the @code{~}
+placeholder.
+
+@example
+@group
+x = [2, 3, 1];
+[s, i] = sort (x)
+@result{}
+s =
+
+   1   2   3
+
+i =
+
+   3   1   2
+
+[~, i] = sort (x)
+@result{}
+i =
+
+   3   1   2
+@end group
+@end example
+
+When using the @code{~} placeholder, commas---not whitespace---must be used
+to separate output arguments.  Otherwise, the interpreter will view @code{~} as
+the logical not operator.
+
+@example
+@group
+[~ i] = sort (x)
+parse error:
+
+  invalid left hand side of assignment
+@end group
+@end example
+
+Functions may take advantage of ignored outputs to reduce the number of
+calculations performed.  To do so, use the @code{isargout} function to query
+whether the output argument is wanted.  For example:
 
 @example
 @group
 function [out1, out2] = long_function (x, y, z)
   if (isargout (1))
     ## Long calculation
     @dots{}
     out1 = result;
