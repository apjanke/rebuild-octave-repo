# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1209134699 -7200
#      Fri Apr 25 16:44:59 2008 +0200
# Node ID b74039822fd22dfc13373a9fb1461b43fb5b1c58
# Parent  56f781f38f0bd168b17cd63cf5a62ffd2b8eb315
Add support for hggroup

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2008-06-04  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* plot/__go_draw_axes__.m: Support hggroup objects.
+	* plot/hggroup.m: New file.
+	* plot/Makefile.in: Handle it.
+
 2008-06-02  David Bateman  <dbateman@free.fr>
 
 	* miscellaneous/debug.m: New file..
 	* Makefile.in (SOURCES): Add it to the list.
 
 	* general/interp1q.m: Remove spaces between functions and args in
 	[]. Fix test code to actually test interp1q.
 
diff --git a/scripts/plot/Makefile.in b/scripts/plot/Makefile.in
--- a/scripts/plot/Makefile.in
+++ b/scripts/plot/Makefile.in
@@ -106,16 +106,17 @@ SOURCES = \
   findall.m \
   findobj.m \
   fplot.m \
   gca.m \
   gcf.m \
   ginput.m \
   grid.m \
   gtext.m \
+  hggroup.m \
   hidden.m \
   hist.m \
   hold.m \
   isfigure.m \
   ishold.m \
   legend.m \
   line.m \
   loglog.m \
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -320,19 +320,20 @@ function __go_draw_axes__ (h, plot_strea
 
     [view_cmd, view_fcn, view_zoom] = image_viewer ();
     use_gnuplot_for_images = (ischar (view_fcn)
 			      && strcmpi (view_fcn, "gnuplot_internal"));
 
     ximg_data = {};
     ximg_data_idx = 0;
 
-    for i = 1:length (kids)
+    while (! isempty (kids))
 
-      obj = get (kids(i));
+      obj = get (kids(1));
+      kids = kids(2:end);
 
       switch (obj.type)
 	case "image"
 	  img_data = obj.cdata;
 	  img_xdata = obj.xdata;
 	  img_ydata = obj.ydata;
 
 	  if (use_gnuplot_for_images)
@@ -987,22 +988,26 @@ function __go_draw_axes__ (h, plot_strea
 	  else
  	    fprintf (plot_stream,
  		     "set label \"%s\" at %s %.15g,%.15g %s rotate by %f %s %s front %s;\n",
  		     undo_string_escapes (label), units,
  		     lpos(1), lpos(2), halign, angle, fontspec,
 		     __do_enhanced_option__ (enhanced, obj), colorspec);
 	  endif
 
+        case "hggroup"
+          # push group children into the kid list
+          kids = [obj.children kids];
+
 	otherwise
 	  error ("__go_draw_axes__: unknown object class, %s",
 		 obj.type);
       endswitch
 
-    endfor
+    endwhile
 
     ## This is need to prevent warnings for rotations in 3D plots, while
     ## allowing colorbars with contours..
     if (nd == 2 || data_idx > 1)
       fputs (plot_stream, "set pm3d implicit;\n");
     else
       fputs (plot_stream, "set pm3d explicit;\n");
     endif
@@ -1416,16 +1421,21 @@ function nd = __calc_dimensions__ (obj)
       case {"image", "text"}
 	## ignore as they 
       case {"line", "patch"}
 	if (! isempty (obj.zdata))
 	  nd = 3;
 	endif
       case "surface"
 	nd = 3;
+      case "hggroup"
+        obj_nd = __calc_dimensions__ (obj);
+        if (obj_nd == 3)
+          nd = 3;
+        endif
     endswitch
   endfor
 endfunction
 
 function __gnuplot_write_data__ (plot_stream, data, nd, parametric, cdata)
   
   ## DATA is already transposed.
 
diff --git a/scripts/plot/hggroup.m b/scripts/plot/hggroup.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/hggroup.m
@@ -0,0 +1,43 @@
+## Copyright (C) 2008 Michael Goffioul
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {} hggroup ()
+## @deftypefnx {Function File} {} hggroup (@var{h})
+## @deftypefnx {Function File} {} hggroup (@dots{}, @var{property}, @var{value}, @dots{})
+## Create group object with parent @var{h}. If no parent is specified,
+## the group is created in the current axes. Return the handle of the
+## group object created.
+##
+## Multiple property-value pairs may be specified for the group, but they
+## must appear in pairs.
+## @end deftypefn
+
+## Author: goffioul
+
+function h = hggroup (varargin)
+
+  [ax, varargin] = __plt_get_axis_arg__ ("hggroup", varargin{:});
+
+  tmp = __go_hggroup__ (ax, varargin{:});
+
+  if (nargout > 0)
+    h = tmp;
+  endif
+
+endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -42,16 +42,30 @@ 2008-06-04  Shai Ayal  <shaiay@users.sou
 
 	* graphics.h.in (axes::properties::update_xlim): call the new
 	axes::properties::calc_ticks_and_lims method
 	(axes::properties::update_ylim): ditto
 	(axes::properties::update_zlim): ditto
 
 2008-06-04  Michael Goffioul <michael.goffioul@gmail.com>
 
+	* genprops.awk (emit_source): Fix if-then-else statement generation
+	when the first property is hidden.
+	* graphics.h.in (base_properties::adopt): Call mark_modified.
+	(class hggroup): New graphics object class.
+	* graphics.cc (lookup_object_name, make_graphics_object_from_type,
+	property_list::lookup, property_list::set,
+	root_figure::init_factory_properties): Support hggroup as possible
+	object type.
+	(hggroup::update_axis_limits): New graphics object class.
+	(make_graphics_object): Look for "parent" property in the arguments
+	and use it as actual parent for the created object.
+	(F__go_hggroup__): New function.
+	(F__go_delete__): Set Vdrawnow_requested to true.
+
 	* graphics.h.in (base_property::clone, string_property::clone,
 	radio_property::clone, color_property::clone, double_property::clone,
 	double_radio_property::clone, array_property::clone,
 	row_vector_property::clone, bool_property::clone,
 	handle_property::clone, callback_property::clone, any_property::clone,
 	property::clone): New virtual method.
 	(property::create): New static method to create dynamic properties.
 	(base_properties::has_property): New method to check the existence of
diff --git a/src/genprops.awk b/src/genprops.awk
--- a/src/genprops.awk
+++ b/src/genprops.awk
@@ -386,21 +386,26 @@ function emit_source ()
 
     printf ("  init ();\n}\n\n") >> filename;
 
     ## set method
 
     printf ("void\n%s::properties::set (const caseless_str& pname, const octave_value& val)\n{\n",
             class_name) >> filename;
 
+    first = 1;
+
     for (i = 1; i <= idx; i++)
     {
       if (! readonly[i])
+      {
         printf ("  %sif (pname.compare (\"%s\"))\n    set_%s (val);\n",
-                (i > 1 ? "else " : ""), name[i], name[i]) >> filename;
+                (first == 0 ? "else " : ""), name[i], name[i]) >> filename;
+        first = 0;
+      }
     }
 
     printf ("  else\n    base_properties::set (pname, val);\n}\n\n") >> filename;
 
     ## get "all" method
 
     printf ("octave_value\n%s::properties::get (bool all) const\n{\n", class_name) >> filename;
     printf ("  Octave_map m = base_properties::get (all).map_value ();\n\n") >> filename;
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -482,17 +482,17 @@ lookup_object_name (const caseless_str& 
 	      pfx = name.substr (0, 6);
 
 	      if (pfx.compare ("figure"))
 		offset = 6;
 	      else if (len >= 7)
 		{
 		  pfx = name.substr (0, 7);
 
-		  if (pfx.compare ("surface"))
+		  if (pfx.compare ("surface") || pfx.compare ("hggroup"))
 		    offset = 7;
 		}
 	    }
 	}
 
       if (offset > 0)
 	{
 	  go_name = pfx;
@@ -520,16 +520,18 @@ make_graphics_object_from_type (const ca
   else if (type.compare ("text"))
     go = new text (h, p);
   else if (type.compare ("image"))
     go = new image (h, p);
   else if (type.compare ("patch"))
     go = new patch (h, p);
   else if (type.compare ("surface"))
     go = new surface (h, p);
+  else if (type.compare ("hggroup"))
+    go = new hggroup (h, p);
 
   return go;
 }
 
 // ---------------------------------------------------------------------
 
 void
 base_property::run_listeners (listener_mode mode)
@@ -1019,17 +1021,17 @@ property_list::set (const caseless_str& 
 	      pfx = name.substr (0, 6);
 
 	      if (pfx.compare ("figure"))
 		offset = 6;
 	      else if (len > 7)
 		{
 		  pfx = name.substr (0, 7);
 
-		  if (pfx.compare ("surface"))
+		  if (pfx.compare ("surface") || pfx.compare ("hggroup"))
 		    offset = 7;
 		}
 	    }
 	}
 
       if (offset > 0)
 	{
 	  // FIXME -- should we validate property names and values here?
@@ -1092,17 +1094,17 @@ property_list::lookup (const caseless_st
 	      pfx = name.substr (0, 6);
 
 	      if (pfx.compare ("figure"))
 		offset = 6;
 	      else if (len > 7)
 		{
 		  pfx = name.substr (0, 7);
 
-		  if (pfx.compare ("surface"))
+		  if (pfx.compare ("surface") || pfx.compare ("hggroup"))
 		    offset = 7;
 		}
 	    }
 	}
 
       if (offset > 0)
 	{
 	  std::string pname = name.substr (offset);
@@ -3473,16 +3475,98 @@ surface::properties::update_normals (voi
 	}
 
       vertexnormals = n;
     }
 }
 
 // ---------------------------------------------------------------------
 
+void
+hggroup::update_axis_limits (const std::string& axis_type)
+{
+  Matrix kids = xproperties.get_children ();
+
+  octave_idx_type n = kids.numel ();
+
+  double min_val = octave_Inf;
+  double max_val = -octave_Inf;
+  double min_pos = octave_Inf;
+
+  char update_type = 0;
+
+  if (axis_type == "xlim")
+    {
+      get_children_limits (min_val, max_val, min_pos, kids, 'x');
+      
+      update_type = 'x';
+    }
+  else if (axis_type == "ylim")
+    {
+      get_children_limits (min_val, max_val, min_pos, kids, 'y');
+
+      update_type = 'y';
+    }
+  else if (axis_type == "zlim")
+    {
+      get_children_limits (min_val, max_val, min_pos, kids, 'z');
+
+      update_type = 'z';
+    }
+  else if (axis_type == "clim")
+    {
+      get_children_limits (min_val, max_val, min_pos, kids, 'c');
+
+      update_type = 'c';
+
+    }
+  else if (axis_type == "alim")
+    {
+      get_children_limits (min_val, max_val, min_pos, kids, 'a');
+
+      update_type = 'a';
+    }
+
+  Matrix limits (1, 3, 0.0);
+
+  limits(0) = min_val;
+  limits(1) = max_val;
+  limits(2) = min_pos;
+
+  switch (update_type)
+    {
+    case 'x':
+      xproperties.set_xlim (limits);
+      break;
+
+    case 'y':
+      xproperties.set_ylim (limits);
+      break;
+
+    case 'z':
+      xproperties.set_zlim (limits);
+      break;
+
+    case 'c':
+      xproperties.set_clim (limits);
+      break;
+
+    case 'a':
+      xproperties.set_alim (limits);
+      break;
+
+    default:
+      break;
+    }
+
+  base_graphics_object::update_axis_limits (axis_type);
+}
+
+// ---------------------------------------------------------------------
+
 octave_value
 base_graphics_object::get_default (const caseless_str& name) const
 {
   graphics_handle parent = get_parent ();
   graphics_object parent_obj = gh_manager::get_object (parent);
 
   return parent_obj.get_default (type () + name);
 }
@@ -3570,16 +3654,17 @@ root_figure::init_factory_properties (vo
 
   plist_map["figure"] = figure::properties::factory_defaults ();
   plist_map["axes"] = axes::properties::factory_defaults ();
   plist_map["line"] = line::properties::factory_defaults ();
   plist_map["text"] = text::properties::factory_defaults ();
   plist_map["image"] = image::properties::factory_defaults ();
   plist_map["patch"] = patch::properties::factory_defaults ();
   plist_map["surface"] = surface::properties::factory_defaults ();
+  plist_map["hggroup"] = hggroup::properties::factory_defaults ();
 
   return plist_map;
 }
 
 // ---------------------------------------------------------------------
 
 DEFUN (ishandle, args, ,
   "-*- texinfo -*-\n\
@@ -3772,32 +3857,58 @@ values or lists respectively.\n\
 }
 
 static octave_value
 make_graphics_object (const std::string& go_name,
 		      const octave_value_list& args)
 {
   octave_value retval;
 
-  double val = args(0).double_value ();
+  double val = octave_NaN;
+
+  octave_value_list xargs = args.splice (0, 1);
+
+  caseless_str p ("parent");
+
+  for (int i = 0; i < xargs.length (); i++)
+    if (xargs(i).is_string ()
+	&& p.compare (xargs(i).string_value ()))
+      {
+	if (i < (xargs.length () - 1))
+	  {
+	    val = xargs(i+1).double_value ();
+
+	    if (! error_state)
+	      {
+		xargs = xargs.splice (i, 2);
+		break;
+	      }
+	  }
+	else
+	  error ("__go_%s__: missing value for parent property",
+		 go_name.c_str ());
+      }
+
+  if (! error_state && xisnan (val))
+    val = args(0).double_value ();
 
   if (! error_state)
     {
       graphics_handle parent = gh_manager::lookup (val);
 
       if (parent.ok ())
 	{
 	  graphics_handle h
 	    = gh_manager::make_graphics_handle (go_name, parent, false);
 
 	  if (! error_state)
 	    {
 	      adopt (parent, h);
 
-	      xset (h, args.splice (0, 1));
+	      xset (h, xargs);
 	      xcreatefcn (h);
 
 	      retval = h.value ();
 
 	      if (! error_state)
 		Vdrawnow_requested = true;
 	    }
 	  else
@@ -3927,16 +4038,25 @@ DEFUN (__go_patch__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __go_patch__ (@var{parent})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   GO_BODY (patch);
 }
 
+DEFUN (__go_hggroup__, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} __go_hggroup__ (@var{parent})\n\
+Undocumented internal function.\n\
+@end deftypefn")
+{
+  GO_BODY (hggroup);
+}
+
 DEFUN (__go_delete__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __go_delete__ (@var{h})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
@@ -3960,16 +4080,18 @@ Undocumented internal function.\n\
 
               // NOTE: free the handle before removing it from its parent's
               //       children, such that the object's state is correct when
               //       the deletefcn callback is executed
 
 	      gh_manager::free (h);
 
 	      parent_obj.remove_child (h);
+
+	      Vdrawnow_requested = true;
 	    }
 	  else
 	    error ("delete: invalid graphics object (= %g)", val);
 	}
       else
 	error ("delete: invalid graphics object");
     }
   else
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1586,16 +1586,17 @@ public:
 
   virtual void remove_child (const graphics_handle& h);
 
   virtual void adopt (const graphics_handle& h)
   {
     octave_idx_type n = children.numel ();
     children.resize (1, n+1);
     children(n) = h.value ();
+    mark_modified ();
   }
 
   virtual graphics_backend get_backend (void) const;
 
   virtual Matrix get_boundingbox (bool /*internal*/ = false) const
     { return Matrix (1, 4, 0.0); }
 
   virtual void update_boundingbox (void);
@@ -3388,16 +3389,91 @@ public:
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
 };
 
+// ---------------------------------------------------------------------
+
+class OCTINTERP_API hggroup : public base_graphics_object
+{
+public:
+  class OCTINTERP_API properties : public base_properties
+  {
+  public:
+    void remove_child (const graphics_handle& h)
+      {
+	base_properties::remove_child (h);
+	update_limits ();
+      }
+
+    void adopt (const graphics_handle& h)
+      {
+	base_properties::adopt (h);
+	update_limits ();
+      }
+
+    // See the genprops.awk script for an explanation of the
+    // properties declarations.
+
+    BEGIN_PROPERTIES(hggroup)
+      // hidden properties for limit computation
+      row_vector_property xlim hr , Matrix()
+      row_vector_property ylim hr , Matrix()
+      row_vector_property zlim hr , Matrix()
+      row_vector_property clim hr , Matrix()
+      row_vector_property alim hr , Matrix()
+      bool_property xliminclude h , "on"
+      bool_property yliminclude h , "on"
+      bool_property zliminclude h , "on"
+      bool_property climinclude h , "on"
+      bool_property aliminclude h , "on"
+    END_PROPERTIES
+
+  private:
+    void update_limits (void)
+      {
+	update_axis_limits ("xlim");
+	update_axis_limits ("ylim");
+	update_axis_limits ("zlim");
+	update_axis_limits ("clim");
+	update_axis_limits ("alim");
+      }
+
+  protected:
+    void init (void)
+      { }
+  };
+
+private:
+  properties xproperties;
+
+public:
+  hggroup (const graphics_handle& mh, const graphics_handle& p)
+    : base_graphics_object (), xproperties (mh, p)
+  {
+    xproperties.override_defaults (*this);
+  }
+
+  ~hggroup (void) { xproperties.delete_children (); }
+
+  base_properties& get_properties (void) { return xproperties; }
+
+  const base_properties& get_properties (void) const { return xproperties; }
+
+  bool valid_object (void) const { return true; }
+  
+  void update_axis_limits (const std::string& axis_type);
+};
+
+// ---------------------------------------------------------------------
+
 octave_value
 get_property_from_handle (double handle, const std::string &property,
 			  const std::string &func);
 bool
 set_property_in_handle (double handle, const std::string &property,
 			const octave_value &arg, const std::string &func);
 
 // ---------------------------------------------------------------------
