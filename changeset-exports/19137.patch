# HG changeset patch
# User Andreas Weber <andy.weber.aw@gmail.com>
# Date 1411328548 -7200
#      Sun Sep 21 21:42:28 2014 +0200
# Node ID cfe8ec7650a119cce02d61e53a1a26c15e5d0a19
# Parent  10c57204fd726d09bfa05fe2c8cb823a69339938
test.m: use comma to separate observed and expected

diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -473,32 +473,32 @@ function [__n, __nmax, __nxfail, __nskip
           ## FIXME: lastwarn () must be called once from *WITHIN* the try block
           ##        or subsequent warning/lastwarn statements may fail.
           ##        Likely this is something to do with the specialness of
           ##        the try block which is disabling normal errors.
           lastwarn ();
           eval (sprintf ("__test__(%s);", __shared));
           if (! __iswarning)
             __msg = [__signal_fail "error failed.\n" ...
-                     "Expected " __patstr "but got no error\n"];
+                     "Expected " __patstr ", but got no error\n"];
           else
             if (! isempty (__id))
               [~, __err] = lastwarn ();
               __mismatch = ! strcmp (__err, __id);
             else
               __err = trimerr (lastwarn (), "warning");
               __mismatch = isempty (regexp (__err, __pattern, "once"));
             endif
             warning (__warnstate.state, "quiet");
             if (isempty (__err))
               __msg = [__signal_fail "warning failed.\n" ...
-                       "Expected " __patstr " but got no warning\n"];
+                       "Expected " __patstr ", but got no warning\n"];
             elseif (__mismatch)
               __msg = [__signal_fail "warning failed.\n" ...
-                       "Expected " __patstr " but got <" __err ">\n"];
+                       "Expected " __patstr ", but got <" __err ">\n"];
             else
               __success = true;
             endif
           endif
 
         catch
           if (! isempty (__id))
             [~, __err] = lasterr ();
@@ -506,20 +506,20 @@ function [__n, __nmax, __nxfail, __nskip
           else
             __err = trimerr (lasterr (), "error");
             __mismatch = isempty (regexp (__err, __pattern, "once"));
           endif
           warning (__warnstate.state, "quiet");
           if (__iswarning)
             __msg = [__signal_fail "warning failed.\n" ...
                      "Expected warning " __patstr ...
-                     " but got error <" __err ">\n"];
+                     ", but got error <" __err ">\n"];
           elseif (__mismatch)
             __msg = [__signal_fail "error failed.\n" ...
-                     "Expected " __patstr " but got <" __err ">\n"];
+                     "Expected " __patstr ", but got <" __err ">\n"];
           else
             __success = true;
           endif
         end_try_catch
         clear __test__;
       endif
       ## Code already processed.
       __code = "";
