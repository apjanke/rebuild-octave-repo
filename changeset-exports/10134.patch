# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1263933921 -3600
#      Tue Jan 19 21:45:21 2010 +0100
# Node ID be13fa20656a7f332f237a3f480e1f0f24baca3d
# Parent  2e4fc7fdba15c0492e740e1002bc480633c15cc1
error on invalid opts in structfun

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-01-19  Jaroslav Hajek  <highegg@gmail.com>
+
+	* general/structfun.m: Error when invalid options are specified.
+
 2010-01-19  Jaroslav Hajek  <highegg@gmail.com>, Thorsten Meyer <thorsten.meyier@gmx.de>
 
 	* general/structfun.m: Correctly support multiple arguments with
 	non-uniform output. Correct test for non-uniform output.
 
 2010-01-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* help/print_usage.m: Try determining whether called from top level.
diff --git a/scripts/general/structfun.m b/scripts/general/structfun.m
--- a/scripts/general/structfun.m
+++ b/scripts/general/structfun.m
@@ -66,28 +66,42 @@
 ## identifier, the error message, and the index into the input arguments
 ## of the element that caused the error.  For an example on how to use
 ## an error handler, @pxref{doc-cellfun, @code{cellfun}}. 
 ##
 ## @seealso{cellfun, arrayfun}
 ## @end deftypefn
 
 function varargout = structfun (fun, s, varargin);
+
   if (nargin < 2)
     print_usage ();
   endif
 
+  nargs = length (varargin);
+
+  recognized_opts = {"UniformOutput", "ErrorHandler"};
+  uo_str = recognized_opts{1};
+
   uniform_output = true;
-  uo_str = "uniformoutput";
 
-  nargs = length (varargin);
-  if (nargs >= 2 && strcmpi (varargin{1}, uo_str))
-    uniform_output =varargin{2};
-  elseif (nargs >= 4 && strcmpi (varargin{3}, uo_str))
-    uniform_output =varargin{4};
+  while (nargs >= 2)
+    opt_match = strcmpi (varargin{nargs-1}, recognized_opts);
+    if (opt_match(1))
+      uniform_output = varargin{nargs};
+    endif
+    if (any (opt_match))
+      nargs -= 2;
+    else
+      break;
+    endif
+  endwhile
+
+  if (nargs > 0)
+    error ("structfun: invalid options");
   endif
 
   varargout = cell (max ([nargout, 1]), 1);
   [varargout{:}] = cellfun (fun, struct2cell (s), varargin{:});
 
   if (! uniform_output)
     varargout = cellfun (@cell2struct, varargout, {fieldnames(s)}, {1}, uo_str, false);
   endif
