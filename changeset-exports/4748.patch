# HG changeset patch
# User jwe
# Date 1076135248 0
#      Sat Feb 07 06:27:28 2004 +0000
# Node ID 7b145222fea32654281ddc9f043b223ab85f7569
# Parent  3f28979bbe2c17f4a44cd76702c0b3e26c582203
[project @ 2004-02-07 06:27:27 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,46 @@
+2004-02-06  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-usr-fcn.h (octave_user_function::function_name): Delete.
+	(octave_user_function::fcn_name): Delete unused data member.
+	(octave_user_function::stash_function_name): Save name in
+	tree_function::my_name instead of fcn_name.
+	Change all uses of fcn_name to be my_name instead.
+
+	* pt.h, pt.cc (tree::break_function): Now pointer to
+	octave_function rather than octave_user_function object.
+
+	* pt-bp.h (MAYBE_DO_BREAKPOINT): Use name instead of function_name
+	to get name from curr_function.
+	* pt-pr-code.cc (tree_print_code::visit_octave_user_function_header):
+	likewise.
+	* debug.cc (Fdbwhere, Fdbtype, ): Likewise
+	* error.cc (pr_where): Likewise.
+	* variables.cc (Fmlock, Fmunlock, Fmislocked): Likewise.
+	(lookup_function, lookup_user_function,	link_to_builtin_or_function):
+	Likewise, for curr_parent_function.
+
+	* debug.cc (get_user_function, Fdbwhere):
+	Cast curr_function to pointer to octave_user_function.
+
+	* ov-mapper.cc (octave_mapper::do_multi_index_op):
+	Save and restore curr_function here.
+	* ov-builtin.cc (octave_builtin::do_multi_index_op): Likewise.
+
+	* toplev.h, toplev.cc (curr_function, curr_parent_function): Now
+	pointers to octave_function rather than octave_user_function objects.
+
+	* ov-usr-fcn.h (octave_user_function::is_user_function): New function.
+	* ov-fcn.h (octave_function::takes_varargs,
+	octave_function::octave_va_start, octave_function::octave_va_arg,
+	octave_function::octave_all_va_args,
+	octave_function::takes_var_return, octave_function::octave_vr_val, 
+	octave_function::is_user_function): New virtual functions.
+
 2004-02-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-struct.cc (Fstruct): Use new Octave_map constructor to create
 	structures with specified sizes but no keys.
 
 	* ov-struct.cc (Fstruct): New function, from Paul Kienzle
 	<pkienzle@users.sf.net> and Petter Risholm  <risholm@stud.ntnu.no>.
 
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -68,18 +68,18 @@ get_user_function (std::string str = "")
 	
 	  if (ptr && ptr->is_user_function ())
 	    {
 	      octave_value tmp = ptr->def ();
 	      dbg_fcn = dynamic_cast<octave_user_function *> (tmp.function_value ());
 	    }
 	}
     }
-  else if (curr_function)
-    dbg_fcn = curr_function;
+  else if (curr_function && curr_function->is_user_function ())
+    dbg_fcn = dynamic_cast<octave_user_function *> (curr_function);
 
   return dbg_fcn;
 }
 
 
 DEFCMD (dbstop, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {rline =} dbstop (func, line)\n\
@@ -277,21 +277,24 @@ DEFCMD (dbwhere, , ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} dbwhere ()\n\
 Show where we are in the code\n\
 @end deftypefn\n\
 @seealso{dbclear, dbstatus, dbstop}")
 {
   octave_value retval;
 
-  octave_user_function *dbg_fcn = curr_function;
+  octave_user_function *dbg_fcn = 0;
+
+  if (curr_function && curr_function->is_user_function ())
+    dbg_fcn = dynamic_cast<octave_user_function *> (curr_function);
 
   if (dbg_fcn)
     {
-      std::string name = dbg_fcn->function_name ();
+      std::string name = dbg_fcn->name ();
 
       octave_stdout << name << ":";
 
       const tree *dbg_stmt = tree::break_statement;
 
       if (dbg_stmt)
 	{
 	  octave_stdout << "line " << dbg_stmt->line () << ", ";
@@ -364,26 +367,26 @@ List script file with line numbers.\n\
   if (! error_state)
     {
       switch (nargin)
 	{
 	case 0: // dbtype
 	  dbg_fcn = get_user_function ();
 
 	  if (dbg_fcn)
-	    do_dbtype (octave_stdout, dbg_fcn->function_name (), 0, INT_MAX);
+	    do_dbtype (octave_stdout, dbg_fcn->name (), 0, INT_MAX);
 	  else
 	    error ("dbtype: must be in a user function to give no arguments to dbtype\n");
 	  break;
 
 	case 1: // (dbtype func) || (dbtype start:end)
 	  dbg_fcn = get_user_function (argv[1]);
 
 	  if (dbg_fcn)
-	    do_dbtype (octave_stdout, dbg_fcn->function_name (), 0, INT_MAX);
+	    do_dbtype (octave_stdout, dbg_fcn->name (), 0, INT_MAX);
 	  else
 	    {
 	      dbg_fcn = get_user_function ("");
 
 	      if (dbg_fcn)
 		{
 		  std::string arg = argv[1];
 
@@ -394,17 +397,17 @@ List script file with line numbers.\n\
 		      std::string start_str = arg.substr (0, ind);
 		      std::string end_str = arg.substr (ind + 1);
 
 		      int start = atoi (start_str.c_str ());
 		      int end = atoi (end_str.c_str ());
 		
 		      if (start < end)
 			do_dbtype (octave_stdout,
-				   dbg_fcn->function_name (), start, end);
+				   dbg_fcn->name (), start, end);
 		      else
 			error ("dbtype: the start line must be less than the end line\n");
 		    }
 		  else
 		    error ("dbtype: if you specify lines it must be like `start:end`");
 		}
 	    }
 	  break;
@@ -423,17 +426,17 @@ List script file with line numbers.\n\
 		  std::string start_str = arg.substr (0, ind);
 		  std::string end_str = arg.substr (ind + 1);
 
 		  int start = atoi (start_str.c_str ());
 		  int end = atoi (end_str.c_str ());
 		
 		  if (start < end)
 		    do_dbtype (octave_stdout,
-			       dbg_fcn->function_name (), start, end);
+			       dbg_fcn->name (), start, end);
 		  else
 		    error ("dbtype: the start line must be less than the end line\n");
 		}
 	      else
 		error ("dbtype: if you specify lines it must be like `start:end`");
 	    }
 	  break;
 
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -317,17 +317,17 @@ static void
 pr_where (const char *name, bool print_code = true)
 {
   if (curr_statement)
     {
       const char *f_nm = 0;
 
       if (curr_function)
 	{
-	  std::string fcn_name = curr_function->function_name ();
+	  std::string fcn_name = curr_function->name ();
 	  std::string file_name = curr_function->fcn_file_name ();
 
 	  f_nm = file_name.empty () ? fcn_name.c_str () : file_name.c_str ();
 	}
 
       int l = curr_statement->line ();
       int c = curr_statement->column ();
 
diff --git a/src/ov-builtin.cc b/src/ov-builtin.cc
--- a/src/ov-builtin.cc
+++ b/src/ov-builtin.cc
@@ -27,16 +27,18 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "error.h"
 #include "oct-obj.h"
 #include "ov-builtin.h"
 #include "ov.h"
+#include "toplev.h"
+#include "unwind-prot.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_builtin);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_builtin,
 				     "built-in function",
 				     "built-in function");
 
 // Are any of the arguments `:'?
@@ -100,17 +102,24 @@ octave_builtin::do_multi_index_op (int n
   octave_value_list retval;
 
   if (error_state)
     return retval;
 
   if (any_arg_is_magic_colon (args))
     ::error ("invalid use of colon in function argument list");
   else
-    retval = (*f) (args, nargout);
+    {
+      unwind_protect_ptr (curr_function);
+      curr_function = this;
+
+      retval = (*f) (args, nargout);
+
+      unwind_protect::run ();
+    }
 
   return retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-fcn.h b/src/ov-fcn.h
--- a/src/ov-fcn.h
+++ b/src/ov-fcn.h
@@ -28,16 +28,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <string>
 
 #include "oct-time.h"
 #include "str-vec.h"
 
 #include "oct-alloc.h"
+#include "oct-obj.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 class tree_walker;
 
 // Functions.
 
 class
@@ -67,16 +68,33 @@ public:
   virtual octave_time time_parsed (void) const
     { return octave_time (static_cast<time_t> (0)); }
 
   virtual octave_time time_checked (void) const
     { return octave_time (static_cast<time_t> (0)); }
 
   virtual bool is_nested_function (void) const { return false; }
 
+  virtual bool is_user_function (void) const { return false; }
+
+  virtual bool takes_varargs (void) const { return false; }
+
+  virtual void octave_va_start (void) { }
+
+  virtual octave_value octave_va_arg (void) const { return octave_value (); }
+
+  virtual octave_value_list octave_all_va_args (void)
+    { return octave_value_list (); }
+
+  virtual bool takes_var_return (void) const { return false; }
+
+  virtual void octave_vr_val (const octave_value& val) { }
+
+  virtual bool has_varargout (void) const { return false; }
+
   std::string name (void) const { return my_name; }
 
   std::string doc_string (void) const { return doc; }
 
   virtual void unload (void) { }
 
   virtual void accept (tree_walker&) { }
 
diff --git a/src/ov-mapper.cc b/src/ov-mapper.cc
--- a/src/ov-mapper.cc
+++ b/src/ov-mapper.cc
@@ -30,16 +30,18 @@ Software Foundation, 59 Temple Place - S
 
 #include "quit.h"
 
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov-mapper.h"
 #include "ov.h"
+#include "toplev.h"
+#include "unwind-prot.h"
 
 DEFINE_OCTAVE_ALLOCATOR (octave_mapper);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_mapper,
 				     "built-in mapper function",
 				     "built-in mapper function");
 
 static bool
@@ -279,17 +281,24 @@ octave_mapper::do_multi_index_op (int, c
 
   if (nargin > 1)
     ::error ("%s: too many arguments", name().c_str ());
   else if (nargin < 1)
     ::error ("%s: too few arguments", name().c_str ());
   else
     {
       if (args(0).is_defined ())
-	retval = apply (args(0));
+	{
+	  unwind_protect_ptr (curr_function);
+	  curr_function = this;
+
+	  retval = apply (args(0));
+
+	  unwind_protect::run ();
+	}
       else
 	::error ("%s: argument undefined", name().c_str ());
     }
 
   return retval;
 }
 
 /*
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -65,18 +65,17 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
 // Ugh.  This really needs to be simplified (code/data?
 // extrinsic/intrinsic state?).
 
 octave_user_function::octave_user_function
   (tree_parameter_list *pl, tree_parameter_list *rl,
    tree_statement_list *cl, symbol_table *st)
   : octave_function (std::string (), std::string ()),
     param_list (pl), ret_list (rl), cmd_list (cl),
-    sym_tab (st), lead_comm (), trail_comm (),
-    file_name (), fcn_name (),
+    sym_tab (st), lead_comm (), trail_comm (), file_name (),
     t_parsed (static_cast<time_t> (0)),
     t_checked (static_cast<time_t> (0)),
     system_fcn_file (false), call_depth (0),
     num_named_args (0), nested_function (false),
     args_passed (), num_args_passed (0),
     curr_va_arg_number (0), vr_list (0), symtab_entry (0),
     argn_sr (0), nargin_sr (0), nargout_sr (0), varargin_sr (0)
 {
@@ -237,22 +236,16 @@ octave_user_function::has_varargout (voi
       symbol_record *sr = sym_tab->lookup ("varargout");
 
       retval = (sr && sr->is_variable ());
     }
 
   return retval;
 }
 
-void
-octave_user_function::stash_function_name (const std::string& s)
-{
-  fcn_name = s;
-}
-
 // For unwind protect.
 
 static void
 pop_symbol_table_context (void *table)
 {
   symbol_table *tmp = static_cast<symbol_table *> (table);
   tmp->pop_context ();
 }
@@ -480,18 +473,17 @@ octave_user_function::do_multi_index_op 
 	traceback_error ();
 	goto abort;
       }
     
     // Copy return values out.
 
     if (ret_list)
       {
-	ret_list->initialize_undefined_elements (function_name (),
-						 nargout, Matrix ());
+	ret_list->initialize_undefined_elements (my_name, nargout, Matrix ());
 
 	if (has_varargout ())
 	  varargout_to_vr_val ();
 
 	retval = ret_list->convert_to_const_vector (vr_list);
       }
   }
 
@@ -502,46 +494,46 @@ octave_user_function::do_multi_index_op 
 }
 
 void
 octave_user_function::traceback_error (void) const
 {
   if (error_state >= 0)
     error_state = -1;
 
-  if (fcn_name.empty ())
+  if (my_name.empty ())
     {
       if (file_name.empty ())
 	::error ("called from `?unknown?'");
       else
 	::error ("called from file `%s'", file_name.c_str ());
     }
   else
     {
       if (file_name.empty ())
-	::error ("called from `%s'", fcn_name.c_str ());
+	::error ("called from `%s'", my_name.c_str ());
       else 
 	::error ("called from `%s' in file `%s'",
-		 fcn_name.c_str (), file_name.c_str ());
+		 my_name.c_str (), file_name.c_str ());
     }
 }
 
 void
 octave_user_function::accept (tree_walker& tw)
 {
   tw.visit_octave_user_function (*this);
 }
 
 void
 octave_user_function::print_symtab_info (std::ostream& os) const
 {
   if (sym_tab)
     sym_tab->print_info (os);
   else
-    warning ("%s: no symbol table info!", fcn_name.c_str ());
+    warning ("%s: no symbol table info!", my_name.c_str ());
 }
 
 void
 octave_user_function::print_code_function_header (void)
 {
   tree_print_code tpc (octave_stdout, Vps4);
 
   tpc.visit_octave_user_function_header (*this);
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -90,35 +90,35 @@ public:
   octave_time time_parsed (void) const { return t_parsed; }
 
   octave_time time_checked (void) const { return t_checked; }
 
   void mark_as_system_fcn_file (void);
 
   bool is_system_fcn_file (void) const { return system_fcn_file; }
 
+  bool is_user_function (void) const { return true; }
+
   bool takes_varargs (void) const;
 
   void octave_va_start (void) { curr_va_arg_number = num_named_args; }
 
   octave_value octave_va_arg (void);
 
   octave_value_list octave_all_va_args (void);
 
   bool takes_var_return (void) const;
 
   void octave_vr_val (const octave_value& val);
 
   void varargout_to_vr_val (void);
 
   bool has_varargout (void) const;
 
-  void stash_function_name (const std::string& s);
-
-  std::string function_name (void) const { return fcn_name; }
+  void stash_function_name (const std::string& s) { my_name = s; }
 
   void mark_as_nested_function (void) { nested_function = true; }
 
   bool is_nested_function (void) const { return nested_function; }
 
   void save_args_passed (const octave_value_list& args)
     {
       if (call_depth > 1)
@@ -187,19 +187,16 @@ private:
   octave_comment_list *lead_comm;
 
   // The comments preceding the ENDFUNCTION token.
   octave_comment_list *trail_comm;
 
   // The name of the file we parsed
   std::string file_name;
 
-  // The name of the function.
-  std::string fcn_name;
-
   // The time the file was parsed.
   octave_time t_parsed;
 
   // The time the file was last checked to see if it needs to be
   // parsed again.
   octave_time t_checked;
 
   // True if this function came from a file that is considered to be a
diff --git a/src/pt-bp.h b/src/pt-bp.h
--- a/src/pt-bp.h
+++ b/src/pt-bp.h
@@ -184,17 +184,17 @@ extern bool octave_debug_on_interrupt_st
 	      && tree::last_line != line ()) \
 	  || is_breakpoint ()) \
         { \
           octave_debug_on_interrupt_state = false; \
  \
           tree::break_next = false; \
  \
           if (curr_function) \
-            octave_stdout << curr_function->function_name () << ": ";  \
+            octave_stdout << curr_function->name () << ": ";  \
  \
           octave_stdout << "line " << line () << ", " \
 			<< "column " << column () \
 			<< std::endl; \
  \
           tree_print_code tpc (octave_stdout); \
           this->accept (tpc); \
  \
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -326,17 +326,17 @@ tree_print_code::visit_octave_user_funct
 	{
 	  nesting.pop ();
 	  os << "]";
 	}
 
       os << " = ";
     }
 
-  std::string fcn_name = fcn.function_name ();
+  std::string fcn_name = fcn.name ();
 
   os << (fcn_name.empty () ? std::string ("(empty)") : fcn_name) << " ";
 
   tree_parameter_list *param_list = fcn.parameter_list ();
 
   if (param_list)
     {
       bool takes_varargs = fcn.takes_varargs ();
diff --git a/src/pt.cc b/src/pt.cc
--- a/src/pt.cc
+++ b/src/pt.cc
@@ -28,27 +28,28 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include <iostream>
 #include <string>
 
 #include "lo-sstream.h"
 
+#include "ov-fcn.h"
 #include "pt.h"
 #include "pt-pr-code.h"
 
 // If true, stop executing at the next possible point.
 bool tree::break_next = false;
 
 // The line where dbg_next was executed.
 int tree::last_line = 0;
 
 // The function where the last breakpoint occurred.
-const octave_user_function *tree::break_function = 0;
+const octave_function *tree::break_function = 0;
 
 // The statement where the last breakpoint occurred.
 const tree *tree::break_statement = 0;
 
 // Hide the details of the string buffer so that we are less likely to
 // create a memory leak.
 
 std::string
diff --git a/src/pt.h b/src/pt.h
--- a/src/pt.h
+++ b/src/pt.h
@@ -26,17 +26,17 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma interface
 #endif
 
 #include <string>
 
 #include <iostream>
 
-class octave_user_function;
+class octave_function;
 class tree_walker;
 
 // Base class for the parse tree.
 
 class
 tree
 {
 public:
@@ -70,17 +70,17 @@ public:
 
   // If true, stop executing at the next possible point.
   static bool break_next;
   
   // The line where dbg_next was executed.
   static int last_line; 
 
   // The function where the last breakpoint occurred.
-  static const octave_user_function *break_function;
+  static const octave_function *break_function;
 
   // The statement where the last breakpoint occurred.
   static const tree *break_statement;
 
 private:
 
   // The input line and column where we found the text that was
   // eventually converted to this tree node.
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -86,20 +86,20 @@ bool octave_interpreter_ready = false;
 
 // TRUE means we've processed all the init code and we are good to go.
 bool octave_initialized = false;
 
 // Current command to execute.
 tree_statement_list *global_command = 0;
 
 // Pointer to function that is currently being evaluated.
-octave_user_function *curr_function = 0;
+octave_function *curr_function = 0;
 
 // Pointer to parent function that is currently being evaluated.
-octave_user_function *curr_parent_function = 0;
+octave_function *curr_parent_function = 0;
 
 static void
 recover_from_exception (void)
 {
   can_interrupt = true;
   octave_interrupt_immediately = 0;
   octave_interrupt_state = 0;
   octave_allocation_error = 0;
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -41,20 +41,20 @@ main_loop (const std::string& fun_to_cal
 
 extern void
 do_octave_atexit (void);
 
 // Current command to execute.
 extern tree_statement_list *global_command;
 
 // Pointer to function that is currently being evaluated.
-extern octave_user_function *curr_function;
+extern octave_function *curr_function;
 
 // Pointer to parent function that is currently being evaluated.
-extern octave_user_function *curr_parent_function;
+extern octave_function *curr_parent_function;
 
 // TRUE means we are ready to interpret commands, but not everything
 // is ready for interactive use.
 extern bool octave_interpreter_ready;
 
 // TRUE means we've processed all the init code and we are good to go.
 extern bool octave_initialized;
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -815,17 +815,17 @@ octave_function *
 lookup_function (const std::string& nm)
 {
   octave_function *retval = 0;
 
   symbol_record *sr = 0;
 
   if (curr_parent_function)
     {
-      std::string parent = curr_parent_function->function_name ();
+      std::string parent = curr_parent_function->name ();
 
       sr = fbi_sym_tab->lookup (parent + ":" + nm);
     }
 
   if (! sr || ! sr->is_function ())
     {
       sr = fbi_sym_tab->lookup (nm, true);
 
@@ -848,17 +848,17 @@ octave_user_function *
 lookup_user_function (const std::string& nm)
 {
   octave_user_function *retval = 0;
 
   symbol_record *sr = 0;
 
   if (curr_parent_function)
     {
-      std::string parent = curr_parent_function->function_name ();
+      std::string parent = curr_parent_function->name ();
 
       sr = fbi_sym_tab->lookup (parent + ":" + nm);
     }
 
   if (! sr || ! sr->is_user_function ())
     {
       sr = fbi_sym_tab->lookup (nm, true);
 
@@ -1022,17 +1022,17 @@ void
 link_to_builtin_or_function (symbol_record *sr)
 {
   std::string nm = sr->name ();
 
   symbol_record *tmp_sym = 0;
 
   if (curr_parent_function)
     {
-      std::string parent = curr_parent_function->function_name ();
+      std::string parent = curr_parent_function->name ();
 
       tmp_sym = fbi_sym_tab->lookup (parent + ":" + nm);
     }
 
   if (! tmp_sym)
     tmp_sym = fbi_sym_tab->lookup (nm);
 
   if (tmp_sym
@@ -1491,17 +1491,17 @@ then lock in the current function.\n\
       if (! error_state)
 	mlock (name);
       else
 	error ("mlock: expecting argument to be a function name");
     }
   else if (args.length () == 0)
     {
       if (curr_function)
-        mlock (curr_function->function_name ());
+        mlock (curr_function->name ());
       else
         error ("mlock: invalid use outside a function");
     }
   else
     print_usage ("mlock");
 
   return retval;
 }
@@ -1523,17 +1523,17 @@ then unlock the current function.\n\
       if (! error_state)
         munlock (name);
       else
 	error ("munlock: expecting argument to be a function name");
     }
   else if (args.length () == 0)
     {
       if (curr_function)
-        mlock (curr_function->function_name ());
+        mlock (curr_function->name ());
       else
         error ("munlock: invalid use outside a function");
     }
   else
     print_usage ("munlock");
 
   return retval;
 }
@@ -1556,17 +1556,17 @@ then return true if the current function
       if (! error_state)
         retval = mislocked (name);
       else
 	error ("mislocked: expecting argument to be a function name");
     }
   else if (args.length () == 0)
     {
       if (curr_function)
-        retval = mislocked (curr_function->function_name ());
+        retval = mislocked (curr_function->name ());
       else
         error ("mislocked: invalid use outside a function");
     }
   else
     print_usage ("mislocked");
 
   return retval;
 }
