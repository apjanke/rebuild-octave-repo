# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1366872165 14400
#      Thu Apr 25 02:42:45 2013 -0400
# Node ID 662a712b8fd570be07e92a660b74c09c28e04141
# Parent  e4b94abfeb966825e759867b1bce94bcceda7c58
partial menu bar cleanup

* file-editor-interface.h (file_editor_interface::request_new_script,
file_editor_interface::request_new_function): New functions.

* file-editor.h, file-editor.cc (file_editor::request_new_script,
file_editor::request_new_function): New functions.

* main-window.h, main-window.cc (main_window::construct_desktop_menu):
Delete function and all uses.
(main_window::handle_new_figure_request,
main_window::handle_new_variable_request,
main_window::new_figure_callback): New functions.
(main_window::construct_file_menu, main_window::construct_edit_menu):
Delete close_command_window_action, import_data_action,
page_setup_action, print_action, print_selection_action,
new_class_action, new_enumeration_action, new_gui_action,
paste_to_workspace_action, find_action.  Move load_workspace_action to
file_menu.

diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -60,16 +60,18 @@ class file_editor_interface : public oct
   virtual void handle_edit_file_request (const QString& file) = 0;
 
   virtual void set_focus () = 0;
 
   virtual void connect_visibility_changed (void) = 0;
 
 public slots:
   virtual void request_new_file (const QString& command = QString ()) = 0;
+  virtual void request_new_script (const QString& command = QString ()) = 0;
+  virtual void request_new_function (const QString& command = QString ()) = 0;
   virtual void request_open_file () = 0;
   virtual void request_open_file (const QString& openFileName, int line = -1,
                                   bool debug_pointer = false,
                                   bool breakpoint_marker = false,
                                   bool insert = true) = 0;
 //signals:
 
 //protected:
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -146,16 +146,41 @@ file_editor::request_new_file (const QSt
     {
       add_file_editor_tab (fileEditorTab, "");  // new tab with empty title
       fileEditorTab->new_file (commands);       // title is updated here
       set_focus ();                             // focus editor and new tab
     }
 }
 
 void
+file_editor::request_new_script (const QString& commands)
+{
+  request_new_file (commands);
+}
+
+void
+file_editor::request_new_function (const QString& commands)
+{
+  QString text = commands;
+
+  if (text.isEmpty ())
+    text = "## Copyright (C)\n"
+      "\n"
+      "## -*- texinfo -*-\n"
+      "## @deftypefn {Function File} {[outputs] =} unamed_function (inputs)\n"
+      "## @end deftypefn\n"
+      "\n"
+      "function [outputs] = unnamed_function (inputs)\n"
+      "\n"
+      "endfunction\n";
+
+  request_new_file (text);
+}
+
+void
 file_editor::request_open_file (void)
 {
   // Open file isn't a file_editor_tab function since the file
   // editor tab has yet to be created and there is no object to
   // pass a signal to.  Hence, functionality is here.
 
   // Create a NonModal message.
   QFileDialog *fileDialog = new QFileDialog (this);
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -98,16 +98,18 @@ signals:
                                    int line = -1);
   void fetab_set_focus (const QWidget* ID);
 
 public slots:
   void focus (void);
   void handle_visibility (bool visible);
 
   void request_new_file (const QString& commands);
+  void request_new_script (const QString& commands);
+  void request_new_function (const QString& commands);
   void request_open_file (void);
   void request_mru_open_file (void);
   void request_print_file (void);
 
   void request_undo (void);
   void request_redo (void);
   void request_copy (void);
   void request_cut (void);
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -191,16 +191,29 @@ void
 main_window::handle_command_double_clicked (const QString& command)
 {
   emit relay_command_signal (command);
 
   command_window->focus ();
 }
 
 void
+main_window::handle_new_figure_request (void)
+{
+  octave_link::post_event (this, &main_window::new_figure_callback);
+}
+
+void
+main_window::handle_new_variable_request (void)
+{
+  QMessageBox::about (this, tr ("New Variable"),
+                      tr ("The new variable action is not implemented."));
+}
+
+void
 main_window::open_online_documentation_page (void)
 {
   QDesktopServices::openUrl (QUrl ("http://gnu.org/software/octave/doc/interpreter"));
 }
 
 void
 main_window::open_bug_tracker_page (void)
 {
@@ -805,18 +818,16 @@ main_window::construct_menu_bar (void)
   QMenuBar *menu_bar = menuBar ();
 
   construct_file_menu (menu_bar);
 
   construct_edit_menu (menu_bar);
 
   construct_debug_menu (menu_bar);
 
-  construct_desktop_menu (menu_bar);
-
   construct_window_menu (menu_bar);
 
   construct_help_menu (menu_bar);
 }
 
 void
 main_window::construct_file_menu (QMenuBar *p)
 {
@@ -829,102 +840,80 @@ main_window::construct_file_menu (QMenuB
                             tr ("Open..."));
   _open_action->setShortcut (QKeySequence::Open);
   _open_action->setShortcutContext (Qt::ApplicationShortcut);
 
 #ifdef HAVE_QSCINTILLA
   file_menu->addMenu (editor_window->get_mru_menu ());
 #endif
 
-  QAction *close_command_window_action
-    = file_menu->addAction (tr ("Close Command Window"));
-  close_command_window_action->setShortcut (QKeySequence::Close);
-  close_command_window_action->setEnabled (false); // TODO: Make this work.
-
   file_menu->addSeparator ();
 
-  QAction *import_data_action
-    = file_menu->addAction (tr ("Import Data"));
-  import_data_action->setEnabled (false); // TODO: Make this work.
+  QAction *load_workspace_action
+    = file_menu->addAction (tr ("Load workspace"));
 
   QAction *save_workspace_action
     = file_menu->addAction (tr ("Save Workspace As"));
 
   file_menu->addSeparator ();
 
   QAction *preferences_action
     = file_menu->addAction (QIcon (":/actions/icons/configure.png"),
                             tr ("Preferences..."));
 
   file_menu->addSeparator ();
 
-  QAction *page_setup_action
-    = file_menu->addAction (tr ("Page Setup..."));
-  page_setup_action->setEnabled (false); // TODO: Make this work.
-
-  QAction *print_action
-    = file_menu->addAction (tr ("Print"));
-  print_action->setShortcut (QKeySequence::Print);
-  print_action->setEnabled (false); // TODO: Make this work.
-
-  QAction *print_selection_action
-    = file_menu->addAction (tr ("Print Selection..."));
-  print_selection_action->setEnabled (false); // TODO: Make this work.
-
-  file_menu->addSeparator ();
-
   QAction *exit_action = file_menu->addAction (tr ("Exit"));
   exit_action->setShortcut (QKeySequence::Quit);
 
   connect (preferences_action, SIGNAL (triggered ()),
            this, SLOT (process_settings_dialog_request ()));
 
   connect (_open_action, SIGNAL (triggered ()),
            editor_window, SLOT (request_open_file ()));
 
+  connect (load_workspace_action, SIGNAL (triggered ()),
+           this, SLOT (handle_load_workspace_request ()));
+
   connect (save_workspace_action, SIGNAL (triggered ()),
            this, SLOT (handle_save_workspace_request ()));
 
   connect (exit_action, SIGNAL (triggered ()),
            this, SLOT (close ()));
 }
 
 void
 main_window::construct_new_menu (QMenu *p)
 {
   QMenu *new_menu = p->addMenu (tr ("New"));
 
   _new_script_action
-    = new_menu->addAction (QIcon (":/actions/icons/filenew.png"), tr ("Script"));
-  _new_script_action->setShortcut (QKeySequence::New);
-  _new_script_action->setShortcutContext (Qt::ApplicationShortcut);
+    = new_menu->addAction (QIcon (":/actions/icons/filenew.png"),
+                           tr ("Script"));
 
   QAction *new_function_action = new_menu->addAction (tr ("Function"));
-  new_function_action->setEnabled (false); // TODO: Make this work.
-
-  QAction *new_class_action = new_menu->addAction (tr ("Class"));
-  new_class_action->setEnabled (false); // TODO: Make this work.
-
-  QAction *new_enumeration_action = new_menu->addAction (tr ("Enumeration"));
-  new_enumeration_action->setEnabled (false); // TODO: Make this work.
+  new_function_action->setEnabled (true);
 
   QAction *new_figure_action = new_menu->addAction (tr ("Figure"));
-  new_figure_action->setEnabled (false); // TODO: Make this work.
+  new_figure_action->setEnabled (true);
 
   QAction *new_variable_action = new_menu->addAction (tr ("Variable"));
-  new_variable_action->setEnabled (false); // TODO: Make this work.
-
-  QAction *new_model_action = new_menu->addAction (tr ("Model"));
-  new_model_action->setEnabled (false); // TODO: Make this work.
-
-  QAction *new_gui_action = new_menu->addAction (tr ("GUI"));
-  new_gui_action->setEnabled (false); // TODO: Make this work.
+  new_variable_action->setEnabled (true);
 
   connect (_new_script_action, SIGNAL (triggered ()),
-           editor_window, SLOT (request_new_file ()));
+           editor_window, SLOT (request_new_script ()));
+
+  connect (new_function_action, SIGNAL (triggered ()),
+           editor_window, SLOT (request_new_function ()));
+
+  connect (new_figure_action, SIGNAL (triggered ()),
+           this, SLOT (handle_new_figure_request ()));
+
+  connect (new_variable_action, SIGNAL (triggered ()),
+           this, SLOT (handle_new_variable_request ()));
 }
 
 void
 main_window::construct_edit_menu (QMenuBar *p)
 {
   QMenu *edit_menu = p->addMenu (tr ("&Edit"));
 
   QKeySequence ctrl_shift = Qt::ControlModifier + Qt::ShiftModifier;
@@ -942,37 +931,27 @@ main_window::construct_edit_menu (QMenuB
   _copy_action
     = edit_menu->addAction (QIcon (":/actions/icons/editcopy.png"), tr ("Copy"));
   _copy_action->setShortcut (ctrl_shift + Qt::Key_C);
 
   _paste_action
     = edit_menu->addAction (QIcon (":/actions/icons/editpaste.png"), tr ("Paste"));
   _paste_action->setShortcut (ctrl_shift + Qt::Key_V);
 
-  QAction *paste_to_workspace_action
-    = edit_menu->addAction (tr ("Paste To Workspace..."));
-  paste_to_workspace_action->setEnabled (false); // TODO: Make this work.
-
-  edit_menu->addSeparator ();
-
   QAction *select_all_action
     = edit_menu->addAction (tr ("Select All"));
   select_all_action->setEnabled (false); // TODO: Make this work.
 
   QAction *delete_action
     = edit_menu->addAction (tr ("Delete"));
   delete_action->setShortcut (Qt::Key_Delete);
   delete_action->setEnabled (false); // TODO: Make this work.
 
   edit_menu->addSeparator ();
 
-  QAction *find_action
-    = edit_menu->addAction (tr ("Find..."));
-  find_action->setEnabled (false); // TODO: Make this work.
-
   QAction *find_files_action
     = edit_menu->addAction (tr ("Find Files..."));
   find_files_action->setShortcut (ctrl_shift + Qt::Key_F);
 
   edit_menu->addSeparator ();
 
   QAction *clear_command_window_action
     = edit_menu->addAction (tr ("Clear Command Window"));
@@ -1058,27 +1037,16 @@ main_window::construct_debug_menu (QMenu
 
   connect (_debug_continue, SIGNAL (triggered ()),
            this, SLOT (debug_continue ()));
 
   connect (_debug_quit, SIGNAL (triggered ()),
            this, SLOT (debug_quit ()));
 }
 
-void
-main_window::construct_desktop_menu (QMenuBar *p)
-{
-  QMenu *desktop_menu = p->addMenu (tr ("&Desktop"));
-
-  QAction *load_workspace_action = desktop_menu->addAction (tr ("Load workspace"));
-
-  connect (load_workspace_action, SIGNAL (triggered ()),
-           this, SLOT (handle_load_workspace_request ()));
-}
-
 QAction *
 main_window::construct_window_menu_item (QMenu *p, const QString& item,
                                          bool checkable,
                                          const QKeySequence& key)
 {
   QAction *action = p->addAction (item);
 
   action->setCheckable (checkable);
@@ -1364,16 +1332,23 @@ main_window::resize_command_window_callb
 
 void
 main_window::clear_history_callback (void)
 {
   Fhistory (ovl ("-c"));
 }
 
 void
+main_window::new_figure_callback (void)
+{
+  Fbuiltin (ovl ("figure"));
+  Fdrawnow ();
+}
+
+void
 main_window::change_directory_callback (const std::string& directory)
 {
   Fcd (ovl (directory));
 }
 
 void
 main_window::debug_continue_callback (void)
 {
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -106,16 +106,20 @@ public slots:
   void change_directory (const QString& dir);
   void browse_for_directory (void);
   void set_current_working_directory (const QString& dir);
   void change_directory_up (void);
   void accept_directory_line_edit (void);
 
   void handle_command_double_clicked (const QString& command);
 
+  void handle_new_figure_request (void);
+
+  void handle_new_variable_request (void);
+
   void handle_enter_debugger (void);
   void handle_exit_debugger (void);
   void debug_continue (void);
   void debug_step_into (void);
   void debug_step_over (void);
   void debug_step_out (void);
   void debug_quit (void);
 
@@ -159,17 +163,16 @@ private:
   void construct_new_menu (QMenu *p);
   void construct_edit_menu (QMenuBar *p);
   void construct_debug_menu_item (QMenu *p, const QString& item,
                                   const QKeySequence& key);
   QAction *construct_debug_menu_item (const char *icon_file,
                                       const QString& item,
                                       const QKeySequence& key);
   void construct_debug_menu (QMenuBar *p);
-  void construct_desktop_menu (QMenuBar *p);
   QAction *construct_window_menu_item (QMenu *p, const QString& item,
                                        bool checkable,
                                        const QKeySequence& key);
   void construct_window_menu (QMenuBar *p);
   void construct_help_menu (QMenuBar *p);
   void construct_documentation_menu (QMenu *p);
 
   void construct_tool_bar (void);
@@ -187,16 +190,18 @@ private:
   void clear_command_window_callback (void);
 
   void resize_command_window_callback (void);
 
   void clear_workspace_callback (void);
 
   void clear_history_callback (void);
 
+  void new_figure_callback (void);
+
   void change_directory_callback (const std::string& directory);
 
   void debug_continue_callback (void);
 
   void debug_step_into_callback (void);
 
   void debug_step_over_callback (void);
 
