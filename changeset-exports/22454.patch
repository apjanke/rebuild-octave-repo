# HG changeset patch
# User Rik <rik@octave.org>
# Date 1473385843 25200
#      Thu Sep 08 18:50:43 2016 -0700
# Node ID 8445f67a8123b84eaf6ea98e1076f8fac1d7c8ca
# Parent  ca01dc025e2c80a8f470be79b143f9ac281bd5e0
Add function mexEvalStringWithTrap to MEX API.

* NEWS: Announce function.

* mex.cc (mexEvalStringWithTrap): New function.
* mex.cc (mexCallMATLABWithTrap): Move declaration of field_names
close to usage.  Move execution_error declaration to be near
parse_status.

* mexproto.h (mexEvalStringWithTrap): Prototype for new function.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -137,16 +137,18 @@ Summary of important user-visible change
     cause Octave to abort execution of a MEX file and return to the
     prompt if an error is encountered in mexCallMATLAB.
 
  ** The MEX API now includes the function mexCallMATLABWithTrap.  This
     function will not abort if an error occurs during mexCallMATLAB, but
     instead will return execution to the MEX function for error
     handling.
 
+ ** Other new MEX API functions include mexEvalStringWithTrap.
+
  ** Other new functions added in 4.2:
 
       audioformats
       camlight
       condeig
       deg2rad
       dialog
       evalc
diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -3112,23 +3112,23 @@ mexCallMATLAB (int nargout, mxArray *arg
   return execution_error ? 1 : 0;
 }
 
 mxArray *
 mexCallMATLABWithTrap (int nargout, mxArray *argout[], int nargin,
                        mxArray *argin[], const char *fname)
 {
   mxArray *mx = NULL;
-  const char *fields[] = {"identifier", "message", "case", "stack"};
 
   int old_flag = mex_context ? mex_context->trap_feval_error : 0;
   mexSetTrapFlag (1);
   if (mexCallMATLAB (nargout, argout, nargin, argin, fname))
     {
-      mx = mxCreateStructMatrix (1, 1, 4, fields);
+      const char *field_names[] = {"identifier", "message", "case", "stack"};
+      mx = mxCreateStructMatrix (1, 1, 4, field_names);
       mxSetFieldByNumber (mx, 0, 0, mxCreateString ("Octave:MEX"));
       std::string msg = "mexCallMATLABWithTrap: function call <"
                         + std::string (fname) + "> failed";
       mxSetFieldByNumber (mx, 0, 1, mxCreateString (msg.c_str ()));
       mxSetFieldByNumber (mx, 0, 2, mxCreateCellMatrix (0, 0));
       mxSetFieldByNumber (mx, 0, 3, mxCreateStructMatrix (0, 1, 0, NULL));
     }
   mexSetTrapFlag (old_flag);
@@ -3144,21 +3144,20 @@ mexSetTrapFlag (int flag)
 }
 
 int
 mexEvalString (const char *s)
 {
   int retval = 0;
 
   int parse_status;
+  bool execution_error = false;
 
   octave_value_list ret;
 
-  bool execution_error = false;
-
   try
     {
       ret = eval_string (s, false, parse_status, 0);
     }
   catch (const octave::execution_exception&)
     {
       recover_from_exception ();
 
@@ -3166,16 +3165,52 @@ mexEvalString (const char *s)
     }
 
   if (parse_status || execution_error)
     retval = 1;
 
   return retval;
 }
 
+mxArray *
+mexEvalStringWithTrap (const char *s)
+{
+  mxArray *mx = NULL;
+
+  int parse_status;
+  bool execution_error = false;
+
+  octave_value_list ret;
+
+  try
+    {
+      ret = eval_string (s, false, parse_status, 0);
+    }
+  catch (const octave::execution_exception&)
+    {
+      recover_from_exception ();
+
+      execution_error = true;
+    }
+
+  if (parse_status || execution_error)
+    {
+      const char *field_names[] = {"identifier", "message", "case", "stack"};
+      mx = mxCreateStructMatrix (1, 1, 4, field_names);
+      mxSetFieldByNumber (mx, 0, 0, mxCreateString ("Octave:MEX"));
+      std::string msg = "mexEvalStringWithTrap: eval of <"
+                        + std::string (s) + "> failed";
+      mxSetFieldByNumber (mx, 0, 1, mxCreateString (msg.c_str ()));
+      mxSetFieldByNumber (mx, 0, 2, mxCreateCellMatrix (0, 0));
+      mxSetFieldByNumber (mx, 0, 3, mxCreateStructMatrix (0, 1, 0, NULL));
+    }
+
+  return mx;
+}
+
 void
 mexErrMsgTxt (const char *s)
 {
   if (s && strlen (s) > 0)
     error ("%s: %s", mexFunctionName (), s);
   else
     {
       // For compatibility with Matlab, print an empty message.
diff --git a/libinterp/corefcn/mexproto.h b/libinterp/corefcn/mexproto.h
--- a/libinterp/corefcn/mexproto.h
+++ b/libinterp/corefcn/mexproto.h
@@ -83,16 +83,17 @@ extern OCTINTERP_API int mexCallMATLAB (
 extern OCTINTERP_API mxArray * mexCallMATLABWithTrap (int nargout,
                                                       mxArray *argout[],
                                                       int nargin,
                                                       mxArray *argin[],
                                                       const char *fname);
 
 extern OCTINTERP_API void mexSetTrapFlag (int flag);
 extern OCTINTERP_API int mexEvalString (const char *s);
+extern OCTINTERP_API mxArray * mexEvalStringWithTrap (const char *s);
 extern OCTINTERP_API void mexErrMsgTxt (const char *s);
 extern OCTINTERP_API void mexErrMsgIdAndTxt (const char *id, const char *s,
                                              ...);
 extern OCTINTERP_API void mexWarnMsgTxt (const char *s);
 extern OCTINTERP_API void mexWarnMsgIdAndTxt (const char *id, const char *s,
                                               ...);
 extern OCTINTERP_API int mexPrintf (const char *fmt, ...);
 
