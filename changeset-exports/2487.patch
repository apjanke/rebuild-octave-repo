# HG changeset patch
# User jwe
# Date 847468733 0
#      Fri Nov 08 15:58:53 1996 +0000
# Node ID 8c6e9535cbdae3d6c83a1b30deb55246e9722528
# Parent  830038ee04aa6355bd9bb0e1bc1fe50b210600e3
[project @ 1996-11-08 15:58:52 by jwe]

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,13 @@
+Fri Nov  8 09:55:40 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Makefile.in (install): Use $(INSTALL_PROGRAM) for installing
+	shared library.
+
 Thu Nov  7 12:43:17 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in: Add -lm when building shared library.
 
 	* Version 1.91.
 
 Mon Nov  4 10:09:00 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/libcruft/Makefile.in b/libcruft/Makefile.in
--- a/libcruft/Makefile.in
+++ b/libcruft/Makefile.in
@@ -82,17 +82,17 @@ install uninstall clean mostlyclean dist
 
 install::
 	$(top_srcdir)/mkinstalldirs $(libdir)
 	rm -f $(libdir)/libcruft.a
 	$(INSTALL_DATA) libcruft.a $(libdir)/libcruft.a
 	$(RANLIB) $(libdir)/libcruft.a
 	if $(SHARED_LIBS); then \
 	  rm -f $(libdir)/libcruft.$(SHLEXT); \
-	  $(INSTALL_DATA) libcruft.$(SHLEXT) $(libdir)/libcruft.$(SHLEXT); \
+	  $(INSTALL_PROGRAM) libcruft.$(SHLEXT) $(libdir)/libcruft.$(SHLEXT); \
 	fi
 
 uninstall::
 	rm -f $(libdir)/libcruft.a
 
 tags TAGS:: $(SOURCES)
 	$(SUBDIR_FOR_COMMAND)
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,17 @@
+Fri Nov  8 09:54:59 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Makefile.in (install-oct): Use $(INSTALL_PROGRAM) for .oct files.
+
 Thu Nov  7 07:59:07 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* variables.cc (gobble_leading_white_space): New arg, update_pos.
+	* (is_function_file): Don't update file position information here.
+
 	* Version 1.91.
 
 	* pt-fvc.cc (tree_indirect_ref::reference): If the lhs object is
 	not a map, convert it to one.
 
 	* ov-typeinfo.h (init_tab_sz): New static member.
 
 	* ov-struct.cc, ov-struct.h: Add hooks for custom memory management.
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -269,17 +269,17 @@ install-bin:
 	$(LN_S) $(bindir)/octave-$(version) $(bindir)/octave
 .PHONY: install-bin
 
 install-oct:
 	if [ -n "$(OCT_FILES)" ]; then \
 	  $(top_srcdir)/mkinstalldirs $(octfiledir) ; \
 	  chmod a+rx mk-oct-links ; \
 	  for f in $(OCT_FILES); do \
-	    $(INSTALL_DATA) $$f $(octfiledir)/$$f; \
+	    $(INSTALL_PROGRAM) $$f $(octfiledir)/$$f; \
 	  done ; \
 	  ./mk-oct-links $(octfiledir) $(addprefix $(srcdir)/, $(DLD_SRC)) ; \
 	fi
 .PHONY: install-oct
 
 install-lib:
 	$(top_srcdir)/mkinstalldirs $(libdir)
 	for f in $(LIBS_TO_INSTALL); do \
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -447,35 +447,37 @@ looks_like_octave_copyright (const strin
 	}
     }
   return 0;
 }
 
 // Eat whitespace and comments from FFILE, returning the text of the
 // comments read if it doesn't look like a copyright notice.  If
 // IN_PARTS, consider each block of comments separately; otherwise,
-// grab them all at once.
+// grab them all at once.  If UPDATE_POS is TRUE, line and column
+// number information is updated.
 
 // XXX FIXME XXX -- grab_help_text() in lex.l duplicates some of this
 // code!
 
 static string
-gobble_leading_white_space (FILE *ffile, bool in_parts)
+gobble_leading_white_space (FILE *ffile, bool in_parts, bool update_pos)
 {
   string help_txt;
 
   bool first_comments_seen = false;
   bool begin_comment = false;
   bool have_help_text = false;
   bool in_comment = false;
   int c;
 
   while ((c = getc (ffile)) != EOF)
     {
-      current_input_column++;
+      if (update_pos)
+	current_input_column++;
 
       if (begin_comment)
 	{
 	  if (c == '%' || c == '#')
 	    continue;
 	  else
 	    begin_comment = false;
 	}
@@ -485,25 +487,29 @@ gobble_leading_white_space (FILE *ffile,
 	  if (! have_help_text)
 	    {
 	      first_comments_seen = true;
 	      help_txt += (char) c;
 	    }
 
 	  if (c == '\n')
 	    {
-	      input_line_number++;
-	      current_input_column = 0;
+	      if (update_pos)
+		{
+		  input_line_number++;
+		  current_input_column = 0;
+		}
 	      in_comment = false;
 
 	      if (in_parts)
 		{
 		  if ((c = getc (ffile)) != EOF)
 		    {
-		      current_input_column--;
+		      if (update_pos)
+			current_input_column--;
 		      ungetc (c, ffile);
 		      if (c == '\n')
 			break;
 		    }
 		  else
 		    break;
 		}
 	    }
@@ -516,56 +522,60 @@ gobble_leading_white_space (FILE *ffile,
 	    case '\t':
 	      if (first_comments_seen)
 		have_help_text = true;
 	      break;
 
 	    case '\n':
 	      if (first_comments_seen)
 		have_help_text = true;
-	      input_line_number++;
-	      current_input_column = 0;
+	      if (update_pos)
+		{
+		  input_line_number++;
+		  current_input_column = 0;
+		}
 	      continue;
 
 	    case '%':
 	    case '#':
 	      begin_comment = true;
 	      in_comment = true;
 	      break;
 
 	    default:
-	      current_input_column--;
+	      if (update_pos)
+		current_input_column--;
 	      ungetc (c, ffile);
 	      goto done;
 	    }
 	}
     }
 
  done:
 
   if (! help_txt.empty ())
     {
       if (looks_like_octave_copyright (help_txt)) 
 	help_txt.resize (0);
 
       if (in_parts && help_txt.empty ())
-	help_txt = gobble_leading_white_space (ffile, in_parts);
+	help_txt = gobble_leading_white_space (ffile, in_parts, update_pos);
     }
 
   return help_txt;
 }
 
 static int
 is_function_file (FILE *ffile)
 {
   int status = 0;
 
   long pos = ftell (ffile);
 
-  gobble_leading_white_space (ffile, false);
+  gobble_leading_white_space (ffile, false, false);
 
   char buf [10];
   fgets (buf, 10, ffile);
   int len = strlen (buf);
   if (len > 8 && strncmp (buf, "function", 8) == 0
       && ! (isalnum (buf[8]) || buf[8] == '_'))
     status = 1;
 
@@ -637,20 +647,20 @@ parse_fcn_file (int exec_script, const s
 	  add_unwind_protect (delete_input_buffer, (void *) new_buf);
 
 	  switch_to_buffer (new_buf);
 
 	  unwind_protect_ptr (curr_sym_tab);
 
 	  reset_parser ();
 
-	  help_buf = gobble_leading_white_space (ffile, true);
+	  help_buf = gobble_leading_white_space (ffile, true, true);
 
 	  // XXX FIXME XXX -- this should not be necessary.
-	  gobble_leading_white_space (ffile, false);
+	  gobble_leading_white_space (ffile, false, true);
 
 	  int status = yyparse ();
 
 	  if (status != 0)
 	    {
 	      error ("parse error while reading function file %s",
 		     ff.c_str ());
 	      global_sym_tab->clear (curr_fcn_file_name);
@@ -772,17 +782,17 @@ get_help_from_file (const string& path)
   string retval;
 
   if (! path.empty ())
     {
       FILE *fptr = fopen (path.c_str (), "r");
 
       if (fptr)
 	{
-	  retval = gobble_leading_white_space (fptr, true);
+	  retval = gobble_leading_white_space (fptr, true, true);
 	  fclose (fptr);
 	}
     }
 
   return retval;
 }
 
 // Variable values.
