# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1511454422 0
#      Thu Nov 23 16:27:02 2017 +0000
# Node ID 48e7efceb427d60219425caa93321ae045b535d6
# Parent  8a89878ac8bc1de2abdfe3d31d170cfda13f06b9
libinterp/corefcn/data.cc: template eps() to reduce code duplication

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -4446,16 +4446,41 @@ either @qcode{"double"} or @qcode{"singl
   double e_val = M_E;
 #else
   double e_val = exp (1.0);
 #endif
 
   return fill_matrix (args, e_val, "e");
 }
 
+template <typename T>
+T
+eps (const T& x)
+{
+  T epsval = x.abs ();
+  typedef typename T::value_type P;
+  for (octave_idx_type i = 0; i < x.numel (); i++)
+    {
+      P val = epsval.xelem (i);
+      if (octave::math::isnan (val) || octave::math::isinf (val))
+        epsval(i) = octave::numeric_limits<P>::NaN ();
+      else if (val < std::numeric_limits<P>::min ())
+        epsval(i) = std::numeric_limits<P>::denorm_min ();
+      else
+        {
+          int exponent;
+          octave::math::frexp (val, &exponent);
+          const P digits = std::numeric_limits<P>::digits;
+          epsval(i) = std::pow (static_cast<P> (2.0),
+                                static_cast<P> (exponent - digits));
+        }
+    }
+  return epsval;
+}
+
 DEFUN (eps, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} eps
 @deftypefnx {} {} eps (@var{x})
 @deftypefnx {} {} eps (@var{n}, @var{m})
 @deftypefnx {} {} eps (@var{n}, @var{m}, @var{k}, @dots{})
 @deftypefnx {} {} eps (@dots{}, @var{class})
 Return a scalar, matrix or N-dimensional array whose elements are all eps,
@@ -4485,64 +4510,25 @@ matrix dimensions.  The optional argumen
 type and may be either @qcode{"double"} or @qcode{"single"}.
 @seealso{realmax, realmin, intmax, flintmax}
 @end deftypefn */)
 {
   octave_value retval;
 
   if (args.length () == 1 && ! args(0).is_string ())
     {
-      octave_value arg0 = args(0).abs ();
-
+      octave_value arg0 = args(0);
       if (arg0.is_single_type ())
         {
-          Array<float> x = arg0.float_array_value ();
-
-          Array<float> epsval (x.dims ());
-
-          for (octave_idx_type i = 0; i < x.numel (); i++)
-            {
-              float val = x.xelem (i);
-              if (octave::math::isnan (val) || octave::math::isinf (val))
-                epsval(i) = lo_ieee_nan_value ();
-              else if (val < std::numeric_limits<float>::min ())
-                epsval(i) = powf (2.0, -149e0);
-              else
-                {
-                  int exponent;
-                  octave::math::frexp (val, &exponent);
-                  epsval(i) = std::pow (2.0f,
-                                        static_cast<float> (exponent - 24));
-                }
-            }
-
+          FloatNDArray epsval = eps (arg0.float_array_value ());
           retval = epsval;
         }
       else
         {
-          Array<double> x = arg0.array_value ();
-
-          Array<double> epsval (x.dims ());
-
-          for (octave_idx_type i = 0; i < x.numel (); i++)
-            {
-              double val = x.xelem (i);
-              if (octave::math::isnan (val) || octave::math::isinf (val))
-                epsval(i) = lo_ieee_nan_value ();
-              else if (val < std::numeric_limits<double>::min ())
-                epsval(i) = std::pow (2.0, -1074e0);
-              else
-                {
-                  int exponent;
-                  octave::math::frexp (val, &exponent);
-                  epsval(i) = std::pow (2.0,
-                                        static_cast<double> (exponent - 53));
-                }
-            }
-
+          NDArray epsval = eps (arg0.array_value ());
           retval = epsval;
         }
     }
   else
     retval = fill_matrix (args, std::numeric_limits<double>::epsilon (),
                           std::numeric_limits<float>::epsilon (), "eps");
 
   return retval;
