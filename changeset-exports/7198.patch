# HG changeset patch
# User jwe
# Date 1196132770 0
#      Tue Nov 27 03:06:10 2007 +0000
# Node ID 4555c116b42084e4c2436dd2778a41d0da07f930
# Parent  e1c865f21751c617ecfce771d5dffcdf021a3a53
[project @ 2007-11-27 03:06:10 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2007-11-26  John W. Eaton  <jwe@octave.org>
+
+	* idx-vector.h (idx_vector::idx_vector_rep (const intNDArray<U>&)):
+	Eliminate unnecessary second arg from call to tree_to_mat_idx.
+
+	* oct-inttypes.h (operator bool, operator char): Delete.
+	(bool_value, char_value, double_value, float_value): New functions.
+
 2007-11-26  David Bateman  <dbateman@free.fr>
 
 	* intNDArray.cc (template <class T> intNDArray<T>
 	intNDArray<T>::max (int) const, template <class T> intNDArray<T>
 	intNDArray<T>::max (ArrayN<octave_idx_type>&, int) const,
 	template <class T> intNDArray<T> intNDArray<T>::min (int) const, 
 	template <class T> intNDArray<T> intNDArray<T>::min 
 	(ArrayN<octave_idx_type>&, int) const): New methods for integer
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -69,23 +69,18 @@ private:
 	{
 	  initialized = 1;
 	  return;
 	}
       else
 	{
 	  data = new octave_idx_type [len];
 
-	  bool conversion_error = false;
-
 	  for (octave_idx_type i = 0; i < len; i++)
-	    data[i] = tree_to_mat_idx (inda.elem (i), conversion_error);
-
-	  if (conversion_error)
-	    return;
+	    data[i] = tree_to_mat_idx (inda.elem (i));
 	}
 
       init_state ();
     }
 
     idx_vector_rep (const Range& r);
 
     idx_vector_rep (double d);
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -245,25 +245,31 @@ public:
     // symmetric, which causes things like -intmin("int32") to be the
     // same as intmin("int32") instead of intmax("int32") (which is
     // what we should get with saturation semantics).
 
     return std::numeric_limits<T>::is_signed ?
       OCTAVE_INT_FIT_TO_RANGE (- static_cast<double> (ival), T) : 0;
   }
 
+  bool bool_value (void) const { return static_cast<bool> (value ()); }
+
+  char char_value (void) const { return static_cast<char> (value ()); }
+
+  double double_value (void) const { return static_cast<double> (value ()); }
+
+  float float_value (void) const { return static_cast<float> (value ()); }
+
   operator T (void) const { return value (); }
 
-  operator bool (void) const { return static_cast<bool> (value ()); }
-
-  operator char (void) const { return static_cast<char> (value ()); }
+  // char and bool operators intentionally omitted.
 
-  operator double (void) const { return static_cast<double> (value ()); }
+  operator double (void) const { return double_value (); }
 
-  operator float (void) const { return static_cast<float> (value ()); }
+  operator float (void) const { return float_value (); }
 
   octave_int<T>& operator += (const octave_int<T>& x)
   {
     double t = static_cast<double> (value ());
     double tx = static_cast<double> (x.value ());
     ival = OCTAVE_INT_FIT_TO_RANGE (t + tx, T);
     return *this;
   }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,46 @@
+2007-11-26  John W. Eaton  <jwe@octave.org>
+
+	* oct-stream.cc (do_write): Call float_value and double_value on
+	octave_int<T> objects instead of relying on conversion operators.
+
+	* ls-mat5.cc (read_mat5_binary_element, OCTAVE_MAT5_INTEGER_READ): 
+	Call double_value on octave_int<T> objects
+	instead of relying on conversion operator.
+	(read_mat5_binary_file_header): 
+	Call char_value on octave_int<T> objects
+	instead of relying on conversion operator.
+	(read_mat5_binary_element): 
+	Call bool_value on octave_int<T> objects
+	instead of relying on conversion operator.
+
+	* ov-intx.h (OCTAVE_VALUE_INT_MATRIX_T::double_value, 
+	OCTAVE_VALUE_INT_MATRIX_T::scalar_value,
+	OCTAVE_VALUE_INT_MATRIX_T::matrix_value,
+	OCTAVE_VALUE_INT_MATRIX_T::complex_matrix_value,
+	OCTAVE_VALUE_INT_MATRIX_T::array_value,
+	OCTAVE_VALUE_INT_MATRIX_T::complex_array_value,
+	OCTAVE_VALUE_INT_SCALAR_T::double_value, 
+	OCTAVE_VALUE_INT_SCALAR_T::scalar_value,
+	OCTAVE_VALUE_INT_SCALAR_T::matrix_value,
+	OCTAVE_VALUE_INT_SCALAR_T::complex_matrix_value,
+	OCTAVE_VALUE_INT_SCALAR_T::array_value,
+	OCTAVE_VALUE_INT_SCALAR_T::complex_array_value,
+	Call double_value on octave_int<T> objects
+	instead of relying on conversion operator.
+	(OCTAVE_VALUE_INT_MATRIX_T::bool_array_value,
+	OCTAVE_VALUE_INT_SCALAR_T::bool_array_value):
+	Call bool_value on octave_int<T> objects
+	instead of relying on conversion operator.
+	(OCTAVE_VALUE_INT_MATRIX_T::char_array_value,
+	OCTAVE_VALUE_INT_SCALAR_T::char_array_value):
+	Call char_value on octave_int<T> objects
+	instead of relying on conversion operator.
+
 2007-11-26  David Bateman  <dbateman@free.fr>
 
 	* Sparse-op-defs.h (SPARSE_BASE_REDUCTION_OP): Check that the fill
 	value is not zero before creating the matrices.
 
 	* graphics.cc (class axes): Add the {x|y|z}color color property.
 	* graphics.h.in (class axes): ditto.
 
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -329,17 +329,17 @@ template void read_mat5_integer_data (st
 		error ("load: reading imaginary matrix data for `%s'", \
 		       retval.c_str ()); \
 		goto data_read_error; \
 	      } \
   \
 	    ComplexNDArray ctmp (dims); \
   \
 	    for (int i = 0; i < n; i++) \
-	      ctmp(i) = Complex (double (re(i)), im(i)); \
+	      ctmp(i) = Complex (re(i).double_value (), im(i)); \
   \
             tc = ctmp;  \
 	  } \
 	else \
 	  tc = re; \
   }
   
 // Read one element tag from stream IS, 
@@ -858,17 +858,17 @@ read_mat5_binary_element (std::istream& 
 	  {
 	    warning ("load: can't load nested function");
 	    goto skip_ahead;
 	  }
 	else if (ftype == "anonymous")
 	  {
 	    Octave_map m2 = m1.contents("workspace")(0).map_value();
 	    uint32NDArray MCOS = m2.contents("MCOS")(0).uint32_array_value();
-	    octave_idx_type off = static_cast<octave_idx_type>(double (MCOS (4)));
+	    octave_idx_type off = static_cast<octave_idx_type>(MCOS(4).double_value ());
 	    m2 = subsys_ov.map_value();
 	    m2 = m2.contents("MCOS")(0).map_value();
 	    tc2 = m2.contents("MCOS")(0).cell_value()(1 + off).cell_value()(1);
 	    m2 = tc2.map_value();
 	    symbol_table *local_sym_tab = 0;
 	    if (m2.nfields() > 0)
 	      {
 		octave_value tmp;
@@ -1135,17 +1135,17 @@ read_mat5_binary_element (std::istream& 
 
 	if (logicalvar)
 	  {
 	    uint8NDArray in = tc.uint8_array_value ();
 	    int nel = in.nelem ();
 	    boolNDArray out (dims);
 	    
 	    for (int i = 0; i < nel; i++)
-	      out (i) = static_cast<bool> (double (in (i)));
+	      out (i) = in(i).bool_value ();
 
 	    tc = out;
 	  }
       }
       break;
 
     case MAT_FILE_INT16_CLASS:
       OCTAVE_MAT5_INTEGER_READ (int16NDArray);
@@ -1372,17 +1372,17 @@ read_mat5_binary_file_header (std::istre
 	  octave_idx_type ilen = itmp.nelem ();
 
 	  // Why should I have to initialize outbuf as just overwrite
 	  std::string outbuf (ilen - 7, ' ');
 
 	  // FIXME -- find a way to avoid casting away const here
 	  char *ctmp = const_cast<char *> (outbuf.c_str ());
 	  for (octave_idx_type j = 8; j < ilen; j++)
-	    ctmp [j - 8] = itmp (j);
+	    ctmp[j-8] = itmp(j).char_value ();
 
 	  std::istringstream fh_ws (outbuf);
 
 	  read_mat5_binary_element (fh_ws, filename, swap, global, subsys_ov);
 
 	  if (error_state)
 	    return -1;
 	}
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -94,17 +94,17 @@ public:
     {
       double retval = lo_ieee_nan_value ();
 
       if (numel () > 0)
 	{
 	  gripe_implicit_conversion ("Octave:array-as-scalar",
 				     type_name (), "real scalar");
 
-	  retval = double (matrix(0));
+	  retval = matrix(0).double_value ();
 	}
       else
 	gripe_invalid_conversion (type_name (), "real scalar");
 
       return retval;
       
     }
 
@@ -118,17 +118,17 @@ public:
       if (dv.length () > 2)
 	error ("invalid conversion of %s to Matrix", type_name().c_str ());
       else
 	{
 	  retval = Matrix (dv(0), dv(1));
 	  double *vec = retval.fortran_vec ();
 	  octave_idx_type nel = matrix.numel ();
 	  for (octave_idx_type i = 0; i < nel; i++)
-	    vec[i] = double (matrix(i));
+	    vec[i] = matrix(i).double_value ();
 	}
       return retval;
     }
 
   ComplexMatrix
   complex_matrix_value (bool = false) const
     {
       ComplexMatrix retval;
@@ -136,70 +136,70 @@ public:
       if (dv.length () > 2)
 	error ("invalid conversion of %s to Matrix", type_name().c_str ());
       else
 	{
 	  retval = ComplexMatrix (dv(0), dv(1));
 	  Complex *vec = retval.fortran_vec ();
 	  octave_idx_type nel = matrix.numel ();
 	  for (octave_idx_type i = 0; i < nel; i++)
-	    vec[i] = Complex (double (matrix(i)));
+	    vec[i] = Complex (matrix(i).double_value ());
 	}
       return retval;
     }
 
   NDArray
   array_value (bool = false) const
     { 
       NDArray retval (matrix.dims ()); 
       double *vec = retval.fortran_vec ();
       octave_idx_type nel = matrix.numel ();
       for (octave_idx_type i = 0; i < nel; i++)
-        vec[i] = double (matrix(i));
+        vec[i] = matrix(i).double_value ();
       return retval;
     }
 
   ComplexNDArray
   complex_array_value (bool = false) const
     { 
       ComplexNDArray retval (matrix.dims ()); 
       Complex *vec = retval.fortran_vec ();
       octave_idx_type nel = matrix.numel ();
       for (octave_idx_type i = 0; i < nel; i++)
-        vec[i] = Complex (double (matrix(i)));
+        vec[i] = Complex (matrix(i).double_value ());
       return retval;
     }
 
   boolNDArray
   bool_array_value (bool warn = false) const
   {
     boolNDArray retval (dims ());
 
     octave_idx_type nel = numel ();
 
     if (warn && matrix.any_element_not_one_or_zero ())
       gripe_logical_conversion ();
 
     bool *vec = retval.fortran_vec ();
     for (octave_idx_type i = 0; i < nel; i++)
-      vec[i] = static_cast<bool> (matrix(i));
+      vec[i] = matrix(i).bool_value ();
 
     return retval;
   }
 
   charNDArray
   char_array_value (bool = false) const
   {
     charNDArray retval (dims ());
 
     octave_idx_type nel = numel ();
   
     char *vec = retval.fortran_vec ();
     for (octave_idx_type i = 0; i < nel; i++)
-      vec[i] = static_cast<char> (matrix(i));
+      vec[i] = matrix(i).char_value ();
 
     return retval;
   }
 
   void increment (void) { matrix += 1; }
 
   void decrement (void) { matrix -= 1; }
 
@@ -356,72 +356,72 @@ public:
 	{
 	  OCTAVE_INT_NDARRAY_T retval (dv);
 	  if (dv.numel())
 	    retval(0) = scalar;
 	  return retval;
 	}
     }
 
-  double double_value (bool = false) const { return double (scalar); }
+  double double_value (bool = false) const { return scalar.double_value (); }
 
-  double scalar_value (bool = false) const { return double (scalar); }
+  double scalar_value (bool = false) const { return scalar.double_value (); }
 
 
   Matrix
   matrix_value (bool = false) const
     {
       Matrix retval (1, 1);
-      retval(0,0) = double (scalar);
+      retval(0,0) = scalar.double_value ();
       return retval;
     }
 
   ComplexMatrix
   complex_matrix_value (bool = false) const
     {
       ComplexMatrix retval (1, 1);
-      retval(0,0) = Complex (double (scalar));
+      retval(0,0) = Complex (scalar.double_value ());
       return retval;
     }
 
 
   NDArray
   array_value (bool = false) const
     { 
       NDArray retval (dim_vector (1, 1)); 
-      retval(0) = double (scalar);
+      retval(0) = scalar.double_value ();
       return retval;
     }
 
   ComplexNDArray
   complex_array_value (bool = false) const
     { 
       ComplexNDArray retval (dim_vector (1, 1));
-      retval(0) = Complex (double (scalar));
+      retval(0) = Complex (scalar.double_value ());
       return retval;
     }
 
   boolNDArray
   bool_array_value (bool warn = false) const
   {
     boolNDArray retval (dim_vector (1, 1));
 
     if (warn && scalar != 0.0 && scalar != 1.0)
       gripe_logical_conversion ();
 
-    retval(0) = static_cast<bool> (scalar);
+    retval(0) = scalar.bool_value ();
 
     return retval;
   }
 
   charNDArray
   char_array_value (bool = false) const
   {
     charNDArray retval (dim_vector (1, 1));
-    retval(0) = static_cast<char> (scalar);
+    retval(0) = scalar.char_value ();
     return retval;
   }
 
   void increment (void) { scalar += 1; }
 
   void decrement (void) { scalar -= 1; }
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
