# HG changeset patch
# User Rik <rik@octave.org>
# Date 1480364427 28800
#      Mon Nov 28 12:20:27 2016 -0800
# Node ID b125351d4243208970deb2ce17caaa8de941a9a8
# Parent  296d9b0eec8d972dbb02dcb83c03a6dd01a2910a
Return null "" status when querying a bad FID with fopen (bug #49695).

* file-io.cc (Ffopen): Add BIST tests.

* oct-stream.cc (octave_stream_list::do_get_info): Perform the lookup of the
fid directly in the do_get_info function, rather than in the function
do_lookup, which is hardcoded to throw an error.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -652,16 +652,30 @@ When opening a new file that does not ye
       int error_number = 0;
 
       retval = ovl (-1.0, os.error (false, error_number));
     }
 
   return retval;
 }
 
+/*
+## FIXME: Only have tests for query mode.  Need others for regular fopen call.
+%!test   # Uses hardcoded value of 1 for stdout
+%! [name, mode, arch] = fopen (1);
+%! assert (name, "stdout");
+%! assert (mode, "w");
+
+%!test   # Query of non-existent stream returns all ""
+%! [name, mode, arch] = fopen (-1);
+%! assert (name, "");
+%! assert (mode, "");
+%! assert (arch, "");
+*/
+
 DEFUN (freport, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} freport ()
 Print a list of which files have been opened, and whether they are open
 for reading, writing, or both.
 
 For example:
 
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -7472,22 +7472,37 @@ octave_stream_list::do_clear (bool flush
     }
 
   lookup_cache = list.end ();
 }
 
 string_vector
 octave_stream_list::do_get_info (int fid) const
 {
-  octave_stream os = do_lookup (fid);
+  string_vector retval (3);
+
+  if (fid < 0)
+    return retval;
+
+  octave_stream os;
+  if (lookup_cache != list.end () && lookup_cache->first == fid)
+    os = lookup_cache->second;
+  else
+    {
+      ostrl_map::const_iterator iter = list.find (fid);
+
+      if (iter == list.end ())
+        return retval;
+
+      os = iter->second;
+      lookup_cache = iter;
+    }
 
   if (! os.is_valid ())
-    ::error ("invalid file id = %d", fid);
-
-  string_vector retval (3);
+    return retval;
 
   retval(0) = os.name ();
   retval(1) = octave_stream::mode_as_string (os.mode ());
   retval(2) = octave::mach_info::float_format_as_string (os.float_format ());
 
   return retval;
 }
 
