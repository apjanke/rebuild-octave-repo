# HG changeset patch
# User jwe
# Date 1095958873 0
#      Thu Sep 23 17:01:13 2004 +0000
# Node ID 1ec26bdb120ccd2736007e498a79ba87cb77e4bb
# Parent  4e4062bb980739d73debbefc08eeebd62c341c11
[project @ 2004-09-23 16:58:57 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2004-09-23  David Bateman  <dbateman@free.fr>
+
+	* oct-inttypes.h (OCTAVE_INT_DOUBLE_CMP_OP, OCTAVE_DOUBLE_INT_CMP_OP):
+	New macros.  Use them to define mixed intX-double and double-intX ops.
+
 2004-09-22  Federico Zenith  <zenith@chemeng.ntnu.no>
 
 	* DASPK-opts.in, DASRT-opts.in, ODESSA-opts.in:
 	Fix doc string layout to avoid overfull hbox in printed output.
 
 2004-09-21  John W. Eaton  <jwe@octave.org>
 
 	* mach-info.h (octave_mach_info::flt_fmt_native): Delete.
diff --git a/liboctave/oct-inttypes.h b/liboctave/oct-inttypes.h
--- a/liboctave/oct-inttypes.h
+++ b/liboctave/oct-inttypes.h
@@ -457,16 +457,48 @@ OCTAVE_INT_DOUBLE_BIN_OP(/)
     return OCTAVE_INT_FIT_TO_RANGE (r, T); \
   }
 
 OCTAVE_DOUBLE_INT_BIN_OP(+)
 OCTAVE_DOUBLE_INT_BIN_OP(-)
 OCTAVE_DOUBLE_INT_BIN_OP(*)
 OCTAVE_DOUBLE_INT_BIN_OP(/)
 
+#define OCTAVE_INT_DOUBLE_CMP_OP(OP) \
+  template <class T> \
+  bool \
+  operator OP (const octave_int<T>& x, const double& y) \
+  { \
+    double tx = static_cast<double> (x.value ()); \
+    return tx OP y.value (); \
+  }
+
+OCTAVE_INT_DOUBLE_CMP_OP (<)
+OCTAVE_INT_DOUBLE_CMP_OP (<=)
+OCTAVE_INT_DOUBLE_CMP_OP (>=)
+OCTAVE_INT_DOUBLE_CMP_OP (>)
+OCTAVE_INT_DOUBLE_CMP_OP (==)
+OCTAVE_INT_DOUBLE_CMP_OP (!=)
+
+#define OCTAVE_DOUBLE_INT_CMP_OP(OP) \
+  template <class T> \
+  bool \
+  operator OP (const double& x, const octave_int<T>& y) \
+  { \
+    double ty = static_cast<double> (y.value ()); \
+    return y.value () OP ty; \
+  }
+
+OCTAVE_DOUBLE_INT_CMP_OP (<)
+OCTAVE_DOUBLE_INT_CMP_OP (<=)
+OCTAVE_DOUBLE_INT_CMP_OP (>=)
+OCTAVE_DOUBLE_INT_CMP_OP (>)
+OCTAVE_DOUBLE_INT_CMP_OP (==)
+OCTAVE_DOUBLE_INT_CMP_OP (!=)
+
 #define OCTAVE_INT_BITCMP_OP(OP) \
  \
   template <class T> \
   octave_int<T> \
   operator OP (const octave_int<T>& x, const octave_int<T>& y) \
   { \
     return x.value () OP y.value (); \
   }
