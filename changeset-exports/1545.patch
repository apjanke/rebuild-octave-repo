# HG changeset patch
# User jwe
# Date 812960085 0
#      Fri Oct 06 06:14:45 1995 +0000
# Node ID 8bdfa6fe5d6978d09806a897260f8d24f695a2de
# Parent  f1931fc63ce914f3fb50dd7ebf46a844bc01c22c
[project @ 1995-10-06 06:13:28 by jwe]

diff --git a/liboctave/CmplxSVD.cc b/liboctave/CmplxSVD.cc
--- a/liboctave/CmplxSVD.cc
+++ b/liboctave/CmplxSVD.cc
@@ -95,45 +95,45 @@ ComplexSVD::init (const ComplexMatrix& a
     {
     case SVD::economy:
       jobu = jobv ="S";
       ncol_u = nrow_vt = nrow_s = ncol_s = min_mn;
       break;
 
     case SVD::sigma_only:
       jobu = jobv ="N";
-      ncol_u = nrow_vt = 0;
+      ncol_u = nrow_vt = 1;
       break;
 
     default:
       break;
     }
 
   type_computed = svd_type;
 
-  Complex *u = (ncol_u > 0 ? new Complex[m * ncol_u] : 0);
+  Complex *u = (*jobu == 'N' ? 0 : new Complex[m * ncol_u]);
   double *s_vec  = new double[min_mn];
-  Complex *vt = (nrow_vt > 0 ? new Complex[nrow_vt * n] : 0);
+  Complex *vt = (*jobv == 'N' ? 0 : new Complex[nrow_vt * n]);
 
   int lwork = 2*min_mn + max_mn;
   Complex *work = new Complex[lwork];
 
   int lrwork = 5*max_mn;
   double *rwork = new double[lrwork];
 
   F77_FCN (zgesvd, ZGESVD) (jobu, jobv, m, n, tmp_data, m, s_vec, u,
 			    m, vt, nrow_vt, work, lwork, rwork, info,
 			    1L, 1L);
 
-  if (ncol_u > 0)
+  if (*jobu != 'N')
     left_sm = ComplexMatrix (u, m, ncol_u);
 
   sigma = DiagMatrix (s_vec, nrow_s, ncol_s);
 
-  if (nrow_vt > 0)
+  if (*jobv != 'N')
     {
       ComplexMatrix vt_m (vt, nrow_vt, n);
       right_sm = vt_m.hermitian ();
     }
 
   delete [] tmp_data;
   delete [] work;
 
diff --git a/liboctave/dbleSVD.cc b/liboctave/dbleSVD.cc
--- a/liboctave/dbleSVD.cc
+++ b/liboctave/dbleSVD.cc
@@ -38,30 +38,30 @@ extern "C"
   int F77_FCN (dgesvd, DGESVD) (const char*, const char*, const int&,
 				const int&, double*, const int&,
 				double*, double*, const int&, double*,
 				const int&, double*, const int&, int&,
 				long, long);
 }
 
 Matrix
-left_singular_matrix (void) const
+SVD::left_singular_matrix (void) const
 {
   if (type_computed == SVD::sigma_only)
     {
       (*current_liboctave_error_handler)
 	("ComplexSVD: U not computed because type == SVD::sigma_only");
       return Matrix ();
     }
   else
     return left_sm;
 }
 
 Matrix
-right_singular_matrix (void) const
+SVD::right_singular_matrix (void) const
 {
   if (type_computed == SVD::sigma_only)
     {
       (*current_liboctave_error_handler)
 	("ComplexSVD: V not computed because type == SVD::sigma_only");
       return Matrix ();
     }
   else
@@ -93,44 +93,44 @@ SVD::init (const Matrix& a, SVD::type sv
     {
     case SVD::economy:
       jobu = jobv ="S";
       ncol_u = nrow_vt = nrow_s = ncol_s = min_mn;
       break;
 
     case SVD::sigma_only:
       jobu = jobv ="N";
-      ncol_u = nrow_vt = 0;
+      ncol_u = nrow_vt = 1;
       break;
 
     default:
       break;
     }
 
   type_computed = svd_type;
 
-  double *u = (ncol_u > 0 ? new double[m * ncol_u] : 0);
+  double *u = (*jobu == 'N' ? 0 : new double[m * ncol_u]);
   double *s_vec  = new double[min_mn];
-  double *vt = (ncol_vt > 0 ? new double[nrow_vt * n] : 0);
+  double *vt = (*jobv == 'N' ? 0 : new double[nrow_vt * n]);
 
   int tmp1 = 3*min_mn + max_mn;
   int tmp2 = 5*min_mn - 4;
   int lwork = tmp1 > tmp2 ? tmp1 : tmp2;
   double *work = new double[lwork];
 
   F77_FCN (dgesvd, DGESVD) (jobu, jobv, m, n, tmp_data, m, s_vec, u,
 			    m, vt, nrow_vt, work, lwork, info, 1L,
 			    1L);
 
-  if (ncol_u > 0)
+  if (*jobu != 'N')
     left_sm = Matrix (u, m, ncol_u);
 
   sigma = DiagMatrix (s_vec, nrow_s, ncol_s);
 
-  if (nrow_vt > 0)
+  if (*jobv != 'N')
     {
       Matrix vt_m (vt, nrow_vt, n);
       right_sm = vt_m.transpose ();
     }
 
   delete [] tmp_data;
   delete [] work;
 
