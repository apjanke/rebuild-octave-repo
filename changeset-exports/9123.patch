# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1239858151 -7200
#      Thu Apr 16 07:02:31 2009 +0200
# Node ID f39b98237d5c13d1ed912f14d0e27863550cdf82
# Parent  8ca06fd9c6ef5b98f8b0ab8a4bceba9799d25580
use more robust and less aggressive scalar .^ range optimization

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-04-16  Jaroslav Hajek  <highegg@gmail.com>
+
+	* xpow.cc (same_sign): New helper function.
+	(elem_xpow (double, const Range&), elem_xpow (const Complex&, const Range&)): 
+	Only optimize monotonic-magnitude integer ranges, start always from
+	the smaller end.
+
 2008-04-11  David Bateman  <dbateman@free.fr>
 
 	* ov-cell.cc (Fstruct2cell): Treat possible trailing singleton for
 	creation of cell array from column structure vector.
 
 2009-04-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-cell.cc (octave_cell::subsasgn): Fix reference counting
diff --git a/src/xpow.cc b/src/xpow.cc
--- a/src/xpow.cc
+++ b/src/xpow.cc
@@ -687,49 +687,56 @@ elem_xpow (double a, const ComplexMatrix
       {
 	OCTAVE_QUIT;
 	result (i, j) = std::pow (atmp, b (i, j));
       }
 
   return result;
 }
 
+static inline bool 
+same_sign (double a, double b)
+{
+  return (a >= 0 && b >= 0) || (a <= 0 && b <= 0);
+}
+
 octave_value
 elem_xpow (double a, const Range& r)
 {
   octave_value retval;
 
-  if (r.nelem () <= 0)
-    retval = Matrix ();
-  else if (a < 0.0 && ! r.all_elements_are_ints ())
+  // Only optimize powers with ranges that are integer and monotonic in
+  // magnitude.
+  if (r.nelem () > 1 && r.all_elements_are_ints ()
+      && same_sign (r.base (), r.limit ()))
     {
-      ComplexMatrix mat (1, r.nelem ());
-      Complex atmp (a);
-      Complex *pmat = mat.fortran_vec ();
-
-      pmat[0] = std::pow (atmp, r.base ());
-      Complex mul = std::pow (atmp, r.inc ());
-      for (octave_idx_type i = 1; i < r.nelem (); i++)
-        pmat[i] = pmat[i-1] * mul;
-
-      retval = mat;
-    }
+      octave_idx_type n = r.nelem ();
+      Matrix result (1, n);
+      if (same_sign (r.base (), r.inc ()))
+        {
+          double base = std::pow (a, r.base ());
+          double inc = std::pow (a, r.inc ());
+          result(0) = base;
+          for (octave_idx_type i = 1; i < n; i++)
+            result(i) = (base *= inc);
+        }
+      else
+        {
+          // Don't use Range::limit () here.
+          double limit = std::pow (a, r.base () + (n-1) * r.inc ());
+          double inc = std::pow (a, -r.inc ());
+          result(n-1) = limit;
+          for (octave_idx_type i = n-2; i >= 0; i--)
+            result(i) = (limit *= inc);
+        }
+
+      retval = result;
+    }  
   else
-    {
-      Matrix mat (1, r.nelem ());
-      double *pmat = mat.fortran_vec ();
-
-      double base = std::pow (a, r.base ());
-      pmat[0] = base;
-      double mul = std::pow (a, r.inc ());
-      for (octave_idx_type i = 1; i < r.nelem (); i++)
-        pmat[i] = (base *= mul);
-
-      retval = mat;
-    }
+    retval = elem_xpow (a, r.matrix_value ());
 
   return retval;
 }
 
 // -*- 3 -*-
 octave_value
 elem_xpow (const Matrix& a, double b)
 {
@@ -926,30 +933,47 @@ elem_xpow (const Complex& a, const Compl
   return result;
 }
 
 octave_value
 elem_xpow (const Complex& a, const Range& r)
 {
   octave_value retval;
 
-  if (r.nelem () <= 0)
-    retval = Matrix ();
-  else
+  // Only optimize powers with ranges that are integer and monotonic in
+  // magnitude.
+  if (r.nelem () > 1 && r.all_elements_are_ints ()
+      && same_sign (r.base (), r.limit ()))
     {
-      ComplexMatrix mat (1, r.nelem ());
-      Complex *pmat = mat.fortran_vec ();
-
-      pmat[0] = std::pow (a, r.base ());
-      Complex mul = std::pow (a, r.inc ());
-      for (octave_idx_type i = 1; i < r.nelem (); i++)
-        pmat[i] = pmat[i-1] * mul;
-
-      retval = mat;
-    }
+      octave_idx_type n = r.nelem ();
+      ComplexMatrix result (1, n);
+
+      if (same_sign (r.base (), r.inc ()))
+        {
+          Complex base = std::pow (a, r.base ());
+          Complex inc = std::pow (a, r.inc ());
+          result(0) = base;
+          for (octave_idx_type i = 1; i < n; i++)
+            result(i) = (base *= inc);
+        }
+      else
+        {
+          // Don't use Range::limit () here.
+          Complex limit = std::pow (a, r.base () + (n-1) * r.inc ());
+          Complex inc = std::pow (a, -r.inc ());
+          result(n-1) = limit;
+          for (octave_idx_type i = n-2; i >= 0; i--)
+            result(i) = (limit *= inc);
+        }
+
+      retval = result;
+    }  
+  else
+    retval = elem_xpow (a, r.matrix_value ());
+
 
   return retval;
 }
 
 // -*- 9 -*-
 octave_value
 elem_xpow (const ComplexMatrix& a, double b)
 {
