# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1361854112 18000
#      Mon Feb 25 23:48:32 2013 -0500
# Node ID 031117f4db7c94f093b80fbcfeb0a1f7fcb6fe72
# Parent  b7de58feb2d3658665e3f528fae265f6f63d523d
use enum for values returned by eat_continuation and eat_whitespace

* lex.ll, lex.h (lexical_feedback::whitespace_type): New enum.
(yum_yum): Delete typedef.
(ATE_NOTHING, ATE_SPACE_OR_TAB, ATE_NEWLINE): Replace with
NO_WHITESPACE, SPACE_OR_TAB, NEWLINE values from
lexical_feedback::whitespace_type enum.
When result of eat_continuation is used as a logical test for
whitespace or no whitespace, compare to
lexical_feedback::NO_WHITESPACE to produce bool value.

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -56,16 +56,34 @@ extern void prep_lexer_for_function_file
 
 // For communication between the lexer and parser.
 
 class
 lexical_feedback
 {
 public:
 
+  // Did eat_whitespace or eat_continuation eat a space or tab, or a
+  // newline, or both?
+  //
+  // Functions that return this type will return a logical OR of the
+  // following values:
+  //
+  //  NO_WHITESPACE  no spaces to eat
+  //  SPACE_OR_TAB   space or tab in input
+  //  NEWLINE        bare new line in input
+
+  enum whitespace_type
+    {
+      NO_WHITESPACE = 1,
+      SPACE_OR_TAB = 2,
+      NEWLINE = 4
+    };
+
+
   // Track nesting of square brackets, curly braces, and parentheses.
 
   class bbp_nesting_level
   {
   private:
 
     enum
       {
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -218,24 +218,16 @@ lexical_feedback lexer_flags;
 // reset and avoid growing forever just because we are stashing some
 // information.  This has to appear before lex.h is included, because
 // one of the macros defined there uses token_stack.
 //
 // FIXME -- this should really be static, but that causes
 // problems on some systems.
 std::stack <token*> token_stack;
 
-// Did eat_whitespace() eat a space or tab, or a newline, or both?
-
-typedef int yum_yum;
-
-const yum_yum ATE_NOTHING = 0;
-const yum_yum ATE_SPACE_OR_TAB = 1;
-const yum_yum ATE_NEWLINE = 2;
-
 static bool Vdisplay_tokens = false;
 
 static unsigned int Vtoken_count = 0;
 
 // Internal variable for lexer debugging state.
 static bool lexer_debug_flag = false;
 
 // Forward declarations for functions defined at the bottom of this
@@ -256,18 +248,18 @@ static void handle_number (void);
 static int handle_string (char delim);
 static int handle_close_bracket (bool spc_gobbled, int bracket_type);
 static int handle_superclass_identifier (void);
 static int handle_meta_identifier (void);
 static int handle_identifier (void);
 static bool have_continuation (bool trailing_comments_ok = true);
 static bool have_ellipsis_continuation (bool trailing_comments_ok = true);
 static void scan_for_comments (const char *);
-static yum_yum eat_whitespace (void);
-static yum_yum eat_continuation (void);
+static int eat_whitespace (void);
+static int eat_continuation (void);
 static int octave_read (char *buf, unsigned int max_size);
 static void maybe_warn_separator_insert (char sep);
 static void gripe_single_quote_string (void);
 static void gripe_matlab_incompatible (const std::string& msg);
 static void maybe_gripe_matlab_incompatible_comment (char c);
 static void gripe_matlab_incompatible_continuation (void);
 static void gripe_matlab_incompatible_operator (const std::string& op);
 static void display_token (int tok);
@@ -391,17 +383,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
     fixup_column_count (yytext);
 
     lexer_flags.looking_at_object_index.pop_front ();
 
     lexer_flags.looking_for_object_index = true;
     lexer_flags.at_beginning_of_statement = false;
 
     int c = yytext[yyleng-1];
-    int cont_is_spc = eat_continuation ();
+    bool cont_is_spc = (eat_continuation () != lexical_feedback::NO_WHITESPACE);
     bool spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
     int tok_to_return = handle_close_bracket (spc_gobbled, ']');
 
     if (spc_gobbled)
       xunput (' ', yytext);
 
     COUNT_TOK_AND_RETURN (tok_to_return);
   }
@@ -417,17 +409,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
     fixup_column_count (yytext);
 
     lexer_flags.looking_at_object_index.pop_front ();
 
     lexer_flags.looking_for_object_index = true;
     lexer_flags.at_beginning_of_statement = false;
 
     int c = yytext[yyleng-1];
-    int cont_is_spc = eat_continuation ();
+    bool cont_is_spc = (eat_continuation () != lexical_feedback::NO_WHITESPACE);
     bool spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
     int tok_to_return = handle_close_bracket (spc_gobbled, '}');
 
     if (spc_gobbled)
       xunput (' ', yytext);
 
     COUNT_TOK_AND_RETURN (tok_to_return);
   }
@@ -447,17 +439,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
 
     lexer_flags.quote_is_transpose = false;
     lexer_flags.convert_spaces_to_comma = true;
     lexer_flags.looking_for_object_index = false;
     lexer_flags.at_beginning_of_statement = false;
 
     if (! lexer_flags.looking_at_object_index.front ())
       {
-        if ((tmp & ATE_NEWLINE) == ATE_NEWLINE)
+        if ((tmp & lexical_feedback::NEWLINE) == lexical_feedback::NEWLINE)
           {
             maybe_warn_separator_insert (';');
 
             xunput (';', yytext);
           }
       }
 
     COUNT_TOK_AND_RETURN (',');
@@ -484,17 +476,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
         bool bin_op = next_token_is_bin_op (true);
         bool postfix_un_op = next_token_is_postfix_unary_op (true);
         bool sep_op = next_token_is_sep_op ();
 
         if (! (postfix_un_op || bin_op || sep_op)
             && lexer_flags.nesting_level.is_bracket_or_brace ()
             && lexer_flags.convert_spaces_to_comma)
           {
-            if ((tmp & ATE_NEWLINE) == ATE_NEWLINE)
+            if ((tmp & lexical_feedback::NEWLINE) == lexical_feedback::NEWLINE)
               {
                 maybe_warn_separator_insert (';');
 
                 xunput (';', yytext);
               }
 
             lexer_flags.quote_is_transpose = false;
             lexer_flags.convert_spaces_to_comma = true;
@@ -1026,17 +1018,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
 // GAG.
 //
 // If we're reading a matrix and the next character is '[', make sure
 // that we insert a comma ahead of it.
 
 void
 do_comma_insert_check (void)
 {
-  int spc_gobbled = eat_continuation ();
+  bool spc_gobbled = (eat_continuation () != lexical_feedback::NO_WHITESPACE);
 
   int c = text_yyinput ();
 
   xunput (c, yytext);
 
   if (spc_gobbled)
     xunput (' ', yytext);
 
@@ -2206,29 +2198,23 @@ scan_for_comments (const char *text)
         }
     }
 
   if (! comment_buf.empty ())
     octave_comment_buffer::append (comment_buf);
 }
 
 // Discard whitespace, including comments and continuations.
-//
-// Return value is logical OR of the following values:
-//
-//  ATE_NOTHING      : no spaces to eat
-//  ATE_SPACE_OR_TAB : space or tab in input
-//  ATE_NEWLINE      : bare new line in input
 
 // FIXME -- we need to handle block comments here.
 
-static yum_yum
+static int
 eat_whitespace (void)
 {
-  yum_yum retval = ATE_NOTHING;
+  int retval = lexical_feedback::NO_WHITESPACE;
 
   std::string comment_buf;
 
   bool in_comment = false;
   bool beginning_of_comment = false;
 
   int c = 0;
 
@@ -2240,21 +2226,21 @@ eat_whitespace (void)
         {
         case ' ':
         case '\t':
           if (in_comment)
             {
               comment_buf += static_cast<char> (c);
               beginning_of_comment = false;
             }
-          retval |= ATE_SPACE_OR_TAB;
+          retval |= lexical_feedback::SPACE_OR_TAB;
           break;
 
         case '\n':
-          retval |= ATE_NEWLINE;
+          retval |= lexical_feedback::NEWLINE;
           if (in_comment)
             {
               comment_buf += static_cast<char> (c);
               octave_comment_buffer::append (comment_buf);
               comment_buf.resize (0);
               in_comment = false;
               beginning_of_comment = false;
             }
@@ -2497,23 +2483,21 @@ have_ellipsis_continuation (bool trailin
   else
     xunput (c1, yytext);
 
   return false;
 }
 
 // See if we have a continuation line.  If so, eat it and the leading
 // whitespace on the next line.
-//
-// Return value is the same as described for eat_whitespace().
-
-static yum_yum
+
+static int
 eat_continuation (void)
 {
-  int retval = ATE_NOTHING;
+  int retval = lexical_feedback::NO_WHITESPACE;
 
   int c = text_yyinput ();
 
   if ((c == '.' && have_ellipsis_continuation ())
       || (c == '\\' && have_continuation ()))
     retval = eat_whitespace ();
   else
     xunput (c, yytext);
@@ -3160,17 +3144,17 @@ static int
 handle_identifier (void)
 {
   bool at_bos = lexer_flags.at_beginning_of_statement;
 
   std::string tok = strip_trailing_whitespace (yytext);
 
   int c = yytext[yyleng-1];
 
-  int cont_is_spc = eat_continuation ();
+  bool cont_is_spc = (eat_continuation () != lexical_feedback::NO_WHITESPACE);
 
   int spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
 
   // If we are expecting a structure element, avoid recognizing
   // keywords and other special names and return STRUCT_ELT, which is
   // a string that is also a valid identifier.  But first, we have to
   // decide whether to insert a comma.
 
