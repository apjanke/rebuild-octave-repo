# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1549395010 28800
#      Tue Feb 05 11:30:10 2019 -0800
# Branch stable
# Node ID eb1d4a619260e3aeb8258bd4436458e4fdcfcf94
# Parent  2c246d188151880367d4ed2a94e999bbcbb94fa0
gammainc.m: relax tolerances of BIST tests

* gammainc.m: Relax tolerances of BIST tests failing on some systems.  Add
missing whitespace to conform to Octave coding style.

diff --git a/scripts/specfun/gammainc.m b/scripts/specfun/gammainc.m
--- a/scripts/specfun/gammainc.m
+++ b/scripts/specfun/gammainc.m
@@ -475,30 +475,30 @@ endfunction
 %!assert (gammainc (-10, 10, "upper"), -3.112658165341493126871616e7, ...
 %!        -2*eps)
 %!assert (gammainc (-10, 10, "scaledlower"), 0.5128019364747265, -1e-14);
 %!assert (gammainc (-10, 10, "scaledupper"), -0.5128019200000000, -1e-14);
 %!assert (gammainc (200, 201, "upper"), 0.518794309678684497, -2 * eps);
 %!assert (gammainc (200, 201, "scaledupper"),
 %!        18.4904360746560462660798514, -eps)
 ## Here we are very good (no D (x,a)) involved
-%!assert (gammainc(1000, 1000.5, "scaledlower"), 39.48467539583672271, -2*eps)
+%!assert (gammainc (1000, 1000.5, "scaledlower"), 39.48467539583672271, -2*eps)
 %!assert (gammainc (709, 1000, "upper"), 0.99999999999999999999999954358, -eps)
 
 ## Test: case 9
 %!test <47800>
 %! assert (gammainc (60, 6, "upper"), 6.18022358081160257327264261e-20,
 %!         -10*eps);
 ## Matlab is better here than Octave
 %!assert (gammainc (751, 750, "upper"), 0.4805914320558831327179457887, -12*eps)
-%!assert (gammainc (200, 200, "upper"), 0.49059658199276367497217454, -5*eps)
+%!assert (gammainc (200, 200, "upper"), 0.49059658199276367497217454, -6*eps)
 %!assert (gammainc (200, 200), 0.509403418007236325027825459574527043, -5*eps)
 %!assert (gammainc (200, 200, "scaledupper"), 17.3984438553791505135122900,
-%!       -2*eps)
-%!assert (gammainc (200, 200, "scaledlower"), 18.065406676779221643065, -7*eps)
+%!       -3*eps)
+%!assert (gammainc (200, 200, "scaledlower"), 18.065406676779221643065, -8*eps)
 %!assert (gammainc (201, 200, "upper"), 0.46249244908276709524913736667,
 %!        -7*eps)
 %!assert <*54550> (gammainc (77, 2), 1)
 
 %!assert (gammainc (77, 2, "upper"), 0, -eps)
 %!assert (gammainc (1000, 3.1), 1)
 %!assert (gammainc (1000, 3.1, "upper"), 0)
 
@@ -539,17 +539,17 @@ endfunction
 %!assert (class (gammainc (single (1), 0)) == "single")
 %!assert (class (gammainc (int8 (1), 0)) == "double")
 %!assert (class (gammainc (1, single (0))) == "single")
 %!assert (class (gammainc (1, int8 (0))) == "double")
 %!assert (class (gammainc (1, 1)) == "double")
 %!assert (class (gammainc (single (1), 1)) == "single")
 %!assert (class (gammainc (int8 (1), 1)) == "double")
 %!assert (class (gammainc (1, single (1))) == "single")
-%!assert (class (gammainc (1, int8(1))) == "double")
+%!assert (class (gammainc (1, int8 (1))) == "double")
 %!assert (class (gammainc (1, 2)) == "double")
 %!assert (class (gammainc (single (1), 2)) == "single")
 %!assert (class (gammainc (int8 (1), 2)) == "double")
 %!assert (class (gammainc (1, single (2))) == "single")
 %!assert (class (gammainc (1, int8 (2))) == "double")
 %!assert (class (gammainc (-1, 0.5)) == "double")
 %!assert (class (gammainc (single (-1), 0.5)) == "single")
 %!assert (class (gammainc (int8 (-1), 0.5)) == "double")
