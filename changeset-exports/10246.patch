# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1265103569 18000
#      Tue Feb 02 04:39:29 2010 -0500
# Node ID f751dae7aab8844c294eed064ca1bc6593b4ac60
# Parent  4ea0bda308b7e79bcc69eb7b7703a2151843abee
use gnulib signal modules

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,20 @@
+2010-02-02  John W. Eaton  <jwe@octave.org>
+
+	* configure.ac: Don't call OCTAVE_SIGNAL_CHECK,
+	OCTAVE_REINSTALL_SIGHANDLERS, AC_C_CONST, AC_HEADER_STDC, or
+	AC_STRUCT_TM, AC_TYPE_SIGNAL.
+	Don't define RETSIGTYPE_IS_VOID.
+	* acinclude.m4 (OCTAVE_SIGNAL_CHECK, OCTAVE_REINSTALL_SIGHANDLERS):
+	Don't call AC_TYPE_SIGNAL.  Assume sighandler return type is void.
+	(OCTAVE_SIGNAL_CHECK, OCTAVE_REINSTALL_SIGHANDLERS): Delete macros.
+	* bootstrap.conf (gnulib_modules): Include sigaction, signal,
+	and sigprocmask in the list.
+
 2010-02-02  John W. Eaton  <jwe@octave.org>
 
 	* configure.ac: Don't check for stdint.h.
 	(AH_BOTTOM): Unconditionally include stdint.h.
 	Delete fallback integer type definitions.
 	* bootstrap.conf (gnulib_modules): Include stdint in the list.
 
 2010-02-02  John W. Eaton  <jwe@octave.org>
diff --git a/acinclude.m4 b/acinclude.m4
--- a/acinclude.m4
+++ b/acinclude.m4
@@ -168,119 +168,16 @@ main ()
   exit (rstr1 == rstr2 ? 0 : 1);
 }]])], octave_cv_func_putenv_malloc=yes, octave_cv_func_putenv_malloc=no,
     octave_cv_func_putenv_malloc=no)])dnl
 AC_MSG_RESULT([$octave_cv_func_putenv_malloc])
 if test $octave_cv_func_putenv_malloc = yes; then
   AC_DEFINE(SMART_PUTENV,1,[To quiet autoheader.])
 fi])
 dnl
-dnl These two checks for signal functions were originally part of the
-dnl aclocal.m4 file distributed with bash 2.0.
-dnl
-dnl Check type of signal routines (posix, 4.2bsd, 4.1bsd or v7)
-AC_DEFUN([OCTAVE_SIGNAL_CHECK],
-[AC_REQUIRE([AC_TYPE_SIGNAL])
-AC_MSG_CHECKING([for type of signal functions])
-AC_CACHE_VAL(octave_cv_signal_vintage,
-[
-  AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <signal.h>]],
-    [[sigset_t ss;
-      struct sigaction sa;
-      sigemptyset (&ss);
-      sigsuspend (&ss);
-      sigaction (SIGINT, &sa, (struct sigaction *) 0);
-      sigprocmask (SIG_BLOCK, &ss, (sigset_t *) 0);]])],
-    [octave_cv_signal_vintage=posix],
-    [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <signal.h>]],
-       [[int mask = sigmask (SIGINT);
-	 sigsetmask (mask);
-         sigblock (mask);
-         sigpause (mask);]])],
-       [octave_cv_signal_vintage=4.2bsd],
-       [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <signal.h>
-          RETSIGTYPE foo() { }]],
-          [[int mask = sigmask (SIGINT);
-	    sigset (SIGINT, foo);
-            sigrelse (SIGINT);
-	    sighold (SIGINT);
-            sigpause (SIGINT);]])],
-          [octave_cv_signal_vintage=svr3],
-          [octave_cv_signal_vintage=v7])])])])
-AC_MSG_RESULT([$octave_cv_signal_vintage])
-if test "$octave_cv_signal_vintage" = posix; then
-AC_DEFINE(HAVE_POSIX_SIGNALS, 1, [Define if you have POSIX style signals.])
-elif test "$octave_cv_signal_vintage" = "4.2bsd"; then
-AC_DEFINE(HAVE_BSD_SIGNALS, 1, [Define if you have BSD style signals.])
-elif test "$octave_cv_signal_vintage" = svr3; then
-AC_DEFINE(HAVE_USG_SIGHOLD, 1, [Define if you have System V Release 3 signals.])
-fi
-])
-dnl
-AC_DEFUN([OCTAVE_REINSTALL_SIGHANDLERS],
-[AC_REQUIRE([AC_TYPE_SIGNAL])
-AC_REQUIRE([OCTAVE_SIGNAL_CHECK])
-AC_MSG_CHECKING([if signal handlers must be reinstalled when invoked])
-AC_CACHE_VAL(octave_cv_must_reinstall_sighandlers,
-[AC_RUN_IFELSE([AC_LANG_SOURCE([[
-#include <signal.h>
-#ifdef HAVE_UNISTD_H
-#include <unistd.h>
-#endif
-typedef RETSIGTYPE sigfunc();
-int nsigint;
-#ifdef HAVE_POSIX_SIGNALS
-sigfunc *
-set_signal_handler(sig, handler)
-     int sig;
-     sigfunc *handler;
-{
-  struct sigaction act, oact;
-  act.sa_handler = handler;
-  act.sa_flags = 0;
-  sigemptyset (&act.sa_mask);
-  sigemptyset (&oact.sa_mask);
-  sigaction (sig, &act, &oact);
-  return (oact.sa_handler);
-}
-#else
-#define set_signal_handler(s, h) signal(s, h)
-#endif
-RETSIGTYPE
-sigint(s)
-    int s;
-{
-  nsigint++;
-}
-main()
-{
-  nsigint = 0;
-  set_signal_handler(SIGINT, sigint);
-  kill((int)getpid(), SIGINT);
-  kill((int)getpid(), SIGINT);
-  exit(nsigint != 2);
-}
-]])],
-  octave_cv_must_reinstall_sighandlers=no,
-  octave_cv_must_reinstall_sighandlers=yes,
-if test "$octave_cv_signal_vintage" = svr3; then
-  octave_cv_must_reinstall_sighandlers=yes
-else
-  octave_cv_must_reinstall_sighandlers=no
-fi)])
-if test "$cross_compiling" = yes; then
-  AC_MSG_RESULT([$octave_cv_must_reinstall_sighandlers assumed for cross compilation])
-else
-  AC_MSG_RESULT([$octave_cv_must_reinstall_sighandlers])
-fi
-if test "$octave_cv_must_reinstall_sighandlers" = yes; then
-  AC_DEFINE(MUST_REINSTALL_SIGHANDLERS,1,[Define if signal handlers must be reinstalled after they are called.])
-fi
-])
-dnl
 dnl Check to see if C++ compiler needs the new friend template declaration 
 dnl syntax. 
 dnl
 dnl OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL
 AC_DEFUN([OCTAVE_CXX_NEW_FRIEND_TEMPLATE_DECL], [
   AC_REQUIRE([AC_PROG_CXX])
   AC_MSG_CHECKING([for C++ support for new friend template declaration])
   AC_CACHE_VAL(octave_cv_cxx_new_friend_template_decl, [
diff --git a/bootstrap.conf b/bootstrap.conf
--- a/bootstrap.conf
+++ b/bootstrap.conf
@@ -27,16 +27,19 @@ gnulib_modules="
   link
   lstat
   mkdir
   mkfifo
   pathmax
   readlink
   rename
   rmdir
+  sigaction
+  signal
+  sigprocmask
   stat
   stdint
   strftime
   strptime
   symlink
   sys_stat
   sys_time
   sys_times
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1424,17 +1424,16 @@ AC_CHECK_TYPES([sigset_t, sig_atomic_t],
 AC_CHECK_SIZEOF(short)
 AC_CHECK_SIZEOF(int)
 AC_CHECK_SIZEOF(long)
 AC_CHECK_SIZEOF(long long)
 
 ### Does the C compiler handle alloca() and const correctly?
 
 AC_FUNC_ALLOCA
-AC_C_CONST
 
 ### See if we should use placement delete.
 
 OCTAVE_PLACEMENT_DELETE
 
 ### See if we can auto allocate variable sized arrays.
 
 OCTAVE_DYNAMIC_AUTO_ARRAYS
@@ -1444,17 +1443,16 @@ OCTAVE_DYNAMIC_AUTO_ARRAYS
 OCTAVE_FAST_INT_OPS
 
 ### Check for long double type (for 64-bit integers)
 
 AC_CHECK_SIZEOF(long double)
 
 ### Checks for header files.
 
-AC_HEADER_STDC
 AC_HEADER_DIRENT
 AC_HEADER_SYS_WAIT
 
 ### C headers
 
 AC_CHECK_HEADERS(curses.h direct.h dlfcn.h fcntl.h \
   floatingpoint.h grp.h ieeefp.h inttypes.h locale.h memory.h nan.h \
   ncurses.h poll.h pthread.h pwd.h sunmath.h sys/ioctl.h \
@@ -1686,17 +1684,16 @@ esac
 
 AC_CHECK_FUNCS(acosh acoshf asinh asinhf atanh atanhf erf erff erfc erfcf exp2f log2 log2f)
 AC_CHECK_FUNCS(hypotf _hypotf)
 
 ### Checks for OS specific cruft.
 
 AC_CHECK_MEMBERS([struct stat.st_blksize, struct stat.st_blocks, struct stat.st_rdev])
 
-AC_STRUCT_TM
 AC_STRUCT_TIMEZONE
 AC_FUNC_CLOSEDIR_VOID
 
 AC_CHECK_MEMBERS(struct group.gr_passwd)
 
 octave_found_termlib=no
 for termlib in ncurses curses termcap terminfo termlib; do
   AC_CHECK_LIB(${termlib}, tputs, [
@@ -1719,29 +1716,23 @@ AC_LINK_IFELSE([AC_LANG_PROGRAM([[#inclu
   [[struct exception *x; x->type; x->name;]])],
   [AC_MSG_RESULT(yes)
    AC_DEFINE(EXCEPTION_IN_MATH, 1,
      [Define if your math.h declares struct exception for matherr().])],
   [AC_MSG_RESULT(no)])
 
 ### Signal stuff.
 
-AC_TYPE_SIGNAL
 AC_CHECK_DECLS([sys_siglist], [], [],
 [#include <signal.h>
 /* NetBSD declares sys_siglist in unistd.h.  */
 #if HAVE_UNISTD_H
 # include <unistd.h>
 #endif
 ])
-OCTAVE_SIGNAL_CHECK
-OCTAVE_REINSTALL_SIGHANDLERS
-if test "$ac_cv_type_signal" = "void"; then
-  AC_DEFINE(RETSIGTYPE_IS_VOID, 1, [Define if this if RETSIGTYPE is defined to be void.  Needed because preprocessor comparisons to void fail on some systems.])
-fi
 
 ### A system dependent kluge or two.
 
 AC_CHECK_FUNCS(getrusage)
 case "$canonical_host_type" in
   *-*-cygwin*)
     AC_DEFINE(RUSAGE_TIMES_ONLY, 1, [Define if your struct rusage only has time information.])
   ;;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,11 +1,15 @@
 2010-02-02  John W. Eaton  <jwe@octave.org>
 
 	* octave.cc (octave_main): Assume we have atexit.
+	* sighandlers.h, sighandlers.cc: Delete conditional definition
+	of RETSIGTYPE.  Replace all uses of RETSIGTYPE with void.
+	(MAYBE_REINSTALL_SIGHANDLER, SIGHANDLER_RETURN):
+	Delete macros and all uses.
 
 2010-02-01  Jaroslav Hajek  <highegg@gmail.com>
 
 	* load-path.cc (load_path::add_to_fcn_map): Warn when core library or
 	built-in functions are being shadowed. 
 	(load_path::do_add): Pass at_end to add_to_fcn_map, add_to_method_map.
 	Don't abort when "." not yet included.
 	(load_path::do_clear): Don't append "." here.
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -66,31 +66,16 @@ static bool Vdebug_on_interrupt = false;
 // Allow users to avoid writing octave-core for SIGHUP (sent by
 // closing gnome-terminal, for example).  Note that this variable has
 // no effect if Vcrash_dumps_octave_core is FALSE.
 static bool Vsighup_dumps_octave_core = true;
 
 // Similar to Vsighup_dumps_octave_core, but for SIGTERM signal.
 static bool Vsigterm_dumps_octave_core = true;
 
-#if defined (RETSIGTYPE_IS_VOID)
-#define SIGHANDLER_RETURN(status) return
-#else
-#define SIGHANDLER_RETURN(status) return status
-#endif
-
-#if defined (MUST_REINSTALL_SIGHANDLERS)
-#define MAYBE_REINSTALL_SIGHANDLER(sig, handler) \
-  octave_set_signal_handler (sig, handler)
-#define REINSTALL_USES_SIG 1
-#else
-#define MAYBE_REINSTALL_SIGHANDLER(sig, handler) \
-  do { } while (0)
-#endif
-
 #if defined (__EMX__)
 #define MAYBE_ACK_SIGNAL(sig) \
   octave_set_signal_handler (sig, SIG_ACK)
 #define ACK_USES_SIG 1
 #else
 #define MAYBE_ACK_SIGNAL(sig) \
   do { } while (0)
 #endif
@@ -183,17 +168,16 @@ my_friendly_exit (const char *sig_name, 
 
     }
 }
 
 sig_handler *
 octave_set_signal_handler (int sig, sig_handler *handler,
 			   bool restart_syscalls)
 {
-#if defined (HAVE_POSIX_SIGNALS)
   struct sigaction act, oact;
 
   act.sa_handler = handler;
   act.sa_flags = 0;
 
   if (sig == SIGALRM)
     {
 #if defined (SA_INTERRUPT)
@@ -207,33 +191,28 @@ octave_set_signal_handler (int sig, sig_
 #endif
 
   sigemptyset (&act.sa_mask);
   sigemptyset (&oact.sa_mask);
 
   sigaction (sig, &act, &oact);
 
   return oact.sa_handler;
-#else
-  return signal (sig, handler);
-#endif
 }
 
-static RETSIGTYPE
+static void
 generic_sig_handler (int sig)
 {
   my_friendly_exit (strsignal (sig), sig);
-
-  SIGHANDLER_RETURN (0);
 }
 
 // Handle SIGCHLD.
 
 #ifdef SIGCHLD
-static RETSIGTYPE
+static void
 sigchld_handler (int /* sig */)
 {
   volatile octave_interrupt_handler saved_interrupt_handler
      = octave_ignore_interrupts ();
 
   // I wonder if this is really right, or if SIGCHLD should just be
   // blocked on OS/2 systems the same as for systems with POSIX signal
   // functions.
@@ -260,54 +239,44 @@ sigchld_handler (int /* sig */)
 
   UNBLOCK_CHILD (oset);
 
 #ifdef __EMX__
   octave_set_signal_handler (SIGCHLD, saved_sigchld_handler);
 #endif
 
   MAYBE_ACK_SIGNAL (SIGCHLD);
-
-  MAYBE_REINSTALL_SIGHANDLER (SIGCHLD, sigchld_handler);
-
-  SIGHANDLER_RETURN (0);
 }
 #endif /* defined(SIGCHLD) */
 
 #ifdef SIGFPE
 #if defined (__alpha__)
-static RETSIGTYPE
+static void
 sigfpe_handler (int /* sig */)
 {
   MAYBE_ACK_SIGNAL (SIGFPE);
 
-  MAYBE_REINSTALL_SIGHANDLER (SIGFPE, sigfpe_handler);
-
   if (can_interrupt && octave_interrupt_state >= 0)
     {
       octave_signal_caught = 1;
 
       octave_signals_caught[SIGFPE] = true;
 
       octave_interrupt_state++;
     }
-
-  SIGHANDLER_RETURN (0);
 }
 #endif /* defined(__alpha__) */
 #endif /* defined(SIGFPE) */
 
 #if defined (SIGHUP) || defined (SIGTERM)
-static RETSIGTYPE
+static void
 sig_hup_or_term_handler (int sig)
 {
   MAYBE_ACK_SIGNAL (sig);
 
-  MAYBE_REINSTALL_SIGHANDLER (sig, sig_hup_or_term_handler);
-
   switch (sig)
     {
 #if defined (SIGHUP)
     case SIGHUP:
       {
 	if (Vsighup_dumps_octave_core)
 	  dump_octave_core ();
       }
@@ -323,33 +292,27 @@ sig_hup_or_term_handler (int sig)
       break;
 #endif
 
     default:
       break;
     }
 
   clean_up_and_exit (0);
-
-  SIGHANDLER_RETURN (0);
 }
 #endif
 
 #if 0
 #if defined (SIGWINCH)
-static RETSIGTYPE
+static void
 sigwinch_handler (int /* sig */)
 {
   MAYBE_ACK_SIGNAL (SIGWINCH);
 
-  MAYBE_REINSTALL_SIGHANDLER (SIGWINCH, sigwinch_handler);
-
   command_editor::resize_terminal ();
-
-  SIGHANDLER_RETURN (0);
 }
 #endif
 #endif
 
 // Handle SIGINT by restarting the parser (see octave.cc).
 //
 // This also has to work for SIGBREAK (on systems that have it), so we
 // use the value of sig, instead of just assuming that it is called
@@ -406,53 +369,45 @@ user_abort (const char *sig_name, int si
 
 	  if (octave_interrupt_state >= 3)
 	    my_friendly_exit (sig_name, sig_number, true);
 	}
     }
 
 }
 
-static RETSIGTYPE
+static void
 sigint_handler (int sig)
 {
   MAYBE_ACK_SIGNAL (sig);
 
-  MAYBE_REINSTALL_SIGHANDLER (sig, sigint_handler);
-
 #ifdef USE_W32_SIGINT
   if (w32_in_main_thread ())
     user_abort (strsignal (sig), sig);
   else
     w32_raise (sig);
 #else
   user_abort (strsignal (sig), sig);
 #endif
-
-  SIGHANDLER_RETURN (0);
 }
 
 #ifdef SIGPIPE
-static RETSIGTYPE
+static void
 sigpipe_handler (int /* sig */)
 {
   MAYBE_ACK_SIGNAL (SIGPIPE);
 
-  MAYBE_REINSTALL_SIGHANDLER (SIGPIPE, sigpipe_handler);
-
   octave_signal_caught = 1;
 
   octave_signals_caught[SIGPIPE] = true;
 
   // Don't loop forever on account of this.
 
   if (pipe_handler_error_count++ > 100 && octave_interrupt_state >= 0)
     octave_interrupt_state++;
-
-  SIGHANDLER_RETURN (0);
 }
 #endif /* defined(SIGPIPE) */
 
 #ifdef USE_W32_SIGINT
 static BOOL CALLBACK
 w32_sigint_handler (DWORD sig)
 {
   const char *sig_name;
diff --git a/src/sighandlers.h b/src/sighandlers.h
--- a/src/sighandlers.h
+++ b/src/sighandlers.h
@@ -40,46 +40,38 @@ Free Software Foundation, Inc.
 #include <signal.h>
 
 #include "syswait.h"
 #include "siglist.h"
 
 #include "base-list.h"
 
 // Signal handler return type.
-#ifndef RETSIGTYPE
-#define RETSIGTYPE void
-#endif
 #ifndef BADSIG
-#define BADSIG (RETSIGTYPE (*)(int))-1
+#define BADSIG (void (*)(int))-1
 #endif
 
 #define BLOCK_SIGNAL(sig, nvar, ovar) \
   do \
     { \
       sigemptyset (&nvar); \
       sigaddset (&nvar, sig); \
       sigemptyset (&ovar); \
       sigprocmask (SIG_BLOCK, &nvar, &ovar); \
     } \
   while (0)
 
 #if !defined (SIGCHLD) && defined (SIGCLD)
 #define SIGCHLD SIGCLD
 #endif
 
-#if defined (HAVE_POSIX_SIGNALS)
 #define BLOCK_CHILD(nvar, ovar) BLOCK_SIGNAL (SIGCHLD, nvar, ovar)
 #define UNBLOCK_CHILD(ovar) sigprocmask (SIG_SETMASK, &ovar, 0)
-#else
-#define BLOCK_CHILD(nvar, ovar) ovar = sigblock (sigmask (SIGCHLD))
-#define UNBLOCK_CHILD(ovar) sigsetmask (ovar)
-#endif
 
-typedef RETSIGTYPE sig_handler (int);
+typedef void sig_handler (int);
 
 // FIXME -- the data should probably be private...
 
 struct
 octave_interrupt_handler
 {
 #ifdef SIGINT
   sig_handler *int_handler;
