# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1251960531 -7200
#      Thu Sep 03 08:48:51 2009 +0200
# Node ID 1be3c73ed7b58883686c7ef2eebcb7b1e6991065
# Parent  a04352386a6b91ac4c1d4d9fa97796ba58804d2d
reuse temporary arrays in nested expressions

diff --git a/liboctave/CNDArray.h b/liboctave/CNDArray.h
--- a/liboctave/CNDArray.h
+++ b/liboctave/CNDArray.h
@@ -133,16 +133,22 @@ public:
 
   static Complex resize_fill_value (void) { return Complex (0.0, 0.0); }
 
   //  bool all_elements_are_real (void) const;
   //  bool all_integers (double& max_val, double& min_val) const;
 
   ComplexNDArray diag (octave_idx_type k = 0) const;
 
+  ComplexNDArray& changesign (void) 
+    { 
+      MArrayN<Complex>::changesign (); 
+      return *this; 
+    }
+
   typedef double (*dmapper) (const Complex&);
   typedef Complex (*cmapper) (const Complex&);
   typedef bool (*bmapper) (const Complex&);
 
   NDArray map (dmapper fcn) const;
   ComplexNDArray map (cmapper fcn) const;
   boolNDArray map (bmapper fcn) const;
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,27 @@
+2009-09-03  Jaroslav Hajek  <highegg@gmail.com>
+
+	* mx-inlines.cc (DEFMXUNOPEQ): New macro.
+	(mx_inline_not2, mx_inline_uminus2): New loops.
+	* boolNDArray.cc (boolNDArray::invert): New method.
+	* boolNDArray.h: Declare it.
+	* MArrayN.cc (MArrayN<T>::changesign): New method.
+	* MArrayN.h: Declare it.
+	* dNDArray.cc (NDArray::changesign): New method.
+	* dNDArray.h: Declare it.
+	* fNDArray.cc (FloatNDArray::changesign): New method.
+	* fNDArray.h: Declare it.
+	* CNDArray.cc (ComplexNDArray::changesign): New method.
+	* CNDArray.h: Declare it.
+	* fCNDArray.cc (FloatComplexNDArray::changesign): New method.
+	* fCNDArray.h: Declare it.
+	* intNDArray.cc (intNDArray::changesign): New method.
+	* intNDArray.h: Declare it.
+
 2009-09-02  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-cmplx.h: Rewrite the comaprison ops. Use FLOAT_TRUNCATE.
 
 2009-09-01  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-cmplx.h: Correct strict operators in macros.
 
diff --git a/liboctave/MArrayN.cc b/liboctave/MArrayN.cc
--- a/liboctave/MArrayN.cc
+++ b/liboctave/MArrayN.cc
@@ -24,18 +24,28 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include "MArrayN.h"
 #include "Array-util.h"
 #include "lo-error.h"
 
 #include "MArray-defs.h"
+#include "mx-inlines.cc"
 
 // N-dimensional array with math ops.
+template <class T>
+void
+MArrayN<T>::changesign (void)
+{
+  if (Array<T>::is_shared ())
+    *this = - *this;
+  else
+    do_mx_inplace_op<MArrayN<T> > (*this, mx_inline_uminus2);
+}
 
 // Element by element MArrayN by scalar ops.
 
 template <class T>
 MArrayN<T>&
 operator += (MArrayN<T>& a, const T& s)
 {
   if (a.is_shared ())
diff --git a/liboctave/MArrayN.h b/liboctave/MArrayN.h
--- a/liboctave/MArrayN.h
+++ b/liboctave/MArrayN.h
@@ -104,16 +104,18 @@ public:
     return ArrayN<T>::diag (k);
   }
 
   template <class U, class F>
   MArrayN<U> map (F fcn) const
   {
     return ArrayN<T>::template map<U> (fcn);
   }
+
+  void changesign (void);
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/liboctave/boolNDArray.cc b/liboctave/boolNDArray.cc
--- a/liboctave/boolNDArray.cc
+++ b/liboctave/boolNDArray.cc
@@ -37,16 +37,27 @@ along with Octave; see the file COPYING.
 // unary operations
 
 boolNDArray
 boolNDArray::operator ! (void) const
 {
   return do_mx_unary_op<boolNDArray> (*this, mx_inline_not);
 }
 
+boolNDArray&
+boolNDArray::invert (void)
+{
+  if (is_shared ())
+    *this = ! *this;
+  else
+    do_mx_inplace_op<boolNDArray> (*this, mx_inline_not2);
+
+  return *this;
+}
+
 // FIXME -- this is not quite the right thing.
 
 boolNDArray
 boolNDArray::all (int dim) const
 {
   return do_mx_red_op<boolNDArray, bool> (*this, dim, mx_inline_all);
 }
 
diff --git a/liboctave/boolNDArray.h b/liboctave/boolNDArray.h
--- a/liboctave/boolNDArray.h
+++ b/liboctave/boolNDArray.h
@@ -54,16 +54,18 @@ public:
       ArrayN<bool>::operator = (a);
       return *this;
     }
 
   // unary operations
 
   boolNDArray operator ! (void) const;
 
+  boolNDArray& invert (void); 
+
   bool any_element_is_nan (void) const { return false; }
 
   // FIXME -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
   NDArray sum (int dim = -1) const;
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -144,16 +144,22 @@ public:
 
   friend OCTAVE_API std::ostream& operator << (std::ostream& os, const NDArray& a);
   friend OCTAVE_API std::istream& operator >> (std::istream& is, NDArray& a);
 
   static double resize_fill_value (void) { return 0; }
 
   NDArray diag (octave_idx_type k = 0) const;
 
+  NDArray& changesign (void) 
+    { 
+      MArrayN<double>::changesign (); 
+      return *this; 
+    }
+
   typedef double (*dmapper) (double);
   typedef Complex (*cmapper) (const Complex&);
   typedef bool (*bmapper) (double);
 
   NDArray map (dmapper fcn) const;
   ComplexNDArray map (cmapper fcn) const;
   boolNDArray map (bmapper fcn) const;
 
diff --git a/liboctave/fCNDArray.h b/liboctave/fCNDArray.h
--- a/liboctave/fCNDArray.h
+++ b/liboctave/fCNDArray.h
@@ -133,16 +133,22 @@ public:
 
   static FloatComplex resize_fill_value (void) { return FloatComplex (0.0, 0.0); }
 
   //  bool all_elements_are_real (void) const;
   //  bool all_integers (float& max_val, float& min_val) const;
 
   FloatComplexNDArray diag (octave_idx_type k = 0) const;
 
+  FloatComplexNDArray& changesign (void) 
+    { 
+      MArrayN<FloatComplex>::changesign (); 
+      return *this; 
+    }
+
   typedef float (*dmapper) (const FloatComplex&);
   typedef FloatComplex (*cmapper) (const FloatComplex&);
   typedef bool (*bmapper) (const FloatComplex&);
 
   FloatNDArray map (dmapper fcn) const;
   FloatComplexNDArray map (cmapper fcn) const;
   boolNDArray map (bmapper fcn) const;
 
diff --git a/liboctave/fNDArray.h b/liboctave/fNDArray.h
--- a/liboctave/fNDArray.h
+++ b/liboctave/fNDArray.h
@@ -141,16 +141,22 @@ public:
 
   friend OCTAVE_API std::ostream& operator << (std::ostream& os, const FloatNDArray& a);
   friend OCTAVE_API std::istream& operator >> (std::istream& is, FloatNDArray& a);
 
   static float resize_fill_value (void) { return 0; }
 
   FloatNDArray diag (octave_idx_type k = 0) const;
 
+  FloatNDArray& changesign (void) 
+    { 
+      MArrayN<float>::changesign (); 
+      return *this; 
+    }
+
   typedef float (*dmapper) (float);
   typedef FloatComplex (*cmapper) (const FloatComplex&);
   typedef bool (*bmapper) (float);
 
   FloatNDArray map (dmapper fcn) const;
   FloatComplexNDArray map (cmapper fcn) const;
   boolNDArray map (bmapper fcn) const;
 
diff --git a/liboctave/intNDArray.h b/liboctave/intNDArray.h
--- a/liboctave/intNDArray.h
+++ b/liboctave/intNDArray.h
@@ -63,16 +63,22 @@ public:
 
   boolNDArray operator ! (void) const;
 
   bool any_element_is_nan (void) const { return false; }
   bool any_element_not_one_or_zero (void) const;
 
   intNDArray diag (octave_idx_type k = 0) const;
 
+  intNDArray& changesign (void) 
+    { 
+      MArrayN<T>::changesign (); 
+      return *this; 
+    }
+
   // FIXME -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
   intNDArray max (int dim = 0) const;
   intNDArray max (ArrayN<octave_idx_type>& index, int dim = 0) const;
   intNDArray min (int dim = 0) const;
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -44,16 +44,23 @@ inline void mx_inline_fill (size_t n, R 
 
 #define DEFMXUNOP(F, OP) \
 template <class R, class X> \
 inline void F (size_t n, R *r, const X *x) \
 { for (size_t i = 0; i < n; i++) r[i] = OP x[i]; }
 
 DEFMXUNOP (mx_inline_uminus, -)
 
+#define DEFMXUNOPEQ(F, OP) \
+template <class R> \
+inline void F (size_t n, R *r) \
+{ for (size_t i = 0; i < n; i++) r[i] = OP r[i]; }
+
+DEFMXUNOPEQ (mx_inline_uminus2, -)
+
 #define DEFMXUNBOOLOP(F, OP) \
 template <class X> \
 inline void F (size_t n, bool *r, const X *x) \
 { const X zero = X(); for (size_t i = 0; i < n; i++) r[i] = x[i] OP zero; }
 
 DEFMXUNBOOLOP (mx_inline_iszero, ==)
 DEFMXUNBOOLOP (mx_inline_notzero, !=)
 
@@ -122,16 +129,21 @@ DEFLOGCHKNAN (const FloatComplex&, 0.0f)
 
 template <class X>
 void mx_inline_not (size_t n, bool *r, const X* x)
 {
   for (size_t i = 0; i < n; i++)
     r[i] = ! logical_value (x[i]);
 }
 
+inline void mx_inline_not2 (size_t n, bool *r)
+{
+  for (size_t i = 0; i < n; i++) r[i] = ! r[i];
+}
+
 #define DEFMXBOOLOP(F, NOT1, OP, NOT2) \
 template <class X, class Y> \
 inline void F (size_t n, bool *r, const X *x, const Y *y) \
 { \
   for (size_t i = 0; i < n; i++) \
     r[i] = (NOT1 logical_value (x[i])) OP (NOT2 logical_value (y[i])); \
 } \
 template <class X, class Y> \
@@ -217,16 +229,26 @@ do_mx_unary_op (const XNDA& x,
                 void (*op) (size_t, typename RNDA::element_type *,
                             const typename XNDA::element_type *))
 {
   RNDA r (x.dims ());
   op (r.nelem (), r.fortran_vec (), x.data ());
   return r;
 }
 
+template <class RNDA>
+inline RNDA&
+do_mx_inplace_op (RNDA& r,
+                  void (*op) (size_t, typename RNDA::element_type *))
+{
+  op (r.numel (), r.fortran_vec ());
+  return r;
+}
+
+
 template <class RNDA, class XNDA, class YNDA>
 inline RNDA 
 do_mm_binary_op (const XNDA& x, const YNDA& y,
                  void (*op) (size_t, typename RNDA::element_type *,
                              const typename XNDA::element_type *,
                              const typename YNDA::element_type *),
                  const char *opname)
 {
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,33 @@
+2009-09-03  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov.cc (octave_value::do_non_const_unary_op): Split to
+	genuine/non-genuine case.
+	(octave_value::binary_op_to_assign_op): New method.
+	* ov.h: Declare it.
+	* ov-re-mat.h (octave_matrix::changesign): New method.
+	* ov-flt-re-mat.h (octave_float_matrix::changesign): New method.
+	* ov-cx-mat.h (octave_complex_matrix::changesign): New method.
+	* ov-flt-cx-mat.h (octave_float_complex_matrix::changesign): New
+	method.
+	* ov-intx.h (OCTAVE_VALUE_INT_MATRIX_T::changesign): New method.
+	* ov-bool-mat.h (octave_bool_matrix::invert): New method.
+	* pt-unop.cc (tree_prefix_expression::rvalue1): Use
+	do_non_const_unary_op.
+	* pt-binop.cc (tree_binary_expression::rvalue1): If possible,
+	convert to computed assignment.
+
+	* OPERATORS/op-m-m.cc: Define & install in-place minus operation.
+	* OPERATORS/op-fm-fm.cc: Ditto.
+	* OPERATORS/op-cm-cm.cc: Ditto.
+	* OPERATORS/op-fcm-fcm.cc: Ditto.
+	* OPERATORS/op-int.h: Ditto.
+	* OPERATORS/op-bm-bm.cc: Define & install in-place not operation.
+
 2009-09-03  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-re-mat.h (octave_matrix::increment, octave_matrix::decrement):
 	Use matrix_ref.
 	* ov-flt-re-mat.h (octave_float_matrix::increment,
 	octave_float_matrix::decrement): Use matrix_ref.
 	* ov-intx.h (OCTAVE_VALUE_INT_MATRIX_T::increment,
 	OCTAVE_VALUE_INT_MATRIX_T::decrement):
diff --git a/src/OPERATORS/op-bm-bm.cc b/src/OPERATORS/op-bm-bm.cc
--- a/src/OPERATORS/op-bm-bm.cc
+++ b/src/OPERATORS/op-bm-bm.cc
@@ -50,16 +50,18 @@ along with Octave; see the file COPYING.
 #include "xpow.h"
 
 // unary bool matrix ops.
 
 DEFNDUNOP_OP (not, bool_matrix, bool_array, !)
 DEFNDUNOP_OP (uplus, bool_matrix, array, +)
 DEFNDUNOP_OP (uminus, bool_matrix, array, -)
 
+DEFNCUNOP_METHOD (invert, bool_matrix, invert)
+
 DEFUNOP (transpose, bool_matrix)
 {
   CAST_UNOP_ARG (const octave_bool_matrix&);
 
   if (v.ndims () > 2)
     {
       error ("transpose not defined for N-d objects");
       return octave_value ();
@@ -128,16 +130,18 @@ void
 install_bm_bm_ops (void)
 {
   INSTALL_UNOP (op_not, octave_bool_matrix, not);
   INSTALL_UNOP (op_uplus, octave_bool_matrix, uplus);
   INSTALL_UNOP (op_uminus, octave_bool_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_bool_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_bool_matrix, transpose);
 
+  INSTALL_NCUNOP (op_not, octave_bool_matrix, invert);
+
   INSTALL_BINOP (op_eq, octave_bool_matrix, octave_bool_matrix, eq);
   INSTALL_BINOP (op_ne, octave_bool_matrix, octave_bool_matrix, ne);
 
   INSTALL_BINOP (op_el_and, octave_bool_matrix, octave_bool_matrix, el_and);
   INSTALL_BINOP (op_el_or, octave_bool_matrix, octave_bool_matrix, el_or);
   INSTALL_BINOP (op_el_not_and, octave_bool_matrix, octave_bool_matrix, el_not_and);
   INSTALL_BINOP (op_el_not_or, octave_bool_matrix, octave_bool_matrix, el_not_or);
   INSTALL_BINOP (op_el_and_not, octave_bool_matrix, octave_bool_matrix, el_and_not);
diff --git a/src/OPERATORS/op-cm-cm.cc b/src/OPERATORS/op-cm-cm.cc
--- a/src/OPERATORS/op-cm-cm.cc
+++ b/src/OPERATORS/op-cm-cm.cc
@@ -65,16 +65,17 @@ DEFUNOP (hermitian, complex_matrix)
       return octave_value ();
     }
   else
     return octave_value (v.complex_matrix_value().hermitian ());
 }
 
 DEFNCUNOP_METHOD (incr, complex_matrix, increment)
 DEFNCUNOP_METHOD (decr, complex_matrix, decrement)
+DEFNCUNOP_METHOD (changesign, complex_matrix, changesign)
 
 // complex matrix by complex matrix ops.
 
 DEFNDBINOP_OP (add, complex_matrix, complex_matrix, complex_array, complex_array, +)
 DEFNDBINOP_OP (sub, complex_matrix, complex_matrix, complex_array, complex_array, -)
 
 DEFBINOP_OP (mul, complex_matrix, complex_matrix, *)
 
@@ -181,16 +182,17 @@ install_cm_cm_ops (void)
   INSTALL_UNOP (op_not, octave_complex_matrix, not);
   INSTALL_UNOP (op_uplus, octave_complex_matrix, uplus);
   INSTALL_UNOP (op_uminus, octave_complex_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_complex_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_complex_matrix, hermitian);
 
   INSTALL_NCUNOP (op_incr, octave_complex_matrix, incr);
   INSTALL_NCUNOP (op_decr, octave_complex_matrix, decr);
+  INSTALL_NCUNOP (op_uminus, octave_complex_matrix, changesign);
 
   INSTALL_BINOP (op_add, octave_complex_matrix, octave_complex_matrix, add);
   INSTALL_BINOP (op_sub, octave_complex_matrix, octave_complex_matrix, sub);
   INSTALL_BINOP (op_mul, octave_complex_matrix, octave_complex_matrix, mul);
   INSTALL_BINOP (op_div, octave_complex_matrix, octave_complex_matrix, div);
   INSTALL_BINOP (op_pow, octave_complex_matrix, octave_complex_matrix, pow);
   INSTALL_BINOP (op_ldiv, octave_complex_matrix, octave_complex_matrix, ldiv);
   INSTALL_BINOP (op_trans_mul, octave_complex_matrix, octave_complex_matrix, trans_mul);
diff --git a/src/OPERATORS/op-fcm-fcm.cc b/src/OPERATORS/op-fcm-fcm.cc
--- a/src/OPERATORS/op-fcm-fcm.cc
+++ b/src/OPERATORS/op-fcm-fcm.cc
@@ -65,16 +65,17 @@ DEFUNOP (hermitian, float_complex_matrix
       return octave_value ();
     }
   else
     return octave_value (v.float_complex_matrix_value().hermitian ());
 }
 
 DEFNCUNOP_METHOD (incr, float_complex_matrix, increment)
 DEFNCUNOP_METHOD (decr, float_complex_matrix, decrement)
+DEFNCUNOP_METHOD (changesign, float_complex_matrix, changesign)
 
 // complex matrix by complex matrix ops.
 
 DEFNDBINOP_OP (add, float_complex_matrix, float_complex_matrix, 
 	       float_complex_array, float_complex_array, +)
 DEFNDBINOP_OP (sub, float_complex_matrix, float_complex_matrix, 
 	       float_complex_array, float_complex_array, -)
 
@@ -211,16 +212,17 @@ install_fcm_fcm_ops (void)
   INSTALL_UNOP (op_not, octave_float_complex_matrix, not);
   INSTALL_UNOP (op_uplus, octave_float_complex_matrix, uplus);
   INSTALL_UNOP (op_uminus, octave_float_complex_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_float_complex_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_float_complex_matrix, hermitian);
 
   INSTALL_NCUNOP (op_incr, octave_float_complex_matrix, incr);
   INSTALL_NCUNOP (op_decr, octave_float_complex_matrix, decr);
+  INSTALL_NCUNOP (op_uminus, octave_float_complex_matrix, changesign);
 
   INSTALL_BINOP (op_add, octave_float_complex_matrix, 
 		 octave_float_complex_matrix, add);
   INSTALL_BINOP (op_sub, octave_float_complex_matrix, 
 		 octave_float_complex_matrix, sub);
   INSTALL_BINOP (op_mul, octave_float_complex_matrix, 
 		 octave_float_complex_matrix, mul);
   INSTALL_BINOP (op_div, octave_float_complex_matrix, 
diff --git a/src/OPERATORS/op-fm-fm.cc b/src/OPERATORS/op-fm-fm.cc
--- a/src/OPERATORS/op-fm-fm.cc
+++ b/src/OPERATORS/op-fm-fm.cc
@@ -52,16 +52,17 @@ DEFUNOP (transpose, float_matrix)
       return octave_value ();
     }
   else
     return octave_value (v.float_matrix_value().transpose ());
 }
 
 DEFNCUNOP_METHOD (incr, float_matrix, increment)
 DEFNCUNOP_METHOD (decr, float_matrix, decrement)
+DEFNCUNOP_METHOD (changesign, float_matrix, changesign)
 
 // matrix by matrix ops.
 
 DEFNDBINOP_OP (add, float_matrix, float_matrix, float_array, float_array, +)
 DEFNDBINOP_OP (sub, float_matrix, float_matrix, float_array, float_array, -)
 
 DEFBINOP_OP (mul, float_matrix, float_matrix, *)
 
@@ -183,16 +184,17 @@ install_fm_fm_ops (void)
   INSTALL_UNOP (op_not, octave_float_matrix, not);
   INSTALL_UNOP (op_uplus, octave_float_matrix, uplus);
   INSTALL_UNOP (op_uminus, octave_float_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_float_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_float_matrix, transpose);
 
   INSTALL_NCUNOP (op_incr, octave_float_matrix, incr);
   INSTALL_NCUNOP (op_decr, octave_float_matrix, decr);
+  INSTALL_NCUNOP (op_uminus, octave_float_matrix, changesign);
 
   INSTALL_BINOP (op_add, octave_float_matrix, octave_float_matrix, add);
   INSTALL_BINOP (op_sub, octave_float_matrix, octave_float_matrix, sub);
   INSTALL_BINOP (op_mul, octave_float_matrix, octave_float_matrix, mul);
   INSTALL_BINOP (op_div, octave_float_matrix, octave_float_matrix, div);
   INSTALL_BINOP (op_pow, octave_float_matrix, octave_float_matrix, pow);
   INSTALL_BINOP (op_ldiv, octave_float_matrix, octave_float_matrix, ldiv);
   INSTALL_BINOP (op_lt, octave_float_matrix, octave_float_matrix, lt);
diff --git a/src/OPERATORS/op-int.h b/src/OPERATORS/op-int.h
--- a/src/OPERATORS/op-int.h
+++ b/src/OPERATORS/op-int.h
@@ -693,17 +693,18 @@ octave_value elem_xpow (FloatNDArray a, 
 	error ("transpose not defined for N-d objects"); \
 	return octave_value (); \
       } \
     else \
       return octave_value (v.TYPE ## _array_value().transpose ()); \
   } \
  \
   DEFNCUNOP_METHOD (m_incr, TYPE ## _matrix, increment) \
-  DEFNCUNOP_METHOD (m_decr, TYPE ## _matrix, decrement)
+  DEFNCUNOP_METHOD (m_decr, TYPE ## _matrix, decrement) \
+  DEFNCUNOP_METHOD (m_changesign, TYPE ## _matrix, changesign)
 
 #define OCTAVE_MM_INT_ARITH_OPS(PFX, T1, T2, T3)	\
   /* matrix by matrix ops. */ \
  \
   DEFINTNDBINOP_OP (PFX ## _add, T1 ## matrix, T2 ## matrix, T1 ## array, T2 ## array, +, T3) \
   DEFINTNDBINOP_OP (PFX ## _sub, T1 ## matrix, T2 ## matrix, T1 ## array, T2 ## array, -, T3) \
  \
   /* DEFBINOP_OP (PFX ## _mul, T1 ## matrix, T2 ## matrix, *) */ \
@@ -1091,17 +1092,18 @@ octave_value elem_xpow (FloatNDArray a, 
 #define OCTAVE_INSTALL_M_INT_UNOPS(TYPE) \
   INSTALL_UNOP (op_not, octave_ ## TYPE ## _matrix, m_not); \
   INSTALL_UNOP (op_uplus, octave_ ## TYPE ## _matrix, m_uplus); \
   INSTALL_UNOP (op_uminus, octave_ ## TYPE ## _matrix, m_uminus); \
   INSTALL_UNOP (op_transpose, octave_ ## TYPE ## _matrix, m_transpose); \
   INSTALL_UNOP (op_hermitian, octave_ ## TYPE ## _matrix, m_transpose); \
  \
   INSTALL_NCUNOP (op_incr, octave_ ## TYPE ## _matrix, m_incr); \
-  INSTALL_NCUNOP (op_decr, octave_ ## TYPE ## _matrix, m_decr);
+  INSTALL_NCUNOP (op_decr, octave_ ## TYPE ## _matrix, m_decr); \
+  INSTALL_NCUNOP (op_uminus, octave_ ## TYPE ## _matrix, m_changesign);
 
 #define OCTAVE_INSTALL_MM_INT_ARITH_OPS(PFX, T1, T2)			\
   INSTALL_BINOP (op_add, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _add); \
   INSTALL_BINOP (op_sub, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _sub); \
   /* INSTALL_BINOP (op_mul, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _mul); */ \
   /* INSTALL_BINOP (op_div, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _div); */ \
   INSTALL_BINOP (op_pow, octave_ ## T1 ## matrix, octave_ ## T2 ## matrix, PFX ## _pow); \
   /* INSTALL_BINOP (op_ldiv, octave_ ## T1 ## _matrix, octave_ ## T2 ## _matrix, mm_ldiv); */ \
diff --git a/src/OPERATORS/op-m-m.cc b/src/OPERATORS/op-m-m.cc
--- a/src/OPERATORS/op-m-m.cc
+++ b/src/OPERATORS/op-m-m.cc
@@ -52,16 +52,17 @@ DEFUNOP (transpose, matrix)
       return octave_value ();
     }
   else
     return octave_value (v.matrix_value().transpose ());
 }
 
 DEFNCUNOP_METHOD (incr, matrix, increment)
 DEFNCUNOP_METHOD (decr, matrix, decrement)
+DEFNCUNOP_METHOD (changesign, matrix, changesign)
 
 // matrix by matrix ops.
 
 DEFNDBINOP_OP (add, matrix, matrix, array, array, +)
 DEFNDBINOP_OP (sub, matrix, matrix, array, array, -)
 
 DEFBINOP_OP (mul, matrix, matrix, *)
 
@@ -156,16 +157,17 @@ install_m_m_ops (void)
   INSTALL_UNOP (op_not, octave_matrix, not);
   INSTALL_UNOP (op_uplus, octave_matrix, uplus);
   INSTALL_UNOP (op_uminus, octave_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_matrix, transpose);
 
   INSTALL_NCUNOP (op_incr, octave_matrix, incr);
   INSTALL_NCUNOP (op_decr, octave_matrix, decr);
+  INSTALL_NCUNOP (op_uminus, octave_matrix, changesign);
 
   INSTALL_BINOP (op_add, octave_matrix, octave_matrix, add);
   INSTALL_BINOP (op_sub, octave_matrix, octave_matrix, sub);
   INSTALL_BINOP (op_mul, octave_matrix, octave_matrix, mul);
   INSTALL_BINOP (op_div, octave_matrix, octave_matrix, div);
   INSTALL_BINOP (op_pow, octave_matrix, octave_matrix, pow);
   INSTALL_BINOP (op_ldiv, octave_matrix, octave_matrix, ldiv);
   INSTALL_BINOP (op_lt, octave_matrix, octave_matrix, lt);
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -170,16 +170,19 @@ public:
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const
   { return SparseComplexMatrix (ComplexMatrix (matrix.matrix_value ())); }
 
   SparseBoolMatrix sparse_bool_matrix_value (bool = false) const
   { return SparseBoolMatrix (matrix.matrix_value ()); }
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
+  // Use matrix_ref here to clear index cache.
+  void invert (void) { matrix_ref ().invert (); }
+
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -131,16 +131,18 @@ public:
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const;
 
   octave_value diag (octave_idx_type k = 0) const;
 
   void increment (void) { matrix += Complex (1.0); }
 
   void decrement (void) { matrix -= Complex (1.0); }
 
+  void changesign (void) { matrix.changesign (); }
+
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
diff --git a/src/ov-flt-cx-mat.h b/src/ov-flt-cx-mat.h
--- a/src/ov-flt-cx-mat.h
+++ b/src/ov-flt-cx-mat.h
@@ -129,16 +129,18 @@ public:
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const;
 
   octave_value diag (octave_idx_type k = 0) const;
 
   void increment (void) { matrix += FloatComplex (1.0); }
 
   void decrement (void) { matrix -= FloatComplex (1.0); }
 
+  void changesign (void) { matrix.changesign (); }
+
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap, 
 		    oct_mach_info::float_format fmt);
diff --git a/src/ov-flt-re-mat.h b/src/ov-flt-re-mat.h
--- a/src/ov-flt-re-mat.h
+++ b/src/ov-flt-re-mat.h
@@ -163,16 +163,18 @@ public:
 
   octave_value diag (octave_idx_type k = 0) const;
 
   // Use matrix_ref here to clear index cache.
   void increment (void) { matrix_ref () += 1.0; }
 
   void decrement (void) { matrix_ref () -= 1.0; }
 
+  void changesign (void) { matrix_ref ().changesign (); }
+
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -312,16 +312,24 @@ public:
   void decrement (void)
    { 
      matrix_ref() -= OCTAVE_INT_T (1); 
      if (OCTAVE_INT_T::get_math_trunc_flag ())
        gripe_unop_integer_math_truncated ("--", type_name (). c_str ());
       OCTAVE_INT_T::clear_conv_flag ();
    }
 
+  void changesign (void)
+   { 
+     matrix_ref ().changesign (); 
+     if (OCTAVE_INT_T::get_math_trunc_flag ())
+       gripe_unop_integer_math_truncated ("-", type_name (). c_str ());
+      OCTAVE_INT_T::clear_conv_flag ();
+   }
+
   idx_vector index_vector (void) const 
     { return idx_cache ? *idx_cache : set_idx_cache (idx_vector (matrix)); }
 
   int write (octave_stream& os, int block_size,
 	     oct_data_conv::data_type output_type, int skip,
 	     oct_mach_info::float_format flt_fmt) const
     { return os.write (matrix, block_size, output_type, skip, flt_fmt); }
 
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -177,16 +177,18 @@ public:
 
   octave_value diag (octave_idx_type k = 0) const;
 
   // Use matrix_ref here to clear index cache.
   void increment (void) { matrix_ref () += 1.0; }
 
   void decrement (void) { matrix_ref () -= 1.0; }
 
+  void changesign (void) { matrix_ref ().changesign (); }
+
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -469,16 +469,54 @@ octave_value::assign_op_as_string (assig
 
     default:
       retval = "<unknown>";
     }
 
   return retval;
 }
 
+octave_value::assign_op
+octave_value::binary_op_to_assign_op (binary_op op)
+{
+  assign_op retval;
+
+  switch (op)
+    {
+    case op_add:
+      retval = op_add_eq;
+      break;
+    case op_sub:
+      retval = op_sub_eq;
+      break;
+    case op_mul:
+      retval = op_mul_eq;
+      break;
+    case op_div:
+      retval = op_div_eq;
+      break;
+    case op_el_mul:
+      retval = op_el_mul_eq;
+      break;
+    case op_el_div:
+      retval = op_el_div_eq;
+      break;
+    case op_el_and:
+      retval = op_el_and_eq;
+      break;
+    case op_el_or:
+      retval = op_el_or_eq;
+      break;
+    default:
+      retval = unknown_assign_op;
+    }
+
+  return retval;
+}
+
 octave_value::octave_value (short int i)
   : rep (new octave_scalar (i))
 {
 }
 
 octave_value::octave_value (unsigned short int i)
   : rep (new octave_scalar (i))
 {
@@ -2241,87 +2279,114 @@ gripe_unary_op_conversion_failed (const 
 {
   error ("operator %s: type conversion for `%s' failed",
 	 op.c_str (), tn.c_str ());
 }
 
 const octave_value&
 octave_value::do_non_const_unary_op (unary_op op)
 {
-  octave_value retval;
-
-  int t = type_id ();
-
-  octave_value_typeinfo::non_const_unary_op_fcn f
-    = octave_value_typeinfo::lookup_non_const_unary_op (op, t);
-
-  if (f)
+  if (op == op_incr || op == op_decr)
     {
-      make_unique ();
-
-      try
-	{
-	  f (*rep);
-	}
-      catch (octave_execution_exception)
-	{
-	  gripe_library_execution_error ();
-	}
+      // Genuine.
+      int t = type_id ();
+
+      octave_value_typeinfo::non_const_unary_op_fcn f
+        = octave_value_typeinfo::lookup_non_const_unary_op (op, t);
+
+      if (f)
+        {
+          make_unique ();
+
+          try
+            {
+              f (*rep);
+            }
+          catch (octave_execution_exception)
+            {
+              gripe_library_execution_error ();
+            }
+        }
+      else
+        {
+          octave_base_value::type_conv_fcn cf = numeric_conversion_function ();
+
+          if (cf)
+            {
+              octave_base_value *tmp = cf (*rep);
+
+              if (tmp)
+                {
+                  octave_base_value *old_rep = rep;
+                  rep = tmp;
+
+                  t = type_id ();
+
+                  f = octave_value_typeinfo::lookup_non_const_unary_op (op, t);
+
+                  if (f)
+                    {
+                      try
+                        {
+                          f (*rep);
+                        }
+                      catch (octave_execution_exception)
+                        {
+                          gripe_library_execution_error ();
+                        }
+
+                      if (old_rep && --old_rep->count == 0)
+                        delete old_rep;
+                    }
+                  else
+                    {
+                      if (old_rep)
+                        {
+                          if (--rep->count == 0)
+                            delete rep;
+
+                          rep = old_rep;
+                        }
+
+                      gripe_unary_op (octave_value::unary_op_as_string (op),
+                                      type_name ());
+                    }
+                }
+              else
+                gripe_unary_op_conversion_failed
+                  (octave_value::unary_op_as_string (op), type_name ());
+            }
+          else
+            gripe_unary_op (octave_value::unary_op_as_string (op), type_name ());
+        }
     }
   else
     {
-      octave_base_value::type_conv_fcn cf = numeric_conversion_function ();
-
-      if (cf)
-	{
-	  octave_base_value *tmp = cf (*rep);
-
-	  if (tmp)
-	    {
-	      octave_base_value *old_rep = rep;
-	      rep = tmp;
-
-	      t = type_id ();
-
-	      f = octave_value_typeinfo::lookup_non_const_unary_op (op, t);
-
-	      if (f)
-		{
-		  try
-		    {
-		      f (*rep);
-		    }
-		  catch (octave_execution_exception)
-		    {
-		      gripe_library_execution_error ();
-		    }
-
-		  if (old_rep && --old_rep->count == 0)
-		    delete old_rep;
-		}
-	      else
-		{
-		  if (old_rep)
-		    {
-		      if (--rep->count == 0)
-			delete rep;
-
-		      rep = old_rep;
-		    }
-
-		  gripe_unary_op (octave_value::unary_op_as_string (op),
-				  type_name ());
-		}
-	    }
-	  else
-	    gripe_unary_op_conversion_failed
-	      (octave_value::unary_op_as_string (op), type_name ());
-	}
+      // Non-genuine.
+      int t = type_id ();
+
+      octave_value_typeinfo::non_const_unary_op_fcn f = 0;
+
+      // Only attempt to operate in-place if this variable is unshared.
+      if (rep->count == 1)
+        f = octave_value_typeinfo::lookup_non_const_unary_op (op, t);
+
+      if (f)
+        {
+          try
+            {
+              f (*rep);
+            }
+          catch (octave_execution_exception)
+            {
+              gripe_library_execution_error ();
+            }
+        }
       else
-	gripe_unary_op (octave_value::unary_op_as_string (op), type_name ());
+        *this = do_unary_op (op, *this);
     }
 
   return *this;
 }
 
 #if 0
 static void
 gripe_unary_op_failed_or_no_method (const std::string& on,
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -136,16 +136,18 @@ public:
     op_el_ldiv_eq,
     op_el_pow_eq,
     op_el_and_eq,
     op_el_or_eq,
     num_assign_ops,
     unknown_assign_op
   };
 
+  static assign_op binary_op_to_assign_op (binary_op);
+
   static std::string unary_op_as_string (unary_op);
   static std::string unary_op_fcn_name (unary_op);
 
   static std::string binary_op_as_string (binary_op);
   static std::string binary_op_fcn_name (binary_op);
 
   static std::string binary_op_fcn_name (compound_binary_op);
 
diff --git a/src/pt-binop.cc b/src/pt-binop.cc
--- a/src/pt-binop.cc
+++ b/src/pt-binop.cc
@@ -61,17 +61,22 @@ tree_binary_expression::rvalue1 (int)
       octave_value a = op_lhs->rvalue1 ();
 
       if (! error_state && a.is_defined () && op_rhs)
 	{
 	  octave_value b = op_rhs->rvalue1 ();
 
 	  if (! error_state && b.is_defined ())
 	    {
-	      retval = ::do_binary_op (etype, a, b);
+              octave_value::assign_op aop = octave_value::binary_op_to_assign_op (etype);
+
+              if (aop == octave_value::unknown_assign_op)
+                retval = ::do_binary_op (etype, a, b);
+              else
+                retval = a.assign (aop, b);
 
 	      if (error_state)
 		retval = octave_value ();
 	    }
 	}
     }
 
   return retval;
diff --git a/src/pt-unop.cc b/src/pt-unop.cc
--- a/src/pt-unop.cc
+++ b/src/pt-unop.cc
@@ -84,17 +84,17 @@ tree_prefix_expression::rvalue1 (int)
 	    }
 	}
       else
 	{
 	  octave_value val = op->rvalue1 ();
 
 	  if (! error_state && val.is_defined ())
 	    {
-	      retval = ::do_unary_op (etype, val);
+	      retval = val.do_non_const_unary_op (etype);
 
 	      if (error_state)
 		retval = octave_value ();
 	    }
 	}
     }
 
   return retval;
