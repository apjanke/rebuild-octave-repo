# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1340318256 18000
#      Thu Jun 21 17:37:36 2012 -0500
# Node ID f2117a963c545859cb1b6a8dc71baf32d6fc0786
# Parent  434ffa574c783846c696d68e9ef8ce92553a5267
Place grab/release for assignments

* src/pt-jit.cc (jit_instruction::do_construct_ssa):
  Only do replacement if variable is defined.
  (jit_convert::jit_convert_llvm::visit): Place grab/release.

* src/pt-jit.h (jit_typeinfo::get_grab): New function.
  (jit_assign_base::jit_assign_base): Added another argument to overload.
  (jit_assign::jit_assign): Keep track of previous variable value.

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -1047,17 +1047,17 @@ jit_instruction::short_print (std::ostre
 
 void
 jit_instruction::do_construct_ssa (size_t start, size_t end)
 {
   for (size_t i = start; i < end; ++i)
     {
       jit_value *arg = argument (i);
       jit_variable *var = dynamic_cast<jit_variable *> (arg);
-      if (var)
+      if (var && var->has_top ())
         stash_argument (i, var->top ());
     }
 }
 
 // -------------------- jit_block --------------------
 void
 jit_block::replace_with (jit_value *value)
 {
@@ -2721,16 +2721,34 @@ jit_convert::convert_llvm::visit (jit_er
                                           check.successor_llvm (1));
   check.stash_llvm (br);
 }
 
 void
 jit_convert::convert_llvm::visit (jit_assign& assign)
 {
   assign.stash_llvm (assign.src ()->to_llvm ());
+
+  jit_value *new_value = assign.src ();
+  if (isa<jit_assign_base> (new_value)) // only grab non-temporaries
+    {
+      const jit_function::overload& ol
+        = jit_typeinfo::get_grab (new_value->type ());
+      if (ol.function)
+        create_call (ol, new_value);
+    }
+
+  jit_value *overwrite = assign.overwrite ();
+  if (isa<jit_assign_base> (overwrite))
+    {
+      const jit_function::overload& ol
+        = jit_typeinfo::get_release (overwrite->type ());
+      if (ol.function)
+        create_call (ol, overwrite);
+    }
 }
 
 void
 jit_convert::convert_llvm::visit (jit_argument&)
 {}
 
 llvm::Value *
 jit_convert::convert_llvm::create_call (const jit_function::overload& ol,
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -448,16 +448,21 @@ public:
 
   static const jit_function& binary_op (int op)
   {
     return instance->do_binary_op (op);
   }
 
   static const jit_function& grab (void) { return instance->grab_fn; }
 
+  static const jit_function::overload& get_grab (jit_type *type)
+  {
+    return instance->grab_fn.get_overload (type);
+  }
+
   static const jit_function& release (void)
   {
     return instance->release_fn;
   }
 
   static const jit_function::overload& get_release (jit_type *type)
   {
     return instance->release_fn.get_overload (type);
@@ -1514,18 +1519,18 @@ class
 jit_assign_base : public jit_instruction
 {
 public:
   jit_assign_base (jit_variable *adest) : jit_instruction (), mdest (adest) {}
 
   jit_assign_base (jit_variable *adest, size_t npred) : jit_instruction (npred),
                                                         mdest (adest) {}
 
-  jit_assign_base (jit_variable *adest, jit_value *arg0)
-    : jit_instruction (arg0), mdest (adest) {}
+  jit_assign_base (jit_variable *adest, jit_value *arg0, jit_value *arg1)
+    : jit_instruction (arg0, arg1), mdest (adest) {}
 
   jit_variable *dest (void) const { return mdest; }
 
   virtual void push_variable (void)
   {
     mdest->push (this);
   }
 
@@ -1546,21 +1551,26 @@ private:
   jit_variable *mdest;
 };
 
 class
 jit_assign : public jit_assign_base
 {
 public:
   jit_assign (jit_variable *adest, jit_value *asrc)
-    : jit_assign_base (adest, asrc) {}
+    : jit_assign_base (adest, adest, asrc) {}
+
+  jit_value *overwrite (void) const
+  {
+    return argument (0);
+  }
 
   jit_value *src (void) const
   {
-    return argument (0);
+    return argument (1);
   }
 
   virtual bool infer (void)
   {
     jit_type *stype = src ()->type ();
     if (stype != type())
       {
         stash_type (stype);
