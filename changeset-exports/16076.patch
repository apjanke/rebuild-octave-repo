# HG changeset patch
# User Rik <rik@octave.org>
# Date 1361405507 28800
#      Wed Feb 20 16:11:47 2013 -0800
# Node ID c90c9623b20f297c1404f5f6ccc63f6b8c91216b
# Parent  7cfb186592deb3afd2d7ee823a029187ab4aeba3
newplot.m: Return handle to created axes for Matlab compatibility (Bug #38146)

* newplot.m: Return handle to created axes if nargout > 0.

diff --git a/scripts/plot/newplot.m b/scripts/plot/newplot.m
--- a/scripts/plot/newplot.m
+++ b/scripts/plot/newplot.m
@@ -12,23 +12,27 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} newplot ()
+## @deftypefn  {Function File} {} newplot ()
+## @deftypefnx {Function File} {@var{h} =} newplot ()
 ## Prepare graphics engine to produce a new plot.  This function is
 ## called at the beginning of all high-level plotting functions.
 ## It is not normally required in user programs.
+##
+## The optional return value @var{h} is a graphics handle to the created
+## axes (not figure).
 ## @end deftypefn
 
-function newplot ()
+function h = newplot ()
 
   if (nargin == 0)
     cf = gcf ();
     fnp = get (cf, "nextplot");
     switch (fnp)
       ## FIXME -- probably we should do more than validate the nextplot
       ## property value...
       case "new"
@@ -54,25 +58,29 @@ function newplot ()
       case "replacechildren"
         delete (get (ca, "children"));
       case "replace"
         __go_axes_init__ (ca, "replace");
         __request_drawnow__ ();
       otherwise
         error ("newplot: unrecognized nextplot property for current axes");
     endswitch
+    if (nargout > 0)
+      h = ca;
+    endif
   else
     print_usage ();
   endif
 
 endfunction
 
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   p = plot ([0, 1]);
-%!   newplot;
+%!   ha = newplot ();
+%!   assert (ha, gca);
 %!   assert (isempty (get (gca, "children")));
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
