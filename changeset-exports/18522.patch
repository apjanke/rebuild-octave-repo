# HG changeset patch
# User Lasse Schuirmann <lasse@schuirmann.net> and Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1393229259 -3600
#      Mon Feb 24 09:07:39 2014 +0100
# Node ID bae00174787c12edaa6d8ade38417f92a0ca03ee
# Parent  932aca9a7c57140511065ecc9afcd561c8a5109c
avoid GCC warnings

* pt-funcall.cc (tree_funcall::dup): Delete unused parameter names.
* ov-perm.cc (octave_perm_matrix::save_ascii,
octave_perm_matrix::load_ascii): Delete unused typedef.
* ov-base-diag.cc (octave_base_diag<DMT, MT>::do_index_op): Likewise.

diff --git a/libinterp/octave-value/ov-base-diag.cc b/libinterp/octave-value/ov-base-diag.cc
--- a/libinterp/octave-value/ov-base-diag.cc
+++ b/libinterp/octave-value/ov-base-diag.cc
@@ -95,17 +95,16 @@ octave_base_diag<DMT,MT>::diag (octave_i
 
 
 template <class DMT, class MT>
 octave_value
 octave_base_diag<DMT, MT>::do_index_op (const octave_value_list& idx,
                                         bool resize_ok)
 {
   octave_value retval;
-  typedef typename DMT::element_type el_type;
 
   if (idx.length () == 2 && ! resize_ok)
     {
       idx_vector idx0 = idx(0).index_vector ();
       idx_vector idx1 = idx(1).index_vector ();
 
       if (idx0.is_scalar () && idx1.is_scalar ())
         {
diff --git a/libinterp/octave-value/ov-perm.cc b/libinterp/octave-value/ov-perm.cc
--- a/libinterp/octave-value/ov-perm.cc
+++ b/libinterp/octave-value/ov-perm.cc
@@ -255,34 +255,31 @@ octave_perm_matrix::convert_to_str_inter
                                              char type) const
 {
   return to_dense ().convert_to_str_internal (pad, force, type);
 }
 
 bool
 octave_perm_matrix::save_ascii (std::ostream& os)
 {
-  typedef octave_int<octave_idx_type> idx_int_type;
-
   os << "# size: " << matrix.rows () << "\n";
   os << "# orient: " << (matrix.is_col_perm () ? 'c' : 'r') << '\n';
 
   Array<octave_idx_type> pvec = matrix.pvec ();
   octave_idx_type n = pvec.length ();
   ColumnVector tmp (n);
   for (octave_idx_type i = 0; i < n; i++) tmp(i) = pvec(i) + 1;
   os << tmp;
 
   return true;
 }
 
 bool
 octave_perm_matrix::load_ascii (std::istream& is)
 {
-  typedef octave_int<octave_idx_type> idx_int_type;
   octave_idx_type n;
   bool success = true;
   char orient;
 
   if (extract_keyword (is, "size", n, true)
       && extract_keyword (is, "orient", orient, true))
     {
       bool colp = orient == 'c';
diff --git a/libinterp/parse-tree/pt-funcall.cc b/libinterp/parse-tree/pt-funcall.cc
--- a/libinterp/parse-tree/pt-funcall.cc
+++ b/libinterp/parse-tree/pt-funcall.cc
@@ -61,18 +61,17 @@ tree_funcall::print_raw (std::ostream& o
             os << ", ";
         }
 
       os << ")";
     }
 }
 
 tree_funcall *
-tree_funcall::dup (symbol_table::scope_id,
-                  symbol_table::context_id context) const
+tree_funcall::dup (symbol_table::scope_id, symbol_table::context_id) const
 {
   tree_funcall *new_fc = new tree_funcall (fcn, args, line (), column ());
 
   new_fc->copy_base (*new_fc);
 
   return new_fc;
 }
 
