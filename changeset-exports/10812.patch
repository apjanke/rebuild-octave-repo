# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1279695666 -7200
#      Wed Jul 21 09:01:06 2010 +0200
# Node ID 5b68000faac16c1ab66402dd832de933d77275dd
# Parent  e38c071bbc417ec29a478416d6aa4ce5df105d1a
tips update

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2010-07-21  Jaroslav Hajek  <highegg@gmail.com>
+
+	* interpreter/tips.txi: Update some tips.
+
 2010-07-19  Rik <octave@nomad.inbox5.com>
 
 	* interpreter/mk_doc_cache.m: Use regexp rather than fussing with
 	character arrays.
 
 2010-07-19  Rik <octave@nomad.inbox5.com>
 
 	* interpreter/matrix.txi: Add new function repelems to matrix chapter.
diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
--- a/doc/interpreter/tips.txi
+++ b/doc/interpreter/tips.txi
@@ -104,18 +104,31 @@ This is especially important for loops w
 just the innermost loop to get acceptable performance.  A general rule of thumb is that the
 "order" of the vectorized body should be greater or equal to the "order" of the enclosing loop.
 
 @item
 Use built-in and library functions if possible.  Built-in and compiled functions are very fast.
 Even with a m-file library function, chances are good that it is already optimized, or will be
 optimized more in a future release.
 
+For instance, even better than
+
+@example
+a = b(2:n) - b(1:n-1);
+@end example
+
+is
+
+@example
+a = diff (b);
+@end example
+
+
 @item
-Avoid computing costly intermediate results multiple times.  Octave currently
+Avoid computing costly intermediate results multiple times. Octave currently
 does not eliminate common subexpressions.
 Also, certain internal computation results are cached for variables.
 For instance, if a matrix variable is used multiple times as an index,
 checking the indices (and internal conversion to integers) is only done once.
 
 @item
 Be aware of lazy copies (copy-on-write).  When a copy of an object
 is created, the data is not immediately copied, but rather shared.  The actual
@@ -233,16 +246,17 @@ v = cellfun (@@(x) det(x), a); # compute
 v = cellfun (@@det, a); # faster
 @end group
 @end example
 
 @item
 Octave includes a number of other functions that can replace common types of loops,
 including @code{bsxfun}, @code{arrayfun}, @code{structfun}, @code{accumarray}.
 These functions can take an arbitrary function as a handle.
+Be sure to get familiar with them if you want to become an Octave expert.
 
 @item
 Avoid calling @code{eval} or @code{feval} excessively, because
 they require Octave to parse input or look up the name of a function in
 the symbol table.
 
 If you are using @code{eval} as an exception handling mechanism and not
 because you need to execute some arbitrary text, use the @code{try}
