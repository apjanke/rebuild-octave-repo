# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1432262151 14400
#      Thu May 21 22:35:51 2015 -0400
# Node ID 561af1ab60990a990c70c279475b621846639a83
# Parent  f2bc7d23295d8b205ac5edf75831c02f376ba167
griddata.m: Return values instead of plotting for Matlab compatibility (bug #45125)

* griddata.m: Return interpolated values instead of plotting a mesh for
compatibility with Matlab.  Adjust %!demos to call mesh on the output.
* NEWS: Mention change to griddata for 4.2.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -10,16 +10,20 @@ Summary of important user-visible change
     strings in regular expressions are now interpreted for Matlab compatibility.
 
     octal: '\oNNN' or '\o{NNN}'
     hex  : '\xNN'  or '\x{NN}'
 
  ** mkfifo now interprets the MODE argument as an octal, not decimal, integer.
     This is consistent with the equivalent shell command. 
 
+ ** The griddata function no longer plots the interpolated mesh if no output
+    argument is requested, instead the vector or array of interpolated values
+    is always returned for Matlab compatibility.
+
  ** Other new functions added in 4.2:
 
       psi
 
 
 Summary of important user-visible changes for version 4.0:
 ---------------------------------------------------------
 
diff --git a/scripts/geometry/griddata.m b/scripts/geometry/griddata.m
--- a/scripts/geometry/griddata.m
+++ b/scripts/geometry/griddata.m
@@ -128,57 +128,58 @@ function [rx, ry, rz] = griddata (x, y, 
 
     ## Calculate zi by solving plane equation for xi, yi.
     zi(valid) = -(N(:,1).*xi(:)(valid) + N(:,2).*yi(:)(valid) + D) ./ N(:,3);
 
   else
     error ("griddata: unknown interpolation METHOD");
   endif
 
-  if (nargout == 3)
+  if (nargout > 1)
     rx = xi;
     ry = yi;
     rz = zi;
-  elseif (nargout == 1)
+  else
     rx = zi;
-  elseif (nargout == 0)
-    mesh (xi, yi, zi);
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! x = 2*rand (100,1) - 1;
 %! y = 2*rand (size (x)) - 1;
 %! z = sin (2*(x.^2 + y.^2));
 %! [xx,yy] = meshgrid (linspace (-1,1,32));
-%! griddata (x,y,z,xx,yy);
+%! zz = griddata (x,y,z,xx,yy);
+%! mesh (xx, yy, zz);
 %! title ("nonuniform grid sampled at 100 points");
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! x = 2*rand (1000,1) - 1;
 %! y = 2*rand (size (x)) - 1;
 %! z = sin (2*(x.^2 + y.^2));
 %! [xx,yy] = meshgrid (linspace (-1,1,32));
-%! griddata (x,y,z,xx,yy);
+%! zz = griddata (x,y,z,xx,yy);
+%! mesh (xx, yy, zz);
 %! title ("nonuniform grid sampled at 1000 points");
 
 %!demo
 %! clf;
 %! colormap ("default");
 %! x = 2*rand (1000,1) - 1;
 %! y = 2*rand (size (x)) - 1;
 %! z = sin (2*(x.^2 + y.^2));
 %! [xx,yy] = meshgrid (linspace (-1,1,32));
-%! griddata (x,y,z,xx,yy,"nearest");
+%! zz = griddata (x,y,z,xx,yy,"nearest");
+%! mesh (xx, yy, zz);
 %! title ("nonuniform grid sampled at 1000 points with nearest neighbor");
 
 %!testif HAVE_QHULL
 %! [xx,yy] = meshgrid (linspace (-1,1,32));
 %! x = xx(:);
 %! x = x + 10*(2*round (rand (size (x))) - 1) * eps;
 %! y = yy(:);
 %! y = y + 10*(2*round (rand (size (y))) - 1) * eps;
