# HG changeset patch
# User Rik <rik@octave.org>
# Date 1495415038 25200
#      Sun May 21 18:03:58 2017 -0700
# Node ID fd7a1659461466f4f27b25db100f96cd20374601
# Parent  4396af814c6ae1d15010e9b20f235648416db259
Don't iterate over empty for loop expressions (bug #50893).

* pt-eval.cc (tree_evaluator::visit_simple_for_command): Don't execute
for loop for empty expressions.  However, do assign an empty value to
loop variable.

* test/for.tst: Add BIST tests for bug #50893.

diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -787,25 +787,26 @@ namespace octave
         // A matrix or cell is reshaped to 2 dimensions and iterated by
         // columns.
 
         dim_vector dv = rhs.dims ().redim (2);
 
         octave_idx_type nrows = dv(0);
         octave_idx_type steps = dv(1);
 
-        if (steps > 0)
+        octave_value arg = rhs;
+        if (rhs.ndims () > 2)
+          arg = arg.reshape (dv);
+
+        if (nrows > 0 && steps > 0)
           {
-            octave_value arg = rhs;
-            if (rhs.ndims () > 2)
-              arg = arg.reshape (dv);
+            octave_value_list idx;
+            octave_idx_type iidx;
 
             // for row vectors, use single index to speed things up.
-            octave_value_list idx;
-            octave_idx_type iidx;
             if (nrows == 1)
               {
                 idx.resize (1);
                 iidx = 0;
               }
             else
               {
                 idx.resize (2);
@@ -822,16 +823,21 @@ namespace octave
                 ult.assign (octave_value::op_asn_eq, val);
 
                 if (loop_body)
                   loop_body->accept (*this);
 
                 if (quit_loop_now ())
                   break;
               }
+          } 
+        else
+          {
+            // Handle empty cases, while still assigning to loop var.
+            ult.assign (octave_value::op_asn_eq, arg);
           }
       }
     else
       error ("invalid type in for loop expression near line %d, column %d",
              cmd.line (), cmd.column ());
   }
 
   void
diff --git a/test/for.tst b/test/for.tst
--- a/test/for.tst
+++ b/test/for.tst
@@ -117,8 +117,40 @@
 %! assert (__prog_output_assert__ ("1"));
 
 %!test
 %! parfor i = 1:4
 %!   __printf_assert__ ("%d", i);
 %! endparfor
 %! __printf_assert__ ("\n");
 %! assert (__prog_output_assert__ ("1234"));
+
+%!test <50893>
+%! cnt = 0; 
+%! for k = zeros (0,3);
+%!   cnt++;
+%! endfor
+%! assert (cnt, 0);
+%! assert (k, zeros (0,1));
+
+%!test <50893>
+%! cnt = 0; 
+%! for k = zeros (3,0);
+%!   cnt++;
+%! endfor
+%! assert (cnt, 0);
+%! assert (k, zeros (1,0));
+
+%!test <50893>
+%! cnt = 0; 
+%! for k = zeros (3,0, "uint32");
+%!   cnt++;
+%! endfor
+%! assert (cnt, 0);
+%! assert (k, zeros (1,0, "uint32"));
+
+%!test <50893>
+%! cnt = 0; 
+%! for k = cell (0,3);
+%!   cnt++;
+%! endfor
+%! assert (cnt, 0);
+%! assert (k, cell (0,1));
