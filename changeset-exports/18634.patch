# HG changeset patch
# User Rik <rik@octave.org>
# Date 1396816643 25200
#      Sun Apr 06 13:37:23 2014 -0700
# Branch gui-release
# Node ID 5b6901b061065a54e690285bdcfb856f445bec0c
# Parent  c7df983b003a164c4f86de3a0256238fb486c77a
# Parent  5fe907167520ba2eef3299834fe5bd4555e10915
maint: Periodic merge of stable to gui-release.

diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
@@ -264,19 +264,19 @@ static void maybeSwapPoints (QPoint& beg
   if (end.y () < begin.y ()
       || (end.y () == begin.y () && end.x () < begin.x ()))
     qSwap (begin, end);
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 QConsolePrivate::QConsolePrivate (QWinTerminalImpl* parent, const QString& cmd)
-  : q (parent), m_command (cmd), m_hasBlinkingCursor (true),
-    m_cursorType (BlockCursor), m_beginSelection (0, 0),
-    m_endSelection (0, 0), m_settingSelection (false),
+  : q (parent), m_command (cmd), m_cursorBlinking (false),
+    m_hasBlinkingCursor (true), m_cursorType (BlockCursor), 
+    m_beginSelection (0, 0), m_endSelection (0, 0), m_settingSelection (false),
     m_process (NULL), m_inWheelEvent (false)
 {
   log (NULL);
 
   // Possibly detach from any existing console
   log ("Detaching from existing console (if any)...\n");
   FreeConsole ();
   log ("Closing standard IO...\n");
diff --git a/liboctave/util/oct-inttypes.cc b/liboctave/util/oct-inttypes.cc
--- a/liboctave/util/oct-inttypes.cc
+++ b/liboctave/util/oct-inttypes.cc
@@ -794,9 +794,28 @@ INSTANTIATE_INTTYPE (uint64_t);
 %! a = int64 (-2**60) + 2; assert (1.25*a == (5*a)/4);
 %!test
 %! a = uint64 (2**61) + 2; assert (1.25*a == (5*a)/4);
 %!assert (int32 (2**31+0.5), intmax ("int32"))
 %!assert (int32 (-2**31-0.5), intmin ("int32"))
 %!assert ((int64 (2**62)+1)**1, int64 (2**62)+1)
 %!assert ((int64 (2**30)+1)**2, int64 (2**60+2**31) + 1)
 
+%!assert (uint8 (char (128)), uint8 (128));
+%!assert (uint8 (char (255)), uint8 (255));
+%!assert (int8 (char (128)), int8 (128));
+%!assert (int8 (char (255)), int8 (255));
+
+%!assert (uint16 (char (128)), uint16 (128));
+%!assert (uint16 (char (255)), uint16 (255));
+%!assert (int16 (char (128)), int16 (128));
+%!assert (int16 (char (255)), int16 (255));
+
+%!assert (uint32 (char (128)), uint32 (128));
+%!assert (uint32 (char (255)), uint32 (255));
+%!assert (int32 (char (128)), int32 (128));
+%!assert (int32 (char (255)), int32 (255));
+
+%!assert (uint64 (char (128)), uint64 (128));
+%!assert (uint64 (char (255)), uint64 (255));
+%!assert (int64 (char (128)), int64 (128));
+%!assert (int64 (char (255)), int64 (255));
 */
diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -832,16 +832,21 @@ octave_int : public octave_int_base<T>
 {
 public:
   typedef T val_type;
 
   octave_int (void) : ival () { }
 
   octave_int (T i) : ival (i) { }
 
+  // Always treat characters as unsigned.
+  octave_int (char c)
+    : ival (octave_int_base<T>::truncate_int (static_cast<unsigned char> (c)))
+  { }
+
   octave_int (double d) : ival (octave_int_base<T>::convert_real (d)) { }
 
   octave_int (float d) : ival (octave_int_base<T>::convert_real (d)) { }
 
 #ifdef OCTAVE_INT_USE_LONG_DOUBLE
   octave_int (long double d) : ival (octave_int_base<T>::convert_real (d)) { }
 #endif
 
diff --git a/scripts/general/interp1.m b/scripts/general/interp1.m
--- a/scripts/general/interp1.m
+++ b/scripts/general/interp1.m
@@ -242,30 +242,31 @@ function yi = interp1 (x, y, varargin)
         yi = pp;
       else
         yi = ppval (pp, reshape (xi, szx));
       endif
 
     case "linear"
 
       xx = x;
+      nxx = nx;
       yy = y;
-      nxx = nx;
+      dy = diff (yy);
       if (have_jumps)
         ## Omit zero-size intervals.
-        yy(jumps, :) = [];
         xx(jumps) = [];
         nxx = rows (xx);
+        yy(jumps, :) = [];
+        dy(jumps, :) = [];
       endif
 
-      dy = diff (yy);
       dx = diff (xx);
       dx = repmat (dx, [1 size(dy)(2:end)]);
 
-      coefs = [(dy./dx).'(:), yy(1:nxx-1, :).'(:)];
+      coefs = [(dy./dx).', yy(1:nxx-1, :).'];
 
       pp = mkpp (xx, coefs, szy(2:end));
       pp.orient = "first";
 
       if (ispp)
         yi = pp;
       else
         yi = ppval (pp, reshape (xi, szx));
@@ -626,18 +627,18 @@ endfunction
 %!assert (interp1 (1:2:6,1:2:6,1.4,"*spline"), 1.4)
 
 %!assert (interp1 ([3,2,1],[3,2,2],2.5), 2.5)
 
 %!assert (interp1 ([4,4,3,2,0],[0,1,4,2,1],[1.5,4,4.5], "linear"), [1.75,1,NA])
 %!assert (interp1 (0:4, 2.5), 1.5)
 
 ## Left and Right discontinuities
-%!assert (interp1 ([1,2,2,3,4],[0,1,4,2,1],[-1,1.5,2,2.5,3.5], "linear", "extrap", "right"), [-8,2,4,3,1.5])
-%!assert (interp1 ([1,2,2,3,4],[0,1,4,2,1],[-1,1.5,2,2.5,3.5], "linear", "extrap", "left"), [-2,0.5,1,1.5,1.5])
+%!assert (interp1 ([1,2,2,3,4],[0,1,4,2,1],[-1,1.5,2,2.5,3.5], "linear", "extrap", "right"), [-2,0.5,4,3,1.5])
+%!assert (interp1 ([1,2,2,3,4],[0,1,4,2,1],[-1,1.5,2,2.5,3.5], "linear", "extrap", "left"), [-2,0.5,1,3,1.5])
 
 %% Test input validation
 %!error interp1 ()
 %!error interp1 (1,2,3,4,5,6,7)
 %!error <table too short> interp1 (1,1,1, "linear")
 %!error <table too short> interp1 (1,1,1, "*nearest")
 %!error <table too short> interp1 (1,1,1, "*linear")
 %!warning <multiple discontinuities> interp1 ([1 1 1 2], [1 2 3 4], 1);
diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -179,17 +179,17 @@ function h = __img__ (hax, do_new, x, y,
   h = __go_image__ (hax, "cdata", img, "xdata", xdata, "ydata", ydata,
                          "cdatamapping", "direct", varargin{:});
 
   if (do_new && ! ishold (hax))
     ## Set axis properties for new images
 
     if (! isempty (img))
       if (isscalar (get (hax, "children")))
-        axis (hax, "image")
+        axis (hax, "tight");
       endif
 
       if (ndims (img) == 3)
         if (isinteger (img))
           cls = class (img);
           mn = intmin (cls);
           mx = intmax (cls);
           set (hax, "clim", double ([mn, mx]));
diff --git a/scripts/image/imagesc.m b/scripts/image/imagesc.m
--- a/scripts/image/imagesc.m
+++ b/scripts/image/imagesc.m
@@ -95,18 +95,16 @@ function h = imagesc (varargin)
 
     if (do_new)
       htmp = image (x, y, img, "cdatamapping", "scaled", varargin{chararg:end});
     else
       htmp = image ("cdatamapping", "scaled", varargin{:});
     endif
 
     if (do_new && ! ishold (hax))
-      ## Turn off axis equal which is set by image() call
-      axis ("normal");
       ## use given climits or guess them from the matrix
       if (numel (climits) == 2 && climits(1) <= climits(2))
         set (hax, "clim", climits);
       elseif (! isempty (climits))
         error ("imagesc: CLIMITS must be in form [lo, hi]");
       endif
     endif
   unwind_protect_cleanup
