# HG changeset patch
# User Rik <rik@octave.org>
# Date 1483740044 28800
#      Fri Jan 06 14:00:44 2017 -0800
# Node ID 624f76f2ca512992e7b09d3d3ee74c7c32167da8
# Parent  ee9aa83dce51fc1502af73b8f1f1410e5ec157ad
configure.ac: Use a common style for messages.

* configure.ac: Use a common style for messages.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -360,17 +360,17 @@ if test $ENABLE_64 = yes; then
   fi
 else
   OCTAVE_IDX_TYPE=int32_t
 fi
 
 AC_SUBST(ENABLE_64)
 if test $ENABLE_64 = yes; then
   AC_DEFINE(OCTAVE_ENABLE_64, 1,
-    [Define to 1 if using 64-bit integers for array dimensions and indexing.])
+    [Define to 1 to use 64-bit integers for array dimensions and indexing.])
 fi
 
 AC_SUBST(OCTAVE_IDX_TYPE)
 AC_DEFINE_UNQUOTED(OCTAVE_IDX_TYPE, [$OCTAVE_IDX_TYPE],
   [Define to the type of octave_idx_type (64 or 32 bit signed integer).])
 
 ### It seems that there are some broken inline assembly functions in
 ### the GNU libc.  Since I'm not sure how to test whether we are using
@@ -1112,36 +1112,36 @@ dyld_api=no
 
 if test $SHARED_LIBS = yes || test $ENABLE_DYNAMIC_LINKING = yes; then
 
   case $lt_cv_dlopen in
     dlopen)
       dlopen_api=yes
       DL_API_MSG="(dlopen)"
       AC_DEFINE(HAVE_DLOPEN_API, 1,
-        [Define to 1 if your system has dlopen, dlsym, dlerror, and dlclose for dynamic linking.])
+        [Define to 1 if system has dlopen, dlsym, dlerror, and dlclose for dynamic linking.])
       OCTAVE_CXX_FLAG([-rdynamic], [RDYNAMIC_FLAG=-rdynamic])
     ;;
     shl_load)
       shl_load_api=yes
       DL_API_MSG="(shl_load)"
       AC_DEFINE(HAVE_SHL_LOAD_API, 1,
-        [Define to 1 if your system has shl_load and shl_findsym for dynamic linking.])
+        [Define to 1 if system has shl_load and shl_findsym for dynamic linking.])
     ;;
     LoadLibrary)
       loadlibrary_api=yes
       DL_API_MSG="(LoadLibrary)"
       AC_DEFINE(HAVE_LOADLIBRARY_API, 1,
-        [Define to 1 if your system has LoadLibrary for dynamic linking.])
+        [Define to 1 if system has LoadLibrary for dynamic linking.])
     ;;
     dyld)
       dyld_api=yes
       DL_API_MSG="(dyld)"
       AC_DEFINE(HAVE_DYLD_API, 1,
-        [Define to 1 if your system has dyld for dynamic linking.])
+        [Define to 1 if system has dyld for dynamic linking.])
     ;;
   esac
 
   DL_LIBS="$lt_cv_dlopen_libs"
   AC_SUBST(DL_LIBS)
 
   ## Disable dynamic linking if capability is not present.
   if test $dlopen_api = yes \
@@ -1224,17 +1224,17 @@ AC_SUBST(MKOCTFILE_RANLIB)
 ### necessary for non-x87 targets or when using modern SSE math.
 ENABLE_FLOAT_TRUNCATE=yes
 AC_ARG_ENABLE([float-truncate],
   [AS_HELP_STRING([--disable-float-truncate],
     [truncate intermediate FP results])],
   [if test "$enableval" = no; then ENABLE_FLOAT_TRUNCATE=no; fi], [])
 if test $ENABLE_FLOAT_TRUNCATE = yes; then
   AC_DEFINE(OCTAVE_ENABLE_FLOAT_TRUNCATE, 1,
-    [Define to 1 if you need to truncate intermediate FP results.])
+    [Define to 1 to truncate intermediate FP results.])
 fi
 
 ### Determine extra CFLAGS that may be necessary for Octave.
 
 ## On Intel systems with gcc, we may need to compile with -mieee-fp
 ## to get full support for IEEE floating point.
 ##
 ## On Alpha/OSF systems, we need -mieee.
@@ -1555,30 +1555,30 @@ OCTAVE_CHECK_LIB(klu, KLU,
   [], [don't use KLU library, disable some sparse matrix functionality])
 
 ### Check for SUNDIALS_IDA library and header.
 save_CPPFLAGS="$CPPFLAGS"
 save_LIBS="$LIBS"
 CPPFLAGS="$KLU_CPPFLAGS $CPPFLAGS"
 LIBS="$KLU_LDFLAGS $KLU_LIBS $LIBS"
 OCTAVE_CHECK_LIB(sundials_ida, SUNDIALS_IDA,
-  [SUNDIALS_IDA library configured with klu not found. Solvers ode15i and ode15s will be disabled.],
+  [SUNDIALS_IDA library configured with klu not found.  Solvers ode15i and ode15s will be disabled.],
   [ida/ida.h ida.h], [IDAKLU], [], [],
   [warn_sundials_ida=
    OCTAVE_CHECK_SIZEOF_SUNDIALS_IDA_REALTYPE])
 LIBS="$save_LIBS"
 CPPFLAGS="$save_CPPFLAGS"
 
 ## Additional check for sundials_nvecserial library
 OCTAVE_CHECK_LIB(sundials_nvecserial, SUNDIALS_NVECSERIAL,
-  [SUNDIALS_NVECSERIAL library not found. Solvers ode15i and ode15s will be disabled.],
+  [SUNDIALS_NVECSERIAL library not found.  Solvers ode15i and ode15s will be disabled.],
   [nvector/nvector_serial.h nvector_serial.h ], [N_VNew_Serial],[],[],[])
 
 if test -n "$SUNDIALS_IDA_LIBS" && test -n "$SUNDIALS_NVECSERIAL_LIBS" && test $octave_cv_sizeof_ida_double = yes; then
-  AC_DEFINE(HAVE_SUNDIALS, 1, [Define if you have both sundials_ida and sundials_nvecserial libraries.])
+  AC_DEFINE(HAVE_SUNDIALS, 1, [Define to 1 if both SUNDIALS_IDA and SUNDIALS_NVECSERIAL are available.])
 fi
 
 ### Check for GLPK library and header.
 
 save_CPPFLAGS="$CPPFLAGS"
 save_LIBS="$LIBS"
 CPPFLAGS="$Z_CPPFLAGS $CPPFLAGS"
 LIBS="$Z_LDFLAGS $Z_LIBS $LIBS"
@@ -1719,17 +1719,17 @@ fi
 AC_SUBST(MAGICK_CPPFLAGS)
 AC_SUBST(MAGICK_LDFLAGS)
 AC_SUBST(MAGICK_LIBS)
 
 ### Check for X11 libraries
 
 AC_PATH_X
 if test "$have_x" = yes; then
-  AC_DEFINE(HAVE_X_WINDOWS, 1, [Define to 1 if you have X11.])
+  AC_DEFINE(HAVE_X_WINDOWS, 1, [Define to 1 if X11 is available.])
 
   if test "$x_includes" != "NONE"; then
     X11_INCFLAGS="$x_includes"
   fi
   AC_SUBST(X11_INCFLAGS)
 
   if test -z "$x_libraries"; then
     AC_CHECK_LIB([X11], XrmInitialize, [X11_LIBS="-lX11"], [X11_LIBS=])
@@ -1778,17 +1778,17 @@ fi
 warn_freetype=""
 PKG_CHECK_MODULES([FT2], [freetype2], [
   min_ft2_version=9.03
   AC_MSG_CHECKING([for FreeType2 version >= $min_ft2_version])
   $PKG_CONFIG freetype2 --atleast-version=$min_ft2_version
   ac_status=$?
   if test "$ac_status" = 0; then
     AC_MSG_RESULT(yes)
-    AC_DEFINE(HAVE_FREETYPE, 1, [Define to 1 if you have Freetype library.])
+    AC_DEFINE(HAVE_FREETYPE, 1, [Define to 1 if Freetype is available.])
     save_LIBS="$LIBS"
     LIBS="$FT2_LIBS $LIBS"
     AC_CHECK_FUNCS([FT_Reference_Face])
     LIBS="$save_LIBS"
   else
     AC_MSG_RESULT(no)
     warn_freetype="FreeType library >= 9.03 not found.  OpenGL graphics will not be fully functional."
   fi],
@@ -1804,29 +1804,29 @@ else
   AC_SUBST(FT2_CPPFLAGS)
 fi
 
 ## Check for Xft library (when using X11)
 
 warn_xft=""
 if test "$have_x" = yes; then
   PKG_CHECK_MODULES(XFT, [xft],
-    [AC_DEFINE(HAVE_XFT, 1, [Define to 1 if Xft is present.])],
+    [AC_DEFINE(HAVE_XFT, 1, [Define to 1 if Xft is available.])],
     [warn_xft="Xft library not found.  OpenGL graphics will not be fully functional."])
 fi
 
 if test -n "$warn_xft"; then
   OCTAVE_CONFIGURE_WARNING([warn_xft])
 fi
 
 ## Check for fontconfig library
 
 warn_fontconfig=""
 PKG_CHECK_MODULES(FONTCONFIG, [fontconfig],
-  [AC_DEFINE(HAVE_FONTCONFIG, 1, [Define to 1 if fontconfig is present.])],
+  [AC_DEFINE(HAVE_FONTCONFIG, 1, [Define to 1 if fontconfig is available.])],
   [warn_fontconfig="Fontconfig library not found.  OpenGL graphics will not be fully functional."])
 
 if test -n "$warn_fontconfig"; then
   OCTAVE_CONFIGURE_WARNING([warn_fontconfig])
 else
   FONTCONFIG_CPPFLAGS="$FONTCONFIG_CFLAGS"
   ## Alias CPPFLAGS to CFLAGS.  This is closer to the true meaning
   ## of `pkg-config --cflags` output.
@@ -2238,17 +2238,17 @@ AC_CHECK_HEADERS([conio.h], have_conio_h
 if test $have_termios_h != yes \
     && test $have_termio_h != yes \
     && test $have_sgtty_h != yes; then
   AC_MSG_WARN([I couldn't find termios.h, termio.h, or sgtty.h!])
 fi
 
 ## For MSVC compilers, avoid #define of min/max from windows.h header
 if test $have_msvc = yes; then
-  AC_DEFINE(NOMINMAX, 1, [Define to 1 if you want to avoid min/max macro definition in Windows headers.])
+  AC_DEFINE(NOMINMAX, 1, [Define to 1 to avoid min/max macro definition in Windows headers.])
 fi
 
 ### Determine types and size of types.
 
 AC_TYPE_INT64_T
 AC_TYPE_MODE_T
 AC_TYPE_OFF_T
 AC_TYPE_PID_T
@@ -2478,17 +2478,17 @@ case $host_os in
   ;;
 esac
 
 ## Cygwin kluge for getrusage.
 AC_CHECK_FUNCS([getrusage])
 case $host_os in
   cygwin*)
     AC_DEFINE(RUSAGE_TIMES_ONLY, 1,
-      [Define to 1 if your struct rusage only has time information.])
+      [Define to 1 if the struct rusage only has time information.])
   ;;
 esac
 
 ## Check for CGDisplayBitsPerPixel function on Mac OSX systems with Carbon
 if test $have_framework_carbon = yes; then
   OCTAVE_CARBON_CGDISPLAYBITSPERPIXEL
 fi
 
