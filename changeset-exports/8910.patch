# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1236238492 -3600
#      Thu Mar 05 08:34:52 2009 +0100
# Node ID 6e9f26506804a46ceb401c7da565bfdf84d5d425
# Parent  52596fe9f17806840d5a8d06448a187de78efb54
optimize diag -> sparse and perm -> sparse conversions

diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -141,30 +141,31 @@ SparseComplexMatrix::SparseComplexMatrix
   for (octave_idx_type i = 0; i < nz; i++)
     {
       data (i) = Complex (a.data (i));
       ridx (i) = a.ridx (i);
     }
 }
 
 SparseComplexMatrix::SparseComplexMatrix (const ComplexDiagMatrix& a)
-  : MSparse<Complex> (a.rows (), a.cols (), a.nnz ())
-{
-  octave_idx_type nz = a.nnz (), l = a.length ();
-  for (octave_idx_type i = 0, j = 0; i < l; i++)
+  : MSparse<Complex> (a.rows (), a.cols (), a.length ())
+{
+  octave_idx_type j = 0, l = a.length ();
+  for (octave_idx_type i = 0; i < l; i++)
     {
-      if (a(i, i) != Complex (0.0, 0.0))
+      cidx (i) = j;
+      if (a(i, i) != 0.0)
         {
           data (j) = a(i, i);
           ridx (j) = i;
-          cidx (j) = j;
           j++;
         }
     }
-  cidx (nz) = nz;
+  for (octave_idx_type i = l; i <= a.cols (); i++)
+    cidx(i) = j;
 }
 bool
 SparseComplexMatrix::operator == (const SparseComplexMatrix& a) const
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
   octave_idx_type nz = nnz ();
   octave_idx_type nr_a = a.rows ();
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2009-03-05  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dSparse.h (SparseMatrix::SparseMatrix(const PermMatrix&)): New
+	constructor.
+	(SparseMatrix::SparseMatrix(const DiagMatrix&)): Fix implementation.
+	* CSparse.h (SparseComplexMatrix::SparseComplexMatrix(const ComplexDiagMatrix&)): 
+	Fix implementation.
+
 2009-03-04  Jaroslav Hajek  <highegg@gmail.com>
 
 	* PermMatrix.h (PermMatrix::elem): Fix comparisons.
 
 2009-03-03  Jaroslav Hajek  <highegg@gmail.com>
 
 	* lo-mappers.cc (xmin (float, float), xmax (float, float)): Simplify.
 
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -136,30 +136,51 @@ SparseMatrix::SparseMatrix (const Sparse
   for (octave_idx_type i = 0; i < nz; i++)
     {
       data (i) = a.data (i);
       ridx (i) = a.ridx (i);
     }
 }
 
 SparseMatrix::SparseMatrix (const DiagMatrix& a)
-  : MSparse<double> (a.rows (), a.cols (), a.nnz ())
-{
-  octave_idx_type nz = a.nnz (), l = a.length ();
-  for (octave_idx_type i = 0, j = 0; i < l; i++)
+  : MSparse<double> (a.rows (), a.cols (), a.length ())
+{
+  octave_idx_type j = 0, l = a.length ();
+  for (octave_idx_type i = 0; i < l; i++)
     {
+      cidx (i) = j;
       if (a(i, i) != 0.0)
         {
           data (j) = a(i, i);
           ridx (j) = i;
-          cidx (j) = j;
           j++;
         }
     }
-  cidx (nz) = nz;
+  for (octave_idx_type i = l; i <= a.cols (); i++)
+    cidx(i) = j;
+}
+
+SparseMatrix::SparseMatrix (const PermMatrix& a)
+  : MSparse<double> (a.rows (), a.cols (), a.rows ())
+{
+  octave_idx_type n = a.rows ();
+  for (octave_idx_type i = 0; i <= n; i++) 
+    cidx (i) = i;
+  const Array<octave_idx_type> pv = a.pvec ();
+
+  if (a.is_row_perm ())
+    {
+      for (octave_idx_type i = 0; i < n; i++)
+        ridx (i) = pv (i);
+    }
+  else
+    {
+      for (octave_idx_type i = 0; i < n; i++)
+        ridx (pv (i)) = i;
+    }
 }
 
 bool
 SparseMatrix::operator == (const SparseMatrix& a) const
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
   octave_idx_type nz = nnz ();
diff --git a/liboctave/dSparse.h b/liboctave/dSparse.h
--- a/liboctave/dSparse.h
+++ b/liboctave/dSparse.h
@@ -78,16 +78,18 @@ SparseMatrix : public MSparse<double>
 
   explicit SparseMatrix (const Array<double> a, const Array<double>& r, 
 			 const Array<double>& c, octave_idx_type nr = -1, 
 			 octave_idx_type nc = -1, bool sum_terms = true)
     : MSparse<double> (a, r, c, nr, nc, sum_terms) { }
 
   explicit SparseMatrix (const DiagMatrix& a);
 
+  explicit SparseMatrix (const PermMatrix& a);
+
   SparseMatrix (octave_idx_type r, octave_idx_type c, octave_idx_type num_nz) : MSparse<double> (r, c, num_nz) { }
 
   SparseMatrix& operator = (const SparseMatrix& a)
     {
       MSparse<double>::operator = (a);
       return *this;
     }
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-03-05  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/sparse.cc (Fsparse): Handle diagonal and permutation
+	matrices.
+
 2009-03-03  John W. Eaton  <jwe@octave.org>
 
 	* ov-struct.cc (octave_struct::save_ascii,
 	octave_struct::save_binary, octave_struct::save_hdf5):
 	Preserve order of structure fields.
 	* ls-mat5.cc (save_mat5_binary_element): Likewise.
 
 	* symtab.h (symbol_table::do_inherit): Only inherit values for
diff --git a/src/DLD-FUNCTIONS/sparse.cc b/src/DLD-FUNCTIONS/sparse.cc
--- a/src/DLD-FUNCTIONS/sparse.cc
+++ b/src/DLD-FUNCTIONS/sparse.cc
@@ -141,16 +141,34 @@ to have a common size.\n\
 	       retval = new octave_sparse_bool_matrix (sm);
 	     }
 	   else
 	     {
 	       SparseMatrix sm = arg.sparse_matrix_value ();
 	       retval = new octave_sparse_matrix (sm);
 	     }
 	 }
+       else if (arg.is_diag_matrix ())
+         {
+           if (arg.is_complex_type ())
+             {
+	       SparseComplexMatrix sm = arg.sparse_complex_matrix_value ();
+	       retval = new octave_sparse_complex_matrix (sm);
+             }
+           else
+             {
+	       SparseMatrix sm = arg.sparse_matrix_value ();
+	       retval = new octave_sparse_matrix (sm);
+             }
+         }
+       else if (arg.is_perm_matrix ())
+         {
+           SparseMatrix sm = arg.sparse_matrix_value ();
+           retval = new octave_sparse_matrix (sm);
+         }
        else
 	 {
 	   if (use_complex) 
 	     {
 	       SparseComplexMatrix sm (args (0).complex_matrix_value ());
 	       if (error_state) 
 		 return retval;
 	       retval = new octave_sparse_complex_matrix (sm);
diff --git a/src/ov-perm.cc b/src/ov-perm.cc
--- a/src/ov-perm.cc
+++ b/src/ov-perm.cc
@@ -207,32 +207,41 @@ octave_perm_matrix::float_complex_value 
 
 #define FORWARD_MATRIX_VALUE(TYPE, PREFIX) \
 TYPE \
 octave_perm_matrix::PREFIX ## _value (bool frc_str_conv) const \
 { \
   return to_dense ().PREFIX ## _value (frc_str_conv); \
 }
 
+SparseMatrix
+octave_perm_matrix::sparse_matrix_value (bool) const
+{
+  return SparseMatrix (matrix);
+}
+
+SparseComplexMatrix
+octave_perm_matrix::sparse_complex_matrix_value (bool) const
+{
+  return SparseComplexMatrix (sparse_matrix_value ());
+}
+
 FORWARD_MATRIX_VALUE (Matrix, matrix)
 FORWARD_MATRIX_VALUE (FloatMatrix, float_matrix)
 FORWARD_MATRIX_VALUE (ComplexMatrix, complex_matrix)
 FORWARD_MATRIX_VALUE (FloatComplexMatrix, float_complex_matrix)
 
 FORWARD_MATRIX_VALUE (NDArray, array)
 FORWARD_MATRIX_VALUE (FloatNDArray, float_array)
 FORWARD_MATRIX_VALUE (ComplexNDArray, complex_array)
 FORWARD_MATRIX_VALUE (FloatComplexNDArray, float_complex_array)
 
 FORWARD_MATRIX_VALUE (boolNDArray, bool_array)
 FORWARD_MATRIX_VALUE (charNDArray, char_array)
 
-FORWARD_MATRIX_VALUE (SparseMatrix, sparse_matrix)
-FORWARD_MATRIX_VALUE (SparseComplexMatrix, sparse_complex_matrix)
-
 idx_vector
 octave_perm_matrix::index_vector (void) const
 {
   return to_dense ().index_vector ();
 }
 
 octave_value
 octave_perm_matrix::convert_to_str_internal (bool pad, bool force, char type) const
