# HG changeset patch
# User Rik <rik@octave.org>
# Date 1355860497 28800
#      Tue Dec 18 11:54:57 2012 -0800
# Node ID 59b6c6aee0426b6486e00d909e1a00af51179acc
# Parent  f28b3dcbaa9ad6c5819740f7ddd04f7871ff1374
Don't box return values from javaObject.  Always return a Java object.

* libinterp/octave-value/ov-java.cc(do_javaObject): Don't call box()
on newly created Java object.

* scripts/general/fieldnames.m: Work-around bug with java.lang.String
objects by calling getFields with class name rather than object.

* scripts/general/methods.m: Work-around bug with java.lang.String
objects by calling getMethods with class name rather than object.

diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1788,17 +1788,17 @@ octave_java::do_javaObject (JNIEnv* jni_
           jclass_ref helperClass (jni_env, find_octave_class (jni_env, "org/octave/ClassHelper"));
           jmethodID mID = jni_env->GetStaticMethodID (helperClass, "invokeConstructor",
                                                       "(Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/Class;)Ljava/lang/Object;");
           jstring_ref clsName (jni_env, jni_env->NewStringUTF (name.c_str ()));
           jobject_ref resObj (jni_env, jni_env->CallStaticObjectMethod (helperClass, mID,
                                                                         jstring (clsName), jobjectArray (arg_objs), jobjectArray (arg_types)));
 
           if (resObj)
-            retval = box (jni_env, resObj);
+            retval = octave_value (new octave_java (resObj, 0));
           else
             check_exception (jni_env);
         }
     }
 
   return retval;
 }
 
diff --git a/scripts/general/fieldnames.m b/scripts/general/fieldnames.m
--- a/scripts/general/fieldnames.m
+++ b/scripts/general/fieldnames.m
@@ -41,16 +41,21 @@ function names = fieldnames (obj)
   if (nargin != 1)
     print_usage ();
   endif
   
   if (isstruct (obj) || isobject (obj))
     ## Call internal C++ function for structs or Octave objects
     names = __fieldnames__ (obj);
   elseif (isjava (obj) || ischar (obj))
+    ## FIXME: Function prototype that excepts java obj exists, but doesn't
+    ##        work if obj is java.lang.String.  Convert obj to classname.
+    if (! ischar (obj))
+      obj = class (obj);
+    endif
     names_str = javaMethod ("getFields", "org.octave.ClassHelper", obj);
     names = strsplit (names_str, ';');
   else
     error ("fieldnames: Invalid input argument"); 
   endif
 
 endfunction
 
diff --git a/scripts/general/methods.m b/scripts/general/methods.m
--- a/scripts/general/methods.m
+++ b/scripts/general/methods.m
@@ -41,16 +41,19 @@ function mtds = methods (obj)
     ## Could be a classname for an Octave class or Java class.
     ## Try Octave class first.
     mtds_list = __methods__ (obj);
     if (isempty (mtds_list))
       mtds_str = javaMethod ("getMethods", "org.octave.ClassHelper", obj);
       mtds_list = strsplit (mtds_str, ';');
     endif
   elseif (isjava (obj))
+    ## FIXME: Function prototype that excepts java obj exists, but doesn't
+    ##        work if obj is java.lang.String.  Convert obj to classname.
+    obj = class (obj);
     mtds_str = javaMethod ("getMethods", "org.octave.ClassHelper", obj);
     mtds_list = strsplit (mtds_str, ';');
   else
     error ("methods: Invalid input argument");
   endif
 
   if (nargout == 0)
     classname = ifelse (ischar (obj), obj, class (obj));
