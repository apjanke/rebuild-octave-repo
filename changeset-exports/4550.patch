# HG changeset patch
# User jwe
# Date 1067269315 0
#      Mon Oct 27 15:41:55 2003 +0000
# Node ID 69a9b22a72a2c2484701e8210014f0f89731de28
# Parent  2d393bead213ae193407a6ba280f3ef03e26e56e
[project @ 2003-10-27 15:41:55 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,35 @@
+2003-10-27  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ops.h (DEFNDUNOP_OP, DEFNDUNOP_FN): New arg e, to name value
+	extractor function prefix.
+	* OPERATORS/op-bm-bm.cc, OPERATORS/op-cm-cm.cc,	OPERATORS/op-m-m.cc:
+	Change all uses.
+
+	* ov-cx-mat.h (octave_complex_matrix::complex_array_value,
+	octave_char_matrix::char_array_value,
+	octave_bool_matrix::bool_array_value): Rename from array_value.
+	* OPERATORS/op-bm-bm.cc, OPERATORS/op-cm-cm.cc,
+	OPERATORS/op-cm-cs.cc, OPERATORS/op-cm-m.cc,
+	OPERATORS/op-cm-s.cc, OPERATORS/op-cs-cm.cc,
+	OPERATORS/op-m-cm.cc, OPERATORS/op-m-m.cc,
+	OPERATORS/op-s-cm.cc: Use complex_array, char_array, and
+	bool_array as appropriate (instead of just array).
+
+	* ov-base.cc (octave_base_value::array_value,
+	octave_base_value::bool_array_value,
+	octave_base_value::complex_array_value,
+	octave_base_value::char_array_value): Provide default implementations.
+	* ov-base.h: Provide decls.
+
+	* ov.h (octave_value::array_value, octave_value::bool_array_value,
+	octave_value::complex_array_value, octave_value::char_array_value):
+	New virtual functions.
+
 2003-10-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-idx.cc (make_subs_cell): Pass dim_vector object to resize.
 
 	* ov-typeinfo.cc (octave_value_typeinfo::do_register_type):
 	Use resize_and_fill for types.
 
 	* oct-obj.h (octave_value_list::maybe_resize): Use resize_and_fill.
diff --git a/src/OPERATORS/op-bm-bm.cc b/src/OPERATORS/op-bm-bm.cc
--- a/src/OPERATORS/op-bm-bm.cc
+++ b/src/OPERATORS/op-bm-bm.cc
@@ -34,29 +34,29 @@ Software Foundation, 59 Temple Place - S
 #include "ov-bool-mat.h"
 #include "ov-typeinfo.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // unary bool matrix ops.
 
-DEFNDUNOP_OP (not, bool_matrix, !)
+DEFNDUNOP_OP (not, bool_matrix, bool_array, !)
 
 DEFUNOP (transpose, bool_matrix)
 {
   CAST_UNOP_ARG (const octave_bool_matrix&);
 
   return octave_value (v.bool_matrix_value().transpose ());
 }
 
 // bool matrix by bool matrix ops.
 
-DEFNDBINOP_FN (eq, bool_matrix, bool_matrix, array, array, mx_el_eq)
-DEFNDBINOP_FN (ne, bool_matrix, bool_matrix, array, array, mx_el_ne)
+DEFNDBINOP_FN (eq, bool_matrix, bool_matrix, bool_array, bool_array, mx_el_eq)
+DEFNDBINOP_FN (ne, bool_matrix, bool_matrix, bool_array, bool_array, mx_el_ne)
 
 void
 install_bm_bm_ops (void)
 {
   INSTALL_UNOP (op_not, octave_bool_matrix, not);
   INSTALL_UNOP (op_transpose, octave_bool_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_bool_matrix, transpose);
 
diff --git a/src/OPERATORS/op-cm-cm.cc b/src/OPERATORS/op-cm-cm.cc
--- a/src/OPERATORS/op-cm-cm.cc
+++ b/src/OPERATORS/op-cm-cm.cc
@@ -34,18 +34,18 @@ Software Foundation, 59 Temple Place - S
 #include "ov-cx-mat.h"
 #include "ov-typeinfo.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // unary complex matrix ops.
 
-DEFNDUNOP_OP (not, complex_matrix, !)
-DEFNDUNOP_OP (uminus, complex_matrix, -)
+DEFNDUNOP_OP (not, complex_matrix, complex_array, !)
+DEFNDUNOP_OP (uminus, complex_matrix, complex_array, -)
 
 DEFUNOP (transpose, complex_matrix)
 {
   CAST_UNOP_ARG (const octave_complex_matrix&);
 
   return octave_value (v.complex_matrix_value().transpose ());
 }
 
@@ -56,50 +56,50 @@ DEFUNOP (hermitian, complex_matrix)
   return octave_value (v.complex_matrix_value().hermitian ());
 }
 
 DEFNCUNOP_METHOD (incr, complex_matrix, increment)
 DEFNCUNOP_METHOD (decr, complex_matrix, decrement)
 
 // complex matrix by complex matrix ops.
 
-DEFNDBINOP_OP (add, complex_matrix, complex_matrix, array, array, +)
-DEFNDBINOP_OP (sub, complex_matrix, complex_matrix, array, array, -)
+DEFNDBINOP_OP (add, complex_matrix, complex_matrix, complex_array, complex_array, +)
+DEFNDBINOP_OP (sub, complex_matrix, complex_matrix, complex_array, complex_array, -)
 
 DEFBINOP_OP (mul, complex_matrix, complex_matrix, *)
 DEFBINOP_FN (div, complex_matrix, complex_matrix, xdiv)
 
 DEFBINOPX (pow, complex_matrix, complex_matrix)
 {
   error ("can't do A ^ B for A and B both matrices");
   return octave_value ();
 }
 
 DEFBINOP_FN (ldiv, complex_matrix, complex_matrix, xleftdiv)
 
-DEFNDBINOP_FN (lt, complex_matrix, complex_matrix, array, array, mx_el_lt)
-DEFNDBINOP_FN (le, complex_matrix, complex_matrix, array, array, mx_el_le)
-DEFNDBINOP_FN (eq, complex_matrix, complex_matrix, array, array, mx_el_eq)
-DEFNDBINOP_FN (ge, complex_matrix, complex_matrix, array, array, mx_el_ge)
-DEFNDBINOP_FN (gt, complex_matrix, complex_matrix, array, array, mx_el_gt)
-DEFNDBINOP_FN (ne, complex_matrix, complex_matrix, array, array, mx_el_ne)
+DEFNDBINOP_FN (lt, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_lt)
+DEFNDBINOP_FN (le, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_le)
+DEFNDBINOP_FN (eq, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_eq)
+DEFNDBINOP_FN (ge, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_ge)
+DEFNDBINOP_FN (gt, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_gt)
+DEFNDBINOP_FN (ne, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_ne)
 
-DEFNDBINOP_FN (el_mul, complex_matrix, complex_matrix, array, array, product)
-DEFNDBINOP_FN (el_div, complex_matrix, complex_matrix, array, array, quotient)
-DEFNDBINOP_FN (el_pow, complex_matrix, complex_matrix, array, array, elem_xpow)
+DEFNDBINOP_FN (el_mul, complex_matrix, complex_matrix, complex_array, complex_array, product)
+DEFNDBINOP_FN (el_div, complex_matrix, complex_matrix, complex_array, complex_array, quotient)
+DEFNDBINOP_FN (el_pow, complex_matrix, complex_matrix, complex_array, complex_array, elem_xpow)
 
 DEFBINOP (el_ldiv, complex_matrix, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_complex_matrix&);
 
-  return octave_value (quotient (v2.array_value (), v1.array_value ()));
+  return octave_value (quotient (v2.complex_array_value (), v1.complex_array_value ()));
 }
 
-DEFNDBINOP_FN (el_and, complex_matrix, complex_matrix, array, array, mx_el_and)
-DEFNDBINOP_FN (el_or,  complex_matrix, complex_matrix, array, array, mx_el_or)
+DEFNDBINOP_FN (el_and, complex_matrix, complex_matrix, complex_array, complex_array, mx_el_and)
+DEFNDBINOP_FN (el_or,  complex_matrix, complex_matrix, complex_array, complex_array, mx_el_or)
 
 DEFASSIGNOP_FN (assign, complex_matrix, complex_matrix, assign)
 
 void
 install_cm_cm_ops (void)
 {
   INSTALL_UNOP (op_not, octave_complex_matrix, not);
   INSTALL_UNOP (op_uminus, octave_complex_matrix, uminus);
diff --git a/src/OPERATORS/op-cm-cs.cc b/src/OPERATORS/op-cm-cs.cc
--- a/src/OPERATORS/op-cm-cs.cc
+++ b/src/OPERATORS/op-cm-cs.cc
@@ -35,76 +35,76 @@ Software Foundation, 59 Temple Place - S
 #include "ov-complex.h"
 #include "ov-typeinfo.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // complex matrix by complex scalar ops.
 
-DEFNDBINOP_OP (add, complex_matrix, complex, array, complex, +)
-DEFNDBINOP_OP (sub, complex_matrix, complex, array, complex, -)
-DEFNDBINOP_OP (mul, complex_matrix, complex, array, complex, *)
+DEFNDBINOP_OP (add, complex_matrix, complex, complex_array, complex, +)
+DEFNDBINOP_OP (sub, complex_matrix, complex, complex_array, complex, -)
+DEFNDBINOP_OP (mul, complex_matrix, complex, complex_array, complex, *)
 
 DEFBINOP (div, complex_matrix, complex)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_complex&);
 
   Complex d = v2.complex_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
-  return octave_value (v1.array_value () / d);
+  return octave_value (v1.complex_array_value () / d);
 }
 
 DEFBINOP_FN (pow, complex_matrix, complex, xpow)
 
 DEFBINOP (ldiv, complex_matrix, complex)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_complex&);
 
   ComplexMatrix m1 = v1.complex_matrix_value ();
   ComplexMatrix m2 = v2.complex_matrix_value ();
 
   return octave_value (xleftdiv (m1, m2));
 }
 
-DEFNDBINOP_FN (lt, complex_matrix, complex, array, complex, mx_el_lt)
-DEFNDBINOP_FN (le, complex_matrix, complex, array, complex, mx_el_le)
-DEFNDBINOP_FN (eq, complex_matrix, complex, array, complex, mx_el_eq)
-DEFNDBINOP_FN (ge, complex_matrix, complex, array, complex, mx_el_ge)
-DEFNDBINOP_FN (gt, complex_matrix, complex, array, complex, mx_el_gt)
-DEFNDBINOP_FN (ne, complex_matrix, complex, array, complex, mx_el_ne)
+DEFNDBINOP_FN (lt, complex_matrix, complex, complex_array, complex, mx_el_lt)
+DEFNDBINOP_FN (le, complex_matrix, complex, complex_array, complex, mx_el_le)
+DEFNDBINOP_FN (eq, complex_matrix, complex, complex_array, complex, mx_el_eq)
+DEFNDBINOP_FN (ge, complex_matrix, complex, complex_array, complex, mx_el_ge)
+DEFNDBINOP_FN (gt, complex_matrix, complex, complex_array, complex, mx_el_gt)
+DEFNDBINOP_FN (ne, complex_matrix, complex, complex_array, complex, mx_el_ne)
 
-DEFNDBINOP_OP (el_mul, complex_matrix, complex, array, complex, *)
+DEFNDBINOP_OP (el_mul, complex_matrix, complex, complex_array, complex, *)
 
 DEFBINOP (el_div, complex_matrix, complex)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_complex&);
 
   Complex d = v2.complex_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
-  return octave_value (v1.array_value () / d);
+  return octave_value (v1.complex_array_value () / d);
 }
 
-DEFNDBINOP_FN (el_pow, complex_matrix, complex, array, complex, elem_xpow)
+DEFNDBINOP_FN (el_pow, complex_matrix, complex, complex_array, complex, elem_xpow)
 
 DEFBINOP (el_ldiv, complex_matrix, complex)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_complex&);
 
-  return x_el_div (v2.complex_value (), v1.array_value ());
+  return x_el_div (v2.complex_value (), v1.complex_array_value ());
 }
 
-DEFNDBINOP_FN (el_and, complex_matrix, complex, array, complex, mx_el_and)
-DEFNDBINOP_FN (el_or,  complex_matrix, complex, array, complex, mx_el_or)
+DEFNDBINOP_FN (el_and, complex_matrix, complex, complex_array, complex, mx_el_and)
+DEFNDBINOP_FN (el_or,  complex_matrix, complex, complex_array, complex, mx_el_or)
 
 DEFASSIGNOP_FN (assign, complex_matrix, complex, assign)
 
 void
 install_cm_cs_ops (void)
 {
   INSTALL_BINOP (op_add, octave_complex_matrix, octave_complex, add);
   INSTALL_BINOP (op_sub, octave_complex_matrix, octave_complex, sub);
diff --git a/src/OPERATORS/op-cm-m.cc b/src/OPERATORS/op-cm-m.cc
--- a/src/OPERATORS/op-cm-m.cc
+++ b/src/OPERATORS/op-cm-m.cc
@@ -40,50 +40,50 @@ Software Foundation, 59 Temple Place - S
 #include "ov-re-mat.h"
 #include "ov-typeinfo.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // complex matrix by matrix ops.
 
-DEFNDBINOP_OP (add, complex_matrix, matrix, array, array, +)
-DEFNDBINOP_OP (sub, complex_matrix, matrix, array, array, -)
+DEFNDBINOP_OP (add, complex_matrix, matrix, complex_array, array, +)
+DEFNDBINOP_OP (sub, complex_matrix, matrix, complex_array, array, -)
 
 DEFBINOP_OP (mul, complex_matrix, matrix, *)
 DEFBINOP_FN (div, complex_matrix, matrix, xdiv)
 
 DEFBINOPX (pow, complex_matrix, matrix)
 {
   error ("can't do A ^ B for A and B both matrices");
   return octave_value ();
 }
 
 DEFBINOP_FN (ldiv, complex_matrix, matrix, xleftdiv)
 
-DEFNDBINOP_FN (lt, complex_matrix, matrix, array, array, mx_el_lt)
-DEFNDBINOP_FN (le, complex_matrix, matrix, array, array, mx_el_le)
-DEFNDBINOP_FN (eq, complex_matrix, matrix, array, array, mx_el_eq)
-DEFNDBINOP_FN (ge, complex_matrix, matrix, array, array, mx_el_ge)
-DEFNDBINOP_FN (gt, complex_matrix, matrix, array, array, mx_el_gt)
-DEFNDBINOP_FN (ne, complex_matrix, matrix, array, array, mx_el_ne)
+DEFNDBINOP_FN (lt, complex_matrix, matrix, complex_array, array, mx_el_lt)
+DEFNDBINOP_FN (le, complex_matrix, matrix, complex_array, array, mx_el_le)
+DEFNDBINOP_FN (eq, complex_matrix, matrix, complex_array, array, mx_el_eq)
+DEFNDBINOP_FN (ge, complex_matrix, matrix, complex_array, array, mx_el_ge)
+DEFNDBINOP_FN (gt, complex_matrix, matrix, complex_array, array, mx_el_gt)
+DEFNDBINOP_FN (ne, complex_matrix, matrix, complex_array, array, mx_el_ne)
 
-DEFNDBINOP_FN (el_mul, complex_matrix, matrix, array, array, product)
-DEFNDBINOP_FN (el_div, complex_matrix, matrix, array, array, quotient)
-DEFNDBINOP_FN (el_pow, complex_matrix, matrix, array, array, elem_xpow)
+DEFNDBINOP_FN (el_mul, complex_matrix, matrix, complex_array, array, product)
+DEFNDBINOP_FN (el_div, complex_matrix, matrix, complex_array, array, quotient)
+DEFNDBINOP_FN (el_pow, complex_matrix, matrix, complex_array, array, elem_xpow)
 
 DEFBINOP (el_ldiv, complex_matrix, matrix)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_matrix&);
 
-  return quotient (v2.array_value (), v1.array_value ());
+  return quotient (v2.array_value (), v1.complex_array_value ());
 }
 
-DEFNDBINOP_FN (el_and, complex_matrix, matrix, array, array, mx_el_and)
-DEFNDBINOP_FN (el_or,  complex_matrix, matrix, array, array, mx_el_or)
+DEFNDBINOP_FN (el_and, complex_matrix, matrix, complex_array, array, mx_el_and)
+DEFNDBINOP_FN (el_or,  complex_matrix, matrix, complex_array, array, mx_el_or)
 
 DEFASSIGNOP_FN (assign, complex_matrix, matrix, assign)
 
 void
 install_cm_m_ops (void)
 {
   INSTALL_BINOP (op_add, octave_complex_matrix, octave_matrix, add);
   INSTALL_BINOP (op_sub, octave_complex_matrix, octave_matrix, sub);
diff --git a/src/OPERATORS/op-cm-s.cc b/src/OPERATORS/op-cm-s.cc
--- a/src/OPERATORS/op-cm-s.cc
+++ b/src/OPERATORS/op-cm-s.cc
@@ -39,76 +39,76 @@ Software Foundation, 59 Temple Place - S
 #include "ov-scalar.h"
 #include "ov-typeinfo.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // complex matrix by scalar ops.
 
-DEFNDBINOP_OP (add, complex_matrix, scalar, array, scalar, +)
-DEFNDBINOP_OP (sub, complex_matrix, scalar, array, scalar, -)
-DEFNDBINOP_OP (mul, complex_matrix, scalar, array, scalar, *)
+DEFNDBINOP_OP (add, complex_matrix, scalar, complex_array, scalar, +)
+DEFNDBINOP_OP (sub, complex_matrix, scalar, complex_array, scalar, -)
+DEFNDBINOP_OP (mul, complex_matrix, scalar, complex_array, scalar, *)
 
 DEFBINOP (div, complex_matrix, scalar)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_scalar&);
 
   double d = v2.double_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
-  return octave_value (v1.array_value () / d);
+  return octave_value (v1.complex_array_value () / d);
 }
 
 DEFBINOP_FN (pow, complex_matrix, scalar, xpow)
 
 DEFBINOP (ldiv, complex_matrix, scalar)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_scalar&);
 
   ComplexMatrix m1 = v1.complex_matrix_value ();
   Matrix m2 = v2.matrix_value ();
 
   return octave_value (xleftdiv (m1, m2));
 }
 
-DEFNDBINOP_FN (lt, complex_matrix, scalar, array, scalar, mx_el_lt)
-DEFNDBINOP_FN (le, complex_matrix, scalar, array, scalar, mx_el_le)
-DEFNDBINOP_FN (eq, complex_matrix, scalar, array, scalar, mx_el_eq)
-DEFNDBINOP_FN (ge, complex_matrix, scalar, array, scalar, mx_el_ge)
-DEFNDBINOP_FN (gt, complex_matrix, scalar, array, scalar, mx_el_gt)
-DEFNDBINOP_FN (ne, complex_matrix, scalar, array, scalar, mx_el_ne)
+DEFNDBINOP_FN (lt, complex_matrix, scalar, complex_array, scalar, mx_el_lt)
+DEFNDBINOP_FN (le, complex_matrix, scalar, complex_array, scalar, mx_el_le)
+DEFNDBINOP_FN (eq, complex_matrix, scalar, complex_array, scalar, mx_el_eq)
+DEFNDBINOP_FN (ge, complex_matrix, scalar, complex_array, scalar, mx_el_ge)
+DEFNDBINOP_FN (gt, complex_matrix, scalar, complex_array, scalar, mx_el_gt)
+DEFNDBINOP_FN (ne, complex_matrix, scalar, complex_array, scalar, mx_el_ne)
 
 DEFBINOP_OP (el_mul, complex_matrix, scalar, *)
 
 DEFBINOP (el_div, complex_matrix, scalar)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_scalar&);
 
   double d = v2.double_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
-  return octave_value (v1.array_value () / d);
+  return octave_value (v1.complex_array_value () / d);
 }
 
-DEFNDBINOP_FN (el_pow, complex_matrix, scalar, array, scalar, elem_xpow)
+DEFNDBINOP_FN (el_pow, complex_matrix, scalar, complex_array, scalar, elem_xpow)
 
 DEFBINOP (el_ldiv, complex_matrix, scalar)
 {
   CAST_BINOP_ARGS (const octave_complex_matrix&, const octave_scalar&);
 
-  return x_el_div (v2.double_value (), v1.array_value ());
+  return x_el_div (v2.double_value (), v1.complex_array_value ());
 }
 
-DEFNDBINOP_FN (el_and, complex_matrix, scalar, array, scalar, mx_el_and)
-DEFNDBINOP_FN (el_or,  complex_matrix, scalar, array, scalar, mx_el_or)
+DEFNDBINOP_FN (el_and, complex_matrix, scalar, complex_array, scalar, mx_el_and)
+DEFNDBINOP_FN (el_or,  complex_matrix, scalar, complex_array, scalar, mx_el_or)
 
 DEFASSIGNOP_FN (assign, complex_matrix, scalar, assign)
 
 void
 install_cm_s_ops (void)
 {
   INSTALL_BINOP (op_add, octave_complex_matrix, octave_scalar, add);
   INSTALL_BINOP (op_sub, octave_complex_matrix, octave_scalar, sub);
diff --git a/src/OPERATORS/op-cs-cm.cc b/src/OPERATORS/op-cs-cm.cc
--- a/src/OPERATORS/op-cs-cm.cc
+++ b/src/OPERATORS/op-cs-cm.cc
@@ -35,19 +35,19 @@ Software Foundation, 59 Temple Place - S
 #include "ov-cx-mat.h"
 #include "ov-typeinfo.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // complex scalar by complex matrix ops.
 
-DEFNDBINOP_OP (add, complex, complex_matrix, complex, array, +)
-DEFNDBINOP_OP (sub, complex, complex_matrix, complex, array, -)
-DEFNDBINOP_OP (mul, complex, complex_matrix, complex, array, *)
+DEFNDBINOP_OP (add, complex, complex_matrix, complex, complex_array, +)
+DEFNDBINOP_OP (sub, complex, complex_matrix, complex, complex_array, -)
+DEFNDBINOP_OP (mul, complex, complex_matrix, complex, complex_array, *)
 
 DEFBINOP (div, complex, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_complex_matrix&);
 
   ComplexMatrix m1 = v1.complex_matrix_value ();
   ComplexMatrix m2 = v2.complex_matrix_value ();
 
@@ -60,44 +60,44 @@ DEFBINOP (ldiv, complex, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_complex_matrix&);
 
   Complex d = v1.complex_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
-  return octave_value (v2.array_value () / d);
+  return octave_value (v2.complex_array_value () / d);
 }
 
-DEFNDBINOP_FN (lt, complex, complex_matrix, complex, array, mx_el_lt)
-DEFNDBINOP_FN (le, complex, complex_matrix, complex, array, mx_el_le)
-DEFNDBINOP_FN (eq, complex, complex_matrix, complex, array, mx_el_eq)
-DEFNDBINOP_FN (ge, complex, complex_matrix, complex, array, mx_el_ge)
-DEFNDBINOP_FN (gt, complex, complex_matrix, complex, array, mx_el_gt)
-DEFNDBINOP_FN (ne, complex, complex_matrix, complex, array, mx_el_ne)
+DEFNDBINOP_FN (lt, complex, complex_matrix, complex, complex_array, mx_el_lt)
+DEFNDBINOP_FN (le, complex, complex_matrix, complex, complex_array, mx_el_le)
+DEFNDBINOP_FN (eq, complex, complex_matrix, complex, complex_array, mx_el_eq)
+DEFNDBINOP_FN (ge, complex, complex_matrix, complex, complex_array, mx_el_ge)
+DEFNDBINOP_FN (gt, complex, complex_matrix, complex, complex_array, mx_el_gt)
+DEFNDBINOP_FN (ne, complex, complex_matrix, complex, complex_array, mx_el_ne)
 
-DEFNDBINOP_OP (el_mul, complex, complex_matrix, complex, array, *)
-DEFNDBINOP_FN (el_div, complex, complex_matrix, complex, array, x_el_div)
-DEFNDBINOP_FN (el_pow, complex, complex_matrix, complex, array, elem_xpow)
+DEFNDBINOP_OP (el_mul, complex, complex_matrix, complex, complex_array, *)
+DEFNDBINOP_FN (el_div, complex, complex_matrix, complex, complex_array, x_el_div)
+DEFNDBINOP_FN (el_pow, complex, complex_matrix, complex, complex_array, elem_xpow)
 
 DEFBINOP (el_ldiv, complex, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_complex_matrix&);
 
   Complex d = v1.complex_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
-  return octave_value (v2.array_value () / d);
+  return octave_value (v2.complex_array_value () / d);
 }
 
-DEFNDBINOP_FN (el_and, complex, complex_matrix, complex, array, mx_el_and)
-DEFNDBINOP_FN (el_or,  complex, complex_matrix, complex, array, mx_el_or)
+DEFNDBINOP_FN (el_and, complex, complex_matrix, complex, complex_array, mx_el_and)
+DEFNDBINOP_FN (el_or,  complex, complex_matrix, complex, complex_array, mx_el_or)
 
 DEFCONV (complex_matrix_conv, complex, complex_matrix)
 {
   CAST_CONV_ARG (const octave_complex&);
 
   return new octave_complex_matrix (v.complex_matrix_value ());
 }
 
diff --git a/src/OPERATORS/op-m-cm.cc b/src/OPERATORS/op-m-cm.cc
--- a/src/OPERATORS/op-m-cm.cc
+++ b/src/OPERATORS/op-m-cm.cc
@@ -40,50 +40,50 @@ Software Foundation, 59 Temple Place - S
 #include "ov-cx-mat.h"
 #include "ov-typeinfo.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // matrix by complex matrix ops.
 
-DEFNDBINOP_OP (add, matrix, complex_matrix, array, array, +)
-DEFNDBINOP_OP (sub, matrix, complex_matrix, array, array, -)
+DEFNDBINOP_OP (add, matrix, complex_matrix, array, complex_array, +)
+DEFNDBINOP_OP (sub, matrix, complex_matrix, array, complex_array, -)
 
 DEFBINOP_OP (mul, matrix, complex_matrix, *)
 DEFBINOP_FN (div, matrix, complex_matrix, xdiv)
 
 DEFBINOPX (pow, matrix, complex_matrix)
 {
   error ("can't do A ^ B for A and B both matrices");
   return octave_value ();
 }
 
 DEFBINOP_FN (ldiv, matrix, complex_matrix, xleftdiv)
 
-DEFNDBINOP_FN (lt, matrix, complex_matrix, array, array, mx_el_lt)
-DEFNDBINOP_FN (le, matrix, complex_matrix, array, array, mx_el_le)
-DEFNDBINOP_FN (eq, matrix, complex_matrix, array, array, mx_el_eq)
-DEFNDBINOP_FN (ge, matrix, complex_matrix, array, array, mx_el_ge)
-DEFNDBINOP_FN (gt, matrix, complex_matrix, array, array, mx_el_gt)
-DEFNDBINOP_FN (ne, matrix, complex_matrix, array, array, mx_el_ne)
+DEFNDBINOP_FN (lt, matrix, complex_matrix, array, complex_array, mx_el_lt)
+DEFNDBINOP_FN (le, matrix, complex_matrix, array, complex_array, mx_el_le)
+DEFNDBINOP_FN (eq, matrix, complex_matrix, array, complex_array, mx_el_eq)
+DEFNDBINOP_FN (ge, matrix, complex_matrix, array, complex_array, mx_el_ge)
+DEFNDBINOP_FN (gt, matrix, complex_matrix, array, complex_array, mx_el_gt)
+DEFNDBINOP_FN (ne, matrix, complex_matrix, array, complex_array, mx_el_ne)
 
-DEFNDBINOP_FN (el_mul, matrix, complex_matrix, array, array, product)
-DEFNDBINOP_FN (el_div, matrix, complex_matrix, array, array, quotient)
-DEFNDBINOP_FN (el_pow, matrix, complex_matrix, array, array, elem_xpow)
+DEFNDBINOP_FN (el_mul, matrix, complex_matrix, array, complex_array, product)
+DEFNDBINOP_FN (el_div, matrix, complex_matrix, array, complex_array, quotient)
+DEFNDBINOP_FN (el_pow, matrix, complex_matrix, array, complex_array, elem_xpow)
 
 DEFBINOP (el_ldiv, matrix, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_matrix&, const octave_complex_matrix&);
 
-  return quotient (v2.array_value (), v1.array_value ());
+  return quotient (v2.complex_array_value (), v1.array_value ());
 }
 
-DEFNDBINOP_FN (el_and, matrix, complex_matrix, array, array, mx_el_and)
-DEFNDBINOP_FN (el_or,  matrix, complex_matrix, array, array, mx_el_or)
+DEFNDBINOP_FN (el_and, matrix, complex_matrix, array, complex_array, mx_el_and)
+DEFNDBINOP_FN (el_or,  matrix, complex_matrix, array, complex_array, mx_el_or)
 
 DEFCONV (complex_matrix_conv, matrix, complex_matrix)
 {
   CAST_CONV_ARG (const octave_matrix&);
 
   return new octave_complex_matrix (ComplexNDArray (v.array_value ()));
 }
 
diff --git a/src/OPERATORS/op-m-m.cc b/src/OPERATORS/op-m-m.cc
--- a/src/OPERATORS/op-m-m.cc
+++ b/src/OPERATORS/op-m-m.cc
@@ -34,18 +34,18 @@ Software Foundation, 59 Temple Place - S
 #include "ov-re-mat.h"
 #include "ov-typeinfo.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // matrix unary ops.
 
-DEFNDUNOP_OP (not, matrix, !)
-DEFNDUNOP_OP (uminus, matrix, -)
+DEFNDUNOP_OP (not, matrix, array, !)
+DEFNDUNOP_OP (uminus, matrix, array, -)
 
 DEFUNOP (transpose, matrix)
 {
   CAST_UNOP_ARG (const octave_matrix&);
 
   return octave_value (v.matrix_value().transpose ());
 }
 
diff --git a/src/OPERATORS/op-s-cm.cc b/src/OPERATORS/op-s-cm.cc
--- a/src/OPERATORS/op-s-cm.cc
+++ b/src/OPERATORS/op-s-cm.cc
@@ -41,19 +41,19 @@ Software Foundation, 59 Temple Place - S
 #include "ov-re-mat.h"
 #include "ov-typeinfo.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // scalar by complex matrix ops.
 
-DEFNDBINOP_OP (add, scalar, complex_matrix, scalar, array, +)
-DEFNDBINOP_OP (sub, scalar, complex_matrix, scalar, array, -)
-DEFNDBINOP_OP (mul, scalar, complex_matrix, scalar, array, *)
+DEFNDBINOP_OP (add, scalar, complex_matrix, scalar, complex_array, +)
+DEFNDBINOP_OP (sub, scalar, complex_matrix, scalar, complex_array, -)
+DEFNDBINOP_OP (mul, scalar, complex_matrix, scalar, complex_array, *)
 
 DEFBINOP (div, scalar, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_scalar&, const octave_complex_matrix&);
 
   Matrix m1 = v1.matrix_value ();
   ComplexMatrix m2 = v2.complex_matrix_value ();
 
@@ -66,54 +66,54 @@ DEFBINOP (ldiv, scalar, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_scalar&, const octave_complex_matrix&);
 
   double d = v1.double_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
-  return octave_value (v2.array_value () / d);
+  return octave_value (v2.complex_array_value () / d);
 }
 
-DEFNDBINOP_FN (lt, scalar, complex_matrix, scalar, array, mx_el_lt)
-DEFNDBINOP_FN (le, scalar, complex_matrix, scalar, array, mx_el_le)
-DEFNDBINOP_FN (eq, scalar, complex_matrix, scalar, array, mx_el_eq)
-DEFNDBINOP_FN (ge, scalar, complex_matrix, scalar, array, mx_el_ge)
-DEFNDBINOP_FN (gt, scalar, complex_matrix, scalar, array, mx_el_gt)
-DEFNDBINOP_FN (ne, scalar, complex_matrix, scalar, array, mx_el_ne)
+DEFNDBINOP_FN (lt, scalar, complex_matrix, scalar, complex_array, mx_el_lt)
+DEFNDBINOP_FN (le, scalar, complex_matrix, scalar, complex_array, mx_el_le)
+DEFNDBINOP_FN (eq, scalar, complex_matrix, scalar, complex_array, mx_el_eq)
+DEFNDBINOP_FN (ge, scalar, complex_matrix, scalar, complex_array, mx_el_ge)
+DEFNDBINOP_FN (gt, scalar, complex_matrix, scalar, complex_array, mx_el_gt)
+DEFNDBINOP_FN (ne, scalar, complex_matrix, scalar, complex_array, mx_el_ne)
 
-DEFNDBINOP_OP (el_mul, scalar, complex_matrix, scalar, array, *)
-DEFNDBINOP_FN (el_div, scalar, complex_matrix, scalar, array, x_el_div)
-DEFNDBINOP_FN (el_pow, scalar, complex_matrix, scalar, array, elem_xpow)
+DEFNDBINOP_OP (el_mul, scalar, complex_matrix, scalar, complex_array, *)
+DEFNDBINOP_FN (el_div, scalar, complex_matrix, scalar, complex_array, x_el_div)
+DEFNDBINOP_FN (el_pow, scalar, complex_matrix, scalar, complex_array, elem_xpow)
 
 DEFBINOP (el_ldiv, scalar, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_scalar&, const octave_complex_matrix&);
 
   double d = v1.double_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
-  return octave_value (v2.array_value () / d);
+  return octave_value (v2.complex_array_value () / d);
 }
 
 DEFBINOP (el_and, scalar, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_scalar&, const octave_complex_matrix&);
 
-  return mx_el_and (v1.double_value (), v2.array_value ());
+  return mx_el_and (v1.double_value (), v2.complex_array_value ());
 }
 
 DEFBINOP (el_or, scalar, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_scalar&, const octave_complex_matrix&);
 
-  return mx_el_or (v1.double_value (), v2.array_value ());
+  return mx_el_or (v1.double_value (), v2.complex_array_value ());
 }
 
 DEFCONV (complex_matrix_conv, scalar, complex_matrix)
 {
   CAST_CONV_ARG (const octave_scalar&);
 
   return new octave_complex_matrix (ComplexMatrix (v.matrix_value ()));
 }
diff --git a/src/ops.h b/src/ops.h
--- a/src/ops.h
+++ b/src/ops.h
@@ -185,37 +185,37 @@ extern void install_ops (void);
 
 #define DEFUNOP_OP(name, t, op) \
   UNOPDECL (name, a) \
   { \
     CAST_UNOP_ARG (const octave_ ## t&); \
     return octave_value (op v.t ## _value ()); \
   }
 
-#define DEFNDUNOP_OP(name, t, op) \
+#define DEFNDUNOP_OP(name, t, e, op) \
   UNOPDECL (name, a) \
   { \
     CAST_UNOP_ARG (const octave_ ## t&); \
-    return octave_value (op v.array_value ()); \
+    return octave_value (op v.e ## _value ()); \
   }
 
 // XXX FIXME XXX -- in some cases, the constructor isn't necessary.
 
 #define DEFUNOP_FN(name, t, f) \
   UNOPDECL (name, a) \
   { \
     CAST_UNOP_ARG (const octave_ ## t&); \
     return octave_value (f (v.t ## _value ())); \
   }
 
-#define DEFNDUNOP_FN(name, t, f) \
+#define DEFNDUNOP_FN(name, t, e, f) \
   UNOPDECL (name, a) \
   { \
     CAST_UNOP_ARG (const octave_ ## t&); \
-    return octave_value (f (v.array_value ())); \
+    return octave_value (f (v.e ## _value ())); \
   }
 
 #define DEFNCUNOP_METHOD(name, t, method) \
   static void \
   oct_unop_ ## name (octave_value& a) \
   { \
     CAST_UNOP_ARG (octave_ ## t&); \
     v.method (); \
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -295,21 +295,20 @@ Matrix
 octave_base_value::matrix_value (bool) const
 {
   Matrix retval;
   gripe_wrong_type_arg ("octave_base_value::matrix_value()", type_name ());
   return retval;
 }
 
 NDArray
-octave_base_value::double_nd_array_value (bool) const
+octave_base_value::array_value (bool) const
 {
   NDArray retval;
-  gripe_wrong_type_arg ("octave_base_value::double_nd_array_value()",
-			type_name ());
+  gripe_wrong_type_arg ("octave_base_value::array_value()", type_name ());
   return retval;
 }
 
 Complex
 octave_base_value::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
   Complex retval (tmp, tmp);
@@ -321,29 +320,73 @@ ComplexMatrix
 octave_base_value::complex_matrix_value (bool) const
 {
   ComplexMatrix retval;
   gripe_wrong_type_arg ("octave_base_value::complex_matrix_value()",
 			type_name ());
   return retval;
 }
 
+ComplexNDArray
+octave_base_value::complex_array_value (bool) const
+{
+  ComplexNDArray retval;
+  gripe_wrong_type_arg ("octave_base_value::complex_array_value()",
+			type_name ());
+  return retval;
+}
+
+bool
+octave_base_value::bool_value (void) const
+{
+  bool retval = false;
+  gripe_wrong_type_arg ("octave_base_value::bool_value()", type_name ());
+  return retval;
+}
+
+boolMatrix
+octave_base_value::bool_matrix_value (void) const
+{
+  boolMatrix retval;
+  gripe_wrong_type_arg ("octave_base_value::bool_matrix_value()",
+			type_name ());
+  return retval;
+}
+
+boolNDArray
+octave_base_value::bool_array_value (bool) const
+{
+  boolNDArray retval;
+  gripe_wrong_type_arg ("octave_base_value::bool_array_value()",
+			type_name ());
+  return retval;
+}
+
 charMatrix
 octave_base_value::char_matrix_value (bool) const
 {
   charMatrix retval;
 
   octave_value tmp = convert_to_str ();
 
   if (! error_state)
     retval = tmp.char_matrix_value ();
 
   return retval;
 }
 
+charNDArray
+octave_base_value::char_array_value (bool) const
+{
+  charNDArray retval;
+  gripe_wrong_type_arg ("octave_base_value::char_array_value()",
+			type_name ());
+  return retval;
+}
+
 string_vector
 octave_base_value::all_strings (bool pad, bool force) const
 {
   string_vector retval;
 
   octave_value tmp = convert_to_str (pad, force);
 
   if (! error_state)
@@ -430,33 +473,16 @@ octave_base_value::fcn_handle_value (boo
 octave_value_list
 octave_base_value::list_value (void) const
 {
   octave_value_list retval;
   gripe_wrong_type_arg ("octave_base_value::list_value()", type_name ());
   return retval;
 }
 
-bool
-octave_base_value::bool_value (void) const
-{
-  bool retval = false;
-  gripe_wrong_type_arg ("octave_base_value::bool_value()", type_name ());
-  return retval;
-}
-
-boolMatrix
-octave_base_value::bool_matrix_value (void) const
-{
-  boolMatrix retval;
-  gripe_wrong_type_arg ("octave_base_value::bool_matrix_value()",
-			type_name ());
-  return retval;
-}
-
 CONVDECLX (matrix_conv)
 {
   return new octave_matrix ();
 }
 
 CONVDECLX (complex_matrix_conv)
 {
   return new octave_complex_matrix ();
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -190,24 +190,34 @@ public:
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Cell cell_value (void) const;
 
   Matrix matrix_value (bool = false) const;
 
-  NDArray double_nd_array_value (bool frc_str_conv = false) const;
+  NDArray array_value (bool = false) const;
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const;
 
+  ComplexNDArray complex_array_value (bool = false) const;
+
+  bool bool_value (void) const;
+
+  boolMatrix bool_matrix_value (void) const;
+
+  boolNDArray bool_array_value (bool = false) const;
+
   charMatrix char_matrix_value (bool = false) const;
 
+  charNDArray char_array_value (bool = false) const;
+
   string_vector all_strings (bool pad = false, bool force = false) const;
 
   std::string string_value (bool force = false) const;
 
   Range range_value (void) const;
 
   Octave_map map_value (void) const;
 
@@ -218,20 +228,16 @@ public:
   int stream_number (void) const;
 
   octave_function *function_value (bool silent);
 
   octave_fcn_handle *fcn_handle_value (bool silent);
 
   octave_value_list list_value (void) const;
 
-  bool bool_value (void) const;
-
-  boolMatrix bool_matrix_value (void) const;
-
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
   void convert_to_row_or_column_vector (void);
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -99,17 +99,17 @@ public:
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (matrix.matrix_value ( )); }
 
   boolMatrix bool_matrix_value (void) const
     { return matrix.matrix_value (); }
 
-  boolNDArray array_value (bool = false) const
+  boolNDArray bool_array_value (bool = false) const
     { return matrix; }
 
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
 protected:
 
   DECLARE_OCTAVE_ALLOCATOR
 
diff --git a/src/ov-ch-mat.h b/src/ov-ch-mat.h
--- a/src/ov-ch-mat.h
+++ b/src/ov-ch-mat.h
@@ -101,17 +101,17 @@ public:
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (matrix.matrix_value ()); }
 
   charMatrix char_matrix_value (bool = false) const
     { return matrix.matrix_value (); }
 
-  charNDArray array_value (bool = false) const
+  charNDArray char_array_value (bool = false) const
     { return matrix; }
 
   octave_value convert_to_str_internal (bool, bool) const
     { return octave_value (matrix.matrix_value (), true); }
 
 protected:
 
   DECLARE_OCTAVE_ALLOCATOR
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -97,17 +97,17 @@ public:
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const;
 
-  ComplexNDArray array_value (void) const { return matrix; }
+  ComplexNDArray complex_array_value (bool = false) const { return matrix; }
 
   void increment (void) { matrix += Complex (1.0); }
 
   void decrement (void) { matrix -= Complex (1.0); }
 
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -96,18 +96,17 @@ public:
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const;
 
-  NDArray array_value (bool = false) const
-    { return matrix; }
+  NDArray array_value (bool = false) const { return matrix; }
 
   void increment (void) { matrix += 1.0; }
 
   void decrement (void) { matrix -= 1.0; }
 
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
 private:
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -480,28 +480,43 @@ public:
   virtual double scalar_value (bool frc_str_conv = false) const
     { return rep->scalar_value (frc_str_conv); }
 
   virtual Cell cell_value (void) const;
 
   virtual Matrix matrix_value (bool frc_str_conv = false) const
     { return rep->matrix_value (frc_str_conv); }
 
-  virtual NDArray double_nd_array_value (bool frc_str_conv = false) const
-    { return rep->double_nd_array_value (frc_str_conv); }
+  virtual NDArray array_value (bool frc_str_conv = false) const
+    { return rep->array_value (frc_str_conv); }
 
   virtual Complex complex_value (bool frc_str_conv = false) const
     { return rep->complex_value (frc_str_conv); }
 
   virtual ComplexMatrix complex_matrix_value (bool frc_str_conv = false) const
     { return rep->complex_matrix_value (frc_str_conv); }
 
+  virtual ComplexNDArray complex_array_value (bool frc_str_conv = false) const
+    { return rep->complex_array_value (frc_str_conv); }
+
+  virtual bool bool_value (void) const
+    { return rep->bool_value (); }
+
+  virtual boolMatrix bool_matrix_value (void) const
+    { return rep->bool_matrix_value (); }
+
+  virtual boolNDArray bool_array_value (void) const
+    { return rep->bool_array_value (); }
+
   virtual charMatrix char_matrix_value (bool frc_str_conv = false) const
     { return rep->char_matrix_value (frc_str_conv); }
 
+  virtual charNDArray char_array_value (bool frc_str_conv = false) const
+    { return rep->char_array_value (frc_str_conv); }
+
   virtual string_vector all_strings (bool pad = false,
 				     bool force = false) const
     { return rep->all_strings (pad); }
 
   virtual std::string string_value (bool force = false) const
     { return rep->string_value (); }
 
   virtual Range range_value (void) const
@@ -517,22 +532,16 @@ public:
   virtual int stream_number (void) const;
 
   virtual octave_function *function_value (bool silent = false);
 
   virtual octave_fcn_handle *fcn_handle_value (bool silent = false);
 
   virtual octave_value_list list_value (void) const;
 
-  virtual bool bool_value (void) const
-    { return rep->bool_value (); }
-
-  virtual boolMatrix bool_matrix_value (void) const
-    { return rep->bool_matrix_value (); }
-
   ColumnVector column_vector_value (bool frc_str_conv = false,
 			     bool frc_vec_conv = false) const;
 
   ComplexColumnVector
   complex_column_vector_value (bool frc_str_conv = false,
 			bool frc_vec_conv = false) const;
 
   RowVector row_vector_value (bool frc_str_conv = false,
