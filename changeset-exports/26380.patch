# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546466816 28800
#      Wed Jan 02 14:06:56 2019 -0800
# Branch stable
# Node ID 21f0cfc0ffdb6f005cead3cf79391d16cae8ba5e
# Parent  8707e1a4a71bb25571cd96a36ff8430c7be1c66c
chol.cc: Fix static analyzer detected issues (bug #55347).

* chol.cc (chol2inv_internal): Remove unnecessary conditional test on info
which is always 0.

diff --git a/liboctave/numeric/chol.cc b/liboctave/numeric/chol.cc
--- a/liboctave/numeric/chol.cc
+++ b/liboctave/numeric/chol.cc
@@ -52,98 +52,96 @@ chol2inv_internal (const Matrix& r, bool
 
   octave_idx_type r_nr = r.rows ();
   octave_idx_type r_nc = r.cols ();
 
   if (r_nr != r_nc)
     (*current_liboctave_error_handler) ("chol2inv requires square matrix");
 
   F77_INT n = octave::to_f77_int (r_nc);
-  F77_INT info = 0;
+  F77_INT info;
 
   Matrix tmp = r;
   double *v = tmp.fortran_vec ();
 
-  if (info == 0)
+  if (is_upper)
+    F77_XFCN (dpotri, DPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
+                               v, n, info
+                               F77_CHAR_ARG_LEN (1)));
+  else
+    F77_XFCN (dpotri, DPOTRI, (F77_CONST_CHAR_ARG2 ("L", 1), n,
+                               v, n, info
+                               F77_CHAR_ARG_LEN (1)));
+
+  // FIXME: Should we check info exit value and possible report an error?
+
+  // If someone thinks of a more graceful way of doing this
+  // (or faster for that matter :-)), please let me know!
+
+  if (n > 1)
     {
       if (is_upper)
-        F77_XFCN (dpotri, DPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
-                                   v, n, info
-                                   F77_CHAR_ARG_LEN (1)));
+        for (octave_idx_type j = 0; j < r_nc; j++)
+          for (octave_idx_type i = j+1; i < r_nr; i++)
+            tmp.xelem (i, j) = tmp.xelem (j, i);
       else
-        F77_XFCN (dpotri, DPOTRI, (F77_CONST_CHAR_ARG2 ("L", 1), n,
-                                   v, n, info
-                                   F77_CHAR_ARG_LEN (1)));
-
-      // If someone thinks of a more graceful way of doing this (or
-      // faster for that matter :-)), please let me know!
+        for (octave_idx_type j = 0; j < r_nc; j++)
+          for (octave_idx_type i = j+1; i < r_nr; i++)
+            tmp.xelem (j, i) = tmp.xelem (i, j);
+    }
 
-      if (n > 1)
-        {
-          if (is_upper)
-            for (octave_idx_type j = 0; j < r_nc; j++)
-              for (octave_idx_type i = j+1; i < r_nr; i++)
-                tmp.xelem (i, j) = tmp.xelem (j, i);
-          else
-            for (octave_idx_type j = 0; j < r_nc; j++)
-              for (octave_idx_type i = j+1; i < r_nr; i++)
-                tmp.xelem (j, i) = tmp.xelem (i, j);
-        }
-
-      retval = tmp;
-    }
+  retval = tmp;
 
   return retval;
 }
 
 static FloatMatrix
 chol2inv_internal (const FloatMatrix& r, bool is_upper = true)
 {
   FloatMatrix retval;
 
   octave_idx_type r_nr = r.rows ();
   octave_idx_type r_nc = r.cols ();
 
   if (r_nr != r_nc)
     (*current_liboctave_error_handler) ("chol2inv requires square matrix");
 
   F77_INT n = octave::to_f77_int (r_nc);
-  F77_INT info = 0;
+  F77_INT info;
 
   FloatMatrix tmp = r;
   float *v = tmp.fortran_vec ();
 
-  if (info == 0)
+  if (is_upper)
+    F77_XFCN (spotri, SPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
+                               v, n, info
+                               F77_CHAR_ARG_LEN (1)));
+  else
+    F77_XFCN (spotri, SPOTRI, (F77_CONST_CHAR_ARG2 ("L", 1), n,
+                               v, n, info
+                               F77_CHAR_ARG_LEN (1)));
+
+  // FIXME: Should we check info exit value and possible report an error?
+
+  // If someone thinks of a more graceful way of doing this (or
+  // faster for that matter :-)), please let me know!
+
+  if (n > 1)
     {
       if (is_upper)
-        F77_XFCN (spotri, SPOTRI, (F77_CONST_CHAR_ARG2 ("U", 1), n,
-                                   v, n, info
-                                   F77_CHAR_ARG_LEN (1)));
+        for (octave_idx_type j = 0; j < r_nc; j++)
+          for (octave_idx_type i = j+1; i < r_nr; i++)
+            tmp.xelem (i, j) = tmp.xelem (j, i);
       else
-        F77_XFCN (spotri, SPOTRI, (F77_CONST_CHAR_ARG2 ("L", 1), n,
-                                   v, n, info
-                                   F77_CHAR_ARG_LEN (1)));
-
-      // If someone thinks of a more graceful way of doing this (or
-      // faster for that matter :-)), please let me know!
+        for (octave_idx_type j = 0; j < r_nc; j++)
+          for (octave_idx_type i = j+1; i < r_nr; i++)
+            tmp.xelem (j, i) = tmp.xelem (i, j);
+    }
 
-      if (n > 1)
-        {
-          if (is_upper)
-            for (octave_idx_type j = 0; j < r_nc; j++)
-              for (octave_idx_type i = j+1; i < r_nr; i++)
-                tmp.xelem (i, j) = tmp.xelem (j, i);
-          else
-            for (octave_idx_type j = 0; j < r_nc; j++)
-              for (octave_idx_type i = j+1; i < r_nr; i++)
-                tmp.xelem (j, i) = tmp.xelem (i, j);
-        }
-
-      retval = tmp;
-    }
+  retval = tmp;
 
   return retval;
 }
 
 static ComplexMatrix
 chol2inv_internal (const ComplexMatrix& r, bool is_upper = true)
 {
   ComplexMatrix retval;
