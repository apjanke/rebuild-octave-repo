# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1465857376 14400
#      Mon Jun 13 18:36:16 2016 -0400
# Node ID 69afa5dce885f2df59478fc4b3fd0526add6fd76
# Parent  00f1249f248301a5992aaf8d8d8ce04fe63c0504
hide gnulib hash function headers

* liboctave/wrappers/hash-wrappers.c,
liboctave/wrappers/hash-wrappers.h: New files.  Wrap gnulib hash
functions and hide gnulib headers.

* liboctave/util/module.mk, liboctave/wrappers/module.mk: Update.

* liboctave/util/lo-hash.cc, liboctave/util/lo-hash.h: New files.
Provide simple C++ interface to hashing functions.

* hash.cc: Use new hash function.

diff --git a/libinterp/corefcn/hash.cc b/libinterp/corefcn/hash.cc
--- a/libinterp/corefcn/hash.cc
+++ b/libinterp/corefcn/hash.cc
@@ -33,27 +33,24 @@ interface to Libcrypt.  It might be easi
 a new build dependency, so better stick to the "low-level" functions
 for now.
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <algorithm>
-#include <iomanip>
-#include <sstream>
+#include <string>
+
+#include "lo-hash.h"
 
 #include "defun.h"
-#include "md2.h"
-#include "md4.h"
-#include "md5.h"
-#include "sha1.h"
-#include "sha256.h"
-#include "sha512.h"
+#include "error.h"
+#include "ov.h"
+#include "ovl.h"
 
 DEFUN (hash, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} hash (@var{hfun}, @var{str})\n\
 Calculate the hash value of the string @var{str} using the hash function\n\
 @var{hfun}.\n\
 \n\
 The available hash functions are given in the table below.\n\
@@ -112,79 +109,20 @@ hash (\"md5\", fileread (file));\n\
 @end group\n\
 @end example\n\
 \n\
 @end deftypefn")
 {
   if (args.length () != 2)
     print_usage ();
 
-  std::string hfun = args(0).string_value ();
+  std::string hash_type = args(0).string_value ();
   std::string str = args(1).string_value ();
 
-  // Determine hash function used
-  std::transform(hfun.begin(), hfun.end(), hfun.begin(), ::toupper);
-
-  // Buffer with maximum size for all hash function
-  char result_buffer[SHA512_DIGEST_SIZE];
-
-  int result_buffer_len = 0;
-  if (hfun == "MD2")
-    {
-      md2_buffer (str.data (), str.length (), result_buffer);
-      result_buffer_len = MD2_DIGEST_SIZE;
-    }
-  else if (hfun == "MD4")
-    {
-      md4_buffer (str.data (), str.length (), result_buffer);
-      result_buffer_len = MD4_DIGEST_SIZE;
-    }
-  else if (hfun == "MD5")
-    {
-      md5_buffer (str.data (), str.length (), result_buffer);
-      result_buffer_len = MD5_DIGEST_SIZE;
-    }
-  else if (hfun == "SHA1")
-    {
-      sha1_buffer (str.data (), str.length (), result_buffer);
-      result_buffer_len = SHA1_DIGEST_SIZE;
-    }
-  else if (hfun == "SHA224")
-    {
-      sha224_buffer (str.data (), str.length (), result_buffer);
-      result_buffer_len = SHA224_DIGEST_SIZE;
-    }
-  else if (hfun == "SHA256")
-    {
-      sha256_buffer (str.data (), str.length (), result_buffer);
-      result_buffer_len = SHA256_DIGEST_SIZE;
-    }
-  else if (hfun == "SHA384")
-    {
-      sha384_buffer (str.data (), str.length (), result_buffer);
-      result_buffer_len = SHA384_DIGEST_SIZE;
-    }
-  else if (hfun == "SHA512")
-    {
-      sha512_buffer (str.data (), str.length (), result_buffer);
-      result_buffer_len = SHA512_DIGEST_SIZE;
-    }
-  else
-    error ("hash function not supported");
-
-  // Everything went fine, return formatted hash string
-  std::ostringstream os;
-  for (int i = 0; i < result_buffer_len; i++)
-    {
-      // Assure hex representation of one byte is written
-      os << std::hex << std::setw (2) << std::setfill ('0')
-         << (static_cast<int> (result_buffer[i]) & 0xFF);
-    }
-
-  return ovl (os.str ());
+  return ovl (octave::crypto::hash (hash_type, str));
 }
 
 /*
 ## MD2 test suite (RFC 1319)
 %!assert (hash ("md2", ""), "8350e5a3e24c153df2275c9f80692773")
 %!assert (hash ("md2", "a"), "32ec01ec4a6dac72c0ab96fb34c0b5d1")
 %!assert (hash ("md2", "abc"), "da853b0d3f88d99b30283a69e6ded6bb")
 %!assert (hash ("md2", "message digest"), "ab4f496bfb2a530b219ff33031fe06b0")
diff --git a/liboctave/util/lo-hash.cc b/liboctave/util/lo-hash.cc
new file mode 100644
--- /dev/null
+++ b/liboctave/util/lo-hash.cc
@@ -0,0 +1,142 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <algorithm>
+#include <iomanip>
+#include <sstream>
+#include <string>
+
+#include "hash-wrappers.h"
+#include "lo-error.h"
+#include "lo-hash.h"
+#include "oct-locbuf.h"
+
+namespace octave
+{
+  namespace crypto
+  {
+    std::string
+    hash (hash_fptr hash_fcn, const std::string& str, int result_buf_len)
+    {
+      OCTAVE_LOCAL_BUFFER (unsigned char, result_buf, result_buf_len);
+
+      hash_fcn (str.data (), str.length (), result_buf);
+
+      std::ostringstream buf;
+
+      for (int i = 0; i < result_buf_len; i++)
+        buf << std::hex << std::setw (2) << std::setfill ('0')
+            << (result_buf[i] & 0xFF);
+
+      return buf.str ();
+    }
+
+    int md2_digest_size (void) { return octave_md2_digest_size (); }
+    int md4_digest_size (void) { return octave_md4_digest_size (); }
+    int md5_digest_size (void) { return octave_md5_digest_size (); }
+    int sha1_digest_size (void) { return octave_sha1_digest_size (); }
+    int sha224_digest_size (void) { return octave_sha224_digest_size (); }
+    int sha256_digest_size (void) { return octave_sha256_digest_size (); }
+    int sha384_digest_size (void) { return octave_sha384_digest_size (); }
+    int sha512_digest_size (void) { return octave_sha512_digest_size (); }
+
+    std::string
+    md2_hash (const std::string& str)
+    {
+      return hash (octave_md2_buffer_wrapper, str, md2_digest_size ());
+    }
+
+    std::string
+    md4_hash (const std::string& str)
+    {
+      return hash (octave_md4_buffer_wrapper, str, md4_digest_size ());
+    }
+
+    std::string
+    md5_hash (const std::string& str)
+    {
+      return hash (octave_md5_buffer_wrapper, str, md5_digest_size ());
+    }
+
+    std::string
+    sha1_hash (const std::string& str)
+    {
+      return hash (octave_sha1_buffer_wrapper, str, sha1_digest_size ());
+    }
+
+    std::string
+    sha224_hash (const std::string& str)
+    {
+      return hash (octave_sha224_buffer_wrapper, str, sha224_digest_size ());
+    }
+
+    std::string
+    sha256_hash (const std::string& str)
+    {
+      return hash (octave_sha256_buffer_wrapper, str, sha256_digest_size ());
+    }
+
+    std::string
+    sha384_hash (const std::string& str)
+    {
+      return hash (octave_sha384_buffer_wrapper, str, sha384_digest_size ());
+    }
+
+    std::string
+    sha512_hash (const std::string& str)
+    {
+      return hash (octave_sha512_buffer_wrapper, str, sha512_digest_size ());
+    }
+
+    std::string
+    hash (const std::string& hash_type, const std::string& str)
+    {
+      std::string ht = hash_type;
+
+      std::transform (ht.begin (), ht.end (), ht.begin (), ::toupper);
+
+      if (ht == "MD2")
+        return md2_hash (str);
+      else if (ht == "MD4")
+        return md4_hash (str);
+      else if (ht == "MD5")
+        return md5_hash (str);
+      else if (ht == "SHA1")
+        return sha1_hash (str);
+      else if (ht == "SHA224")
+        return sha224_hash (str);
+      else if (ht == "SHA256")
+        return sha256_hash (str);
+      else if (ht == "SHA384")
+        return sha384_hash (str);
+      else if (ht == "SHA512")
+        return sha512_hash (str);
+      else
+        (*current_liboctave_error_handler)
+          ("hash function '%s' not supported", hash_type.c_str ());
+    }
+  }
+}
diff --git a/liboctave/util/lo-hash.h b/liboctave/util/lo-hash.h
new file mode 100644
--- /dev/null
+++ b/liboctave/util/lo-hash.h
@@ -0,0 +1,61 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_lo_hash_h)
+#define octave_lo_hash_h 1
+
+#include "octave-config.h"
+
+#include <string>
+
+namespace octave
+{
+  namespace crypto
+  {
+    typedef void * (hash_fptr) (const char *buffer, size_t len, void *res);
+
+    std::string
+    hash (hash_fptr hash_fcn, const std::string& str, int result_buf_len);
+
+    int md2_digest_size (void);
+    int md4_digest_size (void);
+    int md5_digest_size (void);
+    int sha1_digest_size (void);
+    int sha224_digest_size (void);
+    int sha256_digest_size (void);
+    int sha384_digest_size (void);
+    int sha512_digest_size (void);
+
+    std::string md2_hash (const std::string& str);
+    std::string md4_hash (const std::string& str);
+    std::string md5_hash (const std::string& str);
+    std::string sha1_hash (const std::string& str);
+    std::string sha224_hash (const std::string& str);
+    std::string sha256_hash (const std::string& str);
+    std::string sha384_hash (const std::string& str);
+    std::string sha512_hash (const std::string& str);
+
+    std::string hash (const std::string& hash_type, const std::string& str);
+  }
+}
+
+#endif
diff --git a/liboctave/util/module.mk b/liboctave/util/module.mk
--- a/liboctave/util/module.mk
+++ b/liboctave/util/module.mk
@@ -6,16 +6,17 @@ UTIL_INC = \
   liboctave/util/cmd-edit.h \
   liboctave/util/cmd-hist.h \
   liboctave/util/data-conv.h \
   liboctave/util/functor.h \
   liboctave/util/glob-match.h \
   liboctave/util/lo-array-errwarn.h \
   liboctave/util/lo-array-gripes.h \
   liboctave/util/lo-cutils.h \
+  liboctave/util/lo-hash.h \
   liboctave/util/lo-ieee.h \
   liboctave/util/lo-macros.h \
   liboctave/util/lo-math.h \
   liboctave/util/lo-traits.h \
   liboctave/util/lo-utils.h \
   liboctave/util/oct-alloc.h \
   liboctave/util/oct-base64.h \
   liboctave/util/oct-binmap.h \
@@ -54,16 +55,17 @@ UTIL_C_SRC = \
 UTIL_SRC = \
   liboctave/util/cmd-edit.cc \
   liboctave/util/cmd-hist.cc \
   liboctave/util/data-conv.cc \
   liboctave/util/glob-match.cc \
   liboctave/util/kpse.cc \
   liboctave/util/lo-array-errwarn.cc \
   liboctave/util/lo-array-gripes.cc \
+  liboctave/util/lo-hash.cc \
   liboctave/util/lo-ieee.cc \
   liboctave/util/lo-utils.cc \
   liboctave/util/oct-base64.cc \
   liboctave/util/oct-glob.cc \
   liboctave/util/oct-inttypes.cc \
   liboctave/util/oct-locbuf.cc \
   liboctave/util/oct-mutex.cc \
   liboctave/util/oct-shlib.cc \
diff --git a/liboctave/wrappers/hash-wrappers.c b/liboctave/wrappers/hash-wrappers.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/hash-wrappers.c
@@ -0,0 +1,96 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// The hash functions are provided by gnulib.  We don't include gnulib
+// headers directly in Octave's C++ source files to avoid problems that
+// may be caused by the way that gnulib overrides standard library
+// functions.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include "md2.h"
+#include "md4.h"
+#include "md5.h"
+#include "sha1.h"
+#include "sha256.h"
+#include "sha512.h"
+
+#include "hash-wrappers.h"
+
+int octave_md2_digest_size (void) { return MD2_DIGEST_SIZE; }
+int octave_md4_digest_size (void) { return MD4_DIGEST_SIZE; }
+int octave_md5_digest_size (void) { return MD5_DIGEST_SIZE; }
+int octave_sha1_digest_size (void) { return SHA1_DIGEST_SIZE; }
+int octave_sha224_digest_size (void) { return SHA224_DIGEST_SIZE; }
+int octave_sha256_digest_size (void) { return SHA256_DIGEST_SIZE; }
+int octave_sha384_digest_size (void) { return SHA384_DIGEST_SIZE; }
+int octave_sha512_digest_size (void) { return SHA512_DIGEST_SIZE; }
+
+void *
+octave_md2_buffer_wrapper (const char *buf, size_t len, void *res)
+{
+  return md2_buffer (buf, len, res);
+}
+
+void *
+octave_md4_buffer_wrapper (const char *buf, size_t len, void *res)
+{
+  return md4_buffer (buf, len, res);
+}
+
+void *
+octave_md5_buffer_wrapper (const char *buf, size_t len, void *res)
+{
+  return md5_buffer (buf, len, res);
+}
+
+void *
+octave_sha1_buffer_wrapper (const char *buf, size_t len, void *res)
+{
+  return sha1_buffer (buf, len, res);
+}
+
+void *
+octave_sha224_buffer_wrapper (const char *buf, size_t len, void *res)
+{
+  return sha224_buffer (buf, len, res);
+}
+
+void *
+octave_sha256_buffer_wrapper (const char *buf, size_t len, void *res)
+{
+  return sha256_buffer (buf, len, res);
+}
+
+void *
+octave_sha384_buffer_wrapper (const char *buf, size_t len, void *res)
+{
+  return sha384_buffer (buf, len, res);
+}
+
+void *
+octave_sha512_buffer_wrapper (const char *buf, size_t len, void *res)
+{
+  return sha512_buffer (buf, len, res);
+}
diff --git a/liboctave/wrappers/hash-wrappers.h b/liboctave/wrappers/hash-wrappers.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/hash-wrappers.h
@@ -0,0 +1,67 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_hash_wrappers_h)
+#define octave_hash_wrappers_h 1
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+extern int octave_md2_digest_size (void);
+extern int octave_md4_digest_size (void);
+extern int octave_md5_digest_size (void);
+extern int octave_sha1_digest_size (void);
+extern int octave_sha224_digest_size (void);
+extern int octave_sha256_digest_size (void);
+extern int octave_sha384_digest_size (void);
+extern int octave_sha512_digest_size (void);
+
+extern void *
+octave_md2_buffer_wrapper (const char *buf, size_t len, void *res);
+
+extern void *
+octave_md4_buffer_wrapper (const char *buf, size_t len, void *res);
+
+extern void *
+octave_md5_buffer_wrapper (const char *buf, size_t len, void *res);
+
+extern void *
+octave_sha1_buffer_wrapper (const char *buf, size_t len, void *res);
+
+extern void *
+octave_sha224_buffer_wrapper (const char *buf, size_t len, void *res);
+
+extern void *
+octave_sha256_buffer_wrapper (const char *buf, size_t len, void *res);
+
+extern void *
+octave_sha384_buffer_wrapper (const char *buf, size_t len, void *res);
+
+extern void *
+octave_sha512_buffer_wrapper (const char *buf, size_t len, void *res);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
diff --git a/liboctave/wrappers/module.mk b/liboctave/wrappers/module.mk
--- a/liboctave/wrappers/module.mk
+++ b/liboctave/wrappers/module.mk
@@ -1,23 +1,25 @@
 NOINSTALL_WRAPPERS_INC = \
   liboctave/wrappers/canonicalize-file-name-wrapper.h \
   liboctave/wrappers/gen-tempname-wrapper.h \
+  liboctave/wrappers/hash-wrappers.h \
   liboctave/wrappers/mkostemp-wrapper.h \
   liboctave/wrappers/nanosleep-wrapper.h \
   liboctave/wrappers/nproc-wrapper.h \
   liboctave/wrappers/putenv-wrapper.h \
   liboctave/wrappers/strftime-wrapper.h \
   liboctave/wrappers/strptime-wrapper.h \
   liboctave/wrappers/unsetenv-wrapper.h \
   liboctave/wrappers/vasprintf-wrapper.h
 
 WRAPPERS_SRC = \
   liboctave/wrappers/canonicalize-file-name-wrapper.c \
   liboctave/wrappers/gen-tempname-wrapper.c \
+  liboctave/wrappers/hash-wrappers.c \
   liboctave/wrappers/mkostemp-wrapper.c \
   liboctave/wrappers/nanosleep-wrapper.c \
   liboctave/wrappers/nproc-wrapper.c \
   liboctave/wrappers/putenv-wrapper.c \
   liboctave/wrappers/strftime-wrapper.c \
   liboctave/wrappers/strptime-wrapper.c \
   liboctave/wrappers/unsetenv-wrapper.c \
   liboctave/wrappers/vasprintf-wrapper.c
