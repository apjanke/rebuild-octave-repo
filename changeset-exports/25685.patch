# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1532636130 14400
#      Thu Jul 26 16:15:30 2018 -0400
# Node ID f8ef00a58768762326a370435a06d15188616fd7
# Parent  54e79a3785d713fe087c5ea5e62993cbcace655d
# Parent  a5263875ffdcc8380d70268e92d37a32f14491ad
maint: Merge stable to default.

diff --git a/liboctave/wrappers/fpucw-wrappers.c b/liboctave/wrappers/fpucw-wrappers.c
--- a/liboctave/wrappers/fpucw-wrappers.c
+++ b/liboctave/wrappers/fpucw-wrappers.c
@@ -49,25 +49,29 @@ void
 octave_set_default_fpucw (void)
 {
   fpucw_t cw = GET_FPUCW ();
 
   if (cw != _FPU_DEFAULT)
     SET_FPUCW (_FPU_DEFAULT);
 }
 
-// OLDCW is the name used by the fpucw.h macros.
+// OLDCW is the name used by the fpucw.h macros and gnulib doesn't give
+// us a choice.  We are also assuming that fpucw_t is unsigned int.
 
 unsigned int
 octave_begin_long_double_rounding (void)
 {
-  fpucw_t oldcw = 0;
+  DECL_LONG_DOUBLE_ROUNDING
 
   BEGIN_LONG_DOUBLE_ROUNDING ();
 
   return oldcw;
 }
 
 void
 octave_end_long_double_rounding (unsigned int oldcw)
 {
   END_LONG_DOUBLE_ROUNDING ();
+
+  // It might be unused.
+  octave_unused_parameter (oldcw);
 }
diff --git a/liboctave/wrappers/signal-wrappers.c b/liboctave/wrappers/signal-wrappers.c
--- a/liboctave/wrappers/signal-wrappers.c
+++ b/liboctave/wrappers/signal-wrappers.c
@@ -728,23 +728,24 @@ print_sigset (FILE *of, const char *pref
   int sig;
   int cnt = 0;
 
   for (sig = 1; sig < NSIG; sig++)
     {
       if (sigismember (sigset, sig))
         {
           cnt++;
-          fprintf (of, "%ld: %s%d (%s)\n", pthread_self (), prefix, sig,
-                   strsignal (sig));
+          fprintf (of, "%ld: %s%d (%s)\n", (long int) pthread_self (),
+                   prefix, sig, strsignal (sig));
         }
     }
 
   if (cnt == 0)
-    fprintf (of, "%ld: %s<empty signal set>\n", pthread_self (), prefix);
+    fprintf (of, "%ld: %s<empty signal set>\n", (long int) pthread_self (),
+             prefix);
 }
 
 static int
 print_sigmask (FILE *of, const char *msg)
 {
   sigset_t sigmask;
 
   if (msg)
