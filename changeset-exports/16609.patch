# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1367643704 14400
#      Sat May 04 01:01:44 2013 -0400
# Node ID 6f7940e363227e9f231f4f7b1fc402b1aae44ac1
# Parent  739d7eb97b85b36f117ba9b3933cdf42eea24d51
improve handling of cursor blinking for unix GUI terminal window

* QUnixTerminalImpl.h, QUnixTerminalImpl.cpp
(QUnixTerminalImpl::focusInEvent): Delete.
* TerminalView.h, TerminalView.cpp (TerminalView::drawCursor):
Don't check focus.
(TerminalView::setBlinkingCursorState): New function.
(TerminalView::setBlinkingCursor): Use it.
(TerminalView::focusInEvent, TerminalView::focusOutEvent):
New functions.
(TerminalView::blinkCursorEvent): Only toggle state if
_hasBlinkingCursor is true.

diff --git a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.cpp
@@ -130,24 +130,16 @@ void QUnixTerminalImpl::setCursorType(Cu
     switch(type) {
         case UnderlineCursor: m_terminalView->setKeyboardCursorShape(TerminalView::UnderlineCursor); break;
         case BlockCursor: m_terminalView->setKeyboardCursorShape(TerminalView::BlockCursor); break;
         case IBeamCursor: m_terminalView->setKeyboardCursorShape(TerminalView::IBeamCursor); break;
     }
     m_terminalView->setBlinkingCursor(blinking);
 }
 
-void QUnixTerminalImpl::focusInEvent(QFocusEvent *focusEvent)
-{
-    Q_UNUSED(focusEvent);
-    m_terminalView->updateImage();
-    m_terminalView->repaint();
-    m_terminalView->update();
-}
-
 void QUnixTerminalImpl::showEvent(QShowEvent *)
 {
     m_terminalView->updateImage();
     m_terminalView->repaint();
     m_terminalView->update();
 }
 
 void QUnixTerminalImpl::resizeEvent(QResizeEvent*)
diff --git a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
--- a/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
+++ b/libgui/qterminal/libqterminal/unix/QUnixTerminalImpl.h
@@ -43,17 +43,16 @@ public:
 
     void setCursorType(CursorType type, bool blinking);
 
 public slots:
     void copyClipboard();
     void pasteClipboard();
 
 protected:
-    void focusInEvent(QFocusEvent *focusEvent);
     void showEvent(QShowEvent *);
     virtual void resizeEvent(QResizeEvent *);   
 
 private:
     void initialize();
     void connectToPty();
 
     TerminalView *m_terminalView;
diff --git a/libgui/qterminal/libqterminal/unix/TerminalView.cpp b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
--- a/libgui/qterminal/libqterminal/unix/TerminalView.cpp
+++ b/libgui/qterminal/libqterminal/unix/TerminalView.cpp
@@ -525,17 +525,17 @@ void TerminalView::drawCursor(QPainter& 
                               const QRect& rect,
                               const QColor& foregroundColor,
                               const QColor& /*backgroundColor*/,
                               bool& invertCharacterColor)
 {
   QRect cursorRect = rect;
   cursorRect.setHeight(_fontHeight - _lineSpacing - 1);
 
-  if (!_cursorBlinking || !hasFocus())
+  if (!_cursorBlinking)
     {
       if ( _cursorColor.isValid() )
         painter.setPen(_cursorColor);
       else {
           painter.setPen(foregroundColor);
         }
 
       if ( _cursorShape == BlockCursor )
@@ -1016,26 +1016,29 @@ void TerminalView::showResizeNotificatio
       _resizeTimer->start(1000);
     }
 }
 
 void TerminalView::setBlinkingCursor(bool blink)
 {
   _hasBlinkingCursor=blink;
 
+  setBlinkingCursorState(blink);
+}
+
+void TerminalView::setBlinkingCursorState(bool blink)
+{
   if (blink && !_blinkCursorTimer->isActive())
     _blinkCursorTimer->start(BLINK_DELAY);
 
   if (!blink && _blinkCursorTimer->isActive())
     {
       _blinkCursorTimer->stop();
       if (_cursorBlinking)
         blinkCursorEvent();
-      else
-        _cursorBlinking = false;
     }
 }
 
 void TerminalView::paintEvent( QPaintEvent* pe )
 {
   updateImage();
   //qDebug("%s %d paintEvent", __FILE__, __LINE__);
   QPainter paint(this);
@@ -1048,16 +1051,35 @@ void TerminalView::paintEvent( QPaintEve
     }
   //    drawBackground(paint,contentsRect(),palette().background().color(),	true /* use opacity setting */);
   //    drawContents(paint, contentsRect());
   drawInputMethodPreeditString(paint,preeditRect());
   paintFilters(paint);
   paint.end();
 }
 
+void TerminalView::focusInEvent(QFocusEvent *focusEvent)
+{
+  setBlinkingCursorState(true);
+  updateImage();
+  repaint();
+  update();
+
+  QWidget::focusInEvent(focusEvent);
+}
+
+void TerminalView::focusOutEvent(QFocusEvent *focusEvent)
+{
+  // Force the cursor to be redrawn.
+  _cursorBlinking = true;
+  setBlinkingCursorState(false);
+
+  QWidget::focusOutEvent(focusEvent);
+}
+
 QPoint TerminalView::cursorPosition() const
 {
   if (_screenWindow)
     return _screenWindow->cursorPosition();
   else
     return QPoint(0,0);
 }
 
@@ -1338,17 +1360,20 @@ QRect TerminalView::imageToWidget(const 
   result.setWidth( _fontWidth * imageArea.width() );
   result.setHeight( _fontHeight * imageArea.height() );
 
   return result;
 }
 
 void TerminalView::blinkCursorEvent()
 {
-  _cursorBlinking = !_cursorBlinking;
+  if (_hasBlinkingCursor)
+    _cursorBlinking = !_cursorBlinking;
+  else
+    _cursorBlinking = false;
 
   QRect cursorRect = imageToWidget( QRect(cursorPosition(),QSize(1,1)) );
 
   update(cursorRect);
 }
 
 /* ------------------------------------------------------------------------- */
 /*                                                                           */
diff --git a/libgui/qterminal/libqterminal/unix/TerminalView.h b/libgui/qterminal/libqterminal/unix/TerminalView.h
--- a/libgui/qterminal/libqterminal/unix/TerminalView.h
+++ b/libgui/qterminal/libqterminal/unix/TerminalView.h
@@ -145,16 +145,17 @@ public:
      * at the given @p position.
      */
     QList<QAction*> filterActions(const QPoint& position);
 
     /** Returns true if the cursor is set to blink or false otherwise. */
     bool blinkingCursor() { return _hasBlinkingCursor; }
     /** Specifies whether or not the cursor blinks. */
     void setBlinkingCursor(bool blink);
+    void setBlinkingCursorState(bool blink);
 
     void setCtrlDrag(bool enable) { _ctrlDrag=enable; }
     bool ctrlDrag() { return _ctrlDrag; }
 
    /**
      *  This enum describes the methods for selecting text when
     *  the user triple-clicks within the display.
     */
@@ -473,16 +474,19 @@ signals:
 
    void tripleClicked( const QString& text );
 
 protected:
     virtual bool event( QEvent * );
 
     virtual void paintEvent( QPaintEvent * );
 
+    void focusInEvent(QFocusEvent *focusEvent);
+    void focusOutEvent(QFocusEvent *focusEvent);
+
     virtual void showEvent(QShowEvent*);
     virtual void hideEvent(QHideEvent*);
     virtual void resizeEvent(QResizeEvent*);
 
     virtual void fontChange(const QFont &font);
 
     virtual void keyPressEvent(QKeyEvent* event);
     virtual void mouseDoubleClickEvent(QMouseEvent* ev);
