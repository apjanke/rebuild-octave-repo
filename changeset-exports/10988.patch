# HG changeset patch
# User John Swensen <jpswensen@gmail.com>
# Date 1284660441 14400
#      Thu Sep 16 14:07:21 2010 -0400
# Node ID f1c4527b40249a185c0c97e36099f2d106add862
# Parent  eec74ee00b320cbc174f7c32abcb7bdef5673b09
Removed unnecessary for loop and fixed a typo in my last Changelog entry

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,30 +1,35 @@
+2010-09-16  John P. Swensen  <jpswensen@gmail.com>
+
+	* DLD-FUNCTIONS/))magick_read__.cc (write_image): Remove
+	unnecessary for loop to set image format.
+
 2010-09-16  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/svd.cc (Fsvd): Delete assert to avoid
 	"comparison is always false due to limited range of data type"
 	warning from GCC.
 
 	* utils.cc (octave_vsnprintf): Declare nchars volatile to avoid
 	GCC warning.
 
 	* pr-output.cc (octave_print_internal): Avoid uninitialized
 	variable warning from GCC.
 
 2010-09-16  John Swensen  <jpswensen@gmail.com>
 
-	* DLD-FUNCTIONS/__magick_read__.cc (write_images): Allow
+	* DLD-FUNCTIONS/__magick_read__.cc (write_image): Allow
 	arbitrary extensions with format specifier.
 
 2010-09-15  John W. Eaton  <jwe@octave.org>
 
 	* load-path.cc (Faddpath, Frmpath): Document path arguments.
 
-2010-09-15  John Swensen <jpswensen@gmail.com>
+2010-09-15  John Swensen  <jpswensen@gmail.com>
 
 	* DLD-FUNCTIONS/__magick_read__.cc (write_image): Allow writing
 	arbitrary image types to filenames without an extension (bug #30784).
 
 2010-09-14  John W. Eaton  <jwe@octave.org>
 
 	* variables.cc (symbol_exist): If looking for any type of file
 	or "file", return 7 for directories and 2 for all other types of
diff --git a/src/DLD-FUNCTIONS/__magick_read__.cc b/src/DLD-FUNCTIONS/__magick_read__.cc
--- a/src/DLD-FUNCTIONS/__magick_read__.cc
+++ b/src/DLD-FUNCTIONS/__magick_read__.cc
@@ -829,19 +829,16 @@ write_image (const std::string& filename
       if (fmt == "jpg" || fmt == "jpeg")
         jpg_settings (imvec, options, has_map);
       else
         warning ("warning: your parameter(s) currently not supported");
     }
 
   try
     {
-      for (size_t i = 0; i < imvec.size (); i++)
-        imvec[i].magick (fmt);
-          
       Magick::writeImages (imvec.begin (), imvec.end (), fmt + ":" + filename);
     }
   catch (Magick::Warning& w)
     {
       warning ("Magick++ warning: %s", w.what ());
     }
   catch (Magick::ErrorCoder& e)
     {
