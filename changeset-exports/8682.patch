# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1233843359 -3600
#      Thu Feb 05 15:15:59 2009 +0100
# Node ID 38968f09f7ca5c02c8ff93406cc016ea3edb54b2
# Parent  72b1f1eece700549142dae8237fc9f7ba22f98b8
optimize Octave_map::index

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-02-05  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-map.cc (Octave_map::index): Optimize.
+
 2009-02-05  Jaroslav Hajek  <highegg@gmail.com>
 
 	* OPERATORS/op-cm-cs.cc: Use scalar_value in scalar-to-matrix
 	indexed assignments.
 	* OPERATORS/op-fcm-fcs.cc: Ditto.
 	* OPERATORS/op-fm-fs.cc: Ditto.
 	* OPERATORS/op-m-s.cc: Ditto.
 	* OPERATORS/op-int.h (OCTAVE_MS_INT_ASSIGN_OPS): Use homogeneous
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -470,33 +470,44 @@ Octave_map::assign (const std::string& k
 
   return *this;
 }
 
 Octave_map
 Octave_map::index (const octave_value_list& idx, bool resize_ok) const
 {
   Octave_map retval;
-
-  if (idx.length () > 0)
+  octave_idx_type n_idx = idx.length ();
+  if (n_idx > 0)
     {
-      for (const_iterator p = begin (); p != end (); p++)
-	{
-          // FIXME: this is sub-optimal: idx is converted multiple times.
-          // Need to convert here and use ArrayN<octave_value>::index.
-	  Cell tmp = contents(p).index (idx, resize_ok);
+      Array<idx_vector> ra_idx (n_idx);
+      for (octave_idx_type i = 0; i < n_idx; i++)
+        {
+          ra_idx(i) = idx(i).index_vector ();
+          if (error_state)
+            break;
+        }
 
-	  if (error_state)
-	    break;
+      if (! error_state)
+        {
+          for (const_iterator p = begin (); p != end (); p++)
+            {
+
+              Cell tmp = contents (p);
+              tmp = tmp.ArrayN<octave_value>::index (ra_idx, resize_ok);
 
-	  retval.assign (key(p), tmp);
-	}
+              if (error_state)
+                break;
 
-      // Preserve order of keys.
-      retval.key_list = key_list;
+              retval.assign (key(p), tmp);
+            }
+
+          // Preserve order of keys.
+          retval.key_list = key_list;
+        }
     }
   else
     retval = *this;
 
   return retval;
 }
 
 /*
