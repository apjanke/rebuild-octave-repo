# HG changeset patch
# User jwe
# Date 1055790551 0
#      Mon Jun 16 19:09:11 2003 +0000
# Node ID 067160691cc9fffe555f51f245b1662824846289
# Parent  8040775cf0a90f84c73f3a7431629800130d0d68
[project @ 2003-06-16 19:09:11 by jwe]

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,14 @@
+2003-06-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dasrt/ddasrt.f (DDASRT): Set LMXSTP to 21 and LIPVT to 22 to
+	avoid conflict with LLAST in DRCHECK.  Change docs for INFO(12)
+	and LIW.
+
 2003-05-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in, misc/Makefile.in: Handle DESTDIR.
 
 2003-02-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* blas/sgemm.f, blas/strsm.f, blas/ssyrk.f, blas/sscal.f,
 	blas/sgemv.f, blas/sdot.f: New files.
diff --git a/libcruft/dasrt/ddasrt.f b/libcruft/dasrt/ddasrt.f
--- a/libcruft/dasrt/ddasrt.f
+++ b/libcruft/dasrt/ddasrt.f
@@ -385,17 +385,17 @@ C                       that there must 
 C                       F(T,Y,YPRIME) = 0.)
 C
 C        INFO(12) --Maximum number of steps.
 C          ****   Do you want to let DDASRT use the default limit for
 C                 the number of steps?
 C                 Yes - Set INFO(11) = 0
 C                  No - Set INFO(11) = 1,
 C                       and define the maximum number of steps
-C                       by setting IWORK(19)=MXSTEP
+C                       by setting IWORK(21)=MXSTEP
 C
 C   RTOL, ATOL -- You must assign relative (RTOL) and absolute (ATOL
 C               error tolerances to tell the code how accurately you
 C               want the solution to be computed. They must be defined
 C               as variables because the code may change them. You
 C               have two choices --
 C                     Both RTOL and ATOL are scalars. (INFO(2)=0)
 C                     Both RTOL and ATOL are vectors. (INFO(2)=1)
@@ -451,17 +451,17 @@ C                     LRW .GE. 50+(MAXOR
 C                           +2*(NEQ/(ML+MU+1)+1)+3*NG
 C               for the banded finite-difference-generated JACOBIAN case
 C               (when INFO(5)=0 and INFO(6)=1)
 C
 C  IWORK(*) --  Dimension this integer work array of length LIW in
 C               your calling program.
 C
 C  LIW -- Set it to the declared length of the IWORK array.
-C               you must have LIW .GE. 20+NEQ
+C               you must have LIW .GE. 21+NEQ
 C
 C  RPAR, IPAR -- These are parameter arrays, of real and integer
 C               type, respectively. You can use them for communication
 C               between your program that calls DDASRT and the
 C               RES subroutine (and the JAC subroutine). They are not
 C               altered by DDASRT. If you do not need RPAR or IPAR,
 C               ignore these parameters by treating them as dummy
 C               arguments. If you do choose to use them, dimension
@@ -872,17 +872,17 @@ C
       DIMENSION RWORK(*),IWORK(*)
       DIMENSION RTOL(*),ATOL(*)
       DIMENSION RPAR(*),IPAR(*)
       CHARACTER MSG*80
 C
 C     SET POINTERS INTO IWORK
       PARAMETER (LML=1, LMU=2, LMXORD=3, LMTYPE=4, LNST=11,
      *  LNRE=12, LNJE=13, LETF=14, LCTF=15, LNGE=16, LNPD=17,
-     *  LIRFND=18, LMXSTP=19, LIPVT=21, LJCALC=5, LPHASE=6, LK=7,
+     *  LIRFND=18, LMXSTP=21, LIPVT=22, LJCALC=5, LPHASE=6, LK=7,
      *  LKOLD=8, LNS=9, LNSTL=10, LIWM=1)
 C
 C     SET RELATIVE OFFSET INTO RWORK
       PARAMETER (NPD=1)
 C
 C     SET POINTERS INTO RWORK
       PARAMETER (LTSTOP=1, LHMAX=2, LH=3, LTN=4,
      *  LCJ=5, LCJOLD=6, LHOLD=7, LS=8, LROUND=9,
@@ -930,17 +930,17 @@ 40    IF(IWORK(LML).LT.0.OR.IWORK(LML).G
          MBAND=IWORK(LML)+IWORK(LMU)+1
          MSAVE=(NEQ/MBAND)+1
          LENRW=50+(IWORK(LMXORD)+4)*NEQ+LENPD+2*MSAVE+3*NG
          GO TO 60
 50       IWORK(LMTYPE)=4
          LENRW=50+(IWORK(LMXORD)+4)*NEQ+LENPD+3*NG
 C
 C     CHECK LENGTHS OF RWORK AND IWORK
-60    LENIW=20+NEQ
+60    LENIW=21+NEQ
       IWORK(LNPD)=LENPD
       IF(LRW.LT.LENRW)GO TO 704
       IF(LIW.LT.LENIW)GO TO 705
 C
 C     CHECK TO SEE THAT TOUT IS DIFFERENT FROM T
 C     Also check to see that NG is larger than 0.
       IF(TOUT .EQ. T)GO TO 719
       IF(NG .LT. 0) GO TO 730
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2003-06-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DASRT.cc (DASRT::integrate): Set liw to 21 + n, not 20 + n.
+	Store step limit in iwork(20), not iwork(18).
+
 2003-05-16  Paul Kienzle <pkienzle@users.sf.net>
 
 	* oct-rand.cc: Use liboctave's clock layer instead of the system clock.
 
 2003-05-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in: Handle DESTDIR.
 
diff --git a/liboctave/DASRT.cc b/liboctave/DASRT.cc
--- a/liboctave/DASRT.cc
+++ b/liboctave/DASRT.cc
@@ -191,17 +191,17 @@ DASRT::integrate (double tout)
 	    {
 	      (*current_liboctave_error_handler)
 		("dassl: invalid value for maximum order");
 	      integration_error = true;
 	      return;
 	    }
 	}
 
-      liw = 20 + n;
+      liw = 21 + n;
       lrw = 50 + 9*n + n*n + 3*ng;
 
       iwork.resize (liw);
       rwork.resize (lrw);
 
       info(0) = 0;
 
       if (stop_time_set)
@@ -277,17 +277,17 @@ DASRT::integrate (double tout)
 	  info(7) = 1;
 	}
       else
 	info(7) = 0;
 
       if (step_limit () >= 0)
 	{
 	  info(11) = 1;
-	  iwork(18) = step_limit ();
+	  iwork(20) = step_limit ();
 	}
       else
 	info(11) = 0;
 
       abs_tol = absolute_tolerance ();
       rel_tol = relative_tolerance ();
 
       int abs_tol_len = abs_tol.length ();
