# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498560102 14400
#      Tue Jun 27 06:41:42 2017 -0400
# Node ID 6683451b75b21742df1c16ac1180ccfd372c4f91
# Parent  4c597585ff522f72210f12cba52c69e71132a224
move Vstring_fill_char to tree_evaluator class

* pt-mat.h, pt-mat.cc (Vstring_fill_char): Delete.
* pt-eval.h, pt-eval.cc (tree_evaluator::m_string_fill_char):
New variable.
(tree_evaluator::string_fill_char): New functions.
(Fstring_fill_char): Move here from pt-mat.cc.
(tree_evaluator::visit_matrix): Use m_string_fill_char instead of
Vstring_fill_char.
* ov-usr-fcn.cc (octave_user_function::bind_automatic_vars):
Access string_fill_char through tree_evaluator.

diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -55,19 +55,16 @@ along with Octave; see the file COPYING.
 #include "parse.h"
 #include "profiler.h"
 #include "variables.h"
 #include "ov-fcn-handle.h"
 
 // Whether to optimize subsasgn method calls.
 static bool Voptimize_subsasgn_calls = true;
 
-// The character to fill with when creating string arrays.
-extern char Vstring_fill_char;   // see pt-mat.cc
-
 std::map<std::string, octave_value>
 octave_user_code::subfunctions (void) const
 {
   return std::map<std::string, octave_value> ();
 }
 
 // User defined scripts.
 
@@ -726,17 +723,18 @@ octave_user_function::bind_automatic_var
 {
   if (! arg_names.empty ())
     {
       // It is better to save this in the hidden variable .argn. and
       // then use that in the inputname function instead of using argn,
       // which might be redefined in a function.  Keep the old argn name
       // for backward compatibility of functions that use it directly.
 
-      m_scope->force_assign ("argn", charMatrix (arg_names, Vstring_fill_char));
+      charMatrix chm (arg_names, tw.string_fill_char ());
+      m_scope->force_assign ("argn", chm);
       m_scope->force_assign (".argn.", Cell (arg_names));
 
       m_scope->mark_hidden (".argn.");
 
       m_scope->mark_automatic ("argn");
       m_scope->mark_automatic (".argn.");
     }
 
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -1466,17 +1466,17 @@ namespace octave
             char type = (all_dq_strings_p ? '"' : '\'');
 
             if (! all_strings_p)
               warn_implicit_conversion ("Octave:num-to-str",
                                         "numeric", result_type);
             else
               maybe_warn_string_concat (all_dq_strings_p, all_sq_strings_p);
 
-            charNDArray result (dv, Vstring_fill_char);
+            charNDArray result (dv, m_string_fill_char);
 
             single_type_concat<charNDArray> (result, tmp);
 
             retval = octave_value (result, type);
           }
         else if (result_type == "logical")
           {
             if (any_sparse_p)
@@ -2721,16 +2721,23 @@ namespace octave
   }
 
   octave_value
   tree_evaluator::silent_functions (const octave_value_list& args, int nargout)
   {
     return set_internal_variable (m_silent_functions, args, nargout,
                                   "silent_functions");
   }
+
+  octave_value
+  tree_evaluator::string_fill_char (const octave_value_list& args, int nargout)
+  {
+    return set_internal_variable (m_string_fill_char, args, nargout,
+                                  "string_fill_char");
+  }
 }
 
 DEFMETHOD (max_recursion_depth, interp, args, nargout,
            doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} max_recursion_depth ()
 @deftypefnx {} {@var{old_val} =} max_recursion_depth (@var{new_val})
 @deftypefnx {} {} max_recursion_depth (@var{new_val}, "local")
 Query or set the internal limit on the number of times a function may
@@ -2789,8 +2796,57 @@ The original variable value is restored 
 %! old_val = silent_functions (! orig_val);
 %! assert (orig_val, old_val);
 %! assert (silent_functions (), ! orig_val);
 %! silent_functions (orig_val);
 %! assert (silent_functions (), orig_val);
 
 %!error (silent_functions (1, 2))
 */
+
+DEFMETHOD (string_fill_char, interp, args, nargout,
+           doc: /* -*- texinfo -*-
+@deftypefn  {} {@var{val} =} string_fill_char ()
+@deftypefnx {} {@var{old_val} =} string_fill_char (@var{new_val})
+@deftypefnx {} {} string_fill_char (@var{new_val}, "local")
+Query or set the internal variable used to pad all rows of a character
+matrix to the same length.
+
+The value must be a single character and the default is @qcode{" "} (a
+single space).  For example:
+
+@example
+@group
+string_fill_char ("X");
+[ "these"; "are"; "strings" ]
+      @result{}  "theseXX"
+          "areXXXX"
+          "strings"
+@end group
+@end example
+
+When called from inside a function with the @qcode{"local"} option, the
+variable is changed locally for the function and any subroutines it calls.
+The original variable value is restored when exiting the function.
+@end deftypefn */)
+{
+  octave::tree_evaluator& tw = interp.get_evaluator ();
+
+  return tw.string_fill_char (args, nargout);
+}
+
+/*
+## string_fill_char() function call must be outside of %!test block
+## due to the way a %!test block is wrapped inside a function
+%!shared orig_val, old_val
+%! orig_val = string_fill_char ();
+%! old_val  = string_fill_char ("X");
+%!test
+%! assert (orig_val, old_val);
+%! assert (string_fill_char (), "X");
+%! assert (["these"; "are"; "strings"], ["theseXX"; "areXXXX"; "strings"]);
+%! string_fill_char (orig_val);
+%! assert (string_fill_char (), orig_val);
+
+%!assert ( [ [], {1} ], {1} )
+
+%!error (string_fill_char (1, 2))
+*/
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -101,17 +101,18 @@ namespace octave
       std::stack<T> m_stack;
     };
 
     typedef void (*decl_elt_init_fcn) (tree_decl_elt&);
 
     tree_evaluator (interpreter& interp)
       : m_interpreter (interp), m_value_stack (), m_lvalue_list_stack (),
         m_nargout_stack (), m_call_stack (interp),
-        m_max_recursion_depth (256), m_silent_functions (false)
+        m_max_recursion_depth (256), m_silent_functions (false),
+        m_string_fill_char (' ')
     { }
 
     // No copying!
 
     tree_evaluator (const tree_evaluator&) = delete;
 
     tree_evaluator& operator = (const tree_evaluator&) = delete;
 
@@ -316,16 +317,28 @@ namespace octave
       int val = m_silent_functions;
       m_silent_functions = b;
       return val;
     }
 
     octave_value
     silent_functions (const octave_value_list& args, int nargout);
 
+    char string_fill_char (void) const { return m_string_fill_char; }
+
+    char string_fill_char (char c)
+    {
+      int val = m_string_fill_char;
+      m_string_fill_char = c;
+      return val;
+    }
+
+    octave_value
+    string_fill_char (const octave_value_list& args, int nargout);
+
   private:
 
     void do_breakpoint (tree_statement& stmt) const;
 
     void do_breakpoint (bool is_breakpoint,
                         bool is_end_of_fcn_or_script = false) const;
 
     virtual octave_value
@@ -352,16 +365,19 @@ namespace octave
 
     // Maximum nesting level for functions, scripts, or sourced files
     // called recursively.
     int m_max_recursion_depth;
 
     // If TRUE, turn off printing of results in functions (as if a
     // semicolon has been appended to each statement).
     bool m_silent_functions;
+
+    // The character to fill with when creating string arrays.
+    char m_string_fill_char;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 OCTAVE_DEPRECATED (4.4, "use 'octave::tree_evaluator' instead")
 typedef octave::tree_evaluator tree_evaluator;
 
diff --git a/libinterp/parse-tree/pt-mat.cc b/libinterp/parse-tree/pt-mat.cc
--- a/libinterp/parse-tree/pt-mat.cc
+++ b/libinterp/parse-tree/pt-mat.cc
@@ -33,19 +33,16 @@ along with Octave; see the file COPYING.
 #include "ov.h"
 #include "variables.h"
 
 #include "ov-cx-mat.h"
 #include "ov-flt-cx-mat.h"
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
-// The character to fill with when creating string arrays.
-char Vstring_fill_char = ' ';
-
 namespace octave
 {
   std::string
   get_concat_class (const std::string& c1, const std::string& c2)
   {
     std::string retval = octave_base_value::static_class_name ();
 
     if (c1 == c2)
@@ -356,55 +353,8 @@ namespace octave
 %!error eval ("[,;,,;,]")
 
 %!assert (isnull ([,]))
 %!assert (isnull ([;]))
 %!assert (isnull ([;;]))
 %!assert (isnull ([;,;]))
 %!assert (isnull ([,;,;,]))
 */
-
-DEFUN (string_fill_char, args, nargout,
-       doc: /* -*- texinfo -*-
-@deftypefn  {} {@var{val} =} string_fill_char ()
-@deftypefnx {} {@var{old_val} =} string_fill_char (@var{new_val})
-@deftypefnx {} {} string_fill_char (@var{new_val}, "local")
-Query or set the internal variable used to pad all rows of a character
-matrix to the same length.
-
-The value must be a single character and the default is @qcode{" "} (a
-single space).  For example:
-
-@example
-@group
-string_fill_char ("X");
-[ "these"; "are"; "strings" ]
-      @result{}  "theseXX"
-          "areXXXX"
-          "strings"
-@end group
-@end example
-
-When called from inside a function with the @qcode{"local"} option, the
-variable is changed locally for the function and any subroutines it calls.
-The original variable value is restored when exiting the function.
-@end deftypefn */)
-{
-  return SET_INTERNAL_VARIABLE (string_fill_char);
-}
-
-/*
-## string_fill_char() function call must be outside of %!test block
-## due to the way a %!test block is wrapped inside a function
-%!shared orig_val, old_val
-%! orig_val = string_fill_char ();
-%! old_val  = string_fill_char ("X");
-%!test
-%! assert (orig_val, old_val);
-%! assert (string_fill_char (), "X");
-%! assert (["these"; "are"; "strings"], ["theseXX"; "areXXXX"; "strings"]);
-%! string_fill_char (orig_val);
-%! assert (string_fill_char (), orig_val);
-
-%!assert ( [ [], {1} ], {1} )
-
-%!error (string_fill_char (1, 2))
-*/
diff --git a/libinterp/parse-tree/pt-mat.h b/libinterp/parse-tree/pt-mat.h
--- a/libinterp/parse-tree/pt-mat.h
+++ b/libinterp/parse-tree/pt-mat.h
@@ -31,19 +31,16 @@ class octave_value;
 class octave_value_list;
 
 #include "base-list.h"
 #include "pt-array-list.h"
 #include "pt-exp.h"
 #include "pt-walk.h"
 #include "symtab.h"
 
-// The character to fill with when creating string arrays.
-extern char Vstring_fill_char;
-
 namespace octave
 {
   class tree_argument_list;
 
   // General matrices.  This allows us to construct matrices from
   // other matrices, variables, and functions.
 
   class tree_matrix : public tree_array_list
