# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1367179940 -7200
#      Sun Apr 28 22:12:20 2013 +0200
# Node ID 3542e106c496f04c339946ff6b9d67c3c5305e7f
# Parent  7eff3032d1440aba0842fc4fffbc49ba6c5e4949
dec2base.m: treat logical as double for compatibility with ML (bug #38815).

diff --git a/scripts/strings/dec2base.m b/scripts/strings/dec2base.m
--- a/scripts/strings/dec2base.m
+++ b/scripts/strings/dec2base.m
@@ -61,18 +61,21 @@ function retval = dec2base (d, base, len
   if (iscell (d))
     d = cell2mat (d);
   endif
 
   # Create column vector for algorithm
   if (! iscolumn (d))
     d = d(:);
   endif
-
-  if (! isnumeric (d) || iscomplex (d) || any (d < 0 | d != fix (d)))
+  
+  ## Treat logical as numeric for compatibility with ML
+  if (islogical (d))
+    d = double (d);
+  elseif (! isnumeric (d) || iscomplex (d) || any (d < 0 | d != fix (d)))
     error ("dec2base: input must be real non-negative integers");
   endif
 
   symbols = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
   if (ischar (base))
     symbols = base;
     base = length (symbols);
     if (length (unique (symbols)) != base)
@@ -146,16 +149,20 @@ endfunction
 
 %!assert (dec2base (0, 2, 4), "0000")
 %!assert (dec2base (2^51-1, 2), ...
 %!        "111111111111111111111111111111111111111111111111111")
 %!assert (dec2base (uint64 (2)^63-1, 16), "7FFFFFFFFFFFFFFF")
 %!assert (dec2base ([1, 2; 3, 4], 2, 3), ["001"; "011"; "010"; "100"])
 %!assert (dec2base ({1, 2; 3, 4}, 2, 3), ["001"; "011"; "010"; "100"])
 
+%!test
+%! a = 0:3;
+%! assert (dec2base (!a, 2, 1), ["1"; "0"; "0"; "0"])
+
 %%Test input validation
 %!error dec2base ()
 %!error dec2base (1)
 %!error dec2base (1, 2, 3, 4)
 %!error dec2base ("A")
 %!error dec2base (2i)
 %!error dec2base (-1)
 %!error dec2base (1.1)
