# HG changeset patch
# User jwe
# Date 1165327611 0
#      Tue Dec 05 14:06:51 2006 +0000
# Node ID 0b190c3434712be4467f74108bd954d0bd423cf2
# Parent  c67c11e2282879e32b42cf925094016a3d2097a1
[project @ 2006-12-05 14:06:50 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2006-12-05  Paul Kienzle  <pkienzle@users.sf.net>
+
+	* randpoisson.c (oct_fill_randp): For lambda > 1e8, upper limit of
+	loop is n, not L.
+
 2006-11-30  John W. Eaton  <jwe@octave.org>
 
 	* lo-utils.cc (octave_read_double, read_inf_nan_na):
 	Also recognize [+-][Ii]nf.
 
 2006-11-28  David Bateman  <dbateman@free.fr>
 
 	* oct-sparse.h: Allow sparse headers to also be in a sparsesuite
diff --git a/liboctave/randpoisson.c b/liboctave/randpoisson.c
--- a/liboctave/randpoisson.c
+++ b/liboctave/randpoisson.c
@@ -395,17 +395,17 @@ oct_fill_randp (double L, octave_idx_typ
     {
       for (i=0; i<n; i++) 
 	p[i] = pprsc(L);
     } 
   else 
     {
       /* normal approximation: from Phys. Rev. D (1994) v50 p1284 */
       const double sqrtL = sqrt(L);
-      for (i = 0; i < L; i++) 
+      for (i = 0; i < n; i++) 
 	{
 	  p[i] = floor(RNOR*sqrtL + L + 0.5);
 	  if (p[i] < 0.0) 
 	    p[i] = 0.0; /* will probably never happen */
 	}
     }
 }
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2006-12-05  Paul Kienzle  <pkienzle@users.sf.net>
+
+	* DLD-FUNCTIONS/rand.cc: Test for Poisson generator with lambda > 1e8.
+
 2006-12-04  David Bateman  <dbateman@free.fr>
 
 	* data.cc (Fdata): If ndims is greater than nargout and
 	nargout is greater than 1, then collect size of trailing
 	dimensions into retval(end).
 
 	* load-path.cc (load_path::do_find_fcn): Return empty string if
 	tests fail.
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -804,50 +804,50 @@ D 50 p1284, 1994\n\
 }
 
 /*
 %!test
 %! rand("state",12)
 %!assert(randp([-inf,-1,0,inf,nan]),[nan,nan,0,nan,nan]); % *** Please report
 %!test
 %! % statistical tests may fail occasionally.
-%! for a=[5 15]
+%! for a=[5 15 1e9]
 %!   x = randp(a,100000,1);
 %!   assert(min(x)>=0); % *** Please report this!!! ***
 %!   assert(mean(x),a,0.03);
 %!   assert(var(x),a,0.2);
 %!   assert(skewness(x),1/sqrt(a),0.03);
 %!   assert(kurtosis(x),1/a,0.08);
 %! end
 %!test
 %! % statistical tests may fail occasionally.
-%! for a=[5 15]
+%! for a=[5 15 1e9]
 %!   x = randp(a*ones(100000,1),100000,1);
 %!   assert(min(x)>=0); % *** Please report this!!! ***
 %!   assert(mean(x),a,0.03);
 %!   assert(var(x),a,0.2);
 %!   assert(skewness(x),1/sqrt(a),0.03);
 %!   assert(kurtosis(x),1/a,0.08);
 %! end
 %!test
 %! rand("seed",12)
 %!assert(randp([-inf,-1,0,inf,nan]),[nan,nan,0,nan,nan]); % *** Please report
 %!test
 %! % statistical tests may fail occasionally.
-%! for a=[5 15]
+%! for a=[5 15 1e9]
 %!   x = randp(a,100000,1);
 %!   assert(min(x)>=0); % *** Please report this!!! ***
 %!   assert(mean(x),a,0.03);
 %!   assert(var(x),a,0.2);
 %!   assert(skewness(x),1/sqrt(a),0.03);
 %!   assert(kurtosis(x),1/a,0.08);
 %! end
 %!test
 %! % statistical tests may fail occasionally.
-%! for a=[5 15]
+%! for a=[5 15 1e9]
 %!   x = randp(a*ones(100000,1),100000,1);
 %!   assert(min(x)>=0); % *** Please report this!!! ***
 %!   assert(mean(x),a,0.03);
 %!   assert(var(x),a,0.2);
 %!   assert(skewness(x),1/sqrt(a),0.03);
 %!   assert(kurtosis(x),1/a,0.08);
 %! end
 */
