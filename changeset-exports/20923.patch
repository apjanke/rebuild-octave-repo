# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1450364653 -3600
#      Thu Dec 17 16:04:13 2015 +0100
# Node ID 58263bea2fdf92c38d3074020eff7c894d0f556c
# Parent  49081851fddc5834ff07e85bba155f27a91d9e8a
Unified "sleep" functions to "octave_sleep" in C++ and "pause" in Octave.

* doc/interpreter/system.txi: removed sleep and usleep from doc.

* libinterp/corefcn/sysdep.cc (pause): updated docstring.
* libinterp/corefcn/sysdep.cc (sleep): moved to deprecate sleep.m.
* libinterp/corefcn/sysdep.cc (usleep): moved to deprecate usleep.m.

* scripts/deprecated/sleep.m: moved here from sysdep.cc.
* scripts/deprecated/usleep.m: moved here from sysdep.cc.
* scripts/deprecated/module.mk: add sleep.m and usleep.m to build system.

* NEWS: deprecation news for sleep and usleep.

* libinterp/corefcn/data.cc: examples updated.
* libinterp/corefcn/syscalls.cc: examples updated.
* scripts/audio/@audioplayer/audioplayer.m: examples updated.
* scripts/audio/@audiorecorder/audiorecorder.m: examples updated.
* scripts/plot/util/ginput.m: examples updated.

* scripts/plot/util/private/__gnuplot_get_var__.m: use pause.
* scripts/plot/util/private/__gnuplot_ginput__.m: use pause.

* libinterp/corefcn/utils.cc (octave_sleep): Unified "sleep" functions here.
* libinterp/corefcn/utils.h: removed header cutils.h.

* libinterp/corefcn/graphics.cc (drawnow): use octave_sleep.
* libinterp/corefcn/graphics.cc (waitfor): use octave_sleep.
* libinterp/corefcn/toplev.cc (clean_up_and_exit): use octave_sleep.

* libinterp/corefcn/cutils.c: removed no longer needed code.
* libinterp/corefcn/cutils.h: removed no longer needed header.
* libinterp/corefcn/matherr.c: removed orphaned code.

* libinterp/corefcn/module.mk: removed cutils.h, cutils.c, and matherr.c from
build system.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -75,16 +75,18 @@ Summary of important user-visible change
     be removed from Octave 4.6 (or whatever version is the second major
     release after 4.2):
 
       Function             | Replacement
       ---------------------|------------------
       bitmax               | flintmax
       mahalanobis          | mahal in Octave-Forge statistics pkg
       md5sum               | hash
+      sleep                | pause
+      usleep               | pause
       wavread              | audioread
       wavwrite             | audiowrite
 
  ** The following functions were deprecated in Octave 3.8 and have been
     removed from Octave 4.2.
 
       default_save_options    java_new
       gen_doc_cache           java_unsigned_conversion
diff --git a/doc/interpreter/system.txi b/doc/interpreter/system.txi
--- a/doc/interpreter/system.txi
+++ b/doc/interpreter/system.txi
@@ -124,20 +124,16 @@ useful.
 
 @DOCSTRING(is_leap_year)
 
 @anchor{XREFtoc}
 @DOCSTRING(tic)
 
 @DOCSTRING(pause)
 
-@DOCSTRING(sleep)
-
-@DOCSTRING(usleep)
-
 @DOCSTRING(datenum)
 
 @DOCSTRING(datestr)
 
 @DOCSTRING(datevec)
 
 @DOCSTRING(addtodate)
 
diff --git a/libinterp/corefcn/cutils.c b/libinterp/corefcn/cutils.c
deleted file mode 100644
--- a/libinterp/corefcn/cutils.c
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
-
-Copyright (C) 1999-2015 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-#include <stdio.h>
-#include <time.h>
-
-#include <sys/types.h>
-#include <unistd.h>
-
-#include "cutils.h"
-
-void
-octave_sleep (unsigned int seconds)
-{
-  sleep (seconds);
-}
-
-void
-octave_usleep (unsigned int useconds)
-{
-  struct timespec delay;
-  struct timespec remaining;
-
-  unsigned int sec = useconds / 1000000;
-  unsigned int usec = useconds % 1000000;
-
-  delay.tv_sec = sec;
-  delay.tv_nsec = usec * 1000;
-
-  nanosleep (&delay, &remaining);
-}
-
diff --git a/libinterp/corefcn/cutils.h b/libinterp/corefcn/cutils.h
deleted file mode 100644
--- a/libinterp/corefcn/cutils.h
+++ /dev/null
@@ -1,40 +0,0 @@
-/*
-
-Copyright (C) 2012-2015 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#if ! defined (octave_cutils_h)
-#define octave_cutils_h 1
-
-#include <stdarg.h>
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-OCTINTERP_API void octave_sleep (unsigned int seconds);
-
-OCTINTERP_API void octave_usleep (unsigned int useconds);
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -6167,17 +6167,17 @@ elapsed_time = toc ();\n\
 will set the variable @code{elapsed_time} to the number of seconds since\n\
 the most recent call to the function @code{tic}.\n\
 \n\
 If called with one output argument, @code{tic} returns a scalar\n\
 of type @code{uint64} that may be later passed to @code{toc}.\n\
 \n\
 @example\n\
 @group\n\
-id = tic; sleep (5); toc (id)\n\
+id = tic; pause (5); toc (id)\n\
       @result{} 5.0010\n\
 @end group\n\
 @end example\n\
 \n\
 Calling @code{tic} and @code{toc} this way allows nested timing calls.\n\
 \n\
 If you are more interested in the CPU time that your process used, you\n\
 should use the @code{cputime} function instead.  The @code{tic} and\n\
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -38,31 +38,31 @@ along with Octave; see the file COPYING.
 
 #include "cmd-edit.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "oct-locbuf.h"
 #include "singleton-cleanup.h"
 
 #include "builtins.h"
-#include "cutils.h"
 #include "defun.h"
 #include "display.h"
 #include "error.h"
 #include "graphics.h"
 #include "input.h"
 #include "ov.h"
 #include "oct-obj.h"
 #include "oct-map.h"
 #include "ov-fcn-handle.h"
 #include "pager.h"
 #include "parse.h"
 #include "toplev.h"
 #include "txt-eng-ft.h"
 #include "unwind-prot.h"
+#include "utils.h"
 #include "octave-default-image.h"
 
 // forward declarations
 static octave_value xget (const graphics_handle& h, const caseless_str& name);
 
 static void
 gripe_set_invalid (const std::string& pname)
 {
@@ -10978,17 +10978,17 @@ undocumented.\n\
               // again.  We thus wait 50 ms (which may not be enough) to
               // give it a chance: see http://octave.1599824.n4.nabble.com/Printing-issues-with-Qt-toolkit-tp4673270.html
 
               gh_manager::unlock ();
 
               go.get_toolkit ().print_figure (go, term, file, mono,
                                               debug_file);
 
-              Fsleep (octave_value (0.05));
+              octave_sleep (0.05); // FIXME: really needed?
 
               gh_manager::lock ();
             }
           else
             error ("drawnow: nothing to draw");
         }
     }
 
@@ -11607,17 +11607,17 @@ In all cases, typing CTRL-C stops progra
             {
               if (! pname.empty () && waitfor_results[id])
                 break;
             }
           else
             break;
         }
 
-      octave_usleep (100000);
+      octave_sleep (0.1); // FIXME: really needed?
 
       OCTAVE_QUIT;
 
       command_editor::run_event_hooks ();
 
       if (timeout > 0)
         {
           if (start + timeout < time (0))
diff --git a/libinterp/corefcn/matherr.c b/libinterp/corefcn/matherr.c
deleted file mode 100644
--- a/libinterp/corefcn/matherr.c
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
-
-Copyright (C) 1997-2015 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-#if defined (EXCEPTION_IN_MATH)
-
-#include "lo-math.h"
-
-int
-matherr (struct exception *x)
-{
-  /* Possibly print our own message someday.  Should probably be
-     user-switchable. */
-
-  switch (x->type)
-    {
-    case DOMAIN:
-    case SING:
-    case OVERFLOW:
-    case UNDERFLOW:
-    case TLOSS:
-    case PLOSS:
-    default:
-      break;
-    }
-
-  /* But don't print the system message. */
-
-  return 1;
-}
-#endif
diff --git a/libinterp/corefcn/module.mk b/libinterp/corefcn/module.mk
--- a/libinterp/corefcn/module.mk
+++ b/libinterp/corefcn/module.mk
@@ -23,17 +23,16 @@ JIT_INC = \
 TEX_PARSER_INC = \
   libinterp/corefcn/oct-tex-parser.h
 
 COREFCN_INC = \
   libinterp/corefcn/Cell.h \
   libinterp/corefcn/c-file-ptr-stream.h \
   libinterp/corefcn/cdisplay.h \
   libinterp/corefcn/comment-list.h \
-  libinterp/corefcn/cutils.h \
   libinterp/corefcn/data.h \
   libinterp/corefcn/debug.h \
   libinterp/corefcn/defun-dld.h \
   libinterp/corefcn/defun-int.h \
   libinterp/corefcn/defun.h \
   libinterp/corefcn/dirfns.h \
   libinterp/corefcn/display.h \
   libinterp/corefcn/dynamic-ld.h \
@@ -105,18 +104,16 @@ JIT_SRC = \
   libinterp/corefcn/jit-ir.cc \
   libinterp/corefcn/pt-jit.cc
 
 TEX_PARSER_SRC = \
   libinterp/corefcn/oct-tex-lexer.ll \
   libinterp/corefcn/oct-tex-parser.yy
 
 C_COREFCN_SRC = \
-  libinterp/corefcn/cutils.c \
-  libinterp/corefcn/matherr.c \
   libinterp/corefcn/siglist.c
 
 COREFCN_SRC = \
   libinterp/corefcn/Cell.cc \
   libinterp/corefcn/__contourc__.cc \
   libinterp/corefcn/__dispatch__.cc \
   libinterp/corefcn/__dsearchn__.cc \
   libinterp/corefcn/__ichol__.cc \
diff --git a/libinterp/corefcn/syscalls.cc b/libinterp/corefcn/syscalls.cc
--- a/libinterp/corefcn/syscalls.cc
+++ b/libinterp/corefcn/syscalls.cc
@@ -213,17 +213,17 @@ fputs (in, \"these\\nare\\nsome\\nstring
 fclose (in);\n\
 EAGAIN = errno (\"EAGAIN\");\n\
 done = false;\n\
 do\n\
   s = fgets (out);\n\
   if (ischar (s))\n\
     fputs (stdout, s);\n\
   elseif (errno () == EAGAIN)\n\
-    sleep (0.1);\n\
+    pause (0.1);\n\
     fclear (out);\n\
   else\n\
     done = true;\n\
   endif\n\
 until (done)\n\
 fclose (out);\n\
 waitpid (pid);\n\
 \n\
@@ -312,17 +312,17 @@ exit status, it will linger until Octave
 %!       errno (0);
 %!     endif
 %!     s = fgets (out);
 %!     if (ischar (s))
 %!       idx++;
 %!       str{idx} = s;
 %!     elseif (errno () == EAGAIN)
 %!       fclear (out);
-%!       sleep (0.1);
+%!       pause (0.1);
 %!       if (++errs == 100)
 %!         done = true;
 %!       endif
 %!     else
 %!       done = true;
 %!     endif
 %!   until (done)
 %!   fclose (out);
@@ -343,17 +343,17 @@ exit status, it will linger until Octave
 %!   do
 %!     errno (0);
 %!     s = fgets (out);
 %!     if (ischar (s))
 %!       idx++;
 %!       str{idx} = s;
 %!     elseif (errno () == EAGAIN)
 %!       fclear (out);
-%!       sleep (0.1);
+%!       pause (0.1);
 %!       if (++errs == 100)
 %!         done = true;
 %!       endif
 %!     else
 %!       done = true;
 %!     endif
 %!   until (done)
 %!   fclose (out);
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -737,32 +737,41 @@ returning the empty string if no key is 
 }
 
 DEFUN (pause, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {} pause ()\n\
 @deftypefnx {} {} pause (@var{n})\n\
 Suspend the execution of the program for @var{n} seconds.\n\
 \n\
-@var{n} is a positive real value and may be a fraction of a second.\n\
-\n\
 If invoked without an input arguments then the program is suspended until a\n\
 character is typed.\n\
 \n\
+@var{n} is a positive real value and may be a fraction of a second,\n\
+for example:\n\
+\n\
+@example\n\
+@group\n\
+tic; pause (0.05); toc\n\
+     @print{} Elapsed time is 0.05039 seconds.\n\
+@end group\n\
+@end example\n\
+\n\
 The following example prints a message and then waits 5 seconds before\n\
 clearing the screen.\n\
 \n\
 @example\n\
 @group\n\
-fprintf (stderr, \"wait please...\\n\");\n\
+disp (\"wait please...\");\n\
 pause (5);\n\
 clc;\n\
 @end group\n\
 @end example\n\
-@seealso{kbhit, sleep}\n\
+\n\
+@seealso{kbhit}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin > 1)
     print_usage ();
@@ -798,91 +807,16 @@ clc;\n\
 
 /*
 %!test
 %! pause (1);
 
 %!error (pause (1, 2))
 */
 
-DEFUN (sleep, args, ,
-       "-*- texinfo -*-\n\
-@deftypefn {} {} sleep (@var{seconds})\n\
-Suspend the execution of the program for the given number of seconds.\n\
-@seealso{usleep, pause}\n\
-@end deftypefn")
-{
-  octave_value_list retval;
-
-  if (args.length () != 1)
-    print_usage ();
-
-  double dval = args(0).double_value ();
-
-  if (xisnan (dval))
-    warning ("sleep: NaN is an invalid delay");
-  else
-    {
-      Fdrawnow ();
-      octave_sleep (dval);
-    }
-
-  return retval;
-}
-
-/*
-%!test
-%! sleep (1);
-
-%!error (sleep ())
-%!error (sleep (1, 2))
-*/
-
-DEFUN (usleep, args, ,
-       "-*- texinfo -*-\n\
-@deftypefn {} {} usleep (@var{microseconds})\n\
-Suspend the execution of the program for the given number of\n\
-microseconds.\n\
-\n\
-On systems where it is not possible to sleep for periods of time less than\n\
-one second, @code{usleep} will pause the execution for @code{round\n\
-(@var{microseconds} / 1e6)} seconds.\n\
-@seealso{sleep, pause}\n\
-@end deftypefn")
-{
-  octave_value_list retval;
-
-  if (args.length () != 1)
-    print_usage ();
-
-  double dval = args(0).double_value ();
-
-  if (xisnan (dval))
-    warning ("usleep: NaN is an invalid delay");
-  else
-    {
-      Fdrawnow ();
-
-      int delay = NINT (dval);
-
-      if (delay > 0)
-        octave_usleep (delay);
-    }
-
-  return retval;
-}
-
-/*
-%!test
-%! usleep (1000);
-
-%!error (usleep ())
-%!error (usleep (1, 2))
-*/
-
 // FIXME: maybe this should only return 1 if IEEE floating
 // point functions really work.
 
 DEFUN (isieee, , ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} isieee ()\n\
 Return true if your computer @emph{claims} to conform to the IEEE standard\n\
 for floating point calculations.\n\
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -795,17 +795,17 @@ clean_up_and_exit (int status, bool safe
           // location other than the end of octave_execute_interpreter,
           // so it might not be safe to return.
 
           // We have nothing else to do at this point, and the
           // octave_link::exit function is supposed to take care of
           // exiting for us.  Assume that job won't take more than a
           // day...
 
-          gnulib::sleep (86400);
+          octave_sleep (86400); // FIXME: really needed?
         }
     }
   else
     {
       if (octave_exit)
         (*octave_exit) (status);
     }
 }
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -1350,35 +1350,32 @@ octave_asprintf (const char *fmt, ...)
   va_end (args);
 
   return retval;
 }
 
 void
 octave_sleep (double seconds)
 {
-  if (seconds > 0)
-    {
-      double t;
+  if (seconds <= 0)
+    return;
 
-      unsigned int usec
-        = static_cast<unsigned int> (modf (seconds, &t) * 1000000);
+  double fraction = std::modf (seconds, &seconds);
+  fraction = std::floor (fraction * 1000000000); // nanoseconds
 
-      unsigned int sec
-        = ((t > std::numeric_limits<unsigned int>::max ())
-           ? std::numeric_limits<unsigned int>::max ()
-           : static_cast<unsigned int> (t));
+  time_t sec = ((seconds > std::numeric_limits<time_t>::max ())
+                ? std::numeric_limits<time_t>::max ()
+                : static_cast<time_t> (seconds));
 
-      // Versions of these functions that accept unsigned int args are
-      // defined in cutils.c.
-      octave_sleep (sec);
-      octave_usleep (usec);
+  // call GNULIB POSIX function
+  struct timespec delay = { sec, static_cast<long> (fraction) };
+  struct timespec remaining;
+  gnulib::nanosleep (&delay, &remaining);
 
-      octave_quit ();
-    }
+  octave_quit ();
 }
 
 DEFUN (isindex, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {} isindex (@var{ind})\n\
 @deftypefnx {} {} isindex (@var{ind}, @var{n})\n\
 Return true if @var{ind} is a valid index.\n\
 \n\
diff --git a/libinterp/corefcn/utils.h b/libinterp/corefcn/utils.h
--- a/libinterp/corefcn/utils.h
+++ b/libinterp/corefcn/utils.h
@@ -27,18 +27,16 @@ along with Octave; see the file COPYING.
 
 #include <iosfwd>
 #include <string>
 #include <list>
 
 #include "dMatrix.h"
 #include "lo-utils.h"
 
-#include "cutils.h"
-
 class octave_value;
 class octave_value_list;
 class string_vector;
 
 extern OCTINTERP_API bool valid_identifier (const char *s);
 extern OCTINTERP_API bool valid_identifier (const std::string& s);
 
 extern OCTINTERP_API bool
diff --git a/scripts/audio/@audioplayer/audioplayer.m b/scripts/audio/@audioplayer/audioplayer.m
--- a/scripts/audio/@audioplayer/audioplayer.m
+++ b/scripts/audio/@audioplayer/audioplayer.m
@@ -109,21 +109,21 @@ function player = audioplayer (varargin)
 endfunction
 
 
 %!demo
 %! fs = 44100;
 %! audio = randn (2, 2*fs) - 0.5;
 %! player = audioplayer (audio, fs);
 %! play (player);
-%! sleep (1);
+%! pause (1);
 %! pause (player);
-%! sleep (1);
+%! pause (1);
 %! resume (player);
-%! sleep (1);
+%! pause (1);
 %! stop (player);
 
 ## Tests of audioplayer must not actually play anything.
 
 %!testif HAVE_PORTAUDIO
 %! mono = randn (1, 44100) - 0.5;
 %! stereo = randn (2, 44100) - 0.5;
 %! fs = 44100;
@@ -171,18 +171,18 @@ endfunction
 #%!function [sound, status] = callback (samples)
 #%!  sound = rand (samples, 2) - 0.5;
 #%!  status = 0;
 #%!endfunction
 
 #%!testif HAVE_PORTAUDIO
 #%! player = audioplayer (@callback, 44100);
 #%! play (player);
-#%! sleep (2);
+#%! pause (2);
 #%! stop (player);
 #%! assert (1);
 
 #%!testif HAVE_PORTAUDIO
 #%! player = audioplayer ("callback", 44100, 16);
 #%! play (player);
-#%! sleep (2);
+#%! pause (2);
 #%! stop (player);
 #%! assert (1);
diff --git a/scripts/audio/@audiorecorder/audiorecorder.m b/scripts/audio/@audiorecorder/audiorecorder.m
--- a/scripts/audio/@audiorecorder/audiorecorder.m
+++ b/scripts/audio/@audiorecorder/audiorecorder.m
@@ -52,23 +52,23 @@ function recorder = audiorecorder (varar
   recorder = class (recorder, "audiorecorder");
 
 endfunction
 
 
 %!demo
 %! recorder = audiorecorder (44100, 16, 2);
 %! record (recorder, 1);
-%! sleep (2);
+%! pause (2);
 %! player1 = audioplayer (recorder);
 %! player2 = getplayer (recorder);
 %! play (player1);
-%! sleep (2);
+%! pause (2);
 %! play (player2);
-%! sleep (2);
+%! pause (2);
 %! stop (player1);
 %! stop (player2);
 
 ## Tests of audiorecorder must not actually record anything.
 
 %!testif HAVE_PORTAUDIO
 %! recorder = audiorecorder (44100, 16, 2);
 %! data = getaudiodata (recorder, "int16");
@@ -114,21 +114,21 @@ endfunction
 #%!  fclose (fid);
 #%!  status = 0;
 #%!endfunction
 
 #%!testif HAVE_PORTAUDIO
 #%! recorder = audiorecorder (@callback_record, 44100);
 #%! unlink ("record.txt")
 #%! record (recorder);
-#%! sleep (2);
+#%! pause (2);
 #%! stop (recorder);
 #%! s = stat ("record.txt");
 #%! assert (s.size > 0);
 
 #%!testif HAVE_PORTAUDIO
 #%! recorder = audiorecorder (@callback_record, 44100);
 #%! unlink ("record.txt")
 #%! record (recorder);
-#%! sleep (2);
+#%! pause (2);
 #%! stop (recorder);
 #%! s = stat ("record.txt");
 #%! assert (s.size > 0);
diff --git a/scripts/deprecated/module.mk b/scripts/deprecated/module.mk
--- a/scripts/deprecated/module.mk
+++ b/scripts/deprecated/module.mk
@@ -16,18 +16,20 @@ scripts_deprecated_FCN_FILES = \
   scripts/deprecated/mahalanobis.m \
   scripts/deprecated/md5sum.m \
   scripts/deprecated/mouse_wheel_zoom.m \
   scripts/deprecated/nfields.m \
   scripts/deprecated/octave_tmp_file_name.m \
   scripts/deprecated/playaudio.m \
   scripts/deprecated/saveaudio.m \
   scripts/deprecated/setaudio.m \
+  scripts/deprecated/sleep.m \
   scripts/deprecated/syl.m \
   scripts/deprecated/usage.m \
+  scripts/deprecated/usleep.m \
   scripts/deprecated/wavread.m \
   scripts/deprecated/wavwrite.m
 
 scripts_deprecateddir = $(fcnfiledir)/deprecated
 
 scripts_deprecated_DATA = $(scripts_deprecated_FCN_FILES)
 
 FCN_FILES += $(scripts_deprecated_FCN_FILES)
diff --git a/scripts/deprecated/sleep.m b/scripts/deprecated/sleep.m
new file mode 100644
--- /dev/null
+++ b/scripts/deprecated/sleep.m
@@ -0,0 +1,51 @@
+## Copyright (C) 1993-2015 John W. Eaton
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {} {} sleep (@var{seconds})\n\
+##
+## @code{sleep} is deprecated and will be removed in Octave version 4.6.
+## Use @code{pause} instead.
+##
+## Suspend the execution of the program for the given number of seconds.
+##
+## @seealso{pause}
+## @end deftypefn
+
+function [] = sleep (seconds)
+
+  persistent warned = false;
+  if (! warned)
+    warned = true;
+    warning ("Octave:deprecated-function",
+             "sleep is obsolete and will be removed from a future version of Octave, please use pause instead");
+  endif
+
+  if (nargin == 1)
+    pause (seconds);
+  else
+    print_usage ();
+  endif
+
+endfunction
+
+%!test
+%! sleep (1);
+
+%!error (sleep ())
+%!error (sleep (1, 2))
diff --git a/scripts/deprecated/usleep.m b/scripts/deprecated/usleep.m
new file mode 100644
--- /dev/null
+++ b/scripts/deprecated/usleep.m
@@ -0,0 +1,52 @@
+## Copyright (C) 1993-2015 John W. Eaton
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {} {} usleep (@var{microseconds})\n\
+##
+## @code{usleep} is deprecated and will be removed in Octave version 4.6.
+## Use @code{pause} instead.
+##
+## Suspend the execution of the program for the given number of
+## microseconds (1e-6 seconds).
+##
+## @seealso{pause}
+## @end deftypefn
+
+function [] = usleep (microseconds)
+
+  persistent warned = false;
+  if (! warned)
+    warned = true;
+    warning ("Octave:deprecated-function",
+             "usleep is obsolete and will be removed from a future version of Octave, please use pause instead");
+  endif
+
+  if (nargin == 1)
+    pause (microseconds / 1e6);
+  else
+    print_usage ();
+  endif
+
+endfunction
+
+%!test
+%! usleep (1000);
+
+%!error (usleep ())
+%!error (usleep (1, 2))
diff --git a/scripts/plot/util/ginput.m b/scripts/plot/util/ginput.m
--- a/scripts/plot/util/ginput.m
+++ b/scripts/plot/util/ginput.m
@@ -80,17 +80,17 @@ function varargout = ginput (n = -1)
                                   orig_closerequestfcn});
 
     do
       if (strcmp (toolkit, "fltk"))
         __fltk_check__ ();
       endif
 
       ## Release CPU.
-      sleep (0.01);
+      pause (0.01);
 
       [x, y, n0, button] = ginput_accumulator (-1, 0, 0, 0);
     until ((n > -1 && n0 >= n) || n0 < 0)
 
     if (n0 > n)
       ## More clicks than requested due to double-click or too fast clicking
       x = x(1:n);
       y = y(1:n);
diff --git a/scripts/plot/util/private/__gnuplot_get_var__.m b/scripts/plot/util/private/__gnuplot_get_var__.m
--- a/scripts/plot/util/private/__gnuplot_get_var__.m
+++ b/scripts/plot/util/private/__gnuplot_get_var__.m
@@ -112,17 +112,17 @@ function gp_var_value = __gnuplot_get_va
       ## Direct gnuplot to print to <STDERR>
       fputs (ostream, "set print;\n");
       fflush (ostream);
 
       str = {};
       while (isempty (str))
         str = fread (istream, "*char")';
         if (isempty (str))
-          sleep (0.05);
+          pause (0.05);
         else
           str = regexp (str, 'OCTAVE:.*', "match");
           str = str{end}(8:end);
         endif
         fclear (istream);
       endwhile
     endif
 
diff --git a/scripts/plot/util/private/__gnuplot_ginput__.m b/scripts/plot/util/private/__gnuplot_ginput__.m
--- a/scripts/plot/util/private/__gnuplot_ginput__.m
+++ b/scripts/plot/util/private/__gnuplot_ginput__.m
@@ -105,17 +105,17 @@ function [x, y, button] = __gnuplot_ginp
         ## Close output file, to force it to be flushed
         fputs (ostream, "set print;\n");
         fflush (ostream);
 
         str = {};
         while (isempty (str))
           str = fread (istream, "*char")';
           if (isempty (str))
-            sleep (0.05);
+            pause (0.05);
           else
             str = regexp (str, 'OCTAVE:\s+[-+.\d]+\s+[-+.\d]+\s+\d*', 'match');
           endif
           fclear (istream);
         endwhile
         [x(k), y(k), button(k), count] = ...
           sscanf (str{end}(8:end), "%f %f %d", "C");
       endif
