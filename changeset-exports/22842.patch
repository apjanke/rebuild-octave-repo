# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1480397555 18000
#      Tue Nov 29 00:32:35 2016 -0500
# Node ID 60405b73e439b3c8332bb04512130a33c7edad28
# Parent  5605a786086d1b133f25522d131826f5ced87df3
provide separate typedefs for octave_idx_type and octave_f77_int_type

* configure.ac: Also substitute and define OCTAVE_F77_INT_TYPE.
* octave-conf-post.in.h: New typedef for octave_f77_int_type.
* f77-fcn.h: Define F77_INT and F77_LOGICAL using octave_f77_int_type
instead of octave_idx_type.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -350,16 +350,20 @@ if test $ENABLE_64 = yes; then
     warn_64_bit="pointers are not 64-bits wide; disabling 64-bit features"
     OCTAVE_CONFIGURE_WARNING([warn_64_bit])
     ENABLE_64=no
   fi
 fi
 AC_SUBST(OCTAVE_IDX_TYPE)
 AC_DEFINE_UNQUOTED(OCTAVE_IDX_TYPE, [$OCTAVE_IDX_TYPE],
   [Define to the type of octave_idx_type (64 or 32 bit signed integer).])
+OCTAVE_F77_INT_TYPE=$OCTAVE_IDX_TYPE
+AC_SUBST(OCTAVE_F77_INT_TYPE)
+AC_DEFINE_UNQUOTED(OCTAVE_F77_INT_TYPE, [$OCTAVE_F77_INT_TYPE],
+  [Define to the type of octave_f77_int_type (64 or 32 bit signed integer).])
 if test $ENABLE_64 = yes; then
   AC_DEFINE(OCTAVE_ENABLE_64, 1,
     [Define to 1 if using 64-bit integers for array dimensions and indexing.])
 fi
 AC_SUBST(ENABLE_64)
 
 ### It seems that there are some broken inline assembly functions in
 ### the GNU libc.  Since I'm not sure how to test whether we are using
diff --git a/liboctave/cruft/misc/f77-fcn.h b/liboctave/cruft/misc/f77-fcn.h
--- a/liboctave/cruft/misc/f77-fcn.h
+++ b/liboctave/cruft/misc/f77-fcn.h
@@ -327,19 +327,19 @@ octave_make_cray_const_ftn_ch_dsc (const
 #error "unknown C++ to Fortran calling convention"
 
 #endif
 
 typedef double F77_DBLE;
 typedef float F77_REAL;
 typedef double _Complex F77_DBLE_CMPLX;
 typedef float _Complex F77_CMPLX;
-typedef octave_idx_type F77_INT;
+typedef octave_f77_int_type F77_INT;
 typedef int32_t F77_INT4;
-typedef octave_idx_type F77_LOGICAL;
+typedef octave_f77_int_type F77_LOGICAL;
 
 #define F77_CMPLX_ARG(x)                        \
   reinterpret_cast<float _Complex *> (x)
 
 #define F77_CONST_CMPLX_ARG(x)                  \
   reinterpret_cast<const float _Complex *> (x)
 
 #define F77_DBLE_CMPLX_ARG(x)                   \
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -184,15 +184,16 @@ typedef unsigned long ino_t;
 
 #if defined (__cplusplus)
 #  include <cstdint>
 #else
 #  include <stdint.h>
 #endif
 
 typedef OCTAVE_IDX_TYPE octave_idx_type;
+typedef OCTAVE_F77_INT_TYPE octave_f77_int_type;
 
 /* Tag indicating Octave's autoconf-generated config.h has been
    included.  This symbol is provided because autoconf-generated
    config.h files do not define a multiple-inclusion guard.  See also
    the notes at the top of the generated octave-config.h file.  */
 
 #define OCTAVE_AUTOCONFIG_H_INCLUDED 1
