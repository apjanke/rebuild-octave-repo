# HG changeset patch
# User Rik <rik@octave.org>
# Date 1502501464 25200
#      Fri Aug 11 18:31:04 2017 -0700
# Node ID fe1763af4021d1c9f1c4d9bb318210639e69e6b8
# Parent  d37e8e9decce9741dd86fab9939e48fc80457daa
humps.m: Overhaul function.

* humps.m: Use a single line summary of function as first docstring line.
Add @seealso references.  Use same variable names in function prototype
as in documentation.

diff --git a/scripts/optimization/humps.m b/scripts/optimization/humps.m
--- a/scripts/optimization/humps.m
+++ b/scripts/optimization/humps.m
@@ -14,75 +14,74 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not,
 ## see <http://www.gnu.org/licenses/>.
 
 ## Author: Nicholas R. Jankowski <jankowskin@asme.org>
 
 ## -*- texinfo -*-
-## @deftypefn {} {} humps (@var{x})
+## @deftypefn  {} {@var{y} =} humps (@var{x})
 ## @deftypefnx {} {[@var{x}, @var{y}] =} humps (@var{x})
-## Return the output of the rational function:
+## Evaluate a function with multiple minima, maxima, and zero crossings.
+##
+## The output @var{y} is the evaluation of the rational function:
 ##
 ## @tex
 ## $$y = -{ {1200x^4 - 2880x^3 + 2036x^2 - 340x - 88} \over {200x^4 - 480x^3 + 406x^2 - 138x - 17} }$$
 ## @end tex
 ## @ifnottex
 ##
 ## @example
 ## @group
 ##         1200*@var{x}^4 - 2880*@var{x}^3 + 2036*@var{x}^2 - 348*@var{x} - 88
 ##  @var{y} = - ---------------------------------------------
 ##          200*@var{x}^4 - 480*@var{x}^3 + 406*@var{x}^2 - 138*@var{x} + 17
 ## @end group
 ## @end example
 ##
 ## @end ifnottex
 ##
-## @var{x} may be a scalar, vector or array.  @code{humps} is vectorized such
-## that @var{yi} = humps (@var{xi})
+## @var{x} may be a scalar, vector or array.  If @var{x} is omitted, the
+## default range [0:0.05:1] is used.
 ##
-## If @var{x} is omitted, the range [0:0.05:1] is used instead.
-##
-## When called with two output arguments, [@var{x},@var{y}], @var{x} will
-## contain the input value(s), and @var{y} will contain the output from
+## When called with two output arguments, [@var{x}, @var{y}], @var{x} will
+## contain the input values, and @var{y} will contain the output from
 ## @code{humps}.
 ##
-## @code{humps} has two local maxima located near @var{x} = 0.300 and 0.893,
-## a local minimum near @var{x} = 0.637, and zeros near @var{x} = -0.132 and
-## 1.300. @code{humps} is a useful function for testing algorithms to find
-## zeros or local minima and maxima.
+## Programming Notes: @code{humps} has two local maxima located near @var{x} =
+## 0.300 and 0.893, a local minimum near @var{x} = 0.637, and zeros near
+## @var{x} = -0.132 and 1.300.  @code{humps} is a useful function for testing
+## algorithms which find zeros or local minima and maxima.
 ##
 ## Try @code{demo humps} to see a plot of the @code{humps} function.
+## @seealso{fzero, fminbnd, fminunc, fminsearch}
 ## @end deftypefn
 
-function varargout = humps (x = [0:0.05:1])
+function [x, y] = humps (x = [0:0.05:1])
 
   if (nargin > 1)
     print_usage ();
   endif
 
- y = - 4*( 300*x.^4 - 720*x.^3 + 509*x.^2 - 87*x - 22) ./ ...
-         ((10*x.^2 - 6*x + 1).*(20*x.^2 - 36*x + 17));
+  y = - 4*( 300*x.^4 - 720*x.^3 + 509*x.^2 - 87*x - 22) ./ ...
+          ((10*x.^2 - 6*x + 1).*(20*x.^2 - 36*x + 17));
 
-  if (nargout > 1)
-    varargout = {x, y};
-  else
-    varargout = {y};
+  if (nargout <= 1)
+    x = y;
   endif
 
 endfunction
 
+
 %!demo
 %! clf;
 %! fplot (@humps, [0, 2]);
 %! title ("humps() function");
 
-## tests
 ## value checks
 %!assert (humps (0), 88/17, 10*eps)
 %!assert (humps (1), 16, 10*eps)
 %!assert (humps (-1), -6376/1241, 10*eps)
 %!assert (humps (), [88/17, 16106/1769, 263/17, 82802/3133, 2432/53, ...
 %!   2818/37, 193/2, 10538/137, 1376/29, 36434/1261, 19, 5258/377,  ...
 %!   152/13, 24562/2173, 421/34, 250/17, 232/13, 1762/85, 803/37,   ...
 %!   58354/2941, 16], 1000*eps)
@@ -95,10 +94,10 @@ endfunction
 ## array checks
 %!assert (humps (repmat (eye (2), 1, 1, 2)),
 %!        repmat ([16, 88/17; 88/17, 16], 1, 1, 2), 10*eps)
 
 ## other checks
 %!assert (humps (NaN), NaN)
 %!assert (humps ([]), [])
 
-## errors
+## Test input validation
 %!error humps (1,3)
