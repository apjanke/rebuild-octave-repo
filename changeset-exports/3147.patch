# HG changeset patch
# User jwe
# Date 886744810 0
#      Fri Feb 06 06:00:10 1998 +0000
# Node ID 894d516b4a006b530a04b0b9a933914680261fb3
# Parent  3d5aefef14e2e14444d382efba7b1d4af5fa4fc0
[project @ 1998-02-06 06:00:08 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,14 @@
+Thu Feb  5 03:04:09 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in: Check for vfork.
+
+	* config.h.bot (X_CAST): New macro.
+
 Wed Feb  4 01:42:50 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* aclocal.m4 (OCTAVE_FLIBS): If ld_run_path is not absolute, kill it.
 
 Tue Feb  3 00:24:01 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makeconf.in (do-subst-vals): Substitute $(libexecdir) too.
 
diff --git a/config.h.bot b/config.h.bot
--- a/config.h.bot
+++ b/config.h.bot
@@ -10,11 +10,13 @@
 #define CONST_CAST(T, E) (T) (E)
 
 #define DYNAMIC_CAST(T, E) (T) (E)
 
 #define REINTERPRET_CAST(T, E) (T) (E)
 
 #define STATIC_CAST(T, E) (T) (E)
 
+#define X_CAST(T, E) (T) (E)
+
 #define HEAVYWEIGHT_INDEXING 1
 
 #define WITH_KPATHSEARCH 1
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -16,17 +16,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
-AC_REVISION($Revision: 1.296 $)
+AC_REVISION($Revision: 1.297 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 OCTAVE_HOST_TYPE
 
@@ -688,18 +688,18 @@ fi
 ### Checks for functions and variables.
 
 AC_CHECK_FUNCS(atexit bcopy bzero dup2 endgrent endpwent execvp fcntl \
   fork getcwd getegid geteuid getgid getgrent getgrgid getgrnam \
   gethostname getpgrp getpid getppid getpwent getpwnam getpwuid \
   gettimeofday getuid getwd lstat memmove mkdir mkfifo on_exit pipe \
   putenv rename rindex rmdir setgrent setpwent setvbuf sigaction \
   sigpending sigprocmask sigsuspend stat strcasecmp strdup strerror \
-  stricmp strncasecmp strnicmp tempnam umask unlink usleep vfprintf \
-  vsprintf waitpid)
+  stricmp strncasecmp strnicmp tempnam umask unlink usleep vfork \
+  vfprintf vsprintf waitpid)
 
 OCTAVE_SMART_PUTENV
 
 LIBDLFCN=
 DLFCN_INCFLAGS=
 if test "$WITH_DL" = yes || test "$WITH_DL" = maybe; then
   case "$canonical_host_type" in
     rs6000-ibm-aix* | powerpc-ibm-aix*)
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,12 @@
 Thu Feb  5 02:12:38 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* oct-syscalls.cc (octave_syscalls::vfork): New function.
+
 	* lo-specfun.cc: Don't include dbleBessel.h.
 
 	* Makefile.in (INCLUDES): Delete oct-math.h from the list.
 
 	* dir-ops.h (dir_entry::operator bool ()): Return bool, not void*.
 	* file-stat.h (file_stat::operator bool ()): Likewise.
 	* idx-vector.h (idx_vector::operator bool ()): Likewise.
 	* oct-group.h (octave_group::operator bool ()): Likewise.
diff --git a/liboctave/oct-syscalls.cc b/liboctave/oct-syscalls.cc
--- a/liboctave/oct-syscalls.cc
+++ b/liboctave/oct-syscalls.cc
@@ -143,16 +143,37 @@ octave_syscalls::fork (string& msg)
 #else
   msg = NOT_SUPPORTED ("fork");
 #endif
 
   return status;
 }
 
 pid_t
+octave_syscalls::vfork (string& msg)
+{
+  pid_t status = -1;
+
+#if defined (HAVE_VFORK) || defined (HAVE_FORK)
+#if defined (HAVE_VFORK)
+  status = ::vfork ();
+#else
+  status = ::vfork ();
+#endif
+
+  if (status < 0)
+    msg = ::strerror (errno);
+#else
+  msg = NOT_SUPPORTED ("vfork");
+#endif
+
+  return status;
+}
+
+pid_t
 octave_syscalls::getpgrp (string& msg)
 {
   pid_t status = -1;
 
 #if defined (HAVE_GETPGRP)
   status = ::getpgrp ();
 
   if (status < 0)
diff --git a/liboctave/oct-syscalls.h b/liboctave/oct-syscalls.h
--- a/liboctave/oct-syscalls.h
+++ b/liboctave/oct-syscalls.h
@@ -39,16 +39,17 @@ octave_syscalls
 
   static int execvp (const string&, const string_vector&);
   static int execvp (const string&, const string_vector&, string&);
 
   static int fcntl (int, int, long);
   static int fcntl (int, int, long, string&);
 
   static pid_t fork (string&);
+  static pid_t vfork (string&);
 
   static pid_t getpgrp (string&);
 
   static pid_t getpid (void);
   static pid_t getppid (void);
 
   static gid_t getgid (void);
   static gid_t getegid (void);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 Thu Feb  5 02:27:18 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* dirfns.cc (Fls): If first attempt at reading process output
+	fails, sleep once and try again.
+	* toplev.cc (run_command_and_return_output): Likewise.
+
+	* oct-procbuf.cc (octave_procbuf::open): Use vfork if it is available.
+
+	* syscalls.cc (Fvfork): New function.
+
 	* ov-bool-mat.cc: Only declare assign function if
 	CXX_NEW_FRIEND_TEMPLATE_DECL is not defined.
 
 	* ov-base.h, ov-bool-mat.h, ov-bool.h, ov-ch-mat.h, ov-complex.h,
 	ov-cx-mat.h, ov-range.h, ov-re-mat.h, ov-scalar.h: Handle default
 	args for *_value functions consistently.
 
 	* symtab.cc (maybe_list_cmp_fcn): Declare args as void*, not
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -150,21 +150,43 @@ print a directory listing")
   char *ls_command = ls_buf.str ();
 
   iprocstream *cmd = new iprocstream (ls_command);
 
   delete [] ls_command;
 
   unwind_protect::add (cleanup_iprocstream, cmd);
 
+  // XXX FIXME XXX -- sometimes, the subprocess hasn't written
+  // anything before we try to read from the procstream.  The kluge
+  // below (simply waiting and trying again) is ugly, but it seems to
+  // work, at least most of the time.  It could probably still fail if
+  // the subprocess hasn't started writing after the snooze.  Isn't
+  // there a better way?  If there is, you should also fix the code
+  // for the system function in toplev.cc.
+
   if (cmd && *cmd)
     {
-      int ch;
-      while ((ch = cmd->get ()) != EOF)
-	octave_stdout << (char) ch;
+      char ch;
+
+      if (cmd->get (ch))
+        octave_stdout << ch;
+      else
+        {
+          cmd->clear ();
+
+#if defined (HAVE_USLEEP)
+          usleep (100);
+#else
+          sleep (1);
+#endif
+        }
+
+      while (cmd->get (ch))
+        octave_stdout << ch;
     }
   else
     error ("couldn't start process for ls!");
 
   unwind_protect::run ();
 
   return retval;
 }
diff --git a/src/oct-procbuf.cc b/src/oct-procbuf.cc
--- a/src/oct-procbuf.cc
+++ b/src/oct-procbuf.cc
@@ -50,17 +50,17 @@ static octave_procbuf *octave_procbuf_li
 
 octave_procbuf *
 octave_procbuf::open (const char *command, int mode)
 {
 #if defined (HAVE_SYS_WAIT_H)
 
   int pipe_fds[2];
 
-  int parent_end, child_end;
+  volatile int parent_end, child_end;
 
   if (is_open ())
     return 0;
 
   if (pipe (pipe_fds) < 0)
     return 0;
 
   if (mode & ios::in)
@@ -69,17 +69,21 @@ octave_procbuf::open (const char *comman
       child_end = pipe_fds[1];
     }
   else
     {
       parent_end = pipe_fds[1];
       child_end = pipe_fds[0];
     }
 
+#if defined HAVE_VFORK
+  proc_pid = vfork ();
+#else
   proc_pid = fork ();
+#endif
 
   if (proc_pid == 0)
     {
       int child_std_end = (mode & ios::in) ? 1 : 0;
 
       ::close (parent_end);
 
       if (child_end != child_std_end)
diff --git a/src/syscalls.cc b/src/syscalls.cc
--- a/src/syscalls.cc
+++ b/src/syscalls.cc
@@ -280,16 +280,47 @@ has occured, and MSG contains a system-d
       retval(1) = msg;
     }
   else
     print_usage ("fork");
 
   return retval;
 }
 
+DEFUN (vfork, args, ,
+ "[PID, MSG] = vfork ()\n\
+\n\
+Create a copy of the current process.\n\
+\n\
+If successful, PID is either the process ID and you are in the parent,\n\
+or 0, and you are in the child.  If PID is less than zero, an error\n\
+has occured, and MSG contains a system-dependent error message.")
+{
+  octave_value_list retval;
+
+  retval(1) = string ();
+  retval(0) = -1.0;
+
+  int nargin = args.length ();
+
+  if (nargin == 0)
+    {
+      string msg;
+
+      pid_t pid = octave_syscalls::vfork (msg);
+
+      retval(0) = static_cast<double> (pid);
+      retval(1) = msg;
+    }
+  else
+    print_usage ("vfork");
+
+  return retval;
+}
+
 DEFUN (getpgrp, args, ,
   "pgid = getpgrp (): return the process group id of the current process")
 {
   octave_value_list retval;
 
   retval(1) = string ();
   retval(0) = -1.0;
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -333,17 +333,40 @@ run_command_and_return_output (const str
       octave_child_list::insert (cmd->pid (), cmd_death_handler);
 
       unwind_protect::add (cleanup_iprocstream, cmd);
 
       if (*cmd)
 	{
 	  ostrstream output_buf;
 
+	  // XXX FIXME XXX -- sometimes, the subprocess hasn't written
+	  // anything before we try to read from the procstream.  The
+	  // kluge below (simply waiting and trying again) is ugly,
+	  // but it seems to work, at least most of the time.  It
+	  // could probably still fail if the subprocess hasn't
+	  // started writing after the snooze.  Isn't there a better
+	  // way?  If there is, you should also fix the code for the
+	  // ls function in dirfns.cc.
+
 	  char ch;
+
+	  if (cmd->get (ch))
+	    output_buf.put (ch);
+	  else
+	    {
+	      cmd->clear ();
+
+#if defined (HAVE_USLEEP)
+	      usleep (100);
+#else
+	      sleep (1);
+#endif
+	    }
+
 	  while (cmd->get (ch))
 	    output_buf.put (ch);
 
 	  cmd->close ();
 
 	  // One way or another, cmd_death_handler should be called
 	  // when the process exits, and it will save the exit status
 	  // of the command in cmd_status.
diff --git a/src/version.h b/src/version.h
--- a/src/version.h
+++ b/src/version.h
@@ -18,17 +18,17 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_version_h)
 #define octave_version_h 1
 
-#define OCTAVE_VERSION "2.1.4"
+#define OCTAVE_VERSION "2.1.5"
 
 #define OCTAVE_COPYRIGHT \
   "Copyright (C) 1996, 1997, 1998 John W. Eaton."
 
 #define OCTAVE_NAME_AND_VERSION \
   "Octave, version " OCTAVE_VERSION " (" TARGET_HOST_TYPE ")"
 
 #define OCTAVE_NAME_VERSION_AND_COPYRIGHT \
