# HG changeset patch
# User Robert T. Short <octave@phaselockedsystems.com>
# Date 1243185787 25200
#      Sun May 24 10:23:07 2009 -0700
# Node ID f8b8ab529913fc3291a563223f13fe26842e97f5
# Parent  80c299c847967200e320fc15e63c206223844706
improve OOP documentation

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2009-05-24  Robert T. Short  <octave@phaselockedsystems.com>
+
+	* examples/@FIRfilter: added FIRfilter class example.
+
 2009-05-22  Marco Atzeri  <marco_atzeri@yahoo.it>
 
         * src/sysdep.cc: Removed CYGWIN_init 
 
 2009-05-21  Marco Atzeri  <marco_atzeri@yahoo.it>
         * configure.in: Correct my mistake in cygwin SHLBINPRE SHLBIN
 
 2008-05-21  Michael Goffioul <michael.goffioul@gmail.com>
diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2009-05-24  Robert T. Short  <octave@phaselockedsystems.com>
+
+	* interpreter/oop.txi: Added inheritance documentatin
+
 2009-05-21  Rik  <rdrider0-list@yahoo.com>
 
 	* interpreter/Makefile.in, texmf.cnf: Change texi2pdf call to include local
 	TeX configuration file which increases save_history variable.
 
 2009-05-17  Rik  <rdrider0-list@yahoo.com>
 
 	* interpreter/tips.txi: Change recommendation to use @tex rather than
diff --git a/doc/interpreter/oop.txi b/doc/interpreter/oop.txi
--- a/doc/interpreter/oop.txi
+++ b/doc/interpreter/oop.txi
@@ -46,16 +46,17 @@ the example of a polynomial class, how t
 of this class, together with the means to overload operators and
 functions.
 
 @menu
 * Creating a Class::
 * Manipulating Classes::
 * Indexing Objects::
 * Overloading Objects::
+* Inheritance and Aggregation::
 @end menu
 
 @node Creating a Class
 @section Creating a Class
 
 We use in the following text a polynomial class to demonstrate the use
 of object oriented programming within Octave.  This class was chosen as
 it is simple, and so doesn't distract unnecessarily from the
@@ -146,17 +147,17 @@ isa (p, "polynomial")
 
 @noindent
 The available methods of a class can be displayed with the
 @code{methods} function.
 
 @DOCSTRING(methods)
 
 @noindent
-To enquiry whether a particular method is available to a user class, the
+To inquire whether a particular method is available to a user class, the
 @code{ismethod} function can be used.
 
 @DOCSTRING(ismethod)
 
 @noindent
 For example
 
 @example
@@ -246,17 +247,17 @@ file.  Likely, the @code{loadobj} method
 is loaded from a file, and can be used to ensure that any removed
 fields are reinserted into the user object.
 
 @DOCSTRING(loadobj)
 
 @node Indexing Objects
 @section Indexing Objects
 
-Objects in can be indexed with parentheses, either like 
+Objects can be indexed with parentheses, either like 
 @code{@var{a} (@var{idx})} or like @code{@var{a} @{@var{idx}@}}, or even
 like @code{@var{a} (@var{idx}).@var{field}}.  However, it is up to the user
 to decide what this indexing actually means.  In the case of our polynomial
 class @code{@var{p} (@var{n})} might mean either the coefficient of the 
 @var{n}-th power of the polynomial, or it might be the evaluation of the 
 polynomial at @var{n}.  The meaning of this subscripted referencing is 
 determined by the @code{subsref} method.
 
@@ -269,17 +270,17 @@ In this case the @code{subsref} method o
 @polynomialfile{subsref.m}
 
 The equivalent functionality for subscripted assignments uses the 
 @code{subsasgn} method.
 
 @DOCSTRING(subsasgn)
 
 If you wish to use the @code{end} keyword in subscripted expressions
-of an object.  Then the user needs to define the @code{end} method for 
+of an object, then the user needs to define the @code{end} method for 
 the class.
 
 @DOCSTRING(end)
 
 For example the @code{end} method for our polynomial class might look like
 
 @polynomialfile{end.m}
 
@@ -471,8 +472,145 @@ polynomial class constructor would be mo
 
 @polynomialfile{polynomial_superiorto.m}
 
 Note that user classes always have higher precedence than built-in
 Octave types.  So in fact marking our polynomial class higher than the 
 "double" class is in fact not necessary.
 
 
+@node Inheritance and Aggregation
+@section Inheritance and Aggregation
+
+Using classes to build new classes is supported by octave through the
+use of both inheritance and aggregation.
+
+Class inheritance is provided by octave using the @code{class}
+function in the class constructor.  As in the case of the polynomial
+class, the octave programmer will create a struct that contains the
+data fields required by the class, and then call the class function to
+indicate that an object is to be created from the struct.  Creating a
+child of an existing object is done by creating an object of the
+parent class and providing that object as the third argument of the
+class function.
+
+This is easily demonstrated by example.  Suppose the programmer needs
+an FIR filter, i.e. a filter with a numerator polynomial but a unity
+denominator polynomial.  In traditional octave programming, this would
+be performed as follows.
+
+@example
+octave:1> x = [some data vector];
+octave:2> n = [some coefficient vector];
+octave:3> y = filter (n, 1, x);
+@end example
+
+The equivalent class could be implemented in a class directory
+@@FIRfilter that is on the octave path.  The constructor is a file
+FIRfilter.m in the class directory.
+
+@classfile{@@FIRfilter,FIRfilter.m}
+
+As before, the leading comments provide command-line documentation for
+the class constructor.  This constructor is very similar to the
+polynomial class constructor, except that we pass a polynomial object
+as the third argument to the class function, telling octave that the
+FIRfilter class will be derived from the polynomial class.  Our FIR
+filter does not have any data fields, but we must provide a struct to
+the @code{class} function.  The @code{class} function will add an
+element named polynomial to the object struct, so we simply add a
+dummy element named polynomial as the first line of the constructor.
+This dummy element will be overwritten by the class function.
+
+Note further that all our examples provide for the case in which no
+arguments are supplied.  This is important since octave will call the
+constructor with no arguments when loading ojects from save files to
+determine the inheritance structure.
+
+A class may be a child of more than one class (see the documentation
+for the @code{class} function), and inheritance may be nested.  There
+is no limitation to the number of parents or the level of nesting
+other than memory or other physical issues.
+
+As before, we need a @code{display} method.  A simple example might be
+
+@classfile{@@FIRfilter,display.m}
+
+Note that we have used the polynomial field of the struct to display
+the filter coefficients.
+
+Once we have the class constructor and display method, we may create
+an object by calling the class constructor.  We may also check the
+class type and examine the underlying structure.
+
+@example
+octave:1> f=FIRfilter(polynomial([1 1 1]/3))
+f.polynomial = 0.333333 + 0.333333 * X + 0.333333 * X ^ 2
+octave:2> class(f)
+ans = FIRfilter
+octave:3> isa(f,"FIRfilter")
+ans =  1
+octave:4> isa(f,"polynomial")
+ans =  1
+octave:5> struct(f)
+ans = 
+@{
+polynomial = 0.333333 + 0.333333 * X + 0.333333 * X ^ 2
+@}
+@end example
+
+We only need to define a method to actually process data with our
+filter and our class is usable.  It is also useful to provide a means
+of changing the data stored in the class.  Since the fields in the
+underlying struct are private by default, we could provide a mechanism
+to access the fields.  The @code{subsref} method may be used for both.
+
+@classfile{@@FIRfilter,subsref.m}
+
+The "()" case allows us to filter data using the polynomial provided
+to the constructor.
+
+@example
+octave:2> f=FIRfilter(polynomial([1 1 1]/3));
+octave:3> x=ones(5,1);
+octave:4> y=f(x)
+y =
+
+   0.33333
+   0.66667
+   1.00000
+   1.00000
+   1.00000
+@end example
+
+The "." case allows us to view the contents of the polynomial field.
+
+@example
+octave:1> f=FIRfilter(polynomial([1 1 1]/3));
+octave:2> f.polynomial
+ans = 0.333333 + 0.333333 * X + 0.333333 * X ^ 2
+@end example
+
+In order to change the contents of the object, we need to define a
+@code{subsasgn} method.  For example, we may make the polynomial field
+publicly writeable.
+
+@classfile{@@FIRfilter,subsasgn.m}
+
+So that
+
+@example
+octave:6> f=FIRfilter();
+octave:7> f.polynomial = polynomial([1 2 3]);
+f.polynomial = 1 + 2 * X + 3 * X ^ 2
+@end example
+
+
+Defining the FIRfilter class as a child of the polynomial class
+implies that and FIRfilter object may be used any place that a
+polynomial may be used.  This is not a normal use of a filter, so that
+aggregation may be a more sensible design approach.  In this case, the
+polynomial is simply a field in the class structure.  A class
+constructor for this case might be
+
+@classfile{@@FIRfilter,FIRfilter_aggregation.m}
+
+For our example, the remaining class methods remain unchanged.
diff --git a/examples/@FIRfilter/FIRfilter.m b/examples/@FIRfilter/FIRfilter.m
new file mode 100644
--- /dev/null
+++ b/examples/@FIRfilter/FIRfilter.m
@@ -0,0 +1,22 @@
+## -*- texinfo -*-
+## @deftypefn {Function File} {} FIRfilter ()
+## @deftypefnx {Function File} {} FIRfilter (@var{p})
+## Creates an FIR filter with polynomial @var{p} as
+## coefficient vector.
+##
+## @end deftypefn
+
+function f = FIRfilter (p)
+
+  f.polynomial = [];
+  if (nargin == 0)
+    p = @polynomial ([1]);
+  elseif (nargin == 1)
+    if (!isa (p, "polynomial"))
+      error ("FIRfilter: expecting polynomial as input argument");
+    endif
+  else
+    print_usage ();
+  endif
+  f = class (f, "FIRfilter", p);
+endfunction
diff --git a/examples/@FIRfilter/FIRfilter_aggregation.m b/examples/@FIRfilter/FIRfilter_aggregation.m
new file mode 100644
--- /dev/null
+++ b/examples/@FIRfilter/FIRfilter_aggregation.m
@@ -0,0 +1,23 @@
+## -*- texinfo -*-
+## @deftypefn {Function File} {} FIRfilter ()
+## @deftypefnx {Function File} {} FIRfilter (@var{p})
+## Creates an FIR filter with polynomial @var{p} as
+## coefficient vector.
+##
+## @end deftypefn
+
+function f = FIRfilter (p)
+
+  if (nargin == 0)
+    f.polynomial = @polynomial ([1]);
+  elseif (nargin == 1)
+    if (isa (p, "polynomial"))
+      f.polynomial = p;
+    else
+      error ("FIRfilter: expecting polynomial as input argument");
+    endif
+  else
+    print_usage ();
+  endif
+  f = class (f, "FIRfilter");
+endfunction
diff --git a/examples/@FIRfilter/display.m b/examples/@FIRfilter/display.m
new file mode 100644
--- /dev/null
+++ b/examples/@FIRfilter/display.m
@@ -0,0 +1,6 @@
+function display (f)
+
+  display(f.polynomial);
+
+endfunction
+
diff --git a/examples/@FIRfilter/subsasgn.m b/examples/@FIRfilter/subsasgn.m
new file mode 100644
--- /dev/null
+++ b/examples/@FIRfilter/subsasgn.m
@@ -0,0 +1,14 @@
+function out = subsasgn (f, index, val)
+  switch (index.type)
+    case "."
+      fld = index.subs;
+      if (strcmp (fld, "polynomial"))
+        out = f;
+        out.polynomial = val;
+      else
+        error ("@FIRfilter/subsref: invalid property \"%s\"", fld);
+      endif
+    otherwise
+      error ("FIRfilter/subsagn: Invalid index type")
+  endswitch
+endfunction
diff --git a/examples/@FIRfilter/subsref.m b/examples/@FIRfilter/subsref.m
new file mode 100644
--- /dev/null
+++ b/examples/@FIRfilter/subsref.m
@@ -0,0 +1,16 @@
+function out = subsref (f, x)
+  switch x.type
+    case "()"
+      n = f.polynomial;
+      out = filter(n.poly, 1, x.subs{1});
+    case "."
+      fld = x.subs;
+      if (strcmp (fld, "polynomial"))
+        out = f.polynomial;
+      else
+        error ("@FIRfilter/subsref: invalid property \"%s\"", fld);
+      endif
+    otherwise
+      error ("@FIRfilter/subsref: invalid subscript type for FIR filter");
+  endswitch
+endfunction
