# HG changeset patch
# User jwe
# Date 810288493 0
#      Tue Sep 05 08:08:13 1995 +0000
# Node ID 8256c4c574194fdc50c5ac5c3b3d0a33a63d72b8
# Parent  5f63d83dd694d47388c9ad063cdf4aed53ad6901
[project @ 1995-09-05 08:02:08 by jwe]

diff --git a/liboctave/tempnam.c b/liboctave/tempnam.c
--- a/liboctave/tempnam.c
+++ b/liboctave/tempnam.c
@@ -18,18 +18,18 @@ Boston, MA  02111-1307, USA.  */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #ifndef HAVE_TEMPNAM
 
 #include <stddef.h>
+#include <stdio.h>
 #include <stdlib.h>
-#include <stdio.h>
 #include <string.h>
 
 extern char *__stdio_gen_tempname (const char *dir, const char *pfx,
 				   int dir_search, size_t *lenptr,
 				   FILE **streamptr);
 
 /* Generate a unique temporary filename using up to five characters of PFX
    if it is not NULL.  The directory to put this file in is searched for
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -31,43 +31,42 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include <cctype>
 #include <cstring>
 
 #include <strstream.h>
 
-#include "input.h"
-#include "token.h"
-
 #include "SLStack.h"
 
-// Stack to hold tokens so that we can delete them when the parser is
-// reset and avoid growing forever just because we are stashing some
-// information.  This has to appear before lex.h is included, because
-// one of the macros defined there uses token_stack.
-static SLStack <token*> token_stack;
-
+#include "input.h"
+#include "token.h"
 #include "user-prefs.h"
 #include "variables.h"
 #include "octave.h"
 #include "symtab.h"
 #include "error.h"
 #include "utils.h"
 #include "tree-base.h"
 #include "tree-expr.h"
 #include "tree-cmd.h"
 #include "tree-misc.h"
 #include "tree-plot.h"
 #include "tree-const.h"
 #include "y.tab.h"
 #include "parse.h"
 #include "lex.h"
 
+// Stack to hold tokens so that we can delete them when the parser is
+// reset and avoid growing forever just because we are stashing some
+// information.  This has to appear before lex.h is included, because
+// one of the macros defined there uses token_stack.
+static SLStack <token*> token_stack;
+
 // Nonzero means we think we are looking at a set command.
 static int doing_set = 0;
 
 // GAG.  Stupid kludge so that [[1,2][3,4]] will work.
 static do_comma_insert = 0;
 
 // Brace level count.
 static int braceflag = 0;
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -32,34 +32,34 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <strstream.h>
 
 #include "SLStack.h"
 
 #include "Matrix.h"
 
+#include "error.h"
+#include "input.h"
+#include "lex.h"
 #include "octave-hist.h"
-#include "user-prefs.h"
+#include "octave.h"
+#include "pager.h"
+#include "parse.h"
+#include "symtab.h"
+#include "token.h"
 #include "tree-base.h"
-#include "tree-expr.h"
 #include "tree-cmd.h"
 #include "tree-const.h"
+#include "tree-expr.h"
 #include "tree-misc.h"
-#include "variables.h"
 #include "tree-plot.h"
-#include "octave.h"
-#include "symtab.h"
-#include "parse.h"
-#include "token.h"
-#include "error.h"
-#include "pager.h"
-#include "input.h"
+#include "user-prefs.h"
 #include "utils.h"
-#include "lex.h"
+#include "variables.h"
 
 // Nonzero means we're in the middle of defining a function.
 int defining_func = 0;
 
 // Nonzero means we're in the middle of defining a loop.
 int looping = 0;
 
 // Nonzero means we're in the middle of defining a conditional expression.
diff --git a/src/pt-exp-base.h b/src/pt-exp-base.h
--- a/src/pt-exp-base.h
+++ b/src/pt-exp-base.h
@@ -30,20 +30,20 @@ Software Foundation, 59 Temple Place - S
 
 #include <cstdio>
 #include <ctime>
 
 #include <iostream.h>
 
 #include "SLList.h"
 
-#include "variables.h"
+#include "error.h"
 #include "mappers.h"
-#include "error.h"
 #include "oct-obj.h"
+#include "variables.h"
 
 class tree_constant;
 class tree_statement_list;
 class tree_argument_list;
 class tree_parameter_list;
 class tree_return_list;
 class tree_va_return_list;
 class symbol_record;
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -45,19 +45,19 @@ class tree_parameter_list;
 class tree_return_list;
 class tree_va_return_list;
 class tree_global;
 class tree_global_init_list;
 
 #include <SLList.h>
 
 #include "tree-base.h"
-#include "tree-expr.h"
+#include "tree-cmd.h"
 #include "tree-const.h"
-#include "tree-cmd.h"
+#include "tree-expr.h"
 
 // A list of expressions and commands to be executed.
 
 class
 tree_statement : public tree_print_code
 {
 friend class tree_statement_list;
 
diff --git a/src/strcasecmp.c b/src/strcasecmp.c
--- a/src/strcasecmp.c
+++ b/src/strcasecmp.c
@@ -17,18 +17,18 @@ not, write to the Free Software Foundati
 Boston, MA  02111-1307, USA.  */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #ifndef HAVE_STRCASECMP
 
+#include <ctype.h>
 #include <string.h>
-#include <ctype.h>
 
 /* Compare S1 and S2, ignoring case, returning less than, equal to or
    greater than zero if S1 is lexiographically less than,
    equal to or greater than S2.  */
 int
 strcasecmp (const char *s1, const char *s2)
 {
   register const unsigned char *p1 = (const unsigned char *) s1;
diff --git a/src/strncase.c b/src/strncase.c
--- a/src/strncase.c
+++ b/src/strncase.c
@@ -17,18 +17,18 @@ not, write to the Free Software Foundati
 Boston, MA  02111-1307, USA.  */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #ifndef HAVE_STRNCASECMP
 
+#include <ctype.h>
 #include <string.h>
-#include <ctype.h>
 
 /* Compare no more than N characters of S1 and S2,
    ignoring case, returning less than, equal to or
    greater than zero if S1 is lexicographically less
    than, equal to or greater than S2.  */
 int
 strncasecmp (const char *s1, const char *s2, size_t n)
 {
