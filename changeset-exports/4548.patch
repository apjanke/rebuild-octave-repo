# HG changeset patch
# User jwe
# Date 1067138202 0
#      Sun Oct 26 03:16:42 2003 +0000
# Node ID 820323598f4fe0c03aa0c1f98ac72495c1bd2d48
# Parent  308feb0e564632d2386f2769af43c5bd0a1b22c2
[project @ 2003-10-26 03:16:42 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -382,28 +382,35 @@ Array<T>::resize_no_fill (const dim_vect
       if (dims(i) < 0)
 	{
 	  (*current_liboctave_error_handler)
 	    ("can't resize to negative dimension");
 	  return;
 	}
     }
 
-  bool no_change = true;
-
-  for (int i = 0; i < n; i++)
+  bool same_size = true;
+
+  if (dimensions.length () != n)
+    {
+      same_size = false;
+    }
+  else
     {
-      if (dims(i) != dimensions(i))
+      for (int i = 0; i < n; i++)
 	{
-	  no_change = false;
-	  break;
+	  if (dims(i) != dimensions(i))
+	    {
+	      same_size = false;
+	      break;
+	    }
 	}
     }
 
-  if (no_change)
+  if (same_size)
     return;
 
   int old_len = length ();
 
   typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
   rep = new typename Array<T>::ArrayRep (get_size (dims));
@@ -430,16 +437,23 @@ Array<T>::resize_no_fill (int r, int c)
 {
   if (r < 0 || c < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimension");
       return;
     }
 
+  int n = ndims ();
+
+  if (n == 0)
+    dimensions = dim_vector (0, 0);
+
+  assert (ndims () == 2);
+
   if (r == dim1 () && c == dim2 ())
     return;
 
   typename Array<T>::ArrayRep *old_rep = Array<T>::rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
@@ -469,16 +483,23 @@ Array<T>::resize_no_fill (int r, int c, 
 {
   if (r < 0 || c < 0 || p < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimension");
       return;
     }
 
+  int n = ndims ();
+
+  if (n == 0)
+    dimensions = dim_vector (0, 0, 0);
+
+  assert (ndims () == 3);
+
   if (r == dim1 () && c == dim2 () && p == dim3 ())
     return;
 
   typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
@@ -550,16 +571,21 @@ Array<T>::resize_and_fill (int r, int c,
 {
   if (r < 0 || c < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimension");
       return;
     }
 
+  if (ndims () == 0)
+    dimensions = dim_vector (0, 0);
+
+  assert (ndims () == 2);
+
   if (r == dim1 () && c == dim2 ())
     return;
 
   typename Array<T>::ArrayRep *old_rep = Array<T>::rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
@@ -597,16 +623,21 @@ Array<T>::resize_and_fill (int r, int c,
 {
   if (r < 0 || c < 0 || p < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimension");
       return;
     }
 
+  if (ndims () == 0)
+    dimensions = dim_vector (0, 0, 0);
+
+  assert (ndims () == 3);
+
   if (r == dim1 () && c == dim2 () && p == dim3 ())
     return;
 
   typename Array<T>::ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
@@ -772,16 +803,18 @@ Array<T>::insert (const Array<T>& a, con
 
   return *this;
 }
 
 template <class T>
 Array<T>
 Array<T>::transpose (void) const
 {
+  assert (ndims () == 2);
+
   int nr = dim1 ();
   int nc = dim2 ();
 
   if (nr > 1 && nc > 1)
     {
       Array<T> result (dim_vector (nc, nr));
 
       for (int j = 0; j < nc; j++)
@@ -958,16 +991,18 @@ Array<T>::maybe_delete_elements_1 (idx_v
 	}
     }
 }
 
 template <class T>
 void
 Array<T>::maybe_delete_elements_2 (idx_vector& idx_arg)
 {
+  assert (ndims () == 2);
+
   int nr = dim1 ();
   int nc = dim2 ();
 
   if (nr == 0 && nc == 0)
     return;
 
   int n;
   if (nr == 1)
@@ -1057,16 +1092,18 @@ Array<T>::maybe_delete_elements_2 (idx_v
 	  ("A(idx) = []: index out of range");
     }
 }
 
 template <class T>
 void
 Array<T>::maybe_delete_elements (idx_vector& idx_i, idx_vector& idx_j)
 {
+  assert (ndims () == 2);
+
   int nr = dim1 ();
   int nc = dim2 ();
 
   if (nr == 0 && nc == 0)
     return;
 
   if (idx_i.is_colon ())
     {
@@ -1512,17 +1549,17 @@ Array<T>::index1 (idx_vector& idx_arg, i
       else if (n == 0)
 	{
 	  retval.resize_no_fill (0);
 	}
       else if (len == 1 && n > 1
 	       && idx_arg.one_zero_only ()
 	       && idx_arg.ones_count () == n)
 	{
-	  retval.resize (n, elem (0));
+	  retval.resize_and_fill (n, elem (0));
 	}
       else
 	{
 	  retval.resize_no_fill (n);
 
 	  for (int i = 0; i < n; i++)
 	    {
 	      int ii = idx_arg.elem (i);
@@ -1540,16 +1577,18 @@ Array<T>::index1 (idx_vector& idx_arg, i
 }
 
 template <class T>
 Array<T>
 Array<T>::index2 (idx_vector& idx_arg, int resize_ok, const T& rfv) const
 {
   Array<T> retval;
 
+  assert (ndims () == 2);
+
   int nr = dim1 ();
   int nc = dim2 ();
 
   int orig_len = nr * nc;
 
   int idx_orig_rows = idx_arg.orig_rows ();
   int idx_orig_columns = idx_arg.orig_columns ();
 
@@ -1661,42 +1700,37 @@ Array<T>::indexN (idx_vector& ra_idx, in
   int n_dims = dims ().length ();
 
   int orig_len = number_of_elements (dims ());
 
   Array<int> idx_orig_dimsXXX = ra_idx.orig_dimensions (); 
 
   dim_vector idx_orig_dims;
 
-  idx_orig_dims.resize(idx_orig_dimsXXX.length());
-
-  for (int i = 0; i < idx_orig_dimsXXX.length(); i++)
+  idx_orig_dims.resize (idx_orig_dimsXXX.length ());
+
+  for (int i = 0; i < idx_orig_dimsXXX.length (); i++)
     idx_orig_dims(i) = idx_orig_dimsXXX(i);
 
-
   if (ra_idx.is_colon ())
     {
-      dim_vector idx(orig_len);
+      dim_vector idx (orig_len);
 
       retval = Array<T> (*this, idx);
-
     }
   else if (length () == 1)
     {
       // Only one element in array.
 
       Array<T> tmp = Array<T>::index (ra_idx, resize_ok);
 
       if (tmp.length () != 0)
 	retval = Array<T> (tmp, idx_orig_dims);
       else
-	{
-	  dim_vector d;
-	  retval = Array<T> (tmp, d);
-	}
+	retval = Array<T> (tmp, dim_vector (0));
     }
   else if (vector_equivalent (dims ()))
     { 
       // We're getting elements from a vector equivalent i.e. (1x4x1).
 
       Array<T> tmp = Array<T>::index (ra_idx, resize_ok);
 
       int len = tmp.length ();
@@ -1803,17 +1837,16 @@ Array<T>::indexN (idx_vector& ra_idx, in
 
       if (ra_idx)
         {
 	  int r_idx = ra_idx(0);
 
           Array<int> idx = get_ra_idx (r_idx, dims ());
 
           dim_vector new_dims (1);
-	  new_dims(0)=1;
 
 	  // This shouldn't be needed.
 
 	  Array<int> e (idx.length ());
 
 	  for (int i = 0; i < idx.length();i++)
 	    e(i) = idx(i);
 
@@ -1832,16 +1865,18 @@ Array<T>::indexN (idx_vector& ra_idx, in
 
 template <class T>
 Array<T>
 Array<T>::index (idx_vector& idx_i, idx_vector& idx_j, int resize_ok,
 		 const T& rfv) const
 {
   Array<T> retval;
 
+  assert (ndims () == 2);
+
   int nr = dim1 ();
   int nc = dim2 ();
 
   int n = idx_i.freeze (nr, "row", resize_ok);
   int m = idx_j.freeze (nc, "column", resize_ok);
 
   if (idx_i && idx_j)
     {
@@ -1905,20 +1940,17 @@ Array<T>::index (Array<idx_vector>& ra_i
       if (all_ok (ra_idx))
 	{
 	  if (any_orig_empty (ra_idx))
 	    {
 	      retval.resize (frozen_lengths);
 	    }
 	  else if (any_zero_len (frozen_lengths))
 	    {
-	      dim_vector new_size = 
-		get_zero_len_size (frozen_lengths, dimensions);
-
-	      retval.resize (new_size);
+	      retval.resize (get_zero_len_size (frozen_lengths, dimensions));
 	    }
 	  else if (all_colon_equiv (ra_idx, dimensions) 
 		    && frozen_lengths.length () == n_dims)
 	    {
 	      retval = *this;
 	    }
 	  else
 	    {
@@ -2024,17 +2056,17 @@ assign1 (Array<LT>& lhs, const Array<RT>
   int n = lhs_idx.freeze (lhs_len, "vector", true, liboctave_wrore_flag);
 
   if (n != 0)
     {
       if (rhs_len == n || rhs_len == 1)
 	{
 	  int max_idx = lhs_idx.max () + 1;
 	  if (max_idx > lhs_len)
-	    lhs.resize (max_idx, rfv);
+	    lhs.resize_and_fill (max_idx, rfv);
 	}
 
       if (rhs_len == n)
 	{
 	  for (int i = 0; i < n; i++)
 	    {
 	      int ii = lhs_idx.elem (i);
 	      lhs.elem (ii) = rhs.elem (i);
@@ -2378,35 +2410,35 @@ assign2 (Array<LT>& lhs, const Array<RT>
 }
 
 #define MAYBE_RESIZE_ND_DIMS \
   do \
     { \
       if (n_idx >= lhs_dims.length () && ! rhs_is_empty) \
 	{ \
 	  Array<int> max_idx (n_idx); \
-	  dim_vector new_idx; \
-          new_idx.resize (n_idx); \
+	  dim_vector new_dims; \
+          new_dims.resize (n_idx); \
  \
 	  for (int i = 0; i < n_idx; i++) \
 	    { \
 	      if (lhs_dims.length () == 0 || i >= lhs_dims.length ()) \
-		new_idx(i) = idx(i).max () + 1; \
+		new_dims(i) = idx(i).max () + 1; \
 	      else \
 		{ \
 		  if (i < rhs_dims.length ()) \
 		    max_idx(i) = idx(i).is_colon () ? rhs_dims(i) : idx(i).max () + 1; \
 		  else \
 		    max_idx(i) = idx(i).max () + 1; \
  \
-		  new_idx(i) = max_idx(i) > lhs_dims(i) ? max_idx(i) : lhs_dims(i); \
+		  new_dims(i) = max_idx(i) > lhs_dims(i) ? max_idx(i) : lhs_dims(i); \
 		} \
             } \
  \
-	  lhs.resize (new_idx, rfv); \
+	  lhs.resize_and_fill (new_dims, rfv); \
 	  lhs_dims = lhs.dims ();  \
         } \
     } \
   while (0)
 
 template <class LT, class RT>
 int
 assignN (Array<LT>& lhs, const Array<RT>& rhs, const LT& rfv)
@@ -2656,17 +2688,17 @@ assignN (Array<LT>& lhs, const Array<RT>
 	      int n = Array<LT>::get_size (frozen_len);
 
 	      Array<int> result_idx (lhs_dims.length (), 0);
 	      Array<int> elt_idx;
 
 	      Array<int> result_rhs_idx (rhs_dims.length (), 0);
 
 	      dim_vector frozen_rhs;
-	      frozen_rhs.resize (rhs_dims.length());
+	      frozen_rhs.resize (rhs_dims.length ());
 
 	      for (int i = 0; i < rhs_dims.length (); i++)
 		frozen_rhs(i) = rhs_dims(i);
 
 	      dim_vector lhs_inc;
 	      lhs_inc.resize (lhs_dims.length ());
 
 	      for (int i = 0; i < lhs_dims.length (); i++)
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -399,38 +399,34 @@ public:
   T operator () (const Array<int>& ra_idx) const { return checkelem (ra_idx); }
 #else
   T operator () (int n) const { return elem (n); }
   T operator () (int i, int j) const { return elem (i, j); }
   T operator () (int i, int j, int k) const { return elem (i, j, k); }
   T operator () (const Array<int>& ra_idx) const { return elem (ra_idx); }
 #endif
 
+  void resize_no_fill (int n);
+  void resize_and_fill (int n, const T& val);
+
   // !!! WARNING !!! -- the following resize_no_fill and
   // resize_and_fill functions are public because template friends
   // don't work properly with versions of gcc earlier than 3.3.  You
   // should use these functions only in classes that are derived
   // from Array<T>.
 
   // protected:
 
-  void resize_no_fill (int n);
-
   void resize_no_fill (int r, int c);
+  void resize_and_fill (int r, int c, const T& val);
 
   void resize_no_fill (int r, int c, int p);
+  void resize_and_fill (int r, int c, int p, const T& val);
 
   void resize_no_fill (const dim_vector& dims);
-
-  void resize_and_fill (int n, const T& val);
-
-  void resize_and_fill (int r, int c, const T& val);
-
-  void resize_and_fill (int r, int c, int p, const T& val);
-
   void resize_and_fill (const dim_vector& dims, const T& val);
 
 public:
 
   void resize (int n) { resize_no_fill (n); }
 
   //  void resize (int n, const T& val) { resize_and_fill (n, val); }
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,40 @@
+2003-10-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array.cc (Array<T>::resize_no_fill (const dim_vector&)):
+	Allow number of dimensions to change.
+	(Array<T>::resize_no_fill (int, int)): Require ndims to be 0 or 2.
+	(Array<T>::resize_and_fill (int, int, const T&)): Likewise.
+	(Array<T>::resize_no_fill (int, int, int)): Require ndims to be 0 or 3.
+	(Array<T>::resize_and_fill (int, int, int, const T&)): Likewise.
+	(Array<T>::transpose): Require ndims to be 2.
+	(Array<T>::index2): Likewise.
+	(Array<T>::index (idx_vector&, idx_vector&, int, const T&)): Likewise.
+	(Array<T>::maybe_delete_elements_2): Likewise.
+	(Array<T>::maybe_delete_elements (idx_vector&, idx_vector&)): Likewise.
+	(Array<T>::index1): Use resize_and_fill.
+	(MAYBE_RESIZE_ND_DIMS): Likewise.
+
+	* ODESSA.cc (ODESSA::integrate): Use resize_and_fill for x_s_out.
+
+	* MArray2.h (MArray2<T>::resize (int, int)): New function.
+	(MArray2<T>::resize (int, int, const T&)): New function.
+
+	* MArray.h (MArray<T>::resize (int)): New function.
+	(MArray<T>::resize (int, const T&)): New function.
+
+	* DASRT.cc (DASRT::integrate): Use resize_and_fill for jroot.
+
+	* DASPK-opts.in: Use single-arg resize for initial condition
+	heuristics.
+
+	* dim-vector.h (class dim_vector): Now reference counted.
+	(dim_vector_rep::elem): Use assert to check that index is in bounds.
+
 2003-10-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array.cc (Array<T>::squeeze): Delete redundant retval decl.
 
 	* mx-cdm-cm.cc, mx-cdm-cm.h, mx-cdm-cs.cc, mx-cdm-cs.h,
 	mx-cdm-dm.cc, mx-cdm-dm.h, mx-cdm-m.cc, mx-cdm-m.h, mx-cdm-s.cc,
 	mx-cdm-s.h, mx-cm-cdm.cc, mx-cm-cdm.h, mx-cm-dm.cc, mx-cm-dm.h,
 	mx-cm-m.cc, mx-cm-m.h, mx-cm-s.cc, mx-cm-s.h, mx-cs-cdm.cc,
diff --git a/liboctave/DASPK-opts.in b/liboctave/DASPK-opts.in
--- a/liboctave/DASPK-opts.in
+++ b/liboctave/DASPK-opts.in
@@ -130,17 +130,17 @@ Jacobian.  For convergence, the weighted
 (scaled by the error weights) must be less than @code{EPINIT*EPCON},
 where @code{EPCON} = 0.33 is the analogous test constant used in the
 time steps. The default is @code{EPINIT} = 0.01.
 @end table
   END_DOC_ITEM
   TYPE = "Array<double>"
   SET_ARG_TYPE = "const $TYPE&"
   INIT_BODY
-    $OPTVAR.resize (6, 0.0);
+    $OPTVAR.resize (6);
     $OPTVAR(0) = 5.0;
     $OPTVAR(1) = 6.0;
     $OPTVAR(2) = 5.0;
     $OPTVAR(3) = 0.0;
     $OPTVAR(4) = ::pow (DBL_EPSILON, 2.0/3.0);
     $OPTVAR(5) = 0.01;
   END_INIT_BODY
   SET_EXPR = "val"
diff --git a/liboctave/DASRT.cc b/liboctave/DASRT.cc
--- a/liboctave/DASRT.cc
+++ b/liboctave/DASRT.cc
@@ -248,17 +248,17 @@ DASRT::integrate (double tout)
 	  integration_error = true;
 	  return;
 	}
 
       info(4) = user_jsub ? 1 : 0;
 
       DAEFunc::reset = false;
 
-      jroot.resize (ng, 1);
+      jroot.resize_and_fill (ng, 1);
 
       pjroot = jroot.fortran_vec ();
 
       DAERTFunc::reset = false;
 
       // DASRT_options
 
       double mss = maximum_step_size ();
diff --git a/liboctave/MArray.h b/liboctave/MArray.h
--- a/liboctave/MArray.h
+++ b/liboctave/MArray.h
@@ -61,16 +61,20 @@ public:
   ~MArray (void) { }
 
   MArray<T>& operator = (const MArray<T>& a)
     {
       Array<T>::operator = (a);
       return *this;
     }
 
+  void resize (int n) { Array<T>::resize_no_fill (n); }
+
+  void resize (int n, const T& val) { Array<T>::resize_and_fill (n, val); }
+
   // Currently, the OPS functions don't need to be friends, but that
   // may change.
 
   // MARRAY_OPS_FRIEND_DECLS (MArray)
 };
 
 // XXX FIXME XXX -- there must be a better place for this...
 extern void
diff --git a/liboctave/MArray2.h b/liboctave/MArray2.h
--- a/liboctave/MArray2.h
+++ b/liboctave/MArray2.h
@@ -61,16 +61,23 @@ public:
   ~MArray2 (void) { }
 
   MArray2<T>& operator = (const MArray2<T>& a)
     {
       Array2<T>::operator = (a);
       return *this;
     }
 
+  void resize (int r, int c) { Array2<T>::resize_no_fill (r, c); }
+
+  void resize (int r, int c, const T& val)
+  {
+    Array<T>::resize_and_fill (r, c, val);
+  }
+
   MArray2<T>& insert (const Array2<T>& a, int r, int c)
   {
     Array2<T>::insert (a, r, c);
     return *this;
   }
 
   MArray2<T> transpose (void) const { return Array2<T>::transpose (); }
 
diff --git a/liboctave/ODESSA.cc b/liboctave/ODESSA.cc
--- a/liboctave/ODESSA.cc
+++ b/liboctave/ODESSA.cc
@@ -573,17 +573,17 @@ ODESSA::integrate (const ColumnVector& t
   Array<Matrix> x_s_out;
 
   int n_out = tout.capacity ();
 
   if (n_out > 0 && n > 0)
     {
       x_out.resize (n_out, n);
 
-      x_s_out.resize (npar, Matrix (n_out, n, 0.0));
+      x_s_out.resize_and_fill (npar, Matrix (n_out, n, 0.0));
 
       for (int j = 0; j < n_out; j++)
 	{
 	  integrate (tout(j));
 
 	  if (integration_error)
 	    {
 	      retval = ODESSA_result (x_out, x_s_out);
@@ -617,17 +617,17 @@ ODESSA::integrate (const ColumnVector& t
   Array<Matrix> x_s_out;
 
   int n_out = tout.capacity ();
 
   if (n_out > 0 && n > 0)
     {
       x_out.resize (n_out, n);
 
-      x_s_out.resize (npar, Matrix (n_out, n, 0.0));
+      x_s_out.resize_and_fill (npar, Matrix (n_out, n, 0.0));
 
       int n_crit = tcrit.capacity ();
 
       if (n_crit > 0)
 	{
 	  int i_crit = 0;
 	  int i_out = 0;
 	  double next_crit = tcrit(0);
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -30,141 +30,216 @@ Software Foundation, 59 Temple Place - S
 #include <cassert>
 #include <string>
 
 #include "lo-sstream.h"
 
 class
 dim_vector
 {
-public:
+protected:
 
-  dim_vector (void) : ndims (0), dims (0) { }
+  class dim_vector_rep
+  {
+  public:
 
-  dim_vector (int n) : ndims (1), dims (new int [1]) { dims[0] = n; }
+    int *dims;
+    int ndims;
+    int count;
 
-  dim_vector (int r, int c)
-    : ndims (2), dims (new int [2]) { dims[0] = r; dims[1] = c; }
+    dim_vector_rep (void) : dims (0), ndims (0), count (1) { }
+
+    dim_vector_rep (int n) : dims (new int [1]), ndims (1), count (1)
+    {
+      dims[0] = n;
+    }
 
-  dim_vector (int r, int c, int p)
-    : ndims (3), dims (new int [3]) { dims[0] = r; dims[1] = c; dims[2] = p; }
+    dim_vector_rep (int r, int c) : dims (new int [2]), ndims (2), count (1)
+    {
+      dims[0] = r;
+      dims[1] = c;
+    }
 
-  dim_vector (const dim_vector& dv)
-    : ndims (dv.ndims)
+    dim_vector_rep (int r, int c, int p)
+      : dims (new int [3]), ndims (3), count (1)
     {
-      if (dv.dims)
+      dims[0] = r;
+      dims[1] = c;
+      dims[2] = p;
+    }
+
+    dim_vector_rep (const dim_vector_rep& dv)
+      : dims (dv.ndims > 0 ? new int [dv.ndims] : 0),
+	ndims (dv.ndims > 0 ? dv.ndims : 0), count (1)
+    {
+      if (dims)
 	{
-	  dims = new int [ndims];
-
 	  for (int i = 0; i < ndims; i++)
 	    dims[i] = dv.dims[i];
 	}
-      else
-	dims = 0;
     }
 
-  dim_vector& operator = (const dim_vector& dv)
+    dim_vector_rep (int n, const dim_vector_rep *dv)
+      : dims ((dv && n > 0) ? new int [n] : 0),
+	ndims (n > 0 ? n : 0), count (1)
     {
-      if (&dv != this)
+      if (dims)
 	{
-	  ndims = dv.ndims;
+	  int dv_ndims = dv ? dv->ndims : 0;
 
-	  if (dv.dims)
-	    {
-	      dims = new int [ndims];
+	  for (int i = 0; i < dv_ndims; i++)
+	    dims[i] = dv->dims[i];
 
-	      for (int i = 0; i < ndims; i++)
-		dims[i] = dv.dims[i];
-	    }
+	  for (int i = dv_ndims; i < n; i++)
+	    dims[i] = 0;
 	}
-
-      return *this;
     }
 
-  ~dim_vector (void) { delete [] dims; }
+    ~dim_vector_rep (void) { delete [] dims; }
 
-  int length (void) const { return ndims; }
+    int length (void) const { return ndims; }
 
-  int& elem (int i)
+    int& elem (int i)
     {
-      if (i >= ndims)
-	resize (i+1);
+      assert (i >= 0 && i < ndims);
+      return dims[i];
+    }
 
+    int elem (int i) const
+    {
+      assert (i >= 0 && i < ndims);
       return dims[i];
     }
 
-  int elem (int i) const { return i < ndims ? dims[i] : -1; }
+  private:
+
+    // No assignment!
+
+    dim_vector_rep& operator = (const dim_vector_rep& dv);
+  };
+
+  dim_vector_rep *rep;
+
+  void make_unique (void)
+  {
+    if (rep->count > 1)
+      {
+	--rep->count;
+	rep = new dim_vector_rep (*rep);
+      }
+  }
+
+private:
+
+  dim_vector_rep *nil_rep (void) const
+  {
+    static dim_vector_rep *nr = new dim_vector_rep ();
+
+    return nr;
+  }
+
+public:
+
+  explicit dim_vector (void)
+    : rep (nil_rep ()) { rep->count++; }
+
+  explicit dim_vector (int n)
+    : rep (new dim_vector_rep (n)) { }
+
+  explicit dim_vector (int r, int c)
+    : rep (new dim_vector_rep (r, c)) { }
+
+  explicit dim_vector (int r, int c, int p)
+    : rep (new dim_vector_rep (r, c, p)) { }
+
+  dim_vector (const dim_vector& dv)
+    : rep (dv.rep) { rep->count++; }
+
+  dim_vector& operator = (const dim_vector& dv)
+  {
+    if (&dv != this)
+      {
+	if (--rep->count <= 0)
+	  delete rep;
+
+	rep = dv.rep;
+	rep->count++;
+      }
+
+    return *this;
+  }
+
+  ~dim_vector (void)
+  {
+    if (--rep->count <= 0)
+      delete rep;
+  }
+
+  int length (void) const { return rep->length (); }
+
+  int& elem (int i) { make_unique (); return rep->elem (i); }
+
+  int elem (int i) const { return rep->elem (i); }
 
   int& operator () (int i) { return elem (i); }
 
   int operator () (int i) const { return elem (i); }
 
   void resize (int n)
-    {
-      if (n > ndims)
-	{
-	  int *new_dims = new int [n];
+  {
+    int len = length ();
 
-	  for (int i = 0; i < ndims; i++)
-	    new_dims[i] = dims[i];
+    if (n != len)
+      {
+	dim_vector_rep *old_rep = rep;
 
-	  for (int i = ndims; i < n; i++)
-	    new_dims[i] = 0;
-
-	  delete [] dims;
+	rep = new dim_vector_rep (n, old_rep);
 
-	  dims = new_dims;
+	if (--old_rep->count <= 0)
+	  delete old_rep;
+      }
+  }
 
-	  ndims = n;
-	}
-      else
-	ndims = n;
-    }
 
   std::string str (void) const
-    {
-      OSSTREAM buf;
+  {
+    OSSTREAM buf;
 
-      for (int i = 0; i < ndims; i++)
-	{
-	  buf << dims[i];
+    for (int i = 0; i < length (); i++)
+      {
+	buf << elem (i);
 
-	  if (i < ndims - 1)
-	    buf << "x";
-	}
+	if (i < length () - 1)
+	  buf << "x";
+      }
 
-      buf << OSSTREAM_ENDS;
+    buf << OSSTREAM_ENDS;
 
-      std::string retval = OSSTREAM_STR (buf);
+    std::string retval = OSSTREAM_STR (buf);
 
-      OSSTREAM_FREEZE (buf);
+    OSSTREAM_FREEZE (buf);
 
-      return retval;
-    }
+    return retval;
+  }
 
   bool all_zero (void) const
-    {
-      bool retval = true;
+  {
+    bool retval = true;
 
-      for (int i = 0; i < ndims; i++)
-	{
-	  if (dims[i] != 0)
-	    {
-	      retval = false;
-	      break;
-	    }
-	}
+    for (int i = 0; i < length (); i++)
+      {
+	if (elem (i) != 0)
+	  {
+	    retval = false;
+	    break;
+	  }
+      }
 
-      return retval;
-    }
-
-private:
-
-  int ndims;
-  int *dims;
+    return retval;
+  }
 };
 
 static inline bool
 operator == (const dim_vector& a, const dim_vector& b)
 {
   bool retval = true;
 
   int a_len = a.length ();
diff --git a/src/Cell.h b/src/Cell.h
--- a/src/Cell.h
+++ b/src/Cell.h
@@ -36,17 +36,17 @@ Software Foundation, 59 Temple Place - S
 #include "oct-obj.h"
 
 class
 Cell : public ArrayN<octave_value>
 {
 public:
 
   Cell (void)
-    : ArrayN<octave_value> () { }
+    : ArrayN<octave_value> (dim_vector (0, 0)) { }
 
   Cell (const octave_value& val)
     : ArrayN<octave_value> (dim_vector (1, 1), val) { }
 
   Cell (const octave_value_list& ovl)
     : ArrayN<octave_value> (dim_vector (ovl.length (), 1))
     {
       for (int i = 0; i < ovl.length (); i++)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,22 @@
+2003-10-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pt-idx.cc (make_subs_cell): Pass dim_vector object to resize.
+
+	* ov-typeinfo.cc (octave_value_typeinfo::do_register_type):
+	Use resize_and_fill for types.
+
+	* oct-obj.h (octave_value_list::maybe_resize): Use resize_and_fill.
+	(octave_value_list::resize (int, const octave_value&)): Likewise.
+
+	* oct-map.cc (Octave_map::assign): Use resize_and_fill as needed.
+
+	* Cell.h (Cell (void)): Default size is now 0x0.
+
 2003-10-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* OPERATORS/op-cm-m.cc, OPERATORS/op-cm-s.cc,
 	OPERATORS/op-cs-m.cc, OPERATORS/op-m-cm.cc, OPERATORS/op-s-cm.cc:
 	Include headers for N-d operators.
 
 2003-10-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -133,22 +133,22 @@ Octave_map::assign (const octave_value_l
   if (! error_state)
     {
       int rhs_len = tmp.length ();
 
       int len = array_length ();
 
       if (rhs_len < len)
 	{
-	  tmp.resize (len, fill_value);
+	  tmp.resize_and_fill (len, fill_value);
 	}
       else if (rhs_len > len)
 	{
 	  for (iterator p = begin (); p != end (); p++)
-	    contents(p).resize (rhs_len, fill_value);
+	    contents(p).resize_and_fill (rhs_len, fill_value);
 
 	  array_len = rhs_len;
 	}
 
       map[key] = tmp;
     }
 
   return *this;
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -94,17 +94,17 @@ public:
   octave_value operator () (int n) const { return elem (n); }
 
   int length (void) const { return data.length (); }
 
   bool empty (void) const { return length () == 0; }
 
   void resize (int n) { data.resize (n); }
 
-  void resize (int n, const octave_value& val) { data.resize (n, val); }
+  void resize (int n, const octave_value& val) { data.resize_and_fill (n, val); }
 
   octave_value_list& prepend (const octave_value& val);
 
   octave_value_list& append (const octave_value& val);
 
   octave_value_list& append (const octave_value_list& lst);
 
   octave_value_list& reverse (void);
@@ -153,17 +153,17 @@ private:
   octave_value_list (int n);
 
   octave_value_list (const Array<octave_value>& d)
     : data (d) { }
 
   void maybe_resize (int n)
     {
       if (n >= length ())
-	data.resize (n + 1, Matrix ());
+	data.resize_and_fill (n + 1, Matrix ());
     }
 
   octave_value& elem (int n)
     {
       maybe_resize (n);
       return data.elem (n);
     }
 
diff --git a/src/ov-typeinfo.cc b/src/ov-typeinfo.cc
--- a/src/ov-typeinfo.cc
+++ b/src/ov-typeinfo.cc
@@ -156,17 +156,17 @@ octave_value_typeinfo::do_register_type 
       return i;
 
   int len = types.length ();
 
   if (i == len)
     {
       len *= 2;
 
-      types.resize (len, std::string ());
+      types.resize_and_fill (len, std::string ());
 
       unary_ops.resize (static_cast<int> (octave_value::num_unary_ops),
 			len, static_cast<unary_op_fcn> (0));
 
       non_const_unary_ops.resize
 	(static_cast<int> (octave_value::num_unary_ops),
 	 len, static_cast<non_const_unary_op_fcn> (0));
 
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -132,17 +132,17 @@ make_subs_cell (tree_argument_list *args
   if (! error_state)
     {
       int n = arg_values.length ();
 
       if (n > 0)
 	{
 	  arg_values.stash_name_tags (arg_nm);
 
-	  retval.resize (1, n);
+	  retval.resize (dim_vector (1, n));
 
 	  for (int i = 0; i < n; i++)
 	    retval(0,i) = arg_values(i);
 	}
     }
 
   return retval;
 }
