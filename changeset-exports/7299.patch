# HG changeset patch
# User jwe
# Date 1197410809 0
#      Tue Dec 11 22:06:49 2007 +0000
# Node ID df2c3977b0bfe98b615e1d668705533fbc7b9eaa
# Parent  d42d8c43d3e7786ad92a3a7d76f6220526795ee4
[project @ 2007-12-11 22:06:49 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2007-12-11  John W. Eaton  <jwe@octave.org>
+
+	* Sparse.cc (Sparse<T>::index (idx_vector&, int) const):
+	If indexing scalar with empty matrix, return empty array with same
+	size as index.
+
 2007-12-10  John W. Eaton  <jwe@octave.org>
 
 	* NLEqn.h (NLEqn::fval): New data member.  Adjust constructors
 	and assignment operator.
 	(NLEqn::function_value): New function.
 	* NLEqn.cc (NLEqn::solve): If solution is successful, compute
 	function value.
 
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -1512,17 +1512,17 @@ Sparse<T>::index (idx_vector& idx_arg, i
       // then want to make a dense matrix with sparse 
       // representation. Ok, we'll do it, but you deserve what 
       // you get!!
       octave_idx_type n = idx_arg.freeze (length (), "sparse vector", resize_ok);
       if (n == 0)
 	if (idx_arg.one_zero_only ())
 	  retval = Sparse<T> (dim_vector (0, 0));
 	else
-	  retval = Sparse<T> (dim_vector (0, 1));
+	  retval = Sparse<T> (idx_orig_dims);
       else if (nz < 1)
 	if (n >= idx_orig_dims.numel ())
 	  retval = Sparse<T> (idx_orig_dims);
 	else
 	  retval = Sparse<T> (dim_vector (n, 1));
       else if (n >= idx_orig_dims.numel ())
 	{
 	  T el = elem (0);
