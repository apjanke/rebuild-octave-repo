# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1238135293 -3600
#      Fri Mar 27 07:28:13 2009 +0100
# Node ID ac0a23e9f5c573dcce4a6628873b432e1758da72
# Parent  656ad518f385b5f80b275a35b35f0b3ee6e7b938
more compatible indexing by logical empty matrices

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-03-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* idx-vector.cc (idx_vector::idx_vector_rep::idx_vector_rep (const
+	Array<bool>&): Use more M*b-compatible behaviour.
+
 2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dim-vector.h (dim_vector::numel): Add optional argument, simplify.
 
 2009-03-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.h (Array<T>::dims): Return a const reference.
 	(Array<T>::is_vector): New method.
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -290,20 +290,21 @@ idx_vector::idx_vector_rep::idx_vector_r
 }
 
 idx_vector::idx_vector_rep::idx_vector_rep (const Array<bool>& bnda)
   : data (0), len (0), ext (0), aowner (0), orig_dims ()
 {
   for (octave_idx_type i = 0, l = bnda.numel (); i < l; i++)
     if (bnda.xelem (i)) len++;
 
-  dim_vector dv = bnda.dims ();
+  const dim_vector dv = bnda.dims ();
 
-  orig_dims = ((dv.length () == 2 && dv(0) == 1)
-	       ? dim_vector (1, len) : orig_dims = dim_vector (len, 1));
+  if (! dv.all_zero ())
+    orig_dims = ((dv.length () == 2 && dv(0) == 1) 
+                 ? dim_vector (1, len) : dim_vector (len, 1));
 
   if (len != 0)
     {
       octave_idx_type *d = new octave_idx_type [len];
 
       octave_idx_type ntot = bnda.length ();
 
       octave_idx_type k = 0;
