# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1532967064 -7200
#      Mon Jul 30 18:11:04 2018 +0200
# Node ID 35002c2b886b9db9c11238234dda51043b2b7cbb
# Parent  29d89cd3d950b01e2c3914c9ddf798c7b9be8ca9
eigs.m: Fix BISTs for eigs with user defined function (bug #54399).

* eigs.m: use LU factorization for user defined functions in BISTs.

diff --git a/scripts/sparse/eigs.m b/scripts/sparse/eigs.m
--- a/scripts/sparse/eigs.m
+++ b/scripts/sparse/eigs.m
@@ -1484,73 +1484,82 @@ endfunction
 %! ResidualVectors = A * Evectors - B * Evectors * Evalues;
 %! RelativeErrors = norm (ResidualVectors, "columns") ./ ...
 %! norm (A * Evectors, "columns");
 %! assert (RelativeErrors, zeros (1, 5));
 %!testif HAVE_ARPACK
 %! A = rand (8);
 %! eigs (A, 6, "lr"); # this failed on 4.2.x
 %!testif HAVE_ARPACK
-%! A = rand (10);
-%! B = rand (10);
+%! M = magic (10);
+%! A = sin (M);
+%! B = cos (M);
 %! B = B * B';
 %! opts.v0 = (1:10)';
 %! [Evector, Evalues] = eigs (A, B, 4, "LM", opts);
 %! Afun = @(x) A * x;
 %! [Evector_f Evalues_f] = eigs (Afun, 10, B, 4, "LM", opts);
 %! assert (Evector, Evector_f);
 %! assert (Evalues, Evalues_f);
 %!testif HAVE_ARPACK
-%! A = rand (10);
-%! B = rand (10);
+%! M = magic (10);
+%! A = sin (M);
+%! B = cos (M);
 %! B = B * B';
 %! opts.v0 = (1:10)';
 %! [Evector, Evalues] = eigs (A, B, 4, "SM", opts);
-%! Afun = @(x) A \ x;
+%! [L, U, P] = lu (A);
+%! Afun = @(x) U \ (L \ (P * x));
 %! [Evector_f Evalues_f] = eigs (Afun, 10, B, 4, "SM", opts);
 %! assert (Evector, Evector_f);
 %! assert (Evalues, Evalues_f);
 %!testif HAVE_ARPACK
-%! A = rand (10);
+%! M = magic (10);
+%! A = sin (M);
 %! A = A * A';
-%! B = rand (10);
+%! B = cos (M);
 %! B = B * B';
 %! opts.v0 = (1:10)';
 %! [Evector, Evalues] = eigs (A, B, 4, "LM", opts);
 %! Afun = @(x) A * x;
 %! opts.issym = true;
 %! [Evector_f Evalues_f] = eigs (Afun, 10, B, 4, "LM", opts);
 %! assert (Evector, Evector_f);
 %! assert (Evalues, Evalues_f);
 %!testif HAVE_ARPACK
-%! A = rand (10);
+%! M = magic (10);
+%! A = sin (M);
 %! A = A * A';
-%! B = rand (10);
+%! B = cos (M);
 %! B = B * B';
 %! opts.v0 = (1:10)';
 %! [Evector, Evalues] = eigs (A, B, 4, "SM", opts);
-%! Afun = @(x) A \ x;
+%! [L, U, P] = lu (A);
+%! Afun = @(x) U \ (L \ (P * x));
 %! opts.issym = true;
 %! [Evector_f Evalues_f] = eigs (Afun, 10, B, 4, "SM", opts);
-%! assert (Evector, Evector_f, 100*eps);
-%! assert (Evalues, Evalues_f, 100*eps);
+%! assert (Evector, Evector_f);
+%! assert (Evalues, Evalues_f);
 %!testif HAVE_ARPACK
-%! A = rand (10) + 1i * rand (10);
-%! B = rand (10) + 1i * rand (10);
+%! M = magic (10);
+%! A = sin (M) + 1i * cos (M);
+%! B = cos (M) + 1i * sin (M);
 %! B = B * B';
 %! opts.v0 = (1:10)';
 %! [Evector, Evalues] = eigs (A, B, 4, "LM", opts);
 %! Afun = @(x) A * x;
 %! opts.isreal = false;
 %! [Evector_f Evalues_f] = eigs (Afun, 10, B, 4, "LM", opts);
 %! assert (Evector, Evector_f);
 %! assert (Evalues, Evalues_f);
 %!testif HAVE_ARPACK
-%! A = rand (10) + 1i * rand (10);
-%! B = rand (10) + 1i * rand (10);
+%! M = magic (10);
+%! A = sin (M) + 1i * cos (M);
+%! B = cos (M) + 1i * sin (M);
 %! B = B * B';
 %! opts.v0 = (1:10)';
 %! [Evector, Evalues] = eigs (A, B, 4, "SM", opts);
-%! Afun = @(x) A \ x;
+%! [L, U, P] = lu (A);
+%! Afun = @(x) U \ (L \ (P *x));
 %! opts.isreal = false;
 %! [Evector_f, Evalues_f] = eigs (Afun, 10, B, 4, "SM", opts);
 %! assert (Evector, Evector_f);
 %! assert (Evalues, Evalues_f);
