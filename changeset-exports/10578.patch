# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1272384424 14400
#      Tue Apr 27 12:07:04 2010 -0400
# Node ID cb08831272516afeec113d0a1eebbea8d411005e
# Parent  87f879cf48fd9917247944e482f463e397019d81
limit on recursion via calls to source function

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2010-04-27  John W. Eaton  <jwe@octave.org>
+
+	* ov-usr-fcn.cc (octave_user_script::do_multi_index_op):
+	Correct spelling of max_recursion_depth in error message.
+	(octave_usr_fcn::do_multi_index_op): Ditto.
+	* pt-eval.h, pt-eval.cc (Vmax_recursion_depth): Move definition
+	here from ov-usr-fcn.cc.  Now extern.
+	(Fmax_recursion_depth): Move definition here from ov-usr-fcn.cc.
+	* oct-parse.yy (source_file): Limit recursive calls on a
+	per-file basis.
+	Addresses bug #29491.
+
 2010-04-25  David Bateman  <dbateman@free.fr>
 
 	* oct-parse.yy (octave_function * load_fcn_from_file
 	(const std::string&, const std::string&, const std::string&)
         (const std::string&, bool)): When loading a mex-file attempt
 	to load the m-file first to get the help string.
 
 2010-04-24  Ben Abbott <bpabbott@mac.com>
diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -3872,26 +3872,76 @@ With no arguments, return a structure co
 
   return retval;
 }
 
 void
 source_file (const std::string& file_name, const std::string& context,
              bool verbose, bool require_file, const std::string& warn_for)
 {
+  // Map from absolute name of script file to recursion level.  We
+  // use a map instead of simply placing a limit on recursion in the
+  // source_file function so that two mutually recursive scripts
+  // written as
+  //
+  //   foo1.m:
+  //   ------
+  //   foo2
+  //
+  //   foo2.m:
+  //   ------
+  //   foo1
+  //
+  // and called with
+  //
+  //   foo1
+  //
+  // (for example) will behave the same if they are written as
+  //
+  //   foo1.m:
+  //   ------
+  //   source ("foo2.m")
+  //
+  //   foo2.m:
+  //   ------
+  //   source ("foo1.m")
+  //
+  // and called with
+  //
+  //   source ("foo1.m")
+  //
+  // (for example).
+
+  static std::map<std::string, int> source_call_depth;
+
   std::string file_full_name = file_ops::tilde_expand (file_name);
 
+  file_full_name = octave_env::make_absolute (file_full_name);
+
   unwind_protect frame;
 
   frame.protect_var (curr_fcn_file_name);
   frame.protect_var (curr_fcn_file_full_name);
 
   curr_fcn_file_name = file_name;
   curr_fcn_file_full_name = file_full_name;
 
+  if (source_call_depth.find (file_full_name) == source_call_depth.end ())
+    source_call_depth[file_full_name] = -1;
+
+  frame.protect_var (source_call_depth[file_full_name]);
+
+  source_call_depth[file_full_name]++;
+
+  if (source_call_depth[file_full_name] >= Vmax_recursion_depth)
+    {
+      error ("max_recursion_depth exceeded");
+      return;
+    }
+
   if (! context.empty ())
     {
       if (context == "caller")
         octave_call_stack::goto_caller_frame ();
       else if (context == "base")
         octave_call_stack::goto_base_frame ();
       else
         error ("source: context must be \"caller\" or \"base\"");
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -44,19 +44,16 @@ along with Octave; see the file COPYING.
 #include "pt-walk.h"
 #include "symtab.h"
 #include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "parse.h"
 #include "variables.h"
 
-// Maximum nesting level for functions called recursively.
-static int Vmax_recursion_depth = 256;
-
 // Whether to optimize subsasgn method calls.
 static bool Voptimize_subsasgn_calls = true;
 
 // User defined scripts.
 
 DEFINE_OCTAVE_ALLOCATOR (octave_user_script);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_user_script,
@@ -141,17 +138,17 @@ octave_user_script::do_multi_index_op (i
 
                   if (tree_break_command::breaking)
                     tree_break_command::breaking--;
 
                   if (error_state)
                     octave_call_stack::backtrace_error_message ();
                 }
               else
-                ::error ("max_recursion_limit exceeded");
+                ::error ("max_recursion_depth exceeded");
             }
         }
       else
         error ("invalid call to script %s", file_name.c_str ());
     }
 
   return retval;
 }
@@ -334,17 +331,17 @@ octave_user_function::do_multi_index_op 
 
   unwind_protect frame;
 
   frame.protect_var (call_depth);
   call_depth++;
 
   if (call_depth >= Vmax_recursion_depth)
     {
-      ::error ("max_recursion_limit exceeded");
+      ::error ("max_recursion_depth exceeded");
       return retval;
     }
 
   // Save old and set current symbol table context, for
   // eval_undefined_error().
 
   octave_call_stack::push (this, local_scope, call_depth);
   frame.add_fcn (octave_call_stack::pop);
@@ -663,28 +660,16 @@ At the top level, @code{nargout} is unde
         error ("nargout: invalid call at top level");
     }
   else
     print_usage ();
 
   return retval;
 }
 
-DEFUN (max_recursion_depth, args, nargout,
-  "-*- texinfo -*-\n\
-@deftypefn {Built-in Function} {@var{val} =} max_recursion_depth ()\n\
-@deftypefnx {Built-in Function} {@var{old_val} =} max_recursion_depth (@var{new_val})\n\
-Query or set the internal limit on the number of times a function may\n\
-be called recursively.  If the limit is exceeded, an error message is\n\
-printed and control returns to the top level.\n\
-@end deftypefn")
-{
-  return SET_INTERNAL_VARIABLE (max_recursion_depth);
-}
-
 DEFUN (optimize_subsasgn_calls, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} optimize_subsasgn_calls ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} optimize_subsasgn_calls  (@var{new_val})\n\
 Query or set the internal flag for subsasgn method call optimizations.\n\
 If true, Octave will attempt to eliminate the redundant copying when calling\n\
 subsasgn method of a user-defined class.\n\
 @end deftypefn")
diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -53,16 +53,20 @@ int tree_evaluator::dbstep_flag = 0;
 size_t tree_evaluator::current_frame = 0;
 
 bool tree_evaluator::debug_mode = false;
 
 bool tree_evaluator::in_fcn_or_script_body = false;
 
 bool tree_evaluator::in_loop_command = false;
 
+// Maximum nesting level for functions, scripts, or sourced files called
+// recursively.
+int Vmax_recursion_depth = 256;
+
 // If TRUE, turn off printing of results in functions (as if a
 // semicolon has been appended to each statement).
 static bool Vsilent_functions = false;
 
 // Normal evaluator.
 
 void
 tree_evaluator::visit_anon_fcn_handle (tree_anon_fcn_handle&)
@@ -1163,16 +1167,28 @@ tree_evaluator::do_breakpoint (bool is_b
 // interface won't have to change if we decide to use it in the future.
 
 octave_value
 tree_evaluator::do_keyboard (const octave_value_list& args) const
 {
   return ::do_keyboard (args);
 }
 
+DEFUN (max_recursion_depth, args, nargout,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {@var{val} =} max_recursion_depth ()\n\
+@deftypefnx {Built-in Function} {@var{old_val} =} max_recursion_depth (@var{new_val})\n\
+Query or set the internal limit on the number of times a function may\n\
+be called recursively.  If the limit is exceeded, an error message is\n\
+printed and control returns to the top level.\n\
+@end deftypefn")
+{
+  return SET_INTERNAL_VARIABLE (max_recursion_depth);
+}
+
 DEFUN (silent_functions, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{val} =} silent_functions ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} silent_functions (@var{new_val})\n\
 Query or set the internal variable that controls whether internal\n\
 output from a function is suppressed.  If this option is disabled,\n\
 Octave will display the results produced by evaluating expressions\n\
 within a function body that are not terminated with a semicolon.\n\
diff --git a/src/pt-eval.h b/src/pt-eval.h
--- a/src/pt-eval.h
+++ b/src/pt-eval.h
@@ -170,9 +170,13 @@ private:
 
   tree_evaluator (const tree_evaluator&);
 
   tree_evaluator& operator = (const tree_evaluator&);
 };
 
 extern tree_evaluator *current_evaluator;
 
+// Maximum nesting level for functions, scripts, or sourced files called
+// recursively.
+extern int Vmax_recursion_depth;
+
 #endif
