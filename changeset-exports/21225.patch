# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1454970852 18000
#      Mon Feb 08 17:34:12 2016 -0500
# Node ID 19a619ac950883d8341090cd13b7b3e3b4040639
# Parent  2e64b5899d1f4be195b1081da6aefbfb84bd4e44
rename FLOAT_TRUNCATE to OCTAVE_FLOAT_TRUNCATE

* oct-cmplx.h, oct-conf-post.in.h: Rename FLOAT_TRUNCATE to
OCTAVE_FLOAT_TRUNCATE.

diff --git a/liboctave/util/oct-cmplx.h b/liboctave/util/oct-cmplx.h
--- a/liboctave/util/oct-cmplx.h
+++ b/liboctave/util/oct-cmplx.h
@@ -39,22 +39,22 @@ typedef std::complex<float> FloatComplex
 // The standard C library function arg() returns [-pi,pi], which creates a
 // non-unique representation for numbers along the negative real axis branch
 // cut.  Change this to principal value (-pi,pi] by mapping -pi to pi.
 
 #define DEF_COMPLEXR_COMP(OP, OPS) \
 template <typename T> \
 inline bool operator OP (const std::complex<T>& a, const std::complex<T>& b) \
 { \
-  FLOAT_TRUNCATE const T ax = std::abs (a); \
-  FLOAT_TRUNCATE const T bx = std::abs (b); \
+  OCTAVE_FLOAT_TRUNCATE const T ax = std::abs (a); \
+  OCTAVE_FLOAT_TRUNCATE const T bx = std::abs (b); \
   if (ax == bx) \
     { \
-      FLOAT_TRUNCATE const T ay = std::arg (a); \
-      FLOAT_TRUNCATE const T by = std::arg (b); \
+      OCTAVE_FLOAT_TRUNCATE const T ay = std::arg (a); \
+      OCTAVE_FLOAT_TRUNCATE const T by = std::arg (b); \
       if (ay == static_cast<T> (-M_PI)) \
         { \
           if (by != static_cast<T> (-M_PI)) \
             return static_cast<T> (M_PI) OP by; \
         } \
       else if (by == static_cast<T> (-M_PI)) \
         { \
           return ay OP static_cast<T> (M_PI); \
@@ -62,36 +62,36 @@ inline bool operator OP (const std::comp
       return ay OP by; \
     } \
   else \
     return ax OPS bx; \
 } \
 template <typename T> \
 inline bool operator OP (const std::complex<T>& a, T b) \
 { \
-  FLOAT_TRUNCATE const T ax = std::abs (a); \
-  FLOAT_TRUNCATE const T bx = std::abs (b); \
+  OCTAVE_FLOAT_TRUNCATE const T ax = std::abs (a); \
+  OCTAVE_FLOAT_TRUNCATE const T bx = std::abs (b); \
   if (ax == bx) \
     { \
-      FLOAT_TRUNCATE const T ay = std::arg (a); \
+      OCTAVE_FLOAT_TRUNCATE const T ay = std::arg (a); \
       if (ay == static_cast<T> (-M_PI)) \
         return static_cast<T> (M_PI) OP 0; \
       return ay OP 0; \
     } \
   else \
     return ax OPS bx; \
 } \
 template <typename T> \
 inline bool operator OP (T a, const std::complex<T>& b) \
 { \
-  FLOAT_TRUNCATE const T ax = std::abs (a); \
-  FLOAT_TRUNCATE const T bx = std::abs (b); \
+  OCTAVE_FLOAT_TRUNCATE const T ax = std::abs (a); \
+  OCTAVE_FLOAT_TRUNCATE const T bx = std::abs (b); \
   if (ax == bx) \
     { \
-      FLOAT_TRUNCATE const T by = std::arg (b); \
+      OCTAVE_FLOAT_TRUNCATE const T by = std::arg (b); \
       if (by == static_cast<T> (-M_PI)) \
         return 0 OP static_cast<T> (M_PI); \
       return 0 OP by; \
     } \
   else \
     return ax OPS bx; \
 }
 
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -178,19 +178,19 @@ typedef unsigned long ino_t;
 #  define USE_64_BIT_IDX_T 1
 #endif
 
 #if defined (ENABLE_OPENMP)
 #  define HAVE_OPENMP 1
 #endif
 
 #if defined (ENABLE_FLOAT_TRUNCATE)
-#  define FLOAT_TRUNCATE volatile
+#  define OCTAVE_FLOAT_TRUNCATE volatile
 #else
-#  define FLOAT_TRUNCATE
+#  define OCTAVE_FLOAT_TRUNCATE
 #endif
 
 /* oct-types.h */
 
 #include <stdint.h>
 
 typedef OCTAVE_IDX_TYPE octave_idx_type;
 
