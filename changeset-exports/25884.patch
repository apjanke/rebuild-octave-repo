# HG changeset patch
# User John Swensen <jpswensen@gmail.com>
# Date 1536997428 -7200
#      Sat Sep 15 09:43:48 2018 +0200
# Node ID 4e108574385c161a1f1ac83cabeee9868b0b143a
# Parent  cfdc768b661c0e7ad02b7e146c7558032554531a
Improve OpenGL rendering on high resolution screens with Qt 5 (bug #49053)

* FigureWindow.cc/h (FigureWindow::figureWindowShown): New signal
  (FigureWindow::showEvent): Overload QMainWindow::showEvent to also emit
  figureWindowShown signal.

* Figure.cc/h (Figure::figureWindowShown): New slot. Set the figure object
  __device_pixel_ratio__ property and connect the window's screenChanged signal
  to Figure::screenChanged slot.
  (Figure::screenChanged): New slot. Update the figure object's
  __device_pixel_ratio__ property.

* GLCanvas.cc (GLCanvas::draw, GLCanvas::selectFromAxes) scale the
  opengl_rederer's viewport with the correct __device_pixel_ratio__

* gl-render.cc/h (opengl_renderer::m_devpixratio): New data member to store
  the current screen's __device_pixel_ratio__
  (opengl_renderer::draw_figure): Set m_devpixratio.
  (opengl_renderer::setup_opengl_transformation,::draw_text_background,
  ::opengl_renderer::init_marker): Scale width and height of the figure
  when setting up glOrtho transform.
  (opengl_renderer::draw_image): Scale zoom factors when using glPixelZoom
  (opengl_renderer::set_font): Scale font size.
  (opengl_renderer::set_linewidth): Scale line width.

* graphics.cc (device_pixel_ratio): New static function to get the ancestor
  figure's __devive_pixel_ratio__.
  (axes::properties::update_font, text::properties::update_font): Scale font
  size.
  (axes::properties::get_ticklabel_extents): Scale tick labels size.
  (text::properties::get_extent): Scale text size.
  (figure::properties::update_text_pos): New mehtod to update the position of
  axes objects annotations and text objects.

* graphics.in.h (figure::properties::__device_pixel_ratio__,
  figure::properties::update__device_pixel_ratio__): New property and updater.
  (axes::properties::update_font, text::properties::update_font,
  text::properties::update_text_extent): Make methods public so that
  update_text_pos can access them.

* acinclude.m4: Determine if QScreen::devicePixelRatio is present in the Qt
  library in use.

* print.m: set __device_pixel_ratio__ to 1 when printing.

diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -36,16 +36,18 @@ along with Octave; see the file COPYING.
 #include <QImage>
 #include <QMainWindow>
 #include <QMenu>
 #include <QMenuBar>
 #include <QMessageBox>
 #include <QtDebug>
 #include <QTimer>
 #include <QToolBar>
+#include <QWindow>
+#include <QScreen>
 
 #include "Canvas.h"
 #include "Container.h"
 #include "Figure.h"
 #include "FigureWindow.h"
 #include "MouseModeActionGroup.h"
 #include "QtHandlesUtils.h"
 
@@ -109,16 +111,21 @@ namespace QtHandles
       m_menuBar (nullptr), m_innerRect (), m_outerRect (),
       m_mouseModeGroup (nullptr)
   {
     m_container = new Container (win);
     win->setCentralWidget (m_container);
 
     figure::properties& fp = properties<figure> ();
 
+    // Register for the signal that indicates when a window has moved
+    // to a different screen
+    connect (win, SIGNAL (figureWindowShown ()),
+             this, SLOT (figureWindowShown ()));
+
     // Status bar
     m_statusBar = win->statusBar ();
     int boffset = 0;
 
     // Toolbar and menubar
     createFigureToolBarAndMenuBar ();
     int toffset = 0;
 
@@ -916,16 +923,44 @@ namespace QtHandles
   {
     Canvas *canvas = m_container->canvas (m_handle);
 
     if (canvas)
       canvas->autoAxes (m_handle);
   }
 
   void
+  Figure::figureWindowShown ()
+  {
+#if defined (HAVE_QSCREEN_DEVICEPIXELRATIO)
+    QWindow* window = qWidget<QMainWindow> ()->windowHandle ();
+    QScreen* screen = window->screen ();
+    
+    gh_manager::auto_lock lock;
+    
+    figure::properties& fp = properties<figure> ();
+    fp.set___device_pixel_ratio__ (screen->devicePixelRatio ());
+
+    connect (window, SIGNAL (screenChanged (QScreen*)),
+             this, SLOT (screenChanged (QScreen*)));
+#endif
+  }
+
+  void
+  Figure::screenChanged (QScreen* screen)
+  {
+#if defined (HAVE_QSCREEN_DEVICEPIXELRATIO)
+    gh_manager::auto_lock lock;
+    
+    figure::properties& fp = properties<figure> ();
+    fp.set___device_pixel_ratio__ (screen->devicePixelRatio ());
+#endif
+  }
+
+  void
   Figure::enableMouseTracking (void)
   {
     // Enable mouse tracking on every widgets
     m_container->setMouseTracking (true);
     m_container->canvas (m_handle)->qWidget ()->setMouseTracking (true);
     foreach (QWidget *w, m_container->findChildren<QWidget*> ())
       w->setMouseTracking (true);
   }
diff --git a/libgui/graphics/Figure.h b/libgui/graphics/Figure.h
--- a/libgui/graphics/Figure.h
+++ b/libgui/graphics/Figure.h
@@ -27,16 +27,17 @@ along with Octave; see the file COPYING.
 #include <QStatusBar>
 
 #include "GenericEventNotify.h"
 #include "MenuContainer.h"
 #include "Object.h"
 
 class QMainWindow;
 class QToolBar;
+class QScreen;
 
 namespace QtHandles
 {
 
   enum MouseMode
   {
     // NOTE: These values must match the order of the buttons in the
     // MouseModeActionGroup object.
@@ -117,16 +118,18 @@ namespace QtHandles
 
   private slots:
     void setMouseMode (MouseMode mode);
     void updateMenuBar (int height = -1);
     void updateContainer (void);
     void toggleAxes (void);
     void toggleGrid (void);
     void autoAxes (void);
+    void figureWindowShown ();
+    void screenChanged (QScreen*);
 
   public slots:
     uint8NDArray slotGetPixels (void);
 
   signals:
     void asyncUpdate (void);
 
   private:
diff --git a/libgui/graphics/FigureWindow.cc b/libgui/graphics/FigureWindow.cc
--- a/libgui/graphics/FigureWindow.cc
+++ b/libgui/graphics/FigureWindow.cc
@@ -43,9 +43,15 @@ namespace QtHandles
 
   QMenu*
   FigureWindow::createPopupMenu (void)
   {
     // For the time being, disable menubar/toolbar popup menu
     return nullptr;
   }
 
+  void FigureWindow::showEvent (QShowEvent* ev)
+  {
+    QMainWindow::showEvent (ev);
+    emit figureWindowShown();
+  }
+
 }
diff --git a/libgui/graphics/FigureWindow.h b/libgui/graphics/FigureWindow.h
--- a/libgui/graphics/FigureWindow.h
+++ b/libgui/graphics/FigureWindow.h
@@ -32,17 +32,24 @@ namespace QtHandles
 
   DECLARE_GENERICEVENTNOTIFY_SENDER(FigureWindowBase, QMainWindow);
 
   class FigureWindow : public FigureWindowBase
   {
     Q_OBJECT
 
   public:
-    FigureWindow (QWidget *parent = nullptr);
+    explicit FigureWindow (QWidget *parent = nullptr);
     ~FigureWindow (void);
 
     QMenu * createPopupMenu (void);
+
+  protected:
+    void showEvent(QShowEvent *ev);
+
+  signals:
+    void figureWindowShown();
+
   };
 
 }
 
 #endif
diff --git a/libgui/graphics/GLCanvas.cc b/libgui/graphics/GLCanvas.cc
--- a/libgui/graphics/GLCanvas.cc
+++ b/libgui/graphics/GLCanvas.cc
@@ -67,17 +67,19 @@ namespace QtHandles
   void
   GLCanvas::draw (const graphics_handle& gh)
   {
     gh_manager::auto_lock lock;
     graphics_object go = gh_manager::get_object (gh);
 
     if (go)
       {
-        m_renderer.set_viewport (width (), height ());
+        graphics_object fig = go.get_ancestor ("figure");
+        double dpr = fig.get ("__device_pixel_ratio__").double_value ();
+        m_renderer.set_viewport (dpr * width (), dpr * height ());
         m_renderer.draw (go);
       }
   }
 
   uint8NDArray
   GLCanvas::do_getPixels (const graphics_handle& gh)
   {
     uint8NDArray retval;
@@ -170,17 +172,20 @@ namespace QtHandles
   GLCanvas::selectFromAxes (const graphics_object& ax, const QPoint& pt)
   {
     makeCurrent ();
 
     if (ax)
       {
         octave::opengl_selector s (m_glfcns);
 
-        s.set_viewport (width (), height ());
+        graphics_object fig = ax.get_ancestor ("figure");
+        double dpr = fig.get ("__device_pixel_ratio__").double_value ();
+
+        s.set_viewport (dpr * width (), dpr * height ());
         return s.select (ax, pt.x (), height () - pt.y (),
                          octave::select_ignore_hittest);
       }
 
     return graphics_object ();
   }
 
   void
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -612,17 +612,18 @@ namespace octave
 
 #endif
 
   opengl_renderer::opengl_renderer (opengl_functions& glfcns)
     : m_glfcns (glfcns), toolkit (), xform (), xmin (), xmax (),
       ymin (), ymax (), zmin (), zmax (), xZ1 (), xZ2 (),
       marker_id (), filled_marker_id (), camera_pos (), camera_dir (),
       view_vector (), interpreter ("none"), txt_renderer (),
-      m_current_light (0), m_max_lights (0), selecting (false)
+      m_current_light (0), m_max_lights (0), selecting (false),
+      m_devpixratio (1.)
   {
     // This constructor will fail if we don't have OpenGL or if the data
     // types we assumed in our public interface aren't compatible with the
     // OpenGL types.
 
 #if defined (HAVE_OPENGL)
 
     // Ensure that we can't request an image larger than OpenGL can handle.
@@ -697,18 +698,21 @@ namespace octave
                gluErrorString (gl_error), gl_error, props.graphics_object_name ().c_str ());
 
 #endif
   }
 
   void
   opengl_renderer::draw_figure (const figure::properties& props)
   {
+    // Current physical-pixel to toolkit-pixel factor
+    m_devpixratio = props.get___device_pixel_ratio__ ();
+    
     // Initialize OpenGL context
-
+    
     init_gl_context (props.is_graphicssmoothing (), props.get_color_rgb ());
 
 #if defined (HAVE_OPENGL)
 
     props.set___gl_extensions__ (get_string (GL_EXTENSIONS));
     props.set___gl_renderer__ (get_string (GL_RENDERER));
     props.set___gl_vendor__ (get_string (GL_VENDOR));
     props.set___gl_version__ (get_string (GL_VERSION));
@@ -1217,16 +1221,21 @@ namespace octave
     m_glfcns.glGetIntegerv (GL_VIEWPORT, vw);
 
     m_glfcns.glMatrixMode (GL_MODELVIEW);
     m_glfcns.glLoadIdentity ();
     m_glfcns.glScaled (1, 1, -1);
     m_glfcns.glMultMatrixd (x_mat1.data ());
     m_glfcns.glMatrixMode (GL_PROJECTION);
     m_glfcns.glLoadIdentity ();
+
+     // Use abstract Octave-pixels for transformation, not physical-pixels
+     vw[2] = octave::math::round (static_cast<float> (vw[2]) / m_devpixratio);
+     vw[3] = octave::math::round (static_cast<float> (vw[3]) / m_devpixratio);
+
     m_glfcns.glOrtho (0, vw[2], vw[3], 0, xZ1, xZ2);
     m_glfcns.glMultMatrixd (x_mat2.data ());
     m_glfcns.glMatrixMode (GL_MODELVIEW);
 
     m_glfcns.glClear (GL_DEPTH_BUFFER_BIT);
 
     // store axes transformation data
 
@@ -3681,16 +3690,20 @@ namespace octave
 #  endif
 
     m_glfcns.glGetIntegerv (GL_VIEWPORT, vp);
 
     // Save current transform matrices and set orthogonal window coordinates
     m_glfcns.glMatrixMode (GL_PROJECTION);
     m_glfcns.glPushMatrix ();
     m_glfcns.glLoadIdentity ();
+
+    vp[2] = octave::math::round (static_cast<float> (vp[2]) / m_devpixratio);
+    vp[3] = octave::math::round (static_cast<float> (vp[3]) / m_devpixratio);
+
     m_glfcns.glOrtho (0, vp[2], vp[3], 0, xZ1, xZ2);
     m_glfcns.glMatrixMode (GL_MODELVIEW);
     m_glfcns.glPushMatrix ();
     m_glfcns.glLoadIdentity ();
 
     // Translate coordinates so that the text anchor is (0,0)
     m_glfcns.glTranslated (pixpos(0), pixpos(1), -pixpos(2));
 
@@ -3853,17 +3866,18 @@ namespace octave
         GLfloat vp[4];
         m_glfcns.glGetFloatv (GL_VIEWPORT, vp);
         // FIXME: actually add the code to do it!
       }
 
     if (i0 >= i1 || j0 >= j1)
       return;
 
-    m_glfcns.glPixelZoom (pix_dx, -pix_dy);
+    m_glfcns.glPixelZoom (m_devpixratio * pix_dx,
+                          - m_devpixratio * pix_dy);
     m_glfcns.glRasterPos3d (im_xmin + nor_dx*j0, im_ymin + nor_dy*i0, 0);
 
     // by default this is 4
     m_glfcns.glPixelStorei (GL_UNPACK_ALIGNMENT, 1);
 
     // Expect RGB data
     if (dv.ndims () == 3 && dv(2) == 3)
       {
@@ -4064,21 +4078,22 @@ namespace octave
 
     panic_impossible ();
 
 #endif
   }
 
   void
   opengl_renderer::set_font (const base_properties& props)
-  {
+  {    
     txt_renderer.set_font (props.get ("fontname").string_value (),
                            props.get ("fontweight").string_value (),
                            props.get ("fontangle").string_value (),
-                           props.get ("__fontsize_points__").double_value ());
+                           props.get ("__fontsize_points__").double_value ()
+                           * m_devpixratio);
   }
 
   void
   opengl_renderer::set_polygon_offset (bool on, float offset)
   {
 #if defined (HAVE_OPENGL)
 
     if (on)
@@ -4106,17 +4121,17 @@ namespace octave
 #endif
   }
 
   void
   opengl_renderer::set_linewidth (float w)
   {
 #if defined (HAVE_OPENGL)
 
-    m_glfcns.glLineWidth (w);
+    m_glfcns.glLineWidth (w * m_devpixratio);
 
 #else
 
     octave_unused_parameter (w);
 
     // This shouldn't happen because construction of opengl_renderer
     // objects is supposed to be impossible if OpenGL is not available.
 
@@ -4256,16 +4271,20 @@ namespace octave
     int vw[4];
 #  endif
 
     m_glfcns.glGetIntegerv (GL_VIEWPORT, vw);
 
     m_glfcns.glMatrixMode (GL_PROJECTION);
     m_glfcns.glPushMatrix ();
     m_glfcns.glLoadIdentity ();
+
+    vw[2] = octave::math::round (static_cast<float> (vw[2]) / m_devpixratio);
+    vw[3] = octave::math::round (static_cast<float> (vw[3]) / m_devpixratio);
+
     m_glfcns.glOrtho (0, vw[2], vw[3], 0, xZ1, xZ2);
     m_glfcns.glMatrixMode (GL_MODELVIEW);
     m_glfcns.glPushMatrix ();
 
     set_clipping (false);
     set_linewidth (width);
 
     marker_id = make_marker_list (m, size, false);
diff --git a/libinterp/corefcn/gl-render.h b/libinterp/corefcn/gl-render.h
--- a/libinterp/corefcn/gl-render.h
+++ b/libinterp/corefcn/gl-render.h
@@ -239,14 +239,17 @@ namespace octave
     text_renderer txt_renderer;
 
     // light object present and visible
     unsigned int m_current_light;
     unsigned int m_max_lights;
 
     // Indicate we are drawing for selection purpose
     bool selecting;
+
+    // Factor used for translating Octave pixels to actual device pixels
+    double m_devpixratio;
   private:
     class patch_tesselator;
   };
 }
 
 #endif
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -865,16 +865,29 @@ static Matrix
 screen_size_pixels (void)
 {
   graphics_object obj = gh_manager::get_object (0);
   Matrix sz = obj.get ("screensize").matrix_value ();
   return convert_position (sz, obj.get ("units").string_value (), "pixels",
                            sz.extract_n (0, 2, 1, 2)).extract_n (0, 2, 1, 2);
 }
 
+static double
+device_pixel_ratio (graphics_handle h)
+{
+  double retval = 1.0;
+  
+  graphics_object fig = gh_manager::get_object (h).get_ancestor ("figure");
+  
+  if (fig.valid_object ())
+    retval = fig.get ("__device_pixel_ratio__").double_value ();
+  
+  return retval;
+}
+
 static void
 convert_cdata_2 (bool is_scaled, bool is_real, double clim_0, double clim_1,
                  const double *cmapv, double x, octave_idx_type lda,
                  octave_idx_type nc, octave_idx_type i, double *av)
 {
   if (is_scaled)
     x = octave::math::fix (nc * (x - clim_0) / (clim_1 - clim_0));
   else if (is_real)
@@ -2070,16 +2083,55 @@ figure::properties::update_handlevisibil
               NDArray kidsarray = kids.array_value ();
               gh_manager::get_object (0).set ("currentfigure", kidsarray(0));
             }
         }
     }
 
   base_properties::update_handlevisibility ();
 }
+
+static void
+update_text_pos (graphics_handle h)
+{
+  graphics_object go = gh_manager::get_object (h);
+  if (go.isa ("text"))
+    {
+      text::properties& tp
+        = dynamic_cast<text::properties&> (go.get_properties ());
+      tp.update_font ();
+      tp.update_text_extent ();
+    }
+  else if (go.isa ("figure") || go.isa ("uipanel") || go.isa ("axes")
+           || go.isa ("hggroup"))
+    {
+      Matrix ch = go.get_properties ().get_all_children ();
+      for (octave_idx_type ii = 0; ii < ch.numel (); ii++)
+        update_text_pos (graphics_handle (ch(ii)));
+
+      if (go.isa ("axes"))
+        {
+          axes::properties& ap
+            = dynamic_cast<axes::properties&> (go.get_properties ());
+          ap.update_font ();
+          ap.update_xlabel_position ();
+          ap.update_ylabel_position ();
+          ap.update_zlabel_position ();
+          ap.update_title_position ();
+          ap.update_axes_layout ();
+        }
+    }
+}
+
+void
+figure::properties::update___device_pixel_ratio__ (void)
+{
+  update_text_pos (get___myhandle__ ());
+}
+
 // ---------------------------------------------------------------------
 
 void
 property_list::set (const caseless_str& name, const octave_value& val)
 {
   size_t offset = 0;
 
   size_t len = name.length ();
@@ -6636,21 +6688,23 @@ axes::properties::update_font (std::stri
 
       gh_manager::get_object (get_xlabel ()).set (prop, val);
       gh_manager::get_object (get_ylabel ()).set (prop, val);
       gh_manager::get_object (get_zlabel ()).set (prop, val);
       gh_manager::get_object (get_title ()).set (prop, tval);
 
     }
 
+  double dpr = device_pixel_ratio (get___myhandle__ ());
+
   gh_manager::auto_lock guard;
   txt_renderer.set_font (get ("fontname").string_value (),
                          get ("fontweight").string_value (),
                          get ("fontangle").string_value (),
-                         get ("__fontsize_points__").double_value ());
+                         get ("__fontsize_points__").double_value () * dpr);
 }
 
 // The INTERNAL flag defines whether position or outerposition is used.
 
 Matrix
 axes::properties::get_boundingbox (bool internal,
                                    const Matrix& parent_pix_size) const
 {
@@ -7709,16 +7763,17 @@ axes::properties::calc_ticklabels (const
 
 Matrix
 axes::properties::get_ticklabel_extents (const Matrix& ticks,
                                          const string_vector& ticklabels,
                                          const Matrix& limits)
 {
   Matrix ext (1, 2, 0.0);
   double wmax, hmax;
+  double dpr = device_pixel_ratio (get___myhandle__ ());
   wmax = hmax = 0.0;
   int n = std::min (ticklabels.numel (), ticks.numel ());
   for (int i = 0; i < n; i++)
     {
       double val = ticks(i);
       if (limits(0) <= val && val <= limits(1))
         {
           std::string label (ticklabels(i));
@@ -7726,18 +7781,18 @@ axes::properties::get_ticklabel_extents 
           label = label.substr (0, label.find_last_not_of (' ')+1);
 
           if (txt_renderer.ok ())
             {
               gh_manager::auto_lock guard;
               ext = txt_renderer.get_extent (label, 0.0,
                                              get_ticklabelinterpreter ());
 
-              wmax = std::max (wmax, ext(0));
-              hmax = std::max (hmax, ext(1));
+              wmax = std::max (wmax, ext(0) / dpr);
+              hmax = std::max (hmax, ext(1) / dpr);
             }
           else
             {
               // FIXME: find a better approximation
               double fsize = get ("fontsize").double_value ();
               int len = label.length ();
 
               wmax = std::max (wmax, 0.5*fsize*len);
@@ -8783,17 +8838,24 @@ text::properties::get_extent (void) cons
   // (It doesn't in Matlab either, at least not in version 6.5.)
   Matrix m = extent.get ().matrix_value ();
   Matrix pos = get_position ().matrix_value ();
   Matrix p = convert_text_position (pos, *this, get_units (), "pixels");
 
   m(0) += p(0);
   m(1) += p(1);
 
-  return convert_text_position (m, *this, "pixels", get_units ());
+  Matrix bbox = convert_text_position (m, *this, "pixels", get_units ());
+
+  double dpr = device_pixel_ratio (get___myhandle__ ());
+
+  for (octave_idx_type ii = 0; ii < bbox.numel (); ii++)
+    bbox(ii) = bbox(ii) / dpr;
+  
+  return bbox;
 }
 
 void
 text::properties::set_fontunits (const octave_value& val)
 {
   caseless_str old_fontunits = get_fontunits ();
 
   if (fontunits.set (val, true))
@@ -8821,21 +8883,23 @@ text::properties::update_fontunits (cons
   fontsz = convert_font_size (fontsz, old_units, new_units, parent_height);
 
   set_fontsize (octave_value (fontsz));
 }
 
 void
 text::properties::update_font (void)
 {
+  double dpr = device_pixel_ratio (get___myhandle__ ());
+
   gh_manager::auto_lock guard;
   txt_renderer.set_font (get ("fontname").string_value (),
                          get ("fontweight").string_value (),
                          get ("fontangle").string_value (),
-                         get ("__fontsize_points__").double_value ());
+                         get ("__fontsize_points__").double_value () * dpr);
 
   txt_renderer.set_color (get_color_rgb ());
 }
 
 void
 text::properties::update_text_extent (void)
 {
   int halign = 0;
@@ -8865,17 +8929,17 @@ text::properties::update_text_extent (vo
 
   gh_manager::auto_lock guard;
   txt_renderer.text_to_pixels (sv.join ("\n"), pixels, bbox,
                                halign, valign, get_rotation (),
                                get_interpreter ());
   // The bbox is relative to the text's position.  We'll leave it that
   // way, because get_position does not return valid results when the
   // text is first constructed.  Conversion to proper coordinates is
-  // performed in get_extent.
+  // performed in get_extent.  
   set_extent (bbox);
 
   if (__autopos_tag___is ("xlabel") || __autopos_tag___is ("ylabel")
       || __autopos_tag___is ("zlabel") || __autopos_tag___is ("title"))
     update_autopos ("sync");
 }
 
 void
@@ -8922,19 +8986,19 @@ text::properties::update_units (void)
 }
 
 double
 text::properties::get___fontsize_points__ (double box_pix_height) const
 {
   double fontsz = get_fontsize ();
   double parent_height = box_pix_height;
 
+  graphics_object go (gh_manager::get_object (get___myhandle__ ()));
   if (fontunits_is ("normalized") && parent_height <= 0)
     {
-      graphics_object go (gh_manager::get_object (get___myhandle__ ()));
       graphics_object ax (go.get_ancestor ("axes"));
 
       parent_height = ax.get_properties ().get_boundingbox (true).elem (3);
     }
 
   return convert_font_size (fontsz, get_fontunits (), "points", parent_height);
 }
 
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -3178,16 +3178,17 @@ public:
       string_property __graphics_toolkit__ hs , default_graphics_toolkit ()
       any_property __guidata__ h , Matrix ()
       radio_property __mouse_mode__ hS , "{none}|pan|rotate|select|text|zoom"
       bool_property __printing__ h , "off"
       any_property __pan_mode__ h , Matrix ()
       any_property __plot_stream__ h , Matrix ()
       any_property __rotate_mode__ h , Matrix ()
       any_property __zoom_mode__ h , Matrix ()
+      double_property __device_pixel_ratio__ hU , 1.0
 
       // Obsolete properties: doublebuffer, mincolormap, wvisual, wvisualmode,
       //                      xdisplay, xvisual, xvisualmode
       // FIXME: DEPRECATED: Remove in version 5.
       bool_property doublebuffer hd , "on"
       double_property mincolormap hd , 64
       string_property wvisual hmd , ""
       radio_property wvisualmode hd , "{auto}|manual"
@@ -3524,16 +3525,18 @@ public:
 
     void unzoom (void);
     void update_handlevisibility (void);
     void push_zoom_stack (void);
     void clear_zoom_stack (bool do_unzoom = true);
 
     void update_units (const caseless_str& old_units);
 
+    void update_font (std::string prop = "");
+
     void update_fontunits (const caseless_str& old_fontunits);
 
     void increase_num_lights (void) { num_lights++; }
     void decrease_num_lights (void) { num_lights--; }
     unsigned int get_num_lights (void) const { return num_lights; }
 
   private:
 
@@ -3952,17 +3955,16 @@ public:
                          ylim);
     }
     void update_zticklabelmode (void)
     {
       if (zticklabelmode.is ("auto"))
         calc_ticklabels (ztick, zticklabel, zscale.is ("log"), false, 2, zlim);
     }
 
-    void update_font (std::string prop = "");
     void update_fontname (void)
     {
       update_font ("fontname");
       sync_positions ();
     }
     void update_fontsize (void)
     {
       update_font ("fontsize");
@@ -4383,16 +4385,20 @@ public:
 class OCTINTERP_API text : public base_graphics_object
 {
 public:
   class OCTINTERP_API properties : public base_properties
   {
   public:
     double get___fontsize_points__ (double box_pix_height = 0) const;
 
+    void update_text_extent (void);
+
+    void update_font (void);
+
     void set_position (const octave_value& val)
     {
       octave_value new_val (val);
 
       if (new_val.numel () == 2)
         {
           dim_vector dv (1, 3);
 
@@ -4492,25 +4498,22 @@ public:
                                 : lim(2));
           set_zliminclude ("on");
           set_zlim (lim);
         }
       else
         set_zliminclude ("off");
     }
 
-    void update_text_extent (void);
-
     void request_autopos (void);
     void update_positionmode (void) { request_autopos (); }
     void update_rotationmode (void) { request_autopos (); }
     void update_horizontalalignmentmode (void) { request_autopos (); }
     void update_verticalalignmentmode (void) { request_autopos (); }
 
-    void update_font (void);
     void update_string (void) { request_autopos (); update_text_extent (); }
     void update_rotation (void) { update_text_extent (); }
     void update_color (void) { update_font (); update_text_extent (); }
     void update_fontname (void) { update_font (); update_text_extent (); }
     void update_fontsize (void) { update_font (); update_text_extent (); }
     void update_fontangle (void) { update_font (); update_text_extent (); }
 
     void update_fontweight (void)
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -661,16 +661,46 @@ AC_DEFUN([OCTAVE_CHECK_FUNC_QOBJECT_FIND
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_func_qobject_findchildren_accepts_findchildoptions = yes; then
     AC_DEFINE(QOBJECT_FINDCHILDREN_ACCEPTS_FINDCHILDOPTIONS, 1,
       [Define to 1 if 'QObject::findChildren' accepts 'Qt::FindChildOptions' argument.])
   fi
 ])
 dnl
+dnl Check whether the Qt class QScreen has the devicePixelRatio member function.
+dnl This member function was introduced in Qt 5.5.
+dnl
+AC_DEFUN([OCTAVE_CHECK_FUNC_QSCREEN_DEVICEPIXELRATIO], [
+  AC_CACHE_CHECK([for QScreen::devicePixelRatio in <QScreen>],
+    [octave_cv_func_qscreen_devicepixelratio],
+    [AC_LANG_PUSH(C++)
+    ac_octave_save_CPPFLAGS="$CPPFLAGS"
+    ac_octave_save_CXXFLAGS="$CXXFLAGS"
+    CPPFLAGS="$QT_CPPFLAGS $CXXPICFLAG $CPPFLAGS"
+    CXXFLAGS="$CXXPICFLAG $CXXFLAGS"
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+        #include <QApplication>
+        #include <QScreen>
+        ]], [[
+        QScreen *screen = QApplication::primaryScreen ();
+        qreal ratio = screen->devicePixelRatio ();
+        ]])],
+      octave_cv_func_qscreen_devicepixelratio=yes,
+      octave_cv_func_qscreen_devicepixelratio=no)
+    CPPFLAGS="$ac_octave_save_CPPFLAGS"
+    CXXFLAGS="$ac_octave_save_CXXFLAGS"
+    AC_LANG_POP(C++)
+  ])
+  if test $octave_cv_func_qscreen_devicepixelratio = yes; then
+    AC_DEFINE(HAVE_QSCREEN_DEVICEPIXELRATIO, 1,
+      [Define to 1 if you have the `QScreen::devicePixelRatio' member function.])
+  fi
+])
+dnl
 dnl Check whether the Qt class QTabWidget has the setMovable member function.
 dnl This member function was introduced in Qt 4.5.
 dnl
 dnl FIXME: Delete this entirely when we can safely assume that Qt 4.5 or later
 dnl is in use everywhere, or when we drop support for Qt 4.
 dnl
 AC_DEFUN([OCTAVE_CHECK_FUNC_QTABWIDGET_SETMOVABLE], [
   AC_CACHE_CHECK([for QTabWidget::setMovable in <QTabWidget>],
@@ -2102,16 +2132,17 @@ AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_
     OCTAVE_CHECK_FUNC_QHEADERVIEW_SETSECTIONRESIZEMODE
     OCTAVE_CHECK_FUNC_QHEADERVIEW_SETSECTIONSCLICKABLE
     OCTAVE_CHECK_FUNC_QHEADERVIEW_SETSECTIONSMOVABLE
     OCTAVE_CHECK_FUNC_QHELPSEARCHQUERYWIDGET_SEARCHINPUT
     OCTAVE_CHECK_FUNC_QINSTALLMESSAGEHANDLER
     OCTAVE_CHECK_FUNC_QLINEEDIT_SETPLACEHOLDERTEXT
     OCTAVE_CHECK_FUNC_QMOUSEEVENT_LOCALPOS
     OCTAVE_CHECK_FUNC_QOBJECT_FINDCHILDREN_ACCEPTS_FINDCHILDOPTIONS
+    OCTAVE_CHECK_FUNC_QSCREEN_DEVICEPIXELRATIO
     OCTAVE_CHECK_FUNC_QTABWIDGET_SETMOVABLE
     OCTAVE_CHECK_FUNC_QTMESSAGEHANDLER_ACCEPTS_QMESSAGELOGCONTEXT
     OCTAVE_CHECK_MEMBER_QFONT_FORCE_INTEGER_METRICS
     OCTAVE_CHECK_MEMBER_QFONT_MONOSPACE
     OCTAVE_HAVE_QGUIAPPLICATION
 
     if test -n "$OPENGL_LIBS"; then
       OCTAVE_CHECK_QT_OPENGL_OK([build_qt_graphics=yes],
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -381,16 +381,25 @@ function print (varargin)
     for n = 1:numel(hobj)
       props(n).h = hobj(n);
       props(n).name = "units";
       props(n).value = {get(hobj(n), "units")};
       set (hobj(n), "units", "data");
       nfig += 1;
     endfor
 
+    ## Don't account for the actual pixel density
+    if (strcmp (tk, "qt"))
+      props(end+1).h = opts.figure;
+      props(end).name = "__device_pixel_ratio__";
+      props(end).value = {get(opts.figure, "__device_pixel_ratio__")};
+      set (opts.figure, "__device_pixel_ratio__", 1);
+      nfig += 1;
+    endif
+
     ## print() requires axes units = "normalized"
     hax = findall (opts.figure, "-depth", 1, "type", "axes", ...
       "-not", "units", "normalized");
     for n = 1:numel (hax)
       props(end+1).h = hax(n);
       props(end).name = "units";
       props(end).value = {get(hax(n), "units")};
       set (hax(n), "units", "normalized");
