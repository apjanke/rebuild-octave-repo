# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1312146816 -7200
#      Sun Jul 31 23:13:36 2011 +0200
# Node ID d04622d694fd3676187dc48a3a3ca60ccfd35142
# Parent  93dc3b05a30c4e544cb73e49e42d259b9a8a2b07
# Parent  a89aa9e05e1957a0c203eaf6f1b34faaf1d689eb
Merge.

diff --git a/gui/src/FileEditorMdiSubWindow.cpp b/gui/src/FileEditorMdiSubWindow.cpp
--- a/gui/src/FileEditorMdiSubWindow.cpp
+++ b/gui/src/FileEditorMdiSubWindow.cpp
@@ -12,16 +12,17 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include "FileEditorMdiSubWindow.h"
+#include "MainWindow.h"
 #include <QVBoxLayout>
 #include <QApplication>
 #include <QFile>
 #include <QFileDialog>
 #include <QMessageBox>
 #include <QAction>
 #include <QStyle>
 #include <QTextStream>
@@ -206,20 +207,34 @@ FileEditorMdiSubWindow::saveFileAs ()
     saveDir = QDir::homePath();
   QString saveFileName = QFileDialog::getSaveFileName(
         this, "Save File As", saveDir,SAVE_FILE_FILTER);
   if(saveFileName.isEmpty())
     return;
   saveFile(saveFileName);
 }
 
+// handle the run command
 void
-FileEditorMdiSubWindow::setEditorLexer (LexerOctaveGui* lexer)
+FileEditorMdiSubWindow::runFile ()
+{
+  if (m_editor->isModified ())
+    saveFile(m_fileName);
+  m_octave->sendText (QString ("run \'%1\'\n").arg (m_fileName));
+  m_octave->setFocus ();
+}
+
+// function for setting the already existing lexer from MainWindow
+void
+FileEditorMdiSubWindow::initEditor (OctaveTerminal* terminal,
+                                    LexerOctaveGui* lexer)
 {
   m_editor->setLexer(lexer);
+  m_octave = terminal; // for sending commands to octave
+                       // TODO: make a global commandOctave function?
 }
 
 // TODO: Do we still need tool tips in the status bar? Tool tips are now
 //       shown directly at the theme icons
 void
 FileEditorMdiSubWindow::showToolTipNew ()
 {
   m_statusBar->showMessage ("Create a new file", 2000);
@@ -261,16 +276,17 @@ FileEditorMdiSubWindow::registerModified
   m_modified = modified;
 }
 
 void
 FileEditorMdiSubWindow::construct ()
 {
   QStyle *style = QApplication::style ();
   setWidget (new QWidget ());
+  m_menuBar = new QMenuBar (this);
   m_toolBar = new QToolBar (this);
   m_statusBar = new QStatusBar (this);
   m_editor = new QsciScintilla (this);
 
   m_editor->setMarginType (1, QsciScintilla::SymbolMargin);
   m_editor->setMarginType (2, QsciScintilla::TextMargin);
   m_editor->setMarginType (3, QsciScintilla::SymbolMargin);
   m_editor->setFolding (QsciScintilla::BoxedTreeFoldStyle , 3);
@@ -282,18 +298,19 @@ FileEditorMdiSubWindow::construct ()
   m_editor->setBraceMatching (QsciScintilla::SloppyBraceMatch);
   m_editor->setAutoIndent (true);
   m_editor->setIndentationWidth (2);
   m_editor->setIndentationsUseTabs (false);
   m_editor->autoCompleteFromAll();
   m_editor->setAutoCompletionSource(QsciScintilla::AcsAPIs);
   m_editor->setAutoCompletionThreshold (3);
 
+  // The Actions
+
   // Theme icons with QStyle icons as fallback
-  m_toolBar->setIconSize(QSize(20,20)); // smaller icons (make configurable in user settings?)
   QAction *closeAction = new QAction (
         QIcon::fromTheme("window-close",style->standardIcon (QStyle::SP_DialogCloseButton)),
         tr("&Close File"), m_toolBar);
   QAction *newAction = new QAction (
         QIcon::fromTheme("document-new",style->standardIcon (QStyle::SP_FileIcon)),
         tr("&New File"), m_toolBar);
   QAction *openAction = new QAction (
         QIcon::fromTheme("document-open",style->standardIcon (QStyle::SP_DirOpenIcon)),
@@ -305,47 +322,91 @@ FileEditorMdiSubWindow::construct ()
         QIcon::fromTheme("document-save-as",style->standardIcon (QStyle::SP_DriveFDIcon)),
         tr("Save File &As"), m_toolBar);
   QAction *undoAction = new QAction (
         QIcon::fromTheme("edit-undo",style->standardIcon (QStyle::SP_ArrowLeft)),
         tr("&Undo"), m_toolBar);
   QAction *redoAction = new QAction (
         QIcon::fromTheme("edit-redo",style->standardIcon (QStyle::SP_ArrowRight)),
         tr("&Redo"), m_toolBar);
+  QAction *copyAction = new QAction (QIcon::fromTheme("edit-copy"),tr("&Copy"),m_toolBar);
+  QAction *cutAction = new QAction (QIcon::fromTheme("edit-cut"),tr("Cu&t"),m_toolBar);
+  QAction *pasteAction = new QAction (QIcon::fromTheme("edit-paste"),tr("&Paste"),m_toolBar);
+  QAction *runAction = new QAction (
+        QIcon::fromTheme("media-play",style->standardIcon (QStyle::SP_MediaPlay)),
+        tr("&Run File"), m_toolBar);
 
   // short cuts
   newAction->setShortcut(QKeySequence::New);
   openAction->setShortcut(QKeySequence::Open);
   saveAction->setShortcut(QKeySequence::Save);
   saveAsAction->setShortcut(QKeySequence::SaveAs);
   undoAction->setShortcut(QKeySequence::Undo);
   redoAction->setShortcut(QKeySequence::Redo);
+  copyAction->setShortcut(QKeySequence::Copy);
+  cutAction->setShortcut(QKeySequence::Cut);
+  pasteAction->setShortcut(QKeySequence::Paste);
+  runAction->setShortcut(Qt::Key_F5);
 
+  // toolbar
+  m_toolBar->setIconSize(QSize(20,20)); // smaller icons (make configurable in user settings?)
   m_toolBar->addAction (closeAction);
   m_toolBar->addAction (newAction);
   m_toolBar->addAction (openAction);
   m_toolBar->addAction (saveAction);
   m_toolBar->addAction (saveAsAction);
+  m_toolBar->addSeparator();
   m_toolBar->addAction (undoAction);
   m_toolBar->addAction (redoAction);
+  m_toolBar->addAction (copyAction);
+  m_toolBar->addAction (cutAction);
+  m_toolBar->addAction (pasteAction);
+  m_toolBar->addSeparator();
+  m_toolBar->addAction (runAction);
+
+  // menu bar
+  QMenu *fileMenu = new QMenu(tr("&File"),m_menuBar);
+  fileMenu->addAction(newAction);
+  fileMenu->addAction(openAction);
+  fileMenu->addAction(saveAction);
+  fileMenu->addAction(saveAsAction);
+  fileMenu->addSeparator();
+  fileMenu->addAction (closeAction);
+  m_menuBar->addMenu(fileMenu);
+  QMenu *editMenu = new QMenu(tr("&Edit"),m_menuBar);
+  editMenu->addAction(undoAction);
+  editMenu->addAction(redoAction);
+  fileMenu->addSeparator();
+  editMenu->addAction(copyAction);
+  editMenu->addAction(cutAction);
+  editMenu->addAction(pasteAction);
+  m_menuBar->addMenu(editMenu);
+  QMenu *runMenu = new QMenu(tr("&Run"),m_menuBar);
+  runMenu->addAction(runAction);
+  m_menuBar->addMenu(runMenu);
 
   QVBoxLayout *layout = new QVBoxLayout ();
+  layout->addWidget (m_menuBar);
   layout->addWidget (m_toolBar);
   layout->addWidget (m_editor);
   layout->addWidget (m_statusBar);
   layout->setMargin (2);
   widget ()->setLayout (layout);
 
   connect (closeAction, SIGNAL (triggered()), this, SLOT (close()));
   connect (newAction, SIGNAL (triggered ()), this, SLOT (newFile ()));
   connect (openAction, SIGNAL (triggered ()), this, SLOT (openFile ()));
   connect (undoAction, SIGNAL (triggered ()), m_editor, SLOT (undo ()));
   connect (redoAction, SIGNAL (triggered ()), m_editor, SLOT (redo ()));
+  connect (copyAction, SIGNAL (triggered ()), m_editor, SLOT (copy ()));
+  connect (cutAction, SIGNAL (triggered ()), m_editor, SLOT (cut ()));
+  connect (pasteAction, SIGNAL (triggered ()), m_editor, SLOT (paste ()));
   connect (saveAction, SIGNAL (triggered ()), this, SLOT (saveFile ()));
   connect (saveAsAction, SIGNAL (triggered ()), this, SLOT (saveFileAs ()));
+  connect (runAction, SIGNAL (triggered ()), this, SLOT (runFile ()));
 
   // TODO: Do we still need tool tips in the status bar? Tool tips are now
   //       shown directly at the theme icons
   connect (newAction, SIGNAL (hovered ()), this, SLOT (showToolTipNew ()));
   connect (openAction, SIGNAL (hovered ()), this, SLOT (showToolTipOpen ()));
   connect (undoAction, SIGNAL (hovered ()), this, SLOT (showToolTipUndo ()));
   connect (redoAction, SIGNAL (hovered ()), this, SLOT (showToolTipRedo ()));
   connect (saveAction, SIGNAL (hovered ()), this, SLOT (showToolTipSave ()));
diff --git a/gui/src/FileEditorMdiSubWindow.h b/gui/src/FileEditorMdiSubWindow.h
--- a/gui/src/FileEditorMdiSubWindow.h
+++ b/gui/src/FileEditorMdiSubWindow.h
@@ -14,35 +14,37 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef FILEEDITORMDISUBWINDOW_H
 #define FILEEDITORMDISUBWINDOW_H
 
+#include "OctaveTerminal.h"
 #include <QMdiSubWindow>
 #include <QToolBar>
+#include <QMenuBar>
 #include <QStatusBar>
 #include <QCloseEvent>
 #include <Qsci/qsciscintilla.h>
 // Not available in the Debian repos yet!
 // #include <Qsci/qscilexeroctave.h>
 #include "lexer/lexeroctavegui.h"
 
 const char UNNAMED_FILE[]     = "<unnamed>";
 const char SAVE_FILE_FILTER[] = "Octave Files  *.m(*.m);;All Files   *.*(*.*)";
 
 class FileEditorMdiSubWindow:public QMdiSubWindow
 {
 Q_OBJECT public:
   FileEditorMdiSubWindow (QWidget * parent = 0);
   ~FileEditorMdiSubWindow ();
   void loadFile (QString fileName);
-  void setEditorLexer (LexerOctaveGui *lexer);
+  void initEditor (OctaveTerminal *terminal, LexerOctaveGui *lexer);
 
 public slots:
 
   void newFile ();
   void openFile ();
   void saveFile ();
   void saveFile (QString fileName);
   void saveFileAs ();
@@ -56,20 +58,23 @@ public slots:
   void registerModified (bool modified);
 
 protected:
   void closeEvent(QCloseEvent *event);
 
 private:
   int checkFileModified (QString msg);
   void construct ();
+  QMenuBar *m_menuBar;
   QToolBar *m_toolBar;
   QsciScintilla *m_editor;
   QStatusBar *m_statusBar;
   QString m_fileName;
+  OctaveTerminal* m_octave;
   bool m_modified;
 
 private slots:
   void handleModificationChanged(bool modified);
+  void runFile();
 
 };
 
 #endif // FILEEDITORMDISUBWINDOW_H
diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -90,17 +90,17 @@ MainWindow::openEditorFile (QString file
        keywordList = keyword.split(QRegExp("\\s+"));  // split into single strings
        int i;
        for ( i=0; i<keywordList.size(); i++ )
          {
            m_lexerAPI->add(keywordList.at(i));  // add single strings to the API
          }
        m_lexerAPI->prepare();           // prepare API info ... this make take some time
     }
-  subWindow->setEditorLexer(m_lexer);   // set the already prepared lexer
+  subWindow->initEditor(m_octaveTerminal,m_lexer);   // init necessary informations for editor
 
   if ( fileName.isEmpty() )
     subWindow->newFile ();
   else
     subWindow->loadFile (fileName);
 }
 
 
diff --git a/gui/src/MainWindow.h b/gui/src/MainWindow.h
--- a/gui/src/MainWindow.h
+++ b/gui/src/MainWindow.h
@@ -110,11 +110,12 @@ private:
   FilesDockWidget *m_filesDockWidget;
 
   // Editor's lexer
   LexerOctaveGui *m_lexer;
   QsciAPIs *m_lexerAPI;
 
   // Toolbars.
   QStatusBar *m_statusBar;
+
 };
 
 #endif // MAINWINDOW_H
