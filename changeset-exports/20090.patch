# HG changeset patch
# User Rik <rik@octave.org>
# Date 1429319811 25200
#      Fri Apr 17 18:16:51 2015 -0700
# Node ID c6c5cb9c4743aab582a628cc1d169f2562774d26
# Parent  93b3757a9623003761d551f28556d7722a3eb12d
Right-click should zoom out by 2 for Qt toolkit (bug #44304).

* Canvas.h: New private property bool m_clickMode.
* Canvas.h (Canvas): Set m_clickMode to false in constructor.

* Canvas.cc (canvasMousePressEvent): decode button click and set m_clickMode
appropriately for ZoomIn or ZoomOut.
* Canvas.cc (canvasMouseReleaseEvent): set scale factor for zoom (2.0 / 0.5)
based on m_clickMode.

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -627,20 +627,28 @@ Canvas::canvasMousePressEvent (QMouseEve
               else if (event->modifiers () == Qt::NoModifier)
                 {
                   switch (event->buttons ())
                     {
                     case Qt::LeftButton:
                       m_mouseAnchor = m_mouseCurrent = event->pos ();
                       m_mouseAxes = axesObj.get_handle ();
                       m_mouseMode = newMouseMode;
+                      m_clickMode = newMouseMode == ZoomInMode;
                       break;
 
                     case Qt::RightButton:
-                      Utils::properties<axes> (axesObj).unzoom ();
+                      if (newMouseMode == ZoomInMode)
+                        {
+                          m_mouseAnchor = m_mouseCurrent = event->pos ();
+                          m_mouseAxes = axesObj.get_handle ();
+                          m_mouseMode = newMouseMode;
+                          m_clickMode = false;
+                        }
+
                       break;
 
                     case Qt::MidButton:
                         {
                           axes::properties& ap =
                             Utils::properties<axes> (axesObj);
 
                           autoscale_axes (ap);
@@ -652,17 +660,23 @@ Canvas::canvasMousePressEvent (QMouseEve
                       break;
                     }
                 }
               else if (event->modifiers () == Qt::ShiftModifier)
                 {
                   switch (event->buttons ())
                     {
                     case Qt::LeftButton:
-                      Utils::properties<axes> (axesObj).unzoom ();
+                      if (newMouseMode == ZoomInMode)
+                        {
+                          m_mouseAnchor = m_mouseCurrent = event->pos ();
+                          m_mouseAxes = axesObj.get_handle ();
+                          m_mouseMode = newMouseMode;
+                          m_clickMode = false;
+                        }
                       break;
 
                     default:
                       redraw_figure = false;
                       break;
                     }
                 }
 
@@ -694,17 +708,17 @@ Canvas::canvasMouseReleaseEvent (QMouseE
           graphics_object obj = gh_manager::get_object (m_handle);
 
           graphics_object figObj (obj.get_ancestor ("figure"));
 
           std::string zm = zoom_mode (figObj);
 
           if (m_mouseAnchor == event->pos ())
             {
-              double factor = m_mouseMode == ZoomInMode ? 2.0 : 0.5;
+              double factor = m_clickMode ? 2.0 : 0.5;
 
               ColumnVector p1 = ap.pixel2coord (event->x (), event->y ());
 
               ap.zoom_about_point (zm, p1(0), p1(1), factor);
             }
           else if (m_mouseMode == ZoomInMode)
             {
               ColumnVector p0 = ap.pixel2coord (m_mouseAnchor.x (),
diff --git a/libgui/graphics/Canvas.h b/libgui/graphics/Canvas.h
--- a/libgui/graphics/Canvas.h
+++ b/libgui/graphics/Canvas.h
@@ -78,16 +78,17 @@ protected:
   virtual graphics_object selectFromAxes (const graphics_object& ax,
                                           const QPoint& pt) = 0;
 
 protected:
   Canvas (const graphics_handle& handle)
     : m_handle (handle),
       m_redrawBlocked (false),
       m_mouseMode (NoMode),
+      m_clickMode (false),
       m_eventMask (0)
     { }
 
   void canvasToggleAxes (const graphics_handle& handle);
   void canvasToggleGrid (const graphics_handle& handle);
   void canvasAutoAxes (const graphics_handle& handle);
   void canvasPaintEvent (void);
   void canvasMouseDoubleClickEvent (QMouseEvent* event);
@@ -102,16 +103,17 @@ protected:
                            const graphics_object& obj, QMouseEvent *event);
 
   void annotation_callback (const octave_value_list& args);
 
 private:
   graphics_handle m_handle;
   bool m_redrawBlocked;
   MouseMode m_mouseMode;
+  bool m_clickMode;              // True: ZoomIn, False: ZoomOut
   QPoint m_mouseAnchor;
   QPoint m_mouseCurrent;
   graphics_handle m_mouseAxes;
   int m_eventMask;
 };
 
 }; // namespace QtHandles
 
