# HG changeset patch
# User jwe
# Date 1109741748 0
#      Wed Mar 02 05:35:48 2005 +0000
# Node ID 4515ad040dc7409cf3fdff867c25b796e6723324
# Parent  1278a2bc1527ebe1026fad61e819dd6e1a9b5de8
[project @ 2005-03-02 05:35:48 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2005-03-02  John W. Eaton  <jwe@octave.org>
+
+	* configure.in (OCTAVE_LOCAL_BUFFER): Use < T > instead of <T>.
+	From Clinton Chee <chee@parallel.hpc.unsw.edu.au>.
+
 2005-03-01  John W. Eaton  <jwe@octave.org>
 
 	* configure.in (AC_CONFIG_FILES): Remove libcruft/odessa/Makefile
 	from the list.
 
 2005-03-01  Todd Neal  <tolchz@gmail.com>
 
 	* examples/make_int.cc: DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA now
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.462 $)
+AC_REVISION($Revision: 1.463 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
 OCTAVE_HOST_TYPE
 
@@ -1400,23 +1400,33 @@ typedef int sig_atomic_t;
 
 /* Always use vector<T>, since we sometimes allocate large chunks
    of memory and that can cause trouble due to stack size limits.
 
    Note that using auto_ptr is not appropriate because it uses delete,
    not delete[] and we need the latter to properly handle arrays
    allocated with new[size].
 
+   Use < T > instead of <T> to avoid problems if T is a template type
+   (say, foo<int>) and the preprocessor fails to insert a space and
+   generates <foo<int>>.
+
 #if defined (HAVE_DYNAMIC_AUTO_ARRAYS)
+
 #define OCTAVE_LOCAL_BUFFER(T, buf, size) \
   T buf[size]
-#else */
+
+#else
+
+*/
+
 #define OCTAVE_LOCAL_BUFFER(T, buf, size) \
-  std::vector<T> buf ## _vector (size); \
+  std::vector< T > buf ## _vector (size); \
   T *buf = &(buf ## _vector[0])
+
 /* #endif */
 
 #if defined (__DECCXX)
 #define __USE_STD_IOSTREAM
 #endif
 
 #if defined (_UNICOS)
 #define F77_USES_CRAY_CALLING_CONVENTION
