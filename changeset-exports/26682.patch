# HG changeset patch
# User Rik <rik@octave.org>
# Date 1549310767 28800
#      Mon Feb 04 12:06:07 2019 -0800
# Node ID 0780d3f4ecad5db5f914a165a3db35ec8b3813e9
# Parent  df203b20cfc6d6376e4478de995024ed67e9c587
Implement "none" as a color for axes and text objects (bug #52842).

* gl-render.cc (opengl_renderer::draw_axes_boxes): Check "xcolor", "ycolor",
and "zcolor" properties for special value of '[]' which means "none".  Don't
draw boxes if "color" is empty.
* gl-render.cc (opengl_renderer::draw_axes_[xyz]_grid): Check "color" property
for "none" and determine possible fallback colors for "gridcolor" and
"minorgridcolor".  Don't draw grids, axes, ticks, or ticklabels if final
color value is "none".
* gl-render.cc (opengl_renderer::draw_text): Don't draw text if "color" is
"none".
* gl-render.cc (opengl_renderer::set_color): Don't update
txt_renderer.set_color if "color" is "none".

* graphics.cc (text::properties::update_font): Don't update
txt_renderer.set_color if "color" is "none".

* graphics.in.h (axes): Add 'm' to "gridcolor" property so that changing the
color automatically flips "gridcolormode" to "manual".
* graphics.in.h (axes): Change "xcolor", "ycolor", "zcolor" properties to be a
color_property object with a possible radio_value of "none".
* graphics.in.h (text): Change "color" property to be a color_property object
with a possible radio_value of "none".
* graphics.in.h (text::update_color): Change updater function to verify color
is not "none" before proceeding.

diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -705,17 +705,16 @@ namespace octave
 
 #endif
   }
 
   void
   opengl_renderer::draw_figure (const figure::properties& props)
   {
     // Initialize OpenGL context
-
     init_gl_context (props.is_graphicssmoothing (), props.get_color_rgb ());
 
 #if defined (HAVE_OPENGL)
 
     props.set___gl_extensions__ (get_string (GL_EXTENSIONS));
     props.set___gl_renderer__ (get_string (GL_RENDERER));
     props.set___gl_vendor__ (get_string (GL_VENDOR));
     props.set___gl_version__ (get_string (GL_VERSION));
@@ -1344,69 +1343,81 @@ namespace octave
     set_linestyle ("-", true, linewidth);
 
     m_glfcns.glBegin (GL_LINES);
 
     if (layer2Dtop)
       std::swap (zpTick, zpTickN);
 
     // X box
-    set_color (props.get_xcolor_rgb ());
-
-    if (! isXOrigin || props.is_box() || ! is2D)
-      {
-        m_glfcns.glVertex3d (xPlaneN, ypTick, zpTick);
-        m_glfcns.glVertex3d (xPlane, ypTick, zpTick);
-      }
-
-    if (props.is_box ())
+    Matrix color = props.get_xcolor_rgb ();
+
+    if (! color.isempty ())
       {
-        m_glfcns.glVertex3d (xPlaneN, ypTickN, zpTick);
-        m_glfcns.glVertex3d (xPlane, ypTickN, zpTick);
-        if (! is2D)
+        set_color (color);
+
+        if (! isXOrigin || props.is_box() || ! is2D)
+          {
+            m_glfcns.glVertex3d (xPlaneN, ypTick, zpTick);
+            m_glfcns.glVertex3d (xPlane, ypTick, zpTick);
+          }
+
+        if (props.is_box ())
           {
-            m_glfcns.glVertex3d (xPlaneN, ypTickN, zpTickN);
-            m_glfcns.glVertex3d (xPlane, ypTickN, zpTickN);
-            if (boxFull)
+            m_glfcns.glVertex3d (xPlaneN, ypTickN, zpTick);
+            m_glfcns.glVertex3d (xPlane, ypTickN, zpTick);
+            if (! is2D)
               {
-                m_glfcns.glVertex3d (xPlaneN, ypTick, zpTickN);
-                m_glfcns.glVertex3d (xPlane, ypTick, zpTickN);
+                m_glfcns.glVertex3d (xPlaneN, ypTickN, zpTickN);
+                m_glfcns.glVertex3d (xPlane, ypTickN, zpTickN);
+                if (boxFull)
+                  {
+                    m_glfcns.glVertex3d (xPlaneN, ypTick, zpTickN);
+                    m_glfcns.glVertex3d (xPlane, ypTick, zpTickN);
+                  }
               }
           }
       }
 
     // Y box
-    set_color (props.get_ycolor_rgb ());
-    if (! isYOrigin || props.is_box() || ! is2D)
-      {
-        m_glfcns.glVertex3d (xpTick, yPlaneN, zpTick);
-        m_glfcns.glVertex3d (xpTick, yPlane, zpTick);
-      }
-
-    if (props.is_box () && ! plotyy)
+    color = props.get_ycolor_rgb ();
+
+    if (! color.isempty ())
       {
-        m_glfcns.glVertex3d (xpTickN, yPlaneN, zpTick);
-        m_glfcns.glVertex3d (xpTickN, yPlane, zpTick);
-
-        if (! is2D)
+        set_color (color);
+        if (! isYOrigin || props.is_box() || ! is2D)
+          {
+            m_glfcns.glVertex3d (xpTick, yPlaneN, zpTick);
+            m_glfcns.glVertex3d (xpTick, yPlane, zpTick);
+          }
+
+        if (props.is_box () && ! plotyy)
           {
-            m_glfcns.glVertex3d (xpTickN, yPlaneN, zpTickN);
-            m_glfcns.glVertex3d (xpTickN, yPlane, zpTickN);
-            if (boxFull)
+            m_glfcns.glVertex3d (xpTickN, yPlaneN, zpTick);
+            m_glfcns.glVertex3d (xpTickN, yPlane, zpTick);
+
+            if (! is2D)
               {
-                m_glfcns.glVertex3d (xpTick, yPlaneN, zpTickN);
-                m_glfcns.glVertex3d (xpTick, yPlane, zpTickN);
+                m_glfcns.glVertex3d (xpTickN, yPlaneN, zpTickN);
+                m_glfcns.glVertex3d (xpTickN, yPlane, zpTickN);
+                if (boxFull)
+                  {
+                    m_glfcns.glVertex3d (xpTick, yPlaneN, zpTickN);
+                    m_glfcns.glVertex3d (xpTick, yPlane, zpTickN);
+                  }
               }
           }
       }
 
     // Z box
-    if (! is2D)
+    color = props.get_zcolor_rgb ();
+
+    if (! color.isempty () && ! is2D)
       {
-        set_color (props.get_zcolor_rgb ());
+        set_color (color);
 
         if (xySym)
           {
             m_glfcns.glVertex3d (xPlaneN, yPlane, zPlaneN);
             m_glfcns.glVertex3d (xPlaneN, yPlane, zPlane);
           }
         else
           {
@@ -1508,24 +1519,30 @@ namespace octave
                               && ! xticks.isempty ());
         bool is_origin = props.xaxislocation_is ("origin") && props.get_is2D ()
                          && ! props.yscale_is ("log");
         bool is_origin_low = is_origin && (y_min + y_max) < 0;
         bool mirror = props.is_box () && xstate != AXE_ANY_DIR;
 
         // X grid
 
-        if (props.xcolormode_is ("manual"))
-          {
-            // use axis color for (minor)gridcolor
-            if (props.gridcolormode_is ("auto"))
-              gridcolor = props.get_xcolor_rgb ();
-            if (props.minorgridcolormode_is ("auto"))
-              minorgridcolor = props.get_xcolor_rgb ();
-          }
+        // possibly use axis color for gridcolor & minorgridcolor
+        if (props.gridcolormode_is ("auto"))
+          if (props.xcolormode_is ("manual") && ! props.xcolor_is ("none"))
+            gridcolor = props.get_xcolor_rgb ();
+
+        if (props.minorgridcolormode_is ("auto"))
+          if (props.xcolormode_is ("manual") && ! props.xcolor_is ("none"))
+            minorgridcolor = props.get_xcolor_rgb ();
+
+        if (gridcolor.isempty ())
+          do_xgrid = false;
+
+        if (minorgridcolor.isempty ())
+          do_xminorgrid = false;
 
         // set styles when drawing only minor grid
         if (do_xminorgrid && ! do_xgrid)
           {
             gridstyle = minorgridstyle;
             gridcolor = minorgridcolor;
             gridalpha = minorgridalpha;
             do_xgrid = true;
@@ -1542,16 +1559,20 @@ namespace octave
         // grid lines
         if (do_xgrid)
           render_grid (linewidth,
                        gridstyle, gridcolor, gridalpha,
                        xticks, x_min, x_max,
                        yPlane, yPlaneN, layer2Dtop ? zPlaneN : zPlane, zPlaneN,
                        0, (zstate != AXE_DEPTH_DIR));
 
+        // Skip drawing axis, ticks, and ticklabels when color is "none"
+        if (props.xcolor_is ("none"))
+          return;
+
         set_color (props.get_xcolor_rgb ());
 
         // axis line
         double y_axis_pos = 0.;
         if (is_origin)
           {
             y_axis_pos = math::max (math::min (0., y_max), y_min);
             m_glfcns.glBegin (GL_LINES);
@@ -1693,24 +1714,30 @@ namespace octave
         bool is_origin = props.yaxislocation_is ("origin") && props.get_is2D ()
                          && ! props.xscale_is ("log");
         bool is_origin_low = is_origin && (x_min + x_max) < 0;
         bool mirror = props.is_box () && ystate != AXE_ANY_DIR
                       && (! props.has_property ("__plotyy_axes__"));
 
         // Y grid
 
-        if (props.ycolormode_is ("manual"))
-          {
-            // use axis color for (minor)gridcolor
-            if (props.gridcolormode_is ("auto"))
-              gridcolor = props.get_ycolor_rgb ();
-            if (props.minorgridcolormode_is ("auto"))
-              minorgridcolor = props.get_ycolor_rgb ();
-          }
+        // possibly use axis color for gridcolor & minorgridcolor
+        if (props.gridcolormode_is ("auto"))
+          if (props.ycolormode_is ("manual") && ! props.ycolor_is ("none"))
+            gridcolor = props.get_ycolor_rgb ();
+
+        if (props.minorgridcolormode_is ("auto"))
+          if (props.ycolormode_is ("manual") && ! props.ycolor_is ("none"))
+            minorgridcolor = props.get_ycolor_rgb ();
+
+        if (gridcolor.isempty ())
+          do_ygrid = false;
+
+        if (minorgridcolor.isempty ())
+          do_yminorgrid = false;
 
         // set styles when drawing only minor grid
         if (do_yminorgrid && ! do_ygrid)
           {
             gridstyle = minorgridstyle;
             gridcolor = minorgridcolor;
             gridalpha = minorgridalpha;
             do_ygrid = true;
@@ -1727,16 +1754,20 @@ namespace octave
         // grid lines
         if (do_ygrid)
           render_grid (linewidth,
                        gridstyle, gridcolor, gridalpha,
                        yticks, y_min, y_max,
                        xPlane, xPlaneN, layer2Dtop ? zPlaneN : zPlane, zPlaneN,
                        1, (zstate != AXE_DEPTH_DIR));
 
+        // Skip drawing axis, ticks, and ticklabels when color is "none"
+        if (props.ycolor_is ("none"))
+          return;
+
         set_color (props.get_ycolor_rgb ());
 
         // axis line
         double x_axis_pos = 0.;
         if (is_origin)
           {
             x_axis_pos = math::max (math::min (0., x_max), x_min);
             m_glfcns.glBegin (GL_LINES);
@@ -1862,24 +1893,30 @@ namespace octave
         bool do_zgrid = (props.is_zgrid () && (gridstyle != "none"));
         bool do_zminorgrid = (props.is_zminorgrid ()
                               && (minorgridstyle != "none")
                               && ! zticks.isempty ());
         bool mirror = props.is_box () && zstate != AXE_ANY_DIR;
 
         // Z grid
 
-        if (props.zcolormode_is ("manual"))
-          {
-            // use axis color for (minor)gridcolor
-            if (props.gridcolormode_is ("auto"))
-              gridcolor = props.get_zcolor_rgb ();
-            if (props.minorgridcolormode_is ("auto"))
-              minorgridcolor = props.get_zcolor_rgb ();
-          }
+        // possibly use axis color for gridcolor & minorgridcolor
+        if (props.gridcolormode_is ("auto"))
+          if (props.zcolormode_is ("manual") && ! props.zcolor_is ("none"))
+            gridcolor = props.get_zcolor_rgb ();
+
+        if (props.minorgridcolormode_is ("auto"))
+          if (props.zcolormode_is ("manual") && ! props.zcolor_is ("none"))
+            minorgridcolor = props.get_zcolor_rgb ();
+
+        if (gridcolor.isempty ())
+          do_zgrid = false;
+
+        if (minorgridcolor.isempty ())
+          do_zminorgrid = false;
 
         // set styles when drawing only minor grid
         if (do_zminorgrid && ! do_zgrid)
           {
             gridstyle = minorgridstyle;
             gridcolor = minorgridcolor;
             gridalpha = minorgridalpha;
             do_zgrid = true;
@@ -1894,16 +1931,20 @@ namespace octave
 
         // grid lines
         if (do_zgrid)
           render_grid (linewidth,
                        gridstyle, gridcolor, gridalpha,
                        zticks, z_min, z_max,
                        xPlane, xPlaneN, yPlane, yPlaneN, 2, true);
 
+        // Skip drawing axis, ticks, and ticklabels when color is "none"
+        if (props.zcolor_is ("none"))
+          return;
+
         set_color (props.get_zcolor_rgb ());
 
         // minor tick marks
         if (do_zminortick)
           {
             if (xySym)
               {
                 if (math::isinf (fy))
@@ -3632,17 +3673,17 @@ namespace octave
     draw (props.get_children ());
   }
 
   void
   opengl_renderer::draw_text (const text::properties& props)
   {
 #if defined (HAVE_OPENGL)
 
-    if (props.get_string ().isempty ())
+    if (props.get_string ().isempty () || props.color_is ("none"))
       return;
 
     Matrix pos = xform.scale (props.get_data_position ());
 
     // Handle clipping manually when drawing text background
     if (! props.is_clipping ()
         || (clip_code (pos(0), pos(1), pos.numel () > 2 ? pos(2) : 0.0) == 0x40))
       {
@@ -4168,17 +4209,18 @@ namespace octave
 
   void
   opengl_renderer::set_color (const Matrix& c)
   {
 #if defined (HAVE_OPENGL)
 
     m_glfcns.glColor3dv (c.data ());
 
-    txt_renderer.set_color (c);
+    if (! c.isempty ())
+      txt_renderer.set_color (c);
 
 #else
 
     octave_unused_parameter (c);
 
     // This shouldn't happen because construction of opengl_renderer
     // objects is supposed to be impossible if OpenGL is not available.
 
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -9160,17 +9160,20 @@ text::properties::update_font (void)
   double dpr = device_pixel_ratio (get___myhandle__ ());
 
   gh_manager::auto_lock guard;
   txt_renderer.set_font (get ("fontname").string_value (),
                          get ("fontweight").string_value (),
                          get ("fontangle").string_value (),
                          get ("__fontsize_points__").double_value () * dpr);
 
-  txt_renderer.set_color (get_color_rgb ());
+  Matrix c = get_color_rgb ();
+  if (! c.isempty ())
+    txt_renderer.set_color (c);
+
 }
 
 void
 text::properties::update_text_extent (void)
 {
   int halign = 0;
   int valign = 0;
 
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -3630,17 +3630,17 @@ public:
       radio_property fontangle u , "{normal}|italic"
       string_property fontname u , OCTAVE_DEFAULT_FONTNAME
       double_property fontsize u , 10
       radio_property fontunits SU , "{points}|inches|centimeters|normalized|pixels"
       bool_property fontsmoothing , "on"
       radio_property fontweight u , "{normal}|bold"
       double_property gridalpha m , 0.15
       radio_property gridalphamode , "{auto}|manual"
-      color_property gridcolor , color_property (color_values (0.15, 0.15, 0.15), radio_values ("none"))
+      color_property gridcolor m , color_property (color_values (0.15, 0.15, 0.15), radio_values ("none"))
       radio_property gridcolormode , "{auto}|manual"
       radio_property gridlinestyle , "{-}|--|:|-.|none"
       double_property labelfontsizemultiplier u , 1.1
       radio_property layer u , "{bottom}|top"
       // FIXME: should be kind of string array.
       any_property linestyleorder S , "-"
       double_property linestyleorderindex , 1.0
       double_property linewidth , 0.5
@@ -3664,49 +3664,49 @@ public:
       array_property tightinset r , Matrix (1, 4, 0.0)
       handle_property title SOf , gh_manager::make_graphics_handle ("text", __myhandle__, false, false, false)
       double_property titlefontsizemultiplier u , 1.1
       radio_property titlefontweight u , "{bold}|normal"
       // FIXME: uicontextmenu should be moved here.
       radio_property units SU , "{normalized}|inches|centimeters|points|pixels|characters"
       array_property view u , default_axes_view ()
       radio_property xaxislocation u , "{bottom}|top|origin"
-      color_property xcolor mu , color_values (0.15, 0.15, 0.15)
+      color_property xcolor mu , color_property (color_values (0.15, 0.15, 0.15), radio_values ("none"))
       radio_property xcolormode , "{auto}|manual"
       radio_property xdir u , "{normal}|reverse"
       bool_property xgrid , "off"
       handle_property xlabel SOf , gh_manager::make_graphics_handle ("text", __myhandle__, false, false, false)
       row_vector_property xlim mu , default_lim ()
       radio_property xlimmode al , "{auto}|manual"
       bool_property xminorgrid , "off"
       bool_property xminortick , "off"
       radio_property xscale alu , "{linear}|log"
       row_vector_property xtick mu , default_axes_tick ()
       // FIXME: should be kind of string array.
       any_property xticklabel S , ""
       radio_property xticklabelmode u , "{auto}|manual"
       double_property xticklabelrotation , 0.0
       radio_property xtickmode u , "{auto}|manual"
       radio_property yaxislocation u , "{left}|right|origin"
-      color_property ycolor mu , color_values (0.15, 0.15, 0.15)
+      color_property ycolor mu , color_property (color_values (0.15, 0.15, 0.15), radio_values ("none"))
       radio_property ycolormode , "{auto}|manual"
       radio_property ydir u , "{normal}|reverse"
       bool_property ygrid , "off"
       handle_property ylabel SOf , gh_manager::make_graphics_handle ("text", __myhandle__, false, false, false)
       row_vector_property ylim mu , default_lim ()
       radio_property ylimmode al , "{auto}|manual"
       bool_property yminorgrid , "off"
       bool_property yminortick , "off"
       radio_property yscale alu , "{linear}|log"
       row_vector_property ytick mu , default_axes_tick ()
       any_property yticklabel S , ""
       radio_property yticklabelmode u , "{auto}|manual"
       double_property yticklabelrotation , 0.0
       radio_property ytickmode u , "{auto}|manual"
-      color_property zcolor mu , color_values (0.15, 0.15, 0.15)
+      color_property zcolor mu , color_property (color_values (0.15, 0.15, 0.15), radio_values ("none"))
       radio_property zcolormode , "{auto}|manual"
       radio_property zdir u , "{normal}|reverse"
       bool_property zgrid , "off"
       handle_property zlabel SOf , gh_manager::make_graphics_handle ("text", __myhandle__, false, false, false)
       row_vector_property zlim mu , default_lim ()
       radio_property zlimmode al , "{auto}|manual"
       bool_property zminorgrid , "off"
       bool_property zminortick , "off"
@@ -4338,17 +4338,17 @@ public:
     }
 
     // See the genprops.awk script for an explanation of the
     // properties declarations.
     // Programming note: Keep property list sorted if new ones are added.
 
     BEGIN_PROPERTIES (text)
       color_property backgroundcolor , color_property (radio_values ("{none}"), color_values (1, 1, 1))
-      color_property color u , color_values (0, 0, 0)
+      color_property color u , color_property (color_values (0, 0, 0), radio_values ("none"))
       color_property edgecolor , color_property (radio_values ("{none}"), color_values (0, 0, 0))
       bool_property editing , "off"
       array_property extent rG , Matrix (1, 4, 0.0)
       // FIXME: DEPRECATED: Remove "oblique" in version 7.
       radio_property fontangle u , "{normal}|italic|oblique"
       string_property fontname u , OCTAVE_DEFAULT_FONTNAME
       double_property fontsize u , 10
       radio_property fontunits SU , "inches|centimeters|normalized|{points}|pixels"
@@ -4428,19 +4428,28 @@ public:
     void request_autopos (void);
     void update_positionmode (void) { request_autopos (); }
     void update_rotationmode (void) { request_autopos (); }
     void update_horizontalalignmentmode (void) { request_autopos (); }
     void update_verticalalignmentmode (void) { request_autopos (); }
 
     void update_string (void) { request_autopos (); update_text_extent (); }
     void update_rotation (void) { update_text_extent (); }
-    void update_color (void) { update_font (); update_text_extent (); }
     void update_fontname (void) { update_font (); update_text_extent (); }
     void update_fontsize (void) { update_font (); update_text_extent (); }
+
+    void update_color (void)
+    {
+      if (! color.is ("none"))
+        {
+          update_font ();
+          update_text_extent ();
+        }
+    }
+
     void update_fontangle (void)
     {
       update_font ();
       update_text_extent ();
       // FIXME: DEPRECATED: Remove warning for "oblique" in version 7.
       if (fontangle.is ("oblique"))
         warning_with_id ("Octave:deprecated-property",
                          "Setting 'fontangle' to '%s' is deprecated, \
