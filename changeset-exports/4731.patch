# HG changeset patch
# User jwe
# Date 1075753635 0
#      Mon Feb 02 20:27:15 2004 +0000
# Node ID 176fcf62c46499b6d23d9d22173700f1f0a4b410
# Parent  c88afb778c4102096e1958167089762f082ffc75
[project @ 2004-02-02 20:27:15 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2004-02-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* error.cc (verror): New arg, save_last_error.  Change all callers.
+	(usage): Set error_state after calling verror.
+
 	* oct-map.cc (Octave_map::assign (const std::string, const Cell&)):
 	Set dimensions to RHS dimensions, not 1x1.
 
 2004-01-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-bool.cc, ov-cx-mat.cc, ov-re-mat.cc, ov-str-mat.cc:
 	Include <vector>.
 	* file-io.cc, ls-hdf5.cc, ls-mat4.cc, ls-mat5.cc, ls-oct-binary.cc:
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -149,17 +149,17 @@ vwarning (const char *name, const char *
     }
 
   octave_diary << msg_string;
 
   std::cerr << msg_string;
 }
 
 static void
-verror (const char *name, const char *fmt, va_list args)
+verror (bool save_last_error, const char *name, const char *fmt, va_list args)
 {
   if (discard_error_messages)
     return;
 
   if (! buffer_error_messages)
     flush_octave_stdout ();
 
   bool to_beep_or_not_to_beep_p = Vbeep_on_error && ! error_state;
@@ -179,17 +179,17 @@ verror (const char *name, const char *fm
   // XXX FIXME XXX -- we really want to capture the message before it
   // has all the formatting goop attached to it.  We probably also
   // want just the message, not the traceback information.
 
   std::string msg_string = OSSTREAM_STR (output_buf);
 
   OSSTREAM_FREEZE (output_buf);
 
-  if (! error_state && name && ! strcmp (name, "error"))
+  if (! error_state && save_last_error)
     {
       // This is the first error in a possible series.
       Vlast_error_message = msg_string;
     }
 
   if (buffer_error_messages)
     {
       std::string tmp = msg_string;
@@ -235,50 +235,50 @@ error_1 (const char *name, const char *f
 	    {
 	      int len = strlen (fmt);
 	      if (fmt[len - 1] == '\n')
 		{
 		  if (len > 1)
 		    {
 		      char *tmp_fmt = strsave (fmt);
 		      tmp_fmt[len - 1] = '\0';
-		      verror (name, tmp_fmt, args);
+		      verror (true, name, tmp_fmt, args);
 		      delete [] tmp_fmt;
 		    }
 
 		  error_state = -2;
 		}
 	      else
-		verror (name, fmt, args);
+		verror (true, name, fmt, args);
 	    }
 	}
       else
 	panic ("error_1: invalid format");
 
       if (! error_state)
 	error_state = 1;
     }
 }
 
 void
 message (const char *name, const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
-  verror (name, fmt, args);
+  verror (false, name, fmt, args);
   va_end (args);
 }
 
 void
 usage (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
+  verror (true, "usage", fmt, args);
   error_state = -1;
-  verror ("usage", fmt, args);
   va_end (args);
 }
 
 static void
 pr_where_2 (const char *fmt, va_list args)
 {
   if (fmt)
     {
@@ -286,22 +286,22 @@ pr_where_2 (const char *fmt, va_list arg
 	{
 	  int len = strlen (fmt);
 	  if (fmt[len - 1] == '\n')
 	    {
 	      if (len > 1)
 		{
 		  char *tmp_fmt = strsave (fmt);
 		  tmp_fmt[len - 1] = '\0';
-		  verror (0, tmp_fmt, args);
+		  verror (false, 0, tmp_fmt, args);
 		  delete [] tmp_fmt;
 		}
 	    }
 	  else
-	    verror (0, fmt, args);
+	    verror (false, 0, fmt, args);
 	}
     }
   else
     panic ("pr_where_2: invalid format");
 }
 
 static void
 pr_where_1 (const char *fmt, ...)
@@ -428,17 +428,17 @@ parse_error (const char *fmt, ...)
 
 void
 panic (const char *fmt, ...)
 {
   va_list args;
   va_start (args, fmt);
   buffer_error_messages = 0;
   discard_error_messages = false;
-  verror ("panic", fmt, args);
+  verror (false, "panic", fmt, args);
   va_end (args);
   abort ();
 }
 
 typedef void (*error_fun)(const char *, ...);
 
 extern octave_value_list Fsprintf (const octave_value_list&, int);
 
