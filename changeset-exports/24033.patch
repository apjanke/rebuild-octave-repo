# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1469541875 -7200
#      Tue Jul 26 16:04:35 2016 +0200
# Node ID 631076eab47be6f4fe095275377149d33f3fe3c7
# Parent  c2ef0eddf6bc29dfaf6bdf189bd88812a0629d37
Fix dimensions of mesh generated by meshgrid (bug #48523).

* meshgrid.m: Dimensions of output according to number of input
arguments. Add test.

diff --git a/scripts/plot/util/meshgrid.m b/scripts/plot/util/meshgrid.m
--- a/scripts/plot/util/meshgrid.m
+++ b/scripts/plot/util/meshgrid.m
@@ -24,17 +24,18 @@
 ## Given vectors of @var{x} and @var{y} coordinates, return matrices @var{xx}
 ## and @var{yy} corresponding to a full 2-D grid.
 ##
 ## The rows of @var{xx} are copies of @var{x}, and the columns of @var{yy} are
 ## copies of @var{y}.  If @var{y} is omitted, then it is assumed to be the same
 ## as @var{x}.
 ##
 ## If the optional @var{z} input is given, or @var{zz} is requested, then the
-## output will be a full 3-D grid.
+## output will be a full 3-D grid.  If @var{z} is omitted and @var{zz} is
+## requested, it is assumed to be the same as @var{y}.
 ##
 ## @code{meshgrid} is most frequently used to produce input for a 2-D or 3-D
 ## function that will be plotted.  The following example creates a surface
 ## plot of the ``sombrero'' function.
 ##
 ## @example
 ## @group
 ## f = @@(x,y) sin (sqrt (x.^2 + y.^2)) ./ sqrt (x.^2 + y.^2);
@@ -66,17 +67,17 @@ function [xx, yy, zz] = meshgrid (x, y, 
   endif
 
   if (nargin < 2)
     y = x;
   endif
 
   ## Use repmat to ensure that result values have the same type as the inputs
 
-  if (nargout < 3)
+  if (nargout < 3 && nargin < 3)
     if (! (isvector (x) && isvector (y)))
       error ("meshgrid: X and Y must be vectors");
     endif
     xx = repmat (x(:).', length (y), 1);
     yy = repmat (y(:), 1, length (x));
   else
     if (nargin < 3)
       z = y;
@@ -121,14 +122,25 @@ endfunction
 %! [XX1, YY1] = meshgrid (x, x);
 %! [XX2, YY2] = meshgrid (x);
 %! assert (size_equal (XX1, XX2, YY1, YY2));
 %! assert (ndims (XX1), 2);
 %! assert (size (XX1), [3, 3]);
 %! assert (XX1, XX2);
 %! assert (YY1, YY2);
 
+%!test
+%! x = 1:2;
+%! y = 1:3;
+%! z = 1:4;
+%! [XX, YY] = meshgrid (x, y, z);
+%! assert (size_equal (XX, YY));
+%! assert (ndims (XX), 3);
+%! assert (size (XX), [3, 2, 4]);
+%! assert (XX(1) * YY(1), x(1) * y(1));
+%! assert (XX(end) * YY(end), x(end) * y(end));
+
 ## Test input validation
 %!error meshgrid ()
 %!error meshgrid (1,2,3,4)
 %!error <X and Y must be vectors> meshgrid (ones (2,2), 1:3)
 %!error <X and Y must be vectors> meshgrid (1:3, ones (2,2))
 %!error <X, Y, and Z must be vectors> [X,Y,Z] = meshgrid (1:3, 1:3, ones (2,2))
