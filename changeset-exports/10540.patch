# HG changeset patch
# User Rik <code@nomad.inbox5.com>
# Date 1271970227 25200
#      Thu Apr 22 14:03:47 2010 -0700
# Node ID 952d4df5b68673a624fd44dc573aaf3d424a63bf
# Parent  8db807a0eb784fba656c946e95ae8f0b3b34aebe
Eliminate NaN*ones and Inf*ones constructs and just use Nan() and Inf()

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2010-04-22  Rik <octave@nomad.inbox5.com>
+
+	* general/rat.m, sparse/gplot.m, strings/base2dec.m, geometry/triplot.m
+     optimization/sqp.m, optimization/qp.m, statistics/base/run_count.m,
+     statistics/base/ranks.m: Eliminate NaN*ones and Inf*ones constructs
+     and just use Nan() and Inf()
+
 2010-04-19  Ben Abbott <bpabbott@mac.com>
 
 	* /plot/colorbar.m: Allow 'peer' option to be specified.
 	* /plot/colorbar.m: Consistent treatment of plotboxaspectratio, and
 	add listener for plotboxaspectratiomode.
 	* /plot/axis.m: Consistent treatment of plotboxaspectratio.
 	* /plot/__go_draw_axes__.m: Consistently determine axes position.
 
diff --git a/scripts/general/rat.m b/scripts/general/rat.m
--- a/scripts/general/rat.m
+++ b/scripts/general/rat.m
@@ -66,28 +66,28 @@ function [n,d] = rat(x,tol)
   steps = zeros([nsz, 0]);
 
   ## Grab new factors until all continued fractions converge.
   while (1)
     ## Determine which fractions have not yet converged.
     idx = find(abs (y-n./d) >= tol);
     if (isempty(idx))
       if (isempty (steps))
-	steps = NaN .* ones (nsz, 1);
+	steps = NaN (nsz, 1);
       endif
       break;
     endif
 
     ## Grab the next step in the continued fraction.
     flip = 1./frac(idx);
     ## Next element in the continued fraction.
     step = round(flip);
 
     if (nargout < 2)
-      tsteps = NaN .* ones (nsz, 1);
+      tsteps = NaN (nsz, 1);
       tsteps (idx) = step;
       steps = [steps, tsteps];
     endif
 
     frac(idx) = flip-step;
 
     ## Update the numerator/denominator.
     nextn = n;
diff --git a/scripts/geometry/triplot.m b/scripts/geometry/triplot.m
--- a/scripts/geometry/triplot.m
+++ b/scripts/geometry/triplot.m
@@ -32,21 +32,21 @@ function h = triplot (tri, x, y, varargi
 
   if (nargin < 3)
     print_usage ();
   endif
 
   idx = tri(:, [1, 2, 3, 1]).';
   nt = size (tri, 1);
   if (nargout > 0)
-    h = plot ([x(idx); NaN*ones(1, nt)](:),
-	      [y(idx); NaN*ones(1, nt)](:), varargin{:});
+    h = plot ([x(idx); NaN(1, nt)](:),
+	      [y(idx); NaN(1, nt)](:), varargin{:});
   else
-    plot ([x(idx); NaN*ones(1, nt)](:),
-	  [y(idx); NaN*ones(1, nt)](:), varargin{:});
+    plot ([x(idx); NaN(1, nt)](:),
+	  [y(idx); NaN(1, nt)](:), varargin{:});
   endif
 endfunction
 
 %!demo
 %! rand ('state', 2)
 %! x = rand (20, 1);
 %! y = rand (20, 1);
 %! tri = delaunay (x, y);
diff --git a/scripts/optimization/qp.m b/scripts/optimization/qp.m
--- a/scripts/optimization/qp.m
+++ b/scripts/optimization/qp.m
@@ -344,17 +344,17 @@ function [x, obj, INFO, lambda] = qp (x0
 	    if (n_eq > 0)
 	      Atmp = [Ain*Z, gamma];
 	      btmp = -res;
 	    else
 	      Atmp = [Ain, gamma];
 	      btmp = bin;
 	    endif
 	    ctmp = [zeros(n-n_eq, 1); ones(n_in, 1)];
-	    lb = [-Inf*ones(n-n_eq,1); zeros(n_in,1)];
+	    lb = [-Inf(n-n_eq,1); zeros(n_in,1)];
 	    ub = [];
 	    ctype = repmat ("L", n_in, 1);
 	    [P, dummy, status] = glpk (ctmp, Atmp, btmp, lb, ub, ctype);
 	    if ((status == 180 || status == 181 || status == 151)
 		&& all (abs (P(n-n_eq+1:end)) < rtol * (1 + norm (btmp))))
 	      ## We found a feasible starting point
 	      if (n_eq > 0)
 		x0 = xbar + Z*P(1:n-n_eq);
diff --git a/scripts/optimization/sqp.m b/scripts/optimization/sqp.m
--- a/scripts/optimization/sqp.m
+++ b/scripts/optimization/sqp.m
@@ -407,17 +407,17 @@ function [x, obj, info, iter, nf, lambda
 
       ## Discard inequality constraints that have -Inf bounds since those
       ## will never be active.
       idx = isinf (d) & d < 0;
       d(idx) = [];
       C(idx,:) = [];
 
       [p, obj_qp, INFO, lambda] = qp (x, B, c, F, g, [], [], d, C,
-				      Inf * ones (size (d)));
+				      Inf (size (d)));
 
       info = INFO.info;
 
       ## Check QP solution and attempt to recover if it has failed.
 
       ## Choose mu such that p is a descent direction for the chosen
       ## merit function phi.
 
diff --git a/scripts/sparse/gplot.m b/scripts/sparse/gplot.m
--- a/scripts/sparse/gplot.m
+++ b/scripts/sparse/gplot.m
@@ -38,18 +38,18 @@ function [x, y] = gplot (a, xy, line_sty
     print_usage ();
   endif
 
   if (nargin == 2)
     line_style = "-";
   endif
 
   [i, j] = find (a);
-  xcoord = [xy(i,1), xy(j,1), NaN * ones(length(i),1)]'(:);
-  ycoord = [xy(i,2), xy(j,2), NaN * ones(length(i),1)]'(:);
+  xcoord = [xy(i,1), xy(j,1), NaN (length(i),1) ]'(:);
+  ycoord = [xy(i,2), xy(j,2), NaN (length(i),1) ]'(:);
 
   if (nargout == 0)
     plot (xcoord, ycoord, line_style); 
   else
     x = xcoord;
     y = ycoord;
   endif
 
diff --git a/scripts/statistics/base/ranks.m b/scripts/statistics/base/ranks.m
--- a/scripts/statistics/base/ranks.m
+++ b/scripts/statistics/base/ranks.m
@@ -62,17 +62,17 @@ function y = ranks (x, dim)
     ## The algorithm works only on dim = 1, so permute if necesary.
     if (dim != 1)
       perm = [1 : nd];
       perm(1) = dim;
       perm(dim) = 1;
       x = permute (x, perm);
     endif
     sz = size (x);
-    infvec = -Inf * ones ([1, sz(2 : end)]);
+    infvec = -Inf ([1, sz(2 : end)]);
     [xs, xi] = sort (x);
     eq_el = find (diff ([xs; infvec]) == 0);
     if (isempty (eq_el))
       [eq_el, y] = sort (xi);
     else
       runs = complement (eq_el+1, eq_el);
       len = diff (find (diff ([Inf; eq_el; -Inf]) != 1)) + 1;
       [eq_el, y] = sort (xi);
diff --git a/scripts/statistics/base/run_count.m b/scripts/statistics/base/run_count.m
--- a/scripts/statistics/base/run_count.m
+++ b/scripts/statistics/base/run_count.m
@@ -67,17 +67,17 @@ function retval = run_count (x, n, dim)
 
   sz = size (x);
   idx = cell ();
   for i = 1 : nd
     idx{i} = 1 : sz(i);
   endfor
   c = sz(1); 
   tmp = zeros ([c + 1, sz(2 : end)]);
-  infvec = Inf * ones ([1, sz(2 : end)]);
+  infvec = Inf ([1, sz(2 : end)]);
 
   ind = find (diff ([infvec; x; -infvec]) < 0);
   tmp(ind(2:end) - 1) = diff(ind);
   tmp = tmp(idx{:});
 
   sz(1) = n;
   retval = zeros (sz);
   for k = 1 : (n-1)
diff --git a/scripts/strings/base2dec.m b/scripts/strings/base2dec.m
--- a/scripts/strings/base2dec.m
+++ b/scripts/strings/base2dec.m
@@ -70,17 +70,17 @@ function out = base2dec (d, base)
     d = toupper (d);
   endif
 
   ## Right justify the values before anything else.
   d = strjust (d, "right");
 
   ## Lookup value of symbols in symbol table, with invalid symbols
   ## evaluating to NaN and space evaluating to 0.
-  table = NaN * ones (256, 1);
+  table = NaN (256, 1);
   table (toascii (symbols (1 : base))) = 0 : base-1;
   table (toascii (" ")) = 0;
   d = reshape (table (toascii (d)), size (d));
 
   ## Multiply the resulting digits by the appropriate power and
   ## sum the rows.
   out = d * (base .^ (columns(d)-1 : -1 : 0)');
 
