# HG changeset patch
# User jwe
# Date 931837217 0
#      Tue Jul 13 03:40:17 1999 +0000
# Node ID 68259f4100262f5a7a15e4697e88818f2bec2a33
# Parent  256f98d262756cd2e56a3eda3a80513954e48464
[project @ 1999-07-13 03:34:54 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1923,24 +1923,39 @@ ComplexMatrix::map (c_c_Mapper f) const
 {
   ComplexMatrix b (*this);
   return b.apply (f);
 }
 
 Matrix
 ComplexMatrix::map (d_c_Mapper f) const
 {
-  const Complex *d = data ();
-
-  Matrix retval (rows (), columns ());
-
-  double *r = retval.fortran_vec ();
-
-  for (int i = 0; i < length (); i++)
-    r[i] = f (d[i]);
+  int nr = rows ();
+  int nc = cols ();
+
+  Matrix retval (nr, nc);
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      retval(i,j) = f (elem(i,j));
+
+  return retval;
+}
+
+boolMatrix
+ComplexMatrix::map (b_c_Mapper f) const
+{
+  int nr = rows ();
+  int nc = cols ();
+
+  boolMatrix retval (nr, nc);
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      retval(i,j) = f (elem(i,j));
 
   return retval;
 }
 
 ComplexMatrix&
 ComplexMatrix::apply (c_c_Mapper f)
 {
   Complex *d = fortran_vec (); // Ensures only one reference to my privates!
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -202,16 +202,17 @@ public:
   // unary operations
 
   boolMatrix operator ! (void) const;
 
   // other operations
 
   ComplexMatrix map (c_c_Mapper f) const;
   Matrix map (d_c_Mapper f) const;
+  boolMatrix map (b_c_Mapper f) const;
 
   ComplexMatrix& apply (c_c_Mapper f);
 
   bool any_element_is_inf_or_nan (void) const;
   bool all_elements_are_real (void) const;
   bool all_integers (double& max_val, double& min_val) const;
   bool too_large_for_float (void) const;
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+Mon Jul 12 22:34:34 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* mx-defs.h (b_d_Mapper, b_c_Mapper): New typedefs.
+	* dMatrix.cc (Matrix::map (b_d_Mapper)): New function.
+	* CMatrix.cc (ComplexMatrix::map (b_c_Mapper)): New function.
+	* lo-mappers.cc (xisinf, xisnan, xfinite): Return bool, not double.
+
+	* lo-mappers.cc (xmin, xmax): New functions to correctly handle NaNs.
+
 Mon May 10 07:45:11 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* MArray-defs.h (DO_VV_OP2): Fix macro definition to use arg.
 
 Wed May  5 20:06:10 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array2-idx.h (Array2<T>index (idx_vector& idx)): Always return a
 	column vector for A(:), for compatibility with Matlab.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -1551,16 +1551,31 @@ operator * (const ColumnVector& v, const
 
 Matrix
 Matrix::map (d_d_Mapper f) const
 {
   Matrix b (*this);
   return b.apply (f);
 }
 
+boolMatrix
+Matrix::map (b_d_Mapper f) const
+{
+  int nr = rows ();
+  int nc = cols ();
+
+  boolMatrix retval (nr, nc);
+
+  for (int j = 0; j < nc; j++)
+    for (int i = 0; i < nr; i++)
+      retval(i,j) = f (elem(i,j));
+
+  return retval;
+}
+
 Matrix&
 Matrix::apply (d_d_Mapper f)
 {
   double *d = fortran_vec (); // Ensures only one reference to my privates!
 
   for (int i = 0; i < length (); i++)
     d[i] = f (d[i]);
 
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -175,16 +175,17 @@ public:
 
   // column vector by row vector -> matrix operations
 
   friend Matrix operator * (const ColumnVector& a, const RowVector& b);
 
   // other operations
 
   Matrix map (d_d_Mapper f) const;
+  boolMatrix map (b_d_Mapper f) const;
 
   Matrix& apply (d_d_Mapper f);
 
   bool any_element_is_negative (void) const;
   bool any_element_is_inf_or_nan (void) const;
   bool all_elements_are_int_or_inf_or_nan (void) const;
   bool all_integers (double& max_val, double& min_val) const;
   bool too_large_for_float (void) const;
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -44,17 +44,17 @@ Software Foundation, 59 Temple Place - S
 #ifndef M_LOG10E
 #define M_LOG10E 0.43429448190325182765
 #endif
 
 #ifndef M_PI
 #define M_PI 3.14159265358979323846
 #endif
 
-// Double -> double mappers.
+// double -> double mappers.
 
 double
 arg (double x)
 {
   if (x < 0.0)
     return M_PI;
   else
 #if defined (HAVE_ISNAN)
@@ -131,75 +131,67 @@ xerfc (double x)
 #if defined (HAVE_ERFC)
   return erfc (x);
 #else
   (*current_liboctave_error_handler)
     ("erfc (x) not available on this system");
 #endif
 }
 
-double
+// double -> bool mappers.
+
+bool
 xisnan (double x)
 {
 #if defined (HAVE_ISNAN)
   return isnan (x) != 0;
 #else
-  return 0;
+  return false;
 #endif
 }
 
-double
+bool
 xfinite (double x)
 {
 #if defined (HAVE_FINITE)
   return finite (x) != 0;
 #elif defined (HAVE_ISINF) && defined (HAVE_ISNAN)
   return (! isinf (x) && ! isnan (x));
 #else
-  return 1;
+  return true;
 #endif
 }
 
-double
+bool
 xisinf (double x)
 {
 #if defined (HAVE_ISINF)
   return isinf (x);
 #elif defined (HAVE_FINITE) && defined (HAVE_ISNAN)
   return (! (finite (x) || isnan (x)));
 #else
-  return 0;
+  return false;
 #endif
 }
 
-// Complex -> double mappers.
+// (double, double) -> double mappers.
 
 double
-xisnan (const Complex& x)
+xmin (double x, double y)
 {
-#if defined (HAVE_ISNAN)
-  return (isnan (real (x)) || isnan (imag (x)));
-#else
-  return 0;
-#endif
+  return x < y ? x : (xisnan (x) ? x : y);
 }
 
 double
-xfinite (const Complex& x)
+xmax (double x, double y)
 {
-  return (xfinite (real (x)) && xfinite (imag (x)));
+  return x > y ? x : (xisnan (x) ? x : y);
 }
 
-double
-xisinf (const Complex& x)
-{
-  return (xisinf (real (x)) || xisinf (imag (x)));
-}
-
-// Complex -> complex mappers.
+// complex -> complex mappers.
 
 Complex
 acos (const Complex& x)
 {
   static Complex i (0, 1);
 
   return (real (x) * imag (x) < 0.0) ? i * acosh (x) : -i * acosh (x);
 }
@@ -281,13 +273,51 @@ tan (const Complex& x)
 }
 
 Complex
 tanh (const Complex& x)
 {
   return sinh (x) / cosh (x);
 }
 
+// complex -> bool mappers.
+
+bool
+xisnan (const Complex& x)
+{
+#if defined (HAVE_ISNAN)
+  return (isnan (real (x)) || isnan (imag (x)));
+#else
+  return false;
+#endif
+}
+
+bool
+xfinite (const Complex& x)
+{
+  return (xfinite (real (x)) && xfinite (imag (x)));
+}
+
+bool
+xisinf (const Complex& x)
+{
+  return (xisinf (real (x)) || xisinf (imag (x)));
+}
+
+// (complex, complex) -> complex mappers.
+
+Complex
+xmin (const Complex& x, const Complex& y)
+{
+  return abs (x) < abs (y) ? x : (xisnan (x) ? x : y);
+}
+
+Complex
+xmax (const Complex& x, const Complex& y)
+{
+  return abs (x) > abs (y) ? x : (xisnan (x) ? x : y);
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -29,38 +29,45 @@ extern double arg (double x);
 extern double conj (double x);
 extern double fix (double x);
 extern double imag (double x);
 extern double real (double x);
 extern double round (double x);
 extern double signum (double x);
 extern double xerf (double x);
 extern double xerfc (double x);
-extern double xisnan (double x);
-extern double xfinite (double x);
-extern double xisinf (double x);
 
-extern double xisnan (const Complex& x);
-extern double xfinite (const Complex& x);
-extern double xisinf (const Complex& x);
+extern bool xisnan (double x);
+extern bool xfinite (double x);
+extern bool xisinf (double x);
+
+extern double xmin (double x, double y);
+extern double xmax (double x, double y);
 
 extern Complex acos (const Complex& x);
 extern Complex acosh (const Complex& x);
 extern Complex asin (const Complex& x);
 extern Complex asinh (const Complex& x);
 extern Complex atan (const Complex& x);
 extern Complex atanh (const Complex& x);
 extern Complex ceil (const Complex& x);
 extern Complex fix (const Complex& x);
 extern Complex floor (const Complex& x);
 extern Complex log10 (const Complex& x);
 extern Complex round (const Complex& x);
 extern Complex signum (const Complex& x);
 extern Complex tan (const Complex& x);
 extern Complex tanh (const Complex& x);
 
+extern bool xisnan (const Complex& x);
+extern bool xfinite (const Complex& x);
+extern bool xisinf (const Complex& x);
+
+extern Complex xmin (const Complex& x, const Complex& y);
+extern Complex xmax (const Complex& x, const Complex& y);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/mx-defs.h b/liboctave/mx-defs.h
--- a/liboctave/mx-defs.h
+++ b/liboctave/mx-defs.h
@@ -73,16 +73,19 @@ class ComplexQR;
 #include "oct-cmplx.h"
 
 class istream;
 class ostream;
 
 #ifndef MAPPER_FCN_TYPEDEFS
 #define MAPPER_FCN_TYPEDEFS 1
 
+typedef bool (*b_d_Mapper)(double);
+typedef bool (*b_c_Mapper)(const Complex&);
+
 typedef double (*d_d_Mapper)(double);
 typedef double (*d_c_Mapper)(const Complex&);
 typedef Complex (*c_c_Mapper)(const Complex&);
 
 #endif
 
 #endif
 
diff --git a/src/DLD-FUNCTIONS/minmax.cc b/src/DLD-FUNCTIONS/minmax.cc
--- a/src/DLD-FUNCTIONS/minmax.cc
+++ b/src/DLD-FUNCTIONS/minmax.cc
@@ -22,113 +22,82 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cmath>
 
 #include "lo-ieee.h"
+#include "lo-mappers.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 
-#ifndef MAX
-#define MAX(a,b) ((a) > (b) ? (a) : (b))
-#endif
-
-#ifndef MIN
-#define MIN(a,b) ((a) < (b) ? (a) : (b))
-#endif
-
 // XXX FIXME XXX -- it would be nice to share code among the min/max
 // functions below.
 
 static Matrix
 min (double d, const Matrix& m)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
   Matrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
-      {
-	double m_elem = m (i, j);
-	result (i, j) = MIN (d, m_elem);
-      }
+      result (i, j) = xmin (d, m (i, j));
 
   return result;
 }
 
 static Matrix
 min (const Matrix& m, double d)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
   Matrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
-      {
-	double m_elem = m (i, j);
-	result (i, j) = MIN (m_elem, d);
-      }
+      result (i, j) = xmin (m (i, j), d);
 
   return result;
 }
 
 static ComplexMatrix
 min (const Complex& c, const ComplexMatrix& m)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
   ComplexMatrix result (nr, nc);
 
-  double abs_c = abs (c);
-
   for (int j = 0; j < nc; j++)
-    {
-      for (int i = 0; i < nr; i++)
-	{
-	  double abs_m_elem = abs (m (i, j));
-	  if (abs_c < abs_m_elem)
-	    result (i, j) = c;
-	  else
-	    result (i, j) = m (i, j);
-	}
-    }
+    for (int i = 0; i < nr; i++)
+      result (i, j) = xmin (c, m (i, j));
 
   return result;
 }
 
 static ComplexMatrix
 min (const ComplexMatrix& m, const Complex& c)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
   ComplexMatrix result (nr, nc);
 
-  double abs_c = abs (c);
-
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
-      {
-	double abs_m_elem = abs (m (i, j));
-	if (abs_m_elem < abs_c)
-	  result (i, j) = m (i, j);
-	else
-	  result (i, j) = c;
-      }
+      result (i, j) = xmin (m (i, j), c);
 
   return result;
 }
 
 static Matrix
 min (const Matrix& a, const Matrix& b)
 {
   int nr = a.rows ();
@@ -138,21 +107,17 @@ min (const Matrix& a, const Matrix& b)
       error ("two-arg min expecting args of same size");
       return Matrix ();
     }
 
   Matrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
-      {
-	double a_elem = a (i, j);
-	double b_elem = b (i, j);
-	result (i, j) = MIN (a_elem, b_elem);
-      }
+      result (i, j) = xmin (a (i, j), b (i, j));
 
   return result;
 }
 
 static ComplexMatrix
 min (const ComplexMatrix& a, const ComplexMatrix& b)
 {
   int nr = a.rows ();
@@ -173,120 +138,84 @@ min (const ComplexMatrix& a, const Compl
 	  {
 	    columns_are_real_only = 0;
 	    break;
 	  }
 
       if (columns_are_real_only)
 	{
 	  for (int i = 0; i < nr; i++)
-	    {
-	      double a_elem = real (a (i, j));
-	      double b_elem = real (b (i, j));
-	      if (a_elem < b_elem)
-		result (i, j) = a_elem;
-	      else
-		result (i, j) = b_elem;
-	    }
+	    result (i, j) = xmin (real (a (i, j)), real (b (i, j)));
 	}
       else
 	{
 	  for (int i = 0; i < nr; i++)
-	    {
-	      double abs_a_elem = abs (a (i, j));
-	      double abs_b_elem = abs (b (i, j));
-	      if (abs_a_elem < abs_b_elem)
-		result (i, j) = a (i, j);
-	      else
-		result (i, j) = b (i, j);
-	    }
+	    result (i, j) = xmin (a (i, j), b (i, j));
 	}
     }
 
   return result;
 }
 
 static Matrix
 max (double d, const Matrix& m)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
   Matrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
-      {
-	double m_elem = m (i, j);
-	result (i, j) = MAX (d, m_elem);
-      }
+      result (i, j) = xmax (d, m (i, j));
 
   return result;
 }
 
 static Matrix
 max (const Matrix& m, double d)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
   Matrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
-      {
-	double m_elem = m (i, j);
-	result (i, j) = MAX (m_elem, d);
-      }
+      result (i, j) = xmax (m (i, j), d);
 
   return result;
 }
 
 static ComplexMatrix
 max (const Complex& c, const ComplexMatrix& m)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
   ComplexMatrix result (nr, nc);
 
-  double abs_c = abs (c);
-
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
-      {
-	double abs_m_elem = abs (m (i, j));
-	if (abs_c > abs_m_elem)
-	  result (i, j) = c;
-	else
-	  result (i, j) = m (i, j);
-      }
+      result (i, j) = xmax (c, m (i, j));
 
   return result;
 }
 
 static ComplexMatrix
 max (const ComplexMatrix& m, const Complex& c)
 {
   int nr = m.rows ();
   int nc = m.columns ();
 
   ComplexMatrix result (nr, nc);
 
-  double abs_c = abs (c);
-
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
-      {
-	double abs_m_elem = abs (m (i, j));
-	if (abs_m_elem > abs_c)
-	  result (i, j) = m (i, j);
-	else
-	  result (i, j) = c;
-      }
+      result (i, j) = xmax (m (i, j), c);
 
   return result;
 }
 
 static Matrix
 max (const Matrix& a, const Matrix& b)
 {
   int nr = a.rows ();
@@ -296,21 +225,17 @@ max (const Matrix& a, const Matrix& b)
       error ("two-arg max expecting args of same size");
       return Matrix ();
     }
 
   Matrix result (nr, nc);
 
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
-      {
-	double a_elem = a (i, j);
-	double b_elem = b (i, j);
-	result (i, j) = MAX (a_elem, b_elem);
-      }
+      result (i, j) = xmax (a (i, j), b (i, j));
 
   return result;
 }
 
 static ComplexMatrix
 max (const ComplexMatrix& a, const ComplexMatrix& b)
 {
   int nr = a.rows ();
@@ -331,36 +256,22 @@ max (const ComplexMatrix& a, const Compl
 	  {
 	    columns_are_real_only = 0;
 	    break;
 	  }
 
       if (columns_are_real_only)
 	{
 	  for (int i = 0; i < nr; i++)
-	    {
-	      double a_elem = real (a (i, j));
-	      double b_elem = real (b (i, j));
-	      if (a_elem > b_elem)
-		result (i, j) = a_elem;
-	      else
-		result (i, j) = b_elem;
-	    }
+	    result (i, j) = xmax (real (a (i, j)), real (b (i, j)));
 	}
       else
 	{
 	  for (int i = 0; i < nr; i++)
-	    {
-	      double abs_a_elem = abs (a (i, j));
-	      double abs_b_elem = abs (b (i, j));
-	      if (abs_a_elem > abs_b_elem)
-		result (i, j) = a (i, j);
-	      else
-		result (i, j) = b (i, j);
-	    }
+	    result (i, j) = xmax (a (i, j), b (i, j));
 	}
     }
 
   return result;
 }
 
 DEFUN_DLD (min, args, nargout,
   "min (X): minimum value(s) of a vector (matrix)")
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -1149,25 +1149,33 @@ pr_col_num_header (ostream& os, int tota
       else
 	os << " Columns " << col + 1 << " through " << lim << ":\n";
 
       if (! compact_format)
 	os << "\n";
     }
 }
 
+static inline void
+do_plus_format (ostream& os, double d)
+{
+  if (d == 0.0)
+    os << " ";
+  else if (d < 0.0)
+    os << "-";
+  else
+    os << "+";
+}
+
 void
 octave_print_internal (ostream& os, double d, bool pr_as_read_syntax)
 {
   if (plus_format)
     {
-      if (d == 0.0)
-	os << " ";
-      else
-	os << "+";
+      do_plus_format (os, d);
     }
   else
     {
       set_format (d);
       if (free_format)
 	os << d;
       else
 	pr_float (os, d);
@@ -1187,20 +1195,17 @@ octave_print_internal (ostream& os, cons
     {
       for (int i = 0; i < nr; i++)
 	{
 	  for (int j = 0; j < nc; j++)
 	    {
 	      if (j == 0)
 		os << "  ";
 
-	      if (m (i, j) == 0.0)
-		os << " ";
-	      else
-		os << "+";
+	      do_plus_format (os, m (i, j));
 	    }
 
 	  if (i < nr - 1)
 	    os << "\n";
 	}
     }
   else
     {
@@ -1306,26 +1311,42 @@ octave_print_internal (ostream& os, cons
 		  if (i < nr - 1)
 		    os << "\n";
 		}
 	    }
 	}
     }
 }
 
+static inline void
+do_plus_format (ostream& os, const Complex& c)
+{
+  double rp = c.real ();
+  double ip = c.imag ();
+
+  if (rp == 0.0)
+    {
+      if (ip == 0.0)
+	os << " ";
+      else
+	os << "i";
+    }
+  else if (ip == 0.0)
+    do_plus_format (os, rp);
+  else
+    os << "c";
+}
+
 void
 octave_print_internal (ostream& os, const Complex& c,
 		       bool pr_as_read_syntax)
 {
   if (plus_format)
     {
-      if (c == 0.0)
-	os << " ";
-      else
-	os << "+";
+      do_plus_format (os, c);
     }
   else
     {
       set_format (c);
       if (free_format)
 	os << c;
       else
 	pr_complex (os, c);
@@ -1345,20 +1366,17 @@ octave_print_internal (ostream& os, cons
     {
       for (int i = 0; i < nr; i++)
 	{
 	  for (int j = 0; j < nc; j++)
 	    {
 	      if (j == 0)
 		os << "  ";
 
-	      if (cm (i, j) == 0.0)
-		os << " ";
-	      else
-		os << "+";
+	      do_plus_format (os, cm (i, j));
 	    }
 
 	  if (i < nr - 1)
 	    os << "\n";
 	}
     }
   else
     {
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -47,16 +47,20 @@ Software Foundation, 59 Temple Place - S
 #elif defined (HAVE_TERMIO_H)
 #include <termio.h>
 #elif defined (HAVE_SGTTY_H)
 #include <sgtty.h>
 #else
 LOSE! LOSE!
 #endif
 
+#if defined (HAVE_SYS_IOCTL_H)
+#include <sys/ioctl.h>
+#endif
+
 #if defined (HAVE_FLOATINGPOINT_H)
 #include <floatingpoint.h>
 #endif
 
 #if defined (HAVE_IEEEFP_H)
 #include <ieeefp.h>
 #endif
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -796,37 +796,28 @@ Associate a cryptic message with a varia
 	}
     }
   else
     print_usage ("document");
 
   return retval;
 }
 
-// XXX FIXME XXX -- this should take a list of regular expressions
-// naming the variables to look for.
-
 static octave_value_list
 do_who (int argc, const string_vector& argv)
 {
   octave_value_list retval;
 
   bool show_builtins = false;
-  bool show_functions = (curr_sym_tab == top_level_sym_tab);
-  bool show_variables = true;
+  bool show_functions = false;
+  bool show_variables = false;
   bool show_verbose = false;
 
   string my_name = argv[0];
 
-  if (argc > 1)
-    {
-      show_functions = false;
-      show_variables = false;
-    }
-
   int i;
   for (i = 1; i < argc; i++)
     {
       if (argv[i] == "-all" || argv[i] == "-a")
 	{
 	  show_builtins = true;
 	  show_functions = true;
 	  show_variables = true;
@@ -841,16 +832,25 @@ do_who (int argc, const string_vector& a
 	show_variables = true;
       else if (argv[i][0] == '-')
 	warning ("%s: unrecognized option `%s'", my_name.c_str (),
 		 argv[i].c_str ());
       else
 	break;
     }
 
+  // If no options were specified to select the type of symbol to
+  // display, then set defaults.
+
+  if (! (show_builtins || show_functions || show_variables))
+    {
+      show_functions = (curr_sym_tab == top_level_sym_tab);
+      show_variables = true;
+    }
+
   int npats = argc - i;
   string_vector pats (npats);
   for (int j = 0; j < npats; j++)
     pats[j] = argv[i+j];
 
   // If the user specified -l and nothing else, show variables.  If
   // evaluating this at the top level, also show functions.
 
