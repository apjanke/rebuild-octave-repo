# HG changeset patch
# User jwe
# Date 1145375566 0
#      Tue Apr 18 15:52:46 2006 +0000
# Node ID 412f72146ab544cf5ce6be1a8cd84020b203d140
# Parent  26f92fb8ba33e5e80e03de4776e7ee386a96dcfd
[project @ 2006-04-18 15:52:46 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2006-04-18  John W. Eaton  <jwe@octave.org>
+
+	* help.cc (Flookfor): Add std qualifier to transform function.
+
 2006-04-16  John W. Eaton  <jwe@octave.org>
 
 	* pager.h (octave_diary_buf, octave_pager_buf): Use std:stringbuf
 	directly.
 
 	* ls-mat-ascii.cc (read_mat_ascii_data): Use std::istringstream
 	directly.
 	* load-save.cc (parse_save_options): Likewise.
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -1202,17 +1202,17 @@ first_help_sentence (const std::string& 
 	  if (pos == NPOS)
 	    break;
 
 	  size_t new_pos = h.find_first_of ('\n', pos);
 	  std::string line = h.substr (pos, new_pos-pos);
 
 	  // Make a lower case copy to simplify some tests
 	  std::string lower = line;
-	  transform (lower.begin (), lower.end (), lower.begin (), tolower);
+	  std::transform (lower.begin (), lower.end (), lower.begin (), tolower);
 
 	  // Skip lines starting in "-" or "Usage"
 	  if (lower.find_first_of ('-') == 0
 	      || lower.substr (0, 5) == "usage")
 	    {
 	      pos = (new_pos == NPOS ? NPOS : new_pos + 1);
 	      continue;
 	    }
@@ -1541,17 +1541,17 @@ to find related functions that are not p
 	}
     }
   else
     error ("lookfor: argument must be a string");
 
   if (!error_state)
     {
       // All tests in lower case
-      transform (txt.begin (), txt.end (), txt.begin (), tolower);
+      std::transform (txt.begin (), txt.end (), txt.begin (), tolower);
 
       help_list *ptr = keyword_help ();
       while (ptr->name)
 	{
 	  std::string name = ptr->name;
 	  std::string h = ptr->help;
 
 	  if (name.find (txt) != NPOS)
@@ -1568,17 +1568,17 @@ to find related functions that are not p
 	    {
 	      std::string s;
 
 	      if (first_sentence_only)
 		s = first_help_sentence (h);
 	      else
 		s = h;
 	      
-	      transform (s.begin (), s.end (), s.begin (), tolower);
+	      std::transform (s.begin (), s.end (), s.begin (), tolower);
 
 	      if (s.length () > 0 && s.find (txt) != NPOS)
 		{
 		  if (nargout)
 		    {
 		      ret[0].append (name);
 		      ret[1].append (first_help_sentence (h));
 		    }
@@ -1611,17 +1611,17 @@ to find related functions that are not p
 	  else
 	    {
 	      std::string s;
 	      if (first_sentence_only)
 		s = first_help_sentence (h);
 	      else
 		s = h;
 	      
-	      transform (s.begin (), s.end (), s.begin (), tolower);
+	      std::transform (s.begin (), s.end (), s.begin (), tolower);
 
 	      if (s.length () > 0 && s.find (txt) != NPOS)
 		{
 		  if (nargout)
 		    {
 		      ret[0].append (name);
 		      ret[1].append (first_help_sentence (h));
 		    }
@@ -1665,17 +1665,17 @@ to find related functions that are not p
 		{
 		  std::string s;
 
 		  if (first_sentence_only)
 		    s = first_help_sentence (h);
 		  else
 		    s = h;
 	      
-		  transform (s.begin (), s.end (), s.begin (), tolower);
+		  std::transform (s.begin (), s.end (), s.begin (), tolower);
 
 		  if (s.length () > 0 && s.find (txt) != NPOS)
 		    {
 		      if (nargout)
 			{
 			  ret[0].append (name);
 			  ret[1].append (first_help_sentence (h));
 			}
@@ -1753,17 +1753,17 @@ to find related functions that are not p
 			  else
 			    {
 			      std::string s;
 			      if (first_sentence_only)
 				s = first_help_sentence (h);
 			      else
 				s = h;
 
-			      transform (s.begin (), s.end (), s.begin (), tolower);
+			      std::transform (s.begin (), s.end (), s.begin (), tolower);
 
 			      if (s.length () > 0 && s.find (txt) != NPOS)
 				{
 				  if (nargout)
 				    {
 				      ret[0].append (name);
 				      ret[1].append (first_help_sentence (h));
 				    }
@@ -1809,17 +1809,17 @@ to find related functions that are not p
 			      else
 				{
 				  std::string s;
 				  if (first_sentence_only)
 				    s = first_help_sentence (h);
 				  else
 				    s = h;
 
-				  transform (s.begin (), s.end (), s.begin (), 
+				  std::transform (s.begin (), s.end (), s.begin (), 
 					     tolower);
 
 				  if (s.length () > 0 && s.find (txt) != NPOS)
 				    {
 				      if (nargout)
 					{
 					  ret[0].append (aname);
 					  ret[1].append (first_help_sentence (h));
