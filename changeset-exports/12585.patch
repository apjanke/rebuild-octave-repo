# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1302314442 25200
#      Fri Apr 08 19:00:42 2011 -0700
# Node ID 4e32a1bb9096a42bda862d888f4625a10f9e2139
# Parent  c8be316f95438b7b3e8293c3ce0b6bba35fa6d3b
mode.m, quantile.m: Return output of same class as input.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2011-04-08  Rik  <octave@nomad.inbox5.com>
+
+	* statistics/base/mode.m, statistics/base/quantile.m: Return output
+	of same class as input.
+
 2011-04-06  Rik  <octave@nomad.inbox5.com>
 
 	* miscellaneous/pack.m: Improve docstring.
 
 2011-04-06  Rik  <octave@nomad.inbox5.com>
 
 	* signal/module.mk: Make spectral density helper functions private.
 	(rectangle_sw, rectangle_lw, triangle_sw, triangle_lw)
diff --git a/scripts/statistics/base/mode.m b/scripts/statistics/base/mode.m
--- a/scripts/statistics/base/mode.m
+++ b/scripts/statistics/base/mode.m
@@ -85,17 +85,17 @@ function [m, f, c] = mode (x, dim)
     t2 (t) = diff ([find(t)(:); prod(sz)+1]);
     f = max (t2, [], dim);
   endif
 
   c = cell (sz2);
   if (issparse (x))
     m = sparse (sz2(1), sz2(2));
   else
-    m = zeros (sz2);
+    m = zeros (sz2, class (x));
   endif
   for i = 1 : prod (sz2)
     c{i} = xs (t2 (:, i) == f(i), i);
     m (i) = c{i}(1);
   endfor
 endfunction
 
 %!test
diff --git a/scripts/statistics/base/quantile.m b/scripts/statistics/base/quantile.m
--- a/scripts/statistics/base/quantile.m
+++ b/scripts/statistics/base/quantile.m
@@ -303,29 +303,33 @@ function inv = __quantile__ (x, p, metho
   if (nargin < 2 || nargin > 3)
     print_usage ();
   endif
 
   if (!isnumeric (x))
     error ("quantile: X must be a numeric vector or matrix");
   endif
 
+  if (isinteger (x))
+    x = double (x);
+  endif
+
   ## Save length and set shape of quantiles.
   n = numel (p);
   p = p(:);
 
   ## Save length and set shape of samples.
   ## FIXME: does sort guarantee that NaN's come at the end?
   x = sort (x);
   m = sum (! isnan (x));
   mx = size (x, 1);
   nx = size (x, 2);
 
   ## Initialize output values.
-  inv = Inf*(-(p < 0) + (p > 1));
+  inv = Inf(class (x)) * (-(p < 0) + (p > 1));
   inv = repmat (inv, 1, nx);
 
   ## Do the work.
   if (any(k = find((p >= 0) & (p <= 1))))
     n = length (k);
     p = p (k);
     ## Special case.
     if (mx == 1)
