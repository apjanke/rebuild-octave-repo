# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1452285022 18000
#      Fri Jan 08 15:30:22 2016 -0500
# Node ID 4e2e93ec558a71971c24d01b715b06ec2e866d71
# Parent  0be406e2ede10a9e635df565cab818814d9fa081
use gh_manager::auto_lock to ensure lock state is properly restored

* graphics.cc (gh_manager::do_process_events, Fdrawnow):
Use gh_manager::auto_lock to ensure that lock state is restored no
matter how control leaves the function.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -9417,55 +9417,55 @@ gh_manager::do_process_events (bool forc
   graphics_event e;
   bool old_Vdrawnow_requested = Vdrawnow_requested;
   bool events_executed = false;
 
   do
     {
       e = graphics_event ();
 
-      gh_manager::lock ();
-
-      if (! event_queue.empty ())
-        {
-          if (callback_objects.empty () || force)
-            {
-              e = event_queue.front ();
-
-              event_queue.pop_front ();
-            }
-          else
-            {
-              const graphics_object& go = callback_objects.front ();
-
-              if (go.get_properties ().is_interruptible ())
-                {
-                  e = event_queue.front ();
-
-                  event_queue.pop_front ();
-                }
-            }
-        }
-
-      gh_manager::unlock ();
+      {
+        gh_manager::auto_lock guard;
+
+        if (! event_queue.empty ())
+          {
+            if (callback_objects.empty () || force)
+              {
+                e = event_queue.front ();
+
+                event_queue.pop_front ();
+              }
+            else
+              {
+                const graphics_object& go = callback_objects.front ();
+
+                if (go.get_properties ().is_interruptible ())
+                  {
+                    e = event_queue.front ();
+
+                    event_queue.pop_front ();
+                  }
+              }
+          }
+      }
 
       if (e.ok ())
         {
           e.execute ();
           events_executed = true;
         }
     }
   while (e.ok ());
 
-  gh_manager::lock ();
-
-  if (event_queue.empty () && event_processing == 0)
-    command_editor::remove_event_hook (gh_manager::process_events);
-
-  gh_manager::unlock ();
+  {
+    gh_manager::auto_lock guard;
+
+    if (event_queue.empty () && event_processing == 0)
+      command_editor::remove_event_hook (gh_manager::process_events);
+  }
 
   if (events_executed)
     flush_octave_stdout ();
 
   if (Vdrawnow_requested && ! old_Vdrawnow_requested)
     {
       Fdrawnow ();
 
@@ -10702,25 +10702,25 @@ undocumented.\n\
 @seealso{refresh}\n\
 @end deftypefn")
 {
   static int drawnow_executing = 0;
 
   if (args.length () > 4)
     print_usage ();
 
-  gh_manager::lock ();
-
   unwind_protect frame;
 
   frame.protect_var (Vdrawnow_requested, false);
   frame.protect_var (drawnow_executing);
 
   if (++drawnow_executing <= 1)
     {
+      gh_manager::auto_lock guard;
+
       if (args.length () == 0 || args.length () == 1)
         {
           Matrix hlist = gh_manager::figure_handle_list (true);
 
           for (int i = 0; i < hlist.numel (); i++)
             {
               graphics_handle h = gh_manager::lookup (hlist(i));
 
@@ -10750,21 +10750,17 @@ undocumented.\n\
 
           if (args.length () == 1)
             {
               caseless_str val (args(0).xstring_value ("drawnow: first argument must be a string"));
 
               if (val.compare ("expose"))
                 do_events = false;
               else
-                {
-                  gh_manager::unlock ();
-
-                  error ("drawnow: invalid argument, 'expose' is only valid option");
-                }
+                error ("drawnow: invalid argument, 'expose' is only valid option");
             }
 
           if (do_events)
             {
               gh_manager::unlock ();
 
               gh_manager::process_events ();
 
@@ -10780,49 +10776,37 @@ undocumented.\n\
 
           file = args(1).xstring_value ("drawnow: FILE must be a string");
 
           size_t pos_p = file.find_first_of ("|");
           size_t pos_c = file.find_first_not_of ("| ");
 
           if (pos_p == std::string::npos &&
               pos_c == std::string::npos)
-            {
-              gh_manager::unlock ();
-
-              error ("drawnow: empty output ''");
-            }
+            error ("drawnow: empty output ''");
           else if (pos_c == std::string::npos)
-            {
-              gh_manager::unlock ();
-
-              error ("drawnow: empty pipe '|'");
-            }
+            error ("drawnow: empty pipe '|'");
           else if (pos_p != std::string::npos && pos_p < pos_c)
             {
               // Strip leading pipe character
               file = file.substr (pos_c);
             }
           else
             {
               size_t pos = file.find_last_of (file_ops::dir_sep_chars ());
 
               if (pos != std::string::npos)
                 {
                   std::string dirname = file.substr (pos_c, pos+1);
 
                   file_stat fs (dirname);
 
                   if (! fs || ! fs.is_dir ())
-                    {
-                      gh_manager::unlock ();
-
-                      error ("drawnow: nonexistent directory '%s'",
-                             dirname.c_str ());
-                    }
+                    error ("drawnow: nonexistent directory '%s'",
+                           dirname.c_str ());
 
                 }
             }
 
           mono = (args.length () >= 3 ? args(2).xbool_value ("drawnow: MONO colormode must be a boolean value") : false);
 
           debug_file = (args.length () > 3 ? args(3).xstring_value ("drawnow: DEBUG_FILE must be a string") : "");
 
@@ -10845,18 +10829,16 @@ undocumented.\n\
                                           debug_file);
 
           octave_sleep (0.05); // FIXME: really needed?
 
           gh_manager::lock ();
         }
     }
 
-  gh_manager::unlock ();
-
   return ovl ();
 }
 
 DEFUN (addlistener, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} addlistener (@var{h}, @var{prop}, @var{fcn})\n\
 Register @var{fcn} as listener for the property @var{prop} of the graphics\n\
 object @var{h}.\n\
