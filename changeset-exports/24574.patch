# HG changeset patch
# User Rik <rik@octave.org>
# Date 1515559345 28800
#      Tue Jan 09 20:42:25 2018 -0800
# Node ID b7047fe471239acab664c4c2b3e0db4a571ca441
# Parent  28a4037d10ab46440bf89d39d68bae98a7ac18a0
bounds.m: New function to find smallest and largest element of dataset.


* scripts/statistics/bounds.m: New function.

* scripts/statistics/module.mk: Add bounds.m to build system.

* NEWS: Announce new function.

* stats.txi: Add function to manual.

* iqr.m, range.m, std.m: Add seealso links to bounds.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -209,16 +209,17 @@ Summary of important user-visible change
       var_test.m
       welch_test.m
       wilcoxon_test.m
       z_test.m
       z_test_2.m
 
  ** Other new functions added in 4.4:
 
+      bounds
       camlookat
       camorbit
       campos
       camroll
       camtarget
       camup
       camva
       camzoom
diff --git a/doc/interpreter/stats.txi b/doc/interpreter/stats.txi
--- a/doc/interpreter/stats.txi
+++ b/doc/interpreter/stats.txi
@@ -67,16 +67,18 @@ the central tendency of the data.
 
 @DOCSTRING(mode)
 
 Using just one number, such as the mean, to represent an entire data set may
 not give an accurate picture of the data.  One way to characterize the fit is
 to measure the dispersion of the data.  Octave provides several functions for
 measuring dispersion.
 
+@DOCSTRING(bounds)
+
 @DOCSTRING(range)
 
 @DOCSTRING(iqr)
 
 @DOCSTRING(meansq)
 
 @DOCSTRING(std)
 
diff --git a/scripts/statistics/bounds.m b/scripts/statistics/bounds.m
new file mode 100644
--- /dev/null
+++ b/scripts/statistics/bounds.m
@@ -0,0 +1,114 @@
+## Copyright (C) 2018 Rik Wehbring
+##
+## This file is part of Octave.
+##
+## Octave is free software: you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation, either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <https://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn  {} {[@var{s}, @var{l}] =} bounds (@var{x})
+## @deftypefnx {} {[@var{s}, @var{l}] =} bounds (@var{x}, @var{dim})
+## @deftypefnx {} {[@var{s}, @var{l}] =} bounds (@dots{}, "nanflag")
+## Return the smallest and largest values of the input data @var{x}.
+##
+## If @var{x} is a vector, the bounds are calculated over the elements of
+## @var{x}.  If @var{x} is a matrix, the bounds are calculated for each column.
+## For a multi-dimensional array, the bounds are calculated over the first
+## non-singleton dimension.
+##
+## If the optional argument @var{dim} is given, operate along this dimension.
+##
+## The optional argument @qcode{"nanflag"} defaults to @qcode{"omitnan"} which
+## does not include NaN values in the result.  If the argument
+## @qcode{"includenan"} is given, and there is a NaN present, then the result
+## for both smallest (@var{s}) and largest (@var{l}) elements will be NaN.
+##
+## The bounds are a quickly computed measure of the dispersion of a data set,
+## but are less accurate than @code{iqr} if there are outlying data points.
+## @seealso{range, iqr, std}
+## @end deftypefn
+
+function [s, l] = bounds (x, dim, nanflag = false)
+
+  if (nargin < 1 || nargin > 3)
+    print_usage ();
+  endif
+
+  if (! (isnumeric (x) || islogical (x)))
+    error ("bounds: X must be a numeric vector or matrix");
+  endif
+
+  need_dim = true;
+  if (nargin == 2)
+    if (ischar (dim))
+      nanflag = dim;
+    else
+      need_dim = false;
+    endif
+  elseif (nargin == 3)
+    need_dim = ifelse (isempty (dim), true, false);
+  endif
+
+  sz = size (x);
+  if (need_dim)
+    ## Find the first non-singleton dimension.
+    (dim = find (sz > 1, 1)) || (dim = 1);
+  else
+    if (! (isscalar (dim) && dim == fix (dim) && dim > 0))
+      error ("bounds: DIM must be an integer and a valid dimension");
+    endif
+  endif
+
+  if (nanflag)
+    nanflag = strcmp (nanflag, "includenan");
+  endif
+  
+  s = min (x, [], dim);
+  l = max (x, [], dim);
+  if (nanflag)
+    nanidx = any (isnan (x), dim); 
+    s(nanidx) = NaN; 
+    l(nanidx) = NaN; 
+  endif
+
+endfunction
+
+
+%!assert (bounds (1:10), [1, 10])
+%!assert (bounds ([10:-1:1]'), [1, 10])
+%!assert (bounds (single (1:10)), single ([1, 10]))
+%!assert (bounds (magic (3)), [3, 1, 2])
+%!assert (bounds (magic (3), 2), [1; 3; 2])
+%!test
+%! x = magic (3);
+%! x(2,3) = NaN;
+%! assert (bounds (x), [3, 1, 2]);
+%! assert (bounds (x, "omitnan"), [3, 1, 2]);
+%! assert (bounds (x, "includenan"), [3, 1, NaN]);
+%! assert (bounds (x, 2), [1; 3; 2]);
+%! assert (bounds (x, 2, "omitnan"), [1; 3; 2]);
+%! assert (bounds (x, 2, "includenan"), [1; NaN; 2]);
+%!test
+%! x = reshape (1:27, [3, 3, 3]);
+%! [s,l] = bounds (x, 3);
+%! assert (s, x(:,:,1));
+%! assert (l, x(:,:,3));
+
+## Test input validation
+%!error bounds ()
+%!error bounds (1, 2, 3, 4)
+%!error <X must be a numeric> bounds (['A'; 'B'])
+%!error <DIM must be an integer> bounds (1, ones (2,2))
+%!error <DIM must be an integer> bounds (1, 1.5)
+%!error <DIM must be .* a valid dimension> bounds (1, 0)
diff --git a/scripts/statistics/iqr.m b/scripts/statistics/iqr.m
--- a/scripts/statistics/iqr.m
+++ b/scripts/statistics/iqr.m
@@ -24,17 +24,17 @@
 ##
 ## If @var{x} is a matrix, do the above for first non-singleton dimension of
 ## @var{x}.
 ##
 ## If the optional argument @var{dim} is given, operate along this dimension.
 ##
 ## As a measure of dispersion, the interquartile range is less affected by
 ## outliers than either @code{range} or @code{std}.
-## @seealso{range, std}
+## @seealso{bounds, range, std}
 ## @end deftypefn
 
 ## Author KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Interquartile range
 
 function y = iqr (x, dim)
 
   if (nargin != 1 && nargin != 2)
diff --git a/scripts/statistics/module.mk b/scripts/statistics/module.mk
--- a/scripts/statistics/module.mk
+++ b/scripts/statistics/module.mk
@@ -1,11 +1,12 @@
 FCN_FILE_DIRS += scripts/statistics
 
 %canon_reldir%_FCN_FILES = \
+  %reldir%/bounds.m \
   %reldir%/center.m \
   %reldir%/corrcoef.m \
   %reldir%/corr.m \
   %reldir%/cov.m \
   %reldir%/discrete_cdf.m \
   %reldir%/discrete_inv.m \
   %reldir%/discrete_pdf.m \
   %reldir%/discrete_rnd.m \
diff --git a/scripts/statistics/range.m b/scripts/statistics/range.m
--- a/scripts/statistics/range.m
+++ b/scripts/statistics/range.m
@@ -26,17 +26,17 @@
 ## If @var{x} is a vector, the range is calculated over the elements of
 ## @var{x}.  If @var{x} is a matrix, the range is calculated over each column
 ## of @var{x}.
 ##
 ## If the optional argument @var{dim} is given, operate along this dimension.
 ##
 ## The range is a quickly computed measure of the dispersion of a data set, but
 ## is less accurate than @code{iqr} if there are outlying data points.
-## @seealso{iqr, std}
+## @seealso{bounds, iqr, std}
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute range
 
 function y = range (x, dim)
 
   if (nargin < 1 || nargin > 2)
diff --git a/scripts/statistics/std.m b/scripts/statistics/std.m
--- a/scripts/statistics/std.m
+++ b/scripts/statistics/std.m
@@ -53,17 +53,17 @@
 ## estimator of the variance [default]
 ##
 ## @item 1:
 ##   normalize with @math{N}, this provides the square root of the second
 ## moment around the mean
 ## @end table
 ##
 ## If the optional argument @var{dim} is given, operate along this dimension.
-## @seealso{var, range, iqr, mean, median}
+## @seealso{var, bounds, range, iqr, mean, median}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = std (x, opt = 0, dim)
 
   if (nargin < 1 || nargin > 3)
     print_usage ();
