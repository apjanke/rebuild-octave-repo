# HG changeset patch
# User Rik <rik@octave.org>
# Date 1544823555 28800
#      Fri Dec 14 13:39:15 2018 -0800
# Node ID 71d618146e4c53b0c0950a28f4f349e1461ad632
# Parent  34cc6edf204148d27e5df11c6cc1d6f091253b0d
corrcoef.m: Clean up function.

* corrcoef.m: Re-order list of calling prototypes in documentation.
Reorder documentation to have all inputs described before outputs.
Check that second numeric argument is the same size as the first.
Update BIST tests.

diff --git a/scripts/statistics/corrcoef.m b/scripts/statistics/corrcoef.m
--- a/scripts/statistics/corrcoef.m
+++ b/scripts/statistics/corrcoef.m
@@ -14,55 +14,52 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{r} =} corrcoef (@var{x})
 ## @deftypefnx {} {@var{r} =} corrcoef (@var{x}, @var{y})
+## @deftypefnx {} {@var{r} =} corrcoef (@dots{}, @var{param}, @var{value}, @dots{})
 ## @deftypefnx {} {[@var{r}, @var{p}] =} corrcoef (@dots{})
 ## @deftypefnx {} {[@var{r}, @var{p}, @var{lci}, @var{hci}] =} corrcoef (@dots{})
-## @deftypefnx {} {[@dots{}] =} corrcoef (@dots{}, @var{param}, @var{value}, @dots{})
 ## Compute a matrix of correlation coefficients.
 ##
 ## @var{x} is an array where each column contains a variable and each row is
 ## an observation.
 ##
 ## If a second input @var{y} (of the same size as @var{x}) is given then
 ## calculate the correlation coefficients between @var{x} and @var{y}.
 ##
-## @var{r} is a matrix of Pearson's product moment correlation coefficients for
-## each pair of variables.
-##
-## @var{p} is a matrix of pair-wise p-values testing for the null hypothesis of
-## a correlation coefficient of zero.
-##
-## @var{lci} and @var{hci} are matrices containing, respectively, the lower and
-## higher bounds of the 95% confidence interval of each correlation
-## coefficient.
-##
-## @var{param}, @var{value} are pairs of optional parameters and values.
-## Valid options are:
+## @var{param}, @var{value} are optional pairs of parameters and values which
+## modify the calculation.  Valid options are:
 ##
 ## @table @asis
 ## @item @qcode{"alpha"}
-## Confidence level used for the definition of the bounds of the confidence
-## interval, @var{lci} and @var{hci}.  Default is 0.05, i.e., 95% confidence
-## interval.
+## Confidence level used for the bounds of the confidence interval, @var{lci}
+## and @var{hci}.  Default is 0.05, i.e., 95% confidence interval.
 ##
 ## @item @qcode{"rows"}
 ## Determine processing of NaN values.  Acceptable values are @qcode{"all"},
 ## @qcode{"complete"}, and @qcode{"pairwise"}.  Default is @qcode{"all"}.
 ## With @qcode{"complete"}, only the rows without NaN values are considered.
 ## With @qcode{"pairwise"}, the selection of NaN-free rows is made for each
 ## pair of variables.
-##
 ## @end table
 ##
+## Output @var{r} is a matrix of Pearson's product moment correlation
+## coefficients for each pair of variables.
+##
+## Output @var{p} is a matrix of pair-wise p-values testing for the null
+## hypothesis of a correlation coefficient of zero.
+##
+## Outputs @var{lci} and @var{hci} are matrices containing, respectively, the
+## lower and higher bounds of the 95% confidence interval of each correlation
+## coefficient.
 ## @seealso{corr, cov}
 ## @end deftypefn
 
 ## FIXME: It would be good to add a definition of the calculation method
 ## for a Pearson product moment correlation to the documentation.
 
 function [r, p, lci, hci] = corrcoef (x, varargin)
 
@@ -70,53 +67,59 @@ function [r, p, lci, hci] = corrcoef (x,
     print_usage ();
   endif
 
   alpha = 0.05;
   rows = "all";
 
   if (nargin > 1)
 
-    ## Check for numeric y argument
+    ## Check for matrix argument y
     if (isnumeric (varargin{1}))
-      x = [x(:), varargin{1}(:)];
+      y = varargin{1};
+      nx = numel (x);
+      ny = numel (y);
+      if (nx > 0 && ny > 0 && nx != ny)
+        error ("corrcoef: X and Y must be the same size");
+      endif
+      x = [x(:), y(:)];
       varargin(1) = [];
     endif
 
     ## Check for Parameter/Value arguments
     for i = 1:2:numel (varargin)
 
       if (! ischar (varargin{i}))
         error ("corrcoef: parameter %d must be a string", i);
       endif
       parameter = varargin{i};
-      if (numel (varargin) < i+1)
+      if (i+1 > numel (varargin))
         error ('corrcoef: parameter "%s" missing value', parameter);
       endif
       value = varargin{i+1};
 
       switch (tolower (parameter))
         case "alpha"
           if (isnumeric (value) && isscalar (value)
               && value >= 0 && value <= 1)
             alpha = value;
           else
-            error ('corrcoef: "alpha" must be a number between 0 and 1');
+            error ('corrcoef: "alpha" must be a scalar between 0 and 1');
           endif
 
         case "rows"
           if (! ischar (value))
             error ('corrcoef: "rows" value must be a string');
           endif
           value = tolower (value);
           switch (value)
             case {"all", "complete", "pairwise"}
               rows = value;
             otherwise
-              error ('corrcoef: "rows" must be "all", "complete", or "pairwise".');
+              error ('corrcoef: "rows" must be "all", "complete", or "pairwise"');
           endswitch
 
         otherwise
           error ('corrcoef: Unknown option "%s"', parameter);
 
       endswitch
     endfor
   endif
@@ -223,51 +226,43 @@ endfunction
 
 
 %!test
 %! x = rand (5);
 %! r = corrcoef (x);
 %! assert (size (r) == [5, 5]);
 
 %!test
-%! x = [1 2 3];
+%! x = [1, 2, 3];
 %! r = corrcoef (x);
 %! assert (size (r) == [1, 1]);
 
-%!test
-%! x = [];
-%! r = corrcoef (x);
-%! assert (isnan (r));
+%!assert (isnan (corrcoef ([])))
+%!assert (isnan (corrcoef (NaN)))
+%!assert (isnan (corrcoef (1)))
 
 %!test
-%! x = [NaN];
-%! r = corrcoef (x);
-%! assert (isnan (r));
-
-%!test
-%! x = [1];
-%! r = corrcoef (x);
-%! assert (isnan (r));
-
-%!test
-%! x = [NaN NaN];
+%! x = [NaN, NaN];
 %! r = corrcoef (x);
 %! assert (size(r) == [1, 1] && isnan (r));
 
 %!test
 %! x = rand (5);
 %! [r, p] = corrcoef (x);
 %! assert (size (r) == [5, 5] && size (p) == [5 5]);
+%! assert (diag (r), ones (5,1), eps);
 
 %!test
 %! x = rand (5,1);
 %! y = rand (5,1);
 %! R1 = corrcoef (x, y);
 %! R2 = corrcoef ([x, y]);
 %! assert (R1, R2);
+%! R3 = corrcoef (x.', y.');
+%! assert (R1, R3);
 
 %!test
 %! x = [1;2;3];
 %! y = [1;2;3];
 %! r = corrcoef (x, y);
 %! assert (r, ones (2,2));
 
 %!test
@@ -277,18 +272,17 @@ endfunction
 %! assert (r, [1, -1; -1, 1]);
 
 %!test
 %! x = [1;2;3];
 %! y = [1;1;1];
 %! r = corrcoef (x, y);
 %! assert (r, [1, NaN; NaN, 1]);
 
-%!test
 %!error corrcoef ()
 %!error <parameter 1 must be a string> corrcoef (1, 2, 3)
 %!error <parameter "alpha" missing value> corrcoef (1, 2, "alpha")
-%!error <"alpha" must be a number> corrcoef (1,2, "alpha", "1")
-%!error <"alpha" must be a number> corrcoef (1,2, "alpha", ones (2,2))
-%!error <"alpha" must be a number between 0 and 1> corrcoef (1,2, "alpha", -1)
-%!error <"alpha" must be a number between 0 and 1> corrcoef (1,2, "alpha", 2)
+%!error <"alpha" must be a scalar> corrcoef (1,2, "alpha", "1")
+%!error <"alpha" must be a scalar> corrcoef (1,2, "alpha", ones (2,2))
+%!error <"alpha" must be a scalar between 0 and 1> corrcoef (1,2, "alpha", -1)
+%!error <"alpha" must be a scalar between 0 and 1> corrcoef (1,2, "alpha", 2)
 %!error <"rows" must be "all"...> corrcoef (1,2, "rows", "foobar")
 %!error <Unknown option "foobar"> corrcoef (1,2, "foobar", 1)
