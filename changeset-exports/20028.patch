# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1428292556 -3600
#      Mon Apr 06 04:55:56 2015 +0100
# Node ID 107130a0490cd3705e70b73c32fb30c6b6af729d
# Parent  70bb0bd4a53fb9fa83f29a47a9d6bc3563bcb831
isa: check parent class of java objects (bug #42702)

* libinterp/octave-value/ov-java.h, libinterp/octave-value/ov-java.cc
(octave_java::is_instance_of): implement method since the one in the
parent octave_class is not able to handle java.
* libinterp/octave-value/ov-class.cc: add tests.

diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -2047,16 +2047,25 @@ belongs to.\n\
 %!assert (isa (uint32 (13), "uint32"))
 %!assert (isa (uint64 (13), "uint64"))
 %!assert (isa ("string", "char"))
 %!assert (isa (true, "logical"))
 %!assert (isa (false, "logical"))
 %!assert (isa ({1, 2}, "cell"))
 %!assert (isa ({1, 2}, {"numeric", "integer", "cell"}), [false false true])
 
+%!testif HAVE_JAVA
+%! ## The first and last assert() are equal on purpose.  The assert() in
+%! ## the middle with an invalid class name will cause the java code to
+%! ## throw exceptions which we then must clear properly (or all other calls
+%! ## will fail).  So we test this too.
+%! assert (isa (javaObject ("java.lang.Double", 10), "java.lang.Number"))
+%! assert (isa (javaObject ("java.lang.Double", 10), "not_a_class"), false)
+%! assert (isa (javaObject ("java.lang.Double", 10), "java.lang.Number"))
+
 %!test
 %! a.b = 1;
 %! assert (isa (a, "struct"));
 */
 
 DEFUN (__parent_classes__, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __parent_classes__ (@var{x})\n\
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -37,16 +37,17 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_WINDOWS_H)
 #include <windows.h>
 #endif
 
 #include <algorithm>
 #include <map>
 #include <iostream>
 #include <fstream>
+#include <string>
 
 #include <clocale>
 
 #include "Cell.h"
 #include "cmd-edit.h"
 #include "defaults.h"
 #include "file-ops.h"
 #include "file-stat.h"
@@ -666,16 +667,35 @@ octave_java::is_java_string (void) const
     {
       jclass_ref cls (current_env, current_env->FindClass ("java/lang/String"));
       return current_env->IsInstanceOf (java_object, cls);
     }
 
   return false;
 }
 
+bool
+octave_java::is_instance_of (const std::string& cls_name) const
+{
+  JNIEnv *current_env = thread_jni_env ();
+
+  std::string cls_cpp = cls_name;
+  std::replace (cls_cpp.begin (), cls_cpp.end (), '.', '/');
+
+  if (current_env && java_object)
+    {
+      jclass_ref cls (current_env, current_env->FindClass (cls_cpp.c_str ()));
+      if (current_env->ExceptionCheck ())
+        current_env->ExceptionClear();
+      else
+        return current_env->IsInstanceOf (java_object, cls);
+    }
+  return false;
+}
+
 static octave_value
 check_exception (JNIEnv* jni_env)
 {
   octave_value retval;
 
   jthrowable_ref ex (jni_env, jni_env->ExceptionOccurred ());
 
   if (ex)
diff --git a/libinterp/octave-value/ov-java.h b/libinterp/octave-value/ov-java.h
--- a/libinterp/octave-value/ov-java.h
+++ b/libinterp/octave-value/ov-java.h
@@ -134,16 +134,18 @@ public:
   jobject to_java (void) const { return java_object; }
   jclass to_class (void) const { return java_class; }
 
   std::string java_class_name (void) const { return java_classname; }
 
   octave_base_value* clone (void) const { return new octave_java (*this); }
   octave_base_value* empty_clone (void) const { return new octave_java (); }
 
+  bool is_instance_of (const std::string&) const;
+
   bool is_defined (void) const { return true; }
 
   bool is_map (void) const { return false; }
 
   bool is_java (void) const { return true; }
 
   string_vector map_keys (void) const;
 
