# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1285131985 -7200
#      Wed Sep 22 07:06:25 2010 +0200
# Node ID 9478b216752e3bd3c6e3a57682ba748fb0cb5b72
# Parent  064aaf82222fbc0c044a17450b83017078b82c9d
simplify more array tests

diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -618,16 +618,68 @@ public:
   map (U (&fcn) (T)) const
   { return map<U, U (&) (T)> (fcn); }
 
   template <class U>
   Array<U>
   map (U (&fcn) (const T&)) const
   { return map<U, U (&) (const T&)> (fcn); }
 
+  // Generic any/all test functionality with arbitrary predicate.
+  template <class F, bool zero>
+  bool test (F fcn) const
+  {
+    octave_idx_type len = length ();
+
+    const T *m = data ();
+
+    octave_idx_type i;
+    for (i = 0; i < len - 3; i += 4)
+      {
+        octave_quit ();
+
+        if (fcn (m[i]) != zero 
+            || fcn (m[i+1]) != zero
+            || fcn (m[i+2]) != zero
+            || fcn (m[i+3]) != zero)
+           return ! zero;
+
+      }
+
+    octave_quit ();
+
+    for (; i < len; i++)
+       if (fcn (m[i]) != zero)
+          return ! zero;
+
+    return zero;
+  }
+
+  // Simpler calls.
+  template <class F>
+  bool test_any (F fcn) const
+  { return test<F, false> (fcn); }
+
+  template <class F>
+  bool test_all (F fcn) const
+  { return test<F, true> (fcn); }
+
+  // Overloads for function references.
+  bool test_any (bool (&fcn) (T)) const
+  { return test<bool (&) (T), false> (fcn); }
+
+  bool test_any (bool (&fcn) (const T&)) const
+  { return test<bool (&) (const T&), false> (fcn); }
+
+  bool test_all (bool (&fcn) (T)) const
+  { return test<bool (&) (T), true> (fcn); }
+
+  bool test_all (bool (&fcn) (const T&)) const
+  { return test<bool (&) (const T&), true> (fcn); }
+
   template <class U> friend class Array;
 
   // Returns true if this->dims () == dv, and if so, replaces this->dimensions
   // by a shallow copy of dv. This is useful for maintaining several arrays with
   // supposedly equal dimensions (e.g. structs in the interpreter).
   bool optimize_dimensions (const dim_vector& dv);
 
 private:
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,33 @@
+2010-09-21  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.h (Array::test, Array::test_all, Array::test_any): New
+	overloaded template methods.
+	* lo-mappers.h (xisinteger, xnegative_sign): New bool mappers.
+	* dNDArray.cc (NDArray::any_element_is_negative, 
+	NDArray::all_integers): Simplify.
+	* fNDArray.cc (FloatNDArray::any_element_is_negative, 
+	FloatNDArray::all_integers): Simplify.
+
+	* lo-utils.cc (xis_int_or_inf_or_nan, xis_one_or_zero,
+	xis_zero, xtoo_large_for_float): New utility functions.
+
+	* dNDArray.cc (NDArray::any_element_is_negative, 
+	NDArray::all_integers, NDArray::all_elements_are_zero,
+	NDArray::all_elements_are_int_or_inf_or_nan, 
+	NDArray::any_element_not_one_or_zero,
+	NDArray::too_large_for_float): Simplify.
+
+	* fNDArray.cc (FloatNDArray::any_element_is_negative, 
+	FloatNDArray::all_integers, FloatNDArray::all_elements_are_zero,
+	FloatNDArray::all_elements_are_int_or_inf_or_nan, 
+	FloatNDArray::any_element_not_one_or_zero,
+	FloatNDArray::too_large_for_float): Simplify.
+
 2010-09-21  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dNDArray.cc (NDArray::any_element_is_negative, 
 	NDArray::any_element_is_nan, 
 	NDArray::any_element_is_inf_or_nan): Simplify.
 	* fNDArray.cc (FloatNDArray::any_element_is_negative, 
 	FloatNDArray::any_element_is_nan, 
 	FloatNDArray::any_element_is_inf_or_nan): Simplify.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2616,90 +2616,42 @@ operator * (const ColumnVector& v, const
   return retval;
 }
 
 // other operations.
 
 bool
 Matrix::any_element_is_negative (bool neg_zero) const
 {
-  octave_idx_type nel = nelem ();
-
-  if (neg_zero)
-    {
-      for (octave_idx_type i = 0; i < nel; i++)
-        if (lo_ieee_signbit (elem (i)))
-          return true;
-    }
-  else
-    return do_mx_check<double> (*this, mx_inline_any_negative);
-
-  return false;
+  return (neg_zero ? test_all (xnegative_sign)
+          : do_mx_check<double> (*this, mx_inline_any_negative));
 }
 
 bool
 Matrix::any_element_is_nan (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      double val = elem (i);
-      if (xisnan (val))
-        return true;
-    }
-
-  return false;
+  return do_mx_check<double> (*this, mx_inline_any_nan);
 }
 
 bool
 Matrix::any_element_is_inf_or_nan (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      double val = elem (i);
-      if (xisinf (val) || xisnan (val))
-        return true;
-    }
-
-  return false;
+  return ! do_mx_check<double> (*this, mx_inline_all_finite);
 }
 
 bool
 Matrix::any_element_not_one_or_zero (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      double val = elem (i);
-      if (val != 0 && val != 1)
-        return true;
-    }
-
-  return false;
+  return ! test_all (xis_one_or_zero);
 }
 
 bool
 Matrix::all_elements_are_int_or_inf_or_nan (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      double val = elem (i);
-      if (xisnan (val) || D_NINT (val) == val)
-        continue;
-      else
-        return false;
-    }
-
-  return true;
+  return test_all (xis_int_or_inf_or_nan);
 }
 
 // Return nonzero if any element of M is not an integer.  Also extract
 // the largest and smallest values and return them in MAX_VAL and MIN_VAL.
 
 bool
 Matrix::all_integers (double& max_val, double& min_val) const
 {
@@ -2718,38 +2670,27 @@ Matrix::all_integers (double& max_val, d
       double val = elem (i);
 
       if (val > max_val)
         max_val = val;
 
       if (val < min_val)
         min_val = val;
 
-      if (D_NINT (val) != val)
+      if (! xisinteger (val))
         return false;
     }
 
   return true;
 }
 
 bool
 Matrix::too_large_for_float (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      double val = elem (i);
-
-      if (! (xisnan (val) || xisinf (val))
-          && fabs (val) > FLT_MAX)
-        return true;
-    }
-
-  return false;
+  return test_all (xtoo_large_for_float);
 }
 
 // FIXME Do these really belong here?  Maybe they should be
 // in a base class?
 
 boolMatrix
 Matrix::all (int dim) const
 {
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -542,28 +542,18 @@ boolNDArray
 NDArray::operator ! (void) const
 {
   return do_mx_unary_op<bool, double> (*this, mx_inline_not);
 }
 
 bool
 NDArray::any_element_is_negative (bool neg_zero) const
 {
-  octave_idx_type nel = nelem ();
-
-  if (neg_zero)
-    {
-      for (octave_idx_type i = 0; i < nel; i++)
-        if (lo_ieee_signbit (elem (i)))
-          return true;
-    }
-  else
-    return do_mx_check<double> (*this, mx_inline_any_negative);
-
-  return false;
+  return (neg_zero ? test_all (xnegative_sign)
+          : do_mx_check<double> (*this, mx_inline_any_negative));
 }
 
 bool
 NDArray::any_element_is_nan (void) const
 {
   return do_mx_check<double> (*this, mx_inline_any_nan);
 }
 
@@ -571,55 +561,29 @@ bool
 NDArray::any_element_is_inf_or_nan (void) const
 {
   return ! do_mx_check<double> (*this, mx_inline_all_finite);
 }
 
 bool
 NDArray::any_element_not_one_or_zero (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      double val = elem (i);
-      if (val != 0 && val != 1)
-        return true;
-    }
-
-  return false;
+  return ! test_all (xis_one_or_zero);
 }
 
 bool
 NDArray::all_elements_are_zero (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    if (elem (i) != 0)
-      return false;
-
-  return true;
+  return test_all (xis_zero);
 }
 
 bool
 NDArray::all_elements_are_int_or_inf_or_nan (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      double val = elem (i);
-      if (xisnan (val) || D_NINT (val) == val)
-        continue;
-      else
-        return false;
-    }
-
-  return true;
+  return test_all (xis_int_or_inf_or_nan);
 }
 
 // Return nonzero if any element of M is not an integer.  Also extract
 // the largest and smallest values and return them in MAX_VAL and MIN_VAL.
 
 bool
 NDArray::all_integers (double& max_val, double& min_val) const
 {
@@ -638,54 +602,33 @@ NDArray::all_integers (double& max_val, 
       double val = elem (i);
 
       if (val > max_val)
         max_val = val;
 
       if (val < min_val)
         min_val = val;
 
-      if (D_NINT (val) != val)
+      if (! xisinteger (val))
         return false;
     }
 
   return true;
 }
 
 bool
 NDArray::all_integers (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      double val = elem (i);
-
-      if (D_NINT (val) != val)
-        return false;
-    }
-
-  return true;
+  return test_all (xisinteger);
 }
 
 bool
 NDArray::too_large_for_float (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      double val = elem (i);
-
-      if (! (xisnan (val) || xisinf (val))
-          && fabs (val) > FLT_MAX)
-        return true;
-    }
-
-  return false;
+  return test_all (xtoo_large_for_float);
 }
 
 // FIXME -- this is not quite the right thing.
 
 boolNDArray
 NDArray::all (int dim) const
 {
   return do_mx_red_op<bool, double> (*this, dim, mx_inline_all);
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -2615,28 +2615,18 @@ operator * (const FloatColumnVector& v, 
   return retval;
 }
 
 // other operations.
 
 bool
 FloatMatrix::any_element_is_negative (bool neg_zero) const
 {
-  octave_idx_type nel = nelem ();
-
-  if (neg_zero)
-    {
-      for (octave_idx_type i = 0; i < nel; i++)
-        if (lo_ieee_signbit (elem (i)))
-          return true;
-    }
-  else
-    return do_mx_check<float> (*this, mx_inline_any_negative);
-
-  return false;
+  return (neg_zero ? test_all (xnegative_sign)
+          : do_mx_check<float> (*this, mx_inline_any_negative));
 }
 
 bool
 FloatMatrix::any_element_is_nan (void) const
 {
   return do_mx_check<float> (*this, mx_inline_any_nan);
 }
 
@@ -2644,43 +2634,23 @@ bool
 FloatMatrix::any_element_is_inf_or_nan (void) const
 {
   return ! do_mx_check<float> (*this, mx_inline_all_finite);
 }
 
 bool
 FloatMatrix::any_element_not_one_or_zero (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      float val = elem (i);
-      if (val != 0 && val != 1)
-        return true;
-    }
-
-  return false;
+  return ! test_all (xis_one_or_zero);
 }
 
 bool
 FloatMatrix::all_elements_are_int_or_inf_or_nan (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      float val = elem (i);
-      if (xisnan (val) || D_NINT (val) == val)
-        continue;
-      else
-        return false;
-    }
-
-  return true;
+  return test_all (xis_int_or_inf_or_nan);
 }
 
 // Return nonzero if any element of M is not an integer.  Also extract
 // the largest and smallest values and return them in MAX_VAL and MIN_VAL.
 
 bool
 FloatMatrix::all_integers (float& max_val, float& min_val) const
 {
@@ -2699,37 +2669,26 @@ FloatMatrix::all_integers (float& max_va
       float val = elem (i);
 
       if (val > max_val)
         max_val = val;
 
       if (val < min_val)
         min_val = val;
 
-      if (D_NINT (val) != val)
+      if (! xisinteger (val))
         return false;
     }
 
   return true;
 }
 
 bool
 FloatMatrix::too_large_for_float (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      float val = elem (i);
-
-      if (! (xisnan (val) || xisinf (val))
-          && fabs (val) > FLT_MAX)
-        return true;
-    }
-
   return false;
 }
 
 // FIXME Do these really belong here?  Maybe they should be
 // in a base class?
 
 boolMatrix
 FloatMatrix::all (int dim) const
diff --git a/liboctave/fNDArray.cc b/liboctave/fNDArray.cc
--- a/liboctave/fNDArray.cc
+++ b/liboctave/fNDArray.cc
@@ -500,28 +500,18 @@ boolNDArray
 FloatNDArray::operator ! (void) const
 {
   return do_mx_unary_op<bool, float> (*this, mx_inline_not);
 }
 
 bool
 FloatNDArray::any_element_is_negative (bool neg_zero) const
 {
-  octave_idx_type nel = nelem ();
-
-  if (neg_zero)
-    {
-      for (octave_idx_type i = 0; i < nel; i++)
-        if (lo_ieee_signbit (elem (i)))
-          return true;
-    }
-  else
-    return do_mx_check<float> (*this, mx_inline_any_negative);
-
-  return false;
+  return (neg_zero ? test_all (xnegative_sign)
+          : do_mx_check<float> (*this, mx_inline_any_negative));
 }
 
 bool
 FloatNDArray::any_element_is_nan (void) const
 {
   return do_mx_check<float> (*this, mx_inline_any_nan);
 }
 
@@ -529,55 +519,29 @@ bool
 FloatNDArray::any_element_is_inf_or_nan (void) const
 {
   return ! do_mx_check<float> (*this, mx_inline_all_finite);
 }
 
 bool
 FloatNDArray::any_element_not_one_or_zero (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      float val = elem (i);
-      if (val != 0 && val != 1)
-        return true;
-    }
-
-  return false;
+  return ! test_all (xis_one_or_zero);
 }
 
 bool
 FloatNDArray::all_elements_are_zero (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    if (elem (i) != 0)
-      return false;
-
-  return true;
+  return test_all (xis_zero);
 }
 
 bool
 FloatNDArray::all_elements_are_int_or_inf_or_nan (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      float val = elem (i);
-      if (xisnan (val) || D_NINT (val) == val)
-        continue;
-      else
-        return false;
-    }
-
-  return true;
+  return test_all (xis_int_or_inf_or_nan);
 }
 
 // Return nonzero if any element of M is not an integer.  Also extract
 // the largest and smallest values and return them in MAX_VAL and MIN_VAL.
 
 bool
 FloatNDArray::all_integers (float& max_val, float& min_val) const
 {
@@ -596,53 +560,32 @@ FloatNDArray::all_integers (float& max_v
       float val = elem (i);
 
       if (val > max_val)
         max_val = val;
 
       if (val < min_val)
         min_val = val;
 
-      if (D_NINT (val) != val)
+      if (! xisinteger (val))
         return false;
     }
 
   return true;
 }
 
 bool
 FloatNDArray::all_integers (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      double val = elem (i);
-
-      if (D_NINT (val) != val)
-        return false;
-    }
-
-  return true;
+  return test_all (xisinteger);
 }
 
 bool
 FloatNDArray::too_large_for_float (void) const
 {
-  octave_idx_type nel = nelem ();
-
-  for (octave_idx_type i = 0; i < nel; i++)
-    {
-      float val = elem (i);
-
-      if (! (xisnan (val) || xisinf (val))
-          && fabs (val) > FLT_MAX)
-        return true;
-    }
-
   return false;
 }
 
 // FIXME -- this is not quite the right thing.
 
 boolNDArray
 FloatNDArray::all (int dim) const
 {
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -697,8 +697,14 @@ Complex rc_sqrt (double x)
 {
   return x < 0.0 ? Complex (0.0, sqrt (-x)) : Complex (sqrt (x));
 }
 
 FloatComplex rc_sqrt (float x)
 {
   return x < 0.0f ? FloatComplex (0.0f, sqrtf (-x)) : FloatComplex (sqrtf (x));
 }
+
+bool xnegative_sign (double x)
+{ return __lo_ieee_signbit (x); }
+
+bool xnegative_sign (float x)
+{ return __lo_ieee_float_signbit (x); }
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -206,9 +206,21 @@ extern OCTAVE_API Complex rc_log (double
 extern OCTAVE_API FloatComplex rc_log (float);
 extern OCTAVE_API Complex rc_log2 (double);
 extern OCTAVE_API FloatComplex rc_log2 (float);
 extern OCTAVE_API Complex rc_log10 (double);
 extern OCTAVE_API FloatComplex rc_log10 (float);
 extern OCTAVE_API Complex rc_sqrt (double);
 extern OCTAVE_API FloatComplex rc_sqrt (float);
 
+// Some useful tests, that are commonly repeated.
+// Test for a finite integer.
+inline bool xisinteger (double x)
+{ return xfinite (x) && x == xround (x); }
+inline bool xisinteger (float x)
+{ return xfinite (x) && x == xround (x); }
+
+// Test for negative sign. 
+extern OCTAVE_API bool xnegative_sign (double x);
+extern OCTAVE_API bool xnegative_sign (float x);
+
+
 #endif
diff --git a/liboctave/lo-utils.cc b/liboctave/lo-utils.cc
--- a/liboctave/lo-utils.cc
+++ b/liboctave/lo-utils.cc
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cctype>
 #include <cstdlib>
 #include <cstdio>
 #include <cstring>
+#include <cfloat>
 
 #include <limits>
 #include <string>
 
 #include <sys/types.h>
 #include <unistd.h>
 
 #include "quit.h"
@@ -106,16 +107,37 @@ float
 F_NINT (float x)
 {
   if (xisinf (x) || xisnan (x))
     return x;
   else
     return floor (x + 0.5);
 }
 
+bool xis_int_or_inf_or_nan (double x)
+{ return ! (xisnan (x) || D_NINT (x) == x); }
+
+bool xis_one_or_zero (double x)
+{ return x == 0 || x == 1; }
+
+bool xis_zero (double x)
+{ return x == 0; }
+
+bool xtoo_large_for_float (double x)
+{ return (! (xisnan (x) || xisinf (x)) && fabs (x) > FLT_MAX); }
+
+bool xis_int_or_inf_or_nan (float x)
+{ return ! (xisnan (x) || D_NINT (x) == x); }
+
+bool xis_one_or_zero (float x)
+{ return x == 0 || x == 1; }
+
+bool xis_zero (float x)
+{ return x == 0; }
+
 // Save a string.
 
 char *
 strsave (const char *s)
 {
   if (! s)
     return 0;
 
diff --git a/liboctave/lo-utils.h b/liboctave/lo-utils.h
--- a/liboctave/lo-utils.h
+++ b/liboctave/lo-utils.h
@@ -34,16 +34,26 @@ along with Octave; see the file COPYING.
 
 extern OCTAVE_API octave_idx_type NINTbig (double x);
 extern OCTAVE_API octave_idx_type NINTbig (float x);
 extern OCTAVE_API int NINT (double x);
 extern OCTAVE_API int NINT (float x);
 extern OCTAVE_API double D_NINT (double x);
 extern OCTAVE_API float F_NINT (float x);
 
+extern OCTAVE_API bool xis_int_or_inf_or_nan (double x);
+extern OCTAVE_API bool xis_one_or_zero (double x);
+extern OCTAVE_API bool xis_zero (double x);
+extern OCTAVE_API bool xtoo_large_for_float (double x);
+
+extern OCTAVE_API bool xis_int_or_inf_or_nan (float x);
+extern OCTAVE_API bool xis_one_or_zero (float x);
+extern OCTAVE_API bool xis_zero (float x);
+extern OCTAVE_API bool xtoo_large_for_float (float x);
+
 extern OCTAVE_API char *strsave (const char *);
 
 extern OCTAVE_API void
 octave_putenv (const std::string&, const std::string&);
 
 extern OCTAVE_API std::string octave_fgets (std::FILE *);
 extern OCTAVE_API std::string octave_fgetl (std::FILE *);
 
