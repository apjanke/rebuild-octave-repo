# HG changeset patch
# User Rik <rik@octave.org>
# Date 1408662309 25200
#      Thu Aug 21 16:05:09 2014 -0700
# Node ID 0976f9fccbbda7f165d472fc9ebdc5f358ac2362
# Parent  0850b521261940bb6a207e5a3bf72a1765bf9749
isprime.m: Verify that input is a real number (bug #43041)

* isprime.m: Use isreal() to validate input.  Put input checking first in
function.  Add input validation tests.

diff --git a/scripts/specfun/isprime.m b/scripts/specfun/isprime.m
--- a/scripts/specfun/isprime.m
+++ b/scripts/specfun/isprime.m
@@ -17,73 +17,76 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isprime (@var{x})
 ## Return a logical array which is true where the elements of @var{x} are
 ## prime numbers and false where they are not.
 ##
-## If the maximum value in @var{x} is very large, then you should be using
-## special purpose factorization code.
+## @code{isprime} is appropriate if the maximum value in @var{x} is not too
+## large (< 1e15).  For larger values special purpose factorization code
+## should be used.
 ##
 ## @example
 ## @group
 ## isprime (1:6)
 ##     @result{} [0, 1, 1, 0, 1, 0]
 ## @end group
 ## @end example
 ## @seealso{primes, factor, gcd, lcm}
 ## @end deftypefn
 
 function t = isprime (x)
 
-  if (nargin == 1)
-    if (any ((x != floor (x) | x < 0)(:)))
-      error ("isprime: needs positive integers");
+  if (nargin != 1)
+    print_usage ();
+  elseif (! isreal (x) || any ((x < 0 | x != fix (x))(:)))
+    error ("isprime: X must be a non-negative integer");
+  endif
+
+  maxn = max (x(:));
+  ## generate prime table of suitable length.
+  maxp = min (maxn, max (sqrt (maxn), 1e7)); # FIXME: threshold not optimized.
+  pr = primes (maxp);
+  ## quick search for table matches.
+  t = lookup (pr, x, "b");
+  ## take the rest.
+  m = x(x > maxp);
+  if (! isempty (m))
+    ## there are still possible primes. filter them out by division.
+    if (maxn <= intmax ("uint32"))
+      m = uint32 (m);
+    elseif (maxn <= intmax ("uint64"))
+      m = uint64 (m);
+    else
+      warning ("isprime: X contains integers too large to be tested");
     endif
-    maxn = max (x(:));
-    ## generate prime table of suitable length.
-    maxp = min (maxn, max (sqrt (maxn), 1e7)); # FIXME: threshold not optimized.
-    pr = primes (maxp);
-    ## quick search for table matches.
-    t = lookup (pr, x, "b");
-    ## take the rest.
-    m = x(x > maxp);
+    pr = cast (pr(pr <= sqrt (maxn)), class (m));
+    for p = pr
+      m = m(rem (m, p) != 0);
+      if (length (m) < length (pr) / 10)
+        break;
+      endif
+    endfor
+    pr = pr(pr > p);
+    mm = arrayfun (@(x) all (rem (x, pr)), m);
+    m = m(mm);
     if (! isempty (m))
-      ## there are still possible primes. filter them out by division.
-      if (maxn <= intmax ("uint32"))
-        m = uint32 (m);
-      elseif (maxn <= intmax ("uint64"))
-        m = uint64 (m);
-      else
-        warning ("isprime: too large integers being tested");
-      endif
-      pr = cast (pr(pr <= sqrt (maxn)), class (m));
-      for p = pr
-        m = m(rem (m, p) != 0);
-        if (length (m) < length (pr) / 10)
-          break;
-        endif
-      endfor
-      pr = pr(pr > p);
-      mm = arrayfun (@(x) all (rem (x, pr)), m);
-      m = m(mm);
-      if (! isempty (m))
-        m = cast (sort (m), class (x));
-        t |= lookup (m, x, "b");
-      endif
+      m = cast (sort (m), class (x));
+      t |= lookup (m, x, "b");
     endif
-
-  else
-    print_usage ();
   endif
 
 endfunction
 
 
 %!assert (isprime (3), true)
 %!assert (isprime (4), false)
 %!assert (isprime (magic (3)), logical ([0, 0, 0; 1, 1, 1; 0, 0, 1]))
 
+%% Test input validation
 %!error isprime ()
 %!error isprime (1, 2)
+%!error <X must be a non-negative integer> isprime (i)
+%!error <X must be a non-negative integer> isprime ([1 2; -3 4])
+%!error <X must be a non-negative integer> isprime ([1 2; 3.1 4])
 
