# HG changeset patch
# User Rik <rik@octave.org>
# Date 1544052599 28800
#      Wed Dec 05 15:29:59 2018 -0800
# Node ID 0a145a1600e340557a97ed002146bdb68d7dc900
# Parent  a7be718a9dd358dc945cd29aa72f7c4e22b7ffff
Use -tight option by default when printing EPS files (bug #53535).

* NEWS: Announce change to using a tight bounding box by default.

* print.m: Change documentation to indicate that "-tight" is now the default.

* __gnuplot_print__.m: Rename instances of "tight_flag" to "tight".

* __print_parse_opts__.m: Rename "tight_flag" to "tight".  Remove variable
"loose" and use "! tight" as needed.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -118,16 +118,22 @@ Summary of important user-visible change
     option will expand the plot to take up as much room as possible on
     the page without distorting the original aspect ratio of the plot.
 
  ** Printing using the -dtiff output device will now create compressed
     images using LZW compression.  This change was made for Matlab
     compatibility.  To produce uncompressed images use the -dtiffn
     device.
 
+ ** Printing to EPS files now uses a tight bounding box ("-tight"
+    argument to print) by default.  This makes more sense for EPS
+    files which are normally embedded within other documents, and is
+    Matlab compatible.  If necessary use the "-loose" option to
+    reproduce figures as they appeared in previous versions of Octave. 
+
  ** It is now possible to use files and folders containing Unicode
     characters in Windows.
 
  ** The FFTW library is now required to perform FFT calculations.
     The FFTPACK sources have been removed from Octave.
 
  ** The OSMesa library is no longer used.  To print invisible figures
     when using OpenGL graphics, the Qt QOFFSCREENSURFACE feature must be
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -183,19 +183,19 @@
 ## (unusually (SVG))@.  For all vector formats, including PDF, PS, and EPS, the
 ## plot size is specified in points.  This option is equivalent to changing the
 ## width and height of the output by setting the figure property
 ## @code{paperposition(3:4)}.  When using the command form of the print
 ## function you must quote the @var{xsize},@var{ysize} option to prevent the
 ## Octave interpreter from recognizing the embedded comma (',').  For example,
 ## by writing @w{"-S640,480"}.
 ##
-## @item  -loose
-## @itemx -tight
-##   Force a tight or loose bounding box for EPS files.  The default is loose.
+## @item  -tight
+## @itemx -loose
+##   Force a tight or loose bounding box for EPS files.  The default is tight.
 ##
 ## @item -@var{preview}
 ##   Add a preview to EPS files.  Supported formats are:
 ##
 ##   @table @code
 ##   @item -interchange
 ##     Provide an interchange preview.
 ##
@@ -791,27 +791,27 @@ function cmd = epstool (opts, filein, fi
     else
       cleanup = [cleanup, sprintf("; rm %s ", fileout)];
     endif
   else
     pipeout = false;
     fileout = ["'" strtrim(fileout) "'"];
   endif
 
-  if (! isempty (opts.preview) && opts.tight_flag)
+  if (! isempty (opts.preview) && opts.tight)
     warning ("octave:print:previewandtight",
              "print.m: eps preview may not be combined with -tight");
   endif
-  if (! isempty (opts.preview) || opts.tight_flag)
+  if (! isempty (opts.preview) || opts.tight)
 
     if (isempty (opts.epstool_binary))
       error ("print:noepstool", "print.m: 'epstool' is required for specified output format, but binary is not available in PATH");
     endif
 
-    if (opts.tight_flag)
+    if (opts.tight)
       cmd = "--copy --bbox";
     elseif (! isempty (opts.preview))
       switch (opts.preview)
         case "tiff"
           cmd = sprintf ("--add-%s-preview --device tiffg3", opts.preview);
         case {"tiff6u", "tiff6p", "metafile"}
           cmd = sprintf ("--add-%s-preview --device bmpgray", opts.preview);
         case {"tiff4", "interchange"}
diff --git a/scripts/plot/util/private/__gnuplot_print__.m b/scripts/plot/util/private/__gnuplot_print__.m
--- a/scripts/plot/util/private/__gnuplot_print__.m
+++ b/scripts/plot/util/private/__gnuplot_print__.m
@@ -58,17 +58,17 @@ function opts = __gnuplot_print__ (opts)
 
   pipeline = "";
 
   switch (lower (opts.devopt))
     case {"eps", "eps2", "epsc", "epsc2"}
       if (any (strcmp (opts.devopt, {"eps", "epsc"})))
         gp_opts = [gp_opts " level1"];
       endif
-      if (opts.tight_flag || ! isempty (opts.preview))
+      if (opts.tight || ! isempty (opts.preview))
         tmp_file = [tempname() ".eps"];
         eps_drawnow (opts, tmp_file, gp_opts);
         if (dos_shell)
           cleanup = [" & del " strrep(tmp_file, '/', '\')];
         else
           cleanup = [" ; rm " tmp_file];
         endif
         pipeline = {sprintf("%s %s",
diff --git a/scripts/plot/util/private/__print_parse_opts__.m b/scripts/plot/util/private/__print_parse_opts__.m
--- a/scripts/plot/util/private/__print_parse_opts__.m
+++ b/scripts/plot/util/private/__print_parse_opts__.m
@@ -46,31 +46,30 @@ function arg_st = __print_parse_opts__ (
   arg_st.ghostscript.level = 2;
   arg_st.ghostscript.output = "";
   arg_st.ghostscript.papersize = "letter";
   arg_st.ghostscript.pageoffset = [];
   arg_st.ghostscript.resolution = 150;
   arg_st.ghostscript.antialiasing = false;
   arg_st.ghostscript.antialiasing_textalphabits = 4;
   arg_st.ghostscript.antialiasing_graphicsalphabits = 1;
-  arg_st.loose = false;
   arg_st.lpr_binary = __quote_path__ (__find_binary__ ("lpr"));
   arg_st.name = "";
   arg_st.orientation = "";
   arg_st.pstoedit_binary = __quote_path__ (__find_binary__ ("pstoedit"));
   arg_st.preview = "";
   arg_st.printer = "";
   arg_st.renderer = "auto";
   arg_st.resize_flag = "";
   arg_st.rgb_output = false;
   arg_st.send_to_printer = false;
   arg_st.special_flag = "textnormal";
   arg_st.svgconvert = false;
   arg_st.svgconvert_binary = __quote_path__ (__svgconv_binary__ ());
-  arg_st.tight_flag = false;
+  arg_st.tight = true;
   arg_st.use_color = 0; # 0=default, -1=mono, +1=color
 
   if (isunix ())
     arg_st.lpr_options = "-l";
   elseif (ispc ())
     arg_st.lpr_options = "-o l";
   else
     arg_st.lpr_options = "";
@@ -100,21 +99,19 @@ function arg_st = __print_parse_opts__ (
       elseif (strcmp (arg, "-RGBImage"))
         arg_st.rgb_output = true;
         arg_st.renderer = "opengl";
       elseif (strncmp (arg, "-portrait", length (arg)))
         arg_st.orientation = "portrait";
       elseif (strncmp (arg, "-landscape", length (arg)))
         arg_st.orientation = "landscape";
       elseif (strcmp (arg, "-loose"))
-        arg_st.loose = true;
-        arg_st.tight_flag = false;
+        arg_st.tight = false;
       elseif (strcmp (arg, "-tight"))
-        arg_st.loose = false;
-        arg_st.tight_flag = true;
+        arg_st.tight = true;
       elseif (strcmp (arg, "-svgconvert"))
         arg_st.svgconvert = true;
       elseif (strcmp (arg, "-textspecial"))
         arg_st.special_flag = "textspecial";
       elseif (strcmp (arg, "-fillpage"))
         arg_st.resize_flag = "fillpage";
       elseif (strcmp (arg, "-bestfit"))
         arg_st.resize_flag = "bestfit";
@@ -367,28 +364,28 @@ function arg_st = __print_parse_opts__ (
        && ! arg_st.formatted_for_printing)
       || any (strcmp (arg_st.devopt, {"pswrite", "ps2write", "pdfwrite"})))
     unknown_device = false;
     ## Use ghostscript for graphic formats
     arg_st.ghostscript.device = arg_st.devopt;
     arg_st.ghostscript.output = arg_st.name;
     arg_st.ghostscript.antialiasing = true;
     if (arg_st.formatted_for_printing)
-      arg_st.ghostscript.epscrop = ! arg_st.loose;
+      arg_st.ghostscript.epscrop = arg_st.tight;
     else
       ## pstoedit throws errors if the EPS file isn't cropped
       arg_st.ghostscript.epscrop = true;
     endif
   elseif (all (! strcmp (arg_st.devopt, dev_list)))
     ## Assume we are formatting output for a printer
     arg_st.formatted_for_printing = true;
     arg_st.ghostscript.device = arg_st.devopt;
     arg_st.ghostscript.output = arg_st.name;
     arg_st.ghostscript.antialiasing = false;
-    arg_st.ghostscript.epscrop = ! arg_st.loose;
+    arg_st.ghostscript.epscrop = arg_st.tight;
   endif
 
   if (unknown_device)
     error ("print: unknown device %s", arg_st.devopt);
   endif
 
   if (arg_st.resize_flag)
     if (! (arg_st.send_to_printer || arg_st.formatted_for_printing
@@ -502,17 +499,17 @@ endfunction
 %! assert (opts.send_to_printer, true);
 %! assert (opts.use_color, 1);
 %! assert (opts.append_to_file, false);
 %! assert (opts.ghostscript.device, "pswrite");
 %! assert (opts.ghostscript.epscrop, false);
 
 #%!test
 %! opts = __print_parse_opts__ ("-deps", "-tight");
-%! assert (opts.tight_flag, true);
+%! assert (opts.tight, true);
 %! assert (opts.send_to_printer, true);
 %! assert (opts.use_color, -1);
 %! assert (opts.ghostscript.device, "");
 
 #%!test
 %! opts = __print_parse_opts__ ("-djpg", "foobar", "-mono", "-loose");
 %! assert (opts.devopt, "jpeg");
 %! assert (opts.name, "foobar.jpg");
