# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1519772478 28800
#      Tue Feb 27 15:01:18 2018 -0800
# Node ID 4a8517b5eac30137a6eb88e51f97879016861736
# Parent  daf61c7dfcae34d6d6c70ee139ea92ceb1f9094b
# Parent  9a326bc6d3152d0841c2c959810e96b9429d8ce3
maint: merge stable to default

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -951,16 +951,52 @@ octave_classdef::undef_subsasgn (const s
       return subsasgn (type, idx, rhs);
     }
   else
     return octave_base_value::undef_subsasgn (type, idx, rhs);
 
   return octave_value ();
 }
 
+octave_idx_type
+octave_classdef::numel (const octave_value_list& idx)
+{
+  octave_idx_type retval = -1;
+
+  cdef_class cls = object.get_class ();
+
+  if (! in_class_method (cls) && ! called_from_builtin ())
+    {
+      cdef_method meth = cls.find_method ("numel");
+
+      if (meth.ok ())
+        {
+          octave_value_list args (idx.length () + 1, octave_value ());
+
+          count++;
+          args(0) = octave_value (this);
+
+          for (octave_idx_type i = 0; i < idx.length (); i++)
+            args(i+1) = idx(i);
+
+          octave_value_list lv = meth.execute (args, 1, true, "numel");
+          if (lv.length () != 1 || ! lv(0).is_scalar_type ())
+            error ("@%s/numel: invalid return value", cls.get_name ().c_str ());
+
+          retval = lv(0).idx_type_value (true);
+
+          return retval;
+        }
+    }
+
+  retval = octave_base_value::numel (idx);
+
+  return retval;
+}
+
 void
 octave_classdef::print (std::ostream& os, bool)
 {
   print_raw (os);
 }
 
 void
 octave_classdef::print_raw (std::ostream& os, bool) const
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -1517,16 +1517,18 @@ public:
                          const std::list<octave_value_list>& idx,
                          const octave_value& rhs);
 
   octave_value
   undef_subsasgn (const std::string& type,
                   const std::list<octave_value_list>& idx,
                   const octave_value& rhs);
 
+  octave_idx_type numel (const octave_value_list&);
+
   string_vector map_keys (void) const { return object.map_keys (); }
 
   octave_map map_value (void) const { return object.map_value (); }
 
   dim_vector dims (void) const { return object.dims (); }
 
   void set_property (octave_idx_type idx, const std::string& name,
                      const octave_value& pval)
diff --git a/scripts/help/__gripe_missing_component__.m b/scripts/help/__gripe_missing_component__.m
--- a/scripts/help/__gripe_missing_component__.m
+++ b/scripts/help/__gripe_missing_component__.m
@@ -50,17 +50,19 @@ function __gripe_missing_component__ (ca
     endswitch
   endif
 
   error ("%s: %s\n", caller, msg);
 
 endfunction
 
 
-## Some trivial testing
-%!error <abc: unable to find the Octave info manual> __gripe_missing_component__ ("abc", "info-file")
-%!error <abc: unable to find the octave executable> __gripe_missing_component__ ("abc", "octave")
-%!error <abc: unable to find the octave-config command> __gripe_missing_component__ ("abc", "octave-config")
-%!error <abc: unable to find required Octave component "xyz"> __gripe_missing_component__ ("abc", "xyz")
+## WARNING: Tests cannot rely on the exact error strings shown above because we
+##          specifically allow these messages to be overridden by
+##          missing_component_hook.  The prefix is all we can be sure of.
+%!error <abc: .*> __gripe_missing_component__ ("abc", "info-file")
+%!error <abc: .*> __gripe_missing_component__ ("abc", "octave")
+%!error <abc: .*> __gripe_missing_component__ ("abc", "octave-config")
+%!error <abc: .*> __gripe_missing_component__ ("abc", "xyz")
 
 %!error __gripe_missing_component__ ()
 %!error __gripe_missing_component__ ("fcn")
 %!error __gripe_missing_component__ ("fcn", 1 , 2)
diff --git a/test/classdef/classdef.tst b/test/classdef/classdef.tst
--- a/test/classdef/classdef.tst
+++ b/test/classdef/classdef.tst
@@ -71,16 +71,24 @@
 %! obj = foo_method_changes_property_size (3);
 %! obj = obj.move_element_to_end (2);
 %! assert (obj.element, [1 3 2]);
 
 %!error <parse error> plist_t1
 %!assert (class (plist_t2), "plist_t2")
 %!assert (class (plist_t3), "plist_t3")
 
+%!test
+%! obj = struct_wrapper ();
+%! obj{'a'} = 1;
+%! assert (obj{'a'}, 1);
+%! obj{'bc'} = 2;
+%! assert (obj{'bc'}, 2);
+%! assert (obj{'a', 'bc'}, [ 1 2 ]);
+
 %% Test for meta.class.fromName
 %!test <*51935>
 %! meta.class.fromName ("inputParser");
 
 ## Do not change this to "containers.Map()".  This test is intended to
 ## ensure that calling a function in a +package directory will work
 ## properly.
 %!test <*51715>
diff --git a/test/classdef/module.mk b/test/classdef/module.mk
--- a/test/classdef/module.mk
+++ b/test/classdef/module.mk
@@ -1,10 +1,11 @@
 classdef_TEST_FILES = \
   %reldir%/classdef.tst \
   %reldir%/foo_method_changes_property_size.m \
   %reldir%/foo_static_method_constant_property.m \
   %reldir%/foo_value_class.m \
   %reldir%/plist_t1.m \
   %reldir%/plist_t2.m \
-  %reldir%/plist_t3.m
+  %reldir%/plist_t3.m \
+  %reldir%/struct_wrapper.m
 
 TEST_FILES += $(classdef_TEST_FILES)
diff --git a/test/classdef/struct_wrapper.m b/test/classdef/struct_wrapper.m
new file mode 100644
--- /dev/null
+++ b/test/classdef/struct_wrapper.m
@@ -0,0 +1,40 @@
+classdef struct_wrapper
+  properties
+    s;
+  end
+  methods
+    function o = assigner ()
+      if (nargin == 0)
+        o.s = struct ();
+      else
+        error ('struct_wrapper:SyntaxError', ...
+               'struct_wrapper: Invalid syntax');
+      end
+    end
+    function n = numel (o, varargin)
+      n = 1;
+    end
+    function varargout = subsref (o, p)
+      if (isequal (p(1).type, '{}'))
+        r = [];
+        for i = 1:numel (p(1).subs)
+          r = [r, getfield(o.s, p(1).subs{i})];
+        end
+        varargout = {r};
+      else
+        error ('struct_wrapper:SyntaxError', ...
+               'struct_wrapper: Invalid syntax');
+      end
+    end
+    function o = subsasgn (o, p, varargin)
+      if (isequal (p(1).type, '{}'))
+        for i = 1:numel (p(1).subs)
+          o.s = setfield (o.s, p(1).subs{i}, varargin{1}(i));
+        end
+      else
+        error ('struct_wrapper:SyntaxError', ...
+               'struct_wrapper: Invalid syntax');
+      end
+    end
+  end
+end
