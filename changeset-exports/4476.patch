# HG changeset patch
# User jwe
# Date 1059585441 0
#      Wed Jul 30 17:17:21 2003 +0000
# Node ID b7360f8eb0355e8b1c064d1b9e29e97e0e828a5a
# Parent  15c739d0c13ca15028e0785439e472a94a9f19ab
[project @ 2003-07-30 17:17:21 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2003-07-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ck-oct-fcns.m: Delete.
+
 2003-07-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Warn if --enable-dl but not --enable-shared.
 
 2003-07-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* emacs/octave-mod.el (octave-variables): Delete
 	default_return_value and define_all_return_values from the list.
diff --git a/doc/faq/Octave-FAQ.texi b/doc/faq/Octave-FAQ.texi
--- a/doc/faq/Octave-FAQ.texi
+++ b/doc/faq/Octave-FAQ.texi
@@ -720,17 +720,16 @@ variables may have been introduced since
   PS2                           = ""
   beep_on_error                 = true
   crash_dumps_octave_core       = false
   default_save_format           = "mat-binary"
   fixed_point_format            = true
   page_screen_output            = false
   print_empty_dimensions        = false
   warn_function_name_clash      = false
-  whitespace_in_literal_matrix  = "traditional"
 @end group
 @end example
 
 Some other known differences are:
 
 @itemize @bullet
 @item
 The Octave plotting functions are mostly compatible with the ones from
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -160,17 +160,16 @@ values for compatibility with @sc{Matlab
   PS2                           = ""
   beep_on_error                 = true
   crash_dumps_octave_core       = false
   default_save_format           = "mat-binary"
   fixed_point_format            = true
   page_screen_output            = false
   print_empty_dimensions        = false
   warn_function_name_clash      = false
-  whitespace_in_literal_matrix  = "traditional"
 @end group
 @end example
 
 @item --verbose
 @itemx -V
 @cindex @code{--verbose}
 @cindex @code{-V}
 Turn on verbose output.
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -147,24 +147,17 @@ error: number of rows must match near li
 
 @noindent
 (assuming that this expression was entered as the first thing on line
 13, of course).
 
 Inside the square brackets that delimit a matrix expression, Octave
 looks at the surrounding context to determine whether spaces and newline
 characters should be converted into element and row separators, or
-simply ignored, so commands like
-
-@example
-[ linspace (1, 2) ]
-@end example
-
-@noindent
-and
+simply ignored, so an expression like
 
 @example
 @group
 a = [ 1 2
       3 4 ]
 @end group
 @end example
 
@@ -181,54 +174,72 @@ the @samp{-} is treated as a binary oper
 scalar 0, but in the expression
 
 @example
 [ 1 -1 ]
 @end example
 
 @noindent
 the @samp{-} is treated as a unary operator and the result is the
-vector @code{[ 1, -1 ]}.
+vector @code{[ 1, -1 ]}.  Similarly, the expression
+
+@example
+[ sin (pi) ]
+@end example
+
+@noindent
+will be parsed as
+
+@example
+[ sin, (pi) ]
+@end example
 
-Given @code{a = 1}, the expression
+@noindent
+and will result in an error since the @code{sin} function will be
+called with no arguments.  To get around this, you must omit the space
+between @code{sin} and the opening parenthesis, or enclose the
+expression in a set of parentheses:
+
+@example
+[ (sin (pi)) ]
+@end example
+
+Whitespace surrounding the single quote character (@samp{'}, used as a
+transpose operator and for delimiting character strings) can also cause
+confusion.  Given @code{a = 1}, the expression
 
 @example
 [ 1 a' ]
 @end example
 
 @noindent
-results in the single quote character @samp{'} being treated as a
+results in the single quote character being treated as a
 transpose operator and the result is the vector @code{[ 1, 1 ]}, but the
 expression
 
 @example
 [ 1 a ' ]
 @end example
 
 @noindent
 produces the error message
 
 @example
 error: unterminated string constant
 @end example
 
 @noindent
-because to not do so would make it impossible to correctly parse the
-valid expression
+because to not do so would cause trouble when parsing the valid expression
 
 @example
 [ a 'foo' ]
 @end example
 
 For clarity, it is probably best to always use commas and semicolons to
-separate matrix elements and rows.  It is possible to enforce this style
-by setting the built-in variable @code{whitespace_in_literal_matrix} to
-@code{"ignore"}.
-
-@DOCSTRING(whitespace_in_literal_matrix)
+separate matrix elements and rows.
 
 @DOCSTRING(warn_separator_insert)
 
 When you type a matrix or the name of a variable whose value is a
 matrix, Octave responds by printing the matrix in with neatly aligned
 rows and columns.  If the rows of the matrix are too large to fit on the
 screen, Octave splits the matrix and displays a header before each
 section to indicate which columns are being displayed.  You can use the
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -402,17 +402,22 @@ Default value: 1.
 
 Default value: 1.
 
 @item warn_resize_on_range_error
 @xref{Index Expressions}.
 
 Default value: 0.
 
-@item warn_single_quote_string)
+@item warn_separator_insert
+@xref{Matrices}.
+
+Default value: 0.
+
+@item warn_single_quote_string
 @xref{String Conversions}.
 
 Default value: 0.
 
 @item warn_str_to_num
 @xref{String Conversions}.
 
 Default value: 0.
@@ -421,21 +426,16 @@ Default value: 0.
 @xref{Multiple Return Values}.
 
 Default value: 0.
 
 @item warn_variable_switch_label
 @xref{The switch Statement}.
 
 Default value: 0.
-
-@item whitespace_in_literal_matrix
-@xref{Matrices}.
-
-Default value: @code{""}.
 @end vtable
 
 
 @node Defaults from the Environment
 @section Defaults from the Environment
 
 Octave uses the values of the following environment variables to set the
 default values for the corresponding built-in variables.  In addition,
diff --git a/liboctave/ArrayN.cc b/liboctave/ArrayN.cc
--- a/liboctave/ArrayN.cc
+++ b/liboctave/ArrayN.cc
@@ -403,29 +403,25 @@ operator << (std::ostream& os, const Arr
 		    {
 		      ra_idx(1) = k;
 		      os << " " << a.elem(ra_idx);
 		    }
 		  os << "\n";
 		}
 	      break;
 
-	    case 1:
+	    default:
 	      rows = a_dims(0);
 
 	      for (int k = 0; k < rows; k++)
 		{
 		  ra_idx(0) = k;
 		  os << " " << a.elem(ra_idx);
 		}
 	      break;
-
-	    default:
-	      (*current_liboctave_error_handler)
-		("std::operator <<: problems with dimensions (= 0)!");
 	    }
 
           os << "\n";
         }
       else
         {
           int rows = a_dims(0);
           int cols = a_dims(1);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2003-30-07  Heine Kolltveit  <kolltvei@idi.ntnu.no>
+
+        * ArrayN.cc (operator <<): Corrected output.
+
 2003-07-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ArrayN.cc (increment_index): New arg, start_dimension.
 
 2003-07-29  Heine Kolltveit <kolltvei@idi.ntnu.no>
 
 	* ArrayN.cc (operator <<): Improve output readability.
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2003-07-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* miscellaneous/dump_prefs.m: Add warn_separator_insert and
+	warn_single_quote_string to the list.
+	Delete whitespace_in_literal_matrix from the list.
+
 2003-07-25  Paul Kienzle <pkienzle@users.sf.net>
 
 	* signal/autocov.m: Transpose result of conj because diag returns
 	a column vector, not a row vector.
 
 	* audio/playaudio.m, audio/record.m, image/image.m,
 	miscellaneous/bug_report.m: Protect spaces in filenames
 	with quotes.
diff --git a/scripts/miscellaneous/dump_prefs.m b/scripts/miscellaneous/dump_prefs.m
--- a/scripts/miscellaneous/dump_prefs.m
+++ b/scripts/miscellaneous/dump_prefs.m
@@ -93,20 +93,21 @@ function dump_prefs (file)
               "warn_fortran_indexing";
               "warn_function_name_clash";
               "warn_future_time_stamp";
               "warn_imag_to_real";
               "warn_missing_semicolon";
               "warn_neg_dim_as_zero";
               "warn_num_to_str";
               "warn_resize_on_range_error";
+              "warn_separator_insert";
+              "warn_single_quote_string";
               "warn_str_to_num";
               "warn_undefined_return_values";
-              "warn_variable_switch_label";
-              "whitespace_in_literal_matrix"];
+              "warn_variable_switch_label"];
 
   for i = 1:rows(var_list)
     var = deblank (var_list(i,:));
     try
       fprintf (file, "  %s = %s\n", var, type ("-q", var));
     catch
       fprintf (file, "# %s = <no value or error in displaying it>\n", var);
     end_try_catch
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2003-07-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* octave.cc (maximum_braindamage): Also set
+	warn_matlab_incompatible to TRUE.
+
+	* lex.l (whitespace_in_literal_matrix): Delete.
+	(symbols_of_lex): Delete DEFVAR for whitespace_in_literal_matrix.
+	(<MATRIX_START>{S}*\,{S}*, <MATRIX_START>{S}+,
+	(<MATRIX_START>{S}*{COMMENT}{SNLCMT}*,
+	<MATRIX_START>{S}*{NL}{SNLCMT}*, maybe_unput_comma): Behave as though
+	Vwhitespace_in_literal_matrix is always 1.
+
+	* octave.cc (maximum_braindamage): Don't set
+	whitespace_in_literal_matrix.
+
 2003-07-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (install-lib): Use $(INSTALL), not
 	$(INSTALL_PROGRAM) for $(SHLLIB) files.
 
 2003-07-29  Paul Kienzle <pkienzle@users.sf.net>
 
 	* Makefile.in: Don't need special system.c for Cygwin.
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -137,58 +137,16 @@ private:
   bracket_brace_paren_nesting_level (const bracket_brace_paren_nesting_level&);
 
   bracket_brace_paren_nesting_level&
   operator = (const bracket_brace_paren_nesting_level&);
 };
 
 static bracket_brace_paren_nesting_level nesting_level;
 
-// Should whitespace in a literal matrix list be automatically
-// converted to commas and semicolons?
-//
-//   user specifies   value of var
-//   --------------   ------------
-//   "ignore"              2
-//   "traditional"         1
-//   anything else         0
-//
-// Octave will never insert a comma in a literal matrix list if the
-// user specifies "ignore".  For example, the statement [1 2] will
-// result in an error instead of being treated the same as [1, 2], and
-// the statement
-//
-//   [ 1, 2,
-//     3, 4 ]
-//
-// will result in the vector [1 2 3 4] instead of a matrix.
-//
-// Traditional behavior makes Octave convert spaces to a comma between
-// identifiers and `('.  For example, the statement
-//
-//   [eye (2)]
-//
-// will be parsed as
-//
-//   [eye, (2)]
-//
-// and will result in an error since the `eye' function will be
-// called with no arguments.  To get around this, you would have to
-// omit the space between `eye' and the `('.
-//
-// The default value is 0, which results in behavior that is the same
-// as traditional, except that Octave does not convert spaces to a
-// comma between identifiers and `('.  For example, the statement
-//
-//   [eye (2)]
-//
-// will result in a call to `eye' with the argument `2'.
-
-static int Vwhitespace_in_literal_matrix;
-
 static bool Vwarn_matlab_incompatible = false;
 
 static bool Vwarn_separator_insert = false;
 
 static bool Vwarn_single_quote_string = false;
 
 // Forward declarations for functions defined at the bottom of this
 // file.
@@ -332,18 +290,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     lexer_flags.quote_is_transpose = false;
     lexer_flags.cant_be_identifier = false;
     lexer_flags.convert_spaces_to_comma = true;
 
     if ((tmp & ATE_NEWLINE) == ATE_NEWLINE)
       {
 	maybe_warn_separator_insert (';');
 
-	if (Vwhitespace_in_literal_matrix != 2)
-	  yyunput (';', yytext);
+	yyunput (';', yytext);
       }
 
     return (',');
   }
 
 %{
 // In some cases, spaces in matrix constants can turn into commas.
 // If commas are required, spaces are not important in matrix
@@ -361,30 +318,26 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     if (! (postfix_un_op || bin_op)
 	&& nesting_level.is_bracket ()
 	&& lexer_flags.convert_spaces_to_comma)
       {
 	if ((tmp & ATE_NEWLINE) == ATE_NEWLINE)
 	  {
 	    maybe_warn_separator_insert (';');
 
-	    if (Vwhitespace_in_literal_matrix != 2)
-	      yyunput (';', yytext);
+	    yyunput (';', yytext);
 	  }
 
-	if (Vwhitespace_in_literal_matrix != 2)
-	  {
-	    lexer_flags.quote_is_transpose = false;
-	    lexer_flags.cant_be_identifier = false;
-	    lexer_flags.convert_spaces_to_comma = true;
-
-	    maybe_warn_separator_insert (',');
-
-	    return (',');
-	  }
+	lexer_flags.quote_is_transpose = false;
+	lexer_flags.cant_be_identifier = false;
+	lexer_flags.convert_spaces_to_comma = true;
+
+	maybe_warn_separator_insert (',');
+
+	return (',');
       }
   }
 
 %{
 // Semicolons are handled as row seprators in matrix constants.  If we
 // don't eat whitespace here we can end up inserting too many
 // semicolons.
 %}
@@ -406,32 +359,28 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 %}
 
 <MATRIX_START>{S}*{COMMENT}{SNLCMT}* |
 <MATRIX_START>{S}*{NL}{SNLCMT}* {
     scan_for_comments (yytext);
     fixup_column_count (yytext);
     eat_whitespace ();
 
-    if (Vwhitespace_in_literal_matrix != 2)
-      {
-	lexer_flags.quote_is_transpose = false;
-	lexer_flags.cant_be_identifier = false;
-	lexer_flags.convert_spaces_to_comma = true;
-
-	if (nesting_level.none ())
-	  return LEXICAL_ERROR;
-      }
+    lexer_flags.quote_is_transpose = false;
+    lexer_flags.cant_be_identifier = false;
+    lexer_flags.convert_spaces_to_comma = true;
+
+    if (nesting_level.none ())
+      return LEXICAL_ERROR;
 
     if (nesting_level.is_bracket ())
       {
 	maybe_warn_separator_insert (';');
 
-	if (Vwhitespace_in_literal_matrix != 2)
-	  return ';';
+	return ';';
       }
   }
 
 %{
 // Open and close bracket are handled differently if we are in the range
 // part of a plot command.
 //
 %}
@@ -2292,21 +2241,18 @@ handle_close_bracket (int spc_gobbled)
 	  int sep_op = next_token_is_sep_op ();
 
 	  if (! (postfix_un_op || bin_op || sep_op)
 	      && nesting_level.is_bracket ()
 	      && lexer_flags.convert_spaces_to_comma)
 	    {
 	      maybe_warn_separator_insert (',');
 
-	      if (Vwhitespace_in_literal_matrix != 2)
-		{
-		  yyunput (',', yytext);
-		  return ']';
-		}
+	      yyunput (',', yytext);
+	      return ']';
 	    }
 	}
     }
 
   lexer_flags.quote_is_transpose = true;
   lexer_flags.cant_be_identifier = false;
   lexer_flags.convert_spaces_to_comma = true;
 
@@ -2333,37 +2279,25 @@ maybe_unput_comma (int spc_gobbled)
       int dot_op = (c1 == '.'
 		    && (isalpha (c2) || isspace (c2) || c2 == '_'));
 
       if (postfix_un_op || bin_op || sep_op || dot_op)
 	return;
 
       int index_op = (c1 == '(' || c1 == '{');
 
-      if (index_op)
-	{
-	  // If there is no space before the indexing op, we don't
-	  // insert a comma.
-	  if (! spc_gobbled)
-	    return;
-
-	  maybe_warn_separator_insert (',');
-
-	  // If there is a space, we only insert a comma if we are
-	  // trying to be Matlab-like.
-	  if (Vwhitespace_in_literal_matrix == 1)
-	    yyunput (',', yytext);
-	}
-      else
-	{
-	  maybe_warn_separator_insert (',');
-
-	  if (Vwhitespace_in_literal_matrix != 2)
-	    yyunput (',', yytext);
-	}
+      // If there is no space before the indexing op, we don't insert
+      // a comma.
+
+      if (index_op && ! spc_gobbled)
+	return;
+
+      maybe_warn_separator_insert (',');
+
+      yyunput (',', yytext);
     }
 }
 
 // Figure out exactly what kind of token to return when we have seen
 // an identifier.  Handles keywords.  Return -1 if the identifier
 // should be ignored.
 
 static int
@@ -2709,36 +2643,16 @@ warn_separator_insert (void)
 static int
 warn_single_quote_string (void)
 {
   Vwarn_single_quote_string = check_preference ("warn_single_quote_string");
 
   return 0;
 }
 
-static int
-whitespace_in_literal_matrix (void)
-{
-  int pref = 0;
-
-  std::string val = builtin_string_variable ("whitespace_in_literal_matrix");
-
-  if (! val.empty ())
-    {
-      if (val == "ignore")
-	pref = 2;
-      else if (val == "traditional")
-	pref = 1;
-    }
-
-  Vwhitespace_in_literal_matrix = pref;
-
-  return 0;
-}
-
 void
 symbols_of_lex (void)
 {
   DEFVAR (warn_matlab_incompatible, false, warn_matlab_incompatible,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} warn_matlab_incompatible\n\
 Print warnings for Octave language features that may cause\n\
 compatibility problems with Matlab.\n\
@@ -2752,22 +2666,15 @@ automatically in literal matrices.\n\
 @end defvr");
 
   DEFVAR (warn_single_quote_string, false, warn_single_quote_string,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} warn_single_quote_string\n\
 Print warning if a signle quote character is used to introduce a\n\
 string constant.\n\
 @end defvr");
-
-  DEFVAR (whitespace_in_literal_matrix, "", whitespace_in_literal_matrix,
-    "-*- texinfo -*-\n\
-@defvr {Built-in Variable} whitespace_in_literal_matrix\n\
-Control auto-insertion of commas and semicolons in literal matrices.\n\
-@end defvr");
-
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -346,17 +346,17 @@ maximum_braindamage (void)
   bind_builtin_variable ("PS2", "");
   bind_builtin_variable ("beep_on_error", true);
   bind_builtin_variable ("crash_dumps_octave_core", false);
   bind_builtin_variable ("default_save_format", "mat-binary");
   bind_builtin_variable ("fixed_point_format", true);
   bind_builtin_variable ("page_screen_output", false);
   bind_builtin_variable ("print_empty_dimensions", false);
   bind_builtin_variable ("warn_function_name_clash", false);
-  bind_builtin_variable ("whitespace_in_literal_matrix", "traditional");
+  bind_builtin_variable ("warn_matlab_incompatible", true);
 }
 
 // You guessed it.
 
 int
 octave_main (int argc, char **argv, int embedded)
 {
   octave_env::set_program_name (argv[0]);
diff --git a/test/octave.test/prefer/prefer-1.m b/test/octave.test/prefer/prefer-1.m
--- a/test/octave.test/prefer/prefer-1.m
+++ b/test/octave.test/prefer/prefer-1.m
@@ -1,2 +1,2 @@
-whitespace_in_literal_matrix = "ignore";
 m = [3 2];
+all (m == (3:-1:2))
diff --git a/test/octave.test/prefer/prefer-10.m b/test/octave.test/prefer/prefer-10.m
--- a/test/octave.test/prefer/prefer-10.m
+++ b/test/octave.test/prefer/prefer-10.m
@@ -1,3 +1,2 @@
-whitespace_in_literal_matrix = 0;
-m = [3,2];
-[m(1)]
+a = 2;
+[a- 1]
diff --git a/test/octave.test/prefer/prefer-11.m b/test/octave.test/prefer/prefer-11.m
--- a/test/octave.test/prefer/prefer-11.m
+++ b/test/octave.test/prefer/prefer-11.m
@@ -1,3 +1,2 @@
-whitespace_in_literal_matrix = 0;
-m = [3,2];
-all ([m,(1)] == [3,2,1])
+a = 1;
+all ([a -1] == (1:-2:-1))
diff --git a/test/octave.test/prefer/prefer-2.m b/test/octave.test/prefer/prefer-2.m
--- a/test/octave.test/prefer/prefer-2.m
+++ b/test/octave.test/prefer/prefer-2.m
@@ -1,4 +1,3 @@
-whitespace_in_literal_matrix = "ignore";
 m = [3,
  2];
-all (m == (3:-1:2))
+all (m == (3:-1:2)')
diff --git a/test/octave.test/prefer/prefer-3.m b/test/octave.test/prefer/prefer-3.m
--- a/test/octave.test/prefer/prefer-3.m
+++ b/test/octave.test/prefer/prefer-3.m
@@ -1,3 +1,2 @@
-whitespace_in_literal_matrix = "ignore";
-m = [3,2];
-[m   (1)]
+a = 2;
+[a - 1]
diff --git a/test/octave.test/prefer/prefer-4.m b/test/octave.test/prefer/prefer-4.m
--- a/test/octave.test/prefer/prefer-4.m
+++ b/test/octave.test/prefer/prefer-4.m
@@ -1,3 +1,2 @@
-whitespace_in_literal_matrix = "ignore";
 m = [3,2];
-[m(1)]
+[m ']
diff --git a/test/octave.test/prefer/prefer-5.m b/test/octave.test/prefer/prefer-5.m
--- a/test/octave.test/prefer/prefer-5.m
+++ b/test/octave.test/prefer/prefer-5.m
@@ -1,2 +1,1 @@
-whitespace_in_literal_matrix = "traditional";
 all ([3 2] == (3:-1:2))
diff --git a/test/octave.test/prefer/prefer-6.m b/test/octave.test/prefer/prefer-6.m
--- a/test/octave.test/prefer/prefer-6.m
+++ b/test/octave.test/prefer/prefer-6.m
@@ -1,2 +1,1 @@
-whitespace_in_literal_matrix = "traditional";
 all ([3, 2] == (3:-1:2))
diff --git a/test/octave.test/prefer/prefer-7.m b/test/octave.test/prefer/prefer-7.m
--- a/test/octave.test/prefer/prefer-7.m
+++ b/test/octave.test/prefer/prefer-7.m
@@ -1,3 +1,2 @@
-whitespace_in_literal_matrix = "traditional";
 m = [3,2];
-all ([m (1)] == [3,2,1])
+all ([m (1)] == (3:-1:1))
diff --git a/test/octave.test/prefer/prefer-8.m b/test/octave.test/prefer/prefer-8.m
--- a/test/octave.test/prefer/prefer-8.m
+++ b/test/octave.test/prefer/prefer-8.m
@@ -1,3 +1,2 @@
-whitespace_in_literal_matrix = "traditional";
 m = [3,2];
 [m(1)]
diff --git a/test/octave.test/prefer/prefer-9.m b/test/octave.test/prefer/prefer-9.m
--- a/test/octave.test/prefer/prefer-9.m
+++ b/test/octave.test/prefer/prefer-9.m
@@ -1,3 +1,2 @@
-whitespace_in_literal_matrix = 0;
 m = [3,2];
-[m   (1)]
+all ([m (1)] == (3:-1:1))
diff --git a/test/octave.test/prefer/prefer.exp b/test/octave.test/prefer/prefer.exp
--- a/test/octave.test/prefer/prefer.exp
+++ b/test/octave.test/prefer/prefer.exp
@@ -1,24 +1,24 @@
 ## whitespace_in_literal_matrix
 
 set test whitespace-in-literal-matrix-1
-set prog_output "parse error.*"
+set prog_output "^ans = 1"
 do_test prefer-1.m
 
 set test whitespace-in-literal-matrix-2
 set prog_output "^ans = 1"
 do_test prefer-2.m
 
 set test whitespace-in-literal-matrix-3
-set prog_output "^ans = 3"
+set prog_output "^ans = 1"
 do_test prefer-3.m
 
 set test whitespace-in-literal-matrix-4
-set prog_output "^ans = 3"
+set prog_output "^error:.*"
 do_test prefer-4.m
 
 set test whitespace-in-literal-matrix-5
 set prog_output "^ans = 1"
 do_test prefer-5.m
 
 set test whitespace-in-literal-matrix-6
 set prog_output "^ans = 1"
@@ -28,21 +28,21 @@ set test whitespace-in-literal-matrix-7
 set prog_output "^ans = 1"
 do_test prefer-7.m
 
 set test whitespace-in-literal-matrix-8
 set prog_output "^ans = 3"
 do_test prefer-8.m
 
 set test whitespace-in-literal-matrix-9
-set prog_output "^ans = 3"
+set prog_output "^ans = 1"
 do_test prefer-9.m
 
 set test whitespace-in-literal-matrix-10
-set prog_output "^ans = 3"
+set prog_output "^ans = 1"
 do_test prefer-10.m
 
 set test whitespace-in-literal-matrix-11
 set prog_output "^ans = 1"
 do_test prefer-11.m
 
 ## warn_str_to_num
 
