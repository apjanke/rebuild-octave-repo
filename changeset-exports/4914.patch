# HG changeset patch
# User jwe
# Date 1090601713 0
#      Fri Jul 23 16:55:13 2004 +0000
# Node ID 1c0442da75fd6b974e5e749cc0208a3bd6c352f8
# Parent  c8368716bab399a77165701db91a418e9c2a4237
[project @ 2004-07-23 16:55:13 by jwe]

diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -45,48 +45,48 @@ function retval = num2str (x, arg)
 	fmt = strcat (arg, "%-+", arg(2:end), "i");
       else
 	fmt = sprintf ("%%.%dg%%-+.%dgi", arg);
       endif
     else
       ## Setup a suitable format string
       if (isnumeric (x) && round (x) == x && abs (x) < 1e10)
 	dgt1 = ceil (log10 (max (max (abs (real (x(:)))),
-			     max (abs (imag (x(:))))))) + 1;
+				 max (abs (imag (x(:))))))) + 1;
 	dgt2 = dgt1 - (min (real (x(:))) >= 0);
 	fmt = sprintf("%%%dd%%+-%ddi  ", dgt2, dgt1);
       elseif (isscalar (x))
 	fmt = "%.4g%-+.4gi";
       else
 	fmt = "%11.4g%-+11.4gi";
       endif
     endif
 
     ## Manipulate the complex value to have real values in the odd
-    ## columns and imaginary values in the even columns
+    ## columns and imaginary values in the even columns.
     sz = size (x);
-    nc = sz (2);
+    nc = sz(2);
     nd = ndims (x);
-    perm = fix ([1 : 0.5 : nc + 0.5]);
-    perm (2 : 2 : 2*nc) = perm(2 : 2 : 2*nc) + nc;
+    perm = fix ([1:0.5:nc+0.5]);
+    perm(2:2:2*nc) = perm(2:2:2*nc) + nc;
     idx = cell ();
     for i = 1:nd
       idx {i} = 1:sz(i);
     endfor
-    idx {2} = perm;
+    idx{2} = perm;
     x = horzcat (real(x), imag(x));
-    x = x (idx{:});
+    x = x(idx{:});
     
-    fmt = strcat (deblank(repmat (fmt, 1, nc)), "\n");
-    tmp = sprintf (fmt, permute (x, [2, 1, 3 : nd]));
+    fmt = strcat (deblank (repmat (fmt, 1, nc)), "\n");
+    tmp = sprintf (fmt, permute (x, [2, 1, 3:nd]));
 
     ## Put the "i"'s where they are supposed to be.
     while (true)
       tmp2 = strrep (tmp, " i\n", "i\n");
-      if (length(tmp) == length(tmp2))
+      if (length (tmp) == length (tmp2))
 	break;
       else
 	tmp = tmp2;
       endif
     endwhile
     while (true)
       tmp2 = strrep (tmp, " i", "i ");
       if (tmp == tmp2)
@@ -102,27 +102,28 @@ function retval = num2str (x, arg)
     if (nargin == 2)
       if (isstr (arg))
 	fmt = arg;
       else
 	fmt = sprintf ("%%.%dg", arg);
       endif
     else
       if (isnumeric (x) && round (x) == x && abs (x) < 1e10)
-	if (max(abs(x(:))) == 0)
+	if (max (abs (x(:))) == 0)
 	  dgt = 1;
 	else
-	  dgt = floor(log10(max(abs(x(:))))) + (min (real (x(:))) < 0) + 1;
+	  dgt = floor (log10 (max (abs(x(:))))) + (min (real (x(:))) < 0) + 1;
 	endif
-	fmt = sprintf("%%%dd  ",dgt);
+	fmt = sprintf ("%%%dd  ", dgt);
       elseif (isscalar (x))
 	fmt = "%.4g";
       else
 	fmt = "%11.4g";
       endif
     endif
     fmt = strcat (deblank (repmat (fmt, 1, columns (x))), "\n");
-    tmp = sprintf (fmt, permute (x, [2, 1, 3 : ndims(x)]));
+    nd = ndims (x);
+    tmp = sprintf (fmt, permute (x, [2, 1, 3:nd]));
     tmp(length (tmp)) = "";
     retval = split (tmp, "\n");
   endif
 
 endfunction
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -64,18 +64,18 @@ function imshow (varargin)
     usage (usage_str);
   endif
   
   ## All except imshow (r, g, b)
 
   if (mvars != 3)
     I = varargin{1};
     if (iscomplex (I))
-	warning ("imshow: displaying real part of complex image");
-	I = real (I);
+      warning ("imshow: displaying real part of complex image");
+      I = real (I);
     endif      
     if (max (I(:)) <= 1)
       ## image in [0-1]; scale to [0-255]
       I = I * 255;
       M = gray (256);
     endif
   endif
 
@@ -104,19 +104,19 @@ function imshow (varargin)
     if (iscomplex (tmp))
 	warning ("imshow: displaying real part of complex rgb image");
 	r = real (r);
 	g = real (g);
 	b = real (b);
     endif    
     if (max (tmp(:)) > 1)
       ## Normalise to [0-1].
-      r = r/255;
-      g = g/255;
-      b = b/255;
+      r = r / 255;
+      g = g / 255;
+      b = b / 255;
     endif
     [I, M] = rgb2ind (r, g, b);
   endif
   
   ## Check for "truesize".
   zoom = [];
   for i = mvars+1:nargin
     if (isstr (varargin{i}) && strcmp (varargin{i}, "truesize"))
diff --git a/scripts/plot/figure.m b/scripts/plot/figure.m
--- a/scripts/plot/figure.m
+++ b/scripts/plot/figure.m
@@ -16,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} figure (@var{n})
 ## Set the current plot window to plot window @var{n}.  This function
 ## currently requires X11 and a version of gnuplot that supports multiple
-## frames.  If @var{N} is not specified, the next available window
+## frames.  If @var{n} is not specified, the next available window
 ## number is chosen.
 ## @end deftypefn
 
 ## Author: jwe
 
 function f = figure (n)
 
   static figure_list = create_set (0);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2004-07-23  John W. Eaton  <jwe@octave.org>
+
+	* symtab.cc (whos_parameter): Move decl here, from symtab.h.
+
 2004-07-23  Oyvind Kristiansen  <oyvinkri@stud.ntnu.no>
 
 	* symtab.cc (symbol_record::subsymbols_list): New method.
 	(symbol_record::maybe_list): Call to subsymbols_list and merge
 	result with the original list of symbols.
 
 	* symtab.cc (symbol_record::make_dimensions_string): New method.
 	(symbol_record::print_symbol_info_line): Print N-d info.  Output
diff --git a/src/pt-loop.cc b/src/pt-loop.cc
--- a/src/pt-loop.cc
+++ b/src/pt-loop.cc
@@ -241,41 +241,41 @@ tree_simple_for_command::do_for_loop_onc
     } \
   while (0)
 
 #define DO_ND_LOOP(arg) \
   do \
     { \
       int ndims = dv.length (); \
       Array<idx_vector> idx; \
-      int steps = dv.numel () / dv (0);	\
+      int steps = dv.numel () / dv (0); \
       idx.resize (ndims, idx_vector (1)); \
       idx (0) = idx_vector (':'); \
  \
       for (int i = 0; i < steps; i++) \
 	{ \
 	  MAYBE_DO_BREAKPOINT; \
  \
-	  octave_value val (arg.index(idx));	\
+	  octave_value val (arg.index(idx)); \
  \
 	  bool quit = false; \
  \
 	  do_for_loop_once (ult, val, quit); \
 	  quit = (i == steps - 1 ? true : quit); \
  \
 	  if (quit) \
 	    break; \
  \
 	  for (int j = 1; j < ndims; j++) \
 	    { \
-	      idx(j) = idx_vector (idx(j)(0) + 2);	\
-	      if (idx(j)(0) < dv(j))			\
+	      idx(j) = idx_vector (idx(j)(0) + 2); \
+	      if (idx(j)(0) < dv(j)) \
 		break; \
 	      else \
-		idx(j) = idx_vector (1);	\
+		idx(j) = idx_vector (1); \
 	    } \
 	} \
     } \
   while (0)
 
 void
 tree_simple_for_command::eval (void)
 {
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cassert>
 #include <cctype>
 #include <climits>
+#include <cstdio>
 
 #include <iomanip>
 #include <fstream>
 
 #include "glob-match.h"
 #include "str-vec.h"
 
 #include "defun.h"
@@ -46,17 +47,16 @@ Software Foundation, 59 Temple Place - S
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
 
 #include "gripes.h"
 #include "lo-mappers.h"
 
 #include "parse.h"
-#include <stdio.h>
 
 unsigned long int symbol_table::symtab_count = 0;
 
 // Should variables be allowed to hide functions of the same name?  A
 // positive value means yes.  A negative value means yes, but print a
 // warning message.  Zero means it should be considered an error.
 static int Vvariables_can_hide_functions;
 
@@ -196,19 +196,16 @@ SYMBOL_DEF::print_info (std::ostream& os
 {
   os << prefix << "symbol_def::count: " << count << "\n";
 
   definition.print_info (os, prefix + "  ");
 }
 
 // Individual records in a symbol table.
 
-// XXX FIXME XXX -- there are lots of places below where we should
-// probably be temporarily ignoring interrupts.
-
 void
 symbol_record::rename (const std::string& new_name)
 {
   if (! read_only_error ("rename"))
     nm = new_name;
 }
 
 void
@@ -414,194 +411,215 @@ symbol_record::pop_context (void)
       definition = context.top ();
       context.pop ();
 
       linked_to_global = global_link_context.top ();
       global_link_context.pop ();
     }
 }
 
+// Calculate how much space needs to be reserved for the first part of
+// the dimensions string.  For example,
+//
+//   mat is a 12x3 matrix
+//            ^^  => 2 columns
+
 int
-symbol_record::dimensions_string_req_first_space (int print_dims) const 
+symbol_record::dimensions_string_req_first_space (int print_dims) const
 {
-  // This method calculates how much space needs to be reserved for the
-  // first part of the dimensions string.
-  // Example: mat is a 12x3 matrix
-  //                   ^^  => 2 columns
   long dim = 0;
   int first_param_space = 0;
 
-  // Calculating dimensions
+  // Calculating dimensions.
+
   std::string dim_str = "";
   std::stringstream ss;
   dim_vector dimensions;
 
   if (is_variable ())
     {
-      if (is_matrix_type ()) 
+      if (is_matrix_type ())
         {
 	  dimensions = dims ();
 	  dim = dimensions.length ();
 	}
     }
 
   first_param_space = (first_param_space >= 1 ? first_param_space : 1);
 
-  // Preparing dimension string
+  // Preparing dimension string.
+
   if ((dim <= print_dims || print_dims < 0) && print_dims != 0)
     {
-      // Dimensions string must be printed like this: 2x3x4x2
+      // Dimensions string must be printed like this: 2x3x4x2.
+
       if (dim == 0 || dim == 1)
-	first_param_space = 1; // First parameter is 1
+	first_param_space = 1; // First parameter is 1.
       else
         {
 	  ss << dimensions (0);
-	  
+	 
 	  dim_str = ss.str ();
 	  first_param_space = dim_str.length ();
 	}
     }
-  else 
+  else
     {
-      // Printing dimension string as: a-D
+      // Printing dimension string as: a-D.
+
       ss << dim;
 
       dim_str = ss.str ();
       first_param_space = dim_str.length ();
     }
 
   return first_param_space;
 }
 
+// Calculate how much space needs to be reserved for the the
+// dimensions string.  For example,
+//
+//   mat is a 12x3 matrix
+//            ^^^^ => 4 columns
+
 int
 symbol_record::dimensions_string_req_total_space (int print_dims) const
 {
-  // This method calculates how much space needs to be reserved for the
-  // the dimensions string.
-  // Example: mat is a 12x3 matrix
-  //                   ^^^^ => 4 columns
-
   std::string dim_str = "";
   std::stringstream ss;
 
   ss << make_dimensions_string (print_dims);
   dim_str = ss.str ();
 
   return dim_str.length ();
 }
 
+// Make the dimensions-string.  For example: mat is a 2x3 matrix.
+//                                                    ^^^
+
 std::string
-symbol_record::make_dimensions_string (int print_dims) const 
+symbol_record::make_dimensions_string (int print_dims) const
 {
-  // This method makes the dimensions-string, which is a string that tells
-  // how large a object is, dimensionally.
-  // Example: mat is a 2x3 matrix
-  //                   ^^^ 
-
   long dim = 0;
 
-  // Calculating dimensions
+  // Calculating dimensions.
+
   std::string dim_str = "";
   std::stringstream ss;
   dim_vector dimensions;
 
   if (is_variable ())
     {
-      if (is_matrix_type ()) 
+      if (is_matrix_type ())
         {
 	  dimensions = dims ();
 	  dim = dimensions.length ();
 	}
     }
 
-  // Preparing dimension string
+  // Preparing dimension string.
+
   if ((dim <= print_dims || print_dims < 0) && print_dims != 0)
     {
       // Only printing the dimension string as: axbxc...
+
       if (dim == 0)
 	ss << "1x1";
       else
         {
-	  for (int i = 0; i < dim; i++) 
+	  for (int i = 0; i < dim; i++)
 	    {
 	      if (i == 0)
 		{
 		  if (dim == 1)
-		    // Looks like this is not going to happen in Octave, but ...
-		    ss << "1x" << dimensions (i);
+		    {
+		      // Looks like this is not going to happen in
+		      // Octave, but ...
+
+		      ss << "1x" << dimensions (i);
+		    }
 		  else
 		    ss << dimensions (i);
 		}
-	      else if (i < dim && dim != 1) 
+	      else if (i < dim && dim != 1)
 		ss << "x" << dimensions (i);
 	    }
 	}
     }
-  else 
+  else
     {
-      // Printing dimension string as: a-D
+      // Printing dimension string as: a-D.
+
       ss << dim << "-D";
     }
 
   dim_str = ss.str ();
 
   return dim_str;
 }
 
+// Print a line of information on a given symbol.
+
 void
 symbol_record::print_symbol_info_line (std::ostream& os,
 				       std::list<whos_parameter>& params) const
 {
-  // This method prints a line of information on a given symbol
   std::list<whos_parameter>::iterator i = params.begin ();
   while (i != params.end ())
     {
       whos_parameter param = * i;
 
       if (param.command != '\0')
         {
-	  // Do the actual printing
+	  // Do the actual printing.
+
 	  switch (param.modifier)
 	    {
 	    case 'l':
-	      os << std::setiosflags (std::ios::left) << std::setw (param.parameter_length);
+	      os << std::setiosflags (std::ios::left)
+		 << std::setw (param.parameter_length);
 	      break;
 
 	    case 'r':
-	      os << std::setiosflags (std::ios::right) << std::setw (param.parameter_length);
+	      os << std::setiosflags (std::ios::right)
+		 << std::setw (param.parameter_length);
 	      break;
 
 	    case 'c':
 	      if (param.command == 's')
 	        {
-		  int front = param.first_parameter_length -
-		      dimensions_string_req_first_space (param.dimensions);
-		  int back = param.parameter_length -
-		      dimensions_string_req_total_space (param.dimensions) -
-		      front;
+		  int front = param.first_parameter_length
+		    - dimensions_string_req_first_space (param.dimensions);
+		  int back = param.parameter_length
+		    - dimensions_string_req_total_space (param.dimensions)
+		    - front;
 		  front = (front > 0) ? front : 0;
 		  back = (back > 0) ? back : 0;
 
-		  os << std::setiosflags (std::ios::left) 
+		  os << std::setiosflags (std::ios::left)
 		     << std::setw (front)
-		     << "" << std::resetiosflags (std::ios::left)
+		     << ""
+		     << std::resetiosflags (std::ios::left)
 		     << make_dimensions_string (param.dimensions)
 		     << std::setiosflags (std::ios::left)
 		     << std::setw (back)
-		     << "" << std::resetiosflags (std::ios::left);
+		     << ""
+		     << std::resetiosflags (std::ios::left);
 		}
 	      else
 	        {
 		  os << std::setiosflags (std::ios::left)
 		     << std::setw (param.parameter_length);
 		}
 	      break;
 
 	    default:
-	      error ("whos_line_format: modifier `%c' unknown", param.modifier);
+	      error ("whos_line_format: modifier `%c' unknown",
+		     param.modifier);
+
 	      os << std::setiosflags (std::ios::right)
 		 << std::setw (param.parameter_length);
 	    }
 
 	  switch (param.command)
 	    {
 	    case 'b':
 	      os << byte_size ();
@@ -631,18 +649,18 @@ symbol_record::print_symbol_info_line (s
 	    case 's':
 	      if (param.modifier != 'c')
 		os << make_dimensions_string (param.dimensions);
 	      break;
 
 	    case 't':
 	      os << type_name ();
 	      break;
-	     
-	    default: 
+	    
+	    default:
 	      error ("whos_line_format: command `%c' unknown", param.command);
 	    }
 
 	  os << std::resetiosflags (std::ios::left)
 	     << std::resetiosflags (std::ios::right);
 	  i++;
 	}
       else
@@ -1085,19 +1103,19 @@ symbol_table::subsymbol_list (const stri
 
 		  std::string my_name = ptr->name ();
 
 		  if ((type & my_type) && (scope & my_scope) && (first_name == my_name))
 		    {
 		      symbol_record *sym_ptr = new symbol_record ();
 		      octave_value value;
 		      int parse_status;
-	  
+	 
 		      value = eval_string (var_name, true, parse_status);
-	  
+	 
 		      sym_ptr->define (value);
 		      sym_ptr->rename (var_name);
 		      subsymbols(count++) = sym_ptr;
 		    }
 
 		  ptr = ptr->next ();
 		}
 	    }
@@ -1207,34 +1225,34 @@ symbol_table::print_descriptor (std::ost
 	      break;
 
 	    case 'r':
 	      os << std::setiosflags (std::ios::right) << std::setw (param.parameter_length);
 	      param_buf << std::setiosflags (std::ios::right) << std::setw (param.parameter_length);
 	      break;
 
 	    case 'c':
-	      if (param.command != 's') 
+	      if (param.command != 's')
 	        {
 		  os << std::setiosflags (std::ios::left)
 		     << std::setw (param.parameter_length);
 		  param_buf << std::setiosflags (std::ios::left)
 			    << std::setw (param.parameter_length);
 		}
 	      break;
 
 	    default:
 	      os << std::setiosflags (std::ios::left) << std::setw (param.parameter_length);
 	      param_buf << std::setiosflags (std::ios::left) << std::setw (param.parameter_length);
 	    }
 
 	  if (param.command == 's' && param.modifier == 'c')
 	    {
 	      int a, b;
-	      
+	     
 	      if (param.modifier == 'c')
 	        {
 		  a = param.first_parameter_length - param.balance;
 		  a = (a < 0 ? 0 : a);
 		  b = param.parameter_length - a - param.text . length ();
 		  b = (b < 0 ? 0 : b);
 		  os << std::setiosflags (std::ios::left) << std::setw (a)
 		     << "" << std::resetiosflags (std::ios::left) << param.text
@@ -1340,18 +1358,18 @@ symbol_table::parse_whos_line_format (Ar
 
   idx = 0;
   while (static_cast<size_t> (idx) < format_len)
     {
       whos_parameter param;
       param.command = '\0';
 
       if (Vwhos_line_format[idx] == '%')
-        {  
-	  bool _error = false;
+        {
+	  bool error_encountered = false;
 	  param.modifier = 'r';
 	  param.parameter_length = 0;
 	  param.dimensions = 8;
 
 	  int a = 0, b = -1, c = 8, balance = 1;
 	  unsigned int items;
 	  size_t pos;
 	  std::string cmd;
@@ -1360,55 +1378,58 @@ symbol_table::parse_whos_line_format (Ar
 	  cmd = Vwhos_line_format.substr (idx, Vwhos_line_format.length ());
 	  pos = cmd.find (';');
 	  if (pos != NPOS)
 	    cmd = cmd.substr (0, pos+1);
 	  else
 	    error ("parameter without ; in whos_line_format");
 
 	  idx += cmd.length ();
-	  
+
+	  // XXX FIXME XXX -- use iostream functions instead of sscanf!
+
 	  if (cmd.find_first_of ("crl") != 1)
 	    items = sscanf (cmd.c_str (), "%c%c:%d:%d:%d:%d;",
 			    &garbage, &param.command, &a, &b, &c, &balance);
 	  else
 	    items = sscanf (cmd.c_str (), "%c%c%c:%d:%d:%d:%d;",
-			    &garbage, &param.modifier, &param.command, &a, &b, &c, &balance) - 1;
-	  
+			    &garbage, &param.modifier, &param.command,
+			    &a, &b, &c, &balance) - 1;
+	 
 	  if (items < 2)
 	    {
 	      error ("whos_line_format: parameter structure without command in whos_line_format");
-	      _error = true;
+	      error_encountered = true;
 	    }
 
 	  // Insert data into parameter
 	  param.first_parameter_length = 0;
 	  pos = param_string.find (param.command);
 	  if (pos != NPOS)
 	    {
 	      param.parameter_length = param_length(pos);
 	      param.text = param_names(pos);
 	      param.line.assign (param_names (pos).length (), '=');
 	    }
 	  else
 	    {
 	      error ("whos_line_format: '%c' is not a command",
 		     param.command);
-	      _error = true;
+	      error_encountered = true;
 	    }
 
 	  if (param.command == 's')
 	    {
 	      // Have to calculate space needed for printing matrix dimensions
 	      // Space needed for Size column is hard to determine in prior,
 	      // because it depends on dimensions to be shown. That is why it is
 	      // recalculated for each Size-command
 	      int j, first = 0, rest = 0, total = 0;
 	      param.dimensions = c;
-	      
+	     
 	      for (j = 0; j < len; j++)
 	      {
 		int first1 = symbols(j)->dimensions_string_req_first_space (param.dimensions);
 		int total1 = symbols(j)->dimensions_string_req_total_space (param.dimensions);
 		int rest1 = total1 - first1;
 		rest = (rest1 > rest ? rest1 : rest);
 		first = (first1 > first ? first1 : first);
 		total = (total1 > total ? total1 : total);
@@ -1430,32 +1451,32 @@ symbol_table::parse_whos_line_format (Ar
 		  param.parameter_length = total;
 		  param.first_parameter_length = 0;
 		}
 	    }
 	  else if (param.modifier == 'c')
 	    {
 	      error ("whos_line_format: modifier 'c' not available for command '%c'",
 		     param.command);
-	      _error = true;
+	      error_encountered = true;
 	    }
 
 	  // What happens if whos_line_format contains negative numbers
 	  // at param_length positions?
 	  param.balance = ((b < 0) ? 0 : param.balance);
 	  param.first_parameter_length = ((b < 0) ? 0 :
 					  param.first_parameter_length);
 	  param.parameter_length = ((a < 0) ? 0 :
 				    (param.parameter_length <
-				     param_length (pos_s)) ? 
+				     param_length (pos_s)) ?
 				    param_length (pos_s) :
 				    param.parameter_length);
 
 	  // Parameter will not be pushed into parameter list if ...
-	  if (! _error)
+	  if (! error_encountered)
 	    params.push_back (param);
 	}
       else
         {
 	  // Text string, to be printed as it is ...
 	  std::string text;
 	  size_t pos;
 	  text = Vwhos_line_format.substr (idx, Vwhos_line_format.length ());
@@ -1474,46 +1495,47 @@ symbol_table::parse_whos_line_format (Ar
   return params;
 }
 
 int
 symbol_table::maybe_list (const char *header, const string_vector& argv,
 			  std::ostream& os, bool show_verbose,
 			  unsigned type, unsigned scope)
 {
-  // This method prints information for sets of symbols, but only one set
-  // at a time (like, for instance: all variables, og all
-  // built-in-functions)
+  // This method prints information for sets of symbols, but only one
+  // set at a time (like, for instance: all variables, or all
+  // built-in-functions).
 
-  // This method invokes print_symbol_info_line to print info on every symbol
+  // This method invokes print_symbol_info_line to print info on every
+  // symbol.
 
   int status = 0;
 
   if (show_verbose)
     {
-      // XXX FIXME XXX Should separate argv to lists with and without dots
-      Array<symbol_record *> _symbols = symbol_list (argv, type, scope);
-      Array<symbol_record *> _subsymbols = subsymbol_list (argv, type, scope);
+      // XXX FIXME XXX Should separate argv to lists with and without dots.
+      Array<symbol_record *> xsymbols = symbol_list (argv, type, scope);
+      Array<symbol_record *> xsubsymbols = subsymbol_list (argv, type, scope);
 
-      int sym_len = _symbols.length (), subsym_len = _subsymbols.length (), 
+      int sym_len = xsymbols.length (), subsym_len = xsubsymbols.length (),
 	len = sym_len + subsym_len;
-  
+ 
       Array<symbol_record *> symbols (len);
 
       if (len > 0)
 	{
 	  int bytes = 0, elements = 0, i;
 	  std::list<whos_parameter> params;
 
-	  // Joining symbolic tables
+	  // Joining symbolic tables.
 	  for (i = 0; i < sym_len; i++)
-	    symbols(i) = _symbols(i);
+	    symbols(i) = xsymbols(i);
 
 	  for (i = 0; i < subsym_len; i++)
-	    symbols(i+sym_len) = _subsymbols(i);
+	    symbols(i+sym_len) = xsubsymbols(i);
 
 	  os << "\n" << header << "\n\n";
 
 	  symbols.qsort (maybe_list_cmp_fcn);
 
 	  params = parse_whos_line_format (symbols);
 
 	  print_descriptor (os, params);
@@ -1522,29 +1544,29 @@ symbol_table::maybe_list (const char *he
 
 	  for (int j = 0; j < len; j++)
 	    {
 	      symbols(j)->print_symbol_info_line (os, params);
 	      elements += symbols(j)->numel ();
 	      bytes += symbols(j)->byte_size ();
 	    }
 
-	  os << "\nTotal is " << elements 
+	  os << "\nTotal is " << elements
 	     << " element" << ((elements > 1) ? "s" : "") << " using "
 	     << bytes << " byte" << ((bytes > 1) ? "s" : "") << "\n";
 
 	  status = 1;
 	}
     }
   else
     {
       string_vector symbols = name_list (argv, 1, type, scope);
 
       if (! symbols.empty ())
-	{     
+	{
 	  os << "\n" << header << "\n\n";
 
 	  symbols.list_in_columns (os);
 
 	  status = 1;
 	}
     }
 
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -43,18 +43,22 @@ class octave_lvalue;
 class string_vector;
 
 class symbol_record;
 class symbol_table;
 
 struct
 whos_parameter
 {
-  char command, modifier;
-  int parameter_length, first_parameter_length, dimensions, balance;
+  char command;
+  char modifier;
+  int parameter_length;
+  int first_parameter_length;
+  int dimensions;
+  int balance;
   std::string text;
   std::string line;
 };
 
 // Individual records in a symbol table.
 
 class
 symbol_record
