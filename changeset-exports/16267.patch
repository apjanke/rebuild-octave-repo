# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363026657 14400
#      Mon Mar 11 14:30:57 2013 -0400
# Node ID 15f55df088e74334ee5c2dd117905146c9b1854c
# Parent  71ee3afedb694ab9dd886960bf2f7cc4b9c5a379
6/10 commits reworking the lexer

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -269,16 +269,18 @@ public:
   bool previous_token_value_is (int tok_val) const;
 
   void mark_previous_token_trailing_space (void);
 
   bool space_follows_previous_token (void) const;
 
   bool previous_token_is_binop (void) const;
 
+  bool previous_token_is_keyword (void) const;
+
   bool previous_token_may_be_command (void) const;
 
   // true means that we have encountered eof on the input stream.
   bool end_of_input;
 
   // true means we are at the beginning of a statement, where a
   // command name is possible.
   bool at_beginning_of_statement;
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -237,20 +237,25 @@ ANY_INCLUDING_NL (.|{NL})
     curr_lexer->lexer_debug ("<MATRIX_START>{S}*");
 
     curr_lexer->mark_previous_token_trailing_space ();
   }
 
 <MATRIX_START>{NL} {
     curr_lexer->lexer_debug ("<MATRIX_START>{NL}");
 
-    int tok = curr_lexer->previous_token_value ();
-
-    if (! (tok == ';' || tok == '[' || tok == '{'))
-      curr_lexer->xunput (';');
+    if (curr_lexer->nesting_level.is_paren ())
+      curr_lexer->gripe_matlab_incompatible ("bare newline inside parentheses");
+    else
+      {
+        int tok = curr_lexer->previous_token_value ();
+
+        if (! (tok == ';' || tok == '[' || tok == '{'))
+          curr_lexer->xunput (';');
+      }
   }
 
 <KLUGE>@ {
     curr_lexer->lexer_debug ("<KLUGE>@");
     curr_lexer->pop_start_state ();
     return curr_lexer->count_token (CHOOSE_ASSIGNMENT);
   }
 
@@ -303,17 +308,17 @@ ANY_INCLUDING_NL (.|{NL})
 
     bool unput_comma = false;
 
     if (curr_lexer->whitespace_is_significant ()
         && curr_lexer->space_follows_previous_token ())
       {
         int tok = curr_lexer->previous_token_value ();
 
-        if (! (tok == ';' || tok == ',' || tok == '[' || tok == '{'
+        if (! (tok == '[' || tok == '{'
                || curr_lexer->previous_token_is_binop ()))
           unput_comma = true;
       }
 
     if (unput_comma)
       {
         yyless (0);
         curr_lexer->xunput (',');
@@ -718,38 +723,40 @@ ANY_INCLUDING_NL (.|{NL})
             else
               {
                 yyless (0);
                 curr_lexer->xunput (',');
               }
           }
         else
           {
-            if (tok == ',' || tok == ';' || tok == '[' || tok == '{'
-                || curr_lexer->previous_token_is_binop ())
+            if (tok == '[' || tok == '{'
+                || curr_lexer->previous_token_is_binop ()
+                || curr_lexer->previous_token_is_keyword ())
               {
                 curr_lexer->current_input_column++;
                 int retval = curr_lexer->handle_string ('\'');
                 return curr_lexer->count_token_internal (retval);
               }
             else
               return curr_lexer->count_token (QUOTE);
           }
       }
     else
       {
-        if (tok == NAME || tok == NUM || tok == IMAG_NUM
-            || tok == ')' || tok == ']' || tok == '}')
-          return curr_lexer->count_token (QUOTE);
-        else
+        if (! tok || tok == '[' || tok == '{' || tok == '('
+            || curr_lexer->previous_token_is_binop ()
+            || curr_lexer->previous_token_is_keyword ())
           {
             curr_lexer->current_input_column++;
             int retval = curr_lexer->handle_string ('\'');
             return curr_lexer->count_token_internal (retval);
           }
+        else
+          return curr_lexer->count_token (QUOTE);
       }
   }
 
 %{
 // Double quotes always begin strings.
 %}
 
 \" {
@@ -758,17 +765,17 @@ ANY_INCLUDING_NL (.|{NL})
     int tok = curr_lexer->previous_token_value ();
 
     bool transpose = false;
 
     if (curr_lexer->whitespace_is_significant ())
       {
         if (curr_lexer->space_follows_previous_token ())
           {
-            if (tok == ',' || tok == ';' || tok == '[' || tok == '{'
+            if (tok == '[' || tok == '{'
                 || curr_lexer->previous_token_is_binop ())
               {
                 curr_lexer->current_input_column++;
                 int retval = curr_lexer->handle_string ('"');
                 return curr_lexer->count_token_internal (retval);
               }
             else
               {
@@ -808,17 +815,34 @@ ANY_INCLUDING_NL (.|{NL})
 "~="    { return curr_lexer->handle_op ("~=", EXPR_NE); }
 "!="    { return curr_lexer->handle_incompatible_op ("!=", EXPR_NE); }
 ">="    { return curr_lexer->handle_op (">=", EXPR_GE); }
 "&"     { return curr_lexer->handle_op ("&", EXPR_AND); }
 "|"     { return curr_lexer->handle_op ("|", EXPR_OR); }
 "<"     { return curr_lexer->handle_op ("<", EXPR_LT); }
 ">"     { return curr_lexer->handle_op (">", EXPR_GT); }
 "*"     { return curr_lexer->handle_op ("*", '*'); }
-"/"     { return curr_lexer->handle_op ("/", '/'); }
+
+"/" {
+    int prev_tok = curr_lexer->previous_token_value ();
+    bool space_before = curr_lexer->space_follows_previous_token ();
+    int c = curr_lexer->text_yyinput ();
+    curr_lexer->xunput (c);
+    bool space_after = (c == ' ' || c == '\t');
+
+    if (space_before && ! space_after
+        && curr_lexer->previous_token_may_be_command ())
+      {
+        yyless (0);
+        curr_lexer->push_start_state (COMMAND_START);
+      }
+    else
+      return curr_lexer->handle_op ("/", '/');
+  }
+
 "\\"    { return curr_lexer->handle_op ("\\", LEFTDIV); }
 "^"     { return curr_lexer->handle_op ("^", POW); }
 "**"    { return curr_lexer->handle_incompatible_op ("**", POW); }
 "&&"    { return curr_lexer->handle_op ("&&", EXPR_AND_AND); }
 "||"    { return curr_lexer->handle_op ("||", EXPR_OR_OR); }
 "<<"    { return curr_lexer->handle_incompatible_op ("<<", LSHIFT); }
 ">>"    { return curr_lexer->handle_incompatible_op (">>", RSHIFT); }
 
@@ -937,17 +961,17 @@ ANY_INCLUDING_NL (.|{NL})
 
     bool unput_comma = false;
 
     if (curr_lexer->whitespace_is_significant ()
         && curr_lexer->space_follows_previous_token ())
       {
         int tok = curr_lexer->previous_token_value ();
 
-        if (! (tok == ';' || tok == ',' || tok == '[' || tok == '{'
+        if (! (tok == '[' || tok == '{'
                || curr_lexer->previous_token_is_binop ()))
           unput_comma = true;
       }
 
     if (unput_comma)
       {
         yyless (0);
         curr_lexer->xunput (',');
@@ -1239,17 +1263,17 @@ ANY_INCLUDING_NL (.|{NL})
 
     bool unput_comma = false;
 
     if (curr_lexer->whitespace_is_significant ()
         && curr_lexer->space_follows_previous_token ())
       {
         int tok = curr_lexer->previous_token_value ();
 
-        if (! (tok == ';' || tok == ',' || tok == '[' || tok == '{'
+        if (! (tok == '[' || tok == '{'
                || curr_lexer->previous_token_is_binop ()))
           unput_comma = true;
       }
 
     if (unput_comma)
       {
         yyless (0);
         curr_lexer->xunput (',');
@@ -1745,16 +1769,23 @@ lexical_feedback::previous_token_is_bino
           || tok == EXPR_NE || tok == EXPR_NOT || tok == EXPR_OR
           || tok == EXPR_OR_OR || tok == LEFTDIV || tok == LEFTDIV_EQ
           || tok == LSHIFT || tok == LSHIFT_EQ || tok == MUL_EQ
           || tok == OR_EQ || tok == POW || tok == POW_EQ
           || tok == RSHIFT || tok == RSHIFT_EQ || tok == SUB_EQ);
 }
 
 bool
+lexical_feedback::previous_token_is_keyword (void) const
+{
+  const token *tok = tokens.front ();
+  return tok ? tok->is_keyword () : false;
+}
+
+bool
 lexical_feedback::previous_token_may_be_command (void) const
 {
   const token *tok = tokens.front ();
   return tok ? tok->may_be_command () : false;
 }
 
 static bool
 looks_like_copyright (const std::string& s)
@@ -2120,18 +2151,17 @@ octave_lexer::is_keyword_token (const st
           break;
 
         case endclassdef_kw:
           tok_val = new token (endclassdef_kw, token::classdef_end, l, c);
           at_beginning_of_statement = true;
           break;
 
         case endenumeration_kw:
-          tok_val = new token (endenumeration_kw, token::enumeration_end,
-                               l, c);
+          tok_val = new token (endenumeration_kw, token::enumeration_end, l, c);
           at_beginning_of_statement = true;
           break;
 
         case endevents_kw:
           tok_val = new token (endevents_kw, token::events_end, l, c);
           at_beginning_of_statement = true;
           break;
 
@@ -2216,33 +2246,34 @@ octave_lexer::is_keyword_token (const st
             input_line_number = 1;
           break;
 
         case magic_file_kw:
           {
             if ((reading_fcn_file || reading_script_file
                  || reading_classdef_file)
                 && ! fcn_file_full_name.empty ())
-              tok_val = new token (magic_file_kw, fcn_file_full_name, l, c);
+              tok_val = new token (magic_file_kw, true,
+                                   fcn_file_full_name, l, c);
             else
               tok_val = new token (magic_file_kw, "stdin", l, c);
           }
           break;
 
         case magic_line_kw:
           tok_val = new token (magic_line_kw, static_cast<double> (l),
                                "", l, c);
           break;
 
         default:
           panic_impossible ();
         }
 
       if (! tok_val)
-        tok_val = new token (kw->tok, l, c);
+        tok_val = new token (kw->tok, true, l, c);
 
       push_token (tok_val);
 
       return kw->tok;
     }
 
   return 0;
 }
@@ -3438,18 +3469,17 @@ octave_lexer::maybe_unput_comma_before_u
 
   if (whitespace_is_significant () && space_follows_previous_token ())
     {
       int c = text_yyinput ();
       xunput (c);
 
       bool space_after = (c == ' ' || c == '\t');
 
-      if (! (prev_tok == ';' || prev_tok == ','
-             || prev_tok == '[' || prev_tok == '{'
+      if (! (prev_tok == '[' || prev_tok == '{'
              || previous_token_is_binop ()
              || ((tok == '+' || tok == '-') && space_after)))
         unput_comma = true;
     }
 
   return unput_comma;
 }
 
diff --git a/libinterp/parse-tree/token.cc b/libinterp/parse-tree/token.cc
--- a/libinterp/parse-tree/token.cc
+++ b/libinterp/parse-tree/token.cc
@@ -37,16 +37,26 @@ token::token (int tv, int l, int c)
   maybe_cmd = false;
   tspc = false;
   line_num = l;
   column_num = c;
   tok_val = tv;
   type_tag = generic_token;
 }
 
+token::token (int tv, bool is_kw, int l, int c)
+{
+  maybe_cmd = false;
+  tspc = false;
+  line_num = l;
+  column_num = c;
+  tok_val = tv;
+  type_tag = is_kw ? keyword_token : generic_token;
+}
+
 token::token (int tv, const std::string& s, int l, int c)
 {
   maybe_cmd = false;
   tspc = false;
   line_num = l;
   column_num = c;
   tok_val = tv;
   type_tag = string_token;
@@ -130,16 +140,22 @@ token::text (void) const
 
 double
 token::number (void) const
 {
   assert (type_tag == double_token);
   return num;
 }
 
+token::token_type
+token::ttype (void) const
+{
+  return type_tag;
+}
+
 token::end_tok_type
 token::ettype (void) const
 {
   assert (type_tag == ettype_token);
   return et;
 }
 
 symbol_table::symbol_record *
diff --git a/libinterp/parse-tree/token.h b/libinterp/parse-tree/token.h
--- a/libinterp/parse-tree/token.h
+++ b/libinterp/parse-tree/token.h
@@ -30,16 +30,17 @@ along with Octave; see the file COPYING.
 class
 token
 {
 public:
 
   enum token_type
     {
       generic_token,
+      keyword_token,
       string_token,
       double_token,
       ettype_token,
       sym_rec_token,
       scls_rec_token,
       meta_rec_token
     };
 
@@ -57,16 +58,17 @@ public:
       properties_end,
       switch_end,
       while_end,
       try_catch_end,
       unwind_protect_end
     };
 
   token (int tv, int l = -1, int c = -1);
+  token (int tv, bool is_keyword, int l = -1, int c = -1);
   token (int tv, const std::string& s, int l = -1, int c = -1);
   token (int tv, double d, const std::string& s = std::string (),
          int l = -1, int c = -1);
   token (int tv, end_tok_type t, int l = -1, int c = -1);
   token (int tv, symbol_table::symbol_record *s, int l = -1, int c = -1);
   token (int tv, symbol_table::symbol_record *cls,
          symbol_table::symbol_record *pkg, int l = -1, int c = -1);
   token (int tv, symbol_table::symbol_record *mth,
@@ -82,18 +84,24 @@ public:
   bool space_follows_token (void) const { return tspc; }
 
   int token_value (void) const { return tok_val; }
   bool token_value_is (int tv) const { return tv == tok_val; }
 
   int line (void) const { return line_num; }
   int column (void) const { return column_num; }
 
+  bool is_keyword (void) const
+  {
+    return type_tag == keyword_token || type_tag == ettype_token;
+  }
+
   std::string text (void) const;
   double number (void) const;
+  token_type ttype (void) const;
   end_tok_type ettype (void) const;
   symbol_table::symbol_record *sym_rec (void);
 
   symbol_table::symbol_record *method_rec (void);
   symbol_table::symbol_record *class_rec (void);
   symbol_table::symbol_record *package_rec (void);
 
   symbol_table::symbol_record *meta_class_rec (void);
