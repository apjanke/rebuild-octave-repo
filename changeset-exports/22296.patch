# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1471240889 14400
#      Mon Aug 15 02:01:29 2016 -0400
# Node ID 8b18f46f642754504f580d54069a9937d87fc3a0
# Parent  12f1d273d22a7293cc8399224e746f48353817ca
revamp double, single, int type conversions

* ov-type-conv.h: Delete.
* libinterp/octave-value/module.mk: Update.

* op-double-conv.cc, op-float-conv.cc, op-int-conv.cc: Delete.
* libinterp/operators/module.mk: Update.

* ov.h, ov.cc, ov-base.h, ov-base.cc (octave_value::as_double,
octave_value::as_single, octave_value:as_int8, octave_value:as_int16,
octave_value:as_int32, octave_value:as_int64, octave_value:as_uint8,
octave_value:as_uint16, octave_value:as_uint32,
octave_value:as_uint64): New functions.

* ov.cc (Fdouble, Fsingle, Fint8, Fint16, Fint32, Fint64, Fuint8,
Fuint16, Fuint32, Fuint64): Move here.  Simply call as_double,
as_single, etc. member functions.

* ov-base-int.cc, ov-base-int.h, ov-base-scalar.cc, ov-bool-mat.cc,
ov-bool-mat.h, ov-bool-sparse.cc, ov-bool-sparse.h, ov-bool.cc,
ov-bool.h, ov-ch-mat.cc, ov-ch-mat.h, ov-complex.cc, ov-complex.h,
ov-cx-diag.cc, ov-cx-diag.h, ov-cx-mat.cc, ov-cx-mat.h,
ov-cx-sparse.cc, ov-cx-sparse.h, ov-float.cc, ov-float.h,
ov-flt-complex.cc, ov-flt-complex.h, ov-flt-cx-diag.cc,
ov-flt-cx-diag.h, ov-flt-cx-mat.cc, ov-flt-cx-mat.h,
ov-flt-re-diag.cc, ov-flt-re-diag.h, ov-flt-re-mat.cc,
ov-flt-re-mat.h, ov-int16.cc, ov-int32.cc, ov-int64.cc, ov-int8.cc,
ov-perm.cc, ov-perm.h, ov-range.cc, ov-range.h, ov-re-diag.cc,
ov-re-diag.h, ov-re-mat.cc, ov-re-mat.h, ov-re-sparse.cc,
ov-re-sparse.h, ov-scalar.cc, ov-scalar.h, ov-uint16.cc, ov-uint32.cc,
ov-uint64.cc, ov-uint8.cc:
Define as_double, as_single, etc. member functions as appropriate.

* ov-typeinfo.h, ov-typeinfo.cc
(octave_value_typeinfo::type_conv_ops): Delete data member.  Remove
all uses.
(octave_value_typeinfo::register_type_conv_op): Delete.
(octave_value_typeinfo::do_register_type_conv_op): Delete.
(octave_value_typeinfo::do_lookup_type_conv_op): Delete.

* ops.h (INSTALL_CONVOP, CONVDECLX, DEFCONVFNX, DEFCONVFNX2, DEFDBLCONVFN,
DEFFLTCONVFN, DEFSTRINTCONVFN, DEFSTRDBLCONVFN, DEFSTRFLTCONVFN,
DEFCONVFN, DEFCONVFN2): Delete obsolete macros.

* op-bm-bm.cc, op-cdm-cdm.cc, op-cm-cm.cc, op-cs-cs.cc, op-dm-dm.cc,
op-fcdm-fcdm.cc, op-fcm-fcm.cc, op-fcs-fcs.cc, op-fdm-fdm.cc,
op-fm-fm.cc, op-fs-fs.cc, op-m-m.cc, op-pm-pm.cc, op-s-s.cc,
op-sbm-sbm.cc: Delete unused type conversion functions.

diff --git a/libinterp/octave-value/module.mk b/libinterp/octave-value/module.mk
--- a/libinterp/octave-value/module.mk
+++ b/libinterp/octave-value/module.mk
@@ -51,17 +51,16 @@ OCTAVE_VALUE_INC = \
   libinterp/octave-value/ov-oncleanup.h \
   libinterp/octave-value/ov-perm.h \
   libinterp/octave-value/ov-range.h \
   libinterp/octave-value/ov-re-diag.h \
   libinterp/octave-value/ov-re-mat.h \
   libinterp/octave-value/ov-scalar.h \
   libinterp/octave-value/ov-str-mat.h \
   libinterp/octave-value/ov-struct.h \
-  libinterp/octave-value/ov-type-conv.h \
   libinterp/octave-value/ov-typeinfo.h \
   libinterp/octave-value/ov-usr-fcn.h \
   libinterp/octave-value/ov.h \
   libinterp/octave-value/ovl.h \
   $(OV_INTTYPE_INC) \
   $(OV_SPARSE_INC)
 
 OV_INTTYPE_SRC = \
diff --git a/libinterp/octave-value/ov-base-int.cc b/libinterp/octave-value/ov-base-int.cc
--- a/libinterp/octave-value/ov-base-int.cc
+++ b/libinterp/octave-value/ov-base-int.cc
@@ -23,16 +23,27 @@ along with Octave; see the file COPYING.
 // This file should not include config.h.  It is only included in other
 // C++ source files that should have included config.h before including
 // this file.
 
 #include <iostream>
 #include <limits>
 #include <vector>
 
+#include "dNDArray.h"
+#include "fNDArray.h"
+#include "int8NDArray.h"
+#include "int16NDArray.h"
+#include "int32NDArray.h"
+#include "int64NDArray.h"
+#include "uint8NDArray.h"
+#include "uint16NDArray.h"
+#include "uint32NDArray.h"
+#include "uint64NDArray.h"
+
 #include "lo-ieee.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "quit.h"
 #include "oct-locbuf.h"
 
 #include "defun.h"
 #include "errwarn.h"
@@ -178,16 +189,86 @@ octave_base_int_matrix<T>::convert_to_st
         chm (i) = static_cast<char> (ival);
     }
 
   retval = octave_value (chm, type);
 
   return retval;
 }
 
+template <typename MT>
+octave_value
+octave_base_int_matrix<MT>::as_double (void) const
+{
+  return NDArray (this->matrix);
+}
+
+template <typename MT>
+octave_value
+octave_base_int_matrix<MT>::as_single (void) const
+{
+  return FloatNDArray (this->matrix);
+}
+
+template <typename MT>
+octave_value
+octave_base_int_matrix<MT>::as_int8 (void) const
+{
+  return int8NDArray (this->matrix);
+}
+
+template <typename MT>
+octave_value
+octave_base_int_matrix<MT>::as_int16 (void) const
+{
+  return int16NDArray (this->matrix);
+}
+
+template <typename MT>
+octave_value
+octave_base_int_matrix<MT>::as_int32 (void) const
+{
+  return int32NDArray (this->matrix);
+}
+
+template <typename MT>
+octave_value
+octave_base_int_matrix<MT>::as_int64 (void) const
+{
+  return int64NDArray (this->matrix);
+}
+
+template <typename MT>
+octave_value
+octave_base_int_matrix<MT>::as_uint8 (void) const
+{
+  return uint8NDArray (this->matrix);
+}
+
+template <typename MT>
+octave_value
+octave_base_int_matrix<MT>::as_uint16 (void) const
+{
+  return uint16NDArray (this->matrix);
+}
+
+template <typename MT>
+octave_value
+octave_base_int_matrix<MT>::as_uint32 (void) const
+{
+  return uint32NDArray (this->matrix);
+}
+
+template <typename MT>
+octave_value
+octave_base_int_matrix<MT>::as_uint64 (void) const
+{
+  return uint64NDArray (this->matrix);
+}
+
 template <typename T>
 bool
 octave_base_int_matrix<T>::save_ascii (std::ostream& os)
 {
   dim_vector dv = this->dims ();
 
   os << "# ndims: " << dv.ndims () << "\n";
 
@@ -485,16 +566,86 @@ octave_base_int_scalar<T>::convert_to_st
     }
   else
     retval = octave_value (std::string (1, static_cast<char> (ival)), type);
 
   return retval;
 }
 
 template <typename T>
+octave_value
+octave_base_int_scalar<T>::as_double (void) const
+{
+  return static_cast<double> (this->scalar);
+}
+
+template <typename T>
+octave_value
+octave_base_int_scalar<T>::as_single (void) const
+{
+  return static_cast<float> (this->scalar);
+}
+
+template <typename T>
+octave_value
+octave_base_int_scalar<T>::as_int8 (void) const
+{
+  return octave_int8 (this->scalar);
+}
+
+template <typename T>
+octave_value
+octave_base_int_scalar<T>::as_int16 (void) const
+{
+  return octave_int16 (this->scalar);
+}
+
+template <typename T>
+octave_value
+octave_base_int_scalar<T>::as_int32 (void) const
+{
+  return octave_int32 (this->scalar);
+}
+
+template <typename T>
+octave_value
+octave_base_int_scalar<T>::as_int64 (void) const
+{
+  return octave_int64 (this->scalar);
+}
+
+template <typename T>
+octave_value
+octave_base_int_scalar<T>::as_uint8 (void) const
+{
+  return octave_uint8 (this->scalar);
+}
+
+template <typename T>
+octave_value
+octave_base_int_scalar<T>::as_uint16 (void) const
+{
+  return octave_uint16 (this->scalar);
+}
+
+template <typename T>
+octave_value
+octave_base_int_scalar<T>::as_uint32 (void) const
+{
+  return octave_uint32 (this->scalar);
+}
+
+template <typename T>
+octave_value
+octave_base_int_scalar<T>::as_uint64 (void) const
+{
+  return octave_uint64 (this->scalar);
+}
+
+template <typename T>
 bool
 octave_base_int_scalar<T>::save_ascii (std::ostream& os)
 {
   os << this->scalar << "\n";
   return true;
 }
 
 template <typename T>
diff --git a/libinterp/octave-value/ov-base-int.h b/libinterp/octave-value/ov-base-int.h
--- a/libinterp/octave-value/ov-base-int.h
+++ b/libinterp/octave-value/ov-base-int.h
@@ -66,16 +66,29 @@ public:
   //  void increment (void) { matrix += 1; }
 
   //  void decrement (void) { matrix -= 1; }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   octave_value convert_to_str_internal (bool, bool, char type) const;
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
+  octave_value as_int8 (void) const;
+  octave_value as_int16 (void) const;
+  octave_value as_int32 (void) const;
+  octave_value as_int64 (void) const;
+
+  octave_value as_uint8 (void) const;
+  octave_value as_uint16 (void) const;
+  octave_value as_uint32 (void) const;
+  octave_value as_uint64 (void) const;
+
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool&);
 
   bool load_binary (std::istream& is, bool swap,
                     octave::mach_info::float_format);
@@ -111,16 +124,29 @@ public:
   bool is_real_scalar (void) const { return true; }
 
   //  void increment (void) { scalar += 1; }
 
   //  void decrement (void) { scalar -= 1; }
 
   octave_value convert_to_str_internal (bool, bool, char type) const;
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
+  octave_value as_int8 (void) const;
+  octave_value as_int16 (void) const;
+  octave_value as_int32 (void) const;
+  octave_value as_int64 (void) const;
+
+  octave_value as_uint8 (void) const;
+  octave_value as_uint16 (void) const;
+  octave_value as_uint32 (void) const;
+  octave_value as_uint64 (void) const;
+
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool&);
 
   bool load_binary (std::istream& is, bool swap,
                     octave::mach_info::float_format);
diff --git a/libinterp/octave-value/ov-base-scalar.cc b/libinterp/octave-value/ov-base-scalar.cc
--- a/libinterp/octave-value/ov-base-scalar.cc
+++ b/libinterp/octave-value/ov-base-scalar.cc
@@ -21,16 +21,18 @@ along with Octave; see the file COPYING.
 */
 
 // This file should not include config.h.  It is only included in other
 // C++ source files that should have included config.h before including
 // this file.
 
 #include <iostream>
 
+#include "oct-inttypes.h"
+
 #include "ovl.h"
 #include "ov-base.h"
 #include "ov-cx-mat.h"
 #include "ov-re-mat.h"
 #include "ov-base-scalar.h"
 #include "pr-output.h"
 
 template <typename ST>
diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -132,16 +132,76 @@ octave_base_value::squeeze (void) const
 }
 
 octave_value
 octave_base_value::full_value (void) const
 {
   err_wrong_type_arg ("full: invalid operation for %s type", type_name ());
 }
 
+octave_value
+octave_base_value::as_double (void) const
+{
+  err_invalid_conversion (type_name (), "double");
+}
+
+octave_value
+octave_base_value::as_single (void) const
+{
+  err_invalid_conversion (type_name (), "single");
+}
+
+octave_value
+octave_base_value::as_int8 (void) const
+{
+  err_invalid_conversion (type_name (), "int8");
+}
+
+octave_value
+octave_base_value::as_int16 (void) const
+{
+  err_invalid_conversion (type_name (), "int16");
+}
+
+octave_value
+octave_base_value::as_int32 (void) const
+{
+  err_invalid_conversion (type_name (), "int32");
+}
+
+octave_value
+octave_base_value::as_int64 (void) const
+{
+  err_invalid_conversion (type_name (), "int64");
+}
+
+octave_value
+octave_base_value::as_uint8 (void) const
+{
+  err_invalid_conversion (type_name (), "uint8");
+}
+
+octave_value
+octave_base_value::as_uint16 (void) const
+{
+  err_invalid_conversion (type_name (), "uint16");
+}
+
+octave_value
+octave_base_value::as_uint32 (void) const
+{
+  err_invalid_conversion (type_name (), "uint32");
+}
+
+octave_value
+octave_base_value::as_uint64 (void) const
+{
+  err_invalid_conversion (type_name (), "uint64");
+}
+
 Matrix
 octave_base_value::size (void)
 {
   const dim_vector dv = dims ();
   Matrix mdv (1, dv.ndims ());
   for (octave_idx_type i = 0; i < dv.ndims (); i++)
     mdv(i) = dv(i);
   return mdv;
@@ -1347,32 +1407,36 @@ octave_base_value::fast_elem_insert (oct
 }
 
 bool
 octave_base_value::fast_elem_insert_self (void *, builtin_type_t) const
 {
   return false;
 }
 
-CONVDECLX (matrix_conv)
+static octave_base_value *
+oct_conv_matrix_conv (const octave_base_value&)
 {
   return new octave_matrix ();
 }
 
-CONVDECLX (complex_matrix_conv)
+static octave_base_value *
+oct_conv_complex_matrix_conv (const octave_base_value&)
 {
   return new octave_complex_matrix ();
 }
 
-CONVDECLX (string_conv)
+static octave_base_value *
+oct_conv_string_conv (const octave_base_value&)
 {
   return new octave_char_matrix_str ();
 }
 
-CONVDECLX (cell_conv)
+static octave_base_value *
+oct_conv_cell_conv (const octave_base_value&)
 {
   return new octave_cell ();
 }
 
 static inline octave_value_list
 sanitize (const octave_value_list& ovl)
 {
   octave_value_list retval = ovl;
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -237,16 +237,29 @@ public:
   virtual type_conv_info
   numeric_demotion_function (void) const
   { return type_conv_info (); }
 
   virtual octave_value squeeze (void) const;
 
   virtual octave_value full_value (void) const;
 
+  virtual octave_value as_double (void) const;
+  virtual octave_value as_single (void) const;
+
+  virtual octave_value as_int8 (void) const;
+  virtual octave_value as_int16 (void) const;
+  virtual octave_value as_int32 (void) const;
+  virtual octave_value as_int64 (void) const;
+
+  virtual octave_value as_uint8 (void) const;
+  virtual octave_value as_uint16 (void) const;
+  virtual octave_value as_uint32 (void) const;
+  virtual octave_value as_uint64 (void) const;
+
   virtual octave_base_value *try_narrowing_conversion (void) { return 0; }
 
   virtual void maybe_economize (void) { }
 
   virtual Matrix size (void);
 
   virtual octave_idx_type numel (const octave_value_list&);
 
diff --git a/libinterp/octave-value/ov-bool-mat.cc b/libinterp/octave-value/ov-bool-mat.cc
--- a/libinterp/octave-value/ov-bool-mat.cc
+++ b/libinterp/octave-value/ov-bool-mat.cc
@@ -23,16 +23,27 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <iostream>
 #include <vector>
 
+#include "dNDArray.h"
+#include "fNDArray.h"
+#include "int8NDArray.h"
+#include "int16NDArray.h"
+#include "int32NDArray.h"
+#include "int64NDArray.h"
+#include "uint8NDArray.h"
+#include "uint16NDArray.h"
+#include "uint32NDArray.h"
+#include "uint64NDArray.h"
+
 #include "lo-ieee.h"
 #include "mx-base.h"
 #include "oct-locbuf.h"
 
 #include "defun.h"
 #include "errwarn.h"
 #include "mxarray.h"
 #include "ovl.h"
@@ -161,16 +172,76 @@ octave_bool_matrix::float_complex_value 
 octave_value
 octave_bool_matrix::convert_to_str_internal (bool pad, bool force,
                                              char type) const
 {
   octave_value tmp = octave_value (array_value ());
   return tmp.convert_to_str (pad, force, type);
 }
 
+octave_value
+octave_bool_matrix::as_double (void) const
+{
+  return NDArray (matrix);
+}
+
+octave_value
+octave_bool_matrix::as_single (void) const
+{
+  return FloatNDArray (matrix);
+}
+
+octave_value
+octave_bool_matrix::as_int8 (void) const
+{
+  return int8NDArray (matrix);
+}
+
+octave_value
+octave_bool_matrix::as_int16 (void) const
+{
+  return int16NDArray (matrix);
+}
+
+octave_value
+octave_bool_matrix::as_int32 (void) const
+{
+  return int32NDArray (matrix);
+}
+
+octave_value
+octave_bool_matrix::as_int64 (void) const
+{
+  return int64NDArray (matrix);
+}
+
+octave_value
+octave_bool_matrix::as_uint8 (void) const
+{
+  return uint8NDArray (matrix);
+}
+
+octave_value
+octave_bool_matrix::as_uint16 (void) const
+{
+  return uint16NDArray (matrix);
+}
+
+octave_value
+octave_bool_matrix::as_uint32 (void) const
+{
+  return uint32NDArray (matrix);
+}
+
+octave_value
+octave_bool_matrix::as_uint64 (void) const
+{
+  return uint64NDArray (matrix);
+}
+
 void
 octave_bool_matrix::print_raw (std::ostream& os,
                                bool pr_as_read_syntax) const
 {
   octave_print_internal (os, matrix, pr_as_read_syntax,
                          current_print_indent_level ());
 }
 
diff --git a/libinterp/octave-value/ov-bool-mat.h b/libinterp/octave-value/ov-bool-mat.h
--- a/libinterp/octave-value/ov-bool-mat.h
+++ b/libinterp/octave-value/ov-bool-mat.h
@@ -188,16 +188,29 @@ public:
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const
   { return SparseComplexMatrix (ComplexMatrix (boolMatrix (matrix))); }
 
   SparseBoolMatrix sparse_bool_matrix_value (bool = false) const
   { return SparseBoolMatrix (boolMatrix (matrix)); }
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
+  octave_value as_int8 (void) const;
+  octave_value as_int16 (void) const;
+  octave_value as_int32 (void) const;
+  octave_value as_int64 (void) const;
+
+  octave_value as_uint8 (void) const;
+  octave_value as_uint16 (void) const;
+  octave_value as_uint32 (void) const;
+  octave_value as_uint64 (void) const;
+
   // Use matrix_ref here to clear index cache.
   void invert (void) { matrix_ref ().invert (); }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
diff --git a/libinterp/octave-value/ov-bool-sparse.cc b/libinterp/octave-value/ov-bool-sparse.cc
--- a/libinterp/octave-value/ov-bool-sparse.cc
+++ b/libinterp/octave-value/ov-bool-sparse.cc
@@ -199,16 +199,22 @@ octave_sparse_bool_matrix::sparse_matrix
 }
 
 SparseComplexMatrix
 octave_sparse_bool_matrix::sparse_complex_matrix_value (bool) const
 {
   return SparseComplexMatrix (this->matrix);
 }
 
+octave_value
+octave_sparse_bool_matrix::as_double (void) const
+{
+  return SparseMatrix (this->matrix);
+}
+
 bool
 octave_sparse_bool_matrix::save_binary (std::ostream& os, bool&)
 {
   dim_vector dv = this->dims ();
   if (dv.ndims () < 1)
     return false;
 
   // Ensure that additional memory is deallocated
diff --git a/libinterp/octave-value/ov-bool-sparse.h b/libinterp/octave-value/ov-bool-sparse.h
--- a/libinterp/octave-value/ov-bool-sparse.h
+++ b/libinterp/octave-value/ov-bool-sparse.h
@@ -127,16 +127,18 @@ public:
 
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const;
 
   SparseBoolMatrix sparse_bool_matrix_value (bool = false) const
   { return matrix; }
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
+  octave_value as_double (void) const;
+
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap,
                     octave::mach_info::float_format fmt);
 
   bool save_hdf5 (octave_hdf5_id loc_id, const char *name, bool save_as_floats);
 
   bool load_hdf5 (octave_hdf5_id loc_id, const char *name);
diff --git a/libinterp/octave-value/ov-bool.cc b/libinterp/octave-value/ov-bool.cc
--- a/libinterp/octave-value/ov-bool.cc
+++ b/libinterp/octave-value/ov-bool.cc
@@ -21,16 +21,18 @@ along with Octave; see the file COPYING.
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <iostream>
 
+#include "oct-inttypes.h"
+
 #include "mx-base.h"
 
 #include "errwarn.h"
 #include "mxarray.h"
 #include "oct-hdf5.h"
 #include "ovl.h"
 #include "ops.h"
 #include "ov-bool.h"
@@ -84,16 +86,76 @@ octave_bool::do_index_op (const octave_v
   // to this problem.
 
   octave_value tmp (new octave_bool_matrix (bool_matrix_value ()));
 
   return tmp.do_index_op (idx, resize_ok);
 }
 
 octave_value
+octave_bool::as_double (void) const
+{
+  return static_cast<double> (scalar);
+}
+
+octave_value
+octave_bool::as_single (void) const
+{
+  return static_cast<float> (scalar);
+}
+
+octave_value
+octave_bool::as_int8 (void) const
+{
+  return octave_int8 (scalar);
+}
+
+octave_value
+octave_bool::as_int16 (void) const
+{
+  return octave_int16 (scalar);
+}
+
+octave_value
+octave_bool::as_int32 (void) const
+{
+  return octave_int32 (scalar);
+}
+
+octave_value
+octave_bool::as_int64 (void) const
+{
+  return octave_int64 (scalar);
+}
+
+octave_value
+octave_bool::as_uint8 (void) const
+{
+  return octave_uint8 (scalar);
+}
+
+octave_value
+octave_bool::as_uint16 (void) const
+{
+  return octave_uint16 (scalar);
+}
+
+octave_value
+octave_bool::as_uint32 (void) const
+{
+  return octave_uint32 (scalar);
+}
+
+octave_value
+octave_bool::as_uint64 (void) const
+{
+  return octave_uint64 (scalar);
+}
+
+octave_value
 octave_bool::resize (const dim_vector& dv, bool fill) const
 {
   if (fill)
     {
       boolNDArray retval (dv, false);
       if (dv.numel ())
         retval(0) = scalar;
       return retval;
diff --git a/libinterp/octave-value/ov-bool.h b/libinterp/octave-value/ov-bool.h
--- a/libinterp/octave-value/ov-bool.h
+++ b/libinterp/octave-value/ov-bool.h
@@ -202,16 +202,29 @@ public:
   bool bool_value (bool = false) const { return scalar; }
 
   boolMatrix bool_matrix_value (bool = false) const
   { return boolMatrix (1, 1, scalar); }
 
   boolNDArray bool_array_value (bool = false) const
   { return boolNDArray (dim_vector (1, 1), scalar); }
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
+  octave_value as_int8 (void) const;
+  octave_value as_int16 (void) const;
+  octave_value as_int32 (void) const;
+  octave_value as_int64 (void) const;
+
+  octave_value as_uint8 (void) const;
+  octave_value as_uint16 (void) const;
+  octave_value as_uint32 (void) const;
+  octave_value as_uint64 (void) const;
+
   octave_value resize (const dim_vector& dv, bool fill = false) const;
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
diff --git a/libinterp/octave-value/ov-ch-mat.cc b/libinterp/octave-value/ov-ch-mat.cc
--- a/libinterp/octave-value/ov-ch-mat.cc
+++ b/libinterp/octave-value/ov-ch-mat.cc
@@ -23,16 +23,27 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <cctype>
 #include <iostream>
 
+#include "dNDArray.h"
+#include "fNDArray.h"
+#include "int8NDArray.h"
+#include "int16NDArray.h"
+#include "int32NDArray.h"
+#include "int64NDArray.h"
+#include "uint8NDArray.h"
+#include "uint16NDArray.h"
+#include "uint32NDArray.h"
+#include "uint64NDArray.h"
+
 #include "lo-ieee.h"
 #include "mx-base.h"
 
 #include "mxarray.h"
 #include "ov-base.h"
 #include "ov-base-mat.h"
 #include "ov-base-mat.cc"
 #include "ov-ch-mat.h"
@@ -146,16 +157,76 @@ octave_char_matrix::float_complex_value 
   warn_implicit_conversion ("Octave:array-to-scalar",
                             "character matrix", "complex scalar");
 
   retval = static_cast<unsigned char> (matrix(0, 0));
 
   return retval;
 }
 
+octave_value
+octave_char_matrix::as_double (void) const
+{
+  return NDArray (matrix);
+}
+
+octave_value
+octave_char_matrix::as_single (void) const
+{
+  return FloatNDArray (matrix);
+}
+
+octave_value
+octave_char_matrix::as_int8 (void) const
+{
+  return int8NDArray (matrix);
+}
+
+octave_value
+octave_char_matrix::as_int16 (void) const
+{
+  return int16NDArray (matrix);
+}
+
+octave_value
+octave_char_matrix::as_int32 (void) const
+{
+  return int32NDArray (matrix);
+}
+
+octave_value
+octave_char_matrix::as_int64 (void) const
+{
+  return int64NDArray (matrix);
+}
+
+octave_value
+octave_char_matrix::as_uint8 (void) const
+{
+  return uint8NDArray (matrix);
+}
+
+octave_value
+octave_char_matrix::as_uint16 (void) const
+{
+  return uint16NDArray (matrix);
+}
+
+octave_value
+octave_char_matrix::as_uint32 (void) const
+{
+  return uint32NDArray (matrix);
+}
+
+octave_value
+octave_char_matrix::as_uint64 (void) const
+{
+  return uint64NDArray (matrix);
+}
+
 void
 octave_char_matrix::print_raw (std::ostream& os,
                                bool pr_as_read_syntax) const
 {
   octave_print_internal (os, matrix, pr_as_read_syntax,
                          current_print_indent_level ());
 }
 
diff --git a/libinterp/octave-value/ov-ch-mat.h b/libinterp/octave-value/ov-ch-mat.h
--- a/libinterp/octave-value/ov-ch-mat.h
+++ b/libinterp/octave-value/ov-ch-mat.h
@@ -143,16 +143,29 @@ public:
   { return charMatrix (matrix); }
 
   charNDArray char_array_value (bool = false) const
   { return matrix; }
 
   octave_value convert_to_str_internal (bool, bool, char type) const
   { return octave_value (matrix, type); }
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
+  octave_value as_int8 (void) const;
+  octave_value as_int16 (void) const;
+  octave_value as_int32 (void) const;
+  octave_value as_int64 (void) const;
+
+  octave_value as_uint8 (void) const;
+  octave_value as_uint16 (void) const;
+  octave_value as_uint32 (void) const;
+  octave_value as_uint64 (void) const;
+
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   // Unsafe.  This function exists to support the MEX interface.
   // You should not use it anywhere else.
   void *mex_get_data (void) const { return matrix.mex_get_data (); }
 
   mxArray *as_mxArray (void) const;
 
diff --git a/libinterp/octave-value/ov-complex.cc b/libinterp/octave-value/ov-complex.cc
--- a/libinterp/octave-value/ov-complex.cc
+++ b/libinterp/octave-value/ov-complex.cc
@@ -282,16 +282,28 @@ octave_complex::resize (const dim_vector
       if (dv.numel ())
         retval(0) = scalar;
 
       return retval;
     }
 }
 
 octave_value
+octave_complex::as_double (void) const
+{
+  return scalar;
+}
+
+octave_value
+octave_complex::as_single (void) const
+{
+  return FloatComplex (scalar);
+}
+
+octave_value
 octave_complex::diag (octave_idx_type m, octave_idx_type n) const
 {
   return ComplexDiagMatrix (Array<Complex> (dim_vector (1, 1), scalar), m, n);
 }
 
 bool
 octave_complex::save_ascii (std::ostream& os)
 {
diff --git a/libinterp/octave-value/ov-complex.h b/libinterp/octave-value/ov-complex.h
--- a/libinterp/octave-value/ov-complex.h
+++ b/libinterp/octave-value/ov-complex.h
@@ -153,16 +153,19 @@ public:
     if (octave::math::isnan (scalar))
       err_nan_to_logical_conversion ();
     if (warn && scalar != 0.0 && scalar != 1.0)
       warn_logical_conversion ();
 
     return boolNDArray (dim_vector (1, 1), scalar != 0.0);
   }
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
   octave_value diag (octave_idx_type m, octave_idx_type n) const;
 
   void increment (void) { scalar += 1.0; }
 
   void decrement (void) { scalar -= 1.0; }
 
   bool save_ascii (std::ostream& os);
 
diff --git a/libinterp/octave-value/ov-cx-diag.cc b/libinterp/octave-value/ov-cx-diag.cc
--- a/libinterp/octave-value/ov-cx-diag.cc
+++ b/libinterp/octave-value/ov-cx-diag.cc
@@ -132,16 +132,28 @@ octave_complex_diag_matrix::complex_diag
 
 FloatComplexDiagMatrix
 octave_complex_diag_matrix::float_complex_diag_matrix_value (bool) const
 {
   return FloatComplexDiagMatrix (matrix);
 }
 
 octave_value
+octave_complex_diag_matrix::as_double (void) const
+{
+  return matrix;
+}
+
+octave_value
+octave_complex_diag_matrix::as_single (void) const
+{
+  return FloatComplexDiagMatrix (matrix);
+}
+
+octave_value
 octave_complex_diag_matrix::map (unary_mapper_t umap) const
 {
   switch (umap)
     {
     case umap_abs:
       return matrix.abs ();
     case umap_real:
       return ::real (matrix);
diff --git a/libinterp/octave-value/ov-cx-diag.h b/libinterp/octave-value/ov-cx-diag.h
--- a/libinterp/octave-value/ov-cx-diag.h
+++ b/libinterp/octave-value/ov-cx-diag.h
@@ -74,16 +74,19 @@ public:
   DiagMatrix diag_matrix_value (bool = false) const;
 
   FloatDiagMatrix float_diag_matrix_value (bool = false) const;
 
   ComplexDiagMatrix complex_diag_matrix_value (bool = false) const;
 
   FloatComplexDiagMatrix float_complex_diag_matrix_value (bool = false) const;
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap,
                     octave::mach_info::float_format fmt);
 
   octave_value map (unary_mapper_t umap) const;
 
 private:
diff --git a/libinterp/octave-value/ov-cx-mat.cc b/libinterp/octave-value/ov-cx-mat.cc
--- a/libinterp/octave-value/ov-cx-mat.cc
+++ b/libinterp/octave-value/ov-cx-mat.cc
@@ -23,16 +23,19 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <iostream>
 #include <vector>
 
+#include "dNDArray.h"
+#include "fNDArray.h"
+
 #include "data-conv.h"
 #include "lo-ieee.h"
 #include "lo-specfun.h"
 #include "lo-mappers.h"
 #include "mx-base.h"
 #include "mach-info.h"
 #include "oct-locbuf.h"
 
@@ -283,16 +286,28 @@ octave_complex_matrix::sparse_matrix_val
 
 SparseComplexMatrix
 octave_complex_matrix::sparse_complex_matrix_value (bool) const
 {
   return SparseComplexMatrix (ComplexMatrix (matrix));
 }
 
 octave_value
+octave_complex_matrix::as_double (void) const
+{
+  return matrix;
+}
+
+octave_value
+octave_complex_matrix::as_single (void) const
+{
+  return FloatComplexNDArray (matrix);
+}
+
+octave_value
 octave_complex_matrix::diag (octave_idx_type k) const
 {
   octave_value retval;
   if (k == 0 && matrix.ndims () == 2
       && (matrix.rows () == 1 || matrix.columns () == 1))
     retval = ComplexDiagMatrix (DiagArray2<Complex> (matrix));
   else
     retval = octave_base_matrix<ComplexNDArray>::diag (k);
diff --git a/libinterp/octave-value/ov-cx-mat.h b/libinterp/octave-value/ov-cx-mat.h
--- a/libinterp/octave-value/ov-cx-mat.h
+++ b/libinterp/octave-value/ov-cx-mat.h
@@ -133,16 +133,19 @@ public:
   boolNDArray bool_array_value (bool warn = false) const;
 
   charNDArray char_array_value (bool frc_str_conv = false) const;
 
   SparseMatrix sparse_matrix_value (bool = false) const;
 
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const;
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
   octave_value diag (octave_idx_type k = 0) const;
 
   octave_value diag (octave_idx_type m, octave_idx_type n) const;
 
   void increment (void) { matrix += Complex (1.0); }
 
   void decrement (void) { matrix -= Complex (1.0); }
 
diff --git a/libinterp/octave-value/ov-cx-sparse.cc b/libinterp/octave-value/ov-cx-sparse.cc
--- a/libinterp/octave-value/ov-cx-sparse.cc
+++ b/libinterp/octave-value/ov-cx-sparse.cc
@@ -216,16 +216,22 @@ octave_sparse_complex_matrix::sparse_boo
     err_nan_to_logical_conversion ();
   if (warn && (! matrix.all_elements_are_real ()
                || real (matrix).any_element_not_one_or_zero ()))
     warn_logical_conversion ();
 
   return mx_el_ne (matrix, Complex (0.0));
 }
 
+octave_value
+octave_sparse_complex_matrix::as_double (void) const
+{
+  return this->matrix;
+}
+
 bool
 octave_sparse_complex_matrix::save_binary (std::ostream& os,
                                            bool& save_as_floats)
 {
   dim_vector dv = this->dims ();
   if (dv.ndims () < 1)
     return false;
 
diff --git a/libinterp/octave-value/ov-cx-sparse.h b/libinterp/octave-value/ov-cx-sparse.h
--- a/libinterp/octave-value/ov-cx-sparse.h
+++ b/libinterp/octave-value/ov-cx-sparse.h
@@ -122,16 +122,18 @@ public:
 
   SparseMatrix sparse_matrix_value (bool = false) const;
 
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const
   { return matrix; }
 
   SparseBoolMatrix sparse_bool_matrix_value (bool warn = false) const;
 
+  octave_value as_double (void) const;
+
 #if 0
   int write (octave_stream& os, int block_size,
              oct_data_conv::data_type output_type, int skip,
              octave::mach_info::float_format flt_fmt) const
   {
     // Yes, for compatibility, we drop the imaginary part here.
     return os.write (matrix_value (true), block_size, output_type,
                      skip, flt_fmt);
diff --git a/libinterp/octave-value/ov-float.cc b/libinterp/octave-value/ov-float.cc
--- a/libinterp/octave-value/ov-float.cc
+++ b/libinterp/octave-value/ov-float.cc
@@ -21,16 +21,18 @@ along with Octave; see the file COPYING.
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <iostream>
 
+#include "oct-inttypes.h"
+
 #include "data-conv.h"
 #include "mach-info.h"
 #include "lo-specfun.h"
 #include "lo-mappers.h"
 
 #include "defun.h"
 #include "errwarn.h"
 #include "mxarray.h"
@@ -95,16 +97,76 @@ octave_float_scalar::resize (const dim_v
       if (dv.numel ())
         retval(0) = scalar;
 
       return retval;
     }
 }
 
 octave_value
+octave_float_scalar::as_double (void) const
+{
+  return static_cast<double> (scalar);
+}
+
+octave_value
+octave_float_scalar::as_single (void) const
+{
+  return scalar;
+}
+
+octave_value
+octave_float_scalar::as_int8 (void) const
+{
+  return octave_int8 (scalar);
+}
+
+octave_value
+octave_float_scalar::as_int16 (void) const
+{
+  return octave_int16 (scalar);
+}
+
+octave_value
+octave_float_scalar::as_int32 (void) const
+{
+  return octave_int32 (scalar);
+}
+
+octave_value
+octave_float_scalar::as_int64 (void) const
+{
+  return octave_int64 (scalar);
+}
+
+octave_value
+octave_float_scalar::as_uint8 (void) const
+{
+  return octave_uint8 (scalar);
+}
+
+octave_value
+octave_float_scalar::as_uint16 (void) const
+{
+  return octave_uint16 (scalar);
+}
+
+octave_value
+octave_float_scalar::as_uint32 (void) const
+{
+  return octave_uint32 (scalar);
+}
+
+octave_value
+octave_float_scalar::as_uint64 (void) const
+{
+  return octave_uint64 (scalar);
+}
+
+octave_value
 octave_float_scalar::diag (octave_idx_type m, octave_idx_type n) const
 {
   return FloatDiagMatrix (Array<float> (dim_vector (1, 1), scalar), m, n);
 }
 
 octave_value
 octave_float_scalar::convert_to_str_internal (bool, bool, char type) const
 {
diff --git a/libinterp/octave-value/ov-float.h b/libinterp/octave-value/ov-float.h
--- a/libinterp/octave-value/ov-float.h
+++ b/libinterp/octave-value/ov-float.h
@@ -213,16 +213,29 @@ public:
     if (octave::math::isnan (scalar))
       err_nan_to_logical_conversion ();
     if (warn && scalar != 0 && scalar != 1)
       warn_logical_conversion ();
 
     return boolNDArray (dim_vector (1, 1), scalar);
   }
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
+  octave_value as_int8 (void) const;
+  octave_value as_int16 (void) const;
+  octave_value as_int32 (void) const;
+  octave_value as_int64 (void) const;
+
+  octave_value as_uint8 (void) const;
+  octave_value as_uint16 (void) const;
+  octave_value as_uint32 (void) const;
+  octave_value as_uint64 (void) const;
+
   octave_value diag (octave_idx_type m, octave_idx_type n) const;
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   void increment (void) { ++scalar; }
 
   void decrement (void) { --scalar; }
 
diff --git a/libinterp/octave-value/ov-flt-complex.cc b/libinterp/octave-value/ov-flt-complex.cc
--- a/libinterp/octave-value/ov-flt-complex.cc
+++ b/libinterp/octave-value/ov-flt-complex.cc
@@ -230,16 +230,28 @@ octave_float_complex::resize (const dim_
       if (dv.numel ())
         retval(0) = scalar;
 
       return retval;
     }
 }
 
 octave_value
+octave_float_complex::as_double (void) const
+{
+  return Complex (scalar);
+}
+
+octave_value
+octave_float_complex::as_single (void) const
+{
+  return scalar;
+}
+
+octave_value
 octave_float_complex::diag (octave_idx_type m, octave_idx_type n) const
 {
   return
     FloatComplexDiagMatrix (Array<FloatComplex> (dim_vector (1, 1), scalar),
                             m, n);
 }
 
 bool
diff --git a/libinterp/octave-value/ov-flt-complex.h b/libinterp/octave-value/ov-flt-complex.h
--- a/libinterp/octave-value/ov-flt-complex.h
+++ b/libinterp/octave-value/ov-flt-complex.h
@@ -149,16 +149,19 @@ public:
     if (octave::math::isnan (scalar))
       err_nan_to_logical_conversion ();
     if (warn && scalar != 0.0f && scalar != 1.0f)
       warn_logical_conversion ();
 
     return boolNDArray (dim_vector (1, 1), scalar != 1.0f);
   }
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
   octave_value diag (octave_idx_type m, octave_idx_type n) const;
 
   void increment (void) { scalar += 1.0; }
 
   void decrement (void) { scalar -= 1.0; }
 
   bool save_ascii (std::ostream& os);
 
diff --git a/libinterp/octave-value/ov-flt-cx-diag.cc b/libinterp/octave-value/ov-flt-cx-diag.cc
--- a/libinterp/octave-value/ov-flt-cx-diag.cc
+++ b/libinterp/octave-value/ov-flt-cx-diag.cc
@@ -113,16 +113,28 @@ octave_float_complex_diag_matrix::comple
 
 FloatComplexDiagMatrix
 octave_float_complex_diag_matrix::float_complex_diag_matrix_value (bool) const
 {
   return matrix;
 }
 
 octave_value
+octave_float_complex_diag_matrix::as_double (void) const
+{
+  return ComplexDiagMatrix (matrix);
+}
+
+octave_value
+octave_float_complex_diag_matrix::as_single (void) const
+{
+  return matrix;
+}
+
+octave_value
 octave_float_complex_diag_matrix::map (unary_mapper_t umap) const
 {
   switch (umap)
     {
     case umap_abs:
       return matrix.abs ();
     case umap_real:
       return ::real (matrix);
diff --git a/libinterp/octave-value/ov-flt-cx-diag.h b/libinterp/octave-value/ov-flt-cx-diag.h
--- a/libinterp/octave-value/ov-flt-cx-diag.h
+++ b/libinterp/octave-value/ov-flt-cx-diag.h
@@ -72,16 +72,19 @@ public:
   DiagMatrix diag_matrix_value (bool = false) const;
 
   FloatDiagMatrix float_diag_matrix_value (bool = false) const;
 
   ComplexDiagMatrix complex_diag_matrix_value (bool = false) const;
 
   FloatComplexDiagMatrix float_complex_diag_matrix_value (bool = false) const;
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap,
                     octave::mach_info::float_format fmt);
 
   octave_value map (unary_mapper_t umap) const;
 
 private:
diff --git a/libinterp/octave-value/ov-flt-cx-mat.cc b/libinterp/octave-value/ov-flt-cx-mat.cc
--- a/libinterp/octave-value/ov-flt-cx-mat.cc
+++ b/libinterp/octave-value/ov-flt-cx-mat.cc
@@ -23,16 +23,19 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <iostream>
 #include <vector>
 
+#include "dNDArray.h"
+#include "fNDArray.h"
+
 #include "data-conv.h"
 #include "lo-ieee.h"
 #include "lo-specfun.h"
 #include "lo-mappers.h"
 #include "mx-base.h"
 #include "mach-info.h"
 #include "oct-locbuf.h"
 
@@ -257,16 +260,28 @@ octave_float_complex_matrix::sparse_matr
 
 SparseComplexMatrix
 octave_float_complex_matrix::sparse_complex_matrix_value (bool) const
 {
   return SparseComplexMatrix (complex_matrix_value ());
 }
 
 octave_value
+octave_float_complex_matrix::as_double (void) const
+{
+  return ComplexNDArray (matrix);
+}
+
+octave_value
+octave_float_complex_matrix::as_single (void) const
+{
+  return matrix;
+}
+
+octave_value
 octave_float_complex_matrix::diag (octave_idx_type k) const
 {
   octave_value retval;
   if (k == 0 && matrix.ndims () == 2
       && (matrix.rows () == 1 || matrix.columns () == 1))
     retval = FloatComplexDiagMatrix (DiagArray2<FloatComplex> (matrix));
   else
     retval = octave_base_matrix<FloatComplexNDArray>::diag (k);
diff --git a/libinterp/octave-value/ov-flt-cx-mat.h b/libinterp/octave-value/ov-flt-cx-mat.h
--- a/libinterp/octave-value/ov-flt-cx-mat.h
+++ b/libinterp/octave-value/ov-flt-cx-mat.h
@@ -129,16 +129,19 @@ public:
   boolNDArray bool_array_value (bool warn = false) const;
 
   charNDArray char_array_value (bool frc_str_conv = false) const;
 
   SparseMatrix sparse_matrix_value (bool = false) const;
 
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const;
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
   octave_value diag (octave_idx_type k = 0) const;
 
   octave_value diag (octave_idx_type m, octave_idx_type n) const;
 
   void increment (void) { matrix += FloatComplex (1.0); }
 
   void decrement (void) { matrix -= FloatComplex (1.0); }
 
diff --git a/libinterp/octave-value/ov-flt-re-diag.cc b/libinterp/octave-value/ov-flt-re-diag.cc
--- a/libinterp/octave-value/ov-flt-re-diag.cc
+++ b/libinterp/octave-value/ov-flt-re-diag.cc
@@ -84,16 +84,76 @@ octave_float_diag_matrix::complex_diag_m
 
 FloatComplexDiagMatrix
 octave_float_diag_matrix::float_complex_diag_matrix_value (bool) const
 {
   return FloatComplexDiagMatrix (matrix);
 }
 
 octave_value
+octave_float_diag_matrix::as_double (void) const
+{
+  return DiagMatrix (matrix);
+}
+
+octave_value
+octave_float_diag_matrix::as_single (void) const
+{
+  return matrix;
+}
+
+octave_value
+octave_float_diag_matrix::as_int8 (void) const
+{
+  return int8_array_value ();
+}
+
+octave_value
+octave_float_diag_matrix::as_int16 (void) const
+{
+  return int16_array_value ();
+}
+
+octave_value
+octave_float_diag_matrix::as_int32 (void) const
+{
+  return int32_array_value ();
+}
+
+octave_value
+octave_float_diag_matrix::as_int64 (void) const
+{
+  return int64_array_value ();
+}
+
+octave_value
+octave_float_diag_matrix::as_uint8 (void) const
+{
+  return uint8_array_value ();
+}
+
+octave_value
+octave_float_diag_matrix::as_uint16 (void) const
+{
+  return uint16_array_value ();
+}
+
+octave_value
+octave_float_diag_matrix::as_uint32 (void) const
+{
+  return uint32_array_value ();
+}
+
+octave_value
+octave_float_diag_matrix::as_uint64 (void) const
+{
+  return uint64_array_value ();
+}
+
+octave_value
 octave_float_diag_matrix::map (unary_mapper_t umap) const
 {
   switch (umap)
     {
     case umap_abs:
       return matrix.abs ();
     case umap_real:
     case umap_conj:
diff --git a/libinterp/octave-value/ov-flt-re-diag.h b/libinterp/octave-value/ov-flt-re-diag.h
--- a/libinterp/octave-value/ov-flt-re-diag.h
+++ b/libinterp/octave-value/ov-flt-re-diag.h
@@ -72,16 +72,29 @@ public:
   DiagMatrix diag_matrix_value (bool = false) const;
 
   FloatDiagMatrix float_diag_matrix_value (bool = false) const;
 
   ComplexDiagMatrix complex_diag_matrix_value (bool = false) const;
 
   FloatComplexDiagMatrix float_complex_diag_matrix_value (bool = false) const;
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
+  octave_value as_int8 (void) const;
+  octave_value as_int16 (void) const;
+  octave_value as_int32 (void) const;
+  octave_value as_int64 (void) const;
+
+  octave_value as_uint8 (void) const;
+  octave_value as_uint16 (void) const;
+  octave_value as_uint32 (void) const;
+  octave_value as_uint64 (void) const;
+
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap,
                     octave::mach_info::float_format fmt);
 
   octave_value map (unary_mapper_t umap) const;
 
 private:
diff --git a/libinterp/octave-value/ov-flt-re-mat.cc b/libinterp/octave-value/ov-flt-re-mat.cc
--- a/libinterp/octave-value/ov-flt-re-mat.cc
+++ b/libinterp/octave-value/ov-flt-re-mat.cc
@@ -24,16 +24,27 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <iostream>
 #include <limits>
 #include <vector>
 
+#include "dNDArray.h"
+#include "fNDArray.h"
+#include "int8NDArray.h"
+#include "int16NDArray.h"
+#include "int32NDArray.h"
+#include "int64NDArray.h"
+#include "uint8NDArray.h"
+#include "uint16NDArray.h"
+#include "uint32NDArray.h"
+#include "uint64NDArray.h"
+
 #include "data-conv.h"
 #include "lo-ieee.h"
 #include "lo-utils.h"
 #include "lo-specfun.h"
 #include "lo-mappers.h"
 #include "mach-info.h"
 #include "mx-base.h"
 #include "quit.h"
@@ -234,16 +245,76 @@ octave_float_matrix::sparse_complex_matr
 {
   // FIXME: Need a SparseComplexMatrix (Matrix) constructor to make
   // this function more efficient.  Then this should become
   // return SparseComplexMatrix (matrix.matrix_value ());
   return SparseComplexMatrix (sparse_matrix_value ());
 }
 
 octave_value
+octave_float_matrix::as_double (void) const
+{
+  return NDArray (matrix);
+}
+
+octave_value
+octave_float_matrix::as_single (void) const
+{
+  return FloatNDArray (matrix);
+}
+
+octave_value
+octave_float_matrix::as_int8 (void) const
+{
+  return int8NDArray (matrix);
+}
+
+octave_value
+octave_float_matrix::as_int16 (void) const
+{
+  return int16NDArray (matrix);
+}
+
+octave_value
+octave_float_matrix::as_int32 (void) const
+{
+  return int32NDArray (matrix);
+}
+
+octave_value
+octave_float_matrix::as_int64 (void) const
+{
+  return int64NDArray (matrix);
+}
+
+octave_value
+octave_float_matrix::as_uint8 (void) const
+{
+  return uint8NDArray (matrix);
+}
+
+octave_value
+octave_float_matrix::as_uint16 (void) const
+{
+  return uint16NDArray (matrix);
+}
+
+octave_value
+octave_float_matrix::as_uint32 (void) const
+{
+  return uint32NDArray (matrix);
+}
+
+octave_value
+octave_float_matrix::as_uint64 (void) const
+{
+  return uint64NDArray (matrix);
+}
+
+octave_value
 octave_float_matrix::diag (octave_idx_type k) const
 {
   octave_value retval;
   if (k == 0 && matrix.ndims () == 2
       && (matrix.rows () == 1 || matrix.columns () == 1))
     retval = FloatDiagMatrix (DiagArray2<float> (matrix));
   else
     retval = octave_base_matrix<FloatNDArray>::diag (k);
diff --git a/libinterp/octave-value/ov-flt-re-mat.h b/libinterp/octave-value/ov-flt-re-mat.h
--- a/libinterp/octave-value/ov-flt-re-mat.h
+++ b/libinterp/octave-value/ov-flt-re-mat.h
@@ -162,16 +162,29 @@ public:
   NDArray array_value (bool = false) const;
 
   FloatNDArray float_array_value (bool = false) const { return matrix; }
 
   SparseMatrix sparse_matrix_value (bool = false) const;
 
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const;
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
+  octave_value as_int8 (void) const;
+  octave_value as_int16 (void) const;
+  octave_value as_int32 (void) const;
+  octave_value as_int64 (void) const;
+
+  octave_value as_uint8 (void) const;
+  octave_value as_uint16 (void) const;
+  octave_value as_uint32 (void) const;
+  octave_value as_uint64 (void) const;
+
   octave_value diag (octave_idx_type k = 0) const;
 
   octave_value diag (octave_idx_type m, octave_idx_type n) const;
 
   // Use matrix_ref here to clear index cache.
   void increment (void) { matrix_ref () += 1.0; }
 
   void decrement (void) { matrix_ref () -= 1.0; }
diff --git a/libinterp/octave-value/ov-int16.cc b/libinterp/octave-value/ov-int16.cc
--- a/libinterp/octave-value/ov-int16.cc
+++ b/libinterp/octave-value/ov-int16.cc
@@ -27,32 +27,29 @@ along with Octave; see the file COPYING.
 #include <iostream>
 #include <limits>
 
 #include "lo-ieee.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "quit.h"
 
-#include "defun.h"
 #include "errwarn.h"
-#include "ovl.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
 #if defined (HAVE_HDF5)
 #  define HDF5_SAVE_TYPE H5T_NATIVE_INT16
 #endif
 
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-int16.h"
-#include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
@@ -69,27 +66,8 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
                                      "int16 matrix", "int16");
 
 template class octave_base_scalar<octave_int16>;
 
 template class octave_base_int_scalar<octave_int16>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int16_scalar,
                                      "int16 scalar", "int16");
-
-DEFUN (int16, args, ,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {} int16 (@var{x})
-Convert @var{x} to 16-bit integer type.
-@seealso{int8, uint8, uint16, int32, uint32, int64, uint64}
-@end deftypefn */)
-{
-  OCTAVE_TYPE_CONV_BODY (int16);
-}
-
-/*
-%!assert (class (int16 (1)), "int16")
-%!assert (int16 (1.25), int16 (1))
-%!assert (int16 (1.5), int16 (2))
-%!assert (int16 (-1.5), int16 (-2))
-%!assert (int16 (2^17), int16 (2^16-1))
-%!assert (int16 (-2^17), int16 (-2^16))
-*/
diff --git a/libinterp/octave-value/ov-int32.cc b/libinterp/octave-value/ov-int32.cc
--- a/libinterp/octave-value/ov-int32.cc
+++ b/libinterp/octave-value/ov-int32.cc
@@ -27,32 +27,29 @@ along with Octave; see the file COPYING.
 #include <iostream>
 #include <limits>
 
 #include "lo-ieee.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "quit.h"
 
-#include "defun.h"
 #include "errwarn.h"
-#include "ovl.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
 #if defined (HAVE_HDF5)
 #  define HDF5_SAVE_TYPE H5T_NATIVE_INT32
 #endif
 
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-int32.h"
-#include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
@@ -69,27 +66,8 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
                                      "int32 matrix", "int32");
 
 template class octave_base_scalar<octave_int32>;
 
 template class octave_base_int_scalar<octave_int32>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int32_scalar,
                                      "int32 scalar", "int32");
-
-DEFUN (int32, args, ,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {} int32 (@var{x})
-Convert @var{x} to 32-bit integer type.
-@seealso{int8, uint8, int16, uint16, uint32, int64, uint64}
-@end deftypefn */)
-{
-  OCTAVE_TYPE_CONV_BODY (int32);
-}
-
-/*
-%!assert (class (int32 (1)), "int32")
-%!assert (int32 (1.25), int32 (1))
-%!assert (int32 (1.5), int32 (2))
-%!assert (int32 (-1.5), int32 (-2))
-%!assert (int32 (2^33), int32 (2^32-1))
-%!assert (int32 (-2^33), int32 (-2^32))
-*/
diff --git a/libinterp/octave-value/ov-int64.cc b/libinterp/octave-value/ov-int64.cc
--- a/libinterp/octave-value/ov-int64.cc
+++ b/libinterp/octave-value/ov-int64.cc
@@ -27,32 +27,29 @@ along with Octave; see the file COPYING.
 #include <iostream>
 #include <limits>
 
 #include "lo-ieee.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "quit.h"
 
-#include "defun.h"
 #include "errwarn.h"
-#include "ovl.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
 #if defined (HAVE_HDF5)
 #  define HDF5_SAVE_TYPE H5T_NATIVE_INT64
 #endif
 
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-int64.h"
-#include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
@@ -69,27 +66,8 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
                                      "int64 matrix", "int64");
 
 template class octave_base_scalar<octave_int64>;
 
 template class octave_base_int_scalar<octave_int64>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int64_scalar,
                                      "int64 scalar", "int64");
-
-DEFUN (int64, args, ,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {} int64 (@var{x})
-Convert @var{x} to 64-bit integer type.
-@seealso{int8, uint8, int16, uint16, int32, uint32, uint64}
-@end deftypefn */)
-{
-  OCTAVE_TYPE_CONV_BODY (int64);
-}
-
-/*
-%!assert (class (int64 (1)), "int64")
-%!assert (int64 (1.25), int64 (1))
-%!assert (int64 (1.5), int64 (2))
-%!assert (int64 (-1.5), int64 (-2))
-%!assert (int64 (2^65), int64 (2^64-1))
-%!assert (int64 (-2^65), int64 (-2^64))
-*/
diff --git a/libinterp/octave-value/ov-int8.cc b/libinterp/octave-value/ov-int8.cc
--- a/libinterp/octave-value/ov-int8.cc
+++ b/libinterp/octave-value/ov-int8.cc
@@ -27,32 +27,29 @@ along with Octave; see the file COPYING.
 #include <iostream>
 #include <limits>
 
 #include "lo-ieee.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "quit.h"
 
-#include "defun.h"
 #include "errwarn.h"
-#include "ovl.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
 #if defined (HAVE_HDF5)
 #  define HDF5_SAVE_TYPE H5T_NATIVE_INT8
 #endif
 
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-int8.h"
-#include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
@@ -69,27 +66,8 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
                                      "int8 matrix", "int8");
 
 template class octave_base_scalar<octave_int8>;
 
 template class octave_base_int_scalar<octave_int8>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_int8_scalar,
                                      "int8 scalar", "int8");
-
-DEFUN (int8, args, ,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {} int8 (@var{x})
-Convert @var{x} to 8-bit integer type.
-@seealso{uint8, int16, uint16, int32, uint32, int64, uint64}
-@end deftypefn */)
-{
-  OCTAVE_TYPE_CONV_BODY (int8);
-}
-
-/*
-%!assert (class (int8 (1)), "int8")
-%!assert (int8 (1.25), int8 (1))
-%!assert (int8 (1.5), int8 (2))
-%!assert (int8 (-1.5), int8 (-2))
-%!assert (int8 (2^9), int8 (2^8-1))
-%!assert (int8 (-2^9), int8 (-2^8))
-*/
diff --git a/libinterp/octave-value/ov-perm.cc b/libinterp/octave-value/ov-perm.cc
--- a/libinterp/octave-value/ov-perm.cc
+++ b/libinterp/octave-value/ov-perm.cc
@@ -259,16 +259,76 @@ octave_perm_matrix::index_vector (bool r
 
 octave_value
 octave_perm_matrix::convert_to_str_internal (bool pad, bool force,
                                              char type) const
 {
   return to_dense ().convert_to_str_internal (pad, force, type);
 }
 
+octave_value
+octave_perm_matrix::as_double (void) const
+{
+  return matrix;
+}
+
+octave_value
+octave_perm_matrix::as_single (void) const
+{
+  return float_array_value ();
+}
+
+octave_value
+octave_perm_matrix::as_int8 (void) const
+{
+  return int8_array_value  ();
+}
+
+octave_value
+octave_perm_matrix::as_int16 (void) const
+{
+  return int16_array_value ();
+}
+
+octave_value
+octave_perm_matrix::as_int32 (void) const
+{
+  return int32_array_value ();
+}
+
+octave_value
+octave_perm_matrix::as_int64 (void) const
+{
+  return int64_array_value ();
+}
+
+octave_value
+octave_perm_matrix::as_uint8 (void) const
+{
+  return uint8_array_value ();
+}
+
+octave_value
+octave_perm_matrix::as_uint16 (void) const
+{
+  return uint16_array_value ();
+}
+
+octave_value
+octave_perm_matrix::as_uint32 (void) const
+{
+  return uint32_array_value ();
+}
+
+octave_value
+octave_perm_matrix::as_uint64 (void) const
+{
+  return uint64_array_value ();
+}
+
 bool
 octave_perm_matrix::save_ascii (std::ostream& os)
 {
   os << "# size: " << matrix.rows () << "\n";
   os << "# orient: c\n";
 
   Array<octave_idx_type> pvec = matrix.col_perm_vec ();
   octave_idx_type n = pvec.numel ();
diff --git a/libinterp/octave-value/ov-perm.h b/libinterp/octave-value/ov-perm.h
--- a/libinterp/octave-value/ov-perm.h
+++ b/libinterp/octave-value/ov-perm.h
@@ -189,16 +189,29 @@ public:
   uint32NDArray
   uint32_array_value (void) const { return to_dense ().uint32_array_value (); }
 
   uint64NDArray
   uint64_array_value (void) const { return to_dense ().uint64_array_value (); }
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
+  octave_value as_int8 (void) const;
+  octave_value as_int16 (void) const;
+  octave_value as_int32 (void) const;
+  octave_value as_int64 (void) const;
+
+  octave_value as_uint8 (void) const;
+  octave_value as_uint16 (void) const;
+  octave_value as_uint32 (void) const;
+  octave_value as_uint64 (void) const;
+
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
diff --git a/libinterp/octave-value/ov-range.cc b/libinterp/octave-value/ov-range.cc
--- a/libinterp/octave-value/ov-range.cc
+++ b/libinterp/octave-value/ov-range.cc
@@ -21,16 +21,27 @@ along with Octave; see the file COPYING.
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <iostream>
 
+#include "dNDArray.h"
+#include "fNDArray.h"
+#include "int8NDArray.h"
+#include "int16NDArray.h"
+#include "int32NDArray.h"
+#include "int64NDArray.h"
+#include "uint8NDArray.h"
+#include "uint16NDArray.h"
+#include "uint32NDArray.h"
+#include "uint64NDArray.h"
+
 #include "lo-ieee.h"
 #include "lo-utils.h"
 
 #include "defun.h"
 #include "variables.h"
 #include "errwarn.h"
 #include "mxarray.h"
 #include "ops.h"
@@ -367,16 +378,76 @@ octave_range::resize (const dim_vector& 
 
 octave_value
 octave_range::convert_to_str_internal (bool pad, bool force, char type) const
 {
   octave_value tmp (range.matrix_value ());
   return tmp.convert_to_str (pad, force, type);
 }
 
+octave_value
+octave_range::as_double (void) const
+{
+  return range;
+}
+
+octave_value
+octave_range::as_single (void) const
+{
+  return FloatMatrix (range.matrix_value ());
+}
+
+octave_value
+octave_range::as_int8 (void) const
+{
+  return int8NDArray (range.matrix_value ());
+}
+
+octave_value
+octave_range::as_int16 (void) const
+{
+  return int16NDArray (range.matrix_value ());
+}
+
+octave_value
+octave_range::as_int32 (void) const
+{
+  return int32NDArray (range.matrix_value ());
+}
+
+octave_value
+octave_range::as_int64 (void) const
+{
+  return int64NDArray (range.matrix_value ());
+}
+
+octave_value
+octave_range::as_uint8 (void) const
+{
+  return uint8NDArray (range.matrix_value ());
+}
+
+octave_value
+octave_range::as_uint16 (void) const
+{
+  return uint16NDArray (range.matrix_value ());
+}
+
+octave_value
+octave_range::as_uint32 (void) const
+{
+  return uint32NDArray (range.matrix_value ());
+}
+
+octave_value
+octave_range::as_uint64 (void) const
+{
+  return uint64NDArray (range.matrix_value ());
+}
+
 void
 octave_range::print (std::ostream& os, bool pr_as_read_syntax)
 {
   print_raw (os, pr_as_read_syntax);
   newline (os);
 }
 
 void
diff --git a/libinterp/octave-value/ov-range.h b/libinterp/octave-value/ov-range.h
--- a/libinterp/octave-value/ov-range.h
+++ b/libinterp/octave-value/ov-range.h
@@ -244,16 +244,29 @@ public:
 
   FloatComplexNDArray float_complex_array_value (bool = false) const
   { return FloatComplexMatrix (range.matrix_value ()); }
 
   Range range_value (void) const { return range; }
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
+  octave_value as_int8 (void) const;
+  octave_value as_int16 (void) const;
+  octave_value as_int32 (void) const;
+  octave_value as_int64 (void) const;
+
+  octave_value as_uint8 (void) const;
+  octave_value as_uint16 (void) const;
+  octave_value as_uint32 (void) const;
+  octave_value as_uint64 (void) const;
+
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
   void short_disp (std::ostream& os) const;
 
diff --git a/libinterp/octave-value/ov-re-diag.cc b/libinterp/octave-value/ov-re-diag.cc
--- a/libinterp/octave-value/ov-re-diag.cc
+++ b/libinterp/octave-value/ov-re-diag.cc
@@ -153,16 +153,76 @@ octave_diag_matrix::complex_diag_matrix_
 
 FloatComplexDiagMatrix
 octave_diag_matrix::float_complex_diag_matrix_value (bool) const
 {
   return FloatComplexDiagMatrix (matrix);
 }
 
 octave_value
+octave_diag_matrix::as_double (void) const
+{
+  return matrix;
+}
+
+octave_value
+octave_diag_matrix::as_single (void) const
+{
+  return FloatDiagMatrix (matrix);
+}
+
+octave_value
+octave_diag_matrix::as_int8 (void) const
+{
+  return int8_array_value ();
+}
+
+octave_value
+octave_diag_matrix::as_int16 (void) const
+{
+  return int16_array_value ();
+}
+
+octave_value
+octave_diag_matrix::as_int32 (void) const
+{
+  return int32_array_value ();
+}
+
+octave_value
+octave_diag_matrix::as_int64 (void) const
+{
+  return int64_array_value ();
+}
+
+octave_value
+octave_diag_matrix::as_uint8 (void) const
+{
+  return uint8_array_value ();
+}
+
+octave_value
+octave_diag_matrix::as_uint16 (void) const
+{
+  return uint16_array_value ();
+}
+
+octave_value
+octave_diag_matrix::as_uint32 (void) const
+{
+  return uint32_array_value ();
+}
+
+octave_value
+octave_diag_matrix::as_uint64 (void) const
+{
+  return uint64_array_value ();
+}
+
+octave_value
 octave_diag_matrix::map (unary_mapper_t umap) const
 {
   switch (umap)
     {
     case umap_abs:
       return matrix.abs ();
     case umap_real:
     case umap_conj:
diff --git a/libinterp/octave-value/ov-re-diag.h b/libinterp/octave-value/ov-re-diag.h
--- a/libinterp/octave-value/ov-re-diag.h
+++ b/libinterp/octave-value/ov-re-diag.h
@@ -77,16 +77,29 @@ public:
   DiagMatrix diag_matrix_value (bool = false) const;
 
   FloatDiagMatrix float_diag_matrix_value (bool = false) const;
 
   ComplexDiagMatrix complex_diag_matrix_value (bool = false) const;
 
   FloatComplexDiagMatrix float_complex_diag_matrix_value (bool = false) const;
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
+  octave_value as_int8 (void) const;
+  octave_value as_int16 (void) const;
+  octave_value as_int32 (void) const;
+  octave_value as_int64 (void) const;
+
+  octave_value as_uint8 (void) const;
+  octave_value as_uint16 (void) const;
+  octave_value as_uint32 (void) const;
+  octave_value as_uint64 (void) const;
+
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap,
                     octave::mach_info::float_format fmt);
 
   octave_value map (unary_mapper_t umap) const;
 
 private:
diff --git a/libinterp/octave-value/ov-re-mat.cc b/libinterp/octave-value/ov-re-mat.cc
--- a/libinterp/octave-value/ov-re-mat.cc
+++ b/libinterp/octave-value/ov-re-mat.cc
@@ -24,16 +24,27 @@ along with Octave; see the file COPYING.
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <iostream>
 #include <limits>
 #include <vector>
 
+#include "dNDArray.h"
+#include "fNDArray.h"
+#include "int8NDArray.h"
+#include "int16NDArray.h"
+#include "int32NDArray.h"
+#include "int64NDArray.h"
+#include "uint8NDArray.h"
+#include "uint16NDArray.h"
+#include "uint32NDArray.h"
+#include "uint64NDArray.h"
+
 #include "data-conv.h"
 #include "lo-ieee.h"
 #include "lo-utils.h"
 #include "lo-specfun.h"
 #include "lo-mappers.h"
 #include "mach-info.h"
 #include "mx-base.h"
 #include "quit.h"
@@ -243,16 +254,76 @@ octave_matrix::sparse_complex_matrix_val
 {
   // FIXME: Need a SparseComplexMatrix (Matrix) constructor to make
   // this function more efficient.  Then this should become
   // return SparseComplexMatrix (matrix.matrix_value ());
   return SparseComplexMatrix (sparse_matrix_value ());
 }
 
 octave_value
+octave_matrix::as_double (void) const
+{
+  return NDArray (matrix);
+}
+
+octave_value
+octave_matrix::as_single (void) const
+{
+  return FloatNDArray (matrix);
+}
+
+octave_value
+octave_matrix::as_int8 (void) const
+{
+  return int8NDArray (matrix);
+}
+
+octave_value
+octave_matrix::as_int16 (void) const
+{
+  return int16NDArray (matrix);
+}
+
+octave_value
+octave_matrix::as_int32 (void) const
+{
+  return int32NDArray (matrix);
+}
+
+octave_value
+octave_matrix::as_int64 (void) const
+{
+  return int64NDArray (matrix);
+}
+
+octave_value
+octave_matrix::as_uint8 (void) const
+{
+  return uint8NDArray (matrix);
+}
+
+octave_value
+octave_matrix::as_uint16 (void) const
+{
+  return uint16NDArray (matrix);
+}
+
+octave_value
+octave_matrix::as_uint32 (void) const
+{
+  return uint32NDArray (matrix);
+}
+
+octave_value
+octave_matrix::as_uint64 (void) const
+{
+  return uint64NDArray (matrix);
+}
+
+octave_value
 octave_matrix::diag (octave_idx_type k) const
 {
   octave_value retval;
   if (k == 0 && matrix.ndims () == 2
       && (matrix.rows () == 1 || matrix.columns () == 1))
     retval = DiagMatrix (DiagArray2<double> (matrix));
   else
     retval = octave_base_matrix<NDArray>::diag (k);
diff --git a/libinterp/octave-value/ov-re-mat.h b/libinterp/octave-value/ov-re-mat.h
--- a/libinterp/octave-value/ov-re-mat.h
+++ b/libinterp/octave-value/ov-re-mat.h
@@ -172,16 +172,29 @@ public:
   NDArray array_value (bool = false) const { return matrix; }
 
   FloatNDArray float_array_value (bool = false) const { return matrix; }
 
   SparseMatrix sparse_matrix_value (bool = false) const;
 
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const;
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
+  octave_value as_int8 (void) const;
+  octave_value as_int16 (void) const;
+  octave_value as_int32 (void) const;
+  octave_value as_int64 (void) const;
+
+  octave_value as_uint8 (void) const;
+  octave_value as_uint16 (void) const;
+  octave_value as_uint32 (void) const;
+  octave_value as_uint64 (void) const;
+
   octave_value diag (octave_idx_type k = 0) const;
 
   octave_value diag (octave_idx_type m, octave_idx_type n) const;
 
   octave_value reshape (const dim_vector& new_dims) const;
 
   octave_value squeeze (void) const;
 
diff --git a/libinterp/octave-value/ov-re-sparse.cc b/libinterp/octave-value/ov-re-sparse.cc
--- a/libinterp/octave-value/ov-re-sparse.cc
+++ b/libinterp/octave-value/ov-re-sparse.cc
@@ -241,16 +241,22 @@ octave_sparse_matrix::convert_to_str_int
           }
 
       retval = octave_value (chm, type);
     }
 
   return retval;
 }
 
+octave_value
+octave_sparse_matrix::as_double (void) const
+{
+  return this->matrix;
+}
+
 bool
 octave_sparse_matrix::save_binary (std::ostream& os, bool& save_as_floats)
 {
   dim_vector dv = this->dims ();
   if (dv.ndims () < 1)
     return false;
 
   // Ensure that additional memory is deallocated
diff --git a/libinterp/octave-value/ov-re-sparse.h b/libinterp/octave-value/ov-re-sparse.h
--- a/libinterp/octave-value/ov-re-sparse.h
+++ b/libinterp/octave-value/ov-re-sparse.h
@@ -129,16 +129,18 @@ public:
 
   SparseComplexMatrix sparse_complex_matrix_value (bool = false) const
   { return SparseComplexMatrix (matrix); }
 
   SparseBoolMatrix sparse_bool_matrix_value (bool warn = false) const;
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
+  octave_value as_double (void) const;
+
 #if 0
   int write (octave_stream& os, int block_size,
              oct_data_conv::data_type output_type, int skip,
              octave::mach_info::float_format flt_fmt) const
   { return os.write (matrix, block_size, output_type, skip, flt_fmt); }
 #endif
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
diff --git a/libinterp/octave-value/ov-scalar.cc b/libinterp/octave-value/ov-scalar.cc
--- a/libinterp/octave-value/ov-scalar.cc
+++ b/libinterp/octave-value/ov-scalar.cc
@@ -21,16 +21,18 @@ along with Octave; see the file COPYING.
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <iostream>
 
+#include "oct-inttypes.h"
+
 #include "data-conv.h"
 #include "mach-info.h"
 #include "lo-specfun.h"
 #include "lo-mappers.h"
 
 #include "defun.h"
 #include "errwarn.h"
 #include "mxarray.h"
@@ -114,16 +116,76 @@ octave_scalar::resize (const dim_vector&
       if (dv.numel ())
         retval(0) = scalar;
 
       return retval;
     }
 }
 
 octave_value
+octave_scalar::as_double (void) const
+{
+  return scalar;
+}
+
+octave_value
+octave_scalar::as_single (void) const
+{
+  return static_cast<float> (scalar);
+}
+
+octave_value
+octave_scalar::as_int8 (void) const
+{
+  return octave_int8 (scalar);
+}
+
+octave_value
+octave_scalar::as_int16 (void) const
+{
+  return octave_int16 (scalar);
+}
+
+octave_value
+octave_scalar::as_int32 (void) const
+{
+  return octave_int32 (scalar);
+}
+
+octave_value
+octave_scalar::as_int64 (void) const
+{
+  return octave_int64 (scalar);
+}
+
+octave_value
+octave_scalar::as_uint8 (void) const
+{
+  return octave_uint8 (scalar);
+}
+
+octave_value
+octave_scalar::as_uint16 (void) const
+{
+  return octave_uint16 (scalar);
+}
+
+octave_value
+octave_scalar::as_uint32 (void) const
+{
+  return octave_uint32 (scalar);
+}
+
+octave_value
+octave_scalar::as_uint64 (void) const
+{
+  return octave_uint64 (scalar);
+}
+
+octave_value
 octave_scalar::diag (octave_idx_type m, octave_idx_type n) const
 {
   return DiagMatrix (Array<double> (dim_vector (1, 1), scalar), m, n);
 }
 
 octave_value
 octave_scalar::convert_to_str_internal (bool, bool, char type) const
 {
diff --git a/libinterp/octave-value/ov-scalar.h b/libinterp/octave-value/ov-scalar.h
--- a/libinterp/octave-value/ov-scalar.h
+++ b/libinterp/octave-value/ov-scalar.h
@@ -212,16 +212,29 @@ public:
     if (octave::math::isnan (scalar))
       err_nan_to_logical_conversion ();
     if (warn && scalar != 0 && scalar != 1)
       warn_logical_conversion ();
 
     return boolNDArray (dim_vector (1, 1), scalar);
   }
 
+  octave_value as_double (void) const;
+  octave_value as_single (void) const;
+
+  octave_value as_int8 (void) const;
+  octave_value as_int16 (void) const;
+  octave_value as_int32 (void) const;
+  octave_value as_int64 (void) const;
+
+  octave_value as_uint8 (void) const;
+  octave_value as_uint16 (void) const;
+  octave_value as_uint32 (void) const;
+  octave_value as_uint64 (void) const;
+
   octave_value diag (octave_idx_type m, octave_idx_type n) const;
 
   octave_value convert_to_str_internal (bool pad, bool force, char type) const;
 
   void increment (void) { ++scalar; }
 
   void decrement (void) { --scalar; }
 
diff --git a/libinterp/octave-value/ov-type-conv.h b/libinterp/octave-value/ov-type-conv.h
deleted file mode 100644
--- a/libinterp/octave-value/ov-type-conv.h
+++ /dev/null
@@ -1,108 +0,0 @@
-/*
-
-Copyright (C) 2004-2015 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#if ! defined (octave_ov_type_conv_h)
-#define octave_ov_type_conv_h 1
-
-#include "octave-config.h"
-
-static
-octave_value
-octave_type_conv_body (const octave_value &arg, const std::string& name,
-                       int t_result)
-{
-  int t_arg = arg.type_id ();
-  octave_value retval;
-
-  if (t_arg == t_result || arg.class_name () == name)
-    {
-      retval = arg;
-    }
-  else
-    {
-      octave_base_value::type_conv_fcn cf1
-        = octave_value_typeinfo::lookup_type_conv_op (t_arg, t_result);
-
-      if (cf1)
-        {
-          octave_base_value *tmp (cf1 (*(arg.internal_rep ())));
-
-          if (tmp)
-            {
-              retval = octave_value (tmp);
-
-              retval.maybe_mutate ();
-            }
-        }
-      else
-        {
-          octave_base_value::type_conv_fcn cf2
-            = arg.numeric_conversion_function ();
-
-          if (cf2)
-            {
-              octave_base_value *tmp (cf2 (*(arg.internal_rep ())));
-
-              if (tmp)
-                {
-                  octave_value xarg (tmp);
-
-                  retval = octave_type_conv_body (xarg, name, t_result);
-                }
-            }
-        }
-    }
-
-  return retval;
-}
-
-template <typename MATRIX_RESULT_T, typename SCALAR_RESULT_T>
-octave_value
-octave_type_conv (const octave_value& arg, const char *t_name)
-{
-  octave_value retval;
-
-  int t_result = MATRIX_RESULT_T::static_type_id ();
-
-  retval = octave_type_conv_body (arg, t_name, t_result);
-
-  if (retval.is_undefined ())
-    {
-      std::string arg_tname = arg.type_name ();
-
-      std::string result_tname = arg.numel () == 1
-        ? SCALAR_RESULT_T::static_type_name ()
-        : MATRIX_RESULT_T::static_type_name ();
-
-      err_invalid_conversion (arg_tname, result_tname);
-    }
-
-  return retval;
-}
-
-#define OCTAVE_TYPE_CONV_BODY(NAME)                                     \
-  if (args.length () != 1)                                              \
-    print_usage ();                                                     \
-                                                                        \
-  return octave_type_conv<octave_ ## NAME ## _matrix, octave_ ## NAME ## _scalar> (args(0), #NAME);
-
-#endif
diff --git a/libinterp/octave-value/ov-typeinfo.cc b/libinterp/octave-value/ov-typeinfo.cc
--- a/libinterp/octave-value/ov-typeinfo.cc
+++ b/libinterp/octave-value/ov-typeinfo.cc
@@ -155,24 +155,16 @@ octave_value_typeinfo::register_pref_ass
                                                   int t_result)
 {
   return (instance_ok ())
          ? instance->do_register_pref_assign_conv (t_lhs, t_rhs, t_result)
          : false;
 }
 
 bool
-octave_value_typeinfo::register_type_conv_op (int t, int t_result,
-                                              octave_base_value::type_conv_fcn f)
-{
-  return (instance_ok ())
-         ? instance->do_register_type_conv_op (t, t_result, f) : false;
-}
-
-bool
 octave_value_typeinfo::register_widening_op (int t, int t_result,
                                              octave_base_value::type_conv_fcn f)
 {
   return (instance_ok ())
          ? instance->do_register_widening_op (t, t_result, f) : false;
 }
 
 // FIXME: we should also store all class names and provide a
@@ -215,18 +207,16 @@ octave_value_typeinfo::do_register_type 
       assign_ops.resize
         (dim_vector (octave_value::num_assign_ops, len, len), 0);
 
       assignany_ops.resize
         (dim_vector (octave_value::num_assign_ops, len), 0);
 
       pref_assign_conv.resize (dim_vector (len, len), -1);
 
-      type_conv_ops.resize (dim_vector (len, len), 0);
-
       widening_ops.resize (dim_vector (len, len), 0);
     }
 
   types (i) = t_name;
 
   vals (i) = val;
 
   num_types++;
@@ -441,34 +431,16 @@ octave_value_typeinfo::do_register_pref_
     }
 
   pref_assign_conv.checkelem (t_lhs, t_rhs) = t_result;
 
   return false;
 }
 
 bool
-octave_value_typeinfo::do_register_type_conv_op
-  (int t, int t_result, octave_base_value::type_conv_fcn f)
-{
-  if (lookup_type_conv_op (t, t_result))
-    {
-      std::string t_name = types(t);
-      std::string t_result_name = types(t_result);
-
-      warning ("overriding type conversion op for '%s' to '%s'",
-               t_name.c_str (), t_result_name.c_str ());
-    }
-
-  type_conv_ops.checkelem (t, t_result) = reinterpret_cast<void *> (f);
-
-  return false;
-}
-
-bool
 octave_value_typeinfo::do_register_widening_op
   (int t, int t_result, octave_base_value::type_conv_fcn f)
 {
   if (lookup_widening_op (t, t_result))
     {
       std::string t_name = types(t);
       std::string t_result_name = types(t_result);
 
@@ -576,23 +548,16 @@ octave_value_typeinfo::do_lookup_assigna
 
 int
 octave_value_typeinfo::do_lookup_pref_assign_conv (int t_lhs, int t_rhs)
 {
   return pref_assign_conv.checkelem (t_lhs, t_rhs);
 }
 
 octave_base_value::type_conv_fcn
-octave_value_typeinfo::do_lookup_type_conv_op (int t, int t_result)
-{
-  void *f = type_conv_ops.checkelem (t, t_result);
-  return reinterpret_cast<octave_base_value::type_conv_fcn> (f);
-}
-
-octave_base_value::type_conv_fcn
 octave_value_typeinfo::do_lookup_widening_op (int t, int t_result)
 {
   void *f = widening_ops.checkelem (t, t_result);
   return reinterpret_cast<octave_base_value::type_conv_fcn> (f);
 }
 
 string_vector
 octave_value_typeinfo::do_installed_type_names (void) const
@@ -902,17 +867,16 @@ octave_value_typeinfo::do_installed_type
   retval.setfield ("unary_ops", unary_ops_map ());
   retval.setfield ("non_const_unary_ops", non_const_unary_ops_map ());
   retval.setfield ("binary_ops", binary_ops_map ());
   retval.setfield ("compound_unary_ops", compound_binary_ops_map ());
   retval.setfield ("cat_ops", as_bool_nd_array (cat_ops));
   retval.setfield ("assign_ops", assign_ops_map ());
   retval.setfield ("assignany_ops", assignany_ops_map ());
   retval.setfield ("pref_assign_conv", as_nd_array (pref_assign_conv));
-  retval.setfield ("type_conv_ops", as_bool_nd_array (type_conv_ops));
   retval.setfield ("widening_ops", as_bool_nd_array (widening_ops));
 
   return retval;
 }
 
 DEFUN (__dump_typeinfo__, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} __dump_typeinfo__ ()
diff --git a/libinterp/octave-value/ov-typeinfo.h b/libinterp/octave-value/ov-typeinfo.h
--- a/libinterp/octave-value/ov-typeinfo.h
+++ b/libinterp/octave-value/ov-typeinfo.h
@@ -93,19 +93,16 @@ public:
                                   assign_op_fcn);
 
   static bool register_assignany_op (octave_value::assign_op, int,
                                      assignany_op_fcn);
 
   static bool register_pref_assign_conv (int, int, int);
 
   static bool
-  register_type_conv_op (int, int, octave_base_value::type_conv_fcn);
-
-  static bool
   register_widening_op (int, int, octave_base_value::type_conv_fcn);
 
   static octave_value
   lookup_type (const std::string& nm)
   {
     return instance->do_lookup_type (nm);
   }
 
@@ -171,22 +168,16 @@ public:
 
   static int
   lookup_pref_assign_conv (int t_lhs, int t_rhs)
   {
     return instance->do_lookup_pref_assign_conv (t_lhs, t_rhs);
   }
 
   static octave_base_value::type_conv_fcn
-  lookup_type_conv_op (int t, int t_result)
-  {
-    return instance->do_lookup_type_conv_op (t, t_result);
-  }
-
-  static octave_base_value::type_conv_fcn
   lookup_widening_op (int t, int t_result)
   {
     return instance->do_lookup_widening_op (t, t_result);
   }
 
   static string_vector installed_type_names (void)
   {
     return instance->do_installed_type_names ();
@@ -208,17 +199,16 @@ protected:
       binary_class_ops (dim_vector (octave_value::num_binary_ops, 1), 0),
       binary_ops (dim_vector (octave_value::num_binary_ops, init_tab_sz, init_tab_sz), 0),
       compound_binary_class_ops (dim_vector (octave_value::num_compound_binary_ops, 1), 0),
       compound_binary_ops (dim_vector (octave_value::num_compound_binary_ops, init_tab_sz, init_tab_sz), 0),
       cat_ops (dim_vector (init_tab_sz, init_tab_sz), 0),
       assign_ops (dim_vector (octave_value::num_assign_ops, init_tab_sz, init_tab_sz), 0),
       assignany_ops (dim_vector (octave_value::num_assign_ops, init_tab_sz), 0),
       pref_assign_conv (dim_vector (init_tab_sz, init_tab_sz), -1),
-      type_conv_ops (dim_vector (init_tab_sz, init_tab_sz), 0),
       widening_ops (dim_vector (init_tab_sz, init_tab_sz), 0)  { }
 
   ~octave_value_typeinfo (void) { }
 
 private:
 
   static const int init_tab_sz;
 
@@ -249,18 +239,16 @@ private:
   Array<void *> cat_ops;
 
   Array<void *> assign_ops;
 
   Array<void *> assignany_ops;
 
   Array<int> pref_assign_conv;
 
-  Array<void *> type_conv_ops;
-
   Array<void *> widening_ops;
 
   int do_register_type (const std::string&, const std::string&,
                         const octave_value&);
 
   bool do_register_unary_class_op (octave_value::unary_op, unary_class_op_fcn);
 
   bool do_register_unary_op (octave_value::unary_op, int, unary_op_fcn);
@@ -285,18 +273,16 @@ private:
   bool do_register_assign_op (octave_value::assign_op, int, int,
                               assign_op_fcn);
 
   bool do_register_assignany_op (octave_value::assign_op, int,
                                  assignany_op_fcn);
 
   bool do_register_pref_assign_conv (int, int, int);
 
-  bool do_register_type_conv_op (int, int, octave_base_value::type_conv_fcn);
-
   bool do_register_widening_op (int, int, octave_base_value::type_conv_fcn);
 
   octave_value do_lookup_type (const std::string& nm);
 
   unary_class_op_fcn do_lookup_unary_class_op (octave_value::unary_op);
 
   unary_op_fcn do_lookup_unary_op (octave_value::unary_op, int);
 
@@ -315,18 +301,16 @@ private:
   cat_op_fcn do_lookup_cat_op (int, int);
 
   assign_op_fcn do_lookup_assign_op (octave_value::assign_op, int, int);
 
   assignany_op_fcn do_lookup_assignany_op (octave_value::assign_op, int);
 
   int do_lookup_pref_assign_conv (int, int);
 
-  octave_base_value::type_conv_fcn do_lookup_type_conv_op (int, int);
-
   octave_base_value::type_conv_fcn do_lookup_widening_op (int, int);
 
   string_vector do_installed_type_names (void) const;
 
   octave_scalar_map do_installed_type_info (void) const;
 
   octave_scalar_map unary_ops_map (void) const;
   octave_scalar_map non_const_unary_ops_map (void) const;
diff --git a/libinterp/octave-value/ov-uint16.cc b/libinterp/octave-value/ov-uint16.cc
--- a/libinterp/octave-value/ov-uint16.cc
+++ b/libinterp/octave-value/ov-uint16.cc
@@ -27,32 +27,30 @@ along with Octave; see the file COPYING.
 #include <iostream>
 #include <limits>
 
 #include "lo-ieee.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "quit.h"
 
-#include "defun.h"
 #include "errwarn.h"
 #include "ovl.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
 #if defined (HAVE_HDF5)
 #  define HDF5_SAVE_TYPE H5T_NATIVE_UINT16
 #endif
 
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-uint16.h"
-#include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
@@ -69,27 +67,8 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
                                      "uint16 matrix", "uint16");
 
 template class octave_base_scalar<octave_uint16>;
 
 template class octave_base_int_scalar<octave_uint16>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint16_scalar,
                                      "uint16 scalar", "uint16");
-
-DEFUN (uint16, args, ,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {} uint16 (@var{x})
-Convert @var{x} to unsigned 16-bit integer type.
-@seealso{int8, uint8, int16, int32, uint32, int64, uint64}
-@end deftypefn */)
-{
-  OCTAVE_TYPE_CONV_BODY (uint16);
-}
-
-/*
-%!assert (class (uint16 (1)), "uint16")
-%!assert (uint16 (1.25), uint16 (1))
-%!assert (uint16 (1.5), uint16 (2))
-%!assert (uint16 (-1.5), uint16 (0))
-%!assert (uint16 (2^17), uint16 (2^16-1))
-%!assert (uint16 (-2^17), uint16 (0))
-*/
diff --git a/libinterp/octave-value/ov-uint32.cc b/libinterp/octave-value/ov-uint32.cc
--- a/libinterp/octave-value/ov-uint32.cc
+++ b/libinterp/octave-value/ov-uint32.cc
@@ -27,32 +27,29 @@ along with Octave; see the file COPYING.
 #include <iostream>
 #include <limits>
 
 #include "lo-ieee.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "quit.h"
 
-#include "defun.h"
 #include "errwarn.h"
-#include "ovl.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
 #if defined (HAVE_HDF5)
 #  define HDF5_SAVE_TYPE H5T_NATIVE_UINT32
 #endif
 
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-uint32.h"
-#include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
@@ -69,27 +66,8 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
                                      "uint32 matrix", "uint32");
 
 template class octave_base_scalar<octave_uint32>;
 
 template class octave_base_int_scalar<octave_uint32>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint32_scalar,
                                      "uint32 scalar", "uint32");
-
-DEFUN (uint32, args, ,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {} uint32 (@var{x})
-Convert @var{x} to unsigned 32-bit integer type.
-@seealso{int8, uint8, int16, uint16, int32, int64, uint64}
-@end deftypefn */)
-{
-  OCTAVE_TYPE_CONV_BODY (uint32);
-}
-
-/*
-%!assert (class (uint32 (1)), "uint32")
-%!assert (uint32 (1.25), uint32 (1))
-%!assert (uint32 (1.5), uint32 (2))
-%!assert (uint32 (-1.5), uint32 (0))
-%!assert (uint32 (2^33), uint32 (2^32-1))
-%!assert (uint32 (-2^33), uint32 (0))
-*/
diff --git a/libinterp/octave-value/ov-uint64.cc b/libinterp/octave-value/ov-uint64.cc
--- a/libinterp/octave-value/ov-uint64.cc
+++ b/libinterp/octave-value/ov-uint64.cc
@@ -27,32 +27,29 @@ along with Octave; see the file COPYING.
 #include <iostream>
 #include <limits>
 
 #include "lo-ieee.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "quit.h"
 
-#include "defun.h"
 #include "errwarn.h"
-#include "ovl.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
 #if defined (HAVE_HDF5)
 #  define HDF5_SAVE_TYPE H5T_NATIVE_UINT64
 #endif
 
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-uint64.h"
-#include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
@@ -69,27 +66,8 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
                                      "uint64 matrix", "uint64");
 
 template class octave_base_scalar<octave_uint64>;
 
 template class octave_base_int_scalar<octave_uint64>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint64_scalar,
                                      "uint64 scalar", "uint64");
-
-DEFUN (uint64, args, ,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {} uint64 (@var{x})
-Convert @var{x} to unsigned 64-bit integer type.
-@seealso{int8, uint8, int16, uint16, int32, uint32, int64}
-@end deftypefn */)
-{
-  OCTAVE_TYPE_CONV_BODY (uint64);
-}
-
-/*
-%!assert (class (uint64 (1)), "uint64")
-%!assert (uint64 (1.25), uint64 (1))
-%!assert (uint64 (1.5), uint64 (2))
-%!assert (uint64 (-1.5), uint64 (0))
-%!assert (uint64 (2^65), uint64 (2^64-1))
-%!assert (uint64 (-2^65), uint64 (0))
-*/
diff --git a/libinterp/octave-value/ov-uint8.cc b/libinterp/octave-value/ov-uint8.cc
--- a/libinterp/octave-value/ov-uint8.cc
+++ b/libinterp/octave-value/ov-uint8.cc
@@ -27,32 +27,29 @@ along with Octave; see the file COPYING.
 #include <iostream>
 #include <limits>
 
 #include "lo-ieee.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "quit.h"
 
-#include "defun.h"
 #include "errwarn.h"
-#include "ovl.h"
 #include "oct-lvalue.h"
 #include "oct-hdf5.h"
 #include "ops.h"
 #include "ov-base.h"
 
 #if defined (HAVE_HDF5)
 #  define HDF5_SAVE_TYPE H5T_NATIVE_UINT8
 #endif
 
 #include "ov-base-int.h"
 #include "ov-base-int.cc"
 #include "ov-uint8.h"
-#include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 
 #include "byte-swap.h"
 #include "ls-oct-text.h"
 #include "ls-utils.h"
 #include "ls-hdf5.h"
 
@@ -69,27 +66,8 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
                                      "uint8 matrix", "uint8");
 
 template class octave_base_scalar<octave_uint8>;
 
 template class octave_base_int_scalar<octave_uint8>;
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_uint8_scalar,
                                      "uint8 scalar", "uint8");
-
-DEFUN (uint8, args, ,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {} uint8 (@var{x})
-Convert @var{x} to unsigned 8-bit integer type.
-@seealso{int8, int16, uint16, int32, uint32, int64, uint64}
-@end deftypefn */)
-{
-  OCTAVE_TYPE_CONV_BODY (uint8);
-}
-
-/*
-%!assert (class (uint8 (1)), "uint8")
-%!assert (uint8 (1.25), uint8 (1))
-%!assert (uint8 (1.5), uint8 (2))
-%!assert (uint8 (-1.5), uint8 (0))
-%!assert (uint8 (2^9), uint8 (2^8-1))
-%!assert (uint8 (-2^9), uint8 (0))
-*/
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -69,17 +69,16 @@ along with Octave; see the file COPYING.
 #include "ov-oncleanup.h"
 #include "ov-cs-list.h"
 #include "ov-colon.h"
 #include "ov-builtin.h"
 #include "ov-dld-fcn.h"
 #include "ov-usr-fcn.h"
 #include "ov-fcn-handle.h"
 #include "ov-fcn-inline.h"
-#include "ov-type-conv.h"
 #include "ov-typeinfo.h"
 #include "ov-null-mat.h"
 #include "ov-lazy-idx.h"
 #include "ov-java.h"
 
 #include "defun.h"
 #include "error.h"
 #include "errwarn.h"
@@ -1179,43 +1178,16 @@ octave_value::maybe_mutate (void)
     {
       if (--rep->count == 0)
         delete rep;
 
       rep = tmp;
     }
 }
 
-octave_value
-octave_value::as_double (void) const
-{
-  if (is_perm_matrix ())
-    return octave_type_conv<octave_perm_matrix, octave_scalar> (*this, "double");
-  else if (is_diag_matrix ())
-    {
-      if (is_complex_type ())
-        return octave_type_conv<octave_complex_diag_matrix, octave_complex> (*this, "double");
-      else
-        return octave_type_conv<octave_diag_matrix, octave_scalar> (*this, "double");
-    }
-  else if (is_sparse_type ())
-    {
-      if (is_complex_type ())
-        return octave_type_conv<octave_sparse_complex_matrix, octave_complex> (*this, "double");
-      else
-        return octave_type_conv<octave_sparse_matrix, octave_scalar> (*this, "double");
-    }
-  else if (is_complex_type ())
-    return octave_type_conv<octave_complex_matrix, octave_complex> (*this, "double");
-  else
-    return octave_type_conv<octave_matrix, octave_scalar> (*this, "double");
-
-  return ovl ();
-}
-
 DEFUN (double, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} double (@var{x})
 Convert @var{x} to double precision type.
 @seealso{single}
 @end deftypefn */)
 {
   if (args.length () != 1)
@@ -1250,36 +1222,16 @@ Convert @var{x} to double precision type
 %! assert (class (y), "double");
 %!test
 %! x = diag (single ([i 3 2]));
 %! y = double (x);
 %! assert (class (x), "single");
 %! assert (class (y), "double");
 */
 
-octave_value
-octave_value::as_single (void) const
-{
-  if (is_diag_matrix ())
-    {
-      if (is_complex_type ())
-        return octave_type_conv<octave_float_complex_diag_matrix, octave_float_complex> (*this, "single");
-      else
-        return octave_type_conv<octave_float_diag_matrix, octave_float_scalar> (*this, "single");
-    }
-  else if (is_sparse_type ())
-    error ("single: sparse type does not support single precision");
-  else if (is_complex_type ())
-    return octave_type_conv<octave_float_complex_matrix, octave_float_complex> (*this, "single");
-  else
-    return octave_type_conv<octave_float_matrix, octave_float_scalar> (*this, "single");
-
-  return octave_value ();
-}
-
 DEFUN (single, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} single (@var{x})
 Convert @var{x} to single precision type.
 @seealso{double}
 @end deftypefn */)
 {
   if (args.length () != 1)
@@ -1311,17 +1263,193 @@ Convert @var{x} to single precision type
 %! assert (class (y), "single");
 %!test
 %! x = diag ([i 3 2]);
 %! y = single (x);
 %! assert (class (x), "double");
 %! assert (class (y), "single");
 */
 
- octave_value
+DEFUN (int8, args, ,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} int8 (@var{x})
+Convert @var{x} to 8-bit integer type.
+@seealso{uint8, int16, uint16, int32, uint32, int64, uint64}
+@end deftypefn */)
+{
+  if (args.length () != 1)
+    print_usage ();
+
+  return args(0).as_int8 ();
+}
+
+/*
+%!assert (class (int8 (1)), "int8")
+%!assert (int8 (1.25), int8 (1))
+%!assert (int8 (1.5), int8 (2))
+%!assert (int8 (-1.5), int8 (-2))
+%!assert (int8 (2^9), int8 (2^8-1))
+%!assert (int8 (-2^9), int8 (-2^8))
+*/
+
+DEFUN (int16, args, ,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} int16 (@var{x})
+Convert @var{x} to 16-bit integer type.
+@seealso{int8, uint8, uint16, int32, uint32, int64, uint64}
+@end deftypefn */)
+{
+  if (args.length () != 1)
+    print_usage ();
+
+  return args(0).as_int16 ();
+}
+
+/*
+%!assert (class (int16 (1)), "int16")
+%!assert (int16 (1.25), int16 (1))
+%!assert (int16 (1.5), int16 (2))
+%!assert (int16 (-1.5), int16 (-2))
+%!assert (int16 (2^17), int16 (2^16-1))
+%!assert (int16 (-2^17), int16 (-2^16))
+*/
+
+DEFUN (int32, args, ,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} int32 (@var{x})
+Convert @var{x} to 32-bit integer type.
+@seealso{int8, uint8, int16, uint16, uint32, int64, uint64}
+@end deftypefn */)
+{
+  if (args.length () != 1)
+    print_usage ();
+
+  return args(0).as_int32 ();
+}
+
+/*
+%!assert (class (int32 (1)), "int32")
+%!assert (int32 (1.25), int32 (1))
+%!assert (int32 (1.5), int32 (2))
+%!assert (int32 (-1.5), int32 (-2))
+%!assert (int32 (2^33), int32 (2^32-1))
+%!assert (int32 (-2^33), int32 (-2^32))
+*/
+
+DEFUN (int64, args, ,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} int64 (@var{x})
+Convert @var{x} to 64-bit integer type.
+@seealso{int8, uint8, int16, uint16, int32, uint32, uint64}
+@end deftypefn */)
+{
+  if (args.length () != 1)
+    print_usage ();
+
+  return args(0).as_int64 ();
+}
+
+/*
+%!assert (class (int64 (1)), "int64")
+%!assert (int64 (1.25), int64 (1))
+%!assert (int64 (1.5), int64 (2))
+%!assert (int64 (-1.5), int64 (-2))
+%!assert (int64 (2^65), int64 (2^64-1))
+%!assert (int64 (-2^65), int64 (-2^64))
+*/
+
+DEFUN (uint8, args, ,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} uint8 (@var{x})
+Convert @var{x} to unsigned 8-bit integer type.
+@seealso{int8, int16, uint16, int32, uint32, int64, uint64}
+@end deftypefn */)
+{
+  if (args.length () != 1)
+    print_usage ();
+
+  return args(0).as_uint8 ();
+}
+
+/*
+%!assert (class (uint8 (1)), "uint8")
+%!assert (uint8 (1.25), uint8 (1))
+%!assert (uint8 (1.5), uint8 (2))
+%!assert (uint8 (-1.5), uint8 (0))
+%!assert (uint8 (2^9), uint8 (2^8-1))
+%!assert (uint8 (-2^9), uint8 (0))
+*/
+
+DEFUN (uint16, args, ,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} uint16 (@var{x})
+Convert @var{x} to unsigned 16-bit integer type.
+@seealso{int8, uint8, int16, int32, uint32, int64, uint64}
+@end deftypefn */)
+{
+  if (args.length () != 1)
+    print_usage ();
+
+  return args(0).as_uint16 ();
+}
+
+/*
+%!assert (class (uint16 (1)), "uint16")
+%!assert (uint16 (1.25), uint16 (1))
+%!assert (uint16 (1.5), uint16 (2))
+%!assert (uint16 (-1.5), uint16 (0))
+%!assert (uint16 (2^17), uint16 (2^16-1))
+%!assert (uint16 (-2^17), uint16 (0))
+*/
+
+DEFUN (uint32, args, ,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} uint32 (@var{x})
+Convert @var{x} to unsigned 32-bit integer type.
+@seealso{int8, uint8, int16, uint16, int32, int64, uint64}
+@end deftypefn */)
+{
+  if (args.length () != 1)
+    print_usage ();
+
+  return args(0).as_uint32 ();
+}
+
+/*
+%!assert (class (uint32 (1)), "uint32")
+%!assert (uint32 (1.25), uint32 (1))
+%!assert (uint32 (1.5), uint32 (2))
+%!assert (uint32 (-1.5), uint32 (0))
+%!assert (uint32 (2^33), uint32 (2^32-1))
+%!assert (uint32 (-2^33), uint32 (0))
+*/
+
+DEFUN (uint64, args, ,
+       doc: /* -*- texinfo -*-
+@deftypefn {} {} uint64 (@var{x})
+Convert @var{x} to unsigned 64-bit integer type.
+@seealso{int8, uint8, int16, uint16, int32, uint32, int64}
+@end deftypefn */)
+{
+  if (args.length () != 1)
+    print_usage ();
+
+  return args(0).as_uint64 ();
+}
+
+/*
+%!assert (class (uint64 (1)), "uint64")
+%!assert (uint64 (1.25), uint64 (1))
+%!assert (uint64 (1.5), uint64 (2))
+%!assert (uint64 (-1.5), uint64 (0))
+%!assert (uint64 (2^65), uint64 (2^64-1))
+%!assert (uint64 (-2^65), uint64 (0))
+*/
+
+octave_value
 octave_value::single_subsref (const std::string& type,
                               const octave_value_list& idx)
 {
   std::list<octave_value_list> i;
 
   i.push_back (idx);
 
   return rep->subsref (type, i);
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -383,18 +383,28 @@ public:
   { return rep->squeeze (); }
 
   // The result of full().
   octave_value full_value (void) const
   { return rep->full_value (); }
 
   // Type conversions.
 
-  octave_value as_double (void) const;
-  octave_value as_single (void) const;
+  octave_value as_double (void) const { return rep->as_double (); }
+  octave_value as_single (void) const { return rep->as_single (); }
+
+  octave_value as_int8 (void) const { return rep->as_int8 (); }
+  octave_value as_int16 (void) const { return rep->as_int16 (); }
+  octave_value as_int32 (void) const { return rep->as_int32 (); }
+  octave_value as_int64 (void) const { return rep->as_int64 (); }
+
+  octave_value as_uint8 (void) const { return rep->as_uint8 (); }
+  octave_value as_uint16 (void) const { return rep->as_uint16 (); }
+  octave_value as_uint32 (void) const { return rep->as_uint32 (); }
+  octave_value as_uint64 (void) const { return rep->as_uint64 (); }
 
   octave_base_value *try_narrowing_conversion (void)
   { return rep->try_narrowing_conversion (); }
 
   // Close to dims (), but can be overloaded for classes.
   Matrix size (void)
   { return rep->size (); }
 
diff --git a/libinterp/operators/module.mk b/libinterp/operators/module.mk
--- a/libinterp/operators/module.mk
+++ b/libinterp/operators/module.mk
@@ -32,17 +32,16 @@ LIBINTERP_OPERATORS_SRC = \
   libinterp/operators/op-dm-cdm.cc \
   libinterp/operators/op-dm-cm.cc \
   libinterp/operators/op-dm-cs.cc \
   libinterp/operators/op-dm-dm.cc \
   libinterp/operators/op-dm-m.cc \
   libinterp/operators/op-dm-s.cc \
   libinterp/operators/op-dm-scm.cc \
   libinterp/operators/op-dm-sm.cc \
-  libinterp/operators/op-double-conv.cc \
   libinterp/operators/op-fcdm-fcdm.cc \
   libinterp/operators/op-fcdm-fcm.cc \
   libinterp/operators/op-fcdm-fcs.cc \
   libinterp/operators/op-fcdm-fdm.cc \
   libinterp/operators/op-fcdm-fm.cc \
   libinterp/operators/op-fcdm-fs.cc \
   libinterp/operators/op-fcm-fcdm.cc \
   libinterp/operators/op-fcm-fcm.cc \
@@ -57,34 +56,32 @@ LIBINTERP_OPERATORS_SRC = \
   libinterp/operators/op-fcs-fm.cc \
   libinterp/operators/op-fcs-fs.cc \
   libinterp/operators/op-fdm-fcdm.cc \
   libinterp/operators/op-fdm-fcm.cc \
   libinterp/operators/op-fdm-fcs.cc \
   libinterp/operators/op-fdm-fdm.cc \
   libinterp/operators/op-fdm-fm.cc \
   libinterp/operators/op-fdm-fs.cc \
-  libinterp/operators/op-float-conv.cc \
   libinterp/operators/op-fm-fcdm.cc \
   libinterp/operators/op-fm-fcm.cc \
   libinterp/operators/op-fm-fcs.cc \
   libinterp/operators/op-fm-fdm.cc \
   libinterp/operators/op-fm-fm.cc \
   libinterp/operators/op-fm-fs.cc \
   libinterp/operators/op-fm-pm.cc \
   libinterp/operators/op-fs-fcm.cc \
   libinterp/operators/op-fs-fcs.cc \
   libinterp/operators/op-fs-fm.cc \
   libinterp/operators/op-fs-fs.cc \
   libinterp/operators/op-i16-i16.cc \
   libinterp/operators/op-i32-i32.cc \
   libinterp/operators/op-i64-i64.cc \
   libinterp/operators/op-i8-i8.cc \
   libinterp/operators/op-int-concat.cc \
-  libinterp/operators/op-int-conv.cc \
   libinterp/operators/op-m-cdm.cc \
   libinterp/operators/op-m-cm.cc \
   libinterp/operators/op-m-cs.cc \
   libinterp/operators/op-m-dm.cc \
   libinterp/operators/op-m-m.cc \
   libinterp/operators/op-m-pm.cc \
   libinterp/operators/op-m-s.cc \
   libinterp/operators/op-m-scm.cc \
diff --git a/libinterp/operators/op-bm-bm.cc b/libinterp/operators/op-bm-bm.cc
--- a/libinterp/operators/op-bm-bm.cc
+++ b/libinterp/operators/op-bm-bm.cc
@@ -117,19 +117,16 @@ oct_assignop_conv_and_assign (octave_bas
 
   boolNDArray v2 = a2.bool_array_value (true);
 
   v1.assign (idx, v2);
 
   return octave_value ();
 }
 
-DEFCONVFN (matrix_to_bool_matrix, matrix, bool)
-DEFCONVFN (scalar_to_bool_matrix, scalar, bool)
-
 void
 install_bm_bm_ops (void)
 {
   INSTALL_UNOP (op_not, octave_bool_matrix, not);
   INSTALL_UNOP (op_uplus, octave_bool_matrix, uplus);
   INSTALL_UNOP (op_uminus, octave_bool_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_bool_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_bool_matrix, transpose);
@@ -151,19 +148,16 @@ install_bm_bm_ops (void)
                  el_or_not);
 
   INSTALL_CATOP (octave_bool_matrix, octave_bool_matrix, bm_bm);
   INSTALL_CATOP (octave_bool_matrix, octave_matrix, bm_m);
   INSTALL_CATOP (octave_matrix, octave_bool_matrix, m_bm);
   INSTALL_CATOP (octave_bool_matrix, octave_float_matrix, bm_fm);
   INSTALL_CATOP (octave_float_matrix, octave_bool_matrix, fm_bm);
 
-  INSTALL_CONVOP (octave_matrix, octave_bool_matrix, matrix_to_bool_matrix);
-  INSTALL_CONVOP (octave_scalar, octave_bool_matrix, scalar_to_bool_matrix);
-
   INSTALL_ASSIGNOP (op_asn_eq, octave_bool_matrix, octave_bool_matrix, assign);
 
   INSTALL_ASSIGNOP (op_asn_eq, octave_bool_matrix, octave_matrix,
                     conv_and_assign);
   INSTALL_ASSIGNOP (op_asn_eq, octave_bool_matrix, octave_char_matrix_str,
                     conv_and_assign);
   INSTALL_ASSIGNOP (op_asn_eq, octave_bool_matrix, octave_char_matrix_sq_str,
                     conv_and_assign);
diff --git a/libinterp/operators/op-cdm-cdm.cc b/libinterp/operators/op-cdm-cdm.cc
--- a/libinterp/operators/op-cdm-cdm.cc
+++ b/libinterp/operators/op-cdm-cdm.cc
@@ -78,24 +78,16 @@ DEFBINOP (ldiv, complex_diag_matrix, com
 
 CONVDECL (complex_diag_matrix_to_complex_matrix)
 {
   const octave_complex_diag_matrix& v = dynamic_cast<const octave_complex_diag_matrix&> (a);
 
   return new octave_complex_matrix (v.complex_matrix_value ());
 }
 
-CONVDECL (complex_diag_matrix_to_float_complex_diag_matrix)
-{
-  const octave_complex_diag_matrix& v = dynamic_cast<const octave_complex_diag_matrix&> (a);
-
-  return
-    new octave_float_complex_diag_matrix (v.float_complex_diag_matrix_value ());
-}
-
 void
 install_cdm_cdm_ops (void)
 {
   INSTALL_UNOP (op_uplus, octave_complex_diag_matrix, uplus);
   INSTALL_UNOP (op_uminus, octave_complex_diag_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_complex_diag_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_complex_diag_matrix, hermitian);
 
@@ -105,17 +97,13 @@ install_cdm_cdm_ops (void)
                  sub);
   INSTALL_BINOP (op_mul, octave_complex_diag_matrix, octave_complex_diag_matrix,
                  mul);
   INSTALL_BINOP (op_div, octave_complex_diag_matrix, octave_complex_diag_matrix,
                  div);
   INSTALL_BINOP (op_ldiv, octave_complex_diag_matrix,
                  octave_complex_diag_matrix, ldiv);
 
-  INSTALL_CONVOP (octave_complex_diag_matrix, octave_complex_matrix,
-                  complex_diag_matrix_to_complex_matrix);
-  INSTALL_CONVOP (octave_complex_diag_matrix, octave_float_complex_diag_matrix,
-                  complex_diag_matrix_to_float_complex_diag_matrix);
   INSTALL_ASSIGNCONV (octave_complex_diag_matrix, octave_complex_matrix,
                       octave_complex_matrix);
   INSTALL_WIDENOP (octave_complex_diag_matrix, octave_complex_matrix,
                    complex_diag_matrix_to_complex_matrix);
 }
diff --git a/libinterp/operators/op-cm-cm.cc b/libinterp/operators/op-cm-cm.cc
--- a/libinterp/operators/op-cm-cm.cc
+++ b/libinterp/operators/op-cm-cm.cc
@@ -211,25 +211,16 @@ DEFNULLASSIGNOP_FN (null_assign, complex
 
 DEFNDASSIGNOP_OP (assign_add, complex_matrix, complex_matrix, complex_array, +=)
 DEFNDASSIGNOP_OP (assign_sub, complex_matrix, complex_matrix, complex_array, -=)
 DEFNDASSIGNOP_FNOP (assign_el_mul, complex_matrix, complex_matrix,
                     complex_array, product_eq)
 DEFNDASSIGNOP_FNOP (assign_el_div, complex_matrix, complex_matrix,
                     complex_array, quotient_eq)
 
-CONVDECL (complex_matrix_to_float_complex_matrix)
-{
-  const octave_complex_matrix& v = dynamic_cast<const octave_complex_matrix&> (a);
-
-  return
-    new octave_float_complex_matrix
-          (FloatComplexNDArray (v.complex_array_value ()));
-}
-
 void
 install_cm_cm_ops (void)
 {
   INSTALL_UNOP (op_not, octave_complex_matrix, not);
   INSTALL_UNOP (op_uplus, octave_complex_matrix, uplus);
   INSTALL_UNOP (op_uminus, octave_complex_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_complex_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_complex_matrix, hermitian);
@@ -290,12 +281,9 @@ install_cm_cm_ops (void)
   INSTALL_ASSIGNOP (op_add_eq, octave_complex_matrix, octave_complex_matrix,
                     assign_add);
   INSTALL_ASSIGNOP (op_sub_eq, octave_complex_matrix, octave_complex_matrix,
                     assign_sub);
   INSTALL_ASSIGNOP (op_el_mul_eq, octave_complex_matrix, octave_complex_matrix,
                     assign_el_mul);
   INSTALL_ASSIGNOP (op_el_div_eq, octave_complex_matrix, octave_complex_matrix,
                     assign_el_div);
-
-  INSTALL_CONVOP (octave_complex_matrix, octave_float_complex_matrix,
-                  complex_matrix_to_float_complex_matrix);
 }
diff --git a/libinterp/operators/op-cs-cs.cc b/libinterp/operators/op-cs-cs.cc
--- a/libinterp/operators/op-cs-cs.cc
+++ b/libinterp/operators/op-cs-cs.cc
@@ -148,25 +148,16 @@ DEFBINOP (el_or, complex, complex)
   const octave_complex& v1 = dynamic_cast<const octave_complex&> (a1);
   const octave_complex& v2 = dynamic_cast<const octave_complex&> (a2);
 
   return v1.complex_value () != 0.0 || v2.complex_value () != 0.0;
 }
 
 DEFNDCATOP_FN (cs_cs, complex, complex, complex_array, complex_array, concat)
 
-CONVDECL (complex_to_float_complex)
-{
-  const octave_complex& v = dynamic_cast<const octave_complex&> (a);
-
-  return new octave_float_complex_matrix (FloatComplexMatrix (1, 1,
-                                          static_cast<FloatComplex>
-                                            (v.complex_value ())));
-}
-
 void
 install_cs_cs_ops (void)
 {
   INSTALL_UNOP (op_not, octave_complex, not);
   INSTALL_UNOP (op_uplus, octave_complex, uplus);
   INSTALL_UNOP (op_uminus, octave_complex, uminus);
   INSTALL_UNOP (op_transpose, octave_complex, transpose);
   INSTALL_UNOP (op_hermitian, octave_complex, hermitian);
@@ -197,12 +188,9 @@ install_cs_cs_ops (void)
 
   INSTALL_ASSIGNCONV (octave_complex, octave_complex, octave_complex_matrix);
 
   INSTALL_ASSIGNCONV (octave_complex, octave_null_matrix,
                       octave_complex_matrix);
   INSTALL_ASSIGNCONV (octave_complex, octave_null_str, octave_complex_matrix);
   INSTALL_ASSIGNCONV (octave_complex, octave_null_sq_str,
                       octave_complex_matrix);
-
-  INSTALL_CONVOP (octave_complex, octave_float_complex_matrix,
-                  complex_to_float_complex);
 }
diff --git a/libinterp/operators/op-dm-dm.cc b/libinterp/operators/op-dm-dm.cc
--- a/libinterp/operators/op-dm-dm.cc
+++ b/libinterp/operators/op-dm-dm.cc
@@ -72,35 +72,25 @@ DEFBINOP (ldiv, diag_matrix, diag_matrix
 
 CONVDECL (diag_matrix_to_matrix)
 {
   const octave_diag_matrix& v = dynamic_cast<const octave_diag_matrix&> (a);
 
   return new octave_matrix (v.matrix_value ());
 }
 
-CONVDECL (diag_matrix_to_float_diag_matrix)
-{
-  const octave_diag_matrix& v = dynamic_cast<const octave_diag_matrix&> (a);
-
-  return new octave_float_diag_matrix (v.float_diag_matrix_value ());
-}
-
 void
 install_dm_dm_ops (void)
 {
   INSTALL_UNOP (op_uplus, octave_diag_matrix, uplus);
   INSTALL_UNOP (op_uminus, octave_diag_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_diag_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_diag_matrix, transpose);
 
   INSTALL_BINOP (op_add, octave_diag_matrix, octave_diag_matrix, add);
   INSTALL_BINOP (op_sub, octave_diag_matrix, octave_diag_matrix, sub);
   INSTALL_BINOP (op_mul, octave_diag_matrix, octave_diag_matrix, mul);
   INSTALL_BINOP (op_div, octave_diag_matrix, octave_diag_matrix, div);
   INSTALL_BINOP (op_ldiv, octave_diag_matrix, octave_diag_matrix, ldiv);
 
-  INSTALL_CONVOP (octave_diag_matrix, octave_matrix, diag_matrix_to_matrix);
-  INSTALL_CONVOP (octave_diag_matrix, octave_float_diag_matrix,
-                  diag_matrix_to_float_diag_matrix);
   INSTALL_ASSIGNCONV (octave_diag_matrix, octave_matrix, octave_matrix);
   INSTALL_WIDENOP (octave_diag_matrix, octave_matrix, diag_matrix_to_matrix);
 }
diff --git a/libinterp/operators/op-double-conv.cc b/libinterp/operators/op-double-conv.cc
deleted file mode 100644
--- a/libinterp/operators/op-double-conv.cc
+++ /dev/null
@@ -1,140 +0,0 @@
-/*
-
-Copyright (C) 2004-2015 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#if defined (HAVE_CONFIG_H)
-#  include "config.h"
-#endif
-
-#include "errwarn.h"
-#include "ovl.h"
-#include "ov.h"
-#include "ov-int8.h"
-#include "ov-int16.h"
-#include "ov-int32.h"
-#include "ov-int64.h"
-#include "ov-uint8.h"
-#include "ov-uint16.h"
-#include "ov-uint32.h"
-#include "ov-uint64.h"
-#include "ov-bool.h"
-#include "ov-bool-mat.h"
-#include "ov-re-sparse.h"
-#include "ov-bool-sparse.h"
-#include "ov-range.h"
-#include "ov-scalar.h"
-#include "ov-re-mat.h"
-#include "ov-str-mat.h"
-#include "ov-typeinfo.h"
-#include "ops.h"
-
-// conversion ops
-
-DEFDBLCONVFN (int8_matrix_to_double_matrix, int8_matrix, int8_array)
-DEFDBLCONVFN (int16_matrix_to_double_matrix, int16_matrix, int16_array)
-DEFDBLCONVFN (int32_matrix_to_double_matrix, int32_matrix, int32_array)
-DEFDBLCONVFN (int64_matrix_to_double_matrix, int64_matrix, int64_array)
-
-DEFDBLCONVFN (uint8_matrix_to_double_matrix, uint8_matrix, uint8_array)
-DEFDBLCONVFN (uint16_matrix_to_double_matrix, uint16_matrix, uint16_array)
-DEFDBLCONVFN (uint32_matrix_to_double_matrix, uint32_matrix, uint32_array)
-DEFDBLCONVFN (uint64_matrix_to_double_matrix, uint64_matrix, uint64_array)
-
-DEFDBLCONVFN (int8_scalar_to_double_matrix, int8_scalar, int8_array)
-DEFDBLCONVFN (int16_scalar_to_double_matrix, int16_scalar, int16_array)
-DEFDBLCONVFN (int32_scalar_to_double_matrix, int32_scalar, int32_array)
-DEFDBLCONVFN (int64_scalar_to_double_matrix, int64_scalar, int64_array)
-
-DEFDBLCONVFN (uint8_scalar_to_double_matrix, uint8_scalar, uint8_array)
-DEFDBLCONVFN (uint16_scalar_to_double_matrix, uint16_scalar, uint16_array)
-DEFDBLCONVFN (uint32_scalar_to_double_matrix, uint32_scalar, uint32_array)
-DEFDBLCONVFN (uint64_scalar_to_double_matrix, uint64_scalar, uint64_array)
-
-DEFDBLCONVFN (bool_matrix_to_double_matrix, bool_matrix, bool_array)
-DEFDBLCONVFN (bool_scalar_to_double_matrix, bool, bool_array)
-
-DEFDBLCONVFN (sparse_matrix_to_double_matrix, sparse_matrix, array)
-DEFDBLCONVFN (sparse_bool_matrix_to_double_matrix, sparse_bool_matrix, array)
-
-DEFDBLCONVFN (range_to_double_matrix, range, array)
-
-DEFSTRDBLCONVFN(char_matrix_str_to_double_matrix, char_matrix_str)
-DEFSTRDBLCONVFN(char_matrix_sq_str_to_double_matrix, char_matrix_sq_str)
-
-DEFDBLCONVFN (double_scalar_to_double_matrix, scalar, array)
-
-void
-install_double_conv_ops (void)
-{
-  INSTALL_CONVOP (octave_int8_matrix, octave_matrix,
-                  int8_matrix_to_double_matrix);
-  INSTALL_CONVOP (octave_int16_matrix, octave_matrix,
-                  int16_matrix_to_double_matrix);
-  INSTALL_CONVOP (octave_int32_matrix, octave_matrix,
-                  int32_matrix_to_double_matrix);
-  INSTALL_CONVOP (octave_int64_matrix, octave_matrix,
-                  int64_matrix_to_double_matrix);
-
-  INSTALL_CONVOP (octave_uint8_matrix, octave_matrix,
-                  uint8_matrix_to_double_matrix);
-  INSTALL_CONVOP (octave_uint16_matrix, octave_matrix,
-                  uint16_matrix_to_double_matrix);
-  INSTALL_CONVOP (octave_uint32_matrix, octave_matrix,
-                  uint32_matrix_to_double_matrix);
-  INSTALL_CONVOP (octave_uint64_matrix, octave_matrix,
-                  uint64_matrix_to_double_matrix);
-
-  INSTALL_CONVOP (octave_int8_scalar, octave_matrix,
-                  int8_scalar_to_double_matrix);
-  INSTALL_CONVOP (octave_int16_scalar, octave_matrix,
-                  int16_scalar_to_double_matrix);
-  INSTALL_CONVOP (octave_int32_scalar, octave_matrix,
-                  int32_scalar_to_double_matrix);
-  INSTALL_CONVOP (octave_int64_scalar, octave_matrix,
-                  int64_scalar_to_double_matrix);
-
-  INSTALL_CONVOP (octave_uint8_scalar, octave_matrix,
-                  uint8_scalar_to_double_matrix);
-  INSTALL_CONVOP (octave_uint16_scalar, octave_matrix,
-                  uint16_scalar_to_double_matrix);
-  INSTALL_CONVOP (octave_uint32_scalar, octave_matrix,
-                  uint32_scalar_to_double_matrix);
-  INSTALL_CONVOP (octave_uint64_scalar, octave_matrix,
-                  uint64_scalar_to_double_matrix);
-
-  INSTALL_CONVOP (octave_bool_matrix, octave_matrix,
-                  bool_matrix_to_double_matrix);
-  INSTALL_CONVOP (octave_bool, octave_matrix, bool_scalar_to_double_matrix);
-
-  INSTALL_CONVOP (octave_sparse_matrix, octave_matrix,
-                  sparse_matrix_to_double_matrix);
-  INSTALL_CONVOP (octave_sparse_bool_matrix, octave_matrix,
-                  sparse_bool_matrix_to_double_matrix);
-
-  INSTALL_CONVOP (octave_range, octave_matrix, range_to_double_matrix);
-
-  INSTALL_CONVOP (octave_char_matrix_str, octave_matrix,
-                  char_matrix_str_to_double_matrix);
-  INSTALL_CONVOP (octave_char_matrix_sq_str, octave_matrix,
-                  char_matrix_sq_str_to_double_matrix);
-
-  INSTALL_CONVOP (octave_scalar, octave_matrix, double_scalar_to_double_matrix);
-}
diff --git a/libinterp/operators/op-fcdm-fcdm.cc b/libinterp/operators/op-fcdm-fcdm.cc
--- a/libinterp/operators/op-fcdm-fcdm.cc
+++ b/libinterp/operators/op-fcdm-fcdm.cc
@@ -71,23 +71,16 @@ DEFBINOP (ldiv, float_complex_diag_matri
 {
   const octave_float_complex_diag_matrix& v1 = dynamic_cast<const octave_float_complex_diag_matrix&> (a1);
   const octave_float_complex_diag_matrix& v2 = dynamic_cast<const octave_float_complex_diag_matrix&> (a2);
 
   return xleftdiv (v1.float_complex_diag_matrix_value (),
                    v2.float_complex_diag_matrix_value ());
 }
 
-CONVDECL (float_complex_diag_matrix_to_float_complex_matrix)
-{
-  const octave_float_complex_diag_matrix& v = dynamic_cast<const octave_float_complex_diag_matrix&> (a);
-
-  return new octave_float_complex_matrix (v.float_complex_matrix_value ());
-}
-
 CONVDECL (float_complex_diag_matrix_to_complex_diag_matrix)
 {
   const octave_float_complex_diag_matrix& v = dynamic_cast<const octave_float_complex_diag_matrix&> (a);
 
   return new octave_complex_diag_matrix (v.complex_diag_matrix_value ());
 }
 
 void
@@ -104,17 +97,13 @@ install_fcdm_fcdm_ops (void)
                  octave_float_complex_diag_matrix, sub);
   INSTALL_BINOP (op_mul, octave_float_complex_diag_matrix,
                  octave_float_complex_diag_matrix, mul);
   INSTALL_BINOP (op_div, octave_float_complex_diag_matrix,
                  octave_float_complex_diag_matrix, div);
   INSTALL_BINOP (op_ldiv, octave_float_complex_diag_matrix,
                  octave_float_complex_diag_matrix, ldiv);
 
-  INSTALL_CONVOP (octave_float_complex_diag_matrix, octave_complex_diag_matrix,
-                  float_complex_diag_matrix_to_complex_diag_matrix);
-  INSTALL_CONVOP (octave_float_complex_diag_matrix, octave_float_complex_matrix,
-                  float_complex_diag_matrix_to_float_complex_matrix);
   INSTALL_ASSIGNCONV (octave_float_complex_diag_matrix,
                       octave_float_complex_matrix, octave_float_complex_matrix);
   INSTALL_WIDENOP (octave_float_complex_diag_matrix, octave_complex_diag_matrix,
                    float_complex_diag_matrix_to_complex_diag_matrix);
 }
diff --git a/libinterp/operators/op-fcm-fcm.cc b/libinterp/operators/op-fcm-fcm.cc
--- a/libinterp/operators/op-fcm-fcm.cc
+++ b/libinterp/operators/op-fcm-fcm.cc
@@ -227,24 +227,16 @@ DEFNDASSIGNOP_OP (assign_add, float_comp
                   float_complex_matrix, float_complex_array, +=)
 DEFNDASSIGNOP_OP (assign_sub, float_complex_matrix,
                   float_complex_matrix, float_complex_array, -=)
 DEFNDASSIGNOP_FNOP (assign_el_mul, float_complex_matrix, float_complex_matrix,
                     float_complex_array, product_eq)
 DEFNDASSIGNOP_FNOP (assign_el_div, float_complex_matrix, float_complex_matrix,
                     float_complex_array, quotient_eq)
 
-CONVDECL (float_complex_matrix_to_complex_matrix)
-{
-  const octave_float_complex_matrix& v = dynamic_cast<const octave_float_complex_matrix&> (a);
-
-  return
-    new octave_complex_matrix (ComplexNDArray (v.float_complex_array_value ()));
-}
-
 void
 install_fcm_fcm_ops (void)
 {
   INSTALL_UNOP (op_not, octave_float_complex_matrix, not);
   INSTALL_UNOP (op_uplus, octave_float_complex_matrix, uplus);
   INSTALL_UNOP (op_uminus, octave_float_complex_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_float_complex_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_float_complex_matrix, hermitian);
@@ -329,12 +321,9 @@ install_fcm_fcm_ops (void)
   INSTALL_ASSIGNOP (op_add_eq, octave_float_complex_matrix,
                     octave_float_complex_matrix, assign_add);
   INSTALL_ASSIGNOP (op_sub_eq, octave_float_complex_matrix,
                     octave_float_complex_matrix, assign_sub);
   INSTALL_ASSIGNOP (op_el_mul_eq, octave_float_complex_matrix,
                     octave_float_complex_matrix, assign_el_mul);
   INSTALL_ASSIGNOP (op_el_div_eq, octave_float_complex_matrix,
                     octave_float_complex_matrix, assign_el_div);
-
-  INSTALL_CONVOP (octave_float_complex_matrix, octave_complex_matrix,
-                  float_complex_matrix_to_complex_matrix);
 }
diff --git a/libinterp/operators/op-fcs-fcs.cc b/libinterp/operators/op-fcs-fcs.cc
--- a/libinterp/operators/op-fcs-fcs.cc
+++ b/libinterp/operators/op-fcs-fcs.cc
@@ -155,25 +155,16 @@ DEFNDCATOP_FN (fcs_fcs, float_complex, f
                float_complex_array, concat)
 
 DEFNDCATOP_FN (cs_fcs, complex, float_complex, float_complex_array,
                float_complex_array, concat)
 
 DEFNDCATOP_FN (fcs_cs, float_complex, complex, float_complex_array,
                float_complex_array, concat)
 
-CONVDECL (float_complex_to_complex)
-{
-  const octave_float_complex& v = dynamic_cast<const octave_float_complex&> (a);
-
-  return new octave_complex_matrix
-               (ComplexMatrix (1, 1,
-                               static_cast<Complex>(v.float_complex_value ())));
-}
-
 void
 install_fcs_fcs_ops (void)
 {
   INSTALL_UNOP (op_not, octave_float_complex, not);
   INSTALL_UNOP (op_uplus, octave_float_complex, uplus);
   INSTALL_UNOP (op_uminus, octave_float_complex, uminus);
   INSTALL_UNOP (op_transpose, octave_float_complex, transpose);
   INSTALL_UNOP (op_hermitian, octave_float_complex, hermitian);
@@ -212,12 +203,9 @@ install_fcs_fcs_ops (void)
                       octave_complex_matrix);
 
   INSTALL_ASSIGNCONV (octave_float_complex, octave_null_matrix,
                       octave_float_complex_matrix);
   INSTALL_ASSIGNCONV (octave_float_complex, octave_null_str,
                       octave_float_complex_matrix);
   INSTALL_ASSIGNCONV (octave_float_complex, octave_null_sq_str,
                       octave_float_complex_matrix);
-
-  INSTALL_CONVOP (octave_float_complex, octave_complex_matrix,
-                  float_complex_to_complex);
 }
diff --git a/libinterp/operators/op-fdm-fdm.cc b/libinterp/operators/op-fdm-fdm.cc
--- a/libinterp/operators/op-fdm-fdm.cc
+++ b/libinterp/operators/op-fdm-fdm.cc
@@ -65,23 +65,16 @@ DEFBINOP (ldiv, float_diag_matrix, float
 {
   const octave_float_diag_matrix& v1 = dynamic_cast<const octave_float_diag_matrix&> (a1);
   const octave_float_diag_matrix& v2 = dynamic_cast<const octave_float_diag_matrix&> (a2);
 
   return xleftdiv (v1.float_diag_matrix_value (),
                    v2.float_diag_matrix_value ());
 }
 
-CONVDECL (float_diag_matrix_to_diag_matrix)
-{
-  const octave_float_diag_matrix& v = dynamic_cast<const octave_float_diag_matrix&> (a);
-
-  return new octave_diag_matrix (v.diag_matrix_value ());
-}
-
 CONVDECL (float_diag_matrix_to_float_matrix)
 {
   const octave_float_diag_matrix& v = dynamic_cast<const octave_float_diag_matrix&> (a);
 
   return new octave_float_matrix (v.float_matrix_value ());
 }
 
 void
@@ -98,17 +91,13 @@ install_fdm_fdm_ops (void)
                  sub);
   INSTALL_BINOP (op_mul, octave_float_diag_matrix, octave_float_diag_matrix,
                  mul);
   INSTALL_BINOP (op_div, octave_float_diag_matrix, octave_float_diag_matrix,
                  div);
   INSTALL_BINOP (op_ldiv, octave_float_diag_matrix, octave_float_diag_matrix,
                  ldiv);
 
-  INSTALL_CONVOP (octave_float_diag_matrix, octave_float_matrix,
-                  float_diag_matrix_to_float_matrix);
-  INSTALL_CONVOP (octave_float_diag_matrix, octave_diag_matrix,
-                  float_diag_matrix_to_diag_matrix);
   INSTALL_ASSIGNCONV (octave_float_diag_matrix, octave_float_matrix,
                       octave_float_matrix);
   INSTALL_WIDENOP (octave_float_diag_matrix, octave_float_matrix,
                    float_diag_matrix_to_float_matrix);
 }
diff --git a/libinterp/operators/op-float-conv.cc b/libinterp/operators/op-float-conv.cc
deleted file mode 100644
--- a/libinterp/operators/op-float-conv.cc
+++ /dev/null
@@ -1,132 +0,0 @@
-/*
-
-Copyright (C) 2004-2015 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#if defined (HAVE_CONFIG_H)
-#  include "config.h"
-#endif
-
-#include "errwarn.h"
-#include "ovl.h"
-#include "ov.h"
-#include "ov-int8.h"
-#include "ov-int16.h"
-#include "ov-int32.h"
-#include "ov-int64.h"
-#include "ov-uint8.h"
-#include "ov-uint16.h"
-#include "ov-uint32.h"
-#include "ov-uint64.h"
-#include "ov-bool.h"
-#include "ov-bool-mat.h"
-#include "ov-range.h"
-#include "ov-float.h"
-#include "ov-flt-re-mat.h"
-#include "ov-str-mat.h"
-#include "ov-typeinfo.h"
-#include "ops.h"
-
-// conversion ops
-
-DEFFLTCONVFN (int8_matrix_to_float_matrix, int8_matrix, int8_array)
-DEFFLTCONVFN (int16_matrix_to_float_matrix, int16_matrix, int16_array)
-DEFFLTCONVFN (int32_matrix_to_float_matrix, int32_matrix, int32_array)
-DEFFLTCONVFN (int64_matrix_to_float_matrix, int64_matrix, int64_array)
-
-DEFFLTCONVFN (uint8_matrix_to_float_matrix, uint8_matrix, uint8_array)
-DEFFLTCONVFN (uint16_matrix_to_float_matrix, uint16_matrix, uint16_array)
-DEFFLTCONVFN (uint32_matrix_to_float_matrix, uint32_matrix, uint32_array)
-DEFFLTCONVFN (uint64_matrix_to_float_matrix, uint64_matrix, uint64_array)
-
-DEFFLTCONVFN (int8_scalar_to_float_matrix, int8_scalar, int8_array)
-DEFFLTCONVFN (int16_scalar_to_float_matrix, int16_scalar, int16_array)
-DEFFLTCONVFN (int32_scalar_to_float_matrix, int32_scalar, int32_array)
-DEFFLTCONVFN (int64_scalar_to_float_matrix, int64_scalar, int64_array)
-
-DEFFLTCONVFN (uint8_scalar_to_float_matrix, uint8_scalar, uint8_array)
-DEFFLTCONVFN (uint16_scalar_to_float_matrix, uint16_scalar, uint16_array)
-DEFFLTCONVFN (uint32_scalar_to_float_matrix, uint32_scalar, uint32_array)
-DEFFLTCONVFN (uint64_scalar_to_float_matrix, uint64_scalar, uint64_array)
-
-DEFFLTCONVFN (bool_matrix_to_float_matrix, bool_matrix, bool_array)
-DEFFLTCONVFN (bool_scalar_to_float_matrix, bool, bool_array)
-
-DEFFLTCONVFN (range_to_float_matrix, range, float_array)
-
-DEFSTRFLTCONVFN(char_matrix_str_to_float_matrix, char_matrix_str)
-DEFSTRFLTCONVFN(char_matrix_sq_str_to_float_matrix, char_matrix_sq_str)
-
-DEFFLTCONVFN (float_scalar_to_float_matrix, float_scalar, float_array)
-
-void
-install_float_conv_ops (void)
-{
-  INSTALL_CONVOP (octave_int8_matrix, octave_float_matrix,
-                  int8_matrix_to_float_matrix);
-  INSTALL_CONVOP (octave_int16_matrix, octave_float_matrix,
-                  int16_matrix_to_float_matrix);
-  INSTALL_CONVOP (octave_int32_matrix, octave_float_matrix,
-                  int32_matrix_to_float_matrix);
-  INSTALL_CONVOP (octave_int64_matrix, octave_float_matrix,
-                  int64_matrix_to_float_matrix);
-
-  INSTALL_CONVOP (octave_uint8_matrix, octave_float_matrix,
-                  uint8_matrix_to_float_matrix);
-  INSTALL_CONVOP (octave_uint16_matrix, octave_float_matrix,
-                  uint16_matrix_to_float_matrix);
-  INSTALL_CONVOP (octave_uint32_matrix, octave_float_matrix,
-                  uint32_matrix_to_float_matrix);
-  INSTALL_CONVOP (octave_uint64_matrix, octave_float_matrix,
-                  uint64_matrix_to_float_matrix);
-
-  INSTALL_CONVOP (octave_int8_scalar, octave_float_matrix,
-                  int8_scalar_to_float_matrix);
-  INSTALL_CONVOP (octave_int16_scalar, octave_float_matrix,
-                  int16_scalar_to_float_matrix);
-  INSTALL_CONVOP (octave_int32_scalar, octave_float_matrix,
-                  int32_scalar_to_float_matrix);
-  INSTALL_CONVOP (octave_int64_scalar, octave_float_matrix,
-                  int64_scalar_to_float_matrix);
-
-  INSTALL_CONVOP (octave_uint8_scalar, octave_float_matrix,
-                  uint8_scalar_to_float_matrix);
-  INSTALL_CONVOP (octave_uint16_scalar, octave_float_matrix,
-                  uint16_scalar_to_float_matrix);
-  INSTALL_CONVOP (octave_uint32_scalar, octave_float_matrix,
-                  uint32_scalar_to_float_matrix);
-  INSTALL_CONVOP (octave_uint64_scalar, octave_float_matrix,
-                  uint64_scalar_to_float_matrix);
-
-  INSTALL_CONVOP (octave_bool_matrix, octave_float_matrix,
-                  bool_matrix_to_float_matrix);
-  INSTALL_CONVOP (octave_bool, octave_float_matrix,
-                  bool_scalar_to_float_matrix);
-
-  INSTALL_CONVOP (octave_range, octave_float_matrix, range_to_float_matrix);
-
-  INSTALL_CONVOP (octave_char_matrix_str, octave_float_matrix,
-                  char_matrix_str_to_float_matrix);
-  INSTALL_CONVOP (octave_char_matrix_sq_str, octave_float_matrix,
-                  char_matrix_sq_str_to_float_matrix);
-
-  INSTALL_CONVOP (octave_float_scalar, octave_float_matrix,
-                  float_scalar_to_float_matrix);
-}
diff --git a/libinterp/operators/op-fm-fm.cc b/libinterp/operators/op-fm-fm.cc
--- a/libinterp/operators/op-fm-fm.cc
+++ b/libinterp/operators/op-fm-fm.cc
@@ -181,23 +181,16 @@ DEFNULLASSIGNOP_FN (null_assign, float_m
 
 DEFNDASSIGNOP_OP (assign_add, float_matrix, float_matrix, float_array, +=)
 DEFNDASSIGNOP_OP (assign_sub, float_matrix, float_matrix, float_array, -=)
 DEFNDASSIGNOP_FNOP (assign_el_mul, float_matrix, float_matrix, float_array,
                     product_eq)
 DEFNDASSIGNOP_FNOP (assign_el_div, float_matrix, float_matrix, float_array,
                     quotient_eq)
 
-CONVDECL (float_matrix_to_matrix)
-{
-  const octave_float_matrix& v = dynamic_cast<const octave_float_matrix&> (a);
-
-  return new octave_matrix (v.array_value ());
-}
-
 void
 install_fm_fm_ops (void)
 {
   INSTALL_UNOP (op_not, octave_float_matrix, not);
   INSTALL_UNOP (op_uplus, octave_float_matrix, uplus);
   INSTALL_UNOP (op_uminus, octave_float_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_float_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_float_matrix, transpose);
@@ -264,11 +257,9 @@ install_fm_fm_ops (void)
   INSTALL_ASSIGNOP (op_add_eq, octave_float_matrix, octave_float_matrix,
                     assign_add);
   INSTALL_ASSIGNOP (op_sub_eq, octave_float_matrix, octave_float_matrix,
                     assign_sub);
   INSTALL_ASSIGNOP (op_el_mul_eq, octave_float_matrix, octave_float_matrix,
                     assign_el_mul);
   INSTALL_ASSIGNOP (op_el_div_eq, octave_float_matrix, octave_float_matrix,
                     assign_el_div);
-
-  INSTALL_CONVOP (octave_float_matrix, octave_matrix, float_matrix_to_matrix);
 }
diff --git a/libinterp/operators/op-fs-fs.cc b/libinterp/operators/op-fs-fs.cc
--- a/libinterp/operators/op-fs-fs.cc
+++ b/libinterp/operators/op-fs-fs.cc
@@ -132,24 +132,16 @@ DEFBINOP (el_ldiv, float_scalar, float_s
 DEFSCALARBOOLOP_OP (el_and, float_scalar, float_scalar, &&)
 DEFSCALARBOOLOP_OP (el_or, float_scalar, float_scalar, ||)
 
 DEFNDCATOP_FN (fs_fs, float_scalar, float_scalar, float_array, float_array,
                concat)
 DEFNDCATOP_FN (s_fs, scalar, float_scalar, float_array, float_array, concat)
 DEFNDCATOP_FN (fs_s, float_scalar, scalar, float_array, float_array, concat)
 
-CONVDECL (float_to_matrix)
-{
-  const octave_float_scalar& v = dynamic_cast<const octave_float_scalar&> (a);
-
-  return new octave_matrix (Matrix (1, 1,
-                                    static_cast<double>(v.float_value ())));
-}
-
 void
 install_fs_fs_ops (void)
 {
   INSTALL_UNOP (op_not, octave_float_scalar, not);
   INSTALL_UNOP (op_uplus, octave_float_scalar, uplus);
   INSTALL_UNOP (op_uminus, octave_float_scalar, uminus);
   INSTALL_UNOP (op_transpose, octave_float_scalar, transpose);
   INSTALL_UNOP (op_hermitian, octave_float_scalar, hermitian);
@@ -185,11 +177,9 @@ install_fs_fs_ops (void)
   INSTALL_ASSIGNCONV (octave_scalar, octave_float_scalar, octave_matrix);
 
   INSTALL_ASSIGNCONV (octave_float_scalar, octave_null_matrix,
                       octave_float_matrix);
   INSTALL_ASSIGNCONV (octave_float_scalar, octave_null_str,
                       octave_float_matrix);
   INSTALL_ASSIGNCONV (octave_float_scalar, octave_null_sq_str,
                       octave_float_matrix);
-
-  INSTALL_CONVOP (octave_float_scalar, octave_matrix, float_to_matrix);
 }
diff --git a/libinterp/operators/op-int-conv.cc b/libinterp/operators/op-int-conv.cc
deleted file mode 100644
--- a/libinterp/operators/op-int-conv.cc
+++ /dev/null
@@ -1,259 +0,0 @@
-/*
-
-Copyright (C) 2004-2015 John W. Eaton
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#if defined (HAVE_CONFIG_H)
-#  include "config.h"
-#endif
-
-#include "errwarn.h"
-#include "ovl.h"
-#include "ov.h"
-#include "ov-int8.h"
-#include "ov-int16.h"
-#include "ov-int32.h"
-#include "ov-int64.h"
-#include "ov-uint8.h"
-#include "ov-uint16.h"
-#include "ov-uint32.h"
-#include "ov-uint64.h"
-#include "ov-range.h"
-#include "ov-bool.h"
-#include "ov-bool-mat.h"
-#include "ov-scalar.h"
-#include "ov-float.h"
-#include "ov-re-mat.h"
-#include "ov-flt-re-mat.h"
-#include "ov-str-mat.h"
-#include "ov-typeinfo.h"
-#include "ops.h"
-
-#define DEFINTCONVFN(name, tfrom, tto) \
-  CONVDECL (name)                                                       \
-  {                                                                     \
-    const octave_ ## tfrom& v = dynamic_cast<const octave_ ## tfrom&> (a); \
-                                                                        \
-    octave_ ## tto ## _matrix v2 = v.tto ## _array_value ();            \
-    return new octave_ ## tto ## _matrix (v2);                          \
-  }
-
-// conversion ops
-
-DEFINTCONVFN (scalar_to_int8, scalar, int8)
-DEFINTCONVFN (scalar_to_int16, scalar, int16)
-DEFINTCONVFN (scalar_to_int32, scalar, int32)
-DEFINTCONVFN (scalar_to_int64, scalar, int64)
-
-DEFINTCONVFN (scalar_to_uint8, scalar, uint8)
-DEFINTCONVFN (scalar_to_uint16, scalar, uint16)
-DEFINTCONVFN (scalar_to_uint32, scalar, uint32)
-DEFINTCONVFN (scalar_to_uint64, scalar, uint64)
-
-DEFINTCONVFN (matrix_to_int8, matrix, int8)
-DEFINTCONVFN (matrix_to_int16, matrix, int16)
-DEFINTCONVFN (matrix_to_int32, matrix, int32)
-DEFINTCONVFN (matrix_to_int64, matrix, int64)
-
-DEFINTCONVFN (matrix_to_uint8, matrix, uint8)
-DEFINTCONVFN (matrix_to_uint16, matrix, uint16)
-DEFINTCONVFN (matrix_to_uint32, matrix, uint32)
-DEFINTCONVFN (matrix_to_uint64, matrix, uint64)
-
-DEFINTCONVFN (float_scalar_to_int8, float_scalar, int8)
-DEFINTCONVFN (float_scalar_to_int16, float_scalar, int16)
-DEFINTCONVFN (float_scalar_to_int32, float_scalar, int32)
-DEFINTCONVFN (float_scalar_to_int64, float_scalar, int64)
-
-DEFINTCONVFN (float_scalar_to_uint8, float_scalar, uint8)
-DEFINTCONVFN (float_scalar_to_uint16, float_scalar, uint16)
-DEFINTCONVFN (float_scalar_to_uint32, float_scalar, uint32)
-DEFINTCONVFN (float_scalar_to_uint64, float_scalar, uint64)
-
-DEFINTCONVFN (float_matrix_to_int8, float_matrix, int8)
-DEFINTCONVFN (float_matrix_to_int16, float_matrix, int16)
-DEFINTCONVFN (float_matrix_to_int32, float_matrix, int32)
-DEFINTCONVFN (float_matrix_to_int64, float_matrix, int64)
-
-DEFINTCONVFN (float_matrix_to_uint8, float_matrix, uint8)
-DEFINTCONVFN (float_matrix_to_uint16, float_matrix, uint16)
-DEFINTCONVFN (float_matrix_to_uint32, float_matrix, uint32)
-DEFINTCONVFN (float_matrix_to_uint64, float_matrix, uint64)
-
-DEFCONVFN (bool_to_int8, bool, int8)
-DEFCONVFN (bool_to_int16, bool, int16)
-DEFCONVFN (bool_to_int32, bool, int32)
-DEFCONVFN (bool_to_int64, bool, int64)
-
-DEFCONVFN (bool_to_uint8, bool, uint8)
-DEFCONVFN (bool_to_uint16, bool, uint16)
-DEFCONVFN (bool_to_uint32, bool, uint32)
-DEFCONVFN (bool_to_uint64, bool, uint64)
-
-DEFCONVFN (bool_matrix_to_int8, bool_matrix, int8)
-DEFCONVFN (bool_matrix_to_int16, bool_matrix, int16)
-DEFCONVFN (bool_matrix_to_int32, bool_matrix, int32)
-DEFCONVFN (bool_matrix_to_int64, bool_matrix, int64)
-
-DEFCONVFN (bool_matrix_to_uint8, bool_matrix, uint8)
-DEFCONVFN (bool_matrix_to_uint16, bool_matrix, uint16)
-DEFCONVFN (bool_matrix_to_uint32, bool_matrix, uint32)
-DEFCONVFN (bool_matrix_to_uint64, bool_matrix, uint64)
-
-DEFSTRINTCONVFN (char_matrix_sq_str_to_int8, int8)
-DEFSTRINTCONVFN (char_matrix_sq_str_to_int16, int16)
-DEFSTRINTCONVFN (char_matrix_sq_str_to_int32, int32)
-DEFSTRINTCONVFN (char_matrix_sq_str_to_int64, int64)
-
-DEFSTRINTCONVFN (char_matrix_sq_str_to_uint8, uint8)
-DEFSTRINTCONVFN (char_matrix_sq_str_to_uint16, uint16)
-DEFSTRINTCONVFN (char_matrix_sq_str_to_uint32, uint32)
-DEFSTRINTCONVFN (char_matrix_sq_str_to_uint64, uint64)
-
-DEFSTRINTCONVFN (char_matrix_dq_str_to_int8, int8)
-DEFSTRINTCONVFN (char_matrix_dq_str_to_int16, int16)
-DEFSTRINTCONVFN (char_matrix_dq_str_to_int32, int32)
-DEFSTRINTCONVFN (char_matrix_dq_str_to_int64, int64)
-
-DEFSTRINTCONVFN (char_matrix_dq_str_to_uint8, uint8)
-DEFSTRINTCONVFN (char_matrix_dq_str_to_uint16, uint16)
-DEFSTRINTCONVFN (char_matrix_dq_str_to_uint32, uint32)
-DEFSTRINTCONVFN (char_matrix_dq_str_to_uint64, uint64)
-
-DEFINTCONVFN (range_to_int8, range, int8)
-DEFINTCONVFN (range_to_int16, range, int16)
-DEFINTCONVFN (range_to_int32, range, int32)
-DEFINTCONVFN (range_to_int64, range, int64)
-
-DEFINTCONVFN (range_to_uint8, range, uint8)
-DEFINTCONVFN (range_to_uint16, range, uint16)
-DEFINTCONVFN (range_to_uint32, range, uint32)
-DEFINTCONVFN (range_to_uint64, range, uint64)
-
-#define INT_CONV_FUNCTIONS(tfrom)                                       \
-  DEFCONVFN2 (tfrom ## _scalar_to_int8, tfrom, scalar, int8)            \
-  DEFCONVFN2 (tfrom ## _scalar_to_int16, tfrom, scalar, int16)          \
-  DEFCONVFN2 (tfrom ## _scalar_to_int32, tfrom, scalar, int32)          \
-  DEFCONVFN2 (tfrom ## _scalar_to_int64, tfrom, scalar, int64)          \
-                                                                        \
-  DEFCONVFN2 (tfrom ## _scalar_to_uint8, tfrom, scalar, uint8)          \
-  DEFCONVFN2 (tfrom ## _scalar_to_uint16, tfrom, scalar, uint16)        \
-  DEFCONVFN2 (tfrom ## _scalar_to_uint32, tfrom, scalar, uint32)        \
-  DEFCONVFN2 (tfrom ## _scalar_to_uint64, tfrom, scalar, uint64)        \
-                                                                        \
-  DEFCONVFN2 (tfrom ## _matrix_to_int8, tfrom, matrix, int8)            \
-  DEFCONVFN2 (tfrom ## _matrix_to_int16, tfrom, matrix, int16)          \
-  DEFCONVFN2 (tfrom ## _matrix_to_int32, tfrom, matrix, int32)          \
-  DEFCONVFN2 (tfrom ## _matrix_to_int64, tfrom, matrix, int64)          \
-                                                                        \
-  DEFCONVFN2 (tfrom ## _matrix_to_uint8, tfrom, matrix, uint8)          \
-  DEFCONVFN2 (tfrom ## _matrix_to_uint16, tfrom, matrix, uint16)        \
-  DEFCONVFN2 (tfrom ## _matrix_to_uint32, tfrom, matrix, uint32)        \
-  DEFCONVFN2 (tfrom ## _matrix_to_uint64, tfrom, matrix, uint64)
-
-INT_CONV_FUNCTIONS (int8)
-INT_CONV_FUNCTIONS (int16)
-INT_CONV_FUNCTIONS (int32)
-INT_CONV_FUNCTIONS (int64)
-
-INT_CONV_FUNCTIONS (uint8)
-INT_CONV_FUNCTIONS (uint16)
-INT_CONV_FUNCTIONS (uint32)
-INT_CONV_FUNCTIONS (uint64)
-
-#define INSTALL_INT_CONV_FUNCTIONS(tfrom)                               \
-  INSTALL_CONVOP (octave_ ## tfrom ## _scalar, octave_int8_matrix,      \
-                  tfrom ## _scalar_to_int8)                             \
-  INSTALL_CONVOP (octave_ ## tfrom ## _scalar, octave_int16_matrix,     \
-                  tfrom ## _scalar_to_int16)                            \
-  INSTALL_CONVOP (octave_ ## tfrom ## _scalar, octave_int32_matrix,     \
-                  tfrom ## _scalar_to_int32)                            \
-  INSTALL_CONVOP (octave_ ## tfrom ## _scalar, octave_int64_matrix,     \
-                  tfrom ## _scalar_to_int64)                            \
-                                                                        \
-  INSTALL_CONVOP (octave_ ## tfrom ## _scalar, octave_uint8_matrix,     \
-                  tfrom ## _scalar_to_uint8)                            \
-  INSTALL_CONVOP (octave_ ## tfrom ## _scalar, octave_uint16_matrix,    \
-                  tfrom ## _scalar_to_uint16)                           \
-  INSTALL_CONVOP (octave_ ## tfrom ## _scalar, octave_uint32_matrix,    \
-                  tfrom ## _scalar_to_uint32)                           \
-  INSTALL_CONVOP (octave_ ## tfrom ## _scalar, octave_uint64_matrix,    \
-                  tfrom ## _scalar_to_uint64)                           \
-                                                                        \
-  INSTALL_CONVOP (octave_ ## tfrom ## _matrix, octave_int8_matrix,      \
-                  tfrom ## _matrix_to_int8)                             \
-  INSTALL_CONVOP (octave_ ## tfrom ## _matrix, octave_int16_matrix,     \
-                  tfrom ## _matrix_to_int16)                            \
-  INSTALL_CONVOP (octave_ ## tfrom ## _matrix, octave_int32_matrix,     \
-                  tfrom ## _matrix_to_int32)                            \
-  INSTALL_CONVOP (octave_ ## tfrom ## _matrix, octave_int64_matrix,     \
-                  tfrom ## _matrix_to_int64)                            \
-                                                                        \
-  INSTALL_CONVOP (octave_ ## tfrom ## _matrix, octave_uint8_matrix,     \
-                  tfrom ## _matrix_to_uint8)                            \
-  INSTALL_CONVOP (octave_ ## tfrom ## _matrix, octave_uint16_matrix,    \
-                  tfrom ## _matrix_to_uint16)                           \
-  INSTALL_CONVOP (octave_ ## tfrom ## _matrix, octave_uint32_matrix,    \
-                  tfrom ## _matrix_to_uint32)                           \
-  INSTALL_CONVOP (octave_ ## tfrom ## _matrix, octave_uint64_matrix,    \
-                  tfrom ## _matrix_to_uint64)
-
-#define INSTALL_CONVOPS(tfrom)                                  \
-  INSTALL_CONVOP (octave_ ## tfrom, octave_int8_matrix,         \
-                  tfrom ## _to_int8)                            \
-  INSTALL_CONVOP (octave_ ## tfrom, octave_int16_matrix,        \
-                  tfrom ## _to_int16)                           \
-  INSTALL_CONVOP (octave_ ## tfrom, octave_int32_matrix,        \
-                  tfrom ## _to_int32)                           \
-  INSTALL_CONVOP (octave_ ## tfrom, octave_int64_matrix,        \
-                  tfrom ## _to_int64)                           \
-                                                                \
-  INSTALL_CONVOP (octave_ ## tfrom, octave_uint8_matrix,        \
-                  tfrom ## _to_uint8)                           \
-  INSTALL_CONVOP (octave_ ## tfrom, octave_uint16_matrix,       \
-                  tfrom ## _to_uint16)                          \
-  INSTALL_CONVOP (octave_ ## tfrom, octave_uint32_matrix,       \
-                  tfrom ## _to_uint32)                          \
-  INSTALL_CONVOP (octave_ ## tfrom, octave_uint64_matrix,       \
-                  tfrom ## _to_uint64)
-
-void
-install_int_conv_ops (void)
-{
-  INSTALL_CONVOPS (scalar)
-  INSTALL_CONVOPS (matrix)
-  INSTALL_CONVOPS (float_scalar)
-  INSTALL_CONVOPS (float_matrix)
-  INSTALL_CONVOPS (bool)
-  INSTALL_CONVOPS (bool_matrix)
-  INSTALL_CONVOPS (range)
-  INSTALL_CONVOPS (char_matrix_sq_str)
-  INSTALL_CONVOPS (char_matrix_dq_str)
-
-  INSTALL_INT_CONV_FUNCTIONS (int8)
-  INSTALL_INT_CONV_FUNCTIONS (int16)
-  INSTALL_INT_CONV_FUNCTIONS (int32)
-  INSTALL_INT_CONV_FUNCTIONS (int64)
-
-  INSTALL_INT_CONV_FUNCTIONS (uint8)
-  INSTALL_INT_CONV_FUNCTIONS (uint16)
-  INSTALL_INT_CONV_FUNCTIONS (uint32)
-  INSTALL_INT_CONV_FUNCTIONS (uint64)
-}
diff --git a/libinterp/operators/op-m-m.cc b/libinterp/operators/op-m-m.cc
--- a/libinterp/operators/op-m-m.cc
+++ b/libinterp/operators/op-m-m.cc
@@ -153,23 +153,16 @@ DEFNDASSIGNOP_FN (sgl_assign, float_matr
 
 DEFNULLASSIGNOP_FN (null_assign, matrix, delete_elements)
 
 DEFNDASSIGNOP_OP (assign_add, matrix, matrix, array, +=)
 DEFNDASSIGNOP_OP (assign_sub, matrix, matrix, array, -=)
 DEFNDASSIGNOP_FNOP (assign_el_mul, matrix, matrix, array, product_eq)
 DEFNDASSIGNOP_FNOP (assign_el_div, matrix, matrix, array, quotient_eq)
 
-CONVDECL (matrix_to_float_matrix)
-{
-  const octave_matrix& v = dynamic_cast<const octave_matrix&> (a);
-
-  return new octave_float_matrix (FloatNDArray (v.array_value ()));
-}
-
 void
 install_m_m_ops (void)
 {
   INSTALL_UNOP (op_not, octave_matrix, not);
   INSTALL_UNOP (op_uplus, octave_matrix, uplus);
   INSTALL_UNOP (op_uminus, octave_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_matrix, transpose);
@@ -215,11 +208,9 @@ install_m_m_ops (void)
   INSTALL_ASSIGNOP (op_asn_eq, octave_matrix, octave_null_matrix, null_assign);
   INSTALL_ASSIGNOP (op_asn_eq, octave_matrix, octave_null_str, null_assign);
   INSTALL_ASSIGNOP (op_asn_eq, octave_matrix, octave_null_sq_str, null_assign);
 
   INSTALL_ASSIGNOP (op_add_eq, octave_matrix, octave_matrix, assign_add);
   INSTALL_ASSIGNOP (op_sub_eq, octave_matrix, octave_matrix, assign_sub);
   INSTALL_ASSIGNOP (op_el_mul_eq, octave_matrix, octave_matrix, assign_el_mul);
   INSTALL_ASSIGNOP (op_el_div_eq, octave_matrix, octave_matrix, assign_el_div);
-
-  INSTALL_CONVOP (octave_matrix, octave_float_matrix, matrix_to_float_matrix);
 }
diff --git a/libinterp/operators/op-pm-pm.cc b/libinterp/operators/op-pm-pm.cc
--- a/libinterp/operators/op-pm-pm.cc
+++ b/libinterp/operators/op-pm-pm.cc
@@ -79,12 +79,11 @@ install_pm_pm_ops (void)
   INSTALL_UNOP (op_transpose, octave_perm_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_perm_matrix, transpose);
 
   INSTALL_BINOP (op_mul, octave_perm_matrix, octave_perm_matrix, mul);
   INSTALL_BINOP (op_div, octave_perm_matrix, octave_perm_matrix, div);
   INSTALL_BINOP (op_ldiv, octave_perm_matrix, octave_perm_matrix, ldiv);
   INSTALL_BINOP (op_pow, octave_perm_matrix, octave_scalar, pow);
 
-  INSTALL_CONVOP (octave_perm_matrix, octave_matrix, perm_matrix_to_matrix);
   INSTALL_ASSIGNCONV (octave_perm_matrix, octave_matrix, octave_matrix);
   INSTALL_WIDENOP (octave_perm_matrix, octave_matrix, perm_matrix_to_matrix);
 }
diff --git a/libinterp/operators/op-s-s.cc b/libinterp/operators/op-s-s.cc
--- a/libinterp/operators/op-s-s.cc
+++ b/libinterp/operators/op-s-s.cc
@@ -130,23 +130,16 @@ DEFBINOP (el_ldiv, scalar, scalar)
   return octave_value (v2.double_value () / d);
 }
 
 DEFSCALARBOOLOP_OP (el_and, scalar, scalar, &&)
 DEFSCALARBOOLOP_OP (el_or, scalar, scalar, ||)
 
 DEFNDCATOP_FN (s_s, scalar, scalar, array, array, concat)
 
-CONVDECL (double_to_float_matrix)
-{
-  const octave_scalar& v = dynamic_cast<const octave_scalar&> (a);
-
-  return new octave_float_matrix (FloatMatrix (1, 1, static_cast<float>(v.double_value ())));
-}
-
 void
 install_s_s_ops (void)
 {
   INSTALL_UNOP (op_not, octave_scalar, not);
   INSTALL_UNOP (op_uplus, octave_scalar, uplus);
   INSTALL_UNOP (op_uminus, octave_scalar, uminus);
   INSTALL_UNOP (op_transpose, octave_scalar, transpose);
   INSTALL_UNOP (op_hermitian, octave_scalar, hermitian);
@@ -176,11 +169,9 @@ install_s_s_ops (void)
   INSTALL_CATOP (octave_scalar, octave_scalar, s_s);
 
   INSTALL_ASSIGNCONV (octave_scalar, octave_scalar, octave_matrix);
   INSTALL_ASSIGNCONV (octave_float_scalar, octave_scalar, octave_float_matrix);
 
   INSTALL_ASSIGNCONV (octave_scalar, octave_null_matrix, octave_matrix);
   INSTALL_ASSIGNCONV (octave_scalar, octave_null_str, octave_matrix);
   INSTALL_ASSIGNCONV (octave_scalar, octave_null_sq_str, octave_matrix);
-
-  INSTALL_CONVOP (octave_scalar, octave_float_matrix, double_to_float_matrix);
 }
diff --git a/libinterp/operators/op-sbm-sbm.cc b/libinterp/operators/op-sbm-sbm.cc
--- a/libinterp/operators/op-sbm-sbm.cc
+++ b/libinterp/operators/op-sbm-sbm.cc
@@ -70,24 +70,16 @@ DEFNDCATOP_FN (sbm_sbm, sparse_bool_matr
 DEFNDCATOP_FN (sbm_sm, sparse_bool_matrix, sparse_matrix, sparse_matrix,
                sparse_matrix, concat)
 DEFNDCATOP_FN (sm_sbm, sparse_matrix, sparse_bool_matrix, sparse_matrix,
                sparse_matrix, concat)
 
 DEFASSIGNOP_FN (assign, sparse_bool_matrix, sparse_bool_matrix,
                 assign)
 
-CONVDECL (bool_matrix_to_double_matrix)
-{
-  const octave_sparse_bool_matrix& v = dynamic_cast<const octave_sparse_bool_matrix&> (a);
-
-  return new octave_sparse_matrix (SparseMatrix
-                                    (v.sparse_bool_matrix_value ()));
-}
-
 void
 install_sbm_sbm_ops (void)
 {
   INSTALL_UNOP (op_not, octave_sparse_bool_matrix, not);
   INSTALL_UNOP (op_uplus, octave_sparse_bool_matrix, uplus);
   INSTALL_UNOP (op_uminus, octave_sparse_bool_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_sparse_bool_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_sparse_bool_matrix, transpose);
@@ -104,12 +96,9 @@ install_sbm_sbm_ops (void)
 
   INSTALL_CATOP (octave_sparse_bool_matrix, octave_sparse_bool_matrix,
                  sbm_sbm);
   INSTALL_CATOP (octave_sparse_bool_matrix, octave_sparse_matrix, sbm_sm);
   INSTALL_CATOP (octave_sparse_matrix, octave_sparse_bool_matrix, sm_sbm);
 
   INSTALL_ASSIGNOP (op_asn_eq, octave_sparse_bool_matrix,
                     octave_sparse_bool_matrix, assign);
-
-  INSTALL_CONVOP (octave_sparse_bool_matrix, octave_sparse_matrix,
-                  bool_matrix_to_double_matrix);
 }
diff --git a/libinterp/operators/ops.h b/libinterp/operators/ops.h
--- a/libinterp/operators/ops.h
+++ b/libinterp/operators/ops.h
@@ -62,20 +62,16 @@ extern void install_ops (void);
 #define INSTALL_ASSIGNANYOP(op, t1, f)                                  \
   octave_value_typeinfo::register_assignany_op                          \
   (octave_value::op, t1::static_type_id (), CONCAT2 (oct_assignop_, f));
 
 #define INSTALL_ASSIGNCONV(t1, t2, tr)                                  \
   octave_value_typeinfo::register_pref_assign_conv                      \
   (t1::static_type_id (), t2::static_type_id (), tr::static_type_id ());
 
-#define INSTALL_CONVOP(t1, t2, f)                                       \
-  octave_value_typeinfo::register_type_conv_op                          \
-  (t1::static_type_id (), t2::static_type_id (), CONCAT2 (oct_conv_, f));
-
 #define INSTALL_WIDENOP(t1, t2, f)                                      \
   octave_value_typeinfo::register_widening_op                           \
   (t1::static_type_id (), t2::static_type_id (), CONCAT2 (oct_conv_, f));
 
 #define DEFASSIGNOP(name, t1, t2)                               \
   static octave_value                                           \
   CONCAT2 (oct_assignop_, name) (octave_base_value& a1,         \
                                  const octave_value_list& idx,  \
@@ -161,70 +157,19 @@ extern void install_ops (void);
     v1.f (idx, a2);                                                     \
     return octave_value ();                                             \
   }
 
 #define CONVDECL(name)                                          \
   static octave_base_value *                                    \
   CONCAT2 (oct_conv_, name) (const octave_base_value& a)
 
-#define CONVDECLX(name)                                 \
-  static octave_base_value *                            \
-  CONCAT2 (oct_conv_, name) (const octave_base_value&)
-
 #define DEFCONV(name, a_dummy, b_dummy)         \
   CONVDECL (name)
 
-#define DEFCONVFNX(name, tfrom, ovtto, tto, e)                          \
-  CONVDECL (name)                                                       \
-  {                                                                     \
-    const CONCAT2 (octave_, tfrom)& v = dynamic_cast<const CONCAT2 (octave_, tfrom)&> (a); \
-                                                                        \
-    return new CONCAT2 (octave_, ovtto) (CONCAT2 (tto, NDArray) (v.CONCAT2 (e, array_value) ())); \
-  }
-
-#define DEFCONVFNX2(name, tfrom, ovtto, e)                              \
-  CONVDECL (name)                                                       \
-  {                                                                     \
-    const CONCAT2 (octave_, tfrom)& v = dynamic_cast<const CONCAT2 (octave_, tfrom)&> (a); \
-                                                                        \
-    return new CONCAT2 (octave_, ovtto) (v.CONCAT2 (e, array_value) ()); \
-  }
-
-#define DEFDBLCONVFN(name, ovtfrom, e)                                  \
-  CONVDECL (name)                                                       \
-  {                                                                     \
-    const CONCAT2 (octave_, ovtfrom)& v = dynamic_cast<const CONCAT2 (octave_, ovtfrom)&> (a); \
-                                                                        \
-    return new octave_matrix (NDArray (v.CONCAT2 (e, _value) ()));      \
-  }
-
-#define DEFFLTCONVFN(name, ovtfrom, e)                                  \
-  CONVDECL (name)                                                       \
-  {                                                                     \
-    const CONCAT2 (octave_, ovtfrom)& v = dynamic_cast<const CONCAT2 (octave_, ovtfrom)&> (a); \
-                                                                        \
-    return new octave_float_matrix (FloatNDArray (v.CONCAT2 (e, _value) ())); \
-  }
-
-#define DEFSTRINTCONVFN(name, tto)                                      \
-  DEFCONVFNX(name, char_matrix_str, CONCAT2 (tto, _matrix), tto, char_)
-
-#define DEFSTRDBLCONVFN(name, tfrom)            \
-  DEFCONVFNX(name, tfrom, matrix, , char_)
-
-#define DEFSTRFLTCONVFN(name, tfrom)                    \
-  DEFCONVFNX(name, tfrom, float_matrix, Float, char_)
-
-#define DEFCONVFN(name, tfrom, tto)                                     \
-  DEFCONVFNX2 (name, tfrom, CONCAT2 (tto, _matrix), CONCAT2 (tto, _))
-
-#define DEFCONVFN2(name, tfrom, sm, tto)                                \
-  DEFCONVFNX2 (name, CONCAT3 (tfrom, _, sm), CONCAT2 (tto, _matrix), CONCAT2 (tto, _))
-
 #define DEFUNOPX(name, t)                               \
   static octave_value                                   \
   CONCAT2 (oct_unop_, name) (const octave_base_value&)
 
 #define DEFUNOP(name, t)                                        \
   static octave_value                                           \
   CONCAT2 (oct_unop_, name) (const octave_base_value& a)
 
