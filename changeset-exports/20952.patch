# HG changeset patch
# User Rik <rik@octave.org>
# Date 1450626137 28800
#      Sun Dec 20 07:42:17 2015 -0800
# Node ID 072559bd31f23a861538bfdafe6a4fe881ad39a9
# Parent  793886a00c3b72c906c24fc4699455a213eeb82d
maint: Eliminate useless statements after error().

* ov-base-diag.cc, ov-base-int.cc, ov-base-sparse.cc, ov-bool-mat.cc,
ov-cx-mat.cc, ov-fcn-handle.cc, ov-flt-cx-mat.cc, ov-flt-re-mat.cc, ov-perm.cc,
ov-re-mat.cc, ov-str-mat.cc, ov-struct.cc:
maint: Eliminate useless statements after error().

diff --git a/libinterp/octave-value/ov-base-diag.cc b/libinterp/octave-value/ov-base-diag.cc
--- a/libinterp/octave-value/ov-base-diag.cc
+++ b/libinterp/octave-value/ov-base-diag.cc
@@ -523,20 +523,17 @@ octave_base_diag<DMT, MT>::load_ascii (s
           matrix = DMT (MDiagArray2<el_type> (MArray<el_type> (tmp)));
           matrix.resize (r, c);
 
           // Invalidate cache. Probably not necessary, but safe.
           dense_cache = octave_value ();
         }
     }
   else
-    {
-      error ("load: failed to extract number of rows and columns");
-      success = false;
-    }
+    error ("load: failed to extract number of rows and columns");
 
   return success;
 }
 
 template <class DMT, class MT>
 void
 octave_base_diag<DMT, MT>::print_raw (std::ostream& os,
                                       bool pr_as_read_syntax) const
diff --git a/libinterp/octave-value/ov-base-int.cc b/libinterp/octave-value/ov-base-int.cc
--- a/libinterp/octave-value/ov-base-int.cc
+++ b/libinterp/octave-value/ov-base-int.cc
@@ -225,20 +225,17 @@ octave_base_int_matrix<T>::load_ascii (s
             {
               error ("load: failed to load matrix constant");
               success = false;
             }
 
           this->matrix = tmp;
         }
       else
-        {
-          error ("load: failed to extract number of rows and columns");
-          success = false;
-        }
+        error ("load: failed to extract number of rows and columns");
     }
   else
     error ("load: failed to extract number of dimensions");
 
   return success;
 }
 
 template <class T>
diff --git a/libinterp/octave-value/ov-base-sparse.cc b/libinterp/octave-value/ov-base-sparse.cc
--- a/libinterp/octave-value/ov-base-sparse.cc
+++ b/libinterp/octave-value/ov-base-sparse.cc
@@ -459,20 +459,17 @@ octave_base_sparse<T>::load_ascii (std::
         {
           error ("load: failed to load matrix constant");
           success = false;
         }
 
       matrix = tmp;
     }
   else
-    {
-      error ("load: failed to extract number of rows and columns");
-      success = false;
-    }
+    error ("load: failed to extract number of rows and columns");
 
   return success;
 }
 
 
 template <class T>
 octave_value
 octave_base_sparse<T>::fast_elem_extract (octave_idx_type n) const
diff --git a/libinterp/octave-value/ov-bool-mat.cc b/libinterp/octave-value/ov-bool-mat.cc
--- a/libinterp/octave-value/ov-bool-mat.cc
+++ b/libinterp/octave-value/ov-bool-mat.cc
@@ -253,33 +253,24 @@ octave_bool_matrix::load_ascii (std::ist
                       if (is)
                         {
                           for (octave_idx_type i = 0; i < btmp.numel (); i++)
                             btmp.elem (i) = (tmp.elem (i) != 0.);
 
                           matrix = btmp;
                         }
                       else
-                        {
-                          error ("load: failed to load matrix constant");
-                          success = false;
-                        }
+                        error ("load: failed to load matrix constant");
                     }
                 }
               else
-                {
-                  error ("load: failed to extract dimensions");
-                  success = false;
-                }
+                error ("load: failed to extract dimensions");
             }
           else
-            {
-              error ("load: failed to extract number of dimensions");
-              success = false;
-            }
+            error ("load: failed to extract number of dimensions");
         }
       else if (kw == "rows")
         {
           octave_idx_type nr = val;
           octave_idx_type nc = 0;
 
           if (nr >= 0 && extract_keyword (is, "columns", nc) && nc >= 0)
             {
@@ -292,20 +283,17 @@ octave_bool_matrix::load_ascii (std::ist
                       boolMatrix btmp (nr, nc);
                       for (octave_idx_type j = 0; j < nc; j++)
                         for (octave_idx_type i = 0; i < nr; i++)
                           btmp.elem (i,j) = (tmp.elem (i, j) != 0.);
 
                       matrix = btmp;
                     }
                   else
-                    {
-                      error ("load: failed to load matrix constant");
-                      success = false;
-                    }
+                    error ("load: failed to load matrix constant");
                 }
               else if (nr == 0 || nc == 0)
                 matrix = boolMatrix (nr, nc);
               else
                 panic_impossible ();
             }
           else
             {
diff --git a/libinterp/octave-value/ov-cx-mat.cc b/libinterp/octave-value/ov-cx-mat.cc
--- a/libinterp/octave-value/ov-cx-mat.cc
+++ b/libinterp/octave-value/ov-cx-mat.cc
@@ -385,51 +385,39 @@ octave_complex_matrix::load_ascii (std::
                 {
                   ComplexNDArray tmp(dv);
 
                   is >> tmp;
 
                   if (is)
                     matrix = tmp;
                   else
-                    {
-                      error ("load: failed to load matrix constant");
-                      success = false;
-                    }
+                    error ("load: failed to load matrix constant");
                 }
               else
-                {
-                  error ("load: failed to read dimensions");
-                  success = false;
-                }
+                error ("load: failed to read dimensions");
             }
           else
-            {
-              error ("load: failed to extract number of dimensions");
-              success = false;
-            }
+            error ("load: failed to extract number of dimensions");
         }
       else if (kw == "rows")
         {
           octave_idx_type nr = val;
           octave_idx_type nc = 0;
 
           if (nr >= 0 && extract_keyword (is, "columns", nc) && nc >= 0)
             {
               if (nr > 0 && nc > 0)
                 {
                   ComplexMatrix tmp (nr, nc);
                   is >> tmp;
                   if (is)
                     matrix = tmp;
                   else
-                    {
-                      error ("load: failed to load matrix constant");
-                      success = false;
-                    }
+                    error ("load: failed to load matrix constant");
                 }
               else if (nr == 0 || nc == 0)
                 matrix = ComplexMatrix (nr, nc);
               else
                 panic_impossible ();
             }
           else
             {
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -274,20 +274,17 @@ octave_fcn_handle::set_fcn (const std::s
 
           if (xfcn)
             {
               octave_value tmp (xfcn);
 
               fcn = octave_value (new octave_fcn_handle (tmp, nm));
             }
           else
-            {
-              error ("function handle points to non-existent function");
-              success = false;
-            }
+            error ("function handle points to non-existent function");
         }
       else
         {
           // Next just search for it anywhere in the system path
           string_vector names(3);
           names(0) = nm + ".oct";
           names(1) = nm + ".mex";
           names(2) = nm + ".m";
@@ -304,20 +301,17 @@ octave_fcn_handle::set_fcn (const std::s
 
           if (xfcn)
             {
               octave_value tmp (xfcn);
 
               fcn = octave_value (new octave_fcn_handle (tmp, nm));
             }
           else
-            {
-              error ("function handle points to non-existent function");
-              success = false;
-            }
+            error ("function handle points to non-existent function");
         }
     }
   else
     {
       if (fpath.length () > 0)
         {
           size_t xpos = fpath.find_last_of (file_ops::dir_sep_chars ());
 
@@ -327,20 +321,17 @@ octave_fcn_handle::set_fcn (const std::s
 
           if (xfcn)
             {
               octave_value tmp (xfcn);
 
               fcn = octave_value (new octave_fcn_handle (tmp, nm));
             }
           else
-            {
-              error ("function handle points to non-existent function");
-              success = false;
-            }
+            error ("function handle points to non-existent function");
         }
       else
         {
           fcn = symbol_table::find_function (nm);
 
           if (! fcn.is_function ())
             {
               error ("function handle points to non-existent function");
diff --git a/libinterp/octave-value/ov-flt-cx-mat.cc b/libinterp/octave-value/ov-flt-cx-mat.cc
--- a/libinterp/octave-value/ov-flt-cx-mat.cc
+++ b/libinterp/octave-value/ov-flt-cx-mat.cc
@@ -359,51 +359,39 @@ octave_float_complex_matrix::load_ascii 
                 {
                   FloatComplexNDArray tmp(dv);
 
                   is >> tmp;
 
                   if (is)
                     matrix = tmp;
                   else
-                    {
-                      error ("load: failed to load matrix constant");
-                      success = false;
-                    }
+                    error ("load: failed to load matrix constant");
                 }
               else
-                {
-                  error ("load: failed to read dimensions");
-                  success = false;
-                }
+                error ("load: failed to read dimensions");
             }
           else
-            {
-              error ("load: failed to extract number of dimensions");
-              success = false;
-            }
+            error ("load: failed to extract number of dimensions");
         }
       else if (kw == "rows")
         {
           octave_idx_type nr = val;
           octave_idx_type nc = 0;
 
           if (nr >= 0 && extract_keyword (is, "columns", nc) && nc >= 0)
             {
               if (nr > 0 && nc > 0)
                 {
                   FloatComplexMatrix tmp (nr, nc);
                   is >> tmp;
                   if (is)
                     matrix = tmp;
                   else
-                    {
-                      error ("load: failed to load matrix constant");
-                      success = false;
-                    }
+                    error ("load: failed to load matrix constant");
                 }
               else if (nr == 0 || nc == 0)
                 matrix = FloatComplexMatrix (nr, nc);
               else
                 panic_impossible ();
             }
           else
             {
diff --git a/libinterp/octave-value/ov-flt-re-mat.cc b/libinterp/octave-value/ov-flt-re-mat.cc
--- a/libinterp/octave-value/ov-flt-re-mat.cc
+++ b/libinterp/octave-value/ov-flt-re-mat.cc
@@ -386,51 +386,39 @@ octave_float_matrix::load_ascii (std::is
                 {
                   FloatNDArray tmp(dv);
 
                   is >> tmp;
 
                   if (is)
                     matrix = tmp;
                   else
-                    {
-                      error ("load: failed to load matrix constant");
-                      success = false;
-                    }
+                    error ("load: failed to load matrix constant");
                 }
               else
-                {
-                  error ("load: failed to read dimensions");
-                  success = false;
-                }
+                error ("load: failed to read dimensions");
             }
           else
-            {
-              error ("load: failed to extract number of dimensions");
-              success = false;
-            }
+            error ("load: failed to extract number of dimensions");
         }
       else if (kw == "rows")
         {
           octave_idx_type nr = val;
           octave_idx_type nc = 0;
 
           if (nr >= 0 && extract_keyword (is, "columns", nc) && nc >= 0)
             {
               if (nr > 0 && nc > 0)
                 {
                   FloatMatrix tmp (nr, nc);
                   is >> tmp;
                   if (is)
                     matrix = tmp;
                   else
-                    {
-                      error ("load: failed to load matrix constant");
-                      success = false;
-                    }
+                    error ("load: failed to load matrix constant");
                 }
               else if (nr == 0 || nc == 0)
                 matrix = FloatMatrix (nr, nc);
               else
                 panic_impossible ();
             }
           else
             {
diff --git a/libinterp/octave-value/ov-perm.cc b/libinterp/octave-value/ov-perm.cc
--- a/libinterp/octave-value/ov-perm.cc
+++ b/libinterp/octave-value/ov-perm.cc
@@ -303,20 +303,17 @@ octave_perm_matrix::load_ascii (std::ist
           for (octave_idx_type i = 0; i < n; i++) pvec(i) = tmp(i) - 1;
           matrix = PermMatrix (pvec, colp);
 
           // Invalidate cache. Probably not necessary, but safe.
           dense_cache = octave_value ();
         }
     }
   else
-    {
-      error ("load: failed to extract size & orientation");
-      success = false;
-    }
+    error ("load: failed to extract size & orientation");
 
   return success;
 }
 
 bool
 octave_perm_matrix::save_binary (std::ostream& os, bool&)
 {
 
diff --git a/libinterp/octave-value/ov-re-mat.cc b/libinterp/octave-value/ov-re-mat.cc
--- a/libinterp/octave-value/ov-re-mat.cc
+++ b/libinterp/octave-value/ov-re-mat.cc
@@ -488,51 +488,39 @@ octave_matrix::load_ascii (std::istream&
                 {
                   NDArray tmp(dv);
 
                   is >> tmp;
 
                   if (is)
                     matrix = tmp;
                   else
-                    {
-                      error ("load: failed to load matrix constant");
-                      success = false;
-                    }
+                    error ("load: failed to load matrix constant");
                 }
               else
-                {
-                  error ("load: failed to read dimensions");
-                  success = false;
-                }
+                error ("load: failed to read dimensions");
             }
           else
-            {
-              error ("load: failed to extract number of dimensions");
-              success = false;
-            }
+            error ("load: failed to extract number of dimensions");
         }
       else if (kw == "rows")
         {
           octave_idx_type nr = val;
           octave_idx_type nc = 0;
 
           if (nr >= 0 && extract_keyword (is, "columns", nc) && nc >= 0)
             {
               if (nr > 0 && nc > 0)
                 {
                   Matrix tmp (nr, nc);
                   is >> tmp;
                   if (is)
                     matrix = tmp;
                   else
-                    {
-                      error ("load: failed to load matrix constant");
-                      success = false;
-                    }
+                    error ("load: failed to load matrix constant");
                 }
               else if (nr == 0 || nc == 0)
                 matrix = Matrix (nr, nc);
               else
                 panic_impossible ();
             }
           else
             {
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -381,20 +381,17 @@ octave_char_matrix_str::load_ascii (std:
                 }
               else
                 {
                   error ("load: failed to read dimensions");
                   success = false;
                 }
             }
           else
-            {
-              error ("load: failed to extract matrix size");
-              success = false;
-            }
+            error ("load: failed to extract matrix size");
         }
       else if (kw == "elements")
         {
           int elements = val;
 
           if (elements >= 0)
             {
               // FIXME: need to be able to get max length before doing anything.
@@ -435,20 +432,17 @@ octave_char_matrix_str::load_ascii (std:
                              i+1);
                       success = false;
                     }
                 }
 
               matrix = chm;
             }
           else
-            {
-              error ("load: failed to extract number of string elements");
-              success = false;
-            }
+            error ("load: failed to extract number of string elements");
         }
       else if (kw == "length")
         {
           int len = val;
 
           if (len >= 0)
             {
               // This is cruft for backward compatibility,
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -750,20 +750,17 @@ octave_struct::load_ascii (std::istream&
               Cell tcell = t2.is_cell () ? t2.xcell_value ("load: internal error loading struct elements") : Cell (t2);
 
               m.setfield (nm, tcell);
             }
 
           if (is)
             map = m;
           else
-            {
-              error ("load: failed to load structure");
-              success = false;
-            }
+            error ("load: failed to load structure");
         }
       else if (len == 0)
         map = octave_map (dv);
       else
         panic_impossible ();
     }
   else
     {
@@ -872,20 +869,17 @@ octave_struct::load_binary (std::istream
           Cell tcell = t2.is_cell () ? t2.xcell_value ("load: internal error loading struct elements") : Cell (t2);
 
           m.setfield (nm, tcell);
         }
 
       if (is)
         map = m;
       else
-        {
-          error ("load: failed to load structure");
-          success = false;
-        }
+        error ("load: failed to load structure");
     }
   else if (len == 0)
     map = octave_map (dv);
   else
     success = false;
 
   return success;
 }
@@ -1398,20 +1392,17 @@ octave_scalar_struct::load_ascii (std::i
                 break;
 
               m.setfield (nm, t2);
             }
 
           if (is)
             map = m;
           else
-            {
-              error ("load: failed to load structure");
-              success = false;
-            }
+            error ("load: failed to load structure");
         }
       else if (len == 0)
         map = octave_scalar_map ();
       else
         panic_impossible ();
     }
   else
     {
@@ -1482,20 +1473,17 @@ octave_scalar_struct::load_binary (std::
             break;
 
           m.setfield (nm, t2);
         }
 
       if (is)
         map = m;
       else
-        {
-          error ("load: failed to load structure");
-          success = false;
-        }
+        error ("load: failed to load structure");
     }
   else if (len == 0)
     map = octave_scalar_map ();
   else
     success = false;
 
   return success;
 }
