# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1513878440 18000
#      Thu Dec 21 12:47:20 2017 -0500
# Node ID 4ca5c9f899d3934d2fc82c5191fd192c2b368139
# Parent  fe54e9633815a24b8f7b75e5603f31c968b83ec2
maint: Strip trailing whitespace from source files.

diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -696,17 +696,17 @@ namespace QtHandles
     gh_manager::post_function (Figure::updateBoundingBoxHelper, d);
   }
 
   void
   Figure::close_figure_callback (void)
   {
     figure::properties& fp = properties<figure> ();
     octave_value fnum = fp.get___myhandle__ ().as_octave_value ();
-    
+
     Ffeval (ovl ("close", fnum));
   }
 
   bool
   Figure::eventNotifyBefore (QObject *obj, QEvent *xevent)
   {
     if (! m_blockUpdates)
       {
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -3304,17 +3304,17 @@ base_properties::update_autopos (const s
     parent_go.get_properties ().update_autopos (elem_type);
 }
 
 void
 base_properties::update_handlevisibility (void)
 {
   if (is_handle_visible ())
     return;
-  
+
   // This object should not be the root "callbackobject"
   graphics_object rt = gh_manager::get_object (0);
   octave_value cbo = rt.get ("callbackobject");
   if (! cbo.isempty () && cbo.double_value () == __myhandle__)
     {
       gh_manager::auto_lock guard;
       auto& root_props =
         dynamic_cast<root_figure::properties&> (rt.get_properties ());
@@ -3333,17 +3333,17 @@ base_properties::update_handlevisibility
           auto& fig_props =
             dynamic_cast<figure::properties&> (fig.get_properties ());
           fig_props.set_currentobject (Matrix ());
         }
     }
 }
 
 /*
-## test current figure and current axes have visible handles 
+## test current figure and current axes have visible handles
 %!test
 %! hf1 = figure ("visible", "off");
 %! hf2 = figure ("visible", "off");
 %! hax1 = axes ();
 %! hax2 = axes ();
 %! unwind_protect
 %!   assert (get (0, "currentfigure"), hf2);
 %!   assert (get (hf2, "currentaxes"), hax2);
@@ -3353,17 +3353,17 @@ base_properties::update_handlevisibility
 %!   assert (get (hf2, "currentaxes"), hax1);
 %!   assert (get (hf2, "currentobject"), []);
 %! unwind_protect_cleanup
 %!   close ([hf1, hf2]);
 %! end_unwind_protect;
 */
 
 /*
-## test current callback object have visible handle 
+## test current callback object have visible handle
 %!test
 %! hf = figure ("visible", "off");
 %! hax = axes ();
 %! unwind_protect
 %!   fcn = @(h) assert (gcbo (), h);
 %!   addlistener (hax, "color", fcn);
 %!   set (hax, "color", "r");
 %!   dellistener (hax, "color", fcn);
diff --git a/libinterp/parse-tree/jit-typeinfo.cc b/libinterp/parse-tree/jit-typeinfo.cc
--- a/libinterp/parse-tree/jit-typeinfo.cc
+++ b/libinterp/parse-tree/jit-typeinfo.cc
@@ -1195,17 +1195,17 @@ namespace octave
       range_contents[3] = index_t;
       range_t->setBody (range_contents);
     }
     range = do_register_new_type ("range", any, range_t);
 
     // jit_type: "matrix" < "any"
     matrix_t = llvm::StructType::create (context, "matrix");
     {
-      llvm::Type *refcount_t = llvm::Type::getIntNTy (context, sizeof(int) * 8);    
+      llvm::Type *refcount_t = llvm::Type::getIntNTy (context, sizeof(int) * 8);
       llvm::Type *matrix_contents[5];
       matrix_contents[0] = refcount_t->getPointerTo ();
       matrix_contents[1] = scalar_t->getPointerTo ();
       matrix_contents[2] = index_t;
       matrix_contents[3] = index_t->getPointerTo ();
       matrix_contents[4] = string_t;
       matrix_t->setBody (llvm::makeArrayRef (matrix_contents, 5));
     }
diff --git a/libinterp/parse-tree/jit-util.h b/libinterp/parse-tree/jit-util.h
--- a/libinterp/parse-tree/jit-util.h
+++ b/libinterp/parse-tree/jit-util.h
@@ -55,24 +55,24 @@ namespace llvm
   class PassManager;
 #endif
   class ExecutionEngine;
   class Function;
   class BasicBlock;
   class LLVMContext;
   class Type;
   class StructType;
-  class FunctionType;  
+  class FunctionType;
   class Twine;
   class GlobalValue;
   class GlobalVariable;
   class TerminatorInst;
   class PHINode;
   class TargetMachine;
-  
+
   class ConstantFolder;
 
   template <bool preserveNames>
   class IRBuilderDefaultInserter;
 
   template <bool preserveNames, typename T, typename Inserter>
   class IRBuilder;
 
diff --git a/libinterp/parse-tree/pt-jit.h b/libinterp/parse-tree/pt-jit.h
--- a/libinterp/parse-tree/pt-jit.h
+++ b/libinterp/parse-tree/pt-jit.h
@@ -537,17 +537,17 @@ namespace octave
 
     // Optimize a function in the LLVM module
     void optimize (llvm::Function *fn) const;
 
     // FIXME: Once this has been called, we should not be able
     // to change anything in the module...
     void finalizeObject (void);
 
-  private:  
+  private:
     void do_add_global_mapping (const llvm::GlobalValue* gv, void* p) const;
 
     llvm::Module *module;
     llvm::ExecutionEngine *engine;
   };
 
 
   class
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -784,102 +784,102 @@ dnl See bug #52425.
 dnl
 AC_DEFUN([OCTAVE_CHECK_LIB_ARPACK_OK_2], [
   AC_CACHE_CHECK([whether the arpack library is free of bugs],
     [octave_cv_lib_arpack_ok_2],
     [save_FFLAGS="$FFLAGS"
     FFLAGS="$FFLAGS $F77_INTEGER_8_FLAG"
     AC_LANG_PUSH(Fortran 77)
     AC_RUN_IFELSE([[
-      program bug_52425 
+      program bug_52425
 c
       integer          maxn, maxnev, maxncv, ldv
-      parameter       (maxn=256, maxnev=10, maxncv=25, 
+      parameter       (maxn=256, maxnev=10, maxncv=25,
      $                 ldv=maxn )
 c
       Double precision
      &                 v(ldv,maxncv), workl(maxncv*(maxncv+8)),
      &                 workd(3*maxn), d(maxncv,2), resid(maxn),
      &                 ax(maxn)
       logical          select(maxncv)
       integer          iparam(11), ipntr(11)
 c
       character        bmat*1, which*2
-      integer          ido, n, nev, ncv, lworkl, info, ierr, j, 
+      integer          ido, n, nev, ncv, lworkl, info, ierr, j,
      &                 nx, nconv, maxitr, mode, ishfts
       logical          rvec
-      Double precision      
+      Double precision
      &                 tol, sigma
 c
       Double precision
      &                 zero
       parameter        (zero = 0.0D+0)
 c
-      Double precision           
+      Double precision
      &                 dnrm2
       external         dnrm2, daxpy
 c
       intrinsic        abs
 c
       n = 20
-      nev =  4 
-      ncv =  20 
+      nev =  4
+      ncv =  20
       bmat = 'I'
       which = 'BE'
 c
       lworkl = ncv*(ncv+8)
-      tol = zero 
+      tol = zero
       info = 1
       do j = 1,n
          resid (j) = 1.0d0
       end do
       ido = 0
 c
       ishfts = 1
       maxitr = 300
       mode   = 1
 c
-      iparam(1) = ishfts 
-      iparam(3) = maxitr 
-      iparam(7) = mode 
+      iparam(1) = ishfts
+      iparam(3) = maxitr
+      iparam(7) = mode
 c
  10   continue
 c
-         call dsaupd ( ido, bmat, n, which, nev, tol, resid, 
+         call dsaupd ( ido, bmat, n, which, nev, tol, resid,
      &                 ncv, v, ldv, iparam, ipntr, workd, workl,
      &                 lworkl, info )
 c
          if (ido .eq. -1 .or. ido .eq. 1) then
             call av (n, workd(ipntr(1)), workd(ipntr(2)))
             go to 10
-         end if 
+         end if
 c
       if ( info .lt. 0 ) then
           stop 1
-      else 
+      else
          rvec = .false.
 c
-         call dseupd ( rvec, 'All', select, d, v, ldv, sigma, 
-     &        bmat, n, which, nev, tol, resid, ncv, v, ldv, 
+         call dseupd ( rvec, 'All', select, d, v, ldv, sigma,
+     &        bmat, n, which, nev, tol, resid, ncv, v, ldv,
      &        iparam, ipntr, workd, workl, lworkl, ierr )
 c
          if ( ierr .ne. 0) then
              stop 1
          else
              nconv =  iparam(5)
              do 20 j=1, nconv
                 call av(n, v(1,j), ax)
                 call daxpy(n, -d(j,1), v(1,j), 1, ax, 1)
                 d(j,2) = dnrm2(n, ax, 1)
                 d(j,2) = d(j,2) / abs(d(j,1))
 c
  20          continue
 c
 c            | Litmus test: return 1 or 0 based on returned eigenvalue
-c     
+c
              if (abs(d(1,1) - 2.0810) > 1.0d-4) then
                 stop 1
              else
                 stop 0
              end if
          end if
       end if
 c
diff --git a/scripts/plot/util/figure.m b/scripts/plot/util/figure.m
--- a/scripts/plot/util/figure.m
+++ b/scripts/plot/util/figure.m
@@ -88,17 +88,17 @@ function h = figure (varargin)
     __set_default_mouse_modes__ (f);
   elseif (nargs > 0)
     set (f, varargin{:});
   endif
 
   if (strcmp (get (f, "handlevisibility"), "on"))
     set (0, "currentfigure", f);
   endif
-  
+
   ## When switching to figure N, make figure visible and on top of stack,
   ## unless visibility is explicitly switched off.
   if (! init_new_figure && ! any (strcmpi (varargin(1:2:end), "visible")
                                   && strcmpi (varargin(2:2:end), "off")))
     set (f, "visible", "on");
   endif
 
   if (nargout > 0)
