# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1422027476 0
#      Fri Jan 23 15:37:56 2015 +0000
# Node ID e8e3a89fa370ae3c02185b2418865c331c79acae
# Parent  68cc16969f78372e388436ea3593951f83b3738f
Fix colormap functions when N is not of class double (bug #44070)

* autumn.m, bone.m, cool.m, copper.m, cubehelix.m, gray.m, hsv.m, ocean.m,
rainbow.m, spring.m, summer.m, winter.m: cast N to double since in this
colormap functions, N is used directly used in the operations and ends up
casting colormap to something else.  Note that a colormap MUST be of class
double.  Also, if N is an integer class, all values in colormap end up 0
or 1.  Also simplify code for input checking by declaring default on function
signature line.
* flag.m, gmap40.m, hot.m, jet.m, lines.m, pink.m, prism.m, white.m: simplify
input check like the other colormap functions.
* test/colormaps.tst: add new test file to test all colormaps at once.
* test/Makefile.am: add new test file to build system.


used to create the colormap and if less

diff --git a/scripts/image/autumn.m b/scripts/image/autumn.m
--- a/scripts/image/autumn.m
+++ b/scripts/image/autumn.m
@@ -26,40 +26,36 @@
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "autumn");
 ## PKG_DEL: colormap ("unregister", "autumn");
 
-function map = autumn (n)
+function map = autumn (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = rows (colormap);
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("autumn: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("autumn: N must be a scalar");
   endif
+  n = double (n);
 
   if (n == 1)
     map = [1, 0, 0];
   elseif (n > 1)
     r = ones (n, 1);
     g = [0:(n-1)]' / (n - 1);
     b = zeros (n, 1);
     map = [r, g, b];
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
-
 %!demo
 %! ## Show the 'autumn' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
 %! axis ([1, 64, 0, 1], "ticy", "xy");
 %! colormap (autumn (64));
 
diff --git a/scripts/image/bone.m b/scripts/image/bone.m
--- a/scripts/image/bone.m
+++ b/scripts/image/bone.m
@@ -26,27 +26,24 @@
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "bone");
 ## PKG_DEL: colormap ("unregister", "bone");
 
-function map = bone (n)
+function map = bone (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = rows (colormap);
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("bone: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("bone: N must be a scalar");
   endif
+  n = double (n);
 
   if (n == 1)
     map = [1/8 1/8 1/8];
   elseif (n == 2)
     map = [1/16 1/8 1/8
             1    1   1 ];
   elseif (n > 2)
     x = [0:n-1]' / (n-1);
@@ -78,15 +75,14 @@ function map = bone (n)
 
     map = [r, g, b];
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
-
 %!demo
 %! ## Show the 'bone' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
 %! axis ([1, 64, 0, 1], "ticy", "xy");
 %! colormap (bone (64));
 
diff --git a/scripts/image/cool.m b/scripts/image/cool.m
--- a/scripts/image/cool.m
+++ b/scripts/image/cool.m
@@ -25,40 +25,36 @@
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "cool");
 ## PKG_DEL: colormap ("unregister", "cool");
 
-function map = cool (n)
+function map = cool (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = rows (colormap);
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("cool: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("cool: N must be a scalar");
   endif
+  n = double (n);
 
   if (n == 1)
     map = [0, 1, 1];
   elseif (n > 1)
     r = [0:(n-1)]' / (n - 1);
     g = 1 - r;
     b = ones (n, 1);
     map = [r, g, b];
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
-
 %!demo
 %! ## Show the 'cool' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
 %! axis ([1, 64, 0, 1], "ticy", "xy");
 %! colormap (cool (64));
 
diff --git a/scripts/image/copper.m b/scripts/image/copper.m
--- a/scripts/image/copper.m
+++ b/scripts/image/copper.m
@@ -26,42 +26,38 @@
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "copper");
 ## PKG_DEL: colormap ("unregister", "copper");
 
-function map = copper (n)
+function map = copper (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = rows (colormap);
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("copper: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("copper: N must be a scalar");
   endif
+  n = double (n);
 
   if (n == 1)
     map = [0, 0, 0];
   elseif (n > 1)
     x = [0:(n-1)]' / (n - 1);
     r = (x < 4/5) .* (5/4 * x) ...
       + (x >= 4/5);
     g = 0.7812 * x;
     b = 0.4975 * x;
     map = [r, g, b];
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
-
 %!demo
 %! ## Show the 'copper' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
 %! axis ([1, 64, 0, 1], "ticy", "xy");
 %! colormap (copper (64));
 
diff --git a/scripts/image/cubehelix.m b/scripts/image/cubehelix.m
--- a/scripts/image/cubehelix.m
+++ b/scripts/image/cubehelix.m
@@ -49,16 +49,17 @@
 function map = cubehelix (n = rows (colormap ()), start = 0.5,
                           rots = -1.5, hue = 1, gamma = 1)
 
   if (nargin > 5)
     print_usage ()
   elseif (! isscalar (n))
     error ("cubehelix: N must be a scalar");
   endif
+  n = double (n);
 
   if (n > 1)
     coeff = [ -0.14861  -0.29227   1.97294
                1.78277  -0.90649   0.00000];
 
     fract = ((0:n-1) / (n-1))';
     angle = 2 * pi * (start/3 + 1 + rots*fract);
     fract = fract .^ gamma;
diff --git a/scripts/image/flag.m b/scripts/image/flag.m
--- a/scripts/image/flag.m
+++ b/scripts/image/flag.m
@@ -26,38 +26,33 @@
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "flag");
 ## PKG_DEL: colormap ("unregister", "flag");
 
-function map = flag (n)
+function map = flag (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = rows (colormap);
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("flag: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("flag: N must be a scalar");
   endif
 
   if (n == 1)
     map = [1, 0, 0];
   elseif (n > 1)
     C = [1, 0, 0; 1, 1, 1; 0, 0, 1; 0, 0, 0];
     map = C(rem (0:(n-1), 4) + 1, :);
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
-
 %!demo
 %! ## Show the 'flag' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
 %! axis ([1, 64, 0, 1], "ticy", "xy");
 %! colormap (flag (64));
 
diff --git a/scripts/image/gmap40.m b/scripts/image/gmap40.m
--- a/scripts/image/gmap40.m
+++ b/scripts/image/gmap40.m
@@ -26,36 +26,31 @@
 ## If unspecified, a length of 6 is assumed.  Larger values of @var{n} result
 ## in a repetition of the above colors.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## PKG_ADD: colormap ("register", "gmap40");
 ## PKG_DEL: colormap ("unregister", "gmap40");
 
-function map = gmap40 (n)
+function map = gmap40 (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = 6;
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("gmap40: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("gmap40: N must be a scalar");
   endif
 
   if (n > 0)
     C = [1, 0, 0; 0, 1, 0; 0, 0, 1; 1, 1, 0; 1, 0, 1; 0, 1, 1];
     map = C(rem (0:(n-1), 6) + 1, :);
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
-
 %!demo
 %! ## Show the 'gmap40' colormap as an image
 %! image (1:6, linspace (0, 1, 6), repmat ((1:6)', 1, 6));
 %! axis ([1, 6, 0, 1], "ticy", "xy");
 %! colormap (gmap40 (6));
 
diff --git a/scripts/image/gray.m b/scripts/image/gray.m
--- a/scripts/image/gray.m
+++ b/scripts/image/gray.m
@@ -28,38 +28,34 @@
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 ## PKG_ADD: colormap ("register", "gray");
 ## PKG_DEL: colormap ("unregister", "gray");
 
-function map = gray (n)
+function map = gray (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = rows (colormap);
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("gray: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("gray: N must be a scalar");
   endif
+  n = double (n);
 
   if (n == 1)
     map = [0, 0, 0];
   elseif (n > 1)
     gr = [0:(n-1)]' / (n - 1);
     map = [gr, gr, gr];
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
-
 %!demo
 %! ## Show the 'gray' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
 %! axis ([1, 64, 0, 1], "ticy", "xy");
 %! colormap (gray (64));
 
diff --git a/scripts/image/hot.m b/scripts/image/hot.m
--- a/scripts/image/hot.m
+++ b/scripts/image/hot.m
@@ -26,26 +26,22 @@
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "hot");
 ## PKG_DEL: colormap ("unregister", "hot");
 
-function map = hot (n)
+function map = hot (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = rows (colormap);
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("hot: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("hot: N must be a scalar");
   endif
 
   if (n == 1)
     map = [1, 1, 1];
   elseif (n == 2)
     map = [1, 1, 1/2
            1, 1,  1 ];
   elseif (n > 2)
@@ -67,15 +63,14 @@ function map = hot (n)
 
     map = [r, g, b];
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
-
 %!demo
 %! ## Show the 'hot' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
 %! axis ([1, 64, 0, 1], "ticy", "xy");
 %! colormap (hot (64));
 
diff --git a/scripts/image/hsv.m b/scripts/image/hsv.m
--- a/scripts/image/hsv.m
+++ b/scripts/image/hsv.m
@@ -30,38 +30,34 @@
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "hsv");
 ## PKG_DEL: colormap ("unregister", "hsv");
 
-function map = hsv (n)
+function map = hsv (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = rows (colormap);
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("hsv: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("hsv: N must be a scalar");
   endif
+  n = double (n);
 
   if (n == 1)
     map = [1, 0, 0];
   elseif (n > 1)
     hue = [0:n-1]' / n;
     map = hsv2rgb ([hue, ones(n,1), ones(n,1)]);
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
-
 %!demo
 %! ## Show the 'hsv' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
 %! axis ([1, 64, 0, 1], "ticy", "xy");
 %! colormap (hsv (64));
 
diff --git a/scripts/image/jet.m b/scripts/image/jet.m
--- a/scripts/image/jet.m
+++ b/scripts/image/jet.m
@@ -26,26 +26,22 @@
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "jet");
 ## PKG_DEL: colormap ("unregister", "jet");
 
-function map = jet (n)
+function map = jet (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = rows (colormap);
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("jet: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("jet: N must be a scalar");
   endif
 
   if (n == 1)
     map = [0, 1, 1];
   elseif (n == 2)
     map = [0, 0, 1
            0, 1, 1];
   elseif (n > 2)
@@ -86,15 +82,14 @@ function map = jet (n)
 
     map = [r, g, b];
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
-
 %!demo
 %! ## Show the 'jet' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
 %! axis ([1, 64, 0, 1], "ticy", "xy");
 %! colormap (jet (64));
 
diff --git a/scripts/image/lines.m b/scripts/image/lines.m
--- a/scripts/image/lines.m
+++ b/scripts/image/lines.m
@@ -25,39 +25,34 @@
 ## The argument @var{n} must be a scalar.
 ## If unspecified, the length of the current colormap, or 64, is used.
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## PKG_ADD: colormap ("register", "lines");
 ## PKG_DEL: colormap ("unregister", "lines");
 
-function map = lines (n)
+function map = lines (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = rows (colormap);
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("lines: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("lines: N must be a scalar");
   endif
 
   if (n == 1)
     map = [0, 0, 1];
   elseif (n > 1)
     C = get (gca, "colororder");
     nr = rows (C);
     map = C(rem (0:(n-1), nr) + 1, :);
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
-
 %!demo
 %! ## Show the 'lines' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
 %! axis ([1, 64, 0, 1], "ticy", "xy");
 %! colormap (lines (64));
 
diff --git a/scripts/image/ocean.m b/scripts/image/ocean.m
--- a/scripts/image/ocean.m
+++ b/scripts/image/ocean.m
@@ -28,27 +28,24 @@
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 ## PKG_ADD: colormap ("register", "ocean");
 ## PKG_DEL: colormap ("unregister", "ocean");
 
-function map = ocean (n)
+function map = ocean (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = rows (colormap);
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("ocean: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("ocean: N must be a scalar");
   endif
+  n = double (n);
 
   if (n == 1)
     map = [0, 0, 0];
   elseif (n > 1)
     cutin = fix (n/3);
 
     dr = (n - 1) / cutin;
     r = prepad ([0:dr:(n-1)], n)';
@@ -60,15 +57,14 @@ function map = ocean (n)
 
     map = [r, g, b] / (n - 1);
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
-
 %!demo
 %! ## Show the 'ocean' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
 %! axis ([1, 64, 0, 1], "ticy", "xy");
 %! colormap (ocean (64));
 
diff --git a/scripts/image/pink.m b/scripts/image/pink.m
--- a/scripts/image/pink.m
+++ b/scripts/image/pink.m
@@ -26,26 +26,22 @@
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "pink");
 ## PKG_DEL: colormap ("unregister", "pink");
 
-function map = pink (n)
+function map = pink (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = rows (colormap);
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("pink: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("pink: N must be a scalar");
   endif
 
   if (n == 1)
     map = sqrt ([1/3, 1/3, 1/3]);
   elseif (n == 2)
     map = sqrt ([1/3, 1/3, 1/6
                   1    1    1 ]);
   elseif (n > 2)
@@ -67,15 +63,14 @@ function map = pink (n)
 
     map = sqrt ([r, g, b]);
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
-
 %!demo
 %! ## Show the 'pink' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
 %! axis ([1, 64, 0, 1], "ticy", "xy");
 %! colormap (pink (64));
 
diff --git a/scripts/image/prism.m b/scripts/image/prism.m
--- a/scripts/image/prism.m
+++ b/scripts/image/prism.m
@@ -26,38 +26,33 @@
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "prism");
 ## PKG_DEL: colormap ("unregister", "prism");
 
-function map = prism (n)
+function map = prism (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = rows (colormap);
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("prism: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("prism: N must be a scalar");
   endif
 
   if (n == 1)
     map = [1 0 0];
   elseif (n > 1)
     C = [1, 0, 0; 1, 1/2, 0; 1, 1, 0; 0, 1, 0; 0, 0, 1; 2/3, 0, 1];
     map = C(rem (0:(n-1), 6) + 1, :);
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
-
 %!demo
 %! ## Show the 'prism' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
 %! axis ([1, 64, 0, 1], "ticy", "xy");
 %! colormap (prism (64));
 
diff --git a/scripts/image/rainbow.m b/scripts/image/rainbow.m
--- a/scripts/image/rainbow.m
+++ b/scripts/image/rainbow.m
@@ -29,27 +29,24 @@
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## this colormap is not part of matlab, it is like the prism
 ## colormap map but with a continuous map
 
 ## PKG_ADD: colormap ("register", "rainbow");
 ## PKG_DEL: colormap ("unregister", "rainbow");
 
-function map = rainbow (n)
+function map = rainbow (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = rows (colormap);
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("rainbow: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("rainbow: N must be a scalar");
   endif
+  n = double (n);
 
   if (n == 1)
     map = [1, 0, 0];
   elseif (n > 1)
     x = [0:(n-1)]' / (n - 1);
 
     r = (  (x < 2/5)
          + (x >= 2/5 & x < 3/5) .* (-5 * x + 3)
@@ -64,15 +61,14 @@ function map = rainbow (n)
 
     map = [r, g, b];
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
-
 %!demo
 %! ## Show the 'rainbow' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
 %! axis ([1, 64, 0, 1], "ticy", "xy");
 %! colormap (rainbow (64));
 
diff --git a/scripts/image/spring.m b/scripts/image/spring.m
--- a/scripts/image/spring.m
+++ b/scripts/image/spring.m
@@ -25,40 +25,36 @@
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "spring");
 ## PKG_DEL: colormap ("unregister", "spring");
 
-function map = spring (n)
+function map = spring (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = rows (colormap);
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("spring: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("spring: N must be a scalar");
   endif
+  n = double (n);
 
   if (n == 1)
     map = [1, 0, 1];
   elseif (n > 1)
     r = ones (n, 1);
     g = [0:(n-1)]' / (n - 1);
     b = 1 - g;
     map = [r, g, b];
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
-
 %!demo
 %! ## Show the 'spring' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
 %! axis ([1, 64, 0, 1], "ticy", "xy");
 %! colormap (spring (64));
 
diff --git a/scripts/image/summer.m b/scripts/image/summer.m
--- a/scripts/image/summer.m
+++ b/scripts/image/summer.m
@@ -26,40 +26,36 @@
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 ## Date:  06/03/2000
 
 ## PKG_ADD: colormap ("register", "summer");
 ## PKG_DEL: colormap ("unregister", "summer");
 
-function map = summer (n)
+function map = summer (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = rows (colormap);
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("summer: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("summer: N must be a scalar");
   endif
+  n = double (n);
 
   if (n == 1)
     map = [0, 0.5, 0.4];
   elseif (n > 1)
     r = [0:(n-1)]' / (n - 1);
     g = 0.5 + r / 2;
     b = 0.4 * ones (n, 1);
     map = [r, g, b];
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
-
 %!demo
 %! ## Show the 'summer' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
 %! axis ([1, 64, 0, 1], "ticy", "xy");
 %! colormap (summer (64));
 
diff --git a/scripts/image/white.m b/scripts/image/white.m
--- a/scripts/image/white.m
+++ b/scripts/image/white.m
@@ -25,31 +25,26 @@
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "white");
 ## PKG_DEL: colormap ("unregister", "white");
 
-function map = white (n)
+function map = white (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = rows (colormap);
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("white: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("white: N must be a scalar");
   endif
 
   map = ones (n, 3);
 
 endfunction
 
-
 %!demo
 %! ## Show the 'white' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
 %! axis ([1, 64, 0, 1], "ticy", "xy");
 %! colormap (white (64));
 
diff --git a/scripts/image/winter.m b/scripts/image/winter.m
--- a/scripts/image/winter.m
+++ b/scripts/image/winter.m
@@ -25,40 +25,36 @@
 ## @seealso{colormap}
 ## @end deftypefn
 
 ## Author:  Kai Habel <kai.habel@gmx.de>
 
 ## PKG_ADD: colormap ("register", "winter");
 ## PKG_DEL: colormap ("unregister", "winter");
 
-function map = winter (n)
+function map = winter (n = rows (colormap ()))
 
-  if (nargin == 0)
-    n = rows (colormap);
-  elseif (nargin == 1)
-    if (! isscalar (n))
-      error ("winter: N must be a scalar");
-    endif
-  else
+  if (nargin > 1)
     print_usage ();
+  elseif (! isscalar (n))
+    error ("winter: N must be a scalar");
   endif
+  n = double (n);
 
   if (n == 1)
     map = [0, 0, 1];
   elseif (n > 1)
     r = zeros (n, 1);
     g = [0:(n-1)]' / (n - 1);
     b = 1 - g / 2;
     map = [r, g, b];
   else
     map = zeros (0, 3);
   endif
 
 endfunction
 
-
 %!demo
 %! ## Show the 'winter' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
 %! axis ([1, 64, 0, 1], "ticy", "xy");
 %! colormap (winter (64));
 
diff --git a/test/Makefile.am b/test/Makefile.am
--- a/test/Makefile.am
+++ b/test/Makefile.am
@@ -20,16 +20,17 @@
 
 include $(top_srcdir)/build-aux/common.mk
 
 FCN_FILES = \
   fntests.m \
   args.tst \
   bug-31371.tst \
   bug-38576.tst \
+ colormaps.tst \
   diag-perm.tst \
   error.tst \
   eval-catch.tst \
   for.tst \
   func.tst \
   global.tst \
   if.tst \
   index.tst \
diff --git a/test/colormaps.tst b/test/colormaps.tst
new file mode 100644
--- /dev/null
+++ b/test/colormaps.tst
@@ -0,0 +1,37 @@
+## Copyright (C) 2015 CarnÃ« Draug
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+%!test
+%! all_colormaps = colormap ("list");
+%!
+%! assert (numel (all_colormaps) > 0)
+%!
+%! for i = 1:numel (all_colormaps)
+%!   f = str2func (all_colormaps{i});
+%!
+%!   assert (iscolormap (f (1)))
+%!   assert (iscolormap (f (12)))
+%!   assert (iscolormap (f (200)))
+%!
+%!   ## bug #44070
+%!   assert (class (f (uint8 (12))), "double")
+%!   assert (iscolormap (f (uint8 (12))))
+%!
+%!   assert (f (0), zeros (0, 3))
+%! endfor
+
