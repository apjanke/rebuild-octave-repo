# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365096043 14400
#      Thu Apr 04 13:20:43 2013 -0400
# Node ID 5982d469f79bc21a9e1392751ea2573b58edff66
# Parent  1766d86550064657447fcd34f85c97dd6e4d6337
use signal for setting, appending to, and clearing history widget

* history-dockwidget.h, history-dockwidget.cc
(history_dock_widget::request_history_model_update,
history_dock_widget::reset_model,
history_dock_widget::update_history_callback): Delete.
(history_dock_widget::set_history,
history_dock_widget::append_history,
history_dock_widget::clear_history): New functions.
* main-window.h, main-window.cc (main_window::update_history): Delete.
(main_window::construct): Delete connection from
_octave_qt_event_listener::update_history_signal to
main_window::update_history.
Connect _octave_qt_link::set_history_signal to
_history_dock_widget::set_history.
Connect _octave_qt_link::append_history_signal to
_history_dock_widget::append_history.
Connect _octave_qt_link::clear_history_signal to
_history_dock_widget::clear_history.
(main_window::clear_history_callback): Call Fhistory instead of
command_history::clear and _history_dock_widget->reset_model.
* octave-main-thread.cc (octave_main_thread::run): Don't call
octave_link::update_history.
* octave-qt-event-listener.h, octave-qt-event-listener.cc
(octave_qt_event_listener::update_history): Delete.
(octave_qt_event_listener::update_history_signal): Delete.
* octave-qt-link.h, octave-qt-link.cc
(octave_qt_link::do_update_history): Delete.
(octave_qt_link::do_set_history,octave_qt_link::do_append_history,
octave_qt_link::do_clear_history): New functions.
(octave_qt_link::do_post_input_event): Don't call do_update_history.
(set_history_signal, append_history_signal, clear_history_signal):
New signals.
* octave-event-listener.h (octave_event_listener::update_history):
Delete.
* input.cc (octave_base_reader::octave_gets): Call command_history::add.
* oct-hist.cc (do_history): New option, -c.  Call octave_link history
functions as needed.
(initialize_history): Call octave_link::set_history.
(octave_history_write_timestamp): Call octave_link::append_history.
(Fedit_history): Document -c.
* octave-link.h (octave_link::update_history,
octave_link::do_update_history): Delete.
(octave_link::set_history, octave_link::append_history,
octave_link::clear_history, octave_link::do_set_history,
octave_link::do_append_history, octave_link::do_clear_history,
octave_link::do_pre_input_event, octave_link::do_post_input_event):
New functions.

diff --git a/libgui/src/history-dockwidget.cc b/libgui/src/history-dockwidget.cc
--- a/libgui/src/history-dockwidget.cc
+++ b/libgui/src/history-dockwidget.cc
@@ -115,45 +115,29 @@ void history_dock_widget::handle_context
 
 void
 history_dock_widget::handle_double_click (QModelIndex modelIndex)
 {
   emit command_double_clicked (modelIndex.data().toString()+"\n");
 }
 
 void
-history_dock_widget::request_history_model_update ()
+history_dock_widget::set_history (const QStringList& hist)
 {
-  octave_link::post_event (this, &history_dock_widget::update_history_callback);
+  _history_model->setStringList (hist);
+  _history_list_view->scrollToBottom ();
 }
 
 void
-history_dock_widget::reset_model ()
+history_dock_widget::append_history (const QString& hist_entry)
+{
+  QStringList lst = _history_model->stringList ();
+  lst.append (hist_entry);
+  _history_model->setStringList (lst);
+  _history_list_view->scrollToBottom ();
+}
+
+void
+history_dock_widget::clear_history (void)
 {
   _history_model->setStringList (QStringList ());
 }
 
-void
-history_dock_widget::update_history_callback (void)
-{
-  // Determine the client's (our) history length and the one of the server.
-  int clientHistoryLength = _history_model->rowCount ();
-  int serverHistoryLength = command_history::length ();
-
-  // If were behind the server, iterate through all new entries and add
-  // them to our history.
-  if (clientHistoryLength < serverHistoryLength)
-    {
-      int elts_to_add = serverHistoryLength - clientHistoryLength;
-
-      _history_model->insertRows (clientHistoryLength, elts_to_add);
-
-      for (int i = clientHistoryLength; i < serverHistoryLength; i++)
-        {
-          std::string entry = command_history::get_entry (i);
-
-          _history_model->setData (_history_model->index (i),
-                      QString::fromUtf8 (entry.data (), entry.size ()));
-        }
-
-      _history_list_view->scrollToBottom ();
-    }
-}
diff --git a/libgui/src/history-dockwidget.h b/libgui/src/history-dockwidget.h
--- a/libgui/src/history-dockwidget.h
+++ b/libgui/src/history-dockwidget.h
@@ -30,21 +30,20 @@ along with Octave; see the file COPYING.
 #include "octave-dock-widget.h"
 
 class history_dock_widget : public octave_dock_widget
 {
   Q_OBJECT
   public:
   history_dock_widget (QWidget *parent = 0);
 
-  void update_history_callback (void);
-
 public slots:
-  void request_history_model_update ();
-  void reset_model ();
+  void set_history (const QStringList& hist);
+  void append_history (const QString& hist_entry);
+  void clear_history (void);
 
 signals:
   void information (const QString& message);
 
   /** Emitted, whenever the user double-clicked a command in the history. */
   void command_double_clicked (const QString& command);
 
 private slots:
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -151,17 +151,17 @@ main_window::handle_load_workspace_reque
 
 void
 main_window::handle_clear_workspace_request ()
 {
   octave_link::post_event (this, &main_window::clear_workspace_callback);
 }
 
 void
-main_window::handle_clear_history_request()
+main_window::handle_clear_history_request (void)
 {
   octave_link::post_event (this, &main_window::clear_history_callback);
 }
 
 void
 main_window::handle_command_double_clicked (const QString&)
 {
   focus_command_window ();
@@ -284,22 +284,16 @@ main_window::current_working_directory_h
 
 void
 main_window::update_workspace (void)
 {
   _workspace_view->model_changed ();
 }
 
 void
-main_window::update_history (void)
-{
-  _history_dock_widget->update_history_callback ();
-}
-
-void
 main_window::change_current_working_directory ()
 {
   QString directory =
     QFileDialog::getExistingDirectory(this, tr ("Set working direcotry"));
 
   if (!directory.isEmpty ())
     {
       std::string dir = directory.toUtf8 ().data ();
@@ -1140,35 +1134,42 @@ main_window::construct ()
            SLOT (current_working_directory_has_changed (QString)));
 
   connect (_octave_qt_event_listener,
            SIGNAL (update_workspace_signal ()),
            this,
            SLOT (update_workspace ()));
 
   connect (_octave_qt_event_listener,
-           SIGNAL (update_history_signal ()),
-           this,
-           SLOT (update_history ()));
-
-  connect (_octave_qt_event_listener,
            SIGNAL (entered_debug_mode_signal ()),
            this,
            SLOT(handle_entered_debug_mode ()));
 
   connect (_octave_qt_event_listener,
            SIGNAL (quit_debug_mode_signal ()),
            this,
            SLOT (handle_quit_debug_mode ()));
 
   // FIXME -- is it possible to eliminate the event_listenter?
 
   _octave_qt_link = new octave_qt_link ();
 
   connect (_octave_qt_link,
+           SIGNAL (set_history_signal (const QStringList&)),
+           _history_dock_widget, SLOT (set_history (const QStringList&)));
+
+  connect (_octave_qt_link,
+           SIGNAL (append_history_signal (const QString&)),
+           _history_dock_widget, SLOT (append_history (const QString&)));
+
+  connect (_octave_qt_link,
+           SIGNAL (clear_history_signal (void)),
+           _history_dock_widget, SLOT (clear_history (void)));
+
+  connect (_octave_qt_link,
            SIGNAL (update_dbstop_marker_signal (bool, const QString&, int)),
            _file_editor,
            SLOT (handle_update_dbstop_marker_request (bool, const QString&, int)));
 
   connect (_octave_qt_link,
            SIGNAL (edit_file_signal (const QString&)),
            _file_editor,
            SLOT (handle_edit_file_request (const QString&)));
@@ -1204,19 +1205,17 @@ void
 main_window::clear_workspace_callback (void)
 {
   Fclear ();
 }
 
 void
 main_window::clear_history_callback (void)
 {
-  command_history::clear ();
-
-  _history_dock_widget->reset_model ();
+  Fhistory (ovl ("-c"));
 }
 
 void
 main_window::change_directory_callback (const std::string& directory)
 {
   Fcd (ovl (directory));
 }
 
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -66,33 +66,32 @@ class main_window : public QMainWindow
 signals:
   void settings_changed (const QSettings *);
 
 public slots:
   void report_status_message (const QString& statusMessage);
   void handle_save_workspace_request ();
   void handle_load_workspace_request ();
   void handle_clear_workspace_request ();
-  void handle_clear_history_request ();
+  void handle_clear_history_request (void);
   void handle_command_double_clicked (const QString& command);
   void new_file ();
   void open_file ();
   void open_file (const QString& file_name);
   void open_online_documentation_page ();
   void open_bug_tracker_page ();
   void open_octave_forge_page ();
   void open_agora_page ();
   void process_settings_dialog_request ();
   void show_about_octave ();
   void notice_settings (const QSettings *settings);
   void prepare_for_quit ();
   void reset_windows ();
   void current_working_directory_has_changed (const QString& directory);
   void update_workspace (void);
-  void update_history (void);
   void change_current_working_directory ();
   void set_current_working_directory (const QString& directory);
   void current_working_directory_up ();
   void current_working_directory_entered ();
 
   void focus_command_window ();
   void focus_command_history ();
   void focus_current_directory ();
diff --git a/libgui/src/octave-main-thread.cc b/libgui/src/octave-main-thread.cc
--- a/libgui/src/octave-main-thread.cc
+++ b/libgui/src/octave-main-thread.cc
@@ -45,13 +45,10 @@ octave_main_thread::run ()
   // Matlab uses "C" locale for LC_NUMERIC class regardless of local setting
   setlocale (LC_NUMERIC, "C");
 
   emit ready ();
 
   octave_initialize_interpreter (octave_cmdline_argc, octave_cmdline_argv,
                                  octave_embedded);
 
-  // Prime the history list.
-  octave_link::update_history ();
-
   octave_execute_interpreter ();
 }
diff --git a/libgui/src/octave-qt-event-listener.cc b/libgui/src/octave-qt-event-listener.cc
--- a/libgui/src/octave-qt-event-listener.cc
+++ b/libgui/src/octave-qt-event-listener.cc
@@ -43,22 +43,16 @@ octave_qt_event_listener::current_direct
 
 void
 octave_qt_event_listener::update_workspace (void)
 {
   emit update_workspace_signal ();
 }
 
 void
-octave_qt_event_listener::update_history (void)
-{
-  emit update_history_signal ();
-}
-
-void
 octave_qt_event_listener::about_to_exit ()
 {
   qApp->quit ();
 }
 
 void
 octave_qt_event_listener::entered_debug_mode ()
 { emit entered_debug_mode_signal (); }
diff --git a/libgui/src/octave-qt-event-listener.h b/libgui/src/octave-qt-event-listener.h
--- a/libgui/src/octave-qt-event-listener.h
+++ b/libgui/src/octave-qt-event-listener.h
@@ -31,23 +31,21 @@ class octave_qt_event_listener
   : public QObject, public octave_event_listener
 {
   Q_OBJECT
   public:
   octave_qt_event_listener (QObject *parent = 0);
 
   void current_directory_has_changed (const std::string& directory);
   void update_workspace (void);
-  void update_history (void);
   void about_to_exit ();
 
   void entered_debug_mode ();
   void quit_debug_mode ();
 
 signals:
   void current_directory_has_changed_signal (const QString& directory);
   void update_workspace_signal (void);
-  void update_history_signal (void);
   void entered_debug_mode_signal ();
   void quit_debug_mode_signal ();
 };
 
 #endif // OCTAVEQTEVENTLISTENER_H
diff --git a/libgui/src/octave-qt-link.cc b/libgui/src/octave-qt-link.cc
--- a/libgui/src/octave-qt-link.cc
+++ b/libgui/src/octave-qt-link.cc
@@ -21,16 +21,20 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <QStringList>
+
+#include "str-vec.h"
+
 #include "octave-qt-link.h"
 
 octave_qt_link::octave_qt_link (void)
   : octave_link (), main_thread (new octave_main_thread)
 {
   // Start the first one.
   main_thread->start ();
 }
@@ -42,36 +46,47 @@ octave_qt_link::do_update_workspace (voi
     {
       event_listener->update_workspace ();
 
       do_process_events ();
     }
 }
 
 void
-octave_qt_link::do_update_history (void)
+octave_qt_link::do_set_history (const string_vector& hist)
 {
-  if (event_listener)
-    {
-      event_listener->update_history ();
+  QStringList qt_hist;
+
+  for (octave_idx_type i = 0; i < hist.length (); i++)
+    qt_hist.append (QString::fromStdString (hist[i]));
+
+  emit set_history_signal (qt_hist);
+}
 
-      do_process_events ();
-    }
+void
+octave_qt_link::do_append_history (const std::string& hist_entry)
+{
+  emit append_history_signal (QString::fromStdString (hist_entry));
+}
+
+void
+octave_qt_link::do_clear_history (void)
+{
+  emit clear_history_signal ();
 }
 
 void
 octave_qt_link::do_pre_input_event (void)
 {
   do_update_workspace ();
 }
 
 void
 octave_qt_link::do_post_input_event (void)
 {
-  do_update_history ();
 }
 
 void
 octave_qt_link::do_enter_debugger_event (const std::string& file, int line)
 {
   do_insert_debugger_pointer (file, line);
 }
 
diff --git a/libgui/src/octave-qt-link.h b/libgui/src/octave-qt-link.h
--- a/libgui/src/octave-qt-link.h
+++ b/libgui/src/octave-qt-link.h
@@ -48,17 +48,19 @@ class octave_qt_link : public QObject, p
 public:
 
   octave_qt_link (void);
 
   ~octave_qt_link (void) { }
 
   void do_update_workspace (void);
 
-  void do_update_history (void);
+  void do_set_history (const string_vector& hist);
+  void do_append_history (const std::string& hist_entry);
+  void do_clear_history (void);
 
   void do_pre_input_event (void);
   void do_post_input_event (void);
 
   void do_enter_debugger_event (const std::string& file, int line);
   void do_exit_debugger_event (const std::string& file, int line);
 
   void do_update_breakpoint (bool insert, const std::string& file, int line);
@@ -77,16 +79,20 @@ private:
 
   void do_delete_debugger_pointer (const std::string& file, int line);
 
   // Thread running octave_main.
   octave_main_thread *main_thread;
 
 signals:
 
+  void set_history_signal (const QStringList& hist);
+  void append_history_signal (const QString& hist_entry);
+  void clear_history_signal (void);
+
   void update_dbstop_marker_signal (bool insert, const QString& file, int line);
 
   void edit_file_signal (const QString& file);
 
   void insert_debugger_pointer_signal (const QString&, int);
 
   void delete_debugger_pointer_signal (const QString&, int);
 };
diff --git a/libinterp/interp-core/octave-event-listener.h b/libinterp/interp-core/octave-event-listener.h
--- a/libinterp/interp-core/octave-event-listener.h
+++ b/libinterp/interp-core/octave-event-listener.h
@@ -32,18 +32,15 @@ class octave_event_listener
     virtual ~octave_event_listener () { }
 
     virtual void
     current_directory_has_changed (const std::string& directory) = 0;
 
     virtual void
     update_workspace (void) = 0;
 
-    virtual void
-    update_history (void) = 0;
-
     virtual void about_to_exit () = 0;
 
     virtual void entered_debug_mode () = 0;
     virtual void quit_debug_mode () = 0;
 };
 
 #endif // OCTAVEEVENTLISTENER_H
diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -247,17 +247,22 @@ octave_base_reader::octave_gets (bool& e
     {
       retval = last_debugging_command;
       history_skip_auto_repeated_debugging_command = true;
     }
 
   if (retval != "\n")
     {
       if (! history_skip_auto_repeated_debugging_command)
-        command_history::add (retval);
+        {
+          command_history::add (retval);
+
+          if (! command_history::ignoring_entries ())
+            octave_link::append_history (retval);
+        }
 
       octave_diary << retval;
 
       if (retval[retval.length () - 1] != '\n')
         octave_diary << "\n";
 
       do_input_echo (retval);
     }
diff --git a/libinterp/interpfcn/oct-hist.cc b/libinterp/interpfcn/oct-hist.cc
--- a/libinterp/interpfcn/oct-hist.cc
+++ b/libinterp/interpfcn/oct-hist.cc
@@ -43,16 +43,17 @@ Software Foundation, Inc.
 #include <fstream>
 
 #include <sys/types.h>
 #include <unistd.h>
 
 #include "cmd-hist.h"
 #include "file-ops.h"
 #include "lo-mappers.h"
+#include "octave-link.h"
 #include "oct-env.h"
 #include "oct-time.h"
 #include "str-vec.h"
 
 #include <defaults.h>
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
@@ -181,28 +182,39 @@ do_history (const octave_value_list& arg
             // Append 'new' lines to file.
             command_history::append ();
 
           else if (option == "-w")
             // Write entire history.
             command_history::write ();
 
           else if (option == "-r")
-            // Read entire file.
-            command_history::read ();
+            {
+              // Read entire file.
+              command_history::read ();
+              octave_link::set_history (command_history::list ());
+            }
 
           else if (option == "-n")
-            // Read 'new' history from file.
-            command_history::read_range ();
+            {
+              // Read 'new' history from file.
+              command_history::read_range ();
+              octave_link::set_history (command_history::list ());
+            }
 
           else
             panic_impossible ();
 
           return hlist;
         }
+      else if (option == "-c")
+        {
+          command_history::clear ();
+          octave_link::clear_history ();
+        }
       else if (option == "-q")
         numbered_output = false;
       else if (option == "--")
         {
           i++;
           break;
         }
       else
@@ -349,17 +361,20 @@ edit_history_add_hist (const std::string
       std::string tmp = line;
 
       int len = tmp.length ();
 
       if (len > 0 && tmp[len-1] == '\n')
         tmp.resize (len - 1);
 
       if (! tmp.empty ())
-        command_history::add (tmp);
+        {
+          command_history::add (tmp);
+          octave_link::append_history (tmp);
+        }
     }
 }
 
 static bool
 get_int_arg (const octave_value& arg, int& val)
 {
   bool ok = true;
 
@@ -596,27 +611,32 @@ do_run_history (const octave_value_list&
 
 void
 initialize_history (bool read_history_file)
 {
   command_history::initialize (read_history_file,
                                default_history_file (),
                                default_history_size (),
                                octave_env::getenv ("OCTAVE_HISTCONTROL"));
+
+  octave_link::set_history (command_history::list ());
 }
 
 void
 octave_history_write_timestamp (void)
 {
   octave_localtime now;
 
   std::string timestamp = now.strftime (Vhistory_timestamp_format_string);
 
   if (! timestamp.empty ())
-    command_history::add (timestamp);
+    {
+      command_history::add (timestamp); 
+      octave_link::append_history (timestamp);
+   }
 }
 
 DEFUN (edit_history, args, ,
   "-*- texinfo -*-\n\
 @deftypefn  {Command} {} edit_history\n\
 @deftypefnx {Command} {} edit_history @var{cmd_number}\n\
 @deftypefnx {Command} {} edit_history @var{first} @var{last}\n\
 Edit the history list using the editor named by the variable\n\
@@ -666,16 +686,19 @@ DEFUN (history, args, nargout,
 If invoked with no arguments, @code{history} displays a list of commands\n\
 that you have executed.  Valid options are:\n\
 \n\
 @table @code\n\
 @item   @var{n}\n\
 @itemx -@var{n}\n\
 Display only the most recent @var{n} lines of history.\n\
 \n\
+@item -c\n\
+Clear the history list.\n\
+\n\
 @item -q\n\
 Don't number the displayed lines of history.  This is useful for cutting\n\
 and pasting commands using the X Window System.\n\
 \n\
 @item -r @var{file}\n\
 Read the file @var{file}, appending its contents to the current\n\
 history list.  If the name is omitted, use the default history file\n\
 (normally @file{~/.octave_hist}).\n\
diff --git a/libinterp/interpfcn/octave-link.h b/libinterp/interpfcn/octave-link.h
--- a/libinterp/interpfcn/octave-link.h
+++ b/libinterp/interpfcn/octave-link.h
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 #define octave_link_h 1
 
 #include <string>
 
 #include "event-queue.h"
 #include "octave-event-listener.h"
 
 class octave_mutex;
+class string_vector;
 
 // \class OctaveLink
 // \brief Provides threadsafe access to octave.
 // \author Jacob Dawid
 //
 // This class is a wrapper around octave and provides thread safety by
 // buffering access operations to octave and executing them in the
 // readline event hook, which lives in the octave thread.
@@ -114,20 +115,32 @@ public:
   }
 
   static void update_workspace (void)
   {
     if (instance_ok ())
       instance->do_update_workspace ();
   }
 
-  static void update_history (void)
+  static void set_history (const string_vector& hist)
   {
     if (instance_ok ())
-      instance->do_update_history ();
+      instance->do_set_history (hist);
+  }
+
+  static void append_history (const std::string& hist_entry)
+  {
+    if (instance_ok ())
+      instance->do_append_history (hist_entry);
+  }
+
+  static void clear_history (void)
+  {
+    if (instance_ok ())
+      instance->do_clear_history ();
   }
 
   static void pre_input_event (void)
   {
     if (instance_ok ())
       instance->do_pre_input_event ();
   }
 
@@ -220,17 +233,19 @@ protected:
 
   void do_entered_readline_hook (void) { }
   void do_finished_readline_hook (void) { }
 
   std::string do_last_working_directory (void);
 
   virtual void do_update_workspace (void) = 0;
 
-  virtual void do_update_history (void) = 0;
+  virtual void do_set_history (const string_vector& hist) = 0;
+  virtual void do_append_history (const std::string& hist_entry) = 0;
+  virtual void do_clear_history (void) = 0;
 
   virtual void do_pre_input_event (void) = 0;
   virtual void do_post_input_event (void) = 0;
 
   virtual void do_enter_debugger_event (const std::string& file, int line) = 0;
   virtual void do_exit_debugger_event (const std::string& file, int line) = 0;
 
   virtual void do_update_breakpoint (bool insert,
