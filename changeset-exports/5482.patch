# HG changeset patch
# User jwe
# Date 1128446251 0
#      Tue Oct 04 17:17:31 2005 +0000
# Node ID 6bbfc37975d2d28aafa292d547251c7cbf681142
# Parent  65e02518f4f5880e2597bb635d7d2c091bfde328
[project @ 2005-10-04 17:17:21 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2005-10-04  Rafael Laboissiere  <rafael@debian.org>
+
+	* binoinv.m, chi2pdf.m, frnd.m, poissinv.m, tinv.m, trnd.m,
+	weibrnd.m: Removed calls and references to deprecated _pdf and
+	_inv functions.
+	* chi2pdf.m: Fixed typos in the documentation.
+
 2005-09-28  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/single.m: New function.
 
 	* statistics/base/unidrnd.m: New function.
 
 2005-09-27  John W. Eaton  <jwe@octave.org>
 
diff --git a/scripts/statistics/distributions/binoinv.m b/scripts/statistics/distributions/binoinv.m
--- a/scripts/statistics/distributions/binoinv.m
+++ b/scripts/statistics/distributions/binoinv.m
@@ -58,17 +58,17 @@ function inv = binoinv (x, n, p)
 	if (any (m))
           inv(k(m)) = inv(k(m)) + 1;
           cdf(m) = cdf(m) + binopdf (inv(k(m)), n, p);
 	else
           break;
 	endif
       endwhile
     else 
-      cdf = binomial_pdf (0, n(k), p(k));
+      cdf = binopdf (0, n(k), p(k));
       while (any (inv(k) < n(k)))
 	m = find (cdf < x(k));
 	if (any (m))
           inv(k(m)) = inv(k(m)) + 1;
           cdf(m) = cdf(m) + binopdf (inv(k(m)), n(k(m)), p(k(m)));
 	else
           break;
 	endif
diff --git a/scripts/statistics/distributions/chi2pdf.m b/scripts/statistics/distributions/chi2pdf.m
--- a/scripts/statistics/distributions/chi2pdf.m
+++ b/scripts/statistics/distributions/chi2pdf.m
@@ -15,31 +15,31 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} chisquare_pdf (@var{x}, @var{n})
 ## For each element of @var{x}, compute the probability density function
-## (PDF) at @var{x} of the chisquare distribution with @var{k} degrees
+## (PDF) at @var{x} of the chisquare distribution with @var{n} degrees
 ## of freedom.
 ## @end deftypefn
 
 ## Author: TT <Teresa.Twaroch@ci.tuwien.ac.at>
-## Description: PDF of the chi-sqaure distribution
+## Description: PDF of the chi-square distribution
 
-function pdf = chisquare_pdf (x, n)
+function pdf = chi2pdf (x, n)
 
   if (nargin != 2)
-    usage ("chisquare_pdf (x, n)");
+    usage ("chi2pdf (x, n)");
   endif
 
   if (!isscalar (n))
     [retval, x, n] = common_size (x, n);
     if (retval > 0)
-      error ("chisquare_pdf: x and n must be of common size or scalar");
+      error ("chi2pdf: x and n must be of common size or scalar");
     endif
   endif
 
-  pdf = gamma_pdf (x, n / 2, 1 / 2);
+  pdf = gampdf (x, n / 2, 1 / 2);
 
 endfunction
diff --git a/scripts/statistics/distributions/frnd.m b/scripts/statistics/distributions/frnd.m
--- a/scripts/statistics/distributions/frnd.m
+++ b/scripts/statistics/distributions/frnd.m
@@ -75,17 +75,17 @@ function rnd = frnd (m, n, r, c)
     sz = size(a);
   else
     usage ("frnd (m, n, r, c)");
   endif
 
 
   if (isscalar (m) && isscalar (n))
     if ((m > 0) && (m < Inf) && (n > 0) && (n < Inf))
-      rnd =  f_inv (rand (sz), m, n);
+      rnd =  finv (rand (sz), m, n);
     else
       rnd = NaN * ones (sz);
     endif
   else
     rnd = zeros (sz);
 
     k = find (!(m > 0) | !(m < Inf) |
               !(n > 0) | !(n < Inf));
diff --git a/scripts/statistics/distributions/poissinv.m b/scripts/statistics/distributions/poissinv.m
--- a/scripts/statistics/distributions/poissinv.m
+++ b/scripts/statistics/distributions/poissinv.m
@@ -59,19 +59,19 @@ function inv = poissinv (x, l)
     else
       cdf = exp (-l(k));
     endif
     while (1)
       m = find (cdf < x(k));
       if (any (m))
         inv(k(m)) = inv(k(m)) + 1;
 	if (isscalar (l))
-          cdf(m) = cdf(m) + poisson_pdf (inv(k(m)), l);
+          cdf(m) = cdf(m) + poisspdf (inv(k(m)), l);
 	else
-          cdf(m) = cdf(m) + poisson_pdf (inv(k(m)), l(k(m)));
+          cdf(m) = cdf(m) + poisspdf (inv(k(m)), l(k(m)));
 	endif
       else
         break;
       endif
     endwhile
   endif
 
 endfunction
diff --git a/scripts/statistics/distributions/tinv.m b/scripts/statistics/distributions/tinv.m
--- a/scripts/statistics/distributions/tinv.m
+++ b/scripts/statistics/distributions/tinv.m
@@ -60,21 +60,21 @@ function inv = tinv (x, n)
   if (any (k))
     inv(k) = Inf;
   endif
 
   k = find ((x > 0) & (x < 1) & (n > 0) & (n < 10000));
   if (any (k))
     if (isscalar (n))
       inv(k) = (sign (x(k) - 1/2)
-		.* sqrt (n .* (1 ./ beta_inv (2*min (x(k), 1 - x(k)),
+		.* sqrt (n .* (1 ./ betainv (2*min (x(k), 1 - x(k)),
 						 n/2, 1/2) - 1)));
     else
       inv(k) = (sign (x(k) - 1/2)
-		.* sqrt (n(k) .* (1 ./ beta_inv (2*min (x(k), 1 - x(k)),
+		.* sqrt (n(k) .* (1 ./ betainv (2*min (x(k), 1 - x(k)),
 						 n(k)/2, 1/2) - 1)));
     endif
   endif
 
   ## For large n, use the quantiles of the standard normal
   k = find ((x > 0) & (x < 1) & (n >= 10000));
   if (any (k))
     inv(k) = stdnormal_inv (x(k));
diff --git a/scripts/statistics/distributions/trnd.m b/scripts/statistics/distributions/trnd.m
--- a/scripts/statistics/distributions/trnd.m
+++ b/scripts/statistics/distributions/trnd.m
@@ -65,27 +65,27 @@ function rnd = trnd (n, r, c)
   else
     usage ("trnd (n, r, c)");
   endif
 
   if (isscalar (n))
     if (!(n > 0) || !(n < Inf))
       rnd = NaN * ones (sz);
     elseif ((n > 0) && (n < Inf))
-      rnd = t_inv (rand (sz), n);
+      rnd = tinv (rand (sz), n);
     else
       rnd = zeros (size (n));
     endif
   else
     rnd = zeros (size (n));
 
     k = find (!(n > 0) | !(n < Inf));
     if (any (k))
       rnd(k) = NaN;
     endif
 
     k = find ((n > 0) & (n < Inf));
     if (any (k))
-      rnd(k) = t_inv (rand (size (k)), n(k));
+      rnd(k) = tinv (rand (size (k)), n(k));
     endif
   endif
 
 endfunction
diff --git a/scripts/statistics/distributions/weibrnd.m b/scripts/statistics/distributions/weibrnd.m
--- a/scripts/statistics/distributions/weibrnd.m
+++ b/scripts/statistics/distributions/weibrnd.m
@@ -50,17 +50,17 @@ function rnd = weibrnd (shape, scale, r,
     if (! (isscalar (c) && (c > 0) && (c == round (c))))
       error ("weibrnd: c must be a positive integer");
     endif
     sz = [r, c];
 
     if (any (size (scale) != 1) && 
 	((length (size (scale)) != length (sz)) ||
 	 any (size (scale) != sz)))
-      error ("weilbull_rnd: shape and scale must be scalar or of size [r, c]");
+      error ("weibrnd: shape and scale must be scalar or of size [r, c]");
     endif
   elseif (nargin == 3)
     if (isscalar (r) && (r > 0))
       sz = [r, r];
     elseif (isvector(r) && all (r > 0))
       sz = r(:)';
     else
       error ("weibrnd: r must be a postive integer or vector");
