# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1337854133 -7200
#      Thu May 24 12:08:53 2012 +0200
# Branch gui
# Node ID 628eeaf879f761b128eadda3c4c3a02aff293a71
# Parent  9fa8955ea79d444a0739224bf2870852171ac9ed
Copy/Paste buttons get greyed out in the editor correctly again. Removed margin in editor tabs and status bar.

* FileEditor: Removed status bar and added slot to handle changes in tabs.
* FileEditorTab: Removed margen and added signal when copying is possible.

diff --git a/gui/src/editor/FileEditor.cpp b/gui/src/editor/FileEditor.cpp
--- a/gui/src/editor/FileEditor.cpp
+++ b/gui/src/editor/FileEditor.cpp
@@ -227,24 +227,42 @@ FileEditor::handleTabCloseRequest (int i
     if (fileEditorTab->close ())
       {
         m_tabWidget->removeTab (index);
         delete fileEditorTab;
       }
 }
 
 void
+FileEditor::activeTabChanged (int index)
+{
+  Q_UNUSED (index);
+  handleEditorStateChanged ();
+}
+
+void
+FileEditor::handleEditorStateChanged ()
+{
+  FileEditorTab *fileEditorTab = activeEditorTab ();
+  if (fileEditorTab)
+    {
+      bool copyAvailable = fileEditorTab->copyAvailable ();
+      m_copyAction->setEnabled (copyAvailable);
+      m_cutAction->setEnabled (copyAvailable);
+    }
+}
+
+void
 FileEditor::construct ()
 {
   QSettings *settings = ResourceManager::instance ()->settings ();
   QStyle *style = QApplication::style ();
 
   m_menuBar = new QMenuBar (this);
   m_toolBar = new QToolBar (this);
-  m_statusBar = new QStatusBar (this);
   m_tabWidget = new QTabWidget (this);
   m_tabWidget->setTabsClosable (true);
   //m_longTitle = settings->value ("editor/longWindowTitle",true).toBool ();
 
   // Theme icons with QStyle icons as fallback
   QAction *newAction = new QAction (
         QIcon::fromTheme("document-new",style->standardIcon (QStyle::SP_FileIcon)),
         tr("&New File"), m_toolBar);
@@ -348,17 +366,16 @@ FileEditor::construct ()
   QMenu *runMenu = new QMenu (tr ("&Run"), m_menuBar);
   runMenu->addAction (runAction);
   m_menuBar->addMenu (runMenu);
 
   QVBoxLayout *layout = new QVBoxLayout ();
   layout->addWidget (m_menuBar);
   layout->addWidget (m_toolBar);
   layout->addWidget (m_tabWidget);
-  layout->addWidget (m_statusBar);
   layout->setMargin (0);
   setLayout (layout);
 
   connect (newAction,               SIGNAL (triggered ()), this, SLOT (requestNewFile ()));
   connect (openAction,              SIGNAL (triggered ()), this, SLOT (requestOpenFile ()));
   connect (undoAction,              SIGNAL (triggered ()), this, SLOT (requestUndo ()));
   connect (redoAction,              SIGNAL (triggered ()), this, SLOT (requestRedo ()));
   connect (m_copyAction,            SIGNAL (triggered ()), this, SLOT (requestCopy ()));
@@ -369,16 +386,17 @@ FileEditor::construct ()
   connect (runAction,               SIGNAL (triggered ()), this, SLOT (requestRunFile ()));
   connect (toggleBookmarkAction,    SIGNAL (triggered ()), this, SLOT (requestToggleBookmark ()));
   connect (nextBookmarkAction,      SIGNAL (triggered ()), this, SLOT (requestNextBookmark ()));
   connect (prevBookmarkAction,      SIGNAL (triggered ()), this, SLOT (requestPreviousBookmark ()));
   connect (removeBookmarkAction,    SIGNAL (triggered ()), this, SLOT (requestRemoveBookmark ()));
   connect (commentSelectedAction,   SIGNAL (triggered ()), this, SLOT (requestCommentSelectedText ()));
   connect (uncommentSelectedAction, SIGNAL (triggered ()), this, SLOT (requestUncommentSelectedText ()));
   connect (m_tabWidget, SIGNAL (tabCloseRequested (int)), this, SLOT (handleTabCloseRequest (int)));
+  connect (m_tabWidget, SIGNAL (currentChanged(int)), this, SLOT (activeTabChanged (int)));
 
   // this has to be done only once, not for each editor
   m_lexer = new LexerOctaveGui ();
 
   // Editor font (default or from settings)
   m_lexer->setDefaultFont (QFont (
                              settings->value ("editor/fontName","Courier").toString (),
                              settings->value ("editor/fontSize",10).toInt ()));
@@ -409,19 +427,20 @@ FileEditor::construct ()
   setWindowIcon (QIcon::fromTheme ("accessories-text-editor", style->standardIcon (QStyle::SP_FileIcon)));
   setWindowTitle ("Octave Editor");
 }
 
 void
 FileEditor::addFileEditorTab (FileEditorTab *fileEditorTab)
 {
   m_tabWidget->addTab (fileEditorTab, "");
-  connect (fileEditorTab, SIGNAL(fileNameChanged(QString)),
+  connect (fileEditorTab, SIGNAL (fileNameChanged(QString)),
            this, SLOT(handleFileNameChanged(QString)));
-
+  connect (fileEditorTab, SIGNAL (editorStateChanged ()),
+           this, SLOT (handleEditorStateChanged ()));
   m_tabWidget->setCurrentWidget (fileEditorTab);
 }
 
 FileEditorTab *
 FileEditor::activeEditorTab ()
 {
   return dynamic_cast<FileEditorTab*> (m_tabWidget->currentWidget ());
 }
diff --git a/gui/src/editor/FileEditor.h b/gui/src/editor/FileEditor.h
--- a/gui/src/editor/FileEditor.h
+++ b/gui/src/editor/FileEditor.h
@@ -70,25 +70,26 @@ public slots:
   void requestNextBookmark ();
   void requestPreviousBookmark ();
   void requestRemoveBookmark ();
   void requestCommentSelectedText ();
   void requestUncommentSelectedText ();
 
   void handleFileNameChanged (QString fileName);
   void handleTabCloseRequest (int index);
+  void activeTabChanged (int index);
+  void handleEditorStateChanged ();
 
 private:
   void construct ();
   void addFileEditorTab(FileEditorTab *fileEditorTab);
   FileEditorTab *activeEditorTab();
 
   QMenuBar *m_menuBar;
   QToolBar *m_toolBar;
-  QStatusBar *m_statusBar;
   QAction* m_copyAction;
   QAction* m_cutAction;
   QTabWidget *m_tabWidget;
   int m_markerBookmark;
 
   LexerOctaveGui *m_lexer;
   QsciAPIs *m_lexerAPI;
 };
diff --git a/gui/src/editor/FileEditorTab.cpp b/gui/src/editor/FileEditorTab.cpp
--- a/gui/src/editor/FileEditorTab.cpp
+++ b/gui/src/editor/FileEditorTab.cpp
@@ -69,30 +69,37 @@ FileEditorTab::FileEditorTab(FileEditor 
       m_editArea->autoCompleteFromAll ();
       m_editArea->setAutoCompletionSource(QsciScintilla::AcsAll);
       m_editArea->setAutoCompletionThreshold (1);
     }
   m_editArea->setUtf8 (true);
 
   QVBoxLayout *layout = new QVBoxLayout ();
   layout->addWidget (m_editArea);
+  layout->setMargin (0);
   setLayout (layout);
 
   // connect modified signal
   connect (m_editArea, SIGNAL (modificationChanged (bool)),
            this, SLOT (newTitle (bool)));
   connect (m_editArea, SIGNAL (copyAvailable (bool)),
            this, SLOT (handleCopyAvailable (bool)));
 
   m_fileName = "";
   newTitle (false);
 }
 
+bool
+FileEditorTab::copyAvailable ()
+{
+  return m_copyAvailable;
+}
+
 void
-FileEditorTab::closeEvent(QCloseEvent *event)
+FileEditorTab::closeEvent (QCloseEvent *event)
 {
   if (m_fileEditor->mainWindow ()->closing ())
     {
       // close whole application: save file or not if modified
       checkFileModified ("Closing Octave", 0); // no cancel possible
       event->accept ();
     }
   else
@@ -179,20 +186,18 @@ FileEditorTab::newTitle(bool modified)
     }
   else
     emit fileNameChanged (title);
 }
 
 void
 FileEditorTab::handleCopyAvailable(bool enableCopy)
 {
-  /*
-  m_copyAction->setEnabled(enableCopy);
-  m_cutAction->setEnabled(enableCopy);
-  */
+  m_copyAvailable = enableCopy;
+  emit editorStateChanged ();
 }
 
 int
 FileEditorTab::checkFileModified (QString msg, int cancelButton)
 {
   int decision = QMessageBox::Yes;
   if (m_editArea->isModified ())
     {
diff --git a/gui/src/editor/FileEditorTab.h b/gui/src/editor/FileEditorTab.h
--- a/gui/src/editor/FileEditorTab.h
+++ b/gui/src/editor/FileEditorTab.h
@@ -23,16 +23,17 @@
 #include <QCloseEvent>
 
 class FileEditor;
 class FileEditorTab : public QWidget
 {
   Q_OBJECT
 public:
   FileEditorTab (FileEditor *fileEditor);
+  bool copyAvailable ();
 
 public slots:
   void newTitle(bool modified);
   void handleCopyAvailable(bool enableCopy);
   void handleMarginClicked (int line, int margin, Qt::KeyboardModifiers state);
   void commentSelectedText ();
   void uncommentSelectedText ();
   void removeBookmark ();
@@ -51,30 +52,32 @@ public slots:
   void loadFile (QString fileName);
   void newFile ();
   void saveFile ();
   void saveFile (QString saveFileName);
   void saveFileAs ();
   void runFile ();
 
 signals:
-  void fileNameChanged(QString fileName);
+  void fileNameChanged (QString fileName);
+  void editorStateChanged ();
 
 protected:
-  void closeEvent(QCloseEvent *event);
+  void closeEvent (QCloseEvent *event);
 
 private:
   int checkFileModified (QString msg, int cancelButton);
   void doCommentSelectedText (bool comment);
 
   FileEditor *m_fileEditor;
   QsciScintilla *m_editArea;
 
   QString m_fileName;
   QString m_fileNameShort;
 
   bool m_modified;
   bool m_longTitle;
+  bool m_copyAvailable;
 
   // TODO: Use QFileSystemWatcher to sync with disc.
 };
 
 #endif // FILEEDITORTAB_H
