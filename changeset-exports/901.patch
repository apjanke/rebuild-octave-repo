# HG changeset patch
# User jwe
# Date 784406391 0
#      Wed Nov 09 18:39:51 1994 +0000
# Node ID d99574d49d19e66565d07d919148babb8ff81155
# Parent  f8c8c2461f4d5f621ab980facee6502c2f739c0b
[project @ 1994-11-09 18:39:51 by jwe]
Initial revision

diff --git a/scripts/miscellaneous/etime.m b/scripts/miscellaneous/etime.m
new file mode 100644
--- /dev/null
+++ b/scripts/miscellaneous/etime.m
@@ -0,0 +1,57 @@
+# Copyright (C) 1994 John W. Eaton
+#
+# This file is part of Octave.
+#
+# Octave is free software; you can redistribute it and/or modify it
+# under the terms of the GNU General Public License as published by the
+# Free Software Foundation; either version 2, or (at your option) any
+# later version.
+#
+# Octave is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+# for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Octave; see the file COPYING.  If not, write to the Free
+# Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+
+function secs = etime (t1, t0)
+
+# usage: etime (t1, t0)
+#
+# Return the difference between t1 and t0 in seconds.  The arguments
+# are expected to be vectors in the form returned by clock ().
+#
+# See also: tic, toc, clock, cputime
+
+  if (nargin != 2)
+    usage ("etime (t1, t0)");
+  endif
+
+  if (is_vector (t1) && length (t1) == 6 && is_vector (t0) && length (t0) == 6)
+    error ("etime: args are not 6-element vectors");
+  endif
+
+  if (t1 (1) == t0 (1))
+    error ("etime: can't handle timings over year boundaries yet")
+  endif
+
+# XXX FIXME XXX -- could check here to ensure that t1 and t0 really do
+# make sense as vectors returned from clock().
+
+  days_in_months = [31, 28, 31, 30, 31, 30 31, 31, 30, 31, 30, 31];
+
+  if (is_leap_year (t1 (1)))
+    days_in_months (2) = days_in_months (2) + 1;
+  endif
+
+  d1 = sum (days_in_months (1:(t1 (2) - 1))) + t1 (3);
+  d0 = sum (days_in_months (1:(t0 (2) - 1))) + t0 (3);
+
+  s1 = 86400 * d1 + 3600 * t1 (4) + 60 * t1 (5) + t1 (6);
+  s0 = 86400 * d0 + 3600 * t0 (4) + 60 * t0 (5) + t0 (6);
+
+  secs = s1 - s0;
+
+endfunction
diff --git a/scripts/miscellaneous/is_leap_year.m b/scripts/miscellaneous/is_leap_year.m
new file mode 100644
--- /dev/null
+++ b/scripts/miscellaneous/is_leap_year.m
@@ -0,0 +1,38 @@
+# Copyright (C) 1994 John W. Eaton
+#
+# This file is part of Octave.
+#
+# Octave is free software; you can redistribute it and/or modify it
+# under the terms of the GNU General Public License as published by the
+# Free Software Foundation; either version 2, or (at your option) any
+# later version.
+#
+# Octave is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+# for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Octave; see the file COPYING.  If not, write to the Free
+# Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+
+function retval = is_leap_year (year)
+
+# usage: is_leap_year (year)
+#
+# Return 1 if the given year is a leap year; otherwise, return 0.
+# With no arguments, use the current year.
+
+  if (nargin > 1)
+    usage ("is_leap_year (year)");
+  endif
+
+  if (nargin == 0)
+    t = clock ();
+    year = t (1);
+  endif
+
+  retval = ((rem (year, 4) == 0 && rem (year, 100) != 0) ...
+            || rem (year, 400) == 0);
+
+endfunction
