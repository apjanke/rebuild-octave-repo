# HG changeset patch
# User Rik <rik@octave.org>
# Date 1429308150 25200
#      Fri Apr 17 15:02:30 2015 -0700
# Node ID 93b3757a9623003761d551f28556d7722a3eb12d
# Parent  1663b82bd00903f40cc088cc635efd8e013e9a5d
Use stricter input validation for OPT arg of bessel functions (bug #44867).

* besselj.cc (do_bessel): Validate that OPT argument is a scalar and either
0/1 or false/true.
* besselj.cc (Fbesselj): Update documentation to specify that OPT must be 1
or true to engage the scaling operation.

diff --git a/libinterp/corefcn/besselj.cc b/libinterp/corefcn/besselj.cc
--- a/libinterp/corefcn/besselj.cc
+++ b/libinterp/corefcn/besselj.cc
@@ -89,17 +89,40 @@ do_bessel (enum bessel_type type, const 
            const octave_value_list& args, int nargout)
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 2 || nargin == 3)
     {
-      bool scaled = (nargin == 3);
+      bool scaled = false;
+      if (nargin == 3)
+        {
+          octave_value opt_arg = args(2);
+          bool rpt_error = false;
+
+          if (! opt_arg.is_scalar_type ())
+            rpt_error = true;
+          else if (opt_arg.is_numeric_type ())
+            {
+              double opt_val = opt_arg.double_value ();
+              if (opt_val != 0.0 && opt_val != 1.0)
+                rpt_error = true;
+              scaled = (opt_val == 1.0);
+            }
+          else if (opt_arg.is_bool_type ())
+            scaled = opt_arg.bool_value ();
+
+          if (rpt_error)
+            {
+              error ("%s: OPT must be 0 (or false) or 1 (or true)", fn);
+              return retval;
+            }
+        }
 
       octave_value alpha_arg = args(0);
       octave_value x_arg = args(1);
 
       if (alpha_arg.is_single_type () || x_arg.is_single_type ())
         {
           if (alpha_arg.is_scalar_type ())
             {
@@ -384,36 +407,36 @@ DEFUN (besselj, args, nargout,
 @deftypefnx {Built-in Function} {[@var{y}, @var{ierr}] =} bessely (@var{alpha}, @var{x}, @var{opt})\n\
 @deftypefnx {Built-in Function} {[@var{i}, @var{ierr}] =} besseli (@var{alpha}, @var{x}, @var{opt})\n\
 @deftypefnx {Built-in Function} {[@var{k}, @var{ierr}] =} besselk (@var{alpha}, @var{x}, @var{opt})\n\
 @deftypefnx {Built-in Function} {[@var{h}, @var{ierr}] =} besselh (@var{alpha}, @var{k}, @var{x}, @var{opt})\n\
 Compute Bessel or Hankel functions of various kinds:\n\
 \n\
 @table @code\n\
 @item besselj\n\
-Bessel functions of the first kind.  If the argument @var{opt} is supplied,\n\
-the result is multiplied by @code{exp (-abs (imag (@var{x})))}.\n\
+Bessel functions of the first kind.  If the argument @var{opt} is 1 or true,\n\
+the result is multiplied by @w{@code{exp (-abs (imag (@var{x})))}}.\n\
 \n\
 @item bessely\n\
-Bessel functions of the second kind.  If the argument @var{opt} is supplied,\n\
+Bessel functions of the second kind.  If the argument @var{opt} is 1 or true,\n\
 the result is multiplied by @code{exp (-abs (imag (@var{x})))}.\n\
 \n\
 @item besseli\n\
 \n\
-Modified Bessel functions of the first kind.  If the argument @var{opt} is\n\
-supplied, the result is multiplied by @code{exp (-abs (real (@var{x})))}.\n\
+Modified Bessel functions of the first kind.  If the argument @var{opt} is 1\n\
+or true, the result is multiplied by @code{exp (-abs (real (@var{x})))}.\n\
 \n\
 @item besselk\n\
 \n\
-Modified Bessel functions of the second kind.  If the argument @var{opt} is\n\
-supplied, the result is multiplied by @code{exp (@var{x})}.\n\
+Modified Bessel functions of the second kind.  If the argument @var{opt} is 1\n\
+or true, the result is multiplied by @code{exp (@var{x})}.\n\
 \n\
 @item besselh\n\
 Compute Hankel functions of the first (@var{k} = 1) or second (@var{k}\n\
-= 2) kind.  If the argument @var{opt} is supplied, the result is multiplied\n\
+= 2) kind.  If the argument @var{opt} is 1 or true, the result is multiplied\n\
 by @code{exp (-I*@var{x})} for @var{k} = 1 or @code{exp (I*@var{x})} for\n\
 @var{k} = 2.\n\
 @end table\n\
 \n\
 If @var{alpha} is a scalar, the result is the same size as @var{x}.\n\
 If @var{x} is a scalar, the result is the same size as @var{alpha}.\n\
 If @var{alpha} is a row vector and @var{x} is a column vector, the\n\
 result is a matrix with @code{length (@var{x})} rows and\n\
