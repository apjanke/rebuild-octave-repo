# HG changeset patch
# User jwe
# Date 845322531 0
#      Mon Oct 14 19:48:51 1996 +0000
# Node ID 4f55dc039a7eddf14c0766d2fc45084561bde83b
# Parent  13b3c87b192eeaa4eabe82719b1aec5450212812
[project @ 1996-10-14 19:48:50 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,12 @@
 Mon Oct 14 11:05:24 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
-	* pt-fvc.cc (tree_identifier::eval): If retval is undefined, print
-	error message.
+	* pt-fvc.cc (tree_identifier::eval): If retval is undefined and
+	the object to eval is a constant, print	error message.
 
 	* Makefile (distclean): Remove *.oct too.
 
 	* defun-int.h: Include variables.h here.
 
 Sun Oct 13 10:52:28 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* variables.cc (print_symbol_info_line): Never print negative
diff --git a/src/op-str-str.cc b/src/op-str-str.cc
--- a/src/op-str-str.cc
+++ b/src/op-str-str.cc
@@ -40,19 +40,41 @@ static octave_value
 eq (const octave_value& a1, const octave_value& a2)
 {
   CAST_BINOP_ARGS (const octave_char_matrix_str&,
 		   const octave_char_matrix_str&);
 
   return octave_value (v1.char_matrix_value () == v2.char_matrix_value ());
 }
 
+static octave_value
+ne (const octave_value& a1, const octave_value& a2)
+{
+  CAST_BINOP_ARGS (const octave_char_matrix_str&,
+		   const octave_char_matrix_str&);
+
+  return octave_value (v1.char_matrix_value () != v2.char_matrix_value ());
+}
+
+static octave_value
+assign (octave_value& a1, const octave_value_list& idx,
+	const octave_value& a2)
+{
+  CAST_BINOP_ARGS (octave_char_matrix_str&, const octave_char_matrix_str&);
+
+  v1.assign (idx, v2.char_matrix_value ());
+  return octave_value ();
+}
+
 void
 install_str_str_ops (void)
 {
   INSTALL_BINOP (eq, octave_char_matrix_str, octave_char_matrix_str, eq);
+  INSTALL_BINOP (ne, octave_char_matrix_str, octave_char_matrix_str, ne);
+
+  INSTALL_ASSIGNOP (octave_char_matrix_str, octave_char_matrix_str, assign);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-cx-mat.cc b/src/ov-cx-mat.cc
--- a/src/ov-cx-mat.cc
+++ b/src/ov-cx-mat.cc
@@ -62,23 +62,25 @@ octave_complex_matrix::index (const octa
   int len = idx.length ();
 
   switch (len)
     {
     case 2:
       {
 	idx_vector i = idx (0).index_vector ();
 	idx_vector j = idx (1).index_vector ();
+
 	retval = ComplexMatrix (matrix.index (i, j));
       }
       break;
 
     case 1:
       {
 	idx_vector i = idx (0).index_vector ();
+
 	retval = ComplexMatrix (matrix.index (i));
       }
       break;
 
     default:
       error ("invalid number of indices (%d) for complex matrix value", len);
       break;
     }
diff --git a/src/ov-re-mat.cc b/src/ov-re-mat.cc
--- a/src/ov-re-mat.cc
+++ b/src/ov-re-mat.cc
@@ -62,23 +62,25 @@ octave_matrix::index (const octave_value
   int len = idx.length ();
 
   switch (len)
     {
     case 2:
       {
 	idx_vector i = idx (0).index_vector ();
 	idx_vector j = idx (1).index_vector ();
+
 	retval = Matrix (matrix.index (i, j));
       }
       break;
 
     case 1:
       {
 	idx_vector i = idx (0).index_vector ();
+
 	retval = Matrix (matrix.index (i));
       }
       break;
 
     default:
       error ("invalid number of indices (%d) for matrix value", len);
       break;
     }
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -26,16 +26,17 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "lo-ieee.h"
 #include "mx-base.h"
 
+#include "oct-obj.h"
 #include "ops.h"
 #include "ov-re-mat.h"
 #include "ov-str-mat.h"
 #include "gripes.h"
 #include "pr-output.h"
 
 int octave_char_matrix_str::t_id = -1;
 
@@ -51,16 +52,89 @@ default_numeric_conversion_function (con
 
 octave_value::numeric_conv_fcn
 octave_char_matrix_str::numeric_conversion_function (void) const
 {
   return default_numeric_conversion_function;
 }
 
 octave_value
+octave_char_matrix_str::index (const octave_value_list& idx) const
+{
+  octave_value retval;
+
+  int len = idx.length ();
+
+  switch (len)
+    {
+    case 2:
+      {
+	idx_vector i = idx (0).index_vector ();
+	idx_vector j = idx (1).index_vector ();
+
+	retval = octave_value (charMatrix (matrix.index (i, j)), true);
+      }
+      break;
+
+    case 1:
+      {
+	idx_vector i = idx (0).index_vector ();
+
+	retval = octave_value (charMatrix (matrix.index (i)), true);
+      }
+      break;
+
+    default:
+      error ("invalid number of indices (%d) for matrix value", len);
+      break;
+    }
+
+  return retval;
+}
+
+extern void assign (Array2<char>&, const Array2<char>&);
+
+void
+octave_char_matrix_str::assign (const octave_value_list& idx,
+				const charMatrix& rhs)
+{
+  int len = idx.length ();
+
+  switch (len)
+    {
+    case 2:
+      {
+	idx_vector i = idx (0).index_vector ();
+	idx_vector j = idx (1).index_vector ();
+
+	matrix.set_index (i);
+	matrix.set_index (j);
+
+	::assign (matrix, rhs);
+      }
+      break;
+
+    case 1:
+      {
+	idx_vector i = idx (0).index_vector ();
+
+	matrix.set_index (i);
+
+	::assign (matrix, rhs);
+      }
+      break;
+
+    default:
+      error ("invalid number of indices (%d) for indexed matrix assignment",
+	     len);
+      break;
+    }
+}
+
+octave_value
 octave_char_matrix_str::all (void) const
 {
   octave_value retval;
   error ("octave_char_matrix_str::all(): not implemented");
   return retval;
 }
 
 octave_value
@@ -113,19 +187,17 @@ octave_char_matrix_str::matrix_value (bo
     gripe_invalid_conversion ("string", "real matrix");
 
   return retval;
 }
 
 charMatrix
 octave_char_matrix_str::all_strings (void) const
 {
-  charMatrix retval;
-  error ("octave_char_matrix_str::all_strings(): not implemented");
-  return retval;
+  return matrix;
 }
 
 string
 octave_char_matrix_str::string_value (void) const
 {
   return matrix.row_as_string (0);  // XXX FIXME??? XXX
 }
 
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -79,16 +79,20 @@ public:
 
 #if 0
   void *operator new (size_t size);
   void operator delete (void *p, size_t size);
 #endif
 
   numeric_conv_fcn numeric_conversion_function (void) const;
 
+  octave_value index (const octave_value_list& idx) const;
+
+  void assign (const octave_value_list& idx, const charMatrix& rhs);
+
   octave_value all (void) const;
   octave_value any (void) const;
 
   bool is_string (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const;
diff --git a/src/pt-fvc.cc b/src/pt-fvc.cc
--- a/src/pt-fvc.cc
+++ b/src/pt-fvc.cc
@@ -419,17 +419,17 @@ tree_identifier::eval (bool print)
     {
       if (retval.is_defined ())
 	{
 	  if (maybe_do_ans_assign && ! object_to_eval->is_constant ())
 	    bind_ans (retval, print);
 	  else if (print)
 	    retval.print_with_name (name ());
 	}
-      else
+      else if (object_to_eval->is_constant ())
 	eval_undefined_error ();
     }
 
   return retval;
 }
 
 octave_value_list
 tree_identifier::eval (bool print, int nargout, const octave_value_list& args)
