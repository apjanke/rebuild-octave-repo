# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1367126476 14400
#      Sun Apr 28 01:21:16 2013 -0400
# Node ID 2754c5fd6ae0d5ca9ca7e4394304c9c45b503fae
# Parent  1a1f8199b5bb73321718ceccbff5c07ec0f17ddc
keep focus in the command window after dbstop, dbstep, etc.

* main-window.h, main-window.cc
(main_window::command_window_has_focus,
main_window::handle_insert_debugger_pointer_request,
main_window::handle_delete_debugger_pointer_request,
main_window::handle_update_breakpoint_marker_request): New functions.
(main_window::insert_debugger_pointer_signal
main_window::delete_debugger_pointer_signal,
main_window::update_breakpoint_marker_signal): New signals.
(main_window::construct): Connect
main_window::insert_debugger_pointer_signal to
editor_window::handle_insert_debugger_pointer_request.
Connect main_window::delete_debugger_pointer_signal to
editor_window::handle_delete_debugger_pointer_request.
Connect main_window::update_breakpoint_marker_signal to
editor_window::handle_update_breakpoint_marker_request.
(main_window::construct_octave_qt_link): Connect
_octave_qt_link::insert_debugger_pointer_signal to
main_window::handle_insert_debugger_pointer_request instead of
editor_window::handle_insert_debugger_pointer_request.
Connect _octave_qt_link::delete_debugger_pointer_signal to
main_window::handle_delete_debugger_pointer_request instead of
editor_window::handle_delete_debugger_pointer_request.
Connect _octave_qt_link::update_breakpoint_marker_signal to
main_window::handle_update_breakpoint_marker_request instead of
editor_window::handle_update_breakpoint_marker_request.

* terminal-dock-widget.h, terminal-dock-widget.cc
(terminal_dock_widget::has_focus): New function.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -99,16 +99,22 @@ main_window::~main_window (void)
     {
       delete find_files_dlg;
       find_files_dlg = 0;
     }
   delete _octave_main_thread;
   delete _octave_qt_link;
 }
 
+bool
+main_window::command_window_has_focus (void) const
+{
+  return command_window->has_focus ();
+}
+
 void
 main_window::focus_command_window (void)
 {
   command_window->focus ();
 }
 
 void
 main_window::new_file (const QString& commands)
@@ -452,16 +458,53 @@ main_window::debug_step_out (void)
 
 void
 main_window::debug_quit (void)
 {
   octave_link::post_event (this, &main_window::debug_quit_callback);
 }
 
 void
+main_window::handle_insert_debugger_pointer_request (const QString& file,
+                                                     int line)
+{
+  bool cmd_focus = command_window_has_focus ();
+
+  emit insert_debugger_pointer_signal (file, line);
+
+  if (cmd_focus)
+    focus_command_window ();
+}
+
+void
+main_window::handle_delete_debugger_pointer_request (const QString& file,
+                                                     int line)
+{
+  bool cmd_focus = command_window_has_focus ();
+
+  emit delete_debugger_pointer_signal (file, line);
+
+  if (cmd_focus)
+    focus_command_window ();
+}
+
+void
+main_window::handle_update_breakpoint_marker_request (bool insert,
+                                                      const QString& file,
+                                                      int line)
+{
+  bool cmd_focus = command_window_has_focus ();
+
+  emit update_breakpoint_marker_signal (insert, file, line);
+
+  if (cmd_focus)
+    focus_command_window ();
+}
+
+void
 main_window::show_about_octave (void)
 {
   QString message = OCTAVE_STARTUP_MESSAGE;
 
   QMessageBox::about (this, tr ("About Octave"), message);
 }
 
 void
@@ -728,16 +771,31 @@ main_window::construct (void)
     win_y = 720;
 
   setGeometry (0, 0, win_x, win_y);
 
   setStatusBar (status_bar);
 
   construct_octave_qt_link ();
 
+  connect (this,
+           SIGNAL (insert_debugger_pointer_signal (const QString&, int)),
+           editor_window,
+           SLOT (handle_insert_debugger_pointer_request (const QString&, int)));
+
+  connect (this,
+           SIGNAL (delete_debugger_pointer_signal (const QString&, int)),
+           editor_window,
+           SLOT (handle_delete_debugger_pointer_request (const QString&, int)));
+
+  connect (this,
+           SIGNAL (update_breakpoint_marker_signal (bool, const QString&, int)),
+           editor_window,
+           SLOT (handle_update_breakpoint_marker_request (bool, const QString&, int)));
+
   QDir curr_dir;
   set_current_working_directory (curr_dir.absolutePath ());
 
   octave_link::post_event (this, &main_window::resize_command_window_callback);
 }
 
 void
 main_window::construct_octave_qt_link (void)
@@ -784,35 +842,35 @@ main_window::construct_octave_qt_link (v
 
   connect (_octave_qt_link, SIGNAL (enter_debugger_signal ()),
            this, SLOT (handle_enter_debugger ()));
 
   connect (_octave_qt_link, SIGNAL (exit_debugger_signal ()),
            this, SLOT (handle_exit_debugger ()));
 
   connect (_octave_qt_link,
-           SIGNAL (update_breakpoint_marker_signal (bool, const QString&, int)),
-           editor_window,
-           SLOT (handle_update_breakpoint_marker_request (bool, const QString&, int)));
-
-  connect (_octave_qt_link,
            SIGNAL (edit_file_signal (const QString&)),
            editor_window,
            SLOT (handle_edit_file_request (const QString&)));
 
   connect (_octave_qt_link,
            SIGNAL (insert_debugger_pointer_signal (const QString&, int)),
-           editor_window,
+           this,
            SLOT (handle_insert_debugger_pointer_request (const QString&, int)));
 
   connect (_octave_qt_link,
            SIGNAL (delete_debugger_pointer_signal (const QString&, int)),
-           editor_window,
+           this,
            SLOT (handle_delete_debugger_pointer_request (const QString&, int)));
 
+  connect (_octave_qt_link,
+           SIGNAL (update_breakpoint_marker_signal (bool, const QString&, int)),
+           this,
+           SLOT (handle_update_breakpoint_marker_request (bool, const QString&, int)));
+
   connect (_workspace_model,
            SIGNAL (rename_variable (const QString&, const QString&)),
            this,
            SLOT (handle_rename_variable_request (const QString&,
                                                  const QString&)));
 
   _octave_qt_link->execute_interpreter ();
 
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -67,23 +67,30 @@ class main_window : public QMainWindow
 public:
 
   typedef std::pair <std::string, std::string> name_pair;
 
   main_window (QWidget *parent = 0);
 
   ~main_window (void);
 
+  bool command_window_has_focus (void) const;
+
   void focus_command_window (void);
 
 signals:
   void settings_changed (const QSettings *);
   void new_file_signal (const QString&);
   void open_file_signal (const QString&);
 
+  void insert_debugger_pointer_signal (const QString& file, int line);
+  void delete_debugger_pointer_signal (const QString& file, int line);
+  void update_breakpoint_marker_signal (bool insert, const QString& file,
+                                        int line);
+
 public slots:
   void report_status_message (const QString& statusMessage);
   void handle_save_workspace_request (void);
   void handle_load_workspace_request (const QString& file = QString ());
   void handle_clear_command_window_request (void);
   void handle_clear_workspace_request (void);
   void handle_clear_history_request (void);
   void handle_rename_variable_request (const QString& old_name,
@@ -117,16 +124,21 @@ public slots:
   void handle_enter_debugger (void);
   void handle_exit_debugger (void);
   void debug_continue (void);
   void debug_step_into (void);
   void debug_step_over (void);
   void debug_step_out (void);
   void debug_quit (void);
 
+  void handle_insert_debugger_pointer_request (const QString& file, int line);
+  void handle_delete_debugger_pointer_request (const QString& file, int line);
+  void handle_update_breakpoint_marker_request (bool insert,
+                                                const QString& file, int line);
+
   void read_settings (void);
   void write_settings (void);
   void connect_visibility_changed (void);
 
   void connect_uiwidget_links ();
 
   void handle_create_dialog (const QString& message, const QString& title,
                              const QString& icon, const QStringList& button,
diff --git a/libgui/src/terminal-dock-widget.cc b/libgui/src/terminal-dock-widget.cc
--- a/libgui/src/terminal-dock-widget.cc
+++ b/libgui/src/terminal-dock-widget.cc
@@ -51,16 +51,24 @@ terminal_dock_widget::terminal_dock_widg
 
   connect (this, SIGNAL (copyClipboard_signal (void)),
            terminal, SLOT (copyClipboard (void)));
 
   connect (this, SIGNAL (pasteClipboard_signal (void)),
            terminal, SLOT (pasteClipboard (void)));
 }
 
+bool
+terminal_dock_widget::has_focus (void) const
+{
+  QWidget *w = widget ();
+
+  return w->hasFocus ();
+}
+
 void
 terminal_dock_widget::notice_settings (const QSettings *settings)
 {
   emit notice_settings_signal (settings);
 }
 
 void
 terminal_dock_widget::copyClipboard (void)
diff --git a/libgui/src/terminal-dock-widget.h b/libgui/src/terminal-dock-widget.h
--- a/libgui/src/terminal-dock-widget.h
+++ b/libgui/src/terminal-dock-widget.h
@@ -32,16 +32,18 @@ along with Octave; see the file COPYING.
 class terminal_dock_widget : public octave_dock_widget
 {
   Q_OBJECT
 
 public:
 
   terminal_dock_widget (QWidget *parent = 0);
 
+  bool has_focus (void) const;
+
 signals:
 
 public slots:
 
   void notice_settings (const QSettings *settings);
 
   void copyClipboard (void);
 
