# HG changeset patch
# User jwe
# Date 812717419 0
#      Tue Oct 03 10:50:19 1995 +0000
# Node ID 74f9e88a2c12aa0f456db67b3ee76580081bc795
# Parent  fe9c39fd89c7420ec7bab93bf7af6e5f54be52d0
[project @ 1995-10-03 10:49:31 by jwe]

diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -152,16 +152,19 @@ static tree_expression *make_unary_op
 // Make an expression that handles assignment of multiple values.
 static tree_expression *make_multi_val_ret
 	(tree_matrix *m, tree_expression *rhs, int l = -1, int c = -1);
 
 // Make an index expression.
 static tree_index_expression *make_index_expression
 	 (tree_indirect_ref *indir, tree_argument_list *args);
 
+// Maybe print a warning.  Duh.
+static void maybe_warn_missing_semi (tree_statement_list *);
+
 #define ABORT_PARSE \
   do \
     { \
       global_command = 0; \
       yyerrok; \
       if (interactive) \
 	YYACCEPT; \
       else \
@@ -324,40 +327,52 @@ parse_error	: LEXICAL_ERROR
 		| error
 		;
 
 simple_list	: semi_comma
 		  { $$ = 0; }
 		| comma_semi
 		  { $$ = 0; }
 		| simple_list1
-		  { $$ = $1; }
+		  {
+		    maybe_warn_missing_semi ($1);
+		    $$ = $1;
+		  }
+		| simple_list1 comma_semi
+		  {
+		    maybe_warn_missing_semi ($1);
+		    $$ = $1;
+		  }
 		| simple_list1 semi_comma
 		  {
 		    tree_statement *tmp = $1->rear ();
 		    tmp->set_print_flag (0);
+		    $$ = $1;
 		  }
-		| simple_list1 comma_semi
-		  { $$ = $1; }
 		;
 
 simple_list1	: statement
 		  { $$ = new tree_statement_list ($1); }
 		| semi_comma statement
 		  { $$ = new tree_statement_list ($2); }
 		| comma_semi statement
 		  { $$ = new tree_statement_list ($2); }
 		| simple_list1 semi_comma statement
 		  {
 		    tree_statement *tmp = $1->rear ();
 		    tmp->set_print_flag (0);
 		    $1->append ($3);
+		    $$ = $1;
 		  }
 		| simple_list1 comma_semi statement
-		  { $1->append ($3); }
+		  {
+		    $1->append ($3);
+		    maybe_warn_missing_semi ($1);
+		    $$ = $1;
+		  }
 		;
 
 semi_comma	: ';'
 		| semi_comma ','
 		| semi_comma ';'
 		;
 
 comma_semi	: ','
@@ -376,38 +391,48 @@ semi_sep	: ';'
 
 opt_list	: // empty
 		  { $$ = new tree_statement_list (); }
 		| list
 		  { $$ = $1; }
 		;
 
 list		: list1
-		  { $$ = $1; }
+		  {
+		    maybe_warn_missing_semi ($1);
+		    $$ = $1;
+		  }
 		| list1 comma_nl_sep
-		  { $$ = $1; }
+		  {
+		    $$ = $1;
+		  }
 		| list1 semi_sep
 		  {
 		    tree_statement *tmp = $1->rear ();
 		    tmp->set_print_flag (0);
 		  }
 		;
 
 list1		: statement
 		  {
 		    beginning_of_function = 0;
 		    $$ = new tree_statement_list ($1);
 		  }
 		| list1 comma_nl_sep statement
-		  { $1->append ($3); }
+		  {
+		    $1->append ($3);
+		    maybe_warn_missing_semi ($1);
+		    $$ = $1;
+		  }
 		| list1 semi_sep statement
 		  {
 		    tree_statement *tmp = $1->rear ();
 		    tmp->set_print_flag (0);
 		    $1->append ($3);
+		    $$ = $1;
 		  }
 		;
 
 statement	: command
 		  { $$ = new tree_statement ($1); }
 		| ans_expression
 		  { $$ = new tree_statement ($1); }
 		| PLOT CLEAR
@@ -1656,8 +1681,21 @@ make_index_expression (tree_indirect_ref
       retval = new tree_index_expression (indir->ident (), args, l, c);
       delete indir;
     }
   else
     retval =  new tree_index_expression (indir, args, l, c);
 
   return retval;
 }
+
+static void
+maybe_warn_missing_semi (tree_statement_list *t)
+{
+  if (defining_func && user_pref.warn_missing_semicolon)
+    {
+      tree_statement *tmp = t->rear();
+      if (tmp->is_expression ())
+
+	warning ("missing semicolon near line %d, column %d",
+		 tmp->line (), tmp->column ());
+    }
+}
diff --git a/src/user-prefs.cc b/src/user-prefs.cc
--- a/src/user-prefs.cc
+++ b/src/user-prefs.cc
@@ -510,20 +510,19 @@ warn_function_name_clash (void)
 {
   user_pref.warn_function_name_clash =
     check_preference ("warn_function_name_clash");
 
   return 0;
 }
 
 
-// Generate warning if a statement in a function or script file is not
-// terminated with a semicolon.  Useful for checking scripts and
-// functions that should only produce output using explicit printing
-// statements.
+// Generate warning if a statement in a function is not terminated
+// with a semicolon.  Useful for checking functions that should only
+// produce output using explicit printing statements.
 
 int
 warn_missing_semicolon (void)
 {
   user_pref.warn_missing_semicolon = 
     check_preference ("warn_missing_semicolon");
 
   return 0;
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1824,18 +1824,18 @@ help and usage functions");
     "on IEEE machines, allow divide by zero errors to be suppressed");
 
   DEFVAR ("warn_function_name_clash", SBV_warn_function_name_clash,
 	  1.0, 0, warn_function_name_clash,
     "produce warning if function name conflicts with file name");
 
   DEFVAR ("warn_missing_semicolon", SBV_warn_missing_semicolon,
 	  0.0, 0, warn_missing_semicolon,
-    "produce a warning if a statement in a script or function file is
-not terminated with a semicolon");
+    "produce a warning if a statement in a function file is not
+terminated with a semicolon");
 
   DEFVAR ("whitespace_in_literal_matrix",
 	  SBV_whitespace_in_literal_matrix, "", 0,
 	  whitespace_in_literal_matrix,
     "control auto-insertion of commas and semicolons in literal matrices");
 }
 
 // Deleting names from the symbol tables.
