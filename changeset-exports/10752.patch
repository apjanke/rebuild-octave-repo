# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1277448446 -7200
#      Fri Jun 25 08:47:26 2010 +0200
# Node ID d1b09c44d797cfd267fe3669d336fe19747abbf6
# Parent  717ba2c3eef1d1a2fab49024d2bb51d6d52bf308
# Parent  9d95d8ab7c3accbe538411228e8786bf0864c5c9
merge with main repo

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2660,20 +2660,16 @@ ComplexMatrix::lssolve (const ComplexMat
         liwork = 1;
       Array<octave_idx_type> iwork (liwork, 1);
       octave_idx_type* piwork = iwork.fortran_vec ();
 
       F77_XFCN (zgelsd, ZGELSD, (m, n, nrhs, tmp_data, m, pretval, maxmn,
                                  ps, rcon, rank, work.fortran_vec (),
                                  lwork, prwork, piwork, info));
 
-      std::cerr << "work(0): " << work(0) << std::endl;
-      std::cerr << "rwork(0): " << rwork(0) << std::endl;
-      std::cerr << "iwork(0): " << iwork(0) << std::endl;
-
       // The workspace query is broken in at least LAPACK 3.0.0
       // through 3.1.1 when n >= mnthr.  The obtuse formula below
       // should provide sufficient workspace for ZGELSD to operate
       // efficiently.
       if (n >= mnthr)
         {
           octave_idx_type addend = m;
 
@@ -2697,20 +2693,16 @@ ComplexMatrix::lssolve (const ComplexMat
 
           if (std::real (work(0)) < lworkaround)
             work(0) = lworkaround;
         }
 
       lwork = static_cast<octave_idx_type> (std::real (work(0)));
       work.resize (lwork, 1);
 
-      std::cerr << "work numel: " << work.numel () << std::endl;
-      std::cerr << "rwork numel: " << rwork.numel () << std::endl;
-      std::cerr << "iwork numel: " << iwork.numel () << std::endl;
-
       F77_XFCN (zgelsd, ZGELSD, (m, n, nrhs, tmp_data, m, pretval,
                                  maxmn, ps, rcon, rank,
                                  work.fortran_vec (), lwork, 
                                  prwork, piwork, info));
 
       if (s.elem (0) == 0.0)
         rcon = 0.0;
       else
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2010-06-24  John W. Eaton  <jwe@octave.org>
+
+	* plot/private/__plt__.m: Replace usage message with error.
+	* plot/loglog.m, plot/plot.m, plot/polar.m, plot/semilogx.m,
+	plot/semilogy.m: Call print_usage if no args are supplied.
+        Add additional calling forms to documentation.
+
 2010-06-24  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* plot/print.m: convert to wrapper for backend specific print functions
 	* plot/__gnuplot_print__.m: New gnuplot specific print function,
 	largely based on the former print.m
 	* plot/__fltk_print__.m: New fltk specific print function
 	* plot/__print_parse_opts__.m: New option parser for print
 	functions, largely based on the former print.m
diff --git a/scripts/plot/loglog.m b/scripts/plot/loglog.m
--- a/scripts/plot/loglog.m
+++ b/scripts/plot/loglog.m
@@ -13,28 +13,37 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} loglog (@var{args})
+## @deftypefn  {Function File} {} loglog (@var{y})
+## @deftypefnx {Function File} {} loglog (@var{x}, @var{y})
+## @deftypefnx {Function File} {} loglog (@var{x}, @var{y}, @var{property}, @var{value}, @dots{})
+## @deftypefnx {Function File} {} loglog (@var{x}, @var{y}, @var{fmt})
+## @deftypefnx {Function File} {} loglog (@var{h}, @dots{})
+## @deftypefnx {Function File} {@var{h} =} loglog (@dots{})
 ## Produce a two-dimensional plot using log scales for both axes.  See
-## the description of @code{plot} for a description of the arguments
+## the documentation of @code{plot} for a description of the arguments
 ## that @code{loglog} will accept.
 ## @seealso{plot, semilogx, semilogy}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = loglog (varargin)
 
-  [h, varargin] = __plt_get_axis_arg__ ("loglog", varargin{:});
+  [h, varargin, nargs] = __plt_get_axis_arg__ ("loglog", varargin{:});
+
+  if (nargs < 1)
+    print_usage(); 
+  endif
 
   oldh = gca ();
   unwind_protect
     axes (h);
     newplot ();
 
     set (h, "xscale", "log", "yscale", "log");
     if (any( strcmp (get (gca, "nextplot"), {"new", "replace"})))
diff --git a/scripts/plot/plot.m b/scripts/plot/plot.m
--- a/scripts/plot/plot.m
+++ b/scripts/plot/plot.m
@@ -174,17 +174,21 @@
 ## @seealso{semilogx, semilogy, loglog, polar, mesh, contour, bar,
 ## stairs, errorbar, xlabel, ylabel, title, print}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = plot (varargin)
 
-  [h, varargin] = __plt_get_axis_arg__ ("plot", varargin{:});
+  [h, varargin, nargs] = __plt_get_axis_arg__ ("plot", varargin{:});
+
+  if (nargs < 1)
+    print_usage(); 
+  endif
 
   oldh = gca ();
   unwind_protect
     axes (h);
     newplot ();
     tmp = __plt__ ("plot", h, varargin{:});
   unwind_protect_cleanup
     axes (oldh);
diff --git a/scripts/plot/polar.m b/scripts/plot/polar.m
--- a/scripts/plot/polar.m
+++ b/scripts/plot/polar.m
@@ -13,30 +13,37 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} polar (@var{theta}, @var{rho}, @var{fmt})
+## @deftypefn  {Function File} {} polar (@var{theta}, @var{rho})
+## @deftypefnx {Function File} {} polar (@var{theta}, @var{rho}, @var{fmt})
+## @deftypefnx {Function File} {} polar (@var{h}, @dots{})
+## @deftypefnx {Function File} {@var{h} =} polar (@dots{})
 ## Make a two-dimensional plot given the polar coordinates @var{theta} and
 ## @var{rho}.
 ##
 ## The optional third argument specifies the line type.
 ## @seealso{plot}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = polar (varargin)
 
   [h, varargin, nargs] = __plt_get_axis_arg__ ("polar", varargin{:});
 
+  if (nargs < 1)
+    print_usage(); 
+  endif
+
   oldh = gca ();
   unwind_protect
     axes (h);
     newplot ();
 
     if (nargs == 3)
       if (! ischar (varargin{3}))
         error ("polar: third argument must be a string");
diff --git a/scripts/plot/private/__plt__.m b/scripts/plot/private/__plt__.m
--- a/scripts/plot/private/__plt__.m
+++ b/scripts/plot/private/__plt__.m
@@ -104,21 +104,17 @@ function retval = __plt__ (caller, h, va
       else
         x = next_arg;
         x_set = true;
       endif
 
     endwhile
 
   else
-    msg = sprintf ("%s (y)\n", caller);
-    msg = sprintf ("%s       %s (x, y, ...)\n", msg, caller);
-    msg = sprintf ("%s       %s (x, y, fmt, ...)\n", msg, caller);
-    msg = sprintf ("%s       %s (x, y, property, value, ...)", msg, caller);
-    usage (msg);
+    error ("__plt__: invalid number of arguments");
   endif
 
 endfunction
   
 function retval = __plt1__ (h, x1, options, properties)
 
   if (nargin < 2 || nargin > 4)
     print_usage ();
diff --git a/scripts/plot/semilogx.m b/scripts/plot/semilogx.m
--- a/scripts/plot/semilogx.m
+++ b/scripts/plot/semilogx.m
@@ -13,28 +13,37 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} semilogx (@var{args})
+## @deftypefn  {Function File} {} semilogx (@var{y})
+## @deftypefnx {Function File} {} semilogx (@var{x}, @var{y})
+## @deftypefnx {Function File} {} semilogx (@var{x}, @var{y}, @var{property}, @var{value}, @dots{})
+## @deftypefnx {Function File} {} semilogx (@var{x}, @var{y}, @var{fmt})
+## @deftypefnx {Function File} {} semilogx (@var{h}, @dots{})
+## @deftypefnx {Function File} {@var{h} =} semilogx (@dots{})
 ## Produce a two-dimensional plot using a logarithmic scale for the @var{x}
-## axis.  See the description of @code{plot} for a description of the
+## axis.  See the documentation of @code{plot} for a description of the
 ## arguments that @code{semilogx} will accept.
 ## @seealso{plot, semilogy, loglog}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = semilogx (varargin)
 
-  [h, varargin] = __plt_get_axis_arg__ ("semilogx", varargin{:});
+  [h, varargin, nargs] = __plt_get_axis_arg__ ("semilogx", varargin{:});
+
+  if (nargs < 1)
+    print_usage(); 
+  endif
 
   oldh = gca ();
   unwind_protect
     axes (h);
     newplot ();
 
     set (h, "xscale", "log");
     if (any( strcmp (get (gca, "nextplot"), {"new", "replace"})))
diff --git a/scripts/plot/semilogy.m b/scripts/plot/semilogy.m
--- a/scripts/plot/semilogy.m
+++ b/scripts/plot/semilogy.m
@@ -13,28 +13,37 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} semilogy (@var{args})
+## @deftypefn  {Function File} {} semilogy (@var{y})
+## @deftypefnx {Function File} {} semilogy (@var{x}, @var{y})
+## @deftypefnx {Function File} {} semilogy (@var{x}, @var{y}, @var{property}, @var{value}, @dots{})
+## @deftypefnx {Function File} {} semilogy (@var{x}, @var{y}, @var{fmt})
+## @deftypefnx {Function File} {} semilogy (@var{h}, @dots{})
+## @deftypefnx {Function File} {@var{h} =} semilogy (@dots{})
 ## Produce a two-dimensional plot using a logarithmic scale for the @var{y}
-## axis.  See the description of @code{plot} for a description of the
+## axis.  See the documentation of @code{plot} for a description of the
 ## arguments that @code{semilogy} will accept.
 ## @seealso{plot, semilogx, loglog}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = semilogy (varargin)
 
-  [h, varargin] = __plt_get_axis_arg__ ("semilogy", varargin{:});
+  [h, varargin, nargs] = __plt_get_axis_arg__ ("semilogy", varargin{:});
+
+  if (nargs < 1)
+    print_usage(); 
+  endif
 
   oldh = gca ();
   unwind_protect
     axes (h);
     newplot ();
 
     set (h, "yscale", "log");
     if (any( strcmp (get (gca, "nextplot"), {"new", "replace"})))
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,16 @@
 2010-06-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-struct.cc (Fcell2struct): Rewrite.
 
+2010-06-24  Rik <octave@nomad.inbox5.com>
+
+        * octave.cc: Add [FILE] to octave usage string (bug #30258).
+
 2010-06-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-map.h (octave_map, octave_scalar_map): New classes.
 	* oct-map.cc (octave_map, octave_scalar_map): Implement them.
 	(Octave_map::Octave_map (const octave_map&)): New ctor.
 	* ov-struct.h (octave_struct): Use octave_map for storage.
 	(octave_scalar_struct): New class.
 	* ov-struct.cc: Update implementations.
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -462,17 +462,17 @@ execute_command_line_file (const std::st
 
 // Usage message with extra help.
 
 static void
 verbose_usage (void)
 {
   std::cout << OCTAVE_NAME_VERSION_COPYRIGHT_COPYING_AND_WARRANTY "\n\
 \n\
-Usage: octave [options]\n\
+Usage: octave [options] [FILE]\n\
 \n\
 Options:\n\
 \n\
   --debug, -d             Enter parser debugging mode.\n\
   --doc-cache-file FILE   Use doc cache file FILE.\n\
   --echo-commands, -x     Echo commands as they are executed.\n\
   --eval CODE             Evaluate CODE.  Exit when done unless --persist.\n\
   --exec-path PATH        Set path for executing subprograms.\n\
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -237,16 +237,35 @@ octave_char_matrix_str::string_value (bo
       retval = chm.row_as_string (0);  // FIXME???
     }
   else
     error ("invalid conversion of charNDArray to string");
 
   return retval;
 }
 
+Array<std::string>
+octave_char_matrix_str::cellstr_value (void) const
+{
+  Array<std::string> retval;
+
+  if (matrix.ndims () == 2)
+    {
+      const charMatrix chm = matrix.matrix_value ();
+      octave_idx_type nr = chm.rows ();
+      retval.clear (nr, 1);
+      for (octave_idx_type i = 0; i < nr; i++)
+        retval.xelem(i) = chm.row_as_string (i);
+    }
+  else
+    error ("cellstr: cannot convert multidimensional arrays");
+
+  return retval;
+}
+
 void
 octave_char_matrix_str::print_raw (std::ostream& os, bool pr_as_read_syntax) const
 {
   octave_print_internal (os, matrix, pr_as_read_syntax,
                          current_print_indent_level (), true);
 }
 
 bool 
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -124,16 +124,18 @@ public:
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   ComplexNDArray complex_array_value (bool = false) const;
 
   string_vector all_strings (bool pad = false) const;
 
   std::string string_value (bool force = false) const;
 
+  Array<std::string> cellstr_value (void) const;
+
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
     { return octave_value (matrix.sort (dim, mode)); }
 
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
                      sortmode mode = ASCENDING) const
     { return octave_value (matrix.sort (sidx, dim, mode)); }
 
   bool print_as_scalar (void) const { return (rows () <= 1); }
