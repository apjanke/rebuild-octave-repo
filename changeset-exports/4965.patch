# HG changeset patch
# User jwe
# Date 1094501997 0
#      Mon Sep 06 20:19:57 2004 +0000
# Node ID c0d8e8afa82fb3e94e51571c6a76d363151c9134
# Parent  269c3d6c0569f4e1ad9903a9adf903c93efd92d7
[project @ 2004-09-06 20:19:57 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,25 @@
+2004-09-06  John W. Eaton  <jwe@octave.org>
+
+	* version.h (OCTAVE_API_VERSION): Now api-v10.
+
+	* OPERATORS/op-b-b.cc, OPERATORS/op-bm-bm.cc: Define and install
+	unary plus and unary minus operators.
+
+	* OPERATORS/op-int.h, OPERATORS/op-cm-cm.cc,
+	OPERATORS/op-cs-cs.cc, OPERATORS/op-m-m.cc, OPERATORS/op-range.cc:
+	Define and install unary plus operator.
+
+	* ov.cc (unary_op_as_string): Handle op_uplus too.
+
+	* parse.y (prefix_expr): Build unary plus op here instead of
+	converting to no-op.
+	(make_prefix_op): Accept op_uplus.
+
 2004-09-03  John W. Eaton  <jwe@octave.org>
 
 	* OPERATORS/op-b-bm.cc (DEFCONV): Define bool scalar to bool
 	matrix conversion.
 	(install_b_bm_ops): Install it.
 	Install conversion for assignment of bool matrix to indexed bool.
 	* OPERATORS/op-b-b.cc (install_b_b_ops): Install conversion for
 	assignment of bool to indexed bool.
diff --git a/src/OPERATORS/op-b-b.cc b/src/OPERATORS/op-b-b.cc
--- a/src/OPERATORS/op-b-b.cc
+++ b/src/OPERATORS/op-b-b.cc
@@ -40,16 +40,29 @@ Software Foundation, 59 Temple Place - S
 #include "xdiv.h"
 #include "xpow.h"
 
 // bool unary ops.
 
 // scalar unary ops.
 
 DEFUNOP_OP (not, bool, !)
+
+UNOPDECL (uplus, a)
+{
+  CAST_UNOP_ARG (const octave_bool&);
+  return octave_value (v.double_value ());
+}
+
+UNOPDECL (uminus, a)
+{
+  CAST_UNOP_ARG (const octave_bool&);
+  return octave_value (- v.double_value ());
+}
+
 DEFUNOP_OP (transpose, bool, /* no-op */)
 DEFUNOP_OP (hermitian, bool, /* no-op */)
 
 // bool by bool ops.
 
 DEFBINOP_OP (eq, bool, bool, ==)
 DEFBINOP_OP (ne, bool, bool, !=)
 DEFBINOP_OP (el_and, bool, bool, &&)
@@ -58,16 +71,18 @@ DEFBINOP_OP (el_or, bool, bool, ||)
 DEFNDCATOP_FN (b_b, bool, bool, bool_array, bool_array, concat)
 DEFNDCATOP_FN (b_s, bool, scalar, array, array, concat)
 DEFNDCATOP_FN (s_b, scalar, bool, array, array, concat)
 
 void
 install_b_b_ops (void)
 {
   INSTALL_UNOP (op_not, octave_bool, not);
+  INSTALL_UNOP (op_uplus, octave_bool, uplus);
+  INSTALL_UNOP (op_uminus, octave_bool, uminus);
   INSTALL_UNOP (op_transpose, octave_bool, transpose);
   INSTALL_UNOP (op_hermitian, octave_bool, hermitian);
 
   INSTALL_BINOP (op_eq, octave_bool, octave_bool, eq);
   INSTALL_BINOP (op_ne, octave_bool, octave_bool, ne);
   INSTALL_BINOP (op_el_and, octave_bool, octave_bool, el_and);
   INSTALL_BINOP (op_el_or, octave_bool, octave_bool, el_or);
 
diff --git a/src/OPERATORS/op-bm-bm.cc b/src/OPERATORS/op-bm-bm.cc
--- a/src/OPERATORS/op-bm-bm.cc
+++ b/src/OPERATORS/op-bm-bm.cc
@@ -36,16 +36,18 @@ Software Foundation, 59 Temple Place - S
 #include "ov-typeinfo.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // unary bool matrix ops.
 
 DEFNDUNOP_OP (not, bool_matrix, bool_array, !)
+DEFNDUNOP_OP (uplus, bool_matrix, array, +)
+DEFNDUNOP_OP (uminus, bool_matrix, array, -)
 
 DEFUNOP (transpose, bool_matrix)
 {
   CAST_UNOP_ARG (const octave_bool_matrix&);
 
   if (v.ndims () > 2)
     {
       error ("transpose not defined for N-d objects");
@@ -71,16 +73,18 @@ DEFNDCATOP_FN (bm_m, bool_matrix, matrix
 DEFNDCATOP_FN (m_bm, matrix, bool_matrix, array, array, concat)
 
 DEFNDASSIGNOP_FN (assign, bool_matrix, bool_matrix, bool_array, assign)
 
 void
 install_bm_bm_ops (void)
 {
   INSTALL_UNOP (op_not, octave_bool_matrix, not);
+  INSTALL_UNOP (op_uplus, octave_bool_matrix, uplus);
+  INSTALL_UNOP (op_uminus, octave_bool_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_bool_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_bool_matrix, transpose);
 
   INSTALL_BINOP (op_eq, octave_bool_matrix, octave_bool_matrix, eq);
   INSTALL_BINOP (op_ne, octave_bool_matrix, octave_bool_matrix, ne);
 
   INSTALL_BINOP (op_el_and, octave_bool_matrix, octave_bool_matrix, el_and);
   INSTALL_BINOP (op_el_or, octave_bool_matrix, octave_bool_matrix, el_or);
diff --git a/src/OPERATORS/op-cm-cm.cc b/src/OPERATORS/op-cm-cm.cc
--- a/src/OPERATORS/op-cm-cm.cc
+++ b/src/OPERATORS/op-cm-cm.cc
@@ -35,16 +35,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov-typeinfo.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // unary complex matrix ops.
 
 DEFNDUNOP_OP (not, complex_matrix, complex_array, !)
+DEFNDUNOP_OP (uplus, complex_matrix, complex_array, /* no-op */)
 DEFNDUNOP_OP (uminus, complex_matrix, complex_array, -)
 
 DEFUNOP (transpose, complex_matrix)
 {
   CAST_UNOP_ARG (const octave_complex_matrix&);
 
   if (v.ndims () > 2)
     {
@@ -111,16 +112,17 @@ DEFNDBINOP_FN (el_or,  complex_matrix, c
 DEFNDCATOP_FN (cm_cm, complex_matrix, complex_matrix, complex_array, complex_array, concat)
 
 DEFNDASSIGNOP_FN (assign, complex_matrix, complex_matrix, complex_array, assign)
 
 void
 install_cm_cm_ops (void)
 {
   INSTALL_UNOP (op_not, octave_complex_matrix, not);
+  INSTALL_UNOP (op_uplus, octave_complex_matrix, uplus);
   INSTALL_UNOP (op_uminus, octave_complex_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_complex_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_complex_matrix, hermitian);
 
   INSTALL_NCUNOP (op_incr, octave_complex_matrix, incr);
   INSTALL_NCUNOP (op_decr, octave_complex_matrix, decr);
 
   INSTALL_BINOP (op_add, octave_complex_matrix, octave_complex_matrix, add);
diff --git a/src/OPERATORS/op-cs-cs.cc b/src/OPERATORS/op-cs-cs.cc
--- a/src/OPERATORS/op-cs-cs.cc
+++ b/src/OPERATORS/op-cs-cs.cc
@@ -42,16 +42,17 @@ Software Foundation, 59 Temple Place - S
 
 DEFUNOP (not, complex)
 {
   CAST_UNOP_ARG (const octave_complex&);
 
   return octave_value (v.complex_value () == 0.0);
 }
 
+DEFUNOP_OP (uplus, complex, /* no-op */)
 DEFUNOP_OP (uminus, complex, -)
 DEFUNOP_OP (transpose, complex, /* no-op */)
 
 DEFUNOP (hermitian, complex)
 {
   CAST_UNOP_ARG (const octave_complex&);
 
   return octave_value (conj (v.complex_value ()));
@@ -177,16 +178,17 @@ DEFBINOP (el_or, complex, complex)
 }
 
 DEFNDCATOP_FN (cs_cs, complex, complex, complex_array, complex_array, concat)
 
 void
 install_cs_cs_ops (void)
 {
   INSTALL_UNOP (op_not, octave_complex, not);
+  INSTALL_UNOP (op_uplus, octave_complex, uplus);
   INSTALL_UNOP (op_uminus, octave_complex, uminus);
   INSTALL_UNOP (op_transpose, octave_complex, transpose);
   INSTALL_UNOP (op_hermitian, octave_complex, hermitian);
 
   INSTALL_NCUNOP (op_incr, octave_complex, incr);
   INSTALL_NCUNOP (op_decr, octave_complex, decr);
 
   INSTALL_BINOP (op_add, octave_complex, octave_complex, add);
diff --git a/src/OPERATORS/op-int.h b/src/OPERATORS/op-int.h
--- a/src/OPERATORS/op-int.h
+++ b/src/OPERATORS/op-int.h
@@ -33,16 +33,17 @@ Software Foundation, 59 Temple Place - S
   INSTALL_CATOP (octave_ ## TYPE ## _scalar, octave_ ## TYPE ## _matrix, TYPE ## _s_m) \
   INSTALL_CATOP (octave_ ## TYPE ## _matrix, octave_ ## TYPE ## _scalar, TYPE ## _m_s) \
   INSTALL_CATOP (octave_ ## TYPE ## _matrix, octave_ ## TYPE ## _matrix, TYPE ## _m_m)
 
 #define OCTAVE_S_INT_UNOPS(TYPE) \
   /* scalar unary ops. */  \
  \
   DEFUNOP_OP (s_not, TYPE ## _scalar, !) \
+  DEFUNOP_OP (s_uplus, TYPE ## _scalar, /* no-op */) \
   DEFUNOP_OP (s_uminus, TYPE ## _scalar, -) \
   DEFUNOP_OP (s_transpose, TYPE ## _scalar, /* no-op */) \
   DEFUNOP_OP (s_hermitian, TYPE ## _scalar, /* no-op */) \
  \
   /* DEFNCUNOP_METHOD (s_incr, TYPE ## _scalar, increment) */ \
   /* DEFNCUNOP_METHOD (s_decr, TYPE ## _scalar, decrement) */
 
 #define OCTAVE_SS_INT_ARITH_OPS(PFX, T1, T2) \
@@ -341,16 +342,17 @@ octave_value elem_xpow (T1 ## NDArray a,
   OCTAVE_MS_INT_BOOL_OPS (mxs, , TYPE ## _) \
   OCTAVE_MS_INT_ASSIGN_OPS (ms, TYPE ## _, TYPE ## _, TYPE ## _) \
   OCTAVE_MS_INT_ASSIGN_OPS (mx, TYPE ## _, , )
 
 #define OCTAVE_M_INT_UNOPS(TYPE) \
   /* matrix unary ops. */ \
  \
   DEFNDUNOP_OP (m_not, TYPE ## _matrix, TYPE ## _array, !) \
+  DEFNDUNOP_OP (m_uplus, TYPE ## _matrix, TYPE ## _array, /* no-op */) \
   DEFNDUNOP_OP (m_uminus, TYPE ## _matrix, TYPE ## _array, -) \
  \
   DEFUNOP (m_transpose, TYPE ## _matrix) \
   { \
     CAST_UNOP_ARG (const octave_ ## TYPE ## _matrix&); \
  \
     if (v.ndims () > 2) \
       { \
@@ -468,16 +470,17 @@ octave_value elem_xpow (T1 ## NDArray a,
   OCTAVE_MS_INT_OPS (TYPE) \
   OCTAVE_MM_INT_OPS (TYPE) \
   OCTAVE_CONCAT_FN (TYPE) \
   OCTAVE_RE_INT_ASSIGN_OPS (TYPE) \
   OCTAVE_CX_INT_ASSIGN_OPS (TYPE)
 
 #define OCTAVE_INSTALL_S_INT_UNOPS(TYPE) \
   INSTALL_UNOP (op_not, octave_ ## TYPE ## _scalar, s_not); \
+  INSTALL_UNOP (op_uplus, octave_ ## TYPE ## _scalar, s_uplus); \
   INSTALL_UNOP (op_uminus, octave_ ## TYPE ## _scalar, s_uminus); \
   INSTALL_UNOP (op_transpose, octave_ ## TYPE ## _scalar, s_transpose); \
   INSTALL_UNOP (op_hermitian, octave_ ## TYPE ## _scalar, s_hermitian); \
  \
   /* INSTALL_NCUNOP (op_incr, octave_ ## TYPE ## _scalar, s_incr); */ \
   /* INSTALL_NCUNOP (op_decr, octave_ ## TYPE ## _scalar, s_decr); */
 
 #define OCTAVE_INSTALL_SS_INT_ARITH_OPS(PFX, T1, T2) \
@@ -611,16 +614,17 @@ octave_value elem_xpow (T1 ## NDArray a,
 
 #define OCTAVE_INSTALL_MS_INT_OPS2(T1, T2) \
   OCTAVE_INSTALL_MS_INT_ARITH_OPS (ms, T1, T2) \
   OCTAVE_INSTALL_MS_INT_CMP_OPS (ms, T1, T2) \
   OCTAVE_INSTALL_MS_INT_BOOL_OPS (ms, T1, T2)
 
 #define OCTAVE_INSTALL_M_INT_UNOPS(TYPE) \
   INSTALL_UNOP (op_not, octave_ ## TYPE ## _matrix, m_not); \
+  INSTALL_UNOP (op_uplus, octave_ ## TYPE ## _matrix, m_uplus); \
   INSTALL_UNOP (op_uminus, octave_ ## TYPE ## _matrix, m_uminus); \
   INSTALL_UNOP (op_transpose, octave_ ## TYPE ## _matrix, m_transpose); \
   INSTALL_UNOP (op_hermitian, octave_ ## TYPE ## _matrix, m_transpose); \
  \
   /* INSTALL_NCUNOP (op_incr, octave_ ## TYPE ## _matrix, m_incr); */ \
   /* INSTALL_NCUNOP (op_decr, octave_ ## TYPE ## _matrix, m_decr); */
 
 #define OCTAVE_INSTALL_MM_INT_ARITH_OPS(T1, T2) \
diff --git a/src/OPERATORS/op-m-m.cc b/src/OPERATORS/op-m-m.cc
--- a/src/OPERATORS/op-m-m.cc
+++ b/src/OPERATORS/op-m-m.cc
@@ -35,16 +35,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov-typeinfo.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // matrix unary ops.
 
 DEFNDUNOP_OP (not, matrix, array, !)
+DEFNDUNOP_OP (uplus, matrix, array, /* no-op */)
 DEFNDUNOP_OP (uminus, matrix, array, -)
 
 DEFUNOP (transpose, matrix)
 {
   CAST_UNOP_ARG (const octave_matrix&);
 
   if (v.ndims () > 2)
     {
@@ -98,16 +99,17 @@ DEFNDBINOP_FN (el_or,  matrix, matrix, a
 DEFNDCATOP_FN (m_m, matrix, matrix, array, array, concat)
 
 DEFNDASSIGNOP_FN (assign, matrix, matrix, array, assign)
 
 void
 install_m_m_ops (void)
 {
   INSTALL_UNOP (op_not, octave_matrix, not);
+  INSTALL_UNOP (op_uplus, octave_matrix, uplus);
   INSTALL_UNOP (op_uminus, octave_matrix, uminus);
   INSTALL_UNOP (op_transpose, octave_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_matrix, transpose);
 
   INSTALL_NCUNOP (op_incr, octave_matrix, incr);
   INSTALL_NCUNOP (op_decr, octave_matrix, decr);
 
   INSTALL_BINOP (op_add, octave_matrix, octave_matrix, add);
diff --git a/src/OPERATORS/op-range.cc b/src/OPERATORS/op-range.cc
--- a/src/OPERATORS/op-range.cc
+++ b/src/OPERATORS/op-range.cc
@@ -46,16 +46,17 @@ Software Foundation, 59 Temple Place - S
 
 DEFUNOP (not, range)
 {
   CAST_UNOP_ARG (const octave_range&);
 
   return octave_value (! v.matrix_value());
 }
 
+DEFUNOP_OP (uplus, range, /* no-op */)
 DEFUNOP_OP (uminus, range, -)
 
 DEFUNOP (transpose, range)
 {
   CAST_UNOP_ARG (const octave_range&);
 
   return octave_value (v.matrix_value().transpose ());
 }
@@ -75,16 +76,17 @@ DEFNDCATOP_FN (cm_r, complex_matrix, ran
 DEFNDCATOP_FN (b_r, bool, range, array, array, concat)
 DEFNDCATOP_FN (bm_r, bool_matrix, range, array, array, concat)
 DEFNDCATOP_FN (chm_r, char_matrix, range, char_array, array, concat)
 
 void
 install_range_ops (void)
 {
   INSTALL_UNOP (op_not, octave_range, not);
+  INSTALL_UNOP (op_uplus, octave_range, uplus);
   INSTALL_UNOP (op_uminus, octave_range, uminus);
   INSTALL_UNOP (op_transpose, octave_range, transpose);
   INSTALL_UNOP (op_hermitian, octave_range, transpose);
 
   INSTALL_CATOP (octave_range, octave_range, r_r);
   INSTALL_CATOP (octave_range, octave_scalar, r_s);
   INSTALL_CATOP (octave_range, octave_matrix, r_m);
   INSTALL_CATOP (octave_range, octave_complex, r_cs);
diff --git a/src/OPERATORS/op-s-s.cc b/src/OPERATORS/op-s-s.cc
--- a/src/OPERATORS/op-s-s.cc
+++ b/src/OPERATORS/op-s-s.cc
@@ -36,16 +36,17 @@ Software Foundation, 59 Temple Place - S
 #include "ov-typeinfo.h"
 #include "ops.h"
 #include "xdiv.h"
 #include "xpow.h"
 
 // scalar unary ops.
 
 DEFUNOP_OP (not, scalar, !)
+DEFUNOP_OP (uplus, scalar, /* no-op */)
 DEFUNOP_OP (uminus, scalar, -)
 DEFUNOP_OP (transpose, scalar, /* no-op */)
 DEFUNOP_OP (hermitian, scalar, /* no-op */)
 
 DEFNCUNOP_METHOD (incr, scalar, increment)
 DEFNCUNOP_METHOD (decr, scalar, decrement)
 
 // scalar by scalar ops.
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -129,16 +129,20 @@ octave_value::unary_op_as_string (unary_
   std::string retval;
 
   switch (op)
     {
     case op_not:
       retval = "!";
       break;
 
+    case op_uplus:
+      retval = "+";
+      break;
+
     case op_uminus:
       retval = "-";
       break;
 
     case op_transpose:
       retval = ".'";
       break;
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -95,16 +95,17 @@ typedef octave_value * (*type_conv_fcn) 
 class
 octave_value
 {
 public:
 
   enum unary_op
   {
     op_not,
+    op_uplus,
     op_uminus,
     op_transpose,
     op_hermitian,
     op_incr,
     op_decr,
     num_unary_ops,
     unknown_unary_op
   };
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -799,17 +799,17 @@ prefix_expr	: postfix_expr begin_obj_idx
 		  { $$ = $1; }
 		| PLUS_PLUS prefix_expr %prec UNARY
 		  { $$ = make_prefix_op (PLUS_PLUS, $2, $1); }
 		| MINUS_MINUS prefix_expr %prec UNARY
 		  { $$ = make_prefix_op (MINUS_MINUS, $2, $1); }
 		| EXPR_NOT prefix_expr %prec UNARY
 		  { $$ = make_prefix_op (EXPR_NOT, $2, $1); }
 		| '+' prefix_expr %prec UNARY
-		  { $$ = $2; }
+		  { $$ = make_prefix_op ('+', $2, $1); }
 		| '-' prefix_expr %prec UNARY
 		  { $$ = make_prefix_op ('-', $2, $1); }
 		;
 
 binary_expr	: prefix_expr POW prefix_expr
 		  { $$ = make_binary_op (POW, $1, $2, $3); }
 		| prefix_expr EPOW prefix_expr
 		  { $$ = make_binary_op (EPOW, $1, $2, $3); }
@@ -2212,16 +2212,20 @@ make_prefix_op (int op, tree_expression 
   octave_value::unary_op t = octave_value::unknown_unary_op;
 
   switch (op)
     {
     case EXPR_NOT:
       t = octave_value::op_not;
       break;
 
+    case '+':
+      t = octave_value::op_uplus;
+      break;
+
     case '-':
       t = octave_value::op_uminus;
       break;
 
     case PLUS_PLUS:
       t = octave_value::op_incr;
       break;
 
diff --git a/src/version.h b/src/version.h
--- a/src/version.h
+++ b/src/version.h
@@ -20,17 +20,17 @@ Software Foundation, 59 Temple Place - S
 
 */
 
 #if !defined (octave_version_h)
 #define octave_version_h 1
 
 #define OCTAVE_VERSION "2.1.58"
 
-#define OCTAVE_API_VERSION "api-v9"
+#define OCTAVE_API_VERSION "api-v10"
 
 #define OCTAVE_COPYRIGHT \
   "Copyright (C) 2004 John W. Eaton."
 
 #define OCTAVE_NAME_AND_VERSION \
   "GNU Octave, version " OCTAVE_VERSION " (" OCTAVE_CANONICAL_HOST_TYPE ")"
 
 #define OCTAVE_COPYING_STATEMENT \
