# HG changeset patch
# User jwe
# Date 1091762233 0
#      Fri Aug 06 03:17:13 2004 +0000
# Node ID 4fc993a4e0726a90e634549537195c74bc62d43f
# Parent  ca6c86504105969532d1e21b5ebdf037cd2415e8
[project @ 2004-08-06 03:17:12 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2004-08-05  John W. Eaton  <jwe@octave.org>
+
+	* pt-stmt.h (tree_statement::set_command,
+	(tree_statement::set_expression): New functions.
+
+	* parse.y (param_list_beg): Handle pushing new symbol table
+	context for anonymous function handle parameter lists here.
+	(anon_fcn_handle): New non-terminal.
+	(expression): Include anon_fcn_handle here.
+	(make_anon_fcn_handle): New static function.
+
 2004-08-05  David Bateman  <dbateman@free.fr>
 
 	* ov.cc (octave_value::fcn_inline_value): New virtual function.
 	* ov.h (octave_value::fcn_inline_value): Provide decl.
 	* ov-base.cc (octave_base_value::fcn_inline_value): New function
 	* ov-base.h (octave_base_value::fcn_inline_value): Provide decl.
 	* ov-fcn-handle.cc (octave_fcn_handle::octave_fcn_handle 
 	(const std::string&, const string_vector&, const std::string&),
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -497,17 +497,17 @@ bin-dist:
 # Special rules -- these files need special things to be defined.
 
 $(OPT_HANDLERS) : %.cc : $(top_srcdir)/liboctave/%.in $(top_srcdir)/mk-opts.pl
 	@echo making $@ from $<
 	@perl $(top_srcdir)/mk-opts.pl --opt-handler-fcns $< > $@-t
 	@$(top_srcdir)/move-if-change $@-t $@
 
 parse.cc : parse.y
-	@echo "expect 11 shift/reduce conflicts"
+	@echo "expect 87 shift/reduce conflicts"
 	$(YACC) $(YFLAGS) $<
 	@$(top_srcdir)/move-if-change y.tab.c $(@F)
 
 lex.cc : lex.l
 	$(LEX) $(LFLAGS) $< > $(@F)
 
 defaults.h: defaults.h.in ../Makeconf Makefile
 	@$(do-subst-default-vals)
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -141,17 +141,22 @@ Return a struct containing information a
 	      if (fcn->is_nested_function ())
 		m.assign ("type", "subfunction");
 	      else
 		m.assign ("type", "simple");
 
 	      std::string nm = fcn->fcn_file_name ();
 
 	      if (nm.empty ())
-		m.assign ("file", "built-in function");
+		{
+		  if (fh_nm == "@<anonymous>")
+		    m.assign ("file", "none");
+		  else
+		    m.assign ("file", "built-in function");
+		}
 	      else
 		m.assign ("file", nm);
 
 	      retval = m;
 	    }
 	  else
 	    error ("functions: invalid function handle object");
 	}
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -53,16 +53,17 @@ Software Foundation, 59 Temple Place - S
 #include "defaults.h"
 #include "defun.h"
 #include "dirfns.h"
 #include "dynamic-ld.h"
 #include "error.h"
 #include "input.h"
 #include "lex.h"
 #include "oct-hist.h"
+#include "ov-fcn-handle.h"
 #include "ov-usr-fcn.h"
 #include "toplev.h"
 #include "pager.h"
 #include "parse.h"
 #include "pt-all.h"
 #include "symtab.h"
 #include "token.h"
 #include "unwind-prot.h"
@@ -178,16 +179,20 @@ finish_colon_expression (tree_colon_expr
 // Build a constant.
 static tree_constant *
 make_constant (int op, token *tok_val);
 
 // Build a function handle.
 static tree_fcn_handle *
 make_fcn_handle (token *tok_val);
 
+// Build an anonymous function handle.
+static tree_constant *
+make_anon_fcn_handle (tree_parameter_list *param_list, tree_statement *stmt);
+
 // Build a binary expression.
 static tree_expression *
 make_binary_op (int op, tree_expression *op1, token *tok_val,
 		tree_expression *op2);
 
 // Build a boolean expression.
 static tree_expression *
 make_boolean_op (int op, tree_expression *op1, token *tok_val,
@@ -427,30 +432,30 @@ set_stmt_print_flag (tree_statement_list
 %token END_OF_INPUT LEXICAL_ERROR
 %token FCN VARARGIN VARARGOUT ALL_VA_ARGS
 %token USING TITLE WITH AXES COLON OPEN_BRACE CLOSE_BRACE CLEAR
 
 // Nonterminals we construct.
 %type <comment_type> stash_comment function_beg
 %type <sep_type> sep_no_nl opt_sep_no_nl sep opt_sep
 %type <tree_type> input
-%type <tree_constant_type> constant magic_colon
+%type <tree_constant_type> constant magic_colon anon_fcn_handle
 %type <tree_fcn_handle_type> fcn_handle
 %type <tree_matrix_type> matrix_rows matrix_rows1
 %type <tree_cell_type> cell_rows cell_rows1
 %type <tree_expression_type> title matrix cell
 %type <tree_expression_type> primary_expr postfix_expr prefix_expr binary_expr
 %type <tree_expression_type> simple_expr colon_expr assign_expr expression
 %type <tree_identifier_type> identifier fcn_name
 %type <octave_user_function_type> function1 function2 function3
 %type <tree_index_expression_type> word_list_cmd
 %type <tree_colon_expression_type> colon_expr1
 %type <tree_argument_list_type> arg_list word_list assign_lhs
 %type <tree_argument_list_type> cell_or_matrix_row
-%type <tree_parameter_list_type> param_list param_list1
+%type <tree_parameter_list_type> param_list param_list1 param_list2
 %type <tree_parameter_list_type> return_list return_list1
 %type <tree_command_type> command select_command loop_command
 %type <tree_command_type> jump_command except_command function
 %type <tree_if_command_type> if_command
 %type <tree_if_clause_type> elseif_clause else_clause
 %type <tree_if_command_list_type> if_cmd_list1 if_cmd_list
 %type <tree_switch_command_type> switch_command
 %type <tree_switch_case_type> switch_case default_case
@@ -674,18 +679,18 @@ cell_or_matrix_row
 
 fcn_handle	: '@' FCN_HANDLE
 		  {
 		    $$ = make_fcn_handle ($2);
 		    lexer_flags.looking_at_function_handle--;
 		  }
 		;
 
-fcn_handle	: FCN_HANDLE
-		  { $$ = make_fcn_handle ($1); }
+anon_fcn_handle	: '@' param_list statement
+		  { $$ = make_anon_fcn_handle ($2, $3); }
 		;
 
 primary_expr	: identifier
 		  { $$ = $1; }
 		| constant
 		  { $$ = $1; }
 		| fcn_handle
 		  { $$ = $1; }
@@ -933,16 +938,18 @@ word_list	: STRING
 		;
 
 expression	: simple_expr
 		  { $$ = $1; }
 		| word_list_cmd
 		  { $$ = $1; }
 		| assign_expr
 		  { $$ = $1; }
+		| anon_fcn_handle
+		  { $$ = $1; }
 		;
 
 // ================================================
 // Commands, declarations, and function definitions
 // ================================================
 
 command		: declaration
 		  { $$ = $1; }
@@ -1155,68 +1162,75 @@ in_return_list	: // empty
 		  { lexer_flags.looking_at_return_list = true; }
 		;
 
 // ===========================
 // List of function parameters
 // ===========================
 
 param_list_beg	: '('
-		  { lexer_flags.looking_at_parameter_list = true; }
+		  {
+		    lexer_flags.looking_at_parameter_list = true;
+
+		    if (lexer_flags.looking_at_function_handle)
+		      {
+		        symtab_context.push (curr_sym_tab);
+
+			tmp_local_sym_tab = new symbol_table ();
+			curr_sym_tab = tmp_local_sym_tab;
+
+			lexer_flags.looking_at_function_handle--;
+		      }
+		  }
 		;
 
 param_list_end	: ')'
 		  { lexer_flags.looking_at_parameter_list = false; }
 		;
 
-param_list	: param_list_beg param_list_end
-		  {
-		    lexer_flags.quote_is_transpose = false;
-		    $$ = 0;
-		  }
-		| param_list_beg VARARGIN param_list_end
-		  {
-		    lexer_flags.quote_is_transpose = false;
-		    tree_parameter_list *tmp = new tree_parameter_list ();
-		    tmp->mark_varargs_only ();
-		    $$ = tmp;
-		  }
-		| param_list1 param_list_end
+param_list	: param_list_beg param_list1 param_list_end
 		  {
 		    lexer_flags.quote_is_transpose = false;
-		    $1->mark_as_formal_parameters ();
-		    $$ = $1;
-		  }
-		| param_list1 ',' VARARGIN param_list_end
-		  {
-		    lexer_flags.quote_is_transpose = false;
-		    $1->mark_as_formal_parameters ();
-		    $1->mark_varargs ();
-		    $$ = $1;
-		  }
-		;
-
-param_list1	: param_list_beg identifier
-		  { $$ = new tree_parameter_list ($2); }
-		| param_list1 ',' identifier
-		  {
-		    $1->append ($3);
-		    $$ = $1;
+		    $$ = $2;
 		  }
 		| param_list_beg error
 		  {
 		    yyerror ("invalid parameter list");
 		    $$ = 0;
 		    ABORT_PARSE;
 		  }
-		| param_list1 ',' error
+		;
+
+param_list1	: // empty
+		  { $$ = 0; }
+		| param_list2
+		  {
+		    $1->mark_as_formal_parameters ();
+		    $$ = $1;
+		  }
+		| VARARGIN
 		  {
-		    yyerror ("invalid parameter list");
-		    $$ = 0;
-		    ABORT_PARSE;
+		    tree_parameter_list *tmp = new tree_parameter_list ();
+		    tmp->mark_varargs_only ();
+		    $$ = tmp;
+		  }
+		| param_list2 ',' VARARGIN
+		  {
+		    $1->mark_as_formal_parameters ();
+		    $1->mark_varargs ();
+		    $$ = $1;
+		  }
+		;
+
+param_list2	: identifier
+		  { $$ = new tree_parameter_list ($1); }
+		| param_list2 ',' identifier
+		  {
+		    $1->append ($3);
+		    $$ = $1;
 		  }
 		;
 
 // ===================================
 // List of function return value names
 // ===================================
 
 return_list_beg	: '[' in_return_list local_symtab
@@ -1976,16 +1990,71 @@ make_fcn_handle (token *tok_val)
   int l = tok_val->line ();
   int c = tok_val->column ();
 
   tree_fcn_handle *retval = new tree_fcn_handle (tok_val->text (), l, c);
 
   return retval;
 }
 
+// Make an anonymous function handle.
+
+static tree_constant *
+make_anon_fcn_handle (tree_parameter_list *param_list, tree_statement *stmt)
+{
+  // XXX FIXME XXX -- need to get these from the location of the @ symbol.
+
+  int l = -1;
+  int c = -1;
+
+  tree_parameter_list *ret_list = 0;
+
+  if (stmt && stmt->is_expression ())
+    {
+      symbol_record *sr = curr_sym_tab->lookup ("__retval__", true);
+
+      tree_expression *e = stmt->expression ();
+
+      tree_identifier *id = new tree_identifier (sr);
+
+      tree_simple_assignment *asn = new tree_simple_assignment (id, e);
+
+      stmt->set_expression (asn);
+
+      stmt->set_print_flag (false);
+
+      // XXX FIXME XXX -- would like to delete old_stmt here or
+      // replace expression inside it with the new expression we just
+      // created so we don't have to create a new statement at all.
+
+      id = new tree_identifier (sr);
+
+      ret_list = new tree_parameter_list (id);
+    }
+
+  tree_statement_list *body = new tree_statement_list (stmt);
+
+  body->mark_as_function_body ();
+
+  octave_user_function *fcn
+    = new octave_user_function (param_list, ret_list, body, curr_sym_tab);
+
+  if (symtab_context.empty ())
+    panic_impossible ();
+
+  curr_sym_tab = symtab_context.top ();
+  symtab_context.pop ();
+
+  octave_value fh (new octave_fcn_handle (fcn, "@<anonymous>"));
+
+  tree_constant *retval = new tree_constant (fh, l, c);
+
+  return retval;
+}
+
 // Build a binary expression.
 
 static tree_expression *
 make_binary_op (int op, tree_expression *op1, token *tok_val,
 		tree_expression *op2)
 {
   octave_value::binary_op t = octave_value::unknown_binary_op;
 
diff --git a/src/pt-stmt.h b/src/pt-stmt.h
--- a/src/pt-stmt.h
+++ b/src/pt-stmt.h
@@ -72,16 +72,24 @@ public:
   tree_command *command (void) { return cmd; }
 
   octave_value_list eval (bool silent, int nargout, bool in_function_body);
 
   tree_expression *expression (void) { return expr; }
 
   octave_comment_list *comment_text (void) { return comm; }
 
+  // Allow modification of this statement.  Note that there is no
+  // checking.  If you use these, are you sure you knwo what you are
+  // doing?
+
+  void set_command (tree_command *c) { cmd = c; }
+
+  void set_expression (tree_expression *e) { expr = e; }
+
   void accept (tree_walker& tw);
 
 private:
 
   // Only one of cmd or expr can be valid at once.
 
   // Command to execute.
   tree_command *cmd;
