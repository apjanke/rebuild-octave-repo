# HG changeset patch
# User jwe
# Date 791525835 0
#      Tue Jan 31 04:17:15 1995 +0000
# Node ID 75fc9822038987405f40d51d2a358751239358fe
# Parent  9f51d8b235ab2bd8d90ca87da16b50a892c9d0c3
[project @ 1995-01-31 04:17:15 by jwe]

diff --git a/src/colloc.cc b/src/colloc.cc
--- a/src/colloc.cc
+++ b/src/colloc.cc
@@ -52,16 +52,22 @@ DEFUN_DLD_BUILTIN ("colloc", Fcolloc, Sc
       return retval;
     }
 
   double tmp = args(0).double_value ();
 
   if (error_state)
     return retval;
 
+  if (xisnan (tmp))
+    {
+      error ("colloc: NaN is invalid as NCOL");
+      return retval;
+    }
+
   int ncol = NINT (tmp);
   if (ncol < 0)
     {
       error ("colloc: first argument must be non-negative");
       return retval;
     }
 
   int ntot = ncol;
diff --git a/src/fft.cc b/src/fft.cc
--- a/src/fft.cc
+++ b/src/fft.cc
@@ -53,17 +53,23 @@ DEFUN_DLD_BUILTIN ("fft", Ffft, Sfft, 3,
 
   tree_constant arg = args(0);
 
   int n_points = arg.rows ();
   if (n_points == 1)
     n_points = arg.columns ();
 
   if (nargin == 2)
-    n_points = NINT (args(1).double_value ());
+    {
+      double dval = args(1).double_value ();
+      if (xisnan (dval))
+	error ("fft: NaN is invalid as the N_POINTS");
+      else
+	n_points = NINT (dval);
+    }
 
   if (error_state)
     return retval;
 
   if (n_points < 0)
     {
       error ("fft: number of points must be greater than zero");
       return retval;
diff --git a/src/fft2.cc b/src/fft2.cc
--- a/src/fft2.cc
+++ b/src/fft2.cc
@@ -52,24 +52,36 @@ two dimensional fast fourier transform o
       print_usage ("fft2");
       return retval;
     }
 
   tree_constant arg = args(0);
 
   int n_rows = arg.rows ();
   if (nargin > 1)
-    n_rows = NINT (args(1).double_value ());
+    {
+      double dval = args(1).double_value ();
+      if (xisnan (dval))
+	error ("fft2: NaN is invalid as N_ROWS");
+      else
+	n_rows = NINT (dval);
+    }
 
   if (error_state)
     return retval;
 
   int n_cols = arg.columns ();
   if (nargin > 2)
-    n_cols = NINT (args(2).double_value ());
+    {
+      double dval = args(2).double_value ();
+      if (xisnan (dval))
+	error ("fft2: NaN is invalid as N_COLS");
+      else
+	n_cols = NINT (dval);
+    }
 
   if (error_state)
     return retval;
 
   if (n_rows < 0 || n_cols < 0)
     {
       error ("fft2: number of points must be greater than zero");
       return retval;
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -160,17 +160,17 @@ return_valid_file (const tree_constant& 
 	}
     }
   else
     {
       double file_num = arg.double_value ();
 
       if (! error_state)
 	{
-	  if ((double) NINT (file_num) != file_num)
+	  if (D_NINT (file_num) != file_num)
 	    error ("file number not an integer value");
 	  else
 	    {
 	      Pix p = file_list.first ();
 	      file_info file;
 	      int file_count = file_list.length ();
 	      for (int i = 0; i < file_count; i++)
 		{
@@ -393,16 +393,22 @@ fgets_internal (const Octave_object& arg
     return retval;
 
 
   double dlen = args(1).double_value ();
 
   if (error_state)
     return retval;
 
+  if (xisnan (dlen))
+    {
+      error ("fgets: NaN invalid as length");
+      return retval;
+    }
+
   int length = NINT (dlen);
 
   if ((double) length != dlen)
     {
       error ("fgets: length not an integer value");
       return retval;
     }
 
@@ -615,31 +621,43 @@ fseek_internal (const Octave_object& arg
 
   long origin = SEEK_SET;
 
   double doff = args(1).double_value ();
 
   if (error_state)
     return retval;
 
+  if (xisnan (doff))
+    {
+      error ("fseek: NaN invalid as offset");
+      return retval;
+    }
+
   long offset = NINT (doff);
 
   if ((double) offset != doff)
     {
       error ("fseek: offset not an integer value");
       return retval;
     }
 
   if (nargin == 3)
     {
       double dorig = args(2).double_value ();
 
       if (error_state)
 	return retval;
 
+      if (xisnan (dorig))
+	{
+	  error ("fseek: NaN invalid as origin");
+	  return retval;
+	}
+
       origin = NINT (dorig);
 
       if ((double) dorig != origin)
 	{
 	  error ("fseek: origin not an integer value");
 	  return retval;
 	}
 
@@ -769,17 +787,17 @@ process_printf_format (const char *s, co
       if (fmt_arg_count > nargin)
 	{
 	  error ("%s: not enough arguments", type);
 	  return -1;
 	}
 
       double tmp_len = args(fmt_arg_count++).double_value ();
 
-      if (error_state)
+      if (error_state || xisnan (tmp_len))
 	{
 	  error ("%s: `*' must be replaced by an integer", type);
 	  return -1;
 	}
 
       fmt << NINT (tmp_len);
       s++;
       chars_from_fmt_str++;
@@ -810,17 +828,17 @@ process_printf_format (const char *s, co
       if (fmt_arg_count > nargin)
 	{
 	  error ("%s: not enough arguments", type);
 	  return -1;
 	}
 
       double tmp_len = args(fmt_arg_count++).double_value ();
 
-      if (error_state)
+      if (error_state || xisnan (tmp_len))
 	{
 	  error ("%s: `*' must be replaced by an integer", type);
 	  return -1;
 	}
 
       fmt << NINT (tmp_len);
       s++;
       chars_from_fmt_str++;
@@ -853,19 +871,22 @@ process_printf_format (const char *s, co
     }
 
   switch (*s)
     {
     case 'd': case 'i': case 'o': case 'u': case 'x': case 'X':
       {
 	double d = args(fmt_arg_count++).double_value ();
 
+	if (error_state || xisnan (d))
+	  goto invalid_conversion;
+
 	int val = NINT (d);
 
-	if (error_state || (double) val != d)
+	if ((double) val != d)
 	  goto invalid_conversion;
 	else
 	  {
 	    chars_from_fmt_str++;
 	    fmt << *s << ends;
 	    char *tmp_fmt = fmt.str ();
 	    sb.form (tmp_fmt, val);
 	    delete [] tmp_fmt;
@@ -1613,34 +1634,63 @@ fread_internal (const Octave_object& arg
       if ((xisinf (dnr)) && (xisinf (dnc)))
 	{
 	  error ("fread: number of rows and columns cannot both be infinite");
 	  return retval;
 	}
 
       if (xisinf (dnr))
 	{
-	  nc = NINT (dnc);
-	  int n = num_items_remaining (fptr, prec);
-	  nr = n / nc;
-	  if (n > nr * nc)
-	    nr++;
+	  if (xisnan (dnc))
+	    {
+	      error ("fread: NaN invalid as the number of columns");
+	      return retval;
+	    }
+	  else
+	    {
+	      nc = NINT (dnc);
+	      int n = num_items_remaining (fptr, prec);
+	      nr = n / nc;
+	      if (n > nr * nc)
+		nr++;
+	    }
 	}
       else if (xisinf (dnc))
 	{
-	  nr = NINT (dnr);
-	  int n = num_items_remaining (fptr, prec);
-	  nc = n / nr;
-	  if (n > nc * nr)
-	    nc++;
+	  if (xisnan (dnr))
+	    {
+	      error ("fread: NaN invalid as the number of rows");
+	      return retval;
+	    }
+	  else
+	    {
+	      nr = NINT (dnr);
+	      int n = num_items_remaining (fptr, prec);
+	      nc = n / nr;
+	      if (n > nc * nr)
+		nc++;
+	    }
 	}
       else
 	{
-	  nr = NINT (dnr);
-	  nc = NINT (dnc);
+	  if (xisnan (dnr))
+	    {
+	      error ("fread: NaN invalid as the number of rows");
+	      return retval;
+	    }
+	  else
+	    nr = NINT (dnr);
+
+	  if (xisnan (dnc))
+	    {
+	      error ("fread: NaN invalid as the number of columns");
+	      return retval;
+	    }
+	  else
+	    nc = NINT (dnc);
 	}
     }
   else
     {
 // No size parameter, read what's left of the file.
       nc = 1;
       int n = num_items_remaining (fptr, prec);
       nr = n / nc;
diff --git a/src/ifft.cc b/src/ifft.cc
--- a/src/ifft.cc
+++ b/src/ifft.cc
@@ -53,17 +53,23 @@ DEFUN_DLD_BUILTIN ("ifft", Fifft, Sifft,
 
   tree_constant arg = args(0);
     
   int n_points = arg.rows ();
   if (n_points == 1)
     n_points = arg.columns ();
 
   if (nargin == 2)
-    n_points = NINT (args(1).double_value ());
+    {
+      double dval = args(1).double_value ();
+      if (xisnan (dval))
+	error ("fft: NaN is invalid as the N_POINTS");
+      else
+	n_points = NINT (dval);
+    }
 
   if (error_state)
     return retval;
 
   if (n_points < 0)
     {
       error ("ifft: number of points must be greater than zero");
       return retval;
diff --git a/src/ifft2.cc b/src/ifft2.cc
--- a/src/ifft2.cc
+++ b/src/ifft2.cc
@@ -52,24 +52,36 @@ two dimensional inverse fast fourier tra
       print_usage ("ifft2");
       return retval;
     }
 
   tree_constant arg = args(0);
 
   int n_rows = arg.rows ();
   if (nargin > 1)
-    n_rows = NINT (args(1).double_value ());
+    {
+      double dval = args(1).double_value ();
+      if (xisnan (dval))
+	error ("fft2: NaN is invalid as N_ROWS");
+      else
+	n_rows = NINT (dval);
+    }
 
   if (error_state)
     return retval;
 
   int n_cols = arg.columns ();
   if (nargin > 2)
-    n_cols = NINT (args(2).double_value ());
+    {
+      double dval = args(2).double_value ();
+      if (xisnan (dval))
+	error ("fft2: NaN is invalid as N_COLS");
+      else
+	n_cols = NINT (dval);
+    }
 
   if (error_state)
     return retval;
 
   if (n_rows < 0 || n_cols < 0)
     {
       error ("ifft2: number of points must be greater than zero");
       return retval;
diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -724,18 +724,25 @@ do_npsol_option (char *keyword, double v
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
 	  if (list->d_set_fcn)
 	    (npsol_opts.*list->d_set_fcn) (val);
 	  else
-	    (npsol_opts.*list->i_set_fcn) (NINT (val));
-
+	    {
+	      if (xisnan (val))
+		{
+		  error ("npsol_options: %s: expecting integer, found NaN",
+			 keyword);
+		}
+	      else
+		(npsol_opts.*list->i_set_fcn) (NINT (val));
+	    }
 	  return;
 	}
       list++;
     }
 
   warning ("npsol_options: no match for `%s'", keyword);
 }
 
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -662,17 +662,18 @@ static int
 all_elements_are_ints (const Range& r)
 {
 // If the base and increment are ints, the final value in the range
 // will also be an integer, even if the limit is not.
 
   double b = r.base ();
   double i = r.inc ();
 
-  return ((double) NINT (b) == b && (double) NINT (i) == i);
+  return (! (xisnan (b) || xisnan (i))
+	  && (double) NINT (b) == b && (double) NINT (i) == i);
 }
 
 static inline void
 set_format (const ComplexMatrix& cm)
 {
   int r_fw, i_fw;
   set_format (cm, r_fw, i_fw);
 }
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -558,17 +558,24 @@ subplot_using::eval (int ndim, int n_max
 	  double val_tmp;
 	  if (tmp.is_defined ())
 	    {
 	      val_tmp = tmp.double_value ();
 
 	      if (error_state)
 		return -1;
 
+	      if (xisnan (val_tmp))
+		{
+		  ::error ("NaN is invalid as a column specifier");
+		  return -1;
+		}
+
 	      int n = NINT (val_tmp);
+
 	      if (n < 1 || n_max > 0 && n > n_max)
 		{
 		  ::error ("using: column %d out of range", n); 
 		  return -1;
 		}
 	      else
 		val.elem (i) = n;
 	    }
@@ -677,32 +684,44 @@ subplot_style::print (ostrstream& plot_b
       plot_buf << " " << GNUPLOT_COMMAND_WITH << " " << style;
 
       if (linetype)
 	{
 	  tree_constant tmp = linetype->eval (0);
 	  if (! error_state && tmp.is_defined ())
 	    {
 	      double val = tmp.double_value ();
-	      plot_buf << " " << NINT (val);
+	      if (xisnan (val))
+		{
+		  ::error ("NaN is invalid a plotting line style");
+		  return -1;
+		}
+	      else
+		plot_buf << " " << NINT (val);
 	    }
 	  else
 	    {
 	      ::error ("evaluating plot style command");
 	      return -1;
 	    }
 	}
 
       if (pointtype)
 	{
 	  tree_constant tmp = pointtype->eval (0);
 	  if (! error_state && tmp.is_defined ())
 	    {
 	      double val = tmp.double_value ();
-	      plot_buf << " " << NINT (val);
+	      if (xisnan (val))
+		{
+		  ::error ("NaN is invalid a plotting point style");
+		  return -1;
+		}
+	      else
+		plot_buf << " " << NINT (val);
 	    }
 	  else
 	    {
 	      ::error ("evaluating plot style command");
 	      return -1;
 	    }
 	}
     }
diff --git a/src/qpsol.cc b/src/qpsol.cc
--- a/src/qpsol.cc
+++ b/src/qpsol.cc
@@ -334,18 +334,25 @@ do_qpsol_option (char *keyword, double v
   while (list->keyword != 0)
     {
       if (keyword_almost_match (list->kw_tok, list->min_len, keyword,
 				list->min_toks_to_match, MAX_TOKENS))
 	{
 	  if (list->d_set_fcn)
 	    (qpsol_opts.*list->d_set_fcn) (val);
 	  else
-	    (qpsol_opts.*list->i_set_fcn) (NINT (val));
-
+	    {
+	      if (xisnan (val))
+		{
+		  error ("qpsol_options: %s: expecting integer, found NaN",
+			 keyword);
+		}
+	      else
+		(qpsol_opts.*list->i_set_fcn) (NINT (val));
+	    }
 	  return;
 	}
       list++;
     }
 
   warning ("qpsol_options: no match for `%s'", keyword);
 }
 
diff --git a/src/rand.cc b/src/rand.cc
--- a/src/rand.cc
+++ b/src/rand.cc
@@ -180,32 +180,41 @@ rand (SEED, N)        -- set seed")
 	    current_distribution = uniform;
 	  else if (strcmp (s_arg, "normal") == 0)
 	    current_distribution = normal;
 	  else
 	    error ("rand: unrecognized string argument");
 	}
       else if (tmp.is_scalar_type ())
 	{
-	  m = n = NINT (tmp.double_value ());
+	  double dval = tmp.double_value ();
 
-	  if (! error_state)
-	    goto gen_matrix;
+	  if (xisnan (dval))
+	    {
+	      error ("rand: NaN is invalid a matrix dimension");
+	    }
+	  else
+	    {
+	      m = n = NINT (tmp.double_value ());
+
+	      if (! error_state)
+		goto gen_matrix;
+	    }
 	}
       else if (tmp.is_range ())
 	{
 	  Range r = tmp.range_value ();
 	  n = 1;
-	  m = NINT (r.nelem ());
+	  m = r.nelem ();
 	  goto gen_matrix;
 	}
       else if (tmp.is_matrix_type ())
 	{
-	  n = NINT (args(0).rows ());
-	  m = NINT (args(0).columns ());
+	  n = args(0).rows ();
+	  m = args(0).columns ();
 	  goto gen_matrix;
 	}
       else
 	{
 	  gripe_wrong_type_arg ("rand", tmp);
 	  return retval;
 	}
     }
@@ -216,24 +225,33 @@ rand (SEED, N)        -- set seed")
 	{
 	  double d = args(1).double_value ();
 
 	  if (! error_state)
 	    set_rand_seed (d);
 	}
       else
 	{
-	  n = NINT (args(0).double_value ());
+	  double dval = args(0).double_value ();
 
-	  if (! error_state)
+	  if (xisnan (dval))
 	    {
-	      m = NINT (args(1).double_value ());
+	      error ("rand: NaN is invalid as a matrix dimension");
+	    }
+	  else
+	    {
+	      n = NINT (dval);
 
 	      if (! error_state)
-		goto gen_matrix;
+		{
+		  m = NINT (args(1).double_value ());
+
+		  if (! error_state)
+		    goto gen_matrix;
+		}
 	    }
 	}
     }
 
   return retval;
 
  gen_matrix:
 
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -450,19 +450,24 @@ DEFUN ("pause", Fpause, Spause, 1, 1,
       switch (nargin)
 	{
 	case 1:
 	  {
 	    double dval = args(0).double_value ();
 
 	    if (! error_state)
 	      {
-		int delay = NINT (dval);
-		if (delay > 0)
-		  sleep (delay);
+		if (xisnan (dval))
+		  warning ("pause: NaN is an invalid delay");
+		else
+		  {
+		    int delay = NINT (dval);
+		    if (delay > 0)
+		      sleep (delay);
+		  }
 	      }
 	  }
 	  break;
 
 	default:
 	  if (kbhit () == EOF)
 	    clean_up_and_exit (0);
 	  break;
diff --git a/src/tc-rep-ass.cc b/src/tc-rep-ass.cc
--- a/src/tc-rep-ass.cc
+++ b/src/tc-rep-ass.cc
@@ -352,17 +352,25 @@ TC_REP::fortran_style_matrix_assignment 
   int rhs_nr = rhs.rows ();
   int rhs_nc = rhs.columns ();
 
   switch (itype)
     {
     case complex_scalar_constant:
     case scalar_constant:
       {
-	int i = NINT (tmp_i.double_value ());
+	double dval = tmp_i.double_value ();
+
+	if (xisnan (dval))
+	  {
+	    error ("NaN is invalid as a matrix index");
+	    return;
+	  }
+
+	int i = NINT (dval);
 	int idx = i - 1;
 
 	if (rhs_nr == 0 && rhs_nc == 0)
 	  {
 	    int len = nr * nc;
 
 	    if (idx < len && len > 0)
 	      {
diff --git a/src/tc-rep-idx.cc b/src/tc-rep-idx.cc
--- a/src/tc-rep-idx.cc
+++ b/src/tc-rep-idx.cc
@@ -159,22 +159,36 @@ TC_REP::do_scalar_index (const Octave_ob
 		if (len == j.ones_count ())
 		  cols = len;
 		else if (jmax > 0)
 		  {
 		    error ("invalid scalar index = %d", jmax+1);
 		    return retval;
 		  }
 	      }
-	    else if (arg.const_type () == magic_colon
-		     || (arg.is_scalar_type ()
-			 && NINT (arg.double_value ()) == 1))
+	    else if (arg.const_type () == magic_colon)
 	      {
 		cols = 1;
 	      }
+	    else if (arg.is_scalar_type ())
+	      {
+		double dval = arg.double_value ();
+		if (! xisnan (dval))
+		  {
+		    int ival = NINT (dval);
+		    if (ival == 1)
+		      cols = 1;
+		    else if (ival == 0)
+		      cols = 0;
+		    else
+		      break;;
+		  }
+		else
+		  break;
+	      }
 	    else
 	      break;
 	  }
 
 // Fall through...
 
 	case 1:
 	  {
@@ -193,26 +207,36 @@ TC_REP::do_scalar_index (const Octave_ob
 		if (len == i.ones_count ())
 		  rows = len;
 		else if (imax > 0)
 		  {
 		    error ("invalid scalar index = %d", imax+1);
 		    return retval;
 		  }
 	      }
-	    else if (arg.const_type () == magic_colon
-		     || (arg.is_scalar_type ()
-			 && NINT (arg.double_value ()) == 1))
+	    else if (arg.const_type () == magic_colon)
 	      {
 		rows = 1;
 	      }
-	    else if (arg.is_scalar_type ()
-		     && NINT (arg.double_value ()) == 0)
+	    else if (arg.is_scalar_type ())
 	      {
-		return Matrix ();
+		double dval = arg.double_value ();
+
+		if (! xisnan (dval))
+		  {
+		    int ival = NINT (dval);
+		    if (ival == 1)
+		      rows = 1;
+		    else if (ival == 0)
+		      rows = 0;
+		    else
+		      break;
+		  }
+		else
+		  break;
 	      }
 	    else
 	      break;
 
 // If only one index, cols will not be set, so we set it.
 // If single index is [], rows will be zero, and we should set cols to
 // zero too.
 
@@ -436,24 +460,34 @@ TC_REP::fortran_style_matrix_index (cons
   int nr = rows ();
   int nc = columns ();
 
   switch (itype)
     {
     case complex_scalar_constant:
     case scalar_constant:
       {
-	int i = NINT (tmp_i.double_value ());
-	int ii = fortran_row (i, nr) - 1;
-	int jj = fortran_column (i, nr) - 1;
-	if (index_check (i-1, "") < 0)
-	  return tree_constant ();
-	if (range_max_check (i-1, nr * nc) < 0)
-	  return tree_constant ();
-	retval = do_matrix_index (ii, jj);
+	double dval = tmp_i.double_value ();
+
+	if (xisnan (dval))
+	  {
+	    ::error ("NaN is invalid as a matrix index");
+	    return tree_constant ();
+	  }
+	else
+	  {
+	    int i = NINT (dval);
+	    int ii = fortran_row (i, nr) - 1;
+	    int jj = fortran_column (i, nr) - 1;
+	    if (index_check (i-1, "") < 0)
+	      return tree_constant ();
+	    if (range_max_check (i-1, nr * nc) < 0)
+	      return tree_constant ();
+	    retval = do_matrix_index (ii, jj);
+	  }
       }
       break;
 
     case complex_matrix_constant:
     case matrix_constant:
       {
 	Matrix mi = tmp_i.matrix_value ();
 	if (mi.rows () == 0 || mi.columns () == 0)
diff --git a/src/tc-rep.cc b/src/tc-rep.cc
--- a/src/tc-rep.cc
+++ b/src/tc-rep.cc
@@ -641,29 +641,38 @@ TC_REP::any (void) const
 
   return retval;
 }
 
 int
 TC_REP::valid_as_scalar_index (void) const
 {
   return (type_tag == magic_colon
-	  || (type_tag == scalar_constant && NINT (scalar) == 1)
+	  || (type_tag == scalar_constant 
+	      && ! xisnan (scalar)
+	      && NINT (scalar) == 1)
 	  || (type_tag == range_constant
-	      && range->nelem () == 1 && NINT (range->base ()) == 1));
+	      && range->nelem () == 1
+	      && ! xisnan (range->base ())
+	      && NINT (range->base ()) == 1));
 }
 
 int
 TC_REP::valid_as_zero_index (void) const
 {
-  return ((type_tag == scalar_constant  && NINT (scalar) == 0)
+  return ((type_tag == scalar_constant
+	   && ! xisnan (scalar)
+	   && NINT (scalar) == 0)
 	  || (type_tag == matrix_constant
-	      && matrix->rows () == 0 && matrix->columns () == 0)
+	      && matrix->rows () == 0
+	      && matrix->columns () == 0)
 	  || (type_tag == range_constant
-	      && range->nelem () == 1 && NINT (range->base ()) == 0));
+	      && range->nelem () == 1
+	      && ! xisnan (range->base ())
+	      && NINT (range->base ()) == 0));
 }
 
 int
 TC_REP::is_true (void) const
 {
   int retval = 0;
 
   if (error_state)
@@ -1151,22 +1160,31 @@ TC_REP::convert_to_str (void) const
   tree_constant retval;
 
   switch (type_tag)
     {
     case complex_scalar_constant:
     case scalar_constant:
       {
 	double d = double_value ();
-	int i = NINT (d);
+
+	if (xisnan (d))
+	  {
+	    ::error ("invalid conversion from NaN to character");
+	    return retval;
+	  }
+	else
+	  {
+	    int i = NINT (d);
 // Warn about out of range conversions?
-	char s[2];
-	s[0] = (char) i;
-	s[1] = '\0';
-	retval = tree_constant (s);
+	    char s[2];
+	    s[0] = (char) i;
+	    s[1] = '\0';
+	    retval = tree_constant (s);
+	  }
       }
       break;
 
     case complex_matrix_constant:
     case matrix_constant:
       {
 	if (rows () == 0 && columns () == 0)
 	  {
@@ -1184,19 +1202,29 @@ TC_REP::convert_to_str (void) const
 	      }
 	    else
 	      {
 		char *s = new char [len+1];
 		s[len] = '\0';
 		for (int i = 0; i < len; i++)
 		  {
 		    double d = v.elem (i);
-		    int ival = NINT (d);
+
+		    if (xisnan (d))
+		      {
+			::error ("invalid conversion from NaN to character");
+			delete [] s;
+			return retval;
+		      }
+		    else
+		      {
+			int ival = NINT (d);
 // Warn about out of range conversions?
-		    s[i] = (char) ival;
+			s[i] = (char) ival;
+		      }
 		  }
 		retval = tree_constant (s);
 		delete [] s;
 	      }
 	  }
       }
       break;
 
@@ -1206,19 +1234,29 @@ TC_REP::convert_to_str (void) const
 	double b = r.base ();
 	double incr = r.inc ();
 	int nel = r.nelem ();
 	char *s = new char [nel+1];
 	s[nel] = '\0';
 	for (int i = 0; i < nel; i++)
 	  {
 	    double d = b + i * incr;
-	    int ival = NINT (d);
+
+	    if (xisnan (d))
+	      {
+		::error ("invalid conversion from NaN to character");
+		delete [] s;
+		return retval;
+	      }
+	    else
+	      {
+		int ival = NINT (d);
 // Warn about out of range conversions?
-	    s[i] = (char) ival;
+		s[i] = (char) ival;
+	      }
 	  }
 	retval = tree_constant (s);
 	delete [] s;
       }
       break;
 
     case string_constant:
       retval = string;
diff --git a/src/user-prefs.cc b/src/user-prefs.cc
--- a/src/user-prefs.cc
+++ b/src/user-prefs.cc
@@ -23,16 +23,17 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
 #include <string.h>
 
 #include "user-prefs.h"
+#include "mappers.h"
 #include "error.h"
 #include "variables.h"
 #include "utils.h"
 
 // The list of user preferences.  Values change when global variables
 // change, so we don\'t have to do a variable look up every time we
 // need to check a preference.
 user_preferences user_pref;
@@ -478,17 +479,18 @@ warn_function_name_clash (void)
 int
 set_output_max_field_width (void)
 {
   int status = 0;
 
   static int kludge = 0;
 
   double val;
-  if (builtin_real_scalar_variable ("output_max_field_width", val) == 0)
+  if (builtin_real_scalar_variable ("output_max_field_width", val) == 0
+      && ! xisnan (val))
     {
       int ival = NINT (val);
       if (ival > 0 && (double) ival == val)
 	{
 	  user_pref.output_max_field_width= ival;
 	  return status;
 	}
     }
@@ -507,17 +509,18 @@ set_output_max_field_width (void)
 int
 set_output_precision (void)
 {
   int status = 0;
 
   static int kludge = 0;
 
   double val;
-  if (builtin_real_scalar_variable ("output_precision", val) == 0)
+  if (builtin_real_scalar_variable ("output_precision", val) == 0
+      && ! xisnan (val))
     {
       int ival = NINT (val);
       if (ival >= 0 && (double) ival == val)
 	{
 	  user_pref.output_precision = ival;
 	  return status;
 	}
     }
@@ -536,17 +539,18 @@ set_output_precision (void)
 int
 set_save_precision (void)
 {
   int status = 0;
 
   static int kludge = 0;
 
   double val;
-  if (builtin_real_scalar_variable ("save_precision", val) == 0)
+  if (builtin_real_scalar_variable ("save_precision", val) == 0
+      && ! xisnan (val))
     {
       int ival = NINT (val);
       if (ival >= 0 && (double) ival == val)
 	{
 	  user_pref.save_precision = ival;
 	  return status;
 	}
     }
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -496,16 +496,19 @@ get_fcn_file_names (int& num, int no_suf
     }
 
   retval[i] = 0;
   num = i;
 
   return retval;
 }
 
+// Convert X to the nearest integer value.  Should not pass NaN to
+// this function.
+
 int
 NINT (double x)
 {
   if (x > INT_MAX)
     return INT_MAX;
   else if (x < INT_MIN)
     return INT_MIN;
   else
