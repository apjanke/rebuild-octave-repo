# HG changeset patch
# User jwe
# Date 812778306 0
#      Wed Oct 04 03:45:06 1995 +0000
# Node ID 84bd88b8aceefdd45ac434f2c14149b0c2560c6f
# Parent  5a02b9fba19eb7db8d16d0eaf73241f5a07fdb70
[project @ 1995-10-04 03:35:16 by jwe]

diff --git a/scripts/control/abcddim.m b/scripts/control/abcddim.m
--- a/scripts/control/abcddim.m
+++ b/scripts/control/abcddim.m
@@ -27,17 +27,17 @@ function [n, m, p] = abcddim (a, b, c, d
 #         m = number of system inputs,
 #         p = number of system outputs.
 #
 # Returns n = m = p = -1 if the system is not compatible.
 
 # Written by A. S. Hodel (scotte@eng.auburn.edu) August 1993.
 
   if (nargin != 4)
-    error ("abcddim: invalid number of arguments.  need four.")
+    error ("usage: abcddim (a, b, c, d)");
   endif
 
   n = m = p = -1;
 
   [an, am] = size(a);
   if (an != am)
     error ("abcddim: a is not square");
   endif
diff --git a/scripts/control/are.m b/scripts/control/are.m
--- a/scripts/control/are.m
+++ b/scripts/control/are.m
@@ -78,12 +78,12 @@ function x = are (a, b, c, opt)
 
     [d, h] = balance ([a, -b; -c, -a'], opt);
     [u, s] = schur (h, "A");
     u = d * u;
     n1 = n + 1;
     n2 = 2 * n;
     x = u (n1:n2, 1:n) / u (1:n, 1:n);
   else
-    usage ("x = are (a, b, c)")
+    usage ("x = are (a, b, c)");
   endif
 
 endfunction
diff --git a/scripts/general/tril.m b/scripts/general/tril.m
--- a/scripts/general/tril.m
+++ b/scripts/general/tril.m
@@ -29,17 +29,17 @@ function retval = tril (x, k)
     [nr, nc] = size (x);
     retval = zeros (nr, nc);
   endif
 
   if (nargin == 1)
     k = 0;
   elseif (nargin == 2)
     if ((k > 0 && k > nc) || (k < 0 && k < -nr))
-      error ("tril: requested diagonal out of range")
+      error ("tril: requested diagonal out of range");
     endif
   else
     usage ("tril (x [, k])");
   endif
 
   for j = 1 : min (nc, nc + abs (k))
     nr_limit = max (1, j-k);
     retval (nr_limit:nr, j) = x (nr_limit:nr, j);
diff --git a/scripts/general/triu.m b/scripts/general/triu.m
--- a/scripts/general/triu.m
+++ b/scripts/general/triu.m
@@ -29,17 +29,17 @@ function retval = triu (x, k)
     [nr, nc] = size (x);
     retval = zeros (nr, nc);
   endif
 
   if (nargin == 1)
     k = 0;
   elseif (nargin == 2)
     if ((k > 0 && k > nc) || (k < 0 && k < -nr))
-      error ("triu: requested diagonal out of range")
+      error ("triu: requested diagonal out of range");
     endif
   else
     usage ("triu (x [, k])");
   endif
 
   for j = max (1, k) : nc
     nr_limit = min (nr, j-k);
     retval (1:nr_limit, j) = x (1:nr_limit, j);
diff --git a/scripts/image/saveimage.m b/scripts/image/saveimage.m
--- a/scripts/image/saveimage.m
+++ b/scripts/image/saveimage.m
@@ -165,17 +165,16 @@ function saveimage (filename, img, img_f
 
       idx = 1:8:img_sz;
       s_len = length (idx) - 1;
 
       tmp = img (1:8:img_sz) * 128;
       for i = 2:n_long
 	tmp = tmp + img (i:8:img_sz) * 2^(8-i);
       endfor
-      size (tmp)
       for i = (n_long+1):8
 	tmp(1:s_len) = tmp(1:s_len) + img (i:8:img_sz) * 2^(8-i);
       endfor
 
       fid = fopen (filename, "w");
       fprintf (fid, "P4\n%d %d\n", img_nr, img_nc);
       fwrite (fid, tmp, "char");
       fprintf (fid, "\n");
@@ -211,17 +210,17 @@ function saveimage (filename, img, img_f
       fprintf (fid, "\n");
       fclose (fid);
 
     endif
 
   elseif (strcmp (img_form, "ps") == 1)
 
     if (! grey)
-      error ("must have a greyscale color map for conversion to PostScript")
+      error ("must have a greyscale color map for conversion to PostScript");
     endif
 
     bps = 8;
     dpi = 300;
     pagewid = 612;
     pagehgt = 762;
     MARGIN = 0.95;
     devpix = dpi / 72.0 + 0.5;
@@ -280,17 +279,17 @@ function saveimage (filename, img, img_f
 
     img = map(img);
 
 # XXX FIXME XXX -- this would be much faster if fprintf knew about
 # vector arguments.
 
     count = 0;
     for i = 1:img_sz
-      fprintf (fid, "%x", img (i))
+      fprintf (fid, "%x", img (i));
       if (++count == 30)
 	count = 0;
 	fprintf (fid, "\n");
       endif
     endfor
 
     fprintf (fid, "\n" );
     fprintf (fid, "grestore\n" );
diff --git a/scripts/linear-algebra/kron.m b/scripts/linear-algebra/kron.m
--- a/scripts/linear-algebra/kron.m
+++ b/scripts/linear-algebra/kron.m
@@ -31,17 +31,17 @@ function x = kron (a, b)
 
     [m, n] = size (b);
     [ma, na] = size (a);
 
 # Do 1st column.
 
     x = a (1, 1) * b;
     for ii = 2:ma
-      tmp = a (ii, 1) * b
+      tmp = a (ii, 1) * b;
       x = [x; tmp];
     endfor
 
 # Do remaining columns.
 
     for jj = 2:na
       tmp = a (1, jj) * b;
       for ii = 2:ma
diff --git a/scripts/linear-algebra/norm.m b/scripts/linear-algebra/norm.m
--- a/scripts/linear-algebra/norm.m
+++ b/scripts/linear-algebra/norm.m
@@ -40,17 +40,17 @@ function retval = norm (x, p)
 #     -Inf         min (abs (x))
 #     other        p-norm of x, sum (abs (x) .^ p) ^ (1/p)
 #
 # If the second argument is missing, p = 2 is assumed.
 #
 # See also: cond, svd
 
   if (nargin < 1 || nargin > 2)
-    error ("usage: norm (x [, p])")
+    error ("usage: norm (x [, p])");
   endif
 
   if (isempty (x))
     retval = [];
     return;
   endif
 
 # Do we have a vector or matrix as the first argument?
diff --git a/scripts/miscellaneous/etime.m b/scripts/miscellaneous/etime.m
--- a/scripts/miscellaneous/etime.m
+++ b/scripts/miscellaneous/etime.m
@@ -27,17 +27,17 @@ function secs = etime (t1, t0)
 
   if (nargin != 2)
     usage ("etime (t1, t0)");
   endif
 
   if (is_vector (t1) && length (t1) == 6 && is_vector (t0) && length (t0) == 6)
 
     if (t1 (1) != t0 (1))
-      error ("etime: can't handle timings over year boundaries yet")
+      error ("etime: can't handle timings over year boundaries yet");
     endif
 
 # XXX FIXME XXX -- could check here to ensure that t1 and t0 really do
 # make sense as vectors returned from clock().
 
     days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
 
     if (is_leap_year (t1 (1)))
diff --git a/scripts/plot/__plr__.m b/scripts/plot/__plr__.m
--- a/scripts/plot/__plr__.m
+++ b/scripts/plot/__plr__.m
@@ -16,17 +16,17 @@
 # along with Octave; see the file COPYING.  If not, write to the Free
 # Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 function polar_int (theta, rho, fmt)
 
   if (nargin == 1)
     [nr, nc] = size (theta);
     if (nr == 1)
-      theta = theta';
+      theta = theta.';
       tmp = nr;
       nr = nc;
       nc = tmp;
     endif
     theta_i = imag (theta);
     if (any (theta_i))
       rho = theta_i;
       theta = real (theta);
@@ -50,58 +50,58 @@ function polar_int (theta, rho, fmt)
         plot_2_s_s (x, y, fmt);
       endif
     elseif (is_vector (theta))
       if (is_vector (rho))
         if (length (theta) != length (rho))
           error ("polar: vector lengths must match");
         endif
         if (rows (rho) == 1)
-          rho = rho';
+          rho = rho.';
         endif
         if (rows (theta) == 1)
-          theta = theta';
+          theta = theta.';
         endif
         x = rho .* cos (theta);
         y = rho .* sin (theta);
         plot_2_v_v (x, y, fmt);
       elseif (is_matrix (rho))
         [t_nr, t_nc] = size (theta);
         if (t_nr == 1)
-          theta = theta';
+          theta = theta.';
           tmp = t_nr;
           t_nr = t_nc;
           t_nc = tmp;
         endif
         [r_nr, r_nc] = size (rho);
         if (t_nr != r_nr)
-          rho = rho'
+          rho = rho.';
           tmp = r_nr;
           r_nr = r_nc;
           r_nc = tmp;
         endif
         if (t_nr != r_nr)
           error ("polar: vector and matrix sizes must match");
         endif
         x = diag (cos (theta)) * rho;
         y = diag (sin (theta)) * rho;
         plot_2_v_m (x, y, fmt);
       endif
     elseif (is_matrix (theta))
       if (is_vector (rho))
         [r_nr, r_nc] = size (rho);
         if (r_nr == 1)
-          rho = rho';
+          rho = rho.';
           tmp = r_nr;
           r_nr = r_nc;
           r_nc = tmp;
         endif
         [t_nr, t_nc] = size (theta);
         if (r_nr != t_nr)
-          theta = rho'
+          theta = rho.';
           tmp = t_nr;
           t_nr = t_nc;
           t_nc = tmp;
         endif
         if (r_nr != t_nr)
           error ("polar: vector and matrix sizes must match");
         endif
         diag_r = diag (r);
diff --git a/scripts/plot/__plt__.m b/scripts/plot/__plt__.m
--- a/scripts/plot/__plt__.m
+++ b/scripts/plot/__plt__.m
@@ -42,27 +42,27 @@ function plot_int (caller, ...)
 	new = va_arg ();
 
 	if (isstr (new))
 	  if (! x_set)
 	    error ("plot: no data to plot");
 	  endif
 	  fmt = plot_opt (caller, new);
 	  if (! y_set)
-	    plot_int_1 (x, fmt)
+	    plot_int_1 (x, fmt);
 	  else
-	    plot_int_2 (x, y, fmt)
+	    plot_int_2 (x, y, fmt);
 	  endif
-	  hold on
+	  hold on;
 	  x_set = 0;
 	  y_set = 0;
 	elseif (x_set)
 	  if (y_set)
 	    plot_int_2 (x, y, fmt);
-	    hold on
+	    hold on;
 	    x = new;
 	    y_set = 0;
 	  else
 	    y = new;
 	    y_set = 1;          
 	  endif
 	else
 	  x = new;
@@ -79,17 +79,17 @@ function plot_int (caller, ...)
 	else
 	  plot_int_1 (x, fmt);
 	endif
       endif
 
     unwind_protect_cleanup
 
       if (! hold_state)
-        hold off
+        hold off;
       endif
 
     end_unwind_protect
 
   else
 
     msg = sprintf ("%s (x)\n", caller);
     msg = sprintf ("%s       %s (x, y)\n", msg, caller);
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -27,21 +27,21 @@ function contour (z, n, x, y)
   if (nargin == 1)
     n = 10;
   endif
 
   if (nargin == 1 || nargin == 2)
     if (is_matrix (z))
       set nosurface;
       set contour;
-      set cntrparam bspline
+      set cntrparam bspline;
       command = sprintf ("set cntrparam levels %d", n);
       eval (command);
       set noparametric;
-      set view 0, 0, 1.9, 1
+      set view 0, 0, 1.9, 1;
       gsplot z w l 1;
     else
       error ("mesh: argument must be a matrix");
     endif
   elseif (nargin == 4)
     if (is_vector (x) && is_vector (y) && is_matrix (z))
       xlen = length (x);
       ylen = length (y);
@@ -53,23 +53,23 @@ function contour (z, n, x, y)
         zz = zeros (xlen, ylen);
         k = 1;
         for i = 1:3:len
           zz(:,i)   = x;
           zz(:,i+1) = y(k) * ones (xlen, 1);
           zz(:,i+2) = z(:,k);
           k++;
         endfor
-        set nosurface
-        set contour
-        set cntrparam bspline
+        set nosurface;
+        set contour;
+        set cntrparam bspline;
         command = sprintf ("set cntrparam levels %d", n);
         eval (command);
 	set parametric;
-        set view 0, 0, 1.9, 1
+        set view 0, 0, 1.9, 1;
 	gsplot zz w l 1;
       else
         msg = "mesh: rows (z) must be the same as length (x) and";
         msg = sprintf ("%s\ncolumns (z) must be the same as length (y)", msg);
         error (msg);
       endif
     else
       error ("mesh: x and y must be vectors and z must be a matrix");
diff --git a/scripts/plot/mesh.m b/scripts/plot/mesh.m
--- a/scripts/plot/mesh.m
+++ b/scripts/plot/mesh.m
@@ -26,17 +26,17 @@ function mesh (x, y, z)
   if (nargin == 1)
     z = x;
     if (is_matrix (z))
       set hidden3d;
       set data style lines;
       set surface;
       set nocontour;
       set noparametric;
-      set view 60, 30, 1, 1
+      set view 60, 30, 1, 1;
       gsplot (z);
     else
       error ("mesh: argument must be a matrix");
     endif
   elseif (nargin == 3)
     if (is_vector (x) && is_vector (y) && is_matrix (z))
       xlen = length (x);
       ylen = length (y);
@@ -53,17 +53,17 @@ function mesh (x, y, z)
           zz(:,i+2) = z(:,k);
           k++;
         endfor
 	set hidden3d;
 	set data style lines;
         set surface;
         set nocontour;
 	set parametric;
-        set view 60, 30, 1, 1
+        set view 60, 30, 1, 1;
 	gsplot (zz);
       else
         msg = "mesh: rows (z) must be the same as length (x) and";
         msg = sprintf ("%s\ncolumns (z) must be the same as length (y)", msg);
         error (msg);
       endif
     else
       error ("mesh: x and y must be vectors and z must be a matrix");
diff --git a/scripts/special-matrix/hankel.m b/scripts/special-matrix/hankel.m
--- a/scripts/special-matrix/hankel.m
+++ b/scripts/special-matrix/hankel.m
@@ -34,17 +34,17 @@ function retval = hankel (c, r)
   elseif (nargin != 2)
     usage ("hankel (c, r)");
   endif
 
   [c_nr, c_nc] = size (c);
   [r_nr, r_nc] = size (r);
 
   if ((c_nr != 1 && c_nc != 1) || (r_nr != 1 && r_nc != 1))
-    error ("hankel: expecting vector arguments")
+    error ("hankel: expecting vector arguments");
   endif
 
   if (nargin == 1) 
     r (1) = c (length (c));
   endif
 
   if (c_nc != 1)
     c = c.';
diff --git a/scripts/special-matrix/toeplitz.m b/scripts/special-matrix/toeplitz.m
--- a/scripts/special-matrix/toeplitz.m
+++ b/scripts/special-matrix/toeplitz.m
@@ -34,17 +34,17 @@ function retval = toeplitz (c, r)
   elseif (nargin != 2)
     usage ("toeplitz (c, r)");
   endif
 
   [c_nr, c_nc] = size (c);
   [r_nr, r_nc] = size (r);
 
   if ((c_nr != 1 && c_nc != 1) || (r_nr != 1 && r_nc != 1))
-    error ("toeplitz: expecting vector arguments")
+    error ("toeplitz: expecting vector arguments");
   endif
 
   if (c_nc != 1)
     c = c.';
   endif
 
   if (r_nr != 1)
     r = r.';
