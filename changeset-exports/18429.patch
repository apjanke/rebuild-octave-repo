# HG changeset patch
# User Rik <rik@octave.org>
# Date 1391466311 28800
#      Mon Feb 03 14:25:11 2014 -0800
# Branch stable
# Node ID 90568d7fe38269bc9777fa7a4589aed8e506817e
# Parent  4d2e15abe5e7e2e3def440fe95d3da71fc44c80c
ppval.m: Return correctly sized output for scalar polynomial input (bug #41448).

* ppval.m: Return correctly sized output for scalar polynomial input
(bug #41448).

diff --git a/scripts/polynomial/ppval.m b/scripts/polynomial/ppval.m
--- a/scripts/polynomial/ppval.m
+++ b/scripts/polynomial/ppval.m
@@ -27,17 +27,17 @@
 ## @seealso{mkpp, unmkpp, spline, pchip}
 ## @end deftypefn
 
 function yi = ppval (pp, xi)
 
   if (nargin != 2)
     print_usage ();
   endif
-  if (! (isstruct (pp) && strcmp (pp.form, "pp")))
+  if (! (isstruct (pp) && isfield (pp, "form") && strcmp (pp.form, "pp")))
     error ("ppval: first argument must be a pp-form structure");
   endif
 
   ## Extract info.
   [x, P, n, k, d] = unmkpp (pp);
 
   ## dimension checks
   sxi = size (xi);
@@ -49,17 +49,17 @@ function yi = ppval (pp, xi)
 
   ## Determine intervals.
   xn = numel (xi);
   idx = lookup (x, xi, "lr");
 
   P = reshape (P, [d, n * k]);
   P = shiftdim (P, nd);
   P = reshape (P, [n, k, d]);
-  Pidx = P(idx(:), :);#2d matrix size x: coefs*prod(d) y: prod(sxi)
+  Pidx = P(idx(:), :);  # 2D matrix size: x = coefs*prod(d), y = prod(sxi)
 
   if (isvector (xi))
     Pidx = reshape (Pidx, [xn, k, d]);
     Pidx = shiftdim (Pidx, 1);
     dimvec = [d, xn];
   else
     Pidx = reshape (Pidx, [sxi, k, d]);
     Pidx = shiftdim (Pidx, length (sxi));
@@ -91,41 +91,51 @@ function yi = ppval (pp, xi)
   endif
 
   if (isvector (xi) && (d == 1))
     yi = reshape (yi, sxi);
   elseif (isfield (pp, "orient") && strcmp (pp.orient, "first"))
     yi = shiftdim (yi, nd);
   endif
 
-  ## FIXME: Why is this commented out, rather than just removed?
-  #if (d == 1)
-  #  yi = reshape (yi, sxi);
-  #endif
+  if (d == 1)
+    yi = reshape (yi, sxi);
+  endif
 
 endfunction
 
 
 %!shared b, c, pp, pp2, xi, abserr
 %! b = 1:3;
 %! c = ones (2);
 %! pp = mkpp (b, c);
 %! abserr = 1e-14;
 %! pp2 = mkpp (b, [c;c], 2);
 %! xi = [1.1 1.3 1.9 2.1];
+%!
 %!assert (ppval (pp, 1.1), 1.1, abserr)
 %!assert (ppval (pp, 2.1), 1.1, abserr)
 %!assert (ppval (pp, xi), [1.1 1.3 1.9 1.1], abserr)
 %!assert (ppval (pp, xi.'), [1.1 1.3 1.9 1.1].', abserr)
 %!assert (ppval (pp2, 1.1), [1.1;1.1], abserr)
 %!assert (ppval (pp2, 2.1), [1.1;1.1], abserr)
 %!assert (ppval (pp2, xi), [1.1 1.3 1.9 1.1;1.1 1.3 1.9 1.1], abserr)
 %!assert (ppval (pp2, xi'), [1.1 1.3 1.9 1.1;1.1 1.3 1.9 1.1], abserr)
 %!assert (size (ppval (pp2, [xi;xi])), [2 2 4])
+%!assert (ppval (mkpp([0 1],1), magic (3)), ones(3,3))
+%!
 %!test
 %! breaks = [0, 1, 2, 3];
 %! coefs = rand (6, 4);
 %! pp = mkpp (breaks, coefs, 2);
 %! ret = zeros (2, 4, 2);
 %! ret(:,:,1) = ppval (pp, breaks');
 %! ret(:,:,2) = ppval (pp, breaks');
 %! assert (ppval (pp, [breaks',breaks']), ret)
 
+%% Test input validation
+%!error ppval ()
+%!error ppval (1)
+%!error ppval (1,2,3)
+%!error <argument must be a pp-form structure> ppval (1,2)
+%!error <argument must be a pp-form structure> ppval (struct ("a", 1), 2)
+%!error <argument must be a pp-form structure> ppval (struct ("form", "ab"), 2)
+
