# HG changeset patch
# User Rik <rik@octave.org>
# Date 1412376359 25200
#      Fri Oct 03 15:45:59 2014 -0700
# Node ID e172186599ca917b364fe6fb9a563533b85aa34e
# Parent  6d92d54046f3f98319719a383978f7402a8a278b
fileparts.m: Overhaul function.

* fileparts.m: Match variable names in function to those in documentation.
Return empty string ("") for name when it does not exist rather than
char (zeros (1, 0)).

diff --git a/scripts/miscellaneous/fileparts.m b/scripts/miscellaneous/fileparts.m
--- a/scripts/miscellaneous/fileparts.m
+++ b/scripts/miscellaneous/fileparts.m
@@ -12,23 +12,25 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {[@var{dir}, @var{name}, @var{ext}, @var{ver}] =} fileparts (@var{filename})
-## Return the directory, name, extension, and version components of
-## @var{filename}.
-## @seealso{fullfile}
+## @deftypefn {Function File} {[@var{dir}, @var{name}, @var{ext}] =} fileparts (@var{filename})
+## Return the directory, name, and extension components of @var{filename}.
+##
+## The input @var{filename} is a string which is parsed.  There is no attempt
+## to check whether the filename or directory specified actually exists.
+## @seealso{fullfile, pathsep}
 ## @end deftypefn
 
-function [directory, name, extension, version] = fileparts (filename)
+function [dir, name, ext] = fileparts (filename)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   if (! ischar (filename) || rows (filename) > 1)
     error ("fileparts: FILENAME must be a single string");
   endif
@@ -37,30 +39,35 @@ function [directory, name, extension, ve
   if (isempty (ds))
     ds = 0;
   endif
   es = rindex (filename, ".");
   ## These can be the same if they are both 0 (no dir or ext).
   if (es <= ds)
     es = length (filename)+1;
   endif
+
   if (ds == 0)
-    directory = "";
+    dir = "";
   elseif (ds == 1)
-    directory = filename(1);
+    dir = filename(1);
   else
-    directory = filename(1:ds-1);
+    dir = filename(1:ds-1);
   endif
+
   name = filename(ds+1:es-1);
+  if (isempty (name))
+    name = "";
+  endif
+
   if (es > 0 && es <= length (filename))
-    extension = filename(es:end);
+    ext = filename(es:end);
   else
-    extension = "";
+    ext = "";
   endif
-  version = "";
 
 endfunction
 
 
 %!test
 %! [d, n, e] = fileparts ("file");
 %! assert (strcmp (d, "") && strcmp (n, "file") && strcmp (e, ""));
 
@@ -85,20 +92,20 @@ endfunction
 %! assert (strcmp (d, "d1/d2") && strcmp (n, "file") && strcmp (e, ".ext"));
 
 %!test
 %! [d, n, e] = fileparts ("/d1/d2/file.ext");
 %! assert (strcmp (d, "/d1/d2") && strcmp (n, "file") && strcmp (e, ".ext"));
 
 %!test
 %! [d, n, e] = fileparts ("/.ext");
-%! assert (strcmp (d, "/") && strcmp (n, char (zeros (1, 0))) && strcmp (e, ".ext"));
+%! assert (strcmp (d, "/") && strcmp (n, "") && strcmp (e, ".ext"));
 
 %!test
 %! [d, n, e] = fileparts (".ext");
-%! assert (strcmp (d, "") && strcmp (n, char (zeros (1, 0))) && strcmp (e, ".ext"));
+%! assert (strcmp (d, "") && strcmp (n, "") && strcmp (e, ".ext"));
 
 %% Test input validation
 %!error fileparts ()
 %!error fileparts (1,2)
 %!error <FILENAME must be a single string> fileparts (1)
 %!error <FILENAME must be a single string> fileparts (["a"; "b"])
 
