# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1364655435 14400
#      Sat Mar 30 10:57:15 2013 -0400
# Node ID f9a737fd8829b31d714bfbc9888a7d49d4ba1068
# Parent  48b3d172042de33b3ca0e2beb578ec7653ea6767
allow command-line edit function to use GUI editor

* file-editor-interface.h
(file_editor_interface::handle_edit_file_request): New pure virtual function.
* file-editor.h, file-editor.cc
(file_editor::handle_edit_file_request): New function.
* octave-event-listener.h (octave_event_listenter::edit_file): New
pure virtual function.
* octave-qt-event-listener.h, octave-qt-event-listener.cc
(octave_qt_event_listener::edit_file): New function.
(octave_qt_event_listener::edit_file_signal): New signal.
* main-window.h, main-window.cc
(main_window::handle_edit_file_request): New function.
(main_window::construct): Connect edit_file_signal to
handle_edit_file_request.

* __execute_edit_hook__.cc: New file.  Provide
Fadd_edit_hook, Fremove_edit_hook, and F__execute_edit_hook__
functions for the interpreter.
* libinterp/corefcn/module.mk (COREFCN_SRC): Include it in the list.

* octave-link.h, octave-link.cc (octave_link::edit_file,
octave_link::do_edit_file): New functions.
* octave-main-thread.cc (edit_hook_fcn): New function.
(octave_main_thread::run): Install it as an edit_hook function.

* miscellaneous/edit.m (do_edit): New subfunction.  Allow edit request
to be intercepted by edit_hook function.
(edit): Use it to uniformly handle starting the editor.

diff --git a/libgui/src/m-editor/file-editor-interface.h b/libgui/src/m-editor/file-editor-interface.h
--- a/libgui/src/m-editor/file-editor-interface.h
+++ b/libgui/src/m-editor/file-editor-interface.h
@@ -51,16 +51,19 @@ class file_editor_interface : public oct
   handle_insert_debugger_pointer_request (const QString& file, int line) = 0;
 
   virtual void
   handle_delete_debugger_pointer_request (const QString& file, int line) = 0;
 
   virtual void handle_update_dbstop_marker_request (bool insert,
                                                     const QString& file,
                                                     int line) = 0;
+
+  virtual void handle_edit_file_request (const QString& file) = 0;
+
   virtual void set_focus () = 0;
 
 public slots:
   virtual void request_new_file () = 0;
   virtual void request_open_file () = 0;
   virtual void request_open_file (const QString& openFileName, int line = -1,
                                   bool debug_pointer = false,
                                   bool dbstop_marker = false,
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -330,16 +330,22 @@ file_editor::handle_delete_debugger_poin
 void
 file_editor::handle_update_dbstop_marker_request (bool insert,
                                                   const QString& file, int line)
 {
   request_open_file (file, line, false, true, insert);
 }
 
 void
+file_editor::handle_edit_file_request (const QString& file)
+{
+  request_open_file (file);
+}
+
+void
 file_editor::request_undo ()
 {
   emit fetab_undo (_tab_widget->currentWidget ());
 }
 
 void
 file_editor::request_redo ()
 {
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -130,16 +130,17 @@ public slots:
   void handle_editor_state_changed (bool enableCopy, const QString& fileName);
   void handle_mru_add_file (const QString& file_name);
   void check_conflict_save (const QString& fileName, bool remove_on_success);
 
   void handle_insert_debugger_pointer_request (const QString& file, int line);
   void handle_delete_debugger_pointer_request (const QString& file, int line);
   void handle_update_dbstop_marker_request (bool insert, const QString& file,
                                             int line);
+  void handle_edit_file_request (const QString& file);
 
   /** Tells the editor to react on changed settings. */
   void notice_settings ();
 
 private slots:
   void request_open_file (const QString& fileName, int line = -1,
                           bool debug_pointer = false,
                           bool dbstop_marker = false, bool insert = true);
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -531,16 +531,24 @@ main_window::handle_update_dbstop_marker
                                                   const QString& file, int line)
 {
 #ifdef HAVE_QSCINTILLA
   _file_editor->handle_update_dbstop_marker_request (insert, file, line);
 #endif
 }
 
 void
+main_window::handle_edit_file_request (const QString& file)
+{
+#ifdef HAVE_QSCINTILLA
+  _file_editor->handle_edit_file_request (file);
+#endif
+}
+
+void
 main_window::debug_continue ()
 {
   octave_link::post_event (this, &main_window::debug_continue_callback);
 }
 
 void
 main_window::debug_step_into ()
 {
@@ -1198,16 +1206,21 @@ main_window::construct ()
   connect (_octave_qt_event_listener,
            SIGNAL (delete_debugger_pointer_signal (const QString&, int)), this,
            SLOT (handle_delete_debugger_pointer_request (const QString&, int)));
 
   connect (_octave_qt_event_listener,
            SIGNAL (update_dbstop_marker_signal (bool, const QString&, int)),
            this,
            SLOT (handle_update_dbstop_marker_request (bool, const QString&, int)));
+
+  connect (_octave_qt_event_listener,
+           SIGNAL (edit_file_signal (const QString&)),
+           this,
+           SLOT (handle_edit_file_request(const QString&)));
 }
 
 void
 main_window::save_workspace_callback (const std::string& file)
 {
   Fsave (ovl (file));
 }
 
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -116,16 +116,17 @@ public slots:
   void handle_editor_visible (bool);
   void handle_documentation_visible (bool);
 
   void handle_entered_debug_mode ();
   void handle_quit_debug_mode ();
   void handle_insert_debugger_pointer_request (const QString& file, int line);
   void handle_delete_debugger_pointer_request (const QString& file, int line);
   void handle_update_dbstop_marker_request (bool insert, const QString& file, int line);
+  void handle_edit_file_request (const QString& file);
   void debug_continue ();
   void debug_step_into ();
   void debug_step_over ();
   void debug_step_out ();
   void debug_quit ();
 
   void read_settings ();
   void write_settings ();
diff --git a/libgui/src/octave-adapter/octave-event-listener.h b/libgui/src/octave-adapter/octave-event-listener.h
--- a/libgui/src/octave-adapter/octave-event-listener.h
+++ b/libgui/src/octave-adapter/octave-event-listener.h
@@ -44,15 +44,17 @@ class octave_event_listener
     insert_debugger_pointer (const std::string& file, int line) = 0;
 
     virtual void
     delete_debugger_pointer (const std::string& file, int line) = 0;
 
     virtual void
     update_dbstop_marker (bool insert, const std::string& file, int line) = 0;
 
+    virtual void edit_file (const std::string& file) = 0;
+
     virtual void about_to_exit () = 0;
 
     virtual void entered_debug_mode () = 0;
     virtual void quit_debug_mode () = 0;
 };
 
 #endif // OCTAVEEVENTLISTENER_H
diff --git a/libgui/src/octave-adapter/octave-link.cc b/libgui/src/octave-adapter/octave-link.cc
--- a/libgui/src/octave-adapter/octave-link.cc
+++ b/libgui/src/octave-adapter/octave-link.cc
@@ -278,16 +278,39 @@ octave_link::do_update_breakpoint_hook_f
           else
             ::error ("expecting struct in dbstop marker callback");
         }
       else
         ::error ("invalid call to dbstop marker callback");
     }
 }
 
+void
+octave_link::do_edit_file (const octave_value_list& args)
+{
+  if (event_listener)
+    {
+      if (args.length () == 1)
+        {
+          std::string file = args(0).string_value ();
+
+          if (! error_state)
+            {
+              event_listener->edit_file (file);
+              do_process_events ();
+
+            }
+          else
+            ::error ("expecting file name in edit file callback");
+        }
+      else
+        ::error ("invalid call to edit file callback");
+    }
+}
+
 bool
 octave_link::instance_ok (void)
 {
   bool retval = true;
 
   if (! instance)
     {
       instance = new octave_link ();
diff --git a/libgui/src/octave-adapter/octave-link.h b/libgui/src/octave-adapter/octave-link.h
--- a/libgui/src/octave-adapter/octave-link.h
+++ b/libgui/src/octave-adapter/octave-link.h
@@ -160,16 +160,23 @@ public:
 
   static void
   update_breakpoint_hook_fcn (bool insert, const octave_value_list& args)
   {
     if (instance_ok ())
       instance->do_update_breakpoint_hook_fcn (insert, args);
   }
 
+  static void
+  edit_file (const octave_value_list& args)
+  {
+    if (instance_ok ())
+      instance->do_edit_file (args);
+  }
+
 private:
 
   static octave_link *instance;
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
   // No copying!
 
@@ -231,11 +238,13 @@ private:
   void do_delete_debugger_pointer (const octave_value_list& args);
 
   void do_pre_input_event_hook_fcn (void);
   void do_post_input_event_hook_fcn (void);
   void do_enter_debugger_event_hook_fcn (const octave_value_list& args);
   void do_exit_debugger_event_hook_fcn (const octave_value_list& args);
   void do_update_breakpoint_hook_fcn (bool insert,
                                       const octave_value_list& args);
+
+  void do_edit_file (const octave_value_list& args);
 };
 
 #endif // OCTAVELINK_H
diff --git a/libgui/src/octave-adapter/octave-main-thread.cc b/libgui/src/octave-adapter/octave-main-thread.cc
--- a/libgui/src/octave-adapter/octave-main-thread.cc
+++ b/libgui/src/octave-adapter/octave-main-thread.cc
@@ -90,16 +90,26 @@ dbclear_hook_fcn (const octave_value_lis
 {
   octave_value_list retval;
 
   octave_link::update_breakpoint_hook_fcn (false, args);
 
   return retval;
 }
 
+static octave_value_list
+edit_hook_fcn (const octave_value_list& args, int)
+{
+  octave_value_list retval;
+
+  octave_link::edit_file (args);
+
+  return retval;
+}
+
 octave_main_thread::octave_main_thread () : QThread ()
 {
 }
 
 void
 octave_main_thread::run ()
 {
   // Matlab uses "C" locale for LC_NUMERIC class regardless of local setting
@@ -129,13 +139,17 @@ octave_main_thread::run ()
   octave_value dbstop_fcn (new octave_builtin (dbstop_hook_fcn));
   octave_value dbstop_fcn_handle (new octave_fcn_handle (dbstop_fcn));
   Fadd_dbstop_hook (dbstop_fcn_handle);
 
   octave_value dbclear_fcn (new octave_builtin (dbclear_hook_fcn));
   octave_value dbclear_fcn_handle (new octave_fcn_handle (dbclear_fcn));
   Fadd_dbclear_hook (dbclear_fcn_handle);
 
+  octave_value edit_fcn (new octave_builtin (edit_hook_fcn));
+  octave_value edit_fcn_handle (new octave_fcn_handle (edit_fcn));
+  Fadd_edit_hook (edit_fcn_handle);
+
   // Prime the history list.
   octave_link::update_history ();
 
   octave_execute_interpreter ();
 }
diff --git a/libgui/src/octave-qt-event-listener.cc b/libgui/src/octave-qt-event-listener.cc
--- a/libgui/src/octave-qt-event-listener.cc
+++ b/libgui/src/octave-qt-event-listener.cc
@@ -72,16 +72,22 @@ octave_qt_event_listener::update_dbstop_
                                                 const std::string& file,
                                                 int line)
 {
   emit update_dbstop_marker_signal (insert, QString::fromStdString (file),
                                     line);
 }
 
 void
+octave_qt_event_listener::edit_file (const std::string& file)
+{
+  emit edit_file_signal (QString::fromStdString (file));
+}
+
+void
 octave_qt_event_listener::about_to_exit ()
 {
   qApp->quit ();
 }
 
 void
 octave_qt_event_listener::entered_debug_mode ()
 { emit entered_debug_mode_signal (); }
diff --git a/libgui/src/octave-qt-event-listener.h b/libgui/src/octave-qt-event-listener.h
--- a/libgui/src/octave-qt-event-listener.h
+++ b/libgui/src/octave-qt-event-listener.h
@@ -35,25 +35,27 @@ class octave_qt_event_listener
   octave_qt_event_listener (QObject *parent = 0);
 
   void current_directory_has_changed (const std::string& directory);
   void update_workspace (void);
   void update_history (void);
   void insert_debugger_pointer (const std::string& file, int line);
   void delete_debugger_pointer (const std::string& file, int line);
   void update_dbstop_marker (bool insert, const std::string& file, int line);
+  void edit_file (const std::string& file);
   void about_to_exit ();
 
   void entered_debug_mode ();
   void quit_debug_mode ();
 
 signals:
   void current_directory_has_changed_signal (const QString& directory);
   void update_workspace_signal (void);
   void update_history_signal (void);
   void insert_debugger_pointer_signal (const QString& file, int line);
   void delete_debugger_pointer_signal (const QString& file, int line);
   void update_dbstop_marker_signal (bool insert, const QString& file, int line);
+  void edit_file_signal (const QString& file);
   void entered_debug_mode_signal ();
   void quit_debug_mode_signal ();
 };
 
 #endif // OCTAVEQTEVENTLISTENER_H
diff --git a/libinterp/corefcn/__execute_edit_hook__.cc b/libinterp/corefcn/__execute_edit_hook__.cc
new file mode 100644
--- /dev/null
+++ b/libinterp/corefcn/__execute_edit_hook__.cc
@@ -0,0 +1,143 @@
+/*
+
+Copyright (C) 2013 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3 of the License, or (at
+your option) any later version.
+
+Octave is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "defun.h"
+#include "error.h"
+#include "defun.h"
+#include "hook-fcn.h"
+#include "oct-obj.h"
+
+static hook_function_list edit_hook_functions;
+
+DEFUN (add_edit_hook, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn  {Built-in Function} {@var{id} =} add_edit_hook (@var{fcn})\n\
+@deftypefnx {Built-in Function} {@var{id} =} add_edit_hook (@var{fcn}, @var{data})\n\
+Add the named function or function handle @var{fcn} to the list of functions to call\n\
+to handle editing files.  The function should have the form\n\
+\n\
+@example\n\
+@var{fcn} (@var{file}, @var{data})\n\
+@end example\n\
+\n\
+If @var{data} is omitted, Octave calls the function without one argument.\n\
+\n\
+The returned identifier may be used to remove the function handle from\n\
+the list of input hook functions.\n\
+@seealso{remove_edit_hook}\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1 || nargin == 2)
+    {
+      octave_value user_data;
+
+      if (nargin == 2)
+        user_data = args(1);
+
+      hook_function hook_fcn (args(0), user_data);
+
+      if (! error_state)
+        {
+          edit_hook_functions.insert (hook_fcn.id (), hook_fcn);
+
+          retval = hook_fcn.id ();
+        }
+      else
+        error ("add_edit_hook: expecting string as first arg");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
+DEFUN (remove_edit_hook, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} remove_edit_hook (@var{name})\n\
+@deftypefnx {Built-in Function} {} remove_input_event_hook (@var{fcn_id})\n\
+Remove the named function or function handle with the given identifier\n\
+from the list of functions to call to handle editing files.\n\
+@seealso{add_edit_hook}\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1 || nargin == 2)
+    {
+      std::string hook_fcn_id = args(0).string_value ();
+
+      bool warn = (nargin < 2);
+
+      if (! error_state)
+        {
+          hook_function_list::iterator p
+            = edit_hook_functions.find (hook_fcn_id);
+
+          if (p != edit_hook_functions.end ())
+            edit_hook_functions.erase (p);
+          else if (warn)
+            warning ("remove_edit_hook: %s not found in list",
+                     hook_fcn_id.c_str ());
+        }
+      else
+        error ("remove_edit_hook: argument not valid as a hook function name or id");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
+DEFUN (__execute_edit_hook__, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {@var{status} =} __execute_edit_hook__ (@var{file})\n\
+Undocumented internal function.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (edit_hook_functions.empty ())
+    retval = false;
+  else
+    {
+      edit_hook_functions.run (args);
+
+      retval = true;
+    }
+
+  return retval;
+}
+
+/*
+## No test needed for internal helper function.
+%!assert (1)
+*/
diff --git a/libinterp/corefcn/module.mk b/libinterp/corefcn/module.mk
--- a/libinterp/corefcn/module.mk
+++ b/libinterp/corefcn/module.mk
@@ -22,16 +22,17 @@ OPT_INC = \
 	mv $@-t $@
 
 $(OPT_INC) : %.h : %.in
 	$(MAKE) -C $(top_builddir)/liboctave/numeric $(@F)
 
 COREFCN_SRC = \
   corefcn/__contourc__.cc \
   corefcn/__dispatch__.cc \
+  corefcn/__execute_edit_hook__.cc \
   corefcn/__lin_interpn__.cc \
   corefcn/__pchip_deriv__.cc \
   corefcn/__qp__.cc \
   corefcn/balance.cc \
   corefcn/besselj.cc \
   corefcn/betainc.cc \
   corefcn/bitfcns.cc \
   corefcn/bsxfun.cc \
diff --git a/scripts/miscellaneous/edit.m b/scripts/miscellaneous/edit.m
--- a/scripts/miscellaneous/edit.m
+++ b/scripts/miscellaneous/edit.m
@@ -236,23 +236,26 @@ function ret = edit (varargin)
       editfilelist = varargin;
     else
       error('edit: if supplying more than one input all inputs must be strings containing fiel names to open.');
     endif
   endif
 
   ## Start the editor without a file if no file is given.
   if (nargin < 1)
-    if (exist (FUNCTION.HOME, "dir") == 7 && (isunix () || ! ispc ()))
-      system (cstrcat ("cd \"", FUNCTION.HOME, "\" ; ",
-                      sprintf (undo_string_escapes (FUNCTION.EDITOR), "")),
-              [], FUNCTION.MODE);
+    if (exist (FUNCTION.HOME, "dir") == 7)
+      curr_dir = pwd ();
+      unwind_protect
+        chdir (FUNCTION.HOME);
+        do_edit (FUNCTION.EDITOR, "", FUNCTION.MODE);
+      unwind_protect_cleanup
+        chdir (curr_dir);
+      end_unwind_protect
     else
-      system (sprintf (undo_string_escapes (FUNCTION.EDITOR), ""),
-              [], FUNCTION.MODE);
+      do_edit (FUNCTION.EDITOR, "", FUNCTION.MODE);
     endif
     return;
   endif
 
   if (numel(editfilelist) > 1)
 
     ## Call edit on each of the files in the list if there are more than 1
     for i = 1:numel(editfilelist)
@@ -324,54 +327,48 @@ function ret = edit (varargin)
         break;
       endif
     endfor
 
     if (! isempty (fileandpath))
       ## If the file exists, then edit it.
       if (FUNCTION.EDITINPLACE)
         ## Edit in place even if it is protected.
-        system (sprintf (undo_string_escapes (FUNCTION.EDITOR),
-                         cstrcat ("\"", fileandpath, "\"")),
-                [], FUNCTION.MODE);
+        do_edit (FUNCTION.EDITOR, fileandpath, FUNCTION.MODE);
         return;
       else
         ## If the file is modifiable in place then edit it, otherwise make
         ## a copy in HOME and then edit it.
         fid = fopen (fileandpath, "r+t");
         if (fid < 0)
           from = fileandpath;
           fileandpath = cstrcat (FUNCTION.HOME, from (rindex (from, filesep):end));
           [status, msg] = copyfile (from, fileandpath, 1);
           if (status == 0)
             error (msg);
           endif
         else
           fclose (fid);
         endif
-        system (sprintf (undo_string_escapes (FUNCTION.EDITOR),
-                         cstrcat ("\"", fileandpath, "\"")),
-                [], FUNCTION.MODE);
+        do_edit (FUNCTION.EDITOR, fileandpath, FUNCTION.MODE);
         return;
       endif
     endif
 
     ## If editing a new file that is neither a m-file or an oct-file,
     ## just edit it.
     fileandpath = file;
     idx = rindex (file, ".");
     name = file(1:idx-1);
     ext = file(idx+1:end);
     switch (ext)
       case {"cc", "m"}
         0;
       otherwise
-        system (sprintf (undo_string_escapes (FUNCTION.EDITOR),
-                         cstrcat ("\"", fileandpath, "\"")),
-                [], FUNCTION.MODE);
+        do_edit (FUNCTION.EDITOR, fileandpath, FUNCTION.MODE);
         return;
     endswitch
 
     ## The file doesn't exist in path so create it, put in the function
     ## template and edit it.
 
     ## Guess the email name if it was not given.
     if (isempty (FUNCTION.EMAIL))
@@ -510,20 +507,17 @@ function ret = edit (varargin)
     ## Write the initial file (if there is anything to write)
     fid = fopen (fileandpath, "wt");
     if (fid < 0)
       error ("edit: could not create %s", fileandpath);
     endif
     fputs (fid, text);
     fclose (fid);
 
-    ## Finally we are ready to edit it!
-    system (sprintf (undo_string_escapes (FUNCTION.EDITOR),
-                     cstrcat ("\"", fileandpath, "\"")),
-            [], FUNCTION.MODE);
+    do_edit (FUNCTION.EDITOR, fileandpath, FUNCTION.MODE);
             
   endif
 
 endfunction
 
 function ret = default_home ()
 
   ret = getenv ("HOME");
@@ -559,16 +553,31 @@ function ret = default_user (long_form)
       ret = ret(1:pos-1);
     endif
   else
     ret = ent.name;
   endif
 
 endfunction
 
+function do_edit (editor, file, mode)
+
+  ## Give the hook function a chance.  If that fails, fall back
+  ## on running an editor with the system function.
+
+  status = __execute_edit_hook__ (file);
+
+  if (! status)
+    system (sprintf (undo_string_escapes (editor),
+                     cstrcat ("\"", file, "\"")),
+            [], mode);
+  endif
+
+endfunction
+
 
 %!test
 %! s.editor = edit ("get", "editor");
 %! s.home = edit ("get", "home");
 %! s.author = edit ("get", "author");
 %! s.email = edit ("get", "email");
 %! s.license = edit ("get", "license");
 %! s.editinplace = edit ("get", "editinplace");
