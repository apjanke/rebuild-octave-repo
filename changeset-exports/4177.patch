# HG changeset patch
# User jwe
# Date 1037160593 0
#      Wed Nov 13 04:09:53 2002 +0000
# Node ID 34ef135b29faf1644de310a7e897ba43933e1b6b
# Parent  b8ec44432831ebe221880f177259b3b91d8fe51d
[project @ 2002-11-13 04:09:53 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,14 @@
+2002-11-12  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* interpreter/munge-texi.cc: Use STL map class by default, but
+	make it easy to revert back to libg++-based Map class if that
+	fails to work on some systems.
+
 2002-11-01  Dirk Eddelbuettel <edd@debian.org>
 
 	* interpreter/Makefile.in (MAN_BASE, MAN_SRC): New variables, use
 	as appropriate.
 
 2002-11-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
  	* interpreter/mkoctfile.1: New file.
diff --git a/doc/interpreter/munge-texi.cc b/doc/interpreter/munge-texi.cc
--- a/doc/interpreter/munge-texi.cc
+++ b/doc/interpreter/munge-texi.cc
@@ -15,29 +15,43 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
+#include <cctype>
 #include <iostream>
 #include <fstream>
 #include <string>
-#include <cctype>
-
-// Someday, I hope that standard template library stuff will just
-// work.  Until then...
-#include "Map.h"
 
 static const char doc_delim = '';
 
+// If this fails to compile and link for you, delete the following
+// define to use old non-standard GNU libg++ Map class.
+
+#define USE_STL
+
+#if defined (USE_STL)
+
+#include <map>
+
+static map<std::string, std::string> help_text
+  = map<std::string, std::string> ();
+
+#else
+
+#include "Map.h"
+
 static CHMap<std::string> help_text = CHMap<std::string> (std::string ());
 
+#endif
+
 static void
 fatal (const std::string& msg)
 {
   std::cerr << msg << "\n";
   exit (1);
 }
 
 static void
@@ -86,17 +100,21 @@ process_doc_file (const std::string& fna
       do
 	{
 	  symbol_name = extract_symbol_name (infile);
 
 	  if (! symbol_name.empty ())
 	    {
 	      std::string doc_string = extract_docstring (infile);
 
+#if defined (USE_STL)
+	      if (help_text.find (symbol_name) != help_text.end ())
+#else
 	      if (help_text.contains (symbol_name))
+#endif
 		std::cerr << "ignoring duplicate entry for "
 			  << symbol_name << "\n";
 	      else
 		help_text[symbol_name] = doc_string;
 	    }
 	}
       while (! symbol_name.empty ());
     }
