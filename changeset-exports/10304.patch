# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1265836356 -3600
#      Wed Feb 10 22:12:36 2010 +0100
# Node ID 2ceae0b40515b9783a77ae978ae01318b9648f3d
# Parent  e4899d6320b617a5464a91bb2d79a2e37a17bdcd
fix builtin_type for permutation matrices, avoid segfaults with invalid values in get_dispatch_type

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-02-10  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-perm.h (octave_perm_matrix::builtin_type): New function.
+	* symtab.cc (build_sup_table): Build the matrix with extra column
+	and row to avoid segfault when undefined value leaks in.
+	(get_dispatch_type): Update. Gripe if invalid result is detected.
+
 2010-02-10  John W. Eaton  <jwe@octave.org>
 
 	* data.cc: Ensure that CLOCKS_PER_SEC is defined instead of HZ.
 	(Fcputime): Use CLOCKS_PER_SEC instead of HZ.
 
 2010-02-10  John W. Eaton  <jwe@octave.org>
 
 	* data.cc: Include <sys/times.h>.  Define HZ if it is not defined.
diff --git a/src/ov-perm.h b/src/ov-perm.h
--- a/src/ov-perm.h
+++ b/src/ov-perm.h
@@ -95,16 +95,18 @@ public:
     { return to_dense ().is_sorted (mode); }
 
   Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const
     { return to_dense ().sort_rows_idx (mode); }
 
   sortmode is_sorted_rows (sortmode mode = UNSORTED) const
     { return to_dense ().is_sorted_rows (mode); }
 
+  builtin_type_t builtin_type (void) const { return btyp_double; }
+
   bool is_perm_matrix (void) const { return true; }
 
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -447,19 +447,20 @@ symbol_table::fcn_info::fcn_info_rep::he
 
   return retval;
 }
 
 // :-) JWE, can you parse this? Returns a 2D array with second dimension equal
 // to btyp_num_types (static constant). Only the leftmost dimension can be
 // variable in C/C++. Typedefs are boring.
 
-static builtin_type_t (*build_sup_table (void))[btyp_num_types]
+// For safety, we include btyp_unknown in the table
+static builtin_type_t (*build_sup_table (void))[btyp_num_types + 1]
 {
-  static builtin_type_t sup_table[btyp_num_types][btyp_num_types];
+  static builtin_type_t sup_table[btyp_num_types + 1][btyp_num_types + 1];
   for (int i = 0; i < btyp_num_types; i++)
     for (int j = 0; j < btyp_num_types; j++)
       {
         builtin_type_t ityp = static_cast<builtin_type_t> (i);
         builtin_type_t jtyp = static_cast<builtin_type_t> (j);
         // FIXME: Is this really right?
         bool use_j = 
           (jtyp == btyp_func_handle || ityp == btyp_bool
@@ -467,24 +468,30 @@ static builtin_type_t (*build_sup_table 
                && (! btyp_isarray (jtyp) 
                    || (btyp_isinteger (jtyp) && ! btyp_isinteger (ityp))
                    || ((ityp == btyp_double || ityp == btyp_complex || ityp == btyp_char)
                        && (jtyp == btyp_float || jtyp == btyp_float_complex)))));
 
         sup_table[i][j] = use_j ? jtyp : ityp;
       }
 
+  for (int i = 0; i <= btyp_num_types; i++)
+    {
+      sup_table[btyp_unknown][i] = btyp_unknown;
+      sup_table[i][btyp_unknown] = btyp_unknown;
+    }
+
   return sup_table;
 }
 
 std::string
 get_dispatch_type (const octave_value_list& args, 
                    bool& builtin_class)
 {
-  static builtin_type_t (*sup_table)[btyp_num_types] = build_sup_table ();
+  static builtin_type_t (*sup_table)[btyp_num_types+1] = build_sup_table ();
   std::string dispatch_type;
 
   int n = args.length ();
 
   if (n > 0)
     {
       // Find first object, if any.
 
@@ -525,17 +532,23 @@ get_dispatch_type (const octave_value_li
 
           builtin_type_t btyp = args(0).builtin_type ();
           for (int i = 1; i < n; i++)
             btyp = sup_table[btyp][args(i).builtin_type ()];
 
           if (btyp != btyp_unknown)
             dispatch_type = btyp_class_name[btyp];
           else
-            builtin_class = false;
+            {
+              // Basically, this should never happen if all values are defined.
+              // If not, that's an internal inconsistency.
+              builtin_class = false;
+              error ("internal error: undefined or invalid value in argument list");
+            }
+
         }
     }
 
   return dispatch_type;
 }
 
 std::string
 get_dispatch_type (const octave_value_list& args)
