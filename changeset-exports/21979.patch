# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1466927420 14400
#      Sun Jun 26 03:50:20 2016 -0400
# Node ID d04da18a407a31cb4c539d097253b0c69e6fe6f4
# Parent  b9c14f756009fdb0221ae8718a2dcfb64dae096e
use OCTAVE_USE_WINDOWS_API more consistently

* octave-gui.cc, thread-manager.cc, welcome-wizard.cc,
ft-text-renderer.cc, sighandlers.cc, sighandlers.h, sysdep.cc,
sysdep.h, toplev.cc, ov-java.cc, lo-sysdep.cc, kpse.cc, oct-mutex.cc,
oct-conf-post.in.h, main.in.cc, mkoctfile.in.cc, shared-fcns.h:
Prefer OCTAVE_USE_WINDOWS_API where possible.

diff --git a/libgui/src/octave-gui.cc b/libgui/src/octave-gui.cc
--- a/libgui/src/octave-gui.cc
+++ b/libgui/src/octave-gui.cc
@@ -152,17 +152,17 @@ octave_start_gui (int argc, char *argv[]
 
   if (start_gui)
     {
       // update network-settings
       resource_manager::update_network_settings ();
 
       // We provide specific terminal capabilities, so ensure that TERM is
       // always set appropriately
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
       octave::sys::env::putenv ("TERM", "cygwin");
 #else
       octave::sys::env::putenv ("TERM", "xterm");
 #endif
 
       // shortcut manager
       shortcut_manager::init_data ();
     }
diff --git a/libgui/src/thread-manager.cc b/libgui/src/thread-manager.cc
--- a/libgui/src/thread-manager.cc
+++ b/libgui/src/thread-manager.cc
@@ -19,27 +19,27 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
 #  include <windows.h>
 #else
 #  include <pthread.h>
 #endif
 
 #include "signal-wrappers.h"
 
 #include "thread-manager.h"
 
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
 
 class windows_thread_manager : public octave_base_thread_manager
 {
 public:
 
   windows_thread_manager (void) : octave_base_thread_manager () { }
 
   void register_current_thread (void) { }
@@ -110,14 +110,14 @@ void
 octave_thread_manager::unblock_interrupt_signal (void)
 {
   octave_unblock_interrupt_signal ();
 }
 
 octave_base_thread_manager *
 octave_thread_manager::create_rep (void)
 {
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
   return new windows_thread_manager ();
 #else
   return new pthread_thread_manager ();
 #endif
 }
diff --git a/libgui/src/welcome-wizard.cc b/libgui/src/welcome-wizard.cc
--- a/libgui/src/welcome-wizard.cc
+++ b/libgui/src/welcome-wizard.cc
@@ -25,17 +25,17 @@ along with Octave; see the file COPYING.
 #  include "config.h"
 #endif
 
 #include <QApplication>
 #include <QPushButton>
 #include <QHBoxLayout>
 #include <QVBoxLayout>
 
-#if defined (__WIN32__)
+#if defined (OCTAVE_USE_WINDOWS_API)
   #define WIN32_LEAN_AND_MEAN
   #include <windows.h>
 #endif
 
 #include "welcome-wizard.h"
 #include "resource-manager.h"
 
 static QLabel *
@@ -284,17 +284,17 @@ welcome_wizard::welcome_wizard (QWidget 
   setWindowTitle (tr ("Welcome to GNU Octave"));
 
   setEnabled (true);
   resize (600, 480);
   setMinimumSize (QSize (600, 480));
 
   show_page ();
 
-#if defined (__WIN32__)
+#if defined (OCTAVE_USE_WINDOWS_API)
   // HACK to forceshow of dialog if started minimized
   ShowWindow((HWND)winId(), SW_SHOWNORMAL);
 #endif
 }
 
 void
 welcome_wizard::handle_web_connect_option (int state)
 {
diff --git a/libinterp/corefcn/ft-text-renderer.cc b/libinterp/corefcn/ft-text-renderer.cc
--- a/libinterp/corefcn/ft-text-renderer.cc
+++ b/libinterp/corefcn/ft-text-renderer.cc
@@ -256,17 +256,17 @@ private:
           }
 
         FcPatternDestroy (pat);
       }
 #endif
 
     if (file.empty ())
       {
-#if defined (__WIN32__)
+#if defined (OCTAVE_USE_WINDOWS_API)
         file = "C:/WINDOWS/Fonts/verdana.ttf";
 #else
         // FIXME: find a "standard" font for UNIX platforms
 #endif
       }
 
     if (! file.empty ())
       {
diff --git a/libinterp/corefcn/sighandlers.cc b/libinterp/corefcn/sighandlers.cc
--- a/libinterp/corefcn/sighandlers.cc
+++ b/libinterp/corefcn/sighandlers.cc
@@ -70,17 +70,17 @@ static bool Vsighup_dumps_octave_core = 
 static bool Vsigterm_dumps_octave_core = true;
 
 // List of signals we have caught since last call to octave_signal_handler.
 static bool *octave_signals_caught = 0;
 
 // Forward declaration.
 static void user_abort (const char *sig_name, int sig_number);
 
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
 
 #define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 
 class
 w32_interrupt_manager
 {
 public:
@@ -413,17 +413,17 @@ user_abort (const char *sig_name, int si
             }
         }
 
       if (octave_interrupt_immediately)
         {
           if (octave_interrupt_state == 0)
             octave_interrupt_state = 1;
 
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
           w32_interrupt_manager::octave_jump_to_enclosing_context ();
 #else
           octave_jump_to_enclosing_context ();
 #endif
         }
       else
         {
           // If we are already cleaning up from a previous interrupt,
@@ -445,17 +445,17 @@ user_abort (const char *sig_name, int si
         }
     }
 
 }
 
 static void
 sigint_handler (int sig)
 {
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
   w32_interrupt_manager::user_abort (octave_strsignal_wrapper (sig), sig);
 #else
   user_abort (octave_strsignal_wrapper (sig), sig);
 #endif
 }
 
 static void
 sigpipe_handler (int sig)
@@ -470,48 +470,48 @@ sigpipe_handler (int sig)
     octave_interrupt_state++;
 }
 
 octave_interrupt_handler
 octave_catch_interrupts (void)
 {
   octave_interrupt_handler retval;
 
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
   w32_interrupt_manager::init ();
 #endif
 
   retval.int_handler = octave_set_signal_handler ("SIGINT", sigint_handler);
   retval.brk_handler = octave_set_signal_handler ("SIGBREAK", sigint_handler);
 
   return retval;
 }
 
 octave_interrupt_handler
 octave_ignore_interrupts (void)
 {
   octave_interrupt_handler retval;
 
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
   w32_interrupt_manager::init ();
 #endif
 
   retval.int_handler = octave_set_signal_handler ("SIGINT", SIG_IGN);
   retval.brk_handler = octave_set_signal_handler ("SIGBREAK", SIG_IGN);
 
   return retval;
 }
 
 octave_interrupt_handler
 octave_set_interrupt_handler (const volatile octave_interrupt_handler& h,
                               bool restart_syscalls)
 {
   octave_interrupt_handler retval;
 
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
   w32_interrupt_manager::init ();
 #endif
 
   retval.int_handler = octave_set_signal_handler ("SIGINT", h.int_handler,
                                                   restart_syscalls);
 
   retval.brk_handler = octave_set_signal_handler ("SIGBREAK", h.brk_handler,
                                                   restart_syscalls);
diff --git a/libinterp/corefcn/sighandlers.h b/libinterp/corefcn/sighandlers.h
--- a/libinterp/corefcn/sighandlers.h
+++ b/libinterp/corefcn/sighandlers.h
@@ -70,17 +70,17 @@ extern OCTINTERP_API void octave_signal_
 extern OCTINTERP_API octave_interrupt_handler octave_catch_interrupts (void);
 
 extern OCTINTERP_API octave_interrupt_handler octave_ignore_interrupts (void);
 
 extern OCTINTERP_API octave_interrupt_handler
 octave_set_interrupt_handler (const volatile octave_interrupt_handler&,
                               bool restart_syscalls = true);
 
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
 extern OCTINTERP_API void w32_raise_sigint (void);
 #endif
 
 // extern void ignore_sigchld (void);
 
 // Maybe this should be in a separate file?
 
 class
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -101,17 +101,17 @@ BSD_init (void)
 #    if ! defined (FP_X_DNML)
 #      define FP_X_DNML 0
 #    endif
   fpsetmask (~(FP_X_OFL|FP_X_INV|FP_X_DZ|FP_X_DNML|FP_X_UFL|FP_X_IMP));
 #  endif
 }
 #endif
 
-#if defined (__WIN32__) && ! defined (_POSIX_VERSION)
+#if defined (OCTAVE_USE_WINDOWS_API)
 
 #define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #include <tlhelp32.h>
 #include <shellapi.h>
 
 static void
 w32_set_octave_home (void)
@@ -198,17 +198,17 @@ Undocumented internal function.
 {
   if (args.length () != 1)
     print_usage ();
 
   std::string file = args(0).xstring_value ("__open_with_system_app__: argument must be a filename");
 
   octave_value retval;
 
-#if defined (__WIN32__) && ! defined (_POSIX_VERSION)
+#if defined (OCTAVE_USE_WINDOWS_API)
   HINSTANCE status = ShellExecute (0, 0, file.c_str (), 0, 0,
                                    SW_SHOWNORMAL);
 
   // ShellExecute returns a value greater than 32 if successful.
   retval = (reinterpret_cast<ptrdiff_t> (status) > 32);
 #elif defined (__APPLE__)
   octave_value_list tmp
     = Fsystem (ovl ("open " + file + " 2> /dev/null",
@@ -557,17 +557,17 @@ octave_kbhit (bool wait)
 #endif
 
   return c;
 }
 
 std::string
 get_P_tmpdir (void)
 {
-#if defined (__WIN32__) && ! defined (_POSIX_VERSION)
+#if defined (OCTAVE_USE_WINDOWS_API)
 
   std::string retval;
 
 #if defined (P_tmpdir)
   retval = P_tmpdir;
 #endif
 
   // Apparently some versions of MinGW and MSVC either don't define
diff --git a/libinterp/corefcn/sysdep.h b/libinterp/corefcn/sysdep.h
--- a/libinterp/corefcn/sysdep.h
+++ b/libinterp/corefcn/sysdep.h
@@ -42,17 +42,17 @@ extern OCTINTERP_API FILE *octave_popen 
 extern OCTINTERP_API int octave_pclose (FILE *f);
 
 extern OCTINTERP_API int octave_kbhit (bool wait = true);
 
 extern OCTINTERP_API std::string get_P_tmpdir (void);
 
 extern void w32_set_quiet_shutdown (void);
 
-#if defined (__WIN32__) && ! defined (_POSIX_VERSION)
+#if defined (OCTAVE_USE_WINDOWS_API)
 extern void MINGW_signal_cleanup (void);
 #  define MINGW_SIGNAL_CLEANUP() MINGW_signal_cleanup ()
 #else
 #  define MINGW_SIGNAL_CLEANUP() do { } while (0)
 #endif
 
 extern OCTINTERP_API bool same_file_internal (const std::string&,
                                               const std::string&);
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -30,17 +30,17 @@ along with Octave; see the file COPYING.
 #include <cstring>
 #include <new>
 
 #include <fstream>
 #include <iostream>
 #include <sstream>
 #include <string>
 
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
 #  define WIN32_LEAN_AND_MEAN 1
 #  include <windows.h>
 #endif
 
 #include "cmd-edit.h"
 #include "cmd-hist.h"
 #include "file-ops.h"
 #include "lo-error.h"
@@ -1137,17 +1137,17 @@ command shell that is started to run the
         }
     }
 
   if (return_output && type == et_async)
     error ("system: can't return output from commands run asynchronously");
 
   std::string cmd_str = args(0).xstring_value ("system: first argument must be a string");
 
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
   // Work around weird double-quote handling on Windows systems.
   if (type == et_sync)
     cmd_str = "\"" + cmd_str + "\"";
 #endif
 
   if (type == et_async)
     {
       // FIXME: maybe this should go in sysdep.cc?
@@ -1161,17 +1161,17 @@ command shell that is started to run the
           // FIXME: should probably replace this call with something portable.
           execl (SHELL_PATH, "sh", "-c", cmd_str.c_str (),
                  static_cast<char *> (0));
 
           panic_impossible ();
         }
       else
         retval(0) = pid;
-#elif defined (__WIN32__)
+#elif defined (OCTAVE_USE_WINDOWS_API)
       STARTUPINFO si;
       PROCESS_INFORMATION pi;
       ZeroMemory (&si, sizeof (si));
       ZeroMemory (&pi, sizeof (pi));
       OCTAVE_LOCAL_BUFFER (char, xcmd_str, cmd_str.length ()+1);
       strcpy (xcmd_str, cmd_str.c_str ());
 
       if (! CreateProcess (0, xcmd_str, 0, 0, FALSE, 0, 0, 0, &si, &pi))
@@ -1624,17 +1624,17 @@ specified option.
           else
             break;
         }
 
       bool unix_system = true;
       bool mac_system = false;
       bool windows_system = false;
 
-#if defined (WIN32)
+#if defined (__WIN32__)
       windows_system = true;
 #if ! defined (__CYGWIN__)
       unix_system = false;
 #endif
 #endif
 
 #if defined (OCTAVE_USE_OS_X_API)
       mac_system = true;
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -271,17 +271,17 @@ private:
 
 private:
 
   JavaVMInitArgs vm_args;
 
   std::list<std::string> java_opts;
 };
 
-#if defined (__WIN32__)
+#if defined (OCTAVE_USE_WINDOWS_API)
 
 static std::string
 read_registry_string (const std::string& key, const std::string& value)
 {
   HKEY hkey;
   DWORD len;
 
   std::string retval;
@@ -510,17 +510,17 @@ initialize_jvm (void)
   // Most of the time JVM already exists and has been initialized.
   if (jvm)
     return;
 
   JNIEnv *current_env;
   const char *static_locale = setlocale (LC_ALL, 0);
   const std::string locale (static_locale);
 
-#if defined (__WIN32__)
+#if defined (OCTAVE_USE_WINDOWS_API)
 
   HMODULE hMod = GetModuleHandle ("jvm.dll");
   std::string jvm_lib_path;
   std::string old_cwd;
 
   if (hMod)
     {
       // JVM seems to be already loaded, better to use that DLL instead
@@ -590,17 +590,17 @@ initialize_jvm (void)
 #if ! defined (__APPLE__) && ! defined (__MACH__)
 
   octave::dynamic_library lib (jvm_lib_path);
 
   if (! lib)
     error ("unable to load Java Runtime Environment from %s",
            jvm_lib_path.c_str ());
 
-#if defined (__WIN32__)
+#if defined (OCTAVE_USE_WINDOWS_API)
 
   set_dll_directory ();
 
   if (! old_cwd.empty ())
     octave::sys::env::chdir (old_cwd);
 
 #endif
 
diff --git a/liboctave/system/lo-sysdep.cc b/liboctave/system/lo-sysdep.cc
--- a/liboctave/system/lo-sysdep.cc
+++ b/liboctave/system/lo-sysdep.cc
@@ -55,17 +55,17 @@ namespace octave
       return retval;
     }
 
     int
     chdir (const std::string& path_arg)
     {
       std::string path = octave::sys::file_ops::tilde_expand (path_arg);
 
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
       if (path.length () == 2 && path[1] == ':')
         path += "\\";
 #endif
 
       return octave_chdir_wrapper (path.c_str ());
     }
   }
 }
diff --git a/liboctave/util/kpse.cc b/liboctave/util/kpse.cc
--- a/liboctave/util/kpse.cc
+++ b/liboctave/util/kpse.cc
@@ -44,17 +44,17 @@ along with Octave; see the file COPYING.
 #include "file-ops.h"
 #include "file-stat.h"
 #include "kpse.h"
 #include "oct-env.h"
 #include "oct-passwd.h"
 #include "pathsearch.h"
 #include "unistd-wrappers.h"
 
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
 #  define WIN32_LEAN_AND_MEAN 1
 #  include <windows.h>
 #endif
 
 // Define the characters which separate components of filenames and
 // environment variable paths.
 
 #define IS_DEVICE_SEP(ch) octave::sys::file_ops::is_dev_sep (ch)
@@ -161,17 +161,17 @@ kpse_truncate_filename (const std::strin
   return ret;
 }
 
 /* If access can read FN, run stat (assigning to stat buffer ST) and
    check that fn is not a directory.  Don't check for just being a
    regular file, as it is potentially useful to read fifo's or some
    kinds of devices.  */
 
-#if defined (__WIN32__)
+#if defined (OCTAVE_USE_WINDOWS_API)
 static inline bool
 READABLE (const std::string& fn)
 {
   const char *t = fn.c_str ();
   return (GetFileAttributes (t) != 0xFFFFFFFF
           && ! (GetFileAttributes (t) & FILE_ATTRIBUTE_DIRECTORY));
 }
 #else
diff --git a/liboctave/util/oct-mutex.cc b/liboctave/util/oct-mutex.cc
--- a/liboctave/util/oct-mutex.cc
+++ b/liboctave/util/oct-mutex.cc
@@ -22,17 +22,17 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include "oct-mutex.h"
 #include "lo-error.h"
 
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
 #  include <windows.h>
 #elif defined (HAVE_PTHREAD_H)
 #  include <pthread.h>
 #endif
 
 void
 octave_base_mutex::lock (void)
 {
@@ -48,17 +48,17 @@ octave_base_mutex::unlock (void)
 bool
 octave_base_mutex::try_lock (void)
 {
   (*current_liboctave_error_handler) ("mutex not supported on this platform");
 
   return false;
 }
 
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
 
 class
 octave_w32_mutex : public octave_base_mutex
 {
 public:
   octave_w32_mutex (void)
     : octave_base_mutex ()
   {
@@ -158,17 +158,17 @@ octave_thread::is_octave_thread (void)
   return (pthread_equal (octave_thread_id, pthread_self ()) != 0);
 }
 
 #endif
 
 static octave_base_mutex *
 init_rep (void)
 {
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
   return new octave_w32_mutex ();
 #elif defined (HAVE_PTHREAD_H)
   return new octave_pthread_mutex ();
 #else
   return new octave_base_mutex ();
 #endif
 }
 
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -75,30 +75,30 @@ typedef unsigned long ino_t;
    /* missing parameters in macros */
 #  pragma warning (disable: 4003)
    /* missing implementations in template instantiation */
 #  pragma warning (disable: 4996)
    /* deprecated function names (FIXME: ???) */
 #  pragma warning (disable: 4661)
 #endif
 
+/* Define to 1 if we expect to have <windows.h>, Sleep, etc. */
 #if defined (__WIN32__) && ! defined (__CYGWIN__)
+#  define OCTAVE_USE_WINDOWS_API 1
+#endif
+
+#if defined (OCTAVE_USE_WINDOWS_API)
 #  define OCTAVE_HAVE_WINDOWS_FILESYSTEM 1
 #elif defined (__CYGWIN__)
 #  define OCTAVE_HAVE_WINDOWS_FILESYSTEM 1
 #  define OCTAVE_HAVE_POSIX_FILESYSTEM 1
 #else
 #  define OCTAVE_HAVE_POSIX_FILESYSTEM 1
 #endif
 
-/* Define to 1 if we expect to have <windows.h>, Sleep, etc. */
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
-#  define OCTAVE_USE_WINDOWS_API 1
-#endif
-
 #if defined (__APPLE__) && defined (__MACH__)
 #  define OCTAVE_USE_OS_X_API 1
 #endif
 
 /* sigsetjmp is a macro, not a function. */
 #if defined (sigsetjmp) && defined (HAVE_SIGLONGJMP)
 #  define OCTAVE_HAVE_SIG_JUMP 1
 #endif
diff --git a/src/main.in.cc b/src/main.in.cc
--- a/src/main.in.cc
+++ b/src/main.in.cc
@@ -59,18 +59,17 @@ along with Octave; see the file COPYING.
 
 #if ! defined (OCTAVE_PREFIX)
 #  define OCTAVE_PREFIX %OCTAVE_PREFIX%
 #endif
 
 #include "display-available.h"
 #include "shared-fcns.h"
 
-#if (defined (HAVE_OCTAVE_QT_GUI) \
-     && ! defined (__WIN32__) || defined (__CYGWIN__))
+#if defined (HAVE_OCTAVE_QT_GUI) && ! defined (OCTAVE_USE_WINDOWS_API)
 
 // Forward signals to the GUI process.
 
 static pid_t gui_pid = 0;
 
 static int caught_signal = -1;
 
 static void
@@ -313,24 +312,23 @@ main (int argc, char **argv)
                 display_check_err_msg = "graphical display unavailable";
 
               std::cerr << "octave: " << display_check_err_msg << std::endl;
               std::cerr << "octave: disabling GUI features" << std::endl;
             }
         }
     }
 
-#if defined (__WIN32__) && ! defined (__CYGWIN__)
+#if defined (OCTAVE_USE_WINDOWS_API)
   file += ".exe";
 #endif
 
   new_argv[0] = strsave (file.c_str ());
 
-#if (defined (HAVE_OCTAVE_QT_GUI) \
-     && ! defined (__WIN32__) || defined (__CYGWIN__))
+#if defined (HAVE_OCTAVE_QT_GUI) && ! defined (OCTAVE_USE_WINDOWS_API)
 
   if (gui_libs && start_gui && have_controlling_terminal ())
     {
       install_signal_handlers ();
 
       gui_pid = octave_fork_wrapper ();
 
       if (gui_pid < 0)
diff --git a/src/mkoctfile.in.cc b/src/mkoctfile.in.cc
--- a/src/mkoctfile.in.cc
+++ b/src/mkoctfile.in.cc
@@ -138,17 +138,17 @@ initialize (void)
   DEFAULT_LIBDIR = subst_octave_home (DEFAULT_LIBDIR);
   DEFAULT_OCTLIBDIR = subst_octave_home (DEFAULT_OCTLIBDIR);
 
   vars["OCTINCLUDEDIR"] = get_variable ("OCTINCLUDEDIR", DEFAULT_OCTINCLUDEDIR);
   vars["INCLUDEDIR"] = get_variable ("INCLUDEDIR", DEFAULT_INCLUDEDIR);
   vars["LIBDIR"] = get_variable ("LIBDIR", DEFAULT_LIBDIR);
   vars["OCTLIBDIR"] = get_variable ("OCTLIBDIR", DEFAULT_OCTLIBDIR);
 
-#if defined (__WIN32__) && ! defined (_POSIX_VERSION)
+#if defined (OCTAVE_USE_WINDOWS_API)
   std::string DEFAULT_INCFLAGS
     = "-I" + quote_path (vars["OCTINCLUDEDIR"] + "\\..")
       + " -I" + quote_path (vars["OCTINCLUDEDIR"]);
 #else
   std::string DEFAULT_INCFLAGS
     = "-I" + quote_path (vars["OCTINCLUDEDIR"] + "/..")
       + " -I" + quote_path (vars["OCTINCLUDEDIR"]);
 #endif
@@ -251,17 +251,17 @@ static std::string help_msg =
 "  -DDEF                   Add -DDEF to compile commands.\n"
 "\n"
 "  -lLIB                   Add library LIB to link command.\n"
 "\n"
 "  -LDIR                   Add -LDIR to link command.\n"
 "\n"
 "  -M, --depend            Generate dependency files (.d) for C and C++\n"
 "                          source files.\n"
-#if ! defined (__WIN32__) || defined (_POSIX_VERSION)
+#if ! defined (OCTAVE_USE_WINDOWS_API)
 "\n"
 "  -pthread                Add -pthread to link command.\n"
 #endif
 "\n"
 "  -RDIR                   Add -RDIR to link command.\n"
 "\n"
 "  -Wl,...                 Pass flags though the linker like -Wl,-rpath=...\n"
 "\n"
@@ -493,17 +493,17 @@ main (int argc, char **argv)
         {
           defs += (" " + arg);
         }
       else if (starts_with (arg, "-Wl,") || starts_with (arg, "-l")
                || starts_with (arg, "-L") || starts_with (arg, "-R"))
         {
           ldflags += (" " + arg);
         }
-#if ! defined (__WIN32__) || defined (_POSIX_VERSION)
+#if ! defined (OCTAVE_USE_WINDOWS_API)
       else if (arg == "-pthread")
         {
           ldflags += (" " + arg);
         }
 #endif
       else if (arg == "-M" || arg == "-depend" || arg == "--depend")
         {
           depend = true;
diff --git a/src/shared-fcns.h b/src/shared-fcns.h
--- a/src/shared-fcns.h
+++ b/src/shared-fcns.h
@@ -18,17 +18,17 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if ! defined (octave_shared_fcns_h)
 #define octave_shared_fcns_h 1
 
-#if defined (__WIN32__) && ! defined (_POSIX_VERSION)
+#if defined (OCTAVE_USE_WINDOWS_API)
 
 #include <windows.h>
 #include <tlhelp32.h>
 
 #if defined (_MSC_VER)
 #  define popen _popen
 #  define pclose _pclose
 #endif
@@ -106,17 +106,17 @@ octave_getenv (const std::string& name)
   return value ? value : "";
 }
 
 static std::string
 get_octave_home (void)
 {
   std::string oh = octave_getenv ("OCTAVE_HOME");
 
-#if defined (__WIN32__) && ! defined (_POSIX_VERSION)
+#if defined (OCTAVE_USE_WINDOWS_API)
   if (oh.empty ())
     oh = w32_get_octave_home ();
 #endif
 
   return oh.empty () ? std::string (OCTAVE_PREFIX) : oh;
 }
 
 static std::string
