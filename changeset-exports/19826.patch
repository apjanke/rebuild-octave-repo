# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1424644769 18000
#      Sun Feb 22 17:39:29 2015 -0500
# Node ID 26fb4bfa4193d77e167de715a44b7d32922b23b0
# Parent  bc3e6e96da81dcaea4f797cccb4e9adf2d5a52e5
blackman, hamming, hanning: Add periodic window option (bug #43305)

* blackman.m, hamming.m, hanning.m: Add Matlab compatible option to
return the periodic form of the window.  Add %!tests for new behavior.

diff --git a/scripts/signal/blackman.m b/scripts/signal/blackman.m
--- a/scripts/signal/blackman.m
+++ b/scripts/signal/blackman.m
@@ -12,55 +12,88 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} blackman (@var{m})
+## @deftypefn  {Function File} {} blackman (@var{m})
+## @deftypefnx {Function File} {} blackman (@var{m}, "periodic")
+## @deftypefnx {Function File} {} blackman (@var{m}, "symmetric")
 ## Return the filter coefficients of a Blackman window of length @var{m}.
 ##
+## If the optional argument @qcode{"periodic"} is given, the periodic form
+## of the window is returned.  This is equivalent to the window of length
+## @var{m}+1 with the last coefficient removed.  The optional argument
+## @qcode{"symmetric"} is equivalent to not specifying a second argument.
+##
 ## For a definition of the Blackman window, see e.g.,
 ## @nospell{A.V. Oppenheim & R. W. Schafer},
 ## @cite{Discrete-Time Signal Processing}.
 ## @end deftypefn
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Description: Coefficients of the Blackman window
 
-function c = blackman (m)
+function c = blackman (m, opt)
 
-  if (nargin != 1)
+  if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
   if (! (isscalar (m) && (m == fix (m)) && (m > 0)))
-    error ("blackman: M has to be an integer > 0");
+    error ("blackman: M must be a positive integer");
+  endif
+
+  periodic = false;
+  if (nargin == 2)
+    switch (opt)
+      case "periodic"
+        periodic = true;
+      case "symmetric"
+        ## Default option, same as no option specified.
+      otherwise
+        error ('blackman: window type must be either "periodic" or "symmetric"');
+    endswitch
   endif
 
   if (m == 1)
     c = 1;
   else
-    m = m - 1;
+    if (! periodic)
+      m = m - 1;
+    endif
     k = (0 : m)' / m;
     c = 0.42 - 0.5 * cos (2 * pi * k) + 0.08 * cos (4 * pi * k);
   endif
 
+  if (periodic)
+    c = c(1:end-1);
+  endif
+
 endfunction
 
 
 %!assert (blackman (1), 1)
 %!assert (blackman (2), zeros (2,1), 1e-6)
 %!assert (blackman (16), fliplr (blackman (16)))
 %!assert (blackman (15), fliplr (blackman (15)))
 %!test
 %! N = 9;
 %! A = blackman (N);
 %! assert (A (ceil (N/2)), 1, 1e-6);
 %! assert ([A(1), A(length (A))], zeros (1, 2), 1e-6);
 
+%!assert (blackman (15), blackman (15, "symmetric"));
+%!assert (blackman (16)(1:15), blackman (15, "periodic"));
+%!test
+%! N = 16;
+%! A = blackman (N, "periodic");
+%! assert (A (N/2 + 1), 1, 1e-6);
+
 %!error blackman ()
 %!error blackman (0.5)
 %!error blackman (-1)
 %!error blackman (ones (1,4))
+%!error blackman (1, "invalid");
 
diff --git a/scripts/signal/hamming.m b/scripts/signal/hamming.m
--- a/scripts/signal/hamming.m
+++ b/scripts/signal/hamming.m
@@ -12,53 +12,86 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} hamming (@var{m})
+## @deftypefn  {Function File} {} hamming (@var{m})
+## @deftypefnx {Function File} {} hamming (@var{m}, "periodic")
+## @deftypefnx {Function File} {} hamming (@var{m}, "symmetric")
 ## Return the filter coefficients of a Hamming window of length @var{m}.
 ##
+## If the optional argument @qcode{"periodic"} is given, the periodic form
+## of the window is returned.  This is equivalent to the window of length
+## @var{m}+1 with the last coefficient removed.  The optional argument
+## @qcode{"symmetric"} is equivalent to not specifying a second argument.
+##
 ## For a definition of the Hamming window, see e.g.,
 ## @nospell{A.V. Oppenheim & R. W. Schafer},
 ## @cite{Discrete-Time Signal Processing}.
 ## @end deftypefn
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Description: Coefficients of the Hamming window
 
-function c = hamming (m)
+function c = hamming (m, opt)
 
-  if (nargin != 1)
+  if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
   if (! (isscalar (m) && (m == fix (m)) && (m > 0)))
-    error ("hamming: M has to be an integer > 0");
+    error ("hamming: M must be a positive integer");
+  endif
+
+  periodic = false;
+  if (nargin == 2)
+    switch (opt)
+      case "periodic"
+        periodic = true;
+      case "symmetric"
+        ## Default option, same as no option specified.
+      otherwise
+        error ('hamming: window type must be either "periodic" or "symmetric"');
+    endswitch
   endif
 
   if (m == 1)
     c = 1;
   else
-    m = m - 1;
+    if (! periodic)
+      m = m - 1;
+    endif
     c = 0.54 - 0.46 * cos (2 * pi * (0:m)' / m);
   endif
 
+  if (periodic)
+    c = c(1:end-1);
+  endif
+
 endfunction
 
 
 %!assert (hamming (1), 1)
 %!assert (hamming (2), (0.54 - 0.46)*ones (2,1))
 %!assert (hamming (16), fliplr (hamming (16)))
 %!assert (hamming (15), fliplr (hamming (15)))
 %!test
 %! N = 15;
 %! A = hamming (N);
 %! assert (A (ceil (N/2)), 1);
 
+%!assert (hamming (15), hamming (15, "symmetric"));
+%!assert (hamming (16)(1:15), hamming (15, "periodic"));
+%!test
+%! N = 16;
+%! A = hamming (N, "periodic");
+%! assert (A (N/2 + 1), 1);
+
 %!error hamming ()
 %!error hamming (0.5)
 %!error hamming (-1)
 %!error hamming (ones (1,4))
+%!error hamming (1, "invalid");
 
diff --git a/scripts/signal/hanning.m b/scripts/signal/hanning.m
--- a/scripts/signal/hanning.m
+++ b/scripts/signal/hanning.m
@@ -12,53 +12,86 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} hanning (@var{m})
+## @deftypefn  {Function File} {} hanning (@var{m})
+## @deftypefnx {Function File} {} hanning (@var{m}, "periodic")
+## @deftypefnx {Function File} {} hanning (@var{m}, "symmetric")
 ## Return the filter coefficients of a Hanning window of length @var{m}.
 ##
+## If the optional argument @qcode{"periodic"} is given, the periodic form
+## of the window is returned.  This is equivalent to the window of length
+## @var{m}+1 with the last coefficient removed.  The optional argument
+## @qcode{"symmetric"} is equivalent to not specifying a second argument.
+##
 ## For a definition of the Hanning window, see e.g.,
 ## @nospell{A.V. Oppenheim & R. W. Schafer},
 ## @cite{Discrete-Time Signal Processing}.
 ## @end deftypefn
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Description: Coefficients of the Hanning window
 
-function c = hanning (m)
+function c = hanning (m, opt)
 
-  if (nargin != 1)
+  if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
   if (! (isscalar (m) && (m == fix (m)) && (m > 0)))
-    error ("hanning: M has to be an integer > 0");
+    error ("hanning: M must be a positive integer");
+  endif
+
+  periodic = false;
+  if (nargin == 2)
+    switch (opt)
+      case "periodic"
+        periodic = true;
+      case "symmetric"
+        ## Default option, same as no option specified.
+      otherwise
+        error ('hanning: window type must be either "periodic" or "symmetric"');
+    endswitch
   endif
 
   if (m == 1)
     c = 1;
   else
-    m = m - 1;
+    if (! periodic)
+      m = m - 1;
+    endif
     c = 0.5 - 0.5 * cos (2 * pi * (0 : m)' / m);
   endif
 
+  if (periodic)
+    c = c(1:end-1);
+  endif
+
 endfunction
 
 
 %!assert (hanning (1), 1);
 %!assert (hanning (2), zeros (2,1));
 %!assert (hanning (16), fliplr (hanning (16)));
 %!assert (hanning (15), fliplr (hanning (15)));
 %!test
 %! N = 15;
 %! A = hanning (N);
 %! assert (A(ceil (N/2)), 1);
 
+%!assert (hanning (15), hanning (15, "symmetric"));
+%!assert (hanning (16)(1:15), hanning (15, "periodic"));
+%!test
+%! N = 16;
+%! A = hanning (N, "periodic");
+%! assert (A (N/2 + 1), 1);
+
 %!error hanning ()
 %!error hanning (0.5)
 %!error hanning (-1)
 %!error hanning (ones (1,4))
+%!error hanning (1, "invalid");
 
