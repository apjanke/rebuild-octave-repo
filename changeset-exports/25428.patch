# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1528146950 -7200
#      Mon Jun 04 23:15:50 2018 +0200
# Branch stable
# Node ID 2b3c3c8c836076fdf3acdb8be3b63d9554ebd33c
# Parent  beb43248d60222a5f3b172dfe43594e7d5186a10
Properly test Qt offscreen printing during manual figures generation.

* geometryimages.m, interpimages.m, plotimages.m, sparseimages.m, splineimages.m:
  test QT_OFFSCREEN variable rather than QOFFSCREENSURFACE.

diff --git a/doc/interpreter/geometryimages.m b/doc/interpreter/geometryimages.m
--- a/doc/interpreter/geometryimages.m
+++ b/doc/interpreter/geometryimages.m
@@ -138,17 +138,17 @@ endfunction
 ## This function no longer sets the graphics toolkit; That is now done
 ## automatically by C++ code which will ordinarily choose 'qt', but might
 ## choose gnuplot on older systems.  Only a complete lack of plotting is a
 ## problem.
 function set_graphics_toolkit ()
   if (isempty (available_graphics_toolkits ()))
     error ("no graphics toolkit available for plotting");
   elseif (strcmp ("qt", graphics_toolkit ())
-          && __have_feature__ ("QOFFSCREENSURFACE"))
+          && __have_feature__ ("QT_OFFSCREEN"))
     ## Use qt with QOffscreenSurface for plot
   elseif (! strcmp ("gnuplot", graphics_toolkit ()) ...
           && ! __have_feature__ ("OSMESA"))
     if (! any (strcmp ("gnuplot", available_graphics_toolkits ())))
       error ("no graphics toolkit available for offscreen plotting");
     else
       graphics_toolkit ("gnuplot");
     endif
diff --git a/doc/interpreter/interpimages.m b/doc/interpreter/interpimages.m
--- a/doc/interpreter/interpimages.m
+++ b/doc/interpreter/interpimages.m
@@ -81,17 +81,17 @@ endfunction
 ## This function no longer sets the graphics toolkit; That is now done
 ## automatically by C++ code which will ordinarily choose 'qt', but might
 ## choose gnuplot on older systems.  Only a complete lack of plotting is a
 ## problem.
 function set_graphics_toolkit ()
   if (isempty (available_graphics_toolkits ()))
     error ("no graphics toolkit available for plotting");
   elseif (strcmp ("qt", graphics_toolkit ())
-          && __have_feature__ ("QOFFSCREENSURFACE"))
+          && __have_feature__ ("QT_OFFSCREEN"))
     ## Use qt with QOffscreenSurface for plot
   elseif (! strcmp ("gnuplot", graphics_toolkit ())
           && ! __have_feature__ ("OSMESA"))
     if (! any (strcmp ("gnuplot", available_graphics_toolkits ())))
       error ("no graphics toolkit available for offscreen plotting");
     else
       graphics_toolkit ("gnuplot");
     endif
diff --git a/doc/interpreter/plotimages.m b/doc/interpreter/plotimages.m
--- a/doc/interpreter/plotimages.m
+++ b/doc/interpreter/plotimages.m
@@ -119,17 +119,17 @@ endfunction
 ## This function no longer sets the graphics toolkit; That is now done
 ## automatically by C++ code which will ordinarily choose 'qt', but might
 ## choose gnuplot on older systems.  Only a complete lack of plotting is a
 ## problem.
 function set_graphics_toolkit ()
   if (isempty (available_graphics_toolkits ()))
     error ("no graphics toolkit available for plotting");
   elseif (strcmp ("qt", graphics_toolkit ())
-          && __have_feature__ ("QOFFSCREENSURFACE"))
+          && __have_feature__ ("QT_OFFSCREEN"))
     ## Use qt with QOffscreenSurface for plot
   elseif (! strcmp ("gnuplot", graphics_toolkit ()) ...
           && ! __have_feature__ ("OSMESA"))
     if (! any (strcmp ("gnuplot", available_graphics_toolkits ())))
       error ("no graphics toolkit available for offscreen plotting");
     else
       graphics_toolkit ("gnuplot");
     endif
diff --git a/doc/interpreter/sparseimages.m b/doc/interpreter/sparseimages.m
--- a/doc/interpreter/sparseimages.m
+++ b/doc/interpreter/sparseimages.m
@@ -240,17 +240,17 @@ endfunction
 ## This function no longer sets the graphics toolkit; That is now done
 ## automatically by C++ code which will ordinarily choose 'qt', but might
 ## choose gnuplot on older systems.  Only a complete lack of plotting is a
 ## problem.
 function set_graphics_toolkit ()
   if (isempty (available_graphics_toolkits ()))
     error ("no graphics toolkit available for plotting");
   elseif (strcmp ("qt", graphics_toolkit ())
-          && __have_feature__ ("QOFFSCREENSURFACE"))
+          && __have_feature__ ("QT_OFFSCREEN"))
     ## Use qt with QOffscreenSurface for plot
   elseif (! strcmp ("gnuplot", graphics_toolkit ())
           && ! __have_feature__ ("OSMESA"))
     if (! any (strcmp ("gnuplot", available_graphics_toolkits ())))
       error ("no graphics toolkit available for offscreen plotting");
     else
       graphics_toolkit ("gnuplot");
     endif
diff --git a/doc/interpreter/splineimages.m b/doc/interpreter/splineimages.m
--- a/doc/interpreter/splineimages.m
+++ b/doc/interpreter/splineimages.m
@@ -171,17 +171,17 @@ endfunction
 ## This function no longer sets the graphics toolkit; That is now done
 ## automatically by C++ code which will ordinarily choose 'qt', but might
 ## choose gnuplot on older systems.  Only a complete lack of plotting is a
 ## problem.
 function set_graphics_toolkit ()
   if (isempty (available_graphics_toolkits ()))
     error ("no graphics toolkit available for plotting");
   elseif (strcmp ("qt", graphics_toolkit ())
-          && __have_feature__ ("QOFFSCREENSURFACE"))
+          && __have_feature__ ("QT_OFFSCREEN"))
     ## Use qt with QOffscreenSurface for plot
   elseif (! strcmp ("gnuplot", graphics_toolkit ())
           && ! __have_feature__ ("OSMESA"))
     if (! any (strcmp ("gnuplot", available_graphics_toolkits ())))
       error ("no graphics toolkit available for offscreen plotting");
     else
       graphics_toolkit ("gnuplot");
     endif
