# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1344723329 14400
#      Sat Aug 11 18:15:29 2012 -0400
# Branch gui
# Node ID 973296940c8948e52f93c355b7ed4bdcffa24649
# Parent  098546e95a5e1b6cb8a3c2a5d878cab87a30da50
don't start GUI if display is not available

* display.cc (display_info::dpy_avail): New data member.
(display_info::display_info): Initialize dpy_avail.
(display_info::init): Set dpy_avail.
(display_info::display_available, display_info::do_display_available):
New functions.

diff --git a/src/interp-core/display.cc b/src/interp-core/display.cc
--- a/src/interp-core/display.cc
+++ b/src/interp-core/display.cc
@@ -74,16 +74,18 @@ display_info::init (bool query)
           ht = GetDeviceCaps (hdc, VERTRES);
           wd = GetDeviceCaps (hdc, HORZRES);
 
           double ht_mm = GetDeviceCaps (hdc, VERTSIZE);
           double wd_mm = GetDeviceCaps (hdc, HORZSIZE);
 
           rx = wd * 25.4 / wd_mm;
           ry = ht * 25.4 / ht_mm;
+
+          dpy_avail = true;
         }
       else
         warning ("no graphical display found");
 
 #elif defined (HAVE_FRAMEWORK_CARBON)
 
       CGDirectDisplayID display = CGMainDisplayID ();
 
@@ -104,16 +106,18 @@ display_info::init (bool query)
           // For MacOS >= 10.6, CGSize is a struct keeping 2 CGFloat values,
           // but the CGFloat typedef is not present on older systems,
           // so use double instead.
           double ht_mm = sz_mm.height;
           double wd_mm = sz_mm.width;
 
           rx = wd * 25.4 / wd_mm;
           ry = ht * 25.4 / ht_mm;
+
+          dpy_avail = true;
         }
       else
         warning ("no graphical display found");
 
 #elif defined (HAVE_X_WINDOWS)
 
       const char *display_name = getenv ("DISPLAY");
 
@@ -139,16 +143,18 @@ display_info::init (bool query)
 
                   rx = wd * 25.4 / wd_mm;
                   ry = ht * 25.4 / ht_mm;
                 }
               else
                 warning ("X11 display has no default screen");
 
               XCloseDisplay (display);
+
+              dpy_avail = true;
             }
           else
             warning ("unable to open X11 DISPLAY");
         }
       else
         warning ("X11 DISPLAY environment variable not set");
 #else
 
diff --git a/src/interp-core/display.h b/src/interp-core/display.h
--- a/src/interp-core/display.h
+++ b/src/interp-core/display.h
@@ -25,17 +25,17 @@ along with Octave; see the file COPYING.
 
 class Matrix;
 
 class display_info
 {
 protected:
 
   display_info (bool query = true)
-    : ht (1), wd (1), dp (0), rx (72), ry (72)
+    : ht (1), wd (1), dp (0), rx (72), ry (72), dpy_avail (false)
   {
     init (query);
   }
 
 public:
 
   static int height (void)
   {
@@ -57,16 +57,21 @@ public:
     return instance_ok () ? instance->do_x_dpi () : 0;
   }
 
   static double y_dpi (void)
   {
     return instance_ok () ? instance->do_y_dpi () : 0;
   }
 
+  static bool display_available (void)
+  {
+    return instance_ok () ? instance->do_display_available () : false;
+  }
+
   // To disable querying the window system for defaults, this function
   // must be called before any other display_info function.
   static void no_window_system (void)
   {
     instance_ok (false);
   }
 
 private:
@@ -79,21 +84,25 @@ private:
   int ht;
   int wd;
   int dp;
 
   // X- and Y- Resolution of the display in dots (pixels) per inch.
   double rx;
   double ry;
 
+  bool dpy_avail;
+
   int do_height (void) const { return ht; }
   int do_width (void) const { return wd; }
   int do_depth (void) const { return dp; }
 
   double do_x_dpi (void) const { return rx; }
   double do_y_dpi (void) const { return ry; }
 
+  bool do_display_available (void) const { return dpy_avail; }
+
   void init (bool query = true);
 
   static bool instance_ok (bool query = true);
 };
 
 #endif
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -1015,16 +1015,19 @@ octave_execute_interpreter (void)
 }
 
 // Return int instead of bool because this function is declared
 // extern "C".
 
 int
 octave_starting_gui (void)
 {
+  if (! display_info::display_available ())
+    return false;
+
   if (force_gui_option)
     return true;
 
   if (no_gui_option)
     return false;
 
   if (persist)
     return true;
