# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1352084963 25200
#      Sun Nov 04 20:09:23 2012 -0700
# Node ID f3e339aee38f3077245ec4ea6d0d15d293fad577
# Parent  35bc8f16538f1b23715907f99b422debdb9fdc9d
Fix block labeling in JIT debug output

* jit-ir.cc (jit_block_list::label): New function.
(jit_block::label, jit_block::print): Implementation moved to cc file.
* jit-ir.h (jit_block_list::label): New function delcaration.
(jit_block::label, jit_block::print): Implementation moved to cc file.
(jit_block::print): Make it clear when a block has not been labeled.

* pt-jit.cc (jit_inter::inter, jit_infer::construct_ssa,
jit_function_info::jit_function_info, jit_info::compile):
Use jit_block_list::label.

diff --git a/libinterp/interp-core/jit-ir.cc b/libinterp/interp-core/jit-ir.cc
--- a/libinterp/interp-core/jit-ir.cc
+++ b/libinterp/interp-core/jit-ir.cc
@@ -75,16 +75,26 @@ jit_block_list::insert_before (iterator 
 }
 
 void
 jit_block_list::insert_before (jit_block *loc, jit_block *ablock)
 {
   insert_before (loc->location (), ablock);
 }
 
+void
+jit_block_list::label (void)
+{
+  if (mlist.size ())
+    {
+      jit_block *block = mlist.back ();
+      block->label ();
+    }
+}
+
 std::ostream&
 jit_block_list::print (std::ostream& os, const std::string& header) const
 {
   os << "-------------------- " << header << " --------------------\n";
   return os << *this;
 }
 
 std::ostream&
@@ -464,25 +474,62 @@ jit_block::update_idom (size_t avisit_co
       idom = new_idom;
       return true;
     }
 
   return changed;
 }
 
 void
+jit_block::label (size_t avisit_count, size_t& number)
+{
+  if (visited (avisit_count))
+    return;
+
+  for (jit_use *use = first_use (); use; use = use->next ())
+    {
+      jit_block *pred = use->user_parent ();
+      pred->label (avisit_count, number);
+    }
+
+  mid = number++;
+}
+
+void
 jit_block::pop_all (void)
 {
   for (iterator iter = begin (); iter != end (); ++iter)
     {
       jit_instruction *instr = *iter;
       instr->pop_variable ();
     }
 }
 
+std::ostream&
+jit_block::print (std::ostream& os, size_t indent) const
+{
+  print_indent (os, indent);
+  short_print (os) << ":        %pred = ";
+  for (jit_use *use = first_use (); use; use = use->next ())
+    {
+      jit_block *pred = use->user_parent ();
+      os << *pred;
+      if (use->next ())
+        os << ", ";
+    }
+  os << std::endl;
+
+  for (const_iterator iter = begin (); iter != end (); ++iter)
+    {
+      jit_instruction *instr = *iter;
+      instr->print (os, indent + 1) << std::endl;
+    }
+  return os;
+}
+
 jit_block *
 jit_block::maybe_split (jit_factory& factory, jit_block_list& blocks,
                         jit_block *asuccessor)
 {
   if (successor_count () > 1)
     {
       jit_terminator *term = terminator ();
       size_t idx = term->successor_index (asuccessor);
diff --git a/libinterp/interp-core/jit-ir.h b/libinterp/interp-core/jit-ir.h
--- a/libinterp/interp-core/jit-ir.h
+++ b/libinterp/interp-core/jit-ir.h
@@ -164,16 +164,18 @@ public:
   void insert_after (iterator iter, jit_block *ablock);
 
   void insert_after (jit_block *loc, jit_block *ablock);
 
   void insert_before (iterator iter, jit_block *ablock);
 
   void insert_before (jit_block *loc, jit_block *ablock);
 
+  void label (void);
+
   std::ostream& print (std::ostream& os, const std::string& header) const;
 
   std::ostream& print_dom (std::ostream& os) const;
 
   void push_back (jit_block *b);
 private:
   std::list<jit_block *> mlist;
 };
@@ -649,29 +651,17 @@ public:
 
   // label with a RPO walk
   void label (void)
   {
     size_t number = 0;
     label (mvisit_count, number);
   }
 
-  void label (size_t avisit_count, size_t& number)
-  {
-    if (visited (avisit_count))
-      return;
-
-    for (jit_use *use = first_use (); use; use = use->next ())
-      {
-        jit_block *pred = use->user_parent ();
-        pred->label (avisit_count, number);
-      }
-
-    mid = number++;
-  }
+  void label (size_t avisit_count, size_t& number);
 
   // See for idom computation algorithm
   // Cooper, Keith D.; Harvey, Timothy J; and Kennedy, Ken (2001).
   // "A Simple, Fast Dominance Algorithm"
   void compute_idom (jit_block& entry_block)
   {
     bool changed;
     entry_block.idom = &entry_block;
@@ -699,36 +689,17 @@ public:
   size_t dom_successor_count (void) const
   {
     return dom_succ.size ();
   }
 
   // call pop_varaible on all instructions
   void pop_all (void);
 
-  virtual std::ostream& print (std::ostream& os, size_t indent = 0) const
-  {
-    print_indent (os, indent);
-    short_print (os) << ":        %pred = ";
-    for (jit_use *use = first_use (); use; use = use->next ())
-      {
-        jit_block *pred = use->user_parent ();
-        os << *pred;
-        if (use->next ())
-          os << ", ";
-      }
-    os << std::endl;
-
-    for (const_iterator iter = begin (); iter != end (); ++iter)
-      {
-        jit_instruction *instr = *iter;
-        instr->print (os, indent + 1) << std::endl;
-      }
-    return os;
-  }
+  virtual std::ostream& print (std::ostream& os, size_t indent = 0) const;
 
   jit_block *maybe_split (jit_factory& factory, jit_block_list& blocks,
                           jit_block *asuccessor);
 
   jit_block *maybe_split (jit_factory& factory, jit_block_list& blocks,
                           jit_block& asuccessor)
   {
     return maybe_split (factory, blocks, &asuccessor);
@@ -737,16 +708,18 @@ public:
   // print dominator infomration
   std::ostream& print_dom (std::ostream& os) const;
 
   virtual std::ostream& short_print (std::ostream& os) const
   {
     os << mname;
     if (mid != NO_ID)
       os << mid;
+    else
+      os << "!";
     return os;
   }
 
   llvm::BasicBlock *to_llvm (void) const;
 
   std::list<jit_block *>::iterator location (void) const
   { return mlocation; }
 
diff --git a/libinterp/interp-core/pt-jit.cc b/libinterp/interp-core/pt-jit.cc
--- a/libinterp/interp-core/pt-jit.cc
+++ b/libinterp/interp-core/pt-jit.cc
@@ -1436,17 +1436,17 @@ jit_infer::infer (void)
           if (jit_terminator *term = dynamic_cast<jit_terminator *> (next))
             append_users_term (term);
           else
             append_users (next);
         }
     }
 
   remove_dead ();
-  final_block ().label ();
+  blocks.label ();
   place_releases ();
   simplify_phi ();
 }
 
 void
 jit_infer::append_users (jit_value *v)
 {
   for (jit_use *use = v->first_use (); use; use = use->next ())
@@ -1470,17 +1470,17 @@ jit_infer::append_users_term (jit_termin
             push_worklist (sterm);
         }
     }
 }
 
 void
 jit_infer::construct_ssa (void)
 {
-  final_block ().label ();
+  blocks.label ();
   final_block ().compute_idom (entry_block ());
   entry_block ().compute_df ();
   entry_block ().create_dom_tree ();
 
   // insert phi nodes where needed, this is done on a per variable basis
   for (variable_map::const_iterator iter = vmap.begin (); iter != vmap.end ();
        ++iter)
     {
@@ -1961,18 +1961,17 @@ jit_function_info::jit_function_info (tr
       jit_convert conv (fcn, argument_types);
       jit_infer infer (conv.get_factory (), conv.get_blocks (),
                        conv.get_variable_map ());
       infer.infer ();
 
       if (Venable_jit_debugging)
         {
           jit_block_list& blocks = infer.get_blocks ();
-          jit_block *entry_block = blocks.front ();
-          entry_block->label ();
+          blocks.label ();
           std::cout << "-------------------- Compiling function ";
           std::cout << "--------------------\n";
 
           tree_print_code tpc (std::cout);
           tpc.visit_octave_user_function_header (fcn);
           tpc.visit_statement_list (*fcn.body ());
           tpc.visit_octave_user_function_trailer (fcn);
           blocks.print (std::cout, "octave jit ir");
@@ -2181,18 +2180,17 @@ jit_info::compile (tree_jit& tjit, tree&
       jit_infer infer (conv.get_factory (), conv.get_blocks (),
                        conv.get_variable_map ());
 
       infer.infer ();
 
       if (Venable_jit_debugging)
         {
           jit_block_list& blocks = infer.get_blocks ();
-          jit_block *entry_block = blocks.front ();
-          entry_block->label ();
+          blocks.label ();
           std::cout << "-------------------- Compiling tree --------------------\n";
           std::cout << tee.str_print_code () << std::endl;
           blocks.print (std::cout, "octave jit ir");
         }
 
       jit_factory& factory = conv.get_factory ();
       jit_convert_llvm to_llvm;
       llvm_function = to_llvm.convert_loop (tjit.get_module (),
