# HG changeset patch
# User jwe
# Date 779596872 0
#      Thu Sep 15 02:41:12 1994 +0000
# Node ID 21cc5b9b9ed6e0c424e998f2c2ca07602020b544
# Parent  45764610984ad0d6d43e58c3918c22676cc52f12
[project @ 1994-09-15 02:39:57 by jwe]

diff --git a/src/defun-dld.h b/src/defun-dld.h
--- a/src/defun-dld.h
+++ b/src/defun-dld.h
@@ -31,18 +31,42 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "defun-int.h"
 
 // Define a builtin function that may be loaded dynamically at run
 // time.
 //
 // If Octave is not configured for dynamic linking of builtin
 // functions, this is exactly like DEFUN.
 
-#define DEFUN_DLD(name, fname, sname, nargin_max, nargout_max, doc) \
+#if defined (WITH_DLD) && defined (OCTAVE_LITE) && defined (MAKE_BUILTINS)
+#define DEFUN_DLD_BUILTIN(name, fname, sname, nargin_max, nargout_max, doc) \
+  BEGIN_INSTALL_BUILTIN \
+    DEFINE_FUN_STRUCT (name, 0, sname, nargin_max, nargout_max, 0, doc); \
+    install_builtin_function (&sname); \
+  END_INSTALL_BUILTIN
+#else
+#define DEFUN_DLD_BUILTIN(name, fname, sname, nargin_max, nargout_max, doc) \
   DEFUN_INTERNAL (name, fname, sname, nargin_max, nargout_max, 0, doc)
+#endif
+
+// Define a function that may be loaded dynamically at run time.
+//
+// If Octave is not configured for dynamic linking of builtin
+// functions, this won't do anything useful.
+//
+// The forward declaration is for the struct, the second is for the
+// definition of the function.
+
+#if ! defined (MAKE_BUILTINS)
+#define DEFUN_DLD(name, fname, sname, fsname, nargin_max, nargout_max, doc) \
+  DECLARE_FUN (fname);
+  DEFINE_FUN_STRUCT (name, fname, sname, nargin_max, nargout_max, 0, doc); \
+  DEFINE_FUN_STRUCT_FUN (sname, fsname) \
+  DECLARE_FUN (fname)
+#endif
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
diff --git a/src/defun-int.h b/src/defun-int.h
--- a/src/defun-int.h
+++ b/src/defun-int.h
@@ -32,19 +32,19 @@ Software Foundation, 675 Mass Ave, Cambr
 
 // Generate code to install name in the symbol table.  The script
 // mkdefs will create a .def file for every .cc file that uses DEFUN,
 // DEFUN_TEXT, or DEFUN_DLD.
 
 #define DEFUN_INTERNAL(name, fname, sname, nargin_max, nargout_max, \
 		       is_text_fcn, doc) \
   BEGIN_INSTALL_BUILTIN \
-    extern DECLARE_FUN(fname); \
-    static builtin_function sname = \
-      { name, nargin_max, nargout_max, is_text_fcn, fname, doc }; \
+    extern DECLARE_FUN (fname); \
+    DEFINE_FUN_STRUCT (name, fname, sname, nargin_max, nargout_max, \
+		       is_text_fcn, doc); \
     install_builtin_function (&sname); \
   END_INSTALL_BUILTIN
 
 // Generate code for making another name for an existing function.
 
 #define DEFALIAS_INTERNAL(alias, name) \
   BEGIN_INSTALL_BUILTIN \
   alias_builtin (#alias, #name); \
@@ -52,24 +52,39 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #else /* ! MAKE_BUILTINS */
 
 // Generate the first line of the function definition.  This ensures
 // that the internal functions all have the same signature.
 
 #define DEFUN_INTERNAL(name, fname, sname, nargin_max, nargout_max, \
 		       is_text_fcn, doc) \
-  DECLARE_FUN(fname)
+  DECLARE_FUN (fname)
 
 // No definition is required for an alias.
 
 #define DEFALIAS_INTERNAL(name, alias)
 
 #endif /* ! MAKE_BUILTINS */
 
+// Define the structure that will be used to insert this function into
+// the symbol table.
+
+#define DEFINE_FUN_STRUCT(name, fname, sname, nargin_max, \
+			  nargout_max, is_text_fcn, doc) \
+  static builtin_function sname = \
+    { name, nargin_max, nargout_max, is_text_fcn, fname, doc }
+
+#define DEFINE_FUN_STRUCT_FUN(sname, fsname) \
+  builtin_function * \
+  fsname (void) \
+  { \
+    return &sname; \
+  }
+
 // Declare an internal function named fname.  This is the interface
 // used by all internal functions in Octave that are also callable
 // from the Octave language.
 
 #define DECLARE_FUN(fname) \
   Octave_object \
   fname (const Octave_object& args, int nargout)
 
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -49,16 +49,17 @@ extern "C"
 
 #include "getopt.h"
 
 #include "lo-error.h"
 
 #include "sighandlers.h"
 #include "variables.h"
 #include "error.h"
+#include "dynamic-ld.h"
 #include "tree-misc.h"
 #include "tree-const.h"
 #include "tree-plot.h"
 #include "utils.h"
 #include "input.h"
 #include "pager.h"
 #include "lex.h"
 #include "help.h"
@@ -432,16 +433,20 @@ main (int argc, char **argv)
 
 // Or this, probably...
   set_liboctave_error_handler (error);
 
 // Do this first, since some command line arguments may override the
 // defaults.
   initialize_globals (argv[0]);
 
+// Initialize dynamic linking.  This might not do anything.  Must
+// happen after initializing raw_prog_name.
+  init_dynamic_linker ();
+
   int optc;
   while ((optc = getopt_long (argc, argv, short_opts, long_opts, 0)) != EOF)
     {
       switch (optc)
 	{
 	case 'd':
 	  yydebug++;
 	  break;
@@ -851,18 +856,18 @@ string CATCH.")
   else
     print_usage ("eval");
 
   return retval;
 }
 
 // Execute a shell command.
 
-DEFUN ("shell_cmd", Fshell_cmd, Sshell_cmd, 2, 1,
-  "shell_cmd (string [, return_output]): execute shell commands")
+DEFUN ("system", Fsystem, Ssystem, 2, 1,
+  "system (string [, return_output]): execute shell commands")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin < 2 || nargin > 3)
     {
       print_usage ("shell_cmd");
@@ -902,14 +907,16 @@ DEFUN ("shell_cmd", Fshell_cmd, Sshell_c
 	}
       else
 	maybe_page_output (output_buf);
     }
 
   return retval;
 }
 
+DEFALIAS (shell_cmd, system);
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
