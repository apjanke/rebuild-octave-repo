# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1521645875 -3600
#      Wed Mar 21 16:24:35 2018 +0100
# Branch stable
# Node ID 7edf1fb1d4b2b48117d98d87895bab31fc65d739
# Parent  5f4550b5d31bf08271f2a3042c193c85c0b706c6
doc: Add Doxygen documentation.

* libinterp/corefcn/symscope.h: Expose some important comments to Doxygen.

diff --git a/libinterp/corefcn/symscope.h b/libinterp/corefcn/symscope.h
--- a/libinterp/corefcn/symscope.h
+++ b/libinterp/corefcn/symscope.h
@@ -526,43 +526,52 @@ namespace octave
     void bind_script_symbols (const std::shared_ptr<symbol_scope_rep>& curr_scope);
 
     void unbind_script_symbols (void);
 
     octave_value dump_symbols_map (void) const;
 
   private:
 
-    // Name for this scope (usually the corresponding filename of the
-    // function corresponding to the scope).
+    //! Name for this scope (usually the corresponding filename of the
+    //! function corresponding to the scope).
+
     std::string m_name;
 
-    // Map from symbol names to symbol info.
+    //! Map from symbol names to symbol info.
+
     std::map<std::string, symbol_record> m_symbols;
 
-    // Map from symbol names to subfunctions.
+    //! Map from symbol names to subfunctions.
+
     std::map<std::string, octave_value> m_subfunctions;
 
-    // The list of subfunctions (if any) in the order they appear in
-    // the function file.
+    //! The list of subfunctions (if any) in the order they appear in
+    //! the function file.
+
     std::list<std::string> m_subfunction_names;
 
-    // The associated user code (may be null).
+    //! The associated user code (may be null).
+
     octave_user_function *m_fcn;
 
-    // Parent of nested function (may be null).
+    //! Parent of nested function (may be null).
+
     std::weak_ptr<symbol_scope_rep> m_parent;
 
-    // Child nested functions.
+    //! Child nested functions.
+
     std::vector<symbol_scope> m_children;
 
-    // If true, then this scope belongs to a nested function.
+    //! If true, then this scope belongs to a nested function.
+
     bool m_is_nested;
 
-    // If true then no variables can be added.
+    //! If true then no variables can be added.
+    
     bool m_is_static;
 
     symbol_record::context_id m_context;
   };
 
   class symbol_scope
   {
   public:
