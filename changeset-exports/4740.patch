# HG changeset patch
# User jwe
# Date 1076011137 0
#      Thu Feb 05 19:58:57 2004 +0000
# Node ID 65f30438c2a3ea52edd88b103d1221a431c2d113
# Parent  7bd3748e2735980fbbcaa1b9425856e5e987d2f2
[project @ 2004-02-05 19:58:57 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1408,21 +1408,19 @@ Array<T>::maybe_delete_elements (idx_vec
 template <class T>
 void
 Array<T>::maybe_delete_elements (Array<idx_vector>& ra_idx, const T& rfv)
 {
   int n_idx = ra_idx.length ();
 
   dim_vector lhs_dims = dims ();
 
-  dim_vector idx_is_colon;
-  idx_is_colon.resize (n_idx);
-
-  dim_vector idx_is_colon_equiv;
-  idx_is_colon_equiv.resize (n_idx);
+  Array<int> idx_is_colon (n_idx, 0);
+
+  Array<int> idx_is_colon_equiv (n_idx, 0);
 
   // Initialization of colon arrays.
 
   for (int i = 0; i < n_idx; i++)
     {
       idx_is_colon_equiv(i) = ra_idx(i).is_colon_equiv (lhs_dims(i), 1);
 
       idx_is_colon(i) = ra_idx(i).is_colon ();
@@ -2705,25 +2703,23 @@ assignN (Array<LT>& lhs, const Array<RT>
 		resize = true;
 	    }
 
 	  if (resize)
 	    {
 	      dim_vector new_dims;
 	      new_dims.resize (lhs_dims.length ());
 
-	      for (int i = 0; i < lhs_dims.length (); i++)
-		{
-		  if (i < idx.length () - 1
-		      && idx(i).elem (0) + 1 > lhs_dims(i))
-		    new_dims(i) = idx(i).elem (0)+1;
-		  else
-		    new_dims(i) = lhs_dims(i);
-		}
-
+	      for (int i = 0; i < idx.length () - 1; i++)
+		new_dims(i) = idx(i).elem (0) >= lhs_dims(i)
+		  ? idx(i).elem (0) + 1 : lhs_dims (i);
+
+	      for (int i = idx.length (); i < lhs_dims.length (); i++)
+		new_dims(i) = lhs_dims (i);
+  
 	      lhs.resize (new_dims, rfv);
 
 	      lhs_dims = lhs.dims ();
 	    }
 
 	  RT scalar = rhs.elem (0);
 
 	  Array<int> int_arr = conv_to_int_array (idx);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,15 @@
 2004-02-05  Petter Risholm  <risholm@stud.ntnu.no>
 
+	* Array.cc (Array<T>::maybe_delete_elements): Declare idx_is_colon
+	and idx_is_colon_equiv Array<int> instead of dim_vector.
+
+	* Array.cc (Array<T>::assignN): Compute new dims in a cleaner way.
+
 	* Array.cc (Array<T>::index): Check for frozen_lengths.length ()
 	== n_dims before checking to see if all indices are colon_equiv.
 
 2004-02-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array.cc (Array<T>::assignN): Require RHS == 0x0 matrix for
 	deleting elements.
 	(Array<T>::index): Remove trailing singletons in ra_idx, but leave
