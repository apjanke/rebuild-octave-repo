# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518296252 18000
#      Sat Feb 10 15:57:32 2018 -0500
# Node ID 10c7e236a5678b9e57f4761b6c613b8a91e1f685
# Parent  edef866fba7b116ce6f6846f5a3d575ac8ce3c00
* mk-builtins.pl: Don't generate functions that do nothing.

diff --git a/libinterp/mk-builtins.pl b/libinterp/mk-builtins.pl
--- a/libinterp/mk-builtins.pl
+++ b/libinterp/mk-builtins.pl
@@ -171,36 +171,32 @@ elsif ($make_source)
       $file = "$srcdir/$file";
     }
 
     ($fcn = $arg) =~ s,.*/,,;
     $fcn =~ s/\.(cc|cpp|in\.cc|in\.yy|ll)$//;
     $fcn =~ s/-/_/g;
     $fcn = "install_${fcn}_fcns";
 
-    push (@installer_functions, $fcn);
-
-    print "
-static void
+    $fcn_header = "\nstatic void
 $fcn (void)
 {
-  std::string file = \"$arg\";
-
-";
+  std::string file = \"$arg\";";
 
     open($fh, "<", $file) || die "mk-builtins.pl: failed to open file $file\n";
 
     ## Find DEFUN or DEFALIAS macros and generate the function calls that
     ## install the built-in functions or function aliases.
 
     $type = "";
     $const = 0;
     $fname = "";
     $name = "";
     $alias = "";
+    $fcn_body = "";
 
     %dispatch_map = ();
 
     while ($line = <$fh>)
     {
       if ($line =~ /^ *DEF(METHOD|UN) *\( *([^ ,]*) *,.*$/)
       {
         $type = "fun";
@@ -253,31 +249,31 @@ static void
           $dispatch_map{$name} = [@classes];
         }
 
         ## We use the name appended to the "external-doc" tag to find
         ## the docstring for aliases to this function.
 
         if ($const)
         {
-          print "  install_builtin_function ($fname, \"$name\", file, \"external-doc:$name\", true);\n"
+          $fcn_body .= "\n  install_builtin_function ($fname, \"$name\", file, \"external-doc:$name\", true);"
         }
         else
         {
-          print "  install_builtin_function ($fname, \"$name\", file, \"external-doc:$name\");\n"
+          $fcn_body .= "\n  install_builtin_function ($fname, \"$name\", file, \"external-doc:$name\");"
         }
 
         $type = "";
         $fname = "";
         $name = "";
         $const = 0;
       }
       elsif ($type eq "alias")
       {
-        print "  alias_builtin (\"$alias\", \"$name\");\n";
+        $fcn_body .= "\n  alias_builtin (\"$alias\", \"$name\");";
 
         ## Preserve dispatch info (if any) that we have for the
         ## original function.
 
         if (exists $dispatch_map{$name})
         {
           @classes = @{$dispatch_map{$name}};
 
@@ -290,27 +286,37 @@ static void
         $type = "";
         $name = "";
         $alias = "";
       }
     }
 
     foreach $fcn (sort (keys (%dispatch_map)))
     {
-      print "\n";
+      $dispatch_code = "";
 
       @classes =  @{$dispatch_map{$fcn}};
 
       foreach $class (@classes)
       {
-        print "  install_builtin_dispatch (\"$fcn\", \"$class\");\n";
+        $dispatch_code .= "\n  install_builtin_dispatch (\"$fcn\", \"$class\");";
       }
+
+      if ($dispatch_code)
+        {
+          $fcn_body .= "\n$dispatch_code";
+        }
     }
 
-    print "}\n";
+    if ($fcn_body)
+      {
+        push (@installer_functions, $fcn);
+
+        print "$fcn_header\n$fcn_body\n}\n";
+      }
   }
 
   print "
 void
 install_builtins (void)
 {
 ";
 
