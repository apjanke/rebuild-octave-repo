# HG changeset patch
# User jwe
# Date 1067579864 0
#      Fri Oct 31 05:57:44 2003 +0000
# Node ID 6cb22b9e3942e16bcfd91f179cdbb56cf1596b9f
# Parent  c8c06e5ef5db8f71b6924658048c351f0112ba40
[project @ 2003-10-31 05:57:43 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2003-10-30  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* mach-info.h (oct_mach_info): Prefix enum elements with flt_fmt_.
+	Change all uses.
+
 2003-10-29  Petter Risholm  <risholm@stud.ntnu.no>
 
 	* dNDArray.cc (NDArray::cumprod, NDArray::cumsum, NDArray::prod,
 	NDArray::sum, NDArray::sumsq, NDArray::abs): New functions.
 	* dNDArray.h: Provide decls.
 	* CNDArray.cc (ComplexNDArray::cumprod, ComplexNDArray::cumsum,
 	ComplexNDArray::prod, ComplexNDArray::sum, ComplexNDArray::sumsq,
 	ComplexNDArray::abs): New functions.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -2731,21 +2731,21 @@ Matrix::read (std::istream& is, int nr, 
 
   bool do_float_conversion = (flt_fmt != native_flt_fmt);
 
   // XXX FIXME XXX -- byte order for Cray?
 
   bool swap_bytes = false;
 
   if (oct_mach_info::words_big_endian ())
-    swap_bytes = (flt_fmt == oct_mach_info::ieee_little_endian
-		 || flt_fmt == oct_mach_info::vax_g
-		 || flt_fmt == oct_mach_info::vax_g);
+    swap_bytes = (flt_fmt == oct_mach_info::flt_fmt_ieee_little_endian
+		 || flt_fmt == oct_mach_info::flt_fmt_vax_g
+		 || flt_fmt == oct_mach_info::flt_fmt_vax_g);
   else
-    swap_bytes = (flt_fmt == oct_mach_info::ieee_big_endian);
+    swap_bytes = (flt_fmt == oct_mach_info::flt_fmt_ieee_big_endian);
 
   for (;;)
     {
       // XXX FIXME XXX -- maybe there should be a special case for
       // skip == 0.
 
       if (is)
 	{
@@ -2965,21 +2965,21 @@ Matrix::write (std::ostream& os, oct_dat
 
   bool do_float_conversion = (flt_fmt != native_flt_fmt);
 
   // XXX FIXME XXX -- byte order for Cray?
 
   bool swap_bytes = false;
 
   if (oct_mach_info::words_big_endian ())
-    swap_bytes = (flt_fmt == oct_mach_info::ieee_little_endian
-		 || flt_fmt == oct_mach_info::vax_g
-		 || flt_fmt == oct_mach_info::vax_g);
+    swap_bytes = (flt_fmt == oct_mach_info::flt_fmt_ieee_little_endian
+		 || flt_fmt == oct_mach_info::flt_fmt_vax_g
+		 || flt_fmt == oct_mach_info::flt_fmt_vax_g);
   else
-    swap_bytes = (flt_fmt == oct_mach_info::ieee_big_endian);
+    swap_bytes = (flt_fmt == oct_mach_info::flt_fmt_ieee_big_endian);
 
   for (int i = 0; i < n; i++)
     {
       if (os)
 	{
 	  if (skip != 0)
 	    os.seekp (skip, std::ios::cur);
 
diff --git a/liboctave/data-conv.cc b/liboctave/data-conv.cc
--- a/liboctave/data-conv.cc
+++ b/liboctave/data-conv.cc
@@ -439,119 +439,119 @@ Cray_to_VAX_G_float (float * /* d */, in
 }
 
 void
 do_double_format_conversion (double *data, int len,
 			     oct_mach_info::float_format fmt)
 {
   switch (oct_mach_info::native_float_format ())
     {
-    case oct_mach_info::ieee_little_endian:
+    case oct_mach_info::flt_fmt_ieee_little_endian:
       switch (fmt)
 	{
-	case oct_mach_info::ieee_little_endian:
+	case oct_mach_info::flt_fmt_ieee_little_endian:
 	  break;
 
-	case oct_mach_info::ieee_big_endian:
+	case oct_mach_info::flt_fmt_ieee_big_endian:
 	  IEEE_big_double_to_IEEE_little_double (data, len);
 	  break;
 
-	case oct_mach_info::vax_d:
+	case oct_mach_info::flt_fmt_vax_d:
 	  VAX_D_double_to_IEEE_little_double (data, len);
 	  break;
 
-	case oct_mach_info::vax_g:
+	case oct_mach_info::flt_fmt_vax_g:
 	  VAX_G_double_to_IEEE_little_double (data, len);
 	  break;
 
-	case oct_mach_info::cray:
+	case oct_mach_info::flt_fmt_cray:
 	  Cray_to_IEEE_little_double (data, len);
 	  break;
 
 	default:
 	  gripe_unrecognized_float_fmt ();
 	  break;
 	}
       break;
 
-    case oct_mach_info::ieee_big_endian:
+    case oct_mach_info::flt_fmt_ieee_big_endian:
       switch (fmt)
 	{
-	case oct_mach_info::ieee_little_endian:
+	case oct_mach_info::flt_fmt_ieee_little_endian:
 	  IEEE_little_double_to_IEEE_big_double (data, len);
 	  break;
 
-	case oct_mach_info::ieee_big_endian:
+	case oct_mach_info::flt_fmt_ieee_big_endian:
 	  break;
 
-	case oct_mach_info::vax_d:
+	case oct_mach_info::flt_fmt_vax_d:
 	  VAX_D_double_to_IEEE_big_double (data, len);
 	  break;
 
-	case oct_mach_info::vax_g:
+	case oct_mach_info::flt_fmt_vax_g:
 	  VAX_G_double_to_IEEE_big_double (data, len);
 	  break;
 
-	case oct_mach_info::cray:
+	case oct_mach_info::flt_fmt_cray:
 	  Cray_to_IEEE_big_double (data, len);
 	  break;
 
 	default:
 	  gripe_unrecognized_float_fmt ();
 	  break;
 	}
       break;
 
-    case oct_mach_info::vax_d:
+    case oct_mach_info::flt_fmt_vax_d:
       switch (fmt)
 	{
-	case oct_mach_info::ieee_little_endian:
+	case oct_mach_info::flt_fmt_ieee_little_endian:
 	  IEEE_little_double_to_VAX_D_double (data, len);
 	  break;
 
-	case oct_mach_info::ieee_big_endian:
+	case oct_mach_info::flt_fmt_ieee_big_endian:
 	  IEEE_big_double_to_VAX_D_double (data, len);
 	  break;
 
-	case oct_mach_info::vax_d:
+	case oct_mach_info::flt_fmt_vax_d:
 	  break;
 
-	case oct_mach_info::vax_g:
+	case oct_mach_info::flt_fmt_vax_g:
 	  VAX_G_double_to_VAX_D_double (data, len);
 	  break;
 
-	case oct_mach_info::cray:
+	case oct_mach_info::flt_fmt_cray:
 	  Cray_to_VAX_D_double (data, len);
 	  break;
 
 	default:
 	  gripe_unrecognized_float_fmt ();
 	  break;
 	}
       break;
 
-    case oct_mach_info::vax_g:
+    case oct_mach_info::flt_fmt_vax_g:
       switch (fmt)
 	{
-	case oct_mach_info::ieee_little_endian:
+	case oct_mach_info::flt_fmt_ieee_little_endian:
 	  IEEE_little_double_to_VAX_G_double (data, len);
 	  break;
 
-	case oct_mach_info::ieee_big_endian:
+	case oct_mach_info::flt_fmt_ieee_big_endian:
 	  IEEE_big_double_to_VAX_G_double (data, len);
 	  break;
 
-	case oct_mach_info::vax_d:
+	case oct_mach_info::flt_fmt_vax_d:
 	  VAX_D_double_to_VAX_G_double (data, len);
 	  break;
 
-	case oct_mach_info::vax_g:
+	case oct_mach_info::flt_fmt_vax_g:
 	  break;
 
-	case oct_mach_info::cray:
+	case oct_mach_info::flt_fmt_cray:
 	  Cray_to_VAX_G_double (data, len);
 	  break;
 
 	default:
 	  gripe_unrecognized_float_fmt ();
 	  break;
 	}
       break;
@@ -565,119 +565,119 @@ do_double_format_conversion (double *dat
 }
 
 void
 do_float_format_conversion (float *data, int len,
 			    oct_mach_info::float_format fmt)
 {
   switch (oct_mach_info::native_float_format ())
     {
-    case oct_mach_info::ieee_little_endian:
+    case oct_mach_info::flt_fmt_ieee_little_endian:
       switch (fmt)
 	{
-	case oct_mach_info::ieee_little_endian:
+	case oct_mach_info::flt_fmt_ieee_little_endian:
 	  break;
 
-	case oct_mach_info::ieee_big_endian:
+	case oct_mach_info::flt_fmt_ieee_big_endian:
 	  IEEE_big_float_to_IEEE_little_float (data, len);
 	  break;
 
-	case oct_mach_info::vax_d:
+	case oct_mach_info::flt_fmt_vax_d:
 	  VAX_D_float_to_IEEE_little_float (data, len);
 	  break;
 
-	case oct_mach_info::vax_g:
+	case oct_mach_info::flt_fmt_vax_g:
 	  VAX_G_float_to_IEEE_little_float (data, len);
 	  break;
 
-	case oct_mach_info::cray:
+	case oct_mach_info::flt_fmt_cray:
 	  Cray_to_IEEE_little_float (data, len);
 	  break;
 
 	default:
 	  gripe_unrecognized_float_fmt ();
 	  break;
 	}
       break;
 
-    case oct_mach_info::ieee_big_endian:
+    case oct_mach_info::flt_fmt_ieee_big_endian:
       switch (fmt)
 	{
-	case oct_mach_info::ieee_little_endian:
+	case oct_mach_info::flt_fmt_ieee_little_endian:
 	  IEEE_little_float_to_IEEE_big_float (data, len);
 	  break;
 
-	case oct_mach_info::ieee_big_endian:
+	case oct_mach_info::flt_fmt_ieee_big_endian:
 	  break;
 
-	case oct_mach_info::vax_d:
+	case oct_mach_info::flt_fmt_vax_d:
 	  VAX_D_float_to_IEEE_big_float (data, len);
 	  break;
 
-	case oct_mach_info::vax_g:
+	case oct_mach_info::flt_fmt_vax_g:
 	  VAX_G_float_to_IEEE_big_float (data, len);
 	  break;
 
-	case oct_mach_info::cray:
+	case oct_mach_info::flt_fmt_cray:
 	  Cray_to_IEEE_big_float (data, len);
 	  break;
 
 	default:
 	  gripe_unrecognized_float_fmt ();
 	  break;
 	}
       break;
 
-    case oct_mach_info::vax_d:
+    case oct_mach_info::flt_fmt_vax_d:
       switch (fmt)
 	{
-	case oct_mach_info::ieee_little_endian:
+	case oct_mach_info::flt_fmt_ieee_little_endian:
 	  IEEE_little_float_to_VAX_D_float (data, len);
 	  break;
 
-	case oct_mach_info::ieee_big_endian:
+	case oct_mach_info::flt_fmt_ieee_big_endian:
 	  IEEE_big_float_to_VAX_D_float (data, len);
 	  break;
 
-	case oct_mach_info::vax_d:
+	case oct_mach_info::flt_fmt_vax_d:
 	  break;
 
-	case oct_mach_info::vax_g:
+	case oct_mach_info::flt_fmt_vax_g:
 	  VAX_G_float_to_VAX_D_float (data, len);
 	  break;
 
-	case oct_mach_info::cray:
+	case oct_mach_info::flt_fmt_cray:
 	  Cray_to_VAX_D_float (data, len);
 	  break;
 
 	default:
 	  gripe_unrecognized_float_fmt ();
 	  break;
 	}
       break;
 
-    case oct_mach_info::vax_g:
+    case oct_mach_info::flt_fmt_vax_g:
       switch (fmt)
 	{
-	case oct_mach_info::ieee_little_endian:
+	case oct_mach_info::flt_fmt_ieee_little_endian:
 	  IEEE_little_float_to_VAX_G_float (data, len);
 	  break;
 
-	case oct_mach_info::ieee_big_endian:
+	case oct_mach_info::flt_fmt_ieee_big_endian:
 	  IEEE_big_float_to_VAX_G_float (data, len);
 	  break;
 
-	case oct_mach_info::vax_d:
+	case oct_mach_info::flt_fmt_vax_d:
 	  VAX_D_float_to_VAX_G_float (data, len);
 	  break;
 
-	case oct_mach_info::vax_g:
+	case oct_mach_info::flt_fmt_vax_g:
 	  break;
 
-	case oct_mach_info::cray:
+	case oct_mach_info::flt_fmt_cray:
 	  Cray_to_VAX_G_float (data, len);
 	  break;
 
 	default:
 	  gripe_unrecognized_float_fmt ();
 	  break;
 	}
       break;
diff --git a/liboctave/lo-ieee.cc b/liboctave/lo-ieee.cc
--- a/liboctave/lo-ieee.cc
+++ b/liboctave/lo-ieee.cc
@@ -81,17 +81,17 @@ octave_ieee_init (void)
 #else
   octave_NaN = octave_Inf / octave_Inf;
 #endif
 
   // This is patterned after code in R.
 
   oct_mach_info::float_format ff = oct_mach_info::native_float_format ();
 
-  if (ff == oct_mach_info::ieee_big_endian)
+  if (ff == oct_mach_info::flt_fmt_ieee_big_endian)
     {
       lo_ieee_hw = 0;
       lo_ieee_lw = 1;
     }
   else
     {
       lo_ieee_hw = 1;
       lo_ieee_lw = 0;
diff --git a/liboctave/mach-info.cc b/liboctave/mach-info.cc
--- a/liboctave/mach-info.cc
+++ b/liboctave/mach-info.cc
@@ -69,41 +69,41 @@ equiv_compare (const equiv *std, const e
   return 1;
 }
 
 void
 oct_mach_info::init_float_format (void) const
 {
   float_params fp[5];
 
-  INIT_FLT_PAR (fp[0], oct_mach_info::ieee_big_endian,
+  INIT_FLT_PAR (fp[0], oct_mach_info::flt_fmt_ieee_big_endian,
 		   1048576,  0,
 		2146435071, -1,
 		1017118720,  0,
 		1018167296,  0);
 
-  INIT_FLT_PAR (fp[1], oct_mach_info::ieee_little_endian,
+  INIT_FLT_PAR (fp[1], oct_mach_info::flt_fmt_ieee_little_endian,
 		 0,    1048576,
 		-1, 2146435071,
 		 0, 1017118720,
 		 0, 1018167296);
 
-  INIT_FLT_PAR (fp[2], oct_mach_info::vax_d,
+  INIT_FLT_PAR (fp[2], oct_mach_info::flt_fmt_vax_d,
 		   128,  0,
 		-32769, -1,
 		  9344,  0,
 		  9344,  0);
 
-  INIT_FLT_PAR (fp[3], oct_mach_info::vax_g,
+  INIT_FLT_PAR (fp[3], oct_mach_info::flt_fmt_vax_g,
 		    16,  0,
 		-32769, -1,
 		 15552,  0,
 		 15552,  0);
 
-  INIT_FLT_PAR (fp[4], oct_mach_info::unknown,
+  INIT_FLT_PAR (fp[4], oct_mach_info::flt_fmt_unknown,
 		0, 0,
 		0, 0,
 		0, 0,
 		0, 0);
 
   equiv mach_fp_par[4];
 
   mach_fp_par[0].d = F77_FUNC (d1mach, D1MACH) (1);
@@ -115,17 +115,17 @@ oct_mach_info::init_float_format (void) 
   do
     {
       if (equiv_compare (fp[i].fp_par, mach_fp_par, 4))
 	{
 	  native_float_fmt = fp[i].fp_fmt;
 	  break;
 	}
     }
-  while (fp[++i].fp_fmt != oct_mach_info::unknown);
+  while (fp[++i].fp_fmt != oct_mach_info::flt_fmt_unknown);
 }
 
 void
 oct_mach_info::ten_little_endians (void) const
 {
   // Are we little or big endian?  From Harbison & Steele.
 
   union
@@ -163,17 +163,17 @@ oct_mach_info::instance_ok (void)
 
   return retval;
 }
 
 oct_mach_info::float_format
 oct_mach_info::native_float_format (void)
 {
   return (instance_ok ())
-    ? instance->native_float_fmt : oct_mach_info::unknown;
+    ? instance->native_float_fmt : oct_mach_info::flt_fmt_unknown;
 }
 
 bool
 oct_mach_info::words_big_endian (void)
 {
   return (instance_ok ())
     ? instance->big_chief : false;
 }
@@ -183,67 +183,67 @@ oct_mach_info::words_little_endian (void
 {
   return (instance_ok ())
     ? (! instance->big_chief) : false;
 }
 
 oct_mach_info::float_format
 oct_mach_info::string_to_float_format (const std::string& s)
 {
-  oct_mach_info::float_format retval = oct_mach_info::unknown;
+  oct_mach_info::float_format retval = oct_mach_info::flt_fmt_unknown;
 
   if (s == "native" || s == "n")
-    retval = oct_mach_info::native;
+    retval = oct_mach_info::flt_fmt_native;
   else if (s == "ieee-be" || s == "b")
-    retval = oct_mach_info::ieee_big_endian;
+    retval = oct_mach_info::flt_fmt_ieee_big_endian;
   else if (s == "ieee-le" || s == "l")
-    retval = oct_mach_info::ieee_little_endian;
+    retval = oct_mach_info::flt_fmt_ieee_little_endian;
   else if (s == "vaxd" || s == "d")
-    retval = oct_mach_info::vax_d;
+    retval = oct_mach_info::flt_fmt_vax_d;
   else if (s == "vaxg" || s == "g")
-    retval = oct_mach_info::vax_g;
+    retval = oct_mach_info::flt_fmt_vax_g;
   else if (s == "cray" || s == "c")
-    retval = oct_mach_info::cray;
+    retval = oct_mach_info::flt_fmt_cray;
   else if (s == "unknown")
-    retval = oct_mach_info::unknown;
+    retval = oct_mach_info::flt_fmt_unknown;
   else
     (*current_liboctave_error_handler)
       ("invalid architecture type specified");
 
   return retval;
 }
 
 std::string
 oct_mach_info::float_format_as_string (float_format flt_fmt)
 {
   std::string retval = "unknown";
 
   switch (flt_fmt)
     {
-    case native:
+    case flt_fmt_native:
       retval = "native";
       break;
 
-    case ieee_big_endian:
+    case flt_fmt_ieee_big_endian:
       retval = "ieee_big_endian";
       break;
 
-    case ieee_little_endian:
+    case flt_fmt_ieee_little_endian:
       retval = "ieee_little_endian";
       break;
 
-    case vax_d:
+    case flt_fmt_vax_d:
       retval = "vax_d_float";
       break;
 
-    case vax_g:
+    case flt_fmt_vax_g:
       retval = "vax_g_float";
       break;
 
-    case cray:
+    case flt_fmt_cray:
       retval = "cray";
       break;
 
     default:
       break;
     }
 
   return retval;
diff --git a/liboctave/mach-info.h b/liboctave/mach-info.h
--- a/liboctave/mach-info.h
+++ b/liboctave/mach-info.h
@@ -31,23 +31,23 @@ oct_mach_info
 protected:
 
   oct_mach_info (void);
 
 public:
 
   enum float_format
     {
-      native,
-      unknown,
-      ieee_little_endian,
-      ieee_big_endian,
-      vax_d,
-      vax_g,
-      cray
+      flt_fmt_native,
+      flt_fmt_unknown,
+      flt_fmt_ieee_little_endian,
+      flt_fmt_ieee_big_endian,
+      flt_fmt_vax_d,
+      flt_fmt_vax_g,
+      flt_fmt_cray
     };
 
   static bool instance_ok (void);
 
   static float_format native_float_format (void);
 
   static bool words_big_endian (void);
 
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -2282,72 +2282,72 @@ read_mat_file_header (std::istream& is, 
 }
 
 // We don't just use a cast here, because we need to be able to detect
 // possible errors.
 
 static oct_mach_info::float_format
 mopt_digit_to_float_format (int mach)
 {
-  oct_mach_info::float_format flt_fmt = oct_mach_info::unknown;
+  oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_unknown;
 
   switch (mach)
     {
     case 0:
-      flt_fmt = oct_mach_info::ieee_little_endian;
+      flt_fmt = oct_mach_info::flt_fmt_ieee_little_endian;
       break;
 
     case 1:
-      flt_fmt = oct_mach_info::ieee_big_endian;
+      flt_fmt = oct_mach_info::flt_fmt_ieee_big_endian;
       break;
 
     case 2:
-      flt_fmt = oct_mach_info::vax_d;
+      flt_fmt = oct_mach_info::flt_fmt_vax_d;
       break;
 
     case 3:
-      flt_fmt = oct_mach_info::vax_g;
+      flt_fmt = oct_mach_info::flt_fmt_vax_g;
       break;
 
     case 4:
-      flt_fmt = oct_mach_info::cray;
+      flt_fmt = oct_mach_info::flt_fmt_cray;
       break;
 
     default:
-      flt_fmt = oct_mach_info::unknown;
+      flt_fmt = oct_mach_info::flt_fmt_unknown;
       break;
     }
 
   return flt_fmt;
 }
 
 static int
 float_format_to_mopt_digit (oct_mach_info::float_format flt_fmt)
 {
   int retval = -1;
 
   switch (flt_fmt)
     {
-    case oct_mach_info::ieee_little_endian:
+    case oct_mach_info::flt_fmt_ieee_little_endian:
       retval = 0;
       break;
 
-    case oct_mach_info::ieee_big_endian:
+    case oct_mach_info::flt_fmt_ieee_big_endian:
       retval = 1;
       break;
 
-    case oct_mach_info::vax_d:
+    case oct_mach_info::flt_fmt_vax_d:
       retval = 2;
       break;
 
-    case oct_mach_info::vax_g:
+    case oct_mach_info::flt_fmt_vax_g:
       retval = 3;
       break;
 
-    case oct_mach_info::cray:
+    case oct_mach_info::flt_fmt_cray:
       retval = 4;
       break;
 
     default:
       break;
     }
 
   return retval;
@@ -2369,17 +2369,17 @@ read_mat_binary_data (std::istream& is, 
 {
   std::string retval;
 
   // These are initialized here instead of closer to where they are
   // first used to avoid errors from gcc about goto crossing
   // initialization of variable.
 
   Matrix re;
-  oct_mach_info::float_format flt_fmt = oct_mach_info::unknown;
+  oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_unknown;
   bool swap = false;
   int type = 0;
   int prec = 0;
   int order = 0;
   int mach = 0;
   int dlen = 0;
 
   FOUR_BYTE_INT mopt, nr, nc, imag, len;
@@ -2398,17 +2398,17 @@ read_mat_binary_data (std::istream& is, 
   prec = mopt % 10;  // double, float, int, etc.
   mopt /= 10;        // Eliminate second digit.
   order = mopt % 10; // Row or column major ordering.
   mopt /= 10;        // Eliminate third digit.
   mach = mopt % 10;  // IEEE, VAX, etc.
 
   flt_fmt = mopt_digit_to_float_format (mach);
 
-  if (flt_fmt == oct_mach_info::unknown)
+  if (flt_fmt == oct_mach_info::flt_fmt_unknown)
     {
       error ("load: unrecognized binary format!");
       return retval;
     }
 
   if (type != 0 && type != 1)
     {
       error ("load: can't read sparse matrices");
@@ -2610,17 +2610,17 @@ read_mat5_binary_element (std::istream& 
 {
   std::string retval;
 
   // These are initialized here instead of closer to where they are
   // first used to avoid errors from gcc about goto crossing
   // initialization of variable.
 
   Matrix re;
-  oct_mach_info::float_format flt_fmt = oct_mach_info::unknown;
+  oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_unknown;
   int type = 0;
   bool imag;
   bool logicalvar;
   enum arrayclasstype arrayclass;
   FOUR_BYTE_INT junk;
   FOUR_BYTE_INT flags;
   FOUR_BYTE_INT nr;
   FOUR_BYTE_INT nc;
@@ -2630,19 +2630,19 @@ read_mat5_binary_element (std::istream& 
   std::streampos pos;
   TWO_BYTE_INT number;
   number = *(TWO_BYTE_INT *)"\x00\x01";
 
   global = false;
 
   // MAT files always use IEEE floating point
   if ((number == 1) ^ swap)
-    flt_fmt = oct_mach_info::ieee_big_endian;
+    flt_fmt = oct_mach_info::flt_fmt_ieee_big_endian;
   else
-    flt_fmt = oct_mach_info::ieee_little_endian;
+    flt_fmt = oct_mach_info::flt_fmt_ieee_little_endian;
 
   // element type and length
   if (read_mat5_tag (is, swap, type, element_length))
     return retval;			// EOF
 
   if (type != miMATRIX)
     {
       error ("load: invalid element type");
@@ -2997,17 +2997,17 @@ read_binary_file_header (std::istream& i
       return -1;
     }
 	
   char tmp = 0;
   is.read (X_CAST (char *, &tmp), 1);
 
   flt_fmt = mopt_digit_to_float_format (tmp);
 
-  if (flt_fmt == oct_mach_info::unknown)
+  if (flt_fmt == oct_mach_info::flt_fmt_unknown)
     {
       if (! quiet)
         error ("load: unrecognized binary format!");
 
       return -1;
     }
 
   return 0;
@@ -3027,17 +3027,17 @@ get_file_format (const std::string& fnam
   std::ifstream file (fname.c_str ());
 
   if (! file)
     {
       error ("load: couldn't open input file `%s'", orig_fname.c_str ());
       return retval;
     }
 
-  oct_mach_info::float_format flt_fmt = oct_mach_info::unknown;
+  oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_unknown;
 
   bool swap = false;
 
   if (read_binary_file_header (file, swap, flt_fmt, true) == 0)
     retval = LS_BINARY;
   else
     {
       file.seekg (0, std::ios::beg);
@@ -3396,17 +3396,17 @@ lists of lists of matrices, or ...).\n\
   if (i == argc)
     {
       print_usage ("load");
       return retval;
     }
 
   std::string orig_fname = argv[i];
 
-  oct_mach_info::float_format flt_fmt = oct_mach_info::unknown;
+  oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_unknown;
 
   bool swap = false;
 
   if (argv[i] == "-")
     {
       i++;
 
 #ifdef HAVE_HDF5
diff --git a/src/oct-fstrm.h b/src/oct-fstrm.h
--- a/src/oct-fstrm.h
+++ b/src/oct-fstrm.h
@@ -31,22 +31,22 @@ Software Foundation, 59 Temple Place - S
 class
 octave_fstream : public octave_base_stream
 {
 public:
 
   octave_fstream (const std::string& nm_arg,
 		  std::ios::openmode arg_md = std::ios::in|std::ios::out,
 		  oct_mach_info::float_format flt_fmt =
-		  oct_mach_info::native);
+		  oct_mach_info::flt_fmt_native);
 
   static octave_stream
   create (const std::string& nm_arg,
 	  std::ios::openmode arg_md = std::ios::in|std::ios::out,
-	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
+	  oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_native);
 
   // Position a stream at OFFSET relative to ORIGIN.
 
   int seek (std::streamoff offset, std::ios::seekdir origin);
 
   // Return current stream position.
 
   long tell (void) const;
diff --git a/src/oct-iostrm.h b/src/oct-iostrm.h
--- a/src/oct-iostrm.h
+++ b/src/oct-iostrm.h
@@ -30,17 +30,17 @@ Software Foundation, 59 Temple Place - S
 class
 octave_base_iostream : public octave_base_stream
 {
 public:
 
   octave_base_iostream (const std::string& n = std::string (),
 			std::ios::openmode md = std::ios::in|std::ios::out,
 			oct_mach_info::float_format flt_fmt =
-			oct_mach_info::native)
+			oct_mach_info::flt_fmt_native)
     : octave_base_stream (md, flt_fmt), nm (n) { }
 
   // Position a stream at OFFSET relative to ORIGIN.
 
   int seek (std::streamoff offset, std::ios::seekdir origin);
 
   // Return current stream position.
 
@@ -74,17 +74,17 @@ private:
 };
 
 class
 octave_istream : public octave_base_iostream
 {
 public:
 
   octave_istream (std::istream *arg = 0, const std::string& nm = std::string ())
-    : octave_base_iostream (nm, std::ios::in, oct_mach_info::native),
+    : octave_base_iostream (nm, std::ios::in, oct_mach_info::flt_fmt_native),
       is (arg) { }
 
   static octave_stream
   create (std::istream *arg = 0, const std::string& nm = std::string ());
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const;
@@ -111,17 +111,17 @@ private:
 };
 
 class
 octave_ostream : public octave_base_iostream
 {
 public:
 
   octave_ostream (std::ostream *arg, const std::string& nm = std::string ())
-    : octave_base_iostream (nm, std::ios::out, oct_mach_info::native),
+    : octave_base_iostream (nm, std::ios::out, oct_mach_info::flt_fmt_native),
       os (arg) { }
 
   static octave_stream
   create (std::ostream *arg, const std::string& nm = std::string ());
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const;
diff --git a/src/oct-prcstrm.h b/src/oct-prcstrm.h
--- a/src/oct-prcstrm.h
+++ b/src/oct-prcstrm.h
@@ -31,21 +31,21 @@ Software Foundation, 59 Temple Place - S
 class
 octave_iprocstream : public octave_stdiostream
 {
 public:
 
   octave_iprocstream (const std::string& n,
 		      std::ios::openmode arg_md = std::ios::in,
 		      oct_mach_info::float_format flt_fmt =
-		      oct_mach_info::native);
+		      oct_mach_info::flt_fmt_native);
 
   static octave_stream
   create (const std::string& n, std::ios::openmode arg_md = std::ios::in,
-	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
+	  oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_native);
 
 protected:
 
   ~octave_iprocstream (void);
 
 private:
 
   // No copying!
@@ -58,21 +58,21 @@ private:
 class
 octave_oprocstream : public octave_stdiostream
 {
 public:
 
   octave_oprocstream (const std::string& n,
 		      std::ios::openmode arg_md = std::ios::out,
 		      oct_mach_info::float_format flt_fmt =
-		      oct_mach_info::native);
+		      oct_mach_info::flt_fmt_native);
 
   static octave_stream
   create (const std::string& n, std::ios::openmode arg_md = std::ios::out,
-	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
+	  oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_native);
 
 protected:
 
   ~octave_oprocstream (void);
 
 private:
 
   // No copying!
diff --git a/src/oct-stdstrm.h b/src/oct-stdstrm.h
--- a/src/oct-stdstrm.h
+++ b/src/oct-stdstrm.h
@@ -28,28 +28,28 @@ Software Foundation, 59 Temple Place - S
 
 class
 octave_stdiostream : public octave_base_stream
 {
 public:
 
   octave_stdiostream (const std::string& n, FILE *f = 0,
 		      std::ios::openmode arg_md = std::ios::in|std::ios::out,
-		      oct_mach_info::float_format flt_fmt = oct_mach_info::native,
+		      oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_native,
 		      c_file_ptr_buf::close_fcn cf = c_file_ptr_buf::fclose)
     : octave_base_stream (arg_md, flt_fmt), nm (n), md (arg_md), s(0)
   {
     if (f)
       s = new io_c_file_ptr_stream (f, cf);
   }
 
   static octave_stream
   create (const std::string& n, FILE *f = 0,
 	  std::ios::openmode arg_md = std::ios::in|std::ios::out,
-	  oct_mach_info::float_format flt_fmt = oct_mach_info::native,
+	  oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_native,
 	  c_file_ptr_buf::close_fcn cf = c_file_ptr_buf::fclose)
   {
     return octave_stream (new octave_stdiostream (n, f, arg_md, flt_fmt, cf));
   }
 
   // Position a stream at OFFSET relative to ORIGIN.
 
   int seek (std::streamoff offset, std::ios::seekdir origin);
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -1039,17 +1039,17 @@ octave_base_stream::read (const Array<do
       int nc = -1;
 
       bool ignore;
 
       get_size (size, nr, nc, ignore, "fread");
 
       if (! error_state)
 	{
-	  if (ffmt == oct_mach_info::unknown)
+	  if (ffmt == oct_mach_info::flt_fmt_unknown)
 	    ffmt = float_format ();
 
 	  int tmp = retval.read (is, nr, nc, dt, skip, ffmt);
 
 	  if (tmp < 0)
 	    error ("fread: read error");
 	  else
 	    char_count = tmp;
@@ -2030,17 +2030,17 @@ octave_base_stream::write (const octave_
   if (osp)
     {
       std::ostream& os = *osp;
 
       Matrix mval = data.matrix_value ();
 
       if (! error_state)
 	{
-	  if (ffmt == oct_mach_info::unknown)
+	  if (ffmt == oct_mach_info::flt_fmt_unknown)
 	    ffmt = float_format ();
 
 	  int tmp = mval.write (os, dt, skip, ffmt);
 
 	  if (tmp < 0)
 	    error ("fwrite: write error");
 	  else
 	    retval = tmp;
@@ -2896,17 +2896,17 @@ octave_stream::mode (void) const
     retval = rep->mode ();
 
   return retval;
 }
 
 oct_mach_info::float_format
 octave_stream::float_format (void) const
 {
-  oct_mach_info::float_format retval = oct_mach_info::unknown;
+  oct_mach_info::float_format retval = oct_mach_info::flt_fmt_unknown;
 
   if (stream_ok ("float_format"))
     retval = rep->float_format ();
 
   return retval;
 }
 
 std::string
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -318,17 +318,17 @@ private:
 class
 octave_base_stream
 {
 friend class octave_stream;
 
 public:
 
   octave_base_stream (std::ios::openmode arg_md = std::ios::in|std::ios::out,
-		      oct_mach_info::float_format ff = oct_mach_info::native)
+		      oct_mach_info::float_format ff = oct_mach_info::flt_fmt_native)
     : count (0), md (arg_md), flt_fmt (ff), fail (false), open_state (true)
   { }
 
   virtual ~octave_base_stream (void) { }
 
   // The remaining functions are not specific to input or output only,
   // and must be provided by the derived classes.
 
diff --git a/src/oct-strstrm.h b/src/oct-strstrm.h
--- a/src/oct-strstrm.h
+++ b/src/oct-strstrm.h
@@ -31,17 +31,17 @@ Software Foundation, 59 Temple Place - S
 
 class
 octave_base_strstream : public octave_base_stream
 {
 public:
 
   octave_base_strstream (std::ios::openmode arg_md = std::ios::out,
 			 oct_mach_info::float_format flt_fmt =
-			 oct_mach_info::native)
+			 oct_mach_info::flt_fmt_native)
     : octave_base_stream (arg_md, flt_fmt) { }
 
   // Position a stream at OFFSET relative to ORIGIN.
 
   int seek (std::streamoff offset, std::ios::seekdir origin);
 
   // Return current stream position.
 
@@ -73,32 +73,32 @@ private:
 class
 octave_istrstream : public octave_base_strstream
 {
 public:
 
   octave_istrstream (const char *data,
 		     std::ios::openmode arg_md = std::ios::out,
 		     oct_mach_info::float_format flt_fmt =
-		     oct_mach_info::native)
+		     oct_mach_info::flt_fmt_native)
     : octave_base_strstream (arg_md, flt_fmt), is (data) { }
 
   octave_istrstream (const std::string& data,
 		     std::ios::openmode arg_md = std::ios::out,
 		     oct_mach_info::float_format flt_fmt =
-		     oct_mach_info::native)
+		     oct_mach_info::flt_fmt_native)
     : octave_base_strstream (arg_md, flt_fmt), is (data.c_str ()) { }
 
   static octave_stream
   create (const char *data, std::ios::openmode arg_md = std::ios::out,
-	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
+	  oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_native);
 
   static octave_stream
   create (const std::string& data, std::ios::openmode arg_md = std::ios::out,
-	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
+	  oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_native);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return is.eof (); }
 
   std::istream *input_stream (void) { return &is; }
 
   std::ostream *output_stream (void) { return 0; }
@@ -126,22 +126,22 @@ private:
 
 class
 octave_ostrstream : public octave_base_strstream
 {
 public:
 
   octave_ostrstream (std::ios::openmode arg_md = std::ios::out,
 		     oct_mach_info::float_format flt_fmt =
-		     oct_mach_info::native)
+		     oct_mach_info::flt_fmt_native)
     : octave_base_strstream (arg_md, flt_fmt) { }
 
   static octave_stream
   create (std::ios::openmode arg_md = std::ios::out,
-	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
+	  oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_native);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return os.eof (); }
 
   std::istream *input_stream (void) { return 0; }
 
   std::ostream *output_stream (void) { return &os; }
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -1120,19 +1120,19 @@ pr_any_float (const float_format *fmt, s
 	    oct_mach_info::native_float_format ();
 
 	  char ofill = os.fill ('0');
 
 	  std::ios::fmtflags oflags
 	    = os.flags (std::ios::right | std::ios::hex);
 
 	  if (hex_format > 1
-	      || flt_fmt == oct_mach_info::ieee_big_endian
-	      || flt_fmt == oct_mach_info::cray
-	      || flt_fmt == oct_mach_info::unknown)
+	      || flt_fmt == oct_mach_info::flt_fmt_ieee_big_endian
+	      || flt_fmt == oct_mach_info::flt_fmt_cray
+	      || flt_fmt == oct_mach_info::flt_fmt_unknown)
 	    {
 	      for (size_t i = 0; i < sizeof (double); i++)
 		os << std::setw (2) << static_cast<int> (tmp.i[i]);
 	    }
 	  else
 	    {
 	      for (int i = sizeof (double) - 1; i >= 0; i--)
 		os << std::setw (2) << static_cast<int> (tmp.i[i]);
@@ -1150,19 +1150,19 @@ pr_any_float (const float_format *fmt, s
 	  // format.
 
 	  // XXX FIXME XXX -- is it correct to swap bytes for VAX
 	  // formats and not for Cray?
 
 	  oct_mach_info::float_format flt_fmt =
 	    oct_mach_info::native_float_format ();
 
-	  if (flt_fmt == oct_mach_info::ieee_big_endian
-	      || flt_fmt == oct_mach_info::cray
-	      || flt_fmt == oct_mach_info::unknown)
+	  if (flt_fmt == oct_mach_info::flt_fmt_ieee_big_endian
+	      || flt_fmt == oct_mach_info::flt_fmt_cray
+	      || flt_fmt == oct_mach_info::flt_fmt_unknown)
 	    {
 	      for (size_t i = 0; i < sizeof (double); i++)
 		PRINT_CHAR_BITS (os, tmp.i[i]);
 	    }
 	  else
 	    {
 	      if (bit_format > 1)
 		{
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -628,18 +628,18 @@ DEFUN (isieee, , ,
 @deftypefn {Built-in Function} {} isieee ()\n\
 Return 1 if your computer claims to conform to the IEEE standard for\n\
 floating point calculations.\n\
 @end deftypefn")
 {
   oct_mach_info::float_format flt_fmt =
     oct_mach_info::native_float_format ();
 
-  return octave_value (flt_fmt == oct_mach_info::ieee_little_endian
-		       || flt_fmt == oct_mach_info::ieee_big_endian);
+  return octave_value (flt_fmt == oct_mach_info::flt_fmt_ieee_little_endian
+		       || flt_fmt == oct_mach_info::flt_fmt_ieee_big_endian);
 }
 
 DEFUN (tilde_expand, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} tilde_expand (@var{string})\n\
 Performs tilde expansion on @var{string}.  If @var{string} begins with a\n\
 tilde character, (@samp{~}), all of the characters preceding the first\n\
 slash (or all characters, if there is no slash) are treated as a\n\
