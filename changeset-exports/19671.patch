# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1422832560 18000
#      Sun Feb 01 18:16:00 2015 -0500
# Node ID 322d0fe84a8cd321f84df06d67c0781a7c2aba06
# Parent  e5facc6eec13db98bf901d9dee1c5fc38e441ea1
Make audio buffer size dependent on sample rate

* audiodevinfo.cc (audioplayer::play, audioplayer::playblocking,
audiorecorder::record, audiorecorder::recordblocking): Decrease audio buffer
size and make size dependent on audio sample rate.

diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -30,16 +30,17 @@ along with Octave; see the file COPYING.
 #include <string>
 #include <vector>
 
 #include "mach-info.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
+#include "oct-locbuf.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-int32.h"
 #include "ov-struct.h"
 #include "parse.h"
 
 #if defined (HAVE_PORTAUDIO)
 
@@ -543,18 +544,16 @@ private:
   RowVector right;
   PaStream *stream;
   PaStreamParameters output_parameters;
   audio_type type;
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
-static const unsigned int BUFFER_SIZE = 8192;
-
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (audioplayer, "audioplayer", "audioplayer");
 
 static int
 octave_play_callback (const void *, void *output, unsigned long frames,
                       const PaStreamCallbackTimeInfo *,
                       PaStreamCallbackFlags, void *data)
 {
   audioplayer *player = static_cast<audioplayer *> (data);
@@ -677,17 +676,17 @@ portaudio_play_callback (const void *, v
     {
       error ("audio player callback function called without player");
       return paAbort;
     }
 
   // Don't multiply the audio data by scale_factor here.  Although it
   // would move the operation outside of the loops below, it also causes
   // a second copy of the *entire* data array to be made when only a
-  // small portion (BUFFER_SIZE elements) is usually needed for this
+  // small portion (buffer_size elements) is usually needed for this
   // callback.
 
   const RowVector sound_l = player->get_left ();
   const RowVector sound_r = player->get_right ();
 
   const double *pl = sound_l.data ();
   const double *pr = sound_r.data ();
 
@@ -1124,44 +1123,47 @@ audioplayer::get_userdata (void)
 }
 
 void
 audioplayer::playblocking (void)
 {
   if (get_stream ())
     stop ();
 
+  const unsigned int buffer_size = get_fs () / 20;
+  OCTAVE_LOCAL_BUFFER (uint32_t, buffer, buffer_size * 2);
+
   PaError err;
-  uint32_t buffer[BUFFER_SIZE * 2];
   err = Pa_OpenStream (&stream, 0, &(output_parameters), get_fs (),
-                       BUFFER_SIZE, paClipOff, 0, 0);
+                       buffer_size, paClipOff, 0, 0);
   if (err != paNoError)
     {
       error ("audioplayer: unable to open audio playback stream");
       return;
     }
 
   err = Pa_StartStream (stream);
   if (err != paNoError)
     {
       error ("audioplayer: unable to start start audio playback stream");
       return;
     }
 
   unsigned int start, end;
   start = get_sample_number ();
   end = get_end_sample ();
-  for (unsigned int i = start; i < end; i += BUFFER_SIZE)
+
+  for (unsigned int i = start; i < end; i += buffer_size)
     {
       if (octave_callback_function != 0)
-        octave_play_callback (0, buffer, BUFFER_SIZE, 0, 0, this);
+        octave_play_callback (0, buffer, buffer_size, 0, 0, this);
       else
-        portaudio_play_callback (0, buffer, BUFFER_SIZE, 0, 0, this);
-
-      err = Pa_WriteStream (stream, buffer, BUFFER_SIZE);
+        portaudio_play_callback (0, buffer, buffer_size, 0, 0, this);
+
+      err = Pa_WriteStream (stream, buffer, buffer_size);
     }
 
   err = Pa_StopStream (stream);
   if (err != paNoError)
     {
       error ("audioplayer: failed to stop audio playback stream");
       return;
     }
@@ -1179,24 +1181,26 @@ audioplayer::playblocking (void)
 }
 
 void
 audioplayer::play (void)
 {
   if (get_stream ())
     stop ();
 
+  const unsigned int buffer_size = get_fs () / 20;
+
   PaError err;
   if (octave_callback_function != 0)
     err = Pa_OpenStream (&stream, 0, &(output_parameters),
-                         get_fs (), BUFFER_SIZE, paClipOff,
+                         get_fs (), buffer_size, paClipOff,
                          octave_play_callback, this);
   else
     err = Pa_OpenStream (&stream, 0, &(output_parameters),
-                         get_fs (), BUFFER_SIZE, paClipOff,
+                         get_fs (), buffer_size, paClipOff,
                          portaudio_play_callback, this);
 
   if (err != paNoError)
     {
       error ("audioplayer: failed to open audio playback stream");
       return;
     }
 
@@ -1757,27 +1761,30 @@ audiorecorder::isrecording (void)
 void
 audiorecorder::record (void)
 {
   if (get_stream ())
     stop ();
 
   left.clear ();
   right.clear ();
+
+  const unsigned int buffer_size = get_fs () / 20;
+
   PaError err;
   if (octave_callback_function != 0)
     {
       err = Pa_OpenStream (&stream, &(input_parameters), 0,
-                           get_fs (), BUFFER_SIZE, paClipOff,
+                           get_fs (), buffer_size, paClipOff,
                            octave_record_callback, this);
     }
   else
     {
       err = Pa_OpenStream (&stream, &(input_parameters), 0,
-                           get_fs (), BUFFER_SIZE, paClipOff,
+                           get_fs (), buffer_size, paClipOff,
                            portaudio_record_callback, this);
     }
   if (err != paNoError)
     {
       error ("audiorecorder: unable to open audio recording stream");
       return;
     }
   err = Pa_StartStream (stream);
@@ -1792,41 +1799,45 @@ void
 audiorecorder::recordblocking (float seconds)
 {
   if (get_stream ())
     stop ();
 
   left.clear ();
   right.clear ();
 
+  const unsigned int buffer_size = get_fs () / 20;
+  OCTAVE_LOCAL_BUFFER (uint8_t, buffer, buffer_size * 2 * 3);
+
   PaError err;
   err = Pa_OpenStream (&stream, &(input_parameters), 0,
-                       get_fs (), BUFFER_SIZE, paClipOff, 0, this);
+                       get_fs (), buffer_size, paClipOff, 0, this);
   if (err != paNoError)
     {
       error ("audiorecorder: unable to open audio recording stream");
       return;
     }
 
   err = Pa_StartStream (stream);
   if (err != paNoError)
     {
       error ("audiorecorder: unable to start audio recording stream");
       return;
     }
 
   unsigned int frames = seconds * get_fs ();
-  uint8_t buffer[BUFFER_SIZE * 2 * 3];
-  for (unsigned long i = 0; i < frames / BUFFER_SIZE; i++)
+
+  for (unsigned int i = 0; i < frames; i += buffer_size)
     {
-      Pa_ReadStream (get_stream (), buffer, BUFFER_SIZE);
+      Pa_ReadStream (get_stream (), buffer, buffer_size);
+
       if (octave_callback_function != 0)
-        octave_record_callback (buffer, 0, BUFFER_SIZE, 0, 0, this);
+        octave_record_callback (buffer, 0, buffer_size, 0, 0, this);
       else
-        portaudio_record_callback (buffer, 0, BUFFER_SIZE, 0, 0, this);
+        portaudio_record_callback (buffer, 0, buffer_size, 0, 0, this);
     }
 }
 
 void
 audiorecorder::pause (void)
 {
   if (get_stream () == 0)
     return;
