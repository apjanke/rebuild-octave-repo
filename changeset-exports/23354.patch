# HG changeset patch
# User Rik <rik@octave.org>
# Date 1491436461 25200
#      Wed Apr 05 16:54:21 2017 -0700
# Node ID 1a2941fb8ffd8ba1583519b533a0a906b15eb7b5
# Parent  95744d6d7d3b4f1a64d642b1c31fc1fd8860d9c8
Change display of structs to respect compact format.

* ov-struct.cc (octave_struct::print_raw): Don't print newline before "struct
array containing...".  Rely on print_name_tag to figure out whether newline is
required.  Don't print newline after "struct array containing..." if format is
compact.
* ov-struct.cc (octave_struct::print_name_tag): Print a newline between name of
variable and rest of printout if format is loose.

* ov-struct.cc (octave_scalar_struct::print_raw): Don't print newline before
"scalar structure containing...".  Rely on print_name_tag to figure out whether
newline is required.
* ov-struct.cc (octave_struct::print_name_tag): Print a newline between name of
variable and rest of printout if format is loose.

diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -576,33 +576,33 @@ octave_struct::print_raw (std::ostream& 
     {
       bool max_depth_reached = Vstruct_levels_to_print-- == 0;
 
       bool print_fieldnames_only
         = (max_depth_reached || ! Vprint_struct_array_contents);
 
       increment_indent_level ();
 
-      newline (os);
       indent (os);
       dim_vector dv = dims ();
       os << dv.str () << " struct array containing the fields:";
       newline (os);
 
       increment_indent_level ();
 
       string_vector key_list = map.fieldnames ();
 
       for (octave_idx_type i = 0; i < key_list.numel (); i++)
         {
           std::string key = key_list[i];
 
           Cell val = map.contents (key);
 
-          newline (os);
+          if (i > 0 || ! Vcompact_format)
+            newline (os);
 
           if (print_fieldnames_only)
             {
               indent (os);
               os << key;
             }
           else
             {
@@ -633,16 +633,19 @@ octave_struct::print_name_tag (std::ostr
   indent (os);
 
   if (Vstruct_levels_to_print < 0)
     os << name << " = ";
   else
     {
       os << name << " =";
       newline (os);
+      if (! Vcompact_format)
+        newline (os);
+
       retval = true;
     }
 
   return retval;
 }
 
 static bool
 scalar (const dim_vector& dims)
@@ -1258,19 +1261,16 @@ octave_scalar_struct::print_raw (std::os
   if (Vstruct_levels_to_print >= 0)
     {
       bool max_depth_reached = Vstruct_levels_to_print-- == 0;
 
       bool print_fieldnames_only = max_depth_reached;
 
       increment_indent_level ();
 
-      if (! Vcompact_format)
-        newline (os);
-
       indent (os);
       os << "scalar structure containing the fields:";
       newline (os);
       if (! Vcompact_format)
         newline (os);
 
       increment_indent_level ();
 
@@ -1314,16 +1314,19 @@ octave_scalar_struct::print_name_tag (st
   indent (os);
 
   if (Vstruct_levels_to_print < 0)
     os << name << " = ";
   else
     {
       os << name << " =";
       newline (os);
+      if (! Vcompact_format)
+        newline (os);
+
       retval = true;
     }
 
   return retval;
 }
 
 bool
 octave_scalar_struct::save_ascii (std::ostream& os)
