# HG changeset patch
# User Andreas Weber <andy.weber.aw@gmail.com>
# Date 1404042434 -7200
#      Sun Jun 29 13:47:14 2014 +0200
# Node ID 0075f3fba930f8ba6e495c96089ed82a70eb2d49
# Parent  c7467316175273567019f7e2682825b25a0cf7bd
dump_demos.m: Update to match new plot directory structure

* dump_demos.m: Use new plot/[appearance, draw, util] dirs,
  replace obsolete dir_in_loadpath, fix some typos and
  whitespace issues.

diff --git a/scripts/testfun/dump_demos.m b/scripts/testfun/dump_demos.m
--- a/scripts/testfun/dump_demos.m
+++ b/scripts/testfun/dump_demos.m
@@ -13,29 +13,29 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} dump_demos ()
-## @deftypefnx {Function File} {} dump_demos (@var{DIR})
-## @deftypefnx {Function File} {} dump_demos (@var{DIR}, @var{mfile})
-## @deftypefnx {Function File} {} dump_demos (@var{DIR}, @var{mfile}, @var{fmt})
+## @deftypefnx {Function File} {} dump_demos (@var{dirs})
+## @deftypefnx {Function File} {} dump_demos (@var{dirs}, @var{mfile})
+## @deftypefnx {Function File} {} dump_demos (@var{dirs}, @var{mfile}, @var{fmt})
 ## Produces a script, with the name specified by @var{mfile}, containing
-## the demos in the directory, @var{DIR}. The demos are assumed to produce
+## the demos in the directories, @var{dirs}. The demos are assumed to produce
 ## graphical output, whose renderings are saved with specified format,
 ## @var{fmt}.
 ##
 ## The defaults for each input are;
 ##
 ## @table @samp
-##   @item @var{DIR}
-##   @code{"plot"}
+##   @item @var{dirs}
+##   @code{@{"plot/appearance", "plot/draw", "plot/util"@}}
 ##   @item @var{mfile}
 ##   @code{"dump.m"}
 ##   @item @var{fmt}
 ##   @code{"png"}
 ## @end table
 ##
 ## For example, to produce PNG output for all demos of the functions
 ## in the plot directory;
@@ -45,84 +45,94 @@
 ## dump_demos plot dump.m png
 ## @end group
 ## @end example
 ## @seealso{fntests, test, demo}
 ## @end deftypefn
 
 ## Author: SÃ¸ren Hauberg  <soren@hauberg.org>
 
-function dump_demos (directory="plot", output="dump.m", fmt="png")
-  
-  ## Get path
-  if (nargin < 4)
-    if (is_absolute_filename (directory))
-      dirs = {directory};
-    else
-      fullname = find_dir_in_path (directory);
-      if (! isempty (fullname))
-        dirs = {fullname};
-      else
-        error ("print_demos: expecting argument to be a directory name");
-      endif
-    endif
-  else
+function dump_demos (dirs= {"plot/appearance", "plot/draw", "plot/util"}, output="dump.m", fmt="png")
+
+  if (nargin > 3)
     print_usage ();
   endif
 
   if (strfind (output, ".m") != numel (output) - 1)
     output = strcat (output, ".m");
   endif
 
   ## Create script beginning (close figures, etc.)
   fid = fopen (output, "w");
   n = find (output == ".", 1, "last");
   if (isempty (n))
     n = numel (output);
   else
     n = n - 1;
   endif
+  fprintf (fid, "%% DO NOT EDIT!  Generated automatically by dump_demos.m\n");
   fprintf (fid, "function %s ()\n", output(1:n));
   fprintf (fid, "close all\n");
   fprintf (fid, "more off\n");
 
   ## Run and print the demos in each directory
   for i = 1:numel (dirs)
+    if (!is_absolute_filename (dirs{i}))
+      fullname = dir_in_loadpath (dirs{i});
+      if (! isempty (fullname))
+        dirs{i} = fullname;
+      else
+        error ("dump_demos: expecting DIRS argument to be a cell arrays of strings with directory names");
+      endif
+    endif
     d = dirs{i};
+    if (!exist (d, "dir"))
+      error ("dump_demos: directory %s doesn't exist", d);
+    endif
     dump_all_demos (d, fid, fmt);
   endfor
-  
+
   ## Create script ending
   fprintf (fid, "end\n\n")
 
   ## TODO - Should dump_demos() attempt to convert the demos to traditional
-  ##        sytax.
+  ##        syntax.
   ##        (1) oct2mat() to convert some Octave specific syntax.
   ##        (2) Embed sombrero(), vec(), cstrcat() and assert() in demos ?
 
+  ## sombrero has now a default argument which isn't supported from matlab
+  ## http://octave.1599824.n4.nabble.com/sombrero-default-argument-matlab-compatibility-td4665016.html
+  ## TODO: we need to change it prior running
+  ## -function [x, y, z] = sombrero (n = 41)
+  ## +function [x, y, z] = sombrero (n)
+  ## +
+  ## +  if (nargin == 0)
+  ## +    n = 41;
+  ## +  endif
+  
   for mfile = {"sombrero"}
     f = which (mfile{1});
     fid2 = fopen (f);
     code = char (fread (fid2));
     code = oct2mat (code);
     fprintf (fid, "%s", code);
     fclose (fid2);
   endfor
-
-  fprintf (fid, "function x = vec (x)\n")
-  fprintf (fid, "  x = x(:);\n")
-  fprintf (fid, "end\n")
-
-  fprintf (fid, "function str = cstrcat (varargin)\n")
-  fprintf (fid, "  str = [varargin{:}];\n")
-  fprintf (fid, "end\n")
-
-  fprintf (fid, "function assert (varargin)\n")
-  fprintf (fid, "% Do nothing.\n")
-  fprintf (fid, "end\n")
+%~
+  %~ fprintf (fid, "function x = vec (x)\n")
+  %~ fprintf (fid, "  x = x(:);\n")
+  %~ fprintf (fid, "end\n")
+%~
+  %~ fprintf (fid, "function str = cstrcat (varargin)\n")
+  %~ fprintf (fid, "  str = [varargin{:}];\n")
+  %~ fprintf (fid, "end\n")
+%~
+  %~ fprintf (fid, "function assert (varargin)\n")
+  %~ fprintf (fid, "%% Do nothing.\n")
+  %~ fprintf (fid, "end\n")
 
   ## Close script
   fclose (fid);
 endfunction
 
 function dump_all_demos (directory, fid, fmt)
   dirinfo = dir (fullfile (directory, "*.m"));
   flist = {dirinfo.name};
@@ -143,26 +153,26 @@ function dump_all_demos (directory, fid,
       fprintf (fid, "  drawnow\n");
       fprintf (fid, "  num_figures = get(0, 'currentfigure');\n");
       fprintf (fid, "  for fig = 1:num_figures\n");
       fprintf (fid, "    figure (fig);\n");
       fprintf (fid, "    name = sprintf ('%s_%s_%%d.%s', fig);\n", fun, idx, fmt);
       fprintf (fid, "    if (numel (dir (name)) == 0)\n");
       fprintf (fid, "      fprintf ('Printing ""%%s"" ... ', name);\n")
       fprintf (fid, "      print ('-d%s', name);\n", fmt);
-      fprintf (fid, "      pause (1);\n");
+#     fprintf (fid, "      pause (1);\n");
       fprintf (fid, "      fprintf ('done\\n');\n");
       fprintf (fid, "    else\n");
       fprintf (fid, "      fprintf ('File ""%%s"" exists.\\n', name);\n")
       fprintf (fid, "    end\n");
-      fprintf (fid, "    drawnow ();\n");
+#     fprintf (fid, "    drawnow ();\n");
       fprintf (fid, "  end\n");
       fprintf (fid, "  close (2:num_figures)\n");
       fprintf (fid, "catch\n");
-      fprintf (fid, "  fprintf ('%s_%s: %%s\\n', lasterr ());\n", fun, idx);
+      fprintf (fid, "  fprintf ('ERROR in %s_%s: %%s\\n', lasterr ());\n", fun, idx);
       fprintf (fid, "end\n\n");
     endfor
   endfor
   fprintf (fid, "close all\n");
 endfunction
 
 function retval = get_demos (fun)
   [code, idx] = test (fun, "grabdemo");
@@ -173,17 +183,19 @@ function retval = get_demos (fun)
     retval {k} = oct2mat (code (idx (k):idx (k+1)-1));
   endfor
 endfunction
 
 function code = oct2mat (code)
   ## Simple hacks to make things Matlab compatible
   code = strrep (code, "%!", "%%");
   code = strrep (code, "!", "~");
-  code = strrep (code, "\"", "'");
+  ## Simple replacing double quotes with single quotes
+  ## causes problems with strings like 'hello "world"'
+  #code = strrep (code, "\"", "'");
   code = strrep (code, "#", "%");
   ## Fix the format specs for the errobar demos
   code = strrep (code, "%r", "#r");
   code = strrep (code, "%~", "#~");
   endkeywords = {"endfor", "endif", "endwhile", "end_try_catch", ...
                  "endfunction", "end_unwind_protect"};
   for k = 1:numel (endkeywords)
     code = strrep (code, endkeywords{k}, "end");
