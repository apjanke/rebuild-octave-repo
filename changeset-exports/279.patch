# HG changeset patch
# User jwe
# Date 758069513 0
#      Sat Jan 08 22:51:53 1994 +0000
# Node ID c64f870ac8d993b20d27651d748be8c6411a0c0c
# Parent  c2189d67a05c3b48be300f4e8061a324c84010bd
[project @ 1994-01-08 22:51:53 by jwe]

diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -1394,50 +1394,49 @@ tree_constant_rep::save_three_d (ostream
 int
 tree_constant_rep::load (istream& is)
 {
   int is_global = 0;
 
   type_tag = unknown_constant;
 
 // Look for type keyword
-  char tag [128];
-  if (extract_keyword (is, "type", tag))
+
+  char *tag = extract_keyword (is, "type");
+
+  if (tag != (char *) NULL && *tag != '\0')
     {
-      if (tag != (char *) NULL && *tag != '\0')
+      char *ptr = strchr (tag, ' ');
+      if (ptr != (char *) NULL)
 	{
-	  char *ptr = strchr (tag, ' ');
-	  if (ptr != (char *) NULL)
-	    {
-	      *ptr = '\0';
-	      is_global = (strncmp (tag, "global", 6) == 0);
-	      *ptr = ' ';
-	      ptr++;
-	    }
-	  else
-	    ptr = &tag[0];
-
-	  if (strncmp (ptr, "scalar", 6) == 0)
-	    type_tag = load (is, scalar_constant);
-	  else if (strncmp (ptr, "matrix", 6) == 0)
-	    type_tag = load (is, matrix_constant);
-	  else if (strncmp (ptr, "complex scalar", 14) == 0)
-	    type_tag = load (is, complex_scalar_constant);
-	  else if (strncmp (ptr, "complex matrix", 14) == 0)
-	    type_tag = load (is, complex_matrix_constant);
-	  else if (strncmp (ptr, "string", 6) == 0)
-	    type_tag = load (is, string_constant);
-	  else if (strncmp (ptr, "range", 5) == 0)
-	    type_tag = load (is, range_constant);
-	  else
-	    ::error ("unknown constant type `%s'", tag);
+	  *ptr = '\0';
+	  is_global = (strncmp (tag, "global", 6) == 0);
+	  *ptr = ' ';
+	  ptr++;
 	}
       else
-	::error ("failed to extract keyword specifying value type");
+	ptr = &tag[0];
+
+      if (strncmp (ptr, "scalar", 6) == 0)
+	type_tag = load (is, scalar_constant);
+      else if (strncmp (ptr, "matrix", 6) == 0)
+	type_tag = load (is, matrix_constant);
+      else if (strncmp (ptr, "complex scalar", 14) == 0)
+	type_tag = load (is, complex_scalar_constant);
+      else if (strncmp (ptr, "complex matrix", 14) == 0)
+	type_tag = load (is, complex_matrix_constant);
+      else if (strncmp (ptr, "string", 6) == 0)
+	type_tag = load (is, string_constant);
+      else if (strncmp (ptr, "range", 5) == 0)
+	type_tag = load (is, range_constant);
+      else
+	::error ("unknown constant type `%s'", tag);
     }
+  else
+    ::error ("failed to extract keyword specifying value type");
 
   return is_global;
 }
 
 tree_constant_rep::constant_type
 tree_constant_rep::load (istream& is, tree_constant_rep::constant_type t)
 {
   tree_constant_rep::constant_type status = unknown_constant;
diff --git a/src/t-builtins.cc b/src/t-builtins.cc
--- a/src/t-builtins.cc
+++ b/src/t-builtins.cc
@@ -241,19 +241,17 @@ in_list (char *s, char **list)
     }
 
   return 0;
 }
 #endif
 
 /*
  * Wipe out user-defined variables and functions given a list of
- * regular expressions.
- *
- * It's not likely that this works correctly now.  XXX FIXME XXX
+ * globbing patterns.
  */
 tree_constant
 builtin_clear (int argc, char **argv)
 {
   tree_constant retval;
 
 // Always clear the local table, but don't clear currently compiled
 // functions unless we are at the top level.  (Allowing that to happen
@@ -731,42 +729,49 @@ builtin_load (int argc, char **argv)
       if (! file)
 	{
 	  error ("load: couldn't open input file `%s'", *argv);
 	  return retval;
 	}
       stream = file;
     }
 
-  char nm [128]; // XXX FIXME XXX
   int count = 0;
   for (;;)
     {
 // Read name for this entry or break on EOF.
-      if (extract_keyword (stream, "name", nm) == 0 || nm == (char *) NULL)
+      char *nm = extract_keyword (stream, "name");
+      if (nm == (char *) NULL)
 	{
 	  if (count == 0)
 	    {
 	      error ("load: no name keywords found in file `%s'", *argv);
 	      error ("Are you sure this is an octave data file?");
 	    }
 	  break;
 	}
+      else
+	count++;
 
       if (*nm == '\0')
 	continue;
 
       if (! valid_identifier (nm))
 	{
 	  warning ("load: skipping bogus identifier `%s'");
 	  continue;
 	}
 
-      if (load_variable (nm, force, stream))
-	count++;
+      load_variable (nm, force, stream);
+
+      if (error_state)
+	{
+	  error ("reading file %s", *argv);
+	  break;
+	}
     }
 
   if (file);
     file.close ();
 
   return retval;
 }
 
@@ -870,17 +875,17 @@ builtin_save (int argc, char **argv)
 
   argc--;
   argv++;
 
   static ostream stream;
   static ofstream file;
   if (strcmp (*argv, "-") == 0)
     {
-// XXX FIXME XXX -- things intended for the screen should end up in a
+// XXX FIXME XXX -- should things intended for the screen end up in a 
 // tree_constant (string)?
       stream = cout;
     }
   else if (argc == 1 && glob_pattern_p (*argv)) // Guard against things
     {						// like `save a*',
       print_usage ("save");			// which are probably
       return retval;				// mistakes...
     }
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -26,16 +26,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #endif
 
 #include <sys/types.h>
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
 #endif
 #include <ctype.h>
 #include <iostream.h>
+#include <strstream.h>
 
 #include "statdefs.h"
 #include "tree-const.h"
 #include "variables.h"
 #include "user-prefs.h"
 #include "symtab.h"
 #include "builtins.h"
 #include "g-builtins.h"
@@ -442,85 +443,99 @@ is_globally_visible (const char *name)
   return (sr != (symbol_record *) NULL && sr->is_linked_to_global ());
 }
 
 /*
  * Extract a keyword and its value from a file.  Input should look
  * something like:
  *
  *  #[ \t]*keyword[ \t]*:[ \t]*string-value\n
+ *
+ * Returns a pointer to a static variable which is only valid until
+ * the next time this function is called.
  */
-int
-extract_keyword (istream& is, char *keyword, char *value)
+char *
+extract_keyword (istream& is, char *keyword)
 {
-  char *ptr = value;
+  ostrstream buf;
 
-  int status = 0;
+  static char *retval = (char *) NULL;
+
+  delete [] retval;
+  retval = (char *) NULL;
 
   char c;
   while (is.get (c))
     {
       if (c == '#')
 	{
 	  while (is.get (c) && (c == ' ' || c == '\t' || c == '#'))
 	    ; // Skip whitespace and comment characters.
 
 	  if (isalpha (c))
-	    *ptr++ = c;
+	    buf << c;
 
 	  while (is.get (c) && isalpha (c))
-	    *ptr++ = c;
+	    buf << c;
 
-	  if (strncmp (value, keyword, strlen (keyword)) == 0)
+	  buf << ends;
+	  char *tmp = buf.str ();
+	  int match = (strncmp (tmp, keyword, strlen (keyword)) == 0);
+	  delete [] tmp;
+
+	  if (match)
 	    {
-	      ptr = value;
+	      ostrstream value;
 	      while (is.get (c) && (c == ' ' || c == '\t' || c == ':'))
 		; // Skip whitespace and the colon.
 
 	      if (c != '\n')
 		{
-		  *ptr++ = c;
+		  value << c;
 		  while (is.get (c) && c != '\n')
-		    *ptr++ = c;
+		    value << c;
 		}
-	      *ptr = '\0';
-	      status = 1;
+	      value << ends;
+	      retval = value.str ();
 	      break;
 	    }
 	}
     }
-  return status;
+  return retval;
 }
 
 int
 extract_keyword (istream& is, char *keyword, int& value)
 {
-  char buf [128];
-  char *ptr = buf;
+  ostrstream buf;
 
   int status = 0;
   value = 0;
 
   char c;
   while (is.get (c))
     {
       if (c == '#')
 	{
 	  while (is.get (c) && (c == ' ' || c == '\t' || c == '#'))
 	    ; // Skip whitespace and comment characters.
 
 	  if (isalpha (c))
-	    *ptr++ = c;
+	    buf << c;
 
 	  while (is.get (c) && isalpha (c))
-	    *ptr++ = c;
+	    buf << c;
 
-	  if (strncmp (buf, keyword, strlen (keyword)) == 0)
+	  buf << ends;
+	  char *tmp = buf.str ();
+	  int match = (strncmp (tmp, keyword, strlen (keyword)) == 0);
+	  delete [] tmp;
+
+	  if (match)
 	    {
-	      ptr = buf;
 	      while (is.get (c) && (c == ' ' || c == '\t' || c == ':'))
 		; // Skip whitespace and the colon.
 
 	      is.putback (c);
 	      if (c != '\n')
 		is >> value;
 	      if (is)
 		status = 1;
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -75,17 +75,17 @@ extern int builtin_real_scalar_variable 
 extern void link_to_global_variable (symbol_record *sr);
 extern void link_to_builtin_variable (symbol_record *sr);
 extern void link_to_builtin_or_function (symbol_record *sr);
 
 extern void force_link_to_function (const char *s);
 
 extern int is_globally_visible (const char *nm);
 
-extern int extract_keyword (istream&, char *, char *);
+extern char *extract_keyword (istream&, char *);
 extern int extract_keyword (istream&, char *, int&);
 
 extern void skip_comments (istream&);
 extern int valid_identifier (char *);
 extern int identifier_exists (char *);
 extern int is_builtin_variable (const char *name);
 extern tree *is_valid_function (tree_constant&, char *, int warn = 0);
 extern int takes_correct_nargs (tree *, int, char *, int warn = 0);
