# HG changeset patch
# User Rik <code@nomad.inbox5.com>
# Date 1271968655 25200
#      Thu Apr 22 13:37:35 2010 -0700
# Node ID 8db807a0eb784fba656c946e95ae8f0b3b34aebe
# Parent  26673015caec80d90836243a755db3ffe7a6cd4a
Return correct Hessenberg matrix when called with 0 or 1 output arguments
rather than full form with two output arguments.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-04-22  Rik <octave@nomad.inbox5.com>
+
+	* DLD-FUNCTIONS/hess.cc.: return correct Hessenberg matrix when called 
+   with only one output argument.
+
 2010-04-22  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (do_hypot): New helper function. Move bulk code from Fhypot
 	here.
 	(Fhypot): Account for >2 args by folding do_hypot several times.
 
 2010-04-20  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/DLD-FUNCTIONS/hess.cc b/src/DLD-FUNCTIONS/hess.cc
--- a/src/DLD-FUNCTIONS/hess.cc
+++ b/src/DLD-FUNCTIONS/hess.cc
@@ -94,57 +94,77 @@ is upper Hessenberg (@code{i >= j+1 => h
       if (arg.is_real_type ())
         {
          FloatMatrix tmp = arg.float_matrix_value ();
 
           if (! error_state)
             {
               FloatHESS result (tmp);
 
-              retval(1) = result.hess_matrix ();
-              retval(0) = result.unitary_hess_matrix ();
+              if (nargout <= 1)
+                retval(0) = result.hess_matrix ();
+              else
+                {
+                  retval(1) = result.hess_matrix ();
+                  retval(0) = result.unitary_hess_matrix ();
+                }
             }
         }
       else if (arg.is_complex_type ())
         {
           FloatComplexMatrix ctmp = arg.float_complex_matrix_value ();
 
           if (! error_state)
             {
               FloatComplexHESS result (ctmp);
 
-              retval(1) = result.hess_matrix ();
-              retval(0) = result.unitary_hess_matrix ();
+              if (nargout <= 1)
+                retval(0) = result.hess_matrix ();
+              else
+                {
+                  retval(1) = result.hess_matrix ();
+                  retval(0) = result.unitary_hess_matrix ();
+                }
             }
         }
     }
   else
     {
       if (arg.is_real_type ())
         {
           Matrix tmp = arg.matrix_value ();
 
           if (! error_state)
             {
               HESS result (tmp);
 
-              retval(1) = result.hess_matrix ();
-              retval(0) = result.unitary_hess_matrix ();
+              if (nargout <= 1)
+                retval(0) = result.hess_matrix ();
+              else
+                {
+                  retval(1) = result.hess_matrix ();
+                  retval(0) = result.unitary_hess_matrix ();
+                }
             }
         }
       else if (arg.is_complex_type ())
         {
           ComplexMatrix ctmp = arg.complex_matrix_value ();
 
           if (! error_state)
             {
               ComplexHESS result (ctmp);
 
-              retval(1) = result.hess_matrix ();
-              retval(0) = result.unitary_hess_matrix ();
+              if (nargout <= 1)
+                retval(0) = result.hess_matrix ();
+              else
+                {
+                  retval(1) = result.hess_matrix ();
+                  retval(0) = result.unitary_hess_matrix ();
+                }
             }
         }
       else
         {
           gripe_wrong_type_arg ("hess", arg);
         }
     }
 
