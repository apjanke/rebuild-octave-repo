# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1516482001 18000
#      Sat Jan 20 16:00:01 2018 -0500
# Node ID a79f782653ced9948ccf56f5dcf5ca74139889ef
# Parent  58dd3c2d5db8c512eac1e30118ec4cae26b6cd76
when editing sub-variables, generate complete subscript, not format string

* variable-editor-model.h, variable-editor-model.cc
(variable_editor_model::subscript_expression): Rename from
variable_editor_model::parens.  Generate complete subscript, not just
format string.

* variable-editor.cc (variable_editor::double_click):
Call variable_editor_model::subscript_expression, not
variable_editor_model::parens.  Don't limit editing of sub-elements to
matrix objects.

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -436,19 +436,21 @@ bool variable_editor_model::editor_type_
 }
 
 bool variable_editor_model::editor_type_string (const QModelIndex& idx) const
 {
   return m_d->sub_editor_type (idx) == sub_string;
 }
 
 QString
-variable_editor_model::parens (void) const
+variable_editor_model::subscript_expression (const QModelIndex& idx) const
 {
-  return m_d->m_type == "{" ? "{%1, %2}" : "(%1, %2)";
+  return (QString (m_d->m_type == "{" ? "{%1, %2}" : "(%1, %2)")
+          .arg (idx.row () + 1)
+          .arg (idx.column () + 1));
 }
 
 // Private slots.
 
 void
 variable_editor_model::received_data (int r, int c,
                                       const QString& dat,
                                       const QString& class_info,
diff --git a/libgui/src/variable-editor-model.h b/libgui/src/variable-editor-model.h
--- a/libgui/src/variable-editor-model.h
+++ b/libgui/src/variable-editor-model.h
@@ -85,19 +85,20 @@ public:
   // Is cell at idx complex enough to require a sub editor?
   bool requires_sub_editor (const QModelIndex& idx) const;
 
   // If a sub editor is required, is it a standard type?
   bool editor_type_matrix (const QModelIndex& idx) const;
 
   bool editor_type_string (const QModelIndex& idx) const;
 
-  // Return the proper parens to access the data structure.
-  // {%1,%2} for cell and (%1,%2) for matrices.
-  QString parens (void) const;
+  // Return a subscript expression as a string that can be used to
+  // access a sub-element of a data structure.  For example "{1,3}"
+  // for cell array element {1,3} or "(2,4)" for array element (2,4).
+  QString subscript_expression (const QModelIndex& idx) const;
 
 signals: // private
 
   void data_ready (int r, int c, const QString& data,
                    const QString& class_info, int rows, int cols);
 
   void no_data (int r, int c);
 
diff --git a/libgui/src/variable-editor.cc b/libgui/src/variable-editor.cc
--- a/libgui/src/variable-editor.cc
+++ b/libgui/src/variable-editor.cc
@@ -759,29 +759,17 @@ variable_editor::double_click (const QMo
   QString name = real_var_name (m_tab_widget->currentIndex ());
 
   QTableView *const table = get_table_data (m_tab_widget).m_table;
 
   variable_editor_model *const model
     = qobject_cast<variable_editor_model *> (table->model ());
 
   if (model->requires_sub_editor (idx))
-    {
-      if (model ->editor_type_matrix (idx))
-        edit_variable (name + model->parens () .arg (idx.row () + 1)
-                       .arg (idx.column () + 1));
-
-      // FIXME: What was the intent here?
-      // emit command_requested ("openvar ('" + name +
-      //                         model->parens ()
-      //                         .arg (idx.row () + 1)
-      //                         .arg (idx.column () + 1)
-      //                         + "');");
-
-    }
+    edit_variable (name + model->subscript_expression (idx));
 }
 
 void
 variable_editor::save (void)
 {
   QString name = real_var_name (m_tab_widget->currentIndex ());
   QString file
     = QFileDialog::getSaveFileName (this,
