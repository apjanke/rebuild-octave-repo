# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1223479767 14400
#      Wed Oct 08 11:29:27 2008 -0400
# Node ID 32e9e8103390532874051b0ce02a79aee279ac93
# Parent  ec3a55bd876bfc212580ed8f065b9a6880f9f0f5
Allow arrays of graphic handles to F__go_delete__

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2008-10-07  David Bateman  <dbateman@free.fr>
+
+	* graphics.cc (F__go_delete__): Allow arrays of graphic handles.
+
 2008-10-01  Jaroslav Hajek <highegg@gmail.com>
 
 	* OPERATORS/op-i64-i64.cc: Instantiate all 64-bit operations.
 	* OPERATORS/op-ui64-ui64.cc: Instantiate all unsigned 64-bit operations.
 
 2008-10-06  John W. Eaton  <jwe@octave.org>
 
 	* ov-type-conv.h (octave_type_conv_body): Avoid shadow warning
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -4414,42 +4414,50 @@ Undocumented internal function.\n\
   gh_manager::autolock guard;
 
   octave_value_list retval;
 
   if (args.length () == 1)
     {
       graphics_handle h = octave_NaN;
 
-      double val = args(0).double_value ();
+      const NDArray vals = args (0).array_value ();
 
       if (! error_state)
 	{
-	  h = gh_manager::lookup (val);
-
-	  if (h.ok ())
+	  for (octave_idx_type i = 0; i < vals.numel (); i++)
 	    {
-	      graphics_object obj = gh_manager::get_object (h);
-
-	      graphics_handle parent_h = obj.get_parent ();
-
-	      graphics_object parent_obj = gh_manager::get_object (parent_h);
-
-              // NOTE: free the handle before removing it from its parent's
-              //       children, such that the object's state is correct when
-              //       the deletefcn callback is executed
-
-	      gh_manager::free (h);
-
-	      parent_obj.remove_child (h);
-
-	      Vdrawnow_requested = true;
+	      h = gh_manager::lookup (vals.elem (i));
+
+	      if (h.ok ())
+		{
+		  graphics_object obj = gh_manager::get_object (h);
+
+		  graphics_handle parent_h = obj.get_parent ();
+
+		  graphics_object parent_obj = 
+		    gh_manager::get_object (parent_h);
+
+		  // NOTE: free the handle before removing it from its parent's
+		  //       children, such that the object's state is correct
+		  //       when the deletefcn callback is executed
+
+		  gh_manager::free (h);
+
+		  parent_obj.remove_child (h);
+
+		  Vdrawnow_requested = true;
+		}
+	      else
+		{
+		  error ("delete: invalid graphics object (= %g)", 
+			 vals.elem (i));
+		  break;
+		}
 	    }
-	  else
-	    error ("delete: invalid graphics object (= %g)", val);
 	}
       else
 	error ("delete: invalid graphics object");
     }
   else
     print_usage ();
 
   return retval;
