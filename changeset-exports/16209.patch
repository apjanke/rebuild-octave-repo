# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1362619235 18000
#      Wed Mar 06 20:20:35 2013 -0500
# Node ID e7ff32e7cf828cf3efd65a36dea8839497068323
# Parent  ed91ab4d451580424230dd2a5cdfaaefadef139b
move global promptflag variable to octave_reader class

* input.h, input.cc (promptflag): Declare as member of
octave_base_reader and rename to pflag.
(octave_base_reader::reset, octave_base_reader::promptflag,
octave_base_reader::increment_promptflag,
octave_reader::decrement_promptflag, octave_reader::promptflag,
octave_reader::increment_promptflag,
octave_reader::decrement_promptflag): New functions.
* lex.ll (octave_lexer::decrement_promptflag,
octave_lexer::promptflag, octave_lexer::increment_promptflag,
octave_lexer::decrement_promptflag): New functions.  Use them instead
of global promptflag variable.
(octave_lexer::reset): Call input_reader.reset.
* oct-parse.in.yy (input): Don't reset promptflag here.

diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -95,19 +95,16 @@ octave_time Vlast_prompt_time = 0.0;
 static char Vcompletion_append_char = ' ';
 
 // TRUE means this is an interactive shell.
 bool interactive = false;
 
 // TRUE means the user forced this shell to be interactive (-i).
 bool forced_interactive = false;
 
-// Should we issue a prompt?
-int promptflag = 1;
-
 // TRUE after a call to completion_matches.
 bool octave_completion_matches_called = false;
 
 // TRUE if the plotting system has requested a call to drawnow at
 // the next user prompt.
 bool Vdrawnow_requested = false;
 
 // TRUE if we are in debugging mode.
@@ -118,28 +115,28 @@ bool Vdebugging = false;
 static std::string last_debugging_command;
 
 // TRUE if we are running in the Emacs GUD mode.
 static bool Vgud_mode = false;
 
 // The filemarker used to separate filenames from subfunction names
 char Vfilemarker = '>';
 
-static void
-do_input_echo (const std::string& input_string)
+void
+octave_base_reader::do_input_echo (const std::string& input_string) const
 {
   int do_echo = CURR_LEXER->reading_script_file ?
     (Vecho_executing_commands & ECHO_SCRIPTS)
       : (Vecho_executing_commands & ECHO_CMD_LINE) && ! forced_interactive;
 
   if (do_echo)
     {
       if (forced_interactive)
         {
-          if (promptflag > 0)
+          if (pflag > 0)
             octave_stdout << command_editor::decode_prompt_string (VPS1);
           else
             octave_stdout << command_editor::decode_prompt_string (VPS2);
         }
       else
         octave_stdout << command_editor::decode_prompt_string (VPS4);
 
       if (! input_string.empty ())
@@ -198,17 +195,17 @@ octave_base_reader::octave_gets (bool& e
   octave_quit ();
 
   eof = false;
 
   std::string retval;
 
   bool history_skip_auto_repeated_debugging_command = false;
 
-  std::string ps = (promptflag > 0) ? VPS1 : VPS2;
+  std::string ps = (pflag > 0) ? VPS1 : VPS2;
 
   std::string prompt = command_editor::decode_prompt_string (ps);
 
   pipe_handler_error_count = 0;
 
   flush_octave_stdout ();
 
   octave_pager_stream::reset ();
diff --git a/libinterp/interpfcn/input.h b/libinterp/interpfcn/input.h
--- a/libinterp/interpfcn/input.h
+++ b/libinterp/interpfcn/input.h
@@ -38,19 +38,16 @@ class octave_value;
 extern OCTINTERP_API FILE *get_input_from_stdin (void);
 
 // TRUE means this is an interactive shell.
 extern bool interactive;
 
 // TRUE means the user forced this shell to be interactive (-i).
 extern bool forced_interactive;
 
-// Should we issue a prompt?
-extern int promptflag;
-
 // TRUE after a call to completion_matches.
 extern bool octave_completion_matches_called;
 
 // TRUE if the plotting system has requested a call to drawnow at
 // the next user prompt.
 extern OCTINTERP_API bool Vdrawnow_requested;
 
 // TRUE if we are in debugging mode.
@@ -80,32 +77,51 @@ extern octave_time Vlast_prompt_time;
 
 class
 octave_base_reader
 {
 public:
 
   friend class octave_input_reader;
 
-  octave_base_reader (void) : count (1) { }
+  octave_base_reader (void) : count (1), pflag (0) { }
 
   octave_base_reader (const octave_base_reader&) : count (1) { }
 
   virtual ~octave_base_reader (void) { }
 
   virtual std::string get_input (bool& eof) = 0;
 
   virtual std::string input_source (void) const { return in_src; }
 
+  void reset (void) { promptflag (1); }
+
+  void increment_promptflag (void) { pflag++; }
+
+  void decrement_promptflag (void) { pflag--; }
+
+  int promptflag (void) const { return pflag; }
+
+  int promptflag (int n)
+  {
+    int retval = pflag;
+    pflag = n;
+    return retval;
+  }
+
   std::string octave_gets (bool& eof);
 
 private:
 
   int count;
 
+  int pflag;
+
+  void do_input_echo (const std::string&) const;
+
   static const std::string in_src;
 };
 
 class
 octave_terminal_reader : public octave_base_reader
 {
 public:
 
@@ -193,16 +209,26 @@ public:
   }
 
   ~octave_input_reader (void)
   {
     if (--rep->count == 0)
       delete rep;
   }
 
+  void reset (void) { return rep->reset (); }
+
+  void increment_promptflag (void) { rep->increment_promptflag (); }
+
+  void decrement_promptflag (void) { rep->decrement_promptflag (); }
+
+  int promptflag (void) const { return rep->promptflag (); }
+
+  int promptflag (int n) { return rep->promptflag (n); }
+
   std::string get_input (bool& eof)
   {
     return rep->get_input (eof);
   }
 
   std::string input_source (void) const
   {
     return rep->input_source ();
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -491,16 +491,24 @@ public:
   // Internal state of the flex-generated lexer.
   void *scanner;
 
   // Object that reads and buffers input.
   input_buffer input_buf;
 
   octave_input_reader input_reader;
 
+  void increment_promptflag (void) { input_reader.increment_promptflag (); }
+
+  void decrement_promptflag (void) { input_reader.decrement_promptflag (); }
+
+  int promptflag (void) const { return input_reader.promptflag (); }
+
+  int promptflag (int n) { return input_reader.promptflag (n); }
+
   std::string input_source (void) const
   {
     return input_reader.input_source ();
   }
 
   bool input_from_terminal (void) const
   {
     return input_source () == "terminal";
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -533,17 +533,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
     curr_lexer->at_beginning_of_statement = false;
 
     if (curr_lexer->defining_func
         && ! curr_lexer->parsed_function_name.top ())
       curr_lexer->looking_at_return_list = true;
     else
       curr_lexer->looking_at_matrix_or_assign_lhs = true;
 
-    promptflag--;
+    curr_lexer->decrement_promptflag ();
     curr_lexer->eat_whitespace ();
 
     curr_lexer->bracketflag++;
     BEGIN (MATRIX_START);
     COUNT_TOK_AND_RETURN ('[');
   }
 
 \] {
@@ -597,17 +597,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
 
 {CONT}{S}*{NL} |
 {CONT}{S}*{COMMENT} {
     LEXER_DEBUG ("{CONT}{S}*{NL}|{CONT}{S}*{COMMENT}");
 
     if (yytext[0] == '\\')
       curr_lexer->gripe_matlab_incompatible_continuation ();
     curr_lexer->scan_for_comments (yytext);
-    promptflag--;
+    curr_lexer->decrement_promptflag ();
     curr_lexer->input_line_number++;
     curr_lexer->current_input_column = 1;
   }
 
 %{
 // End of file.
 %}
 
@@ -776,17 +776,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
 ^{S}*{CCHAR}\{{S}*{NL} {
     LEXER_DEBUG ("^{S}*{CCHAR}\\{{S}*{NL}");
 
     curr_lexer->looking_for_object_index = false;
 
     curr_lexer->input_line_number++;
     curr_lexer->current_input_column = 1;
     curr_lexer->block_comment_nesting_level++;
-    promptflag--;
+    curr_lexer->decrement_promptflag ();
 
     bool eof = false;
     curr_lexer->process_comment (true, eof);
   }
 
 %{
 // Other operators.
 %}
@@ -847,17 +847,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
     curr_lexer->looking_at_object_index.push_front
       (curr_lexer->looking_for_object_index);
 
     curr_lexer->looking_at_indirect_ref = false;
     curr_lexer->looking_for_object_index = false;
     curr_lexer->at_beginning_of_statement = false;
 
     curr_lexer->nesting_level.paren ();
-    promptflag--;
+    curr_lexer->decrement_promptflag ();
 
     TOK_RETURN ('(');
   }
 
 ")" {
     LEXER_DEBUG (")");
 
     curr_lexer->nesting_level.remove ();
@@ -915,17 +915,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
       (curr_lexer->looking_for_object_index);
 
     curr_lexer->current_input_column += yyleng;
     curr_lexer->quote_is_transpose = false;
     curr_lexer->convert_spaces_to_comma = true;
     curr_lexer->looking_for_object_index = false;
     curr_lexer->at_beginning_of_statement = false;
 
-    promptflag--;
+    curr_lexer->decrement_promptflag ();
     curr_lexer->eat_whitespace ();
 
     curr_lexer->braceflag++;
     BEGIN (MATRIX_START);
     COUNT_TOK_AND_RETURN ('{');
   }
 
 "}" {
@@ -1441,29 +1441,31 @@ octave_lexer::reset (void)
   OCTAVE_YYG;
 
   // Start off on the right foot.
   BEGIN (INITIAL);
 
   parser_symtab_context.clear ();
 
   // We do want a prompt by default.
-  promptflag = 1;
+  promptflag (1);
 
   // Only ask for input from stdin if we are expecting interactive
   // input.
 
   if (! quitting_gracefully
       && (interactive || forced_interactive)
       && ! (reading_fcn_file
             || reading_classdef_file
             || reading_script_file
             || input_from_eval_string ()))
     yyrestart (stdin, scanner);
 
+  input_reader.reset ();
+
   lexical_feedback::reset ();
 }
 
 void
 octave_lexer::prep_for_file (void)
 {
   OCTAVE_YYG;
 
@@ -1781,35 +1783,35 @@ octave_lexer::is_keyword_token (const st
           tok_val = new token (token::properties_end, l, c);
           at_beginning_of_statement = true;
           break;
 
 
         case for_kw:
         case parfor_kw:
         case while_kw:
-          promptflag--;
+          decrement_promptflag ();
           looping++;
           break;
 
         case do_kw:
           at_beginning_of_statement = true;
-          promptflag--;
+          decrement_promptflag ();
           looping++;
           break;
 
         case try_kw:
         case unwind_protect_kw:
           at_beginning_of_statement = true;
-          promptflag--;
+          decrement_promptflag ();
           break;
 
         case if_kw:
         case switch_kw:
-          promptflag--;
+          decrement_promptflag ();
           break;
 
         case get_kw:
         case set_kw:
           // 'get' and 'set' are keywords in classdef method
           // declarations.
           if (! maybe_classdef_get_set_method)
             return 0;
@@ -1822,27 +1824,27 @@ octave_lexer::is_keyword_token (const st
           // 'properties', 'methods' and 'events' are keywords for
           // classdef blocks.
           if (! parsing_classdef)
             return 0;
           // fall through ...
 
         case classdef_kw:
           // 'classdef' is always a keyword.
-          promptflag--;
+          decrement_promptflag ();
 
           if (! force_script && token_count == 0 && input_from_file ())
             {
               reading_classdef_file = true;
               reading_script_file = false;
             }
           break;
 
         case function_kw:
-          promptflag--;
+          decrement_promptflag ();
 
           defining_func++;
           parsed_function_name.push (false);
 
           if (! force_script && token_count == 0 && input_from_file ())
             {
               reading_fcn_file = true;
               reading_script_file = false;
@@ -1935,22 +1937,22 @@ octave_lexer::grab_block_comment (stream
                       {
                         current_input_column = 0;
                         at_bol = true;
                         done = true;
 
                         if (type == '{')
                           {
                             block_comment_nesting_level++;
-                            promptflag--;
+                            decrement_promptflag ();
                           }
                         else
                           {
                             block_comment_nesting_level--;
-                            promptflag++;
+                            increment_promptflag ();
 
                             if (block_comment_nesting_level == 0)
                               {
                                 buf += grab_comment_block (reader, true, eof);
 
                                 return buf;
                               }
                           }
@@ -2043,17 +2045,17 @@ octave_lexer::grab_comment_block (stream
 
                     case '\n':
                       {
                         current_input_column = 0;
                         at_bol = true;
                         done = true;
 
                         block_comment_nesting_level++;
-                        promptflag--;
+                        decrement_promptflag ();
 
                         buf += grab_block_comment (reader, eof);
 
                         in_comment = false;
 
                         if (eof)
                           goto done;
                       }
@@ -2643,17 +2645,17 @@ octave_lexer::have_continuation (bool tr
 
         case '\n':
           if (in_comment)
             {
               comment_buf += static_cast<char> (c);
               octave_comment_buffer::append (comment_buf);
             }
           current_input_column = 0;
-          promptflag--;
+          decrement_promptflag ();
           gripe_matlab_incompatible_continuation ();
           return true;
 
         default:
           if (in_comment)
             {
               comment_buf += static_cast<char> (c);
               beginning_of_comment = false;
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -314,17 +314,16 @@ make_statement (T *arg)
 
 // ==============================
 // Statements and statement lists
 // ==============================
 
 input           : input1
                   {
                     curr_parser.stmt_list = $1;
-                    promptflag = 1;
                     YYACCEPT;
                   }
                 | simple_list parse_error
                   { ABORT_PARSE; }
                 | parse_error
                   { ABORT_PARSE; }
                 ;
 
