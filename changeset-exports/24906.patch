# HG changeset patch
# User Michele Ginesi <michele.ginesi@gmail.com>
# Date 1504792706 -7200
#      Thu Sep 07 15:58:26 2017 +0200
# Branch stable
# Node ID 451f4f291f460cab6db7cee469556edc88514820
# Parent  662faf9de12721ecb52f130617995eeee02c671e
Modified Bessel functions to compute the output with any input
(instead of returning NaN(, giving IERR=4 (see bug #48316)
--
changed libinterp/corefcn/besselj.cc
changed liboctave/external/amos/README
changed liboctave/external/amos/cbesh.f
changed liboctave/external/amos/cbesi.f
changed liboctave/external/amos/cbesj.f
changed liboctave/external/amos/cbesk.f
changed liboctave/external/amos/zbesh.f
changed liboctave/external/amos/zbesi.f
changed liboctave/external/amos/zbesj.f
changed liboctave/external/amos/zbesk.f
changed liboctave/numeric/lo-specfun.cc
 changed scripts/specfun/bessel.m

diff --git a/libinterp/corefcn/besselj.cc b/libinterp/corefcn/besselj.cc
--- a/libinterp/corefcn/besselj.cc
+++ b/libinterp/corefcn/besselj.cc
@@ -330,17 +330,17 @@ Input error, return @code{NaN}.
 @item
 Overflow, return @code{Inf}.
 
 @item
 Loss of significance by argument reduction results in less than half of machine
 accuracy.
 
 @item
-Complete loss of significance by argument reduction, return @code{NaN}.
+Loss of significance by argument reduction, output may be inaccurate.
 
 @item
 Error---no computation, algorithm termination condition not met, return
 @code{NaN}.
 @end enumerate
 
 @seealso{bessely, besseli, besselk, besselh}
 @end deftypefn */)
@@ -643,17 +643,17 @@ Input error, return @code{NaN}.
 @item
 Overflow, return @code{Inf}.
 
 @item
 Loss of significance by argument reduction results in less than half
  of machine accuracy.
 
 @item
-Complete loss of significance by argument reduction, return @code{NaN}.
+Loss of significance by argument reduction, output may be inaccurate.
 
 @item
 Error---no computation, algorithm termination condition not met,
 return @code{NaN}.
 @end enumerate
 @end deftypefn */)
 {
   int nargin = args.length ();
diff --git a/liboctave/external/amos/README b/liboctave/external/amos/README
--- a/liboctave/external/amos/README
+++ b/liboctave/external/amos/README
@@ -8,8 +8,26 @@ netlib by changing the following subrout
 
 to avoid conflicts with non-standard but commonly used Fortran
 intrinsic function names.
 
 John W. Eaton
 jwe@octave.org
 
 Wed Nov 11 17:29:50 1998
+
+More files have been modified to recover Matlab compatibility for
+Bessel functions. Now the output is always computed, independently
+from the magnitude of the input
+
+  cbesh.f
+  cbesi.f
+  cbesj.f
+  cbesk.f
+  zbesh.f
+  zbesi.f
+  zbesj.f
+  zbesk.f
+
+Michele Ginesi
+michele.ginesi@gmail.com
+
+Sat Jul 22 11:43:40 2017
diff --git a/liboctave/external/amos/cbesh.f b/liboctave/external/amos/cbesh.f
--- a/liboctave/external/amos/cbesh.f
+++ b/liboctave/external/amos/cbesh.f
@@ -214,16 +214,17 @@ C---------------------------------------
       IF(AZ.GT.AA) GO TO 240
       IF(FN.GT.AA) GO TO 240
       AA=SQRT(AA)
       IF(AZ.GT.AA) IERR=3
       IF(FN.GT.AA) IERR=3
 C-----------------------------------------------------------------------
 C     OVERFLOW TEST ON THE LAST MEMBER OF THE SEQUENCE
 C-----------------------------------------------------------------------
+   35 CONTINUE
       UFL = R1MACH(1)*1.0E+3
       IF (AZ.LT.UFL) GO TO 220
       IF (FNU.GT.FNUL) GO TO 90
       IF (FN.LE.1.0E0) GO TO 70
       IF (FN.GT.2.0E0) GO TO 60
       IF (AZ.GT.TOL) GO TO 70
       ARG = 0.5E0*AZ
       ALN = -FN*ALOG(ARG)
@@ -320,12 +321,11 @@ C       ZN = ZN*ZT
       NZ=0
       RETURN
   230 CONTINUE
       IF(NW.EQ.(-1)) GO TO 220
       NZ=0
       IERR=5
       RETURN
   240 CONTINUE
-      NZ=0
       IERR=4
-      RETURN
+      GO TO 35
       END
diff --git a/liboctave/external/amos/cbesi.f b/liboctave/external/amos/cbesi.f
--- a/liboctave/external/amos/cbesi.f
+++ b/liboctave/external/amos/cbesi.f
@@ -196,16 +196,17 @@ C---------------------------------------
       BB=FLOAT(I1MACH(9))*0.5E0
       AA=AMIN1(AA,BB)
       IF(AZ.GT.AA) GO TO 140
       FN=FNU+FLOAT(N-1)
       IF(FN.GT.AA) GO TO 140
       AA=SQRT(AA)
       IF(AZ.GT.AA) IERR=3
       IF(FN.GT.AA) IERR=3
+   35 CONTINUE
       ZN = Z
       CSGN = CONE
       IF (XX.GE.0.0E0) GO TO 40
       ZN = -Z
 C-----------------------------------------------------------------------
 C     CALCULATE CSGN=EXP(FNU*PI*I) TO MINIMIZE LOSSES OF SIGNIFICANCE
 C     WHEN FNU IS LARGE
 C-----------------------------------------------------------------------
@@ -247,12 +248,11 @@ C       CY(I) = CY(I)*CSGN
       NZ = 0
       IERR=2
       RETURN
   130 CONTINUE
       NZ=0
       IERR=5
       RETURN
   140 CONTINUE
-      NZ=0
       IERR=4
-      RETURN
+      GO TO 35
       END
diff --git a/liboctave/external/amos/cbesj.f b/liboctave/external/amos/cbesj.f
--- a/liboctave/external/amos/cbesj.f
+++ b/liboctave/external/amos/cbesj.f
@@ -194,16 +194,17 @@ C---------------------------------------
       IF(FN.GT.AA) GO TO 140
       AA=SQRT(AA)
       IF(AZ.GT.AA) IERR=3
       IF(FN.GT.AA) IERR=3
 C-----------------------------------------------------------------------
 C     CALCULATE CSGN=EXP(FNU*HPI*I) TO MINIMIZE LOSSES OF SIGNIFICANCE
 C     WHEN FNU IS LARGE
 C-----------------------------------------------------------------------
+  35  CONTINUE
       INU = INT(FNU)
       INUH = INU/2
       IR = INU - 2*INUH
       ARG = (FNU-FLOAT(INU-IR))*HPI
       R1 = COS(ARG)
       R2 = SIN(ARG)
       CSGN = CMPLX(R1,R2)
       IF (MOD(INUH,2).EQ.1) CSGN = -CSGN
@@ -242,12 +243,11 @@ C       CY(I)=CY(I)*CSGN
       NZ = 0
       IERR = 2
       RETURN
   130 CONTINUE
       NZ=0
       IERR=5
       RETURN
   140 CONTINUE
-      NZ=0
       IERR=4
-      RETURN
+      GO TO 35
       END
diff --git a/liboctave/external/amos/cbesk.f b/liboctave/external/amos/cbesk.f
--- a/liboctave/external/amos/cbesk.f
+++ b/liboctave/external/amos/cbesk.f
@@ -197,16 +197,17 @@ C---------------------------------------
       IF(FN.GT.AA) GO TO 210
       AA=SQRT(AA)
       IF(AZ.GT.AA) IERR=3
       IF(FN.GT.AA) IERR=3
 C-----------------------------------------------------------------------
 C     OVERFLOW TEST ON THE LAST MEMBER OF THE SEQUENCE
 C-----------------------------------------------------------------------
 C     UFL = EXP(-ELIM)
+   35 CONTINUE
       UFL = R1MACH(1)*1.0E+3
       IF (AZ.LT.UFL) GO TO 180
       IF (FNU.GT.FNUL) GO TO 80
       IF (FN.LE.1.0E0) GO TO 60
       IF (FN.GT.2.0E0) GO TO 50
       IF (AZ.GT.TOL) GO TO 60
       ARG = 0.5E0*AZ
       ALN = -FN*ALOG(ARG)
@@ -265,12 +266,11 @@ C---------------------------------------
       IERR=2
       RETURN
   200 CONTINUE
       IF(NW.EQ.(-1)) GO TO 180
       NZ=0
       IERR=5
       RETURN
   210 CONTINUE
-      NZ=0
       IERR=4
-      RETURN
+      GO TO 35
       END
diff --git a/liboctave/external/amos/zbesh.f b/liboctave/external/amos/zbesh.f
--- a/liboctave/external/amos/zbesh.f
+++ b/liboctave/external/amos/zbesh.f
@@ -215,16 +215,17 @@ C---------------------------------------
       IF (AZ.GT.AA) GO TO 260
       IF (FN.GT.AA) GO TO 260
       AA = DSQRT(AA)
       IF (AZ.GT.AA) IERR=3
       IF (FN.GT.AA) IERR=3
 C-----------------------------------------------------------------------
 C     OVERFLOW TEST ON THE LAST MEMBER OF THE SEQUENCE
 C-----------------------------------------------------------------------
+   35 CONTINUE
       UFL = D1MACH(1)*1.0D+3
       IF (AZ.LT.UFL) GO TO 230
       IF (FNU.GT.FNUL) GO TO 90
       IF (FN.LE.1.0D0) GO TO 70
       IF (FN.GT.2.0D0) GO TO 60
       IF (AZ.GT.TOL) GO TO 70
       ARG = 0.5D0*AZ
       ALN = -FN*DLOG(ARG)
@@ -337,12 +338,11 @@ C       ZNR = STR
       IERR=2
       RETURN
   240 CONTINUE
       IF(NW.EQ.(-1)) GO TO 230
       NZ=0
       IERR=5
       RETURN
   260 CONTINUE
-      NZ=0
       IERR=4
-      RETURN
+      GO TO 35
       END
diff --git a/liboctave/external/amos/zbesi.f b/liboctave/external/amos/zbesi.f
--- a/liboctave/external/amos/zbesi.f
+++ b/liboctave/external/amos/zbesi.f
@@ -197,16 +197,17 @@ C---------------------------------------
       AA = 0.5D0/TOL
       BB=DBLE(FLOAT(I1MACH(9)))*0.5D0
       AA = DMIN1(AA,BB)
       IF (AZ.GT.AA) GO TO 260
       IF (FN.GT.AA) GO TO 260
       AA = DSQRT(AA)
       IF (AZ.GT.AA) IERR=3
       IF (FN.GT.AA) IERR=3
+   35 CONTINUE
       ZNR = ZR
       ZNI = ZI
       CSGNR = CONER
       CSGNI = CONEI
       IF (ZR.GE.0.0D0) GO TO 40
       ZNR = -ZR
       ZNI = -ZI
 C-----------------------------------------------------------------------
@@ -258,12 +259,11 @@ C       CYR(I) = STR
       NZ = 0
       IERR=2
       RETURN
   130 CONTINUE
       NZ=0
       IERR=5
       RETURN
   260 CONTINUE
-      NZ=0
       IERR=4
-      RETURN
+      GO TO 35
       END
diff --git a/liboctave/external/amos/zbesj.f b/liboctave/external/amos/zbesj.f
--- a/liboctave/external/amos/zbesj.f
+++ b/liboctave/external/amos/zbesj.f
@@ -195,16 +195,17 @@ C---------------------------------------
       IF (FN.GT.AA) GO TO 260
       AA = DSQRT(AA)
       IF (AZ.GT.AA) IERR=3
       IF (FN.GT.AA) IERR=3
 C-----------------------------------------------------------------------
 C     CALCULATE CSGN=EXP(FNU*HPI*I) TO MINIMIZE LOSSES OF SIGNIFICANCE
 C     WHEN FNU IS LARGE
 C-----------------------------------------------------------------------
+  35  CONTINUE
       CII = 1.0D0
       INU = INT(SNGL(FNU))
       INUH = INU/2
       IR = INU - 2*INUH
       ARG = (FNU-DBLE(FLOAT(INU-IR)))*HPI
       CSGNR = DCOS(ARG)
       CSGNI = DSIN(ARG)
       IF (MOD(INUH,2).EQ.0) GO TO 40
@@ -255,12 +256,12 @@ C       CYR(I) = STR
       NZ = 0
       IERR = 2
       RETURN
   140 CONTINUE
       NZ=0
       IERR=5
       RETURN
   260 CONTINUE
-      NZ=0
       IERR=4
+      GO TO 35
       RETURN
       END
diff --git a/liboctave/external/amos/zbesk.f b/liboctave/external/amos/zbesk.f
--- a/liboctave/external/amos/zbesk.f
+++ b/liboctave/external/amos/zbesk.f
@@ -200,16 +200,17 @@ C---------------------------------------
       IF (FN.GT.AA) GO TO 260
       AA = DSQRT(AA)
       IF (AZ.GT.AA) IERR=3
       IF (FN.GT.AA) IERR=3
 C-----------------------------------------------------------------------
 C     OVERFLOW TEST ON THE LAST MEMBER OF THE SEQUENCE
 C-----------------------------------------------------------------------
 C     UFL = DEXP(-ELIM)
+   35 CONTINUE
       UFL = D1MACH(1)*1.0D+3
       IF (AZ.LT.UFL) GO TO 180
       IF (FNU.GT.FNUL) GO TO 80
       IF (FN.LE.1.0D0) GO TO 60
       IF (FN.GT.2.0D0) GO TO 50
       IF (AZ.GT.TOL) GO TO 60
       ARG = 0.5D0*AZ
       ALN = -FN*DLOG(ARG)
@@ -270,12 +271,11 @@ C---------------------------------------
       IERR=2
       RETURN
   200 CONTINUE
       IF(NW.EQ.(-1)) GO TO 180
       NZ=0
       IERR=5
       RETURN
   260 CONTINUE
-      NZ=0
       IERR=4
-      RETURN
+      GO TO 35
       END
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -72,16 +72,17 @@ namespace octave
                    numeric_limits<double>::NaN ());
 
       Complex retval;
 
       switch (ierr)
         {
         case 0:
         case 3:
+        case 4:
           retval = val;
           break;
 
         case 2:
           retval = inf_val;
           break;
 
         default:
@@ -104,16 +105,17 @@ namespace octave
                         numeric_limits<float>::NaN ());
 
       FloatComplex retval;
 
       switch (ierr)
         {
         case 0:
         case 3:
+        case 4:
           retval = val;
           break;
 
         case 2:
           retval = inf_val;
           break;
 
         default:
@@ -299,27 +301,20 @@ namespace octave
           double yr = 0.0;
           double yi = 0.0;
 
           F77_INT nz, t_ierr;
 
           double zr = z.real ();
           double zi = z.imag ();
 
-          F77_FUNC (zbesj, ZBESJ) (zr, zi, alpha, 2, 1, &yr, &yi, nz, t_ierr);
+          F77_FUNC (zbesj, ZBESJ) (zr, zi, alpha, kode, 1, &yr, &yi, nz, t_ierr);
 
           ierr = t_ierr;
 
-          if (kode != 2)
-            {
-              double expz = exp (std::abs (zi));
-              yr *= expz;
-              yi *= expz;
-            }
-
           if (zi == 0.0 && zr >= 0.0)
             yi = 0.0;
 
           retval = bessel_return_value (Complex (yr, yi), ierr);
         }
       else if (is_integer_value (alpha))
         {
           // zbesy can overflow as z->0, and cause troubles for generic case below
@@ -370,28 +365,21 @@ namespace octave
 
           if (zr == 0.0 && zi == 0.0)
             {
               yr = -numeric_limits<double>::Inf ();
               yi = 0.0;
             }
           else
             {
-              F77_FUNC (zbesy, ZBESY) (zr, zi, alpha, 2, 1, &yr, &yi, nz,
+              F77_FUNC (zbesy, ZBESY) (zr, zi, alpha, kode, 1, &yr, &yi, nz,
                                        &wr, &wi, t_ierr);
 
               ierr = t_ierr;
 
-              if (kode != 2)
-                {
-                  double expz = exp (std::abs (zi));
-                  yr *= expz;
-                  yi *= expz;
-                }
-
               if (zi == 0.0 && zr >= 0.0)
                 yi = 0.0;
             }
 
           return bessel_return_value (Complex (yr, yi), ierr);
         }
       else if (is_integer_value (alpha - 0.5))
         {
@@ -432,27 +420,20 @@ namespace octave
           double yr = 0.0;
           double yi = 0.0;
 
           F77_INT nz, t_ierr;
 
           double zr = z.real ();
           double zi = z.imag ();
 
-          F77_FUNC (zbesi, ZBESI) (zr, zi, alpha, 2, 1, &yr, &yi, nz, t_ierr);
+          F77_FUNC (zbesi, ZBESI) (zr, zi, alpha, kode, 1, &yr, &yi, nz, t_ierr);
 
           ierr = t_ierr;
 
-          if (kode != 2)
-            {
-              double expz = exp (std::abs (zr));
-              yr *= expz;
-              yi *= expz;
-            }
-
           if (zi == 0.0 && zr >= 0.0)
             yi = 0.0;
 
           retval = bessel_return_value (Complex (yr, yi), ierr);
         }
       else if (is_integer_value (alpha))
         {
           // zbesi can overflow as z->0, and cause troubles for generic case below
@@ -508,34 +489,21 @@ namespace octave
 
           if (zr == 0.0 && zi == 0.0)
             {
               yr = numeric_limits<double>::Inf ();
               yi = 0.0;
             }
           else
             {
-              F77_FUNC (zbesk, ZBESK) (zr, zi, alpha, 2, 1, &yr, &yi, nz,
+              F77_FUNC (zbesk, ZBESK) (zr, zi, alpha, kode, 1, &yr, &yi, nz,
                                        t_ierr);
 
               ierr = t_ierr;
 
-              if (kode != 2)
-                {
-                  Complex expz = exp (-z);
-
-                  double rexpz = expz.real ();
-                  double iexpz = expz.imag ();
-
-                  double tmp = yr*rexpz - yi*iexpz;
-
-                  yi = yr*iexpz + yi*rexpz;
-                  yr = tmp;
-                }
-
               if (zi == 0.0 && zr >= 0.0)
                 yi = 0.0;
             }
 
           retval = bessel_return_value (Complex (yr, yi), ierr);
         }
       else
         {
@@ -557,34 +525,21 @@ namespace octave
           double yr = 0.0;
           double yi = 0.0;
 
           F77_INT nz, t_ierr;
 
           double zr = z.real ();
           double zi = z.imag ();
 
-          F77_FUNC (zbesh, ZBESH) (zr, zi, alpha, 2, 1, 1, &yr, &yi, nz,
+          F77_FUNC (zbesh, ZBESH) (zr, zi, alpha, kode, 1, 1, &yr, &yi, nz,
                                    t_ierr);
 
           ierr = t_ierr;
 
-          if (kode != 2)
-            {
-              Complex expz = exp (Complex (0.0, 1.0) * z);
-
-              double rexpz = expz.real ();
-              double iexpz = expz.imag ();
-
-              double tmp = yr*rexpz - yi*iexpz;
-
-              yi = yr*iexpz + yi*rexpz;
-              yr = tmp;
-            }
-
           retval = bessel_return_value (Complex (yr, yi), ierr);
         }
       else
         {
           alpha = -alpha;
 
           static const Complex eye = Complex (0.0, 1.0);
 
@@ -606,34 +561,21 @@ namespace octave
           double yr = 0.0;
           double yi = 0.0;
 
           F77_INT nz, t_ierr;
 
           double zr = z.real ();
           double zi = z.imag ();
 
-          F77_FUNC (zbesh, ZBESH) (zr, zi, alpha, 2, 2, 1, &yr, &yi, nz,
+          F77_FUNC (zbesh, ZBESH) (zr, zi, alpha, kode, 2, 1, &yr, &yi, nz,
                                    t_ierr);
 
           ierr = t_ierr;
 
-          if (kode != 2)
-            {
-              Complex expz = exp (-Complex (0.0, 1.0) * z);
-
-              double rexpz = expz.real ();
-              double iexpz = expz.imag ();
-
-              double tmp = yr*rexpz - yi*iexpz;
-
-              yi = yr*iexpz + yi*rexpz;
-              yr = tmp;
-            }
-
           retval = bessel_return_value (Complex (yr, yi), ierr);
         }
       else
         {
           alpha = -alpha;
 
           static const Complex eye = Complex (0.0, 1.0);
 
@@ -917,27 +859,21 @@ namespace octave
       FloatComplex retval;
 
       if (alpha >= 0.0)
         {
           FloatComplex y = 0.0;
 
           F77_INT nz, t_ierr;
 
-          F77_FUNC (cbesj, CBESJ) (F77_CONST_CMPLX_ARG (&z), alpha, 2, 1,
+          F77_FUNC (cbesj, CBESJ) (F77_CONST_CMPLX_ARG (&z), alpha, kode, 1,
                                    F77_CMPLX_ARG (&y), nz, t_ierr);
 
           ierr = t_ierr;
 
-          if (kode != 2)
-            {
-              float expz = exp (std::abs (z.imag ()));
-              y *= expz;
-            }
-
           if (z.imag () == 0.0 && z.real () >= 0.0)
             y = FloatComplex (y.real (), 0.0);
 
           retval = bessel_return_value (y, ierr);
         }
       else if (is_integer_value (alpha))
         {
           // zbesy can overflow as z->0, and cause troubles for generic case below
@@ -985,28 +921,22 @@ namespace octave
           ierr = 0;
 
           if (z.real () == 0.0 && z.imag () == 0.0)
             {
               y = FloatComplex (-numeric_limits<float>::Inf (), 0.0);
             }
           else
             {
-              F77_FUNC (cbesy, CBESY) (F77_CONST_CMPLX_ARG (&z), alpha, 2, 1,
+              F77_FUNC (cbesy, CBESY) (F77_CONST_CMPLX_ARG (&z), alpha, kode, 1,
                                        F77_CMPLX_ARG (&y), nz,
                                        F77_CMPLX_ARG (&w), t_ierr);
 
               ierr = t_ierr;
 
-              if (kode != 2)
-                {
-                  float expz = exp (std::abs (z.imag ()));
-                  y *= expz;
-                }
-
               if (z.imag () == 0.0 && z.real () >= 0.0)
                 y = FloatComplex (y.real (), 0.0);
             }
 
           return bessel_return_value (y, ierr);
         }
       else if (is_integer_value (alpha - 0.5))
         {
@@ -1045,27 +975,21 @@ namespace octave
       FloatComplex retval;
 
       if (alpha >= 0.0)
         {
           FloatComplex y = 0.0;
 
           F77_INT nz, t_ierr;
 
-          F77_FUNC (cbesi, CBESI) (F77_CONST_CMPLX_ARG (&z), alpha, 2, 1,
+          F77_FUNC (cbesi, CBESI) (F77_CONST_CMPLX_ARG (&z), alpha, kode, 1,
                                    F77_CMPLX_ARG (&y), nz, t_ierr);
 
           ierr = t_ierr;
 
-          if (kode != 2)
-            {
-              float expz = exp (std::abs (z.real ()));
-              y *= expz;
-            }
-
           if (z.imag () == 0.0 && z.real () >= 0.0)
             y = FloatComplex (y.real (), 0.0);
 
           retval = bessel_return_value (y, ierr);
         }
       else
         {
           alpha = -alpha;
@@ -1110,34 +1034,21 @@ namespace octave
           ierr = 0;
 
           if (z.real () == 0.0 && z.imag () == 0.0)
             {
               y = FloatComplex (numeric_limits<float>::Inf (), 0.0);
             }
           else
             {
-              F77_FUNC (cbesk, CBESK) (F77_CONST_CMPLX_ARG (&z), alpha, 2, 1,
+              F77_FUNC (cbesk, CBESK) (F77_CONST_CMPLX_ARG (&z), alpha, kode, 1,
                                        F77_CMPLX_ARG (&y), nz, t_ierr);
 
               ierr = t_ierr;
 
-              if (kode != 2)
-                {
-                  FloatComplex expz = exp (-z);
-
-                  float rexpz = expz.real ();
-                  float iexpz = expz.imag ();
-
-                  float tmp_r = y.real () * rexpz - y.imag () * iexpz;
-                  float tmp_i = y.real () * iexpz + y.imag () * rexpz;
-
-                  y = FloatComplex (tmp_r, tmp_i);
-                }
-
               if (z.imag () == 0.0 && z.real () >= 0.0)
                 y = FloatComplex (y.real (), 0.0);
             }
 
           retval = bessel_return_value (y, ierr);
         }
       else
         {
@@ -1155,34 +1066,21 @@ namespace octave
       FloatComplex retval;
 
       if (alpha >= 0.0)
         {
           FloatComplex y = 0.0;
 
           F77_INT nz, t_ierr;
 
-          F77_FUNC (cbesh, CBESH) (F77_CONST_CMPLX_ARG (&z), alpha, 2, 1, 1,
+          F77_FUNC (cbesh, CBESH) (F77_CONST_CMPLX_ARG (&z), alpha, kode, 1, 1,
                                    F77_CMPLX_ARG (&y), nz, t_ierr);
 
           ierr = t_ierr;
 
-          if (kode != 2)
-            {
-              FloatComplex expz = exp (FloatComplex (0.0, 1.0) * z);
-
-              float rexpz = expz.real ();
-              float iexpz = expz.imag ();
-
-              float tmp_r = y.real () * rexpz - y.imag () * iexpz;
-              float tmp_i = y.real () * iexpz + y.imag () * rexpz;
-
-              y = FloatComplex (tmp_r, tmp_i);
-            }
-
           retval = bessel_return_value (y, ierr);
         }
       else
         {
           alpha = -alpha;
 
           static const FloatComplex eye = FloatComplex (0.0, 1.0);
 
@@ -1201,34 +1099,21 @@ namespace octave
       FloatComplex retval;
 
       if (alpha >= 0.0)
         {
           FloatComplex y = 0.0;;
 
           F77_INT nz, t_ierr;
 
-          F77_FUNC (cbesh, CBESH) (F77_CONST_CMPLX_ARG (&z), alpha, 2, 2, 1,
+          F77_FUNC (cbesh, CBESH) (F77_CONST_CMPLX_ARG (&z), alpha, kode, 2, 1,
                                    F77_CMPLX_ARG (&y), nz, t_ierr);
 
           ierr = t_ierr;
 
-          if (kode != 2)
-            {
-              FloatComplex expz = exp (-FloatComplex (0.0, 1.0) * z);
-
-              float rexpz = expz.real ();
-              float iexpz = expz.imag ();
-
-              float tmp_r = y.real () * rexpz - y.imag () * iexpz;
-              float tmp_i = y.real () * iexpz + y.imag () * rexpz;
-
-              y = FloatComplex (tmp_r, tmp_i);
-            }
-
           retval = bessel_return_value (y, ierr);
         }
       else
         {
           alpha = -alpha;
 
           static const FloatComplex eye = FloatComplex (0.0, 1.0);
 
diff --git a/scripts/help/bessel.m b/scripts/help/bessel.m
--- a/scripts/help/bessel.m
+++ b/scripts/help/bessel.m
@@ -71,17 +71,17 @@
 ## @item
 ## Overflow, return @code{Inf}.
 ##
 ## @item
 ## Loss of significance by argument reduction results in less than half of
 ## machine accuracy.
 ##
 ## @item
-## Complete loss of significance by argument reduction, return @code{NaN}.
+## Loss of significance by argument reduction, output may be inaccurate.
 ##
 ## @item
 ## Error---no computation, algorithm termination condition not met, return
 ## @code{NaN}.
 ## @end enumerate
 ##
 ## @seealso{besselj, bessely, besseli, besselk, besselh}
 ## @end deftypefn
