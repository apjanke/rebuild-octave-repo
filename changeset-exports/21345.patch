# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1456408121 0
#      Thu Feb 25 13:48:41 2016 +0000
# Node ID 12280fef2741d735e3bae74f63fff57e7e739eb5
# Parent  980abb267014b5d0744efdc5db6f87b5ec005a09
automatic broadcasting: correctly handle dimensions of length zero (bug #47085)

* liboctave/numeric/bsxfun.h: fix identification of correct dimensions for
  valid broadcasting.  Dimensions of length zero should be considered so
  use "=! 1" instead of "> 1".
* libinterp/corefcn/bsxfun.cc: add tests.

diff --git a/libinterp/corefcn/bsxfun.cc b/libinterp/corefcn/bsxfun.cc
--- a/libinterp/corefcn/bsxfun.cc
+++ b/libinterp/corefcn/bsxfun.cc
@@ -800,10 +800,20 @@ dimensionality as the other array.\n\
 %!
 %!         assert (bsxfun (fun, f_type (x), f_type (y)), ...
 %!                 fun (f_type (x), f_type (y)));
 %!         assert (bsxfun (fun, f_type(y), f_type(x)), ...
 %!                 fun (f_type (y), f_type (x)));
 %!     endfor
 %!   endfor
 %! endfor
-%!
+
+## Automatic broadcasting with zero length dimensions (bug #47085)
+%!assert ([1 2 3] .+ zeros (0, 3), zeros (0, 3))
+%!assert (rand (3, 3, 1) .+ rand (3, 3, 0), zeros (3, 3, 0))
+
+## In-place broadcasting with zero length dimensions (bug #47085)
+%!test
+%! a = zeros (0, 3);
+%! a .+= [1 2 3];
+%! assert (a, zeros (0, 3))
+
 */
diff --git a/liboctave/numeric/bsxfun.h b/liboctave/numeric/bsxfun.h
--- a/liboctave/numeric/bsxfun.h
+++ b/liboctave/numeric/bsxfun.h
@@ -38,17 +38,17 @@ bool
 is_valid_bsxfun (const std::string& name, const dim_vector& dx,
                  const dim_vector& dy)
 {
   for (int i = 0; i < std::min (dx.length (), dy.length ()); i++)
     {
       octave_idx_type xk = dx(i);
       octave_idx_type yk = dy(i);
       // Check the three conditions for valid bsxfun dims
-      if (! ((xk == yk) || (xk == 1 && yk > 1) || (xk > 1 && yk == 1)))
+      if (! ((xk == yk) || (xk == 1 && yk != 1) || (xk != 1 && yk == 1)))
         return false;
     }
 
   (*current_liboctave_warning_with_id_handler)
     ("Octave:language-extension", "performing `%s' automatic broadcasting",
      name.c_str ());
 
   return true;
@@ -68,17 +68,17 @@ is_valid_inplace_bsxfun (const std::stri
     return false;
 
   for (int i = 0; i < drl; i++)
     {
       octave_idx_type rk = dr(i);
       octave_idx_type xk = dx(i);
 
       // Only two valid canditions to check; can't stretch rk
-      if (! ((rk == xk) || (rk > 1 && xk == 1)))
+      if (! ((rk == xk) || (rk != 1 && xk == 1)))
         return false;
     }
 
   (*current_liboctave_warning_with_id_handler)
     ("Octave:language-extension", "performing `%s' automatic broadcasting",
      name.c_str ());
 
   return true;
