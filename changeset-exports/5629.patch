# HG changeset patch
# User jwe
# Date 1140472033 0
#      Mon Feb 20 21:47:13 2006 +0000
# Node ID 489a475073d7b80c8b1f85884a18a51c30740847
# Parent  53d15d4c8dd7e48cc188b68ed1a4b47d763a5c65
[project @ 2006-02-20 21:47:12 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2006-02-20  John W. Eaton  <jwe@octave.org>
+
+	* toplev.cc (__builtin_delete, __builtin_new): Use std::cerr for
+	messages instead of std::cout.
+	(main_loop, do_octave_atexit): Use octave_stdout, not std::cout.
+
 2006-02-15  John W. Eaton  <jwe@octave.org>
 
 	* parse.y (Fautoload): Return struct array of autoload info if
 	nargin == 0.
 
 2006-02-15  Keith Goodman  <kwgoodman@gmail.com>
 
 	* help.cc (keywords): Doc string fix.
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -188,17 +188,17 @@ main_loop (void)
 		}
 	      else if (parser_end_of_input)
 		break;
 	    }
 	}
       catch (octave_interrupt_exception)
 	{
 	  recover_from_exception ();
-	  std::cout << "\n";
+	  octave_stdout << "\n";
 	}
       catch (std::bad_alloc)
 	{
 	  recover_from_exception ();
 	  std::cerr
 	    << "error: memory exhausted -- trying to return to prompt\n";
 	}
     }
@@ -556,17 +556,24 @@ do_octave_atexit (void)
 
       close_files ();
 
       cleanup_tmp_files ();
 
       flush_octave_stdout ();
 
       if (! quitting_gracefully && (interactive || forced_interactive))
-	std::cout << "\n";
+	{
+	  octave_stdout << "\n";
+
+	  // Yes, we want this to be separate from the call to
+	  // flush_octave_stdout above.
+
+	  flush_octave_stdout ();
+	}
     }
 }
 
 DEFUN (atexit, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} atexit (@var{fcn})\n\
 Register a function to be called when Octave exits.  For example,\n\
 \n\
@@ -825,26 +832,26 @@ void *
   p = malloc (sz);
   while (p == 0)
     {
       (*__new_handler) ();
       p = malloc (sz);
     }
 
   if (debug_new_delete)
-    std::cout << "__builtin_new: " << p << std::endl;
+    std::cerr << "__builtin_new: " << p << std::endl;
 
   return p;
 }
 
 void
 __builtin_delete (void *ptr)
 {
   if (debug_new_delete)
-    std::cout << "__builtin_delete: " << ptr << std::endl;
+    std::cerr << "__builtin_delete: " << ptr << std::endl;
 
   if (ptr)
     free (ptr);
 }
 
 #endif
 
 void
