# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1231680472 -3600
#      Sun Jan 11 14:27:52 2009 +0100
# Node ID c1709a45b45be1b25ab5bcea9c7ee8f1a04c876b
# Parent  fd11a08a9b31635c352b86a79964563321771760
optimize structure components access

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-01-11  Jaroslav Hajek  <highegg@gmail.com>
+	
+	* ov.h (octave_value::is_copy_of): New method.
+	* ov-struct.cc (numeric_conv): Add output parameter orig.
+	(octave_struct::subsasgn): Temporarily erase duplicate lhs value prior
+	to assignment.
+
 2009-01-11  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-obj.cc (octave_value_list::all_scalars): New method.
 	* oct-obj.h: Declare it.
 	* ov-cell.cc (octave_cell::subsasgn): Disable assigning
 	to non-scalar {}-indexed cell, unless in a multi-assignment.
 
 2009-01-10  Jaroslav Hajek  <highegg@gmail.com>
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -219,35 +219,48 @@ octave_struct::subsasgn (const std::stri
 		std::string key = key_idx(0).string_value ();
 
 		octave_value u;
 
 		if (! map.contains (key))
 		  u = octave_value::empty_conv (type.substr (2), rhs);
 		else
 		  {
-		    Cell map_val = map.contents (key);
+		    Cell& cell_ref = map.contents (key);
+
+                    octave_value u1 = cell_ref.index (idx.front (), true);
+                    u = numeric_conv (u1, type.substr (2));
 
-		    Cell map_elt = map_val.index (idx.front (), true);
+                    if (u.is_defined () && u.is_copy_of (u1))
+                      {
+                        // This is a bit of black magic. u is a shallow copy
+                        // of an element inside this struct, and maybe more. To
+                        // prevent make_unique from always forcing a copy, we
+                        // temporarily delete the stored value.
+                        u1 = octave_value ();
+                        cell_ref.assign (idx.front (), Cell (octave_value ()));
+                        u.make_unique ();
+                        cell_ref.assign (idx.front (), Cell (u));
+                      }
+                    else
+                      // Safe is safe.
+                      u.make_unique ();
 
-		    u = numeric_conv (map_elt, type.substr (2));
 		  }
 
 		if (! error_state)
 		  {
 		    std::list<octave_value_list> next_idx (idx);
 
 		    // We handled two index elements, so subsasgn to
 		    // needs to skip both of them.
 
 		    next_idx.erase (next_idx.begin ());
 		    next_idx.erase (next_idx.begin ());
 
-		    u.make_unique ();
-
 		    t_rhs = u.subsasgn (type.substr (2), next_idx, rhs);
 		  }
 	      }
 	    else
 	      gripe_invalid_index_for_assignment ();
 	  }
 	  break;
 
@@ -260,29 +273,41 @@ octave_struct::subsasgn (const std::stri
 	    std::string key = key_idx(0).string_value ();
 
 	    octave_value u;
 
 	    if (! map.contains (key))
 	      u = octave_value::empty_conv (type.substr (1), rhs);
 	    else
 	      {
-		Cell map_val = map.contents (key);
+        	Cell& cell_ref = map.contents (key);
+
+                u = numeric_conv (cell_ref, type.substr (2));
 
-		u = numeric_conv (map_val, type.substr (1));
+                if (u.is_defined () && u.is_copy_of (cell_ref(0)))
+                  {
+                    // This is a bit of black magic. u is a shallow copy
+                    // of an element inside this struct, and maybe more. To
+                    // prevent make_unique from always forcing a copy, we
+                    // temporarily delete the stored value.
+                    cell_ref(0) = octave_value ();
+                    u.make_unique ();
+                    cell_ref(0) = u;
+                  }
+                else
+                  // Safe is safe.
+                  u.make_unique ();
 	      }
 
 	    if (! error_state)
 	      {
 		std::list<octave_value_list> next_idx (idx);
 
 		next_idx.erase (next_idx.begin ());
 
-		u.make_unique ();
-
 		t_rhs = u.subsasgn (type.substr (1), next_idx, rhs);
 	      }
 	  }
 	  break;
 
 	case '{':
 	  gripe_invalid_index_type (type_name (), type[0]);
 	  break;
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -910,16 +910,18 @@ public:
                                                   const octave_value& b);
 
   friend OCTINTERP_API octave_value do_cat_op (const octave_value& a,
 				 const octave_value& b,
 				 const Array<octave_idx_type>& ra_idx);
 
   const octave_base_value& get_rep (void) const { return *rep; }
 
+  bool is_copy_of (const octave_value &val) const { return rep == val.rep; }
+
   void print_info (std::ostream& os,
 			   const std::string& prefix = std::string ()) const;
 
   bool save_ascii (std::ostream& os) { return rep->save_ascii (os); }
 
   bool load_ascii (std::istream& is) { return rep->load_ascii (is); }
 
   bool save_binary (std::ostream& os, bool& save_as_floats)
