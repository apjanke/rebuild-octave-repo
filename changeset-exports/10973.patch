# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1284446117 14400
#      Tue Sep 14 02:35:17 2010 -0400
# Node ID a8235d26b57a5ca72b17b03178683ce6dc2eaa94
# Parent  14d16530ad5975768f936bbe69eef3aff10a4f15
improve names of base_graphics_backend methods

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2010-09-14  John W. Eaton  <jwe@octave.org>
+
+	* graphics.h.in (base_graphics_backend::initialize): Rename
+	from base_graphics_backend::object_created.  Change all uses.
+	(base_graphics_backend::finalize): Rename from
+	base_graphics_backend::object_destoyed.  Change all uses.
+	(base_graphics_backend::update): Rename from
+	base_graphics_backend::property_changed.  Change all uses. 
+
 2010-09-14  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/fltk_backend.cc (fltk_backend::object_destroyed):
 	Don't attempt to delete window if __plot_stream__ is empty.
 
 2010-09-14  Jordi Guti√©rrez Hermoso <jordigh@gmail.com>
 
 	* load-path.cc (genpath): Pass SKIP in recursive call.
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -1176,28 +1176,28 @@ class fltk_backend : public base_graphic
 public:
   fltk_backend (void)
     : base_graphics_backend (FLTK_BACKEND_NAME) { }
 
   ~fltk_backend (void) { }
 
   bool is_valid (void) const { return true; }
 
-  void object_destroyed (const graphics_object& go)
+  void finalize (const graphics_object& go)
   {
     if (go.isa ("figure"))
       {
         octave_value ov = go.get (caseless_str ("__plot_stream__"));
 
         if (! ov.is_empty ())
           figure_manager::delete_window (ov.string_value ());
       }
   }
 
-  void property_changed (const graphics_object& go, int id)
+  void update (const graphics_object& go, int id)
   {
     if (go.isa ("figure"))
       {
         octave_value ov = go.get (caseless_str ("__plot_stream__"));
         
         if (! ov.is_empty ())
           {
             const figure::properties& fp =
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -779,17 +779,17 @@ base_property::set (const octave_value& 
       // notify backend
       if (id >= 0)
         {
           graphics_object go = gh_manager::get_object (parent);
           if (go)
             {
               graphics_backend backend = go.get_backend();
               if (backend)
-                backend.property_changed (go, id);
+                backend.update (go, id);
             }
         }
 
       // run listeners
       if (do_run && ! error_state)
         run_listeners (POSTSET);
 
       return true;
@@ -1822,17 +1822,17 @@ gh_manager::do_free (const graphics_hand
 
               octave_value val = bp.get_deletefcn ();
 
               bp.execute_deletefcn ();
 
               // notify backend
               graphics_backend backend = p->second.get_backend ();
               if (backend)
-                backend.object_destroyed (p->second);
+                backend.finalize (p->second);
 
               // Note: this will be valid only for first explicitly 
               // deleted object.  All its children will then have an
               // unknown backend.
 
               // Graphics handles for non-figure objects are negative
               // integers plus some random fractional part.  To avoid
               // running out of integers, we recycle the integer part
@@ -2001,37 +2001,37 @@ xcreatefcn (const graphics_handle& h)
 {
   graphics_object obj = gh_manager::get_object (h);
   obj.get_properties ().execute_createfcn  ();
 }
 
 // ---------------------------------------------------------------------
 
 void
-base_graphics_backend::property_changed (const graphics_handle& h, int id)
+base_graphics_backend::update (const graphics_handle& h, int id)
 {
   graphics_object go = gh_manager::get_object (h);
 
-  property_changed (go, id);
+  update (go, id);
 }
 
 void
-base_graphics_backend::object_created (const graphics_handle& h)
+base_graphics_backend::initialize (const graphics_handle& h)
 {
   graphics_object go = gh_manager::get_object (h);
 
-  object_created (go);
+  initialize (go);
 }
 
 void
-base_graphics_backend::object_destroyed (const graphics_handle& h)
+base_graphics_backend::finalize (const graphics_handle& h)
 {
   graphics_object go = gh_manager::get_object (h);
 
-  object_destroyed (go);
+  finalize (go);
 }
 // ---------------------------------------------------------------------
 
 void
 base_properties::set_from_list (base_graphics_object& obj,
                                 property_list& defaults)
 {
   std::string go_name = graphics_object_name ();
@@ -2324,28 +2324,28 @@ class gnuplot_backend : public base_grap
 public:
   gnuplot_backend (void)
       : base_graphics_backend ("gnuplot") { }
 
   ~gnuplot_backend (void) { }
 
   bool is_valid (void) const { return true; }
 
-  void object_destroyed (const graphics_object& go)
+  void finalize (const graphics_object& go)
     {
       if (go.isa ("figure"))
         {
           const figure::properties& props =
               dynamic_cast<const figure::properties&> (go.get_properties ());
 
           send_quit (props.get___plot_stream__ ());
         }
     }
 
-  void property_changed (const graphics_object& go, int id)
+  void update (const graphics_object& go, int id)
     {
       if (go.isa ("figure"))
         {
           graphics_object obj (go);
 
           figure::properties& props =
               dynamic_cast<figure::properties&> (obj.get_properties ());
 
@@ -4712,17 +4712,17 @@ gh_manager::do_make_graphics_handle (con
 
       handle_map[h] = obj;
       if (do_createfcn)
         go->get_properties ().execute_createfcn ();
 
       // notify backend
       graphics_backend backend = go->get_backend ();
       if (backend)
-        backend.object_created (obj);
+        backend.initialize (obj);
     }
   else
     error ("gh_manager::do_make_graphics_handle: invalid object type `%s'",
            go_name.c_str ());
 
   return h;
 }
 
@@ -4734,17 +4734,17 @@ gh_manager::do_make_figure_handle (doubl
   base_graphics_object* go = new figure (h, 0);
   graphics_object obj (go);
 
   handle_map[h] = obj;
 
   // notify backend
   graphics_backend backend = go->get_backend ();
   if (backend)
-    backend.object_created (obj);
+    backend.initialize (obj);
   
   return h;
 }
 
 void
 gh_manager::do_push_figure (const graphics_handle& h)
 {
   do_pop_figure (h);
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1667,32 +1667,32 @@ public:
   
   virtual Matrix get_screen_size (void) const
     {
       gripe_invalid ("get_screen_size");
       return Matrix (1, 2, 0.0);
     }
 
   // Called when graphics object using this backend changes it's property.
-  virtual void property_changed (const graphics_object&, int)
-    { gripe_invalid ("property_changed"); }
-
-  void property_changed (const graphics_handle&, int);
+  virtual void update (const graphics_object&, int)
+    { gripe_invalid ("base_graphics_backend::update"); }
+
+  void update (const graphics_handle&, int);
   
   // Called when new object using this backend is created.
-  virtual void object_created (const graphics_object&)
-    { gripe_invalid ("object_created"); }
-
-  void object_created (const graphics_handle&);
+  virtual void initialize (const graphics_object&)
+    { gripe_invalid ("base_graphics_backend::initialize"); }
+
+  void initialize (const graphics_handle&);
 
   // Called when object using this backend is destroyed.
-  virtual void object_destroyed (const graphics_object&)
-    { gripe_invalid ("object_destroyed"); }
-
-  void object_destroyed (const graphics_handle&);
+  virtual void finalize (const graphics_object&)
+    { gripe_invalid ("base_graphics_backend::finalize"); }
+
+  void finalize (const graphics_handle&);
 
 private:
   std::string name;
   int count;
 
 private:
   void gripe_invalid (const std::string& fname) const
     {
@@ -1759,37 +1759,37 @@ public:
 
   double get_screen_resolution (void) const
     { return rep->get_screen_resolution (); }
 
   Matrix get_screen_size (void) const
     { return rep->get_screen_size (); }
 
   // Notifies backend that object't property has changed.
-  void property_changed (const graphics_object& go, int id)
-    { rep->property_changed (go, id); }
+  void update (const graphics_object& go, int id)
+    { rep->update (go, id); }
   
-  void property_changed (const graphics_handle& h, int id)
-    { rep->property_changed (h, id); }
+  void update (const graphics_handle& h, int id)
+    { rep->update (h, id); }
 
   // Notifies backend that new object was created.
-  void object_created (const graphics_object& go)
-    { rep->object_created (go); }
+  void initialize (const graphics_object& go)
+    { rep->initialize (go); }
   
-  void object_created (const graphics_handle& h)
-    { rep->object_created (h); }
+  void initialize (const graphics_handle& h)
+    { rep->initialize (h); }
   
   // Notifies backend that object was destroyed.
   // This is called only for explicitly deleted object. Children are
   // deleted implicitly and backend isn't notified.
-  void object_destroyed (const graphics_object& go)
-    { rep->object_destroyed (go); }
+  void finalize (const graphics_object& go)
+    { rep->finalize (go); }
   
-  void object_destroyed (const graphics_handle& h)
-    { rep->object_destroyed (h); }
+  void finalize (const graphics_handle& h)
+    { rep->finalize (h); }
   
   OCTINTERP_API static graphics_backend default_backend (void);
 
   static void register_backend (const graphics_backend& b)
     { available_backends[b.get_name ()] = b; }
 
   static void unregister_backend (const std::string& name)
     { available_backends.erase (name); }
@@ -2594,17 +2594,17 @@ public:
           backend = graphics_backend::default_backend ();
 
         return backend;
       }
 
     void set_backend (const graphics_backend& b) 
     { 
       if (backend)
-        backend.object_destroyed (__myhandle__);
+        backend.finalize (__myhandle__);
       backend = b; 
       __backend__ = b.get_name ();
       __plot_stream__ = Matrix ();
       mark_modified ();
     }
 
     void set___backend__ (const octave_value& val)
     {
