# HG changeset patch
# User carlo@guglielmo.local
# Date 1203467038 18000
#      Tue Feb 19 19:23:58 2008 -0500
# Node ID bb7cc90cdc5e9dc9e3fc4be5363f95bf46c4475c
# Parent  e27f8afa99e5a841cd535c3bcbcb9c31a62d799c
added describe command to pkg

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2008-02-19 Carlo de Falco <carlo.defalco@gmail.com>
+
+	* pkg/pkg.m: Handle 'describe' command.
+	(parse_pkg_idx, print_package_description): New subfunctions.
+	
 2008-02-19  Bill Denney  <bill@denney.ws>
 
 	* time/datestr.m: Avoid confusion for datenum vectors that are 6
 	elements wide.
 
 2008-02-18  David Bateman  <dbateman@free.fr>
 
 	* general/rem.m, general/mod.m: Treat integer types correctly.
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -96,16 +96,39 @@
 ## returns a cell array containing a structure for each installed package.
 ## The command
 ## @example
 ## [@var{user_packages}, @var{system_packages}] = pkg list
 ## @end example
 ## @noindent
 ## splits the list of installed packages into those who are installed by
 ## the current user, and those installed by the system administrator.
+## @item describe
+## Show a short description of the named installed packages, with the option
+## '-verbose' also list functions provided by the package, e.g.:
+## @example
+##  pkg describe -verbose all
+## @end example
+## @noindent
+## will describe all installed packages and the functions they provide.
+## If one output is requested a cell of structure containing the
+## description and list of functions of each package is returned as
+## output rather than printed on screen:
+## @example
+##  desc = pkg ("describe", "secs1d", "image")
+## @end example
+## @noindent
+## If any of the requested packages is not installed, pkg returns an
+## error, unless a second output is requested:
+## @example
+##  [ desc, flag] = pkg ("describe", "secs1d", "image")
+## @end example
+## @noindent
+## @var{flag} will take one of the values "Not installed", "Loaded" or
+## "Not loaded" for each of the named packages.
 ## @item prefix
 ## Set the installation prefix directory. For example,
 ## @example
 ## pkg prefix ~/my_octave_packages
 ## @end example
 ## @noindent
 ## sets the installation prefix to @code{~/my_octave_packages}.
 ## Packages will be installed in this directory.
@@ -193,16 +216,18 @@ function [local_packages, global_package
     else
       prefix = fullfile ("~", "octave");
       archprefix = prefix;
     endif
     prefix = tilde_expand (prefix);
     archprefix = tilde_expand (archprefix);
   endif
 
+  available_actions = {"list", "install", "uninstall", "load", "unload", "prefix", ...
+		       "local_list", "global_list", "rebuild", "build","describe"};
   ## Handle input
   if (length (varargin) == 0 || ! iscellstr (varargin))
     print_usage ();
   endif
   files = {};
   deps = true;
   auto = 0;
   action = "none";
@@ -222,18 +247,17 @@ function [local_packages, global_package
 	if (! user_prefix)
 	  prefix = tilde_expand (fullfile ("~", "octave"));
 	endif
       case "-global"
 	global_install = true;
 	if (! user_prefix)
 	  prefix = fullfile (OCTAVE_HOME (), "share", "octave", "packages");
 	endif
-      case {"list", "install", "uninstall", "load", "unload", "prefix", ...
-	    "local_list", "global_list", "rebuild", "build"}
+      case available_actions
 	if (strcmp (action, "none"))
 	  action = varargin{i};
 	else
 	  error ("more than one action specified");
 	endif
       otherwise
 	files{end+1} = varargin{i};
     endswitch
@@ -360,16 +384,38 @@ function [local_packages, global_package
       endif
 
     case "build"
       if (length (files) < 2)
 	error ("you must specify at least the build directory and one filename\nwhen calling 'pkg build'");
       endif
       build (files, deps, auto, verbose);
 
+    case "describe"
+      if (length (files) == 0)
+	error ("you must specify at least one package or 'all' when calling 'pkg describe'");
+      endif
+      ## XXX FIXME: the name of the output variables is inconsistent
+      ##            with their content
+      switch (nargout)
+	  case 0
+	    describe (files, verbose, local_list, global_list);
+	  case 1
+	    pkg_desc_list = describe (files, verbose, local_list, ...
+				 global_list);
+	    local_packages = pkg_desc_list;
+	  case 2
+	    [pkg_desc_list, flag] = describe (files, verbose, local_list, ...
+					 global_list);
+	    local_packages  = pkg_desc_list;
+	    global_packages = flag;
+	  otherwise
+	    error ("you can request at most two outputs when calling 'pkg describe'");
+	endswitch
+		
     otherwise
       error ("you must specify a valid action for 'pkg'. See 'help pkg' for details");
   endswitch
 endfunction
 
 function descriptions = rebuild (prefix, archprefix, list, files, auto, verbose)
   if (isempty (files))
     [dirlist, err, msg] = readdir (prefix);
@@ -895,20 +941,154 @@ function uninstall (pkgnames, handle_dep
     else
       local_packages = save_order (remaining_packages);
       save (local_list, "local_packages");
     endif
   endif
 
 endfunction
 
+function [pkg_desc_list, flag] = describe (pkgnames, verbose, 
+					   local_list, global_list)
+
+  ## Get the list of installed packages
+  installed_pkgs_lst = installed_packages(local_list, global_list);
+  num_packages       = length (installed_pkgs_lst);
+  
+
+  describe_all       = false;
+  if (any (strcmp ('all', pkgnames)))
+    describe_all         = true;
+    flag{1:num_packages} = "Not Loaded";
+    num_pkgnames         = num_packages;
+  else
+    num_pkgnames         = length (pkgnames);
+    flag{1:num_pkgnames} = "Not installed";
+  end
+
+  for i = 1:num_packages
+    curr_name= installed_pkgs_lst{i}.name;
+    if (describe_all)
+      name_pos = i;
+    else
+      name_pos = find(strcmp (curr_name, pkgnames));
+    end
+    if (!isempty(name_pos))
+      if (installed_pkgs_lst{i}.loaded)
+	flag{name_pos} = "Loaded";
+      else
+	flag{name_pos} = "Not loaded";
+      endif
+
+      pkg_desc_list{name_pos}.name = ...
+	  installed_pkgs_lst{i}.name;
+      pkg_desc_list{name_pos}.description = ...
+	  installed_pkgs_lst{i}.description;
+      pkg_desc_list{name_pos}.provides = ...
+	  parse_pkg_idx(installed_pkgs_lst{i}.dir);
+
+    endif
+  endfor
+
+  non_inst = find(strcmp(flag,"Not installed"));
+  if (!isempty(non_inst) && (nargout<2))
+    non_inst_str = sprintf(" %s ",pkgnames{non_inst});
+    error("some packages are not installed: %s",non_inst_str);
+  endif
+
+  if (nargout == 0)
+    for i=1:num_pkgnames
+      print_package_description (pkg_desc_list{i}.name, 
+				 pkg_desc_list{i}.provides,  
+				 pkg_desc_list{i}.description,
+				 flag{i}, verbose);
+    endfor
+  endif
+
+endfunction
+
 ##########################################################
 ##        A U X I L I A R Y    F U N C T I O N S        ##
 ##########################################################
 
+## This function reads an INDEX file
+function [pkg_idx_struct] = parse_pkg_idx(packdir)
+
+  fINDEX = fullfile (packdir, "packinfo", "INDEX");
+
+  if (!exist(fINDEX, "file")  )
+    error("could not find any INDEX file in directory %s, \
+\ntry 'pkg rebuild all' to generate missing INDEX files", packdir);
+  endif    
+
+    
+  [fid, msg] = fopen(fINDEX,"r");
+  if (fid == -1)
+    error("the INDEX file %s could not be read: %s", 
+	  fINDEX, msg);
+  endif
+  
+  cat_num = 1;
+  pkg_idx_struct{1}.category = "Uncategorized";
+  pkg_idx_struct{1}.functions = {};
+
+ 
+  line = fgetl(fid);
+  while ((isempty(strfind(line,">>"))) && (! feof (fid)))
+    line = fgetl(fid);
+  endwhile
+
+  while ((! feof (fid) ) || (line != -1))
+    if (!any(!isspace(line)) || (line(1) == "#") || any(line=="="))
+      ## Comments,  blank lines or comments about unimplemented 
+      ## functions: do nothing
+      ## XXX: probably comments and pointers to external functions
+      ## could be treated better when printing to screen?
+    elseif (!isempty(strfind(line,">>")))
+      ## Skip package name and description as they are in
+      ## DESCRIPTION already
+    elseif (!isspace(line(1)))
+      ## Category
+      if ( !isempty(pkg_idx_struct{cat_num}.functions))
+	pkg_idx_struct{++cat_num}.functions  = {};
+      endif
+      pkg_idx_struct{cat_num}.category = deblank(line);
+    else
+      ## Function names
+      while (any(!isspace(line)))
+	[fun_name, line] = strtok(line);
+	pkg_idx_struct{cat_num}.functions{end+1}  = deblank(fun_name);
+      endwhile
+    endif
+    line = fgetl(fid);
+  endwhile
+  fclose (fid);
+endfunction
+
+function print_package_description (pkg_name, pkg_idx_struct, 
+				    pkg_desc, status, verbose)
+
+  printf("---\nPackage name:\n\t%s\n", pkg_name);
+  printf("Short description:\n\t%s\n", pkg_desc);
+  printf("Status:\n\t%s\n", status);
+  if (verbose)
+    printf("---\nProvides:\n");    
+    for i=1:length(pkg_idx_struct)
+      if (!isempty(pkg_idx_struct{i}.functions))
+	printf("%s\n", pkg_idx_struct{i}.category);
+	for j=1:length(pkg_idx_struct{i}.functions)
+	  printf("\t%s\n", pkg_idx_struct{i}.functions{j});
+	endfor
+      endif
+    endfor
+  endif
+
+endfunction
+
+
 function pth = absolute_pathname (pth)
   [status, msg, msgid] = fileattrib(pth);
   if (status != 1)
     error ("could not find the file or path %s", pth);
   else
     pth = msg.Name;
   endif
 endfunction
@@ -1575,17 +1755,17 @@ function out = split_by (text, sep)
   out = cell (num_words, 1);
   for i = 1:num_words
     out{i} = strip (text_matrix(i, :));
   endfor
 endfunction
 
 ## Creates an INDEX file for a package that doesn't provide one.
 ##   'desc'  describes the package.
-##   'dir'   is the 'inst' direcotyr in temporary directory.
+##   'dir'   is the 'inst' direcotry in temporary directory.
 ##   'INDEX' is the name (including path) of resulting INDEX file.
 function write_INDEX (desc, dir, INDEX, global_install)
   ## Get names of functions in dir
   [files, err, msg] = readdir (dir);
   if (err)
     error ("couldn't read directory %s: %s", dir, msg);
   endif
 
@@ -2099,8 +2279,10 @@ function dep = is_architecture_dependent
       if (! isglob && (length(nm) - pos(end) != length(ext) - 1))
 	continue;
       endif
       dep = true;
       break;
     endif
   endfor
 endfunction
+
+
