# HG changeset patch
# User jwe
# Date 1163042123 0
#      Thu Nov 09 03:15:23 2006 +0000
# Node ID 1a6d826e92b5d1a9190319d42635bf7cb40934f6
# Parent  14906c2745e3fc9a4fdf887477c0a59a7d250c0c
[project @ 2006-11-09 03:13:11 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,45 @@
 2006-11-08  John W. Eaton  <jwe@octave.org>
 
+	* plot/legend.m: New function, adapted from Octave Forge.
+
+	* plot/__do_legend__.m: New function.
+	* plot/__errplot__.m, plot/__plt3__.m, plot/__plt__.m,
+	plot/replot.m: Call it before plotting.
+
+	* plot/plot3.m, plot/mesh.m, plot/contour.m: Don't send "set
+	noparametric" to gnuplot..
+	
+	* plot/__plotopt__.m, plot/__pltopt1__.m, plot/__plt1__.m,
+	plot/__plt2__.m, plot/__plt2mm__.m, plot/__plt2mv__.m,
+	plot/__plt2ss__.m, plot/__plt2vm__.m, plot/__plt2vv__.m: Accept
+	and return key title separate from line format.  Accept format and
+	key as cellstr.  Always return data as cell array.  Return format
+	and key title as cellstr.
+	* plot/__errplot__.m, plot/__plt3__.m, plot/__plt__.m:
+	Handle line format and key titles separately.
+	* plot/__plt3__.m, plot/__plt__.m: Handle data as cell array only.
+
+	* plot/__plot_globals__.m (__plot_line_offset__,
+	__plot_key_labels__, __plot_key_properties__): New global
+	variables.  Initialize them.
+	* plot/__init_plot_vars__.m (__plot_line_offset__,
+	__plot_key_labels__, __plot_key_properties__): Initialize.
+	* plot/__errplot__.m, plot/__plt3__.m, plot/__plt__.m
+	(__plot_line_offset__, __plot_key_labels__,
+	__plot_key_properties__): Store information about plot key titles.
+
+	* plot/__errplot__.m, plot/__init_plot_vars__.m, plot/__plt3__.m,
+	plot/__plt__.m: Use cf, mxi, and myi as shorthand for
+	__current_figure__, __multiplot_xi__, and __multiplot_yi__,
+	respectively.
+
+	* plot/__errcomm__.m: Allow fmt to be cellstr.
+
 	* strings/strcat.m: Disable Octave:empty-list-elements warning
 	whle concatenating args.
 
 2006-11-07  John W. Eaton  <jwe@octave.org>
 
 	* startup/main-rcfile: Conditionally set PAGER_FLAGS.
 
 2006-11-06  Søren Hauberg  <soren@hauberg.org>
diff --git a/scripts/plot/__do_legend__.m b/scripts/plot/__do_legend__.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/__do_legend__.m
@@ -0,0 +1,56 @@
+function __do_legend__ ()
+
+  __plot_globals__;
+
+  cf = __current_figure__;
+  mxi = __multiplot_xi__;
+  myi = __multiplot_yi__;
+
+  props = __plot_key_properties__{cf}{mxi,myi};
+
+  if (isstruct (props))
+    if (isfield (props, "visible"))
+      visible = props.visible;
+    else
+      error ("__do_legend__: missing field \"visible\"");
+    endif
+    if (isfield (props, "box"))
+      box = props.box;
+    else
+      error ("__do_legend__: missing field \"box\"");
+    endif
+    if (isfield (props, "position"))
+      position = props.position;
+    else
+      error ("__do_legend__: missing field \"position\"");
+    endif
+    if (visible)
+      switch (position)
+	case 1
+	  __gnuplot_raw__ ("set  key right top;\n")
+	case 2
+	  __gnuplot_raw__ ("set  key left top;\n")
+	case 3
+	  __gnuplot_raw__ ("set  key left bottom;\n")
+	case 4
+	  __gnuplot_raw__ ("set  key right bottom;\n")
+	case -1
+	  __gnuplot_raw__ ("set  key right top outside;\n")
+	case -2
+	  __gnuplot_raw__ ("set  key right bottom outside;\n")
+	case -3
+	  __gnuplot_raw__ ("set  key below;\n")
+      endswitch
+      if (box)
+        __gnuplot_raw__ ("set key box;\n")
+      else
+        __gnuplot_raw__ ("set key nobox;\n")
+      endif
+    else
+      __gnuplot_raw__ ("unset key;\n")
+    endif
+  else
+    error ("__do_legend__: expecting properties to be a struct");
+  endif
+
+endfunction
diff --git a/scripts/plot/__errcomm__.m b/scripts/plot/__errcomm__.m
--- a/scripts/plot/__errcomm__.m
+++ b/scripts/plot/__errcomm__.m
@@ -52,17 +52,17 @@ function __errcomm__ (caller, varargin)
       else
         usage ("%s (...)", caller);
       endif
       sz = size (a);
       ndata = 1;
       data{ndata} = a;
       while (k <= nargs)
 	a = varargin{k++};
-	if (ischar (a))
+	if (ischar (a) || iscellstr (a))
 	  __errplot__ (a, data{1:ndata});
 	  break;
 	elseif (isvector (a))
 	  a = a(:);
 	elseif (ismatrix (a))
 	  ;
 	else
 	  error ("wrong argument types");
@@ -72,17 +72,17 @@ function __errcomm__ (caller, varargin)
 	endif
 	data{++ndata} = a;
 	if (ndata > 6)
 	  error ("too many arguments to a plot");
 	endif
       endwhile
     endwhile
 
-    if (! ischar (a))
+    if (! (ischar (a) || iscellstr (a)))
       __errplot__ ("~", data{1:ndata});
     endif
   unwind_protect_cleanup
     if (! save_hold)
       hold off;
     endif
   end_unwind_protect
 
diff --git a/scripts/plot/__errplot__.m b/scripts/plot/__errplot__.m
--- a/scripts/plot/__errplot__.m
+++ b/scripts/plot/__errplot__.m
@@ -32,30 +32,43 @@
 ## Created: 18.7.2000
 ## Author: Teemu Ikonen <tpikonen@pcu.helsinki.fi>
 ## Keywords: errorbar, plotting
 
 function __errplot__ (fstr, a1, a2, a3, a4, a5, a6)
 
   __plot_globals__;
 
+  cf = __current_figure__;
+  mxi = __multiplot_xi__;
+  myi = __multiplot_yi__;
+
   __setup_plot__ ("__gnuplot_plot__");
 
   if (nargin < 3 || nargin > 7) # at least three data arguments needed
     print_usage ();
   endif
 
-  j = __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__);
+  j = __plot_data_offset__{cf}(mxi,myi);
+
+  loff = __plot_line_offset__{cf}(mxi,myi);
 
-  fmt = __pltopt__ ("__errplot__", fstr);
+  [fmt, key] = __pltopt__ ("__errplot__", fstr);
+
+  nkey = numel (key);
 
   nplots = size (a1, 2);
   len = size (a1, 1);
   for i = 1:nplots
-    ifmt = fmt(1+mod(i,size(fmt,1)), :);
+    ifmt = fmt{1+mod(i-1,numel(fmt))};
+    if (i <= nkey)
+      __plot_key_labels__{cf}{mxi,myi}{loff} = key{i};
+    else
+      __plot_key_labels__{cf}{mxi,myi}{loff} = "";
+    endif
     switch (nargin - 1)
       case 2
 	tmp = [(1:len)', a1(:,i), a2(:,i)];
       case 3
 	tmp = [a1(:,i), a2(:,i), a3(:,i)];
       case 4
 	if (index (ifmt, "boxxy") || index (ifmt, "xyerr"))
 	  tmp = [a1(:,i), a2(:,i), a3(:,i), a4(:,i)];
@@ -68,30 +81,34 @@ function __errplot__ (fstr, a1, a2, a3, 
 	error ("error plot requires 2, 3, 4 or 6 columns");
 	## tmp = [a1(:,i), a2(:,i), a3(:,i), a4(:,i), a5(:,i)];
       case 6
 	tmp = [a1(:,i), a2(:,i), ...
 	       a1(:,i)-a3(:,i), a1(:,i)+a4(:,i), ...
 	       a2(:,i)-a5(:,i), a2(:,i)+a6(:,i)];
     endswitch
 
-    __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j} = tmp;
+    __plot_data__{cf}{mxi,myi}{j} = tmp;
 
-    __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} \
-	= sprintf ("%s%s __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{%d} %s",
-		   __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__},
-		   __plot_command_sep__, j, ifmt);
+    __plot_command__{cf}{mxi,myi} \
+	= sprintf ("%s%s __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{%d} %s %s __plot_key_labels__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{%d}",
+		   __plot_command__{cf}{mxi,myi},
+		   __plot_command_sep__, j, ifmt,
+		   gnuplot_command_title, loff);
     __plot_command_sep__ = ",\\\n";
 
     j++;
+    loff++;
 
   endfor
 
-  __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__) = j;
+  __plot_data_offset__{cf}(mxi,myi) = j;
+  __plot_line_offset__{cf}(mxi,myi) = loff;
 
-  if (! isempty (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}))
-      if (__multiplot_mode__)
-	__gnuplot_raw__ ("clear\n");
-      endif
-    eval (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__});
+  if (! isempty (__plot_command__{cf}{mxi,myi}))
+    if (__multiplot_mode__)
+      __gnuplot_raw__ ("clear\n");
+    endif
+    __do_legend__ ();
+    eval (__plot_command__{cf}{mxi,myi});
   endif
 
 endfunction
diff --git a/scripts/plot/__init_plot_vars__.m b/scripts/plot/__init_plot_vars__.m
--- a/scripts/plot/__init_plot_vars__.m
+++ b/scripts/plot/__init_plot_vars__.m
@@ -14,29 +14,35 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 function __init_plot_vars__ (cmd, sep, clear_data)
 
-  __plot_globals__
+  __plot_globals__;
+
+  cf = __current_figure__;
+  mxi = __multiplot_xi__;
+  myi = __multiplot_yi__;
 
   if (nargin < 3)
     clear_data = true;
     if (nargin < 2)
       sep = "";
       if (nargin < 1)
 	cmd = "";
       endif
     endif
   endif
 
-  __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} = cmd;
+  __plot_command__{cf}{mxi,myi} = cmd;
   __plot_command_sep__ = sep;
 
   if (clear_data)
-    __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} = [];
-    __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__) = 1;
+    __plot_data__{cf}{mxi,myi} = [];
+    __plot_data_offset__{cf}(mxi,myi) = 1;
+    __plot_line_offset__{cf}(mxi,myi) = 1;
+    __plot_key_labels__{cf}{mxi,myi} = [];
   endif
 
 endfunction
diff --git a/scripts/plot/__plot_globals__.m b/scripts/plot/__plot_globals__.m
--- a/scripts/plot/__plot_globals__.m
+++ b/scripts/plot/__plot_globals__.m
@@ -39,31 +39,50 @@ if (isempty (__multiplot_xi__))
 endif
 
 if (isempty (__multiplot_yi__))
   __multiplot_yi__ = 1;
 endif
 
 global __current_figure__;
 global __plot_data_offset__;
+global __plot_line_offset__;
 global __plot_command__;
 global __plot_command_sep__;
 global __plot_data__;
+global __plot_key_labels__;
+global __plot_key_properties__;
 
 if (isempty (__current_figure__))
   __current_figure__ = 1;
 endif
 
 if (length (__plot_data_offset__) < __current_figure__
     || any (size (__plot_data_offset__{__current_figure__}) != [__multiplot_xi__, __multiplot_yi__]))
 
   __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__) = 1;
 endif
 
+if (length (__plot_line_offset__) < __current_figure__
+    || any (size (__plot_line_offset__{__current_figure__}) != [__multiplot_xi__, __multiplot_yi__]))
+
+  __plot_line_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__) = 1;
+endif
+
 if (length (__plot_command__) < __current_figure__
     || any (size (__plot_command__{__current_figure__}) != [__multiplot_xi__, __multiplot_yi__]))
   __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} = "";
 endif
 
 if (length (__plot_data__) < __current_figure__
     || any (size (__plot_data__{__current_figure__}) != [__multiplot_xi__, __multiplot_yi__]))
   __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} = [];
 endif
+
+if (length (__plot_key_labels__) < __current_figure__
+    || any (size (__plot_key_labels__{__current_figure__}) != [__multiplot_xi__, __multiplot_yi__]))
+  __plot_key_labels__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} = [];
+endif
+
+if (length (__plot_key_properties__) < __current_figure__
+    || any (size (__plot_key_properties__{__current_figure__}) != [__multiplot_xi__, __multiplot_yi__]))
+  __plot_key_properties__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} = struct ("visible", true, "box", false, "position", 0);
+endif
diff --git a/scripts/plot/__plt1__.m b/scripts/plot/__plt1__.m
--- a/scripts/plot/__plt1__.m
+++ b/scripts/plot/__plt1__.m
@@ -18,28 +18,36 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[data, fmtstr] =} __plt1__ (@var{x1}, @var{fmt})
 ## @end deftypefn
 
 ## Author: jwe
 
-function [data, fmtstr] = __plt1__ (x1, fmt)
+function [data, fmtstr, key] = __plt1__ (x1, fmt, keystr)
 
-  if (nargin < 1 || nargin > 2 || nargout != 2)
+  if (nargin < 1 || nargin > 3 || nargout < 2 || nargout > 3)
     print_usage ();
   endif
 
-  if (nargin == 1)
-    fmt = "";
+  if (nargin < 2)
+    fmt = {""};
   endif
 
-  if (! ischar (fmt))
-    error ("__plt1__: fmt must be a string");
+  if (nargin < 3)
+    keystr = {""};
+  endif
+
+  if (! iscellstr (fmt))
+    error ("__plt1__: fmt must be a cell array of character strings");
+  endif
+
+  if (! iscell (keystr))
+    error ("__plt1__: fmt must be a cell array");
   endif
 
   [nr, nc] = size (x1);
   if (nr == 1)
     x1 = x1.';
     tmp = nr;
     nr = nc;
     nc = tmp;
@@ -48,11 +56,11 @@ function [data, fmtstr] = __plt1__ (x1, 
   if (any (any (x1_i)))
     x2 = x1_i;
     x1 = real (x1);
   else
     x2 = x1;
     x1 = (1:nr)';
   endif
 
-  [data, fmtstr] = __plt2__ (x1, x2, fmt);
+  [data, fmtstr, key] = __plt2__ (x1, x2, fmt, keystr);
 
 endfunction
diff --git a/scripts/plot/__plt2__.m b/scripts/plot/__plt2__.m
--- a/scripts/plot/__plt2__.m
+++ b/scripts/plot/__plt2__.m
@@ -18,60 +18,69 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[data, fmtstr] =} __plt2__ (@var{x1}, @var{x2}, @var{fmt})
 ## @end deftypefn
 
 ## Author: jwe
 
-function [data, fmtstr] = __plt2__ (x1, x2, fmt)
+function [data, fmtstr, key] = __plt2__ (x1, x2, fmt, keystr)
 
-  if (nargin < 2 || nargin > 3 || nargout != 2)
+  if (nargin < 2 || nargin > 4 || nargout < 2 || nargout > 3)
     print_usage ();
   endif
 
-  if (nargin == 2)
-    fmt = "";
+  if (nargin < 3)
+    fmt = {""};
   endif
 
-  if (! ischar (fmt))
-    error ("__plt2__: fmt must be a string");
+  if (nargin < 4)
+    keystr = {""};
+  endif
+
+  if (! iscellstr (fmt))
+    error ("__plt1__: fmt must be a cell array of character strings");
+  endif
+
+  if (! iscell (keystr))
+    error ("__plt1__: fmt must be a cell array");
   endif
 
   if (any (any (imag (x1))))
     x1 = real (x1);
   endif
 
   if (any (any (imag (x2))))
     x2 = real (x2);
   endif
 
   if (isscalar (x1))
     if (isscalar (x2))
-      [data, fmtstr] = __plt2ss__ (x1, x2, fmt);
+      [data, fmtstr, key] = __plt2ss__ (x1, x2, fmt, keystr);
     else
       error ("__plt2__: invalid data for plotting");
     endif
   elseif (isvector (x1))
     if (isvector (x2))
-      [data, fmtstr] = __plt2vv__ (x1, x2, fmt);
+      [data, fmtstr, key] = __plt2vv__ (x1, x2, fmt, keystr);
     elseif (ismatrix (x2))
-      [data, fmtstr] = __plt2vm__ (x1, x2, fmt);
+      [data, fmtstr, key] = __plt2vm__ (x1, x2, fmt, keystr);
     else
       error ("__plt2__: invalid data for plotting");
     endif
   elseif (ismatrix (x1))
     if (isvector (x2))
-      [data, fmtstr] = __plt2mv__ (x1, x2, fmt);
+      [data, fmtstr, key] = __plt2mv__ (x1, x2, fmt, keystr);
     elseif (ismatrix (x2))
-      [data, fmtstr] = __plt2mm__ (x1, x2, fmt);
+      [data, fmtstr, key] = __plt2mm__ (x1, x2, fmt, keystr);
     else
       error ("__plt2__: invalid data for plotting");
     endif
   elseif (isempty (x1) && isempty (x2))
-    data = [];
-    fmtstr = "";
+    data = {};
+    fmtstr = {};
+    key = {};
   else
     error ("__plt2__: invalid data for plotting");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2mm__.m b/scripts/plot/__plt2mm__.m
--- a/scripts/plot/__plt2mm__.m
+++ b/scripts/plot/__plt2mm__.m
@@ -18,43 +18,55 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[data, fmtstr] =} __plt2mm__ (@var{x}, @var{y}, @var{fmt})
 ## @end deftypefn
 
 ## Author: jwe
 
-function [data, fmtstr] = __plt2mm__ (x, y, fmt)
+function [data, fmtstr, key] = __plt2mm__ (x, y, fmt, keystr)
+
+  if (nargin < 2 || nargin > 4 || nargout < 2 || nargout > 3)
+    print_usage ();
+  endif
 
-  if (nargin < 2 || nargin > 3 || nargout != 2)
-    print_usage ();
-  elseif (nargin == 2 || isempty (fmt))
-    fmt = " ";  ## Yes, this is intentionally not an empty string!
+  if (nargin < 3 || isempty (fmt))
+    fmt = {""};
+  endif
+
+  if (nargin < 4 || isempty (keystr))
+    keystr = {""};
   endif
 
   [x_nr, x_nc] = size (x);
   [y_nr, y_nc] = size (y);
 
   k = 1;
   fmt_nr = rows (fmt);
   if (x_nr == y_nr && x_nc == y_nc)
     if (x_nc > 0)
       if (rows (fmt) == 1)
 	fmt = repmat (fmt, x_nc, 1);
       endif
+      if (rows (keystr) == 1)
+	keystr = repmat (keystr, x_nc, 1);
+      endif
       tmp = [x, y];
       dtmp = cell (x_nc, 1);
       ftmp = cell (x_nc, 1);
+      ktmp = cell (x_nc, 1);
       for i = 1:x_nc
 	dtmp{i} = tmp(:,[i,x_nc+i]);
-	ftmp{i} = deblank (fmt(i,:));
+	ftmp{i} = deblank (fmt{i});
+	ktmp{i} = deblank (keystr{i});
       endfor
       data = dtmp;
       fmtstr = ftmp;
+      key = ktmp;
     else
       error ("__plt2mm__: arguments must be a matrices");
     endif
   else
     error ("__plt2mm__: matrix dimensions must match");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2mv__.m b/scripts/plot/__plt2mv__.m
--- a/scripts/plot/__plt2mv__.m
+++ b/scripts/plot/__plt2mv__.m
@@ -18,22 +18,28 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[data, fmtstr] =} __plt2mv__ (@var{x}, @var{y}, @var{fmt})
 ## @end deftypefn
 
 ## Author: jwe
 
-function [data, fmtstr] = __plt2mv__ (x, y, fmt)
+function [data, fmtstr, key] = __plt2mv__ (x, y, fmt, keystr)
+
+  if (nargin < 2 || nargin > 4 || nargout < 2 || nargou > 3)
+    print_usage ();
+  endif
 
-  if (nargin < 2 || nargin > 3 || nargout != 2)
-    print_usage ();
-  elseif (nargin == 2 || isempty (fmt))
-    fmt = " ";  ## Yes, this is intentionally not an empty string!
+  if (nargin < 3 || isempty (fmt))
+    fmt = {""};
+  endif
+
+  if (nargin < 3 || isempty (keystr))
+    keystr = {""};
   endif
 
   [x_nr, x_nc] = size (x);
   [y_nr, y_nc] = size (y);
 
   if (y_nr == 1)
     y = y';
     tmp = y_nr;
@@ -51,22 +57,28 @@ function [data, fmtstr] = __plt2mv__ (x,
   else
     error ("__plt2mv__: matrix dimensions must match");
   endif
 
   if (x_nc > 0)
     if (rows (fmt) == 1)
       fmt = repmat (fmt, x_nc, 1);
     endif
+    if (rows (keystr) == 1)
+      keystr = repmat (keystr, x_nc, 1);
+    endif
     tmp = [x, y];
     dtmp = cell (x_nc, 1);
     ftmp = cell (x_nc, 1);
+    ktmp = cell (x_nc, 1);
     for i = 1:x_nc
       dtmp{i} = tmp(:,[i,x_nc+1]);
-      ftmp{i} = deblank (fmt(i,:));
+      ftmp{i} = deblank (fmt{i});
+      ktmp{i} = deblank (keystr{i});
     endfor
     data = dtmp;
     fmtstr = ftmp;
+    key = ktmp;
   else
     error ("__plt2mv__: arguments must be a matrices");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2ss__.m b/scripts/plot/__plt2ss__.m
--- a/scripts/plot/__plt2ss__.m
+++ b/scripts/plot/__plt2ss__.m
@@ -18,30 +18,42 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[data, fmtstr] =} __plt2ss__ (@var{x}, @var{y}, @var{fmt})
 ## @end deftypefn
 
 ## Author: jwe
 
-function [data, fmtstr] = __plt2ss__ (x, y, fmt)
+function [data, fmtstr, key] = __plt2ss__ (x, y, fmt, keystr)
 
-  if (nargin < 2 || nargin > 3 || nargout != 2)
+  if (nargin < 2 || nargin > 4 || nargout < 2 || nargout > 3)
     print_usage ();
-  elseif (nargin == 2)
-    fmt = "";
-  elseif (rows (fmt) > 1)
-    fmt = fmt (1, :);
+  endif
+
+  if (nargin < 3)
+    fmt = {""};
+  endif
+
+  if (nargin < 4)
+    keystr = {""};
+  endif
+
+  if (rows (fmt) > 1)
+    fmt = fmt(1);
+  endif
+
+  if (rows (keystr) > 1)
+    keystr = keystr(1);
   endif
 
   [x_nr, x_nc] = size (x);
   [y_nr, y_nc] = size (y);
 
   if (x_nr == 1 && x_nr == y_nr && x_nc == 1 && x_nc == y_nc)
-    tmp = [x, y];
-    data = tmp;
+    data = {[x, y]};
     fmtstr = fmt;
+    key = keystr;
   else
     error ("__plt2ss__: arguments must be scalars");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2vm__.m b/scripts/plot/__plt2vm__.m
--- a/scripts/plot/__plt2vm__.m
+++ b/scripts/plot/__plt2vm__.m
@@ -18,22 +18,28 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[data, fmtstr] =} __plt2vm__ (@var{x}, @var{y}, @var{fmt})
 ## @end deftypefn
 
 ## Author: jwe
 
-function [data, fmtstr] = __plt2vm__ (x, y, fmt)
+function [data, fmtstr, key] = __plt2vm__ (x, y, fmt, keystr)
+
+  if (nargin < 2 || nargin > 4 || nargout < 2 || nargout > 3)
+    print_usage ();
+  endif
 
-  if (nargin < 2 || nargin > 3 || nargout != 2)
-    print_usage ();
-  elseif (nargin == 2 || isempty (fmt))
-    fmt = " ";  ## Yes, this is intentionally not an empty string!
+  if (nargin < 3 || isempty (fmt))
+    fmt = {""};
+  endif
+
+  if (nargin < 4 || isempty (keystr))
+    keystr = {""};
   endif
 
   [x_nr, x_nc] = size (x);
   [y_nr, y_nc] = size (y);
 
   if (x_nr == 1)
     x = x';
     tmp = x_nr;
@@ -51,22 +57,28 @@ function [data, fmtstr] = __plt2vm__ (x,
   else
     error ("__plt2vm__: matrix dimensions must match");
   endif
 
   if (y_nc > 0)
     if (rows (fmt) == 1)
       fmt = repmat (fmt, y_nc, 1);
     endif
+    if (rows (keystr) == 1)
+      keystr = repmat (keystr, y_nc, 1);
+    endif
     tmp = [x, y];
     dtmp = cell (y_nc, 1);
     ftmp = cell (y_nc, 1);
+    ktmp = cell (y_nc, 1);
     for i = 1:y_nc
       dtmp{i} = tmp(:,[1,i+1]);
-      ftmp{i} = deblank (fmt(i,:));
+      ftmp{i} = deblank (fmt{i});
+      ktmp{i} = deblank (keystr{i});
     endfor
     data = dtmp;
     fmtstr = ftmp;
+    key = ktmp;
   else
     error ("__plt2vm__: arguments must be a matrices");
   endif
 
 endfunction
diff --git a/scripts/plot/__plt2vv__.m b/scripts/plot/__plt2vv__.m
--- a/scripts/plot/__plt2vv__.m
+++ b/scripts/plot/__plt2vv__.m
@@ -18,24 +18,36 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[data, fmtstr] =} __plt2vv__ (@var{x}, @var{y}, @var{fmt})
 ## @end deftypefn
 
 ## Author: jwe
 
-function [data, fmtstr] = __plt2vv__ (x, y, fmt)
+function [data, fmtstr, key] = __plt2vv__ (x, y, fmt, keystr)
 
-  if (nargin < 2 || nargin > 3 || nargout != 2)
+  if (nargin < 2 || nargin > 4 || nargout < 2 || nargout > 3)
     print_usage ();
-  elseif (nargin == 2)
-    fmt = "";
-  elseif (rows (fmt) > 1)
-    fmt = fmt (1, :);
+  endif
+
+  if (nargin < 3)
+    fmt = {""};
+  endif
+
+  if (nargin < 4)
+    keystr = {""};
+  endif
+
+  if (rows (fmt) > 1)
+    fmt = fmt(1);
+  endif
+
+  if (rows (keystr) > 1)
+    keystr = keystr(1);
   endif
 
   [x_nr, x_nc] = size (x);
   [y_nr, y_nc] = size (y);
 
   if (x_nr == 1)
     x = x';
     tmp = x_nr;
@@ -49,12 +61,13 @@ function [data, fmtstr] = __plt2vv__ (x,
     y_nr = y_nc;
     y_nc = tmp;
   endif
 
   if (x_nr != y_nr)
     error ("__plt2vv__: vector lengths must match");
   endif
 
-  data = [x, y];
+  data = {[x, y]};
   fmtstr = fmt;
+  key = keystr;
 
 endfunction
diff --git a/scripts/plot/__plt3__.m b/scripts/plot/__plt3__.m
--- a/scripts/plot/__plt3__.m
+++ b/scripts/plot/__plt3__.m
@@ -28,63 +28,63 @@
 ## Modified to use new gnuplot interface in octave > 2.9.0
 ## Dmitri A. Sergatskov <dasergatskov@gmail.com>
 ## April 18, 2005
 ## Modified to use NaN as seperator for gnuplot, so multiple calls
 ## aren't needed.
 ## David Bateman <dbateman@free.fr>
 ## May 25, 2006
 
-function __plt3__ (x, usingstr, fmtstr, withstr)
+function __plt3__ (x, usingstr, fmtstr, keystr, withstr)
 
   if (nargin < 2)
     have_usingstr = false;
     usingstr = "";
   else
     have_usingstr = true;
   endif
   if (nargin < 3)
     fmtstr = "";
   endif
   if (nargin < 4)
+    keystr = "";
+  endif
+  if (nargin < 5)
     withstr = "";
   endif
 
   __plot_globals__;
 
+  cf = __current_figure__;
+  mxi = __multiplot_xi__;
+  myi = __multiplot_yi__;
+
   __setup_plot__ ("__gnuplot_splot__");
 
-  j = __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__);
-
-  __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j} = x;
+  j = __plot_data_offset__{cf}(mxi,myi);
+  loff = __plot_line_offset__{cf}(mxi,myi);
+  loff1 = loff;
 
-  if (iscell (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j}))
-    for i = 1:length (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j})
-    if (! have_usingstr)
-	usingstr = __make_using_clause__ (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j}{i});
-      endif
-      __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} \
-	  = sprintf ("%s%s __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{%d}{%d} %s %s",
-		     __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__},
-		     __plot_command_sep__, j, i, usingstr, fmtstr{i});
-      __plot_command_sep__ = ",\\\n";
-    endfor
-  else
-    if (! have_usingstr)
-      usingstr = __make_using_clause__ (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j});
-    endif
-    __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} \
-	= sprintf ("%s%s __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{%d} %s %s %s",
-		   __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__},
-		   __plot_command_sep__, j, usingstr, fmtstr, withstr);
-    __plot_command_sep__ = ",\\\n";
+  __plot_data__{cf}{mxi,myi}{j} = x;
+  __plot_key_labels__{cf}{mxi,myi}{loff1++} = keystr;
+
+  if (! have_usingstr)
+    usingstr = __make_using_clause__ (__plot_data__{cf}{mxi,myi}{j});
   endif
 
-  __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__) = ++j;
+  __plot_command__{cf}{mxi,myi} ...
+      = sprintf ("%s%s __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{%d} %s %s %s __plot_key_labels__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{%d} %s",
+		 __plot_command__{cf}{mxi,myi},
+		 __plot_command_sep__, j++, usingstr, fmtstr,
+		 gnuplot_command_title, loff++, withstr);
+  __plot_command_sep__ = ",\\\n";
+
+  __plot_data_offset__{cf}(mxi,myi) = j;
+  __plot_line_offset__{cf}(mxi,myi) = loff;
 
   if (__multiplot_mode__)
     __gnuplot_raw__ ("clear\n");
   endif
 
-  if (! strcmp (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}, "__gnuplot_splot__"))
-    eval (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__});
+  if (! strcmp (__plot_command__{cf}{mxi,myi}, "__gnuplot_splot__"))
+    eval (__plot_command__{cf}{mxi,myi});
   endif
 endfunction
diff --git a/scripts/plot/__plt__.m b/scripts/plot/__plt__.m
--- a/scripts/plot/__plt__.m
+++ b/scripts/plot/__plt__.m
@@ -22,109 +22,116 @@
 ## @end deftypefn
 
 ## Author: jwe
 
 function __plt__ (caller, varargin)
 
   __plot_globals__;
 
+  cf = __current_figure__;
+  mxi = __multiplot_xi__;
+  myi = __multiplot_yi__;
+
   __setup_plot__ ("__gnuplot_plot__");
 
   nargs = nargin ();
 
   if (nargs > 1)
 
     k = 1;
-    j = __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__);
+    j = __plot_data_offset__{cf}(mxi,myi);
+    loff = __plot_line_offset__{cf}(mxi,myi);
+    loff1 = loff;
 
     x_set = false;
     y_set = false;
 
     ## Gather arguments, decode format, gather plot strings, and plot lines.
 
     while (--nargs > 0 || x_set)
 
       if (nargs == 0)
 	## Force the last plot when input variables run out.
-	next_arg = "";
+	next_arg = {""};
       else
 	next_arg = varargin{k++};
       endif
 
       have_data = false;
 
-      if (ischar (next_arg))
+      if (ischar (next_arg) || iscellstr (next_arg))
 	if (x_set)
-	  fmt = __pltopt__ (caller, next_arg);
+	  [fmt, keystr] = __pltopt__ (caller, next_arg);
 	  if (y_set)
-	    [tdata, tfmtstr] = __plt2__ (x, y, fmt);
+	    [tdata, tfmtstr, key] = __plt2__ (x, y, fmt, keystr);
 	  else
-	    [tdata, tfmtstr] = __plt1__ (x, fmt);
+	    [tdata, tfmtstr, key] = __plt1__ (x, fmt, keystr);
 	  endif
 	  if (! isempty (tdata))
-	    __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j} = tdata;
+	    __plot_data__{cf}{mxi,myi}{j} = tdata;
+	    for i = 1:length (key)
+	      __plot_key_labels__{cf}{mxi,myi}{loff1++} = key{i};
+	    endfor
 	    fmtstr = tfmtstr;
 	    have_data = true;
 	  endif
 	  x_set = false;
 	  y_set = false;
 	else
 	  error ("plot: no data to plot");
 	endif
       elseif (x_set)
 	if (y_set)
-	  fmt = __pltopt__ (caller, "");
-	  [tdata, tfmtstr] = __plt2__ (x, y, fmt);
+	  [fmt, keystr] = __pltopt__ (caller, {""});
+	  [tdata, tfmtstr, key] = __plt2__ (x, y, fmt, keystr);
 	  if (! isempty (tdata))
-	    __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j} = tdata;
+	    __plot_data__{cf}{mxi,myi}{j} = tdata;
+	    for i = 1:length (key)
+	      __plot_key_labels__{cf}{mxi,myi}{loff1++} = key{i};
+	    endfor
 	    fmtstr = tfmtstr;
 	    have_data = true;
 	  endif
 	  x = next_arg;
 	  y_set = false;
 	else
 	  y = next_arg;
 	  y_set = true;
 	endif
       else
 	x = next_arg;
 	x_set = true;
       endif
 
       if (have_data)
-	if (iscell (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j}))
-	  for i = 1:length (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j})
-	    usingstr = __make_using_clause__ (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j}{i});
-	    __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} \
-		= sprintf ("%s%s __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{%d}{%d} %s %s",
-			   __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__},
-			   __plot_command_sep__, j, i, usingstr, fmtstr{i});
-	    __plot_command_sep__ = ",\\\n";
-	  endfor
-	else
-	  usingstr = __make_using_clause__ (__plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{j});
-	  __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__} \
-	    = sprintf ("%s%s __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{%d} %s %s",
-		       __plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__},
-		       __plot_command_sep__, j, usingstr, fmtstr);
+	for i = 1:length (__plot_data__{cf}{mxi,myi}{j})
+	  usingstr = __make_using_clause__ (__plot_data__{cf}{mxi,myi}{j}{i});
+	  __plot_command__{cf}{mxi,myi} ...
+	      = sprintf ("%s%s __plot_data__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{%d}{%d} %s %s %s __plot_key_labels__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}{%d}",
+			 __plot_command__{cf}{mxi,myi},
+			 __plot_command_sep__, j, i, usingstr,
+			 fmtstr{i}, gnuplot_command_title, loff++);
 	  __plot_command_sep__ = ",\\\n";
-	endif
+	endfor
 	j++;
       endif
 
     endwhile
 
-    __plot_data_offset__{__current_figure__}(__multiplot_xi__,__multiplot_yi__) = j;
+    __plot_data_offset__{cf}(mxi,myi) = j;
+    __plot_line_offset__{cf}(mxi,myi) = loff;
 
     if (__multiplot_mode__)
       __gnuplot_raw__ ("clear\n");
     endif
-    if (! strcmp (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}, "__gnuplot_plot__"))
-      eval (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__});
+
+    if (! strcmp (__plot_command__{cf}{mxi,myi}, "__gnuplot_plot__"))
+      __do_legend__ ();
+      eval (__plot_command__{cf}{mxi,myi});
     endif
 
   else
     msg = sprintf ("%s (y)\n", caller);
     msg = sprintf ("%s       %s (x, y, ...)\n", msg, caller);
     msg = sprintf ("%s       %s (x, y, fmt, ...)", msg, caller);
     usage (msg);
   endif
diff --git a/scripts/plot/__pltopt1__.m b/scripts/plot/__pltopt1__.m
--- a/scripts/plot/__pltopt1__.m
+++ b/scripts/plot/__pltopt1__.m
@@ -22,31 +22,32 @@
 ## Really decode plot option strings.
 ## @seealso{__pltopt__}
 ## @end deftypefn
 
 ## Author: Rick Niles <niles@axp745.gsfc.nasa.gov>
 ## Adapted-By: jwe
 ## Maintainer: jwe
 
-function fmt = __pltopt1__ (caller, opt)
+function [fmt, keystr] = __pltopt1__ (caller, opt)
 
   set_color = 0;
   set_symbol = 0;
   set_lines = 0;
   set_dots = 0;
   set_points = 0;
   set_impulses = 0;
   set_steps = 0;
   set_boxes = 0;
   set_yerrbars = 0;
   set_xerrbars = 0;
   set_linestyle = "solid";
 
-  key_title = "";
+  fmt = "";
+  keystr = "";
 
   more_opts = 1;
 
   WITH = "w";
   LINES = "l";
   LINESPOINTS = "linesp";
   BOXERRORBARS = "boxer";
   BOXES = "boxes";
@@ -60,17 +61,17 @@ function fmt = __pltopt1__ (caller, opt)
   XYERRORBARS = "xyerr";
   TITLE = "title";
 
   if (nargin != 2)
     print_usage ();
   endif
 
   if (! ischar (opt))
-    error ("__pltopt1__: argument must be a string");
+    return;
   endif
 
   while (more_opts)
 
     ## First get next char.
 
     if (max (size (opt)) > 1)
       ## [char, opt] = sscanf (opt, "%c %s", "C");
@@ -184,24 +185,20 @@ function fmt = __pltopt1__ (caller, opt)
             error ("%s: unfinished key label", caller);
           endif
           more_opts = 0;
           working = 0;
         endif
         if strcmp (char, ";")
           working = 0;
         else
-          if (isempty (key_title))  # needs this to avoid empty matrix warning.
-            key_title = char;
-          else
-            key_title = strcat (key_title, char);
-          endif
+          keystr = strcat (keystr, char);
         endif
       endwhile
-      key_title = undo_string_escapes (key_title);
+      keystr = undo_string_escapes (keystr);
     elseif (strcmp (char, " "))
     elseif (isempty(char))
       ## whitespace -- do nothing.
     else
       error ("%s: unrecognized format character: '%s'", caller, char);
     endif
   endwhile
 
@@ -253,11 +250,9 @@ function fmt = __pltopt1__ (caller, opt)
     fmt = strcat (fmt, " ", color);
     if (set_symbol)
       fmt = strcat (fmt, " ", symbol);
     endif
   elseif (set_symbol)
     fmt = strcat (fmt, " 1 ", symbol);
   endif
 
-  fmt = sprintf ("%s %s \"%s\" ", fmt, TITLE, key_title);
-
 endfunction
diff --git a/scripts/plot/__pltopt__.m b/scripts/plot/__pltopt__.m
--- a/scripts/plot/__pltopt__.m
+++ b/scripts/plot/__pltopt__.m
@@ -103,22 +103,33 @@
 ##   5    cyan      cyan        dot long dash  triangle    filled square
 ##   6    brown     yellow      dot short dash  "*"         "o"
 ## @end example
 ## @seealso{__pltopt1__}
 ## @end deftypefn
 
 ## Author: jwe
 
-function fmt = __pltopt__ (caller, opt)
+function [fmt, keystr] = __pltopt__ (caller, opt)
 
-  if (! ischar (opt))
+  if (nargin == 2 && nargout == 2)
+    if (ischar (opt))
+      nel = rows (opt);
+    elseif (iscellstr (opt))
+      nel = numel (opt);
+    else
+      error ("__pltopt__: expecting argument to be character string or cell array of character strings");
+    endif
+    fmt = cell (nel, 1);
+    keystr = cell (nel, 1);
+    if (ischar (opt))
+      opt = cellstr (opt);
+    endif
+    for i = 1:nel
+      [tfmt, tkey]  = __pltopt1__ (caller, opt{i});
+      fmt{i} = tfmt;
+      keystr{i} = tkey;
+    endfor
+  else
     print_usage ();
   endif
 
-  nr = rows (opt);
-  fmt = "";
-  for i = 1:nr
-    t = __pltopt1__ (caller, deblank (opt(i,:)));
-    fmt(i,1:length(t)) = t;
-  endfor
-
 endfunction
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -37,39 +37,34 @@ function contour (x, y, z, n)
   if (nargin == 1 || nargin == 2)
     z = x;
     if (nargin == 1) 
       n = 10;
     else
       n = y; 
     endif
     if (ismatrix (z))
-      unwind_protect
-	__gnuplot_raw__ ("set nosurface;\n");
-	__gnuplot_raw__ ("set contour;\n");
-	__gnuplot_raw__ ("set cntrparam bspline;\n");
-	if (isscalar (n))
-          command = sprintf ("set cntrparam levels %d;\n", n);
-	elseif (isvector (n))
-          tmp = sprintf ("%f", n(1));
-          for i = 2:length (n)
-            tmp = sprintf ("%s, %f", tmp, n(i));
-          endfor
-          command = sprintf ("set cntrparam levels discrete %s;\n", tmp);
-	else
-	  error ("contour: levels must be a scalar or vector") ;
-	endif
-	__gnuplot_raw__ (command);
-	__gnuplot_set__ parametric;
-	__gnuplot_raw__ ("set view 0, 0, 1, 1;\n");
-	__plt3__ (z, "", "", [gnuplot_command_with, " l 1"]);
-      unwind_protect_cleanup
-	__gnuplot_set__ noparametric;
-      end_unwind_protect
-
+      __gnuplot_raw__ ("set nosurface;\n");
+      __gnuplot_raw__ ("set contour;\n");
+      __gnuplot_raw__ ("set cntrparam bspline;\n");
+      if (isscalar (n))
+	command = sprintf ("set cntrparam levels %d;\n", n);
+      elseif (isvector (n))
+	tmp = sprintf ("%f", n(1));
+	for i = 2:length (n)
+	  tmp = sprintf ("%s, %f", tmp, n(i));
+	endfor
+	command = sprintf ("set cntrparam levels discrete %s;\n", tmp);
+      else
+	error ("contour: levels must be a scalar or vector") ;
+      endif
+      __gnuplot_raw__ (command);
+      __gnuplot_set__ parametric;
+      __gnuplot_raw__ ("set view 0, 0, 1, 1;\n");
+      __plt3__ (z, "", "", "", [gnuplot_command_with, " l 1"]);
     else
       error ("contour: z of contour (z, levels) must be a matrix");
     endif
   elseif (nargin == 3 || nargin == 4)
     if (nargin == 3)
       n = 10;
     endif
     if (ismatrix (z))
@@ -102,38 +97,34 @@ function contour (x, y, z, n)
 	  zz = zeros (z_size(2), nc);
 	  zz(:,1:3:nc) = x';
 	  zz(:,2:3:nc) = y';
 	  zz(:,3:3:nc) = z';
 	else
 	  error (size_msg);
 	endif
       endif
-      unwind_protect
-	__gnuplot_raw__ ("set nosurface;\n");
-	__gnuplot_raw__ ("set contour;\n");
-	__gnuplot_raw__ ("set cntrparam bspline;\n");
-	if (isscalar (n))
-          command = sprintf ("set cntrparam levels %d;\n", n);
-	elseif (isvector (n))
-          tmp = sprintf ("%f", n(1));
-          for i = 2:length (n)
-            tmp = sprintf ("%s, %f", tmp, n(i));
-          endfor
-          command = sprintf ("set cntrparam levels discrete %s;\n", tmp);
-	else
-	  error ("contour: levels must be a scalar or vector") ;
-	endif
-	__gnuplot_raw__ (command);
-	__gnuplot_set__ parametric;
-	__gnuplot_raw__ ("set view 0, 0, 1, 1;\n");
-	__plt3__ (zz, "", "", [gnuplot_command_with, " l 1"]);
-      unwind_protect_cleanup
-	__gnuplot_set__ noparametric;
-      end_unwind_protect
+      __gnuplot_raw__ ("set nosurface;\n");
+      __gnuplot_raw__ ("set contour;\n");
+      __gnuplot_raw__ ("set cntrparam bspline;\n");
+      if (isscalar (n))
+	command = sprintf ("set cntrparam levels %d;\n", n);
+      elseif (isvector (n))
+	tmp = sprintf ("%f", n(1));
+	for i = 2:length (n)
+	  tmp = sprintf ("%s, %f", tmp, n(i));
+	endfor
+	command = sprintf ("set cntrparam levels discrete %s;\n", tmp);
+      else
+	error ("contour: levels must be a scalar or vector") ;
+      endif
+      __gnuplot_raw__ (command);
+      __gnuplot_set__ parametric;
+      __gnuplot_raw__ ("set view 0, 0, 1, 1;\n");
+      __plt3__ (zz, "", "", "", [gnuplot_command_with, " l 1"]);
     else
       error ("contour: x and y must be vectors and z must be a matrix");
     endif
   else
     print_usage ();
   endif
 
 endfunction
diff --git a/scripts/plot/legend.m b/scripts/plot/legend.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/legend.m
@@ -0,0 +1,160 @@
+## Copyright (C) 2001 Laurent Mazet
+## Copyright (C) 2006 John W. Eaton
+##
+## This program is free software; it is distributed in the hope that it
+## will be useful, but WITHOUT ANY WARRANTY; without even the implied
+## warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
+## the GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with this file; see the file COPYING.  If not, write to the
+## Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA
+## 02111-1307, USA.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {} legend (@var{st1}, @var{st2}, @var{st3}, @var{...})
+## @deftypefnx {Function File} {} legend (@var{st1}, @var{st2}, @var{st3}, @var{...}, @var{pos})
+## @deftypefnx {Function File} {} legend (@var{matstr})
+## @deftypefnx {Function File} {} legend (@var{matstr}, @var{pos})
+## @deftypefnx {Function File} {} legend (@var{cell})
+## @deftypefnx {Function File} {} legend (@var{cell}, @var{pos})
+## @deftypefnx {Function File} {} legend ('@var{func}')
+##
+## Legend puts a legend on the current plot using the specified strings
+## as labels. Use independant strings (@var{st1}, @var{st2}, @var{st3}...), a
+## matrix of strings (@var{matstr}), or a cell array of strings (@var{cell}) to
+## specify legends. Legend works on line graphs, bar graphs, etc...
+## Be sure to call plot before calling legend.
+##
+## @var{pos} optionally  places the legend in the specified location:
+##
+## @multitable @columnfractions 0.1 0.1 0.8
+## @item @tab 0 @tab
+##   Don't move the legend box (default)
+## @item @tab 1 @tab
+##   Upper right-hand corner
+## @item @tab 2 @tab
+##   Upper left-hand corner
+## @item @tab 3 @tab
+##   Lower left-hand corner
+## @item @tab 4 @tab
+##   Lower right-hand corner
+## @item @tab -1 @tab
+##   To the top right of the plot
+## @item @tab -2 @tab
+##   To the bottom right of the plot
+## @item @tab -3 @tab
+##   To the bottom of the plot
+## @item @tab [@var{x}, @var{y}] @tab
+##   To the arbitrary postion in plot [@var{x}, @var{y}]
+## @end multitable
+##
+## Some specific functions are directely avaliable using @var{func}:
+##
+## @table @code
+## @item show
+##   Show legends from the plot
+## @item hide
+## @itemx off
+##   Hide legends from the plot
+## @item boxon
+##   Draw a box around legends
+## @item boxoff
+##   Withdraw the box around legends
+## @item left
+##   Text is to the left of the keys
+## @item right
+##   Text is to the right of the keys
+## @end table
+## @end deftypefn
+
+## PKG_ADD mark_as_command legend
+
+function legend (varargin)
+
+  __plot_globals__;
+
+  cf = __current_figure__;
+  mxi = __multiplot_xi__;
+  myi = __multiplot_yi__;
+
+  nargs = nargin;
+
+  if (nargs > 0)
+    pos = varargin{nargs};
+    if (isnumeric (pos) && isscalar (pos) && round (pos) == pos)
+      if (pos >= -3 && pos <= 4)
+	__plot_key_properties__{cf}{mxi,myi}.position = pos;
+	nargs--;
+      else
+	error ("legend: invalid position specified");
+      endif
+    endif
+  endif
+
+  if (nargs == 1)
+    arg = varargin{1};
+    if (ischar (arg))
+      if (rows (arg) == 1)
+	str = tolower (deblank (arg));
+	switch (str)
+	  case {"off", "hide"}
+	    __plot_key_properties__{cf}{mxi,myi}.visible = false;
+	  case "show"
+	    __plot_key_properties__{cf}{mxi,myi}.visible = true;
+	  case "toggle"
+	    __plot_key_properties__{cf}{mxi,myi}.visible ...
+	      = ! __plot_key_properties__{cf}{mxi,myi}.visible;
+	  case "boxon"
+	    __plot_key_properties__{cf}{mxi,myi}.visible = true;
+	    __plot_key_properties__{cf}{mxi,myi}.box = true;
+	  case "boxoff"
+	    __plot_key_properties__{cf}{mxi,myi}.box = false;
+	  otherwise
+	    __plot_key_labels__{cf}{mxi,myi}{1} = arg;
+	endswitch
+	nargs--;
+      else
+	varargin = cellstr (arg);
+	nargs = numel (vargin);
+      endif
+    elseif (iscellstr (arg))
+      varargin = arg;
+      nargs = numel (varargin);
+    else
+      error ("legend: expecting argument to be a character string");
+    endif
+  endif
+
+  for i = 1:nargs
+    arg = varargin{i};
+    if (ischar (arg))
+      __plot_key_labels__{cf}{mxi,myi}{i} = arg;
+    else
+      error ("legend: expecting argument to be a character string");
+    endif
+  endfor
+
+  if (automatic_replot)
+    replot ();
+  endif
+
+endfunction
+
+%!demo
+%! close all;
+%! plot(1:10, 1:10);
+%! title("a very long label can sometimes cause problems");
+%! legend({"hello world"}, -1)
+
+%!demo
+%! close all;
+%! labels = {};
+%! for i = 1:5
+%!     plot(1:100, i + rand(100,1)); hold on;
+%!     labels = {labels{:}, strcat("Signal ", num2str(i))};
+%! endfor; hold off;
+%! title("Signals with random offset and uniform noise")
+%! xlabel("Sample Nr [k]"); ylabel("Amplitude [V]");
+%! legend(labels, -1)
+%! legend("boxon")
diff --git a/scripts/plot/mesh.m b/scripts/plot/mesh.m
--- a/scripts/plot/mesh.m
+++ b/scripts/plot/mesh.m
@@ -62,30 +62,26 @@ function mesh (x, y, z)
         zz = zeros (ylen, len);
         k = 1;
         for i = 1:3:len
           zz(:,i)   = x(k) * ones (ylen, 1);
           zz(:,i+1) = y;
           zz(:,i+2) = z(:,k);
           k++;
         endfor
-	unwind_protect
-          __gnuplot_raw__ ("set hidden3d;\n");
-          __gnuplot_raw__ ("set data style lines;\n");
-          __gnuplot_raw__ ("set surface;\n");
-          __gnuplot_raw__ ("set nocontour;\n");
-          __gnuplot_raw__ ("set nologscale;\n");
-          __gnuplot_set__ parametric;
-          __gnuplot_raw__ ("set view 60, 30, 1, 1;\n");
-          __gnuplot_raw__ ("set palette defined (0 \"dark-blue\", 1 \"blue\", 2 \"cyan\", 3 \"yellow\", 4 \"red\" , 5 \"dark-red\");\n");
-          __gnuplot_raw__ ("set nocolorbox;\n");
-	  __plt3__ (zz, "", "", [gnuplot_command_with " line palette"]);
-	unwind_protect_cleanup
-	  __gnuplot_set__ noparametric;
-	end_unwind_protect
+	__gnuplot_raw__ ("set hidden3d;\n");
+	__gnuplot_raw__ ("set data style lines;\n");
+	__gnuplot_raw__ ("set surface;\n");
+	__gnuplot_raw__ ("set nocontour;\n");
+	__gnuplot_raw__ ("set nologscale;\n");
+	__gnuplot_set__ parametric;
+	__gnuplot_raw__ ("set view 60, 30, 1, 1;\n");
+	__gnuplot_raw__ ("set palette defined (0 \"dark-blue\", 1 \"blue\", 2 \"cyan\", 3 \"yellow\", 4 \"red\" , 5 \"dark-red\");\n");
+	__gnuplot_raw__ ("set nocolorbox;\n");
+	__plt3__ (zz, "", "", "", [gnuplot_command_with " line palette"]);
       else
         msg = "mesh: rows (z) must be the same as length (y) and";
         msg = sprintf ("%s\ncolumns (z) must be the same as length (x)", msg);
         error (msg);
       endif
     elseif (ismatrix (x) && ismatrix (y) && ismatrix (z))
       xlen = columns (z);
       ylen = rows (z);
@@ -95,27 +91,23 @@ function mesh (x, y, z)
         zz = zeros (ylen, len);
         k = 1;
         for i = 1:3:len
           zz(:,i)   = x(:,k);
           zz(:,i+1) = y(:,k);
           zz(:,i+2) = z(:,k);
           k++;
         endfor
-	unwind_protect
-          __gnuplot_raw__ ("set data style lines;\n");
-          __gnuplot_raw__ ("set surface;\n");
-          __gnuplot_raw__ ("set nocontour;\n");
-          __gnuplot_raw__ ("set nologscale;\n");
-          __gnuplot_set__ parametric;
-          __gnuplot_raw__ ("set view 60, 30, 1, 1;\n");
-          __plt3__ (zz, "");
-	unwind_protect_cleanup
-	  __gnuplot_set__ noparametric;
-	end_unwind_protect
+	__gnuplot_raw__ ("set data style lines;\n");
+	__gnuplot_raw__ ("set surface;\n");
+	__gnuplot_raw__ ("set nocontour;\n");
+	__gnuplot_raw__ ("set nologscale;\n");
+	__gnuplot_set__ parametric;
+	__gnuplot_raw__ ("set view 60, 30, 1, 1;\n");
+	__plt3__ (zz, "");
       else
         error ("mesh: x, y, and z must have same dimensions");
       endif
     else
       error ("mesh: x and y must be vectors and z must be a matrix");
     endif
   else
     print_usage ();
diff --git a/scripts/plot/plot3.m b/scripts/plot/plot3.m
--- a/scripts/plot/plot3.m
+++ b/scripts/plot/plot3.m
@@ -54,17 +54,17 @@
 ## and @var{z} values, and they are plotted versus their index.
 ##
 ## To save a plot, in one of several image formats such as PostScript
 ## or PNG, use the @code{print} command.
 ##
 ## An optional format argument can be given as
 ##
 ## @example
-## plot3 (@var{x}, @var{y}, @var{y}, @var{fmt})
+## plot3 (@var{x}, @var{y}, @var{z}, @var{fmt})
 ## @end example
 ##
 ## If the @var{fmt} argument is supplied, it is interpreted as
 ## follows.  If @var{fmt} is missing, the default gnuplot line style
 ## is assumed.
 ##
 ## @table @samp
 ## @item -
@@ -127,17 +127,17 @@
 ## To do so, include the desired title between semi-colons after the
 ## formatting sequence described above, e.g. "+3;Key Title;"
 ## Note that the last semi-colon is required and will generate an error if
 ## it is left out.
 ##
 ## Arguments can also be given in groups of three as
 ##
 ## @example
-## plot3 (@var{x1}, @var{y1}, @var{y1}, @var{x2}, @var{y2}, @var{y2}, @dots{})
+## plot3 (@var{x1}, @var{y1}, @var{z1}, @var{x2}, @var{y2}, @var{z2}, @dots{})
 ## @end example
 ## 
 ## @noindent
 ## where each set of three arguments is treated as a seperate line or
 ## set of lines in three dimensions.
 ##
 ## To plot multiple one- or two-argument groups, separate each group with an
 ## empty format string, as
@@ -194,17 +194,17 @@ function plot3 (varargin)
 	      endif
 	    endif
 	  else
 	    z = imag (y);
 	    y = real (y);
 	    z_set = 1;
 	  endif
 	endif
-	fmt = __pltopt__ ("plot3", new);
+	[fmt, key] = __pltopt__ ("plot3", new);
 
 	if (isvector (x) && isvector (y))
 	  if (isvector (z))
 	    x = x(:);
 	    y = y(:);
 	    z = z(:);
 	  elseif (length (x) == rows (z) && length (y) == columns (z))
 	    error ("plot3: [length(x), length(y)] must match size(z)");
@@ -212,28 +212,23 @@ function plot3 (varargin)
 	    [x, y] = meshgrid (x, y);
 	  endif
 	endif
 
 	if (any (size (x) != size (y)) || any (size (x) != size (z)))
 	  error ("plot3: x, y, and z must have the same shape");
 	endif
 
-	unwind_protect
-          __gnuplot_raw__ ("set nohidden3d;\n")
-	  __gnuplot_set__ parametric; 
+	__gnuplot_raw__ ("set nohidden3d;\n")
+	__gnuplot_set__ parametric; 
 
-	  __plt3__ ([([x; NaN*ones(1,size(x,2))])(:), ...
-		   ([y; NaN*ones(1,size(y,2))])(:), ...
-		   ([z; NaN*ones(1,size(z,2))])(:)],
-		    "u($1):($2):($3)", fmt);
-
-	unwind_protect_cleanup
-	  __gnuplot_set__ noparametric; 
-	end_unwind_protect
+	__plt3__ ([([x; NaN*ones(1,size(x,2))])(:), ...
+		 ([y; NaN*ones(1,size(y,2))])(:), ...
+		 ([z; NaN*ones(1,size(z,2))])(:)],
+		  "u($1):($2):($3)", fmt{1}, key{1});
 
 	hold ("on");
 	x_set = 0;
 	y_set = 0;
 	z_set = 0;
       elseif (! x_set)
 	x = new;
 	x_set = 1;
@@ -255,27 +250,22 @@ function plot3 (varargin)
 	    [x, y] = meshgrid (x, y);
 	  endif
 	endif
 
 	if (any (size (x) != size (y)) || any (size (x) != size (z)))
 	  error ("plot3: x, y, and z must have the same shape");
 	endif
 
-	unwind_protect
-          __gnuplot_raw__ ("set nohidden3d;\n")
-	  __gnuplot_set__ parametric; 
+	__gnuplot_raw__ ("set nohidden3d;\n")
+	__gnuplot_set__ parametric; 
 
-	  __plt3__ ([([x; NaN*ones(1,size(x,2))])(:), ...
-		     ([y; NaN*ones(1,size(y,2))])(:), ...
-		     ([z; NaN*ones(1,size(z,2))])(:)]);
-
-	unwind_protect_cleanup
-	  __gnuplot_set__ noparametric; 
-	end_unwind_protect
+	__plt3__ ([([x; NaN*ones(1,size(x,2))])(:), ...
+		   ([y; NaN*ones(1,size(y,2))])(:), ...
+		   ([z; NaN*ones(1,size(z,2))])(:)]);
 
 	hold ("on");
 	x = new;
 	y_set = 0;
 	z_set = 0;
       endif
        
     endfor
@@ -312,26 +302,22 @@ function plot3 (varargin)
 	  [x, y] = meshgrid (x, y);
 	endif
       endif
 
       if (any (size (x) != size (y)) || any (size (x) != size (z)))
 	error ("plot3: x, y, and z must have the same shape");
       endif
 
-      unwind_protect
-        __gnuplot_raw__ ("set nohidden3d;\n")
-	__gnuplot_set__ parametric; 
+      __gnuplot_raw__ ("set nohidden3d;\n")
+      __gnuplot_set__ parametric; 
 
-	__plt3__ ([([x; NaN*ones(1,size(x,2))])(:), ...
-		   ([y; NaN*ones(1,size(y,2))])(:), ...
-		   ([z; NaN*ones(1,size(z,2))])(:)]);
-      unwind_protect_cleanup
-	__gnuplot_set__ noparametric; 
-      end_unwind_protect
+      __plt3__ ([([x; NaN*ones(1,size(x,2))])(:), ...
+		 ([y; NaN*ones(1,size(y,2))])(:), ...
+		 ([z; NaN*ones(1,size(z,2))])(:)]);
     endif
     
   unwind_protect_cleanup
     
     if (! hold_state)
       hold ("off");
     endif
     
diff --git a/scripts/plot/replot.m b/scripts/plot/replot.m
--- a/scripts/plot/replot.m
+++ b/scripts/plot/replot.m
@@ -14,29 +14,30 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} replot ()
-## Refressh the plot window.
+## Refresh the plot window.
 ## @end deftypefn
 
 ## Author: jwe
 
 function replot ()
 
   __plot_globals__;
 
   if (nargin == 0)
     if (! isempty (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__}))
       if (__multiplot_mode__)
 	__gnuplot_raw__ ("clear\n");
       endif
+      __do_legend__ ();
       eval (__plot_command__{__current_figure__}{__multiplot_xi__,__multiplot_yi__});
     endif
   else
     print_usage ();
   endif
 
 endfunction
