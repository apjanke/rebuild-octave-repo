# HG changeset patch
# User jwe
# Date 1154020574 0
#      Thu Jul 27 17:16:14 2006 +0000
# Node ID 9c134531c2c45f48f79caf133ff3805db202ca24
# Parent  288c341438f9a821a36f18c48cf8e75abf1c291b
[project @ 2006-07-27 17:14:24 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2006-07-27  John W. Eaton  <jwe@octave.org>
+
+	* testfun/test.m: Call fflush after each block of calls to
+	fprintf, fputs, or fdisp.
+
 2006-07-26  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/mex.m: New function.
 
 2006-07-22  John W. Eaton  <jwe@octave.org>
 
 	* special-matrix/hadamard.m: Coerce bool matrix to double.
 
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -100,16 +100,17 @@ function [__ret1, __ret2] = test (__name
   __close_fid = 0;
   if (__batch)
     if (ischar(__fid))
       __fid = fopen(__fid, "wt");
       if __fid < 0, error("could not open log file"); endif
       __close_fid = 1;
     endif
     fprintf (__fid, "%sprocessing %s\n", __signal_file, __name);
+    fflush (__fid);
   else
     __fid = stdout;
   endif
 
   if (strcmp(__flag, "normal"))
     __grabdemo = 0;
     __rundemo = 0;
     __verbose = __batch;
@@ -132,16 +133,17 @@ function [__ret1, __ret2] = test (__name
     fprintf (__fid, "# %s no tests in file\n",__signal_empty);
     fprintf (__fid, "# %s test had an unexpected result\n",__signal_fail);
     fprintf (__fid, "# %s code for the test\n",__signal_block);
     fprintf (__fid, "# Search for the unexpected results in the file\n");
     fprintf (__fid, "# then page back to find the file name which caused it.\n");
     fprintf (__fid, "# The result may be an unexpected failure (in which\n");
     fprintf (__fid, "# case an error will be reported) or an unexpected\n");
     fprintf (__fid, "# success (in which case no error will be reported).\n");
+    fflush (__fid);
     if (__close_fid) fclose(__fid); endif
     return;
   else
     error("test unknown flag '%s'", __flag);
   endif
 
   ## locate the file to test
   __file = file_in_loadpath (__name);
@@ -152,31 +154,33 @@ function [__ret1, __ret2] = test (__name
     __file = file_in_loadpath ([__name, ".cc"]);
   endif
   if (isempty (__file))
     if (__grabdemo)
       __ret1 = "";
       __ret2 = [];
     else
       fprintf(__fid, "%s%s does not exist in path\n", __signal_empty, __name);
+      fflush (__fid);
       if (nargout > 0) __ret1 = __ret2 = 0; endif
     endif
     if (__close_fid) fclose(__fid); endif
     return;
   endif
 
   ## grab the test code from the file
   __body = __extract_test_code (__file);
 
   if (isempty (__body))
     if (__grabdemo)
       __ret1 = "";
       __ret2 = [];
     else
       fprintf(__fid, "%s%s has no tests available\n", __signal_empty, __file);
+      fflush (__fid);
       if (nargout > 0) __ret1 = __ret2 = 0; endif
     endif
     if (__close_fid) fclose(__fid); endif
     return;
   else
     ## add a dummy comment block to the end for ease of indexing
     if (__body (length(__body)) == "\n")
       __body = sprintf("\n%s#", __body); 
@@ -205,16 +209,17 @@ function [__ret1, __ret2] = test (__name
   for __i=1:length(__blockidx)-1
 
     ## extract the block
     __block = __body(__blockidx(__i):__blockidx(__i+1)-2);
 
     ## let the user/logfile know what is happening
     if (__verbose)
       fprintf (__fid, "%s%s\n", __signal_block, __block);
+      fflush (__fid);
     endif
 
     ## split __block into __type and __code
     __idx = find(!isletter(__block));
     if (isempty(__idx))
       __type = __block;
       __code = "";
     else
@@ -419,22 +424,25 @@ function [__ret1, __ret2] = test (__name
       clear __test__;
     endif
     
     ## All done.  Remember if we were successful and print any messages
     if (!isempty(__msg))
       ## make sure the user knows what caused the error
       if (!__verbose)
       	fprintf (__fid, "%s%s\n", __signal_block, __block);
+	fflush (__fid);
       endif
       fputs (__fid, __msg);
+      fflush (__fid);
       ## show the variable context
-      if !strcmp(__type, "error") && !all(__shared==" ")
+      if (!strcmp(__type, "error") && !all(__shared==" "))
 	fputs(__fid, "shared variables ");
 	eval (sprintf("fdisp(__fid,bundle(%s));", __shared)); 
+	fflush (__fid);
       endif
     endif
     if (__success == 0)
       __all_success = 0;
       	## stop after one error if not in batch mode
       if (!__batch)
     	if (nargout > 0) __ret1 = __ret2 = 0; endif
 	if (__close_fid) fclose(__fid); endif
