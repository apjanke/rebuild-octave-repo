# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1533461046 -7200
#      Sun Aug 05 11:24:06 2018 +0200
# Branch stable
# Node ID 092bb49b69624457e9b60c5f7b8711712e848311
# Parent  c799c0dbe0b5ed0b9375c2a8606c48d744f8e352
Fix initial bracketing for fzero (bug #54445).

* fzero.m: fix initial bracketing when x0 is zero.

diff --git a/scripts/optimization/fzero.m b/scripts/optimization/fzero.m
--- a/scripts/optimization/fzero.m
+++ b/scripts/optimization/fzero.m
@@ -147,17 +147,21 @@ function [x, fval, info, output] = fzero
   if (length (x0) > 1)
     b = x0(2);
     fb = fun (b);
     nfev += 1;
   else
     ## Try to find a value for b which brackets a zero-crossing
 
     ## For very small values, switch to absolute rather than relative search
-    ifelse (abs (a) < .001, aa = sign (a) * 0.1, aa = a);
+    if (abs (a) < .001)
+      aa = ifelse (a == 0, 0.1, sign (a) * 0.1);
+    else
+      aa = a;
+    endif
     ## Search in an ever-widening range around the initial point.
     for srch = [-.01 +.025 -.05 +.10 -.25 +.50 -1 +2.5 -5 +10 -50 +100 -500 +1000]
       b = aa + aa*srch;
       fb = fun (b);
       nfev += 1;
       if (sign (fa) * sign (fb) <= 0)
         break;
       endif
@@ -368,8 +372,10 @@ function fx = guarded_eval (fun, x)
   endif
 endfunction
 
 
 %!shared opt0
 %! opt0 = optimset ("tolx", 0);
 %!assert (fzero (@cos, [0, 3], opt0), pi/2, 10*eps)
 %!assert (fzero (@(x) x^(1/3) - 1e-8, [0,1], opt0), 1e-24, 1e-22*eps)
+%!assert <*54445> (fzero (@ (x) x, 0), 0)
+%!assert <*54445> (fzero (@ (x) x + 1, 0), -1)
