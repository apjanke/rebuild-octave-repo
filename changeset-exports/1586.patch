# HG changeset patch
# User jwe
# Date 815117080 0
#      Tue Oct 31 05:24:40 1995 +0000
# Node ID 54350c98055c5443b45bb13195cab6b832b16d53
# Parent  100413a7e8a21e632739ea3232ba8fe982e9d67a
[project @ 1995-10-31 05:22:53 by jwe]

diff --git a/scripts/specfun/betai.m b/scripts/specfun/betai.m
--- a/scripts/specfun/betai.m
+++ b/scripts/specfun/betai.m
@@ -11,19 +11,19 @@
 # ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 # FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 # for more details.
 # 
 # You should have received a copy of the GNU General Public License
 # along with Octave; see the file COPYING.  If not, write to the Free
 # Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
-function y = betai(a, b, x)
+function y = betai (a, b, x)
   
-# usage: betai(a, b, x)
+# usage: betai (a, b, x)
 #
 # Returns the incomplete beta function
 #   betai (a, b, x) = BETA(a,b)^(-1) INT_0^x t^(a-1) (1-t)^(b-1) dt.
 # If x has more than one component, both a and b must be scalars.
 # If x is a scalar, a and b must be of compatible dimensions.
   
 # Written by KH (Kurt.Hornik@ci.tuwien.ac.at) on Aug 2, 1994.
 
@@ -32,28 +32,28 @@ function y = betai(a, b, x)
 #     = \frac{1}{B(a, b)} x^a 
 #         \sum_{k=0}^\infty \frac{(1-b)\cdots(k-b)}{a+k} \frac{x^k}{k!}
 # for x <= 1/2.  For x > 1/2, betai(a, b, x) = 1 - betai(b, a, 1-x).
 
   if (nargin <> 3)
     usage (" betai (a, b, x)");
   endif
 
-  if !((a > 0) && (b > 0))
-    error("betai:  a and b must both be positive.");
+  if (! (a > 0 && b > 0))
+    error ("betai: a and b must both be positive");
   endif
-  [nr, nc] = size(x);
+  [nr, nc] = size (x);
   if (min ([nr, nc]) == 0)
-    error ("betai:  x must not be empty.");
+    error ("betai: x must not be empty.");
   endif
   if (any (x < 0) || any (x > 1))
     error ("betai: all entries of x must be in [0,1].");
   endif
 
-  if ((nr > 1) || (nc > 1))
+  if (nr > 1 || nc > 1)
     
     if (! (is_scalar (a) && is_scalar (b)))
       error ("betai: if x is not a scalar, a and b must be scalars");
     endif
 
     n = nr * nc;
     x = reshape (x, 1, n);
     y = zeros (1, n);
diff --git a/scripts/specfun/gammai.m b/scripts/specfun/gammai.m
--- a/scripts/specfun/gammai.m
+++ b/scripts/specfun/gammai.m
@@ -75,40 +75,42 @@ function y = gammai (a, x)
   
   if (any (a <= 0) || any (a == Inf))
     error ("gammai: all entries of a must be positive anf finite");
   endif
   if (any (x < 0))
     error ("gammai: all entries of x must be nonnegative");
   endif
   
-  y = zeros(1, n);
+  y = zeros (1, n);
 
 # For x < a + 1, use summation.  The below choice of k should ensure
 # that the overall error is less than eps ... 
 
   S = find ((x > 0) & (x < a + 1));
   s = length (S);
   if (s > 0)
     k   = ceil (- max ([a(S), x(S)]) * log (eps));
     K   = (1:k)';
-    M   = ones(k, 1);
-    A   = cumprod((M * x(S)) ./ (M * a(S) + K * ones(1, s)));
+    M   = ones (k, 1);
+    A   = cumprod ((M * x(S)) ./ (M * a(S) + K * ones(1, s)));
     y(S) = exp (-x(S) + a(S) .* log (x(S))) .* (1 + sum (A)) ./ gamma (a(S)+1);
   endif
 
 # For x >= a + 1, use the continued fraction.
 # Note, however, that this converges MUCH slower than the series
 # expansion for small a and x not too large!
 
-  S = find((x >= a + 1) & (x < Inf));
-  s = length(S);
+  S = find ((x >= a + 1) & (x < Inf));
+  s = length (S);
   if (s > 0)
-    u   = [zeros(1, s); ones(1, s)];
-    v   = [ones(1, s); x(S)];
+    t1 = zeros (1, s);
+    t2 = ones (1, s);
+    u   = [t1; t2];
+    v   = [t2; x(S)];
     c_old = 0;
     c_new = v(1,:) ./ v(2,:);
     n   = 1;
     while (max (abs (c_old ./ c_new - 1)) > 10 * eps)
       c_old = c_new;
       u = v + u .* (ones (2, 1) * (n - a(S)));
       v = u .* (ones (2, 1) * x(S)) + n * v;
       c_new = v(1,:) ./ v(2,:);
