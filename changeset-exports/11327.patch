# HG changeset patch
# User Marco Atzeri <marco_atzeri@yahoo.it>
# Date 1291875330 18000
#      Thu Dec 09 01:15:30 2010 -0500
# Node ID ef0e995f8c0ff9e0ac106c315efe36bf0f39bbcc
# Parent  f46aeb3ea6b764b43dc1b34e3f1724331094a4ec
correctly compute gamma for negative integer values when tgamma is available

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2010-12-09  Marco Atzeri  <marco_atzeri@yahoo.it>
+
+	* lo-specfun.cc (xgamma): Also handle negative integer values as
+	special cases when using tgamma.
+
 2010-11-25  John W. Eaton  <jwe@octave.org>
 
 	* Sparse.cc (Sparse<T>::assign): Use correct endpoint for
 	destination range when making room for new elements. 
 
 2010-11-23  John W. Eaton  <jwe@octave.org>
 
 	* oct-md5.cc (oct_md5_result_to_str): Avoid buffer overrun in
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -276,30 +276,30 @@ erfcf (float x)
   F77_XFCN (xerfc, XERFC, (x, retval));
   return retval;
 }
 #endif
 
 double
 xgamma (double x)
 {
-#if defined (HAVE_TGAMMA)
-  return tgamma (x);
-#else
   double result;
 
   if (xisnan (x))
     result = x;
   else if ((x <= 0 && D_NINT (x) == x) || xisinf (x))
     result = octave_Inf;
   else
+#if defined (HAVE_TGAMMA)
+    result = tgamma (x);
+#else
     F77_XFCN (xdgamma, XDGAMMA, (x, result));
+#endif
 
   return result;
-#endif
 }
 
 double
 xlgamma (double x)
 {
 #if defined (HAVE_LGAMMA)
   return lgamma (x);
 #else
@@ -341,30 +341,30 @@ rc_lgamma (double x)
     return result + Complex (0., M_PI);
   else
     return result;
 }
 
 float
 xgamma (float x)
 {
-#if defined (HAVE_TGAMMAF)
-  return tgammaf (x);
-#else
   float result;
 
   if (xisnan (x))
     result = x;
   else if ((x <= 0 && D_NINT (x) == x) || xisinf (x))
     result = octave_Float_Inf;
   else
+#if defined (HAVE_TGAMMAF)
+    result = tgammaf (x);
+#else
     F77_XFCN (xgamma, XGAMMA, (x, result));
+#endif
 
   return result;
-#endif
 }
 
 float
 xlgamma (float x)
 {
 #if defined (HAVE_LGAMMAF)
   return lgammaf (x);
 #else
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2010-12-09  Marco Atzeri   <marco_atzeri@yahoo.it>
+
+       * mappers.cc: In test for gamma, expect Inf for gamma(-1), not NaN.
+
 2010-12-08  John W. Eaton  <jwe@octave.org>
 
 	* graphics.h.in (base_property::do_set): Don't reverse order of
 	children.  Bug #31822.
 
 2010-12-08  John W. Eaton  <jwe@octave.org>
 
 	* symtab.cc (symbol_table::fcn_info::fcn_info_rep::find_user_function):
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -913,17 +913,17 @@ gamma (z) = | t^(z-1) exp (-t) dt.\n\
 
 %!test
 %! x = single([.5, 1, 1.5, 2, 3, 4, 5]);
 %! v = single([sqrt(pi), 1, .5*sqrt(pi), 1, 2, 6, 24]);
 %! assert(gamma(x), v, sqrt(eps('single')))
 
 %!test
 %! x = [-1, 0, 1, Inf];
-%! v = [NaN, Inf, 1, Inf];
+%! v = [Inf, Inf, 1, Inf];
 %! assert (gamma(x), v);
 %! assert (gamma(single (x)), single (v));
 
 %!error gamma();
 %!error gamma(1,2);
 
 */
 
