# HG changeset patch
# User jwe
# Date 1063058616 0
#      Mon Sep 08 22:03:36 2003 +0000
# Node ID 955cb1e87de201c20c1ba0c25d176dc66fe9d8be
# Parent  693ad5220d1e77da718480c21f658ecf04f7d755
[project @ 2003-09-08 22:03:36 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2003-09-08  D.  <dbateman@free.fr>
+
+	* OPERATORS/op-cs-s.cc (DEFBINOP): First arg is complex, second is
+	double.
+
 2003-09-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-cell.cc (tree_cell::rvalue): Don't assume that the number of
 	elements in a tree_argument_list is the same as the number of
 	objects it contains (cs-list objects expand to more than one).
 
 	* pt-mat.cc (tm_row_const::tm_row_const_rep::do_init_element):
 	New function, extracted from tm_row_const::tm_row_const_rep::init.
diff --git a/src/OPERATORS/op-cs-s.cc b/src/OPERATORS/op-cs-s.cc
--- a/src/OPERATORS/op-cs-s.cc
+++ b/src/OPERATORS/op-cs-s.cc
@@ -128,22 +128,22 @@ DEFBINOP (el_div, complex, scalar)
 }
 
 DEFBINOP_FN (el_pow, complex, scalar, xpow)
 
 DEFBINOP (el_ldiv, complex, scalar)
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_scalar&);
 
-  double d = v1.double_value ();
+  Complex d = v1.complex_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
-  return octave_value (v2.complex_value () / d);
+  return octave_value (v2.double_value () / d);
 }
 
 DEFBINOP (el_and, complex, scalar)
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_scalar&);
 
   return v1.complex_value () != 0.0 && v2.double_value ();
 }
