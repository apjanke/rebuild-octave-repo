# HG changeset patch
# User jwe
# Date 847343815 0
#      Thu Nov 07 05:16:55 1996 +0000
# Node ID 4de4cebed08851de626c06cc9b7354b372d7d2ee
# Parent  1d7925d6bede67cbe16036e8d58bfc0ee1873c23
[project @ 1996-11-07 05:16:19 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,12 @@
 Wed Nov  6 12:32:48 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pager.cc (do_sync): Don't call clear_external_pager here.
+
 	* pt-const.h (tree_constant::allocator) New static member.
 	(tree_constant::operator new, tree_constant::operator delete):
 	Implement with custom allocator.
 
 	* syscalls.cc (Fgetgid, Fgetegid): New functions.
 
 	* sighandlers.cc (sigchld_handler): If necessary, reinstall
 	handler after call to waitpid().
diff --git a/src/pager.cc b/src/pager.cc
--- a/src/pager.cc
+++ b/src/pager.cc
@@ -108,21 +108,20 @@ pager_death_handler (pid_t pid, int stat
 	  // Don't call error() here because we don't want to set
 	  // the error state.
 
 	  // XXX FIXME XXX -- something is wrong with the way that
 	  // we are cleaning up the pager in the event of a SIGCHLD.
 	  // If this message is printed with warning(), we eventually
 	  // crash.
 
-	  cout
-	    << "warning: connection to external pager (pid = "
-	    << pid << ") lost --" << endl
-	    << "warning: pending computations and output have been discarded"
-	    << endl;
+	  cout << "warning: connection to external pager (pid = "
+	       << pid << ") lost --" << endl
+	       << "warning: pending computations and output may be lost"
+	       << endl;
 	}
     }
 }
 
 static void
 do_sync (const char *msg, bool bypass_pager)
 {
   if (msg && *msg)
@@ -162,17 +161,16 @@ do_sync (const char *msg, bool bypass_pa
 		  // invoked since the last set of checks attempts
 		  // to flush output and then returns
 
 		  if (octave_pager_pid > 0
 		      && external_pager
 		      && external_pager->good ())
 		    external_pager->flush ();
 		}
-	      clear_external_pager ();
 	    }
 	  else
 	    cout << msg;
 	}
     }
 }
 
 static bool
