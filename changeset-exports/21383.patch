# HG changeset patch
# User Nicholas R. Jankowski <jankowskin@asme.org>
# Date 1456851633 28800
#      Tue Mar 01 09:00:33 2016 -0800
# Node ID c9f967cfe7c1b0119a7decdafe53d3147b7e368c
# Parent  eb7287db3da9a3d8b723ea72c347e5ba4eafbd4f
doc: Point user to dlmread/dlmwrite in csvread/csvwrite for dlmopts (bug #47309)

* csvread.m: Add note about dlmread options to docstring.

* csvwrite.m: Add note about dlmread options to docstring.

diff --git a/scripts/io/csvread.m b/scripts/io/csvread.m
--- a/scripts/io/csvread.m
+++ b/scripts/io/csvread.m
@@ -13,28 +13,30 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{x} =} csvread (@var{filename})
-## @deftypefnx {} {@var{x} =} csvread (@var{filename}, @var{dlm_opts})
+## @deftypefnx {} {@var{x} =} csvread (@var{filename}, @var{dlm_opt1}, @dots{})
 ## Read the comma-separated-value (CSV) file @var{filename} into the matrix
 ## @var{x}.
 ##
 ## Note: only CSV files containing numeric data can be read.
 ##
 ## This function is equivalent to
 ##
 ## @example
-## @var{x} = dlmread (@var{filename}, "," , @dots{})
+## @var{x} = dlmread (@var{filename}, "," , @var{dlm_opt1}, @dots{})
 ## @end example
 ##
+## Any optional arguments are passed directly to @code{dlmread}
+## (@pxref{XREFdlmread,,dlmread}).
 ## @seealso{dlmread, textread, textscan, csvwrite, dlmwrite}
 ## @end deftypefn
 
 function x = csvread (filename, varargin)
   x = dlmread (filename, ",", varargin{:});
 endfunction
 
 
diff --git a/scripts/io/csvwrite.m b/scripts/io/csvwrite.m
--- a/scripts/io/csvwrite.m
+++ b/scripts/io/csvwrite.m
@@ -13,26 +13,28 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} csvwrite (@var{filename}, @var{x})
-## @deftypefnx {} {} csvwrite (@var{filename}, @var{x}, @var{dlm_opts})
+## @deftypefnx {} {} csvwrite (@var{filename}, @var{x}, @var{dlm_opt1}, @dots{})
 ## Write the numeric matrix @var{x} to the file @var{filename} in
 ## @w{comma-separated-value} (CSV) format.
 ##
 ## This function is equivalent to
 ##
 ## @example
-## dlmwrite (@var{filename}, @var{x}, ",", @dots{})
+## dlmwrite (@var{filename}, @var{x}, ",", @var{dlm_opt1}, @dots{})
 ## @end example
 ##
+## Any optional arguments are passed directly to @code{dlmwrite}
+## (@pxref{XREFdlmwrite,,dlmwrite}).
 ## @seealso{csvread, dlmwrite, dlmread}
 ## @end deftypefn
 
 function csvwrite (filename, x, varargin)
   dlmwrite (filename, x, ",", varargin{:});
 endfunction
 
 
