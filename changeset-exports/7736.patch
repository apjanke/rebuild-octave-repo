# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1209150663 14400
#      Fri Apr 25 15:11:03 2008 -0400
# Node ID a059b5679fbbb2a19bd5a643f1f2671068631df7
# Parent  6848970153ba5e2e1b59284bd258d91abd2e0e96
implement dbstack

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2008-04-25  John W. Eaton  <jwe@octave.org>
+
+	* miscellaneous/dbstack.m: New function.
+	* miscellaneous/Makefile.in: Add it to the list.
+
 2008-04-21  David Bateman  <dbateman@free.fr>
 
 	* plot/__go_draw_axes__.m (gnuplot_position_colorbox): New arg, obj.
 	Change caller.  Improve sizing and position of colorbox for subplots.
 	* plot/colorbar.m: New demos.
 
 2008-04-16  Soren Hauberg  <hauberg@gmail.com>
 
diff --git a/scripts/miscellaneous/Makefile.in b/scripts/miscellaneous/Makefile.in
--- a/scripts/miscellaneous/Makefile.in
+++ b/scripts/miscellaneous/Makefile.in
@@ -30,17 +30,17 @@ VPATH = @srcdir@
 include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 SOURCES = ans.m bincoeff.m bug_report.m bunzip2.m cast.m comma.m \
   compare_versions.m computer.m copyfile.m \
-  delete.m dir.m doc.m dos.m dump_prefs.m edit.m \
+  dbstack.m delete.m dir.m doc.m dos.m dump_prefs.m edit.m \
   fileattrib.m fileparts.m flops.m fullfile.m getfield.m gunzip.m gzip.m \
   info.m inputname.m ismac.m ispc.m isunix.m license.m list_primes.m ls.m \
   ls_command.m menu.m mex.m mexext.m mkoctfile.m movefile.m \
   namelengthmax.m news.m orderfields.m pack.m paren.m parseparams.m perl.m\
   run.m semicolon.m setfield.m single.m substruct.m swapbytes.m tar.m \
   tempdir.m tempname.m texas_lotto.m unix.m unpack.m untar.m \
   unzip.m ver.m version.m warning_ids.m what.m xor.m zip.m
 
diff --git a/scripts/miscellaneous/dbstack.m b/scripts/miscellaneous/dbstack.m
new file mode 100644
--- /dev/null
+++ b/scripts/miscellaneous/dbstack.m
@@ -0,0 +1,56 @@
+## Copyright (C) 2008 John W. Eaton
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Loadable Function} {[@var{stack}, @var{idx}]} dbstack (@var{n})
+## Print or return current stack information.  With optional argument
+## @var{n}, omit the @var{n} innermost stack frames.
+## @seealso{dbclear, dbstatus, dbstop}
+## @end deftypefn
+
+## Author: jwe
+
+function [stack, idx] = dbstack (n = 0)
+
+  if (n < 0 || round (n) != n)
+    error ("dbstack: expecting N to be a non-negative integer");
+  endif
+
+  ## Add one here to skip the dbstack stack frame.
+  [t_stack, t_idx] = __dbstack__ (n+1);
+
+  if (nargout == 0)
+    nframes = numel (t_stack);
+    if (nframes > 0)
+      puts ("Stopped in:\n\n");
+      for i = 1:nframes
+	if (i == t_idx)
+	  puts ("--> ");
+	else
+	  puts ("    ");
+	endif
+	f = t_stack(i);
+	printf ("%s at line %d column %d\n", f.name, f.line, f.column);
+      endfor
+    endif
+  else
+    stack = t_stack;
+    idx = t_idx;
+  endif
+
+endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,33 @@
 2008-04-25  John W. Eaton  <jwe@octave.org>
 
+	* pt-stmt.h (tree_statement_list::function_body): New data member.
+	(tree_statement_list::tree_statement_list): Initialize it.
+	(tree_statement_list::mark_as_script_body): New function.
+	(tree_statement::maybe_echo_code, tree_statement::eval):
+	Rename in_function_body argument to in_function_or_script_body.
+	* pt-stmt.cc (tree_statement::eval): Only set statement in call
+	stack if in_function_or_script_body is true.
+
+	* pt-stmt.cc (tree_statement_list::eval): Call elt->eval with
+	function_body || script_body.
+	* ov-usr-fcn.cc (octave_user_script::octave_user_script):
+	command list as script body here.
+	(octave_user_function::octave_user_function):
+	Mark command list as function body here.
+	* parse.y (start_function, make_anon_fcn_handle): Not here.
+
+	* toplev.h, toplev.cc (octave_call_stack::backtrace,
+	octave_call_stack::do_backtrace): New arg, N.  Skip innermost N
+	stack frames.
+
+	* debug.cc (F__dbstack__): New function.
+	(current_stack_frame): New static variable.
+
 	* error.cc (verror, pr_where): Use octave_call_stack instead of
 	tree_statement stack to get line and column information.
 	(pr_where): Use octave_call_stack instead of tree_statement stack
 	to get current statement.
 	* input.cc (get_user_input): Extract current line number from
 	octave_call_stack instead of tree_statement_stack.
 	* pt-stmt.cc (tree_statement::eval): Put current statement on
 	octave_call_stack instead of tree_statement_stack.
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -24,17 +24,16 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #include <iostream>
 #include <fstream>
 #include <string>
 #include <set>
 
-
 #include "defun.h"
 #include "error.h"
 #include "help.h"
 #include "input.h"
 #include "pager.h"
 #include "oct-obj.h"
 #include "utils.h"
 #include "parse.h"
@@ -53,16 +52,19 @@ along with Octave; see the file COPYING.
 #include "unwind-prot.h"
 #include "variables.h"
 
 #include "debug.h"
 
 // Initialize the singleton object
 bp_table *bp_table::instance = 0;
 
+// FIXME --  dbup and dbdown will need to modify this variable.
+static int current_stack_frame = 1;
+
 // Return a pointer to the user-defined function FNAME.  If FNAME is
 // empty, search backward for the first user-defined function in the
 // current call stack.
 
 static octave_user_code *
 get_user_code (const std::string& fname = std::string ())
 {
   octave_user_code *dbg_fcn = 0;
@@ -688,13 +690,37 @@ List script file with line numbers.\n\
 	default:
 	  error ("dbtype: expecting zero, one, or two arguments\n");
 	}
     }
 
   return retval;
 }
 
+DEFUN (__dbstack__, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {[@var{stack}, @var{idx}]} __dbstack__ (@var{n})\n\
+Undocumented internal function.\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  int n = 0;
+
+  if (args.length () == 1)
+    n = args(0).int_value ();
+
+  if (! error_state)
+    {
+      retval(1) = current_stack_frame;
+
+      // Add one here to skip the __dbstack__ stack frame.
+      retval(0) = octave_call_stack::backtrace (n+1);
+    }
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -69,17 +69,20 @@ octave_user_script::octave_user_script (
 octave_user_script::octave_user_script (const std::string& fnm,
 					const std::string& nm,
 					tree_statement_list *cmds,
 					const std::string& ds)
   : octave_user_code (nm, ds), cmd_list (cmds), file_name (fnm),
     t_parsed (static_cast<time_t> (0)),
     t_checked (static_cast<time_t> (0)),
     call_depth (0)
-{ }
+{
+  if (cmd_list)
+    cmd_list->mark_as_script_body ();
+}
 
 octave_user_script::octave_user_script (const std::string& fnm,
 					const std::string& nm,
 					const std::string& ds)
   : octave_user_code (nm, ds), cmd_list (0), file_name (fnm), 
     t_parsed (static_cast<time_t> (0)),
     t_checked (static_cast<time_t> (0)),
     call_depth (0)
@@ -199,17 +202,20 @@ octave_user_function::octave_user_functi
     lead_comm (), trail_comm (), file_name (),
     parent_name (), t_parsed (static_cast<time_t> (0)),
     t_checked (static_cast<time_t> (0)),
     system_fcn_file (false), call_depth (0),
     num_named_args (param_list ? param_list->length () : 0),
     nested_function (false), inline_function (false),
     class_constructor (false), class_method (false), xdispatch_class (),
     args_passed (), num_args_passed (0), local_scope (sid)
-{ }
+{
+  if (cmd_list)
+    cmd_list->mark_as_function_body ();
+}
 
 octave_user_function::~octave_user_function (void)
 {
   delete param_list;
   delete ret_list;
   delete cmd_list;
   delete lead_comm;
   delete trail_comm;
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1766,18 +1766,16 @@ make_anon_fcn_handle (tree_parameter_lis
   symbol_table::set_scope (symtab_context.top ());
 
   symtab_context.pop ();
 
   stmt->set_print_flag (false);
 
   tree_statement_list *body = new tree_statement_list (stmt);
 
-  body->mark_as_function_body ();
-
   tree_anon_fcn_handle *retval
     = new tree_anon_fcn_handle (param_list, ret_list, body, fcn_scope, l, c);
 
   return retval;
 }
 
 static void
 maybe_warn_associativity_change (tree_expression *op)
@@ -2422,18 +2420,16 @@ make_script (tree_statement_list *cmds)
   curr_fcn_ptr = script;
 }
 
 // Begin defining a function.
 
 static octave_user_function *
 start_function (tree_parameter_list *param_list, tree_statement_list *body)
 {
-  body->mark_as_function_body ();
-
   // We'll fill in the return list later.
 
   octave_user_function *fcn
     = new octave_user_function (symbol_table::current_scope (),
 				param_list, 0, body);
 				
 
   if (fcn)
diff --git a/src/pt-stmt.cc b/src/pt-stmt.cc
--- a/src/pt-stmt.cc
+++ b/src/pt-stmt.cc
@@ -62,39 +62,41 @@ tree_statement::line (void)
 
 int
 tree_statement::column (void)
 {
   return cmd ? cmd->column () : (expr ? expr->column () : -1);
 }
 
 void
-tree_statement::maybe_echo_code (bool in_function_body)
+tree_statement::maybe_echo_code (bool in_function_or_script_body)
 {
-  if (in_function_body
+  if (in_function_or_script_body
       && (Vecho_executing_commands & ECHO_FUNCTIONS))
     {
       tree_print_code tpc (octave_stdout, VPS4);
 
       accept (tpc);
     }
 }
 
 octave_value_list
-tree_statement::eval (bool silent, int nargout, bool in_function_body)
+tree_statement::eval (bool silent, int nargout,
+		      bool in_function_or_script_body)
 {
   octave_value_list retval;
 
   bool pf = silent ? false : print_flag;
 
   if (cmd || expr)
     {
-      octave_call_stack::set_statement (this);
+      if (in_function_or_script_body)
+	octave_call_stack::set_statement (this);
 
-      maybe_echo_code (in_function_body);
+      maybe_echo_code (in_function_or_script_body);
 
       try
 	{
 	  if (cmd)
 	    cmd->eval ();
 	  else
 	    {
 	      expr->set_print_flag (pf);
@@ -174,17 +176,18 @@ tree_statement_list::eval (bool silent, 
       while (true)
 	{
 	  tree_statement *elt = *p++;
 
 	  if (elt)
 	    {
 	      OCTAVE_QUIT;
 
-	      retval = elt->eval (silent, nargout, function_body);
+	      retval = elt->eval (silent, nargout,
+				  function_body || script_body);
 
 	      if (error_state)
 		break;
 
 	      if (tree_break_command::breaking
 		  || tree_continue_command::continuing)
 		break;
 
diff --git a/src/pt-stmt.h b/src/pt-stmt.h
--- a/src/pt-stmt.h
+++ b/src/pt-stmt.h
@@ -66,17 +66,18 @@ public:
   int column (void);
 
   void maybe_echo_code (bool in_function_body);
 
   bool print_result (void) { return print_flag; }
 
   tree_command *command (void) { return cmd; }
 
-  octave_value_list eval (bool silent, int nargout, bool in_function_body);
+  octave_value_list eval (bool silent, int nargout,
+			  bool in_function_or_script_body);
 
   tree_expression *expression (void) { return expr; }
 
   octave_comment_list *comment_text (void) { return comm; }
 
   // Allow modification of this statement.  Note that there is no
   // checking.  If you use these, are you sure you knwo what you are
   // doing?
@@ -114,33 +115,35 @@ private:
 // A list of statements to evaluate.
 
 class
 tree_statement_list : public octave_base_list<tree_statement *>
 {
 public:
 
   tree_statement_list (void)
-    : function_body (false) { }
+    : function_body (false), script_body (false) { }
 
   tree_statement_list (tree_statement *s)
-    : function_body (false) { append (s); }
+    : function_body (false), script_body (false) { append (s); }
 
   ~tree_statement_list (void)
     {
       while (! empty ())
 	{
 	  iterator p = begin ();
 	  delete *p;
 	  erase (p);
 	}
     }
 
   void mark_as_function_body (void) { function_body = true; }
 
+  void mark_as_script_body (void) { script_body = true; }
+
   octave_value_list eval (bool silent = false, int nargout = 0);
 
   int set_breakpoint (int line);
 
   void delete_breakpoint (int line);
 
   octave_value_list list_breakpoints (void);
 
@@ -148,16 +151,19 @@ public:
 
   void accept (tree_walker& tw);
 
 private:
 
   // Does this list of statements make up the body of a function?
   bool function_body;
 
+  // Does this list of statements make up the body of a script?
+  bool script_body;
+
   // No copying!
 
   tree_statement_list (const tree_statement_list&);
 
   tree_statement_list& operator = (const tree_statement_list&);
 };
 
 #endif
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -170,83 +170,79 @@ octave_call_stack::do_caller_user_code (
 	  break;
 	}
     }
 
   return retval;
 }
 
 Octave_map
-octave_call_stack::do_backtrace (void) const
+octave_call_stack::do_backtrace (int n) const
 {
   Octave_map retval;
 
-  size_t nframes = cs.size () - 1;
-
-  Cell keys (4, 1);
+  int nframes = cs.size () - n;
 
-  keys(0) = "file";
-  keys(1) = "name";
-  keys(2) = "line";
-  keys(3) = "column";
+  if (nframes > 0)
+    {
+      Cell keys (4, 1);
 
-  Cell file (nframes, 1);
-  Cell name (nframes, 1);
-  Cell line (nframes, 1);
-  Cell column (nframes, 1);
+      keys(0) = "file";
+      keys(1) = "name";
+      keys(2) = "line";
+      keys(3) = "column";
 
-  const_iterator p = cs.begin ();
-  
-  // Skip innermost function as it will be the dbstatus function
-  // itself.  FIXME -- Is it best to do this here?
-  p++;
+      Cell file (nframes, 1);
+      Cell name (nframes, 1);
+      Cell line (nframes, 1);
+      Cell column (nframes, 1);
+
+      octave_idx_type k = 0;
 
-  octave_idx_type k = 0;
-
-  while (p != cs.end ())
-    {
-      const call_stack_elt& elt = *p;
-
-      octave_function *f = elt.fcn;
-
-      if (f)
+      for (const_iterator p = cs.begin () + n; p != cs.end (); p++)
 	{
-	  file(k) = f->fcn_file_name ();
-	  name(k) = f->name ();
+	  const call_stack_elt& elt = *p;
+
+	  octave_function *f = elt.fcn;
 
-	  tree_statement *stmt = elt.stmt;
+	  if (f)
+	    {
+	      file(k) = f->fcn_file_name ();
+	      name(k) = f->name ();
+
+	      tree_statement *stmt = elt.stmt;
 
-	  if (stmt)
-	    {
-	      line(k) = stmt->line ();
-	      column(k) = stmt->column ();
+	      if (stmt)
+		{
+		  line(k) = stmt->line ();
+		  column(k) = stmt->column ();
+		}
+	      else
+		{
+		  line(k) = -1;
+		  column(k) = -1;
+		}
 	    }
 	  else
 	    {
+	      file(k) = "<unknown>";
+	      name(k) = "<unknown>";
 	      line(k) = -1;
 	      column(k) = -1;
 	    }
-	}
-      else
-	{
-	  file(k) = "<unknown>";
-	  name(k) = "<unknown>";
-	  line(k) = -1;
-	  column(k) = -1;
+
+	  k++;
 	}
 
-      k++;
-      p++;
+      retval.assign ("file", file);
+      retval.assign ("name", name);
+      retval.assign ("line", line);
+      retval.assign ("column", column);
     }
 
-  retval.assign ("file", file);
-  retval.assign ("name", name);
-  retval.assign ("line", line);
-  retval.assign ("column", column);
-
   return retval;
 }
 
 void
 recover_from_exception (void)
 {
   can_interrupt = true;
   octave_interrupt_immediately = 0;
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -173,19 +173,19 @@ public:
   }
 
   static void set_statement (tree_statement *s)
   {
     if (instance_ok ())
       instance->do_set_statement (s);
   }
 
-  static Octave_map backtrace (void)
+  static Octave_map backtrace (int n = 0)
   {
-    return instance_ok () ? instance->do_backtrace () : Octave_map ();
+    return instance_ok () ? instance->do_backtrace (n) : Octave_map ();
   }
 
   static void pop (void)
   {
     if (instance_ok ())
       instance->do_pop ();
   }
   
@@ -264,17 +264,17 @@ private:
   {
     if (! cs.empty ())
       {
 	call_stack_elt& elt = cs.front ();
 	elt.stmt = s;
       }
   }
 
-  Octave_map do_backtrace (void) const;
+  Octave_map do_backtrace (int n) const;
 
   void do_pop (void)
   {
     if (! cs.empty ())
       cs.pop_front ();
   }
 
   void do_clear (void) { cs.clear (); }
