# HG changeset patch
# User jwe
# Date 1151686120 0
#      Fri Jun 30 16:48:40 2006 +0000
# Node ID b9fd54407c8d7d96049c505f2a3e9ad28f7a4bee
# Parent  a0218194daa68473e122fc0668b7e688c7f95480
[project @ 2006-06-30 16:48:39 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,13 @@
 2006-06-30  John W. Eaton  <jwe@octave.org>
 
+	* dir-ops.cc (dir_entry::open): Perform tilde expansion here.
+	* file-stat.cc (stat::update_internal): Ditto.
+
 	* data-conv.cc (data_conv::string_to_data_type):
 	Correctly handle leading "*".
 
 2006-06-29  Atsushi Kajita  <a-kajita@mizar.freemail.ne.jp>
 
 	* Sparse.cc (Sparse<T>::SparseRep::elem): Avoid out of bounds
 	array access.
 	
diff --git a/liboctave/dir-ops.cc b/liboctave/dir-ops.cc
--- a/liboctave/dir-ops.cc
+++ b/liboctave/dir-ops.cc
@@ -27,33 +27,36 @@ 02110-1301, USA.
 
 #include <cerrno>
 #include <cstdlib>
 #include <cstring>
 
 #include "sysdir.h"
 
 #include "dir-ops.h"
+#include "file-ops.h"
 #include "lo-error.h"
 #include "lo-sysdep.h"
 #include "str-vec.h"
 
 bool
 dir_entry::open (const std::string& n)
 {
   fail = true;
 
   if (! n.empty ())
     name = n;
 
   if (! name.empty ())
     {
       close ();
+      
+      std::string fullname = file_ops::tilde_expand (name);
 
-      dir = static_cast<void *> (opendir (name.c_str ()));
+      dir = static_cast<void *> (opendir (fullname.c_str ()));
 
       if (dir)
 	fail = false;
       else
 	{
 	  using namespace std;
 	  errmsg = strerror (errno);
 	}
diff --git a/liboctave/file-stat.cc b/liboctave/file-stat.cc
--- a/liboctave/file-stat.cc
+++ b/liboctave/file-stat.cc
@@ -30,16 +30,17 @@ 02110-1301, USA.
 
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
+#include "file-ops.h"
 #include "file-stat.h"
 #include "statdefs.h"
 
 #if !defined (HAVE_LSTAT)
 static inline int
 lstat (const char *name, struct stat *buf)
 {
   return stat (name, buf);
@@ -191,18 +192,20 @@ file_stat::is_newer (const std::string& 
 
 void
 file_stat::update_internal (bool force)
 {
   if (! initialized || force)
     {
       initialized = false;
       fail = false;
+      
+      std::string full_file_name = file_ops::tilde_expand (file_name);
 
-      const char *cname = file_name.c_str ();
+      const char *cname = full_file_name.c_str ();
 
       struct stat buf;
 
       int status = follow_links ? stat (cname, &buf) : lstat (cname, &buf);
 
       if (status < 0)
 	{
 	  using namespace std;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2006-06-30  John W. Eaton  <jwe@octave.org>
+
+	* load-path.cc (genpath): Don't perform tilde expansion on name.
+	(load_path::do_add): Don't warn about moving "." to front of list.
+
 2006-06-28  John W. Eaton  <jwe@octave.org>
 
 	* load-path.cc (Faddpath): Don't treat "." specially here.
 	Don't check directory status here.
 	(Fpath): Handle all args.  Don't treat "." specially here.
 	(Faddpath, Frmpath): Delete unused variable xpath.
 	(load_path::do_add): New function.
 	(load_path::do_prepend, load_path::do_append): Use it.
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -504,22 +504,17 @@ load_path::do_add (const std::string& di
 	}
     }
 
   // FIXME -- is there a better way to do this?
 
   i = find_dir_info (".");
 
   if (i != dir_info_list.end ())
-    {
-      if (i != dir_info_list.begin () && warn)
-	warning ("addpath: \".\" is always first in the path");
-
-      move (i, false);
-    }
+    move (i, false);
   else
     panic_impossible ();
 }
 
 bool
 load_path::do_remove (const std::string& dir)
 {
   bool retval = false;
@@ -1135,19 +1130,17 @@ load_path::add_to_fcn_map (const dir_inf
     }
 }
 
 std::string
 genpath (const std::string& dirname, const string_vector& skip)
 {
   std::string retval;
 
-  std::string full_dirname = file_ops::tilde_expand (dirname);
-
-  dir_entry dir (full_dirname);
+  dir_entry dir (dirname);
 
   if (dir)
     {
       retval = dirname;
 
       string_vector dirlist = dir.read ();
       
       octave_idx_type len = dirlist.length ();
@@ -1167,17 +1160,17 @@ genpath (const std::string& dirname, con
 		{
 		  skip_p = (elt == skip[j]);
 		  if (skip_p)
 		    break;
 		}
 
 	      if (! skip_p)
 		{
-		  std::string nm = full_dirname + file_ops::dir_sep_str + elt;
+		  std::string nm = dirname + file_ops::dir_sep_str + elt;
 
 		  file_stat fs (nm);
 
 		  if (fs && fs.is_dir ())
 		    retval += dir_path::path_sep_str + genpath (nm);
 		}
 	    }
 	}
