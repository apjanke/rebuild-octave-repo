# HG changeset patch
# User jwe
# Date 1094909503 0
#      Sat Sep 11 13:31:43 2004 +0000
# Node ID 19b73a80e1d9fe947f52767ec595ecd9da8b7857
# Parent  352d228d409b199726a76a38832fca9e7599e7c9
[project @ 2004-09-11 13:31:43 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2004-09-11  John W. Eaton  <jwe@octave.org>
+
+	* ov-fcn-handle.cc (octave_fcn_handle::save_ascii):
+	Write directly to OS.
+	(octave_fcn_handle::load_ascii,	octave_fcn_handle::load_binary,
+	octave_fcn_handle::load_hdf5): Check parse status after calling
+	eval_string.  Don't dereference fh unless it is valid.
+
 2004-09-11  David Bateman  <dbateman@free.fr>
 
 	* ov-fcn-handle.cc (octave_fcn_handle::save_ascii,
 	octave_fcn_handle::load_ascii, octave_fcn_handle::save_binary,
 	octave_fcn_handle::load_binary, octave_fcn_handle::save_hdf5,
 	octave_fcn_handle::load_hdf5): New functions. 
 	* ov-fcn-handle.h: Provide decls.
 
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -96,62 +96,73 @@ octave_fcn_handle::subsref (const std::s
 
   return retval;
 }
 
 bool
 octave_fcn_handle::save_ascii (std::ostream& os, bool&, bool)
 {
   os << nm << "\n";
+
   if (nm == "@<anonymous>")
     {
-      OSSTREAM buf;
-      print_raw (buf, true);
-      os << OSSTREAM_STR (buf) << "\n" << OSSTREAM_ENDS;
-      OSSTREAM_FREEZE (buf);
+      print_raw (os, true);
+      os << "\n";
     }
 
   return true;
 }
 
 bool
 octave_fcn_handle::load_ascii (std::istream& is)
 {
   is >> nm;
+
   if (nm == "@<anonymous>")
     {
       char c;
       OSSTREAM buf;
 
-      // Skip preceeding newline(s)
-      while (is.get (c) && c == '\n');
+      // Skip preceeding newline(s).
+      while (is.get (c) && c == '\n')
+	/* do nothing */;
 
       if (is)
 	{
 	  buf << c;
 
 	  // Get a line of text whitespace characters included, leaving
-	  // newline in the stream
+	  // newline in the stream.
+
 	  while (is.peek () != '\n')
 	    {
 	      is.get (c);
 	      if (! is)
 		break;
 	      buf << c;
 	    }
 	}
 
       buf << OSSTREAM_ENDS;
 
       int parse_status;
-      octave_value anon_fcn_handle = eval_string (OSSTREAM_C_STR (buf), 
+      octave_value anon_fcn_handle = eval_string (OSSTREAM_STR (buf), 
 						  true, parse_status);
       OSSTREAM_FREEZE (buf);
 
-      fcn = anon_fcn_handle.fcn_handle_value () -> fcn;
+      if (parse_status == 0)
+	{
+	  octave_fcn_handle *fh = anon_fcn_handle.fcn_handle_value ();
+	  if (fh)
+	    fcn = fh->fcn;
+	  else
+	    return false;
+	}
+      else
+	return false;
     }
   else
     {
       fcn = lookup_function (nm);
       if (! fcn.is_function ())
 	return false;
     }
 
@@ -202,17 +213,26 @@ octave_fcn_handle::load_binary (std::ist
 	swap_bytes<4> (&tmp);
 
       OCTAVE_LOCAL_BUFFER (char, ctmp2, tmp+1);
       is.read (ctmp2, tmp);
 
       int parse_status;
       octave_value anon_fcn_handle = eval_string (ctmp2, true, parse_status);
 
-      fcn = anon_fcn_handle.fcn_handle_value () -> fcn;
+      if (parse_status == 0)
+	{
+	  octave_fcn_handle *fh = anon_fcn_handle.fcn_handle_value ();
+	  if (fh)
+	    fcn = fh->fcn;
+	  else
+	    return false;
+	}
+      else
+	return false;
     }
   else
     {
       fcn = lookup_function (nm);
       if (! fcn.is_function ())
 	return false;
     }
   return true;
@@ -247,17 +267,18 @@ octave_fcn_handle::save_hdf5 (hid_t loc_
     {
       H5Tclose (type_hid);
       H5Gclose (group_hid);
       return false;
     }
 
   data_hid = H5Dcreate (group_hid, "nm",  type_hid, space_hid, H5P_DEFAULT);
   if (data_hid < 0 || H5Dwrite (data_hid, type_hid, H5S_ALL, H5S_ALL,
-				H5P_DEFAULT, (void*) nm.c_str ()) < 0)
+				H5P_DEFAULT,
+				static_cast<void*> (nm.c_str ())) < 0)
     {
       H5Sclose (space_hid);
       H5Tclose (type_hid);
       H5Gclose (group_hid);
       return false;
     }
   H5Dclose (data_hid);
 
@@ -274,17 +295,18 @@ octave_fcn_handle::save_hdf5 (hid_t loc_
 	{
 	  H5Gclose (group_hid);
 	  return false;
 	}
 
       data_hid = H5Dcreate (group_hid, "fcn",  type_hid, space_hid,
 			    H5P_DEFAULT);
       if (data_hid < 0 || H5Dwrite (data_hid, type_hid, H5S_ALL, H5S_ALL,
-				    H5P_DEFAULT, (void*) stmp.c_str ()) < 0)
+				    H5P_DEFAULT,
+				    static_cast<void*> (stmp.c_str ())) < 0)
 	{
 	  H5Sclose (space_hid);
 	  H5Tclose (type_hid);
 	  H5Gclose (group_hid);
 	  return false;
 	}
 
       H5Dclose (data_hid);
@@ -425,17 +447,26 @@ octave_fcn_handle::load_hdf5 (hid_t loc_
 	  return false;
 	}
       H5Dclose (data_hid);
       H5Tclose (st_id);
 
       int parse_status;
       octave_value anon_fcn_handle = eval_string (fcn_tmp, true, parse_status);
 
-      fcn = anon_fcn_handle.fcn_handle_value () -> fcn;
+      if (parse_status == 0)
+	{
+	  octave_fcn_handle *fh = anon_fcn_handle.fcn_handle_value ();
+	  if (fh)
+	    fcn = fh->fcn;
+	  else
+	    return false;
+	}
+      else
+	return false;
     }
   else
     {
       fcn = lookup_function (nm);
       if (! fcn.is_function ())
 	return false;
     }
 
@@ -454,17 +485,17 @@ void
 octave_fcn_handle::print_raw (std::ostream& os, bool pr_as_read_syntax) const
 {
   bool printed = false;
 
   if (nm == "@<anonymous>")
     {
       tree_print_code tpc (os);
 
-      // FCN is const becuase this member function is, so we can't
+      // FCN is const because this member function is, so we can't
       // use it to call user_function_value, so we make a copy first.
 
       octave_value ftmp = fcn;
 
       octave_user_function *f = ftmp.user_function_value ();
 
       if (f)
 	{
