# HG changeset patch
# User Ben Abbott  <bpabbott@mac.com>
# Date 1376152632 14400
#      Sat Aug 10 12:37:12 2013 -0400
# Node ID 4407606d093967c91169a01a1359635aa576245d
# Parent  9336d0e1d1ec872fb4aa7148e81f1748923f62ab
FLTK toolkit: Simplify conditionals for uimenu presence.

* libinterp/dldfcn/__init_fltk__.cc: Introduce menu_dy() to unify the
"if (uimenu->is_visible ())" blocks. Correctly determine the figure's
currentpoint. Correct zoom box and resulting ylim.

diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -675,18 +675,16 @@ public:
     // At that point this function should be uncommented.
     // The current solution is to call xclass() before show() for each window.
     // Set WM_CLASS which allows window managers to properly group related
     // windows.  Otherwise, the class is just "FLTK"
     //default_xclass ("Octave");
 
     begin ();
     {
-      //Fl_Window::resize (xx, yy - menu_h, ww, hh + menu_h + status_h);
-      
       // bbox of plot canvas = [xx, yy, ww, hh];
       // (xx, yy) = UL coordinate relative to UL window.
 
       canvas = new OpenGL_fltk (0, menu_h, ww, hh, number ());
 
       uimenu = new fltk_uimenu (0, 0, ww, menu_h);
       uimenu->hide ();
 
@@ -1105,50 +1103,54 @@ private:
   }
 
   void set_currentpoint (int px, int py)
   {
     if (!fp.is_beingdeleted ())
       {
         Matrix pos (1,2,0);
         pos(0) = px;
-        pos(1) = h () - menu_h - py;
-        if (! uimenu->is_visible ())
-          pos(1) = pos(1) + menu_h;
+        pos(1) = h () - (py + status_h + menu_dy ());
         fp.set_currentpoint (pos);
         graphics_object robj = gh_manager::get_object (fp.get_parent ());
         root_figure::properties& rp =
           dynamic_cast<root_figure::properties&> (robj.get_properties ());
         rp.set_currentfigure (fp.get___myhandle__ ().value ());
       }
   }
 
   void set_axes_currentpoint (graphics_object ax, int px, int py)
   {
     if (ax.valid_object ())
       {
         axes::properties& ap =
           dynamic_cast<axes::properties&> (ax.get_properties ());
 
         double xx, yy;
-        if (uimenu->is_visible ())
-          py = py - menu_h;
         pixel2pos (ax, px, py, xx, yy);
 
         Matrix pos (2,3,0);
         pos(0,0) = xx;
         pos(1,0) = yy;
         pos(0,1) = xx;
         pos(1,1) = yy;
 
         ap.set_currentpoint (pos);
         fp.set_currentaxes (ap.get___myhandle__ ().value ());
       }
   }
 
+  int menu_dy ()
+    {
+      if (uimenu->is_visible ())
+        return menu_h;
+      else
+        return 0;
+    }
+
   int key2shift (int key)
   {
     if (key == FL_Shift_L || key == FL_Shift_R)
       return FL_SHIFT;
 
     if (key == FL_Control_L || key == FL_Control_R)
       return FL_CTRL;
 
@@ -1187,46 +1189,33 @@ private:
   }
 
   void resize (int xx,int yy,int ww,int hh)
   {
     Fl_Window::resize (xx, yy, ww, hh);
 
     Matrix pos (1,4,0);
     pos(0) = xx;
-    pos(1) = yy + menu_h;
+    pos(1) = yy + menu_dy ();
     pos(2) = ww;
-    pos(3) = hh - menu_h - status_h;
-    if (! uimenu->is_visible ())
-      {
-        pos(1) = yy;
-        pos(3) = hh - status_h;
-      }
+    pos(3) = hh - menu_dy () - status_h;
 
     fp.set_boundingbox (pos, true);
   }
 
   void draw (void)
   {
     // FIXME - Toolbar and menubar do not update properly
     Matrix pos = fp.get_boundingbox (true);
     int canvas_h = pos(3);
     int canvas_w = pos(2);
-    int canvas_y = menu_h;
-    int toolbar_y = menu_h + canvas_h;
-    pos(1) = pos(1) - menu_h;
-    pos(3) = pos(3) + menu_h + status_h;
-
-    if (! uimenu->is_visible ())
-      {
-        pos(1) = pos(1) + menu_h;
-        pos(3) = pos(3) - menu_h;
-        toolbar_y = toolbar_y - menu_h;
-        canvas_y = canvas_y - menu_h;
-      }
+    int canvas_y = menu_dy ();
+    int toolbar_y = menu_dy () + canvas_h;
+    pos(1) = pos(1) - menu_dy ();
+    pos(3) = pos(3) + menu_dy () + status_h;
 
     Fl_Window::resize (pos(0), pos(1), pos(2), pos(3));
 
     bottom->resize (0, toolbar_y, status_h, status_h);
     autoscale->resize (0, toolbar_y, status_h, status_h);
     togglegrid->resize (status_h, toolbar_y, status_h, status_h);
     panzoom->resize (2 * status_h, toolbar_y, status_h, status_h);
     rotate->resize (3 * status_h, toolbar_y, status_h, status_h);
@@ -1305,25 +1294,25 @@ private:
                   evt.assign ("Key", octave_value (std::tolower (key_a)));
                   evt.assign ("Modifier", octave_value (modifier2cell ()));
                   fp.execute_keyreleasefcn (evt);
                 }
             }
             break;
 
           case FL_MOVE:
-            pixel2status (pixel2axes_or_ca (Fl::event_x (), Fl::event_y ()),
-                          Fl::event_x (), Fl::event_y ());
+            pixel2status (pixel2axes_or_ca (Fl::event_x (), Fl::event_y () - menu_dy ()),
+                          Fl::event_x (), Fl::event_y () - menu_dy ());
             break;
 
           case FL_PUSH:
             pos_x = Fl::event_x ();
-            pos_y = Fl::event_y ();
+            pos_y = Fl::event_y () - menu_dy ();
 
-            set_currentpoint (Fl::event_x (), Fl::event_y ());
+            set_currentpoint (Fl::event_x (), Fl::event_y () - menu_dy ());
 
             gh = pixel2axes_or_ca (pos_x, pos_y);
 
             if (gh.ok ())
               {
                 ax_obj = gh_manager::get_object (gh);
                 set_axes_currentpoint (ax_obj, pos_x, pos_y);
               }
@@ -1333,97 +1322,97 @@ private:
             if (Fl::event_button () == 1 || Fl::event_button () == 3)
               return 1;
 
             break;
 
           case FL_DRAG:
             if (fp.get_windowbuttonmotionfcn ().is_defined ())
               {
-                set_currentpoint (Fl::event_x (), Fl::event_y ());
+                set_currentpoint (Fl::event_x (), Fl::event_y () - menu_dy ());
                 fp.execute_windowbuttonmotionfcn ();
               }
 
             if (Fl::event_button () == 1)
               {
                 if (ax_obj && ax_obj.isa ("axes"))
                   {
                     if (gui_mode == pan_zoom)
                       pixel2status (ax_obj, pos_x, pos_y,
-                                    Fl::event_x (), Fl::event_y ());
+                                    Fl::event_x (), Fl::event_y () - menu_dy ());
                     else
                       view2status (ax_obj);
                     axes::properties& ap =
                       dynamic_cast<axes::properties&> (ax_obj.get_properties ());
 
                     double x0, y0, x1, y1;
                     Matrix pos = fp.get_boundingbox (true);
                     pixel2pos (ax_obj, pos_x, pos_y, x0, y0);
-                    pixel2pos (ax_obj, Fl::event_x (), Fl::event_y (), x1, y1);
+                    pixel2pos (ax_obj, Fl::event_x (), Fl::event_y () - menu_dy (), x1, y1);
 
                     if (gui_mode == pan_zoom)
                       ap.translate_view (x0, x1, y0, y1);
                     else if (gui_mode == rotate_zoom)
                       {
                         double daz, del;
                         daz = (Fl::event_x () - pos_x) / pos(2) * 360;
-                        del = (Fl::event_y () - pos_y) / pos(3) * 360;
+                        del = (Fl::event_y () - menu_dy () - pos_y) / pos(3) * 360;
                         ap.rotate_view (del, daz);
                       }
 
                     pos_x = Fl::event_x ();
-                    pos_y = Fl::event_y ();
+                    pos_y = Fl::event_y () - menu_dy ();
                     mark_modified ();
                   }
                 return 1;
               }
             else if (Fl::event_button () == 3)
               {
                 pixel2status (ax_obj, pos_x, pos_y,
-                              Fl::event_x (), Fl::event_y ());
+                              Fl::event_x (), Fl::event_y () - menu_dy ());
                 Matrix zoom_box (1,4,0);
                 zoom_box (0) = pos_x;
                 zoom_box (1) = pos_y;
                 zoom_box (2) =  Fl::event_x ();
-                zoom_box (3) =  Fl::event_y ();
+                zoom_box (3) =  Fl::event_y () - menu_dy ();
                 canvas->set_zoom_box (zoom_box);
                 canvas->zoom (true);
                 canvas->redraw ();
               }
 
             break;
 
           case FL_MOUSEWHEEL:
             {
               graphics_object ax =
                 gh_manager::get_object (pixel2axes_or_ca (Fl::event_x (),
-                                                          Fl::event_y ()));
+                                                          Fl::event_y () - menu_dy ()));
               if (ax && ax.isa ("axes"))
                 {
                   axes::properties& ap =
                     dynamic_cast<axes::properties&> (ax.get_properties ());
 
                   // Determine if we're zooming in or out.
                   const double factor =
                     (Fl::event_dy () > 0) ? 1.0 + wheel_zoom_speed : 1.0 - wheel_zoom_speed;
 
                   // Get the point we're zooming about.
                   double x1, y1;
-                  pixel2pos (ax, Fl::event_x (), Fl::event_y (), x1, y1);
+                  pixel2pos (ax, Fl::event_x (), Fl::event_y () - menu_dy (), x1, y1);
 
                   ap.zoom_about_point (x1, y1, factor, false);
                   mark_modified ();
                 }
             }
           return 1;
 
           case FL_RELEASE:
             if (fp.get_windowbuttonupfcn ().is_defined ())
               {
-                set_currentpoint (Fl::event_x (), Fl::event_y ());
+                set_currentpoint (Fl::event_x (), Fl::event_y () - menu_dy ());
                 fp.execute_windowbuttonupfcn ();
               }
 
             if (Fl::event_button () == 1)
               {
                 if ( Fl::event_clicks () == 1)
                   {
                     if (ax_obj && ax_obj.isa ("axes"))
@@ -1445,17 +1434,17 @@ private:
                     canvas->zoom (false);
                     double x0,y0,x1,y1;
                     if (ax_obj && ax_obj.isa ("axes"))
                       {
                         axes::properties& ap =
                           dynamic_cast<axes::properties&> (ax_obj.get_properties ());
                         pixel2pos (ax_obj, pos_x, pos_y, x0, y0);
                         int pos_x1 = Fl::event_x ();
-                        int pos_y1 = Fl::event_y ();
+                        int pos_y1 = Fl::event_y () - menu_dy ();
                         pixel2pos (ax_obj, pos_x1, pos_y1, x1, y1);
                         Matrix xl (1,2,0);
                         Matrix yl (1,2,0);
                         int dx = abs (pos_x - pos_x1);
                         int dy = abs (pos_y - pos_y1);
                         // Smallest zoom box must be 4 pixels square
                         if ((dx > 4) && (dy > 4))
                           {
