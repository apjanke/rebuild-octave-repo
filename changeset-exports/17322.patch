# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1377291229 14400
#      Fri Aug 23 16:53:49 2013 -0400
# Node ID 4c1ae06111c9dccb214491c758b3ceaa4a9c61b3
# Parent  199444fc2c6b27cb0fac79fcf413ae26ac8c51f2
allow parser to accept empty statements (bug #37099)

* oct-parse.in.yy (input1): Delete non-terminal.
(input, simple_list): Simplify.  Allow separators at beginning of
statement or as only elements on line.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -259,17 +259,17 @@ make_statement (T *arg)
 %type <tree_switch_command_type> switch_command
 %type <tree_switch_case_type> switch_case default_case
 %type <tree_switch_case_list_type> case_list1 case_list
 %type <tree_decl_elt_type> decl2 param_list_elt
 %type <tree_decl_init_list_type> decl1
 %type <tree_decl_command_type> declaration
 %type <tree_statement_type> statement function_end classdef_end
 %type <tree_statement_list_type> simple_list simple_list1 list list1
-%type <tree_statement_list_type> opt_list input1
+%type <tree_statement_list_type> opt_list
 // These types need to be specified.
 %type <dummy_type> attr
 %type <dummy_type> class_event
 %type <dummy_type> class_enum
 %type <dummy_type> class_property
 %type <dummy_type> properties_list
 %type <dummy_type> properties_block
 %type <dummy_type> methods_list
@@ -302,43 +302,34 @@ make_statement (T *arg)
 %start input
 
 %%
 
 // ==============================
 // Statements and statement lists
 // ==============================
 
-input           : input1
+input           : simple_list '\n'
                   {
                     parser.stmt_list = $1;
                     YYACCEPT;
                   }
+                | simple_list END_OF_INPUT
+                  {
+                    lexer.end_of_input = true;
+                    parser.stmt_list = $1;
+                    YYACCEPT;
+                  }
                 | simple_list parse_error
                   { ABORT_PARSE; }
-                | parse_error
-                  { ABORT_PARSE; }
                 ;
 
-input1          : '\n'
+simple_list     : opt_sep_no_nl
                   { $$ = 0; }
-                | END_OF_INPUT
-                  {
-                    lexer.end_of_input = true;
-                    $$ = 0;
-                  }
-                | simple_list
-                  { $$ = $1; }
-                | simple_list '\n'
-                  { $$ = $1; }
-                | simple_list END_OF_INPUT
-                  { $$ = $1; }
-                ;
-
-simple_list     : simple_list1 opt_sep_no_nl
+                | simple_list1 opt_sep_no_nl
                   { $$ = parser.set_stmt_print_flag ($1, $2, false); }
                 ;
 
 simple_list1    : statement
                   { $$ = parser.make_statement_list ($1); }
                 | simple_list1 sep_no_nl statement
                   { $$ = parser.append_statement_list ($1, $2, $3, false); }
                 ;
