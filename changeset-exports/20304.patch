# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1435874439 14400
#      Thu Jul 02 18:00:39 2015 -0400
# Node ID dadfb0be8a42f0d65c98760f2189c85b812af28e
# Parent  3c87bcf7e0f911d3d27b19707706d18491bbc570
write sparse tests to stdout

* test/build-sparse-tests.sh: Write output to stdout.
* Makefile.am (sparse.tst): Adapt rule.

diff --git a/test/Makefile.am b/test/Makefile.am
--- a/test/Makefile.am
+++ b/test/Makefile.am
@@ -75,17 +75,19 @@ check: sparse.tst bc-overload-tests.stam
 	$(top_builddir)/run-octave $(RUN_OCTAVE_OPTIONS) --norc --silent --no-history $(srcdir)/fntests.m $(srcdir)
 
 if AMCOND_HAVE_LLVM
 check-jit: sparse.tst bc-overload-tests.stamp
 	$(top_builddir)/run-octave $(RUN_OCTAVE_OPTIONS) --jit-compiler --norc --silent --no-history $(srcdir)/fntests.m $(srcdir)
 endif
 
 sparse.tst: build-sparse-tests.sh
-	$(AM_V_GEN)$(srcdir)/build-sparse-tests.sh
+	$(AM_V_GEN)rm -f $@-t $@ && \
+	$(srcdir)/build-sparse-tests.sh > $@-t && \
+	mv $@-t $@
 
 GENERATED_BC_OVERLOADS_DIRS := \
   $(shell $(srcdir)/build-bc-overload-tests.sh --list-dirs)
 
 GENERATED_BC_OVERLOADS_FILES := \
   $(shell $(srcdir)/build-bc-overload-tests.sh --list-files)
 
 bc-overload-tests.stamp: build-bc-overload-tests.sh bc-overloads-expected
diff --git a/test/build-sparse-tests.sh b/test/build-sparse-tests.sh
--- a/test/build-sparse-tests.sh
+++ b/test/build-sparse-tests.sh
@@ -108,53 +108,47 @@
 
 case $1 in
     random) preset=false ;;
     preset) preset=true ;;
     '') preset=true ;;
     *) echo "build-sparse-tests.sh random|preset" && exit 1 ;;
 esac
 
-if $preset; then
-    TESTS=sparse.tst
-else
-    TESTS=sprandom.tst
-fi
-
 # create initial file
-cat >$TESTS <<EOF
+cat <<EOF
 ## !!! DO NOT EDIT !!!
 ## THIS IS AN AUTOMATICALLY GENERATED FILE
 ## modify build-sparse-tests.sh to generate the tests you need.
 EOF
 
 
 # define all functions
 
 
 # =======================================================
 # Section separator
 
 gen_section() {
-cat >>$TESTS <<EOF
+cat <<EOF
 
 # ==============================================================
 
 EOF
 }
 
 
 # =======================================================
 # Specific preset tests
 
 # =======================================================
 # If a sparse operation yields zeros, then those elements
 # of the returned sparse matrix should be eaten.
 gen_eat_zeros() {
-cat >>$TESTS <<EOF
+cat <<EOF
 %% Make sure newly introduced zeros get eaten
 %!assert (nnz (sparse ([bf,bf,1]).^realmax), 1)
 %!assert (nnz (sparse ([1,bf,bf]).^realmax), 1)
 %!assert (nnz (sparse ([bf,bf,bf]).^realmax), 0)
 
 %!assert (nnz (sparse ([bf;bf;1]).^realmax), 1)
 %!assert (nnz (sparse ([1;bf;bf]).^realmax), 1)
 %!assert (nnz (sparse ([0.5;bf;bf]).^realmax), 0)
@@ -166,17 +160,17 @@ cat >>$TESTS <<EOF
 %!assert (nnz (sparse ([bf;bf;1])*realmin), 1)
 %!assert (nnz (sparse ([1;bf;bf])*realmin), 1)
 %!assert (nnz (sparse ([bf;bf;bf])*realmin), 0)
 
 EOF
 }
 
 gen_specific() {
-cat >>$TESTS <<EOF
+cat <<EOF
 
 %!test # segfault test from edd@debian.org
 %! n = 510;
 %! sparse (kron ((1:n)', ones (n,1)), kron (ones (n,1), (1:n)'), ones (n));
 
 %% segfault tests from Fabian@isas-berlin.de
 %% Note that the last four do not fail, but rather give a warning
 %% of a singular matrix, which is consistent with the full matrix
@@ -197,22 +191,22 @@ cat >>$TESTS <<EOF
 EOF
 }
 
 
 gen_specific_tests() {
     gen_section
     gen_specific
     gen_section
-    echo '%!shared bf' >> $TESTS
-    echo '%!test bf=realmin;' >> $TESTS
+    echo '%!shared bf'
+    echo '%!test bf=realmin;'
     gen_eat_zeros
-    echo '%!test bf=realmin+realmin*1i;' >> $TESTS
+    echo '%!test bf=realmin+realmin*1i;'
     gen_eat_zeros
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %!assert (nnz (sparse ([-1,realmin,realmin]).^1.5), 1)
 %!assert (nnz (sparse ([-1,realmin,realmin,1]).^1.5), 2)
 
 ## Make sure scalar v==0 doesn't confuse matters
 %!assert (nnz (sparse (1,1,0)), 0)
 %!assert (nnz (sparse (eye (3))*0), 0)
 %!assert (nnz (sparse (eye (3))-sparse (eye (3))), 0)
 
@@ -226,29 +220,29 @@ EOF
 }
 
 
 # =======================================================
 # Main function definition
 
 gen_function() {
     if $preset; then
-        cat >>$TESTS <<EOF
+        cat <<EOF
 ##
 ## test_sparse
 ##
 ##    run preset sparse tests.  All should pass.
 function [passes, tests] = test_sparse
   disp ("writing test output to sptest.log");
   test ("sparse.tst", "normal", "sptest.log");
 endfunction
 
 EOF
     else
-        cat >>$TESTS <<EOF
+        cat <<EOF
 ##
 ## test_sprandom
 ##
 ##  total_passes=0; total_tests=0;
 ##  for i=1:10
 ##     [passes,tests] = sprandomtest;
 ##    total_passes += passes;
 ##    total_tests += tests;
@@ -269,17 +263,17 @@ EOF
 }
 
 
 # =======================================================
 # matrix ops
 
 # test ordered comparisons: uses as,af,bs,bf
 gen_ordering_tests() {
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %% real values can be ordered (uses as,af)
 %!assert (as<=bf, sparse (af<=bf))
 %!assert (bf<=as, sparse (bf<=af))
 
 %!assert (as>=bf, sparse (af>=bf))
 %!assert (bf>=as, sparse (bf>=af))
 
 %!assert (as<bf, sparse (af<bf))
@@ -287,27 +281,27 @@ gen_ordering_tests() {
 
 %!assert (as>bf, sparse (af>bf))
 %!assert (bf>as, sparse (bf>af))
 
 EOF
 }
 
 gen_sparsesparse_ordering_tests() {
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %!assert (as<=bs, sparse (af<=bf))
 %!assert (as>=bs, sparse (af>=bf))
 %!assert (as<bs, sparse (af<bf))
 %!assert (as>bs, sparse (af>bf))
 EOF
 }
 
 # test element-wise binary operations: uses as,af,bs,bf,scalar
 gen_elementop_tests() {
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %% Elementwise binary tests (uses as,af,bs,bf,scalar)
 %!assert (as==bs, sparse (af==bf))
 %!assert (bf==as, sparse (bf==af))
 
 %!assert (as!=bf, sparse (af!=bf))
 %!assert (bf!=as, sparse (bf!=af))
 
 %!assert (as+bf, af+bf)
@@ -327,17 +321,17 @@ gen_elementop_tests() {
 %! fv = af.^bf;
 %! idx = find (af!=0);
 %! assert (sv(:)(idx), sparse (fv(:)(idx)), 100*eps)
 
 EOF
 }
 
 gen_sparsesparse_elementop_tests() {
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %!assert (as==bs, sparse (af==bf))
 %!assert (as!=bs, sparse (af!=bf))
 %!assert (as+bs, sparse (af+bf))
 %!assert (as-bs, sparse (af-bf))
 %!assert (as.*bs, sparse (af.*bf))
 %!xtest assert (as./bs, sparse (af./bf), 100*eps)
 %!test
 %! sv = as.^bs;
@@ -345,56 +339,56 @@ gen_sparsesparse_elementop_tests() {
 %! idx = find (af!=0);
 %! assert(sv(:)(idx), sparse (fv(:)(idx)), 100*eps)
 
 EOF
 }
 
 # test matrix-matrix left and right division: uses as,af,bs,bf
 gen_divop_tests() {
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %% Matrix-matrix operators (uses af,as,bs,bf)
 %!assert (as/bf, af/bf, 100*eps)
 %!assert (af/bs, af/bf, 100*eps)
 %!assert (as/bs, sparse (af/bf), 100*eps)
 %!assert (bs\af', bf\af', 100*eps)
 %!assert (bf\as', bf\af', 100*eps)
 %!assert (bs\as', sparse (bf\af'), 100*eps)
 
 EOF
 }
 
 # test matrix-matrix left and right division: uses as,af,bs,bf
 gen_square_divop_tests() {
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %% Matrix-matrix operators (uses af,as,bs,bf)
 %!assert (as/bf, af/bf, 100*eps)
 %!assert (af/bs, af/bf, 100*eps)
 %!assert (as/bs, sparse (af/bf), 100*eps)
 %!assert (bs\af', bf\af', 100*eps)
 %!assert (bf\as', bf\af', 100*eps)
 %!assert (bs\as', sparse (bf\af'), 100*eps)
 
 EOF
 }
 
 # test matrix-matrix operations: uses as,af,bs,bf
 gen_matrixop_tests() {
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %% Matrix-matrix operators (uses af,as,bs,bf)
 %!assert (as*bf', af*bf')
 %!assert (af*bs', af*bf')
 %!assert (as*bs', sparse (af*bf'))
 
 EOF
 }
 
 # test diagonal operations
 gen_matrixdiag_tests() {
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %% Matrix diagonal tests (uses af,as,bf,bs)
 %!assert (diag (as), sparse (diag (af)))
 %!assert (diag (bs), sparse (diag (bf)))
 %!assert (diag (as,1), sparse (diag (af,1)))
 %!assert (diag (bs,1), sparse (diag (bf,1)))
 %!assert (diag (as,-1), sparse (diag (af,-1)))
 %!assert (diag (bs,-1), sparse (diag (bf,-1)))
 %!assert (diag (as(:)), sparse (diag (af(:))))
@@ -409,52 +403,52 @@ gen_matrixdiag_tests() {
 %! assert (spdiags (tb,tc,sparse (zeros (size (as)))), as);
 %! assert (spdiags (tb,tc,size (as,1),size (as,2)), as);
 
 EOF
 }
 
 # test matrix reshape operations
 gen_matrixreshape_tests() {
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %% Matrix diagonal tests (uses af,as,bf,bs)
 %!assert (reshape (as,1,prod(size(as))), sparse (reshape (af,1,prod(size(af)))))
 %!assert (reshape (as,prod(size(as)),1), sparse (reshape (af,prod(size(af)),1)))
 %!assert (reshape (as,fliplr(size(as))), sparse (reshape (af,fliplr(size(af)))))
 %!assert (reshape (bs,1,prod(size(as))), sparse (reshape (bf,1,prod(size(af)))))
 %!assert (reshape (bs,prod(size(as)),1), sparse (reshape (bf,prod(size(af)),1)))
 %!assert (reshape (bs,fliplr(size(as))), sparse (reshape (bf,fliplr(size(af)))))
 
 EOF
 }
 
 # test mapper matrix operations: uses as,af
 print_mapper_test() {
-echo "%!assert ($1(as), sparse ($1(af)))" >>$TESTS
+echo "%!assert ($1(as), sparse ($1(af)))"
 }
 
 print_real_mapper_test() {
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %!test
 %! wn2s = warning ("query", "Octave:num-to-str");
 %! warning ("off", "Octave:num-to-str");
 %! if (isreal (af))
 %!   if ($2)
 %!     assert ($1(as), sparse ($1(af)));
 %!   else
 %!     assert ($1(as), $1(af));
 %!   endif
 %! endif
 %! warning (wn2s.state, "Octave:num-to-str");
 
 EOF
 }
 
 gen_mapper_tests() {
-echo "%% Unary matrix tests (uses af,as)">>$TESTS
+echo "%% Unary matrix tests (uses af,as)"
 print_mapper_test abs
 print_mapper_test acos
 print_mapper_test acosh
 print_mapper_test angle
 print_mapper_test arg
 print_mapper_test asin
 print_mapper_test asinh
 print_mapper_test atan
@@ -478,26 +472,26 @@ print_mapper_test round
 print_mapper_test sign
 print_mapper_test sin
 print_mapper_test sinh
 print_mapper_test sqrt
 print_mapper_test tan
 print_mapper_test tanh
 
 # Specific tests for certain mapper functions
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %!assert (issparse (abs (as))  && isreal (abs (as)))
 %!assert (issparse (real (as)) && isreal (real (as)))
 %!assert (issparse (imag (as)) && isreal (imag (as)))
 
 EOF
 }
 
 gen_real_mapper_tests() {
-echo "%% Unary matrix tests (uses af,as)">>$TESTS
+echo "%% Unary matrix tests (uses af,as)"
 print_real_mapper_test erf 1
 print_real_mapper_test erfc 1
 #print_real_mapper_test gamma 1
 print_real_mapper_test isalnum 0
 print_real_mapper_test isalpha 0
 print_real_mapper_test isascii 0
 print_real_mapper_test iscntrl 0
 print_real_mapper_test isdigit 0
@@ -506,34 +500,34 @@ print_real_mapper_test islower 0
 print_real_mapper_test isprint 0
 print_real_mapper_test ispunct 0
 print_real_mapper_test isspace 0
 print_real_mapper_test isupper 0
 print_real_mapper_test isxdigit 0
 #print_real_mapper_test gammaln 1
 
 # Specific tests for certain mapper functions
-    cat >>$TESTS <<EOF
+    cat <<EOF
 
 %!test
 %! wn2s = warning ("query", "Octave:num-to-str");
 %! warning ("off", "Octave:num-to-str");
 %! if (isreal (af))
 %!   assert (toascii (as), toascii (af));
 %!   assert (tolower (as), as);
 %!   assert (toupper (as), as);
 %! endif
 %! warning (wn2s.state, "Octave:num-to-str");
 
 EOF
 }
 
 # test matrix operations: uses as,af
 gen_unaryop_tests() {
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %% Unary matrix tests (uses af,as)
 %!assert (issparse (as))
 %!assert (!issparse (af))
 %!assert (! (issparse (af) && iscomplex (af)))
 %!assert (! (issparse (af) && isreal (af)))
 %!assert (sum (as), sparse (sum (af)))
 %!assert (sum (as,1), sparse (sum (af,1)))
 %!assert (sum (as,2), sparse (sum (af,2)))
@@ -627,17 +621,17 @@ gen_unaryop_tests() {
 EOF
 }
 
 # operations which require square matrices.
 gen_square_tests() {
 # The \ and / operator tests on square matrices
     gen_square_divop_tests
 
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %!testif HAVE_UMFPACK
 %! assert(det(bs+speye(size(bs))), det(bf+eye(size(bf))), 100*eps*abs(det(bf+eye(size(bf)))))
 
 %!testif HAVE_UMFPACK
 %! [l,u] = lu (sparse ([1,1;1,1]));
 %! assert (l*u, [1,1;1,1], 10*eps);
 
 %!testif HAVE_UMFPACK
@@ -692,17 +686,17 @@ gen_square_tests() {
 %!assert (bs\af', bf\af', 100*eps);
 %!assert (bs\as', sparse (bf\af'), 100*eps);
 
 EOF
 }
 
 # Cholesky tests
 gen_cholesky_tests() {
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %!testif HAVE_CHOLMOD
 %! assert (chol (bs)'*chol (bs), bs, 1e-10);
 %!testif HAVE_CHOLMOD
 %! assert (chol (bs,'lower')*chol (bs,'lower')', bs, 1e-10);
 %!testif HAVE_CHOLMOD
 %! assert (chol (bs,'lower'), chol (bs)', 1e-10);
 
 %!testif HAVE_CHOLMOD   # Return Partial Cholesky factorization
@@ -721,39 +715,39 @@ gen_cholesky_tests() {
 %! assert (LS*LS', QS*bs*QS', 1e-10);
 %! assert (PS, 0);
 
 EOF
 }
 
 # test scalar operations: uses af and real scalar bf; modifies as,bf,bs
 gen_scalar_tests() {
-    echo '%!test as = sparse (af);' >> $TESTS
-    echo '%!test bs = bf;' >> $TESTS
+    echo '%!test as = sparse (af);'
+    echo '%!test bs = bf;'
     gen_elementop_tests
     gen_ordering_tests
-    echo '%!test bf = bf+1i;' >>$TESTS
-    echo '%!test bs = bf;' >> $TESTS
+    echo '%!test bf = bf+1i;'
+    echo '%!test bs = bf;'
     gen_elementop_tests
 }
 
 # test matrix operations: uses af and bf; modifies as,bs
 gen_rectangular_tests() {
-    echo '%!test as = sparse(af);' >> $TESTS
-    echo '%!test bs = sparse(bf);' >>$TESTS
+    echo '%!test as = sparse(af);'
+    echo '%!test bs = sparse(bf);'
     gen_mapper_tests
     gen_real_mapper_tests
     gen_unaryop_tests
     gen_elementop_tests
     gen_sparsesparse_elementop_tests
     gen_matrixop_tests
     # gen_divop_tests # Disable rectangular \ and / for now
     gen_matrixdiag_tests
     gen_matrixreshape_tests
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %!testif HAVE_UMFPACK   # permuted LU
 %! [L,U] = lu (bs);
 %! assert (L*U, bs, 1e-10);
 
 %!testif HAVE_UMFPACK   # simple LU + row permutations
 %! [L,U,P] = lu (bs);
 %! assert (P'*L*U, bs, 1e-10);
 %! ## triangularity
@@ -792,17 +786,17 @@ gen_rectangular_tests() {
 EOF
 }
 
 
 # =======================================================
 # sparse assembly tests
 
 gen_assembly_tests() {
-cat >>$TESTS <<EOF
+cat <<EOF
 %%Assembly tests
 %!test
 %! m = max ([m;r(:)]);
 %! n = max ([n;c(:)]);
 %! funiq = fsum = zeros (m,n);
 %! funiq(r(:) + m*(c(:)-1) ) = ones (size (r(:)));
 %! funiq = sparse (funiq);
 %! for k=1:length (r)
@@ -833,24 +827,24 @@ cat >>$TESTS <<EOF
 
 EOF
 }
 
 # =======================================================
 # sparse selection tests
 
 gen_scalar_select_tests () {
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %!assert (sparse (42)([1,1]), sparse ([42,42]))
 %!assert (sparse (42*1i)([1,1]), sparse ([42,42].*1i))
 EOF
 }
 
 gen_select_tests() {
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %!test as = sparse (af);
 
 %% Point tests
 %!test idx = ridx(:) + rows (as) * (cidx (:)-1);
 %!assert (sparse (as(idx)), sparse (af(idx)))
 %!assert (as(idx), sparse (af(idx)));
 %!assert (as(idx'), sparse (af(idx')));
 %!assert (as(flipud (idx(:))), sparse (af(flipud (idx(:)))))
@@ -907,17 +901,17 @@ gen_select_tests() {
 %!assert (as(1:end-1,1:end-1), sparse (af(1:end-1,1:end-1)))
 EOF
 }
 
 # =======================================================
 # sparse save and load tests
 
 gen_save_tests() {
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %!test # save ascii
 %! savefile = tempname ();
 %! as_save = as;
 %! save ("-text", savefile, "bf", "as_save", "af");
 %! clear as_save;
 %! load (savefile, "as_save");
 %! unlink (savefile);
 %! assert (as_save, sparse (af));
@@ -952,32 +946,32 @@ EOF
 }
 
 # =============================================================
 # Specific solver tests for matrices that will test all of the solver
 # code. Uses alpha and beta
 gen_solver_tests() {
 
 if $preset; then
-  cat >>$TESTS <<EOF
+  cat <<EOF
 %! n=8;
 %! lf=diag (1:n); lf(n-1,1)=0.5*alpha; lf(n,2)=0.25*alpha; ls=sparse (lf);
 %! uf=diag (1:n); uf(1,n-1)=2*alpha; uf(2,n)=alpha; us=sparse (uf);
 %! ts=spdiags (ones (n,3),-1:1,n,n) + diag (1:n); tf = full (ts);
 EOF
 else
-  cat >>$TESTS <<EOF
+  cat <<EOF
 %! n = floor (lognrnd (8,2)+1)';
 %! ls = tril (sprandn (8,8,0.2),-1).*alpha + n*speye (8); lf = full (ls);
 %! us = triu (sprandn (8,8,0.2),1).*alpha + n*speye (8); uf = full (us);
 %! ts = spdiags (randn (8,3),-1:1,8,8).*alpha; tf = full (ts);
 EOF
 fi
 
-cat >>$TESTS <<EOF
+cat <<EOF
 %! df = diag (1:n).* alpha; ds = sparse (df);
 %! pdf = df(randperm (n), randperm (n));
 %! pds = sparse (pdf);
 %! plf = lf(randperm (n), randperm (n));
 %! pls = sparse (plf);
 %! puf = uf(randperm (n), randperm (n));
 %! pus = sparse (puf);
 %! bs = spdiags (repmat ([1:n]',1,4),-2:1,n,n).*alpha;
@@ -1015,17 +1009,17 @@ cat >>$TESTS <<EOF
 %! assert (sparse (bcs\xs), sparse (bcf\xf), 1e-10);
 %!assert (ts\xf, tf\xf, 1e-10);
 %!assert (sparse (ts\xs), sparse (tf\xf), 1e-10);
 %!assert (tcs\xf, tcf\xf, 1e-10);
 %!assert (sparse (tcs\xs), sparse (tcf\xf), 1e-10);
 
 EOF
 
-cat >>$TESTS <<EOF
+cat <<EOF
 %% QR solver tests
 
 %!function f (a, sz, feps)
 %! b = randn (sz);
 %! x = a \ b;
 %! assert (a * x, b, feps);
 %! b = randn (sz) + 1i*randn (sz);
 %! x = a \ b;
@@ -1149,177 +1143,177 @@ gen_section
 
 # specific tests
 if $preset; then
     gen_specific_tests
     gen_section
 fi
 
 # scalar operations
-echo '%!shared as,af,bs,bf' >> $TESTS
+echo '%!shared as,af,bs,bf'
 if $preset; then
-    echo '%!test af=[1+1i,2-1i,0,0;0,0,0,3+2i;0,0,0,4];' >> $TESTS
-    echo '%!test bf=3;' >>$TESTS
+    echo '%!test af=[1+1i,2-1i,0,0;0,0,0,3+2i;0,0,0,4];'
+    echo '%!test bf=3;'
 else
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %!test
 %! % generate m,n from 1 to <5000
 %! m = floor (lognrnd (8,2)+1);
 %! n = floor (lognrnd (8,2)+1);
 %! as = sprandn (m,n,0.3);
 %! af = full (as + 1i*sprandn (as));
 %! bf = randn;
 EOF
 fi
 
 gen_scalar_tests
 gen_section
 
 # rectangular operations
 if $preset; then
-    echo '%!test af=[1+1i,2-1i,0,0;0,0,0,3+2i;0,0,0,4];' >> $TESTS
-    echo '%!test bf=[0,1-1i,0,0;2+1i,0,0,0;3-1i,2+3i,0,0];' >> $TESTS
+    echo '%!test af=[1+1i,2-1i,0,0;0,0,0,3+2i;0,0,0,4];'
+    echo '%!test bf=[0,1-1i,0,0;2+1i,0,0,0;3-1i,2+3i,0,0];'
 else
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %!test
 %! m = floor (lognrnd (8,2)+1);
 %! n = floor (lognrnd (8,2)+1);
 %! as = sprandn (m,n,0.3);
 %! af = full (as + 1i*sprandn (as));
 %! bs = sprandn (m,n,0.3);
 %! bf = full (bs + 1i*sprandn (bs));
 EOF
 fi
 
 gen_rectangular_tests
 gen_section
 gen_save_tests
 gen_section
-echo '%!test bf = real (bf);' >> $TESTS
+echo '%!test bf = real (bf);'
 gen_rectangular_tests
 gen_section
 gen_sparsesparse_ordering_tests
 gen_section
-echo '%!test af = real (af);' >> $TESTS
+echo '%!test af = real (af);'
 gen_rectangular_tests
 gen_section
 gen_save_tests
 gen_section
-echo '%!test bf = bf+1i*(bf!=0);' >> $TESTS
+echo '%!test bf = bf+1i*(bf!=0);'
 gen_rectangular_tests
 gen_section
 
 # square operations
 if $preset; then
-    echo '%!test af = [1+1i,2-1i,0,0;0,0,0,3+2i;0,0,0,4];' >> $TESTS
-    echo '%! as = sparse (af);' >> $TESTS
-    echo '%!test bf = [0,1-1i,0,0;2+1i,0,0,0;3-1i,2+3i,0,0];' >> $TESTS
+    echo '%!test af = [1+1i,2-1i,0,0;0,0,0,3+2i;0,0,0,4];'
+    echo '%! as = sparse (af);'
+    echo '%!test bf = [0,1-1i,0,0;2+1i,0,0,0;3-1i,2+3i,0,0];'
 else
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %!test
 %! m = floor (lognrnd (8,2)+1);
 %! n = floor (lognrnd (8,2)+1);
 %! as = sprandn (m,n,0.3);
 %! af = full (as + 1i*sprandn (as));
 %! bs = sprandn (m,n,0.3);
 %! bf = full (bs + 1i*sprandn (bs));
 EOF
 fi
 
-cat >>$TESTS <<EOF
+cat <<EOF
 %!test ;# invertible matrix
 %! bf = af'*bf+max (abs ([af(:);bf(:)]))*sparse (eye (columns (as)));
 %! bs = sparse (bf);
 
 EOF
 
 gen_square_tests
 gen_section
-echo '%!test bf = real (bf);' >> $TESTS
-echo '%! bs = sparse (bf);' >> $TESTS
+echo '%!test bf = real (bf);'
+echo '%! bs = sparse (bf);'
 gen_square_tests
 gen_section
-echo '%!test af = real (af);' >> $TESTS
-echo '%! as = sparse (af);' >> $TESTS
+echo '%!test af = real (af);'
+echo '%! as = sparse (af);'
 gen_square_tests
 gen_section
-echo '%!test bf = bf+1i*(bf!=0);' >> $TESTS
-echo '%! bs = sparse (bf);' >> $TESTS
+echo '%!test bf = bf+1i*(bf!=0);'
+echo '%! bs = sparse (bf);'
 gen_square_tests
 gen_section
 
 # cholesky tests
 if $preset; then
-  echo '%!test bf = [5,0,1+1i,0;0,5,0,1-2i;1-1i,0,5,0;0,1+2i,0,5];' >> $TESTS
-  echo '%! bs = sparse (bf);' >> $TESTS
+  echo '%!test bf = [5,0,1+1i,0;0,5,0,1-2i;1-1i,0,5,0;0,1+2i,0,5];'
+  echo '%! bs = sparse (bf);'
 else
-  echo '# This has a small chance of failing to create a positive definite matrix' >> $TESTS
-  echo '%!test n = floor (lognrnd (8,2)+1)' >> $TESTS
-  echo '%! bs = n*speye (n,n) + sprandn (n,n,0.3);' >> $TESTS
-  echo '%! bf = full (bs);' >> $TESTS
+  echo '# This has a small chance of failing to create a positive definite matrix'
+  echo '%!test n = floor (lognrnd (8,2)+1)'
+  echo '%! bs = n*speye (n,n) + sprandn (n,n,0.3);'
+  echo '%! bf = full (bs);'
 fi
 
 gen_cholesky_tests
 gen_section
-echo '%!test bf = real (bf);' >> $TESTS
-echo '%! bs = sparse (bf);' >> $TESTS
+echo '%!test bf = real (bf);'
+echo '%! bs = sparse (bf);'
 gen_cholesky_tests
 gen_section
 
 # assembly tests
-echo '%!shared r,c,m,n,fsum,funiq' >>$TESTS
+echo '%!shared r,c,m,n,fsum,funiq'
 if $use_preset; then
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %!test
 %! r = [1,1,2,1,2,3];
 %! c = [2,1,1,1,2,1];
 %! m = n = 0;
 EOF
 else
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %!test
 %! % generate m,n from 1 to <5000
 %! m = floor (lognrnd (8,2)+1);
 %! n = floor (lognrnd (8,2)+1);
 %! nz = ceil ((m+n)/2);
 %! r = floor (rand (5,nz)*n)+1;
 %! c = floor (rand (5,nn)*m)+1;
 EOF
 fi
 gen_assembly_tests #includes real and complex tests
 gen_section
 
 # slicing tests
-echo '%!shared ridx,cidx,idx,as,af' >>$TESTS
+echo '%!shared ridx,cidx,idx,as,af'
 if $use_preset; then
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %!test
 %! af = [1+1i,2-1i,0,0;0,0,0,3+2i;0,0,0,4];
 %! ridx = [1,3];
 %! cidx = [2,3];
 EOF
 else
-    cat >>$TESTS <<EOF
+    cat <<EOF
 %!test
 %! % generate m,n from 1 to <5000
 %! m = floor (lognrnd (8,2)+1);
 %! n = floor (lognrnd (8,2)+1);
 %! as = sprandn (m,n,0.3);
 %! af = full (as + 1i*sprandn (as));
 %! ridx = ceil (m*rand (1,ceil (rand*m));
 %! cidx = ceil (n*rand (1,ceil (rand*n));
 EOF
 fi
 gen_scalar_select_tests
 gen_select_tests
-echo '%!test af = real (af);' >> $TESTS
+echo '%!test af = real (af);'
 gen_select_tests
 gen_section
-echo '%!shared alpha,beta,df,pdf,lf,plf,uf,puf,bf,cf,bcf,tf,tcf,xf,ds,pds,ls,pls,us,pus,bs,cs,bcs,ts,tcs,xs' >>$TESTS
-echo '%!test alpha=1; beta=1;' >> $TESTS
+echo '%!shared alpha,beta,df,pdf,lf,plf,uf,puf,bf,cf,bcf,tf,tcf,xf,ds,pds,ls,pls,us,pus,bs,cs,bcs,ts,tcs,xs'
+echo '%!test alpha=1; beta=1;'
 gen_solver_tests
-echo '%!test alpha=1; beta=1i;' >> $TESTS
+echo '%!test alpha=1; beta=1i;'
 gen_solver_tests
-echo '%!test alpha=1i; beta=1;' >> $TESTS
+echo '%!test alpha=1i; beta=1;'
 gen_solver_tests
-echo '%!test alpha=1i; beta=1i;' >> $TESTS
+echo '%!test alpha=1i; beta=1i;'
 gen_solver_tests
 gen_section
