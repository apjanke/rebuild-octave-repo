# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1419201494 18000
#      Sun Dec 21 17:38:14 2014 -0500
# Node ID 06b23f224f52388f4f54bd3f9ef6ff0a7adae4a3
# Parent  972abb60c30f6fff0f8cc4fe41bd35d721494802
fix problem with changeset e354372e20f2 (bug #43855)

* Sparse.cc (Sparse<T>::index (const idx_vector&, bool)): Also smash
dimensions when converting index to array.
* build-sparse-tests.sh: Update indexing test.

diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -1488,19 +1488,22 @@ Sparse<T>::index (const idx_vector& idx,
               retval = Sparse<T> (tmp);
             }
         }
       else
         {
           // If indexing a sparse column vector by a vector, the result is a
           // sparse column vector, otherwise it inherits the shape of index.
           // Vector transpose is cheap, so do it right here.
+
+          Array<octave_idx_type> tmp_idx = idx.as_array ().as_matrix ();
+
           const Array<octave_idx_type> idxa = (idx_dims(0) == 1
-                                               ? idx.as_array ().transpose ()
-                                               : idx.as_array ());
+                                               ? tmp_idx.transpose ()
+                                               : tmp_idx);
 
           octave_idx_type new_nr = idxa.rows ();
           octave_idx_type new_nc = idxa.cols ();
 
           // Lookup.
           // FIXME: Could specialize for sorted idx?
           NoAlias< Array<octave_idx_type> > lidx (dim_vector (new_nr, new_nc));
           for (octave_idx_type i = 0; i < new_nr*new_nc; i++)
diff --git a/test/build-sparse-tests.sh b/test/build-sparse-tests.sh
--- a/test/build-sparse-tests.sh
+++ b/test/build-sparse-tests.sh
@@ -850,17 +850,17 @@ gen_select_tests() {
 
 %% Point tests
 %!test idx = ridx(:) + rows (as) * (cidx (:)-1);
 %!assert (sparse (as(idx)), sparse (af(idx)))
 %!assert (as(idx), sparse (af(idx)));
 %!assert (as(idx'), sparse (af(idx')));
 %!assert (as(flipud (idx(:))), sparse (af(flipud (idx(:)))))
 %!assert (as([idx,idx]), sparse (af([idx,idx])))
-%!error (as(reshape ([idx;idx], [1,length(idx),2])))
+%!assert (as(reshape ([idx;idx], [1,length(idx),2])), sparse(af(reshape ([idx;idx], [1,length(idx),2]))))
 
 %% Slice tests
 %!assert (as(ridx,cidx), sparse (af(ridx,cidx)))
 %!assert (as(ridx,:), sparse (af(ridx,:)))
 %!assert (as(:,cidx), sparse (af(:,cidx)))
 %!assert (as(:,:), sparse (af(:,:)))
 %!assert (as((size (as,1):-1:1),:), sparse (af((size (af,1):-1:1),:)))
 %!assert (as(:,(size (as,2):-1:1)), sparse (af(:, (size (af,2):-1:1))))
