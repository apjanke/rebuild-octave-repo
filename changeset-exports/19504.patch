# HG changeset patch
# User Mike Miller <mtmiller@ieee.org>
# Date 1380803626 14400
#      Thu Oct 03 08:33:46 2013 -0400
# Node ID d7b55fc1b37d71bf39ee092ea36c7305ec18958b
# Parent  36a26a131209646e2881d71a2ac7891dff6b3c63
Add missing texinfo docstrings to all audio functions

* libinterp/dldfcn/__player_audioplayer__.cc,
libinterp/dldfcn/__recorder_audiorecorder__.cc,
scripts/audio/@audioplayer/subsasgn.m, scripts/audio/@audioplayer/subsref.m,
scripts/audio/@audiorecorder/__get_properties__.m,
scripts/audio/@audiorecorder/subsasgn.m,
scripts/audio/@audiorecorder/subsref.m: Add texinfo docstrings to all
functions, internal or otherwise.

diff --git a/libinterp/dldfcn/__player_audioplayer__.cc b/libinterp/dldfcn/__player_audioplayer__.cc
--- a/libinterp/dldfcn/__player_audioplayer__.cc
+++ b/libinterp/dldfcn/__player_audioplayer__.cc
@@ -28,17 +28,22 @@ along with Octave; see the file COPYING.
 #include "ov-struct.h"
 
 #ifdef HAVE_PORTAUDIO
 #include "player_class.cc"
 #include "recorder_class.cc"
 #endif
 
 DEFUN_DLD (__player_audioplayer__, args, ,
-"__player_audioplayer__")
+  "-*- texinfo -*-\n\
+@deftypefn  {Loadable Function} {@var{player} =} __player_audioplayer__ (@var{y}, @var{fs})\n\
+@deftypefnx {Loadable Function} {@var{player} =} __player_audioplayer__ (@var{y}, @var{fs}, @var{nbits})\n\
+@deftypefnx {Loadable Function} {@var{player} =} __player_audioplayer__ (@var{y}, @var{fs}, @var{nbits}, @var{id})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   audioplayer* retval = new audioplayer ();
   bool is_function = args(0).is_string () || args(0).is_function_handle () || args(0).is_inline_function ();
   if (is_function)
     retval->set_y (args(0).function_value ());
   else
@@ -62,17 +67,20 @@ DEFUN_DLD (__player_audioplayer__, args,
 #else
   octave_value retval;
   error ("portaudio not found on your system and thus audio functionality is not present");
   return retval;
 #endif
 }
 
 DEFUN_DLD (__player_get_channels__, args, ,
-"__player_get_channels__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{n} =} __player_get_channels__ (@var{player})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audioplayer *player = &((audioplayer &)rep);
@@ -80,17 +88,20 @@ DEFUN_DLD (__player_get_channels__, args
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__player_get_fs__, args, ,
-"__player_get_fs__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{fs} =} __player_get_fs__ (@var{player})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audioplayer *player = &((audioplayer &)rep);
@@ -98,17 +109,20 @@ DEFUN_DLD (__player_get_fs__, args, ,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__player_get_id__, args, ,
-"__player_get_id__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{id} =} __player_get_id__ (@var{player})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audioplayer *player = &((audioplayer &)rep);
@@ -116,17 +130,20 @@ DEFUN_DLD (__player_get_id__, args, ,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__player_get_nbits__, args, ,
-"__player_get_nbits__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{nbits} =} __player_get_nbits__ (@var{player})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audioplayer *player = &((audioplayer &)rep);
@@ -134,17 +151,20 @@ DEFUN_DLD (__player_get_nbits__, args, ,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__player_get_sample_number__, args, ,
-"__player_get_sample_number__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{n} =} __player_get_sample_number__ (@var{player})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audioplayer *player = &((audioplayer &)rep);
@@ -152,17 +172,20 @@ DEFUN_DLD (__player_get_sample_number__,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__player_get_tag__, args, ,
-"__player_get_tag__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{tag} =} __player_get_tag__ (@var{player})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audioplayer *player = &((audioplayer &)rep);
@@ -170,17 +193,20 @@ DEFUN_DLD (__player_get_tag__, args, ,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__player_get_total_samples__, args, ,
-"__player_get_total_samples__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{n} =} __player_get_total_samples__ (@var{player})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audioplayer *player = &((audioplayer &)rep);
@@ -188,17 +214,20 @@ DEFUN_DLD (__player_get_total_samples__,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__player_get_userdata__, args, ,
-"__player_get_userdata__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{data} =} __player_get_userdata__ (@var{player})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audioplayer *player = &((audioplayer &)rep);
@@ -206,17 +235,20 @@ DEFUN_DLD (__player_get_userdata__, args
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__player_isplaying__, args, ,
-"__player_isplaying__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __player_isplaying__ (@var{player})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audioplayer *player = &((audioplayer &)rep);
@@ -227,17 +259,20 @@ DEFUN_DLD (__player_isplaying__, args, ,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__player_pause__, args, ,
-"__player_pause__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __player_pause__ (@var{player})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audioplayer *player = &((audioplayer &)rep);
@@ -245,17 +280,22 @@ DEFUN_DLD (__player_pause__, args, ,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__player_playblocking__, args, ,
-"__player_playblocking__")
+  "-*- texinfo -*-\n\
+@deftypefn  {Loadable Function} {} __player_playblocking__ (@var{player})\n\
+@deftypefnx {Loadable Function} {} __player_playblocking__ (@var{player}, @var{start})\n\
+@deftypefnx {Loadable Function} {} __player_playblocking__ (@var{player}, [@var{start}, @var{end}])\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audioplayer *player = &((audioplayer &)rep);
@@ -289,17 +329,22 @@ DEFUN_DLD (__player_playblocking__, args
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__player_play__, args, ,
-"__player_play__")
+  "-*- texinfo -*-\n\
+@deftypefn  {Loadable Function} {} __player_play__ (@var{player})\n\
+@deftypefnx {Loadable Function} {} __player_play__ (@var{player}, @var{start})\n\
+@deftypefnx {Loadable Function} {} __player_play__ (@var{player}, [@var{start}, @var{end}])\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audioplayer *player = &((audioplayer &)rep);
@@ -333,17 +378,20 @@ DEFUN_DLD (__player_play__, args, ,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__player_resume__, args, ,
-"__player_resume__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __player_resume__ (@var{player})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audioplayer *player = &((audioplayer &)rep);
@@ -351,17 +399,20 @@ DEFUN_DLD (__player_resume__, args, ,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__player_set_fs__, args, ,
-"__player_set_fs__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __player_set_fs__ (@var{player}, @var{fs})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 2)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audioplayer *player = &((audioplayer &)rep);
@@ -369,17 +420,20 @@ DEFUN_DLD (__player_set_fs__, args, ,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__player_set_tag__, args, ,
-"__player_set_tag__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __player_set_tag__ (@var{player}, @var{tag})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 2)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audioplayer *player = &((audioplayer &)rep);
@@ -387,17 +441,20 @@ DEFUN_DLD (__player_set_tag__, args, ,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__player_set_userdata__, args, ,
-"__player_set_userdata__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __player_set_userdata__ (@var{player}, @var{data})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 2)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audioplayer *player = &((audioplayer &)rep);
@@ -405,17 +462,20 @@ DEFUN_DLD (__player_set_userdata__, args
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__player_stop__, args, ,
-"__player_stop__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __player_stop__ (@var{player})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audioplayer *player = &((audioplayer &)rep);
diff --git a/libinterp/dldfcn/__recorder_audiorecorder__.cc b/libinterp/dldfcn/__recorder_audiorecorder__.cc
--- a/libinterp/dldfcn/__recorder_audiorecorder__.cc
+++ b/libinterp/dldfcn/__recorder_audiorecorder__.cc
@@ -28,17 +28,22 @@ along with Octave; see the file COPYING.
 #include "ov-struct.h"
 
 #ifdef HAVE_PORTAUDIO
 #include "player_class.cc"
 #include "recorder_class.cc"
 #endif
 
 DEFUN_DLD (__recorder_audiorecorder__, args, ,
-"__recorder_audiorecorder__")
+  "-*- texinfo -*-\n\
+@deftypefn  {Loadable Function} {@var{recorder} =} __recorder_audiorecorder__ (@var{fs}, @var{nbits}, @var{channels})\n\
+@deftypefnx {Loadable Function} {@var{recorder} =} __recorder_audiorecorder__ (@var{fs}, @var{nbits}, @var{channels}, @var{id})\n\
+@deftypefnx {Loadable Function} {@var{recorder} =} __recorder_audiorecorder__ (@var{fcn}, @dots{})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   audiorecorder* retval = new audiorecorder ();
   int offset = 0;
   if (nargin > 0)
     {
       bool is_function = args(0).is_string () || args(0).is_function_handle () || args(0).is_inline_function ();
@@ -67,31 +72,37 @@ DEFUN_DLD (__recorder_audiorecorder__, a
 #else
   octave_value retval;
   error ("portaudio not found on your system and thus audio functionality is not present");
   return retval;
 #endif
 }
 
 DEFUN_DLD (__recorder_getaudiodata__, args, ,
-"__recorder_getaudiodata__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{data}} __recorder_getaudiodata__ (@var{recorder})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   const octave_base_value& rep = args(0).get_rep ();
   audiorecorder *recorder = &((audiorecorder &)rep);
   retval = octave_value (recorder->getaudiodata ());
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__recorder_get_channels__, args, ,
-"__recorder_get_channels__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{n} =} __recorder_get_channels__ (@var{recorder})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audiorecorder *recorder = &((audiorecorder &)rep);
@@ -99,17 +110,20 @@ DEFUN_DLD (__recorder_get_channels__, ar
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__recorder_get_fs__, args, ,
-"__recorder_get_fs__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{fs} =} __recorder_get_fs__ (@var{recorder})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audiorecorder *recorder = &((audiorecorder &)rep);
@@ -117,17 +131,20 @@ DEFUN_DLD (__recorder_get_fs__, args, ,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__recorder_get_id__, args, ,
-"__recorder_get_id__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{id} =} __recorder_get_id__ (@var{recorder})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audiorecorder *recorder = &((audiorecorder &)rep);
@@ -135,17 +152,20 @@ DEFUN_DLD (__recorder_get_id__, args, ,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__recorder_get_nbits__, args, ,
-"__recorder_get_nbits__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{nbits} =} __recorder_get_nbits__ (@var{recorder})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audiorecorder *recorder = &((audiorecorder &)rep);
@@ -153,17 +173,20 @@ DEFUN_DLD (__recorder_get_nbits__, args,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__recorder_get_sample_number__, args, ,
-"__recorder_get_sample_number__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{n} =} __recorder_get_sample_number__ (@var{recorder})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audiorecorder *recorder = &((audiorecorder &)rep);
@@ -171,17 +194,20 @@ DEFUN_DLD (__recorder_get_sample_number_
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__recorder_get_tag__, args, ,
-"__recorder_get_tag__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{tag} =} __recorder_get_tag__ (@var{recorder})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audiorecorder *recorder = &((audiorecorder &)rep);
@@ -189,17 +215,20 @@ DEFUN_DLD (__recorder_get_tag__, args, ,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__recorder_get_total_samples__, args, ,
-"__recorder_get_total_samples__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{n} =} __recorder_get_total_samples__ (@var{recorder})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audiorecorder *recorder = &((audiorecorder &)rep);
@@ -207,17 +236,20 @@ DEFUN_DLD (__recorder_get_total_samples_
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__recorder_get_userdata__, args, ,
-"__recorder_get_userdata__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{data} =} __recorder_get_userdata__ (@var{recorder})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audiorecorder *recorder = &((audiorecorder &)rep);
@@ -225,17 +257,20 @@ DEFUN_DLD (__recorder_get_userdata__, ar
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__recorder_isrecording__, args, ,
-"__recorder_isrecording__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __recorder_isrecording__ (@var{recorder})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audiorecorder *recorder = &((audiorecorder &)rep);
@@ -246,17 +281,20 @@ DEFUN_DLD (__recorder_isrecording__, arg
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__recorder_pause__, args, ,
-"__recorder_pause__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __recorder_pause__ (@var{recorder})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audiorecorder *recorder = &((audiorecorder &)rep);
@@ -264,31 +302,38 @@ DEFUN_DLD (__recorder_pause__, args, ,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__recorder_recordblocking__, args, ,
-"__recorder_recordblocking__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __recorder_recordblocking__ (@var{recorder}, @var{seconds})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   const octave_base_value& rep = args(0).get_rep ();
   audiorecorder *recorder = &((audiorecorder &)rep);
   recorder->recordblocking (args(1).float_value ());
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__recorder_record__, args, ,
-"__recorder_record__")
+  "-*- texinfo -*-\n\
+@deftypefn  {Loadable Function} {} __recorder_record__ (@var{recorder})\n\
+@deftypefnx {Loadable Function} {} __recorder_record__ (@var{recorder}, @var{seconds})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   const octave_base_value& rep = args(0).get_rep ();
   audiorecorder *recorder = &((audiorecorder &)rep);
   if (args.length () == 1)
     {
       recorder->record ();
@@ -304,17 +349,20 @@ DEFUN_DLD (__recorder_record__, args, ,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__recorder_resume__, args, ,
-"__recorder_resume__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __recorder_resume__ (@var{recorder})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 1)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audiorecorder *recorder = &((audiorecorder &)rep);
@@ -322,17 +370,20 @@ DEFUN_DLD (__recorder_resume__, args, ,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__recorder_set_fs__, args, ,
-"__recorder_set_fs__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __recorder_set_fs__ (@var{recorder}, @var{fs})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 2)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audiorecorder *recorder = &((audiorecorder &)rep);
@@ -340,17 +391,20 @@ DEFUN_DLD (__recorder_set_fs__, args, ,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__recorder_set_tag__, args, ,
-"__recorder_set_tag__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __recorder_set_tag__ (@var{recorder}, @var{tag})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 2)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audiorecorder *recorder = &((audiorecorder &)rep);
@@ -358,17 +412,20 @@ DEFUN_DLD (__recorder_set_tag__, args, ,
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__recorder_set_userdata__, args, ,
-"__recorder_set_userdata__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __recorder_set_userdata__ (@var{recorder}, @var{data})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   int nargin = args.length ();
   if (nargin == 2)
     {
       const octave_base_value& rep = args(0).get_rep ();
       audiorecorder *recorder = &((audiorecorder &)rep);
@@ -376,17 +433,20 @@ DEFUN_DLD (__recorder_set_userdata__, ar
     }
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
 #endif
   return retval;
 }
 
 DEFUN_DLD (__recorder_stop__, args, ,
-"__recorder_stop__")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {} __recorder_stop__ (@var{recorder})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value retval;
 #ifdef HAVE_PORTAUDIO
   const octave_base_value& rep = args(0).get_rep ();
   audiorecorder *recorder = &((audiorecorder &)rep);
   recorder->stop ();
 #else
   error ("portaudio not found on your system and thus audio functionality is not present");
diff --git a/scripts/audio/@audioplayer/subsasgn.m b/scripts/audio/@audioplayer/subsasgn.m
--- a/scripts/audio/@audioplayer/subsasgn.m
+++ b/scripts/audio/@audioplayer/subsasgn.m
@@ -11,16 +11,22 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
+## -*- texinfo -*-
+## @deftypefn {Function File} {@var{value} =} subsasgn (@var{player}, @var{idx}, @var{rhs})
+## Perform subscripted assignment on the audio player object @var{player}.
+## Assign the value of @var{rhs} to the player property named by @var{idx}.
+## @end deftypefn
+
 function value = subsasgn (player, idx, rhs)
   if (isempty (idx))
     error ("audioplayer: missing index");
   endif
   if (strcmp (idx(1).type, "."))
     field = idx.subs;
     set (player, field, rhs);
     value = player;
diff --git a/scripts/audio/@audioplayer/subsref.m b/scripts/audio/@audioplayer/subsref.m
--- a/scripts/audio/@audioplayer/subsref.m
+++ b/scripts/audio/@audioplayer/subsref.m
@@ -11,16 +11,22 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
+## -*- texinfo -*-
+## @deftypefn {Function File} {@var{value} =} subsref (@var{player}, @var{idx})
+## Perform subscripted selection on the audio player object @var{player}.
+## Return the player property value named by @var{idx}.
+## @end deftypefn
+
 function value = subsref (player, idx)
   if (isempty (idx))
     error ("audioplayer: missing index");
   endif
   if (strcmp (idx(1).type, "."))
     field = idx.subs;
     value = get (player, field);
   else
diff --git a/scripts/audio/@audiorecorder/__get_properties__.m b/scripts/audio/@audiorecorder/__get_properties__.m
--- a/scripts/audio/@audiorecorder/__get_properties__.m
+++ b/scripts/audio/@audiorecorder/__get_properties__.m
@@ -11,16 +11,22 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
+## -*- texinfo -*-
+## @deftypefn {Function File} {@var{properties} =} __get_properties__ (@var{recorder})
+## Return a struct containing all named properties of the recorder object
+## @var{recorder}.
+## @end deftypefn
+
 function properties = __get_properties__ (recorder)
   properties.BitsPerSample = __recorder_get_nbits__ (struct (recorder).recorder);
   properties.CurrentSample = __recorder_get_sample_number__ (struct (recorder).recorder);
   properties.DeviceID = __recorder_get_id__ (struct (recorder).recorder);
   properties.NumberOfChannels = __recorder_get_channels__ (struct (recorder).recorder);
   if __recorder_isrecording__ (struct (recorder).recorder)
     running = "on";
   else
diff --git a/scripts/audio/@audiorecorder/subsasgn.m b/scripts/audio/@audiorecorder/subsasgn.m
--- a/scripts/audio/@audiorecorder/subsasgn.m
+++ b/scripts/audio/@audiorecorder/subsasgn.m
@@ -11,16 +11,22 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
+## -*- texinfo -*-
+## @deftypefn {Function File} {@var{value} =} subsasgn (@var{recorder}, @var{idx}, @var{rhs})
+## Perform subscripted assignment on the audio recorder object @var{recorder}.
+## Assign the value of @var{rhs} to the recorder property named by @var{idx}.
+## @end deftypefn
+
 function value = subsasgn (recorder, idx, rhs)
   if (isempty (idx))
     error ("audiorecorder: missing index");
   endif
   if (strcmp (idx(1).type, "."))
     field = idx.subs;
     set (recorder, field, rhs);
     value = recorder;
diff --git a/scripts/audio/@audiorecorder/subsref.m b/scripts/audio/@audiorecorder/subsref.m
--- a/scripts/audio/@audiorecorder/subsref.m
+++ b/scripts/audio/@audiorecorder/subsref.m
@@ -11,16 +11,22 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
+## -*- texinfo -*-
+## @deftypefn {Function File} {@var{value} =} subsref (@var{recorder}, @var{idx})
+## Perform subscripted selection on the audio recorder object @var{recorder}.
+## Return the recorder property value named by @var{idx}.
+## @end deftypefn
+
 function value = subsref (recorder, idx)
   if (isempty (idx))
     error ("audiorecorder: missing index");
   endif
   if (strcmp (idx(1).type, "."))
     field = idx.subs;
     value = get (recorder, field);
   else
