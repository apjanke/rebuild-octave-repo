# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1203520962 -3600
#      Wed Feb 20 16:22:42 2008 +0100
# Node ID e06fdf7ea647316acfdedab367bd8df0f39df1d6
# Parent  c7925666f0bfe49d7f20dd823a476533a17662ac
Fix default value of patch::facelighting. Add scaler/graphics_xform utilities

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -10,16 +10,22 @@ 2008-06-04  Shai Ayal  <shaiay@users.sou
 
 	* graphics.h.in (axes::properties::update_xlim): call the new
 	axes::properties::calc_ticks_and_lims method
 	(axes::properties::update_ylim): ditto
 	(axes::properties::update_zlim): ditto
 
 2008-06-04  Michael Goffioul <michael.goffioul@gmail.com>
 
+	* graphics.h.in (base_scaler::is_linear, lin_scaler::is_linear,
+	scaler::is_linear): New method to detect linear scales.
+	(graphics_xform::scale(Matrix)): New method to scale 2D/3D coordinates
+	directly.
+	(patch::properties::facelighting): Set default value to "none".
+
 	* graphics.h.in (axes::axes): Be sure to initialize transformation
 	data correctly.
 
 	* graphics.cc (xget_ancestor): Pass graphics_object argument by value
 	instead of by reference.
 
 	* graphics.h.in (surface::properties::xdata,
 	surface::properties::ydata, surface::properties::zdata,
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -210,32 +210,37 @@ public:
   virtual double unscale (double d) const
     {
       error ("invalid axis scale");
       return d;
     }
 
   virtual base_scaler* clone () const
     { return new base_scaler (); }
+
+  virtual bool is_linear (void) const
+    { return false; }
 };
 
 class lin_scaler : public base_scaler
 {
 public:
   lin_scaler (void) { }
 
   Matrix scale (const Matrix& m) const { return m; }
 
   NDArray scale (const NDArray& m) const { return m; }
 
   double scale (double d) const { return d; }
 
   double unscale (double d) const { return d; }
 
   base_scaler* clone (void) const { return new lin_scaler (); }
+
+  bool is_linear (void) const { return true; }
 };
 
 class log_scaler : public base_scaler
 {
 public:
   log_scaler (void) { }
 
   Matrix scale (const Matrix& m) const
@@ -287,16 +292,19 @@ public:
     { return rep->scale (m); }
 
   double scale (double d) const
     { return rep->scale (d); }
 
   double unscale (double d) const
     { return rep->unscale (d); }
 
+  bool is_linear (void) const
+    { return rep->is_linear (); }
+
   scaler& operator = (const scaler& s)
     {
       if (rep)
 	{
 	  delete rep;
 	  rep = 0;
 	}
 
@@ -2371,16 +2379,39 @@ public:
   
   ColumnVector untransform (double x, double y, double z,
 			    bool scale = true) const;
 
   Matrix xscale (const Matrix& m) const { return sx.scale (m); }
   Matrix yscale (const Matrix& m) const { return sy.scale (m); }
   Matrix zscale (const Matrix& m) const { return sz.scale (m); }
 
+  Matrix scale (const Matrix& m) const
+    {
+      bool has_z = (m.columns () > 2);
+
+      if (sx.is_linear () && sy.is_linear ()
+	  && (! has_z || sz.is_linear ()))
+	return m;
+
+      Matrix retval (m.dims ());
+
+      int r = m.rows ();
+
+      for (int i = 0; i < r; i++)
+	{
+	  retval(i,0) = sx.scale (m(i,0));
+	  retval(i,1) = sy.scale (m(i,1));
+	  if (has_z)
+	    retval(i,2) = sz.scale (m(i,2));
+	}
+
+      return retval;
+    }
+
 private:
   Matrix xform;
   Matrix xform_inv;
   scaler sx, sy, sz;
 };
 
 class OCTINTERP_API axes : public base_graphics_object
 {
@@ -2862,17 +2893,17 @@ public:
       array_property faces , Matrix ()
       data_property facevertexalphadata , Matrix ()
       data_property facevertexcdata , Matrix ()
       array_property vertices , Matrix ()
       array_property vertexnormals , Matrix ()
       radio_property normalmode , "{auto}|manual"
       color_property facecolor , "{flat}|none|interp"
       double_property facealpha , 1.0
-      radio_property facelighting , "{flat}|none|gouraud|phong"
+      radio_property facelighting , "flat|{none}|gouraud|phong"
       color_property edgecolor , color_property (color_values (0, 0, 0), radio_values ("flat|none|interp"))
       double_property edgealpha , 1.0
       radio_property edgelighting , "{none}|flat|gouraud|phong"
       radio_property backfacelighting , "{reverselit}|unlit|lit"
       double_property ambientstrength , 0.3
       double_property diffusestrength , 0.6
       double_property specularstrength , 0.6
       double_property specularexponent , 10.0
