# HG changeset patch
# User Risto Vanhanen <risto.vanhanen@iki.fi>
# Date 1368733430 14400
#      Thu May 16 15:43:50 2013 -0400
# Node ID dddbb5dcbf6efa67be9bb72389a75dd09f2726b2
# Parent  c7d4146c570d577bfaaec8768eea0fa2e3a505a6
read Level 5 MAT files not encoded with small data element format (bug #38870)

* ls-mat5.cc (read_mat5_tag): New arg IS_SMALL_DATA_ELEMENT.
All callers changed.
(READ_PAD): New macro.
(OCTAVE_MAT5_INTEGER_READ, read_mat5_binary_element):  Use READ_PAD
instead of PAD.

diff --git a/libinterp/interp-core/ls-mat5.cc b/libinterp/interp-core/ls-mat5.cc
--- a/libinterp/interp-core/ls-mat5.cc
+++ b/libinterp/interp-core/ls-mat5.cc
@@ -76,16 +76,17 @@ along with Octave; see the file COPYING.
 
 #include "parse.h"
 #include "defaults.h"
 
 #ifdef HAVE_ZLIB
 #include <zlib.h>
 #endif
 
+#define READ_PAD(is_small_data_element, l) ((is_small_data_element) ? 4 : (((l)+7)/8)*8)
 #define PAD(l) (((l) > 0 && (l) <= 4) ? 4 : (((l)+7)/8)*8)
 #define INT8(l) ((l) == miINT8 || (l) == miUINT8 || (l) == miUTF8)
 
 
 // The subsystem data block
 static octave_value subsys_ov;
 
 // FIXME -- the following enum values should be the same as the
@@ -368,41 +369,42 @@ read_mat5_integer_data (std::istream& is
                         mat5_data_type type);
 
 #define OCTAVE_MAT5_INTEGER_READ(TYP) \
   { \
         TYP re (dims); \
   \
         std::streampos tmp_pos; \
   \
-        if (read_mat5_tag (is, swap, type, len)) \
+        if (read_mat5_tag (is, swap, type, len, is_small_data_element)) \
           { \
             error ("load: reading matrix data for '%s'", retval.c_str ()); \
             goto data_read_error; \
           } \
   \
         octave_idx_type n = re.numel (); \
         tmp_pos = is.tellg (); \
         read_mat5_integer_data (is, re.fortran_vec (), n, swap, \
                                 static_cast<enum mat5_data_type> (type)); \
   \
         if (! is || error_state) \
           { \
             error ("load: reading matrix data for '%s'", retval.c_str ()); \
             goto data_read_error; \
           } \
   \
-        is.seekg (tmp_pos + static_cast<std::streamoff> (PAD (len))); \
+        is.seekg (tmp_pos + static_cast<std::streamoff>\
+                  (READ_PAD (is_small_data_element, len))); \
   \
         if (imag) \
           { \
             /* We don't handle imag integer types, convert to an array */ \
             NDArray im (dims); \
   \
-            if (read_mat5_tag (is, swap, type, len)) \
+            if (read_mat5_tag (is, swap, type, len, is_small_data_element)) \
               { \
                 error ("load: reading matrix data for '%s'", \
                        retval.c_str ()); \
                 goto data_read_error; \
               } \
   \
             n = im.numel (); \
             read_mat5_binary_data (is, im.fortran_vec (), n, swap, \
@@ -422,20 +424,22 @@ read_mat5_integer_data (std::istream& is
   \
             tc = ctmp;  \
           } \
         else \
           tc = re; \
   }
 
 // Read one element tag from stream IS,
-// place the type code in TYPE and the byte count in BYTES
+// place the type code in TYPE, the byte count in BYTES and true (false) to 
+// IS_SMALL_DATA_ELEMENT if the tag is 4 (8) bytes long.
 // return nonzero on error
 static int
-read_mat5_tag (std::istream& is, bool swap, int32_t& type, int32_t& bytes)
+read_mat5_tag (std::istream& is, bool swap, int32_t& type, int32_t& bytes,
+               bool& is_small_data_element)
 {
   unsigned int upper;
   int32_t temp;
 
   if (! is.read (reinterpret_cast<char *> (&temp), 4 ))
     goto data_read_error;
 
   if (swap)
@@ -443,24 +447,26 @@ read_mat5_tag (std::istream& is, bool sw
 
   upper = (temp >> 16) & 0xffff;
   type = temp & 0xffff;
 
   if (upper)
     {
       // "compressed" format
       bytes = upper;
+      is_small_data_element = true;
     }
   else
     {
       if (! is.read (reinterpret_cast<char *> (&temp), 4 ))
         goto data_read_error;
       if (swap)
         swap_bytes<4> (&temp);
       bytes = temp;
+      is_small_data_element = false;
     }
 
   return 0;
 
  data_read_error:
   return 1;
 }
 
@@ -504,20 +510,21 @@ read_mat5_binary_element (std::istream& 
 
   // MAT files always use IEEE floating point
   oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_unknown;
   if ((number == 1) ^ swap)
     flt_fmt = oct_mach_info::flt_fmt_ieee_big_endian;
   else
     flt_fmt = oct_mach_info::flt_fmt_ieee_little_endian;
 
-  // element type and length
+  // element type, length and small data element flag
   int32_t type = 0;
   int32_t element_length;
-  if (read_mat5_tag (is, swap, type, element_length))
+  bool is_small_data_element;
+  if (read_mat5_tag (is, swap, type, element_length, is_small_data_element))
     return retval;                      // EOF
 
   if (type == miCOMPRESSED)
     {
 #ifdef HAVE_ZLIB
       // If C++ allowed us direct access to the file descriptor of an
       // ifstream in a uniform way, the code below could be vastly
       // simplified, and additional copies of the data in memory
@@ -618,17 +625,18 @@ read_mat5_binary_element (std::istream& 
       tc = Matrix ();
       return retval;
     }
 
   pos = is.tellg ();
 
   // array flags subelement
   int32_t len;
-  if (read_mat5_tag (is, swap, type, len) || type != miUINT32 || len != 8)
+  if (read_mat5_tag (is, swap, type, len, is_small_data_element) ||
+      type != miUINT32 || len != 8 || is_small_data_element)
     {
       error ("load: invalid array flags subelement");
       goto early_read_error;
     }
 
   int32_t flags;
   read_int (is, swap, flags);
 
@@ -644,43 +652,45 @@ read_mat5_binary_element (std::istream& 
   read_int (is, swap, tmp_nzmax);   // max number of non-zero in sparse
   nzmax = tmp_nzmax;
 
   // dimensions array subelement
   if (arrayclass != MAT_FILE_WORKSPACE_CLASS)
     {
       int32_t dim_len;
 
-      if (read_mat5_tag (is, swap, type, dim_len) || type != miINT32)
+      if (read_mat5_tag (is, swap, type, dim_len, is_small_data_element) ||
+          type != miINT32)
         {
           error ("load: invalid dimensions array subelement");
           goto early_read_error;
         }
 
       int ndims = dim_len / 4;
       dims.resize (ndims);
       for (int i = 0; i < ndims; i++)
         {
           int32_t n;
           read_int (is, swap, n);
           dims(i) = n;
         }
 
       std::streampos tmp_pos = is.tellg ();
-      is.seekg (tmp_pos + static_cast<std::streamoff> (PAD (dim_len) - dim_len));
+      is.seekg (tmp_pos + static_cast<std::streamoff>
+                (READ_PAD (is_small_data_element, dim_len) - dim_len));
     }
   else
     {
       // Why did mathworks decide to not have dims for a workspace!!!
       dims.resize (2);
       dims(0) = 1;
       dims(1) = 1;
     }
 
-  if (read_mat5_tag (is, swap, type, len) || !INT8(type))
+  if (read_mat5_tag (is, swap, type, len, is_small_data_element) || !INT8(type))
     {
       error ("load: invalid array name subelement");
       goto early_read_error;
     }
 
   {
     OCTAVE_LOCAL_BUFFER (char, name, len+1);
 
@@ -688,17 +698,18 @@ read_mat5_binary_element (std::istream& 
 
     std::streampos tmp_pos = is.tellg ();
 
     if (len)
       {
         if (! is.read (name, len ))
           goto data_read_error;
 
-        is.seekg (tmp_pos + static_cast<std::streamoff> (PAD (len)));
+        is.seekg (tmp_pos + static_cast<std::streamoff>
+                  (READ_PAD (is_small_data_element, len)));
       }
 
     name[len] = '\0';
     retval = name;
   }
 
   switch (arrayclass)
     {
@@ -752,57 +763,59 @@ read_mat5_binary_element (std::istream& 
             ridx = sm.ridx ();
             cidx = sm.cidx ();
             data = sm.data ();
           }
 
         // row indices
         std::streampos tmp_pos;
 
-        if (read_mat5_tag (is, swap, type, len))
+        if (read_mat5_tag (is, swap, type, len, is_small_data_element))
           {
             error ("load: reading sparse row data for '%s'", retval.c_str ());
             goto data_read_error;
           }
 
         tmp_pos = is.tellg ();
 
         read_mat5_integer_data (is, ridx, nzmax, swap,
                                 static_cast<enum mat5_data_type> (type));
 
         if (! is || error_state)
           {
             error ("load: reading sparse row data for '%s'", retval.c_str ());
             goto data_read_error;
           }
 
-        is.seekg (tmp_pos + static_cast<std::streamoff> (PAD (len)));
+        is.seekg (tmp_pos + static_cast<std::streamoff>
+                  (READ_PAD (is_small_data_element, len)));
 
         // col indices
-        if (read_mat5_tag (is, swap, type, len))
+        if (read_mat5_tag (is, swap, type, len, is_small_data_element))
           {
             error ("load: reading sparse column data for '%s'", retval.c_str ());
             goto data_read_error;
           }
 
         tmp_pos = is.tellg ();
 
         read_mat5_integer_data (is, cidx, nc + 1, swap,
                                 static_cast<enum mat5_data_type> (type));
 
         if (! is || error_state)
           {
             error ("load: reading sparse column data for '%s'", retval.c_str ());
             goto data_read_error;
           }
 
-        is.seekg (tmp_pos + static_cast<std::streamoff> (PAD (len)));
+        is.seekg (tmp_pos + static_cast<std::streamoff>
+                  (READ_PAD (is_small_data_element, len)));
 
         // real data subelement
-        if (read_mat5_tag (is, swap, type, len))
+        if (read_mat5_tag (is, swap, type, len, is_small_data_element))
           {
             error ("load: reading sparse matrix data for '%s'", retval.c_str ());
             goto data_read_error;
           }
 
         octave_idx_type nnz = cidx[nc];
         NDArray re;
         if (imag)
@@ -816,24 +829,25 @@ read_mat5_binary_element (std::istream& 
                                static_cast<enum mat5_data_type> (type), flt_fmt);
 
         if (! is || error_state)
           {
             error ("load: reading sparse matrix data for '%s'", retval.c_str ());
             goto data_read_error;
           }
 
-        is.seekg (tmp_pos + static_cast<std::streamoff> (PAD (len)));
+        is.seekg (tmp_pos + static_cast<std::streamoff>
+                  (READ_PAD (is_small_data_element, len)));
 
         // imaginary data subelement
         if (imag)
           {
             NDArray im (dim_vector (static_cast<int> (nnz), 1));
 
-            if (read_mat5_tag (is, swap, type, len))
+            if (read_mat5_tag (is, swap, type, len, is_small_data_element))
               {
                 error ("load: reading sparse matrix data for '%s'", retval.c_str ());
                 goto data_read_error;
               }
 
             read_mat5_binary_data (is, im.fortran_vec (), nnz, swap,
                                    static_cast<enum mat5_data_type> (type), flt_fmt);
 
@@ -1055,33 +1069,34 @@ read_mat5_binary_element (std::istream& 
         Octave_map m (dim_vector (1, 1));
         int n_fields = 2;
         string_vector field (n_fields);
 
         for (int i = 0; i < n_fields; i++)
           {
             int32_t fn_type;
             int32_t fn_len;
-            if (read_mat5_tag (is, swap, fn_type, fn_len) || !INT8(fn_type))
+            if (read_mat5_tag (is, swap, fn_type, fn_len, is_small_data_element) ||
+                !INT8(fn_type))
               {
                 error ("load: invalid field name subelement");
                 goto data_read_error;
               }
 
             OCTAVE_LOCAL_BUFFER (char, elname, fn_len + 1);
 
             std::streampos tmp_pos = is.tellg ();
 
             if (fn_len)
               {
                 if (! is.read (elname, fn_len))
                   goto data_read_error;
 
-                is.seekg (tmp_pos +
-                          static_cast<std::streamoff> (PAD (fn_len)));
+                is.seekg (tmp_pos + static_cast<std::streamoff>
+                          (READ_PAD (is_small_data_element, fn_len)));
               }
 
             elname[fn_len] = '\0';
 
             field(i) = elname;
           }
 
         std::vector<Cell> elt (n_fields);
@@ -1116,33 +1131,35 @@ read_mat5_binary_element (std::istream& 
         tc = m;
       }
       break;
 
     case MAT_FILE_OBJECT_CLASS:
       {
         isclass = true;
 
-        if (read_mat5_tag (is, swap, type, len) || !INT8(type))
+        if (read_mat5_tag (is, swap, type, len, is_small_data_element) ||
+            !INT8(type))
           {
             error ("load: invalid class name");
             goto skip_ahead;
           }
 
         {
           OCTAVE_LOCAL_BUFFER (char, name, len+1);
 
           std::streampos tmp_pos = is.tellg ();
 
           if (len)
             {
               if (! is.read (name, len ))
                 goto data_read_error;
 
-              is.seekg (tmp_pos + static_cast<std::streamoff> (PAD (len)));
+              is.seekg (tmp_pos + static_cast<std::streamoff>
+                        (READ_PAD (is_small_data_element, len)));
             }
 
           name[len] = '\0';
           classname = name;
         }
       }
       // Fall-through
     case MAT_FILE_STRUCT_CLASS:
@@ -1152,41 +1169,43 @@ read_mat5_binary_element (std::istream& 
         int32_t fn_len;
         int32_t field_name_length;
 
         // field name length subelement -- actually the maximum length
         // of a field name.  The Matlab docs promise this will always
         // be 32.  We read and use the actual value, on the theory
         // that eventually someone will recognize that's a waste of
         // space.
-        if (read_mat5_tag (is, swap, fn_type, fn_len) || fn_type != miINT32)
+        if (read_mat5_tag (is, swap, fn_type, fn_len, is_small_data_element) ||
+            fn_type != miINT32)
           {
             error ("load: invalid field name length subelement");
             goto data_read_error;
           }
 
         if (! is.read (reinterpret_cast<char *> (&field_name_length), fn_len ))
           goto data_read_error;
 
         if (swap)
           swap_bytes<4> (&field_name_length);
 
         // field name subelement.  The length of this subelement tells
         // us how many fields there are.
-        if (read_mat5_tag (is, swap, fn_type, fn_len) || !INT8(fn_type))
+        if (read_mat5_tag (is, swap, fn_type, fn_len, is_small_data_element) ||
+            !INT8(fn_type))
           {
             error ("load: invalid field name subelement");
             goto data_read_error;
           }
 
         octave_idx_type n_fields = fn_len/field_name_length;
 
         if (n_fields > 0)
           {
-            fn_len = PAD (fn_len);
+            fn_len = READ_PAD (is_small_data_element, fn_len);
 
             OCTAVE_LOCAL_BUFFER (char, elname, fn_len);
 
             if (! is.read (elname, fn_len))
               goto data_read_error;
 
             std::vector<Cell> elt (n_fields);
 
@@ -1315,42 +1334,43 @@ read_mat5_binary_element (std::istream& 
     case MAT_FILE_SINGLE_CLASS:
       {
         FloatNDArray re (dims);
 
         // real data subelement
 
         std::streampos tmp_pos;
 
-        if (read_mat5_tag (is, swap, type, len))
+        if (read_mat5_tag (is, swap, type, len, is_small_data_element))
           {
             error ("load: reading matrix data for '%s'", retval.c_str ());
             goto data_read_error;
           }
 
         octave_idx_type n = re.numel ();
         tmp_pos = is.tellg ();
         read_mat5_binary_data (is, re.fortran_vec (), n, swap,
                                static_cast<enum mat5_data_type> (type), flt_fmt);
 
         if (! is || error_state)
           {
             error ("load: reading matrix data for '%s'", retval.c_str ());
             goto data_read_error;
           }
 
-        is.seekg (tmp_pos + static_cast<std::streamoff> (PAD (len)));
+        is.seekg (tmp_pos + static_cast<std::streamoff>
+                  (READ_PAD (is_small_data_element, len)));
 
         if (imag)
           {
             // imaginary data subelement
 
             FloatNDArray im (dims);
 
-            if (read_mat5_tag (is, swap, type, len))
+            if (read_mat5_tag (is, swap, type, len, is_small_data_element))
               {
                 error ("load: reading matrix data for '%s'", retval.c_str ());
                 goto data_read_error;
               }
 
             n = im.numel ();
             read_mat5_binary_data (is, im.fortran_vec (), n, swap,
                                    static_cast<enum mat5_data_type> (type), flt_fmt);
@@ -1381,34 +1401,35 @@ read_mat5_binary_element (std::istream& 
     default:
       {
         NDArray re (dims);
 
         // real data subelement
 
         std::streampos tmp_pos;
 
-        if (read_mat5_tag (is, swap, type, len))
+        if (read_mat5_tag (is, swap, type, len, is_small_data_element))
           {
             error ("load: reading matrix data for '%s'", retval.c_str ());
             goto data_read_error;
           }
 
         octave_idx_type n = re.numel ();
         tmp_pos = is.tellg ();
         read_mat5_binary_data (is, re.fortran_vec (), n, swap,
                                static_cast<enum mat5_data_type> (type), flt_fmt);
 
         if (! is || error_state)
           {
             error ("load: reading matrix data for '%s'", retval.c_str ());
             goto data_read_error;
           }
 
-        is.seekg (tmp_pos + static_cast<std::streamoff> (PAD (len)));
+        is.seekg (tmp_pos + static_cast<std::streamoff>
+                  (READ_PAD (is_small_data_element, len)));
 
         if (logicalvar)
           {
             // Logical variables can either be MAT_FILE_UINT8_CLASS or
             // MAT_FILE_DOUBLE_CLASS, so check if we have a logical
             // variable and convert it.
 
             boolNDArray out (dims);
@@ -1419,17 +1440,17 @@ read_mat5_binary_element (std::istream& 
             tc = out;
           }
         else if (imag)
           {
             // imaginary data subelement
 
             NDArray im (dims);
 
-            if (read_mat5_tag (is, swap, type, len))
+            if (read_mat5_tag (is, swap, type, len, is_small_data_element))
               {
                 error ("load: reading matrix data for '%s'", retval.c_str ());
                 goto data_read_error;
               }
 
             n = im.numel ();
             read_mat5_binary_data (is, im.fortran_vec (), n, swap,
                                    static_cast<enum mat5_data_type> (type), flt_fmt);
