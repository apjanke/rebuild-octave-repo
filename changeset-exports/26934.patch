# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1552685695 -3600
#      Fri Mar 15 22:34:55 2019 +0100
# Node ID 1771bed3848244f10adfdac2b993f5c480d04579
# Parent  b6ac4615214f85dcf1a3121731d10c69e5682f5f
Remove some formats from the list of supported formats (bug #55906)

* print.m (doc): Remove  cdr, corel, aifm, ill, cgm and dxf from the list of
  supported formats.

* __print_poase_opts__.m: Warn when one of the above formats is requested.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -26,16 +26,20 @@ Summary of important user-visible change
   which is a common scenario.
 
 - Printing to EPS files now uses a tight bounding box (`"-tight"`
   argument to print) by default.  This makes more sense for EPS
   files which are normally embedded within other documents, and is
   Matlab compatible.  If necessary use the `"-loose"` option to
   reproduce figures as they appeared in previous versions of Octave.
 
+- The following print devices are no more officially supported: cdr, corel,
+  aifm, ill, cgm, hpgl, mf and dxf.  A warning will be thrown when using
+  those devices and the actual code for supporting those formats will eventually
+  be removed from a future version of Octave. 
 
 ### Matlab compatibility
 
 - The interpreter now supports handles to nested functions.
 
 - The graphics properties `"LineWidth"` and `"MarkerSize"` are now
   measured in points, *not* pixels.  Compared to previous versions
   of Octave, some lines and markers will appear 4/3 larger.
diff --git a/scripts/plot/util/print.m b/scripts/plot/util/print.m
--- a/scripts/plot/util/print.m
+++ b/scripts/plot/util/print.m
@@ -212,17 +212,17 @@
 ##
 ## @item -append
 ##   Append PostScript or PDF output to an existing file of the same type.
 ##
 ## @item  -F@var{fontname}
 ## @itemx -F@var{fontname}:@var{size}
 ## @itemx -F:@var{size}
 ##   Use @var{fontname} and/or @var{fontsize} for all text.
-## @var{fontname} is ignored for some devices: dxf, fig, hpgl, etc.
+## @var{fontname} is ignored for some devices: fig, etc.
 ##
 ## @item -d@var{device}
 ##   The available output format is specified by the option @var{device}, and
 ## is one of the following (devices marked with a "*" are only available with
 ## the Gnuplot toolkit):
 ##
 ## Vector Formats
 ##
@@ -294,50 +294,30 @@
 ## described for @samp{epslatexstandalone} above.
 ##
 ##   @item svg
 ##     Scalable Vector Graphics
 ##
 ##   @item canvas*
 ##     Javascript-based drawing on an HTML5 canvas viewable in a web browser.
 ##
-##   @item  cdr*
-##   @itemx @nospell{corel*}
-##     CorelDraw
-##
-##   @item cgm*
-##     Computer Graphics Metafile, Version 1, ANSI X3.122-1986
-##
-##   @item dxf
-##     AutoCAD
-##
 ##   @item  emf
 ##   @itemx meta
 ##     Microsoft Enhanced Metafile
 ##
 ##   @item fig
 ##     XFig.  For the Gnuplot graphics toolkit, the additional options
 ## @option{-textspecial} or @option{-textnormal} can be used to control
 ## whether the special flag should be set for the text in the figure.
 ## (default is @option{-textnormal})
 ##
-##   @item hpgl
-##     HP plotter language
-##
-##   @item  ill
-##   @itemx @nospell{aifm}
-##     Adobe Illustrator (obsolete for Gnuplot versions > 4.2)
-##
 ##   @item  latex*
 ##   @itemx eepic*
 ##     @LaTeX{} picture environment and extended picture environment.
 ##
-##   @item mf*
-##     Metafont
-##
 ##   @item  tikz
 ##   @itemx tikzstandalone*
 ##     Generate a @LaTeX{} file using PGF/TikZ format.  The OpenGL-based
 ## toolkits create a PGF file while Gnuplot creates a TikZ file.  The
 ## @samp{tikzstandalone} device produces a @LaTeX{} document which includes the
 ## TikZ file.
 ##
 ##   @end table
diff --git a/scripts/plot/util/private/__opengl_print__.m b/scripts/plot/util/private/__opengl_print__.m
--- a/scripts/plot/util/private/__opengl_print__.m
+++ b/scripts/plot/util/private/__opengl_print__.m
@@ -120,20 +120,16 @@ function opts = __opengl_print__ (opts)
       gl2ps_device = {"svg"};
       pipeline = {sprintf("%s > %s", cmd, opts.name)};
     case {"dxf", "emf", "fig", "hpgl"}
       tmp = tempname ();
       opts.unlink = [opts.unlink tmp];
       cmd = sprintf (opts.pstoedit_cmd (opts), "pdf", tmp, tmp);
       gl2ps_device = {"svg"};
       pipeline = {sprintf("%s > %s", cmd, opts.name)};
-    case {"corel", "gif"}
-      error ("print:unsupporteddevice",
-             "print.m: %s output is not available for OpenGL graphics toolkits",
-             upper (opts.devopt));
     case opts.ghostscript.device
       ## Except for postscript, use svg format and first convert to pdf
       ## before going through ghostscript for final adjusments
       svgcmd = "";
       if (opts.svgconvert)
         svgcmd = opts.svgconvert_cmd (opts, opts.ghostscript.device);
       endif
       dosvg = ! (strcmp (opts.devopt, "ps2write") || isempty (svgcmd));
diff --git a/scripts/plot/util/private/__print_parse_opts__.m b/scripts/plot/util/private/__print_parse_opts__.m
--- a/scripts/plot/util/private/__print_parse_opts__.m
+++ b/scripts/plot/util/private/__print_parse_opts__.m
@@ -205,16 +205,26 @@ function arg_st = __print_parse_opts__ (
       arg_st.devopt = "png";
     elseif (dot == 0)
       arg_st.devopt = "psc";
     else
       arg_st.devopt = tolower (arg_st.name(dot+1:end));
     endif
   endif
 
+  ## Warn about deprecated output formats
+  persistent unsupported = {"aifm", "ill","cdr", "corel", ...
+                            "hpgl", "mf", "cgm", "dxf"}
+
+  if (any (strcmp (unsupported, arg_st.devopt)))
+    warning ('Octave:print:deprecated-format',
+             'print: "%s" format is no more officially supported', ...
+             arg_st.devopt);
+  endif
+
   ## By default, postprocess svg files using svgconvert.
   if (strcmp (arg_st.devopt, "svg"))
     arg_st.svgconvert = true;
   endif
 
   ## By default, use the "opengl" renderer for all raster outputs
   ## supported by "imwrite".
   fmts = imformats ();
