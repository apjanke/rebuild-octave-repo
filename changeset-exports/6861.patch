# HG changeset patch
# User jwe
# Date 1188972901 0
#      Wed Sep 05 06:15:01 2007 +0000
# Node ID 32558239ed9eac3b13dcc5c307719f075e0c6c13
# Parent  8057825b748f7a1c64c8207c780499c7f8b173b6
[project @ 2007-09-05 06:15:01 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,17 @@
+2007-09-05  John W. Eaton  <jwe@octave.org>
+
+	* plot/__go_draw_axes__.m: Consistently index PARAMETRIC with
+	DATA_IDX.
+
+2007-09-04  David Bateman  <dbateman@free.fr>
+
+	* general/isdir.m: Return a logical value.
+
 2007-09-04  David Bateman  <dbateman@free.fr>
 
 	* statistics/distributions/chi2pdf.m,
 	statistics/distributions/chi2cdf.m,
 	statistics/distributions/chi2inv.m: Modifiy the call to the gamma
 	distribution functions to account for inverse of scale factor in
 	gamma functions.
 
diff --git a/scripts/general/isdir.m b/scripts/general/isdir.m
--- a/scripts/general/isdir.m
+++ b/scripts/general/isdir.m
@@ -19,13 +19,14 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isdir (@var{f})
 ## Return true if @var{f} is a directory.
 ## @end deftypefn
 
 function t = isdir (x)
   if (nargin == 1)
-    t = exist (x, "dir");
+    ## Exist returns an integer but isdir should return a logical.
+    t = exist (x, "dir") == 7;
   else
     print_usage ("isdir");
   endif
 endfunction
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -234,16 +234,17 @@ function __go_draw_axes__ (h, plot_strea
 	  img_colormap = parent_figure_obj.colormap;
 	  img_xdata = obj.xdata;
 	  img_ydata = obj.ydata;
 
 	  if (use_gnuplot_for_images)
 
 	    data_idx++;
 	    is_image_data(data_idx) = true;
+	    parametric(data_idx) = false;
 
 	    [y_dim, x_dim] = size (img_data(:,:,1));
 	    if (x_dim > 1)
 	      dx = abs (img_xdata(2)-img_xdata(1))/(x_dim-1);
 	    else
 	      dx = 1;
 	    endif
 	    if (y_dim > 1)
@@ -296,31 +297,31 @@ function __go_draw_axes__ (h, plot_strea
 
 	  else
 	    ximg_data{++ximg_data_idx} = img_data;
 	  endif
 
 	case "line"
 	  data_idx++;
 	  is_image_data(data_idx) = false;
+	  parametric(data_idx) = true;
 	  if (isempty (obj.keylabel))
 	    titlespec{data_idx} = "title \"\"";
 	  else
 	    titlespec{data_idx} = strcat ("title \"", obj.keylabel, "\"");
 	  endif
 	  [style, typ, with] = do_linestyle_command (obj, data_idx, plot_stream);
 	  usingclause{data_idx} = "";
 	  if (have_newer_gnuplot || isnan (typ))
 	    withclause{data_idx} = sprintf ("with %s linestyle %d",
 					    style, data_idx);
 	  else
 	    withclause{data_idx} = sprintf ("with %s linetype %d",
 					    style, typ);
 	  endif
-	  parametric(i) = true;
 	  if (! isempty (obj.zdata))
 	    nd = 3;
 	    xdat = obj.xdata(:);
 	    ydat = obj.ydata(:);
 	    zdat = obj.zdata(:);
 	    if (xautoscale)
 	      [xmin, xmax, xminp] = get_data_limits (xmin, xmax, xminp, xdat);
 	    endif
@@ -432,16 +433,17 @@ function __go_draw_axes__ (h, plot_strea
 	   if (! isempty (obj.zdata))
              warning ("gnuplot (as of v4.2) supports only 2D patches, ignoring z values")
 	   endif
 	   nd = 2;
            cmap = parent_figure_obj.colormap;
            clim = axis_obj.clim;
 	   data_idx++;
 	   is_image_data(data_idx) = false;
+	   parametric(data_idx) = false;
            titlespec{data_idx} = "title \"\"";
 	   usingclause{data_idx} = "";
            if (isfield (obj, "facecolor") && isfield (obj, "cdata"))
              if (strncmp (obj.facecolor, "none", 4))
 	       color = [1, 1, 1];
              elseif (strncmp (obj.facecolor, "flat", 4))
                r = 1 + round ((size (cmap, 1) - 1) * (obj.cdata - clim(1))/(clim(2) - clim(1)));
                r = max (1, min (r, size (cmap, 1)));
@@ -454,17 +456,16 @@ function __go_draw_axes__ (h, plot_strea
              else
 	       color = obj.facecolor;
              endif
            else
              color = [1, 0, 0];
            endif
 
 	   withclause{data_idx} = sprintf ("with filledcurve lc rgb \"#%02x%02x%02x\"",round (255*color));
-	   parametric(data_idx) = true;
 
 	   xdat = obj.xdata(:);
 	   ydat = obj.ydata(:);
 
 	   if (xautoscale)
              [xmin, xmax, xminp] = get_data_limits (xmin, xmax, xminp, xdat);
 	   endif
 	   if (yautoscale)
@@ -472,18 +473,17 @@ function __go_draw_axes__ (h, plot_strea
 	   endif
 	   data{data_idx} = [xdat, ydat]';
 	   usingclause{data_idx} = "using ($1):($2)";
 	 endif
 
          ## patch outline
          data_idx++;
          is_image_data(data_idx) = false;
-         ## I had to use data_idx instead of i here, not sure if o.k. (Kai)
-         parametric(data_idx) = true;
+         parametric(data_idx) = false;
          titlespec{data_idx} = "title \"\"";
 	 usingclause{data_idx} = "";
          if (isfield (obj, "edgecolor"))
            if (strncmp (obj.edgecolor, "none", 4))
              color = [1, 1, 1];
            elseif (strncmp (obj.edgecolor, "flat", 4))
              warning ("\"flat\" for edgecolor not supported");
              color = [0, 0, 0];
@@ -501,31 +501,31 @@ function __go_draw_axes__ (h, plot_strea
          xdat = [xdat; xdat(1)];
 	 ydat = [ydat; ydat(1)];
 	 data{data_idx} = [xdat, ydat]';
 	 usingclause{data_idx} = "using ($1):($2)";
 
 	case "surface"
 	  data_idx++;
 	  is_image_data(data_idx) = false;
+	  parametric(data_idx) = false;
 	  [style, typ, with] = do_linestyle_command (obj, data_idx, plot_stream);
 	  if (isempty (obj.keylabel))
 	    titlespec{data_idx} = "title \"\"";
 	  else
 	    titlespec{data_idx} = strcat ("title \"", obj.keylabel, "\"");
 	  endif
 	  usingclause{data_idx} = "";
 	  if (have_newer_gnuplot || isnan (typ))
 	    withclause{data_idx} = sprintf ("with %s linestyle %d",
 					    style, data_idx);
 	  else
 	    withclause{data_idx} = sprintf ("with %s linetype %d %s",
 					    style, typ, with);
 	  endif
-	  parametric(i) = false;
 	  nd = 3;
 	  xdat = obj.xdata;
 	  ydat = obj.ydata;
 	  zdat = obj.zdata;
 	  if (xautoscale)
 	    tx = xdat(:);
 	    [xmin, xmax, xminp] = get_data_limits (xmin, xmax, xminp, tx);
 	  endif
