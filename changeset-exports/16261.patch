# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363026389 14400
#      Mon Mar 11 14:26:29 2013 -0400
# Node ID b45a90cdb0aeb72e5f917a8a85e78b2e5a032f22
# Parent  0b5ab09dfce46f625fc3e639b3ea596941f3b0a8
3/10 commits reworking the lexer

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -144,24 +144,19 @@ static bool lexer_debug_flag = false;
 
 static std::string strip_trailing_whitespace (char *s);
 
 %}
 
 D       [0-9]
 S       [ \t]
 NL      ((\n)|(\r)|(\r\n))
-SNL     ({S}|{NL})
-EL      (\.\.\.)
-BS      (\\)
-CONT    ({EL}|{BS})
+CONT    ((\.\.\.)|(\\))
 Im      [iIjJ]
 CCHAR   [#%]
-COMMENT ({CCHAR}.*{NL})
-SNLCMT  ({SNL}|{COMMENT})
 IDENT   ([_$a-zA-Z][_$a-zA-Z0-9]*)
 EXPON   ([DdEe][+-]?{D}+)
 NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{EXPON}?)|(0[xX][0-9a-fA-F]+))
 
 ANY_INCLUDING_NL (.|{NL})
 
 %%
 
@@ -244,17 +239,17 @@ ANY_INCLUDING_NL (.|{NL})
     curr_lexer->mark_previous_token_trailing_space ();
   }
 
 <MATRIX_START>{NL} {
     curr_lexer->lexer_debug ("<MATRIX_START>{NL}");
 
     int tok = curr_lexer->previous_token_value ();
 
-    if (! (tok == ';' || tok == '[' || tok == '{'))
+    if (! (tok == ',' || tok == ';' || tok == '[' || tok == '{'))
       curr_lexer->xunput (',');
   }
 
 <KLUGE>@ {
     curr_lexer->lexer_debug ("<KLUGE>@");
     curr_lexer->pop_start_state ();
     return curr_lexer->count_token (CHOOSE_ASSIGNMENT);
   }
@@ -590,37 +585,37 @@ ANY_INCLUDING_NL (.|{NL})
           }
       }
   }
 
 %{
 // Superclass method identifiers.
 %}
 
-{IDENT}@{IDENT}{S}* |
-{IDENT}@{IDENT}.{IDENT}{S}* {
-    curr_lexer->lexer_debug ("{IDENT}@{IDENT}{S}*|{IDENT}@{IDENT}.{IDENT}{S}*");
+{IDENT}@{IDENT} |
+{IDENT}@{IDENT}.{IDENT} {
+    curr_lexer->lexer_debug ("{IDENT}@{IDENT}|{IDENT}@{IDENT}.{IDENT}");
 
     int id_tok = curr_lexer->handle_superclass_identifier ();
 
     if (id_tok >= 0)
       {
         curr_lexer->looking_for_object_index = true;
 
         return curr_lexer->count_token_internal (SUPERCLASSREF);
       }
   }
 
 %{
 // Metaclass query
 %}
 
-\?{IDENT}{S}* |
-\?{IDENT}\.{IDENT}{S}* {
-    curr_lexer->lexer_debug ("\\?{IDENT}{S}*|\\?{IDENT}\\.{IDENT}{S}*");
+\?{IDENT} |
+\?{IDENT}\.{IDENT} {
+    curr_lexer->lexer_debug ("\\?{IDENT}|\\?{IDENT}\\.{IDENT}");
 
     int id_tok = curr_lexer->handle_meta_identifier ();
 
     if (id_tok >= 0)
       {
         curr_lexer->looking_for_object_index = true;
 
         return curr_lexer->count_token_internal (METAQUERY);
@@ -673,75 +668,106 @@ ANY_INCLUDING_NL (.|{NL})
 %{
 // Single quote can either be the beginning of a string or a transpose
 // operator.
 %}
 
 "'" {
     curr_lexer->lexer_debug ("'");
 
-    curr_lexer->current_input_column++;
-
     int tok = curr_lexer->previous_token_value ();
 
     bool transpose = false;
 
     if (curr_lexer->whitespace_is_significant ())
       {
         if (curr_lexer->space_follows_previous_token ())
           {
             if (tok == '[' || tok == '{'
                 || curr_lexer->previous_token_is_binop ())
               {
+                curr_lexer->current_input_column++;
                 int retval = curr_lexer->handle_string ('\'');
                 return curr_lexer->count_token_internal (retval);
               }
             else
               {
                 yyless (0);
                 curr_lexer->xunput (',');
               }
           }
         else
           {
             if (tok == ',' || tok == ';'
                 || curr_lexer->previous_token_is_binop ())
               {
+                curr_lexer->current_input_column++;
                 int retval = curr_lexer->handle_string ('\'');
                 return curr_lexer->count_token_internal (retval);
               }
             else
               return curr_lexer->count_token (QUOTE);
           }
       }
     else
       {
         if (tok == NAME || tok == NUM || tok == IMAG_NUM
             || tok == ')' || tok == ']' || tok == '}')
           return curr_lexer->count_token (QUOTE);
         else
           {
+            curr_lexer->current_input_column++;
             int retval = curr_lexer->handle_string ('\'');
             return curr_lexer->count_token_internal (retval);
           }
       }
   }
 
 %{
 // Double quotes always begin strings.
 %}
 
 \" {
     curr_lexer->lexer_debug ("\"");
 
-    curr_lexer->current_input_column++;
-    int tok = curr_lexer->handle_string ('"');
-
-    return curr_lexer->count_token_internal (tok);
-}
+    int tok = curr_lexer->previous_token_value ();
+
+    bool transpose = false;
+
+    if (curr_lexer->whitespace_is_significant ())
+      {
+        if (curr_lexer->space_follows_previous_token ())
+          {
+            if (tok == '[' || tok == '{'
+                || curr_lexer->previous_token_is_binop ())
+              {
+                curr_lexer->current_input_column++;
+                int retval = curr_lexer->handle_string ('"');
+                return curr_lexer->count_token_internal (retval);
+              }
+            else
+              {
+                yyless (0);
+                curr_lexer->xunput (',');
+              }
+          }
+        else
+          {
+            curr_lexer->current_input_column++;
+            int retval = curr_lexer->handle_string ('"');
+            return curr_lexer->count_token_internal (retval);
+          }
+      }
+    else
+      {
+        curr_lexer->current_input_column++;
+        int retval = curr_lexer->handle_string ('"');
+        return curr_lexer->count_token_internal (retval);
+      }
+  }
 
 %{
 // Other operators.
 %}
 
 ":"     { return curr_lexer->handle_op (":", ':'); }
 ".+"    { return curr_lexer->handle_incompatible_op (".+", EPLUS); }
 ".-"    { return curr_lexer->handle_incompatible_op (".-", EMINUS); }
@@ -2777,20 +2803,16 @@ octave_lexer::handle_meta_identifier (vo
 
 int
 octave_lexer::handle_identifier (void)
 {
   char *yytxt = flex_yytext ();
 
   std::string tok = yytxt;
 
-  int c = yytxt[flex_yyleng()-1];
-
-  bool spc_gobbled = false;
-
   // If we are expecting a structure element, avoid recognizing
   // keywords and other special names and return STRUCT_ELT, which is
   // a string that is also a valid identifier.  But first, we have to
   // decide whether to insert a comma.
 
   if (looking_at_indirect_ref)
     {
       push_token (new token (STRUCT_ELT, tok, input_line_number,
