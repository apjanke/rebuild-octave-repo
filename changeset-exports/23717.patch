# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1498717999 14400
#      Thu Jun 29 02:33:19 2017 -0400
# Node ID 06579337237b55918fcf8de1a2d43a8283b33ee3
# Parent  b89b86d741e6774c6dc8a005fb5bec0cbe9936b0
move configuration variables inside octave::config namespace

* defaults.h, defaults.in.cc: Define access functions for
configuration variables inside octave::config namespace and make
variables static inside defaults.cc, effectively making these values
read-only for users.  Change all uses.

A few variables that may be modified by users remain in the global
namespace.  These may be moved later.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -451,17 +451,17 @@ main_window::open_online_documentation_p
     QUrl ("http://octave.org/doc/interpreter/index.html"));
 }
 
 void
 main_window::display_release_notes (void)
 {
   if (! release_notes_window)
     {
-      std::string news_file = Voct_etc_dir + "/NEWS";
+      std::string news_file = octave::config::oct_etc_dir () + "/NEWS";
 
       QString news;
 
       QFile *file = new QFile (QString::fromStdString (news_file));
       if (file->open (QFile::ReadOnly))
         {
           QTextStream *stream = new QTextStream (file);
           news = stream->readAll ();
diff --git a/libgui/src/resource-manager.cc b/libgui/src/resource-manager.cc
--- a/libgui/src/resource-manager.cc
+++ b/libgui/src/resource-manager.cc
@@ -50,18 +50,19 @@ along with Octave; see the file COPYING.
 resource_manager *resource_manager::instance = nullptr;
 
 static QString
 default_qt_settings_file (void)
 {
   std::string dsf = octave::sys::env::getenv ("OCTAVE_DEFAULT_QT_SETTINGS");
 
   if (dsf.empty ())
-    dsf = Voct_etc_dir + octave::sys::file_ops::dir_sep_str () +
-          "default-qt-settings";
+    dsf = (octave::config::oct_etc_dir ()
+           + octave::sys::file_ops::dir_sep_str ()
+           + "default-qt-settings");
 
   return QString::fromStdString (dsf);
 }
 
 resource_manager::resource_manager (void)
   : settings_directory (), settings_file (), settings (0),
     default_settings (0)
 {
@@ -88,17 +89,17 @@ resource_manager::~resource_manager (voi
 }
 
 QString
 resource_manager::get_gui_translation_dir (void)
 {
   // get environment variable for the locale dir (e.g. from run-octave)
   std::string dldir = octave::sys::env::getenv ("OCTAVE_LOCALE_DIR");
   if (dldir.empty ())
-    dldir = Voct_locale_dir; // env-var empty, load the default location
+    dldir = octave::config::oct_locale_dir (); // env-var empty, load the default location
   return QString::fromStdString (dldir);
 }
 
 void
 resource_manager::config_translators (QTranslator *qt_tr,
                                       QTranslator *qsci_tr,
                                       QTranslator *gui_tr)
 {
diff --git a/libinterp/corefcn/defaults.h b/libinterp/corefcn/defaults.h
--- a/libinterp/corefcn/defaults.h
+++ b/libinterp/corefcn/defaults.h
@@ -25,75 +25,93 @@ along with Octave; see the file COPYING.
 #define octave_defaults_h 1
 
 #include "octave-config.h"
 
 #include <string>
 
 #include "pathsearch.h"
 
-extern OCTINTERP_API std::string Voctave_home;
-extern OCTINTERP_API std::string Voctave_exec_home;
+namespace octave
+{
+  namespace config
+  {
+    // These could be defined as pure constants, but we'll use
+    // functions to be consistent with the values that require
+    // initialization.
+
+    extern OCTINTERP_API std::string canonical_host_type (void);
+    extern OCTINTERP_API std::string release (void);
+    extern OCTINTERP_API std::string default_pager (void);
 
-extern OCTINTERP_API std::string Vbin_dir;
-extern OCTINTERP_API std::string Vinfo_dir;
-extern OCTINTERP_API std::string Vdata_dir;
-extern OCTINTERP_API std::string Vlibexec_dir;
-extern OCTINTERP_API std::string Varch_lib_dir;
+    // These require initialization, so can't be defined as pure
+    // constants.  We use functions to access these values so that
+    // they can't be modified by users.
+
+    extern OCTINTERP_API std::string octave_home (void);
+    extern OCTINTERP_API std::string octave_exec_home (void);
 
-extern OCTINTERP_API std::string Vdataroot_dir;
-extern OCTINTERP_API std::string Vinclude_dir;
-extern OCTINTERP_API std::string Vlib_dir;
-extern OCTINTERP_API std::string Vman1_dir;
-extern OCTINTERP_API std::string Vman1_ext;
-extern OCTINTERP_API std::string Vman_dir;
+    extern OCTINTERP_API std::string bin_dir (void);
+    extern OCTINTERP_API std::string data_dir (void);
+    extern OCTINTERP_API std::string dataroot_dir (void);
+    extern OCTINTERP_API std::string include_dir (void);
+    extern OCTINTERP_API std::string lib_dir (void);
+    extern OCTINTERP_API std::string libexec_dir (void);
+
+    extern OCTINTERP_API std::string local_ver_arch_lib_dir (void);
+    extern OCTINTERP_API std::string local_api_arch_lib_dir (void);
+    extern OCTINTERP_API std::string local_arch_lib_dir (void);
+    extern OCTINTERP_API std::string arch_lib_dir (void);
 
-extern OCTINTERP_API std::string Vlocal_api_arch_lib_dir;
-extern OCTINTERP_API std::string Vlocal_startup_file_dir;
-extern OCTINTERP_API std::string Voct_include_dir;
-extern OCTINTERP_API std::string Voct_lib_dir;
-extern OCTINTERP_API std::string Voct_tests_dir;
-extern OCTINTERP_API std::string Vstartupfile_dir;
+    extern OCTINTERP_API std::string local_ver_oct_file_dir (void);
+    extern OCTINTERP_API std::string local_api_oct_file_dir (void);
+    extern OCTINTERP_API std::string local_oct_file_dir (void);
+    extern OCTINTERP_API std::string oct_file_dir (void);
 
-extern OCTINTERP_API std::string Vlocal_arch_lib_dir;
-extern OCTINTERP_API std::string Vlocal_ver_arch_lib_dir;
+    extern OCTINTERP_API std::string local_ver_fcn_file_dir (void);
+    extern OCTINTERP_API std::string local_api_fcn_file_dir (void);
+    extern OCTINTERP_API std::string local_fcn_file_dir (void);
+    extern OCTINTERP_API std::string fcn_file_dir (void);
+
+    extern OCTINTERP_API std::string oct_data_dir (void);
+    extern OCTINTERP_API std::string oct_etc_dir (void);
+    extern OCTINTERP_API std::string oct_include_dir (void);
+    extern OCTINTERP_API std::string oct_lib_dir (void);
+    extern OCTINTERP_API std::string oct_locale_dir (void);
+    extern OCTINTERP_API std::string oct_tests_dir (void);
+
+    extern OCTINTERP_API std::string info_dir (void);
 
-extern OCTINTERP_API std::string Vlocal_ver_oct_file_dir;
-extern OCTINTERP_API std::string Vlocal_api_oct_file_dir;
-extern OCTINTERP_API std::string Vlocal_oct_file_dir;
+    extern OCTINTERP_API std::string man_dir (void);
+    extern OCTINTERP_API std::string man1_dir (void);
+    extern OCTINTERP_API std::string man1_ext (void);
 
-extern OCTINTERP_API std::string Vlocal_ver_fcn_file_dir;
-extern OCTINTERP_API std::string Vlocal_api_fcn_file_dir;
-extern OCTINTERP_API std::string Vlocal_fcn_file_dir;
+    extern OCTINTERP_API std::string image_dir (void);
+
+    extern OCTINTERP_API std::string local_startupfile_dir (void);
+    extern OCTINTERP_API std::string startupfile_dir (void);
 
-extern OCTINTERP_API std::string Voct_data_dir;
-extern OCTINTERP_API std::string Voct_etc_dir;
-extern OCTINTERP_API std::string Voct_locale_dir;
+    extern OCTINTERP_API std::string local_site_defaults_file (void);
+    extern OCTINTERP_API std::string site_defaults_file (void);
+  }
+}
 
-extern OCTINTERP_API std::string Voct_file_dir;
-extern OCTINTERP_API std::string Vfcn_file_dir;
+// FIXME: these may be changed by users.  Maybe they should be defined
+// somewhere else?
 
-extern OCTINTERP_API std::string Vimage_dir;
+extern OCTINTERP_API std::string Vbuilt_in_docstrings_file;
+
+extern OCTINTERP_API std::string VEXEC_PATH;
 
 // Name of the editor to be invoked by the edit_history command.
 extern OCTINTERP_API std::string VEDITOR;
 
-extern OCTINTERP_API std::string Vdefault_pager;
-extern OCTINTERP_API std::string Vcanonical_host_type;
-extern OCTINTERP_API std::string Voctave_release;
-
-extern OCTINTERP_API std::string Vlocal_site_defaults_file;
-extern OCTINTERP_API std::string Vsite_defaults_file;
-
-extern OCTINTERP_API std::string Vbuilt_in_docstrings_file;
-
-// Name of the FFTW wisdom program.
-extern OCTINTERP_API std::string Vfftw_wisdom_program;
-
-extern OCTINTERP_API void install_defaults (void);
+extern OCTINTERP_API std::string VIMAGE_PATH;
 
 extern OCTINTERP_API void
 set_exec_path (const std::string& path = "");
 
 extern OCTINTERP_API void
 set_image_path (const std::string& path = "");
 
+extern OCTINTERP_API void install_defaults (void);
+
 #endif
diff --git a/libinterp/corefcn/defaults.in.cc b/libinterp/corefcn/defaults.in.cc
--- a/libinterp/corefcn/defaults.in.cc
+++ b/libinterp/corefcn/defaults.in.cc
@@ -47,235 +47,240 @@ along with Octave; see the file COPYING.
 #include "ovl.h"
 #include "ov.h"
 #include "parse.h"
 #include "interpreter.h"
 #include "unwind-prot.h"
 #include "variables.h"
 #include "version.h"
 
+// These are used by functions declared in defaults.h and defined in
+// defaults.cc.
+
 #if ! defined (OCTAVE_CANONICAL_HOST_TYPE)
 #  define OCTAVE_CANONICAL_HOST_TYPE %OCTAVE_CANONICAL_HOST_TYPE%
 #endif
 
+#if ! defined (OCTAVE_RELEASE)
+#  define OCTAVE_RELEASE %OCTAVE_RELEASE%
+#endif
+
 #if ! defined (OCTAVE_DEFAULT_PAGER)
 #  define OCTAVE_DEFAULT_PAGER %OCTAVE_DEFAULT_PAGER%
 #endif
 
-#if ! defined (OCTAVE_ARCHLIBDIR)
-#  define OCTAVE_ARCHLIBDIR %OCTAVE_ARCHLIBDIR%
+#if ! defined (OCTAVE_PREFIX)
+#  define OCTAVE_PREFIX %OCTAVE_PREFIX%
+#endif
+
+#if ! defined (OCTAVE_EXEC_PREFIX)
+#  define OCTAVE_EXEC_PREFIX %OCTAVE_EXEC_PREFIX%
 #endif
 
 #if ! defined (OCTAVE_BINDIR)
 #  define OCTAVE_BINDIR %OCTAVE_BINDIR%
 #endif
 
 #if ! defined (OCTAVE_DATADIR)
 #  define OCTAVE_DATADIR %OCTAVE_DATADIR%
 #endif
 
 #if ! defined (OCTAVE_DATAROOTDIR)
 #  define OCTAVE_DATAROOTDIR %OCTAVE_DATAROOTDIR%
 #endif
 
-#if ! defined (OCTAVE_DOC_CACHE_FILE)
-#  define OCTAVE_DOC_CACHE_FILE %OCTAVE_DOC_CACHE_FILE%
-#endif
-
-#if ! defined (OCTAVE_TEXI_MACROS_FILE)
-#  define OCTAVE_TEXI_MACROS_FILE %OCTAVE_TEXI_MACROS_FILE%
-#endif
-
-#if ! defined (OCTAVE_EXEC_PREFIX)
-#  define OCTAVE_EXEC_PREFIX %OCTAVE_EXEC_PREFIX%
-#endif
-
-#if ! defined (OCTAVE_FCNFILEDIR)
-#  define OCTAVE_FCNFILEDIR %OCTAVE_FCNFILEDIR%
-#endif
-
-#if ! defined (OCTAVE_IMAGEDIR)
-#  define OCTAVE_IMAGEDIR %OCTAVE_IMAGEDIR%
-#endif
-
 #if ! defined (OCTAVE_INCLUDEDIR)
 #  define OCTAVE_INCLUDEDIR %OCTAVE_INCLUDEDIR%
 #endif
 
-#if ! defined (OCTAVE_INFODIR)
-#  define OCTAVE_INFODIR %OCTAVE_INFODIR%
-#endif
-
-#if ! defined (OCTAVE_INFOFILE)
-#  define OCTAVE_INFOFILE %OCTAVE_INFOFILE%
-#endif
-
 #if ! defined (OCTAVE_LIBDIR)
 #  define OCTAVE_LIBDIR %OCTAVE_LIBDIR%
 #endif
 
 #if ! defined (OCTAVE_LIBEXECDIR)
 #  define OCTAVE_LIBEXECDIR %OCTAVE_LIBEXECDIR%
 #endif
 
-#if ! defined (OCTAVE_LIBEXECDIR)
-#  define OCTAVE_LIBEXECDIR %OCTAVE_LIBEXECDIR%
+#if ! defined (OCTAVE_LOCALVERARCHLIBDIR)
+#  define OCTAVE_LOCALVERARCHLIBDIR %OCTAVE_LOCALVERARCHLIBDIR%
+#endif
+
+#if ! defined (OCTAVE_LOCALAPIARCHLIBDIR)
+#  define OCTAVE_LOCALAPIARCHLIBDIR %OCTAVE_LOCALAPIARCHLIBDIR%
 #endif
 
-#if ! defined (OCTAVE_LOCALAPIFCNFILEDIR)
-#  define OCTAVE_LOCALAPIFCNFILEDIR %OCTAVE_LOCALAPIFCNFILEDIR%
+#if ! defined (OCTAVE_LOCALARCHLIBDIR)
+#  define OCTAVE_LOCALARCHLIBDIR %OCTAVE_LOCALARCHLIBDIR%
+#endif
+
+#if ! defined (OCTAVE_ARCHLIBDIR)
+#  define OCTAVE_ARCHLIBDIR %OCTAVE_ARCHLIBDIR%
+#endif
+
+#if ! defined (OCTAVE_LOCALVEROCTFILEDIR)
+#  define OCTAVE_LOCALVEROCTFILEDIR %OCTAVE_LOCALVEROCTFILEDIR%
 #endif
 
 #if ! defined (OCTAVE_LOCALAPIOCTFILEDIR)
 #  define OCTAVE_LOCALAPIOCTFILEDIR %OCTAVE_LOCALAPIOCTFILEDIR%
 #endif
 
-#if ! defined (OCTAVE_LOCALARCHLIBDIR)
-#  define OCTAVE_LOCALARCHLIBDIR %OCTAVE_LOCALARCHLIBDIR%
+#if ! defined (OCTAVE_LOCALOCTFILEDIR)
+#  define OCTAVE_LOCALOCTFILEDIR %OCTAVE_LOCALOCTFILEDIR%
+#endif
+
+#if ! defined (OCTAVE_OCTFILEDIR)
+#  define OCTAVE_OCTFILEDIR %OCTAVE_OCTFILEDIR%
+#endif
+
+#if ! defined (OCTAVE_LOCALVERFCNFILEDIR)
+#  define OCTAVE_LOCALVERFCNFILEDIR %OCTAVE_LOCALVERFCNFILEDIR%
+#endif
+
+#if ! defined (OCTAVE_LOCALAPIFCNFILEDIR)
+#  define OCTAVE_LOCALAPIFCNFILEDIR %OCTAVE_LOCALAPIFCNFILEDIR%
 #endif
 
 #if ! defined (OCTAVE_LOCALFCNFILEDIR)
 #  define OCTAVE_LOCALFCNFILEDIR %OCTAVE_LOCALFCNFILEDIR%
 #endif
 
-#if ! defined (OCTAVE_LOCALOCTFILEDIR)
-#  define OCTAVE_LOCALOCTFILEDIR %OCTAVE_LOCALOCTFILEDIR%
+#if ! defined (OCTAVE_FCNFILEDIR)
+#  define OCTAVE_FCNFILEDIR %OCTAVE_FCNFILEDIR%
 #endif
 
-#if ! defined (OCTAVE_LOCALSTARTUPFILEDIR)
-#  define OCTAVE_LOCALSTARTUPFILEDIR %OCTAVE_LOCALSTARTUPFILEDIR%
+#if ! defined (OCTAVE_OCTDATADIR)
+#  define OCTAVE_OCTDATADIR %OCTAVE_OCTDATADIR%
+#endif
+
+#if ! defined (OCTAVE_OCTETCDIR)
+#  define OCTAVE_OCTETCDIR %OCTAVE_OCTETCDIR%
+#endif
+
+#if ! defined (OCTAVE_OCTINCLUDEDIR)
+#  define OCTAVE_OCTINCLUDEDIR %OCTAVE_OCTINCLUDEDIR%
 #endif
 
-#if ! defined (OCTAVE_LOCALAPIARCHLIBDIR)
-#  define OCTAVE_LOCALAPIARCHLIBDIR %OCTAVE_LOCALAPIARCHLIBDIR%
+#if ! defined (OCTAVE_OCTLIBDIR)
+#  define OCTAVE_OCTLIBDIR %OCTAVE_OCTLIBDIR%
+#endif
+
+#if ! defined (OCTAVE_OCTLOCALEDIR)
+#  define OCTAVE_OCTLOCALEDIR %OCTAVE_OCTLOCALEDIR%
 #endif
 
-#if ! defined (OCTAVE_LOCALVERARCHLIBDIR)
-#  define OCTAVE_LOCALVERARCHLIBDIR %OCTAVE_LOCALVERARCHLIBDIR%
+#if ! defined (OCTAVE_OCTTESTSDIR)
+#  define OCTAVE_OCTTESTSDIR %OCTAVE_OCTTESTSDIR%
 #endif
 
-#if ! defined (OCTAVE_LOCALVERFCNFILEDIR)
-#  define OCTAVE_LOCALVERFCNFILEDIR %OCTAVE_LOCALVERFCNFILEDIR%
+#if ! defined (OCTAVE_INFODIR)
+#  define OCTAVE_INFODIR %OCTAVE_INFODIR%
 #endif
 
-#if ! defined (OCTAVE_LOCALVEROCTFILEDIR)
-#  define OCTAVE_LOCALVEROCTFILEDIR %OCTAVE_LOCALVEROCTFILEDIR%
+#if ! defined (OCTAVE_MANDIR)
+#  define OCTAVE_MANDIR %OCTAVE_MANDIR%
 #endif
 
 #if ! defined (OCTAVE_MAN1DIR)
 #  define OCTAVE_MAN1DIR %OCTAVE_MAN1DIR%
 #endif
 
 #if ! defined (OCTAVE_MAN1EXT)
 #  define OCTAVE_MAN1EXT %OCTAVE_MAN1EXT%
 #endif
 
-#if ! defined (OCTAVE_MANDIR)
-#  define OCTAVE_MANDIR %OCTAVE_MANDIR%
-#endif
-
-#if ! defined (OCTAVE_OCTDATADIR)
-#  define OCTAVE_OCTDATADIR %OCTAVE_OCTDATADIR%
-#endif
-
-#if ! defined (OCTAVE_OCTFILEDIR)
-#  define OCTAVE_OCTFILEDIR %OCTAVE_OCTFILEDIR%
-#endif
-
-#if ! defined (OCTAVE_OCTETCDIR)
-#  define OCTAVE_OCTETCDIR %OCTAVE_OCTETCDIR%
+#if ! defined (OCTAVE_IMAGEDIR)
+#  define OCTAVE_IMAGEDIR %OCTAVE_IMAGEDIR%
 #endif
 
-#if ! defined (OCTAVE_OCTLOCALEDIR)
-#  define OCTAVE_OCTLOCALEDIR %OCTAVE_OCTLOCALEDIR%
-#endif
-
-#if ! defined (OCTAVE_OCTINCLUDEDIR)
-#  define OCTAVE_OCTINCLUDEDIR %OCTAVE_OCTINCLUDEDIR%
-#endif
-
-#if ! defined (OCTAVE_OCTLIBDIR)
-#  define OCTAVE_OCTLIBDIR %OCTAVE_OCTLIBDIR%
-#endif
-
-#if ! defined (OCTAVE_OCTTESTSDIR)
-#  define OCTAVE_OCTTESTSDIR %OCTAVE_OCTTESTSDIR%
-#endif
-
-#if ! defined (OCTAVE_PREFIX)
-#  define OCTAVE_PREFIX %OCTAVE_PREFIX%
+#if ! defined (OCTAVE_LOCALSTARTUPFILEDIR)
+#  define OCTAVE_LOCALSTARTUPFILEDIR %OCTAVE_LOCALSTARTUPFILEDIR%
 #endif
 
 #if ! defined (OCTAVE_STARTUPFILEDIR)
 #  define OCTAVE_STARTUPFILEDIR %OCTAVE_STARTUPFILEDIR%
 #endif
 
-#if ! defined (OCTAVE_RELEASE)
-#  define OCTAVE_RELEASE %OCTAVE_RELEASE%
+// These are used by variables defined in other files.  Maybe they
+// should be moved?  Or maybe it is best to have just one generated file
+// containing variable substitutions?
+
+#if ! defined (OCTAVE_INFOFILE)
+#  define OCTAVE_INFOFILE %OCTAVE_INFOFILE%
+#endif
+
+#if ! defined (OCTAVE_TEXI_MACROS_FILE)
+#  define OCTAVE_TEXI_MACROS_FILE %OCTAVE_TEXI_MACROS_FILE%
+#endif
+
+#if ! defined (OCTAVE_DOC_CACHE_FILE)
+#  define OCTAVE_DOC_CACHE_FILE %OCTAVE_DOC_CACHE_FILE%
 #endif
 
-std::string Voctave_home;
-std::string Voctave_exec_home;
+static bool initialized = false;
+
+static std::string Voctave_home;
+static std::string Voctave_exec_home;
 
-std::string Vbin_dir;
-std::string Vinfo_dir;
-std::string Vdata_dir;
-std::string Vdataroot_dir;
-std::string Vinclude_dir;
-std::string Vlib_dir;
-std::string Vlibexec_dir;
-std::string Varch_lib_dir;
-std::string Vlocal_arch_lib_dir;
-std::string Vlocal_api_arch_lib_dir;
-std::string Vlocal_ver_arch_lib_dir;
+static std::string Vbin_dir;
+static std::string Vdata_dir;
+static std::string Vdataroot_dir;
+static std::string Vinclude_dir;
+static std::string Vlib_dir;
+static std::string Vlibexec_dir;
 
-std::string Vlocal_ver_oct_file_dir;
-std::string Vlocal_api_oct_file_dir;
-std::string Vlocal_oct_file_dir;
+static std::string Vlocal_ver_arch_lib_dir;
+static std::string Vlocal_api_arch_lib_dir;
+static std::string Vlocal_arch_lib_dir;
+static std::string Varch_lib_dir;
+
+static std::string Vlocal_ver_oct_file_dir;
+static std::string Vlocal_api_oct_file_dir;
+static std::string Vlocal_oct_file_dir;
+static std::string Voct_file_dir;
 
-std::string Vlocal_ver_fcn_file_dir;
-std::string Vlocal_api_fcn_file_dir;
-std::string Vlocal_fcn_file_dir;
+static std::string Vlocal_ver_fcn_file_dir;
+static std::string Vlocal_api_fcn_file_dir;
+static std::string Vlocal_fcn_file_dir;
+static std::string Vfcn_file_dir;
 
-std::string Voct_data_dir;
-std::string Voct_lib_dir;
-std::string Voct_include_dir;
-std::string Voct_etc_dir;
-std::string Voct_locale_dir;
+static std::string Voct_data_dir;
+static std::string Voct_etc_dir;
+static std::string Voct_include_dir;
+static std::string Voct_lib_dir;
+static std::string Voct_locale_dir;
+static std::string Voct_tests_dir;
+
+static std::string Vinfo_dir;
 
-std::string Vman1_dir = OCTAVE_MAN1DIR;
-std::string Vman1_ext = OCTAVE_MAN1EXT;
-std::string Vman_dir = OCTAVE_MANDIR;
+static std::string Vman_dir;
+static std::string Vman1_dir;
+static std::string Vman1_ext;
+
+static std::string Vimage_dir;
 
-std::string Vlocal_startup_file_dir;
-std::string Voct_tests_dir;
-std::string Vstartupfile_dir;
+static std::string Vlocal_startupfile_dir;
+static std::string Vstartupfile_dir;
 
-std::string Voct_file_dir;
-std::string Vfcn_file_dir;
+static std::string Vlocal_site_defaults_file;
+static std::string Vsite_defaults_file;
 
-std::string Vimage_dir;
+// FIXME: these may be changed by users.  Maybe they should be defined
+// somewhere else?
+
+std::string Vbuilt_in_docstrings_file;
 
 // The path that will be searched for programs that we execute.
 // (--exec-path path)
-static std::string VEXEC_PATH;
+std::string VEXEC_PATH;
 
 // Name of the editor to be invoked by the edit_history command.
 std::string VEDITOR;
 
-std::string Vdefault_pager = OCTAVE_DEFAULT_PAGER;
-std::string Vcanonical_host_type = OCTAVE_CANONICAL_HOST_TYPE;
-std::string Voctave_release = OCTAVE_RELEASE;
-
-static std::string VIMAGE_PATH;
-
-std::string Vlocal_site_defaults_file;
-std::string Vsite_defaults_file;
-
-std::string Vbuilt_in_docstrings_file;
+std::string VIMAGE_PATH;
 
 // Variables that name directories or files are substituted into source
 // files with "${prefix}/" stripped from the beginning of the string.
 
 // All configure variables of this form should be specified as absolute
 // directory names.  The only ones that should not be absolute here are
 // ones that have had "${prefix}/" or "${exec_prefix} stripped.
 
@@ -333,167 +338,143 @@ set_octave_home (void)
       if (op == oep && ! oh.empty ())
         Voctave_exec_home = oh;
       else
         Voctave_exec_home = oep;
     }
 }
 
 static void
-set_default_info_dir (void)
-{
-  Vinfo_dir = prepend_octave_home (OCTAVE_INFODIR);
-}
-
-static void
-set_default_man_vars (void)
-{
-  Vman_dir = prepend_octave_home (OCTAVE_MANDIR);
-  Vman1_dir = prepend_octave_home (OCTAVE_MAN1DIR);
-  Vman1_ext = prepend_octave_home (OCTAVE_MAN1EXT);
-}
-
-static void
-set_default_data_dirs (void)
-{
-  Vdata_dir = prepend_octave_home (OCTAVE_DATADIR);
-
-  Vdataroot_dir = prepend_octave_home (OCTAVE_DATAROOTDIR);
-}
-
-static void
-set_default_lib_dir (void)
-{
-  Vlib_dir = prepend_octave_exec_home (OCTAVE_LIBDIR);
-}
-
-static void
-set_default_libexec_dir (void)
-{
-  Vlibexec_dir = prepend_octave_exec_home (OCTAVE_LIBEXECDIR);
-}
-
-static void
-set_default_arch_lib_dir (void)
+set_local_site_defaults_file (void)
 {
-  Varch_lib_dir = prepend_octave_exec_home (OCTAVE_ARCHLIBDIR);
-}
-
-static void
-set_default_local_arch_lib_dir (void)
-{
-  Vlocal_arch_lib_dir = prepend_octave_exec_home (OCTAVE_LOCALARCHLIBDIR);
-}
-
-static void
-set_default_local_api_arch_lib_dir (void)
-{
-  Vlocal_api_arch_lib_dir = prepend_octave_exec_home (OCTAVE_LOCALAPIARCHLIBDIR);
-}
+  std::string lsf = octave::sys::env::getenv ("OCTAVE_SITE_INITFILE");
 
-static void
-set_default_local_ver_arch_lib_dir (void)
-{
-  Vlocal_ver_arch_lib_dir = prepend_octave_exec_home (OCTAVE_LOCALVERARCHLIBDIR);
-}
-
-static void
-set_default_local_ver_oct_file_dir (void)
-{
-  Vlocal_ver_oct_file_dir = prepend_octave_exec_home (OCTAVE_LOCALVEROCTFILEDIR);
-}
-
-static void
-set_default_local_api_oct_file_dir (void)
-{
-  Vlocal_api_oct_file_dir = prepend_octave_exec_home (OCTAVE_LOCALAPIOCTFILEDIR);
-}
-
-static void
-set_default_local_oct_file_dir (void)
-{
-  Vlocal_oct_file_dir = prepend_octave_exec_home (OCTAVE_LOCALOCTFILEDIR);
+  if (lsf.empty ())
+    Vlocal_site_defaults_file = Vlocal_startupfile_dir + "/octaverc";
+  else
+    Vlocal_site_defaults_file = lsf;
 }
 
 static void
-set_default_local_ver_fcn_file_dir (void)
-{
-  Vlocal_ver_fcn_file_dir = prepend_octave_home (OCTAVE_LOCALVERFCNFILEDIR);
-}
-
-static void
-set_default_local_api_fcn_file_dir (void)
+set_site_defaults_file (void)
 {
-  Vlocal_api_fcn_file_dir = prepend_octave_home (OCTAVE_LOCALAPIFCNFILEDIR);
-}
+  std::string sf = octave::sys::env::getenv ("OCTAVE_VERSION_INITFILE");
 
-static void
-set_default_local_fcn_file_dir (void)
-{
-  Vlocal_fcn_file_dir = prepend_octave_home (OCTAVE_LOCALFCNFILEDIR);
+  if (sf.empty ())
+    Vsite_defaults_file = Vstartupfile_dir + "/octaverc";
+  else
+    Vsite_defaults_file = sf;
 }
 
-static void
-set_default_fcn_file_dir (void)
+void
+init_defaults (void)
 {
-  Vfcn_file_dir = prepend_octave_home (OCTAVE_FCNFILEDIR);
-}
+  if (initialized)
+    return;
+
+  // OCTAVE_HOME must be set first!
+
+  set_octave_home ();
+
+  Vbin_dir = prepend_octave_exec_home (OCTAVE_BINDIR);
+  Vdata_dir = prepend_octave_home (OCTAVE_DATADIR);
+  Vdataroot_dir = prepend_octave_home (OCTAVE_DATAROOTDIR);
+  Vinclude_dir = prepend_octave_home (OCTAVE_INCLUDEDIR);
+  Vlib_dir = prepend_octave_exec_home (OCTAVE_LIBDIR);
+  Vlibexec_dir = prepend_octave_exec_home (OCTAVE_LIBEXECDIR);
+
+  Vlocal_ver_arch_lib_dir = prepend_octave_exec_home (OCTAVE_LOCALVERARCHLIBDIR);
+  Vlocal_api_arch_lib_dir = prepend_octave_exec_home (OCTAVE_LOCALAPIARCHLIBDIR);
+  Vlocal_arch_lib_dir = prepend_octave_exec_home (OCTAVE_LOCALARCHLIBDIR);
+  Varch_lib_dir = prepend_octave_exec_home (OCTAVE_ARCHLIBDIR);
+
+  Vlocal_ver_oct_file_dir = prepend_octave_exec_home (OCTAVE_LOCALVEROCTFILEDIR);
+  Vlocal_api_oct_file_dir = prepend_octave_exec_home (OCTAVE_LOCALAPIOCTFILEDIR);
+  Vlocal_oct_file_dir = prepend_octave_exec_home (OCTAVE_LOCALOCTFILEDIR);
+  Voct_file_dir = prepend_octave_exec_home (OCTAVE_OCTFILEDIR);
 
-static void
-set_default_image_dir (void)
-{
+  Vlocal_ver_fcn_file_dir = prepend_octave_home (OCTAVE_LOCALVERFCNFILEDIR);
+  Vlocal_api_fcn_file_dir = prepend_octave_home (OCTAVE_LOCALAPIFCNFILEDIR);
+  Vlocal_fcn_file_dir = prepend_octave_home (OCTAVE_LOCALFCNFILEDIR);
+  Vfcn_file_dir = prepend_octave_home (OCTAVE_FCNFILEDIR);
+
+  Voct_data_dir = prepend_octave_home (OCTAVE_OCTDATADIR);
+  Voct_etc_dir = prepend_octave_home (OCTAVE_OCTETCDIR);
+  Voct_include_dir = prepend_octave_home (OCTAVE_OCTINCLUDEDIR);
+  Voct_lib_dir = prepend_octave_exec_home (OCTAVE_OCTLIBDIR);
+  Voct_locale_dir = prepend_octave_home (OCTAVE_OCTLOCALEDIR);
+  Voct_tests_dir = prepend_octave_home (OCTAVE_OCTTESTSDIR);
+
+  Vinfo_dir = prepend_octave_home (OCTAVE_INFODIR);
+
+  Vman_dir = prepend_octave_home (OCTAVE_MANDIR);
+  Vman1_dir = prepend_octave_home (OCTAVE_MAN1DIR);
+  Vman1_ext = OCTAVE_MAN1EXT;
+
   Vimage_dir = prepend_octave_home (OCTAVE_IMAGEDIR);
-}
+
+  Vlocal_startupfile_dir = prepend_octave_home (OCTAVE_LOCALSTARTUPFILEDIR);
+  Vstartupfile_dir = prepend_octave_home (OCTAVE_STARTUPFILEDIR);
 
-static void
-set_default_oct_data_dir (void)
-{
-  Voct_data_dir = prepend_octave_home (OCTAVE_OCTDATADIR);
+  set_local_site_defaults_file ();
+
+  set_site_defaults_file ();
+
+  initialized = true;
 }
 
 static void
-set_default_include_dir (void)
-{
-  Vinclude_dir = prepend_octave_home (OCTAVE_INCLUDEDIR);
-}
-
-static void
-set_default_oct_lib_dir (void)
+set_default_info_file (void)
 {
-  Voct_etc_dir = prepend_octave_exec_home (OCTAVE_OCTLIBDIR);
-}
+  if (Vinfo_file.empty ())
+    {
+      std::string std_info_file = prepend_octave_home (OCTAVE_INFOFILE);
 
-static void
-set_default_oct_include_dir (void)
-{
-  Voct_include_dir = prepend_octave_home (OCTAVE_OCTINCLUDEDIR);
+      std::string oct_info_file = octave::sys::env::getenv ("OCTAVE_INFO_FILE");
+
+      Vinfo_file = (oct_info_file.empty () ? std_info_file : oct_info_file);
+    }
 }
 
 static void
-set_default_oct_etc_dir (void)
+set_default_info_prog (void)
 {
-  Voct_etc_dir = prepend_octave_home (OCTAVE_OCTETCDIR);
+  if (Vinfo_program.empty ())
+    {
+      std::string oct_info_prog = octave::sys::env::getenv ("OCTAVE_INFO_PROGRAM");
+
+      if (oct_info_prog.empty ())
+        Vinfo_program = "info";
+      else
+        Vinfo_program = std::string (oct_info_prog);
+    }
 }
 
 static void
-set_default_oct_locale_dir (void)
+set_default_texi_macros_file (void)
 {
-  Voct_locale_dir = prepend_octave_home (OCTAVE_OCTLOCALEDIR);
+  if (Vtexi_macros_file.empty ())
+    {
+      std::string def_file = prepend_octave_home (OCTAVE_TEXI_MACROS_FILE);
+
+      std::string env_file = octave::sys::env::getenv ("OCTAVE_TEXI_MACROS_FILE");
+
+      Vtexi_macros_file = (env_file.empty () ? def_file : env_file);
+    }
 }
 
 static void
-set_default_oct_file_dir (void)
+set_default_editor (void)
 {
-  Voct_file_dir = prepend_octave_exec_home (OCTAVE_OCTFILEDIR);
-}
+  VEDITOR = "emacs";
 
-static void
-set_default_bin_dir (void)
-{
-  Vbin_dir = prepend_octave_exec_home (OCTAVE_BINDIR);
+  std::string env_editor = octave::sys::env::getenv ("EDITOR");
+
+  if (! env_editor.empty ())
+    VEDITOR = env_editor;
 }
 
 void
 set_exec_path (const std::string& path_arg)
 {
   std::string tpath = path_arg;
 
   if (tpath.empty ())
@@ -558,96 +539,16 @@ set_default_doc_cache_file (void)
 
       std::string env_file = octave::sys::env::getenv ("OCTAVE_DOC_CACHE_FILE");
 
       Vdoc_cache_file = (env_file.empty () ? def_file : env_file);
     }
 }
 
 static void
-set_default_texi_macros_file (void)
-{
-  if (Vtexi_macros_file.empty ())
-    {
-      std::string def_file = prepend_octave_home (OCTAVE_TEXI_MACROS_FILE);
-
-      std::string env_file = octave::sys::env::getenv ("OCTAVE_TEXI_MACROS_FILE");
-
-      Vtexi_macros_file = (env_file.empty () ? def_file : env_file);
-    }
-}
-
-static void
-set_default_info_file (void)
-{
-  if (Vinfo_file.empty ())
-    {
-      std::string std_info_file = prepend_octave_home (OCTAVE_INFOFILE);
-
-      std::string oct_info_file = octave::sys::env::getenv ("OCTAVE_INFO_FILE");
-
-      Vinfo_file = (oct_info_file.empty () ? std_info_file : oct_info_file);
-    }
-}
-
-static void
-set_default_info_prog (void)
-{
-  if (Vinfo_program.empty ())
-    {
-      std::string oct_info_prog = octave::sys::env::getenv ("OCTAVE_INFO_PROGRAM");
-
-      if (oct_info_prog.empty ())
-        Vinfo_program = "info";
-      else
-        Vinfo_program = std::string (oct_info_prog);
-    }
-}
-
-static void
-set_default_editor (void)
-{
-  VEDITOR = "emacs";
-
-  std::string env_editor = octave::sys::env::getenv ("EDITOR");
-
-  if (! env_editor.empty ())
-    VEDITOR = env_editor;
-}
-
-static void
-set_local_site_defaults_file (void)
-{
-  std::string lsf = octave::sys::env::getenv ("OCTAVE_SITE_INITFILE");
-
-  if (lsf.empty ())
-    {
-      Vlocal_site_defaults_file
-        = prepend_octave_home (OCTAVE_LOCALSTARTUPFILEDIR);
-      Vlocal_site_defaults_file.append ("/octaverc");
-    }
-  else
-    Vlocal_site_defaults_file = lsf;
-}
-
-static void
-set_site_defaults_file (void)
-{
-  std::string sf = octave::sys::env::getenv ("OCTAVE_VERSION_INITFILE");
-
-  if (sf.empty ())
-    {
-      Vsite_defaults_file = prepend_octave_home (OCTAVE_STARTUPFILEDIR);
-      Vsite_defaults_file.append ("/octaverc");
-    }
-  else
-    Vsite_defaults_file = sf;
-}
-
-static void
 set_built_in_docstrings_file (void)
 {
   if (Vbuilt_in_docstrings_file.empty ())
     {
       std::string df = octave::sys::env::getenv ("OCTAVE_BUILT_IN_DOCSTRINGS_FILE");
 
       if (df.empty ())
         Vbuilt_in_docstrings_file
@@ -655,77 +556,100 @@ set_built_in_docstrings_file (void)
       else
         Vbuilt_in_docstrings_file = df;
     }
 }
 
 void
 install_defaults (void)
 {
-  // OCTAVE_HOME must be set first!
-
-  set_octave_home ();
-
-  set_default_info_dir ();
-
-  set_default_man_vars ();
+  // In case this hasn't been done yet...
+  init_defaults ();
 
-  set_default_data_dirs ();
-  set_default_lib_dir ();
-  set_default_libexec_dir ();
-  set_default_arch_lib_dir ();
-
-  set_default_include_dir ();
-
-  set_default_local_ver_arch_lib_dir ();
-  set_default_local_api_arch_lib_dir ();
-  set_default_local_arch_lib_dir ();
+  set_default_info_file ();
 
-  set_default_local_ver_oct_file_dir ();
-  set_default_local_api_oct_file_dir ();
-  set_default_local_oct_file_dir ();
-
-  set_default_local_ver_fcn_file_dir ();
-  set_default_local_api_fcn_file_dir ();
-  set_default_local_fcn_file_dir ();
+  set_default_info_prog ();
 
-  set_default_oct_data_dir ();
-  set_default_oct_lib_dir ();
-  set_default_oct_include_dir ();
-  set_default_oct_etc_dir ();
-  set_default_oct_locale_dir ();
+  set_default_texi_macros_file ();
 
-  set_default_fcn_file_dir ();
-  set_default_oct_file_dir ();
-
-  set_default_image_dir ();
-
-  set_default_bin_dir ();
+  set_default_editor ();
 
   set_exec_path ();
 
   set_image_path ();
 
   set_default_doc_cache_file ();
 
-  set_default_texi_macros_file ();
-
-  set_default_info_file ();
-
-  set_default_info_prog ();
-
-  set_default_editor ();
-
-  set_local_site_defaults_file ();
-
-  set_site_defaults_file ();
-
   set_built_in_docstrings_file ();
 }
 
+#define RETURN(VAR)                             \
+  if (! initialized)                            \
+    init_defaults ();                           \
+  return VAR;
+
+namespace octave
+{
+  namespace config
+  {
+    std::string canonical_host_type (void) { return OCTAVE_CANONICAL_HOST_TYPE; }
+
+    std::string release (void) { return OCTAVE_RELEASE; }
+
+    std::string default_pager (void) { return OCTAVE_DEFAULT_PAGER; }
+
+    std::string octave_home (void) { RETURN (Voctave_home); }
+    std::string octave_exec_home (void) { RETURN (Voctave_exec_home); }
+
+    std::string bin_dir (void) { RETURN (Vbin_dir); }
+    std::string data_dir (void) { RETURN (Vdata_dir); }
+    std::string dataroot_dir (void) { RETURN (Vdataroot_dir); }
+    std::string include_dir (void) { RETURN (Vinclude_dir); }
+    std::string lib_dir (void) { RETURN (Vlib_dir); }
+    std::string libexec_dir (void) { RETURN (Vlibexec_dir); }
+    std::string arch_lib_dir (void) { RETURN (Varch_lib_dir); }
+    std::string info_dir (void) { RETURN (Vinfo_dir); }
+
+    std::string local_ver_arch_lib_dir (void) { RETURN (Vlocal_ver_arch_lib_dir); }
+    std::string local_api_arch_lib_dir (void) { RETURN (Vlocal_api_arch_lib_dir); }
+    std::string local_arch_lib_dir (void) { RETURN (Vlocal_arch_lib_dir); }
+
+    std::string local_ver_oct_file_dir (void) { RETURN (Vlocal_ver_oct_file_dir); }
+    std::string local_api_oct_file_dir (void) { RETURN (Vlocal_api_oct_file_dir); }
+    std::string local_oct_file_dir (void) { RETURN (Vlocal_oct_file_dir); }
+    std::string oct_file_dir (void) { RETURN (Voct_file_dir); }
+
+    std::string local_ver_fcn_file_dir (void) { RETURN (Vlocal_ver_fcn_file_dir); }
+    std::string local_api_fcn_file_dir (void) { RETURN (Vlocal_api_fcn_file_dir); }
+    std::string local_fcn_file_dir (void) { RETURN (Vlocal_fcn_file_dir); }
+    std::string fcn_file_dir (void) { RETURN (Vfcn_file_dir); }
+
+    std::string oct_data_dir (void) { RETURN (Voct_data_dir); }
+    std::string oct_etc_dir (void) { RETURN (Voct_etc_dir); }
+    std::string oct_include_dir (void) { RETURN (Voct_include_dir); }
+    std::string oct_lib_dir (void) { RETURN (Voct_lib_dir); }
+    std::string oct_locale_dir (void) { RETURN (Voct_locale_dir); }
+    std::string oct_tests_dir (void) { RETURN (Voct_tests_dir); }
+
+    std::string man_dir (void) { RETURN (Vman_dir); }
+    std::string man1_dir (void) { RETURN (Vman1_dir); }
+    std::string man1_ext (void) { RETURN (Vman1_ext); }
+
+    std::string image_dir (void) { RETURN (Vimage_dir); }
+
+    std::string local_startupfile_dir (void) { RETURN (Vlocal_startupfile_dir); }
+    std::string startupfile_dir (void) { RETURN (Vstartupfile_dir); }
+
+    std::string local_site_defaults_file (void) { RETURN (Vlocal_site_defaults_file); }
+    std::string site_defaults_file (void) { RETURN (Vsite_defaults_file); }
+  }
+}
+
+#undef RETURN
+
 DEFUN (EDITOR, args, nargout,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {@var{val} =} EDITOR ()
 @deftypefnx {} {@var{old_val} =} EDITOR (@var{new_val})
 @deftypefnx {} {} EDITOR (@var{new_val}, "local")
 Query or set the internal variable that specifies the default text editor.
 
 The default value is taken from the environment variable @w{@env{EDITOR}}
@@ -830,17 +754,17 @@ DEFUN (OCTAVE_HOME, args, ,
 Return the name of the top-level Octave installation directory.
 OCTAVE_HOME corresponds to the configuration variable @var{prefix}.
 @seealso{EXEC_PATH, IMAGE_PATH, OCTAVE_EXEC_HOME}
 @end deftypefn */)
 {
   if (args.length () != 0)
     print_usage ();
 
-  return ovl (Voctave_home);
+  return ovl (octave::config::octave_home ());
 }
 
 /*
 %!assert (ischar (OCTAVE_HOME ()))
 %!error OCTAVE_HOME (1)
 */
 
 DEFUN (OCTAVE_EXEC_HOME, args, ,
@@ -851,17 +775,17 @@ architecture-dependendent files.  If not
 is the same as OCTAVE_HOME.  OCTAVE_EXEC_HOME corresponds to the
 configuration variable @var{exec_prefix}.
 @seealso{EXEC_PATH, IMAGE_PATH, OCTAVE_HOME}
 @end deftypefn */)
 {
   if (args.length () != 0)
     print_usage ();
 
-  return ovl (Voctave_exec_home);
+  return ovl (octave::config::octave_exec_home ());
 }
 
 /*
 %!assert (ischar (OCTAVE_EXEC_HOME ()))
 %!error OCTAVE_EXEC_HOME (1)
 */
 
 DEFUNX ("OCTAVE_VERSION", FOCTAVE_VERSION, args, ,
diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -129,17 +129,17 @@ Undocumented internal function.
 }
 
 static void
 initialize_version_info (void)
 {
   octave_value_list args;
 
   args(3) = OCTAVE_RELEASE_DATE;
-  args(2) = Voctave_release;
+  args(2) = octave::config::release ();
   args(1) = OCTAVE_VERSION;
   args(0) = "GNU Octave";
 
   F__version_info__ (args, 0);
 }
 
 OCTAVE_NORETURN static void
 lo_error_handler (const char *fmt, ...)
@@ -781,24 +781,24 @@ namespace octave
 
     if (read_site_files)
       {
         // Execute commands from the site-wide configuration file.
         // First from the file $(prefix)/lib/octave/site/m/octaverc
         // (if it exists), then from the file
         // $(prefix)/share/octave/$(version)/m/octaverc (if it exists).
 
-        int status = safe_source_file (Vlocal_site_defaults_file, context,
-                                       verbose, require_file);
+        int status = safe_source_file (config::local_site_defaults_file (),
+                                       context, verbose, require_file);
 
         if (status)
           exit_status = status;
 
-        status = safe_source_file (Vsite_defaults_file, context, verbose,
-                                   require_file);
+        status = safe_source_file (config::site_defaults_file (),
+                                   context, verbose, require_file);
 
         if (status)
           exit_status = status;
       }
 
     if (read_init_files)
       {
         // Try to execute commands from $HOME/$OCTAVE_INITFILE and
diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -207,25 +207,25 @@ namespace octave
 
   void
   load_path::initialize (bool set_initial_path)
   {
     sys_path = "";
 
     if (set_initial_path)
       {
-        maybe_add_path_elts (sys_path, Vlocal_ver_oct_file_dir);
-        maybe_add_path_elts (sys_path, Vlocal_api_oct_file_dir);
-        maybe_add_path_elts (sys_path, Vlocal_oct_file_dir);
-        maybe_add_path_elts (sys_path, Vlocal_ver_fcn_file_dir);
-        maybe_add_path_elts (sys_path, Vlocal_api_fcn_file_dir);
-        maybe_add_path_elts (sys_path, Vlocal_fcn_file_dir);
-        maybe_add_path_elts (sys_path, Voct_file_dir);
-        maybe_add_path_elts (sys_path, Vfcn_file_dir);
-        maybe_add_path_elts (sys_path, Voct_data_dir);
+        maybe_add_path_elts (sys_path, config::local_ver_oct_file_dir ());
+        maybe_add_path_elts (sys_path, config::local_api_oct_file_dir ());
+        maybe_add_path_elts (sys_path, config::local_oct_file_dir ());
+        maybe_add_path_elts (sys_path, config::local_ver_fcn_file_dir ());
+        maybe_add_path_elts (sys_path, config::local_api_fcn_file_dir ());
+        maybe_add_path_elts (sys_path, config::local_fcn_file_dir ());
+        maybe_add_path_elts (sys_path, config::oct_file_dir ());
+        maybe_add_path_elts (sys_path, config::fcn_file_dir ());
+        maybe_add_path_elts (sys_path, config::oct_data_dir ());
       }
 
     std::string tpath = load_path::m_command_line_path;
 
     if (tpath.empty ())
       tpath = sys::env::getenv ("OCTAVE_PATH");
 
     std::string xpath;
diff --git a/libinterp/corefcn/ls-mat5.cc b/libinterp/corefcn/ls-mat5.cc
--- a/libinterp/corefcn/ls-mat5.cc
+++ b/libinterp/corefcn/ls-mat5.cc
@@ -858,28 +858,29 @@ read_mat5_binary_element (std::istream& 
               tc = make_fcn_handle (fname);
             else
               {
                 std::string mroot =
                   m0.contents ("matlabroot").string_value ();
 
                 if ((fpath.length () >= mroot.length ())
                     && fpath.substr (0, mroot.length ()) == mroot
-                    && Voctave_exec_home != mroot)
+                    && octave::config::octave_exec_home () != mroot)
                   {
                     // If fpath starts with matlabroot, and matlabroot
                     // doesn't equal __octave_config_info__ ("exec_prefix")
                     // then the function points to a version of Octave
                     // or Matlab other than the running version.  In that
                     // case we replace with the same function in the
                     // running version of Octave?
 
                     // First check if just replacing matlabroot is enough
                     std::string str
-                      = Voctave_exec_home + fpath.substr (mroot.length ());
+                      = (octave::config::octave_exec_home ()
+                         + fpath.substr (mroot.length ()));
                     octave::sys::file_stat fs (str);
 
                     if (fs.exists ())
                       {
                         size_t xpos
                           = str.find_last_of (octave::sys::file_ops::dir_sep_chars ());
 
                         std::string dir_name = str.substr (0, xpos);
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -318,17 +318,17 @@ specified option.
   static octave_scalar_map build_env;
   static octave_scalar_map build_features;
 
   static bool initialized = false;
 
   if (! initialized)
     {
       std::map<std::string, octave_value> conf_info_map
-        = {{ "DEFAULT_PAGER", Vdefault_pager },
+        = {{ "DEFAULT_PAGER", octave::config::default_pager () },
 
 #if defined (OCTAVE_ENABLE_64)
            { "ENABLE_64", true },
 #else
            { "ENABLE_64", false },
 #endif
 
 #if defined (OCTAVE_ENABLE_ATOMIC_REFCOUNT)
@@ -363,55 +363,55 @@ specified option.
 
 #if defined (OCTAVE_ENABLE_OPENMP)
            { "ENABLE_OPENMP", true },
 #else
            { "ENABLE_OPENMP", false },
 #endif
 
            { "api_version", OCTAVE_API_VERSION },
-           { "archlibdir", Varch_lib_dir },
-           { "bindir", Vbin_dir },
-           { "canonical_host_type", Vcanonical_host_type },
-           { "datadir", Vdata_dir },
-           { "datarootdir", Vdataroot_dir },
-           { "fcnfiledir", Vfcn_file_dir },
+           { "archlibdir", octave::config::arch_lib_dir () },
+           { "bindir", octave::config::bin_dir () },
+           { "canonical_host_type", octave::config::canonical_host_type () },
+           { "datadir", octave::config::data_dir () },
+           { "datarootdir", octave::config::dataroot_dir () },
+           { "fcnfiledir", octave::config::fcn_file_dir () },
            { "fftw_version", octave::fftw_version () },
            { "fftwf_version", octave::fftwf_version () },
-           { "imagedir", Vimage_dir },
-           { "includedir", Vinclude_dir },
-           { "infodir", Vinfo_dir },
+           { "imagedir", octave::config::image_dir () },
+           { "includedir", octave::config::include_dir () },
+           { "infodir", octave::config::info_dir () },
            { "infofile", Vinfo_file },
-           { "libdir", Vlib_dir },
-           { "libexecdir", Vlibexec_dir },
+           { "libdir", octave::config::lib_dir () },
+           { "libexecdir", octave::config::libexec_dir () },
            // Each library and executable has its own definition of the hg
            // id.  We check for consistency when Octave starts so we just
            // store and report one of them here.
            { "hg_id", liboctinterp_hg_id () },
-           { "localapiarchlibdir", Vlocal_api_arch_lib_dir },
-           { "localapifcnfiledir", Vlocal_api_fcn_file_dir },
-           { "localapioctfiledir", Vlocal_api_oct_file_dir },
-           { "localarchlibdir", Vlocal_arch_lib_dir },
-           { "localfcnfiledir", Vlocal_fcn_file_dir },
-           { "localoctfiledir", Vlocal_oct_file_dir },
-           { "localstartupfiledir", Vlocal_startup_file_dir },
-           { "localverarchlibdir", Vlocal_ver_arch_lib_dir },
-           { "localverfcnfiledir", Vlocal_ver_fcn_file_dir },
-           { "localveroctfiledir", Vlocal_ver_oct_file_dir },
-           { "man1dir", Vman1_dir },
-           { "man1ext", Vman1_ext },
-           { "mandir", Vman_dir },
-           { "octdatadir", Voct_data_dir },
-           { "octfiledir", Voct_file_dir },
-           { "octetcdir", Voct_etc_dir },
-           { "octincludedir", Voct_include_dir },
-           { "octlibdir", Voct_lib_dir },
-           { "octtestsdir", Voct_tests_dir },
+           { "localapiarchlibdir", octave::config::local_api_arch_lib_dir () },
+           { "localapifcnfiledir", octave::config::local_api_fcn_file_dir () },
+           { "localapioctfiledir", octave::config::local_api_oct_file_dir () },
+           { "localarchlibdir", octave::config::local_arch_lib_dir () },
+           { "localfcnfiledir", octave::config::local_fcn_file_dir () },
+           { "localoctfiledir", octave::config::local_oct_file_dir () },
+           { "localstartupfiledir", octave::config::local_startupfile_dir () },
+           { "localverarchlibdir", octave::config::local_ver_arch_lib_dir () },
+           { "localverfcnfiledir", octave::config::local_ver_fcn_file_dir () },
+           { "localveroctfiledir", octave::config::local_ver_oct_file_dir () },
+           { "man1dir", octave::config::man1_dir () },
+           { "man1ext", octave::config::man1_ext () },
+           { "mandir", octave::config::man_dir () },
+           { "octdatadir", octave::config::oct_data_dir () },
+           { "octfiledir", octave::config::oct_file_dir () },
+           { "octetcdir", octave::config::oct_etc_dir () },
+           { "octincludedir", octave::config::oct_include_dir () },
+           { "octlibdir", octave::config::oct_lib_dir () },
+           { "octtestsdir", octave::config::oct_tests_dir () },
            { "release_date", OCTAVE_RELEASE_DATE },
-           { "startupfiledir", Vstartupfile_dir },
+           { "startupfiledir", octave::config::startupfile_dir () },
            { "version", OCTAVE_VERSION }};
 
       std::map<std::string, octave_value> build_env_map
         = {{ "AMD_CPPFLAGS", octave::build_env::AMD_CPPFLAGS },
            { "AMD_LDFLAGS", octave::build_env::AMD_LDFLAGS },
            { "AMD_LIBS", octave::build_env::AMD_LIBS },
            { "AR", octave::build_env::AR },
            { "ARFLAGS", octave::build_env::ARFLAGS },
diff --git a/libinterp/octave-value/ov-dld-fcn.cc b/libinterp/octave-value/ov-dld-fcn.cc
--- a/libinterp/octave-value/ov-dld-fcn.cc
+++ b/libinterp/octave-value/ov-dld-fcn.cc
@@ -43,33 +43,37 @@ octave_dld_function::octave_dld_function
   (octave_builtin::fcn ff, const octave::dynamic_library& shl,
    const std::string& nm, const std::string& ds)
   : octave_builtin (ff, nm, ds), sh_lib (shl)
 {
   mark_fcn_file_up_to_date (time_parsed ());
 
   std::string file_name = fcn_file_name ();
 
+  std::string oct_file_dir = octave::config::oct_file_dir ();
+
   system_fcn_file
     = (! file_name.empty ()
-       && Voct_file_dir == file_name.substr (0, Voct_file_dir.length ()));
+       && oct_file_dir == file_name.substr (0, oct_file_dir.length ()));
 }
 
 octave_dld_function::octave_dld_function
   (octave_builtin::meth mm, const octave::dynamic_library& shl,
    const std::string& nm, const std::string& ds)
   : octave_builtin (mm, nm, ds), sh_lib (shl)
 {
   mark_fcn_file_up_to_date (time_parsed ());
 
   std::string file_name = fcn_file_name ();
 
+  std::string oct_file_dir = octave::config::oct_file_dir ();
+
   system_fcn_file
     = (! file_name.empty ()
-       && Voct_file_dir == file_name.substr (0, Voct_file_dir.length ()));
+       && oct_file_dir == file_name.substr (0, oct_file_dir.length ()));
 }
 
 octave_dld_function::~octave_dld_function (void)
 {
   octave::dynamic_loader& dyn_loader
     = octave::__get_dynamic_loader__ ("~octave_dld_function");
 
   dyn_loader.remove_oct (my_name, sh_lib);
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -251,21 +251,22 @@ octave_fcn_handle::is_equal_to (const oc
 
 bool
 octave_fcn_handle::set_fcn (const std::string& octaveroot,
                             const std::string& fpath)
 {
   if (octaveroot.length () != 0
       && fpath.length () >= octaveroot.length ()
       && fpath.substr (0, octaveroot.length ()) == octaveroot
-      && Voctave_exec_home != octaveroot)
+      && octave::config::octave_exec_home () != octaveroot)
     {
       // First check if just replacing matlabroot is enough
       std::string str
-        = Voctave_exec_home + fpath.substr (octaveroot.length ());
+        = (octave::config::octave_exec_home ()
+           + fpath.substr (octaveroot.length ()));
       octave::sys::file_stat fs (str);
 
       if (fs.exists ())
         {
           size_t xpos = str.find_last_of (octave::sys::file_ops::dir_sep_chars ());
 
           std::string dir_name = str.substr (0, xpos);
 
@@ -369,17 +370,17 @@ octave_fcn_handle::save_ascii (std::ostr
             }
         }
     }
   else
     {
       octave_function *f = function_value ();
       std::string fnm = (f ? f->fcn_file_name () : "");
 
-      os << "# octaveroot: " << Voctave_exec_home << "\n";
+      os << "# octaveroot: " << octave::config::octave_exec_home () << "\n";
       if (! fnm.empty ())
         os << "# path: " << fnm << "\n";
       os << nm << "\n";
     }
 
   return true;
 }
 
@@ -555,17 +556,17 @@ octave_fcn_handle::save_binary (std::ost
     }
   else
     {
       std::ostringstream nmbuf;
 
       octave_function *f = function_value ();
       std::string fnm = (f ? f->fcn_file_name () : "");
 
-      nmbuf << nm << "\n" << Voctave_exec_home << "\n" << fnm;
+      nmbuf << nm << "\n" << octave::config::octave_exec_home () << "\n" << fnm;
 
       std::string buf_str = nmbuf.str ();
       int32_t tmp = buf_str.length ();
       os.write (reinterpret_cast<char *> (&tmp), 4);
       os.write (buf_str.c_str (), buf_str.length ());
     }
 
   return true;
@@ -857,17 +858,17 @@ octave_fcn_handle::save_hdf5 (octave_hdf
                                    "", false, save_as_floats))
                 break;
             }
           H5Gclose (data_hid);
         }
     }
   else
     {
-      std::string octaveroot = Voctave_exec_home;
+      std::string octaveroot = octave::config::octave_exec_home ();
 
       octave_function *f = function_value ();
       std::string fpath = (f ? f->fcn_file_name () : "");
 
       H5Sclose (space_hid);
       hdims[0] = 1;
       hdims[1] = octaveroot.length ();
       space_hid = H5Screate_simple (0 , hdims, 0);
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -340,17 +340,18 @@ initial_java_dir (void)
 {
   static std::string java_dir;
 
   if (java_dir.empty ())
     {
       java_dir = octave::sys::env::getenv ("OCTAVE_JAVA_DIR");
 
       if (java_dir.empty ())
-        java_dir = Vfcn_file_dir + octave::sys::file_ops::dir_sep_str () + "java";
+        java_dir = (octave::config::fcn_file_dir ()
+                    + octave::sys::file_ops::dir_sep_str () + "java");
     }
 
   return java_dir;
 }
 
 // Read the content of a file filename (usually "classpath.txt")
 //
 // Returns a string with all lines concatenated and separated
diff --git a/libinterp/octave-value/ov-mex-fcn.cc b/libinterp/octave-value/ov-mex-fcn.cc
--- a/libinterp/octave-value/ov-mex-fcn.cc
+++ b/libinterp/octave-value/ov-mex-fcn.cc
@@ -48,19 +48,20 @@ octave_mex_function::octave_mex_function
    const std::string& nm)
   : octave_function (nm), m_mex_fcn_ptr (fptr), m_exit_fcn_ptr (0),
     m_is_fmex (fmex), m_sh_lib (shl)
 {
   mark_fcn_file_up_to_date (time_parsed ());
 
   std::string file_name = fcn_file_name ();
 
+  std::string oct_file_dir = octave::config::oct_file_dir ();
   m_is_system_fcn_file
     = (! file_name.empty ()
-       && Voct_file_dir == file_name.substr (0, Voct_file_dir.length ()));
+       && oct_file_dir == file_name.substr (0, oct_file_dir.length ()));
 }
 
 octave_mex_function::~octave_mex_function (void)
 {
   if (m_exit_fcn_ptr)
     (*m_exit_fcn_ptr) ();
 
   octave::dynamic_loader& dyn_loader
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -334,17 +334,18 @@ octave_user_function::mark_as_system_fcn
       //
       // We probably also don't need to get the library directory
       // every time, but since this function is only called when the
       // function file is parsed, it probably doesn't matter that
       // much.
 
       std::string ff_name = fcn_file_in_path (file_name);
 
-      if (Vfcn_file_dir == ff_name.substr (0, Vfcn_file_dir.length ()))
+      std::string fcn_file_dir = octave::config::fcn_file_dir ();
+      if (fcn_file_dir == ff_name.substr (0, fcn_file_dir.length ()))
         system_fcn_file = true;
     }
   else
     system_fcn_file = false;
 }
 
 void
 octave_user_function::erase_subfunctions (void)
diff --git a/libinterp/version.cc b/libinterp/version.cc
--- a/libinterp/version.cc
+++ b/libinterp/version.cc
@@ -83,17 +83,19 @@ octave_name_version_copyright_copying_an
   std::string sep = (html ? "\n</p>\n<p>\n" : "\n\n");
 
   return octave_name_version_and_copyright ()
          + br
          + "This is free software; see the source code for copying conditions."
          + br
          + octave_warranty_statement (extra_info)
          + sep
-         + "Octave was configured for \"" + Vcanonical_host_type + "\".";
+         + "Octave was configured for \""
+         + octave::config::canonical_host_type ()
+         + "\".";
 }
 
 std::string
 octave_name_version_copyright_copying_warranty_and_bugs
   (bool html, const std::string& extra_info)
 {
   std::string sep = (html ? "\n</p>\n<p>\n" : "\n\n");
 
