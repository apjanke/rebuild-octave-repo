# HG changeset patch
# User Rik <rik@octave.org>
# Date 1501216759 25200
#      Thu Jul 27 21:39:19 2017 -0700
# Node ID 3f7226b07a38a66587ae85d84edd1236c220efd8
# Parent  9d67bd90681b21b4b85269b97a37e676483bf0d4
Change string append += "c" to += 'c' to avoid string constructor.

* dialog.cc (acceptSelection), file-editor-tab.cc (update_lexer_settings),
parser.cc (global_search), __init_fltk__.cc (find_index_by_name):
Change string append += "c" to += 'c' where c is any single char to avoid
string constructor.

diff --git a/libgui/src/dialog.cc b/libgui/src/dialog.cc
--- a/libgui/src/dialog.cc
+++ b/libgui/src/dialog.cc
@@ -516,17 +516,17 @@ void FileDialog::acceptSelection (void)
   // Matlab expects just the filename, whereas the file dialog gave us
   // full path names, so fix it.
 
   for (int i = 0; i < string_result.size (); i++)
     string_result[i] = QFileInfo (string_result[i]).fileName ();
 
   // if not showing only dirs, add end slash for the path component
   if (testOption (QFileDialog::ShowDirsOnly)  == false)
-    path += "/";
+    path += '/';
 
   // convert to native slashes
   path = QDir::toNativeSeparators (path);
 
   QStringList name_filters = nameFilters ();
   idx = name_filters.indexOf (selectedNameFilter ()) + 1;
 
   // send the selected info
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -673,20 +673,20 @@ file_editor_tab::update_lexer_settings (
           // changing frequently, then if functions should also be auto-
           // completed, the date of any existing file is checked.
 
           // Keywords are always used
           _prep_apis_file = prep_apis_path + lexer->lexer () + "_k";
 
           // Buitlins are only used if the user settings say so
           if (octave_builtins)
-            _prep_apis_file += "b";
+            _prep_apis_file += 'b';
 
           if (octave_functions)
-            _prep_apis_file += "f";
+            _prep_apis_file += 'f';
 
          _prep_apis_file += ".pap"; // final name of apis file
 
           // check whether the APIs info needs to be prepared and saved
           QFileInfo apis_file = QFileInfo (_prep_apis_file);
           // flag whether apis file needs update
           update_apis = ! apis_file.exists ();
 
diff --git a/libgui/src/qtinfo/parser.cc b/libgui/src/qtinfo/parser.cc
--- a/libgui/src/qtinfo/parser.cc
+++ b/libgui/src/qtinfo/parser.cc
@@ -557,17 +557,17 @@ QString
 parser::global_search (const QString& text, int max_founds)
 {
   QString results;
   QStringList words = text.split (" ", QString::SkipEmptyParts);
 
   QString re_program ("(" + QRegExp::escape (words.at (0)));
   for (int i = 1; i < words.size (); i++)
     re_program += "|" + QRegExp::escape (words.at (i));
-  re_program += ")";
+  re_program += ')';
 
   QRegExp re (re_program, Qt::CaseInsensitive);
 
   results.append ("<html><body>\n<h1>Search results</h1>\n<b>Results for:</b> ");
   results.append (text);
   results.append ("<br>\n");
 
   for (int i = 0; i < _info_files.size (); i++)
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -364,17 +364,17 @@ public:
     std::string menupath;
     for (int t = 0; t < m_menubar->size (); t++)
       {
         Fl_Menu_Item *m = const_cast<Fl_Menu_Item *> (&(m_menubar->menu ()[t]));
         if (m->submenu ())
           {
             // item has submenu
             if (! menupath.empty ())
-              menupath += "/";
+              menupath += '/';
             menupath += m->label ();
 
             if (menupath == findname)
               return (t);
           }
         else
           {
             // End of submenu? Pop back one level.
@@ -385,17 +385,17 @@ public:
                   menupath.erase (idx);
                 else
                   menupath.clear ();
                 continue;
               }
             // Menu item?
             std::string itempath = menupath;
             if (! itempath.empty ())
-              itempath += "/";
+              itempath += '/';
             itempath += m->label ();
 
             if (itempath == findname)
               return (t);
           }
       }
     return (-1);
   }
