# HG changeset patch
# User jwe
# Date 1199401519 0
#      Thu Jan 03 23:05:19 2008 +0000
# Node ID 9c7073003700c2390739c8f3261bbd860d4f9fdb
# Parent  72b0181c41f1a199810267bd9fb24452cf2d1545
[project @ 2008-01-03 23:05:19 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2008-01-03  David Bateman  <dbateman@free.fr>
+
+	* MSparse.cc (SPARSE_A2A2_OP): If first arg is scalar zero, then
+	need unary operator on remaining argument
+	* Sparse-op-defs.h (SPARSE_SMSM_BIN_OP_1): ditto.
+
 2007-12-21  John W. Eaton  <jwe@octave.org>
 
 	Version 3.0.0 released.
 
 2007-12-18  David Bateman  <dbateman@free.fr>
 
 	* Sparse.cc (template <class T> Sparse<T> Sparse<T>::index 
 	(idx_vector&, int) const): Fix case indexing of non zero scalar 
diff --git a/liboctave/MSparse.cc b/liboctave/MSparse.cc
--- a/liboctave/MSparse.cc
+++ b/liboctave/MSparse.cc
@@ -287,17 +287,17 @@ SPARSE_SA2_OP_2 (/)
     octave_idx_type a_nc = a.cols (); \
  \
     octave_idx_type b_nr = b.rows (); \
     octave_idx_type b_nc = b.cols (); \
  \
     if (a_nr == 1 && a_nc == 1) \
       { \
         if (a.elem(0,0) == 0.) \
-          r = MSparse<T> (b); \
+          r =  OP MSparse<T> (b); \
         else \
           { \
 	    r = MSparse<T> (b_nr, b_nc, a.data(0) OP 0.); \
             \
             for (octave_idx_type j = 0 ; j < b_nc ; j++) \
               { \
                 OCTAVE_QUIT; \
                 octave_idx_type idxj = j * b_nr; \
diff --git a/liboctave/Sparse-op-defs.h b/liboctave/Sparse-op-defs.h
--- a/liboctave/Sparse-op-defs.h
+++ b/liboctave/Sparse-op-defs.h
@@ -391,17 +391,17 @@ along with Octave; see the file COPYING.
     octave_idx_type m1_nc = m1.cols (); \
  \
     octave_idx_type m2_nr = m2.rows (); \
     octave_idx_type m2_nc = m2.cols (); \
  \
     if (m1_nr == 1 && m1_nc == 1) \
       { \
         if (m1.elem(0,0) == 0.) \
-          r = R (m2); \
+          r = OP R (m2); \
         else \
           { \
 	    r = R (m2_nr, m2_nc, m1.data(0) OP 0.); \
             \
             for (octave_idx_type j = 0 ; j < m2_nc ; j++) \
               { \
                 OCTAVE_QUIT; \
                 octave_idx_type idxj = j * m2_nr; \
diff --git a/src/OPERATORS/op-sm-sm.cc b/src/OPERATORS/op-sm-sm.cc
--- a/src/OPERATORS/op-sm-sm.cc
+++ b/src/OPERATORS/op-sm-sm.cc
@@ -47,17 +47,29 @@ DEFUNOP (transpose, sparse_matrix)
   CAST_UNOP_ARG (const octave_sparse_matrix&);
   return octave_value (v.sparse_matrix_value().transpose (),
 		       v.matrix_type ().transpose ());
 }
 
 // sparse matrix by sparse matrix ops.
 
 DEFBINOP_OP (add, sparse_matrix, sparse_matrix, +)
-DEFBINOP_OP (sub, sparse_matrix, sparse_matrix, -)
+
+// DEFBINOP_OP (sub, sparse_matrix, sparse_matrix, -)
+
+  static octave_value
+  oct_binop_sub (const octave_base_value& a1, const octave_base_value& a2)
+  {
+    const octave_sparse_matrix& v1 = dynamic_cast<const octave_sparse_matrix&> (a1);
+    const octave_sparse_matrix& v2 = dynamic_cast<const octave_sparse_matrix&> (a2);
+    SparseMatrix m = v1.sparse_matrix_value () - v2.sparse_matrix_value ();
+
+    return octave_value (m);
+  }
+
 DEFBINOP_OP (mul, sparse_matrix, sparse_matrix, *)
 
 DEFBINOP (div, sparse_matrix, sparse_matrix)
 {
   CAST_BINOP_ARGS (const octave_sparse_matrix&, const octave_sparse_matrix&);
 
   if (v2.rows() == 1 && v2.columns() == 1)
     {
