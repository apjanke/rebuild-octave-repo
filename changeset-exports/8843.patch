# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1235411097 18000
#      Mon Feb 23 12:44:57 2009 -0500
# Node ID b9ce57a309a306257c937314d0b3ff88511042ea
# Parent  be7b30a24938c1b92e6036533996f9e98b58b4b7
don't store breakpoint info in tree_statement object

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,24 @@
 2009-02-23  John W. Eaton  <jwe@octave.org>
 
+	* pt-select.h, pt-select.cc (tree_if_command::set_breakpoint,
+	tree_if_command::delete_breakpoint): New functions.
+	(tree_switch_command::set_breakpoint,
+	tree_switch_command::delete_breakpoint): New functions.
+	* pt-stmt.h, pt-stmt.cc (tree_statement::set_breakpoint,
+	tree_statement::delete_breakpoint, tree_statement::is_breakpoint):
+	Delegate real work to cmd or expr.
+	(tree_statement::bp): Delete data member.
+	(tree_statement::tree_statement): Don't initialize bp.
+	(tree_statement::dup): Don't copy bp.
+
+	* pt.h (tree::line (int), tree:column (int)): New functions.
+	(tree:set_breakpoint, tree::delete_breakpoint): Now virtual.
+
 	* parse.y (finish_if_command): Also store line and column info for
 	if statement in first element of list.
 	(finish_switch_command): Likewise, for switch.
 
 	* input.cc (last_debugging_command): New static variable.
 	(octave_gets): Set it here.  Don't insert repeated debugging
 	commands in the history list.
 
diff --git a/src/pt-select.cc b/src/pt-select.cc
--- a/src/pt-select.cc
+++ b/src/pt-select.cc
@@ -88,16 +88,40 @@ tree_if_command_list::accept (tree_walke
 
 tree_if_command::~tree_if_command (void)
 {
   delete list;
   delete lead_comm;
   delete trail_comm;
 }
 
+void
+tree_if_command::set_breakpoint (void)
+{
+  if (list)
+    {
+      tree_if_clause *elt = list->front ();
+
+      if (elt)
+	elt->set_breakpoint ();
+    }
+}
+
+void
+tree_if_command::delete_breakpoint (void)
+{
+  if (list)
+    {
+      tree_if_clause *elt = list->front ();
+
+      if (elt)
+	elt->set_breakpoint ();
+    }
+}
+
 tree_command *
 tree_if_command::dup (symbol_table::scope_id scope,
 		      symbol_table::context_id context)
 {
   return new tree_if_command (list ? list->dup (scope, context) : 0,
 			      lead_comm ? lead_comm->dup () : 0,
 			      trail_comm ? trail_comm->dup () : 0,
 			      line (), column ());
@@ -201,16 +225,40 @@ tree_switch_case_list::accept (tree_walk
 tree_switch_command::~tree_switch_command (void)
 {
   delete expr;
   delete list;
   delete lead_comm;
   delete trail_comm;
 }
 
+void
+tree_switch_command::set_breakpoint (void)
+{
+  if (list)
+    {
+      tree_switch_case *elt = list->front ();
+
+      if (elt)
+	elt->set_breakpoint ();
+    }
+}
+
+void
+tree_switch_command::delete_breakpoint (void)
+{
+  if (list)
+    {
+      tree_switch_case *elt = list->front ();
+
+      if (elt)
+	elt->set_breakpoint ();
+    }
+}
+
 tree_command *
 tree_switch_command::dup (symbol_table::scope_id scope,
 			  symbol_table::context_id context)
 {
   return new tree_switch_command (expr ? expr->dup (scope, context) : 0,
 				  list ? list->dup (scope, context) : 0,
 				  lead_comm ? lead_comm->dup () : 0,
 				  trail_comm ? trail_comm->dup () : 0,
diff --git a/src/pt-select.h b/src/pt-select.h
--- a/src/pt-select.h
+++ b/src/pt-select.h
@@ -128,16 +128,20 @@ public:
     : tree_command (l, c), list (0), lead_comm (0), trail_comm (0) { }
 
   tree_if_command (tree_if_command_list *lst, octave_comment_list *lc,
 		   octave_comment_list *tc, int l = -1, int c = -1)
     : tree_command (l, c), list (lst), lead_comm (lc), trail_comm (tc) { }
 
   ~tree_if_command (void);
 
+  void set_breakpoint (void);
+
+  void delete_breakpoint (void);
+
   tree_if_command_list *cmd_list (void) { return list; }
 
   octave_comment_list *leading_comment (void) { return lead_comm; }
 
   octave_comment_list *trailing_comment (void) { return trail_comm; }
 
   tree_command *dup (symbol_table::scope_id scope,
 		     symbol_table::context_id context);
@@ -261,16 +265,20 @@ public:
   tree_switch_command (tree_expression *e, tree_switch_case_list *lst,
 		       octave_comment_list *lc, octave_comment_list *tc, 
 		       int l = -1, int c = -1)
     : tree_command (l, c), expr (e), list (lst), lead_comm (lc),
       trail_comm (tc) { }
 
   ~tree_switch_command (void);
 
+  void set_breakpoint (void);
+
+  void delete_breakpoint (void);
+
   tree_expression *switch_value (void) { return expr; }
 
   tree_switch_case_list *case_list (void) { return list; }
 
   octave_comment_list *leading_comment (void) { return lead_comm; }
 
   octave_comment_list *trailing_comment (void) { return trail_comm; }
 
diff --git a/src/pt-stmt.cc b/src/pt-stmt.cc
--- a/src/pt-stmt.cc
+++ b/src/pt-stmt.cc
@@ -65,16 +65,40 @@ tree_statement::set_print_flag (bool pri
 }
 
 bool
 tree_statement::print_result (void)
 {
   return expr && expr->print_result ();
 }
 
+void
+tree_statement::set_breakpoint (void)
+{
+  if (cmd)
+    cmd->set_breakpoint ();
+  else if (expr)
+    expr->set_breakpoint ();
+}
+
+void
+tree_statement::delete_breakpoint (void)
+{
+  if (cmd)
+    cmd->delete_breakpoint ();
+  else if (expr)
+    expr->delete_breakpoint ();
+}
+
+bool
+tree_statement::is_breakpoint (void) const
+{
+  return cmd ? cmd->is_breakpoint () : (expr ? expr->is_breakpoint () : false);
+}
+
 int
 tree_statement::line (void) const
 {
   return cmd ? cmd->line () : (expr ? expr->line () : -1);
 }
 
 int
 tree_statement::column (void) const
@@ -116,18 +140,16 @@ tree_statement::dup (symbol_table::scope
 		     symbol_table::context_id context)
 {
   tree_statement *new_stmt = new tree_statement ();
 
   new_stmt->cmd = cmd ? cmd->dup (scope, context) : 0;
 
   new_stmt->expr = expr ? expr->dup (scope, context) : 0;
 
-  new_stmt->bp = bp;
-
   new_stmt->comm = comm ? comm->dup () : 0;
 
   return new_stmt;
 }
 
 void
 tree_statement::accept (tree_walker& tw)
 {
diff --git a/src/pt-stmt.h b/src/pt-stmt.h
--- a/src/pt-stmt.h
+++ b/src/pt-stmt.h
@@ -41,39 +41,39 @@ class tree_walker;
 // evaluate.
 
 class
 tree_statement
 {
 public:
 
   tree_statement (void)
-    : cmd (0), expr (0), bp (false), comm (0) { }
+    : cmd (0), expr (0), comm (0) { }
 
   tree_statement (tree_command *c, octave_comment_list *cl)
-    : cmd (c), expr (0), bp (false), comm (cl) { }
+    : cmd (c), expr (0), comm (cl) { }
 
   tree_statement (tree_expression *e, octave_comment_list *cl)
-    : cmd (0), expr (e), bp (false), comm (cl) { }
+    : cmd (0), expr (e), comm (cl) { }
 
   ~tree_statement (void);
 
   void set_print_flag (bool print_flag);
 
   bool print_result (void);
 
   bool is_command (void) const { return cmd != 0; }
 
   bool is_expression (void) const { return expr != 0; }
 
-  void set_breakpoint (void) { bp = true; }
+  void set_breakpoint (void);
 
-  void delete_breakpoint (void) { bp = false; }
+  void delete_breakpoint (void);
 
-  bool is_breakpoint (void) const { return bp; }
+  bool is_breakpoint (void) const;
 
   int line (void) const;
   int column (void) const;
 
   void echo_code (void);
 
   tree_command *command (void) { return cmd; }
 
@@ -103,19 +103,16 @@ private:
   // Only one of cmd or expr can be valid at once.
 
   // Command to execute.
   tree_command *cmd;
 
   // Expression to evaluate.
   tree_expression *expr;
 
-  // Breakpoint flag.
-  bool bp;
-
   // Comment associated with this statement.
   octave_comment_list *comm;
 
   // No copying!
   tree_statement (const tree_statement&);
 
   tree_statement& operator = (const tree_statement&);
 };
diff --git a/src/pt.h b/src/pt.h
--- a/src/pt.h
+++ b/src/pt.h
@@ -42,19 +42,23 @@ public:
     : line_num (l), column_num (c), bp (false) { }
 
   virtual ~tree (void) { }
 
   virtual int line (void) const { return line_num; }
 
   virtual int column (void) const { return column_num; }
 
-  void set_breakpoint (void) { bp = true; }
+  void line (int l) { line_num = l; }
+
+  void column (int c) { column_num = c; }
 
-  void delete_breakpoint (void) { bp = false; }
+  virtual void set_breakpoint (void) { bp = true; }
+
+  virtual void delete_breakpoint (void) { bp = false; }
 
   bool is_breakpoint (void) const { return bp; }
 
   std::string str_print_code (void);
 
   virtual void accept (tree_walker& tw) = 0;
 
 private:
