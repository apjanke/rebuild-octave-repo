# HG changeset patch
# User Rik <rik@octave.org>
# Date 1481315367 28800
#      Fri Dec 09 12:29:27 2016 -0800
# Node ID 763ec7cbee9ee414d6bb0f90c48e8083362d5746
# Parent  2830a770405b8bb6321c713242df9f8f77135621
hdl2struct.m: Recode for performance.

* hdl2struct.m: Many different tricks to improve performance.
Don't get all of a handle's properties when only a few are used.
Use a single call to findobj rather than multiple separate calls.
Use ismember to reduce the number of handles to loop over.
Replace arrayfun calls with expressions that can be evaluated by
the parser directly.  Avoid processing axes objects which are
really legends twice.  Replace strcmp with an isfield lookup into a persistent
structure variable holding possible fieldnames.

diff --git a/scripts/plot/util/hdl2struct.m b/scripts/plot/util/hdl2struct.m
--- a/scripts/plot/util/hdl2struct.m
+++ b/scripts/plot/util/hdl2struct.m
@@ -31,143 +31,141 @@
 
 function s = hdl2struct (h)
 
   if (nargin != 1 || ! ishandle (h))
     print_usage ();
   endif
 
   hiddenh = get (0, "showhiddenhandles");
-  if (strcmp (hiddenh, "on"))
+  unwind_protect
     set (0, "showhiddenhandles", "off");
-  endif
-
-  ## main object
-  main = get (h);
-  s.handle = h;
-  s.type = main.type;
-  s.properties = getprops (h);
-  s.children = [];
-  s.special = [];
 
-  ## sweep all children but legends, colorbars, uimenu and hggroup children
-  ## in reverse order
-  kids = main.children;
-  lg = findobj (h, "-depth", 1, "tag", "legend");
-  cb = findobj (h, "-depth", 1, "tag", "colorbar");
-  ui = findobj (h, "-depth", 1, "type", "uimenu");
-  nkids = length (kids);
-  ii = 0;
-  while (nkids)
-    if (! any (kids (nkids) == lg) && ! any (kids (nkids) == cb)
-          && ! any (kids (nkids) == ui) && ! strcmp (main.type, "hggroup"))
-      ii += 1;
-      s.children(ii) = hdl2struct (kids(nkids));
-    endif
-    nkids -= 1;
-  endwhile
+    ## main object
+    s.handle = h;
+    s.type = get (h, "type");
+    s.properties = getprops (h);
+    s.children = [];
+    s.special = [];
 
-  ## add non "children" children objects (title, xlabel, ...) and
-  ## hggroup children and tag theim in "special"
-  special = [];
-  if (strcmp (main.type, "hggroup"))
-    special = main.children;
-  endif
-  special = [special getspecial(h)];
-  nsp = length (special);
-  while (nsp)
-    ii += 1;
-    s.children(ii) = hdl2struct (special(nsp));
-    s.special(nsp) = ii;
-    nsp -= 1;
-  endwhile
-
-  ## look for legends and colorbars among "main"'s brothers and add them
-  ## to the children list
-  if (strcmp (main.type, "axes"))
-    par = main.parent;
-    lg = findobj (par, "-depth", 1, "tag", "legend");
-    if (! isempty (lg))
-      idx = arrayfun (@(x) get(x).userdata.handle(end) == h, lg);
-      lg = lg(find (idx));
-    endif
-    nlg = length (lg);
-    if (nlg == 1)
-      ii += 1;
-      s.children(ii) = hdl2struct (lg);
-    elseif (nlg > 1)
-      error ("hdl2struct: more than one legend found");
+    ## Process, in reverse order, all children except for
+    ## legends, colorbars, uimenu, and hggroup children
+    ii = 0;
+    allkids = get (h, "children");
+    if (! strcmp (s.type, "hggroup"))
+      hnot = findobj (h, "-depth", 1, "tag", "legend", "-or", "tag", "colorbar",
+                                      "-or", "type", "uimenu");
+      kids = allkids(! ismember (allkids, hnot));
+      nkids = length (kids);
+      for i = nkids:-1:1
+        s.children(++ii) = hdl2struct (kids(i));
+      endfor
     endif
 
-    cb = findobj (par, "-depth", 1, "tag", "colorbar");
-    if (! isempty (cb))
-      idx = arrayfun (@(x) get(x).axes == h, cb);
-      cb = cb(find (idx));
+    ## add non "children" children objects (title, xlabel, ...) and
+    ## hggroup children and tag them in "special"
+    if (strcmp (s.type, "hggroup"))
+      special = allkids;
+    else
+      special = [];
+    endif
+    special = [special getspecial(h)];
+    nsp = length (special);
+    while (nsp)
+      ii += 1;
+      s.children(ii) = hdl2struct (special(nsp));
+      s.special(nsp) = ii;
+      nsp -= 1;
+    endwhile
+
+    if (strcmp (s.type, "axes") && isempty (get (h, "tag")))
+      ## look for legends and colorbars among axes brothers and add them
+      ## to the children list
+
+      par = get (h, "parent");
+      lg = findobj (par, "-depth", 1, "tag", "legend");
+      if (! isempty (lg))
+        ## identify legends which are attached to this axes.
+        idx = ([[get(lg).userdata].handle] == h);
+        lg = lg(idx);
+      endif
+      nlg = length (lg);
+      if (nlg == 1)
+        ii += 1;
+        s.children(ii) = hdl2struct (lg);
+      elseif (nlg > 1)
+        error ("hdl2struct: more than one legend found");
+      endif
+
+      cb = findobj (par, "-depth", 1, "tag", "colorbar");
+      if (! isempty (cb))
+        ## identify colorbars which are attached to this axes.
+        idx2 = ([get(cb).axes] == h);
+        cb = cb(idx);
+      endif
+      ncb = length (cb);
+      if (ncb == 1)
+        ii += 1;
+        s.children(ii) = hdl2struct (cb);
+      elseif (ncb > 1)
+        error ("hdl2struct: more than one colorbar found");
+      endif
     endif
 
-    ncb = length (cb);
-    if (ncb == 1)
-      ii += 1;
-      s.children(ii) = hdl2struct (cb);
-    elseif (nlg > 1)
-      error ("hdl2struct: more than one colorbar found");
-    endif
-  endif
-
-  set (0, "showhiddenhandles", hiddenh);
+  unwind_protect_cleanup
+    set (0, "showhiddenhandles", hiddenh);
+  end_unwind_protect
 
 endfunction
 
-function hdlist = getspecial (h)
+function hlist = getspecial (h)
 
   ## return handles to special children
-  hdlist = [];
+  hlist = [];
 
   regkids = get (h, "children");
+  ## inline version of allchild() for performance
   set (0, "showhiddenhandles", "on");
   allkids = get (h, "children");
   set (0, "showhiddenhandles", "off");
-  speckids = arrayfun (@(x) ! any (x == regkids), allkids);
-  hdlist = allkids (find (speckids));
-  hdlist = reshape (hdlist, 1, numel (hdlist));
+  speckids = ! ismember (allkids, regkids);
+  hlist = allkids(speckids);
+  hlist = hlist(:).';  # return row vector
 
 endfunction
 
-function prpstr = getprops (h)
+function propstruct = getprops (h)
+
+  persistent excluded;
+
+  if (isempty (excluded))
+    excluded = cell2struct (repmat ({[]}, 1, 21),
+                            {"beingdeleted", "busyaction", "buttondownfcn", ...
+                             "children", "clipping", "createfcn", ...
+                             "deletefcn", "handlevisibility", "hittest", ...
+                             "interruptible", "parent", "selected" , ...
+                             "selectionhighlight", "type", "uicontextmenu", ...
+                             "currentaxes", "currentcharacter", ...
+                             "currentobject", "tightinset", "currentpoint", ...
+                             "extent"}, 2);
+  endif
 
   obj = get (h);
   ## get useful properties rejecting readonly, children, handles ...
   fields = fieldnames (obj);
-  hdlist = [];
-
-  forbid = {"beingdeleted", "busyaction", "buttondownfcn", ...
-            "children", "clipping", "createfcn", ...
-            "deletefcn", "handlevisibility", "hittest", ...
-            "interruptible", "parent", "selected" , ...
-            "selectionhighlight", "type", "uicontextmenu", ...
-            "currentaxes", "currentcharacter", "currentobject", ...
-            "tightinset", "currentpoint", "extent"};
-
-  nflds = length (fields);
-  ii = 0;
-  while (nflds)
-    prop = fields{nflds};
-    val = obj.(fields{nflds});
-    ii += 1;
-    if (! any (strcmp (prop, forbid)))
-      prpstr.(prop) = val;
-    endif
-    nflds -= 1;
-  endwhile
+  tf = isfield (excluded, fields);
+  propstruct = rmfield (obj, fields(tf));
 
   ## hidden properties
-  hidden = {"__autopos_tag__", "looseinset"};
-  for ii = 1:numel (hidden)
-    if (isprop (h, hidden{ii}))
-      prpstr.(hidden{ii}) = get (h, hidden{ii});
-    endif
+  hidden_props = {"__autopos_tag__", "looseinset"};
+  for prop = hidden_props
+    try
+      val = get (h, prop{1});
+      propstruct.(prop{1}) = val;
+    end_try_catch
   endfor
 
 endfunction
 
 
 ## FIXME: need validation tests
+## FIXME: Need to test code for legends, colorbars.
 
