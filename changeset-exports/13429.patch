# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302760416 -7200
#      Thu Apr 14 07:53:36 2011 +0200
# Node ID 4a1f2d16c0b967a7f5f6d23683f149f3aae82b46
# Parent  5f16b194d1386081de11709f71c1baadaaf29fa8
Removed VariableMetaData and replaced passing SymbolRecords directly.

diff --git a/gui//src/MainWindow.h b/gui//src/MainWindow.h
--- a/gui//src/MainWindow.h
+++ b/gui//src/MainWindow.h
@@ -152,20 +152,19 @@ public:
           m_mainWindow(mainWindow) {
     }
 
 protected:
     void run() {
         while(m_mainWindow->isRunning()) {
 
         // Get a full variable list.
-        QList<OctaveLink::VariableMetaData> variables
-                = OctaveLink::instance()->variableInfoList();
-        if(variables.size()) {
-            m_mainWindow->variablesDockWidget()->setVariablesList(variables);
+        QList<SymbolRecord> symbolTable = OctaveLink::instance()->variableInfoList();
+        if(symbolTable.size()) {
+            m_mainWindow->variablesDockWidget()->setVariablesList(symbolTable);
         }
 
         // Check whether any requested variables have been returned.
         QList<OctaveLink::RequestedVariable> reqVars
                 = OctaveLink::instance()->requestedVariables();
 
         //for(std::vector<OctaveLink::RequestedVariable>::iterator it = reqVars.begin();
         //   it != reqVars.end(); it++ ) {
diff --git a/gui//src/OctaveLink.cpp b/gui//src/OctaveLink.cpp
--- a/gui//src/OctaveLink.cpp
+++ b/gui//src/OctaveLink.cpp
@@ -16,73 +16,17 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 02110-1301, USA.
 
 */
 
 // Born July 13, 2007.
 
-//#ifdef HAVE_CONFIG_H
-#undef PACKAGE_BUGREPORT
-#undef PACKAGE_NAME
-#undef PACKAGE_STRING
-#undef PACKAGE_TARNAME
-#undef PACKAGE_VERSION
-#undef PACKAGE_URL
-#include <octave/config.h>
-//#endif
 
-#include <cassert>
-#include <cstdlib>
-#include <cstring>
-#include <ctime>
-
-#include <fstream>
-#include <iostream>
-
-#ifdef HAVE_UNISTD_H
-#ifdef HAVE_SYS_TYPES_H
-#include <sys/types.h>
-#endif
-#include <unistd.h>
-#endif
-#include <sys/time.h>
-
-#include <sys/time.h>
-
-#include "octave/cmd-edit.h"
-#include "octave/error.h"
-#include "octave/file-io.h"
-#include "octave/input.h"
-#include "octave/lex.h"
-#include "octave/load-path.h"
-#include "octave/octave.h"
-#include "octave/oct-hist.h"
-#include "octave/oct-map.h"
-#include "octave/oct-obj.h"
-#include "octave/ops.h"
-#include "octave/ov.h"
-#include "octave/ov-usr-fcn.h"
-#include "octave/symtab.h"
-#include "octave/pt.h"
-#include "octave/pt-eval.h"
-
-#include "octave/toplev.h"
-#include "octave/procstream.h"
-//#include "octave/prog-args.h"
-#include "octave/sighandlers.h"
-#include "octave/debug.h"
-#include "octave/sysdep.h"
-#include "octave/ov.h"
-#include "octave/unwind-prot.h"
-#include "octave/utils.h"
-#include "octave/variables.h"
-
-#include <readline/readline.h>
 
 #include "OctaveLink.h"
 
 #include <QFileInfo>
 #include <QMutexLocker>
 #include <QList>
 
 OctaveLink OctaveLink::m_singleton;
@@ -124,17 +68,17 @@ OctaveLink::~OctaveLink() {
 
 /*******************************************************************************
  *******************************************************************************
  * CLIENT SIDE FUNCTIONS
  *******************************************************************************
  *******************************************************************************/
 
 //*************************************************************************
-QList<OctaveLink::VariableMetaData> OctaveLink::variableInfoList() {
+QList<SymbolRecord> OctaveLink::variableInfoList() {
     QMutexLocker mutexLocker(&m_internalAccessMutex);
     return m_variableSymbolTableList;
 }
 
 
 //*************************************************************************
 QList<OctaveLink::RequestedVariable> OctaveLink::requestedVariables() {
     QMutexLocker mutexLocker(&m_internalAccessMutex);
@@ -246,32 +190,22 @@ int OctaveLink::processOctaveServerData(
   //octave_stdout << "SERVER ELAPSED: " << elapsed << std::endl;
 #endif
   return 0;
 }
 
 
 //*************************************************************************
 void OctaveLink::retrieveVariables() {
-    QList<VariableMetaData> currentVariables;
-    std::list<symbol_table::symbol_record> allVariables = symbol_table::all_variables();
-    std::list<symbol_table::symbol_record>::iterator iterator;
-
+    QList<SymbolRecord> currentVariables;
+    std::list<SymbolRecord> allVariables = symbol_table::all_variables();
+    std::list<SymbolRecord>::iterator iterator;
     for(iterator = allVariables.begin(); iterator != allVariables.end(); iterator++) {
-        octave_value octaveVariableValue(iterator->varval());
-
-        VariableMetaData variableMetaData;
-        variableMetaData.variableName = QString(iterator->name().c_str());
-        variableMetaData.dimensionalSize.push_back(octaveVariableValue.rows());
-        variableMetaData.dimensionalSize.push_back(octaveVariableValue.columns());
-        variableMetaData.byteSize = octaveVariableValue.byte_size();
-        variableMetaData.typeName = QString(octaveVariableValue.type_name().c_str());
-
-        if(!variableMetaData.variableName.startsWith("."))
-            currentVariables.append(variableMetaData);
+        if(!QString(iterator->name().c_str()).startsWith("."))
+            currentVariables.append(*iterator);
     }
 
     m_variableSymbolTableList = currentVariables;
 }
 
 
 //*************************************************************************
 int OctaveLink::processRequestedVariables( void )
diff --git a/gui//src/OctaveLink.h b/gui//src/OctaveLink.h
--- a/gui//src/OctaveLink.h
+++ b/gui//src/OctaveLink.h
@@ -17,17 +17,73 @@
  * You should have received a copy of the GNU General Public License
  * along with Octave; see the file COPYING.  If not, write to the Free
  * Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
  * 02110-1301, USA.
  *
  * */
 #ifndef OCTAVELINK_H
 #define OCTAVELINK_H
+//#ifdef HAVE_CONFIG_H
+#undef PACKAGE_BUGREPORT
+#undef PACKAGE_NAME
+#undef PACKAGE_STRING
+#undef PACKAGE_TARNAME
+#undef PACKAGE_VERSION
+#undef PACKAGE_URL
+#include <octave/config.h>
+//#endif
 
+#include <cassert>
+#include <cstdlib>
+#include <cstring>
+#include <ctime>
+
+#include <fstream>
+#include <iostream>
+
+#ifdef HAVE_UNISTD_H
+#ifdef HAVE_SYS_TYPES_H
+#include <sys/types.h>
+#endif
+#include <unistd.h>
+#endif
+#include <sys/time.h>
+
+#include <sys/time.h>
+
+#include "octave/cmd-edit.h"
+#include "octave/error.h"
+#include "octave/file-io.h"
+#include "octave/input.h"
+#include "octave/lex.h"
+#include "octave/load-path.h"
+#include "octave/octave.h"
+#include "octave/oct-hist.h"
+#include "octave/oct-map.h"
+#include "octave/oct-obj.h"
+#include "octave/ops.h"
+#include "octave/ov.h"
+#include "octave/ov-usr-fcn.h"
+#include "octave/symtab.h"
+#include "octave/pt.h"
+#include "octave/pt-eval.h"
+
+#include "octave/toplev.h"
+#include "octave/procstream.h"
+//#include "octave/prog-args.h"
+#include "octave/sighandlers.h"
+#include "octave/debug.h"
+#include "octave/sysdep.h"
+#include "octave/ov.h"
+#include "octave/unwind-prot.h"
+#include "octave/utils.h"
+#include "octave/variables.h"
+
+#include <readline/readline.h>
 #undef PACKAGE_BUGREPORT
 #undef PACKAGE_NAME
 #undef PACKAGE_STRING
 #undef PACKAGE_TARNAME
 #undef PACKAGE_VERSION
 #undef PACKAGE_URL
 #include "octave/config.h"
 #include "octave/Range.h"
@@ -38,16 +94,18 @@ class octave_value_list;
 #include <cstdio>
 #include <string>
 #include <vector>
 #include <QMutex>
 #include <QList>
 #include <QString>
 #include <QVector>
 
+typedef symbol_table::symbol_record SymbolRecord;
+
 /**
   * \class OctaveLink
   * Manages a link to an octave instance.
   */
 class OctaveLink
 {
 public:
     static OctaveLink *instance() { return &m_singleton; }
@@ -87,39 +145,16 @@ public:
     } BreakPoint;
 
     typedef struct RequestedVariable
     {
         std::string name;
         octave_value ov;
     } RequestedVariable;
 
-    typedef struct VariableMetaData
-    {
-        /** The name of the variable. */
-        QString variableName;
-
-        /** The dimensional size of the variable. */
-        QVector<int> dimensionalSize;
-
-        /** The size of the variable in bytes. */
-        unsigned long long byteSize;
-
-        /** The name of the variable type. */
-        QString typeName;
-
-        friend int operator==(const VariableMetaData& left,
-                              const VariableMetaData& right) {
-            return (left.variableName == right.variableName) &&
-                   (left.dimensionalSize == right.dimensionalSize) &&
-                   (left.byteSize == right.byteSize) &&
-                   (left.typeName == right.typeName);
-        }
-    } VariableMetaData;
-
     // Functions used to access data form the client side.
     /** Debugging related methods. */
 
     /** TODO: Describe. */
     std::vector<BreakPoint> breakPointList(int& status);
 
     /** TODO: Describe. */
     std::vector<BreakPoint> reachedBreakpoint();
@@ -135,17 +170,17 @@ public:
 
     /** TODO: Describe. */
     int	modifyBreakpoint(BreakPoint old_bp_info, BreakPoint new_bp_info);
 
     /** TODO: Describe. */
     int	setBreakpointAction(BreakPointAction action);
 
     /** Variable related methods. */
-    QList<VariableMetaData> variableInfoList(void);
+    QList<SymbolRecord> variableInfoList(void);
 
     /** TODO: Describe. */
     QList<RequestedVariable> requestedVariables(void);
 
     /** TODO: Describe. */
     int	setRequestedVariableNames(QList<QString> variableNames);
 
     /**
@@ -213,17 +248,17 @@ private:
     std::vector<BreakPoint> m_reachedBreakpoints;
     std::vector<BreakPoint> m_addedBreakpoints;
     std::vector<BreakPoint> m_removedBreakpoints;
     std::vector<BreakPoint> m_modifiedBreakpointsOld;
     std::vector<BreakPoint> m_modifiedBreakpointsNew;
     BreakPointAction m_breakPointAction;
 
     /** Variable related member variables. */
-    QList<VariableMetaData> m_variableSymbolTableList;
+    QList<SymbolRecord> m_variableSymbolTableList;
     QList<QString> m_variablesRequestList;
 
     // NOTE: Create an overloaded operator<< for octave_value to do the
     // flattening.  This will allow us to append easily to an ostringstream
     // for output.
     QList<RequestedVariable> m_requestedVariables;
 
     /** History related member variables. */
diff --git a/gui//src/VariablesDockWidget.cpp b/gui//src/VariablesDockWidget.cpp
--- a/gui//src/VariablesDockWidget.cpp
+++ b/gui//src/VariablesDockWidget.cpp
@@ -23,57 +23,60 @@ void VariablesDockWidget::construct() {
     widget()->setLayout(layout);
 
     QTreeWidgetItem *treeWidgetItem = new QTreeWidgetItem();
     treeWidgetItem->setData(0, 0, QString("Global"));
     m_variablesTreeWidget->insertTopLevelItem(0, treeWidgetItem);
     m_variablesTreeWidget->expandAll();
 }
 
-void VariablesDockWidget::setVariablesList(QList<OctaveLink::VariableMetaData> variablesList) {
+void VariablesDockWidget::updateTreeEntry(QTreeWidgetItem *treeItem, SymbolRecord symbolRecord) {
+    treeItem->setData(0, 0, QString(symbolRecord.name().c_str()));
+    treeItem->setData(1, 0, QString(symbolRecord.varval().type_name().c_str()));
+}
+
+void VariablesDockWidget::setVariablesList(QList<SymbolRecord> symbolTable) {
     // This method may be a little bit confusing; variablesList is a complete list of all
     // variables that are in the workspace currently.
     QTreeWidgetItem *topLevelItem = m_variablesTreeWidget->topLevelItem(0);
 
     // First we check, if any variables that exist in the model tree have to be updated
     // or created. So we walk the variablesList check against the tree.
-    foreach(OctaveLink::VariableMetaData variable, variablesList) {
+    foreach(SymbolRecord symbolRecord, symbolTable) {
         int childCount = topLevelItem->childCount();
         bool alreadyExists = false;
         QTreeWidgetItem *child;
 
         // Search for the corresponding item in the tree. If it has been found, child
         // will contain the appropriate QTreeWidgetItem* pointing at it.
         for(int i = 0; i < childCount; i++) {
             child = topLevelItem->child(i);
-            if(child->data(0, 0).toString() == variable.variableName) {
+            if(child->data(0, 0).toString() == QString(symbolRecord.name().c_str())) {
                 alreadyExists = true;
                 break;
             }
         }
 
         // If it already exists, just update it.
         if(alreadyExists) {
-            child->setData(0, 0, variable.variableName);
-            child->setData(1, 0, variable.typeName);
+            updateTreeEntry(child, symbolRecord);
         } else {
             // It does not exist, so create a new one and set the right values.
             child = new QTreeWidgetItem();
-            child->setData(0, 0, variable.variableName);
-            child->setData(1, 0, variable.typeName);
+            updateTreeEntry(child, symbolRecord);
             topLevelItem->addChild(child);
         }
     }
 
     // Check the tree against the list for deleted variables.
     for(int i = 0; i < topLevelItem->childCount(); i++) {
         bool existsInVariableList = false;
         QTreeWidgetItem *child = topLevelItem->child(i);
-        foreach(OctaveLink::VariableMetaData variable, variablesList) {
-            if(variable.variableName == child->data(0, 0).toString()) {
+        foreach(SymbolRecord symbolRecord, symbolTable) {
+            if(QString(symbolRecord.name().c_str()) == child->data(0, 0).toString()) {
                 existsInVariableList = true;
             }
         }
 
         if(!existsInVariableList) {
             topLevelItem->removeChild(child);
             delete child;
             i--;
diff --git a/gui//src/VariablesDockWidget.h b/gui//src/VariablesDockWidget.h
--- a/gui//src/VariablesDockWidget.h
+++ b/gui//src/VariablesDockWidget.h
@@ -4,17 +4,18 @@
 #include <QDockWidget>
 #include <QTreeWidget>
 #include "OctaveLink.h"
 
 class VariablesDockWidget : public QDockWidget
 {
 public:
     VariablesDockWidget(QWidget *parent = 0);
-    void setVariablesList(QList<OctaveLink::VariableMetaData> variablesList);
+    void setVariablesList(QList<SymbolRecord> variablesList);
 
 private:
     void construct();
+    void updateTreeEntry(QTreeWidgetItem *treeItem, SymbolRecord symbolRecord);
 
     QTreeWidget *m_variablesTreeWidget;
 };
 
 #endif // VARIABLESDOCKWIDGET_H
