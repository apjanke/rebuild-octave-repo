# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1514492029 -3600
#      Thu Dec 28 21:13:49 2017 +0100
# Node ID abb075ada761646fe040d67c3804b01659c336cf
# Parent  dac2ad033c43da04aa3832fcf99b34332a923778
Allow commenting with manually selected comment strings (bug #52695):

* file-editor-tab.cc (comment_selected_text, do_comment_selected_text):
  new boolean parameter for comment string from settings or from input dialog

* file-editor-tab.h (comment_selected_text, do_comment_selected_text):
  new boolean parameter for comment string from settings or from input dialog

* file-editor.cc (check_actions): enable new action depending on tabs;
  (request_comment_selected_text): emit signal for commenting with string
  from preferences;
  (request_comment_var_selected_text): new slot emitting the signal for
  commenting with manually selected string;
  (set_shortcuts): set the shortcut for the new action;
  (construct): add new action to the edit menu of the editor;
  (add_file_editor_tab): signal for commenting and related slot in editor tab
  now have an additional boolean parameter

* file-editor.h: new action with new slot, signal for commenting now have
  an additional boolean parameter

* shortcut-manager.cc (do_init_data): initialize the shortcut for the new
  action

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1167,22 +1167,22 @@ file_editor_tab::scintilla_command (cons
 {
   if (ID != this)
     return;
 
   _edit_area->SendScintilla (sci_msg);
 }
 
 void
-file_editor_tab::comment_selected_text (const QWidget *ID)
+file_editor_tab::comment_selected_text (const QWidget *ID, bool input_str)
 {
   if (ID != this)
     return;
 
-  do_comment_selected_text (true);
+  do_comment_selected_text (true, input_str);
 }
 
 void
 file_editor_tab::uncomment_selected_text (const QWidget *ID)
 {
   if (ID != this)
     return;
 
@@ -1455,26 +1455,36 @@ file_editor_tab::do_smart_indent_line_or
     }
 
   _edit_area->smart_indent_line_or_selected_text (lineFrom, lineTo);
 
   _edit_area->endUndoAction ();
 }
 
 void
-file_editor_tab::do_comment_selected_text (bool comment)
+file_editor_tab::do_comment_selected_text (bool comment, bool input_str)
 {
-  QStringList comment_str = _edit_area->comment_string (comment);
   QRegExp rxc;
   QString ws = "^([ \\t]*)";
+  QStringList comment_str = _edit_area->comment_string (comment);
+  QString used_comment_str = comment_str.at (0);
 
   if (comment)
     {
-      // Commenting (only one string possible)
-      rxc = QRegExp (ws + comment_str.at (0));
+      if (input_str)
+        {
+          bool ok;
+
+          used_comment_str = QInputDialog::getText (
+              this, tr ("Comment selected text"), tr ("Comment string to use:\n"),
+              QLineEdit::Normal, comment_str.at (0), &ok);
+
+          if ((! ok) || used_comment_str.isEmpty ())
+            used_comment_str = comment_str.at (0);  // No input, use preference
+        }
     }
   else
     {
       // Uncommenting (several strings possible)
 
       // Sort strings according their length
       QStringList comment_str_sorted (comment_str.at (0));
       bool inserted;
@@ -1521,17 +1531,17 @@ file_editor_tab::do_comment_selected_tex
 
       if (colTo == 0)  // the beginning of last line is not selected
         lineTo--;        // stop at line above
 
       for (int i = lineFrom; i <= lineTo; i++)
         {
           if (comment)
             {
-              _edit_area->insertAt (comment_str.at (0), i, 0);
+              _edit_area->insertAt (used_comment_str, i, 0);
             }
           else
             {
               QString line (_edit_area->text (i));
               if ((removed = line.contains (rxc)))
                 {
                   len = rxc.matchedLength ();   // complete length
                   QString matched_text = rxc.capturedTexts ().at (0);
@@ -1568,17 +1578,17 @@ file_editor_tab::do_comment_selected_tex
       // set updated selection area
       _edit_area->setSelection (lineFrom, colFrom, lineTo, colTo);
     }
   else
     {
       int cpline, col;
       _edit_area->getCursorPosition (&cpline, &col);
       if (comment)
-        _edit_area->insertAt (comment_str.at (0), cpline, 0);
+        _edit_area->insertAt (used_comment_str, cpline, 0);
       else
         {
           QString line (_edit_area->text (cpline));
           if (line.contains (rxc))
             {
               len = rxc.matchedLength ();   // complete length
               QString matched_text = rxc.capturedTexts ().at (0);
               lenc = matched_text.remove (QRegExp (ws)).length ();  // only comment string
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -98,17 +98,17 @@ public slots:
 
   void toggle_breakpoint (const QWidget *ID);
   void next_breakpoint (const QWidget *ID);
   void previous_breakpoint (const QWidget *ID);
   void remove_all_breakpoints (const QWidget *ID);
 
   void scintilla_command (const QWidget *, unsigned int);
 
-  void comment_selected_text (const QWidget *ID);
+  void comment_selected_text (const QWidget *ID, bool input_str);
   void uncomment_selected_text (const QWidget *ID);
 
   void indent_selected_text (const QWidget *ID);
   void unindent_selected_text (const QWidget *ID);
   void smart_indent_line_or_selected_text (const QWidget *ID);
   void convert_eol (const QWidget *ID, QsciScintilla::EolMode);
 
   void zoom_in (const QWidget *ID);
@@ -244,17 +244,17 @@ private:
 
   bool unchanged_or_saved (void);
 
   void update_lexer ();
   void update_lexer_settings ();
 
   void show_dialog (QDialog *dlg, bool modal);
   int check_file_modified ();
-  void do_comment_selected_text (bool comment);
+  void do_comment_selected_text (bool comment, bool input_str = false);
   void do_indent_selected_text (bool indent);
   void do_smart_indent_line_or_selected_text (void);
 
   void add_breakpoint_callback (const bp_info& info);
   void remove_breakpoint_callback (const bp_info& info);
   void remove_all_breakpoints_callback (const bp_info& info);
   void check_restore_breakpoints (void);
   void center_current_line (bool always=true);
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -256,16 +256,17 @@ file_editor::check_actions (void)
   bool have_tabs = m_tab_widget->count () > 0;
 
   m_edit_cmd_menu->setEnabled (have_tabs);
   m_edit_fmt_menu->setEnabled (have_tabs);
   m_edit_nav_menu->setEnabled (have_tabs);
 
   m_comment_selection_action->setEnabled (have_tabs);
   m_uncomment_selection_action->setEnabled (have_tabs);
+  m_comment_var_selection_action->setEnabled (have_tabs);
   m_indent_selection_action->setEnabled (have_tabs);
   m_unindent_selection_action->setEnabled (have_tabs);
   m_smart_indent_line_or_selection_action->setEnabled (have_tabs);
 
   m_context_help_action->setEnabled (have_tabs);
   m_context_doc_action->setEnabled (have_tabs);
 
   m_view_editor_menu->setEnabled (have_tabs);
@@ -758,25 +759,31 @@ file_editor::request_transpose_line (boo
 {
   emit fetab_scintilla_command (m_tab_widget->currentWidget (),
                                 QsciScintillaBase::SCI_LINETRANSPOSE);
 }
 
 void
 file_editor::request_comment_selected_text (bool)
 {
-  emit fetab_comment_selected_text (m_tab_widget->currentWidget ());
+  emit fetab_comment_selected_text (m_tab_widget->currentWidget (), false);
 }
 
 void
 file_editor::request_uncomment_selected_text (bool)
 {
   emit fetab_uncomment_selected_text (m_tab_widget->currentWidget ());
 }
 
+void
+file_editor::request_comment_var_selected_text (bool)
+{
+  emit fetab_comment_selected_text (m_tab_widget->currentWidget (), true);
+}
+
 // slots for Edit->Format actions
 void
 file_editor::request_upper_case (bool)
 {
   emit fetab_scintilla_command (m_tab_widget->currentWidget (),
                                 QsciScintillaBase::SCI_UPPERCASE);
 }
 void
@@ -1206,16 +1213,17 @@ file_editor::set_shortcuts (void)
   shortcut_manager::set_shortcut (m_delete_end_line_action, "editor_edit:delete_end_line");
   shortcut_manager::set_shortcut (m_delete_line_action, "editor_edit:delete_line");
   shortcut_manager::set_shortcut (m_copy_line_action, "editor_edit:copy_line");
   shortcut_manager::set_shortcut (m_cut_line_action, "editor_edit:cut_line");
   shortcut_manager::set_shortcut (m_duplicate_selection_action, "editor_edit:duplicate_selection");
   shortcut_manager::set_shortcut (m_transpose_line_action, "editor_edit:transpose_line");
   shortcut_manager::set_shortcut (m_comment_selection_action, "editor_edit:comment_selection");
   shortcut_manager::set_shortcut (m_uncomment_selection_action, "editor_edit:uncomment_selection");
+  shortcut_manager::set_shortcut (m_comment_var_selection_action, "editor_edit:comment_var_selection");
 
   shortcut_manager::set_shortcut (m_upper_case_action, "editor_edit:upper_case");
   shortcut_manager::set_shortcut (m_lower_case_action, "editor_edit:lower_case");
   shortcut_manager::set_shortcut (m_indent_selection_action, "editor_edit:indent_selection");
   shortcut_manager::set_shortcut (m_unindent_selection_action, "editor_edit:unindent_selection");
   shortcut_manager::set_shortcut (m_smart_indent_line_or_selection_action, "editor_edit:smart_indent_line_or_selection");
   shortcut_manager::set_shortcut (m_completion_action, "editor_edit:completion_list");
   shortcut_manager::set_shortcut (m_goto_line_action, "editor_edit:goto_line");
@@ -1843,16 +1851,18 @@ file_editor::construct (void)
           tr ("&Lowercase Selection"), SLOT (request_lower_case (bool)));
 
   m_edit_fmt_menu->addSeparator ();
 
   m_comment_selection_action = add_action (m_edit_fmt_menu, QIcon (),
           tr ("&Comment"), SLOT (request_comment_selected_text (bool)));
   m_uncomment_selection_action = add_action (m_edit_fmt_menu, QIcon (),
           tr ("&Uncomment"), SLOT (request_uncomment_selected_text (bool)));
+  m_comment_var_selection_action = add_action (m_edit_fmt_menu, QIcon (),
+          tr ("Comment (Choosing String)"), SLOT (request_comment_var_selected_text (bool)));
 
   m_edit_fmt_menu->addSeparator ();
 
   m_indent_selection_action = add_action (m_edit_fmt_menu, QIcon (),
           tr ("&Indent Selection Rigidly"), SLOT (request_indent_selected_text (bool)));
   m_unindent_selection_action = add_action (m_edit_fmt_menu, QIcon (),
           tr ("&Unindent Selection Rigidly"), SLOT (request_unindent_selected_text (bool)));
 
@@ -2214,18 +2224,18 @@ file_editor::add_file_editor_tab (file_e
 
   connect (this, SIGNAL (fetab_remove_all_breakpoints (const QWidget*)),
            f, SLOT (remove_all_breakpoints (const QWidget*)));
 
   connect (this, SIGNAL (fetab_scintilla_command (const QWidget *,
                                                   unsigned int)),
            f, SLOT (scintilla_command (const QWidget *, unsigned int)));
 
-  connect (this, SIGNAL (fetab_comment_selected_text (const QWidget*)),
-           f, SLOT (comment_selected_text (const QWidget*)));
+  connect (this, SIGNAL (fetab_comment_selected_text (const QWidget*, bool)),
+           f, SLOT (comment_selected_text (const QWidget*, bool)));
 
   connect (this, SIGNAL (fetab_uncomment_selected_text (const QWidget*)),
            f, SLOT (uncomment_selected_text (const QWidget*)));
 
   connect (this, SIGNAL (fetab_indent_selected_text (const QWidget*)),
            f, SLOT (indent_selected_text (const QWidget*)));
 
   connect (this, SIGNAL (fetab_unindent_selected_text (const QWidget*)),
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -164,17 +164,17 @@ signals:
   void fetab_toggle_bookmark (const QWidget *ID);
   void fetab_next_bookmark (const QWidget *ID);
   void fetab_previous_bookmark (const QWidget *ID);
   void fetab_remove_bookmark (const QWidget *ID);
   void fetab_toggle_breakpoint (const QWidget *ID);
   void fetab_next_breakpoint (const QWidget *ID);
   void fetab_previous_breakpoint (const QWidget *ID);
   void fetab_remove_all_breakpoints (const QWidget *ID);
-  void fetab_comment_selected_text (const QWidget *ID);
+  void fetab_comment_selected_text (const QWidget *ID, bool);
   void fetab_uncomment_selected_text (const QWidget *ID);
   void fetab_indent_selected_text (const QWidget *ID);
   void fetab_unindent_selected_text (const QWidget *ID);
   void fetab_smart_indent_line_or_selected_text (const QWidget *ID);
   void fetab_convert_eol (const QWidget *ID, QsciScintilla::EolMode eol_mode);
   void fetab_find (const QWidget *ID, QList<QAction *>);
   void fetab_find_next (const QWidget *ID);
   void fetab_find_previous (const QWidget *ID);
@@ -242,16 +242,17 @@ public slots:
   void request_delete_line (bool);
   void request_copy_line (bool);
   void request_cut_line (bool);
   void request_duplicate_selection (bool);
   void request_transpose_line (bool);
 
   void request_comment_selected_text (bool);
   void request_uncomment_selected_text (bool);
+  void request_comment_var_selected_text (bool);
 
   void request_upper_case (bool);
   void request_lower_case (bool);
   void request_indent_selected_text (bool);
   void request_unindent_selected_text (bool);
   void request_smart_indent_line_or_selected_text (void);
   void request_conv_eol_windows (bool);
   void request_conv_eol_unix (bool);
@@ -371,16 +372,17 @@ private:
 
   QAction *m_new_action;
   QAction *m_new_function_action;
   QAction *m_open_action;
 
   QAction *m_upper_case_action;
   QAction *m_lower_case_action;
   QAction *m_comment_selection_action;
+  QAction *m_comment_var_selection_action;
   QAction *m_uncomment_selection_action;
   QAction *m_indent_selection_action;
   QAction *m_unindent_selection_action;
   QAction *m_smart_indent_line_or_selection_action;
   QAction *m_conv_eol_windows_action;
   QAction *m_conv_eol_unix_action;
   QAction *m_conv_eol_mac_action;
 
diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -361,16 +361,18 @@ shortcut_manager::do_init_data (void)
         QKeySequence (ctrl + Qt::Key_T));
   init (tr ("Show Completion List"), "editor_edit:completion_list",
         QKeySequence (ctrl + Qt::Key_Space));
 
   init (tr ("Comment Selection"), "editor_edit:comment_selection",
         QKeySequence (ctrl + Qt::Key_R));
   init (tr ("Uncomment Selection"), "editor_edit:uncomment_selection",
         QKeySequence (ctrl_shift + Qt::Key_R));
+  init (tr ("Comment Selection (Choosing String)"), "editor_edit:comment_var_selection",
+        QKeySequence (ctrl_alt + Qt::Key_R));
   init (tr ("Uppercase Selection"), "editor_edit:upper_case",
         QKeySequence (ctrl + Qt::Key_U));
   init (tr ("Lowercase Selection"), "editor_edit:lower_case",
         QKeySequence (ctrl_alt + Qt::Key_U));
 
 #if defined (Q_OS_MAC)
   init (tr ("Indent Selection Rigidly"), "editor_edit:indent_selection",
         QKeySequence (prefix + Qt::Key_Tab));
