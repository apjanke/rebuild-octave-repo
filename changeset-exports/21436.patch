# HG changeset patch
# User Rik <rik@octave.org>
# Date 1457714240 28800
#      Fri Mar 11 08:37:20 2016 -0800
# Node ID b0920076dd98244c9c30b4e16da4d1f37e48206e
# Parent  10c32f940636e893920be82b285a5fb3b7cf2fba
doc: Add missing ')' in some docstrings.

* cplxpair.m, edit.m, unidpdf.m, test.m:
Add missing ')' in some docstrings.

diff --git a/scripts/general/cplxpair.m b/scripts/general/cplxpair.m
--- a/scripts/general/cplxpair.m
+++ b/scripts/general/cplxpair.m
@@ -25,30 +25,30 @@
 ##
 ## The negative imaginary complex numbers are placed first within each pair.
 ## All real numbers (those with
 ## @code{abs (imag (@var{z}) / @var{z}) < @var{tol}}) are placed after the
 ## complex pairs.
 ##
 ## @var{tol} is a weighting factor which determines the tolerance of matching.
 ## The default value is 100 and the resulting tolerance for a given complex
-## pair is @code{100 * eps (abs (@var{z}(i))}.
+## pair is @code{100 * eps (abs (@var{z}(i)))}.
 ##
 ## By default the complex pairs are sorted along the first non-singleton
 ## dimension of @var{z}.  If @var{dim} is specified, then the complex pairs are
 ## sorted along this dimension.
 ##
 ## Signal an error if some complex numbers could not be paired.  Signal an
 ## error if all complex numbers are not exact conjugates (to within @var{tol}).
 ## Note that there is no defined order for pairs with identical real parts but
 ## differing imaginary parts.
 ## @c Set example in small font to prevent overfull line
 ##
 ## @smallexample
-## cplxpair (exp(2i*pi*[0:4]'/5)) == exp(2i*pi*[3; 2; 4; 1; 0]/5)
+## cplxpair (exp (2i*pi*[0:4]'/5)) == exp (2i*pi*[3; 2; 4; 1; 0]/5)
 ## @end smallexample
 ## @end deftypefn
 
 ## FIXME: subsort returned pairs by imaginary magnitude
 ## FIXME: Why doesn't exp (2i*pi*[0:4]'/5) produce exact conjugates?  Does
 ## FIXME: it in Matlab?  The reason is that complex pairs are supposed
 ## FIXME: to be exact conjugates, and not rely on a tolerance test.
 
diff --git a/scripts/miscellaneous/edit.m b/scripts/miscellaneous/edit.m
--- a/scripts/miscellaneous/edit.m
+++ b/scripts/miscellaneous/edit.m
@@ -61,18 +61,18 @@
 ## @end itemize
 ##
 ## If @code{edit} is called with @var{field} and @var{value} variables, the
 ## value of the control field @var{field} will be set to @var{value}.
 ##
 ## If an output argument is requested and the first input argument is @code{get}
 ## then @code{edit} will return the value of the control field @var{field}.
 ## If the control field does not exist, edit will return a structure
-## containing all fields and values.  Thus, @code{edit ("get", "all"} returns a
-## complete control structure.
+## containing all fields and values.  Thus, @code{edit ("get", "all")} returns
+## a complete control structure.
 ##
 ## The following control fields are used:
 ##
 ## @table @samp
 ## @item home
 ## This is the location of user local m-files.  Be sure it is in your path.
 ## The default is @file{~/octave}.
 ##
diff --git a/scripts/statistics/distributions/unidpdf.m b/scripts/statistics/distributions/unidpdf.m
--- a/scripts/statistics/distributions/unidpdf.m
+++ b/scripts/statistics/distributions/unidpdf.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {} {} unidpdf (@var{x}, @var{n})
 ## For each element of @var{x}, compute the probability density function (PDF)
 ## at @var{x} of a discrete uniform distribution which assumes
 ## the integer values 1--@var{n} with equal probability.
 ##
 ## Warning: The underlying implementation uses the double class and will only
-## be accurate for @var{n} < @code{flintmax} (@w{@math{2^{53}}}) on
+## be accurate for @var{n} < @code{flintmax} (@w{@math{2^{53}}} on
 ## IEEE 754 compatible systems).
 ## @end deftypefn
 
 function pdf = unidpdf (x, n)
 
   if (nargin != 2)
     print_usage ();
   endif
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -76,17 +76,17 @@
 ## (@var{fname}) or an open file descriptor ID (@var{fid}).  To enable batch
 ## processing, but still print the results to the screen, use @code{stdout} for
 ## @var{fid}.
 ##
 ## When called with just a single output argument @var{success}, @code{test}
 ## returns true if all of the tests were successful.  If called with more
 ## than one output argument then the number of successful tests (@var{n}),
 ## the total number of tests in the file (@var{nmax}), the number of xtest
-## failures (@var{nxfail}), and the number of skipped tests (@var{nskip} are
+## failures (@var{nxfail}), and the number of skipped tests (@var{nskip}) are
 ## returned.
 ##
 ## Example
 ##
 ## @example
 ## @group
 ## test sind
 ## @result{}
