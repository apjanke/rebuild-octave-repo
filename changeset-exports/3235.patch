# HG changeset patch
# User jwe
# Date 920618048 0
#      Fri Mar 05 07:14:08 1999 +0000
# Node ID 41602f25d19f539a2d5106fb907e883fe1014ac9
# Parent  be8e0ba13644e6970b2aa881615c61d339f43721
[project @ 1999-03-05 07:14:08 by jwe]

diff --git a/scripts/quaternion/demoquat.m b/scripts/quaternion/demoquat.m
--- a/scripts/quaternion/demoquat.m
+++ b/scripts/quaternion/demoquat.m
@@ -201,17 +201,17 @@ while(opt != quitopt)
       figure(kk)
       thy = myth(1,kk);
       thp = myth(2,kk);
      
       qyaw = quaternion([0,0,1],thy*pi/180);
       [jvy,th] = quaternion(qtrans(jf,qyaw));
       qpitch = quaternion(jvy(1:3),thp*pi/180);
       qb = qmult(qpitch, qyaw);
-      qi = quaternion([1 0 0],180*degrees);
+      qi = quaternion([1, 0, 0],180*degrees);
     
       printf("yaw=%8.4f, pitch=%8.4f, \n    qbi = (%8.4f)i + (%8.4e)j + (%8.4f)k + (%8.4f)\n",thy,thp, ...
     	qb(1), qb(2), qb(3), qb(4));
       [vv,th] = quaternion(qb);
       printf("      = (vector) = [%8.4f %8.4f %8.4f], th=%5.2f deg\n", ...
     	vv(1), vv(2), vv(3), th*180/pi);
     
       qb = qmult(qb,qi);
diff --git a/scripts/quaternion/qcoordinate_plot.m b/scripts/quaternion/qcoordinate_plot.m
--- a/scripts/quaternion/qcoordinate_plot.m
+++ b/scripts/quaternion/qcoordinate_plot.m
@@ -24,17 +24,17 @@ box2 =cm*[p7; p8; p5; p1; p4; p3; p7; p3
 #
 # need to use inverse quaternion to rotate axes
 qbf = qinv(qmult(qb,qinv(qf)));
 
 [eaxv,th_eig] = quaternion(qbf);
 
 # draw 1/3 circle in x-y plane around a unit z axis
 th = (0:-12:-120)*degrees*sign(th_eig);    lth = length(th);
-cpts = [0 0 0.1*cos(th) ; 0 0 0.1*sin(th); 0 1 1*ones(1,lth)];
+cpts = [0, 0, 0.1*cos(th) ; 0, 0, 0.1*sin(th); 0, 1, 1*ones(1,lth)];
 
 # rotate the 1/3 circle around eigenaxis of inertial to body rotation
 # qez = qe/qz = rotation to get from z axis to eigenaxis.
 # This rotates the 1/3 circle from x-y plane to the plane normal to
 # eigenaxis
 qez = qmult(qbf,qinv(quaternion(0,0,1,0)));
 eig_xm = qtransvmat(qez);
 cpts = cm*eig_xm*cpts;
diff --git a/scripts/quaternion/quaternion.m b/scripts/quaternion/quaternion.m
--- a/scripts/quaternion/quaternion.m
+++ b/scripts/quaternion/quaternion.m
@@ -25,22 +25,22 @@ case(1),					# extract information
       warning(sprintf("quaternion: ||w||=%e, setting=1 for vv, theta",norm(w)))
       w = w/norm(w);
     endif
     [a,b,c,d] = quaternion(w);
     theta = acos(d)*2;
     if(abs(theta) > pi)
       theta = theta - sign(theta)*pi;
     endif
-    sin_th_2 = norm([a b c]);
+    sin_th_2 = norm([a, b, c]);
 
     if(sin_th_2 != 0)
       vv = [a,b,c]/sin_th_2;
     else
-      vv = [a b c];
+      vv = [a, b, c];
     endif
     a = vv;
     b = theta;
   otherwise,
     usage("[a,b,c,d] = quaternion(w) or [vv,theta] = quaternion(w)");
   endswitch
 
 case(2),
@@ -71,16 +71,16 @@ case(2),
 
 case(4),
   if(nargout != 1)
     usage("w = quaterion(a,b,c,d)");
   endif
   if ( !(is_scalar(w) & is_scalar(x) & is_scalar(y) & is_scalar(z)) )
     error("input values must be scalars.")
   endif
-  a = [w x y z];
+  a = [w, x, y, z];
 
 otherwise,
   error("usage: [a,b,c,d] = quaternion(w), a = quaternion(w,x,y,z)")
 
 endswitch
 
 endfunction
