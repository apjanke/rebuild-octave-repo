# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1517433504 18000
#      Wed Jan 31 16:18:24 2018 -0500
# Node ID a4ea36915e38dcd5d144b54fee07b795f761d7ea
# Parent  13d7fdaad39136024e11c396e857c01de0604a35
handle structure arrays in the variable editor

* ov-struct.h, ov-struct.cc (octave_struct::edit_display,
octave_scalar_struct::edit_display): New functions.

* variable-editor-model.h, variable-editor-model.cc
(variable_editor_model::impl::cell::init_data_and_sub_editor):
New function.
(get_rows_and_columns, variable_editor_model::impl,
variable_editor_model::impl::quote_char,
variable_editor_model::value_at,
variable_editor_model::type_is_editable,
variable_editor_model::subscript_expression): Handle structs.

(variable_editor_model::impl::header_data,
variable_editor_model::headerData): New functions.

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -86,16 +86,42 @@ get_rows_and_columns (const octave_value
   if (val.is_string ())
     {
       // VAL will either be "" or a char array with a single row.
       // Either way, edit it as a single string.
 
       rows = 1;
       cols = 1;
     }
+  else if (val.isstruct ())
+    {
+      if (val.numel () == 1)
+        {
+          // Scalar struct.  Rows are fields, single column for
+          // values.
+
+          rows = val.nfields ();
+          cols = 1;
+        }
+      else if (val.rows () == 1 || val.columns () == 1)
+        {
+          // Vector struct.  Columns are fields, rows are values.
+
+          rows = val.numel ();
+          cols = val.nfields ();
+        }
+      else
+        {
+          // 2-d struct array.  Rows and columns index individual
+          // scalar structs.
+
+          rows = val.rows ();
+          cols = val.columns ();
+        }
+    }
   else
     {
       rows = val.rows ();
       cols = val.columns ();
     }
 }
 
 struct variable_editor_model::impl
@@ -110,36 +136,76 @@ struct variable_editor_model::impl
         m_editor_type (sub_none)
     {
       if (val.iscell ())
         {
           Cell cval = val.cell_value ();
 
           octave_value ov = cval(r,c);
 
-          if ((ov.numel () == 1 && (ov.isnumeric () || ov.islogical ()))
-              || (ov.is_string () && (ov.rows () == 1 || ov.isempty ())))
+          init_data_and_sub_editor (val, cval(r,c), r, c);
+        }
+      else if (val.isstruct ())
+        {
+          if (val.numel () == 1)
             {
-              m_data = QString::fromStdString (ov.edit_display (r, c));
+              // Scalar struct.  Rows are fields, single column for
+              // values.
+
+              octave_scalar_map m = val.scalar_map_value ();
 
-              return;
+              init_data_and_sub_editor (val, m.contents (r), r, c);
+            }
+          else if (val.rows () == 1 || val.columns () == 1)
+            {
+              // Vector struct.  Columns are fields, rows are values.
+
+              octave_map m = val.map_value ();
+
+              Cell cval = m.contents (c);
+
+              init_data_and_sub_editor (val, cval(r), r, c);
             }
           else
-            m_requires_sub_editor = true;
+            {
+              // 2-d struct array.  Rows and columns index individual
+              // scalar structs.
+
+              octave_map m = val.map_value ();
+
+              init_data_and_sub_editor (val, m(r,c), r, c);
+            }
         }
-
-      m_data = QString::fromStdString (val.edit_display (r, c));
+      else
+        m_data = QString::fromStdString (val.edit_display (r, c));
     }
 
     cell (const QString& d, const QString& s, const QString& t,
           bool rse, sub_editor_types edtype)
       : m_defined (true), m_data (d), m_status_tip (s), m_tool_tip (t),
         m_requires_sub_editor (rse), m_editor_type (edtype)
     { }
 
+    void init_data_and_sub_editor (const octave_value& val,
+                                   const octave_value& elt,
+                                   int r, int c)
+    {
+      if ((elt.numel () == 1 && (elt.isnumeric () || elt.islogical ()))
+          || (elt.is_string () && (elt.rows () == 1 || elt.isempty ())))
+        {
+          m_requires_sub_editor = false;
+          m_data = QString::fromStdString (elt.edit_display (0, 0));
+        }
+      else
+        {
+          m_requires_sub_editor = true;
+          m_data = QString::fromStdString (val.edit_display (r, c));
+        }
+    }
+
     bool m_defined;
 
     QVariant m_data;
 
     QVariant m_status_tip;
 
     QVariant m_tool_tip;
 
@@ -185,35 +251,128 @@ struct variable_editor_model::impl
   const cell& elem (const QModelIndex& idx) const { return elem (index (idx)); }
 
   char quote_char (int r, int c) const
   {
     if (m_value.is_string ())
       return get_quote_char (m_value);
     else if (m_value.iscell ())
       {
-        Cell cval = m_value.cell_value ();
+        octave_value ov = value_at (r, c);
 
-        octave_value ov = cval(r,c);
+        if (ov.is_string ())
+          return get_quote_char (ov);
+      }
+    else if (m_value.isstruct ())
+      {
+        octave_value ov = value_at (r, c);
 
-        if (ov.rows () == 1 || ov.is_zero_by_zero ())
+        if (ov.is_string ())
           return get_quote_char (ov);
       }
 
     return 0;
   }
 
+  QVariant header_data (int section, Qt::Orientation orientation,
+                        int role) const
+  {
+    if (role != Qt::DisplayRole)
+      return QVariant ();
+
+    if (m_value.isstruct ())
+      {
+        if (m_value.numel () == 1)
+          {
+            // Scalar struct.  Rows are fields, single column for
+            // values.
+
+            if (orientation == Qt::Horizontal)
+              return QString ("Values");
+            else
+              {
+                octave_scalar_map m = m_value.scalar_map_value ();
+
+                string_vector fields = m.fieldnames ();
+
+                return QString::fromStdString (fields(section));
+              }
+          }
+        else if (m_value.rows () == 1 || m_value.columns () == 1)
+          {
+            // Vector struct.  Columns are fields, rows are values.
+
+            if (orientation == Qt::Horizontal)
+              {
+                octave_map m = m_value.map_value ();
+
+                string_vector fields = m.fieldnames ();
+
+                return QString::fromStdString (fields(section));
+              }
+            else
+              return QString::number (section+1);
+          }
+        else
+          {
+            // 2-d struct array.  Rows and columns index individual
+            // scalar structs.
+
+            return QString::number (section+1);
+          }
+      }
+
+    return QString::number (section+1);
+  }
+
   QString subscript_expression (int r, int c) const
   {
     if (m_value.is_string ())
       return "";
     else if (m_value.iscell ())
       return (QString ("{%1, %2}")
               .arg (r + 1)
               .arg (c + 1));
+    else if (m_value.isstruct ())
+      {
+        if (m_value.numel () == 1)
+          {
+            // Scalar struct.  Rows are fields, single column for
+            // values.
+
+            octave_scalar_map m = m_value.scalar_map_value ();
+
+            string_vector fields = m.fieldnames ();
+
+            return QString (".%1").arg (QString::fromStdString (fields(r)));
+          }
+        else if (m_value.rows () == 1 || m_value.columns () == 1)
+          {
+            // Vector struct.  Columns are fields, rows are values.
+
+            octave_map m = m_value.map_value ();
+
+            string_vector fields = m.fieldnames ();
+
+            return (QString ("(%1).%2")
+                    .arg (r + 1)
+                    .arg (QString::fromStdString (fields(c))));
+          }
+        else
+          {
+            // 2-d struct array.  Rows and columns index individual
+            // scalar structs.
+
+            octave_map m = m_value.map_value ();
+
+            return (QString ("(%1,%2)")
+                    .arg (r + 1)
+                    .arg (c + 1));
+          }
+      }
     else
       return (QString ("(%1, %2)")
               .arg (r + 1)
               .arg (c + 1));
   }
 
   void update (const QModelIndex& idx)
   {
@@ -228,22 +387,55 @@ struct variable_editor_model::impl
         cell edit_cell (m_value, r, c);
 
         set (r, c, edit_cell);
       }
   }
 
   octave_value value_at (int r, int c) const
   {
-    if (! m_value.iscell ())
-      return octave_value ();
+    if (m_value.iscell ())
+      {
+        Cell cval = m_value.cell_value ();
+
+        return cval(r,c);
+      }
+    else if (m_value.isstruct ())
+      {
+        if (m_value.numel () == 1)
+          {
+            // Scalar struct.  Rows are fields, single column for
+            // values.
+
+            octave_scalar_map m = m_value.scalar_map_value ();
 
-    Cell cval = m_value.cell_value ();
+            return m.contents (r);
+          }
+        else if (m_value.rows () == 1 || m_value.columns () == 1)
+          {
+            // Vector struct.  Columns are fields, rows are values.
+
+            octave_map m = m_value.map_value ();
+
+            Cell cval = m.contents (c);
 
-    return cval.elem (r, c);
+            return cval(r);
+          }
+        else
+          {
+            // 2-d struct array.  Rows and columns index individual
+            // scalar structs.
+
+            octave_map m = m_value.map_value ();
+
+            return m(r,c);
+          }
+      }
+    else
+      return octave_value ();
   }
 
   octave_value value_at (const QModelIndex& idx) const
   {
     return value_at (idx.row (), idx.column ());
   }
 
   void set (const QModelIndex& idx, const cell& dat)
@@ -588,16 +780,23 @@ bool variable_editor_model::editor_type_
 }
 
 char
 variable_editor_model::quote_char (int r, int c) const
 {
   return m_d->quote_char (r, c);
 }
 
+QVariant
+variable_editor_model::headerData (int section, Qt::Orientation orientation,
+                                   int role) const
+{
+  return m_d->header_data (section, orientation, role);
+}
+
 QString
 variable_editor_model::subscript_expression (int r, int c) const
 {
   return m_d->subscript_expression (r, c);
 }
 
 QString
 variable_editor_model::subscript_expression (const QModelIndex& idx) const
@@ -836,19 +1035,21 @@ variable_editor_model::clear_data_cell (
 {
   m_d->clear (r, c);
 }
 
 bool
 variable_editor_model::type_is_editable (const octave_value& val,
                                          bool display_error) const
 {
-  if (((val.isnumeric () || val.islogical () || val.iscell ())
-       && val.ndims () == 2)
-      || (val.is_string () && (val.rows () == 1 || val.is_zero_by_zero ())))
+  if ((val.isnumeric () || val.islogical () || val.iscell ()
+       || val.isstruct ()) && val.ndims () == 2)
+    return true;
+
+  if (val.is_string () && (val.rows () == 1 || val.is_zero_by_zero ()))
     return true;
 
   if (display_error)
     {
       QString tname = QString::fromStdString (val.type_name ());
 
       dim_vector dv = val.dims ();
       QString dimstr = QString::fromStdString (dv.str ());
diff --git a/libgui/src/variable-editor-model.h b/libgui/src/variable-editor-model.h
--- a/libgui/src/variable-editor-model.h
+++ b/libgui/src/variable-editor-model.h
@@ -89,16 +89,19 @@ public:
 
   // If a sub editor is required, is it a standard type?
   bool editor_type_matrix (const QModelIndex& idx) const;
 
   bool editor_type_string (const QModelIndex& idx) const;
 
   char quote_char (int r, int c) const;
 
+  QVariant
+  headerData (int section, Qt::Orientation orientation, int role) const;
+
   // Return a subscript expression as a string that can be used to
   // access a sub-element of a data structure.  For example "{1,3}"
   // for cell array element {1,3} or "(2,4)" for array element (2,4).
 
   QString subscript_expression (int r, int c) const;
 
   QString subscript_expression (const QModelIndex& idx) const;
 
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -651,16 +651,43 @@ octave_struct::print_name_tag (std::ostr
 }
 
 static bool
 scalar (const dim_vector& dims)
 {
   return dims.ndims () == 2 && dims(0) == 1 && dims(1) == 1;
 }
 
+std::string
+octave_struct::edit_display (octave_idx_type r, octave_idx_type c) const
+{
+  octave_value val;
+  if (map.rows () == 1 || map.columns () == 1)
+    {
+      // Vector struct.  Columns are fields, rows are values.
+
+      Cell cval = map.contents (c);
+
+      val = cval(r);
+    }
+  else
+    {
+      // 2-d struct array.  Rows and columns index individual
+      // scalar structs.
+
+      val = map(r,c);
+    }
+
+  std::string tname = val.type_name ();
+  dim_vector dv = val.dims ();
+  std::string dimstr = dv.str ();
+  return "[" + dimstr + " " + tname + "]";
+}
+
+
 bool
 octave_struct::save_ascii (std::ostream& os)
 {
   octave_map m = map_value ();
 
   octave_idx_type nf = m.nfields ();
 
   const dim_vector dv = dims ();
@@ -1326,16 +1353,29 @@ octave_scalar_struct::print_name_tag (st
         newline (os);
 
       retval = true;
     }
 
   return retval;
 }
 
+std::string
+octave_scalar_struct::edit_display (octave_idx_type r, octave_idx_type) const
+{
+  // Scalar struct.  Rows are fields, single column for values.
+
+  octave_value val = map.contents (r);
+
+  std::string tname = val.type_name ();
+  dim_vector dv = val.dims ();
+  std::string dimstr = dv.str ();
+  return "[" + dimstr + " " + tname + "]";
+}
+
 bool
 octave_scalar_struct::save_ascii (std::ostream& os)
 {
   octave_map m = map_value ();
 
   octave_idx_type nf = m.nfields ();
 
   const dim_vector dv = dims ();
diff --git a/libinterp/octave-value/ov-struct.h b/libinterp/octave-value/ov-struct.h
--- a/libinterp/octave-value/ov-struct.h
+++ b/libinterp/octave-value/ov-struct.h
@@ -126,16 +126,18 @@ public:
   string_vector map_keys (void) const { return map.fieldnames (); }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
+  std::string edit_display (octave_idx_type i, octave_idx_type j) const;
+
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap,
                     octave::mach_info::float_format fmt);
@@ -247,16 +249,18 @@ public:
   string_vector map_keys (void) const { return map.fieldnames (); }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (std::ostream& os, const std::string& name) const;
 
+  std::string edit_display (octave_idx_type i, octave_idx_type j) const;
+
   bool save_ascii (std::ostream& os);
 
   bool load_ascii (std::istream& is);
 
   bool save_binary (std::ostream& os, bool& save_as_floats);
 
   bool load_binary (std::istream& is, bool swap,
                     octave::mach_info::float_format fmt);
