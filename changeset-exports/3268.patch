# HG changeset patch
# User jwe
# Date 936940671 0
#      Fri Sep 10 05:17:51 1999 +0000
# Node ID fdc7dd08cd853854857e5d3f16fb9735620ff904
# Parent  8092e8197ce4ae40bb6055d6d7e7b1dc0af8898a
[project @ 1999-09-10 05:16:49 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+Mon Sep  6 10:50:10 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* emacs/octave-inf.el (inferior-octave-startup-args):
+	Add --no-line-editing to the list.
+
 Fri Jul  9 09:15:24 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Try to handle IEEE FP flags for g77 on Alphas.
 
 Thu Jul  8 19:56:37 1999  Stephen Eglen  <stephen@gnu.org>
 
 	* emacs/octave-inf.el (inferior-octave-directory-tracker):
 	Change regexp so that it doesn't match commands beginning with `cd'.
diff --git a/doc/interpreter/emacs.texi b/doc/interpreter/emacs.texi
--- a/doc/interpreter/emacs.texi
+++ b/doc/interpreter/emacs.texi
@@ -340,17 +340,17 @@ can be indexed).
 @cindex TAGS
 @cindex Emacs TAGS files
 @cindex @code{otags}
 You can generate TAGS files for Emacs from Octave @file{.m} files using
 the shell script @code{otags} that is installed alongside your copy of
 Octave.
 
 Customization of Octave mode can be performed by modification of the
-variable @code{octave-mode-hook}.  It the value of this variable is
+variable @code{octave-mode-hook}.  If the value of this variable is
 non-@code{nil}, turning on Octave mode calls its value.
 
 If you discover a problem with Octave mode, you can conveniently send a
 bug report using @kbd{C-c C-b} (@code{octave-submit-bug-report}).  This
 automatically sets up a mail buffer with version information already
 added.  You just need to add a description of the problem, including a
 reproducible test case and send the message.
 
diff --git a/doc/interpreter/image.texi b/doc/interpreter/image.texi
--- a/doc/interpreter/image.texi
+++ b/doc/interpreter/image.texi
@@ -29,17 +29,17 @@ should be between 0 and 1 inclusive.  Th
 @code{colormap ("default")} restores the default colormap (a gray scale
 colormap with 64 entries).  The default colormap is returned.
 
 With no arguments, @code{colormap} returns the current color map.
 @end deftypefn
 
 @deftypefn {Function File} {} gray (@var{n})
 Return a gray colormap with @var{n} entries corresponding to values from
-0 to @var{n}.  The argument @var{n} should be a scalar.  If it is
+0 to @var{n}-1.  The argument @var{n} should be a scalar.  If it is
 omitted, 64 is assumed.
 @end deftypefn
 
 @deftypefn {Function File} {[@var{img}, @var{map}] =} gray2ind (@var{})
 Convert a gray scale intensity image to an Octave indexed image.
 @end deftypefn
 
 @deftypefn {Function File} {} image (@var{x}, @var{zoom})
diff --git a/emacs/octave-inf.el b/emacs/octave-inf.el
--- a/emacs/octave-inf.el
+++ b/emacs/octave-inf.el
@@ -36,17 +36,17 @@
   "\\(^octave\\(\\|.bin\\)\\(:[0-9]+\\)?\\|^debug\\|^\\)>+ "
   "*Regexp to match prompts for the inferior Octave process.")
 
 (defvar inferior-octave-startup-file nil
   "*Name of the inferior Octave startup file.
 The contents of this file are sent to the inferior Octave process on
 startup.")
 
-(defvar inferior-octave-startup-args '("-i")
+(defvar inferior-octave-startup-args '("-i" "--no-line-editing")
   "*List of command line arguments for the inferior Octave process.
 For example, for suppressing the startup message and using `traditional'
 mode, set this to (\"-q\" \"--traditional\").")
 
 (defvar inferior-octave-mode-map nil
   "Keymap used in Inferior Octave mode.")
 (if inferior-octave-mode-map
     ()
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+Fri Sep  3 12:39:17 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* lo-mappers.cc: Include ieeefp.h and sunmath.h if we have them.
+	* lo-ieee.c: Likewise.
+	Delete extern "C" declarations for infinity and quiet_nan.
+
 Fri Aug 20 07:58:00 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* mx-inlines.cc (VS_OP, SV_OP, VV_OP): Delete `extern template' decls.
 	(VS_OP_FCN, SV_OP_FCN, VV_OP_FCN): Declare template functions
 	`inline', not `static inline'.
 
 	* idx-vector.cc (intcmp): Declare args as const void *, not int *,
 	then cast to const int * to compare.
diff --git a/liboctave/lo-ieee.cc b/liboctave/lo-ieee.cc
--- a/liboctave/lo-ieee.cc
+++ b/liboctave/lo-ieee.cc
@@ -26,34 +26,34 @@ Software Foundation, 59 Temple Place - S
 
 #include <cfloat>
 #include <cmath>
 
 #if defined (HAVE_FLOATINGPOINT_H)
 #include <floatingpoint.h>
 #endif
 
+#if defined (HAVE_IEEEFP_H)
+#include <ieeefp.h>
+#endif
+
+#if defined (HAVE_SUNMATH_H)
+#include <sunmath.h>
+#endif
+
 #if defined (HAVE_NAN_H)
 #if defined (SCO)
 #define _IEEE 1
 #endif
 #include <nan.h>
 #if defined (SCO)
 #undef _IEEE
 #endif
 #endif
 
-#if defined (HAVE_INFINITY)
-extern "C" double infinity ();
-#endif
-
-#if defined (HAVE_QUIET_NAN)
-extern "C" double quiet_nan (long);
-#endif
-
 #include "lo-ieee.h"
 
 // Octave's idea of infinity.
 double octave_Inf;
 
 // Octave's idea of not a number.
 double octave_NaN;
 
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -22,16 +22,24 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cfloat>
 #include <cmath>
 
+#if defined (HAVE_IEEEFP_H)
+#include <ieeefp.h>
+#endif
+
+#if defined (HAVE_SUNMATH_H)
+#include <sunmath.h>
+#endif
+
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-specfun.h"
 #include "lo-utils.h"
 #include "oct-cmplx.h"
 
 #include "f77-fcn.h"
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,16 @@
+Thu Sep  9 19:31:58 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* image/saveimage.m: Initialize scale.
+
+Sun Sep  5 22:13:47 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* general/reshape.m: Allow reshape (a, size (b)).
+
 Fri Sep  3 00:01:38 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* specfun/erfinv.m: Improve stopping criterion.
 	Add iteration count as second return value.
 
 Mon Aug 30 12:07:00 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* statistics/base/mean.m: Use .', not ' to reorient row vectors.
diff --git a/scripts/general/reshape.m b/scripts/general/reshape.m
--- a/scripts/general/reshape.m
+++ b/scripts/general/reshape.m
@@ -23,19 +23,23 @@
 ## column major ordering).
 ##
 ## See also: `:', do_fortran_indexing
 
 ## Author: jwe
 
 function retval = reshape (a, m, n)
 
-  if (nargin != 3)
-    usage ("reshape (a, m, n)");
-  else
+  if (nargin == 2 && prod (size (m)) == 2)
+    n = m(2);
+    m = m(1);
+    nargin = 3;
+  endif
+
+  if (nargin == 3)
     [nr, nc] = size (a);
     if (nr * nc == m * n)
       dfi = do_fortran_indexing;
       istno = implicit_str_to_num_ok;
       unwind_protect
         do_fortran_indexing = 1;
 	implicit_str_to_num_ok = 1;
         retval = zeros (m, n);
@@ -45,11 +49,13 @@ function retval = reshape (a, m, n)
 	endif
       unwind_protect_cleanup
         do_fortran_indexing = dfi;
 	implicit_str_to_num_ok = istno;
       end_unwind_protect
     else
       error ("reshape: sizes must match");
     endif
+  else
+    usage ("reshape (a, m, n) or reshape (a, size (b))");
   endif
 
 endfunction
diff --git a/scripts/image/saveimage.m b/scripts/image/saveimage.m
--- a/scripts/image/saveimage.m
+++ b/scripts/image/saveimage.m
@@ -233,16 +233,17 @@ function saveimage (filename, img, img_f
 
     ## Compute padding to round cols * bps up to the nearest multiple of 8
     ## (nr and nc are switched because we transposed the image above).
 
     padright = (((img_nr * bps + 7) / 8) * 8 - img_nr * bps) / bps;
 
     scols = img_nr * pixfac;
     srows = img_nc * pixfac;
+    scale = 1;
 
     if (scols > pagewid * MARGIN || srows > pagehgt * MARGIN)
       if (scols > pagewid * MARGIN)
 	scale = scale * (pagewid / scols * MARGIN);
 	scols = scale * img_nr * pixfac;
 	srows = scale * img_nc * pixfac;
       endif
       if (srows > pagehgt * MARGIN)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,26 @@
+Thu Sep  9 17:09:23 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-stream.cc (get_size): Allow zero values.
+	(get_size): New arg, one_elt_size_spec.
+	(do_scanf_conv): New arg, `conv_count'.  Change instantiation
+	requests and all callers.
+	(octave_base_stream::do_scanf): Improve scanning of strings.
+	(octave_base_stream::do_oscanf): Remove size limit on %s conversions.
+
+	* oct-stream.cc (scanf_format_list::all_character_conversions):
+	Don't count %p as a character conversion.
+
+Tue Sep  7 08:31:04 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* pr-output.cc (set_real_matrix_format, set_complex_matrix_format): 
+	Move check for fixed_point_format ahead of check for
+	int_or_inf_or_nan.
+
 Thu Sep  2 11:54:51 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-obj.cc (make_argv): Correctly handle empty strings as args.
 
 Fri Aug 20 08:17:52 1999  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/quad.cc (quad): Delete unused label.
 
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -19,16 +19,17 @@ along with Octave; see the file COPYING.
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <cassert>
 #include <cstring>
 
 #include <iomanip.h>
 #include <strstream.h>
 
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 #include "lo-utils.h"
@@ -78,45 +79,50 @@ static int
 get_size (double d, const char *warn_for)
 {
   int retval = -1;
 
   if (! xisnan (d))
     {
       if (! xisinf (d))
 	{
-	  if (d > 0.0)
+	  if (d >= 0.0)
 	    retval = NINT (d);
 	  else
 	    ::error ("%s: negative value invalid as size specification",
 		     warn_for);
 	}
       else
 	retval = -1;
     }
   else
     ::error ("%s: NaN is invalid as size specification", warn_for);
 
   return retval;
 }
 
 static void
-get_size (const Matrix& size, int& nr, int& nc, const char *warn_for)
+get_size (const Matrix& size, int& nr, int& nc, bool& one_elt_size_spec,
+	  const char *warn_for)
 {
   nr = -1;
   nc = -1;
 
+  one_elt_size_spec = false;
+
   double dnr = -1.0;
   double dnc = -1.0;
 
   int sz_nr = size.rows ();
   int sz_nc = size.cols ();
 
   if (sz_nr == 1 && sz_nc == 1)
     {
+      one_elt_size_spec = true;
+
       dnr = size (0, 0);
       dnc = 1.0;
     }
   else if (sz_nr == 1 && sz_nc > 0)
     {
       dnr = size (0, 0);
 
       if (sz_nc == 2)
@@ -135,17 +141,17 @@ get_size (const Matrix& size, int& nr, i
     }
   else
     ::error ("%s: invalid size specification", warn_for);
 
   if (! error_state)
     {
       nr = get_size (dnr, warn_for);
 
-      if (! error_state && dnc > 0.0)
+      if (! error_state && dnc >= 0.0)
 	nc = get_size (dnc, warn_for);
     }
 }
 
 scanf_format_list::scanf_format_list (const string& s)
   : nconv (0), curr_idx (0), list (16), buf (0)
 {
   int num_elts = 0;
@@ -869,17 +875,19 @@ octave_base_stream::read (const Matrix& 
 
   if (isp)
     {
       istream& is = *isp;
 
       int nr = -1;
       int nc = -1;
 
-      get_size (size, nr, nc, "fread");
+      bool ignore;
+
+      get_size (size, nr, nc, ignore, "fread");
 
       if (! error_state)
 	{
 	  if (flt_fmt == oct_mach_info::unknown)
 	    flt_fmt = float_format ();
 
 	  int tmp = retval.read (is, nr, nc, dt, skip, flt_fmt);
 
@@ -893,18 +901,18 @@ octave_base_stream::read (const Matrix& 
     invalid_operation ("fread", "reading");
 
   return retval;
 }
 
 template <class T>
 void
 do_scanf_conv (istream& is, const char *fmt, T valptr, Matrix& mval,
-	       double *data, int& idx, int nr, int max_size,
-	       bool discard) 
+	       double *data, int& idx, int& conv_count, int nr,
+	       int max_size, bool discard) 
 {
   is.scan (fmt, valptr);
 
   if (is)
     {
       if (idx == max_size && ! discard)
 	{
 	  max_size *= 2;
@@ -913,69 +921,106 @@ do_scanf_conv (istream& is, const char *
 	    mval.resize (nr, max_size / nr, 0.0);
 	  else
 	    mval.resize (max_size, 1, 0.0);
 
 	  data = mval.fortran_vec ();
 	}
 
       if (! discard)
-	data[idx++] = *(valptr);
+	{
+	  conv_count++;
+	  data[idx++] = *(valptr);
+	}
     }
 }
 
 template void
 do_scanf_conv (istream&, const char*, int*, Matrix&, double*, int&,
-	       int, int, bool);
+	       int&, int, int, bool);
 
 template void
 do_scanf_conv (istream&, const char*, long int*, Matrix&, double*, int&,
-	       int, int, bool);
+	       int&, int, int, bool);
 
 template void
 do_scanf_conv (istream&, const char*, short int*, Matrix&, double*, int&,
-	       int, int, bool);
+	       int&, int, int, bool);
 
 #if 0
 template void
 do_scanf_conv (istream&, const char*, float*, Matrix&, double*, int&,
-	       int, int, bool);
+	       int&, int, int, bool);
 #endif
 
 template void
 do_scanf_conv (istream&, const char*, double*, Matrix&, double*, int&,
-	       int, int, bool);
+	       int&, int, int, bool);
 
 
 octave_value
 octave_base_stream::do_scanf (scanf_format_list& fmt_list,
-			      int nr, int nc, int& count)
+			      int nr, int nc, bool one_elt_size_spec,
+			      int& conversion_count)
 {
-  count = 0;
+  conversion_count = 0;
+
+  int data_index = 0;
 
   octave_value retval = Matrix ();
 
+  if (nr == 0 || nc == 0)
+    {
+      if (one_elt_size_spec)
+	nc = 0;
+
+      return Matrix (nr, nc, 0.0);
+    }
+
   istream *isp = input_stream ();
 
   bool all_char_conv = fmt_list.all_character_conversions ();
 
   Matrix mval;
   double *data = 0;
   int max_size = 0;
+  int max_conv = 0;
 
   int final_nr = 0;
   int final_nc = 0;
 
-  if (nr > 0)
+  if (all_char_conv)
+    {
+      if (one_elt_size_spec)
+	{
+	  mval.resize (1, 512, 0.0);
+	  data = mval.fortran_vec ();
+	  max_size = 512;
+	  
+	  if (nr > 0)
+	    max_conv = nr;
+	}
+      else if (nr > 0 && nc > 0)
+	{
+	  mval.resize (nr, 32, 0.0);
+	  data = mval.fortran_vec ();
+	  max_size = nr * 32;
+
+	  max_conv = nr * nc;
+	}
+    }
+  else if (nr > 0)
     {
       if (nc > 0)
 	{
 	  mval.resize (nr, nc, 0.0);
 	  data = mval.fortran_vec ();
 	  max_size = nr * nc;
+
+	  max_conv = max_size;
 	}
       else
 	{
 	  mval.resize (nr, 32, 0.0);
 	  data = mval.fortran_vec ();
 	  max_size = nr * 32;
 	}
     }
@@ -993,37 +1038,42 @@ octave_base_stream::do_scanf (scanf_form
       const scanf_format_elt *elt = fmt_list.first ();
 
       ios::fmtflags flags = is.flags ();
 
       for (;;)
 	{
 	  if (elt)
 	    {
-	      if (count == max_size)
+	      if (max_conv > 0 && conversion_count == max_conv)
+		{
+		  if (all_char_conv && one_elt_size_spec)
+		    {
+		      final_nr = 1;
+		      final_nc = data_index;
+		    }
+		  else
+		    {
+		      final_nr = nr;
+		      final_nc = (data_index - 1) / nr + 1;
+		    }
+
+		  break;
+		}
+	      else if (data_index == max_size)
 		{
 		  if (nr > 0)
 		    {
-		      if (nc > 0)
-			{
-			  final_nr = nr;
-			  final_nc = nc;
-
-			  break;
-			}
-		      else
-			{
-			  max_size *= 2;
-			  mval.resize (nr, max_size / nr, 0.0);
-			  data = mval.fortran_vec ();
-			}
+		      max_size *= 2;
+		      mval.resize (nr, max_size / nr, 0.0);
+		      data = mval.fortran_vec ();
 		    }
 		  else
 		    {
-		      max_size *=2;
+		      max_size *= 2;
 		      mval.resize (max_size, 1, 0.0);
 		      data = mval.fortran_vec ();
 		    }
 		}
 
 	      const char *fmt = elt->text;
 
 	      bool discard = elt->discard;
@@ -1040,92 +1090,123 @@ octave_base_stream::do_scanf (scanf_form
 
 		case 'd': case 'i': case 'o': case 'u': case 'x':
 		  {
 		    switch (elt->modifier)
 		      {
 		      case 'h':
 			{
 			  short int tmp;
-			  do_scanf_conv (is, fmt, &tmp, mval, data, count,
+			  do_scanf_conv (is, fmt, &tmp, mval, data,
+					 data_index, conversion_count,
 					 nr, max_size, discard);
 			}
 		      break;
 
 		      case 'l':
 			{
 			  long int tmp;
-			  do_scanf_conv (is, fmt, &tmp, mval, data, count,
+			  do_scanf_conv (is, fmt, &tmp, mval, data,
+					 data_index, conversion_count,
 					 nr, max_size, discard);
 			}
 		      break;
 
 		      default:
 			{
 			  int tmp;
-			  do_scanf_conv (is, fmt, &tmp, mval, data, count,
+			  do_scanf_conv (is, fmt, &tmp, mval, data,
+					 data_index, conversion_count,
 					 nr, max_size, discard);
 			}
 		      break;
 		      }
 		  }
 		break;
 
 		case 'e': case 'f': case 'g':
 		  {
 		    double tmp;
 
-		    do_scanf_conv (is, fmt, &tmp, mval, data, count,
+		    do_scanf_conv (is, fmt, &tmp, mval, data,
+				   data_index, conversion_count,
 				   nr, max_size, discard);
 		  }
 		break;
 
 		case 'c':
 		  is.unsetf (ios::skipws);
 		  // Fall through...
 
 		case 's':
 		  {
-		    int len = strlen (fmt);
-		    char *tmp_fmt = new char [len+1];
-		    strcpy (tmp_fmt, fmt);
-		    if (tmp_fmt[len-1] == 's')
-		      tmp_fmt[len-1] = 'c';
-
-		    int width = elt->width ? elt->width : 1;
-
-		    char *tmp = new char [width+1];
-
-		    is.scan (tmp_fmt, tmp);
-
-		    delete [] tmp_fmt;
-
-		    tmp[width] = '\0';
+		    int width = elt->width;
+
+		    if (elt->type == 'c' && width == 0)
+		      width = 1;
+
+		    char *tmp = 0;
+
+		    if (width)
+		      {
+			tmp = new char [width+1];
+
+			is.scan (fmt, tmp);
+
+			tmp[width] = '\0';
+		      }
+		    else
+		      {
+			// We're looking at a `%s' format.  We have to
+			// skip initial whitespace and then read until
+			// the next whitespace character.
+
+			ostrstream buf;
+
+			int c = EOF;
+
+			while (is && (c = is.get ()) != EOF && isspace (c))
+			  /* skip leading whitespace */;
+
+			if (is && c != EOF)
+			  buf << (char) c;
+			  
+			while (is && (c = is.get ()) != EOF && ! isspace (c))
+			  buf << (char) c;
+
+			buf << ends;
+
+			tmp = buf.str ();
+		      }
+
+		    width = strlen (tmp);
 
 		    if (is)
 		      {
 			int i = 0;
 
 			if (! discard)
 			  {
+			    conversion_count++;
+
 			    while (i < width && tmp[i] != '\0')
 			      {
-				if (count == max_size)
+				if (data_index == max_size)
 				  {
 				    max_size *= 2;
 
 				    if (nr > 0)
 				      mval.resize (nr, max_size / nr, 0.0);
 				    else
 				      mval.resize (max_size, 1, 0.0);
 
 				    data = mval.fortran_vec ();
 				  }
 
-				data[count++] = tmp[i++];
+				data[data_index++] = tmp[i++];
 			      }
 			  }
 		      }
 
 		    delete [] tmp;
 
 		    is.setf (flags);
 		  }
@@ -1141,32 +1222,50 @@ octave_base_stream::do_scanf (scanf_form
 		}
 
 	      if (! ok ())
 		{
 		  break;
 		}
 	      else if (! is)
 		{
-		  if (nr > 0)
+		  if (all_char_conv)
 		    {
-		      if (count > nr)
+		      if (one_elt_size_spec)
+			{
+			  final_nr = 1;
+			  final_nc = data_index;
+			}
+		      else if (data_index > nr)
 			{
 			  final_nr = nr;
-			  final_nc = (count - 1) / nr + 1;
+			  final_nc = (data_index - 1) / nr + 1;
 			}
 		      else
 			{
-			  final_nr = count;
+			  final_nr = data_index;
+			  final_nc = 1;
+			}
+		    }
+		  else if (nr > 0)
+		    {
+		      if (data_index > nr)
+			{
+			  final_nr = nr;
+			  final_nc = (data_index - 1) / nr + 1;
+			}
+		      else
+			{
+			  final_nr = data_index;
 			  final_nc = 1;
 			}
 		    }
 		  else
 		    {
-		      final_nr = count;
+		      final_nr = data_index;
 		      final_nc = 1;
 		    }
 
 		  // XXX FIXME XXX -- is this the right thing to do?
 		  // What about other streams?
 		  if (name () == "stdin")
 		    {
 		      is.clear ();
@@ -1189,27 +1288,20 @@ octave_base_stream::do_scanf (scanf_form
 	  elt = fmt_list.next ();
 	}
     }
 
   if (ok ())
     {
       mval.resize (final_nr, final_nc, 0.0);
 
+      retval = mval;
+
       if (all_char_conv)
-	{
-	  if (nr < 0)
-	    mval = mval.transpose ();
-
-	  retval = mval;
-
-	  retval = retval.convert_to_str ();
-	}
-      else
-	retval = mval;
+	retval = retval.convert_to_str ();
     }
 
   return retval;
 }
 
 octave_value
 octave_base_stream::scanf (const string& fmt, const Matrix& size,
 			   int& count)
@@ -1262,20 +1354,22 @@ octave_base_stream::scanf (const string&
 	  }
 	  break;
 
 	default:
 	  {
 	    int nr = -1;
 	    int nc = -1;
 
-	    get_size (size, nr, nc, "fscanf");
+	    bool one_elt_size_spec;
+
+	    get_size (size, nr, nc, one_elt_size_spec, "fscanf");
 
 	    if (! error_state)
-	      retval = do_scanf (fmt_list, nr, nc, count);
+	      retval = do_scanf (fmt_list, nr, nc, one_elt_size_spec, count);
 	  }
 	  break;
 	}
     }
   else
     invalid_operation ("fscanf", "reading");
 
   return retval;
@@ -1362,33 +1456,59 @@ octave_base_stream::do_oscanf (const sca
 		is.setf (flags);
 
 		delete [] tmp;
 	      }
 	      break;
 
 	    case 's':
 	      {
-		// XXX FIXME XXX -- this must be fixed!
-
-		int width = elt->width ? elt->width : 65535;
-		char *tmp = new char [width+1];
-
-		if (is.scan (fmt, tmp))
+		int width = elt->width;
+
+		char *tmp = 0;
+
+		if (width)
 		  {
-		    if (! discard)
-		      {
-			tmp[width] = '\0';
-			retval = tmp;
-		      }
+		    tmp = new char [width+1];
+
+		    is.scan (fmt, tmp);
+
+		    tmp[width] = '\0';
 		  }
 		else
-		  quit = true;
+		  {
+		    // We're looking at a `%s' format.  We have to
+		    // skip initial whitespace and then read until
+		    // the next whitespace character.
+
+		    ostrstream buf;
+
+		    int c = EOF;
+
+		    while (is && (c = is.get ()) != EOF && isspace (c))
+		      /* skip leading whitespace */;
+
+		    if (is && c != EOF)
+		      buf << (char) c;
+			  
+		    while (is && (c = is.get ()) != EOF && ! isspace (c))
+		      buf << (char) c;
+
+		    buf << ends;
+
+		    tmp = buf.str ();
+
+		    if (! discard)
+		      retval = tmp;
+		  }
 
 		delete [] tmp;
+
+		if (! is)
+		  quit = true;
 	      }
 	      break;
 
 	    case 'p': case '[':
 	      error ("fscanf: unsupported format specifier");
 	      break;
 
 	    default:
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -313,17 +313,17 @@ private:
 
   octave_value do_char_scanf (scanf_format_list& fmt_list,
 			      int nr, int nc, int& count);
 
   octave_value do_real_scanf (scanf_format_list& fmt_list,
 			      int nr, int nc, int& count);
 
   octave_value do_scanf (scanf_format_list& fmt_list, int nr, int nc,
-			 int& count);
+			 bool one_elt_size_spec, int& count);
 
   octave_value scanf (const string& fmt, const Matrix& size, int& count);
 
   bool do_oscanf (const scanf_format_elt *elt, octave_value&);
 
   octave_value_list oscanf (const string& fmt);
 
   // Functions that are defined for all output streams (output streams
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -288,33 +288,33 @@ set_real_matrix_format (bool sign, int x
       fw = 2 * sizeof (double);
       rd = 0;
     }
   else if (bit_format)
     {
       fw = 8 * sizeof (double);
       rd = 0;
     }
+  else if (Vfixed_point_format)
+    {
+      rd = prec;
+      fw = rd + 2;
+      if (inf_or_nan && fw < 3)
+	fw = 3;
+      fw += sign;
+    }
   else if (int_or_inf_or_nan)
     {
       int digits = x_max > x_min ? x_max : x_min;
       fw = digits <= 0 ? 1 : digits;
       if (inf_or_nan && fw < 3)
 	fw = 3;
       fw += sign;
       rd = 0;
     }
-  else if (Vfixed_point_format)
-    {
-      rd = prec;
-      fw = rd + 2;
-      if (inf_or_nan && fw < 3)
-	fw = 3;
-      fw += sign;
-    }
   else
     {
       int ld_max, rd_max;
       if (x_max > 0)
 	{
 	  ld_max = x_max;
 	  rd_max = prec > x_max ? prec - x_max : prec;
 	  x_max++;
@@ -608,33 +608,33 @@ set_complex_matrix_format (bool sign, in
       rd = 0;
     }
   else if (bit_format)
     {
       r_fw = 8 * sizeof (double);
       i_fw = 8 * sizeof (double);
       rd = 0;
     }
+  else if (Vfixed_point_format)
+    {
+      rd = prec;
+      i_fw = r_fw = rd + 2;
+      if (inf_or_nan && i_fw < 3)
+	i_fw = r_fw = 3;
+      r_fw += sign;
+    }
   else if (int_or_inf_or_nan)
     {
       int digits = x_max > x_min ? x_max : x_min;
       i_fw = r_fw = digits <= 0 ? 1 : digits;
       if (inf_or_nan && i_fw < 3)
 	i_fw = r_fw = 3;
       r_fw += sign;
       rd = 0;
     }
-  else if (Vfixed_point_format)
-    {
-      rd = prec;
-      i_fw = r_fw = rd + 2;
-      if (inf_or_nan && i_fw < 3)
-	i_fw = r_fw = 3;
-      r_fw += sign;
-    }
   else
     {
       int ld_max, rd_max;
       if (x_max > 0)
 	{
 	  ld_max = x_max;
 	  rd_max = prec > x_max ? prec - x_max : prec;
 	  x_max++;
