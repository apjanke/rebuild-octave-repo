# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1368902065 14400
#      Sat May 18 14:34:25 2013 -0400
# Node ID de79cdbbdf7ca417865b256a1d98af19236f8951
# Parent  cf939872811cce65d1e41fa946cd62753092e03c
improve parsing of commands

* lex.ll (CMD_OR_COMPUTED_ASSIGN_OP): New macro.
("+=", "-=", "*=", "/=", "\\=", ".+=", ".-=", ".*=", "./=", ".\\=",
"^=", "**=", ".^=", ".**=", "&=", "|=", "<<=", ">>="): Use it.
(CMD_OR_UNARY_OP): Use previous_token_may_be_command instead of
looks_like_command_arg.
("--", "++"): Use CMD_OR_UNARY_OP.
( \?{IDENT} | \?{IDENT}\.{IDENT}): Check for possible command syntax.
({IDENT}@{IDENT} | {IDENT}@{IDENT}.{IDENT}): Likewise.

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -142,23 +142,41 @@ object) relevant global values before an
         } \
       else \
         { \
           return curr_lexer->handle_op_internal (TOK, false, COMPAT); \
         } \
     } \
   while (0)
 
+#define CMD_OR_COMPUTED_ASSIGN_OP(PATTERN, TOK) \
+ \
+  do \
+    { \
+      curr_lexer->lexer_debug (PATTERN); \
+ \
+      if (curr_lexer->previous_token_may_be_command ()) \
+        { \
+          yyless (0); \
+          curr_lexer->push_start_state (COMMAND_START); \
+        } \
+      else \
+        { \
+          return curr_lexer->handle_incompatible_op (PATTERN, TOK, false); \
+        } \
+    } \
+  while (0)
+    
 #define CMD_OR_UNARY_OP(PATTERN, TOK, COMPAT) \
  \
   do \
     { \
       curr_lexer->lexer_debug (PATTERN); \
  \
-      if (curr_lexer->looks_like_command_arg ()) \
+      if (curr_lexer->previous_token_may_be_command ()) \
         { \
           yyless (0); \
           curr_lexer->push_start_state (COMMAND_START); \
         } \
       else \
         { \
           int tok \
             = (COMPAT \
@@ -732,41 +750,58 @@ ANY_INCLUDING_NL (.|{NL})
 %{
 // Superclass method identifiers.
 %}
 
 {IDENT}@{IDENT} |
 {IDENT}@{IDENT}.{IDENT} {
     curr_lexer->lexer_debug ("{IDENT}@{IDENT}|{IDENT}@{IDENT}.{IDENT}");
 
-    int id_tok = curr_lexer->handle_superclass_identifier ();
-
-    if (id_tok >= 0)
+    if (curr_lexer->previous_token_may_be_command ())
+      {
+        yyless (0);
+        curr_lexer->push_start_state (COMMAND_START);
+      }
+    else
       {
-        curr_lexer->looking_for_object_index = true;
-
-        return curr_lexer->count_token_internal (SUPERCLASSREF);
+        int id_tok = curr_lexer->handle_superclass_identifier ();
+
+        if (id_tok >= 0)
+          {
+            curr_lexer->looking_for_object_index = true;
+
+            return curr_lexer->count_token_internal (SUPERCLASSREF);
+          }
       }
   }
 
 %{
 // Metaclass query
 %}
 
 \?{IDENT} |
 \?{IDENT}\.{IDENT} {
     curr_lexer->lexer_debug ("\\?{IDENT}|\\?{IDENT}\\.{IDENT}");
 
-    int id_tok = curr_lexer->handle_meta_identifier ();
-
-    if (id_tok >= 0)
+    if (curr_lexer->previous_token_may_be_command ()
+        &&  curr_lexer->space_follows_previous_token ())
+      {
+        yyless (0);
+        curr_lexer->push_start_state (COMMAND_START);
+      }
+    else
       {
-        curr_lexer->looking_for_object_index = true;
-
-        return curr_lexer->count_token_internal (METAQUERY);
+        int id_tok = curr_lexer->handle_meta_identifier ();
+
+        if (id_tok >= 0)
+          {
+            curr_lexer->looking_for_object_index = true;
+
+            return curr_lexer->count_token_internal (METAQUERY);
+          }
       }
   }
 
 "@" {
     if (curr_lexer->previous_token_may_be_command ()
         &&  curr_lexer->space_follows_previous_token ())
       {
         yyless (0);
@@ -991,47 +1026,18 @@ ANY_INCLUDING_NL (.|{NL})
 
     return curr_lexer->handle_op (",", ',', at_beginning_of_statement);
   }
 
 ".'" {
     return curr_lexer->handle_op (".'", TRANSPOSE, false);
   }
 
-"++" {
-    curr_lexer->lexer_debug ("++");
-
-    int tok = curr_lexer->handle_incompatible_unary_op (PLUS_PLUS, false);
-
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput (',');
-        // Adjust for comma that was not really in the input stream.
-        curr_lexer->current_input_column--;
-      }
-    else
-      return tok;
-  }
-
-"--" {
-    curr_lexer->lexer_debug ("--");
-
-    int tok = curr_lexer->handle_incompatible_unary_op (MINUS_MINUS, false);
-
-    if (tok < 0)
-      {
-        yyless (0);
-        curr_lexer->xunput (',');
-        // Adjust for comma that was not really in the input stream.
-        curr_lexer->current_input_column--;
-      }
-    else
-      return tok;
-  }
+"++" { CMD_OR_UNARY_OP ("++", PLUS_PLUS, false); }
+"--" { CMD_OR_UNARY_OP ("--", MINUS_MINUS, false); }
 
 "(" {
     curr_lexer->lexer_debug ("(");
 
     bool unput_comma = false;
 
     if (curr_lexer->whitespace_is_significant ()
         && curr_lexer->space_follows_previous_token ())
@@ -1114,34 +1120,34 @@ ANY_INCLUDING_NL (.|{NL})
 %}
 
 "=" {
     curr_lexer->maybe_mark_previous_token_as_variable ();
 
     return curr_lexer->handle_op ("=", '=');
   }
 
-"+="   { return curr_lexer->handle_incompatible_op ("+=", ADD_EQ); }
-"-="   { return curr_lexer->handle_incompatible_op ("-=", SUB_EQ); }
-"*="   { return curr_lexer->handle_incompatible_op ("*=", MUL_EQ); }
-"/="   { return curr_lexer->handle_incompatible_op ("/=", DIV_EQ); }
-"\\="  { return curr_lexer->handle_incompatible_op ("\\=", LEFTDIV_EQ); }
-".+="  { return curr_lexer->handle_incompatible_op (".+=", ADD_EQ); }
-".-="  { return curr_lexer->handle_incompatible_op (".-=", SUB_EQ); }
-".*="  { return curr_lexer->handle_incompatible_op (".*=", EMUL_EQ); }
-"./="  { return curr_lexer->handle_incompatible_op ("./=", EDIV_EQ); }
-".\\=" { return curr_lexer->handle_incompatible_op (".\\=", ELEFTDIV_EQ); }
-"^="   { return curr_lexer->handle_incompatible_op ("^=", POW_EQ); }
-"**="  { return curr_lexer->handle_incompatible_op ("^=", POW_EQ); }
-".^="  { return curr_lexer->handle_incompatible_op (".^=", EPOW_EQ); }
-".**=" { return curr_lexer->handle_incompatible_op (".^=", EPOW_EQ); }
-"&="   { return curr_lexer->handle_incompatible_op ("&=", AND_EQ); }
-"|="   { return curr_lexer->handle_incompatible_op ("|=", OR_EQ); }
-"<<="  { return curr_lexer->handle_incompatible_op ("<<=", LSHIFT_EQ); }
-">>="  { return curr_lexer->handle_incompatible_op (">>=", RSHIFT_EQ); }
+"+="   { CMD_OR_COMPUTED_ASSIGN_OP ("+=", ADD_EQ); }
+"-="   { CMD_OR_COMPUTED_ASSIGN_OP ("-=", SUB_EQ); }
+"*="   { CMD_OR_COMPUTED_ASSIGN_OP ("*=", MUL_EQ); }
+"/="   { CMD_OR_COMPUTED_ASSIGN_OP ("/=", DIV_EQ); }
+"\\="  { CMD_OR_COMPUTED_ASSIGN_OP ("\\=", LEFTDIV_EQ); }
+".+="  { CMD_OR_COMPUTED_ASSIGN_OP (".+=", ADD_EQ); }
+".-="  { CMD_OR_COMPUTED_ASSIGN_OP (".-=", SUB_EQ); }
+".*="  { CMD_OR_COMPUTED_ASSIGN_OP (".*=", EMUL_EQ); }
+"./="  { CMD_OR_COMPUTED_ASSIGN_OP ("./=", EDIV_EQ); }
+".\\=" { CMD_OR_COMPUTED_ASSIGN_OP (".\\=", ELEFTDIV_EQ); }
+"^="   { CMD_OR_COMPUTED_ASSIGN_OP ("^=", POW_EQ); }
+"**="  { CMD_OR_COMPUTED_ASSIGN_OP ("^=", POW_EQ); }
+".^="  { CMD_OR_COMPUTED_ASSIGN_OP (".^=", EPOW_EQ); }
+".**=" { CMD_OR_COMPUTED_ASSIGN_OP (".^=", EPOW_EQ); }
+"&="   { CMD_OR_COMPUTED_ASSIGN_OP ("&=", AND_EQ); }
+"|="   { CMD_OR_COMPUTED_ASSIGN_OP ("|=", OR_EQ); }
+"<<="  { CMD_OR_COMPUTED_ASSIGN_OP ("<<=", LSHIFT_EQ); }
+">>="  { CMD_OR_COMPUTED_ASSIGN_OP (">>=", RSHIFT_EQ); }
 
 %{
 // In Matlab, '{' may also trigger command syntax.
 %}
 
 "{" {
     curr_lexer->lexer_debug ("{");
 
