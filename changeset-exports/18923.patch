# HG changeset patch
# User pantxo <pantxo.diribarne@gmail.com>
# Date 1405008116 -7200
#      Thu Jul 10 18:01:56 2014 +0200
# Branch gui-release
# Node ID 58f1178f49ef7095559740ce428712bb6d6cab15
# Parent  1802dc60fb4a634d4ad13e2ba26ecd50aa4e2044
Redefine mac specific default shortcuts (bug #41217)

* shortcut-manager.cc (shortcut_manager::shortcut_manager ()):
  disable automatic CMD/CTRL swap under mac.
  (shortcut_manager::do_init_data ()):
  define place holders for ctrl, ctrl+shift and ctrl+alt.
  (shortcut_manager::do_init_data ()):
  define a platform specific prefix for F* functions (Option under mac).
  (shortcut_manager::do_init_data ()):
  use place holders, and prefix all shortcuts using function keys (F*).

diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -19,16 +19,17 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <QtCore>
 #include <QMessageBox>
 #include <QDebug>
 #include <QGridLayout>
 #include <QVBoxLayout>
 #include <QDialogButtonBox>
 #include <QPushButton>
 #include <QLineEdit>
 #include <QCheckBox>
@@ -41,16 +42,21 @@ along with Octave; see the file COPYING.
 #include "shortcut-manager.h"
 #include "singleton-cleanup.h"
 
 shortcut_manager *shortcut_manager::instance = 0;
 
 shortcut_manager::shortcut_manager ()
 {
   setObjectName ("Shortcut_Manager");
+  
+  // Mac: don't let Qt interpret CMD key ("Meta" in Qt terminology) as Ctrl
+#if defined (Q_OS_MAC)
+  QCoreApplication::setAttribute (Qt::AA_MacDontSwapCtrlAndMeta, true);
+#endif
 
   _settings = resource_manager::get_settings ();
 }
 
 shortcut_manager::~shortcut_manager ()
 {
 }
 
@@ -75,65 +81,97 @@ shortcut_manager::instance_ok (void)
     }
 
   return retval;
 }
 
 void
 shortcut_manager::do_init_data ()
 {
+  QKeySequence ctrl;
+  int prefix; 
+#if defined (Q_OS_MAC)
+  // Use CMD key as an equivalent of Ctrl key on other platforms
+  ctrl =  Qt::MetaModifier;
+  // Some of octave default shortcuts on windows/linux are already defined 
+  // as system wide shortcuts on Mac Os X (almost all Function keys). 
+  // Prefix those with Option (Alt) modifier to avoid conflicts.
+  prefix = Qt::AltModifier;
+#else
+  ctrl = Qt::ControlModifier;
+  prefix = Qt::NoModifier;
+#endif
+
+  QKeySequence ctrl_shift = ctrl + Qt::ShiftModifier;
+  QKeySequence ctrl_alt = ctrl + Qt::AltModifier;
+  
   // actions of the main window
 
   // file
   init (tr ("New File"), "main_file:new_file", QKeySequence::New);
   init (tr ("New Function"), "main_file:new_function",
-        QKeySequence ("Ctrl+Shift+N"));
+        QKeySequence (ctrl_shift + Qt::Key_N));
   init (tr ("New Figure"), "main_file:new_figure", QKeySequence ());
   init (tr ("Open File"), "main_file:open_file", QKeySequence::Open);
   init (tr ("Load Workspace"), "main_file:load_workspace", QKeySequence ());
   init (tr ("Save Workspace As"), "main_file:save_workspace", QKeySequence ());
   init (tr ("Preferences"), "main_file:preferences", QKeySequence ());
   init (tr ("Exit Octave"), "main_file:exit", QKeySequence::Quit);
 
   // edit
   init (tr ("Copy"), "main_edit:copy", QKeySequence::Copy);
   init (tr ("Paste"), "main_edit:paste", QKeySequence::Paste);
   init (tr ("Undo"), "main_edit:undo", QKeySequence::Undo);
   init (tr ("Select All"), "main_edit:select_all", QKeySequence ());
   init (tr ("Clear Clipboard"), "main_edit:clear_clipboard", QKeySequence ());
   init (tr ("Find in Files"), "main_edit:find_in_files",
-        QKeySequence (Qt::ControlModifier + Qt::ShiftModifier + Qt::Key_F));
+        QKeySequence (ctrl_shift + Qt::Key_F));
   init (tr ("Clear Command Window"), "main_edit:clear_command_window",
         QKeySequence ());
   init (tr ("Clear Command History"), "main_edit:clear_history",
         QKeySequence ());
   init (tr ("Clear Workspace"), "main_edit:clear_workspace", QKeySequence ());
 
-  // debug
-  init (tr ("Step Over"), "main_debug:step_over", QKeySequence (Qt::Key_F10));
-  init (tr ("Step Into"), "main_debug:step_into", QKeySequence (Qt::Key_F11));
-  init (tr ("Step Out"), "main_debug:step_out", QKeySequence (Qt::ShiftModifier + Qt::Key_F11));
-  init (tr ("Continue"), "main_debug:continue", QKeySequence (Qt::Key_F5));
-  init (tr ("Quit Debug Mode"), "main_debug:quit", QKeySequence (Qt::ShiftModifier + Qt::Key_F5));
+  // debug 
+  init (tr ("Step Over"), "main_debug:step_over", 
+        QKeySequence (prefix + Qt::Key_F10));
+  init (tr ("Step Into"), "main_debug:step_into", 
+        QKeySequence (prefix + Qt::Key_F11));
+  init (tr ("Step Out"), "main_debug:step_out", 
+        QKeySequence (prefix + Qt::ShiftModifier + Qt::Key_F11));
+  init (tr ("Continue"), "main_debug:continue", 
+        QKeySequence (prefix + Qt::Key_F5));
+  init (tr ("Quit Debug Mode"), "main_debug:quit", 
+        QKeySequence (prefix + Qt::ShiftModifier + Qt::Key_F5));
 
   // window
-  QKeySequence ctrl = Qt::ControlModifier;
-  QKeySequence ctrl_shift = Qt::ControlModifier + Qt::ShiftModifier;
-  init (tr ("Show Command Window"), "main_window:show_command", ctrl_shift + Qt::Key_0);
-  init (tr ("Show Command History"), "main_window:show_history", ctrl_shift + Qt::Key_1);
-  init (tr ("Show File Browser"), "main_window:show_file_browser", ctrl_shift + Qt::Key_2);
-  init (tr ("Show Workspace"), "main_window:show_workspace", ctrl_shift + Qt::Key_3);
-  init (tr ("Show Editor"), "main_window:show_editor", ctrl_shift + Qt::Key_4);
-  init (tr ("Show Documentation"), "main_window:show_doc", ctrl_shift + Qt::Key_5);
-  init (tr ("Command Window"), "main_window:command", ctrl + Qt::Key_0);
-  init (tr ("Command History"), "main_window:history", ctrl + Qt::Key_1);
-  init (tr ("File Browser"), "main_window:file_browser", ctrl + Qt::Key_2);
-  init (tr ("Workspace"), "main_window:workspace", ctrl + Qt::Key_3);
-  init (tr ("Editor"), "main_window:editor", ctrl + Qt::Key_4);
-  init (tr ("Documentation"), "main_window:doc", ctrl + Qt::Key_5);
+  init (tr ("Show Command Window"), "main_window:show_command", 
+        prefix + ctrl_shift + Qt::Key_0);
+  init (tr ("Show Command History"), "main_window:show_history", 
+        prefix + ctrl_shift + Qt::Key_1);
+  init (tr ("Show File Browser"), "main_window:show_file_browser", 
+        prefix + ctrl_shift + Qt::Key_2);
+  init (tr ("Show Workspace"), "main_window:show_workspace", 
+        prefix + ctrl_shift + Qt::Key_3);
+  init (tr ("Show Editor"), "main_window:show_editor", 
+        prefix + ctrl_shift + Qt::Key_4);
+  init (tr ("Show Documentation"), "main_window:show_doc", 
+        prefix + ctrl_shift + Qt::Key_5);
+  init (tr ("Command Window"), "main_window:command", 
+        prefix + ctrl + Qt::Key_0);
+  init (tr ("Command History"), "main_window:history", 
+        prefix + ctrl + Qt::Key_1);
+  init (tr ("File Browser"), "main_window:file_browser", 
+        prefix + ctrl + Qt::Key_2);
+  init (tr ("Workspace"), "main_window:workspace", 
+        prefix + ctrl + Qt::Key_3);
+  init (tr ("Editor"), "main_window:editor", 
+        prefix + ctrl + Qt::Key_4);
+  init (tr ("Documentation"), "main_window:doc", 
+        prefix + ctrl + Qt::Key_5);
   init (tr ("Reset Window Layout"), "main_window:reset", QKeySequence ());
 
   // help
   init (tr ("Show Ondisk Documentation"), "main_help:ondisk_doc", QKeySequence ());
   init (tr ("Show Online Documentation"), "main_help:online_doc", QKeySequence ());
   init (tr ("Report a Bug"), "main_help:report_bug", QKeySequence ());
   init (tr ("Octave Packages"), "main_help:packages", QKeySequence ());
   init (tr ("Share Code"), "main_help:agora", QKeySequence ());
@@ -144,102 +182,116 @@ shortcut_manager::do_init_data ()
   // news
   init (tr ("Release Notes"), "main_news:release_notes", QKeySequence ());
   init (tr ("Community News"), "main_news:community_news", QKeySequence ());
 
   // actions of the editor
 
   // file
   init (tr ("Edit Function"), "editor_file:edit_function",
-        QKeySequence (Qt::ControlModifier + Qt::Key_E));
+        QKeySequence (ctrl + Qt::Key_E));
   init (tr ("Save File"), "editor_file:save", QKeySequence::Save);
   init (tr ("Save File As"), "editor_file:save_as", QKeySequence::SaveAs);
   init (tr ("Close"), "editor_file:close", QKeySequence::Close);
   init (tr ("Close All"), "editor_file:close_all", QKeySequence ());
   init (tr ("Close Other"), "editor_file:close_other", QKeySequence ());
   init (tr ("Print"), "editor_file:print", QKeySequence::Print);
 
   // edit
   init (tr ("Undo"), "editor_edit:undo", QKeySequence::Undo);
   init (tr ("Redo"), "editor_edit:redo", QKeySequence::Redo);
   init (tr ("Copy"), "editor_edit:copy", QKeySequence::Copy);
   init (tr ("Cuy"), "editor_edit:cut", QKeySequence::Cut);
   init (tr ("Paste"), "editor_edit:paste", QKeySequence::Paste);
   init (tr ("Select All"), "editor_edit:select_all", QKeySequence::SelectAll);
   init (tr ("Find and Replace"), "editor_edit:find_replace",
         QKeySequence::Find);
-
   init (tr ("Delete to Start of Word"), "editor_edit:delete_start_word", 
         QKeySequence::DeleteStartOfWord);
   init (tr ("Delete to End of Word"), "editor_edit:delete_end_word", 
         QKeySequence::DeleteEndOfWord);
-  init (tr ("Delete to Start of Line"), "editor_edit:delete_start_line",
-        QKeySequence (Qt::ControlModifier + Qt::SHIFT + Qt::Key_Backspace));
-  init (tr ("Delete to End of Line"), "editor_edit:delete_end_line",
-        QKeySequence (Qt::ControlModifier + Qt::SHIFT + Qt::Key_Delete));
-  init (tr ("Delete Line"), "editor_edit:delete_line", 
-        QKeySequence (Qt::ControlModifier + Qt::SHIFT + Qt::Key_L));
-  init (tr ("Copy Line"), "editor_edit:copy_line",
-        QKeySequence (Qt::ControlModifier + Qt::SHIFT + Qt::Key_C));
-  init (tr ("Cut Line"), "editor_edit:cut_line",
-        QKeySequence (Qt::ControlModifier + Qt::SHIFT + Qt::Key_X));
-  init (tr ("Duplicate Selection/Line"), "editor_edit:duplicate_selection", 
-        QKeySequence (Qt::ControlModifier + Qt::Key_D));
-  init (tr ("Transpose Line"), "editor_edit:transpose_line", 
-        QKeySequence (Qt::ControlModifier + Qt::Key_T));
-  init (tr ("Completion List"), "editor_edit:completion_list",
-        QKeySequence (Qt::ControlModifier + Qt::Key_Space));
+  init (tr ("Delete to Start of Line"), "editor_edit:delete_start_line",  
+        QKeySequence (ctrl_shift + Qt::Key_Backspace));
+  init (tr ("Delete to End of Line"), "editor_edit:delete_end_line",  
+        QKeySequence (ctrl_shift + Qt::Key_Delete));
+  init (tr ("Delete Line"), "editor_edit:delete_line",  
+        QKeySequence (ctrl_shift + Qt::Key_L));
+  init (tr ("Copy Line"), "editor_edit:copy_line",  
+        QKeySequence (ctrl_shift + Qt::Key_C));
+  init (tr ("Cut Line"), "editor_edit:cut_line",  
+        QKeySequence (ctrl_shift + Qt::Key_X));
+  init (tr ("Duplicate Selection/Line"), "editor_edit:duplicate_selection",  
+        QKeySequence (ctrl + Qt::Key_D));
+  init (tr ("Transpose Line"), "editor_edit:transpose_line",  
+        QKeySequence (ctrl + Qt::Key_T));
+  init (tr ("Completion List"), "editor_edit:completion_list",  
+        QKeySequence (ctrl + Qt::Key_Space));
 
-  init (tr ("Comment Selection"), "editor_edit:comment_selection",
-        QKeySequence (Qt::ControlModifier + Qt::Key_R));
-  init (tr ("Uncomment Selection"), "editor_edit:uncomment_selection", 
-        QKeySequence (Qt::SHIFT + Qt::ControlModifier + Qt::Key_R));
-  init (tr ("Uppercase Selection"), "editor_edit:upper_case",
-        QKeySequence (Qt::ControlModifier + Qt::Key_U));
-  init (tr ("Lowercase Selection"), "editor_edit:lower_case",
-        QKeySequence (Qt::ControlModifier + Qt::AltModifier + Qt::Key_U));
-  init (tr ("Indent Selection"), "editor_edit:indent_selection", 
-        QKeySequence (Qt::ControlModifier + Qt::Key_Tab));
-  init (tr ("Unindent Selection"), "editor_edit:unindent_selection",
-        QKeySequence (Qt::SHIFT + Qt::ControlModifier + Qt::Key_Tab));
+  init (tr ("Comment Selection"), "editor_edit:comment_selection",  
+        QKeySequence (ctrl + Qt::Key_R));
+  init (tr ("Uncomment Selection"), "editor_edit:uncomment_selection",  
+        QKeySequence (ctrl_shift + Qt::Key_R));
+  init (tr ("Uppercase Selection"), "editor_edit:upper_case",  
+        QKeySequence (ctrl + Qt::Key_U));
+  init (tr ("Lowercase Selection"), "editor_edit:lower_case",  
+        QKeySequence (ctrl_alt + Qt::Key_U));
 
-  init (tr ("Goto Line"), "editor_edit:goto_line",
-        QKeySequence (Qt::ControlModifier+ Qt::Key_G));
+#if defined (Q_OS_MAC)
+  init (tr ("Indent Selection"), "editor_edit:indent_selection",  
+        QKeySequence (prefix + Qt::Key_Tab));
+  init (tr ("Unindent Selection"), "editor_edit:unindent_selection",  
+        QKeySequence (prefix + Qt::ShiftModifier + Qt::Key_Tab));
+#else
+  init (tr ("Indent Selection"), "editor_edit:indent_selection",  
+        QKeySequence (ctrl + Qt::Key_Tab));
+  init (tr ("Unindent Selection"), "editor_edit:unindent_selection",  
+        QKeySequence (ctrl_shift + Qt::Key_Tab));
+#endif
+
+  init (tr ("Goto Line"), "editor_edit:goto_line",  
+        QKeySequence (ctrl + Qt::Key_G));
   init (tr ("Toggle Bookmark"), "editor_edit:toggle_bookmark",
-        QKeySequence (Qt::Key_F7));
+        QKeySequence (prefix + Qt::Key_F7));
   init (tr ("Next Bookmark"), "editor_edit:next_bookmark",
-        QKeySequence (Qt::Key_F2));
+        QKeySequence (prefix + Qt::Key_F2));
   init (tr ("Previous Bookmark"), "editor_edit:previous_bookmark",
-        QKeySequence (Qt::SHIFT + Qt::Key_F2));
+        QKeySequence (prefix + Qt::SHIFT + Qt::Key_F2));
   init (tr ("Remove All Bookmark"), "editor_edit:remove_bookmark",
         QKeySequence ());
 
   init (tr ("Preferences"), "editor_edit:preferences", QKeySequence ());
   init (tr ("Styles Preferences"), "editor_edit:styles_preferences",
         QKeySequence ());
 
   // view
   init (tr ("Zoom In"), "editor_view:zoom_in", QKeySequence::ZoomIn);
   init (tr ("Zoom Out"), "editor_view:zoom_out", QKeySequence::ZoomOut);
+#if defined (Q_OS_MAC)
   init (tr ("Zoom Normal"), "editor_view:zoom_normal",
-        QKeySequence (Qt::ControlModifier + Qt::Key_Slash));
+        QKeySequence (ctrl + Qt::Key_Underscore));
+#else
+  init (tr ("Zoom Normal"), "editor_view:zoom_normal",
+        QKeySequence (ctrl_alt + Qt::Key_0));
+#endif
 
   // debug
   init (tr ("Toggle Breakpoint"), "editor_debug:toggle_breakpoint",
         QKeySequence ());
   init (tr ("Next Breakpoint"), "editor_debug:next_breakpoint",
         QKeySequence ());
   init (tr ("Previous Breakpoint"), "editor_debug:previous_breakpoint",
         QKeySequence ());
   init (tr ("Remove All Breakpoints"), "editor_debug:remove_breakpoints",
         QKeySequence ());
 
   // run
-  init (tr ("Run File"), "editor_run:run_file", QKeySequence (Qt::Key_F5));
-  init (tr ("Run Selection"), "editor_run:run_selection", QKeySequence (Qt::Key_F9));
+  init (tr ("Run File"), "editor_run:run_file", 
+        QKeySequence (prefix + Qt::Key_F5) );
+  init (tr ("Run Selection"), "editor_run:run_selection", 
+        QKeySequence (prefix + Qt::Key_F9) );
 
   // help
   init (tr ("Help on Keyword"), "editor_help:help_keyword", QKeySequence::HelpContents);
   init (tr ("Document on Keyword"), "editor_help:doc_keyword", QKeySequence (Qt::SHIFT + Qt::Key_F1));
 }
 
 void
 shortcut_manager::init (QString description, QString key, QKeySequence def_sc)
