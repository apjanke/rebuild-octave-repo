# HG changeset patch
# User Rik <rik@octave.org>
# Date 1465763516 25200
#      Sun Jun 12 13:31:56 2016 -0700
# Node ID dc0347131364979149b4153978c218b96e069608
# Parent  ef25c202bacc5bb0f67a1a57567f360bbb308769
maint: More code cleanup for debug.cc and C++11.

* debug.cc: Use is_empty in preference to "numel () == 0".  Use 'auto'
to simplify declarations.

diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -484,17 +484,17 @@ bp_table::dbstop_process_map_args (const
   // why so many levels of indirection needed?
   bool fail = false;
   Cell U = mv.contents ("errs");
   if (U.numel () != 1)
     fail = (U.numel () > 1);
   else
     {
       Array<octave_value> W = U.index (static_cast<octave_idx_type> (0));
-      if (W.numel () == 0 || W(0).length () == 0)
+      if (W.is_empty () || W(0).is_empty () == 0)
         Vdebug_on_error = 1;    // like "dbstop if error" with no identifier
       else if (! W(0).is_cell ())
         fail = true;
       else
         {
           Cell V = W(0).cell_value ();
           for (int i = 0; i < V.numel (); i++)
             {
@@ -510,17 +510,17 @@ bp_table::dbstop_process_map_args (const
   // why so many levels of indirection needed?
   fail = false;
   U = mv.contents ("caught");
   if (U.numel () != 1)
     fail = (U.numel () > 1);
   else
     {
       Array<octave_value> W = U.index (static_cast<octave_idx_type> (0));
-      if (W.numel () == 0 || W(0).length () == 0)
+      if (W.is_empty () || W(0).is_empty ())
         Vdebug_on_caught = 1;    // like "dbstop if caught error" with no ID
       else if (! W(0).is_cell ())
         fail = true;
       else
         {
           Cell V = W(0).cell_value ();
           for (int i = 0; i < V.numel (); i++)
             {
@@ -536,17 +536,17 @@ bp_table::dbstop_process_map_args (const
   // why so many levels of indirection needed?
   fail = false;
   U = mv.contents ("warn");
   if (U.numel () != 1)
     fail = (U.numel () > 1);
   else
     {
       Array<octave_value> W = U.index (static_cast<octave_idx_type> (0));
-      if (W.numel () == 0 || W(0).length () == 0)
+      if (W.is_empty () || W(0).is_empty ())
         Vdebug_on_warning = 1;    // like "dbstop if warning" with no identifier
       else if (! W(0).is_cell ())
         fail = true;
       else
         {
           Cell V = W(0).cell_value ();
           for (int i = 0; i < V.numel (); i++)
             {
@@ -784,17 +784,17 @@ bp_table::do_remove_breakpoint_1 (octave
                   if (! file.empty ())
                     octave_link::update_breakpoint (false, file, lineno);
                 }
             }
 
           results = cmds->list_breakpoints ();
 
           bp_set_iterator it = bp_set.find (fname);
-          if (results.length () == 0 && it != bp_set.end ())
+          if (results.empty () && it != bp_set.end ())
             bp_set.erase (it);
         }
 
       retval = results.length ();
     }
 
   return retval;
 }
@@ -827,18 +827,17 @@ bp_table::do_remove_breakpoint (const st
       const std::list<std::string> subfcn_names
         = dbg_fcn->subfunction_names ();
 
       std::map<std::string, octave_value> subfcns
         = dbg_fcn->subfunctions ();
 
       for (const auto& subf_nm : subfcn_names)
         {
-          std::map<std::string, octave_value>::const_iterator
-            q = subfcns.find (subf_nm);
+          const auto q = subfcns.find (subf_nm);
 
           if (q != subfcns.end ())
             {
               octave_user_code *dbg_subfcn = q->second.user_code_value ();
 
               retval += do_remove_breakpoint_1 (dbg_subfcn, fname, line);
             }
         }
@@ -919,17 +918,17 @@ bp_table::do_get_breakpoint_list (const 
 {
   fname_bp_map retval;
 
   // make copy since changes may invalidate iters of bp_set.
   std::set<std::string> tmp_bp_set = bp_set;
 
   for (auto& bp_fname : tmp_bp_set)
     {
-      if (fname_list.length () == 0
+      if (fname_list.empty ()
           || do_find_bkpt_list (fname_list, bp_fname) != "")
         {
           octave_user_code *f = get_user_code (bp_fname);
 
           if (f)
             {
               tree_statement_list *cmds = f->body ();
 
@@ -945,18 +944,17 @@ bp_table::do_get_breakpoint_list (const 
 
               // look for breakpoints in subfunctions
               const std::list<std::string> subf_nm = f->subfunction_names ();
 
               std::map<std::string, octave_value> subf = f->subfunctions ();
 
               for (const auto& subfcn_nm : subf_nm)
                 {
-                  std::map<std::string, octave_value>::const_iterator
-                    q = subf.find (subfcn_nm);
+                  const auto q = subf.find (subfcn_nm);
 
                   if (q != subf.end ())
                     {
                       octave_user_code *ff = q->second.user_code_value ();
 
                       cmds = ff->body ();
                       if (cmds)
                         {
@@ -1439,21 +1437,20 @@ The @qcode{\"warn\"} field is set simila
             }
           // If we actually have some, print line numbers only
           if (have_unconditional)
             {
               const char *_s_ = (have_unconditional > 1) ? "s" : "";
               octave_stdout << "breakpoint" << _s_ <<" in " << fnm_bp_p.first
                             << " at line" << _s_ << " ";
 
-              for (std::list<bp_type>::const_iterator j = m.begin ();
-                   j != m.end (); j++)
+              for (const auto& bp : m)
                 {
-                  if (j->cond == "")
-                    octave_stdout << j->line << " ";
+                  if (bp.cond == "")
+                    octave_stdout << bp.line << " ";
                 }
               octave_stdout << std::endl;
             }
 
           // print conditional breakpoints, one per line, with conditions
           for (const auto& bp : m)
             {
               if (bp.cond != "")
