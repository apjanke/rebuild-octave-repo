# HG changeset patch
# User jwe
# Date 774829847 0
#      Thu Jul 21 22:30:47 1994 +0000
# Node ID 4ecbfd3c3710940947dbce9c1cc5411afe5ce76d
# Parent  83b0e891100c45c89dce123710a23cb89199b362
[project @ 1994-07-21 22:30:34 by jwe]

diff --git a/liboctave/CmplxSVD.cc b/liboctave/CmplxSVD.cc
--- a/liboctave/CmplxSVD.cc
+++ b/liboctave/CmplxSVD.cc
@@ -37,48 +37,59 @@ extern "C"
 {
   int F77_FCN (zgesvd) (const char*, const char*, const int*,
 			const int*, Complex*, const int*, double*,
 			Complex*, const int*, Complex*, const int*,
 			Complex*, const int*, double*, int*, long, long);
 }
 
 int
-ComplexSVD::init (const ComplexMatrix& a)
+ComplexSVD::init (const ComplexMatrix& a, SVD::type svd_type)
 {
   int info;
 
   int m = a.rows ();
   int n = a.cols ();
 
-  char jobu = 'A';
-  char jobv = 'A';
-
   Complex *tmp_data = dup (a.data (), a.length ());
 
   int min_mn = m < n ? m : n;
   int max_mn = m > n ? m : n;
 
-  Complex *u = new Complex[m*m];
+  char jobu = 'A';
+  char jobv = 'A';
+
+  int ncol_u = m;
+  int nrow_vt = n;
+  int nrow_s = m;
+  int ncol_s = n;
+
+  if (svd_type == SVD::economy)
+    {
+      jobu = jobv = 'S';
+      ncol_u = nrow_vt = nrow_s = ncol_s = min_mn;
+    }
+
+  Complex *u = new Complex[m * ncol_u];
   double *s_vec  = new double[min_mn];
-  Complex *vt = new Complex[n*n];
+  Complex *vt = new Complex[nrow_vt * n];
 
   int lwork = 2*min_mn + max_mn;
   Complex *work = new Complex[lwork];
 
   int lrwork = 5*max_mn;
   double *rwork = new double[lrwork];
 
   F77_FCN (zgesvd) (&jobu, &jobv, &m, &n, tmp_data, &m, s_vec, u, &m,
-		    vt, &n, work, &lwork, rwork, &info, 1L, 1L);
+		    vt, &nrow_vt, work, &lwork, rwork, &info, 1L, 1L);
 
-  left_sm = ComplexMatrix (u, m, m);
-  sigma = DiagMatrix (s_vec, m, n);
-  ComplexMatrix vt_m (vt, n, n);
-  right_sm = ComplexMatrix (vt_m.hermitian ());
+  left_sm = ComplexMatrix (u, m, ncol_u);
+  sigma = DiagMatrix (s_vec, nrow_s, ncol_s);
+  ComplexMatrix vt_m (vt, nrow_vt, n);
+  right_sm = vt_m.hermitian ();
 
   delete [] tmp_data;
   delete [] work;
 
   return info;
 }
 
 /*
diff --git a/liboctave/CmplxSVD.h b/liboctave/CmplxSVD.h
--- a/liboctave/CmplxSVD.h
+++ b/liboctave/CmplxSVD.h
@@ -27,57 +27,60 @@ Software Foundation, 675 Mass Ave, Cambr
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 class ostream;
 
 #include "dDiagMatrix.h"
 #include "CMatrix.h"
+#include "dbleSVD.h"
 
 extern "C++" {
 
 class ComplexSVD
 {
 friend class ComplexMatrix;
 
 public:
 
   ComplexSVD (void) {}
 
-  ComplexSVD (const ComplexMatrix& a);
-  ComplexSVD (const ComplexMatrix& a, int& info);
+  ComplexSVD (const ComplexMatrix& a, SVD::type svd_type = SVD::std);
+  ComplexSVD (const ComplexMatrix& a, int& info,
+	      SVD::type svd_type = SVD::std); 
 
   ComplexSVD (const ComplexSVD& a);
 
   ComplexSVD& operator = (const ComplexSVD& a);
 
   DiagMatrix singular_values (void) const;
   ComplexMatrix left_singular_matrix (void) const;
   ComplexMatrix right_singular_matrix (void) const;
 
   friend ostream&  operator << (ostream& os, const ComplexSVD& a);
 
 private:
 
-  int init (const ComplexMatrix& a);
+  int init (const ComplexMatrix& a, SVD::type svd_type = SVD::std);
 
   DiagMatrix sigma;
   ComplexMatrix left_sm;
   ComplexMatrix right_sm;
 };
 
-inline ComplexSVD::ComplexSVD (const ComplexMatrix& a)
+inline ComplexSVD::ComplexSVD (const ComplexMatrix& a, SVD::type svd_type) 
 {
-  init (a);
+  init (a, svd_type);
 }
 
-inline ComplexSVD::ComplexSVD (const ComplexMatrix& a, int& info)
+inline ComplexSVD::ComplexSVD (const ComplexMatrix& a, int& info,
+			       SVD::type svd_type)
 {
-  info = init (a);
+  info = init (a, svd_type);
 } 
 
 inline ComplexSVD::ComplexSVD (const ComplexSVD& a)
 {
   sigma = a.sigma;
   left_sm = a.left_sm;
   right_sm = a.right_sm;
 }
diff --git a/liboctave/dbleSVD.cc b/liboctave/dbleSVD.cc
--- a/liboctave/dbleSVD.cc
+++ b/liboctave/dbleSVD.cc
@@ -37,47 +37,58 @@ extern "C"
 {
   int F77_FCN (dgesvd) (const char*, const char*, const int*,
 			const int*, double*, const int*, double*,
 			double*, const int*, double*, const int*,
 			double*, const int*, int*, long, long);
 }
 
 int
-SVD::init (const Matrix& a)
+SVD::init (const Matrix& a, SVD::type svd_type)
 {
   int info;
 
   int m = a.rows ();
   int n = a.cols ();
 
-  char jobu = 'A';
-  char jobv = 'A';
-
   double *tmp_data = dup (a.data (), a.length ());
 
   int min_mn = m < n ? m : n;
   int max_mn = m > n ? m : n;
 
-  double *u = new double[m*m];
+  char jobu = 'A';
+  char jobv = 'A';
+
+  int ncol_u = m;
+  int nrow_vt = n;
+  int nrow_s = m;
+  int ncol_s = n;
+
+  if (svd_type == SVD::economy)
+    {
+      jobu = jobv = 'S';
+      ncol_u = nrow_vt = nrow_s = ncol_s = min_mn;
+    }
+
+  double *u = new double[m * ncol_u];
   double *s_vec  = new double[min_mn];
-  double *vt = new double[n*n];
+  double *vt = new double[nrow_vt * n];
 
   int tmp1 = 3*min_mn + max_mn;
   int tmp2 = 5*min_mn - 4;
   int lwork = tmp1 > tmp2 ? tmp1 : tmp2;
   double *work = new double[lwork];
 
   F77_FCN (dgesvd) (&jobu, &jobv, &m, &n, tmp_data, &m, s_vec, u, &m,
-		    vt, &n, work, &lwork, &info, 1L, 1L);
+		    vt, &nrow_vt, work, &lwork, &info, 1L, 1L);
 
-  left_sm = Matrix (u, m, m);
-  sigma = DiagMatrix (s_vec, m, n);
-  Matrix vt_m (vt, n, n);
-  right_sm = Matrix (vt_m.transpose ());
+  left_sm = Matrix (u, m, ncol_u);
+  sigma = DiagMatrix (s_vec, nrow_s, ncol_s);
+  Matrix vt_m (vt, nrow_vt, n);
+  right_sm = vt_m.transpose ();
 
   delete [] tmp_data;
   delete [] work;
 
   return info;
 }
 
 ostream&
diff --git a/liboctave/dbleSVD.h b/liboctave/dbleSVD.h
--- a/liboctave/dbleSVD.h
+++ b/liboctave/dbleSVD.h
@@ -36,48 +36,54 @@ class ostream;
 extern "C++" {
 
 class SVD
 {
 friend class Matrix;
 
 public:
 
+  enum type
+    {
+      std,
+      economy,
+    };
+
   SVD (void) {}
 
-  SVD (const Matrix& a);
-  SVD (const Matrix& a, int& info);
+  SVD (const Matrix& a, SVD::type svd_type = SVD::std);
+  SVD (const Matrix& a, int& info, SVD::type svd_type = SVD::std);
 
   SVD (const SVD& a);
 
   SVD& operator = (const SVD& a);
 
   DiagMatrix singular_values (void) const;
   Matrix left_singular_matrix (void) const;
   Matrix right_singular_matrix (void) const;
 
   friend ostream&  operator << (ostream& os, const SVD& a);
 
 private:
 
-  int init (const Matrix& a);
+  int init (const Matrix& a, SVD::type svd_type = SVD::std);
 
   DiagMatrix sigma;
   Matrix left_sm;
   Matrix right_sm;
 };
 
-inline SVD::SVD (const Matrix& a)
+inline SVD::SVD (const Matrix& a, SVD::type svd_type)
 {
-  init (a);
+  init (a, svd_type);
 }
 
-inline SVD::SVD (const Matrix& a, int& info)
+inline SVD::SVD (const Matrix& a, int& info, SVD::type svd_type)
 {
-  info = init (a);
+  info = init (a, svd_type);
 }
 
 inline SVD::SVD (const SVD& a)
 {
   sigma = a.sigma;
   left_sm = a.left_sm;
   right_sm = a.right_sm;
 }
