# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1351888342 21600
#      Fri Nov 02 14:32:22 2012 -0600
# Node ID 52df2e7baabe46d2a365eb629b06501f0148112d
# Parent  5649e84ea3ce3c667154d69a390004fd1057d52d
Disable JIT when breakpoints are present


* pt-jit.cc (Venable_jit_debug, Venable_jit_compiler): Mark as static.
(tree_jit::do_execute): Check tree_jit::enabled.
(tree_jit::enabled): New function.

* pt-jit.h (Venable_jit_debug, Venable_jit_compiler): Remove declaration.
(tree_jit::enabled): New function.

* ov-usr-fcn.cc (octave_user_function::do_multi_index_op): Do not check
Venable_jit_compiler.

* pt-eval.cc (tree_evaluator::visit_while_command,
tree_evaluator::visit_simple_for_command): Do not check Venable_jit_compiler.

diff --git a/libinterp/interp-core/pt-jit.cc b/libinterp/interp-core/pt-jit.cc
--- a/libinterp/interp-core/pt-jit.cc
+++ b/libinterp/interp-core/pt-jit.cc
@@ -22,26 +22,27 @@ along with Octave; see the file COPYING.
 
 #define __STDC_LIMIT_MACROS
 #define __STDC_CONSTANT_MACROS
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "debug.h"
 #include "defun.h"
 #include "ov.h"
 #include "pt-all.h"
 #include "pt-jit.h"
 #include "symtab.h"
 #include "variables.h"
 
-bool Venable_jit_debugging = false;
+static bool Venable_jit_debugging = false;
 
-bool Venable_jit_compiler = true;
+static bool Venable_jit_compiler = true;
 
 #ifdef HAVE_LLVM
 
 #include <llvm/Analysis/CallGraph.h>
 #include <llvm/Analysis/Passes.h>
 #include <llvm/Analysis/Verifier.h>
 #include <llvm/Bitcode/ReaderWriter.h>
 #include <llvm/LLVMContext.h>
@@ -1788,17 +1789,17 @@ tree_jit::initialize (void)
 }
 
 bool
 tree_jit::do_execute (tree_simple_for_command& cmd, const octave_value& bounds)
 {
   const size_t MIN_TRIP_COUNT = 1000;
 
   size_t tc = trip_count (bounds);
-  if (! tc || ! initialize ())
+  if (! tc || ! initialize () || ! enabled ())
     return false;
 
   jit_info::vmap extra_vars;
   extra_vars["#for_bounds0"] = &bounds;
 
   jit_info *info = cmd.get_info ();
   if (! info || ! info->match (extra_vars))
     {
@@ -1811,17 +1812,17 @@ tree_jit::do_execute (tree_simple_for_co
     }
 
   return info->execute (extra_vars);
 }
 
 bool
 tree_jit::do_execute (tree_while_command& cmd)
 {
-  if (! initialize ())
+  if (! initialize () || ! enabled ())
     return false;
 
   jit_info *info = cmd.get_info ();
   if (! info || ! info->match ())
     {
       delete info;
       info = new jit_info (*this, cmd);
       cmd.stash_info (info);
@@ -1829,30 +1830,39 @@ tree_jit::do_execute (tree_while_command
 
   return info->execute ();
 }
 
 bool
 tree_jit::do_execute (octave_user_function& fcn, const octave_value_list& args,
                       octave_value_list& retval)
 {
-  if (! initialize ())
+  if (! initialize () || ! enabled ())
     return false;
 
   jit_function_info *info = fcn.get_info ();
     if (! info || ! info->match (args))
       {
         delete info;
         info = new jit_function_info (*this, fcn, args);
         fcn.stash_info (info);
       }
 
     return info->execute (args, retval);
 }
 
+bool
+tree_jit::enabled (void)
+{
+  // Ideally, we should only disable JIT if there is a breakpoint in the code we
+  // are about to run. However, we can't figure this out in O(1) time, so we
+  // conservatively check for the existence of any breakpoints.
+  return Venable_jit_compiler && ! bp_table::have_breakpoints ();
+}
+
 size_t
 tree_jit::trip_count (const octave_value& bounds) const
 {
   if (bounds.is_range ())
     {
       Range rng = bounds.range_value ();
       return rng.nelem ();
     }
diff --git a/libinterp/interp-core/pt-jit.h b/libinterp/interp-core/pt-jit.h
--- a/libinterp/interp-core/pt-jit.h
+++ b/libinterp/interp-core/pt-jit.h
@@ -374,16 +374,18 @@ public:
 
   bool do_execute (tree_simple_for_command& cmd, const octave_value& bounds);
 
   bool do_execute (tree_while_command& cmd);
 
   bool do_execute (octave_user_function& fcn, const octave_value_list& args,
                    octave_value_list& retval);
 
+  bool enabled (void);
+
   size_t trip_count (const octave_value& bounds) const;
 
   llvm::Module *module;
   llvm::PassManager *module_pass_manager;
   llvm::FunctionPassManager *pass_manager;
   llvm::ExecutionEngine *engine;
 };
 
@@ -434,16 +436,9 @@ private:
   jited_function function;
   llvm::Function *llvm_function;
 
   std::vector<std::pair<std::string, bool> > arguments;
   type_bound_vector bounds;
 };
 
 #endif
-
-// If TRUE, enable JIT compiler debugging/tracing.
-extern bool Venable_jit_debugging;
-
-// If TRUE, enable JIT compiler.
-extern bool Venable_jit_compiler;
-
 #endif
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -377,17 +377,17 @@ octave_user_function::do_multi_index_op 
 
   if (error_state)
     return retval;
 
   if (! cmd_list)
     return retval;
 
 #ifdef HAVE_LLVM
-  if (Venable_jit_compiler && is_special_expr ()
+  if (is_special_expr ()
       && tree_jit::execute (*this, args, retval))
     return retval;
 #endif
 
   int nargin = args.length ();
 
   unwind_protect frame;
 
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -302,17 +302,17 @@ tree_evaluator::visit_simple_for_command
 
   in_loop_command = true;
 
   tree_expression *expr = cmd.control_expr ();
 
   octave_value rhs = expr->rvalue1 ();
 
 #if HAVE_LLVM
-  if (Venable_jit_compiler && tree_jit::execute (cmd, rhs))
+  if (tree_jit::execute (cmd, rhs))
     return;
 #endif
 
   if (error_state || rhs.is_undefined ())
     return;
 
   {
     tree_expression *lhs = cmd.left_hand_side ();
@@ -1039,17 +1039,17 @@ tree_evaluator::visit_unwind_protect_com
 
 void
 tree_evaluator::visit_while_command (tree_while_command& cmd)
 {
   if (error_state)
     return;
 
 #if HAVE_LLVM
-  if (Venable_jit_compiler && tree_jit::execute (cmd))
+  if (tree_jit::execute (cmd))
     return;
 #endif
 
   unwind_protect frame;
 
   frame.protect_var (in_loop_command);
 
   in_loop_command = true;
