# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1516605466 18000
#      Mon Jan 22 02:17:46 2018 -0500
# Node ID ab2321d4ba03671aff259e89751899c5af6b3466
# Parent  428780eec08a5df4d291c576c660d786d5d9a6b9
maint: strip trailing whitespace from source files

* genpropdoc.m, Canvas.cc, data.cc, dlmread.cc, gl-render.cc,
oct-stream.cc, ov-flt-cx-mat.cc, toascii.m, isequal.m, isequaln.m,
setappdata.m, grid.m, legend.m, colorbar.m, findobj.m, bounds.m,
corrcoef.m, erase.m, isstring.m, mkoctfile.in.cc:
Strip trailing whitespace.

diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -139,17 +139,17 @@ text rendering.";
         s.doc = "Define how Octave handles the execution of this object's \
 callback properties when it is unable to interrupt another object's \
 executing callback.  This is only relevant when the currently executing \
 callback object has its @code{interruptible} property set to \
 \@qcode{\"off\"}.  The __prop__ property of the interrupting callback object \
 indicates whether the interrupting callback is queued (@qcode{\"queue\"} \
 (default)) or discarded (@qcode{\"cancel\"}).\n\
 @xref{Callbacks, , @w{Callbacks section}}.";
-        
+
       case "buttondownfcn"
         s.doc = "__fcnmsg__";
         s.valid = valid_fcn;
 
       case "children"
         s.doc = "Graphics handles of the __objname__'s children.";
         s.valid = "vector of graphics handles";
 
@@ -183,32 +183,32 @@ can accept mouse clicks which is determi
 property.  @xref{XREF__objname__pickableparts, , @w{pickableparts property}}.";
 
       case "interruptible"
         s.doc = "Specify whether this object's callback functions may be \
 interrupted by other callbacks.  By default __prop__ is @qcode{\"on\"} \
 and callbacks that make use of @code{drawnow}, @code{figure}, @code{waitfor}, \
 @code{getframe} or @code{pause} functions are eventually interrupted.\n\
 @xref{Callbacks, , @w{Callbacks section}}.";
-        
+
       case "parent"
         s.doc = "Handle of the parent graphics object.";
         s.valid = valid_handle;
 
       case "pickableparts"
         s.doc = "Specify whether __objname__ will accept mouse clicks.  \
 By default, __prop__ is @qcode{\"visible\"} and only visible parts of the \
 __objname__ or its children may react to mouse clicks.  When __prop__ is \
 @qcode{\"all\"} both visible and invisible parts (or children) may react to \
 mouse clicks.  When __prop__ is @qcode{\"none\"} mouse clicks on the object \
 are ignored and transmitted to any objects underneath this one.  When an \
 object is configured to accept mouse clicks the @qcode{\"hittest\"} property \
 will determine how they are processed.  \
 @xref{XREF__objname__hittest, , @w{hittest property}}.";
-        
+
       case "selected"
       case "selectionhighlight"
       case "tag"
         s.doc = "A user-defined string to label the graphics object.";
         s.valid = valid_string;
 
       case "type"
         s.doc = "Class name of the graphics object.  __prop__ is \
@@ -241,17 +241,17 @@ not rendered on screen.";
         s.doc = doc_unused;
 
       case "parent"
         s.doc = "Root figure has no parent graphics object.  __prop__ \
 is always empty.";
 
       case "hittest"
         s.doc = doc_unused;
-        
+
       case "pickableparts"
         s.doc = doc_unused;
 
       ## Specific properties
       case "callbackobject"
         s.doc = "Graphics handle of the current object whose callback is executing.";
         s.valid = valid_handle;
 
diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -622,17 +622,17 @@ namespace QtHandles
           {
             graphics_object root = gh_manager::get_object (0);
             Utils::properties<root_figure> (root)
               .set_currentfigure (figObj.get_handle ().as_octave_value ());
           }
 
         graphics_object currentObj, axesObj;
 
-        // Retrieve selected object.   
+        // Retrieve selected object.
         select_object (obj, event, currentObj, axesObj);
 
         // currentObj may be invalid if, e.g., all objects under the mouse
         // click had "hittest" -> "off" or "pickableparts" -> "none".  In that
         // case, replace with underlying figObj which always accepts mouse
         // clicks.
         if (! currentObj.valid_object ())
           currentObj = figObj;
@@ -654,24 +654,24 @@ namespace QtHandles
           newMouseMode = fig->mouseMode ();
 
         switch (newMouseMode)
           {
           case NoMode:
             {
               // Update the figure "currentobject"
               auto& fprop = Utils::properties<figure> (figObj);
-            
+
               if (currentObj.get_properties ().handlevisibility_is ("on"))
                 fprop.set_currentobject (currentObj.get_handle ()
                                          .as_octave_value ());
               else
                 fprop.set_currentobject (Matrix ());
-            
-              // Update figure "selectiontype" and "currentpoint" 
+
+              // Update figure "selectiontype" and "currentpoint"
               gh_manager::post_set (
                                     figObj.get_handle (), "selectiontype",
                                     Utils::figureSelectionType (event, isdblclick), false);
 
               updateCurrentPoint (figObj, obj, event);
 
               gh_manager::post_callback (figObj.get_handle (),
                                          "windowbuttondownfcn",
@@ -982,20 +982,20 @@ namespace QtHandles
                 break;
 
               case PanMode:
                 {
                   axes::properties& ap = Utils::properties<axes> (axesObj);
 
                   double factor = (event->delta () > 0 ? 0.1 : -0.1);
 
-                  if (event->modifiers () == Qt::NoModifier 
+                  if (event->modifiers () == Qt::NoModifier
                       && mode != "horizontal")
                     ap.pan ("vertical", factor);
-                  else if (event->modifiers () == Qt::ShiftModifier 
+                  else if (event->modifiers () == Qt::ShiftModifier
                       && mode != "vertical")
                     ap.pan ("horizontal", factor);
                 }
                 break;
 
               default:
                 redrawFigure = false;
                 break;
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -5179,17 +5179,17 @@ only a single value (@var{n} = 1) is req
 %!assert (linspace (10, 20, 2), [10 20])
 %!assert (linspace (10, 20, 1), [20])
 %!assert (linspace (10, 20, 0), zeros (1, 0))
 %!assert (linspace (10, 20, -1), zeros (1, 0))
 %!assert (numel (linspace (0, 1, 2+eps)), 2)
 %!assert (numel (linspace (0, 1, 2-eps)), 1)
 %!assert (linspace (10, 20, 2.1), [10 20])
 %!assert (linspace (10, 20, 2.9), [10 20])
-%!assert (1 ./ linspace (-0, 0, 4), [-Inf, Inf, Inf, Inf]) 
+%!assert (1 ./ linspace (-0, 0, 4), [-Inf, Inf, Inf, Inf])
 
 %!error linspace ()
 %!error linspace (1, 2, 3, 4)
 %!error <N must be a scalar> linspace (1, 2, [3, 4])
 %!error <START, END must be scalars or vectors> linspace (ones (2,2), 2, 3)
 %!error <START, END must be scalars or vectors> linspace (2, ones (2,2), 3)
 %!error <START, END must be scalars or vectors> linspace (1, [], 3)
 */
diff --git a/libinterp/corefcn/dlmread.cc b/libinterp/corefcn/dlmread.cc
--- a/libinterp/corefcn/dlmread.cc
+++ b/libinterp/corefcn/dlmread.cc
@@ -528,17 +528,17 @@ such as text, are also replaced by the @
 %!   assert (dlmread (file, ",", "B1.."), [2, 3; 5, 6; 8, 9; 11, 12]);
 %!   assert (dlmread (file, ",", 10, 0), []);
 %!   assert (dlmread (file, ",", 0, 10), []);
 %!   fail ('dlmread (file, ",", [0 1])', "error parsing RANGE");
 %! unwind_protect_cleanup
 %!   unlink (file);
 %! end_unwind_protect
 
-%!testif ; ! ismac () 
+%!testif ; ! ismac ()
 %! file = tempname ();
 %! unwind_protect
 %!   fid = fopen (file, "wt");
 %!   fwrite (fid, "1, 2, 3\n4+4i, 5, 6\n7, 8, 9\n10, 11, 12");
 %!   fclose (fid);
 %!
 %!   assert (dlmread (file), [1, 2, 3; 4 + 4i, 5, 6; 7, 8, 9; 10, 11, 12]);
 %!   assert (dlmread (file, ","), [1,2,3; 4 + 4i, 5, 6; 7, 8, 9; 10, 11, 12]);
diff --git a/libinterp/corefcn/gl-render.cc b/libinterp/corefcn/gl-render.cc
--- a/libinterp/corefcn/gl-render.cc
+++ b/libinterp/corefcn/gl-render.cc
@@ -620,17 +620,17 @@ get_maxlights (void)
 
 #endif
 
 namespace octave
 {
   opengl_renderer::opengl_renderer (void)
     : toolkit (), xform (), xmin (), xmax (), ymin (), ymax (),
       zmin (), zmax (), xZ1 (), xZ2 (), marker_id (), filled_marker_id (),
-      camera_pos (), camera_dir (), interpreter ("none"), txt_renderer (), 
+      camera_pos (), camera_dir (), interpreter ("none"), txt_renderer (),
       selecting (false)
   {
     // This constructor will fail if we don't have OpenGL or if the data
     // types we assumed in our public interface aren't compatible with the
     // OpenGL types.
 
 #if defined (HAVE_OPENGL)
 
@@ -1386,17 +1386,17 @@ namespace octave
   void
   opengl_renderer::draw_axes_x_grid (const axes::properties& props)
   {
 #if defined (HAVE_OPENGL)
 
     int xstate = props.get_xstate ();
 
     if (xstate != AXE_DEPTH_DIR
-        && (props.is_visible () 
+        && (props.is_visible ()
             || (selecting && props.pickableparts_is ("all"))))
       {
         int zstate = props.get_zstate ();
         bool x2Dtop = props.get_x2Dtop ();
         bool layer2Dtop = props.get_layer2Dtop ();
         bool xyzSym = props.get_xyzSym ();
         bool nearhoriz = props.get_nearhoriz ();
         double xticklen = props.get_xticklen ();
@@ -1569,17 +1569,17 @@ namespace octave
   void
   opengl_renderer::draw_axes_y_grid (const axes::properties& props)
   {
 #if defined (HAVE_OPENGL)
 
     int ystate = props.get_ystate ();
 
     if (ystate != AXE_DEPTH_DIR && props.is_visible ()
-        && (props.is_visible () 
+        && (props.is_visible ()
             || (selecting && props.pickableparts_is ("all"))))
       {
         int zstate = props.get_zstate ();
         bool y2Dright = props.get_y2Dright ();
         bool layer2Dtop = props.get_layer2Dtop ();
         bool xyzSym = props.get_xyzSym ();
         bool nearhoriz = props.get_nearhoriz ();
         double yticklen = props.get_yticklen ();
@@ -1751,17 +1751,17 @@ namespace octave
   }
 
   void
   opengl_renderer::draw_axes_z_grid (const axes::properties& props)
   {
     int zstate = props.get_zstate ();
 
     if (zstate != AXE_DEPTH_DIR && props.is_visible ()
-        && (props.is_visible () 
+        && (props.is_visible ()
             || (selecting && props.pickableparts_is ("all"))))
       {
         bool xySym = props.get_xySym ();
         bool zSign = props.get_zSign ();
         double zticklen = props.get_zticklen ();
         double ztickoffset = props.get_ztickoffset ();
         double fx = props.get_fx ();
         double fy = props.get_fy ();
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -3728,17 +3728,17 @@ namespace octave
                                        whitespace.end (),
                                        delims[j]),
                           whitespace.end ());
       }
     for (int j = 0; j < delim_list.numel (); j++)
       {
         std::string delim = delim_list(j).string_value ();
         if (delim.length () == 1)
-          whitespace.erase (std::remove (whitespace.begin (), 
+          whitespace.erase (std::remove (whitespace.begin (),
                                          whitespace.end (),
                                          delim[0]),
                             whitespace.end ());
       }
 
     whitespace_table = std::string (256, '\0');
     for (unsigned int i = 0; i < whitespace.length (); i++)
       whitespace_table[whitespace[i]] = '1';
diff --git a/libinterp/octave-value/ov-flt-cx-mat.cc b/libinterp/octave-value/ov-flt-cx-mat.cc
--- a/libinterp/octave-value/ov-flt-cx-mat.cc
+++ b/libinterp/octave-value/ov-flt-cx-mat.cc
@@ -705,17 +705,17 @@ octave_float_complex_matrix::map (unary_
       return ::imag (matrix);
     case umap_conj:
       return ::conj (matrix);
 
     // Special cases for Matlab compatibility.
     case umap_xtolower:
     case umap_xtoupper:
       return matrix;
-               
+
 #define ARRAY_METHOD_MAPPER(UMAP, FCN)        \
     case umap_ ## UMAP:                       \
       return octave_value (matrix.FCN ())
 
     ARRAY_METHOD_MAPPER (abs, abs);
     ARRAY_METHOD_MAPPER (isnan, isnan);
     ARRAY_METHOD_MAPPER (isinf, isinf);
     ARRAY_METHOD_MAPPER (isfinite, isfinite);
diff --git a/scripts/deprecated/toascii.m b/scripts/deprecated/toascii.m
--- a/scripts/deprecated/toascii.m
+++ b/scripts/deprecated/toascii.m
@@ -18,25 +18,25 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {} {} toascii (@var{s})
 ##
 ## @code{toascii} is deprecated and will be removed in Octave version 4.8.
 ## Use @code{double} instead.
 ##
 ## Return ASCII representation of @var{s} in a matrix.
-## 
+##
 ## For example:
-## 
+##
 ## @example
 ## @group
 ## toascii ("ASCII"
 ##      @result{} [ 65, 83, 67, 73, 73 ]
 ## @end group
-## 
+##
 ## @end example
 ## @seealso{double, char}
 ## @end deftypefn
 
 ## Remove in version 4.8.
 
 function retval = toascii (str)
 
diff --git a/scripts/general/isequal.m b/scripts/general/isequal.m
--- a/scripts/general/isequal.m
+++ b/scripts/general/isequal.m
@@ -154,17 +154,17 @@ function t = isequal (x, varargin)
           idx += 1;
         endwhile
 
       elseif (isa (x, "function_handle"))
         ## function type.  Use '==' operator which is overloaded.
         t = (x == y);
 
       else
-        error ("isequal: Impossible to reach code.  File a bug report."); 
+        error ("isequal: Impossible to reach code.  File a bug report.");
 
       endif
 
     else  ## More than two args.  This is going to be slower in general.
 
       if (ischar (x) && all (cellfun ("isclass", varargin, "char")))
         ## char type.  Optimization, strcmp is ~35% faster than '==' operator.
         idx = 1;
@@ -241,17 +241,17 @@ function t = isequal (x, varargin)
 
       elseif (iscellstr (x) && all (cellfun (@iscellstr, varargin)))
         ## cellstr type.  Optimization over cell type by using strcmp.
         ## FIXME: It would be faster to use strcmp on whole cellstr arrays,
         ## but bug #51412 needs to be fixed.  Instead, time/space trade-off.
         ## Convert to char (space) for faster processing with strcmp (time).
         idx = 1;
         x = char (x);
-        while (t && idx <= nvarargin) 
+        while (t && idx <= nvarargin)
           t = strcmp (x, char (varargin{idx}));
           idx += 1;
         endwhile
 
       elseif (iscell (x))
         ## cell type.  Check that each element of a cell is equal.  Slow.
         n = numel (x);
         args = cell (1, 1 + nvarargin);
@@ -265,17 +265,17 @@ function t = isequal (x, varargin)
           idx += 1;
         endwhile
 
       elseif (isa (x, "function_handle"))
         ## function type.  Use '==' operator which is overloaded.
         t = all (cellfun ("eq", {x}, varargin));
 
       else
-        error ("isequal: Impossible to reach code.  File a bug report."); 
+        error ("isequal: Impossible to reach code.  File a bug report.");
 
       endif
 
     endif
   endif
 
   t = full (t);  # Always return full logical value for Matlab compatibility.
 
@@ -370,17 +370,17 @@ endfunction
 %!assert (isequal (struct ("a",1), struct ("a",1), struct ("b",1)), false)
 %!assert (isequal (struct ("a",1,"b",2), struct ("a",1,"b",2)), true)
 %!assert (isequal (struct ("a",1,"b",2), struct ("a",1,"b",2),
 %!                 struct ("a",1,"b",2)), true)
 %!assert (isequal (struct ("a",1,"b",2), struct ("b",2,"a",1)), true)
 %!assert (isequal (struct ("a",1,"b",2), struct ("a",1,"b",2),
 %!                 struct ("b",2,"a",1)), true)
 %!assert (isequal (struct ("a","abc","b",2), struct ("a","abc","b",2)), true)
-%!assert (isequal (struct ("a","abc","b",2), struct ("a","abc","b",2), 
+%!assert (isequal (struct ("a","abc","b",2), struct ("a","abc","b",2),
 %!                 struct ("a","abc","b",2)), true)
 
 ## recursive structure
 %!test
 %! x.a = "a1";
 %! x.b.a = "ba1";
 %! x.b.b = "bb1";
 %! assert (isequal (x, x), true);
diff --git a/scripts/general/isequaln.m b/scripts/general/isequaln.m
--- a/scripts/general/isequaln.m
+++ b/scripts/general/isequaln.m
@@ -160,17 +160,17 @@ function t = isequaln (x, varargin)
           idx += 1;
         endwhile
 
       elseif (isa (x, "function_handle"))
         ## function type.  Use '==' operator which is overloaded.
         t = (x == y);
 
       else
-        error ("isequaln: Impossible to reach code.  File a bug report."); 
+        error ("isequaln: Impossible to reach code.  File a bug report.");
 
       endif
 
     else  ## More than two args.  This is going to be slower in general.
 
       if (ischar (x) && all (cellfun ("isclass", varargin, "char")))
         ## char type.  Optimization, strcmp is ~35% faster than '==' operator.
         idx = 1;
@@ -251,17 +251,17 @@ function t = isequaln (x, varargin)
 
       elseif (iscellstr (x) && all (cellfun (@iscellstr, varargin)))
         ## cellstr type.  Optimization over cell type by using strcmp.
         ## FIXME: It would be faster to use strcmp on whole cellstr arrays,
         ## but bug #51412 needs to be fixed.  Instead, time/space trade-off.
         ## Convert to char (space) for faster processing with strcmp (time).
         idx = 1;
         x = char (x);
-        while (t && idx <= nvarargin) 
+        while (t && idx <= nvarargin)
           t = strcmp (x, char (varargin{idx}));
           idx += 1;
         endwhile
 
       elseif (iscell (x))
         ## cell type.  Check that each element of a cell is equal.  Slow.
         n = numel (x);
         args = cell (1, 1 + nvarargin);
@@ -275,17 +275,17 @@ function t = isequaln (x, varargin)
           idx += 1;
         endwhile
 
       elseif (isa (x, "function_handle"))
         ## function type.  Use '==' operator which is overloaded.
         t = all (cellfun ("eq", {x}, varargin));
 
       else
-        error ("isequaln: Impossible to reach code.  File a bug report."); 
+        error ("isequaln: Impossible to reach code.  File a bug report.");
 
       endif
 
     endif
   endif
 
   t = full (t);  # Always return full logical value for Matlab compatibility.
 
diff --git a/scripts/gui/setappdata.m b/scripts/gui/setappdata.m
--- a/scripts/gui/setappdata.m
+++ b/scripts/gui/setappdata.m
@@ -62,17 +62,17 @@ function setappdata (h, varargin)
     if (n_value == 1 && n_names > 1);
       values = repmat (values, [1, n_names]);
     elseif (n_names != n_value);
       error ("setappdata: number of NAME and VALUE arguments must match");
     endif
     varargin = cell (1, 2*numel (names));
     varargin(1:2:end) = names;
     varargin(2:2:end) = values;
-   
+
   elseif (! all (cellfun ("isclass", varargin(1:2:end), "char")))
     error ("setappdata: NAME must be a string or cellstr");
   endif
 
   for hg = h
     try
       appdata = get (hg, "__appdata__");
     catch
diff --git a/scripts/plot/appearance/grid.m b/scripts/plot/appearance/grid.m
--- a/scripts/plot/appearance/grid.m
+++ b/scripts/plot/appearance/grid.m
@@ -171,23 +171,23 @@ endfunction
 %!demo
 %! ## Display minor grid lines at major ticks
 %! clf;
 %! subplot (1,2,1)
 %!  plot (1:10);
 %!  set (gca, "xminorgrid", "on");
 %!  set (gca, "yminorgrid", "on");
 %!  title ({"major grid disabled",
-%!          "minor grid displayed at major ticks"}); 
+%!          "minor grid displayed at major ticks"});
 %! subplot (1,2,2)
 %!  semilogy (1:100);
 %!  set (gca, "xminorgrid", "on");
 %!  set (gca, "yminorgrid", "on");
 %!  title ({"major grid disabled",
-%!          "minor grid displayed at major ticks"}); 
+%!          "minor grid displayed at major ticks"});
 
 %!demo
 %! clf;
 %! plot3 (1:10, 1:10, 1:10);
 %! set (gca, "xtick", [0, pi/2, 4.7, 8, 10]);
 %! set (gca, "ytick", [0, 1, pi, 7.3, 10]);
 %! set (gca, "ztick", [0, exp(1), 5, 9.1, 10]);
 %! set (gca, "xminorgrid", "on");
diff --git a/scripts/plot/appearance/legend.m b/scripts/plot/appearance/legend.m
--- a/scripts/plot/appearance/legend.m
+++ b/scripts/plot/appearance/legend.m
@@ -195,17 +195,17 @@ function [hleg, hleg_obj, hplot, labels]
   endfor
 
   orientation = "default";
   location = "default";
   show = "create";
   textpos = "default";
   box = "default";
   delete_leg = false;
-  find_leg_hdl = (nargs == 0);  # possibly overridden 
+  find_leg_hdl = (nargs == 0);  # possibly overridden
   propvals = {};
 
   ## Process old way of specifying location with a number rather than a string.
   ## FIXME: When can this be deleted?
   if (nargs > 0)
     pos = varargin{nargs};
     if (isnumeric (pos) && isscalar (pos) && pos == fix (pos))
       if (pos >= -1 && pos <= 4)
@@ -651,17 +651,17 @@ function [hleg, hleg_obj, hplot, labels]
         ## Text objects in key inherit visual properties from legend object
         legprops = { "fontunits", "fontangle", "fontname", "fontsize", ...
                      "fontweight", "interpreter", "textcolor" };
 
         txtprops = { "fontunits", [], "fontangle", [] "fontname", [], ...
                      "fontsize", [], "fontweight", [] "interpreter", [], ...
                      "color", [] };
         propvals = get (hlegend, legprops);
-        txtprops(2:2:end) = propvals; 
+        txtprops(2:2:end) = propvals;
 
         ## Add text labels to the axes first and check their extents
         nentries = numel (hplots);
         texthandle = [];
         maxwidth = maxheight = 0;
         for k = 1 : nentries
           halign = ifelse (strcmp (textpos, "right"), "left", "right");
           texthandle(k) = text (0, 0, text_strings{k},
@@ -984,17 +984,17 @@ function [hleg, hleg_obj, hplot, labels]
           endif
         endfor
 
         ## Add an invisible text object to original axis
         ## that, when it is destroyed, will remove the legend.
         htdel = findall (ca(1), "-depth", 1, "tag", "deletelegend",
                                 "type", "text");
         if (isempty (htdel))
-          htdel = text (0, 0, "", "parent", ca(1), "tag", "deletelegend", 
+          htdel = text (0, 0, "", "parent", ca(1), "tag", "deletelegend",
                         "visible", "off", "handlevisibility", "off",
                         "xliminclude", "off", "yliminclude", "off",
                         "zliminclude", "off");
           set (htdel, "deletefcn", {@cb_axes_deleted, ca, hlegend});
         endif
         if (isprop (hlegend, "unmodified_axes_position"))
           set (hlegend, "unmodified_axes_position",
                          unmodified_axes_position,
@@ -1770,43 +1770,43 @@ endfunction
 %!   x = 0:0.1:2*pi;
 %!   y1 = sin (x);
 %!   y2 = exp (x - 1);
 %!   hax = plotyy (x,y1, x-1,y2, @plot, @semilogy);
 %!   text (0.5, 0.5, "Left Axis", "parent", hax(1));
 %!   text (4.5, 80, "Right Axis", "parent", hax(2));
 %!   hleg = legend ("show");
 %!   assert (get (hleg, "string"), {"data1", "data2"});
-%!   fail ("legend ('foo', 'bar', 'baz')", "warning", "ignoring extra labels"); 
+%!   fail ("legend ('foo', 'bar', 'baz')", "warning", "ignoring extra labels");
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
 %!test
 %! ## Test warnings about objects to label
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   hax = gca ();
-%!   fail ("legend ('foobar')", "warning", "plot data is empty"); 
+%!   fail ("legend ('foobar')", "warning", "plot data is empty");
 %!   ht = text (0.5, 0.5, "Hello World");
-%!   fail ("legend ('foobar')", "warning", "plot data is empty"); 
+%!   fail ("legend ('foobar')", "warning", "plot data is empty");
 %!   lastwarn ("");   # clear warning
 %!   hleg = legend ();
 %!   assert (isempty (hleg) && isempty (lastwarn ()));
-%!   fail ("legend ('foobar')", "warning", "plot data is empty"); 
+%!   fail ("legend ('foobar')", "warning", "plot data is empty");
 %!   hln = line ([0 1], [0 1]);
-%!   fail ("legend ('foo', 'bar')", "warning", "ignoring extra labels"); 
+%!   fail ("legend ('foo', 'bar')", "warning", "ignoring extra labels");
 %!   plot (rand (2, 21));
-%!   fail ("legend ()", "warning", "labeling only first 20 data objects"); 
+%!   fail ("legend ()", "warning", "labeling only first 20 data objects");
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
 
 %!test
 %! ## Test warnings about unsupported features
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   plot (1:10);
-%!   fail ("legend ('location','best')", "warning", "'best' not yet implemented"); 
-%!   fail ("legend ('location','bestoutside')", "warning", "'best' not yet implemented"); 
+%!   fail ("legend ('location','best')", "warning", "'best' not yet implemented");
+%!   fail ("legend ('location','bestoutside')", "warning", "'best' not yet implemented");
 %! unwind_protect_cleanup
 %!   close (hf);
 %! end_unwind_protect
diff --git a/scripts/plot/draw/colorbar.m b/scripts/plot/draw/colorbar.m
--- a/scripts/plot/draw/colorbar.m
+++ b/scripts/plot/draw/colorbar.m
@@ -305,38 +305,38 @@ function h = colorbar (varargin)
       ## Fetch image handle from existing colorbar
       hi = get (hcb, "children");
     endif
 
     if (vertical)
       set (hi, "xdata", [0,1], "ydata", [cmin, cmax], "cdata", [1 : clen]');
       if (mirror)
         set (hcb, "xtick", [], "xlim", [-0.5, 1.5],
-                  "ytickmode", "auto", "ylim", cext, 
+                  "ytickmode", "auto", "ylim", cext,
                   "yaxislocation", "right", "label", get (hcb, "ylabel"),
                   "__vertical__", vertical,
                   "layer", "top", args{:});
       else
         set (hcb, "xtick", [], "xlim", [-0.5, 1.5],
-                  "ytickmode", "auto", "ylim", cext, 
+                  "ytickmode", "auto", "ylim", cext,
                   "yaxislocation", "left", "label", get (hcb, "ylabel"),
                   "__vertical__", vertical,
                   "layer", "top", args{:});
       endif
     else
       set (hi, "xdata", [cmin, cmax], "ydata", [0,1], "cdata", [1 : clen]);
       if (mirror)
         set (hcb, "ytick", [], "ylim", [-0.5, 1.5],
-                  "xtickmode", "auto", "xlim", cext, 
+                  "xtickmode", "auto", "xlim", cext,
                   "xaxislocation", "top", "label", get (hcb, "xlabel"),
                   "__vertical__", vertical,
                   "layer", "top", args{:});
       else
         set (hcb, "ytick", [], "ylim", [-0.5, 1.5],
-                  "xtickmode", "auto", "xlim", cext, 
+                  "xtickmode", "auto", "xlim", cext,
                   "xaxislocation", "bottom", "label", get (hcb, "xlabel"),
                   "__vertical__", vertical,
                   "layer", "top", args{:});
       endif
     endif
 
     ## Add listeners, but only to a new colorbar
     if (new_colorbar)
diff --git a/scripts/plot/util/findobj.m b/scripts/plot/util/findobj.m
--- a/scripts/plot/util/findobj.m
+++ b/scripts/plot/util/findobj.m
@@ -67,17 +67,17 @@
 ## @example
 ## findobj ("type", "figure", "-or", "type", "axes")
 ## @end example
 ##
 ## Objects may also be matched by comparing a regular expression to the
 ## property values, where property values that match
 ## @code{regexp (@var{prop_value}, @var{pattern})} are returned.
 ##
-## Finally, objects which have a property name can be found with the 
+## Finally, objects which have a property name can be found with the
 ## @qcode{"-property"} option.  For example, code to locate objects with a
 ## @qcode{"meshstyle"} property is
 ##
 ## @example
 ## findobj ("-property", "meshstyle")
 ## @end example
 ##
 ## Implementation Note: The search only includes objects with visible
diff --git a/scripts/statistics/bounds.m b/scripts/statistics/bounds.m
--- a/scripts/statistics/bounds.m
+++ b/scripts/statistics/bounds.m
@@ -68,23 +68,23 @@ function [s, l] = bounds (x, dim, nanfla
     if (! (isscalar (dim) && dim == fix (dim) && dim > 0))
       error ("bounds: DIM must be an integer and a valid dimension");
     endif
   endif
 
   if (nanflag)
     nanflag = strcmp (nanflag, "includenan");
   endif
-  
+
   s = min (x, [], dim);
   l = max (x, [], dim);
   if (nanflag)
-    nanidx = any (isnan (x), dim); 
-    s(nanidx) = NaN; 
-    l(nanidx) = NaN; 
+    nanidx = any (isnan (x), dim);
+    s(nanidx) = NaN;
+    l(nanidx) = NaN;
   endif
 
 endfunction
 
 
 %!test
 %! [s,l] = bounds (1:10);
 %! assert ([s,l], [1, 10]);
diff --git a/scripts/statistics/corrcoef.m b/scripts/statistics/corrcoef.m
--- a/scripts/statistics/corrcoef.m
+++ b/scripts/statistics/corrcoef.m
@@ -158,17 +158,17 @@ function [r, p, lci, hci] = corrcoef (x,
       xj = x(:,j);
       if (pairwise)
         idx = any (isnan ([xi xj]), 2);
         xi(idx) = xj(idx) = [];
         mpw(i,j) = mpw(j,i) = m - nnz (idx);
       endif
       r(i,j) = r(j,i) = corr (xi, xj);
       if (calc_pval)
-        df = m - 2;  
+        df = m - 2;
         stat = sqrt (df) * r(i,j) / sqrt (1 - r(i,j)^2);
         cdf = tcdf (stat, df);
         p(i,j) = p(j,i) = 2 * min (cdf, 1 - cdf);
       endif
     endfor
   endfor
 
   if (nargout > 2)
diff --git a/scripts/strings/erase.m b/scripts/strings/erase.m
--- a/scripts/strings/erase.m
+++ b/scripts/strings/erase.m
@@ -48,42 +48,42 @@
 ## Programming Note: @code{erase} deletes the first instance of a pattern in a
 ## string when there are overlapping occurrences.  For example,
 ##
 ## @example
 ## erase ("abababa", "aba")
 ##     @result{} "b"
 ## @end example
 ##
-## See @code{strrep} for processing overlaps.  
-## 
+## See @code{strrep} for processing overlaps.
+##
 ## @seealso{strrep, regexprep}
 ## @end deftypefn
 
 ## Author: Sahil Yadav <yadavsahil5198@gmail.com>
 
 
 function newstr = erase (str, ptn)
 
   if (nargin != 2)
     print_usage ();
   endif
-    
+
   ischarmatrix = false;
-  if (ischar (str)) 
+  if (ischar (str))
     if (rows (str) > 1)
       ## Convert to cell.  Can't use cellstr which trims spaces.
       str = mat2cell (str, ones (1, rows (str)));
       ischarmatrix = true;
     endif
   elseif (! iscellstr (str))
     error ("erase: STR must be a string or cell array of strings");
   endif
 
-  if (ischar (ptn)) 
+  if (ischar (ptn))
     if (rows (ptn) > 1)
       warning ("Octave:erase:chararray",
                "erase: using character array for PTN is not recommended, consider cell array of strings instead");
       ## Convert to cell.  Can't use cellstr which trims spaces.
       ptn = mat2cell (ptn, ones (1, rows (ptn)));
     endif
   elseif (! iscellstr (ptn))
     error ("erase: PTN must be a string or cell array of strings");
@@ -132,12 +132,12 @@ endfunction
 %!assert (erase ({'pppppppp'}, 'p'), {''})
 %!assert (erase ('Hello World t ', {'ld '; 'o '}), 'HellWort ')
 %!assert (erase ({'Hello World t '}, {'ld '; 'o '}), {'HellWort '})
 
 ## Test input validation
 %!error erase ()
 %!error erase ("a")
 %!error erase ("a", "b", "c")
-%!error <STR must be a string> erase ([1], "foo") 
-%!error <PTN must be a string> erase ("foo", [1]) 
+%!error <STR must be a string> erase ([1], "foo")
+%!error <PTN must be a string> erase ("foo", [1])
 %!warning <using character array for PTN is not recommended>
 %! erase ("a", ["a";"b"]);
diff --git a/scripts/strings/isstring.m b/scripts/strings/isstring.m
--- a/scripts/strings/isstring.m
+++ b/scripts/strings/isstring.m
@@ -41,15 +41,15 @@ function retval = isstring (s)
   retval = false;
 
 endfunction
 
 
 %!assert (isstring ([]), false)
 %!assert (isstring (1), false)
 %!assert (isstring ('a'), false)
-## FIXME: when string arrays are implemented, this should return true. 
+## FIXME: when string arrays are implemented, this should return true.
 #%!assert (isstring ("b"), true)
 %!assert (isstring ({'a'}), false)
 %!assert (isstring ({"b"}), false)
 
 %!error isstring ()
 %!error isstring ("a", "b")
diff --git a/src/mkoctfile.in.cc b/src/mkoctfile.in.cc
--- a/src/mkoctfile.in.cc
+++ b/src/mkoctfile.in.cc
@@ -627,19 +627,19 @@ main (int argc, char **argv)
           output_ext = ".mex";
         }
       else if (starts_with (arg, "-W"))
         {
           pass_on_options += (' ' + arg);
         }
       else if (starts_with (arg, "-"))
         {
-          // Pass through any unrecognized options
+          // Pass through any unrecognized options.
           pass_on_options += (' ' + arg);
-          // Check for an additional argument following the option 
+          // Check for an additional argument following the option.
           if (i < argc-1)
             {
               arg = argv[i+1];
               if (arg[0] != '-')
                 {
                   pass_on_options += (' ' + arg);
                   i++;
                 }
