# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1252215694 -7200
#      Sun Sep 06 07:41:34 2009 +0200
# Node ID 3ee9029931b3e39cf3a39c4688f282d0e6082b39
# Parent  b00af0da85dd03693e2c15dbe525a966208b2409
fix scalar complex-real comparisons

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-09-06  Jaroslav Hajek  <highegg@gmail.com>
+
+	* OPERATORS/op-s-cs.cc: Use DEFCMPLXCMPOP_OP.
+	* OPERATORS/op-cs-s.cc: Ditto.
+	* OPERATORS/op-fs-fcs.cc: Ditto.
+	* OPERATORS/op-fcs-fs.cc: Ditto.
+
 2009-09-05  John W. Eaton  <jwe@octave.org>
 
 	* genprops.awk: Fix formatting of generated output.
 	* graphics.h.in (graphics_object::get (const std::string&) const,
 	graphics_object::get (const char *) const): New functions.
 
 2009-09-05  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/OPERATORS/op-cs-s.cc b/src/OPERATORS/op-cs-s.cc
--- a/src/OPERATORS/op-cs-s.cc
+++ b/src/OPERATORS/op-cs-s.cc
@@ -63,57 +63,22 @@ DEFBINOP (ldiv, complex, scalar)
   Complex d = v1.complex_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
   return octave_value (v2.double_value () / d);
 }
 
-DEFBINOP (lt, complex, scalar)
-{
-  CAST_BINOP_ARGS (const octave_complex&, const octave_scalar&);
-
-  return real (v1.complex_value ()) < v2.double_value ();
-}
-
-DEFBINOP (le, complex, scalar)
-{
-  CAST_BINOP_ARGS (const octave_complex&, const octave_scalar&);
-
-  return real (v1.complex_value ()) <= v2.double_value ();
-}
-
-DEFBINOP (eq, complex, scalar)
-{
-  CAST_BINOP_ARGS (const octave_complex&, const octave_scalar&);
-
-  return v1.complex_value () == v2.double_value ();
-}
-
-DEFBINOP (ge, complex, scalar)
-{
-  CAST_BINOP_ARGS (const octave_complex&, const octave_scalar&);
-
-  return real (v1.complex_value ()) >= v2.double_value ();
-}
-
-DEFBINOP (gt, complex, scalar)
-{
-  CAST_BINOP_ARGS (const octave_complex&, const octave_scalar&);
-
-  return real (v1.complex_value ()) > v2.double_value ();
-}
-
-DEFBINOP (ne, complex, scalar)
-{
-  CAST_BINOP_ARGS (const octave_complex&, const octave_scalar&);
-
-  return v1.complex_value () != v2.double_value ();
-}
+DEFCMPLXCMPOP_OP (lt, complex, scalar, <)
+DEFCMPLXCMPOP_OP (le, complex, scalar, <=)
+DEFCMPLXCMPOP_OP (eq, complex, scalar, ==)
+DEFCMPLXCMPOP_OP (ge, complex, scalar, >=)
+DEFCMPLXCMPOP_OP (gt, complex, scalar, >)
+DEFCMPLXCMPOP_OP (ne, complex, scalar, !=)
 
 DEFBINOP_OP (el_mul, complex, scalar, *)
 
 DEFBINOP (el_div, complex, scalar)
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_scalar&);
 
   double d = v2.double_value ();
diff --git a/src/OPERATORS/op-fcs-fs.cc b/src/OPERATORS/op-fcs-fs.cc
--- a/src/OPERATORS/op-fcs-fs.cc
+++ b/src/OPERATORS/op-fcs-fs.cc
@@ -66,57 +66,22 @@ DEFBINOP (ldiv, float_complex, float)
   FloatComplex d = v1.float_complex_value ();
 
   if (d == static_cast<float>(0.0))
     gripe_divide_by_zero ();
 
   return octave_value (v2.float_value () / d);
 }
 
-DEFBINOP (lt, float_complex, float)
-{
-  CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_scalar&);
-
-  return real (v1.float_complex_value ()) < v2.float_value ();
-}
-
-DEFBINOP (le, float_complex, float)
-{
-  CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_scalar&);
-
-  return real (v1.float_complex_value ()) <= v2.float_value ();
-}
-
-DEFBINOP (eq, float_complex, float)
-{
-  CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_scalar&);
-
-  return v1.float_complex_value () == v2.float_value ();
-}
-
-DEFBINOP (ge, float_complex, float)
-{
-  CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_scalar&);
-
-  return real (v1.float_complex_value ()) >= v2.float_value ();
-}
-
-DEFBINOP (gt, float_complex, float)
-{
-  CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_scalar&);
-
-  return real (v1.float_complex_value ()) > v2.float_value ();
-}
-
-DEFBINOP (ne, float_complex, float)
-{
-  CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_scalar&);
-
-  return v1.float_complex_value () != v2.float_value ();
-}
+DEFCMPLXCMPOP_OP (lt, float_complex, float_scalar, <)
+DEFCMPLXCMPOP_OP (le, float_complex, float_scalar, <=)
+DEFCMPLXCMPOP_OP (eq, float_complex, float_scalar, ==)
+DEFCMPLXCMPOP_OP (ge, float_complex, float_scalar, >=)
+DEFCMPLXCMPOP_OP (gt, float_complex, float_scalar, >)
+DEFCMPLXCMPOP_OP (ne, float_complex, float_scalar, !=)
 
 DEFBINOP_OP (el_mul, float_complex, float_scalar, *)
 
 DEFBINOP (el_div, float_complex, float)
 {
   CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_scalar&);
 
   float d = v2.float_value ();
diff --git a/src/OPERATORS/op-fs-fcs.cc b/src/OPERATORS/op-fs-fcs.cc
--- a/src/OPERATORS/op-fs-fcs.cc
+++ b/src/OPERATORS/op-fs-fcs.cc
@@ -66,57 +66,22 @@ DEFBINOP (ldiv, float_scalar, float_comp
   float d = v1.float_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
   return octave_value (v2.float_complex_value () / d);
 }
 
-DEFBINOP (lt, float_scalar, float_complex)
-{
-  CAST_BINOP_ARGS (const octave_float_scalar&, const octave_float_complex&);
-
-  return v1.float_value () < real (v2.float_complex_value ());
-}
-
-DEFBINOP (le, float_scalar, float_complex)
-{
-  CAST_BINOP_ARGS (const octave_float_scalar&, const octave_float_complex&);
-
-  return v1.float_value () <= real (v2.float_complex_value ());
-}
-
-DEFBINOP (eq, float_scalar, float_complex)
-{
-  CAST_BINOP_ARGS (const octave_float_scalar&, const octave_float_complex&);
-
-  return v1.float_value () == v2.float_complex_value ();
-}
-
-DEFBINOP (ge, float_scalar, float_complex)
-{
-  CAST_BINOP_ARGS (const octave_float_scalar&, const octave_float_complex&);
-
-  return v1.float_value () >= real (v2.float_complex_value ());
-}
-
-DEFBINOP (gt, float_scalar, float_complex)
-{
-  CAST_BINOP_ARGS (const octave_float_scalar&, const octave_float_complex&);
-
-  return v1.float_value () > real (v2.float_complex_value ());
-}
-
-DEFBINOP (ne, float_scalar, float_complex)
-{
-  CAST_BINOP_ARGS (const octave_float_scalar&, const octave_float_complex&);
-
-  return v1.float_value () != v2.float_complex_value ();
-}
+DEFCMPLXCMPOP_OP (lt, float_scalar, float_complex, <)
+DEFCMPLXCMPOP_OP (le, float_scalar, float_complex, <=)
+DEFCMPLXCMPOP_OP (eq, float_scalar, float_complex, ==)
+DEFCMPLXCMPOP_OP (ge, float_scalar, float_complex, >=)
+DEFCMPLXCMPOP_OP (gt, float_scalar, float_complex, >)
+DEFCMPLXCMPOP_OP (ne, float_scalar, float_complex, !=)
 
 DEFBINOP_OP (el_mul, float_scalar, float_complex, *)
 
 DEFBINOP (el_div, float_scalar, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_scalar&, const octave_float_complex&);
 
   FloatComplex d = v2.float_complex_value ();
diff --git a/src/OPERATORS/op-s-cs.cc b/src/OPERATORS/op-s-cs.cc
--- a/src/OPERATORS/op-s-cs.cc
+++ b/src/OPERATORS/op-s-cs.cc
@@ -65,57 +65,22 @@ DEFBINOP (ldiv, scalar, complex)
   double d = v1.double_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
   return octave_value (v2.complex_value () / d);
 }
 
-DEFBINOP (lt, scalar, complex)
-{
-  CAST_BINOP_ARGS (const octave_scalar&, const octave_complex&);
-
-  return v1.double_value () < real (v2.complex_value ());
-}
-
-DEFBINOP (le, scalar, complex)
-{
-  CAST_BINOP_ARGS (const octave_scalar&, const octave_complex&);
-
-  return v1.double_value () <= real (v2.complex_value ());
-}
-
-DEFBINOP (eq, scalar, complex)
-{
-  CAST_BINOP_ARGS (const octave_scalar&, const octave_complex&);
-
-  return v1.double_value () == v2.complex_value ();
-}
-
-DEFBINOP (ge, scalar, complex)
-{
-  CAST_BINOP_ARGS (const octave_scalar&, const octave_complex&);
-
-  return v1.double_value () >= real (v2.complex_value ());
-}
-
-DEFBINOP (gt, scalar, complex)
-{
-  CAST_BINOP_ARGS (const octave_scalar&, const octave_complex&);
-
-  return v1.double_value () > real (v2.complex_value ());
-}
-
-DEFBINOP (ne, scalar, complex)
-{
-  CAST_BINOP_ARGS (const octave_scalar&, const octave_complex&);
-
-  return v1.double_value () != v2.complex_value ();
-}
+DEFCMPLXCMPOP_OP (lt, scalar, complex, <)
+DEFCMPLXCMPOP_OP (le, scalar, complex, <=)
+DEFCMPLXCMPOP_OP (eq, scalar, complex, ==)
+DEFCMPLXCMPOP_OP (ge, scalar, complex, >=)
+DEFCMPLXCMPOP_OP (gt, scalar, complex, >)
+DEFCMPLXCMPOP_OP (ne, scalar, complex, !=)
 
 DEFBINOP_OP (el_mul, scalar, complex, *)
 
 DEFBINOP (el_div, scalar, complex)
 {
   CAST_BINOP_ARGS (const octave_scalar&, const octave_complex&);
 
   Complex d = v2.complex_value ();
