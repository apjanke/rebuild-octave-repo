# HG changeset patch
# User jwe
# Date 1086707331 0
#      Tue Jun 08 15:08:51 2004 +0000
# Node ID e227982af676da11f7b15deb005eb8d53e5dfb05
# Parent  8fd9495f5054ce0d98505789755a8d81c076447a
[project @ 2004-06-08 15:08:51 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2004-06-04  John W. Eaton  <jwe@octave.org>
+
+	* mx-inlines.cc (MX_ND_REDUCTION): New arg, RET_ELT_TYPE.  Use
+	"RET_ELT_TYPE ()" rather than "false" as fill value for retval
+	resize op.  Change all uses.
+
 2004-06-03  David Bateman  <dbateman@free.fr>
 
 	* Array.cc (assignN): Allow magic colon for dimensions lvalue
 	greater than the existing number of dimensions in lvalue.
 
 2004-04-30  David Bateman  <dbateman@free.fr>
 
         * dim_vector.h (dim_vector::dim_vector_rep::dim_vector_rep):
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -373,17 +373,18 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
  if (TEST_EXPR) \
    { \
      if (dim > -1) \
        iter_idx (dim) = 0; \
      retval (iter_idx) = 1; \
      break; \
    } 
  
-#define MX_ND_REDUCTION(EVAL_EXPR, END_EXPR, VAL, ACC_DECL, RET_TYPE) \
+#define MX_ND_REDUCTION(EVAL_EXPR, END_EXPR, VAL, ACC_DECL, \
+                        RET_TYPE, RET_ELT_TYPE) \
  \
   RET_TYPE retval; \
  \
   dim_vector dv = dims (); \
  \
   int empty = true; \
  \
   for (int i = 0; i < dv.length (); i++) \
@@ -451,17 +452,17 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
  \
   if (dim > -1) \
     dv(dim) = 1; \
  \
   /* This finds the number of elements in retval */ \
   int num_iter = (numel () / dim_length); \
  \
   /* Make sure retval has correct dimensions */ \
-  retval.resize (dv, false); \
+  retval.resize (dv, RET_ELT_TYPE ()); \
  \
   Array<int> iter_idx (dv.length (), 0); \
  \
   /* Filling in values.         */ \
   /* First loop finds new index */ \
  \
   for (int j = 0; j < num_iter; j++) \
     { \
@@ -483,24 +484,24 @@ OP_DUP_FCN (conj, mx_inline_conj_dup, Co
     } \
  \
   retval.chop_trailing_singletons (); \
  \
   return retval
 
 #define MX_ND_REAL_OP_REDUCTION(ASN_EXPR, INIT_VAL) \
   MX_ND_REDUCTION (acc ASN_EXPR, retval.elem (iter_idx) = acc, \
-                   INIT_VAL, double acc = INIT_VAL, NDArray)
+                   INIT_VAL, double acc = INIT_VAL, NDArray, double)
 
 #define MX_ND_COMPLEX_OP_REDUCTION(ASN_EXPR, INIT_VAL) \
   MX_ND_REDUCTION (acc ASN_EXPR, retval.elem (iter_idx) = acc, \
-                   INIT_VAL, Complex acc = INIT_VAL, ComplexNDArray)
+                   INIT_VAL, Complex acc = INIT_VAL, ComplexNDArray, Complex)
 
 #define MX_ND_ANY_ALL_REDUCTION(EVAL_EXPR, VAL) \
-  MX_ND_REDUCTION (EVAL_EXPR, , VAL, , boolNDArray)
+  MX_ND_REDUCTION (EVAL_EXPR, , VAL, , boolNDArray, bool)
 
 #define MX_ND_CUMULATIVE_OP(RET_TYPE, ACC_TYPE, VAL, OP) \
   RET_TYPE retval; \
  \
   dim_vector dv = dims (); \
  \
   int empty = true; \
  \
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -73,18 +73,16 @@ public:
   octave_value *empty_clone (void) const { return new octave_bool_matrix (); }
 
   type_conv_fcn numeric_conversion_function (void) const;
 
   octave_value *try_narrowing_conversion (void);
 
   idx_vector index_vector (void) const { return idx_vector (matrix); }
 
-  size_t byte_size (void) const { return numel () * sizeof (bool); }
-
   bool is_bool_matrix (void) const { return true; }
 
   bool is_bool_type (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const;
 
diff --git a/src/ov-ch-mat.h b/src/ov-ch-mat.h
--- a/src/ov-ch-mat.h
+++ b/src/ov-ch-mat.h
@@ -78,18 +78,16 @@ public:
   octave_char_matrix (const octave_char_matrix& chm)
     : octave_base_matrix<charNDArray> (chm) { }
 
   ~octave_char_matrix (void) { }
 
   octave_value *clone (void) const { return new octave_char_matrix (*this); }
   octave_value *empty_clone (void) const { return new octave_char_matrix (); }
 
-  size_t byte_size (void) const { return numel () * sizeof (char); }
-
   bool is_char_matrix (void) const { return true; }
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const;
 
   double double_value (bool = false) const;
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -80,18 +80,16 @@ public:
   octave_value *empty_clone (void) const { return new octave_complex_matrix (); }
 
   octave_value *try_narrowing_conversion (void);
 
   void assign (const octave_value_list& idx, const ComplexNDArray& rhs);
 
   void assign (const octave_value_list& idx, const NDArray& rhs);
 
-  size_t byte_size (void) const { return numel () * sizeof (Complex); }
-
   bool is_complex_matrix (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const;
 
   double double_value (bool = false) const;
 
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -79,18 +79,16 @@ public:
 
   octave_value *clone (void) const { return new octave_matrix (*this); }
   octave_value *empty_clone (void) const { return new octave_matrix (); }
 
   octave_value *try_narrowing_conversion (void);
 
   idx_vector index_vector (void) const { return idx_vector (matrix); }
 
-  size_t byte_size (void) const { return numel () * sizeof (double); }
-
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const;
 
   double double_value (bool = false) const;
 
diff --git a/src/ov-streamoff.h b/src/ov-streamoff.h
--- a/src/ov-streamoff.h
+++ b/src/ov-streamoff.h
@@ -58,18 +58,16 @@ public:
   octave_streamoff (const octave_streamoff& off)
     : octave_base_matrix<streamoff_array> (off) { }
 
   ~octave_streamoff (void) { }
 
   octave_value *clone (void) const { return new octave_streamoff (*this); }
   octave_value *empty_clone (void) const { return new octave_streamoff (); }
 
-  size_t byte_size (void) const { return numel () * sizeof (std::streamoff); }
-
   bool is_defined (void) const { return true; }
 
   bool is_streamoff (void) const { return true; }
 
   std::streamoff streamoff_value (void) const;
 
   streamoff_array streamoff_array_value (void) const { return matrix; }
 
