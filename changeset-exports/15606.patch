# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1352518161 25200
#      Fri Nov 09 20:29:21 2012 -0700
# Node ID fb9dffe5fbfb4469f66becd0dab61f02b34d679f
# Parent  80a4ded6b89c18dd83451969802ca253c655d7f1
The silent_functions flag no longer modifies the parse tree

* pt-assign.cc (tree_simple_assignment::rvalue1, tree_multi_assignment::rvalue):
Check tree_evaluator::statement_printing_enabled.

* pt-eval.cc (tree_evaluator::statement_printing_enabled): New function.
(tree_evaluator::visit_statement): Do not modify parse tree and check
tree_evaluator::statement_printing_enabled.
* pt-eval.h (tree_evaluator::statement_printing_enabled): New declaration.

* pt-exp.h (tree_expression::print_result): Added comment.

* pt-id.cc (tree_identifier::rvalue): Check
tree_evaluator::statement_printing_enabled.

diff --git a/libinterp/parse-tree/pt-assign.cc b/libinterp/parse-tree/pt-assign.cc
--- a/libinterp/parse-tree/pt-assign.cc
+++ b/libinterp/parse-tree/pt-assign.cc
@@ -33,16 +33,17 @@ along with Octave; see the file COPYING.
 #include "input.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "pager.h"
 #include "ov.h"
 #include "pt-arg-list.h"
 #include "pt-bp.h"
 #include "pt-assign.h"
+#include "pt-eval.h"
 #include "pt-walk.h"
 #include "utils.h"
 #include "variables.h"
 
 // Simple assignment expressions.
 
 // FIXME -- the following variable and the function that uses it
 // should be removed from some future version of Octave.
@@ -242,17 +243,18 @@ tree_simple_assignment::rvalue1 (int)
 
                   if (! error_state)
                     {
                       if (etype == octave_value::op_asn_eq)
                         retval = rhs_val;
                       else
                         retval = ult.value ();
 
-                      if (print_result ())
+                      if (print_result ()
+                          && tree_evaluator::statement_printing_enabled ())
                         {
                           // We clear any index here so that we can
                           // get the new value of the referenced
                           // object below, instead of the indexed
                           // value (which should be the same as the
                           // right hand side value).
 
                           ult.clear_index ();
@@ -454,17 +456,18 @@ tree_multi_assignment::rvalue (int)
                     }
                   else
                     error ("element number %d undefined in return list", k+1);
                 }
             }
 
           if (error_state)
             break;
-          else if (print_result ())
+          else if (print_result ()
+                   && tree_evaluator::statement_printing_enabled ())
             {
               // We clear any index here so that we can get
               // the new value of the referenced object below,
               // instead of the indexed value (which should be
               // the same as the right hand side value).
 
               ult.clear_index ();
 
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -127,16 +127,23 @@ tree_evaluator::visit_continue_command (
 void
 tree_evaluator::reset_debug_state (void)
 {
   debug_mode = bp_table::have_breakpoints () || Vdebugging;
 
   dbstep_flag = 0;
 }
 
+bool
+tree_evaluator::statement_printing_enabled (void)
+{
+  return ! (Vsilent_functions && (statement_context == function
+                                  || statement_context == script));
+}
+
 static inline void
 do_global_init (tree_decl_elt& elt)
 {
   tree_identifier *id = elt.ident ();
 
   if (id)
     {
       id->mark_global ();
@@ -712,20 +719,16 @@ tree_evaluator::visit_statement (tree_st
         {
           if (cmd)
             cmd->accept (*this);
           else
             {
               if (debug_mode)
                 do_breakpoint (expr->is_breakpoint ());
 
-              if ((statement_context == function || statement_context == script)
-                  && Vsilent_functions)
-                expr->set_print_flag (false);
-
               // FIXME -- maybe all of this should be packaged in
               // one virtual function that returns a flag saying whether
               // or not the expression will take care of binding ans and
               // printing the result.
 
               // FIXME -- it seems that we should just have to
               // call expr->rvalue1 () and that should take care of
               // everything, binding ans as necessary?
@@ -739,17 +742,18 @@ tree_evaluator::visit_statement (tree_st
                   do_bind_ans = (! id->is_variable ());
                 }
               else
                 do_bind_ans = (! expr->is_assignment_expression ());
 
               octave_value tmp_result = expr->rvalue1 (0);
 
               if (do_bind_ans && ! (error_state || tmp_result.is_undefined ()))
-                bind_ans (tmp_result, expr->print_result ());
+                bind_ans (tmp_result, expr->print_result ()
+                          && statement_printing_enabled ());
 
               //              if (tmp_result.is_defined ())
               //                result_values(0) = tmp_result;
             }
         }
       catch (octave_execution_exception)
         {
           gripe_library_execution_error ();
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -131,16 +131,18 @@ public:
   void visit_unwind_protect_command (tree_unwind_protect_command&);
 
   void visit_while_command (tree_while_command&);
 
   void visit_do_until_command (tree_do_until_command&);
 
   static void reset_debug_state (void);
 
+  static bool statement_printing_enabled (void);
+
   // If > 0, stop executing at the (N-1)th stopping point, counting
   //         from the the current execution point in the current frame.
   //
   // If < 0, stop executing at the next possible stopping point.
   static int dbstep_flag;
 
   // The number of the stack frame we are currently debugging.
   static size_t current_frame;
diff --git a/libinterp/parse-tree/pt-exp.h b/libinterp/parse-tree/pt-exp.h
--- a/libinterp/parse-tree/pt-exp.h
+++ b/libinterp/parse-tree/pt-exp.h
@@ -82,16 +82,19 @@ public:
                                     const std::list<octave_lvalue> *lvalue_list);
 
   virtual octave_lvalue lvalue (void);
 
   int paren_count (void) const { return num_parens; }
 
   bool is_postfix_indexed (void) const { return postfix_indexed; }
 
+  // Check if the result of the expression should be printed.
+  // Should normally be used in conjunction with
+  // tree_evaluator::statement_printing_enabled.
   bool print_result (void) const { return print_flag; }
 
   virtual std::string oper (void) const { return "<unknown>"; }
 
   virtual std::string name (void) const { return "<unknown>"; }
 
   virtual std::string original_text (void) const;
 
diff --git a/libinterp/parse-tree/pt-id.cc b/libinterp/parse-tree/pt-id.cc
--- a/libinterp/parse-tree/pt-id.cc
+++ b/libinterp/parse-tree/pt-id.cc
@@ -25,16 +25,17 @@ along with Octave; see the file COPYING.
 #endif
 
 #include "error.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "pager.h"
 #include "pt-bp.h"
 #include "pt-const.h"
+#include "pt-eval.h"
 #include "pt-id.h"
 #include "pt-walk.h"
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
 
 // Symbols from the symbol table.
 
@@ -83,17 +84,18 @@ tree_identifier::rvalue (int nargout)
       if (val.is_function () && ! is_postfix_indexed ())
         {
           octave_value_list tmp_args;
 
           retval = val.do_multi_index_op (nargout, tmp_args);
         }
       else
         {
-          if (print_result () && nargout == 0)
+          if (print_result () && nargout == 0
+              && tree_evaluator::statement_printing_enabled ())
             val.print_with_name (octave_stdout, name ());
 
           retval = val;
         }
     }
   else if (sym->is_added_static ())
     static_workspace_error ();
   else
