# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1444339600 14400
#      Thu Oct 08 17:26:40 2015 -0400
# Node ID 7374a3a6d5946c3c259c59f9dccc5558d291d08c
# Parent  40ed9b46a800a5670168211f53df2f1f8d374cd5
use new string_value method to handle value extraction errors

* urlwrite.cc: Use new string_value method.

diff --git a/libinterp/corefcn/urlwrite.cc b/libinterp/corefcn/urlwrite.cc
--- a/libinterp/corefcn/urlwrite.cc
+++ b/libinterp/corefcn/urlwrite.cc
@@ -345,45 +345,27 @@ urlwrite (\"http://www.google.com/search
 
   // verify arguments
   if (nargin != 2 && nargin != 4)
     {
       print_usage ();
       return retval;
     }
 
-  if (! args(0).is_string ())
-    {
-      error ("urlwrite: URL must be a string");
-      return retval;
-    }
-
-  std::string url = args(0).string_value ();
-
-  if (! args(1).is_string ())
-    {
-      error ("urlwrite: LOCALFILE must be a string");
-      return retval;
-    }
+  std::string url = args(0).string_value ("urlwrite: URL must be a string");
 
   // name to store the file if download is succesful
-  std::string filename = args(1).string_value ();
+  std::string filename = args(1).string_value ("urlwrite: LOCALFILE must be a string");
 
   std::string method;
   Array<std::string> param;
 
   if (nargin == 4)
     {
-      if (! args(2).is_string ())
-        {
-          error ("urlwrite: METHOD must be a string");
-          return retval;
-        }
-
-      method = args(2).string_value ();
+      method = args(2).string_value ("urlwrite: METHOD must be a string");
 
       if (method != "get" && method != "post")
         {
           error ("urlwrite: METHOD must be \"get\" or \"post\"");
           return retval;
         }
 
       param = args(3).cellstr_value ();
@@ -506,36 +488,24 @@ s = urlread (\"http://www.google.com/sea
 
   // verify arguments
   if (nargin != 1 && nargin != 3)
     {
       print_usage ();
       return retval;
     }
 
-  if (! args(0).is_string ())
-    {
-      error ("urlread: URL must be a string");
-      return retval;
-    }
-
-  std::string url = args(0).string_value ();
+  std::string url = args(0).string_value ("urlread: URL must be a string");
 
   std::string method;
   Array<std::string> param;
 
   if (nargin == 3)
     {
-      if (! args(1).is_string ())
-        {
-          error ("urlread: METHOD must be a string");
-          return retval;
-        }
-
-      method = args(1).string_value ();
+      method = args(1).string_value ("urlread: METHOD must be a string");
 
       if (method != "get" && method != "post")
         {
           error ("urlread: METHOD must be \"get\" or \"post\"");
           return retval;
         }
 
       param = args(2).cellstr_value ();
@@ -594,23 +564,23 @@ Undocumented internal function\n\
 
   if (nargin < 1 || nargin > 3)
     {
       print_usage ();
       return retval;
     }
   else
     {
-      host = args(0).string_value ();
+      host = args(0).string_value ("__ftp__: HOST must be a string");
 
       if (nargin > 1)
-        user = args(1).string_value ();
+        user = args(1).string_value ("__ftp__: USER must be a string");
 
       if (nargin > 2)
-        passwd = args(2).string_value ();
+        passwd = args(2).string_value ("__ftp__: PASSWD must be a string");
 
       curl_handle ch
         = ch_manager::make_curl_handle (host, user, passwd, octave_stdout);
 
       retval = ch.value ();
     }
 
   return retval;
@@ -657,17 +627,17 @@ Undocumented internal function\n\
     {
       url_transfer curl = ch_manager::get_object (args(0));
 
       if (curl.is_valid ())
         {
           std::string path = "";
 
           if (nargin > 1)
-            path = args(1).string_value ();
+            path = args(1).string_value ("__ftp_cwd__: PATH must be a string");
 
           if (! error_state)
             curl.cwd (path);
           else
             error ("__ftp_cwd__: expecting path as second argument");
         }
       else
         error ("__ftp_cwd__: invalid ftp handle");
@@ -867,17 +837,17 @@ Undocumented internal function\n\
   if (nargin != 2)
     error ("__ftp_delete__: incorrect number of arguments");
   else
     {
       url_transfer curl = ch_manager::get_object (args(0));
 
       if (curl.is_valid ())
         {
-          std::string file = args(1).string_value ();
+          std::string file = args(1).string_value ("__ftp_delete__: FILE must be a string");
 
           if (! error_state)
             curl.del (file);
           else
             error ("__ftp_delete__: expecting file name as second argument");
         }
       else
         error ("__ftp_delete__: invalid ftp handle");
@@ -899,17 +869,17 @@ Undocumented internal function\n\
   if (nargin != 2)
     error ("__ftp_rmdir__: incorrect number of arguments");
   else
     {
       url_transfer curl = ch_manager::get_object (args(0));
 
       if (curl.is_valid ())
         {
-          std::string dir = args(1).string_value ();
+          std::string dir = args(1).string_value ("__ftp_rmdir__: DIR must be a string");
 
           if (! error_state)
             curl.rmdir (dir);
           else
             error ("__ftp_rmdir__: expecting directory name as second argument");
         }
       else
         error ("__ftp_rmdir__: invalid ftp handle");
@@ -931,17 +901,17 @@ Undocumented internal function\n\
   if (nargin != 2)
     error ("__ftp_mkdir__: incorrect number of arguments");
   else
     {
       url_transfer curl = ch_manager::get_object (args(0));
 
       if (curl.is_valid ())
         {
-          std::string dir = args(1).string_value ();
+          std::string dir = args(1).string_value ("__ftp_mkdir__: DIR must be a string");
 
           if (! error_state)
             curl.mkdir (dir);
           else
             error ("__ftp_mkdir__: expecting directory name as second argument");
         }
       else
         error ("__ftp_mkdir__: invalid ftp handle");
@@ -963,18 +933,18 @@ Undocumented internal function\n\
   if (nargin != 3)
     error ("__ftp_rename__: incorrect number of arguments");
   else
     {
       url_transfer curl = ch_manager::get_object (args(0));
 
       if (curl.is_valid ())
         {
-          std::string oldname = args(1).string_value ();
-          std::string newname = args(2).string_value ();
+          std::string oldname = args(1).string_value ("__ftp_rename__: OLDNAME must be a string");
+          std::string newname = args(2).string_value ("__ftp_rename__: NEWNAME must be a string");
 
           if (! error_state)
             curl.rename (oldname, newname);
           else
             error ("__ftp_rename__: expecting file names for second and third arguments");
         }
       else
         error ("__ftp_rename__: invalid ftp handle");
@@ -996,17 +966,17 @@ Undocumented internal function\n\
   if (nargin != 2)
     error ("__ftp_mput__: incorrect number of arguments");
   else
     {
       url_transfer curl = ch_manager::get_object (args(0));
 
       if (curl.is_valid ())
         {
-          std::string pat = args(1).string_value ();
+          std::string pat = args(1).string_value ("__ftp_mput__: PATTERN must be a string");
 
           if (! error_state)
             {
               string_vector file_list;
 
               glob_match pattern (file_ops::tilde_expand (pat));
               string_vector files = pattern.glob ();
 
@@ -1068,37 +1038,38 @@ Undocumented internal function\n\
         error ("__ftp_mput__: invalid ftp handle");
     }
 
   return retval;
 }
 
 DEFUN (__ftp_mget__, args, ,
        "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {} __ftp_mget__ (@var{handle}, @var{files})\n\
+@deftypefn {Loadable Function} {} __ftp_mget__ (@var{handle}, @var{pattern})\n\
+@deftypefnx {Loadable Function} {} __ftp_mget__ (@var{handle}, @var{pattern}, @var{target})\n\
 Undocumented internal function\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin != 2 && nargin != 3)
     error ("__ftp_mget__: incorrect number of arguments");
   else
     {
       url_transfer curl = ch_manager::get_object (args(0));
 
       if (curl.is_valid ())
         {
-          std::string file = args(1).string_value ();
+          std::string file = args(1).string_value ("__ftp_mget__: PATTERN must be a string");
           std::string target;
 
           if (nargin == 3)
-            target = args(2).string_value () + file_ops::dir_sep_str ();
+            target = args(2).string_value ("__ftp_mget__: TARGET must be a string") + file_ops::dir_sep_str ();
 
           if (! error_state)
             {
               string_vector sv = curl.list ();
               octave_idx_type n = 0;
               glob_match pattern (file);
 
 
