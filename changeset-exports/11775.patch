# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1210781038 -7200
#      Wed May 14 18:03:58 2008 +0200
# Branch release-3-0-x
# Node ID bd72c5e49dcb39aa48447b1567216cbd43091a23
# Parent  3c08ffee113776baf069e52c527708298eaa934e
Typo DPBCON -> DGBCON

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,13 @@
 2008-05-19  David Bateman  <dbateman@free.fr>
 
+	* dSparse.cc: Replace some DGBCON with GPBCON where they are
+	incorrectly used.
+
 	* idx-vector.cc (IDX_VEC_REP::idx_vector_rep (const boolNDArray&)):
 	If len is zero size the index vector in the same manner as if len
 	is not zero.
 
 2008-05-11  John W. Eaton  <jwe@octave.org>
 
 	* intNDArray.cc (intNDArray<T>::any (int)): Use != for comparison.
 
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -4509,17 +4509,17 @@ SparseMatrix::bsolve (MatrixType &mattyp
 		{
 		  if (calc_cond)
 		    {
 		      Array<double> z (3 * nr);
 		      double *pz = z.fortran_vec ();
 		      Array<octave_idx_type> iz (nr);
 		      octave_idx_type *piz = iz.fortran_vec ();
 
-		      F77_XFCN (dpbcon, DGBCON, 
+		      F77_XFCN (dpbcon, DPBCON, 
 		      	(F77_CONST_CHAR_ARG2 (&job, 1),
 		      	 nr, n_lower, tmp_data, ldm,
 		      	 anorm, rcond, pz, piz, err
 		      	 F77_CHAR_ARG_LEN (1)));
 
 		      if (f77_exception_encountered)
 		      	(*current_liboctave_error_handler) 
 		      	  ("unrecoverable error in dpbcon");
@@ -4785,17 +4785,17 @@ SparseMatrix::bsolve (MatrixType &mattyp
 		{
 		  if (calc_cond)
 		    {
 		      Array<double> z (3 * nr);
 		      double *pz = z.fortran_vec ();
 		      Array<octave_idx_type> iz (nr);
 		      octave_idx_type *piz = iz.fortran_vec ();
 
-		      F77_XFCN (dpbcon, DGBCON, 
+		      F77_XFCN (dpbcon, DPBCON, 
 		      	(F77_CONST_CHAR_ARG2 (&job, 1),
 		      	 nr, n_lower, tmp_data, ldm,
 		      	 anorm, rcond, pz, piz, err
 		      	 F77_CHAR_ARG_LEN (1)));
 
 		      if (f77_exception_encountered)
 		      	(*current_liboctave_error_handler) 
 		      	  ("unrecoverable error in dpbcon");
@@ -5140,17 +5140,17 @@ SparseMatrix::bsolve (MatrixType &mattyp
 		{
 		  if (calc_cond)
 		    {
 		      Array<double> z (3 * nr);
 		      double *pz = z.fortran_vec ();
 		      Array<octave_idx_type> iz (nr);
 		      octave_idx_type *piz = iz.fortran_vec ();
 
-		      F77_XFCN (dpbcon, DGBCON, 
+		      F77_XFCN (dpbcon, DPBCON, 
 		      	(F77_CONST_CHAR_ARG2 (&job, 1),
 		      	 nr, n_lower, tmp_data, ldm,
 		      	 anorm, rcond, pz, piz, err
 		      	 F77_CHAR_ARG_LEN (1)));
 
 		      if (f77_exception_encountered)
 		      	(*current_liboctave_error_handler) 
 		      	  ("unrecoverable error in dpbcon");
@@ -5317,17 +5317,17 @@ SparseMatrix::bsolve (MatrixType &mattyp
 		  if (calc_cond)
 		    {
 		      char job = '1';
 		      Array<double> z (3 * nr);
 		      double *pz = z.fortran_vec ();
 		      Array<octave_idx_type> iz (nr);
 		      octave_idx_type *piz = iz.fortran_vec ();
 
-		      F77_XFCN (dpbcon, DGBCON, 
+		      F77_XFCN (dpbcon, DPBCON, 
 		      	(F77_CONST_CHAR_ARG2 (&job, 1),
 		      	 nr, n_lower, tmp_data, ldm,
 		      	 anorm, rcond, pz, piz, err
 		      	 F77_CHAR_ARG_LEN (1)));
 
 		      if (f77_exception_encountered)
 		      	(*current_liboctave_error_handler) 
 		      	  ("unrecoverable error in dpbcon");
@@ -5490,17 +5490,17 @@ SparseMatrix::bsolve (MatrixType &mattyp
 		{
 		  if (calc_cond)
 		    {
 		      Array<double> z (3 * nr);
 		      double *pz = z.fortran_vec ();
 		      Array<octave_idx_type> iz (nr);
 		      octave_idx_type *piz = iz.fortran_vec ();
 
-		      F77_XFCN (dpbcon, DGBCON, 
+		      F77_XFCN (dpbcon, DPBCON, 
 		      	(F77_CONST_CHAR_ARG2 (&job, 1),
 		      	 nr, n_lower, tmp_data, ldm,
 		      	 anorm, rcond, pz, piz, err
 		      	 F77_CHAR_ARG_LEN (1)));
 
 		      if (f77_exception_encountered)
 		      	(*current_liboctave_error_handler) 
 		      	  ("unrecoverable error in dpbcon");
