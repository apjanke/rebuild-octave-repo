# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@gmail.com>
# Date 1313101045 18000
#      Thu Aug 11 17:17:25 2011 -0500
# Node ID 5a5cb2a4b71d72156f2c1770bc33fefecf789b07
# Parent  d1db86336a4905e255b43d64df66fd4648b9cb4e
cellfun: Fix a regression for function handles to overloaded functions

diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -53,16 +53,18 @@ along with Octave; see the file COPYING.
 #include "ov-int16.h"
 #include "ov-int32.h"
 #include "ov-int64.h"
 #include "ov-uint8.h"
 #include "ov-uint16.h"
 #include "ov-uint32.h"
 #include "ov-uint64.h"
 
+#include "ov-fcn-handle.h"
+
 static octave_value_list
 get_output_list (octave_idx_type count, octave_idx_type nargout,
                  const octave_value_list& inputlist,
                  octave_value& func,
                  octave_value& error_handler)
 {
   octave_value_list tmp = func.do_multi_index_op (nargout, inputlist);
 
@@ -354,21 +356,32 @@ cellfun (\"factorial\", @{-1,2@}, 'Error
     {
 
       // The following is an optimisation because the symbol table can
       // give a more specific function class, so this can result in
       // fewer polymorphic function calls as the function gets called
       // for each value of the array.
       if (! symbol_table_lookup )
         {
-          octave_value f = symbol_table::find_function ( func.function_value ()
+          if (func.is_function_handle ())
+            {
+              octave_fcn_handle* f = func.fcn_handle_value ();
+
+              // Overloaded function handles need to check the type of
+              // the arguments for each element of the array, so they
+              // cannot be optimised this way.
+              if (f -> is_overloaded ())
+                goto nevermind;
+            }
+          octave_value f = symbol_table::find_function (func.function_value ()
                                                          -> name ());
           if (f.is_defined ())
             func = f;
         }
+      nevermind:
 
       unwind_protect frame;
       frame.protect_var (buffer_error_messages);
 
       bool uniform_output = true;
       octave_value error_handler;
 
       while (nargin > 3 && args(nargin-2).is_string())
