# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1322583821 18000
#      Tue Nov 29 11:23:41 2011 -0500
# Node ID cf8cd43cdeb32d19bb0664e38d3a80fabe417083
# Parent  cb15c5185b6a3ce8dd85765457be07f79fb1c705
cellfun: further optimisations for the string vs function handle cases

diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -442,20 +442,38 @@ cellfun (\"factorial\", @{-1,2@}, 'Error
 
               // Overloaded function handles need to check the type of
               // the arguments for each element of the array, so they
               // cannot be optimised this way.
 
               if (f -> is_overloaded ())
                 goto nevermind;
             }
-          octave_value f = symbol_table::find_function (func.function_value ()
-                                                         -> name ());
+
+          std::string name = func.function_value () -> name ();
+          octave_value f = symbol_table::find_function (name);
+
           if (f.is_defined ())
-            func = f;
+            {
+              //Except for these two which are special cases...
+              if (name != "size" && name != "class")
+                {
+                  //Try first the optimised code path for built-in functions
+                  octave_value_list tmp_args = args;
+                  tmp_args(0) = name;
+                  retval = try_cellfun_internal_ops (tmp_args, nargin);
+                  if (error_state || ! retval.empty ())
+                    return retval;
+                }
+
+              //Okay, we tried, doesn't work, let's do the best we can
+              //instead and avoid polymorphic calls for each element of
+              //the array.
+              func = f;
+            }
         }
 
     nevermind:
 
       bool uniform_output = true;
       octave_value error_handler;
       
       get_mapper_fun_options (args, nargin, uniform_output, error_handler);
