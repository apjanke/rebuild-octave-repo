# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1548233049 28800
#      Wed Jan 23 00:44:09 2019 -0800
# Branch stable
# Node ID a7502ba98540958d15db5dbcdcc422c603176154
# Parent  8af641520aa94b9589688d9c6d43e4287d95371a
javachk.m: overhaul function and doc string for compatibility with Matlab

* javachk.m: Always return an error structure for compatibility with Matlab.
Return a valid error structure for any unrecognized Java feature name.
Include the optional second argument in the generated error message. Rewrite
the doc string and BIST tests to match the new behavior.

diff --git a/scripts/java/javachk.m b/scripts/java/javachk.m
--- a/scripts/java/javachk.m
+++ b/scripts/java/javachk.m
@@ -1,8 +1,9 @@
+## Copyright (C) 2019 Mike Miller
 ## Copyright (C) 2014-2019 Philip Nienhuis
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software: you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation, either version 3 of the License, or
 ## (at your option) any later version.
@@ -13,86 +14,71 @@
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} javachk (@var{feature})
-## @deftypefnx {} {} javachk (@var{feature}, @var{component})
+## @deftypefnx {} {} javachk (@var{feature}, @var{caller})
 ## @deftypefnx {} {@var{msg} =} javachk (@dots{})
-## Check for the presence of the Java @var{feature} in the current session
-## and print or return an error message if it is not.
+## Check for the presence of the Java @var{feature} in the current session.
+## Return an error structure if @var{feature} is not available, not enabled,
+## or not recognized.
 ##
-## Possible features are:
+## Possible recognized features are:
 ##
 ## @table @asis
 ## @item @nospell{@qcode{"awt"}}
 ## Abstract Window Toolkit for GUIs.
 ##
 ## @item @qcode{"desktop"}
 ## Interactive desktop is running.
 ##
 ## @item @qcode{"jvm"}
 ## Java Virtual Machine.
 ##
 ## @item @qcode{"swing"}
 ## Swing components for lightweight GUIs.
 ## @end table
 ##
-## If @var{feature} is supported and
-##
-## @itemize @bullet
-## @item
-## no output argument is requested:
-##
-## Return an empty string
-##
-## @item
-## an output argument is requested:
-##
-## Return a struct with fields @qcode{"feature"} and @qcode{"identifier"}
-## both empty
-## @end itemize
+## If @var{feature} is not supported, a scalar struct with field
+## @qcode{"message"} and @qcode{"identifier"} is returned.  The field
+## @qcode{"message"} contains an error message mentioning @var{feature} as
+## well as the optional user-specified @var{caller}.  This structure is
+## suitable for passing in to the @code{error} function.
 ##
-## If @var{feature} is not supported and
-##
-## @itemize @bullet
-## @item
-## no output argument is requested:
-##
-## Emit an error message
-##
-## @item
-## an output argument is requested:
-##
-## Return a struct with field @qcode{"feature"} set to @var{feature} and field
-## @qcode{"identifier"} set to @var{component}
-## @end itemize
-##
-## The optional input @var{component} will be used in place of @var{feature}
-## in any error messages for greater specificity.
+## If @var{feature} is supported and available, an empty struct array is
+## returned with fields @qcode{"message"} and @qcode{"identifier"}.
 ##
 ## @code{javachk} determines if specific Java features are available in an
 ## Octave session.  This function is provided for scripts which may alter
-## their behavior based on the availability of Java.  The feature
-## @qcode{"desktop"} is never available as Octave has no Java-based desktop.
-## Other features may be available if Octave was compiled with the Java
-## Interface and Java is installed.
+## their behavior based on the availability of Java or specific Java runtime
+## features.
+##
+## Compatibility Note: The feature @qcode{"desktop"} is never available since
+## Octave has no Java-based desktop.
 ##
 ## @seealso{usejava, error}
 ## @end deftypefn
 
 ## Author: Philip Nienhuis <prnienhuis at users.sf.net>
 ## Created: 2014-04-19
 
-function msg = javachk (feature, component = "")
+function msg = javachk (feature, caller = "")
 
-  msg = "";
+  if (nargin < 1 || nargin > 2)
+    print_usage ();
+  elseif (! ischar (feature))
+    error ("javachk: FEATURE must be a string");
+  elseif (! ischar (caller))
+    error ("javachk: CALLER must be a string");
+  endif
+
   chk = false;
   switch (feature)
     ## For each feature, try methods() on a Java class of a feature
     case "awt"
       try
         dum = methods ("java.awt.Frame");
         chk = true;
       end_try_catch
@@ -104,45 +90,52 @@ function msg = javachk (feature, compone
         chk = true;
       end_try_catch
     case "swing"
       try
         dum = methods ("javax.swing.Popup");
         chk = true;
       end_try_catch
     otherwise
-      error ("javachk: unrecognized FEATURE '%s', can be one of 'awt'|'desktop'|'jvm'|'swing'\n", feature);
+      ## For compatibility, unrecognized feature is the same as disabled feature
   endswitch
 
+  if (isempty (caller))
+    caller = "this function";
+  endif
+
+  msg = struct ("message", "", "identifier", "");
   if (! chk)
-    ## Desired feature not present
-    if (nargout >= 1)
-      msg.message = sprintf ("javachk: %s is not supported", feature);
-      msg.identifier = component;
-    else
-      if (! isempty (component))
-        err = sprintf ("javachk: %s is not supported\n", component);
-      else
-        err = sprintf ("javachk: %s is not supported\n", feature);
-      endif
-      error (err);
-    endif
+    msg.message = sprintf (["javachk: %s is not supported, Java feature " ...
+                            "\"%s\" is not available"], caller, feature);
+    msg.identifier = "Octave:javachk:feature-not-available";
+  endif
+
+  if (isempty (msg.message))
+    ## Compatability: Matlab returns a 0x1 empty struct when javachk passes
+    msg = resize (msg, 0, 1);
   endif
 
 endfunction
 
 
-%!error <javachk: desktop is not supported> javachk ("desktop")
-%!error <Java DESKTOP is not supported> javachk ("desktop", "Java DESKTOP")
 %!test
 %! msg = javachk ("desktop");
-%! assert (msg.message, "javachk: desktop is not supported");
-%! assert (msg.identifier, "");
+%! assert (msg.message, "javachk: this function is not supported, Java feature \"desktop\" is not available");
+%! assert (msg.identifier, "Octave:javachk:feature-not-available");
 %!test
 %! msg = javachk ("desktop", "Java DESKTOP");
-%! assert (msg.message, "javachk: desktop is not supported");
-%! assert (msg.identifier, "Java DESKTOP");
+%! assert (msg.message, "javachk: Java DESKTOP is not supported, Java feature \"desktop\" is not available");
+%! assert (msg.identifier, "Octave:javachk:feature-not-available");
+%!test
+%! msg = javachk ("nosuchfeature");
+%! assert (msg.message, "javachk: this function is not supported, Java feature \"nosuchfeature\" is not available");
+%! assert (msg.identifier, "Octave:javachk:feature-not-available");
 
 %!testif HAVE_JAVA; usejava ("jvm")
-%! assert (javachk ("jvm"), "");
+%! stnul = resize (struct ("message", "", "identifier", ""), 0, 1);
+%! assert (javachk ("jvm"), stnul);
 
 ## Test input validation
-%!error <javachk: unrecognized FEATURE 'foobar'> javachk ("foobar")
+%!error javachk ()
+%!error javachk (1)
+%!error javachk ("jvm", 2)
+%!error javachk ("jvm", "feature", "ok")
