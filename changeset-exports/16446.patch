# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365279272 14400
#      Sat Apr 06 16:14:32 2013 -0400
# Node ID 4b3a4bf8569bba368c100618bf30b768e0b39f1d
# Parent  3f8d3fc907afaa36b2c8c58ebde45f51a71a102c
improve encapsulation of command window object

* terminal-dockwidget.h, terminal-dockwidget.cc
(terminal_dock_widget::terminal): New data member.
(terminal_dock_widget::terminal_dock_widget): Delete QTerminal
argument.  Initialize QTerminal object here.
Connect terminal_dock_widget::notice_settings_signal to
QTerminal::notice_settings.
Connect terminal_dock_widget::relay_command_signal to
Qterminal::relay_command.
Connect terminal_dock_widget::copyClipboard_signal to
Qterminal::copyClipboard.
Connect terminal_dock_widget::pasteClipboard_signal to
Qterminal::pasteClipboard.
(terminal_dock_widget::connect_visibility_changed,
terminal_dock_widget::focus, terminal_dock_widget::handle_visibility,
terminal_dock_widget::notice_settings,
terminal_dock_widget::relay_command,
terminal_dock_widget::copyClipboard,
terminal_dock_widget::pasteClipboard): New functions.
terminal_dock_widget::notice_settings_signal,
terminal_dock_widget::relay_command_signal,
terminal_dock_widget::copyClipboard_signal,
terminal_dock_widget::pasteClipboard_signal): New signals.

* main-window.h, main-window.cc (main_window::command_window): Rename
from main_window::_terminal_dock_widget.  Don't use a pointer.  Change
all uses.
(main_window::main_window): Initialize it here.
(main_window::~main_window): Don't delete _terminal_dock_widget.
(main_window::relay_command_signal
main_window::focus_command_window_signal): New signals.
(main_window::handle_command_double_clicked): Emit
relay_command_signal, and focus_command_window_signal signals
instead of calling focus_command_window.
(main_window::focus_command_window): Emit
focus_command_window_signal singal instead of performing
actions on _terminal_dock_widget object directly.
(main_window::handle_command_window_visible): Delete.
(main_window::connect_visibility_changed): Call
command_window.connect_visibility_changed instead of performing
actions here.
(main_window::construct): Don't create _terminal_dock_widget.
Adapt signal/slot connections for new command_window object.

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -50,17 +50,17 @@ along with Octave; see the file COPYING.
 #include "toplev.h"
 #include "version.h"
 
 #include "cmd-edit.h"
 #include "cmd-hist.h"
 #include "oct-env.h"
 
 main_window::main_window (QWidget *p)
-  : QMainWindow (p)
+  : QMainWindow (p), command_window (this)
 {
   // We have to set up all our windows, before we finally launch octave.
   construct ();
 }
 
 main_window::~main_window ()
 {
   // Clean up all dynamically created objects to ensure they are
@@ -73,19 +73,16 @@ main_window::~main_window ()
   octave_link::connect_link (0);
   delete _octave_qt_link;
 
 #ifdef HAVE_QSCINTILLA
   if (_file_editor)
     delete _file_editor;
 #endif
 
-  if (_terminal_dock_widget)
-    delete _terminal_dock_widget;
-
   if (_status_bar)
     delete _status_bar;
 
   if (_documentation_dock_widget)
     delete _documentation_dock_widget;
 
   if (_files_dock_widget)
     delete _files_dock_widget;
@@ -157,19 +154,20 @@ main_window::handle_clear_workspace_requ
 
 void
 main_window::handle_clear_history_request (void)
 {
   octave_link::post_event (this, &main_window::clear_history_callback);
 }
 
 void
-main_window::handle_command_double_clicked (const QString&)
+main_window::handle_command_double_clicked (const QString& command)
 {
-  focus_command_window ();
+  emit relay_command_signal (command);
+  emit focus_command_window_signal ();
 }
 
 void
 main_window::open_online_documentation_page ()
 {
   QDesktopServices::openUrl (QUrl ("http://gnu.org/software/octave/doc/interpreter"));
 }
 
@@ -342,30 +340,19 @@ main_window::accept_directory_line_edit 
 
   int index = _current_directory_combo_box->findText (dir);
 
   if (index < 0)
     set_current_working_directory (dir);
 }
 
 void
-main_window::focus_command_window ()
+main_window::focus_command_window (void)
 {
-  if (!_terminal_dock_widget->isVisible ())
-    {
-      _terminal_dock_widget->setVisible (true);
-    }
-
-  _terminal_dock_widget->setFocus ();
-  _terminal_dock_widget->activateWindow ();
-  _terminal_dock_widget->raise ();
-
-  _terminal_dock_widget->widget ()->setFocus ();
-  _terminal_dock_widget->widget ()->activateWindow ();
-  _terminal_dock_widget->widget ()->raise ();
+  emit focus_command_window_signal ();
 }
 
 void
 main_window::focus_command_history ()
 {
   if (!_history_dock_widget->isVisible ())
     {
       _history_dock_widget->setVisible (true);
@@ -421,24 +408,16 @@ main_window::focus_documentation ()
     }
 
   _documentation_dock_widget->setFocus ();
   _documentation_dock_widget->activateWindow ();
   _documentation_dock_widget->raise ();
 }
 
 void
-main_window::handle_command_window_visible (bool visible)
-{
-  // if widget is changed to visible and is not floating
-  if (visible && !_terminal_dock_widget->isFloating ())
-    focus_command_window ();
-}
-
-void
 main_window::handle_command_history_visible (bool visible)
 {
   // if changed to visible and widget is not floating
   if (visible && !_history_dock_widget->isFloating ())
     focus_command_history ();
 }
 
 void
@@ -632,18 +611,18 @@ main_window::write_settings ()
 }
 
 
 // Connecting the signals emitted when the visibility of a widget changes.
 // This has to be done after the window is shown (see octave-gui.cc)
 void
 main_window::connect_visibility_changed ()
 {
-  connect (_terminal_dock_widget, SIGNAL (visibilityChanged (bool)),
-           this,                  SLOT (handle_command_window_visible (bool)));
+  command_window.connect_visibility_changed ();
+
   connect (_workspace_view,       SIGNAL (visibilityChanged (bool)),
            this,                  SLOT (handle_workspace_visible (bool)));
   connect (_history_dock_widget,  SIGNAL (visibilityChanged (bool)),
            this,                  SLOT (handle_command_history_visible (bool)));
   connect (_files_dock_widget,    SIGNAL (visibilityChanged (bool)),
            this,                  SLOT (handle_current_directory_visible (bool)));
 #ifdef HAVE_QSCINTILLA
   connect (_file_editor,          SIGNAL (visibilityChanged (bool)),
@@ -692,22 +671,16 @@ main_window::construct ()
   _current_directory_combo_box->setMaxCount (current_directory_max_count);
 
   QToolButton *current_directory_tool_button = new QToolButton (this);
   current_directory_tool_button->setIcon (QIcon(":/actions/icons/search.png"));
 
   QToolButton *current_directory_up_tool_button = new QToolButton (this);
   current_directory_up_tool_button->setIcon (QIcon(":/actions/icons/up.png"));
 
-  // Octave Terminal subwindow.
-  QTerminal *terminal = new QTerminal (this);
-  terminal->setObjectName ("OctaveTerminal");
-  terminal->setFocusPolicy (Qt::StrongFocus);
-  _terminal_dock_widget = new terminal_dock_widget (terminal, this);
-
   // Create and set the central widget.  QMainWindow takes ownership of
   // the widget (pointer) so there is no need to delete the object upon
   // destroying this main_window.
   QWidget *dummyWidget = new QWidget ();
   dummyWidget->setObjectName ("CentralDummyWidget");
   dummyWidget->resize (10, 10);
   dummyWidget->setSizePolicy (QSizePolicy::Minimum, QSizePolicy::Minimum);
   dummyWidget->hide ();
@@ -1031,18 +1004,18 @@ main_window::construct ()
            this,                        SLOT   (open_bug_tracker_page ()));
   connect (octave_forge_action,         SIGNAL (triggered ()),
            this,                        SLOT   (open_octave_forge_page ()));
   connect (agora_action,                SIGNAL (triggered ()),
            this,                        SLOT   (open_agora_page ()));
   connect (about_octave_action,         SIGNAL (triggered ()),
            this,                        SLOT   (show_about_octave ()));
   connect (show_command_window_action,  SIGNAL (toggled (bool)),
-           _terminal_dock_widget,       SLOT   (setVisible (bool)));
-  connect (_terminal_dock_widget,       SIGNAL (active_changed (bool)),
+           &command_window,             SLOT   (setVisible (bool)));
+  connect (&command_window,             SIGNAL (active_changed (bool)),
            show_command_window_action,  SLOT   (setChecked (bool)));
   connect (show_workspace_action,       SIGNAL (toggled (bool)),
            _workspace_view,             SLOT   (setVisible (bool)));
   connect (_workspace_view,             SIGNAL (active_changed (bool)),
            show_workspace_action,       SLOT   (setChecked (bool)));
   connect (show_history_action,         SIGNAL (toggled (bool)),
            _history_dock_widget,        SLOT   (setVisible (bool)));
   connect (_history_dock_widget,        SIGNAL (active_changed (bool)),
@@ -1058,17 +1031,21 @@ main_window::construct ()
            show_editor_action,          SLOT   (setChecked (bool)));
 #endif
   connect (show_documentation_action,   SIGNAL (toggled (bool)),
            _documentation_dock_widget,  SLOT   (setVisible (bool)));
   connect (_documentation_dock_widget,  SIGNAL (active_changed (bool)),
            show_documentation_action,   SLOT   (setChecked (bool)));
 
   connect (command_window_action,       SIGNAL (triggered ()),
-           this,                        SLOT (focus_command_window ()));
+           &command_window,             SLOT (focus ()));
+
+  connect (this, SIGNAL (focus_command_window_signal ()),
+           &command_window, SLOT (focus ()));
+
   connect (workspace_action,            SIGNAL (triggered ()),
            this,                        SLOT (focus_workspace ()));
   connect (history_action,              SIGNAL (triggered ()),
            this,                        SLOT (focus_command_history ()));
   connect (file_browser_action,         SIGNAL (triggered ()),
            this,                        SLOT (focus_current_directory ()));
   connect (editor_action,               SIGNAL (triggered ()),
            this,                        SLOT (focus_editor ()));
@@ -1079,45 +1056,45 @@ main_window::construct ()
 
   connect (reset_windows_action,        SIGNAL (triggered ()),
            this,                        SLOT   (reset_windows ()));
 #ifdef HAVE_QSCINTILLA
   connect (this,                        SIGNAL (settings_changed (const QSettings *)),
            _file_editor,                SLOT   (notice_settings (const QSettings *)));
 #endif
   connect (this,                        SIGNAL (settings_changed (const QSettings *)),
-           terminal,                    SLOT   (notice_settings (const QSettings *)));
+           &command_window,             SLOT   (notice_settings (const QSettings *)));
   connect (this,                        SIGNAL (settings_changed (const QSettings *)),
            _files_dock_widget,          SLOT   (notice_settings (const QSettings *)));
   connect (this,                        SIGNAL (settings_changed (const QSettings *)),
            this,                        SLOT   (notice_settings (const QSettings *)));
   connect (_files_dock_widget,          SIGNAL (open_file (QString)),
            this,                        SLOT   (open_file (QString)));
   connect (_files_dock_widget,          SIGNAL (displayed_directory_changed(QString)),
            this,                        SLOT   (set_current_working_directory(QString)));
   connect (_history_dock_widget,        SIGNAL (information (QString)),
            this,                        SLOT   (report_status_message (QString)));
   connect (_history_dock_widget,        SIGNAL (command_double_clicked (const QString&)),
            this,                        SLOT   (handle_command_double_clicked (const QString&)));
-  connect (_history_dock_widget,        SIGNAL (command_double_clicked (const QString&)),
-           terminal,                    SLOT   (relay_command (const QString&)));
+  connect (this,                        SIGNAL (relay_command_signal (const QString&)),
+           &command_window,             SLOT   (relay_command (const QString&)));
   connect (save_workspace_action,       SIGNAL (triggered ()),
            this,                        SLOT   (handle_save_workspace_request ()));
   connect (load_workspace_action,       SIGNAL (triggered ()),
            this,                        SLOT   (handle_load_workspace_request ()));
   connect (clear_workspace_action,      SIGNAL (triggered ()),
            this,                        SLOT   (handle_clear_workspace_request ()));
   connect (current_directory_tool_button, SIGNAL (clicked ()),
            this,                        SLOT   (browse_for_directory ()));
   connect (current_directory_up_tool_button, SIGNAL (clicked ()),
            this,                        SLOT   (change_directory_up ()));
   connect (copy_action,                 SIGNAL (triggered()),
-           terminal,                    SLOT   (copyClipboard ()));
+           &command_window,             SLOT   (copyClipboard ()));
   connect (paste_action,                SIGNAL (triggered()),
-           terminal,                    SLOT   (pasteClipboard ()));
+           &command_window,             SLOT   (pasteClipboard ()));
   connect (_current_directory_combo_box, SIGNAL (activated (QString)),
            this,                        SLOT (set_current_working_directory (QString)));
   connect (_current_directory_line_edit, SIGNAL (returnPressed ()),
            this,                        SLOT (accept_directory_line_edit ()));
   connect (_debug_continue,             SIGNAL (triggered ()),
            this,                        SLOT (debug_continue ()));
   connect (_debug_step_into,            SIGNAL (triggered ()),
            this,                        SLOT (debug_step_into ()));
@@ -1128,22 +1105,22 @@ main_window::construct ()
   connect (_debug_quit,                 SIGNAL (triggered ()),
            this,                        SLOT (debug_quit ()));
 
   connect (clear_command_history,       SIGNAL (triggered ()),
            this,                        SLOT (handle_clear_history_request ()));
 
   setWindowTitle ("Octave");
   setDockOptions(QMainWindow::AnimatedDocks | QMainWindow::AllowNestedDocks | QMainWindow::AllowTabbedDocks);
-  addDockWidget (Qt::RightDockWidgetArea, _terminal_dock_widget);
+  addDockWidget (Qt::RightDockWidgetArea, &command_window);
   addDockWidget (Qt::RightDockWidgetArea, _documentation_dock_widget);
-  tabifyDockWidget(_terminal_dock_widget,_documentation_dock_widget);
+  tabifyDockWidget (&command_window, _documentation_dock_widget);
 #ifdef HAVE_QSCINTILLA
   addDockWidget (Qt::RightDockWidgetArea, _file_editor);
-  tabifyDockWidget(_terminal_dock_widget,_file_editor);
+  tabifyDockWidget (&command_window, _file_editor);
 #endif
   addDockWidget (Qt::LeftDockWidgetArea, _files_dock_widget);
   addDockWidget (Qt::LeftDockWidgetArea, _workspace_view);
   addDockWidget (Qt::LeftDockWidgetArea, _history_dock_widget);
 
   int win_x = QApplication::desktop()->width();
   int win_y = QApplication::desktop()->height();
   if (win_x > 960)
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -55,30 +55,35 @@ along with Octave; see the file COPYING.
 
 /**
  * \class MainWindow
  *
  * Represents the main window.
  */
 class main_window : public QMainWindow
 {
-  Q_OBJECT public:
-  main_window (QWidget * parent = 0);
+  Q_OBJECT
+
+public:
+
+  main_window (QWidget *parent = 0);
+
   ~main_window ();
 
 signals:
   void settings_changed (const QSettings *);
+  void relay_command_signal (const QString&);
+  void focus_command_window_signal (void);
 
 public slots:
   void report_status_message (const QString& statusMessage);
   void handle_save_workspace_request ();
   void handle_load_workspace_request ();
   void handle_clear_workspace_request ();
   void handle_clear_history_request (void);
-  void handle_command_double_clicked (const QString& command);
   void new_file ();
   void open_file ();
   void open_file (const QString& file_name);
   void open_online_documentation_page ();
   void open_bug_tracker_page ();
   void open_octave_forge_page ();
   void open_agora_page ();
   void process_settings_dialog_request ();
@@ -89,23 +94,24 @@ public slots:
   void update_workspace (void);
 
   void change_directory (const QString& dir);
   void browse_for_directory (void);
   void set_current_working_directory (const QString& dir);
   void change_directory_up (void);
   void accept_directory_line_edit (void);
 
-  void focus_command_window ();
+  void handle_command_double_clicked (const QString& command);
+
+  void focus_command_window (void);
   void focus_command_history ();
   void focus_current_directory ();
   void focus_workspace ();
   void focus_editor ();
   void focus_documentation ();
-  void handle_command_window_visible (bool);
   void handle_command_history_visible (bool);
   void handle_current_directory_visible (bool);
   void handle_workspace_visible (bool);
   void handle_editor_visible (bool);
   void handle_documentation_visible (bool);
 
   void handle_enter_debugger (void);
   void handle_exit_debugger (void);
@@ -143,16 +149,18 @@ private:
   void debug_step_over_callback (void);
 
   void debug_step_out_callback (void);
 
   void debug_quit_callback (void);
 
   void exit_callback (void);
 
+  terminal_dock_widget command_window;
+
 #ifdef HAVE_QSCINTILLA
   file_editor_interface *   _file_editor;
 #endif
   QMenu *                   _debug_menu;
 
   QAction *                 _debug_continue;
   QAction *                 _debug_step_into;
   QAction *                 _debug_step_over;
@@ -161,17 +169,16 @@ private:
 
   // Data models.
   workspace_model *         _workspace_model;
 
   // Dock widgets.
   workspace_view *          _workspace_view;
   history_dock_widget *     _history_dock_widget;
   files_dock_widget *       _files_dock_widget;
-  terminal_dock_widget *    _terminal_dock_widget;
   documentation_dock_widget*_documentation_dock_widget;
 
   // Toolbars.
   QStatusBar *              _status_bar;
   QComboBox *               _current_directory_combo_box;
   static const int        current_directory_width       = 300;
   static const int        current_directory_max_visible = 16;
   static const int        current_directory_max_count   = 16;
diff --git a/libgui/src/terminal-dockwidget.cc b/libgui/src/terminal-dockwidget.cc
--- a/libgui/src/terminal-dockwidget.cc
+++ b/libgui/src/terminal-dockwidget.cc
@@ -1,10 +1,11 @@
 /*
 
+Copyright (C) 2013 John W. Eaton
 Copyright (C) 2011-2012 Jacob Dawid
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
@@ -21,21 +22,96 @@ along with Octave; see the file COPYING.
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "terminal-dockwidget.h"
 
-terminal_dock_widget::terminal_dock_widget (QTerminal *terminal, QWidget *p)
-  : octave_dock_widget (p)
+terminal_dock_widget::terminal_dock_widget (QWidget *p)
+  : octave_dock_widget (p), terminal (p)
 {
+  terminal.setObjectName ("OctaveTerminal");
+  terminal.setFocusPolicy (Qt::StrongFocus);
+
   setObjectName ("TerminalDockWidget");
   setWindowIcon (QIcon(":/actions/icons/logo.png"));
   setWindowTitle (tr ("Command Window"));
-  setWidget (terminal);
+  setWidget (&terminal);
+
+  connect (this, SIGNAL (visibilityChanged (bool)),
+           this, SLOT (handle_visibility (bool)));
+
+  // topLevelChanged is emitted when floating property changes (floating
+  // = true)
+  connect (this, SIGNAL (topLevelChanged (bool)),
+           this, SLOT (top_level_changed (bool)));
+
+  // Forward signals to QTerminal widget.
+
+  connect (this, SIGNAL (notice_settings_signal (const QSettings *)),
+           &terminal, SLOT (notice_settings (const QSettings *)));
 
-  connect (this, SIGNAL (visibilityChanged (bool)), this, SLOT (handle_visibility_changed (bool)));
-  // topLevelChanged is emitted when floating property changes (floating = true)
-  connect (this, SIGNAL (topLevelChanged(bool)), this, SLOT(top_level_changed(bool)));
+  connect (this, SIGNAL (relay_command_signal (const QString&)),
+           &terminal, SLOT (relay_command (const QString&)));
+
+  connect (this, SIGNAL (copyClipboard_signal (void)),
+           &terminal, SLOT (copyClipboard (void)));
+
+  connect (this, SIGNAL (pasteClipboard_signal (void)),
+           &terminal, SLOT (pasteClipboard (void)));
+}
+
+void
+terminal_dock_widget::connect_visibility_changed (void)
+{
+  connect (this, SIGNAL (visibilityChanged (bool)),
+           this, SLOT (handle_visibility_changed (bool)));
 }
 
+void
+terminal_dock_widget::focus (void)
+{
+  if (! isVisible ())
+    setVisible (true);
+
+  setFocus ();
+  activateWindow ();
+  raise ();
+
+  widget ()->setFocus ();
+  widget ()->activateWindow ();
+  widget ()->raise ();
+}
+
+void
+terminal_dock_widget::handle_visibility (bool visible)
+{
+  // if widget is changed to visible and is not floating
+
+  if (visible && ! isFloating ())
+    focus ();
+}
+
+void
+terminal_dock_widget::notice_settings (const QSettings *settings)
+{
+  emit notice_settings_signal (settings);
+}
+
+void
+terminal_dock_widget::relay_command (const QString& command)
+{
+  emit relay_command_signal (command);
+}
+
+void
+terminal_dock_widget::copyClipboard (void)
+{
+  emit copyClipboard_signal ();
+}
+
+void
+terminal_dock_widget::pasteClipboard (void)
+{
+  emit pasteClipboard_signal ();
+}
diff --git a/libgui/src/terminal-dockwidget.h b/libgui/src/terminal-dockwidget.h
--- a/libgui/src/terminal-dockwidget.h
+++ b/libgui/src/terminal-dockwidget.h
@@ -1,10 +1,11 @@
 /*
 
+Copyright (C) 2013 John W. Eaton
 Copyright (C) 2011-2012 Jacob Dawid
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
@@ -18,27 +19,55 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifndef TERMINALDOCKWIDGET_H
 #define TERMINALDOCKWIDGET_H
 
+#include <QString>
+
 #include "QTerminal.h"
 #include "octave-dock-widget.h"
 
 class terminal_dock_widget : public octave_dock_widget
 {
   Q_OBJECT
-  public:
-  terminal_dock_widget (QTerminal *terminal, QWidget *parent = 0);
+
+public:
+
+  terminal_dock_widget (QWidget *parent = 0);
+
+  void connect_visibility_changed (void);
 
 signals:
 
 public slots:
 
-protected:
+  void focus (void);
+
+  void handle_visibility (bool visible);
+
+  void notice_settings (const QSettings *settings);
+
+  void relay_command (const QString& command);
+
+  void copyClipboard (void);
+
+  void pasteClipboard (void);
 
+signals:
+
+  void notice_settings_signal (const QSettings *settings); 
+
+  void relay_command_signal (const QString& command);
+
+  void copyClipboard_signal (void);
+
+  void pasteClipboard_signal (void);
+
+private:
+
+  QTerminal terminal;
 };
 
-
 #endif // TERMINALDOCKWIDGET_H
