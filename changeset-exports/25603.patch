# HG changeset patch
# User Rik <rik@octave.org>
# Date 1531498586 25200
#      Fri Jul 13 09:16:26 2018 -0700
# Node ID e55fb9685803d95e1723d5274ce765ba0b11e2df
# Parent  8f8d3fef29a830a0f802781fba463f96f1703f40
num2str.m: Ensure Matlab compatibility for numbers greater than 1e15 (bug #36133)

* num2str.m: Check if numbers are greater than 1e15 and use floating point
format rather than integer format.  Update BIST tests for bug #36133 to
be regressions if they fail.

diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -99,29 +99,27 @@ function retval = num2str (x, arg)
       if (isnumeric (x))
         ## Set up a suitable format string while ignoring Inf/NaN entries
         valid = isfinite (x(:));
         ndgt = floor (log10 (max (abs (x(valid)))));
         if (isempty (ndgt) || ndgt == -Inf)
           ndgt = 0;  # All Inf or all zero array
         endif
 
-        if (any (x(valid) != fix (x(valid))))
+        if (ndgt > 15 || any (x(valid) != fix (x(valid))))
           ## Floating point input
           ndgt = max (ndgt + 5, 5);   # Keep at least 5 significant digits
           ndgt = min (ndgt, 16);      # Cap significant digits at 16
           fmt = sprintf ("%%%d.%dg", ndgt+7, ndgt);
         else
           ## Integer input
           ndgt += 3;
           if (any (! valid))
             ndgt = max (ndgt, 5);     # Allow space for Inf/NaN
           endif
-          ## FIXME: Integers must be masked to show only 16 significant digits
-          ##        See test case for bug #36133 below
           fmt = sprintf ("%%%d.0f", ndgt);
         endif
       else
         ## Logical input
         fmt = "%3d";
       endif
     endif
     fmt = do_string_escapes (fmt);  # required now that '\n' is interpreted.
@@ -236,24 +234,24 @@ endfunction
 %! assert (rows (y) == 3);
 %! assert (y, ["8+0i   1+0i   6+0i  -8+2i  -1+0i  -6+0i"
 %!             "3+0i   5+0i   7+0i  -3+0i  -5+0i  -7+0i"
 %!             "4+0i   9+0i   2+0i  -4+0i  -9+0i  -2+0i"]);
 
 ## Clear shared variables
 %!shared
 
-## FIXME: Integers greater than 1e15 should switch to exponential notation
-%!assert <36133> (num2str (1e15), "1000000000000000")
-%!assert <36133> (num2str (1e16), "1e+16")
+## Integers greater than 1e15 should switch to exponential notation
+%!assert <*36133> (num2str (1e15), "1000000000000000")
+%!assert <*36133> (num2str (1e16), "1e+16")
 ## Even exact integers in IEEE notation should use exponential notation
-%!assert <36133> (num2str(2^512), "1.34078079299426e+154");
+%!assert <*36133> (num2str(2^512), "1.34078079299426e+154")
 ## Mixed integer/floating point arrays
-%!assert <36133> (num2str ([2.1, 1e23, pi]),
-%!                         "2.1  9.999999999999999e+22      3.141592653589793")
+%!assert <*36133> (num2str ([2.1, 1e23, pi]),
+%!                 "2.1  9.999999999999999e+22      3.141592653589793")
 
 ## Test for extra rows generated from newlines in format
 %!assert <*44864> (rows (num2str (magic (3), "%3d %3d %3d\n")), 3)
 
 %!assert <*45174> (num2str ([65 66 67], "%s"), "ABC")
 
 %!error num2str ()
 %!error num2str (1, 2, 3)
