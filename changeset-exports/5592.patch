# HG changeset patch
# User dbateman
# Date 1137088522 0
#      Thu Jan 12 17:55:22 2006 +0000
# Node ID 61d6cebd243b45fa4dac6dcec17bfff16f17ce88
# Parent  e7e45fe274f1908687cc62a684c95a9c27df9379
[project @ 2006-01-12 17:55:22 by dbateman]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2006-01-12  David Bateman  <dbateman@free.fr>
+
+	* general/blkdiag.m: Compatible behavior for empty matrices 
+	* statistics/base/unidrnd.m: Documentation buglet.
+
 2005-12-14  David Bateman  <dbateman@free.fr>
 
 	* testfun/assert.m, testfun/fail.m, testfun/test.m, testfun/demo.m,
 	testfun/speed.m, testfun/example.m, Makefile.in: New files.
 
 	* Makefile.in (SUBDIRS): Include testfun.
 	* configure.in (AC_CONFIG_FILES): Include testfun/Makefile.
 
diff --git a/scripts/general/blkdiag.m b/scripts/general/blkdiag.m
--- a/scripts/general/blkdiag.m
+++ b/scripts/general/blkdiag.m
@@ -36,25 +36,22 @@ function retval = blkdiag (varargin)
     error ("blkdiag: all arguments must be numeric");
   endif
 
   ## Note: trailing singletons are automatically (correctly) ignored.
   if (! all (cellfun ("ndims", varargin) == 2))
     error ("all of the arguments to blkdiag must be two-dimensional matrices");
   endif
 
-  ## Ignore empty matrices.
-  notempty = ! cellfun ("isempty", varargin);
-  varargin = varargin(notempty);
-
   ## size is an option for cellfun, but it's a bit different from
   ## calling size directly.
   csz = cumsum ([0 0; (cell2mat (cellfun (@size, varargin')))], 1);
   retval = zeros (csz(end,:));
-  for p = 1:(length (notempty(notempty)))
+
+  for p = 1:nargin
     retval((csz(p,1)+1):csz(p+1,1),(csz(p,2)+1):csz(p+1,2)) = varargin{p};
   endfor
 
 endfunction
 
 # regular tests
 %!assert(blkdiag(1,ones(2),1),[1,0,0,0;0,1,1,0;0,1,1,0;0,0,0,1])
 %!assert(blkdiag([1,2],[3,4],[5,6]),[1,2,0,0,0,0;0,0,3,4,0,0;0,0,0,0,5,6])
diff --git a/scripts/statistics/base/unidrnd.m b/scripts/statistics/base/unidrnd.m
--- a/scripts/statistics/base/unidrnd.m
+++ b/scripts/statistics/base/unidrnd.m
@@ -14,18 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} unidrnd (@var{mx});
-## @deftypefn {Function File} {} unidrnd (@var{mx}, @var{v});
-## @deftypefn {Function File} {} unidrnd (@var{mx}, @var{m}, @var{n}, @dots{});
+## @deftypefnx {Function File} {} unidrnd (@var{mx}, @var{v});
+## @deftypefnx {Function File} {} unidrnd (@var{mx}, @var{m}, @var{n}, @dots{});
 ## Return random values from discrete uniform distribution, with maximum
 ## value(s) given by the integer @var{mx}, which may be a scalar or
 ## multidimensional array.
 ##
 ## If @var{mx} is a scalar, the size of the result is specified by
 ## the vector @var{v}, or by the optional arguments @var{m}, @var{n},
 ## @dots{}.  Otherwise, the size of the result is the same as the size
 ## of @var{mx}.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,35 @@
+2006-01-12  David Bateman  <dbateman@free.fr>
+
+	* help.cc (make_name_list): Add autoload functions to list of
+	available completions.
+	(simple_help): Add autoloaded functions to functions listed
+	(first_help_sentence): Avoid issue with single line help string 
+	that is not terminated in \n.
+	(Flookfor): Check for string match in the keyword/function, etc
+	name. Also look for string match in help of autoloaded functions.
+	Load oct-files to be able to access their help string.
+	* parse.y (string_vector autoloaded_functions (void)): New
+	function to list all autloaded functions.
+	(string_vector reverse_lookup_autoload (const std::string& nm)):
+	Reverse lookup function to match file to autoloaded functions.
+	* parse.h (autoloaded_functions, reverse_lookup_autoload): 
+	Declaration. 
+	
+	* oct-map.cc (maybe_delete_elements): New function.
+	* oct-map.h (maybe_delete_elements): Declare it.
+	* ov-struct.cc (octave_struct::subsref): Handle indexing empty
+	structure.
+	(octave_struct::subsasgn): If rhs is [], delete elements.
+	(octave_struct::print_raw): Handle printing empty structure. 	
+
+	* ls-mat5.cc (read_mat5_binary_element): Allow reading of sparse
+	elements when nnz doesn't equal nzmax. 
+	
 2006-01-10  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/sparse.cc (sparse_find): Use Sparse<T>::nonzero() 
 	rather than Sparse<T>::nnz(), due to possibility of overallocation
 	of memory.
 
 2005-12-14  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -402,17 +402,20 @@ make_name_list (void)
   string_vector lcl;
   if (top_level_sym_tab != curr_sym_tab)
     lcl = curr_sym_tab->name_list ();
   int lcl_len = lcl.length ();
 
   string_vector ffl = octave_fcn_file_name_cache::list_no_suffix ();
   int ffl_len = ffl.length ();
 
-  int total_len = key_len + fbi_len + glb_len + top_len + lcl_len + ffl_len;
+  string_vector afl = autoloaded_functions ();
+  int afl_len = afl.length ();
+
+  int total_len = key_len + fbi_len + glb_len + top_len + lcl_len + ffl_len + afl_len;
 
   string_vector list (total_len);
 
   // Put all the symbols in one big list.
 
   int j = 0;
   int i = 0;
   for (i = 0; i < key_len; i++)
@@ -428,16 +431,19 @@ make_name_list (void)
     list[j++] = top[i];
 
   for (i = 0; i < lcl_len; i++)
     list[j++] = lcl[i];
 
   for (i = 0; i < ffl_len; i++)
     list[j++] = ffl[i];
 
+  for (i = 0; i < afl_len; i++)
+    list[j++] = afl[i];
+
   return list;
 }
 
 void
 additional_help_message (std::ostream& os)
 {
   if (! Vsuppress_verbose_help_message)
     os << "\n\
@@ -537,16 +543,27 @@ simple_help (void)
 
 	  octave_stdout << "\n*** function files in " << dir << ":\n\n";
 
 	  names.qsort ();
 
 	  names.list_in_columns (octave_stdout);
 	}
     }
+
+  string_vector autoloaded = autoloaded_functions ();
+
+  if (! autoloaded.empty ())
+    {
+      octave_stdout << "\n*** autoloaded functions:\n\n";
+
+      autoloaded.qsort ();
+
+      autoloaded.list_in_columns (octave_stdout);
+    }
 }
 
 static int
 try_info (const std::string& nm)
 {
   int status = 0;
 
   OSSTREAM cmd_buf;
@@ -1133,18 +1150,18 @@ function file, the full name of the file
 // texinfo. Using regex might make this function much simpler.
 
 std::string 
 first_help_sentence (const std::string& h, bool short_sentence = true)
 {
   size_t pos = 0;
 
   if (looks_like_texinfo (h, pos))
-    {
-      // Get the parsed help string.
+    { 
+     // Get the parsed help string.
       pos = 0;
       OSSTREAM os;
       display_help_text (os, h);
       std::string h2 = os.str ();
 
       while (1)
 	{
 	  // Skip leading whitespace and get new line
@@ -1227,58 +1244,58 @@ first_help_sentence (const std::string& 
 	  // Make a lower case copy to simplify some tests
 	  std::string lower = line;
 	  transform (lower.begin (), lower.end (), lower.begin (), tolower);
 
 	  // Skip lines starting in "-" or "Usage"
 	  if (lower.find_first_of ('-') == 0
 	      || lower.substr (0, 5) == "usage")
 	    {
-	      pos = new_pos + 1;
+	      pos = (new_pos == NPOS ? NPOS : new_pos + 1);
 	      continue;
 	    }
 
 	  size_t line_pos = 0;
 	  size_t tmp_pos = 0;
 
 	  // chop " blah : "
 	  tmp_pos = line.find_first_not_of ("\t ", line.find_first_not_of 
 					     (_alphanum, line_pos));
 	  if (tmp_pos != NPOS && line.substr (tmp_pos, 1) == ":")
 	    line_pos = line.find_first_not_of ("\t ", tmp_pos + 1);
 
 	  if (line_pos == NPOS)
 	    {
-	      pos = new_pos + 1;
+	      pos = (new_pos == NPOS ? NPOS : new_pos + 1);
 	      continue;
 	    }
 
 	  // chop " function "
 	  if (lower.substr (line_pos, 8) == "function")
 	    line_pos =  line.find_first_not_of ("\t ", line_pos + 8);
 	  
 	  if (line_pos == NPOS)
 	    {
-	      pos = new_pos + 1;
+	      pos = (new_pos == NPOS ? NPOS : new_pos + 1);
 	      continue;
 	    }
 
 	  // chop " [a,b] = "
 	  if (line.substr (line_pos, 1) == "[")
 	    {
 	      tmp_pos = line.find_first_not_of 
 		("\t ", line.find_first_of ("]", line_pos) + 1);
 
 	      if (tmp_pos != NPOS && line.substr (tmp_pos, 1) == "=")
 		line_pos = line.find_first_not_of ("\t ",tmp_pos + 1);
 	    }
 
 	  if (line_pos == NPOS)
 	    {
-	      pos = new_pos + 1;
+	      pos = (new_pos == NPOS ? NPOS : new_pos + 1);
 	      continue;
 	    }
 
 	  // chop " a = "
 	  if (line.find_first_not_of (_alpha, line_pos) != line_pos)
 	    {
 	      tmp_pos = line.find_first_not_of ("\t ", line.find_first_not_of 
 						(_alphanum, line_pos));
@@ -1299,74 +1316,74 @@ first_help_sentence (const std::string& 
 						(_alphanum, line_pos));
 	      if (tmp_pos != NPOS && line.substr (tmp_pos, 1) == "(")
 		line_pos = line.find_first_not_of ("\t ", line.find_first_of 
 						   (")", tmp_pos) + 1);
 	    }
 
 	  if (line_pos == NPOS)
 	    {
-	      pos = new_pos + 1;
+	      pos = (new_pos == NPOS ? NPOS : new_pos + 1);
 	      continue;
 	    }
 
 	  // chop " ; "
 	  if (line.substr (line_pos, 1) == ":"
 	      || line.substr (line_pos, 1) == ";")
 	    line_pos = line.find_first_not_of ("\t ", line_pos + 1);
 
 	  if (line_pos == NPOS)
 	    {
-	      pos = new_pos + 1;
+	      pos = (new_pos == NPOS ? NPOS : new_pos + 1);
 	      continue;
 	    }
 
 	  // chop " BLAH "
 	  if (line.length () > line_pos + 2
 	      && line.find_first_of (_upper, line_pos) == line_pos
 	      && line.find_first_of (_upper, line_pos+1) == line_pos + 1)
 	    line_pos = line.find_first_not_of ("\t ", line.find_first_not_of 
 			(_upper + "0123456789_", line_pos));
 
 	  if (line_pos == NPOS)
 	    {
-	      pos = new_pos + 1;
+	      pos = (new_pos == NPOS ? NPOS : new_pos + 1);
 	      continue;
 	    }
 
 	  // chop " blah --- "
 	  tmp_pos = line.find_first_not_of ("\t ", line.find_first_not_of 
 					     (_alphanum, line_pos));
 	  if (tmp_pos != NPOS && line.substr (tmp_pos, 1) == "-")
 	    {
 	      tmp_pos = line.find_first_not_of ("-", tmp_pos);
 	      if (line.substr (tmp_pos, 1) == " "
 		  || line.substr (tmp_pos, 1) == "\t")
 		line_pos = line.find_first_not_of ("\t ", tmp_pos);
 	    }
 
 	  if (line_pos == NPOS)
 	    {
-	      pos = new_pos + 1;
+	      pos = (new_pos == NPOS ? NPOS : new_pos + 1);
 	      continue;
 	    }
 
 	  // chop " blah <TAB> "
 	  if (line.find_first_not_of (_alpha, line_pos) != line_pos)
 	    {
 	      tmp_pos = line.find_first_not_of (" ", line.find_first_not_of 
 						(_alphanum, line_pos));
 	      if (tmp_pos != NPOS && line.substr (tmp_pos, 1) == "\t")
 		line_pos = line.find_first_not_of ("\t ", line.find_first_of 
 						   (")", tmp_pos) + 1);
 	    }
 
 	  if (line_pos == NPOS)
 	    {
-	      pos = new_pos + 1;
+	      pos = (new_pos == NPOS ? NPOS : new_pos + 1);
 	      continue;
 	    }
 
 	  // chop " blah  "
 	  if (line.find_first_not_of (_alpha, line_pos) != line_pos)
 	    {
 	      tmp_pos = line.find_first_not_of (_alphanum, line_pos);
 
@@ -1375,29 +1392,29 @@ first_help_sentence (const std::string& 
 		      || line.substr (tmp_pos, 2) == "\t "
 		      || line.substr (tmp_pos, 2) == " \t"
 		      || line.substr (tmp_pos, 2) == " "))
 		line_pos = line.find_first_not_of ("\t ", tmp_pos);
 	    }
 
 	  if (line_pos == NPOS)
 	    {
-	      pos = new_pos + 1;
+	      pos = (new_pos == NPOS ? NPOS : new_pos + 1);
 	      continue;
 	    }
 
 	  // skip blah \n or \n blah
 	  // skip blank line
 	  // skip "# !/usr/bin/octave"
 	  if ((line.substr (line_pos , 2) == "or"
 	       && line.find_first_not_of ("\n\t ", line_pos + 2) == NPOS)
 	      || line.find_first_not_of ("\n\t ", line_pos) == NPOS
 	      || line.substr (line_pos, 2) == "!/")
 	    {
-	      pos = new_pos + 1;
+	      pos = (new_pos == NPOS ? NPOS : new_pos + 1);
 	      continue;
 	    }
 
 	  // Got the start of first sentence, break.
 	  pos = pos + line_pos;
 	  break;
 	}
 
@@ -1566,64 +1583,91 @@ to find related functions that are not p
       transform (txt.begin (), txt.end (), txt.begin (), tolower);
 
       help_list *ptr = keyword_help ();
       while (ptr->name)
 	{
 	  std::string name = ptr->name;
 	  std::string h = ptr->help;
 
-	  std::string s;
-	  if (first_sentence_only)
-	    s = first_help_sentence (h);
-	  else
-	    s = h;
-	      
-	  transform (s.begin (), s.end (), s.begin (), tolower);
-
-	  if (s.length () > 0 && s.find (txt) != NPOS)
+	  if (name.find (txt) != NPOS)
 	    {
 	      if (nargout)
 		{
 		  ret[0].append (name);
 		  ret[1].append (first_help_sentence (h));
 		}
 	      else
 		print_lookfor (name, first_help_sentence (h));
 	    }
+	  else
+	    {
+	      std::string s;
+
+	      if (first_sentence_only)
+		s = first_help_sentence (h);
+	      else
+		s = h;
+	      
+	      transform (s.begin (), s.end (), s.begin (), tolower);
+
+	      if (s.length () > 0 && s.find (txt) != NPOS)
+		{
+		  if (nargout)
+		    {
+		      ret[0].append (name);
+		      ret[1].append (first_help_sentence (h));
+		    }
+		  else
+		    print_lookfor (name, first_help_sentence (h));
+		}
+	    }
 
 	  OCTAVE_QUIT;
 
 	  ptr++;
 	}
 
       ptr = operator_help ();
       while (ptr->name)
 	{
 	  std::string name = ptr->name;
 	  std::string h = ptr->help;
 
-	  std::string s;
-	  if (first_sentence_only)
-	    s = first_help_sentence (h);
-	  else
-	    s = h;
-	      
-	  transform (s.begin (), s.end (), s.begin (), tolower);
-
-	  if (s.length () > 0 && s.find (txt) != NPOS)
+	  if (name.find (txt) != NPOS)
 	    {
 	      if (nargout)
 		{
 		  ret[0].append (name);
 		  ret[1].append (first_help_sentence (h));
 		}
 	      else
 		print_lookfor (name, first_help_sentence (h));
 	    }
+	  else
+	    {
+	      std::string s;
+	      if (first_sentence_only)
+		s = first_help_sentence (h);
+	      else
+		s = h;
+	      
+	      transform (s.begin (), s.end (), s.begin (), tolower);
+
+	      if (s.length () > 0 && s.find (txt) != NPOS)
+		{
+		  if (nargout)
+		    {
+		      ret[0].append (name);
+		      ret[1].append (first_help_sentence (h));
+		    }
+		  else
+		    print_lookfor (name, first_help_sentence (h));
+		}
+	    }
 
 	  OCTAVE_QUIT;
 
 	  ptr++;
 	}
 
       // Check the symbol record table
       string_vector names
@@ -1634,34 +1678,49 @@ to find related functions that are not p
 	  std::string name = names (i);
 
 	  OCTAVE_QUIT;
 
 	  symbol_record *sr = lookup_by_name (name, 0);
 	  if (sr && sr->is_defined ())
 	    {
 	      std::string h = sr->help ();
-	      std::string s;
-	      if (first_sentence_only)
-		s = first_help_sentence (h);
-	      else
-		s = h;
-	      
-	      transform (s.begin (), s.end (), s.begin (), tolower);
 
-	      if (s.length () > 0 && s.find (txt) != NPOS)
+	      if (name.find (txt) != NPOS)
 		{
 		  if (nargout)
 		    {
 		      ret[0].append (name);
 		      ret[1].append (first_help_sentence (h));
 		    }
 		  else
 		    print_lookfor (name, first_help_sentence (h));
 		}
+	      else
+		{
+		  std::string s;
+
+		  if (first_sentence_only)
+		    s = first_help_sentence (h);
+		  else
+		    s = h;
+	      
+		  transform (s.begin (), s.end (), s.begin (), tolower);
+
+		  if (s.length () > 0 && s.find (txt) != NPOS)
+		    {
+		      if (nargout)
+			{
+			  ret[0].append (name);
+			  ret[1].append (first_help_sentence (h));
+			}
+		      else
+			print_lookfor (name, first_help_sentence (h));
+		    }
+		}
 	    }
 	}
 
       string_vector dirs = Vload_path_dir_path.all_directories ();
 
       int len = dirs.length ();
 
       for (int i = 0; i < len; i++)
@@ -1692,50 +1751,128 @@ to find related functions that are not p
 		    {
 		      // Check if this version is first in the path
 		      string_vector tmp (2);
 		      tmp(0) = name + ".oct";
 		      tmp(1) = name + ".m";
 		      std::string file_name = 
 			Vload_path_dir_path.find_first_of (tmp);
 
-
 		      if (file_name == dirs[i] + tmp(0)
 			  || file_name == dirs[i] + tmp(1))
 			{
 			  bool symbol_found;
 
-			  std::string h
-			    = get_help_from_file (file_name, symbol_found);
+			  std::string h;
+			  if (file_name == dirs[i] + tmp(0))
+			    {
+			      // oct-file. Must load to get help
+			      sr = lookup_by_name (name, false);
 
-			  std::string s;
-			  if (first_sentence_only)
-			    s = first_help_sentence (h);
+			      if (sr && sr->is_defined ())
+				h = sr->help ();
+			    }
 			  else
-			    s = h;
+			    h = get_help_from_file (file_name, symbol_found);
 
-			  transform (s.begin (), s.end (), s.begin (), tolower);
-
-			  if (s.length () > 0 && s.find (txt) != NPOS)
+			  if (name.find (txt) != NPOS)
 			    {
 			      if (nargout)
 				{
 				  ret[0].append (name);
 				  ret[1].append (first_help_sentence (h));
 				}
 			      else
 				print_lookfor (name, first_help_sentence (h));
 			    }
+			  else
+			    {
+			      std::string s;
+			      if (first_sentence_only)
+				s = first_help_sentence (h);
+			      else
+				s = h;
+
+			      transform (s.begin (), s.end (), s.begin (), tolower);
+
+			      if (s.length () > 0 && s.find (txt) != NPOS)
+				{
+				  if (nargout)
+				    {
+				      ret[0].append (name);
+				      ret[1].append (first_help_sentence (h));
+				    }
+				  else
+				    print_lookfor (name, first_help_sentence (h));
+				}
+			    }
+			}
+		    }
+
+		  // Check if this function has autoloaded functions attached to it
+		  std::string file_name = Vload_path_dir_path.find_first_of (names(j));
+		  string_vector autoload_fcns = reverse_lookup_autoload (file_name);
+
+		  if (! autoload_fcns.empty ())
+		    {
+		      for (int k = 0; k < autoload_fcns.length (); k++)
+			{
+			  std::string aname = autoload_fcns (k);
+
+			  // Check if already in symbol table
+			  sr = fbi_sym_tab->lookup (aname);
+
+			  if (!sr)
+			    {
+			      // Must load to get help
+			      sr = lookup_by_name (name, false);
+
+			      std::string h;
+			      if (sr && sr->is_defined ())
+				h = sr->help ();
+
+			      if (aname.find (txt) != NPOS)
+				{
+				  if (nargout)
+				    {
+				      ret[0].append (aname);
+				      ret[1].append (first_help_sentence (h));
+				    }
+				  else
+				    print_lookfor (aname, first_help_sentence (h));
+				}
+			      else
+				{
+				  std::string s;
+				  if (first_sentence_only)
+				    s = first_help_sentence (h);
+				  else
+				    s = h;
+
+				  transform (s.begin (), s.end (), s.begin (), 
+					     tolower);
+
+				  if (s.length () > 0 && s.find (txt) != NPOS)
+				    {
+				      if (nargout)
+					{
+					  ret[0].append (aname);
+					  ret[1].append (first_help_sentence (h));
+					}
+				      else
+					print_lookfor (aname, first_help_sentence (h));
+				    }
+				}
+			    }
 			}
 		    }
 		}
 	    }
 	}
 
-
       if (nargout != 0)
 	{
 	  retval (1) = ret[1];
 	  retval (0) = ret[0];
 	}
     }
   else
     {
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -398,17 +398,17 @@ read_mat5_binary_element (std::istream& 
   // first used to avoid errors from gcc about goto crossing
   // initialization of variable.
 
   oct_mach_info::float_format flt_fmt = oct_mach_info::flt_fmt_unknown;
   int type = 0;
   bool imag;
   bool logicalvar;
   enum arrayclasstype arrayclass;
-  FOUR_BYTE_INT nnz;
+  FOUR_BYTE_INT nzmax;
   FOUR_BYTE_INT flags;
   dim_vector dims;
   int len;
   int element_length;
   std::streampos pos;
   TWO_BYTE_INT number;
   number = *(TWO_BYTE_INT *)"\x00\x01";
 
@@ -490,17 +490,17 @@ read_mat5_binary_element (std::istream& 
       goto early_read_error;
     }
 
   read_int (is, swap, flags);
   imag = (flags & 0x0800) != 0;	// has an imaginary part?
   global = (flags & 0x0400) != 0; // global variable?
   logicalvar = (flags & 0x0200) != 0; // boolean ?
   arrayclass = (arrayclasstype)(flags & 0xff);
-  read_int (is, swap, nnz);	// number of non-zero in sparse
+  read_int (is, swap, nzmax);	// max number of non-zero in sparse
   
   // dimensions array subelement
   {
     FOUR_BYTE_INT dim_len;
 
     if (read_mat5_tag (is, swap, type, dim_len) || type != miINT32)
       {
 	error ("load: invalid dimensions array subelement");
@@ -582,54 +582,52 @@ read_mat5_binary_element (std::istream& 
       warning ("load: sparse objects are not implemented");
       goto skip_ahead;
 #else
       {
 	int nr = dims(0);
 	int nc = dims(1);
 	SparseMatrix sm;
 	SparseComplexMatrix scm;
-	NDArray re;
 	int *ridx;
 	int *cidx;
 	double *data;
 
 	// Setup return value
 	if (imag)
 	  {
 	    scm = SparseComplexMatrix (static_cast<octave_idx_type> (nr),
 				       static_cast<octave_idx_type> (nc),
-				       static_cast<octave_idx_type> (nnz));
+				       static_cast<octave_idx_type> (nzmax));
 	    ridx = scm.ridx ();
 	    cidx = scm.cidx ();
-	    re = NDArray (dim_vector (static_cast<int> (nnz)));
-	    data = re.fortran_vec ();
+	    data = 0;
 	  }
 	else
 	  {
 	    sm = SparseMatrix (static_cast<octave_idx_type> (nr),
 			       static_cast<octave_idx_type> (nc),
-			       static_cast<octave_idx_type> (nnz));
+			       static_cast<octave_idx_type> (nzmax));
 	    ridx = sm.ridx ();
 	    cidx = sm.cidx ();
 	    data = sm.data ();
 	  }
 
 	// row indices
 	std::streampos tmp_pos;
 	  
 	if (read_mat5_tag (is, swap, type, len))
 	  {
 	    error ("load: reading sparse row data for `%s'", retval.c_str ());
 	    goto data_read_error;
 	  }
 
 	tmp_pos = is.tellg ();
 
-	read_mat5_integer_data (is, ridx, nnz, swap,
+	read_mat5_integer_data (is, ridx, nzmax, swap,
 				(enum mat5_data_type) type);
 
 	if (! is || error_state)
 	  {
 	    error ("load: reading sparse row data for `%s'", retval.c_str ());
 	    goto data_read_error;
 	  }
 
@@ -657,16 +655,24 @@ read_mat5_binary_element (std::istream& 
 
 	// real data subelement
 	if (read_mat5_tag (is, swap, type, len))
 	  {
 	    error ("load: reading sparse matrix data for `%s'", retval.c_str ());
 	    goto data_read_error;
 	  }
 
+	FOUR_BYTE_INT nnz = cidx[nc];
+	NDArray re;
+	if (imag)
+	  {
+	    re = NDArray (dim_vector (static_cast<int> (nnz)));
+	    data = re.fortran_vec ();
+	  }
+
 	tmp_pos = is.tellg ();
 	read_mat5_binary_data (is, data, nnz, swap,
 			       (enum mat5_data_type) type, flt_fmt);
 
 	if (! is || error_state)
 	  {
 	    error ("load: reading sparse matrix data for `%s'", retval.c_str ());
 	    goto data_read_error;
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -205,16 +205,41 @@ equiv_keys (const Octave_map& a, const O
 
       retval = a_keys;
     }
   
   return retval;
 }
 
 Octave_map&
+Octave_map::maybe_delete_elements (const octave_value_list& idx)
+{
+  string_vector t_keys = keys();
+  octave_idx_type len = t_keys.length ();
+
+  if (len > 0)
+    {
+      for (octave_idx_type i = 0; i < len; i++)
+	{
+	  std::string k = t_keys[i];
+
+	  map[k] = contents (k).assign (idx, Cell());
+
+	  if (error_state)
+	    break;
+	}
+
+      if (!error_state)
+	dimensions = contents(t_keys[0]).dims();
+    }
+
+  return *this;
+}
+
+Octave_map&
 Octave_map::assign (const octave_value_list& idx, const Octave_map& rhs)
 {
   string_vector t_keys = empty () ? rhs.keys () : equiv_keys (*this, rhs);
 
   if (! t_keys.empty ())
     {
       octave_idx_type len = t_keys.length ();
 
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -128,16 +128,18 @@ Octave_map
   Octave_map reshape (const dim_vector& new_dims) const;
 
   Octave_map resize (const dim_vector& dv) const;
 
   octave_idx_type numel (void) const;
 
   Octave_map concat (const Octave_map& rb, const Array<octave_idx_type>& ra_idx);
 
+  Octave_map& maybe_delete_elements (const octave_value_list& idx);
+
   Octave_map& assign (const octave_value_list& idx, const Octave_map& rhs);
 
   Octave_map& assign (const octave_value_list& idx, const std::string& k,
 		      const Cell& rhs);
 
   Octave_map& assign (const std::string& k, const octave_value& rhs);
 
   Octave_map& assign (const std::string& k, const Cell& rhs);
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -128,19 +128,22 @@ octave_struct::subsref (const std::strin
 	  }
 	else
 	  retval(0) = map.index (idx.front ());
       }
       break;
 
     case '.':
       {
-	Cell t = dotref (idx.front ());
+	if (map.numel() > 0)
+	  {
+	    Cell t = dotref (idx.front ());
 
-	retval(0) = (t.length () == 1) ? t(0) : octave_value (t, true);
+	    retval(0) = (t.length () == 1) ? t(0) : octave_value (t, true);
+	  }
       }
       break;
 
     case '{':
       gripe_invalid_index_type (type_name (), type[0]);
       break;
 
     default:
@@ -302,29 +305,46 @@ octave_struct::subsasgn (const std::stri
 		    else
 		      gripe_failed_assignment ();
 		  }
 		else
 		  gripe_failed_assignment ();
 	      }
 	    else
 	      {
-		Octave_map rhs_map = t_rhs.map_value ();
-
-		if (! error_state)
+		if (t_rhs.is_map())
 		  {
-		    map.assign (idx.front (), rhs_map);
+		    Octave_map rhs_map = t_rhs.map_value ();
 
 		    if (! error_state)
-		      retval = octave_value (this, count + 1);
+		      {
+			map.assign (idx.front (), rhs_map);
+
+			if (! error_state)
+			  retval = octave_value (this, count + 1);
+			else
+			  gripe_failed_assignment ();
+		      }
 		    else
-		      gripe_failed_assignment ();
+		      error ("invalid structure assignment");
 		  }
 		else
-		  error ("invalid structure assignment");
+		  {
+		    if (t_rhs.is_empty()) 
+		      {
+			map.maybe_delete_elements (idx.front());
+
+			if (! error_state)
+			  retval = octave_value (this, count + 1);
+			else
+			  gripe_failed_assignment ();
+		      }
+		    else
+		      error ("invalid structure assignment");
+		  }
 	      }
 	  }
 	  break;
 
 	case '.':
 	  {
 	    octave_value_list key_idx = idx.front ();
 
@@ -388,27 +408,28 @@ octave_struct::print_raw (std::ostream& 
   // alphabetize entries, etc.
 
   unwind_protect::begin_frame ("octave_struct_print");
 
   unwind_protect_int (Vstruct_levels_to_print);
 
   if (Vstruct_levels_to_print >= 0)
     {
-      bool print_keys_only = (Vstruct_levels_to_print == 0);
+      bool print_keys_only = (Vstruct_levels_to_print == 0 || 
+			      map.numel() == 0);
 
       Vstruct_levels_to_print--;
 
       indent (os);
       os << "{";
       newline (os);
 
       increment_indent_level ();
 
-      octave_idx_type n = map.numel ();
+      octave_idx_type n = map_keys().length();
 
       if (n > 1 && print_keys_only)
 	{
 	  indent (os);
 	  dim_vector dv = dims ();
 	  os << dv.str () << " struct array containing the fields:";
 	  newline (os);
 	  newline (os);
@@ -477,22 +498,22 @@ octave_struct::print_name_tag (std::ostr
 }
 
 static bool 
 scalar (const dim_vector& dims) 
 {
   return dims.length () == 2 && dims (0) == 1 && dims (1) == 1;
 }
 
-// XXX FIXME XXX -- move these tests to the test directory?
 /*
 %!shared x
 %! x(1).a=1; x(2).a=2; x(1).b=3; x(2).b=3;
 %!assert(struct('a',1,'b',3),x(1))
-%!assert(struct('a',{},'b',{}),x([]))
+%!assert(isempty(x([])))
+%!assert(isempty(struct('a',{},'b',{})))
 %!assert(struct('a',{1,2},'b',{3,3}),x)
 %!assert(struct('a',{1,2},'b',3),x)
 %!assert(struct('a',{1,2},'b',{3}),x)
 %!assert(struct('b',3,'a',{1,2}),x)
 %!assert(struct('b',{3},'a',{1,2}),x) 
 %!test x=struct([]);
 %!assert(size(x),[0,0]);
 %!assert(isstruct(x));
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -93,16 +93,20 @@ parse_and_execute (const std::string& s,
 		   const char *warn_for = 0);
 
 extern std::string
 get_help_from_file (const std::string& nm, bool& symbol_found,
 		    bool include_file_info = false);
 
 extern std::string lookup_autoload (const std::string& nm);
 
+extern string_vector autoloaded_functions (void);
+
+extern string_vector reverse_lookup_autoload (const std::string& nm);
+
 extern bool
 load_fcn_from_file (const std::string& nm, bool exec_script);
 
 extern bool
 load_fcn_from_file (symbol_record *sym_rec, bool exec_script);
 
 extern void
 source_file (const std::string file_name);
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3374,16 +3374,44 @@ parse_fcn_file (const std::string& ff, b
 std::string
 lookup_autoload (const std::string& nm)
 {
   return
     octave_env::make_absolute (Vload_path_dir_path.find (autoload_map[nm]),
 			       octave_env::getcwd ());
 }
 
+string_vector 
+autoloaded_functions (void)
+{
+  string_vector names (autoload_map.size());
+
+  octave_idx_type i = 0;
+  std::map<std::string, std::string>::const_iterator p;
+  for (p = std::map<std::string, std::string>::iterator (autoload_map.begin ()); 
+       p != std::map<std::string, std::string>::iterator (autoload_map.end ()); p++)
+    names[i++] = p->first;
+
+  return names;
+}
+
+string_vector
+reverse_lookup_autoload (const std::string& nm)
+{
+  string_vector names;
+
+  std::map<std::string, std::string>::const_iterator p;
+  for (p = std::map<std::string, std::string>::iterator (autoload_map.begin ()); 
+       p != std::map<std::string, std::string>::iterator (autoload_map.end ()); p++)
+    if (nm == p->second)
+      names.append (p->first);
+
+  return names;
+}
+
 bool
 load_fcn_from_file (const std::string& nm, bool exec_script)
 {
   unwind_protect::begin_frame ("load_fcn_from_file");
 
   bool script_file_executed = false;
 
   string_vector names (2);
