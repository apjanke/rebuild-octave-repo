# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1314044100 -7200
#      Mon Aug 22 22:15:00 2011 +0200
# Node ID 367919252ed601181b82e7dd837812974a4461b3
# Parent  6099d4015aae85400593460f3eb388357256ab23
Integrated kprocess_p in kprocess.

diff --git a/gui/src/OctaveTerminal.cpp b/gui/src/OctaveTerminal.cpp
--- a/gui/src/OctaveTerminal.cpp
+++ b/gui/src/OctaveTerminal.cpp
@@ -38,16 +38,17 @@ OctaveTerminal::OctaveTerminal (QWidget 
 OctaveTerminal::~OctaveTerminal ()
 {
 }
 
 void
 OctaveTerminal::construct ()
 {
   setSizePolicy (QSizePolicy::Expanding, QSizePolicy::Expanding);
+  m_textCodec = QTextCodec::codecForLocale ();
 }
 
 void
 OctaveTerminal::openTerminal ()
 {
   int fdm, fds;
   if (openpty (&fdm, &fds, 0, 0, 0) < 0)
     {
@@ -72,37 +73,37 @@ OctaveTerminal::keyPressEvent (QKeyEvent
         verticalScrollBar ()->setValue (verticalScrollBar ()->value () - 10);
       return;
       case Qt::Key_PageDown:
       if (verticalScrollBar ())
         verticalScrollBar ()->setValue (verticalScrollBar ()->value () + 10);
       return;
 
       case Qt::Key_Up:
-      m_shellProcess->sendData ("\EOA");
+      m_shellProcess->sendData ("\033OA");
       break;
 
       case Qt::Key_Down:
-      m_shellProcess->sendData ("\EOB");
+      m_shellProcess->sendData ("\033OB");
       break;
 
       case Qt::Key_Right:
-      m_shellProcess->sendData ("\EOC");
+      m_shellProcess->sendData ("\033OC");
       break;
 
       case Qt::Key_Left:
-      m_shellProcess->sendData ("\EOF");
+      m_shellProcess->sendData ("\033OF");
       break;
 
       case Qt::Key_Backslash:
-      m_shellProcess->sendData ("\008");
+      m_shellProcess->sendData ("\03308");
       break;
 
       default:
-      m_shellProcess->sendData (keyEvent->text ().toLocal8Bit ());
+      m_shellProcess->sendData (keyEvent->text ().toUtf8 ());
       break;
     }
 
   /*
   bool emitKeyPressSignal = true;
 
   if (event->modifiers () == Qt::ControlModifier)
     {
@@ -187,29 +188,16 @@ OctaveTerminal::keyPressEvent (QKeyEvent
     }
       else if (!entry.text ().isEmpty ())
     {
       textToSend += _codec->fromUnicode (entry.text (true, modifiers));
     }
       else
     textToSend += _codec->fromUnicode (event->text ());
 
-      sendData (textToSend.constData (), textToSend.length ());
-    }
-  else
-    {
-      // print an error message to the terminal if no key translator has been
-      // set
-      QString translatorError = QString ("No keyboard translator available.  "
-                     "The information needed to convert key presses "
-                     "into characters to send to the terminal "
-                     "is missing.");
-      reset ();
-      receiveData (translatorError.toAscii ().constData (),
-           translatorError.count ());
     }*/
   keyEvent->accept ();
 }
 
 void OctaveTerminal::handleReceivedData (const QByteArray& data)
 {
   int position;
   QTextCursor tc = textCursor ();
diff --git a/gui/src/OctaveTerminal.h b/gui/src/OctaveTerminal.h
--- a/gui/src/OctaveTerminal.h
+++ b/gui/src/OctaveTerminal.h
@@ -14,16 +14,17 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef OCTAVETERMINAL_H
 #define OCTAVETERMINAL_H
 #include <QPlainTextEdit>
+#include <QTextCodec>
 #include "Pty.h"
 
 class OctaveTerminal:public QPlainTextEdit
 {
 Q_OBJECT
 public:
   OctaveTerminal (QWidget * parent = 0);
   ~OctaveTerminal ();
@@ -37,11 +38,12 @@ signals:
 protected:
   void keyPressEvent (QKeyEvent *keyEvent);
 
 protected slots:
   void handleReceivedData (const QByteArray& data);
 
 private:
   void construct ();
+  QTextCodec *m_textCodec;
   Pty *m_shellProcess;
 };
 #endif // OCTAVETERMINAL_H
diff --git a/gui/src/terminal/kprocess.cpp b/gui/src/terminal/kprocess.cpp
--- a/gui/src/terminal/kprocess.cpp
+++ b/gui/src/terminal/kprocess.cpp
@@ -14,98 +14,66 @@
     Library General Public License for more details.
 
     You should have received a copy of the GNU Library General Public License
     along with this library; see the file COPYING.LIB.  If not, write to
     the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
     Boston, MA 02110-1301, USA.
 */
 
-#include "kprocess_p.h"
+#include "kprocess.h"
 
 #include <qfile.h>
-
-#ifdef Q_OS_WIN
-#include <windows.h>
-#else
 #include <unistd.h>
 #include <errno.h>
-#endif
 
-#ifndef Q_OS_WIN
 #define STD_OUTPUT_HANDLE 1
 #define STD_ERROR_HANDLE 2
-#endif
-
-#ifdef _WIN32_WCE
-#include <stdio.h>
-#endif
 
 void
 KProcessPrivate::writeAll (const QByteArray & buf, int fd)
 {
-#ifdef Q_OS_WIN
-#ifndef _WIN32_WCE
-  HANDLE h = GetStdHandle (fd);
-  if (h)
-    {
-      DWORD wr;
-      WriteFile (h, buf.data (), buf.size (), &wr, 0);
-    }
-#else
-  fwrite (buf.data (), 1, buf.size (), (FILE *) fd);
-#endif
-#else
   int off = 0;
   do
     {
       int ret =::write (fd, buf.data () + off, buf.size () - off);
       if (ret < 0)
 	{
 	  if (errno != EINTR)
 	    return;
 	}
       else
 	{
 	  off += ret;
 	}
     }
   while (off < buf.size ());
-#endif
 }
 
 void
 KProcessPrivate::forwardStd (KProcess::ProcessChannel good, int fd)
 {
   Q_Q (KProcess);
 
   QProcess::ProcessChannel oc = q->readChannel ();
   q->setReadChannel (good);
   writeAll (q->readAll (), fd);
   q->setReadChannel (oc);
 }
 
 void
 KProcessPrivate::_k_forwardStdout ()
 {
-#ifndef _WIN32_WCE
   forwardStd (KProcess::StandardOutput, STD_OUTPUT_HANDLE);
-#else
-  forwardStd (KProcess::StandardOutput, (int) stdout);
-#endif
 }
 
 void
 KProcessPrivate::_k_forwardStderr ()
 {
-#ifndef _WIN32_WCE
   forwardStd (KProcess::StandardError, STD_ERROR_HANDLE);
-#else
-  forwardStd (KProcess::StandardError, (int) stderr);
-#endif
 }
 
 /////////////////////////////
 // public member functions //
 /////////////////////////////
 
 KProcess::KProcess (QObject * parent):
 QProcess (parent), d_ptr (new KProcessPrivate)
@@ -209,32 +177,26 @@ KProcess::unsetEnvironmentVariable (cons
 
 void
 KProcess::setProgram (const QString & exe, const QStringList & args)
 {
   Q_D (KProcess);
 
   d->prog = exe;
   d->args = args;
-#ifdef Q_OS_WIN
-  setNativeArguments (QString ());
-#endif
 }
 
 void
 KProcess::setProgram (const QStringList & argv)
 {
   Q_D (KProcess);
 
   Q_ASSERT (!argv.isEmpty ());
   d->args = argv;
   d->prog = d->args.takeFirst ();
-#ifdef Q_OS_WIN
-  setNativeArguments (QString ());
-#endif
 }
 
 KProcess & KProcess::operator<< (const QString & arg)
 {
   Q_D (KProcess);
 
   if (d->prog.isEmpty ())
     d->prog = arg;
@@ -256,19 +218,16 @@ KProcess & KProcess::operator<< (const Q
 
 void
 KProcess::clearProgram ()
 {
   Q_D (KProcess);
 
   d->prog.clear ();
   d->args.clear ();
-#ifdef Q_OS_WIN
-  setNativeArguments (QString ());
-#endif
 }
 
 QStringList
 KProcess::program () const
 {
   Q_D (const KProcess);
 
   QStringList argv = d->args;
@@ -343,14 +302,10 @@ KProcess::startDetached (const QStringLi
   QStringList args = argv;
   QString prog = args.takeFirst ();
   return startDetached (prog, args);
 }
 
 int
 KProcess::pid () const
 {
-#ifdef Q_OS_UNIX
   return (int) QProcess::pid ();
-#else
-  return QProcess::pid ()? QProcess::pid ()->dwProcessId : 0;
-#endif
 }
diff --git a/gui/src/terminal/kprocess.h b/gui/src/terminal/kprocess.h
--- a/gui/src/terminal/kprocess.h
+++ b/gui/src/terminal/kprocess.h
@@ -287,13 +287,31 @@ protected:
 private:
   // hide those
     using QProcess::setReadChannelMode;
   using QProcess::readChannelMode;
   using QProcess::setProcessChannelMode;
   using QProcess::processChannelMode;
 
   Q_PRIVATE_SLOT (d_func (), void _k_forwardStdout ())
-    Q_PRIVATE_SLOT (d_func (), void _k_forwardStderr ())};
+  Q_PRIVATE_SLOT (d_func (), void _k_forwardStderr ())
+};
 
-#include "kprocess_p.h"
+class KProcessPrivate
+{
+Q_DECLARE_PUBLIC (KProcess) protected:
+  KProcessPrivate ():openMode (QIODevice::ReadWrite)
+  {
+  }
+  void writeAll (const QByteArray & buf, int fd);
+  void forwardStd (KProcess::ProcessChannel good, int fd);
+  void _k_forwardStdout ();
+  void _k_forwardStderr ();
+
+  QString prog;
+  QStringList args;
+  KProcess::OutputChannelMode outputChannelMode;
+  QIODevice::OpenMode openMode;
+
+  KProcess *q_ptr;
+};
 
 #endif
diff --git a/gui/src/terminal/kprocess_p.h b/gui/src/terminal/kprocess_p.h
--- a/gui/src/terminal/kprocess_p.h
+++ b/gui/src/terminal/kprocess_p.h
@@ -16,33 +16,12 @@
     You should have received a copy of the GNU Library General Public License
     along with this library; see the file COPYING.LIB.  If not, write to
     the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
     Boston, MA 02110-1301, USA.
 */
 
 #ifndef KPROCESS_P_H
 #define KPROCESS_P_H
-class KProcess;
-class KProcessPrivate;
 
-#include "kprocess.h"
-class KProcessPrivate
-{
-Q_DECLARE_PUBLIC (KProcess) protected:
-  KProcessPrivate ():openMode (QIODevice::ReadWrite)
-  {
-  }
-  void writeAll (const QByteArray & buf, int fd);
-  void forwardStd (KProcess::ProcessChannel good, int fd);
-  void _k_forwardStdout ();
-  void _k_forwardStderr ();
-
-  QString prog;
-  QStringList args;
-  KProcess::OutputChannelMode outputChannelMode;
-  QIODevice::OpenMode openMode;
-
-  KProcess *q_ptr;
-};
 
 
 #endif
