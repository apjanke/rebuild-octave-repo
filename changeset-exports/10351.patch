# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1266930934 -3600
#      Tue Feb 23 14:15:34 2010 +0100
# Node ID 5150ceb4dbb4d10dd019c68f131019745ddd8cac
# Parent  12884915a8e46a2a876d47083ea8c788e2ed1126
base charMatrix and boolMatrix on Array<char>

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2010-02-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* chMatrix.h (charMatrix): Base on Array<char>.
+	* chMatrix.cc (charMatrix): Update.
+	* boolMatrix.h (boolMatrix): Ditto.
+	* boolMatrix.h (boolMatrix): Update.
+
 2010-02-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Array.h (Array): Define 2D constructors. Remove conflicting 1D
 	initialized constructor. Deprecate 1D constructor. Deprecate 1D resize. 
 	Add 2D resize, resize1. Remove resize_fill. Make resize_fill_value
 	return a reference. Remove 1D clear.
 	
 	* MArray.h (MArray): Merge with MArrayN. Define 2D constructors, sync
diff --git a/liboctave/boolMatrix.cc b/liboctave/boolMatrix.cc
--- a/liboctave/boolMatrix.cc
+++ b/liboctave/boolMatrix.cc
@@ -51,17 +51,17 @@ bool
 boolMatrix::operator != (const boolMatrix& a) const
 {
   return !(*this == a);
 }
 
 boolMatrix&
 boolMatrix::insert (const boolMatrix& a, octave_idx_type r, octave_idx_type c)
 {
-  Array2<bool>::insert (a, r, c);
+  Array<bool>::insert (a, r, c);
   return *this;
 }
 
 // unary operations
 
 boolMatrix
 boolMatrix::operator ! (void) const
 {
@@ -77,17 +77,17 @@ boolMatrix::operator ! (void) const
   return b;
 }
 
 // other operations
 
 boolMatrix
 boolMatrix::diag (octave_idx_type k) const
 {
-  return Array2<bool>::diag (k);
+  return Array<bool>::diag (k);
 }
 
 // FIXME Do these really belong here?  Maybe they should be
 // in a base class?
 
 boolMatrix
 boolMatrix::all (int dim) const
 {
diff --git a/liboctave/boolMatrix.h b/liboctave/boolMatrix.h
--- a/liboctave/boolMatrix.h
+++ b/liboctave/boolMatrix.h
@@ -19,45 +19,45 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_boolMatrix_int_h)
 #define octave_boolMatrix_int_h 1
 
-#include "Array2.h"
+#include "Array.h"
 
 #include "mx-defs.h"
 #include "mx-op-decl.h"
 
 class
 OCTAVE_API
-boolMatrix : public Array2<bool>
+boolMatrix : public Array<bool>
 {
 public:
 
-  boolMatrix (void) : Array2<bool> () { }
-  boolMatrix (octave_idx_type r, octave_idx_type c) : Array2<bool> (r, c) { }
-  boolMatrix (octave_idx_type r, octave_idx_type c, bool val) : Array2<bool> (r, c, val) { }
-  boolMatrix (const dim_vector& dv) : Array2<bool> (dv) { }
-  boolMatrix (const dim_vector& dv, bool val) : Array2<bool> (dv, val) { }
-  boolMatrix (const Array2<bool>& a) : Array2<bool> (a) { }
-  boolMatrix (const boolMatrix& a) : Array2<bool> (a) { }
+  boolMatrix (void) : Array<bool> () { }
+  boolMatrix (octave_idx_type r, octave_idx_type c) : Array<bool> (r, c) { }
+  boolMatrix (octave_idx_type r, octave_idx_type c, bool val) : Array<bool> (r, c, val) { }
+  boolMatrix (const dim_vector& dv) : Array<bool> (dv) { }
+  boolMatrix (const dim_vector& dv, bool val) : Array<bool> (dv, val) { }
+  boolMatrix (const Array<bool>& a) : Array<bool> (a) { }
+  boolMatrix (const boolMatrix& a) : Array<bool> (a) { }
 
   boolMatrix& operator = (const boolMatrix& a)
     {
-      Array2<bool>::operator = (a);
+      Array<bool>::operator = (a);
       return *this;
     }
 
   bool operator == (const boolMatrix& a) const;
   bool operator != (const boolMatrix& a) const;
 
-  boolMatrix transpose (void) const { return Array2<bool>::transpose (); }
+  boolMatrix transpose (void) const { return Array<bool>::transpose (); }
 
   // destructive insert/delete/reorder operations
 
   boolMatrix& insert (const boolMatrix& a, octave_idx_type r, octave_idx_type c);
 
   // unary operations
 
   boolMatrix operator ! (void) const;
@@ -75,17 +75,17 @@ public:
   friend std::ostream& operator << (std::ostream& os, const Matrix& a);
   friend std::istream& operator >> (std::istream& is, Matrix& a);
 #endif
 
   static bool resize_fill_value (void) { return false; }
 
 private:
 
-  boolMatrix (bool *b, octave_idx_type r, octave_idx_type c) : Array2<bool> (b, r, c) { }
+  boolMatrix (bool *b, octave_idx_type r, octave_idx_type c) : Array<bool> (b, r, c) { }
 };
 
 MM_BOOL_OP_DECLS (boolMatrix, boolMatrix, OCTAVE_API)
 MS_BOOL_OP_DECLS (boolMatrix, bool, OCTAVE_API)
 SM_BOOL_OP_DECLS (bool, boolMatrix, OCTAVE_API)
 MM_CMP_OP_DECLS (boolMatrix, boolMatrix, OCTAVE_API)
 
 #endif
diff --git a/liboctave/chMatrix.cc b/liboctave/chMatrix.cc
--- a/liboctave/chMatrix.cc
+++ b/liboctave/chMatrix.cc
@@ -35,52 +35,52 @@ along with Octave; see the file COPYING.
 #include "str-vec.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
 #include "mx-op-defs.h"
 
 // charMatrix class.
 
 charMatrix::charMatrix (char c)
-  : Array2<char> ()
+  : Array<char> ()
 {
   octave_idx_type nc = 1;
   octave_idx_type nr = 1;
 
   resize (nr, nc);
 
   elem (0, 0) = c;
 }
 
 charMatrix::charMatrix (const char *s)
-  : Array2<char> ()
+  : Array<char> ()
 {
   octave_idx_type nc = s ? strlen (s) : 0;
   octave_idx_type nr = s && nc > 0 ? 1 : 0;
 
   resize (nr, nc);
 
   for (octave_idx_type i = 0; i < nc; i++)
     elem (0, i) = s[i];
 }
 
 charMatrix::charMatrix (const std::string& s)
-  : Array2<char> ()
+  : Array<char> ()
 {
   octave_idx_type nc = s.length ();
   octave_idx_type nr = nc > 0 ? 1 : 0;
 
   resize (nr, nc);
 
   for (octave_idx_type i = 0; i < nc; i++)
     elem (0, i) = s[i];
 }
 
 charMatrix::charMatrix (const string_vector& s)
-  : Array2<char> (s.length (), s.max_length (), 0)
+  : Array<char> (s.length (), s.max_length (), 0)
 {
   octave_idx_type nr = rows ();
 
   for (octave_idx_type i = 0; i < nr; i++)
     {
       const std::string si = s(i);
       octave_idx_type nc = si.length ();
       for (octave_idx_type j = 0; j < nc; j++)
@@ -120,17 +120,17 @@ charMatrix::insert (const char *s, octav
         elem (r, c+i) = s[i];
     }
   return *this;
 }
 
 charMatrix&
 charMatrix::insert (const charMatrix& a, octave_idx_type r, octave_idx_type c)
 {
-  Array2<char>::insert (a, r, c);
+  Array<char>::insert (a, r, c);
   return *this;
 }
 
 std::string
 charMatrix::row_as_string (octave_idx_type r, bool strip_ws, bool raw) const 
 {
   std::string retval;
 
@@ -191,17 +191,17 @@ charMatrix::extract (octave_idx_type r1,
       result.elem (i, j) = elem (r1+i, c1+j);
 
   return result;
 }
 
 charMatrix
 charMatrix::diag (octave_idx_type k) const
 {
-  return Array2<char>::diag (k);
+  return Array<char>::diag (k);
 }
 
 // FIXME Do these really belong here?  Maybe they should be
 // in a base class?
 
 boolMatrix
 charMatrix::all (int dim) const
 {
diff --git a/liboctave/chMatrix.h b/liboctave/chMatrix.h
--- a/liboctave/chMatrix.h
+++ b/liboctave/chMatrix.h
@@ -21,52 +21,52 @@ along with Octave; see the file COPYING.
 
 */
 
 #if !defined (octave_chMatrix_int_h)
 #define octave_chMatrix_int_h 1
 
 #include <string>
 
-#include "Array2.h"
+#include "Array.h"
 
 #include "mx-defs.h"
 #include "mx-op-decl.h"
 #include "str-vec.h"
 
 class
 OCTAVE_API
-charMatrix : public Array2<char>
+charMatrix : public Array<char>
 {
 friend class ComplexMatrix;
 
 public:
 
-  charMatrix (void) : Array2<char> () { }
-  charMatrix (octave_idx_type r, octave_idx_type c) : Array2<char> (r, c) { }
-  charMatrix (octave_idx_type r, octave_idx_type c, char val) : Array2<char> (r, c, val) { }
-  charMatrix (const dim_vector& dv) : Array2<char> (dv) { }
-  charMatrix (const dim_vector& dv, char val) : Array2<char> (dv, val) { }
-  charMatrix (const Array2<char>& a) : Array2<char> (a) { }
-  charMatrix (const charMatrix& a) : Array2<char> (a) { }
+  charMatrix (void) : Array<char> () { }
+  charMatrix (octave_idx_type r, octave_idx_type c) : Array<char> (r, c) { }
+  charMatrix (octave_idx_type r, octave_idx_type c, char val) : Array<char> (r, c, val) { }
+  charMatrix (const dim_vector& dv) : Array<char> (dv) { }
+  charMatrix (const dim_vector& dv, char val) : Array<char> (dv, val) { }
+  charMatrix (const Array<char>& a) : Array<char> (a) { }
+  charMatrix (const charMatrix& a) : Array<char> (a) { }
   charMatrix (char c);
   charMatrix (const char *s);
   charMatrix (const std::string& s);
   charMatrix (const string_vector& s);
 
   charMatrix& operator = (const charMatrix& a)
     {
-      Array2<char>::operator = (a);
+      Array<char>::operator = (a);
       return *this;
     }
 
   bool operator == (const charMatrix& a) const;
   bool operator != (const charMatrix& a) const;
 
-  charMatrix transpose (void) const { return Array2<char>::transpose (); }
+  charMatrix transpose (void) const { return Array<char>::transpose (); }
 
   // destructive insert/delete/reorder operations
 
   charMatrix& insert (const char *s, octave_idx_type r, octave_idx_type c);
   charMatrix& insert (const charMatrix& a, octave_idx_type r, octave_idx_type c);
 
   std::string row_as_string (octave_idx_type, bool strip_ws = false, bool raw = false) const;
 
@@ -85,17 +85,17 @@ public:
   friend std::ostream& operator << (std::ostream& os, const Matrix& a);
   friend std::istream& operator >> (std::istream& is, Matrix& a);
 #endif
 
   static char resize_fill_value (void) { return '\0'; }
 
 private:
 
-  charMatrix (char *ch, octave_idx_type r, octave_idx_type c) : Array2<char> (ch, r, c) { }
+  charMatrix (char *ch, octave_idx_type r, octave_idx_type c) : Array<char> (ch, r, c) { }
 };
 
 MS_CMP_OP_DECLS (charMatrix, char, OCTAVE_API)
 MS_BOOL_OP_DECLS (charMatrix, char, OCTAVE_API)
 
 SM_CMP_OP_DECLS (char, charMatrix, OCTAVE_API)
 SM_BOOL_OP_DECLS (char, charMatrix, OCTAVE_API)
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2010-02-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-bool-mat.h (octave_bool_matrix::octave_bool_matrix (const
+	Array<bool>&)): New ctor.
+	* ov-ch-mat.h (octave_char_matrix::octave_char_matrix (const
+	Array<char>&)): New ctor.
+	* ov-str-mat.h (octave_char_matrix_str::octave_char_matrix_str (const
+	Array<char>&)): New ctor.
+	(octave_char_matrix_sq_str::octave_char_matrix_sq_str (const
+	Array<char>&)): New ctor.
+
 2010-02-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Cell.cc: Reflect Array API changes.
 	* DLD-FUNCTIONS/__convn__.cc: Ditto.
 	* DLD-FUNCTIONS/__glpk__.cc: Ditto.
 	* DLD-FUNCTIONS/__magick_read__.cc: Ditto.
 	* DLD-FUNCTIONS/bsxfun.cc: Ditto.
 	* DLD-FUNCTIONS/cellfun.cc: Ditto.
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -54,16 +54,19 @@ octave_bool_matrix : public octave_base_
 public:
 
   octave_bool_matrix (void)
     : octave_base_matrix<boolNDArray> () { }
 
   octave_bool_matrix (const boolNDArray& bnda)
     : octave_base_matrix<boolNDArray> (bnda) { }
 
+  octave_bool_matrix (const Array<bool>& bnda)
+    : octave_base_matrix<boolNDArray> (bnda) { }
+
   octave_bool_matrix (const boolMatrix& bm)
     : octave_base_matrix<boolNDArray> (bm) { }
 
   octave_bool_matrix (const boolMatrix& bm, const MatrixType& t)
     : octave_base_matrix<boolNDArray> (bm, t) { }
 
   octave_bool_matrix (const boolNDArray& bm, const idx_vector& cache)
     : octave_base_matrix<boolNDArray> (bm) 
diff --git a/src/ov-ch-mat.h b/src/ov-ch-mat.h
--- a/src/ov-ch-mat.h
+++ b/src/ov-ch-mat.h
@@ -56,16 +56,19 @@ protected:
     : octave_base_matrix<charNDArray> () { }
 
   octave_char_matrix (const charMatrix& chm)
     : octave_base_matrix<charNDArray> (chm) { }
 
   octave_char_matrix (const charNDArray& chm)
     : octave_base_matrix<charNDArray> (chm) { }
 
+  octave_char_matrix (const Array<char>& chm)
+    : octave_base_matrix<charNDArray> (chm) { }
+
   octave_char_matrix (char c)
     : octave_base_matrix<charNDArray> (c) { }
 
   octave_char_matrix (const char *s)
     : octave_base_matrix<charNDArray> (s) { }
 
   octave_char_matrix (const std::string& s)
     : octave_base_matrix<charNDArray> (s) { }
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -57,16 +57,19 @@ public:
     : octave_char_matrix () { }
 
   octave_char_matrix_str (const charMatrix& chm)
     : octave_char_matrix (chm) { }
 
   octave_char_matrix_str (const charNDArray& chm)
     : octave_char_matrix (chm) { }
 
+  octave_char_matrix_str (const Array<char>& chm)
+    : octave_char_matrix (chm) { }
+
   octave_char_matrix_str (char c)
     : octave_char_matrix (c) { }
 
   octave_char_matrix_str (const char *s)
     : octave_char_matrix (s) { }
 
   octave_char_matrix_str (const std::string& s)
     : octave_char_matrix (s) { }
@@ -179,16 +182,19 @@ public:
     : octave_char_matrix_str () { }
 
   octave_char_matrix_sq_str (const charMatrix& chm)
     : octave_char_matrix_str (chm) { }
 
   octave_char_matrix_sq_str (const charNDArray& chm)
     : octave_char_matrix_str (chm) { }
 
+  octave_char_matrix_sq_str (const Array<char>& chm)
+    : octave_char_matrix_str (chm) { }
+
   octave_char_matrix_sq_str (char c)
     : octave_char_matrix_str (c) { }
 
   octave_char_matrix_sq_str (const char *s)
     : octave_char_matrix_str (s) { }
 
   octave_char_matrix_sq_str (const std::string& s)
     : octave_char_matrix_str (s) { }
