# HG changeset patch
# User dbateman
# Date 1146166214 0
#      Thu Apr 27 19:30:14 2006 +0000
# Node ID 12eeebfa7ead9b9b511f7de540b295eed3618897
# Parent  70f67d85558de56922e9f58abfd39793f6293d6f
[project @ 2006-04-27 19:30:14 by dbateman]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2006-04-27  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/regexp.cc (octregexp): Fix for infinite loop in
+	regexp. Include news regexp arguments, and associated tests.
+
 2006-04-26  Bill Denney  <denney@seas.upenn.edu>
 
  	* pager.cc (Fterminal_size): Add list_in_columns to @seealso.
 
 2006-04-26  John W. Eaton  <jwe@octave.org>
 
 	* dirfns.cc (Ffilesep): New function to replace DEFCONST in
 	symbols_of_dirfns.
diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -55,16 +55,19 @@ static octave_value_list
 octregexp (const octave_value_list &args, int nargout, const std::string &nm,
 	   bool case_insensitive)
 {
   octave_value_list retval;
 #if defined (HAVE_REGEX) || defined (HAVE_PCRE) 
   int nargin = args.length();
   int nopts = nargin - 2;
   bool once = false;
+  bool lineanchors = false;
+  bool dotexceptnewline = false;
+  bool freespacing = false;
 
   if (nargin < 2)
     {
       print_usage(nm);
       return retval;
     }
 
   std::string buffer = args(0).string_value ();
@@ -90,23 +93,67 @@ octregexp (const octave_value_list &args
 	  break;
 	}
       std::transform (str.begin (), str.end (), str.begin (), tolower);
       if (str.find("once", 0) == 0)
 	{
 	  once = true;
 	  nopts--;
 	}
-#ifdef HAVE_PCRE
+#if HAVE_PCRE
+      // Only accept these options with pcre
+      else if (str.find("dotall", 0) == 0)
+	{
+	  dotexceptnewline = false;
+	  nopts--;
+	}
+      else if (str.find("dotexceptnewline", 0) == 0)
+	{
+	  dotexceptnewline = true;
+	  nopts--;
+	}
+      else if (str.find("stringanchors", 0) == 0)
+	{
+	  lineanchors = false;
+	  nopts--;
+	}
+      else if (str.find("lineanchors", 0) == 0)
+	{
+	  lineanchors = true;
+	  nopts--;
+	}
+      else if (str.find("matchcase", 0) == 0)
+	{
+	  case_insensitive = false;
+	  nopts--;
+	}
+      else if (str.find("ignorecase", 0) == 0)
+	{
+	  case_insensitive = true;
+	  nopts--;
+	}
+      else if (str.find("freespacing", 0) == 0)
+	{
+	  freespacing = true;
+	  nopts--;
+	}
+      else if (str.find("literalspacing", 0) == 0)
+	{
+	  freespacing = false;
+	  nopts--;
+	}
       else if (str.find("start", 0) && str.find("end", 0) &&
 	       str.find("tokenextents", 0) && str.find("match", 0) &&
 	       str.find("tokens", 0) && str.find("names", 0))
 	error ("%s: unrecognized option", nm.c_str());
 #else
-      else if (str.find("names", 0) == 0)
+      else if (str.find("names", 0) == 0 ||
+	       str.find("dotexceptnewline", 0) == 0 ||
+	       str.find("lineanchors", 0) == 0 ||
+	       str.find("freespacing", 0) == 0)
 	error ("%s: named tokens not implemented in this version", nm.c_str());
       else if (str.find("start", 0) && str.find("end", 0) &&
 	       str.find("tokenextents", 0) && str.find("match", 0) &&
 	       str.find("tokens", 0))
 	error ("%s: unrecognized option", nm.c_str());
 #endif
     }
 
@@ -128,16 +175,17 @@ octregexp (const octave_value_list &args
       size_t pos = 0;
       size_t new_pos;
       string_vector named;
       int nnames = 0;
       int inames = 0;
       std::ostringstream buf;
       Array<int> named_idx;
 
+      // Add mode flags
       while ((new_pos = pattern.find ("(?<",pos)) != NPOS)
 	{
 	  size_t tmp_pos = pattern.find_first_of ('>',new_pos);
 
 	  if (tmp_pos == NPOS)
 	    {
 	      error ("syntax error in pattern");
 	      break;
@@ -179,17 +227,20 @@ octregexp (const octave_value_list &args
 	return retval;
 
       // Compile expression
       pcre *re;
       const char *err;
       int erroffset;
       std::string buf_str = buf.str ();
       re = pcre_compile (buf_str.c_str (),
-			 (case_insensitive ? PCRE_CASELESS : 0),
+			 (case_insensitive ? PCRE_CASELESS : 0) |
+			 (dotexceptnewline ? 0 : PCRE_DOTALL) |
+			 (lineanchors ? PCRE_MULTILINE : 0) |
+			 (freespacing ? PCRE_EXTENDED : 0),
 			 &err, &erroffset, NULL);
     
       if (re == NULL) {
 	error("%s: %s at position %d of expression", nm.c_str(), 
 	      err, erroffset);
 	return retval;
       }
 
@@ -207,18 +258,18 @@ octregexp (const octave_value_list &args
 
       OCTAVE_LOCAL_BUFFER(int, ovector, (subpatterns+1)*3);
       OCTAVE_LOCAL_BUFFER(int, nidx, namecount);
 
       for (int i = 0; i < namecount; i++)
 	{
 	  // Index of subpattern in first two bytes MSB first of name.
 	  // Extract index.
-	  nidx[i] = ((int)nametable[i*nameentrysize]) << 8 |
-	    (int)nametable[i*nameentrysize+1];
+	  nidx[i] = (static_cast<int>(nametable[i*nameentrysize])) << 8 |
+	    static_cast<int>(nametable[i*nameentrysize+1]);
 	}
 
       Cell named_tokens(dim_vector(nnames,1));
 
       while(true)
 	{
 	  int matches = pcre_exec(re, NULL, buffer.c_str(), 
 				  buffer.length(), idx, 
@@ -228,18 +279,23 @@ octregexp (const octave_value_list &args
 	  if (matches < 0 && matches != PCRE_ERROR_NOMATCH)
 	    {
 	      error ("%s: internal error calling pcre_exec", nm.c_str());
 	      pcre_free(re);
 	      return retval;
 	    }
 	  else if (matches == PCRE_ERROR_NOMATCH)
 	    break;
+	  else if (ovector[1] <= ovector[0])
+	    break;
 	  else
 	    {
+	      // FIXME Should collect arguments in a linked structure and
+	      // resize and assign the return value a single time to make
+	      // this function O(n) rather than O(n^2) as it currently is.
 	      int pos_match = 0;
 	      s.resize (dim_vector(1, sz+1));
 	      s(sz) = double (ovector[0]+1);
 	      e.resize (dim_vector(1, sz+1));
 	      e(sz) = double (ovector[1]);
 	      te.resize(dim_vector(1, sz+1));
 	      Matrix mat_te(matches-1,2);
 	      for (int i = 1; i < matches; i++)
@@ -395,17 +451,28 @@ octregexp (const octave_value_list &args
 	  for (int i = 0; i < 6; i++)
 	    arg_used[i] = false;
 	  
 	  for (int i = 2; i < nargin; i++)
 	    {
 	      int k = 0;
 	      std::string str = args(i).string_value();
 	      std::transform (str.begin (), str.end (), str.begin (), tolower);
-	      if (str.find("once", 0) == 0)
+	      if (str.find("once", 0) == 0
+#if HAVE_PCRE
+		  || str.find("stringanchors", 0) == 0
+		  || str.find("lineanchors", 0) == 0
+		  || str.find("matchcase", 0) == 0
+		  || str.find("ignorecase", 0) == 0
+		  || str.find("dotall", 0) == 0
+		  || str.find("dotexceptnewline", 0) == 0
+		  || str.find("literalspacing", 0) == 0
+		  || str.find("freespacing", 0) == 0
+#endif
+	      )
 		continue;
 	      else if (str.find("start", 0) == 0)
 		k = 0;
 	      else if (str.find("end", 0) == 0)
 		k = 1;
 	      else if (str.find("tokenextents", 0) == 0)
 		k = 2;
 	      else if (str.find("match", 0) == 0)
@@ -432,17 +499,17 @@ octregexp (const octave_value_list &args
 		}
 	    }
 
 	  retval = new_retval;
 	}
     }
 
 #else
-  error ("%s: not available in this version of Octave", nm);
+  error ("%s: not available in this version of Octave", nm.c_str());
 #endif
   return retval;
 }
 
 DEFUN_DLD (regexp, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{s}, @var{e}, @var{te}, @var{m}, @var{t}, @var{nm}] =} regexp (@var{str}, @var{pat})\n\
 @deftypefnx {Loadable Function} {[@dots{}] =} regexp (@var{str}, @var{pat}, @var{opts}, @dots{})\n\
@@ -546,17 +613,37 @@ are\n\
 @item @tab 'end'          @tab @var{e}  @tab\n\
 @item @tab 'tokenExtents' @tab @var{te} @tab\n\
 @item @tab 'match'        @tab @var{m}  @tab\n\
 @item @tab 'tokens'       @tab @var{t}  @tab\n\
 @item @tab 'names'        @tab @var{nm}  @tab\n\
 @end multitable\n\
 \n\
 A further optional argument is 'once', that limits the number of returned\n\
-matches to the first match.\n\
+matches to the first match. Additional arguments are\n\
+\n\
+@table @asis\n\
+@item matchcase\n\
+Make the matching case sensitive.\n\
+@item ignorecase\n\
+Make the matching case insensitive.\n\
+@item stringanchors\n\
+Match the anchor characters at the beginning and end of the string.\n\
+@item lineanchors\n\
+Match the anchor characters at the beginning and end of the line.\n\
+@item dotall\n\
+The character @code{.} matches the newline character.\n\
+@item dotexceptnewline\n\
+The character @code{.} matches all but the newline character.\n\
+@item freespacing\n\
+The pattern can include arbitrary whitespace and comments starting with\n\
+@code{#}.\n\
+@item literalspacing\n\
+The pattern is taken literally.\n\
+@end table\n\
 @end deftypefn")
 {
   return octregexp (args, nargout, "regexp", false);
 }
 
 /*
 
 ## seg-fault test
@@ -673,16 +760,52 @@ matches to the first match.\n\
 %!   assert (t{2}{2},'James');
 %!   assert (size(nm), [1,1]);
 %!   assert (nm.first{1},'John');
 %!   assert (nm.first{2},'James');
 %!   assert (nm.last{1},'Davis');
 %!   assert (nm.last{2},'Rogers');
 %! endif
 
+%!assert(regexp("abc\nabc",'.'),[1:7])
+%!assert(regexp("abc\nabc",'.','dotall'),[1:7])
+%!test
+%! if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_PCRE")))
+%!   assert(regexp("abc\nabc",'(?s).'),[1:7])
+%!   assert(regexp("abc\nabc",'.','dotexceptnewline'),[1,2,3,5,6,7])
+%!   assert(regexp("abc\nabc",'(?-s).'),[1,2,3,5,6,7])
+%! endif
+
+%!assert(regexp("caseCaSe",'case'),1)
+%!assert(regexp("caseCaSe",'case',"matchcase"),1)
+%!assert(regexp("caseCaSe",'case',"ignorecase"),[1,5])
+%!test
+%! if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_PCRE")))
+%!   assert(regexp("caseCaSe",'(?-i)case'),1)
+%!   assert(regexp("caseCaSe",'(?i)case'),[1,5])
+%! endif
+
+%!assert (regexp("abc\nabc",'c$'),7)
+%!assert (regexp("abc\nabc",'c$',"stringanchors"),7)
+%!test
+%! if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_PCRE")))
+%!   assert (regexp("abc\nabc",'(?-m)c$'),7)
+%!   assert (regexp("abc\nabc",'c$',"lineanchors"),[3,7])
+%!   assert (regexp("abc\nabc",'(?m)c$'),[3,7])
+%! endif
+
+%!assert (regexp("this word",'s w'),4)
+%!assert (regexp("this word",'s w','literalspacing'),4)
+%!test
+%! if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_PCRE")))
+%!   assert (regexp("this word",'(?-x)s w','literalspacing'),4)
+%!   assert (regexp("this word",'s w','freespacing'),[])
+%!   assert (regexp("this word",'(?x)s w'),[])
+%! endif
+
 %!error regexp('string', 'tri', 'BadArg');
 %!error regexp('string');
 
 */
 
 DEFUN_DLD(regexpi, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{s}, @var{e}, @var{te}, @var{m}, @var{t}, @var{nm}] =} regexpi (@var{str}, @var{pat})\n\
@@ -796,16 +919,52 @@ if there are none. See @code{regexp} for
 %!   assert (t{1}{2},'Test')
 %!   assert (size(nm), [1,1])
 %!   assert (!isempty(fieldnames(nm)))
 %!   assert (sort(fieldnames(nm)),{'word1';'word2'})
 %!   assert (nm.word1,'ShoRt')
 %!   assert (nm.word2,'Test')
 %! endif
 
+%!assert(regexpi("abc\nabc",'.'),[1:7])
+%!assert(regexpi("abc\nabc",'.','dotall'),[1:7])
+%!test
+%! if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_PCRE")))
+%!   assert(regexpi("abc\nabc",'(?s).'),[1:7])
+%!   assert(regexpi("abc\nabc",'.','dotexceptnewline'),[1,2,3,5,6,7])
+%!   assert(regexpi("abc\nabc",'(?-s).'),[1,2,3,5,6,7])
+%! endif
+
+%!assert(regexpi("caseCaSe",'case'),[1,5])
+%!assert(regexpi("caseCaSe",'case',"matchcase"),1)
+%!assert(regexpi("caseCaSe",'case',"ignorecase"),[1,5])
+%!test
+%! if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_PCRE")))
+%!   assert(regexpi("caseCaSe",'(?-i)case'),1)
+%!   assert(regexpi("caseCaSe",'(?i)case'),[1,5])
+%! endif
+
+%!assert (regexpi("abc\nabc",'c$'),7)
+%!assert (regexpi("abc\nabc",'c$',"stringanchors"),7)
+%!test
+%! if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_PCRE")))
+%!   assert (regexpi("abc\nabc",'(?-m)c$'),7)
+%!   assert (regexpi("abc\nabc",'c$',"lineanchors"),[3,7])
+%!   assert (regexpi("abc\nabc",'(?m)c$'),[3,7])
+%! endif
+
+%!assert (regexpi("this word",'s w'),4)
+%!assert (regexpi("this word",'s w','literalspacing'),4)
+%!test
+%! if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_PCRE")))
+%!   assert (regexpi("this word",'(?-x)s w','literalspacing'),4)
+%!   assert (regexpi("this word",'s w','freespacing'),[])
+%!   assert (regexpi("this word",'(?x)s w'),[])
+%! endif
+
 %!error regexpi('string', 'tri', 'BadArg');
 %!error regexpi('string');
 
 */
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
