# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1231967208 18000
#      Wed Jan 14 16:06:48 2009 -0500
# Node ID ec2715c76039c09552188d2deb2f947f585b4e3f
# Parent  39867b4aca52b614b74b01026a7b3cb26033c7e9
fzero.m, fsolve.m: additional doc fixes

diff --git a/doc/interpreter/nonlin.txi b/doc/interpreter/nonlin.txi
--- a/doc/interpreter/nonlin.txi
+++ b/doc/interpreter/nonlin.txi
@@ -147,8 +147,9 @@ Using this Jacobian is done with the fol
 
 @example
 [x, fval, info] = fsolve (@{@@f, @@jacobian@}, [1; 2]);
 @end example
 
 @noindent
 which gives the same solution as before.
 
+@DOCSTRING(fzero)
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -24,20 +24,21 @@
 ## Solve a system of nonlinear equations defined by the function @var{fcn}.
 ## @var{fcn} should accepts a vector (array) defining the unknown variables,
 ## and return a vector of left-hand sides of the equations. Right-hand sides
 ## are defined to be zeros.
 ## In other words, this function attempts to determine a vector @var{x} such 
 ## that @code{@var{fcn} (@var{x})} gives (approximately) all zeros.
 ## @var{x0} determines a starting guess. The shape of @var{x0} is preserved
 ## in all calls to @var{fcn}, but otherwise it is treated as a column vector.
-## @var{options} is a structure specifying additional options. Currently, fsolve
-## recognizes these options: @code{"FunValCheck"}, @code{"OutputFcn"},
-## @code{"TolX"}, @code{"TolFun"}, @code{"MaxIter"},
-## @code{"MaxFunEvals"}, and @code{"Jacobian"}.
+## @var{options} is a structure specifying additional options.
+## Currently, @code{fsolve} recognizes these options:
+## @code{"FunValCheck"}, @code{"OutputFcn"}, @code{"TolX"},
+## @code{"TolFun"}, @code{"MaxIter"}, @code{"MaxFunEvals"}, and
+## @code{"Jacobian"}.
 ##
 ## If @code{"Jacobian"} is @code{"on"}, it specifies that @var{fcn},
 ## called with 2 output arguments, also returns the Jacobian matrix
 ## of right-hand sides at the requested point.  @code{"TolX"} specifies
 ## the termination tolerance in the unknown variables, while 
 ## @code{"TolFun"} is a tolerance for equations. Default is @code{1e1*eps}
 ## for @code{"TolX"} and @code{1e2*eps} for @code{"TolFun"}.
 ## For description of the other options, see @code{optimset}.
diff --git a/scripts/optimization/fzero.m b/scripts/optimization/fzero.m
--- a/scripts/optimization/fzero.m
+++ b/scripts/optimization/fzero.m
@@ -15,21 +15,22 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 ##
 ## Author: Jaroslav Hajek <highegg@gmail.com>
 
 ## -*- texinfo -*-
 ## @deftypefn{Function File}{[@var{x}, @var{fval}, @var{info}, @var{output}] =} fzero (@var{fun}, @var{x0}, @var{options})
-## Finds a zero point of a univariate function. @var{fun} should be a function
+## Find a zero point of a univariate function. @var{fun} should be a function
 ## handle or name. @var{x0} specifies a starting point. @var{options} is a
-## structure specifying additional options. Currently, fzero recognizes these
-## options: FunValCheck, OutputFcn, TolX, MaxIter, MaxFunEvals. 
-## For description of these options, see @code{optimset}.
+## structure specifying additional options. Currently, @code{fzero}
+## recognizes these options: @code{"FunValCheck"}, @code{"OutputFcn"},
+## @code{"TolX"}, @code{"MaxIter"}, @code{"MaxFunEvals"}. 
+## For description of these options, see @ref{doc-optimset,,optimset}.
 ## 
 ## On exit, the function returns @var{x}, the approximate zero point
 ## and @var{fval}, the function value thereof.
 ## @var{info} is an exit flag that can have these values:
 ## @itemize
 ## @item 1
 ## The algorithm converged to a solution.
 ## @item 0
@@ -38,17 +39,17 @@
 ## The algorithm has been terminated from user output function.
 ## @item -2 
 ## A general unexpected error.
 ## @item -3
 ## A non-real value encountered.
 ## @item -4
 ## A NaN value encountered.
 ## @end itemize
-## @seealso{optimset, fminbnd, fsolve} 
+## @seealso{optimset, fsolve} 
 ## @end deftypefn
 
 ## This is essentially the ACM algorithm 748: Enclosing Zeros of
 ## Continuous Functions due to Alefeld, Potra and Shi, ACM Transactions
 ## on Mathematical Software, Vol. 21, No. 3, September 1995. Although
 ## the workflow should be the same, the structure of the algorithm has
 ## been transformed non-trivially; instead of the authors' approach of
 ## sequentially calling building blocks subprograms we implement here a
