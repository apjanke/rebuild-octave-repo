# HG changeset patch
# User Rik <rik@octave.org>
# Date 1473371172 25200
#      Thu Sep 08 14:46:12 2016 -0700
# Node ID e337b8e3592ca408c409812fea2baa03f0fcd131
# Parent  809989ceb5d34a045cba2c3a526a3fe8361aa2c5
Fix double free causing segfault in mxSetDimensions (bug #49010).

* mex.cc (mxArray_matlab::set_dimensions): mxFree existing dims,
and then malloc new memory and copy over dims.
* mex.cc: Use space between pointers and commented names of input
arguments for clarity and to stop the syntax highlighter from
freaking out.

* mxarray.in.h: Add comment about why we are not using uint16 for mxChar.

diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -291,17 +291,17 @@ public:
 
     return ndims;
   }
 
   void set_m (mwSize /*m*/) { request_mutation (); }
 
   void set_n (mwSize /*n*/) { request_mutation (); }
 
-  void set_dimensions (mwSize */*dims_arg*/, mwSize /*ndims_arg*/)
+  void set_dimensions (mwSize * /*dims_arg*/, mwSize /*ndims_arg*/)
   {
     request_mutation ();
   }
 
   mwSize get_number_of_elements (void) const { return val.numel (); }
 
   int is_empty (void) const { return val.is_empty (); }
 
@@ -352,26 +352,26 @@ public:
         std::string s = val.class_name ();
         class_name = mxArray::strsave (s.c_str ());
       }
 
     return class_name;
   }
 
   // Not allowed.
-  void set_class_name (const char */*name_arg*/) { request_mutation (); }
+  void set_class_name (const char * /*name_arg*/) { request_mutation (); }
 
   mxArray *get_cell (mwIndex /*idx*/) const
   {
     request_mutation ();
     return 0;
   }
 
   // Not allowed.
-  void set_cell (mwIndex /*idx*/, mxArray */*val*/) { request_mutation (); }
+  void set_cell (mwIndex /*idx*/, mxArray * /*val*/) { request_mutation (); }
 
   double get_scalar (void) const { return val.scalar_value (true); }
 
   void *get_data (void) const
   {
     void *retval = val.mex_get_data ();
 
     if (retval)
@@ -390,74 +390,74 @@ public:
       retval = 0;
     else
       request_mutation ();
 
     return retval;
   }
 
   // Not allowed.
-  void set_data (void */*pr*/) { request_mutation (); }
+  void set_data (void * /*pr*/) { request_mutation (); }
 
   // Not allowed.
-  void set_imag_data (void */*pi*/) { request_mutation (); }
+  void set_imag_data (void * /*pi*/) { request_mutation (); }
 
   mwIndex *get_ir (void) const
   {
     return static_cast<mwIndex *> (maybe_mark_foreign (val.mex_get_ir ()));
   }
 
   mwIndex *get_jc (void) const
   {
     return static_cast<mwIndex *> (maybe_mark_foreign (val.mex_get_jc ()));
   }
 
   mwSize get_nzmax (void) const { return val.nzmax (); }
 
   // Not allowed.
-  void set_ir (mwIndex */*ir*/) { request_mutation (); }
+  void set_ir (mwIndex * /*ir*/) { request_mutation (); }
 
   // Not allowed.
-  void set_jc (mwIndex */*jc*/) { request_mutation (); }
+  void set_jc (mwIndex * /*jc*/) { request_mutation (); }
 
   // Not allowed.
   void set_nzmax (mwSize /*nzmax*/) { request_mutation (); }
 
   // Not allowed.
-  int add_field (const char */*key*/)
+  int add_field (const char * /*key*/)
   {
     request_mutation ();
     return 0;
   }
 
   // Not allowed.
   void remove_field (int /*key_num*/) { request_mutation (); }
 
   mxArray *get_field_by_number (mwIndex /*index*/, int /*key_num*/) const
   {
     request_mutation ();
     return 0;
   }
 
   // Not allowed.
   void set_field_by_number (mwIndex /*index*/, int /*key_num*/,
-                            mxArray */*val*/)
+                            mxArray * /*val*/)
   {
     request_mutation ();
   }
 
   int get_number_of_fields (void) const { return val.nfields (); }
 
   const char *get_field_name_by_number (int /*key_num*/) const
   {
     request_mutation ();
     return 0;
   }
 
-  int get_field_number (const char */*key*/) const
+  int get_field_number (const char * /*key*/) const
   {
     request_mutation ();
     return 0;
   }
 
   int get_string (char *buf, mwSize buflen) const
   {
     int retval = 1;
@@ -732,18 +732,24 @@ public:
   mwSize get_number_of_dimensions (void) const { return ndims; }
 
   void set_m (mwSize m) { dims[0] = m; }
 
   void set_n (mwSize n) { dims[1] = n; }
 
   void set_dimensions (mwSize *dims_arg, mwSize ndims_arg)
   {
-    dims = dims_arg;
     ndims = ndims_arg;
+
+    mxFree (dims);
+    dims = (ndims > 0 ? static_cast<mwSize *>
+                          (mxArray::malloc (ndims * sizeof (mwSize)))
+                      : 0);
+    for (int i = 0; i < ndims; i++)
+      dims[i] = dims_arg[i];
   }
 
   mwSize get_number_of_elements (void) const
   {
     mwSize retval = dims[0];
 
     for (mwIndex i = 1; i < ndims; i++)
       retval *= dims[i];
@@ -785,17 +791,17 @@ public:
     strcpy (class_name, name_arg);
   }
 
   mxArray *get_cell (mwIndex /*idx*/) const
   {
     err_invalid_type ();
   }
 
-  void set_cell (mwIndex /*idx*/, mxArray */*val*/)
+  void set_cell (mwIndex /*idx*/, mxArray * /*val*/)
   {
     err_invalid_type ();
   }
 
   double get_scalar (void) const
   {
     err_invalid_type ();
   }
@@ -805,22 +811,22 @@ public:
     err_invalid_type ();
   }
 
   void *get_imag_data (void) const
   {
     err_invalid_type ();
   }
 
-  void set_data (void */*pr*/)
+  void set_data (void * /*pr*/)
   {
     err_invalid_type ();
   }
 
-  void set_imag_data (void */*pi*/)
+  void set_imag_data (void * /*pi*/)
   {
     err_invalid_type ();
   }
 
   mwIndex *get_ir (void) const
   {
     err_invalid_type ();
   }
@@ -830,68 +836,68 @@ public:
     err_invalid_type ();
   }
 
   mwSize get_nzmax (void) const
   {
     err_invalid_type ();
   }
 
-  void set_ir (mwIndex */*ir*/)
+  void set_ir (mwIndex * /*ir*/)
   {
     err_invalid_type ();
   }
 
-  void set_jc (mwIndex */*jc*/)
+  void set_jc (mwIndex * /*jc*/)
   {
     err_invalid_type ();
   }
 
   void set_nzmax (mwSize /*nzmax*/)
   {
     err_invalid_type ();
   }
 
-  int add_field (const char */*key*/)
+  int add_field (const char * /*key*/)
   {
     err_invalid_type ();
   }
 
   void remove_field (int /*key_num*/)
   {
     err_invalid_type ();
   }
 
   mxArray *get_field_by_number (mwIndex /*index*/, int /*key_num*/) const
   {
     err_invalid_type ();
   }
 
   void set_field_by_number (mwIndex /*index*/, int /*key_num*/,
-                            mxArray */*val*/)
+                            mxArray * /*val*/)
   {
     err_invalid_type ();
   }
 
   int get_number_of_fields (void) const
   {
     err_invalid_type ();
   }
 
   const char *get_field_name_by_number (int /*key_num*/) const
   {
     err_invalid_type ();
   }
 
-  int get_field_number (const char */*key*/) const
+  int get_field_number (const char * /*key*/) const
   {
     return -1;
   }
 
-  int get_string (char */*buf*/, mwSize /*buflen*/) const
+  int get_string (char * /*buf*/, mwSize /*buflen*/) const
   {
     err_invalid_type ();
   }
 
   char *array_to_string (void) const
   {
     err_invalid_type ();
   }
@@ -1820,17 +1826,17 @@ public:
                                      sizeof (mxArray *)))) { }
 
   mxArray_base *dup (void) const { return new mxArray_cell (*this); }
 
   ~mxArray_cell (void)
   {
     mwSize nel = get_number_of_elements ();
 
-    for  (mwIndex i = 0; i < nel; i++)
+    for (mwIndex i = 0; i < nel; i++)
       delete data[i];
 
     mxFree (data);
   }
 
   mxArray *get_cell (mwIndex idx) const
   {
     return idx >= 0 && idx < get_number_of_elements () ? data[idx] : 0;
diff --git a/libinterp/corefcn/mxarray.in.h b/libinterp/corefcn/mxarray.in.h
--- a/libinterp/corefcn/mxarray.in.h
+++ b/libinterp/corefcn/mxarray.in.h
@@ -75,16 +75,17 @@ typedef enum
   mxINT64_CLASS,
   mxUINT64_CLASS,
   mxFUNCTION_CLASS
 }
 mxClassID;
 
 typedef unsigned char mxLogical;
 
+/* Matlab uses a wide char (uint16) internally, but Octave uses plain char. */
 /* typedef Uint16 mxChar; */
 typedef char mxChar;
 
 /*
  * FIXME: Mathworks says these should be size_t on 64-bit system and when
  * mex is used with the -largearraydims flag, but why do that?  Its better
  * to conform to the same indexing as the rest of Octave.
  */
