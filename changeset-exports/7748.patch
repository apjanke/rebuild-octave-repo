# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1209666772 14400
#      Thu May 01 14:32:52 2008 -0400
# Node ID 3dc91baee089352a04d96f117af3998b2f7e1315
# Parent  7a0317f740f729d1a06e81e55ca6ed482001442d
dynamic-ld.cc: cleanups

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2008-05-01  John W. Eaton  <jwe@octave.org>
+
+	* dynamic-ld.cc (octave_dynamic_loader::do_load_oct): No need to
+	do load_path lookups here.
+	(octave_shlib_list::iterator, octave_shlib_list::const_iterator):
+	New typedefs.
+	(octave_shlib_list::do_remove, octave_shlib_list::do_search,
+	octave_shlib_list::do_display): Use them.
+	(octave_mex_file_list::iterator, octave_mex_file_list::const_iterator):
+	New typedefs.
+	(octave_mex_file_list::do_remove): Use them.
+
 2008-04-30  John W. Eaton  <jwe@octave.org>
 
 	* dynamic-ld.cc (octave_dynamic_loader::do_load_oct):
 	If function already exists, reload it anyway.  Clear existing
 	oct_file only if reloading a function from the same file.
 	(octave_shlib_list::display): New static function.
 	(octave_shlib_list::do_display): New function.
 
diff --git a/src/dynamic-ld.cc b/src/dynamic-ld.cc
--- a/src/dynamic-ld.cc
+++ b/src/dynamic-ld.cc
@@ -46,16 +46,19 @@ along with Octave; see the file COPYING.
 #define STRINGIFY(s) STRINGIFY1(s)
 #define STRINGIFY1(s) #s
 
 class
 octave_shlib_list
 {
 public:
 
+  typedef std::list<octave_shlib>::iterator iterator;
+  typedef std::list<octave_shlib>::const_iterator const_iterator;
+
   static void append (const octave_shlib& shl);
 
   static void remove (octave_shlib& shl, octave_shlib::close_hook cl_hook = 0);
 
   static void *search (const std::string& fcn_name, octave_shlib& shl,
 		       octave_shlib::name_mangler mangler = 0);
 
   static void display (void);
@@ -96,19 +99,17 @@ octave_shlib_list::do_append (const octa
 {
   lib_list.push_back (shl);
 }
 
 void
 octave_shlib_list::do_remove (octave_shlib& shl,
 			      octave_shlib::close_hook cl_hook)
 {
-  for (std::list<octave_shlib>::iterator p = lib_list.begin ();
-       p != lib_list.end ();
-       p++)
+  for (iterator p = lib_list.begin (); p != lib_list.end (); p++)
     {
       if (*p == shl)
 	{
 	  shl.close (cl_hook);
 
 	  lib_list.erase (p);
 
 	  break;
@@ -119,19 +120,17 @@ octave_shlib_list::do_remove (octave_shl
 void *
 octave_shlib_list::do_search (const std::string& fcn_name, octave_shlib& shl,
 			      octave_shlib::name_mangler mangler)
 {
   void *function = 0;
 
   shl = octave_shlib ();
 
-  for (std::list<octave_shlib>::iterator p = lib_list.begin ();
-       p != lib_list.end ();
-       p++)
+  for (iterator p = lib_list.begin (); p != lib_list.end (); p++)
     {
       function = p->search (fcn_name, mangler);
 
       if (function)
 	{
 	  shl = *p;
 
 	  break;
@@ -140,18 +139,17 @@ octave_shlib_list::do_search (const std:
 
   return function;
 }
 
 void
 octave_shlib_list::do_display (void) const
 {
   std::cerr << "current shared libraries:" << std::endl;
-  for (std::list<octave_shlib>::const_iterator p = lib_list.begin ();
-       p != lib_list.end (); p++)
+  for (const_iterator p = lib_list.begin (); p != lib_list.end (); p++)
     std::cerr << "  " << p->file_name () << std::endl;
 }
 
 bool
 octave_shlib_list::instance_ok (void)
 {
   bool retval = true;
 
@@ -197,16 +195,19 @@ octave_shlib_list::display (void)
     instance->do_display ();
 }
 
 class
 octave_mex_file_list
 {
 public:
 
+  typedef std::list<octave_shlib>::iterator iterator;
+  typedef std::list<octave_shlib>::const_iterator const_iterator;
+
   static void append (const octave_shlib& shl);
 
   static void remove (octave_shlib& shl, octave_shlib::close_hook cl_hook = 0);
 
 private:
 
   octave_mex_file_list (void) { }
 
@@ -237,20 +238,17 @@ octave_mex_file_list::do_append (const o
 {
   file_list.push_back (shl);
 }
 
 void
 octave_mex_file_list::do_remove (octave_shlib& shl,
 				 octave_shlib::close_hook cl_hook)
 {
-  
-  for (std::list<octave_shlib>::iterator p = file_list.begin ();
-       p != file_list.end ();
-       p++)
+  for (iterator p = file_list.begin (); p != file_list.end (); p++)
     {
       if (*p == shl)
 	{
 	  shl.close (cl_hook);
 
 	  file_list.erase (p);
 
 	  break;
@@ -369,55 +367,32 @@ octave_dynamic_loader::do_load_oct (cons
 	    clear (oct_file);
 
 	  function = 0;
 	}
 
       if (! reloading)
 	oct_file = octave_shlib ();
 
-      std::string oct_file_name = file_name;
-
-      if (oct_file_name.empty ())
-	{
-	  oct_file_name = oct_file_in_path (fcn_name);
+      oct_file.open (file_name);
 
-	  if (! oct_file_name.empty ())
-	    relative = ! octave_env::absolute_pathname (oct_file_name);
-	}
-
-      if (oct_file_name.empty ())
+      if (! error_state)
 	{
-	  if (oct_file.is_relative ())
+	  if (oct_file)
 	    {
-	      // Can't see this function from current
-	      // directory, so we should clear it.
-	      clear (oct_file);
-	      function = 0;
+	      if (relative)
+		oct_file.mark_relative ();
+
+	      octave_shlib_list::append (oct_file);
+
+	      function = oct_file.search (fcn_name, xmangle_name);
 	    }
-	}
-      else
-	{
-	  oct_file.open (oct_file_name);
-
-	  if (! error_state)
-	    {
-	      if (oct_file)
-		{
-		  if (relative)
-		    oct_file.mark_relative ();
-
-		  octave_shlib_list::append (oct_file);
-
-		  function = oct_file.search (fcn_name, xmangle_name);
-		}
-	      else
-		::error ("%s is not a valid shared library",
-			 oct_file_name.c_str ());
-	    }
+	  else
+	    ::error ("%s is not a valid shared library",
+		     file_name.c_str ());
 	}
     }
 
   if (function)
     {
       octave_dld_fcn_getter f
 	= FCN_PTR_CAST (octave_dld_fcn_getter, function);
 
