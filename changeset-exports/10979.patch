# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1284574664 14400
#      Wed Sep 15 14:17:44 2010 -0400
# Node ID 7f49dc864f32ac510efb696c3805af8c176cb94b
# Parent  71f38cba668d4ab8e1c81c2aa7e69ad31febea51
__magick_read__.cc: style fixes

diff --git a/src/DLD-FUNCTIONS/__magick_read__.cc b/src/DLD-FUNCTIONS/__magick_read__.cc
--- a/src/DLD-FUNCTIONS/__magick_read__.cc
+++ b/src/DLD-FUNCTIONS/__magick_read__.cc
@@ -422,18 +422,17 @@ function.  Instead you should use @code{
   Array<int> frameidx;
   bool all_frames = false;
 
   if (args.length () == 2 && args(1).is_real_type ())
     frameidx = args(1).int_vector_value();
   else if (args.length () == 3 && args(1).is_string () 
            && args(1).string_value() == "frames")
     {
-      if (args(2).is_string () 
-          && args(2).string_value() == "all")
+      if (args(2).is_string () && args(2).string_value() == "all")
         all_frames = true;
       else if (args(2).is_real_type ())
         frameidx = args(2).int_vector_value();
     }
   else
     {
       frameidx = Array<int> (1, 1);
       frameidx(0) = 1;
@@ -459,22 +458,22 @@ function.  Instead you should use @code{
       error ("Magick++ exception: %s", e.what ());
       return output;
     }
 
   int nframes = imvec.size ();
   if (all_frames)
     {
       frameidx = Array<int> (1, nframes);
-      for (int i = 0; i < frameidx.length(); i++)
+      for (int i = 0; i < frameidx.length (); i++)
         frameidx(i) = i;
     }
   else
     {
-      for (int i = 0; i < frameidx.length(); i++)
+      for (int i = 0; i < frameidx.length (); i++)
         {
           frameidx(i) = frameidx(i) - 1;
 
           if (frameidx(i) >= nframes || frameidx(i) < 0)
             {
               error ("__magick_read__: invalid index vector");
               return output;
             }
@@ -530,40 +529,48 @@ function.  Instead you should use @code{
 
 #ifdef HAVE_MAGICK
 
 static void
 jpg_settings (std::vector<Magick::Image>& imvec,
               const Octave_map& options,
               bool)
 {
-  bool something_set = 0;
+  bool something_set = false;
 
   // Quality setting
   octave_value result;
   Octave_map::const_iterator p;
-  bool found_it = 0;
+  bool found_it = false;
+
   for (p = options.begin (); p != options.end (); p++)
-    if (options.key (p) == "Quality")
-      {
-        found_it = 1;
-        result = options.contents (p).elem (0);
-        break;
-      }
+    {
+      if (options.key (p) == "Quality")
+        {
+          found_it = true;
+          result = options.contents (p).elem (0);
+          break;
+        }
+    }
+
   if (found_it && (! result.is_empty ()))
     {
-      something_set = 1;
+      something_set = true;
+
       if (result.is_real_type ())
         {
           int qlev = result.int_value ();
+
           if (qlev < 0 || qlev > 100)
             warning ("warning: Quality setting invalid--use default of 75");
           else
-            for (size_t fnum = 0; fnum < imvec.size (); fnum++)
-              imvec[fnum].quality (static_cast<unsigned int>(qlev));
+            {
+              for (size_t fnum = 0; fnum < imvec.size (); fnum++)
+                imvec[fnum].quality (static_cast<unsigned int>(qlev));
+            }
         }
       else
         warning ("warning: Quality setting invalid--use default of 75");
     }
 
   // Other settings go here
 
   if (! something_set)
@@ -586,31 +593,35 @@ encode_bool_image (std::vector<Magick::I
   octave_idx_type columns = m.columns ();
 
   for (unsigned int ii = 0; ii < nframes; ii++)
     {
       Magick::Image im(Magick::Geometry (columns, rows), "black");
       im.classType (Magick::DirectClass);
       im.depth (1);
 
-      for (int y=0; y < columns; y++)
+      for (int y = 0; y < columns; y++)
         {
           idx(1) = y;
-          for (int x=0; x < rows; x++)
+
+          for (int x = 0; x < rows; x++)
             {
               if (nframes > 1)
                 {
                   idx(2) = 0;
                   idx(3) = ii;
                 }
+
               idx(0) = x;
+
               if (m(idx))
                 im.pixelColor (y, x, "white");
             }
         }
+
       imvec.push_back (im);
     }
 }
 
 template <class T>
 static void
 encode_uint_image (std::vector<Magick::Image>& imvec,
                    const octave_value& img,
@@ -631,100 +642,114 @@ encode_uint_image (std::vector<Magick::I
     }
   else
     error ("__magick_write__: invalid image class");
 
   dim_vector dsizes = m.dims ();
   unsigned int nframes = 1;
   if (dsizes.length () == 4)
     nframes = dsizes(3);
+
   bool is_color = ((dsizes.length () > 2) && (dsizes(2) > 2));
   bool has_alpha = (dsizes.length () > 2 && (dsizes(2) == 2 || dsizes(2) == 4));
 
   Array<octave_idx_type> idx (dsizes.length (), 1);
   octave_idx_type rows = m.rows ();
   octave_idx_type columns = m.columns ();
 
   // FIXME -- maybe simply using bit shifting would be better?
   unsigned int div_factor = pow (2.0, static_cast<int> (bitdepth)) - 1;
 
   for (unsigned int ii = 0; ii < nframes; ii++)
     {
-      Magick::Image im(Magick::Geometry (columns, rows), "black");
+      Magick::Image im (Magick::Geometry (columns, rows), "black");
+
       im.depth (bitdepth);
+
       if (has_map)
         im.classType (Magick::PseudoClass);
       else
         im.classType (Magick::DirectClass);
 
       if (is_color)
         {
           if (has_alpha)
             im.type (Magick::TrueColorMatteType);
           else
             im.type (Magick::TrueColorType);
 
           Magick::ColorRGB c;
-          for (int y=0; y < columns; y++)
+
+          for (int y = 0; y < columns; y++)
             {
               idx(1) = y;
-              for (int x=0; x < rows; x++)
+
+              for (int x = 0; x < rows; x++)
                 {
                   idx(0) = x;
+
                   if (nframes > 1)
                     idx(3) = ii;
 
                   idx(2) = 0;
                   c.red (static_cast<double>(m(idx)) / div_factor);
+
                   idx(2) = 1;
                   c.green (static_cast<double>(m(idx)) / div_factor);
+
                   idx(2) = 2;
                   c.blue (static_cast<double>(m(idx)) / div_factor);
 
                   if (has_alpha)
                     {
                       idx(2) = 3;
                       c.alpha (static_cast<double>(m(idx)) / div_factor);
                     }
+
                   im.pixelColor (y, x, c);
                 }
             }
         }
       else
         {
           if (has_alpha)
             im.type (Magick::GrayscaleMatteType);
           else
             im.type (Magick::GrayscaleType);
 
           Magick::ColorGray c;
 
-          for (int y=0; y < columns; y++)
+          for (int y = 0; y < columns; y++)
             {
               idx(1) = y;
+
               for (int x=0; x < rows; x++)
                 {
                   idx(0) = x;
+
                   if (nframes > 1)
                     {
                       idx(2) = 0;
                       idx(3) = ii;
                     }
+
                   if (has_alpha)
                     {
                       idx(2) = 1;
                       c.alpha (static_cast<double>(m(idx)) / div_factor);
                       idx(2) = 0;
                     }
 
                   c.shade (static_cast<double>(m(idx)) / div_factor);
+
                   im.pixelColor (y, x, c);
                 }
             }
         }
+
       imvec.push_back (im);
     }
 }
 
 static void
 encode_map (std::vector<Magick::Image>& imvec, const NDArray& cmap)
 {
   unsigned int mapsize = cmap.dim1 ();
@@ -804,17 +829,17 @@ write_image (const std::string& filename
       if (fmt == "jpg" || fmt == "jpeg")
         jpg_settings (imvec, options, has_map);
       else
         warning ("warning: your parameter(s) currently not supported");
     }
 
   try
     {
-      for (int i = 0; i < imvec.size (); i++)
+      for (size_t i = 0; i < imvec.size (); i++)
         imvec[i].magick (fmt);
           
       Magick::writeImages (imvec.begin (), imvec.end (), filename);
     }
   catch (Magick::Warning& w)
     {
       warning ("Magick++ warning: %s", w.what ());
     }
