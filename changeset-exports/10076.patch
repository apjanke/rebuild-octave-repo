# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1263021889 18000
#      Sat Jan 09 02:24:49 2010 -0500
# Node ID 4b270d1540f758413d12535aece99714b3178679
# Parent  84b0725f4b09ebd5976b8dd677246eab43b85bc0
avoid various GCC warnings

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2010-01-09  John W. Eaton  <jwe@octave.org>
+
+	* interpreter/munge-texi.cc: Avoid C-style casts.
+	(main): Call usage if fewer than two arguments.
+
 2009-12-20  Rik <octave@nomad.inbox5.com>
 
 	* interpreter/geometryimages.m: Correctly set postscript output when QHULL
 	library does not exist and sombrero image is printed.
 
 2009-12-19  Rik <octave@nomad.inbox5.com>
 
 	* Makefile.am, faq/Makefile.am, interpreter/Makefile.am,
diff --git a/doc/interpreter/munge-texi.cc b/doc/interpreter/munge-texi.cc
--- a/doc/interpreter/munge-texi.cc
+++ b/doc/interpreter/munge-texi.cc
@@ -55,17 +55,17 @@ usage (void)
 
 static std::string
 extract_symbol_name (std::istream& is)
 {
   std::string symbol_name;
 
   int c;
   while ((c = is.get ()) != EOF && c != '\n')
-    symbol_name += (char) c;
+    symbol_name += static_cast<char> (c);
 
   return symbol_name;
 }
 
 static std::string
 extract_docstring (std::istream& is)
 {
   std::string doc;
@@ -73,26 +73,26 @@ extract_docstring (std::istream& is)
   int c;
   while ((c = is.get ()) != EOF && c != doc_delim)
     {
       // Expand @seealso commands to Texinfo references.
       if (c == '@')
         {
           char buf[16];
           int i = 0;
-          buf[i++] = (char) c;
+          buf[i++] = static_cast<char> (c);
           
-          if ((   buf[i++] = (char) is.get ()) == 's'  
-              && (buf[i++] = (char) is.get ()) == 'e'
-              && (buf[i++] = (char) is.get ()) == 'e'
-              && (buf[i++] = (char) is.get ()) == 'a'
-              && (buf[i++] = (char) is.get ()) == 'l'
-              && (buf[i++] = (char) is.get ()) == 's'
-              && (buf[i++] = (char) is.get ()) == 'o'
-              && (buf[i++] = (char) is.get ()) == '{')
+          if ((   buf[i++] = static_cast<char> (is.get ())) == 's'  
+              && (buf[i++] = static_cast<char> (is.get ())) == 'e'
+              && (buf[i++] = static_cast<char> (is.get ())) == 'e'
+              && (buf[i++] = static_cast<char> (is.get ())) == 'a'
+              && (buf[i++] = static_cast<char> (is.get ())) == 'l'
+              && (buf[i++] = static_cast<char> (is.get ())) == 's'
+              && (buf[i++] = static_cast<char> (is.get ())) == 'o'
+              && (buf[i++] = static_cast<char> (is.get ())) == '{')
             {
               doc += "@seealso{";
               
               bool first = true;
               
               // process @seealso parameters
               while ((c = is.get ()) != EOF
                      && c != doc_delim
@@ -110,17 +110,17 @@ extract_docstring (std::istream& is)
                     
                   // test for end of @seealso
                   if (c == '}') 
                     break;
                   
                   // get function name
 	          std::string function_name;
                   do 
-                    function_name += (char) c;
+                    function_name += static_cast<char> (c);
                   while ((c = is.get ()) != EOF
                           && c != doc_delim
                           && c != ' '
                           && c != '\t'
                           && c != '\r'
                           && c != '\n'
                           && c != ','
                           && c != '}');
@@ -135,26 +135,26 @@ extract_docstring (std::istream& is)
                   doc += "@ref{doc-" + function_name + ",,"
 		    + function_name + "}";
 
                   // test for end of @seealso
                   if (c == '}') 
                     break;
                 }
               if (c == '}')
-                doc += (char) c;
+                doc += static_cast<char> (c);
             }
           else
             {
               for (int j = 0; j < i; j++)
                 doc += buf[j];
             }
         }
       else
-        doc += (char) c;
+        doc += static_cast<char> (c);
     }
   return doc;
 }
 
 static void
 skip_comments (std::ifstream& is)
 {
   int c;
@@ -233,17 +233,17 @@ process_example_file (const std::string&
     {
       os << "@verbatim\n";
 
       int c;
       int clast = 0;
 
       while ((c = infile.get ()) != EOF)
 	{
-	  os << (char) c;
+	  os << static_cast<char> (c);
 	  clast = c;
 	}
 
       if (clast != '\n')
 	os << "\n";
 
       os << "@end verbatim\n";
     }
@@ -262,36 +262,36 @@ process_texi_input_file (std::istream& i
   while ((c = is.get ()) != EOF)
     {
       if (bol)
 	{
 	  if (c == '@')
 	    {
 	      char buf[16];
 	      int i = 0;
-	      buf[i++] = (char) c;
+	      buf[i++] = static_cast<char> (c);
 
-	      buf[i++] = c = (char) is.get ();
+	      buf[i++] = c = static_cast<char> (is.get ());
 
 	      if (c == 'D')
 		{
 		  std::string symbol_name;
 
-		  if (   (buf[i++] = (char) is.get ()) == 'O'
-		      && (buf[i++] = (char) is.get ()) == 'C'
-		      && (buf[i++] = (char) is.get ()) == 'S'
-		      && (buf[i++] = (char) is.get ()) == 'T'
-		      && (buf[i++] = (char) is.get ()) == 'R'
-		      && (buf[i++] = (char) is.get ()) == 'I'
-		      && (buf[i++] = (char) is.get ()) == 'N'
-		      && (buf[i++] = (char) is.get ()) == 'G'
-		      && (buf[i++] = (char) is.get ()) == '(')
+		  if (   (buf[i++] = static_cast<char> (is.get ())) == 'O'
+                      && (buf[i++] = static_cast<char> (is.get ())) == 'C'
+                      && (buf[i++] = static_cast<char> (is.get ())) == 'S'
+                      && (buf[i++] = static_cast<char> (is.get ())) == 'T'
+                      && (buf[i++] = static_cast<char> (is.get ())) == 'R'
+                      && (buf[i++] = static_cast<char> (is.get ())) == 'I'
+                      && (buf[i++] = static_cast<char> (is.get ())) == 'N'
+                      && (buf[i++] = static_cast<char> (is.get ())) == 'G'
+                      && (buf[i++] = static_cast<char> (is.get ())) == '(')
 		    {
 		      while ((c = is.get ()) != EOF && c != ')')
-			symbol_name += (char) c;
+			symbol_name += static_cast<char> (c);
 
 		      if (is.eof ())
 			fatal ("end of file while reading @DOCSTRING command");
 		      else
 			{
 			  std::string doc_string = help_text[symbol_name];
 
 			  size_t len = doc_string.length ();
@@ -338,64 +338,76 @@ process_texi_input_file (std::istream& i
 		    }
 		  else
 		    bol = recover_from_macro (os, buf, i);
 		}
 	      else if (c == 'E')
 		{
 		  std::string file_name;
 
-		  if (   (buf[i++] = (char) is.get ()) == 'X'
-		      && (buf[i++] = (char) is.get ()) == 'A'
-		      && (buf[i++] = (char) is.get ()) == 'M'
-		      && (buf[i++] = (char) is.get ()) == 'P'
-		      && (buf[i++] = (char) is.get ()) == 'L'
-		      && (buf[i++] = (char) is.get ()) == 'E'
-		      && (buf[i++] = (char) is.get ()) == 'F'
-		      && (buf[i++] = (char) is.get ()) == 'I'
-		      && (buf[i++] = (char) is.get ()) == 'L'
-		      && (buf[i++] = (char) is.get ()) == 'E'
-		      && (buf[i++] = (char) is.get ()) == '(')
+		  if (   (buf[i++] = static_cast<char> (is.get ())) == 'X'
+                      && (buf[i++] = static_cast<char> (is.get ())) == 'A'
+                      && (buf[i++] = static_cast<char> (is.get ())) == 'M'
+                      && (buf[i++] = static_cast<char> (is.get ())) == 'P'
+                      && (buf[i++] = static_cast<char> (is.get ())) == 'L'
+                      && (buf[i++] = static_cast<char> (is.get ())) == 'E'
+                      && (buf[i++] = static_cast<char> (is.get ())) == 'F'
+                      && (buf[i++] = static_cast<char> (is.get ())) == 'I'
+                      && (buf[i++] = static_cast<char> (is.get ())) == 'L'
+                      && (buf[i++] = static_cast<char> (is.get ())) == 'E'
+                      && (buf[i++] = static_cast<char> (is.get ())) == '(')
 		    {
 		      while ((c = is.get ()) != EOF && c != ')')
-			file_name += (char) c;
+			file_name += static_cast<char> (c);
 
 		      file_name = top_srcdir + "/examples/" + file_name;
 
 		      process_example_file (file_name, os);
 		    }
 		  else
 		    bol = recover_from_macro (os, buf, i);
 		}
 	      else
 		bol = recover_from_macro (os, buf, i);
 	    }
 	  else
-	    os.put ((char) c);
+	    os.put (static_cast<char> (c));
 	}
       else
 	{
 	  if (c == '\n')
 	    bol = true;
 
-	  os.put ((char) (c));
+	  os.put (static_cast<char> (c));
 	}
     }
 }
 
 int
 main (int argc, char **argv)
 {
-  top_srcdir = *++argv;
+  int retval = 0;
+
+  if (argc > 1)
+    {
+      top_srcdir = *++argv;
+
+      while (*++argv)
+        process_doc_file (*argv);
 
-  while (*++argv)
-    process_doc_file (*argv);
+      process_texi_input_file (std::cin, std::cout);
+    }
+  else
+    {
+      usage ();
 
-  process_texi_input_file (std::cin, std::cout);
+      retval = 1;
+    }
 
-  return 0;
+  return retval;
+
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,26 @@
+2010-01-09  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/lookup.cc (stri_comp_lt, stri_comp_gt):
+	Comment out unused functions.
+
+	* oct-stream.cc (BEGIN_S_CONVERSION): Don't declare local tmp
+	variable twice.
+
+	* gl-render.cc (opengl_renderer::draw_image): Avoid shadow
+	declaration warning from GCC.
+
+	* DLD-FUNCTIONS/fltk_backend.cc (base_graphics_backend):
+	Avoid unused parameter warning from GCC.
+	* dynamic-ld.cc (octave_dynamic_loader::do_load_mex): Likewise.
+
+	* data.cc (get_sort_mode_option): Avoid uninitialized variable
+	warning from GCC.
+
 2010-01-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-obj.h (octave_value_list::operator () const,
 	octave_value_list::elem const): Return const octave_value&.
 	* ov.cc (octave_value::function_value,
 	octave_value::user_function_value, octave_value::user_script_value,
 	octave_value::user_code_value, octave_value::fcn_handle_value,
 	octave_value::fcn_inline_value): Declare as const.
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -991,19 +991,19 @@ public:
   void redraw_figure (const graphics_object& go) const
   {
     figure_manager::mark_modified (go.get_handle ());
 
     __fltk_redraw__ ();
   }
 
   void print_figure (const graphics_object& go,
-		     const std::string& term,
-		     const std::string& file, bool mono,
-		     const std::string& debug_file) const 
+		     const std::string& /*term*/,
+		     const std::string& file, bool /*mono*/,
+		     const std::string& /*debug_file*/) const 
   { 
     figure_manager::print (go.get_handle (), file);
   }
 
   Matrix get_canvas_size (const graphics_handle& fh) const
   {
     return figure_manager::get_size (fh);
   }
diff --git a/src/DLD-FUNCTIONS/lookup.cc b/src/DLD-FUNCTIONS/lookup.cc
--- a/src/DLD-FUNCTIONS/lookup.cc
+++ b/src/DLD-FUNCTIONS/lookup.cc
@@ -56,34 +56,37 @@ struct icmp_char_lt : public std::binary
 };
 
 struct icmp_char_gt : public std::binary_function<char, char, bool>
 {
   bool operator () (char x, char y) const
     { return std::toupper (x) > std::toupper (y); }
 };
 
-// FIXME: maybe these should go elsewhere?
+// FIXME -- maybe these should go elsewhere?
+// FIXME -- are they even needed now?
 // case-insensitive ascending comparator
+#if 0
 static bool
 stri_comp_lt (const std::string& a, const std::string& b)
 {
   return std::lexicographical_compare (a.begin (), a.end (), 
                                        b.begin (), b.end (),
                                        icmp_char_lt());
 }
 
 // case-insensitive descending comparator
 static bool
 stri_comp_gt (const std::string& a, const std::string& b)
 {
   return std::lexicographical_compare (a.begin (), a.end (), 
                                        b.begin (), b.end (),
                                        icmp_char_gt());
 }
+#endif
 
 template <class T>
 inline sortmode 
 get_sort_mode (const Array<T>& array,
                typename octave_sort<T>::compare_fcn_type desc_comp
                = octave_sort<T>::descending_compare)
 {
   octave_idx_type n = array.numel ();
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -6086,17 +6086,20 @@ Undocumented internal function.\n\
     error ("__sort_rows_idx__: needs a 2-dimensional object");
 
   return retval;
 }
 
 static sortmode
 get_sort_mode_option (const octave_value& arg, const char *argn)
 {
-  sortmode smode;
+  // FIXME -- we initialize to UNSORTED here to avoid a GCC warning
+  // about possibly using sortmode uninitialized.
+  // FIXME -- shouldn't these modes be scoped inside a class?
+  sortmode smode = UNSORTED;
 
   std::string mode = arg.string_value ();
 
   if (error_state)
     error ("issorted: expecting %s argument to be a character string", argn);
   else if (mode == "ascending")
     smode = ASCENDING;
   else if (mode == "descending")
diff --git a/src/dynamic-ld.cc b/src/dynamic-ld.cc
--- a/src/dynamic-ld.cc
+++ b/src/dynamic-ld.cc
@@ -385,17 +385,17 @@ octave_dynamic_loader::do_load_oct (cons
     }
   
   return retval;
 }
 
 octave_function *
 octave_dynamic_loader::do_load_mex (const std::string& fcn_name,
 				    const std::string& file_name,
-				    bool relative)
+				    bool /*relative*/)
 {
   octave_function *retval = 0;
 
   unwind_protect frame;
 
   frame.protect_var (octave_dynamic_loader::doing_load);
 
   doing_load = true;
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -2711,29 +2711,30 @@ opengl_renderer::draw_image (const image
 
   if (w > 1) 
     {
       pix_dx = (p1(0) - p0(0))/(w-1);
       nor_dx = (x(1) - x(0))/(w-1);
     }
   else
     {
-      const ColumnVector p1 = xform.transform (x(1) + 1, y(1), 0);
-      pix_dx = p1(0) - p0(0);
+      const ColumnVector p1w = xform.transform (x(1) + 1, y(1), 0);
+      pix_dx = p1w(0) - p0(0);
       nor_dx = 1;
     }
+
   if (h > 1)
     {
       pix_dy = (p1(1) - p0(1))/(h-1);
       nor_dy = (y(1) - y(0))/(h-1);
     }
   else
     {
-      const ColumnVector p1 = xform.transform (x(1), y(1) + 1, 0);
-      pix_dy = p1(1) - p0(1);
+      const ColumnVector p1h = xform.transform (x(1), y(1) + 1, 0);
+      pix_dy = p1h(1) - p0(1);
       nor_dy = 1;
     }
 
 
   // OpenGL won't draw the image if it's origin is outside the
   // viewport/clipping plane so we must do the clipping
   // ourselfes - only draw part of the image
 
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -1572,17 +1572,17 @@ do_scanf_conv (std::istream&, const scan
   int width = elt->width; \
  \
   std::string tmp; \
  \
   do \
     { \
       if (width) \
         { \
-          std::string tmp (width, '\0'); \
+          tmp = std::string (width, '\0'); \
  \
           int c = EOF; \
  \
           int n = 0; \
  \
           while (is && (c = is.get ()) != EOF) \
             { \
               if (! isspace (c)) \
