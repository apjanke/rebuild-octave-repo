# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294427675 18000
#      Fri Jan 07 14:14:35 2011 -0500
# Node ID 93a039fe681e97ad32dfa183a35c6cbba60dec99
# Parent  33f6384d2b78ff0a49b8b930f2c206cf53e1ff3e
logm: style fixes

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2011-01-07  John W. Eaton  <jwe@octave.org>
+
+	* linear-algebra/logm.m: Style fixes.
+
 2011-01-06  John W. Eaton  <jwe@octave.org>
 
 	* optimization/optimset.m: Remove "i" option from call to
 	lookup.  Bug #31392.
 
 2011-01-05  Rik  <octave@nomad.inbox5.com>
 
 	* general/isa.m: Add tests against logical values.
diff --git a/scripts/linear-algebra/logm.m b/scripts/linear-algebra/logm.m
--- a/scripts/linear-algebra/logm.m
+++ b/scripts/linear-algebra/logm.m
@@ -34,41 +34,35 @@
 ## number of square roots actually computed.
 ##
 ## @end deftypefn
 
 ## Reference: N. J. Higham, Functions of Matrices: Theory and Computation 
 ##            (SIAM, 2008.)
 ##
 
-function [s, iters] = logm (a, opt_iters)
+function [s, iters] = logm (a, opt_iters = 100)
  
-  if (nargin == 0)
-    print_usage ();
-  elseif (nargin < 2)
-    opt_iters = 100;
-  elseif (nargin > 2)
+  if (nargin == 0 || nargin > 2)
     print_usage ();
   endif
 
   if (! issquare (a))
-    error ("logm: argument must be a square matrix.");
+    error ("logm: argument must be a square matrix");
   endif
 
   [u, s] = schur (a);
 
   if (isreal (a))
     [u, s] = rsf2csf (u, s);
   endif
 
   if (any (diag (s) < 0))
     warning ("Octave:logm:non-principal",
-    ["logm: Matrix has negative eigenvalues.", ...
-     "  Principal matrix logarithm is not defined.", ...
-     "  Computing non-principal logarithm."]);
+             "logm: principal matrix logarithm is not defined for matrices with negative eigenvalues; computing non-principal logarithm");
   endif
 
   k = 0;
   ## Algorithm 11.9 in "Function of matrices", by N. Higham
   theta = [0, 0, 1.61e-2, 5.38e-2, 1.13e-1, 1.86e-1, 2.6429608311114350e-1];
   p = 0;
   m = 7;
   while (k < opt_iters)
@@ -82,17 +76,17 @@ function [s, iters] = logm (a, opt_iters
         break
       endif
     endif
     k = k + 1;
     s = sqrtm (s);
   endwhile
 
   if (k >= opt_iters)
-    warning ("logm: Maximum number of square roots exceeded.  Results may still be accurate.");
+    warning ("logm: maximum number of square roots exceeded; results may still be accurate");
   endif
 
   s = logm_pade_pf (s - eye (size (s)), m);
 
   s = 2^k * u * s * u';
 
   if (nargout == 2)
     iters = k;
@@ -106,42 +100,42 @@ endfunction
 ######      D. Higham, Functions of Matrices: Theory and Computation 
 ######      (SIAM, 2008.).
 #######################################################################
 
 ##LOGM_PADE_PF   Evaluate Pade approximant to matrix log by partial fractions.
 ##   Y = LOGM_PADE_PF(a,M) evaluates the [M/M] Pade approximation to
 ##   LOG(EYE(SIZE(a))+a) using a partial fraction expansion.
 
-function s = logm_pade_pf(a,m)
-  [nodes,wts] = gauss_legendre(m);
+function s = logm_pade_pf (a, m)
+  [nodes, wts] = gauss_legendre (m);
   ## Convert from [-1,1] to [0,1].
-  nodes = (nodes + 1)/2;
+  nodes = (nodes+1)/2;
   wts = wts/2;
 
-  n = length(a);
-  s = zeros(n);
-  for j=1:m
-    s = s + wts(j)*(a/(eye(n) + nodes(j)*a));
+  n = length (a);
+  s = zeros (n);
+  for j = 1:m
+    s += wts(j)*(a/(eye (n) + nodes(j)*a));
   endfor
 endfunction
 
 ######################################################################
 ## GAUSS_LEGENDRE  Nodes and weights for Gauss-Legendre quadrature.
 ##   [X,W] = GAUSS_LEGENDRE(N) computes the nodes X and weights W
 ##   for N-point Gauss-Legendre quadrature.
 
 ## Reference:
 ## G. H. Golub and J. H. Welsch, Calculation of Gauss quadrature
 ## rules, Math. Comp., 23(106):221-230, 1969.
 
-function [x,w] = gauss_legendre(n)
+function [x, w] = gauss_legendre (n)
   i = 1:n-1;
   v = i./sqrt ((2*i).^2-1);
-  [V,D] = eig ( diag(v,-1)+diag(v,1) );
+  [V, D] = eig (diag (v, -1) + diag (v, 1));
   x = diag (D);
   w = 2*(V(1,:)'.^2);
 endfunction
 
 
 %!assert(norm(logm([1 -1;0 1]) - [0 -1; 0 0]) < 1e-5);
 %!assert(norm(expm(logm([-1 2 ; 4 -1])) - [-1 2 ; 4 -1]) < 1e-5);
 %!assert(logm([1 -1 -1;0 1 -1; 0 0 1]), [0 -1 -1.5; 0 0 -1; 0 0 0], 1e-5);
