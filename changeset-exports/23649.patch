# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497932052 25200
#      Mon Jun 19 21:14:12 2017 -0700
# Node ID aabf6cd222ac66e931a2f1eabb40d6a8276dd689
# Parent  864ac8dabeffceac276e1fe195c1985c5db14a1b
Use sqrt from C++ std library in liboctave.
This function is guaranteed to be part of C++11 standard library.

* configure.ac: Remove AC_CHECK_FUNCS for sqrt, sqrtf.

* CollocWt.cc, lo-mappers.cc, lo-specfun.cc, randgamma.cc, randmtzig.cc,
randpoisson.cc: Preface uses of sqrt with "std::".

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2410,20 +2410,16 @@ AC_CHECK_FUNCS([getpgrp getpid getppid g
 AC_CHECK_FUNCS([isascii kill])
 AC_CHECK_FUNCS([lgamma_r lgammaf_r])
 AC_CHECK_FUNCS([realpath resolvepath])
 AC_CHECK_FUNCS([select setgrent setpwent setsid siglongjmp strsignal])
 AC_CHECK_FUNCS([tcgetattr tcsetattr toascii])
 AC_CHECK_FUNCS([umask waitpid])
 AC_CHECK_FUNCS([_getch _kbhit])
 
-dnl There are no workarounds in the code for missing these functions.
-AC_CHECK_FUNCS([sqrt sqrtf], [],
-               [AC_MSG_ERROR([Missing function required to build Octave])])
-
 ## Look in <complex> for C++ variants of math functions that we need.
 
 OCTAVE_CHECK_FUNC_COMPLEX(acos)
 OCTAVE_CHECK_FUNC_COMPLEX(acosh)
 OCTAVE_CHECK_FUNC_COMPLEX(asin)
 OCTAVE_CHECK_FUNC_COMPLEX(asinh)
 OCTAVE_CHECK_FUNC_COMPLEX(atan)
 OCTAVE_CHECK_FUNC_COMPLEX(atanh)
diff --git a/liboctave/numeric/CollocWt.cc b/liboctave/numeric/CollocWt.cc
--- a/liboctave/numeric/CollocWt.cc
+++ b/liboctave/numeric/CollocWt.cc
@@ -233,17 +233,17 @@ jcobi (octave_idx_type n, octave_idx_typ
           if (++k > 100 || octave::math::isnan (z))
             return false;
 
           if (std::abs (z) <= 100 * std::numeric_limits<double>::epsilon ())
             done = true;
         }
 
       root[i] = x;
-      x += sqrt (std::numeric_limits<double>::epsilon ());
+      x += std::sqrt (std::numeric_limits<double>::epsilon ());
     }
 
   // Add interpolation points at x = 0 and/or x = 1.
 
   if (n0 != 0)
     {
       for (octave_idx_type i = n; i > 0; i--)
         root[i] = root[i-1];
diff --git a/liboctave/numeric/lo-mappers.cc b/liboctave/numeric/lo-mappers.cc
--- a/liboctave/numeric/lo-mappers.cc
+++ b/liboctave/numeric/lo-mappers.cc
@@ -98,17 +98,17 @@ namespace octave
           // imaginary part of -0 for the expression 1-x*x.
           // This chooses the same phase of the branch cut as Matlab.
           double xr = std::real (x);
           tmp = Complex (1.0 - xr*xr);
         }
       else
         tmp = 1.0 - x*x;
 
-      return -i * log (x + i * sqrt (tmp));
+      return -i * log (x + i * std::sqrt (tmp));
 #endif
     }
 
     FloatComplex
     acos (const FloatComplex& x)
     {
 #if defined (HAVE_COMPLEX_STD_ACOS)
       FloatComplex y = std::acos (x);
@@ -128,17 +128,17 @@ namespace octave
           // imaginary part of -0 for the expression 1-x*x.
           // This chooses the same phase of the branch cut as Matlab.
           float xr = std::real (x);
           tmp = FloatComplex (1.0f - xr*xr);
         }
       else
         tmp = 1.0f - x*x;
 
-      return -i * log (x + i * sqrt (tmp));
+      return -i * log (x + i * std::sqrt (tmp));
 #endif
     }
 
     Complex
     asin (const Complex& x)
     {
 #if defined (HAVE_COMPLEX_STD_ASIN)
       Complex y = std::asin (x);
@@ -158,17 +158,17 @@ namespace octave
           // imaginary part of -0 for the expression 1-x*x.
           // This chooses the same phase of the branch cut as Matlab.
           double xr = std::real (x);
           tmp = Complex (1.0 - xr*xr);
         }
       else
         tmp = 1.0 - x*x;
 
-      return -i * log (i*x + sqrt (tmp));
+      return -i * log (i*x + std::sqrt (tmp));
 #endif
     }
 
     FloatComplex
     asin (const FloatComplex& x)
     {
 #if defined (HAVE_COMPLEX_STD_ASIN)
       FloatComplex y = std::asin (x);
@@ -188,17 +188,17 @@ namespace octave
           // imaginary part of -0 for the expression 1-x*x.
           // This chooses the same phase of the branch cut as Matlab.
           float xr = std::real (x);
           tmp = FloatComplex (1.0f - xr*xr);
         }
       else
         tmp = 1.0f - x*x;
 
-      return -i * log (i*x + sqrt (tmp));
+      return -i * log (i*x + std::sqrt (tmp));
 #endif
     }
 
     Complex
     atan (const Complex& x)
     {
 #if defined (HAVE_COMPLEX_STD_ATAN)
       return std::atan (x);
@@ -456,19 +456,19 @@ namespace octave
       const float pil10 = 1.36437635384184134748f; // = pi / log(10)
       return x < 0.0f ? FloatComplex (log10 (-x), pil10)
                       : FloatComplex (log10f (x));
     }
 
     Complex
     rc_sqrt (double x)
     {
-      return x < 0.0 ? Complex (0.0, sqrt (-x)) : Complex (sqrt (x));
+      return x < 0.0 ? Complex (0.0, std::sqrt (-x)) : Complex (std::sqrt (x));
     }
 
     FloatComplex
     rc_sqrt (float x)
     {
-      return x < 0.0f ? FloatComplex (0.0f, sqrtf (-x))
-                      : FloatComplex (sqrtf (x));
+      return x < 0.0f ? FloatComplex (0.0f, std::sqrt (-x))
+                      : FloatComplex (std::sqrt (x));
     }
   }
 }
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -364,17 +364,17 @@ namespace octave
     {
       Complex retval;
 
       double r = x.real (), i = x.imag ();
 
       if (fabs (r) < 0.5 && fabs (i) < 0.5)
         {
           double u = 2*r + r*r + i*i;
-          retval = Complex (log1p (u / (1+sqrt (u+1))),
+          retval = Complex (log1p (u / (1+std::sqrt (u+1))),
                             atan2 (1 + r, i));
         }
       else
         retval = std::log (Complex (1) + x);
 
       return retval;
     }
 
@@ -387,17 +387,17 @@ namespace octave
     {
       FloatComplex retval;
 
       float r = x.real (), i = x.imag ();
 
       if (fabs (r) < 0.5 && fabs (i) < 0.5)
         {
           float u = 2*r + r*r + i*i;
-          retval = FloatComplex (log1p (u / (1+sqrt (u+1))),
+          retval = FloatComplex (log1p (u / (1+std::sqrt (u+1))),
                                  atan2 (1 + r, i));
         }
       else
         retval = std::log (FloatComplex (1) + x);
 
       return retval;
     }
 
@@ -2669,17 +2669,17 @@ namespace octave
           const double q = 0.5 * x, r = q*q;
           const double yn = (((((a[0]*r + a[1])*r + a[2])*r + a[3])*r + a[4])*r + a[5])*q;
           const double yd = ((((b[0]*r + b[1])*r + b[2])*r + b[3])*r + b[4])*r + 1.0;
           y = yn / yd;
         }
       else if (ax < 1.0)
         {
           // Tail region.
-          const double q = sqrt (-2*std::log (0.5*(1-ax)));
+          const double q = std::sqrt (-2*std::log (0.5*(1-ax)));
           const double yn = ((((c[0]*q + c[1])*q + c[2])*q + c[3])*q + c[4])*q + c[5];
           const double yd = (((d[0]*q + d[1])*q + d[2])*q + d[3])*q + 1.0;
           y = yn / yd * octave::math::signum (-x);
         }
       else if (ax == 1.0)
         return octave::numeric_limits<double>::Inf () * octave::math::signum (x);
       else
         return octave::numeric_limits<double>::NaN ();
@@ -2749,18 +2749,18 @@ namespace octave
           const double yn = (((((a[0]*r + a[1])*r + a[2])*r + a[3])*r + a[4])*r + a[5])*q;
           const double yd = ((((b[0]*r + b[1])*r + b[2])*r + b[3])*r + b[4])*r + 1.0;
           y = yn / yd;
         }
       else if (x > 0.0 && x < 2.0)
         {
           // Tail region.
           const double q = (x < 1
-                            ? sqrt (-2*std::log (0.5*x))
-                            : sqrt (-2*std::log (0.5*(2-x))));
+                            ? std::sqrt (-2*std::log (0.5*x))
+                            : std::sqrt (-2*std::log (0.5*(2-x))));
 
           const double yn = ((((c[0]*q + c[1])*q + c[2])*q + c[3])*q + c[4])*q + c[5];
 
           const double yd = (((d[0]*q + d[1])*q + d[2])*q + d[3])*q + 1.0;
 
           y = yn / yd;
 
           if (x < pbreak_lo)
@@ -2963,34 +2963,34 @@ namespace octave
           a = y;
           pp = p;
           qq = q;
           indx = false;
         }
 
       //  Calculate the initial approximation.
 
-      r = sqrt (- std::log (a * a));
+      r = std::sqrt (- std::log (a * a));
 
       ycur = r - (2.30753 + 0.27061 * r) / (1.0 + (0.99229 + 0.04481 * r) * r);
 
       if (1.0 < pp && 1.0 < qq)
         {
           r = (ycur * ycur - 3.0) / 6.0;
           s = 1.0 / (pp + pp - 1.0);
           t = 1.0 / (qq + qq - 1.0);
           h = 2.0 / (s + t);
-          w = ycur * sqrt (h + r) / h - (t - s) * (r + 5.0 / 6.0 - 2.0 / (3.0 * h));
+          w = ycur * std::sqrt (h + r) / h - (t - s) * (r + 5.0 / 6.0 - 2.0 / (3.0 * h));
           value = pp / (pp + qq * exp (w + w));
         }
       else
         {
           r = qq + qq;
           t = 1.0 / (9.0 * qq);
-          t = r * std::pow (1.0 - t + ycur * sqrt (t), 3);
+          t = r * std::pow (1.0 - t + ycur * std::sqrt (t), 3);
 
           if (t <= 0.0)
             {
               value = 1.0 - exp ((std::log ((1.0 - a) * qq) + beta) / qq);
             }
           else
             {
               t = (4.0 * pp + r - 2.0) / t;
@@ -3257,17 +3257,17 @@ namespace octave
             ("Octave:ellipj-invalid-m",
              "ellipj: invalid M value, required value 0 <= M <= 1");
 
           sn = cn = dn = lo_ieee_nan_value ();
 
           return;
         }
 
-      double sqrt_eps = sqrt (std::numeric_limits<double>::epsilon ());
+      double sqrt_eps = std::sqrt (std::numeric_limits<double>::epsilon ());
       if (m < sqrt_eps)
         {
           // For small m, (Abramowitz and Stegun, Section 16.13)
           si_u = sin (u);
           co_u = cos (u);
           t = 0.25*m*(u - si_u*co_u);
           sn = si_u - t * co_u;
           cn = co_u + t * si_u;
@@ -3285,40 +3285,40 @@ namespace octave
           cn = se_u - 0.25*m1*(si_u*co_u - u)*ta_u*se_u;
           dn = se_u + 0.25*m1*(si_u*co_u + u)*ta_u*se_u;
         }
       else
         {
           // Arithmetic-Geometric Mean (AGM) algorithm
           //   (Abramowitz and Stegun, Section 16.4)
           a[0] = 1;
-          b    = sqrt (1 - m);
-          c[0] = sqrt (m);
+          b    = std::sqrt (1 - m);
+          c[0] = std::sqrt (m);
           for (n = 1; n < Nmax; ++n)
             {
               a[n] = (a[n - 1] + b)/2;
               c[n] = (a[n - 1] - b)/2;
-              b = sqrt (a[n - 1]*b);
+              b = std::sqrt (a[n - 1]*b);
               if (c[n]/a[n] < std::numeric_limits<double>::epsilon ()) break;
             }
           if (n >= Nmax - 1)
             {
               err = 1;
               return;
             }
           Nn = n;
           for (ii = 1; n > 0; ii = ii*2, --n) ; // ii = pow(2,Nn)
           phi = ii*a[Nn]*u;
           for (n = Nn; n > 0; --n)
             {
               phi = (asin ((c[n]/a[n])* sin (phi)) + phi)/2;
             }
           sn = sin (phi);
           cn = cos (phi);
-          dn = sqrt (1 - m*sn*sn);
+          dn = std::sqrt (1 - m*sn*sn);
         }
     }
 
     void
     ellipj (const Complex& u, double m, Complex& sn, Complex& cn, Complex& dn,
             double& err)
     {
       double m1 = 1 - m, ss1, cc1, dd1;
diff --git a/liboctave/numeric/randgamma.cc b/liboctave/numeric/randgamma.cc
--- a/liboctave/numeric/randgamma.cc
+++ b/liboctave/numeric/randgamma.cc
@@ -92,17 +92,17 @@ Dirichlet(a1,...,ak) for ai > 0
 #define REXP oct_rande()
 
 void
 oct_fill_randg (double a, octave_idx_type n, double *r)
 {
   octave_idx_type i;
   /* If a < 1, start by generating gamma (1+a) */
   const double d = (a < 1. ? 1.+a : a) - 1./3.;
-  const double c = 1./sqrt (9.*d);
+  const double c = 1./std::sqrt (9.*d);
 
   /* Handle invalid cases */
   if (a <= 0 || INFINITE(a))
     {
       for (i=0; i < n; i++)
         r[i] = octave::numeric_limits<double>::NaN ();
       return;
     }
@@ -147,17 +147,17 @@ oct_randg (double a)
 #define REXP oct_float_rande()
 
 void
 oct_fill_float_randg (float a, octave_idx_type n, float *r)
 {
   octave_idx_type i;
   /* If a < 1, start by generating gamma(1+a) */
   const float d = (a < 1. ? 1.+a : a) - 1./3.;
-  const float c = 1./sqrt (9.*d);
+  const float c = 1./std::sqrt (9.*d);
 
   /* Handle invalid cases */
   if (a <= 0 || INFINITE(a))
     {
       for (i=0; i < n; i++)
         r[i] = octave::numeric_limits<float>::NaN ();
       return;
     }
diff --git a/liboctave/numeric/randmtzig.cc b/liboctave/numeric/randmtzig.cc
--- a/liboctave/numeric/randmtzig.cc
+++ b/liboctave/numeric/randmtzig.cc
@@ -499,17 +499,17 @@ create_ziggurat_tables (void)
   wi[0] = NOR_SECTION_AREA / fi[255] / NMANTISSA;
   fi[0] = 1.;
 
   for (i = 254; i > 0; i--)
     {
       /* New x is given by x = f^{-1}(v/x_{i+1} + f(x_{i+1})), thus
        * need inverse operator of y = exp(-0.5*x*x) -> x = sqrt(-2*ln(y))
        */
-      x = sqrt (-2. * std::log (NOR_SECTION_AREA / x1 + fi[i+1]));
+      x = std::sqrt (-2. * std::log (NOR_SECTION_AREA / x1 + fi[i+1]));
       ki[i+1] = static_cast<ZIGINT> (x / x1 * NMANTISSA);
       wi[i] = x / NMANTISSA;
       fi[i] = exp (-0.5 * x * x);
       x1 = x;
     }
 
   ki[1] = 0;
 
@@ -689,17 +689,17 @@ create_ziggurat_float_tables (void)
   fwi[0] = NOR_SECTION_AREA / ffi[255] / NMANTISSA;
   ffi[0] = 1.;
 
   for (i = 254; i > 0; i--)
     {
       /* New x is given by x = f^{-1}(v/x_{i+1} + f(x_{i+1})), thus
        * need inverse operator of y = exp(-0.5*x*x) -> x = sqrt(-2*ln(y))
        */
-      x = sqrt (-2. * std::log (NOR_SECTION_AREA / x1 + ffi[i+1]));
+      x = std::sqrt (-2. * std::log (NOR_SECTION_AREA / x1 + ffi[i+1]));
       fki[i+1] = static_cast<ZIGINT> (x / x1 * NMANTISSA);
       fwi[i] = x / NMANTISSA;
       ffi[i] = exp (-0.5 * x * x);
       x1 = x;
     }
 
   fki[1] = 0;
 
diff --git a/liboctave/numeric/randpoisson.cc b/liboctave/numeric/randpoisson.cc
--- a/liboctave/numeric/randpoisson.cc
+++ b/liboctave/numeric/randpoisson.cc
@@ -30,17 +30,16 @@ along with Octave; see the file COPYING.
  * LGAMMA: log gamma function
  * INFINITE: function to test whether a value is infinite
  */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
-#include <cmath>
 #include <cstddef>
 
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-math.h"
 #include "randmtzig.h"
 #include "randpoisson.h"
@@ -142,17 +141,17 @@ pprsc (double my)
                 f1, f2, f4, f5, p1, p2, p3, p4, p5, p6;
   double        Dk, X, Y;
   double        Ds, U, V, W;
 
   if (my != my_last)
     {                               /* set-up           */
       my_last = my;
       /* approximate deviation of reflection points k2, k4 from my - 1/2 */
-      Ds = sqrt (my + 0.25);
+      Ds = std::sqrt (my + 0.25);
 
       /* mode m, reflection points k2 and k4, and points k1 and k5,      */
       /* which delimit the centre region of h(x)                         */
       m  = std::floor (my);
       k2 = ceil (my - 0.5 - Ds);
       k4 = std::floor (my - 0.5 + Ds);
       k1 = k2 + k2 - m + 1L;
       k5 = k4 + k4 - m;
@@ -399,17 +398,17 @@ poisson_cdf_lookup_float (double lambda,
       p[i] = static_cast<float> (tableidx-1);
     }
 }
 
 /* From Press, et al., Numerical Recipes */
 static void
 poisson_rejection (double lambda, double *p, size_t n)
 {
-  double sq = sqrt (2.0*lambda);
+  double sq = std::sqrt (2.0*lambda);
   double alxm = std::log (lambda);
   double g = lambda*alxm - LGAMMA(lambda+1.0);
   size_t i;
 
   for (i = 0; i < n; i++)
     {
       double y, em, t;
       do
@@ -425,17 +424,17 @@ poisson_rejection (double lambda, double
       p[i] = em;
     }
 }
 
 /* From Press, et al., Numerical Recipes */
 static void
 poisson_rejection_float (double lambda, float *p, size_t n)
 {
-  double sq = sqrt (2.0*lambda);
+  double sq = std::sqrt (2.0*lambda);
   double alxm = std::log (lambda);
   double g = lambda*alxm - LGAMMA(lambda+1.0);
   size_t i;
 
   for (i = 0; i < n; i++)
     {
       double y, em, t;
       do
@@ -478,17 +477,17 @@ oct_fill_randp (double L, octave_idx_typ
   else if (L <= 1e8)
     {
       for (i=0; i<n; i++)
         p[i] = pprsc (L);
     }
   else
     {
       /* normal approximation: from Phys. Rev. D (1994) v50 p1284 */
-      const double sqrtL = sqrt (L);
+      const double sqrtL = std::sqrt (L);
       for (i = 0; i < n; i++)
         {
           p[i] = std::floor (RNOR*sqrtL + L + 0.5);
           if (p[i] < 0.0)
             p[i] = 0.0; /* will probably never happen */
         }
     }
 }
@@ -521,17 +520,17 @@ oct_randp (double L)
     {
       /* FIXME: R uses NaN, but the normal approximation suggests that
        * limit should be Inf.  Which is correct? */
       ret = octave::numeric_limits<double>::NaN ();
     }
   else
     {
       /* normal approximation: from Phys. Rev. D (1994) v50 p1284 */
-      ret = std::floor (RNOR*sqrt (L) + L + 0.5);
+      ret = std::floor (RNOR*std::sqrt (L) + L + 0.5);
       if (ret < 0.0) ret = 0.0; /* will probably never happen */
     }
   return ret;
 }
 
 /* Generate a set of poisson numbers with the same distribution */
 void
 oct_fill_float_randp (float FL, octave_idx_type n, float *p)
@@ -550,17 +549,17 @@ oct_fill_float_randp (float FL, octave_i
   else if (L <= 1e8)
     {
       for (i=0; i<n; i++)
         p[i] = pprsc (L);
     }
   else
     {
       /* normal approximation: from Phys. Rev. D (1994) v50 p1284 */
-      const double sqrtL = sqrt (L);
+      const double sqrtL = std::sqrt (L);
       for (i = 0; i < n; i++)
         {
           p[i] = std::floor (RNOR*sqrtL + L + 0.5);
           if (p[i] < 0.0)
             p[i] = 0.0; /* will probably never happen */
         }
     }
 }
@@ -594,13 +593,13 @@ oct_float_randp (float FL)
     {
       /* FIXME: R uses NaN, but the normal approximation suggests that
        * limit should be Inf. Which is correct? */
       ret = octave::numeric_limits<float>::NaN ();
     }
   else
     {
       /* normal approximation: from Phys. Rev. D (1994) v50 p1284 */
-      ret = std::floor (RNOR*sqrt (L) + L + 0.5);
+      ret = std::floor (RNOR*std::sqrt (L) + L + 0.5);
       if (ret < 0.0) ret = 0.0; /* will probably never happen */
     }
   return ret;
 }
