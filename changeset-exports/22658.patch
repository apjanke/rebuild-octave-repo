# HG changeset patch
# User Rik <rik@octave.org>
# Date 1477283618 25200
#      Sun Oct 23 21:33:38 2016 -0700
# Branch stable
# Node ID 56d7d423aff97220770d54af842b0fd2d40e490a
# Parent  6b134d294d61aaf27ea3e1c4ca060d2c4eb7d5d0
Return intermediate integration times when single output argument used in ode solver (bug #49417).

* ode23.m, ode45.m: If single output is requested then shorten integration
span to a 2-element vector which will cause integrate_adaptive to return
auto-selected timesteps.

diff --git a/scripts/ode/ode23.m b/scripts/ode/ode23.m
--- a/scripts/ode/ode23.m
+++ b/scripts/ode/ode23.m
@@ -219,16 +219,22 @@ function varargout = ode23 (fun, trange,
                    \ fun (t, x, odeopts.funarguments{:});
     else
       mass = @(t) odeopts.Mass (t, odeopts.funarguments{:});
       fun = @(t,x) mass (t, odeopts.funarguments{:}) ...
                    \ fun (t, x, odeopts.funarguments{:});
     endif
   endif
 
+  ## Single output requires auto-selected intermediate times,
+  ## which is obtained by NOT specifying specific solution times.
+  if (nargout == 1 && numel (trange > 2))
+    trange = [trange(1) trange(end)];
+  endif
+
   solution = integrate_adaptive (@runge_kutta_23,
                                  order, fun, trange, init, odeopts);
 
   ## Postprocessing, do whatever when terminating integration algorithm
   if (odeopts.haveoutputfunction)  # Cleanup plotter
     feval (odeopts.OutputFcn, [], [], "done", odeopts.funarguments{:});
   endif
   if (! isempty (odeopts.Events))   # Cleanup event function handling
diff --git a/scripts/ode/ode45.m b/scripts/ode/ode45.m
--- a/scripts/ode/ode45.m
+++ b/scripts/ode/ode45.m
@@ -210,16 +210,22 @@ function varargout = ode45 (fun, trange,
                    \ fun (t, x, odeopts.funarguments{:});
     else
       mass = @(t) odeopts.Mass (t, odeopts.funarguments{:});
       fun = @(t,x) mass (t, odeopts.funarguments{:}) ...
                    \ fun (t, x, odeopts.funarguments{:});
     endif
   endif
 
+  ## Single output requires auto-selected intermediate times,
+  ## which is obtained by NOT specifying specific solution times.
+  if (nargout == 1 && numel (trange > 2))
+    trange = [trange(1) trange(end)];
+  endif
+
   solution = integrate_adaptive (@runge_kutta_45_dorpri,
                                  order, fun, trange, init, odeopts);
 
   ## Postprocessing, do whatever when terminating integration algorithm
   if (odeopts.haveoutputfunction)  # Cleanup plotter
     feval (odeopts.OutputFcn, [], [], "done", odeopts.funarguments{:});
   endif
   if (! isempty (odeopts.Events))   # Cleanup event function handling
