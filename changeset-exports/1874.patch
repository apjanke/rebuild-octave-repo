# HG changeset patch
# User jwe
# Date 823440143 0
#      Sun Feb 04 13:22:23 1996 +0000
# Node ID 7fc99ae7089192a8f1469758db267ca2aeb9ea2c
# Parent  dc859604b19b43d052a5f58cab4e28016ed42001
[project @ 1996-02-04 13:16:56 by jwe]

diff --git a/liboctave/NPSOL.h b/liboctave/NPSOL.h
--- a/liboctave/NPSOL.h
+++ b/liboctave/NPSOL.h
@@ -25,16 +25,17 @@ Software Foundation, 59 Temple Place - S
 #define octave_NPSOL_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #ifndef NPSOL_MISSING
 
+#include <cfloat>
 #include <cmath>
 
 #include "dColVector.h"
 #include "NLP.h"
 
 class
 NPSOL_options
 {
diff --git a/liboctave/QPSOL.h b/liboctave/QPSOL.h
--- a/liboctave/QPSOL.h
+++ b/liboctave/QPSOL.h
@@ -25,46 +25,79 @@ Software Foundation, 59 Temple Place - S
 #define octave_QPSOL_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #ifndef QPSOL_MISSING
 
+#include <cfloat>
+#include <cmath>
+
 #include "dMatrix.h"
 #include "dColVector.h"
 #include "QP.h"
 
 class
 QPSOL_options
 {
 public:
 
-  QPSOL_options (void);
-  QPSOL_options (const QPSOL_options& opt);
+  QPSOL_options (void) { init (); }
+
+  QPSOL_options (const QPSOL_options& opt) { set_options (opt); }
 
-  QPSOL_options& operator = (const QPSOL_options& opt);
+  QPSOL_options& operator = (const QPSOL_options& opt)
+    {
+      if (this != &opt)
+	set_options (opt);
+
+      return *this;
+    }
 
-  ~QPSOL_options (void);
+  ~QPSOL_options (void) { }
 
-  void init (void);
-  void copy (const QPSOL_options& opt);
+  void init (void)
+    {
+      x_feasibility_tolerance = ::sqrt (DBL_EPSILON);
+      x_infinite_bound = 1.0e+30;
+      x_iteration_limit = -1;
+      x_print_level = 0;
+    }
+
+  void set_default_options (void) { init (); }
 
-  void set_default_options (void);
+  void set_options (const QPSOL_options& opt)
+    {
+      x_feasibility_tolerance = opt.x_feasibility_tolerance;
+      x_infinite_bound = opt.x_infinite_bound;
+      x_iteration_limit = opt.x_iteration_limit;
+      x_print_level = opt.x_print_level;
+    }
+
+  void set_feasibility_tolerance (double val)
+    { x_feasibility_tolerance = (val > 0.0) ? val : ::sqrt (DBL_EPSILON); }
+
+  void set_infinite_bound (double val)
+    { x_infinite_bound = (val > 0.0) ? val : 1.0e+30; }
 
-  void set_feasibility_tolerance (double);
-  void set_infinite_bound (double);
-  void set_iteration_limit (int);
-  void set_print_level (int);
+  void set_iteration_limit (int val)
+    { x_iteration_limit = (val > 0) ? val : -1; }
+
+  void set_print_level (int val)
+    { x_print_level = (val >= 0) ? val : 0; }
 
-  double feasibility_tolerance (void);
-  double infinite_bound (void);
-  int iteration_limit (void);
-  int print_level (void);
+  double feasibility_tolerance (void) { return x_feasibility_tolerance; }
+
+  double infinite_bound (void) { return x_infinite_bound; }
+
+  int iteration_limit (void) { return x_iteration_limit; }
+
+  int print_level (void) { return x_print_level; }
 
 private:
 
   double x_feasibility_tolerance;
   double x_infinite_bound;
   int x_iteration_limit;
   int x_print_level;
 };
diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -338,28 +338,28 @@ Handle all of the following:
   ColumnVector lambda;
   int inform;
 
   if (nargin == 2)
     {
       // 1. npsol (x, phi)
 
       NPSOL nlp (x, func);
-      nlp.copy (npsol_opts);
+      nlp.set_options (npsol_opts);
       soln = nlp.minimize (objf, inform, lambda);
 
       goto solved;
     }
 
   if (nargin == 4)
     {
       // 2. npsol (x, phi, lb, ub)
 
       NPSOL nlp (x, func, bounds);
-      nlp.copy (npsol_opts);
+      nlp.set_options (npsol_opts);
       soln = nlp.minimize (objf, inform, lambda);
 
       goto solved;
     }
 
   npsol_constraints = 0;
   if (nargin == 5 || nargin == 7 || nargin == 8 || nargin == 10)
     npsol_constraints = is_valid_function (args(nargin-2), "npsol", 0);
@@ -390,25 +390,25 @@ Handle all of the following:
 
 	  LinConst linear_constraints (llb, c, lub);
 
 	  if (nargin == 5)
 	    {
 	      // 7. npsol (x, phi, llb, c, lub)
 
 	      NPSOL nlp (x, func, linear_constraints);
-	      nlp.copy (npsol_opts);
+	      nlp.set_options (npsol_opts);
 	      soln = nlp.minimize (objf, inform, lambda);
 	    }
 	  else
 	    {
 	      // 3. npsol (x, phi, lb, ub, llb, c, lub)
 
 	      NPSOL nlp (x, func, bounds, linear_constraints);
-	      nlp.copy (npsol_opts);
+	      nlp.set_options (npsol_opts);
 	      soln = nlp.minimize (objf, inform, lambda);
 	    }
 	  goto solved;
 	}
       else
 	{
 	  ColumnVector nlub = args(nargin-1).vector_value ();
 	  ColumnVector nllb = args(nargin-3).vector_value ();
@@ -421,25 +421,25 @@ Handle all of the following:
 	  NLFunc const_func (npsol_constraint_function);
 	  NLConst nonlinear_constraints (nllb, const_func, nlub);
 
 	  if (nargin == 5)
 	    {
 	      // 8. npsol (x, phi, nllb, g, nlub)
 
 	      NPSOL nlp (x, func, nonlinear_constraints);
-	      nlp.copy (npsol_opts);
+	      nlp.set_options (npsol_opts);
 	      soln = nlp.minimize (objf, inform, lambda);
 	    }
 	  else
 	    {
 	      // 5. npsol (x, phi, lb, ub, nllb, g, nlub)
 
 	      NPSOL nlp (x, func, bounds, nonlinear_constraints);
-	      nlp.copy (npsol_opts);
+	      nlp.set_options (npsol_opts);
 	      soln = nlp.minimize (objf, inform, lambda);
 	    }
 	  goto solved;
 	}
     }
 
   if (nargin == 8 || nargin == 10)
     {
@@ -485,26 +485,26 @@ Handle all of the following:
 	  LinConst linear_constraints (llb, c, lub);
 
 	  if (nargin == 8)
 	    {
 	      // 6. npsol (x, phi, llb, c, lub, nllb, g, nlub)
 
 	      NPSOL nlp (x, func, linear_constraints,
 			 nonlinear_constraints);
-	      nlp.copy (npsol_opts);
+	      nlp.set_options (npsol_opts);
 	      soln = nlp.minimize (objf, inform, lambda);
 	    }
 	  else
 	    {
 	      // 4. npsol (x, phi, lb, ub, llb, c, lub, nllb, g, nlub)
 
 	      NPSOL nlp (x, func, bounds, linear_constraints,
 			 nonlinear_constraints);
-	      nlp.copy (npsol_opts);
+	      nlp.set_options (npsol_opts);
 	      soln = nlp.minimize (objf, inform, lambda);
 	    }
 	  goto solved;
 	}
     }
 
   return retval;
 
diff --git a/src/qpsol.cc b/src/qpsol.cc
--- a/src/qpsol.cc
+++ b/src/qpsol.cc
@@ -152,28 +152,28 @@ Handle all of the following:
   ColumnVector lambda;
   int inform;
 
   if (nargin == 3)
     {
       // 1. qpsol (x, H, c)
 
       QPSOL qp (x, H, c);
-      qp.copy (qpsol_opts);
+      qp.set_options (qpsol_opts);
       soln = qp.minimize (objf, inform, lambda);
 
       goto solved;
     }
 
   if (nargin == 5)
     {
       //  2. qpsol (x, H, c, lb, ub)
 
       QPSOL qp (x, H, c, bounds);
-      qp.copy (qpsol_opts);
+      qp.set_options (qpsol_opts);
       soln = qp.minimize (objf, inform, lambda);
 
       goto solved;
     }
 
   if (nargin == 6 || nargin == 8)
     {
       ColumnVector lub = args(nargin-1).vector_value ();
@@ -198,25 +198,25 @@ Handle all of the following:
 
       LinConst linear_constraints (llb, A, lub);
 
       if (nargin == 8)
 	{
 	  // 3. qpsol (x, H, c, lb, ub, llb, A, lub)
 
 	  QPSOL qp (x, H, c, bounds, linear_constraints);
-	  qp.copy (qpsol_opts);
+	  qp.set_options (qpsol_opts);
 	  soln = qp.minimize (objf, inform, lambda);
 	}
       else
 	{
 	  // 4. qpsol (x, H, c,         llb, A, lub)
 
 	 QPSOL qp (x, H, c, linear_constraints);
-	 qp.copy (qpsol_opts);
+	 qp.set_options (qpsol_opts);
 	 soln = qp.minimize (objf, inform, lambda);
        }
       goto solved;
     }
 
   return retval;
 
  solved:
