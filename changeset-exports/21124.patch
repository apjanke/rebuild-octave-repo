# HG changeset patch
# User Rik <rik@octave.org>
# Date 1453355676 28800
#      Wed Jan 20 21:54:36 2016 -0800
# Node ID 95f8c8cdbffee98d7e39fe7348651d3d0cba797d
# Parent  71408ab5071ed7ddf47b8c177d0785592c6f69b0
maint: Eliminate 'bool success' variable where possible.

* ov-base-diag.cc (load_ascii): Remove success var, return true.

* ov-base-int.cc (load_ascii): Remove success var, return true.

* ov-base-sparse.cc (load_ascii): Remove success var, return true.

* ov-bool-mat.cc (load_ascii): Remove success var, return true.

* ov-cx-mat.cc (load_ascii): Remove success var, return true.

* ov-fcn-handle.cc (set_fcn): Remove success var, return true.

* ov-flt-cx-mat.cc (load_ascii): Remove success var, return true.

* ov-flt-re-mat.cc (load_ascii): Remove success var, return true.

* ov-perm.cc (load_ascii): Remove success var, return true.

* ov-re-mat.cc (load_ascii): Remove success var, return true.

* ov-str-mat.cc (load_ascii): Remove success var, return true.

* ov-struct.cc (load_ascii): Remove success var, return true.

diff --git a/libinterp/octave-value/ov-base-diag.cc b/libinterp/octave-value/ov-base-diag.cc
--- a/libinterp/octave-value/ov-base-diag.cc
+++ b/libinterp/octave-value/ov-base-diag.cc
@@ -485,17 +485,16 @@ octave_base_diag<DMT, MT>::save_ascii (s
 }
 
 template <class DMT, class MT>
 bool
 octave_base_diag<DMT, MT>::load_ascii (std::istream& is)
 {
   octave_idx_type r = 0;
   octave_idx_type c = 0;
-  bool success = true;
 
   if (! extract_keyword (is, "rows", r, true)
       || ! extract_keyword (is, "columns", c, true))
     error ("load: failed to extract number of rows and columns");
 
   octave_idx_type l = r < c ? r : c;
   MT tmp (l, 1);
   is >> tmp;
@@ -508,17 +507,17 @@ octave_base_diag<DMT, MT>::load_ascii (s
   // through the inheritance tree.
   typedef typename DMT::element_type el_type;
   matrix = DMT (MDiagArray2<el_type> (MArray<el_type> (tmp)));
   matrix.resize (r, c);
 
   // Invalidate cache. Probably not necessary, but safe.
   dense_cache = octave_value ();
 
-  return success;
+  return true;
 }
 
 template <class DMT, class MT>
 void
 octave_base_diag<DMT, MT>::print_raw (std::ostream& os,
                                       bool pr_as_read_syntax) const
 {
   return octave_print_internal (os, matrix, pr_as_read_syntax,
diff --git a/libinterp/octave-value/ov-base-int.cc b/libinterp/octave-value/ov-base-int.cc
--- a/libinterp/octave-value/ov-base-int.cc
+++ b/libinterp/octave-value/ov-base-int.cc
@@ -200,17 +200,16 @@ octave_base_int_matrix<T>::save_ascii (s
   return true;
 }
 
 template <class T>
 bool
 octave_base_int_matrix<T>::load_ascii (std::istream& is)
 {
   int mdims = 0;
-  bool success = true;
 
   if (! extract_keyword (is, "ndims", mdims, true))
     error ("load: failed to extract number of dimensions");
 
   if (mdims < 0)
     error ("load: failed to extract number of rows and columns");
 
   dim_vector dv;
@@ -223,17 +222,17 @@ octave_base_int_matrix<T>::load_ascii (s
 
   is >> tmp;
 
   if (! is)
     error ("load: failed to load matrix constant");
 
   this->matrix = tmp;
 
-  return success;
+  return true;
 }
 
 template <class T>
 bool
 octave_base_int_matrix<T>::save_binary (std::ostream& os, bool&)
 {
   dim_vector d = this->dims ();
   if (d.length () < 1)
diff --git a/libinterp/octave-value/ov-base-sparse.cc b/libinterp/octave-value/ov-base-sparse.cc
--- a/libinterp/octave-value/ov-base-sparse.cc
+++ b/libinterp/octave-value/ov-base-sparse.cc
@@ -439,33 +439,32 @@ octave_base_sparse<T>::save_ascii (std::
 
 template <class T>
 bool
 octave_base_sparse<T>::load_ascii (std::istream& is)
 {
   octave_idx_type nz = 0;
   octave_idx_type nr = 0;
   octave_idx_type nc = 0;
-  bool success = true;
 
   if (! extract_keyword (is, "nnz", nz, true)
       || ! extract_keyword (is, "rows", nr, true)
       || ! extract_keyword (is, "columns", nc, true))
     error ("load: failed to extract number of rows and columns");
 
   T tmp (nr, nc, nz);
 
   is >> tmp;
 
   if (! is)
     error ("load: failed to load matrix constant");
 
   matrix = tmp;
 
-  return success;
+  return true;
 }
 
 
 template <class T>
 octave_value
 octave_base_sparse<T>::fast_elem_extract (octave_idx_type n) const
 {
   octave_idx_type nr = matrix.rows ();
diff --git a/libinterp/octave-value/ov-bool-mat.cc b/libinterp/octave-value/ov-bool-mat.cc
--- a/libinterp/octave-value/ov-bool-mat.cc
+++ b/libinterp/octave-value/ov-bool-mat.cc
@@ -202,18 +202,16 @@ octave_bool_matrix::save_ascii (std::ost
     }
 
   return true;
 }
 
 bool
 octave_bool_matrix::load_ascii (std::istream& is)
 {
-  bool success = true;
-
   string_vector keywords (2);
 
   keywords[0] = "ndims";
   keywords[1] = "rows";
 
   std::string kw;
   octave_idx_type val = 0;
 
@@ -279,17 +277,17 @@ octave_bool_matrix::load_ascii (std::ist
       else if (nr == 0 || nc == 0)
         matrix = boolMatrix (nr, nc);
       else
         panic_impossible ();
     }
   else
     panic_impossible ();
 
-  return success;
+  return true;
 }
 
 bool
 octave_bool_matrix::save_binary (std::ostream& os, bool& /* save_as_floats */)
 {
 
   dim_vector d = dims ();
   if (d.length () < 1)
diff --git a/libinterp/octave-value/ov-cx-mat.cc b/libinterp/octave-value/ov-cx-mat.cc
--- a/libinterp/octave-value/ov-cx-mat.cc
+++ b/libinterp/octave-value/ov-cx-mat.cc
@@ -338,18 +338,16 @@ octave_complex_matrix::save_ascii (std::
     }
 
   return true;
 }
 
 bool
 octave_complex_matrix::load_ascii (std::istream& is)
 {
-  bool success = true;
-
   string_vector keywords(2);
 
   keywords[0] = "ndims";
   keywords[1] = "rows";
 
   std::string kw;
   octave_idx_type val = 0;
 
@@ -401,17 +399,17 @@ octave_complex_matrix::load_ascii (std::
       else if (nr == 0 || nc == 0)
         matrix = ComplexMatrix (nr, nc);
       else
         panic_impossible ();
     }
   else
     panic_impossible ();
 
-  return success;
+  return true;
 }
 
 bool
 octave_complex_matrix::save_binary (std::ostream& os, bool& save_as_floats)
 {
   dim_vector d = dims ();
   if (d.length () < 1)
     return false;
diff --git a/libinterp/octave-value/ov-fcn-handle.cc b/libinterp/octave-value/ov-fcn-handle.cc
--- a/libinterp/octave-value/ov-fcn-handle.cc
+++ b/libinterp/octave-value/ov-fcn-handle.cc
@@ -246,18 +246,16 @@ octave_fcn_handle::is_equal_to (const oc
 
   return retval;
 }
 
 bool
 octave_fcn_handle::set_fcn (const std::string &octaveroot,
                             const std::string& fpath)
 {
-  bool success = true;
-
   if (octaveroot.length () != 0
       && fpath.length () >= octaveroot.length ()
       && fpath.substr (0, octaveroot.length ()) == octaveroot
       && OCTAVE_EXEC_PREFIX != octaveroot)
     {
       // First check if just replacing matlabroot is enough
       std::string str = OCTAVE_EXEC_PREFIX +
                         fpath.substr (octaveroot.length ());
@@ -326,17 +324,17 @@ octave_fcn_handle::set_fcn (const std::s
         {
           fcn = symbol_table::find_function (nm);
 
           if (! fcn.is_function ())
             error ("function handle points to non-existent function");
         }
     }
 
-  return success;
+  return true;
 }
 
 bool
 octave_fcn_handle::save_ascii (std::ostream& os)
 {
   if (nm == anonymous)
     {
       os << nm << "\n";
diff --git a/libinterp/octave-value/ov-flt-cx-mat.cc b/libinterp/octave-value/ov-flt-cx-mat.cc
--- a/libinterp/octave-value/ov-flt-cx-mat.cc
+++ b/libinterp/octave-value/ov-flt-cx-mat.cc
@@ -312,18 +312,16 @@ octave_float_complex_matrix::save_ascii 
     }
 
   return true;
 }
 
 bool
 octave_float_complex_matrix::load_ascii (std::istream& is)
 {
-  bool success = true;
-
   string_vector keywords(2);
 
   keywords[0] = "ndims";
   keywords[1] = "rows";
 
   std::string kw;
   octave_idx_type val = 0;
 
@@ -375,17 +373,17 @@ octave_float_complex_matrix::load_ascii 
       else if (nr == 0 || nc == 0)
         matrix = FloatComplexMatrix (nr, nc);
       else
         panic_impossible ();
     }
   else
     panic_impossible ();
 
-  return success;
+  return true;
 }
 
 bool
 octave_float_complex_matrix::save_binary (std::ostream& os, bool&)
 {
   dim_vector d = dims ();
   if (d.length () < 1)
     return false;
diff --git a/libinterp/octave-value/ov-flt-re-mat.cc b/libinterp/octave-value/ov-flt-re-mat.cc
--- a/libinterp/octave-value/ov-flt-re-mat.cc
+++ b/libinterp/octave-value/ov-flt-re-mat.cc
@@ -334,18 +334,16 @@ octave_float_matrix::save_ascii (std::os
     }
 
   return true;
 }
 
 bool
 octave_float_matrix::load_ascii (std::istream& is)
 {
-  bool success = true;
-
   string_vector keywords(2);
 
   keywords[0] = "ndims";
   keywords[1] = "rows";
 
   std::string kw;
   octave_idx_type val = 0;
 
@@ -397,17 +395,17 @@ octave_float_matrix::load_ascii (std::is
       else if (nr == 0 || nc == 0)
         matrix = FloatMatrix (nr, nc);
       else
         panic_impossible ();
     }
   else
     panic_impossible ();
 
-  return success;
+  return true;
 }
 
 bool
 octave_float_matrix::save_binary (std::ostream& os, bool&)
 {
 
   dim_vector d = dims ();
   if (d.length () < 1)
diff --git a/libinterp/octave-value/ov-perm.cc b/libinterp/octave-value/ov-perm.cc
--- a/libinterp/octave-value/ov-perm.cc
+++ b/libinterp/octave-value/ov-perm.cc
@@ -270,17 +270,16 @@ octave_perm_matrix::save_ascii (std::ost
 
   return true;
 }
 
 bool
 octave_perm_matrix::load_ascii (std::istream& is)
 {
   octave_idx_type n;
-  bool success = true;
   char orient;
 
   if (! extract_keyword (is, "size", n, true)
       || ! extract_keyword (is, "orient", orient, true))
     error ("load: failed to extract size & orientation");
 
   bool colp = orient == 'c';
   ColumnVector tmp (n);
@@ -290,17 +289,17 @@ octave_perm_matrix::load_ascii (std::ist
 
   Array<octave_idx_type> pvec (dim_vector (n, 1));
   for (octave_idx_type i = 0; i < n; i++) pvec(i) = tmp(i) - 1;
   matrix = PermMatrix (pvec, colp);
 
   // Invalidate cache. Probably not necessary, but safe.
   dense_cache = octave_value ();
 
-  return success;
+  return true;
 }
 
 bool
 octave_perm_matrix::save_binary (std::ostream& os, bool&)
 {
 
   int32_t sz = matrix.rows ();
   bool colp = true;
diff --git a/libinterp/octave-value/ov-re-mat.cc b/libinterp/octave-value/ov-re-mat.cc
--- a/libinterp/octave-value/ov-re-mat.cc
+++ b/libinterp/octave-value/ov-re-mat.cc
@@ -436,18 +436,16 @@ octave_matrix::save_ascii (std::ostream&
     }
 
   return true;
 }
 
 bool
 octave_matrix::load_ascii (std::istream& is)
 {
-  bool success = true;
-
   string_vector keywords(2);
 
   keywords[0] = "ndims";
   keywords[1] = "rows";
 
   std::string kw;
   octave_idx_type val = 0;
 
@@ -499,17 +497,17 @@ octave_matrix::load_ascii (std::istream&
       else if (nr == 0 || nc == 0)
         matrix = Matrix (nr, nc);
       else
         panic_impossible ();
     }
   else
     panic_impossible ();
 
-  return success;
+  return true;
 }
 
 bool
 octave_matrix::save_binary (std::ostream& os, bool& save_as_floats)
 {
 
   dim_vector d = dims ();
   if (d.length () < 1)
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -317,18 +317,16 @@ octave_char_matrix_str::save_ascii (std:
     }
 
   return true;
 }
 
 bool
 octave_char_matrix_str::load_ascii (std::istream& is)
 {
-  bool success = true;
-
   string_vector keywords(3);
 
   keywords[0] = "ndims";
   keywords[1] = "elements";
   keywords[2] = "length";
 
   std::string kw;
   int val = 0;
@@ -427,17 +425,17 @@ octave_char_matrix_str::load_ascii (std:
             error ("load: failed to load string constant");
 
           matrix = tmp;
         }
     }
   else
     panic_impossible ();
 
-  return success;
+  return true;
 }
 
 bool
 octave_char_matrix_str::save_binary (std::ostream& os,
                                      bool& /* save_as_floats */)
 {
   dim_vector d = dims ();
   if (d.length () < 1)
diff --git a/libinterp/octave-value/ov-struct.cc b/libinterp/octave-value/ov-struct.cc
--- a/libinterp/octave-value/ov-struct.cc
+++ b/libinterp/octave-value/ov-struct.cc
@@ -1351,17 +1351,16 @@ octave_scalar_struct::save_ascii (std::o
     }
 
   return true;
 }
 
 bool
 octave_scalar_struct::load_ascii (std::istream& is)
 {
-  bool success = true;
   octave_idx_type len = 0;
 
   if (! extract_keyword (is, "length", len) || len < 0)
     error ("load: failed to extract number of elements in structure");
 
   if (len > 0)
     {
       octave_scalar_map m;
@@ -1386,17 +1385,17 @@ octave_scalar_struct::load_ascii (std::i
 
       map = m;
     }
   else if (len == 0)
     map = octave_scalar_map ();
   else
     panic_impossible ();
 
-  return success;
+  return true;
 }
 
 bool
 octave_scalar_struct::save_binary (std::ostream& os, bool& save_as_floats)
 {
   octave_map m = map_value ();
 
   octave_idx_type nf = m.nfields ();
