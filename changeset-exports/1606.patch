# HG changeset patch
# User jwe
# Date 815317139 0
#      Thu Nov 02 12:58:59 1995 +0000
# Node ID 2d0541468991a1e84e52acd855b64c8bcaf953bd
# Parent  a77f2df218641939ef56aa9bd47f22520c5d03f3
[project @ 1995-11-02 12:57:17 by jwe]

diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -124,17 +124,20 @@ const char *current_eval_string = 0;
 
 // Nonzero means get input from current_eval_string.
 int get_input_from_eval_string = 0;
 
 // Nonzero means we're parsing a function file.
 int reading_fcn_file = 0;
 
 // Simple name of function file we are reading.
-char *curr_fcn_file_name = 0;
+const char *curr_fcn_file_name = 0;
+
+// Full name of file we are reading.
+const char *curr_fcn_file_full_name = 0;
 
 // Nonzero means we're parsing a script file.
 int reading_script_file = 0;
 
 // If we are reading from an M-file, this is it.
 FILE *ff_instream = 0;
 
 // Nonzero means we are using readline.
diff --git a/src/input.h b/src/input.h
--- a/src/input.h
+++ b/src/input.h
@@ -37,18 +37,21 @@ extern void initialize_readline (void);
 extern const char *current_eval_string;
 
 // Nonzero means get input from current_eval_string.
 extern int get_input_from_eval_string;
 
 // Nonzero means we're parsing a function file.
 extern int reading_fcn_file;
 
-// Simple name of M-file we are reading.
-extern char *curr_fcn_file_name;
+// Simple name of function file we are reading.
+extern const char *curr_fcn_file_name;
+
+// Full name of file we are reading.
+extern const char *curr_fcn_file_full_name;
 
 // Nonzero means we're parsing a script file.
 extern int reading_script_file;
 
 // If we are reading from an M-file, this is it.
 extern FILE *ff_instream;
 
 // Nonzero means we are using readline.
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -347,47 +347,47 @@ public:
   //                  Range
   // map              Octave_map
   // magic colon      tree_constant::magic_colon
   // all_va_args      tree_constant::all_va_args
 
   tree_constant (void) : tree_fvc ()
     { rep = new tree_constant_rep (); rep->count = 1; }
 
-  tree_constant (double d) : tree_fvc ()
+  tree_constant (double d, int l = -1, int c = -1) : tree_fvc (l, c)
     { rep = new tree_constant_rep (d); rep->count = 1; }
 
   tree_constant (const Matrix& m) : tree_fvc ()
     { rep = new tree_constant_rep (m); rep->count = 1; }
 
   tree_constant (const DiagMatrix& d) : tree_fvc ()
     { rep = new tree_constant_rep (d); rep->count = 1; }
 
   tree_constant (const RowVector& v, int pcv = -1) : tree_fvc ()
     { rep = new tree_constant_rep (v, pcv); rep->count = 1; }
 
   tree_constant (const ColumnVector& v, int pcv = -1) : tree_fvc ()
     { rep = new tree_constant_rep (v, pcv); rep->count = 1; }
 
-  tree_constant (const Complex& c) : tree_fvc ()
-    { rep = new tree_constant_rep (c); rep->count = 1; }
+  tree_constant (const Complex& C, int l = -1, int c = -1) : tree_fvc (l, c)
+    { rep = new tree_constant_rep (C); rep->count = 1; }
 
   tree_constant (const ComplexMatrix& m) : tree_fvc ()
     { rep = new tree_constant_rep (m); rep->count = 1; }
 
   tree_constant (const ComplexDiagMatrix& d) : tree_fvc ()
     { rep = new tree_constant_rep (d); rep->count = 1; }
 
   tree_constant (const ComplexRowVector& v, int pcv = -1) : tree_fvc ()
     { rep = new tree_constant_rep (v, pcv); rep->count = 1; }
 
   tree_constant (const ComplexColumnVector& v, int pcv = -1) : tree_fvc () 
     { rep = new tree_constant_rep (v, pcv); rep->count = 1; }
 
-  tree_constant (const char *s) : tree_fvc ()
+  tree_constant (const char *s, int l = -1, int c = -1) : tree_fvc (l, c)
     { rep = new tree_constant_rep (s); rep->count = 1; }
 
   tree_constant (const charMatrix& chm, int is_string = 0) : tree_fvc ()
     { rep = new tree_constant_rep (chm, is_string); rep->count = 1; }
 
   tree_constant (double base, double limit, double inc) : tree_fvc ()
     { rep = new tree_constant_rep (base, limit, inc); rep->count = 1; }
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -772,33 +772,34 @@ parse_fcn_file (int exec_script, char *f
 
 static int
 load_fcn_from_file (symbol_record *sym_rec, int exec_script)
 {
   int script_file_executed = 0;
 
   char *nm = sym_rec->name ();
 
-  // This is needed by yyparse.
-
-  curr_fcn_file_name = nm;
-
 #ifdef WITH_DLD
 
   if (load_octave_oct_file (nm))
     {
       force_link_to_function (nm);
     }
   else
 
 #endif
 
     {
       char *ff = fcn_file_in_path (nm);
 
+      // These are needed by yyparse.
+
+      curr_fcn_file_name = nm;
+      curr_fcn_file_full_name = ff;
+
       if (ff)
 	{
 	  script_file_executed = parse_fcn_file (exec_script, ff);
 	  delete [] ff;
 	}
 
       if (! (error_state || script_file_executed))
 	force_link_to_function (nm);
