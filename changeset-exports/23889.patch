# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1502472345 14400
#      Fri Aug 11 13:25:45 2017 -0400
# Node ID 97a237af2812b493e5ec461a656dc40728906652
# Parent  f9a33c3925a20860d06bdd49ecfb200a3644f1b6
* repelem.m: Style fixes.

diff --git a/scripts/general/repelem.m b/scripts/general/repelem.m
--- a/scripts/general/repelem.m
+++ b/scripts/general/repelem.m
@@ -1,14 +1,9 @@
-## Copyright (C) 2015 Markus Bergholz <markuman@gmail.com>
-## Co-author  Nicholas R. Jankowski <jankowskin@asme.org> **
-##   ** U.S. government employee, contributions are public domain
-##      with no personal assertion of copyright
-## prepareIdx routine Copyright (C) 2015 Peter John Acklam <pjacklam@gmail.com>, 
-## used with permission.
+## Copyright (C) 2015 Markus Bergholz
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or
 ## (at your option) any later version.
 ##
@@ -21,17 +16,17 @@
 ## along with Octave; see the file COPYING.  If not,
 ## see <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {} {} repelem (@var{X}, @var{R})
 ## @deftypefnx {} {} repelem (@var{X}, @var{R_1}, @dots{}, @var{R_n})
 ## Construct an array of repeated elements from X.
 ##
-## @var{X} must be a scalar, a vector or an n-dimensional array. 
+## @var{X} must be a scalar, a vector or an n-dimensional array.
 ##
 ## Each @var{R_j} must be either scalar, in which case
 ## each component in dimension @var{j} is repeated @var{R_j} times,
 ## or a (row or column) vector with the same number of elements as
 ## the size of dimension @var{j} @var{X},
 ## in which case the @var{k}th component of dimension @var{j}
 ## is repeated @var{R_j(k)} times.
 ##
@@ -62,53 +57,53 @@
 ##         3   3   5   5   7   7
 ##         3   3   5   5   7   7
 ##         4   4   9   9   2   2
 ##         4   4   9   9   2   2
 ##         4   4   9   9   2   2
 ##@end example
 ##
 ## More @var{R_j} may be specified than the number of dimensions of @var{X}.
-## Those excess @var{R_j} must be scalars (because @var{X}'s size in those 
-## dimensions is only 1), and @var{X} will be replicated in those dimension 
-## accordingly. 
-##  
+## Those excess @var{R_j} must be scalars (because @var{X}'s size in those
+## dimensions is only 1), and @var{X} will be replicated in those dimension
+## accordingly.
+##
 ##@example
 ## A = [1 2 3 4 5];
 ## B1 = 2;
 ## B2 = [2 1 3 0 2];
 ## B3 = 3;
 ## repelem(A,B1,B2,B3)
 ##  ==>    ans(:,:,1) =
 ##            1   1   2   3   3   3   5   5
 ##            1   1   2   3   3   3   5   5
-##         
+##
 ##         ans(:,:,2) =
-##         
+##
 ##            1   1   2   3   3   3   5   5
 ##            1   1   2   3   3   3   5   5
-##         
+##
 ##         ans(:,:,3) =
 ##            1   1   2   3   3   3   5   5
 ##            1   1   2   3   3   3   5   5
 ##@end example
 ##
 ## @var{R_n} must be specified in order.
 ## A placeholder of 1 can be used in dimensions not needing replication.
-## Inputs of [] will produce an error. 
+## Inputs of [] will produce an error.
 ##
 ##@example
 ## repelem([-1 0;0 1],1,2,1,2)
 ##  ==>  ans(:,:,1,1) =
 ##         -1  -1   0   0
 ##          0   0   1   1
 ##
 ##       ans(:,:,1,2) =
 ##         -1  -1   0   0
-##          0   0   1   1 
+##          0   0   1   1
 ##@end example
 ##
 ## If fewer @var{R_n} are given than dimensions in @var{X},
 ## @code{repelem} will assume @var{R_n} is 1 for those dimensions.
 ##
 ##@example
 ## A = cat(3,[-1 0;0 1],[-1 0;0 1])
 ##  ==>  ans(:,:,1) =
@@ -126,42 +121,50 @@
 ##          0   0   0   1   1   1
 ##          0   0   0   1   1   1
 ##
 ##       ans(:,:,2) =
 ##         -1  -1  -1   0   0   0
 ##         -1  -1  -1   0   0   0
 ##          0   0   0   1   1   1
 ##          0   0   0   1   1   1
-##@end example 
+##@end example
 ##
 ## @code{repelem} will preserve the class of @var{X},
 ## and works with strings, NA and NAN inputs.
-## Any @var{R_n} = 0 will produce an empty array. 
+## Any @var{R_n} = 0 will produce an empty array.
 ##
 ##@example
 ## repelem("Octave",2,3)
 ##  ==>    OOOccctttaaavvveee
 ##         OOOccctttaaavvveee
 ##
 ##repelem([1 2 3;1 2 3],2,0)
 ##  ==>    [](4x0)
 ##@end example
 ##
 ## @seealso{cat, kron, repmat}
 ## @end deftypefn
 
+## Author: Markus Bergholz <markuman@gmail.com>
+## Author: Nicholas R. Jankowski <jankowskin@asme.org>
+
+## As a U.S. government employee, Nicholas R. Jankowski makes no claim
+## of copyright.
+
+## The prepareIdx routine is Copyright (C) 2015 Peter John Acklam
+## <pjacklam@gmail.com>, used with permission.
 
 function retval = repelem (element, varargin)
 
   if (nargin <= 1)
     print_usage ();
-    
+
   elseif (nargin == 2)
-  
+
     v = varargin{1};
 
     if (isscalar (v))
 
       if (iscolumn (element))
         ## element values repeated v times in a col vector
         retval = element'(ones (v, 1), :)(:);
 
@@ -177,67 +180,66 @@ function retval = repelem (element, vara
 
     elseif (isvector (element) && isvector (v))
 
       if (numel (v) == numel (element))
         ## vector element with vector varargin.
         ## Basic run-length decoding in function prepareIdx returned
         ## idx2 as a row vector of element indices in the right positions.
         idx2 = prepareIdx (v);
-        ## fills with element values, direction matches element. 
+        ## fills with element values, direction matches element.
         retval  = element (idx2);
 
       else # catch unequal element counts
         error (["repelem: R1 must either be scalar or have the same" ...
                 " number of elements as the vector to be replicated"]);
       endif
-      
+
     else # catch any arrays passed to element or varargin with nargin==2
       error (["repelem: when called with only two inputs they must be" ...
               " either scalars or vectors, not %s and %s."],
               typeinfo (element), typeinfo (v));
     endif
-  
-  
+
   elseif (nargin == 3)  #can simplify for known dimension count
-    
+
     ## avoid repeated function calls
     elsize = size (element);
 
     ## 'numel' or 'length' faster than isvector in cellfun
     scalarv = (cellfun ("numel", varargin) == 1);
     nonscalarv = ! scalarv;
-    
+
     ##INPUT CHECK
 
     ##1:check that all varargin are either scalars or vectors, no arrays.
     ## isvector gives true for scalars.
     ## (Faster here with only two to avoid cellfun)
     if (! (isvector (varargin{1}) && (isvector (varargin{2}))))
       error ("repelem: R1 and R2 must be scalars or vectors");
 
     ##2: check that the ones that are vectors have the right length.
     elseif (any (! (cellfun ("numel", varargin (nonscalarv))
                     == elsize (nonscalarv))))
       error (["repelem: R_n must either be scalar or have the same" ...
               " number of elements as the size of dimension n of X"]);
 
-    endif 
-    
+    endif
+
     ## Create index arrays to pass to element.
     ## (It is no slower passing to prepareIdx than
     ## checking and doing scalars directly.)
     idx1 = prepareIdx (varargin{1}, elsize (1));
     idx2 = prepareIdx (varargin{2}, elsize (2));
-  
+
     ## The ":" at the end takes care of size(element)>2.
     retval = element (idx1, idx2, :);
 
   else  # if (nargin > 3) **no need for elseif
-  
+
     ## avoid repeated function calls
     elsize = size (element);
     eldims = numel (elsize);
     vasize = nargin - 1; #numel(varargin);
     %maxDim = max(eldims,vasize);
     dimsWithBoth = min (eldims, vasize);
     nonscalarv   = ! cellfun (@isscalar, varargin);
 
@@ -254,59 +256,58 @@ function retval = repelem (element, vara
       error (["repelem: R_n for trailing singleton dimensions must be scalar"]);
 
     ## 3: that the ones that are vectors have the right length.
     elseif (any (cellfun ("numel", varargin (nonscalarv))
                   != elsize (nonscalarv)))
       error (["repelem: varargin(n) must either be scalar or have the same" ...
               " number of elements as the size of dimension n of X"]);
 
-    endif 
-    
+    endif
+
     ## First, preallocate idx which will contain index array
     ## to be put into element.
     idx = cell (1, vasize);
 
     ## Use prepareIdx() to fill indices for each dimension
     ## that could be a scalar or vector.
     idx (1:dimsWithBoth) = cellfun (@prepareIdx, varargin (1:dimsWithBoth), ...
                                     num2cell (elsize (1:dimsWithBoth)), ...
                                     "UniformOutput", false);
 
     ## If there are more varargin inputs than element dimensions,
     ## input tests have verified they are just scalars,
     ## so add [1 1 1 1 1... 1] to those dims
     ## to perform concatenation in those dims.
-    
+
     ### can cellfun check speed against for loop.
     if (vasize > eldims)
       idx (eldims + 1:vasize) = cellfun ("ones", {1}, ...
                                          {varargin(eldims + 1:end){:}}, ...
                                          "UniformOutput", false);
     endif
-    
+
     ## Use completed idx to specify repetition of element values in
     ## all dimensions.
     ## The trailing ":" will take care of any case where eldims > vasize.
     retval = element (idx{:}, :);
-  
+
   endif
 
 endfunction
 
-
 function idx = prepareIdx (v, elsize_n)
 ## returns a row vector of indices prepared for replicating.
 
   if (isscalar (v))
     ## will always return row vector
     idx = [1:elsize_n](ones (v, 1), :)(:)';
 
   else
-  
+
     ## This works for a row or column vector.
     ## idx2 output will be a row vector.
 
     ## Get ending position for each element item.
     idx_temp = cumsum (v);
 
     ## Row vector with enough space for output
     idx (1:idx_temp (end)) = 0;
@@ -316,20 +317,19 @@ function idx = prepareIdx (v, elsize_n)
 
     ## Set starting position of each element to 1.
     idx(1) = 1;
 
     ## with prepared index
     idx = (find (v != 0))(cumsum (idx));
 
   endif
-  
+
 endfunction
 
-
 %%% tests for help examples
 %!assert (repelem([1 2 3 4 5], [2 1 0 1 2]), [1 1 2 4 5 5]);
 %!assert (repelem(magic(3), [1 2 3],2), ...
 %!  [8 8 1 1 6 6;3 3 5 5 7 7;3 3 5 5 7 7;4 4 9 9 2 2;4 4 9 9 2 2;4 4 9 9 2 2]);
 %!assert (repelem([1 2 3 4 5],2,[2 1 3 0 2],3),repmat([1 1 2 3 3 3 5 5],2,1,3));
 %!assert (repelem([-1 0;0 1],1,2,1,2), repmat([-1 -1 0 0; 0 0 1 1],1,1,1,2));
 %!assert (repelem(cat(3,[-1 0 ; 0 1],[-1 0 ; 0 1]),2,3), ...
 %!  repmat([-1 -1 -1 0 0 0;-1 -1 -1 0 0 0;0 0 0 1 1 1;0 0 0 1 1 1],1,1,2));
