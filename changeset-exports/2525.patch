# HG changeset patch
# User jwe
# Date 848265811 0
#      Sun Nov 17 21:23:31 1996 +0000
# Node ID 8561d88be5f2b6c39d780be8868eaf0e04a31ce2
# Parent  7dc71ca5d09260a6a5313141f8a7f07fd6602752
[project @ 1996-11-17 21:23:31 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,16 @@
 Sun Nov 17 14:14:48 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* parse.y (set_stmt_print_flag): New function.
+	(sep_type): New member for bison %union declaration.
+	Simplify rules for statement lists keeping track of the type of
+	the first separator in the values associated with the
+	nonterminals for the separators.
+
 	* lex.l (handle_identifier): Set lexer_flags.doing_set if the
 	token is "gset", not "set".
 
 Sat Nov 16 21:41:26 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makefile.in (parse.cc, lex.cc): Add special rules for these files.
 	Delete pattern rules for .y and .l files.
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -223,16 +223,19 @@ static tree_index_expression *make_index
 	 (tree_indirect_ref *indir, tree_argument_list *args);
 
 // Finish building a matrix list.
 static tree_expression *finish_matrix (tree_matrix *m);
 
 // Maybe print a warning.  Duh.
 static void maybe_warn_missing_semi (tree_statement_list *);
 
+// Set the print flag for a statement based on the separator type.
+static void set_stmt_print_flag (tree_statement_list *, char, bool);
+
 #define ABORT_PARSE \
   do \
     { \
       global_command = 0; \
       yyerrok; \
       if (interactive) \
 	YYACCEPT; \
       else \
@@ -245,16 +248,17 @@ static void maybe_warn_missing_semi (tre
 // Bison declarations.
 
 %union
 {
 // The type of the basic tokens returned by the lexer.
   token *tok_val;
 
 // Types for the nonterminals we generate.
+  char sep_type;
   tree *tree_type;
   tree_matrix *tree_matrix_type;
   tree_matrix_row *tree_matrix_row_type;
   tree_expression *tree_expression_type;
   tree_constant *tree_constant_type;
   tree_identifier *tree_identifier_type;
   tree_indirect_ref *tree_indirect_ref_type;
   tree_function *tree_function_type;
@@ -305,16 +309,17 @@ static void maybe_warn_missing_semi (tre
 %token LEXICAL_ERROR
 %token FCN SCREW_TWO
 %token ELLIPSIS
 %token ALL_VA_ARGS
 %token END_OF_INPUT
 %token USING TITLE WITH COLON OPEN_BRACE CLOSE_BRACE CLEAR
 
 // Nonterminals we construct.
+%type <sep_type> sep_no_nl opt_sep_no_nl sep opt_sep
 %type <tree_type> input
 %type <tree_matrix_type> rows rows1
 %type <tree_matrix_row_type> matrix_row matrix_row1
 %type <tree_expression_type> expression simple_expr simple_expr1
 %type <tree_expression_type> ans_expression title matrix
 %type <tree_identifier_type> identifier
 %type <tree_indirect_ref_type> indirect_ref indirect_ref1
 %type <tree_function_type> func_def1 func_def2 func_def3
@@ -393,111 +398,54 @@ input1		: '\n'
 		  { $$ = $1; }
 		;
 
 parse_error	: LEXICAL_ERROR
 		  { yyerror ("parse error"); }
 		| error
 		;
 
-simple_list	: semi_comma
-		  { $$ = 0; }
-		| comma_semi
-		  { $$ = 0; }
-		| simple_list1
-		  { $$ = $1; }
-		| simple_list1 comma_semi
-		  { $$ = $1; }
-		| simple_list1 semi_comma
+simple_list	: simple_list1 opt_sep_no_nl
 		  {
-		    tree_statement *tmp = $1->rear ();
-		    tmp->set_print_flag (0);
+		    set_stmt_print_flag ($1, $2, false);
 		    $$ = $1;
 		  }
 		;
 
 simple_list1	: statement
 		  { $$ = new tree_statement_list ($1); }
-		| semi_comma statement
-		  { $$ = new tree_statement_list ($2); }
-		| comma_semi statement
-		  { $$ = new tree_statement_list ($2); }
-		| simple_list1 semi_comma statement
+		| simple_list1 sep_no_nl statement
 		  {
-		    tree_statement *tmp = $1->rear ();
-		    tmp->set_print_flag (0);
+		    set_stmt_print_flag ($1, $2, false);
 		    $1->append ($3);
 		    $$ = $1;
 		  }
-		| simple_list1 comma_semi statement
-		  {
-		    $1->append ($3);
-		    maybe_warn_missing_semi ($1);
-		    $$ = $1;
-		  }
-		;
-
-semi_comma	: ';'
-		| semi_comma ','
-		| semi_comma ';'
-		;
-
-comma_semi	: ','
-		| comma_semi ';'
-		| comma_semi ','
-		;
-
-comma_nl_sep	: ','
-		| '\n'
-		| comma_nl_sep sep
-		;
-
-semi_sep	: ';'
-		| semi_sep sep
 		;
 
 opt_list	: // empty
 		  { $$ = new tree_statement_list (); }
 		| list
 		  { $$ = $1; }
 		;
 
-list		: list1
-		  {
-		    maybe_warn_missing_semi ($1);
-		    $$ = $1;
-		  }
-		| list1 comma_nl_sep
+list		: list1 opt_sep
 		  {
-		    maybe_warn_missing_semi ($1);
-		    $$ = $1;
-		  }
-		| list1 semi_sep
-		  {
-		    tree_statement *tmp = $1->rear ();
-		    tmp->set_print_flag (0);
+		    set_stmt_print_flag ($1, $2, true);
 		    $$ = $1;
 		  }
 		;
 
 list1		: statement
 		  {
 		    lexer_flags.beginning_of_function = 0;
 		    $$ = new tree_statement_list ($1);
 		  }
-		| list1 comma_nl_sep statement
+		| list1 sep statement
 		  {
-		    maybe_warn_missing_semi ($1);
-		    $1->append ($3);
-		    $$ = $1;
-		  }
-		| list1 semi_sep statement
-		  {
-		    tree_statement *tmp = $1->rear ();
-		    tmp->set_print_flag (0);
+		    set_stmt_print_flag ($1, $2, true);
 		    $1->append ($3);
 		    $$ = $1;
 		  }
 		;
 
 statement	: command
 		  { $$ = new tree_statement ($1); }
 		| ans_expression
@@ -672,38 +620,38 @@ command		: plot_command
 		  { $$ = $1; }
 		| global_decl
 		  { $$ = $1; }
 		| if_command
 		  {
 		    lexer_flags.iffing--;
 		    $$ = $1;
 		  }
-		| UNWIND optsep opt_list CLEANUP optsep opt_list END
+		| UNWIND opt_sep opt_list CLEANUP opt_sep opt_list END
 		  {
 		    if (! ($$ = make_unwind_command ($1, $3, $6, $7)))
 		      ABORT_PARSE;
 		  }
-		| TRY optsep opt_list CATCH optsep opt_list END
+		| TRY opt_sep opt_list CATCH opt_sep opt_list END
 		  {
 		    if (! ($$ = make_try_command ($1, $3, $6, $7)))
 		      ABORT_PARSE;
 		  }
-		| WHILE expression optsep opt_list END
+		| WHILE expression opt_sep opt_list END
 		  {
 		    if (! ($$ = make_while_command ($1, $2, $4, $5)))
 		      ABORT_PARSE;
 		  }
-		| FOR variable '=' expression optsep opt_list END
+		| FOR variable '=' expression opt_sep opt_list END
 		  {
 		    if (! ($$ = make_for_command ($1, $2, $4, $6, $7)))
 		      ABORT_PARSE;
 		  }
 		| FOR '[' screwed_again matrix_row SCREW_TWO '='
-		    expression optsep opt_list END
+		    expression opt_sep opt_list END
 		  {
 		    if (! ($$ = make_for_command ($1, $4, $7, $9, $10)))
 		      ABORT_PARSE;
 		  }
 		| BREAK
 		  {
 		    if (! ($$ = make_break_command ($1)))
 		      ABORT_PARSE;
@@ -731,45 +679,33 @@ if_cmd_list	: if_cmd_list1
 		  { $$ = $1; }
 		| if_cmd_list1 else_clause
 		  {
 		    $1->append ($2);
 		    $$ = $1;
 		  }
 		;
 
-if_cmd_list1	: expression optsep opt_list
+if_cmd_list1	: expression opt_sep opt_list
 		  { $$ = start_if_command ($1, $3); }
 		| if_cmd_list1 elseif_clause
 		  {
 		    $1->append ($2);
 		    $$ = $1;
 		  }
 		;
 
-elseif_clause	: ELSEIF optsep expression optsep opt_list
+elseif_clause	: ELSEIF opt_sep expression opt_sep opt_list
 		  { $$ = make_elseif_clause ($3, $5); }
 		;
 
-else_clause	: ELSE optsep opt_list
+else_clause	: ELSE opt_sep opt_list
 		  { $$ = new tree_if_clause ($3); }
 		;
 
-optsep		: // empty
-		| sep
-		;
-
-sep		: ','
-		| ';'
-		| '\n'
-		| sep ','
-		| sep ';'
-		| sep '\n'
-		;
-
 screwed_again	: // empty
 		  { lexer_flags.maybe_screwed_again++; }
 		;
 
 expression	: simple_expr
 		  { $$ = $1; }
 		| colon_expr
 		  { $$ = finish_colon_expression ($1); }
@@ -990,19 +926,19 @@ return_list1	: return_list_x identifier
 
 func_def2	: identifier safe local_symtab func_def3
 		  {
 		    if (! ($$ = frob_function_def ($1, $4)))
 		      ABORT_PARSE;
 		  }
 		;
 
-func_def3	: param_list optsep opt_list fcn_end_or_eof
+func_def3	: param_list opt_sep opt_list fcn_end_or_eof
 		  { $$ = start_function_def ($1, $3); }
-		| optsep opt_list fcn_end_or_eof
+		| opt_sep opt_list fcn_end_or_eof
 		  { $$ = start_function_def (0, $2); }
 		;
 
 fcn_end_or_eof	: END
 		  {
 		    if (check_end ($1, token::function_end))
 		      ABORT_PARSE;
 
@@ -1166,16 +1102,52 @@ matrix_row1	: expression		// First eleme
 		  { $$ = new tree_matrix_row ($1); }
 		| matrix_row1 ',' expression
 		  {
 		    $1->append ($3);
 		    $$ = $1;
 		  }
 		;
 
+sep_no_nl	: ','
+		  { $$ = ','; }
+		| ';'
+		  { $$ = ';'; }
+		| sep_no_nl ','
+		  { $$ = $1; }
+		| sep_no_nl ';'
+		  { $$ = $1; }
+		;
+
+opt_sep_no_nl	: // empty
+		  { $$ = 0; }
+		| sep_no_nl
+		  { $$ = $1; }
+		;
+
+sep		: ','
+		  { $$ = ','; }
+		| ';'
+		  { $$ = ';'; }
+		| '\n'
+		  { $$ = '\n'; }
+		| sep ','
+		  { $$ = $1; }
+		| sep ';'
+		  { $$ = $1; }
+		| sep '\n'
+		  { $$ = $1; }
+		;
+
+opt_sep		: // empty
+		  { $$ = 0; }
+		| sep
+		  { $$ = $1; }
+		;
+
 %%
 
 // Generic error messages.
 
 static void
 yyerror (char *s)
 {
   int err_col = current_input_column - 1;
@@ -2132,16 +2104,42 @@ maybe_warn_missing_semi (tree_statement_
 
       if (tmp->is_expression ())
 	warning ("missing semicolon near line %d, column %d in file `%s'",
 		 tmp->line (), tmp->column (),
 		 curr_fcn_file_full_name.c_str ());
     }
 }
 
+static void
+set_stmt_print_flag (tree_statement_list *list, char sep,
+		     bool warn_missing_semi)
+{
+  switch (sep)
+    {
+    case ';':
+      {
+	tree_statement *tmp = list->rear ();
+	tmp->set_print_flag (0);
+      }
+      break;
+
+    case 0:
+    case ',':
+    case '\n':
+      if (warn_missing_semi)
+	maybe_warn_missing_semi (list);
+      break;
+
+    default:
+      warning ("unrecognized separator type!");
+      break;
+    }
+}
+
 static int
 warn_assign_as_truth_value (void)
 {
   Vwarn_assign_as_truth_value
     = check_preference ("warn_assign_as_truth_value");
 
   return 0;
 }
