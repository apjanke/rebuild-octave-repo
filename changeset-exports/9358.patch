# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1245287501 14400
#      Wed Jun 17 21:11:41 2009 -0400
# Node ID d4b1314a7c311a3c1123e12f2e10ba4fdd991cdf
# Parent  95ec5660149760ec4fc8a1a607e65d5d63a69a57
mex.cc (mxArray_octave_value::get_data): avoid enumerating types that can be handled as foreign

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2009-06-17  John W. Eaton  <jwe@octave.org>
+
+	* mex.cc (mxArray_octave_value::get_data):
+	If octave_value::mex_get_data returns a valid pointer, mark it as
+	foreign and return it instead of enumerating the types that can be
+	handled directly.
+
+	* ov-re-mat.h (octave_matrix::mex_get_data): New function.
+	* ov-bool-mat.h (octave_bool_matrix::mex_get_data): Ditto.
+	* ov-flt-re-mat.h (octave_float_matrix::mex_get_data): Ditto.
+	* ov-intx.h (OCTAVE_VALUE_INT_MATRIX_T::mex_get_data): Ditto.
+	* ov-base-mat.h (octave_base_matrix::mex_get_data): Delete.
+
 2009-06-16  Jaroslav Hajek  <highegg@gmail.com>
 
 	* symtab.h (symbol_table::set_scope_and_context): Avoid checking
 	error_state for setting context.
 
 2009-06-15  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-re-mat.h (octave_matrix::octave_matrix (const Array<octave_idx_type>&,
diff --git a/src/mex.cc b/src/mex.cc
--- a/src/mex.cc
+++ b/src/mex.cc
@@ -493,21 +493,20 @@ public:
 
   // Not allowed.
   void set_cell (mwIndex /*idx*/, mxArray */*val*/) { request_mutation (); }
 
   double get_scalar (void) const { return val.scalar_value (true); }
 
   void *get_data (void) const
   {
-    void *retval = 0;
-
-    if (is_char ()
-	|| (is_numeric () && is_real_type () && ! is_range ()))
-      retval = maybe_mark_foreign (val.mex_get_data ());
+    void *retval = val.mex_get_data ();
+
+    if (retval)
+      maybe_mark_foreign (retval);
     else
       request_mutation ();
 
     return retval;
   }
 
   void *get_imag_data (void) const
   {
diff --git a/src/ov-base-diag.cc b/src/ov-base-diag.cc
--- a/src/ov-base-diag.cc
+++ b/src/ov-base-diag.cc
@@ -495,17 +495,17 @@ octave_base_diag<DMT, MT>::print_info (s
   matrix.print_info (os, prefix);
 }
 
 template <class DMT, class MT>
 octave_value
 octave_base_diag<DMT, MT>::to_dense (void) const
 {
   if (! dense_cache.is_defined ())
-      dense_cache = MT (matrix);
+    dense_cache = MT (matrix);
 
   return dense_cache;
 }
 
 #define FORWARD_MAPPER(MAP) \
   template <class DMT, class MT> \
   octave_value \
   octave_base_diag<DMT, MT>::MAP (void) const \
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -149,20 +149,16 @@ public:
   bool is_true (void) const;
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
-  // Unsafe.  This function exists to support the MEX interface.
-  // You should not use it anywhere else.
-  void *mex_get_data (void) const { return matrix.mex_get_data (); }
-
 protected:
 
   MT matrix;
 
   idx_vector set_idx_cache (const idx_vector& idx) const
     {
       delete idx_cache;
       idx_cache = idx ? new idx_vector (idx) : 0;
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -192,16 +192,20 @@ public:
   bool load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug);
 #endif
 
   int write (octave_stream& os, int block_size,
 	     oct_data_conv::data_type output_type, int skip,
 	     oct_mach_info::float_format flt_fmt) const
     { return os.write (matrix, block_size, output_type, skip, flt_fmt); }
 
+  // Unsafe.  This function exists to support the MEX interface.
+  // You should not use it anywhere else.
+  void *mex_get_data (void) const { return matrix.mex_get_data (); }
+
   mxArray *as_mxArray (void) const;
 
   // Mapper functions are converted to double for treatment
 #define BOOL_MAT_MAPPER(MAP) \
   octave_value MAP (void) const \
     { \
       octave_matrix m (array_value ()); \
       return m.MAP (); \
diff --git a/src/ov-flt-re-mat.h b/src/ov-flt-re-mat.h
--- a/src/ov-flt-re-mat.h
+++ b/src/ov-flt-re-mat.h
@@ -186,16 +186,20 @@ public:
   bool load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug);
 #endif
 
   int write (octave_stream& os, int block_size,
 	     oct_data_conv::data_type output_type, int skip,
 	     oct_mach_info::float_format flt_fmt) const
     { return os.write (matrix, block_size, output_type, skip, flt_fmt); }
 
+  // Unsafe.  This function exists to support the MEX interface.
+  // You should not use it anywhere else.
+  void *mex_get_data (void) const { return matrix.mex_get_data (); }
+
   mxArray *as_mxArray (void) const;
 
   octave_value erf (void) const;
   octave_value erfc (void) const;
   octave_value gamma (void) const;
   octave_value lgamma (void) const;
   octave_value abs (void) const;
   octave_value acos (void) const;
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -319,16 +319,20 @@ public:
   idx_vector index_vector (void) const 
     { return idx_cache ? *idx_cache : set_idx_cache (idx_vector (matrix)); }
 
   int write (octave_stream& os, int block_size,
 	     oct_data_conv::data_type output_type, int skip,
 	     oct_mach_info::float_format flt_fmt) const
     { return os.write (matrix, block_size, output_type, skip, flt_fmt); }
 
+  // Unsafe.  This function exists to support the MEX interface.
+  // You should not use it anywhere else.
+  void *mex_get_data (void) const { return matrix.mex_get_data (); }
+
   mxArray *as_mxArray (void) const
   {
     mxArray *retval = new mxArray (OCTAVE_INT_MX_CLASS, dims (), mxREAL);
 
     OCTAVE_INT_T::val_type *pr = static_cast<OCTAVE_INT_T::val_type *> (retval->get_data ());
 
     mwSize nel = numel ();
 
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -194,16 +194,20 @@ public:
   bool load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug);
 #endif
 
   int write (octave_stream& os, int block_size,
 	     oct_data_conv::data_type output_type, int skip,
 	     oct_mach_info::float_format flt_fmt) const
     { return os.write (matrix, block_size, output_type, skip, flt_fmt); }
 
+  // Unsafe.  This function exists to support the MEX interface.
+  // You should not use it anywhere else.
+  void *mex_get_data (void) const { return matrix.mex_get_data (); }
+
   mxArray *as_mxArray (void) const;
 
   octave_value erf (void) const;
   octave_value erfc (void) const;
   octave_value gamma (void) const;
   octave_value lgamma (void) const;
   octave_value abs (void) const;
   octave_value acos (void) const;
