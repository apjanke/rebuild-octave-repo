# HG changeset patch
# User Ben Abbott  <bpabbott@mac.com>
# Date 1358461438 18000
#      Thu Jan 17 17:23:58 2013 -0500
# Branch classdef
# Node ID 3e782e337f8dfff7980828ad993dd8f8b4534b91
# Parent  de240df202907f049ae8468c8d79ae5d505e26d1
Rename classdef test class foo_payment to foo_value_class

* test/classdef/foo_value_class.m: Rename foo_payment -> foo_value_class.
* test/classdef/module.mk: Ditto.
* test/classdef/test_classdef.m: Ditto.

diff --git a/test/classdef/foo_payment.m b/test/classdef/foo_value_class.m
rename from test/classdef/foo_payment.m
rename to test/classdef/foo_value_class.m
--- a/test/classdef/foo_payment.m
+++ b/test/classdef/foo_value_class.m
@@ -1,23 +1,23 @@
-classdef foo_payment
+classdef foo_value_class
   properties
     rate;
     term;
     principle;
   end
   methods
-    function obj = foo_payment (r, t, p)
+    function obj = foo_value_class (r, t, p)
       if (nargin == 3)
         obj.rate = r;
         obj.term = t;
         obj.principle = p;
       elseif (nargin ~= 0)
-        error ('foo_payment:SyntaxError', ...
-               'foo_payment: Invalid syntax')
+        error ('foo_value_class:SyntaxError', ...
+               'foo_value_class: Invalid syntax')
       end
     end
     function amt = amount (obj)
       i = obj.rate / (12 * 100);
       if (i == 0 && obj.term == 0)
         amt = obj.principle;
       else
         amt = (obj.principle * i) / (1 - (1 + i)^(-obj.term));
diff --git a/test/classdef/module.mk b/test/classdef/module.mk
--- a/test/classdef/module.mk
+++ b/test/classdef/module.mk
@@ -1,5 +1,5 @@
 classdef_FCN_FILES = \
-  classdef/foo_payment.m \
+  classdef/foo_value_class.m \
   classdef/test_classdef.m
 
 FCN_FILES += $(classdef_FCN_FILES)
diff --git a/test/classdef/test_classdef.m b/test/classdef/test_classdef.m
--- a/test/classdef/test_classdef.m
+++ b/test/classdef/test_classdef.m
@@ -30,28 +30,28 @@
 %%  in the test directory.
 %%
 %%  The classes provide the ability to test most of the major features
 %%  of the classdef OOP facilities.  There are a number of classes, mostly
 %%  kind of the same, that create a hierarchy.
 
 %%  Basic classdef tests for value class
 %!shared p, q, i, amt
-%! q = foo_payment ();
-%! p = foo_payment (4, 4*12, 50e3);
+%! q = foo_value_class ();
+%! p = foo_value_class (4, 4*12, 50e3);
 %! i = p.rate / (12 * 100);
 %! amt = (p.principle * i) / (1 - (1 + i)^(-p.term));
 %!assert (isempty (q.rate));
 %!assert (isempty (q.principle));
 %!assert (isempty (q.term));
-%!assert (class (p), "foo_payment");
+%!assert (class (p), "foo_value_class");
 %!assert (p.term, 48);
 %!assert (p.rate, 4.0);
 %!assert (p.principle, 50e3);
 %!assert (p.amount, amt, eps ())
 %!xtest
 %! assert (amount (p), amt, eps ())
 %!xtest
 %! assert (properties (p), {'rate'; 'term'; 'principle'})
 %!xtest
-%! assert (methods (p), {'amount'; 'foo_payment'})
-%!assert (isempty (foo_payment().rate))
-%!error <property `rate' is not constant> foo_payment.rate
+%! assert (methods (p), {'amount'; 'foo_value_class'})
+%!assert (isempty (foo_value_class().rate))
+%!error <property `rate' is not constant> foo_value_class.rate
