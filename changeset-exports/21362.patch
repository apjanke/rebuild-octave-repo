# HG changeset patch
# User Philip Nienhuis <prnienhuis@users.sf.net>
# Date 1449933537 -3600
#      Sat Dec 12 16:18:57 2015 +0100
# Node ID 1bb9a34011d1785dfdc818b00e558fc61824544c
# Parent  9ca194f7a85809b0e8c5ac32a637d84c5e67ac12
doc: Specify that only numeric data are allowed for delimited file I/O (bug #46248).

* csvread.m, csvwrite.m, dlmread.cc (Fdlmread), dlmwrite.m: Update docstrings.

diff --git a/libinterp/corefcn/dlmread.cc b/libinterp/corefcn/dlmread.cc
--- a/libinterp/corefcn/dlmread.cc
+++ b/libinterp/corefcn/dlmread.cc
@@ -158,38 +158,40 @@ parse_range_spec (const octave_value& ra
 
 DEFUN (dlmread, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {@var{data} =} dlmread (@var{file})\n\
 @deftypefnx {} {@var{data} =} dlmread (@var{file}, @var{sep})\n\
 @deftypefnx {} {@var{data} =} dlmread (@var{file}, @var{sep}, @var{r0}, @var{c0})\n\
 @deftypefnx {} {@var{data} =} dlmread (@var{file}, @var{sep}, @var{range})\n\
 @deftypefnx {} {@var{data} =} dlmread (@dots{}, \"emptyvalue\", @var{EMPTYVAL})\n\
-Read the matrix @var{data} from a text file which uses the delimiter\n\
+Read numeric data from the text file @var{file} which uses the delimiter\n\
 @var{sep} between data values.\n\
 \n\
 If @var{sep} is not defined the separator between fields is determined from\n\
 the file itself.\n\
 \n\
-Given two scalar arguments @var{r0} and @var{c0}, these define the starting\n\
-row and column of the data to be read.  These values are indexed from zero,\n\
-such that the first row corresponds to an index of zero.\n\
+The optional scalar arguments @var{r0} and @var{c0} define the starting row\n\
+and column of the data to be read.  These values are indexed from zero,\n\
+i.e., the first data row corresponds to an index of zero.\n\
 \n\
-The @var{range} parameter may be a 4-element vector containing the upper\n\
-left and lower right corner @code{[@var{R0},@var{C0},@var{R1},@var{C1}]}\n\
-where the lowest index value is zero.  Alternatively, a spreadsheet style\n\
-range such as @qcode{\"A2..Q15\"} or @qcode{\"T1:AA5\"} can be used.  The\n\
+The @var{range} parameter specifies exactly which data elements are read.\n\
+The first form of the parameter is a 4-element vector containing the upper\n\
+left and lower right corners @code{[@var{R0},@var{C0},@var{R1},@var{C1}]}\n\
+where the indices are zero-based.  Alternatively, a spreadsheet style\n\
+form such as @qcode{\"A2..Q15\"} or @qcode{\"T1:AA5\"} can be used.  The\n\
 lowest alphabetical index @qcode{'A'} refers to the first column.  The\n\
 lowest row index is 1.\n\
 \n\
-@var{file} should be a filename or file id given by @code{fopen}.  In the\n\
+@var{file} should be a filename or a file id given by @code{fopen}.  In the\n\
 latter case, the file is read until end of file is reached.\n\
 \n\
 The @qcode{\"emptyvalue\"} option may be used to specify the value used to\n\
-fill empty fields.  The default is zero.\n\
+fill empty fields.  The default is zero.  Note that any non-numeric values,\n\
+such as text, are also replaced by the @qcode{\"emptyvalue\"}.\n\
 @seealso{csvread, textscan, textread, dlmwrite}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
   double empty_value = 0.0;
 
   if (nargin > 2 && args(nargin-2).is_string ()
diff --git a/scripts/io/csvread.m b/scripts/io/csvread.m
--- a/scripts/io/csvread.m
+++ b/scripts/io/csvread.m
@@ -14,25 +14,28 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {@var{x} =} csvread (@var{filename})
 ## @deftypefnx {} {@var{x} =} csvread (@var{filename}, @var{dlm_opts})
-## Read the comma-separated-value file @var{filename} into the matrix @var{x}.
+## Read the comma-separated-value (CSV) file @var{filename} into the matrix
+## @var{x}.
+##
+## Note: only CSV files containing numeric data can be read.
 ##
 ## This function is equivalent to
 ##
 ## @example
 ## @var{x} = dlmread (@var{filename}, "," , @dots{})
 ## @end example
 ##
-## @seealso{csvwrite, dlmread, dlmwrite}
+## @seealso{dlmread, textread, textscan, csvwrite, dlmwrite}
 ## @end deftypefn
 
 function x = csvread (filename, varargin)
   x = dlmread (filename, ",", varargin{:});
 endfunction
 
 
 ## Tests for csvread() are in csvwrite()
diff --git a/scripts/io/csvwrite.m b/scripts/io/csvwrite.m
--- a/scripts/io/csvwrite.m
+++ b/scripts/io/csvwrite.m
@@ -14,18 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} csvwrite (@var{filename}, @var{x})
 ## @deftypefnx {} {} csvwrite (@var{filename}, @var{x}, @var{dlm_opts})
-## Write the matrix @var{x} to the file @var{filename} in
-## @w{comma-separated-value} format.
+## Write the numeric matrix @var{x} to the file @var{filename} in
+## @w{comma-separated-value} (CSV) format.
 ##
 ## This function is equivalent to
 ##
 ## @example
 ## dlmwrite (@var{filename}, @var{x}, ",", @dots{})
 ## @end example
 ##
 ## @seealso{csvread, dlmwrite, dlmread}
diff --git a/scripts/io/dlmwrite.m b/scripts/io/dlmwrite.m
--- a/scripts/io/dlmwrite.m
+++ b/scripts/io/dlmwrite.m
@@ -17,22 +17,24 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {} {} dlmwrite (@var{file}, @var{M})
 ## @deftypefnx {} {} dlmwrite (@var{file}, @var{M}, @var{delim}, @var{r}, @var{c})
 ## @deftypefnx {} {} dlmwrite (@var{file}, @var{M}, @var{key}, @var{val} @dots{})
 ## @deftypefnx {} {} dlmwrite (@var{file}, @var{M}, "-append", @dots{})
 ## @deftypefnx {} {} dlmwrite (@var{fid}, @dots{})
-## Write the matrix @var{M} to the named file using delimiters.
+## Write the numeric matrix @var{M} to the text file @var{file} using a 
+## delimiter.
 ##
-## @var{file} should be a filename or writable file ID given by @code{fopen}.
+## @var{file} should be a filename or a writable file ID given by @code{fopen}.
 ##
 ## The parameter @var{delim} specifies the delimiter to use to separate values
-## on a row.
+## on a row.  If no delimiter is specified the comma character @samp{,} is
+## used.
 ##
 ## The value of @var{r} specifies the number of delimiter-only lines to add to
 ## the start of the file.
 ##
 ## The value of @var{c} specifies the number of delimiters to prepend to each
 ## line of data.
 ##
 ## If the argument @qcode{"-append"} is given, append to the end of @var{file}.
@@ -43,22 +45,21 @@
 ## @table @asis
 ## @item @qcode{"append"}
 ## Either @qcode{"on"} or @qcode{"off"}.  See @qcode{"-append"} above.
 ##
 ## @item @qcode{"delimiter"}
 ## See @var{delim} above.
 ##
 ## @item @qcode{"newline"}
-## The character(s) to use to separate each row.  Three special cases exist
-## for this option.  @qcode{"unix"} is changed into
-## @qcode{"@xbackslashchar{}n"}, @qcode{"pc"} is changed into
-## @qcode{"@xbackslashchar{}r@xbackslashchar{}n"}, and @qcode{"mac"} is
-## changed into @qcode{"@xbackslashchar{}r"}.  Any other value is used
-## directly as the newline separator.
+## The character(s) to separate each row.  Three special cases exist for this
+## option.  @qcode{"unix"} is changed into @qcode{"@xbackslashchar{}n"},
+## @qcode{"pc"} is changed into @qcode{"@xbackslashchar{}r@xbackslashchar{}n"},
+## and @qcode{"mac"} is changed into @qcode{"@xbackslashchar{}r"}.  Any other
+## value is used directly as the newline separator.
 ##
 ## @item @qcode{"roffset"}
 ## See @var{r} above.
 ##
 ## @item @qcode{"coffset"}
 ## See @var{c} above.
 ##
 ## @item @qcode{"precision"}
