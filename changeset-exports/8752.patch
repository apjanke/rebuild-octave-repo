# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1234775743 -3600
#      Mon Feb 16 10:15:43 2009 +0100
# Node ID 06b9903a029b018368e3204f4ae90edb4c1cabff
# Parent  9f7ce4bf76508cbe02dab056b8b1cb0bdf65ef00
fix & clean up complex & sparse sorting

diff --git a/liboctave/Array-C.cc b/liboctave/Array-C.cc
--- a/liboctave/Array-C.cc
+++ b/liboctave/Array-C.cc
@@ -36,32 +36,16 @@ along with Octave; see the file COPYING.
 
 template <>
 inline bool
 sort_isnan<Complex> (const Complex& x)
 {
   return xisnan (x);
 }
 
-template <>
-bool
-octave_sort<Complex>::ascending_compare (const Complex& a, const Complex& b)
-{
-  return ((std::abs (a) < std::abs (b))
-	  || ((std::abs (a) == std::abs (b)) && (arg (a) < arg (b))));
-}
-
-template <>
-bool
-octave_sort<Complex>::descending_compare (const Complex& a, const Complex& b)
-{
-  return ((std::abs (a) > std::abs (b))
-	  || ((std::abs (a) == std::abs (b)) && (arg (a) > arg (b))));
-}
-
 static bool
 nan_ascending_compare (const Complex& x, const Complex& y)
 {
   return (xisnan (y)
 	  ? ! xisnan (x)
 	  : ((std::abs (x) < std::abs (x))
 	     || ((std::abs (x) == std::abs (x)) && (arg (x) < arg (x)))));
 }
diff --git a/liboctave/Array-fC.cc b/liboctave/Array-fC.cc
--- a/liboctave/Array-fC.cc
+++ b/liboctave/Array-fC.cc
@@ -36,34 +36,16 @@ along with Octave; see the file COPYING.
 
 template <>
 inline bool
 sort_isnan<FloatComplex> (const FloatComplex& x)
 {
   return xisnan (x);
 }
 
-template <>
-bool
-octave_sort<FloatComplex>::ascending_compare (const FloatComplex& a,
-					      const FloatComplex& b)
-{
-  return ((std::abs (a) < std::abs (b))
-	  || ((std::abs (a) == std::abs (b)) && (arg (a) < arg (b))));
-}
-
-template <>
-bool
-octave_sort<FloatComplex>::descending_compare (const FloatComplex& a,
-					       const FloatComplex& b)
-{
-  return ((std::abs (a) > std::abs (b))
-	  || ((std::abs (a) == std::abs (b)) && (arg (a) > arg (b))));
-}
-
 static bool
 nan_ascending_compare (const FloatComplex& x, const FloatComplex& y)
 {
   return (xisnan (y)
 	  ? ! xisnan (x)
 	  : ((std::abs (x) < std::abs (x))
 	     || ((std::abs (x) == std::abs (x)) && (arg (x) < arg (x)))));
 }
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,17 @@
+2009-02-16  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array-C.cc, Array-fC.cc: Don't redefine complex comparison.
+	* Sparse.cc (Sparse::sort): Don't use vec_index.
+	* Sparse-C.cc, Sparse-d.cc, Sparse-b.cc: Don't reinstantiate
+	octave_sort, reflect changes.
+	* sparse-sort.cc: Explicitly instantiate octave_sort for requested
+	pointer types.
+
 2009-02-16  Jaroslav Hajek  <highegg@gmail.com>
 
 	* oct-cmplx.h (operator <, operator >): New operators.
 	* mx-inlines.cc (OP_MINMAX_FCN, OP_MINMAX_FCN2, OP_MINMAX_FCNN):
 	New macros.
 	(mx_inline_min, mx_inline_max, do_mx_minmax_op): New overloaded
 	template functions.
 	* dNDArray (NDArray::min, NDArray::max): Use do_mx_minmax_op.
diff --git a/liboctave/Sparse-C.cc b/liboctave/Sparse-C.cc
--- a/liboctave/Sparse-C.cc
+++ b/liboctave/Sparse-C.cc
@@ -35,70 +35,33 @@ along with Octave; see the file COPYING.
 
 
 static double
 xabs (const Complex& x)
 {
   return (xisinf (x.real ()) || xisinf (x.imag ())) ? octave_Inf : abs (x);
 }
 
-static bool
-operator < (const Complex& a, const Complex& b)
-{
-  return (xisnan (b) || (xabs (a) < xabs (b))
-	  || ((xabs (a) == xabs (b)) && (arg (a) < arg (b))));
-}
-
-static bool
-operator > (const Complex& a, const Complex& b)
-{
-  return (xisnan (a) || (xabs (a) > xabs (b))
-	  || ((xabs (a) == xabs (b)) && (arg (a) > arg (b))));
-}
-
-// This file must be included after the < and > operators are
-// defined to avoid errors with the Intel C++ compiler.
-#include "oct-sort.cc"
 
 template <>
 bool
-sparse_ascending_compare (Complex a, Complex b)
+sparse_ascending_compare<Complex> (const Complex& a, const Complex& b)
 {
   return (xisnan (b) || (xabs (a) < xabs (b))
 	  || ((xabs (a) == xabs (b)) && (arg (a) < arg (b))));
 }
 
 template <>
 bool
-sparse_ascending_compare (vec_index<Complex> *a, vec_index<Complex> *b)
-{
-  return (xisnan (b->vec)
-	  || (xabs (a->vec) < xabs (b->vec))
-	  || ((xabs (a->vec) == xabs (b->vec))
-	      && (arg (a->vec) < arg (b->vec))));
-}
-
-template <>
-bool
-sparse_descending_compare (Complex a, Complex b)
+sparse_descending_compare<Complex> (const Complex& a, const Complex& b)
 {
   return (xisnan (a) || (xabs (a) > xabs (b))
 	  || ((xabs (a) == xabs (b)) && (arg (a) > arg (b))));
 }
 
-template <>
-bool
-sparse_descending_compare (vec_index<Complex> *a, vec_index<Complex> *b)
-{
-  return (xisnan (a->vec)
-	  || (xabs (a->vec) > xabs (b->vec))
-	  || ((xabs (a->vec) == xabs (b->vec))
-	      && (arg (a->vec) > arg (b->vec))));
-}
-
 INSTANTIATE_SPARSE_AND_ASSIGN (Complex, OCTAVE_API);
 
 INSTANTIATE_SPARSE_ASSIGN (Complex, double, OCTAVE_API);
 
 #if 0
 template std::ostream& operator << (std::ostream&, const Sparse<Complex>&);
 #endif
 
diff --git a/liboctave/Sparse-b.cc b/liboctave/Sparse-b.cc
--- a/liboctave/Sparse-b.cc
+++ b/liboctave/Sparse-b.cc
@@ -24,17 +24,16 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 // Instantiate Sparse matrix of double values.
 
 #include "Sparse.h"
 #include "Sparse.cc"
-#include "oct-sort.cc"
 
 INSTANTIATE_SPARSE_AND_ASSIGN (bool, OCTAVE_API);
 
 #if 0
 template std::ostream& operator << (std::ostream&, const Sparse<bool>&);
 #endif
 
 /*
diff --git a/liboctave/Sparse-d.cc b/liboctave/Sparse-d.cc
--- a/liboctave/Sparse-d.cc
+++ b/liboctave/Sparse-d.cc
@@ -25,46 +25,31 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 // Instantiate Sparse matrix of double values.
 
 #include "lo-mappers.h"
 #include "Sparse.h"
 #include "Sparse.cc"
-#include "oct-sort.cc"
 
 template <>
 bool
-sparse_ascending_compare (double a, double b)
+sparse_ascending_compare<double> (double a, double b)
 {
   return (xisnan (b) || (a < b));
 }
 
 template <>
 bool
-sparse_ascending_compare (vec_index<double> *a, vec_index<double> *b)
-{
-  return (xisnan (b->vec) || (a->vec < b->vec));
-}
-
-template <>
-bool
-sparse_descending_compare (double a, double b)
+sparse_descending_compare<double> (double a, double b)
 {
   return (xisnan (a) || (a > b));
 }
 
-template <>
-bool
-sparse_descending_compare (vec_index<double> *a, vec_index<double> *b)
-{
-  return (xisnan (b->vec) || (a->vec > b->vec));
-}
-
 INSTANTIATE_SPARSE_AND_ASSIGN (double, OCTAVE_API);
 
 #if 0
 template std::ostream& operator << (std::ostream&, const Sparse<double>&);
 #endif
 
 /*
 ;;; Local Variables: ***
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -2069,43 +2069,31 @@ Sparse<T>::index (Array<idx_vector>& ra_
 
   return index (ra_idx (0), ra_idx (1), resize_ok);
 }
 
 // Can't use versions of these in Array.cc due to duplication of the 
 // instantiations for Array<double and Sparse<double>, etc
 template <class T>
 bool 
-sparse_ascending_compare (T a, T b)
+sparse_ascending_compare (typename ref_param<T>::type a, 
+                          typename ref_param<T>::type b)
 {
   return (a < b);
 }
 
 template <class T>
 bool 
-sparse_descending_compare (T a, T b)
+sparse_descending_compare (typename ref_param<T>::type a, 
+                           typename ref_param<T>::type b)
 {
   return (a > b);
 }
 
 template <class T>
-bool 
-sparse_ascending_compare (vec_index<T> *a, vec_index<T> *b)
-{
-  return (a->vec < b->vec);
-}
-
-template <class T>
-bool 
-sparse_descending_compare (vec_index<T> *a, vec_index<T> *b)
-{
-  return (a->vec > b->vec);
-}
-
-template <class T>
 Sparse<T>
 Sparse<T>::sort (octave_idx_type dim, sortmode mode) const
 {
   Sparse<T> m = *this;
 
   octave_idx_type nr = m.rows ();
   octave_idx_type nc = m.columns ();
 
@@ -2117,42 +2105,42 @@ Sparse<T>::sort (octave_idx_type dim, so
       m = m.transpose ();
       nr = m.rows ();
       nc = m.columns ();
     }
 
   octave_sort<T> lsort;
 
   if (mode == ASCENDING) 
-    lsort.set_compare (sparse_ascending_compare);
+    lsort.set_compare (sparse_ascending_compare<T>);
   else if (mode == DESCENDING)
-    lsort.set_compare (sparse_descending_compare);
+    lsort.set_compare (sparse_descending_compare<T>);
   else
     abort ();
 
   T *v = m.data ();
   octave_idx_type *mcidx = m.cidx ();
   octave_idx_type *mridx = m.ridx ();
 
   for (octave_idx_type j = 0; j < nc; j++)
     {
       octave_idx_type ns = mcidx [j + 1] - mcidx [j];
       lsort.sort (v, ns);
 
       octave_idx_type i;
       if (mode == ASCENDING) 
 	{
 	  for (i = 0; i < ns; i++)
-	    if (sparse_ascending_compare (static_cast<T> (0), v [i]))
+	    if (sparse_ascending_compare<T> (static_cast<T> (0), v [i]))
 	      break;
 	}
       else
 	{
 	  for (i = 0; i < ns; i++)
-	    if (sparse_descending_compare (static_cast<T> (0), v [i]))
+	    if (sparse_descending_compare<T> (static_cast<T> (0), v [i]))
 	      break;
 	}
       for (octave_idx_type k = 0; k < i; k++)
 	mridx [k] = k;
       for (octave_idx_type k = i; k < ns; k++)
 	mridx [k] = k - ns + nr; 
 
       v += ns;
@@ -2183,94 +2171,82 @@ Sparse<T>::sort (Array<octave_idx_type> 
 
   if (dim > 0)
     {
       m = m.transpose ();
       nr = m.rows ();
       nc = m.columns ();
     }
 
-  octave_sort<vec_index<T> *> indexed_sort;
+  octave_sort<T> indexed_sort;
 
   if (mode == ASCENDING) 
-    indexed_sort.set_compare (sparse_ascending_compare);
+    indexed_sort.set_compare (sparse_ascending_compare<T>);
   else if (mode == DESCENDING)
-    indexed_sort.set_compare (sparse_descending_compare);
+    indexed_sort.set_compare (sparse_descending_compare<T>);
   else
     abort ();
 
   T *v = m.data ();
   octave_idx_type *mcidx = m.cidx ();
   octave_idx_type *mridx = m.ridx ();
 
-  OCTAVE_LOCAL_BUFFER (vec_index<T> *, vi, nr);
-  OCTAVE_LOCAL_BUFFER (vec_index<T>, vix, nr);
-
-  for (octave_idx_type i = 0; i < nr; i++)
-    vi[i] = &vix[i];
-
   sidx = Array<octave_idx_type> (dim_vector (nr, nc));
+  OCTAVE_LOCAL_BUFFER (octave_idx_type, vi, nr);
 
   for (octave_idx_type j = 0; j < nc; j++)
     {
       octave_idx_type ns = mcidx [j + 1] - mcidx [j];
       octave_idx_type offset = j * nr;
 
       if (ns == 0)
 	{
 	  for (octave_idx_type k = 0; k < nr; k++)
 	    sidx (offset + k) = k;
 	}
       else
 	{
 	  for (octave_idx_type i = 0; i < ns; i++)
-	    {
-	      vi[i]->vec = v[i];
-	      vi[i]->indx = mridx[i];
-	    }
-
-	  indexed_sort.sort (vi, ns);
+            vi[i] = mridx[i];
+
+	  indexed_sort.sort (v, vi, ns);
 
 	  octave_idx_type i;
 	  if (mode == ASCENDING) 
 	    {
 	      for (i = 0; i < ns; i++)
-		if (sparse_ascending_compare (static_cast<T> (0), 
-					      vi [i] -> vec))
+		if (sparse_ascending_compare<T> (static_cast<T> (0), v[i]))
 		  break;
 	    }
 	  else
 	    {
 	      for (i = 0; i < ns; i++)
-		if (sparse_descending_compare (static_cast<T> (0), 
-					       vi [i] -> vec))
+		if (sparse_descending_compare<T> (static_cast<T> (0), v[i]))
 		  break;
 	    }
 
 	  octave_idx_type ii = 0;
 	  octave_idx_type jj = i;
 	  for (octave_idx_type k = 0; k < nr; k++)
 	    {
 	      if (ii < ns && mridx[ii] == k)
 		ii++;
 	      else
 		sidx (offset + jj++) = k;
 	    }
 
 	  for (octave_idx_type k = 0; k < i; k++)
 	    {
-	      v [k] = vi [k] -> vec;
-	      sidx (k + offset) = vi [k] -> indx;
+	      sidx (k + offset) = vi [k];
 	      mridx [k] = k;
 	    }
 
 	  for (octave_idx_type k = i; k < ns; k++)
 	    {
-	      v [k] = vi [k] -> vec;
-	      sidx (k - ns + nr + offset) = vi [k] -> indx;
+	      sidx (k - ns + nr + offset) = vi [k];
 	      mridx [k] = k - ns + nr; 
 	    }
 
 	  v += ns;
 	  mridx += ns;
 	}
     }
 
diff --git a/liboctave/sparse-sort.cc b/liboctave/sparse-sort.cc
--- a/liboctave/sparse-sort.cc
+++ b/liboctave/sparse-sort.cc
@@ -44,22 +44,26 @@ octave_sparse_sidxl_comp (octave_sparse_
   octave_idx_type tmp = i->c - j->c;
   if (tmp < 0)
     return true;
   else if (tmp > 0)
     return false;
   return  (i->r < j->r);
 }
 
+template class octave_sort<octave_sparse_sort_idxl *>;
+
 // Need to know the original order of the sorted indexes in
 // sparse assignments, and this class does that
 bool
 octave_idx_vector_comp (octave_idx_vector_sort* i,
 			octave_idx_vector_sort* j)
 {
   return (i->i < j->i);
 }
 
+template class octave_sort<octave_idx_vector_sort *>;
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
