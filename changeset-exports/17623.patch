# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1381427652 14400
#      Thu Oct 10 13:54:12 2013 -0400
# Node ID 7b305b36b87e43e96c677cb38bf289676d43eb69
# Parent  fd712a12fe53aa2b262fdd788b71017a5f007a0f
use setenv to implement putenv and avoid memory leak (bug #40230)

* bootstrap.conf (gnulib_modules): Include setenv in the list.
* lo-utils.cc (octave_putenv): Use gnulib::setenv instead of
gnulib::putenv.

diff --git a/bootstrap.conf b/bootstrap.conf
--- a/bootstrap.conf
+++ b/bootstrap.conf
@@ -64,16 +64,17 @@ gnulib_modules="
   readdir
   readlink
   realloc-gnu
   rename
   rmdir
   round
   roundf
   select
+  setenv
   sigaction
   signal
   sigprocmask
   sleep
   stat
   stddef
   stdint
   stdio
diff --git a/liboctave/util/lo-utils.cc b/liboctave/util/lo-utils.cc
--- a/liboctave/util/lo-utils.cc
+++ b/liboctave/util/lo-utils.cc
@@ -21,16 +21,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cctype>
+#include <cerrno>
 #include <cstdlib>
 #include <cstdio>
 #include <cstring>
 #include <cfloat>
 
 #include <limits>
 #include <string>
 
@@ -82,36 +83,22 @@ strsave (const char *s)
     return 0;
 
   int len = strlen (s);
   char *tmp = new char [len+1];
   tmp = strcpy (tmp, s);
   return tmp;
 }
 
-// This function was adapted from xputenv from Karl Berry's kpathsearch
-// library.
-
-// FIXME -- make this do the right thing if we don't have a
-// SMART_PUTENV.
-
 void
 octave_putenv (const std::string& name, const std::string& value)
 {
-  int new_len = name.length () + value.length () + 2;
-
-  char *new_item = static_cast<char*> (gnulib::malloc (new_len));
-
-  sprintf (new_item, "%s=%s", name.c_str (), value.c_str ());
-
-  // As far as I can see there's no way to distinguish between the
-  // various errors; putenv doesn't have errno values.
-
-  if (gnulib::putenv (new_item) < 0)
-    (*current_liboctave_error_handler) ("putenv (%s) failed", new_item);
+  if (gnulib::setenv (name.c_str (), value.c_str (), true) < 0)
+    (*current_liboctave_error_handler) ("putenv: %s",
+                                        gnulib::strerror (errno));
 }
 
 std::string
 octave_fgets (FILE *f)
 {
   bool eof;
   return octave_fgets (f, eof);
 }
