# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363847328 14400
#      Thu Mar 21 02:28:48 2013 -0400
# Node ID d4b6ad43bc8772acc7adb04d3900840b3c02a928
# Parent  610617eb84d1abfe3828ee1e92cad0488422155f
use direct callbacks instead to handle history and workspace list updates

* history-docwidget.h, history-dockwidget.cc
(history_dock_widget::_update_event_enabled): Delete data member and
all uses.
* history-dockwidget.cc (history_dock_widget::construct):
Don't install a timer.
(history_dock_widget::update_history_callback): Now public.

* workspace-model.cc (workspace_model::workspace_model): Don't install
a timer.
(workspace_model::_update_event_enabled): Delete data member and all uses.
(workspace_model::update_workspace_callback): Now public.

* workspace-view (workspace_view::model_changed): call
workspace_model::update_workspace_callback.

* main-window.h, main-window.cc (main_window::update_workspace,
main_window::update_history): New functions.
(main_window::construct): Connect them to corresponding signals.
* octave-event-listener.h (octave_event_listener::update_workspace,
octave_event_listener::update_history): New virtual functions.
* octave-link.h, octave-link.cc (octave_link::update_workspace,
octave_link::update_history, octave_link::do_update_workspace,
octave_link::do_update_history,
octave_link::post_input_event_hook_fcn,
octave_link::do_post_input_event_hook_fcn): New functions.
* octave-main-thread.cc (pre_input_event_hook_fcn,
post_input_event_hook_fcn): New functions.
(octave_main_thread::run): Install pre- and post- input event callback
functions.

* octave-qt-event-listener.h, octave-qt-event-listener.cc
(octave_qt_event_listener::update_workspace
octave_qt_event_listener::update_history): New functions.
(octave_qt_event_listener::update_workspace_signal,
octave_qt_event_listener::update_history_signal): New signals.

diff --git a/libgui/src/history-dockwidget.cc b/libgui/src/history-dockwidget.cc
--- a/libgui/src/history-dockwidget.cc
+++ b/libgui/src/history-dockwidget.cc
@@ -72,27 +72,16 @@ history_dock_widget::construct ()
   widget ()->setLayout (vbox_layout);
 
   connect (_filter_line_edit, SIGNAL (textEdited (QString)),
            &_sort_filter_proxy_model, SLOT (setFilterWildcard (QString)));
 
   connect (_history_list_view, SIGNAL (doubleClicked (QModelIndex)),
            this, SLOT (handle_double_click (QModelIndex)));
 
-  _update_event_enabled = true;
-  _update_history_model_timer.setInterval (500);
-  _update_history_model_timer.setSingleShot (false);
-
-  connect (&_update_history_model_timer,
-           SIGNAL (timeout ()),
-           this,
-           SLOT (request_history_model_update ()));
-
-  _update_history_model_timer.start ();
-
   setFocusProxy (_filter_line_edit);
 }
 
 void history_dock_widget::ctxMenu(const QPoint &xpos) {
     QMenu *menu = new QMenu;
     menu->addAction(tr("Copy"), this, SLOT(handle_contextmenu_copy(bool)));
     menu->addAction(tr("Evaluate"), this, SLOT(handle_contextmenu_evaluate(bool)));
     menu->exec(_history_list_view->mapToGlobal(xpos));
@@ -128,21 +117,17 @@ void
 history_dock_widget::handle_double_click (QModelIndex modelIndex)
 {
   emit command_double_clicked (modelIndex.data().toString()+"\n");
 }
 
 void
 history_dock_widget::request_history_model_update ()
 {
-  if (_update_event_enabled)
-    {
-      _update_event_enabled = false;  // no more update until this one is processed
-      octave_link::post_event (this, &history_dock_widget::update_history_callback);
-    }
+  octave_link::post_event (this, &history_dock_widget::update_history_callback);
 }
 
 void
 history_dock_widget::reset_model ()
 {
   _history_model->setStringList (QStringList ());
 }
 
@@ -180,13 +165,9 @@ history_dock_widget::update_history_call
       scroll_window = true;
     }
   else if (scroll_window)
     {
       scroll_window = false;
 
       _history_list_view->scrollToBottom ();
     }
-
-  // update is processed, re-enable further updates events triggered by timer
-    _update_event_enabled = true;
-
 }
diff --git a/libgui/src/history-dockwidget.h b/libgui/src/history-dockwidget.h
--- a/libgui/src/history-dockwidget.h
+++ b/libgui/src/history-dockwidget.h
@@ -22,51 +22,45 @@ along with Octave; see the file COPYING.
 
 #ifndef HISTORYDOCKWIDGET_H
 #define HISTORYDOCKWIDGET_H
 
 #include <QLineEdit>
 #include <QListView>
 #include <QSortFilterProxyModel>
 #include <QStringListModel>
-#include <QTimer>
 #include "octave-dock-widget.h"
 
 class history_dock_widget : public octave_dock_widget
 {
   Q_OBJECT
   public:
   history_dock_widget (QWidget *parent = 0);
 
+  void update_history_callback (void);
+
 public slots:
   void request_history_model_update ();
   void reset_model ();
 
 signals:
   void information (const QString& message);
 
   /** Emitted, whenever the user double-clicked a command in the history. */
   void command_double_clicked (const QString& command);
 
-protected:
-
 private slots:
   void handle_double_click (QModelIndex modelIndex);
   void handle_contextmenu_copy(bool flag);
   void handle_contextmenu_evaluate(bool flag);
   void ctxMenu(const QPoint &pos);
 
 private:
   void construct ();
   QListView *_history_list_view;
   QLineEdit *_filter_line_edit;
   QSortFilterProxyModel _sort_filter_proxy_model;
 
   /** Stores the current history_model. */
   QStringListModel *_history_model;
-
-  QTimer _update_history_model_timer;
-
-  void update_history_callback (void);
-  bool _update_event_enabled;
 };
 
 #endif // HISTORYDOCKWIDGET_H
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -295,16 +295,28 @@ main_window::current_working_directory_h
       _current_directory_combo_box->removeItem (index);
     }
   _current_directory_combo_box->insertItem (0,directory);  // add (on top)
   _current_directory_combo_box->setCurrentIndex (0);  // top is actual
   _files_dock_widget->set_current_directory (directory);
 }
 
 void
+main_window::update_workspace (void)
+{
+  _workspace_view->model_changed ();
+}
+
+void
+main_window::update_history (void)
+{
+  _history_dock_widget->update_history_callback ();
+}
+
+void
 main_window::change_current_working_directory ()
 {
   QString directory =
     QFileDialog::getExistingDirectory(this, tr ("Set working direcotry"));
 
   if (!directory.isEmpty ())
     {
       std::string dir = directory.toUtf8 ().data ();
@@ -1120,16 +1132,26 @@ main_window::construct ()
   octave_link::register_event_listener (_octave_qt_event_listener);
 
   connect (_octave_qt_event_listener,
            SIGNAL (current_directory_has_changed_signal (QString)),
            this,
            SLOT (current_working_directory_has_changed (QString)));
 
   connect (_octave_qt_event_listener,
+           SIGNAL (update_workspace_signal ()),
+           this,
+           SLOT (update_workspace ()));
+
+  connect (_octave_qt_event_listener,
+           SIGNAL (update_history_signal ()),
+           this,
+           SLOT (update_history ()));
+
+  connect (_octave_qt_event_listener,
            SIGNAL (entered_debug_mode_signal ()),
            this,
            SLOT(handle_entered_debug_mode ()));
 
   connect (_octave_qt_event_listener,
            SIGNAL (quit_debug_mode_signal ()),
            this,
            SLOT (handle_quit_debug_mode ()));
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -91,16 +91,18 @@ public slots:
   void open_octave_forge_page ();
   void open_agora_page ();
   void process_settings_dialog_request ();
   void show_about_octave ();
   void notice_settings ();
   void prepare_for_quit ();
   void reset_windows ();
   void current_working_directory_has_changed (const QString& directory);
+  void update_workspace (void);
+  void update_history (void);
   void change_current_working_directory ();
   void set_current_working_directory (const QString& directory);
   void current_working_directory_up ();
   void current_working_directory_entered ();
 
   void focus_command_window ();
   void focus_command_history ();
   void focus_current_directory ();
diff --git a/libgui/src/octave-adapter/octave-event-listener.h b/libgui/src/octave-adapter/octave-event-listener.h
--- a/libgui/src/octave-adapter/octave-event-listener.h
+++ b/libgui/src/octave-adapter/octave-event-listener.h
@@ -29,15 +29,21 @@ class octave_event_listener
 {
   public:
     octave_event_listener () { }
     virtual ~octave_event_listener () { }
 
     virtual void
     current_directory_has_changed (const std::string& directory) = 0;
 
+    virtual void
+    update_workspace (void) = 0;
+
+    virtual void
+    update_history (void) = 0;
+
     virtual void about_to_exit () = 0;
 
     virtual void entered_debug_mode () = 0;
     virtual void quit_debug_mode () = 0;
 };
 
 #endif // OCTAVEEVENTLISTENER_H
diff --git a/libgui/src/octave-adapter/octave-link.cc b/libgui/src/octave-adapter/octave-link.cc
--- a/libgui/src/octave-adapter/octave-link.cc
+++ b/libgui/src/octave-adapter/octave-link.cc
@@ -129,16 +129,50 @@ octave_link::do_about_to_exit (void)
 }
 
 std::string
 octave_link::do_last_working_directory (void)
 {
   return last_cwd;
 }
 
+void
+octave_link::do_update_workspace (void)
+{
+  if (event_listener)
+    {
+      event_listener->update_workspace ();
+
+      do_process_events ();
+    }
+}
+
+void
+octave_link::do_update_history (void)
+{
+  if (event_listener)
+    {
+      event_listener->update_history ();
+
+      do_process_events ();
+    }
+}
+
+void
+octave_link::do_pre_input_event_hook_fcn (void)
+{
+  do_update_workspace ();
+}
+
+void
+octave_link::do_post_input_event_hook_fcn (void)
+{
+  do_update_history ();
+}
+
 bool
 octave_link::instance_ok (void)
 {
   bool retval = true;
 
   if (! instance)
     {
       instance = new octave_link ();
diff --git a/libgui/src/octave-adapter/octave-link.h b/libgui/src/octave-adapter/octave-link.h
--- a/libgui/src/octave-adapter/octave-link.h
+++ b/libgui/src/octave-adapter/octave-link.h
@@ -115,16 +115,40 @@ public:
   }
 
   static std::string last_working_directory (void)
   {
     return instance_ok ()
       ? instance->do_last_working_directory () : std::string ();
   }
 
+  static void update_workspace (void)
+  {
+    if (instance_ok ())
+      instance->do_update_workspace ();
+  }
+
+  static void update_history (void)
+  {
+    if (instance_ok ())
+      instance->do_update_history ();
+  }
+
+  static void pre_input_event_hook_fcn (void)
+  {
+    if (instance_ok ())
+      instance->do_pre_input_event_hook_fcn ();
+  }
+
+  static void post_input_event_hook_fcn (void)
+  {
+    if (instance_ok ())
+      instance->do_post_input_event_hook_fcn ();
+  }
+
 private:
 
   static octave_link *instance;
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
   // No copying!
 
@@ -175,11 +199,16 @@ private:
   }
 
   void do_about_to_exit (void);
 
   void do_entered_readline_hook (void) { }
   void do_finished_readline_hook (void) { }
 
   std::string do_last_working_directory (void);
+  void do_update_workspace (void);
+  void do_update_history (void);
+
+  void do_pre_input_event_hook_fcn (void);
+  void do_post_input_event_hook_fcn (void);
 };
 
 #endif // OCTAVELINK_H
diff --git a/libgui/src/octave-adapter/octave-main-thread.cc b/libgui/src/octave-adapter/octave-main-thread.cc
--- a/libgui/src/octave-adapter/octave-main-thread.cc
+++ b/libgui/src/octave-adapter/octave-main-thread.cc
@@ -22,30 +22,64 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <clocale>
 #include <string>
 
+#include "builtin-defun-decls.h"
 #include "octave.h"
+#include "ov-builtin.h"
+#include "ov-fcn-handle.h"
 
 #include "octave-main-thread.h"
 #include "octave-link.h"
 
+static octave_value_list
+pre_input_event_hook_fcn (const octave_value_list&, int)
+{
+  octave_value_list retval;
+
+  octave_link::pre_input_event_hook_fcn ();
+
+  return retval;
+}
+
+static octave_value_list
+post_input_event_hook_fcn (const octave_value_list&, int)
+{
+  octave_value_list retval;
+
+  octave_link::post_input_event_hook_fcn ();
+
+  return retval;
+}
+
 octave_main_thread::octave_main_thread () : QThread ()
 {
 }
 
 void
 octave_main_thread::run ()
 {
   // Matlab uses "C" locale for LC_NUMERIC class regardless of local setting
   setlocale (LC_NUMERIC, "C");
 
   emit ready ();
 
   octave_initialize_interpreter (octave_cmdline_argc, octave_cmdline_argv,
                                  octave_embedded);
 
+  octave_value pre_fcn (new octave_builtin (pre_input_event_hook_fcn));
+  octave_value pre_fcn_handle (new octave_fcn_handle (pre_fcn));
+  Fadd_pre_input_event_hook (pre_fcn_handle);
+
+  octave_value post_fcn (new octave_builtin (post_input_event_hook_fcn));
+  octave_value post_fcn_handle (new octave_fcn_handle (post_fcn));
+  Fadd_post_input_event_hook (post_fcn_handle);
+
+  // Prime the history list.
+  octave_link::update_history ();
+
   octave_execute_interpreter ();
 }
diff --git a/libgui/src/octave-qt-event-listener.cc b/libgui/src/octave-qt-event-listener.cc
--- a/libgui/src/octave-qt-event-listener.cc
+++ b/libgui/src/octave-qt-event-listener.cc
@@ -35,16 +35,28 @@ octave_qt_event_listener::octave_qt_even
 void
 octave_qt_event_listener::current_directory_has_changed (const std::string& directory)
 {
   emit current_directory_has_changed_signal
     (QString::fromUtf8 (directory.data (), directory.size ()));
 }
 
 void
+octave_qt_event_listener::update_workspace (void)
+{
+  emit update_workspace_signal ();
+}
+
+void
+octave_qt_event_listener::update_history (void)
+{
+  emit update_history_signal ();
+}
+
+void
 octave_qt_event_listener::about_to_exit ()
 {
   qApp->quit ();
 }
 
 void
 octave_qt_event_listener::entered_debug_mode ()
 { emit entered_debug_mode_signal (); }
diff --git a/libgui/src/octave-qt-event-listener.h b/libgui/src/octave-qt-event-listener.h
--- a/libgui/src/octave-qt-event-listener.h
+++ b/libgui/src/octave-qt-event-listener.h
@@ -30,20 +30,24 @@ along with Octave; see the file COPYING.
 class octave_qt_event_listener
   : public QObject, public octave_event_listener
 {
   Q_OBJECT
   public:
   octave_qt_event_listener (QObject *parent = 0);
 
   void current_directory_has_changed (const std::string& directory);
+  void update_workspace (void);
+  void update_history (void);
   void about_to_exit ();
 
   void entered_debug_mode ();
   void quit_debug_mode ();
 
 signals:
   void current_directory_has_changed_signal (const QString& directory);
+  void update_workspace_signal (void);
+  void update_history_signal (void);
   void entered_debug_mode_signal ();
   void quit_debug_mode_signal ();
 };
 
 #endif // OCTAVEQTEVENTLISTENER_H
diff --git a/libgui/src/workspace-model.cc b/libgui/src/workspace-model.cc
--- a/libgui/src/workspace-model.cc
+++ b/libgui/src/workspace-model.cc
@@ -41,41 +41,27 @@ workspace_model::workspace_model(QObject
 {
   QList<QVariant> rootData;
   rootData << tr ("Name") << tr ("Class") << tr("Dimension") << tr ("Value");
   _rootItem = new tree_item(rootData);
 
   insert_top_level_item(0, new tree_item ("Local"));
   insert_top_level_item(1, new tree_item ("Global"));
   insert_top_level_item(2, new tree_item ("Persistent"));
-
-  connect(&_update_workspace_model_timer,
-          SIGNAL (timeout ()),
-          this,
-          SLOT (request_update_workspace()));
-
-  _update_event_enabled = true;
-  _update_workspace_model_timer.setInterval (500);
-  _update_workspace_model_timer.setSingleShot (false);
-  _update_workspace_model_timer.start ();
 }
 
 workspace_model::~workspace_model()
 {
   delete _rootItem;
 }
 
 void
 workspace_model::request_update_workspace ()
 {
-  if (_update_event_enabled)
-    {
-      _update_event_enabled = false;  // no more update until this one is processed
-      octave_link::post_event (this, &workspace_model::update_workspace_callback);
-    }
+  octave_link::post_event (this, &workspace_model::update_workspace_callback);
 }
 
 QModelIndex
 workspace_model::index(int row, int column, const QModelIndex &p) const
 {
   if (!hasIndex(row, column, p))
     return QModelIndex();
 
@@ -221,14 +207,9 @@ workspace_model::update_workspace_callba
           break;
 
         default:
           break;
         }
     }
 
   endResetModel();
-  emit model_changed();
-
-  // update is processed, re-enable further updates events triggered by timer
-  _update_event_enabled = true;
-
 }
diff --git a/libgui/src/workspace-model.h b/libgui/src/workspace-model.h
--- a/libgui/src/workspace-model.h
+++ b/libgui/src/workspace-model.h
@@ -22,17 +22,16 @@ along with Octave; see the file COPYING.
 
 #ifndef WORKSPACEMODEL_H
 #define WORKSPACEMODEL_H
 
 // Qt includes
 #include <QAbstractItemModel>
 #include <QVector>
 #include <QSemaphore>
-#include <QTimer>
 
 #include "symbol-information.h"
 
 class tree_item
 {
 public:
   tree_item (const QList<QVariant> &d, tree_item *p = 0) {
     _parent_item = p;
@@ -127,30 +126,24 @@ class workspace_model
                      const QModelIndex &parent = QModelIndex ()) const;
   QModelIndex parent (const QModelIndex &index) const;
   int rowCount (const QModelIndex &parent = QModelIndex ()) const;
   int columnCount (const QModelIndex &parent = QModelIndex ()) const;
 
   void insert_top_level_item (int at, tree_item *treeItem);
   tree_item *top_level_item (int at);
 
+  void update_workspace_callback (void);
+
 public slots:
   void request_update_workspace ();
 
 signals:
   void model_changed ();
 
 private:
 
-  bool _update_event_enabled;
-
-  void update_workspace_callback (void);
-
-  /** Timer for periodically updating the workspace model from the current
-   * symbol information. */
-  QTimer _update_workspace_model_timer;
-
   /** Stores the current symbol information. */
   QList <symbol_information> _symbol_information;
   tree_item *_rootItem;
 };
 
 #endif // WORKSPACEMODEL_H
diff --git a/libgui/src/workspace-view.cc b/libgui/src/workspace-view.cc
--- a/libgui/src/workspace-view.cc
+++ b/libgui/src/workspace-view.cc
@@ -109,16 +109,18 @@ workspace_view::handle_visibility_change
 {
   if (visible)
     emit active_changed (true);
 }
 
 void
 workspace_view::model_changed ()
 {
+  _workspace_model->update_workspace_callback ();
+
   // This code is very quirky and requires some explanation.
   // Usually, we should not deal with collapsing or expanding ourselves,
   // because the view itself determines (based on the model) whether it
   // is appropriate to collapse or expand items.
   //
   // Now, the logic requires that we update our model item by item, which
   // would make it work correctly, but this is extremely slow and scales
   // very bad (O(n^2)). That's why we throw away our model and rebuild it
