# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1370003224 -3600
#      Fri May 31 13:27:04 2013 +0100
# Node ID 4c11e9bcb7968e6b386843d014c3808c458fa2af
# Parent  736dca8371eee979e810c40865da592af24c8c11
ind2rgb: add support for multidimensional indexed images.

diff --git a/scripts/image/ind2rgb.m b/scripts/image/ind2rgb.m
--- a/scripts/image/ind2rgb.m
+++ b/scripts/image/ind2rgb.m
@@ -26,16 +26,18 @@
 ## image, pixels in @var{x} outside the range are mapped to the last color in
 ## the map.
 ##
 ## The output may be a single RGB image (MxNx3 matrix where M and N are the
 ## original image @var{x} dimensions, one for each of the red, green and blue
 ## channels).  Alternatively, the individual red, green, and blue color matrices
 ## of size MxN may be returned.
 ##
+## Multidimensional indexed images (of size MxNx1xK) are also supported.
+##
 ## @seealso{rgb2ind, ind2gray, hsv2rgb, ntsc2rgb}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function [R, G, B] = ind2rgb (x, map)
@@ -48,17 +50,24 @@ function [R, G, B] = ind2rgb (x, map)
   ## Compute result
   sz = size (x);
   R = reshape (map(x(:), 1), sz);
   G = reshape (map(x(:), 2), sz);
   B = reshape (map(x(:), 3), sz);
 
   ## Use ND array if only one output is requested.
   if (nargout <= 1)
-    R = reshape ([R(:); G(:); B(:)], [sz, 3]);
+    if (ndims (x) == 2)
+      R = reshape ([R(:); G(:); B(:)], [sz, 3]);
+    elseif (ndims (x) == 4)
+      R = permute (reshape ([R(:); G(:); B(:)], [sz(1) sz(2) sz(4) 3]), [1 2 4 3]);
+    else
+      ## we should never reach here since ind2x() should filter them out
+      error ("ind2rgb: an indexed image must have 2 or 4 dimensions.");
+    endif
   endif
 
 endfunction
 
 
 %!shared img, map, ergb, rgb, r, g, b
 %! img = [2 4 5; 3 2 5; 1 2 4];
 %! map = [0.0  0.0  0.0
diff --git a/scripts/image/private/ind2x.m b/scripts/image/private/ind2x.m
--- a/scripts/image/private/ind2x.m
+++ b/scripts/image/private/ind2x.m
@@ -17,17 +17,21 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## private function for the ind2XXX functions which have a lot of code in common
 
 function [x, map] = ind2x (caller, x, map)
 
   ## Check if X is an indexed image.
-  if (ndims (x) < 2 || issparse (x) || (isfloat (x) && ! isindex (x)) ||
+  ## an indexed image is defined has having only 2D, and that's how matlab
+  ## behaves. But we want to support ND images, so we will allow up to 4D
+  ## and check that the 3rd is a singleton
+  if (all (ndims (x) != [2 4]) || size (x, 3) != 1 || issparse (x) ||
+      (isfloat (x) && ! isindex (x)) ||
       ! any (strcmp (class (x), {"uint8", "uint16", "single", "double"})))
     error ("%s: X must be an indexed image", caller);
   endif
 
   ## Check if map is a valid colormap.
   if (! iscolormap (map))
     error ("%s: MAP must be a valid colormap", caller);
   endif
