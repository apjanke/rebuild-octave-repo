# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1225208757 14400
#      Tue Oct 28 11:45:57 2008 -0400
# Node ID b3734f1cb592559ab1c53d8e3b29f867185d38fd
# Parent  ab0674a8b345d511a0a2852ae9cdd3d1526cb57e
lo-specfun.cc: fix prototypes and calls to cbes{h,i,j,k,y} subroutines

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2008-10-28  John W. Eaton  <jwe@octave.org>
+
+	* lo-specfun.cc: Fix prototypes for the Fortran subroutines cbesh,
+	cbesi, cbesj, cbesk, and cbesy.
+	(cbesh, cbesi, cbesj, cbesk, cbesy): Fix calls to Fortran
+	subroutines.
+
 2008-10-28  Brian Gough  <bjg@gnu.org>
 
 	* lo-specfun.cc (zbesi): Fix scaling factor for negative alpha.
 	(cbesi): Likewise.
 
 2008-10-23  John Swensen  <jpswensen@comcast.net>
 
 	* oct-shlib.cc (octave_dyld_shlib::open): Call NSLinkEditError to
diff --git a/liboctave/lo-specfun.cc b/liboctave/lo-specfun.cc
--- a/liboctave/lo-specfun.cc
+++ b/liboctave/lo-specfun.cc
@@ -72,39 +72,41 @@ extern "C"
 			   octave_idx_type&, octave_idx_type&);
 
   F77_RET_T
   F77_FUNC (zbesh, ZBESH) (const double&, const double&, const double&,
 			   const octave_idx_type&, const octave_idx_type&, const octave_idx_type&, double*,
 			   double*, octave_idx_type&, octave_idx_type&);
 
   F77_RET_T
-  F77_FUNC (cbesj, cBESJ) (const float&, const float&, const float&,
-			   const octave_idx_type&, const octave_idx_type&, float*, float*,
-			   octave_idx_type&, octave_idx_type&);
+  F77_FUNC (cbesj, cBESJ) (const FloatComplex&, const float&,
+			   const octave_idx_type&, const octave_idx_type&,
+			   FloatComplex*, octave_idx_type&, octave_idx_type&);
 
   F77_RET_T
-  F77_FUNC (cbesy, CBESY) (const float&, const float&, const float&,
-			   const octave_idx_type&, const octave_idx_type&, float*, float*,
-			   octave_idx_type&, float*, float*, octave_idx_type&);
+  F77_FUNC (cbesy, CBESY) (const FloatComplex&, const float&,
+			   const octave_idx_type&, const octave_idx_type&,
+			   FloatComplex*, octave_idx_type&,
+			   FloatComplex*, octave_idx_type&);
 
   F77_RET_T
-  F77_FUNC (cbesi, CBESI) (const float&, const float&, const float&,
-			   const octave_idx_type&, const octave_idx_type&, float*, float*,
-			   octave_idx_type&, octave_idx_type&);
+  F77_FUNC (cbesi, CBESI) (const FloatComplex&, const float&,
+			   const octave_idx_type&, const octave_idx_type&,
+			   FloatComplex*, octave_idx_type&, octave_idx_type&);
 
   F77_RET_T
-  F77_FUNC (cbesk, CBESK) (const float&, const float&, const float&,
-			   const octave_idx_type&, const octave_idx_type&, float*, float*,
-			   octave_idx_type&, octave_idx_type&);
+  F77_FUNC (cbesk, CBESK) (const FloatComplex&, const float&,
+			   const octave_idx_type&, const octave_idx_type&,
+			   FloatComplex*, octave_idx_type&, octave_idx_type&);
 
   F77_RET_T
-  F77_FUNC (cbesh, CBESH) (const float&, const float&, const float&,
-			   const octave_idx_type&, const octave_idx_type&, const octave_idx_type&, float*,
-			   float*, octave_idx_type&, octave_idx_type&);
+  F77_FUNC (cbesh, CBESH) (const FloatComplex&, const float&,
+			   const octave_idx_type&, const octave_idx_type&,
+			   const octave_idx_type&, FloatComplex*,
+			   octave_idx_type&, octave_idx_type&);
 
   F77_RET_T
   F77_FUNC (zairy, ZAIRY) (const double&, const double&, const octave_idx_type&,
 			   const octave_idx_type&, double&, double&, octave_idx_type&, octave_idx_type&);
 
   F77_RET_T
   F77_FUNC (cairy, CAIRY) (const float&, const float&, const octave_idx_type&,
 			   const octave_idx_type&, float&, float&, octave_idx_type&, octave_idx_type&);
@@ -1284,37 +1286,33 @@ is_integer_value (float x)
 
 static inline FloatComplex
 cbesj (const FloatComplex& z, float alpha, int kode, octave_idx_type& ierr)
 {
   FloatComplex retval;
 
   if (alpha >= 0.0)
     {
-      float yr = 0.0;
-      float yi = 0.0;
+      FloatComplex y = 0.0;
 
       octave_idx_type nz;
 
-      float zr = z.real ();
-      float zi = z.imag ();
-
-      F77_FUNC (cbesj, CBESJ) (zr, zi, alpha, 2, 1, &yr, &yi, nz, ierr);
+      F77_FUNC (cbesj, CBESJ) (z, alpha, 2, 1, &y, nz, ierr);
 
       if (kode != 2)
 	{
-	  float expz = exp (std::abs (zi)); 
-	  yr *= expz;
-	  yi *= expz;
+	  float expz = exp (std::abs (imag (z))); 
+	  y.real () *= expz;
+	  y.imag () *= expz;
 	}
 
-      if (zi == 0.0 && zr >= 0.0)
-	yi = 0.0;
-
-      retval = bessel_return_value (FloatComplex (yr, yi), ierr);
+      if (imag (z) == 0.0 && real (z) >= 0.0)
+	y.imag () = 0.0;
+
+      retval = bessel_return_value (y, ierr);
     }
   else if (is_integer_value (alpha))
     {
       // zbesy can overflow as z->0, and cause troubles for generic case below
       alpha = -alpha;
       FloatComplex tmp = cbesj (z, alpha, kode, ierr);
       if ((static_cast <long> (alpha)) & 1) 
 	tmp = - tmp;
@@ -1341,50 +1339,44 @@ cbesj (const FloatComplex& z, float alph
 
 static inline FloatComplex
 cbesy (const FloatComplex& z, float alpha, int kode, octave_idx_type& ierr)
 {
   FloatComplex retval;
 
   if (alpha >= 0.0)
     {
-      float yr = 0.0;
-      float yi = 0.0;
+      FloatComplex y = 0.0;
 
       octave_idx_type nz;
 
-      float wr, wi;
-
-      float zr = z.real ();
-      float zi = z.imag ();
+      FloatComplex w;
 
       ierr = 0;
 
-      if (zr == 0.0 && zi == 0.0)
+      if (real (z) == 0.0 && imag (z) == 0.0)
 	{
-	  yr = -octave_Float_Inf;
-	  yi = 0.0;
+	  y = FloatComplex (-octave_Float_Inf, 0.0);
 	}
       else
 	{
-	  F77_FUNC (cbesy, CBESY) (zr, zi, alpha, 2, 1, &yr, &yi, nz,
-				   &wr, &wi, ierr);
+	  F77_FUNC (cbesy, CBESY) (z, alpha, 2, 1, &y, nz, &w, ierr);
 
 	  if (kode != 2)
 	    {
-	      float expz = exp (std::abs (zi));
-	      yr *= expz;
-	      yi *= expz;
+	      float expz = exp (std::abs (imag (z)));
+	      y.real () *= expz;
+	      y.imag () *= expz;
 	    }
 
-	  if (zi == 0.0 && zr >= 0.0)
-	    yi = 0.0;
+	  if (imag (z) == 0.0 && real (z) >= 0.0)
+	    y.imag () = 0.0;
 	}
 
-      return bessel_return_value (FloatComplex (yr, yi), ierr);
+      return bessel_return_value (y, ierr);
     }
   else if (is_integer_value (alpha - 0.5))
     {
       // zbesy can overflow as z->0, and cause troubles for generic case below
       alpha = -alpha;
       FloatComplex tmp = cbesj (z, alpha, kode, ierr);
       if ((static_cast <long> (alpha - 0.5)) & 1) 
 	tmp = - tmp;
@@ -1411,37 +1403,32 @@ cbesy (const FloatComplex& z, float alph
 
 static inline FloatComplex
 cbesi (const FloatComplex& z, float alpha, int kode, octave_idx_type& ierr)
 {
   FloatComplex retval;
 
   if (alpha >= 0.0)
     {
-      float yr = 0.0;
-      float yi = 0.0;
+      FloatComplex y = 0.0;
 
       octave_idx_type nz;
 
-      float zr = z.real ();
-      float zi = z.imag ();
-
-      F77_FUNC (cbesi, CBESI) (zr, zi, alpha, 2, 1, &yr, &yi, nz, ierr);
+      F77_FUNC (cbesi, CBESI) (z, alpha, 2, 1, &y, nz, ierr);
 
       if (kode != 2)
 	{
-	  float expz = exp (std::abs (zr));
-	  yr *= expz;
-	  yi *= expz;
+	  float expz = exp (std::abs (real (z)));
+	  y *= expz;
 	}
 
-      if (zi == 0.0 && zr >= 0.0)
-	yi = 0.0;
-
-      retval = bessel_return_value (FloatComplex (yr, yi), ierr);
+      if (imag (z) == 0.0 && real (z) >= 0.0)
+	y.imag () = 0.0;
+
+      retval = bessel_return_value (y, ierr);
     }
   else
     {
       alpha = -alpha;
 
       FloatComplex tmp = cbesi (z, alpha, kode, ierr);
 
       if (ierr == 0 || ierr == 3)
@@ -1468,53 +1455,48 @@ cbesi (const FloatComplex& z, float alph
 
 static inline FloatComplex
 cbesk (const FloatComplex& z, float alpha, int kode, octave_idx_type& ierr)
 {
   FloatComplex retval;
 
   if (alpha >= 0.0)
     {
-      float yr = 0.0;
-      float yi = 0.0;
+      FloatComplex y = 0.0;
 
       octave_idx_type nz;
 
-      float zr = z.real ();
-      float zi = z.imag ();
-
       ierr = 0;
 
-      if (zr == 0.0 && zi == 0.0)
+      if (real (z) == 0.0 && imag (z) == 0.0)
 	{
-	  yr = octave_Float_Inf;
-	  yi = 0.0;
+	  y = FloatComplex (octave_Float_Inf, 0.0);
 	}
       else
 	{
-	  F77_FUNC (cbesk, CBESK) (zr, zi, alpha, 2, 1, &yr, &yi, nz, ierr);
+	  F77_FUNC (cbesk, CBESK) (z, alpha, 2, 1, &y, nz, ierr);
 
 	  if (kode != 2)
 	    {
 	      FloatComplex expz = exp (-z);
 
 	      float rexpz = real (expz);
 	      float iexpz = imag (expz);
 
-	      float tmp = yr*rexpz - yi*iexpz;
-
-	      yi = yr*iexpz + yi*rexpz;
-	      yr = tmp;
+	      float tmp = real (y) * rexpz - imag (y) * iexpz;
+
+	      y.imag () = real (y) * iexpz + imag (y) * rexpz;
+	      y.real () = tmp;
 	    }
 
-	  if (zi == 0.0 && zr >= 0.0)
-	    yi = 0.0;
+	  if (imag (z) == 0.0 && real (z) >= 0.0)
+	    y.imag () = 0.0;
 	}
 
-      retval = bessel_return_value (FloatComplex (yr, yi), ierr);
+      retval = bessel_return_value (y, ierr);
     }
   else
     {
       FloatComplex tmp = cbesk (z, -alpha, kode, ierr);
 
       retval = bessel_return_value (tmp, ierr);
     }
 
@@ -1523,40 +1505,36 @@ cbesk (const FloatComplex& z, float alph
 
 static inline FloatComplex
 cbesh1 (const FloatComplex& z, float alpha, int kode, octave_idx_type& ierr)
 {
   FloatComplex retval;
 
   if (alpha >= 0.0)
     {
-      float yr = 0.0;
-      float yi = 0.0;
+      FloatComplex y = 0.0;
 
       octave_idx_type nz;
 
-      float zr = z.real ();
-      float zi = z.imag ();
-
-      F77_FUNC (cbesh, CBESH) (zr, zi, alpha, 2, 1, 1, &yr, &yi, nz, ierr);
+      F77_FUNC (cbesh, CBESH) (z, alpha, 2, 1, 1, &y, nz, ierr);
 
       if (kode != 2)
 	{
 	  FloatComplex expz = exp (FloatComplex (0.0, 1.0) * z);
 
 	  float rexpz = real (expz);
 	  float iexpz = imag (expz);
 
-	  float tmp = yr*rexpz - yi*iexpz;
-
-	  yi = yr*iexpz + yi*rexpz;
-	  yr = tmp;
+	  float tmp = real (y) * rexpz - imag (y) * iexpz;
+
+	  y.imag () = real (y) * iexpz + imag (y) * rexpz;
+	  y.real () = tmp;
 	}
 
-      retval = bessel_return_value (FloatComplex (yr, yi), ierr);
+      retval = bessel_return_value (y, ierr);
     }
   else
     {
       alpha = -alpha;
 
       static const FloatComplex eye = FloatComplex (0.0, 1.0);
 
       FloatComplex tmp = exp (static_cast<float> (M_PI) * alpha * eye) * cbesh1 (z, alpha, kode, ierr);
@@ -1569,40 +1547,36 @@ cbesh1 (const FloatComplex& z, float alp
 
 static inline FloatComplex
 cbesh2 (const FloatComplex& z, float alpha, int kode, octave_idx_type& ierr)
 {
   FloatComplex retval;
 
   if (alpha >= 0.0)
     {
-      float yr = 0.0;
-      float yi = 0.0;
+      FloatComplex y = 0.0;
 
       octave_idx_type nz;
 
-      float zr = z.real ();
-      float zi = z.imag ();
-
-      F77_FUNC (cbesh, CBESH) (zr, zi, alpha, 2, 2, 1, &yr, &yi, nz, ierr);
+      F77_FUNC (cbesh, CBESH) (z, alpha, 2, 2, 1, &y, nz, ierr);
 
       if (kode != 2)
 	{
 	  FloatComplex expz = exp (-FloatComplex (0.0, 1.0) * z);
 
 	  float rexpz = real (expz);
 	  float iexpz = imag (expz);
 
-	  float tmp = yr*rexpz - yi*iexpz;
-
-	  yi = yr*iexpz + yi*rexpz;
-	  yr = tmp;
+	  float tmp = real (y) * rexpz - imag (y) * iexpz;
+
+	  y.imag () = real (y) * iexpz + imag (y) * rexpz;
+	  y.real () = tmp;
 	}
 
-      retval = bessel_return_value (FloatComplex (yr, yi), ierr);
+      retval = bessel_return_value (y, ierr);
     }
   else
     {
       alpha = -alpha;
 
       static const FloatComplex eye = FloatComplex (0.0, 1.0);
 
       FloatComplex tmp = exp (-static_cast<float> (M_PI) * alpha * eye) * cbesh2 (z, alpha, kode, ierr);
