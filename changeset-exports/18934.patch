# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1405612112 14400
#      Thu Jul 17 11:48:32 2014 -0400
# Node ID 770c0d79341bf443e2c02df2a8458fd574f17273
# Parent  37c98933f26cf39d85a6e1e06b6b8172d6f1e602
avoid some unused variable warnings if LLVM is not available

* pt-jit.cc (UNUSED_WITHOUT_LLVM): New macro.  Use it to tag args and
nargout variables in functions that only work with LLVM.

diff --git a/libinterp/corefcn/pt-jit.cc b/libinterp/corefcn/pt-jit.cc
--- a/libinterp/corefcn/pt-jit.cc
+++ b/libinterp/corefcn/pt-jit.cc
@@ -2500,18 +2500,24 @@ jit_info::find (const vmap& extra_vars, 
 {
   vmap::const_iterator iter = extra_vars.find (vname);
   return iter == extra_vars.end () ? symbol_table::varval (vname)
                                    : *iter->second;
 }
 
 #endif
 
-
-DEFUN (jit_failure_count, args, nargout,
+#if defined (HAVE_LLVM)
+#define UNUSED_WITHOUT_LLVM(x) x
+#else
+#define UNUSED_WITHOUT_LLVM(x) x GCC_ATTR_UNUSED
+#endif
+
+DEFUN (jit_failure_count, UNUSED_WITHOUT_LLVM (args),
+       UNUSED_WITHOUT_LLVM (nargout),
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} jit_failure_count ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} jit_failure_count (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} jit_failure_count (@var{new_val}, \"local\")\n\
 Query or set the internal variable that counts the number of\n\
 JIT fail exceptions for Octave's JIT compiler.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
@@ -2523,17 +2529,18 @@ The original variable value is restored 
 #if defined (HAVE_LLVM)
   return SET_INTERNAL_VARIABLE (jit_failure_count);
 #else
   warning ("jit_failure_count: JIT compiling not available in this version of Octave");
   return octave_value ();
 #endif
 }
 
-DEFUN (debug_jit, args, nargout,
+DEFUN (debug_jit, UNUSED_WITHOUT_LLVM (args),
+       UNUSED_WITHOUT_LLVM (nargout),
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} debug_jit ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} debug_jit (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} debug_jit (@var{new_val}, \"local\")\n\
 Query or set the internal variable that determines whether\n\
 debugging/tracing is enabled for Octave's JIT compiler.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
@@ -2545,17 +2552,18 @@ The original variable value is restored 
 #if defined (HAVE_LLVM)
   return SET_INTERNAL_VARIABLE (debug_jit);
 #else
   warning ("debug_jit: JIT compiling not available in this version of Octave");
   return octave_value ();
 #endif
 }
 
-DEFUN (jit_enable, args, nargout,
+DEFUN (jit_enable, UNUSED_WITHOUT_LLVM (args),
+       UNUSED_WITHOUT_LLVM (nargout),
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} jit_enable ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} jit_enable (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} jit_enable (@var{new_val}, \"local\")\n\
 Query or set the internal variable that enables Octave's JIT compiler.\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
 variable is changed locally for the function and any subroutines it calls.  \n\
@@ -2566,17 +2574,18 @@ The original variable value is restored 
 #if defined (HAVE_LLVM)
   return SET_INTERNAL_VARIABLE (jit_enable);
 #else
   warning ("jit_enable: JIT compiling not available in this version of Octave");
   return octave_value ();
 #endif
 }
 
-DEFUN (jit_startcnt, args, nargout,
+DEFUN (jit_startcnt, UNUSED_WITHOUT_LLVM (args),
+       UNUSED_WITHOUT_LLVM (nargout),
        "-*- texinfo -*-\n\
 @deftypefn  {Built-in Function} {@var{val} =} jit_startcnt ()\n\
 @deftypefnx {Built-in Function} {@var{old_val} =} jit_startcnt (@var{new_val})\n\
 @deftypefnx {Built-in Function} {} jit_startcnt (@var{new_val}, \"local\")\n\
 Query or set the internal variable that determines whether JIT compilation\n\
 will take place for a specific loop.  Because compilation is a costly\n\
 operation it does not make sense to employ JIT when the loop count is low.\n\
 By default only loops with greater than 1000 iterations will be accelerated.\n\
