# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1517353128 -3600
#      Tue Jan 30 23:58:48 2018 +0100
# Node ID 13c207835e797d1565005d9ec1780a138d44cfb0
# Parent  5aa9c885ea18a1a81e44a6423bf0b4a742dc1eb1
Rethrow gl2ps_print exceptions from GUI to interpreter thread (bug #50198)

* Canvas.cc (Canvas::print): Catch gl2ps_print execution exceptions and post
  them to the interpreter event queue.

* octave-link.h (octave_link::post_exception, octave_link::post_exception,
  octave_link::rethrow_exception_callback): New methods.

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -105,18 +105,25 @@ namespace QtHandles
   Canvas::print (const QString& file_cmd, const QString& term)
   {
     gh_manager::auto_lock lock;
     graphics_object obj = gh_manager::get_object (m_handle);
 
     if (obj.valid_object ())
       {
         graphics_object figObj (obj.get_ancestor ("figure"));
-
-        octave::gl2ps_print (figObj, file_cmd.toStdString (), term.toStdString ());
+        try
+          {
+            octave::gl2ps_print (figObj, file_cmd.toStdString (),
+                                 term.toStdString ());
+          }
+        catch (octave::execution_exception e)
+          {
+            octave_link::post_exception (std::current_exception ());
+          }
       }
   }
 
   /*
      Two updateCurrentPoint() routines are required:
      1) Used for QMouseEvents where cursor position data is in callback from Qt.
      2) Used for QKeyEvents where cursor position must be determined.
   */
@@ -633,17 +640,17 @@ namespace QtHandles
         // currentObj may be invalid if, e.g., all objects under the mouse
         // click had "hittest" -> "off" or "pickableparts" -> "none".  In that
         // case, replace with underlying figObj which always accepts mouse
         // clicks.
         if (! currentObj.valid_object ())
           currentObj = figObj;
         else if (! currentObj.get_properties ().is_hittest ())
           {
-            // Objects with "hittest"->"off" pass the mouse event to their 
+            // Objects with "hittest"->"off" pass the mouse event to their
             // parent and so on.
             graphics_object tmpgo;
             tmpgo = gh_manager::get_object (currentObj.get_parent ());
             while (tmpgo && ! tmpgo.get_properties ().is_hittest ())
               tmpgo = gh_manager::get_object (tmpgo.get_parent ());
 
             if (tmpgo && tmpgo.get_handle () != 0.0)
               currentObj = tmpgo;
@@ -669,17 +676,17 @@ namespace QtHandles
 
         switch (newMouseMode)
           {
           case NoMode:
             {
               // Update the figure "currentobject"
               auto& fprop = Utils::properties<figure> (figObj);
 
-              if (currentObj 
+              if (currentObj
                   && currentObj.get_properties ().handlevisibility_is ("on"))
                 fprop.set_currentobject (currentObj.get_handle ()
                                          .as_octave_value ());
               else
                 fprop.set_currentobject (Matrix ());
 
               // Update figure "selectiontype" and "currentpoint"
               gh_manager::post_set (
diff --git a/libinterp/corefcn/octave-link.h b/libinterp/corefcn/octave-link.h
--- a/libinterp/corefcn/octave-link.h
+++ b/libinterp/corefcn/octave-link.h
@@ -147,16 +147,23 @@ public:
               void (T::*method) (const A&, const B&, const C&, const D&),
               const A& arg_a, const B& arg_b, const C& arg_c, const D& arg_d)
   {
     if (enabled ())
       instance->do_post_event<T, A, B, C, D>
         (obj, method, arg_a, arg_b, arg_c, arg_d);
   }
 
+  static void
+  post_exception (const std::exception_ptr &p)
+  {
+    if (enabled ())
+      instance->do_post_exception (p);
+  }
+
   static void entered_readline_hook (void)
   {
     if (enabled ())
       instance->do_entered_readline_hook ();
   }
 
   static void finished_readline_hook (void)
   {
@@ -495,16 +502,28 @@ protected:
   do_post_event (T *obj,
                  void (T::*method) (const A&, const B&, const C&, const D&),
                  const A& arg_a, const B& arg_b, const C& arg_c, const D& arg_d)
   {
     gui_event_queue.add_method<T, A, B, C, D>
       (obj, method, arg_a, arg_b, arg_c, arg_d);
   }
 
+  void
+  rethrow_exception_callback (const std::exception_ptr &p)
+  {
+    std::rethrow_exception (p);
+  }
+
+  void
+  do_post_exception (const std::exception_ptr &p)
+  {
+    do_post_event (this, &octave_link::rethrow_exception_callback, p);
+  }
+
   void do_entered_readline_hook (void) { }
   void do_finished_readline_hook (void) { }
 
   virtual bool do_confirm_shutdown (void) = 0;
 
   virtual bool do_copy_image_to_clipboard (const std::string& file) = 0;
 
   virtual bool do_edit_file (const std::string& file) = 0;
