# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1250049140 14400
#      Tue Aug 11 23:52:20 2009 -0400
# Node ID fb933db0c5171d4ffbb4a71b9fe20a9de340221e
# Parent  eee9b315044691d87d40bbdcad95b5d54218a876
convert fftw planner classes to singleton objects

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-08-11  John W. Eaton  <jwe@octave.org>
+
+	* oct-fftw.h, oct-fftw.cc (octave_fftw_planner): Convert to singleton.
+	(octave_float_fft_planner): Likewise.
+
 2009-08-11  John W. Eaton  <jwe@octave.org>
 
 	* Makefile.in (LINK_DEPS): Use READLINE_LIBS instead of
 	LIBREADLINE.  Also link with TERM_LIBS and DL_LIBS.
 
 2009-08-11  Jaroslav Hajek  <highegg@gmail.com>
 
 	* mx-inlines.cc (mx_inline_diff<T>): New overloaded template
diff --git a/liboctave/oct-fftw.cc b/liboctave/oct-fftw.cc
--- a/liboctave/oct-fftw.cc
+++ b/liboctave/oct-fftw.cc
@@ -1,11 +1,11 @@
 /*
 
-Copyright (C) 2001, 2002, 2004, 2005, 2006, 2007, 2008 John W. Eaton
+Copyright (C) 2001, 2002, 2004, 2005, 2006, 2007, 2008, 2009 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
 
@@ -29,16 +29,18 @@ along with Octave; see the file COPYING.
 #include <iostream>
 #include <vector>
 
 #include "lo-error.h"
 #include "oct-fftw.h"
 #include "quit.h"
 #include "oct-locbuf.h"
 
+octave_fftw_planner *octave_fftw_planner::instance = 0;
+
 // Helper class to create and cache fftw plans for both 1d and
 // 2d. This implementation defaults to using FFTW_ESTIMATE to create
 // the plans, which in theory is suboptimal, but provides quit
 // reasonable performance.
 
 // Also note that if FFTW_ESTIMATE is not used the planner in FFTW3
 // destroys the input and output arrays. We must therefore create a
 // temporary input array with the same size and 16-byte alignment as
@@ -67,55 +69,45 @@ octave_fftw_planner::octave_fftw_planner
   rd = rs = rr = rh = 0;
   rsimd_align = false;
   rn = dim_vector ();
   
   // If we have a system wide wisdom file, import it.
   fftw_import_system_wisdom ();
 }
 
-octave_fftw_planner::FftwMethod
-octave_fftw_planner::method (void)
+bool
+octave_fftw_planner::instance_ok (void)
 {
-  return meth;
-}
+  bool retval = true;
 
-octave_fftw_planner::FftwMethod
-octave_fftw_planner::method (FftwMethod _meth)
-{
-  FftwMethod ret = meth;
-  if (_meth == ESTIMATE || _meth == MEASURE || 
-      _meth == PATIENT || _meth == EXHAUSTIVE ||
-      _meth == HYBRID)
+  if (! instance)
+    instance = new octave_fftw_planner ();
+
+  if (! instance)
     {
-      if (meth != _meth) 
-	{
-	  meth = _meth;
-	  if (rplan)
-	    fftw_destroy_plan (rplan);
-	  if (plan[0])
-	    fftw_destroy_plan (plan[0]);
-	  if (plan[1])
-	    fftw_destroy_plan (plan[1]);
-	  rplan = plan[0] = plan[1] = 0;
-	}
+      (*current_liboctave_error_handler)
+	("unable to create octave_fftw_planner object!");
+
+      retval = false;
     }
-  else
-    ret = UNKNOWN;
-  return ret;
+
+  return retval;
 }
 
 #define CHECK_SIMD_ALIGNMENT(x) \
   (((reinterpret_cast<ptrdiff_t> (x)) & 0xF) == 0)
 
 fftw_plan
-octave_fftw_planner::create_plan (int dir, const int rank,
-				  const dim_vector dims, octave_idx_type howmany,
-				  octave_idx_type stride, octave_idx_type dist, 
-				  const Complex *in, Complex *out)
+octave_fftw_planner::do_create_plan (int dir, const int rank,
+				     const dim_vector dims,
+				     octave_idx_type howmany,
+				     octave_idx_type stride,
+				     octave_idx_type dist, 
+				     const Complex *in, Complex *out)
 {
   int which = (dir == FFTW_FORWARD) ? 0 : 1;
   fftw_plan *cur_plan_p = &plan[which];
   bool create_new_plan = false;
   bool ioalign = CHECK_SIMD_ALIGNMENT (in) && CHECK_SIMD_ALIGNMENT (out);
   bool ioinplace = (in == out);
 
   // Don't create a new plan if we have a non SIMD plan already but
@@ -223,19 +215,21 @@ octave_fftw_planner::create_plan (int di
       if (*cur_plan_p == 0)
 	(*current_liboctave_error_handler) ("Error creating fftw plan");
     }
 
   return *cur_plan_p;
 }
  
 fftw_plan
-octave_fftw_planner::create_plan (const int rank, const dim_vector dims, 
-				  octave_idx_type howmany, octave_idx_type stride, octave_idx_type dist, 
-				  const double *in, Complex *out)
+octave_fftw_planner::do_create_plan (const int rank, const dim_vector dims, 
+				     octave_idx_type howmany,
+				     octave_idx_type stride,
+				     octave_idx_type dist, 
+				     const double *in, Complex *out)
 {
   fftw_plan *cur_plan_p = &rplan;
   bool create_new_plan = false;
   bool ioalign = CHECK_SIMD_ALIGNMENT (in) && CHECK_SIMD_ALIGNMENT (out);
 
   // Don't create a new plan if we have a non SIMD plan already but
   // can do SIMD.  This prevents endlessly recreating plans if we
   // change the alignment.
@@ -336,16 +330,48 @@ octave_fftw_planner::create_plan (const 
 
       if (*cur_plan_p == 0)
 	(*current_liboctave_error_handler) ("Error creating fftw plan");
     }
 
   return *cur_plan_p;
 }
 
+octave_fftw_planner::FftwMethod
+octave_fftw_planner::do_method (void)
+{
+  return meth;
+}
+
+octave_fftw_planner::FftwMethod
+octave_fftw_planner::do_method (FftwMethod _meth)
+{
+  FftwMethod ret = meth;
+  if (_meth == ESTIMATE || _meth == MEASURE
+      || _meth == PATIENT || _meth == EXHAUSTIVE
+      || _meth == HYBRID)
+    {
+      if (meth != _meth) 
+	{
+	  meth = _meth;
+	  if (rplan)
+	    fftw_destroy_plan (rplan);
+	  if (plan[0])
+	    fftw_destroy_plan (plan[0]);
+	  if (plan[1])
+	    fftw_destroy_plan (plan[1]);
+	  rplan = plan[0] = plan[1] = 0;
+	}
+    }
+  else
+    ret = UNKNOWN;
+  return ret;
+}
+
+octave_float_fftw_planner *octave_float_fftw_planner::instance = 0;
 
 octave_float_fftw_planner::octave_float_fftw_planner (void)
 {
   meth = ESTIMATE;
 
   plan[0] = plan[1] = 0;
   d[0] = d[1] = s[0] = s[1] = r[0] = r[1] = h[0] = h[1] = 0;
   simd_align[0] = simd_align[1] = false;
@@ -356,52 +382,43 @@ octave_float_fftw_planner::octave_float_
   rd = rs = rr = rh = 0;
   rsimd_align = false;
   rn = dim_vector ();
   
   // If we have a system wide wisdom file, import it.
   fftwf_import_system_wisdom ();
 }
 
-octave_float_fftw_planner::FftwMethod
-octave_float_fftw_planner::method (void)
+bool
+octave_float_fftw_planner::instance_ok (void)
 {
-  return meth;
-}
+  bool retval = true;
 
-octave_float_fftw_planner::FftwMethod
-octave_float_fftw_planner::method (FftwMethod _meth)
-{
-  FftwMethod ret = meth;
-  if (_meth == ESTIMATE || _meth == MEASURE || 
-      _meth == PATIENT || _meth == EXHAUSTIVE ||
-      _meth == HYBRID)
+  if (! instance)
+    instance = new octave_float_fftw_planner ();
+
+  if (! instance)
     {
-      if (meth != _meth) 
-	{
-	  meth = _meth;
-	  if (rplan)
-	    fftwf_destroy_plan (rplan);
-	  if (plan[0])
-	    fftwf_destroy_plan (plan[0]);
-	  if (plan[1])
-	    fftwf_destroy_plan (plan[1]);
-	  rplan = plan[0] = plan[1] = 0;
-	}
+      (*current_liboctave_error_handler)
+	("unable to create octave_fftw_planner object!");
+
+      retval = false;
     }
-  else
-    ret = UNKNOWN;
-  return ret;
+
+  return retval;
 }
 
 fftwf_plan
-octave_float_fftw_planner::create_plan (int dir, const int rank,
-				  const dim_vector dims, octave_idx_type howmany,
-				  octave_idx_type stride, octave_idx_type dist, 
-				  const FloatComplex *in, FloatComplex *out)
+octave_float_fftw_planner::do_create_plan (int dir, const int rank,
+					   const dim_vector dims,
+					   octave_idx_type howmany,
+					   octave_idx_type stride,
+					   octave_idx_type dist, 
+					   const FloatComplex *in,
+					   FloatComplex *out)
 {
   int which = (dir == FFTW_FORWARD) ? 0 : 1;
   fftwf_plan *cur_plan_p = &plan[which];
   bool create_new_plan = false;
   bool ioalign = CHECK_SIMD_ALIGNMENT (in) && CHECK_SIMD_ALIGNMENT (out);
   bool ioinplace = (in == out);
 
   // Don't create a new plan if we have a non SIMD plan already but
@@ -509,19 +526,22 @@ octave_float_fftw_planner::create_plan (
       if (*cur_plan_p == 0)
 	(*current_liboctave_error_handler) ("Error creating fftw plan");
     }
 
   return *cur_plan_p;
 }
  
 fftwf_plan
-octave_float_fftw_planner::create_plan (const int rank, const dim_vector dims, 
-				  octave_idx_type howmany, octave_idx_type stride, octave_idx_type dist, 
-				  const float *in, FloatComplex *out)
+octave_float_fftw_planner::do_create_plan (const int rank,
+					   const dim_vector dims, 
+					   octave_idx_type howmany,
+					   octave_idx_type stride,
+					   octave_idx_type dist, 
+					   const float *in, FloatComplex *out)
 {
   fftwf_plan *cur_plan_p = &rplan;
   bool create_new_plan = false;
   bool ioalign = CHECK_SIMD_ALIGNMENT (in) && CHECK_SIMD_ALIGNMENT (out);
 
   // Don't create a new plan if we have a non SIMD plan already but
   // can do SIMD.  This prevents endlessly recreating plans if we
   // change the alignment.
@@ -622,18 +642,46 @@ octave_float_fftw_planner::create_plan (
 
       if (*cur_plan_p == 0)
 	(*current_liboctave_error_handler) ("Error creating fftw plan");
     }
 
   return *cur_plan_p;
 }
 
-octave_fftw_planner fftw_planner;
-octave_float_fftw_planner float_fftw_planner;
+octave_float_fftw_planner::FftwMethod
+octave_float_fftw_planner::do_method (void)
+{
+  return meth;
+}
+
+octave_float_fftw_planner::FftwMethod
+octave_float_fftw_planner::do_method (FftwMethod _meth)
+{
+  FftwMethod ret = meth;
+  if (_meth == ESTIMATE || _meth == MEASURE
+      || _meth == PATIENT || _meth == EXHAUSTIVE
+      || _meth == HYBRID)
+    {
+      if (meth != _meth) 
+	{
+	  meth = _meth;
+	  if (rplan)
+	    fftwf_destroy_plan (rplan);
+	  if (plan[0])
+	    fftwf_destroy_plan (plan[0]);
+	  if (plan[1])
+	    fftwf_destroy_plan (plan[1]);
+	  rplan = plan[0] = plan[1] = 0;
+	}
+    }
+  else
+    ret = UNKNOWN;
+  return ret;
+}
 
 template <class T>
 static inline void
 convert_packcomplex_1d (T *out, size_t nr, size_t nc,
 			octave_idx_type stride, octave_idx_type dist)
 {
   OCTAVE_QUIT;
 
@@ -711,18 +759,18 @@ convert_packcomplex_Nd (T *out, const di
 
 int
 octave_fftw::fft (const double *in, Complex *out, size_t npts, 
 		  size_t nsamples, octave_idx_type stride, octave_idx_type dist)
 {
   dist = (dist < 0 ? npts : dist);
 
   dim_vector dv (npts);
-  fftw_plan plan = fftw_planner.create_plan (1, dv, nsamples, stride, dist,
-					      in, out);
+  fftw_plan plan = octave_fftw_planner::create_plan (1, dv, nsamples,
+						     stride, dist, in, out);
 
   fftw_execute_dft_r2c (plan, (const_cast<double *>(in)),
 			 reinterpret_cast<fftw_complex *> (out));
 
   // Need to create other half of the transform.
 
   convert_packcomplex_1d (out, nsamples, npts, stride, dist);
 
@@ -731,35 +779,37 @@ octave_fftw::fft (const double *in, Comp
 
 int
 octave_fftw::fft (const Complex *in, Complex *out, size_t npts, 
 		  size_t nsamples, octave_idx_type stride, octave_idx_type dist)
 {
   dist = (dist < 0 ? npts : dist);
 
   dim_vector dv (npts);
-  fftw_plan plan = fftw_planner.create_plan (FFTW_FORWARD, 1, dv, nsamples,
-					     stride, dist, in, out);
+  fftw_plan plan = octave_fftw_planner::create_plan (FFTW_FORWARD, 1, dv,
+						     nsamples, stride,
+						     dist, in, out);
 
   fftw_execute_dft (plan, 
 	reinterpret_cast<fftw_complex *> (const_cast<Complex *>(in)),
 	reinterpret_cast<fftw_complex *> (out));
 
   return 0;
 }
 
 int
 octave_fftw::ifft (const Complex *in, Complex *out, size_t npts, 
 		   size_t nsamples, octave_idx_type stride, octave_idx_type dist)
 {
   dist = (dist < 0 ? npts : dist);
 
   dim_vector dv (npts);
-  fftw_plan plan = fftw_planner.create_plan (FFTW_BACKWARD, 1, dv, nsamples,
-					     stride, dist, in, out);
+  fftw_plan plan = octave_fftw_planner::create_plan (FFTW_BACKWARD, 1, dv,
+						     nsamples, stride,
+						     dist, in, out);
 
   fftw_execute_dft (plan, 
 	reinterpret_cast<fftw_complex *> (const_cast<Complex *>(in)),
 	reinterpret_cast<fftw_complex *> (out));
 
   const Complex scale = npts;
   for (size_t j = 0; j < nsamples; j++)
     for (size_t i = 0; i < npts; i++)
@@ -776,18 +826,18 @@ octave_fftw::fftNd (const double *in, Co
   for (int i = 0; i < rank; i++)
     dist *= dv(i);
 
   // Fool with the position of the start of the output matrix, so that
   // creating other half of the matrix won't cause cache problems.
 
   octave_idx_type offset = (dv.numel () / dv(0)) * ((dv(0) - 1) / 2); 
   
-  fftw_plan plan = fftw_planner.create_plan (rank, dv, 1, 1, dist,
-					     in, out + offset);
+  fftw_plan plan = octave_fftw_planner::create_plan (rank, dv, 1, 1, dist,
+						     in, out + offset);
 
   fftw_execute_dft_r2c (plan, (const_cast<double *>(in)),
 			reinterpret_cast<fftw_complex *> (out+ offset));
 
   // Need to create other half of the transform.
 
   convert_packcomplex_Nd (out, dv);
 
@@ -797,36 +847,36 @@ octave_fftw::fftNd (const double *in, Co
 int
 octave_fftw::fftNd (const Complex *in, Complex *out, const int rank, 
 		    const dim_vector &dv)
 {
   octave_idx_type dist = 1;
   for (int i = 0; i < rank; i++)
     dist *= dv(i);
 
-  fftw_plan plan = fftw_planner.create_plan (FFTW_FORWARD, rank, dv, 1, 1,
-					     dist, in, out);
+  fftw_plan plan = octave_fftw_planner::create_plan (FFTW_FORWARD, rank,
+						     dv, 1, 1, dist, in, out);
 
   fftw_execute_dft (plan, 
 	reinterpret_cast<fftw_complex *> (const_cast<Complex *>(in)),
 	reinterpret_cast<fftw_complex *> (out));
 
   return 0;
 }
 
 int
 octave_fftw::ifftNd (const Complex *in, Complex *out, const int rank, 
 		     const dim_vector &dv)
 {
   octave_idx_type dist = 1;
   for (int i = 0; i < rank; i++)
     dist *= dv(i);
 
-  fftw_plan plan = fftw_planner.create_plan (FFTW_BACKWARD, rank, dv, 1, 1,
-					     dist, in, out);
+  fftw_plan plan = octave_fftw_planner::create_plan (FFTW_BACKWARD, rank,
+						     dv, 1, 1, dist, in, out);
 
   fftw_execute_dft (plan, 
 	reinterpret_cast<fftw_complex *> (const_cast<Complex *>(in)),
 	reinterpret_cast<fftw_complex *> (out));
 
   const size_t npts = dv.numel ();
   const Complex scale = npts;
   for (size_t i = 0; i < npts; i++)
@@ -837,18 +887,19 @@ octave_fftw::ifftNd (const Complex *in, 
 
 int
 octave_fftw::fft (const float *in, FloatComplex *out, size_t npts, 
 		  size_t nsamples, octave_idx_type stride, octave_idx_type dist)
 {
   dist = (dist < 0 ? npts : dist);
 
   dim_vector dv (npts);
-  fftwf_plan plan = float_fftw_planner.create_plan (1, dv, nsamples, stride, dist,
-					     in, out);
+  fftwf_plan plan = octave_float_fftw_planner::create_plan (1, dv, nsamples,
+							    stride, dist,
+							    in, out);
 
   fftwf_execute_dft_r2c (plan, (const_cast<float *>(in)),
 			reinterpret_cast<fftwf_complex *> (out));
 
   // Need to create other half of the transform.
 
   convert_packcomplex_1d (out, nsamples, npts, stride, dist);
 
@@ -857,35 +908,39 @@ octave_fftw::fft (const float *in, Float
 
 int
 octave_fftw::fft (const FloatComplex *in, FloatComplex *out, size_t npts, 
 		  size_t nsamples, octave_idx_type stride, octave_idx_type dist)
 {
   dist = (dist < 0 ? npts : dist);
 
   dim_vector dv (npts);
-  fftwf_plan plan = float_fftw_planner.create_plan (FFTW_FORWARD, 1, dv, nsamples,
-					     stride, dist, in, out);
+  fftwf_plan plan = octave_float_fftw_planner::create_plan (FFTW_FORWARD, 1,
+							    dv, nsamples,
+							    stride, dist,
+							    in, out);
 
   fftwf_execute_dft (plan, 
 	reinterpret_cast<fftwf_complex *> (const_cast<FloatComplex *>(in)),
 	reinterpret_cast<fftwf_complex *> (out));
 
   return 0;
 }
 
 int
 octave_fftw::ifft (const FloatComplex *in, FloatComplex *out, size_t npts, 
 		   size_t nsamples, octave_idx_type stride, octave_idx_type dist)
 {
   dist = (dist < 0 ? npts : dist);
 
   dim_vector dv (npts);
-  fftwf_plan plan = float_fftw_planner.create_plan (FFTW_BACKWARD, 1, dv, nsamples,
-					     stride, dist, in, out);
+  fftwf_plan plan = octave_float_fftw_planner::create_plan (FFTW_BACKWARD, 1,
+							    dv, nsamples,
+							    stride, dist,
+							    in, out);
 
   fftwf_execute_dft (plan, 
 	reinterpret_cast<fftwf_complex *> (const_cast<FloatComplex *>(in)),
 	reinterpret_cast<fftwf_complex *> (out));
 
   const FloatComplex scale = npts;
   for (size_t j = 0; j < nsamples; j++)
     for (size_t i = 0; i < npts; i++)
@@ -902,18 +957,19 @@ octave_fftw::fftNd (const float *in, Flo
   for (int i = 0; i < rank; i++)
     dist *= dv(i);
 
   // Fool with the position of the start of the output matrix, so that
   // creating other half of the matrix won't cause cache problems.
 
   octave_idx_type offset = (dv.numel () / dv(0)) * ((dv(0) - 1) / 2); 
   
-  fftwf_plan plan = float_fftw_planner.create_plan (rank, dv, 1, 1, dist,
-					     in, out + offset);
+  fftwf_plan plan = octave_float_fftw_planner::create_plan (rank, dv, 1, 1,
+							    dist, in,
+							    out + offset);
 
   fftwf_execute_dft_r2c (plan, (const_cast<float *>(in)),
 			reinterpret_cast<fftwf_complex *> (out+ offset));
 
   // Need to create other half of the transform.
 
   convert_packcomplex_Nd (out, dv);
 
@@ -923,36 +979,38 @@ octave_fftw::fftNd (const float *in, Flo
 int
 octave_fftw::fftNd (const FloatComplex *in, FloatComplex *out, const int rank, 
 		    const dim_vector &dv)
 {
   octave_idx_type dist = 1;
   for (int i = 0; i < rank; i++)
     dist *= dv(i);
 
-  fftwf_plan plan = float_fftw_planner.create_plan (FFTW_FORWARD, rank, dv, 1, 1,
-					     dist, in, out);
+  fftwf_plan plan = octave_float_fftw_planner::create_plan (FFTW_FORWARD,
+							    rank, dv, 1, 1,
+							    dist, in, out);
 
   fftwf_execute_dft (plan, 
 	reinterpret_cast<fftwf_complex *> (const_cast<FloatComplex *>(in)),
 	reinterpret_cast<fftwf_complex *> (out));
 
   return 0;
 }
 
 int
 octave_fftw::ifftNd (const FloatComplex *in, FloatComplex *out, const int rank, 
 		     const dim_vector &dv)
 {
   octave_idx_type dist = 1;
   for (int i = 0; i < rank; i++)
     dist *= dv(i);
 
-  fftwf_plan plan = float_fftw_planner.create_plan (FFTW_BACKWARD, rank, dv, 1, 1,
-					     dist, in, out);
+  fftwf_plan plan = octave_float_fftw_planner::create_plan (FFTW_BACKWARD,
+							    rank, dv, 1, 1,
+							    dist, in, out);
 
   fftwf_execute_dft (plan, 
 	reinterpret_cast<fftwf_complex *> (const_cast<FloatComplex *>(in)),
 	reinterpret_cast<fftwf_complex *> (out));
 
   const size_t npts = dv.numel ();
   const FloatComplex scale = npts;
   for (size_t i = 0; i < npts; i++)
diff --git a/liboctave/oct-fftw.h b/liboctave/oct-fftw.h
--- a/liboctave/oct-fftw.h
+++ b/liboctave/oct-fftw.h
@@ -1,11 +1,11 @@
 /*
 
-Copyright (C) 2001, 2004, 2005, 2007, 2008 John W. Eaton
+Copyright (C) 2001, 2004, 2005, 2007, 2008, 2009 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
 
@@ -28,43 +28,95 @@ along with Octave; see the file COPYING.
 
 #include "oct-cmplx.h"
 #include "dim-vector.h"
 
 class
 OCTAVE_API
 octave_fftw_planner
 {
-public:
+protected:
 
   octave_fftw_planner (void);
 
-  fftw_plan create_plan (int dir, const int rank, const dim_vector dims, 
-			 octave_idx_type howmany, octave_idx_type stride, octave_idx_type dist, 
-			 const Complex *in, Complex *out);
+public:
 
-  fftw_plan create_plan (const int rank, const dim_vector dims, 
-			 octave_idx_type howmany, octave_idx_type stride, octave_idx_type dist, 
-			 const double *in, Complex *out);
+  ~octave_fftw_planner (void) { }
 
-  enum FftwMethod {
+  enum FftwMethod
+  {
     UNKNOWN = -1,
     ESTIMATE,
     MEASURE,
     PATIENT,
     EXHAUSTIVE,
     HYBRID
   };
 
-  FftwMethod method (void);
+  static bool instance_ok (void);
+
+  static fftw_plan
+  create_plan (int dir, const int rank, const dim_vector dims, 
+	       octave_idx_type howmany, octave_idx_type stride,
+	       octave_idx_type dist, const Complex *in,
+	       Complex *out)
+  {
+    static fftw_plan dummy;
+
+    return instance_ok ()
+      ? instance->do_create_plan (dir, rank, dims, howmany, stride,
+				  dist, in, out)
+      : dummy;
+  }
 
-  FftwMethod method (FftwMethod _meth);
+  static fftw_plan
+  create_plan (const int rank, const dim_vector dims, 
+	       octave_idx_type howmany, octave_idx_type stride,
+	       octave_idx_type dist, const double *in, Complex *out)
+  {
+    static fftw_plan dummy;
+
+    return instance_ok ()
+      ? instance->do_create_plan (rank, dims, howmany, stride, dist, in, out)
+      : dummy;
+  }
+
+  static FftwMethod method (void)
+  {
+    static FftwMethod dummy;
+
+    return instance_ok () ? instance->do_method () : dummy;
+  }
+
+  static FftwMethod method (FftwMethod _meth)
+  {
+    static FftwMethod dummy;
+
+    return instance_ok () ? instance->do_method (_meth) : dummy;
+  }
 
 private:
 
+  static octave_fftw_planner *instance;
+
+  fftw_plan
+  do_create_plan (int dir, const int rank, const dim_vector dims, 
+		  octave_idx_type howmany, octave_idx_type stride,
+		  octave_idx_type dist, const Complex *in,
+		  Complex *out);
+
+  fftw_plan
+  do_create_plan (const int rank, const dim_vector dims, 
+		  octave_idx_type howmany, octave_idx_type stride,
+		  octave_idx_type dist, const double *in, Complex *out);
+
+  FftwMethod do_method (void);
+
+  FftwMethod do_method (FftwMethod _meth);
+
   FftwMethod meth;
 
   // FIXME -- perhaps this should be split into two classes?
 
   // Plan for fft and ifft of complex values
   fftw_plan plan[2];
 
   // dist
@@ -105,43 +157,95 @@ private:
 
   bool rsimd_align;
 };
 
 class
 OCTAVE_API
 octave_float_fftw_planner
 {
-public:
+protected:
 
   octave_float_fftw_planner (void);
 
-  fftwf_plan create_plan (int dir, const int rank, const dim_vector dims, 
-			 octave_idx_type howmany, octave_idx_type stride, octave_idx_type dist, 
-			 const FloatComplex *in, FloatComplex *out);
+public:
 
-  fftwf_plan create_plan (const int rank, const dim_vector dims, 
-			 octave_idx_type howmany, octave_idx_type stride, octave_idx_type dist, 
-			 const float *in, FloatComplex *out);
+  ~octave_float_fftw_planner (void) { }
 
-  enum FftwMethod {
+  enum FftwMethod
+  {
     UNKNOWN = -1,
     ESTIMATE,
     MEASURE,
     PATIENT,
     EXHAUSTIVE,
     HYBRID
   };
 
-  FftwMethod method (void);
+  static bool instance_ok (void);
+  
+  static fftwf_plan
+  create_plan (int dir, const int rank, const dim_vector dims, 
+	       octave_idx_type howmany, octave_idx_type stride,
+	       octave_idx_type dist, const FloatComplex *in,
+	       FloatComplex *out)
+  {
+    static fftwf_plan dummy;
+
+    return instance_ok ()
+      ? instance->do_create_plan (dir, rank, dims, howmany, stride,
+				  dist, in, out)
+      : dummy;
+  }
 
-  FftwMethod method (FftwMethod _meth);
+  static fftwf_plan
+  create_plan (const int rank, const dim_vector dims, 
+	       octave_idx_type howmany, octave_idx_type stride,
+	       octave_idx_type dist, const float *in, FloatComplex *out)
+  {
+    static fftwf_plan dummy;
+
+    return instance_ok ()
+      ? instance->do_create_plan (rank, dims, howmany, stride, dist, in, out)
+      : dummy;
+  }
+
+  static FftwMethod method (void)
+  {
+    static FftwMethod dummy;
+
+    return instance_ok () ? instance->method () : dummy;
+  }
+
+  static FftwMethod method (FftwMethod _meth)
+  {
+    static FftwMethod dummy;
+
+    return instance_ok () ? instance->method (_meth) : dummy;
+  }
 
 private:
 
+  static octave_float_fftw_planner *instance;
+
+  fftwf_plan
+  do_create_plan (int dir, const int rank, const dim_vector dims, 
+		  octave_idx_type howmany, octave_idx_type stride,
+		  octave_idx_type dist, const FloatComplex *in,
+		  FloatComplex *out);
+
+  fftwf_plan
+  do_create_plan (const int rank, const dim_vector dims, 
+		  octave_idx_type howmany, octave_idx_type stride,
+		  octave_idx_type dist, const float *in, FloatComplex *out);
+
+  FftwMethod do_method (void);
+
+  FftwMethod do_method (FftwMethod _meth);
+
   FftwMethod meth;
 
   // FIXME -- perhaps this should be split into two classes?
 
   // Plan for fft and ifft of complex values
   fftwf_plan plan[2];
 
   // dist
@@ -178,20 +282,16 @@ private:
   octave_idx_type rh;
 
   // dims
   dim_vector rn;
 
   bool rsimd_align;
 };
 
-// FIXME -- maybe octave_fftw_planner should be a singleton object?
-extern OCTAVE_API octave_fftw_planner fftw_planner;
-extern OCTAVE_API octave_float_fftw_planner float_fftw_planner;
-
 class
 OCTAVE_API
 octave_fftw
 {
 public:
   static int fft (const double *in, Complex *out, size_t npts, 
 		  size_t nsamples = 1, octave_idx_type stride = 1, octave_idx_type dist = -1);
   static int fft (const Complex *in, Complex *out, size_t npts, 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-08-11  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/fftw.cc (Ffftw): Update for octave_fftw_planner
+	and octave_float_fftw_planner as singleton objects.
+
 2009-08-11  John W. Eaton  <jwe@octave.org>
 
 	* oct-conf.h.in: Use READLINE_LIBS instead of LIBREADLINE.
 	New #defines for TERM_LIBS and DL_LIBS.
 	* toplev.cc (octave_config_info): Add TERM_LIBS and DL_LIBS to the
 	struct.  Use READLINE_LIBS instead of LIBREADLINE.
 
 2009-08-11  John W. Eaton  <jwe@octave.org>
diff --git a/src/DLD-FUNCTIONS/fftw.cc b/src/DLD-FUNCTIONS/fftw.cc
--- a/src/DLD-FUNCTIONS/fftw.cc
+++ b/src/DLD-FUNCTIONS/fftw.cc
@@ -1,11 +1,11 @@
 /*
 
-Copyright (C) 2006, 2007, 2008 David Bateman
+Copyright (C) 2006, 2007, 2008, 2009 David Bateman
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
 
@@ -171,18 +171,18 @@ they will not be efficient and the point
 			  meth = octave_fftw_planner::HYBRID;
 			  methf = octave_float_fftw_planner::HYBRID;
 			}
 		      else
 			error ("unrecognized planner method");
 
 		      if (!error_state)
 			{
-			  meth = fftw_planner.method (meth);
-			  float_fftw_planner.method (methf);
+			  meth = octave_fftw_planner::method (meth);
+			  octave_float_fftw_planner::method (methf);
 
 			  if (meth == octave_fftw_planner::MEASURE)
 			    retval = octave_value ("measure");
 			  else if (meth == octave_fftw_planner::PATIENT)
 			    retval = octave_value ("patient");
 			  else if (meth == octave_fftw_planner::EXHAUSTIVE)
 			    retval = octave_value ("exhaustive");
 			  else if (meth == octave_fftw_planner::HYBRID)
@@ -223,17 +223,17 @@ they will not be efficient and the point
 		    error ("unrecognized argument");
 		}
 	    }
 	  else
 	    {
 	      if (arg0 == "planner")
 		{
 		  octave_fftw_planner::FftwMethod meth = 
-		    fftw_planner.method ();
+		    octave_fftw_planner::method ();
 
 		  if (meth == octave_fftw_planner::MEASURE)
 		    retval = octave_value ("measure");
 		  else if (meth == octave_fftw_planner::PATIENT)
 		    retval = octave_value ("patient");
 		  else if (meth == octave_fftw_planner::EXHAUSTIVE)
 		    retval = octave_value ("exhaustive");
 		  else if (meth == octave_fftw_planner::HYBRID)
@@ -261,9 +261,8 @@ they will not be efficient and the point
 #else
 
   warning ("fftw: this copy of Octave was not configured to use FFTW3");
 
 #endif
 
   return retval;
 }
-
