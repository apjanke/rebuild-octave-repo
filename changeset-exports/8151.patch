# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1222449402 14400
#      Fri Sep 26 13:16:42 2008 -0400
# Node ID 3725f819b5b3c023e6c73a98c7a9bdc7aec88aa4
# Parent  283989f2da9ba525c7eca8c77051220bd295fade
urlwrite.cc (Furlwrite): delete files we create if download fails

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2008-09-26  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/urlwrite.cc (urlwrite_cleanup_file) New function.
+	(urlwrite_delete_file, urlwrite_filename): New static variables.
+	(Furlwrite): Only return filename if urlget succeeds.  Use
+	unwind_protect to delete files we create if download fails.
+
 2008-09-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-null-mat.h: New header file.
 	* ov-null-mat.cc: New source.
 	* ov.h (octave_value::is_null_value, octave_value::non_null_value,
 	octave_value::make_non_null_value):
 	Declare new member functions.
 	* ov.cc (octave_value:non_null_value, octave_value::make_non_null_value): 
diff --git a/src/DLD-FUNCTIONS/urlwrite.cc b/src/DLD-FUNCTIONS/urlwrite.cc
--- a/src/DLD-FUNCTIONS/urlwrite.cc
+++ b/src/DLD-FUNCTIONS/urlwrite.cc
@@ -27,23 +27,26 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <string>
 #include <fstream>
 #include <iomanip>
 
+#include "file-ops.h"
+#include "file-stat.h"
 #include "oct-env.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "oct-obj.h"
 #include "ov-cell.h"
 #include "pager.h"
+#include "unwind-prot.h"
 
 #if defined (HAVE_CURL)
 
 #include <curl/curl.h>
 #include <curl/types.h>
 #include <curl/easy.h>
 
 // Write callback function for curl.
@@ -180,16 +183,27 @@ urlget (const std::string& url, const st
 
   urlget_cleanup (curl);
 
   return res;
 }
 
 #endif
 
+static bool urlwrite_delete_file;
+
+static std::string urlwrite_filename;
+
+static void
+urlwrite_cleanup_file (void *)
+{
+  if (urlwrite_delete_file)
+    file_ops::unlink (urlwrite_filename);
+}
+
 DEFUN_DLD (urlwrite, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} urlwrite (@var{URL}, @var{localfile})\n\
 @deftypefnx {Loadable Function} {@var{f} =} urlwrite (@var{url}, @var{localfile})\n\
 @deftypefnx {Loadable Function} {[@var{f}, @var{success}] =} urlwrite (@var{url}, @var{localfile})\n\
 @deftypefnx {Loadable Function} {[@var{f}, @var{success}, @var{message}] =} urlwrite (@var{url}, @var{localfile})\n\
 Download a remote file specified by its @var{URL} and save it as\n\
 @var{localfile}.  For example,\n\
@@ -245,16 +259,18 @@ urlwrite (\"http://www.google.com/search
     {
       error ("urlwrite: url must be a character string");
       return retval;
     }
 
   // name to store the file if download is succesful
   std::string filename = args(1).string_value();
 
+  urlwrite_filename = filename;
+
   if (error_state)
     {
       error ("urlwrite: localfile must be a character string");
       return retval;
     }
 
   std::string method;
   Cell param; // empty cell array
@@ -286,33 +302,56 @@ urlwrite (\"http://www.google.com/search
 
       if (param.numel () % 2 == 1 )
 	{
 	  error ("urlwrite: number of elements in param must be even");
 	  return retval;
 	}
     }
 
+  // The file should only be deleted if it doesn't initially exist, we
+  // create it, and the download fails.  We use unwind_protect to do
+  // it so that the deletion happens no matter how we exit the function.
+
+  file_stat fs (filename);
+
+  urlwrite_delete_file = ! fs.exists ();
+
   std::ofstream ofile (filename.c_str(), std::ios::out | std::ios::binary);
 
   if (! ofile.is_open ())
     {
       error ("urlwrite: unable to open file");
       return retval;
     }
 
+  unwind_protect::add (urlwrite_cleanup_file);
+
   CURLcode res = urlget (url, method, param, ofile);
 
   ofile.close ();
 
+  urlwrite_delete_file = (res != CURLE_OK);
+
+  unwind_protect::run ();
+
   if (nargout > 0)
     {
-      retval(0) = octave_env::make_absolute (filename, octave_env::getcwd ());
-      retval(1) = res == CURLE_OK;
-      retval(2) = std::string (res == CURLE_OK ? "" : curl_easy_strerror (res));
+      if (res == CURLE_OK)
+	{
+	  retval(2) = std::string ();
+	  retval(1) = true;
+	  retval(0) = octave_env::make_absolute (filename, octave_env::getcwd ());
+	}
+      else
+	{
+	  retval(2) = std::string (curl_easy_strerror (res));
+	  retval(1) = false;
+	  retval(0) = std::string ();
+	}
     }
 
   if (nargout < 2 && res != CURLE_OK)
     error ("urlwrite: curl: %s", curl_easy_strerror (res));
 
 #else
   error ("urlwrite: not available in this version of Octave");
 #endif
