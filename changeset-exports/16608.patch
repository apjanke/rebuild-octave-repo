# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1367642974 14400
#      Sat May 04 00:49:34 2013 -0400
# Node ID 739d7eb97b85b36f117ba9b3933cdf42eea24d51
# Parent  1eeeb2599870d129f06d537086319b0160c00899
make blinking cursor and different cursor styles for Windows GUI terminal

* QWinTerminalImpl.h, QWinTerminalImpl.cpp
(QConsolePrivate::KeyboardCursorType): New enum.
(QConsolePrivate::cursorRect): New function.
(QConsolePrivate::BLINK_DELAY, QConsolePrivate::m_cursorBlinking,
QConsolePrivate::m_blinkCursorTimer, QConsolePrivate::m_cursorType,
QConsolePrivate::m_hasBlinkingCursor): New data members.
(QConsolePrivate::QConsolePrivate): Initialize m_hasBlinkingCursor and
m_cursorType.  Create m_blinkCursorTimer.  Connect
m_blinkCursorTimer::timeout to parent::blinkCursorEvent.
(QWinTerminalImpl::viewPaintEvent): Draw new cursor types.  Handle
blinking cursor.
(QWinTerminalImpl::blinkCursorEvent,
QWinTerminalImpl::setBlinkingCursor,
QWinTerminalImpl::setBlinkingCursorState,
QWinTerminalImpl::focusInEvent, QWinTerminalImpl::keyPressEvent,
QWinTerminalImpl::setCursorType): New functions.
(QWinTerminalImpl::focusInEvent): Call setBlinkingCursorState.

diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
@@ -86,28 +86,37 @@ private:
 
 //////////////////////////////////////////////////////////////////////////////
 
 class QConsolePrivate
 {
   friend class QWinTerminalImpl;
 
 public:
+
+  enum KeyboardCursorType
+    {
+      BlockCursor,
+      UnderlineCursor,
+      IBeamCursor
+    };
+
   QConsolePrivate (QWinTerminalImpl* parent, const QString& cmd = QString ());
   ~QConsolePrivate (void);
 
   void updateConsoleSize (bool sync = false);
   void syncConsoleParameters (void);
   void grabConsoleBuffer (CHAR_INFO* buf = 0);
   void updateScrollBar (void);
   void setScrollValue (int value);
   void updateConsoleView (bool grab = true);
   void monitorConsole (void);
   void startCommand (void);
   void sendConsoleText (const QString& s);
+  QRect cursorRect (void);
 
   void log (const char* fmt, ...);
 
   void closeStandardIO (int fd, DWORD stdHandleId, const char* name);
   void setupStandardIO (DWORD stdHandleId, int fd, const char* name,
                         const char* devName);
 
 private:
@@ -121,33 +130,41 @@ private:
   QConsoleColors m_colors;
   bool m_inWheelEvent;
   QString m_title;
 
   QSize m_charSize;
   QSize m_bufferSize;
   QRect m_consoleRect;
   QPoint m_cursorPos;
+  bool m_cursorBlinking;
+  bool m_hasBlinkingCursor;
+  QTimer *m_blinkCursorTimer;
+  KeyboardCursorType m_cursorType;
 
   HANDLE m_stdOut;
   HWND m_consoleWindow;
   CHAR_INFO* m_buffer;
   CHAR_INFO* m_tmpBuffer;
   HANDLE m_process;
 
   QConsoleView* m_consoleView;
   QScrollBar* m_scrollBar;
   QTimer* m_consoleWatcher;
   QConsoleThread *m_consoleThread;
+
+  // The delay in milliseconds between redrawing blinking text.
+  static const int BLINK_DELAY = 500;
 };
 
 //////////////////////////////////////////////////////////////////////////////
 
 QConsolePrivate::QConsolePrivate (QWinTerminalImpl* parent, const QString& cmd)
-    : q (parent), m_command (cmd), m_process (NULL), m_inWheelEvent (false)
+  : q (parent), m_command (cmd), m_hasBlinkingCursor (true),
+    m_cursorType (BlockCursor), m_process (NULL), m_inWheelEvent (false)
 {
   log (NULL);
 
   // Possibly detach from any existing console
   log ("Detaching from existing console (if any)...\n");
   FreeConsole ();
   log ("Closing standard IO...\n");
   closeStandardIO (0, STD_INPUT_HANDLE, "STDIN");
@@ -250,17 +267,21 @@ QConsolePrivate::QConsolePrivate (QWinTe
   parent->setFocusPolicy (Qt::StrongFocus);
   parent->winId ();
 
   updateScrollBar ();
 
   m_consoleWatcher = new QTimer (parent);
   m_consoleWatcher->setInterval (10);
   m_consoleWatcher->setSingleShot (false);
-  
+
+  m_blinkCursorTimer = new QTimer (parent);
+  QObject::connect (m_blinkCursorTimer, SIGNAL (timeout()),
+                    q, SLOT (blinkCursorEvent ()));  
+
   QObject::connect (m_scrollBar, SIGNAL (valueChanged (int)),
                     q, SLOT (scrollValueChanged (int)));
   QObject::connect (m_consoleWatcher, SIGNAL (timeout (void)),
                     q, SLOT (monitorConsole (void)));
 
   m_consoleWatcher->start ();
 
   if (m_command.isEmpty ())
@@ -695,16 +716,27 @@ void QConsolePrivate::sendConsoleText (c
         {
           WriteConsoleInput (hStdIn, events, nEvents, &written);
           nEvents = 0;
           ZeroMemory (events, sizeof (events));
         }
     }
 }
 
+QRect
+QConsolePrivate::cursorRect (void)
+{
+  int cw = m_charSize.width ();
+  int ch = m_charSize.height ();
+
+  return QRect ((m_cursorPos.x () - m_consoleRect.x ()) * cw,
+                (m_cursorPos.y () - m_consoleRect.y ()) * ch,
+                cw, ch);
+}
+
 //////////////////////////////////////////////////////////////////////////////
 
 QWinTerminalImpl::QWinTerminalImpl (QWidget* parent)
     : QTerminalInterface (parent), d (new QConsolePrivate (this))
 {
 }
 
 //////////////////////////////////////////////////////////////////////////////
@@ -807,21 +839,87 @@ void QWinTerminalImpl::viewPaintEvent (Q
           // No need to update s or x, they will be reset on the next
           // for-loop iteration
           if (attr & 0x00f0)
             p.fillRect (x, y-ascent, s.length () * cw, ch, p.brush ());
           p.drawText (x, y, s);
         }
     }
 
-  // Draw cursor
-  p.setCompositionMode (QPainter::RasterOp_SourceXorDestination);
-  p.fillRect ((d->m_cursorPos.x () - d->m_consoleRect.x ()) * cw,
-              (d->m_cursorPos.y () - d->m_consoleRect.y ()) * ch,
-              cw, ch, d->m_colors[7]);
+  if (! d->m_cursorBlinking)
+    {
+      QColor cursorColor = d->m_colors[7];
+      QRect cursorRect = d->cursorRect ();
+
+      p.setPen (d->m_foregroundColor);
+
+      if (d->m_cursorType == QConsolePrivate::BlockCursor)
+        {
+          if (hasFocus ())
+            {
+              p.setCompositionMode (QPainter::RasterOp_SourceXorDestination);
+
+              p.fillRect (cursorRect, cursorColor);
+            }
+          else
+            {
+              // draw the cursor outline, adjusting the area so that
+              // it is draw entirely inside 'rect'
+ 
+              int penWidth = qMax (1, p.pen().width());
+ 
+              p.setBrush (Qt::NoBrush);
+
+              p.drawRect (cursorRect.adjusted (penWidth/2, penWidth/2,
+                                               - penWidth/2 - penWidth%2,
+                                               - penWidth/2 - penWidth%2));
+            }
+        }
+      else if (d->m_cursorType == QConsolePrivate::UnderlineCursor)
+        {
+          p.drawLine (cursorRect.left (), cursorRect.bottom (),
+                      cursorRect.right (), cursorRect.bottom ());
+        }
+      else if (d->m_cursorType == QConsolePrivate::IBeamCursor)
+        {
+          p.drawLine (cursorRect.left (), cursorRect.top (),
+                      cursorRect.left (), cursorRect.bottom ());
+        }
+    }
+}
+
+void QWinTerminalImpl::blinkCursorEvent (void)
+{
+  if (d->m_hasBlinkingCursor)
+    d->m_cursorBlinking = ! d->m_cursorBlinking;
+  else
+    d->m_cursorBlinking = false;
+
+  d->m_consoleView->update (d->cursorRect ());
+}
+
+void QWinTerminalImpl::setBlinkingCursor (bool blink)
+{
+  d->m_hasBlinkingCursor = blink;
+
+  setBlinkingCursorState (blink);
+}
+
+void QWinTerminalImpl::setBlinkingCursorState (bool blink)
+{
+  if (blink && ! d->m_blinkCursorTimer->isActive ())
+    d->m_blinkCursorTimer->start (d->BLINK_DELAY);
+
+  if (! blink && d->m_blinkCursorTimer->isActive ())
+    {
+      d->m_blinkCursorTimer->stop ();
+
+      if (d->m_cursorBlinking)
+        blinkCursorEvent ();
+    }
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 void QWinTerminalImpl::wheelEvent (QWheelEvent* event)
 {
   if (! d->m_inWheelEvent)
     {
@@ -866,33 +964,78 @@ void QWinTerminalImpl::monitorConsole (v
 {
   d->monitorConsole ();
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 void QWinTerminalImpl::focusInEvent (QFocusEvent* event)
 {
+  setBlinkingCursorState (true);
+
   QWidget::focusInEvent (event);
 }
 
+void QWinTerminalImpl::focusOutEvent (QFocusEvent* event)
+{
+  // Force the cursor to be redrawn.
+  d->m_cursorBlinking = true;
+
+  setBlinkingCursorState (false);
+
+  QWidget::focusOutEvent (event);
+}
+
+void QWinTerminalImpl::keyPressEvent (QKeyEvent* event)
+{
+  if (d->m_hasBlinkingCursor)
+    {
+      d->m_blinkCursorTimer->start (d->BLINK_DELAY);
+
+      if (d->m_cursorBlinking)
+        blinkCursorEvent ();
+    }
+
+  QWidget::keyPressEvent (event);
+}
+
 //////////////////////////////////////////////////////////////////////////////
 
 void QWinTerminalImpl::start (void)
 {
   d->startCommand ();
 }
 
 //////////////////////////////////////////////////////////////////////////////
 
 void QWinTerminalImpl::sendText (const QString& s)
 {
   d->sendConsoleText (s);
 }
 
+void QWinTerminalImpl::setCursorType (CursorType type, bool blinking)
+{
+  switch (type)
+    {
+    case UnderlineCursor:
+      d->m_cursorType = QConsolePrivate::UnderlineCursor;
+      break;
+
+    case BlockCursor:
+      d->m_cursorType = QConsolePrivate::BlockCursor;
+      break;
+
+    case IBeamCursor:
+      d->m_cursorType = QConsolePrivate::IBeamCursor;
+      break;
+    }
+
+  setBlinkingCursor (blinking);
+}
+
 //////////////////////////////////////////////////////////////////////////////
 
 void QWinTerminalImpl::setTerminalFont (const QFont& f)
 {
   d->m_font = f;
   d->m_consoleView->setFont (f);
   d->updateConsoleSize (true);
 }
diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.h
@@ -21,16 +21,17 @@ along with Foobar.  If not, see <http://
 
 #ifndef __QConsole_h__
 #define __QConsole_h__ 1
 
 #include <QWidget>
 #include "QTerminalInterface.h"
 class QFocusEvent;
 class QKeyEvent;
+class QPainter;
 class QPaintEvent;
 class QResizeEvent;
 class QWheelEvent;
 
 class QConsolePrivate;
 class QConsoleThread;
 class QConsoleView;
 
@@ -46,30 +47,36 @@ class QWinTerminalImpl : public QTermina
 public:
   QWinTerminalImpl (QWidget* parent = 0);
   QWinTerminalImpl (const QString& cmd, QWidget* parent = 0);
   ~QWinTerminalImpl (void);
 
   void setTerminalFont (const QFont& font);
   void setSize (int columns, int lines);
   void sendText (const QString& s);
+  void setCursorType (CursorType type, bool blinking);
 
 public slots:
   void copyClipboard (void);
   void pasteClipboard (void);
+  void blinkCursorEvent (void);
 
 signals:
   void terminated (void);
   void titleChanged (const QString&);
 
 protected:
   void viewPaintEvent (QConsoleView*, QPaintEvent*);
+  void setBlinkingCursor (bool blink);
+  void setBlinkingCursorState (bool blink);
   void viewResizeEvent (QConsoleView*, QResizeEvent*);
   void wheelEvent (QWheelEvent*);
   void focusInEvent (QFocusEvent*);
+  void focusOutEvent (QFocusEvent*);
+  void keyPressEvent (QKeyEvent*);
   bool winEvent (MSG*, long*);
   virtual void start (void);
 
 private slots:
   void scrollValueChanged (int value);
   void monitorConsole (void);
 
 private:
