# HG changeset patch
# User Julien Bect <jbect@users.sourceforge.net>
# Date 1546553431 -3600
#      Thu Jan 03 23:10:31 2019 +0100
# Branch stable
# Node ID 3e6d559c875618bfed73fb1f884563f7e1fbff77
# Parent  df230bb22ba67ab1025f0c9de5f9b59989dfff73
jit: configure: Improve configure AC_CACHE_CHECK messages

* m4/acinclude.m4: Improve configure AC_CACHE_CHECK messages.

diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -2604,17 +2604,17 @@ AC_DEFUN([OCTAVE_IEEE754_DATA_FORMAT], [
     ## the one in the octave_ieee_init function in liboctave/lo-ieee.cc.
     AC_MSG_ERROR([IEEE 754 data format required for building Octave])
   fi
 ])
 dnl
 dnl Check for CallInst::addAttribute API
 dnl
 AC_DEFUN([OCTAVE_LLVM_CALLINST_ADDATTRIBUTE_API], [
-  AC_CACHE_CHECK([check LLVM::CallInst::addAttribute arg type is llvm::Attributes],
+  AC_CACHE_CHECK([if llvm::CallInst::addAttribute's arg type is llvm::Attributes],
     [octave_cv_callinst_addattribute_arg_is_attributes],
     [AC_LANG_PUSH(C++)
       AC_COMPILE_IFELSE(
         [AC_LANG_PROGRAM([[
 #if defined (HAVE_LLVM_IR_FUNCTION_H)
           #include <llvm/IR/Instructions.h>
           #include <llvm/IR/Attributes.h>
 #else
@@ -2636,17 +2636,17 @@ AC_DEFUN([OCTAVE_LLVM_CALLINST_ADDATTRIB
     AC_DEFINE(CALLINST_ADDATTRIBUTE_ARG_IS_ATTRIBUTES, 1,
       [Define to 1 if llvm::CallInst:addAttribute arg type is llvm::Attributes.])
   fi
 ])
 dnl
 dnl Check for Function::addAttribute API
 dnl
 AC_DEFUN([OCTAVE_LLVM_FUNCTION_ADDATTRIBUTE_API], [
-  AC_CACHE_CHECK([check llvm::Function::addAttribute arg type is llvm::Attributes],
+  AC_CACHE_CHECK([if llvm::Function::addAttribute's arg type is llvm::Attributes],
     [octave_cv_function_addattribute_arg_is_attributes],
     [AC_LANG_PUSH(C++)
       AC_COMPILE_IFELSE(
         [AC_LANG_PROGRAM([[
 #if defined (HAVE_LLVM_IR_FUNCTION_H)
           #include <llvm/IR/Function.h>
           #include <llvm/IR/Attributes.h>
           #include <llvm/IR/LLVMContext.h>
@@ -2670,17 +2670,17 @@ AC_DEFUN([OCTAVE_LLVM_FUNCTION_ADDATTRIB
     AC_DEFINE(FUNCTION_ADDATTRIBUTE_ARG_IS_ATTRIBUTES, 1,
       [Define to 1 if llvm::Function:addAttribute arg type is llvm::Attributes.])
   fi
 ])
 dnl
 dnl Check for Function::addFnAttr API
 dnl
 AC_DEFUN([OCTAVE_LLVM_FUNCTION_ADDFNATTR_API], [
-  AC_CACHE_CHECK([check LLVM::Function::addFnAttr arg type is llvm::Attributes],
+  AC_CACHE_CHECK([if llvm::Function::addFnAttr's arg type is llvm::Attributes],
     [octave_cv_function_addfnattr_arg_is_attributes],
     [AC_LANG_PUSH(C++)
       AC_COMPILE_IFELSE(
         [AC_LANG_PROGRAM([[
 #if defined (HAVE_LLVM_IR_FUNCTION_H)
           #include <llvm/IR/Function.h>
           #include <llvm/IR/Attributes.h>
 #else
@@ -2699,17 +2699,17 @@ AC_DEFUN([OCTAVE_LLVM_FUNCTION_ADDFNATTR
     AC_DEFINE(FUNCTION_ADDFNATTR_ARG_IS_ATTRIBUTES, 1,
       [Define to 1 if llvm::Function:addFnAttr arg type is llvm::Attributes.])
   fi
 ])
 dnl
 dnl Check for legacy::PassManager API
 dnl
 AC_DEFUN([OCTAVE_LLVM_LEGACY_PASSMANAGER_API], [
-  AC_CACHE_CHECK([check for LLVM::legacy::PassManager],
+  AC_CACHE_CHECK([if llvm::legacy::PassManager exists],
     [octave_cv_legacy_passmanager],
     [AC_LANG_PUSH(C++)
       save_LIBS="$LIBS"
       LIBS="$LLVM_LIBS $LIBS"
       AC_LINK_IFELSE(
         [AC_LANG_PROGRAM([[
           #include <llvm/IR/LegacyPassManager.h>
           ]], [[
@@ -2728,17 +2728,17 @@ AC_DEFUN([OCTAVE_LLVM_LEGACY_PASSMANAGER
     AC_DEFINE(LEGACY_PASSMANAGER, 1,
       [Define to 1 if LLVM::legacy::PassManager exists.])
   fi
 ])
 dnl
 dnl Check for raw_fd_ostream API
 dnl
 AC_DEFUN([OCTAVE_LLVM_RAW_FD_OSTREAM_API], [
-  AC_CACHE_CHECK([check LLVM::raw_fd_ostream arg type is llvm::sys:fs],
+  AC_CACHE_CHECK([if llvm::raw_fd_ostream's arg type is llvm::sys:fs],
     [octave_cv_raw_fd_ostream_arg_is_llvm_sys_fs],
     [AC_LANG_PUSH(C++)
       AC_COMPILE_IFELSE(
         [AC_LANG_PROGRAM([[
           #include <llvm/Support/raw_os_ostream.h>
           ]], [[
           std::string str;
           llvm::raw_fd_ostream fout ("", str, llvm::sys::fs::F_Binary);
@@ -2751,17 +2751,17 @@ AC_DEFUN([OCTAVE_LLVM_RAW_FD_OSTREAM_API
     AC_DEFINE(RAW_FD_OSTREAM_ARG_IS_LLVM_SYS_FS, 1,
       [Define to 1 if LLVM::raw_fd_ostream arg type is llvm::sys:fs.])
   fi
 ])
 dnl
 dnl Check llvm::IRBuilder API
 dnl
 AC_DEFUN([OCTAVE_LLVM_IRBUILDER_API], [
-  AC_CACHE_CHECK([check if llvm::IRBuilder has two template arguments],
+  AC_CACHE_CHECK([if llvm::IRBuilder has two template arguments],
     [octave_cv_llvm_irbuilder_has_two_template_args],
     [AC_LANG_PUSH(C++)
       AC_COMPILE_IFELSE(
         [AC_LANG_PROGRAM([[
 #if defined (HAVE_LLVM_IR_FUNCTION_H)
           #include <llvm/IR/LLVMContext.h>
 #else
           #include <llvm/LLVMContext.h>
@@ -2786,17 +2786,17 @@ AC_DEFUN([OCTAVE_LLVM_IRBUILDER_API], [
     AC_DEFINE(LLVM_IRBUILDER_HAS_TWO_TEMPLATE_ARGS, 1,
       [Define to 1 if llvm::IRBuilder has two template arguments.])
   fi
 ])
 dnl
 dnl Check for llvm::createAlwaysInlinerPass
 dnl
 AC_DEFUN([OCTAVE_LLVM_HAS_CREATEALWAYSINLINERPASS], [
-  AC_CACHE_CHECK([check if llvm::createAlwaysInlinerPass exists],
+  AC_CACHE_CHECK([if llvm::createAlwaysInlinerPass exists],
     [octave_cv_llvm_has_createalwaysinlinerpass],
     [AC_LANG_PUSH(C++)
       AC_COMPILE_IFELSE(
         [AC_LANG_PROGRAM([[
           #include <llvm/Transforms/IPO.h>
           ]], [[
           llvm::Pass *p;
           p = llvm::createAlwaysInlinerPass ();
@@ -2809,17 +2809,17 @@ AC_DEFUN([OCTAVE_LLVM_HAS_CREATEALWAYSIN
     AC_DEFINE(LLVM_HAS_CREATEALWAYSINLINERPASS, 1,
       [Define to 1 if llvm::createAlwaysInlinerPass exists.])
   fi
 ])
 dnl
 dnl Check llvm::IRBuilder::CreateConstInBoundsGEP1_32 API
 dbl
 AC_DEFUN([OCTAVE_LLVM_IRBUILDER_CREATECONSTINBOUNDSGEP1_32_API], [
-  AC_CACHE_CHECK([check if llvm::IRBuilder::CreateConstInBoundsGEP1_32 requires a type argument],
+  AC_CACHE_CHECK([if llvm::IRBuilder::CreateConstInBoundsGEP1_32 requires a type argument],
     [octave_cv_llvm_irbuilder_createconstinboundsgep1_32_requires_type],
     [AC_LANG_PUSH(C++)
       AC_COMPILE_IFELSE(
         [AC_LANG_PROGRAM([[
 #if defined (HAVE_LLVM_IR_IRBUILDER_H)
           #include <llvm/IR/IRBuilder.h>
 #elif defined (HAVE_LLVM_SUPPORT_IRBUILDER_H)
           #include <llvm/Support/IRBuilder.h>
