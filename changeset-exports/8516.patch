# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1231969785 18000
#      Wed Jan 14 16:49:45 2009 -0500
# Node ID e2a179415bac5f933a51d9f840dc62c7035a1812
# Parent  ec2715c76039c09552188d2deb2f947f585b4e3f
doc fixes

diff --git a/doc/interpreter/contrib.txi b/doc/interpreter/contrib.txi
--- a/doc/interpreter/contrib.txi
+++ b/doc/interpreter/contrib.txi
@@ -312,11 +312,13 @@ from external source, namely the Autocon
 If you give a code example in the documentation written in texinfo with the 
 @code{@@example} environment, you should be aware that the text within such an 
 environment will not be wrapped. It is recommended that you keep the lines
 short enough to fit on pages in the generated pdf or ps documents. Here is a 
 ruler (in an @code{@@example} environment) for finding the appropriate line 
 width:
 
 @example
-         1         2         3         4         5         6         7         8
-12345678901234567890123456789012345678901234567890123456789012345678901234567890
+@group
+         1         2         3         4         5         6
+123456789012345678901234567890123456789012345678901234567890
+@end group
 @end example
diff --git a/examples/@polynomial/subsref.m b/examples/@polynomial/subsref.m
--- a/examples/@polynomial/subsref.m
+++ b/examples/@polynomial/subsref.m
@@ -6,12 +6,13 @@ function b = subsref (a, s)
     case "{}"
       ind = s.subs;
       b = polynomial (a.poly(ind{:}));
     case "."
       fld = s.subs;
       if (strcmp (fld, "poly"))
 	b = a.poly;
       else
-	error ("subsref: unrecognized property \"%s\" of a polynomial", fld);
+	error ("@polynomial/subsref: invalid property \"%s\"",
+	       fld);
       endif
   endswitch
 endfunction
diff --git a/scripts/general/quadgk.m b/scripts/general/quadgk.m
--- a/scripts/general/quadgk.m
+++ b/scripts/general/quadgk.m
@@ -69,21 +69,21 @@
 ## unacceptable error are sub-divided and re-evaluated. If the number of
 ## sub-intervals exceeds at any point 650 sub-intervals then a poor
 ## convergence is signaled and the current estimate of the integral is
 ## returned. The property 'MaxIntervalCount' can be used to alter the
 ## number of sub-intervals that can exist before exiting.
 ##
 ## @item WayPoints
 ## If there exists discontinuities in the first derivative of the
-## function to integrate, then these can be flagged with teh 'WayPoints'
-## property. This forces the ends of a sub-interval to fall on the
-## breakpoints of the function and can result in significantly improved
-## estimated of the error in the integral, faster computation or both.
-## For example
+## function to integrate, then these can be flagged with the
+## @code{"WayPoints"} property. This forces the ends of a sub-interval
+## to fall on the breakpoints of the function and can result in
+## significantly improved estimated of the error in the integral, faster
+## computation or both.  For example,
 ##
 ## @example
 ## quadgk (@@(x) abs (1 - x .^ 2), 0, 2, 'Waypoints', 1)
 ## @end example
 ##
 ## @noindent
 ## signals the breakpoint in the integrand at @code{@var{x} = 1}.
 ##
@@ -93,17 +93,18 @@
 ##@end table
 ##
 ## If any of @var{a}, @var{b} or @var{waypoints} is complex, then the
 ## quadrature is treated as a contour integral along a piecewise
 ## continuous path defined by the above. In this case the integral is
 ## assuemd to have no edge singularities. For example
 ##
 ## @example
-## quadgk (@@ (z) log (z), 1+1i, 1+1i, 'WayPoints', [1-1i, -1,-1i, -1+1i])
+## quadgk (@@(z) log (z), 1+1i, 1+1i, "WayPoints",
+##         [1-1i, -1,-1i, -1+1i])
 ## @end example
 ##
 ## @noindent
 ## integrates @code{log (z)} along the square defined by @code{[1+1i,
 ##  1-1i, -1-1i, -1+1i]}
 ##
 ## If two output arguments are requested, then @var{err} returns the
 ## approximate bounds on the error in the integral @code{abs (@var{q} -
diff --git a/scripts/miscellaneous/intwarning.m b/scripts/miscellaneous/intwarning.m
--- a/scripts/miscellaneous/intwarning.m
+++ b/scripts/miscellaneous/intwarning.m
@@ -25,23 +25,25 @@
 ##
 ## @table @asis
 ## @item "query"
 ## The state of the Octave integer conversion and math warnings is
 ## queried. If there is no output argument, then the state is printed.
 ## Otherwise it is returned in a structure with the fields "identifier"
 ## and "state".
 ##
-## @example
+## @smallexample
+## @group
 ## intwarning ("query")
 ## The state of warning "Octave:int-convert-nan" is "off"
 ## The state of warning "Octave:int-convert-non-int-val" is "off"
 ## The state of warning "Octave:int-convert-overflow" is "off"
 ## The state of warning "Octave:int-math-overflow" is "off"
-## @end example 
+## @end group
+## @end smallexample 
 ##
 ## @item "on"
 ## Turn integer conversion and math warnings "on". If there is no output
 ## argument, then nothing is printed. Otherwise the original state of
 ## the state of the integer conversion and math warnings is returned in
 ## a structure array.
 ##
 ## @item "off"
diff --git a/scripts/sparse/spaugment.m b/scripts/sparse/spaugment.m
--- a/scripts/sparse/spaugment.m
+++ b/scripts/sparse/spaugment.m
@@ -45,17 +45,18 @@
 ## with @code{lu}, and the minimum norm solution can therefore be found
 ## without the need for a @code{qr} factorization. As the residual
 ## error will be @code{zeros (@var{m}, @var{m})} for under determined
 ## problems, and example can be 
 ##
 ## @example
 ## @group
 ## m = 11; n = 10; mn = max(m ,n);
-## a = spdiags ([ones(mn,1), 10*ones(mn,1), -ones(mn,1)],[-1,0,1], m, n);
+## a = spdiags ([ones(mn,1), 10*ones(mn,1), -ones(mn,1)],
+##              [-1, 0, 1], m, n);
 ## x0 = a \ ones (m,1);
 ## s = spaugment (a);
 ## [L, U, P, Q] = lu (s);
 ## x1 = Q * (U \ (L \ (P  * [ones(m,1); zeros(n,1)])));
 ## x1 = x1(end - n + 1 : end);
 ## @end group
 ## @end example
 ##
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -2497,28 +2497,29 @@ Left alignment.\n\
 @item r\n\
 Right alignment (this is the default).\n\
 @item c\n\
 Centered (may only be applied to command %s).\n\
 @end table\n\
 \n\
 A command is composed like this:\n\
 \n\
-@example\n\
+@smallexample\n\
 %[modifier]<command>[:size_of_parameter[:center-specific[:balance]]];\n\
-@end example\n\
+@end smallexample\n\
 \n\
-Command and modifier is already explained. Size_of_parameter\n\
-tells how many columns the parameter will need for printing.\n\
+Command and modifier is already explained.  The @code{size_of_parameter}\n\
+parameter tells how many columns the parameter will need for printing.\n\
 The @code{center-specific} parameter may only be applied to command\n\
 @samp{%s}.\n\
 The @code{balance} parameter specifies the offset for printing\n\
 the dimensions string.\n\
 \n\
-The default format is \"  %a:4; %ln:6; %cs:16:6:1;  %rb:12;  %lc:-1;\\n\".\n\
+The default format is\n\
+@code{\"  %a:4; %ln:6; %cs:16:6:1;  %rb:12;  %lc:-1;\\n\"}.\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (whos_line_format);
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
