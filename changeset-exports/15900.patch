# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1357371309 -3600
#      Sat Jan 05 08:35:09 2013 +0100
# Node ID 80e99730e5d423fd0170b046784a51acee243a5f
# Parent  f59797321a1b33d70909f00442ccf4b827befd37
gui: set locale to C before starting the interpreter

* octave-main-thread.cc(run): set locale to C instead of en_US.UTF-8.
* octave-qt-event-listener.cc(current_directory_has_changed): use the correct
charset for emitting the signal with a new directory.
* main-window.cc(change_current_working_directory,set_current_working_directory)
use the correct charset when sending a new directory from the gui to octave.
* history-dockwidget.cc(update_history_callback): use the correct chareset for
displaying the history.
* symbol-information.h: correct charset for displaying value in workspace view.

diff --git a/libgui/src/history-dockwidget.cc b/libgui/src/history-dockwidget.cc
--- a/libgui/src/history-dockwidget.cc
+++ b/libgui/src/history-dockwidget.cc
@@ -195,17 +195,17 @@ history_dock_widget::update_history_call
 
       _history_model->insertRows (clientHistoryLength, elts_to_add);
 
       for (int i = clientHistoryLength; i < serverHistoryLength; i++)
         {
           std::string entry = command_history::get_entry (i);
 
           _history_model->setData (_history_model->index (i),
-                      QString::fromLocal8Bit (entry.data (), entry.size ()));
+                      QString::fromUtf8 (entry.data (), entry.size ()));
         }
 
       // FIXME -- does this behavior make sense?  Calling
       // _history_list_view->scrollToBottom () here doesn't seem to
       // have any effect.  Instead, we need to request that action
       // and wait until the next event occurs in which no items
       // are added to the history list.
 
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -281,28 +281,28 @@ main_window::current_working_directory_h
 void
 main_window::change_current_working_directory ()
 {
   QString directory =
     QFileDialog::getExistingDirectory(this, tr ("Set working direcotry"));
 
   if (!directory.isEmpty ())
     {
-      std::string dir = directory.toLocal8Bit ().data ();
+      std::string dir = directory.toUtf8 ().data ();
       octave_link::post_event (this, &main_window::change_directory_callback,dir);
     }
 }
 
 void
 main_window::set_current_working_directory (const QString& directory)
 {
   QFileInfo fileInfo (directory);  // check whether this is an existing dir
   if (fileInfo.exists () && fileInfo.isDir ())   // is dir and exists
     {
-      std::string dir = directory.toLocal8Bit ().data ();
+      std::string dir = directory.toUtf8 ().data ();
       octave_link::post_event (this, &main_window::change_directory_callback,dir);
     }
 }
 
 void
 main_window::current_working_directory_up ()
 {
   set_current_working_directory ("..");
diff --git a/libgui/src/octave-adapter/octave-main-thread.cc b/libgui/src/octave-adapter/octave-main-thread.cc
--- a/libgui/src/octave-adapter/octave-main-thread.cc
+++ b/libgui/src/octave-adapter/octave-main-thread.cc
@@ -33,17 +33,17 @@ along with Octave; see the file COPYING.
 
 octave_main_thread::octave_main_thread () : QThread ()
 {
 }
 
 void
 octave_main_thread::run ()
 {
-  setlocale (LC_ALL, "en_US.UTF-8");
+  setlocale (LC_ALL, "C");
 
   emit ready ();
 
   octave_initialize_interpreter (octave_cmdline_argc, octave_cmdline_argv,
                                  octave_embedded);
 
   octave_execute_interpreter ();
 }
diff --git a/libgui/src/octave-qt-event-listener.cc b/libgui/src/octave-qt-event-listener.cc
--- a/libgui/src/octave-qt-event-listener.cc
+++ b/libgui/src/octave-qt-event-listener.cc
@@ -31,17 +31,17 @@ octave_qt_event_listener::octave_qt_even
   : QObject (p), octave_event_listener ()
 {
 }
 
 void
 octave_qt_event_listener::current_directory_has_changed (const std::string& directory)
 {
   emit current_directory_has_changed_signal
-    (QString::fromLocal8Bit (directory.data (), directory.size ()));
+    (QString::fromUtf8 (directory.data (), directory.size ()));
 }
 
 void
 octave_qt_event_listener::about_to_exit ()
 {
   qApp->quit ();
 }
 
diff --git a/libgui/src/symbol-information.h b/libgui/src/symbol-information.h
--- a/libgui/src/symbol-information.h
+++ b/libgui/src/symbol-information.h
@@ -76,17 +76,21 @@ public:
 
     return *this;
   }
 
   ~symbol_information (void) { }
 
   QString symbol (void) const { return _symbol; }
   QString class_name (void) const { return _class_name; }
-  QString value (void) const { return _value; }
+  QString value (void) const
+    {
+      return QString::fromUtf8 (_value.toStdString ().data (),
+                                _value.toStdString ().size ());
+    }
   QString dimension (void) const { return _dimension; }
   Scope scope (void) const { return _scope; }
 
   friend bool
   operator == (const symbol_information& a, const symbol_information& b)
   {
     return (a.hash () == b.hash ()
             && a.scope () == b.scope ()
