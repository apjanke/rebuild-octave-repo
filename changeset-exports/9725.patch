# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1255519411 -7200
#      Wed Oct 14 13:23:31 2009 +0200
# Node ID aea3a3a950e18e159faeb1734aa22b6538ff0e65
# Parent  f22bbc5d56e97ed307b9a2c650fe3e3229ef9fb6
implement nth_element

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1999,17 +1999,17 @@ template <class T>
 inline bool
 sort_isnan (typename ref_param<T>::type)
 {
   return false;
 }
 
 template <class T>
 Array<T>
-Array<T>::sort (octave_idx_type dim, sortmode mode) const
+Array<T>::sort (int dim, sortmode mode) const
 {
   if (dim < 0 || dim >= ndims ())
     {
       (*current_liboctave_error_handler)
         ("sort: invalid dimension");
       return Array<T> ();
     }
 
@@ -2114,17 +2114,17 @@ Array<T>::sort (octave_idx_type dim, sor
 	}
     }
 
   return m;
 }
 
 template <class T>
 Array<T>
-Array<T>::sort (Array<octave_idx_type> &sidx, octave_idx_type dim, 
+Array<T>::sort (Array<octave_idx_type> &sidx, int dim, 
 		sortmode mode) const
 {
   if (dim < 0 || dim >= ndims ())
     {
       (*current_liboctave_error_handler)
         ("sort: invalid dimension");
       return Array<T> ();
     }
@@ -2589,26 +2589,176 @@ Array<T>::find (octave_idx_type n, bool 
       || (rows () == 0 && dims ().numel (1) == 0))
     retval.dimensions = dim_vector ();
   else if (rows () == 1 && ndims () == 2)
     retval.dimensions = dim_vector (1, retval.length ());
 
   return retval;
 }
 
+template <class T>
+Array<T>
+Array<T>::nth_element (const idx_vector& n, int dim) const
+{
+  if (dim < 0 || dim >= ndims ())
+    {
+      (*current_liboctave_error_handler)
+        ("nth_element: invalid dimension");
+      return Array<T> ();
+    }
+
+  dim_vector dv = dims ();
+  octave_idx_type ns = dv(dim);
+
+  octave_idx_type nn = n.length (ns);
+
+  dv(dim) = std::min (nn, ns);
+  dv.chop_trailing_singletons ();
+
+  Array<T> m (dv);
+
+  if (m.numel () == 0)
+    return m;
+
+  sortmode mode = UNSORTED;
+  octave_idx_type lo = 0;
+
+  switch (n.idx_class ())
+    {
+    case idx_vector::class_scalar:
+      mode = ASCENDING;
+      lo = n(0);
+      break;
+    case idx_vector::class_range:
+      {
+        octave_idx_type inc = n.increment ();
+        if (inc == 1)
+          {
+            mode = ASCENDING;
+            lo = n(0);
+          }
+        else if (inc == -1)
+          {
+            mode = DESCENDING;
+            lo = ns - 1 - n(0);
+          }
+      }
+    default:
+      break;
+    }
+
+  if (mode == UNSORTED)
+    {
+      (*current_liboctave_error_handler)
+        ("nth_element: n must be a scalar or a contiguous range");
+      return Array<T> ();
+    }
+
+  octave_idx_type up = lo + nn;
+
+  if (lo < 0 || up > ns)
+    {
+      (*current_liboctave_error_handler)
+        ("nth_element: invalid element index");
+      return Array<T> ();
+    }
+
+  octave_idx_type iter = numel () / ns;
+  octave_idx_type stride = 1;
+
+  for (int i = 0; i < dim; i++)
+    stride *= dv(i);
+
+  T *v = m.fortran_vec ();
+  const T *ov = data ();
+
+  OCTAVE_LOCAL_BUFFER (T, buf, ns);
+
+  octave_sort<T> lsort;
+  lsort.set_compare (mode);
+
+  for (octave_idx_type j = 0; j < iter; j++)
+    {
+      octave_idx_type kl = 0, ku = ns;
+
+      if (stride == 1)
+        {
+          // copy without NaNs. 
+          // FIXME: impact on integer types noticeable?
+          for (octave_idx_type i = 0; i < ns; i++)
+            {
+              T tmp = ov[i];
+              if (sort_isnan<T> (tmp))
+                buf[--ku] = tmp;
+              else
+                buf[kl++] = tmp;
+            }
+
+          ov += ns;
+        }
+      else
+        {
+          octave_idx_type offset = j % stride;
+          // copy without NaNs. 
+          // FIXME: impact on integer types noticeable?
+          for (octave_idx_type i = 0; i < ns; i++)
+            {
+              T tmp = ov[offset + i*stride];
+              if (sort_isnan<T> (tmp))
+                buf[--ku] = tmp;
+              else
+                buf[kl++] = tmp;
+            }
+
+          if (offset == stride-1)
+            ov += ns*stride;
+        }
+
+      if (ku == ns)
+          lsort.nth_element (buf, ns, lo, up);
+      else if (mode == ASCENDING)
+        lsort.nth_element (buf, ku, lo, std::min (ku, up));
+      else
+        {
+          octave_idx_type nnan = ns - ku;
+          lsort.nth_element (buf, ku, std::max (lo - nnan, 0),
+                             std::max (up - nnan, 0));
+          std::rotate (buf, buf + ku, buf + ns);
+        }
+
+      if (stride == 1)
+        {
+          for (octave_idx_type i = 0; i < nn; i++)
+            v[i] = buf[lo + i];
+
+          v += nn;
+        }
+      else
+        {
+          octave_idx_type offset = j % stride;
+          for (octave_idx_type i = 0; i < nn; i++)
+            v[offset + stride * i] = buf[lo + i];
+          if (offset == stride-1)
+            v += nn*stride;
+        }
+    }
+
+  return m;
+}
+
 
 #define INSTANTIATE_ARRAY_SORT(T) template class OCTAVE_API octave_sort<T>;
 
 #define NO_INSTANTIATE_ARRAY_SORT(T) \
  \
 template <> Array<T>  \
-Array<T>::sort (octave_idx_type, sortmode) const { return *this; } \
+Array<T>::sort (int, sortmode) const { return *this; } \
  \
 template <> Array<T>  \
-Array<T>::sort (Array<octave_idx_type> &sidx, octave_idx_type, sortmode) const \
+Array<T>::sort (Array<octave_idx_type> &sidx, int, sortmode) const \
 { sidx = Array<octave_idx_type> (); return *this; } \
  \
 template <> sortmode  \
 Array<T>::is_sorted (sortmode) const  \
 { return UNSORTED; } \
  \
 Array<T>::compare_fcn_type \
 sortrows_comparator (sortmode, const Array<T>&, bool) \
@@ -2632,16 +2782,19 @@ template <> Array<octave_idx_type>  \
 Array<T>::lookupm (const Array<T>&, sortmode) const \
 { return Array<octave_idx_type> (); } \
 template <> Array<bool>  \
 Array<T>::lookupb (const Array<T>&, sortmode) const \
 { return Array<bool> (); } \
 template <> Array<octave_idx_type> \
 Array<T>::find (octave_idx_type, bool) const\
 { return Array<octave_idx_type> (); } \
+ \
+template <> Array<T>  \
+Array<T>::nth_element (const idx_vector&, int) const { return Array<T> (); } \
 
 
 template <class T>
 Array<T>
 Array<T>::diag (octave_idx_type k) const
 {
   dim_vector dv = dims ();
   octave_idx_type nd = dv.length ();
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -590,18 +590,18 @@ public:
     }
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
   // Unsafe.  This function exists to support the MEX interface.
   // You should not use it anywhere else.
   void *mex_get_data (void) const { return const_cast<T *> (data ()); }
 
-  Array<T> sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
-  Array<T> sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
+  Array<T> sort (int dim = 0, sortmode mode = ASCENDING) const;
+  Array<T> sort (Array<octave_idx_type> &sidx, int dim = 0,
 		 sortmode mode = ASCENDING) const;
 
   // Ordering is auto-detected or can be specified.
   sortmode is_sorted (sortmode mode = UNSORTED) const;
 
   // Sort by rows returns only indices.
   Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const;
 
@@ -626,16 +626,20 @@ public:
 
   // This looks up only exact matches, returning true/false if match.
   Array<bool> lookupb (const Array<T>& values, sortmode mode = UNSORTED) const;
 
   // Find indices of (at most n) nonzero elements. If n is specified, backward
   // specifies search from backward.
   Array<octave_idx_type> find (octave_idx_type n = -1, bool backward = false) const;
 
+  // Returns the n-th element in increasing order, using the same ordering as
+  // used for sort. n can either be a scalar index or a contiguous range.
+  Array<T> nth_element (const idx_vector& n, int dim = 0) const;
+
   Array<T> diag (octave_idx_type k = 0) const;
 
   template <class U, class F>
   Array<U>
   map (F fcn) const
   {
     octave_idx_type len = length ();
 
diff --git a/liboctave/ArrayN.h b/liboctave/ArrayN.h
--- a/liboctave/ArrayN.h
+++ b/liboctave/ArrayN.h
@@ -126,27 +126,30 @@ public:
 
   ArrayN<T> index (const Array<idx_vector>& ra_idx, bool resize_ok = false,
 		   const T& rfv = Array<T>::resize_fill_value ()) const
     {
       Array<T> tmp = Array<T>::index (ra_idx, resize_ok, rfv);
       return ArrayN<T> (tmp, tmp.dims ());
     }
 
-  ArrayN<T> sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
+  ArrayN<T> sort (int dim = 0, sortmode mode = ASCENDING) const
     {
-      Array<T> tmp = Array<T>::sort (dim, mode);
-      return ArrayN<T> (tmp, tmp.dims ());
+      return Array<T>::sort (dim, mode);
     }
 
-  ArrayN<T> sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
+  ArrayN<T> sort (Array<octave_idx_type> &sidx, int dim = 0,
 		 sortmode mode = ASCENDING) const
     {
-      Array<T> tmp = Array<T>::sort (sidx, dim, mode);
-      return ArrayN<T> (tmp, tmp.dims ());
+      return Array<T>::sort (sidx, dim, mode);
+    }
+
+  ArrayN<T> nth_element (const idx_vector& n, int dim = 0) const
+    {
+      return Array<T>::nth_element (n, dim);
     }
 
   ArrayN<T> diag (octave_idx_type k) const
   {
     return Array<T>::diag (k);
   }
 
   template <class U, class F>
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,18 @@
+2009-10-14  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-sort.cc (octave_sort<T>::nth_element): New overloaded method.
+	* oct-sort.h: Declare it.
+	* Array.cc (Array<T>::nth_element): New method.
+	* Array.h: Declare it.
+	(Array<T>::sort): Use int for dim argument.
+	* ArrayN.h (ArrayN<T>::nth_element): Wrap.
+	(ArrayN<T>::sort): Use int for dim argument.
+
 2009-10-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* lo-traits.h (equal_types, is_instance, subst_template_param): New
 	traits classes.
 	* mx-inlines.cc (op_dble_sum, twosum_accum): New helper funcs.
 	(mx_inline_dsum, mx_inline_xsum): New reduction loops.
 	* fNDArray.cc (FloatNDArray::dsum): New method.
 	* fNDArray.h: Declare it.
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -536,16 +536,36 @@ idx_vector::is_cont_range (octave_idx_ty
       break;
     default:
       break;
     }
 
   return res;
 }
 
+octave_idx_type
+idx_vector::increment (void) const
+{
+  octave_idx_type retval = 0;
+  switch (rep->idx_class ())
+    {
+    case class_colon:
+      retval = 1;
+    case class_range:
+      retval = dynamic_cast<idx_range_rep *> (rep) -> get_step ();
+      break;
+    case class_vector:
+      {
+        if (length (0) > 1)
+          retval = elem (1) - elem (0);
+      }
+    }
+  return retval;
+}
+
 void
 idx_vector::copy_data (octave_idx_type *data) const
 {
   octave_idx_type len = rep->length (0);
 
   switch (rep->idx_class ())
     {
     case class_colon:
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -791,16 +791,20 @@ public:
 
   // If the next index can be reduced, returns true and updates this.
   bool maybe_reduce (octave_idx_type n, const idx_vector& j,
                      octave_idx_type nj);
 
   bool is_cont_range (octave_idx_type n,
                       octave_idx_type& l, octave_idx_type& u) const;
 
+  // Returns the increment for ranges and colon, 0 for scalars and empty
+  // vectors, 1st difference otherwise.
+  octave_idx_type increment (void) const;
+
   idx_vector
   complement (octave_idx_type n) const;
 
   bool is_permutation (octave_idx_type n) const;
 
   // Copies all the indices to a given array. Not allowed for colons.
   void copy_data (octave_idx_type *data) const;
 
diff --git a/liboctave/oct-sort.cc b/liboctave/oct-sort.cc
--- a/liboctave/oct-sort.cc
+++ b/liboctave/oct-sort.cc
@@ -1914,17 +1914,16 @@ octave_sort<T>::lookupm (const T *data, 
     if (compare == descending_compare)
       lookupm (data, nel, values, nvalues, idx, std::greater<T> ());
   else
 #endif
     if (compare)
       lookupm (data, nel, values, nvalues, idx, std::ptr_fun (compare));
 }
 
-#include <iostream>
 template <class T> template <class Comp>
 void 
 octave_sort<T>::lookupb (const T *data, octave_idx_type nel,
                          const T *values, octave_idx_type nvalues,
                          bool *match, Comp comp)
 {
   // Check whether we're comparing two sorted arrays, comparable in size.
   if (nvalues >= ratio * nel / xlog2 (nel + 1.0) 
@@ -1978,16 +1977,63 @@ octave_sort<T>::lookupb (const T *data, 
     if (compare == descending_compare)
       lookupb (data, nel, values, nvalues, match, std::greater<T> ());
   else
 #endif
     if (compare)
       lookupb (data, nel, values, nvalues, match, std::ptr_fun (compare));
 }
 
+template <class T> template <class Comp>
+void 
+octave_sort<T>::nth_element (T *data, octave_idx_type nel,
+                             octave_idx_type lo, octave_idx_type up,
+                             Comp comp)
+{
+  // Simply wrap the STL algorithms.
+  // FIXME: this will fail if we attempt to inline <,> for Complex.
+  if (up == lo+1)
+    std::nth_element (data, data + lo, data + nel, comp);
+  else if (lo == 0)
+    std::partial_sort (data, data + up, data + nel, comp);
+  else
+    {
+      std::nth_element (data, data + lo, data + nel, comp);
+      if (up == lo + 2)
+        {
+          // Finding two subsequent elements.
+          std::swap (data[lo+1], 
+                     *std::min_element (data + lo + 1, data + nel, comp));
+        }
+      else
+        std::partial_sort (data + lo + 1, data + up, data + nel, comp);
+    }
+}
+
+template <class T>
+void 
+octave_sort<T>::nth_element (T *data, octave_idx_type nel,
+                             octave_idx_type lo, octave_idx_type up)
+{
+  if (up < 0)
+    up = lo + 1;
+#ifdef INLINE_ASCENDING_SORT
+  if (compare == ascending_compare)
+    nth_element (data, nel, lo, up, std::less<T> ());
+  else
+#endif
+#ifdef INLINE_DESCENDING_SORT    
+    if (compare == descending_compare)
+      nth_element (data, nel, lo, up, std::greater<T> ());
+  else
+#endif
+    if (compare)
+      nth_element (data, nel, lo, up, std::ptr_fun (compare));
+}
+
 template <class T>
 bool 
 octave_sort<T>::ascending_compare (typename ref_param<T>::type x,
 				   typename ref_param<T>::type y)
 {
   return x < y;
 }
 
diff --git a/liboctave/oct-sort.h b/liboctave/oct-sort.h
--- a/liboctave/oct-sort.h
+++ b/liboctave/oct-sort.h
@@ -154,16 +154,21 @@ public:
                 const T* values, octave_idx_type nvalues,
                 octave_idx_type *idx);
 
   // Lookup an array of values, only indicating exact matches.
   void lookupb (const T *data, octave_idx_type nel,
                 const T* values, octave_idx_type nvalues,
                 bool *match);
 
+  // Rearranges the array so that the elements with indices
+  // lo..up-1 are in their correct place. 
+  void nth_element (T *data, octave_idx_type nel,
+                    octave_idx_type lo, octave_idx_type up = -1);
+
   static bool ascending_compare (typename ref_param<T>::type,
 				 typename ref_param<T>::type);
 
   static bool descending_compare (typename ref_param<T>::type,
 				  typename ref_param<T>::type);
 
 private:
 
@@ -317,16 +322,21 @@ private:
   void lookupm (const T *data, octave_idx_type nel,
                 const T* values, octave_idx_type nvalues,
                 octave_idx_type *idx, Comp comp);
 
   template <class Comp>
   void lookupb (const T *data, octave_idx_type nel,
                 const T* values, octave_idx_type nvalues,
                 bool *match, Comp comp);
+
+  template <class Comp>
+  void nth_element (T *data, octave_idx_type nel,
+                    octave_idx_type lo, octave_idx_type up,
+                    Comp comp);
 };
 
 template <class T>
 class
 vec_index
 {
 public:
   T vec;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2009-10-14  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov.cc (octave_value::octave_value (const Array<std::string>&)): New
+	constructor.
+	* ov.h: Declare it.
+	* data.cc (Fnth_element): New DEFUN.
+
 2009-10-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (Fcumsum, Fcumprod, Fprod, Fsum, Fsumsq): Correct help
 	string.
 
 2009-10-13  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (Fsum): Rewrite.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -6148,16 +6148,98 @@ This function does not yet support spars
         error ("issorted: second argument must be \"rows\"");
     }
   else
     print_usage ();
 
   return retval;
 }
 
+DEFUN (nth_element, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} nth_element (@var{x}, @var{n})\n\
+@deftypefnx {Built-in Function} {} nth_element (@var{x}, @var{n}, @var{dim})\n\
+Select the n-th smallest element of a vector, using the ordering defined by @code{sort}.\n\
+In other words, the result is equivalent to @code{sort(@var{x})(@var{n})}.\n\
+@var{n} can also be a contiguous range, either ascending @code{l:u}\n\
+or descending @code{u:-1:l}, in which case a range of elements is returned.\n\
+If @var{x} is an array, @code{nth_element} operates along the dimension defined by @var{dim},\n\
+or the first non-singleton dimension if @var{dim} is not given.\n\
+\n\
+nth_element encapsulates the C++ STL algorithms nth_element and partial_sort.\n\
+On average, the complexity of the operation is O(M*log(K)), where\n\
+@code{M = size(@var{x}, @var{dim})} and @code{K = length (@var{n})}.\n\
+This function is intended for cases where the ratio K/M is small; otherwise,\n\
+it may be better to use @code{sort}.\n\
+@seealso{sort, min, max}\n\
+@end deftypefn")
+{
+  octave_value retval;
+  int nargin = args.length ();
+
+  if (nargin == 2 || nargin == 3)
+    {
+      octave_value argx = args(0);
+
+      int dim = -1;
+      if (nargin == 3)
+        {
+          dim = args(2).int_value (true) - 1;
+          if (dim < 0 || dim >= argx.ndims ())
+            error ("nth_element: dim must be a valid dimension");
+        }
+      if (dim < 0)
+        dim = argx.dims ().first_non_singleton ();
+
+      idx_vector n = args(1).index_vector ();
+
+      if (error_state)
+        return retval;
+
+      switch (argx.builtin_type ())
+        {
+        case btyp_double:
+          retval = argx.array_value ().nth_element (n, dim);
+          break;
+        case btyp_float:
+          retval = argx.float_array_value ().nth_element (n, dim);
+          break;
+        case btyp_complex:
+          retval = argx.complex_array_value ().nth_element (n, dim);
+          break;
+        case btyp_float_complex:
+          retval = argx.float_complex_array_value ().nth_element (n, dim);
+          break;
+#define MAKE_INT_BRANCH(X) \
+        case btyp_ ## X: \
+          retval = argx.X ## _array_value ().nth_element (n, dim); \
+          break
+
+        MAKE_INT_BRANCH (int8);
+        MAKE_INT_BRANCH (int16);
+        MAKE_INT_BRANCH (int32);
+        MAKE_INT_BRANCH (int64);
+        MAKE_INT_BRANCH (uint8);
+        MAKE_INT_BRANCH (uint16);
+        MAKE_INT_BRANCH (uint32);
+        MAKE_INT_BRANCH (uint64);
+#undef MAKE_INT_BRANCH
+        default:
+          if (argx.is_cellstr ())
+            retval = argx.cellstr_value ().nth_element (n, dim);
+          else
+            gripe_wrong_type_arg ("nth_element", argx);
+        }
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
 template <class NDT>
 static NDT 
 do_accumarray_sum (const idx_vector& idx, const NDT& vals,
                    octave_idx_type n = -1)
 {
   typedef typename NDT::element_type T;
   if (n < 0)
     n = idx.extent (0);
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1073,16 +1073,22 @@ octave_value::octave_value (const idx_ve
       assert (false);
       break;
     }
 
   // FIXME: needed?
   maybe_mutate ();
 }
 
+octave_value::octave_value (const Array<std::string>& cellstr)
+  : rep (new octave_cell (cellstr))
+{
+  maybe_mutate ();
+}
+
 octave_value::octave_value (double base, double limit, double inc)
   : rep (new octave_range (base, limit, inc))
 {
   maybe_mutate ();
 }
 
 octave_value::octave_value (const Range& r)
   : rep (new octave_range (r))
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -265,16 +265,17 @@ public:
   octave_value (const uint16NDArray& inda);
   octave_value (const ArrayN<octave_uint16>& inda);
   octave_value (const uint32NDArray& inda);
   octave_value (const ArrayN<octave_uint32>& inda);
   octave_value (const uint64NDArray& inda);
   octave_value (const ArrayN<octave_uint64>& inda);
   octave_value (const Array<octave_idx_type>& inda, 
                 bool zero_based = false, bool cache_index = false);
+  octave_value (const Array<std::string>& cellstr);
   octave_value (const idx_vector& idx);
   octave_value (double base, double limit, double inc);
   octave_value (const Range& r);
   octave_value (const Octave_map& m);
   octave_value (const Octave_map& m, const std::string& id);
   octave_value (const octave_value_list& m, bool is_cs_list = false);
   octave_value (octave_value::magic_colon);
 
