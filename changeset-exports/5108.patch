# HG changeset patch
# User jwe
# Date 1106078710 0
#      Tue Jan 18 20:05:10 2005 +0000
# Node ID 10004c9625c379f87c647a9f0a6efd78da7eb7a4
# Parent  c891dd97b837fd681ff6b7c8991dfd665f5685bd
[project @ 2005-01-18 20:05:10 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1051,27 +1051,25 @@ Array<T>::insert (const Array<T>& a, con
 		("Array<T>::insert: range error for insert");
 	      return *this;
 	    }
 	}
 
       if (dva.numel ())
         {
 	  const T *a_data = a.data ();   
-	  int numel_to_move = dva (0);
-	  int skip = dv (0);
-	  for (int i = 0; i < len_a - 1; i++)
+	  int numel_to_move = 1;
+	  int skip = 0;
+	  for (int i = 0; i < len_a; i++) 
 	    if (ra_idx(i) == 0 && dva(i) == dv(i))
-	      {
-		numel_to_move *= dva(i+1);
-		skip *= dv(i+1);
-	      }
+	      numel_to_move *= dva(i);
 	    else
 	      {
-		skip -= dva(i);
+		skip = numel_to_move * (dv(i) - dva(i));
+		numel_to_move *= dva(i);
 		break;
 	      }
 
 	  int jidx = ra_idx (n - 1);
 	  for (int i = n-2; i >= 0; i--)
 	    {
 	      jidx *= dv (i);
 	      jidx += ra_idx (i);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,18 @@
+2005-01-18  David Bateman <dbateman@free.fr>
+
+	* Array.cc (Array<T>::insert (const Array<T>&, const Array<int>&)):
+	Modify calculation of number elements to skip between copied blocks.
+
+2005-01-18  John W. Eaton  <jwe@octave.org>
+
+	* idx-vector.cc (IDX_VEC_REP::freeze): Call warning handler, not
+	error handler, to warn about resizing.
+
 2004-12-27  Martin Dalecki  <martin@dalecki.de>
 
 	* Array.cc, ArrayN.cc, base-lu.cc, boolMatrix.cc, boolNDArray.cc,
 	Bounds.cc, CColVector.cc, CDiagMatrix.cc, chMatrix.cc,
 	chNDArray.cc, CMatrix.cc, CmplxAEPBAL.cc, CmplxCHOL.cc,
 	CmplxDET.cc, CmplxHESS.cc, CmplxLU.cc, CmplxQR.cc, CmplxQRP.cc,
 	CmplxSCHUR.cc, CmplxSVD.cc, CNDArray.cc, CollocWt.cc,
 	CRowVector.cc, DASPK.cc, DASRT.cc, DASSL.cc, dbleAEPBAL.cc,
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -580,21 +580,21 @@ IDX_VEC_REP::freeze (int z_len, const ch
 
 	      initialized = 0;
 	    }
 	  else
 	    {
 	      if (warn_resize && max_val >= z_len)
 		{
 		  if (tag)
-		    (*current_liboctave_error_handler)
+		    (*current_liboctave_warning_handler)
 		      ("resizing object with %s index = %d out of bounds",
 		       tag, max_val+1);
 		  else
-		    (*current_liboctave_error_handler)
+		    (*current_liboctave_warning_handler)
 		      ("resizing object with index = %d out of bounds",
 		       max_val+1);
 		}
 
 	      frozen_len = length (z_len);
 	    }
 	}
     }
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2005-01-18  John W. Eaton  <jwe@octave.org>
+
+	* linear-algebra/cross.m: Allocate idx1 before use.
+
 2004-12-08  Heikki Junes  <Heikki.Junes@hut.fi>
 
 	* statistics/base/range.m: Fix varargin usage.
 
 2004-12-02  Pascal A. Dupuis  <Pascal.Dupuis@esat.kuleuven.ac.be>
 
 	* strings/deblank.m: Remove all trailing whitespace (check with
 	isspace), not just SPC.
diff --git a/scripts/linear-algebra/cross.m b/scripts/linear-algebra/cross.m
--- a/scripts/linear-algebra/cross.m
+++ b/scripts/linear-algebra/cross.m
@@ -66,17 +66,17 @@ function z = cross (x, y, dim)
    else
      if (size (x) != 3)
        error ("cross: dimension dim must have 3 elements");
      endif
   endif
 
   nd = ndims (x);
   sz = size (x);
-  idx1 = cell ();
+  idx1 = cell (1, nd);
   for i = 1:nd
     idx1{i} = 1:sz(i);
   endfor
   idx2 = idx3 = idx1;
   idx1(dim) = 1;
   idx2(dim) = 2;
   idx3(dim) = 3;
 
