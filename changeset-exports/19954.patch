# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1426637776 14400
#      Tue Mar 17 20:16:16 2015 -0400
# Node ID b6061813a6939fa4dc84f0329846ca2019dfdb26
# Parent  ed51e17f6ccf1af6b98cf13dfb9ebd321beae2c1
always obtain gh_manager lock before accessing graphics objects

* Canvas.cc (Canvas::print, Canvas::updateCurrentPoint): Use
gh_manager::auto_lock before accessing object.
* Container.cc (Container::canvas): Likewise.
* ContextMenu.cc (ContextMenu::executeAt): Likewise.
* Figure.cc (hasUiControlChildren, hasUiMenuChildren): Likewise.
* GLCanvas.cc (GLCanvas::draw): Likewise.
* Object.cc (Object::objectDestroyed): Likewise.
* __init_qt__.cc (__init__, __shutdown__): Likewise.

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -86,29 +86,32 @@ void Canvas::setCursor (MouseMode mode)
           w->setCursor (origCursor);
           break;
         }
     }
 }
 
 void Canvas::print (const QString& file_cmd, const QString& term)
 {
+  gh_manager::auto_lock lock;
   graphics_object obj = gh_manager::get_object (m_handle);
 
   if (obj.valid_object ())
     {
       graphics_object figObj (obj.get_ancestor ("figure"));
 
       gl2ps_print (figObj, file_cmd.toStdString (), term.toStdString ());
     }
 }
 
 void Canvas::updateCurrentPoint(const graphics_object& fig,
                                 const graphics_object& obj, QMouseEvent* event)
 {
+  gh_manager::auto_lock lock;
+
   gh_manager::post_set (fig.get_handle (), "currentpoint",
                         Utils::figureCurrentPoint (fig, event), false);
 
   Matrix children = obj.get_properties ().get_children ();
   octave_idx_type num_children = children.numel ();
 
   for (int i = 0; i < num_children; i++)
     {
diff --git a/libgui/graphics/Container.cc b/libgui/graphics/Container.cc
--- a/libgui/graphics/Container.cc
+++ b/libgui/graphics/Container.cc
@@ -46,16 +46,17 @@ Container::Container (QWidget* xparent)
 Container::~Container (void)
 {
 }
 
 Canvas* Container::canvas (const graphics_handle& gh, bool xcreate)
 {
   if (! m_canvas && xcreate)
     {
+      gh_manager::auto_lock lock;
       graphics_object go = gh_manager::get_object (gh);
 
       if (go)
         {
           graphics_object fig = go.get_ancestor ("figure");
 
           m_canvas = Canvas::create (fig.get("renderer").string_value (),
                                      this, gh);
diff --git a/libgui/graphics/ContextMenu.cc b/libgui/graphics/ContextMenu.cc
--- a/libgui/graphics/ContextMenu.cc
+++ b/libgui/graphics/ContextMenu.cc
@@ -106,16 +106,17 @@ QWidget* ContextMenu::menu (void)
 }
 
 void ContextMenu::executeAt (const base_properties& props, const QPoint& pt)
 {
   graphics_handle h = props.get_uicontextmenu ();
 
   if (h.ok ())
     {
+      gh_manager::auto_lock lock;
       graphics_object go = gh_manager::get_object (h);
 
       if (go.valid_object ())
         {
           ContextMenu* cMenu =
             dynamic_cast<ContextMenu*> (Backend::toolkitObject (go));
 
           if (cMenu)
diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -55,32 +55,36 @@ namespace QtHandles
 {
 
 #define ABOUT_TEXT "<b>QtHandles</b> - a Qt-based toolkit for <a href=\"http://www.octave.org\">Octave</a>.<br><br>Copyright (C) 2011-2014 Michael Goffioul"
 
 DECLARE_GENERICEVENTNOTIFY_SENDER(MenuBar, QMenuBar);
 
 static bool hasUiControlChildren (const figure::properties& fp)
 {
+  gh_manager::auto_lock lock;
+
   Matrix kids = fp.get_all_children ();
 
   for (int i = 0; i < kids.numel (); i++)
     {
       graphics_object go (gh_manager::get_object (kids(i)));
 
       if (go && (go.isa ("uicontrol") || go.isa ("uipanel")
                  || go.isa ("uibuttongroup")))
         return true;
     }
 
   return false;
 }
 
 static bool hasUiMenuChildren (const figure::properties& fp)
 {
+  gh_manager::auto_lock lock;
+
   Matrix kids = fp.get_all_children ();
 
   for (int i = 0; i < kids.numel (); i++)
     {
       graphics_object go (gh_manager::get_object (kids(i)));
 
       if (go && go.isa ("uimenu"))
         return true;
diff --git a/libgui/graphics/GLCanvas.cc b/libgui/graphics/GLCanvas.cc
--- a/libgui/graphics/GLCanvas.cc
+++ b/libgui/graphics/GLCanvas.cc
@@ -44,16 +44,17 @@ GLCanvas::GLCanvas (QWidget* xparent, co
 }
 
 GLCanvas::~GLCanvas (void)
 {
 }
 
 void GLCanvas::draw (const graphics_handle& gh)
 {
+  gh_manager::auto_lock lock;
   graphics_object go = gh_manager::get_object (gh);
 
   if (go)
     {
       opengl_renderer r;
 
       r.set_viewport (width (), height ());
       r.draw(go);
diff --git a/libgui/graphics/Object.cc b/libgui/graphics/Object.cc
--- a/libgui/graphics/Object.cc
+++ b/libgui/graphics/Object.cc
@@ -151,16 +151,18 @@ void Object::beingDeleted (void)
 void Object::objectDestroyed (QObject* obj)
 {
   if (obj && obj == m_qobject)
     m_qobject = 0;
 }
 
 Object* Object::parentObject (const graphics_object& go)
 {
+  gh_manager::auto_lock lock;
+
   Object* parent = Backend::toolkitObject
     (gh_manager::get_object (go.get_parent ()));
 
   return parent;
 }
 
 Object* Object::fromQObject (QObject* obj)
 {
diff --git a/libgui/graphics/__init_qt__.cc b/libgui/graphics/__init_qt__.cc
--- a/libgui/graphics/__init_qt__.cc
+++ b/libgui/graphics/__init_qt__.cc
@@ -44,16 +44,18 @@ namespace QtHandles
 static bool qtHandlesInitialized = false;
 
 bool __init__ (void)
 {
   if (! qtHandlesInitialized)
     {
       if (qApp)
         {
+          gh_manager::auto_lock lock;
+
           qRegisterMetaType<graphics_object> ("graphics_object");
 
           gh_manager::enable_event_processing (true);
 
           graphics_toolkit tk (new Backend ());
           gtk_manager::load_toolkit (tk);
 
           octave_add_atexit_function ("__shutdown_qt__");
@@ -91,16 +93,18 @@ bool __init__ (void)
 
   return false;
 }
 
 bool __shutdown__ (void)
 {
   if (qtHandlesInitialized)
     {
+      gh_manager::auto_lock lock;
+
       octave_add_atexit_function ("__shutdown_qt__");
 
       gtk_manager::unload_toolkit ("qt");
 
       gh_manager::enable_event_processing (false);
 
       qtHandlesInitialized = false;
 
