# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1520462092 18000
#      Wed Mar 07 17:34:52 2018 -0500
# Node ID 2d68dc548561e89f0c35dd27d5e353021e3ff4db
# Parent  fa4e852dae1e0f9a5693d12444d10b4708090f42
use m_ prefix for member variables in unary op parser classes

* pt-unop.h, pt-unop.cc: Use m_ prefix for member variable names.

diff --git a/libinterp/parse-tree/pt-unop.cc b/libinterp/parse-tree/pt-unop.cc
--- a/libinterp/parse-tree/pt-unop.cc
+++ b/libinterp/parse-tree/pt-unop.cc
@@ -29,39 +29,39 @@ along with Octave; see the file COPYING.
 
 namespace octave
 {
   // Unary expressions.
 
   std::string
   tree_unary_expression::oper (void) const
   {
-    return octave_value::unary_op_as_string (etype);
+    return octave_value::unary_op_as_string (m_etype);
   }
 
   // Prefix expressions.
 
   tree_expression *
   tree_prefix_expression::dup (symbol_scope& scope) const
   {
     tree_prefix_expression *new_pe
-      = new tree_prefix_expression (op ? op->dup (scope) : nullptr,
-                                    line (), column (), etype);
+      = new tree_prefix_expression (m_op ? m_op->dup (scope) : nullptr,
+                                    line (), column (), m_etype);
 
     new_pe->copy_base (*this);
 
     return new_pe;
   }
 
   // Postfix expressions.
 
   tree_expression *
   tree_postfix_expression::dup (symbol_scope& scope) const
   {
     tree_postfix_expression *new_pe
-      = new tree_postfix_expression (op ? op->dup (scope) : nullptr,
-                                     line (), column (), etype);
+      = new tree_postfix_expression (m_op ? m_op->dup (scope) : nullptr,
+                                     line (), column (), m_etype);
 
     new_pe->copy_base (*this);
 
     return new_pe;
   }
 }
diff --git a/libinterp/parse-tree/pt-unop.h b/libinterp/parse-tree/pt-unop.h
--- a/libinterp/parse-tree/pt-unop.h
+++ b/libinterp/parse-tree/pt-unop.h
@@ -41,50 +41,50 @@ namespace octave
 
   class tree_unary_expression : public tree_expression
   {
   protected:
 
     tree_unary_expression (int l = -1, int c = -1,
                            octave_value::unary_op t
                            = octave_value::unknown_unary_op)
-      : tree_expression (l, c), op (nullptr), etype (t)  { }
+      : tree_expression (l, c), m_op (nullptr), m_etype (t)  { }
 
     tree_unary_expression (tree_expression *e, int l = -1, int c = -1,
                            octave_value::unary_op t
                            = octave_value::unknown_unary_op)
-      : tree_expression (l, c), op (e), etype (t) { }
+      : tree_expression (l, c), m_op (e), m_etype (t) { }
 
   public:
 
     // No copying!
 
     tree_unary_expression (const tree_unary_expression&) = delete;
 
     tree_unary_expression& operator = (const tree_unary_expression&) = delete;
 
-    ~tree_unary_expression (void) { delete op; }
+    ~tree_unary_expression (void) { delete m_op; }
 
     bool is_unary_expression (void) const { return true; }
 
-    bool has_magic_end (void) const { return (op && op->has_magic_end ()); }
+    bool has_magic_end (void) const { return (m_op && m_op->has_magic_end ()); }
 
-    tree_expression * operand (void) { return op; }
+    tree_expression * operand (void) { return m_op; }
 
     std::string oper (void) const;
 
-    octave_value::unary_op op_type (void) const { return etype; }
+    octave_value::unary_op op_type (void) const { return m_etype; }
 
   protected:
 
     // The operand for the expression.
-    tree_expression *op;
+    tree_expression *m_op;
 
     // The type of the expression.
-    octave_value::unary_op etype;
+    octave_value::unary_op m_etype;
   };
 
   // Prefix expressions.
 
   class tree_prefix_expression : public tree_unary_expression
   {
   public:
 
