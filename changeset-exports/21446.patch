# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1457986019 25200
#      Mon Mar 14 13:06:59 2016 -0700
# Node ID 822dc5a202c93266049e8a12c5a8466bb8d9812f
# Parent  de155ca994d44fc6601c24fd482d8654f24ef910
build: Fix C11 compliance detection to work with clang

* prog_c.m4 (OCTAVE_PROG_CC_C11): Use offsetof macro to provide an
integral constant expression that can be evaluated at compile-time
to work with stricter compilers (e.g. clang).

diff --git a/m4/prog_c.m4 b/m4/prog_c.m4
--- a/m4/prog_c.m4
+++ b/m4/prog_c.m4
@@ -27,16 +27,17 @@
 # option to output variable CC to make it so.  This macro tries
 # various options that select ISO C11 on some system or another.  It
 # considers the compiler to be in ISO C11 mode if it handles _Alignas,
 # _Alignof, _Noreturn, _Static_assert, UTF-8 string literals,
 # duplicate typedefs, and anonymous structures and unions.
 AC_DEFUN([OCTAVE_PROG_CC_C11],
 [_OCTAVE_C_STD_TRY([c11],
 [_OCTAVE_C_C99_TEST_HEADER[
+#include <stddef.h>
 // Check _Alignas.
 char _Alignas (double) aligned_as_double;
 char _Alignas (0) no_special_alignment;
 extern char aligned_as_int;
 char _Alignas (0) _Alignas (int) aligned_as_int;
 
 // Check _Alignof.
 enum
@@ -76,17 +77,22 @@ struct anonymous
     struct { int k; long int l; } w;
   };
   int m;
 } v1;
 ]],
 [_OCTAVE_C_C99_TEST_BODY[
   v1.i = 2;
   v1.w.k = 5;
-  _Static_assert (&v1.i == &v1.w.k, "Anonymous union alignment botch");
+  // FIXME: Octave-specific change, this feature test is modified from the
+  // original Autoconf source. The address-of operator is not an integral
+  // constant expression and cannot be used with _Static_assert.
+  _Static_assert (offsetof(struct anonymous, i)
+                  == offsetof(struct anonymous, w.k),
+                  "Anonymous union alignment botch");
 ]],
 dnl Try
 dnl GCC		-std=gnu11 (unused restrictive mode: -std=c11)
 dnl with extended modes being tried first.
 dnl
 dnl Do not try -qlanglvl=extc1x, because IBM XL C V12.1 (the latest version as
 dnl of September 2012) does not pass the C11 test.  For now, try extc1x when
 dnl compiling the C99 test instead, since it enables _Static_assert and
