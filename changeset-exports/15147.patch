# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1344633567 18000
#      Fri Aug 10 16:19:27 2012 -0500
# Node ID 98a65d9e426f322d06fc672c7a243ad328f5695a
# Parent  709e8928e68cb1f1c816557cd194beba3d80816a
Remove uneeded release overloads

* jit-typeinfo.cc (jit_typeinfo::jit_typeinfo): Remove overloads for scalar,
complex, and index release.

* pt-jit.cc (jit_convert::release_temp, jit_convert::release_dead_phi,
jit_convert::convert_llvm::visit): Only release when required.

diff --git a/src/interp-core/jit-typeinfo.cc b/src/interp-core/jit-typeinfo.cc
--- a/src/interp-core/jit-typeinfo.cc
+++ b/src/interp-core/jit-typeinfo.cc
@@ -1154,28 +1154,16 @@ jit_typeinfo::jit_typeinfo (llvm::Module
   release_fn.stash_name ("release");
 
   // release matrix
   fn = create_function (jit_convention::external, "octave_jit_release_matrix",
                         0, matrix);
   fn.add_mapping (engine, &octave_jit_release_matrix);
   release_fn.add_overload (fn);
 
-  // release scalar
-  fn = create_identity (scalar);
-  release_fn.add_overload (fn);
-
-  // release complex
-  fn = create_identity (complex);
-  release_fn.add_overload (fn);
-
-  // release index
-  fn = create_identity (index);
-  release_fn.add_overload (fn);
-
   // now for binary scalar operations
   add_binary_op (scalar, octave_value::op_add, llvm::Instruction::FAdd);
   add_binary_op (scalar, octave_value::op_sub, llvm::Instruction::FSub);
   add_binary_op (scalar, octave_value::op_mul, llvm::Instruction::FMul);
   add_binary_op (scalar, octave_value::op_el_mul, llvm::Instruction::FMul);
 
   add_binary_fcmp (scalar, octave_value::op_lt, llvm::CmpInst::FCMP_ULT);
   add_binary_fcmp (scalar, octave_value::op_le, llvm::CmpInst::FCMP_ULE);
diff --git a/src/interp-core/pt-jit.cc b/src/interp-core/pt-jit.cc
--- a/src/interp-core/pt-jit.cc
+++ b/src/interp-core/pt-jit.cc
@@ -1140,35 +1140,35 @@ jit_convert::release_temp (jit_block& ab
     {
       jit_instruction *instr = *iter;
 
       // check for temporaries that require release and live across
       // multiple blocks
       if (instr->needs_release ())
         {
           jit_block *fu_block = instr->first_use_block ();
-          if (fu_block && fu_block != &ablock)
+          if (fu_block && fu_block != &ablock && instr->needs_release ())
             temp.insert (instr);
         }
 
       if (isa<jit_call> (instr))
         {
           // place releases for temporary arguments
           for (size_t i = 0; i < instr->argument_count (); ++i)
             {
               jit_value *arg = instr->argument (i);
-              if (arg->needs_release ())
-                {
-                  jit_call *release = create<jit_call> (&jit_typeinfo::release,
-                                                        arg);
-                  release->infer ();
-                  ablock.insert_after (iter, release);
-                  ++iter;
-                  temp.erase (arg);
-                }
+              if (! arg->needs_release ())
+                continue;
+
+              jit_call *release = create<jit_call> (&jit_typeinfo::release,
+                                                    arg);
+              release->infer ();
+              ablock.insert_after (iter, release);
+              ++iter;
+              temp.erase (arg);
             }
         }
     }
 
   if (! temp.size () || ! isa<jit_error_check> (ablock.terminator ()))
     return;
 
   // FIXME: If we support try/catch or unwind_protect final_block may not be the
@@ -1197,16 +1197,19 @@ jit_convert::release_dead_phi (jit_block
       jit_use *use = phi->first_use ();
       if (phi->use_count () == 1 && isa<jit_assign> (use->user ()))
         {
           // instead of releasing on assign, release on all incomming branches,
           // this can get rid of casts inside loops
           for (size_t i = 0; i < phi->argument_count (); ++i)
             {
               jit_value *arg = phi->argument (i);
+              if (! arg->needs_release ())
+                continue;
+
               jit_block *inc = phi->incomming (i);
               jit_block *split = inc->maybe_split (*this, ablock);
               jit_terminator *term = split->terminator ();
               jit_call *release = create<jit_call> (jit_typeinfo::release, arg);
               release->infer ();
               split->insert_before (term, release);
             }
 
@@ -1506,17 +1509,18 @@ jit_convert::convert_llvm::visit (jit_as
       if (ol.valid ())
         assign.stash_llvm (ol.call (builder, new_value));
     }
 
   jit_value *overwrite = assign.overwrite ();
   if (isa<jit_assign_base> (overwrite))
     {
       const jit_function& ol = jit_typeinfo::get_release (overwrite->type ());
-      ol.call (builder, overwrite);
+      if (ol.valid ())
+        ol.call (builder, overwrite);
     }
 }
 
 void
 jit_convert::convert_llvm::visit (jit_argument&)
 {}
 
 void
