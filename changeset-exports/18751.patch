# HG changeset patch
# User Rik <rik@octave.org>
# Date 1400101184 25200
#      Wed May 14 13:59:44 2014 -0700
# Node ID b45d975aa38f4242170656285f4680376ef58296
# Parent  0eea9ccbae2221e2fa72c272b38693f2516370a5
Fix assert() segfaults with profiler (bug #39587, bug #39586).

* profiler.cc (profile_data_accumulator::tree_node::exit,
profile_data_accumulator::exit_function, ): Comment
out assert() statements which are not valid when profile is called
from within a function.

* profiler.cc (F__profiler_reset__, F__profiler_data__,
F__profiler_enable__): Use correct function name in Texinfo
docstring.

* profiler.cc (F__profiler_data__): define retval(1) first to
resize return vector just once.

diff --git a/libinterp/corefcn/profiler.cc b/libinterp/corefcn/profiler.cc
--- a/libinterp/corefcn/profiler.cc
+++ b/libinterp/corefcn/profiler.cc
@@ -103,18 +103,20 @@ profile_data_accumulator::tree_node::ent
 
   ++retval->calls;
   return retval;
 }
 
 profile_data_accumulator::tree_node*
 profile_data_accumulator::tree_node::exit (octave_idx_type fcn)
 {
-  assert (parent);
-  assert (fcn_id == fcn);
+  // FIXME: These assert statements don't make sense if profile() is called
+  //        from within a function hierarchy to begin with.  See bug #39587.
+  //  assert (parent);
+  //  assert (fcn_id == fcn);
 
   return parent;
 }
 
 void
 profile_data_accumulator::tree_node::build_flat (flat_profile& data) const
 {
   // If this is not the top-level node, update profile entry for this function.
@@ -127,17 +129,17 @@ profile_data_accumulator::tree_node::bui
 
       assert (parent);
       if (parent->fcn_id != 0)
         {
           entry.parents.insert (parent->fcn_id);
           data[parent->fcn_id - 1].children.insert (fcn_id);
         }
 
-      if (!entry.recursive)
+      if (! entry.recursive)
         for (const tree_node* i = parent; i; i = i->parent)
           if (i->fcn_id == fcn_id)
             {
               entry.recursive = true;
               break;
             }
     }
 
@@ -206,17 +208,17 @@ profile_data_accumulator::~profile_data_
 }
 
 void
 profile_data_accumulator::set_active (bool value)
 {
   if (value)
     {
       // Create a call-tree top-node if there isn't yet one.
-      if (!call_tree)
+      if (! call_tree)
         call_tree = new tree_node (0, 0);
 
       // Let the top-node be the active one.  This ensures we have a clean
       // fresh start collecting times.
       active_fcn = call_tree;
     }
   else
     {
@@ -248,32 +250,37 @@ profile_data_accumulator::enter_function
       fcn_idx = known_functions.size ();
       fcn_index[fcn] = fcn_idx;
     }
   else
     fcn_idx = pos->second;
 
   active_fcn = active_fcn->enter (fcn_idx);
   last_time = query_time ();
+
 }
 
 void
 profile_data_accumulator::exit_function (const std::string& fcn)
 {
   assert (call_tree);
-  assert (active_fcn != call_tree);
+  // FIXME: This assert statements doesn't make sense if profile() is called
+  //        from within a function hierarchy to begin with.  See bug #39587.
+  //assert (active_fcn != call_tree);
 
   // Usually, if we are disabled this function is not even called.  But the
   // call disabling the profiler is an exception.  So also check here
   // and only record the time if enabled.
   if (is_active ())
     add_current_time ();
 
   fcn_index_map::iterator pos = fcn_index.find (fcn);
-  assert (pos != fcn_index.end ());
+  // FIXME: This assert statements doesn't make sense if profile() is called
+  //        from within a function hierarchy to begin with.  See bug #39587.
+  //assert (pos != fcn_index.end ());
   active_fcn = active_fcn->exit (pos->second);
 
   // If this was an "inner call", we resume executing the parent function
   // up the stack.  So note the start-time for this!
   last_time = query_time ();
 }
 
 void
@@ -407,17 +414,17 @@ profile_data_accumulator::add_current_ti
   active_fcn->add_time (t - last_time);
 }
 
 profile_data_accumulator profiler;
 
 // Enable or disable the profiler data collection.
 DEFUN (__profiler_enable__, args, ,
        "-*- texinfo -*-\n\
-@deftypefn {Function File} __profiler_enable ()\n\
+@deftypefn {Function File} __profiler_enable__ ()\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   const int nargin = args.length ();
   if (nargin > 0)
     {
@@ -433,17 +440,17 @@ Undocumented internal function.\n\
   retval(0) = profiler.is_active ();
 
   return retval;
 }
 
 // Clear all collected profiling data.
 DEFUN (__profiler_reset__, args, ,
        "-*- texinfo -*-\n\
-@deftypefn {Function File} __profiler_reset ()\n\
+@deftypefn {Function File} __profiler_reset__ ()\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
   const int nargin = args.length ();
 
   if (nargin > 0)
     warning ("profiler_reset: ignoring extra arguments");
@@ -451,24 +458,25 @@ Undocumented internal function.\n\
   profiler.reset ();
 
   return retval;
 }
 
 // Query the timings collected by the profiler.
 DEFUN (__profiler_data__, args, nargout,
        "-*- texinfo -*-\n\
-@deftypefn {Function File} __profiler_data ()\n\
+@deftypefn {Function File} __profiler_data__ ()\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
   const int nargin = args.length ();
 
   if (nargin > 0)
     warning ("profiler_data: ignoring extra arguments");
 
-  retval(0) = profiler.get_flat ();
   if (nargout > 1)
     retval(1) = profiler.get_hierarchical ();
+  retval(0) = profiler.get_flat ();
 
   return retval;
 }
+
