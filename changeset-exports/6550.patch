# HG changeset patch
# User jwe
# Date 1177054826 0
#      Fri Apr 20 07:40:26 2007 +0000
# Node ID 1b7a6061a05dab6b172046b8f558eef6d55eacc7
# Parent  5a5a09d7deb88790f6027159cf3111a43e0f8383
[project @ 2007-04-20 07:40:26 by jwe]

diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -23,22 +23,30 @@ will work for real and complex scalar or
 
 The following functions are available for working with complex numbers.
 Each expects a single argument.  They are called @dfn{mapping functions}
 because when given a matrix argument, they apply the given function to
 each element of the matrix.
 
 @DOCSTRING(ceil)
 
+@DOCSTRING(cplxpair)
+
 @DOCSTRING(exp)
 
+@DOCSTRING(factor)
+
+@DOCSTRING(factorial)
+
 @DOCSTRING(fix)
 
 @DOCSTRING(floor)
 
+@DOCSTRING(fmod)
+
 @DOCSTRING(gcd)
 
 @DOCSTRING(lcm)
 
 @DOCSTRING(log)
 
 @DOCSTRING(log10)
 
@@ -47,18 +55,22 @@ each element of the matrix.
 @DOCSTRING(max)
 
 @DOCSTRING(min)
 
 @DOCSTRING(mod)
 
 @DOCSTRING(nextpow2)
 
+@DOCSTRING(nthroot)
+
 @DOCSTRING(pow2)
 
+@DOCSTRING(primes)
+
 @DOCSTRING(rem)
 
 @DOCSTRING(round)
 
 @DOCSTRING(sign)
 
 @DOCSTRING(sqrt)
 
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -194,16 +194,18 @@ Execute commands from @var{file}.  Exit 
 @end table
 
 Octave also includes several built-in variables that contain information
 about the command line, including the number of arguments and all of the
 options.
 
 @DOCSTRING(argv)
 
+@DOCSTRING(program_name)
+
 @DOCSTRING(program_invocation_name)
 
 Here is an example of using these functions to reproduce Octave's
 command line.
 
 @example
 printf ("%s", program_name ());
 for i = 1:nargin
@@ -265,16 +267,20 @@ If you start Octave in your home directo
 
 A message will be displayed as each of the startup files is read if you
 invoke Octave with the @code{--verbose} option but without the
 @code{--silent} option.
 
 Startup files may contain any valid Octave commands, including function
 definitions.
 
+@DOCSTRING(version)
+
+@DOCSTRING(ver)
+
 @node Quitting Octave
 @section Quitting Octave
 @cindex exiting octave
 @cindex quitting octave
 
 @DOCSTRING(quit)
 
 @DOCSTRING(atexit)
@@ -576,16 +582,18 @@ re-running chunks of commands from the h
 @DOCSTRING(EDITOR)
 
 @DOCSTRING(history_file)
 
 @DOCSTRING(history_size)
 
 @DOCSTRING(saving_history)
 
+@DOCSTRING(history_timestamp_format_string)
+
 @node Customizing readline
 @subsection Customizing @code{readline}
 
 @c FIXME -- need a brief description of the ~/.inputrc file here.
 
 @DOCSTRING(read_readline_init_file)
 
 @node Customizing the Prompt
diff --git a/doc/interpreter/data.txi b/doc/interpreter/data.txi
--- a/doc/interpreter/data.txi
+++ b/doc/interpreter/data.txi
@@ -33,16 +33,22 @@ to define a new data type for Octave.
 
 The standard built-in data types are real and complex scalars and
 matrices, ranges, character strings, and a data structure type.
 Additional built-in data types may be added in future versions.  If you
 need a specialized data type that is not currently provided as a
 built-in type, you are encouraged to write your own user-defined data
 type and contribute it for distribution in a future release of Octave.
 
+@DOCSTRING(class)
+
+@DOCSTRING(isa)
+
+@DOCSTRING(cast)
+
 @menu
 * Numeric Objects::             
 * Missing Data::                
 * String Objects::              
 * Data Structure Objects::      
 @end menu
 
 @node Numeric Objects
@@ -148,8 +154,10 @@ data structure type doesn't have rows or
 
 @DOCSTRING(size)
 
 @DOCSTRING(isempty)
 
 @DOCSTRING(sizeof)
 
 @DOCSTRING(size_equal)
+
+@DOCSTRING(squeeze)
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -148,16 +148,18 @@ for i = 1:n-1
 endfor
 @end group
 @end example
 
 @noindent
 particularly for large matrices because Octave does not have to
 repeatedly resize the result.
 
+@DOCSTRING(subsref)
+
 @DOCSTRING(sub2ind)
 
 @DOCSTRING(ind2sub)
 
 @node Calling Functions
 @section Calling Functions
 
 A @dfn{function} is a name for a particular calculation.  Because it has
@@ -550,16 +552,20 @@ True if @var{x} is greater than @var{y}.
 @opindex <>
 True if @var{x} is not equal to @var{y}.
 @end table
 
 String comparisons may also be performed with the @code{strcmp}
 function, not with the comparison operators listed above.
 @xref{Strings}.
 
+@DOCSTRING(isequal)
+
+@DOCSTRING(isequalwithequalnans)
+
 @node Boolean Expressions
 @section Boolean Expressions
 @cindex expressions, boolean
 @cindex boolean expressions
 @cindex expressions, logical
 @cindex logical expressions
 @cindex operators, boolean
 @cindex boolean operators
@@ -896,16 +902,18 @@ b = s
 @end example
 
 You can use an assignment anywhere an expression is called for.  For
 example, it is valid to write @code{x != (y = 1)} to set @code{y} to 1
 and then test whether @code{x} equals 1.  But this style tends to make
 programs hard to read.  Except in a one-shot program, you should rewrite
 it to get rid of such nesting of assignments.  This is never very hard.
 
+@DOCSTRING(subsasgn)
+
 @cindex increment operator
 @cindex decrement operator
 @cindex operators, increment
 @cindex operators, decrement
 
 @node Increment Ops
 @section Increment Operators
 
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -142,22 +142,28 @@ unexpectedly.
 @DOCSTRING(sighup_dumps_octave_core)
 
 @DOCSTRING(sigterm_dumps_octave_core)
 
 @DOCSTRING(default_save_options)
 
 @DOCSTRING(octave_core_file_options)
 
+@DOCSTRING(octave_core_file_limit)
+
+@DOCSTRING(octave_core_file_name)
+
 @DOCSTRING(save_precision)
 
 @DOCSTRING(save_header_format_string)
 
 @DOCSTRING(load)
 
+@DOCSTRING(native_float_format)
+
 @node C-Style I/O Functions
 @section C-Style I/O Functions
 
 Octave's C-style input and output functions provide most of the
 functionality of the C programming language's standard I/O library.  The
 argument lists for some of the input functions are slightly different,
 however, because Octave has no way of passing arguments by reference.
 
diff --git a/doc/interpreter/matrix.txi b/doc/interpreter/matrix.txi
--- a/doc/interpreter/matrix.txi
+++ b/doc/interpreter/matrix.txi
@@ -10,16 +10,17 @@ elements of a matrix meet some condition
 elements of a matrix.  For example, Octave can easily tell you if all
 the elements of a matrix are finite, or are less than some specified
 value.  Octave can also rotate the elements, extract the upper- or
 lower-triangular parts, or sort the columns of a matrix.
 
 @menu
 * Finding Elements and Checking Conditions::  
 * Rearranging Matrices::        
+* Applying a Function to an Array::
 * Special Utility Matrices::    
 * Famous Matrices::             
 @end menu
 
 @node Finding Elements and Checking Conditions
 @section Finding Elements and Checking Conditions
 
 The functions @code{any} and @code{all} are useful for determining
@@ -94,16 +95,18 @@ Note that in conditional contexts (like 
 @DOCSTRING(circshift)
 
 @DOCSTRING(shiftdim)
 
 @DOCSTRING(shift)
 
 @DOCSTRING(sort)
 
+@DOCSTRING(sortrows)
+
 Since the @code{sort} function does not allow sort keys to be specified,
 it can't be used to order the rows of a matrix according to the values
 of the elements in various columns@footnote{For example, to first sort
 based on the values in column 1, and then, for any values that are
 repeated in column 1, sort based on the values found in column 2, etc.}
 in a single call.  Using the second output, however, it is possible to
 sort all rows based on the values in a given column.  Here's an example
 that sorts the rows of a matrix based on the values in the second
@@ -115,24 +118,37 @@ a = [1, 2; 2, 3; 3, 1];
 [s, i] = sort (a (:, 2));
 a (i, :)
      @result{}  3  1
          1  2
          2  3
 @end group
 @end example
 
+@DOCSTRING(swap)
+
+@DOCSTRING(swapcols)
+
+@DOCSTRING(swaprows)
+
 @DOCSTRING(tril)
 
 @DOCSTRING(vec)
 
 @DOCSTRING(vech)
 
 @DOCSTRING(prepad)
 
+@DOCSTRING(blkdiag)
+
+@node Applying a Function to an Array
+@section Applying a Function to an Array
+
+@DOCSTRING(arrayfun)
+
 @node Special Utility Matrices
 @section Special Utility Matrices
 
 @DOCSTRING(eye)
 
 @DOCSTRING(ones)
 
 @DOCSTRING(zeros)
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -429,9 +429,13 @@ replaces the range expression with a sin
 @DOCSTRING(isvector)
 
 @DOCSTRING(isscalar)
 
 @DOCSTRING(issquare)
 
 @DOCSTRING(issymmetric)
 
+@DOCSTRING(isdefinite)
+
 @DOCSTRING(isbool)
+
+@DOCSTRING(isprime)
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -367,16 +367,17 @@ Plotting
 * Multiple Plots on One Page::  
 * Multiple Plot Windows::       
 * Interaction with gnuplot::    
 
 Matrix Manipulation
 
 * Finding Elements and Checking Conditions::  
 * Rearranging Matrices::        
+* Applying a Function to an Array::
 * Special Utility Matrices::    
 * Famous Matrices::             
 
 Arithmetic
 
 * Utility Functions::           
 * Complex Arithmetic::          
 * Trigonometry::                
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -83,16 +83,18 @@ The @sc{Matlab}-style two-dimensional pl
 @section Three-Dimensional Plotting
 
 @DOCSTRING(plot3)
 
 @DOCSTRING(mesh)
 
 @DOCSTRING(meshgrid)
 
+@DOCSTRING(ndgrid)
+
 @DOCSTRING(meshdom)
 
 @DOCSTRING(view)
 
 @node Manipulating Existing Plots
 @section Manipulating Existing Plots
 
 @DOCSTRING(axis)
diff --git a/doc/interpreter/set.txi b/doc/interpreter/set.txi
--- a/doc/interpreter/set.txi
+++ b/doc/interpreter/set.txi
@@ -5,16 +5,18 @@
 @node Sets
 @chapter Sets
 
 Octave has a limited set of functions for managing sets of data, where a
 set is defined as a collection unique elements.
 
 @DOCSTRING(create_set)
 
+@DOCSTRING(ismember)
+
 @DOCSTRING(unique)
 
 @DOCSTRING(union)
 
 @DOCSTRING(intersect)
 
 @DOCSTRING(complement)
 
diff --git a/doc/interpreter/stats.txi b/doc/interpreter/stats.txi
--- a/doc/interpreter/stats.txi
+++ b/doc/interpreter/stats.txi
@@ -32,16 +32,20 @@ you would like to help improve Octave in
 @DOCSTRING(kurtosis)
 
 @DOCSTRING(mahalanobis)
 
 @DOCSTRING(skewness)
 
 @c FIXME -- these need to be organized.
 
+@DOCSTRING(nchoosek)
+
+@DOCSTRING(perms)
+
 @DOCSTRING(values)
 
 @DOCSTRING(var)
 
 @DOCSTRING(table)
 
 @DOCSTRING(studentize)
 
diff --git a/doc/interpreter/system.txi b/doc/interpreter/system.txi
--- a/doc/interpreter/system.txi
+++ b/doc/interpreter/system.txi
@@ -144,16 +144,18 @@ about the status of files.
 @DOCSTRING(unlink)
 
 @DOCSTRING(readdir)
 
 @DOCSTRING(mkdir)
 
 @DOCSTRING(rmdir)
 
+@DOCSTRING(confirm_recursive_rmdir)
+
 @DOCSTRING(mkfifo)
 
 @DOCSTRING(umask)
 
 @DOCSTRING(stat)
 
 @DOCSTRING(lstat)
 
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -48,16 +48,18 @@ of these built-in symbols are constants 
 can be used and assigned just like all other variables, but their values
 are also used or changed automatically by Octave.
 
 Variables in Octave do not have fixed types, so it is possible to first
 store a numeric value in a variable and then to later use the same name
 to hold a string value in the same program.  Variables may not be used
 before they have been given a value.  Doing so results in an error.
 
+@DOCSTRING(isvarname)
+
 @menu
 * Global Variables::            
 * Persistent Variables::        
 * Status of Variables::         
 * Summary of Built-in Variables::  
 * Defaults from the Environment::  
 @end menu
 
diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -45,18 +45,18 @@ Flasterr (const octave_value_list& args_
 DEFUN_DLD (cellfun, args, nargout,
   " -*- texinfo -*-\n\
 @deftypefn {Lodable Function} {} cellfun (@var{name}, @var{c})\n\
 @deftypefnx {Lodable Function} {} cellfun (\"size\", @var{c}, @var{k})\n\
 @deftypefnx {Lodable Function} {} cellfun (\"isclass\", @var{c}, @var{class})\n\
 @deftypefnx {Lodable Function} {} cellfun (@var{func}, @var{c})\n\
 @deftypefnx {Lodable Function} {} cellfun (@var{func}, @var{c}, @var{d})\n\
 @deftypefnx {Lodable Function} {[@var{a}, @var{b}] =} cellfun (@dots{})\n\
-@deftypefnx {Lodable Function} {} cellfun (@dots{}, 'ErrorHandler',@var{errfunc})\n\
-@deftypefnx {Lodable Function} {} cellfun (@dots{}, 'UniformOutput',@var{val})\n\
+@deftypefnx {Lodable Function} {} cellfun (@dots{}, 'ErrorHandler', @var{errfunc})\n\
+@deftypefnx {Lodable Function} {} cellfun (@dots{}, 'UniformOutput', @var{val})\n\
 \n\
 Evaluate the function named @var{name} on the elements of the cell array\n\
 @var{c}.  Elements in @var{c} are passed on to the named function\n\
 individually.  The function @var{name} can be one of the functions\n\
 \n\
 @table @code\n\
 @item isempty\n\
 Return 1 for empty elements.\n\
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1943,17 +1943,17 @@ decode_subscripts (const char* name, con
 DEFUN (subsref, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} subsref (@var{val}, @var{idx})\n\
 Perform the subscripted element selection operation according to\n\
 the subscript specified by @var{idx}.\n\
 \n\
 The subscript @var{idx} is expected to be a structure array with\n\
 fields @samp{type} and @samp{subs}.  Valid values for @samp{type}\n\
-are @samp{\"()\"}, @samp{\"@{@}\", and @samp{\".\"}.\n\
+are @samp{\"()\"}, @samp{\"@{@}\"}, and @samp{\".\"}.\n\
 The @samp{subs} field may be either @samp{\":\"} or a cell array\n\
 of index values.\n\
 @seealso{subsasgn, substruct}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 2)
