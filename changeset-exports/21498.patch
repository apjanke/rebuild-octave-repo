# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1458369310 25200
#      Fri Mar 18 23:35:10 2016 -0700
# Node ID 9cb37fede0b66b02094dc83331fcf676ea99fd27
# Parent  2d71bb0011a08814b3ac412db4bb148c3bdd0be3
textscan: Compare pointers or sizes rather than their arithmetic difference

* textscan.cc (delimited_stream::refresh_buf) Compare pointers rather than
comparing their difference to zero.  (textscan::read_until,
textscan::skip_whitespace): Compare string lengths rather than comparing
their difference to zero.

diff --git a/libinterp/corefcn/textscan.cc b/libinterp/corefcn/textscan.cc
--- a/libinterp/corefcn/textscan.cc
+++ b/libinterp/corefcn/textscan.cc
@@ -280,23 +280,21 @@ delimited_stream::peek_undelim (void)
 
 int
 delimited_stream::refresh_buf (void)
 {
   if (eof ())
     return std::istream::traits_type::eof ();
 
   int retval;
-  int old_remaining = eob - idx;
-
-  if (old_remaining < 0)
-    {
-      idx = eob;
-      old_remaining = 0;
-    }
+
+  if (eob < idx)
+    idx = eob;
+
+  size_t old_remaining = eob - idx;
 
   octave_quit ();                       // allow ctrl-C
 
   if (old_remaining > 0)
     memmove (buf, idx, old_remaining);
 
   progress_marker -= idx - buf;         // where original idx would have been
   idx = buf;
@@ -328,17 +326,17 @@ delimited_stream::refresh_buf (void)
       delimited = true;
 
       for (last = eob - longest; last - buf >= 0; last--)
         {
           if (delims.find (*last) != std::string::npos)
             break;
         }
 
-      if (last - buf < 0)
+      if (last < buf)
         delimited = false;
 
       retval = 0;
     }
 
   // Ensure fast peek doesn't give valid char
   if (retval == std::istream::traits_type::eof ())
     *idx = '\0';      // FIXME - check that no TreatAsEmpty etc starts w. \0?
@@ -1854,19 +1852,19 @@ textscan::read_until (delimited_stream& 
                   ? is.get_undelim () : std::istream::traits_type::eof ());
 
       if (last != std::istream::traits_type::eof ())
         {
           retval = retval + static_cast<char> (last);
           for (int i = 0; i < delimiters.numel (); i++)
             {
               std::string delim = delimiters(i).string_value ();
-              int start = retval.length () - delim.length ();
-              if (start < 0)
-                start = 0;
+              size_t start = (retval.length () > delim.length ()
+                              ? retval.length () - delim.length ()
+                              : 0);
               std::string may_match = retval.substr (start);
               if (may_match == delim)
                 {
                   done = true;
                   retval = retval.substr (0, start);
                   break;
                 }
             }
@@ -2572,20 +2570,21 @@ textscan::skip_whitespace (delimited_str
                   std::string last = end_c.substr (end_c.size () - 1);
                   std::string may_match ("");
                   do
                     {           // find sequence ending with last char
                       scan_caret (is, last, dummy);
                       is.get_undelim ();        // (read   last  itself)
 
                       may_match = may_match + dummy + last;
-                      int start = may_match.length () - end_c.length ();
-                      if (start < 0)
-                        start = 0;
-                      may_match = may_match.substr (start);
+                      if (may_match.length () > end_c.length ())
+                        {
+                          size_t start = may_match.length () - end_c.length ();
+                          may_match = may_match.substr (start);
+                        }
                     }
                   while (may_match != end_c && is && ! is.eof ());
                 }
             }
           else  // wasn't really a comment; restore state
             {
               is.clear (state);
               is.seekg (pos);
