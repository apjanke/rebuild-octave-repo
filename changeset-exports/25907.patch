# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1538076392 -7200
#      Thu Sep 27 21:26:32 2018 +0200
# Node ID 0146d16055a81b346d2df3414e953cd26bc2e06d
# Parent  e980aef0e1dbafb631732e21c6716215c0278036
use signal/slot to give all gui dock widgets access to the command queue

* main-window.cc (handle_save_workspace_request): use new slot for adding
  a command object to the command queue;
  (handle_load_workspace_request): dito;
  (handle_clear_workspace_request): dito;
  (notice_settings): dito;
  (set_current_working_directory): dito;
  (execute_command_in_terminal): dito;
  (run_file_in_terminal): dito;
  (debug_continue): dito;
  (debug_step_into): dito;
  (debug_step_over): dito;
  (debug_step_out): dito;
  (debug_quit): dito;
  (closeEvent): dito;

* main-window.h: new slot queue_cmd

* octave-dock-widget.cc (octave_dock_widget): connect new signal for
  queueing a command object to the related new slot of the main window

* octave-dock-widget.h: new signal request_queue_cmd

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -374,49 +374,49 @@ namespace octave
     QString file
       = QFileDialog::getSaveFileName (this, tr ("Save Workspace As"), ".",
                                       nullptr, nullptr);
 
     if (! file.isEmpty ())
       {
         octave_cmd_builtin *cmd
                 = new octave_cmd_builtin (&Fsave, ovl (file.toStdString ()));
-        m_cmd_queue.add_cmd (cmd);
+        queue_cmd (cmd);
       }
   }
 
   void main_window::handle_load_workspace_request (const QString& file_arg)
   {
     QString file = file_arg;
 
     if (file.isEmpty ())
       file = QFileDialog::getOpenFileName (this, tr ("Load Workspace"), ".",
                                            nullptr, nullptr);
 
     if (! file.isEmpty ())
       {
         octave_cmd_builtin *cmd
             = new octave_cmd_builtin (&Fload, ovl (file.toStdString ()),
                                       0, octave_cmd_builtin::CMD_UPD_WORKSPACE);
-        m_cmd_queue.add_cmd (cmd);
+        queue_cmd (cmd);
       }
   }
 
   void main_window::handle_open_any_request (const QString& file_arg)
   {
     if (! file_arg.isEmpty ())
       octave_link::post_event (this, &main_window::open_any_callback,
                                file_arg.toStdString ());
   }
 
   void main_window::handle_clear_workspace_request (void)
   {
     octave_cmd_builtin *cmd
           = new octave_cmd_builtin (&Fclear, ovl ());
-    m_cmd_queue.add_cmd (cmd);
+    queue_cmd (cmd);
   }
 
   void main_window::handle_clear_command_window_request (void)
   {
     octave_link::post_event (this, &main_window::clear_command_window_callback);
   }
 
   void main_window::handle_clear_history_request (void)
@@ -797,17 +797,17 @@ namespace octave
     QString new_default_encoding
       = settings->value (ed_default_enc.key, ed_default_enc.def).toString ();
     if (new_default_encoding != m_default_encoding)
       {
         m_default_encoding = new_default_encoding;
         octave_cmd_builtin *cmd = new octave_cmd_builtin (
                                     &F__mfile_encoding__,
                                     ovl (m_default_encoding.toStdString ()));
-        m_cmd_queue.add_cmd (cmd);
+        queue_cmd (cmd);
       }
 
     // Set cursor blinking depending on the settings
     // Cursor blinking: consider old terminal related setting if not yet set
     // TODO: This pref. can be deprecated / removed if Qt adds support for
     //       getting the cursor blink preferences from all OS environments
     bool cursor_blinking;
 
@@ -916,17 +916,17 @@ namespace octave
     QString xdir = (dir.isEmpty () ? "." : dir);
 
     QFileInfo fileInfo (xdir);
 
     if (fileInfo.exists () && fileInfo.isDir ())
       {
         octave_cmd_builtin *cmd
                 = new octave_cmd_builtin (&Fcd, ovl (xdir.toStdString ()));
-        m_cmd_queue.add_cmd (cmd);
+        queue_cmd (cmd);
       }
   }
 
   void main_window::change_directory_up (void)
   {
     set_current_working_directory ("..");
   }
 
@@ -947,27 +947,27 @@ namespace octave
     if (index < 0)
       set_current_working_directory (dir);
   }
 
   void main_window::execute_command_in_terminal (const QString& command)
   {
     octave_cmd_exec *cmd = new octave_cmd_exec (command);
 
-    m_cmd_queue.add_cmd (cmd);
+    queue_cmd (cmd);
 
     if (focus_console_after_command ())
       focus_command_window ();
   }
 
   void main_window::run_file_in_terminal (const QFileInfo& info)
   {
     octave_cmd_eval *cmd = new octave_cmd_eval (info);
 
-    m_cmd_queue.add_cmd (cmd);
+    queue_cmd (cmd);
 
     if (focus_console_after_command ())
       focus_command_window ();
   }
 
   void main_window::handle_new_figure_request (void)
   {
     octave_link::post_event (this, &main_window::new_figure_callback);
@@ -1002,43 +1002,43 @@ namespace octave
     m_editor_window->handle_exit_debug_mode ();
 #endif
   }
 
   void main_window::debug_continue (void)
   {
     octave_cmd_debug *cmd
       = new octave_cmd_debug ("cont", m_suppress_dbg_location);
-    m_cmd_queue.add_cmd (cmd);
+    queue_cmd (cmd);
   }
 
   void main_window::debug_step_into (void)
   {
     octave_cmd_debug *cmd = new octave_cmd_debug ("in", m_suppress_dbg_location);
-    m_cmd_queue.add_cmd (cmd);
+    queue_cmd (cmd);
   }
 
   void main_window::debug_step_over (void)
   {
     octave_cmd_debug *cmd
       = new octave_cmd_debug ("step", m_suppress_dbg_location);
-    m_cmd_queue.add_cmd (cmd);
+    queue_cmd (cmd);
   }
 
   void main_window::debug_step_out (void)
   {
     octave_cmd_debug *cmd = new octave_cmd_debug ("out", m_suppress_dbg_location);
-    m_cmd_queue.add_cmd (cmd);
+    queue_cmd (cmd);
   }
 
   void main_window::debug_quit (void)
   {
     octave_cmd_debug *cmd
       = new octave_cmd_debug ("quit", m_suppress_dbg_location);
-    m_cmd_queue.add_cmd (cmd);
+    queue_cmd (cmd);
   }
 
   //
   // Functions related to file editing
   //
   // These are moved from editor to here for also using them when octave
   // is built without qscintilla
   //
@@ -1737,17 +1737,17 @@ namespace octave
 
     octave_link::post_event (this, &main_window::refresh_workspace_callback);
   }
 
   void main_window::closeEvent (QCloseEvent *e)
   {
     e->ignore ();
     octave_cmd_exec *cmd = new octave_cmd_exec ("exit");
-    m_cmd_queue.add_cmd (cmd);
+    queue_cmd (cmd);
   }
 
   // Main subroutine of the constructor
 
   void main_window::construct (void)
   {
     m_closing = false;   // flag for editor files when closed
 
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -263,16 +263,25 @@ namespace octave
     void set_screen_size (int ht, int wd);
 
     //! Handling the clipboard.
     //!@{
     void clipboard_has_changed (void);
     void clear_clipboard ();
     //!@}
 
+    //! Queue a command into the worker thread's command queue
+
+    void queue_cmd (octave_cmd *cmd)
+    {
+      m_cmd_queue.add_cmd (cmd);
+    }
+
+
+
     //! Returns a list of dock widgets.
 
     QList<octave_dock_widget *> get_dock_widget_list (void)
     {
       return dock_widget_list ();
     }
 
   private slots:
diff --git a/libgui/src/octave-dock-widget.cc b/libgui/src/octave-dock-widget.cc
--- a/libgui/src/octave-dock-widget.cc
+++ b/libgui/src/octave-dock-widget.cc
@@ -189,16 +189,19 @@ namespace octave
     connect (p, SIGNAL (settings_changed (const QSettings*)),
              this, SLOT (handle_settings (const QSettings*)));
 
     connect (p, SIGNAL (active_dock_changed (octave_dock_widget*,
                                              octave_dock_widget*)),
              this, SLOT (handle_active_dock_changed (octave_dock_widget*,
                                                      octave_dock_widget*)));
 
+    connect (this, SIGNAL (request_queue_cmd (octave_cmd*)),
+             p, SLOT (queue_cmd (octave_cmd*)));
+
     if (m_default_float_button != nullptr)
       {
         disconnect (m_default_float_button, 0, 0, 0);
         connect (m_default_float_button, SIGNAL (clicked (bool)),
                  this, SLOT (make_window (bool)));
       }
     connect (this, SIGNAL (queue_make_window ()),
              this, SLOT (make_window ()), Qt::QueuedConnection);
diff --git a/libgui/src/octave-dock-widget.h b/libgui/src/octave-dock-widget.h
--- a/libgui/src/octave-dock-widget.h
+++ b/libgui/src/octave-dock-widget.h
@@ -25,16 +25,18 @@ along with Octave; see the file COPYING.
 
 #include <QDockWidget>
 #include <QSettings>
 #include <QIcon>
 #include <QMainWindow>
 #include <QToolButton>
 #include <QMouseEvent>
 
+#include "octave-cmd.h"
+
 namespace octave
 {
 
   // The few decoration items common to both main window and variable editor.
 
   class label_dock_widget : public QDockWidget
   {
     Q_OBJECT
@@ -93,16 +95,18 @@ namespace octave
     //! widget, i.e the active dock widget has changed.
 
     void active_changed (bool active);
 
     void queue_make_window (void);
 
     void queue_make_widget (void);
 
+    void request_queue_cmd (octave_cmd *);
+
   protected:
 
     virtual void closeEvent (QCloseEvent *e);
 
     QWidget * focusWidget (void);
 
     bool event (QEvent *event);
 
