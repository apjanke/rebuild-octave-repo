# HG changeset patch
# User jwe
# Date 949548529 0
#      Thu Feb 03 03:28:49 2000 +0000
# Node ID 747a87bc85943ff5bd8a4be3294fe1f7b7a0b3f5
# Parent  c5600b44bef95510f04770c4b91c995c615956d5
[project @ 2000-02-03 03:28:49 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -8,16 +8,18 @@ 2000-02-02  John W. Eaton  <jwe@bevo.che
 
 	* TEMPLATE-INST/SLStack-sym.cc: Delete meaningless `extern
 	template' declarations.
 	* TEMPLATE-INST/Array-tc.cc: Ditto.
 
 	* TEMPLATE-INST/Map-fnc.cc: Don't try to instantiate goodCHptr or
 	CHptr_to_index here.
 	* TEMPLATE-INST/Map-tc.cc: Likewise.
+	* Map.h (CHNode::goodCHptr, CHNode::CHptr_to_index): Now member
+	functions.  Change all callers.
 
 	* load-save.cc (read_binary_file_header): Declare magic_len `const'.
 
 	* token.h (token::token (const token&), token::operator=):
 	Delete unnecessary definitions.
 
 	* oct-stream.cc (octave_stream::mode_as_string): Use
 	std::ios::binary, not std::ios::bin.
diff --git a/src/Map.cc b/src/Map.cc
--- a/src/Map.cc
+++ b/src/Map.cc
@@ -104,37 +104,19 @@ template <class C>
 void
 Map<C>::error (const std::string& msg) const
 {
   std::cerr << "Map: " << msg << "\n";
 }
 
 // CHMap class.
 
-// The nodes are linked together serially via a version of a trick
-// used in some vtables: odd pointers are actually links to the next
-// table entry.  Not terrible, but not wonderful either.
-
-template <class C>
-int
-goodCHptr (CHNode<C> *t)
-{
-  return (((X_CAST (unsigned, t)) & 1) == 0);
-}
-
 #define index_to_CHptr(i) (X_CAST (void *, (i << 1) + 1))
 
 template <class C>
-unsigned int
-CHptr_to_index (CHNode<C> *t)
-{
-  return (X_CAST (unsigned, t)) >> 1;
-}
-
-template <class C>
 CHMap<C>::CHMap (const C& dflt, unsigned int sz) : Map<C> (dflt)
 {
   tab = new CHNode<C>* [size = sz];
   for (unsigned int i = 0; i < size; ++i)
     tab[i] = static_cast<CHNode<C> *> (index_to_CHptr (i+1));
   count = 0;
 }
 
@@ -150,31 +132,31 @@ CHMap<C>::CHMap (const CHMap& a) : Map<C
 }
 
 template <class C>
 Pix
 CHMap<C>::seek (const std::string& key) const
 {
   unsigned int h = hash (key) % size;
 
-  for (CHNode<C> *t = tab[h]; goodCHptr (t); t = t->tl)
+  for (CHNode<C> *t = tab[h]; t->goodCHptr (); t = t->tl)
     if (key == t->hd)
       return Pix (t);
 
   return 0;
 }
 
 template <class C>
 C&
 CHMap<C>::operator [] (const std::string& item)
 {
   unsigned int h = hash (item) % size;
 
   CHNode<C> *t = 0;
-  for (t = tab[h]; goodCHptr (t); t = t->tl)
+  for (t = tab[h]; t->goodCHptr (); t = t->tl)
     if (item == t->hd)
       return t->cont;
 
   t = new CHNode<C> (item, def, tab[h]);
   tab[h] = t;
   ++count;
   return t->cont;
 }
@@ -182,17 +164,17 @@ CHMap<C>::operator [] (const std::string
 template <class C>
 void
 CHMap<C>::del (const std::string& key)
 {
   unsigned int h = hash (key) % size;
 
   CHNode<C> *t = tab[h];
   CHNode<C> *trail = t;
-  while (goodCHptr (t))
+  while (t->goodCHptr ())
     {
       if (key == t->hd)
 	{
 	  if (trail == t)
 	    tab[h] = t->tl;
 	  else
 	    trail->tl = t->tl;
 	  delete t;
@@ -207,48 +189,48 @@ CHMap<C>::del (const std::string& key)
 template <class C>
 void
 CHMap<C>::clear (void)
 {
   for (unsigned int i = 0; i < size; ++i)
     {
       CHNode<C> *p = tab[i];
       tab[i] = static_cast<CHNode<C> *> (index_to_CHptr (i+1));
-      while (goodCHptr (p))
+      while (p->goodCHptr ())
 	{
 	  CHNode<C> *nxt = p->tl;
 	  delete p;
 	  p = nxt;
 	}
     }
   count = 0;
 }
 
 template <class C>
 Pix
 CHMap<C>::first (void) const
 {
   for (unsigned int i = 0; i < size; ++i)
-    if (goodCHptr (tab[i]))
+    if (tab[i]->goodCHptr ())
       return Pix (tab[i]);
   return 0;
 }
 
 template <class C>
 void
 CHMap<C>::next (Pix& p) const
 {
   CHNode<C> *t = (static_cast<CHNode<C> *> (p))->tl;
-  if (goodCHptr (t))
+  if (t->goodCHptr ())
     p = Pix (t);
   else
     {
-      for (unsigned int i = CHptr_to_index (t); i < size; ++i)
+      for (unsigned int i = t->CHptr_to_index (); i < size; ++i)
 	{
-	  if (goodCHptr (tab[i]))
+	  if (tab[i]->goodCHptr ())
 	    {
 	      p =  Pix (tab[i]);
 	      return;
 	    }
 	}
       p = 0;
     }
 }
@@ -259,20 +241,20 @@ CHMap<C>::OK (void) const
 {
   int v = tab != 0;
   int n = 0;
 
   for (unsigned int i = 0; i < size; ++i)
     {
       CHNode<C> *p = 0;
 
-      for (p = tab[i]; goodCHptr (p); p = p->tl)
+      for (p = tab[i]; p->goodCHptr (); p = p->tl)
 	++n;
 
-      v &= CHptr_to_index (p) == i + 1;
+      v &= p->CHptr_to_index () == i + 1;
     }
 
   v &= count == n;
 
   if (! v)
     error ("invariant failure");
 
   return v;
diff --git a/src/Map.h b/src/Map.h
--- a/src/Map.h
+++ b/src/Map.h
@@ -90,16 +90,26 @@ struct CHNode
   C cont;
 
   CHNode (void) : tl (0), hd (), cont () { }
 
   CHNode (const std::string& h, const C& c, CHNode *t = 0)
     : tl (t), hd (h), cont (c) { }
 
   ~CHNode (void) { }
+
+  // The nodes are linked together serially via a version of a trick
+  // used in some vtables: odd pointers are actually links to the next
+  // table entry.  Not terrible, but not wonderful either.
+
+  int goodCHptr (void)
+    { return (((X_CAST (unsigned, t)) & 1) == 0); }
+
+  unsigned int CHptr_to_index (void)
+    { return (X_CAST (unsigned, t)) >> 1; }
 };
 
 #ifndef DEFAULT_INITIAL_CAPACITY
 #define DEFAULT_INITIAL_CAPACITY 8
 #endif
 
 template <class C>
 class CHMap : public Map<C>
