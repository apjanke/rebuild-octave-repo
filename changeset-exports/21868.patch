# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1465682843 14400
#      Sat Jun 11 18:07:23 2016 -0400
# Node ID e2796ea8feac551b2bf34224d0921f937b686237
# Parent  0cdfd6d230e66df668904576288378e128f432e9
* kpse.cc: Use iostream for debug messages.

diff --git a/liboctave/util/kpse.cc b/liboctave/util/kpse.cc
--- a/liboctave/util/kpse.cc
+++ b/liboctave/util/kpse.cc
@@ -26,16 +26,18 @@ along with Octave; see the file COPYING.
 
 */
 
 // This file should not include config.h.  It is only included in other
 // C++ source files that should have included config.h before including
 // this file.
 
 #include <map>
+#include <fstream>
+#include <iostream>
 #include <string>
 
 /* System defines are for non-Unix systems only.  (Testing for all Unix
    variations should be done in configure.)  Presently the defines used
    are: DOS OS2 WIN32.  I do not use any of these systems
    myself; if you do, I'd be grateful for any changes. --kb@mail.tug.org */
 
 /* If we have either DOS or OS2, we are DOSISH.  */
@@ -103,17 +105,16 @@ extern "C" {
 #include "lo-error.h"
 #include "oct-env.h"
 #include "oct-passwd.h"
 #include "str-vec.h"
 
 /* Header files that essentially all of our sources need, and
    that all implementations have.  We include these first, to help with
    NULL being defined multiple times.  */
-#include <cstdio>
 #include <cstdarg>
 #include <cstdlib>
 #include <cerrno>
 #include <cassert>
 
 #include <sys/types.h>
 #include <unistd.h>
 
@@ -148,68 +149,31 @@ extern "C" {
 #define ENV_SEP_STRING ":"
 #endif /* not DOS */
 #endif /* not ENV_SEP */
 
 #if ! defined (IS_ENV_SEP)
 #define IS_ENV_SEP(ch) ((ch) == ENV_SEP)
 #endif
 
-/* define PATH_MAX, the maximum length of a filename.  Since no such
-   limit may exist, it's preferable to dynamically grow filenames as
-   needed.  */
-
-/* Cheat and define this as a manifest constant no matter what, instead
-   of using pathconf.  I forget why we want to do this.  */
-
-#if ! defined (_POSIX_PATH_MAX)
-#define _POSIX_PATH_MAX 255
-#endif
-
-#if ! defined (PATH_MAX)
-#if defined (MAXPATHLEN)
-#define PATH_MAX MAXPATHLEN
-#else
-#define PATH_MAX _POSIX_PATH_MAX
-#endif
-#endif /* not PATH_MAX */
-
 /* If NO_DEBUG is defined (not recommended), skip all this.  */
 #if ! defined (NO_DEBUG)
 
 /* OK, we'll have tracing support.  */
 #define KPSE_DEBUG
 
 /* Test if a bit is on.  */
 #define KPSE_DEBUG_P(bit) (kpathsea_debug & (1 << (bit)))
 
 #define KPSE_DEBUG_STAT 0               /* stat calls */
-#define KPSE_DEBUG_HASH 1               /* hash lookups */
-#define KPSE_DEBUG_FOPEN 2              /* fopen/fclose calls */
-#define KPSE_DEBUG_PATHS 3              /* search path initializations */
-#define KPSE_DEBUG_EXPAND 4             /* path element expansion */
-#define KPSE_DEBUG_SEARCH 5             /* searches */
-#define KPSE_DEBUG_VARS 6               /* variable values */
+#define KPSE_DEBUG_EXPAND 1             /* path element expansion */
+#define KPSE_DEBUG_SEARCH 2             /* searches */
+#define KPSE_DEBUG_VARS 3               /* variable values */
 #define KPSE_LAST_DEBUG KPSE_DEBUG_VARS
 
-/* A printf for the debugging.  */
-#define DEBUGF_START() do { gnulib::fputs ("kdebug:", stderr)
-#define DEBUGF_END()        gnulib::fflush (stderr); } while (0)
-
-#define DEBUGF(str)                                                     \
-  DEBUGF_START (); gnulib::fputs (str, stderr); DEBUGF_END ()
-#define DEBUGF1(str, e1)                                                \
-  DEBUGF_START (); gnulib::fprintf (stderr, str, e1); DEBUGF_END ()
-#define DEBUGF2(str, e1, e2)                                            \
-  DEBUGF_START (); gnulib::fprintf (stderr, str, e1, e2); DEBUGF_END ()
-#define DEBUGF3(str, e1, e2, e3)                                        \
-  DEBUGF_START (); gnulib::fprintf (stderr, str, e1, e2, e3); DEBUGF_END ()
-#define DEBUGF4(str, e1, e2, e3, e4)                                    \
-  DEBUGF_START (); gnulib::fprintf (stderr, str, e1, e2, e3, e4); DEBUGF_END ()
-
 #endif /* not NO_DEBUG */
 
 #if defined (KPSE_DEBUG)
 static unsigned int kpathsea_debug = 0;
 #endif
 
 #if defined (WIN32) && ! defined (__MINGW32__)
 
@@ -219,28 +183,20 @@ static unsigned int kpathsea_debug = 0;
  *      Define symbols to identify the version of Unix this is.
  *      Define all the symbols that apply correctly.
  */
 
 #if ! defined (DOSISH)
 #define DOSISH
 #endif
 
-#if ! defined (MAXPATHLEN)
-#define MAXPATHLEN      _MAX_PATH
-#endif
-
 /* These have to be defined because our compilers treat __STDC__ as being
    defined (most of them anyway). */
 
 #define access  _access
-#define strdup  _strdup
-
-#define S_IFMT   _S_IFMT
-#define S_IFDIR  _S_IFDIR
 
 /* Define this so that winsock.h definitions don't get included when
    windows.h is...  For this to have proper effect, config.h must
    always be included before windows.h.  */
 #define _WINSOCKAPI_    1
 
 #include <windows.h>
 
@@ -256,27 +212,25 @@ static unsigned int kpathsea_debug = 0;
 /* Define common sorts of messages.  */
 
 /* This should be called only after a system call fails.  Don't exit
    with status 'errno', because that might be 256, which would mean
    success (exit statuses are truncated to eight bits).  */
 #define FATAL_PERROR(str) \
   do \
     { \
-      gnulib::fputs ("pathsearch: ", stderr); \
+      std::cerr << "pathsearch: "; \
       perror (str); exit (EXIT_FAILURE); \
     } \
   while (0)
 
 #define FATAL(str) \
   do \
     { \
-      gnulib::fputs ("pathsearch: fatal: ", stderr); \
-      gnulib::fputs (str, stderr); \
-      gnulib::fputs (".\n", stderr); \
+      std::cerr << "pathsearch: fatal: " << str << "." << std::endl; \
       exit (1); \
     } \
   while (0)
 
 #if ! defined (WIN32)
 static void xclosedir (DIR *d);
 #endif
 
@@ -319,38 +273,16 @@ static std::string kpse_expand_default (
 #include <ctime> /* for 'time' */
 
 static bool
 kpse_is_env_sep (char c)
 {
   return IS_ENV_SEP (c);
 }
 
-/* These routines just check the return status from standard library
-   routines and abort if an error happens.  */
-
-static FILE *
-xfopen (const std::string& filename, const char *mode)
-{
-  FILE *f;
-
-  assert (! filename.empty () && mode);
-
-  f = gnulib::fopen (filename.c_str (), mode);
-
-  if (! f)
-    FATAL_PERROR (filename.c_str ());
-
-  if (KPSE_DEBUG_P (KPSE_DEBUG_FOPEN))
-    DEBUGF3 ("fopen (%s, %s) => 0x%lx\n", filename.c_str (), mode,
-             reinterpret_cast<intptr_t> (f));
-
-  return f;
-}
-
 /* A way to step through a path, extracting one directory name at a
    time.  */
 
 class kpse_path_iterator
 {
 public:
 
   kpse_path_iterator (const std::string& p)
@@ -421,18 +353,18 @@ kpse_var_value (const std::string& var)
 
   std::string tmp = octave::sys::env::getenv (var);
 
   if (! tmp.empty ())
     ret = kpse_var_expand (tmp);
 
 #if defined (KPSE_DEBUG)
   if (KPSE_DEBUG_P (KPSE_DEBUG_VARS))
-    DEBUGF2 ("variable: %s = %s\n", var.c_str (),
-             tmp.empty () ? "(nil)" :  tmp.c_str ());
+    std::cerr << "kdebug: variable: " << var << " = "
+              << (tmp.empty () ? "(nil)" :  tmp) << std::endl;
 #endif
 
   return ret;
 }
 
 /* Truncate any too-long components in NAME, returning the result.  It's
    too bad this is necessary.  See comments in readable.c for why.  */
 
@@ -559,59 +491,25 @@ kpse_absolute_p (const std::string& file
 /* The very first search is for texmf.cnf, called when someone tries to
    initialize the TFM path or whatever.  init_path calls kpse_cnf_get
    which calls kpse_all_path_search to find all the texmf.cnf's.  We
    need to do various special things in this case, since we obviously
    don't yet have the configuration files when we're searching for the
    configuration files.  */
 static bool first_search = true;
 
-/* This function is called after every search (except the first, since
-   we definitely want to allow enabling the logging in texmf.cnf) to
-   record the filename(s) found in $TEXMFLOG.  */
+/* This function is called after every search.  */
 
 static void
 log_search (const std::list<std::string>& filenames)
 {
-  static FILE *log_file = 0;
-  static bool first_time = true; /* Need to open the log file?  */
-
-  if (first_time)
+  if (KPSE_DEBUG_P (KPSE_DEBUG_SEARCH))
     {
-      first_time = false;
-
-      /* Get name from either envvar or config file.  */
-      std::string log_name = kpse_var_value ("TEXMFLOG");
-
-      if (! log_name.empty ())
-        {
-          log_file = xfopen (log_name.c_str (), "a");
-
-          if (! log_file)
-            perror (log_name.c_str ());
-        }
-    }
-
-  if (KPSE_DEBUG_P (KPSE_DEBUG_SEARCH) || log_file)
-    {
-      /* FILENAMES should never be null, but safety doesn't hurt.  */
       for (const auto &filename : filenames)
-        {
-          /* Only record absolute filenames, for privacy.  */
-          if (log_file && kpse_absolute_p (filename.c_str (), false))
-            gnulib::fprintf (log_file, "%lu %s\n",
-                             static_cast<unsigned long> (time (0)),
-                             filename.c_str ());
-
-          /* And show them online, if debugging.  We've already started
-             the debugging line in 'search', where this is called, so
-             just print the filename here, don't use DEBUGF.  */
-          if (KPSE_DEBUG_P (KPSE_DEBUG_SEARCH))
-            gnulib::fputs (filename.c_str (), stderr);
-        }
+        std::cerr << time (0) << " " << filename << std::endl;
     }
 }
 
 /* Concatenate each element in DIRS with NAME (assume each ends with a
    /, to save time).  If SEARCH_ALL is false, return the first readable
    regular file.  Else continue to search for more.  In any case, if
    none, return a list containing just NULL.
 
@@ -750,18 +648,20 @@ search (const std::string& path, const s
   /* Make a leading ~ count as an absolute filename, and expand $FOO's.  */
   std::string name = kpse_expand (original_name);
 
   /* If the first name is absolute or explicitly relative, no need to
      consider PATH at all.  */
   absolute_p = kpse_absolute_p (name, true);
 
   if (KPSE_DEBUG_P (KPSE_DEBUG_SEARCH))
-    DEBUGF4 ("start search (file=%s, must_exist=%d, find_all=%d, path=%s).\n",
-             name.c_str (), must_exist, all, path.c_str ());
+    std::cerr << "kdebug: start search (file=" << name
+              << ", must_exist=" << must_exist
+              << ", find_all=" << all << ", path=" << path << ")."
+              << std::endl;
 
   /* Find the file(s). */
   ret_list = absolute_p ? absolute_search (name)
                         : path_search (path, name, must_exist, all);
 
   /* The very first search is for texmf.cnf.  We can't log that, since
      we want to allow setting TEXMFLOG in texmf.cnf.  */
   if (first_search)
@@ -769,22 +669,22 @@ search (const std::string& path, const s
       first_search = false;
     }
   else
     {
       /* Record the filenames we found, if desired.  And wrap them in a
          debugging line if we're doing that.  */
 
       if (KPSE_DEBUG_P (KPSE_DEBUG_SEARCH))
-        DEBUGF1 ("search (%s) =>", original_name.c_str ());
+        std::cerr << "kdebug: search (" << original_name << ") =>";
 
       log_search (ret_list);
 
       if (KPSE_DEBUG_P (KPSE_DEBUG_SEARCH))
-        gnulib::putc ('\n', stderr);
+        std::cerr << std::endl;
     }
 
   return ret_list;
 }
 
 /* Search PATH for the first NAME.  */
 
 /* Call 'kpse_expand' on NAME.  If the result is an absolute or
@@ -915,28 +815,28 @@ path_find_first_of (const std::string& p
 static std::list<std::string>
 find_first_of (const std::string& path, const std::list<std::string>& names,
                bool must_exist, bool all)
 {
   std::list<std::string> ret_list;
 
   if (KPSE_DEBUG_P (KPSE_DEBUG_SEARCH))
     {
-      gnulib::fputs ("start find_first_of ((", stderr);
+      std::cerr << "kdebug: start find_first_of ((";
 
       for (auto p = names.cbegin (); p != names.cend (); p++)
         {
           if (p == names.cbegin ())
-            gnulib::fputs (p->c_str (), stderr);
+            std::cerr << *p;
           else
-            gnulib::fprintf (stderr, ", %s", p->c_str ());
+            std::cerr << ", " << *p;
         }
 
-      gnulib::fprintf (stderr, "), path=%s, must_exist=%d).\n",
-                       path.c_str (), must_exist);
+      std::cerr << "), path=" << path << ", must_exist="
+                << must_exist << "." << std::endl;
     }
 
   for (const auto &name : names)
     {
       if (kpse_absolute_p (name, true))
         {
           /* If the name is absolute or explicitly relative, no need
              to consider PATH at all.  If we find something, then we
@@ -960,27 +860,27 @@ find_first_of (const std::string& path, 
     }
   else
     {
       /* Record the filenames we found, if desired.  And wrap them in a
          debugging line if we're doing that.  */
 
       if (KPSE_DEBUG_P (KPSE_DEBUG_SEARCH))
         {
-          gnulib::fputs ("find_first_of (", stderr);
+          std::cerr << "kdebug: find_first_of (";
 
           for (auto p = names.cbegin (); p != names.cend (); p++)
             {
               if (p == names.cbegin ())
-                gnulib::fputs (p->c_str (), stderr);
+                std:: cerr << *p;
               else
-                gnulib::fprintf (stderr, ", %s", p->c_str ());
+                std::cerr << ", " << *p;
             }
 
-          gnulib::fputs (") =>", stderr);
+          std::cerr << ") =>";
         }
 
       log_search (ret_list);
 
       if (KPSE_DEBUG_P (KPSE_DEBUG_SEARCH))
         gnulib::putc ('\n', stderr);
     }
 
@@ -1770,17 +1670,17 @@ dir_links (const std::string& fn)
   int retval;
 
   octave::sys::file_stat fs (fn);
 
   retval = fs && (fs.is_dir () ? fs.nlink () : -1);
 
 #if defined (KPSE_DEBUG)
   if (KPSE_DEBUG_P (KPSE_DEBUG_STAT))
-    DEBUGF2 ("dir_links (%s) => %ld\n", fn.c_str (), retval);
+    std::cerr << "kdebug: dir_links (" << fn << ") => " << retval << std::endl;
 #endif
 
   return retval;
 }
 
 #endif /* WIN32 */
 
 static inline void
@@ -1955,25 +1855,24 @@ kpse_element_dirs (const std::string& el
 
   /* Remember the directory list we just found, in case future calls are
      made with the same ELT.  */
   cache (elt, ret);
 
 #if defined (KPSE_DEBUG)
   if (KPSE_DEBUG_P (KPSE_DEBUG_EXPAND))
     {
-      DEBUGF1 ("path element %s =>", elt.c_str ());
+      std::cerr << "kdebug: path element " << elt << " =>";
       if (ret)
         {
           str_llist_elt_type *e;
           for (e = *ret; e; e = STR_LLIST_NEXT (*e))
-            gnulib::fprintf (stderr, " %s", (STR_LLIST (*e)).c_str ());
+            std::cerr << " " << STR_LLIST (*e);
         }
-      gnulib::putc ('\n', stderr);
-      gnulib::fflush (stderr);
+      std::cerr << std::endl;
     }
 #endif /* KPSE_DEBUG */
 
   return ret;
 }
 
 #if ! defined (WIN32)
 void
