# HG changeset patch
# User jwe
# Date 947128457 0
#      Thu Jan 06 03:14:17 2000 +0000
# Node ID 5e0a0b1cba437a52577cdbf9d727bbb193a24652
# Parent  772cc0f88f09182fc60b97336b6309a555697e66
[project @ 2000-01-06 03:13:55 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,104 @@
+2000-01-05  Ben Sapp <bsapp@nua.lampf.lanl.gov>
+
+	* io/printf.m: Add @seealso{...} to doc string.
+	* io/puts.m: Likewise.
+	* plot/semilogx.m: Likewise.
+	* plot/semilogy.m: Likewise.
+	* plot/__pltopt__.m: Likewise.
+	* plot/bar.m: Likewise.
+	* plot/xlabel.m: Likewise.
+	* plot/grid.m: Likewise.
+	* plot/shg.m: Likewise.
+	* plot/title.m: Likewise.
+	* plot/mesh.m: Likewise.
+	* plot/__pltopt1__.m: Likewise.
+	* plot/contour.m: Likewise.
+	* plot/hist.m: Likewise.
+	* plot/stairs.m: Likewise.
+	* plot/meshgrid.m: Likewise.
+	* plot/polar.m: Likewise.
+	* plot/loglog.m: Likewise.
+	* plot/plot.m: Likewise.
+	* miscellaneous/semicolon.m: Likewise.
+	* miscellaneous/menu.m: Likewise.
+	* miscellaneous/etime.m: Likewise.
+	* miscellaneous/texas_lotto.m: Likewise.
+	* miscellaneous/comma.m: Likewise.
+	* audio/lin2mu.m: Likewise.
+	* audio/playaudio.m: Likewise.
+	* audio/loadaudio.m: Likewise.
+	* audio/saveaudio.m: Likewise.
+	* audio/mu2lin.m: Likewise.
+	* audio/record.m: Likewise.
+	* strings/isletter.m: Likewise.
+	* strings/lower.m: Likewise.
+	* strings/lower.m: Likewise.
+	* strings/upper.m: Likewise.
+	* specfun/erfinv.m: Likewise.
+	* specfun/gammai.m: Likewise.
+	* specfun/log2.m: Likewise.
+	* specfun/pow2.m: Likewise.
+	* elfun/gcd.m: Likewise.
+	* elfun/lcm.m: Likewise.
+	* special-matrix/vander.m: Likewise.
+	* special-matrix/sylvester_matrix.m: Likewise.
+	* special-matrix/hilb.m: Likewise.
+	* special-matrix/hankel.m: Likewise.
+	* special-matrix/toeplitz.m: Likewise.
+	* special-matrix/invhilb.m: Likewise.
+	* statistics/base/std.m: Likewise.
+	* statistics/base/median.m: Likewise.
+	* linear-algebra/cond.m: Likewise.
+	* linear-algebra/norm.m: Likewise.
+	* finance/nper.m: Likewise.
+	* finance/pmt.m: Likewise.
+	* finance/pv.m: Likewise.
+	* finance/rate.m: Likewise.
+	* finance/npv.m: Likewise.
+	* general/fliplr.m: Likewise.
+	* general/flipud.m: Likewise.
+	* general/is_scalar.m: Likewise.
+	* general/rem.m: Likewise.
+	* general/perror.m: Likewise.
+	* general/tril.m: Likewise.
+	* general/rot90.m: Likewise.
+	* general/num2str.m: Likewise.
+	* general/int2str.m: Likewise.
+	* general/reshape.m: Likewise.
+	* general/logspace.m: Likewise.
+	* general/is_symmetric.m: Likewise.
+	* general/is_vector.m: Likewise.
+	* general/nextpow2.m: Likewise.
+	* general/columns.m: Likewise.
+	* general/is_square.m: Likewise.
+	* general/rows.m: Likewise.
+	* control/ugain.m: Likewise.
+	* control/damp.m: Likewise.
+	* control/dare.m: Likewise.
+	* control/are.m: Likewise.
+	* control/sys2fir.m: Likewise.
+	* control/abcddim.m: Likewise.
+	* control/is_abcd.m: Likewise.
+	* control/step.m: Likewise.
+	* control/is_observable.m: Likewise.
+	* control/is_controllable.m: Likewise.
+	* control/jet707.m: Likewise.
+	* control/polyout.m: Likewise.
+	* control/impulse.m: Likewise.
+	* control/lqg.m: Likewise.
+	* control/is_detectable.m: Likewise.
+	* control/sysdimensions.m: Likewise.
+	* control/sysupdate.m: Likewise.
+	* control/stepimp.m: Likewise.
+	* control/is_stable.m: Likewise.
+	* control/tfout.m: Likewise.
+	* control/zpout.m: Likewise.
+
 2000-01-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* set/complement.m: Add @seealso{} stuff.
 	* set/create_set.m: Likewise.
 	* set/intersection.m: Likewise.
 	* set/union.m: Likewise.
 
 1999-12-22  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/scripts/audio/lin2mu.m b/scripts/audio/lin2mu.m
--- a/scripts/audio/lin2mu.m
+++ b/scripts/audio/lin2mu.m
@@ -18,18 +18,17 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} lin2mu (@var{x})
 ## If the vector @var{x} represents mono audio data in 8- or 16-bit
 ## linear encoding, @code{lin2mu (@var{x})} is the corresponding mu-law
 ## encoding.
 ## @end deftypefn
-
-## See also: mu2lin, loadaudio, saveaudio, playaudio, setaudio, record
+## @seealso{mu2lin, loadaudio, saveaudio, playaudio, setaudio, record}
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 17 October 1994
 ## Adapted-By: jwe
 
 function y = lin2mu (x)
 
   if (nargin != 1)
diff --git a/scripts/audio/loadaudio.m b/scripts/audio/loadaudio.m
--- a/scripts/audio/loadaudio.m
+++ b/scripts/audio/loadaudio.m
@@ -25,18 +25,17 @@
 ## The extension @var{ext} determines how the data in the audio file is
 ## interpreted;  the extensions @file{lin} (default) and @file{raw}
 ## correspond to linear, the extensions @file{au}, @file{mu}, or @file{snd}
 ## to mu-law encoding.
 ## 
 ## The argument @var{bps} can be either 8 (default) or 16, and specifies
 ## the number of bits per sample used in the audio file.
 ## @end deftypefn
-
-## See also: lin2mu, mu2lin, saveaudio, playaudio, setaudio, record
+## @seealso{lin2mu, mu2lin, saveaudio, playaudio, setaudio, record}
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 10 April 1994
 ## Adapted-By: jwe
 
 function X = loadaudio (name, ext, bit)
 
   if (nargin == 0 || nargin > 3)
diff --git a/scripts/audio/mu2lin.m b/scripts/audio/mu2lin.m
--- a/scripts/audio/mu2lin.m
+++ b/scripts/audio/mu2lin.m
@@ -19,18 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} mu2lin (@var{x}, @var{bps})
 ## If the vector @var{x} represents mono audio data in mu-law encoding,
 ## @code{mu2lin} converts it to linear encoding.  The optional argument
 ## @var{bps} specifies whether the input data uses 8 bit per sample
 ## (default) or 16 bit.
 ## @end deftypefn
-
-## See also: lin2mu, loadaudio, saveaudio, playaudio, setaudio, record
+## @seealso{lin2mu, loadaudio, saveaudio, playaudio, setaudio, record}
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 18 October 1994
 ## Adapted-By: jwe
 
 function y = mu2lin (x, bit)
 
   if (nargin == 1)
diff --git a/scripts/audio/playaudio.m b/scripts/audio/playaudio.m
--- a/scripts/audio/playaudio.m
+++ b/scripts/audio/playaudio.m
@@ -18,18 +18,17 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} playaudio (@var{name}, @var{ext})
 ## @deftypefnx {Function File} {} playaudio (@var{x})
 ## Plays the audio file @file{@var{name}.@var{ext}} or the audio data
 ## stored in the vector @var{x}.
 ## @end deftypefn
-
-## See also: lin2mu, mu2lin, loadaudio, saveaudio, setaudio, record
+## @seealso{lin2mu, mu2lin, loadaudio, saveaudio, setaudio, record}
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 11 April 1994
 ## Adapted-By: jwe
 
 function playaudio (name, ext)
 
   usage_msg = "playaudio (name [, ext])  or  playaudio (X)";
diff --git a/scripts/audio/record.m b/scripts/audio/record.m
--- a/scripts/audio/record.m
+++ b/scripts/audio/record.m
@@ -19,18 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} record (@var{sec}, @var{sampling_rate})
 ## Records @var{sec} seconds of audio input into the vector @var{x}.  The
 ## default value for @var{sampling_rate} is 8000 samples per second, or
 ## 8kHz.  The program waits until the user types @key{RET} and then
 ## immediately starts to record.
 ## @end deftypefn
-
-## See also: lin2mu, mu2lin, loadaudio, saveaudio, playaudio, setaudio
+## @seealso{lin2mu, mu2lin, loadaudio, saveaudio, playaudio, setaudio}
 
 ## usage:  X = record (sec [, sampling_rate])
 ##
 ## Records sec seconds of audio into the vector X.
 ## The default value for the sampling_rate is 8000, ie. 8kHz.
 ## The program waits for you to hit the ENTER key, then the recording
 ## starts immediatly.
 
diff --git a/scripts/audio/saveaudio.m b/scripts/audio/saveaudio.m
--- a/scripts/audio/saveaudio.m
+++ b/scripts/audio/saveaudio.m
@@ -20,18 +20,17 @@
 ## -*- texinfo -*- 
 ## @deftypefn {Function File} {} saveaudio (@var{name}, @var{x}, @var{ext}, @var{bps})
 ## Saves a vector @var{x} of audio data to the file
 ## @file{@var{name}.@var{ext}}.  The optional parameters @var{ext} and
 ## @var{bps} determine the encoding and the number of bits per sample used
 ## in the audio file (see @code{loadaudio});  defaults are @file{lin} and
 ## 8, respectively.
 ## @end deftypefn
-
-## See also: lin2mu, mu2lin, loadaudio, playaudio, setaudio, record
+## @seealso{lin2mu, mu2lin, loadaudio, playaudio, setaudio, record}
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 5 September 1994
 ## Adapted-By: jwe
 
 function saveaudio (name, X, ext, bit)
 
   if (nargin < 2 || nargin > 4)
diff --git a/scripts/control/abcddim.m b/scripts/control/abcddim.m
--- a/scripts/control/abcddim.m
+++ b/scripts/control/abcddim.m
@@ -53,18 +53,18 @@
 ## @item p
 ## The number of system outputs.
 ## @end table
 ## 
 ## Otherwise @code{abcddim} returns @var{n} = @var{m} = @var{p} = @minus{}1.
 ## 
 ## Note: n = 0 (pure gain block) is returned without warning.
 ## 
-## See also: is_abcd
 ## @end deftypefn
+## @seealso{is_abcd}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1993.
 ## a s hodel: modified to accept pure-gain systems aug 1996
 
 function [n, m, p] = abcddim (a, b, c, d)
 
   if (nargin != 4)
diff --git a/scripts/control/are.m b/scripts/control/are.m
--- a/scripts/control/are.m
+++ b/scripts/control/are.m
@@ -53,18 +53,17 @@
 ## @var{x}: solution of the ARE.
 ## 
 ## @strong{Method}
 ## Laub's Schur method (IEEE Transactions on
 ## Automatic Control, 1979) is applied to the appropriate Hamiltonian
 ## matrix.
 ## 
 ## @end deftypefn
-
-## See also: balance, dare
+## @seealso{balance, dare}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1993
 
 function x = are (a, b, c, opt)
 
   if (nargin == 3 || nargin == 4)
     if (nargin == 4)
diff --git a/scripts/control/damp.m b/scripts/control/damp.m
--- a/scripts/control/damp.m
+++ b/scripts/control/damp.m
@@ -20,18 +20,18 @@
 ## @deftypefn {Function File } {} damp(@var{p}@{, @var{tsam}@})
 ##       Displays eigenvalues, natural frequencies and damping ratios
 ##       of the eigenvalues of a matrix @var{p} or the @var{A}-matrix of a
 ##       system @var{p}, respectively.
 ##       If @var{p} is a system, @var{tsam} must not be specified.
 ##       If @var{p} is a matrix and @var{tsam} is specified, eigenvalues
 ##       of @var{p} are assumed to be in @var{z}-domain.
 ## 
-## See also: @code{eig}
 ## @end deftypefn
+## @seealso{eig}
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: September 29, 1997.
 
 function damp (p, tsam)
 
   ## assume a continuous system
   DIGITAL = 0;
diff --git a/scripts/control/dare.m b/scripts/control/dare.m
--- a/scripts/control/dare.m
+++ b/scripts/control/dare.m
@@ -63,18 +63,17 @@
 ## Generalized eigenvalue approach (Van Dooren; SIAM J.
 ##  Sci. Stat. Comput., Vol 2) applied  to the appropriate symplectic pencil.
 ## 
 ##  See also: Ran and Rodman, "Stable Hermitian Solutions of Discrete
 ##  Algebraic Riccati Equations," Mathematics of Control, Signals and
 ##  Systems, Vol 5, no 2 (1992)  pp 165-194.
 ## 
 ## @end deftypefn
-
-## See also: balance, are
+## @seealso{balance, are}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1993
 ## Adapted-By: jwe
 
 function x = dare (a, b, c, r, opt)
 
   if (nargin == 4 | nargin == 5)
diff --git a/scripts/control/impulse.m b/scripts/control/impulse.m
--- a/scripts/control/impulse.m
+++ b/scripts/control/impulse.m
@@ -36,18 +36,17 @@
 ## the number of data values.
 ## 
 ##  Both parameters @var{tstop} and @var{n} can be omitted and will be
 ##  computed from the eigenvalues of the A-Matrix.
 ## @end table
 ## @strong{Outputs}
 ## @var{y}, @var{t}: impulse response
 ## @end deftypefn
- 
-## See also:  step, stepimp
+## @seealso{step, stepimp}
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: October 2, 1997
 ## based on lsim.m of Scottedward Hodel
 ## modified by
 
 function [y, t] = impulse (sys, inp, tstop, n)
 
diff --git a/scripts/control/is_abcd.m b/scripts/control/is_abcd.m
--- a/scripts/control/is_abcd.m
+++ b/scripts/control/is_abcd.m
@@ -17,18 +17,17 @@
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { @var{retval} =} is_abcd( @var{a}@{, @var{b}, @var{c}, @var{d}@})
 ##  Returns @var{retval} = 1 if the dimensions of @var{a}, @var{b}, @var{c}, @var{d}
 ##  are compatible, otherwise @var{retval} = 0 with an appropriate diagnostic
 ##  message printed to the screen.  The matrices b, c, or d may be omitted.
 ## @end deftypefn
-
-## See also: abcddim
+## @seealso{abcddim}
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: November 4, 1997
 ## based on is_controllable.m of Scottedward Hodel
 
 function retval = is_abcd (a, b, c, d)
 
   retval = 0;
diff --git a/scripts/control/is_controllable.m b/scripts/control/is_controllable.m
--- a/scripts/control/is_controllable.m
+++ b/scripts/control/is_controllable.m
@@ -45,24 +45,19 @@
 ## Controllability is determined by applying Arnoldi iteration with
 ## complete re-orthogonalization to obtain an orthogonal basis of the
 ## Krylov subspace
 ## @example
 ## span ([b,a*b,...,a^@{n-1@}*b]).
 ## @end example
 ## The Arnoldi iteration is executed with @code{krylov} if the system has a single input; otherwise a block Arnoldi iteration is performed with @code{krylovb}.
 ## 
-## @strong{See also}
-## @code{is_observable}, @code{is_stabilizable}, @code{is_detectable}, 
-## 	@code{krylov}, @code{krylovb}
-## 
 ## @end deftypefn
-
-## See also: size, rows, columns, length, is_matrix, is_scalar, is_vector
-##     is_observable, is_stabilizable, is_detectable, krylov, krylovb
+## @seealso{size, rows, columns, length, is_matrix, is_scalar, is_vector
+## is_observable, is_stabilizable, is_detectable, krylov, krylovb}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1993
 ## Updated by A. S. Hodel (scotte@eng.auburn.edu) Aubust, 1995 to use krylovb 
 ## Updated by John Ingram (ingraje@eng.auburn.edu) July, 1996 for packed systems
 
 function [retval, U] = is_controllable (a, b, tol)
 
diff --git a/scripts/control/is_detectable.m b/scripts/control/is_detectable.m
--- a/scripts/control/is_detectable.m
+++ b/scripts/control/is_detectable.m
@@ -25,18 +25,17 @@
 ##  detectable, 0 if not.
 ## 
 ## @strong{See} @code{is_stabilizable} for detailed description of arguments and
 ## computational method.
 ## 
 ##  Default: tol = 10*norm(a,'fro')*eps 
 ## 
 ## @end deftypefn
-
-## See also: size, rows, columns, length, is_matrix, is_scalar, is_vector.
+## @seealso{is_stabilizable, size, rows, columns, length, is_matrix, is_scalar, is_vector}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1993
 ## Updated by John Ingram (ingraje@eng.auburn.edu) July 1996.
 
 function [retval, U] = is_detectable (a, c, tol)
 
   if( nargin < 1) 
diff --git a/scripts/control/is_observable.m b/scripts/control/is_observable.m
--- a/scripts/control/is_observable.m
+++ b/scripts/control/is_observable.m
@@ -24,18 +24,17 @@
 ##  Default: tol = 10*norm(a,'fro')*eps
 ## 
 ##  Returns 1 if the system @var{sys} or the pair (@var{a},@var{c}) is 
 ##  observable, 0 if not.
 ## 
 ## @strong{See} @code{is_controllable} for detailed description of arguments
 ## and default values.
 ## @end deftypefn
-
-## See also: size, rows, columns, length, is_matrix, is_scalar, is_vector.
+## @seealso{size, rows, columns, length, is_matrix, is_scalar, is_vector}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1993
 ## Updated by John Ingram (ingraje@eng.auburn.edu) July 1996.
 
 function [retval, U] = is_observable (a, c, tol)
 
   if( nargin < 1) 
diff --git a/scripts/control/is_stable.m b/scripts/control/is_stable.m
--- a/scripts/control/is_stable.m
+++ b/scripts/control/is_stable.m
@@ -32,19 +32,18 @@
 ## @item @var{dflg} != 0
 ## stable if eig(a) in unit circle
 ## 
 ## @item @var{dflg} == 0
 ## stable if eig(a) in open LHP (default)
 ## @end table
 ## @end table
 ## @end deftypefn
-
-## See also: size, rows, columns, length, is_matrix, is_scalar, is_vector
-##     is_observable, is_stabilizable, is_detectable, krylov, krylovb
+## @seealso{size, rows, columns, length, is_matrix, is_scalar, is_vector
+##     is_observable, is_stabilizable, is_detectable, krylov, krylovb}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1993
 ## Updated by John Ingram (ingraje@eng.auburn.edu) July, 1996 for systems
 ## Updated to simpler form by a.s.hodel 1998
 
 function retval = is_stable (a, tol, disc)
 
diff --git a/scripts/control/jet707.m b/scripts/control/jet707.m
--- a/scripts/control/jet707.m
+++ b/scripts/control/jet707.m
@@ -19,18 +19,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { @var{outsys}  =} jet707 ( ) 
 ##  Creates linearized state space model of a Boeing 707-321 aircraft
 ##  at v=80m/s. (M = 0.26, Ga0 = -3 deg, alpha0 = 4 deg, kappa = 50 deg)
 ##  System inputs:   (1) thrust   and (2) elevator angle
 ##  System outputs:  (1) airspeed and (2) pitch angle
 ##  Ref: R. Brockhaus: Flugregelung (Flight Control), Springer, 1994
 ## @end deftypefn
-
-## see also: ord2
+## @seealso{ord2}
  
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: September 28, 1997
 
 function outsys = jet707 ()
 
   if (nargin != 0)
     usage("outsys = jet707()")
diff --git a/scripts/control/lqg.m b/scripts/control/lqg.m
--- a/scripts/control/lqg.m
+++ b/scripts/control/lqg.m
@@ -53,18 +53,17 @@
 ## @item    Q
 ## Solution of estimation algebraic Riccati equation
 ## @item    Ee
 ## estimator poles
 ## @item    Es
 ## controller poles
 ## @end table
 ## @end deftypefn
-
-## See also:  h2syn, lqe, lqr
+## @seealso{h2syn, lqe, lqr}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: August 1995
 ## revised for new system format August 1996
 
 function [K, Q1, P1, Ee, Er] = lqg (sys, Sigw, Sigv, Q, R, input_list)
 
   if ( (nargin < 5) | (nargin > 6))
diff --git a/scripts/control/polyout.m b/scripts/control/polyout.m
--- a/scripts/control/polyout.m
+++ b/scripts/control/polyout.m
@@ -20,19 +20,18 @@
 ## @deftypefn {Function File } { @var{y} =} polyout ( @var{c}@{, @var{x}@})
 ## write formatted polynomial 
 ## @example
 ##    c(x) = c(1) * x^n + ... + c(n) x + c(n+1)
 ## @end example
 ##  to string @var{y} or to the screen (if @var{y} is omitted)
 ##  @var{x} defaults to the string @code{"s"}
 ## @end deftypefn
-
-##  See also: polyval, polyvalm, poly, roots, conv, deconv, residue, 
-##	filter, polyderiv, polyinteg
+## @seealso{polyval, polyvalm, poly, roots, conv, deconv, residue, 
+## filter, polyderiv, polyinteg}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: May 1995
 ## Nov 1998: Correctly handles complex coefficients
   
 function y = polyout (c, x)
 
   if (nargin < 1 ) || (nargin > 2) || (nargout < 0 ) || (nargout > 1)
diff --git a/scripts/control/step.m b/scripts/control/step.m
--- a/scripts/control/step.m
+++ b/scripts/control/step.m
@@ -38,18 +38,17 @@
 ##  Both parameters @var{tstop} and @var{n} can be omitted and will be
 ##  computed from the eigenvalues of the A-Matrix.
 ## @end table
 ## @strong{Outputs}
 ## @var{y}, @var{t}: impulse response
 ## 
 ## When invoked with the output paramter y the plot is not displayed.  
 ## @end deftypefn
- 
-## See also:  impulse, stepimp
+## @seealso{impulse, stepimp}
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: September 30, 1997
 ## based on lsim.m of Scottedward Hodel
 
 function [y, t] = step (sys, inp, tstop, n)
 
   if((nargin < 1) || (nargin > 4))
diff --git a/scripts/control/stepimp.m b/scripts/control/stepimp.m
--- a/scripts/control/stepimp.m
+++ b/scripts/control/stepimp.m
@@ -24,18 +24,17 @@
 ## 
 ## Produces a plot or the response data for system sys.
 ## 
 ## Limited argument checking; "do not attempt to do this at home".
 ## Used internally in @code{impulse}, @code{step}. Use @code{step}
 ## or @code{impulse} instead.
 ## 
 ## @end deftypefn
-
-## See also: step, impulse
+## @seealso{step, impulse}
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: October 2, 1997
 ## based on lsim.m of Scottedward Hodel
 
 function [y, t] = stepimp (sitype, sys, inp, tstop, n)
 
   if (sitype == 1)         IMPULSE = 0;
diff --git a/scripts/control/sys2fir.m b/scripts/control/sys2fir.m
--- a/scripts/control/sys2fir.m
+++ b/scripts/control/sys2fir.m
@@ -18,18 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File } {[@var{c}, @var{tsam}, @var{input}, @var{output}] =} sys2fir (@var{sys})
 ## 
 ## Extract FIR data from system data structure; see @ref{fir2sys} for
 ## parameter descriptions.
 ## 
 ## @end deftypefn
-
-## See also: fir2sys
+## @seealso{fir2sys}
  
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: July 1996
 
 function [c, tsam, inname, outname] = sys2fir (sys)
 
   ## let sys2tf do most of the work
 
diff --git a/scripts/control/sysdimensions.m b/scripts/control/sysdimensions.m
--- a/scripts/control/sysdimensions.m
+++ b/scripts/control/sysdimensions.m
@@ -58,18 +58,17 @@
 ##  number of system outputs
 ## @item  yd
 ##  binary vector; @var{yd}(@var{ii}) is nonzero if output @var{ii} is
 ## discrete.
 ## @math{yd(ii) = 0} if output @var{ii} is continous
 ## @end table
 ## 
 ## @end deftypefn
-
-## See also: sysgetsignals, sysgettsam
+## @seealso{sysgetsignals, sysgettsam}
 
 function [n, nz, m, p, yd] = sysdimensions (sys, opt)
 
   if(nargout > 5 | nargin < 1 | nargin > 2)
     usage("[n,nz,m,p[,yd]] = sysdimensions(sys{,opt})");
   elseif(!is_struct(sys))
     usage("[n,nz,m,p] = sysdimensions(sys)");
   elseif(nargin == 1)
diff --git a/scripts/control/sysupdate.m b/scripts/control/sysupdate.m
--- a/scripts/control/sysupdate.m
+++ b/scripts/control/sysupdate.m
@@ -40,18 +40,17 @@
 ## 
 ## @strong{Outputs}
 ## @var{retsys}: contains union of data in sys and requested data.
 ## If requested data in sys is already up to date then retsys=sys.
 ## 
 ## Conversion to @code{tf} or @code{zp} exits with an error if the system is 
 ##  mixed continuous/digital.
 ## @end deftypefn
-
-## See also: tf2sys, ss2sys, zp2sys, sysout, sys2ss, sys2tf, sys2zp
+## seealso{tf2sys, ss2sys, zp2sys, sysout, sys2ss, sys2tf, sys2zp}
 
 ## Author: John Ingram <ingraje@eng.auburn.edu>
 ## Created: July 9, 1996
 
 function sys = sysupdate (sys, opt)
 
   ## check for correct number of inputs 
   if (nargin != 2)
diff --git a/scripts/control/tfout.m b/scripts/control/tfout.m
--- a/scripts/control/tfout.m
+++ b/scripts/control/tfout.m
@@ -16,19 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free 
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
  
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { } tfout (@var{num}, @var{denom}@{, @var{x}@})
 ##  print formatted transfer function @math{n(s)/d(s) } to the screen
 ##  @var{x} defaults to the string @code{"s"}
 ## @end deftypefn
-
-##  See also: polyval, polyvalm, poly, roots, conv, deconv, residue, 
-##	filter, polyderiv, polyinteg, polyout
+## @seealso{polyval, polyvalm, poly, roots, conv, deconv, residue, 
+## filter, polyderiv, polyinteg, polyout}
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: June 1995
 
 function tfout (num, denom, x)
   
   save_empty = empty_list_elements_ok;
   empty_list_elements_ok = 1;
diff --git a/scripts/control/ugain.m b/scripts/control/ugain.m
--- a/scripts/control/ugain.m
+++ b/scripts/control/ugain.m
@@ -18,20 +18,18 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { @var{outsys} =} ugain(n)
 ##  Creates a system with unity gain, no states.
 ##  This trivial system is sometimes needed to create arbitrary
 ##  complex systems from simple systems with buildssic.
 ##  Watch out if you are forming sampled systems since "ugain"
 ##  does not contain a sampling period.  
-## 
-## See also: hinfdemo (MIMO H_infinty example, Boeing 707-321 aircraft model)
-## 
 ## @end deftypefn
+## @seealso{hinfdemo (MIMO H_infinty example, Boeing 707-321 aircraft model)}
 
 ## Author: Kai P. Mueller <mueller@ifr.ing.tu-bs.de>
 ## Created: April 1998
 
 function outsys = ugain (n)
 
   if((nargin != 1) || (nargout > 1))
     usage("outsys = ugain(n)")
diff --git a/scripts/control/zpout.m b/scripts/control/zpout.m
--- a/scripts/control/zpout.m
+++ b/scripts/control/zpout.m
@@ -16,19 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free 
 ## Software Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA. 
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File } { } zpout (@var{zer}, @var{pol}, @var{k}@{, @var{x}@})
 ##  print formatted zero-pole form to the screen.  
 ## @var{x} defaults to the string @code{"s"}
 ## @end deftypefn
-
-##  See also: polyval, polyvalm, poly, roots, conv, deconv, residue, 
-##	filter, polyderiv, polyinteg, polyout 
+## @seealso{polyval, polyvalm, poly, roots, conv, deconv, residue, 
+## filter, polyderiv, polyinteg, polyout} 
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
 ## Created: June 1995
 
 function zpout (zer, pol, k, x)
 
   save_empty = empty_list_elements_ok;
   empty_list_elements_ok = 1;
diff --git a/scripts/elfun/gcd.m b/scripts/elfun/gcd.m
--- a/scripts/elfun/gcd.m
+++ b/scripts/elfun/gcd.m
@@ -35,18 +35,17 @@
 ## 
 ## An optional second return value, @var{v}
 ## contains an integer vector such that
 ## 
 ## @example
 ## g = v(1) * a(k) + ... + v(k) * a(k)
 ## @end example
 ## @end deftypefn
-
-## See also: lcm, min, max, ceil, floor.
+## @seealso{lcm, min, max, ceil, floor}
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 16 September 1994
 ## Adapted-By: jwe
 
 function [g, v] = gcd (a, ...)
 
   if (nargin == 0)
diff --git a/scripts/elfun/lcm.m b/scripts/elfun/lcm.m
--- a/scripts/elfun/lcm.m
+++ b/scripts/elfun/lcm.m
@@ -28,18 +28,17 @@
 ## 
 ## @noindent
 ## is the same as
 ## 
 ## @example
 ## lcm ([a1, ..., ak]).
 ## @end example
 ## @end deftypefn
-
-## See also: gcd, min, max, ceil, floor.  
+## @seealso{gcd, min, max, ceil, floor}  
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 16 September 1994
 ## Adapted-By: jwe
 
 function l = lcm (a, ...)
 
   if (nargin == 0)
diff --git a/scripts/finance/nper.m b/scripts/finance/nper.m
--- a/scripts/finance/nper.m
+++ b/scripts/finance/nper.m
@@ -9,31 +9,32 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details. 
 ## 
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
-## usage:  nper (r, p, a [, l] [, method])
+## -*- texinfo -*-
+## @deftypefn {Function File} {} nper (@var{r}, @var{p}, @var{a} [, @var{l}] [, @var{method}])
 ##
-## Computes the number of regular payments of p necessary to amortize a
-## loan of amount a and interest r.
+## Computes the number of regular payments of @var{p} necessary to amortize @var{a}
+## loan of amount @var{a} and interest @var{r}.
 ##
-## With the optional scalar argument l, one can specify an additional
-## lump-sum payment of l made at the end of the amortization time. With
+## With the optional scalar argument @var{l}, one can specify an additional
+## lump-sum payment of @var{l} made at the end of the amortization time. With
 ## the optional string argument `method', one can specify whether
 ## payments are made at the end ("e", default) or at the beginning ("b")
 ## of each period.
 ##
 ## Note that the rate r is not specified in percent, i.e., one has to
 ## write 0.05 rather than 5 %.
-##
-## See also:  pv, pmt, rate;  npv.
+## @end deftypefn
+## @seealso{pv, pmt, rate, npv}
   
 ## Author:  KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description:  Number of payments needed for amortizing a loan
 
 function n = nper (r, p, a, l, m)
   
   if ((nargin < 3) || (nargin > 5))
     usage ("nper (r, p, a [, l] [, method])");
diff --git a/scripts/finance/npv.m b/scripts/finance/npv.m
--- a/scripts/finance/npv.m
+++ b/scripts/finance/npv.m
@@ -9,31 +9,31 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details. 
 ## 
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
-## usage:  npv (r, p [, i])
-##
+## -*- texinfo -*-
+## @deftypefn {Function File} {} npv (@var{r}, @var{p} [, @var{i}])
 ## Returns the net present value of a series of irregular (i.e., not
-## necessarily identical) payments p which occur at the ends of n
-## consecutive periods.  r specifies the one-period interest rates and
+## necessarily identical) payments @var{p} which occur at the ends of @var{n}
+## consecutive periods.  @var{r} specifies the one-period interest rates and
 ## can either be a scalar (constant rates) or a vector of the same
-## length as p.
+## length as @var{p}.
 ##
-## With the optional scalar argument i, one can specify an initial
+## With the optional scalar argument @var{i}, one can specify an initial
 ## investment.
 ##
 ## Note that rates are not specified in percent, i.e., one has to write
 ## 0.05 rather than 5 %.
-##
-## See also:  irr;  pv.
+## @end deftypefn
+## @seealso{irr, pv}
   
 ## Author:  KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description:  Net present value of a series of payments
 
 function v = npv (r, p, i)
   
   if ((nargin < 2) || (nargin > 3))
     usage ("npv (r, p [, i]");
@@ -63,9 +63,9 @@ function v = npv (r, p, i)
     endif
   else
     i = 0;
   endif
   
   p = [i, p];
   v = sum (d .* p);
   
-endfunction
\ No newline at end of file
+endfunction
diff --git a/scripts/finance/pmt.m b/scripts/finance/pmt.m
--- a/scripts/finance/pmt.m
+++ b/scripts/finance/pmt.m
@@ -9,27 +9,27 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details. 
 ## 
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
-## usage:  pmt (r, n, a [, l] [, method])
-##
+## -*- texinfo -*- 
+## @deftypefn {Function File} {} pmt (@var{r}, @var{n}, @var{a} [, @var{l}] [, @var{method}])
 ## Compute the amount of periodic payment necessary to amortize a loan
-## of amount a with interest rate r in n periods.
+## of amount a with interest rate @var{r} in @var{n} periods.
 ##
 ## With the optional scalar argument l, one can specify an initial
 ## lump-sum payment. With the optional string argument `method', one can
 ## specify whether payments are made at the end ("e", default) or at the
 ## beginning ("b") of each period.
-##
-## See also:  pv, nper, rate
+## @end deftypefn
+## @seealso{pv, nper, rate}
   
 ## Author:  KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description:  Amount of periodic payment needed to amortize a loan
 
 function p = pmt (r, n, a, l, m)
   
   if ((nargin < 3) || (nargin > 5))
     usage ("pmt (r, n, a [, l] [, method])");
diff --git a/scripts/finance/pv.m b/scripts/finance/pv.m
--- a/scripts/finance/pv.m
+++ b/scripts/finance/pv.m
@@ -9,32 +9,32 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details. 
 ## 
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
-## usage:  pv (r, n, p [, l] [, method])
+## -*- texinfo -*-
+## @deftypefn {Function File} {} pv (@var{r}, @var{n}, @var{p} [, @var{l}] [, @var{method}])
+## Returns the present value of an investment that will pay off @var{p} for @var{n}
+## consecutive periods, assuming an interest @var{r}.
 ##
-## Returns the present value of an investment that will pay off p for n
-## consecutive periods, assuming an interest r.
-##
-## With the optional scalar argument l, one can specify an additional
-## lump-sum payment made at the end of n periods.
+## With the optional scalar argument @var{l}, one can specify an additional
+## lump-sum payment made at the end of @var{n} periods.
 ##
 ## With the optional string argument `method', one can specify whether
 ## payments are made at the end ("e", default) or at the beginning ("b")
 ## of each period.
 ##
 ## Note that the rate r is not specified in percent, i.e., one has to
 ## write 0.05 rather than 5 %.
-##
-## See also:  pmt, nper, rate;  npv.
+## @end deftypefn
+## @seealso{pmt, nper, rate, npv}
   
 ## Author:  KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description:  Present value of an investment
 
 function v = pv (r, n, p, l, m)
   
   if ((nargin < 3) || (nargin > 5))
     usage ("pv (r, n, p [, l] [, method])");
diff --git a/scripts/finance/rate.m b/scripts/finance/rate.m
--- a/scripts/finance/rate.m
+++ b/scripts/finance/rate.m
@@ -9,27 +9,27 @@
 ## WITHOUT ANY WARRANTY; without even the implied warranty of
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details. 
 ## 
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
-## usage:  rate (n, p, v [, l] [, method])
-##
-## Computes the rate of return on an investment of present value v which
-## pays p in n consecutive periods.
+## -*- texinfo -*- 
+## @deftypefn {Function File} {} rate (@var{n}, @var{p}, @var{v} [, @var{l}] [,@var{method}])
+## Computes the rate of return on an investment of present value @var{v} which
+## pays @var{p} in @var{n} consecutive periods.
 ##
-## With the optional scalar argument l, one can specify an additional
-## lump-sum payment made at the end of n periods. With the optional
-## string argument `method', one can specify whether payments are made
+## With the optional scalar argument @var{l}, one can specify an additional
+## lump-sum payment made at the end of @var{n} periods. With the optional
+## string argument @var{`method'}, one can specify whether payments are made
 ## at the end ("e", default) or at the beginning ("b") of each period.
-##
-## See also:  pv, pmt, nper;  npv.
+## @end deftypefn
+## @seealso{pv, pmt, nper, npv}
   
 ## Author:  KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Description:  Rate of return of an investment
   
 function r = rate (n, p, v, l, m)
 
   if ((nargin < 3) || (nargin > 5))
     usage ("rate (n, p, v [, l] [, method])");
@@ -64,9 +64,9 @@ function r = rate (n, p, v, l, m)
   endif
   
   string = ["function delta = f (r) ", ...
       "delta = pv (r, %g, %g, %g, \"%s\") - %g;  end"];
   eval (sprintf (string, n, p, l, m, v));
   
   [r, info] = fsolve ("f", 0);
   
-endfunction
\ No newline at end of file
+endfunction
diff --git a/scripts/general/columns.m b/scripts/general/columns.m
--- a/scripts/general/columns.m
+++ b/scripts/general/columns.m
@@ -16,18 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} columns (@var{a})
 ## Return the number of columns of @var{a}.
 ## @end deftypefn
-
-## See also: size, rows, length, is_scalar, is_vector, is_matrix
+## @seealso{size, rows, length, is_scalar, is_vector, is_matrix}
 
 ## Author: jwe
 
 function nc = columns (x)
 
   if (nargin != 1)
     usage ("columns (x)");
   endif
diff --git a/scripts/general/fliplr.m b/scripts/general/fliplr.m
--- a/scripts/general/fliplr.m
+++ b/scripts/general/fliplr.m
@@ -25,18 +25,17 @@
 ## @example
 ## @group
 ## fliplr ([1, 2; 3, 4])
 ##      @result{}  2  1
 ##          4  3
 ## @end group
 ## @end example
 ## @end deftypefn
-
-## See also: flipu, rot90
+## @seealso{flipud, rot90}
 
 ## Author: jwe
 
 function y = fliplr (x)
 
   if (nargin != 1)
     usage ("fliplr (x)");
   endif
diff --git a/scripts/general/flipud.m b/scripts/general/flipud.m
--- a/scripts/general/flipud.m
+++ b/scripts/general/flipud.m
@@ -25,18 +25,17 @@
 ## @example
 ## @group
 ## flipud ([1, 2; 3, 4])
 ##      @result{}  3  4
 ##          1  2
 ## @end group
 ## @end example
 ## @end deftypefn
-
-## See also: fliplr, rot90
+## @seealso{fliplr, rot90}
 
 ## Author: jwe
 
 function y = flipud (x)
 
   if (nargin != 1)
     usage ("flipud (x)");
   endif
diff --git a/scripts/general/int2str.m b/scripts/general/int2str.m
--- a/scripts/general/int2str.m
+++ b/scripts/general/int2str.m
@@ -19,18 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} int2str (@var{n})
 ## @deftypefnx {Function File} {} num2str (@var{x})
 ## Convert a number to a string.  These functions are not very flexible,
 ## but are provided for compatibility with @sc{Matlab}.  For better control
 ## over the results, use @code{sprintf} (@pxref{Formatted Output}).
 ## @end deftypefn
-
-## See also: sprintf, num2str
+## @seealso{sprintf, num2str}
 
 ## Author: jwe
 
 function retval = int2str (x)
 
   ## XXX FIXME XXX -- this will fail for very large values.
 
   if (nargin == 1)
diff --git a/scripts/general/is_scalar.m b/scripts/general/is_scalar.m
--- a/scripts/general/is_scalar.m
+++ b/scripts/general/is_scalar.m
@@ -16,18 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} is_scalar (@var{a})
 ## Return 1 if @var{a} is a scalar.  Otherwise, return 0.
 ## @end deftypefn
-
-## See also: size, rows, columns, length, is_scalar, is_matrix
+## @seealso{size, rows, columns, length, is_scalar, is_matrix}
 
 ## Author: jwe
 
 function retval = is_scalar (x)
 
   retval = 0;
 
   if (nargin == 1)
diff --git a/scripts/general/is_square.m b/scripts/general/is_square.m
--- a/scripts/general/is_square.m
+++ b/scripts/general/is_square.m
@@ -17,18 +17,17 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} is_square (@var{x})
 ## If @var{x} is a square matrix, then return the dimension of @var{x}.
 ## Otherwise, return 0.
 ## @end deftypefn
-
-## See also: size, rows, columns, length, is_matrix, is_scalar, is_vector
+## @seealso{size, rows, columns, length, is_matrix, is_scalar, is_vector}
 
 ## Author: A. S. Hodel <scotte@eng.auburn.edu>
 ## Created: August 1993
 ## Adapted-By: jwe
 
 function retval = is_square (x)
 
   retval = 0;
diff --git a/scripts/general/is_symmetric.m b/scripts/general/is_symmetric.m
--- a/scripts/general/is_symmetric.m
+++ b/scripts/general/is_symmetric.m
@@ -18,19 +18,18 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} is_symmetric (@var{x}, @var{tol})
 ## If @var{x} is symmetric within the tolerance specified by @var{tol}, 
 ## then return the dimension of @var{x}.  Otherwise, return 0.  If
 ## @var{tol} is omitted, use a tolerance equal to the machine precision.
 ## @end deftypefn
-
-## See also: size, rows, columns, length, is_matrix, is_scalar,
-## is_square, is_vector
+## @seealso{size, rows, columns, length, is_matrix, is_scalar,
+## is_square, is_vector}
 
 ## Author: A. S. Hodel <scotte@eng.auburn.edu>
 ## Created: August 1993
 ## Adapted-By: jwe
 
 function retval = is_symmetric (x,tol)
 
   if (nargin == 1 || nargin == 2)
diff --git a/scripts/general/is_vector.m b/scripts/general/is_vector.m
--- a/scripts/general/is_vector.m
+++ b/scripts/general/is_vector.m
@@ -16,18 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} is_vector (@var{a})
 ## Return 1 if @var{a} is a vector.  Otherwise, return 0.
 ## @end deftypefn
-
-## See also: size, rows, columns, length, is_scalar, is_matrix
+## @seealso{size, rows, columns, length, is_scalar, is_matrix}
 
 ## Author: jwe
 
 function retval = is_vector (x)
 
   retval = 0;
 
   if (nargin == 1)
diff --git a/scripts/general/logspace.m b/scripts/general/logspace.m
--- a/scripts/general/logspace.m
+++ b/scripts/general/logspace.m
@@ -54,18 +54,17 @@
 ## $10^{base}$ and $10^{\pi}$,
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ## 10^base and 10^pi,
 ## @end ifinfo
 ## in order to  be compatible with the corresponding @sc{Matlab} function.
 ## @end deftypefn
-
-## See also: linspace
+## @seealso{linspace}
 
 ## Author: jwe
 
 function retval = logspace (x1, x2, n)
 
   if (nargin == 2)
     npoints = 50;
   elseif (nargin == 3)
diff --git a/scripts/general/nextpow2.m b/scripts/general/nextpow2.m
--- a/scripts/general/nextpow2.m
+++ b/scripts/general/nextpow2.m
@@ -23,18 +23,17 @@
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ##  2^n >= abs (x).
 ## @end ifinfo
 ## 
 ## If @var{x} is a vector, return @code{nextpow2 (length (@var{x}))}.
 ## @end deftypefn
-
-## See also: pow2
+## @seealso{pow2}
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 7 October 1994
 ## Adapted-By: jwe
 
 function n = nextpow2 (x)
   
   if (nargin != 1)
diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -19,18 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} int2str (@var{n})
 ## @deftypefnx {Function File} {} num2str (@var{x})
 ## Convert a number to a string.  These functions are not very flexible,
 ## but are provided for compatibility with @sc{Matlab}.  For better control
 ## over the results, use @code{sprintf} (@pxref{Formatted Output}).
 ## @end deftypefn
-
-## See also: sprintf, int2str
+## @seealso{sprintf, int2str}
 
 ## Author: jwe
 
 function retval = num2str (x)
 
   if (nargin == 1)
     if (rows (x) == 1 && columns (x) == 1)
       retval = sprintf ("%g", x);
diff --git a/scripts/general/perror.m b/scripts/general/perror.m
--- a/scripts/general/perror.m
+++ b/scripts/general/perror.m
@@ -19,18 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} perror (@var{name}, @var{num})
 ## Print the error message for function @var{name} corresponding to the
 ## error number @var{num}.  This function is intended to be used to print
 ## useful error messages for those functions that return numeric error
 ## codes.
 ## @end deftypefn
-
-## See also: strerror
+## @seealso{strerror}
 
 ## Author: jwe
 
 function perror (name, err)
 
   if (nargin != 2)
     usage ("perror (name, err)");
   else
diff --git a/scripts/general/rem.m b/scripts/general/rem.m
--- a/scripts/general/rem.m
+++ b/scripts/general/rem.m
@@ -24,18 +24,17 @@
 ## 
 ## @example
 ## x - y .* fix (x ./ y)
 ## @end example
 ## 
 ## An error message is printed if the dimensions of the arguments do not
 ## agree, or if either of the arguments is complex.
 ## @end deftypefn
-
-## See also: round
+## @seealso{round}
 
 ## Author: jwe
 
 function retval = rem (x, y)
 
   if (nargin != 2)
     usage ("rem (x, y)");
   endif
diff --git a/scripts/general/reshape.m b/scripts/general/reshape.m
--- a/scripts/general/reshape.m
+++ b/scripts/general/reshape.m
@@ -44,18 +44,17 @@
 ## @end group
 ## @end example
 ## 
 ## @noindent
 ## but it is somewhat less cryptic to use @code{reshape} instead of the
 ## colon operator.  Note that the total number of elements in the original
 ## matrix must match the total number of elements in the new matrix.
 ## @end deftypefn
-
-## See also: `:', do_fortran_indexing
+## @seealso{`:', do_fortran_indexing}
 
 ## Author: jwe
 
 function retval = reshape (a, m, n)
 
   if (nargin == 2 && prod (size (m)) == 2)
     n = m(2);
     m = m(1);
diff --git a/scripts/general/rot90.m b/scripts/general/rot90.m
--- a/scripts/general/rot90.m
+++ b/scripts/general/rot90.m
@@ -42,18 +42,17 @@
 ## rot90 ([1, 2; 3, 4], -1)
 ## @equiv{}
 ## rot90 ([1, 2; 3, 4], 3)
 ## @equiv{}
 ## rot90 ([1, 2; 3, 4], 7)
 ## @end group
 ## @end example
 ## @end deftypefn
-
-## See also: flipud, fliplr
+## @seealso{flipud, fliplr}
 
 ## Author: jwe
 
 function y = rot90 (x, k)
 
   if (nargin < 2)
     k = 1;
   endif
diff --git a/scripts/general/rows.m b/scripts/general/rows.m
--- a/scripts/general/rows.m
+++ b/scripts/general/rows.m
@@ -16,18 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} rows (@var{a})
 ## Return the number of rows of @var{a}.
 ## @end deftypefn
-
-## See also: size, columns, length, is_scalar, is_vector, is_matrix
+## @seealso{size, columns, length, is_scalar, is_vector, is_matrix}
 
 ## Author: jwe
 
 function nr = rows (x)
 
   if (nargin != 1)
     usage ("rows (x)");
   endif
diff --git a/scripts/general/tril.m b/scripts/general/tril.m
--- a/scripts/general/tril.m
+++ b/scripts/general/tril.m
@@ -55,18 +55,17 @@
 ## @group
 ## tril (ones (3), 1)
 ##      @result{}  1  1  0
 ##          1  1  1
 ##          1  1  1
 ## @end group
 ## @end example
 ## @end deftypefn
-
-## See also: triu, diag
+## @seealso{triu, diag}
 
 ## Author: jwe
 
 function retval = tril (x, k)
 
   if (nargin > 0)
     [nr, nc] = size (x);
     retval = zeros (nr, nc);
diff --git a/scripts/io/printf.m b/scripts/io/printf.m
--- a/scripts/io/printf.m
+++ b/scripts/io/printf.m
@@ -18,18 +18,17 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} printf (@var{template}, @dots{})
 ## The @code{printf} function prints the optional arguments under the
 ## control of the template string @var{template} to the stream
 ## @code{stdout}.
 ## @end deftypefn
-
-## See also: fprintf sprintf
+## @seealso{fprintf and sprintf}
 
 ## Author: jwe
 
 function retval = printf (fmt, ...)
 
   retval = -1;
 
   if (nargin > 0)
diff --git a/scripts/linear-algebra/cond.m b/scripts/linear-algebra/cond.m
--- a/scripts/linear-algebra/cond.m
+++ b/scripts/linear-algebra/cond.m
@@ -18,18 +18,17 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cond (@var{a})
 ## Compute the (two-norm) condition number of a matrix. @code{cond (a)} is
 ## defined as @code{norm (a) * norm (inv (a))}, and is computed via a
 ## singular value decomposition.
 ## @end deftypefn
-
-## See also: norm, svd, rank
+## @seealso{norm, svd, rank}
 
 ## Author: jwe
 
 function retval = cond (a)
 
   if (nargin == 1)
     [nr, nc] = size (a);
     if (nr == 0 && nc == 0)
diff --git a/scripts/linear-algebra/norm.m b/scripts/linear-algebra/norm.m
--- a/scripts/linear-algebra/norm.m
+++ b/scripts/linear-algebra/norm.m
@@ -48,18 +48,17 @@
 ## 
 ## @item @var{p} = @code{-Inf}
 ## @code{min (abs (@var{a}))}.
 ## 
 ## @item other
 ## p-norm of @var{a}, @code{(sum (abs (@var{a}) .^ @var{p})) ^ (1/@var{p})}.
 ## @end table
 ## @end deftypefn
-
-## See also: cond, svd
+## @seealso{cond, svd}
 
 ## Author: jwe
 
 function retval = norm (x, p)
 
   if (nargin < 1 || nargin > 2)
     error ("usage: norm (x [, p])");
   endif
diff --git a/scripts/miscellaneous/comma.m b/scripts/miscellaneous/comma.m
--- a/scripts/miscellaneous/comma.m
+++ b/scripts/miscellaneous/comma.m
@@ -12,11 +12,12 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
+## @deftypefn {Operator} {} , 
 ## Array index, function argument, or command separator.
-##
-## See also: semicolon
+## @end deftypefn
+## @seealso{semicolon}
diff --git a/scripts/miscellaneous/etime.m b/scripts/miscellaneous/etime.m
--- a/scripts/miscellaneous/etime.m
+++ b/scripts/miscellaneous/etime.m
@@ -27,18 +27,17 @@
 ## # many computations later...
 ## elapsed_time = etime (clock (), t0);
 ## @end example
 ## 
 ## @noindent
 ## will set the variable @code{elapsed_time} to the number of seconds since
 ## the variable @code{t0} was set.
 ## @end deftypefn
-
-## See also: tic, toc, clock, cputime
+## @seealso{tic, toc, clock, cputime}
 
 ## Author: jwe
 
 function secs = etime (t1, t0)
 
   if (nargin != 2)
     usage ("etime (t1, t0)");
   endif
diff --git a/scripts/miscellaneous/menu.m b/scripts/miscellaneous/menu.m
--- a/scripts/miscellaneous/menu.m
+++ b/scripts/miscellaneous/menu.m
@@ -21,18 +21,17 @@
 ## @deftypefn {Function File} {} menu (@var{title}, @var{opt1}, @dots{})
 ## Print a title string followed by a series of options.  Each option will
 ## be printed along with a number.  The return value is the number of the
 ## option selected by the user.  This function is useful for interactive
 ## programs.  There is no limit to the number of options that may be passed
 ## in, but it may be confusing to present more than will fit easily on one
 ## screen.
 ## @end deftypefn
-
-## See also: disp, printf, input
+## @seealso{disp, printf, input}
 
 ## Author: jwe
 
 function num = menu (t, ...)
 
   if (nargin < 2)
     usage ("menu (title, opt1, ...)");
   endif
diff --git a/scripts/miscellaneous/semicolon.m b/scripts/miscellaneous/semicolon.m
--- a/scripts/miscellaneous/semicolon.m
+++ b/scripts/miscellaneous/semicolon.m
@@ -12,11 +12,12 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
+## @deftypefn {Operator} {} : ()
 ## Array row or command separator.
-##
-## See also: comma
+## @end deftypefn
+## @seealso{comma}
diff --git a/scripts/miscellaneous/texas_lotto.m b/scripts/miscellaneous/texas_lotto.m
--- a/scripts/miscellaneous/texas_lotto.m
+++ b/scripts/miscellaneous/texas_lotto.m
@@ -12,22 +12,22 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: texas_lotto
+## @deftypefn {Function File } {@var{winning_numbers} =} texas_lotto ()
 ##
 ## Pick 6 unique numbers between 1 and 50 that are guaranteed to win
 ## the Texas Lotto.
-##
-## See also: rand
+## @end deftypefn 
+## @seealso{rand}
 
 ## Author: jwe
 
 function picks = texas_lotto ()
 
   if (nargin != 0)
     warning ("win_texas_lotto: ignoring extra arguments");
   endif
diff --git a/scripts/plot/__pltopt1__.m b/scripts/plot/__pltopt1__.m
--- a/scripts/plot/__pltopt1__.m
+++ b/scripts/plot/__pltopt1__.m
@@ -12,21 +12,22 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: fmt = __pltopt1__ (caller, opt)
+## -*- texinfo -*-
+## @deftypefn {Function File} {@var{fmt} =} __pltopt1__ (@var{caller}, @var{opt})
 ##
 ## Really decode plot option strings.
-##
-## See also: __pltopt__
+## @end deftypefn
+## @seealso{ __pltopt__}
 
 ## Author: Rick Niles <niles@axp745.gsfc.nasa.gov>
 ## Adapted-By: jwe
 ## Maintainer: jwe
 
 function fmt = __pltopt1__ (caller, opt)
 
   set_color = 0;
diff --git a/scripts/plot/__pltopt__.m b/scripts/plot/__pltopt__.m
--- a/scripts/plot/__pltopt__.m
+++ b/scripts/plot/__pltopt__.m
@@ -56,17 +56,17 @@
 ##   =====================================================================
 ##     1    red       green       solid           "o"         "+"         
 ##     2    green     blue        long dash       "+"         "x"         
 ##     3    blue      red         short dash     square       "*"         
 ##     4    magenta   magenta     dotted          "x"        open square  
 ##     5    cyan      cyan        dot long dash  triangle    filled square
 ##     6    brown     yellow      dot short dash  "*"         "o"         
 ##
-## See also: __pltopt1__
+## @seealso{__pltopt1__}
 
 ## Author: jwe
 ## Adapted-By: jwe
 ## Maintainer: jwe
 
 function fmt = __pltopt__ (caller, opt)
 
   if (! isstr (opt))
diff --git a/scripts/plot/bar.m b/scripts/plot/bar.m
--- a/scripts/plot/bar.m
+++ b/scripts/plot/bar.m
@@ -37,19 +37,18 @@
 ## @example
 ## [xb, yb] = bar (x, y);
 ## plot (xb, yb);
 ## @end example
 ## 
 ## @noindent
 ## are equivalent.
 ## @end deftypefn
-
-## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
-##           stairs, gplot, gsplot, replot, xlabel, ylabel, title
+## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
+## stairs, gplot, gsplot, replot, xlabel, ylabel, title}
 
 ## Author: jwe
 
 function [xb, yb] = bar (x, y)
 
   if (nargin == 1)
     if (is_vector (x))
       len = 3 * length (x) + 1;
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -18,19 +18,18 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} contour (@var{z}, @var{n}, @var{x}, @var{y})
 ## Make a contour plot of the three-dimensional surface described by
 ## @var{z}.  Someone needs to improve @code{gnuplot}'s contour routines
 ## before this will be very useful.
 ## @end deftypefn
-
-## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
-##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title
+## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
+## bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title}
 
 ## Author: jwe
 
 function contour (z, n, x, y)
 
   if (nargin == 1)
     n = 10;
   endif
diff --git a/scripts/plot/grid.m b/scripts/plot/grid.m
--- a/scripts/plot/grid.m
+++ b/scripts/plot/grid.m
@@ -18,19 +18,18 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} grid (@var{arg})
 ## For two-dimensional plotting, force the display of a grid on the plot.
 ## The argument may be either @code{"on"} or @code{"off"}.  If it is
 ## omitted, @code{"on"} is assumed.
 ## @end deftypefn
-
-## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
-##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title
+## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
+## bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title}
 
 ## Author: jwe
 
 function grid (x)
 
   if (nargin == 0)
     gset grid;
   elseif (nargin == 1)
diff --git a/scripts/plot/hist.m b/scripts/plot/hist.m
--- a/scripts/plot/hist.m
+++ b/scripts/plot/hist.m
@@ -31,18 +31,17 @@
 ## with the width of the bins determined from the adjacent values in
 ## the vector.
 ## 
 ## Extreme values are lumped in the first and last bins.
 ## 
 ## With two output arguments, produce the values @var{nn} and @var{xx} such
 ## that @code{bar (@var{xx}, @var{nn})} will plot the histogram.
 ## @end deftypefn
-
-## See also: bar
+## @seealso{bar}
 
 ## Author: jwe
 
 function [nn, xx] = hist (y, x)
 
   if (nargin < 1 || nargin > 2)
     usage ("[nn, xx] = hist (y, x)");
   endif
diff --git a/scripts/plot/loglog.m b/scripts/plot/loglog.m
--- a/scripts/plot/loglog.m
+++ b/scripts/plot/loglog.m
@@ -18,19 +18,18 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} loglog (@var{args})
 ## Make a two-dimensional plot using log scales for both axes.  See the
 ## description of @code{plot} for a description of the arguments that
 ## @code{loglog} will accept.
 ## @end deftypefn
-
-## See also: plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
-##           gplot, gsplot, replot, xlabel, ylabel, title
+## @seealso{plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
+## gplot, gsplot, replot, xlabel, ylabel, title}
 
 ## Author: jwe
 
 function loglog (...)
 
   ## XXX FIXME XXX -- these plot states should really just be set
   ## temporarily, probably inside an unwind_protect block, but there is
   ## no way to determine their current values.
diff --git a/scripts/plot/mesh.m b/scripts/plot/mesh.m
--- a/scripts/plot/mesh.m
+++ b/scripts/plot/mesh.m
@@ -21,19 +21,18 @@
 ## @deftypefn {Function File} {} mesh (@var{x}, @var{y}, @var{z})
 ## Plot a mesh given matrices @code{x}, and @var{y} from @code{meshdom} and
 ## a matrix @var{z} corresponding to the @var{x} and @var{y} coordinates of
 ## the mesh.  If @var{x} and @var{y} are vectors, then a typical vertex
 ## is (@var{x}(j), @var{y}(i), @var{z}(i,j)).  Thus, columns of @var{z}
 ## correspond to different @var{x} values and rows of @var{z} correspond
 ## to different @var{y} values.
 ## @end deftypefn
-
-## See also: plot, semilogx, semilogy, loglog, polar, meshgrid, meshdom,
-##           contour, bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title
+## @seealso{plot, semilogx, semilogy, loglog, polar, meshgrid, meshdom,
+## contour, bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title}
 
 ## Author: jwe
 
 function mesh (x, y, z)
 
   ## XXX FIXME XXX -- the plot states should really just be set
   ## temporarily, probably inside an unwind_protect block, but there is
   ## no way to determine their current values.
diff --git a/scripts/plot/meshgrid.m b/scripts/plot/meshgrid.m
--- a/scripts/plot/meshgrid.m
+++ b/scripts/plot/meshgrid.m
@@ -12,28 +12,25 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: [xx, yy] = meshgrid (x, y)
-##
-## Given vectors of x and y coordinates, return two matrices corresponding
-## to the x and y coordinates of a mesh.  The rows of xx are copies of x,
-## and the columns of yy are copies of y.
-##
-## [xx, yy] = meshgrid (x) is an abbreviation for [xx, yy] = meshgrid (x, x).
-##
-## See sombrero.m for an example of using meshgrid.
-##
-## See also: plot, semilogx, semilogy, loglog, polar, mesh, meshdom, contour,
-##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title
+## -*- texinfo -*-
+## @deftypefn {Function File} {[@var{xx}, @var{yy}] =} meshgrid (@var{x}, @var{y})
+## @deftypefnx {Function File {[@var{xx}, @var{yy}] =} meshgrid (@var{x})
+## Given vectors of @var{x} and @var{y} coordinates, return two matrices corresponding
+## to the @var{x} and @var{y} coordinates of a mesh.  The rows of @var{xx} are copies of @var{x},
+## and the columns of @var{yy} are copies of @var{y}.
+## @end deftypefn
+## @seealso{sombrero, plot, semilogx, semilogy, loglog, polar, mesh, meshdom, contour,
+## bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title}
 
 ## Author: jwe
 
 function [xx, yy] = meshgrid (x, y)
 
   if (nargin == 1)
     y = x;
   endif
diff --git a/scripts/plot/plot.m b/scripts/plot/plot.m
--- a/scripts/plot/plot.m
+++ b/scripts/plot/plot.m
@@ -150,19 +150,18 @@
 ## 
 ## @example
 ## plot (b, "*")
 ## @end example
 ## 
 ## This command will plot the data in the variable @code{b} will be plotted
 ## with points displayed as @samp{*}.
 ## @end deftypefn
-
-## See also: semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__
-##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title
+## @seealso{semilogx, semilogy, loglog, polar, mesh, contour, __pltopt__
+## bar, stairs, gplot, gsplot, replot, xlabel, ylabel, title}
 
 ## Author: jwe
 
 function plot (...)
 
   ## XXX FIXME XXX -- these plot states should really just be set
   ## temporarily, probably inside an unwind_protect block, but there is
   ## no way to determine their current values.
diff --git a/scripts/plot/polar.m b/scripts/plot/polar.m
--- a/scripts/plot/polar.m
+++ b/scripts/plot/polar.m
@@ -19,19 +19,18 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} polar (@var{theta}, @var{rho}, @var{fmt})
 ## Make a two-dimensional plot given polar the coordinates @var{theta} and
 ## @var{rho}.
 ##
 ## The optional third argument specifies the line type.
 ## @end deftypefn
-
-## See also: plot, semilogx, semilogy, loglog, mesh, contour, bar,
-##           stairs, gplot, gsplot, replot, xlabel, ylabel, title
+## @seealso{plot, semilogx, semilogy, loglog, mesh, contour, bar,
+## stairs, gplot, gsplot, replot, xlabel, ylabel, title}
 
 ## Author: jwe
 
 function polar (x1, x2, fmt)
 
   ## XXX FIXME XXX -- these plot states should really just be set
   ## temporarily, probably inside an unwind_protect block, but there is
   ## no way to determine their current values.
diff --git a/scripts/plot/semilogx.m b/scripts/plot/semilogx.m
--- a/scripts/plot/semilogx.m
+++ b/scripts/plot/semilogx.m
@@ -18,19 +18,18 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} semilogx (@var{args})
 ## Make a two-dimensional plot using a log scale for the @var{x} axis.  See
 ## the description of @code{plot} for a description of the arguments
 ## that @code{semilogx} will accept.
 ## @end deftypefn
-
-## See also: plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
-##           gplot, gsplot, replot, xlabel, ylabel, title
+## @seealso{plot, semilogy, loglog, polar, mesh, contour, bar, stairs,
+## gplot, gsplot, replot, xlabel, ylabel, title}
 
 ## Author: jwe
 
 function semilogx (...)
 
   ## XXX FIXME XXX -- these plot states should really just be set
   ## temporarily, probably inside an unwind_protect block, but there is
   ## no way to determine their current values.
diff --git a/scripts/plot/semilogy.m b/scripts/plot/semilogy.m
--- a/scripts/plot/semilogy.m
+++ b/scripts/plot/semilogy.m
@@ -18,19 +18,18 @@
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} semilogy (@var{args})
 ## Make a two-dimensional plot using a log scale for the @var{y} axis.  See
 ## the description of @code{plot} for a description of the arguments
 ## that @code{semilogy} will accept.
 ## @end deftypefn
-
-## See also: plot, semilogx, loglog, polar, mesh, contour, bar, stairs,
-##           gplot, gsplot, replot, xlabel, ylabel, title
+## @seealso{plot, semilogx, loglog, polar, mesh, contour, bar, stairs,
+## gplot, gsplot, replot, xlabel, ylabel, title}
 
 ## Author: jwe
 
 function semilogy (...)
 
   ## XXX FIXME XXX -- these plot states should really just be set
   ## temporarily, probably inside an unwind_protect block, but there is
   ## no way to determine their current values.
diff --git a/scripts/plot/shg.m b/scripts/plot/shg.m
--- a/scripts/plot/shg.m
+++ b/scripts/plot/shg.m
@@ -12,23 +12,25 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: shg
+## -*- texinfo -*- 
+## @deftypefn {Function File} {} shg
 ##
 ## Show the graph window.  Currently, this is the same as executing
 ## replot without any arguments.
-##
-## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
-##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel
+## 
+## @end deftypefn 
+## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
+## bar, stairs, gplot, gsplot, replot, xlabel, ylabel}
 
 ## Author: jwe
 
 function shg ()
 
   if (nargin != 0)
     warning ("shg: ignoring extra arguments");
   endif
diff --git a/scripts/plot/stairs.m b/scripts/plot/stairs.m
--- a/scripts/plot/stairs.m
+++ b/scripts/plot/stairs.m
@@ -37,19 +37,18 @@
 ## @example
 ## [xs, ys] = stairs (x, y);
 ## plot (xs, ys);
 ## @end example
 ## 
 ## @noindent
 ## are equivalent.
 ## @end deftypefn
-
-## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
-##           bar, gplot, gsplot, replot, xlabel, ylabel, title
+## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
+## bar, gplot, gsplot, replot, xlabel, ylabel, title}
 
 ## Author: jwe
 
 function [xs, ys] = stairs (x, y)
 
 
   if (nargin == 1)
     if (is_vector (x))
diff --git a/scripts/plot/title.m b/scripts/plot/title.m
--- a/scripts/plot/title.m
+++ b/scripts/plot/title.m
@@ -17,19 +17,18 @@
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} title (@var{string})
 ## Specify a title for a plot.  If you already have a plot displayed, use
 ## the command @code{replot} to redisplay it with the new title.
 ## @end deftypefn
-
-## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
-##           bar, stairs, gplot, gsplot, replot, xlabel, ylabel
+## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
+## bar, stairs, gplot, gsplot, replot, xlabel, ylabel}
 
 ## Author: jwe
 
 function title (text)
 
   if (nargin != 1)
     usage ("title (text)");
   endif
diff --git a/scripts/plot/xlabel.m b/scripts/plot/xlabel.m
--- a/scripts/plot/xlabel.m
+++ b/scripts/plot/xlabel.m
@@ -20,19 +20,18 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} xlabel (@var{string})
 ## @deftypefnx {Function File} {} ylabel (@var{string})
 ## @deftypefnx {Function File} {} zlabel (@var{string})
 ## Specify x, y, and z axis labels for the plot.  If you already have a plot
 ## displayed, use the command @code{replot} to redisplay it with the new
 ## labels.
 ## @end deftypefn
-
-## See also: plot, semilogx, semilogy, loglog, polar, mesh, contour,
-##           bar, stairs, gplot, gsplot, replot, ylabel, title
+## @seealso{plot, semilogx, semilogy, loglog, polar, mesh, contour,
+## bar, stairs, gplot, gsplot, replot, ylabel, title}
 
 ## Author: jwe
 
 function xlabel (text)
 
   if (nargin != 1)
     usage ("xlabel (text)");
   endif
diff --git a/scripts/specfun/erfinv.m b/scripts/specfun/erfinv.m
--- a/scripts/specfun/erfinv.m
+++ b/scripts/specfun/erfinv.m
@@ -13,18 +13,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with this file.  If not, write to the Free Software Foundation,
 ## 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Mapping Function} {} erfinv (@var{z})
 ## Computes the inverse of the error function,
 ## @end deftypefn
-
-##  See also: erf, erfc
+## @seealso{erf, erfc}
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 27 September 1994
 ## Adapted-By: jwe
 
 function [y, iterations] = erfinv (x)
   
   if (nargin != 1)
diff --git a/scripts/specfun/gammai.m b/scripts/specfun/gammai.m
--- a/scripts/specfun/gammai.m
+++ b/scripts/specfun/gammai.m
@@ -39,18 +39,17 @@
 ## @end ifinfo
 ## 
 ## If @var{a} is scalar, then @code{gammai (@var{a}, @var{x})} is returned
 ## for each element of @var{x} and vice versa.
 ## 
 ## If neither @var{a} nor @var{x} is scalar, the sizes of @var{a} and
 ## @var{x} must agree, and @var{gammai} is applied element-by-element.
 ## @end deftypefn
-
-## See also: gamma, lgamma
+## @seealso{gamma, lgamma}
 
 ## Author: jwe
 ## Created: 30 Jan 1998
 
 function retval = gammai (a, x)
 
   if (nargin == 2)
     retval = gammainc (x, a);
diff --git a/scripts/specfun/log2.m b/scripts/specfun/log2.m
--- a/scripts/specfun/log2.m
+++ b/scripts/specfun/log2.m
@@ -23,18 +23,17 @@
 ## @tex
 ##  $1/2 <= |f| < 1$ and $x = f \cdot 2^e$.
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ##  1/2 <= abs(f) < 1 and x = f * 2^e.
 ## @end ifinfo
 ## @end deftypefn
-
-## See also: log, log10, logspace, exp
+## @seealso{log, log10, logspace, exp}
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 17 October 1994
 ## Adapted-By: jwe
 
 function [f, e] = log2 (x)
 
   if (nargin != 1)
diff --git a/scripts/specfun/pow2.m b/scripts/specfun/pow2.m
--- a/scripts/specfun/pow2.m
+++ b/scripts/specfun/pow2.m
@@ -31,18 +31,17 @@
 ## @tex
 ##  $f \cdot 2^e$.
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ##  f .* (2 .^ e).
 ## @end ifinfo
 ## @end deftypefn
-
-## See also: nextpow2
+## @seealso{nextpow2}
 
 ## Author: AW <Andreas.Weingessel@ci.tuwien.ac.at>
 ## Created: 17 October 1994
 ## Adapted-By: jwe
 
 function y = pow2 (f, e)
   
   if (nargin == 1)
diff --git a/scripts/special-matrix/hankel.m b/scripts/special-matrix/hankel.m
--- a/scripts/special-matrix/hankel.m
+++ b/scripts/special-matrix/hankel.m
@@ -39,18 +39,17 @@
 ## @example
 ## @group
 ## H (i, j) = c (i+j-1),  i+j-1 <= m;
 ## H (i, j) = r (i+j-m),  otherwise
 ## @end group
 ## @end example
 ## @end ifinfo
 ## @end deftypefn
-
-## See also: vander, sylvester_matrix, hilb, invhilb, toeplitz
+## @seealso{vander, sylvester_matrix, hilb, invhilb, toeplitz}
 
 ## Author: jwe
 
 function retval = hankel (c, r)
 
   if (nargin == 1)
     r = zeros (size (c));
   elseif (nargin != 2)
diff --git a/scripts/special-matrix/hilb.m b/scripts/special-matrix/hilb.m
--- a/scripts/special-matrix/hilb.m
+++ b/scripts/special-matrix/hilb.m
@@ -38,18 +38,17 @@
 ## @end iftex
 ## @ifinfo
 ## 
 ## @example
 ## H (i, j) = 1 / (i + j - 1)
 ## @end example
 ## @end ifinfo
 ## @end deftypefn
-
-## See also: hankel, vander, sylvester_matrix, invhilb, toeplitz
+## @seealso{hankel, vander, sylvester_matrix, invhilb, toeplitz}
 
 ## Author: jwe
 
 function retval = hilb (n)
 
 
   if (nargin != 1)
     usage ("hilb (n)");
diff --git a/scripts/special-matrix/invhilb.m b/scripts/special-matrix/invhilb.m
--- a/scripts/special-matrix/invhilb.m
+++ b/scripts/special-matrix/invhilb.m
@@ -19,18 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} invhilb (@var{n})
 ## Return the inverse of a Hilbert matrix of order @var{n}.  This is exact.
 ## Compare with the numerical calculation of @code{inverse (hilb (n))},
 ## which suffers from the ill-conditioning of the Hilbert matrix, and the
 ## finite precision of your computer's floating point arithmetic.
 ## @end deftypefn
-
-## See also: hankel, vander, sylvester_matrix, hilb, toeplitz
+## @seealso{hankel, vander, sylvester_matrix, hilb, toeplitz}
 
 ## Author: jwe
 
 function retval = invhilb (n)
 
   if (nargin != 1)
     usage ("invhilb (n)");
   endif
diff --git a/scripts/special-matrix/sylvester_matrix.m b/scripts/special-matrix/sylvester_matrix.m
--- a/scripts/special-matrix/sylvester_matrix.m
+++ b/scripts/special-matrix/sylvester_matrix.m
@@ -24,18 +24,17 @@
 ## @tex
 ## $n = 2^k$.
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ## n = 2^k.
 ## @end ifinfo
 ## @end deftypefn
-
-## See also: hankel, vander, hilb, invhilb, toeplitz
+## @seealso{hankel, vander, hilb, invhilb, toeplitz}
 
 ## Author: jwe
 
 function retval = sylvester_matrix (k)
 
   if (nargin != 1)
     usage ("sylvester_matrix (n)");
   endif
diff --git a/scripts/special-matrix/toeplitz.m b/scripts/special-matrix/toeplitz.m
--- a/scripts/special-matrix/toeplitz.m
+++ b/scripts/special-matrix/toeplitz.m
@@ -48,18 +48,17 @@
 ##  .                       .
 ##  .                       .
 ## 
 ## c(n) c(n-1) c(n-2) ...  c(0)
 ## @end group
 ## @end example
 ## @end ifinfo
 ## @end deftypefn
-
-## See also: hankel, vander, sylvester_matrix, hilb, invhib
+## @seealso{hankel, vander, sylvester_matrix, hilb, invhib}
 
 ## Author: jwe
 
 function retval = toeplitz (c, r)
 
   if (nargin == 1)
     r = c;
   elseif (nargin != 2)
diff --git a/scripts/special-matrix/vander.m b/scripts/special-matrix/vander.m
--- a/scripts/special-matrix/vander.m
+++ b/scripts/special-matrix/vander.m
@@ -42,18 +42,17 @@
 ##  .           .      .    .
 ##  .           .      .    .
 ##                  
 ## c(n)^n ... c(n)^2  c(n)  1
 ## @end group
 ## @end example
 ## @end ifinfo
 ## @end deftypefn
-
-## See also: hankel, sylvester_matrix, hilb, invhilb, toeplitz
+## @seealso{hankel, sylvester_matrix, hilb, invhilb, toeplitz}
 
 ## Author: jwe
 
 function retval = vander (c)
 
   if (nargin != 1)
     usage ("vander (c)");
   endif
diff --git a/scripts/statistics/base/median.m b/scripts/statistics/base/median.m
--- a/scripts/statistics/base/median.m
+++ b/scripts/statistics/base/median.m
@@ -38,18 +38,17 @@
 ## median(x) = 
 ##             (x(N/2) + x((N/2)+1))/2,  N even
 ## @end group
 ## @end example
 ## @end ifinfo
 ## If @var{x} is a matrix, compute the median value for each
 ## column and return them in a row vector.
 ## @end deftypefn
-
-## See also: std, mean
+## @seealso{std, mean}
 
 ## Author: jwe
 
 function retval = median (a)
 
   if (nargin != 1)
     usage ("median (a)");
   endif
diff --git a/scripts/statistics/base/std.m b/scripts/statistics/base/std.m
--- a/scripts/statistics/base/std.m
+++ b/scripts/statistics/base/std.m
@@ -34,18 +34,17 @@
 ## @group
 ## std (x) = sqrt (sumsq (x - mean (x)) / (n - 1))
 ## @end group
 ## @end example
 ## @end ifinfo
 ## If @var{x} is a matrix, compute the standard deviation for
 ## each column and return them in a row vector.
 ## @end deftypefn
-
-## See also: mean, median
+## @seealso{mean, median}
 
 ## Author: jwe
 
 function retval = std (a)
 
   if (nargin != 1)
     usage ("std (a)");
   endif
diff --git a/scripts/strings/isletter.m b/scripts/strings/isletter.m
--- a/scripts/strings/isletter.m
+++ b/scripts/strings/isletter.m
@@ -12,19 +12,20 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: isletter (s)
-##
-## See also: isalpha
+## @deftypefn {Function File } { @var{bool} =} isletter(@var{s})
+## Returns true if @var{s} is a letter false otherwise.  
+## @end deftypefn
+## @seealso{isalpha}
 
 ## Author: jwe
 
 function retval = isletter (s)
 
   if (nargin != 1)
     usage ("isletter (s)");
   endif
diff --git a/scripts/strings/lower.m b/scripts/strings/lower.m
--- a/scripts/strings/lower.m
+++ b/scripts/strings/lower.m
@@ -12,19 +12,19 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: lower (s)
-##
-## See also: tolower
+## @deftypefn {Function File} {@var{s} =} lower(@var{S})
+## @end deftypefn
+## @seealso{tolower}
 
 ## Author: jwe
 
 function retval = lower (s)
 
   if (nargin != 1)
     usage ("lower (s)");
   endif
diff --git a/scripts/strings/upper.m b/scripts/strings/upper.m
--- a/scripts/strings/upper.m
+++ b/scripts/strings/upper.m
@@ -12,19 +12,20 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
-## usage: upper (s)
-##
-## See also: toupper
+## @deftypefn {Function File} {@var{S} =} upper(@var{s})
+## Transform all letters in a string to upper case.
+## @end deftypefn
+## @seealso{toupper}
 
 ## Author: jwe
 
 function retval = upper (s)
 
   if (nargin != 1)
     usage ("upper (s)");
   endif
