# HG changeset patch
# User Rik <rik@octave.org>
# Date 1348422368 25200
#      Sun Sep 23 10:46:08 2012 -0700
# Node ID e39a51e0d54b5e77eaa4594932d82d9ef73e5b2e
# Parent  32fd3137805252249604aa92dc1fe569f0969797
# Parent  c9954a15bc030932c945e8ad4fc52fb9eebd1e84
maint: Merge stable to default to pick up quadcc bug fix.

diff --git a/libinterp/corefcn/quadcc.cc b/libinterp/corefcn/quadcc.cc
--- a/libinterp/corefcn/quadcc.cc
+++ b/libinterp/corefcn/quadcc.cc
@@ -1715,17 +1715,17 @@ Mathematical Software, Vol. 37, Issue 3,
               nans[nnans++] = i;
               iv->fx[i] = 0.0;
             }
         }
       Vinvfx (iv->fx, &(iv->c[idx[3]]), 3);
       Vinvfx (iv->fx, &(iv->c[idx[2]]), 2);
       Vinvfx (iv->fx, &(iv->c[0]), 0);
       for (i = 0; i < nnans; i++)
-        iv->fx[i] = octave_NaN;
+        iv->fx[nans[i]] = octave_NaN;
       iv->a = iivals[j];
       iv->b = iivals[j + 1];
       iv->depth = 3;
       iv->rdepth = 1;
       iv->ndiv = 0;
       iv->igral = 2 * h * iv->c[idx[3]] * w;
       nc = 0.0;
       for (i = n[2] + 1; i <= n[3]; i++)
@@ -1844,17 +1844,17 @@ Mathematical Software, Vol. 37, Issue 3,
 
           /* Compute the new coefficients. */
           Vinvfx (iv->fx, &(iv->c[idx[d]]), d);
           /* Downdate any NaNs. */
           if (nnans > 0)
             {
               downdate (&(iv->c[idx[d]]), n[d], d, nans, nnans);
               for (i = 0; i < nnans; i++)
-                iv->fx[i] = octave_NaN;
+                iv->fx[nans[i]] = octave_NaN;
             }
 
           /* Compute the error estimate. */
           nc = 0.0;
           for (i = n[d - 1] + 1; i <= n[d]; i++)
             {
               temp = iv->c[idx[d] + i];
               nc += temp * temp;
@@ -1989,17 +1989,17 @@ Mathematical Software, Vol. 37, Issue 3,
                   ivl->fx[i] = 0.0;
                 }
             }
           Vinvfx (ivl->fx, ivl->c, 0);
           if (nnans > 0)
             {
               downdate (ivl->c, n[0], 0, nans, nnans);
               for (i = 0; i < nnans; i++)
-                ivl->fx[i] = octave_NaN;
+                ivl->fx[nans[i]] = octave_NaN;
             }
           for (i = 0; i <= n[d]; i++)
             {
               ivl->c[idx[d] + i] = 0.0;
               for (j = i; j <= n[d]; j++)
                 ivl->c[idx[d] + i] += Tleft[i * 33 + j] * iv->c[idx[d] + j];
             }
           ncdiff = 0.0;
@@ -2085,17 +2085,17 @@ Mathematical Software, Vol. 37, Issue 3,
                   ivr->fx[i] = 0.0;
                 }
             }
           Vinvfx (ivr->fx, ivr->c, 0);
           if (nnans > 0)
             {
               downdate (ivr->c, n[0], 0, nans, nnans);
               for (i = 0; i < nnans; i++)
-                ivr->fx[i] = octave_NaN;
+                ivr->fx[nans[i]] = octave_NaN;
             }
           for (i = 0; i <= n[d]; i++)
             {
               ivr->c[idx[d] + i] = 0.0;
               for (j = i; j <= n[d]; j++)
                 ivr->c[idx[d] + i] += Tright[i * 33 + j] * iv->c[idx[d] + j];
             }
           ncdiff = 0.0;
@@ -2250,16 +2250,29 @@ Mathematical Software, Vol. 37, Issue 3,
 %!assert (quadcc (@sin, -pi, 0), -2, 1e-6)
 %!assert (quadcc (@sin, 0, pi), 2, 1e-6)
 %!assert (quadcc (@(x) 1./sqrt (x), 0, 1), 2, 1e-6)
 %!assert (quadcc (@(x) 1./(sqrt (x).*(x+1)), 0, Inf), pi, 1e-6)
 
 %!assert (quadcc (@(x) exp (-x .^ 2), -Inf, Inf), sqrt (pi), 1e-6)
 %!assert (quadcc (@(x) exp (-x .^ 2), -Inf, 0), sqrt (pi)/2, 1e-6)
 
+## Test function with NaNs in interval 
+%!function y = __nansin (x)
+%!  nan_locs = [-3*pi/4, -pi/4, 0, pi/3, pi/2, pi];
+%!  y = sin (x);
+%!  idx = min (abs (bsxfun (@minus, x(:), nan_locs)), [], 2); 
+%!  y(idx < 1e-10) = NaN;
+%!endfunction 
+
+%!test
+%! [q, err, npoints] = quadcc ("__nansin", -pi, pi); 
+%! assert (q, 0, eps);
+%! assert (err, 0, 15*eps);
+
 %% Test input validation
 %!error (quadcc ())
 %!error (quadcc (@sin))
 %!error (quadcc (@sin, 0))
 %!error (quadcc (@sin, ones (2), pi))
 %!error (quadcc (@sin, -i, pi))
 %!error (quadcc (@sin, 0, ones (2)))
 %!error (quadcc (@sin, 0, i))
