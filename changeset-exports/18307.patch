# HG changeset patch
# User Rik <rik@octave.org>
# Date 1390099109 28800
#      Sat Jan 18 18:38:29 2014 -0800
# Node ID a97ed15d1ea8fd235a37ec828bcdf600a00f2e38
# Parent  122239398a03e7e6fcd9b0182738f668c55ed04c
__patch__.m: Follow Octave coding conventions.

__patch__.m: Follow Octave coding conventions.

diff --git a/scripts/plot/draw/private/__patch__.m b/scripts/plot/draw/private/__patch__.m
--- a/scripts/plot/draw/private/__patch__.m
+++ b/scripts/plot/draw/private/__patch__.m
@@ -65,30 +65,30 @@ function [h, failed] = __patch__ (p, var
         z = varargin{3};
         c = varargin{4};
         iarg = 5;
       elseif (nargin > 3 && all (is_numeric_arg(1:3)))
         x = varargin{1};
         y = varargin{2};
         iarg = 4;
         if (rem (nargin - iarg, 2) == 1)
-          c = varargin {iarg};
+          c = varargin{iarg};
           z = varargin{3};
           iarg = 5;
         else
           z = [];
           c = varargin{3};
         endif
       elseif (nargin > 2 && all (is_numeric_arg(1:2)))
         x = varargin{1};
         y = varargin{2};
         z = [];
         iarg = 3;
         if (rem (nargin - iarg, 2) == 1)
-          c = varargin {iarg};
+          c = varargin{iarg};
           iarg++; 
         else
           c = [];
         endif
       endif
 
       if (isvector (x))
         x = x(:);
@@ -122,17 +122,17 @@ function [h, failed] = __patch__ (p, var
             args{9} = "cdata";
             args{10} = c;
           elseif (isnumeric (c))
             args{7} = "facecolor";
             args{8} = "flat";
             args{9} = "cdata";
             args{10} = c;
           else
-            error ("patch: color value not valid");
+            error ("patch: color data C must be numeric");
           endif
         elseif (isvector (c) && numel (c) == 3)
           args{7} = "facecolor";
           args{8} = c;
           args{9} = "cdata";
           args{10} = [];
         elseif (ndims (c) == 3 && size (c, 3) == 3)
           ## CDATA is specified as RGB data
@@ -145,37 +145,36 @@ function [h, failed] = __patch__ (p, var
             args{10} = c;
           elseif (rows (c) == rows (x) && columns (c) == columns (x))
             ## Per-vertex color
             args{7} = "facecolor";
             args{8} = "interp";
             args{9} = "cdata";
             args{10} = c;
           else
-            error ("patch: color value not valid");
+            error ("patch: Invalid TrueColor data C");
           endif
         else
           ## Color Vectors
           if (isempty (c))
             args{7} = "facecolor";
             args{8} = "interp";
             args{9} = "cdata";
             args{10} = [];
-          elseif (isequal (size (c), size (x)) && isequal (size (c), size (y)))
+          elseif (size_equal (c, x) && size_equal (c, y))
             args{7} = "facecolor";
             args{8} = "interp";
             args{9} = "cdata";
             args{10} = c;
           else
-            error ("patch: size of x, y, and c must be equal");
+            error ("patch: size of X, Y, and C must be equal");
           endif
         endif
       elseif (ischar (c) && rem (nargin - iarg, 2) == 0)
-        ## Assume that any additional argument over an even number is
-        ## color string.
+        ## Assume any additional argument over an even number is a color string.
         args{7} = "facecolor";
         args{8} =  tolower (c);
         args{9} = "cdata";
         args{10} = [];
       else
         args{7} = "facecolor";
         args{8} = [0, 1, 0];
         args{9} = "cdata";
@@ -190,17 +189,17 @@ function [h, failed] = __patch__ (p, var
     if (any (strcmpi (args, "faces") | strcmpi (args, "vertices")))
       args = setdata (args);
     else
       args = setvertexdata (args);
     endif
   endif
 
   if (!failed)
-    h = __go_patch__ (p, args {:});
+    h = __go_patch__ (p, args{:});
 
     ## Setup listener functions
     addlistener (h, "xdata", @update_data);
     addlistener (h, "ydata", @update_data);
     addlistener (h, "zdata", @update_data);
     addlistener (h, "cdata", @update_data);
 
     addlistener (h, "faces", @update_fvc);
@@ -224,42 +223,42 @@ function args = setdata (args)
   args = delfields (args, {"xdata", "ydata", "zdata", "cdata"});
   ## Remove the readonly fields as well
   args = delfields (args, {"type", "uicontextmenu"});
   nargs = length (args);
   idx = find (strcmpi (args, "faces"), 1, "last") + 1;
   if (idx > nargs)
     faces = [];
   else
-    faces = args {idx};
+    faces = args{idx};
   endif
   idx = find (strcmpi (args, "vertices"), 1, "last") + 1;
   if (idx > nargs)
     vert = [];
   else
-    vert = args {idx};
+    vert = args{idx};
   endif
   idx = find (strcmpi (args, "facevertexcdata"), 1, "last") + 1;
   if (isempty (idx) || idx > nargs)
     fvc = [];
   else
-    fvc = args {idx};
+    fvc = args{idx};
   endif
   idx = find (strcmpi (args, "facecolor"), 1, "last") + 1;
   if (isempty (idx) || idx > nargs)
     if (!isempty (fvc))
       fc = "flat";
     else
       fc = [0, 1, 0];
     endif
     args = {"facecolor", fc, args{:}};
   endif
 
   nc = rows (faces);
-  idx = faces .';
+  idx = faces.';
   t1 = isnan (idx);
   for i = find (any (t1))
     first_idx_in_column = find (t1(:,i), 1);
     idx(first_idx_in_column:end,i) = idx(first_idx_in_column-1,i);
   endfor
   x = reshape (vert(:,1)(idx), size (idx));
   y = reshape (vert(:,2)(idx), size (idx));
   if (columns (vert) > 2)
@@ -268,78 +267,78 @@ function args = setdata (args)
     z = [];
   endif
 
   if (rows (fvc) == nc || rows (fvc) == 1)
     c = reshape (fvc, [1, size(fvc)]);
   else
     if (columns (fvc) == 3)
       c = cat (3, reshape (fvc(idx, 1), size (idx)),
-               reshape (fvc(idx, 2), size (idx)),
-               reshape (fvc(idx, 3), size (idx)));
+                  reshape (fvc(idx, 2), size (idx)),
+                  reshape (fvc(idx, 3), size (idx)));
     elseif (isempty (fvc))
       c = [];
-    else ## if (columnns (fvc) == 1)
+    else  ## if (columnns (fvc) == 1)
       c = permute (fvc(faces), [2, 1]);
     endif
   endif
   args = {"xdata", x, "ydata", y, "zdata", z, "cdata", c, args{:}};
 endfunction
 
 function args = setvertexdata (args)
   args = delfields (args, {"vertices", "faces", "facevertexcdata"});
   ## Remove the readonly fields as well
   args = delfields (args, {"type", "uicontextmenu"});
   nargs = length (args);
   idx = find (strcmpi (args, "xdata"), 1, "last") + 1;
   if (idx > nargs)
     x = [];
   else
-    x = args {idx};
+    x = args{idx};
   endif
   idx = find (strcmpi (args, "ydata"), 1, "last") + 1;
   if (idx > nargs)
     y = [];
   else
-    y = args {idx};
+    y = args{idx};
   endif
   idx = find (strcmpi (args, "zdata"), 1, "last") + 1;
   if (isempty (idx) || idx > nargs)
     z = [];
   else
-    z = args {idx};
+    z = args{idx};
   endif
   idx = find (strcmpi (args, "cdata"), 1, "last") + 1;
   if (isempty (idx) || idx > nargs)
     c = [];
   else
-    c = args {idx};
+    c = args{idx};
   endif
   idx = find (strcmpi (args, "facecolor"), 1, "last") + 1;
   if (isempty (idx) || idx > nargs)
     if (!isempty (c))
       fc = "flat";
     else
       fc = [0, 1, 0];
     endif
     args = {"facecolor", fc, args{:}};
   endif
 
   [nr, nc] = size (x);
   if (nr == 1 && nc > 1)
     nr = nc;
     nc = 1;
   endif
-  if (!isempty (z))
+  if (isempty (z))
+    vert = [x(:), y(:)];
+  else
     vert = [x(:), y(:), z(:)];
-  else
-    vert = [x(:), y(:)];
   endif
   faces = reshape (1:numel (x), nr, nc);
-  faces = faces';
+  faces = faces.';
 
   if (ndims (c) == 3)
     fvc = reshape (c, rows (c) * columns (c), size (c, 3));
   else
     fvc = c(:);
   endif
 
   args = {"faces", faces, "vertices", vert, "facevertexcdata", fvc, args{:}};
