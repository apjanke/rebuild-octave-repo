# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1272052652 14400
#      Fri Apr 23 15:57:32 2010 -0400
# Node ID f88e3d5d88e22aecf5e7032de6263cad0e2d1207
# Parent  394a83606f03765d7b7aa6783bc4f23d0c6671a3
avoid GCC warnings

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2010-04-23  John W. Eaton  <jwe@octave.org>
+
+	* gethelp.cc (extract_help_text): Use C++ static_cast instead of
+	C-style cast.
+
 2010-04-23  Rik <octave@nomad.inbox5.com>
 
    * scripts/*.m: Untabify scripts
 
 2010-04-23  Rik <octave@nomad.inbox5.com>
 
    * scripts/geometry/griddata.m, scripts/geometry/griddatan.m, 
      scripts/geometry/tsearchn.m: Replace nan with NaN for nice visual cue
diff --git a/scripts/gethelp.cc b/scripts/gethelp.cc
--- a/scripts/gethelp.cc
+++ b/scripts/gethelp.cc
@@ -68,17 +68,17 @@ extract_help_text (void)
             begin_comment = false;
         }
 
       if (in_comment)
         {
           if (! have_help_text)
             {
               first_comments_seen = true;
-              help_txt += (char) c;
+              help_txt += static_cast<char> (c);
             }
 
           if (c == '\n')
             {
               in_comment = false;
               discard_space = true;
 
               if ((c = std::cin.get ()) != EOF)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2010-04-23  John W. Eaton  <jwe@octave.org>
+
+	* txt-eng-ft.cc (ft_render::visit): Declare loop counter size_t,
+	not int.
+
+	* graphics.h.in (graphics_xform::untransform):  Likewise.
+	* graphics.cc (text::properties::update_text_extent): Likewise.
+	* DLD-FUNCTIONS/fltk_backend.cc	(plot_window::set_axes_currentpoint):
+	Avoid GCC shadow variable warning.
+
+	* DLD-FUNCTIONS (plot_window::plot_window): Explicitly
+	initialize all data members in the order they are declared..
+
 2010-04-23  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/gcd.cc (Fgcd): Use two-argument dim_vector constructor.
 
 	* ov-str-mat.cc (octave_char_matrix_str::do_index_op_internal):
 	Explicitly create idx_vec with column orientation.
 
 	* oct-obj.cc (octave_value_list::octave_value_list):
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -213,17 +213,19 @@ private:
 
 // Parameter controlling how fast we zoom when using the scrool wheel.
 static double wheel_zoom_speed = 0.05;
 
 class plot_window : public Fl_Window
 {
 public:
   plot_window (int _x, int _y, int _w, int _h, figure::properties& _fp)
-    : Fl_Window (_x, _y, _w, _h, "octave"), fp (_fp), shift (0)
+    : Fl_Window (_x, _y, _w, _h, "octave"), window_label (), shift (0),
+      fp (_fp), canvas (0), autoscale (0), togglegrid (0), help (0),
+      status (0)
   {
     callback (window_close, static_cast<void*> (this));
 
     begin ();
     {
       canvas = new
         OpenGL_fltk (0, 0, _w , _h - status_h, number ());
 
@@ -460,24 +462,24 @@ private:
     fp.set_currentpoint (pos);
   }
 
   void set_axes_currentpoint (graphics_object ax, int px, int py)
   {
     axes::properties& ap = 
       dynamic_cast<axes::properties&> (ax.get_properties ());
     
-    double x, y;
-    pixel2pos (ax, px, py, x, y);
+    double xx, yy;
+    pixel2pos (ax, px, py, xx, yy);
 
     Matrix pos (2,3,0);
-    pos(0,0) = x;
-    pos(1,0) = y;
-    pos(0,1) = x;
-    pos(1,1) = y;
+    pos(0,0) = xx;
+    pos(1,0) = yy;
+    pos(0,1) = xx;
+    pos(1,1) = yy;
 
     ap.set_currentpoint (pos);
   }
 
   int key2shift (int key)
   {
     if (key == FL_Shift_L || key == FL_Shift_R)
       return FL_SHIFT;
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -4245,25 +4245,25 @@ text::properties::update_text_extent (vo
   // FIXME: parsed content should be cached for efficiency
   
   elt = text_parser_none ().parse (get_string ());
 #ifdef HAVE_FONTCONFIG
   text_renderer.set_font (*this);
 #endif
   box = text_renderer.get_extent (elt, get_rotation ());
 
-  Matrix extent (1, 4, 0.0);
+  Matrix ext (1, 4, 0.0);
 
   // FIXME: also handle left and bottom components
 
-  extent(0) = extent(1) = 1;
-  extent(2) = box(0);
-  extent(3) = box(1);
-
-  set_extent (extent);
+  ext(0) = ext(1) = 1;
+  ext(2) = box(0);
+  ext(3) = box(1);
+
+  set_extent (ext);
 
 #endif
 }
 
 void
 text::properties::update_units (void)
 {
   if (! units_is ("data"))
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -2738,23 +2738,23 @@ public:
       return *this;
     }
 
   static ColumnVector xform_vector (double x, double y, double z);
 
   static Matrix xform_eye (void);
 
   ColumnVector transform (double x, double y, double z,
-                          bool scale = true) const;
+                          bool use_scale = true) const;
   
   ColumnVector untransform (double x, double y, double z,
-                            bool scale = true) const;
+                            bool use_scale = true) const;
   
-  ColumnVector untransform (double x, double y, bool scale = true) const
-    { return untransform (x, y, (zlim(0)+zlim(1))/2, scale); }
+  ColumnVector untransform (double x, double y, bool use_scale = true) const
+    { return untransform (x, y, (zlim(0)+zlim(1))/2, use_scale); }
 
   Matrix xscale (const Matrix& m) const { return sx.scale (m); }
   Matrix yscale (const Matrix& m) const { return sy.scale (m); }
   Matrix zscale (const Matrix& m) const { return sz.scale (m); }
 
   Matrix scale (const Matrix& m) const
     {
       bool has_z = (m.columns () > 2);
diff --git a/src/txt-eng-ft.cc b/src/txt-eng-ft.cc
--- a/src/txt-eng-ft.cc
+++ b/src/txt-eng-ft.cc
@@ -261,17 +261,17 @@ ft_render::set_mode (int m)
 void
 ft_render::visit (text_element_string& e)
 {
   if (face)
     {
       std::string str = e.string_value ();
       FT_UInt glyph_index, previous = 0;
 
-      for (int i = 0; i < str.length (); i++)
+      for (size_t i = 0; i < str.length (); i++)
         {
           glyph_index = FT_Get_Char_Index (face, str[i]);
 
           if (! glyph_index
               || FT_Load_Glyph (face, glyph_index, FT_LOAD_DEFAULT))
             ::warning ("ft_render: skipping missing glyph for character `%c'",
                        str[i]);
           else
