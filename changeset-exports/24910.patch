# HG changeset patch
# User Colin Macdonald <cbm@m.fsf.org>
# Date 1516749564 28800
#      Tue Jan 23 15:19:24 2018 -0800
# Branch stable
# Node ID b98755ef7572364196ed7d73fac5a02d31c73496
# Parent  4a341330ee156bd4b987bf7840b8b15209a5b517
Style changes in sinint/cosint.

sinint.m: stylistic changes and a few minor typos.
cosint.m: stylistic changes and a few minor typos.

diff --git a/scripts/specfun/cosint.m b/scripts/specfun/cosint.m
--- a/scripts/specfun/cosint.m
+++ b/scripts/specfun/cosint.m
@@ -77,41 +77,40 @@ function [y] = cosint (x)
   endif
 
   sz = size (x);
   x = x(:);
   y = zeros (size (x));
 
   i_miss = true (length (x), 1);
 
-  # Trivial values
+  ## special values
   y(x == 0) = - Inf;
   y(x == Inf) = 0;
   y(x == - Inf) = 1i * pi;
 
   i_miss = ((i_miss) & (x != 0) & (x != Inf) & (x != - Inf));
 
-  # For values large in module and not in (-oo,0),we use the relation
-  # with expint
+  ## For values large in modulus and not in (-oo,0), we use the relation
+  ## with expint
 
   flag_large = (abs (x) > 2 & ((abs (imag (x)) > 1e-15) | real (x) > 0));
   xx = x(flag_large);
 
-  # Abramowitz, relation 5.2.20
+  ## Abramowitz, relation 5.2.20
   ii_sw = (real (xx) <= 0 & imag (xx) <= 0);
   xx(ii_sw) = conj (xx(ii_sw));
   ii_nw = (real (xx) < 0);
   xx(ii_nw) *= -1;
   yy = -0.5 * (expint (1i * xx) + expint (-1i * xx));
   yy(ii_nw) += 1i * pi;
   yy(ii_sw) = conj (yy(ii_sw));
   y(i_miss & flag_large) = yy;
 
-  # For values small in module we use the series expansion
-
+  ## For values small in modulus, use the series expansion (also near (-oo, 0])
   i_miss = ((i_miss) & (!flag_large));
   xx = x(i_miss);
   ssum = - xx .^ 2 / 4; # First term of the series expansion
   gma = 0.57721566490153286060651209008; # Euler gamma constant
   yy = gma + log (xx) + ssum;
   flag_sum = true (nnz (i_miss), 1);
   it = 1;
   maxit = 300;
@@ -123,31 +122,31 @@ function [y] = cosint (x)
   endwhile
 
   y(i_miss) = yy;
 
   y = reshape (y, sz);
 
 endfunction
 
+
 %!assert (cosint (1.1), 0.38487337742465081550, 2 * eps);
 
-
 %!test
 %! x = [2, 3, pi; exp(1), 5, 6];
 %! A = cosint (x);
 %! B = [0.422980828774864996, 0.119629786008000328, 0.0736679120464254860; ...
 %!      0.213958001340379779, -0.190029749656643879, -0.0680572438932471262];
 %! assert (A, B, -5e-15);
 
 %!assert (cosint (0), - Inf)
 %!assert (cosint (inf), 0)
 %!assert (cosint (-inf), 1i * pi)
 
-%%tests against maple
+##tests against maple
 %!assert (cosint (1), 0.337403922900968135, -2*eps)
 %!assert (cosint (-1), 0.337403922900968135 + 3.14159265358979324*I, -2*eps)
 %!assert (cosint (pi), 0.0736679120464254860, -2*eps)
 %!assert (cosint (-pi), 0.0736679120464254860 + 3.14159265358979324*I, -2*eps)
 %!assert (cosint (300), -0.00333219991859211178, -2*eps)
 %!assert (cosint (1e4), -0.0000305519167244852127, -2*eps)
 %!assert (cosint (20i), 1.28078263320282944e7 + 1.57079632679489662*I, -2*eps)
 
diff --git a/scripts/specfun/sinint.m b/scripts/specfun/sinint.m
--- a/scripts/specfun/sinint.m
+++ b/scripts/specfun/sinint.m
@@ -56,37 +56,37 @@ function [y] = sinint (x)
   endif
 
   sz = size (x);
   x = x(:);
   y = zeros (size (x));
 
   i_miss = true (length (x), 1);
 
-  # Trivial values
+  ## Trivial values
   y(x == 0) = 0;
   y(x == Inf) = pi / 2;
   y(x == - Inf) = - pi / 2;
 
   i_miss = ((i_miss) & (x != 0) & (x != Inf) & (x != - Inf));
 
-  # For values large in module we use the relation with expint
+  ## For values large in modulus we use the relation with expint
 
   flag_large = abs (x) > 2;
   xx = x(flag_large & i_miss);
   ii_neg = (real (xx) < 0);
   xx(ii_neg) *= -1;
   ii_conj = ((real (xx) == 0) & (imag (xx) < 0));
   xx(ii_conj) = conj (xx(ii_conj));
   yy = -0.5i * (expint (1i * xx) - expint (-1i * xx)) + pi / 2;
   yy(ii_neg) *= -1;
   yy(ii_conj) = conj (yy(ii_conj));
   y(i_miss & flag_large) = yy;
 
-  # For values small in module we use the series expansion
+  ## For values small in modulus we use the series expansion
 
   i_miss = ((i_miss) & (!flag_large));
   xx = x(i_miss);
   ssum = xx; # First term of the series expansion
   yy = ssum;
   flag_sum = true (nnz (i_miss), 1);
   it = 0;
   maxit = 300;
@@ -98,16 +98,17 @@ function [y] = sinint (x)
   endwhile
 
   y(i_miss) = yy;
 
   y = reshape (y, sz);
 
 endfunction
 
+
 %!test
 %! x = 1.1;
 %! %y = sym(11)/10;
 %! A = sinint (x);
 %! %B = double (sinint (y));
 %! B = 1.02868521867373;
 %! assert (A, B, -5e-15);
 
@@ -119,36 +120,36 @@ endfunction
 %! B = [1.60541297680269, 1.84865252799947, 1.85193705198247e+00; ...
 %!      1.82104026914757, 1.54993124494467, 1.42468755128051e+00];
 %! assert (A, B, -5e-15);
 
 %!assert (sinint (0), 0)
 %!assert (sinint (inf), pi/2)
 %!assert (sinint (-inf), -pi/2)
 
-%%tests against maple
+##tests against maple
 %!assert (sinint (1), 0.9460830703671830149414, -2*eps)
 %!assert (sinint (-1), -0.9460830703671830149414, -2*eps)
 %!assert (sinint (pi), 1.851937051982466170361, -2*eps)
 %!assert (sinint (-pi), -1.851937051982466170361, -2*eps)
 %!assert (sinint (300), 1.5708810882137495193, -2*eps)
 %!assert (sinint (1e4), 1.5708915453859619157, -2*eps)
 %!assert (sinint (20i), 1.2807826332028294459e7*1i, -2*eps)
 
 %!test
-%! x = (0:4) ';
+%! x = (0:4)';
 %! y_ex = [0
 %!         0.946083070367183015
 %!         1.60541297680269485
 %!         1.84865252799946826
 %!         1.75820313894905306];
 %! assert (sinint (x), y_ex, -4*eps);
 
 %!test
-%! x = -(0:4) ';
+%! x = -(0:4)';
 %! y_ex = - [0
 %!           0.946083070367183015
 %!           1.60541297680269485
 %!           1.84865252799946826
 %!           1.75820313894905306];
 %! assert (sinint (x), y_ex, -4*eps);
 
 %!test
