# HG changeset patch
# User Julien Bect <jbect@users.sourceforge.net>
# Date 1546443466 -3600
#      Wed Jan 02 16:37:46 2019 +0100
# Branch stable
# Node ID ed1dad5e71c3db66c81ad7d3f89929db2e10767d
# Parent  ea25fc64c2751b2641119033f983e175c487a819
jit: configure: Check if llvm/Bitcode/ReaderWriter.h exists

* configure.ac: Check if llvm/Bitcode/ReaderWriter.h exists.
* libinterp/parse-tree/pt-jit.cc: If llvm/Bitcode/ReaderWriter.h exists,
  use it, otherwise try to load BitcodeReader.h + BitcodeWriter.h.  The
  latter should happen n LLVM >= 4.0.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1432,16 +1432,17 @@ if test $ENABLE_JIT = yes; then
                       llvm/DataLayout.h], [have_llvm_data_h=yes; break])
     if test $have_llvm_data_h = no; then
       warn_llvm="Missing LLVM file TargetData.h.  JIT compiler is disabled."
     fi
 
     AC_CHECK_HEADERS([llvm/IR/Verifier.h])
     AC_CHECK_HEADERS([llvm/Analysis/BasicAliasAnalysis.h])
     AC_CHECK_HEADERS([llvm/Transforms/Scalar/GVN.h])
+    AC_CHECK_HEADERS([llvm/Bitcode/ReaderWriter.h])
 
     OCTAVE_LLVM_FUNCTION_ADDATTRIBUTE_API
     OCTAVE_LLVM_FUNCTION_ADDFNATTR_API
     OCTAVE_LLVM_CALLINST_ADDATTRIBUTE_API
     OCTAVE_LLVM_RAW_FD_OSTREAM_API
     OCTAVE_LLVM_LEGACY_PASSMANAGER_API
     OCTAVE_LLVM_IRBUILDER_API
     OCTAVE_LLVM_HAS_CREATEALWAYSINLINERPASS
diff --git a/libinterp/parse-tree/pt-jit.cc b/libinterp/parse-tree/pt-jit.cc
--- a/libinterp/parse-tree/pt-jit.cc
+++ b/libinterp/parse-tree/pt-jit.cc
@@ -60,17 +60,25 @@ along with Octave; see the file COPYING.
 
 #if defined (HAVE_LLVM_ANALYSIS_BASICALIASANALYSIS_H)
 // In LLVM 3.8.x and later, we use createBasicAAWrapperPass from:
 #  include <llvm/Analysis/BasicAliasAnalysis.h>
 #endif
 // In LLVM 3.7.x and earlier, we use createBasicAliasAnalysisPass
 // from llvm/Analysis/Passes.h (already included above)
 
-#include <llvm/Bitcode/ReaderWriter.h>
+#if defined (HAVE_LLVM_BITCODE_READERWRITER_H)
+// In LLVM <= 3.9, only one header for bitcode read/writer
+#  include <llvm/Bitcode/ReaderWriter.h>
+#else
+// Satrting with LLVM 4.0, two separate headers
+#  include <llvm/Bitcode/BitcodeReader.h>
+#  include <llvm/Bitcode/BitcodeWriter.h>
+#endif
+
 #include <llvm/ExecutionEngine/ExecutionEngine.h>
 // old JIT, LLVM < 3.6.0
 // #include <llvm/ExecutionEngine/JIT.h>
 // MCJIT, LLVM >= 3.0.0
 #include <llvm/ExecutionEngine/MCJIT.h>
 #include "llvm/ExecutionEngine/SectionMemoryManager.h"
 
 #if defined (LEGACY_PASSMANAGER)
