# HG changeset patch
# User Rik <rik@octave.org>
# Date 1443232241 25200
#      Fri Sep 25 18:50:41 2015 -0700
# Node ID 71e60880105a0d9f6f72322758a1da752570b470
# Parent  96153b16febe8a3d4d40bc1410d6d4f5c295315d
maint: Use Octave coding convention for parenthesis in __ilu__.cc.

* __ilu__.cc: Use Octave coding convention for parenthesis.cc.

diff --git a/libinterp/corefcn/__ilu__.cc b/libinterp/corefcn/__ilu__.cc
--- a/libinterp/corefcn/__ilu__.cc
+++ b/libinterp/corefcn/__ilu__.cc
@@ -524,20 +524,20 @@ Undocumented internal function.\n\
           retval(0) = L + eye;
         }
     }
   else
     {
       Array<Complex> cols_norm, rows_norm;
       param_list.append (args(0).sparse_complex_matrix_value ());
       SparseComplexMatrix sm_u =
-        feval("triu", param_list)(0).sparse_complex_matrix_value ();
+        feval ("triu", param_list)(0).sparse_complex_matrix_value ();
       param_list.append (-1);
       SparseComplexMatrix sm_l =
-        feval("tril", param_list)(0).sparse_complex_matrix_value ();
+        feval ("tril", param_list)(0).sparse_complex_matrix_value ();
       param_list(1) = "rows";
       rows_norm = feval ("norm", param_list)(0).complex_vector_value ();
       param_list(1) = "cols";
       cols_norm = feval ("norm", param_list)(0).complex_vector_value ();
       param_list.clear ();
       SparseComplexMatrix U;
       SparseComplexMatrix L;
       ilu_crout < SparseComplexMatrix, Complex >
@@ -579,17 +579,17 @@ void ilu_tp (octave_matrix_t& sm, octave
     opt = COL;
   else
     opt = OFF;
 
   const octave_idx_type n = sm.cols ();
 
   // That is necessary for the JKI (milu = "row") variant.
   if (opt == ROW)
-    sm = sm.transpose();
+    sm = sm.transpose ();
 
   // Extract pointers to the arrays for faster access inside loops
   octave_idx_type* cidx_in = sm.cidx ();
   octave_idx_type* ridx_in = sm.ridx ();
   T* data_in = sm.data ();
   octave_idx_type jrow, i, j, k, jj, c, total_len_l, total_len_u, p_perm,
                   max_ind, max_len_l, max_len_u;
   T zero = T(0);
@@ -608,17 +608,17 @@ void ilu_tp (octave_matrix_t& sm, octave
   Array <T> data_out_l (dim_vector (max_len_l ,1));
   T* data_l = data_out_l.fortran_vec ();
   // Data for U
   Array <octave_idx_type> cidx_out_u (dim_vector (n + 1, 1));
   octave_idx_type* cidx_u = cidx_out_u.fortran_vec ();
   Array <octave_idx_type> ridx_out_u (dim_vector (max_len_u, 1));
   octave_idx_type* ridx_u = ridx_out_u.fortran_vec ();
   Array <T> data_out_u (dim_vector (max_len_u, 1));
-  T* data_u = data_out_u.fortran_vec();
+  T* data_u = data_out_u.fortran_vec ();
 
   // Working arrays and permutation arrays
   octave_idx_type w_len_u, w_len_l;
   T total_sum, partial_col_sum = zero, partial_row_sum = zero;
   std::set <octave_idx_type> iw_l;
   std::set <octave_idx_type> iw_u;
   std::set <octave_idx_type>::iterator it, it2;
   OCTAVE_LOCAL_BUFFER (T, w_data, n);
