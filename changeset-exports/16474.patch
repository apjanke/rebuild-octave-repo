# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365489242 14400
#      Tue Apr 09 02:34:02 2013 -0400
# Node ID 720fd1ca04ecc4cde19772fa3e9b564e29ea6461
# Parent  e16f209ed05bfaff85f898474c94c80265d2c3f6
another attempt to fix windows command window colors

* QWinTerminalImpl.cpp (QConsolePrivate::m_foregoundColor):
New member variable.
(QConsolePrivate::QConsolePrivate): Set it to Qt::black.
Call SetConsoleTextAttribute to set console foreground and background
colors.
(QWinTerminalImpl::viewPaintEvent): Set pen color to
m_foregroundColor.
Set pen and brush color from current terminal attributes.

diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
@@ -111,16 +111,17 @@ public:
                         const char* devName);
 
 private:
   QWinTerminalImpl* q;
 
 private:
   QFont m_font;
   QColor m_backgroundColor;
+  QColor m_foregroundColor;
   QString m_command;
   QConsoleColors m_colors;
   bool m_inWheelEvent;
   QString m_title;
 
   QSize m_charSize;
   QSize m_bufferSize;
   QRect m_consoleRect;
@@ -219,20 +220,23 @@ QConsolePrivate::QConsolePrivate (QWinTe
        m_consoleRect.left (), m_consoleRect.top (),
        m_consoleRect.right (), m_consoleRect.bottom (),
        m_consoleRect.width (), m_consoleRect.height ());
 
   wchar_t titleBuf[260];
   GetConsoleTitleW (titleBuf, sizeof (titleBuf));
   q->setWindowTitle (QString::fromWCharArray (titleBuf));
 
+  m_backgroundColor = Qt::white;
+  m_foregroundColor = Qt::black;
+  SetConsoleTextAttribute (m_stdOut, 0x0F);
+
   m_font.setFamily ("Lucida Console");
   m_font.setPointSize (9);
   m_font.setStyleHint (QFont::TypeWriter);
-  m_backgroundColor = Qt::white;
 
   m_buffer = m_tmpBuffer = 0;
 
   m_consoleView = new QConsoleView (parent);
   m_scrollBar = new QScrollBar (Qt::Vertical, parent);
 
   QHBoxLayout* l = new QHBoxLayout (parent);
   l->setContentsMargins (0, 0, 0, 0);
@@ -743,17 +747,17 @@ void QWinTerminalImpl::viewPaintEvent (Q
   cx2 = qMin (d->m_consoleRect.width () - 1, updateRect.right () / cw);
   cy2 = qMin (d->m_consoleRect.height () - 1, updateRect.bottom () / ch);
 
   if (cx1 > d->m_consoleRect.width () - 1
       || cy1 > d->m_consoleRect.height () - 1)
     return;
 
   p.setFont (d->m_font);
-  p.setPen (Qt::black);
+  p.setPen (d->m_foregroundColor);
 
   ascent = p.fontMetrics ().ascent ();
   stride = d->m_consoleRect.width ();
 
   s.reserve (cx2 - cx1 + 1);
   y = ascent + cy1 * ch;;
 
   for (int j = cy1; j <= cy2; j++, y += ch)
@@ -782,18 +786,18 @@ void QWinTerminalImpl::viewPaintEvent (Q
                     }
                   x += (s.length () * cw);
                   s.clear ();
                   hasChar = false;
                 }
               // Update current pen and store current attributes
               // FIXME: what about background?
               attr = (ci->Attributes & 0x00ff);
-              p.setPen (Qt::black);
-              p.setBrush (Qt::black);
+              p.setPen (d->m_colors[attr & 0x000f]);
+              p.setBrush (d->m_colors[(attr >> 4) & 0x000f]);
             }
 
           // Append current character to the string buffer
           s.append (ci->Char.UnicodeChar);
           if (ci->Char.UnicodeChar != L' ')
             hasChar = true;
         }
 
