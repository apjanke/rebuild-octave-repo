# HG changeset patch
# User jwe
# Date 1057986213 0
#      Sat Jul 12 05:03:33 2003 +0000
# Node ID 322453495d75cf375a6bbfa3e92704fbd3c24353
# Parent  3e48e60a1f8ba0d5e78e41733472e6cb678afbcd
[project @ 2003-07-12 05:03:33 by jwe]

diff --git a/doc/faq/Octave-FAQ.texi b/doc/faq/Octave-FAQ.texi
--- a/doc/faq/Octave-FAQ.texi
+++ b/doc/faq/Octave-FAQ.texi
@@ -715,17 +715,16 @@ settings.  Note that this list may not b
 variables may have been introduced since this document was last updated.
 
 @example
 @group
   PS1                           = ">> "
   PS2                           = ""
   beep_on_error                 = true
   crash_dumps_octave_core       = false
-  default_eval_print_flag       = false
   default_global_variable_value = []
   default_save_format           = "mat-binary"
   define_all_return_values      = true
   fixed_point_format            = true
   initialize_global_variables   = true
   page_screen_output            = false
   print_empty_dimensions        = false
   warn_function_name_clash      = false
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -155,17 +155,16 @@ Set initial values for user-preference v
 values for compatibility with @sc{Matlab}.
 
 @example
 @group
   PS1                           = ">> "
   PS2                           = ""
   beep_on_error                 = true
   crash_dumps_octave_core       = false
-  default_eval_print_flag       = false
   default_global_variable_value = []
   default_save_format           = "mat-binary"
   define_all_return_values      = true
   fixed_point_format            = true
   initialize_global_variables   = true
   page_screen_output            = false
   print_empty_dimensions        = false
   warn_function_name_clash      = false
diff --git a/doc/interpreter/eval.txi b/doc/interpreter/eval.txi
--- a/doc/interpreter/eval.txi
+++ b/doc/interpreter/eval.txi
@@ -13,18 +13,16 @@ Sometimes, you may find it necessary to 
 been computed and stored in a string, or use a string as the name of a
 function to call.  The @code{eval} and @code{feval} functions allow you
 to do just that, and are necessary in order to evaluate commands that
 are not known until run time, or to write functions that will need to
 call user-supplied functions.
 
 @DOCSTRING(eval)
 
-@DOCSTRING(default_eval_print_flag)
-
 @DOCSTRING(feval)
 
 Here is a simple-minded function using @code{feval} that finds the root
 of a user-supplied function of one variable using Newton's method.
 
 @example
 @group
 @cindex Fordyce, A. P.
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -236,21 +236,16 @@ Default value: 0.
 
 Default value: 0.
 
 @item completion_append_char
 @xref{Commands For Completion}.
 
 Default value: @code{" "}.
 
-@item default_eval_print_flag
-@xref{Evaluation}.
-
-Default value: 1.
-
 @item default_return_value
 @xref{Multiple Return Values}.
 
 Default value: @code{[]}.
 
 @item default_save_format
 @xref{Simple File I/O}.
 
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,38 @@
 2003-07-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* image/colormap.m: Don't save and restore default_eval_print_flag.
+
+	* miscellaneous/dump_prefs.m: Delete default_eval_print_flag.
+
+	* control/util/zgshsr.m: Use x OP= y instead of x = x OP y.
+	* control/system/sys2fir.m: Likewise.
+
+	* control/system/is_siso.m: Use && instead of & where appropriate.
+	* control/system/__tf2sysl__.m: Likewise.
+
+	* control/system/__tf2sysl__.m: Use end instead of length(X).
+
+	* control/freqchkw.m: Use %-escapes for error instead of num2str
+	and [] concatenation.
+	* control/system/sys2fir.m: Likewise.
+
+	* control/base/dgram.m, control/base/freqchkw.m,
+	control/base/gram.m, control/system/__abcddims__.m,
+	control/system/__sysdefstname__.m, control/system/__tf2sysl__.m,
+	control/system/is_sample.m, control/system/is_signal_list.m,
+	control/system/is_siso.m, control/system/sys2fir.m,
+	control/system/syschtsam.m, control/system/sysgettsam.m,
+	control/system/sysgettype.m, control/system/tf2zp.m,
+	control/system/ugain.m, control/util/prompt.m,
+	control/util/run_cmd.m, control/util/zgrownorm.m,
+	control/util/zgshsr.m:
+	Improve conformance to Octave coding style.	
+
 	* miscellaneous/dump_prefs.m: Add warn_resize_on_reange_error to
 	the list.
 	Delete resize_on_range_error from the list.
 
 	* control/base/pzmap.m, control/base/place.m,
 	control/base/__freqresp__.m, control/system/sysappend.m,
 	control/system/syscont.m, control/system/sysdisc.m,
 	control/system/sysgroup.m, control/system/tfout.m,
diff --git a/scripts/image/colormap.m b/scripts/image/colormap.m
--- a/scripts/image/colormap.m
+++ b/scripts/image/colormap.m
@@ -46,23 +46,17 @@ function cmap = colormap (map)
   endif
 
   if (nargin == 1)
 
     if (isstr (map))
       if (strcmp (map, "default"))
         map = gray ();
       else
-        unwind_protect
-          save_default_eval_print_flag = default_eval_print_flag;
-          default_eval_print_flag = 0;
-          map = eval (map);
-        unwind_protect_cleanup
-          default_eval_print_flag = save_default_eval_print_flag;
-        end_unwind_protect
+        map = eval (map);
       endif
     endif
 
     if (! isempty (map))
       if (columns (map) != 3)
         error ("colormap: map must have 3 columns: [R,G,B]");
       endif
       if (min (min (map)) < 0 || max (max (map)) > 1)
diff --git a/scripts/miscellaneous/dump_prefs.m b/scripts/miscellaneous/dump_prefs.m
--- a/scripts/miscellaneous/dump_prefs.m
+++ b/scripts/miscellaneous/dump_prefs.m
@@ -48,17 +48,16 @@ function dump_prefs (file)
               "PAGER";
               "PS1";
               "PS2";
               "PS4";
               "automatic_replot";
               "beep_on_error";
               "completion_append_char";
               "crash_dumps_octave_core";
-              "default_eval_print_flag";
               "default_global_variable_value";
               "default_return_value";
               "default_save_format";
               "define_all_return_values";
               "echo_executing_commands";
               "fixed_point_format";
               "gnuplot_binary";
               "gnuplot_command_end";
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,18 @@
 2003-07-11  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* octave.cc (maximum_braindamage): Don't set default_eval_print_flag.
+
+	* parse.y (Vdefault_eval_print_flag): Delete: 
+	(default_eval_print_flag): Delete.
+	(symbols_of_parse): Delete DEFVAR for default_eval_print_flag.
+	(Feval, Fevalin): Return empty octave_value_list and turn printing
+	on in eval_string if nargout is zero.
+
 	* ov-list.cc (octave_list::assign): Check
 	Vwarn_resize_on_range_error, not Vresize_on_range_error.
 
 	* ov.cc (Vwarn_resize_on_range_error): New variable.
 	(warn_resize_on_range_error): New function.
 	(symbols_of_ov): Add DEFVAR for warn_resize_on_range_error.
 
 	* ov.cc (Vresize_on_range_error): Delete.
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -341,17 +341,16 @@ initialize_error_handlers ()
 
 static void
 maximum_braindamage (void)
 {
   bind_builtin_variable ("PS1", ">> ");
   bind_builtin_variable ("PS2", "");
   bind_builtin_variable ("beep_on_error", true);
   bind_builtin_variable ("crash_dumps_octave_core", false);
-  bind_builtin_variable ("default_eval_print_flag", false);
   bind_builtin_variable ("default_global_variable_value", Matrix ());
   bind_builtin_variable ("default_save_format", "mat-binary");
   bind_builtin_variable ("define_all_return_values", true);
   bind_builtin_variable ("fixed_point_format", true);
   bind_builtin_variable ("initialize_global_variables", true);
   bind_builtin_variable ("page_screen_output", false);
   bind_builtin_variable ("print_empty_dimensions", false);
   bind_builtin_variable ("warn_function_name_clash", false);
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -64,19 +64,16 @@ Software Foundation, 59 Temple Place - S
 #include "parse.h"
 #include "pt-all.h"
 #include "symtab.h"
 #include "token.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
-// TRUE means we print 
-static bool Vdefault_eval_print_flag = true;
-
 // If TRUE, generate a warning for the assignment in things like
 //
 //   octave> if (a = 2 < n)
 //
 // but not
 //
 //   octave> if ((a = 2) < n)
 //
@@ -3740,43 +3737,19 @@ eval_string (const octave_value& arg, bo
 
   return eval_string (s, silent, parse_status, nargout);
 }
 
 DEFUN (eval, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} eval (@var{try}, @var{catch})\n\
 Parse the string @var{try} and evaluate it as if it were an Octave\n\
-program, returning the last value computed.  If that fails, evaluate\n\
-the string @var{catch}.  The string @var{try} is evaluated in the\n\
-current context, so any results remain available after @code{eval}\n\
-returns.  For example,\n\
-\n\
-@example\n\
-@group\n\
-eval (\"a = 13\")\n\
-     @print{} a = 13\n\
-     @result{} 13\n\
-@end group\n\
-@end example\n\
-\n\
-In this case, the value of the evaluated expression is printed and it is\n\
-also returned returned from @code{eval}.  Just as with any other\n\
-expression, you can turn printing off by ending the expression in a\n\
-semicolon.  For example,\n\
-\n\
-@example\n\
-eval (\"a = 13;\")\n\
-     @result{} 13\n\
-@end example\n\
-\n\
-In this example, the variable @code{a} has been given the value 13, but\n\
-the value of the expression is not printed.  You can also turn off\n\
-automatic printing for all expressions executed by @code{eval} using the\n\
-variable @code{default_eval_print_flag}.\n\
+program.  If that fails, evaluate the string @var{catch}.\n\
+The string @var{try} is evaluated in the current context,\n\
+so any results remain available after @code{eval} returns.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin > 0)
     {
@@ -3785,18 +3758,21 @@ variable @code{default_eval_print_flag}.
       if (nargin > 1)
 	{
 	  unwind_protect_bool (buffer_error_messages);
 	  buffer_error_messages = true;
 	}
 
       int parse_status = 0;
 
-      retval = eval_string (args(0), ! Vdefault_eval_print_flag,
-			    parse_status, nargout);
+      octave_value_list tmp = eval_string (args(0), nargout > 0,
+					   parse_status, nargout);
+
+      if (nargout > 0)
+	retval = tmp;
 
       if (nargin > 1 && (parse_status != 0 || error_state))
 	{
 	  error_state = 0;
 
 	  // Set up for letting the user print any messages from
 	  // errors that occurred in the first part of this eval().
 
@@ -3919,18 +3895,21 @@ context @var{context}, which may be eith
 	      if (nargin > 2)
 	        {
 		  unwind_protect_bool (buffer_error_messages);
 		  buffer_error_messages = true;
 		}
 
 	      int parse_status = 0;
 
-	      retval = eval_string (args(1), ! Vdefault_eval_print_flag,
-				    parse_status, nargout);
+	      octave_value_list tmp = eval_string (args(1), nargout > 0,
+						   parse_status, nargout);
+
+	      if (nargout > 0)
+		retval = tmp;
 
 	      if (nargin > 2 && (parse_status != 0 || error_state))
 		{
 		  error_state = 0;
 
 		  // Set up for letting the user print any messages from
 		  // errors that occurred in the first part of this eval().
 
@@ -3953,24 +3932,16 @@ context @var{context}, which may be eith
     }
   else
     print_usage ("evalin");
 
   return retval;
 }
 
 static int
-default_eval_print_flag (void)
-{
-  Vdefault_eval_print_flag = check_preference ("default_eval_print_flag");
-
-  return 0;
-}
-
-static int
 warn_assign_as_truth_value (void)
 {
   Vwarn_assign_as_truth_value
     = check_preference ("warn_assign_as_truth_value");
 
   return 0;
 }
 
@@ -4013,24 +3984,16 @@ warn_variable_switch_label (void)
     = check_preference ("warn_variable_switch_label");
 
   return 0;
 }
 
 void
 symbols_of_parse (void)
 {
-  DEFVAR (default_eval_print_flag, true, default_eval_print_flag,
-    "-*- texinfo -*-\n\
-@defvr {Built-in Variable} default_eval_print_flag\n\
-If the value of this variable is nonzero, Octave prints the results of\n\
-commands executed by @code{eval} that do not end with semicolons.  If it\n\
-is zero, automatic printing is suppressed.  The default value is 1.\n\
-@end defvr");
-
   DEFVAR (warn_assign_as_truth_value, true, warn_assign_as_truth_value,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} warn_assign_as_truth_value\n\
 If the value of @code{warn_assign_as_truth_value} is nonzero, a\n\
 warning is issued for statements like\n\
 \n\
 @example\n\
 if (s = t)\n\
diff --git a/test/octave.test/eval/eval-1.m b/test/octave.test/eval/eval-1.m
--- a/test/octave.test/eval/eval-1.m
+++ b/test/octave.test/eval/eval-1.m
@@ -1,2 +1,2 @@
-default_eval_print_flag = 1;
-eval ("x = 1");
+x = 1;
+eval ("x");
diff --git a/test/octave.test/eval/eval-10.m b/test/octave.test/eval/eval-10.m
--- a/test/octave.test/eval/eval-10.m
+++ b/test/octave.test/eval/eval-10.m
@@ -1,2 +1,2 @@
-default_eval_print_flag = 0;
 eval ("x = 1")
+x == 1
diff --git a/test/octave.test/eval/eval-2.m b/test/octave.test/eval/eval-2.m
--- a/test/octave.test/eval/eval-2.m
+++ b/test/octave.test/eval/eval-2.m
@@ -1,2 +1,2 @@
-default_eval_print_flag = 1;
-eval ("x = 1;")
+x = 1;
+eval ("x;")
diff --git a/test/octave.test/eval/eval-3.m b/test/octave.test/eval/eval-3.m
--- a/test/octave.test/eval/eval-3.m
+++ b/test/octave.test/eval/eval-3.m
@@ -1,2 +1,2 @@
-default_eval_print_flag = 1;
-eval ("x = 1;");
+x = 1
+eval ("x;");
diff --git a/test/octave.test/eval/eval-4.m b/test/octave.test/eval/eval-4.m
--- a/test/octave.test/eval/eval-4.m
+++ b/test/octave.test/eval/eval-4.m
@@ -1,2 +1,2 @@
-default_eval_print_flag = 1;
-eval ("x = 1")
+x = 1;
+eval ("x")
diff --git a/test/octave.test/eval/eval-7.m b/test/octave.test/eval/eval-7.m
--- a/test/octave.test/eval/eval-7.m
+++ b/test/octave.test/eval/eval-7.m
@@ -1,2 +1,2 @@
-default_eval_print_flag = 0;
 eval ("x = 1");
+x == 1
diff --git a/test/octave.test/eval/eval-8.m b/test/octave.test/eval/eval-8.m
--- a/test/octave.test/eval/eval-8.m
+++ b/test/octave.test/eval/eval-8.m
@@ -1,2 +1,2 @@
-default_eval_print_flag = 0;
 eval ("x = 1;")
+x == 1
diff --git a/test/octave.test/eval/eval-9.m b/test/octave.test/eval/eval-9.m
--- a/test/octave.test/eval/eval-9.m
+++ b/test/octave.test/eval/eval-9.m
@@ -1,2 +1,2 @@
-default_eval_print_flag = 0;
 eval ("x = 1;");
+x == 1
diff --git a/test/octave.test/eval/eval.exp b/test/octave.test/eval/eval.exp
--- a/test/octave.test/eval/eval.exp
+++ b/test/octave.test/eval/eval.exp
@@ -1,40 +1,56 @@
 set test eval-1
 set prog_output "x = 1"
 do_test eval-1.m
 
 set test eval-2
-set prog_output "^ans = 1"
+set prog_output "^$"
 do_test eval-2.m
 
 set test eval-3
-set prog_output "^$"
+set prog_output "^x = 1"
 do_test eval-3.m
 
 set test eval-4
-set prog_output "x = 1\nans = 1"
+set prog_output "^x = 1"
 do_test eval-4.m
 
 set test eval-5
-set prog_output "flipud = 2"
+set prog_output "^flipud = 2"
 do_test eval-5.m
 
 set test eval-6
 set prog_output "^ans = 2"
 do_test eval-6.m
 
 set test eval-7
-set prog_output "^$"
+set prog_output "^x = 1\nans = 1"
 do_test eval-7.m
 
 set test eval-8
 set prog_output "^ans = 1"
 do_test eval-8.m
 
 set test eval-9
-set prog_output "^$"
+set prog_output "^ans = 1"
 do_test eval-9.m
 
 set test eval-10
-set prog_output "^ans = 1"
+set prog_output "^x = 1\nans = 1"
 do_test eval-10.m
 
+set test eval-11
+set prog_output "^ans = 1"
+do_test eval-11.m
+
+set test eval-12
+set prog_output "^y = 1"
+do_test eval-12.m
+
+set test eval-13
+set prog_output "^ans = 1"
+do_test eval-13.m
+
+set test eval-14
+set prog_output "^y = 1"
+do_test eval-14.m
+
