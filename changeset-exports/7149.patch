# HG changeset patch
# User jwe
# Date 1194632140 0
#      Fri Nov 09 18:15:40 2007 +0000
# Node ID 5c121a8b40b5ec4d5372bae5c6044fdf1956000e
# Parent  735086cfd405f05a1e2ee572b0a048d1922231e9
[project @ 2007-11-09 18:15:39 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,11 +1,11 @@
 2007-11-09  David Bateman  <dbateman@free.fr>
 
-	* interpreter/plot.txi: Document the new area function.
+	* interpreter/plot.txi: Document the new hidden and area functions.
 
 2007-11-07  David Bateman  <dbateman@free.fr>
 
 	* interpreter/plot.txi: Document new functions.
 
 2007-10-30  David Bateman  <dbateman@free.fr>
 
 	* interpreter/dynamic.txi, interpreter/install.txi,
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -4,16 +4,23 @@ 2007-11-09  John W. Eaton  <jwe@octave.o
 
 2007-11-09  Kai Habel  <kai.habel@gmx.de>
 
 	* plot/mesh.m, plot/pcolor.m, plot/surf.m, plot/surface.m:
 	Don't change view if hold is on.
 
 2007-11-09  David Bateman  <dbateman@free.fr>
 
+	* plot/hidden.m: New function.
+	* plot/Makefile.in (SOURCES): Add it here.
+	* plot/meshc.m, plot/mesh.m: Set facecolor to White for hidden
+	line removal.
+	* plot/__go_draw_axes__.m: If facecolor is white flag hidden line
+	removal and if it is "none" don't do hidden line removal.
+
 	* plot/legend.m: Also allow labels for surface and patch types.
 	* plot/__bar__.m: Split into separate patch pbjects to allow
 	setting of the legend.
 	* plot/__go_draw_axes__.m: Set titlespec from keylabel for patch
 	objects as well.
 
 	* plot/area.m, plot/__area__.m: New functions
 	* plot/Makefile.in (SOURCES): Add them to the list of files.
diff --git a/scripts/plot/Makefile.in b/scripts/plot/Makefile.in
--- a/scripts/plot/Makefile.in
+++ b/scripts/plot/Makefile.in
@@ -78,16 +78,17 @@ SOURCES = \
   errorbar.m \
   figure.m \
   fill.m \
   findobj.m \
   fplot.m \
   gca.m \
   gcf.m \
   grid.m \
+  hidden.m \
   hist.m \
   hold.m \
   isfigure.m \
   ishold.m \
   legend.m \
   line.m \
   loglog.m \
   loglogerr.m \
diff --git a/scripts/plot/__go_draw_axes__.m b/scripts/plot/__go_draw_axes__.m
--- a/scripts/plot/__go_draw_axes__.m
+++ b/scripts/plot/__go_draw_axes__.m
@@ -196,16 +196,17 @@ function __go_draw_axes__ (h, plot_strea
     cautoscale = strcmpi (axis_obj.climmode, "auto");
 
     kids = axis_obj.children;
 
     nd = 0;
     data_idx = 0;
     data = cell ();
     is_image_data = [];
+    hidden_removal = true;
 
     xminp = yminp = zminp = cminp = Inf;
     xmax = ymax = zmax = cmax = -Inf;
     xmin = ymin = zmin = cmin = Inf;
 
     [view_cmd, view_fcn, view_zoom] = image_viewer ();
     use_gnuplot_for_images = (ischar (view_fcn)
 			      && strcmp (view_fcn, "gnuplot_internal"));
@@ -336,17 +337,16 @@ function __go_draw_axes__ (h, plot_strea
 	      [ymin, ymax, yminp] = get_data_limits (ymin, ymax, yminp, ydat);
 	    endif
 	    if (zautoscale)
 	      [zmin, zmax, zminp] = get_data_limits (zmin, zmax, zminp, zdat);
 	    endif
 	    data{data_idx} = [xdat, ydat, zdat]';
 	    usingclause{data_idx} = "using ($1):($2):($3)";
 	    fputs (plot_stream, "set parametric;\n");
-	    fputs (plot_stream, "set hidden3d;\n");
 	    fputs (plot_stream, "set style data lines;\n");
 	    fputs (plot_stream, "set surface;\n");
 	    fputs (plot_stream, "unset contour;\n");
 	  else
 	    nd = 2;
 	    xdat = obj.xdata(:);
 	    ydat = obj.ydata(:);
 	    ldat = obj.ldata;
@@ -670,47 +670,57 @@ function __go_draw_axes__ (h, plot_strea
 	        k++;
 	      endfor
 	      data{data_idx} = zz;
 	    endif
 	    usingclause{data_idx} = "using ($1):($2):($3):($4)";
 	    withclause{data_idx} = "with line palette";
 
 	    fputs (plot_stream, "unset parametric;\n");
-	    fputs (plot_stream, "set hidden3d;\n");
 	    fputs (plot_stream, "set style data lines;\n");
 	    fputs (plot_stream, "set surface;\n");
 	    fputs (plot_stream, "unset contour;\n");
 	    fprintf (plot_stream, "set cbrange [%g:%g];\n", cmin, cmax);
 
 	    ## Interpolation does not work for flat surfaces (e.g. pcolor)
             ## and color mapping --> currently set empty.
             interp_str = "";
             surf_colormap = parent_figure_obj.colormap;
             flat_interp_face = (strncmp (obj.facecolor, "flat", 4)
 				|| strncmp (obj.facecolor, "interp", 6));
             flat_interp_edge = (strncmp (obj.edgecolor, "flat", 4)
 				|| strncmp (obj.edgecolor, "interp", 6));
             palette_data = [];
 
+	    if (strncmp (obj.facecolor, "none", 4))
+	      hidden_removal = false;
+	    endif
+
             if (flat_interp_face
-		|| (flat_interp_edge && strncmp (obj.facecolor, "none", 4)))
+		|| (flat_interp_edge
+		    && (strncmp (obj.facecolor, "none", 4)
+			|| (isnumeric (obj.facecolor)
+			    && all (obj.facecolor == 1)))))
               palette_data = [1:rows(surf_colormap); surf_colormap'];
             endif
 
             if (isnumeric (obj.facecolor))
               palette_data = [1:2; [obj.facecolor; obj.facecolor]'];
             endif
 
-            if (strncmp (obj.facecolor, "none", 4)
+
+	    if ((strncmp (obj.facecolor, "none", 4)
+		 || (isnumeric (obj.facecolor)
+		     && all (obj.facecolor == 1)))
 		&& isnumeric (obj.edgecolor))
               palette_data = [1:2; [obj.edgecolor; obj.edgecolor]'];
             endif
 
-            if (strncmp (obj.facecolor, "none", 4))
+	    if (strncmp (obj.facecolor, "none", 4)
+		|| (isnumeric (obj.facecolor) && all (obj.facecolor == 1)))
             elseif (flat_interp_face && strncmp (obj.edgecolor, "flat", 4))
               fprintf (plot_stream, "set pm3d at s %s;\n", interp_str);
             else
               if (strncmp (obj.edgecolor, "none", 4))
                 fprintf (plot_stream, "set pm3d at s %s;\n", interp_str);
               else
                 edgecol = obj.edgecolor;
                 if (ischar (obj.edgecolor))
@@ -820,16 +830,22 @@ function __go_draw_axes__ (h, plot_strea
 
 	otherwise
 	  error ("__go_draw_axes__: unknown object class, %s",
 		 obj.type);
       endswitch
 
     endfor
 
+    if (hidden_removal)
+      fputs (plot_stream, "set hidden3d;\n");
+    else
+      fputs (plot_stream, "unset hidden3d;\n");
+    endif
+
     have_data = (! (isempty (data) && any (cellfun (@isempty, data))));
 
     if (xautoscale && have_data)
       xlim = get_axis_limits (xmin, xmax, xminp, xlogscale);
       if (isempty (xlim))
 	return;
       endif
       set (h, "xlim", xlim, "xlimmode", "auto");
diff --git a/scripts/plot/hidden.m b/scripts/plot/hidden.m
new file mode 100644
--- /dev/null
+++ b/scripts/plot/hidden.m
@@ -0,0 +1,79 @@
+## Copyright (C) 2007 Michael Goffioul
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation; either version 3 of the License, or (at
+## your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+## General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <http://www.gnu.org/licenses/>.
+
+## -*- texinfo -*-
+## @deftypefn {Function File} {} hidden (@var{mode})
+## @deftypefnx {Function File} {} hidden ()
+## Manipulation the mesh hidden line removal. Called with no argument
+## the hidden line removal is toggled. The argument @var{mode} can be either
+## 'on' or 'off' and the set of the hidden line removal is set accordingly.
+## @seealso{mesh, meshc, surf}
+## @end deftypefn
+
+## PKG_ADD: mark_as_command hidden
+
+function retval = hidden (mode)
+
+  if (nargin == 0)
+    mode = "swap";
+  elseif (nargin == 1);
+    if (ischar (mode))
+      mode = tolower (mode);
+      if (! strcmp (mode, "on") && ! strcmp (mode, "off"))
+	error ("hidden: mode expected to be 'on' or 'off'");
+      endif
+    else
+      error ("hidden: expecting mode to be a string");
+    endif
+  else
+    print_usage ();
+  endif
+
+  for h = get (gca (), "children");
+    htype = lower (get (h, "type"));
+    if (strcmp (htype, "surface"))
+      fc = get (h, "facecolor");
+      if ((! ischar (fc) && is_white (fc))
+	  || (ischar (fc) && strcmp (fc, "none")))
+        switch (mode)
+        case "on"
+          set (h, "facecolor", "w");
+        case "off"
+          set (h, "facecolor", "none");
+        case "swap"
+          if (ischar (fc))
+            set (h, "facecolor", "w");
+	    mode = "on";
+          else
+            set (h, "facecolor", "none");
+	    mode = "off";
+          endif
+        endswitch
+      endif
+    endif
+  endfor
+
+  if (nargout > 0)
+    retval = mode;
+  endif
+
+endfunction
+
+function retval = is_white (color)
+  retval = all (color == 1);
+endfunction
diff --git a/scripts/plot/mesh.m b/scripts/plot/mesh.m
--- a/scripts/plot/mesh.m
+++ b/scripts/plot/mesh.m
@@ -33,17 +33,17 @@
 function h = mesh (varargin)
 
   newplot ();
 
   tmp = surface (varargin{:});
 
   ax = get (tmp, "parent");
 
-  set (tmp, "facecolor", "none");
+  set (tmp, "facecolor", "w");
   set (tmp, "edgecolor", "flat");
 
   if (! ishold ())
     set (ax, "view", [-37.5, 30]);
   endif
 
   if (nargout > 0)
     h = tmp;
diff --git a/scripts/plot/meshc.m b/scripts/plot/meshc.m
--- a/scripts/plot/meshc.m
+++ b/scripts/plot/meshc.m
@@ -30,17 +30,17 @@
 function h = meshc (varargin)
 
   newplot ();
 
   tmp = surface (varargin{:});
 
   ax = get (tmp, "parent");
 
-  set (tmp, "facecolor", "none");
+  set (tmp, "facecolor", "w");
   set (tmp, "edgecolor", "flat");
 
   if (! ishold ())
     set (ax, "view", [-37.5, 30]);
   endif
 
   hold ("on");
 
