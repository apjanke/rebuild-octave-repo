# HG changeset patch
# User jwe
# Date 749345017 0
#      Wed Sep 29 23:23:37 1993 +0000
# Node ID d80376609fd1eb87c58d9be5de94eb5b89b62077
# Parent  b3b67829e001b7350b07b07939c02a54aa541c32
[project @ 1993-09-29 23:23:37 by jwe]
Handle long options.

diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -23,27 +23,31 @@ Software Foundation, 675 Mass Ave, Cambr
 
 // Born February 20, 1992.
 
 #ifdef __GNUG__
 #pragma implementation
 #endif
 
 #include <sys/types.h>
+#ifdef HAVE_UNISTD_H
+#include <unistd.h>
+#endif
 #include <sys/stat.h>
 #include <time.h>
 #include <pwd.h>
 #include <setjmp.h>
 #include <stdlib.h>
 #include <string.h>
 #include <signal.h>
 #include <assert.h>
 #include <iostream.h>
 #include <fstream.h>
-#include <GetOpt.h>
+
+#include "getopt.h"
 
 #include "sighandlers.h"
 #include "variables.h"
 #include "error.h"
 #include "tree-const.h"
 #include "symtab.h"
 #include "utils.h"
 #include "builtins.h"
@@ -111,21 +115,38 @@ jmp_buf toplevel;
 
 // Nonzero means we read ~/.octaverc and ./.octaverc.
 static int read_init_files = 1;
 
 // Nonzero means we don\'t print the usual startup message.
 static int inhibit_startup_message = 0;
 
 // Usage message
-static const char *usage_string = "octave [-?dfhiqvx] [-p path] [file]";
+static const char *usage_string = 
+  "octave [-?dfhiqvx] [-p path] [--debug] [--help] [--interactive]\n\
+         [--norc] [--path path] [--quiet] [--version] [--echo-commands]\n\
+         [file]";
 
 // This is here so that it\'s more likely that the usage message and
 // the real set of options will agree.
-static const char *getopt_option_string = "?dfhip:qvx";
+static const char *short_opts = "?dfhip:qvx";
+
+// Long options.
+static struct option long_opts[] =
+  {
+    { "debug", 0, 0, 'd' },
+    { "help", 0, 0, 'h' },
+    { "interactive", 0, 0, 'i' },
+    { "norc", 0, 0, 'f' },
+    { "path", 1, 0, 'p' },
+    { "quiet", 0, 0, 'q' },
+    { "version", 0, 0, 'v' },
+    { "echo-commands", 0, 0, 'x' },
+    { 0, 0, 0, 0 }
+  };
 
 /*
  * Initialize some global variables for later use.
  */
 static void
 initialize_globals (char *name)
 {
   struct passwd *entry = getpwuid (getuid ());
@@ -257,38 +278,39 @@ execute_startup_files (void)
 static void
 verbose_usage (void)
 {
   cout << "\n"
        << "  Octave, version " << version_string
        << ".  Copyright (C) 1992, 1993, John W. Eaton.\n"
        << "  This is free software with ABSOLUTELY NO WARRANTY.\n"
        << "\n"
-       << "  " << usage_string
-       << "\n"
+       << "  usage: " << usage_string
+       << "\n\n"
        << "     d : enter parser debugging mode\n"
        << "     f : don't read ~/.octaverc or .octaverc at startup\n"
        << "   h|? : print short help message and exit\n"
        << "     i : force interactive behavior\n"
        << "     q : don't print message at startup\n"
+       << "     v : print version number and exit\n"
        << "     x : echo commands as they are executed\n"
        << "\n"
        << "  file : execute commands from named file\n"
        << "\n";
 
   exit (1);
 }
 
 /*
  * Terse usage messsage.
  */
 static void
 usage (void)
 {
-  usage (usage_string);
+  cerr << "usage: " << usage_string << "\n";
   exit (1);
 }
 
 /*
  * Fix up things before exiting.
  */
 volatile void
 clean_up_and_exit (int retval)
@@ -323,40 +345,37 @@ main (int argc, char **argv)
 // Allow for system dependent initialization.  See sysdep.cc for more
 // details.
   sysdep_init ();
 
 // Do this first, since some command line arguments may override the
 // defaults.
   initialize_globals (argv[0]);
 
-// If the 
-  GetOpt getopt (argc, argv, getopt_option_string);
-  int option_char;
-
-  while ((option_char = getopt ()) != EOF)
+  int optc;
+  while ((optc = getopt_long (argc, argv, short_opts, long_opts, 0)) != EOF)
     {
-      switch (option_char)
+      switch (optc)
 	{
 	case 'd':
 	  yydebug++;
 	  break;
 	case 'f':
 	  read_init_files = 0;
 	  break;
 	case 'h':
 	case '?':
 	  verbose_usage ();
 	  break;
 	case 'i':
 	  forced_interactive = 1;
 	  break;
 	case 'p':
-	  if (getopt.optarg != (char *) NULL)
-	    load_path = strsave (getopt.optarg);
+	  if (optarg != (char *) NULL)
+	    load_path = strsave (optarg);
 	  break;
 	case 'q':
 	  inhibit_startup_message = 1;
 	  break;
 	case 'x':
 	  echo_input = 1;
 	  break;
 	case 'v':
@@ -403,19 +422,19 @@ main (int argc, char **argv)
 
   initialize_pager ();
 
 // Avoid counting commands executed from startup files.
   current_command_number = 1;
 
 // If there is an extra argument, see if it names a file to read.
 
-  if (getopt.optind != argc)
+  if (optind != argc)
     {
-      FILE *infile = get_input_from_file (argv[getopt.optind]);
+      FILE *infile = get_input_from_file (argv[optind]);
       if (infile == (FILE *) NULL)
 	clean_up_and_exit (1);
       else
 	switch_to_buffer (create_buffer (infile));
     }
   else
     {
 // Is input coming from a terminal?  If so, we are probably
