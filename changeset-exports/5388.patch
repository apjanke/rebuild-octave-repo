# HG changeset patch
# User jwe
# Date 1118779471 0
#      Tue Jun 14 20:04:31 2005 +0000
# Node ID 7099eb9841b40b828590780398854d48bcdf0f63
# Parent  5b00a8beb5045be8c88169c1351b8ad1e85ae71e
[project @ 2005-06-14 20:04:31 by jwe]

diff --git a/liboctave/lo-ieee.h b/liboctave/lo-ieee.h
--- a/liboctave/lo-ieee.h
+++ b/liboctave/lo-ieee.h
@@ -32,16 +32,19 @@ extern "C" {
 extern double octave_Inf;
 
 /* Octave's idea of a missing value.  */
 extern double octave_NA;
 
 /* Octave's idea of not a number.  */
 extern double octave_NaN;
 
+/* XXX FIXME XXX -- this code assumes that a double has twice the
+   number of bits as an int */
+
 extern int lo_ieee_hw;
 extern int lo_ieee_lw;
 
 typedef union
 {
   double value;
   unsigned int word[2];
 } lo_ieee_double;
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2005-06-14  John W. Eaton  <jwe@octave.org>
+
+	* general/isvector.m: Handle N-d arrays.
+	From Bill Denney <denney@seas.upenn.edu>.
+
 2005-06-02  Ben Barrowes  <barrowes@alum.mit.edu>
 
 	* plot/meshgrid.m: Handle 3 input arguments.
 
 2005-06-02  Paul Kienzle  <pkienzle@users.sf.net>
 
 	* signal/freqz.m: Use correct calculations when given a vector of
 	frequencies.  Improve accuracy of returned frequency vector.
diff --git a/scripts/general/isvector.m b/scripts/general/isvector.m
--- a/scripts/general/isvector.m
+++ b/scripts/general/isvector.m
@@ -26,17 +26,14 @@
 
 ## Author: jwe
 
 function retval = isvector (x)
 
   retval = 0;
 
   if (nargin == 1)
-    if (ismatrix (x))
-      [nr, nc] = size (x);
-      retval = ((nr == 1 && nc >= 1) || (nc == 1 && nr >= 1));
-    endif
+    retval = (ismatrix (x) && ! isempty (x) && prod (size (x)) == length (x));
   else
     usage ("isvector (x)");
   endif
 
 endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,14 +1,30 @@
-2005-06-09  David Bateman <dbateman@free.fr>
+2005-06-14  Keith Goodman  <kwgoodman@gmail.com>
+
+	* input.cc (get_user_input): Renamed debug commands to dbnext, dbstep,
+	and dbcont.
+	* pt.cc: Renamed dbg_next to dbnext in comment string.
+	* pt.h: Renamed dbg_next to dbnext in comment string.
+
+2005-06-14  David Bateman  <dbateman@free.fr>
+
+	* pt-arg-list.cc (F__end__): Return 1 for dimensions larger than ndim.
+
+2005-06-14  John W. Eaton  <jwe@octave.org>
+
+	* ls-mat5.cc (save_mat5_array_length): Special case for NaN, NA,
+	and Inf values.  Only check if abs value is greater than FLT_MAX.
+
+2005-06-09  David Bateman  <dbateman@free.fr>
 
 	* ls-mat5.cc (save_mat5_element_length): 1 element strings will be
 	saved in a compressed format, so calculate the length accordingly.
 
-2005-05-30  David Bateman <dbateman@free.fr>
+2005-05-30  David Bateman  <dbateman@free.fr>
 
 	* ls-mat5.cc (read_mat5_binary_element): Don't convert to string
 	if matrix is not of type mxCHAR_CLASS.
 
 2005-05-23  John W. Eaton  <jwe@octave.org>
 
 	* file-io.cc (Ffopen): Don't fail with internal error message if
 	we fail to create a valid stream object.
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -619,31 +619,31 @@ get_user_input (const octave_value_list&
 	    return read_as_string ? octave_value ("") : octave_value (Matrix ());
 	}
 
       if (debug)
 	{
 	  if (match_sans_spaces_semi ("exit", input_buf)
 	      || match_sans_spaces_semi ("quit", input_buf)
 	      || match_sans_spaces_semi ("return", input_buf)
-	      || match_sans_spaces_semi ("dbg_cont", input_buf))
+	      || match_sans_spaces_semi ("dbcont", input_buf))
 	    {
 	      return retval;
 	    }
-	  else if (match_sans_spaces_semi ("dbg_step", input_buf))
+	  else if (match_sans_spaces_semi ("dbstep", input_buf))
 	    {
 	      tree::break_next = true;
 
 	      tree::last_line = 0;
 
 	      tree::break_function = curr_function;
 
 	      return retval;
 	    }
-	  else if (match_sans_spaces_semi ("dbg_next", input_buf))
+	  else if (match_sans_spaces_semi ("dbnext", input_buf))
 	    {
 	      tree::break_next = true;
 
 	      tree::last_line = curr_statement->line ();
 
 	      tree::break_function = curr_function;
 
 	      return retval;
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -1238,17 +1238,18 @@ save_mat5_array_length (const double* va
 
       if (save_as_floats)
 	{
 	  bool too_large_for_float = false;
 	  for (int i = 0; i < nel; i++)
 	    {
 	      double tmp = val [i];
 
-	      if (tmp > FLT_MAX || tmp < FLT_MIN)
+	      if (! (octave_is_NaN_or_NA (tmp) || xisinf (tmp))
+		  && fabs (tmp) > FLT_MAX)
 		{
 		  too_large_for_float = true;
 		  break;
 		}
 	    }
 
 	  if (!too_large_for_float)
 	    size = 4;
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -232,17 +232,17 @@ pr_max_internal (const Matrix& m)
   octave_idx_type nc = m.columns ();
 
   double result = -DBL_MAX;
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
 	double val = m(i,j);
-	if (xisinf (val) || octave_is_NaN_or_NA (val))
+	if (xisinf (val) || xisnan (val))
 	  continue;
 
 	if (val > result)
 	  result = val;
       }
 
   return result;
 }
@@ -365,17 +365,17 @@ set_format (double d, int& fw)
   curr_real_fmt = 0;
   curr_imag_fmt = 0;
 
   if (free_format)
     return;
 
   bool sign = (d < 0.0);
 
-  bool inf_or_nan = (xisinf (d) || xisnan (d));
+  bool inf_or_nan = (xisinf (d) || octave_is_NaN_or_NA (d));
 
   bool int_only = (! inf_or_nan && D_NINT (d) == d);
 
   double d_abs = d < 0.0 ? -d : d;
 
   int digits = (inf_or_nan || d_abs == 0.0)
     ? 0 : static_cast<int> (floor (log10 (d_abs) + 1.0));
 
diff --git a/src/pt-arg-list.cc b/src/pt-arg-list.cc
--- a/src/pt-arg-list.cc
+++ b/src/pt-arg-list.cc
@@ -140,21 +140,17 @@ DEFCONSTFUN (__end__, , ,
 	  break;
 
 	default:
 	  {
 
 	    if (index_position < dv.length ())
 	      retval = dv(index_position);
 	    else
-	      {
-		std::string dv_str = dv.str ();
-		::error ("invalid use of end: (index %d, dims %s)",
-			 index_position+1, dv_str.c_str ());
-	      }
+	      retval = 1;
 	  }
 	  break;
 	}
     }
   else
     ::error ("invalid use of end");
 
   return retval;
diff --git a/src/pt.cc b/src/pt.cc
--- a/src/pt.cc
+++ b/src/pt.cc
@@ -32,17 +32,17 @@ 02110-1301, USA.
 
 #include "ov-fcn.h"
 #include "pt.h"
 #include "pt-pr-code.h"
 
 // If true, stop executing at the next possible point.
 bool tree::break_next = false;
 
-// The line where dbg_next was executed.
+// The line where dbnext was executed.
 int tree::last_line = 0;
 
 // The function where the last breakpoint occurred.
 const octave_function *tree::break_function = 0;
 
 // The statement where the last breakpoint occurred.
 const tree *tree::break_statement = 0;
 
diff --git a/src/pt.h b/src/pt.h
--- a/src/pt.h
+++ b/src/pt.h
@@ -63,17 +63,17 @@ public:
     { break_point = false; }
 
   virtual bool is_breakpoint (void) const 
     { return break_point; }
 
   // If true, stop executing at the next possible point.
   static bool break_next;
   
-  // The line where dbg_next was executed.
+  // The line where dbnext was executed.
   static int last_line; 
 
   // The function where the last breakpoint occurred.
   static const octave_function *break_function;
 
   // The statement where the last breakpoint occurred.
   static const tree *break_statement;
 
