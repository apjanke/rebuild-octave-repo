# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1206469920 14400
#      Tue Mar 25 14:32:00 2008 -0400
# Node ID ae90e05ad2990b5b7f2c933931ec0a1d2a3325e6
# Parent  ba15376ddfe133d637cc4296e3bb36be69a0193a
fix parameter list initializer bug

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,20 @@
+2008-03-25  John W. Eaton  <jwe@octave.org>
+
+	* lex.h (lexical_feedback::looking_at_initializer_expression):
+	New data member.
+	* lex.l (lexical_feedback::init): Initialize it.
+	(handle_identifier): Don't unconditionally force identifiers to be
+	variables in the current scope.  Don't call force_local_variable
+	for symbols that appear in parameter initializer expressions.
+	* parse.y (decl_param_init): New parser "subroutine".
+	(decl2): Use it.  Set lexer_flags.looking_at_initializer_expression
+	to false after parsing initializer.
+
 2008-03-24  David Bateman  <dbateman@free.fr>
 
 	* data.cc (map_s_s): Fix for sparse/sparse mappers that resulted
 	in an empty sparse matrix being returned.
 	(Fhypot): New function based on the libm hypot function.
 
 2008-03-24  Primozz Peterlin  <primozz.peterlin@gmail.com>
 
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -87,16 +87,20 @@ public:
   int looking_at_function_handle;
 
   // TRUE means we're parsing the return list for a function.
   bool looking_at_return_list;
 
   // TRUE means we're parsing the parameter list for a function.
   bool looking_at_parameter_list;
 
+  // TRUE means we are looking at the initializer expression for a
+  // parameter list element.
+  bool looking_at_initializer_expression;
+
   // TRUE means we're parsing a matrix or the left hand side of
   // multi-value assignment statement.
   bool looking_at_matrix_or_assign_lhs;
 
   // Nonzero means we're parsing an indexing operation for an object.
   int looking_at_object_index;
 
   // GAG.  Stupid kludge so that [[1,2][3,4]] will work.
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -2281,17 +2281,18 @@ handle_identifier (void)
   // return list or function parameter list, or if we are looking at
   // something like [ab,cd] = foo (), force the symbol to be inserted
   // as a variable in the current symbol table.
 
   if (is_command_name (tok) && ! is_variable (tok))
     {
       if (next_tok_is_eq
 	  || lexer_flags.looking_at_return_list
-	  || lexer_flags.looking_at_parameter_list
+	  || (lexer_flags.looking_at_parameter_list
+	      && ! lexer_flags.looking_at_initializer_expression)
 	  || lexer_flags.looking_at_matrix_or_assign_lhs)
 	{
 	  force_local_variable (tok);
 	}
       else if (! (next_tok_is_paren || lexer_flags.looking_at_object_index))
 	{
 	  BEGIN (COMMAND_START);
 	}
@@ -2307,21 +2308,16 @@ handle_identifier (void)
   // transformation of the end keyword...
 
   if (tok == "end")
     tok = "__end__";    
 
   yylval.tok_val = new token (&(symbol_table::insert (tok)),
 			      input_line_number, current_input_column);
 
-  // FIXME -- this forces a link for tok in the chain of variables for
-  // the current scope.  Probably this step should be done
-  // differently, maybe in symbol_table::insert?
-  symbol_table::varref (tok);
-
   token_stack.push (yylval.tok_val);
 
   // After seeing an identifer, it is ok to convert spaces to a comma
   // (if needed).
 
   lexer_flags.convert_spaces_to_comma = true;
 
   if (! next_tok_is_eq)
@@ -2359,16 +2355,19 @@ lexical_feedback::init (void)
 
   // Not initiallly looking at a function handle.
   looking_at_function_handle = 0;
 
   // Not parsing a function return or parameter list.
   looking_at_return_list = false;
   looking_at_parameter_list = false;
 
+  // Not looking at an argument list initializer expression.
+  looking_at_initializer_expression = false;
+
   // Not parsing a matrix or the left hand side of multi-value
   // assignment statement.
   looking_at_matrix_or_assign_lhs = false;
 
   // Not parsing an object index.
   looking_at_object_index = 0;
 
   // No need to do comma insert or convert spaces to comma at
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -924,20 +924,26 @@ decl1		: decl2
 		  { $$ = new tree_decl_init_list ($1); }
 		| decl1 decl2
 		  {
 		    $1->append ($2);
 		    $$ = $1;
 		  }
 		;
 
+decl_param_init : // empty
+		{ lexer_flags.looking_at_initializer_expression = true; }
+
 decl2		: identifier
 		  { $$ = new tree_decl_elt ($1); }
-		| identifier '=' expression
-		  { $$ = new tree_decl_elt ($1, $3); }
+		| identifier '=' decl_param_init expression
+		  {
+		    lexer_flags.looking_at_initializer_expression = false;
+		    $$ = new tree_decl_elt ($1, $4);
+		  }
 		;
 
 // ====================
 // Selection statements
 // ====================
 
 select_command	: if_command
 		  { $$ = $1; }
