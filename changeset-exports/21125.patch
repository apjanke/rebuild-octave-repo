# HG changeset patch
# User Rik <rik@octave.org>
# Date 1453357142 28800
#      Wed Jan 20 22:19:02 2016 -0800
# Node ID 8f76684324b5561ad0c9613b6378691071512197
# Parent  95f8c8cdbffee98d7e39fe7348651d3d0cba797d
maint: change "return octave_value ()" to "return ovl ()".

* graphics.cc (Freset): change "return octave_value ()" to "return ovl ()".

* load-path.cc (Fpath): change "return octave_value ()" to "return ovl ()".

* audiodevinfo.cc (various functions): change "return octave_value ()" to
"return ovl ()".  Move return statement with #endif.

* ov-class.cc (Fsuperiorto): change "return octave_value ()" to
"return ovl ()".

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -9608,17 +9608,17 @@ each individual object will be reset.\n\
   ColumnVector hcv = args(0).xvector_value ("reset: H must be a graphics handle");
 
   // loop over graphics objects
   for (octave_idx_type n = 0; n < hcv.numel (); n++)
     gh_manager::get_object (hcv(n)).reset_default_properties ();
 
   Fdrawnow ();
 
-  return octave_value ();
+  return ovl ();
 }
 
 /*
 
 %!test  # line object
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   tol = 20 * eps;
diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -2376,17 +2376,17 @@ No checks are made for duplicate element
 
       string_vector dirs = load_path::dirs ();
 
       dirs.list_in_columns (octave_stdout);
 
       octave_stdout << "\n";
     }
 
-  return octave_value ();
+  return ovl ();
 }
 
 DEFUN (addpath, args, nargout,
        "-*- texinfo -*-\n\
 @deftypefn  {} {} addpath (@var{dir1}, @dots{})\n\
 @deftypefnx {} {} addpath (@var{dir1}, @dots{}, @var{option})\n\
 Add named directories to the function search path.\n\
 \n\
diff --git a/libinterp/dldfcn/audiodevinfo.cc b/libinterp/dldfcn/audiodevinfo.cc
--- a/libinterp/dldfcn/audiodevinfo.cc
+++ b/libinterp/dldfcn/audiodevinfo.cc
@@ -2032,34 +2032,34 @@ DEFUN_DLD (__recorder_pause__, args, ,
 Undocumented internal function.\n\
 @end deftypefn")
 {
 #ifndef HAVE_PORTAUDIO
   err_disabled_feature ("__recorder_pause__",
                         "audio playback and recording through PortAudio");
 #else
   get_recorder (args(0))->pause ();
+  return ovl ();
 #endif
-  return octave_value ();
 }
 
 DEFUN_DLD (__recorder_recordblocking__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {} {} __recorder_recordblocking__ (@var{recorder}, @var{seconds})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
 #ifndef HAVE_PORTAUDIO
   err_disabled_feature ("__recorder_recordblocking__",
                         "audio playback and recording through PortAudio");
 #else
   float seconds = args(1).float_value ();
   get_recorder (args(0))->recordblocking (seconds);
+  return ovl ();
 #endif
-  return octave_value ();
 }
 
 DEFUN_DLD (__recorder_record__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn  {} {} __recorder_record__ (@var{recorder})\n\
 @deftypefnx {} {} __recorder_record__ (@var{recorder}, @var{seconds})\n\
 Undocumented internal function.\n\
 @end deftypefn")
@@ -2069,98 +2069,98 @@ Undocumented internal function.\n\
                         "audio playback and recording through PortAudio");
 #else
   audiorecorder *recorder = get_recorder (args(0));
 
   if (args.length () == 2)
     recorder->set_end_sample (args(1).int_value () * recorder->get_fs ());
 
   recorder->record ();
+  return ovl ();
 #endif
-  return octave_value ();
 }
 
 DEFUN_DLD (__recorder_resume__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {} {} __recorder_resume__ (@var{recorder})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
 #ifndef HAVE_PORTAUDIO
   err_disabled_feature ("__recorder_resume__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
     get_recorder (args(0))->resume ();
+  return ovl ();
 #endif
-  return octave_value ();
 }
 
 DEFUN_DLD (__recorder_set_fs__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {} {} __recorder_set_fs__ (@var{recorder}, @var{fs})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
 #ifndef HAVE_PORTAUDIO
   err_disabled_feature ("__recorder_set_fs__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 2)
     get_recorder (args(0))->set_fs (args(1).int_value ());
+  return ovl ();
 #endif
-  return octave_value ();
 }
 
 DEFUN_DLD (__recorder_set_tag__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {} {} __recorder_set_tag__ (@var{recorder}, @var{tag})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
 #ifndef HAVE_PORTAUDIO
   err_disabled_feature ("__recorder_set_tag__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 2)
     get_recorder (args(0))->set_tag (args(1).char_matrix_value ());
+  return ovl ();
 #endif
-  return octave_value ();
 }
 
 DEFUN_DLD (__recorder_set_userdata__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {} {} __recorder_set_userdata__ (@var{recorder}, @var{data})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
 #ifndef HAVE_PORTAUDIO
   err_disabled_feature ("__recorder_set_userdata__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 2)
     get_recorder (args(0))->set_userdata (args(1));
+  return ovl ();
 #endif
-  return octave_value ();
 }
 
 DEFUN_DLD (__recorder_stop__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {} {} __recorder_stop__ (@var{recorder})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
 #ifndef HAVE_PORTAUDIO
   err_disabled_feature ("__recorder_stop__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
     get_recorder (args(0))->stop ();
+  return ovl ();
 #endif
-  return octave_value ();
 }
 
 DEFUN_DLD (__player_audioplayer__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn  {} {@var{player} =} __player_audioplayer__ (@var{y}, @var{fs})\n\
 @deftypefnx {} {@var{player} =} __player_audioplayer__ (@var{y}, @var{fs}, @var{nbits})\n\
 @deftypefnx {} {@var{player} =} __player_audioplayer__ (@var{y}, @var{fs}, @var{nbits}, @var{id})\n\
 Undocumented internal function.\n\
@@ -2388,18 +2388,18 @@ Undocumented internal function.\n\
 @end deftypefn")
 {
 #ifndef HAVE_PORTAUDIO
   err_disabled_feature ("__player_pause__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
     get_player (args(0))->pause ();
+  return ovl ();
 #endif
-  return octave_value ();
 }
 
 DEFUN_DLD (__player_playblocking__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn  {} {} __player_playblocking__ (@var{player})\n\
 @deftypefnx {} {} __player_playblocking__ (@var{player}, @var{start})\n\
 @deftypefnx {} {} __player_playblocking__ (@var{player}, [@var{start}, @var{end}])\n\
 Undocumented internal function.\n\
@@ -2440,19 +2440,18 @@ Undocumented internal function.\n\
             error ("audioplayer: invalid range specified for playback");
 
           player->set_sample_number (start);
         }
 
       player->playblocking ();
     }
 
+  return ovl ();
 #endif
-
-  return octave_value ();
 }
 
 DEFUN_DLD (__player_play__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn  {} {} __player_play__ (@var{player})\n\
 @deftypefnx {} {} __player_play__ (@var{player}, @var{start})\n\
 @deftypefnx {} {} __player_play__ (@var{player}, [@var{start}, @var{end}])\n\
 Undocumented internal function.\n\
@@ -2493,92 +2492,91 @@ Undocumented internal function.\n\
             error ("audioplayer: invalid range specified for playback");
 
           player->set_sample_number (start);
         }
 
       player->play ();
     }
 
+  return ovl ();
 #endif
-
-  return octave_value ();
 }
 
 DEFUN_DLD (__player_resume__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {} {} __player_resume__ (@var{player})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
 #ifndef HAVE_PORTAUDIO
   err_disabled_feature ("__player_resume__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
     get_player (args(0))->resume ();
+  return ovl ();
 #endif
-  return octave_value ();
 }
 
 DEFUN_DLD (__player_set_fs__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {} {} __player_set_fs__ (@var{player}, @var{fs})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
 #ifndef HAVE_PORTAUDIO
   err_disabled_feature ("__player_set_fs__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 2)
     get_player (args(0))->set_fs (args(1).int_value ());
+  return ovl ();
 #endif
-  return octave_value ();
 }
 
 DEFUN_DLD (__player_set_tag__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {} {} __player_set_tag__ (@var{player}, @var{tag})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
 #ifndef HAVE_PORTAUDIO
   err_disabled_feature ("__player_set_tag__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 2)
     get_player (args(0))->set_tag (args(1).char_matrix_value ());
+  return ovl ();
 #endif
-  return octave_value ();
 }
 
 DEFUN_DLD (__player_set_userdata__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {} {} __player_set_userdata__ (@var{player}, @var{data})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
 #ifndef HAVE_PORTAUDIO
   err_disabled_feature ("__player_set_userdata__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 2)
     get_player (args(0))->set_userdata (args(1));
+  return ovl ();
 #endif
-  return octave_value ();
 }
 
 DEFUN_DLD (__player_stop__, args, ,
            "-*- texinfo -*-\n\
 @deftypefn {} {} __player_stop__ (@var{player})\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
 #ifndef HAVE_PORTAUDIO
   err_disabled_feature ("__player_stop__",
                         "audio playback and recording through PortAudio");
 #else
   if (args.length () == 1)
     get_player (args(0))->stop ();
+  return ovl ();
 #endif
-  return octave_value ();
 }
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -2011,17 +2011,17 @@ may @emph{only} be called from a class c
         break;
 
       std::string sup_class = fcn->name ();
       if (! symbol_table::set_class_relationship (sup_class, inf_class))
         error ("superiorto: opposite precedence already set for %s and %s",
                sup_class.c_str (), inf_class.c_str ());
     }
 
-  return octave_value ();
+  return ovl ();
 }
 
 DEFUN (inferiorto, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} inferiorto (@var{class_name}, @dots{})\n\
 When called from a class constructor, mark the object currently constructed\n\
 as having a lower precedence than @var{class_name}.\n\
 \n\
