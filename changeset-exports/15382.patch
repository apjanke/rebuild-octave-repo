# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1347563687 14400
#      Thu Sep 13 15:14:47 2012 -0400
# Branch stable
# Node ID 197774b411ec4040f18331b8be294415bbb5347a
# Parent  4663cc835c65873fe12b599bcab11ba4a8f5fb87
rcond: use new copy of data for full factorization if positive definite cholesky factorization fails (bug #37336)

* dMatrix.cc (Matrix::rcond): Don't reuse modified matrix data if
positive definite cholesky factorization was attempted but fails.
* CMatrix.cc (ComplexMatrix::rcond): Likewise.
* fMatrix.cc (FloatMatrix::rcond): Likewise.
* fCMatrix.cc (FloatComplexMatrix::rcond): Likewise.
* rcond.cc: New tests.

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -1781,23 +1781,25 @@ ComplexMatrix::rcond (MatrixType &mattyp
             rcon = 0.0;
         }
       else if (typ == MatrixType::Permuted_Lower)
         (*current_liboctave_error_handler)
           ("permuted triangular matrix not implemented");
       else if (typ == MatrixType::Full || typ == MatrixType::Hermitian)
         {
           double anorm = -1.0;
-          ComplexMatrix atmp = *this;
-          Complex *tmp_data = atmp.fortran_vec ();
 
           if (typ == MatrixType::Hermitian)
             {
               octave_idx_type info = 0;
               char job = 'L';
+
+              ComplexMatrix atmp = *this;
+              Complex *tmp_data = atmp.fortran_vec ();
+
               anorm = atmp.abs().sum().
                 row(static_cast<octave_idx_type>(0)).max();
 
               F77_XFCN (zpotrf, ZPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                          tmp_data, nr, info
                                          F77_CHAR_ARG_LEN (1)));
 
               if (info != 0)
@@ -1824,16 +1826,19 @@ ComplexMatrix::rcond (MatrixType &mattyp
                 }
             }
 
 
           if (typ == MatrixType::Full)
             {
               octave_idx_type info = 0;
 
+              ComplexMatrix atmp = *this;
+              Complex *tmp_data = atmp.fortran_vec ();
+
               Array<octave_idx_type> ipvt (dim_vector (nr, 1));
               octave_idx_type *pipvt = ipvt.fortran_vec ();
 
               if(anorm < 0.)
                 anorm = atmp.abs().sum().
                   row(static_cast<octave_idx_type>(0)).max();
 
               Array<Complex> z (dim_vector (2 * nc, 1));
@@ -2093,18 +2098,20 @@ ComplexMatrix::fsolve (MatrixType &matty
 
      // Calculate the norm of the matrix, for later use.
       double anorm = -1.;
 
       if (typ == MatrixType::Hermitian)
         {
           info = 0;
           char job = 'L';
+
           ComplexMatrix atmp = *this;
           Complex *tmp_data = atmp.fortran_vec ();
+
           anorm = atmp.abs().sum().row(static_cast<octave_idx_type>(0)).max();
 
           F77_XFCN (zpotrf, ZPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                      tmp_data, nr, info
                                      F77_CHAR_ARG_LEN (1)));
 
           // Throw-away extra info LAPACK gives so as to not change output.
           rcon = 0.0;
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -1449,23 +1449,25 @@ Matrix::rcond (MatrixType &mattype) cons
             rcon = 0.0;
         }
       else if (typ == MatrixType::Permuted_Lower)
         (*current_liboctave_error_handler)
           ("permuted triangular matrix not implemented");
       else if (typ == MatrixType::Full || typ == MatrixType::Hermitian)
         {
           double anorm = -1.0;
-          Matrix atmp = *this;
-          double *tmp_data = atmp.fortran_vec ();
 
           if (typ == MatrixType::Hermitian)
             {
               octave_idx_type info = 0;
               char job = 'L';
+
+              Matrix atmp = *this;
+              double *tmp_data = atmp.fortran_vec ();
+
               anorm = atmp.abs().sum().
                 row(static_cast<octave_idx_type>(0)).max();
 
               F77_XFCN (dpotrf, DPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                          tmp_data, nr, info
                                          F77_CHAR_ARG_LEN (1)));
 
               if (info != 0)
@@ -1490,16 +1492,19 @@ Matrix::rcond (MatrixType &mattype) cons
                     rcon = 0.0;
                 }
             }
 
           if (typ == MatrixType::Full)
             {
               octave_idx_type info = 0;
 
+              Matrix atmp = *this;
+              double *tmp_data = atmp.fortran_vec ();
+
               Array<octave_idx_type> ipvt (dim_vector (nr, 1));
               octave_idx_type *pipvt = ipvt.fortran_vec ();
 
               if(anorm < 0.)
                 anorm = atmp.abs().sum().
                   row(static_cast<octave_idx_type>(0)).max();
 
               Array<double> z (dim_vector (4 * nc, 1));
@@ -1755,18 +1760,20 @@ Matrix::fsolve (MatrixType &mattype, con
 
      // Calculate the norm of the matrix, for later use.
       double anorm = -1.;
 
       if (typ == MatrixType::Hermitian)
         {
           info = 0;
           char job = 'L';
+
           Matrix atmp = *this;
           double *tmp_data = atmp.fortran_vec ();
+
           anorm = atmp.abs().sum().row(static_cast<octave_idx_type>(0)).max();
 
           F77_XFCN (dpotrf, DPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                      tmp_data, nr, info
                                      F77_CHAR_ARG_LEN (1)));
 
           // Throw-away extra info LAPACK gives so as to not change output.
           rcon = 0.0;
@@ -1833,16 +1840,17 @@ Matrix::fsolve (MatrixType &mattype, con
         {
           info = 0;
 
           Array<octave_idx_type> ipvt (dim_vector (nr, 1));
           octave_idx_type *pipvt = ipvt.fortran_vec ();
 
           Matrix atmp = *this;
           double *tmp_data = atmp.fortran_vec ();
+
           if(anorm < 0.)
             anorm = atmp.abs().sum().row(static_cast<octave_idx_type>(0)).max();
 
           Array<double> z (dim_vector (4 * nc, 1));
           double *pz = z.fortran_vec ();
           Array<octave_idx_type> iz (dim_vector (nc, 1));
           octave_idx_type *piz = iz.fortran_vec ();
 
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -1777,23 +1777,25 @@ FloatComplexMatrix::rcond (MatrixType &m
             rcon = 0.0;
         }
       else if (typ == MatrixType::Permuted_Lower)
         (*current_liboctave_error_handler)
           ("permuted triangular matrix not implemented");
       else if (typ == MatrixType::Full || typ == MatrixType::Hermitian)
         {
           float anorm = -1.0;
-          FloatComplexMatrix atmp = *this;
-          FloatComplex *tmp_data = atmp.fortran_vec ();
 
           if (typ == MatrixType::Hermitian)
             {
               octave_idx_type info = 0;
               char job = 'L';
+
+              FloatComplexMatrix atmp = *this;
+              FloatComplex *tmp_data = atmp.fortran_vec ();
+
               anorm = atmp.abs().sum().
                 row(static_cast<octave_idx_type>(0)).max();
 
               F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                          tmp_data, nr, info
                                          F77_CHAR_ARG_LEN (1)));
 
               if (info != 0)
@@ -1820,16 +1822,19 @@ FloatComplexMatrix::rcond (MatrixType &m
                 }
             }
 
 
           if (typ == MatrixType::Full)
             {
               octave_idx_type info = 0;
 
+              FloatComplexMatrix atmp = *this;
+              FloatComplex *tmp_data = atmp.fortran_vec ();
+
               Array<octave_idx_type> ipvt (dim_vector (nr, 1));
               octave_idx_type *pipvt = ipvt.fortran_vec ();
 
               if(anorm < 0.)
                 anorm = atmp.abs().sum().
                   row(static_cast<octave_idx_type>(0)).max();
 
               Array<FloatComplex> z (dim_vector (2 * nc, 1));
@@ -2089,18 +2094,20 @@ FloatComplexMatrix::fsolve (MatrixType &
 
      // Calculate the norm of the matrix, for later use.
       float anorm = -1.;
 
       if (typ == MatrixType::Hermitian)
         {
           info = 0;
           char job = 'L';
+
           FloatComplexMatrix atmp = *this;
           FloatComplex *tmp_data = atmp.fortran_vec ();
+
           anorm = atmp.abs().sum().row(static_cast<octave_idx_type>(0)).max();
 
           F77_XFCN (cpotrf, CPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                      tmp_data, nr, info
                                      F77_CHAR_ARG_LEN (1)));
 
           // Throw-away extra info LAPACK gives so as to not change output.
           rcon = 0.0;
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -1449,23 +1449,25 @@ FloatMatrix::rcond (MatrixType &mattype)
             rcon = 0.0;
         }
       else if (typ == MatrixType::Permuted_Lower)
         (*current_liboctave_error_handler)
           ("permuted triangular matrix not implemented");
       else if (typ == MatrixType::Full || typ == MatrixType::Hermitian)
         {
           float anorm = -1.0;
-          FloatMatrix atmp = *this;
-          float *tmp_data = atmp.fortran_vec ();
 
           if (typ == MatrixType::Hermitian)
             {
               octave_idx_type info = 0;
               char job = 'L';
+
+              FloatMatrix atmp = *this;
+              float *tmp_data = atmp.fortran_vec ();
+
               anorm = atmp.abs().sum().
                 row(static_cast<octave_idx_type>(0)).max();
 
               F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                          tmp_data, nr, info
                                          F77_CHAR_ARG_LEN (1)));
 
               if (info != 0)
@@ -1490,16 +1492,19 @@ FloatMatrix::rcond (MatrixType &mattype)
                     rcon = 0.0;
                 }
             }
 
           if (typ == MatrixType::Full)
             {
               octave_idx_type info = 0;
 
+              FloatMatrix atmp = *this;
+              float *tmp_data = atmp.fortran_vec ();
+
               Array<octave_idx_type> ipvt (dim_vector (nr, 1));
               octave_idx_type *pipvt = ipvt.fortran_vec ();
 
               if(anorm < 0.)
                 anorm = atmp.abs().sum().
                   row(static_cast<octave_idx_type>(0)).max();
 
               Array<float> z (dim_vector (4 * nc, 1));
@@ -1755,18 +1760,20 @@ FloatMatrix::fsolve (MatrixType &mattype
 
      // Calculate the norm of the matrix, for later use.
       float anorm = -1.;
 
       if (typ == MatrixType::Hermitian)
         {
           info = 0;
           char job = 'L';
+
           FloatMatrix atmp = *this;
           float *tmp_data = atmp.fortran_vec ();
+
           anorm = atmp.abs().sum().row(static_cast<octave_idx_type>(0)).max();
 
           F77_XFCN (spotrf, SPOTRF, (F77_CONST_CHAR_ARG2 (&job, 1), nr,
                                      tmp_data, nr, info
                                      F77_CHAR_ARG_LEN (1)));
 
           // Throw-away extra info LAPACK gives so as to not change output.
           rcon = 0.0;
@@ -1833,16 +1840,17 @@ FloatMatrix::fsolve (MatrixType &mattype
         {
           info = 0;
 
           Array<octave_idx_type> ipvt (dim_vector (nr, 1));
           octave_idx_type *pipvt = ipvt.fortran_vec ();
 
           FloatMatrix atmp = *this;
           float *tmp_data = atmp.fortran_vec ();
+
           if(anorm < 0.)
             anorm = atmp.abs().sum().row(static_cast<octave_idx_type>(0)).max();
 
           Array<float> z (dim_vector (4 * nc, 1));
           float *pz = z.fortran_vec ();
           Array<octave_idx_type> iz (dim_vector (nc, 1));
           octave_idx_type *piz = iz.fortran_vec ();
 
diff --git a/src/DLD-FUNCTIONS/rcond.cc b/src/DLD-FUNCTIONS/rcond.cc
--- a/src/DLD-FUNCTIONS/rcond.cc
+++ b/src/DLD-FUNCTIONS/rcond.cc
@@ -88,9 +88,17 @@ instead.\n\
 
 /*
 
 %!assert( rcond (eye (2)), 1)
 %!assert( rcond (ones (2)), 0)
 %!assert( rcond ([1 1; 2 1]), 1/9)
 %!assert( rcond (magic (4)), 0, eps)
 
+%!shared x, sx
+%! x = [-5.25, -2.25; -2.25, 1] * eps () + ones (2) / 2;
+%! sx = [-5.25, -2.25; -2.25, 1] * eps ("single") + ones (2) / 2;
+%!assert (rcond (x) < eps ());
+%!assert (rcond (sx) < eps ('single'));
+%!assert (rcond (x*i) < eps ());
+%!assert (rcond (sx*i) < eps ('single'));
+
 */
