# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1362669939 18000
#      Thu Mar 07 10:25:39 2013 -0500
# Branch classdef
# Node ID d2b268936783def487edf02b9231aa4065a8fba8
# Parent  3449bf2575148c2493dcf8843aaef88772227ea1
# Parent  78365c56a7622a17718648ba621a6ce6c1ecfb39
maint: periodic merge of default to classdef

diff --git a/libinterp/interp-core/txt-eng-ft.cc b/libinterp/interp-core/txt-eng-ft.cc
--- a/libinterp/interp-core/txt-eng-ft.cc
+++ b/libinterp/interp-core/txt-eng-ft.cc
@@ -645,16 +645,17 @@ ft_render::text_to_pixels (const std::st
     case 2: box(0) = -box(2); break;
     }
   switch (valign)
     {
     default: box(1) = 0; break;
     case 1: box(1) = -box(3)/2; break;
     case 2: box(1) = -box(3); break;
     case 3: break;
+    case 4: box(1) = -box(3)-box(1); break;
     }
 
   switch (rot_mode)
     {
     case ROTATION_90:
       std::swap (box(0), box(1));
       std::swap (box(2), box(3));
       box(0) = -box(0)-box(2);
diff --git a/libinterp/interpfcn/graphics.cc b/libinterp/interpfcn/graphics.cc
--- a/libinterp/interpfcn/graphics.cc
+++ b/libinterp/interpfcn/graphics.cc
@@ -3899,17 +3899,17 @@ axes::properties::init (void)
   xset (xlabel.handle_value (), "horizontalalignmentmode", "auto");
   xset (ylabel.handle_value (), "horizontalalignment", "center");
   xset (ylabel.handle_value (), "horizontalalignmentmode", "auto");
   xset (zlabel.handle_value (), "horizontalalignment", "right");
   xset (zlabel.handle_value (), "horizontalalignmentmode", "auto");
   xset (title.handle_value (), "horizontalalignment", "center");
   xset (title.handle_value (), "horizontalalignmentmode", "auto");
 
-  xset (xlabel.handle_value (), "verticalalignment", "cap");
+  xset (xlabel.handle_value (), "verticalalignment", "top");
   xset (xlabel.handle_value (), "verticalalignmentmode", "auto");
   xset (ylabel.handle_value (), "verticalalignment", "bottom");
   xset (ylabel.handle_value (), "verticalalignmentmode", "auto");
   xset (title.handle_value (), "verticalalignment", "bottom");
   xset (title.handle_value (), "verticalalignmentmode", "auto");
 
   xset (ylabel.handle_value (), "rotation", 90.0);
   xset (ylabel.handle_value (), "rotationmode", "auto");
@@ -4407,17 +4407,17 @@ axes::properties::set_defaults (base_gra
   xset (xlabel.handle_value (), "horizontalalignmentmode", "auto");
   xset (ylabel.handle_value (), "horizontalalignment", "center");
   xset (ylabel.handle_value (), "horizontalalignmentmode", "auto");
   xset (zlabel.handle_value (), "horizontalalignment", "right");
   xset (zlabel.handle_value (), "horizontalalignmentmode", "auto");
   xset (title.handle_value (), "horizontalalignment", "center");
   xset (title.handle_value (), "horizontalalignmentmode", "auto");
 
-  xset (xlabel.handle_value (), "verticalalignment", "cap");
+  xset (xlabel.handle_value (), "verticalalignment", "top");
   xset (xlabel.handle_value (), "verticalalignmentmode", "auto");
   xset (ylabel.handle_value (), "verticalalignment", "bottom");
   xset (ylabel.handle_value (), "verticalalignmentmode", "auto");
   xset (title.handle_value (), "verticalalignment", "bottom");
   xset (title.handle_value (), "verticalalignmentmode", "auto");
 
   xset (ylabel.handle_value (), "rotation", 90.0);
   xset (ylabel.handle_value (), "rotationmode", "auto");
@@ -7017,22 +7017,24 @@ text::properties::update_text_extent (vo
 
   int halign = 0, valign = 0;
 
   if (horizontalalignment_is ("center"))
     halign = 1;
   else if (horizontalalignment_is ("right"))
     halign = 2;
 
-  if (verticalalignment_is ("top"))
+  if (verticalalignment_is ("middle"))
+    valign = 1;
+  else if (verticalalignment_is ("top"))
     valign = 2;
   else if (verticalalignment_is ("baseline"))
     valign = 3;
-  else if (verticalalignment_is ("middle"))
-    valign = 1;
+  else if (verticalalignment_is ("cap"))
+    valign = 4;
 
   Matrix bbox;
 
   // FIXME: string should be parsed only when modified, for efficiency
 
   octave_value string_prop = get_string ();
 
   string_vector sv = string_prop.all_strings ();
diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -89,31 +89,22 @@ std::string VPS4 = "+ ";
 int Vecho_executing_commands = ECHO_OFF;
 
 // The time we last printed a prompt.
 octave_time Vlast_prompt_time = 0.0;
 
 // Character to append after successful command-line completion attempts.
 static char Vcompletion_append_char = ' ';
 
-// TRUE means that stdin is a terminal, not a pipe or redirected file.
-bool stdin_is_tty = false;
-
 // TRUE means this is an interactive shell.
 bool interactive = false;
 
 // TRUE means the user forced this shell to be interactive (-i).
 bool forced_interactive = false;
 
-// Should we issue a prompt?
-int promptflag = 1;
-
-// The current line of input, from wherever.
-std::string current_input_line;
-
 // TRUE after a call to completion_matches.
 bool octave_completion_matches_called = false;
 
 // TRUE if the plotting system has requested a call to drawnow at
 // the next user prompt.
 bool Vdrawnow_requested = false;
 
 // TRUE if we are in debugging mode.
@@ -124,28 +115,28 @@ bool Vdebugging = false;
 static std::string last_debugging_command;
 
 // TRUE if we are running in the Emacs GUD mode.
 static bool Vgud_mode = false;
 
 // The filemarker used to separate filenames from subfunction names
 char Vfilemarker = '>';
 
-static void
-do_input_echo (const std::string& input_string)
+void
+octave_base_reader::do_input_echo (const std::string& input_string) const
 {
   int do_echo = CURR_LEXER->reading_script_file ?
     (Vecho_executing_commands & ECHO_SCRIPTS)
       : (Vecho_executing_commands & ECHO_CMD_LINE) && ! forced_interactive;
 
   if (do_echo)
     {
       if (forced_interactive)
         {
-          if (promptflag > 0)
+          if (pflag > 0)
             octave_stdout << command_editor::decode_prompt_string (VPS1);
           else
             octave_stdout << command_editor::decode_prompt_string (VPS2);
         }
       else
         octave_stdout << command_editor::decode_prompt_string (VPS4);
 
       if (! input_string.empty ())
@@ -160,18 +151,16 @@ do_input_echo (const std::string& input_
 
 static std::string
 gnu_readline (const std::string& s, bool& eof)
 {
   octave_quit ();
 
   eof = false;
 
-  assert (line_editing);
-
   std::string retval = command_editor::readline (s, eof);
 
   if (! eof && retval.empty ())
     retval = "\n";
 
   return retval;
 }
 
@@ -204,17 +193,17 @@ octave_base_reader::octave_gets (bool& e
   octave_quit ();
 
   eof = false;
 
   std::string retval;
 
   bool history_skip_auto_repeated_debugging_command = false;
 
-  std::string ps = (promptflag > 0) ? VPS1 : VPS2;
+  std::string ps = (pflag > 0) ? VPS1 : VPS2;
 
   std::string prompt = command_editor::decode_prompt_string (ps);
 
   pipe_handler_error_count = 0;
 
   flush_octave_stdout ();
 
   octave_pager_stream::reset ();
@@ -237,29 +226,27 @@ octave_base_reader::octave_gets (bool& e
         last_debugging_command = std::string ();
     }
   else if (Vdebugging)
     {
       retval = last_debugging_command;
       history_skip_auto_repeated_debugging_command = true;
     }
 
-  current_input_line = retval;
-
-  if (! current_input_line.empty ())
+  if (! retval.empty ())
     {
       if (! history_skip_auto_repeated_debugging_command)
-        command_history::add (current_input_line);
+        command_history::add (retval);
 
-      octave_diary << current_input_line;
+      octave_diary << retval;
 
-      if (current_input_line[current_input_line.length () - 1] != '\n')
+      if (retval[retval.length () - 1] != '\n')
         octave_diary << "\n";
 
-      do_input_echo (current_input_line);
+      do_input_echo (retval);
     }
   else
     octave_diary << "\n";
 
   return retval;
 }
 
 // Fix things up so that input can come from the standard input.  This
@@ -555,37 +542,29 @@ const std::string octave_terminal_reader
 
 std::string
 octave_terminal_reader::get_input (bool& eof)
 {
   octave_quit ();
 
   eof = false;
 
-  std::string retval = octave_gets (eof);
-
-  current_input_line = retval;
-
-  return retval;
+  return octave_gets (eof);
 }
 
 const std::string octave_file_reader::in_src ("file");
 
 std::string
 octave_file_reader::get_input (bool& eof)
 {
   octave_quit ();
 
   eof = false;
 
-  std::string retval = octave_fgets (file, eof);
-
-  current_input_line = retval;
-
-  return retval;
+  return octave_fgets (file, eof);
 }
 
 const std::string octave_eval_string_reader::in_src ("eval_string");
 
 std::string
 octave_eval_string_reader::get_input (bool& eof)
 {
   octave_quit ();
@@ -598,18 +577,16 @@ octave_eval_string_reader::get_input (bo
 
   // Clear the eval string so that the next call will return
   // an empty character string with EOF = true.
   eval_string = "";
 
   if (retval.empty ())
     eof = true;
 
-  current_input_line = retval;
-
   return retval;
 }
 
 // If the user simply hits return, this will produce an empty matrix.
 
 static octave_value_list
 get_user_input (const octave_value_list& args, int nargout)
 {
diff --git a/libinterp/interpfcn/input.h b/libinterp/interpfcn/input.h
--- a/libinterp/interpfcn/input.h
+++ b/libinterp/interpfcn/input.h
@@ -32,31 +32,22 @@ along with Octave; see the file COPYING.
 #include "oct-time.h"
 #include "oct-obj.h"
 #include "pager.h"
 
 class octave_value;
 
 extern OCTINTERP_API FILE *get_input_from_stdin (void);
 
-// TRUE means that stdin is a terminal, not a pipe or redirected file.
-extern bool stdin_is_tty;
-
 // TRUE means this is an interactive shell.
 extern bool interactive;
 
 // TRUE means the user forced this shell to be interactive (-i).
 extern bool forced_interactive;
 
-// Should we issue a prompt?
-extern int promptflag;
-
-// A line of input.
-extern std::string current_input_line;
-
 // TRUE after a call to completion_matches.
 extern bool octave_completion_matches_called;
 
 // TRUE if the plotting system has requested a call to drawnow at
 // the next user prompt.
 extern OCTINTERP_API bool Vdrawnow_requested;
 
 // TRUE if we are in debugging mode.
@@ -86,32 +77,51 @@ extern octave_time Vlast_prompt_time;
 
 class
 octave_base_reader
 {
 public:
 
   friend class octave_input_reader;
 
-  octave_base_reader (void) : count (1) { }
+  octave_base_reader (void) : count (1), pflag (0) { }
 
   octave_base_reader (const octave_base_reader&) : count (1) { }
 
   virtual ~octave_base_reader (void) { }
 
   virtual std::string get_input (bool& eof) = 0;
 
   virtual std::string input_source (void) const { return in_src; }
 
+  void reset (void) { promptflag (1); }
+
+  void increment_promptflag (void) { pflag++; }
+
+  void decrement_promptflag (void) { pflag--; }
+
+  int promptflag (void) const { return pflag; }
+
+  int promptflag (int n)
+  {
+    int retval = pflag;
+    pflag = n;
+    return retval;
+  }
+
   std::string octave_gets (bool& eof);
 
 private:
 
   int count;
 
+  int pflag;
+
+  void do_input_echo (const std::string&) const;
+
   static const std::string in_src;
 };
 
 class
 octave_terminal_reader : public octave_base_reader
 {
 public:
 
@@ -199,16 +209,26 @@ public:
   }
 
   ~octave_input_reader (void)
   {
     if (--rep->count == 0)
       delete rep;
   }
 
+  void reset (void) { return rep->reset (); }
+
+  void increment_promptflag (void) { rep->increment_promptflag (); }
+
+  void decrement_promptflag (void) { rep->decrement_promptflag (); }
+
+  int promptflag (void) const { return rep->promptflag (); }
+
+  int promptflag (int n) { return rep->promptflag (n); }
+
   std::string get_input (bool& eof)
   {
     return rep->get_input (eof);
   }
 
   std::string input_source (void) const
   {
     return rep->input_source ();
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -93,16 +93,20 @@ static string_vector octave_argv;
 
 // The name used to invoke Octave.
 static std::string
 octave_program_invocation_name;
 
 // The last component of octave_program_invocation_name.
 static std::string octave_program_name;
 
+// TRUE means we are using readline.
+// (--no-line-editing)
+static bool line_editing = true;
+
 // TRUE means we read ~/.octaverc and ./.octaverc.
 // (--norc; --no-init-file; -f)
 static bool read_init_files = true;
 
 // TRUE means we read the site-wide octaverc files.
 // (--norc; --no-site-file; -f)
 static bool read_site_files = true;
 
@@ -896,17 +900,17 @@ octave_initialize_interpreter (int argc,
 
   atexit (do_octave_atexit);
 
   // Is input coming from a terminal?  If so, we are probably
   // interactive.
 
   // If stdin is not a tty, then we are reading commands from a pipe or
   // a redirected file.
-  stdin_is_tty = gnulib::isatty (fileno (stdin));
+  bool stdin_is_tty = gnulib::isatty (fileno (stdin));
 
   interactive = (! embedded && stdin_is_tty
                  && gnulib::isatty (fileno (stdout)));
 
   if (! interactive && ! forced_line_editing)
     line_editing = false;
 
   // Force default line editor if we don't want readline editing.
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -174,19 +174,20 @@ public:
       parsing_classdef_set_method (false), 
       quote_is_transpose (false), force_script (false),
       reading_fcn_file (false), reading_script_file (false),
       reading_classdef_file (false),
       input_line_number (1), current_input_column (1),
       bracketflag (0), braceflag (0),
       looping (0), defining_func (0), looking_at_function_handle (0),
       block_comment_nesting_level (0), token_count (0),
-      help_text (), fcn_file_name (), fcn_file_full_name (),
-      looking_at_object_index (), parsed_function_name (),
-      pending_local_variables (), nesting_level (), token_stack ()
+      current_input_line (), help_text (), fcn_file_name (),
+      fcn_file_full_name (), looking_at_object_index (),
+      parsed_function_name (), pending_local_variables (),
+      nesting_level (), token_stack ()
   {
     init ();
   }
 
   ~lexical_feedback (void);
 
   void init (void);
 
@@ -290,16 +291,19 @@ public:
 
   // nestng level for blcok comments.
   int block_comment_nesting_level;
 
   // Count of tokens recognized by this lexer since initialized or
   // since the last reset.
   size_t token_count;
 
+  // The current line of input.
+  std::string current_input_line;
+
   // The current help text.
   std::string help_text;
 
   // Simple name of function file we are reading.
   std::string fcn_file_name;
 
   // Full name of file we are reading.
   std::string fcn_file_full_name;
@@ -495,16 +499,24 @@ public:
   // Internal state of the flex-generated lexer.
   void *scanner;
 
   // Object that reads and buffers input.
   input_buffer input_buf;
 
   octave_input_reader input_reader;
 
+  void increment_promptflag (void) { input_reader.increment_promptflag (); }
+
+  void decrement_promptflag (void) { input_reader.decrement_promptflag (); }
+
+  int promptflag (void) const { return input_reader.promptflag (); }
+
+  int promptflag (int n) { return input_reader.promptflag (n); }
+
   std::string input_source (void) const
   {
     return input_reader.input_source ();
   }
 
   bool input_from_terminal (void) const
   {
     return input_source () == "terminal";
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -533,17 +533,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
     curr_lexer->at_beginning_of_statement = false;
 
     if (curr_lexer->defining_func
         && ! curr_lexer->parsed_function_name.top ())
       curr_lexer->looking_at_return_list = true;
     else
       curr_lexer->looking_at_matrix_or_assign_lhs = true;
 
-    promptflag--;
+    curr_lexer->decrement_promptflag ();
     curr_lexer->eat_whitespace ();
 
     curr_lexer->bracketflag++;
     BEGIN (MATRIX_START);
     COUNT_TOK_AND_RETURN ('[');
   }
 
 \] {
@@ -597,17 +597,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
 
 {CONT}{S}*{NL} |
 {CONT}{S}*{COMMENT} {
     LEXER_DEBUG ("{CONT}{S}*{NL}|{CONT}{S}*{COMMENT}");
 
     if (yytext[0] == '\\')
       curr_lexer->gripe_matlab_incompatible_continuation ();
     curr_lexer->scan_for_comments (yytext);
-    promptflag--;
+    curr_lexer->decrement_promptflag ();
     curr_lexer->input_line_number++;
     curr_lexer->current_input_column = 1;
   }
 
 %{
 // End of file.
 %}
 
@@ -776,17 +776,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
 ^{S}*{CCHAR}\{{S}*{NL} {
     LEXER_DEBUG ("^{S}*{CCHAR}\\{{S}*{NL}");
 
     curr_lexer->looking_for_object_index = false;
 
     curr_lexer->input_line_number++;
     curr_lexer->current_input_column = 1;
     curr_lexer->block_comment_nesting_level++;
-    promptflag--;
+    curr_lexer->decrement_promptflag ();
 
     bool eof = false;
     curr_lexer->process_comment (true, eof);
   }
 
 %{
 // Other operators.
 %}
@@ -847,17 +847,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
     curr_lexer->looking_at_object_index.push_front
       (curr_lexer->looking_for_object_index);
 
     curr_lexer->looking_at_indirect_ref = false;
     curr_lexer->looking_for_object_index = false;
     curr_lexer->at_beginning_of_statement = false;
 
     curr_lexer->nesting_level.paren ();
-    promptflag--;
+    curr_lexer->decrement_promptflag ();
 
     TOK_RETURN ('(');
   }
 
 ")" {
     LEXER_DEBUG (")");
 
     curr_lexer->nesting_level.remove ();
@@ -915,17 +915,17 @@ NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{E
       (curr_lexer->looking_for_object_index);
 
     curr_lexer->current_input_column += yyleng;
     curr_lexer->quote_is_transpose = false;
     curr_lexer->convert_spaces_to_comma = true;
     curr_lexer->looking_for_object_index = false;
     curr_lexer->at_beginning_of_statement = false;
 
-    promptflag--;
+    curr_lexer->decrement_promptflag ();
     curr_lexer->eat_whitespace ();
 
     curr_lexer->braceflag++;
     BEGIN (MATRIX_START);
     COUNT_TOK_AND_RETURN ('{');
   }
 
 "}" {
@@ -1334,16 +1334,17 @@ lexical_feedback::reset (void)
   current_input_column = 1;
   bracketflag = 0;
   braceflag = 0;
   looping = 0;
   defining_func = 0;
   looking_at_function_handle = 0;
   block_comment_nesting_level = 0;
   token_count = 0;
+  current_input_line = "";
   help_text = "";
   fcn_file_name = "";
   fcn_file_full_name = "";
   looking_at_object_index.clear ();
   looking_at_object_index.push_front (false);
 
   while (! parsed_function_name.empty ())
     parsed_function_name.pop ();
@@ -1442,29 +1443,31 @@ octave_lexer::reset (void)
   OCTAVE_YYG;
 
   // Start off on the right foot.
   BEGIN (INITIAL);
 
   parser_symtab_context.clear ();
 
   // We do want a prompt by default.
-  promptflag = 1;
+  promptflag (1);
 
   // Only ask for input from stdin if we are expecting interactive
   // input.
 
   if (! quitting_gracefully
       && (interactive || forced_interactive)
       && ! (reading_fcn_file
             || reading_classdef_file
             || reading_script_file
             || input_from_eval_string ()))
     yyrestart (stdin, scanner);
 
+  input_reader.reset ();
+
   lexical_feedback::reset ();
 }
 
 void
 octave_lexer::prep_for_file (void)
 {
   OCTAVE_YYG;
 
@@ -1474,18 +1477,18 @@ octave_lexer::prep_for_file (void)
 int
 octave_lexer::read (char *buf, unsigned max_size)
 {
   int status = 0;
 
   if (input_buf.empty ())
     {
       bool eof = false;
-      std::string input = input_reader.get_input (eof);
-      input_buf.fill (input, eof);
+      current_input_line = input_reader.get_input (eof);
+      input_buf.fill (current_input_line, eof);
     }
 
   if (! input_buf.empty ())
     status = input_buf.copy_chunk (buf, max_size);
   else
     {
       status = YY_NULL;
 
@@ -1780,35 +1783,35 @@ octave_lexer::is_keyword_token (const st
           tok_val = new token (token::properties_end, l, c);
           at_beginning_of_statement = true;
           break;
 
 
         case for_kw:
         case parfor_kw:
         case while_kw:
-          promptflag--;
+          decrement_promptflag ();
           looping++;
           break;
 
         case do_kw:
           at_beginning_of_statement = true;
-          promptflag--;
+          decrement_promptflag ();
           looping++;
           break;
 
         case try_kw:
         case unwind_protect_kw:
           at_beginning_of_statement = true;
-          promptflag--;
+          decrement_promptflag ();
           break;
 
         case if_kw:
         case switch_kw:
-          promptflag--;
+          decrement_promptflag ();
           break;
 
         case get_kw:
         case set_kw:
           // 'get' and 'set' are keywords in classdef method
           // declarations.
           if (! maybe_classdef_get_set_method)
             return 0;
@@ -1821,27 +1824,27 @@ octave_lexer::is_keyword_token (const st
           // 'properties', 'methods' and 'events' are keywords for
           // classdef blocks.
           if (! parsing_classdef)
             return 0;
           // fall through ...
 
         case classdef_kw:
           // 'classdef' is always a keyword.
-          promptflag--;
+          decrement_promptflag ();
 
           if (! force_script && token_count == 0 && input_from_file ())
             {
               reading_classdef_file = true;
               reading_script_file = false;
             }
           break;
 
         case function_kw:
-          promptflag--;
+          decrement_promptflag ();
 
           defining_func++;
           parsed_function_name.push (false);
 
           if (! force_script && token_count == 0 && input_from_file ())
             {
               reading_fcn_file = true;
               reading_script_file = false;
@@ -1934,22 +1937,22 @@ octave_lexer::grab_block_comment (stream
                       {
                         current_input_column = 0;
                         at_bol = true;
                         done = true;
 
                         if (type == '{')
                           {
                             block_comment_nesting_level++;
-                            promptflag--;
+                            decrement_promptflag ();
                           }
                         else
                           {
                             block_comment_nesting_level--;
-                            promptflag++;
+                            increment_promptflag ();
 
                             if (block_comment_nesting_level == 0)
                               {
                                 buf += grab_comment_block (reader, true, eof);
 
                                 return buf;
                               }
                           }
@@ -2042,17 +2045,17 @@ octave_lexer::grab_comment_block (stream
 
                     case '\n':
                       {
                         current_input_column = 0;
                         at_bol = true;
                         done = true;
 
                         block_comment_nesting_level++;
-                        promptflag--;
+                        decrement_promptflag ();
 
                         buf += grab_block_comment (reader, eof);
 
                         in_comment = false;
 
                         if (eof)
                           goto done;
                       }
@@ -2642,17 +2645,17 @@ octave_lexer::have_continuation (bool tr
 
         case '\n':
           if (in_comment)
             {
               comment_buf += static_cast<char> (c);
               octave_comment_buffer::append (comment_buf);
             }
           current_input_column = 0;
-          promptflag--;
+          decrement_promptflag ();
           gripe_matlab_incompatible_continuation ();
           return true;
 
         default:
           if (in_comment)
             {
               comment_buf += static_cast<char> (c);
               beginning_of_comment = false;
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -92,20 +92,16 @@ octave_lexer *CURR_LEXER = 0;
 // Calls to the following functions appear in the generated output from
 // Bison without the namespace tag.  Redefine them so we will use them
 // via the gnulib namespace.
 #define fclose GNULIB_NAMESPACE::fclose
 #define fprintf GNULIB_NAMESPACE::fprintf
 #define malloc GNULIB_NAMESPACE::malloc
 #endif
 
-// TRUE means we are using readline.
-// (--no-line-editing)
-bool line_editing = true;
-
 // TRUE means we printed messages about reading startup files.
 bool reading_startup_message_printed = false;
 
 // Keep track of symbol table information when parsing functions.
 symtab_context parser_symtab_context;
 
 // List of autoloads (function -> file mapping).
 static std::map<std::string, std::string> autoload_map;
@@ -339,17 +335,16 @@ make_statement (T *arg)
 
 // ==============================
 // Statements and statement lists
 // ==============================
 
 input           : input1
                   {
                     curr_parser.stmt_list = $1;
-                    promptflag = 1;
                     YYACCEPT;
                   }
                 | simple_list parse_error
                   { ABORT_PARSE; }
                 | parse_error
                   { ABORT_PARSE; }
                 ;
 
@@ -3361,26 +3356,28 @@ octave_parser::bison_error (const char *
   else
     output_buf << "parse error:";
 
   if (s && strcmp (s, "parse error") != 0)
     output_buf << "\n\n  " << s;
 
   output_buf << "\n\n";
 
-  if (! current_input_line.empty ())
+  std::string curr_line = curr_lexer->current_input_line;
+
+  if (! curr_line.empty ())
     {
-      size_t len = current_input_line.length ();
-
-      if (current_input_line[len-1] == '\n')
-        current_input_line.resize (len-1);
+      size_t len = curr_line.length ();
+
+      if (curr_line[len-1] == '\n')
+        curr_line.resize (len-1);
 
       // Print the line, maybe with a pointer near the error token.
 
-      output_buf << ">>> " << current_input_line << "\n";
+      output_buf << ">>> " << curr_line << "\n";
 
       if (err_col == 0)
         err_col = len;
 
       for (int i = 0; i < err_col + 3; i++)
         output_buf << " ";
 
       output_buf << "^";
@@ -3420,20 +3417,16 @@ parse_fcn_file (const std::string& full_
   octave_function *fcn_ptr = 0;
 
   // Open function file and parse.
 
   FILE *in_stream = command_editor::get_input_stream ();
 
   frame.add_fcn (command_editor::set_input_stream, in_stream);
 
-  frame.protect_var (line_editing);
-
-  line_editing = false;
-
   frame.add_fcn (command_history::ignore_entries,
                  command_history::ignoring_entries ());
 
   command_history::ignore_entries ();
 
   FILE *ffile = 0;
 
   if (! full_file.empty ())
@@ -4162,20 +4155,16 @@ eval_string (const std::string& eval_str
 
   unwind_protect frame;
 
   // octave_parser constructor sets this for us.
   frame.protect_var (CURR_LEXER);
 
   octave_parser curr_parser (eval_str);
 
-  frame.protect_var (line_editing);
-
-  line_editing = false;
-
   do
     {
       curr_parser.reset ();
 
       // Do this with an unwind-protect cleanup function so that the
       // forced variables will be unmarked in the event of an
       // interrupt.
       symbol_table::scope_id scope = symbol_table::top_scope ();
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -78,19 +78,16 @@ class tree_switch_case;
 class tree_switch_case_list;
 class tree_switch_command;
 
 #include "oct-obj.h"
 
 // Nonzero means print parser debugging info (-d).
 extern int octave_debug;
 
-// TRUE means we are using readline.
-extern bool line_editing;
-
 // TRUE means we printed messages about reading startup files.
 extern bool reading_startup_message_printed;
 
 extern OCTINTERP_API std::string
 get_help_from_file (const std::string& nm, bool& symbol_found,
                     std::string& file);
 
 extern OCTINTERP_API std::string
