# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1390274182 18000
#      Mon Jan 20 22:16:22 2014 -0500
# Node ID ff311e5ff6d8a3aecc5a9bd5c9bc5cd8faae555c
# Parent  06eb893b9db688d11fb15ab04d0782f0d13e20ed
Don't call classdef-overloaded subsref from builtin calls.

* ov-class.cc (called_from_builtin): Moved to ov-base.cc.
* ov-base.cc (called_from_builtin): Moved from ov-class.cc.
* ov-base.h (called_from_builtin): Declare in octave API.
* ov-classdef.cc (octave_classdef::subsref): Don't call overloaded
subsref when called from "builtin".

diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -47,16 +47,17 @@ along with Octave; see the file COPYING.
 #include "ov-range.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "ov-str-mat.h"
 #include "ov-fcn-handle.h"
 #include "parse.h"
 #include "pr-output.h"
 #include "utils.h"
+#include "toplev.h"
 #include "variables.h"
 
 builtin_type_t btyp_mixed_numeric (builtin_type_t x, builtin_type_t y)
 {
   builtin_type_t retval = btyp_unknown;
 
   if (x == btyp_bool)
     x = btyp_double;
@@ -1622,16 +1623,30 @@ make_idx_args (const std::string& type,
       retval = m;
     }
   else
     error ("invalid index for %s", who.c_str ());
 
   return retval;
 }
 
+bool
+called_from_builtin (void)
+{
+  octave_function *fcn = octave_call_stack::caller ();
+
+  // FIXME: we probably need a better check here, or some other
+  // mechanism to avoid overloaded functions when builtin is used.
+  // For example, what if someone overloads the builtin function?
+  // Also, are there other places where using builtin is not properly
+  // avoiding dispatch?
+
+  return (fcn && fcn->name () == "builtin");
+}
+
 void
 install_base_type_conversions (void)
 {
   INSTALL_ASSIGNCONV (octave_base_value, octave_scalar, octave_matrix);
   INSTALL_ASSIGNCONV (octave_base_value, octave_matrix, octave_matrix);
   INSTALL_ASSIGNCONV (octave_base_value, octave_complex, octave_complex_matrix);
   INSTALL_ASSIGNCONV (octave_base_value, octave_complex_matrix,
                       octave_complex_matrix);
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -831,9 +831,13 @@ extern OCTINTERP_API bool Vsparse_auto_m
 // Utility function to convert C++ arguments used in subsref/subsasgn into an
 // octave_value_list object that can be used to call a function/method in the
 // interpreter.
 extern OCTINTERP_API octave_value
 make_idx_args (const std::string& type,
                const std::list<octave_value_list>& idx,
                const std::string& who);
 
+// Tells whether some regular octave_value_base methods are being called from
+// within the "builtin" function.
+extern OCTINTERP_API bool called_from_builtin (void);
+
 #endif
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -302,30 +302,16 @@ octave_class::dotref (const octave_value
         error ("class has no member '%s'", nm.c_str ());
     }
   else
     gripe_invalid_index1 ();
 
   return retval;
 }
 
-static bool
-called_from_builtin (void)
-{
-  octave_function *fcn = octave_call_stack::caller ();
-
-  // FIXME: we probably need a better check here, or some other
-  // mechanism to avoid overloaded functions when builtin is used.
-  // For example, what if someone overloads the builtin function?
-  // Also, are there other places where using builtin is not properly
-  // avoiding dispatch?
-
-  return (fcn && fcn->name () == "builtin");
-}
-
 Matrix
 octave_class::size (void)
 {
   if (in_class_method () || called_from_builtin ())
     return octave_base_value::size ();
 
   Matrix retval (1, 2, 1.0);
   octave_value meth = symbol_table::find_method ("size", class_name ());
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -890,17 +890,17 @@ octave_classdef::subsref (const std::str
                           const std::list<octave_value_list>& idx,
                           int nargout)
 {
   size_t skip = 0;
   octave_value_list retval;
 
   cdef_class cls = object.get_class ();
 
-  if (! in_class_method (cls))
+  if (! in_class_method (cls) && ! called_from_builtin ())
     {
       cdef_method meth = cls.find_method ("subsref");
 
       if (meth.ok ())
         {
           octave_value_list args;
 
           args(1) = make_idx_args (type, idx, "subsref");
