# HG changeset patch
# User jwe
# Date 1113922969 0
#      Tue Apr 19 15:02:49 2005 +0000
# Node ID fe5ee25a5e6cb48022241dde41860e1cb2f7dec4
# Parent  e14d6e159dab84d896c812329436986cc86021e3
[project @ 2005-04-19 15:02:49 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2005-04-14  John W. Eaton  <jwe@octave.org>
+
+	* mkoctfile.in: Only perform link step if we have some object files.
+	If only -v or --version is supplied, print version info and exit.
+
 2005-04-08  John W. Eaton  <jwe@octave.org>
 
 	* octMakefile.in (maintainer-clean distclean):
 	Remove install-octave from the list of files to remove.
 	(install-octave.in): Delete file.
 	(DISTFILES): Remove it from the list.
 
 	* Initial merge of 64-bit changes from Clinton Chee:
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2902,16 +2902,23 @@ assignN (Array<LT>& lhs, const Array<RT>
   idx_vector *idx_vex = lhs.get_idx ();
 
   Array<idx_vector> idx = conv_to_array (idx_vex, n_idx);
 
   if (rhs_dims_len == 2 && rhs_dims(0) == 0 && rhs_dims(1) == 0)
     {
       lhs.maybe_delete_elements (idx, rfv);
     }
+  else if (n_idx == 0)
+    {
+      (*current_liboctave_error_handler)
+	("invalid number of indices for matrix expression");
+
+      retval = 0;
+    }
   else if (n_idx == 1)
     {
       idx_vector iidx = idx(0);
 
       if (liboctave_wfi_flag
 	  && ! (iidx.is_colon ()
 		|| (iidx.one_zero_only ()
 		    && iidx.orig_dimensions () == lhs.dims ())))
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2005-04-19  John W. Eaton  <jwe@octave.org>
+
+	* Array.cc (assignN): Don't crash if the index list is empty.
+
 2005-04-14  David Bateman  <dbateman@free.fr>
 
 	* SparseCmplxLU.cc: Add flags for incomplete factorization.
 	* SparsedbleLU.cc: Ditto.
 	* SparseCmplxLU.h: Definition.
 	* SparsedbleLU.h: ditto.
 
 	* SparseType.cc (transpose): New function.
diff --git a/mkoctfile.in b/mkoctfile.in
--- a/mkoctfile.in
+++ b/mkoctfile.in
@@ -2,16 +2,18 @@
 #
 # mkoctfile -- create a .oct file suitable for dynamic linking by
 # Octave.
 
 # Exit immediately on any error.
 
 set -e
 
+OCTAVE_VERSION="%OCTAVE_CONF_VERSION%"
+
 # Default values for these variables are filled in when Octave is
 # compiled. 
 
 : ${SED=%OCTAVE_CONF_SED%}
 
 : ${CPPFLAGS=%OCTAVE_CONF_CPPFLAGS%}
 : ${INCFLAGS=%OCTAVE_CONF_MKOCTFILE_INCFLAGS%}
 : ${F2C=%OCTAVE_CONF_F2C%}
@@ -58,16 +60,18 @@ set -e
 : ${ALL_LDFLAGS="$LD_STATIC_FLAG $CPICFLAG $LDFLAGS"}
 
 : ${OCTAVE_LIBS="$LIBOCTINTERP $LIBOCTAVE $SPECIAL_MATH_LIB $LIBCRUFT"}
 
 # Local variables.
 
 usage_msg="usage: mkoctfile [options] file ..."
 
+version_msg="mkoctfile, version $OCTAVE_VERSION"
+
 cfiles=
 ccfiles=
 f77files=
 objfiles=
 octfiles=
 octfile=
 outputfile=
 incflags=
@@ -82,16 +86,25 @@ link_stand_alone=false
 depend=false
 compile=true
 
 if [ $# -eq 0 ]; then
   echo $usage_msg 1>&2
   exit 1
 fi
 
+if [ $# -eq 1 ]; then
+  case "$1" in
+    -v | --version)
+      echo $version_msg 1>&2
+      exit 0
+    ;;
+  esac
+fi
+
 while [ $# -gt 0 ]; do
   file=
   case "$1" in
     *.c)
       file=$1
       cfiles="$cfiles $file"
     ;;
     *.cc | *.C | *.cpp)
@@ -399,17 +412,17 @@ fi
 ##   eval $cmd
 ##   cmd="rm -f $octfile.bak"
 ##   $dbg $cmd
 ##   eval $cmd
 ## fi
 
 # Link all the object files.
 
-if $link; then
+if $link && [ -n "$objfiles" ]; then
   if $link_stand_alone; then
     if [ -n "$LD_CXX" ]; then
       cmd="$LD_CXX $CPPFLAGS $ALL_CXXFLAGS $RDYNAMIC_FLAG $ALL_LDFLAGS $pass_on_options $output_option $objfiles $ldflags $LFLAGS $RLD_FLAG $OCTAVE_LIBS $BLAS_LIBS $FFTW_LIBS $LIBREADLINE $LIBS $FLIBS"
       $dbg $cmd
       eval $cmd
     else
       echo "mkoctfile: no way to link stand-alone executable file" 1>&2
       exit 1
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -377,16 +377,18 @@ run_command_and_return_output (const std
       unwind_protect::run ();
     }
   else
     error ("unable to start subprocess for `%s'", cmd_str.c_str ());
 
   return retval;
 }
 
+enum system_exec_type { et_sync, et_async };
+
 DEFUN (system, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} system (@var{string}, @var{return_output}, @var{type})\n\
 Execute a shell command specified by @var{string}.  The second\n\
 argument is optional.  If @var{type} is @code{\"async\"}, the process\n\
 is started in the background and the process id of the child process\n\
 is returned immediately.  Otherwise, the process is started, and\n\
 Octave waits until it exits.  If @var{type} argument is omitted, a\n\
@@ -431,45 +433,43 @@ variable @code{status} to the integer @s
   int nargin = args.length ();
 
   if (nargin > 0 && nargin < 4)
     {
       bool return_output = (nargout > 0 || nargin > 1);
 
       std::string cmd_str = args(0).string_value ();
 
-      enum exec_type { sync, async };
-
-      exec_type type = sync;
+      system_exec_type type = et_sync;
 
       if (! error_state)
 	{
 	  if (nargin > 2)
 	    {
 	      std::string type_str = args(2).string_value ();
 
 	      if (! error_state)
 		{
 		  if (type_str == "sync")
-		    type = sync;
+		    type = et_sync;
 		  else if (type_str == "async")
-		    type = async;
+		    type = et_async;
 		  else
 		    error ("system: third arg must be \"sync\" or \"async\"");
 		}
 	      else
 		error ("system: third argument must be a string");
 	    }
 	}
       else
 	error ("system: expecting std::string as first argument");
 
       if (! error_state)
 	{
-	  if (type == async)
+	  if (type == et_async)
 	    {
 #ifdef HAVE_FORK
 	      pid_t pid = fork ();
 
 	      if (pid < 0) 
 		error ("system: fork failed -- can't create child process");
 	      else if (pid == 0)
 		{
