# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1319487009 14400
#      Mon Oct 24 16:10:09 2011 -0400
# Branch stable
# Node ID e1f187f4fc9f095a097d44c5ea26da5b7421b3a6
# Parent  b0e70a71647b671ebcfa7a79af1ae6d3c0f52065
# Parent  fcdf0993b8c9c0c9a9313931db8c74b7fa62bc75
merge release changeset

diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -110,37 +110,37 @@ function h = imshow (im, varargin)
           warning ("imshow: unrecognized property %s", arg);
           narg++;
       endswitch
     else
       error ("imshow: argument number %d is invalid", narg+1);
     endif
   endwhile
 
+  ## Check for complex images.
+  if (iscomplex (im))
+    warning ("imshow: only showing real part of complex image");
+    im = real (im);
+  endif
+
   ## Set default display range if display_range not set yet.
   if (isempty (display_range))
     display_range = [min(im(:)), max(im(:))];
   elseif (isna (display_range))
     t = class (im);
     switch (t)
       case {"double", "single", "logical"}
         display_range = [0, 1];
       case {"int8", "int16", "int32", "uint8", "uint16", "uint32"}
         display_range = [intmin(t), intmax(t)];
       otherwise
         error ("imshow: invalid data type for image");
     endswitch
   endif
 
-  ## Check for complex images.
-  if (iscomplex (im))
-    warning ("imshow: only showing real part of complex image");
-    im = real (im);
-  endif
-
   nans = isnan (im(:));
   if (any (nans))
     warning ("Octave:imshow-NaN",
              "imshow: pixels with NaN or NA values are set to minimum pixel value");
     im(nans) = display_range(1);
   endif
 
   ## This is for compatibility.
diff --git a/src/DLD-FUNCTIONS/max.cc b/src/DLD-FUNCTIONS/max.cc
--- a/src/DLD-FUNCTIONS/max.cc
+++ b/src/DLD-FUNCTIONS/max.cc
@@ -173,17 +173,17 @@ do_minmax_body (const octave_value_list&
           dim = args(2).int_value (true) - 1;
           if (error_state || dim < 0)
             {
               error ("%s: DIM must be a valid dimension", func);
               return retval;
             }
 
           if (! args(1).is_empty ())
-            warning ("%s: second argument is ignored");
+            warning ("%s: second argument is ignored", func);
         }
 
       switch (arg.builtin_type ())
         {
         case btyp_double:
           {
             if (arg.is_range () && (dim == -1 || dim == 1))
               {
