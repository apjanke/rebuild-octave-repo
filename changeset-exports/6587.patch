# HG changeset patch
# User dbateman
# Date 1177619011 0
#      Thu Apr 26 20:23:31 2007 +0000
# Node ID 00fad3bad2a50ddc55695d706491ed62617a0f5f
# Parent  e4ea529efab083dc9d1f1dcf0d77c9f0f3c7d7a3
[project @ 2007-04-26 20:23:31 by dbateman]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2007-04-26  David Bateman  <dbateman@free.fr>
+
+	* interpreter/stmt.txi: Document for loops over matrices, arrays
+	and cell arrays.
+
 2007-04-25  David Bateman  <dbateman@free.fr>
 
 	* interpreter/dynamic.txi: Add additional copyrights. Add sections
 	of input parameter checking, documentation and testing of
 	oct-files. Adds a section on calling other functions from
 	mex-files, expands the basic information on mex-files, and add a
 	few new sections (to be completed) to the section about mex-files
 
diff --git a/doc/interpreter/stmt.txi b/doc/interpreter/stmt.txi
--- a/doc/interpreter/stmt.txi
+++ b/doc/interpreter/stmt.txi
@@ -501,16 +501,54 @@ endfor
 This code works by first evaluating the expression @code{3:10}, to
 produce a range of values from 3 to 10 inclusive.  Then the variable
 @code{i} is assigned the first element of the range and the body of the
 loop is executed once.  When the end of the loop body is reached, the
 next value in the range is assigned to the variable @code{i}, and the
 loop body is executed again.  This process continues until there are no
 more elements to assign.
 
+Within Octave is it also possible to iterate over matrices or cell arrays
+using the @code{for} statement. For example consider
+
+@example
+@group
+disp("Loop over a matrix")
+for i = [1,3;2,4]
+  i
+endfor
+disp("Loop over a cell array")
+for i = @{1,"two";"three",4@}
+  i
+endfor
+@end group 
+@end example
+
+@noindent
+In this case the variable @code{i} takes on the value of the columns of
+the matrix or cell matrix. So the first loop iterates twice, producing
+two column vectors @code{[1;2]}, follwed by @code{[3;4]}, and likewise
+for the loop over the cell array. This can be extended to loops over
+multidimensional arrays. For example
+
+@example
+@group
+a = [1,3;2,4]; b = cat(3, a, 2*a);
+for i = c
+  i
+endfor
+@end group 
+@end example
+
+@noindent
+In the above case, the mulitdimensional matrix @var{c} is reshaped to a
+two dimensional matrix as @code{reshape (c, rows(c),
+prod(size(c)(2:end)))} and then the same behavior as a loop over a two
+dimensional matrix is produced.
+
 Although it is possible to rewrite all @code{for} loops as @code{while}
 loops, the Octave language has both statements because often a
 @code{for} loop is both less work to type and more natural to think of.
 Counting the number of iterations is very common in loops and it can be
 easier to think of this counting as part of looping rather than as
 something to do inside the loop.
 
 @menu
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2007-04-26  David Bateman  <dbateman@free.fr>
+
+	* pt-loop.cc (tree_simple_for_command::eval (void)): Correct
+	reshaping of dim_vector in for loop for multi-dimensional array.
+
 2007-04-26  John W. Eaton  <jwe@octave.org>
 
 	* load-save.cc (find_file_to_load): Only consider regular files.
 
 2007-04-24  Shai Ayal  <shaiay@users.sourceforge.net>
 
 	* graphics.cc (color_property): Eliminate alpha channel from RGB
 	color spec.
diff --git a/src/pt-loop.cc b/src/pt-loop.cc
--- a/src/pt-loop.cc
+++ b/src/pt-loop.cc
@@ -398,16 +398,17 @@ tree_simple_for_command::eval (void)
 
 	if (error_state)
 	  goto cleanup;
 
 	// FIXME -- maybe we need a function for this?
 	int ndims = dv.length ();
 	for (int i = 2; i < ndims; i++)
 	  dv(1) *= dv(i);
+	dv.resize (2);
 
 	if (dv(1) > 0)
 	  {
 	    if (rhs.is_real_type ())
 	      {
 		if (ndims > 2)
 		  m_tmp = m_tmp.reshape (dv);
 
@@ -450,16 +451,17 @@ tree_simple_for_command::eval (void)
 	Cell c_tmp = rhs.cell_value ();
 
 	dim_vector dv = c_tmp.dims ();
 
 	// FIXME -- maybe we need a function for this?
 	int ndims = dv.length ();
 	for (int i = 2; i < ndims; i++)
 	  dv(1) *= dv(i);
+	dv.resize (2);
 
 	if (dv(1) > 0)
 	  {
 	    if (ndims > 2)
 	      c_tmp = c_tmp.reshape (dv);
 
 	    DO_ND_LOOP(Cell, c_tmp);
 	  }
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,13 @@
+2007-04-26  David Bateman  <dbateman@free.fr>
+
+	* test_for.m: Add tests for multi-dimensional matrices and cell
+	arrays.
+
 2007-04-04  Rafael Laboissiere  <rafael@debian.org>
 
 	* Makefile.in (clean): Also remove a.wav file created by
 	testing wavwrite.m.
 
 2007-04-03  Kim Hansen  <kimhanse@gmail.com>
 
 	* test_slice.m: New file.
diff --git a/test/test_for.m b/test/test_for.m
--- a/test/test_for.m
+++ b/test/test_for.m
@@ -75,8 +75,21 @@
 %! if (i < 3)
 %! continue;
 %! endif
 %! printf_assert ("%d", i);
 %! endfor
 %! printf_assert ("\n");
 %! assert(prog_output_assert("34"));
 
+%!test
+%! a = [1,3;2,4];
+%! j = 0;
+%! for i = cat (3, a, 4 + a)
+%!   assert (i, [1;2] + 2*j++)
+%! endfor
+
+%!test
+%! a = {1,3;2,4};
+%! j=0
+%! for i = cat (3, a, cellfun(@(x) 4 + x, a, 'UniformOutput', 0))
+%!   assert (i, {1 + 2*j; 2 + 2*j++})
+%! endfor
