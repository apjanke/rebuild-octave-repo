# HG changeset patch
# User Colin Macdonald <cbm@m.fsf.org>
# Date 1454309948 28800
#      Sun Jan 31 22:59:08 2016 -0800
# Branch stable
# Node ID 5ecdcc6320d904a388bb8e69238bdb771d4e90fa
# Parent  5f62b5dae8b1ce004923e34457b5eae5dcdd4563
Fix regressions caused by ismatrix definition change (partial fix bug #47036).
Replace ismatrix with calls to isnumeric where appropriate.

Add test for isosurface regression.  In interp2, ismatrix is
correct but ndims check unnecessary.


* interp2.m: Remove unneccessary check on ndims when ismatrix used.
Clean up indentation.

* isosurface.m: Replace ismatrix with isnumeric.  Add BIST test.

diff --git a/scripts/general/interp2.m b/scripts/general/interp2.m
--- a/scripts/general/interp2.m
+++ b/scripts/general/interp2.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2000-2015 Kai Habel
+## Copyright (C) 2000-2016 Kai Habel
 ## Copyright (C) 2009 Jaroslav Hajek
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
@@ -100,17 +100,17 @@ function ZI = interp2 (varargin)
     method = varargin{end};
     nargs--;
   endif
   if (method(1) == "*")
     warning ("interp2: ignoring unsupported '*' flag to METHOD");
     method(1) = [];
   endif
   method = validatestring (method, ...
-    {"nearest", "linear", "pchip", "cubic", "spline"});
+                           {"nearest", "linear", "pchip", "cubic", "spline"});
 
   ## Read numeric input
   switch (nargs)
     case 1
       Z = varargin{1};
       n = 1;
     case 2
       [Z, n] = deal (varargin{1:nargs});
@@ -118,17 +118,17 @@ function ZI = interp2 (varargin)
       [Z, XI, YI] = deal (varargin{1:nargs});
     case 5
       [X, Y, Z, XI, YI] = deal (varargin{1:nargs});
     otherwise
       print_usage ();
   endswitch
 
   ## Type checking
-  if (! isnumeric (Z) || isscalar (Z) || ! ismatrix (Z) || ndims (Z) != 2)
+  if (! isnumeric (Z) || isscalar (Z) || ! ismatrix (Z))
     error ("interp2: Z must be a 2-D matrix");
   endif
   if (! isempty (n) && ! (isscalar (n) && n >= 0 && n == fix (n)))
     error ("interp2: N must be an integer >= 0");
   endif
 
   ## Define X, Y, XI, YI if needed
   [zr, zc] = size (Z);
@@ -558,18 +558,18 @@ endfunction
 %!assert (interp2 (z, [2 3 1], [2 2 2]', "cubic"), repmat ([5, 7, 3], [3, 1]), 10 * tol)
 %!assert (interp2 (z, [2 3 1], [2 2 2]', "spline"), repmat ([5, 7, 3], [3, 1]), tol)
 %!assert (interp2 (z, [2 3 1], [2 2 2], "linear"), [5 7 3], tol)
 %!assert (interp2 (z, [2 3 1], [2 2 2], "pchip"), [5 7 3], tol)
 %!assert (interp2 (z, [2 3 1], [2 2 2], "cubic"), [5 7 3], 10 * tol)
 %!assert (interp2 (z, [2 3 1], [2 2 2], "spline"), [5 7 3], tol)
 
 ## Test input validation
-%!error interp2 (1, 1, 1, 1, 1, 2)    #only 5 numeric inputs
-%!error interp2 (1, 1, 1, 1, 1, 2, 2) #only 5 numeric inputs
+%!error interp2 (1, 1, 1, 1, 1, 2)    # only 5 numeric inputs
+%!error interp2 (1, 1, 1, 1, 1, 2, 2) # only 5 numeric inputs
 %!error <Z must be a 2-D matrix> interp2 ({1})
 %!error <Z must be a 2-D matrix> interp2 (1,1,1)
 %!error <Z must be a 2-D matrix> interp2 (ones (2,2,2))
 %!error <N must be an integer .= 0> interp2 (ones (2), ones (2))
 %!error <N must be an integer .= 0> interp2 (ones (2), -1)
 %!error <N must be an integer .= 0> interp2 (ones (2), 1.5)
 %!warning <ignoring unsupported '\*' flag> interp2 (rand (3,3), 1, "*linear");
 %!error <EXTRAP must be a numeric scalar> interp2 (1, 1, 1, 1, 1, 'linear', {1})
diff --git a/scripts/plot/draw/isosurface.m b/scripts/plot/draw/isosurface.m
--- a/scripts/plot/draw/isosurface.m
+++ b/scripts/plot/draw/isosurface.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2009-2015 Martin Helm
+## Copyright (C) 2009-2016 Martin Helm
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -140,17 +140,17 @@ function varargout = isosurface (varargi
       colors = varargin{6};
       calc_colors = true;
     endif
   else
     val = varargin{1};
     [n2, n1, n3] = size (val);
     [x, y, z] = meshgrid (1:n1, 1:n2, 1:n3);
     iso = varargin{2};
-    if (nargin >= 3 && ismatrix (varargin{3}))
+    if (nargin >= 3 && isnumeric (varargin{3}))
         colors = varargin{3};
         calc_colors = true;
     endif
   endif
   if (calc_colors)
     if (nargout == 2)
       warning ("isosurface: colors will be calculated, but no output argument to receive it.");
     endif
@@ -227,8 +227,14 @@ endfunction
 %! assert (size (v), [3 3]);
 
 %!test
 %! [f, v, c] = isosurface (x, y, z, val, .3, y);
 %! assert (size (f), [1 3]);
 %! assert (size (v), [3 3]);
 %! assert (size (c), [3 1]);
 
+%!test
+%! [f, v, c] = isosurface (val, .3, y);
+%! assert (size (f), [1 3]);
+%! assert (size (v), [3 3]);
+%! assert (size (c), [3 1]);
+
