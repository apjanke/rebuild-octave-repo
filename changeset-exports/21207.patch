# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1454701800 18000
#      Fri Feb 05 14:50:00 2016 -0500
# Node ID 945695cafd2bc8bf02bb2ca5eb35b40aa17ed115
# Parent  15517574276a71abe539f2161af4b7d4641b2390
allow build to succeed with missing dependencies

* gl2ps-print.cc, graphics.cc: Allow building without freetype.
* sparse-chol.cc: Allow building without cholmod.
* sparse-lu.cc: Allow building without umfpack.
* sparse-qr.cc: Allow building without cxsparse.

diff --git a/libinterp/corefcn/gl2ps-print.cc b/libinterp/corefcn/gl2ps-print.cc
--- a/libinterp/corefcn/gl2ps-print.cc
+++ b/libinterp/corefcn/gl2ps-print.cc
@@ -717,32 +717,32 @@ gl2ps_renderer::draw_text (const text::p
 
   const Matrix pos = get_transform ().scale (props.get_data_position ());
   std::string str = props.get_string ().string_vector_value ().join ("\n");
 
   render_text (str, pos(0), pos(1), pos.numel () > 2 ? pos(2) : 0.0,
                halign, valign, props.get_rotation ());
 }
 
-#endif
-
 static void
 safe_pclose (FILE *f)
 {
   if (f)
     octave_pclose (f);
 }
 
 static void
 safe_fclose (FILE *f)
 {
   if (f)
     gnulib::fclose (f);
 }
 
+#endif
+
 // If the name of the stream begins with '|', open a pipe to the command
 // named by the rest of the string.  Otherwise, write to the named file.
 
 void
 gl2ps_print (const graphics_object& fig, const std::string& stream,
              const std::string& term)
 {
 #if defined (HAVE_GL2PS_H)
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -6958,20 +6958,16 @@ axes::properties::calc_ticklabels (const
   labels = c;
 }
 
 Matrix
 axes::properties::get_ticklabel_extents (const Matrix& ticks,
                                          const string_vector& ticklabels,
                                          const Matrix& limits)
 {
-#ifndef HAVE_FREETYPE
-  double fontsize = get ("fontsize").double_value ();
-#endif
-
   Matrix ext (1, 2, 0.0);
   double wmax, hmax;
   wmax = hmax = 0.0;
   int n = std::min (ticklabels.numel (), ticks.numel ());
   for (int i = 0; i < n; i++)
     {
       double val = ticks(i);
       if (limits(0) <= val && val <= limits(1))
@@ -6981,19 +6977,20 @@ axes::properties::get_ticklabel_extents 
           label = label.substr (0, label.find_last_not_of (" ")+1);
 #ifdef HAVE_FREETYPE
           ext = text_renderer.get_extent (label, 0.0,
                                           get_ticklabelinterpreter ());
           wmax = std::max (wmax, ext(0));
           hmax = std::max (hmax, ext(1));
 #else
           // FIXME: find a better approximation
+          double fsize = get ("fontsize").double_value ();
           int len = label.length ();
-          wmax = std::max (wmax, 0.5*fontsize*len);
-          hmax = fontsize;
+          wmax = std::max (wmax, 0.5*fsize*len);
+          hmax = fsize;
 #endif
         }
     }
 
   ext(0) = wmax;
   ext(1) = hmax;
   return ext;
 }
diff --git a/liboctave/numeric/sparse-chol.cc b/liboctave/numeric/sparse-chol.cc
--- a/liboctave/numeric/sparse-chol.cc
+++ b/liboctave/numeric/sparse-chol.cc
@@ -35,57 +35,55 @@ along with Octave; see the file COPYING.
 #include "MatrixType.h"
 
 template <typename chol_type>
 class sparse_chol<chol_type>::sparse_chol_rep
 {
 public:
 
   sparse_chol_rep (void)
-    : count (1), is_pd (false), minor_p (0), perms (), cond (0),
+    : count (1), is_pd (false), minor_p (0), perms (), cond (0)
 #ifdef HAVE_CHOLMOD
-      Lsparse (0), Common ()
+      , Lsparse (0), Common ()
 #endif
   { }
 
   sparse_chol_rep (const chol_type& a, bool natural, bool force)
-    : count (1), is_pd (false), minor_p (0), perms (), cond (0),
+    : count (1), is_pd (false), minor_p (0), perms (), cond (0)
 #ifdef HAVE_CHOLMOD
-      Lsparse (0), Common ()
+      , Lsparse (0), Common ()
 #endif
   {
     init (a, natural, force);
   }
 
   sparse_chol_rep (const chol_type& a, octave_idx_type& info,
                    bool natural, bool force)
-    : count (1), is_pd (false), minor_p (0), perms (), cond (0),
+    : count (1), is_pd (false), minor_p (0), perms (), cond (0)
 #ifdef HAVE_CHOLMOD
-      Lsparse (0), Common ()
+      , Lsparse (0), Common ()
 #endif
   {
     info = init (a, natural, force);
   }
 
   ~sparse_chol_rep (void)
   {
 #ifdef HAVE_CHOLMOD
     if (is_pd)
       CHOLMOD_NAME (free_sparse) (&Lsparse, &Common);
 #endif
   }
 
+#ifdef HAVE_CHOLMOD
   cholmod_sparse *L (void) const
   {
-#ifdef HAVE_CHOLMOD
     return Lsparse;
-#else
-    return 0;
+  }
 #endif
-  }
 
   octave_idx_type P (void) const
   {
 #ifdef HAVE_CHOLMOD
     return (minor_p == static_cast<octave_idx_type>(Lsparse->ncol) ?
             0 : minor_p + 1);
 #else
     return 0;
diff --git a/liboctave/numeric/sparse-lu.cc b/liboctave/numeric/sparse-lu.cc
--- a/liboctave/numeric/sparse-lu.cc
+++ b/liboctave/numeric/sparse-lu.cc
@@ -109,16 +109,18 @@ umfpack_report_perm (octave_idx_type np,
 template <typename T>
 void
 umfpack_report_status (double *Control, octave_idx_type status);
 
 template <typename T>
 void
 umfpack_report_symbolic (void *Symbolic, const double *Control);
 
+#if defined (HAVE_UMFPACK)
+
 // SparseMatrix Specialization.
 
 template <>
 inline void
 umfpack_defaults<double> (double *Control)
 {
   UMFPACK_DNAME (defaults) (Control);
 }
@@ -364,16 +366,18 @@ umfpack_report_status<Complex> (double *
 
 template <>
 inline void
 umfpack_report_symbolic <Complex> (void *Symbolic, const double *Control)
 {
   UMFPACK_ZNAME (report_symbolic) (Symbolic, Control);
 }
 
+#endif
+
 template <typename lu_type>
 sparse_lu<lu_type>::sparse_lu (const lu_type& a, const Matrix& piv_thres,
                                bool scale)
   : Lfact (), Ufact (), Rfact (), cond (0), P (), Q ()
 {
 #ifdef HAVE_UMFPACK
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
diff --git a/liboctave/numeric/sparse-qr.cc b/liboctave/numeric/sparse-qr.cc
--- a/liboctave/numeric/sparse-qr.cc
+++ b/liboctave/numeric/sparse-qr.cc
@@ -29,40 +29,43 @@ along with Octave; see the file COPYING.
 #include "oct-locbuf.h"
 #include "oct-sparse.h"
 #include "sparse-qr.h"
 
 template <typename SPARSE_T>
 class
 cxsparse_types
 {
-public:
-  typedef void symbolic_type;
-  typedef void numeric_type;
 };
 
 template <>
 class
 cxsparse_types<SparseMatrix>
 {
 public:
 #if defined (HAVE_CXSPARSE)
   typedef CXSPARSE_DNAME (s) symbolic_type;
   typedef CXSPARSE_DNAME (n) numeric_type;
+#else
+  typedef void symbolic_type;
+  typedef void numeric_type;
 #endif
 };
 
 template <>
 class
 cxsparse_types<SparseComplexMatrix>
 {
 public:
 #if defined (HAVE_CXSPARSE)
   typedef CXSPARSE_ZNAME (s) symbolic_type;
   typedef CXSPARSE_ZNAME (n) numeric_type;
+#else
+  typedef void symbolic_type;
+  typedef void numeric_type;
 #endif
 };
 
 template <typename SPARSE_T>
 class sparse_qr<SPARSE_T>::sparse_qr_rep
 {
 public:
 
