# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1366907221 14400
#      Thu Apr 25 12:27:01 2013 -0400
# Node ID 477bfd5d95f5ad98fd536fc9f32370eba2ef81dc
# Parent  68176102fe07d5a1061abbf5185aac25421cd712
use dir, not path, to refer to directory name

* file-editor-tab.h, file-editor-tab.cc
(file_editor_tab::bp_info::dir): Rename from path.  Change all uses.
(file_editor_tab::run_file): Rename local variable from path to dir.

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -365,23 +365,23 @@ file_editor_tab::run_file (const QWidget
 {
   if (ID != this)
     return;
 
   if (_edit_area->isModified ())
     save_file (_file_name);
 
   QFileInfo file_info (_file_name);
-  QString path = file_info.absolutePath ();
+  QString dir = file_info.absolutePath ();
   QString function_name = file_info.fileName ();
 
   // We have to cut off the suffix, because octave appends it.
   function_name.chop (file_info.suffix ().length () + 1);
   emit process_octave_code (QString ("cd \'%1\'\n%2\n")
-                            .arg (path).arg (function_name));
+                            .arg (dir).arg (function_name));
  
   // TODO: Sending a run event crashes for long scripts. Find out why.
   // octave_link::post_event
   //   (this, &file_editor_tab::run_file_callback, _file_name.toStdString ()));
 }
 
 void
 file_editor_tab::toggle_bookmark (const QWidget *ID)
@@ -444,21 +444,21 @@ file_editor_tab::remove_bookmark (const 
 bool
 file_editor_tab::file_in_path (const bp_info& info)
 {
   bool ok = false;
   bool addpath_option = true;
 
   std::string curr_dir = octave_env::get_current_directory ();
 
-  if (same_file (curr_dir, info.path))
+  if (same_file (curr_dir, info.dir))
     ok = true;
   else
     {
-      bool dir_in_load_path = load_path::contains_canonical (info.path);
+      bool dir_in_load_path = load_path::contains_canonical (info.dir);
 
       std::string base_file = octave_env::base_pathname (info.file);
       std::string lp_file = load_path::find_file (base_file);
 
       if (dir_in_load_path)
         {
           if (same_file (lp_file, info.file))
             ok = true;
@@ -468,38 +468,38 @@ file_editor_tab::file_in_path (const bp_
           // File directory is not in path.  Is the file in the path in
           // the current directory?  If so, then changing the current
           // directory will be needed.  Adding directory to path is
           // not enough because the file in the current directory would
           // still be found.
 
           if (same_file (lp_file, base_file))
             {
-              if (same_file (curr_dir, info.path))
+              if (same_file (curr_dir, info.dir))
                 ok = true;
               else
                 addpath_option = false;
             }
         }
     }
 
   if (! ok)
     {
       int action
-        = octave_link::debug_cd_or_addpath_error (info.file, info.path,
+        = octave_link::debug_cd_or_addpath_error (info.file, info.dir,
                                                   addpath_option);
       switch (action)
         {
         case 1:
-          Fcd (ovl (info.path));
+          Fcd (ovl (info.dir));
           ok = true;
           break;
 
         case 2:
-          load_path::prepend (info.path);
+          load_path::prepend (info.dir);
           ok = true;
           break;
 
         default:
           break;
         }
     }
 
@@ -532,39 +532,39 @@ file_editor_tab::remove_all_breakpoints_
   if (file_in_path (info))
     bp_table::remove_all_breakpoints_in_file (info.function_name, true);
 }
 
 void
 file_editor_tab::request_add_breakpoint (int line)
 {
   QFileInfo file_info (_file_name);
-  QString path = file_info.absolutePath ();
+  QString dir = file_info.absolutePath ();
   QString function_name = file_info.fileName ();
 
   // We have to cut off the suffix, because octave appends it.
   function_name.chop (file_info.suffix ().length () + 1);
 
-  bp_info info (_file_name, path, function_name, line+1);
+  bp_info info (_file_name, dir, function_name, line+1);
 
   octave_link::post_event
     (this, &file_editor_tab::add_breakpoint_callback, info);
 }
 
 void
 file_editor_tab::request_remove_breakpoint (int line)
 {
   QFileInfo file_info (_file_name);
-  QString path = file_info.absolutePath ();
+  QString dir = file_info.absolutePath ();
   QString function_name = file_info.fileName ();
 
   // We have to cut off the suffix, because octave appends it.
   function_name.chop (file_info.suffix ().length () + 1);
 
-  bp_info info (_file_name, path, function_name, line+1);
+  bp_info info (_file_name, dir, function_name, line+1);
 
   octave_link::post_event
     (this, &file_editor_tab::remove_breakpoint_callback, info);
 }
 
 void
 file_editor_tab::toggle_breakpoint (const QWidget *ID)
 {
@@ -616,23 +616,23 @@ file_editor_tab::previous_breakpoint (co
 
 void
 file_editor_tab::remove_all_breakpoints (const QWidget *ID)
 {
   if (ID != this)
     return;
 
   QFileInfo file_info (_file_name);
-  QString path = file_info.absolutePath ();
+  QString dir = file_info.absolutePath ();
   QString function_name = file_info.fileName ();
 
   // We have to cut off the suffix, because octave appends it.
   function_name.chop (file_info.suffix ().length () + 1);
 
-  bp_info info (_file_name, path, function_name, 0);
+  bp_info info (_file_name, dir, function_name, 0);
 
   octave_link::post_event
     (this, &file_editor_tab::remove_all_breakpoints_callback, info);
 }
 
 void
 file_editor_tab::comment_selected_text (const QWidget *ID)
 {
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -143,23 +143,23 @@ private:
     {
       bookmark,
       breakpoint,
       debugger_position
     };
 
   struct bp_info
   {
-    bp_info (const QString& f, const QString& p, const QString& fn, int l)
-      : file (f.toStdString ()), path (p.toStdString ()),
+    bp_info (const QString& f, const QString& d, const QString& fn, int l)
+      : file (f.toStdString ()), dir (d.toStdString ()),
         function_name (fn.toStdString ()), line (l)
     { }
 
     std::string file;
-    std::string path;
+    std::string dir;
     std::string function_name;
     int line;
   };
 
   void save_file (const QString& saveFileName, bool remove_on_success = false);
   void save_file_as (bool remove_on_success = false);
   void message_duplicate_file_name (const QString& fileName);
 
