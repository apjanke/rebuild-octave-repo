# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1242936456 -3600
#      Thu May 21 21:07:36 2009 +0100
# Node ID b0395373253052d1795f9cfae9fae86341ef9a30
# Parent  e2f6dcade4c62b84f6f223467d057cf6b9754772
Copy volatile variable to avoid MSVC compilation error

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,18 @@
 2009-05-21  Michael Goffioul  <michael.goffioul@gmail.com>
 
+	* CmplxQR.cc (ComplexQR::insert_col, ComplexQR::delete_col): Copy
+	volatile variable to avoid MSVC compilation error (cannot pass
+	volatile variable as const& argument).
+	* dbleQR.cc (QR::insert_col, QR::delete_col): Ditto.
+	* fCmplxQR.cc (FloatComplexQR::insert_col,
+	FloatComplexQR::delete_col): Ditto.
+	* floatQR.cc (FloatQR::insert_col, FloatQR::delete_col): Ditto.
+
 	* oct-mutex.cc: Exclude pthread.h inclusion under Win32.
 
 	* base-aepbal.h (base_aepbal::operator=): Add missing return
 	statement.
 
 2009-05-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* eigs-base.cc (
diff --git a/liboctave/CmplxQR.cc b/liboctave/CmplxQR.cc
--- a/liboctave/CmplxQR.cc
+++ b/liboctave/CmplxQR.cc
@@ -318,20 +318,21 @@ ComplexQR::insert_col (const ComplexMatr
       else
         {
           r.resize (k, n + nj);
         }
 
       OCTAVE_LOCAL_BUFFER (double, rw, kmax);
       for (volatile octave_idx_type i = 0; i < js.length (); i++)
         {
+	  octave_idx_type ii = i;
           ComplexColumnVector utmp = u.column (jsi(i));
-          F77_XFCN (zqrinc, ZQRINC, (m, n + i, std::min (kmax, k + i), 
+          F77_XFCN (zqrinc, ZQRINC, (m, n + ii, std::min (kmax, k + ii), 
                                      q.fortran_vec (), q.rows (),
-                                     r.fortran_vec (), r.rows (), js(i) + 1, 
+                                     r.fortran_vec (), r.rows (), js(ii) + 1, 
                                      utmp.data (), rw));
         }
     }
 }
 
 void
 ComplexQR::delete_col (octave_idx_type j)
 {
@@ -377,19 +378,20 @@ ComplexQR::delete_col (const Array<octav
     (*current_liboctave_error_handler) ("qrinsert: duplicate index detected");
   else if (nj > 0 && (js(0) > n-1 || js(nj-1) < 0))
     (*current_liboctave_error_handler) ("qrinsert: index out of range");
   else if (nj > 0)
     {
       OCTAVE_LOCAL_BUFFER (double, rw, k);
       for (volatile octave_idx_type i = 0; i < js.length (); i++)
         {
-          F77_XFCN (zqrdec, ZQRDEC, (m, n - i, k == m ? k : k - i, 
+	  octave_idx_type ii = i;
+          F77_XFCN (zqrdec, ZQRDEC, (m, n - ii, k == m ? k : k - ii, 
                                      q.fortran_vec (), q.rows (),
-                                     r.fortran_vec (), r.rows (), js(i) + 1, rw));
+                                     r.fortran_vec (), r.rows (), js(ii) + 1, rw));
         }
       if (k < m)
         {
           q.resize (m, k - nj);
           r.resize (k - nj, n - nj);
         }
       else
         {
diff --git a/liboctave/dbleQR.cc b/liboctave/dbleQR.cc
--- a/liboctave/dbleQR.cc
+++ b/liboctave/dbleQR.cc
@@ -314,20 +314,21 @@ QR::insert_col (const Matrix& u, const A
       else
         {
           r.resize (k, n + nj);
         }
 
       OCTAVE_LOCAL_BUFFER (double, w, kmax);
       for (volatile octave_idx_type i = 0; i < js.length (); i++)
         {
+	  octave_idx_type ii = i;
           ColumnVector utmp = u.column (jsi(i));
-          F77_XFCN (dqrinc, DQRINC, (m, n + i, std::min (kmax, k + i), 
+          F77_XFCN (dqrinc, DQRINC, (m, n + ii, std::min (kmax, k + ii), 
                                      q.fortran_vec (), q.rows (),
-                                     r.fortran_vec (), r.rows (), js(i) + 1, 
+                                     r.fortran_vec (), r.rows (), js(ii) + 1, 
                                      utmp.data (), w));
         }
     }
 }
 
 void
 QR::delete_col (octave_idx_type j)
 {
@@ -373,19 +374,20 @@ QR::delete_col (const Array<octave_idx_t
     (*current_liboctave_error_handler) ("qrinsert: duplicate index detected");
   else if (nj > 0 && (js(0) > n-1 || js(nj-1) < 0))
     (*current_liboctave_error_handler) ("qrinsert: index out of range");
   else if (nj > 0)
     {
       OCTAVE_LOCAL_BUFFER (double, w, k);
       for (volatile octave_idx_type i = 0; i < js.length (); i++)
         {
-          F77_XFCN (dqrdec, DQRDEC, (m, n - i, k == m ? k : k - i, 
+	  octave_idx_type ii = i;
+          F77_XFCN (dqrdec, DQRDEC, (m, n - ii, k == m ? k : k - ii, 
                                      q.fortran_vec (), q.rows (),
-                                     r.fortran_vec (), r.rows (), js(i) + 1, w));
+                                     r.fortran_vec (), r.rows (), js(ii) + 1, w));
         }
       if (k < m)
         {
           q.resize (m, k - nj);
           r.resize (k - nj, n - nj);
         }
       else
         {
diff --git a/liboctave/fCmplxQR.cc b/liboctave/fCmplxQR.cc
--- a/liboctave/fCmplxQR.cc
+++ b/liboctave/fCmplxQR.cc
@@ -318,19 +318,20 @@ FloatComplexQR::insert_col (const FloatC
       else
         {
           r.resize (k, n + nj);
         }
 
       OCTAVE_LOCAL_BUFFER (float, rw, kmax);
       for (volatile octave_idx_type i = 0; i < js.length (); i++)
         {
-          F77_XFCN (cqrinc, CQRINC, (m, n + i, std::min (kmax, k + i), 
+	  octave_idx_type ii = i;
+          F77_XFCN (cqrinc, CQRINC, (m, n + ii, std::min (kmax, k + ii), 
                                      q.fortran_vec (), q.rows (),
-                                     r.fortran_vec (), r.rows (), js(i) + 1, 
+                                     r.fortran_vec (), r.rows (), js(ii) + 1, 
                                      u.column (jsi(i)).data (), rw));
         }
     }
 }
 
 void
 FloatComplexQR::delete_col (octave_idx_type j)
 {
@@ -376,19 +377,20 @@ FloatComplexQR::delete_col (const Array<
     (*current_liboctave_error_handler) ("qrinsert: duplicate index detected");
   else if (nj > 0 && (js(0) > n-1 || js(nj-1) < 0))
     (*current_liboctave_error_handler) ("qrinsert: index out of range");
   else if (nj > 0)
     {
       OCTAVE_LOCAL_BUFFER (float, rw, k);
       for (volatile octave_idx_type i = 0; i < js.length (); i++)
         {
-          F77_XFCN (cqrdec, CQRDEC, (m, n - i, k == m ? k : k - i, 
+	  octave_idx_type ii = i;
+          F77_XFCN (cqrdec, CQRDEC, (m, n - ii, k == m ? k : k - ii, 
                                      q.fortran_vec (), q.rows (),
-                                     r.fortran_vec (), r.rows (), js(i) + 1, rw));
+                                     r.fortran_vec (), r.rows (), js(ii) + 1, rw));
         }
       if (k < m)
         {
           q.resize (m, k - nj);
           r.resize (k - nj, n - nj);
         }
       else
         {
diff --git a/liboctave/floatQR.cc b/liboctave/floatQR.cc
--- a/liboctave/floatQR.cc
+++ b/liboctave/floatQR.cc
@@ -314,20 +314,21 @@ FloatQR::insert_col (const FloatMatrix& 
       else
         {
           r.resize (k, n + nj);
         }
 
       OCTAVE_LOCAL_BUFFER (float, w, kmax);
       for (volatile octave_idx_type i = 0; i < js.length (); i++)
         {
+	  octave_idx_type ii = i;
           FloatColumnVector utmp = u.column (jsi(i));
-          F77_XFCN (sqrinc, SQRINC, (m, n + i, std::min (kmax, k + i), 
+          F77_XFCN (sqrinc, SQRINC, (m, n + ii, std::min (kmax, k + ii), 
                                      q.fortran_vec (), q.rows (),
-                                     r.fortran_vec (), r.rows (), js(i) + 1, 
+                                     r.fortran_vec (), r.rows (), js(ii) + 1, 
                                      utmp.data (), w));
         }
     }
 }
 
 void
 FloatQR::delete_col (octave_idx_type j)
 {
@@ -373,19 +374,20 @@ FloatQR::delete_col (const Array<octave_
     (*current_liboctave_error_handler) ("qrinsert: duplicate index detected");
   else if (nj > 0 && (js(0) > n-1 || js(nj-1) < 0))
     (*current_liboctave_error_handler) ("qrinsert: index out of range");
   else if (nj > 0)
     {
       OCTAVE_LOCAL_BUFFER (float, w, k);
       for (volatile octave_idx_type i = 0; i < js.length (); i++)
         {
-          F77_XFCN (sqrdec, SQRDEC, (m, n - i, k == m ? k : k - i, 
+	  octave_idx_type ii = i;
+          F77_XFCN (sqrdec, SQRDEC, (m, n - ii, k == m ? k : k - ii, 
                                      q.fortran_vec (), q.rows (),
-                                     r.fortran_vec (), r.rows (), js(i) + 1, w));
+                                     r.fortran_vec (), r.rows (), js(ii) + 1, w));
         }
       if (k < m)
         {
           q.resize (m, k - nj);
           r.resize (k - nj, n - nj);
         }
       else
         {
