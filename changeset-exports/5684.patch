# HG changeset patch
# User dbateman
# Date 1142532721 0
#      Thu Mar 16 18:12:01 2006 +0000
# Node ID f39adfd0913d798d00914eabafe096a9c98b236a
# Parent  a6bfe12c4c720b955d4096cf9221f13d5c2a6dda
[project @ 2006-03-16 18:12:01 by dbateman]

diff --git a/liboctave/sparse-dmsolve.cc b/liboctave/sparse-dmsolve.cc
--- a/liboctave/sparse-dmsolve.cc
+++ b/liboctave/sparse-dmsolve.cc
@@ -358,16 +358,17 @@ solve_singularity_warning (double)
   // Dummy singularity handler so that LU solver doesn't flag
   // an error for numerically rank defficient matrices
 }
 
 template <class RT, class ST, class T>
 RT
 dmsolve (const ST &a, const T &b, octave_idx_type &info)
 {
+#ifdef HAVE_CXSPARSE
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
   octave_idx_type b_nr = b.rows ();
   octave_idx_type b_nc = b.cols ();
   RT retval;
 
   if (nr < 1 || nc < 1 || nr != b_nr)
     (*current_liboctave_error_handler)
@@ -459,16 +460,19 @@ dmsolve (const ST &a, const T &b, octave
 	    qrsolve (m, dmsolve_extract(btmp, NULL, NULL, 0, dm->rr [1] , 0, 
 					b_nc), info);
 	  dmsolve_insert (retval, mtmp, q, 0, 0);
 	}
 
       CXSPARSE_DNAME (_dfree) (dm);
     }
   return retval;
+#else
+  return RT ();
+#endif
 }
 
 #if !defined (CXX_NEW_FRIEND_TEMPLATE_DECL)
 extern Matrix
 dmsolve (const SparseMatrix &a, const Matrix &b, 
 	 octave_idx_type &info);
 
 extern ComplexMatrix
