# HG changeset patch
# User jwe
# Date 823270393 0
#      Fri Feb 02 14:13:13 1996 +0000
# Node ID 7d2982b5524212fc82b5e7a260413815ec1b15b0
# Parent  3bd6fe04ca2788b3e93939750469d0dd48fb8e50
[project @ 1996-02-02 14:12:59 by jwe]

diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -90,18 +90,18 @@ INCLUDES := arith-ops.h builtins.h defau
 	pt-fvc-base.h pt-fvc.h pt-mat.h pt-misc.h pt-mvr-base.h \
 	pt-mvr.h pt-plot.h sighandlers.h statdefs.h symtab.h sysdep.h \
 	systime.h syswait.h token.h toplev.h unwind-prot.h \
 	user-prefs.h utils.h variables.h version.h xdiv.h xpow.h Map.h \
 	SLStack.h Stack.h
 
 TI_SRC := Array-tc.cc Map-tc.cc DLList-fi.cc \
 	SLList-expr.cc SLList-misc.cc SLList-plot.cc SLList-str.cc \
-	SLList-tc.cc SLStack-i.cc SLStack-pc.cc SLStack-str.cc \
-	SLStack-sym.cc SLStack-tok.cc SLStack-tm.cc SLStack-ue.cc \
+	SLList-tc.cc SLList-tm.cc SLStack-i.cc SLStack-pc.cc \
+	SLStack-str.cc SLStack-sym.cc SLStack-tok.cc SLStack-ue.cc \
 	SLStack-ui.cc
 
 TI_OBJ := $(patsubst %.cc, %.o, $(TI_SRC))
 
 TI_PICOBJ := $(TI_OBJ)
 ifdef CXXPICFLAG
   TI_PICOBJ := $(addprefix pic/, $(TI_OBJ))
 endif
@@ -131,17 +131,17 @@ ifeq ($(SHARED_LIBS), true)
     PICOBJ := $(addprefix pic/, $(OBJECTS))
   else
     PICOBJ := $(OBJECTS)
   endif
 endif
 
 # Ugh.
 
-DEP_SOURCES_3 := $(SOURCES) $(DLD_SRC) $(TI_SRC) builtins.cc
+DEP_SOURCES_3 := $(SOURCES) $(DLD_SRC) $(TI_SRC) builtins.cc octave.cc
 DEP_SOURCES_2 := $(patsubst %.l, %.cc, $(DEP_SOURCES_3))
 DEP_SOURCES_1 := $(patsubst %.y, %.cc, $(DEP_SOURCES_2))
 DEP_SOURCES := $(patsubst %.c, %.d, $(DEP_SOURCES_1))
 MAKEDEPS := $(patsubst %.cc, %.d, $(DEP_SOURCES))
 
 DEF_FILES_5 := $(SOURCES) $(DLD_SRC) $(TI_SRC)
 DEF_FILES_4 := $(addprefix $(srcdir)/, $(DEF_FILES_5))
 DEF_FILES_3 := $(notdir $(shell grep -l "^DEFUN" $(DEF_FILES_4)))
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -115,17 +115,17 @@ class lexical_feedback
 public:
 
   lexical_feedback (void) { init (); }
 
   ~lexical_feedback (void) { }
 
   void init (void);
 
-  // Nonzero means we thing we are looking at the beginning of a
+  // Nonzero means we think we are looking at the beginning of a
   // function definition.
   int beginning_of_function;
 
   // Brace level count.
   int braceflag;
 
   // Another context hack, this time for the plot command's `using',
   // `title', and `with' keywords.
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -49,16 +49,17 @@ Software Foundation, 59 Temple Place - S
 #include "toplev.h"
 #include "parse.h"
 #include "symtab.h"
 #include "token.h"
 #include "pt-base.h"
 #include "pt-cmd.h"
 #include "pt-const.h"
 #include "pt-exp.h"
+#include "pt-mat.h"
 #include "pt-misc.h"
 #include "pt-plot.h"
 #include "user-prefs.h"
 #include "utils.h"
 #include "variables.h"
 #include "y.tab.h"
 #include "oct-gperf.h"
 
@@ -320,17 +321,16 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 
     if (lexer_flags.plotting && ! lexer_flags.past_plot_range)
       {
 	lexer_flags.in_plot_range = 1;
 	return OPEN_BRACE;
       }
     else
       {
-	mlnm.push (1);
 	lexer_flags.braceflag++;
 	BEGIN MATRIX;
 	return '[';
       }
   }
 
 \] {
     nesting_level.remove ();
@@ -608,20 +608,16 @@ reset_parser (void)
   error_state = 0;
 
   // We do want a prompt by default.
   promptflag = 1;
 
   // Error may have occurred inside some parentheses or braces.
   nesting_level.clear ();
 
-  // Not initially defining a matrix list.
-  ml.clear ();
-  mlnm.clear ();
-
   // Clear out the stack of token info used to track line and column
   // numbers.
   while (! token_stack.empty ())
     delete token_stack.pop ();
 
   // Can be reset by defining a function.
   if (! (reading_script_file || reading_fcn_file))
     {
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -35,24 +35,16 @@ extern int yyparse (void);
 class tree;
 class tree_matrix;
 class tree_identifier;
 class symbol_table;
 
 // Temporary symbol table pointer used to cope with bogus function syntax.
 extern symbol_table *tmp_local_sym_tab;
 
-// Stack to hold list of literal matrices.
-extern SLStack <tree_matrix *> ml;
-
-// A nonzero element corresponding to an element of ml means we just
-// started reading a new matrix.  This should probably be part of a
-// new struct for matrix lists...
-extern SLStack <int> mlnm;
-
 // Nonzero means print parser debugging info (-d).
 extern int yydebug;
 
 // The current input line number.
 extern int input_line_number;
 
 // The column of the current token.
 extern int current_input_column;
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1,9 +1,10 @@
-/* parse.y						-*- text -*-
+// parse.y						-*- text -*-
+/*
 
 Copyright (C) 1992, 1993, 1994, 1995 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
@@ -57,24 +58,16 @@ Software Foundation, 59 Temple Place - S
 #include "token.h"
 #include "user-prefs.h"
 #include "utils.h"
 #include "variables.h"
 
 // Temporary symbol table pointer used to cope with bogus function syntax.
 symbol_table *tmp_local_sym_tab = 0;
 
-// Stack to hold list of literal matrices.
-SLStack <tree_matrix *> ml;
-
-// A nonzero element corresponding to an element of ml means we just
-// started reading a new matrix.  This should probably be part of a
-// new struct for matrix lists... 
-SLStack <int> mlnm;
-
 // The current input line number.
 int input_line_number = 0;
 
 // The column of the current token.
 int current_input_column = 1;
 
 // Buffer for help text snagged from function files.
 string help_buf;
@@ -143,17 +136,17 @@ static tree_command *make_while_command
 // Build a for command.
 static tree_command *make_for_command
 	 (token *for_tok, tree_index_expression *var,
 	  tree_expression *expr, tree_statement_list *body,
 	  token *end_tok);
 
 // Build a for command a different way.
 static tree_command *make_for_command
-	 (token *for_tok, tree_expression *expr,
+	 (token *for_tok, tree_matrix_row *mr, tree_expression *expr,
 	  tree_statement_list *body, token *end_tok);
 
 // Build a break command.
 static tree_command *make_break_command (token *break_tok);
 
 // Build a continue command.
 static tree_command *make_continue_command (token *continue_tok);
 
@@ -173,17 +166,17 @@ static tree_if_clause *make_elseif_claus
 	 (tree_expression *expr, tree_statement_list *list);
 
 // Build an assignment to a variable.
 static tree_expression *make_simple_assignment
 	 (tree_index_expression *var, token *eq_tok, tree_expression *expr);
 
 // Make an expression that handles assignment of multiple values.
 static tree_expression *make_multi_val_ret
-	 (tree_expression *rhs, token *eq_tok);
+	 (tree_matrix_row *mr, tree_expression *rhs, token *eq_tok);
 
 // Begin defining a function.
 static tree_function *start_function_def
 	 (tree_parameter_list *param_list, tree_statement_list *body);
 
 // Do most of the work for defining a function.
 static tree_function *frob_function_def
 	 (tree_identifier *id, tree_function *fcn);
@@ -194,21 +187,18 @@ static tree_function *finish_function_de
 // Finish defining a function a different way.
 static tree_function *finish_function_def
 	 (tree_parameter_list *ret_list, tree_function *fcn);
 
 // Make an index expression.
 static tree_index_expression *make_index_expression
 	 (tree_indirect_ref *indir, tree_argument_list *args);
 
-// Start building a matrix list.
-static void start_matrix (tree_expression *expr);
-
 // Finish building a matrix list.
-static tree_expression *finish_matrix (void);
+static tree_expression *finish_matrix (tree_matrix *m);
 
 // Maybe print a warning.  Duh.
 static void maybe_warn_missing_semi (tree_statement_list *);
 
 #define ABORT_PARSE \
   do \
     { \
       global_command = 0; \
@@ -226,16 +216,18 @@ static void maybe_warn_missing_semi (tre
 
 %union
 {
 // The type of the basic tokens returned by the lexer.
   token *tok_val;
 
 // Types for the nonterminals we generate.
   tree *tree_type;
+  tree_matrix *tree_matrix_type;
+  tree_matrix_row *tree_matrix_row_type;
   tree_expression *tree_expression_type;
   tree_constant *tree_constant_type;
   tree_identifier *tree_identifier_type;
   tree_indirect_ref *tree_indirect_ref_type;
   tree_function *tree_function_type;
   tree_index_expression *tree_index_expression_type;
   tree_colon_expression *tree_colon_expression_type;
   tree_argument_list *tree_argument_list_type;
@@ -284,16 +276,18 @@ static void maybe_warn_missing_semi (tre
 %token FCN SCREW_TWO
 %token ELLIPSIS
 %token ALL_VA_ARGS
 %token END_OF_INPUT
 %token USING TITLE WITH COLON OPEN_BRACE CLOSE_BRACE CLEAR
 
 // Nonterminals we construct.
 %type <tree_type> input
+%type <tree_matrix_type> rows rows1
+%type <tree_matrix_row_type> matrix_row matrix_row1
 %type <tree_expression_type> expression simple_expr simple_expr1
 %type <tree_expression_type> ans_expression title matrix
 %type <tree_identifier_type> identifier
 %type <tree_indirect_ref_type> indirect_ref indirect_ref1
 %type <tree_function_type> func_def1 func_def2 func_def3
 %type <tree_index_expression_type> variable word_list_cmd
 %type <tree_colon_expression_type> colon_expr
 %type <tree_argument_list_type> arg_list word_list
@@ -444,16 +438,17 @@ list		: list1
 		  {
 		    maybe_warn_missing_semi ($1);
 		    $$ = $1;
 		  }
 		| list1 semi_sep
 		  {
 		    tree_statement *tmp = $1->rear ();
 		    tmp->set_print_flag (0);
+		    $$ = $1;
 		  }
 		;
 
 list1		: statement
 		  {
 		    lexer_flags.beginning_of_function = 0;
 		    $$ = new tree_statement_list ($1);
 		  }
@@ -516,17 +511,20 @@ ranges1		: OPEN_BRACE expression COLON e
 		  { $$ = new plot_range (); }
 		;
 
 plot_command1	: // empty
 		  { $$ = 0; }
 		| plot_command2
 		  { $$ = new subplot_list ($1); }
 		| plot_command1 ',' plot_command2
-		  { $1->append ($3); }
+		  {
+		    $1->append ($3);
+		    $$ = $1;
+		  }
 		;
 
 plot_command2	: expression
 		  { $$ = new subplot ($1); }
 		| expression plot_options
 		  { $$ = $2->set_data ($1); }
 		;
 
@@ -607,17 +605,20 @@ global_decl	: GLOBAL global_decl1
 		    $$ = new tree_global_command ($2, $1->line (),
 						  $1->column ());
 		  }
 		;
 
 global_decl1	: global_decl2
 		  { $$ = new tree_global_init_list ($1); }
 		| global_decl1 optcomma global_decl2
-		  { $1->append ($3); }
+		  {
+		    $1->append ($3);
+		    $$ = $1;
+		  }
 
 global_decl2	: identifier
 		  { $$ = new tree_global ($1); }
 		| identifier '=' expression
 		  {
 		    tree_simple_assignment_expression *tmp_ass;
 		    tmp_ass = new tree_simple_assignment_expression
 		      ($1, $3, 0, 0, $2->line (), $2->column ());
@@ -663,17 +664,17 @@ command		: plot_command
 		| FOR variable '=' expression optsep opt_list END
 		  {
 		    if (! ($$ = make_for_command ($1, $2, $4, $6, $7)))
 		      ABORT_PARSE;
 		  }
 		| FOR '[' screwed_again matrix_row SCREW_TWO '='
 		    expression optsep opt_list END
 		  {
-		    if (! ($$ = make_for_command ($1, $7, $9, $10)))
+		    if (! ($$ = make_for_command ($1, $4, $7, $9, $10)))
 		      ABORT_PARSE;
 		  }
 		| BREAK
 		  {
 		    if (! ($$ = make_break_command ($1)))
 		      ABORT_PARSE;
 		  }
 		| CONTINUE
@@ -693,23 +694,29 @@ if_command	: IF if_cmd_list END
 		    if (! ($$ = finish_if_command ($1, $2, $3)))
 		      ABORT_PARSE;
 		  }
 		;
 
 if_cmd_list	: if_cmd_list1
 		  { $$ = $1 }
 		| if_cmd_list1 else_clause
-		  { $1->append ($2); }
+		  {
+		    $1->append ($2);
+		    $$ = $1;
+		  }
 		;
 
 if_cmd_list1	: expression optsep opt_list
 		  { $$ = start_if_command ($1, $3); }
 		| if_cmd_list1 elseif_clause
-		  { $1->append ($2); }
+		  {
+		    $1->append ($2);
+		    $$ = $1;
+		  }
 		;
 
 elseif_clause	: ELSEIF optsep expression optsep opt_list
 		  { $$ = make_elseif_clause ($3, $5); }
 		;
 
 else_clause	: ELSE optsep opt_list
 		  { $$ = new tree_if_clause ($3); }
@@ -764,42 +771,36 @@ simple_expr1	: NUM
 		  }
 		| word_list_cmd
 		  { $$ = $1; }
 		| variable
 		  { $$ = $1; }
 		| matrix
 		  { $$ = $1; }
 		| '[' ']'
-		  {
-		    mlnm.pop ();
-		    $$ = new tree_constant (Matrix ());
-		  }
+		  { $$ = new tree_constant (Matrix ()); }
 		| '[' ';' ']'
-		  {
-		    mlnm.pop ();
-		    $$ = new tree_constant (Matrix ());
-		  }
+		  { $$ = new tree_constant (Matrix ()); }
 		| colon_expr
 		  { $$ = finish_colon_expression ($1); }
 		| PLUS_PLUS identifier %prec UNARY
 		  { $$ = make_prefix_op (PLUS_PLUS, $2, $1); }
 		| MINUS_MINUS identifier %prec UNARY
 		  { $$ = make_prefix_op (MINUS_MINUS, $2, $1); }
 		| EXPR_NOT simple_expr
 		  { $$ = make_unary_op (EXPR_NOT, $2, $1); }
 		| '+' simple_expr %prec UNARY
 		  { $$ = $2; }
 		| '-' simple_expr %prec UNARY
 		  { $$ = make_unary_op ('-', $2, $1); }
 		| variable '=' simple_expr
 		  { $$ = make_simple_assignment ($1, $2, $3); }
 		| '[' screwed_again matrix_row SCREW_TWO '=' simple_expr
 		  {
-		    if (! ($$ = make_multi_val_ret ($6, $5)))
+		    if (! ($$ = make_multi_val_ret ($3, $6, $5)))
 		      ABORT_PARSE;
 		  }
 		| identifier PLUS_PLUS
 		  { $$ = make_postfix_op (PLUS_PLUS, $1, $2); }
 		| identifier MINUS_MINUS
 		  { $$ = make_postfix_op (MINUS_MINUS, $1, $2); }
 		| simple_expr QUOTE
 		  { $$ = make_unary_op (QUOTE, $1, $2); }
@@ -874,16 +875,17 @@ word_list	: TEXT
 		  {
 		    tree_constant *tmp = make_constant (TEXT, $1);
 		    $$ = new tree_argument_list (tmp);
 		  }
 		| word_list TEXT
 		  {
 		    tree_constant *tmp = make_constant (TEXT, $2);
 		    $1->append (tmp);
+		    $$ = $1;
 		  }
 		;
 
 // This is truly disgusting.
 
 g_symtab	: // empty
 		  { curr_sym_tab = global_sym_tab; }
 		;
@@ -940,20 +942,24 @@ return_list	: return_list_x ']'
 		  }
 		;
 
 return_list1	: return_list_x identifier
 		  { $$ = new tree_parameter_list ($2); }
 		| return_list_x error
 		  {
 		    yyerror ("invalid function return list");
+		    $$ = 0;
 		    ABORT_PARSE;
 		  }
 		| return_list1 ',' identifier
-		  { $1->append ($3); }
+		  {
+		    $1->append ($3);
+		    $$ = $1;
+		  }
 		;
 
 func_def2	: identifier safe local_symtab func_def3
 		  {
 		    if (! ($$ = frob_function_def ($1, $4)))
 		      ABORT_PARSE;
 		  }
 		;
@@ -962,17 +968,17 @@ func_def3	: param_list optsep opt_list f
 		  { $$ = start_function_def ($1, $3); }
 		| optsep opt_list fcn_end_or_eof
 		  { $$ = start_function_def (0, $2); }
 		;
 
 fcn_end_or_eof	: END
 		  {
 		    if (check_end ($1, token::function_end))
-			ABORT_PARSE;
+		      ABORT_PARSE;
 
 		    if (reading_fcn_file)
 		      check_for_garbage_after_fcn_def ();
 		  }
 		| END_OF_INPUT
 		  {
 		    if (! (reading_fcn_file || reading_script_file))
 		      YYABORT;
@@ -1021,37 +1027,44 @@ param_list	: '(' ')'
 		    tree_parameter_list *tmp = new tree_parameter_list ();
 		    tmp->mark_varargs_only ();
 		    $$ = tmp;
 		  }
 		| param_list1 ')'
 		  {
 		    lexer_flags.quote_is_transpose = 0;
 		    $1->mark_as_formal_parameters ();
+		    $$ = $1;
 		  }
 		| param_list1 ',' ELLIPSIS ')'
 		  {
 		    lexer_flags.quote_is_transpose = 0;
 		    $1->mark_as_formal_parameters ();
 		    $1->mark_varargs ();
+		    $$ = $1;
 		  }
 		;
 
 param_list1	: '(' identifier
 		  { $$ = new tree_parameter_list ($2); }
 		| param_list1 ',' identifier
-		  { $1->append ($3); }
+		  {
+		    $1->append ($3);
+		    $$ = $1;
+		  }
 		| '(' error
 		  {
 		    yyerror ("invalid parameter list");
+		    $$ = 0;
 		    ABORT_PARSE;
 		  }
 		| param_list1 ',' error
 		  {
 		    yyerror ("invalid parameter list");
+		    $$ = 0;
 		    ABORT_PARSE;
 		  }
 		;
 
 identifier	: NAME
 		  {
 		    $$ = new tree_identifier
 		      ($1->sym_rec (), $1->line (), $1->column ());
@@ -1075,51 +1088,64 @@ arg_list	: ':'
 		    $$ = new tree_argument_list (all_va_args);
 		  }
 		| arg_list ',' ':'
 		  {
 		    tree_constant *colon;
 		    tree_constant::magic_colon t;
 		    colon = new tree_constant (t);
 		    $1->append (colon);
+		    $$ = $1;
 		  }
 		| arg_list ',' expression
-		  { $1->append ($3); }
+		  {
+		    $1->append ($3);
+		    $$ = $1;
+		  }
 		| arg_list ',' ALL_VA_ARGS
 		  {
 		    tree_constant *all_va_args;
 		    tree_constant::all_va_args t;
 		    all_va_args = new tree_constant (t);
 		    $1->append (all_va_args);
+		    $$ = $1;
 		  }
 		;
 
 matrix		: '[' screwed_again rows ']'
-		  { $$ = finish_matrix (); }
+		  { $$ = finish_matrix ($3); }
 		;
 
 rows		: rows1
+		  { $$ = $1; }
 		| rows1 ';'	// Ignore trailing semicolon.
+		  { $$ = $1; }
 		;
 
 rows1		: matrix_row
+		  { $$ = new tree_matrix ($1); }
 		| rows1 ';' matrix_row
+		  {
+		    $1->append ($3);
+		    $$ = $1;
+		  }
 		;
 
 matrix_row	: matrix_row1
+		  { $$ = $1; }
 		| matrix_row1 ','	// Ignore trailing comma.
+		  { $$ = $1; }
 		;
 
 matrix_row1	: expression		// First element on row.
-		  { start_matrix ($1); }
+		  { $$ = new tree_matrix_row ($1); }
 		| matrix_row1 ',' expression
 		  {
-		    tree_matrix *tmp = ml.pop ();
-		    tmp = tmp->chain ($3, tree_matrix::md_right);
-		    ml.push (tmp);
+		    $1->append ($3);
+		    $$ = $1;
 		  }
 		;
 
 %%
 
 // Generic error messages.
 
 static void
@@ -1699,28 +1725,27 @@ make_for_command (token *for_tok, tree_i
     }
 
   return retval;
 }
 
 // Build a for command a different way.
 
 static tree_command *
-make_for_command (token *for_tok, tree_expression *expr,
-		  tree_statement_list *body, token *end_tok)
+make_for_command (token *for_tok, tree_matrix_row *mr,
+		  tree_expression *expr, tree_statement_list *body,
+		  token *end_tok)
 {
   tree_command *retval = 0;
 
   if (! check_end (end_tok, token::for_end))
     {
       lexer_flags.looping--;
 
-      tree_matrix *tmp = ml.pop ();
-      tmp = tmp->reverse ();
-      tree_return_list *id_list = tmp->to_return_list ();
+      tree_return_list *id_list = mr->to_return_list ();
 
       int l = for_tok->line ();
       int c = for_tok->column ();
 
       retval = new tree_for_command (id_list, expr, body, l, c);
     }
 
   return retval;
@@ -1837,32 +1862,28 @@ make_simple_assignment (tree_index_expre
   int c = eq_tok->column ();
 
   return new tree_simple_assignment_expression (var, expr, 0, 0, l, c);
 }
 
 // Make an expression that handles assignment of multiple values.
 
 static tree_expression *
-make_multi_val_ret (tree_expression *rhs, token *eq_tok)
+make_multi_val_ret (tree_matrix_row *mr, tree_expression *rhs, token *eq_tok)
 {
 // Convert the matrix list to a list of identifiers.  If that fails,
 // we can abort here, without losing anything -- no other possible
 // syntax is valid if we've seen the equals sign as the next token
 // after the `]'. 
 
   tree_expression *retval = 0;
 
   lexer_flags.maybe_screwed_again--;
 
-  tree_matrix *tmp = ml.pop ();
-
-  tmp = tmp->reverse ();
-
-  tree_return_list *id_list = tmp->to_return_list ();
+  tree_return_list *id_list = mr->to_return_list ();
 
   if (id_list)
     {
       int list_len = id_list->length ();
 
       if (list_len == 1)
 	{
 	  tree_index_expression *lhs = id_list->remove_front ();
@@ -2008,62 +2029,36 @@ make_index_expression (tree_indirect_ref
       delete indir;
     }
   else
     retval =  new tree_index_expression (indir, args, l, c);
 
   return retval;
 }
 
-// Start building a matrix list.
-
-void
-start_matrix (tree_expression *expr)
-{
-  if (mlnm.top ())
-    {
-      mlnm.pop ();
-      mlnm.push (0);
-      tree_matrix *tmp = new tree_matrix (expr, tree_matrix::md_none);
-      ml.push (tmp);
-    }
-  else
-    {
-      tree_matrix *tmp = ml.pop ();
-      tmp = tmp->chain (expr, tree_matrix::md_down);
-      ml.push (tmp);
-    }
-}
-
 // Finish building a matrix list.
 
 static tree_expression *
-finish_matrix (void)
+finish_matrix (tree_matrix *m)
 {
   tree_expression *retval = 0;
 
-  mlnm.pop ();
-
   lexer_flags.maybe_screwed_again--;
 
-  tree_matrix *list = ml.pop ();
-
-  list = list->reverse ();
+  if (m->is_matrix_constant ())
+    {
+      tree_constant tmp = m->eval (0);
 
-  if (list->is_matrix_constant ())
-    {
-      tree_constant tmp = list->eval (0);
-
-      delete list;
+      delete m;
 
       if (! error_state)
 	retval = new tree_constant (tmp);
     }
   else
-    retval = list;
+    retval = m;
 
   return retval;
 }
 
 static void
 maybe_warn_missing_semi (tree_statement_list *t)
 {
   if (lexer_flags.defining_func && user_pref.warn_missing_semicolon)
