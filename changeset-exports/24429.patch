# HG changeset patch
# User Rik <rik@octave.org>
# Date 1513653672 28800
#      Mon Dec 18 19:21:12 2017 -0800
# Node ID 127110fc42c6a010c2c2defe6d020686d38bf25e
# Parent  3472c6760ad2bfb52be6fe210d433506cf1c4742
linkprop.m: Overhaul function.

* linkprop.m: Add "addlistener" to seealso link.  Don't bother to make
column vector of input handles.  Rename all callbacks to start with "cb_".
* linkprop.m (unlink_linkprop): Trim list of valid handles outside of
for loop for performance.

diff --git a/scripts/plot/util/linkprop.m b/scripts/plot/util/linkprop.m
--- a/scripts/plot/util/linkprop.m
+++ b/scripts/plot/util/linkprop.m
@@ -25,20 +25,20 @@
 ## The input @var{h} is a vector of graphic handles to link.
 ##
 ## @var{prop} may be a string when linking a single property, or a cell array
 ## of strings for multiple properties.  During the linking process all
 ## properties in @var{prop} will initially be set to the values that exist on
 ## the first object in the list @var{h}.
 ##
 ## The function returns @var{hlink} which is a special object describing the
-## link.  As long as the reference @var{hlink} exists the link between graphic
+## link.  As long as the reference @var{hlink} exists, the link between graphic
 ## objects will be active.  This means that @var{hlink} must be preserved in
 ## a workspace variable, a global variable, or otherwise stored using a
-## function such as @code{setappdata}, @code{guidata}.  To unlink properties,
+## function such as @code{setappdata} or @code{guidata}.  To unlink properties,
 ## execute @code{clear @var{hlink}}.
 ##
 ## An example of the use of @code{linkprop} is
 ##
 ## @example
 ## @group
 ## x = 0:0.1:10;
 ## subplot (1,2,1);
@@ -46,17 +46,17 @@
 ## subplot (1,2,2);
 ## h2 = plot (x, cos (x));
 ## hlink = linkprop ([h1, h2], @{"color","linestyle"@});
 ## set (h1, "color", "green");
 ## set (h2, "linestyle", "--");
 ## @end group
 ## @end example
 ##
-## @seealso{linkaxes}
+## @seealso{linkaxes, addlistener}
 ## @end deftypefn
 
 function hlink = linkprop (h, prop)
 
   if (nargin != 2)
     print_usage ();
   endif
 
@@ -67,57 +67,56 @@ function hlink = linkprop (h, prop)
   endif
 
   if (ischar (prop))
     prop = {prop};
   elseif (! iscellstr (prop))
     error ("linkprop: PROP must be a string or cell string array");
   endif
 
-  h = h(:)';  # set() prefers column vectors
+  h = h(:);
   ## Match all objects to the first one in the list before linking
   for j = 1 : numel (prop)
     set (h(2:end), prop{j}, get (h(1), prop{j}));
   endfor
 
   ## Add listeners to all objects
   for i = 1 : numel (h)
     for j = 1 : numel (prop)
       addlistener (h(i), prop{j},
-                   {@update_prop, [h(1:i-1),h(i+1:end)], prop{j}});
+                   {@cb_sync_prop, [h(1:i-1), h(i+1:end)], prop{j}});
     endfor
   endfor
 
-  hlink = onCleanup (@() delete_linkprop (h, prop));
+  hlink = onCleanup (@() unlink_linkprop (h, prop));
 
 endfunction
 
-function update_prop (h, ~, hlist, prop)
+function cb_sync_prop (h, ~, hlist, prop)
   persistent recursion = false;
 
   ## Don't allow recursion
   if (! recursion)
     unwind_protect
       recursion = true;
       set (hlist(ishghandle (hlist)), prop, get (h, prop));
     unwind_protect_cleanup
       recursion = false;
     end_unwind_protect
   endif
 
 endfunction
 
-function delete_linkprop (hlist, prop)
+function unlink_linkprop (hlist, prop)
 
+  hlist = hlist(ishghandle (hlist));
   for i = 1 : numel (hlist)
-    if (ishghandle (hlist(i)))
-      for j = 1 : numel (prop)
-        dellistener (hlist(i), prop{j});
-      endfor
-    endif
+    for j = 1 : numel (prop)
+      dellistener (hlist(i), prop{j});
+    endfor
   endfor
 
 endfunction
 
 
 %!demo
 %! clf;
 %! x = 0:0.1:10;
