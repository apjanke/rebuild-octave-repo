# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1254363655 14400
#      Wed Sep 30 22:20:55 2009 -0400
# Node ID e40835382b68a54c3d79285e2c78939415110875
# Parent  ef45d191d8337f092107d72f52b9a5541a9e0af9
doc fixes

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,16 @@
+2009-09-30  John W. Eaton  <jwe@octave.org>
+
+	* interpreter/data.txi (Built-in Data Types):
+	Document bitpack and bitunpack.
+	* interpreter/plot.txi: Delete spurious {}.  Update menus.  Fix
+	cross-referencing.
+	* interpreter/octave.texi: Update plotting sub-menus in detailed menu.
+
 2009-09-30  Michael D. Godfrey  <godfrey@isl.stanford.edu>
 
 	* interpreter/plot.txi: Document graphics structures.
 	
 2009-09-14  John W. Eaton  <jwe@octave.org>
 
 	* interpreter/optim.txi: Document pqpnonneg.
 
diff --git a/doc/interpreter/data.txi b/doc/interpreter/data.txi
--- a/doc/interpreter/data.txi
+++ b/doc/interpreter/data.txi
@@ -60,16 +60,20 @@ use of the following functions.
 @DOCSTRING(isa)
 
 @DOCSTRING(cast)
 
 @DOCSTRING(typecast)
 
 @DOCSTRING(swapbytes)
 
+@DOCSTRING(bitpack)
+
+@DOCSTRING(bitunpack)
+
 @menu
 * Numeric Objects::             
 * Missing Data::                
 * String Objects::              
 * Data Structure Objects::      
 * Cell Array Objects::          
 @end menu
 
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -470,76 +470,82 @@ C-Style I/O Functions
 * String Input Conversions::    
 * Binary I/O::                  
 * Temporary Files::             
 * EOF and Errors::              
 * File Positioning::            
 
 Plotting
 
-* Plotting Basics::
-* Advanced Plotting::
+* Introduction to Plotting::    
+* High-Level Plotting::         
+* Graphics Data Structures::    
+* Advanced Plotting::           
 
-Plotting Basics
+Introduction to Plotting
 
 * Two-Dimensional Plots::       
 * Three-Dimensional Plotting::  
 * Plot Annotations::            
 * Multiple Plots on One Page::  
 * Multiple Plot Windows::       
 * Printing Plots::              
-* Interacting with plots::
+* Interacting with plots::      
 * Test Plotting Functions::     
 
 Two-Dimensional Plots
 
 * Two-dimensional Function Plotting::
 
 Three-Dimensional Plotting
 
 * Three-dimensional Function Plotting::
 * Three-dimensional Geometric Shapes::
 
-Advanced Plotting
+Graphics Data Structures
 
-* Graphics Objects::
+* Introduction to Graphics Structures::  
+* Graphics Objects::            
 * Graphics Object Properties::  
+* Searching Properties::        
 * Managing Default Properties::  
-* Colors::
-* Line Styles::
-* Marker Styles::
-* Callbacks::
-* Object Groups::
-* Graphics backends::
 
 Graphics Object Properties
 
 * Root Figure Properties::      
 * Figure Properties::           
 * Axes Properties::             
 * Line Properties::             
 * Text Properties::             
 * Image Properties::            
 * Patch Properties::            
 * Surface Properties::          
-* Searching Properties::
+
+Advanced Plotting
+
+* Colors::                      
+* Line Styles::                 
+* Marker Styles::               
+* Callbacks::                   
+* Object Groups::               
+* Graphics Backends::           
 
 Object Groups
 
-* Data sources in object groups::
-* Area series::
-* Bar series::
-* Contour groups::
-* Error bar series::
-* Line series::
-* Quiver group::
-* Scatter group::
-* Stair group::
-* Stem Series::
-* Surface group::
+* Data sources in object groups::  
+* Area series::                 
+* Bar series::                  
+* Contour groups::              
+* Error bar series::            
+* Line series::                 
+* Quiver group::                
+* Scatter group::               
+* Stair group::                 
+* Stem Series::                 
+* Surface group::               
 
 Graphics backends
 
 * Interaction with gnuplot::
 
 Matrix Manipulation
 
 * Finding Elements and Checking Conditions::  
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -18,20 +18,20 @@
 @c <http://www.gnu.org/licenses/>.
 
 @node Plotting
 @chapter Plotting
 @cindex plotting
 @cindex graphics
 
 @menu
-* Introduction::
-* High-Level Plotting::
-* Graphics Structures::
-* Advanced Plotting::
+* Introduction to Plotting::    
+* High-Level Plotting::         
+* Graphics Data Structures::    
+* Advanced Plotting::           
 @end menu
 
 @node Introduction to Plotting
 @section Introduction to Plotting
 
 Earlier versions of Octave provided plotting through the use of
 gnuplot. This capability is still available.  But, a newer plotting
 capability is provided by access to OpenGL.  Which plotting system
@@ -48,27 +48,24 @@ explained in @ref{Graphics Data Structur
 
 Octave provides simple means to create many different types of two- and
 three-dimensional plots using high-level functions.
 
 If you need more detailed control, see @ref{Graphics Data Structures}
 and @ref{Advanced Plotting}.
 
 @menu
-* Two-Dimensional Plots::
-* Three-Dimensional Plotting::
-* Plot Annotations::
-* Multiple Plots on One Page::
-* Multiple Plot Windows::
-* Use of @code{axis}, @code{line}, and @code{patch} Functions
-* Manipulation of Plot Windows
-* Use of the @code{interpreter} Property
-* Printing Plots::
-* Interacting with plots::
-* Test Plotting Functions::
+* Two-Dimensional Plots::       
+* Three-Dimensional Plotting::  
+* Plot Annotations::            
+* Multiple Plots on One Page::  
+* Multiple Plot Windows::       
+* Printing Plots::              
+* Interacting with plots::      
+* Test Plotting Functions::     
 @end menu
 
 @node Two-Dimensional Plots
 @subsection Two-Dimensional Plots
 
 The @code{plot} function allows you to create simple x-y plots with
 linear axes.  For example,
 
@@ -232,17 +229,17 @@ function.
 The @code{xlim}, @code{ylim}, and @code{zlim} functions may be used to
 get or set individual axis limits.  Each has the same form.
 
 @anchor{doc-ylim}
 @anchor{doc-zlim}
 @DOCSTRING(xlim)
 
 @menu
-* Two-dimensional Function Plotting::
+* Two-dimensional Function Plotting::  
 @end menu
 
 @node Two-dimensional Function Plotting
 @subsubsection Two-dimensional Function Plotting
 
 Octave can plot a function from a function handle inline function or
 string defining the function without the user needing to explicitly
 create the data to be plotted.  The function @code{fplot} also generates
@@ -358,18 +355,18 @@ three-dimensional plots.
 
 @DOCSTRING(ribbon)
 
 @DOCSTRING(shading)
 
 @DOCSTRING(scatter3)
 
 @menu
-* Three-dimensional Function Plotting::
-* Three-dimensional Geometric Shapes::
+* Three-dimensional Function Plotting::  
+* Three-dimensional Geometric Shapes::  
 @end menu
 
 @node Three-dimensional Function Plotting
 @subsubsection Three-dimensional Function Plotting
 
 @DOCSTRING(ezplot3)
 
 @DOCSTRING(ezmesh)
@@ -836,21 +833,21 @@ at the Octave prompt should display a th
 @DOCSTRING(sombrero)
 
 @DOCSTRING(peaks)
 @node Graphics Data Structures
 @section Graphics Data Structures
 @cindex graphics data structures
 
 @menu
-* Introduction to Graphics Structures
-* Graphics Objects::
-* Graphics Object Properties::
-* Managing Default Properties::
-
+* Introduction to Graphics Structures::  
+* Graphics Objects::            
+* Graphics Object Properties::  
+* Searching Properties::        
+* Managing Default Properties::  
 @end menu
 
 @node Introduction to Graphics Structures
 @subsection Introduction to Graphics Structures
 @cindex introduction to graphics structures
 @anchor{doc-graphics structures}
 
 The graphics functions use pointers, which are of class graphics_handle,
@@ -994,24 +991,24 @@ deletefcn               tag             
 @end verbatim
 @end group
 @end smallformat
 @c @end example
 
 The root figure has index 0.  Its properties may be displayed by:
 @code{get(0,"")}.
 The uses of @code{get()} and @code{set()} are further explained in
-{@ref{doc-get,,get}, @ref{doc-set,,set}}.
+@ref{doc-get,,get}, @ref{doc-set,,set}.
 
 @node Graphics Objects
 @subsection Graphics Objects
 @cindex graphics objects
 
 The hierarchy of graphics objects was explained above. (See 
-@ref{introduction to graphics structures.}  Here the
+@ref{Introduction to Graphics Structures}.  Here the
 specific objects are described, and the properties contained in
 these objects are discussed. Keep in mind that
 graphics objects are always referenced by @dfn{handle}.
 
 @table @asis
 @c @group
 @item root figure
 @cindex root figure graphics object
@@ -1146,25 +1143,24 @@ objects.
 
 @DOCSTRING(allchild)
 
 @node Graphics Object Properties
 @subsection Graphics Object Properties
 @cindex graphics object properties
 
 @menu
-* Root Figure Properties::
-* Figure Properties::
-* Axes Properties::
-* Line Properties::
-* Text Properties::
-* Image Properties::
-* Patch Properties::
-* Surface Properties::
-* Searching Properties::
+* Root Figure Properties::      
+* Figure Properties::           
+* Axes Properties::             
+* Line Properties::             
+* Text Properties::             
+* Image Properties::            
+* Patch Properties::            
+* Surface Properties::          
 @end menu
 
 In this Section the object properties are discussed in detail, starting
 with the root figure properties and continuing through the graphics object
 hierarchy.
 
 @node Root Figure Properties
 @subsubsection Root Figure Properties
@@ -1980,22 +1976,22 @@ get (0, "factory");
 @noindent
 returns a list of factory defaults.
 
 
 @node Advanced Plotting
 @section Advanced Plotting
 
 @menu
-* Colors::
-* Line Styles::
-* Marker Styles::
-* Callbacks::
-* Object Groups::
-* Graphics backends::
+* Colors::                      
+* Line Styles::                 
+* Marker Styles::               
+* Callbacks::                   
+* Object Groups::               
+* Graphics Backends::           
 @end menu
 
 
 @node Colors
 @subsection Colors
 @cindex graphics colors
 @cindex colors, graphics
 
@@ -2248,27 +2244,27 @@ member.
 
 In addition the members of the group can also be linked to other
 graphics objects through callback functions.  For example the baseline of
 the @code{bar} or @code{stem} functions is a line object, whose length
 and position are automatically adjusted, based on changes to the
 corresponding hggroup elements.
 
 @menu
-* Data sources in object groups::
-* Area series::
-* Bar series::
-* Contour groups::
-* Error bar series::
-* Line series::
-* Quiver group::
-* Scatter group::
-* Stair group::
-* Stem Series::
-* Surface group::
+* Data sources in object groups::  
+* Area series::                 
+* Bar series::                  
+* Contour groups::              
+* Error bar series::            
+* Line series::                 
+* Quiver group::                
+* Scatter group::               
+* Stair group::                 
+* Stem Series::                 
+* Surface group::               
 @end menu
 
 @node Data sources in object groups
 @subsubsection Data sources in object groups
 @cindex data sources in object groups
 @anchor{doc-datasources}
 All of the group objects contain data source parameters.  There are
 string parameters that contain an expression that is evaluated to update
@@ -2744,16 +2740,16 @@ Data source variables.
 @cindex graphics backends
 @cindex backends, graphics
 
 @DOCSTRING(backend)
 
 @DOCSTRING(available_backends)
 
 @menu
-* Interaction with gnuplot::
+* Interaction with gnuplot::    
 @end menu
 
 @node Interaction with gnuplot
 @subsubsection Interaction with @code{gnuplot}
 @cindex gnuplot interaction
 
 @DOCSTRING(gnuplot_binary)
