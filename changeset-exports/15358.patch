# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1347396077 14400
#      Tue Sep 11 16:41:17 2012 -0400
# Node ID b135f013679ef6ae7b6b22629f3a5d3a5eff8e69
# Parent  b6b261c3eab32bb1640f9230edd7c1a553fd27b9
# Parent  4663cc835c65873fe12b599bcab11ba4a8f5fb87
maint: periodic merge of stable to default

diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -318,19 +318,20 @@ Sparse<T>::Sparse (const Array<T>& a, co
   if ((rl != 1 && rl != n) || (cl != 1 && cl != n))
     (*current_liboctave_error_handler) ("sparse: dimension mismatch");
 
   if (rl <= 1 && cl <= 1)
     {
       if (n == 1 && a(0) != T ())
         {
           change_capacity (nzm > 1 ? nzm : 1);
-          xcidx (0) = 0;
-          xridx (0) = r(0);
-          xdata (0) = a(0);
+          xcidx(0) = 0;
+          xridx(0) = r(0);
+          xdata(0) = a(0);
+
           for (octave_idx_type j = 0; j < nc; j++)
             xcidx (j+1) = j >= c(0);
         }
     }
   else if (a_scalar)
     {
       // This is completely specialized, because the sorts can be simplified.
       T a0 = a(0);
@@ -490,18 +491,18 @@ Sparse<T>::Sparse (const Array<T>& a, co
 
       const octave_idx_type *rd = rs.raw (), *rdi = rsi.data ();
       // Count unique indices.
       octave_idx_type new_nz = 1;
       for (octave_idx_type i = 1; i < n; i++)
         new_nz += rd[i-1] != rd[i];
       // Allocate result.
       change_capacity (nzm > new_nz ? nzm : new_nz);
-      xcidx (0) = 0;
-      xcidx (1) = new_nz;
+      xcidx(0) = 0;
+      xcidx(1) = new_nz;
       octave_idx_type *rri = ridx ();
       T *rrd = data ();
 
       octave_quit ();
 
       octave_idx_type k = 0;
       rri[k] = rd[0];
       rrd[k] = a(rdi[0]);
@@ -1248,17 +1249,17 @@ Sparse<T>::delete_elements (const idx_ve
           else if (nz == 0)
             {
               // No elements to preserve; adjust dimensions.
               *this = Sparse<T> (nr, nc - (ub - lb));
             }
           else
             {
               const Sparse<T> tmp = *this;
-              octave_idx_type lbi = tmp.cidx (lb), ubi = tmp.cidx (ub),
+              octave_idx_type lbi = tmp.cidx(lb), ubi = tmp.cidx(ub),
                 new_nz = nz - (ubi - lbi);
 
               *this = Sparse<T> (nr, nc - (ub - lb), new_nz);
               copy_or_memcpy (lbi, tmp.data (), data ());
               copy_or_memcpy (lbi, tmp.ridx (), ridx ());
               copy_or_memcpy (nz - ubi, tmp.data () + ubi, xdata () + lbi);
               copy_or_memcpy (nz - ubi, tmp.ridx () + ubi, xridx () + lbi);
               copy_or_memcpy (lb, tmp.cidx () + 1, cidx () + 1);
@@ -1291,30 +1292,30 @@ Sparse<T>::delete_elements (const idx_ve
             {
               // This is more memory-efficient than the approach below.
               const Sparse<T> tmpl = index (idx_vector (0, lb), idx_j);
               const Sparse<T> tmpu = index (idx_vector (ub, nr), idx_j);
               *this = Sparse<T> (nr - (ub - lb), nc,
                                  tmpl.nnz () + tmpu.nnz ());
               for (octave_idx_type j = 0, k = 0; j < nc; j++)
                 {
-                  for (octave_idx_type i = tmpl.cidx (j); i < tmpl.cidx (j+1);
+                  for (octave_idx_type i = tmpl.cidx(j); i < tmpl.cidx(j+1);
                        i++)
                     {
-                      xdata (k) = tmpl.data (i);
-                      xridx (k++) = tmpl.ridx (i);
+                      xdata(k) = tmpl.data(i);
+                      xridx(k++) = tmpl.ridx(i);
                     }
-                  for (octave_idx_type i = tmpu.cidx (j); i < tmpu.cidx (j+1);
+                  for (octave_idx_type i = tmpu.cidx(j); i < tmpu.cidx(j+1);
                        i++)
                     {
-                      xdata (k) = tmpu.data (i);
-                      xridx (k++) = tmpu.ridx (i) + lb;
+                      xdata(k) = tmpu.data(i);
+                      xridx(k++) = tmpu.ridx(i) + lb;
                     }
 
-                  xcidx (j+1) = k;
+                  xcidx(j+1) = k;
                 }
             }
         }
       else
         {
           // This is done by transposing, deleting columns, then transposing
           // again.
           Sparse<T> tmp = transpose ();
