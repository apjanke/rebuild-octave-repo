# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1375570426 21600
#      Sat Aug 03 16:53:46 2013 -0600
# Node ID 36fd98b9ce487fb8cbf7f1aaa7fa5fc36651c735
# Parent  4b834dbe4b3ecfc6b8c2cc1762e0f504e33e606a
Add support for llvm 3.3

* configure.ac: Add check for LLVM IR directory.

* jit-ir.cc: Update includes.

* jit-util.h: Define HAVE_LLVM_DATALAYOUT.

* jit-typeinfo.cc: Update includes.

* pt-jit.cc: Update includes.

* acinclude.m4: Update checks for llvm 3.3

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -707,17 +707,17 @@ OCTAVE_CHECK_LIB(z, ZLIB,
   [ZLIB library not found.  Octave will not be able to save or load compressed data files or HDF5 files.],
   [zlib.h], [gzclearerr])
 
 ### Also define HAVE_ZLIB if libz is found.
 if test $octave_cv_lib_z = yes; then
   AC_DEFINE(HAVE_ZLIB, 1, [Define to 1 if ZLIB is available.])
 fi
 
-### Check for the LLVM library
+ ### Check for the LLVM library
 
 build_jit=no
 AC_ARG_ENABLE([jit],
   [AS_HELP_STRING([--enable-jit],
     [(EXPERIMENTAL) enable JIT compiler])],
   [if test "$enableval" = yes; then
      build_jit=yes
    fi],
@@ -761,16 +761,17 @@ if test $build_jit = yes; then
     dnl very helpful.
     dnl
     CPPFLAGS="-D__STDC_CONSTANT_MACROS -D__STDC_LIMIT_MACROS $LLVM_CPPFLAGS $CPPFLAGS"
     CXXFLAGS="$LLVM_CXXFLAGS $CXXFLAGS"
     AC_LANG_PUSH(C++)
     AC_CHECK_HEADER([llvm/Support/TargetSelect.h], [
       warn_llvm=
       XTRA_CXXFLAGS="$XTRA_CXXFLAGS $LLVM_CXXFLAGS $LLVM_CPPFLAGS"])
+    OCTAVE_LLVM_IR_DIR
     OCTAVE_LLVM_IRBUILDER_HEADER
     OCTAVE_LLVM_DATALAYOUT_HEADER
     OCTAVE_LLVM_FUNCTION_ADDATTRIBUTE_API
     OCTAVE_LLVM_FUNCTION_ADDFNATTR_API
     OCTAVE_LLVM_CALLINST_ADDATTRIBUTE_API
     AC_LANG_POP(C++)
     CPPFLAGS="$save_CPPFLAGS"
     CXXFLAGS="$save_CXXFLAGS"
diff --git a/libinterp/corefcn/jit-ir.cc b/libinterp/corefcn/jit-ir.cc
--- a/libinterp/corefcn/jit-ir.cc
+++ b/libinterp/corefcn/jit-ir.cc
@@ -29,18 +29,23 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #ifdef HAVE_LLVM
 
 #include "jit-ir.h"
 
+#ifdef HAVE_LLVM_IR_FUNCTION_H
+#include <llvm/IR/BasicBlock.h>
+#include <llvm/IR/Instructions.h>
+#else
 #include <llvm/BasicBlock.h>
 #include <llvm/Instructions.h>
+#endif
 
 #include "error.h"
 
 // -------------------- jit_factory --------------------
 jit_factory::~jit_factory (void)
 {
   for (value_list::iterator iter = all_values.begin ();
        iter != all_values.end (); ++iter)
diff --git a/libinterp/corefcn/jit-typeinfo.cc b/libinterp/corefcn/jit-typeinfo.cc
--- a/libinterp/corefcn/jit-typeinfo.cc
+++ b/libinterp/corefcn/jit-typeinfo.cc
@@ -30,27 +30,40 @@ along with Octave; see the file COPYING.
 #include <config.h>
 #endif
 
 #ifdef HAVE_LLVM
 
 #include "jit-typeinfo.h"
 
 #include <llvm/Analysis/Verifier.h>
+#include <llvm/ExecutionEngine/ExecutionEngine.h>
+
+#ifdef HAVE_LLVM_IR_FUNCTION_H
+#include <llvm/IR/GlobalVariable.h>
+#include <llvm/IR/LLVMContext.h>
+#include <llvm/IR/Function.h>
+#include <llvm/IR/Instructions.h>
+#include <llvm/IR/Intrinsics.h>
+#else
 #include <llvm/GlobalVariable.h>
-#include <llvm/ExecutionEngine/ExecutionEngine.h>
 #include <llvm/LLVMContext.h>
 #include <llvm/Function.h>
 #include <llvm/Instructions.h>
 #include <llvm/Intrinsics.h>
-#ifdef IRBUILDER_HEADER_IN_SUPPORT_DIR
+#endif
+
+#ifdef HAVE_LLVM_SUPPORT_IRBUILDER_H
 #include <llvm/Support/IRBuilder.h>
+#elif defined(HAVE_LLVM_IR_IRBUILDER_H)
+#include <llvm/IR/IRBuilder.h>
 #else
 #include <llvm/IRBuilder.h>
 #endif
+
 #include <llvm/Support/raw_os_ostream.h>
 
 #include "jit-ir.h"
 #include "ov.h"
 #include "ov-builtin.h"
 #include "ov-complex.h"
 #include "ov-scalar.h"
 #include "pager.h"
diff --git a/libinterp/corefcn/jit-util.cc b/libinterp/corefcn/jit-util.cc
--- a/libinterp/corefcn/jit-util.cc
+++ b/libinterp/corefcn/jit-util.cc
@@ -27,17 +27,22 @@ along with Octave; see the file COPYING.
 #define __STDC_CONSTANT_MACROS
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #ifdef HAVE_LLVM
 
+#ifdef HAVE_LLVM_IR_FUNCTION_H
+#include <llvm/IR/Value.h>
+#else
 #include <llvm/Value.h>
+#endif
+
 #include <llvm/Support/raw_os_ostream.h>
 
 std::ostream&
 operator<< (std::ostream& os, const llvm::Value& v)
 {
   llvm::raw_os_ostream llvm_out (os);
   v.print (llvm_out);
   return os;
diff --git a/libinterp/corefcn/jit-util.h b/libinterp/corefcn/jit-util.h
--- a/libinterp/corefcn/jit-util.h
+++ b/libinterp/corefcn/jit-util.h
@@ -26,16 +26,20 @@ along with Octave; see the file COPYING.
 
 #if !defined (octave_jit_util_h)
 #define octave_jit_util_h 1
 
 #ifdef HAVE_LLVM
 
 #include <stdexcept>
 
+#if defined(HAVE_LLVM_IR_DATALAYOUT_H) || defined(HAVE_LLVM_DATALAYOUT_H)
+#define HAVE_LLVM_DATALAYOUT
+#endif
+
 // we don't want to include llvm headers here, as they require
 // __STDC_LIMIT_MACROS and __STDC_CONSTANT_MACROS be defined in the entire
 // compilation unit
 namespace llvm
 {
   class Value;
   class Module;
   class FunctionPassManager;
diff --git a/libinterp/corefcn/pt-jit.cc b/libinterp/corefcn/pt-jit.cc
--- a/libinterp/corefcn/pt-jit.cc
+++ b/libinterp/corefcn/pt-jit.cc
@@ -45,33 +45,47 @@ static bool Vdebug_jit = false;
 static bool Vjit_enable = true;
 
 static int Vjit_startcnt = 1000;
 
 #include <llvm/Analysis/CallGraph.h>
 #include <llvm/Analysis/Passes.h>
 #include <llvm/Analysis/Verifier.h>
 #include <llvm/Bitcode/ReaderWriter.h>
-#include <llvm/LLVMContext.h>
 #include <llvm/ExecutionEngine/ExecutionEngine.h>
 #include <llvm/ExecutionEngine/JIT.h>
+#include <llvm/PassManager.h>
+
+#ifdef HAVE_LLVM_IR_FUNCTION_H
+#include <llvm/IR/LLVMContext.h>
+#include <llvm/IR/Module.h>
+#else
+#include <llvm/LLVMContext.h>
 #include <llvm/Module.h>
-#include <llvm/PassManager.h>
-#ifdef IRBUILDER_HEADER_IN_SUPPORT_DIR
+#endif
+
+#ifdef HAVE_LLVM_SUPPORT_IRBUILDER_H
 #include <llvm/Support/IRBuilder.h>
+#elif defined(HAVE_LLVM_IR_IRBUILDER_H)
+#include <llvm/IR/IRBuilder.h>
 #else
 #include <llvm/IRBuilder.h>
 #endif
+
 #include <llvm/Support/raw_os_ostream.h>
 #include <llvm/Support/TargetSelect.h>
-#ifdef HAVE_DATALAYOUT
+
+#ifdef HAVE_LLVM_IR_DATALAYOUT_H
+#include <llvm/IR/DataLayout.h>
+#elif defined(HAVE_LLVM_DATALAYOUT_H)
 #include <llvm/DataLayout.h>
 #else
 #include <llvm/Target/TargetData.h>
 #endif
+
 #include <llvm/Transforms/IPO.h>
 #include <llvm/Transforms/Scalar.h>
 
 static llvm::IRBuilder<> builder (llvm::getGlobalContext ());
 
 static llvm::LLVMContext& context = llvm::getGlobalContext ();
 
 // -------------------- jit_break_exception --------------------
@@ -1867,17 +1881,17 @@ tree_jit::initialize (void)
 
   if (! engine)
     return false;
 
   module_pass_manager = new llvm::PassManager ();
   module_pass_manager->add (llvm::createAlwaysInlinerPass ());
 
   pass_manager = new llvm::FunctionPassManager (module);
-#if HAVE_DATALAYOUT
+#ifdef HAVE_LLVM_DATALAYOUT
   pass_manager->add (new llvm::DataLayout (*engine->getDataLayout ()));
 #else
   pass_manager->add (new llvm::TargetData (*engine->getTargetData ()));
 #endif
   pass_manager->add (llvm::createCFGSimplificationPass ());
   pass_manager->add (llvm::createBasicAliasAnalysisPass ());
   pass_manager->add (llvm::createPromoteMemoryToRegisterPass ());
   pass_manager->add (llvm::createInstructionCombiningPass ());
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1426,21 +1426,25 @@ AC_DEFUN([OCTAVE_IEEE754_DATA_FORMAT], [
 dnl
 dnl Check for CallInst::addAttribute API
 dnl
 AC_DEFUN([OCTAVE_LLVM_CALLINST_ADDATTRIBUTE_API], [
   AC_CACHE_CHECK([check LLVM::CallInst::addAttribute arg type is llvm::Attributes],
     [octave_cv_callinst_addattribute_arg_is_attributes],
     [AC_LANG_PUSH(C++)
       AC_COMPILE_IFELSE(
-        [AC_LANG_PROGRAM([[
+        [AC_LANG_PROGRAM([
+#ifdef HAVE_LLVM_IR_FUNCTION_H
+          #include <llvm/IR/Instructions.h>
+          #include <llvm/IR/Attributes.h>
+#else
           #include <llvm/Instructions.h>
           #include <llvm/Attributes.h>
-          #include <llvm/LLVMContext.h>
-          ]], [[
+#endif
+          ], [[
           llvm::CallInst *callinst;
           llvm::AttrBuilder attr_builder;
           attr_builder.addAttribute(llvm::Attributes::StructRet);
           llvm::Attributes attrs = llvm::Attributes::get(llvm::getGlobalContext(), attr_builder);
           callinst->addAttribute (1, attrs);
         ]])],
         octave_cv_callinst_addattribute_arg_is_attributes=yes,
         octave_cv_callinst_addattribute_arg_is_attributes=no)
@@ -1450,18 +1454,23 @@ AC_DEFUN([OCTAVE_LLVM_CALLINST_ADDATTRIB
     AC_DEFINE(CALLINST_ADDATTRIBUTE_ARG_IS_ATTRIBUTES, 1,
       [Define to 1 if llvm::CallInst:addAttribute arg type is llvm::Attributes.])
   else
     AC_CACHE_CHECK([check LLVM::CallInst::addAttribute arg type is llvm::Attribute],
       [octave_cv_callinst_addattribute_arg_is_attribute],
       [AC_LANG_PUSH(C++)
         AC_COMPILE_IFELSE(
           [AC_LANG_PROGRAM([[
+#ifdef HAVE_LLVM_IR_FUNCTION_H
+            #include <llvm/IR/Instructions.h>
+            #include <llvm/IR/Attributes.h>
+#else
             #include <llvm/Instructions.h>
             #include <llvm/Attributes.h>
+#endif
             ]], [[
             llvm::CallInst *callinst;
             callinst->addAttribute (1, llvm::Attribute::StructRet);
           ]])],
           octave_cv_callinst_addattribute_arg_is_attribute=yes,
           octave_cv_callinst_addattribute_arg_is_attribute=no)
       AC_LANG_POP(C++)
     ])
@@ -1469,40 +1478,43 @@ AC_DEFUN([OCTAVE_LLVM_CALLINST_ADDATTRIB
       AC_MSG_ERROR([llvm::CallInst::addAttribute is required.])
     fi
   fi
 ])
 dnl
 dnl Detect TargetData.h or DataLayout.h.
 dnl
 AC_DEFUN([OCTAVE_LLVM_DATALAYOUT_HEADER], [
-  AC_CHECK_HEADER([llvm/DataLayout.h], [
-    octave_is_datalayout_header=yes], [
-    AC_CHECK_HEADER([llvm/Target/TargetData.h], [
-      octave_is_datalayout_header=no], [
-      AC_MSG_ERROR([DataLayout.h or Target/TargetData.h is required.])
-    ])
+  OCTAVE_LLVM_DATALAYOUT_HEADER_FOUND=no
+  AC_CHECK_HEADERS([llvm/Target/TargetData.h llvm/IR/DataLayout.h llvm/DataLayout.h], [
+    OCTAVE_LLVM_DATALAYOUT_HEADER_FOUND=yes
+    break
   ])
-  if test $octave_is_datalayout_header = yes; then
-    AC_DEFINE(HAVE_DATALAYOUT, 1,
-      [Define to 1 if DataLayout.h exist.])
+  if test OCTAVE_LLVM_DATALAYOUT_HEADER_FOUND = no; then
+    AC_MSG_ERROR([DataLayout.h or TargetLayout.h is required.])
   fi
 ])
 dnl
 dnl Check for Function::addAttribute API
 dnl
 AC_DEFUN([OCTAVE_LLVM_FUNCTION_ADDATTRIBUTE_API], [
   AC_CACHE_CHECK([check llvm::Function::addAttribute arg type is llvm::Attributes],
     [octave_cv_function_addattribute_arg_is_attributes],
     [AC_LANG_PUSH(C++)
       AC_COMPILE_IFELSE(
         [AC_LANG_PROGRAM([[
+#ifdef HAVE_LLVM_IR_FUNCTION_H
+          #include <llvm/IR/Function.h>
+          #include <llvm/IR/Attributes.h>
+          #include <llvm/IR/LLVMContext.h>
+#else
           #include <llvm/Function.h>
           #include <llvm/Attributes.h>
           #include <llvm/LLVMContext.h>
+#endif
           ]], [[
           llvm::Function *llvm_function;
           llvm::AttrBuilder attr_builder;
           attr_builder.addAttribute(llvm::Attributes::StructRet);
           llvm::Attributes attrs = llvm::Attributes::get(llvm::getGlobalContext(), attr_builder);
           llvm_function->addAttribute (1, attrs);
         ]])],
         octave_cv_function_addattribute_arg_is_attributes=yes,
@@ -1513,18 +1525,23 @@ AC_DEFUN([OCTAVE_LLVM_FUNCTION_ADDATTRIB
     AC_DEFINE(FUNCTION_ADDATTRIBUTE_ARG_IS_ATTRIBUTES, 1,
       [Define to 1 if llvm::Function:addAttribute arg type is llvm::Attributes.])
   else
     AC_CACHE_CHECK([check llvm::Function::addAttribute arg type is llvm::Attribute],
       [octave_cv_function_addattribute_arg_is_attribute],
       [AC_LANG_PUSH(C++)
         AC_COMPILE_IFELSE(
           [AC_LANG_PROGRAM([[
+#ifdef HAVE_LLVM_IR_FUNCTION_H
+            #include <llvm/IR/Function.h>
+            #include <llvm/IR/Attributes.h>
+#else
             #include <llvm/Function.h>
             #include <llvm/Attributes.h>
+#endif
             ]], [[
             llvm::Function *llvm_function;
             llvm_function->addAttribute (1, llvm::Attribute::StructRet);
           ]])],
           octave_cv_function_addattribute_arg_is_attribute=yes,
           octave_cv_function_addattribute_arg_is_attribute=no)
       AC_LANG_POP(C++)
     ])
@@ -1537,18 +1554,23 @@ dnl
 dnl Check for Function::addFnAttr API
 dnl
 AC_DEFUN([OCTAVE_LLVM_FUNCTION_ADDFNATTR_API], [
   AC_CACHE_CHECK([check LLVM::Function::addFnAttr arg type is llvm::Attributes],
     [octave_cv_function_addfnattr_arg_is_attributes],
     [AC_LANG_PUSH(C++)
       AC_COMPILE_IFELSE(
         [AC_LANG_PROGRAM([[
+#ifdef LLVM_HAVE_IR_FUNCTION_H
           #include <llvm/Function.h>
           #include <llvm/Attributes.h>
+#else
+          #include <llvm/Function.h>
+          #include <llvm/Attributes.h>
+#endif
           ]], [[
           llvm::Function *llvm_function;
           llvm_function->addFnAttr (llvm::Attributes::AlwaysInline);
         ]])],
         octave_cv_function_addfnattr_arg_is_attributes=yes,
         octave_cv_function_addfnattr_arg_is_attributes=no)
     AC_LANG_POP(C++)
   ])
@@ -1556,45 +1578,59 @@ AC_DEFUN([OCTAVE_LLVM_FUNCTION_ADDFNATTR
     AC_DEFINE(FUNCTION_ADDFNATTR_ARG_IS_ATTRIBUTES, 1,
       [Define to 1 if llvm::Function:addFnAttr arg type is llvm::Attributes.])
   else
     AC_CACHE_CHECK([check llvm::Function::addFnAttr arg type is llvm::Attribute],
       [octave_cv_function_addfnattr_arg_is_attribute],
       [AC_LANG_PUSH(C++)
         AC_COMPILE_IFELSE(
           [AC_LANG_PROGRAM([[
+#ifdef HAVE_LLVM_IR_FUNCTION_H
+            #include <llvm/IR/Function.h>
+            #include <llvm/IR/Attributes.h>
+#else
             #include <llvm/Function.h>
             #include <llvm/Attributes.h>
+#endif
             ]], [[
             llvm::Function *llvm_function;
             llvm_function->addFnAttr (llvm::Attribute::AlwaysInline);
           ]])],
           octave_cv_function_addfnattr_arg_is_attribute=yes,
           octave_cv_function_addfnattr_arg_is_attribute=no)
       AC_LANG_POP(C++)
     ])
     if test $octave_cv_function_addfnattr_arg_is_attribute = no; then
       AC_MSG_ERROR([llvm::Function::addFnAttr is required.])
     fi
   fi
 ])
 dnl
-dnl Check whether IRBuilder.h is in Support directory.
+dnl Check whether IRBuilder.h is in llvm/Support, llvm/IR, or llvm directory.
 dnl
 AC_DEFUN([OCTAVE_LLVM_IRBUILDER_HEADER], [
-  AC_CHECK_HEADER([llvm/IRBuilder.h], [
-    octave_irbuilder_header_in_support_dir=no], [
-    AC_CHECK_HEADER([llvm/Support/IRBuilder.h], [
-      octave_irbuilder_header_in_support_dir=yes], [
-      AC_MSG_ERROR([IRBuilder.h is required.])
-    ])
+  OCTAVE_LLVM_IRBUILDER_HEADER_FOUND=no
+  AC_CHECK_HEADERS([llvm/Support/IRBuilder.h llvm/IR/IRBuilder.h llvm/IRBuilder.h], [
+    OCTAVE_LLVM_IRBUILDER_HEADER_FOUND=yes
+    break
   ])
-  if test $octave_irbuilder_header_in_support_dir = yes; then
-    AC_DEFINE(IRBUILDER_HEADER_IN_SUPPORT_DIR, 1,
-      [Define to 1 if IRBuilder.h in Support directory.])
+
+  if test OCTAVE_LLVM_IRBUILDER_HEADER_FOUND = no; then
+    AC_MSG_ERROR([Could not find IRBuilder.h])
+  fi
+])
+AC_DEFUN([OCTAVE_LLVM_IR_DIR], [
+  OCTAVE_LLVM_FUNCTION_FOUNDR=no
+  AC_CHECK_HEADERS([llvm/IR/Function.h llvm/Function.h], [
+    OCTAVE_LLVM_FUNCTION_FOUNDR=yes
+    break
+  ])
+
+  if test OCTAVE_LLVM_FUNCTION_FOUNDR = no; then
+    AC_MSG_ERROR([Could not find Function.h])
   fi
 ])
 dnl
 dnl Check for ar.
 dnl
 AC_DEFUN([OCTAVE_PROG_AR], [
   if test -z "$AR"; then
     AR=ar
