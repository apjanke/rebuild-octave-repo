# HG changeset patch
# User jwe
# Date 1039213135 0
#      Fri Dec 06 22:18:55 2002 +0000
# Node ID c20a1e67cef6fa41d953c797417137201cf1e203
# Parent  23d06c9e1eddf408e77fcbc8ade3be5b35b17b5b
[project @ 2002-12-06 22:18:54 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,15 @@
 2002-12-06  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* str-vec.cc (string_vector::compare): New static member function.
+	* str-vec.h: Provide decl.
+	(string_vector::sort): Use it.
+	(str_vec_compare): Delete static function.
+
 	* oct-alloc.h (DECLARE_OCTAVE_ALLOCATOR): Also declare and define
 	a placement operator new.
 
 2002-12-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Matrix.h: Include mx-ops.h too.
 	* mx-ops.h: New file.
 
diff --git a/liboctave/str-vec.cc b/liboctave/str-vec.cc
--- a/liboctave/str-vec.cc
+++ b/liboctave/str-vec.cc
@@ -62,16 +62,25 @@ string_vector::string_vector (const char
 
 string_vector::string_vector (const char * const *s, int n)
   : Array<std::string> (n)
 {
   for (int i = 0; i < n; i++)
     elem (i) = s[i];
 }
 
+int
+string_vector::compare (const void *a_arg, const void *b_arg)
+{
+  const std::string *a = (const std::string *) a_arg;
+  const std::string *b = (const std::string *) b_arg;
+
+  return a->compare (*b);
+}
+
 string_vector&
 string_vector::uniq (void)
 {
   int len = length ();
 
   if (len > 0)
     {
       int k = 0;
diff --git a/liboctave/str-vec.h b/liboctave/str-vec.h
--- a/liboctave/str-vec.h
+++ b/liboctave/str-vec.h
@@ -23,25 +23,16 @@ Software Foundation, 59 Temple Place - S
 #if !defined (octave_str_vec_h)
 #define octave_str_vec_h 1
 
 #include <iostream>
 #include <string>
 
 #include "Array.h"
 
-static int
-str_vec_compare (const void *a_arg, const void *b_arg)
-{
-  const std::string *a = (const std::string *) a_arg;
-  const std::string *b = (const std::string *) b_arg;
-
-  return a->compare (*b);
-}
-
 class
 string_vector : public Array<std::string>
 {
 public:
 
   string_vector (void) : Array<std::string> () { }
 
   explicit string_vector (int n) : Array<std::string> (n) { }
@@ -83,19 +74,21 @@ public:
 
     return longest;
   }
 
   std::string& operator[] (int i) { return Array<std::string>::elem (i); }
 
   std::string operator[] (int i) const { return Array<std::string>::elem (i); }
 
+  static int compare (const void *a_arg, const void *b_arg);
+
   string_vector& qsort (bool make_unique = false)
   {
-    Array<std::string>::qsort (str_vec_compare);
+    Array<std::string>::qsort (compare);
 
     if (make_unique)
       uniq ();
 
     return *this;
   }
 
   string_vector& uniq (void);
