# HG changeset patch
# User jwe
# Date 1174412359 0
#      Tue Mar 20 17:39:19 2007 +0000
# Node ID cac156381f81970b8a7e563057b4af2ab7f59e21
# Parent  e35658098bbcfba29b17a2c8e3e66565f244b059
[project @ 2007-03-20 17:39:19 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2007-03-20  G. D. McBain  <geordie.mcbain@aeromech.usyd.edu.au>
+
+	* interpreter/sparse.txi: Clarify sparse matrix creation example.
+
 2007-03-14  G. D. McBain  <geordie.mcbain@aeromech.usyd.edu.au>
 
 	* interpreter/sparse.txi: Fix typo.
 
 2007-02-26  From Michael Goffioul  <michael.goffioul@swing.be>
 
 	* Makefile.in, interpreter/Makefile.in, faq/Makefile.in,
 	liboctave/Makefile.in, refcard/Makefile.in:
diff --git a/doc/interpreter/sparse.txi b/doc/interpreter/sparse.txi
--- a/doc/interpreter/sparse.txi
+++ b/doc/interpreter/sparse.txi
@@ -201,40 +201,30 @@ s = spdiag (sparse(randn(1,n)), -1);
 creates a sparse (@var{n}+1)-by-(@var{n}+1) sparse matrix with a single
 diagonal defined.
 
 The recommended way for the user to create a sparse matrix, is to create 
 two vectors containing the row and column index of the data and a third
 vector of the same size containing the data to be stored. For example
 
 @example
- function x = foo (r, j)
-  idx = randperm (r);
-  x = ([zeros(r-2,1); rand(2,1)])(idx);
- endfunction
-
- ri = [];
- ci = [];
- d = [];
-
- for j=1:c
-    dtmp = foo (r, j);  # Returns vector of length r with (:,j) values
-    idx = find (dtmp != 0.);
-    ri = [ri; idx];
-    ci = [ci; j*ones(length(idx),1)]; 
-    d = [d; dtmp(idx)];
- endfor
- s = sparse (ri, ci, d, r, c);
+  ri = ci = d = [];
+  for j = 1:c
+    ri = [ri; randperm(r)(1:n)'];
+    ci = [ci; j*ones(n,1)];
+    d = [d; rand(n,1)];
+  endfor
+  s = sparse (ri, ci, d, r, c);
 @end example
 
-creates an @var{r}-by-@var{c} sparse matrix with a random distribution of
-2 elements per row. The elements of the vectors do not need to be sorted in
-any particular order as Octave will sort them prior to storing the
-data. However, pre-sorting the data will make the creation of the sparse
-matrix faster.
+creates an @var{r}-by-@var{c} sparse matrix with a random distribution
+of @var{n} (<@var{r}) elements per column. The elements of the vectors
+do not need to be sorted in any particular order as Octave will sort
+them prior to storing the data. However, pre-sorting the data will
+make the creation of the sparse matrix faster.
 
 The function @dfn{spconvert} takes a three or four column real matrix.
 The first two columns represent the row and column index respectively and
 the third and four columns, the real and imaginary parts of the sparse
 matrix. The matrix can contain zero elements and the elements can be 
 sorted in any order. Adding zero elements is a convenient way to define
 the size of the sparse matrix. For example
 
