# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1242981973 -7200
#      Fri May 22 10:46:13 2009 +0200
# Node ID f29db0a0aa85f4db02c4b93b242c2e3a8c4fa039
# Parent  0ae2b6617005b071895a0ad9763cf6f9c449368b
fix another indexing bug in liboctinterp

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-05-22  Jaroslav Hajek  <highegg@gmail.com>
+
+	* src/ov-base-mat.cc (octave_base_matrix<MT>::assign (const
+	octave_value_list, typename MT::element_type)): Avoid out of bounds
+	assignments.
+
 2009-05-21  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* graphics.cc (figure::properties::get_boundingbox,
 	figure::properties::set_boundingbox): Get screen size from root
 	object.
 	(convert_position): Get screen resolution from root object and remove
 	unneeded "backend" argument.
 	(axes::properties::get_boundingbox,
diff --git a/src/ov-base-mat.cc b/src/ov-base-mat.cc
--- a/src/ov-base-mat.cc
+++ b/src/ov-base-mat.cc
@@ -329,27 +329,27 @@ octave_base_matrix<MT>::assign (const oc
           }
       }
       break;
 
     default:
       {
         Array<idx_vector> idx_vec (n_idx);
         bool scalar_opt = n_idx == nd;
-        const dim_vector dv = matrix.dims ();
+        const dim_vector dv = matrix.dims ().redim (n_idx);
 
         for (octave_idx_type i = 0; i < n_idx; i++)
           {
             idx_vec(i) = idx(i).index_vector ();
 
             if (error_state)
               break;
 
             scalar_opt = (scalar_opt && idx_vec(i).is_scalar ()
-                          && idx_vec(i)(0) < dv(0));
+                          && idx_vec(i)(0) < dv(i));
           }
 
         if (! error_state)
           {
             if (scalar_opt)
               {
                 // optimize all scalar indices. Don't construct an index array,
                 // but rather calc a scalar index directly.
