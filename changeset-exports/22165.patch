# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1469215618 14400
#      Fri Jul 22 15:26:58 2016 -0400
# Node ID 20e684ec108eae51ab1ec12454f100aa69b5b3c6
# Parent  5d4a286061c8a13116eec4d8770c22493304be78
move system dependent code to sysdep.cc

* octave-gui.cc (set_win_app_id): Move to sysdep.cc and rename to
set_application_id.
* sysdep.h: Provide decl.

diff --git a/libgui/src/octave-gui.cc b/libgui/src/octave-gui.cc
--- a/libgui/src/octave-gui.cc
+++ b/libgui/src/octave-gui.cc
@@ -42,56 +42,33 @@ along with Octave; see the file COPYING.
 #include "oct-syscalls.h"
 
 #include "builtin-defun-decls.h"
 #include "display.h"
 #if defined (HAVE_QT_GRAPHICS)
 #  include "__init_qt__.h"
 #endif
 #include "octave.h"
+#include "sysdep.h"
 #include "unistd-wrappers.h"
 
 #include "main-window.h"
 #include "octave-gui.h"
 #include "resource-manager.h"
 #include "shortcut-manager.h"
 #include "thread-manager.h"
 #include "welcome-wizard.h"
 
 // Disable all Qt messages by default.
 
 static void
 message_handler (QtMsgType, const char *)
 {
 }
 
-#if defined (OCTAVE_USE_WINDOWS_API)
-#include <windows.h>
-// set app id if we have the SetCurrentProcessExplicitAppUserModelID
-// available (>= Win7)
-static void
-set_win_app_id ()
-{
-  typedef HRESULT (WINAPI *SETCURRENTAPPID)(PCWSTR AppID);
-  HMODULE hShell = LoadLibrary ("shell32.dll");
-  if (hShell != NULL)
-    {
-      SETCURRENTAPPID pfnSetCurrentProcessExplicitAppUserModelID =
-        reinterpret_cast<SETCURRENTAPPID> (GetProcAddress (hShell,
-          "SetCurrentProcessExplicitAppUserModelID"));
-
-      if (pfnSetCurrentProcessExplicitAppUserModelID)
-        {
-          pfnSetCurrentProcessExplicitAppUserModelID (L"gnu.octave");
-        }
-      FreeLibrary (hShell);
-    }
-}
-#endif
-
 namespace octave
 {
   bool gui_application::start_gui_p (void) const
   {
     if (m_options.no_window_system ())
       return false;
 
     std::string err_msg;
@@ -139,19 +116,17 @@ namespace octave
 
     return true;
   }
 
   int gui_application::execute (void)
   {
     octave_thread_manager::block_interrupt_signal ();
 
-#if defined (OCTAVE_USE_WINDOWS_API)
-    set_win_app_id ();
-#endif
+    set_application_id ();
 
     std::string show_gui_msgs = octave::sys::env::getenv ("OCTAVE_SHOW_GUI_MESSAGES");
 
     // Installing our handler suppresses the messages.
 
     if (show_gui_msgs.empty ())
       qInstallMsgHandler (message_handler);
 
diff --git a/libinterp/corefcn/sysdep.cc b/libinterp/corefcn/sysdep.cc
--- a/libinterp/corefcn/sysdep.cc
+++ b/libinterp/corefcn/sysdep.cc
@@ -168,18 +168,47 @@ w32_init (void)
 
   octave::command_editor::prefer_env_winsize (true);
 }
 
 static bool
 w32_shell_execute (const std::string& file)
 {
 }
+
 #endif
 
+// Set app id if we have the SetCurrentProcessExplicitAppUserModelID
+// available (>= Win7).  FIXME: Could we check for existence of this
+// function in the configure script instead of dynamically loading
+// shell32.dll?
+
+void
+set_application_id (void)
+{
+#if defined (__MINGW32__) || defined (_MSC_VER)
+
+  typedef HRESULT (WINAPI *SETCURRENTAPPID)(PCWSTR AppID);
+
+  HMODULE hShell = LoadLibrary ("shell32.dll");
+
+  if (hShell != NULL)
+    {
+      SETCURRENTAPPID pfnSetCurrentProcessExplicitAppUserModelID =
+        reinterpret_cast<SETCURRENTAPPID> (GetProcAddress (hShell, "SetCurrentProcessExplicitAppUserModelID"));
+
+      if (pfnSetCurrentProcessExplicitAppUserModelID)
+        pfnSetCurrentProcessExplicitAppUserModelID (L"gnu.octave");
+
+      FreeLibrary (hShell);
+    }
+
+#endif
+}
+
 DEFUN (__open_with_system_app__, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} __open_with_system_app__ (@var{file})
 Undocumented internal function.
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
diff --git a/libinterp/corefcn/sysdep.h b/libinterp/corefcn/sysdep.h
--- a/libinterp/corefcn/sysdep.h
+++ b/libinterp/corefcn/sysdep.h
@@ -29,16 +29,18 @@ along with Octave; see the file COPYING.
 
 #include <string>
 
 #include "lo-ieee.h"
 #include "lo-sysdep.h"
 
 extern OCTINTERP_API void sysdep_init (void);
 
+extern OCTINTERP_API void set_application_id (void);
+
 extern OCTINTERP_API void sysdep_cleanup (void);
 
 extern OCTINTERP_API void raw_mode (bool, bool wait = true);
 
 extern OCTINTERP_API FILE *octave_popen (const char *command, const char *mode);
 extern OCTINTERP_API int octave_pclose (FILE *f);
 
 extern OCTINTERP_API int octave_kbhit (bool wait = true);
