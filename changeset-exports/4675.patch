# HG changeset patch
# User jwe
# Date 1071551487 0
#      Tue Dec 16 05:11:27 2003 +0000
# Node ID f6d6335c08f61309d4fcb95630984a6ece088484
# Parent  7736835a5c8e958897cdf0d58f873fed1284186b
[project @ 2003-12-16 05:11:26 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,17 @@
+2003-12-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* control/system/zp2ss.m: Don't save and restore
+	warn_empty_list_elements.
+
+2003-12-15  Gabriele Pannocchia  <g.pannocchia@ing.unipi.it>
+
+        * control/system/zp2ss.m: Correct definition of pure gain system.
+
 2003-12-10  Quentin Spencer  <qspencer@ieee.org>
 
 	* statistics/base/mean.m: Remove special case for row vectors.
 
 2003-11-19  Quentin Spencer  <qspencer@ieee.org>
 
 	* signal/freqz_plot.m: Save and restore automatic_replot too.
 
diff --git a/scripts/control/system/zp2ss.m b/scripts/control/system/zp2ss.m
--- a/scripts/control/system/zp2ss.m
+++ b/scripts/control/system/zp2ss.m
@@ -46,20 +46,16 @@
 ## @samp{k} is @code{zp}-form leading coefficient.
 ## @end deftypefn
 
 ## Author: David Clem
 ## Created: August 15, 1994
 
 function [a, b, c, d] = zp2ss (zer, pol, k)
 
-  save_warn_empty_list_elements = warn_empty_list_elements;
-  unwind_protect
-    warn_empty_list_elements = 0;
-
     if(nargin != 3)
       error("Incorrect number of input arguments");
     endif
 
     if(! (isvector(zer) | isempty(zer)) )
       error(["zer(",num2str(rows(zer)),",",num2str(columns(zer)), ...
 	  ") should be a vector"]);
     elseif(! (isvector(pol) | isempty(pol) ) )
@@ -67,17 +63,17 @@ function [a, b, c, d] = zp2ss (zer, pol,
 	  ") should be a vector"]);
     elseif(! isscalar(k))
       error(["k(",num2str(rows(k)),",",num2str(columns(k)), ...
 	  ") should be a scalar"]);
     elseif( k != real(k))
       warning("zp2ss: k is complex")
     endif
 
-    zpsys = ss2sys([],[],[],k);
+    zpsys = ss2sys (zeros (0, 0), zeros (0, 1), zeros (1, 0), k);
 
     ## Find the number of zeros and the number of poles
     nzer=length(zer);
     npol =length(pol);
 
     if(nzer > npol)
       error([num2str(nzer)," zeros, exceeds number of poles=",num2str(npol)]);
     endif
@@ -145,14 +141,10 @@ function [a, b, c, d] = zp2ss (zer, pol,
       zpsys1 = syssetsignals (zpsys1, "st", __sysdefioname__ (nn1, "xx"));
 
       zpsys = sysmult(zpsys,zpsys1);
 
     endwhile
 
     [a,b,c,d] = sys2ss(zpsys);
 
-  unwind_protect_cleanup
-    warn_empty_list_elements = save_warn_empty_list_elements;
-  end_unwind_protect
-
 endfunction
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,41 @@
+2003-12-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-map.cc (Octave_map::assign): Use Octave_map::contents member
+	function instead of operator [].
+	* ov-struct.cc (octave_struct::subsasgn): Likewise.
+	* DLD-FUNCTIONS/time.cc (extract_tm): Likewise.
+
+	* DLD-FUNCTIONS/time.cc	(mk_tm_map): Use Octave_map::assign member
+	function instead of operator [].
+	* DLD-FUNCTIONS/getrusage.cc (Fgetrusage): Likewise.
+	* DLD-FUNCTIONS/getgrent.cc (mk_gr_map): Likewise.
+	* DLD-FUNCTIONS/getpwent.cc (mk_pw_map): Likewise.
+	* load-save.cc (do_load): Likewise.
+	* ls-hdf5.cc (hdf5_read_next_data): Likewise.
+	* ls-mat5.cc (read_mat5_binary_element): Likewise.
+	* oct-map.cc (Octave_map::reshape): Likewise.
+	* oct-map.cc (Octave_map::index): Likewise.
+	* ov-fcn-handle.cc (Ffunctions): Likewise.
+	* pt-idx.cc (make_arg_struct): Likewise.
+	* sighandlers.cc (make_sig_struct): Likewise.
+	* syscalls.cc (mk_stat_map): Likewise.
+	* toplev.cc (Foctave_config_info): Likewise.
+
+	* ls-hdf5.cc (add_hdf5_data): Temporary Octave_map is now const.
+	* ls-mat5.cc (save_mat5_binary_element): Likewise.
+
+	* oct-map.cc (Octave_map::assign (const std::string&, const
+	octave_value&)): New function.
+	* oct-map.h: Provide decl.
+	(Octave_map::contents (const std::string&)): New function.
+	(Octave_map::operator [] (const std::string&) const): Delete.
+	(Octave_map::operator [] (const std::string&)): Delete.
+
 2003-12-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* OPERATORS/op-cell.cc: Allow transpose for cell arrays.
 	* OPERATORS/op-m-m.cc, OPERATORS/op-cm-cm.cc,
 	OPERATORS/op-bm-bm.cc, OPERATORS/op-streamoff.cc,
 	OPERATORS/op-str-str.cc: Improve error message for attempt to
 	transpose N-d object.
 
diff --git a/src/DLD-FUNCTIONS/getgrent.cc b/src/DLD-FUNCTIONS/getgrent.cc
--- a/src/DLD-FUNCTIONS/getgrent.cc
+++ b/src/DLD-FUNCTIONS/getgrent.cc
@@ -46,20 +46,20 @@ static octave_value
 mk_gr_map (const octave_group& gr)
 {
   octave_value retval;
 
   if (gr)
     {
       Octave_map m;
 
-      m ["name"](0) = gr.name ();
-      m ["passwd"](0) = gr.passwd ();
-      m ["gid"](0) = static_cast<double> (gr.gid ());
-      m ["mem"](0) = gr.mem ();
+      m.assign ("name", gr.name ());
+      m.assign ("passwd", gr.passwd ());
+      m.assign ("gid", static_cast<double> (gr.gid ()));
+      m.assign ("mem", octave_value (gr.mem ()));
 
       retval = m;
     }
   else
     retval = 0;
 
   return retval;
 }
diff --git a/src/DLD-FUNCTIONS/getpwent.cc b/src/DLD-FUNCTIONS/getpwent.cc
--- a/src/DLD-FUNCTIONS/getpwent.cc
+++ b/src/DLD-FUNCTIONS/getpwent.cc
@@ -46,23 +46,23 @@ static octave_value
 mk_pw_map (const octave_passwd& pw)
 {
   octave_value retval;
 
   if (pw)
     {
       Octave_map m;
 
-      m ["name"](0) = pw.name ();
-      m ["passwd"](0) = pw.passwd ();
-      m ["uid"](0) = static_cast<double> (pw.uid ());
-      m ["gid"](0) = static_cast<double> (pw.gid ());
-      m ["gecos"](0) = pw.gecos ();
-      m ["dir"](0) = pw.dir ();
-      m ["shell"](0) = pw.shell ();
+      m.assign ("name", pw.name ());
+      m.assign ("passwd", pw.passwd ());
+      m.assign ("uid", static_cast<double> (pw.uid ()));
+      m.assign ("gid", static_cast<double> (pw.gid ()));
+      m.assign ("gecos", pw.gecos ());
+      m.assign ("dir", pw.dir ());
+      m.assign ("shell", pw.shell ());
 
       retval = m;
     }
   else
     retval = 0;
 
   return retval;
 }
diff --git a/src/DLD-FUNCTIONS/getrusage.cc b/src/DLD-FUNCTIONS/getrusage.cc
--- a/src/DLD-FUNCTIONS/getrusage.cc
+++ b/src/DLD-FUNCTIONS/getrusage.cc
@@ -133,39 +133,39 @@ elements @code{sec} (seconds) @code{usec
   Octave_map tv_tmp;
 
 #if defined (HAVE_GETRUSAGE)
 
   struct rusage ru;
 
   getrusage (RUSAGE_SELF, &ru);
 
-  tv_tmp ["sec"](0) = static_cast<double> (ru.ru_utime.tv_sec);
-  tv_tmp ["usec"](0) = static_cast<double> (ru.ru_utime.tv_usec);
-  m ["utime"](0) = octave_value (tv_tmp);
+  tv_tmp.assign ("sec", static_cast<double> (ru.ru_utime.tv_sec));
+  tv_tmp.assign ("usec", static_cast<double> (ru.ru_utime.tv_usec));
+  m.assign ("utime", octave_value (tv_tmp));
 
-  tv_tmp ["sec"](0) = static_cast<double> (ru.ru_stime.tv_sec);
-  tv_tmp ["usec"](0) = static_cast<double> (ru.ru_stime.tv_usec);
-  m ["stime"](0) = octave_value (tv_tmp);
+  tv_tmp.assign ("sec", static_cast<double> (ru.ru_stime.tv_sec));
+  tv_tmp.assign ("usec", static_cast<double> (ru.ru_stime.tv_usec));
+  m.assign ("stime", octave_value (tv_tmp));
 
 #if ! defined (RUSAGE_TIMES_ONLY)
-  m ["maxrss"](0) = static_cast<double> (ru.ru_maxrss);
-  m ["ixrss"](0) = static_cast<double> (ru.ru_ixrss);
-  m ["idrss"](0) = static_cast<double> (ru.ru_idrss);
-  m ["isrss"](0) = static_cast<double> (ru.ru_isrss);
-  m ["minflt"](0) = static_cast<double> (ru.ru_minflt);
-  m ["majflt"](0) = static_cast<double> (ru.ru_majflt);
-  m ["nswap"](0) = static_cast<double> (ru.ru_nswap);
-  m ["inblock"](0) = static_cast<double> (ru.ru_inblock);
-  m ["oublock"](0) = static_cast<double> (ru.ru_oublock);
-  m ["msgsnd"](0) = static_cast<double> (ru.ru_msgsnd);
-  m ["msgrcv"](0) = static_cast<double> (ru.ru_msgrcv);
-  m ["nsignals"](0) = static_cast<double> (ru.ru_nsignals);
-  m ["nvcsw"](0) = static_cast<double> (ru.ru_nvcsw);
-  m ["nivcsw"](0) = static_cast<double> (ru.ru_nivcsw);
+  m.assign ("maxrss", static_cast<double> (ru.ru_maxrss));
+  m.assign ("ixrss", static_cast<double> (ru.ru_ixrss));
+  m.assign ("idrss", static_cast<double> (ru.ru_idrss));
+  m.assign ("isrss", static_cast<double> (ru.ru_isrss));
+  m.assign ("minflt", static_cast<double> (ru.ru_minflt));
+  m.assign ("majflt", static_cast<double> (ru.ru_majflt));
+  m.assign ("nswap", static_cast<double> (ru.ru_nswap));
+  m.assign ("inblock", static_cast<double> (ru.ru_inblock));
+  m.assign ("oublock", static_cast<double> (ru.ru_oublock));
+  m.assign ("msgsnd", static_cast<double> (ru.ru_msgsnd));
+  m.assign ("msgrcv", static_cast<double> (ru.ru_msgrcv));
+  m.assign ("nsignals", static_cast<double> (ru.ru_nsignals));
+  m.assign ("nvcsw", static_cast<double> (ru.ru_nvcsw));
+  m.assign ("nivcsw", static_cast<double> (ru.ru_nivcsw));
 #endif
 
 #else
 #if defined (HAVE_TIMES) && defined (HAVE_SYS_TIMES_H)
 
   struct tms t;
 
   times (&t);
@@ -173,56 +173,56 @@ elements @code{sec} (seconds) @code{usec
   unsigned long ticks;
   unsigned long seconds;
   unsigned long fraction;
 
   ticks = t.tms_utime + t.tms_cutime;
   fraction = ticks % HZ;
   seconds = ticks / HZ;
 
-  tv_tmp ["sec"](0) = static_cast<double> (seconds);
-  tv_tmp ["usec"](0) = static_cast<double> (fraction * 1e6 / HZ);
-  m ["utime"](0) = octave_value (tv_tmp);
+  tv_tmp.assign ("sec", static_cast<double> (seconds));
+  tv_tmp.assign ("usec", static_cast<double> (fraction * 1e6 / HZ));
+  m.assign ("utime", octave_value (tv_tmp));
 
   ticks = t.tms_stime + t.tms_cstime;
   fraction = ticks % HZ;
   seconds = ticks / HZ;
 
-  tv_tmp ["sec"](0) = static_cast<double> (seconds);
-  tv_tmp ["usec"](0) = static_cast<double> (fraction * 1e6 / HZ);
-  m ["stime"](0) = octave_value (tv_tmp);
+  tv_tmp.assign ("sec", static_cast<double> (seconds));
+  tv_tmp.assign ("usec", static_cast<double> (fraction * 1e6 / HZ));
+  m.assign ("stime", octave_value (tv_tmp));
 
 #else
 
-  tv_tmp ["sec"](0) = 0;
-  tv_tmp ["usec"](0) = 0;
-  m ["utime"](0) = octave_value (tv_tmp);
+  tv_tmp.assign ("sec", 0);
+  tv_tmp.assign ("usec", 0);
+  m.assign ("utime", octave_value (tv_tmp));
 
-  tv_tmp ["sec"](0) = 0;
-  tv_tmp ["usec"](0) = 0;
-  m ["stime"](0) = octave_value (tv_tmp);
+  tv_tmp.assign ("sec", 0);
+  tv_tmp.assign ("usec", 0);
+  m.assign ("stime", octave_value (tv_tmp));
 
 #endif
 
   double tmp = lo_ieee_nan_value ();
 
-  m ["maxrss"](0) = tmp;
-  m ["ixrss"](0) = tmp;
-  m ["idrss"](0) = tmp;
-  m ["isrss"](0) = tmp;
-  m ["minflt"](0) = tmp;
-  m ["majflt"](0) = tmp;
-  m ["nswap"](0) = tmp;
-  m ["inblock"](0) = tmp;
-  m ["oublock"](0) = tmp;
-  m ["msgsnd"](0) = tmp;
-  m ["msgrcv"](0) = tmp;
-  m ["nsignals"](0) = tmp;
-  m ["nvcsw"](0) = tmp;
-  m ["nivcsw"](0) = tmp;
+  m.assign ("maxrss", tmp);
+  m.assign ("ixrss", tmp);
+  m.assign ("idrss", tmp);
+  m.assign ("isrss", tmp);
+  m.assign ("minflt", tmp);
+  m.assign ("majflt", tmp);
+  m.assign ("nswap", tmp);
+  m.assign ("inblock", tmp);
+  m.assign ("oublock", tmp);
+  m.assign ("msgsnd", tmp);
+  m.assign ("msgrcv", tmp);
+  m.assign ("nsignals", tmp);
+  m.assign ("nvcsw", tmp);
+  m.assign ("nivcsw", tmp);
 
 #endif
 
   return octave_value (m);
 }
 
 /*
 ;;; Local Variables: ***
diff --git a/src/DLD-FUNCTIONS/time.cc b/src/DLD-FUNCTIONS/time.cc
--- a/src/DLD-FUNCTIONS/time.cc
+++ b/src/DLD-FUNCTIONS/time.cc
@@ -35,47 +35,47 @@ Software Foundation, 59 Temple Place - S
 
 // Date and time functions.
 
 static Octave_map
 mk_tm_map (const octave_base_tm& t)
 {
   Octave_map m;
 
-  m ["usec"](0) = static_cast<double> (t.usec ());
-  m ["sec"](0) = static_cast<double> (t.sec ());
-  m ["min"](0) = static_cast<double> (t.min ());
-  m ["hour"](0) = static_cast<double> (t.hour ());
-  m ["mday"](0) = static_cast<double> (t.mday ());
-  m ["mon"](0) = static_cast<double> (t.mon ());
-  m ["year"](0) = static_cast<double> (t.year ());
-  m ["wday"](0) = static_cast<double> (t.wday ());
-  m ["yday"](0) = static_cast<double> (t.yday ());
-  m ["isdst"](0) = static_cast<double> (t.isdst ());
-  m ["zone"](0) = t.zone ();
+  m.assign ("usec", static_cast<double> (t.usec ()));
+  m.assign ("sec", static_cast<double> (t.sec ()));
+  m.assign ("min", static_cast<double> (t.min ()));
+  m.assign ("hour", static_cast<double> (t.hour ()));
+  m.assign ("mday", static_cast<double> (t.mday ()));
+  m.assign ("mon", static_cast<double> (t.mon ()));
+  m.assign ("year", static_cast<double> (t.year ()));
+  m.assign ("wday", static_cast<double> (t.wday ()));
+  m.assign ("yday", static_cast<double> (t.yday ()));
+  m.assign ("isdst", static_cast<double> (t.isdst ()));
+  m.assign ("zone", t.zone ());
 
   return m;
 }
 
 static octave_base_tm
 extract_tm (Octave_map &m)
 {
   octave_base_tm tm;
 
-  tm.usec (m ["usec"](0) . int_value ());
-  tm.sec (m ["sec"](0) . int_value ());
-  tm.min (m ["min"](0) . int_value ());
-  tm.hour (m ["hour"](0) . int_value ());
-  tm.mday (m ["mday"](0) . int_value ());
-  tm.mon (m ["mon"](0) . int_value ());
-  tm.year (m ["year"](0) . int_value ());
-  tm.wday (m ["wday"](0) . int_value ());
-  tm.yday (m ["yday"](0) . int_value ());
-  tm.isdst (m ["isdst"](0) . int_value ());
-  tm.zone (m ["zone"](0) . string_value ());
+  tm.usec (m.contents ("usec")(0) . int_value ());
+  tm.sec (m.contents ("sec")(0) . int_value ());
+  tm.min (m.contents ("min")(0) . int_value ());
+  tm.hour (m.contents ("hour")(0) . int_value ());
+  tm.mday (m.contents ("mday")(0) . int_value ());
+  tm.mon (m.contents ("mon")(0) . int_value ());
+  tm.year (m.contents ("year")(0) . int_value ());
+  tm.wday (m.contents ("wday")(0) . int_value ());
+  tm.yday (m.contents ("yday")(0) . int_value ());
+  tm.isdst (m.contents ("isdst")(0) . int_value ());
+  tm.zone (m.contents ("zone")(0) . string_value ());
 
   return tm;
 }
 
 DEFUN_DLD (time, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} time ()\n\
 Return the current time as the number of seconds since the epoch.  The\n\
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -466,17 +466,17 @@ do_load (std::istream& stream, const std
 		    }
 		  else
 		    {
 		      if (nargout == 1)
 			{
 			  if (format == LS_MAT_ASCII)
 			    retval = tc;
 			  else
-			    retstruct[name] = tc;
+			    retstruct.assign (name, tc);
 			}
 		      else
 			install_loaded_variable (force, name, tc, global, doc);
 		    }
 		}
 
 	      // Only attempt to read one item from a headless text file.
 
diff --git a/src/ls-hdf5.cc b/src/ls-hdf5.cc
--- a/src/ls-hdf5.cc
+++ b/src/ls-hdf5.cc
@@ -710,19 +710,19 @@ hdf5_read_next_data (hid_t group_id, con
 	{
 	  if (is_list)
 	    lst.append (dsub.tc);
 	  else
 	    {
 	      octave_value ov = dsub.tc;
 
 	      if (ov.is_list ())
-		m [dsub.name] = ov.list_value ();
+		m.assign (dsub.name, octave_value (ov.list_value ()));
 	      else
-		m [dsub.name] = ov;
+		m.assign (dsub.name, ov);
 	    }
 
 	  if (have_h5giterate_bug)
 	    current_item++;  // H5Giterate returned the last index processed
 	}
 
       if (retval2 < 0)
 	retval = retval2;
@@ -1160,18 +1160,18 @@ add_hdf5_data (hid_t loc_id, const octav
       // an Octave structure
       data_id = H5Gcreate (loc_id, name.c_str (), 0);
       if (data_id < 0)
 	goto error_cleanup;
 
       data_is_group = 1;
 
       // recursively add each element of the structure to this group
-      Octave_map m = tc.map_value ();
-      Octave_map::iterator i = m.begin ();
+      const Octave_map m = tc.map_value ();
+      Octave_map::const_iterator i = m.begin ();
       while (i != m.end ())
 	{
 	  // XXX FIXME XXX -- if the length of the structure array is
 	  // 1, should we really create a list object?
 	  bool retval2 = add_hdf5_data (data_id, octave_value (m.contents (i)),
 					m.key (i), "", false, save_as_floats);
 	  if (! retval2)
 	    goto error_cleanup;
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -420,18 +420,22 @@ read_mat5_binary_element (std::istream& 
 		field_elts(i,j) = fieldtc;
 	      }
 	  }
 
 	for (int j = n_fields-1; j >= 0; j--)
 	  {
 	    const char *key = elname + j*field_name_length;
 
+	    Cell c (dim_vector (n, 1));
+
 	    for (int k = n-1; k >=0; k--)
-	      m[key](k) = field_elts(j,k);
+	      c(k) = field_elts(j,k);
+
+	    m.assign (key, c);
 	  }
 
 	tc = m;
       }
       break;
 
     case mxCHAR_CLASS:
       // handle as a numerical array to start with
@@ -846,42 +850,42 @@ save_mat5_binary_element (std::ostream& 
 
       write_mat5_array (os, ::real (m_cmplx), save_as_floats);
       write_mat5_array (os, ::imag (m_cmplx), save_as_floats);
     }
   else if (tc.is_map ()) 
     {
       // an Octave structure */
       // recursively write each element of the structure
-      Octave_map m = tc.map_value ();
+      const Octave_map m = tc.map_value ();
 
       {
 	char buf[32];
 	FOUR_BYTE_INT maxfieldnamelength = 32;
 	int fieldcnt = 0;
 
-	for (Octave_map::iterator i = m.begin (); i != m.end (); i++)
+	for (Octave_map::const_iterator i = m.begin (); i != m.end (); i++)
 	  fieldcnt++;
 
 	write_mat5_tag (os, miINT32, 4);
 	os.write ((char *)&maxfieldnamelength, 4);
 	write_mat5_tag (os, miINT8, fieldcnt*32);
 
-	for (Octave_map::iterator i = m.begin (); i != m.end (); i++)
+	for (Octave_map::const_iterator i = m.begin (); i != m.end (); i++)
 	  {
 	    // write the name of each element
 	    std::string tstr = m.key (i);
 	    memset (buf, 0, 32);
 	    strncpy (buf, tstr.c_str (), 31); // only 31 char names permitted
 	    os.write (buf, 32);
 	  }
 
 	int len = m.numel ();
 
-	for (Octave_map::iterator i = m.begin (); i != m.end (); i++)
+	for (Octave_map::const_iterator i = m.begin (); i != m.end (); i++)
 	  {
 	    // write the data of each element
 	    Cell elts = m.contents (i);
 
 	    for (int j = 0; j < len; j++)
 	      {
 		bool retval2 = save_mat5_binary_element (os, elts(j), "",
 							 mark_as_global,
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -30,17 +30,17 @@ Software Foundation, 59 Temple Place - S
 
 #include "error.h"
 #include "str-vec.h"
 
 #include "oct-map.h"
 #include "utils.h"
 
 Cell
-Octave_map::operator [] (const std::string& k) const
+Octave_map::contents (const std::string& k) const
 {
   const_iterator p = seek (k);
 
   return p != end () ? p->second : Cell ();
 }
 
 string_vector
 Octave_map::keys (void) const
@@ -59,17 +59,17 @@ Octave_map::keys (void) const
 Octave_map
 Octave_map::reshape (const dim_vector& new_dims) const
 {
   Octave_map retval;
 
   if (new_dims != dims ())
     {
       for (const_iterator p = begin (); p != end (); p++)
-	retval[key(p)] = contents(p).reshape (new_dims);
+	retval.assign (key(p), contents(p).reshape (new_dims));
 
       dimensions = new_dims;
     }
 
   return retval;
 }
 
 int
@@ -121,17 +121,17 @@ Octave_map::assign (const octave_value_l
   if (! t_keys.empty ())
     {
       int len = t_keys.length ();
 
       for (int i = 0; i < len; i++)
 	{
 	  std::string k = t_keys[i];
 
-	  Cell t_rhs = rhs[k];
+	  Cell t_rhs = rhs.contents (k);
 
 	  assign (idx, k, t_rhs);
 
 	  if (error_state)
 	    break;
 	}
     }
   else
@@ -202,16 +202,38 @@ Octave_map::assign (const octave_value_l
 
       map[k] = tmp;
     }
 
   return *this;
 }
 
 Octave_map&
+Octave_map::assign (const std::string& k, const octave_value& rhs)
+{
+  if (empty ())
+    {
+      map[k] = Cell (rhs);
+
+      dimensions = dim_vector (1, 1);
+    }
+  else
+    {
+      dim_vector dv = dims ();
+
+      if (dv.all_ones ())
+	map[k] = Cell (rhs);
+      else
+	error ("invalid structure assignment");
+    }
+
+  return *this;
+}
+
+Octave_map&
 Octave_map::assign (const std::string& k, const Cell& rhs)
 {
   if (empty ())
     {
       map[k] = rhs;
 
       dimensions = dim_vector (1, 1);
     }
@@ -233,17 +255,17 @@ Octave_map::index (const octave_value_li
 
   for (iterator p = begin (); p != end (); p++)
     {
       Cell tmp = contents(p).index (idx);
 
       if (error_state)
 	break;
 
-      retval[key(p)] = tmp;
+      retval.assign (key(p), tmp);
     }
 
   return error_state ? Octave_map () : retval;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -71,40 +71,35 @@ Octave_map
 
   ~Octave_map (void) { }
 
   // This is the number of keys.
   int length (void) const { return map.size (); }
 
   int empty (void) const { return map.empty (); }
 
-  Cell& operator [] (const std::string& k) { return map[k]; }
-
-  Cell operator [] (const std::string& k) const;
-
   void del (const std::string& k)
     {
       iterator p = map.find (k);
       if (p != map.end ())
 	map.erase (p);
     }
 
   iterator begin (void) { return iterator (map.begin ()); }
   const_iterator begin (void) const { return const_iterator (map.begin ()); }
 
   iterator end (void) { return iterator (map.end ()); }
   const_iterator end (void) const { return const_iterator (map.end ()); }
 
   std::string key (const_iterator p) const { return p->first; }
 
-  Cell& contents (const_iterator p)
-    { return operator [] (key(p)); }
+  Cell contents (const std::string& k) const;
 
   Cell contents (const_iterator p) const
-    { return operator [] (key(p)); }
+    { return contents (key(p)); }
 
   const_iterator seek (const std::string& k) const { return map.find (k); }
 
   int contains (const std::string& k) const
     { return (seek (k) != map.end ()); }
 
   void clear (void) { map.clear (); }
 
@@ -120,16 +115,18 @@ Octave_map
 
   int numel (void) const;
 
   Octave_map& assign (const octave_value_list& idx, const Octave_map& rhs);
 
   Octave_map& assign (const octave_value_list& idx, const std::string& k,
 		      const Cell& rhs);
 
+  Octave_map& assign (const std::string& k, const octave_value& rhs);
+
   Octave_map& assign (const std::string& k, const Cell& rhs);
 
   Octave_map index (const octave_value_list& idx);
 
 private:
 
   // The map of names to values.
   std::map<std::string, Cell> map;
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -189,29 +189,29 @@ Return a struct containing information a
 	  octave_function *fcn = fh ? fh->function_value (true) : 0;
 
 	  if (fcn)
 	    {
 	      Octave_map m;
 
 	      std::string fh_nm = fh->name ();
 
-	      m ["function"](0) = fh_nm.substr (1);
+	      m.assign ("function", fh_nm.substr (1));
 
 	      if (fcn->is_nested_function ())
-		m ["type"](0) = "subfunction";
+		m.assign ("type", "subfunction");
 	      else
-		m ["type"](0) = "simple";
+		m.assign ("type", "simple");
 
 	      std::string nm = fcn->fcn_file_name ();
 
 	      if (nm.empty ())
-		m ["file"](0) = "built-in function";
+		m.assign ("file", "built-in function");
 	      else
-		m ["file"](0) = nm;
+		m.assign ("file", nm);
 
 	      retval = m;
 	    }
 	  else
 	    error ("functions: invalid function handle object");
 	}
       else
 	error ("functions: argument must be a function handle object");
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -195,17 +195,17 @@ octave_struct::subsasgn (const std::stri
 		std::string key = key_idx(0).string_value ();
 
 		octave_value u;
 
 		if (! map.contains (key))
 		  u = octave_value::empty_conv (type.substr (2), rhs);
 		else
 		  {
-		    Cell map_val = map[key];
+		    Cell map_val = map.contents (key);
 
 		    Cell map_elt = map_val.index (idx.front (), true);
 
 		    u = numeric_conv (map_elt, type.substr (2));
 		  }
 
 		if (! error_state)
 		  {
@@ -236,17 +236,17 @@ octave_struct::subsasgn (const std::stri
 	    std::string key = key_idx(0).string_value ();
 
 	    octave_value u;
 
 	    if (! map.contains (key))
 	      u = octave_value::empty_conv (type.substr (1), rhs);
 	    else
 	      {
-		Cell map_val = map[key];
+		Cell map_val = map.contents (key);
 
 		u = numeric_conv (map_val, type.substr (1));
 	      }
 
 	    if (! error_state)
 	      {
 		std::list<octave_value_list> next_idx (idx);
 
diff --git a/src/pt-idx.cc b/src/pt-idx.cc
--- a/src/pt-idx.cc
+++ b/src/pt-idx.cc
@@ -197,16 +197,17 @@ tree_index_expression::get_struct_index
   return fn;
 }
 
 Octave_map
 tree_index_expression::make_arg_struct (void) const
 {
   int n = args.size ();
 
+  // XXX FIXME XXX -- why not just make these Cell objects?
   octave_value_list subs_list (n, octave_value ());
   octave_value_list type_list (n, octave_value ());
 
   std::list<tree_argument_list *>::const_iterator p_args = args.begin ();
   std::list<string_vector>::const_iterator p_arg_nm = arg_nm.begin ();
   std::list<tree_expression *>::const_iterator p_dyn_field = dyn_field.begin ();
 
   Octave_map m;
@@ -239,18 +240,18 @@ tree_index_expression::make_arg_struct (
       if (error_state)
 	return m;
 
       p_args++;
       p_arg_nm++;
       p_dyn_field++;
     }
 
-  m ["subs"] = subs_list;
-  m ["type"] = type_list;
+  m.assign ("subs", Cell (subs_list));
+  m.assign ("type", Cell (type_list));
 
   return m;
 }
 
 octave_value_list
 tree_index_expression::rvalue (int nargout)
 {
   octave_value_list retval;
diff --git a/src/sighandlers.cc b/src/sighandlers.cc
--- a/src/sighandlers.cc
+++ b/src/sighandlers.cc
@@ -541,153 +541,153 @@ install_signal_handlers (void)
 }
 
 static Octave_map
 make_sig_struct (void)
 {
   Octave_map m;
 
 #ifdef SIGABRT
-  m ["ABRT"](0) = SIGABRT;
+  m.assign ("ABRT", SIGABRT);
 #endif
 
 #ifdef SIGALRM
-  m ["ALRM"](0) = SIGALRM;
+  m.assign ("ALRM", SIGALRM);
 #endif
 
 #ifdef SIGBUS
-  m ["BUS"](0) = SIGBUS;
+  m.assign ("BUS", SIGBUS);
 #endif
 
 #ifdef SIGCHLD
-  m ["CHLD"](0) = SIGCHLD;
+  m.assign ("CHLD", SIGCHLD);
 #endif
 
 #ifdef SIGCLD
-  m ["CLD"](0) = SIGCLD;
+  m.assign ("CLD", SIGCLD);
 #endif
 
 #ifdef SIGCONT
-  m ["CONT"](0) = SIGCONT;
+  m.assign ("CONT", SIGCONT);
 #endif
 
 #ifdef SIGEMT
-  m ["EMT"](0) = SIGEMT;
+  m.assign ("EMT", SIGEMT);
 #endif
 
 #ifdef SIGFPE
-  m ["FPE"](0) = SIGFPE;
+  m.assign ("FPE", SIGFPE);
 #endif
 
 #ifdef SIGHUP
-  m ["HUP"](0) = SIGHUP;
+  m.assign ("HUP", SIGHUP);
 #endif
 
 #ifdef SIGILL
-  m ["ILL"](0) = SIGILL;
+  m.assign ("ILL", SIGILL);
 #endif
 
 #ifdef SIGINFO
-  m ["INFO"](0) = SIGINFO;
+  m.assign ("INFO", SIGINFO);
 #endif
 
 #ifdef SIGINT
-  m ["INT"](0) = SIGINT;
+  m.assign ("INT", SIGINT);
 #endif
 
 #ifdef SIGIOT
-  m ["IOT"](0) = SIGIOT;
+  m.assign ("IOT", SIGIOT);
 #endif
 
 #ifdef SIGLOST
-  m ["LOST"](0) = SIGLOST;
+  m.assign ("LOST", SIGLOST);
 #endif
 
 #ifdef SIGPIPE
-  m ["PIPE"](0) = SIGPIPE;
+  m.assign ("PIPE", SIGPIPE);
 #endif
 
 #ifdef SIGPOLL
-  m ["POLL"](0) = SIGPOLL;
+  m.assign ("POLL", SIGPOLL);
 #endif
 
 #ifdef SIGPROF
-  m ["PROF"](0) = SIGPROF;
+  m.assign ("PROF", SIGPROF);
 #endif
 
 #ifdef SIGPWR
-  m ["PWR"](0) = SIGPWR;
+  m.assign ("PWR", SIGPWR);
 #endif
 
 #ifdef SIGQUIT
-  m ["QUIT"](0) = SIGQUIT;
+  m.assign ("QUIT", SIGQUIT);
 #endif
 
 #ifdef SIGSEGV
-  m ["SEGV"](0) = SIGSEGV;
+  m.assign ("SEGV", SIGSEGV);
 #endif
 
 #ifdef SIGSTOP
-  m ["STOP"](0) = SIGSTOP;
+  m.assign ("STOP", SIGSTOP);
 #endif
 
 #ifdef SIGSYS
-  m ["SYS"](0) = SIGSYS;
+  m.assign ("SYS", SIGSYS);
 #endif
 
 #ifdef SIGTERM
-  m ["TERM"](0) = SIGTERM;
+  m.assign ("TERM", SIGTERM);
 #endif
 
 #ifdef SIGTRAP
-  m ["TRAP"](0) = SIGTRAP;
+  m.assign ("TRAP", SIGTRAP);
 #endif
 
 #ifdef SIGTSTP
-  m ["TSTP"](0) = SIGTSTP;
+  m.assign ("TSTP", SIGTSTP);
 #endif
 
 #ifdef SIGTTIN
-  m ["TTIN"](0) = SIGTTIN;
+  m.assign ("TTIN", SIGTTIN);
 #endif
 
 #ifdef SIGTTOU
-  m ["TTOU"](0) = SIGTTOU;
+  m.assign ("TTOU", SIGTTOU);
 #endif
 
 #ifdef SIGURG
-  m ["URG"](0) = SIGURG;
+  m.assign ("URG", SIGURG);
 #endif
 
 #ifdef SIGUSR1
-  m ["USR1"](0) = SIGUSR1;
+  m.assign ("USR1", SIGUSR1);
 #endif
 
 #ifdef SIGUSR2
-  m ["USR2"](0) = SIGUSR2;
+  m.assign ("USR2", SIGUSR2);
 #endif
 
 #ifdef SIGVTALRM
-  m ["VTALRM"](0) = SIGVTALRM;
+  m.assign ("VTALRM", SIGVTALRM);
 #endif
 
 #ifdef SIGIO
-  m ["IO"](0) = SIGIO;
+  m.assign ("IO", SIGIO);
 #endif
 
 #ifdef SIGWINCH
-  m ["WINCH"](0) = SIGWINCH;
+  m.assign ("WINCH", SIGWINCH);
 #endif
 
 #ifdef SIGXCPU
-  m ["XCPU"](0) = SIGXCPU;
+  m.assign ("XCPU", SIGXCPU);
 #endif
 
 #ifdef SIGXFSZ
-  m ["XFSZ"](0) = SIGXFSZ;
+  m.assign ("XFSZ", SIGXFSZ);
 #endif
 
   return m;
 }
 
 octave_child_list *octave_child_list::instance = 0;
 
 bool
diff --git a/src/syscalls.cc b/src/syscalls.cc
--- a/src/syscalls.cc
+++ b/src/syscalls.cc
@@ -60,34 +60,34 @@ Software Foundation, 59 Temple Place - S
 #include "utils.h"
 #include "variables.h"
 
 static Octave_map
 mk_stat_map (const file_stat& fs)
 {
   Octave_map m;
 
-  m["dev"](0) = static_cast<double> (fs.dev ());
-  m["ino"](0) = fs.ino ();
-  m["modestr"](0) = fs.mode_as_string ();
-  m["nlink"](0) = fs.nlink ();
-  m["uid"](0) = fs.uid ();
-  m["gid"](0) = fs.gid ();
+  m.assign ("dev", static_cast<double> (fs.dev ()));
+  m.assign ("ino", fs.ino ());
+  m.assign ("modestr", fs.mode_as_string ());
+  m.assign ("nlink", fs.nlink ());
+  m.assign ("uid", fs.uid ());
+  m.assign ("gid", fs.gid ());
 #if defined (HAVE_STRUCT_STAT_ST_RDEV)
-  m["rdev"](0) = static_cast<double> (fs.rdev ());
+  m.assign ("rdev", static_cast<double> (fs.rdev ()));
 #endif
-  m["size"](0) = fs.size ();
-  m["atime"](0) = fs.atime ();
-  m["mtime"](0) = fs.mtime ();
-  m["ctime"](0) = fs.ctime ();
+  m.assign ("size", fs.size ());
+  m.assign ("atime", fs.atime ());
+  m.assign ("mtime", fs.mtime ());
+  m.assign ("ctime", fs.ctime ());
 #if defined (HAVE_STRUCT_STAT_ST_BLKSIZE)
-  m["blksize"](0) = fs.blksize ();
+  m.assign ("blksize", fs.blksize ());
 #endif
 #if defined (HAVE_STRUCT_STAT_ST_BLOCKS)
-  m["blocks"](0) = fs.blocks ();
+  m.assign ("blocks", fs.blocks ());
 #endif
 
   return m;
 }
 
 DEFUN (dup2, args, ,
  "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {[@var{fid}, @var{msg}] =} dup2 (@var{old}, @var{new})\n\
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -665,20 +665,16 @@ specified option.\n\
   octave_value retval;
 
 #if defined (ENABLE_DYNAMIC_LINKING)
   bool octave_supports_dynamic_linking = true;
 #else
   bool octave_supports_dynamic_linking = false;
 #endif
 
-  // We do it this way instead of using a series of "m[KEY](0) = VAL"
-  // statements to avoid problems with gcc 2.96 (and possibly other
-  // compilers) that can't handle a long series of lines like that.
-
   static bool initialized = false;
   static Octave_map m;
 
   static const char * const conf_info[] =
     {
       "ALL_CFLAGS", OCTAVE_CONF_ALL_CFLAGS,
       "ALL_CXXFLAGS", OCTAVE_CONF_ALL_CXXFLAGS,
       "ALL_FFLAGS", OCTAVE_CONF_ALL_FFLAGS,
@@ -781,41 +777,44 @@ specified option.\n\
       "prefix", OCTAVE_PREFIX,
       "startupfiledir", OCTAVE_STARTUPFILEDIR,
       "version", OCTAVE_VERSION,
       0, 0
     };
 
   if (! initialized)
     {
-      m ["dld"](0) = octave_value (octave_supports_dynamic_linking);
+      m.assign ("dld", octave_value (octave_supports_dynamic_linking));
 
       int i = 0;
 
       while (true)
 	{
 	  const char *key = conf_info[i++];
 
 	  if (key)
-	    m [key](0) = octave_value (conf_info[i++]);
+	    m.assign (key, octave_value (conf_info[i++]));
 	  else
 	    break;
 	}
 
       initialized = true;
     }
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       std::string arg = args(0).string_value ();
 
       if (! error_state)
-	retval = m [arg.c_str ()](0);
+	{
+	  Cell c = m.contents (arg.c_str ());
+	  retval = c(0);
+	}
     }
   else if (nargin == 0)
     retval = m;
   else
     print_usage ("octave_config_info");
 
   return retval;
 }
