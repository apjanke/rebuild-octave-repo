# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1482805683 18000
#      Mon Dec 26 21:28:03 2016 -0500
# Node ID 7c9492d3b42135df89a60bea342b578ddc66d15b
# Parent  2e6a327e7903c3fd946314d8d053c1c80ce2f98b
use F77_INT instead of octave_idx_type for liboctave GEPBALANCE functions

* gepbalance.cc: Use F77_INT instead of octave_idx_type for integer
data passed to Fortran subroutines.

diff --git a/liboctave/numeric/gepbalance.cc b/liboctave/numeric/gepbalance.cc
--- a/liboctave/numeric/gepbalance.cc
+++ b/liboctave/numeric/gepbalance.cc
@@ -40,27 +40,27 @@ namespace octave
 {
   namespace math
   {
     template <>
     octave_idx_type
     gepbalance<Matrix>::init (const Matrix& a, const Matrix& b,
                               const std::string& balance_job)
     {
-      octave_idx_type n = a.cols ();
+      F77_INT n = to_f77_int (a.cols ());
 
       if (a.rows () != n)
         (*current_liboctave_error_handler) ("GEPBALANCE requires square matrix");
 
       if (a.dims () != b.dims ())
         octave::err_nonconformant ("GEPBALANCE", n, n, b.rows(), b.cols());
 
-      octave_idx_type info;
-      octave_idx_type ilo;
-      octave_idx_type ihi;
+      F77_INT info;
+      F77_INT ilo;
+      F77_INT ihi;
 
       OCTAVE_LOCAL_BUFFER (double, plscale, n);
       OCTAVE_LOCAL_BUFFER (double, prscale, n);
       OCTAVE_LOCAL_BUFFER (double, pwork, 6 * n);
 
       balanced_mat = a;
       double *p_balanced_mat = balanced_mat.fortran_vec ();
       balanced_mat2 = b;
@@ -70,17 +70,17 @@ namespace octave
 
       F77_XFCN (dggbal, DGGBAL, (F77_CONST_CHAR_ARG2 (&job, 1),
                                  n, p_balanced_mat, n, p_balanced_mat2,
                                  n, ilo, ihi, plscale, prscale, pwork, info
                                  F77_CHAR_ARG_LEN  (1)));
 
       balancing_mat = Matrix (n, n, 0.0);
       balancing_mat2 = Matrix (n, n, 0.0);
-      for (octave_idx_type i = 0; i < n; i++)
+      for (F77_INT i = 0; i < n; i++)
         {
           octave_quit ();
           balancing_mat.elem (i ,i) = 1.0;
           balancing_mat2.elem (i ,i) = 1.0;
         }
 
       double *p_balancing_mat = balancing_mat.fortran_vec ();
       double *p_balancing_mat2 = balancing_mat2.fortran_vec ();
@@ -104,28 +104,28 @@ namespace octave
       return info;
     }
 
     template <>
     octave_idx_type
     gepbalance<FloatMatrix>::init (const FloatMatrix& a, const FloatMatrix& b,
                                    const std::string& balance_job)
     {
-      octave_idx_type n = a.cols ();
+      F77_INT n = to_f77_int (a.cols ());
 
       if (a.rows () != n)
         (*current_liboctave_error_handler)
           ("FloatGEPBALANCE requires square matrix");
 
       if (a.dims () != b.dims ())
         octave::err_nonconformant ("FloatGEPBALANCE", n, n, b.rows(), b.cols());
 
-      octave_idx_type info;
-      octave_idx_type ilo;
-      octave_idx_type ihi;
+      F77_INT info;
+      F77_INT ilo;
+      F77_INT ihi;
 
       OCTAVE_LOCAL_BUFFER (float, plscale, n);
       OCTAVE_LOCAL_BUFFER (float, prscale, n);
       OCTAVE_LOCAL_BUFFER (float, pwork, 6 * n);
 
       balanced_mat = a;
       float *p_balanced_mat = balanced_mat.fortran_vec ();
       balanced_mat2 = b;
@@ -135,17 +135,17 @@ namespace octave
 
       F77_XFCN (sggbal, SGGBAL, (F77_CONST_CHAR_ARG2 (&job, 1),
                                  n, p_balanced_mat, n, p_balanced_mat2,
                                  n, ilo, ihi, plscale, prscale, pwork, info
                                  F77_CHAR_ARG_LEN  (1)));
 
       balancing_mat = FloatMatrix (n, n, 0.0);
       balancing_mat2 = FloatMatrix (n, n, 0.0);
-      for (octave_idx_type i = 0; i < n; i++)
+      for (F77_INT i = 0; i < n; i++)
         {
           octave_quit ();
           balancing_mat.elem (i ,i) = 1.0;
           balancing_mat2.elem (i ,i) = 1.0;
         }
 
       float *p_balancing_mat = balancing_mat.fortran_vec ();
       float *p_balancing_mat2 = balancing_mat2.fortran_vec ();
@@ -170,28 +170,28 @@ namespace octave
     }
 
     template <>
     octave_idx_type
     gepbalance<ComplexMatrix>::init (const ComplexMatrix& a,
                                      const ComplexMatrix& b,
                                      const std::string& balance_job)
     {
-      octave_idx_type n = a.cols ();
+      F77_INT n = to_f77_int (a.cols ());
 
       if (a.rows () != n)
         (*current_liboctave_error_handler)
           ("ComplexGEPBALANCE requires square matrix");
 
       if (a.dims () != b.dims ())
         octave::err_nonconformant ("ComplexGEPBALANCE", n, n, b.rows(), b.cols());
 
-      octave_idx_type info;
-      octave_idx_type ilo;
-      octave_idx_type ihi;
+      F77_INT info;
+      F77_INT ilo;
+      F77_INT ihi;
 
       OCTAVE_LOCAL_BUFFER (double, plscale, n);
       OCTAVE_LOCAL_BUFFER (double, prscale,  n);
       OCTAVE_LOCAL_BUFFER (double, pwork, 6 * n);
 
       balanced_mat = a;
       Complex *p_balanced_mat = balanced_mat.fortran_vec ();
       balanced_mat2 = b;
@@ -201,17 +201,17 @@ namespace octave
 
       F77_XFCN (zggbal, ZGGBAL, (F77_CONST_CHAR_ARG2 (&job, 1),
                                  n, F77_DBLE_CMPLX_ARG (p_balanced_mat), n, F77_DBLE_CMPLX_ARG (p_balanced_mat2),
                                  n, ilo, ihi, plscale, prscale, pwork, info
                                  F77_CHAR_ARG_LEN (1)));
 
       balancing_mat = Matrix (n, n, 0.0);
       balancing_mat2 = Matrix (n, n, 0.0);
-      for (octave_idx_type i = 0; i < n; i++)
+      for (F77_INT i = 0; i < n; i++)
         {
           octave_quit ();
           balancing_mat.elem (i ,i) = 1.0;
           balancing_mat2.elem (i ,i) = 1.0;
         }
 
       double *p_balancing_mat = balancing_mat.fortran_vec ();
       double *p_balancing_mat2 = balancing_mat2.fortran_vec ();
@@ -236,31 +236,31 @@ namespace octave
     }
 
     template <>
     octave_idx_type
     gepbalance<FloatComplexMatrix>::init (const FloatComplexMatrix& a,
                                           const FloatComplexMatrix& b,
                                           const std::string& balance_job)
     {
-      octave_idx_type n = a.cols ();
+      F77_INT n = to_f77_int (a.cols ());
 
       if (a.rows () != n)
         {
           (*current_liboctave_error_handler)
             ("FloatComplexGEPBALANCE requires square matrix");
           return -1;
         }
 
       if (a.dims () != b.dims ())
         octave::err_nonconformant ("FloatComplexGEPBALANCE", n, n, b.rows(), b.cols());
 
-      octave_idx_type info;
-      octave_idx_type ilo;
-      octave_idx_type ihi;
+      F77_INT info;
+      F77_INT ilo;
+      F77_INT ihi;
 
       OCTAVE_LOCAL_BUFFER (float, plscale, n);
       OCTAVE_LOCAL_BUFFER (float, prscale, n);
       OCTAVE_LOCAL_BUFFER (float, pwork, 6 * n);
 
       balanced_mat = a;
       FloatComplex *p_balanced_mat = balanced_mat.fortran_vec ();
       balanced_mat2 = b;
@@ -270,17 +270,17 @@ namespace octave
 
       F77_XFCN (cggbal, CGGBAL, (F77_CONST_CHAR_ARG2 (&job, 1),
                                  n, F77_CMPLX_ARG (p_balanced_mat), n, F77_CMPLX_ARG (p_balanced_mat2),
                                  n, ilo, ihi, plscale, prscale, pwork, info
                                  F77_CHAR_ARG_LEN (1)));
 
       balancing_mat = FloatMatrix (n, n, 0.0);
       balancing_mat2 = FloatMatrix (n, n, 0.0);
-      for (octave_idx_type i = 0; i < n; i++)
+      for (F77_INT i = 0; i < n; i++)
         {
           octave_quit ();
           balancing_mat.elem (i ,i) = 1.0;
           balancing_mat2.elem (i ,i) = 1.0;
         }
 
       float *p_balancing_mat = balancing_mat.fortran_vec ();
       float *p_balancing_mat2 = balancing_mat2.fortran_vec ();
