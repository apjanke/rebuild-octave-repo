# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1443015094 -7200
#      Wed Sep 23 15:31:34 2015 +0200
# Node ID 315b7d51d6c86e14e407913aaacb73bea1d81324
# Parent  cd4a8b4631da8b065a61256af94f6d11f4abd5c6
randi.m: Display warnings in case of range exceedings.

diff --git a/scripts/general/randi.m b/scripts/general/randi.m
--- a/scripts/general/randi.m
+++ b/scripts/general/randi.m
@@ -56,53 +56,68 @@
 function ri = randi (bounds, varargin)
 
   if (nargin < 1)
     print_usage ();
   endif
   nargoutchk (0, 1);
 
   if (! (isnumeric (bounds) && all (bounds == fix (bounds))))
-    error ("randi: IMIN and IMAX must be integer bounds");
+    error ("randi: IMIN and IMAX must be integer bounds.");
   endif
 
   bounds = real (double (bounds));
   if (isscalar (bounds))
     imin = 1;
     imax = bounds;
     if (imax < 1)
-      error ("randi: require IMAX >= 1");
+      error ("randi: require IMAX >= 1.");
     endif
   else
     imin = bounds(1);
     imax = bounds(2);
     if (imax < imin)
-      error ("randi: require IMIN <= IMAX");
+      error ("randi: require IMIN <= IMAX.");
     endif
   endif
 
   if (nargin > 1 && ischar (varargin{end}))
     rclass = varargin{end};
     varargin(end) = [];
   else
     rclass = "double";
   endif
 
   ## Limit set by use of class double in rand()
   if (imax >= flintmax ())
-    error ("randi: maximum integer IMAX must be smaller than flintmax ()");
+    error ("randi: maximum integer IMAX must be smaller than flintmax ().");
   endif
   if ((imax - imin) >= flintmax ())
-    error ("randi: maximum integer range must be smaller than flintmax ()");
+    error ("randi: maximum integer range must be smaller than flintmax ().");
   endif
 
 
   ri = imin + floor ( (imax-imin+1)*rand (varargin{:}) );
 
   if (! strcmp (rclass, "double"))
+    if (strfind (rclass, "int"))
+      maxval = intmax (rclass);
+      minval = intmin (rclass);
+    elseif (strcmp (rclass, "single"))
+      maxval = flintmax (rclass);
+      minval = -maxval;
+    endif
+    if ((imax >= maxval) || ((imax - imin) >= maxval))
+      warning (["randi: maximum integer IMAX or range exceeds requested ", ...
+        "type.  Values might be truncated to requested type."]);
+    endif
+    if (imin < minval)
+      warning (["randi: minimum integer IMIN exceeds requested type.  ", ...
+        "Values might be truncated to requested type."]);
+    endif
     ri = cast (ri, rclass);
   endif
 
 endfunction
 
 
 %!test
 %! ri = randi (10, 1000, 1);
@@ -122,30 +137,42 @@ endfunction
 %! assert (class (ri), "double");
 %!test
 %! ri = randi ([-5, 10], 1000, 1, "int8");
 %! assert (ri, fix (ri));
 %! assert (min (ri), int8 (-5));
 %! assert (max (ri), int8 (10));
 %! assert (class (ri), "int8");
 %!test
-%! ri = randi ([-5, 10], 1000, 1, "uint8");
-%! assert (ri, fix (ri));
-%! assert (min (ri), uint8 (-5));
-%! assert (max (ri), uint8 (10));
-%! assert (class (ri), "uint8");
-%!test
 %! ri = randi ([-5; 10], 1000, 1, "single");
 %! assert (ri, fix (ri));
 %! assert (min (ri), single (-5));
 %! assert (max (ri), single (10));
 %! assert (class (ri), "single");
 %!
 %!assert (size (randi (10, 3,1,2)), [3, 1, 2])
 
+## Test range exceedings
+%!warning <exceeds requested type>
+%! ri = randi ([-5, 10], 1000, 1, "uint8");
+%! assert (ri, fix (ri));
+%! assert (min (ri), uint8 (-5));
+%! assert (max (ri), uint8 (10));
+%! assert (class (ri), "uint8");
+%!warning <exceeds requested type> randi (intmax("int8"), 10, 1, "int8");
+%!warning <exceeds requested type> randi (flintmax("single"), 10, 1, "single");
+%!warning <exceeds requested type>
+%! randi ([-1, intmax("int8") - 1], 10, 1, "int8");
+%!warning <exceeds requested type>
+%! randi ([-1, flintmax("single") - 1], 10, 1, "single");
+%!warning <exceeds requested type>
+%! randi ([-flintmax("single"), 0], 10, 1, "single");
+%!warning <exceeds requested type>
+%! randi ([-flintmax("single") + 1, 1], 10, 1, "single");
+
 ## Test input validation
 %!error (randi ())
 %!error (randi ("test"))
 %!error (randi (struct ("a", 1)))
 %!error (randi (0))
 %!error (randi (1.5))
 %!error (randi ([1.5, 2.5]))
 %!error (randi ([1, 2.5]))
