# HG changeset patch
# User Philip Nienhuis <prnienhuis@users.sf.net>
# Date 1448015868 -3600
#      Fri Nov 20 11:37:48 2015 +0100
# Branch stable
# Node ID ab0d9d7f479c5f3cf7f150d326f5debbbf05bda6
# Parent  234589c84d4a629171bfbb6d798cf4d437ecbf62
textread.m, textscan.m: properly process single-quoted endofline parameter (bug #46477)

diff --git a/scripts/io/textread.m b/scripts/io/textread.m
--- a/scripts/io/textread.m
+++ b/scripts/io/textread.m
@@ -158,16 +158,19 @@ function varargout = textread (filename,
     return;
   endif
 
   endofline = find (strcmpi (varargin, "endofline"), 1);
   if (! isempty (endofline))
     ## 'endofline' option set by user.
     if (ischar (varargin{endofline + 1}))
       eol_char = varargin{endofline + 1};
+      if (strcmp (typeinfo (eol_char), "sq_string"))
+        eol_char = do_string_escapes (eol_char);
+      endif
       if (! any (strcmp (eol_char, {"", "\n", "\r", "\r\n"})))
         error ("textscan: illegal EndOfLine character value specified");
       endif
     else
       error ("character value required for EndOfLine");
     endif
   else
     ## Determine EOL from file.
@@ -473,16 +476,26 @@ endfunction
 %! ## Test EOL detection
 %! d = textread (f, "%s");
 %! assert (d, {"a";"b";"c"});
 %! ## Test explicit EOL specification (bug #45046)
 %! d = textread (f, "%s", "endofline", "\r");
 %! assert (d, {"a"; "b"; "c"});
 %! unlink (f);
 
+## Properly process single-quoted EOL args (bug #46477)
+%!test
+%! f = tempname ();
+%! fid = fopen (f, "w");
+%! fprintf (fid, "hello, world!");
+%! fclose (fid);
+%! [a, b] = textread (f, "%s%s", "endofline", '\n');
+%! assert (a{1}, "hello,");
+%! assert (b{1}, "world!");
+
 ## Test input validation
 %!error textread ()
 %!error textread (1)
 %!error <arguments must be strings> textread (1, "%f")
 %!error <arguments must be strings> textread ("fname", 1)
 %!error <missing or illegal value for> textread (file_in_loadpath ("textread.m"), "", "headerlines")
 %!error <missing or illegal value for> textread (file_in_loadpath ("textread.m"), "", "headerlines", 'hh')
 %!error <character value required for> textread (file_in_loadpath ("textread.m"), "%s", "endofline", true)
diff --git a/scripts/io/textscan.m b/scripts/io/textscan.m
--- a/scripts/io/textscan.m
+++ b/scripts/io/textscan.m
@@ -219,16 +219,19 @@ function [C, position] = textscan (fid, 
     return;
   endif
 
   ## Check value of 'endofline'.  String or file doesn't seem to matter
   endofline = find (strcmpi (args, "endofline"), 1);
   if (! isempty (endofline))
     if (ischar (args{endofline + 1}))
       eol_char = args{endofline + 1};
+      if (strcmp (typeinfo (eol_char), "sq_string"))
+        eol_char = do_string_escapes (eol_char);
+      endif
       if (! any (strcmp (eol_char, {"", "\n", "\r", "\r\n"})))
         error ("textscan: illegal EndOfLine character value specified");
       endif
     else
       error ("textscan: character value required for EndOfLine");
     endif
   else
     if (! ischar (fid))
@@ -691,8 +694,15 @@ endfunction
 ## Bug #42528
 %!test
 %! assert (textscan ("1i", ""){1},  0+1i);
 %! assert (cell2mat (textscan ("3, 2-4i, NaN\n -i, 1, 23.4+2.2i", "")), [3+0i, 2-4i, NaN+0i; 0-i,  1+0i, 23.4+2.2i]);
 
 ## Illegal format specifiers
 %!test
 %!error <no valid format conversion specifiers> textscan ("1.0", "%z");
+
+## Properly process single-quoted EOL args (bug #46477)
+%!test
+%! C = textscan ("hello, world!", "%s%s", "endofline", '\n');
+%! assert (C{1}{1}, "hello,");
+%! assert (C{2}{1}, "world!");
+
