# HG changeset patch
# User Rik <rik@octave.org>
# Date 1449505851 28800
#      Mon Dec 07 08:30:51 2015 -0800
# Node ID b16bcd7a2a33d7a7be40efea9ed2345ebf0278de
# Parent  6935b8f038cc5e04aa5ce5279946a5a6fc6d08a4
Use int rather than octave_idx_type for nargin data type.

* data.cc, load-path.cc, lu.cc, ordschur.cc, chol.cc, qr.cc:
Use int rather than octave_idx_type for nargin data type.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -2718,17 +2718,17 @@ numel (@var{a}, 2, \":\")\n\
 will return 3 as the second row has three column entries.\n\
 \n\
 This method is also called when an object appears as lvalue with cs-list\n\
 indexing, i.e., @code{object@{@dots{}@}} or @code{object(@dots{}).field}.\n\
 @seealso{size}\n\
 @end deftypefn")
 {
   octave_value retval;
-  octave_idx_type nargin = args.length ();
+  int nargin = args.length ();
 
   if (nargin == 1)
     retval = args(0).numel ();
   else if (nargin > 1)
     {
       // Don't use numel (const octave_value_list&) here as that corresponds to
       // an overloaded call, not to builtin!
       retval = dims_to_numel (args(0).dims (), args.slice (1, nargin-1));
@@ -5114,17 +5114,17 @@ each row is an independent sequence betw
 \n\
 For compatibility with @sc{matlab}, return the second argument (@var{limit})\n\
 if fewer than two values are requested.\n\
 @seealso{logspace}\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  octave_idx_type nargin = args.length ();
+  int nargin = args.length ();
 
   octave_idx_type npoints = 100;
 
   if (nargin != 2 && nargin != 3)
     print_usage ();
 
   if (nargin == 3)
     {
diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -2242,17 +2242,17 @@ DEFUN (genpath, args, ,
 Return a path constructed from @var{dir} and all its subdirectories.\n\
 \n\
 If additional string parameters are given, the resulting path will exclude\n\
 directories with those names.\n\
 @end deftypefn")
 {
   octave_value retval;
 
-  octave_idx_type nargin = args.length ();
+  int nargin = args.length ();
 
   if (nargin == 0)
     print_usage ();
 
   if (nargin == 1)
     {
       std::string dirname = args(0).xstring_value ("genpath: DIR must be a string");
 
diff --git a/libinterp/corefcn/lu.cc b/libinterp/corefcn/lu.cc
--- a/libinterp/corefcn/lu.cc
+++ b/libinterp/corefcn/lu.cc
@@ -622,17 +622,17 @@ stable.\n\
 \n\
 The matrix case is done as a sequence of rank-1 updates; thus, for large\n\
 enough k, it will be both faster and more accurate to recompute the\n\
 factorization from scratch.\n\
 @seealso{lu, cholupdate, qrupdate}\n\
 @end deftypefn")
 {
   octave_value_list retval;
-  octave_idx_type nargin = args.length ();
+  int nargin = args.length ();
 
   if (nargin != 4 && nargin != 5)
     print_usage ();
 
   bool pivoted = (nargin == 5);
 
   octave_value argl = args(0);
   octave_value argu = args(1);
diff --git a/libinterp/corefcn/ordschur.cc b/libinterp/corefcn/ordschur.cc
--- a/libinterp/corefcn/ordschur.cc
+++ b/libinterp/corefcn/ordschur.cc
@@ -102,17 +102,17 @@ is in the upper left corner, by doing:\n
 \n\
 @example\n\
 [@var{U}, @var{S}] = ordschur (@var{U}, @var{S}, [0,1])\n\
 @end example\n\
 \n\
 @seealso{schur}\n\
 @end deftypefn")
 {
-  const octave_idx_type nargin = args.length ();
+  int nargin = args.length ();
   octave_value_list retval;
 
   if (nargin != 3)
     print_usage ();
 
   const Array<octave_idx_type> sel = args(2).octave_idx_type_vector_value ("ordschur: SELECT must be an array of integers");
 
   const octave_idx_type n = sel.numel ();
diff --git a/libinterp/dldfcn/chol.cc b/libinterp/dldfcn/chol.cc
--- a/libinterp/dldfcn/chol.cc
+++ b/libinterp/dldfcn/chol.cc
@@ -579,17 +579,17 @@ If @var{op} is @qcode{\"-\"}, @var{info}
 \n\
 @item 2 if @var{R} is singular.\n\
 @end itemize\n\
 \n\
 If @var{info} is not present, an error message is printed in cases 1 and 2.\n\
 @seealso{chol, cholinsert, choldelete, cholshift}\n\
 @end deftypefn")
 {
-  octave_idx_type nargin = args.length ();
+  int nargin = args.length ();
 
   octave_value_list retval;
 
   if (nargin > 3 || nargin < 2)
     print_usage ();
 
   octave_value argr = args(0);
   octave_value argu = args(1);
@@ -780,17 +780,17 @@ On return, @var{info} is set to\n\
 @end itemize\n\
 \n\
 If @var{info} is not present, an error message is printed in cases 1 and 2.\n\
 @seealso{chol, cholupdate, choldelete, cholshift}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  octave_idx_type nargin = args.length ();
+  int nargin = args.length ();
 
   if (nargin != 3)
     print_usage ();
 
   octave_value argr = args(0);
   octave_value argj = args(1);
   octave_value argu = args(2);
 
@@ -1027,17 +1027,17 @@ Given a Cholesky@tie{}factorization of a
 positive definite matrix @w{@var{A} = @var{R}'*@var{R}}, @var{R}@tie{}upper\n\
 triangular, return the Cholesky@tie{}factorization of @w{A(p,p)}, where\n\
 @w{p = [1:j-1,j+1:n+1]}.\n\
 @seealso{chol, cholupdate, cholinsert, cholshift}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  octave_idx_type nargin = args.length ();
+  int nargin = args.length ();
 
   if (nargin != 2)
     print_usage ();
 
   octave_value argr = args(0);
   octave_value argj = args(1);
 
   if (argr.is_numeric_type () && argj.is_real_scalar ())
@@ -1161,17 +1161,17 @@ triangular, return the Cholesky@tie{}fac
  or @*\n\
 @code{p = [1:j-1, shift(j:i,-1), i+1:n]} if @w{@var{j} < @var{i}}.  @*\n\
 \n\
 @seealso{chol, cholupdate, cholinsert, choldelete}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  octave_idx_type nargin = args.length ();
+  int nargin = args.length ();
 
   if (nargin != 3)
     print_usage ();
 
   octave_value argr = args(0);
   octave_value argi = args(1);
   octave_value argj = args(2);
 
diff --git a/libinterp/dldfcn/qr.cc b/libinterp/dldfcn/qr.cc
--- a/libinterp/dldfcn/qr.cc
+++ b/libinterp/dldfcn/qr.cc
@@ -753,17 +753,17 @@ to recompute the factorization from scra
 The QR@tie{}factorization supplied may be either full (Q is square) or\n\
 economized (R is square).\n\
 \n\
 @seealso{qr, qrinsert, qrdelete, qrshift}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  octave_idx_type nargin = args.length ();
+  int nargin = args.length ();
 
   if (nargin != 4)
     print_usage ();
 
   octave_value argq = args(0);
   octave_value argr = args(1);
   octave_value argu = args(2);
   octave_value argv = args(3);
@@ -939,17 +939,17 @@ If @var{orient} is @qcode{\"col\"}, the 
 be either full (Q is square) or economized (R is square).\n\
 \n\
 If @var{orient} is @qcode{\"row\"}, full factorization is needed.\n\
 @seealso{qr, qrupdate, qrdelete, qrshift}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  octave_idx_type nargin = args.length ();
+  int nargin = args.length ();
 
   if (nargin < 4 || nargin > 5)
     print_usage ();
 
   octave_value argq = args(0);
   octave_value argr = args(1);
   octave_value argj = args(2);
   octave_value argx = args(3);
@@ -1155,17 +1155,17 @@ and more accurate to recompute the facto
 If @var{orient} is @qcode{\"col\"}, the QR@tie{}factorization supplied may\n\
 be either full (Q is square) or economized (R is square).\n\
 \n\
 If @var{orient} is @qcode{\"row\"}, full factorization is needed.\n\
 @seealso{qr, qrupdate, qrinsert, qrshift}\n\
 @end deftypefn")
 {
   octave_value_list retval;
-  octave_idx_type nargin = args.length ();
+  int nargin = args.length ();
 
   if (nargin < 3 || nargin > 4)
     print_usage ();
 
   octave_value argq = args(0);
   octave_value argr = args(1);
   octave_value argj = args(2);
 
@@ -1404,17 +1404,17 @@ of @w{@var{A}(:,p)}, where @w{p} is the 
 @code{p = [1:i-1, shift(i:j, 1), j+1:n]} if @w{@var{i} < @var{j}} @*\n\
  or @*\n\
 @code{p = [1:j-1, shift(j:i,-1), i+1:n]} if @w{@var{j} < @var{i}}.  @*\n\
 \n\
 @seealso{qr, qrupdate, qrinsert, qrdelete}\n\
 @end deftypefn")
 {
   octave_value_list retval;
-  octave_idx_type nargin = args.length ();
+  int nargin = args.length ();
 
   if (nargin != 4)
     print_usage ();
 
   octave_value argq = args(0);
   octave_value argr = args(1);
   octave_value argi = args(2);
   octave_value argj = args(3);
