# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1521815288 -3600
#      Fri Mar 23 15:28:08 2018 +0100
# Branch stable
# Node ID acb7094aebb367e9802fc227cb0697df880b0248
# Parent  c3cc9677db9854837de34da0d9af7e024ab36f77
Fix ilu when type is ilutp and two output arguments are required (#53440).

* __ilu__.cc (__ilutp__): Add the *transposed* permuted identity matrix to output L.

* ilu.m: Change documentation to note that default is "nofill".  Add a BIST
test for bug #53440.

diff --git a/libinterp/corefcn/__ilu__.cc b/libinterp/corefcn/__ilu__.cc
--- a/libinterp/corefcn/__ilu__.cc
+++ b/libinterp/corefcn/__ilu__.cc
@@ -29,17 +29,17 @@ along with Octave; see the file COPYING.
 #include "oct-norm.h"
 
 #include "defun.h"
 #include "error.h"
 
 #include "builtin-defun-decls.h"
 
 // This function implements the IKJ and JKI variants of Gaussian elimination to
-// perform the ILUTP decomposition.  The behavior is controlled by milu
+// perform the ILU0 decomposition.  The behavior is controlled by milu
 // parameter.  If milu = ['off'|'col'] the JKI version is performed taking
 // advantage of CCS format of the input matrix.  If milu = 'row' the input
 // matrix has to be transposed to obtain the equivalent CRS structure so we can
 // work efficiently with rows.  In this case IKJ version is used.
 template <typename octave_matrix_t, typename T>
 void ilu_0 (octave_matrix_t& sm, const std::string milu = "off")
 {
   const octave_idx_type n = sm.cols ();
@@ -946,17 +946,17 @@ Undocumented internal function.
         {
           retval(1) = U;
           if (nargout == 3)
             {
               retval(0) = L.index (perm, idx_vector::colon) + speye;
               retval(2) = speye.index (perm, idx_vector::colon);
             }
           else
-            retval(0) = L + speye.index (perm, idx_vector::colon);
+            retval(0) = L + speye.index (idx_vector::colon, perm);
         }
     }
   else
     {
       SparseComplexMatrix sm = args(0).sparse_complex_matrix_value ();
       SparseComplexMatrix U, L;
       nnz_u = (Ftriu (ovl (sm))(0).sparse_complex_matrix_value ()).nnz ();
       nnz_l = (Ftril (ovl (sm, -1))(0).sparse_complex_matrix_value ()).nnz ();
@@ -987,17 +987,17 @@ Undocumented internal function.
         {
           retval(1) = U;
           if (nargout == 3)
             {
               retval(0) = L.index (perm, idx_vector::colon) + speye;
               retval(2) = speye.index (perm, idx_vector::colon);
             }
           else
-            retval(0) = L + speye.index (perm, idx_vector::colon);
+            retval(0) = L + speye.index (idx_vector::colon, perm);
         }
     }
 
   return retval;
 }
 
 /*
 ## No test needed for internal helper function.
diff --git a/scripts/sparse/ilu.m b/scripts/sparse/ilu.m
--- a/scripts/sparse/ilu.m
+++ b/scripts/sparse/ilu.m
@@ -37,27 +37,27 @@
 ## @var{opts}.  The option name is a field of the structure and the setting
 ## is the value of field.  Names and specifiers are case sensitive.
 ##
 ## @table @code
 ## @item type
 ## Type of factorization.
 ##
 ## @table @asis
-## @item @qcode{"nofill"}
+## @item @qcode{"nofill"} (default)
 ## ILU factorization with no fill-in (ILU(0)).
 ##
 ## Additional supported options: @code{milu}.
 ##
 ## @item @qcode{"crout"}
 ## Crout version of ILU factorization (@nospell{ILUC}).
 ##
 ## Additional supported options: @code{milu}, @code{droptol}.
 ##
-## @item @qcode{"ilutp"} (default)
+## @item @qcode{"ilutp"}
 ## ILU factorization with threshold and pivoting.
 ##
 ## Additional supported options: @code{milu}, @code{droptol}, @code{udiag},
 ## @code{thresh}.
 ## @end table
 ##
 ## @item droptol
 ## A non-negative scalar specifying the drop tolerance for factorization.  The
@@ -534,8 +534,13 @@ endfunction
 %! fail ("ilu (A_tiny, opts)", "UDIAG must be 0 or 1");
 %!test
 %! opts.thresh = -1;
 %! fail ("ilu (A_tiny, opts)", "THRESH must be a scalar");
 %! opts.thresh = 0.5i;
 %! fail ("ilu (A_tiny, opts)", "THRESH must be a scalar");
 %! opts.thresh = [];
 %! fail ("ilu (A_tiny, opts)", "THRESH must be a scalar");
+%!test <*53440>
+%! A = sparse (magic (4));
+%! opts.type = "ilutp";
+%! [L, U] = ilu (A, opts);
+%! assert (L * U, A, eps)
