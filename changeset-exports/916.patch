# HG changeset patch
# User jwe
# Date 784514191 0
#      Fri Nov 11 00:36:31 1994 +0000
# Node ID 2f35156aa18b429273ab45a5a523d5dfa39842d4
# Parent  b632b159b4ed6528bcedda5f1611387ee60166a2
[project @ 1994-11-11 00:36:31 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1102,16 +1102,35 @@ is_keyword (char *s)
   else if (strcmp ("while", s) == 0)
     {
       promptflag--;
       looping++;
       yylval.tok_val = new token (l, c);
       token_stack.push (yylval.tok_val);
       return WHILE;
     }
+  else if (strcmp ("unwind_protect", s) == 0)
+    {
+      promptflag--;
+      yylval.tok_val = new token (l, c);
+      token_stack.push (yylval.tok_val);
+      return UNWIND_PROTECT;
+    }
+  else if (strcmp ("unwind_protect_cleanup", s) == 0)
+    {
+      yylval.tok_val = new token (l, c);
+      token_stack.push (yylval.tok_val);
+      return UNWIND_PROTECT_CLEANUP;
+    }
+  else if (strcmp ("end_unwind_protect", s) == 0)
+    {
+      end_found = 1;
+      yylval.tok_val = new token (token::unwind_protect_end, l, c);
+      token_stack.push (yylval.tok_val);
+    }
 
   if (end_found)
     {
       if (! defining_func && ! looping)
 	promptflag++;
       return END;
     }
 
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -218,16 +218,17 @@ static tree_index_expression *make_index
 %token <tok_val> LEFTDIV EMUL EDIV ELEFTDIV QUOTE TRANSPOSE
 %token <tok_val> PLUS_PLUS MINUS_MINUS POW EPOW
 %token <tok_val> NUM IMAG_NUM
 %token <tok_val> NAME SCREW
 %token <tok_val> END
 %token <tok_val> PLOT
 %token <tok_val> TEXT STYLE
 %token <tok_val> FOR WHILE IF ELSEIF ELSE BREAK CONTINUE FUNC_RET
+%token <tok_val> UNWIND_PROTECT UNWIND_PROTECT_CLEANUP
 %token <tok_val> GLOBAL
 %token <tok_val> TEXT_ID
 
 // Other tokens.
 %token LEXICAL_ERROR
 %token FCN SCREW_TWO
 %token ELLIPSIS
 %token END_OF_INPUT
@@ -596,16 +597,25 @@ command		: plot_command
 		  { $$ = $1; }
 		| global_decl
 		  { $$ = $1; }
 		| if_command
 		  {
 		    iffing--;
 		    $$ = $1;
 		  }
+
+		| UNWIND_PROTECT opt_list UNWIND_PROTECT_CLEANUP opt_list END
+		  {
+		    if (check_end ($5, token::unwind_protect_end))
+		      ABORT_PARSE;
+
+		    $$ = new tree_unwind_protect_command ($2, $4, $1->line (),
+							  $1->column ());
+		  }
 		| WHILE expression optsep opt_list END
 		  {
 		    maybe_warn_assign_as_truth_value ($2);
 		    if (check_end ($5, token::while_end))
 		      ABORT_PARSE;
 		    looping--;
 		    $$ = new tree_while_command ($2, $4, $1->line (),
 						 $1->column ());
diff --git a/src/pt-cmd.cc b/src/pt-cmd.cc
--- a/src/pt-cmd.cc
+++ b/src/pt-cmd.cc
@@ -42,16 +42,17 @@ int returning = 0;
 #include "symtab.h"
 #include "error.h"
 #include "gripes.h"
 #include "tree-base.h"
 #include "tree-expr.h"
 #include "tree-cmd.h"
 #include "tree-misc.h"
 #include "tree-const.h"
+#include "unwind-prot.h"
 
 // Decide if it's time to quit a for or while loop.
 static int
 quit_loop_now (void)
 {
 // Maybe handle `continue N' someday...
 
   if (continuing)
@@ -428,16 +429,95 @@ tree_if_command::print_code (ostream& os
   if (list)
     list->print_code (os);
 
   print_code_indent (os);
 
   os << "endif";
 }
 
+// Simple exception handling.
+
+tree_unwind_protect_command::~tree_unwind_protect_command (void)
+{
+  delete unwind_protect_code;
+  delete cleanup_code;
+}
+
+static void
+do_unwind_protect_cleanup_code (void *ptr)
+{
+  tree_statement_list *list = (tree_statement_list *) ptr;
+
+// We want to run the cleanup code without error_state being set, but
+// we need to restore its value, so that any errors encountered in
+// the first part of the unwind_protect are not completely ignored.
+
+  unwind_protect_int (error_state);
+
+  error_state = 0;
+
+  if (list)
+    list->eval (1);
+
+// We don't want to ignore errors that occur in the cleanup code, so
+// if an error is encountered there, leave error_state alone.
+// Otherwise, set it back to what it was before.
+
+  if (error_state)
+    discard_unwind_protect ();
+  else
+    run_unwind_protect ();
+}
+
+void
+tree_unwind_protect_command::eval (void)
+{
+  add_unwind_protect (do_unwind_protect_cleanup_code, cleanup_code);
+
+  if (unwind_protect_code)
+    unwind_protect_code->eval (1);
+
+  run_unwind_protect ();
+}
+
+void
+tree_unwind_protect_command::print_code (ostream& os)
+{
+  print_code_indent (os);
+
+  os << "unwind_protect";
+
+  print_code_new_line (os);
+
+  if (unwind_protect_code)
+    {
+      increment_indent_level ();
+      unwind_protect_code->print_code (os);
+      decrement_indent_level ();
+    }
+
+  print_code_indent (os);
+
+  os << "cleanup_code";
+
+  print_code_new_line (os);
+
+  if (cleanup_code)
+    {
+      increment_indent_level ();
+      cleanup_code->print_code (os);
+      decrement_indent_level ();
+    }
+
+  print_code_indent (os);
+
+  os << "end_unwind_protect";
+}
+
 // Break.
 
 void
 tree_break_command::eval (void)
 {
   if (! error_state)
     breaking = 1;
 }
diff --git a/src/pt-cmd.h b/src/pt-cmd.h
--- a/src/pt-cmd.h
+++ b/src/pt-cmd.h
@@ -34,16 +34,17 @@ class tree_index_expression;
 class tree_constant;
 class symbol_record;
 
 class tree_command;
 class tree_global_command;
 class tree_while_command;
 class tree_for_command;
 class tree_if_command;
+class tree_unwind_protect_command;
 class tree_break_command;
 class tree_continue_command;
 class tree_return_command;
 
 #include "tree-base.h"
 
 // A base class for commands.
 
@@ -54,17 +55,17 @@ public:
   tree_command (int l = -1, int c = -1) : tree (l, c) { }
 
   virtual void eval (void) = 0;
 };
 
 class
 tree_global_command : public tree_command
 {
- public:
+public:
   tree_global_command (int l = -1, int c = -1) : tree_command (l, c)
     { init_list = 0; }
 
   tree_global_command (tree_global_init_list *t, int l = -1, int c = -1)
     : tree_command (l, c)
       { init_list = t; }
 
   ~tree_global_command (void);
@@ -77,17 +78,17 @@ private:
   tree_global_init_list *init_list;
 };
 
 // While.
 
 class
 tree_while_command : public tree_command
 {
- public:
+public:
   tree_while_command (int l = -1, int c = -1) : tree_command (l, c)
     {
       expr = 0;
       list = 0;
     }
 
   tree_while_command (tree_expression *e, int l = -1, int c = -1)
     : tree_command (l, c)
@@ -107,27 +108,27 @@ tree_while_command : public tree_command
   ~tree_while_command (void);
 
   void eval (void);
 
   void eval_error (void);
 
   void print_code (ostream& os);
 
- private:
+private:
   tree_expression *expr;	// Expression to test.
   tree_statement_list *list;	// List of commands to execute.
 };
 
 // For.
 
 class
 tree_for_command : public tree_command
 {
- public:
+public:
   tree_for_command (int l = -1, int c = -1) : tree_command (l, c)
     {
       id = 0;
       expr = 0;
       list = 0;
     }
 
   tree_for_command (tree_index_expression *ident, tree_expression *e,
@@ -142,70 +143,102 @@ tree_for_command : public tree_command
   ~tree_for_command (void);
 
   void eval (void);
 
   void eval_error (void);
 
   void print_code (ostream& os);
 
- private:
+private:
   void do_for_loop_once (tree_constant *rhs, int& quit);
 
   tree_index_expression *id;	// Identifier to modify.
   tree_expression *expr;	// Expression to evaluate.
   tree_statement_list *list;	// List of commands to execute.
 };
 
 // If.
 
 class
 tree_if_command : public tree_command
 {
- public:
+public:
   tree_if_command (int l = -1, int c = -1) : tree_command (l, c)
     { list = 0; }
 
   tree_if_command (tree_if_command_list *lst, int l = -1, int c = -1)
     : tree_command (l, c)
       { list = lst; }
 
   ~tree_if_command (void);
 
   void eval (void);
 
   void eval_error (void);
 
   void print_code (ostream& os);
 
- private:
+private:
   tree_if_command_list *list;
 };
 
+// Simple exception handling.
+
+class
+tree_unwind_protect_command : public tree_command
+{
+public:
+  tree_unwind_protect_command (int l = -1, int c = -1) : tree_command (l, c)
+    {
+      unwind_protect_code = 0;
+      cleanup_code = 0;
+    }
+
+  tree_unwind_protect_command (tree_statement_list *tc,
+			       tree_statement_list *cc,
+			       int l = -1, int c = -1)
+    : tree_command (l, c)
+      {
+	unwind_protect_code = tc;
+	cleanup_code = cc;
+      }
+
+  ~tree_unwind_protect_command (void);
+
+  void eval (void);
+
+  void print_code (ostream& os);
+
+private:
+  tree_statement_list *unwind_protect_code;
+  tree_statement_list *cleanup_code;
+};
+
 // Break.
 
 class
 tree_break_command : public tree_command
 {
- public:
+public:
   tree_break_command (int l = -1, int c = -1) : tree_command (l, c) { }
 
   ~tree_break_command (void) { }
 
   void eval (void);
 
   void print_code (ostream& os);
 };
 
 // Continue.
 
 class
 tree_continue_command : public tree_command
 {
- public:
+public:
   tree_continue_command (int l = -1, int c = -1) : tree_command (l, c) { }
 
   ~tree_continue_command (void) { }
 
   void eval (void);
 
   void print_code (ostream& os);
 };
