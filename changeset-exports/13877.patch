# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1321525355 18000
#      Thu Nov 17 05:22:35 2011 -0500
# Node ID 0d32a681d943525aa8e6632be99a475a20be2d80
# Parent  c1b072ef1fc729e67216449b06e9985d73e61323
* convhulln.cc: Clean up argument parsing and variable decls.

diff --git a/src/DLD-FUNCTIONS/convhulln.cc b/src/DLD-FUNCTIONS/convhulln.cc
--- a/src/DLD-FUNCTIONS/convhulln.cc
+++ b/src/DLD-FUNCTIONS/convhulln.cc
@@ -89,127 +89,132 @@ convex hull is calculated.\n\n\
 
   int nargin = args.length ();
   if (nargin < 1 || nargin > 2)
     {
       print_usage ();
       return retval;
     }
 
-  Matrix p (args(0).matrix_value ());
-  const octave_idx_type dim = p.columns ();
-  const octave_idx_type n = p.rows ();
+  Matrix points (args(0).matrix_value ());
+  const octave_idx_type dim = points.columns ();
+  const octave_idx_type num_points = points.rows ();
+
+  points = points.transpose ();
 
-  // Default options
-  std::string options;
+  std::string cmd = "qhull";
+
   if (dim <= 4)
-    options = "Qt";
+    cmd += " Qt";
   else
-    options = "Qt Qx";
+    cmd += " Qt Qx";
 
-  if (nargin == 2)
+  if (nargin == 2 && ! args(1).is_empty ())
     {
       if (args(1).is_string ())
-        options = args(1).string_value ();
-      else if (args(1).is_empty ())
-        ; // Use default options
+        cmd += " " + args(1).string_value ();
       else if (args(1).is_cellstr ())
         {
-          options = "";
           Array<std::string> tmp = args(1).cellstr_value ();
 
           for (octave_idx_type i = 0; i < tmp.numel (); i++)
-            options += tmp(i) + " ";
+            cmd += " " + tmp(i);
         }
       else
         {
           error ("convhulln: OPTIONS must be a string, cell array of strings, or empty");
           return retval;
         }
      }
 
-
-  p = p.transpose ();
-  double *pt_array = p.fortran_vec ();
   boolT ismalloc = false;
 
-  // FIXME: we can't just pass options.c_str () to qh_new_qhull
-  // because the argument is not declared const.  Ugh.  Unless qh_new_qhull
-  // really needs to modify this argument, someone should fix QHULL.
-  OCTAVE_LOCAL_BUFFER (char, flags, 7 + options.length ());
-
-  sprintf (flags, "qhull %s", options.c_str ());
-
-  // Replace the 0 pointer with stdout for debugging information
+  // Replace the 0 pointer with stdout for debugging information.
   FILE *outfile = 0;
   FILE *errfile = stderr;
       
-  int exitcode = qh_new_qhull (dim, n, pt_array, 
-                               ismalloc, flags, outfile, errfile);
+  // Qhull flags and points arguments are not const...
+
+  OCTAVE_LOCAL_BUFFER (char, cmd_str, cmd.length () + 1);
+
+  strcpy (cmd_str, cmd.c_str ());
+
+  int exitcode = qh_new_qhull (dim, num_points, points.fortran_vec (),
+                               ismalloc, cmd_str, outfile, errfile);
   if (! exitcode)
     {
-      vertexT *vertex, **vertexp;
-      facetT *facet;
-      setT *vertices;
       bool nonsimp_seen = false;
+
       octave_idx_type nf = qh num_facets;
 
       Matrix idx (nf, dim + 1);
 
-      octave_idx_type i = 0, j;
+      facetT *facet;
+
+      octave_idx_type i = 0;
+
       FORALLfacets
         {
-          j = 0;
+          octave_idx_type j = 0;
 
           if (! nonsimp_seen && ! facet->simplicial)
             {
               nonsimp_seen = true;
 
-              if (options.find ("QJ") != std::string::npos)
+              if (cmd.find ("QJ") != std::string::npos)
                 {
-                  // should never happen with QJ
-                  error ("convhulln: qhull failed.  Option 'QJ' returned non-simplicial facet");
-                  break;
+                  // Should never happen with QJ.
+                  error ("convhulln: qhull failed: option 'QJ' returned non-simplicial facet");
+                  return retval;
                 }
             }
+
           if (dim == 3)
             {
-              vertices = qh_facet3vertex (facet);
+              setT *vertices = qh_facet3vertex (facet);
+
+              vertexT *vertex, **vertexp;
+
               FOREACHvertex_ (vertices)
                 idx(i, j++) = 1 + qh_pointid(vertex->point);
 
               qh_settempfree (&vertices);
             }
           else
             {
               if (facet->toporient ^ qh_ORIENTclock)
                 {
+                  vertexT *vertex, **vertexp;
+
                   FOREACHvertex_ (facet->vertices)
                     idx(i, j++) = 1 + qh_pointid(vertex->point);
                 }
               else
                 {
+                  vertexT *vertex, **vertexp;
+
                   FOREACHvertexreverse12_ (facet->vertices)
                     idx(i, j++) = 1 + qh_pointid(vertex->point);
                 }
             }
           if (j < dim)
-            warning ("facet %d only has %d vertices", i, j);
+            warning ("convhulln: facet %d only has %d vertices", i, j);
 
           i++;
         }
 
-      // Remove extra dimension if all facets were simplicial
+      // Remove extra dimension if all facets were simplicial.
+
       if (! nonsimp_seen)
         idx.resize (nf, dim, 0.0);
 
       if (nargout == 2)
-        // calculate volume of convex hull
-        // taken from qhull src/geom2.c
         {
+          // Calculate volume of convex hull, taken from qhull src/geom2.c.
+
           realT area;
           realT dist;
 
           FORALLfacets
             {
               if (! facet->normal)
                 continue;
 
@@ -235,17 +240,17 @@ convex hull is calculated.\n\n\
           retval(1) = octave_value (qh totvol);
         }
 
       retval(0) = idx;
     }
   else
     error ("convhulln: qhull failed");
 
-  // free memory from Qhull
+  // Free memory from Qhull
   qh_freeqhull (! qh_ALL);
 
   int curlong, totlong;
   qh_memfreeshort (&curlong, &totlong);
 
   if (curlong || totlong)
     warning ("convhulln: did not free %d bytes of long memory (%d pieces)",
              totlong, curlong);
