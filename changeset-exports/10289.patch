# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1265767135 18000
#      Tue Feb 09 20:58:55 2010 -0500
# Node ID 4b124317dc38ac804ed619355a3f738ba77e1f0f
# Parent  5e972e2deffe6bd106491d530b7bab16b9e750c1
base_properties::set_children: account for hidden children

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
 2010-02-09  John W. Eaton  <jwe@octave.org>
 
+	* graphics.cc, graphics.h.in
+	(base_properties::get_hidden_children): New function.
+	(base_properties::get_children_internal): New function.
+	(base_properties::get_children): Call get_children_internal to
+	do the work.
+	(base_properties::set_children): Incorporate maybe_set_children
+	function here.  Account for hidden children.
+	(maybe_set_children): Delete.
+
 	* c-file-ptr-stream.h (c_file_ptr_buf::buf_close): Rename from close.
 	(c_file_ptr_buf::file_close): Rename from fclose.
 	(c_file_ptr_stream::stream_close): Rename from close.
 	(c_zfile_ptr_buf:buf_close): Rename from close.
 	Change all callers.
 
 2010-02-09  John W. Eaton  <jwe@octave.org>
 
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -1845,51 +1845,16 @@ void
 base_graphics_backend::object_destroyed (const graphics_handle& h)
 {
   graphics_object go = gh_manager::get_object (h);
 
   object_destroyed (go);
 }
 // ---------------------------------------------------------------------
 
-static Matrix
-maybe_set_children (const Matrix& kids, const octave_value& val)
-{
-  const Matrix new_kids = val.matrix_value ();
-
-  bool ok = true;
-
-  if (! error_state)
-    {
-      if (kids.numel () == new_kids.numel ())
-	{
-	  Matrix t1 = kids;
-	  Matrix t2 = new_kids;
-
-	  t1 = t1.sort ();
-	  t2 = t2.sort ();
-
-	  if (t1 != t2)
-	    ok = false;
-	}
-      else
-	ok = false;
-
-      if (! ok)
-	error ("set: new children must be a permutation of existing children");
-    }
-  else
-    {
-      ok = false;
-      error ("set: expecting children to be array of graphics handles");
-    }
-
-  return ok ? new_kids : kids;
-}
-
 void
 base_properties::set_from_list (base_graphics_object& obj,
 				property_list& defaults)
 {
   std::string go_name = graphics_object_name ();
 
   property_list::plist_map_const_iterator p = defaults.find (go_name);
 
@@ -2043,17 +2008,46 @@ base_properties::set_parent (const octav
     }
   else
     error ("set: expecting parent to be a graphics handle");
 }
 
 void
 base_properties::set_children (const octave_value& val)
 {
-  children = maybe_set_children (children, val);
+  const Matrix new_kids = val.matrix_value ();
+
+  bool ok = true;
+
+  if (! error_state)
+    {
+      const Matrix visible_kids = get_children ();
+
+      if (visible_kids.numel () == new_kids.numel ())
+	{
+	  Matrix t1 = visible_kids.sort ();
+	  Matrix t2 = new_kids.sort ();
+
+	  if (t1 != t2)
+	    ok = false;
+	}
+      else
+	ok = false;
+
+      if (! ok)
+	error ("set: new children must be a permutation of existing children");
+    }
+  else
+    {
+      ok = false;
+      error ("set: expecting children to be array of graphics handles");
+    }
+
+  if (ok)
+    children = new_kids.stack (get_hidden_children ());
 }
 
 void
 base_properties::mark_modified (void)
 {
   __modified__ = "on";
   graphics_object parent_obj = gh_manager::get_object (get_parent ());
   if (parent_obj)
@@ -2915,17 +2909,17 @@ axes::properties::remove_child (const gr
     delete_text_child (zlabel);
   else if (title.handle_value ().ok () && h == title.handle_value ())
     delete_text_child (title);
   else
     base_properties::remove_child (h);
 }
 
 Matrix
-base_properties::get_children (void) const
+base_properties::get_children_internal (bool return_hidden) const
 {
   Matrix retval = children;
   
   graphics_object go = gh_manager::get_object (0);
 
   root_figure::properties& props =
       dynamic_cast<root_figure::properties&> (go.get_properties ());
 
@@ -2933,23 +2927,43 @@ base_properties::get_children (void) con
     {
       octave_idx_type k = 0;
 
       for (octave_idx_type i = 0; i < children.numel (); i++)
 	{
 	  graphics_handle kid = children (i);
 
 	  if (gh_manager::is_handle_visible (kid))
-	    retval(k++) = children(i);
+            {
+              if (! return_hidden)
+                retval(k++) = children(i);
+            }
+          else
+            {
+              if (return_hidden)
+                retval(k++) = children(i);
+            }
 	}
 
       retval.resize (k, 1);
     }
 
-  return retval;;
+  return retval;
+}
+
+Matrix
+base_properties::get_children (void) const
+{
+  return get_children_internal (false);
+}
+
+Matrix
+base_properties::get_hidden_children (void) const
+{
+  return get_children_internal (true);
 }
 
 inline Matrix
 xform_matrix (void)
 {
   Matrix m (4, 4, 0.0);
   for (int i = 0; i < 4; i++)
     m(i,i) = 1;
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -1854,16 +1854,18 @@ public:
 				listener_mode = POSTSET);
 
   void set_tag (const octave_value& val) { tag = val; }
 
   void set_parent (const octave_value& val);
 
   Matrix get_all_children (void) const { return children; }
 
+  Matrix get_hidden_children (void) const;
+
   void set_children (const octave_value& val);
 
   void set_modified (const octave_value& val) { set___modified__ (val); }
 
   void set___modified__ (const octave_value& val) { __modified__ = val; }
 
   void reparent (const graphics_handle& new_parent) { parent = new_parent; }
 
@@ -1956,16 +1958,19 @@ protected:
 
   std::map<caseless_str, property, cmp_caseless_str> all_props;
 
 protected:
   void insert_static_property (const std::string& name, base_property& p)
     { insert_property (name, property (&p, true)); }
   
   virtual void init (void) { }
+
+private:
+  Matrix get_children_internal (bool return_hidden) const;
 };
 
 class OCTINTERP_API base_graphics_object
 {
 public:
   friend class graphics_object;
 
   base_graphics_object (void) : count (1) { }
