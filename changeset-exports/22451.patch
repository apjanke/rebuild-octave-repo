# HG changeset patch
# User Rik <rik@octave.org>
# Date 1473375693 25200
#      Thu Sep 08 16:01:33 2016 -0700
# Node ID ad5439817753f9f70e0d6cf7213e268e5c701649
# Parent  2fb86778f78d3a91859a6ddf41b776730f5dde96
Add mexCallMATLABWithTrap to MEX API (bug #48949).

* NEWS: Announce change.

* mex.cc (mexCallMATLABWithTrap): New function.

* mexproto.h (mexCallMATLABWithTrap): Prototype for new function.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -128,16 +128,21 @@ Summary of important user-visible change
     Octave 4.6.  Use "origin" instead.
 
  ** The publish function allows easy publication of Octave script files
     in HTML or other formats, including figures and output created by
     this script.  It comes with its counterpart grabcode, which lets one
     literally grab the HTML published code from a remote website, for
     example.
 
+ ** The MEX API now includes the function mexCallMATLABWithTrap.  This
+    function will not abort if an error occurs during mexCallMATLAB, but
+    instead will return execution to the MEX function for error
+    handling.
+
  ** Other new functions added in 4.2:
 
       audioformats
       camlight
       condeig
       deg2rad
       dialog
       evalc
diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -3107,16 +3107,40 @@ mexCallMATLAB (int nargout, mxArray *arg
     }
 
   while (num_to_copy < nargout)
     argout[num_to_copy++] = 0;
 
   return execution_error ? 1 : 0;
 }
 
+mxArray *
+mexCallMATLABWithTrap (int nargout, mxArray *argout[], int nargin,
+                       mxArray *argin[], const char *fname)
+{
+  mxArray *mx = NULL;
+  const char *fields[] = {"identifier", "message", "case", "stack"};
+
+  int old_flag = mex_context ? mex_context->trap_feval_error : 0;
+  mexSetTrapFlag (1);
+  if (mexCallMATLAB (nargout, argout, nargin, argin, fname))
+    {
+      mx = mxCreateStructMatrix (1, 1, 4, fields);
+      mxSetFieldByNumber (mx, 0, 0, mxCreateString ("Octave:MEX"));
+      std::string msg = "mexCallMATLABWithTrap: function call <"
+                        + std::string (fname) + "> failed";
+      mxSetFieldByNumber (mx, 0, 1, mxCreateString (msg.c_str ()));
+      mxSetFieldByNumber (mx, 0, 2, mxCreateCellMatrix (0, 0));
+      mxSetFieldByNumber (mx, 0, 3, mxCreateStructMatrix (0, 1, 0, NULL));
+    }
+  mexSetTrapFlag (old_flag);
+
+  return mx;
+}
+
 void
 mexSetTrapFlag (int flag)
 {
   if (mex_context)
     mex_context->trap_feval_error = flag;
 }
 
 int
diff --git a/libinterp/corefcn/mexproto.h b/libinterp/corefcn/mexproto.h
--- a/libinterp/corefcn/mexproto.h
+++ b/libinterp/corefcn/mexproto.h
@@ -75,16 +75,22 @@ extern "C" {
 
 /* Interface to the interpreter.  */
 extern OCTINTERP_API const char *mexFunctionName (void);
 
 extern OCTINTERP_API int mexCallMATLAB (int nargout, mxArray *argout[],
                                         int nargin, mxArray *argin[],
                                         const char *fname);
 
+extern OCTINTERP_API mxArray * mexCallMATLABWithTrap (int nargout,
+                                                      mxArray *argout[],
+                                                      int nargin,
+                                                      mxArray *argin[],
+                                                      const char *fname);
+
 extern OCTINTERP_API void mexSetTrapFlag (int flag);
 extern OCTINTERP_API int mexEvalString (const char *s);
 extern OCTINTERP_API void mexErrMsgTxt (const char *s);
 extern OCTINTERP_API void mexErrMsgIdAndTxt (const char *id, const char *s,
                                              ...);
 extern OCTINTERP_API void mexWarnMsgTxt (const char *s);
 extern OCTINTERP_API void mexWarnMsgIdAndTxt (const char *id, const char *s,
                                               ...);
