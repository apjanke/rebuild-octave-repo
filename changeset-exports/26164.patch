# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1543604840 -3600
#      Fri Nov 30 20:07:20 2018 +0100
# Node ID 7f6a50f736250f4dffc19b2e7b7adf8eb5de937d
# Parent  d478d5d1c8e9ddc6f3b8bd9164ddf3308073b476
Silence compiler warnings about format identifier for octave_idx_type (bug #55046).

* build-aux/mk-octave-config-h.sh, oct-conf-post.in.h: Rename macro to
  OCTAVE_FORMAT_PRINTF. Add version for compiling with MinGW. Define
  OCTAVE_IDX_TYPE_FORMAT.

* error.h: Use renamed macro.

* __eigs__.cc, convhulln.cc, qr.cc, pt-eval.cc, __magick_read__.cc,
  cellfunn.cc, data.cc, errwarn.cc, graphics.cc, ls-mat-ascii.cc,
  ls-oct-text.cc, oct-stream.cc: Use preprocessor macro for format identifier
  for octave_idx_type.

diff --git a/build-aux/mk-octave-config-h.sh b/build-aux/mk-octave-config-h.sh
--- a/build-aux/mk-octave-config-h.sh
+++ b/build-aux/mk-octave-config-h.sh
@@ -101,34 +101,54 @@ since all of Octave's header files alrea
 #  endif
 
 #  if defined (__GNUC__)
 #    if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 #      define OCTAVE_DEPRECATED(ver, msg) __attribute__ ((__deprecated__ ("[" #ver "]: " msg)))
 #    else
 #      define OCTAVE_DEPRECATED(ver, msg) __attribute__ ((__deprecated__))
 #    endif
-#    define OCTAVE_FORMAT_ATTRIBUTE(type, index, first) __attribute__ ((__format__(type, index, first)))
 #    define OCTAVE_NORETURN __attribute__ ((__noreturn__))
 #    define OCTAVE_UNUSED __attribute__ ((__unused__))
 
 #    define HAVE_OCTAVE_DEPRECATED_ATTR 1
 #    define HAVE_OCTAVE_NORETURN_ATTR 1
 #    define HAVE_OCTAVE_UNUSED_ATTR 1
 #  else
 #    define OCTAVE_DEPRECATED(ver, msg)
-#    define OCTAVE_FORMAT_ATTRIBUTE(type, index, first)
 #    define OCTAVE_NORETURN
 #    define OCTAVE_UNUSED
 
 /* #    undef HAVE_OCTAVE_DEPRECATED_ATTR */
 /* #    undef HAVE_OCTAVE_NORETURN_ATTR */
 /* #    undef HAVE_OCTAVE_UNUSED_ATTR */
 #  endif
 
+#  if defined (__MINGW32__)
+    /* MinGW requires special handling due to different format specifiers
+     * on different platforms.  The macro __MINGW_PRINTF_FORMAT maps to
+     * either gnu_printf or ms_printf depending on where we are compiling
+     * to avoid warnings on format specifiers that are legal.
+     * See: https://bugzilla.mozilla.org/show_bug.cgi?id=1331349  */
+#    define OCTAVE_FORMAT_PRINTF(stringIndex, firstToCheck) \
+       __attribute__ ((format (__MINGW_PRINTF_FORMAT, stringIndex, firstToCheck)))
+
+#    define HAVE_OCTAVE_FORMAT_PRINTF_ATTR 1
+#  elif defined (__GNUC__)
+     /* The following attributes are used with gcc and clang compilers.  */
+#    define OCTAVE_FORMAT_PRINTF(index, first) \
+       __attribute__ ((__format__(printf, index, first)))
+
+#    define HAVE_OCTAVE_FORMAT_PRINTF_ATTR 1
+#  else
+#    define OCTAVE_FORMAT_PRINTF(index, first)
+
+/* #    undef HAVE_OCTAVE_FORMAT_PRINTF_ATTR */
+#  endif
+
 #  if ! defined (OCTAVE_FALLTHROUGH)
 #    if defined (__cplusplus) && __cplusplus > 201402L
 #      define OCTAVE_FALLTHROUGH [[fallthrough]]
 #    elif defined (__GNUC__) && __GNUC__ < 7
 #      define OCTAVE_FALLTHROUGH ((void) 0)
 #    else
 #      define OCTAVE_FALLTHROUGH __attribute__ ((__fallthrough__))
 #    endif
@@ -199,17 +219,25 @@ echo ""
 $SED -n 's/#\(\(undef\|define\) OCTAVE_ENABLE_BOUNDS_CHECK.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_ENABLE_OPENMP.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_HAVE_LONG_LONG_INT.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_HAVE_UNSIGNED_LONG_LONG_INT.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_HAVE_OVERLOAD_CHAR_INT8_TYPES.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_SIZEOF_F77_INT_TYPE.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) OCTAVE_SIZEOF_IDX_TYPE.*$\)/#  \1/p' $config_h_file
 
-echo ""
+cat << EOF
+
+#  if defined (OCTAVE_ENABLE_64)
+#    define OCTAVE_IDX_TYPE_FORMAT PRId64
+#  else
+#    define OCTAVE_IDX_TYPE_FORMAT PRId32
+#  endif
+
+EOF
 
 $SED -n 's/#\(\(undef\|define\) gid_t.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) uid_t.*$\)/#  \1/p' $config_h_file
 $SED -n 's/#\(\(undef\|define\) nlink_t.*$\)/#  \1/p' $config_h_file
 
 if grep "#undef HAVE_DEV_T" $config_h_file > /dev/null; then
   cat << EOF
 typedef short dev_t;
diff --git a/libinterp/corefcn/__magick_read__.cc b/libinterp/corefcn/__magick_read__.cc
--- a/libinterp/corefcn/__magick_read__.cc
+++ b/libinterp/corefcn/__magick_read__.cc
@@ -872,17 +872,18 @@ Use @code{imread} instead.
     const unsigned int nRows = imvec[frameidx(0)].rows ();
     const unsigned int nCols = imvec[frameidx(0)].columns ();
     const octave_idx_type n = frameidx.numel ();
     for (octave_idx_type frame = 0; frame < n; frame++)
       {
         if (nRows != imvec[frameidx(frame)].rows ()
             || nCols != imvec[frameidx(frame)].columns ())
           {
-            error ("imread: all frames must have the same size but frame %i is different",
+            error ("imread: all frames must have the same size but frame "
+                   "%" OCTAVE_IDX_TYPE_FORMAT " is different",
                    frameidx(frame) +1);
           }
       }
   }
 
   const octave_idx_type depth = get_depth (imvec[frameidx(0)]);
   if (is_indexed (imvec[frameidx(0)]))
     {
@@ -905,18 +906,18 @@ Use @code{imread} instead.
         output = read_images<boolNDArray>   (imvec, frameidx, nargout, options);
       else if (depth <= 8)
         output = read_images<uint8NDArray>  (imvec, frameidx, nargout, options);
       else if (depth <= 16)
         output = read_images<uint16NDArray> (imvec, frameidx, nargout, options);
       else if (depth <= 32)
         output = read_images<FloatNDArray>  (imvec, frameidx, nargout, options);
       else
-        error ("imread: reading of images with %i-bit depth is not supported",
-               depth);
+        error ("imread: reading of images with %" OCTAVE_IDX_TYPE_FORMAT
+               "-bit depth is not supported", depth);
     }
 
   return output;
 
 #else
 
   octave_unused_parameter (args);
   octave_unused_parameter (nargout);
diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -1873,17 +1873,18 @@ mat2cell_mismatch (const dim_vector& dv,
     {
       octave_idx_type s = 0;
       for (octave_idx_type j = 0; j < d[i].numel (); j++)
         s += d[i](j);
 
       octave_idx_type r = (i < dv.ndims () ? dv(i) : 1);
 
       if (s != r)
-        error ("mat2cell: mismatch on dimension %d (%d != %d)", i+1, r, s);
+        error ("mat2cell: mismatch on dimension %d (%" OCTAVE_IDX_TYPE_FORMAT
+               " != %" OCTAVE_IDX_TYPE_FORMAT ")", i+1, r, s);
     }
 
   return false;
 }
 
 template <typename container>
 static void
 prepare_idx (container *idx, int idim, int nd,
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -2726,17 +2726,18 @@ Example 4: number of output arguments < 
       if (! args(1).is_real_scalar ())
         error ("size: DIM must be a positive integer");
 
       octave_idx_type nd = args(1).idx_type_value ();
 
       const dim_vector dv = args(0).dims ();
 
       if (nd < 1)
-        error ("size: requested dimension DIM (= %d) out of range", nd);
+        error ("size: requested dimension DIM (= %" OCTAVE_IDX_TYPE_FORMAT ") "
+               "out of range", nd);
 
       if (nd <= dv.ndims ())
         retval(0) = dv(nd-1);
       else
         retval(0) = 1;
     }
   else
     print_usage ();
@@ -5471,17 +5472,18 @@ the unspecified dimension.
           if (nel == 0)
             new_dims(empty_dim-1) = 0;
           else
             {
               octave_idx_type a_nel = args(0).numel ();
               octave_idx_type size_empty_dim = a_nel / nel;
 
               if (a_nel != size_empty_dim * nel)
-                error ("reshape: SIZE is not divisible by the product of known dimensions (= %d)",
+                error ("reshape: SIZE is not divisible by the product of "
+                       "known dimensions (= %" OCTAVE_IDX_TYPE_FORMAT ")",
                        nel);
 
               new_dims(empty_dim-1) = size_empty_dim;
             }
         }
     }
 
   retval = args(0).reshape (new_dims);
diff --git a/libinterp/corefcn/error.h b/libinterp/corefcn/error.h
--- a/libinterp/corefcn/error.h
+++ b/libinterp/corefcn/error.h
@@ -21,16 +21,17 @@ along with Octave; see the file COPYING.
 */
 
 #if ! defined (octave_error_h)
 #define octave_error_h 1
 
 #include "octave-config.h"
 
 #include <cstdarg>
+#include <cinttypes>
 #include <string>
 
 #include "unwind-prot.h"
 
 class octave_map;
 class octave_value_list;
 namespace octave
 {
@@ -45,95 +46,95 @@ extern OCTINTERP_API void reset_error_ha
 extern OCTINTERP_API int warning_enabled (const std::string& id);
 
 extern OCTINTERP_API octave::execution_exception
 make_execution_exception (const char *who);
 
 extern OCTINTERP_API void
 vmessage (const char *name, const char *fmt, va_list args);
 
-OCTAVE_FORMAT_ATTRIBUTE (__printf__, 2, 3)
+OCTAVE_FORMAT_PRINTF (2, 3)
 extern OCTINTERP_API void message (const char *name, const char *fmt, ...);
 
 extern OCTINTERP_API void vwarning (const char *fmt, va_list args);
-OCTAVE_FORMAT_ATTRIBUTE (__printf__, 1, 2)
+OCTAVE_FORMAT_PRINTF (1, 2)
 extern OCTINTERP_API void warning (const char *fmt, ...);
 
 OCTAVE_NORETURN OCTINTERP_API extern
 void verror (const char *fmt, va_list args);
 
-OCTAVE_FORMAT_ATTRIBUTE (__printf__, 1, 2)
+OCTAVE_FORMAT_PRINTF (1, 2)
 OCTAVE_NORETURN OCTINTERP_API extern
 void error (const char *fmt, ...);
 
 OCTAVE_NORETURN OCTINTERP_API extern
 void verror (octave::execution_exception&, const char *fmt, va_list args);
 
-OCTAVE_FORMAT_ATTRIBUTE (__printf__, 2, 3)
+OCTAVE_FORMAT_PRINTF (2, 3)
 OCTAVE_NORETURN OCTINTERP_API extern
 void error (octave::execution_exception&, const char *fmt, ...);
 
 OCTAVE_NORETURN OCTINTERP_API extern
 void verror_with_cfn (const char *fmt, va_list args);
 
-OCTAVE_FORMAT_ATTRIBUTE (__printf__, 1, 2)
+OCTAVE_FORMAT_PRINTF (1, 2)
 OCTAVE_NORETURN OCTINTERP_API extern
 void error_with_cfn (const char *fmt, ...);
 
 OCTAVE_NORETURN OCTINTERP_API extern
 void vparse_error (const char *fmt, va_list args);
 
-OCTAVE_FORMAT_ATTRIBUTE (__printf__, 1, 2)
+OCTAVE_FORMAT_PRINTF (1, 2)
 OCTAVE_NORETURN OCTINTERP_API extern
 void parse_error (const char *fmt, ...);
 
 extern OCTINTERP_API void
 vmessage_with_id (const char *id, const char *name,
                   const char *fmt, va_list args);
 
-OCTAVE_FORMAT_ATTRIBUTE (__printf__, 3, 4)
+OCTAVE_FORMAT_PRINTF (3, 4)
 extern OCTINTERP_API void
 message_with_id (const char *id, const char *name, const char *fmt, ...);
 
 OCTAVE_NORETURN OCTINTERP_API extern
 void vusage_with_id (const char *id, const char *fmt, va_list args);
 
-OCTAVE_FORMAT_ATTRIBUTE (__printf__, 2, 3)
+OCTAVE_FORMAT_PRINTF (2, 3)
 OCTAVE_NORETURN OCTINTERP_API extern
 void usage_with_id (const char *id, const char *fmt, ...);
 
 extern OCTINTERP_API void
 vwarning_with_id (const char *id, const char *fmt, va_list args);
 
-OCTAVE_FORMAT_ATTRIBUTE (__printf__, 2, 3)
+OCTAVE_FORMAT_PRINTF (2, 3)
 extern OCTINTERP_API void
 warning_with_id (const char *id, const char *fmt, ...);
 
 OCTAVE_NORETURN OCTINTERP_API extern
 void verror_with_id (const char *id, const char *fmt, va_list args);
 
-OCTAVE_FORMAT_ATTRIBUTE (__printf__, 2, 3)
+OCTAVE_FORMAT_PRINTF (2, 3)
 OCTAVE_NORETURN OCTINTERP_API extern
 void error_with_id (const char *id, const char *fmt, ...);
 
 OCTAVE_NORETURN OCTINTERP_API extern
 void verror_with_id_cfn (const char *id, const char *fmt, va_list args);
 
-OCTAVE_FORMAT_ATTRIBUTE (__printf__, 2, 3)
+OCTAVE_FORMAT_PRINTF (2, 3)
 OCTAVE_NORETURN OCTINTERP_API extern
 void error_with_id_cfn (const char *id, const char *fmt, ...);
 
 OCTAVE_NORETURN OCTINTERP_API extern
 void vparse_error_with_id (const char *id, const char *fmt, va_list args);
 
-OCTAVE_FORMAT_ATTRIBUTE (__printf__, 2, 3)
+OCTAVE_FORMAT_PRINTF (2, 3)
 OCTAVE_NORETURN OCTINTERP_API extern
 void parse_error_with_id (const char *id, const char *fmt, ...);
 
-OCTAVE_FORMAT_ATTRIBUTE (__printf__, 1, 2)
+OCTAVE_FORMAT_PRINTF (1, 2)
 OCTAVE_NORETURN OCTINTERP_API extern
 void panic (const char *fmt, ...);
 
 //! Helper function for print_usage defined in defun.cc.
 
 extern OCTINTERP_API void defun_usage_message (const std::string& msg);
 
 extern OCTINTERP_API octave_value_list
diff --git a/libinterp/corefcn/errwarn.cc b/libinterp/corefcn/errwarn.cc
--- a/libinterp/corefcn/errwarn.cc
+++ b/libinterp/corefcn/errwarn.cc
@@ -93,18 +93,19 @@ err_nonconformant (void)
 {
   error ("nonconformant matrices");
 }
 
 void
 err_nonconformant (octave_idx_type r1, octave_idx_type c1,
                    octave_idx_type r2, octave_idx_type c2)
 {
-  error ("nonconformant matrices (op1 is %dx%d, op2 is %dx%d)",
-         r1, c1, r2, c2);
+  error ("nonconformant matrices (op1 is %" OCTAVE_IDX_TYPE_FORMAT
+         "x%" OCTAVE_IDX_TYPE_FORMAT ", op2 is %" OCTAVE_IDX_TYPE_FORMAT
+         "x%" OCTAVE_IDX_TYPE_FORMAT ")", r1, c1, r2, c2);
 }
 
 void
 err_not_implemented (const char *fcn)
 {
   error ("%s: not implemented", fcn);
 }
 
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -2450,17 +2450,18 @@ graphics_object::set (const octave_value
 */
 
 // Set properties given in two cell arrays containing names and values.
 void
 graphics_object::set (const Array<std::string>& pnames,
                       const Cell& values, octave_idx_type row)
 {
   if (pnames.numel () != values.columns ())
-    error ("set: number of names must match number of value columns (%d != %d)",
+    error ("set: number of names must match number of value columns "
+           "(%" OCTAVE_IDX_TYPE_FORMAT " != %" OCTAVE_IDX_TYPE_FORMAT ")",
            pnames.numel (), values.columns ());
 
   octave_idx_type k = pnames.columns ();
 
   for (octave_idx_type column = 0; column < k; column++)
     {
       caseless_str pname = pnames(column);
       octave_value val = values(row, column);
@@ -12111,17 +12112,19 @@ being @qcode{"portrait"}.
 
       if (nargin == 3 && args(1).iscellstr () && args(2).iscell ())
         {
           if (args(2).cell_value ().rows () == 1)
             go.set (args(1).cellstr_value (), args(2).cell_value (), 0);
           else if (hcv.numel () == args(2).cell_value ().rows ())
             go.set (args(1).cellstr_value (), args(2).cell_value (), n);
           else
-            error ("set: number of graphics handles must match number of value rows (%d != %d)",
+            error ("set: number of graphics handles must match number of "
+                   "value rows (%" OCTAVE_IDX_TYPE_FORMAT " != "
+                   "%" OCTAVE_IDX_TYPE_FORMAT ")",
                    hcv.numel (), args(2).cell_value ().rows ());
         }
       else if (nargin == 2 && args(1).isstruct ())
         go.set (args(1).map_value ());
       else if (nargin == 2 && args(1).is_string ())
         {
           std::string property = args(1).string_value ();
           std::transform (property.begin (), property.end (),
diff --git a/libinterp/corefcn/ls-mat-ascii.cc b/libinterp/corefcn/ls-mat-ascii.cc
--- a/libinterp/corefcn/ls-mat-ascii.cc
+++ b/libinterp/corefcn/ls-mat-ascii.cc
@@ -253,17 +253,17 @@ read_mat_ascii_data (std::istream& is, c
 
   if (! octave::valid_identifier (varname))
     error ("load: unable to convert filename '%s' to valid identifier",
            filename.c_str ());
 
   octave_idx_type nr = 0;
   octave_idx_type nc = 0;
 
-  int total_count = 0;
+  octave_idx_type total_count = 0;
 
   get_lines_and_columns (is, nr, nc, filename);
 
   octave_quit ();
 
   if (nr <= 0 || nc <= 0)
     error ("load: unable to extract matrix size from file '%s'",
            filename.c_str ());
@@ -323,18 +323,18 @@ read_mat_ascii_data (std::istream& is, c
   // FIXME: not sure this is best, but it works.
 
   if (is.eof ())
     is.clear ();
 
   octave_idx_type expected = nr * nc;
 
   if (expected != total_count)
-    error ("load: expected %d elements, found %d",
-           expected, total_count);
+    error ("load: expected %" OCTAVE_IDX_TYPE_FORMAT " elements, found "
+           "%" OCTAVE_IDX_TYPE_FORMAT, expected, total_count);
 
   tc = tmp;
 
   return varname;
 }
 
 bool
 save_mat_ascii_data (std::ostream& os, const octave_value& val,
diff --git a/libinterp/corefcn/ls-oct-text.cc b/libinterp/corefcn/ls-oct-text.cc
--- a/libinterp/corefcn/ls-oct-text.cc
+++ b/libinterp/corefcn/ls-oct-text.cc
@@ -370,17 +370,17 @@ save_three_d (std::ostream& os, const oc
 
   long old_precision = os.precision ();
   os.precision (6);
 
   if (parametric)
     {
       octave_idx_type extras = nc % 3;
       if (extras)
-        warning ("ignoring last %d columns", extras);
+        warning ("ignoring last %" OCTAVE_IDX_TYPE_FORMAT " columns", extras);
 
       Matrix tmp = tc.matrix_value ();
       nr = tmp.rows ();
 
       for (octave_idx_type i = 0; i < nc-extras; i += 3)
         {
           os << tmp.extract (0, i, nr-1, i+2);
           if (i+3 < nc-extras)
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -2652,18 +2652,18 @@ namespace octave
             err = read_format_once (is, fmt_list, out, row_idx, done_after);
 
             if ((err & ~1) > 0 || ! is || (lines >= ntimes && ntimes > -1))
               break;
           }
       }
 
     if ((err & 4) && ! return_on_error)
-      error ("%s: Read error in field %d of row %d", who.c_str (),
-             done_after + 1, row + 1);
+      error ("%s: Read error in field %d of row %" OCTAVE_IDX_TYPE_FORMAT,
+             who.c_str (), done_after + 1, row + 1);
 
     // If file does not end in EOL, do not pad columns with NaN.
     bool uneven_columns = false;
     if (err & 4)
       uneven_columns = true;
     else if (isp.eof ())
       {
         isp.clear ();
diff --git a/libinterp/dldfcn/__eigs__.cc b/libinterp/dldfcn/__eigs__.cc
--- a/libinterp/dldfcn/__eigs__.cc
+++ b/libinterp/dldfcn/__eigs__.cc
@@ -598,20 +598,23 @@ Undocumented internal function.
             retval(0) = eig_val;
           else
             retval = ovl (eig_vec, ComplexDiagMatrix (eig_val), double (info));
         }
     }
 
   if (nconv <= 0)
     warning_with_id ("Octave:eigs:UnconvergedEigenvalues",
-                     "eigs: None of the %d requested eigenvalues converged", k);
+                     "eigs: None of the %" OCTAVE_IDX_TYPE_FORMAT
+                     " requested eigenvalues converged", k);
   else if (nconv < k)
     warning_with_id ("Octave:eigs:UnconvergedEigenvalues",
-                     "eigs: Only %d of the %d requested eigenvalues converged",
+                     "eigs: Only %" OCTAVE_IDX_TYPE_FORMAT
+                     " of the %" OCTAVE_IDX_TYPE_FORMAT
+                     " requested eigenvalues converged",
                      nconv, k);
 
   if (! fcn_name.empty ())
     {
       octave::symbol_table& symtab = interp.get_symbol_table ();
 
       symtab.clear_function (fcn_name);
     }
diff --git a/libinterp/dldfcn/convhulln.cc b/libinterp/dldfcn/convhulln.cc
--- a/libinterp/dldfcn/convhulln.cc
+++ b/libinterp/dldfcn/convhulln.cc
@@ -248,17 +248,19 @@ convex hull is calculated.
             {
               vertexT *vertex, **vertexp;
 
               FOREACHvertexreverse12_ (facet->vertices)
                 idx(i, j++) = 1 + qh_pointid(vertex->point);
             }
         }
       if (j < dim)
-        warning ("convhulln: facet %d only has %d vertices", i, j);
+        warning ("convhulln: facet %" OCTAVE_IDX_TYPE_FORMAT
+                 " only has %" OCTAVE_IDX_TYPE_FORMAT
+                 " vertices", i, j);
 
       i++;
     }
 
   // Remove extra dimension if all facets were simplicial.
 
   if (! nonsimp_seen)
     idx.resize (nf, dim, 0.0);
diff --git a/libinterp/dldfcn/qr.cc b/libinterp/dldfcn/qr.cc
--- a/libinterp/dldfcn/qr.cc
+++ b/libinterp/dldfcn/qr.cc
@@ -323,33 +323,37 @@ orthogonal basis of @code{span (A)}.
           octave::math::sparse_qr<SparseComplexMatrix> q (arg.sparse_complex_matrix_value ());
 
           if (have_b)
             {
               retval = ovl (q.C (args(1).complex_matrix_value ()),
                             q.R (economy));
               if (arg.rows () < arg.columns ())
                 warning ("qr: non minimum norm solution for under-determined "
-                         "problem %dx%d", arg.rows (), arg.columns ());
+                         "problem %" OCTAVE_IDX_TYPE_FORMAT
+                         "x%" OCTAVE_IDX_TYPE_FORMAT,
+                         arg.rows (), arg.columns ());
             }
           else if (nargout > 1)
             retval = ovl (q.Q (), q.R (economy));
           else
             retval = ovl (q.R (economy));
         }
       else
         {
           octave::math::sparse_qr<SparseMatrix> q (arg.sparse_matrix_value ());
 
           if (have_b)
             {
               retval = ovl (q.C (args(1).matrix_value ()), q.R (economy));
               if (arg.rows () < arg.columns ())
                 warning ("qr: non minimum norm solution for under-determined "
-                         "problem %dx%d", arg.rows (), arg.columns ());
+                         "problem %" OCTAVE_IDX_TYPE_FORMAT
+                         "x%" OCTAVE_IDX_TYPE_FORMAT,
+                         arg.rows (), arg.columns ());
             }
           else if (nargout > 1)
             retval = ovl (q.Q (), q.R (economy));
           else
             retval = ovl (q.R (economy));
         }
     }
   else
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -2390,18 +2390,18 @@ namespace octave
                         k++;
                         continue;
                       }
                     else
                       {
                         octave_value tmp = rhs_val(k);
 
                         if (tmp.is_undefined ())
-                          error ("element number %d undefined in return list",
-                                 k+1);
+                          error ("element number %" OCTAVE_IDX_TYPE_FORMAT
+                                 " undefined in return list", k+1);
 
                         ult.assign (octave_value::op_asn_eq, tmp);
 
                         retval_list.push_back (tmp);
 
                         k++;
                       }
                   }
@@ -2418,17 +2418,18 @@ namespace octave
                     //    [a, ~] = f ();
                     //
                     // Then the list of of RHS values will contain one
                     // element but we are iterating over the list of all
                     // RHS values.  We shouldn't complain that a value we
                     // don't need is missing from the list.
 
                     if (! ult.is_black_hole ())
-                      error ("element number %d undefined in return list", k+1);
+                      error ("element number %" OCTAVE_IDX_TYPE_FORMAT
+                             " undefined in return list", k+1);
 
                     k++;
                     continue;
                   }
               }
 
             if (expr.print_result () && statement_printing_enabled ())
               {
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -34,31 +34,49 @@ along with Octave; see the file COPYING.
    /* The following attributes are used with gcc and clang compilers.  */
 #  if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 #    define OCTAVE_DEPRECATED(ver, msg) __attribute__ ((__deprecated__ ("[" #ver "]: " msg)))
 #  else
 #    define OCTAVE_DEPRECATED(ver, msg) __attribute__ ((__deprecated__))
 #  endif
 #  define HAVE_OCTAVE_DEPRECATED_ATTR 1
 
-#  define OCTAVE_FORMAT_ATTRIBUTE(type, index, first) __attribute__ ((__format__(type, index, first)))
-#  define HAVE_OCTAVE_FORMAT_ATTRIBUTE_ATTR 1
-
 #  define OCTAVE_NORETURN __attribute__ ((__noreturn__))
 #  define HAVE_OCTAVE_NORETURN_ATTR 1
 
 #  define OCTAVE_UNUSED __attribute__ ((__unused__))
 #  define HAVE_OCTAVE_UNUSED_ATTR 1
 #else
 #  define OCTAVE_DEPRECATED(ver, msg)
-#  define OCTAVE_FORMAT_ATTRIBUTE(type, index, first)
 #  define OCTAVE_NORETURN
 #  define OCTAVE_UNUSED
 #endif
 
+#if defined (__MINGW32__)
+  /* MinGW requires special handling due to different format specifiers
+   * on different platforms.  The macro __MINGW_PRINTF_FORMAT maps to
+   * either gnu_printf or ms_printf depending on where we are compiling
+   * to avoid warnings on format specifiers that are legal.
+   * See: https://bugzilla.mozilla.org/show_bug.cgi?id=1331349  */
+#  define OCTAVE_FORMAT_PRINTF(stringIndex, firstToCheck) \
+     __attribute__ ((format (__MINGW_PRINTF_FORMAT, stringIndex, firstToCheck)))
+
+#  define HAVE_OCTAVE_FORMAT_PRINTF_ATTR 1
+#elif defined (__GNUC__)
+   /* The following attributes are used with gcc and clang compilers.  */
+#  define OCTAVE_FORMAT_PRINTF(index, first) \
+     __attribute__ ((__format__(printf, index, first)))
+
+#  define HAVE_OCTAVE_FORMAT_PRINTF_ATTR 1
+#else
+#  define OCTAVE_FORMAT_PRINTF(index, first)
+
+/* #  undef HAVE_OCTAVE_FORMAT_PRINTF_ATTR */
+#endif
+
 #if ! defined (OCTAVE_FALLTHROUGH)
 #  if defined (__cplusplus) && __cplusplus > 201402L
 #    define OCTAVE_FALLTHROUGH [[fallthrough]]
 #  elif defined (__GNUC__) && __GNUC__ < 7
 #    define OCTAVE_FALLTHROUGH ((void) 0)
 #  else
 #    define OCTAVE_FALLTHROUGH __attribute__ ((__fallthrough__))
 #  endif
@@ -200,16 +218,23 @@ typedef unsigned long ino_t;
 
 #if defined (__cplusplus)
 #  include <cstdint>
 #else
 #  include <stdint.h>
 #endif
 
 typedef OCTAVE_IDX_TYPE octave_idx_type;
+
+#if defined (OCTAVE_ENABLE_64)
+#  define OCTAVE_IDX_TYPE_FORMAT PRId64
+#else
+#  define OCTAVE_IDX_TYPE_FORMAT PRId32
+#endif
+
 typedef OCTAVE_F77_INT_TYPE octave_f77_int_type;
 
 #define OCTAVE_HAVE_F77_INT_TYPE 1
 
 #if defined (__cplusplus) && ! defined (OCTAVE_THREAD_LOCAL)
 #  define OCTAVE_THREAD_LOCAL
 #endif
 
