# HG changeset patch
# User Stefan Mahr <dac922@gmx.de>
# Date 1404307374 -7200
#      Wed Jul 02 15:22:54 2014 +0200
# Node ID cff49c82f722f94bce89b96d4553dcb2deb794b3
# Parent  a8cacb2e98daa18bf8d2dd5910992075e75758ef
polar.m: Fix scaling of polar plot (bug #39495).

* scripts/plot/draw/polar.m (resetaxis): New function
* scripts/plot/draw/polar.m (__calc_rtick__): New function
* scripts/plot/draw/polar.m (polar): Draw grid only, if not ishold.
Set deletefcn for clearing the listeners if axis is cleared.
If ishold true, update rtick only and let listeners do the grid update.

diff --git a/scripts/plot/draw/polar.m b/scripts/plot/draw/polar.m
--- a/scripts/plot/draw/polar.m
+++ b/scripts/plot/draw/polar.m
@@ -90,69 +90,87 @@ function h = polar (varargin)
         maxr = max (imag (varargin{1})(:));
       else
         maxr = max (varargin{1}(:));
       endif
     else
       print_usage ();
     endif
 
-    ## FIXME: Should more gracefully handle "hold on" and not override props.
-    set (hax, "visible", "off", "plotboxaspectratio", [1, 1, 1],
-              "zlim", [-1 1]);
+    if (! ishold (hax))
+      hg = hggroup (hax, "tag", "polar_grid", "handlevisibility", "off");
+
+      set (hax, "visible", "off", "plotboxaspectratio", [1, 1, 1],
+                "zlim", [-1 1]);
+
+      if (! isprop (hax, "rtick"))
+        addproperty ("rtick", hax, "data");
+      endif
 
-    if (! isprop (hax, "rtick"))
-      addproperty ("rtick", hax, "data");
-    endif
+      set (hax, "rtick", __calc_rtick__ (hax, maxr));
+
+      ## add t(heta)tick
+      if (! isprop (hax, "ttick"))
+        addproperty ("ttick", hax, "data");
+      endif
+
+      ## theta(angular) ticks in degrees
+      set (hax, "ttick", 0:30:330);
+
+      __update_polar_grid__ (hax, [], hg);
 
-    ## calculate r(ho)tick from xtick
-    xtick = get (hax, "xtick");
-    rtick = xtick(find (xtick > 0, 1):find (xtick >= maxr, 1));
-    if (isempty (rtick))
-      rtick = [0.5 1];
-    endif
-    set (hax, "rtick", rtick);
+      set (hg, "deletefcn", {@resetaxis, hax});
 
-    ## add t(heta)tick
-    if (! isprop (hax, "ttick"))
-      addproperty ("ttick", hax, "data");
+      addlistener (hax, "rtick", {@__update_polar_grid__, hg});
+      addlistener (hax, "ttick", {@__update_polar_grid__, hg});
+      addlistener (hax, "color", {@__update_patch__, hg});
+      addlistener (hax, "fontangle", {@__update_text__, hg, "fontangle"});
+      addlistener (hax, "fontname", {@__update_text__, hg, "fontname"});
+      addlistener (hax, "fontsize", {@__update_text__, hg, "fontsize"});
+      addlistener (hax, "fontunits", {@__update_text__, hg, "fontunits"});
+      addlistener (hax, "fontweight", {@__update_text__, hg, "fontweight"});
+      addlistener (hax, "interpreter", {@__update_text__, hg, "interpreter"});
+      addlistener (hax, "layer", {@__update_layer__, hg});
+      addlistener (hax, "gridlinestyle",{@__update_lines__,hg,"gridlinestyle"});
+      addlistener (hax, "linewidth", {@__update_lines__, hg, "linewidth"});
+    else
+      hg = findall (hax, "tag", "polar_grid");
+      if (! isempty (hg))
+        oldrtick = max (get (hax, "rtick"));
+        if (maxr > oldrtick)
+          set (hax, "rtick", __calc_rtick__ (hax, maxr));
+        endif
+      endif
     endif
 
-    ## theta(angular) ticks in degrees
-    set (hax, "ttick", 0:30:330);
-
-    ## Create hggroup to hold text/line objects and attach listeners
-    hg = hggroup (hax, "tag", "polar_grid", "handlevisibility", "off");
-    __update_polar_grid__(hax, [], hg);
-
-    addlistener (hax, "rtick", {@__update_polar_grid__, hg});
-    addlistener (hax, "ttick", {@__update_polar_grid__, hg});
-    addlistener (hax, "color", {@__update_patch__, hg});
-    addlistener (hax, "fontangle", {@__update_text__, hg, "fontangle"});
-    addlistener (hax, "fontname", {@__update_text__, hg, "fontname"});
-    addlistener (hax, "fontsize", {@__update_text__, hg, "fontsize"});
-    addlistener (hax, "fontunits", {@__update_text__, hg, "fontunits"});
-    addlistener (hax, "fontweight", {@__update_text__, hg, "fontweight"});
-    addlistener (hax, "interpreter", {@__update_text__, hg, "interpreter"});
-    addlistener (hax, "layer", {@__update_layer__, hg});
-    addlistener (hax, "gridlinestyle", {@__update_lines__, hg,"gridlinestyle"});
-    addlistener (hax, "linewidth", {@__update_lines__, hg, "linewidth"});
-
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
     h = htmp;
   endif
 
 endfunction
 
+function rtick = __calc_rtick__ (hax, maxr)
+  ## FIXME: workaround: calculate r(ho)tick from xtick
+  savexlim = get (hax, "xlim");
+  saveylim = get (hax, "ylim");
+  set (hax, "xlim", [-maxr maxr], "ylim", [-maxr maxr]);
+  xtick = get (hax, "xtick");
+  rtick = xtick(find (xtick > 0, 1):find (xtick >= maxr, 1));
+  if (isempty (rtick))
+    rtick = [0.5 1];
+  endif
+  set (hax, "xlim", savexlim, "ylim", saveylim);
+endfunction
+
 function retval = __plr1__ (h, theta, fmt)
 
   theta = theta(:);
   if (iscomplex (theta))
     rho = imag (theta);
     theta = real (theta);
   else
     rho = theta;
@@ -343,16 +361,33 @@ function __update_polar_grid__ (hax, ~, 
   lim = 1.1 * rtick(end);
   set (hax, "xlim", [-lim, lim], "ylim", [-lim, lim]);
 
   ## Put polar grid behind or ahead of plot
   __update_layer__ (hax, [], hg);
 
 endfunction
 
+function resetaxis (~, ~, hax)
+  if (isaxes (hax))
+    dellistener (hax, "rtick");
+    dellistener (hax, "ttick");
+    dellistener (hax, "color");
+    dellistener (hax, "fontangle");
+    dellistener (hax, "fontname");
+    dellistener (hax, "fontsize");
+    dellistener (hax, "fontunits");
+    dellistener (hax, "fontweight");
+    dellistener (hax, "interpreter");
+    dellistener (hax, "layer");
+    dellistener (hax, "gridlinestyle");
+    dellistener (hax, "linewidth");
+  endif
+endfunction
+
 
 %!demo
 %! clf;
 %! theta = linspace (0,2*pi,1000);
 %! rho = sin (7*theta);
 %! polar (theta, rho);
 %! title ('polar() plot');
 
