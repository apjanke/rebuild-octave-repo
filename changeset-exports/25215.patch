# HG changeset patch
# User Rik <rik@octave.org>
# Date 1523470758 25200
#      Wed Apr 11 11:19:18 2018 -0700
# Branch stable
# Node ID 7ca5f8c7087915f6c7f62954d5b3c7136125b801
# Parent  5cdd48b2d9ca58e002e2c740418f57d8eb20200d
doc: Update docstring for warning().

* error.cc (Fwarning): Update docstring.

diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1430,31 +1430,30 @@ DEFMETHOD (warning, interp, args, nargou
            doc: /* -*- texinfo -*-
 @deftypefn  {} {} warning (@var{template}, @dots{})
 @deftypefnx {} {} warning (@var{id}, @var{template}, @dots{})
 @deftypefnx {} {} warning ("on", @var{id})
 @deftypefnx {} {} warning ("off", @var{id})
 @deftypefnx {} {} warning ("error", @var{id})
 @deftypefnx {} {} warning ("query", @var{id})
 @deftypefnx {} {} warning (@var{state}, @var{id}, "local")
-@deftypefnx {} {} warning (@var{stin})
-@deftypefnx {} {@var{stout} =} warning (@dots{})
-@deftypefnx {} {@var{mode_st} =} warning (@var{state}, @var{mode})
+@deftypefnx {} {} warning (@var{warning_struct})
+@deftypefnx {} {@var{warning_struct} =} warning (@dots{})
+@deftypefnx {} {@var{mode_struct} =} warning (@var{state}, @var{mode})
 @deftypefnx {} {} warning (@var{mode_st})
 
-Display a warning message or control the behavior of Octave's warning
-system.
+Display a warning message or control the behavior of Octave's warning system.
 
-The first call form uses a template @var{template} and optional
-additional arguments to display a message on the @code{stderr} stream.
-The message is formatted using the same rules as the @code{printf} family
-of functions (@pxref{Formatted Output}) and prefixed by the character
-string @samp{warning: }.  You should use this function when you want to
-notify the user of an unusual condition, but only when it makes sense for
-your program to go on.  For example:
+The first call form uses a template @var{template} and optional additional
+arguments to display a message on the @code{stderr} stream.  The message is
+formatted using the same rules as the @code{printf} family of functions
+(@pxref{Formatted Output}) and prefixed by the character string
+@w{@samp{warning: }}.  You should use this function when you want to notify the
+user of an unusual condition, but only when it makes sense for your program to
+go on.  For example:
 
 @example
 @group
 warning ("foo: maybe something wrong here");
 @end group
 @end example
 
 The optional warning identifier @var{id} allows users to enable or disable
@@ -1470,37 +1469,37 @@ warning ("MyNameSpace:check-something",
 @end group
 @end example
 
 The second call form is meant to change and/or query the state of warnings.
 The first input argument must be a string @var{state} (@qcode{"on"},
 @qcode{"off"}, @qcode{"error"}, or @qcode{"query"}) followed by an optional
 warning identifier @var{id} or @qcode{"all"} (default).
 
-The optional output argument @var{stout} is a structure or structure array
-with fields @qcode{"state"} and @qcode{"identifier"}.  The @var{state} argument
-may have the following values:
+The optional output argument @var{warning_struct} is a structure or structure
+array with fields @qcode{"state"} and @qcode{"identifier"}.  The @var{state}
+argument may have the following values:
 
 @table @asis
 @item @qcode{"on"}|@qcode{"off"}:
 Enable or disable the display of warnings identified by @var{id} and optionally
 return their previous state @var{stout}.
 
 @item @qcode{"error"}:
 Turn warnings identified by @var{id} into errors and optionally return their
 previous state @var{stout}.
 
 @item @qcode{"query"}:
 Return the current state of warnings identified by @var{id}.
 @end table
 
-A structure or structure array @var{stin}, with fields @qcode{"state"} and
-@qcode{"identifier"}, may be passed to achieve equivalent results.  The
-following example shows how to temporarily disable a warning and then restore
-its original state:
+A structure or structure array @var{warning_struct}, with fields
+@qcode{"state"} and @qcode{"identifier"}, may be given as an input to achieve
+equivalent results.  The following example shows how to temporarily disable a
+warning and then restore its original state:
 
 @example
 @group
 loglog (-1:10);
 ## Disable the previous warning and save its original state
 [~, id] = lastwarn ();
 warnstate = warning ("off", id);
 loglog (-1:10);
@@ -1529,22 +1528,22 @@ enable/disable the display of the stack 
 
 @item @qcode{"verbose"}:
 enable/disable the display of additional information after the warning message
 @end table
 
 In this case the @var{state} argument may only be @qcode{"on"} or
 @qcode{"off"}.
 
-Implementation Note: For compatibility with @sc{matlab}, escape
-sequences in @var{template} (e.g., @qcode{"@xbackslashchar{}n"} =>
-newline) are processed regardless of whether @var{template} has been defined
-with single quotes, as long as there are two or more input arguments.  To
-disable escape sequence expansion use a second backslash before the sequence
-(e.g., @qcode{"@xbackslashchar{}@xbackslashchar{}n"}) or use the
+Implementation Note: For compatibility with @sc{matlab}, escape sequences in
+@var{template} (e.g., @qcode{"@xbackslashchar{}n"} => newline) are processed
+regardless of whether @var{template} has been defined with single quotes, as
+long as there are two or more input arguments.  To disable escape sequence
+expansion use a second backslash before the sequence (e.g.,
+@qcode{"@xbackslashchar{}@xbackslashchar{}n"}) or use the
 @code{regexptranslate} function.
 @seealso{warning_ids, lastwarn, error}
 @end deftypefn */)
 {
   octave_value retval;
 
   int nargin = args.length ();
   bool done = false;
