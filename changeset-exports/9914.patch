# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1259952298 28800
#      Fri Dec 04 10:44:58 2009 -0800
# Node ID e76d8c767584099dc272a956c710f86cc2209165
# Parent  5cd48568ec591027e84571371b5734805cd9f26c
Switch to color output for PostScript documentation images

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,14 @@
+2009-12-04  Rik <octave@nomad.inbox5.com>
+
+	* interpreter/geometryimages.m, interpreter/interpimages.m,
+	  interpreter/sparseimages.m, interpreter/plotimages.m: 
+	  Switch to color output for PostScript documentation images
+
 2009-12-04  Rik <octave@nomad.inbox5.com>
 
 	* interpreter/geometryimages.m, interpreter/interpimages.m,
 	  interpreter/sparseimages.m, interpreter/plotimages.m: 
 	  Set default paperorientation to landscape to stop warning message
 
 2009-12-04  Ben Abbott <bpabbott@mac.com>
 
diff --git a/doc/interpreter/geometryimages.m b/doc/interpreter/geometryimages.m
--- a/doc/interpreter/geometryimages.m
+++ b/doc/interpreter/geometryimages.m
@@ -17,16 +17,21 @@
 ## <http://www.gnu.org/licenses/>.
 
 function geometryimages (nm, typ)
   set_print_size ();
   hide_output ();
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
+  if (strcmp (typ, "eps"))
+    d_typ = "-depsc2";
+  else
+    d_typ = cstrcat ("-d", typ);
+  endif
 
   if (isempty (findstr (octave_config_info ("DEFS"), "HAVE_QHULL"))
       && (strcmp (nm, "voronoi") || strcmp (nm, "griddata")
 	  || strcmp (nm, "convhull") || strcmp (nm, "delaunay")
 	  || strcmp (nm, "triplot")))
     sombreroimage (nm, typ);
   elseif (strcmp (typ, "txt"))
     image_as_txt (nm);
@@ -41,59 +46,59 @@ function geometryimages (nm, typ)
     plot (vx, vy, "r");
     [r, c] = tri2circ (tri(end,:), x, y);
     pc = [-1:0.01:1];
     xc = r * sin(pi*pc) + c(1);
     yc = r * cos(pi*pc) + c(2);
     plot (xc, yc, "g-", "LineWidth", 3);
     axis([0, 1, 0, 1]);
     legend ("Delaunay Triangulation", "Voronoi Diagram");
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))    
+    print (cstrcat (nm, ".", typ), d_typ)    
   elseif (strcmp (nm, "triplot"))
     rand ("state", 2)
     x = rand (20, 1);
     y = rand (20, 1);
     tri = delaunay (x, y);
     triplot (tri, x, y);
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))    
+    print (cstrcat (nm, ".", typ), d_typ)    
   elseif (strcmp (nm, "griddata"))
     rand("state",1);
     x=2*rand(1000,1)-1;
     y=2*rand(size(x))-1;
     z=sin(2*(x.^2+y.^2));
     [xx,yy]=meshgrid(linspace(-1,1,32));
     griddata(x,y,z,xx,yy);
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))    
+    print (cstrcat (nm, ".", typ), d_typ)    
   elseif (strcmp (nm, "convhull"))
     x = -3:0.05:3;
     y = abs (sin (x));
     k = convhull (x, y);
     plot (x(k),y(k),'r-',x,y,'b+');
     axis ([-3.05, 3.05, -0.05, 1.05]);
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ)) 
+    print (cstrcat (nm, ".", typ), d_typ) 
   elseif (strcmp (nm, "delaunay"))
     rand ("state", 1);
     x = rand (1, 10);
     y = rand (1, 10);
     T = delaunay (x, y);
     X = [ x(T(:,1)); x(T(:,2)); x(T(:,3)); x(T(:,1)) ];
     Y = [ y(T(:,1)); y(T(:,2)); y(T(:,3)); y(T(:,1)) ];
     axis ([0, 1, 0, 1]);
     plot(X, Y, "b", x, y, "r*");
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ)) 
+    print (cstrcat (nm, ".", typ), d_typ) 
   elseif (strcmp (nm, "inpolygon"))
     randn ("state", 2);
     x = randn (100, 1);
     y = randn (100, 1);
     vx = cos (pi * [-1 : 0.1: 1]);
     vy = sin (pi * [-1 : 0.1 : 1]);
     in = inpolygon (x, y, vx, vy);
     plot(vx, vy, x(in), y(in), "r+", x(!in), y(!in), "bo");
     axis ([-2, 2, -2, 2]);
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ)) 
+    print (cstrcat (nm, ".", typ), d_typ) 
   else
     error ("unrecognized plot requested");
   endif
   hide_output ();
 endfunction
 
 function [r, c] = tri2circ (tri, xx, yy)
   x = xx(tri);
@@ -139,17 +144,17 @@ function sombreroimage (nm, typ)
     x = y = linspace (-8, 8, 41)';
     [xx, yy] = meshgrid (x, y);
     r = sqrt (xx .^ 2 + yy .^ 2) + eps;
     z = sin (r) ./ r;
     unwind_protect
       mesh (x, y, z);
       title ("Sorry, graphics not available because octave was\\ncompiled without the QHULL library.");
     unwind_protect_cleanup
-      print (cstrcat (nm, ".", typ), cstrcat ("-d", typ));
+      print (cstrcat (nm, ".", typ), d_typ);
       hide_output ();
     end_unwind_protect
   endif
 endfunction
 
 ## generate something for the texinfo @image command to process
 function image_as_txt(nm)
   fid = fopen (sprintf ("%s.txt", nm), "wt");
diff --git a/doc/interpreter/interpimages.m b/doc/interpreter/interpimages.m
--- a/doc/interpreter/interpimages.m
+++ b/doc/interpreter/interpimages.m
@@ -17,61 +17,66 @@
 ## <http://www.gnu.org/licenses/>.
 
 function interpimages (nm, typ)
   set_print_size ();
   hide_output ();
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
+  if (strcmp (typ, "eps"))
+    d_typ = "-depsc2";
+  else
+    d_typ = cstrcat ("-d", typ);
+  endif
 
   if (strcmp (typ, "txt"))
     image_as_txt (nm);
   elseif (strcmp (nm, "interpft"))
     t = 0 : 0.3 : pi; dt = t(2)-t(1);
     n = length (t); k = 100;
     ti = t(1) + [0 : k-1]*dt*n/k;
     y = sin (4*t + 0.3) .* cos (3*t - 0.1);
     yp = sin (4*ti + 0.3) .* cos (3*ti - 0.1);
     plot (ti, yp, 'g', ti, interp1(t, y, ti, 'spline'), 'b', ...
 	  ti, interpft (y, k), 'c', t, y, 'r+');
     legend ('sin(4t+0.3)cos(3t-0.1)','spline','interpft','data');
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))
+    print (cstrcat (nm, ".", typ), d_typ)
   elseif (strcmp (nm, "interpn"))
     x = y = z = -1:1;
     f = @(x,y,z) x.^2 - y - z.^2;
     [xx, yy, zz] = meshgrid (x, y, z);
     v = f (xx,yy,zz);
     xi = yi = zi = -1:0.1:1;
     [xxi, yyi, zzi] = ndgrid (xi, yi, zi);
     vi = interpn(x, y, z, v, xxi, yyi, zzi, 'spline');
     mesh (zi, yi, squeeze (vi(1,:,:)));
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))
+    print (cstrcat (nm, ".", typ), d_typ)
   elseif (strcmp (nm, "interpderiv1"))
     t = -2:2;
     dt = 1;
     ti =-2:0.025:2;
     dti = 0.025;
     y = sign(t);
     ys = interp1(t,y,ti,'spline');
     yp = interp1(t,y,ti,'pchip');
     plot (ti, ys,'r-', ti, yp,'g-');
     legend('spline','pchip', 4);
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))
+    print (cstrcat (nm, ".", typ), d_typ)
   elseif (strcmp (nm, "interpderiv2"))
     t = -2:2;
     dt = 1;
     ti =-2:0.025:2;
     dti = 0.025;
     y = sign(t);
     ddys = diff(diff(interp1(t,y,ti,'spline'))./dti)./dti;
     ddyp = diff(diff(interp1(t,y,ti,'pchip'))./dti)./dti;
     plot (ti(2:end-1),ddys,'r*', ti(2:end-1),ddyp,'g+');
     legend('spline','pchip');
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))
+    print (cstrcat (nm, ".", typ), d_typ)
   endif
   hide_output ();  
 endfunction
 
 function set_print_size ()
   image_size = [5.0, 3.5]; # in inches, 16:9 format
   border = 0;              # For postscript use 50/72
   set (0, "defaultfigurepapertype", "<custom>");
diff --git a/doc/interpreter/plotimages.m b/doc/interpreter/plotimages.m
--- a/doc/interpreter/plotimages.m
+++ b/doc/interpreter/plotimages.m
@@ -14,65 +14,69 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 function plotimages (nm, typ)
   set_print_size ();
   hide_output ();
-
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
+  if (strcmp (typ, "eps"))
+    d_typ = "-depsc2";
+  else
+    d_typ = cstrcat ("-d", typ);
+  endif
 
   if (strcmp(typ , "txt"))
     image_as_txt(nm);
   elseif (strcmp (nm, "plot"))
     x = -10:0.1:10;
     plot (x, sin (x));
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))    
+    print (cstrcat (nm, ".", typ), d_typ)    
   elseif (strcmp (nm, "hist"))
 	 rand ("state", 2);
     hist (randn (10000, 1), 30);
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))    
+    print (cstrcat (nm, ".", typ), d_typ)    
   elseif (strcmp (nm, "errorbar"))
 	 rand ("state", 2);
     x = 0:0.1:10;
     y = sin (x);
     yl = 0.1 .* rand (size (x));
     yu = 0.1 .* rand (size (x));
     errorbar (x, sin (x), yl, yu);
 	 axis ([0, 10, -1.1, 1.1]);
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))    
+    print (cstrcat (nm, ".", typ), d_typ)    
   elseif (strcmp (nm, "polar"))
     polar (0:0.1:10*pi, 0:0.1:10*pi);
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))    
+    print (cstrcat (nm, ".", typ), d_typ)    
   elseif (strcmp (nm, "mesh"))
     tx = ty = linspace (-8, 8, 41)';
     [xx, yy] = meshgrid (tx, ty);
     r = sqrt (xx .^ 2 + yy .^ 2) + eps;
     tz = sin (r) ./ r;
     mesh (tx, ty, tz);
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))    
+    print (cstrcat (nm, ".", typ), d_typ)    
   elseif (strcmp (nm, "plot3"))
     t = 0:0.1:10*pi;
     r = linspace (0, 1, numel (t));
     z = linspace (0, 1, numel (t));
     plot3 (r.*sin(t), r.*cos(t), z);
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))    
+    print (cstrcat (nm, ".", typ), d_typ)    
   elseif (strcmp (nm, "extended"))
     x = 0:0.01:3;
     plot(x,erf(x));
     hold on;
     plot(x,x,"r");
     axis([0, 3, 0, 1]);
     text(0.65, 0.6175, cstrcat('\leftarrow x = {2/\surd\pi {\fontsize{16}',
       '\int_{\fontsize{8}0}^{\fontsize{8}x}} e^{-t^2} dt} = 0.6175'))
-    print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))
+    print (cstrcat (nm, ".", typ), d_typ)
   else
     error ("unrecognized plot requested");
   endif
   hide_output ();
 endfunction
 
 function set_print_size ()
   image_size = [5.0, 3.5]; # in inches, 16:9 format
diff --git a/doc/interpreter/sparseimages.m b/doc/interpreter/sparseimages.m
--- a/doc/interpreter/sparseimages.m
+++ b/doc/interpreter/sparseimages.m
@@ -16,16 +16,17 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 function sparseimages (nm, typ)
   set_print_size ();
   if (strcmp (typ, "png"))
     set (0, "defaulttextfontname", "*");
   endif
+
   if (! isempty (findstr (octave_config_info ("DEFS"), "HAVE_COLAMD"))
       && ! isempty (findstr (octave_config_info ("DEFS"), "HAVE_CHOLMOD"))
       && ! isempty (findstr (octave_config_info ("DEFS"), "HAVE_UMFPACK")))
     if (strcmp(typ,"txt"))
       txtimages (nm, 15, typ);
     else
       if (strcmp (nm, "gplot"))
 	gplotimages ("gplot", typ);
@@ -52,21 +53,27 @@ endfunction
 
 function hide_output ()
   f = figure (1);
   set (f, "visible", "off");
 endfunction
 
 function gplotimages (nm, typ)
   hide_output ();
+  if (strcmp (typ, "eps"))
+    d_typ = "-depsc2";
+  else
+    d_typ = cstrcat ("-d", typ);
+  endif
+
   A = sparse ([2,6,1,3,2,4,3,5,4,6,1,5],
 	      [1,1,2,2,3,3,4,4,5,5,6,6], 1, 6, 6);
   xy = [0,4,8,6,4,2;5,0,5,7,5,7]';
   gplot (A, xy)
-  print (cstrcat (nm, ".", typ), cstrcat ("-d", typ))
+  print (cstrcat (nm, ".", typ), d_typ)
   hide_output ();
 endfunction
 
 function txtimages(nm,n,typ)
   a = 10*speye(n) + sparse(1:n,ceil([1:n]/2),1,n,n) + ...
       sparse(ceil([1:n]/2),1:n,1,n,n);
   if (strcmp (nm, "gplot") || strcmp (nm, "grid"))
     fid = fopen (sprintf ("%s.txt", nm), "wt");
@@ -89,37 +96,43 @@ function txtimages(nm,n,typ)
       endif
       ## printf("Text NNZ: Matrix %d, Chol %d, PermChol %d\n",nnz(a),nnz(r1),nnz(r2));
     endif
   endif
 endfunction
 
 function otherimages(nm,n,typ)
   hide_output ();
+  if (strcmp (typ, "eps"))
+    d_typ = "-depsc2";
+  else
+    d_typ = cstrcat ("-d", typ);
+  endif
+
   a = 10*speye(n) + sparse(1:n,ceil([1:n]/2),1,n,n) + ...
       sparse(ceil([1:n]/2),1:n,1,n,n);
   if (strcmp (nm, "spmatrix"))
     spy(a);
     axis("ij")
-    print(cstrcat("spmatrix.",typ),cstrcat("-d",typ))
+    print(cstrcat("spmatrix.",typ), d_typ)
     hide_output ();
   else
     if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_COLAMD")) &&
 	!isempty(findstr(octave_config_info ("DEFS"),"HAVE_CHOLMOD")))
       if (strcmp (nm, "spchol"))
 	r1 = chol(a);
 	spy(r1);
 	axis("ij")
-	print(cstrcat("spchol.",typ),cstrcat("-d",typ))
+	print(cstrcat("spchol.",typ), d_typ)
 	hide_output ();
       elseif (strcmp (nm, "spcholperm"))
 	[r2,p2,q2]=chol(a);
 	spy(r2);
 	axis("ij")
-	print(cstrcat("spcholperm.",typ),cstrcat("-d",typ))
+	print(cstrcat("spcholperm.",typ), d_typ)
 	hide_output ();
       endif
       ## printf("Image NNZ: Matrix %d, Chol %d, PermChol %d\n",nnz(a),nnz(r1),nnz(r2));
     endif
   endif
 endfunction
 
 function printsparse(a,nm)
@@ -157,16 +170,22 @@ function printsparse(a,nm)
       fprintf(fid,"  ");
     endif
   endfor
   fclose(fid);
 endfunction
 
 function femimages (nm,typ)
   hide_output ();
+  if (strcmp (typ, "eps"))
+    d_typ = "-depsc2";
+  else
+    d_typ = cstrcat ("-d", typ);
+  endif
+
   if (!isempty(findstr(octave_config_info ("DEFS"),"HAVE_COLAMD")) &&
       !isempty(findstr(octave_config_info ("DEFS"),"HAVE_CHOLMOD")) &&
       !isempty(findstr(octave_config_info ("DEFS"),"HAVE_UMFPACK")))
     ## build a rectangle
     node_y = [1;1.2;1.5;1.8;2]*ones(1,11);
     node_x = ones(5,1)*[1,1.05,1.1,1.2,1.3,1.5,1.7,1.8,1.9,1.95,2];
     nodes = [node_x(:), node_y(:)];
 
@@ -232,17 +251,17 @@ function femimages (nm,typ)
     V(idx) = S(idx,idx)\( Q(idx) - S(idx,D_nodes)*V(D_nodes) );
 
     velems = reshape( V(elemx), 4, E);
 
     sz = size(xelems,2);
 
     plot3 (xelems, yelems, velems);
     view (10, 10);
-    print(cstrcat(nm,".",typ),cstrcat("-d",typ))
+    print(cstrcat(nm,".",typ), d_typ)
     hide_output ();
   endif
 endfunction
 
 ## There is no sparse matrix implementation available because of missing
 ## libraries, plot sombreros instead. Also plot a nice title that we are
 ## sorry about that.
 function sombreroimage (nm, typ)
@@ -253,26 +272,31 @@ function sombreroimage (nm, typ)
     fputs (fid, "| Image unavailable because of a        |\n");
     fputs (fid, "| missing sparse matrix implementation. |\n");
     fputs (fid, "+---------------------------------------+\n");
     fclose (fid);
     return;
   else ## if (!strcmp (typ, "txt"))
 
     hide_output ();
+    if (strcmp (typ, "eps"))
+      d_typ = "-depsc2";
+    else
+      d_typ = cstrcat ("-d", typ);
+    endif
 
     x = y = linspace (-8, 8, 41)';
     [xx, yy] = meshgrid (x, y);
     r = sqrt (xx .^ 2 + yy .^ 2) + eps;
     z = sin (r) ./ r;
     unwind_protect
       mesh (x, y, z);
       title ("Sorry, graphics not available because octave was\\ncompiled without the sparse matrix implementation.");
     unwind_protect_cleanup
-      print (cstrcat (nm, ".", typ), cstrcat ("-d", typ));
+      print (cstrcat (nm, ".", typ), d_typ);
       hide_output ();
     end_unwind_protect
   endif
 endfunction
 
 ## generate something for the texinfo @image command to process
 function image_as_txt(nm)
   fid = fopen (sprintf ("%s.txt", nm), "wt");
