# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1278526888 -7200
#      Wed Jul 07 20:21:28 2010 +0200
# Node ID 84c35a483d1f1b7a397c2d1e2fc130060a0aa0c8
# Parent  56982359802800e877d48411f7630d30450c4bda
Support 'hold all' (Feature Request #30336)

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,18 @@
+2010-07-07  David Bateman  <dbateman@free.fr>
+
+	* __next_line_color__.m: Allow conditional initialisation of the
+	color_rotation variable.
+	* __next_line_style__.m: Allow conditional initialisation of the
+	style_rotation variable.
+	* hold.m: Support "hold all".
+	* newplot.m: Conditionally initialisation the line style and color
+	based on the __hold_all__ axes property.
+
 2010-07-04  Soren Hauberg  <hauberg@gmail.com>
 
 	* polynomial/deconv.m: ensure that the orientation of the third
 	input to 'filter' matches the orientation of 'y'.
 
 2010-07-02  Rik <octave@nomad.inbox5.com>
 
         * audio/wavread.m: Correctly handle non-word aligned data chunks.
diff --git a/scripts/plot/__next_line_color__.m b/scripts/plot/__next_line_color__.m
--- a/scripts/plot/__next_line_color__.m
+++ b/scripts/plot/__next_line_color__.m
@@ -27,20 +27,22 @@
 
 function rgb = __next_line_color__ (reset)
 
   persistent color_rotation;
   persistent num_colors;
   persistent color_index;
 
   if (nargin < 2)
-    if (nargin == 1 && reset)
-      color_rotation = get (gca (), "colororder");
-      num_colors = rows (color_rotation);
-      color_index = 1;
+    if (nargin == 1) 
+      if (reset || isempty (color_rotation))
+        color_rotation = get (gca (), "colororder");
+        num_colors = rows (color_rotation);
+        color_index = 1;
+      endif
     elseif (! isempty (color_rotation))
       rgb = color_rotation(color_index,:);
       if (++color_index > num_colors)
         color_index = 1;
         __next_line_style__ ("incr");
       endif
     else
       error ("__next_line_color__: color_rotation not initialized");
diff --git a/scripts/plot/__next_line_style__.m b/scripts/plot/__next_line_style__.m
--- a/scripts/plot/__next_line_style__.m
+++ b/scripts/plot/__next_line_style__.m
@@ -33,17 +33,17 @@ function [linestyle, marker] = __next_li
   if (nargin < 2)
     if (nargin == 1)
       if (ischar (reset) && strncmp (reset, "incr", 4))
         if (isempty (style_rotation))
           error ("__next_line_style__: style_rotation not initialized");
         elseif (++style_index > num_styles)
           style_index = 1;
         endif
-      elseif (reset)
+      elseif (reset || isempty (style_rotation))
         style_rotation = strsplit (get (gca (), "linestyleorder"), "|");
         num_styles = length (style_rotation);
         style_index = 1;
       endif
     elseif (! isempty (style_rotation))
       options = __pltopt__ ("__next_line_style__", 
                             style_rotation (style_index));
       linestyle = options.linestyle;
diff --git a/scripts/plot/hold.m b/scripts/plot/hold.m
--- a/scripts/plot/hold.m
+++ b/scripts/plot/hold.m
@@ -24,16 +24,21 @@
 ## whether new graphic objects are added to the plot or replace the existing
 ## objects.  
 ## 
 ## @table @code
 ## @item hold on
 ## Retain plot data and settings so that subsequent plot commands are displayed
 ## on a single graph.
 ##
+## @item hold all
+## Retain plot line color, line style, data and settings so that subsequent
+## plot commands are displayed on a single graph with the next line color and
+## style.
+##
 ## @item hold off
 ## Clear plot and restore default graphics settings before each new plot
 ## command.  (default).
 ##
 ## @item hold
 ## Toggle the current 'hold' state.
 ## @end table
 ## 
@@ -52,39 +57,44 @@ function hold (varargin)
   elseif (nargin > 0 && numel (varargin{1}) > 1 && ishandle (varargin{1}))
     print_usage ();
   else
     ax = gca ();
     fig = gcf ();
     nargs = numel (varargin);
   endif
 
+  hold_all = false;
   if (nargs == 0)
     turn_hold_off = ishold (ax);
   elseif (nargs == 1)
     state = varargin{1};
     if (ischar (state))
       if (strcmpi (state, "off"))
         turn_hold_off = true;
+      elseif (strcmpi (state, "all"))
+        turn_hold_off = false;
+        hold_all = true;
       elseif (strcmpi (state, "on"))
         turn_hold_off = false;
       else
         error ("hold: invalid hold state");
       endif
     endif
   else
     print_usage ();
   endif
 
   if (turn_hold_off)
     set (ax, "nextplot", "replace");
   else
     set (ax, "nextplot", "add");
     set (fig, "nextplot", "add");
   endif
+  set (ax, "__hold_all__", hold_all);
 
 endfunction
 
 %!demo
 %! clf
 %! A = rand (100);
 %! [X, Y] = find (A > 0.9);
 %! imshow (A)
diff --git a/scripts/plot/newplot.m b/scripts/plot/newplot.m
--- a/scripts/plot/newplot.m
+++ b/scripts/plot/newplot.m
@@ -21,33 +21,38 @@
 ## Prepare graphics engine to produce a new plot.  This function is
 ## called at the beginning of all high-level plotting functions.
 ## It is not normally required in user programs.
 ## @end deftypefn
 
 function newplot ()
 
   if (nargin == 0)
-    __next_line_color__ (true);
-    __next_line_style__ (true);
     cf = gcf ();
     fnp = get (cf, "nextplot");
     switch (fnp)
       ## FIXME -- probably we should do more than validate the nextplot
       ## property value...
       case "new"
       case "add"
       case "replacechildren"
         delete (get (cf, "children"))
       case "replace"
       otherwise
         error ("newplot: unrecognized nextplot property for current figure");
     endswitch
     ca = gca ();
     anp = get (ca, "nextplot");
+    if (strcmp (get (ca, "__hold_all__"), "off"))
+      __next_line_color__ (true);
+      __next_line_style__ (true);
+    else
+      __next_line_color__ (false);
+      __next_line_style__ (false);
+    endif
     switch (anp)
       case "new"
       case "add"
       case "replacechildren"
         delete (get (ca, "children"))
       case "replace"
         __go_axes_init__ (ca, "replace");
         __request_drawnow__ ();
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2010-07-07  David Bateman  <dbateman@free.fr>
+
+	* graphics.h.in (axes): Add hidden property __hold_all.
+
 2010-07-07  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-class.h (octave_class::map): Turn to octave_map.
 	* ov-class.cc (octave_class): Update methods.
 	* ov-base.h, ov-base.cc (octave_base_value::old_map_value) : Remove.
 	* ov.h, ov.cc (octave_value::old_map_value) : Remove.
 
 2010-07-06  David Bateman  <dbateman@free.fr>
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -2988,16 +2988,17 @@ public:
       radio_property yscale alu , "{linear}|log"
       radio_property zscale alu , "{linear}|log"
       radio_property xdir u , "{normal}|reverse"
       radio_property ydir u , "{normal}|reverse"
       radio_property zdir u , "{normal}|reverse"
       radio_property yaxislocation , "{left}|right|zero"
       radio_property xaxislocation , "{bottom}|top|zero"
       array_property view u , Matrix ()
+      bool_property __hold_all__ h , "off"
       radio_property nextplot , "new|add|replacechildren|{replace}"
       array_property outerposition u , default_axes_outerposition ()
       radio_property activepositionproperty , "{outerposition}|position"
       color_property ambientlightcolor , color_values (1, 1, 1)
       array_property cameraposition m , Matrix (1, 3, 0.0)
       array_property cameratarget m , Matrix (1, 3, 0.0)
       array_property cameraupvector m , Matrix ()
       double_property cameraviewangle m , 10.0
