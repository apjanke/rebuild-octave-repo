# HG changeset patch
# User Torsten <ttl@justmail.de>
# Date 1448751681 -3600
#      Sun Nov 29 00:01:21 2015 +0100
# Node ID 5c5e085a1ae637137035c5f5f4dea585d6d0c15d
# Parent  4d78e076a592237f446663c9b16c06b73a4893f6
allow selecting an encoding when saving a file (bug #45688)

* file-editor-tab.cc (file_editor_tab): rearrange the widgets in the status bar
  and add the current file encoding which is stored in a class variable;
  (load_file): get current encoding from class variable;
  (save_file): get current/new encoding from class variable, update status bar;
  (save_file_as): add combo box for file encoding to file selection dialog;
  (handle_combo_enc_current_index): new slot for changes in this combo box;

* file-editor-tab.h: new class variable, new slot for changing encoding in
  save-file-as dialog, new indocator in status bar

* resource-manager.cc (do_combo_encoding): moved function from settings dialog
  since it is also used from the editor tabs

* resource-manager.h: function for generating encoding entries togehter
  with its static wrapper

* settings-dialog.cc (settings_dialog): call function for generating encoding
  entries for combo box in the resource manager;
  (init_combo_encoding): function for generating encoding entries for
  combo box moved into the resource manager

* settings-dialog.h: removed function for encoding entries in combo box

diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -90,35 +90,42 @@ file_editor_tab::file_editor_tab (const 
            this, SLOT (handle_lines_changed ()));
 
   connect (_edit_area, SIGNAL (context_menu_edit_signal (const QString&)),
            this, SLOT (handle_context_menu_edit (const QString&)));
 
   // create statusbar for row/col indicator and eol mode
   _status_bar = new QStatusBar (this);
 
-  // eol mode
-  QLabel *eol_label = new QLabel (tr ("eol:"), this);
-  _eol_indicator = new QLabel ("",this);
-  QFontMetrics fm = eol_label->fontMetrics ();
-  _eol_indicator->setMinimumSize (5*fm.averageCharWidth (),0);
-  _status_bar->addPermanentWidget (eol_label, 0);
-  _status_bar->addPermanentWidget (_eol_indicator, 0);
-
   // row- and col-indicator
   _row_indicator = new QLabel ("", this);
-  _row_indicator->setMinimumSize (5*fm.averageCharWidth (),0);
+  QFontMetrics fm = _row_indicator->fontMetrics ();
+  _row_indicator->setMinimumSize (4.5*fm.averageCharWidth (),0);
   QLabel *row_label = new QLabel (tr ("line:"), this);
   _col_indicator = new QLabel ("", this);
   _col_indicator->setMinimumSize (4*fm.averageCharWidth (),0);
   QLabel *col_label = new QLabel (tr ("col:"), this);
-  _status_bar->addPermanentWidget (row_label, 0);
-  _status_bar->addPermanentWidget (_row_indicator, 0);
-  _status_bar->addPermanentWidget (col_label, 0);
-  _status_bar->addPermanentWidget (_col_indicator, 0);
+  _status_bar->addWidget (row_label, 0);
+  _status_bar->addWidget (_row_indicator, 0);
+  _status_bar->addWidget (col_label, 0);
+  _status_bar->addWidget (_col_indicator, 0);
+
+  // status bar: encoding
+  QLabel *enc_label = new QLabel (tr ("encoding:"), this);
+  _enc_indicator = new QLabel ("",this);
+  _status_bar->addWidget (enc_label, 0);
+  _status_bar->addWidget (_enc_indicator, 0);
+  _status_bar->addWidget (new QLabel (" ", this), 0);
+
+  // status bar: eol mode
+  QLabel *eol_label = new QLabel (tr ("eol:"), this);
+  _eol_indicator = new QLabel ("",this);
+  _status_bar->addWidget (eol_label, 0);
+  _status_bar->addWidget (_eol_indicator, 0);
+  _status_bar->addWidget (new QLabel (" ", this), 0);
 
   // Leave the find dialog box out of memory until requested.
   _find_dialog = 0;
   _find_dialog_is_visible = false;
 
   // symbols
   _edit_area->setMarginType (1, QsciScintilla::SymbolMargin);
   _edit_area->setMarginSensitivity (1, true);
@@ -166,16 +173,28 @@ file_editor_tab::file_editor_tab (const 
   connect (&_file_system_watcher, SIGNAL (fileChanged (const QString&)),
            this, SLOT (file_has_changed (const QString&)));
 
   QSettings *settings = resource_manager::get_settings ();
   if (settings)
     notice_settings (settings, true);
 
   setFocusProxy (_edit_area);
+
+  // encoding, not updated with the settings
+#if defined (Q_OS_WIN32)
+  _encoding = settings->value ("editor/default_encoding","SYSTEM")
+                               .toString ();
+#else
+  _encoding = settings->value ("editor/default_encoding","UTF-8")
+                               .toString ();
+#endif
+  _enc_indicator->setText (_encoding);
+  // no changes in encoding yet
+  _new_encoding = _encoding;
 }
 
 file_editor_tab::~file_editor_tab (void)
 {
   // Destroy items attached to _edit_area.
   QsciLexer *lexer = _edit_area->lexer ();
   if (lexer)
     {
@@ -1353,25 +1372,17 @@ file_editor_tab::load_file (const QStrin
     file_to_load = fileName;
   QFile file (file_to_load);
   if (!file.open (QFile::ReadOnly))
     return file.errorString ();
 
   // read the file
   QTextStream in (&file);
   // set the desired codec
-  QSettings *settings = resource_manager::get_settings ();
-#if defined (Q_OS_WIN32)
-  QString encoding = settings->value ("editor/default_encoding","SYSTEM")
-                               .toString ();
-#else
-  QString encoding = settings->value ("editor/default_encoding","UTF-8")
-                               .toString ();
-#endif
-  QTextCodec *codec = QTextCodec::codecForName (encoding.toAscii ());
+  QTextCodec *codec = QTextCodec::codecForName (_encoding.toAscii ());
   in.setCodec(codec);
 
   QApplication::setOverrideCursor (Qt::WaitCursor);
   _edit_area->setText (in.readAll ());
   _edit_area->setEolMode (detect_eol_mode ());
   QApplication::restoreOverrideCursor ();
 
   _copy_available = false;     // no selection yet available
@@ -1518,26 +1529,20 @@ file_editor_tab::save_file (const QStrin
       show_dialog (msgBox, false);
 
       return;
     }
 
   // save the contents into the file
   QTextStream out (&file);
 
+  // consider a possible new encoding (from the save-file-as dialog)
+  _encoding = _new_encoding;
   // set the desired codec
-  QSettings *settings = resource_manager::get_settings ();
-#if defined (Q_OS_WIN32)
-  QString encoding = settings->value ("editor/default_encoding","SYSTEM")
-                               .toString ();
-#else
-  QString encoding = settings->value ("editor/default_encoding","UTF-8")
-                               .toString ();
-#endif
-  QTextCodec *codec = QTextCodec::codecForName (encoding.toAscii ());
+  QTextCodec *codec = QTextCodec::codecForName (_encoding.toAscii ());
   out.setCodec(codec);
 
   QApplication::setOverrideCursor (Qt::WaitCursor);
   out << _edit_area->text ();
   out.flush ();
   QApplication::restoreOverrideCursor ();
   file.flush ();
   file.close ();
@@ -1547,32 +1552,36 @@ file_editor_tab::save_file (const QStrin
   file_to_save = file_info.canonicalFilePath ();
 
   // save filename after closing file as set_file_name starts watching again
   set_file_name (file_to_save);   // make absolute
 
   // set the window title to actual filename (not modified)
   update_window_title (false);
 
-  // files is save -> not modified
+  // files is save -> not modified, update encoding in statusbar
   _edit_area->setModified (false);
+  _enc_indicator->setText (_encoding);
 
   if (remove_on_success)
     {
       emit tab_remove_request ();
       return;  // Don't touch member variables after removal
     }
 }
 
 void
 file_editor_tab::save_file_as (bool remove_on_success)
 {
   // Simply put up the file chooser dialog box with a slot connection
   // then return control to the system waiting for a file selection.
 
+  // reset _new_encoding
+  _new_encoding = _encoding;
+
   // If the tab is removed in response to a QFileDialog signal, the tab
   // can't be a parent.
   QFileDialog* fileDialog;
   if (remove_on_success)
     {
       // If tab is closed, "this" cannot be parent in which case modality
       // has no effect.  Disable editing instead.
       _edit_area->setReadOnly (true);
@@ -1581,49 +1590,57 @@ file_editor_tab::save_file_as (bool remo
   else
     fileDialog = new QFileDialog (this);
 
   // Giving trouble under KDE (problem is related to Qt signal handling on unix,
   // see https://bugs.kde.org/show_bug.cgi?id=260719 ,
   // it had/has no effect on Windows, though)
   fileDialog->setOption(QFileDialog::DontUseNativeDialog, true);
 
-  // get the dialog's layout for adding extra elements
-  QGridLayout *dialog_layout = dynamic_cast<QGridLayout*> (fileDialog->layout ());
-  int rows = dialog_layout->rowCount ();
-
   // define a new grid layout with the extra elements
   QGridLayout *extra = new QGridLayout (fileDialog);
-  QSpacerItem *spacer = new QSpacerItem (1,1,QSizePolicy::Expanding,
-                                             QSizePolicy::Fixed);
   QFrame *separator = new QFrame (fileDialog);
   separator->setFrameShape (QFrame::HLine);   // horizontal line as separator
   separator->setFrameStyle (QFrame::Sunken);
 
   // combo box for choosing new line ending chars
   QLabel *label_eol = new QLabel (tr ("Line Endings:"));
   QComboBox *combo_eol = new QComboBox ();
   combo_eol->addItem ("Windows (CRLF)");  // ensure the same order as in
   combo_eol->addItem ("Mac (CR)");        // the settings dialog
   combo_eol->addItem ("Unix (LF)");
   _save_as_desired_eol = _edit_area->eolMode ();      // init with current eol
   combo_eol->setCurrentIndex (_save_as_desired_eol);
 
-  // track changes in the combo box
+  // combo box for encoding
+  QLabel *label_enc = new QLabel (tr ("File Encoding:"));
+  QComboBox *combo_enc = new QComboBox ();
+  resource_manager::combo_encoding (combo_enc, _encoding);
+
+  // track changes in the combo boxes
   connect (combo_eol, SIGNAL (currentIndexChanged (int)),
            this, SLOT (handle_combo_eol_current_index (int)));
+  connect (combo_enc, SIGNAL (currentIndexChanged (QString)),
+           this, SLOT (handle_combo_enc_current_index (QString)));
 
   // build the extra grid layout
-  extra->addWidget (separator,0,0,1,3);
+  extra->addWidget (separator,0,0,1,6);
   extra->addWidget (label_eol,1,0);
   extra->addWidget (combo_eol,1,1);
-  extra->addItem   (spacer,   1,2);
+  extra->addItem   (new QSpacerItem (1,20,QSizePolicy::Fixed,
+                                          QSizePolicy::Fixed), 1,2);
+  extra->addWidget (label_enc,1,3);
+  extra->addWidget (combo_enc,1,4);
+  extra->addItem   (new QSpacerItem (1,20,QSizePolicy::Expanding,
+                                          QSizePolicy::Fixed), 1,5);
 
   // and add the extra grid layout to the dialog's layout
-  dialog_layout->addLayout (extra,rows,0,1,dialog_layout->columnCount ());
+  QGridLayout *dialog_layout = dynamic_cast<QGridLayout*> (fileDialog->layout ());
+  dialog_layout->addLayout (extra,dialog_layout->rowCount (),0,
+                                  1,dialog_layout->columnCount ());
 
   // add the possible filters and the default suffix
   QStringList filters;
   filters << tr ("Octave Files (*.m)")
           << tr ("All Files (*)");
   fileDialog->setNameFilters (filters);
   fileDialog->setDefaultSuffix ("m");
 
@@ -1673,16 +1690,22 @@ file_editor_tab::save_file_as (bool remo
 
 void
 file_editor_tab::handle_combo_eol_current_index (int index)
 {
   _save_as_desired_eol = static_cast<QsciScintilla::EolMode> (index);
 }
 
 void
+file_editor_tab::handle_combo_enc_current_index (QString text)
+{
+  _new_encoding = text;
+}
+
+void
 file_editor_tab::handle_save_as_filter_selected (const QString& filter)
 {
   QFileDialog *file_dialog = qobject_cast<QFileDialog *> (sender ());
 
   QRegExp rx ("\\*\\.([^ ^\\)]*)[ \\)]");   // regexp for suffix in filter
   int index = rx.indexIn (filter,0);        // get first suffix in filter
 
   if (index > -1)
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -160,16 +160,17 @@ private slots:
   void handle_find_dialog_finished (int decision);
 
   // When user closes QFileDialog box.
   void handle_save_file_as_answer (const QString& fileName);
   void handle_save_file_as_answer_close (const QString& fileName);
   void handle_save_file_as_answer_cancel ();
   void handle_save_as_filter_selected (const QString& filter);
   void handle_combo_eol_current_index (int index);
+  void handle_combo_enc_current_index (QString text);
 
   // When apis preparation has finished and is ready to save
   void save_apis_info ();
 
   // When the numer of lines changes -> adapt width of margin
   void auto_margin_width ();
 
   void handle_cursor_moved (int line, int col);
@@ -223,22 +224,25 @@ private:
   void update_eol_indicator ();
 
   octave_qscintilla *_edit_area;
 
   QStatusBar *_status_bar;
   QLabel *_row_indicator;
   QLabel *_col_indicator;
   QLabel *_eol_indicator;
+  QLabel *_enc_indicator;
 
   QsciScintilla::EolMode _save_as_desired_eol;
 
   QString _file_name;
   QString _file_name_short;
   QString _ced;
+  QString _encoding;
+  QString _new_encoding;
 
   bool _long_title;
   bool _copy_available;
   bool _is_octave_file;
   bool _always_reload_changed_files;
   bool _smart_indent;
 
   QFileSystemWatcher _file_system_watcher;
diff --git a/libgui/src/resource-manager.cc b/libgui/src/resource-manager.cc
--- a/libgui/src/resource-manager.cc
+++ b/libgui/src/resource-manager.cc
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 
 #include <string>
 
 #include <QFile>
 #include <QDir>
 #include <QNetworkProxy>
 #include <QLibraryInfo>
 #include <QMessageBox>
+#include <QTextCodec>
 
 #include "error.h"
 #include "file-ops.h"
 #include "help.h"
 #include "oct-env.h"
 #include "singleton-cleanup.h"
 
 #include "defaults.h"
@@ -320,8 +321,57 @@ QIcon
 resource_manager::do_icon (const QString& icon_name, bool fallback)
 {
   if (fallback)
     return QIcon::fromTheme (icon_name,
                              QIcon (":/actions/icons/" + icon_name + ".png"));
   else
     return QIcon::fromTheme (icon_name);
 }
+
+// initialize a given combo box with available text encodings
+void
+resource_manager::do_combo_encoding (QComboBox *combo, QString current)
+{
+  // get the codec name for each mib
+  QList<int> all_mibs = QTextCodec::availableMibs ();
+  QStringList all_codecs;
+  foreach (int mib, all_mibs)
+    {
+      QTextCodec *c = QTextCodec::codecForMib (mib);
+      all_codecs << c->name ().toUpper ();
+    }
+  all_codecs.removeDuplicates ();
+  qSort (all_codecs);
+
+  // the default encoding
+#if defined (Q_OS_WIN32)
+  QString def_enc = "SYSTEM";
+#else
+  QString def_enc = "UTF-8";
+#endif
+
+  // get the value from the settings file if no current encoding is given
+  QString enc = current;
+  if (enc.isEmpty ())
+    {
+      enc = settings->value ("editor/default_encoding",def_enc).toString ();
+      if (enc.isEmpty ())  // still empty?
+        enc = def_enc;     // take default
+    }
+
+  // fill the combo box
+  foreach (QString c, all_codecs)
+    combo->addItem (c);
+
+  // prepend the default item
+  combo->insertSeparator (0);
+  combo->insertItem (0, def_enc);
+
+  // select the current/default item
+  int idx = combo->findText (enc);
+  if (idx >= 0)
+    combo->setCurrentIndex (idx);
+  else
+    combo->setCurrentIndex (0);
+
+  combo->setMaxVisibleItems (12);
+}
diff --git a/libgui/src/resource-manager.h b/libgui/src/resource-manager.h
--- a/libgui/src/resource-manager.h
+++ b/libgui/src/resource-manager.h
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #ifndef RESOURCEMANAGER_H
 #define RESOURCEMANAGER_H
 
 #include <QDesktopServices>
 #include <QIcon>
+#include <QComboBox>
 #include <QMap>
 #include <QSettings>
 #include <QTranslator>
 
 class resource_manager : public QObject
 {
   Q_OBJECT
 
@@ -71,16 +72,22 @@ public:
   }
 
   static void set_settings (const QString& file)
   {
     if (instance_ok ())
       instance->do_set_settings (file);
   }
 
+  static void combo_encoding (QComboBox *combo, QString current = QString ())
+  {
+    if (instance_ok ())
+      instance->do_combo_encoding (combo, current);
+  }
+
   static QString get_gui_translation_dir (void);
 
   static void config_translators (QTranslator*, QTranslator*, QTranslator*);
 
   static void update_network_settings (void)
   {
     if (instance_ok ())
       instance->do_update_network_settings ();
@@ -134,11 +141,12 @@ private:
   void do_set_settings (const QString& file);
 
   void do_update_network_settings (void);
 
   bool do_is_first_run (void) const;
 
   QIcon do_icon (const QString& icon, bool fallback);
 
+  void do_combo_encoding (QComboBox *combo, QString current);
 };
 
 #endif // RESOURCEMANAGER_H
diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -371,17 +371,17 @@ settings_dialog::settings_dialog (QWidge
   //
   ui->useCustomFileEditor->setChecked (settings->value ("useCustomFileEditor",
                                                         false).toBool ());
   ui->customFileEditor->setText (
     settings->value ("customFileEditor").toString ());
   ui->editor_showLineNumbers->setChecked (
     settings->value ("editor/showLineNumbers",true).toBool ());
 
-  init_combo_encoding (settings);
+  resource_manager::combo_encoding (ui->editor_combo_encoding);
 
   default_var = QColor (240, 240, 240);
   QColor setting_color = settings->value ("editor/highlight_current_line_color",
                                           default_var).value<QColor> ();
   _editor_current_line_color = new color_picker (setting_color);
   ui->editor_grid_current_line->addWidget (_editor_current_line_color,0,3);
   _editor_current_line_color->setMinimumSize (50,10);
   _editor_current_line_color->setEnabled (false);
@@ -1017,57 +1017,16 @@ settings_dialog::set_disabled_pref_file_
     }
   else
     {
       ui->le_file_browser_dir->setDisabled (disable);
       ui->pb_file_browser_dir->setDisabled (disable);
     }
 }
 
-// initialize the combo box with possible text encodings
-void
-settings_dialog::init_combo_encoding (QSettings *settings)
-{
-  // get the codec name for each mib
-  QList<int> all_mibs = QTextCodec::availableMibs ();
-  QStringList all_codecs;
-  foreach (int mib, all_mibs)
-    {
-      QTextCodec *c = QTextCodec::codecForMib (mib);
-      all_codecs << c->name ().toUpper ();
-    }
-  all_codecs.removeDuplicates ();
-
-  // sort and prepend meaningfull text for system's default codec
-#if defined (Q_OS_WIN32)
-  QString def_enc = "SYSTEM";
-#else
-  QString def_enc = "UTF-8";
-#endif
-  qSort (all_codecs);
-  ui->editor_combo_encoding->insertSeparator (0);
-  ui->editor_combo_encoding->insertItem (0, def_enc);
-
-  // get the value from the settings file (system is default)
-  QString encoding = settings->value ("editor/default_encoding",def_enc)
-                               .toString ();
-
-  // fill the combo box and select the current item or system if
-  // current item from the settings file can not be found
-  foreach (QString c, all_codecs)
-    ui->editor_combo_encoding->addItem (c);
-  int idx = ui->editor_combo_encoding->findText (encoding);
-  if (idx >= 0)
-    ui->editor_combo_encoding->setCurrentIndex (idx);
-  else
-    ui->editor_combo_encoding->setCurrentIndex (0);
-
-  ui->editor_combo_encoding->setMaxVisibleItems (12);
-}
-
 // slots for import/export of shortcut sets
 void
 settings_dialog::import_shortcut_set ()
 {
   shortcut_manager::import_export (shortcut_manager::OSC_IMPORT);
 }
 
 void
diff --git a/libgui/src/settings-dialog.h b/libgui/src/settings-dialog.h
--- a/libgui/src/settings-dialog.h
+++ b/libgui/src/settings-dialog.h
@@ -59,18 +59,16 @@ private slots:
   void export_shortcut_set ();
   void default_shortcut_set ();
 
 private:
   Ui::settings_dialog * ui;
 
   void write_changed_settings (bool closing);
 
-  void init_combo_encoding (QSettings *settings);
-
   void read_workspace_colors (QSettings *settings);
   void write_workspace_colors (QSettings *settings);
 
   void read_terminal_colors (QSettings *settings);
   void write_terminal_colors (QSettings *settings);
 
   color_picker *_widget_title_bg_color;
   color_picker *_widget_title_bg_color_active;
