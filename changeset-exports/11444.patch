# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294215789 18000
#      Wed Jan 05 03:23:09 2011 -0500
# Node ID 08f8b0d96091556d3cdf95bab9829c04ff5a25ad
# Parent  cbe3963daefd3685a1814a2c3500158b72ce496d
doc fixes

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2011-01-05  John W. Eaton  <jwe@octave.org>
+
+	* interpreter/plot.txi (Introduction to Plotting): Formatting
+	and style fixes.  Eliminate redundant example.
+
 2011-01-03  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/octave.texi: Add new menu item "Correlation and 
 	Regression Analysis"
 	* interpreter/stats.txi: Update documentation chapter on
 	basic statistics.
 
 2010-12-31  Rik  <octave@nomad.inbox5.com>
diff --git a/doc/interpreter/plot.txi b/doc/interpreter/plot.txi
--- a/doc/interpreter/plot.txi
+++ b/doc/interpreter/plot.txi
@@ -33,18 +33,18 @@
 @section Introduction to Plotting
 
 Earlier versions of Octave provided plotting through the use of
 gnuplot.  This capability is still available.  But, a newer plotting
 capability is provided by access to OpenGL@.  Which plotting system
 is used is controlled by the @code{backend} function.  (See @ref{Graphics
 Backends}.)
 
-The function call @code{backend("fltk")} selects the fltk/OpenGL system, and
-@code{backend("gnuplot")} selects the gnuplot system.
+The function call @code{backend ("fltk")} selects the fltk/OpenGL system, and
+@code{backend ("gnuplot")} selects the gnuplot system.
 The two systems may be used selectively through the use of the @code{backend}
 property of the graphics handle for each figure.  This is
 explained in @ref{Graphics Data Structures}.
 
 @node High-Level Plotting
 @section High-Level Plotting
 
 Octave provides simple means to create many different types of two- and
@@ -877,62 +877,62 @@ functions @code{area}, @code{bar}, @code
 @code{contourf}, @code{contour3}, @code{surf}, @code{mesh}, @code{surfc},
 @code{meshc}, @code{errorbar}, @code{quiver}, @code{quiver3}, @code{scatter},
 @code{scatter3}, @code{stair}, @code{stem}, @code{stem3} each return a handle
 as documented in @ref{doc-datasources,, Data Sources}.
 
 
 The graphics objects are arranged in a hierarchy:
 
-1. The root is at 0.  i.e., @code{get(0)} returns the properties of the root
+1. The root is at 0.  i.e., @code{get (0)} returns the properties of the root
    object.
 
 2. Below the root are @code{figure} objects.
 
 3. Below the @code{figure} objects are @code{axes}.
 
 4. Below the @code{axes} objects are
 @code{line}, @code{text}, @code{patch},
 @code{surface}, and @code{image} objects.
 
 Graphics handles may be distinguished from function handles (@ref{Function
-Handles}) by means of the function @code{ishandle()}.  @code{ishandle} returns
+Handles}) by means of the function @code{ishandle}.  @code{ishandle} returns
 true if its argument is a handle of a graphics object.  In addition, the figure
-object may be tested using @code{isfigure()}.  @code{isfigure} returns true only
+object may be tested using @code{isfigure}.  @code{isfigure} returns true only
 if its argument is a handle of a figure. ishghandle() is synonymous with
 ishandle().  The @code{whos} function can be used to show the object type of
 each currently defined graphics handle.  (Note: this is not true today, but it
 is, I hope, considered an error in whos.  It may be better to have whos just
 show graphics_handle as the class, and provide a new function which, given a
 graphics handle, returns its object type.  This could generalize the ishandle()
 functions and, in fact, replace them.)
 
 The @code{get} and @code{set} commands are
 used to obtain and set the values of properties of graphics objects.  In
 addition, the @code{get} command may be used to obtain property names.
 
 For example, the property "type" of the graphics object pointed to by the
 graphics handle h may be displayed by:
 
-@code{get(h, "type")}
-
-The properties and their current values are returned by @code{get(h)}
+@example
+get (h, "type")
+@end example
+
+The properties and their current values are returned by @code{get (h)}
 where h is a handle of a graphics object.  If only the names of the
 allowed properties are wanted they may be displayed by:
-@code{get(h, "");}
+@code{get (h, "")}.
 
 Thus, for example,
-@c @example
-@smallformat
+@smallexample
 @group
-@verbatim
-h=figure();
-get(h,"type")
+h = figure ();
+get (h, "type")
 ans = figure
-get(h, "");
+get (h, "");
 error: get: ambiguous figure property name ; possible matches:
 
 __backend__            currentobject          paperposition          toolbar
 __enhanced__           deletefcn              paperpositionmode      type
 __modified__           dockcontrols           papersize              uicontextmenu
 __myhandle__           doublebuffer           papertype              units
 __plot_stream__        filename               paperunits             userdata
 alphamap               handlevisibility       parent                 visible
@@ -940,73 +940,26 @@ beingdeleted           hittest          
 busyaction             integerhandle          pointershapecdata      windowbuttonmotionfcn
 buttondownfcn          interruptible          pointershapehotspot    windowbuttonupfcn
 children               inverthardcopy         position               windowbuttonwheelfcn
 clipping               keypressfcn            renderer               windowstyle
 closerequestfcn        keyreleasefcn          renderermode           wvisual
 color                  menubar                resize                 wvisualmode
 colormap               mincolormap            resizefcn              xdisplay
 createfcn              name                   selected               xvisual
-currentpoint          nextplot               selectionhighlight     xvisualmode
+currentpoint           nextplot               selectionhighlight     xvisualmode
 currentaxes            numbertitle            selectiontype
 currentcharacter       paperorientation       tag
-@end verbatim
 @end group
-@end smallformat
-@c @end example
-@c @end flushleft
-@c @example
-@smallformat
-@group
-@verbatim
-aa=axes();
-get(aa,"");
-error: get: ambiguous axes property name ; possible matches:
-
-__modified__            drawmode                tickdir                 xtickmode
-__myhandle__            fontangle               tickdirmode             yaxislocation
-activepositionproperty  fontname                ticklength              ycolor
-alim                    fontsize                tightinset              ydir
-alimmode                fontunits               title                   ygrid
-ambientlightcolor       fontweight              type                    ylabel
-beingdeleted            gridlinestyle           uicontextmenu           ylim
-box                     handlevisibility        units                   ylimmode
-busyaction              hittest                 userdata                yminorgrid
-buttondownfcn           interpreter             view                    yminortick
-cameraposition          interruptible           visible                 yscale
-camerapositionmode      key                     x_normrendertransform   ytick
-cameratarget            keybox                  x_projectiontransform   yticklabel
-cameratargetmode        keypos                  x_rendertransform       yticklabelmode
-cameraupvector          keyreverse              x_viewporttransform     ytickmode
-cameraupvectormode      layer                   x_viewtransform         zcolor
-cameraviewangle         linestyleorder          xaxislocation           zdir
-cameraviewanglemode     linewidth               xcolor                  zgrid
-children                minorgridlinestyle      xdir                    zlabel
-clim                    nextplot                xgrid                   zlim
-climmode                outerposition           xlabel                  zlimmode
-@end verbatim
-@end group
-@group
-@verbatim
-clipping                parent                  xlim                    zminorgrid
-color                   plotboxaspectratio      xlimmode                zminortick
-colororder              plotboxaspectratiomode  xminorgrid              zscale
-createfcn               position                xminortick              ztick
-currentpoint            projection              xscale                  zticklabel
-dataaspectratio         selected                xtick                   zticklabelmode
-dataaspectratiomode     selectionhighlight      xticklabel              ztickmode
-deletefcn               tag                     xticklabelmode
-@end verbatim
-@end group
-@end smallformat
-@c @end example
+@end smallexample
 
 The root figure has index 0.  Its properties may be displayed by:
-@code{get(0,"")}.
-The uses of @code{get()} and @code{set()} are further explained in
+@code{get (0, "")}.
+
+The uses of @code{get} and @code{set} are further explained in
 @ref{doc-get,,get}, @ref{doc-set,,set}.
 
 @DOCSTRING(isprop)
 
 @node Graphics Objects
 @subsection Graphics Objects
 @cindex graphics objects
 
