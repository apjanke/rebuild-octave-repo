# HG changeset patch
# User jwe
# Date 1193411675 0
#      Fri Oct 26 15:14:35 2007 +0000
# Node ID c3b479e753dd21d1f8585aa530be5f9077a7c181
# Parent  7593f8e83a2e52704f886fac38262ca834df9f05
[project @ 2007-10-26 15:14:34 by jwe]

diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -61,17 +61,17 @@ Numerical:
     M.
 
   * Make QR more memory efficient for large matrices when not all the
     columns of Q are required (apparently this is not handled by the
     lapack code yet).
 
   * Consider making the behavior of the / and \ operators for
     non-square systems compatible with Matlab.  Currently, they return
-    the minimum norm solution from DGELSY, which behaves differently.
+    the minimum norm solution from DGELSS, which behaves differently.
 
 ---------------
 Sparse Matrices:
 ---------------
 
   * Improve QR factorization functions, using idea based on CSPARSE
     cs_dmsol.m 
 
diff --git a/doc/interpreter/linalg.txi b/doc/interpreter/linalg.txi
--- a/doc/interpreter/linalg.txi
+++ b/doc/interpreter/linalg.txi
@@ -58,17 +58,17 @@ backward substitution using the @sc{Lapa
 attempt Cholesky factorization using the @sc{Lapack} xPOTRF function.
 
 @item If the Cholesky factorization failed or the matrix is not
 hermitian with a real positive diagonal, and the matrix is square, factorize 
 using the @sc{Lapack} xGETRF function.
 
 @item  If the matrix is not square, or any of the previous solvers flags
 a singular or near singular matrix, find a least squares solution using
-the @sc{Lapack} xGELSY function.
+the @sc{Lapack} xGELSS function.
 @end enumerate
 
 The user can force the type of the matrix with the @code{matrix_type}
 function. This overcomes the cost of discovering the type of the matrix.
 However, it should be noted incorrectly identifying the type of the matrix
 will lead to unpredictable results, and so @code{matrix_type} should be
 used with care.
 
diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -115,19 +115,19 @@ extern "C"
   F77_RET_T
   F77_FUNC (zgecon, ZGECON) (F77_CONST_CHAR_ARG_DECL,
 			     const octave_idx_type&, Complex*, 
 			     const octave_idx_type&, const double&, double&, 
 			     Complex*, double*, octave_idx_type&
 			     F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
-  F77_FUNC (zgelsy, ZGELSY) (const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
+  F77_FUNC (zgelss, ZGELSS) (const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
 			     Complex*, const octave_idx_type&, Complex*,
-			     const octave_idx_type&, octave_idx_type*, double&, octave_idx_type&,
+			     const octave_idx_type&, double*, double&, octave_idx_type&,
 			     Complex*, const octave_idx_type&, double*, octave_idx_type&);
 
   F77_RET_T
   F77_FUNC (zpotrf, ZPOTRF) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&, 
 			     Complex*, const octave_idx_type&, 
 			     octave_idx_type& F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
@@ -2443,50 +2443,53 @@ ComplexMatrix::lssolve (const ComplexMat
       ComplexMatrix result (nrr, nrhs);
 
       for (octave_idx_type j = 0; j < nrhs; j++)
 	for (octave_idx_type i = 0; i < m; i++)
 	  result.elem (i, j) = b.elem (i, j);
 
       Complex *presult = result.fortran_vec ();
 
-      Array<octave_idx_type> jpvt (n);
-      octave_idx_type *pjpvt = jpvt.fortran_vec ();
+      octave_idx_type len_s = m < n ? m : n;
+      Array<double> s (len_s);
+      double *ps = s.fortran_vec ();
 
       double rcond = -1.0;
 
-      Array<double> rwork (2 * n);
+      octave_idx_type lrwork = (5 * (m < n ? m : n)) - 4;
+      lrwork = lrwork > 1 ? lrwork : 1;
+      Array<double> rwork (lrwork);
       double *prwork = rwork.fortran_vec ();
 
-      // Ask ZGELSY what the dimension of WORK should be.
+      // Ask ZGELSS what the dimension of WORK should be.
 
       octave_idx_type lwork = -1;
 
       Array<Complex> work (1);
 
-      F77_XFCN (zgelsy, ZGELSY, (m, n, nrhs, tmp_data, m, presult,
-				 nrr, pjpvt, rcond, rank,
+      F77_XFCN (zgelss, ZGELSS, (m, n, nrhs, tmp_data, m, presult,
+				 nrr, ps, rcond, rank,
 				 work.fortran_vec (), lwork, prwork,
 				 info));
 
       if (f77_exception_encountered)
-	(*current_liboctave_error_handler) ("unrecoverable error in zgelsy");
+	(*current_liboctave_error_handler) ("unrecoverable error in zgelss");
       else
 	{
 	  lwork = static_cast<octave_idx_type> (std::real (work(0)));
 	  work.resize (lwork);
 
-	  F77_XFCN (zgelsy, ZGELSY, (m, n, nrhs, tmp_data, m, presult,
-				     nrr, pjpvt, rcond, rank,
+	  F77_XFCN (zgelss, ZGELSS, (m, n, nrhs, tmp_data, m, presult,
+				     nrr, ps, rcond, rank,
 				     work.fortran_vec (), lwork,
 				     prwork, info));
 
 	  if (f77_exception_encountered)
 	    (*current_liboctave_error_handler)
-	      ("unrecoverable error in zgelsy");
+	      ("unrecoverable error in zgelss");
 	  else
 	    {
 	      retval.resize (n, nrhs);
 	      for (octave_idx_type j = 0; j < nrhs; j++)
 		for (octave_idx_type i = 0; i < n; i++)
 		  retval.elem (i, j) = result.elem (i, j);
 	    }
 	}
@@ -2555,50 +2558,53 @@ ComplexMatrix::lssolve (const ComplexCol
       octave_idx_type nrr = m > n ? m : n;
       ComplexColumnVector result (nrr);
 
       for (octave_idx_type i = 0; i < m; i++)
 	result.elem (i) = b.elem (i);
 
       Complex *presult = result.fortran_vec ();
 
-      Array<octave_idx_type> jpvt (n);
-      octave_idx_type *pjpvt = jpvt.fortran_vec ();
+      octave_idx_type len_s = m < n ? m : n;
+      Array<double> s (len_s);
+      double *ps = s.fortran_vec ();
 
       double rcond = -1.0;
 
-      Array<double> rwork (2 * n);
+      octave_idx_type lrwork = (5 * (m < n ? m : n)) - 4;
+      lrwork = lrwork > 1 ? lrwork : 1;
+      Array<double> rwork (lrwork);
       double *prwork = rwork.fortran_vec ();
 
-      // Ask ZGELSY what the dimension of WORK should be.
+      // Ask ZGELSS what the dimension of WORK should be.
 
       octave_idx_type lwork = -1;
 
       Array<Complex> work (1);
 
-      F77_XFCN (zgelsy, ZGELSY, (m, n, nrhs, tmp_data, m, presult,
-				 nrr, pjpvt, rcond, rank,
+      F77_XFCN (zgelss, ZGELSS, (m, n, nrhs, tmp_data, m, presult,
+				 nrr, ps, rcond, rank,
 				 work.fortran_vec (), lwork, prwork,
 				 info));
 
       if (f77_exception_encountered)
-	(*current_liboctave_error_handler) ("unrecoverable error in zgelsy");
+	(*current_liboctave_error_handler) ("unrecoverable error in zgelss");
       else
 	{
 	  lwork = static_cast<int> (std::real (work(0)));
 	  work.resize (lwork);
 
-	  F77_XFCN (zgelsy, ZGELSY, (m, n, nrhs, tmp_data, m, presult,
-				     nrr, pjpvt, rcond, rank,
+	  F77_XFCN (zgelss, ZGELSS, (m, n, nrhs, tmp_data, m, presult,
+				     nrr, ps, rcond, rank,
 				     work.fortran_vec (), lwork,
 				     prwork, info));
 
 	  if (f77_exception_encountered)
 	    (*current_liboctave_error_handler)
-	      ("unrecoverable error in zgelsy");
+	      ("unrecoverable error in zgelss");
 	  else
 	    {
 	      retval.resize (n);
 	      for (octave_idx_type i = 0; i < n; i++)
 		retval.elem (i) = result.elem (i);
 	    }
 	}
     }
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2007-09-26  John W. Eaton  <jwe@octave.org>
+
+	* dMatrix.cc (lssolve): Revert change of 2007-09-26.
+	* CMatrix.cc (lssolve): Ditto.
+
 2007-10-25  John W. Eaton  <jwe@octave.org>
 
 	* oct-time.cc (octave_gmtime::init, octave_localtime::init):
 	Call unix_time on arg instead of relying on conversion operator.
 
 	* oct-time.h (octave_time::double_value): New function.
 	(octave_time::operator double () const): Delete.
 	(octave_time::operator time_t () const): Delete.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -112,19 +112,19 @@ extern "C"
 
   F77_RET_T
   F77_FUNC (dgecon, DGECON) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&, double*, 
 			     const octave_idx_type&, const double&, double&, 
 			     double*, octave_idx_type*, octave_idx_type&
 			     F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
-  F77_FUNC (dgelsy, DGELSY) (const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
+  F77_FUNC (dgelss, DGELSS) (const octave_idx_type&, const octave_idx_type&, const octave_idx_type&,
 			     double*, const octave_idx_type&, double*,
-			     const octave_idx_type&, octave_idx_type*, double&, octave_idx_type&,
+			     const octave_idx_type&, double*, double&, octave_idx_type&,
 			     double*, const octave_idx_type&, octave_idx_type&);
 
   F77_RET_T
   F77_FUNC (dpotrf, DPOTRF) (F77_CONST_CHAR_ARG_DECL, const octave_idx_type&, 
 			     double *, const octave_idx_type&, 
 			     octave_idx_type& F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
@@ -2067,45 +2067,46 @@ Matrix::lssolve (const Matrix& b, octave
       Matrix result (nrr, nrhs, 0.0);
 
       for (octave_idx_type j = 0; j < nrhs; j++)
 	for (octave_idx_type i = 0; i < m; i++)
 	  result.elem (i, j) = b.elem (i, j);
 
       double *presult = result.fortran_vec ();
 
-      Array<octave_idx_type> jpvt (n);
-      octave_idx_type *pjpvt = jpvt.fortran_vec ();
+      octave_idx_type len_s = m < n ? m : n;
+      Array<double> s (len_s);
+      double *ps = s.fortran_vec ();
 
       double rcond = -1.0;
 
-      // Ask DGELSY what the dimension of WORK should be.
+      // Ask DGELSS what the dimension of WORK should be.
 
       octave_idx_type lwork = -1;
 
       Array<double> work (1);
 
-      F77_XFCN (dgelsy, DGELSY, (m, n, nrhs, tmp_data, m, presult, nrr, pjpvt,
+      F77_XFCN (dgelss, DGELSS, (m, n, nrhs, tmp_data, m, presult, nrr, ps,
 				 rcond, rank, work.fortran_vec (),
 				 lwork, info));
 
       if (f77_exception_encountered)
-	(*current_liboctave_error_handler) ("unrecoverable error in dgelsy");
+	(*current_liboctave_error_handler) ("unrecoverable error in dgelss");
       else
 	{
 	  lwork = static_cast<octave_idx_type> (work(0));
 	  work.resize (lwork);
 
-	  F77_XFCN (dgelsy, DGELSY, (m, n, nrhs, tmp_data, m, presult,
-				     nrr, pjpvt, rcond, rank,
+	  F77_XFCN (dgelss, DGELSS, (m, n, nrhs, tmp_data, m, presult,
+				     nrr, ps, rcond, rank,
 				     work.fortran_vec (), lwork, info));
 
 	  if (f77_exception_encountered)
 	    (*current_liboctave_error_handler)
-	      ("unrecoverable error in dgelsy");
+	      ("unrecoverable error in dgelss");
 	  else
 	    {
 	      retval.resize (n, nrhs);
 	      for (octave_idx_type j = 0; j < nrhs; j++)
 		for (octave_idx_type i = 0; i < n; i++)
 		  retval.elem (i, j) = result.elem (i, j);
 	    }
 	}
@@ -2176,45 +2177,46 @@ Matrix::lssolve (const ColumnVector& b, 
       octave_idx_type nrr = m > n ? m : n;
       ColumnVector result (nrr);
 
       for (octave_idx_type i = 0; i < m; i++)
 	result.elem (i) = b.elem (i);
 
       double *presult = result.fortran_vec ();
 
-      Array<octave_idx_type> jpvt (n);
-      octave_idx_type *pjpvt = jpvt.fortran_vec ();
+      octave_idx_type len_s = m < n ? m : n;
+      Array<double> s (len_s);
+      double *ps = s.fortran_vec ();
 
       double rcond = -1.0;
 
-      // Ask DGELSY what the dimension of WORK should be.
+      // Ask DGELSS what the dimension of WORK should be.
 
       octave_idx_type lwork = -1;
 
       Array<double> work (1);
 
-      F77_XFCN (dgelsy, DGELSY, (m, n, nrhs, tmp_data, m, presult, nrr, pjpvt,
+      F77_XFCN (dgelss, DGELSS, (m, n, nrhs, tmp_data, m, presult, nrr, ps,
 				 rcond, rank, work.fortran_vec (),
 				 lwork, info));
 
       if (f77_exception_encountered)
-	(*current_liboctave_error_handler) ("unrecoverable error in dgelsy");
+	(*current_liboctave_error_handler) ("unrecoverable error in dgelss");
       else
 	{
 	  lwork = static_cast<octave_idx_type> (work(0));
 	  work.resize (lwork);
 
-	  F77_XFCN (dgelsy, DGELSY, (m, n, nrhs, tmp_data, m, presult,
-				     nrr, pjpvt, rcond, rank,
+	  F77_XFCN (dgelss, DGELSS, (m, n, nrhs, tmp_data, m, presult,
+				     nrr, ps, rcond, rank,
 				     work.fortran_vec (), lwork, info));
 
 	  if (f77_exception_encountered)
 	    (*current_liboctave_error_handler)
-	      ("unrecoverable error in dgelsy");
+	      ("unrecoverable error in dgelss");
 	  else
 	    {
 	      retval.resize (n);
 	      for (octave_idx_type i = 0; i < n; i++)
 		retval.elem (i) = result.elem (i);
 	    }
 	}
     }
