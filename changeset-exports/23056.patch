# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1484667183 18000
#      Tue Jan 17 10:33:03 2017 -0500
# Node ID 422757f6ddbc077bd14d01b2140e5c35d794f60a
# Parent  3fc927d86fe63547c6d62529ef723a8acf8044a9
* defun-int.h (auto_shlib): Move inside octave namespace and rename from octave_auto_shlib.

diff --git a/libinterp/corefcn/defun-int.h b/libinterp/corefcn/defun-int.h
--- a/libinterp/corefcn/defun-int.h
+++ b/libinterp/corefcn/defun-int.h
@@ -59,28 +59,42 @@ alias_builtin (const std::string& alias,
 
 extern OCTINTERP_API void
 install_builtin_dispatch (const std::string& name, const std::string& klass);
 
 // Gets the shlib of the currently executing DLD function, if any.
 extern OCTINTERP_API octave::dynamic_library
 get_current_shlib (void);
 
-// This is a convenience class that calls the above function automatically at
-// construction time.  When deriving new classes, you can either use it as a
-// field or as a parent (with multiple inheritance).
-
-class octave_auto_shlib : public octave::dynamic_library
+namespace octave
 {
-public:
-  octave_auto_shlib (void)
-    : octave::dynamic_library (get_current_shlib ()) { }
-  octave_auto_shlib (const octave::dynamic_library& shl)
-    : octave::dynamic_library (shl) { }
-};
+  // FIXME: this class doesn't seem to be used in Octave.  Is it
+  // really needed?
+
+  // This is a convenience class that calls the above function automatically at
+  // construction time.  When deriving new classes, you can either use it as a
+  // field or as a parent (with multiple inheritance).
+
+  class auto_shlib : public dynamic_library
+  {
+  public:
+
+    auto_shlib (void) : dynamic_library (get_current_shlib ()) { }
+
+    auto_shlib (const dynamic_library& shl) : dynamic_library (shl) { }
+  };
+}
+
+#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
+
+OCTAVE_DEPRECATED ("use 'octave::auto_shlib' instead")
+typedef octave::auto_shlib octave_auto_shlib;
+
+#endif
+
 
 extern OCTINTERP_API bool
 defun_isargout (int, int);
 
 extern OCTINTERP_API void
 defun_isargout (int, int, bool *);
 
 #define FORWARD_DECLARE_FUNX(name)              \
