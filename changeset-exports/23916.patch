# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1502801259 14400
#      Tue Aug 15 08:47:39 2017 -0400
# Node ID 85488effc0ffa3e558265dc1b88d45f87fa182c5
# Parent  adf580507691609c13a2f739efcf001cc8d09cef
refactor function value return code

* pt-eval.h, pt-eval.cc
(tree_evaluator::initialize_undefind_parameter_list_elements): Delete.
* ov-usr-fcn.cc (octave_user_function::call): Don't call it.

* pt-eval.h, pt-eval.cc
(tree_evaluator::convert_return_list_to_const_vector): Rename from
convert_parameter_list_to_const_vector.  Don't exit early if undefined
elements are found.
(tree_evaluator::visit_multi_assignment): If LHS is ignored, don't
call octave_lvalue::assign for that returned value.  Error for
undefined values that are not ignored.

diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -649,30 +649,27 @@ octave_user_function::call (octave::tree
 
   if (octave::tree_break_command::breaking)
     octave::tree_break_command::breaking--;
 
   // Copy return values out.
 
   if (ret_list && ! is_special_expr ())
     {
-      tw.initialize_undefined_parameter_list_elements (ret_list, my_name,
-                                                       nargout, Matrix ());
-
       Cell varargout;
 
       if (ret_list->takes_varargs ())
         {
           octave_value varargout_varval = m_scope->varval ("varargout");
 
           if (varargout_varval.is_defined ())
             varargout = varargout_varval.xcell_value ("varargout must be a cell array object");
         }
 
-      retval = tw.convert_parameter_list_to_const_vector (ret_list, nargout, varargout);
+      retval = tw.convert_return_list_to_const_vector (ret_list, nargout, varargout);
     }
 
   return retval;
 }
 
 void
 octave_user_function::accept (octave::tree_walker& tw)
 {
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -477,74 +477,16 @@ namespace octave
     // Do not allow functions to return null values.
 
     tree_identifier *id = elt->ident ();
 
     return id ? evaluate (id).storable_value () : octave_value ();
   }
 
   void
-  tree_evaluator::initialize_undefined_parameter_list_elements
-    (tree_parameter_list *param_list, const std::string& warnfor,
-     int nargout, const octave_value& val)
-  {
-    bool warned = false;
-
-    int count = 0;
-
-    symbol_table::scope *scope
-      = m_interpreter.require_current_scope ("tree_evaluator::initialize_undefined_parameter_list_elements");
-
-    octave_value tmp = scope->varval (".ignored.");
-    const Matrix ignored = (tmp.is_defined () ? tmp.matrix_value () : Matrix ());
-
-    octave_idx_type k = 0;
-
-    for (tree_decl_elt *elt : *param_list)
-      {
-        if (++count > nargout)
-          break;
-
-        if (! elt->is_variable ())
-          {
-            if (! warned)
-              {
-                warned = true;
-
-                while (k < ignored.numel ())
-                  {
-                    octave_idx_type l = ignored (k);
-                    if (l == count)
-                      {
-                        warned = false;
-                        break;
-                      }
-                    else if (l > count)
-                      break;
-                    else
-                      k++;
-                  }
-
-                if (warned)
-                  {
-                    warning_with_id
-                      ("Octave:undefined-return-values",
-                       "%s: some elements in list of return values are undefined",
-                       warnfor.c_str ());
-                  }
-              }
-
-            octave_lvalue lval = elt->lvalue (this);
-
-            lval.assign (octave_value::op_asn_eq, val);
-          }
-      }
-  }
-
-  void
   tree_evaluator::define_parameter_list_from_arg_vector
     (tree_parameter_list *param_list, const octave_value_list& args)
   {
     int i = -1;
 
     for (tree_decl_elt *elt : *param_list)
       {
         i++;
@@ -573,51 +515,51 @@ namespace octave
       {
         octave_lvalue ref = elt->lvalue (this);
 
         ref.assign (octave_value::op_asn_eq, octave_value ());
       }
   }
 
   octave_value_list
-  tree_evaluator::convert_parameter_list_to_const_vector
-    (tree_parameter_list *param_list, int nargout, const Cell& varargout)
+  tree_evaluator::convert_return_list_to_const_vector
+    (tree_parameter_list *ret_list, int nargout, const Cell& varargout)
   {
     octave_idx_type vlen = varargout.numel ();
-    int len = param_list->length ();
+    int len = ret_list->length ();
 
     // Special case.  Will do a shallow copy.
     if (len == 0)
       return varargout;
     else if (nargout <= len)
       {
         octave_value_list retval (nargout);
 
         int i = 0;
 
-        for (tree_decl_elt *elt : *param_list)
+        for (tree_decl_elt *elt : *ret_list)
           {
             if (elt->is_defined ())
               {
                 octave_value tmp = evaluate (elt);
-                retval(i++) = tmp;
+                retval(i) = tmp;
               }
-            else
-              break;
+
+            i++;
           }
 
         return retval;
       }
     else
       {
         octave_value_list retval (len + vlen);
 
         int i = 0;
 
-        for (tree_decl_elt *elt : *param_list)
+        for (tree_decl_elt *elt : *ret_list)
           retval(i++) = evaluate (elt);
 
         for (octave_idx_type j = 0; j < vlen; j++)
           retval(i++) = varargout(j);
 
         return retval;
       }
   }
@@ -1863,26 +1805,32 @@ namespace octave
                 retval_list.push_back (ovl);
 
                 k += nel;
               }
             else
               {
                 if (k < n)
                   {
-                    ult.assign (octave_value::op_asn_eq, rhs_val(k));
-
                     if (ult.is_black_hole ())
                       {
                         k++;
                         continue;
                       }
                     else
                       {
-                        retval_list.push_back (rhs_val(k));
+                        octave_value tmp = rhs_val(k);
+
+                        if (tmp.is_undefined ())
+                          error ("element number %d undefined in return list",
+                                 k+1);
+
+                        ult.assign (octave_value::op_asn_eq, tmp);
+
+                        retval_list.push_back (tmp);
 
                         k++;
                       }
                   }
                 else
                   {
                     // This can happen for a function like
                     //
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -284,29 +284,24 @@ namespace octave
 
       m_nargout_stack.pop ();
 
       return m_value_stack.val_pop ();
     }
 
     octave_value evaluate (tree_decl_elt *);
 
-    void
-    initialize_undefined_parameter_list_elements
-      (tree_parameter_list *param_list, const std::string& warnfor,
-       int nargout, const octave_value& val);
-
     void define_parameter_list_from_arg_vector
       (tree_parameter_list *param_list, const octave_value_list& args);
 
     void undefine_parameter_list (tree_parameter_list *param_list);
 
     octave_value_list
-    convert_parameter_list_to_const_vector
-      (tree_parameter_list *param_list, int nargout, const Cell& varargout);
+    convert_return_list_to_const_vector
+      (tree_parameter_list *ret_list, int nargout, const Cell& varargout);
 
     bool eval_decl_elt (tree_decl_elt *elt);
 
     bool switch_case_label_matches (tree_switch_case *expr,
                                     const octave_value& val);
 
     call_stack& get_call_stack (void) { return m_call_stack; }
 
