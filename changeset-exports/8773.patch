# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1234852390 18000
#      Tue Feb 17 01:33:10 2009 -0500
# Node ID 9e3111d203c0d3c1899dfa6a4956b0a43d2acf0b
# Parent  aeedc045cfe316ab3e67ae8977a6a6eb13438f10
disallow reading from stdin while running interactively

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
 2009-02-17  John W. Eaton  <jwe@octave.org>
 
+	* file-io.cc (Ffscanf, Fsscanf): Check error_state after call to
+	octave_stream::scanf.
+	(Ffgetl): Check error state after call to octave_stream::getl.
+	(Ffgets): Check error state after call to octave_stream::gets.
+
+	* oct-stream.cc (octave_base_stream::do_gets,
+	octave_base_stream::do_scanf):
+	Disallow reading from stdin when running interactively.
+
 	* toplev.cc (octave_config_info): Add CARBON_LIBS, X11_INCFLAGS,
 	and X11_LIBS to the struct.
 	* oct-conf.h.in (OCTAVE_CONF_CARBON_LIBS,
 	OCTAVE_CONF_X11_INCFLAGS, OCTAVE_CONF_X11_LIBS): New macros.
 
 2009-02-17  Thomas Treichl  <Thomas.Treichl@gmx.net>
 
 	* Makefile.in (octave$(EXEEXT)): Link with CARBON_LIBS.
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -330,17 +330,17 @@ If there are no more characters to read,
       if (! error_state)
 	{
 	  octave_value len_arg = (nargin == 2) ? args(1) : octave_value ();
 
 	  bool err = false;
 
 	  std::string tmp = os.getl (len_arg, err, who);
 
-	  if (! err)
+	  if (! (error_state || err))
 	    {
 	      retval(1) = tmp.length ();
 	      retval(0) = tmp;
 	    }
 	}
     }
   else
     print_usage ();
@@ -378,17 +378,17 @@ If there are no more characters to read,
       if (! error_state)
 	{
 	  octave_value len_arg = (nargin == 2) ? args(1) : octave_value ();
 
 	  bool err = false;
 
 	  std::string tmp = os.gets (len_arg, err, who);
 
-	  if (! err)
+	  if (! (error_state || err))
 	    {
 	      retval(1) = tmp.length ();
 	      retval(0) = tmp;
 	    }
 	}
     }
   else
     print_usage ();
@@ -1113,18 +1113,21 @@ complete description of the syntax of th
 		  Array<double> size = (nargin == 3)
 		    ? args(2).vector_value ()
 		    : Array<double> (1, lo_ieee_inf_value ());
 
 		  if (! error_state)
 		    {
 		      octave_value tmp = os.scanf (args(1), size, count, who);
 
-		      retval(1) = count;
-		      retval(0) = tmp;
+		      if (! error_state)
+			{
+			  retval(1) = count;
+			  retval(0) = tmp;
+			}
 		    }
 		}
 	      else
 		::error ("%s: format must be a string", who.c_str ());
 	    }
 	}
       else
 	print_usage ();
@@ -1193,25 +1196,28 @@ string is treated as an end-of-file cond
 		      octave_idx_type count = 0;
 
 		      Array<double> size = (nargin == 3)
 			? args(2).vector_value ()
 			: Array<double> (1, lo_ieee_inf_value ());
 
 		      octave_value tmp = os.scanf (args(1), size, count, who);
 
-		      // FIXME -- is this the right thing to do?
-		      // Extract error message first, because getting
-		      // position will clear it.
-		      std::string errmsg = os.error ();
+		      if (! error_state)
+			{
+			  // FIXME -- is this the right thing to do?
+			  // Extract error message first, because getting
+			  // position will clear it.
+			  std::string errmsg = os.error ();
 
-		      retval(3) = os.tell () + 1;
-		      retval(2) = errmsg;
-		      retval(1) = count;
-		      retval(0) = tmp;
+			  retval(3) = os.tell () + 1;
+			  retval(2) = errmsg;
+			  retval(1) = count;
+			  retval(0) = tmp;
+			}
 		    }
 		  else
 		    ::error ("%s: format must be a string", who.c_str ());
 		}
 	      else
 		::error ("%s: unable to create temporary input buffer",
 			 who.c_str  ());
 	    }
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -959,16 +959,24 @@ octave_base_stream::clearerr (void)
 // are those that define is).
 
 std::string
 octave_base_stream::do_gets (octave_idx_type max_len, bool& err,
 			     bool strip_newline, const std::string& who)
 {
   std::string retval;
 
+  if ((interactive || forced_interactive) && file_number () == 0)
+    {
+      ::error ("%s: unable to read from stdin while running interactively",
+	       who.c_str ());
+	     
+      return retval;
+    }
+
   err = false;
 
   std::istream *isp = input_stream ();
 
   if (isp)
     {
       std::istream& is = *isp;
 
@@ -1646,24 +1654,32 @@ do_scanf_conv (std::istream&, const scan
     } \
   while (0)
 
 octave_value
 octave_base_stream::do_scanf (scanf_format_list& fmt_list,
 			      octave_idx_type nr, octave_idx_type nc, bool one_elt_size_spec,
 			      octave_idx_type& conversion_count, const std::string& who)
 {
+  octave_value retval = Matrix ();
+
+  if ((interactive || forced_interactive) && file_number () == 0)
+    {
+      ::error ("%s: unable to read from stdin while running interactively",
+	       who.c_str ());
+	     
+      return retval;
+    }
+
   conversion_count = 0;
 
   int nconv = fmt_list.num_conversions ();
 
   octave_idx_type data_index = 0;
 
-  octave_value retval = Matrix ();
-
   if (nr == 0 || nc == 0)
     {
       if (one_elt_size_spec)
 	nc = 0;
 
       return Matrix (nr, nc, 0.0);
     }
 
