# HG changeset patch
# User Andreas Weber <andy.weber.aw@gmail.com>
# Date 1449950041 -3600
#      Sat Dec 12 20:54:01 2015 +0100
# Node ID 5357423bca0a3e5e985ba63338131d3db48bddda
# Parent  90f24118894118972825dd5e6ceb0dd734b967ea
Code Sprint 2015: remove return/break/goto after error

diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -123,17 +123,16 @@ octave_base_value::empty_clone (void) co
   return resize (dim_vector ()).clone ();
 }
 
 octave_value
 octave_base_value::squeeze (void) const
 {
   std::string nm = type_name ();
   error ("squeeze: invalid operation for %s type", nm.c_str ());
-  return octave_value ();
 }
 
 octave_value
 octave_base_value::full_value (void) const
 {
   gripe_wrong_type_arg ("full: invalid operation for %s type", type_name ());
   return octave_value ();
 }
@@ -155,26 +154,24 @@ octave_base_value::numel (const octave_v
 }
 
 octave_value
 octave_base_value::subsref (const std::string&,
                             const std::list<octave_value_list>&)
 {
   std::string nm = type_name ();
   error ("can't perform indexing operations for %s type", nm.c_str ());
-  return octave_value ();
 }
 
 octave_value_list
 octave_base_value::subsref (const std::string&,
                             const std::list<octave_value_list>&, int)
 {
   std::string nm = type_name ();
   error ("can't perform indexing operations for %s type", nm.c_str ());
-  return octave_value ();
 }
 
 octave_value
 octave_base_value::subsref (const std::string& type,
                             const std::list<octave_value_list>& idx,
                             bool /* auto_add */)
 {
   // This way we may get a more meaningful error message.
@@ -191,25 +188,23 @@ octave_base_value::subsref (const std::s
   return subsref (type, idx, nargout);
 }
 
 octave_value
 octave_base_value::do_index_op (const octave_value_list&, bool)
 {
   std::string nm = type_name ();
   error ("can't perform indexing operations for %s type", nm.c_str ());
-  return octave_value ();
 }
 
 octave_value_list
 octave_base_value::do_multi_index_op (int, const octave_value_list&)
 {
   std::string nm = type_name ();
   error ("can't perform indexing operations for %s type", nm.c_str ());
-  return octave_value ();
 }
 
 octave_value_list
 octave_base_value::do_multi_index_op (int nargout, const octave_value_list& idx,
                                       const std::list<octave_lvalue> *)
 {
   // Fall back.
   return do_multi_index_op (nargout, idx);
@@ -941,26 +936,22 @@ octave_base_value::map_value (void) cons
   octave_map retval;
   gripe_wrong_type_arg ("octave_base_value::map_value()", type_name ());
   return retval;
 }
 
 octave_scalar_map
 octave_base_value::scalar_map_value (void) const
 {
-  octave_scalar_map retval;
-
   octave_map tmp = map_value ();
 
-  if (tmp.numel () == 1)
-    retval = tmp.checkelem (0);
-  else
+  if (tmp.numel () != 1)
     error ("invalid conversion of multi-dimensional struct to scalar struct");
 
-  return retval;
+  return octave_scalar_map (tmp.checkelem (0));
 }
 
 string_vector
 octave_base_value::map_keys (void) const
 {
   string_vector retval;
   gripe_wrong_type_arg ("octave_base_value::map_keys()", type_name ());
   return retval;
@@ -1281,17 +1272,16 @@ octave_base_value::wrong_type_arg_error 
 {
   gripe_wrong_type_arg (type_name ());
 }
 
 octave_value
 octave_base_value::map (unary_mapper_t umap) const
 {
   error ("%s: not defined for %s", get_umap_name (umap), type_name ().c_str ());
-  return octave_value ();
 }
 
 void
 octave_base_value::lock (void)
 {
   gripe_wrong_type_arg ("octave_base_value::lock ()", type_name ());
 }
 
@@ -1337,20 +1327,17 @@ gripe_no_conversion (const std::string& 
 octave_value
 octave_base_value::numeric_assign (const std::string& type,
                                    const std::list<octave_value_list>& idx,
                                    const octave_value& rhs)
 {
   octave_value retval;
 
   if (idx.front ().empty ())
-    {
-      error ("missing index in indexed assignment");
-      return retval;
-    }
+    error ("missing index in indexed assignment");
 
   int t_lhs = type_id ();
   int t_rhs = rhs.type_id ();
 
   octave_value_typeinfo::assign_op_fcn f
     = octave_value_typeinfo::lookup_assign_op (octave_value::op_asn_eq,
                                                t_lhs, t_rhs);
 
@@ -1616,26 +1603,20 @@ make_idx_args (const std::string& type,
 
                 if (vlist.length () == 1)
                   {
                     octave_value val = vlist(0);
 
                     if (val.is_string ())
                       subs_field(i) = val;
                     else
-                      {
-                        error ("string argument required for '.' index");
-                        return retval;
-                      }
+                      error ("string argument required for '.' index");
                   }
                 else
-                  {
-                    error ("only single argument permitted for '.' index");
-                    return retval;
-                  }
+                  error ("only single argument permitted for '.' index");
               }
               break;
 
             default:
               panic_impossible ();
               break;
             }
         }
diff --git a/libinterp/octave-value/ov-bool-sparse.cc b/libinterp/octave-value/ov-bool-sparse.cc
--- a/libinterp/octave-value/ov-bool-sparse.cc
+++ b/libinterp/octave-value/ov-bool-sparse.cc
@@ -271,20 +271,17 @@ octave_sparse_bool_matrix::load_binary (
   int32_t nz, nc, nr, tmp;
   if (! is.read (reinterpret_cast<char *> (&tmp), 4))
     return false;
 
   if (swap)
     swap_bytes<4> (&tmp);
 
   if (tmp != -2)
-    {
-      error ("load: only 2-D sparse matrices are supported");
-      return false;
-    }
+    error ("load: only 2-D sparse matrices are supported");
 
   if (! is.read (reinterpret_cast<char *> (&nr), 4))
     return false;
   if (! is.read (reinterpret_cast<char *> (&nc), 4))
     return false;
   if (! is.read (reinterpret_cast<char *> (&nz), 4))
     return false;
 
diff --git a/libinterp/octave-value/ov-bool.cc b/libinterp/octave-value/ov-bool.cc
--- a/libinterp/octave-value/ov-bool.cc
+++ b/libinterp/octave-value/ov-bool.cc
@@ -125,20 +125,17 @@ octave_bool::save_ascii (std::ostream& o
 }
 
 bool
 octave_bool::load_ascii (std::istream& is)
 {
   scalar = (octave_read_value<double> (is) != 0.);
 
   if (!is)
-    {
-      error ("load: failed to load scalar constant");
-      return false;
-    }
+    error ("load: failed to load scalar constant");
 
   return true;
 }
 
 bool
 octave_bool::save_binary (std::ostream& os, bool& /* save_as_floats */)
 {
   char tmp = (scalar ? 1 : 0);
diff --git a/libinterp/octave-value/ov-cell.cc b/libinterp/octave-value/ov-cell.cc
--- a/libinterp/octave-value/ov-cell.cc
+++ b/libinterp/octave-value/ov-cell.cc
@@ -234,20 +234,17 @@ octave_cell::subsasgn (const std::string
 
   int n = type.length ();
 
   octave_value t_rhs = rhs;
 
   clear_cellstr_cache ();
 
   if (idx.front ().empty ())
-    {
-      error ("missing index in indexed assignment");
-      return retval;
-    }
+    error ("missing index in indexed assignment");
 
   if (n > 1)
     {
       switch (type[0])
         {
         case '(':
           {
             if (is_empty () && type[1] == '.')
@@ -541,17 +538,16 @@ octave_cell::is_sorted_rows (sortmode mo
 
   return retval;
 }
 
 bool
 octave_cell::is_true (void) const
 {
   error ("invalid conversion from cell array to logical value");
-  return false;
 }
 
 octave_value_list
 octave_cell::list_value (void) const
 {
   return octave_value_list (matrix);
 }
 
@@ -765,18 +761,16 @@ octave_cell::save_ascii (std::ostream& o
     }
 
   return true;
 }
 
 bool
 octave_cell::load_ascii (std::istream& is)
 {
-  bool success = true;
-
   clear_cellstr_cache ();
 
   string_vector keywords(2);
 
   keywords[0] = "ndims";
   keywords[1] = "rows";
 
   std::string kw;
@@ -808,36 +802,26 @@ octave_cell::load_ascii (std::istream& i
                                                     dummy, t2, i);
 
                   if (nm == CELL_ELT_TAG)
                     {
                       if (is)
                         tmp.elem (i) = t2;
                     }
                   else
-                    {
-                      error ("load: cell array element had unexpected name");
-                      success = false;
-                      break;
-                    }
+                    error ("load: cell array element had unexpected name");
                 }
 
               if (is)
                 matrix = tmp;
               else
-                {
-                  error ("load: failed to load matrix constant");
-                  success = false;
-                }
+                error ("load: failed to load matrix constant");
             }
           else
-            {
-              error ("load: failed to extract number of rows and columns");
-              success = false;
-            }
+            error ("load: failed to extract number of rows and columns");
         }
       else if (kw == "rows")
         {
           octave_idx_type nr = val;
           octave_idx_type nc = 0;
 
           if (nr >= 0 && extract_keyword (is, "columns", nc) && nc >= 0)
             {
@@ -857,55 +841,40 @@ octave_cell::load_ascii (std::istream& i
                                                             dummy, t2, i);
 
                           if (nm == CELL_ELT_TAG)
                             {
                               if (is)
                                 tmp.elem (i, j) = t2;
                             }
                           else
-                            {
-                              error ("load: cell array element had unexpected name");
-                              success = false;
-                              goto cell_read_error;
-                            }
+                            error ("load: cell array element had unexpected name");
                         }
                     }
 
-                cell_read_error:
-
                   if (is)
                     matrix = tmp;
                   else
-                    {
-                      error ("load: failed to load cell element");
-                      success = false;
-                    }
+                    error ("load: failed to load cell element");
                 }
               else if (nr == 0 || nc == 0)
                 matrix = Cell (nr, nc);
               else
                 panic_impossible ();
             }
           else
-            {
-              error ("load: failed to extract number of rows and columns for cell array");
-              success = false;
-            }
+            error ("load: failed to extract number of rows and columns for cell array");
         }
       else
         panic_impossible ();
     }
   else
-    {
-      error ("load: failed to extract number of rows and columns");
-      success = false;
-    }
+    error ("load: failed to extract number of rows and columns");
 
-  return success;
+  return true;
 }
 
 bool
 octave_cell::save_binary (std::ostream& os, bool& save_as_floats)
 {
   dim_vector d = dims ();
   if (d.length () < 1)
     return false;
@@ -937,17 +906,16 @@ octave_cell::save_binary (std::ostream& 
 }
 
 bool
 octave_cell::load_binary (std::istream& is, bool swap,
                           oct_mach_info::float_format fmt)
 {
   clear_cellstr_cache ();
 
-  bool success = true;
   int32_t mdims;
   if (! is.read (reinterpret_cast<char *> (&mdims), 4))
     return false;
   if (swap)
     swap_bytes<4> (&mdims);
   if (mdims >= 0)
     return false;
 
@@ -991,32 +959,25 @@ octave_cell::load_binary (std::istream& 
                                          dummy, t2, doc);
 
       if (nm == CELL_ELT_TAG)
         {
           if (is)
             tmp.elem (i) = t2;
         }
       else
-        {
-          error ("load: cell array element had unexpected name");
-          success = false;
-          break;
-        }
+        error ("load: cell array element had unexpected name");
     }
 
   if (is)
     matrix = tmp;
   else
-    {
-      error ("load: failed to load matrix constant");
-      success = false;
-    }
+    error ("load: failed to load matrix constant");
 
-  return success;
+  return true;
 }
 
 void *
 octave_cell::mex_get_data (void) const
 {
   clear_cellstr_cache ();
   return matrix.mex_get_data ();
 }
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -271,20 +271,17 @@ octave_class::dotref (const octave_value
   std::string method_class = get_current_method_class ();
 
   // Find the class in which this method resides before attempting to access
   // the requested field.
 
   octave_base_value *obvp = find_parent_class (method_class);
 
   if (obvp == 0)
-    {
-      error ("malformed class");
-      return retval;
-    }
+    error ("malformed class");
 
   octave_map my_map = (obvp != this) ? obvp->map_value () : map;
 
   std::string nm = idx(0).xstring_value ("invalid index for class");
 
   octave_map::const_iterator p = my_map.seek (nm);
 
   if (p != my_map.end ())
@@ -1220,17 +1217,16 @@ octave_class::save_ascii (std::ostream& 
   return true;
 }
 
 bool
 octave_class::load_ascii (std::istream& is)
 {
   octave_idx_type len = 0;
   std::string classname;
-  bool success = true;
 
   if (extract_keyword (is, "classname", classname) && classname != "")
     {
       if (extract_keyword (is, "length", len) && len >= 0)
         {
           if (len > 0)
             {
               octave_map m (map);
@@ -1267,42 +1263,33 @@ octave_class::load_ascii (std::istream& 
                     {
                       octave_value in = new octave_class (*this);
                       octave_value_list tmp = feval ("loadobj", in, 1);
 
                       map = tmp(0).map_value ();
                     }
                 }
               else
-                {
-                  error ("load: failed to load class");
-                  success = false;
-                }
+                error ("load: failed to load class");
             }
           else if (len == 0)
             {
               map = octave_map (dim_vector (1, 1));
               c_name = classname;
             }
           else
             panic_impossible ();
         }
       else
-        {
-          error ("load: failed to extract number of elements in class");
-          success = false;
-        }
+        error ("load: failed to extract number of elements in class");
     }
   else
-    {
-      error ("load: failed to extract name of class");
-      success = false;
-    }
+    error ("load: failed to extract name of class");
 
-  return success;
+  return true;
 }
 
 bool
 octave_class::save_binary (std::ostream& os, bool& save_as_floats)
 {
   int32_t classname_len = class_name ().length ();
 
   os.write (reinterpret_cast<char *> (&classname_len), 4);
@@ -1692,74 +1679,56 @@ octave_class::exemplar_info::exemplar_in
 
 
 // A map from class names to lists of fields.
 std::map<std::string, octave_class::exemplar_info> octave_class::exemplar_map;
 
 bool
 octave_class::exemplar_info::compare (const octave_value& obj) const
 {
-  bool retval = true;
 
   if (obj.is_object ())
     {
       if (nfields () == obj.nfields ())
         {
           octave_map obj_map = obj.map_value ();
           string_vector obj_fnames = obj_map.keys ();
           string_vector fnames = fields ();
 
           for (octave_idx_type i = 0; i < nfields (); i++)
             {
               if (obj_fnames[i] != fnames[i])
-                {
-                  retval = false;
-                  error ("mismatch in field names");
-                  break;
-                }
+                error ("mismatch in field names");
             }
 
           if (nparents () == obj.nparents ())
             {
               std::list<std::string> obj_parents
                 = obj.parent_class_name_list ();
               std::list<std::string> pnames = parents ();
 
               std::list<std::string>::const_iterator p = obj_parents.begin ();
               std::list<std::string>::const_iterator q = pnames.begin ();
 
               while (p != obj_parents.end ())
                 {
                   if (*p++ != *q++)
-                    {
-                      retval = false;
-                      error ("mismatch in parent classes");
-                      break;
-                    }
+                    error ("mismatch in parent classes");
                 }
             }
           else
-            {
-              retval = false;
-              error ("mismatch in number of parent classes");
-            }
+            error ("mismatch in number of parent classes");
         }
       else
-        {
-          retval = false;
-          error ("mismatch in number of fields");
-        }
+        error ("mismatch in number of fields");
     }
   else
-    {
-      retval = false;
-      error ("invalid comparison of class exemplar to non-class object");
-    }
+    error ("invalid comparison of class exemplar to non-class object");
 
-  return retval;
+  return true;
 }
 
 DEFUN (class, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {@var{classname} =} class (@var{obj})\n\
 @deftypefnx {} {} class (@var{s}, @var{id})\n\
 @deftypefnx {} {} class (@var{s}, @var{id}, @var{p}, @dots{})\n\
 Return the class of the object @var{obj}, or create a class with\n\
@@ -2075,80 +2044,61 @@ DEFUN (superiorto, args, ,
 When called from a class constructor, mark the object currently\n\
 constructed as having a higher precedence than @var{class_name}.\n\
 \n\
 More that one such class can be specified in a single call.\n\
 This function may only be called from a class constructor.\n\
 @seealso{inferiorto}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   octave_function *fcn = octave_call_stack::caller ();
   if ((! fcn) || (! fcn->is_class_constructor ()))
-    {
-      error ("superiorto: invalid call from outside class constructor");
-      return retval;
-    }
+    error ("superiorto: invalid call from outside class constructor");
 
   for (int i = 0; i < args.length (); i++)
     {
       std::string inf_class = args(i).xstring_value ("superiorto: CLASS_NAME must be a string");
 
       // User defined classes always have higher precedence
       // than built-in classes
       if (is_built_in_class (inf_class))
         break;
 
       std::string sup_class = fcn->name ();
       if (! symbol_table::set_class_relationship (sup_class, inf_class))
-        {
-          error ("superiorto: opposite precedence already set for %s and %s",
-                 sup_class.c_str (), inf_class.c_str ());
-          break;
-        }
+        error ("superiorto: opposite precedence already set for %s and %s",
+               sup_class.c_str (), inf_class.c_str ());
     }
 
-  return retval;
+  return octave_value ();
 }
 
 DEFUN (inferiorto, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} inferiorto (@var{class_name}, @dots{})\n\
 When called from a class constructor, mark the object currently\n\
 constructed as having a lower precedence than @var{class_name}.\n\
 \n\
 More that one such class can be specified in a single call.\n\
 This function may only be called from a class constructor.\n\
 @seealso{superiorto}\n\
 @end deftypefn")
 {
-  octave_value retval;
-
   octave_function *fcn = octave_call_stack::caller ();
   if ((! fcn) || (! fcn->is_class_constructor ()))
-    {
-      error ("inferiorto: invalid call from outside class constructor");
-      return retval;
-    }
+    error ("inferiorto: invalid call from outside class constructor");
 
   for (int i = 0; i < args.length (); i++)
     {
       std::string sup_class = args(i).xstring_value ("inferiorto: CLASS_NAME must be a string");
 
       if (is_built_in_class (sup_class))
-        {
-          error ("inferiorto: cannot give user-defined class lower "
-                 "precedence than built-in class");
-          break;
-        }
+        error ("inferiorto: cannot give user-defined class lower "
+               "precedence than built-in class");
 
       std::string inf_class = fcn->name ();
       if (! symbol_table::set_class_relationship (sup_class, inf_class))
-        {
-          error ("inferiorto: opposite precedence already set for %s and %s",
-                 inf_class.c_str (), sup_class.c_str ());
-          break;
-        }
+        error ("inferiorto: opposite precedence already set for %s and %s",
+               inf_class.c_str (), sup_class.c_str ());
     }
 
-  return retval;
+  return octave_value();
 }
