# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1550691611 0
#      Wed Feb 20 19:40:11 2019 +0000
# Node ID 2c4ad1958cab80023609232098f196c0d58905d6
# Parent  a3dfdbb9d8c545ea97de7c46b15d021886f21ee0
display property names and info by default for classdef objects

* ov-classdef.cc (octave_classdef::print_raw):
Display property names and info.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <algorithm>
+#include <iomanip>
 
 #include "call-stack.h"
 #include "defun.h"
 #include "errwarn.h"
 #include "interpreter-private.h"
 #include "interpreter.h"
 #include "load-path.h"
 #include "ov-builtin.h"
@@ -1013,22 +1014,60 @@ void
 octave_classdef::print (std::ostream& os, bool)
 {
   print_raw (os);
 }
 
 void
 octave_classdef::print_raw (std::ostream& os, bool) const
 {
-  indent (os);
-  os << "<object ";
-  if (object.is_array ())
-    os << "array ";
-  os << class_name () << '>';
-  newline (os);
+  cdef_class cls = object.get_class ();
+
+  if (cls.ok ())
+    {
+      indent (os);
+      os << class_name () << " object";
+      if (object.is_array ())
+        os << " array";
+      os << " with properties:";
+      newline (os);
+      newline (os);
+
+      std::map<std::string, cdef_property> props;
+
+      props = cls.get_property_map ();
+
+      size_t max_len = 0;
+      for (const auto& nm_prop : props)
+        {
+          const std::string& nm = nm_prop.first;
+
+          size_t sz = nm.size ();
+
+          if (sz > max_len)
+            max_len = sz;
+        }
+
+      for (auto& nm_prop : props)
+        {
+          const std::string& nm = nm_prop.first;
+          cdef_property& prop = nm_prop.second;
+          octave_value val = prop.get_value (object, false);
+          dim_vector dims = val.dims ();
+
+          os << std::setw (max_len+2) << nm << ": ";
+          if (val.is_string ())
+            os << val.string_value ();
+          else if (val.islogical ())
+            os << val.bool_value ();
+          else
+            os << "[" << dims.str () << " " << val.class_name () << "]";
+          newline (os);
+        }
+    }
 }
 
 bool
 octave_classdef::is_instance_of (const std::string& cls_name) const
 {
   cdef_class cls = lookup_class (cls_name, false, false);
 
   if (cls.ok ())
