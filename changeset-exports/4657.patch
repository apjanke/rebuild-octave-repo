# HG changeset patch
# User jwe
# Date 1069723809 0
#      Tue Nov 25 01:30:09 2003 +0000
# Node ID a585a2dfca6cfb0f82e51898b45bec3787ffe0fb
# Parent  e3da702f75029f36a356722f9e8777f2cb9a1585
[project @ 2003-11-25 01:30:09 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2534,63 +2534,67 @@ assignN (Array<LT>& lhs, const Array<RT>
   bool rhs_is_scalar = is_scalar (rhs_dims);
 
   bool idx_is_empty = any_zero_len (frozen_len);
 
   if (rhs_is_empty)
     {
       lhs.maybe_delete_elements (idx, rfv);
     }
-  else if (rhs_is_scalar)
+  else if (n_idx == 1)
     {
-      if (n_idx == 0)
-	(*current_liboctave_error_handler)
-	  ("number of indices is zero");
-      else if (n_idx == 1)
+      idx_vector iidx = idx(0);
+
+      if (liboctave_wfi_flag
+	  && ! (iidx.is_colon ()
+		|| (iidx.one_zero_only ()
+		    && iidx.orig_dimensions () == lhs.dims ())))
+	(*current_liboctave_warning_handler)
+	  ("single index used for n-d array");
+
+      int lhs_len = lhs.length ();
+
+      int len = iidx.freeze (lhs_len, "n-d arrray");
+
+      if (iidx)
 	{
-	  idx_vector iidx = idx(0);
-
-	  if (liboctave_wfi_flag
-	      && ! (iidx.is_colon ()
-		    || (iidx.one_zero_only ()
-			&& iidx.orig_dimensions () == lhs.dims ())))
-	    (*current_liboctave_warning_handler)
-	      ("single index used for n-d array");
-
-	  int lhs_len = lhs.length ();
-
-	  int len = iidx.freeze (lhs_len, "n-d arrray");
-
-	  if (iidx)
+	  if (len == 0)
 	    {
-	      if (len == 0)
-		{
-		  if (! (rhs_dims.all_ones () || rhs_dims.all_zero ()))
-		    (*current_liboctave_error_handler)
-		      ("A([]) = X: X must be an empty matrix or scalar");
-		}
-	      else if (len <= lhs_len)
+	      if (! (rhs_dims.all_ones () || rhs_dims.all_zero ()))
+		(*current_liboctave_error_handler)
+		  ("A([]) = X: X must be an empty matrix or scalar");
+	    }
+	  else if (len == rhs.length ())
+	    {
+	      for (int i = 0; i < len; i++)
 		{
-		  RT scalar = rhs.elem (0);
-
-		  for (int i = 0; i < len; i++)
-		    {
-		      int ii = iidx.elem (i);
-
-		      lhs.elem (ii) = scalar;
-		    }
-		}
-	      else
-		{
-		  (*current_liboctave_error_handler)
-      ("A(I) = X: X must be a scalar or a matrix with the same size as I");
-
-		  retval = 0;
+		  int ii = iidx.elem (i);
+
+		  lhs.elem (ii) = rhs.elem (i);
 		}
 	    }
+	  else if (rhs_is_scalar && len <= lhs_len)
+	    {
+	      RT scalar = rhs.elem (0);
+
+	      for (int i = 0; i < len; i++)
+		{
+		  int ii = iidx.elem (i);
+
+		  lhs.elem (ii) = scalar;
+		}
+	    }
+	  else
+	    {
+	      (*current_liboctave_error_handler)
+	("A(I) = X: X must be a scalar or a matrix with the same size as I");
+	      
+	      retval = 0;
+	    }
+
 	  // idx_vector::freeze() printed an error message for us.
 	}
       else if (n_idx < lhs_dims.length ())
 	{
 	  // Number of indices is less than dimensions.
 
 	  if (any_ones (idx_is_colon)|| any_ones (idx_is_colon_equiv))
 	    {
@@ -2834,17 +2838,17 @@ Array<T>::print_info (std::ostream& os, 
 {
   os << prefix << "rep address: " << rep << "\n"
      << prefix << "rep->len:    " << rep->len << "\n"
      << prefix << "rep->data:   " << static_cast<void *> (rep->data) << "\n"
      << prefix << "rep->count:  " << rep->count << "\n";
 
   // 2D info:
   //
-  //     << prefix << "rows: " << rows () << "\n"
+  //     << pefix << "rows: " << rows () << "\n"
   //     << prefix << "cols: " << cols () << "\n";
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,11 +1,11 @@
 2003-11-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
-	* Array.cc (assignN): Allow single indexing to work for scalar RHS.
+	* Array.cc (assignN): Allow single indexing to work.
 
 	* dim-vector.h (dim_vector::all_ones): New function.
 
 2003-11-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* idx-vector.h (idx_vector::orig_empty): Check orig_dims for
 	zeros, not orig_rows or orig_columns.
 	(idx_vector::idx_vector_rep::orig_rows): Define using orig_dims.
