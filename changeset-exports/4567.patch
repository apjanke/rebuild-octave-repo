# HG changeset patch
# User jwe
# Date 1067458276 0
#      Wed Oct 29 20:11:16 2003 +0000
# Node ID fc30061d01da1fab1fbe11db64ff0a38783f2939
# Parent  30ba814d6700524a7164fcd204266774f9e3bc11
[project @ 2003-10-29 20:11:15 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -333,16 +333,33 @@ Array<T>::range_error (const char *fcn, 
 
   (*current_liboctave_error_handler) ("range error in Array");
 
   static T foo;
   return foo;
 }
 
 template <class T>
+Array<T>
+Array<T>::reshape (const dim_vector& new_dims) const
+{
+  Array<T> retval;
+
+  if (dimensions != new_dims)
+    {
+      if (dimensions.numel () == new_dims.numel ())
+	retval = Array<T> (*this, new_dims);
+      else
+	(*current_liboctave_error_handler) ("reshape: size mismatch");
+    }
+
+  return retval;
+}
+
+template <class T>
 void
 Array<T>::resize_no_fill (int n)
 {
   if (n < 0)
     {
       (*current_liboctave_error_handler)
 	("can't resize to negative dimension");
       return;
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -400,16 +400,18 @@ public:
   T operator () (const Array<int>& ra_idx) const { return checkelem (ra_idx); }
 #else
   T operator () (int n) const { return elem (n); }
   T operator () (int i, int j) const { return elem (i, j); }
   T operator () (int i, int j, int k) const { return elem (i, j, k); }
   T operator () (const Array<int>& ra_idx) const { return elem (ra_idx); }
 #endif
 
+  Array<T> reshape (const dim_vector& new_dims) const;
+
   void resize_no_fill (int n);
   void resize_and_fill (int n, const T& val);
 
   // !!! WARNING !!! -- the following resize_no_fill and
   // resize_and_fill functions are public because template friends
   // don't work properly with versions of gcc earlier than 3.3.  You
   // should use these functions only in classes that are derived
   // from Array<T>.
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,15 @@
 2003-10-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* Array.cc (Array<T>::reshape): New function.
+	* Array.h: Provide decl.
+
+	* dim-vector.h (dim_vector::numel): New function.
+
 	* dim-vector.h (dim_vector_rep::dim_vector_rep (int, const
 	dim_vector&)): Correctly handle case of n < dv->ndims.
 
 2003-10-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dim-vector.h (dim_vector::any_zero): New function.
 	(dim_vector::str): New default arg, sep.
 
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -248,16 +248,32 @@ public:
 	  {
 	    retval = true;
 	    break;
 	  }
       }
 
     return retval;
   }
+
+  // This is the number of elements that a matrix with this dimension
+  // vector would have, NOT the number of dimensions (elements in the
+  // dimension vector).
+
+  int numel (void) const
+  {
+    int n_dims = length ();
+
+    int retval = n_dims > 0 ? elem (0) : 0;
+
+    for (int i = 1; i < n_dims; i++)
+      retval *= elem (i);
+
+    return retval;
+  }
 };
 
 static inline bool
 operator == (const dim_vector& a, const dim_vector& b)
 {
   bool retval = true;
 
   int a_len = a.length ();
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2003-10-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* general/reshape: Delete.
+
 2003-10-28  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* general/numel.m: Delete.
 
 2003-10-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* miscellaneous/horzcat.m, miscellaneous/vartcat.m: New files.
 
diff --git a/scripts/general/reshape.m b/scripts/general/reshape.m
deleted file mode 100644
--- a/scripts/general/reshape.m
+++ /dev/null
@@ -1,78 +0,0 @@
-## Copyright (C) 1996, 1997 John W. Eaton
-##
-## This file is part of Octave.
-##
-## Octave is free software; you can redistribute it and/or modify it
-## under the terms of the GNU General Public License as published by
-## the Free Software Foundation; either version 2, or (at your option)
-## any later version.
-##
-## Octave is distributed in the hope that it will be useful, but
-## WITHOUT ANY WARRANTY; without even the implied warranty of
-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-## General Public License for more details.
-##
-## You should have received a copy of the GNU General Public License
-## along with Octave; see the file COPYING.  If not, write to the Free
-## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
-## 02111-1307, USA.
-
-## -*- texinfo -*-
-## @deftypefn {Function File} {} reshape (@var{a}, @var{m}, @var{n})
-## Return a matrix with @var{m} rows and @var{n} columns whose elements are
-## taken from the matrix @var{a}.  To decide how to order the elements,
-## Octave pretends that the elements of a matrix are stored in column-major
-## order (like Fortran arrays are stored).
-##
-## For example,
-##
-## @example
-## @group
-## reshape ([1, 2, 3, 4], 2, 2)
-##      @result{}  1  3
-##          2  4
-## @end group
-## @end example
-##
-## The @code{reshape} function is equivalent to
-##
-## @example
-## @group
-## retval = zeros (m, n);
-## retval (:) = a;
-## @end group
-## @end example
-##
-## @noindent
-## but it is somewhat less cryptic to use @code{reshape} instead of the
-## colon operator.  Note that the total number of elements in the original
-## matrix must match the total number of elements in the new matrix.
-## @end deftypefn
-## @seealso{`:'}
-
-## Author: jwe
-
-function retval = reshape (a, m, n)
-
-  if (nargin == 2 && prod (size (m)) == 2)
-    n = m(2);
-    m = m(1);
-    nargin = 3;
-  endif
-
-  if (nargin == 3)
-    [nr, nc] = size (a);
-    if (nr * nc == m * n)
-      retval = zeros (m, n);
-      if (isstr (a))
-	retval = setstr (retval);
-      endif
-      retval(:) = a;
-    else
-      error ("reshape: sizes must match");
-    endif
-  else
-    usage ("reshape (a, m, n) or reshape (a, size (b))");
-  endif
-
-endfunction
diff --git a/src/Cell.h b/src/Cell.h
--- a/src/Cell.h
+++ b/src/Cell.h
@@ -51,43 +51,47 @@ public:
     {
       for (int i = 0; i < ovl.length (); i++)
 	elem (i) = ovl (i);
     }
 
   Cell (int n, int m, const octave_value& val = resize_fill_value ())
     : ArrayN<octave_value> (dim_vector (n, m), val) { }
 
-  Cell (const dim_vector& dims, const octave_value& val = resize_fill_value ())
+  Cell (const dim_vector& dims,
+		 const octave_value& val = resize_fill_value ())
     : ArrayN<octave_value> (dims, val) { }
 
   Cell (const ArrayN<octave_value>& c)
     : ArrayN<octave_value> (c) { }
 
+  Cell (const Array<octave_value>& c)
+    : ArrayN<octave_value> (c) { }
+
   Cell (const Array<octave_value>& c, int nr, int nc)
     : ArrayN<octave_value> (c, dim_vector (nr, nc)) { }
 
   Cell (const string_vector& sv);
 
   Cell (const Cell& c)
     : ArrayN<octave_value> (c) { }
 
   Cell index (const octave_value_list& idx, bool resize_ok = false) const;
 
   Cell index (idx_vector& i, int resize_ok = 0,
 	      const octave_value& rfv = resize_fill_value ()) const
-    { return ArrayN<octave_value>::index (i, resize_ok, rfv); }
+    { return Cell (ArrayN<octave_value>::index (i, resize_ok, rfv)); }
 
   Cell index (idx_vector& i, idx_vector& j, int resize_ok = 0,
 	      const octave_value& rfv = resize_fill_value ()) const
-    { return ArrayN<octave_value>::index (i, j, resize_ok, rfv); }
+    { return Cell (ArrayN<octave_value>::index (i, j, resize_ok, rfv)); }
 
   Cell index (Array<idx_vector>& ra_idx, int resize_ok = 0,
 	      const octave_value& rfv = resize_fill_value ()) const
-    { return ArrayN<octave_value>::index (ra_idx, resize_ok, rfv); }
+    { return Cell (ArrayN<octave_value>::index (ra_idx, resize_ok, rfv)); }
 
   Cell& assign (const octave_value_list& idx, const Cell& rhs,
 		const octave_value& fill_val = octave_value ());
 
   octave_value& operator () (int i) { return elem_internal (i); }
 
   octave_value operator () (int i) const { return elem_internal (i); }
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,23 @@
 2003-10-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* oct-map.cc (Octave_map::reshape): New function.
+	* oct-map.h: Provide decl.
+
+	* ov-struct.h (octave_struct::reshape): New function.
+
+	* Cell.h (Cell:Cell (const Array<octave_value>&): New constructor.
+
+	* data.cc (Freshape): New function.
+	* ov.h (octave_value::reshape): New function.
+	* ov-base-mat.h (octave_base_matrix::reshape): New function.
+	* ov-base.cc (octave_base_value::reshape): New function.
+	* ov-base.h: Provide decl.
+
 	* DLD-FUNCTIONS/balance.cc: lscale and rscale args for dggbak are
 	const.  Use data() instead of fortran_vec where possible.
 	* DLD-FUNCTIONS/qz.cc: Likewise.
 
 	* data.cc (fill_matrix): Remove trailing singletons before
 	allocating the result matrix.
 
 	* input.cc (get_user_input): Don't forget about the diary here.
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1231,16 +1231,96 @@ The @code{linspace} function always retu
 		retval = rv;
 	    }
 	}
     }
 
   return retval;
 }
 
+DEFUN (reshape, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Function File} {} reshape (@var{a}, @var{m}, @var{n}, @dots{})\n\
+@deftypefnx {Function File} {} reshape (@var{a}, @var{siz})\n\
+Return a matrix with the given dimensions whose elements are taken\n\
+from the matrix @var{a}.  The elements of the matrix are access in\n\
+column-major order (like Fortran arrays are stored).\n\
+\n\
+For example,\n\
+\n\
+@example\n\
+@group\n\
+reshape ([1, 2, 3, 4], 2, 2)\n\
+     @result{}  1  3\n\
+         2  4\n\
+@end group\n\
+@end example\n\
+\n\
+@noindent\n\
+Note that the total number of elements in the original\n\
+matrix must match the total number of elements in the new matrix.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  int nargin = args.length ();
+
+  Array<int> new_size;
+
+  if (nargin == 2)
+    new_size = args(1).int_vector_value ();
+  else if (nargin > 2)
+    {
+      new_size.resize (nargin-1);
+
+      for (int i = 1; i < nargin; i++)
+	{
+	  new_size(i-1) = args(i).int_value ();
+
+	  if (error_state)
+	    break;
+	}
+    }
+  else
+    {
+      print_usage ("reshape");
+      return retval;
+    }
+
+  if (error_state)
+    {
+      error ("reshape: invalid arguments");
+      return retval;
+    }
+
+  int n = new_size.length ();
+
+  if (n < 2)
+    {
+      error ("reshape: expecting size to be vector with at least 2 elements");
+      return retval;
+    }
+
+  dim_vector new_dims;
+
+  new_dims.resize (n);
+
+  for (int i = 0; i < n; i++)
+    new_dims(i) = new_size(i);
+
+  octave_value arg = args(0);
+
+  if (new_dims.numel () == arg.numel ())
+    retval = (new_dims == arg.dims ()) ? arg : arg.reshape (new_dims);
+  else
+    error ("reshape: size mismatch");
+
+  return retval;
+}
+
 DEFUN (squeeze, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} squeeze (@var{x})\n\
 Remove singleton dimensions from @var{x} and return the result.\n\
 @end deftypefn")
 {
   octave_value retval;
 
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -51,16 +51,32 @@ Octave_map::keys (void) const
 
   int i = 0;
   for (const_iterator p = begin (); p != end (); p++)
     names[i++] = key (p);
 
   return names;
 }
 
+Octave_map
+Octave_map::reshape (const dim_vector& new_dims) const
+{
+  Octave_map retval;
+
+  if (new_dims != dims ())
+    {
+      for (const_iterator p = begin (); p != end (); p++)
+	retval[key(p)] = contents(p).reshape (new_dims);
+
+      dimensions = new_dims;
+    }
+
+  return retval;
+}
+
 int
 Octave_map::numel (void) const
 {
   int retval;
 
   if (empty ())
     retval = 0;
   else
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -41,17 +41,17 @@ Octave_map
 
   typedef std::map<std::string, Cell>::iterator iterator;
   typedef std::map<std::string, Cell>::const_iterator const_iterator;
 
   Octave_map (void) : map (), dimensions (0, 0) { }
 
   Octave_map (const std::string& key, const octave_value& value)
     : map (), dimensions (1, 1)
-    { map[key] = Cell (value); }
+    { map[key] = value; }
 
   Octave_map (const std::string& key, const Cell& vals)
     : map (), dimensions (vals.dims ())
     { map[key] = vals; }
 
   Octave_map (const std::string& key, const octave_value_list& val_list)
     : map (), dimensions (1, val_list.length ())
   { map[key] = val_list; }
@@ -111,16 +111,18 @@ Octave_map
   string_vector keys (void) const;
 
   int rows (void) const { return dimensions(0); }
 
   int columns (void) const { return dimensions(1); }
 
   dim_vector dims (void) const { return dimensions; }
 
+  Octave_map reshape (const dim_vector& new_dims) const;
+
   int numel (void) const;
 
   Octave_map& assign (const octave_value_list& idx, const Octave_map& rhs);
 
   Octave_map& assign (const octave_value_list& idx, const std::string& key,
 		      const Cell& rhs);
 
   Octave_map& assign (const std::string& key, const Cell& rhs);
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -87,16 +87,19 @@ public:
 
   octave_value do_index_op (const octave_value_list& idx)
     { return do_index_op (idx, 0); }
 
   void assign (const octave_value_list& idx, const MT& rhs);
 
   dim_vector dims (void) const { return matrix.dims (); }
 
+  octave_value reshape (const dim_vector& new_dims) const
+    { return MT (matrix.reshape (new_dims)); }
+
   octave_value all (int dim = 0) const { return matrix.all (dim); }
   octave_value any (int dim = 0) const { return matrix.any (dim); }
 
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -169,16 +169,23 @@ octave_base_value::subsasgn (const std::
 
       retval = tmp.subsasgn (type, idx, rhs);
     }
 
   return retval;
 }
 
 octave_value
+octave_base_value::reshape (const dim_vector&) const
+{
+  gripe_wrong_type_arg ("octave_base_value::reshape ()", type_name ());
+  return octave_value ();
+}
+
+octave_value
 octave_base_value::convert_to_str_internal (bool, bool) const
 {
   gripe_wrong_type_arg ("octave_base_value::convert_to_str_internal ()",
 			type_name ());
   return octave_value ();
 }
 
 void
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -91,16 +91,18 @@ public:
   idx_vector index_vector (void) const;
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   dim_vector dims (void) const { return dim_vector (-1, -1); }
 
+  octave_value reshape (const dim_vector&) const;
+
   bool is_defined (void) const { return false; }
 
   bool is_cell (void) const { return false; }
 
   bool is_real_scalar (void) const { return false; }
 
   bool is_real_matrix (void) const { return false; }
 
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -84,16 +84,19 @@ public:
 				    const std::string& type);
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
   dim_vector dims (void) const { return map.dims (); }
 
+  octave_value reshape (const dim_vector& new_dims) const
+    { return map.reshape (new_dims); }
+
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_map (void) const { return true; }
 
   Octave_map map_value (void) const { return map; }
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -880,24 +880,17 @@ octave_value::ndims (void) const
    return n_dims;
 }
 
 int
 octave_value::numel (void) const
 {
   dim_vector dv = dims ();
 
-  int n_dims = dv.length ();
-
-  int retval = n_dims > 0 ? dv(0) : 0;
-
-  for (int i = 1; i < n_dims; i++)
-    retval *= dv(i);
-
-  return retval;    
+  return dv.numel ();
 }
 
 Cell
 octave_value::cell_value (void) const
 {
   return rep->cell_value ();
 }
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -324,16 +324,19 @@ public:
   int columns (void) const;
 
   int length (void) const;
 
   int ndims (void) const;
 
   int numel (void) const;
 
+  virtual octave_value reshape (const dim_vector& dims) const
+    { return rep->reshape (dims); }
+
   // Does this constant have a type?  Both of these are provided since
   // it is sometimes more natural to write is_undefined() instead of
   // ! is_defined().
 
   virtual bool is_defined (void) const
     { return rep->is_defined (); }
 
   bool is_undefined (void) const
