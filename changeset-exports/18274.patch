# HG changeset patch
# User Lasse Schuirmann <lasse@schuirmann.net>
# Date 1389727640 28800
#      Tue Jan 14 11:27:20 2014 -0800
# Branch stable
# Node ID e243b705a726cbcef27fc3c88da984614eece2bc
# Parent  ec975e8267288372e957d5b81c8185b504492ba3
Fix building JIT with 64-bit indexing (bug #41163).

jit-typeinfo.cc (jit_typeinfo): Create two constants for the value 1.  One
constant (one_idx) is of type index_t and the other (one_int) is of int_t.  Use
these constants when comparing to objects of the matching type.

diff --git a/libinterp/corefcn/jit-typeinfo.cc b/libinterp/corefcn/jit-typeinfo.cc
--- a/libinterp/corefcn/jit-typeinfo.cc
+++ b/libinterp/corefcn/jit-typeinfo.cc
@@ -1604,32 +1604,28 @@ jit_typeinfo::jit_typeinfo (llvm::Module
                                                index);
 
   fn = create_internal ("()subsref", scalar, matrix, scalar);
   fn.mark_can_error ();
 
   body = fn.new_block ();
   builder.SetInsertPoint (body);
   {
-    llvm::Value *one = llvm::ConstantInt::get (index_t, 1);
-    llvm::Value *ione;
-    if (index_t == int_t)
-      ione = one;
-    else
-      ione = llvm::ConstantInt::get (int_t, 1);
+    llvm::Value *one_idx = llvm::ConstantInt::get (index_t, 1);
+    llvm::Value *one_int = llvm::ConstantInt::get (int_t, 1);
 
     llvm::Value *undef = llvm::UndefValue::get (scalar_t);
     llvm::Value *mat = fn.argument (builder, 0);
     llvm::Value *idx = fn.argument (builder, 1);
 
     // convert index to scalar to integer, and check index >= 1
     llvm::Value *int_idx = builder.CreateFPToSI (idx, index_t);
     llvm::Value *check_idx = builder.CreateSIToFP (int_idx, scalar_t);
     llvm::Value *cond0 = builder.CreateFCmpUNE (idx, check_idx);
-    llvm::Value *cond1 = builder.CreateICmpSLT (int_idx, one);
+    llvm::Value *cond1 = builder.CreateICmpSLT (int_idx, one_idx);
     llvm::Value *cond = builder.CreateOr (cond0, cond1);
 
     llvm::BasicBlock *done = fn.new_block ("done");
     llvm::BasicBlock *conv_error = fn.new_block ("conv_error", done);
     llvm::BasicBlock *normal = fn.new_block ("normal", done);
     builder.CreateCondBr (cond, conv_error, normal);
 
     builder.SetInsertPoint (conv_error);
@@ -1642,17 +1638,17 @@ jit_typeinfo::jit_typeinfo (llvm::Module
     cond = builder.CreateICmpSGT (int_idx, len);
 
 
     llvm::BasicBlock *bounds_error = fn.new_block ("bounds_error", done);
     llvm::BasicBlock *success = fn.new_block ("success", done);
     builder.CreateCondBr (cond, bounds_error, success);
 
     builder.SetInsertPoint (bounds_error);
-    gindex_range.call (builder, ione, ione, int_idx, len);
+    gindex_range.call (builder, one_int, one_int, int_idx, len);
     builder.CreateBr (done);
 
     builder.SetInsertPoint (success);
     llvm::Value *data = builder.CreateExtractValue (mat,
                                                     llvm::ArrayRef<unsigned> (1));
     llvm::Value *gep = builder.CreateInBoundsGEP (data, int_idx);
     llvm::Value *ret = builder.CreateLoad (gep);
     builder.CreateBr (done);
@@ -1676,26 +1672,27 @@ jit_typeinfo::jit_typeinfo (llvm::Module
                        index, scalar);
 
   fn = create_internal ("octave_jit_paren_subsasgn", matrix, matrix, scalar,
                         scalar);
   fn.mark_can_error ();
   body = fn.new_block ();
   builder.SetInsertPoint (body);
   {
-    llvm::Value *one = llvm::ConstantInt::get (index_t, 1);
+    llvm::Value *one_idx = llvm::ConstantInt::get (index_t, 1);
+    llvm::Value *one_int = llvm::ConstantInt::get (int_t, 1);
 
     llvm::Value *mat = fn.argument (builder, 0);
     llvm::Value *idx = fn.argument (builder, 1);
     llvm::Value *value = fn.argument (builder, 2);
 
     llvm::Value *int_idx = builder.CreateFPToSI (idx, index_t);
     llvm::Value *check_idx = builder.CreateSIToFP (int_idx, scalar_t);
     llvm::Value *cond0 = builder.CreateFCmpUNE (idx, check_idx);
-    llvm::Value *cond1 = builder.CreateICmpSLT (int_idx, one);
+    llvm::Value *cond1 = builder.CreateICmpSLT (int_idx, one_idx);
     llvm::Value *cond = builder.CreateOr (cond0, cond1);
 
     llvm::BasicBlock *done = fn.new_block ("done");
 
     llvm::BasicBlock *conv_error = fn.new_block ("conv_error", done);
     llvm::BasicBlock *normal = fn.new_block ("normal", done);
     builder.CreateCondBr (cond, conv_error, normal);
     builder.SetInsertPoint (conv_error);
@@ -1703,17 +1700,17 @@ jit_typeinfo::jit_typeinfo (llvm::Module
     builder.CreateBr (done);
 
     builder.SetInsertPoint (normal);
     llvm::Value *len = builder.CreateExtractValue (mat, 2);
     cond0 = builder.CreateICmpSGT (int_idx, len);
 
     llvm::Value *rcount = builder.CreateExtractValue (mat, 0);
     rcount = builder.CreateLoad (rcount);
-    cond1 = builder.CreateICmpSGT (rcount, one);
+    cond1 = builder.CreateICmpSGT (rcount, one_int);
     cond = builder.CreateOr (cond0, cond1);
 
     llvm::BasicBlock *bounds_error = fn.new_block ("bounds_error", done);
     llvm::BasicBlock *success = fn.new_block ("success", done);
     builder.CreateCondBr (cond, bounds_error, success);
 
     // resize on out of bounds access
     builder.SetInsertPoint (bounds_error);
