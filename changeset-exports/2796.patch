# HG changeset patch
# User jwe
# Date 857717771 0
#      Fri Mar 07 06:56:11 1997 +0000
# Node ID 74bc1ede3c3d507faf4661601faec73523303f65
# Parent  14d07e4a0265524188e2fc7f6a73a64a371f7591
[project @ 1997-03-07 06:55:47 by jwe]

diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -520,18 +520,17 @@ evaluate NAME as a function, passing ARG
     retval = feval (args, nargout);
   else
     print_usage ("feval");
 
   return retval;
 }
 
 static octave_value_list
-eval_string (const string& s, int print, int& parse_status,
-	     int nargout) 
+eval_string (const string& s, int print, int& parse_status, int nargout)
 {
   begin_unwind_frame ("eval_string");
 
   unwind_protect_int (get_input_from_eval_string);
   unwind_protect_int (input_from_command_line_file);
   unwind_protect_ptr (global_command);
   unwind_protect_str (current_eval_string);
 
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -21,36 +21,41 @@ Software Foundation, 59 Temple Place - S
 */
 
 #if !defined (octave_toplev_h)
 #define octave_toplev_h 1
 
 #include <cstdio>
 
 class octave_value;
+class octave_value_list;
 class tree_function;
 class tree_statement_list;
 class charMatrix;
 
 #include <string>
 
-extern void clean_up_and_exit (int) GCC_ATTR_NORETURN;
+extern void
+clean_up_and_exit (int) GCC_ATTR_NORETURN;
 
-extern void parse_and_execute (FILE *f, int print = 0);
+extern void
+parse_and_execute (FILE *f, int print = 0);
 
-extern void parse_and_execute (const string& s, int print = 0,
-			       int verbose = 0,
-			       const char *warn_for = 0);
+extern void
+parse_and_execute (const string& s, int print = 0, int verbose = 0,
+		   const char *warn_for = 0);
 
-extern octave_value eval_string (const string&, int print,
-				  int& parse_status);
+extern octave_value
+eval_string (const string&, int print, int& parse_status);
 
-extern int main_loop (void);
+extern int
+main_loop (void);
 
-extern void do_octave_atexit (void);
+extern void
+do_octave_atexit (void);
 
 // argv[0] for this program.
 extern string Vprogram_invocation_name;
 
 // Cleaned-up name of this program, not including path information.
 extern string Vprogram_name;
 
 // Login name for user running this program.
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -267,16 +267,63 @@ is_valid_function (const octave_value& a
 	error ("%s: the symbol `%s' is not valid as a function",
 	       warn_for.c_str (), fcn_name.c_str ());
       ans = 0;
     }
 
   return ans;
 }
 
+tree_fvc *
+extract_function (const octave_value& arg, const string& warn_for,
+		  const string& fname, const string& header,
+		  const string& trailer)
+{
+  tree_fvc *retval = 0;
+
+  retval = is_valid_function (arg, warn_for, 0);
+
+  if (! retval)
+    {
+      string s = arg.string_value ();
+
+      string cmd = header;
+      cmd.append (s);
+      cmd.append (trailer);
+
+      if (! error_state)
+	{
+	  int parse_status;
+
+	  eval_string (cmd, 0, parse_status);
+
+	  if (parse_status == 0)
+	    {
+	      retval = is_valid_function (fname, warn_for, 0);
+      
+	      if (! retval)
+		{
+		  error ("%s: `%s' is not valid as a function",
+			 warn_for.c_str (), fname.c_str ());
+		  return retval;
+		}
+	    }
+	  else
+	    error ("%s: `%s' is not valid as a function",
+		   warn_for.c_str (), fname.c_str ());
+	}
+      else
+	error ("%s: expecting first argument to be a string",
+	       warn_for.c_str ());
+    }
+
+  return retval;
+}
+
+
 DEFUN (is_global, args, ,
   "is_global (X): return 1 if the string X names a global variable\n\
 otherwise, return 0.")
 {
   octave_value_list retval = 0.0;
 
   int nargin = args.length ();
 
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -123,16 +123,20 @@ extern bool is_builtin_variable (const s
 extern bool is_text_function_name (const string&);
 extern bool is_mapper_function_name (const string&);
 extern bool is_builtin_function_name (const string&);
 extern bool is_globally_visible (const string&);
 
 extern tree_fvc *is_valid_function (const octave_value&, const string&,
 				    int warn = 0); 
 
+tree_fvc *extract_function (const octave_value& arg, const string& warn_for,
+			    const string& fname, const string& header,
+			    const string& trailer);
+
 extern string_vector make_name_list (void);
 
 extern void install_builtin_mapper (const builtin_mapper_function& mf);
 
 extern void install_builtin_function (const builtin_function& gf);
 
 extern void install_builtin_variable (const builtin_variable& v);
 
