# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1445485426 14400
#      Wed Oct 21 23:43:46 2015 -0400
# Node ID 7a8096f8df5d4f1d1e898ee3d942521adeb053d7
# Parent  c1d94e5cd5eacc47f0c704881071c81bb685d0c0
more cleanup of indexing exceptions

* data.cc (index_error): New function.
(Fnth_element, F__accumarray_sum__, __accumdim_sum__): Use it.
* lo-array-gripes.h, lo-array-gripes.cc (index_exception::message):
Rename from index_exception::err.  Return std::string instead of const
char *.  Change all uses.
(index_exception::expression): Rename from index_exception::access.
(index_exception::index_exception, invalid_index::invalid_index,
out_of_range::out_of_range): Accept const string& instead of const
char *.  Change all uses.
(invalid_index::details): Rename from invalid_index::explain.  Return
std::string instead of const char *.  Change all uses.
(invalid_index::err_idx): Rename from invalid_index::id.  Return
std::string instead of const char *.  Change all uses.
(gripe_invalid_index): Accept const std::string& argument instead of
const char *.
(index_exception::~index_exception): Don't declare with "throw ()".
(index_exception::details): Rename from index_exception::explain.  Return
std::string instead of const char *.  Change all uses.
(index_exception::err_idx): Rename from index_exception::id.  Return
std::string instead of const char *.  Change all uses.
(index_exception::idx): Return std::string instead of const char *.
Change all uses.
(index_exception::err_id): Rename from index_exception::id.
(index_exception::msg): Delete member variable.
(index_expression::expression): Rename from index_expression::access.
Change all uses.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -77,16 +77,22 @@ along with Octave; see the file COPYING.
 #endif
 #endif
 
 #if ! defined (HAVE_HYPOTF) && defined (HAVE__HYPOTF)
 #define hypotf _hypotf
 #define HAVE_HYPOTF 1
 #endif
 
+static void
+index_error (const char *fmt, const std::string& idx, const std::string& msg)
+{
+  error (fmt, idx.c_str (), msg.c_str ());
+}
+
 #define ANY_ALL(FCN) \
  \
   octave_value retval; \
  \
   int nargin = args.length (); \
  \
   if (nargin == 1 || nargin == 2) \
     { \
@@ -7129,18 +7135,18 @@ the ratio K/M is small; otherwise, it ma
               if (argx.is_cellstr ())
                 retval = argx.cellstr_value ().nth_element (n, dim);
               else
                 gripe_wrong_type_arg ("nth_element", argx);
             }
         }
       catch (const index_exception& e)
         {
-          error ("nth_element: invalid N value %s. %s",
-                 e.idx (), e.explain ());
+          index_error ("nth_element: invalid N value %s. %s",
+                       e.idx (), e.details ());
         }
     }
   else
     print_usage ();
 
   return retval;
 }
 
@@ -7211,18 +7217,18 @@ Undocumented internal function.\n\
               else
                 retval = do_accumarray_sum (idx, vals.array_value (), n);
             }
           else
             gripe_wrong_type_arg ("accumarray", vals);
         }
       catch (const index_exception& e)
         {
-          error ("__accumarray_sum__: invalid IDX %s. %s",
-                 e.idx (), e.explain ());
+          index_error ("__accumarray_sum__: invalid IDX %s. %s",
+                       e.idx (), e.details ());
         }
     }
   else
     print_usage ();
 
   return retval;
 }
 
@@ -7314,18 +7320,18 @@ do_accumarray_minmax_fun (const octave_v
                                              zero.bool_value ());
               break;
             default:
               gripe_wrong_type_arg ("accumarray", vals);
             }
         }
       catch (const index_exception& e)
         {
-          error ("do_accumarray_minmax_fun: invalid index %s. %s",
-                 e.idx (), e.explain ());
+          index_error ("do_accumarray_minmax_fun: invalid index %s. %s",
+                       e.idx (), e.details ());
         }
 
     }
   else
     print_usage ();
 
   return retval;
 }
@@ -7420,18 +7426,18 @@ Undocumented internal function.\n\
               else
                 retval = do_accumdim_sum (idx, vals.array_value (), dim, n);
             }
           else
             gripe_wrong_type_arg ("accumdim", vals);
         }
       catch (const index_exception& e)
         {
-          error ("__accumdim_sum__: invalid IDX %s. %s",
-                 e.idx (), e.explain ());
+          index_error ("__accumdim_sum__: invalid IDX %s. %s",
+                       e.idx (), e.details ());
         }
     }
   else
     print_usage ();
 
   return retval;
 }
 
diff --git a/libinterp/corefcn/sub2ind.cc b/libinterp/corefcn/sub2ind.cc
--- a/libinterp/corefcn/sub2ind.cc
+++ b/libinterp/corefcn/sub2ind.cc
@@ -103,17 +103,18 @@ linear_index = sub2ind ([3, 3], 2, 3)\n\
 
                   if (j > 0 && args(j+1).dims () != args(1).dims ())
                     error ("sub2ind: all subscripts must be of the same size");
                 }
               catch (index_exception& e)
                 {
                   e.set_pos_if_unset (nargin-1, j+1);
                   e.set_var ();
-                  error_with_id (e.id (), e.err ());
+                  std::string msg = e.message ();
+                  error_with_id (e.err_id (), msg.c_str ());
                 }
             }
           else
             error ("sub2ind: subscripts must be numeric");
         }
 
       retval = sub2ind (dv, idxa);
     }
@@ -200,14 +201,16 @@ moving from one column to next, filling 
 
           if (nargout > dv.length ())
             dv = dv.redim (nargout);
           
           retval = Array<octave_value> (ind2sub (dv, idx));
         }
       catch (const index_exception& e)
         {
-          error ("ind2sub: Invalid index %s. %s", e.idx (), e.explain ());
+          std::string idx = e.idx ();
+          std::string msg = e.details ();
+          error ("ind2sub: Invalid index %s. %s", idx.c_str (), msg.c_str ());
         }
     }
 
   return retval;
 }
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -657,17 +657,17 @@ main_loop (void)
           octave_stdout << "\n";
           if (quitting_gracefully)
             return exit_status;
         }
       catch (const index_exception& e)
         {
           recover_from_exception ();
           std::cerr << "error: unhandled index exception: "
-                    << e.err () << " -- trying to return to prompt"
+                    << e.message () << " -- trying to return to prompt"
                     << std::endl;
         }
       catch (const octave_execution_exception&)
         {
           recover_from_exception ();
         }
       catch (const std::bad_alloc&)
         {
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -1250,47 +1250,49 @@ get_dimensions (const octave_value& a, c
 
   if (error_state)
     error ("%s: expecting two scalar arguments", warn_for);
   else
     check_dimensions (nr, nc, warn_for);
 }
 
 octave_idx_type
-dims_to_numel (const dim_vector& dims, const octave_value_list& idx)
+dims_to_numel (const dim_vector& dims, const octave_value_list& idx_arg)
 {
   octave_idx_type retval;
 
-  octave_idx_type len = idx.length ();
+  octave_idx_type len = idx_arg.length ();
 
   if (len == 0)
     retval = dims.numel ();
   else
     {
       const dim_vector dv = dims.redim (len);
       retval = 1;
       for (octave_idx_type i = 0; i < len; i++)
         {
-          octave_value idxi = idx(i);
+          octave_value idxi = idx_arg(i);
           if (idxi.is_magic_colon ())
             retval *= dv(i);
           else if (idxi.is_numeric_type ())
             retval *= idxi.numel ();
           else
             {
               try
                 {
                   idx_vector jdx = idxi.index_vector ();
 
                   retval *= jdx.length (dv(i));
                 }
               catch (const index_exception& e)
                 {
+                  std::string idx = e.idx ();
+                  std::string msg = e.details ();
                   error ("dims_to_numel: Invalid IDX %s. %s",
-                         e.idx (), e.explain ());
+                         idx.c_str (), msg.c_str ());
                 }
             }
         }
     }
 
   return retval;
 }
 
diff --git a/libinterp/octave-value/ov-base-mat.cc b/libinterp/octave-value/ov-base-mat.cc
--- a/libinterp/octave-value/ov-base-mat.cc
+++ b/libinterp/octave-value/ov-base-mat.cc
@@ -365,17 +365,17 @@ octave_base_matrix<MT>::assign (const oc
               matrix.assign (idx_vec, mrhs);
           }
           break;
         }
     }
   catch (const index_exception& e)
     {
       gripe_invalid_index (e.idx (), n_idx, k+1);
-     }
+    }
 
   // Clear cache.
   clear_cached_info ();
 }
 
 template <class MT>
 void
 octave_base_matrix<MT>::delete_elements (const octave_value_list& idx)
diff --git a/libinterp/octave-value/ov-complex.cc b/libinterp/octave-value/ov-complex.cc
--- a/libinterp/octave-value/ov-complex.cc
+++ b/libinterp/octave-value/ov-complex.cc
@@ -481,27 +481,28 @@ octave_complex::map (unary_mapper_t umap
       return octave_base_value::map (umap);
     }
 }
 
 class complex_index_exception : public index_exception
 {
 public:
 
-  complex_index_exception (const char *value) : index_exception (value) { }
+  complex_index_exception (const std::string& value)
+    : index_exception (value) { }
 
   ~complex_index_exception (void) { }
 
-  const char* explain (void) const
+  std::string details (void) const
   {
     return "subscripts must be real (forgot to initialize i or j?)";
   }
 
   // ID of error to throw.
-  const char* id (void) const
+  const char *err_id (void) const
   {
     return error_id_invalid_index;
   }
 };
 
 // Complain if a complex value is used as a subscript
 
 void
diff --git a/libinterp/parse-tree/pt-assign.cc b/libinterp/parse-tree/pt-assign.cc
--- a/libinterp/parse-tree/pt-assign.cc
+++ b/libinterp/parse-tree/pt-assign.cc
@@ -130,17 +130,18 @@ tree_simple_assignment::rvalue1 (int)
 
                   lhs_val.print_with_name (octave_stdout,
                                            lhs->name ());
                 }
             }
           catch (index_exception& e)
             {
               e.set_var (lhs->name ());
-              error_with_id (e.id (), e.err ());
+              std::string msg = e.message ();
+              error_with_id (e.err_id (), msg.c_str ());
             }
         }
     }
 
   return retval;
 }
 
 std::string
diff --git a/libinterp/parse-tree/pt-idx.cc b/libinterp/parse-tree/pt-idx.cc
--- a/libinterp/parse-tree/pt-idx.cc
+++ b/libinterp/parse-tree/pt-idx.cc
@@ -275,17 +275,18 @@ tree_index_expression::rvalue (int nargo
 
 static void
 final_index_error (index_exception& e, const tree_expression *expr)
 {
   if (expr->is_identifier ()
       && dynamic_cast<const tree_identifier *> (expr)->is_variable ())
     e.set_var (expr->name ());
 
-  error_with_id (e.id (), e.err ());
+  std::string msg = e.message ();
+  error_with_id (e.err_id (), msg.c_str ());
 }
 
 octave_value_list
 tree_index_expression::rvalue (int nargout,
                                const std::list<octave_lvalue> *lvalue_list)
 {
   octave_value_list retval;
 
diff --git a/liboctave/array/Array-util.cc b/liboctave/array/Array-util.cc
--- a/liboctave/array/Array-util.cc
+++ b/liboctave/array/Array-util.cc
@@ -558,18 +558,20 @@ sub2ind (const dim_vector& dv, const Arr
                 current_liboctave_error_handler ("sub2ind: lengths of indices must match");
 
               if (idx.extent (n) > n)
                   gripe_index_out_of_range (len, i+1, idx.extent (n), n);
             }
           catch (index_exception& e)
             {
               e.set_pos_if_unset (len, i+1);
-              e.set_var ("");           // no particular variable
-              (*current_liboctave_error_with_id_handler) (e.id(), e.err());
+              e.set_var ();
+              std::string msg = e.message ();
+              (*current_liboctave_error_with_id_handler)
+                (e.err_id (), msg.c_str ());
             }
         }
       // idxa known to be valid. Shouldn't need to catch index_exception below here.
 
 
       if (len == 1)
         retval = idxa(0);
       else if (clen == 1)
diff --git a/liboctave/util/lo-array-gripes.cc b/liboctave/util/lo-array-gripes.cc
--- a/liboctave/util/lo-array-gripes.cc
+++ b/liboctave/util/lo-array-gripes.cc
@@ -20,17 +20,18 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <string.h>
+#include <cstring>
+
 #include "lo-array-gripes.h"
 #include "lo-error.h"
 
 const char *error_id_nonconformant_args = "Octave:nonconformant-args";
 
 const char *error_id_index_out_of_bounds = "Octave:index-out-of-bounds";
 
 const char *error_id_invalid_index = "Octave:invalid-index";
@@ -102,29 +103,29 @@ gripe_del_index_out_of_range (bool is1d,
 }
 
 
 
 // Common procedures of base class index_exception, thrown whenever an
 // object is indexed incorrectly, such as by an index that is out of
 // range, negative, fractional, complex, or of a non-numeric type.
 
-const char *
-index_exception::err (void) throw ()
+std::string
+index_exception::message (void) const
 {
-  msg = access () + "; " + explain ();
+  std::string msg = expression () + "; " + details ();
   return msg.c_str ();
 }
 
-// Show what was illegally accessed, e.g.,  "A(-1,_)", "A(0+1i)", "A(_,3)"
-// Show how many indices come before/after the offending one,
-// e.g., (<error>), (<error>,_), or (_,<error>,...[x5]...)
+// Show the expression that caused the error, e.g.,  "A(-1,_)",
+// "A(0+1i)", "A(_,3)".  Show how many indices come before/after the
+// offending one, e.g., (<error>), (<error>,_), or (_,<error>,...[x5]...)
 
 std::string
-index_exception:: access (void) const
+index_exception::expression (void) const
 {
   // FIXME: don't use a fixed size buffer!
   const int buf_len = 300;
 
   char output [buf_len];
   char pre [buf_len];
   char post [buf_len];
 
@@ -177,95 +178,96 @@ index_exception:: access (void) const
 
   const char *v;
 
   if (var[0] == '\0' || var == "<unknown>")
     v = "index ";
   else
     v = var.c_str ();
 
-  snprintf (output, buf_len, "%s%s%s%s", v, pre, idx(), post);
+  std::string tmp_idx = idx ();
+  snprintf (output, buf_len, "%s%s%s%s", v, pre, tmp_idx.c_str (), post);
 
   return output;
 }
 
 class invalid_index : public index_exception
 {
 public:
 
-  invalid_index (const char *value, octave_idx_type ndim,
+  invalid_index (const std::string& value, octave_idx_type ndim,
                  octave_idx_type dimen)
     : index_exception (value, ndim, dimen)
   { }
 
-  const char* explain (void) const
+  std::string details (void) const
   {
 #ifdef USE_64_BIT_IDX_T
     return "subscripts must be either integers 1 to (2^63)-1 or logicals";
 #else
     return "subscripts must be either integers 1 to (2^31)-1 or logicals";
 #endif
   }
 
   // ID of error to throw
-  const char* id (void) const
+  const char *err_id (void) const
   {
     return error_id_invalid_index;
   }
 };
 
-// Complain of an index that is: negative, fractional, or too big.
+// Complain if an index is negative, fractional, or too big.
 
 void
-gripe_invalid_index (const char *idx, octave_idx_type nd,
-                     octave_idx_type dim, const char * /* var */)
+gripe_invalid_index (const std::string& idx, octave_idx_type nd,
+                     octave_idx_type dim, const std::string&)
 {
     invalid_index e (idx, nd, dim);
 
     throw e;
 }
 
 void
 gripe_invalid_index (octave_idx_type n, octave_idx_type nd,
-                     octave_idx_type dim, const char *var)
+                     octave_idx_type dim, const std::string& var)
 {
-  // Note: log10 (2^63) = 19 digits.  Use 64 for ease of memory alignment. 
+  // Note: log10 (2^63) = 19 digits.
   char buf[64];
 
   sprintf (buf, "%d", n+1);
 
   gripe_invalid_index (buf, nd, dim, var);
 }
 
 void
 gripe_invalid_index (double n, octave_idx_type nd, octave_idx_type dim,
-                     const char *var)
+                     const std::string& var)
 {
   char buf[64];
 
   sprintf (buf, "%g", n+1);
 
   gripe_invalid_index (buf, nd, dim, var);
 }
 
 
 // Gripe and exception for read access beyond the bounds of an array.
 
 class out_of_range : public index_exception
 {
 public:
 
-  out_of_range (const char *value, octave_idx_type nd_in,octave_idx_type dim_in)
-        : index_exception (value, nd_in, dim_in), extent(0)
-    { }
+  out_of_range (const std::string& value, octave_idx_type nd_in,
+                octave_idx_type dim_in)
+    : index_exception (value, nd_in, dim_in), extent (0)
+  { }
 
-  const char* explain (void) const
+  std::string details (void) const
   {
-    static std::string expl;    // should probably be member variable, but
-                                // then explain can't be const.
+    std::string expl;
 
     if (nd >= size.length ())   // if not an index slice
       {
         if (var != "")
           expl = "but " + var + " has size ";
         else
           expl = "but object has size ";
 
@@ -273,23 +275,23 @@ public:
       }
     else
       {
         char buf[64];
         sprintf (buf, "%d", extent);
         expl = "out of bound " + std::string (buf);
       }
 
-    return expl.c_str ();
+    return expl;
   }
 
   // ID of error to throw.
-  const char* id (void) const
+  const char *err_id (void) const
   {
-    return (error_id_index_out_of_bounds);
+    return error_id_index_out_of_bounds;
   }
 
   void set_size (const dim_vector& size_in) { size = size_in; }
 
   void set_extent (octave_idx_type ext) { extent = ext; }
 
 private:
 
diff --git a/liboctave/util/lo-array-gripes.h b/liboctave/util/lo-array-gripes.h
--- a/liboctave/util/lo-array-gripes.h
+++ b/liboctave/util/lo-array-gripes.h
@@ -32,34 +32,34 @@ along with Octave; see the file COPYING.
 // new  gripe_invalid_index  is called.
 //
 // Typically, this should be caught after any call to
 // octave_value_list::index_vector()
 class index_exception : public octave_execution_exception
 {
 public:
 
-  index_exception (const char *index_in, octave_idx_type nd_in = 0,
+  index_exception (const std::string& index_in, octave_idx_type nd_in = 0,
                    octave_idx_type dim_in = 0, const char *var_in = "")
     : index (index_in), nd (nd_in), dim (dim_in), var (var_in)
   { }
 
-  ~index_exception (void) throw () { }
+  ~index_exception (void) { }
 
   // Erroneous index value.  Called in what, and by external code
   // (e.g., nth_element) to make a custom error message.
-  const char *idx (void) const { return index.c_str (); }
+  std::string idx (void) const { return index; }
 
   // details set by subclass.
-  virtual const char* explain (void) const = 0;
+  virtual std::string details (void) const = 0;
 
   // ID of error to throw.
-  virtual const char* id (void) const = 0;
+  virtual const char *err_id (void) const = 0;
 
-  virtual const char* err (void) throw ();
+  virtual std::string message (void) const;
 
   // Position of error: dimension in error, and number of dimensions.
   void set_pos (octave_idx_type nd_in, octave_idx_type dim_in)
   {
     nd = nd_in;
     dim = dim_in;
   }
 
@@ -75,23 +75,20 @@ public:
   // Name of variable being indexed.  eye(2)(1,1) gives "<unknown>".
   void set_var (const std::string& var_in = std::string ()) { var = var_in; }
 
 private:
 
   // Value of invalid index.
   std::string index;
 
-  // Formatted message returned by what(), (not on stack).
-  std::string msg;      
-
 protected:
 
   // Show what's wrong, e.g.,  A(-1,_), A(0+1i).
-  std::string access (void) const;
+  std::string expression (void) const;
 
   // Number of dimensions of indexed object.
   octave_idx_type nd;
 
   // Dimension number in which invalid index occurred.
   octave_idx_type dim;
 
   // Name of variable being indexed.
@@ -138,26 +135,29 @@ extern void OCTAVE_API
 gripe_index_out_of_range (int nd, int dim,
                           octave_idx_type iext, octave_idx_type ext);
 
 extern void OCTAVE_API
 gripe_del_index_out_of_range (bool is1d, octave_idx_type iext,
                               octave_idx_type ext);
 
 extern void OCTAVE_API
-gripe_invalid_index (double, octave_idx_type nd=0,
-                     octave_idx_type dim=0, const char *var = NULL);
+gripe_invalid_index (double, octave_idx_type nd = 0,
+                     octave_idx_type dim = 0,
+                     const std::string& var = std::string ());
 
 extern void OCTAVE_API
-gripe_invalid_index (octave_idx_type n, octave_idx_type nd=0,
-                     octave_idx_type dim=0, const char *var = NULL);
+gripe_invalid_index (octave_idx_type n, octave_idx_type nd = 0,
+                     octave_idx_type dim = 0,
+                     const std::string& var = std::string ());
 
 extern void OCTAVE_API
-gripe_invalid_index (const char *idx, octave_idx_type nd=0,
-                     octave_idx_type dim=0, const char *var = NULL);
+gripe_invalid_index (const std::string& idx, octave_idx_type nd = 0,
+                     octave_idx_type dim = 0,
+                     const std::string& var = std::string ());
 
 extern void OCTAVE_API
 gripe_invalid_resize (void);
 
 extern void OCTAVE_API
 gripe_singular_matrix (double rcond = 0.0);
 
 #endif
