# HG changeset patch
# User jwe
# Date 1062795340 0
#      Fri Sep 05 20:55:40 2003 +0000
# Node ID 693ad5220d1e77da718480c21f658ecf04f7d755
# Parent  aa3b7d89864e364dc951e66bb459478fda28b15e
[project @ 2003-09-05 20:55:40 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
 2003-09-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pt-cell.cc (tree_cell::rvalue): Don't assume that the number of
+	elements in a tree_argument_list is the same as the number of
+	objects it contains (cs-list objects expand to more than one).
+
+	* pt-mat.cc (tm_row_const::tm_row_const_rep::do_init_element):
+	New function, extracted from tm_row_const::tm_row_const_rep::init.
+	(tm_row_const::tm_row_const_rep::init): Use it.
+	Also handle cs-list objects.
+
 	* ov-cs-list.cc (octave_cs_list::print_raw): New function.
 	* ov-cs-list.h (octave_cs_list::print_raw): Provide decl.
 	* ov-list.h (octave_list::lst): Now protected instead of private.
 
 2003-09-04  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-plot.cc (subplot_style::columns_ok): Allow boxes style to
 	have 2 columns as well.
diff --git a/src/pt-cell.cc b/src/pt-cell.cc
--- a/src/pt-cell.cc
+++ b/src/pt-cell.cc
@@ -48,39 +48,43 @@ tree_cell::rvalue (void)
 {
   octave_value retval;
 
   MAYBE_DO_BREAKPOINT;
 
   int nr = length ();
   int nc = -1;
 
-  for (iterator p = begin (); p != end (); p++)
-    {
-      tree_argument_list *elt = *p;
-
-      if (nc < 0)
-	nc = elt->length ();
-      else if (nc != static_cast<int> (elt->length ()))
-	{
-	  ::error ("number of columns must match");
-	  return retval;
-	}
-    }
-
-  Cell val (nr, nc);
+  Cell val;
 
   int i = 0;
 
   for (iterator p = begin (); p != end (); p++)
     {
       tree_argument_list *elt = *p;
 
       octave_value_list row = elt->convert_to_const_vector ();
       
+      if (nc < 0)
+	{
+	  nc = row.length ();
+
+	  val = Cell (nr, nc);
+	}
+      else
+	{
+	  int this_nc = row.length ();
+
+	  if (nc != this_nc)
+	    {
+	      ::error ("number of columns must match");
+	      return retval;
+	    }
+	}
+
       for (int j = 0; j < nc; j++)
 	val(i,j) = row(j);
 
       i++;
     }
 
   retval = val;
 
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -84,16 +84,18 @@ private:
 
     bool all_str;
     bool some_str;
     bool is_cmplx;
     bool all_mt;
 
     bool ok;
 
+    bool do_init_element (tree_expression *, const octave_value&, bool&);
+
     void init (const tree_argument_list&);
 
   private:
 
     tm_row_const_rep (const tm_row_const_rep&);
 
     tm_row_const_rep& operator = (const tm_row_const_rep&);
 
@@ -159,16 +161,61 @@ public:
   iterator end (void) { return rep->end (); }
   const_iterator end (void) const { return rep->end (); }
 
 private:
 
   tm_row_const_rep *rep;
 };
 
+bool
+tm_row_const::tm_row_const_rep::do_init_element (tree_expression *elt,
+						 const octave_value& val,
+						 bool& first_elem)
+{
+  int this_elt_nr = val.rows ();
+  int this_elt_nc = val.columns ();
+
+  if (this_elt_nr > 0 || this_elt_nc > 0)
+    {
+      all_mt = false;
+
+      if (first_elem)
+	{
+	  first_elem = false;
+
+	  nr = this_elt_nr;
+	}
+      else if (this_elt_nr != nr)
+	{
+	  eval_error ("number of rows must match",
+		      elt->line (), elt->column (), this_elt_nr, nr);
+	  return false;
+	}
+
+      nc += this_elt_nc;
+
+      append (val);
+    }
+  else if (Vwarn_empty_list_elements)
+    eval_warning ("empty matrix found in matrix list",
+		  elt->line (), elt->column ());
+
+  if (all_str && ! val.is_string ())
+    all_str = false;
+
+  if (! some_str && val.is_string ())
+    some_str = true;
+
+  if (! is_cmplx && val.is_complex_type ())
+    is_cmplx = true;
+
+  return true;
+}
+
 void
 tm_row_const::tm_row_const_rep::init (const tree_argument_list& row)
 {
   all_str = true;
 
   bool first_elem = true;
 
   for (tree_argument_list::const_iterator p = row.begin ();
@@ -178,55 +225,36 @@ tm_row_const::tm_row_const_rep::init (co
       tree_expression *elt = *p;
 
       octave_value tmp = elt->rvalue ();
 
       if (error_state || tmp.is_undefined ())
 	break;
       else
 	{
-	  int this_elt_nr = tmp.rows ();
-	  int this_elt_nc = tmp.columns ();
-
-	  if (this_elt_nr > 0 || this_elt_nc > 0)
+	  if (tmp.is_cs_list ())
 	    {
-	      all_mt = false;
+	      octave_value_list lst = tmp.list_value ();
 
-	      if (first_elem)
-		{
-		  first_elem = false;
-
-		  nr = this_elt_nr;
-		}
-	      else if (this_elt_nr != nr)
+	      for (int i = 0; i < lst.length (); i++)
 		{
-		  eval_error ("number of rows must match",
-			      elt->line (), elt->column (), this_elt_nr, nr);
-		  break;
+		  if (! do_init_element (elt, lst(i), first_elem))
+		    goto done;
 		}
-
-	      nc += this_elt_nc;
-
-	      append (tmp);
 	    }
-	  else if (Vwarn_empty_list_elements)
-	    eval_warning ("empty matrix found in matrix list",
-			  elt->line (), elt->column ());
-
-	  if (all_str && ! tmp.is_string ())
-	    all_str = false;
-
-	  if (! some_str && tmp.is_string ())
-	    some_str = true;
-
-	  if (! is_cmplx && tmp.is_complex_type ())
-	    is_cmplx = true;
+	  else
+	    {
+	      if (! do_init_element (elt, tmp, first_elem))
+		goto done;
+	    }
 	}
     }
 
+ done:
+
   ok = ! error_state;
 }
 
 void
 tm_row_const::tm_row_const_rep::eval_error (const char *msg, int l,
 					    int c, int x, int y) const
 {
   if (l == -1 && c == -1)
