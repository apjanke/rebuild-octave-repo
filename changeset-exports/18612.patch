# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1396400228 14400
#      Tue Apr 01 20:57:08 2014 -0400
# Node ID 9597e00ed2dd0c1aa37366a301c42ef9227b6b9e
# Parent  0ede4dbb37f12189e4fd967698a10d20ec0a5855
Add support for "windowbuttonmotionfcn" and "currentpoint"

* Figure.cc (Figure::Figure): Enable mouse tracking if
windowbuttonmotionfcn callback is defined.
(Figure::update): Enable mouse tracking on canvas and all child widgets
when windowbuttonmotionfcn is defined.
* Panel.cc (Panel::Panel): Propagate mouse tracking to child widgets
during initialization.
* Container.h (Container::childEvent): New method.
* Container.cc (Container::childEvent): Likewise. Propagate mouse
tracking status to child widgets.
* BaseControl.cc (BaseControl::eventFilter): Handle mouse move events
and call figure's appropriate callback.
* Canvas.h (Canvas::updateCurrentPoint): New method.
* Canvas.cc (Canvas::updateCurrentPoint): Likewise. Update figure and
child axes currentpoint property.
(Canvas::canvasMouseMoveEvent): Update currentpoint properties and call
windowbuttonmotionfcn callback.
(Canvas::canvasMousePressEvent): Call updateCurrentPoint.
(Canvas::canvasMouseReleaseEvent): Likewise.

diff --git a/libgui/graphics/BaseControl.cc b/libgui/graphics/BaseControl.cc
--- a/libgui/graphics/BaseControl.cc
+++ b/libgui/graphics/BaseControl.cc
@@ -190,16 +190,30 @@ bool BaseControl::eventFilter (QObject* 
 		gh_manager::post_set (fig.get_handle (), "selectiontype",
 				      Utils::figureSelectionType (m), false);
 	      else
 		gh_manager::post_set (fig.get_handle (), "selectiontype",
 				      octave_value ("normal"), false);
 	    }
 	}
       break;
+    case QEvent::MouseMove:
+      if (qWidget<QWidget> ()->hasMouseTracking ())
+        {
+	  gh_manager::auto_lock lock;
+
+	  QMouseEvent* m = dynamic_cast<QMouseEvent*> (event);
+	  graphics_object go = object ();
+	  graphics_object fig = go.get_ancestor ("figure");
+
+          gh_manager::post_set (fig.get_handle (), "currentpoint",
+                                Utils::figureCurrentPoint (fig, m), false);
+          gh_manager::post_callback (fig.get_handle (), "windowbuttonmotionfcn");
+        }
+      break;
     case QEvent::KeyPress:
       if (m_keyPressHandlerDefined)
         {
           gh_manager::auto_lock lock;
 
           octave_scalar_map keyData =
             Utils::makeKeyEventStruct (dynamic_cast<QKeyEvent*> (event));
           graphics_object fig = object ().get_ancestor ("figure");
diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -46,16 +46,51 @@ void Canvas::redraw (bool sync)
     qWidget ()->update ();
 }
 
 void Canvas::blockRedraw (bool block)
 {
   m_redrawBlocked = block;
 }
 
+void Canvas::updateCurrentPoint(const graphics_object& fig,
+                                const graphics_object& obj, QMouseEvent* event)
+{
+  gh_manager::post_set (fig.get_handle (), "currentpoint",
+                        Utils::figureCurrentPoint (fig, event), false);
+
+  Matrix children = obj.get_properties ().get_children ();
+  octave_idx_type num_children = children.numel ();
+
+  for (int i = 0; i < num_children; i++)
+    {
+      graphics_object childObj (gh_manager::get_object (children(i)));
+
+      if (childObj.isa ("axes"))
+        {
+          axes::properties& ap = Utils::properties<axes> (childObj);
+          Matrix x_zlim = ap.get_transform_zlim ();
+          graphics_xform x_form = ap.get_transform ();
+
+          ColumnVector p1 = x_form.untransform (event->x (), event->y (),
+                                                x_zlim(0));
+          ColumnVector p2 = x_form.untransform (event->x (), event->y (),
+                                                x_zlim(1));
+
+          Matrix cp (2, 3, 0.0);
+
+          cp(0,0) = p1(0); cp(0,1) = p1(1); cp(0,2) = p1(2);
+          cp(1,0) = p2(0); cp(1,1) = p2(1); cp(1,2) = p2(2);
+
+          gh_manager::post_set (childObj.get_handle (), "currentpoint", cp,
+                                false);
+        }
+    }
+}
+
 void Canvas::canvasPaintEvent (void)
 {
   if (! m_redrawBlocked)
     {
       gh_manager::auto_lock lock;
 
       draw (m_handle);
 
@@ -129,16 +164,29 @@ void Canvas::canvasMouseMoveEvent (QMous
 	  redraw (true);
 	  break;
 	case PanMode:
 	  break;
 	default:
 	  break;
 	}
     }
+  else if (m_mouseMode == NoMode)
+    {
+      graphics_object obj = gh_manager::get_object (m_handle);
+
+      if (obj.valid_object ())
+        {
+          graphics_object figObj (obj.get_ancestor ("figure"));
+
+          updateCurrentPoint (figObj, obj, event);
+	  gh_manager::post_callback (figObj.get_handle (),
+				     "windowbuttonmotionfcn");
+        }
+    }
 }
 
 void Canvas::canvasMousePressEvent (QMouseEvent* event)
 {
   gh_manager::auto_lock lock;
   graphics_object obj = gh_manager::get_object (m_handle);
 
   if (obj.valid_object ())
@@ -223,19 +271,17 @@ void Canvas::canvasMousePressEvent (QMou
       if (fig)
 	newMouseMode = fig->mouseMode ();
 
       switch (newMouseMode)
 	{
 	case NoMode:
 	  gh_manager::post_set (figObj.get_handle (), "selectiontype",
 				Utils::figureSelectionType (event), false);
-	  gh_manager::post_set (figObj.get_handle (), "currentpoint",
-				Utils::figureCurrentPoint (figObj, event),
-				false);
+          updateCurrentPoint (figObj, obj, event);
 	  gh_manager::post_callback (figObj.get_handle (),
 				     "windowbuttondownfcn");
           gh_manager::post_callback (currentObj.get_handle (),
                                      "buttondownfcn");
 	  if (event->button () == Qt::RightButton)
 	    ContextMenu::executeAt (currentObj.get_properties (),
 				    event->globalPos ());
 	  break;
@@ -316,19 +362,17 @@ void Canvas::canvasMouseReleaseEvent (QM
     {
       gh_manager::auto_lock lock;
       graphics_object obj = gh_manager::get_object (m_handle);
 
       if (obj.valid_object ())
         {
           graphics_object figObj (obj.get_ancestor ("figure"));
 
-	  gh_manager::post_set (figObj.get_handle (), "currentpoint",
-				Utils::figureCurrentPoint (figObj, event),
-				false);
+          updateCurrentPoint (figObj, obj, event);
           gh_manager::post_callback (figObj.get_handle (),
                                      "windowbuttonupfcn");
         }
     }
 
   m_mouseAxes = graphics_handle ();
   m_mouseMode = NoMode;
 }
diff --git a/libgui/graphics/Canvas.h b/libgui/graphics/Canvas.h
--- a/libgui/graphics/Canvas.h
+++ b/libgui/graphics/Canvas.h
@@ -77,16 +77,19 @@ protected:
 
   void canvasPaintEvent (void);
   void canvasMouseMoveEvent (QMouseEvent* event);
   void canvasMousePressEvent (QMouseEvent* event);
   void canvasMouseReleaseEvent (QMouseEvent* event);
   bool canvasKeyPressEvent (QKeyEvent* event);
   bool canvasKeyReleaseEvent (QKeyEvent* event);
 
+  void updateCurrentPoint (const graphics_object& fig,
+                           const graphics_object& obj, QMouseEvent *event);
+
 private:
   graphics_handle m_handle;
   bool m_redrawBlocked;
   MouseMode m_mouseMode;
   QPoint m_mouseAnchor;
   QPoint m_mouseCurrent;
   graphics_handle m_mouseAxes;
   int m_eventMask;
diff --git a/libgui/graphics/Container.cc b/libgui/graphics/Container.cc
--- a/libgui/graphics/Container.cc
+++ b/libgui/graphics/Container.cc
@@ -19,16 +19,17 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include <QChildEvent>
 #include <QVBoxLayout>
 
 #include "graphics.h"
 
 #include "Canvas.h"
 #include "Container.h"
 #include "Object.h"
 #include "QtHandlesUtils.h"
@@ -90,9 +91,17 @@ void Container::resizeEvent (QResizeEven
 	      obj->qWidget<QWidget> ()
 		->setGeometry (xround (bb(0)), xround (bb(1)),
 			       xround (bb(2)), xround (bb(3)));
 	    }
 	}
     }
 }
 
+void Container::childEvent (QChildEvent* event)
+{
+  if (event->child ()->isWidgetType ())
+    {
+      qobject_cast<QWidget*> (event->child ())->setMouseTracking (hasMouseTracking ());
+    }
+}
+
 }; // namespace QtHandles
diff --git a/libgui/graphics/Container.h b/libgui/graphics/Container.h
--- a/libgui/graphics/Container.h
+++ b/libgui/graphics/Container.h
@@ -40,16 +40,17 @@ class Container : public ContainerBase
 {
 public:
   Container (QWidget* parent);
   ~Container (void);
 
   Canvas* canvas (const graphics_handle& handle, bool create = true);
 
 protected:
+  void childEvent (QChildEvent* event);
   void resizeEvent (QResizeEvent* event);
 
 private:
   Canvas* m_canvas;
 };
 
 }; // namespace QtHandles
 
diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -136,16 +136,22 @@ Figure::Figure (const graphics_object& g
 
   int eventMask = 0;
   if (! fp.get_keypressfcn ().is_empty ())
     eventMask |= Canvas::KeyPress;
   if (! fp.get_keyreleasefcn ().is_empty ())
     eventMask |= Canvas::KeyRelease;
   m_container->canvas (m_handle)->setEventMask (eventMask);
 
+  if (! fp.get_windowbuttonmotionfcn ().is_empty ())
+    {
+      m_container->setMouseTracking (true);
+      m_container->canvas (m_handle)->qWidget ()->setMouseTracking (true);
+    }
+
   connect (this, SIGNAL (asyncUpdate (void)),
            this, SLOT (updateContainer (void)));
 
   if (fp.is_visible ())
     QTimer::singleShot (0, win, SLOT (show ()));
   else
     win->hide ();
 
@@ -297,16 +303,25 @@ void Figure::update (int pId)
         m_container->canvas (m_handle)->addEventMask (Canvas::KeyPress);
       break;
     case figure::properties::ID_KEYRELEASEFCN:
       if (fp.get_keyreleasefcn ().is_empty ())
         m_container->canvas (m_handle)->clearEventMask (Canvas::KeyRelease);
       else
         m_container->canvas (m_handle)->addEventMask (Canvas::KeyRelease);
       break;
+    case figure::properties::ID_WINDOWBUTTONMOTIONFCN:
+        {
+          bool hasCallback = ! fp.get_windowbuttonmotionfcn ().is_empty ();
+
+          m_container->setMouseTracking (hasCallback);
+          foreach (QWidget* w, m_container->findChildren<QWidget*> ())
+            { w->setMouseTracking (hasCallback); }
+        }
+      break;
     default:
       break;
     }
 
   m_blockUpdates = false;
 }
 
 void Figure::showFigureToolBar (bool visible)
diff --git a/libgui/graphics/Panel.cc b/libgui/graphics/Panel.cc
--- a/libgui/graphics/Panel.cc
+++ b/libgui/graphics/Panel.cc
@@ -110,16 +110,22 @@ Panel::Panel (const graphics_object& go,
   frame->setLineWidth (xround (pp.get_borderwidth ()));
   QPalette pal = frame->palette ();
   setupPalette (pp, pal);
   frame->setPalette (pal);
 
   m_container = new Container (frame);
   m_container->canvas (m_handle);
 
+  if (frame->hasMouseTracking ())
+    {
+      foreach (QWidget* w, frame->findChildren<QWidget*> ())
+        { w->setMouseTracking (true); }
+    }
+
   QString title = Utils::fromStdString (pp.get_title ());
   if (! title.isEmpty ())
     {
       m_title = new QLabel (title, frame);
       m_title->setAutoFillBackground (true);
       m_title->setContentsMargins (4, 0, 4, 0);
       m_title->setPalette (pal);
       m_title->setFont (Utils::computeFont<uipanel> (pp, bb(3)));
