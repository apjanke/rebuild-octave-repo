# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1202504416 18000
#      Fri Feb 08 16:00:16 2008 -0500
# Node ID 2467639bd8c0a311f4619c6ccfeb790227b156aa
# Parent  dfcaf7ed48e3115044bdfb19eb23fcc55ca408be
eliminate UNDEFINED sort mode

diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -102,16 +102,18 @@ Array<double>::sort (octave_idx_type dim
   uint64_t *p = reinterpret_cast<uint64_t *> (v);
 
   octave_sort<uint64_t> lsort;
 
   if (mode == ASCENDING)
     lsort.set_compare (ascending_compare);
   else if (mode == DESCENDING)
     lsort.set_compare (descending_compare);
+  else
+    abort ();
 
   if (stride == 1)
     {
       for (octave_idx_type j = 0; j < iter; j++)
 	{
 	  // Flip the data in the vector so that int compares on
 	  // IEEE754 give the correct ordering.
 
@@ -128,17 +130,17 @@ Array<double>::sort (octave_idx_type dim
 
 	  // There are two representations of NaN.  One will be
 	  // sorted to the beginning of the vector and the other
 	  // to the end.  If it will be sorted incorrectly, fix
 	  // things up.
 
 	  if (lo_ieee_signbit (octave_NaN))
 	    {
-	      if (mode == UNDEFINED || mode == ASCENDING)
+	      if (mode == ASCENDING)
 		{
 		  octave_idx_type i = 0;
 		  double *vtmp = reinterpret_cast<double *> (p);
 		  while (xisnan (vtmp[i++]) && i < ns);
 		  for (octave_idx_type l = 0; l < ns - i + 1; l++)
 		    vtmp[l] = vtmp[l+i-1];
 		  for (octave_idx_type l = ns - i + 1; l < ns; l++)
 		    vtmp[l] = octave_NaN;
@@ -189,17 +191,17 @@ Array<double>::sort (octave_idx_type dim
 	      
 	  // There are two representations of NaN. One will be
 	  // sorted to the beginning of the vector and the other
 	  // to the end. If it will be sorted to the beginning,
 	  // fix things up.
 
 	  if (lo_ieee_signbit (octave_NaN))
 	    {
-	      if (mode == UNDEFINED || mode == ASCENDING)
+	      if (mode == ASCENDING)
 		{
 		   octave_idx_type i = 0;
 		  while (xisnan (v[i++*stride + offset]) && i < ns);
 		  for (octave_idx_type l = 0; l < ns - i + 1; l++)
 		    v[l*stride + offset] = v[(l+i-1)*stride + offset];
 		  for (octave_idx_type l = ns - i + 1; l < ns; l++)
 		    v[l*stride + offset] = octave_NaN;
 		}
@@ -245,16 +247,18 @@ Array<double>::sort (Array<octave_idx_ty
   uint64_t *p = reinterpret_cast<uint64_t *> (v);
 
   octave_sort<vec_index<uint64_t> *> indexed_sort;
 
   if (mode == ASCENDING)
     indexed_sort.set_compare (ascending_compare);
   else if (mode == DESCENDING)
     indexed_sort.set_compare (descending_compare);
+  else
+    abort ();
 
   OCTAVE_LOCAL_BUFFER (vec_index<uint64_t> *, vi, ns);
   OCTAVE_LOCAL_BUFFER (vec_index<uint64_t>, vix, ns);
   
   for (octave_idx_type i = 0; i < ns; i++)
     vi[i] = &vix[i];
 
   sidx = Array<octave_idx_type> (dv);
@@ -291,17 +295,17 @@ Array<double>::sort (Array<octave_idx_ty
 	}
 
       // There are two representations of NaN.  One will be sorted
       // to the beginning of the vector and the other to the end.
       // If it will be sorted to the beginning, fix things up.
 
       if (lo_ieee_signbit (octave_NaN))
 	{
-	  if (mode == UNDEFINED || mode == ASCENDING)
+	  if (mode == ASCENDING)
 	    {
 	      octave_idx_type i = 0;
 	      while (xisnan (v[i++*stride+offset]) && i < ns);
 	      OCTAVE_LOCAL_BUFFER (double, itmp, i - 1);
 	      for (octave_idx_type l = 0; l < i -1; l++)
 		itmp[l] = sidx(l*stride + offset);
 	      for (octave_idx_type l = 0; l < ns - i + 1; l++)
 		{
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -2493,16 +2493,18 @@ Array<T>::sort (octave_idx_type dim, sor
 
   T *v = m.fortran_vec ();
   octave_sort<T> lsort;
   
   if (mode == ASCENDING) 
     lsort.set_compare (ascending_compare);
   else if (mode == DESCENDING)
     lsort.set_compare (descending_compare);
+  else
+    abort ();
 
   if (stride == 1)
     {
       for (octave_idx_type j = 0; j < iter; j++)
 	{
 	  lsort.sort (v, ns);
 	  v += ns;
 	}
@@ -2561,16 +2563,18 @@ Array<T>::sort (Array<octave_idx_type> &
 
   T *v = m.fortran_vec ();
   octave_sort<vec_index<T> *> indexed_sort;
 
   if (mode == ASCENDING) 
     indexed_sort.set_compare (ascending_compare);
   else if (mode == DESCENDING)
     indexed_sort.set_compare (descending_compare);
+  else
+    abort ();
 
   OCTAVE_LOCAL_BUFFER (vec_index<T> *, vi, ns);
   OCTAVE_LOCAL_BUFFER (vec_index<T>, vix, ns);
 
   for (octave_idx_type i = 0; i < ns; i++)
     vi[i] = &vix[i];
 
   sidx = Array<octave_idx_type> (dv);
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -541,19 +541,19 @@ public:
   //  static T resize_fill_value (void) { return T (); }
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
   // Unsafe.  This function exists to support the MEX interface.
   // You should not use it anywhere else.
   void *mex_get_data (void) const { return const_cast<T *> (data ()); }
 
-  Array<T> sort (octave_idx_type dim = 0, sortmode mode = UNDEFINED) const;
+  Array<T> sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
   Array<T> sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
-		 sortmode mode = UNDEFINED) const;
+		 sortmode mode = ASCENDING) const;
 };
 
 // NOTE: these functions should be friends of the Array<T> class and
 // Array<T>::dimensions should be protected, not public, but we can't
 // do that because of bugs in gcc prior to 3.3.
 
 template <class LT, class RT>
 /* friend */ int
diff --git a/liboctave/Array2.h b/liboctave/Array2.h
--- a/liboctave/Array2.h
+++ b/liboctave/Array2.h
@@ -111,24 +111,24 @@ public:
 
   Array2<T> index (idx_vector& i, idx_vector& j, int resize_ok = 0,
 		   const T& rfv = resize_fill_value (T ())) const
     {
       Array<T> tmp = Array<T>::index (i, j, resize_ok, rfv);
       return Array2<T> (tmp, tmp.rows (), tmp.columns ());
     }
 
-  Array2<T> sort (octave_idx_type dim = 0, sortmode mode = UNDEFINED) const
+  Array2<T> sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
     {
       Array<T> tmp = Array<T>::sort (dim, mode);
       return Array2<T> (tmp, tmp.rows (), tmp.columns ());
     }
 
   Array2<T> sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
-		 sortmode mode = UNDEFINED) const
+		 sortmode mode = ASCENDING) const
     {
       Array<T> tmp = Array<T>::sort (sidx, dim, mode);
       return Array2<T> (tmp, tmp.rows (), tmp.columns ());
     }
 };
 
 #endif
 
diff --git a/liboctave/Array3.h b/liboctave/Array3.h
--- a/liboctave/Array3.h
+++ b/liboctave/Array3.h
@@ -71,24 +71,24 @@ public:
       return *this;
     }
 
   void resize (octave_idx_type r, octave_idx_type c, octave_idx_type p) { this->resize_no_fill (r, c, p); }
 
   void resize (octave_idx_type r, octave_idx_type c, octave_idx_type p, const T& val)
     { this->resize_and_fill (r, c, p, val); }
 
-  Array3<T> sort (octave_idx_type dim = 0, sortmode mode = UNDEFINED) const
+  Array3<T> sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
     {
       Array<T> tmp = Array<T>::sort (dim, mode);
       return Array3<T> (tmp, tmp.rows (), tmp.columns (), tmp.pages ());
     }
 
   Array3<T> sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
-		 sortmode mode = UNDEFINED) const
+		 sortmode mode = ASCENDING) const
     {
       Array<T> tmp = Array<T>::sort (sidx, dim, mode);
       return Array3<T> (tmp, tmp.rows (), tmp.columns (), tmp.pages ());
     }
 };
 
 #endif
 
diff --git a/liboctave/ArrayN.h b/liboctave/ArrayN.h
--- a/liboctave/ArrayN.h
+++ b/liboctave/ArrayN.h
@@ -131,24 +131,24 @@ public:
 
   ArrayN<T> index (Array<idx_vector>& ra_idx, int resize_ok = 0,
 		   const T& rfv = resize_fill_value (T ())) const
     {
       Array<T> tmp = Array<T>::index (ra_idx, resize_ok, rfv);
       return ArrayN<T> (tmp, tmp.dims ());
     }
 
-  ArrayN<T> sort (octave_idx_type dim = 0, sortmode mode = UNDEFINED) const
+  ArrayN<T> sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
     {
       Array<T> tmp = Array<T>::sort (dim, mode);
       return ArrayN<T> (tmp, tmp.dims ());
     }
 
   ArrayN<T> sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
-		 sortmode mode = UNDEFINED) const
+		 sortmode mode = ASCENDING) const
     {
       Array<T> tmp = Array<T>::sort (sidx, dim, mode);
       return ArrayN<T> (tmp, tmp.dims ());
     }
 };
 
 template <class T>
 std::ostream&
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2008-02-08  John W. Eaton  <jwe@octave.org>
+
+	* oct-sort.h (enum sortmode): Eliminate UNDEFINED.  Change all
+	uses of UNDEFINED to ASCENDING.
+
 2008-02-07  John W. Eaton  <jwe@octave.org>
 
 	* Range.cc (Range::sort_internal): Rename from sort.  New arg,
 	ASCENDING, with default value of true.
 	(Range::sort_internal (Array<octave_idx_type>&, bool)): New function.
 	(Range::sort (octave_idx_type, sortmode) const): New function.
 	(Range::sort (Array<octave_idx_type>&, octave_idx_type, sortmode)
 	const): New function.
diff --git a/liboctave/Range.cc b/liboctave/Range.cc
--- a/liboctave/Range.cc
+++ b/liboctave/Range.cc
@@ -180,57 +180,43 @@ Range::sort_internal (Array<octave_idx_t
 
 Range
 Range::sort (octave_idx_type dim, sortmode mode) const
 {
   Range retval = *this;
 
   if (dim == 1)
     {
-      switch (mode)
-	{
-	case ASCENDING:
-	  retval.sort_internal (true);
-	  break;
-
-	case DESCENDING:
-	  retval.sort_internal (false);
-	  break;
-
-	default:
-	  (*current_liboctave_error_handler) ("Range::sort: invalid sort mode");
-	}
+      if (mode == ASCENDING)
+	retval.sort_internal (true);
+      else if (mode == DESCENDING)
+	retval.sort_internal (false);
+      else
+	abort ();
     }
   else if (dim != 0)
     (*current_liboctave_error_handler) ("Range::sort: invalid dimension");
 
   return retval;
 }
 
 Range
 Range::sort (Array<octave_idx_type>& sidx, octave_idx_type dim,
 	     sortmode mode) const
 {
   Range retval = *this;
 
   if (dim == 1)
     {
-      switch (mode)
-	{
-	case ASCENDING:
+      if (mode == ASCENDING)
 	  retval.sort_internal (sidx, true);
-	  break;
-
-	case DESCENDING:
-	  retval.sort_internal (sidx, false);
-	  break;
-
-	default:
-	  (*current_liboctave_error_handler) ("Range::sort: invalid sort mode");
-	}
+      else if (mode == DESCENDING)
+	retval.sort_internal (sidx, false);
+      else
+	abort ();
     }
   else if (dim != 0)
     (*current_liboctave_error_handler) ("Range::sort: invalid dimension");
 
   return retval;
 }
 
 std::ostream&
diff --git a/liboctave/Range.h b/liboctave/Range.h
--- a/liboctave/Range.h
+++ b/liboctave/Range.h
@@ -60,20 +60,20 @@ Range
   Matrix matrix_value (void) const;
 
   double min (void) const;
   double max (void) const;
 
   void sort_internal (bool ascending = true);
   void sort_internal (Array<octave_idx_type>& sidx, bool ascending = true);
 
-  Range sort (octave_idx_type dim = 0, sortmode mode = UNDEFINED) const;
+  Range sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
 
   Range sort (Array<octave_idx_type>& sidx, octave_idx_type dim = 0,
-	      sortmode mode = UNDEFINED) const;
+	      sortmode mode = ASCENDING) const;
 
   void set_base (double b)
   {
     if (rng_base != b)
       {
 	rng_base = b;
 	clear_cache ();
       }
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -2103,16 +2103,18 @@ Sparse<T>::sort (octave_idx_type dim, so
     }
 
   octave_sort<T> lsort;
 
   if (mode == ASCENDING) 
     lsort.set_compare (sparse_ascending_compare);
   else if (mode == DESCENDING)
     lsort.set_compare (sparse_descending_compare);
+  else
+    abort ();
 
   T *v = m.data ();
   octave_idx_type *mcidx = m.cidx ();
   octave_idx_type *mridx = m.ridx ();
 
   for (octave_idx_type j = 0; j < nc; j++)
     {
       octave_idx_type ns = mcidx [j + 1] - mcidx [j];
@@ -2170,16 +2172,18 @@ Sparse<T>::sort (Array<octave_idx_type> 
     }
 
   octave_sort<vec_index<T> *> indexed_sort;
 
   if (mode == ASCENDING) 
     indexed_sort.set_compare (sparse_ascending_compare);
   else if (mode == DESCENDING)
     indexed_sort.set_compare (sparse_descending_compare);
+  else
+    abort ();
 
   T *v = m.data ();
   octave_idx_type *mcidx = m.cidx ();
   octave_idx_type *mridx = m.ridx ();
 
   OCTAVE_LOCAL_BUFFER (vec_index<T> *, vi, nr);
   OCTAVE_LOCAL_BUFFER (vec_index<T>, vix, nr);
 
diff --git a/liboctave/Sparse.h b/liboctave/Sparse.h
--- a/liboctave/Sparse.h
+++ b/liboctave/Sparse.h
@@ -513,19 +513,19 @@ public:
   // Unsafe.  These functions exist to support the MEX interface.
   // You should not use them anywhere else.
   void *mex_get_data (void) const { return const_cast<T *> (data ()); }
 
   octave_idx_type *mex_get_ir (void) const { return const_cast<octave_idx_type *> (ridx ()); }
 
   octave_idx_type *mex_get_jc (void) const { return const_cast<octave_idx_type *> (cidx ()); }
 
-  Sparse<T> sort (octave_idx_type dim = 0, sortmode mode = UNDEFINED) const;
+  Sparse<T> sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
   Sparse<T> sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
-		 sortmode mode = UNDEFINED) const;
+		 sortmode mode = ASCENDING) const;
 };
 
 // NOTE: these functions should be friends of the Sparse<T> class and
 // Sparse<T>::dimensions should be protected, not public, but we can't
 // do that because of bugs in gcc prior to 3.3.
 
 template <class LT, class RT>
 /* friend */ int
diff --git a/liboctave/oct-sort.h b/liboctave/oct-sort.h
--- a/liboctave/oct-sort.h
+++ b/liboctave/oct-sort.h
@@ -92,17 +92,17 @@ The Python license is
 // When we get into galloping mode, we stay there until both runs win less
 // often than MIN_GALLOP consecutive times.  See listsort.txt for more info.
 #define MIN_GALLOP 7
 
 // Avoid malloc for small temp arrays.
 #define MERGESTATE_TEMP_SIZE 1024
 
 // Enum for type of sort function
-enum sortmode { UNDEFINED, ASCENDING, DESCENDING };
+enum sortmode { ASCENDING, DESCENDING };
 
 template <class T>
 class
 octave_sort
 {
 public:
 
   octave_sort (void);
diff --git a/src/ov-base-mat.h b/src/ov-base-mat.h
--- a/src/ov-base-mat.h
+++ b/src/ov-base-mat.h
@@ -105,20 +105,20 @@ public:
 
   octave_value all (int dim = 0) const { return matrix.all (dim); }
   octave_value any (int dim = 0) const { return matrix.any (dim); }
 
   MatrixType matrix_type (void) const { return typ; }
   MatrixType matrix_type (const MatrixType& _typ) const
     { MatrixType ret = typ; typ = _typ; return ret; }
 
-  octave_value sort (octave_idx_type dim = 0, sortmode mode = UNDEFINED) const
+  octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
     { return octave_value (matrix.sort (dim, mode)); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
-		     sortmode mode = UNDEFINED) const
+		     sortmode mode = ASCENDING) const
     { return octave_value (matrix.sort (sidx, dim, mode)); }
 
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
diff --git a/src/ov-base-sparse.h b/src/ov-base-sparse.h
--- a/src/ov-base-sparse.h
+++ b/src/ov-base-sparse.h
@@ -111,20 +111,20 @@ octave_base_sparse : public octave_base_
   octave_value permute (const Array<int>& vec, bool inv = false) const
     { return T (matrix.permute (vec, inv)); }
 
   octave_value resize (const dim_vector& dv, bool = false) const;
 
   octave_value all (int dim = 0) const { return matrix.all (dim); }
   octave_value any (int dim = 0) const { return matrix.any (dim); }
 
-  octave_value sort (octave_idx_type dim = 0, sortmode mode = UNDEFINED) const
+  octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
     { return octave_value (matrix.sort (dim, mode)); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
-		     sortmode mode = UNDEFINED) const
+		     sortmode mode = ASCENDING) const
     { return octave_value (matrix.sort (sidx, dim, mode)); }
 
   MatrixType matrix_type (void) const { return typ; }
   MatrixType matrix_type (const MatrixType& _typ) const
     { MatrixType ret = typ; typ = _typ; return ret; }
 
   bool is_matrix_type (void) const { return true; }
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -452,20 +452,20 @@ public:
 
   virtual octave_idx_type *mex_get_ir (void) const { return 0; }
 
   virtual octave_idx_type *mex_get_jc (void) const { return 0; }
 
   virtual mxArray *as_mxArray (void) const;
 
   virtual octave_value sort (octave_idx_type dim = 0, 
-			     sortmode mode = UNDEFINED) const;
+			     sortmode mode = ASCENDING) const;
   virtual octave_value sort (Array<octave_idx_type> &sidx, 
 			     octave_idx_type dim = 0,
-			     sortmode mode = UNDEFINED) const;
+			     sortmode mode = ASCENDING) const;
 
 protected:
 
   // This should only be called for derived types.
 
   octave_value numeric_assign (const std::string& type,
 			       const std::list<octave_value_list>& idx,
 			       const octave_value& rhs);
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -127,21 +127,21 @@ public:
   bool is_constant (void) const { return true; }
 
   bool is_range (void) const { return true; }
 
   octave_value all (int dim = 0) const;
 
   octave_value any (int dim = 0) const;
 
-  octave_value sort (octave_idx_type dim = 0, sortmode mode = UNDEFINED) const
+  octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
     { return range.sort (dim, mode); }
 
   octave_value sort (Array<octave_idx_type>& sidx, octave_idx_type dim = 0,
-		     sortmode mode = UNDEFINED) const
+		     sortmode mode = ASCENDING) const
     { return range.sort (sidx, dim, mode); }
 
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const
     {
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -121,20 +121,20 @@ public:
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   ComplexNDArray complex_array_value (bool = false) const;
 
   string_vector all_strings (bool pad = false) const;
 
   std::string string_value (bool force = false) const;
 
-  octave_value sort (octave_idx_type dim = 0, sortmode mode = UNDEFINED) const
+  octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
   { return octave_value (matrix.sort (dim, mode), true); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
-		     sortmode mode = UNDEFINED) const
+		     sortmode mode = ASCENDING) const
   { return octave_value (matrix.sort (sidx, dim, mode), true); }
 
   bool print_as_scalar (void) const { return (rows () <= 1); }
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   bool save_ascii (std::ostream& os);
 
@@ -222,20 +222,20 @@ public:
 
   bool is_sq_string (void) const { return true; }
 
   octave_value do_index_op (const octave_value_list& idx,
 			    bool resize_ok = false)
     { return do_index_op_internal (idx, resize_ok, '\''); }
 
 
-  octave_value sort (octave_idx_type dim = 0, sortmode mode = UNDEFINED) const
+  octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
   { return octave_value (matrix.sort (dim, mode), true, '\''); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
-		     sortmode mode = UNDEFINED) const
+		     sortmode mode = ASCENDING) const
   { return octave_value (matrix.sort (sidx, dim, mode), true, '\''); }
 
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -860,20 +860,20 @@ public:
   void *mex_get_data (void) const { return rep->mex_get_data (); }
 
   octave_idx_type *mex_get_ir (void) const { return rep->mex_get_ir (); }
 
   octave_idx_type *mex_get_jc (void) const { return rep->mex_get_jc (); }
 
   mxArray *as_mxArray (void) const { return rep->as_mxArray (); }
 
-  octave_value sort (octave_idx_type dim = 0, sortmode mode = UNDEFINED) const
+  octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
     { return rep->sort (dim, mode); } 
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
-		 sortmode mode = UNDEFINED) const
+		 sortmode mode = ASCENDING) const
     { return rep->sort (sidx, dim, mode); } 
 
 protected:
 
   // The real representation.
   octave_base_value *rep;
 
 private:
