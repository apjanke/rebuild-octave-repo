# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1517495698 18000
#      Thu Feb 01 09:34:58 2018 -0500
# Node ID 62a05d23cd0016041de40642c983dc6ed7cf1c08
# Parent  15fe766fbaf57d02e03ed6a7eaa75740f2d4b39a
don't cache text data in variable editor model (bug #53005)

* variable-editor-model.h, variable-editor-model.cc
(variable_editor_model::impl::cell): Delete class and all uses.
(variable_editor_model::impl::m_table): Delete data member and all
uses.

Instead of caching the text representation and information about
elements of the variable editor model data, simply recompute as
needed.  Reinitialize the QVector<cell> object was far too expensive
for large arrays.

Note that we also only compute the display format for the model if
there are no more than 250000 elements.  This number should be made
configurable.

diff --git a/libgui/src/variable-editor-model.cc b/libgui/src/variable-editor-model.cc
--- a/libgui/src/variable-editor-model.cc
+++ b/libgui/src/variable-editor-model.cc
@@ -25,19 +25,19 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #  include <config.h>
 #endif
 
 #include <sstream>
 
 #include <QDebug>
 #include <QLabel>
+#include <QMap>
 #include <QMessageBox>
 #include <QString>
-#include <QVector>
 
 #include "octave-qt-link.h"
 #include "variable-editor-model.h"
 
 #include "ov.h"
 #include "parse.h"
 #include "pr-flt-fmt.h"
 #include "utils.h"
@@ -120,36 +120,150 @@ get_rows_and_columns (const octave_value
     }
   else
     {
       rows = val.rows ();
       cols = val.columns ();
     }
 }
 
+static QString
+do_edit_display_sub (const float_display_format& fmt, const octave_value& val,
+                     const octave_value& elt, int r, int c)
+{
+  if ((elt.numel () == 1 && (elt.isnumeric () || elt.islogical ()))
+      || (elt.is_string () && (elt.rows () == 1 || elt.isempty ())))
+    return QString::fromStdString (elt.edit_display (fmt, 0, 0));
+  else
+    return QString::fromStdString (val.edit_display (fmt, r, c));
+}
+
+static QString
+do_edit_display (const float_display_format& fmt, octave_value& val,
+                 int r, int c)
+{
+  QString data;
+
+  if (val.iscell ())
+    {
+      Cell cval = val.cell_value ();
+
+      octave_value ov = cval(r,c);
+
+      data = do_edit_display_sub (fmt, val, cval(r,c), r, c);
+    }
+  else if (val.isstruct ())
+    {
+      if (val.numel () == 1)
+        {
+          // Scalar struct.  Rows are fields, single column for
+          // values.
+
+          octave_scalar_map m = val.scalar_map_value ();
+
+          data = do_edit_display_sub (fmt, val, m.contents (r), r, c);
+        }
+      else if (val.rows () == 1 || val.columns () == 1)
+        {
+          // Vector struct.  Columns are fields, rows are values.
+
+          octave_map m = val.map_value ();
+
+          Cell cval = m.contents (c);
+
+          data = do_edit_display_sub (fmt, val, cval(r), r, c);
+        }
+      else
+        {
+          // 2-d struct array.  Rows and columns index individual
+          // scalar structs.
+
+          octave_map m = val.map_value ();
+
+          data = do_edit_display_sub (fmt, val, m(r,c), r, c);
+        }
+    }
+  else
+    data = QString::fromStdString (val.edit_display (fmt, r, c));
+
+  return data;
+}
+
 static float_display_format
 get_edit_display_format (const octave_value& val)
 {
   // FIXME: make this limit configurable.
 
   return (val.numel () > 250000
           ? float_display_format () : val.get_edit_display_format ());
 }
 
+static bool
+do_requires_sub_editor_sub (const octave_value& elt)
+{
+  return (! ((elt.numel () == 1 && (elt.isnumeric () || elt.islogical ()))
+             || (elt.is_string () && (elt.rows () == 1 || elt.isempty ()))));
+}
+
+static bool
+do_requires_sub_editor (octave_value& val, int r, int c)
+{
+  if (val.iscell ())
+    {
+      Cell cval = val.cell_value ();
+
+      octave_value ov = cval(r,c);
+
+      return do_requires_sub_editor_sub (cval(r,c));
+    }
+  else if (val.isstruct ())
+    {
+      if (val.numel () == 1)
+        {
+          // Scalar struct.  Rows are fields, single column for
+          // values.
+
+          octave_scalar_map m = val.scalar_map_value ();
+
+          return do_requires_sub_editor_sub (m.contents (r));
+        }
+      else if (val.rows () == 1 || val.columns () == 1)
+        {
+          // Vector struct.  Columns are fields, rows are values.
+
+          octave_map m = val.map_value ();
+
+          Cell cval = m.contents (c);
+
+          return do_requires_sub_editor_sub (cval(r));
+        }
+      else
+        {
+          // 2-d struct array.  Rows and columns index individual
+          // scalar structs.
+
+          octave_map m = val.map_value ();
+
+          return do_requires_sub_editor_sub (m(r,c));
+        }
+    }
+  else
+    return false;
+}
+
 struct variable_editor_model::impl
 {
   struct cell
   {
     cell (void) : m_defined (false) { }
 
     cell (const float_display_format& fmt, const octave_value& val,
           int r, int c)
       : m_defined (true), m_data ("no display"), m_status_tip ("status"),
-        m_tool_tip ("tip"), m_requires_sub_editor (false),
-        m_editor_type (sub_none)
+        m_tool_tip ("tip"), m_requires_sub_editor (false)
     {
       if (val.iscell ())
         {
           Cell cval = val.cell_value ();
 
           octave_value ov = cval(r,c);
 
           init_data_and_sub_editor (fmt, val, cval(r,c), r, c);
@@ -185,19 +299,19 @@ struct variable_editor_model::impl
               init_data_and_sub_editor (fmt, val, m(r,c), r, c);
             }
         }
       else
         m_data = QString::fromStdString (val.edit_display (fmt, r, c));
     }
 
     cell (const QString& d, const QString& s, const QString& t,
-          bool rse, sub_editor_types edtype)
+          bool rse)
       : m_defined (true), m_data (d), m_status_tip (s), m_tool_tip (t),
-        m_requires_sub_editor (rse), m_editor_type (edtype)
+        m_requires_sub_editor (rse)
     { }
 
     void init_data_and_sub_editor (const float_display_format& fmt,
                                    const octave_value& val,
                                    const octave_value& elt,
                                    int r, int c)
     {
       if ((elt.numel () == 1 && (elt.isnumeric () || elt.islogical ()))
@@ -220,53 +334,56 @@ struct variable_editor_model::impl
     QVariant m_status_tip;
 
     QVariant m_tool_tip;
 
     QVariant m_background;
 
     bool m_requires_sub_editor;
 
-    sub_editor_types m_editor_type;
-
     // FIXME: Other variables needed?
   };
 
   impl (void) = delete;
 
   impl (const QString& name, const octave_value& val, QLabel *label)
     : m_name (name.toStdString ()), m_value (val),
-      m_rows (0), m_cols (0), m_table (), m_label (label),
-      m_display_fmt (get_edit_display_format (m_value)),
-      m_validity (true), m_validtext (make_label (m_name, m_value))
+      m_rows (0), m_cols (0), m_update_pending (),
+      m_validity (true), m_validtext (make_label (m_name, m_value)),
+      m_label (label), m_display_fmt (get_edit_display_format (m_value))
   {
     m_label->setText (m_validtext);
   }
 
   impl (const impl&) = delete;
 
   impl& operator = (const impl&) = delete;
 
-  int size (void) const { return m_table.size (); }
   int rows (void) const { return m_rows; }
   int columns (void) const { return m_cols; }
 
-  int index (int r, int c) const { return c * m_rows + r; }
-  int index (const QModelIndex& idx) const
+  void set_update_pending (const QModelIndex& idx, const QString& str)
   {
-    return index (idx.row (), idx.column ());
+    m_update_pending[idx] = str;
+  }
+
+  bool update_pending (const QModelIndex& idx) const
+  {
+    return m_update_pending.contains (idx);
   }
 
-  cell& elem (int i) { return m_table[i]; }
-  cell& elem (int r, int c) { return elem (index (r, c)); }
-  cell& elem (const QModelIndex& idx) { return elem (index (idx)); }
+  QString update_pending_data (const QModelIndex& idx) const
+  {
+    return m_update_pending[idx];
+  }
 
-  const cell& elem (int i) const { return m_table[i]; }
-  const cell& elem (int r, int c) const { return elem (index (r, c)); }
-  const cell& elem (const QModelIndex& idx) const { return elem (index (idx)); }
+  void clear_update_pending (void)
+  {
+    return m_update_pending.clear ();
+  }
 
   int column_width (void) const
   {
     int width = 0;
 
     float_format r_fmt = m_display_fmt.real_format ();
     float_format i_fmt = m_display_fmt.imag_format ();
 
@@ -328,17 +445,17 @@ struct variable_editor_model::impl
               {
                 octave_scalar_map m = m_value.scalar_map_value ();
 
                 string_vector fields = m.fieldnames ();
 
                 return QString::fromStdString (fields(section));
               }
           }
-        else if (m_value.rows () == 1 || m_value.columns () == 1)
+        else if (m_rows == 1 || m_cols == 1)
           {
             // Vector struct.  Columns are fields, rows are values.
 
             if (orientation == Qt::Horizontal)
               {
                 octave_map m = m_value.map_value ();
 
                 string_vector fields = m.fieldnames ();
@@ -376,17 +493,17 @@ struct variable_editor_model::impl
             // values.
 
             octave_scalar_map m = m_value.scalar_map_value ();
 
             string_vector fields = m.fieldnames ();
 
             return QString (".%1").arg (QString::fromStdString (fields(r)));
           }
-        else if (m_value.rows () == 1 || m_value.columns () == 1)
+        else if (m_rows == 1 || m_cols == 1)
           {
             // Vector struct.  Columns are fields, rows are values.
 
             octave_map m = m_value.map_value ();
 
             string_vector fields = m.fieldnames ();
 
             return (QString ("(%1).%2")
@@ -406,32 +523,16 @@ struct variable_editor_model::impl
           }
       }
     else
       return (QString ("(%1, %2)")
               .arg (r + 1)
               .arg (c + 1));
   }
 
-  void update (const QModelIndex& idx)
-  {
-    if (is_defined (idx))
-      return;
-
-    if (idx.isValid ())
-      {
-        int r = idx.row ();
-        int c = idx.column ();
-
-        cell edit_cell (m_display_fmt, m_value, r, c);
-
-        set (r, c, edit_cell);
-      }
-  }
-
   octave_value value_at (int r, int c) const
   {
     if (m_value.iscell ())
       {
         Cell cval = m_value.cell_value ();
 
         return cval(r,c);
       }
@@ -441,17 +542,17 @@ struct variable_editor_model::impl
           {
             // Scalar struct.  Rows are fields, single column for
             // values.
 
             octave_scalar_map m = m_value.scalar_map_value ();
 
             return m.contents (r);
           }
-        else if (m_value.rows () == 1 || m_value.columns () == 1)
+        else if (m_rows == 1 || m_cols == 1)
           {
             // Vector struct.  Columns are fields, rows are values.
 
             octave_map m = m_value.map_value ();
 
             Cell cval = m.contents (c);
 
             return cval(r);
@@ -470,61 +571,26 @@ struct variable_editor_model::impl
       return octave_value ();
   }
 
   octave_value value_at (const QModelIndex& idx) const
   {
     return value_at (idx.row (), idx.column ());
   }
 
-  void set (const QModelIndex& idx, const cell& dat)
-  {
-    if (idx.isValid ())
-      elem (idx) = dat;
-  }
-
-  void set (int r, int c, const cell& dat)
-  {
-    if (0 <= r && r < rows () && 0 <= c && c <= columns ())
-      elem (r, c) = dat;
-  }
-
-  bool is_defined (int r, int c) const { return elem (r, c).m_defined; }
-
-  bool is_defined (const QModelIndex& idx) const
-  {
-    return (idx.isValid () && elem (idx).m_defined);
-  }
-
   bool requires_sub_editor (const QModelIndex& idx)
   {
-    return (idx.isValid () && elem (idx).m_requires_sub_editor);
-  }
-
-  sub_editor_types sub_editor_type (const QModelIndex& idx)
-  {
-    return (idx.isValid () ? elem (idx).m_editor_type : sub_none);
-  }
-
-  void clear (int i) { elem (i).m_defined = false; }
-  void clear (int r, int c) { clear (index (r, c)); }
-  void clear (const QModelIndex& idx) { clear (index (idx)); }
-
-  void clear (void)
-  {
-    for (int i = 0; i < size (); ++i)
-      clear (i);
+    return (idx.isValid ()
+            && do_requires_sub_editor (m_value, idx.row (), idx.column ()));
   }
 
   void reset (const octave_value& val)
   {
     m_validity = false;
 
-    m_table.clear ();
-
     int r = 0;
     int c = 0;
 
     m_value = val;
 
     m_display_fmt = get_edit_display_format (m_value);
 
     if (m_value.is_defined ())
@@ -532,71 +598,70 @@ struct variable_editor_model::impl
         m_validity = true;
 
         get_rows_and_columns (m_value, r, c);
       }
 
     m_rows = r;
     m_cols = c;
 
-    m_table.resize (m_rows * m_cols);
-
     m_label->setTextFormat (Qt::PlainText);
 
     m_validtext = make_label (m_name, m_value);
   }
 
   void invalidate (void)
   {
     reset (octave_value ());
   }
 
   QVariant data (const QModelIndex& idx, int role)
   {
-    update (idx);
-
     if (idx.isValid ())
       {
         switch (role)
           {
           case Qt::DisplayRole:
           case Qt::EditRole:
-            return elem (idx).m_data;
+            return do_edit_display (m_display_fmt, m_value,
+                                    idx.row (), idx.column ());
 
+#if 0
           case Qt::StatusTipRole:
             return elem (idx).m_status_tip;
 
           case Qt::ToolTipRole:
             return elem (idx).m_tool_tip;
 
           case Qt::BackgroundRole:
             return elem (idx).m_background;
+#endif
           }
       }
 
     return QVariant ();
   }
 
   const std::string m_name;
 
   octave_value m_value;
 
-  // Using QVector limits the size to int.
+  // Qt table widget limits the size to int.
   int m_rows;
   int m_cols;
 
-  QVector<cell> m_table;
+  QMap<QModelIndex, QString> m_update_pending;
+
+  bool m_validity;
+
+  QString m_validtext;
 
   QLabel *m_label;
 
   float_display_format m_display_fmt;
-
-  bool m_validity;
-
-  QString m_validtext;
 };
 
 variable_editor_model::variable_editor_model (const QString& expr,
                                               const octave_value& val,
                                               QLabel *label,
                                               QObject *parent)
   : QAbstractTableModel (parent), m_parent (parent),
     m_d (new impl (expr, val, label))
@@ -605,19 +670,16 @@ variable_editor_model::variable_editor_m
            this, SLOT (user_error (const QString&, const QString&)));
 
   connect (this, SIGNAL (update_data_signal (const octave_value&)),
            this, SLOT (update_data (const octave_value&)));
 
   connect (this, SIGNAL (data_error_signal (const QString&)),
            this, SLOT (data_error (const QString&)));
 
-  connect (this, SIGNAL (clear_data_cell_signal (int, int)),
-           this, SLOT (clear_data_cell (int, int)));
-
   connect (this, SIGNAL (maybe_resize_columns_signal (void)),
            parent, SLOT (maybe_resize_columns (void)));
 
   if (! type_is_editable (val))
     return;
 
   // Initializes everything.
 
@@ -662,16 +724,19 @@ int
 variable_editor_model::columnCount (const QModelIndex&) const
 {
   return m_d->m_validity ? m_d->columns () : 1;
 }
 
 QVariant
 variable_editor_model::data (const QModelIndex& idx, int role) const
 {
+  if (role == Qt::DisplayRole && update_pending (idx))
+    return QVariant (update_pending_data (idx));
+
   if (! m_d->m_validity)
     {
       if (idx.isValid ())
         {
           if (role == Qt::DisplayRole)
             return QVariant (QString ("Variable %d not found")
                              .arg (QString::fromStdString (m_d->m_name)));
         }
@@ -696,40 +761,39 @@ variable_editor_model::setData (const QM
 
   // Initially, set value to whatever the user entered.
 
   int r = idx.row ();
   int c = idx.column ();
 
   QString vstr = v.toString ();
 
-  m_d->set (r, c, impl::cell (vstr, "", "", false, sub_none));
+  set_update_pending (idx, vstr);
 
   // Evaluate the string that the user entered.  If that fails, we
   // will restore previous value.
 
   octave_link::post_event<variable_editor_model, int, int, std::string>
     (this, &variable_editor_model::set_data_oct, r, c, vstr.toStdString ());
 
-  // This is success so far...
-
   return true;
 }
 
 Qt::ItemFlags
 variable_editor_model::flags (const QModelIndex& idx) const
 {
   if (m_d->m_validity)
     {
+#if 0
       if (requires_sub_editor (idx))
         {
           if (editor_type (idx) != sub_string)
             return QAbstractTableModel::flags (idx);
         }
-
+#endif
       return QAbstractTableModel::flags (idx) | Qt::ItemIsEditable;
     }
 
   return Qt::NoItemFlags;
 }
 
 bool
 variable_editor_model::insertRows (int row, int count, const QModelIndex&)
@@ -811,24 +875,39 @@ variable_editor_model::update_data_cache
 }
 
 bool
 variable_editor_model::requires_sub_editor (const QModelIndex& idx) const
 {
   return m_d->requires_sub_editor (idx);
 }
 
-bool variable_editor_model::editor_type_matrix (const QModelIndex& idx) const
+void
+variable_editor_model::set_update_pending (const QModelIndex& idx,
+                                           const QString& str)
 {
-  return m_d->sub_editor_type (idx) == sub_matrix;
+  m_d->set_update_pending (idx, str);
 }
 
-bool variable_editor_model::editor_type_string (const QModelIndex& idx) const
+bool
+variable_editor_model::update_pending (const QModelIndex& idx) const
 {
-  return m_d->sub_editor_type (idx) == sub_string;
+  return m_d->update_pending (idx);
+}
+
+QString
+variable_editor_model::update_pending_data (const QModelIndex& idx) const
+{
+  return m_d->update_pending_data (idx);
+}
+
+void
+variable_editor_model::clear_update_pending (void)
+{
+  m_d->clear_update_pending ();
 }
 
 char
 variable_editor_model::quote_char (int r, int c) const
 {
   return m_d->quote_char (r, c);
 }
 
@@ -870,19 +949,17 @@ variable_editor_model::update_data (cons
       emit data_error_signal (msg);
 
       return;
     }
 
   if (! type_is_editable (val))
     return;
 
-  // Add or remove rows and columns when the size changes, but always
-  // invalidate the entire m_table cache because we don't know which
-  // elements of val have changed.
+  // Add or remove rows and columns when the size changes.
 
   int old_rows = m_d->rows ();
   int old_cols = m_d->columns ();
 
   int new_rows = 0;
   int new_cols = 0;
 
   get_rows_and_columns (val, new_rows, new_cols);
@@ -906,16 +983,18 @@ variable_editor_model::update_data (cons
       endRemoveColumns ();
     }
   else if (new_cols > old_cols)
     {
       beginInsertColumns (QModelIndex (), old_cols, new_cols-1);
       endInsertColumns ();
     }
 
+  clear_update_pending ();
+
   display_valid ();
 
   emit dataChanged (QAbstractTableModel::index (0, 0),
                     QAbstractTableModel::index (new_rows-1, new_cols-1));
 
   emit maybe_resize_columns_signal ();
 }
 
@@ -957,22 +1036,25 @@ variable_editor_model::set_data_oct (con
       octave::eval_string (expr, true, parse_status);
 
       octave_value val = retrieve_variable (name);
 
       emit update_data_signal (val);
     }
   catch (octave::execution_exception&)
     {
+      clear_update_pending ();
+
       evaluation_error (expr);
 
-      // This will ultimately cause the data in the cell to be reset
+      // This will cause the data in the cell to be reset
       // from the cached octave_value object.
 
-      emit clear_data_cell_signal (row, col);
+      emit dataChanged (QAbstractTableModel::index (row, col),
+                        QAbstractTableModel::index (row, col));
     }
 }
 
 void
 variable_editor_model::init_from_oct (const std::string& name)
 {
   // INTERPRETER THREAD
 
@@ -1035,21 +1117,16 @@ variable_editor_model::retrieve_variable
       int parse_status = 0;
 
       return octave::eval_string (x, true, parse_status);
     }
 
   return octave_value ();
 }
 
-sub_editor_types variable_editor_model::editor_type (const QModelIndex& idx) const
-{
-  return m_d->sub_editor_type (idx);
-}
-
 void
 variable_editor_model::invalidate (void)
 {
   beginResetModel ();
 
   m_d->invalidate ();
 
   endResetModel ();
@@ -1072,22 +1149,16 @@ variable_editor_model::display_valid (vo
 {
   m_d->m_label->setTextFormat (Qt::PlainText);
 
   m_d->m_label->setText (m_d->m_validtext);
 
   dynamic_cast<QWidget *> (m_parent)->setVisible (true);
 }
 
-void
-variable_editor_model::clear_data_cell (int r, int c)
-{
-  m_d->clear (r, c);
-}
-
 bool
 variable_editor_model::type_is_editable (const octave_value& val,
                                          bool display_error) const
 {
   if ((val.isnumeric () || val.islogical () || val.iscell ()
        || val.isstruct ()) && val.ndims () == 2)
     return true;
 
diff --git a/libgui/src/variable-editor-model.h b/libgui/src/variable-editor-model.h
--- a/libgui/src/variable-editor-model.h
+++ b/libgui/src/variable-editor-model.h
@@ -26,24 +26,16 @@ along with Octave; see the file COPYING.
 #define variable_editor_model_h 1
 
 #include <QAbstractTableModel>
 
 #include "ov.h"
 
 class QLabel;
 
-enum sub_editor_types
-{
-  sub_none,
-  sub_matrix,
-  sub_string,
-  sub_struct
-};
-
 class
 variable_editor_model : public QAbstractTableModel
 {
   Q_OBJECT
 
 public:
 
   variable_editor_model (const QString &expr, const octave_value& val,
@@ -89,16 +81,24 @@ public:
   // Is cell at idx complex enough to require a sub editor?
   bool requires_sub_editor (const QModelIndex& idx) const;
 
   // If a sub editor is required, is it a standard type?
   bool editor_type_matrix (const QModelIndex& idx) const;
 
   bool editor_type_string (const QModelIndex& idx) const;
 
+  void set_update_pending (const QModelIndex& idx, const QString& str);
+
+  bool update_pending (const QModelIndex& idx) const;
+
+  QString update_pending_data (const QModelIndex& idx) const;
+
+  void clear_update_pending (void);
+
   char quote_char (int r, int c) const;
 
   QVariant
   headerData (int section, Qt::Orientation orientation, int role) const;
 
   // Return a subscript expression as a string that can be used to
   // access a sub-element of a data structure.  For example "{1,3}"
   // for cell array element {1,3} or "(2,4)" for array element (2,4).
@@ -106,47 +106,41 @@ public:
   QString subscript_expression (int r, int c) const;
 
   QString subscript_expression (const QModelIndex& idx) const;
 
 signals: // private
 
   void update_data_signal (const octave_value& val);
 
-  void clear_data_cell_signal (int r, int c);
-
   void data_error_signal (const QString& name) const;
 
   void user_error_signal (const QString& title, const QString& msg) const;
 
   void maybe_resize_columns_signal (void);
 
 private slots:
 
   void update_data (const octave_value& val);
 
-  void clear_data_cell (int r, int c);
-
   // Change the display if the variable does not exist.
   void data_error (const QString& msg);
 
   void user_error (const QString& title, const QString& msg);
 
 private:
 
   void set_data_oct (const int& row, const int& col, const std::string& val);
 
   void init_from_oct (const std::string& x);
 
   void eval_oct (const std::string& name, const std::string& expr);
 
   octave_value retrieve_variable (const std::string& x);
 
-  sub_editor_types editor_type (const QModelIndex& idx) const;
-
   void invalidate (void);
 
   // Change the display now that the variable exists
   void display_valid (void);
 
   bool type_is_editable (const octave_value& val,
                          bool display_error = true) const;
 
