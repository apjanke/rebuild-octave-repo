# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1280386046 -7200
#      Thu Jul 29 08:47:26 2010 +0200
# Node ID b4ebfd6753218d23ecc73dfc0567e6a769ece6f6
# Parent  61cb53ae9db330cb2804900a7394637e372bdbce
avoid static initialization disaster in dim_vector

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2010-07-29  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dim-vector.cc (dim_vector::dim_max (void)): Turn it into a function.
+	(dim_vector::safe_numel): Update usage.
+	* dim-vector.h: Update declaration.
+
 2010-07-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dbleSCHUR.cc (SCHUR::SCHUR (const Matrix&, const Matrix&)): 
 	New ctor.
 	* dbleSCHUR.h: Declare it.
 	* floatSCHUR.cc (FloatSCHUR::FloatSCHUR (const FloatMatrix&, const
 	FloatMatrix&)): New ctor.
 	* floatSCHUR.h: Declare it.
diff --git a/liboctave/dim-vector.cc b/liboctave/dim-vector.cc
--- a/liboctave/dim-vector.cc
+++ b/liboctave/dim-vector.cc
@@ -28,18 +28,21 @@ along with Octave; see the file COPYING.
 #include <iostream>
 
 #include "dim-vector.h"
 
 // The maximum allowed value for a dimension extent. This will normally be a tiny bit
 // off the maximum value of octave_idx_type.
 // Currently 1 is subtracted to allow safe conversion of any 2D Array into Sparse,
 // but this offset may change in the future.
-const octave_idx_type
-dim_vector::dim_max = std::numeric_limits<octave_idx_type>::max () - 1;
+octave_idx_type
+dim_vector::dim_max (void)
+{
+  return std::numeric_limits<octave_idx_type>::max () - 1;
+}
 
 void
 dim_vector::chop_all_singletons (void)
 {
   make_unique ();
 
   int j = 0;
   int l = ndims();
@@ -84,17 +87,17 @@ dim_vector::num_ones (void) const
       retval++;
 
   return retval;
 }
 
 octave_idx_type
 dim_vector::safe_numel (void) const
 {
-  octave_idx_type idx_max = dim_max;
+  octave_idx_type idx_max = dim_max ();
   octave_idx_type n = 1;
   int n_dims = length ();
 
   for (int i = 0; i < n_dims; i++)
     {
       n *= rep[i];
       if (rep[i] != 0)
         idx_max /= rep[i];
diff --git a/liboctave/dim-vector.h b/liboctave/dim-vector.h
--- a/liboctave/dim-vector.h
+++ b/liboctave/dim-vector.h
@@ -214,17 +214,17 @@ private:
       return zv.rep;
     }
 
   explicit dim_vector (octave_idx_type *r)
     : rep (r) { }
 
 public:
 
-  static const octave_idx_type dim_max;
+  static octave_idx_type dim_max (void);
 
   explicit dim_vector (void) : rep (nil_rep ()) { count()++; }
 
   dim_vector (const dim_vector& dv) : rep (dv.rep) { count()++; }
 
   static dim_vector alloc (int n)
   {
     return dim_vector (newrep (n < 2 ? 2 : n));
diff --git a/src/bitfcns.cc b/src/bitfcns.cc
--- a/src/bitfcns.cc
+++ b/src/bitfcns.cc
@@ -661,14 +661,14 @@ If Octave is compiled with 64-bit indexi
 otherwise it is of class int32. It will be a tiny bit lower than the maximum\n\
 allowable value for that type, as reported by intmax.\n\
 @seealso{intmax}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 0)
-    retval = octave_int<octave_idx_type> (dim_vector::dim_max);
+    retval = octave_int<octave_idx_type> (dim_vector::dim_max ());
   else
     print_usage ();
 
   return retval;
 }
