# HG changeset patch
# User Rik <rik@octave.org>
# Date 1469030091 25200
#      Wed Jul 20 08:54:51 2016 -0700
# Node ID 283d8dfcad373b2c11e2aa76e66a58b4a17a3dbc
# Parent  c4901d7a2d7dcdc0a2d057748f603f06ce62731d
Make demos Matlab compatible for comparison with dump_demos script.

* brighten.m, colorcube.m: Replace 'tic' option to axis with setting properties on gca.

* axis.m: Use 'origin', rather than 'zero', for xaxislocation, yaxislocation
demos.

* datetick.m: Fix typo '2' -> 'ax'.

* legend.m: Use labels with call to legend() rather than embedding labels
in call to plot.

* text.m, xlim.m, ylim.m, zlim.m: Remove asserts from demo blocks.

* isonormals.m: Use Matlab syntax in string definitions.

* light.m: Use space between function name and opening parenthesis in demos.
Add missing semicolon at end of lines.

* dump_demos.m: Add helper functions sombrero() and rgbplot() to script so that
demos will run cleanly in Matlab.

diff --git a/scripts/image/brighten.m b/scripts/image/brighten.m
--- a/scripts/image/brighten.m
+++ b/scripts/image/brighten.m
@@ -82,20 +82,22 @@ function rmap = brighten (arg1, beta)
 endfunction
 
 
 %!demo
 %! ## First figure uses default grayscale colormap
 %! clf;
 %! colormap (gray (64));
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
-%! axis ([1, 64, 0, 1], "ticy", "xy");
+%! axis ([1, 64, 0, 1], "xy");
+%! set (gca, "xtick", []);
 %! title ("default grayscale colormap");
 %! pos = get (gcf, "position");
 %! pos(1) += pos(3) + 25;
 %! ## Second figure uses brightened grayscale colormap
 %! figure ("position", pos);
 %! colormap (gray (64));
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
-%! axis ([1, 64, 0, 1], "ticy", "xy");
+%! axis ([1, 64, 0, 1], "xy");
+%! set (gca, "xtick", []);
 %! brighten (0.5);
 %! title ("grayscale colormap brightened by 0.5");
 
diff --git a/scripts/image/colorcube.m b/scripts/image/colorcube.m
--- a/scripts/image/colorcube.m
+++ b/scripts/image/colorcube.m
@@ -88,11 +88,12 @@ function map = colorcube (n)
          ggrad, ggrad, ggrad];
 
 endfunction
 
 
 %!demo
 %! ## Show the 'colorcube' colormap as an image
 %! image (1:64, linspace (0, 1, 64), repmat ((1:64)', 1, 64));
-%! axis ([1, 64, 0, 1], "ticy", "xy");
+%! axis ([1, 64, 0, 1], "xy");
+%! set (gca, "xtick", []);
 %! colormap (colorcube (64));
 
diff --git a/scripts/plot/appearance/axis.m b/scripts/plot/appearance/axis.m
--- a/scripts/plot/appearance/axis.m
+++ b/scripts/plot/appearance/axis.m
@@ -550,61 +550,61 @@ endfunction
 %! loglog (1:20, '-s');
 %! axis tight;
 
 %!demo
 %! clf;
 %! x = -10:0.1:10;
 %! y = sin (x)./(1 + abs (x)) + 0.1*x - 0.4;
 %! plot (x, y);
-%! set (gca, 'xaxislocation', 'zero');
-%! set (gca, 'yaxislocation', 'zero');
+%! set (gca, 'xaxislocation', 'origin');
+%! set (gca, 'yaxislocation', 'origin');
 %! box off;
-%! title ({'no plot box', 'xaxislocation = zero, yaxislocation = zero'});
+%! title ({'no plot box', 'xaxislocation = origin, yaxislocation = origin'});
 
 %!demo
 %! clf;
 %! x = -10:0.1:10;
 %! y = sin (x)./(1+abs (x)) + 0.1*x - 0.4;
 %! plot (x, y);
-%! set (gca, 'xaxislocation', 'zero');
+%! set (gca, 'xaxislocation', 'origin');
 %! set (gca, 'yaxislocation', 'left');
 %! box off;
-%! title ({'no plot box', 'xaxislocation = zero, yaxislocation = left'});
+%! title ({'no plot box', 'xaxislocation = origin, yaxislocation = left'});
 
 %!demo
 %! clf;
 %! x = -10:0.1:10;
 %! y = sin (x)./(1+abs (x)) + 0.1*x - 0.4;
 %! plot (x, y);
 %! title ('no plot box');
-%! set (gca, 'xaxislocation', 'zero');
+%! set (gca, 'xaxislocation', 'origin');
 %! set (gca, 'yaxislocation', 'right');
 %! box off;
-%! title ({'no plot box', 'xaxislocation = zero, yaxislocation = right'});
+%! title ({'no plot box', 'xaxislocation = origin, yaxislocation = right'});
 
 %!demo
 %! clf;
 %! x = -10:0.1:10;
 %! y = sin (x)./(1+abs (x)) + 0.1*x - 0.4;
 %! plot (x, y);
 %! set (gca, 'xaxislocation', 'bottom');
-%! set (gca, 'yaxislocation', 'zero');
+%! set (gca, 'yaxislocation', 'origin');
 %! box off;
-%! title ({'no plot box', 'xaxislocation = bottom, yaxislocation = zero'});
+%! title ({'no plot box', 'xaxislocation = bottom, yaxislocation = origin'});
 
 %!demo
 %! clf;
 %! x = -10:0.1:10;
 %! y = sin (x)./(1+abs (x)) + 0.1*x - 0.4;
 %! plot (x, y);
 %! set (gca, 'xaxislocation', 'top');
-%! set (gca, 'yaxislocation', 'zero');
+%! set (gca, 'yaxislocation', 'origin');
 %! box off;
-%! title ({'no plot box', 'xaxislocation = top, yaxislocation = zero'});
+%! title ({'no plot box', 'xaxislocation = top, yaxislocation = origin'});
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   plot (11:20, [21:24, NaN, -Inf, 27:30]);
 %!   hold on;
 %!   plot (11:20, 25.5 + rand (10));
 %!   axis tight;
diff --git a/scripts/plot/appearance/datetick.m b/scripts/plot/appearance/datetick.m
--- a/scripts/plot/appearance/datetick.m
+++ b/scripts/plot/appearance/datetick.m
@@ -76,17 +76,17 @@ endfunction
 %! yr = 1988:2:2002;
 %! yr = datenum (yr,1,1);
 %! pr = [12.1 13.3 12.6 13.1 13.3 14.1 14.4 15.2];
 %! plot (yr, pr, '-o');
 %! xlabel ('year');
 %! ylabel ('average price');
 %! ax = gca;
 %! set (ax, 'xtick', datenum (1990:5:2005,1,1));
-%! datetick (2, 'x', 'keepticks');
+%! datetick (ax, 'x', 'keepticks');
 %! set (ax, 'ytick', 12:16);
 
 ## Remove from test statistics.  No real tests possible.
 %!assert (1)
 
 function __datetick__ (varargin)
 
   keeplimits = false;
diff --git a/scripts/plot/appearance/legend.m b/scripts/plot/appearance/legend.m
--- a/scripts/plot/appearance/legend.m
+++ b/scripts/plot/appearance/legend.m
@@ -1306,22 +1306,20 @@ endfunction
 %!         'Legend is hidden and then shown'});
 %! legend boxon
 %! legend hide
 %! legend show
 
 %!demo
 %! clf;
 %! x = 0:1;
-%! plot (x, x, ';\alpha;',  ...
-%!       x, 2*x, ';\beta=2\alpha;',  ...
-%!       x, 3*x, ';\gamma=3\alpha;');
-%! h = legend ();
+%! plot (x,x,  x,2*x, x,3*x);
+%! title ('Labels with interpreted Greek text');
+%! h = legend ('\alpha', '\beta=2\alpha', '\gamma=3\alpha');
 %! set (h, 'interpreter', 'tex');
-%! title ('Labels with interpreted Greek text');
 
 %!demo
 %! clf;
 %! plot (rand (2));
 %! title ('Labels with TeX interpreter turned off');
 %! h = legend ('Hello_World', 'foo^bar');
 %! set (h, 'interpreter', 'none');
 
@@ -1379,17 +1377,17 @@ endfunction
 %! legend ('peaks()');
 %! title ('legend() works for surface objects too');
 
 %!demo
 %! clf reset;  % needed to undo colormap assignment in previous demo
 %! rand_2x3_data2 = [0.44804, 0.84368, 0.23012; 0.72311, 0.58335, 0.90531];
 %! bar (rand_2x3_data2);
 %! ylim ([0 1.2]);
-%! title ('"left" option places text label west of colors');
+%! title ('"left" option places colors to the left of text label');
 %! legend ('1st Bar', '2nd Bar', '3rd Bar');
 %! legend left;
 
 %!demo
 %! clf;
 %! x = 0:0.1:7;
 %! h = plot (x,sin(x), x,cos(x), x,sin(x.^2/10), x,cos(x.^2/10));
 %! title ('Only the sin() objects have keylabels');
diff --git a/scripts/plot/appearance/text.m b/scripts/plot/appearance/text.m
--- a/scripts/plot/appearance/text.m
+++ b/scripts/plot/appearance/text.m
@@ -236,39 +236,26 @@ endfunction
 %!       'horizontalalignment', 'center', ...
 %!       'verticalalignment', 'middle');
 %! hold on;
 %! plot3 (0, 0, 5, '+k');
 
 %!demo
 %! clf;
 %! h = text (0.5, 0.3, 'char');
-%! assert ('char', class (get (h, 'string')));
 %! h = text (0.5, 0.4, ['char row 1'; 'char row 2']);
-%! assert ('char', class (get (h, 'string')));
 %! h = text (0.5, 0.6, {'cell2str (1,1)', 'cell2str (1,2)'; 'cell2str (2,1)', 'cell2str (2,2)'});
-%! assert ('cell', class (get (h, 'string')));
 %! h = text (0.5, 0.8, 'foobar');
 %! set (h, 'string', 1:3);
 %! h = text ([0.1, 0.1], [0.3, 0.4], 'one string & two objects');
-%! assert ('char', class (get (h(1), 'string')));
-%! assert ('char', class (get (h(2), 'string')));
 %! h = text ([0.1, 0.1], [0.5, 0.6], {'one cellstr & two objects'});
-%! assert ('cell', class (get (h(1), 'string')));
-%! assert ('cell', class (get (h(2), 'string')));
 %! h = text ([0.1, 0.1], [0.7, 0.8], {'cellstr 1 object 1', 'cellstr 2 object 2'});
-%! assert ('char', class (get (h(1), 'string')));
-%! assert ('char', class (get (h(2), 'string')));
 %! h = text ([0.1, 0.1], [0.1, 0.2], ['1st string & 1st object'; '2nd string & 2nd object']);
-%! assert ('char', class (get (h(1), 'string')));
-%! assert ('char', class (get (h(2), 'string')));
 %! h = text (0.7, 0.6, 'single string');
-%! assert ('char', class (get (h, 'string')));
 %! h = text (0.7, 0.5, {'single cell-string'});
-%! assert ('cell', class (get (h, 'string')));
 %! xlabel (1:2);
 %! ylabel (1:2);
 %! title (1:2);
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   ## Single object with one line
diff --git a/scripts/plot/appearance/xlim.m b/scripts/plot/appearance/xlim.m
--- a/scripts/plot/appearance/xlim.m
+++ b/scripts/plot/appearance/xlim.m
@@ -53,38 +53,34 @@ function retval = xlim (varargin)
 endfunction
 
 
 %!demo
 %! clf;
 %! line ();
 %! xlim ([0.2, 0.8]);
 %! title ('xlim is [0.2, 0.8]');
-%! assert (xlim (), [0.2, 0.8]);
 
 %!demo
 %! clf;
 %! line ();
 %! xlim ('auto');
 %! title ('xlim is auto');
-%! assert (xlim ('mode'), 'auto');
 
 %!demo
 %! clf;
 %! plot3 ([0,1], [0,1], [0,1]);
 %! xlim ([0.2, 0.8]);
 %! title ('xlim is [0.2, 0.8]');
-%! assert (xlim (), [0.2, 0.8]);
 
 %!demo
 %! clf;
 %! plot3 ([0,1], [0,1], [0,1]);
 %! xlim ('auto');
 %! title ('xlim is auto');
-%! assert (xlim ('mode'), 'auto');
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   plot3 ([0,1], [0,1], [0,1]);
 %!   xlim ([0, 1.1]);
 %!   assert (get (gca, "xlim"), [0, 1.1], eps);
 %!   assert (xlim ("mode"), "manual");
diff --git a/scripts/plot/appearance/ylim.m b/scripts/plot/appearance/ylim.m
--- a/scripts/plot/appearance/ylim.m
+++ b/scripts/plot/appearance/ylim.m
@@ -53,38 +53,34 @@ function retval = ylim (varargin)
 endfunction
 
 
 %!demo
 %! clf;
 %! line ();
 %! ylim ([0.2, 0.8]);
 %! title ('ylim is [0.2, 0.8]');
-%! assert (ylim (), [0.2, 0.8]);
 
 %!demo
 %! clf;
 %! line ();
 %! ylim ('auto');
 %! title ('ylim is auto');
-%! assert (ylim ('mode'), 'auto');
 
 %!demo
 %! clf;
 %! plot3 ([0,1], [0,1], [0,1]);
 %! ylim ([0.2, 0.8]);
 %! title ('ylim is [0.2, 0.8]');
-%! assert (ylim (), [0.2, 0.8]);
 
 %!demo
 %! clf;
 %! plot3 ([0,1], [0,1], [0,1]);
 %! ylim ('auto');
 %! title ('ylim is auto');
-%! assert (ylim ('mode'), 'auto');
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   limy = [0, 1.1];
 %!   plot3 ([0,1], [0,1], [0,1]);
 %!   ylim (limy);
 %!   assert (get (gca, "ylim"), limy, eps);
diff --git a/scripts/plot/appearance/zlim.m b/scripts/plot/appearance/zlim.m
--- a/scripts/plot/appearance/zlim.m
+++ b/scripts/plot/appearance/zlim.m
@@ -53,38 +53,34 @@ function retval = zlim (varargin)
 endfunction
 
 
 %!demo
 %! clf;
 %! line ();
 %! zlim ([0.2, 0.8]);
 %! title ('zlim is [0.2, 0.8]');
-%! assert (zlim (), [0.2, 0.8]);
 
 %!demo
 %! clf;
 %! line ();
 %! zlim ('auto');
 %! title ('zlim is auto');
-%! assert (zlim ('mode'), 'auto');
 
 %!demo
 %! clf;
 %! plot3 ([0,1], [0,1], [0,1]);
 %! zlim ([0.2, 0.8]);
 %! title ('zlim is [0.2, 0.8]');
-%! assert (zlim (), [0.2, 0.8]);
 
 %!demo
 %! clf;
 %! plot3 ([0,1], [0,1], [0,1]);
 %! zlim ('auto');
 %! title ('zlim is auto');
-%! assert (zlim ('mode'), 'auto');
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   limz = [0, 1.1];
 %!   plot3 ([0,1], [0,1], [0,1]);
 %!   zlim (limz);
 %!   assert (get (gca, "zlim"), limz, eps);
diff --git a/scripts/plot/draw/isonormals.m b/scripts/plot/draw/isonormals.m
--- a/scripts/plot/draw/isonormals.m
+++ b/scripts/plot/draw/isonormals.m
@@ -150,23 +150,23 @@ endfunction
 %! title ("patch modified by isonormals")
 %! isonormals (x, y, z, val, hp); # Directly modify patch
 %! isofinish (hp);
 %!
 %! subplot (2,2,3); view (-38, 20);
 %! hp = patch ("Faces", fac, "Vertices", vert, "FaceVertexCData", cdat);
 %! vn = isonormals (x, y, z, val, vert); # Compute normals of isosurface
 %! set (hp, "VertexNormals", vn);    # Manually set vertex normals
-%! title ("'VertexNormals' from isonormals manually set")
+%! title ('''VertexNormals'' from isonormals manually set')
 %! isofinish (hp);
 %!
 %! subplot (2,2,4); view (-38, 20);
 %! hp = patch ("Faces", fac, "Vertices", vert, "FaceVertexCData", cdat);
 %! isonormals (x, y, z, val, hp, "negate"); # Use reverse directly
-%! title ("patch modified by isonormals (..., 'negate')")
+%! title ('patch modified by isonormals (..., ''negate'')')
 %! isofinish (hp);
 
 %!shared x,y,z,val,vert
 %! [x, y, z] = meshgrid (0:.5:2, 0:.5:2, 0:.5:2);
 %! val = abs ((x-.5).^2 + (y-.3).^2 + (z-.4).^2);
 %! [fac, vert, cdat] = isosurface (x, y, z, val, .4, y);
 
 %!test
diff --git a/scripts/plot/draw/light.m b/scripts/plot/draw/light.m
--- a/scripts/plot/draw/light.m
+++ b/scripts/plot/draw/light.m
@@ -87,308 +87,313 @@ endfunction
 %!demo
 %! %% Demonstrate effects of lighting
 %! clf;
 %! %% patches
 %! h_axes1 = subplot (2, 2, 1);
 %! [x,y,z] = meshgrid (-2:0.2:2, -2:0.2:2, -2:0.2:2);
 %! val = x.^2 + y.^2 + z.^2;
 %! fv1 = isosurface (x, y, z, val, 1);
-%! h_patch1 = patch (fv1, "FaceColor", "c", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! isonormals (x, y, z, val, h_patch1)
+%! h_patch1 = patch (fv1, "FaceColor", "c", "EdgeColor", "none", ...
+%!                        "FaceLighting", "Gouraud");
+%! isonormals (x, y, z, val, h_patch1);
 %! fv2 = isosurface (x, y+3, z, val, 1);
-%! h_patch2 = patch (fv2, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! isonormals (x, y+3, z, val, h_patch2)
+%! h_patch2 = patch (fv2, "FaceColor", "r", "EdgeColor", "none", ...
+%!                        "FaceLighting", "Gouraud");
+%! isonormals (x, y+3, z, val, h_patch2);
 %! axis equal; axis tight
 %! title ("Patch with lighting");
-%! view (3)
+%! view (3);
 %! h_light1 = light ();
 %!
-%! h_axes2 = subplot(2, 2, 2);
+%! h_axes2 = subplot (2, 2, 2);
 %! patch (fv1, "FaceColor", "c", "EdgeColor", "none");
 %! patch (fv2, "FaceColor", "r", "EdgeColor", "none");
 %! axis equal; axis tight
 %! title ("Patch without lighting");
-%! view (3)
+%! view (3);
 %!
 %! %% surfaces
-%! h_axes3 = subplot(2, 2, 3);
-%! h_surf1 = surf (h_axes3, peaks, "LineStyle", "none", "FaceLighting", "Gouraud");
+%! h_axes3 = subplot (2, 2, 3);
+%! h_surf1 = surf (h_axes3, peaks, "LineStyle", "none", ...
+%!                                 "FaceLighting", "Gouraud");
 %! title ("Surface with lighting");
-%! view (3)
+%! view (3);
 %! h_light2 = light ();
 %!
-%! h_axes3 = subplot(2, 2, 4);
+%! h_axes3 = subplot (2, 2, 4);
 %! h_surf2 = surf (h_axes3, peaks, "LineStyle", "none");
 %! title ("Surface without lighting");
-%! view (3)
+%! view (3);
 
 %!demo
 %! %% Lighting modes
 %! clf;
 %! [x,y,z] = meshgrid (-.2:0.05:.2, -.2:0.05:.2, -.2:0.05:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes1 = axes ();
 %! fv = isosurface (x, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "none");
-%! isonormals (x, y, z, val, h_patch)
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "none");
+%! isonormals (x, y, z, val, h_patch);
 %! fv = isosurface (x+.5, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "flat");
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "flat");
 %! isonormals (x+.5, y, z, val, h_patch)
 %! fv = isosurface (x+1, y, z, val, .039);
-%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! isonormals (x+1, y, z, val, h_patch)
+%! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
+%!                      "FaceLighting", "Gouraud");
+%! isonormals (x+1, y, z, val, h_patch);
 %! axis tight
 %! axis equal
-%! view(2);
+%! view (2);
 %! light ("Position", [-1 1 1]);
 %! title ("FaceLighting: none - flat - gouraud");
 
-
 %!demo
 %! %% multiple lights
 %! clf;
 %! h_axes = subplot (1, 2, 1);
 %! [x,y,z] = meshgrid (-2:0.1:2, -2:0.1:2, -2:0.1:2);
 %! val = x.^2 + y.^2 + z.^2;
 %! fv = isosurface (x, y, z, val, 1);
 %! h_patch = patch (fv, "FaceColor", "w", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! isonormals (x, y, z, val, h_patch)
+%! isonormals (x, y, z, val, h_patch);
 %! axis equal; axis tight
 %! title ("Patch with one light");
-%! view (3)
+%! view (3);
 %! h_light = light ("Color", "g");
 %!
 %! h_axes2 = subplot (1, 2, 2);
 %! h_patch2 = patch (fv, "FaceColor", "w", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! isonormals (x, y, z, val, h_patch2)
+%! isonormals (x, y, z, val, h_patch2);
 %! axis equal; axis tight
 %! title ("Patch with three lights");
-%! view (3)
+%! view (3);
 %! h_light1 = light ("Color", "r");
 %! h_light2 = light ("Position", [0 1 1], "Color", "b");
 %! h_light3 = light ("Position", [-1 -1 2], "Color", "g");
 
 %!demo
 %! %% Diffuse and specular reflex
 %! clf;
 %! h_axes = axes ();
 %! [x,y,z] = meshgrid (-.2:0.02:.2, -.2:0.02:.2, -.2:0.02:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! fv = isosurface (x, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "DiffuseStrength", 0, "SpecularStrength", 0)
-%! isonormals (x, y, z, val, h_patch)
+%! set (h_patch, "DiffuseStrength", 0, "SpecularStrength", 0);
+%! isonormals (x, y, z, val, h_patch);
 %! fv = isosurface (x+.5, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "DiffuseStrength", 0, "SpecularStrength", .5)
-%! isonormals (x+.5, y, z, val, h_patch)
+%! set (h_patch, "DiffuseStrength", 0, "SpecularStrength", .5);
+%! isonormals (x+.5, y, z, val, h_patch);
 %! fv = isosurface (x+1, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "DiffuseStrength", 0, "SpecularStrength", 1)
-%! isonormals (x+1, y, z, val, h_patch)
+%! set (h_patch, "DiffuseStrength", 0, "SpecularStrength", 1);
+%! isonormals (x+1, y, z, val, h_patch);
 %!
 %! fv = isosurface (x, y+.5, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "DiffuseStrength", 0.5, "SpecularStrength", 0)
-%! isonormals (x, y+.5, z, val, h_patch)
+%! set (h_patch, "DiffuseStrength", 0.5, "SpecularStrength", 0);
+%! isonormals (x, y+.5, z, val, h_patch);
 %! fv = isosurface (x+.5, y+.5, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "DiffuseStrength", 0.5, "SpecularStrength", .5)
-%! isonormals (x+.5, y+.5, z, val, h_patch)
+%! set (h_patch, "DiffuseStrength", 0.5, "SpecularStrength", .5);
+%! isonormals (x+.5, y+.5, z, val, h_patch);
 %! fv = isosurface (x+1, y+.5, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "DiffuseStrength", 0.5, "SpecularStrength", 1)
-%! isonormals (x+1, y+.5, z, val, h_patch)
+%! set (h_patch, "DiffuseStrength", 0.5, "SpecularStrength", 1);
+%! isonormals (x+1, y+.5, z, val, h_patch);
 %!
 %! fv = isosurface (x, y+1, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "DiffuseStrength", 1, "SpecularStrength", 0)
-%! isonormals (x, y+1, z, val, h_patch)
+%! set (h_patch, "DiffuseStrength", 1, "SpecularStrength", 0);
+%! isonormals (x, y+1, z, val, h_patch);
 %! fv = isosurface (x+.5, y+1, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "DiffuseStrength", 1, "SpecularStrength", .5)
-%! isonormals (x+.5, y+1, z, val, h_patch)
+%! set (h_patch, "DiffuseStrength", 1, "SpecularStrength", .5);
+%! isonormals (x+.5, y+1, z, val, h_patch);
 %! fv = isosurface (x+1, y+1, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "DiffuseStrength", 1, "SpecularStrength", 1)
-%! isonormals (x+1, y+1, z, val, h_patch)
+%! set (h_patch, "DiffuseStrength", 1, "SpecularStrength", 1);
+%! isonormals (x+1, y+1, z, val, h_patch);
 %!
 %! axis equal
 %! h_light = light ("Position", [-1 1 1]);
-%! view(2);
+%! view (2);
 %!
-%! xlabel ("SpecularStrength")
-%! ylabel ("DiffuseStrength")
+%! xlabel ("SpecularStrength");
+%! ylabel ("DiffuseStrength");
 
 
 %!demo
 %! %% Ambient Strength and Ambient Light Color
 %! clf;
 %! [x,y,z] = meshgrid (-.2:0.05:.2, -.2:0.05:.2, -.2:0.05:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes1 = subplot (3,1,3);
-%! set (h_axes1, "AmbientLightColor", "g")
+%! set (h_axes1, "AmbientLightColor", "g");
 %! fv = isosurface (x, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "AmbientStrength", 0)
-%! isonormals (x, y, z, val, h_patch)
+%! set (h_patch, "AmbientStrength", 0);
+%! isonormals (x, y, z, val, h_patch);
 %! fv = isosurface (x+.5, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "AmbientStrength", .7)
-%! isonormals (x+.5, y, z, val, h_patch)
+%! set (h_patch, "AmbientStrength", .7);
+%! isonormals (x+.5, y, z, val, h_patch);
 %! fv = isosurface (x+1, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "AmbientStrength", 1)
-%! isonormals (x+1, y, z, val, h_patch)
+%! set (h_patch, "AmbientStrength", 1);
+%! isonormals (x+1, y, z, val, h_patch);
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
-%! view(2);
-%! xlabel ("AmbientStrength")
-%! ylabel ("AmbientLightColor [0 1 0]")
+%! view (2);
+%! xlabel ("AmbientStrength");
+%! ylabel ("AmbientLightColor [0 1 0]");
 %!
 %! h_axes2 = subplot (3,1,2);
-%! set (h_axes2, "AmbientLightColor", [.5 0 1])
+%! set (h_axes2, "AmbientLightColor", [.5 0 1]);
 %! fv = isosurface (x, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "AmbientStrength", 0)
-%! isonormals (x, y, z, val, h_patch)
+%! set (h_patch, "AmbientStrength", 0);
+%! isonormals (x, y, z, val, h_patch);
 %! fv = isosurface (x+.5, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "AmbientStrength", .7)
-%! isonormals (x+.5, y, z, val, h_patch)
+%! set (h_patch, "AmbientStrength", .7);
+%! isonormals (x+.5, y, z, val, h_patch);
 %! fv = isosurface (x+1, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "AmbientStrength", 1)
-%! isonormals (x+1, y, z, val, h_patch)
+%! set (h_patch, "AmbientStrength", 1);
+%! isonormals (x+1, y, z, val, h_patch);
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
-%! view(2);
-%! ylabel ("AmbientLightColor [.5 0 1]")
+%! view (2);
+%! ylabel ("AmbientLightColor [.5 0 1]");
 %!
 %! h_axes3 = subplot (3,1,1);
-%! set (h_axes3, "AmbientLightColor", "w")
+%! set (h_axes3, "AmbientLightColor", "w");
 %! fv = isosurface (x, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "AmbientStrength", 0)
-%! isonormals (x, y, z, val, h_patch)
+%! set (h_patch, "AmbientStrength", 0);
+%! isonormals (x, y, z, val, h_patch);
 %! fv = isosurface (x+.5, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "AmbientStrength", .7)
-%! isonormals (x+.5, y, z, val, h_patch)
+%! set (h_patch, "AmbientStrength", .7);
+%! isonormals (x+.5, y, z, val, h_patch);
 %! fv = isosurface (x+1, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "AmbientStrength", 1)
-%! isonormals (x+1, y, z, val, h_patch)
+%! set (h_patch, "AmbientStrength", 1);
+%! isonormals (x+1, y, z, val, h_patch);
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
-%! view(2);
-%! ylabel ("AmbientLightColor [1 1 1]")
+%! view (2);
+%! ylabel ("AmbientLightColor [1 1 1]");
 
 %!demo
 %! %% Specular Exponent
 %! clf;
 %! [x,y,z] = meshgrid (-.2:0.01:.2, -.2:0.01:.2, -.2:0.01:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes = axes ();
 %! fv = isosurface (x, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "SpecularExponent", 15)
-%! isonormals (x, y, z, val, h_patch)
+%! set (h_patch, "SpecularExponent", 15);
+%! isonormals (x, y, z, val, h_patch);
 %! fv = isosurface (x+.5, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "SpecularExponent", 5)
-%! isonormals (x+.5, y, z, val, h_patch)
+%! set (h_patch, "SpecularExponent", 5);
+%! isonormals (x+.5, y, z, val, h_patch);
 %! fv = isosurface (x+1, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "SpecularExponent", 1)
-%! isonormals (x+1, y, z, val, h_patch)
+%! set (h_patch, "SpecularExponent", 1);
+%! isonormals (x+1, y, z, val, h_patch);
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
-%! view(2);
-%! xlabel ("SpecularExponent")
+%! view (2);
+%! xlabel ("SpecularExponent");
 
 %!demo
 %! %% SpecularColorReflectance
 %! clf;
 %! [x,y,z] = meshgrid (-.2:0.02:.2, -.2:0.02:.2, -.2:0.02:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes = axes ();
 %! fv = isosurface (x, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "SpecularColorReflectance", 0)
-%! isonormals (x, y, z, val, h_patch)
+%! set (h_patch, "SpecularColorReflectance", 0);
+%! isonormals (x, y, z, val, h_patch);
 %! fv = isosurface (x+.5, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "SpecularColorReflectance", 0.5)
-%! isonormals (x+.5, y, z, val, h_patch)
+%! set (h_patch, "SpecularColorReflectance", 0.5);
+%! isonormals (x+.5, y, z, val, h_patch);
 %! fv = isosurface (x+1, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", "FaceLighting", "Gouraud");
-%! set (h_patch, "SpecularColorReflectance", 1)
-%! isonormals (x+1, y, z, val, h_patch)
+%! set (h_patch, "SpecularColorReflectance", 1);
+%! isonormals (x+1, y, z, val, h_patch);
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
-%! view(2);
-%! xlabel ("SpecularColorReflectance")
+%! view (2);
+%! xlabel ("SpecularColorReflectance");
 
 %!demo
 %! %% BackFaceLighting
 %! [x,y,z] = meshgrid (-.5:0.1:2, -2:0.1:2, -2:0.1:2);
 %! val = x.^2 + y.^2 + z.^2;
 %! fv = isosurface (x, y, z, val, 1);
 %! vn = isonormals (x, y, z, val, fv.vertices, "negate");
 %! h_axes1 = subplot (1, 3, 1);
 %! h_patch = patch (fv, "FaceColor", "c", "EdgeColor", "none", ...
 %!                  "FaceLighting", "Gouraud", "VertexNormals", vn);
 %! set (h_patch, "BackFaceLighting", "reverselit");
 %! h_light = light ();
-%! view (h_axes1, [-50 30])
-%! title ("reverselit")
+%! view (h_axes1, [-50 30]);
+%! title ("reverselit");
 %! axis equal
 %!
 %! h_axes2 = subplot (1, 3, 2);
 %! h_patch = patch (fv, "FaceColor", "c", "EdgeColor", "none", ...
 %!           "FaceLighting", "Gouraud", "VertexNormals", vn);
 %! set (h_patch, "BackFaceLighting", "lit");
 %! h_light = light ();
-%! view (h_axes2, [-50 30])
-%! title ("lit")
+%! view (h_axes2, [-50 30]);
+%! title ("lit");
 %! axis equal
 %!
 %! h_axes3 = subplot (1, 3, 3);
 %! h_patch = patch (fv, "FaceColor", "c", "EdgeColor", "none", ...
 %!           "FaceLighting", "Gouraud", "VertexNormals", vn);
 %! set (h_patch, "BackFaceLighting", "unlit");
 %! h_light = light ();
-%! view (h_axes3, [-50 30])
-%! title ("unlit")
+%! view (h_axes3, [-50 30]);
+%! title ("unlit");
 %! axis equal
 
 %!demo
 %! %% Colored patch
 %! clf;
 %! [x,y,z] = meshgrid (-.2:0.01:.2, -.2:0.01:.2, -.2:0.01:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
 %! h_axes = axes ();
 %! fv = isosurface (x, y, z, val, .039, z);
 %! h_patch = patch (fv, "FaceColor", "flat", "EdgeColor", "none", ...
 %!             "FaceLighting", "Gouraud");
-%! set (h_patch, "SpecularExponent", 15)
-%! isonormals (x, y, z, val, h_patch)
+%! set (h_patch, "SpecularExponent", 15);
+%! isonormals (x, y, z, val, h_patch);
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
 %! view (3);
 
 
 %!test
 %! hf = figure ("Visible", "off");
diff --git a/scripts/testfun/private/dump_demos.m b/scripts/testfun/private/dump_demos.m
--- a/scripts/testfun/private/dump_demos.m
+++ b/scripts/testfun/private/dump_demos.m
@@ -82,18 +82,21 @@ function dump_demos (dirs={"plot/appeara
       d = dir_in_loadpath (d);
     endif
     if (! exist (d, "dir"))
       error ("dump_demos: directory %s does not exist", d);
     endif
     dump_all_demos (d, fid, fmt);
   endfor
 
+  ## Add helper functions like sombrero
+  dump_helper_fcns (fid);
+
   ## Stop and flush diary
-  fprintf (fid, "diary off\n");
+  fprintf (fid, "\ndiary off\n");
 
   ## Create script ending
   fprintf (fid, "end\n\n")
 
   ## Close script
   fclose (fid);
 
 endfunction
@@ -148,17 +151,17 @@ function dump_all_demos (directory, fid,
       fprintf (fid, "    err_fid = fopen ('%s.err', 'w');\n", base_fn);
       fprintf (fid, "    fprintf (err_fid, '%%s', lasterr ());\n");
       fprintf (fid, "    fclose (err_fid);\n");
       fprintf (fid, "  end\n");
       fprintf (fid, "end\n");
       fprintf (fid, "%s ();\n", base_fn);
     endfor
   endfor
-  fprintf (fid, "close all\n");
+  fprintf (fid, "\nclose all\n");
 
 endfunction
 
 function retval = get_demos (fcn)
 
   [code, idx] = test (fcn, "grabdemo");
   num_demos = length (idx) - 1;
   retval = cell (1, num_demos);
@@ -192,8 +195,72 @@ function code = oct2mat (code)
     code = strrep (code, commentkeywords{k}, ["%" commentkeywords{k}]);
   endfor
 
   ## Fix up sombrero which now has default argument in Octave
   code = strrep (code, "sombrero ()", "sombrero (41)");
 
 endfunction
 
+function dump_helper_fcns (fid)
+
+  fprintf (fid, "\n%s\n", repmat ("%", [1, 60]));
+  fdisp (fid, "% Helper functions");
+  fprintf (fid, "%s\n", repmat ("%", [1, 60]));
+
+  ## Add sombrero function
+  fdisp (fid, [
+"function [x, y, z] = sombrero (n)                                            "
+"                                                                             "
+"  if (nargin == 0)                                                           "
+"    n = 41;                                                                  "
+"  end                                                                        "
+"                                                                             "
+"  [xx, yy] = meshgrid (linspace (-8, 8, n));                                 "
+"  r = sqrt (xx.^2 + yy.^2) + eps;  % eps prevents div/0 errors               "
+"  zz = sin (r) ./ r;                                                         "
+"                                                                             "
+"  if (nargout == 0)                                                          "
+"    surf (xx, yy, zz);                                                       "
+"  elseif (nargout == 1)                                                      "
+"    x = zz;                                                                  "
+"  else                                                                       "
+"    x = xx;                                                                  "
+"    y = yy;                                                                  "
+"    z = zz;                                                                  "
+"  end                                                                        "
+"                                                                             "
+"end                                                                          "
+]);  # End of sombrero dump
+
+  fprintf (fid, "\n");
+
+  ## Add rgbplot function
+  fdisp (fid, [
+"function h = rgbplot (cmap, style)                                           "
+"                                                                             "
+"  if (nargin == 1)                                                           "
+"    style = 'profile';                                                       "
+"  end                                                                        "
+"                                                                             "
+"  switch (lower (style))                                                     "
+"    case 'profile'                                                           "
+"      htmp = plot (cmap(:,1),'r', cmap(:,2),'g', cmap(:,3),'b');             "
+"      set (gca (), 'ytick', 0:0.1:1);                                        "
+"      set (gca (), 'xlim', [0 rows(cmap)]);                                  "
+"    case 'composite'                                                         "
+"      htmp = image (1:rows(cmap));                                           "
+"      set (gca, 'ytick', []);                                                "
+"      colormap (cmap);                                                       "
+"  end                                                                        "
+"  xlabel ('color index');                                                    "
+"                                                                             "
+"  if (nargout > 0)                                                           "
+"    h = htmp;                                                                "
+"  end                                                                        "
+"                                                                             "
+"end                                                                          "
+]);  # End of rgbplot dump
+
+  fprintf (fid, "%s\n", repmat ("%", [1, 60]));
+
+endfunction
+
