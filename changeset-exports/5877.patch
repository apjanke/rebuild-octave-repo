# HG changeset patch
# User dbateman
# Date 1151790726 0
#      Sat Jul 01 21:52:06 2006 +0000
# Node ID 50d43cdbec80a005f2ab01294e7e83c810ddfc61
# Parent  565d0cd4d9d04f69e288eb1d9006036792f9fbca
[project @ 2006-07-01 21:52:05 by dbateman]

diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -777,19 +777,19 @@ SparseComplexMatrix::tinverse (MatrixTyp
 			} while ((rpX<j) && (rpU<j) && 
 				 (colXp<cx) && (colUp<nz));
 
 
 		      // get A(m,m)
 		      if (typ == MatrixType::Upper)
 			colUp = cidx(j+1) - 1;
 		      else
-			colUp = cidx(j) - 1;
+			colUp = cidx(j);
 		      Complex pivot = data(colUp);
-		      if (pivot == 0. || colUp != j) 
+		      if (pivot == 0. || ridx(colUp) != j) 
 			{
 			  (*current_liboctave_error_handler) 
 			    ("division by zero");
 			  goto inverse_singular;
 			}
 
 		      if (v != 0.)
 			{
@@ -805,19 +805,19 @@ SparseComplexMatrix::tinverse (MatrixTyp
 			}
 		    }
 
 		  // get A(m,m)
 		  octave_idx_type colUp;
 		  if (typ == MatrixType::Upper)
 		    colUp = cidx(i+1) - 1;
 		  else
-		    colUp = cidx(i) - 1;
+		    colUp = cidx(i);
 		  Complex pivot = data(colUp);
-		  if (pivot == 0. || colUp != i) 
+		  if (pivot == 0. || ridx(colUp) != i) 
 		    {
 		      (*current_liboctave_error_handler) ("division by zero");
 		      goto inverse_singular;
 		    }
 
 		  if (pivot != 1.0)
 		    for (octave_idx_type j = cx_colstart; j < cx; j++)
 		      retval.xdata(j) /= pivot;
@@ -873,33 +873,33 @@ SparseComplexMatrix::tinverse (MatrixTyp
 			  v -= work[ridx(k)] * data(k);
 			}
 
 		      // get A(m,m)
 		      Complex pivot;
 		      if (typ == MatrixType::Permuted_Upper)
 			pivot = data(cidx(jidx+1) - 1);
 		      else
-			pivot = data(cidx(jidx) - 1);
+			pivot = data(cidx(jidx));
 		      if (pivot == 0.) 
 			{
 			  (*current_liboctave_error_handler) 
 			    ("division by zero");
 			  goto inverse_singular;
 			}
 
 		      work[j] = v / pivot;
 		    }
 
 		  // get A(m,m)
 		  octave_idx_type colUp;
 		  if (typ == MatrixType::Permuted_Upper)
 		    colUp = cidx(perm[iidx]+1) - 1;
 		  else
-		    colUp = cidx(perm[iidx]) - 1;		  
+		    colUp = cidx(perm[iidx]);		  
 
   		  Complex pivot = data(colUp);
 		  if (pivot == 0.)
 		    {
 		      (*current_liboctave_error_handler) 
 			("division by zero");
 		      goto inverse_singular;
 		    }
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -853,19 +853,19 @@ SparseMatrix::tinverse (MatrixType &matt
 			    }
 			} while ((rpX<j) && (rpU<j) && 
 				 (colXp<cx) && (colUp<nz));
 
 		      // get A(m,m)
 		      if (typ == MatrixType::Upper)
 			colUp = cidx(j+1) - 1;
 		      else
-			colUp = cidx(j) - 1;
+			colUp = cidx(j);
 		      double pivot = data(colUp);
-		      if (pivot == 0. || colUp != j) 
+		      if (pivot == 0. || ridx(colUp) != j) 
 			{
 			  (*current_liboctave_error_handler) 
 			    ("division by zero");
 			  goto inverse_singular;
 			}
 
 		      if (v != 0.)
 			{
@@ -881,19 +881,19 @@ SparseMatrix::tinverse (MatrixType &matt
 			}
 		    }
 
 		  // get A(m,m)
 		  octave_idx_type colUp;
 		  if (typ == MatrixType::Upper)
 		    colUp = cidx(i+1) - 1;
 		  else
-		    colUp = cidx(i) - 1;
+		    colUp = cidx(i);
 		  double pivot = data(colUp);
-		  if (pivot == 0. || colUp != i) 
+		  if (pivot == 0. || ridx(colUp) != i) 
 		    {
 		      (*current_liboctave_error_handler) ("division by zero");
 		      goto inverse_singular;
 		    }
 
 		  if (pivot != 1.0)
 		    for (octave_idx_type j = cx_colstart; j < cx; j++)
 		      retval.xdata(j) /= pivot;
@@ -949,33 +949,33 @@ SparseMatrix::tinverse (MatrixType &matt
 			  v -= work[ridx(k)] * data(k);
 			}
 
 		      // get A(m,m)
 		      double pivot;
 		      if (typ == MatrixType::Permuted_Upper)
 			pivot = data(cidx(jidx+1) - 1);
 		      else
-			pivot = data(cidx(jidx) - 1);
+			pivot = data(cidx(jidx));
 		      if (pivot == 0.) 
 			{
 			  (*current_liboctave_error_handler) 
 			    ("division by zero");
 			  goto inverse_singular;
 			}
 
 		      work[j] = v / pivot;
 		    }
 
 		  // get A(m,m)
 		  octave_idx_type colUp;
 		  if (typ == MatrixType::Permuted_Upper)
 		    colUp = cidx(perm[iidx]+1) - 1;
 		  else
-		    colUp = cidx(perm[iidx]) - 1;		  
+		    colUp = cidx(perm[iidx]);
 
 		  double pivot = data(colUp);
 		  if (pivot == 0.)
 		    {
 		      (*current_liboctave_error_handler) 
 			("division by zero");
 		      goto inverse_singular;
 		    }
