# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1463183969 18000
#      Fri May 13 18:59:29 2016 -0500
# Node ID 21fdab18f85726684b1dcfbf529fc60508412839
# Parent  b766928062f51a5cab640df7dd4bdc8eb575b2ea
Remove reference to drawnow 'mono' throughout scripts and code, update args test

* Backend.cc (Backend::print_figure): Remove Boolean 'mono' from argument list.
* Backend.h (Backend::print_figure): Ditto.

* graphics.cc (drawnow): Remove 'mono' from argument list.  Change args length
  test from 4 to 3.  Remove computation of unused stack variable 'mono' and
  variable type check on MONO.  Change DEBUG_FILE argument test from 3 to 2.
  Remove 'mono' from argument list of toolkit print_figure() call.

* graphics.in.h (graphics_toolkit::print_figure): Remove 'mono' from list of
  input arguments for both definition and call to represented toolkit.

* __init_fltk__.cc (fltk_graphics_toolkit::print_figure): Remove unused 'mono'
  variable from list of input arguments.

* __init_gnuplot__.cc (gnuplot_graphics_toolkit::print_figure): Remove 'mono'
  variable from list of input arguments.  Remove args(4) and set args(3) to
  debug_file.

* __gnuplot_drawnow__.m (__gnuplot_drawnow__): Change max number of input
  arguments from 5 to 4.  Change test for debug_file option from 5 to 4.

* __gnuplot_print__.m (local_drawnow): Remove construction of 'mono' variable.
  Remove 'mono' from drawnow() calls.

diff --git a/libgui/graphics/Backend.cc b/libgui/graphics/Backend.cc
--- a/libgui/graphics/Backend.cc
+++ b/libgui/graphics/Backend.cc
@@ -175,17 +175,17 @@ Backend::redraw_figure (const graphics_o
       if (proxy)
         proxy->redraw ();
     }
 }
 
 void
 Backend::print_figure (const graphics_object& go,
                             const std::string& term,
-                            const std::string& file_cmd, bool /*mono*/,
+                            const std::string& file_cmd,
                             const std::string& /*debug_file*/) const
 {
   if (go.get_properties ().is_visible ())
     {
       ObjectProxy* proxy = toolkitObjectProxy (go);
 
       if (proxy)
         proxy->print (QString::fromStdString (file_cmd),
diff --git a/libgui/graphics/Backend.h b/libgui/graphics/Backend.h
--- a/libgui/graphics/Backend.h
+++ b/libgui/graphics/Backend.h
@@ -51,17 +51,17 @@ public:
   void update (const graphics_object& obj, int pId);
 
   bool initialize (const graphics_object& obj);
 
   void finalize (const graphics_object& obj);
 
   void print_figure (const graphics_object& go,
                      const std::string& term,
-                     const std::string& file_cmd, bool /*mono*/,
+                     const std::string& file_cmd,
                      const std::string& /*debug_file*/) const;
 
   static Object* toolkitObject (const graphics_object& go);
 
   static ObjectProxy* toolkitObjectProxy (const graphics_object& go);
 
 signals:
   void createObject (double handle);
diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -10701,32 +10701,32 @@ Return a cell array of the currently loa
 
   return ovl (gtk_manager::loaded_toolkits_list ());
 }
 
 DEFUN (drawnow, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {} drawnow ()\n\
 @deftypefnx {} {} drawnow (\"expose\")\n\
-@deftypefnx {} {} drawnow (@var{term}, @var{file}, @var{mono}, @var{debug_file})\n\
+@deftypefnx {} {} drawnow (@var{term}, @var{file}, @var{debug_file})\n\
 Update figure windows and their children.\n\
 \n\
 The event queue is flushed and any callbacks generated are executed.\n\
 \n\
 With the optional argument @qcode{\"expose\"}, only graphic objects are\n\
 updated and no other events or callbacks are processed.\n\
 \n\
 The third calling form of @code{drawnow} is for debugging and is\n\
 undocumented.\n\
 @seealso{refresh}\n\
 @end deftypefn")
 {
   static int drawnow_executing = 0;
 
-  if (args.length () > 4)
+  if (args.length () > 3)
     print_usage ();
 
   unwind_protect frame;
 
   frame.protect_var (Vdrawnow_requested, false);
   frame.protect_var (drawnow_executing);
 
   // Redraw, unless we are in the middle of an existing redraw or deletion.
@@ -10780,20 +10780,19 @@ undocumented.\n\
             {
               gh_manager::unlock ();
 
               gh_manager::process_events ();
 
               gh_manager::lock ();
             }
         }
-      else if (args.length () >= 2 && args.length () <= 4)
+      else if (args.length () >= 2 && args.length () <= 3)
         {
           std::string term, file, debug_file;
-          bool mono;
 
           term = args(0).xstring_value ("drawnow: TERM must be a string");
 
           file = args(1).xstring_value ("drawnow: FILE must be a string");
 
           if (file.empty ())
             error ("drawnow: empty output ''");
           else if (file.length () == 1 && file[0] == '|')
@@ -10810,37 +10809,34 @@ undocumented.\n\
 
                   if (! fs || ! fs.is_dir ())
                     error ("drawnow: nonexistent directory '%s'",
                            dirname.c_str ());
 
                 }
             }
 
-          mono = (args.length () >= 3 ? args(2).xbool_value ("drawnow: MONO colormode must be a boolean value") : false);
-
-          debug_file = (args.length () > 3 ? args(3).xstring_value ("drawnow: DEBUG_FILE must be a string") : "");
+          debug_file = (args.length () > 2 ? args(2).xstring_value ("drawnow: DEBUG_FILE must be a string") : "");
 
           graphics_handle h = gcf ();
 
           if (! h.ok ())
             error ("drawnow: nothing to draw");
 
           graphics_object go = gh_manager::get_object (h);
 
           // FIXME: when using qt toolkit the print_figure method
           // returns immediately and Canvas::print doesn't have
           // enough time to lock the mutex before we lock it here
           // again.  We thus wait 50 ms (which may not be enough) to
           // give it a chance: see http://octave.1599824.n4.nabble.com/Printing-issues-with-Qt-toolkit-tp4673270.html
 
           gh_manager::unlock ();
 
-          go.get_toolkit ().print_figure (go, term, file, mono,
-                                          debug_file);
+          go.get_toolkit ().print_figure (go, term, file, debug_file);
 
           octave_sleep (0.05); // FIXME: really needed?
 
           gh_manager::lock ();
         }
     }
 
   return ovl ();
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -2086,17 +2086,17 @@ public:
   std::string get_name (void) const { return name; }
 
   virtual bool is_valid (void) const { return false; }
 
   virtual void redraw_figure (const graphics_object&) const
   { gripe_if_tkit_invalid ("redraw_figure"); }
 
   virtual void print_figure (const graphics_object&, const std::string&,
-                             const std::string&, bool,
+                             const std::string&,
                              const std::string& = "") const
   { gripe_if_tkit_invalid ("print_figure"); }
 
   virtual Matrix get_canvas_size (const graphics_handle&) const
   {
     gripe_if_tkit_invalid ("get_canvas_size");
     return Matrix (1, 2, 0.0);
   }
@@ -2200,19 +2200,19 @@ public:
   operator bool (void) const { return rep->is_valid (); }
 
   std::string get_name (void) const { return rep->get_name (); }
 
   void redraw_figure (const graphics_object& go) const
   { rep->redraw_figure (go); }
 
   void print_figure (const graphics_object& go, const std::string& term,
-                     const std::string& file, bool mono,
+                     const std::string& file,
                      const std::string& debug_file = "") const
-  { rep->print_figure (go, term, file, mono, debug_file); }
+  { rep->print_figure (go, term, file, debug_file); }
 
   Matrix get_canvas_size (const graphics_handle& fh) const
   { return rep->get_canvas_size (fh); }
 
   double get_screen_resolution (void) const
   { return rep->get_screen_resolution (); }
 
   Matrix get_screen_size (void) const
diff --git a/libinterp/dldfcn/__init_fltk__.cc b/libinterp/dldfcn/__init_fltk__.cc
--- a/libinterp/dldfcn/__init_fltk__.cc
+++ b/libinterp/dldfcn/__init_fltk__.cc
@@ -2329,17 +2329,17 @@ public:
       }
 
     figure_manager::mark_modified (go.get_handle ());
     Fl::check ();
   }
 
   void print_figure (const graphics_object& go,
                      const std::string& term,
-                     const std::string& file_cmd, bool /*mono*/,
+                     const std::string& file_cmd,
                      const std::string& /*debug_file*/) const
   {
     figure_manager::print (go.get_handle (), file_cmd, term);
   }
 
   Matrix get_canvas_size (const graphics_handle& fh) const
   {
     return figure_manager::get_size (fh);
diff --git a/libinterp/dldfcn/__init_gnuplot__.cc b/libinterp/dldfcn/__init_gnuplot__.cc
--- a/libinterp/dldfcn/__init_gnuplot__.cc
+++ b/libinterp/dldfcn/__init_gnuplot__.cc
@@ -100,23 +100,22 @@ public:
   void redraw_figure (const graphics_object& go) const
   {
     octave_value_list args;
     args(0) = go.get_handle ().as_octave_value ();
     feval ("__gnuplot_drawnow__", args);
   }
 
   void print_figure (const graphics_object& go, const std::string& term,
-                     const std::string& file, bool mono,
+                     const std::string& file,
                      const std::string& debug_file) const
   {
     octave_value_list args;
     if (! debug_file.empty ())
-      args(4) = debug_file;
-    args(3) = mono;
+      args(3) = debug_file;
     args(2) = file;
     args(1) = term;
     args(0) = go.get_handle ().as_octave_value ();
     feval ("__gnuplot_drawnow__", args);
   }
 
   Matrix get_canvas_size (const graphics_handle&) const
   {
diff --git a/scripts/plot/util/__gnuplot_drawnow__.m b/scripts/plot/util/__gnuplot_drawnow__.m
--- a/scripts/plot/util/__gnuplot_drawnow__.m
+++ b/scripts/plot/util/__gnuplot_drawnow__.m
@@ -20,33 +20,33 @@
 ## @deftypefn {} {} __gnuplot_drawnow__ (@var{h}, @var{term}, @var{file}, @var{debug_file})
 ## Undocumented internal function.
 ## @end deftypefn
 
 ## Author: jwe
 
 function __gnuplot_drawnow__ (h, term, file, debug_file)
 
-  if (nargin < 1 || nargin > 5 || nargin == 2)
+  if (nargin < 1 || nargin > 4 || nargin == 2)
     print_usage ();
   endif
 
-  if (nargin >= 3 && nargin <= 5)
+  if (nargin >= 3 && nargin <= 4)
     ## Produce various output formats, or redirect gnuplot stream to a
     ## debug file.
     plot_stream = [];
     fid = [];
     default_plot_stream = get (h, "__plot_stream__");
     unwind_protect
       plot_stream = __gnuplot_open_stream__ (2, h);
       gnuplot_supports_term = __gnuplot_has_terminal__ (term, plot_stream);
       if (gnuplot_supports_term)
         enhanced = gnuplot_set_term (plot_stream(1), true, h, term, file);
         __gnuplot_draw_figure__ (h, plot_stream(1), enhanced);
-        if (nargin == 5)
+        if (nargin == 4)
           fid = fopen (debug_file, "wb");
           enhanced = gnuplot_set_term (fid, true, h, term, file);
           __gnuplot_draw_figure__ (h, fid, enhanced);
         endif
       else
         error ('__gnuplot_drawnow__: the gnuplot terminal, "%s", is not available',
                gnuplot_trim_term (term));
       endif
diff --git a/scripts/plot/util/private/__gnuplot_print__.m b/scripts/plot/util/private/__gnuplot_print__.m
--- a/scripts/plot/util/private/__gnuplot_print__.m
+++ b/scripts/plot/util/private/__gnuplot_print__.m
@@ -205,26 +205,21 @@ function eps_drawnow (opts, epsfile, gp_
     set (h, {"fontsize"}, fontsize_2x);
     local_drawnow (["postscript eps " gp_opts], epsfile, opts);
   unwind_protect_cleanup
     set (h, {"fontsize"}, fontsize);
   end_unwind_protect
 endfunction
 
 function local_drawnow (term, file, opts)
-  if (opts.use_color < 0)
-    mono = true;
-  else
-    mono = false;
-  endif
   set (0, "currentfigure", opts.figure);
   if (isempty (opts.debug_file) || ! opts.debug)
-    drawnow (term, file, mono);
+    drawnow (term, file);
   else
-    drawnow (term, file, mono, opts.debug_file);
+    drawnow (term, file, opts.debug_file);
   endif
   if (opts.debug)
     fprintf ("Expanded gnuplot terminal = '%s'\n", term);
   endif
 endfunction
 
 function f = font_spec (opts, varargin)
   for n = 1:2:numel (varargin)
