# HG changeset patch
# User Rik <rdrider0-list@yahoo.com>
# Date 1261368463 28800
#      Sun Dec 20 20:07:43 2009 -0800
# Node ID 2441327485a3f9366d02abb6d221e1f994693342
# Parent  411325ce32d7c232de33dda6f211397d32518978
use m4 quating in aclocal.m4 autoconf macros with variable expansion

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2009-12-20  Rik <octave@nomad.inbox5.com>
+
+	* acinclude.m4: use M4 quoting for arguments to autoconf macros
+
 2009-12-20  Rik <octave@nomad.inbox5.com>
 
 	* configure.ac, acinclude.m4: Better warnings when gnuplot is not
 	installed but native graphics are available
 
 2009-12-19  Rik <octave@nomad.inbox5.com>
 
 	* emacs/module.mk, examples/Makefile.am, info-emacs-info,
diff --git a/acinclude.m4 b/acinclude.m4
--- a/acinclude.m4
+++ b/acinclude.m4
@@ -137,17 +137,17 @@ dnl The following test is from Karl Berr
 dnl including it here in case we someday want to make the use of
 dnl kpathsea optional.
 dnl
 dnl Some BSD putenv's, e.g., FreeBSD, do malloc/free's on the environment.
 dnl This test program is due to Mike Hibler <mike@cs.utah.edu>.
 dnl We don't actually need to run this if we don't have putenv, but it
 dnl doesn't hurt.
 AC_DEFUN([OCTAVE_SMART_PUTENV],
-[AC_MSG_CHECKING(whether putenv uses malloc)
+[AC_MSG_CHECKING([whether putenv uses malloc])
 AC_CACHE_VAL(octave_cv_func_putenv_malloc,
 [AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #define VAR	"YOW_VAR"
 #define STRING1 "GabbaGabbaHey"
 #define STRING2 "Yow!!"		/* should be shorter than STRING1 */
 extern char *getenv (); /* in case char* and int don't mix gracefully */
 main ()
 {
@@ -190,28 +190,28 @@ main ()
   if (rstr1 == rstr2)
           printf ("#define SMART_PUTENV\n");
   else
           printf ("#undef SMART_PUTENV\n");
 #endif
   exit (rstr1 == rstr2 ? 0 : 1);
 }]])], octave_cv_func_putenv_malloc=yes, octave_cv_func_putenv_malloc=no,
     octave_cv_func_putenv_malloc=no)])dnl
-AC_MSG_RESULT($octave_cv_func_putenv_malloc)
+AC_MSG_RESULT([$octave_cv_func_putenv_malloc])
 if test $octave_cv_func_putenv_malloc = yes; then
   AC_DEFINE(SMART_PUTENV,1,[To quiet autoheader.])
 fi])
 dnl
 dnl These two checks for signal functions were originally part of the
 dnl aclocal.m4 file distributed with bash 2.0.
 dnl
 dnl Check type of signal routines (posix, 4.2bsd, 4.1bsd or v7)
 AC_DEFUN([OCTAVE_SIGNAL_CHECK],
 [AC_REQUIRE([AC_TYPE_SIGNAL])
-AC_MSG_CHECKING(for type of signal functions)
+AC_MSG_CHECKING([for type of signal functions])
 AC_CACHE_VAL(octave_cv_signal_vintage,
 [
   AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <signal.h>]],
     [[sigset_t ss;
       struct sigaction sa;
       sigemptyset (&ss);
       sigsuspend (&ss);
       sigaction (SIGINT, &sa, (struct sigaction *) 0);
@@ -227,17 +227,17 @@ AC_CACHE_VAL(octave_cv_signal_vintage,
           RETSIGTYPE foo() { }]],
           [[int mask = sigmask (SIGINT);
 	    sigset (SIGINT, foo);
             sigrelse (SIGINT);
 	    sighold (SIGINT);
             sigpause (SIGINT);]])],
           [octave_cv_signal_vintage=svr3],
           [octave_cv_signal_vintage=v7])])])])
-AC_MSG_RESULT($octave_cv_signal_vintage)
+AC_MSG_RESULT([$octave_cv_signal_vintage])
 if test "$octave_cv_signal_vintage" = posix; then
 AC_DEFINE(HAVE_POSIX_SIGNALS, 1, [Define if you have POSIX style signals.])
 elif test "$octave_cv_signal_vintage" = "4.2bsd"; then
 AC_DEFINE(HAVE_BSD_SIGNALS, 1, [Define if you have BSD style signals.])
 elif test "$octave_cv_signal_vintage" = svr3; then
 AC_DEFINE(HAVE_USG_SIGHOLD, 1, [Define if you have System V Release 3 signals.])
 fi
 ])
@@ -291,17 +291,17 @@ main()
 if test "$octave_cv_signal_vintage" = svr3; then
   octave_cv_must_reinstall_sighandlers=yes
 else
   octave_cv_must_reinstall_sighandlers=no
 fi)])
 if test "$cross_compiling" = yes; then
   AC_MSG_RESULT([$octave_cv_must_reinstall_sighandlers assumed for cross compilation])
 else
-  AC_MSG_RESULT($octave_cv_must_reinstall_sighandlers)
+  AC_MSG_RESULT([$octave_cv_must_reinstall_sighandlers])
 fi
 if test "$octave_cv_must_reinstall_sighandlers" = yes; then
   AC_DEFINE(MUST_REINSTALL_SIGHANDLERS,1,[Define if signal handlers must be reinstalled after they are called.])
 fi
 ])
 dnl
 dnl Check to see if C++ compiler needs the new friend template declaration 
 dnl syntax. 
@@ -327,31 +327,31 @@ AC_DEFUN([OCTAVE_CXX_NEW_FRIEND_TEMPLATE
 EOB
     AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include "conftest.h"]],
       [[A a (1);
         return a == A(1);]])],
       [octave_cv_cxx_new_friend_template_decl=no],
       [octave_cv_cxx_new_friend_template_decl=yes])
     AC_LANG_POP(C++)
   ])
-  AC_MSG_RESULT($octave_cv_cxx_new_friend_template_decl)
+  AC_MSG_RESULT([$octave_cv_cxx_new_friend_template_decl])
   if test $octave_cv_cxx_new_friend_template_decl = yes; then
     AC_DEFINE(CXX_NEW_FRIEND_TEMPLATE_DECL,1,[Define if your compiler supports `<>' stuff for template friends.])
   fi
 ])
 dnl
 dnl Check to see if C compiler handles FLAG command line option.  If
 dnl two arguments are specified, execute the second arg as shell
 dnl commands.  Otherwise, add FLAG to CFLAGS if the compiler accepts
 dnl the flag.
 dnl
 dnl OCTAVE_CC_FLAG
 AC_DEFUN([OCTAVE_CC_FLAG], [
   ac_safe=`echo "$1" | sed 'y%./+-:=%__p___%'`
-  AC_MSG_CHECKING(whether ${CC-cc} accepts $1)
+  AC_MSG_CHECKING([whether ${CC-cc} accepts $1])
   AC_CACHE_VAL(octave_cv_cc_flag_$ac_safe, [
     AC_LANG_PUSH(C)
     XCFLAGS="$CFLAGS"
     CFLAGS="$CFLAGS $1"
     AC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],
       eval "octave_cv_cc_flag_$ac_safe=yes",
       eval "octave_cv_cc_flag_$ac_safe=no")
     CFLAGS="$XCFLAGS"
@@ -371,17 +371,17 @@ dnl
 dnl Check to see if C++ compiler handles FLAG command line option.  If
 dnl two arguments are specified, execute the second arg as shell
 dnl commands.  Otherwise, add FLAG to CXXFLAGS if the compiler accepts
 dnl the flag.
 dnl
 dnl OCTAVE_CXX_FLAG
 AC_DEFUN([OCTAVE_CXX_FLAG], [
   ac_safe=`echo "$1" | sed 'y%./+-:=%__p___%'`
-  AC_MSG_CHECKING(whether ${CXX-g++} accepts $1)
+  AC_MSG_CHECKING([whether ${CXX-g++} accepts $1])
   AC_CACHE_VAL(octave_cv_cxx_flag_$ac_safe, [
     AC_LANG_PUSH(C++)
     XCXXFLAGS="$CXXFLAGS"
     CXXFLAGS="$CXXFLAGS $1"
     AC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],
       eval "octave_cv_cxx_flag_$ac_safe=yes",
       eval "octave_cv_cxx_flag_$ac_safe=no")
     CXXFLAGS="$XCXXFLAGS"
@@ -401,17 +401,17 @@ dnl
 dnl Check to see if Fortran compiler handles FLAG command line option.  If
 dnl two arguments are specified, execute the second arg as shell
 dnl commands.  Otherwise, add FLAG to FFLAGS if the compiler accepts
 dnl the flag.
 dnl
 dnl OCTAVE_F77_FLAG
 AC_DEFUN([OCTAVE_F77_FLAG], [
   ac_safe=`echo "$1" | sed 'y%./+-:=%__p___%'`
-  AC_MSG_CHECKING(whether ${F77-g77} accepts $1)
+  AC_MSG_CHECKING([whether ${F77-g77} accepts $1])
   AC_CACHE_VAL(octave_cv_f77_flag_$ac_safe, [
     AC_LANG_PUSH(Fortran 77)
     XFFLAGS="$FFLAGS"
     FFLAGS="$FFLAGS $1"
     AC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],
       eval "octave_cv_f77_flag_$ac_safe=yes",
       eval "octave_cv_f77_flag_$ac_safe=no")
     FFLAGS="$XFFLAGS"
@@ -531,34 +531,34 @@ AC_DEFUN([OCTAVE_CHECK_LIBRARY], [
       octave_check_library_save_LDFLAGS="$LDFLAGS"
       LDFLAGS="$m4_toupper([$1])_LDFLAGS $LDFLAGS"
       octave_check_library_save_LIBS="$LIBS"
       LIBS="$m4_toupper([$1])_LIBS $LIBS"
       octave_$1_ok=no
       AC_MSG_CHECKING([for $5 in $m4_toupper([$1])_LIBS])
       AC_LINK_IFELSE([AC_LANG_CALL([], [$5])],
 	[octave_$1_ok=yes])
-      AC_MSG_RESULT($octave_$1_ok)
+      AC_MSG_RESULT([$octave_$1_ok])
       if test $octave_$1_ok = yes; then
 	m4_ifblank([$8], [
 	  warn_$1=
 	  AC_DEFINE([HAVE_]m4_toupper([$1]), 1,
             [Define if $2 is available.])
 	  [TEXINFO_]m4_toupper([$1])="@set [HAVE_]m4_toupper([$1])"], [$8])
       fi
       LIBS="$octave_check_library_save_LIBS"
       LDFLAGS="$octave_check_library_save_LDFLAGS"
     fi
     m4_ifnblank([$6], [AC_LANG_POP($6)])
     CPPFLAGS="$octave_check_library_save_CPPFLAGS"
   fi
   AC_SUBST(m4_toupper([$1])_LIBS)
   AC_SUBST([TEXINFO_]m4_toupper([$1]))
   if test -n "$warn_$1"; then
-    AC_MSG_WARN($warn_$1)
+    AC_MSG_WARN([$warn_$1])
     m4_toupper([$1])_LIBS=
   fi
 ])
 dnl
 dnl Check for flex
 dnl
 AC_DEFUN([OCTAVE_PROG_FLEX], [
 ### For now, don't define LEXLIB to be -lfl -- we don't use anything in
@@ -571,70 +571,70 @@ AC_DEFUN([OCTAVE_PROG_FLEX], [
     flex*)
       LFLAGS="-I"
       AC_MSG_RESULT([defining LFLAGS to be $LFLAGS])
       LEXLIB=
     ;;
     *)
       LEX='$(top_srcdir)/missing flex'
       warn_flex="I didn't find flex, but it's only a problem if you need to reconstruct lex.cc"
-      AC_MSG_WARN($warn_flex)
+      AC_MSG_WARN([$warn_flex])
     ;;
   esac
   AC_SUBST(LFLAGS)
 ])
 dnl
 dnl Check for bison
 dnl
 AC_DEFUN([OCTAVE_PROG_BISON], [
   AC_PROG_YACC
   case "$YACC" in
     bison*)
     ;;
     *)
       YACC='$(top_srcdir)/missing bison'
       warn_bison="I didn't find bison, but it's only a problem if you need to reconstruct parse.cc"
-      AC_MSG_WARN($warn_bison)
+      AC_MSG_WARN([$warn_bison])
     ;;
   esac
 ])
 dnl
 dnl What pager should we use?
 dnl
 AC_DEFUN([OCTAVE_PROG_PAGER],
 [if test "$cross_compiling" = yes; then
   DEFAULT_PAGER=less
-  AC_MSG_RESULT(assuming $DEFAULT_PAGER exists on $canonical_host_type host)
+  AC_MSG_RESULT([assuming $DEFAULT_PAGER exists on $canonical_host_type host])
   AC_SUBST(DEFAULT_PAGER)
 else
   octave_possible_pagers="less more page pg"
   case "$canonical_host_type" in
     *-*-cygwin* | *-*-mingw32* | *-*-msdosmsvc)
       octave_possible_pagers="$octave_possible_pagers more.com"
     ;;
   esac
 
   AC_CHECK_PROGS(DEFAULT_PAGER, $octave_possible_pagers, [])
   if test -z "$DEFAULT_PAGER"; then
     warn_less="I couldn't find \`less', \`more', \`page', or \`pg'"
-    AC_MSG_WARN($warn_less)
+    AC_MSG_WARN([$warn_less])
   fi
 fi
 ])
 dnl
 dnl Does gnuplot exist?
 dnl
 AC_DEFUN([OCTAVE_PROG_GNUPLOT], [
 gp_names="gnuplot"
 gp_default="gnuplot"
 if test "$cross_compiling" = yes; then
   GNUPLOT="$gp_default"
-  AC_MSG_RESULT(assuming $GNUPLOT exists on $canonical_host_type host)
+  AC_MSG_RESULT([assuming $GNUPLOT exists on $canonical_host_type host])
 else
-  AC_CHECK_PROGS(GNUPLOT, $gp_names)
+  AC_CHECK_PROGS(GNUPLOT, [$gp_names])
   if test -z "$GNUPLOT"; then
     warn_gnuplot=yes
 
     GNUPLOT="$gp_default"
 
     AC_MSG_WARN([gnuplot not found.  It isn't necessary to have gnuplot])
     AC_MSG_WARN([installed, but without native graphics or gnuplot])
 	 AC_MSG_WARN([you won't be able to use any of Octave's plotting commands.])
@@ -646,64 +646,64 @@ dnl
 dnl Is gperf installed?
 dnl
 dnl OCTAVE_PROG_GPERF
 AC_DEFUN([OCTAVE_PROG_GPERF], [
   AC_CHECK_PROG(GPERF, gperf, gperf, [])
   if test -z "$GPERF"; then
     GPERF='$(top_srcdir)/missing gperf'
     warn_gperf="I didn't find gperf, but it's only a problem if you need to reconstruct oct-gperf.h"
-    AC_MSG_WARN($warn_gperf)
+    AC_MSG_WARN([$warn_gperf])
   fi
   AC_SUBST(GPERF)
 ])
 dnl
 dnl Is ghostscript installed?
 dnl
 dnl OCTAVE_PROG_GHOSTSCRIPT
 AC_DEFUN([OCTAVE_PROG_GHOSTSCRIPT], [
   case "$canonical_host_type" in
     *-*-mingw* | *-*-msdosmsvc)
       gs_names="gswin32c gs"
     ;;
     *)
       gs_names="gs"
     ;;
   esac
-  AC_CHECK_PROGS(GHOSTSCRIPT, $gs_names)
+  AC_CHECK_PROGS(GHOSTSCRIPT, [$gs_names])
   if test -z "$GHOSTSCRIPT"; then
     GHOSTSCRIPT='$(top_srcdir)/missing gs'
     warn_ghostscript="I didn't find ghostscript, but it's only a problem if you need to reconstruct figures for the manual"
-    AC_MSG_WARN($warn_ghostscript)
+    AC_MSG_WARN([$warn_ghostscript])
   fi
   AC_SUBST(GHOSTSCRIPT)
 ])
 dnl
 dnl Is makeinfo installed?
 dnl
 dnl OCTAVE_PROG_MAKEINFO
 AC_DEFUN([OCTAVE_PROG_MAKEINFO], [
   AC_CHECK_PROG(MAKEINFO, makeinfo, makeinfo, [])
   if test -z "$MAKEINFO"; then
     MAKEINFO='$(top_srcdir)/missing makeinfo'
     warn_makeinfo="I didn't find makeinfo, but it's only a problem if you need to reconstruct the Info version of the manual"
-    AC_MSG_WARN($warn_makeinfo)
+    AC_MSG_WARN([$warn_makeinfo])
   fi
   AC_SUBST(MAKEINFO)
 ])
 dnl
 dnl Is texi2dvi installed?
 dnl
 dnl OCTAVE_PROG_TEXI2DVI
 AC_DEFUN([OCTAVE_PROG_TEXI2DVI], [
   AC_CHECK_PROG(TEXI2DVI, texi2dvi, texi2dvi, [])
   if test -z "$TEXI2DVI"; then
     TEXI2DVI='$(top_srcdir)/missing texi2dvi'
     warn_texi2dvi="I didn't find texi2dvi, but it's only a problem if you need to reconstruct the DVI version of the manual"
-    AC_MSG_WARN($warn_texi2dvi)
+    AC_MSG_WARN([$warn_texi2dvi])
   fi
   AC_SUBST(TEXI2DVI)
 ])
 dnl
 dnl Is texi2pdf installed?
 dnl
 dnl OCTAVE_PROG_TEXI2PDF
 AC_DEFUN([OCTAVE_PROG_TEXI2PDF], [
@@ -716,17 +716,17 @@ AC_DEFUN([OCTAVE_PROG_TEXI2PDF], [
       missing=false;
     fi
   else
     missing=false;
   fi
   if $missing; then
     TEXI2PDF='$(top_srcdir)/missing texi2pdf'
     warn_texi2pdf="I didn't find texi2pdf, but it's only a problem if you need to reconstruct the PDF version of the manual"
-    AC_MSG_WARN($warn_texi2pdf)
+    AC_MSG_WARN([$warn_texi2pdf])
   fi
   AC_SUBST(TEXI2PDF)
 ])
 dnl
 dnl See if the C++ library is ISO compliant.
 dnl FIXME: This is obviously very simplistic, and trivially fooled.
 dnl
 dnl OCTAVE_CXX_ISO_COMPLIANT_LIBRARY
@@ -751,17 +751,17 @@ AC_DEFUN([OCTAVE_CXX_ISO_COMPLIANT_LIBRA
       [[std::bitset<50> flags;
         flags.set();
         int digits = std::numeric_limits<unsigned long>::digits;
         digits = 0;]])],
       [octave_cv_cxx_iso_compliant_library=yes],
       [octave_cv_cxx_iso_compliant_library=no])
     AC_LANG_POP(C++)
   ])
-  AC_MSG_RESULT($octave_cv_cxx_iso_compliant_library)
+  AC_MSG_RESULT([$octave_cv_cxx_iso_compliant_library])
   if test $octave_cv_cxx_iso_compliant_library = yes; then
     AC_DEFINE(CXX_ISO_COMPLIANT_LIBRARY, 1, [Define if your C++ runtime library is ISO compliant.])
   fi
 ])
 dnl
 dnl Allow the user disable support for command line editing using GNU
 dnl readline.
 dnl
@@ -949,17 +949,17 @@ main (void)
   return l.d != 1234567891234567.0 && b.d != 1234567891234567.0;
 }]])],
   octave_cv_ieee754_data_format=yes,
   octave_cv_ieee754_data_format=no,
   octave_cv_ieee754_data_format=no)])
 if test "$cross_compiling" = yes; then
   AC_MSG_RESULT([$octave_cv_ieee754_data_format assumed for cross compilation])
 else
-  AC_MSG_RESULT($octave_cv_ieee754_data_format)
+  AC_MSG_RESULT([$octave_cv_ieee754_data_format])
 fi
 if test "$octave_cv_ieee754_data_format" = yes; then
   AC_DEFINE(HAVE_IEEE754_DATA_FORMAT, 1, [Define if your system uses IEEE 754 data format.])
 else
   ## If the format is unknown, then you will probably not have a
   ## useful system, so we will abort here.  Anyone wishing to
   ## experiment with building Octave on a system without IEEE
   ## floating point should be capable of removing this check and
@@ -1012,17 +1012,17 @@ int main (void)
 }
 ]])],
   octave_cv_umfpack_seperate_split=yes,
   octave_cv_umfpack_seperate_split=no,
   octave_cv_umfpack_seperate_split=no)])
 if test "$cross_compiling" = yes; then
   AC_MSG_RESULT([$octave_cv_umfpack_seperate_split assumed for cross compilation])
 else
-  AC_MSG_RESULT($octave_cv_umfpack_seperate_split)
+  AC_MSG_RESULT([$octave_cv_umfpack_seperate_split])
 fi
 if test "$octave_cv_umfpack_seperate_split" = yes; then
   AC_DEFINE(UMFPACK_SEPARATE_SPLIT, 1, [Define if the UMFPACK Complex solver allow matrix and RHS to be split independently])
 fi
 ])
 dnl
 dnl Check whether using HDF5 DLL under Windows. This is done by
 dnl testing for a data symbol in the HDF5 library, which would
@@ -1492,17 +1492,17 @@ dnl Check to see if the compiler and the
 dnl "-framework $1" for the given prologue $2 and the given body $3 of
 dnl a source file.  Arguments 2 and 3 optionally can also be empty.
 dnl Add options (lower case letters $1) "--with-framework-$1" and
 dnl "--without-framework-$1". If this test is successful then perform
 dnl $4, otherwise do $5.
 dnl
 dnl OCTAVE_HAVE_FRAMEWORK
 AC_DEFUN([OCTAVE_HAVE_FRAMEWORK], [
-  AC_MSG_CHECKING(whether ${LD-ld} accepts -framework $1)
+  AC_MSG_CHECKING([whether ${LD-ld} accepts -framework $1])
   AC_CACHE_VAL(octave_cv_framework_$1, [
     XLDFLAGS="$LDFLAGS"
     LDFLAGS="$LDFLAGS -framework $1"
     AC_LANG_PUSH(C++)
     AC_LINK_IFELSE([AC_LANG_PROGRAM([$2], [$3])],
       eval "octave_cv_framework_$1=yes",
       eval "octave_cv_framework_$1=no")
     AC_LANG_POP(C++)
