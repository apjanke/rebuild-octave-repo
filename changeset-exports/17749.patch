# HG changeset patch
# User Serhiy Zahoriya <xintx.ua@gmail.com>
# Date 1382578331 -10800
#      Thu Oct 24 04:32:11 2013 +0300
# Node ID ef7e97c910065cc60d899f68d7fb96fbf9dee4a3
# Parent  e4569ae06475aedadfde84f94a0434a64b8c2950
Adding elementwise hint to the power errors.

diff --git a/libinterp/corefcn/sparse-xpow.cc b/libinterp/corefcn/sparse-xpow.cc
--- a/libinterp/corefcn/sparse-xpow.cc
+++ b/libinterp/corefcn/sparse-xpow.cc
@@ -59,17 +59,17 @@ octave_value
 xpow (const SparseMatrix& a, double b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix");
+    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       if (static_cast<int> (b) == b)
         {
           int btmp = static_cast<int> (b);
           if (btmp == 0)
             {
               SparseMatrix tmp = SparseMatrix (nr, nr, nr);
@@ -132,17 +132,17 @@ octave_value
 xpow (const SparseComplexMatrix& a, double b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix");
+    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       if (static_cast<int> (b) == b)
         {
           int btmp = static_cast<int> (b);
           if (btmp == 0)
             {
               SparseMatrix tmp = SparseMatrix (nr, nr, nr);
diff --git a/libinterp/corefcn/xpow.cc b/libinterp/corefcn/xpow.cc
--- a/libinterp/corefcn/xpow.cc
+++ b/libinterp/corefcn/xpow.cc
@@ -100,17 +100,17 @@ octave_value
 xpow (double a, const Matrix& b)
 {
   octave_value retval;
 
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for x^A, A must be a square matrix");
+    error ("for x^A, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       EIG b_eig (b);
 
       if (! error_state)
         {
           ComplexColumnVector lambda (b_eig.eigenvalues ());
           ComplexMatrix Q (b_eig.eigenvectors ());
@@ -151,17 +151,17 @@ octave_value
 xpow (double a, const ComplexMatrix& b)
 {
   octave_value retval;
 
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for x^A, A must be a square matrix");
+    error ("for x^A, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       EIG b_eig (b);
 
       if (! error_state)
         {
           ComplexColumnVector lambda (b_eig.eigenvalues ());
           ComplexMatrix Q (b_eig.eigenvectors ());
@@ -190,17 +190,17 @@ octave_value
 xpow (const Matrix& a, double b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix");
+    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       if (static_cast<int> (b) == b)
         {
           int btmp = static_cast<int> (b);
           if (btmp == 0)
             {
               retval = DiagMatrix (nr, nr, 1.0);
@@ -276,17 +276,17 @@ octave_value
 xpow (const DiagMatrix& a, double b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix");
+    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       if (static_cast<int> (b) == b)
         {
           DiagMatrix r (nr, nc);
           for (octave_idx_type i = 0; i < nc; i++)
             r.dgelem (i) = std::pow (a.dgelem (i), b);
           retval = r;
@@ -320,17 +320,17 @@ octave_value
 xpow (const Matrix& a, const Complex& b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix");
+    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       EIG a_eig (a);
 
       if (! error_state)
         {
           ComplexColumnVector lambda (a_eig.eigenvalues ());
           ComplexMatrix Q (a_eig.eigenvectors ());
@@ -368,17 +368,17 @@ octave_value
 xpow (const Complex& a, const Matrix& b)
 {
   octave_value retval;
 
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for x^A, A must be a square matrix");
+    error ("for x^A, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       EIG b_eig (b);
 
       if (! error_state)
         {
           ComplexColumnVector lambda (b_eig.eigenvalues ());
           ComplexMatrix Q (b_eig.eigenvectors ());
@@ -416,17 +416,17 @@ octave_value
 xpow (const Complex& a, const ComplexMatrix& b)
 {
   octave_value retval;
 
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for x^A, A must be a square matrix");
+    error ("for x^A, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       EIG b_eig (b);
 
       if (! error_state)
         {
           ComplexColumnVector lambda (b_eig.eigenvalues ());
           ComplexMatrix Q (b_eig.eigenvectors ());
@@ -455,17 +455,17 @@ octave_value
 xpow (const ComplexMatrix& a, double b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix");
+    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       if (static_cast<int> (b) == b)
         {
           int btmp = static_cast<int> (b);
           if (btmp == 0)
             {
               retval = DiagMatrix (nr, nr, 1.0);
@@ -541,17 +541,17 @@ octave_value
 xpow (const ComplexMatrix& a, const Complex& b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix");
+    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       EIG a_eig (a);
 
       if (! error_state)
         {
           ComplexColumnVector lambda (a_eig.eigenvalues ());
           ComplexMatrix Q (a_eig.eigenvectors ());
@@ -575,17 +575,17 @@ octave_value
 xpow (const ComplexDiagMatrix& a, const Complex& b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix");
+    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       ComplexDiagMatrix r (nr, nc);
       for (octave_idx_type i = 0; i < nc; i++)
         r(i, i) = std::pow (a(i, i), b);
       retval = r;
     }
 
@@ -1549,17 +1549,17 @@ octave_value
 xpow (float a, const FloatMatrix& b)
 {
   octave_value retval;
 
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for x^A, A must be a square matrix");
+    error ("for x^A, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       FloatEIG b_eig (b);
 
       if (! error_state)
         {
           FloatComplexColumnVector lambda (b_eig.eigenvalues ());
           FloatComplexMatrix Q (b_eig.eigenvectors ());
@@ -1601,17 +1601,17 @@ octave_value
 xpow (float a, const FloatComplexMatrix& b)
 {
   octave_value retval;
 
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for x^A, A must be a square matrix");
+    error ("for x^A, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       FloatEIG b_eig (b);
 
       if (! error_state)
         {
           FloatComplexColumnVector lambda (b_eig.eigenvalues ());
           FloatComplexMatrix Q (b_eig.eigenvectors ());
@@ -1640,17 +1640,17 @@ octave_value
 xpow (const FloatMatrix& a, float b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix");
+    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       if (static_cast<int> (b) == b)
         {
           int btmp = static_cast<int> (b);
           if (btmp == 0)
             {
               retval = FloatDiagMatrix (nr, nr, 1.0);
@@ -1726,17 +1726,17 @@ octave_value
 xpow (const FloatDiagMatrix& a, float b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix");
+    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       if (static_cast<int> (b) == b)
         {
           FloatDiagMatrix r (nr, nc);
           for (octave_idx_type i = 0; i < nc; i++)
             r.dgelem (i) = std::pow (a.dgelem (i), b);
           retval = r;
@@ -1758,17 +1758,17 @@ octave_value
 xpow (const FloatMatrix& a, const FloatComplex& b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix");
+    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       FloatEIG a_eig (a);
 
       if (! error_state)
         {
           FloatComplexColumnVector lambda (a_eig.eigenvalues ());
           FloatComplexMatrix Q (a_eig.eigenvectors ());
@@ -1806,17 +1806,17 @@ octave_value
 xpow (const FloatComplex& a, const FloatMatrix& b)
 {
   octave_value retval;
 
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for x^A, A must be a square matrix");
+    error ("for x^A, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       FloatEIG b_eig (b);
 
       if (! error_state)
         {
           FloatComplexColumnVector lambda (b_eig.eigenvalues ());
           FloatComplexMatrix Q (b_eig.eigenvectors ());
@@ -1854,17 +1854,17 @@ octave_value
 xpow (const FloatComplex& a, const FloatComplexMatrix& b)
 {
   octave_value retval;
 
   octave_idx_type nr = b.rows ();
   octave_idx_type nc = b.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for x^A, A must be a square matrix");
+    error ("for x^A, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       FloatEIG b_eig (b);
 
       if (! error_state)
         {
           FloatComplexColumnVector lambda (b_eig.eigenvalues ());
           FloatComplexMatrix Q (b_eig.eigenvectors ());
@@ -1893,17 +1893,17 @@ octave_value
 xpow (const FloatComplexMatrix& a, float b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix");
+    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       if (static_cast<int> (b) == b)
         {
           int btmp = static_cast<int> (b);
           if (btmp == 0)
             {
               retval = FloatDiagMatrix (nr, nr, 1.0);
@@ -1979,17 +1979,17 @@ octave_value
 xpow (const FloatComplexMatrix& a, const FloatComplex& b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix");
+    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       FloatEIG a_eig (a);
 
       if (! error_state)
         {
           FloatComplexColumnVector lambda (a_eig.eigenvalues ());
           FloatComplexMatrix Q (a_eig.eigenvectors ());
@@ -2013,17 +2013,17 @@ octave_value
 xpow (const FloatComplexDiagMatrix& a, const FloatComplex& b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
-    error ("for A^b, A must be a square matrix");
+    error ("for A^b, A must be a square matrix. Use .^ for elementwise power.");
   else
     {
       FloatComplexDiagMatrix r (nr, nc);
       for (octave_idx_type i = 0; i < nc; i++)
         r(i, i) = std::pow (a(i, i), b);
       retval = r;
     }
 
