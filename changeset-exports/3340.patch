# HG changeset patch
# User jwe
# Date 941785356 0
#      Fri Nov 05 07:02:36 1999 +0000
# Node ID 585a8809fd9be9e5786957d09d357e32ee10c000
# Parent  f8b4692eb51cd110704b6c29ec17bf23a063dc8e
[project @ 1999-11-05 07:02:30 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,47 @@
+1999-11-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov.h (octave_value::is_stream): New predicate.
+	* ov-file.h (octave_file::is_stream): Return true.
+	* file-io.cc (Fis_stream): New function.
+
+	* ov-file.h (class octave_file): stream is now an object instead
+	of pointer.
+	* ov-file.cc (octave_file::print_raw): Handle stream as object
+	instead of pointer.  Also print stream status.
+
+	* ov-base.cc (octave_base_value::stream_value): Return object
+	instead of pointer.
+
+	* ov.cc (octave_value::stream_value): Return object instead of pointer.
+	(octave_value::octave_value (const octave_stream&)): Take const
+	reference instead of pointer arg.
+
+	* TEMPLATE-INST/Array-os.cc: Instantiate Arrays of octave_stream
+	objects, not pointers to them.
+
+	* OPERATORS/op-fil-b.cc: Cope with octave_stream class changes.
+	* OPERATORS/op-fil-bm.cc: Likewise.
+	* OPERATORS/op-fil-cm.cc: Likewise.
+	* OPERATORS/op-fil-cs.cc: Likewise.
+	* OPERATORS/op-fil-lis.cc: Likewise.
+	* OPERATORS/op-fil-m.cc: Likewise.
+	* OPERATORS/op-fil-rec.cc: Likewise.
+	* OPERATORS/op-fil-s.cc: Likewise.
+	* OPERATORS/op-fil-str.cc: Likewise.
+	* file-io.cc: Likewise.
+	* syscalls.cc (Fdup): Likewise.
+
+	* oct-fstrm.cc, oct-fstrm.h, oct-iostrm.cc, oct-iostrm.h,
+	oct-prcstrm.cc, oct-prcstrm.h, oct-stdstrm.cc, oct-stdstrm.h,
+	oct-stream.cc, oct-stream.h, oct-strstrm.cc, oct-strstrm.h:
+	Rewrite to allow octave_stream objects to be used like values
+	instead of having to use pointers.
+
 1999-11-03  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-stream.cc (octave_base_stream::do_scanf): If it looks like
 	we have a matching failure, then reset the failbit in the stream
 	state.
 	(octave_base_stream::do_oscanf): Likewise.
 
 1999-11-02  Ben Sapp <bsapp@nua.lampf.lanl.gov>
diff --git a/src/OPERATORS/op-fil-b.cc b/src/OPERATORS/op-fil-b.cc
--- a/src/OPERATORS/op-fil-b.cc
+++ b/src/OPERATORS/op-fil-b.cc
@@ -41,21 +41,21 @@ Software Foundation, 59 Temple Place - S
 #include "ov-typeinfo.h"
 
 // file by bool ops.
 
 DEFBINOP (lshift, file, bool)
 {
   CAST_BINOP_ARGS (const octave_file&, const octave_bool&);
 
-  octave_stream *oct_stream = v1.stream_value ();
+  octave_stream oct_stream = v1.stream_value ();
 
   if (oct_stream)
     {
-      ostream *osp = oct_stream->output_stream ();
+      ostream *osp = oct_stream.output_stream ();
 
       if (osp)
 	{
 	  ostream& os = *osp;
 
 	  v2.print_raw (os);
 	}
       else
diff --git a/src/OPERATORS/op-fil-bm.cc b/src/OPERATORS/op-fil-bm.cc
--- a/src/OPERATORS/op-fil-bm.cc
+++ b/src/OPERATORS/op-fil-bm.cc
@@ -41,21 +41,21 @@ Software Foundation, 59 Temple Place - S
 #include "ov-typeinfo.h"
 
 // file by bool matrix ops.
 
 DEFBINOP (lshift, file, bool_matrix)
 {
   CAST_BINOP_ARGS (const octave_file&, const octave_bool_matrix&);
 
-  octave_stream *oct_stream = v1.stream_value ();
+  octave_stream oct_stream = v1.stream_value ();
 
   if (oct_stream)
     {
-      ostream *osp = oct_stream->output_stream ();
+      ostream *osp = oct_stream.output_stream ();
 
       if (osp)
 	{
 	  ostream& os = *osp;
 
 	  v2.print_raw (os);
 	}
       else
diff --git a/src/OPERATORS/op-fil-cm.cc b/src/OPERATORS/op-fil-cm.cc
--- a/src/OPERATORS/op-fil-cm.cc
+++ b/src/OPERATORS/op-fil-cm.cc
@@ -41,21 +41,21 @@ Software Foundation, 59 Temple Place - S
 #include "ov-typeinfo.h"
 
 // file by complex matrix ops.
 
 DEFBINOP (lshift, file, complex_matrix)
 {
   CAST_BINOP_ARGS (const octave_file&, const octave_complex_matrix&);
 
-  octave_stream *oct_stream = v1.stream_value ();
+  octave_stream oct_stream = v1.stream_value ();
 
   if (oct_stream)
     {
-      ostream *osp = oct_stream->output_stream ();
+      ostream *osp = oct_stream.output_stream ();
 
       if (osp)
 	{
 	  ostream& os = *osp;
 
 	  v2.print_raw (os);
 	}
       else
diff --git a/src/OPERATORS/op-fil-cs.cc b/src/OPERATORS/op-fil-cs.cc
--- a/src/OPERATORS/op-fil-cs.cc
+++ b/src/OPERATORS/op-fil-cs.cc
@@ -41,21 +41,21 @@ Software Foundation, 59 Temple Place - S
 #include "ov-typeinfo.h"
 
 // file by complex scalar ops.
 
 DEFBINOP (lshift, file, complex)
 {
   CAST_BINOP_ARGS (const octave_file&, const octave_complex&);
 
-  octave_stream *oct_stream = v1.stream_value ();
+  octave_stream oct_stream = v1.stream_value ();
 
   if (oct_stream)
     {
-      ostream *osp = oct_stream->output_stream ();
+      ostream *osp = oct_stream.output_stream ();
 
       if (osp)
 	{
 	  ostream& os = *osp;
 
 	  v2.print_raw (os);
 	}
       else
diff --git a/src/OPERATORS/op-fil-lis.cc b/src/OPERATORS/op-fil-lis.cc
--- a/src/OPERATORS/op-fil-lis.cc
+++ b/src/OPERATORS/op-fil-lis.cc
@@ -41,21 +41,21 @@ Software Foundation, 59 Temple Place - S
 #include "ov-typeinfo.h"
 
 // file by list ops.
 
 DEFBINOP (lshift, file, list)
 {
   CAST_BINOP_ARGS (const octave_file&, const octave_list&);
 
-  octave_stream *oct_stream = v1.stream_value ();
+  octave_stream oct_stream = v1.stream_value ();
 
   if (oct_stream)
     {
-      ostream *osp = oct_stream->output_stream ();
+      ostream *osp = oct_stream.output_stream ();
 
       if (osp)
 	{
 	  ostream& os = *osp;
 
 	  v2.print_raw (os);
 	}
       else
diff --git a/src/OPERATORS/op-fil-m.cc b/src/OPERATORS/op-fil-m.cc
--- a/src/OPERATORS/op-fil-m.cc
+++ b/src/OPERATORS/op-fil-m.cc
@@ -41,21 +41,21 @@ Software Foundation, 59 Temple Place - S
 #include "ov-typeinfo.h"
 
 // file by matrix ops.
 
 DEFBINOP (lshift, file, matrix)
 {
   CAST_BINOP_ARGS (const octave_file&, const octave_matrix&);
 
-  octave_stream *oct_stream = v1.stream_value ();
+  octave_stream oct_stream = v1.stream_value ();
 
   if (oct_stream)
     {
-      ostream *osp = oct_stream->output_stream ();
+      ostream *osp = oct_stream.output_stream ();
 
       if (osp)
 	{
 	  ostream& os = *osp;
 
 	  v2.print_raw (os);
 	}
       else
diff --git a/src/OPERATORS/op-fil-rec.cc b/src/OPERATORS/op-fil-rec.cc
--- a/src/OPERATORS/op-fil-rec.cc
+++ b/src/OPERATORS/op-fil-rec.cc
@@ -41,21 +41,21 @@ Software Foundation, 59 Temple Place - S
 #include "ov-typeinfo.h"
 
 // file by struct ops.
 
 DEFBINOP (lshift, file, struct)
 {
   CAST_BINOP_ARGS (const octave_file&, const octave_struct&);
 
-  octave_stream *oct_stream = v1.stream_value ();
+  octave_stream oct_stream = v1.stream_value ();
 
   if (oct_stream)
     {
-      ostream *osp = oct_stream->output_stream ();
+      ostream *osp = oct_stream.output_stream ();
 
       if (osp)
 	{
 	  ostream& os = *osp;
 
 	  v2.print_raw (os);
 	}
       else
diff --git a/src/OPERATORS/op-fil-s.cc b/src/OPERATORS/op-fil-s.cc
--- a/src/OPERATORS/op-fil-s.cc
+++ b/src/OPERATORS/op-fil-s.cc
@@ -41,21 +41,21 @@ Software Foundation, 59 Temple Place - S
 #include "ov-typeinfo.h"
 
 // file by scalar ops.
 
 DEFBINOP (lshift, file, scalar)
 {
   CAST_BINOP_ARGS (const octave_file&, const octave_scalar&);
 
-  octave_stream *oct_stream = v1.stream_value ();
+  octave_stream oct_stream = v1.stream_value ();
 
   if (oct_stream)
     {
-      ostream *osp = oct_stream->output_stream ();
+      ostream *osp = oct_stream.output_stream ();
 
       if (osp)
 	{
 	  ostream& os = *osp;
 
 	  v2.print_raw (os);
 	}
       else
diff --git a/src/OPERATORS/op-fil-str.cc b/src/OPERATORS/op-fil-str.cc
--- a/src/OPERATORS/op-fil-str.cc
+++ b/src/OPERATORS/op-fil-str.cc
@@ -41,21 +41,21 @@ Software Foundation, 59 Temple Place - S
 #include "ov-typeinfo.h"
 
 // file by string ops.
 
 DEFBINOP (lshift, file, char_matrix_str)
 {
   CAST_BINOP_ARGS (const octave_file&, const octave_char_matrix_str&);
 
-  octave_stream *oct_stream = v1.stream_value ();
+  octave_stream oct_stream = v1.stream_value ();
 
   if (oct_stream)
     {
-      ostream *osp = oct_stream->output_stream ();
+      ostream *osp = oct_stream.output_stream ();
 
       if (osp)
 	{
 	  ostream& os = *osp;
 
 	  v2.print_raw (os);
 	}
       else
diff --git a/src/TEMPLATE-INST/Array-os.cc b/src/TEMPLATE-INST/Array-os.cc
--- a/src/TEMPLATE-INST/Array-os.cc
+++ b/src/TEMPLATE-INST/Array-os.cc
@@ -30,15 +30,15 @@ Software Foundation, 59 Temple Place - S
 #include "Array.cc"
 
 #include "oct-stream.h"
 
 template class Array<scanf_format_elt*>;
 
 template class Array<printf_format_elt*>;
 
-template class Array<octave_stream*>;
+template class Array<octave_stream>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -68,27 +68,25 @@ Software Foundation, 59 Temple Place - S
 
 static octave_value stdin_file;
 static octave_value stdout_file;
 static octave_value stderr_file;
 
 void
 initialize_file_io (void)
 {
-  octave_istream *stdin_stream
-    = new octave_istream (&cin, "stdin");
+  octave_stream stdin_stream = octave_istream::create (&cin, "stdin");
 
   // This uses octave_stdout (see pager.h), not cout so that Octave's
   // standard output stream will pass through the pager.
 
-  octave_ostream *stdout_stream
-    = new octave_ostream (&octave_stdout, "stdout");
+  octave_stream stdout_stream
+    = octave_ostream::create (&octave_stdout, "stdout");
 
-  octave_ostream *stderr_stream
-    = new octave_ostream (&cerr, "stderr");
+  octave_stream stderr_stream = octave_ostream::create (&cerr, "stderr");
 
   stdin_file = octave_stream_list::insert (stdin_stream);
   stdout_file = octave_stream_list::insert (stdout_stream);
   stderr_file = octave_stream_list::insert (stderr_stream);
 }
 
 void
 close_files (void)
@@ -137,16 +135,29 @@ fopen_mode_to_ios_mode (const string& mo
 	retval = ios::in | ios::out | ios::app | ios::bin;
       else
 	::error ("invalid mode specified");
     }
 
   return retval;
 }
 
+DEFUN (is_stream, args, ,
+  "is_stream (x): return nonzero if x is a stream object")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    retval = args(0).is_stream ();
+  else
+    print_usage ("is_stream");
+
+  return retval;
+}
+
 DEFUN (fclose, args, ,
   "fclose (FILENUM): close a file")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
@@ -178,20 +189,20 @@ DEFUN (fflush, args, ,
       if (fid == 1)
 	{
 	  flush_octave_stdout ();
 
 	  retval = 0.0;
 	}
       else
 	{
-	  octave_stream *os = octave_stream_list::lookup (fid);
+	  octave_stream os = octave_stream_list::lookup (fid);
 
-	  if (os)
-	    retval = static_cast<double> (os->flush ());
+	  if (os.is_valid ())
+	    retval = static_cast<double> (os.flush ());
 	  else
 	    gripe_invalid_file_id ("fflush");
 	}
     }
   else
     print_usage ("fflush");
 
   return retval;
@@ -206,26 +217,26 @@ read a string from a file")
 
   retval(1) = 0.0;
   retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
-      octave_stream *os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0));
 
-      if (os)
+      if (os.is_valid ())
 	{
 	  octave_value len_arg = (nargin == 2)
 	    ? args(1) : octave_value (static_cast<double> (INT_MAX));
 
 	  bool err = false;
 
-	  string tmp = os->getl (len_arg, err);
+	  string tmp = os.getl (len_arg, err);
 
 	  if (! err)
 	    {
 	      retval(1) = static_cast<double> (tmp.length ());
 	      retval(0) = tmp;
 	    }
 	}
       else
@@ -246,69 +257,69 @@ read a string from a file")
 
   retval(1) = 0.0;
   retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
-      octave_stream *os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0));
 
-      if (os)
+      if (os.is_valid ())
 	{
 	  octave_value len_arg = (nargin == 2)
 	    ? args(1) : octave_value (static_cast<double> (INT_MAX));
 
 	  bool err = false;
 
-	  string tmp = os->gets (len_arg, err);
+	  string tmp = os.gets (len_arg, err);
 
 	  if (! err)
 	    {
 	      retval(1) = static_cast<double> (tmp.length ());
 	      retval(0) = tmp;
 	    }
 	}
       else
 	gripe_invalid_file_id ("fgets");
     }
   else
     print_usage ("fgets");
 
   return retval;
 }
 
-static octave_base_stream *
+static octave_stream
 do_stream_open (const string& name, const string& mode,
 		const string& arch, int& fid)
 {
-  octave_base_stream *retval = 0;
+  octave_stream retval;
 
   fid = -1;
 
   int md = fopen_mode_to_ios_mode (mode);
 
   if (! error_state)
     {
       oct_mach_info::float_format flt_fmt =
 	oct_mach_info::string_to_float_format (arch);
 
       if (! error_state)
-	retval = new octave_fstream (name, md, flt_fmt);
+	retval = octave_fstream::create (name, md, flt_fmt);
     }
 
   return retval;
 }
 
-static octave_base_stream *
+static octave_stream
 do_stream_open (const octave_value& tc_name, const octave_value& tc_mode,
 		const octave_value& tc_arch, const char *fcn, int& fid)
 {
-  octave_base_stream *retval = 0;
+  octave_stream retval;
 
   fid = -1;
 
   string name = tc_name.string_value ();
 
   if (! error_state)
     {
       string mode = tc_mode.string_value ();
@@ -406,36 +417,35 @@ DEFUN (fopen, args, ,
       octave_value mode = (nargin == 2 || nargin == 3)
 	? args(1) : octave_value ("r");
 
       octave_value arch = (nargin == 3)
 	? args(2) : octave_value ("native");
 
       int fid = -1;
 
-      octave_base_stream *os
-	= do_stream_open (args(0), mode, arch, "fopen", fid);
+      octave_stream os = do_stream_open (args(0), mode, arch, "fopen", fid);
 
-      if (os)
+      if (os.is_valid ())
 	{
-	  if (os->ok () && ! error_state)
+	  if (os && ! error_state)
 	    {
 	      retval(1) = "";
 	      retval(0) = octave_stream_list::insert (os);
 	    }
 	  else
 	    {
 	      int error_number = 0;
 
-	      retval(1) = os->error (false, error_number);
+	      retval(1) = os.error (false, error_number);
 	      retval(0) = -1.0;
 	    }
 	}
       else
-	::error ("fopen: internal error");
+	error ("fopen: internal error");
     }
   else
     print_usage ("fopen");
 
   return retval;
 }
 
 DEFUN (freport, args, ,
@@ -457,20 +467,20 @@ DEFUN (frewind, args, ,
   "frewind (FILENUM): set file position at beginning of file")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
-      octave_stream *os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0));
 
-      if (os)
-	retval = static_cast<double> (os->rewind ());
+      if (os.is_valid ())
+	retval = static_cast<double> (os.rewind ());
       else
 	gripe_invalid_file_id ("frewind");
     }
   else
     print_usage ("frewind");
 
   return retval;
 }
@@ -487,24 +497,24 @@ ORIGIN may be one of:\n\
   SEEK_END : offset is relative to the end of the file")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 2 || nargin == 3)
     {
-      octave_stream *os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0));
 
-      if (os)
+      if (os.is_valid ())
 	{
 	  octave_value origin_arg = (nargin == 3)
 	    ? args(2) : octave_value (-1.0);
 
-	  retval = static_cast<double> (os->seek (args(1), origin_arg));
+	  retval = static_cast<double> (os.seek (args(1), origin_arg));
 	}
       else
 	::error ("fseek: invalid file id");
     }
   else
     print_usage ("fseek");
 
   return retval;
@@ -514,20 +524,20 @@ DEFUN (ftell, args, ,
   "POSITION = ftell (FILENUM): returns the current file position")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
-      octave_stream *os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0));
 
-      if (os)
-	retval = static_cast<double> (os->tell ());
+      if (os.is_valid ())
+	retval = static_cast<double> (os.tell ());
       else
 	gripe_invalid_file_id ("ftell");
     }
   else
     print_usage ("ftell");
 
   return retval;
 }
@@ -536,44 +546,44 @@ DEFUN (fprintf, args, ,
   "fprintf (FILENUM, FORMAT, ...)")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin > 1 || (nargin > 0 && args(0).is_string ()))
     {
-      octave_stream *os	= 0;
+      octave_stream os;
       int fmt_n = 0;
 
       if (args(0).is_string ())
 	os = octave_stream_list::lookup (1);
       else
 	{
 	  fmt_n = 1;
 	  os = octave_stream_list::lookup (args(0));
 	}
 
-      if (os)
+      if (os.is_valid ())
 	{
 	  if (args(fmt_n).is_string ())
 	    {
 	      string fmt = args(fmt_n).string_value ();
 
 	      octave_value_list tmp_args;
 
 	      if (nargin > 1 + fmt_n)
 		{
 		  tmp_args.resize (nargin-fmt_n-1, octave_value ());
 
 		  for (int i = fmt_n + 1; i < nargin; i++)
 		    tmp_args(i-fmt_n-1) = args(i);
 		}
 
-	      retval = os->printf (fmt, tmp_args);
+	      retval = os.printf (fmt, tmp_args);
 	    }
 	  else
 	    ::error ("fprintf: format must be a string");
 	}
       else
 	gripe_invalid_file_id ("fprintf");
     }
   else
@@ -586,20 +596,20 @@ DEFUN (fputs, args, ,
   "fputs (FILENUM, STRING)")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 2)
     {
-      octave_stream *os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0));
 
-      if (os)
-	retval = os->puts (args(1));
+      if (os.is_valid ())
+	retval = os.puts (args(1));
       else
 	gripe_invalid_file_id ("fputs");
     }
   else
     print_usage ("fputs");
 
   return retval;
 }
@@ -612,21 +622,21 @@ DEFUN (sprintf, args, ,
   int nargin = args.length ();
 
   if (nargin > 0)
     {
       retval(2) = -1.0;
       retval(1) = "unknown error";
       retval(0) = "";
 
-      octave_ostrstream ostr;
+      octave_ostrstream *ostr = new octave_ostrstream ();
 
-      octave_stream os (&ostr, true);
+      octave_stream os (ostr);
 
-      if (os)
+      if (os.is_valid ())
 	{
 	  if (args(0).is_string ())
 	    {
 	      string fmt = args(0).string_value ();
 
 	      octave_value_list tmp_args;
 
 	      if (nargin > 1)
@@ -634,19 +644,17 @@ DEFUN (sprintf, args, ,
 		  tmp_args.resize (nargin-1, octave_value ());
 
 		  for (int i = 1; i < nargin; i++)
 		    tmp_args(i-1) = args(i);
 		}
 
 	      retval(2) = static_cast<double> (os.printf (fmt, tmp_args));
 	      retval(1) = os.error ();
-	      char *tmp = ostr.str ();
-	      retval(0) = tmp;
-	      delete [] tmp;
+	      retval(0) = ostr->str ();
 	    }
 	  else
 	    ::error ("sprintf: format must be a string");
 	}
       else
 	::error ("sprintf: unable to create output buffer");
     }
   else
@@ -679,55 +687,55 @@ in FORMAT corresponding to a single scal
 more `C-like', and also compatible with previous versions of Octave")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 3 && args(2).is_string ())
     {
-      octave_stream *os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0));
 
-      if (os)
+      if (os.is_valid ())
 	{
 	  if (args(1).is_string ())
 	    {
 	      string fmt = args(1).string_value ();
 
-	      retval = os->oscanf (fmt);
+	      retval = os.oscanf (fmt);
 	    }
 	  else
 	    ::error ("fscanf: format must be a string");
 	}
       else
 	gripe_invalid_file_id ("fscanf");
     }
   else
     {
       retval (1) = 0.0;
       retval (0) = Matrix ();
 
       if (nargin == 2 || nargin == 3)
 	{
-	  octave_stream *os = octave_stream_list::lookup (args(0));
+	  octave_stream os = octave_stream_list::lookup (args(0));
 
-	  if (os)
+	  if (os.is_valid ())
 	    {
 	      if (args(1).is_string ())
 		{
 		  string fmt = args(1).string_value ();
 
 		  int count = 0;
 
 		  Matrix size = (nargin == 3)
 		    ? args(2).matrix_value () : Matrix (1, 1, octave_Inf);
 
 		  if (! error_state)
 		    {
-		      octave_value tmp = os->scanf (fmt, size, count);
+		      octave_value tmp = os.scanf (fmt, size, count);
 
 		      retval(1) = static_cast<double> (count);
 		      retval(0) = tmp;
 		    }
 		}
 	      else
 		::error ("fscanf: format must be a string");
 	    }
@@ -772,21 +780,19 @@ more `C-like', and also compatible with 
   int nargin = args.length ();
 
   if (nargin == 3 && args(2).is_string ())
     {
       if (args(0).is_string ())
 	{
 	  string data = args(0).string_value ();
 
-	  octave_istrstream istr (data);
+	  octave_stream os = octave_istrstream::create (data);
 
-	  octave_stream os (&istr, true);
-
-	  if (os)
+	  if (os.is_valid ())
 	    {
 	      if (args(1).is_string ())
 		{
 		  string fmt = args(1).string_value ();
 
 		  retval = os.oscanf (fmt);
 		}
 	      else
@@ -806,21 +812,19 @@ more `C-like', and also compatible with 
 	  retval(2) = "unknown error";
 	  retval(1) = 0.0;
 	  retval(0) = Matrix ();
 
 	  if (args(0).is_string ())
 	    {
 	      string data = args(0).string_value ();
 
-	      octave_istrstream istr (data);
+	      octave_stream os = octave_istrstream::create (data);
 
-	      octave_stream os (&istr, true);
-
-	      if (os)
+	      if (os.is_valid ())
 		{
 		  if (args(1).is_string ())
 		    {
 		      string fmt = args(1).string_value ();
 
 		      int count = 0;
 
 		      Matrix size = (nargin == 3)
@@ -974,35 +978,35 @@ Reads data in binary form of type PRECIS
 
   int nargin = args.length ();
 
   if (nargin > 0 && nargin < 6)
     {
       retval(1) = -1.0;
       retval(0) = Matrix ();
 
-      octave_stream *os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0));
 
-      if (os)
+      if (os.is_valid ())
 	{
 	  octave_value size = (nargin > 1)
 	    ? args(1) : octave_value (octave_Inf);
 
 	  octave_value prec = (nargin > 2)
 	    ? args(2) : octave_value ("uchar");
 
 	  octave_value skip = (nargin > 3)
 	    ? args(3) : octave_value (0.0);
 
 	  octave_value arch = (nargin > 4)
 	    ? args(4) : octave_value ("unknown");
 
 	  int count = -1;
 
-	  octave_value tmp = do_fread (*os, size, prec, skip, arch, count);
+	  octave_value tmp = do_fread (os, size, prec, skip, arch, count);
 
 	  retval(1) = static_cast<double> (count);
 	  retval(0) = tmp;
 	}
       else
 	gripe_invalid_file_id ("fread");
     }
   else
@@ -1102,32 +1106,32 @@ DEFUN (fwrite, args, ,
   COUNT     : number of elements written")
 {
   octave_value retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin > 1 && nargin < 6)
     {
-      octave_stream *os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0));
 
-      if (os)
+      if (os.is_valid ())
 	{
 	  octave_value data = args(1);
 
 	  octave_value prec = (nargin > 2)
 	    ? args(2) : octave_value ("uchar");
 
 	  octave_value skip = (nargin > 3)
 	    ? args(3) : octave_value (0.0);
 
 	  octave_value arch = (nargin > 4)
 	    ? args(4) : octave_value ("unknown");
 
-	  double status = do_fwrite (*os, data, prec, skip, arch);
+	  double status = do_fwrite (os, data, prec, skip, arch);
 
 	  retval = status;
 	}
       else
 	gripe_invalid_file_id ("fwrite");
     }
   else
     print_usage ("fwrite");
@@ -1142,20 +1146,20 @@ DEFUN (feof, args, ,
  file specified by FILENUM from fopen")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
-      octave_stream *os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0));
 
-      if (os)
-	retval = os->eof () ? 1.0 : 0.0;
+      if (os.is_valid ())
+	retval = os.eof () ? 1.0 : 0.0;
       else
 	gripe_invalid_file_id ("feof");
     }
   else
     print_usage ("feof");
 
   return retval;
 }
@@ -1167,35 +1171,35 @@ DEFUN (ferror, args, ,
  file specified by FILENUM from fopen")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
-      octave_stream *os = octave_stream_list::lookup (args(0));
+      octave_stream os = octave_stream_list::lookup (args(0));
 
-      if (os)
+      if (os.is_valid ())
 	{
 	  bool clear = false;
 
 	  if (nargin == 2)
 	    {
 	      string opt = args(1).string_value ();
 
 	      if (! error_state)
 		clear = (opt == "clear");
 	      else
 		return retval;
 	    }
 
 	  int error_number = 0;
 
-	  string error_message = os->error (clear, error_number);
+	  string error_message = os.error (clear, error_number);
 
 	  retval(1) = static_cast<double> (error_number);
 	  retval(0) = error_message;
 	}
       else
 	gripe_invalid_file_id ("ferror");
     }
   else
@@ -1248,23 +1252,23 @@ endwhile\n\
       if (! error_state)
 	{
 	  string mode = args(1).string_value ();
 
 	  if (! error_state)
 	    {
 	      if (mode == "r")
 		{
-		  octave_iprocstream *ips = new octave_iprocstream (name);
+		  octave_stream ips = octave_iprocstream::create (name);
 
 		  retval = octave_stream_list::insert (ips);
 		}
 	      else if (mode == "w")
 		{
-		  octave_oprocstream *ops = new octave_oprocstream (name);
+		  octave_stream ops = octave_oprocstream::create (name);
 
 		  retval = octave_stream_list::insert (ops);
 		}
 	      else
 		::error ("popen: invalid mode specified");
 	    }
 	  else
 	    ::error ("popen: mode must be a string");
diff --git a/src/oct-fstrm.cc b/src/oct-fstrm.cc
--- a/src/oct-fstrm.cc
+++ b/src/oct-fstrm.cc
@@ -25,16 +25,23 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <cerrno>
 #include <cstring>
 
 #include "error.h"
 #include "oct-fstrm.h"
 
+octave_stream
+octave_fstream::create (const string& nm_arg, ios::openmode md,
+			oct_mach_info::float_format flt_fmt)
+{
+  return octave_stream (new octave_fstream (nm_arg, md, flt_fmt));
+}
+
 octave_fstream::octave_fstream (const string& nm_arg,
 				ios::openmode md = ios::in|ios::out,
 				oct_mach_info::float_format flt_fmt)
   : octave_base_stream (md, flt_fmt), nm (nm_arg)
 {
   // Override default protection of 0664 so that umask will appear to
   // do the right thing.
 
@@ -86,24 +93,16 @@ octave_fstream::tell (void) const
 // Return non-zero if EOF has been reached on this stream.
 
 bool
 octave_fstream::eof (void) const
 {
   return fs.eof ();
 }
 
-// The name of the file.
-
-string
-octave_fstream::name (void)
-{
-  return nm;
-}
-
 istream *
 octave_fstream::input_stream (void)
 {
   istream *retval = 0;
 
   if (mode () & ios::in)
     retval = &fs;
 
diff --git a/src/oct-fstrm.h b/src/oct-fstrm.h
--- a/src/oct-fstrm.h
+++ b/src/oct-fstrm.h
@@ -32,38 +32,44 @@ octave_fstream : public octave_base_stre
 {
 public:
 
   octave_fstream (const string& nm_arg,
 		  ios::openmode md = ios::in|ios::out,
 		  oct_mach_info::float_format flt_fmt =
 		  oct_mach_info::native);
 
-  ~octave_fstream (void) { }
+  static octave_stream
+  create (const string& nm_arg, ios::openmode md = ios::in|ios::out,
+	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
   // Position a stream at OFFSET relative to ORIGIN.
 
   int seek (streamoff offset, ios::seek_dir origin);
 
   // Return current stream position.
 
   long tell (void) const;
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const;
 
   // The name of the file.
 
-  string name (void);
+  string name (void) const { return nm; }
 
   istream *input_stream (void);
 
   ostream *output_stream (void);
 
+protected:
+
+  ~octave_fstream (void) { }
+
 private:
 
   string nm;
 
   fstream fs;
 
   // No copying!
 
diff --git a/src/oct-iostrm.cc b/src/oct-iostrm.cc
--- a/src/oct-iostrm.cc
+++ b/src/oct-iostrm.cc
@@ -49,27 +49,31 @@ octave_base_iostream::tell (void) const
 
 bool
 octave_base_iostream::eof (void) const
 {
   invalid_operation ();
   return false;
 }
 
-// The name of the file.
-
-string
-octave_base_iostream::name (void)
-{
-  return nm;
-}
-
 void
 octave_base_iostream::invalid_operation (void) const
 {
   ::error ("%s: invalid operation", stream_type ());
 }
 
+octave_stream
+octave_istream::create (istream *arg, const string& nm)
+{
+  return octave_stream (new octave_istream (arg, nm));
+}
+
+octave_stream
+octave_ostream::create (ostream *arg, const string& nm)
+{
+  return octave_stream (new octave_ostream (arg, nm));
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/oct-iostrm.h b/src/oct-iostrm.h
--- a/src/oct-iostrm.h
+++ b/src/oct-iostrm.h
@@ -36,36 +36,36 @@ octave_base_iostream : public octave_bas
 public:
 
   octave_base_iostream (const string& n = string (),
 			ios::openmode md = ios::in|ios::out,
 			oct_mach_info::float_format flt_fmt =
 			oct_mach_info::native)
     : octave_base_stream (md, flt_fmt), nm (n) { }
 
-  ~octave_base_iostream (void) { }
-
   // Position a stream at OFFSET relative to ORIGIN.
 
   int seek (streamoff offset, ios::seek_dir origin);
 
   // Return current stream position.
 
   long tell (void) const;
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const;
 
   // The name of the file.
 
-  string name (void);
+  string name (void) const { return nm; }
 
 protected:
 
+  ~octave_base_iostream (void) { }
+
   void invalid_operation (void) const;
 
 private:
 
   string nm;
 
   virtual const char *stream_type (void) const = 0;
 
@@ -80,22 +80,27 @@ class
 octave_istream : public octave_base_iostream
 {
 public:
 
   octave_istream (istream *arg = 0, const string& nm = string ())
     : octave_base_iostream (nm, ios::in, oct_mach_info::native),
       is (arg) { }
 
-  ~octave_istream (void) { }
+  static octave_stream
+  create (istream *arg = 0, const string& nm = string ());
 
   istream *input_stream (void) { return is; }
 
   ostream *output_stream (void) { return 0; }
 
+protected:
+
+  ~octave_istream (void) { }
+
 private:
 
   istream *is;
 
   const char *stream_type (void) const { return "octave_istream"; }
 
   // No copying!
 
@@ -108,22 +113,27 @@ class
 octave_ostream : public octave_base_iostream
 {
 public:
 
   octave_ostream (ostream *arg, const string& nm = string ())
     : octave_base_iostream (nm, ios::out, oct_mach_info::native),
       os (arg) { }
 
-  ~octave_ostream (void) { }
+  static octave_stream
+  create (ostream *arg, const string& nm = string ());
 
   istream *input_stream (void) { return 0; }
 
   ostream *output_stream (void) { return os; }
 
+protected:
+
+  ~octave_ostream (void) { }
+
 private:
 
   ostream *os;
 
   const char *stream_type (void) const { return "octave_ostream"; }
 
   // No copying!
 
diff --git a/src/oct-prcstrm.cc b/src/oct-prcstrm.cc
--- a/src/oct-prcstrm.cc
+++ b/src/oct-prcstrm.cc
@@ -23,16 +23,23 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cstdio>
 
 #include "oct-prcstrm.h"
 
+octave_stream
+octave_iprocstream::create (const string& n, ios::openmode arg_md,
+			    oct_mach_info::float_format flt_fmt)
+{
+  return octave_stream (new octave_iprocstream (n, arg_md, flt_fmt));
+}
+
 octave_iprocstream::octave_iprocstream (const string& n,
 					ios::openmode arg_md,
 					oct_mach_info::float_format flt_fmt)
   : octave_istdiostream (n, 0, arg_md, flt_fmt)
 {
   fp = popen (n.c_str (), "r");
 
   if (fp)
@@ -46,16 +53,23 @@ octave_iprocstream::~octave_iprocstream 
 {
   if (fp)
     {
       pclose (fp);
       fp = 0;
     }
 }
 
+octave_stream
+octave_oprocstream::create (const string& n, ios::openmode arg_md,
+			    oct_mach_info::float_format flt_fmt)
+{
+  return octave_stream (new octave_oprocstream (n, arg_md, flt_fmt));
+}
+
 octave_oprocstream::octave_oprocstream (const string& n,
 					ios::openmode arg_md,
 					oct_mach_info::float_format flt_fmt)
   : octave_ostdiostream (n, 0, arg_md, flt_fmt)
 {
   fp = popen (n.c_str (), "w");
 
   if (fp)
diff --git a/src/oct-prcstrm.h b/src/oct-prcstrm.h
--- a/src/oct-prcstrm.h
+++ b/src/oct-prcstrm.h
@@ -30,16 +30,22 @@ octave_iprocstream : public octave_istdi
 {
 public:
 
   octave_iprocstream (const string& n,
 		      ios::openmode arg_md = ios::in,
 		      oct_mach_info::float_format flt_fmt =
 		      oct_mach_info::native);
 
+  static octave_stream
+  create (const string& n, ios::openmode arg_md = ios::in,
+	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
+
+protected:
+
   ~octave_iprocstream (void);
 
 private:
 
   // No copying!
 
   octave_iprocstream (const octave_iprocstream&);
 
@@ -51,16 +57,22 @@ octave_oprocstream : public octave_ostdi
 {
 public:
 
   octave_oprocstream (const string& n,
 		      ios::openmode arg_md = ios::out,
 		      oct_mach_info::float_format flt_fmt =
 		      oct_mach_info::native);
 
+  static octave_stream
+  create (const string& n, ios::openmode arg_md = ios::out,
+	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
+
+protected:
+
   ~octave_oprocstream (void);
 
 private:
 
   // No copying!
 
   octave_oprocstream (const octave_oprocstream&);
 
diff --git a/src/oct-stdstrm.cc b/src/oct-stdstrm.cc
--- a/src/oct-stdstrm.cc
+++ b/src/oct-stdstrm.cc
@@ -78,30 +78,46 @@ octave_base_stdiostream::tell (void) con
 	  if (bad ())
 	    retval = -1;
 	}
     }
 
   return retval;
 }
 
+octave_stream
+octave_istdiostream::create (const string& n, FILE *f,
+			     ios::openmode arg_md,
+			     oct_mach_info::float_format flt_fmt)
+{
+  return octave_stream (new octave_istdiostream (n, f, arg_md, flt_fmt));
+}
+
 octave_istdiostream::octave_istdiostream (const string& n, FILE *f,
 					  ios::openmode arg_md,
 					  oct_mach_info::float_format flt_fmt)
   : octave_base_stdiostream (n, f, arg_md, flt_fmt), is (0)
 {
   if (f)
     is = new istdiostream (f);
 }
 
 octave_istdiostream::~octave_istdiostream (void)
 {
   delete is;
 }
 
+octave_stream
+octave_ostdiostream::create (const string& n, FILE *f,
+			     ios::openmode arg_md,
+			     oct_mach_info::float_format flt_fmt)
+{
+  return octave_stream (new octave_ostdiostream (n, f, arg_md, flt_fmt));
+}
+
 octave_ostdiostream::octave_ostdiostream (const string& n, FILE *f,
 					  ios::openmode arg_md,
 					  oct_mach_info::float_format flt_fmt)
   : octave_base_stdiostream (n, f, arg_md, flt_fmt), os (0)
 {
   if (f)
     os = new ostdiostream (f);
 }
diff --git a/src/oct-stdstrm.h b/src/oct-stdstrm.h
--- a/src/oct-stdstrm.h
+++ b/src/oct-stdstrm.h
@@ -33,42 +33,42 @@ octave_base_stdiostream : public octave_
 public:
 
   octave_base_stdiostream (const string& n, FILE *f,
 			   ios::openmode arg_md = ios::in|ios::out,
 			   oct_mach_info::float_format flt_fmt =
 			   oct_mach_info::native)
     : octave_base_stream (arg_md, flt_fmt), nm (n), fp (f) { }
 
-  ~octave_base_stdiostream (void);
-
   // Position a stream at OFFSET relative to ORIGIN.
 
   int seek (streamoff offset, ios::seek_dir origin);
 
   // Return current stream position.
 
   long tell (void) const;
 
   // The name of the file.
 
-  string name (void) { return nm; }
+  string name (void) const { return nm; }
 
   virtual stdiobuf *rdbuf (void) const = 0;
 
   virtual bool bad (void) const = 0;
 
   virtual void clear (void) = 0;
 
 protected:
 
   string nm;
 
   FILE *fp;
 
+  ~octave_base_stdiostream (void);
+
   // No copying!
 
   octave_base_stdiostream (const octave_base_stdiostream&);
 
   octave_base_stdiostream& operator = (const octave_base_stdiostream&);
 };
 
 class
@@ -76,17 +76,19 @@ octave_istdiostream : public octave_base
 {
 public:
 
   octave_istdiostream (const string& n, FILE *f = 0,
 		       ios::openmode arg_md = ios::in,
 		       oct_mach_info::float_format flt_fmt =
 		       oct_mach_info::native);
 
-  ~octave_istdiostream (void);
+  static octave_stream
+  create (const string& n, FILE *f = 0, ios::openmode arg_md = ios::in,
+	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return is ? is->eof () : true; }
 
   istream *input_stream (void) { return is; }
 
   ostream *output_stream (void) { return 0; }
@@ -102,16 +104,18 @@ public:
       if (is)
 	is->clear ();
     }
 
 protected:
 
   istdiostream *is;
 
+  ~octave_istdiostream (void);
+
 private:
 
   // No copying!
 
   octave_istdiostream (const octave_istdiostream&);
 
   octave_istdiostream& operator = (const octave_istdiostream&);
 };
@@ -121,17 +125,19 @@ octave_ostdiostream : public octave_base
 {
 public:
 
   octave_ostdiostream (const string& n, FILE *f = 0,
 		       ios::openmode arg_md = ios::out,
 		       oct_mach_info::float_format flt_fmt =
 		       oct_mach_info::native);
 
-  ~octave_ostdiostream (void);
+  static octave_stream
+  create (const string& n, FILE *f = 0, ios::openmode arg_md = ios::out,
+	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return os ? os->eof () : true; }
 
   istream *input_stream (void) { return 0; }
 
   ostream *output_stream (void) { return os; }
@@ -147,16 +153,18 @@ public:
       if (os)
 	os->clear ();
     }
 
 protected:
 
   ostdiostream *os;
 
+  ~octave_ostdiostream (void);
+
 private:
 
   // No copying!
 
   octave_ostdiostream (const octave_ostdiostream&);
 
   octave_ostdiostream& operator = (const octave_ostdiostream&);
 };
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -205,17 +205,17 @@ scanf_format_list::scanf_format_list (co
 }
 
 scanf_format_list::~scanf_format_list (void)
 {
   int n = list.length ();
 
   for (int i = 0; i < n; i++)
     {
-      scanf_format_elt *elt = list (i);
+      scanf_format_elt *elt = list(i);
       delete elt;
     }	
 }
 
 void
 scanf_format_list::add_elt_to_list (int width, bool discard, char type,
 				    char modifier, int& num_elts)
 {
@@ -230,17 +230,17 @@ scanf_format_list::add_elt_to_list (int 
 	  if (*text)
 	    {
 	      scanf_format_elt *elt
 		= new scanf_format_elt (text, width, discard, type, modifier);
 
 	      if (num_elts == list.length ())
 		list.resize (2 * num_elts);
 
-	      list (num_elts++) = elt;
+	      list(num_elts++) = elt;
 	    }
 	  else
 	    delete [] text;
 	}
 
       delete buf;
       buf = 0;
     }
@@ -400,17 +400,17 @@ scanf_format_list::finish_conversion (co
 
 void
 scanf_format_list::printme (void) const
 {
   int n = list.length ();
 
   for (int i = 0; i < n; i++)
     {
-      scanf_format_elt *elt = list (i);
+      scanf_format_elt *elt = list(i);
 
       cerr << elt->width << "\t"
 	   << elt->discard << "\t"
 	   << elt->type << "\t"
 	   << elt->modifier << "\t"
 	   << undo_string_escapes (elt->text) << "\n";
     }
 }
@@ -419,17 +419,17 @@ bool
 scanf_format_list::all_character_conversions (void)
 {
   int n = list.length ();
 
   if (n > 0)
     {
       for (int i = 0; i < n; i++)
 	{
-	  scanf_format_elt *elt = list (i);
+	  scanf_format_elt *elt = list(i);
 
 	  switch (elt->type)
 	    {
 	    case 'c': case 's': case '%': case '[':
 	      break;
 
 	    default:
 	      return false;
@@ -447,17 +447,17 @@ bool
 scanf_format_list::all_numeric_conversions (void)
 {
   int n = list.length ();
 
   if (n > 0)
     {
       for (int i = 0; i < n; i++)
 	{
-	  scanf_format_elt *elt = list (i);
+	  scanf_format_elt *elt = list(i);
 
 	  switch (elt->type)
 	    {
 	    case 'd': case 'i': case 'o': case 'u': case 'x':
 	    case 'e': case 'f': case 'g':
 	      break;
 
 	    default:
@@ -527,17 +527,17 @@ printf_format_list::printf_format_list (
 }
 
 printf_format_list::~printf_format_list (void)
 {
   int n = list.length ();
 
   for (int i = 0; i < n; i++)
     {
-      printf_format_elt *elt = list (i);
+      printf_format_elt *elt = list(i);
       delete elt;
     }	
 }
 
 void
 printf_format_list::add_elt_to_list (int args, char type, char modifier,
 				     int& num_elts)
 {
@@ -552,17 +552,17 @@ printf_format_list::add_elt_to_list (int
 	  if (*text)
 	    {
 	      printf_format_elt *elt
 		= new printf_format_elt (text, args, type, modifier);
 
 	      if (num_elts == list.length ())
 		list.resize (2 * num_elts);
 
-	      list (num_elts++) = elt;
+	      list(num_elts++) = elt;
 	    }
 	  else
 	    delete [] text;
 	}
 
       delete buf;
       buf = 0;
     }
@@ -711,17 +711,17 @@ printf_format_list::finish_conversion (c
 
 void
 printf_format_list::printme (void) const
 {
   int n = list.length ();
 
   for (int i = 0; i < n; i++)
     {
-      printf_format_elt *elt = list (i);
+      printf_format_elt *elt = list(i);
 
       cerr << elt->args<< "\t"
 	   << elt->type << "\t"
 	   << elt->modifier << "\t"
 	   << undo_string_escapes (elt->text) << "\n";
     }
 }
 
@@ -2173,16 +2173,53 @@ void
 octave_base_stream::invalid_operation (const char *op, const char *rw)
 {
   string msg = op;
   msg.append (": stream not open for ");
   msg.append (rw);
   error (msg);
 }
 
+octave_stream::octave_stream (octave_base_stream *bs = 0)
+  : rep (bs)
+{
+  if (rep)
+    rep->count = 1;
+}
+
+octave_stream::~octave_stream (void)
+{
+  if (rep && --rep->count == 0)
+    delete rep;
+}
+
+octave_stream::octave_stream (const octave_stream& s)
+  : rep (s.rep)
+{
+  if (rep)
+    rep->count++;
+}
+
+octave_stream&
+octave_stream::operator = (const octave_stream& s)
+{
+  if (rep != s.rep)
+    {
+      if (rep && --rep->count == 0)
+	delete rep;
+
+      rep = s.rep;
+
+      if (rep)
+	rep->count++;
+    }
+
+  return *this;
+}
+
 int
 octave_stream::flush (void)
 {
   int retval = -1;
 
   if (stream_ok ("fflush"))
     retval = rep->flush ();
 
@@ -2338,16 +2375,34 @@ octave_stream::rewind (void)
   int retval = -1;
 
   if (stream_ok ("frewind"))
     retval = rep->rewind ();
 
   return retval;
 }
 
+bool
+octave_stream::is_open (void) const
+{
+  bool retval = false;
+
+  if (stream_ok ("is_open"))
+    retval = rep->is_open ();
+
+  return retval;
+}
+
+void
+octave_stream::close (void)
+{
+  if (stream_ok ("close"))
+    rep->close ();
+}
+
 octave_value
 octave_stream::read (const Matrix& size,
 		     oct_data_conv::data_type dt, int skip,
 		     oct_mach_info::float_format flt_fmt, int& count)
 {
   octave_value retval;
 
   if (stream_ok ("fread"))
@@ -2449,39 +2504,39 @@ octave_stream::error (bool clear, int& e
 
   if (stream_ok ("ferror", false))
     retval = rep->error (clear, err_num);
 
   return retval;
 }
 
 string
-octave_stream::name (void)
+octave_stream::name (void) const
 {
   string retval;
 
   if (stream_ok ("name"))
     retval = rep->name ();
 
   return retval;
 }
 
 int
-octave_stream::mode (void)
+octave_stream::mode (void) const
 {
   int retval = 0;
 
   if (stream_ok ("mode"))
     retval = rep->mode ();
 
   return retval;
 }
 
 oct_mach_info::float_format
-octave_stream::float_format (void)
+octave_stream::float_format (void) const
 {
   oct_mach_info::float_format retval = oct_mach_info::unknown;
 
   if (stream_ok ("float_format"))
     retval = rep->float_format ();
 
   return retval;
 }
@@ -2572,31 +2627,31 @@ octave_stream_list::instance_ok (void)
 
       retval = false;
     }
 
   return retval;
 }
 
 octave_value
-octave_stream_list::insert (octave_base_stream *obs)
+octave_stream_list::insert (const octave_stream& os)
 {
-  return (instance_ok ()) ? instance->do_insert (obs) : octave_value (-1.0);
+  return (instance_ok ()) ? instance->do_insert (os) : octave_value (-1.0);
 }
 
-octave_stream *
+octave_stream
 octave_stream_list::lookup (int fid)
 {
-  return (instance_ok ()) ? instance->do_lookup (fid) : 0;
+  return (instance_ok ()) ? instance->do_lookup (fid) : octave_stream ();
 }
 
-octave_stream *
+octave_stream
 octave_stream_list::lookup (const octave_value& fid)
 {
-  return (instance_ok ()) ? instance->do_lookup (fid) : 0;
+  return (instance_ok ()) ? instance->do_lookup (fid) : octave_stream ();
 }
 
 int
 octave_stream_list::remove (int fid)
 {
   return (instance_ok ()) ? instance->do_remove (fid) : -1;
 }
 
@@ -2640,74 +2695,67 @@ octave_stream_list::open_file_numbers (v
 
 int
 octave_stream_list::get_file_number (const octave_value& fid)
 {
   return (instance_ok ()) ? instance->do_get_file_number (fid) : -1;
 }
 
 octave_value
-octave_stream_list::do_insert (octave_base_stream *obs)
+octave_stream_list::do_insert (const octave_stream& os)
 {
+  octave_value retval;
+
   int stream_number = -1;
 
-  octave_stream *os = 0;
-
-  if (obs)
+  // Insert item in first open slot, increasing size of list if
+  // necessary.
+
+  for (int i = 0; i < curr_len; i++)
     {
-      os = new octave_stream (obs);
-
-      // Insert item in first open slot, increasing size of list if
-      // necessary.
-
-      for (int i = 0; i < curr_len; i++)
+      octave_stream tmp = list(i);
+
+      if (! tmp)
 	{
-	  octave_stream *tmp = list (i);
-
-	  if (! tmp)
-	    {
-	      list (i) = os;
-	      stream_number = i;
-	      break;
-	    }
-	}
-
-      if (stream_number < 0)
-	{
-	  int total_len = list.length ();
-
-	  if (curr_len == total_len)
-	    list.resize (total_len * 2);
-
-	  list (curr_len) = os;
-	  stream_number = curr_len;
-	  curr_len++;
+	  list(i) = os;
+	  stream_number = i;
+	  break;
 	}
     }
-  else
-    ::error ("octave_stream_list: attempt to insert invalid stream");
+
+  if (stream_number < 0)
+    {
+      int total_len = list.length ();
+
+      if (curr_len == total_len)
+	list.resize (total_len * 2);
+
+      list(curr_len) = os;
+      stream_number = curr_len;
+      curr_len++;
+    }
 
   return octave_value (os, stream_number);
 }
 
-octave_stream *
+octave_stream
 octave_stream_list::do_lookup (int fid) const
 {
-  octave_stream *retval = 0;
+  octave_stream retval;
 
   if (fid >= 0 && fid < curr_len)
-    retval = list (fid);
+    retval = list(fid);
 
   return retval;
 }
 
-octave_stream *
+octave_stream
 octave_stream_list::do_lookup (const octave_value& fid) const
 {
-  octave_stream *retval = 0;
+  octave_stream retval;
 
   int i = get_file_number (fid);
 
   if (! error_state)
     retval = do_lookup (i);
 
   return retval;
 }
@@ -2716,22 +2764,22 @@ int
 octave_stream_list::do_remove (int fid)
 {
   int retval = -1;
 
   // Can't remove stdin (cin), stdout (cout), or stderr (cerr).
 
   if (fid > 2 && fid < curr_len)
     {
-      octave_stream *os = list (fid);
+      octave_stream os = list(fid);
 
       if (os)
 	{
-	  delete os;
-	  list (fid) = 0;
+	  os.close ();
+	  list(fid) = octave_stream ();
 	  retval = 0;
 	}
     }
 
   return retval;
 }
 
 int
@@ -2747,45 +2795,39 @@ octave_stream_list::do_remove (const oct
   return retval;
 }
 
 void
 octave_stream_list::do_clear (void)
 {
   // Do flush stdout and stderr.
 
-  list (0) -> flush ();
-  list (1) -> flush ();
+  list(0) . flush ();
+  list(1) . flush ();
 
   // But don't delete them or stdin.
 
   for (int i = 3; i < curr_len; i++)
-    {
-      octave_stream *os = list (i);
-
-      delete os;
-
-      list (i) = 0;
-    }
+    list(i) = octave_stream ();
 }
 
 string_vector
 octave_stream_list::do_get_info (int fid) const
 {
   string_vector retval;
 
-  octave_stream *os = do_lookup (fid);
+  octave_stream os = do_lookup (fid);
 
   if (os)
     {
       retval.resize (3);
 
-      retval(0) = os->name ();
-      retval(1) = octave_stream::mode_as_string (os->mode ());
-      retval(2) = oct_mach_info::float_format_as_string (os->float_format ());
+      retval(0) = os.name ();
+      retval(1) = octave_stream::mode_as_string (os.mode ());
+      retval(2) = oct_mach_info::float_format_as_string (os.float_format ());
     }
   else
     ::error ("invalid file id");
 
   return retval;
 }
 
 string_vector
@@ -2815,26 +2857,26 @@ octave_stream_list::do_list_open_files (
   ostrstream buf;
 
   buf << "\n"
       << "  number  mode  arch       name\n"
       << "  ------  ----  ----       ----\n";
 
   for (int i = 0; i < curr_len; i++)
     {
-      octave_stream *os = list (i);
+      octave_stream os = list(i);
 
       if (os)
 	{
-	  string mode = octave_stream::mode_as_string (os->mode ());
+	  string mode = octave_stream::mode_as_string (os.mode ());
 
 	  string arch =
-	    oct_mach_info::float_format_as_string (os->float_format ());
-
-	  string name = os->name ();
+	    oct_mach_info::float_format_as_string (os.float_format ());
+
+	  string name = os.name ();
 
 	  buf << "  "
 	      << setiosflags (ios::right)
 	      << setw (4) << i << "     "
 	      << setiosflags (ios::left)
 	      << setw (3) << mode.c_str () << "  "
 	      << setw (9) << arch.c_str () << "  "
 	      << name << "\n";
@@ -2858,17 +2900,17 @@ octave_stream_list::do_open_file_numbers
   Matrix retval (1, curr_len, 0.0);
 
   int num_open = 0;
 
   // Skip stdin, stdout, and stderr.
 
   for (int i = 3; i < curr_len; i++)
     {
-      if (list (i))
+      if (list(i))
 	retval (0, num_open++) = i;
     }
 
   retval.resize ((num_open > 0), num_open);
 
   return retval;
 }
 
@@ -2880,19 +2922,19 @@ octave_stream_list::do_get_file_number (
   if (fid.is_string ())
     {
       string nm = fid.string_value ();
 
       // stdin (cin), stdout (cout), and stderr (cerr) are unnamed.
 
       for (int i = 3; i < curr_len; i++)
 	{
-	  octave_stream *os = list (i);
-
-	  if (os && os->name () == nm)
+	  octave_stream os = list(i);
+
+	  if (os && os.name () == nm)
 	    {
 	      retval = i;
 	      break;
 	    }
 	}
     }
   else
     {
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -217,85 +217,98 @@ class
 octave_base_stream
 {
 friend class octave_stream;
 
 public:
 
   octave_base_stream (ios::openmode arg_md = ios::in|ios::out,
 		      oct_mach_info::float_format ff = oct_mach_info::native)
-    : md (arg_md), flt_fmt (ff), fail (false) { }
+    : count (0), md (arg_md), flt_fmt (ff), fail (false), open_state (true)
+  { }
 
   virtual ~octave_base_stream (void) { }
 
   // The remaining functions are not specific to input or output only,
   // and must be provided by the derived classes.
 
   // Position a stream at OFFSET relative to ORIGIN.
 
   virtual int seek (streamoff offset, ios::seek_dir origin) = 0;
 
   // Return current stream position.
 
   virtual long tell (void) const = 0;
 
-  // Return non-zero if EOF has been reached on this stream.
+  // Return TRUE if EOF has been reached on this stream.
 
   virtual bool eof (void) const = 0;
 
   // The name of the file.
 
-  virtual string name (void) = 0;
+  virtual string name (void) const = 0;
 
   // If the derived class provides this function and it returns a
   // pointer to a valid istream, scanf(), read(), getl(), and gets()
   // will automatically work for this stream.
 
   virtual istream *input_stream (void) { return 0; }
 
   // If the derived class provides this function and it returns a
   // pointer to a valid ostream, flush(), write(), and printf() will
   // automatically work for this stream.
 
   virtual ostream *output_stream (void) { return 0; }
 
+  // Return TRUE if this stream is open.
+
+  bool is_open (void) const { return open_state; }
+
+  void close (void) { open_state = false; }
+
   int file_number (void);
 
   bool ok (void) const { return ! fail; }
 
   // Return current error message for this stream.
 
   string error (bool clear, int& err_num);
 
 protected:
 
-  int mode (void) { return md; }
+  int mode (void) const { return md; }
 
-  oct_mach_info::float_format float_format (void) { return flt_fmt; }
+  oct_mach_info::float_format float_format (void) const { return flt_fmt; }
 
   // Set current error state and set fail to TRUE.
 
   void error (const string& msg);
 
   // Clear any error message and set fail to FALSE.
 
   void clear (void);
 
 private:
 
+  // A reference count.
+  int count;
+
   // The permission bits for the file.  Should be some combination of
   // ios::open_mode bits.
   int md;
 
   // Data format.
   oct_mach_info::float_format flt_fmt;
 
   // TRUE if an error has occurred.
   bool fail;
 
+  // TRUE if this stream is open.
+  bool open_state;
+
   // Should contain error message if fail is TRUE.
   string errmsg;
 
   // Functions that are defined for all input streams (input streams
   // are those that define is).
 
   string do_gets (int max_len, bool& err, bool strip_newline,
 		  const char *fcn);
@@ -357,40 +370,43 @@ private:
   octave_base_stream& operator = (const octave_base_stream&);
 };
 
 class
 octave_stream
 {
 public:
 
-  octave_stream (octave_base_stream *bs = 0, bool pf = false)
-    : rep (bs), preserve (pf) { }
+  octave_stream (octave_base_stream *bs = 0);
+
+  ~octave_stream (void);
 
-  ~octave_stream (void)
-    {
-      if (! preserve)
-	delete rep;
-    }
+  octave_stream (const octave_stream&);
+
+  octave_stream& operator = (const octave_stream&);
 
   int flush (void);
 
   string getl (int max_len, bool& err);
   string getl (const octave_value& max_len, bool& err);
 
   string gets (int max_len, bool& err);
   string gets (const octave_value& max_len, bool& err);
 
   int seek (streamoff offset, ios::seek_dir origin);
   int seek (const octave_value& offset, const octave_value& origin);
 
   long tell (void) const;
 
   int rewind (void);
 
+  bool is_open (void) const;
+
+  void close (void);
+
   octave_value read (const Matrix& size, oct_data_conv::data_type dt,
 		     int skip, oct_mach_info::float_format flt_fmt,
 		     int& count);
 
   int write (const octave_value& data, oct_data_conv::data_type dt,
 	     int skip, oct_mach_info::float_format flt_fmt);
 
   octave_value scanf (const string& fmt, const Matrix& size, int& count);
@@ -409,40 +425,39 @@ public:
   string error (bool clear = false)
     {
       int err_num;
       return error (clear, err_num);
     }
 
   int file_number (void) { return rep ? rep->file_number () : -1; }
 
+  bool is_valid (void) const { return (rep != 0); }
+
   bool ok (void) const { return rep && rep->ok (); }
 
   operator bool () const { return ok (); }
 
-  string name (void);
+  string name (void) const;
 
-  int mode (void);
+  int mode (void) const;
 
-  oct_mach_info::float_format float_format (void);
+  oct_mach_info::float_format float_format (void) const;
 
   static string mode_as_string (int mode);
 
-  istream *input_stream (void) { return rep->input_stream (); }
+  istream *input_stream (void) { return rep ? rep->input_stream () : 0; }
 
-  ostream *output_stream (void) { return rep->output_stream (); }
+  ostream *output_stream (void) { return rep ? rep->output_stream () : 0; }
 
 private:
 
   // The actual representation of this stream.
   octave_base_stream *rep;
 
-  // If true, do not delete rep.
-  bool preserve;
-
   void invalid_stream_error (const char *op) const;
 
   bool stream_ok (const char *op, bool clear = true) const
     {
       bool retval = true;
 
       if (rep)
 	{
@@ -458,45 +473,35 @@ private:
       return retval;
     }
 
   void error (const string& msg)
     {
       if (rep)
 	rep->error (msg);
     }
-
-  // Must create named streams.
-
-  octave_stream (void);
-
-  // No copying!
-
-  octave_stream (const octave_stream&);
-
-  octave_stream& operator = (const octave_stream&);
 };
 
 class
 octave_stream_list
 {
 protected:
 
   octave_stream_list (void) : list (32), curr_len (0) { }
 
 public:
 
   ~octave_stream_list (void) { }
 
   static bool instance_ok (void);
 
-  static octave_value insert (octave_base_stream *obs);
+  static octave_value insert (const octave_stream& os);
 
-  static octave_stream *lookup (int fid);
-  static octave_stream *lookup (const octave_value& fid);
+  static octave_stream lookup (int fid);
+  static octave_stream lookup (const octave_value& fid);
 
   static int remove (int fid);
   static int remove (const octave_value& fid);
 
   static void clear (void);
 
   static string_vector get_info (int fid);
   static string_vector get_info (const octave_value& fid);
@@ -504,26 +509,26 @@ public:
   static string list_open_files (void);
 
   static octave_value open_file_numbers (void);
 
   static int get_file_number (const octave_value& fid);
 
 private:
 
-  Array<octave_stream*> list;
+  Array<octave_stream> list;
 
   int curr_len;
 
   static octave_stream_list *instance;
 
-  octave_value do_insert (octave_base_stream *obs);
+  octave_value do_insert (const octave_stream& os);
 
-  octave_stream *do_lookup (int fid) const;
-  octave_stream *do_lookup (const octave_value& fid) const;
+  octave_stream do_lookup (int fid) const;
+  octave_stream do_lookup (const octave_value& fid) const;
 
   int do_remove (int fid);
   int do_remove (const octave_value& fid);
 
   void do_clear (void);
 
   string_vector do_get_info (int fid) const;
   string_vector do_get_info (const octave_value& fid) const;
diff --git a/src/oct-strstrm.cc b/src/oct-strstrm.cc
--- a/src/oct-strstrm.cc
+++ b/src/oct-strstrm.cc
@@ -69,13 +69,34 @@ octave_base_strstream::tell (void) const
 	  if (bad ())
 	    retval = -1;
 	}
     }
 
   return retval;
 }
 
+octave_stream
+octave_istrstream::create (const char *data, ios::openmode arg_md,
+			   oct_mach_info::float_format flt_fmt)
+{
+  return octave_stream (new octave_istrstream (data, arg_md, flt_fmt));
+}
+
+octave_stream
+octave_istrstream::create (const string& data, ios::openmode arg_md,
+			   oct_mach_info::float_format flt_fmt)
+{
+  return octave_stream (new octave_istrstream (data, arg_md, flt_fmt));
+}
+
+octave_stream
+octave_ostrstream::create (ios::openmode arg_md,
+			   oct_mach_info::float_format flt_fmt)
+{
+  return octave_stream (new octave_ostrstream (arg_md, flt_fmt));
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/oct-strstrm.h b/src/oct-strstrm.h
--- a/src/oct-strstrm.h
+++ b/src/oct-strstrm.h
@@ -34,36 +34,38 @@ octave_base_strstream : public octave_ba
 {
 public:
 
   octave_base_strstream (ios::openmode arg_md = ios::out,
 			 oct_mach_info::float_format flt_fmt =
 			 oct_mach_info::native)
     : octave_base_stream (arg_md, flt_fmt) { }
 
-  ~octave_base_strstream (void) { }
-
   // Position a stream at OFFSET relative to ORIGIN.
 
   int seek (streamoff offset, ios::seek_dir origin);
 
   // Return current stream position.
 
   long tell (void) const;
 
   // The name of the file.
 
-  string name (void) { return string (); }
+  string name (void) const { return string (); }
 
   virtual streambuf *rdbuf (void) = 0;
 
   virtual bool bad (void) const = 0;
 
   virtual void clear (void) = 0;
 
+protected:
+
+  ~octave_base_strstream (void) { }
+
 private:
 
   // No copying!
 
   octave_base_strstream (const octave_base_strstream&);
 
   octave_base_strstream& operator = (const octave_base_strstream&);
 };
@@ -80,32 +82,42 @@ public:
     : octave_base_strstream (arg_md, flt_fmt), is (data) { }
 
   octave_istrstream (const string& data,
 		     ios::openmode arg_md = ios::out,
 		     oct_mach_info::float_format flt_fmt =
 		     oct_mach_info::native)
     : octave_base_strstream (arg_md, flt_fmt), is (data.c_str ()) { }
 
-  ~octave_istrstream (void) { }
+  static octave_stream
+  create (const char *data, ios::openmode arg_md = ios::out,
+	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
+
+  static octave_stream
+  create (const string& data, ios::openmode arg_md = ios::out,
+	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return is.eof (); }
 
   istream *input_stream (void) { return &is; }
 
   ostream *output_stream (void) { return 0; }
 
   streambuf *rdbuf (void) { return is ? is.rdbuf () : 0; }
 
   bool bad (void) const { return is.bad (); }
 
   void clear (void) { is.clear (); }
 
+protected:
+
+  ~octave_istrstream (void) { }
+
 private:
 
   istrstream is;
 
   // No copying!
 
   octave_istrstream (const octave_istrstream&);
 
@@ -117,38 +129,47 @@ octave_ostrstream : public octave_base_s
 {
 public:
 
   octave_ostrstream (ios::openmode arg_md = ios::out,
 		     oct_mach_info::float_format flt_fmt =
 		     oct_mach_info::native)
     : octave_base_strstream (arg_md, flt_fmt) { }
 
-  ~octave_ostrstream (void) { }
+  static octave_stream
+  create (ios::openmode arg_md = ios::out,
+	  oct_mach_info::float_format flt_fmt = oct_mach_info::native);
 
   // Return non-zero if EOF has been reached on this stream.
 
   bool eof (void) const { return os.eof (); }
 
   istream *input_stream (void) { return 0; }
 
   ostream *output_stream (void) { return &os; }
 
-  char *str (void)
+  string str (void)
     {
       os << ends;
-      return os.str ();
+      char *tmp = os.str ();
+      string retval = tmp;
+      delete [] tmp;
+      return retval;
     }
 
   streambuf *rdbuf (void) { return os ? os.rdbuf () : 0; }
 
   bool bad (void) const { return os.bad (); }
 
   void clear (void) { os.clear (); }
 
+protected:
+
+  ~octave_ostrstream (void) { }
+
 private:
 
   ostrstream os;
 
   // No copying!
 
   octave_ostrstream (const octave_ostrstream&);
 
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -31,16 +31,17 @@ Software Foundation, 59 Temple Place - S
 #include <iostream.h>
 
 #include "lo-ieee.h"
 
 #include "gripes.h"
 #include "oct-map.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
+#include "oct-stream.h"
 #include "ops.h"
 #include "ov-base.h"
 #include "ov-scalar.h"
 #include "ov-re-mat.h"
 #include "ov-complex.h"
 #include "ov-cx-mat.h"
 #include "ov-ch-mat.h"
 #include "ov-str-mat.h"
@@ -256,20 +257,20 @@ octave_base_value::range_value (void) co
 Octave_map
 octave_base_value::map_value (void) const
 {
   Octave_map retval;
   gripe_wrong_type_arg ("octave_base_value::map_value()", type_name ());
   return retval;
 }
 
-octave_stream *
+octave_stream
 octave_base_value::stream_value (void) const
 {
-  octave_stream *retval = 0;
+  octave_stream retval;
   gripe_wrong_type_arg ("octave_base_value::stream_value()", type_name ());
   return retval;
 }
 
 int
 octave_base_value::stream_number (void) const
 {
   int retval = -1;
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -103,17 +103,17 @@ public:
   bool is_char_matrix (void) const { return false; }
 
   bool is_string (void) const { return false; }
 
   bool is_range (void) const { return false; }
 
   bool is_map (void) const { return false; }
 
-  bool is_file (void) const { return false; }
+  bool is_stream (void) const { return false; }
 
   bool is_list (void) const { return false; }
 
   bool is_magic_colon (void) const { return false; }
 
   bool is_all_va_args (void) const { return false; }
 
   octave_value all (void) const { return 0.0; }
@@ -174,17 +174,17 @@ public:
   string_vector all_strings (void) const;
 
   string string_value (void) const;
 
   Range range_value (void) const;
 
   Octave_map map_value (void) const;
 
-  octave_stream *stream_value (void) const;
+  octave_stream stream_value (void) const;
 
   int stream_number (void) const;
 
   octave_function *function_value (bool silent);
 
   octave_value_list list_value (void) const;
 
   bool bool_value (void) const;
diff --git a/src/ov-file.cc b/src/ov-file.cc
--- a/src/ov-file.cc
+++ b/src/ov-file.cc
@@ -65,25 +65,27 @@ void
 octave_file::print_raw (ostream& os, bool) const
 {
   indent (os); os << "{"; newline (os);
 
   if (stream)
     {
       increment_indent_level ();
 
-      string name = stream->name ();
-      string mode = octave_stream::mode_as_string (stream->mode ());
+      string name = stream.name ();
+      string mode = octave_stream::mode_as_string (stream.mode ());
       string arch
-	= oct_mach_info::float_format_as_string (stream->float_format ());
+	= oct_mach_info::float_format_as_string (stream.float_format ());
+      string status = stream.is_open () ? "open" : "closed";
 
       indent (os); os << "id = " << number; newline (os);
       indent (os); os << "name = " << name; newline (os);
       indent (os); os << "mode = " << mode; newline (os);
       indent (os); os << "arch = " << arch; newline (os);
+      indent (os); os << "status = " << status; newline (os);
 
       decrement_indent_level ();
     }
 
   indent (os); os << "}";
 }
 
 bool
diff --git a/src/ov-file.h b/src/ov-file.h
--- a/src/ov-file.h
+++ b/src/ov-file.h
@@ -29,68 +29,69 @@ Software Foundation, 59 Temple Place - S
 
 #include <cstdlib>
 
 #include <string>
 
 class ostream;
 
 #include "oct-alloc.h"
+#include "oct-stream.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 class tree_walker;
 class octave_stream;
 class octave_value;
 class octave_value_list;
 
 // Lists.
 
 class
 octave_file : public octave_base_value
 {
 public:
 
   octave_file (void)
-    : octave_base_value (), stream (0), number (-1) { }
+    : octave_base_value (), stream (), number (-1) { }
 
-  octave_file (octave_stream *s, int n)
+  octave_file (const octave_stream& s, int n)
     : octave_base_value (), stream (s), number (n) { }
 
   octave_file (const octave_file& f)
     : octave_base_value (), stream (f.stream), number (f.number) { }
 
   ~octave_file (void) { }
 
   octave_value *clone (void) { return new octave_file (*this); }
 
   type_conv_fcn numeric_conversion_function (void) const;
 
   double double_value (bool) const { return static_cast<double> (number); }
 
   double scalar_value (bool) const { return static_cast<double> (number); }
 
-  octave_stream *stream_value (void) const { return stream; }
+  octave_stream stream_value (void) const { return stream; }
 
   int stream_number (void) const { return number; }
 
   bool is_defined (void) const { return true; }
 
-  bool is_file (void) const { return true; }
+  bool is_stream (void) const { return true; }
 
   void print (ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (ostream& os, bool pr_as_read_syntax = false) const;
 
   bool print_name_tag (ostream& os, const string& name) const;
 
 private:
 
   // The stream object.
-  octave_stream *stream;
+  octave_stream stream;
 
   // The number of the beast.
   int number;
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 
   DECLARE_OCTAVE_ALLOCATOR
 };
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -465,17 +465,17 @@ octave_value::octave_value (const Range&
 }
 
 octave_value::octave_value (const Octave_map& m)
   : rep (new octave_struct (m))
 {
   rep->count = 1;
 }
 
-octave_value::octave_value (octave_stream *s, int n)
+octave_value::octave_value (const octave_stream& s, int n)
   : rep (new octave_file (s, n))
 {
   rep->count = 1;
 }
 
 octave_value::octave_value (octave_function *f)
   : rep (f)
 {
@@ -710,17 +710,17 @@ octave_value::struct_elt_ref (octave_val
 }
 
 Octave_map
 octave_value::map_value (void) const
 {
   return rep->map_value ();
 }
 
-octave_stream *
+octave_stream
 octave_value::stream_value (void) const
 {
   return rep->stream_value ();
 }
 
 int
 octave_value::stream_number (void) const
 {
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -166,17 +166,17 @@ public:
   octave_value (char c);
   octave_value (const char *s);
   octave_value (const string& s);
   octave_value (const string_vector& s);
   octave_value (const charMatrix& chm, bool is_string = false);
   octave_value (double base, double limit, double inc);
   octave_value (const Range& r);
   octave_value (const Octave_map& m);
-  octave_value (octave_stream *s, int n);
+  octave_value (const octave_stream& s, int n);
   octave_value (octave_function *f);
   octave_value (const octave_value_list& m);
   octave_value (octave_value::magic_colon);
   octave_value (octave_value::all_va_args);
 
   octave_value (octave_value *new_rep);
 
   // Copy constructor.
@@ -308,16 +308,19 @@ public:
     { return rep->is_string (); }
 
   virtual bool is_range (void) const
     { return rep->is_range (); }
 
   virtual bool is_map (void) const
     { return rep->is_map (); }
 
+  virtual bool is_stream (void) const
+    { return rep->is_stream (); }
+
   virtual bool is_list (void) const
     { return rep->is_list (); }
 
   virtual bool is_magic_colon (void) const
     { return rep->is_magic_colon (); }
 
   virtual bool is_all_va_args (void) const
     { return rep->is_all_va_args (); }
@@ -417,17 +420,17 @@ public:
   virtual string string_value (void) const
     { return rep->string_value (); }
 
   virtual Range range_value (void) const
     { return rep->range_value (); }
 
   virtual Octave_map map_value (void) const;
 
-  virtual octave_stream *stream_value (void) const;
+  virtual octave_stream stream_value (void) const;
 
   virtual int stream_number (void) const;
 
   virtual octave_function *function_value (bool silent = false);
 
   virtual octave_value_list list_value (void) const;
 
   virtual bool bool_value (void) const
diff --git a/src/syscalls.cc b/src/syscalls.cc
--- a/src/syscalls.cc
+++ b/src/syscalls.cc
@@ -103,23 +103,23 @@ system-dependent error message.\n\
 
   retval(1) = string ();
   retval(0) = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 2)
     {
-      octave_stream *old_stream = octave_stream_list::lookup (args(0));
-      octave_stream *new_stream = octave_stream_list::lookup (args(1));
+      octave_stream old_stream = octave_stream_list::lookup (args(0));
+      octave_stream new_stream = octave_stream_list::lookup (args(1));
 
-      if (! error_state)
+      if (old_stream.is_valid () && new_stream.is_valid ())
 	{
-	  int i_old = old_stream->file_number ();
-	  int i_new = new_stream->file_number ();
+	  int i_old = old_stream.file_number ();
+	  int i_new = new_stream.file_number ();
 
 	  if (i_old >= 0 && i_new >= 0)
 	    {
 	      string msg;
 
 	      int status = octave_syscalls::dup2 (i_old, i_new, msg);
 
 	      retval(0) = static_cast<double> (status);
@@ -593,24 +593,21 @@ system-dependent error message.\n\
       string msg;
 
       int status = octave_syscalls::pipe (fid, msg);
 
       if (status < 0)
 	retval(2) = msg;
       else
 	{
-	  FILE *in_file = fdopen (fid[0], "r");
-	  FILE *out_file = fdopen (fid[1], "w");
+	  FILE *ifile = fdopen (fid[0], "r");
+	  FILE *ofile = fdopen (fid[1], "w");
 
-	  octave_istdiostream *is
-	    = new octave_istdiostream (string (), in_file);
-
-	  octave_ostdiostream *os
-	    = new octave_ostdiostream (string (), out_file);
+	  octave_stream is = octave_istdiostream::create (string (), ifile);
+	  octave_stream os = octave_ostdiostream::create (string (), ofile);
 
 	  octave_value_list file_ids;
 
 	  file_ids(1) = octave_stream_list::insert (os);
 	  file_ids(0) = octave_stream_list::insert (is);
 
 	  retval(1) = static_cast<double> (status);
           retval(0) = octave_value (file_ids);
