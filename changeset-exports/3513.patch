# HG changeset patch
# User jwe
# Date 949444360 0
#      Tue Feb 01 22:32:40 2000 +0000
# Node ID 6b8d14532d86785c99d72090e94ec9cb4ed9407f
# Parent  e72d846e6f60096552a5335466a0dba76c9f2bd9
[project @ 2000-02-01 22:32:39 by jwe]

diff --git a/liboctave/Array-idx.h b/liboctave/Array-idx.h
--- a/liboctave/Array-idx.h
+++ b/liboctave/Array-idx.h
@@ -31,24 +31,24 @@ Array<T>::clear_index (void)
 {
   delete [] idx;
   idx = 0;
   idx_count = 0;
 }
 
 template <class T>
 void
-Array<T>::set_index (const idx_vector& i)
+Array<T>::set_index (const idx_vector& idx_arg)
 {
   if (! idx)
     idx = new idx_vector [max_indices];
 
   if (idx_count < max_indices)
     {
-      idx[idx_count++] = i;
+      idx[idx_count++] = idx_arg;
     }
   else
     {
       (*current_liboctave_error_handler)
 	("invalid number of indices specified");
 
       clear_index ();
     }
diff --git a/liboctave/Array2-idx.h b/liboctave/Array2-idx.h
--- a/liboctave/Array2-idx.h
+++ b/liboctave/Array2-idx.h
@@ -38,111 +38,108 @@ Array2<T>::value (void)
       idx_vector *tmp = get_idx ();
       idx_vector idx_i = tmp[0];
       idx_vector idx_j = tmp[1];
 
       return index (idx_i, idx_j);
     }
   else if (n_idx == 1)
     {
-      idx_vector *tmp = get_idx ();
-      idx_vector idx = tmp[0];
-
-      return index (idx);
+      return index (idx[0]);
     }
   else
     (*current_liboctave_error_handler)
       ("invalid number of indices for matrix expression");
 
   clear_index ();
 
   return retval;
 }
 
 template <class T>
 Array2<T>
-Array2<T>::index (idx_vector& idx) const
+Array2<T>::index (idx_vector& idx_arg) const
 {
   Array2<T> retval;
 
   int nr = d1;
   int nc = d2;
 
-  int idx_orig_rows = idx.orig_rows ();
-  int idx_orig_columns = idx.orig_columns ();
+  int idx_orig_rows = idx_arg.orig_rows ();
+  int idx_orig_columns = idx_arg.orig_columns ();
 
   if (nr == 1 && nc == 1)
     {
-      Array<T> tmp = Array<T>::index (idx);
+      Array<T> tmp = Array<T>::index (idx_arg);
 
       int len = tmp.length ();
 
       if (len == 0)
 	retval = Array2<T> (0, 0);
       else
 	{
 	  if (liboctave_pcv_flag)
 	    retval = Array2<T> (tmp, len, 1);
 	  else
 	    retval = Array2<T> (tmp, 1, len);
 	}
     }
   else if (nr == 1 || nc == 1)
     {
-      int result_is_column_vector = (nc == 1 || idx.is_colon ());
+      int result_is_column_vector = (nc == 1 || idx_arg.is_colon ());
 
-      Array<T> tmp = Array<T>::index (idx);
+      Array<T> tmp = Array<T>::index (idx_arg);
 
       int len = tmp.length ();
 
       if (len == 0)
 	retval = Array2<T> (0, 0);
       else
 	{
 	  if (result_is_column_vector)
 	    retval = Array2<T> (tmp, len, 1);
 	  else
 	    retval = Array2<T> (tmp, 1, len);
 	}
     }
   else if (liboctave_dfi_flag
-	   || idx.is_colon ()
-	   || (idx.one_zero_only ()
+	   || idx_arg.is_colon ()
+	   || (idx_arg.one_zero_only ()
 	       && idx_orig_rows == nr
 	       && idx_orig_columns == nc))
     {
       // This code is only for indexing matrices.  The vector
       // cases are handled above.
 
-      idx.freeze (nr * nc, "matrix");
+      idx_arg.freeze (nr * nc, "matrix");
 
-      if (idx)
+      if (idx_arg)
 	{
 	  int result_nr = idx_orig_rows;
 	  int result_nc = idx_orig_columns;
 
-	  if (idx.is_colon ())
+	  if (idx_arg.is_colon ())
 	    {
 	      result_nr = nr * nc;
 	      result_nc = result_nr ? 1 : 0;
 	    }
-	  else if (idx.one_zero_only ())
+	  else if (idx_arg.one_zero_only ())
 	    {
-	      result_nr = idx.ones_count ();
+	      result_nr = idx_arg.ones_count ();
 	      result_nc = (result_nr > 0 ? 1 : 0);
 	    }
 
 	  retval.resize (result_nr, result_nc);
 
 	  int k = 0;
 	  for (int j = 0; j < result_nc; j++)
 	    {
 	      for (int i = 0; i < result_nr; i++)
 		{
-		  int ii = idx.elem (k++);
+		  int ii = idx_arg.elem (k++);
 		  int fr = ii % nr;
 		  int fc = (ii - fr) / nr;
 		  retval.elem (i, j) = elem (fr, fc);
 		}
 	    }
 	}
       // idx_vector::freeze() printed an error message for us.
     }
@@ -215,17 +212,17 @@ Array2<T>::index (idx_vector& idx_i, idx
 
   // idx_vector::freeze() printed an error message for us.
 
   return retval;
 }
 
 template <class T>
 void
-Array2<T>::maybe_delete_elements (idx_vector& idx_i)
+Array2<T>::maybe_delete_elements (idx_vector& idx_arg)
 {
   int nr = d1;
   int nc = d2;
 
   if (nr == 0 && nc == 0)
     return;
 
   int n;
@@ -236,56 +233,56 @@ Array2<T>::maybe_delete_elements (idx_ve
   else
     {
       (*current_liboctave_error_handler)
 	("A(idx) = []: expecting A to be row or column vector or scalar");
 
       return;
     }
 
-  if (idx_i.is_colon_equiv (n, 1))
+  if (idx_arg.is_colon_equiv (n, 1))
     {
       // Either A(:) = [] or A(idx) = [] with idx enumerating all
       // elements, so we delete all elements and return [](0x0).  To
       // preserve the orientation of the vector, you have to use
       // A(idx,:) = [] (delete rows) or A(:,idx) (delete columns).
 
       resize (0, 0);
       return;
     }
 
-  idx_i.sort (true);
+  idx_arg.sort (true);
 
-  int num_to_delete = idx_i.length (n);
+  int num_to_delete = idx_arg.length (n);
 
   if (num_to_delete != 0)
     {
       int new_n = n;
 
       int idx = 0;
 
       for (int i = 0; i < n; i++)
-	if (i == idx_i.elem (idx))
+	if (i == idx_arg.elem (idx))
 	  {
 	    idx++;
 	    new_n--;
 
 	    if (idx == num_to_delete)
 	      break;
 	  }
 
       if (new_n > 0)
 	{
 	  T *new_data = new T [new_n];
 
 	  int ii = 0;
 	  idx = 0;
 	  for (int i = 0; i < n; i++)
 	    {
-	      if (idx < num_to_delete && i == idx_i.elem (idx))
+	      if (idx < num_to_delete && i == idx_arg.elem (idx))
 		idx++;
 	      else
 		{
 		  if (nr == 1)
 		    new_data[ii] = elem (0, i);
 		  else
 		    new_data[ii] = elem (i, 0);
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,11 +1,11 @@
 2000-02-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
-	* Array-idx.h: Avoid shadowing warnings for idx.
+	* Array2-idx.h, Array-idx.h: Avoid shadowing warnings for idx.
 
 	* Quad.h: Use do_integrate as name of pure virtual function.
 
 	* base-de.h: Use tt instead of t as arg names.
 	Add method with tcrit arg.
 
 	* DAE.h, DAE.cc: Likewise, also xx for x.
 
