# HG changeset patch
# User Daniel J Sebald <daniel.sebald@ieee.org>
# Date 1506528066 18000
#      Wed Sep 27 11:01:06 2017 -0500
# Node ID 89167cc74260a2ee9e394e5af34827887b1f3928
# Parent  d2ef665c7c915d41b045ef7fdc3c3f46ac9be943
Reuse constructor code of delimited stream.

* oct-stream.cc (delimited_stream::delimited_stream): Call the first constructor
  directly from the second constructor rather than replicate code.

diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -1372,29 +1372,20 @@ namespace octave
     buf = new char[bufsize];
     eob = buf + bufsize;
     idx = eob;                    // refresh_buf shouldn't try to copy old data
     progress_marker = idx;
     refresh_buf ();               // load the first batch of data
   }
 
   // Used to create a stream from a strstream from data read from a dstr.
-  // FIXME: Find a more efficient approach.  Perhaps derived dstr
   delimited_stream::delimited_stream (std::istream& is,
                                       const delimited_stream& ds)
-    : bufsize (ds.bufsize), i_stream (is), longest (ds.longest),
-      delims (ds.delims),
-      flags (std::ios::failbit & ~std::ios::failbit) // can't cast 0
-  {
-    buf = new char[bufsize];
-    eob = buf + bufsize;
-    idx = eob;                    // refresh_buf shouldn't try to copy old data
-    progress_marker = idx;
-    refresh_buf ();               // load the first batch of data
-  }
+    : delimited_stream (is, ds.delims, ds.longest, ds.bufsize)
+  {}
 
   delimited_stream::~delimited_stream (void)
   {
     // Seek to the correct position in i_stream.
     if (! eof ())
       {
         i_stream.clear ();
         i_stream.seekg (buf_in_file);
