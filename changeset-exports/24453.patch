# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1513797010 -3600
#      Wed Dec 20 20:10:10 2017 +0100
# Node ID 4827cbef0949b2cd5bb39d6d7c588aaa8dd5ce05
# Parent  55ddb7a4cca20af3c6c0b5eb5aebc1e4e22edd9e
Change matrix multiplication order in xpow for compatibility (bug #52706).

* xpow.cc: change matrix multiplication order when a matrix
is raised to an integer power.  Remove static_cast<int> from comparisons.
Rename variable btmp to bint when appropriate for clarity.
Move static_cast<int> out of for loops and do just once when possible.
Use Octave coding conventions for cuddling parenthesis when indexing.

* xpow.cc (xisint): Make a templated version of function to apply
for both doubles and floats.

diff --git a/libinterp/corefcn/xpow.cc b/libinterp/corefcn/xpow.cc
--- a/libinterp/corefcn/xpow.cc
+++ b/libinterp/corefcn/xpow.cc
@@ -62,18 +62,19 @@ err_failed_diagonalization (void)
 }
 
 static void
 err_nonsquare_matrix (void)
 {
   error ("for x^A, A must be a square matrix.  Use .^ for elementwise power.");
 }
 
-static inline int
-xisint (double x)
+template <typename T>
+static inline bool
+xisint (T x)
 {
   return (octave::math::x_nint (x) == x
           && ((x >= 0 && x < std::numeric_limits<int>::max ())
               || (x <= 0 && x > std::numeric_limits<int>::min ())));
 }
 
 // Safer pow functions.
 //
@@ -203,57 +204,59 @@ xpow (const Matrix& a, double b)
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
     err_nonsquare_matrix ();
 
-  if (static_cast<int> (b) == b)
+  if (xisint (b))
     {
-      int btmp = static_cast<int> (b);
-      if (btmp == 0)
+      int bint = static_cast<int> (b);
+      if (bint == 0)
         {
           retval = DiagMatrix (nr, nr, 1.0);
         }
       else
         {
           // Too much copying?
           // FIXME: we shouldn't do this if the exponent is large...
 
           Matrix atmp;
-          if (btmp < 0)
+          if (bint < 0)
             {
-              btmp = -btmp;
+              bint = -bint;
 
               octave_idx_type info;
               double rcond = 0.0;
               MatrixType mattype (a);
 
               atmp = a.inverse (mattype, info, rcond, 1);
 
               if (info == -1)
                 warning ("inverse: matrix singular to machine precision, rcond = %g", rcond);
             }
           else
             atmp = a;
 
           Matrix result (atmp);
 
-          btmp--;
-
-          while (btmp > 0)
+          bint--;
+
+          while (bint > 0)
             {
-              if (btmp & 1)
-                result = result * atmp;
-
-              btmp >>= 1;
-
-              if (btmp > 0)
+              if (bint & 1)
+                // Use atmp * result instead of result * atmp
+                // for ML compatibility (bug #52706).
+                result = atmp * result;
+
+              bint >>= 1;
+
+              if (bint > 0)
                 atmp = atmp * atmp;
             }
 
           retval = result;
         }
     }
   else
     {
@@ -287,17 +290,17 @@ xpow (const DiagMatrix& a, double b)
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
     err_nonsquare_matrix ();
 
-  if (static_cast<int> (b) == b)
+  if (xisint (b))
     {
       DiagMatrix r (nr, nc);
       for (octave_idx_type i = 0; i < nc; i++)
         r.dgelem (i) = std::pow (a.dgelem (i), b);
       retval = r;
     }
   else
     {
@@ -309,19 +312,18 @@ xpow (const DiagMatrix& a, double b)
 
   return retval;
 }
 
 // -*- 5p -*-
 octave_value
 xpow (const PermMatrix& a, double b)
 {
-  int btmp = static_cast<int> (b);
-  if (btmp == b)
-    return a.power (btmp);
+  if (xisint (b))
+    return a.power (static_cast<int> (b));
   else
     return xpow (Matrix (a), b);
 }
 
 // -*- 6 -*-
 octave_value
 xpow (const Matrix& a, const Complex& b)
 {
@@ -463,57 +465,59 @@ xpow (const ComplexMatrix& a, double b)
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
     err_nonsquare_matrix ();
 
-  if (static_cast<int> (b) == b)
+  if (xisint (b))
     {
-      int btmp = static_cast<int> (b);
-      if (btmp == 0)
+      int bint = static_cast<int> (b);
+      if (bint == 0)
         {
           retval = DiagMatrix (nr, nr, 1.0);
         }
       else
         {
           // Too much copying?
           // FIXME: we shouldn't do this if the exponent is large...
 
           ComplexMatrix atmp;
-          if (btmp < 0)
+          if (bint < 0)
             {
-              btmp = -btmp;
+              bint = -bint;
 
               octave_idx_type info;
               double rcond = 0.0;
               MatrixType mattype (a);
 
               atmp = a.inverse (mattype, info, rcond, 1);
 
               if (info == -1)
                 warning ("inverse: matrix singular to machine precision, rcond = %g", rcond);
             }
           else
             atmp = a;
 
           ComplexMatrix result (atmp);
 
-          btmp--;
-
-          while (btmp > 0)
+          bint--;
+
+          while (bint > 0)
             {
-              if (btmp & 1)
-                result = result * atmp;
-
-              btmp >>= 1;
-
-              if (btmp > 0)
+              if (bint & 1)
+                // Use atmp * result instead of result * atmp
+                // for ML compatibility (bug #52706).
+                result = atmp * result;
+
+              bint >>= 1;
+
+              if (bint > 0)
                 atmp = atmp * atmp;
             }
 
           retval = result;
         }
     }
   else
     {
@@ -650,30 +654,30 @@ elem_xpow (double a, const Matrix& b)
     {
       Complex atmp (a);
       ComplexMatrix result (nr, nc);
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             octave_quit ();
-            result (i, j) = std::pow (atmp, b (i, j));
+            result(i, j) = std::pow (atmp, b(i, j));
           }
 
       retval = result;
     }
   else
     {
       Matrix result (nr, nc);
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             octave_quit ();
-            result (i, j) = std::pow (a, b (i, j));
+            result(i, j) = std::pow (a, b(i, j));
           }
 
       retval = result;
     }
 
   return retval;
 }
 
@@ -686,17 +690,17 @@ elem_xpow (double a, const ComplexMatrix
 
   ComplexMatrix result (nr, nc);
   Complex atmp (a);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         octave_quit ();
-        result (i, j) = std::pow (atmp, b (i, j));
+        result(i, j) = std::pow (atmp, b(i, j));
       }
 
   return result;
 }
 
 static inline bool
 same_sign (double a, double b)
 {
@@ -754,32 +758,32 @@ elem_xpow (const Matrix& a, double b)
     {
       ComplexMatrix result (nr, nc);
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             octave_quit ();
 
-            Complex atmp (a (i, j));
-
-            result (i, j) = std::pow (atmp, b);
+            Complex atmp (a(i, j));
+
+            result(i, j) = std::pow (atmp, b);
           }
 
       retval = result;
     }
   else
     {
       Matrix result (nr, nc);
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             octave_quit ();
-            result (i, j) = std::pow (a (i, j), b);
+            result(i, j) = std::pow (a(i, j), b);
           }
 
       retval = result;
     }
 
   return retval;
 }
 
@@ -793,56 +797,56 @@ elem_xpow (const Matrix& a, const Matrix
   octave_idx_type nc = a.cols ();
 
   octave_idx_type b_nr = b.rows ();
   octave_idx_type b_nc = b.cols ();
 
   if (nr != b_nr || nc != b_nc)
     octave::err_nonconformant ("operator .^", nr, nc, b_nr, b_nc);
 
-  int convert_to_complex = 0;
+  bool convert_to_complex = false;
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         octave_quit ();
-        double atmp = a (i, j);
-        double btmp = b (i, j);
-        if (atmp < 0.0 && static_cast<int> (btmp) != btmp)
+        double atmp = a(i, j);
+        double btmp = b(i, j);
+        if (atmp < 0.0 && ! xisint (btmp))
           {
-            convert_to_complex = 1;
+            convert_to_complex = true;
             goto done;
           }
       }
 
 done:
 
   if (convert_to_complex)
     {
       ComplexMatrix complex_result (nr, nc);
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             octave_quit ();
-            Complex atmp (a (i, j));
-            Complex btmp (b (i, j));
-            complex_result (i, j) = std::pow (atmp, btmp);
+            Complex atmp (a(i, j));
+            Complex btmp (b(i, j));
+            complex_result(i, j) = std::pow (atmp, btmp);
           }
 
       retval = complex_result;
     }
   else
     {
       Matrix result (nr, nc);
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             octave_quit ();
-            result (i, j) = std::pow (a (i, j), b (i, j));
+            result(i, j) = std::pow (a(i, j), b(i, j));
           }
 
       retval = result;
     }
 
   return retval;
 }
 
@@ -854,17 +858,17 @@ elem_xpow (const Matrix& a, const Comple
   octave_idx_type nc = a.cols ();
 
   ComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         octave_quit ();
-        result (i, j) = std::pow (Complex (a (i, j)), b);
+        result(i, j) = std::pow (Complex (a(i, j)), b);
       }
 
   return result;
 }
 
 // -*- 6 -*-
 octave_value
 elem_xpow (const Matrix& a, const ComplexMatrix& b)
@@ -879,17 +883,17 @@ elem_xpow (const Matrix& a, const Comple
     octave::err_nonconformant ("operator .^", nr, nc, b_nr, b_nc);
 
   ComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         octave_quit ();
-        result (i, j) = std::pow (Complex (a (i, j)), b (i, j));
+        result(i, j) = std::pow (Complex (a(i, j)), b(i, j));
       }
 
   return result;
 }
 
 // -*- 7 -*-
 octave_value
 elem_xpow (const Complex& a, const Matrix& b)
@@ -898,21 +902,21 @@ elem_xpow (const Complex& a, const Matri
   octave_idx_type nc = b.cols ();
 
   ComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         octave_quit ();
-        double btmp = b (i, j);
+        double btmp = b(i, j);
         if (xisint (btmp))
-          result (i, j) = std::pow (a, static_cast<int> (btmp));
+          result(i, j) = std::pow (a, static_cast<int> (btmp));
         else
-          result (i, j) = std::pow (a, btmp);
+          result(i, j) = std::pow (a, btmp);
       }
 
   return result;
 }
 
 // -*- 8 -*-
 octave_value
 elem_xpow (const Complex& a, const ComplexMatrix& b)
@@ -921,17 +925,17 @@ elem_xpow (const Complex& a, const Compl
   octave_idx_type nc = b.cols ();
 
   ComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         octave_quit ();
-        result (i, j) = std::pow (a, b (i, j));
+        result(i, j) = std::pow (a, b(i, j));
       }
 
   return result;
 }
 
 octave_value
 elem_xpow (const Complex& a, const Range& r)
 {
@@ -977,30 +981,31 @@ elem_xpow (const ComplexMatrix& a, doubl
 {
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   ComplexMatrix result (nr, nc);
 
   if (xisint (b))
     {
+      int bint = static_cast<int> (b);
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             octave_quit ();
-            result (i, j) = std::pow (a (i, j), static_cast<int> (b));
+            result(i, j) = std::pow (a(i, j), bint);
           }
     }
   else
     {
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             octave_quit ();
-            result (i, j) = std::pow (a (i, j), b);
+            result(i, j) = std::pow (a(i, j), b);
           }
     }
 
   return result;
 }
 
 // -*- 10 -*-
 octave_value
@@ -1016,21 +1021,21 @@ elem_xpow (const ComplexMatrix& a, const
     octave::err_nonconformant ("operator .^", nr, nc, b_nr, b_nc);
 
   ComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         octave_quit ();
-        double btmp = b (i, j);
+        double btmp = b(i, j);
         if (xisint (btmp))
-          result (i, j) = std::pow (a (i, j), static_cast<int> (btmp));
+          result(i, j) = std::pow (a(i, j), static_cast<int> (btmp));
         else
-          result (i, j) = std::pow (a (i, j), btmp);
+          result(i, j) = std::pow (a(i, j), btmp);
       }
 
   return result;
 }
 
 // -*- 11 -*-
 octave_value
 elem_xpow (const ComplexMatrix& a, const Complex& b)
@@ -1039,17 +1044,17 @@ elem_xpow (const ComplexMatrix& a, const
   octave_idx_type nc = a.cols ();
 
   ComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         octave_quit ();
-        result (i, j) = std::pow (a (i, j), b);
+        result(i, j) = std::pow (a(i, j), b);
       }
 
   return result;
 }
 
 // -*- 12 -*-
 octave_value
 elem_xpow (const ComplexMatrix& a, const ComplexMatrix& b)
@@ -1064,17 +1069,17 @@ elem_xpow (const ComplexMatrix& a, const
     octave::err_nonconformant ("operator .^", nr, nc, b_nr, b_nc);
 
   ComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         octave_quit ();
-        result (i, j) = std::pow (a (i, j), b (i, j));
+        result(i, j) = std::pow (a(i, j), b(i, j));
       }
 
   return result;
 }
 
 // Safer pow functions that work elementwise for N-D arrays.
 //
 //       op2 \ op1:   s   nd  cs   cnd
@@ -1122,17 +1127,17 @@ elem_xpow (double a, const NDArray& b)
       retval = result;
     }
   else
     {
       NDArray result (b.dims ());
       for (octave_idx_type i = 0; i < b.numel (); i++)
         {
           octave_quit ();
-          result (i) = std::pow (a, b(i));
+          result(i) = std::pow (a, b(i));
         }
 
       retval = result;
     }
 
   return retval;
 }
 
@@ -1161,19 +1166,17 @@ elem_xpow (const NDArray& a, double b)
     {
       if (a.any_element_is_negative ())
         {
           ComplexNDArray result (a.dims ());
 
           for (octave_idx_type i = 0; i < a.numel (); i++)
             {
               octave_quit ();
-
-              Complex atmp (a (i));
-
+              Complex atmp (a(i));
               result(i) = std::pow (atmp, b);
             }
 
           retval = result;
         }
       else
         {
           NDArray result (a.dims ());
@@ -1230,17 +1233,17 @@ elem_xpow (const NDArray& a, const NDArr
   dim_vector a_dims = a.dims ();
   dim_vector b_dims = b.dims ();
 
   if (a_dims != b_dims)
     {
       if (! is_valid_bsxfun ("operator .^", a_dims, b_dims))
         octave::err_nonconformant ("operator .^", a_dims, b_dims);
 
-      //Potentially complex results
+      // Potentially complex results
       NDArray xa = octave_value_extract<NDArray> (a);
       NDArray xb = octave_value_extract<NDArray> (b);
       if (! xb.all_integers () && xa.any_element_is_negative ())
         return octave_value (bsxfun_pow (ComplexNDArray (xa), xb));
       else
         return octave_value (bsxfun_pow (xa, xb));
     }
 
@@ -1248,17 +1251,17 @@ elem_xpow (const NDArray& a, const NDArr
 
   bool convert_to_complex = false;
 
   for (octave_idx_type i = 0; i < len; i++)
     {
       octave_quit ();
       double atmp = a(i);
       double btmp = b(i);
-      if (atmp < 0.0 && static_cast<int> (btmp) != btmp)
+      if (atmp < 0.0 && ! xisint (btmp))
         {
           convert_to_complex = true;
           goto done;
         }
     }
 
 done:
 
@@ -1369,27 +1372,28 @@ elem_xpow (const Complex& a, const Compl
 // -*- 9 -*-
 octave_value
 elem_xpow (const ComplexNDArray& a, double b)
 {
   ComplexNDArray result (a.dims ());
 
   if (xisint (b))
     {
-      if (b == -1)
+      int bint = static_cast<int> (b);
+      if (bint == -1)
         {
           for (octave_idx_type i = 0; i < a.numel (); i++)
             result.xelem (i) = 1.0 / a(i);
         }
       else
         {
           for (octave_idx_type i = 0; i < a.numel (); i++)
             {
               octave_quit ();
-              result(i) = std::pow (a(i), static_cast<int> (b));
+              result(i) = std::pow (a(i), bint);
             }
         }
     }
   else
     {
       for (octave_idx_type i = 0; i < a.numel (); i++)
         {
           octave_quit ();
@@ -1466,24 +1470,16 @@ elem_xpow (const ComplexNDArray& a, cons
     {
       octave_quit ();
       result(i) = std::pow (a(i), b(i));
     }
 
   return result;
 }
 
-static inline int
-xisint (float x)
-{
-  return (octave::math::x_nint (x) == x
-          && ((x >= 0 && x < std::numeric_limits<int>::max ())
-              || (x <= 0 && x > std::numeric_limits<int>::min ())));
-}
-
 // Safer pow functions.
 //
 //       op2 \ op1:   s   m   cs   cm
 //            +--   +---+---+----+----+
 //   scalar   |     | 1 | 5 |  7 | 11 |
 //                  +---+---+----+----+
 //   matrix         | 2 | * |  8 |  * |
 //                  +---+---+----+----+
@@ -1608,57 +1604,59 @@ xpow (const FloatMatrix& a, float b)
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
     err_nonsquare_matrix ();
 
-  if (static_cast<int> (b) == b)
+  if (xisint (b))
     {
-      int btmp = static_cast<int> (b);
-      if (btmp == 0)
+      int bint = static_cast<int> (b);
+      if (bint == 0)
         {
-          retval = FloatDiagMatrix (nr, nr, 1.0);
+          retval = FloatDiagMatrix (nr, nr, 1.0f);
         }
       else
         {
           // Too much copying?
           // FIXME: we shouldn't do this if the exponent is large...
 
           FloatMatrix atmp;
-          if (btmp < 0)
+          if (bint < 0)
             {
-              btmp = -btmp;
+              bint = -bint;
 
               octave_idx_type info;
               float rcond = 0.0;
               MatrixType mattype (a);
 
               atmp = a.inverse (mattype, info, rcond, 1);
 
               if (info == -1)
                 warning ("inverse: matrix singular to machine precision, rcond = %g", rcond);
             }
           else
             atmp = a;
 
           FloatMatrix result (atmp);
 
-          btmp--;
-
-          while (btmp > 0)
+          bint--;
+
+          while (bint > 0)
             {
-              if (btmp & 1)
-                result = result * atmp;
-
-              btmp >>= 1;
-
-              if (btmp > 0)
+              if (bint & 1)
+                // Use atmp * result instead of result * atmp
+                // for ML compatibility (bug #52706).
+                result = atmp * result;
+
+              bint >>= 1;
+
+              if (bint > 0)
                 atmp = atmp * atmp;
             }
 
           retval = result;
         }
     }
   else
     {
@@ -1692,29 +1690,28 @@ xpow (const FloatDiagMatrix& a, float b)
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
     err_nonsquare_matrix ();
 
-  if (static_cast<int> (b) == b)
+  if (xisint (b))
     {
       FloatDiagMatrix r (nr, nc);
       for (octave_idx_type i = 0; i < nc; i++)
         r.dgelem (i) = std::pow (a.dgelem (i), b);
       retval = r;
     }
   else
     {
       FloatComplexDiagMatrix r (nr, nc);
       for (octave_idx_type i = 0; i < nc; i++)
-        r.dgelem (i) = std::pow (static_cast<FloatComplex> (a.dgelem (i)),
-                                                            b);
+        r.dgelem (i) = std::pow (static_cast<FloatComplex> (a.dgelem (i)), b);
       retval = r;
     }
 
   return retval;
 }
 
 // -*- 6 -*-
 octave_value
@@ -1858,57 +1855,59 @@ xpow (const FloatComplexMatrix& a, float
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   if (nr == 0 || nc == 0 || nr != nc)
     err_nonsquare_matrix ();
 
-  if (static_cast<int> (b) == b)
+  if (xisint (b))
     {
-      int btmp = static_cast<int> (b);
-      if (btmp == 0)
+      int bint = static_cast<int> (b);
+      if (bint == 0)
         {
           retval = FloatDiagMatrix (nr, nr, 1.0);
         }
       else
         {
           // Too much copying?
           // FIXME: we shouldn't do this if the exponent is large...
 
           FloatComplexMatrix atmp;
-          if (btmp < 0)
+          if (bint < 0)
             {
-              btmp = -btmp;
+              bint = -bint;
 
               octave_idx_type info;
               float rcond = 0.0;
               MatrixType mattype (a);
 
               atmp = a.inverse (mattype, info, rcond, 1);
 
               if (info == -1)
                 warning ("inverse: matrix singular to machine precision, rcond = %g", rcond);
             }
           else
             atmp = a;
 
           FloatComplexMatrix result (atmp);
 
-          btmp--;
-
-          while (btmp > 0)
+          bint--;
+
+          while (bint > 0)
             {
-              if (btmp & 1)
-                result = result * atmp;
-
-              btmp >>= 1;
-
-              if (btmp > 0)
+              if (bint & 1)
+                // Use atmp * result instead of result * atmp
+                // for ML compatibility (bug #52706).
+                result = atmp * result;
+
+              bint >>= 1;
+
+              if (bint > 0)
                 atmp = atmp * atmp;
             }
 
           retval = result;
         }
     }
   else
     {
@@ -2045,30 +2044,30 @@ elem_xpow (float a, const FloatMatrix& b
     {
       FloatComplex atmp (a);
       FloatComplexMatrix result (nr, nc);
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             octave_quit ();
-            result (i, j) = std::pow (atmp, b (i, j));
+            result(i, j) = std::pow (atmp, b(i, j));
           }
 
       retval = result;
     }
   else
     {
       FloatMatrix result (nr, nc);
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             octave_quit ();
-            result (i, j) = std::pow (a, b (i, j));
+            result(i, j) = std::pow (a, b(i, j));
           }
 
       retval = result;
     }
 
   return retval;
 }
 
@@ -2081,17 +2080,17 @@ elem_xpow (float a, const FloatComplexMa
 
   FloatComplexMatrix result (nr, nc);
   FloatComplex atmp (a);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         octave_quit ();
-        result (i, j) = std::pow (atmp, b (i, j));
+        result(i, j) = std::pow (atmp, b(i, j));
       }
 
   return result;
 }
 
 // -*- 3 -*-
 octave_value
 elem_xpow (const FloatMatrix& a, float b)
@@ -2105,32 +2104,32 @@ elem_xpow (const FloatMatrix& a, float b
     {
       FloatComplexMatrix result (nr, nc);
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             octave_quit ();
 
-            FloatComplex atmp (a (i, j));
-
-            result (i, j) = std::pow (atmp, b);
+            FloatComplex atmp (a(i, j));
+
+            result(i, j) = std::pow (atmp, b);
           }
 
       retval = result;
     }
   else
     {
       FloatMatrix result (nr, nc);
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             octave_quit ();
-            result (i, j) = std::pow (a (i, j), b);
+            result(i, j) = std::pow (a(i, j), b);
           }
 
       retval = result;
     }
 
   return retval;
 }
 
@@ -2144,56 +2143,56 @@ elem_xpow (const FloatMatrix& a, const F
   octave_idx_type nc = a.cols ();
 
   octave_idx_type b_nr = b.rows ();
   octave_idx_type b_nc = b.cols ();
 
   if (nr != b_nr || nc != b_nc)
     octave::err_nonconformant ("operator .^", nr, nc, b_nr, b_nc);
 
-  int convert_to_complex = 0;
+  bool convert_to_complex = false;
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         octave_quit ();
-        float atmp = a (i, j);
-        float btmp = b (i, j);
-        if (atmp < 0.0 && static_cast<int> (btmp) != btmp)
+        float atmp = a(i, j);
+        float btmp = b(i, j);
+        if (atmp < 0.0 && ! xisint (btmp))
           {
-            convert_to_complex = 1;
+            convert_to_complex = true;
             goto done;
           }
       }
 
 done:
 
   if (convert_to_complex)
     {
       FloatComplexMatrix complex_result (nr, nc);
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             octave_quit ();
-            FloatComplex atmp (a (i, j));
-            FloatComplex btmp (b (i, j));
-            complex_result (i, j) = std::pow (atmp, btmp);
+            FloatComplex atmp (a(i, j));
+            FloatComplex btmp (b(i, j));
+            complex_result(i, j) = std::pow (atmp, btmp);
           }
 
       retval = complex_result;
     }
   else
     {
       FloatMatrix result (nr, nc);
 
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             octave_quit ();
-            result (i, j) = std::pow (a (i, j), b (i, j));
+            result(i, j) = std::pow (a(i, j), b(i, j));
           }
 
       retval = result;
     }
 
   return retval;
 }
 
@@ -2205,17 +2204,17 @@ elem_xpow (const FloatMatrix& a, const F
   octave_idx_type nc = a.cols ();
 
   FloatComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         octave_quit ();
-        result (i, j) = std::pow (FloatComplex (a (i, j)), b);
+        result(i, j) = std::pow (FloatComplex (a(i, j)), b);
       }
 
   return result;
 }
 
 // -*- 6 -*-
 octave_value
 elem_xpow (const FloatMatrix& a, const FloatComplexMatrix& b)
@@ -2230,17 +2229,17 @@ elem_xpow (const FloatMatrix& a, const F
     octave::err_nonconformant ("operator .^", nr, nc, b_nr, b_nc);
 
   FloatComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         octave_quit ();
-        result (i, j) = std::pow (FloatComplex (a (i, j)), b (i, j));
+        result(i, j) = std::pow (FloatComplex (a(i, j)), b(i, j));
       }
 
   return result;
 }
 
 // -*- 7 -*-
 octave_value
 elem_xpow (const FloatComplex& a, const FloatMatrix& b)
@@ -2249,21 +2248,21 @@ elem_xpow (const FloatComplex& a, const 
   octave_idx_type nc = b.cols ();
 
   FloatComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         octave_quit ();
-        float btmp = b (i, j);
+        float btmp = b(i, j);
         if (xisint (btmp))
-          result (i, j) = std::pow (a, static_cast<int> (btmp));
+          result(i, j) = std::pow (a, static_cast<int> (btmp));
         else
-          result (i, j) = std::pow (a, btmp);
+          result(i, j) = std::pow (a, btmp);
       }
 
   return result;
 }
 
 // -*- 8 -*-
 octave_value
 elem_xpow (const FloatComplex& a, const FloatComplexMatrix& b)
@@ -2272,47 +2271,48 @@ elem_xpow (const FloatComplex& a, const 
   octave_idx_type nc = b.cols ();
 
   FloatComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         octave_quit ();
-        result (i, j) = std::pow (a, b (i, j));
+        result(i, j) = std::pow (a, b(i, j));
       }
 
   return result;
 }
 
 // -*- 9 -*-
 octave_value
 elem_xpow (const FloatComplexMatrix& a, float b)
 {
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
 
   FloatComplexMatrix result (nr, nc);
 
   if (xisint (b))
     {
+      int bint = static_cast<int> (b);
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             octave_quit ();
-            result (i, j) = std::pow (a (i, j), static_cast<int> (b));
+            result(i, j) = std::pow (a(i, j), b);
           }
     }
   else
     {
       for (octave_idx_type j = 0; j < nc; j++)
         for (octave_idx_type i = 0; i < nr; i++)
           {
             octave_quit ();
-            result (i, j) = std::pow (a (i, j), b);
+            result(i, j) = std::pow (a(i, j), b);
           }
     }
 
   return result;
 }
 
 // -*- 10 -*-
 octave_value
@@ -2328,21 +2328,21 @@ elem_xpow (const FloatComplexMatrix& a, 
     octave::err_nonconformant ("operator .^", nr, nc, b_nr, b_nc);
 
   FloatComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         octave_quit ();
-        float btmp = b (i, j);
+        float btmp = b(i, j);
         if (xisint (btmp))
-          result (i, j) = std::pow (a (i, j), static_cast<int> (btmp));
+          result(i, j) = std::pow (a(i, j), static_cast<int> (btmp));
         else
-          result (i, j) = std::pow (a (i, j), btmp);
+          result(i, j) = std::pow (a(i, j), btmp);
       }
 
   return result;
 }
 
 // -*- 11 -*-
 octave_value
 elem_xpow (const FloatComplexMatrix& a, const FloatComplex& b)
@@ -2351,17 +2351,17 @@ elem_xpow (const FloatComplexMatrix& a, 
   octave_idx_type nc = a.cols ();
 
   FloatComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         octave_quit ();
-        result (i, j) = std::pow (a (i, j), b);
+        result(i, j) = std::pow (a(i, j), b);
       }
 
   return result;
 }
 
 // -*- 12 -*-
 octave_value
 elem_xpow (const FloatComplexMatrix& a, const FloatComplexMatrix& b)
@@ -2376,17 +2376,17 @@ elem_xpow (const FloatComplexMatrix& a, 
     octave::err_nonconformant ("operator .^", nr, nc, b_nr, b_nc);
 
   FloatComplexMatrix result (nr, nc);
 
   for (octave_idx_type j = 0; j < nc; j++)
     for (octave_idx_type i = 0; i < nr; i++)
       {
         octave_quit ();
-        result (i, j) = std::pow (a (i, j), b (i, j));
+        result(i, j) = std::pow (a(i, j), b(i, j));
       }
 
   return result;
 }
 
 // Safer pow functions that work elementwise for N-D arrays.
 //
 //       op2 \ op1:   s   nd  cs   cnd
@@ -2434,17 +2434,17 @@ elem_xpow (float a, const FloatNDArray& 
       retval = result;
     }
   else
     {
       FloatNDArray result (b.dims ());
       for (octave_idx_type i = 0; i < b.numel (); i++)
         {
           octave_quit ();
-          result (i) = std::pow (a, b(i));
+          result(i) = std::pow (a, b(i));
         }
 
       retval = result;
     }
 
   return retval;
 }
 
@@ -2474,17 +2474,17 @@ elem_xpow (const FloatNDArray& a, float 
       if (a.any_element_is_negative ())
         {
           FloatComplexNDArray result (a.dims ());
 
           for (octave_idx_type i = 0; i < a.numel (); i++)
             {
               octave_quit ();
 
-              FloatComplex atmp (a (i));
+              FloatComplex atmp (a(i));
 
               result(i) = std::pow (atmp, b);
             }
 
           retval = result;
         }
       else
         {
@@ -2542,17 +2542,17 @@ elem_xpow (const FloatNDArray& a, const 
   dim_vector a_dims = a.dims ();
   dim_vector b_dims = b.dims ();
 
   if (a_dims != b_dims)
     {
       if (! is_valid_bsxfun ("operator .^", a_dims, b_dims))
         octave::err_nonconformant ("operator .^", a_dims, b_dims);
 
-      //Potentially complex results
+      // Potentially complex results
       FloatNDArray xa = octave_value_extract<FloatNDArray> (a);
       FloatNDArray xb = octave_value_extract<FloatNDArray> (b);
       if (! xb.all_integers () && xa.any_element_is_negative ())
         return octave_value (bsxfun_pow (FloatComplexNDArray (xa), xb));
       else
         return octave_value (bsxfun_pow (xa, xb));
     }
 
@@ -2560,17 +2560,17 @@ elem_xpow (const FloatNDArray& a, const 
 
   bool convert_to_complex = false;
 
   for (octave_idx_type i = 0; i < len; i++)
     {
       octave_quit ();
       float atmp = a(i);
       float btmp = b(i);
-      if (atmp < 0.0 && static_cast<int> (btmp) != btmp)
+      if (atmp < 0.0 && ! xisint (btmp))
         {
           convert_to_complex = true;
           goto done;
         }
     }
 
 done:
 
@@ -2681,27 +2681,28 @@ elem_xpow (const FloatComplex& a, const 
 // -*- 9 -*-
 octave_value
 elem_xpow (const FloatComplexNDArray& a, float b)
 {
   FloatComplexNDArray result (a.dims ());
 
   if (xisint (b))
     {
-      if (b == -1)
+      int bint = static_cast<int> (b);
+      if (bint == -1)
         {
           for (octave_idx_type i = 0; i < a.numel (); i++)
             result.xelem (i) = 1.0f / a(i);
         }
       else
         {
           for (octave_idx_type i = 0; i < a.numel (); i++)
             {
               octave_quit ();
-              result(i) = std::pow (a(i), static_cast<int> (b));
+              result(i) = std::pow (a(i), bint);
             }
         }
     }
   else
     {
       for (octave_idx_type i = 0; i < a.numel (); i++)
         {
           octave_quit ();
