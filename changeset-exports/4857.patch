# HG changeset patch
# User jwe
# Date 1081394869 0
#      Thu Apr 08 03:27:49 2004 +0000
# Node ID 9794d526639ca02c1d42cef248db438beed9feb5
# Parent  c89b9abf2ffd7fa7854c8afc630effc295c5dd28
[project @ 2004-04-08 03:27:49 by jwe]

diff --git a/scripts/statistics/distributions/beta_rnd.m b/scripts/statistics/distributions/beta_rnd.m
--- a/scripts/statistics/distributions/beta_rnd.m
+++ b/scripts/statistics/distributions/beta_rnd.m
@@ -47,31 +47,31 @@ function rnd = beta_rnd (a, b, r, c)
     if (! (isscalar (r) && (r > 0) && (r == round (r))))
       error ("beta_rnd: r must be a positive integer");
     endif
     if (! (isscalar (c) && (c > 0) && (c == round (c))))
       error ("beta_rnd: c must be a positive integer");
     endif
     sz = [r, c];
 
-    if (any (size (a) != 1) && ((length (size (a)) != length (sz)) ||
-				any (size (a) != sz)))
+    if (any (size (a) != 1)
+	&& (length (size (a)) != length (sz) || any (size (a) != sz)))
       error ("beta_rnd: a and b must be scalar or of size [r,c]");
     endif
   elseif (nargin == 3)
     if (isscalar (r) && (r > 0))
       sz = [r, r];
     elseif (isvector(r) && all (r > 0))
       sz = r(:)';
     else
       error ("beta_rnd: r must be a postive integer or vector");
     endif
 
-    if (any (size (a) != 1) && ((length (size (a)) != length (sz)) ||
-				any (size (a) != sz)))
+    if (any (size (a) != 1)
+	&& (length (size (a)) != length (sz) || any (size (a) != sz)))
       error ("beta_rnd: a and b must be scalar or of size sz");
     endif
   elseif (nargin == 2)
     sz = size(a);
   else
     usage ("beta_rnd (a, b, r, c)");
   endif
 
diff --git a/scripts/statistics/distributions/binomial_rnd.m b/scripts/statistics/distributions/binomial_rnd.m
--- a/scripts/statistics/distributions/binomial_rnd.m
+++ b/scripts/statistics/distributions/binomial_rnd.m
@@ -47,31 +47,31 @@ function rnd = binomial_rnd (n, p, r, c)
     if (! (isscalar (r) && (r > 0) && (r == round (r))))
       error ("binomial_rnd: r must be a positive integer");
     endif
     if (! (isscalar (c) && (c > 0) && (c == round (c))))
       error ("binomial_rnd: c must be a positive integer");
     endif
     sz = [r, c];
 
-    if (any (size (n) != 1) && ((length (size (n)) != length (sz)) ||
-				any (size (n) != sz)))
+    if (any (size (n) != 1)
+	&& (length (size (n)) != length (sz) ||	any (size (n) != sz)))
       error ("binomial_rnd: n and must be scalar or of size [r, c]");
     endif
   elseif (nargin == 3)
     if (isscalar (r) && (r > 0))
       sz = [r, r];
     elseif (isvector(r) && all (r > 0))
       sz = r(:)';
     else
       error ("binomial_rnd: r must be a postive integer or vector");
     endif
 
-    if (any (size (n) != 1) && ((length (size (n)) != length (sz)) ||
-				any (size (n) != sz)))
+    if (any (size (n) != 1)
+	&& (length (size (n)) != length (sz) || any (size (n) != sz)))
       error ("binomial_rnd: n and must be scalar or of size sz");
     endif
   elseif (nargin == 2)
     sz = size(n);
   else
     usage ("binomial_rnd (n, p, r, c)");
   endif
 
diff --git a/scripts/statistics/distributions/cauchy_rnd.m b/scripts/statistics/distributions/cauchy_rnd.m
--- a/scripts/statistics/distributions/cauchy_rnd.m
+++ b/scripts/statistics/distributions/cauchy_rnd.m
@@ -46,31 +46,31 @@ function rnd = cauchy_rnd (l, scale, r, 
     if (! (isscalar (r) && (r > 0) && (r == round (r))))
       error ("cauchy_rnd: r must be a positive integer");
     endif
     if (! (isscalar (c) && (c > 0) && (c == round (c))))
       error ("cauchy_rnd: c must be a positive integer");
     endif
     sz = [r, c];
 
-    if (any (size (l) != 1) && ((length (size (l)) != length (sz)) ||
-				any (size (l) != sz)))
+    if (any (size (l) != 1)
+	&& (length (size (l)) != length (sz) || any (size (l) != sz)))
       error ("cauchy_rnd: lambda and sigma must be scalar or of size [r, c]");
     endif
   elseif (nargin == 3)
     if (isscalar (r) && (r > 0))
       sz = [r, r];
     elseif (isvector(r) && all (r > 0))
       sz = r(:)';
     else
       error ("cauchy_rnd: r must be a postive integer or vector");
     endif
 
-    if (any (size (l) != 1) && ((length (size (l)) != length (sz)) ||
-				any (size (l) != sz)))
+    if (any (size (l) != 1)
+	&& (length (size (l)) != length (sz) ||	any (size (l) != sz)))
       error ("cauchy_rnd: lambda and sigma must be scalar or of size sz");
     endif
   elseif (nargin == 2)
     sz = size(l);
   else
     usage ("cauchy_rnd (lambda, sigma, r, c)");
   endif
 
diff --git a/scripts/statistics/distributions/chisquare_rnd.m b/scripts/statistics/distributions/chisquare_rnd.m
--- a/scripts/statistics/distributions/chisquare_rnd.m
+++ b/scripts/statistics/distributions/chisquare_rnd.m
@@ -37,31 +37,31 @@ function rnd = chisquare_rnd (n, r, c)
     if (! (isscalar (r) && (r > 0) && (r == round (r))))
       error ("chisquare_rnd: r must be a positive integer");
     endif
     if (! (isscalar (c) && (c > 0) && (c == round (c))))
       error ("chisquare_rnd: c must be a positive integer");
     endif
     sz = [r, c];
 
-    if (any (size (n) != 1) && ((length (size (n)) != length (sz)) ||
-				any (size (n) != sz)))
+    if (any (size (n) != 1)
+	&& (length (size (n)) != length (sz) ||	any (size (n) != sz)))
       error ("chisquare_rnd: n must be scalar or of size [r, c]");
     endif
   elseif (nargin == 2)
     if (isscalar (r) && (r > 0))
       sz = [r, r];
     elseif (isvector(r) && all (r > 0))
       sz = r(:)';
     else
       error ("chisquare_rnd: r must be a postive integer or vector");
     endif
 
-    if (any (size (n) != 1) && ((length (size (n)) != length (sz)) ||
-				any (size (n) != sz)))
+    if (any (size (n) != 1)
+	&& (length (size (n)) != length (sz) || any (size (n) != sz)))
       error ("chisquare_rnd: n must be scalar or of size sz");
     endif
   elseif (nargin == 1)
     sz = size(n);
   else
     usage ("chisquare_rnd (n, r, c)");
   endif
 
diff --git a/scripts/statistics/distributions/gamma_rnd.m b/scripts/statistics/distributions/gamma_rnd.m
--- a/scripts/statistics/distributions/gamma_rnd.m
+++ b/scripts/statistics/distributions/gamma_rnd.m
@@ -47,31 +47,31 @@ function rnd = gamma_rnd (a, b, r, c)
     if (! (isscalar (r) && (r > 0) && (r == round (r))))
       error ("gamma_rnd: r must be a positive integer");
     endif
     if (! (isscalar (c) && (c > 0) && (c == round (c))))
       error ("gamma_rnd: c must be a positive integer");
     endif
     sz = [r, c];
 
-    if (any (size (a) != 1) && ((length (size (a)) != length (sz)) ||
-				any (size (a) != sz)))
+    if (any (size (a) != 1)
+	&& (length (size (a)) != length (sz) || any (size (a) != sz)))
       error ("gamma_rnd: a and b must be scalar or of size [r, c]");
     endif
   elseif (nargin == 3)
     if (isscalar (r) && (r > 0))
       sz = [r, r];
     elseif (isvector(r) && all (r > 0))
       sz = r(:)';
     else
       error ("uniform_rnd: r must be a postive integer or vector");
     endif
 
-    if (any (size (a) != 1) && ((length (size (a)) != length (sz)) ||
-				any (size (a) != sz)))
+    if (any (size (a) != 1)
+	&& (length (size (a)) != length (sz) || any (size (a) != sz)))
       error ("gamma_rnd: a and b must be scalar or of size sz");
     endif
   elseif (nargin == 2)
     sz = size(a);
   else
     usage ("gamma_rnd (a, b, r, c)");
   endif
 
diff --git a/scripts/statistics/distributions/normal_rnd.m b/scripts/statistics/distributions/normal_rnd.m
--- a/scripts/statistics/distributions/normal_rnd.m
+++ b/scripts/statistics/distributions/normal_rnd.m
@@ -47,31 +47,31 @@ function rnd = normal_rnd (m, v, r, c)
     if (! (isscalar (r) && (r > 0) && (r == round (r))))
       error ("normal_rnd: r must be a positive integer");
     endif
     if (! (isscalar (c) && (c > 0) && (c == round (c))))
       error ("normal_rnd: c must be a positive integer");
     endif
     sz = [r, c];
 
-    if (any (size (m) != 1) && ((length (size (m)) != length (sz)) ||
-				any (size (m) != sz)))
+    if (any (size (m) != 1)
+	&& (length (size (m)) != length (sz) || any (size (m) != sz)))
       error ("normal_rnd: m and v must be scalar or of size [r, c]");
     endif
   elseif (nargin == 3)
     if (isscalar (r) && (r > 0))
       sz = [r, r];
     elseif (isvector(r) && all (r > 0))
       sz = r(:)';
     else
       error ("normal_rnd: r must be a postive integer or vector");
     endif
 
-    if (any (size (m) != 1) && ((length (size (m)) != length (sz)) ||
-				any (size (m) != sz)))
+    if (any (size (m) != 1)
+	&& (length (size (m)) != length (sz) || any (size (m) != sz)))
       error ("normal_rnd: m and v must be scalar or of size sz");
     endif
   elseif (nargin == 2)
     sz = size(m);
   else
     usage ("normal_rnd (m, v, r, c)");
   endif
 
diff --git a/scripts/statistics/distributions/uniform_rnd.m b/scripts/statistics/distributions/uniform_rnd.m
--- a/scripts/statistics/distributions/uniform_rnd.m
+++ b/scripts/statistics/distributions/uniform_rnd.m
@@ -46,31 +46,31 @@ function rnd = uniform_rnd (a, b, r, c)
     if (! (isscalar (r) && (r > 0) && (r == round (r))))
       error ("uniform_rnd: r must be a positive integer");
     endif
     if (! (isscalar (c) && (c > 0) && (c == round (c))))
       error ("uniform_rnd: c must be a positive integer");
     endif
     sz = [r, c];
 
-    if (any (size (a) != 1) && ((length (size (a)) != length (sz)) ||
-				any (size (a) != sz)))
+    if (any (size (a) != 1)
+	&& (length (size (a)) != length (sz) || any (size (a) != sz)))
       error ("uniform_rnd: a and b must be scalar or of size [r, c]");
     endif
   elseif (nargin == 3)
     if (isscalar (r) && (r > 0))
       sz = [r, r];
     elseif (isvector(r) && all (r > 0))
       sz = r(:)';
     else
       error ("uniform_rnd: r must be a postive integer or vector");
     endif
 
-    if (any (size (a) != 1) && ((length (size (a)) != length (sz)) ||
-				any (size (a) != sz)))
+    if (any (size (a) != 1)
+	&& (length (size (a)) != length (sz) || any (size (a) != sz)))
       error ("uniform_rnd: a and b must be scalar or of size sz");
     endif
   elseif (nargin == 2)
     sz = size(a);
   else
     usage ("uniform_rnd (a, b, r, c)");
   endif
 
