# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1279522743 14400
#      Mon Jul 19 02:59:03 2010 -0400
# Node ID d479134f59deb8e69cd1ac0a95ff5d243b995754
# Parent  eaf7c8ab3b0c7bd7e5eb0d62a9533fe2895b6894
fltk_backend.cc: use enum for plot_window::gui_mode instead of int

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-07-19  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/fltk_backend.cc (plot_window::gui_mode):
+	Use enum instead of int.  Change all uses.
+
 2010-07-18  Kai Habel <kai.habel@gmx.de>
 
 	* DLD-FUNCTIONS/fltk_backend.cc: Add mode for mouse rotation.
 	(view2status): new function
 	* src/graphics.cc: Remove limitations for zooming and translation.
 	(axes::properties::rotate_view): new function
 	
 2010-07-17  Rik <octave@nomad.inbox5.com>
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -297,17 +297,17 @@ public:
     autoscale->show ();
     togglegrid->show ();
     panzoom->show ();
     rotate->show ();
 
     set_name ();
     resizable (canvas);
     size_range (4*status_h, 2*status_h);
-    gui_mode = 1;
+    gui_mode = pan_zoom;
   }
 
   ~plot_window (void)
   {
     canvas->hide ();
     status->hide ();
     this->hide ();
     delete canvas;
@@ -343,18 +343,17 @@ private:
   // window name -- this must exists for the duration of the window's
   // life
   std::string window_label;
 
   // Mod keys status
   int shift;
 
   // Interactive Mode
-  // 1...pan/zoom, 2...rotate/zoom
-  int gui_mode;
+  enum { pan_zoom, rotate_zoom } gui_mode;
   
   // Figure properties.
   figure::properties& fp;
 
   // Status area height.
   static const int status_h = 20;
 
   // Window callback.
@@ -375,20 +374,20 @@ private:
   {
     if (widg == autoscale)
       axis_auto ();
 
     if (widg == togglegrid)
       toggle_grid ();
     
     if (widg == panzoom)
-      gui_mode = 1;
+      gui_mode = pan_zoom;
     
     if (widg == rotate)
-      gui_mode = 2;
+      gui_mode = rotate_zoom;
 
     if (widg == help)
       fl_message ("%s", help_text);
   }
 
   OpenGL_fltk* canvas;
   Fl_Button* autoscale;
   Fl_Button* togglegrid;
@@ -631,22 +630,22 @@ private:
 
             case 'g':
             case 'G':
               toggle_grid ();
             break;
 
             case 'p':
             case 'P':
-              gui_mode = 1;
+              gui_mode = pan_zoom;
             break;
 
             case 'r':
             case 'R':
-              gui_mode = 2;
+              gui_mode = rotate_zoom;
             break;
             }
         }
         break;
 
       case FL_KEYUP:
         {
           int key = Fl::event_key ();
@@ -689,31 +688,31 @@ private:
             set_currentpoint (Fl::event_x (), Fl::event_y ());
             fp.execute_windowbuttonmotionfcn ();
           }
         
         if (Fl::event_button () == 1)
           {
             if (ax0 && ax0.isa ("axes"))
               {
-                if (gui_mode == 1)
+                if (gui_mode == pan_zoom)
                   pixel2status (ax0, px0, py0, Fl::event_x (), Fl::event_y ());
                 else
                   view2status (ax0);
                 axes::properties& ap = 
                   dynamic_cast<axes::properties&> (ax0.get_properties ());
               
                 double x0, y0, x1, y1;
                 Matrix pos = fp.get_position ().matrix_value ();
                 pixel2pos (ax0, px0, py0, x0, y0);
                 pixel2pos (ax0, Fl::event_x (), Fl::event_y (), x1, y1);
                 
-                if (gui_mode == 1)
+                if (gui_mode == pan_zoom)
                   ap.translate_view (x0 - x1, y0 - y1);
-                else if (gui_mode == 2)
+                else if (gui_mode == rotate_zoom)
                   {
                     double daz, del;
                     daz = (Fl::event_x () - px0) / pos(2) * 360;
                     del = (Fl::event_y () - py0) / pos(3) * 360;
                     ap.rotate_view (del, daz);
                   }
 
                 px0 = Fl::event_x ();
