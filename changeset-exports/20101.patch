# HG changeset patch
# User Rik <rik@octave.org>
# Date 1429491333 25200
#      Sun Apr 19 17:55:33 2015 -0700
# Node ID e51473fdb62246c26600158b47211a34be0eb039
# Parent  a8769ccb2c4e39b46fa09568cb2ef71578df4939
doc: Periodic grammarcheck of documentation.

* func.txi, io.txi, error.cc, file-io.cc, regexp.cc, utils.cc, variables.cc,
dlmwrite.m, strread.m, textread.m, textscan.m: Use @xbackslashchar to produce
a backslash and resolve differences between Info viewer and pdf view.

* warning_ids.m: Use @option around command line options.

* qmr.m: Use @nospell macro for names in citation.

* genpropdoc.m: Eliminate trailing space to closing '}'.

diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -109,18 +109,18 @@ on your terminal (assuming that it is po
 @group
 function wakeup
   printf ("\a");
 endfunction
 @end group
 @end example
 
 The @code{printf} statement (@pxref{Input and Output}) simply tells
-Octave to print the string @qcode{"\a"}.  The special character @samp{\a}
-stands for the alert character (ASCII 7).  @xref{Strings}.
+Octave to print the string @qcode{"@xbackslashchar{}a"}.  The special character
+@samp{\a} stands for the alert character (ASCII 7).  @xref{Strings}.
 
 Once this function is defined, you can ask Octave to evaluate it by
 typing the name of the function.
 
 Normally, you will want to pass some information to the functions you
 define.  The syntax for passing parameters to a function in Octave is
 
 @example
diff --git a/doc/interpreter/genpropdoc.m b/doc/interpreter/genpropdoc.m
--- a/doc/interpreter/genpropdoc.m
+++ b/doc/interpreter/genpropdoc.m
@@ -130,17 +130,17 @@ function s = getdoc (objname, field, bas
       case "clipping"
         s.doc = "If __prop__ is @qcode{\"on\"}, the __objname__ is \
 clipped in its parent axes limits.";
 
       case "createfcn"
         s.doc = "Callback function executed immediately after __objname__ \
 has been created.  Function is set by using default property on root object, \
 e.g., @code{set (0, \"default__objname__createfcn\", \
-'disp (\"__objname__ created!\")') }.";
+'disp (\"__objname__ created!\")')}.";
         s.valid = valid_fcn;
 
       case "deletefcn"
         s.doc = "Callback function executed immediately before __objname__ \
 is deleted.";
         s.valid = valid_fcn;
 
       case "handlevisibility"
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -388,18 +388,18 @@ the line @samp{Free Software is needed f
 This section describes how to call @code{printf} and related functions.
 
 The following functions are available for formatted output.  They are
 modeled after the C language functions of the same name, but they
 interpret the format template differently in order to improve the
 performance of printing vector and matrix values.
 
 Implementation Note: For compatibility with @sc{matlab}, escape sequences in
-the template string (e.g., @qcode{"\n"} => newline) are expanded even
-when the template string is defined with single quotes.
+the template string (e.g., @qcode{"@xbackslashchar{}n"} => newline) are
+expanded even when the template string is defined with single quotes.
 
 @DOCSTRING(printf)
 
 @DOCSTRING(fprintf)
 
 @DOCSTRING(sprintf)
 
 The @code{printf} function can be used to print any number of arguments.
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -1088,21 +1088,22 @@ endif\n\
 error (err_msg);\n\
 @end group\n\
 @end example\n\
 \n\
 @noindent\n\
 which will only stop execution if an error has been found.\n\
 \n\
 Implementation Note: For compatibility with @sc{matlab}, escape\n\
-sequences in @var{template} (e.g., \"\\n\" => newline) are processed\n\
-regardless of whether @var{template} has been defined with single quotes,\n\
-as long as there are two or more input arguments.  To disable escape sequence\n\
-expansion use a second backslash before the sequence (e.g., \"\\\\n\") or\n\
-use the @code{regexptranslate} function.\n\
+sequences in @var{template} (e.g., @qcode{\"@xbackslashchar{}n\"} =>\n\
+newline) are processed regardless of whether @var{template} has been defined\n\
+with single quotes, as long as there are two or more input arguments.  To\n\
+disable escape sequence expansion use a second backslash before the sequence\n\
+(e.g., \"@xbackslashchar{}@xbackslashchar{}n\") or use the\n\
+@code{regexptranslate} function.\n\
 @seealso{warning, lasterror}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   octave_value_list nargs = args;
@@ -1387,21 +1388,22 @@ and the third argument is @qcode{\"local
 will be set temporarily, until the end of the current function.\n\
 Changes to warning states that are set locally affect the current\n\
 function and all functions called from the current scope.  The\n\
 previous warning state is restored on return from the current\n\
 function.  The @qcode{\"local\"} option is ignored if used in the top-level\n\
 workspace.\n\
 \n\
 Implementation Note: For compatibility with @sc{matlab}, escape\n\
-sequences in @var{template} (e.g., \"\\n\" => newline) are processed\n\
-regardless of whether @var{template} has been defined with single quotes,\n\
-as long as there are two or more input arguments.  To disable escape sequence\n\
-expansion use a second backslash before the sequence (e.g., \"\\\\n\") or\n\
-use the @code{regexptranslate} function.\n\
+sequences in @var{template} (e.g., @qcode{\"@xbackslashchar{}n\"} =>\n\
+newline) are processed regardless of whether @var{template} has been defined\n\
+with single quotes, as long as there are two or more input arguments.  To\n\
+disable escape sequence expansion use a second backslash before the sequence\n\
+(e.g., \"@xbackslashchar{}@xbackslashchar{}n\") or use the\n\
+@code{regexptranslate} function.\n\
 @seealso{warning_ids, lastwarn, error}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
   int argc = nargin + 1;
 
diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -885,18 +885,18 @@ This function is equivalent to @code{pri
 written to the file descriptor @var{fid} instead of @code{stdout}.\n\
 \n\
 If @var{fid} is omitted, the output is written to @code{stdout} making the\n\
 function exactly equivalent to @code{printf}.\n\
 \n\
 The optional output returns the number of bytes written to the file.\n\
 \n\
 Implementation Note: For compatibility with @sc{matlab}, escape sequences in\n\
-the template string (e.g., @qcode{\"\\\\n\"} => newline) are expanded even\n\
-when the template string is defined with single quotes.\n\
+the template string (e.g., @qcode{\"@xbackslashchar{}n\"} => newline) are\n\
+expanded even when the template string is defined with single quotes.\n\
 @seealso{fputs, fdisp, fwrite, fscanf, printf, sprintf, fopen}\n\
 @end deftypefn")
 {
   static std::string who = "fprintf";
 
   octave_value retval;
 
   int result = -1;
@@ -955,18 +955,18 @@ Print optional arguments under the contr
 characters printed.\n\
 @ifclear OCTAVE_MANUAL\n\
 \n\
 See the Formatted Output section of the GNU Octave manual for a\n\
 complete description of the syntax of the template string.\n\
 @end ifclear\n\
 \n\
 Implementation Note: For compatibility with @sc{matlab}, escape sequences in\n\
-the template string (e.g., @qcode{\"\\\\n\"} => newline) are expanded even\n\
-when the template string is defined with single quotes.\n\
+the template string (e.g., @qcode{\"@xbackslashchar{}n\"} => newline) are\n\
+expanded even when the template string is defined with single quotes.\n\
 @seealso{fprintf, sprintf, scanf}\n\
 @end deftypefn")
 {
   static std::string who = "printf";
 
   octave_value retval;
 
   int result = -1;
@@ -1064,18 +1064,18 @@ DEFUN (sprintf, args, ,
 @deftypefn {Built-in Function} {} sprintf (@var{template}, @dots{})\n\
 This is like @code{printf}, except that the output is returned as a\n\
 string.  Unlike the C library function, which requires you to provide a\n\
 suitably sized string as an argument, Octave's @code{sprintf} function\n\
 returns the string, automatically sized to hold all of the items\n\
 converted.\n\
 \n\
 Implementation Note: For compatibility with @sc{matlab}, escape sequences in\n\
-the template string (e.g., @qcode{\"\\\\n\"} => newline) are expanded even\n\
-when the template string is defined with single quotes.\n\
+the template string (e.g., @qcode{\"@xbackslashchar{}n\"} => newline) are\n\
+expanded even when the template string is defined with single quotes.\n\
 @seealso{printf, fprintf, sscanf}\n\
 @end deftypefn")
 {
   static std::string who = "sprintf";
 
   octave_value_list retval;
 
   int nargin = args.length ();
diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -673,20 +673,21 @@ Match the beginning of a word\n\
 @item \\>\n\
 Match the end of a word\n\
 \n\
 @item \\B\n\
 Match within a word\n\
 @end table\n\
 \n\
 Implementation Note: For compatibility with @sc{matlab}, escape sequences\n\
-in @var{pat} (e.g., @qcode{\"\\\\n\"} => newline) are expanded even when\n\
-@var{pat} has been defined with single quotes.  To disable expansion use\n\
-a second backslash before the escape sequence (e.g., \"\\\\n\") or use the\n\
-@code{regexptranslate} function.\n\
+in @var{pat} (e.g., @qcode{\"@xbackslashchar{}n\"} => newline) are expanded\n\
+even when @var{pat} has been defined with single quotes.  To disable\n\
+expansion use a second backslash before the escape sequence (e.g.,\n\
+\"@xbackslashchar{}@xbackslashchar{}n\") or use the @code{regexptranslate}\n\
+function.\n\
 \n\
 The outputs of @code{regexp} default to the order given below\n\
 \n\
 @table @var\n\
 @item s\n\
 The start indices of each matching substring\n\
 \n\
 @item e\n\
@@ -1305,20 +1306,21 @@ Options in addition to those of @code{re
 Replace only the first occurrence of @var{pat} in the result.\n\
 \n\
 @item warnings\n\
 This option is present for compatibility but is ignored.\n\
 \n\
 @end table\n\
 \n\
 Implementation Note: For compatibility with @sc{matlab}, escape sequences\n\
-in @var{pat} (e.g., @qcode{\"\\\\n\"} => newline) are expanded even when\n\
-@var{pat} has been defined with single quotes.  To disable expansion use\n\
-a second backslash before the escape sequence (e.g., \"\\\\n\") or use the\n\
-@code{regexptranslate} function.\n\
+in @var{pat} (e.g., @qcode{\"@xbackslashchar{}n\"} => newline) are expanded\n\
+even when @var{pat} has been defined with single quotes.  To disable\n\
+expansion use a second backslash before the escape sequence (e.g.,\n\
+\"@xbackslashchar{}@xbackslashchar{}n\") or use the @code{regexptranslate}\n\
+function.\n\
 @seealso{regexp, regexpi, strrep}\n\
 @end deftypefn")
 {
   octave_value_list retval;
   int nargin = args.length ();
 
   if (nargin < 3)
     {
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -1360,17 +1360,17 @@ Return true if @var{ind} is a valid inde
 \n\
 Valid indices are either positive integers (although possibly of real data\n\
 type), or logical arrays.  If present, @var{n} specifies the maximum extent\n\
 of the dimension to be indexed.  When possible the internal result is cached\n\
 so that subsequent indexing using @var{ind} will not perform the check again.\n\
 \n\
 Implementation Note: Strings are first converted to double values before the\n\
 checks for valid indices are made.  Unless a string contains the NULL\n\
-character \"\\0\", it will always be a valid index.\n\
+character @nospell{\"\\0\"}, it will always be a valid index.\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
   octave_idx_type n = 0;
 
   if (nargin == 2)
     n = args(1).idx_type_value ();
diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -2632,18 +2632,19 @@ auto-expand as required.\n\
 \n\
 The parameters @code{left-min} and @code{balance} are only available when the\n\
 column-aligned modifier is used with the command @samp{%s}.\n\
 @code{balance} specifies the column number within the field width which will\n\
 be aligned between entries.  Numbering starts from 0 which indicates the\n\
 leftmost column.  @code{left-min} specifies the minimum field width to the\n\
 left of the specified balance column.\n\
 \n\
-The default format is\n\
-@qcode{\"  %a:4; %ln:6; %cs:16:6:1;  %rb:12;  %lc:-1;\\n\"}.\n\
+The default format is:\n\
+\n\
+@qcode{\"  %a:4; %ln:6; %cs:16:6:1;  %rb:12;  %lc:-1;@xbackslashchar{}n\"}\n\
 \n\
 When called from inside a function with the @qcode{\"local\"} option, the\n\
 variable is changed locally for the function and any subroutines it calls.  \n\
 The original variable value is restored when exiting the function.\n\
 @seealso{whos}\n\
 @end deftypefn")
 {
   return SET_INTERNAL_VARIABLE (whos_line_format);
diff --git a/scripts/io/dlmwrite.m b/scripts/io/dlmwrite.m
--- a/scripts/io/dlmwrite.m
+++ b/scripts/io/dlmwrite.m
@@ -45,19 +45,21 @@
 ## @item @qcode{"append"}
 ## Either @qcode{"on"} or @qcode{"off"}.  See @qcode{"-append"} above.
 ##
 ## @item @qcode{"delimiter"}
 ## See @var{delim} above.
 ##
 ## @item @qcode{"newline"}
 ## The character(s) to use to separate each row.  Three special cases
-## exist for this option.  @qcode{"unix"} is changed into @qcode{"\n"},
-## @qcode{"pc"} is changed into @qcode{"\r\n"}, and @qcode{"mac"} is changed
-## into @qcode{"\r"}.  Other values for this option are kept as is.
+## exist for this option.  @qcode{"unix"} is changed into
+## @qcode{"@xbackslashchar{}n"}, @qcode{"pc"} is changed into
+## @qcode{"@xbackslashchar{}r@xbackslashchar{}n"}, and @qcode{"mac"} is changed
+## into @qcode{"@xbackslashchar{}r"}.  Any other value is used directly as the
+## newline separator.
 ##
 ## @item @qcode{"roffset"}
 ## See @var{r} above.
 ##
 ## @item @qcode{"coffset"}
 ## See @var{c} above.
 ##
 ## @item @qcode{"precision"}
@@ -65,17 +67,17 @@
 ## format string (as used by fprintf) or a number of significant digits.
 ## @end table
 ##
 ## @example
 ## dlmwrite ("file.csv", reshape (1:16, 4, 4));
 ## @end example
 ##
 ## @example
-## dlmwrite ("file.tex", a, "delimiter", "&", "newline", "\\n")
+## dlmwrite ("file.tex", a, "delimiter", "&", "newline", "\n")
 ## @end example
 ##
 ## @seealso{dlmread, csvread, csvwrite}
 ## @end deftypefn
 
 ## Author: Paul Kienzle <pkienzle@users.sf.net>
 ##
 ## This program was originally granted to the public domain
diff --git a/scripts/io/strread.m b/scripts/io/strread.m
--- a/scripts/io/strread.m
+++ b/scripts/io/strread.m
@@ -142,33 +142,35 @@
 ##
 ## @item @qcode{"returnonerror"}
 ## If @var{value} true (1, default), ignore read errors and return normally.
 ## If false (0), return an error.
 ##
 ## @item @qcode{"whitespace"}
 ## Any character in @var{value} will be interpreted as whitespace and
 ## trimmed; the string defining whitespace must be enclosed in double
-## quotes for proper processing of special characters like \t.
-## The default value for whitespace = @qcode{" \b\r\n\t"} (note the space).
+## quotes for proper processing of special characters like
+## @qcode{"@xbackslashchar{}t"}.  The default value for whitespace is
+## @qcode{" @xbackslashchar{}b@xbackslashchar{}r@xbackslashchar{}n@xbackslashchar{}t"}
+## (note the space).
 ## Unless whitespace is set to '' (empty) AND at least one @qcode{"%s"} format
 ## conversion specifier is supplied, a space is always part of whitespace.
 ##
 ## @end table
 ##
 ## When the number of words in @var{str} doesn't match an exact multiple
 ## of the number of format conversion specifiers, strread's behavior
 ## depends on the last character of @var{str}:
 ##
 ## @table @asis
-## @item last character = @qcode{"\n"}
+## @item last character = @qcode{"@xbackslashchar{}n"}
 ## Data columns are padded with empty fields or Nan so that all columns
 ## have equal length
 ##
-## @item last character is not @qcode{"\n"}
+## @item last character is not @qcode{"@xbackslashchar{}n"}
 ## Data columns are not padded; strread returns columns of unequal length
 ##
 ## @end table
 ##
 ## @seealso{textscan, textread, load, dlmread, fscanf}
 ## @end deftypefn
 
 function varargout = strread (str, format = "%f", varargin)
diff --git a/scripts/io/textread.m b/scripts/io/textread.m
--- a/scripts/io/textread.m
+++ b/scripts/io/textread.m
@@ -31,17 +31,18 @@
 ## In addition to the options supported by @code{strread}, this function
 ## supports two more:
 ##
 ## @itemize
 ## @item @qcode{"headerlines"}:
 ## The first @var{value} number of lines of @var{filename} are skipped.
 ##
 ## @item @qcode{"endofline"}:
-## Specify a single character or @qcode{"\r\n"}.  If no value is given, it
+## Specify a single character or
+## @qcode{"@xbackslashchar{}r@xbackslashchar{}n"}.  If no value is given, it
 ## will be inferred from the file.  If set to "" (empty string) EOLs are
 ## ignored as delimiters.
 ## @end itemize
 ##
 ## The optional input @var{n} specifies the number of data lines to read; in
 ## this sense it differs slightly from the format repeat count in strread.
 ##
 ## If the format string is empty (not: omitted) and the file contains only
diff --git a/scripts/io/textscan.m b/scripts/io/textscan.m
--- a/scripts/io/textscan.m
+++ b/scripts/io/textscan.m
@@ -35,20 +35,20 @@
 ##
 ## @itemize
 ## @item @qcode{"collectoutput"}:
 ## A value of 1 or true instructs textscan to concatenate consecutive columns
 ## of the same class in the output cell array.  A value of 0 or false (default)
 ## leaves output in distinct columns.
 ##
 ## @item @qcode{"endofline"}:
-## Specify @qcode{"\r"}, @qcode{"\n"} or @qcode{"\r\n"} (for CR, LF, or
-## CRLF).  If no value is given, it will be inferred from the file.  If set
-## to "" (empty string) EOLs are ignored as delimiters and added to
-## whitespace.
+## Specify @qcode{"@xbackslashchar{}r"}, @qcode{"@xbackslashchar{}n"} or
+## @qcode{"@xbackslashchar{}r@xbackslashchar{}n"} (for CR, LF, or CRLF).  If no
+## value is given, it will be inferred from the file.  If set to "" (empty
+## string) EOLs are ignored as delimiters and added to whitespace.
 ##
 ## @item @qcode{"headerlines"}:
 ## The first @var{value} number of lines of @var{fid} are skipped.
 ##
 ## @item @qcode{"returnonerror"}:
 ## If set to numerical 1 or true (default), return normally when read errors
 ## have been encountered.  If set to 0 or false, return an error and no data.
 ## As the string or file is read by columns rather than by rows, and because
diff --git a/scripts/miscellaneous/warning_ids.m b/scripts/miscellaneous/warning_ids.m
--- a/scripts/miscellaneous/warning_ids.m
+++ b/scripts/miscellaneous/warning_ids.m
@@ -158,20 +158,20 @@
 ##
 ## @item Octave:imag-to-real
 ## If the @code{Octave:imag-to-real} warning is enabled, a warning is
 ## printed for implicit conversions of complex numbers to real numbers.
 ## By default, the @code{Octave:imag-to-real} warning is disabled.
 ##
 ## @item Octave:language-extension
 ## Print warnings when using features that are unique to the Octave
-## language and may be still be missing in @sc{Matlab}.
+## language and that may still be missing in @sc{matlab}.
 ## By default, the @code{Octave:language-extension} warning is disabled.
-## The --traditional or --braindead startup options for Octave may also
-## be of use, @pxref{Command Line Options}.
+## The @option{--traditional} or @option{--braindead} startup options for
+## Octave may also be of use, @pxref{Command Line Options}.
 ##
 ## @item Octave:load-file-in-path
 ## By default, the @code{Octave:load-file-in-path} warning is enabled.
 ##
 ## @item Octave:logical-conversion
 ## By default, the @code{Octave:logical-conversion} warning is enabled.
 ##
 ## @item Octave:md5sum-file-in-path
diff --git a/scripts/sparse/qmr.m b/scripts/sparse/qmr.m
--- a/scripts/sparse/qmr.m
+++ b/scripts/sparse/qmr.m
@@ -71,18 +71,18 @@
 ##
 ## @enumerate
 ## @item
 ## @nospell{R. Freund and N. Nachtigal}, @cite{QMR: a quasi-minimal residual
 ## method for non-Hermitian linear systems}, @nospell{Numerische Mathematik},
 ## 1991, 60, pp. 315-339.
 ##
 ## @item
-## @nospell{R. Barrett, M. Berry, T. Chan, J. Demmel, J. Donato, J. Dongarra},
-## @nospell{V. Eijkhour, R. Pozo, C. Romine, and H. van der Vorst},
+## @nospell{ R. Barrett, M. Berry, T. Chan, J. Demmel, J. Donato, J. Dongarra},
+## @nospell{ V. Eijkhour, R. Pozo, C. Romine, and H. van der Vorst},
 ## @cite{Templates for the solution of linear systems: Building blocks
 ## for iterative methods}, SIAM, 2nd ed., 1994.
 ## @end enumerate
 ##
 ## @seealso{bicg, bicgstab, cgs, gmres, pcg}
 ## @end deftypefn
 
 ## Author: Nathan Podlich <nathan.podlich@gmail.com>
