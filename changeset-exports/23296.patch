# HG changeset patch
# User Marco Caliari <marco.caliari@univr.it>
# Date 1489653884 -3600
#      Thu Mar 16 09:44:44 2017 +0100
# Branch stable
# Node ID 3b2dbed2676282ac9e5e0007ec8b747c11ddf606
# Parent  6cbf5c2d4d55e452021c65d2d328301eafe81ab7
Fix eigs for the generalized eigenvalue problem (bug #50546)

* liboctave/numeric/eigs-base.cc: fix ltsolve and utsolve when a nontrivial
Q is given, fix the operator which computes mtmp in EigsRealSymmetricMatrix.

* scripts/sparse/eigs.m: improve the documentation for permB, add tests for
the generalized problem.

diff --git a/liboctave/numeric/eigs-base.cc b/liboctave/numeric/eigs-base.cc
--- a/liboctave/numeric/eigs-base.cc
+++ b/liboctave/numeric/eigs-base.cc
@@ -73,22 +73,43 @@ lusolve (const SM& L, const SM& U, M& m)
 
   return err;
 }
 
 template <typename SM, typename M>
 static M
 ltsolve (const SM& L, const ColumnVector& Q, const M& m)
 {
+  // Solve (Q_mat * L) * x = m, that is L * x = Q_mat' * m = m(Q)
   octave_idx_type n = L.cols ();
   octave_idx_type b_nc = m.cols ();
   octave_idx_type err = 0;
   double rcond;
   MatrixType ltyp (MatrixType::Lower);
-  M tmp = L.solve (ltyp, m, err, rcond, 0);
+  M retval (n, b_nc);
+  const double* qv = Q.fortran_vec ();
+  for (octave_idx_type j = 0; j < b_nc; j++)
+    {
+      for (octave_idx_type i = 0; i < n; i++)
+        retval.elem (i,j) = m.elem (static_cast<octave_idx_type>(qv[i]), j);
+    }
+  return L.solve (ltyp, retval, err, rcond, 0);
+}
+
+template <typename SM, typename M>
+static M
+utsolve (const SM& U, const ColumnVector& Q, const M& m)
+{
+  // Solve (U * Q_mat') * x = m by U * tmp = m, x(Q) = tmp (Q_mat * tmp = x)
+  octave_idx_type n = U.cols ();
+  octave_idx_type b_nc = m.cols ();
+  octave_idx_type err = 0;
+  double rcond;
+  MatrixType utyp (MatrixType::Upper);
+  M tmp = U.solve (utyp, m, err, rcond, 0);
   M retval;
   const double* qv = Q.fortran_vec ();
 
   if (! err)
     {
       retval.resize (n, b_nc);
       for (octave_idx_type j = 0; j < b_nc; j++)
         {
@@ -96,36 +117,16 @@ ltsolve (const SM& L, const ColumnVector
             retval.elem (static_cast<octave_idx_type>(qv[i]), j) =
               tmp.elem (i,j);
         }
     }
 
   return retval;
 }
 
-template <typename SM, typename M>
-static M
-utsolve (const SM& U, const ColumnVector& Q, const M& m)
-{
-  octave_idx_type n = U.cols ();
-  octave_idx_type b_nc = m.cols ();
-  octave_idx_type err = 0;
-  double rcond;
-  MatrixType utyp (MatrixType::Upper);
-
-  M retval (n, b_nc);
-  const double* qv = Q.fortran_vec ();
-  for (octave_idx_type j = 0; j < b_nc; j++)
-    {
-      for (octave_idx_type i = 0; i < n; i++)
-        retval.elem (i,j) = m.elem (static_cast<octave_idx_type>(qv[i]), j);
-    }
-  return U.solve (utyp, retval, err, rcond, 0);
-}
-
 static bool
 vector_product (const SparseMatrix& m, const double* x, double* y)
 {
   octave_idx_type nc = m.cols ();
 
   for (octave_idx_type j = 0; j < nc; j++)
     y[j] = 0.;
 
@@ -194,17 +195,17 @@ make_cholb (Matrix& b, Matrix& bt, Colum
   octave_idx_type info;
   octave::math::chol<Matrix> fact (b, info);
   octave_idx_type n = b.cols ();
 
   if (info != 0)
     return false;
   else
     {
-      bt = fact.chol_matrix ();
+      bt = fact.chol_matrix (); // upper triangular
       b = bt.transpose ();
       permB = ColumnVector (n);
       for (octave_idx_type i = 0; i < n; i++)
         permB(i) = i;
       return true;
     }
 }
 
@@ -213,17 +214,17 @@ make_cholb (SparseMatrix& b, SparseMatri
 {
   octave_idx_type info;
   octave::math::sparse_chol<SparseMatrix> fact (b, info, false);
 
   if (fact.P () != 0)
     return false;
   else
     {
-      b = fact.L ();
+      b = fact.L (); // lower triangular
       bt = b.transpose ();
       permB = fact.perm () - 1.0;
       return true;
     }
 }
 
 static bool
 make_cholb (ComplexMatrix& b, ComplexMatrix& bt, ColumnVector& permB)
@@ -231,17 +232,17 @@ make_cholb (ComplexMatrix& b, ComplexMat
   octave_idx_type info;
   octave::math::chol<ComplexMatrix> fact (b, info);
   octave_idx_type n = b.cols ();
 
   if (info != 0)
     return false;
   else
     {
-      bt = fact.chol_matrix ();
+      bt = fact.chol_matrix (); // upper triangular
       b = bt.hermitian ();
       permB = ColumnVector (n);
       for (octave_idx_type i = 0; i < n; i++)
         permB(i) = i;
       return true;
     }
 }
 
@@ -251,17 +252,17 @@ make_cholb (SparseComplexMatrix& b, Spar
 {
   octave_idx_type info;
   octave::math::sparse_chol<SparseComplexMatrix> fact (b, info, false);
 
   if (fact.P () != 0)
     return false;
   else
     {
-      b = fact.L ();
+      b = fact.L (); // lower triangular
       bt = b.hermitian ();
       permB = fact.perm () - 1.0;
       return true;
     }
 }
 
 static bool
 LuAminusSigmaB (const SparseMatrix &m, const SparseMatrix &b,
@@ -761,17 +762,17 @@ EigsRealSymmetricMatrix (const M& m, con
       if (ido == -1 || ido == 1 || ido == 2)
         {
           if (have_b)
             {
               Matrix mtmp (n,1);
               for (octave_idx_type i = 0; i < n; i++)
                 mtmp(i,0) = workd[i + iptr(0) - 1];
 
-              mtmp = utsolve (bt, permB, m * ltsolve (b, permB, mtmp));
+              mtmp = ltsolve (b, permB, m * utsolve (bt, permB, mtmp));
 
               for (octave_idx_type i = 0; i < n; i++)
                 workd[i+iptr(1)-1] = mtmp(i,0);
             }
           else if (! vector_product (m, workd + iptr(0) - 1,
                                      workd + iptr(1) - 1))
             break;
         }
@@ -849,17 +850,17 @@ EigsRealSymmetricMatrix (const M& m, con
                     z[off1 + j] = z[off2 + j];
 
                   for (octave_idx_type j = 0; j < n; j++)
                     z[off2 + j] = dtmp[j];
                 }
             }
 
           if (note3)
-            eig_vec = ltsolve (b, permB, eig_vec);
+            eig_vec = utsolve (bt, permB, eig_vec);
         }
     }
   else
     (*current_liboctave_error_handler) ("eigs: error %d in dseupd", info2);
 
   return ip(4);
 }
 
diff --git a/scripts/sparse/eigs.m b/scripts/sparse/eigs.m
--- a/scripts/sparse/eigs.m
+++ b/scripts/sparse/eigs.m
@@ -138,18 +138,18 @@
 ## diagnostics are disabled.  The default value is 0.
 ##
 ## @item cholB
 ## Flag if @code{chol (@var{B})} is passed rather than @var{B}.  The default is
 ## false.
 ##
 ## @item permB
 ## The permutation vector of the Cholesky@tie{}factorization of @var{B} if
-## @code{cholB} is true.  That is @code{chol (@var{B}(permB, permB))}.  The
-## default is @code{1:@var{n}}.
+## @code{cholB} is true.  It is obtained by @code{[R, ~, permB] =
+## chol (@var{B}, @qcode{"vector"})}. The default is @code{1:@var{n}}.
 ##
 ## @end table
 ##
 ## It is also possible to represent @var{A} by a function denoted @var{af}.
 ## @var{af} must be followed by a scalar argument @var{n} defining the length
 ## of the vector argument accepted by @var{af}.  @var{af} can be a function
 ## handle, an inline function, or a string.  When @var{af} is a string it
 ## holds the name of the function to use.
@@ -738,16 +738,52 @@ endfunction
 %!   assert (max (abs ((A - d1(i)*speye (n))*v1(:,i))), 0, 1e-11);
 %! endfor
 %!testif HAVE_ARPACK
 %! [v1,d1] = eigs (A, k, "si");
 %! d1 = diag (d1);
 %! for i=1:k
 %!   assert (max (abs ((A - d1(i)*speye (n))*v1(:,i))), 0, 1e-11);
 %! endfor
+%!testif HAVE_ARPACK, HAVE_UMFPACK
+%! A = toeplitz (sparse (1:10));
+%! B = toeplitz (sparse ([1, 1], [1, 2], [2, 1], 1, 10));
+%! [v, d] = eigs (A, B, 5, "lm");
+%! for i = 1:5
+%!   assert (A * v(:,i), d(i, i) * B * v(:,i), 1e-12)
+%! endfor
+%! ddiag = diag (d);
+%! [ddiag, idx] = sort (ddiag);
+%! v = v(:, idx);
+%! R = chol (B);
+%! [v1, d1] = eigs (R' \ A / R, 5, "lm");
+%! d1diag = diag (d1);
+%! [d1diag, idx] = sort (d1diag);
+%! v1 = v1(:, idx);
+%! assert (abs (v), abs (R \ v1), 1e-12);
+%!testif HAVE_ARPACK, HAVE_UMFPACK
+%! A = toeplitz (sparse (1:10));
+%! B = toeplitz (sparse ([1, 1], [1, 2], [2, 1], 1, 10));
+%! R = chol (B);
+%! opts.cholB = R;
+%! [v, d] = eigs (A, R, 5, "lm", opts);
+%! for i = 1:5
+%!   assert (A * v(:,i), d(i, i) * B * v(:,i), 1e-12)
+%! endfor
+%!testif HAVE_ARPACK, HAVE_UMFPACK
+%! A = toeplitz (sparse (1:10));
+%! B = toeplitz (sparse ([1, 1], [1, 2], [2, 1], 1, 10));
+%! [R, ~, permB] = chol (B, "vector");
+%! opts.cholB = R;
+%! opts.permB = permB;
+%! [v, d] = eigs (A, R, 5, "lm", opts);
+%! for i = 1:5
+%!   assert (A * v(:,i), d(i, i) * B * v(:,i), 1e-12)
+%! endfor
+
 
 #### FULL MATRIX VERSIONS ####
 
 ## Real positive definite tests, n must be even
 %!shared n, k, A, d0, d2
 %! n = 20;
 %! k = 4;
 %! A = full (sparse ([3:n,1:n,1:(n-2)],[1:(n-2),1:n,3:n],[ones(1,n-2),4*ones(1,n),ones(1,n-2)]));
