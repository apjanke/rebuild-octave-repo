# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1447358817 18000
#      Thu Nov 12 15:06:57 2015 -0500
# Node ID 7f568368d247cf8694c0d92fc4fc4aafab10a69f
# Parent  0dfeb5c82750d85871aaaf1c33f45646ba695ff7
# Parent  950c8a092db738425408afc044082e2dddee3828
maint: periodic merge of stable to default

diff --git a/libgui/src/history-dock-widget.cc b/libgui/src/history-dock-widget.cc
--- a/libgui/src/history-dock-widget.cc
+++ b/libgui/src/history-dock-widget.cc
@@ -341,8 +341,19 @@ history_dock_widget::selectAll ()
     {
       _filter->lineEdit ()->selectAll ();
     }
   if (_history_list_view->hasFocus ())
     {
       _history_list_view->selectAll ();
     }
 }
+
+void history_dock_widget::handle_visibility (bool visible)
+{
+  octave_dock_widget::handle_visibility (visible);
+
+  if (visible)
+    {
+      int filter_state = _filter_checkbox->isChecked ();
+      filter_activate (filter_state);
+    }
+}
\ No newline at end of file
diff --git a/libgui/src/history-dock-widget.h b/libgui/src/history-dock-widget.h
--- a/libgui/src/history-dock-widget.h
+++ b/libgui/src/history-dock-widget.h
@@ -69,16 +69,18 @@ private slots:
   void handle_contextmenu_create_script (bool flag);
   void handle_contextmenu_filter (void);
   void ctxMenu (const QPoint &pos);
 
   void copyClipboard ();
   void pasteClipboard ();
   void selectAll ();
 
+  virtual void handle_visibility (bool visible);
+
 private:
 
   void construct ();
   QListView *_history_list_view;
   QSortFilterProxyModel _sort_filter_proxy_model;
 
   /** Stores the current history_model. */
   QStringListModel *_history_model;
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -1227,19 +1227,16 @@ file_editor::enable_menu_shortcuts (bool
 {
   QHash<QMenu*, QStringList>::const_iterator i = _hash_menu_text.constBegin();
 
  while (i != _hash_menu_text.constEnd())
    {
      i.key ()->setTitle (i.value ().at (! enable));
      ++i;
    }
-
-  if (enable)
-    focus ();
 }
 
 QMenu*
 file_editor::m_add_menu (QMenuBar *p, QString name)
 {
   QMenu *menu = p->addMenu (name);
 
   QString base_name = name;  // get a copy
diff --git a/scripts/general/quadv.m b/scripts/general/quadv.m
--- a/scripts/general/quadv.m
+++ b/scripts/general/quadv.m
@@ -30,18 +30,18 @@
 ## @var{f} is a function handle, inline function, or string containing the name
 ## of the function to evaluate.  @code{quadv} is a vectorized version of
 ## @code{quad} and the function defined by @var{f} must accept a scalar or
 ## vector as input and return a scalar, vector, or array as output.
 ##
 ## @var{a} and @var{b} are the lower and upper limits of integration.  Both
 ## limits must be finite.
 ##
-## The optional argument @var{tol} defines the tolerance used to stop the
-## adaptation procedure.  The default value is 1e-6.
+## The optional argument @var{tol} defines the absolute tolerance used to stop
+## the adaptation procedure.  The default value is 1e-6.
 ##
 ## The algorithm used by @code{quadv} involves recursively subdividing the
 ## integration interval and applying Simpson's rule on each subinterval.
 ## If @var{trace} is true then after computing each of these partial
 ## integrals display: (1) the total number of function evaluations,
 ## (2) the left end of the subinterval, (3) the length of the subinterval,
 ## (4) the approximation of the integral over the subinterval.
 ##
