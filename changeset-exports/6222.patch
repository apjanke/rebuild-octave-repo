# HG changeset patch
# User jwe
# Date 1167855316 0
#      Wed Jan 03 20:15:16 2007 +0000
# Node ID 07d967f75dbafc9f069236ed0672e1494461703f
# Parent  8e0f1eda266b7e1688d87959efab5369b4bdc0bb
[project @ 2007-01-03 20:15:15 by jwe]

diff --git a/scripts/sparse/normest.m b/scripts/sparse/normest.m
--- a/scripts/sparse/normest.m
+++ b/scripts/sparse/normest.m
@@ -1,10 +1,9 @@
-## Copyright (C) 2006 David Bateman
-## Copyright (C) 2006 Marco Caliari
+## Copyright (C) 2006 David Bateman and Marco Caliari
 ##
 ## This program is free software; you can redistribute it and/or modify
 ## it under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 2 of the License, or
 ## (at your option) any later version.
 ##
 ## This program is distributed in the hope that it will be useful,
 ## but WITHOUT ANY WARRANTY; without even the implied warranty of
@@ -13,20 +12,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with this program; if not, write to the Free Software
 ## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301  USA
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{n}, @var{c}] =} normest (@var{a}, @var{tol})
-##
-## Estimates the 2-norm of the matrix @var{a} using a power series
+## Estimate the 2-norm of the matrix @var{a} using a power series
 ## analysis. This is typically used for large matrices, where the cost
-## of calculating the @code{norm{@var{a})} is prohibitive and an approximation
+## of calculating the @code{norm (@var{a})} is prohibitive and an approximation
 ## to the 2-norm is acceptable.
 ##
 ## @var{tol} is the tolerance to which the 2-norm is calculated. By default
 ## @var{tol} is 1e-6. @var{c} returns the number of iterations needed for
 ## @code{normest} to converge.
 ## @end deftypefn
 
 function [e1, c] = normest(A, tol)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2007-01-03  Michael Goffioul  <michael.goffioul@swing.be>
+
+	* toplev.cc (Fsystem): Handle async calls on Windows systems.
+
 2007-01-03  David Bateman  <dbateman@free.fr>
 
 	* (OPERATORS/op-cm-scm.cc, OPERATORS/op-cm-sm.cc, 
 	OPERATORS/op-cs-scm.cc, OPERATORS/op-cs-sm.cc, 
 	OPERATORS/op-m-scm.cc, OPERATORS/op-m-sm.cc, 
 	OPERATORS/op-scm-cm.cc, OPERATORS/op-scm-cs.cc, 
 	OPERATORS/op-scm-m.cc, OPERATORS/op-scm-s.cc, 
 	OPERATORS/op-scm-scm.cc, OPERATORS/op-scm-sm.cc, 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -537,16 +537,17 @@ variable @code{status} to the integer @s
 	}
       else
 	error ("system: expecting std::string as first argument");
 
       if (! error_state)
 	{
 	  if (type == et_async)
 	    {
+	      // FIXME -- maybe this should go in sysdep.cc?
 #ifdef HAVE_FORK
 	      pid_t pid = fork ();
 
 	      if (pid < 0) 
 		error ("system: fork failed -- can't create child process");
 	      else if (pid == 0)
 		{
 		  // FIXME -- should probably replace this
@@ -554,16 +555,32 @@ variable @code{status} to the integer @s
 
 		  execl ("/bin/sh", "sh", "-c", cmd_str.c_str (),
 			 static_cast<void *> (0));
 
 		  panic_impossible ();
 		}
 	      else
 		retval(0) = pid;
+#elif defined (__WIN32__)
+              STARTUPINFO si;
+              PROCESS_INFORMATION pi;
+              ZeroMemory (&si, sizeof (si));
+              ZeroMemory (&pi, sizeof (pi));
+	      OCTAVE_LOCAL_BUFFER (char, xcmd_str, cmd_str.length()+1);
+	      strcpy (xcmd_str, cmd_str.c_str ())
+
+              if (! CreateProcess (0, xcmd_str, 0, 0, FALSE, 0, 0, 0, &si, &pi))
+                error ("system: CreateProcess failed -- can't create child process");
+              else
+                {
+                  retval(0) = pi.dwProcessId;
+                  CloseHandle (pi.hProcess);
+                  CloseHandle (pi.hThread);
+                }
 #else
  	      error ("asynchronous system calls are not supported");
 #endif
 	    }
 	  else if (return_output)
 	    retval = run_command_and_return_output (cmd_str);
 	  else
 	    {
