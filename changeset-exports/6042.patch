# HG changeset patch
# User jwe
# Date 1160412248 0
#      Mon Oct 09 16:44:08 2006 +0000
# Node ID 40be03213eb5eccdf854e0e1559782dba90c5711
# Parent  8467683311f8f2ea96fc75b0f24bb8f788e7bb33
[project @ 2006-10-09 16:44:08 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,16 @@
 2006-10-09  Bill Denney  <denney@seas.upenn.edu>
 
+	* pkg/pkg.m: Remove trailing "\n" from error messages.
+	Remove compare_versions subfunction.
+
+	* miscellaneous/compare_versions.m: New function to compare
+	version numbers as strings with any boolean operators.
+
 	* miscellaneous/untar.m: Check more rigorously to see if the tar
 	file exists.
 
 2006-10-04  John W. Eaton  <jwe@octave.org>
 
 	* pkg/pkg.m: Use fullfile to concatenate directory and file names.
 
 2006-10-04  Søren Hauberg  <soren@hauberg.org>
diff --git a/scripts/pkg/pkg.m b/scripts/pkg/pkg.m
--- a/scripts/pkg/pkg.m
+++ b/scripts/pkg/pkg.m
@@ -124,63 +124,63 @@ function [local_packages, global_package
         case "list"
             if (nargout == 0)
                 installed_packages();
             elseif (nargout == 1)
                 local_packages = installed_packages();
             elseif (nargout == 2)
                 [local_packages, global_packages] = installed_packages();
             else
-                error("Too many output arguments requested.\n");
+                error("Too many output arguments requested.");
             endif
         case "install"
             if (length(files) == 0)
-                error("You must specify at least one filename when calling 'pkg install'\n");
+                error("You must specify at least one filename when calling 'pkg install'");
             endif
             install(files, deps, prefix);
         case "uninstall"
             if (length(files) == 0)
-                error("You must specify at least one package when calling 'pkg uninstall'\n");
+                error("You must specify at least one package when calling 'pkg uninstall'");
             endif
             uninstall(files, deps);
         case "load"
             if (length(files) == 0)
-                error("You must specify at least one package or 'all' when calling 'pkg load'\n");
+                error("You must specify at least one package or 'all' when calling 'pkg load'");
             endif
             load_packages(files, deps);
         case "prefix"
             if (length(files) == 0 && nargout == 0)
                 disp(prefix);
             elseif (length(files) == 0 && nargout == 1)
                 local_packages = prefix;
             elseif (length(files) == 1 && nargout == 0 && ischar(files{1}))
                 prefix = files{1};
                 if (!strcmp(prefix(end), "/")) prefix(end+1) = "/"; endif
             else
                 error("You must specify a prefix directory, or request an output arguement");
             endif
         otherwise
-            error("You must specify a valid action for 'pkg'. See 'help pkg' for details\n");
+            error("You must specify a valid action for 'pkg'. See 'help pkg' for details");
     endswitch
 endfunction
 
 function install(files, handle_deps, prefix)
     ## Set parameters depending on wether or not the installation
     ## is system-wide (global) or local.
     local_list = tilde_expand("~/.octave_packages");
     global_list = fullfile (OCTAVE_HOME (), "/share/octave/octave_packages");
     
     global_install = issuperuser();
  
     # Check that the directory in prefix exist. If it doesn't: create it!
     if (!exist(prefix, "dir"))
         warning("Creating installation directory %s", prefix);
         [status, msg] = mkdir(prefix);
         if (status != 1)
-            error("Could not create installation directory: %s\n", msg);
+            error("Could not create installation directory: %s", msg);
         endif
     endif
 
     ## Get the list of installed packages
     [local_packages, global_packages] = installed_packages();
     installed_packages = {local_packages{:} global_packages{:}};        
     
     if (global_install)
@@ -197,26 +197,26 @@ function install(files, handle_deps, pre
         for i = 1:length(files)
             tgz = files{i};
             
             ## Create a temporary directory 
             tmpdir = tmpnam();
             tmpdirs{end+1} = tmpdir;
             [status, msg] = mkdir(tmpdir);
             if (status != 1)
-                error("Couldn't create temporary directory: %s\n", msg);
+                error("Couldn't create temporary directory: %s", msg);
             endif
 
             ## Uncompress the package
             untar(tgz, tmpdir);
 
             ## Get the name of the directories produced by tar
             [dirlist, err, msg] = readdir(tmpdir);
             if (err)
-                error("Couldn't read directory produced by tar: %s\n", msg);
+                error("Couldn't read directory produced by tar: %s", msg);
             endif
 
 	    if (length(dirlist) > 3)
 	      error("Bundles of packages are not allowed")
 	    endif
             
             for k = 3:length(dirlist) # the two first entries of dirlist are "." and ".."
                 packdir = [tmpdir "/" dirlist{k} "/"];
@@ -228,18 +228,17 @@ function install(files, handle_deps, pre
                 ## Read the DESCRIPTION file
                 filename = [packdir "DESCRIPTION"];
                 desc = get_description(filename);
 
 		## Verify that package name corresponds with filename
 		[dummy, nm] = fileparts(tgz); 
 		if ((length(nm) >= length(desc.name)) &&
 		    ! strcmp(desc.name,nm(1:length(desc.name))))
-		  error(["Package name '",desc.name,"' doesn't correspond",
-			 "to its filename '",nm,"'"]);
+		  error("Package name '%s' doesn't correspond to its filename '%s'", desc.name, nm);
 		endif
 
                 ## Set default installation directory
                 desc.dir = [prefix "/" desc.name "-" desc.version];
             
                 ## Save desc
                 descriptions{end+1} = desc;
 
@@ -362,19 +361,19 @@ function install(files, handle_deps, pre
         ## Something went wrong, delete tmpdirs
         for i = 1:length(tmpdirs)
             rm_rf(tmpdirs{i});
         endfor
         for i = 1:length(descriptions)
             rm_rf(descriptions{i}.dir);
         endfor
         if (global_install)
-            error("Couldn't append to %s: %s\n", global_list, lasterr()(8:end));
+            error("Couldn't append to %s: %s", global_list, lasterr()(8:end));
         else
-            error("Couldn't append to %s: %s\n", local_list, lasterr()(8:end));
+            error("Couldn't append to %s: %s", local_list, lasterr()(8:end));
         endif
     end_try_catch
 
     ## All is well, let's clean up
     for i = 1:length(tmpdirs)
         [status, msg] = rm_rf(tmpdirs{i});
         if (status != 1)
             warning("Couldn't clean up after my self: %s\n", msg);
@@ -397,82 +396,80 @@ function uninstall(pkgnames, handle_deps
     global_list = fullfile (OCTAVE_HOME (), "/share/octave/octave_packages");
     ## Get the list of installed packages
     [local_packages, global_packages] = installed_packages();
     if (issuperuser())
         installed_packages = global_packages;
     else
         installed_packages = local_packages;
     endif
-    
+
     num_packages = length(installed_packages);
     delete_idx = [];
     for i = 1:num_packages
         cur_name = installed_packages{i}.name;
         if (any(strcmp(cur_name, pkgnames)))
             delete_idx(end+1) = i;
         endif
     endfor
-    
+
     ## Are all the packages that should be uninstalled already installed?
     if (length(delete_idx) != length(pkgnames))
         # XXX: We should have a better error message
-        error("Some of the packages you want to uninstall are not installed.\n");
+        error("Some of the packages you want to uninstall are not installed.");
     endif
 
     ## Compute the packages that will remain installed
     idx = complement(delete_idx, 1:num_packages);
     remaining_packages = {installed_packages{idx}};
     
     ## Check dependencies
     if (handle_deps)
-        ok = true;
         error_text = "";
         for i = 1:length(remaining_packages)
             desc = remaining_packages{i};
             bad_deps = get_unsatisfied_deps(desc, remaining_packages);
             
             ## Will the uninstallation break any dependencies?
             if (!isempty(bad_deps))
-                ok = false;
                 for i = 1:length(bad_deps)
                     dep = bad_deps{i};
                     error_text = [error_text "  " desc.name " needs " ...
                                   dep.package  " " dep.operator " " ...
                                   dep.version  "\n"];
                 endfor
             endif
         endfor
 
-        if (!ok)
+        if (! isempty(error_text))
             error("The following dependencies where unsatisfied:\n  %s", error_text);
         endif
     endif
 
     ## Delete the directories containing the packages
     for i = delete_idx
         desc = installed_packages{i};
         ## If an 'on_uninstall.m' exist, call it!
         if (exist([desc.dir "/packinfo/on_uninstall.m"], "file"))
             try
                 wd = pwd();
                 cd([desc.dir "/packinfo"]);
                 on_uninstall(desc);
                 cd(wd);
             catch
                 # XXX: Should this rather be an error?
-                warning("The 'on_uninstall' script returned the following error: %s", lasterr);
+                warning("The 'on_uninstall' script retsurned the following error: %s", lasterr);
                 cd(wd);
             end_try_catch
         endif
         ## Do the actual deletion
         rmpath(desc.dir);
         [status, msg] = rm_rf(desc.dir);
         if (status != 1)
-            error("Couldn't delete directory %s: %s\n", desc.dir, msg);
+            error("Couldn't delete directory %s: %s", desc.dir, msg);
         endif
     endfor
 
     ## Write a new ~/.octave_packages
     if (issuperuser())
         if (length(remaining_packages) == 0)
             unlink(global_list);
         else
@@ -499,64 +496,64 @@ function prepare_installation(desc, pack
     if (exist([packdir "pre_install.m"], "file"))
         wd = pwd();
         try
             cd(packdir);
             pre_install(desc); 
             cd(wd);
         catch
             cd(wd);
-            error("The pre-install function returned the following error: %s\n", lasterr);
+            error("The pre-install function returned the following error: %s", lasterr);
         end_try_catch
     endif
 
     ## If the directory "inst" doesn't exist, we create it
     if (!exist([packdir "inst"], "dir"))
         [status, msg] = mkdir([packdir "inst"]);
         if (status != 1)
             rm_rf(desc.dir);
-            error("The 'inst' directory did not exist and could not be created: %s\n", msg);
+            error("The 'inst' directory did not exist and could not be created: %s", msg);
         endif
     endif
 endfunction
 
 function configure_make (desc, packdir)   
 	## Perform ./configure, make, make install in "src"
     if (exist([packdir "src"], "dir"))
         src = [packdir "src/"];
         ## configure
         if (exist([src "configure"], "file"))
             [status, output] = system(["cd " src " ;./configure --prefix=" desc.dir]);
             if (status != 0)
                 rm_rf(desc.dir);
-                error("The configure script returned the following error: %s\n", output);
+                error("The configure script returned the following error: %s", output);
             endif
         endif
 
         ## make
         if (exist([src "Makefile"], "file"))
             [status, output] = system(["export INSTALLDIR=" desc.dir "; make -C " src]);
             if (status != 0)
                 rm_rf(desc.dir);
-                error("'make' returned the following error: %s\n", output);
+                error("'make' returned the following error: %s", output);
             endif
             %# make install
             %[status, output] = system(["export INSTALLDIR=" desc.dir "; make install -C " src]);
             %if (status != 0)
             %    rm_rf(desc.dir);
-            %    error("'make install' returned the following error: %s\n", output);
+            %    error("'make install' returned the following error: %s", output);
             %endif
         endif
 
         ## Copy files to "inst" (this is instead of 'make install')
         files = [src "FILES"];
         if (exist(files, "file"))
             [fid, msg] = fopen(files, "r");
             if (fid < 0)
-                error("Couldn't open %s: %s\n", files, msg);
+                error("Couldn't open %s: %s", files, msg);
             endif
             filenames = char(fread(fid))';
             filenames = strrep(filenames, "\n", " ");
             [status, output] = system(["cd " src "; cp " filenames " " packdir "inst/"]);
             fclose(fid);
         else
             m = dir([src "*.m"]);
             oct = dir([src "*.oct"]);
@@ -569,17 +566,17 @@ function configure_make (desc, packdir)
             endif
             
             if (!all(isspace(f)))
                 [status, output] = system(["cp -R " f " " packdir "inst/"]);
             endif
         endif
         if (status != 0)
             rm_rf(desc.dir);
-            error("Couldn't copy files from 'src' to 'inst': %s\n", output);
+            error("Couldn't copy files from 'src' to 'inst': %s", output);
         endif
     endif
 endfunction
 
 function pkg = extract_pkg (nm, pat)
   fid = fopen (nm, "rt");
   pkg = "";
   if (fid >= 0)
@@ -642,74 +639,74 @@ function create_pkgadddel (desc, packdir
   endif
 endfunction
 
 function copy_files (desc, packdir, bindir)
     ## Create the installation directory
     if (! exist (desc.dir, "dir"))
       [status, output] = mkdir (desc.dir);
       if (status != 1)
-	error("Couldn't create installation directory %s : %s\n", 
+	error("Couldn't create installation directory %s : %s", 
 	      desc.dir, output);
       endif
     endif
 
     ## Copy the files from "inst" to installdir
     if (! dirempty([packdir "inst"]))
       [status, output] = system(["cp -R " packdir "inst/* " desc.dir]);
       if (status != 0)
           rm_rf(desc.dir);
-          error("Couldn't copy files to the installation directory\n");
+          error("Couldn't copy files to the installation directory");
       endif
     endif
 
     ## Create the "packinfo" directory
     packinfo = [desc.dir "/packinfo/"];
     [status, msg] = mkdir (packinfo);
     if (status != 1)
         rm_rf(desc.dir);
-        error("Couldn't create packinfo directory: %s\n", msg);
+        error("Couldn't create packinfo directory: %s", msg);
     endif
 
     ## Copy DESCRIPTION
     [status, output] = system(["cp " packdir "DESCRIPTION " packinfo]);
     if (status != 0)
        rm_rf(desc.dir);
-       error("Couldn't copy DESCRIPTION: %s\n", output);
+       error("Couldn't copy DESCRIPTION: %s", output);
     endif
 
     ## Copy COPYING
     [status, output] = system(["cp " packdir "COPYING " packinfo]);
     if (status != 0)
        rm_rf(desc.dir);
-       error("Couldn't copy COPYING: %s\n", output);
+       error("Couldn't copy COPYING: %s", output);
     endif
 
     ## Is there an INDEX file to copy or should we generate one?
     if (exist([packdir "INDEX"], "file"))
         [status, output] = system(["cp " packdir "INDEX " packinfo]);
         if (status != 0)
             rm_rf(desc.dir);
-            error("Couldn't copy INDEX file: %s\n", output);
+            error("Couldn't copy INDEX file: %s", output);
         endif
     else
         try
             write_INDEX(desc, [packdir "inst"], [packinfo "INDEX"]);
         catch
             rm_rf(desc.dir);
             error(lasterr);
         end_try_catch
     endif
     
     ## Is there an 'on_uninstall.m' to install?
     if (exist([packdir "on_uninstall.m"], "file"))
         [status, output] = system(["cp " packdir "on_uninstall.m " packinfo]);
         if (status != 0)
             rm_rf(desc.dir);
-            error("Couldn't copy on_uninstall.m: %s\n", output);
+            error("Couldn't copy on_uninstall.m: %s", output);
         endif
     endif
 
     ## Is there a doc/ directory that needs to be installed
     if (exist([packdir "doc"], "dir") && !dirempty([packdir "doc"]))
        [status, output] = system(["cp -pR " packdir "doc " desc.dir]);
     endif
 
@@ -725,17 +722,17 @@ function finish_installation (desc, pack
         wd = pwd();
         try
             cd(packdir);
             post_install(desc);
             cd(wd);
         catch
             cd(wd);
             rm_rf(desc.dir);
-            error("The post_install function returned the following error: %s\n", lasterr);
+            error("The post_install function returned the following error: %s", lasterr);
         end_try_catch
     endif
 endfunction
 
 function out = issuperuser()
     out = strcmp(getenv("USER"), "root");
 endfunction
 
@@ -747,19 +744,19 @@ function verify_directory(dir)
         if (!exist([dir "/" f{1}], "file"))
             error("Package is missing file: %s", f{1});
         endif
     endfor
 endfunction
 
 ## This function parses the DESCRIPTION file
 function desc = get_description(filename)
-    fid = fopen(filename, "r");
+    [fid, msg] = fopen(filename, "r");
     if (fid == -1)
-        error("The DESCRIPTION file %s could not be read\n", filename);
+        error("The DESCRIPTION file %s could not be read: %s", filename, msg);
     endif
 
     desc = struct();
     
     line = fgetl(fid);
     while (line != -1)
         ## Comments
         if (line(1) == "#")
@@ -775,31 +772,31 @@ function desc = get_description(filename
             if (length(colon) == 0)
                 disp("Skipping line.");
             else
                 colon = colon(1);
                 keyword = tolower(strip(line(1:colon-1)));
                 value   = strip(line(colon+1:end));
                 if (length(value) == 0)
                     fclose(fid);
-                    error("The keyword %s have empty value\n", desc.keywords{end});
+                    error("The keyword %s have empty value", desc.keywords{end});
                 endif
                 desc.(keyword) = value;
             endif
         endif
         line = fgetl(fid);
     endwhile    
     fclose(fid);
     
     ## Make sure all is okay
     needed_fields = {"name", "version", "date", "title", ...
                      "author", "maintainer", "description"};
     for f = needed_fields
         if (!isfield(desc, f{1}))
-            error("Description is missing needed field %s\n", f{1});
+            error("Description is missing needed field %s", f{1});
         endif
     endfor
     desc.version = fix_version(desc.version);
     if (isfield(desc, "depends"))
         desc.depends = fix_depends(desc.depends);
     else
         desc.depends = "";
     endif
@@ -821,17 +818,17 @@ function out = fix_version(v)
         major = str2num(v(1:dots(1)-1));
         minor = str2num(v(dots(1)+1:dots(2)-1));
         rev   = str2num(v(dots(2)+1:end));
         if (length(major) != 0 && length(minor) != 0 && length(rev) != 0)
             out = sprintf("%d.%d.%d", major, minor, rev);
             return
         endif
     endif
-    error("Bad version string: %s\n", v);
+    error("Bad version string: %s", v);
 endfunction
 
 ## Makes sure the depends field is of the right format.
 ## This function returns a cell of structures with the following fields:
 ##   package, version, operator
 function deps_cell = fix_depends(depends)
     deps = split_by(tolower(depends), ",");
     deps_cell = cell(1, length(deps));
@@ -855,17 +852,17 @@ function deps_cell = fix_depends(depends
             endfor
              
             if (length(idx) != 2)
                 error(["There's something wrong with the DESCRIPTION file. " ...
                        "The dependency %s has the wrong syntax.\n"], dep);
             endif
             operator = parts{idx(1)};
             if (!any(strcmp(operator, {">=", "<=", "=="}))) ## XXX: I belive we also support ">" and "<" 
-                error("Unsupported operator: %s\n", operator);
+                error("Unsupported operator: %s", operator);
             endif
             version  = fix_version(parts{idx(2)});
              
         ## If no version is specified for the dependency
         ## we say that the version should be greater than 
         ## or equal to 0.0.0
         else
             package = tolower(strip(dep));
@@ -912,43 +909,43 @@ endfunction
 ## Creates an INDEX file for a package that doesn't provide one.
 ##   'desc'  describes the package.
 ##   'dir'   is the 'inst' direcotyr in temporary directory.
 ##   'INDEX' is the name (including path) of resulting INDEX file.
 function write_INDEX(desc, dir, INDEX)
     ## Get names of functions in dir
     [files, err, msg] = readdir(dir);
     if (err)
-        error("Couldn't read directory %s: %s\n", dir, msg);
+        error("Couldn't read directory %s: %s", dir, msg);
     endif
     
     functions = {};
     for i = 1:length(files)
         file = files{i};
         lf = length(file);
         if (lf > 2 && strcmp( file(end-1:end), ".m" ))
             functions{end+1} = file(1:end-2);
         elseif (lf > 4 && strcmp( file(end-3:end), ".oct" ))
             functions{end+1} = file(1:end-4);
         endif
     endfor
     
     ## Does desc have a categories field?
     if (!isfield(desc, "categories"))
-        error("The DESCRIPTION file must have a Categories field, when no INDEX file is given.\n");
+        error("The DESCRIPTION file must have a Categories field, when no INDEX file is given.");
     endif
     categories = split_by(desc.categories, ",");
     if (length(categories) < 1)
-        error("The Category field is empty.\n");
+        error("The Category field is empty.");
     endif
     
     ## Write INDEX
     fid = fopen(INDEX, "w");
     if (fid == -1)
-        error("Couldn't open %s for writing.\n", INDEX);
+        error("Couldn't open %s for writing.", INDEX);
     endif
     fprintf(fid, "%s >> %s\n", desc.name, desc.title);
     fprintf(fid, "%s\n", categories{1});
     fprintf(fid, "  %s\n", functions{:});
     fclose(fid);
 endfunction
 
 function bad_deps = get_unsatisfied_deps(desc, installed_packages)
@@ -976,57 +973,16 @@ function bad_deps = get_unsatisfied_deps
             endfor
             if (!ok)
                 bad_deps{end+1} = dep;
             endif
         endif
     endfor
 endfunction
 
-## Compares to version string using the given operator
-## Example: v1="0.1.0", v2="0.0.9", operator=">=" => true
-## TODO: This function is very long and complex! Can't it be simplified?
-function out = compare_versions(v1, v2, operator)
-    dot1 = find(v1 == ".");
-    dot2 = find(v2 == ".");
-    if (length(dot1) != 2 || length(dot2) != 2)
-        error("Given version strings are not valid: %s %s", v1, v2);
-    endif
-    
-    major1 = str2num( v1( 1:dot1(1)-1 ) );
-    minor1 = str2num( v1( dot1(1)+1:dot1(2)-1 ) );
-    rev1   = str2num( v1( dot1(2)+1:end ) );
-    major2 = str2num( v2( 1:dot2(1)-1 ) );
-    minor2 = str2num( v2( dot2(1)+1:dot2(2)-1 ) );
-    rev2   = str2num( v2( dot2(2)+1:end) );
-    mmr = [sign(major1-major2), sign(minor1-minor2), sign(rev1-rev2)];
-    
-    if (length(operator) > 1 && operator(2) == "=" && !any(mmr))
-        out = 1;
-        return;
-    elseif (operator(1) == "<")
-        mmr = -mmr;
-    endif
-    
-    ## Now we ony need to decide if v1 > v2
-    if (mmr(1) == 1)
-        out = 1;
-    elseif (mmr(1) == -1)
-        out = 0;
-    elseif (mmr(2) == 1)
-        out = 1;
-    elseif (mmr(2) == -1)
-        out = 0;
-    elseif (mmr(3) == 1)
-        out = 1;
-    else
-        out = 0;
-    endif
-endfunction
-
 function [out1, out2] = installed_packages()
     local_list = tilde_expand("~/.octave_packages");
     global_list = fullfile (OCTAVE_HOME (), "/share/octave/octave_packages");
     ## Get the list of installed packages
     try
         local_packages = load(local_list).local_packages;
     catch
         local_packages = {};
@@ -1106,17 +1062,17 @@ function load_packages(files, handle_dep
     if (length(files) == 1 && strcmp(files{1}, "all"))
         dirs = pdirs;
     ## load package_name1 ...
     else
         dirs = {};
         for i = 1:length(files)
             idx = strcmp(pnames, files{i});
             if (!any(idx))
-                error("Package %s is not installed\n", files{i});
+                error("Package %s is not installed", files{i});
             endif
             dirs{end+1} = pdirs{idx};
             if (handle_deps)
                 pdep = pdeps{idx};
                 for j = 1:length(pdep)
                     depname = pdep{j}.package;
                     if (strcmp(depname, "octave")) continue; endif
                     idx = strcmp(pnames, depname);
