# HG changeset patch
# User Rik <rik@octave.org>
# Date 1356461977 28800
#      Tue Dec 25 10:59:37 2012 -0800
# Node ID 605488d19cb32d987a10c4768f853f9ac480ea81
# Parent  1ea5f8a4a91448cb69112a8296bae0c11db379fa
configure.ac: Avoid non-portable sh technique of double-quoted, backtick expressions.

* configure.ac: Replace var="`...\"...\"...`" shell expressions with
var=`..."..."...` for portability.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2252,31 +2252,32 @@ do
 
   if test -z "$JAVA"; then
     AC_MSG_WARN([No Java executable found.  Octave will not be able to call Java methods.])   
     break
   fi
 
   if test -z "$JAVA_HOME"; then
     ## Find JAVA_HOME for JRE by running java and querying properties.
-    JAVA_TMP_HOME="`\"$JAVA\" -classpath ${srcdir}/build-aux OctJavaQry JAVA_HOME`"
+    JAVA_TMP_HOME=`"$JAVA" -classpath ${srcdir}/build-aux OctJavaQry JAVA_HOME`
     ## Strip directory back to top-level installation dir (JAVA_HOME for JDK).
-    JAVA_HOME="`echo $JAVA_TMP_HOME | sed -e 's|[[/\\]]bin[[/\\]]\?$||' | sed -e 's|[[/\\]]jre[[/\\]]\?$||'`"
+    JAVA_HOME=`echo $JAVA_TMP_HOME | sed -e 's|[[/\\]]bin[[/\\]]\?$||' | sed -e 's|[[/\\]]jre[[/\\]]\?$||'`
   fi
 
   case $canonical_host_type in
     *-mingw* | *-msdosmsvc*)
-      ## Under Win32 platform, we want JAVA_HOME to be in MSYS format, that is without
-      ## colon and backslashes, as it is also used as path separator. Use quoted paths
-      ## as Java may be installed in a path with whitespaces (e.g. C:\Program Files\Java\...).
+      ## Under Win32 platform, we want JAVA_HOME to be in MSYS format, that is
+      ## without colon and backslashes, as it is also used as path separator.
+      ## Use quoted paths as Java may be installed in a path with whitespaces
+      ## (e.g. C:\Program Files\Java\...).
       if test -n "$JAVA_HOME"; then
-        JAVA_HOME="`cd \"$JAVA_HOME\" && pwd`"
-	## Maybe this will be useful in the future, as native Java won't probably
-	## understand MSYS paths.
-	JAVA_HOME_NATIVE="`cd \"$JAVA_HOME\" && pwd -W`"
+        JAVA_HOME=`cd "$JAVA_HOME" && pwd`
+        ## Maybe this will be useful in the future, as native Java won't
+        ## understand MSYS paths.
+        JAVA_HOME_NATIVE=`cd "$JAVA_HOME" && pwd -W`
       fi
     ;;
     *)
       JAVA_HOME_NATIVE="$JAVA_HOME"
     ;;
   esac
 
   ## Amend search path for JAVAC and JAR.
@@ -2302,19 +2303,19 @@ do
   java_minor=[`echo $java_version | sed -e 's/^\([0-9][0-9]*\)\.\([0-9][0-9]*\)\..*$/\2/'`]
   if test $java_major -ge 1 && test $java_minor -ge 5; then
     :  # Version is ok.  Do nothing.
   else
     AC_MSG_WARN([Java version is too old (< 1.5).  Octave will not be able to call Java methods.])
     break
   fi
 
-  ## At this point Win32/MSVC systems have enough configuration data. We assume
-  ## that all appropriate variables (e.g. INCLUDE and LIB) have already the required
-  ## paths to compile and link against JDK.
+  ## At this point Win32/MSVC systems have enough configuration data.  We
+  ## assume that all appropriate variables (e.g. INCLUDE and LIB) already have
+  ## the required paths to compile and link against JDK.
   case $canonical_host_type in
     *-msdosmsvc*)
       build_java=true
       JAVA_LIBS=-ladvapi32
       AC_DEFINE(HAVE_JAVA, 1,
         [Define to 1 if Java is available and is at least version 1.5])
       break
     ;;
@@ -2431,21 +2432,21 @@ do
         JAVA_CPPFLAGS="-I${JAVA_CPPFLAGS}/include -I${JAVA_CPPFLAGS}/include/linux"
       else
         JAVA_CPPFLAGS="-I${JAVA_HOME}/include -I${JAVA_HOME}/include/linux"
       fi
     ;;
   esac
 
   ## Verify jni.h include file exists.
-	JNI_PATH=`echo $JAVA_CPPFLAGS | sed -e 's/-I//g'`
+  JNI_PATH=`echo $JAVA_CPPFLAGS | sed -e 's/-I//g'`
   have_jni=false
-	for dir in $JNI_PATH; do 
-	  if test -f "${dir}/jni.h"; then have_jni=true; break; fi
-	done
+  for dir in $JNI_PATH; do 
+    if test -f "${dir}/jni.h"; then have_jni=true; break; fi
+  done
   if test $have_jni = true; then
     AC_MSG_RESULT([$dir])
   else
     AC_MSG_RESULT([not found])
     AC_MSG_WARN([Include file <jni.h> not found.  Octave will not be able to call Java methods.])
     break
   fi
 
