# HG changeset patch
# User jwe
# Date 1035496185 0
#      Thu Oct 24 21:49:45 2002 +0000
# Node ID 0435429c1050f0631865b054243ab7a49d6827a7
# Parent  da4c69a811378a41241128607a482948c5819dd5
[project @ 2002-10-24 21:49:45 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,13 @@
 2002-10-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* lo-sstream.h: Undef HAVE_SSTREAM if using a version of g++
+	earlier than 3.0.
+
 	* Makefile.in (LINK_DEPS): Include $(LIBKPATHSEA) here.
 	(liboctave.$(SHLEXT)): Not here.
 
 2002-10-17  Paul Kienzle <pkienzle@users.sf.net>
 
 	* oct-shlib.cc (octave_w32_shlib): New class to support Windows.
 
 2002-10-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/liboctave/lo-sstream.h b/liboctave/lo-sstream.h
--- a/liboctave/lo-sstream.h
+++ b/liboctave/lo-sstream.h
@@ -18,16 +18,20 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_liboctave_sstream_h)
 #define octave_liboctave_sstream_h 1
 
+#if defined (__GNUG__) && __GNUC__ < 3
+#undef HAVE_SSTREAM
+#endif
+
 #ifdef HAVE_SSTREAM
 
 #include <sstream>
 
 #define STRINGSTREAMBUF std::stringbuf
 
 #define ISSTREAM std::istringstream
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,17 @@
 2002-10-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* cutils.c (octave_vsnprintf): Buffer and buffer size now static.
+	* utils.cc (octave_vformat): Don't free buffer returned from
+	octave_vsnprintf here.
+
+	* ov-usr-fcn.cc (va_arg, va_start, vr_val): Only print warning
+	once per session.
+
 	* ov-mapper.cc (octave_mapper::apply): Don't try real_type case if
 	arg is a string and we have a ch_map_fcn.
 
 	* Makefile.in: Add $(LIBKPATHSEA) to $(OCTAVE_LIBS) if
 	$(INCLUDE_LINK_DEPS) is false, not if $(SHARED_LIBS) is false.
 
 2002-10-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/src/cutils.c b/src/cutils.c
--- a/src/cutils.c
+++ b/src/cutils.c
@@ -114,23 +114,29 @@ octave_strcasecmp (const char *s1, const
 }
 
 int
 octave_strncasecmp (const char *s1, const char *s2, size_t n)
 {
   return strncasecmp (s1, s2, n);
 }
 
+// We manage storage.  User should not free it, and its contents are
+// only valid until next call to vsnprintf.
+
 char *
 octave_vsnprintf (const char *fmt, va_list args)
 {
 #if defined (HAVE_VSNPRINTF)
-  size_t size = 100;
+  static size_t size = 100;
 
-  char *buf = malloc (size);
+  static char *buf = 0;
+
+  if (! buf)
+    buf = malloc (size);
 
   while (1)
     {
       int nchars = vsnprintf (buf, size, fmt, args);
 
       if (nchars > -1)
 	return buf;
       else
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -598,17 +598,23 @@ DEFUNX ("va_arg", Fva_arg, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} va_arg ()\n\
 Return the value of the next available argument and move the internal\n\
 pointer to the next argument.  It is an error to call @code{va_arg}\n\
 when ther eare no more arguments available, or in a function that\n\
 has not been declared to take a variable number of parameters.\n\
 @end deftypefn")
 {
-  ::warning ("va_arg is deprecated; use varargin instead");
+  static bool warned = false;
+
+  if (! warned)
+    {
+      ::warning ("va_arg is deprecated; use varargin instead");
+      warned = true;
+    }
 
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       if (curr_function)
@@ -634,17 +640,23 @@ DEFUN (va_start, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} va_start ()\n\
 Position an internal pointer to the first unnamed argument in\n\
 functions that have been declared to accept a variable number of\n\
 arguments.  It is an error to call @code{va_start} in a function\n\
 that has not been declared to take a variable number of parameters.\n\
 @end deftypefn")
 {
-  ::warning ("va_start is deprecated; use varargin instead");
+  static bool warned = false;
+
+  if (! warned)
+    {
+      ::warning ("va_start is deprecated; use varargin instead");
+      warned = true;
+    }
 
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       if (curr_function)
@@ -672,17 +684,23 @@ DEFUN (vr_val, args, ,
 Each time this function is called, it places the value of its argument\n\
 at the end of the list of values to return from the current\n\
 function.  Once @code{vr_val} has been called, there is no way to go\n\
 back to the beginning of the list and rewrite any of the return\n\
 values.  This function may only be called within functions that have\n\
 been declared to return an unspecified number of output arguments.\n\
 @end deftypefn")
 {
-  ::warning ("vr_val is deprecated; use varargout instead");
+  static bool warned = false;
+
+  if (! warned)
+    {
+      ::warning ("vr_val is deprecated; use varargout instead");
+      warned = true;
+    }
 
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       if (curr_function)
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -712,41 +712,27 @@ octave_format (std::ostream& os, const c
 
 extern int
 octave_vformat (std::ostream& os, const char *fmt, va_list args)
 {
   int retval = -1;
 
 #if defined (__GNUG__) && !CXX_ISO_COMPLIANT_LIBRARY
 
-  OSSTREAM buf;
-
-  buf.vform (fmt, args);
-
-  buf << OSSTREAM_ENDS;
-
-  std::string s = OSSTREAM_STR (buf);
-
-  OSSTREAM_FREEZE (buf);
-
-  os << s;
-
-  retval = s.length ();
+  os.vform (fmt, args);
 
 #else
 
   char *s = octave_vsnprintf (fmt, args);
 
   if (s)
     {
       os << s;
 
       retval = strlen (s);
-
-      free (s);
     }
 
 #endif
 
   return retval;
 }
 
 void
