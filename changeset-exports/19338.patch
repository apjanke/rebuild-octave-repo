# HG changeset patch
# User Rik <rik@octave.org>
# Date 1416592175 28800
#      Fri Nov 21 09:49:35 2014 -0800
# Node ID 16cdbe882ff52eb83da15c290df4d43fc79b60f7
# Parent  d47e50953abcbe9385d5642390e5f4e0b834c337
build: Fix unused variable warnings when building with --without-qrupdate.

* CmplxQR.cc (delete_col, shift_cols): Remove unused variable m (# of rows).
* CmplxQR.cc (delete_row): Remove unused variable n (# of cols).

* dbleQR.cc (delete_col, shift_cols): Remove unused variable m (# of rows).
* dbleQR.cc (delete_row): Remove unused variable n (# of cols).

* fCmplxQR.cc (delete_col, shift_cols): Remove unused variable m (# of rows).
* fCmplxQR.cc (delete_row): Remove unused variable n (# of cols).

* floatQR.cc (delete_col, shift_cols): Remove unused variable m (# of rows).
* floatQR.cc (delete_row): Remove unused variable n (# of cols).

diff --git a/liboctave/numeric/CmplxQR.cc b/liboctave/numeric/CmplxQR.cc
--- a/liboctave/numeric/CmplxQR.cc
+++ b/liboctave/numeric/CmplxQR.cc
@@ -613,33 +613,31 @@ ComplexQR::insert_col (const ComplexMatr
     }
 }
 
 void
 ComplexQR::delete_col (octave_idx_type j)
 {
   warn_qrupdate_once ();
 
-  octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
 
   if (j < 0 || j > n-1)
     (*current_liboctave_error_handler) ("qrdelete: index out of range");
   else
     {
       init (::delete_col (q*r, j), get_type ());
     }
 }
 
 void
 ComplexQR::delete_col (const Array<octave_idx_type>& j)
 {
   warn_qrupdate_once ();
 
-  octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
 
   Array<octave_idx_type> jsi;
   Array<octave_idx_type> js = j.sort (jsi, 0, DESCENDING);
   octave_idx_type nj = js.length ();
   bool dups = false;
   for (octave_idx_type i = 0; i < nj - 1; i++)
     dups = dups && js(i) == js(i+1);
@@ -676,34 +674,32 @@ ComplexQR::insert_row (const ComplexRowV
 }
 
 void
 ComplexQR::delete_row (octave_idx_type j)
 {
   warn_qrupdate_once ();
 
   octave_idx_type m = r.rows ();
-  octave_idx_type n = r.columns ();
 
   if (! q.is_square ())
     (*current_liboctave_error_handler) ("qrdelete: dimensions mismatch");
   else if (j < 0 || j > m-1)
     (*current_liboctave_error_handler) ("qrdelete: index out of range");
   else
     {
       init (::delete_row (q*r, j), get_type ());
     }
 }
 
 void
 ComplexQR::shift_cols (octave_idx_type i, octave_idx_type j)
 {
   warn_qrupdate_once ();
 
-  octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
 
   if (i < 0 || i > n-1 || j < 0 || j > n-1)
     (*current_liboctave_error_handler) ("qrshift: index out of range");
   else
     {
       init (::shift_cols (q*r, i, j), get_type ());
     }
diff --git a/liboctave/numeric/dbleQR.cc b/liboctave/numeric/dbleQR.cc
--- a/liboctave/numeric/dbleQR.cc
+++ b/liboctave/numeric/dbleQR.cc
@@ -608,33 +608,31 @@ QR::insert_col (const Matrix& u, const A
     }
 }
 
 void
 QR::delete_col (octave_idx_type j)
 {
   warn_qrupdate_once ();
 
-  octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
 
   if (j < 0 || j > n-1)
     (*current_liboctave_error_handler) ("qrdelete: index out of range");
   else
     {
       init (::delete_col (q*r, j), get_type ());
     }
 }
 
 void
 QR::delete_col (const Array<octave_idx_type>& j)
 {
   warn_qrupdate_once ();
 
-  octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
 
   Array<octave_idx_type> jsi;
   Array<octave_idx_type> js = j.sort (jsi, 0, DESCENDING);
   octave_idx_type nj = js.length ();
   bool dups = false;
   for (octave_idx_type i = 0; i < nj - 1; i++)
     dups = dups && js(i) == js(i+1);
@@ -669,34 +667,32 @@ QR::insert_row (const RowVector& u, octa
       init (::insert_row (q*r, j, u), get_type ());
     }
 }
 
 void
 QR::delete_row (octave_idx_type j)
 {
   octave_idx_type m = r.rows ();
-  octave_idx_type n = r.columns ();
 
   if (! q.is_square ())
     (*current_liboctave_error_handler) ("qrdelete: dimensions mismatch");
   else if (j < 0 || j > m-1)
     (*current_liboctave_error_handler) ("qrdelete: index out of range");
   else
     {
       init (::delete_row (q*r, j), get_type ());
     }
 }
 
 void
 QR::shift_cols (octave_idx_type i, octave_idx_type j)
 {
   warn_qrupdate_once ();
 
-  octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
 
   if (i < 0 || i > n-1 || j < 0 || j > n-1)
     (*current_liboctave_error_handler) ("qrshift: index out of range");
   else
     {
       init (::shift_cols (q*r, i, j), get_type ());
     }
diff --git a/liboctave/numeric/fCmplxQR.cc b/liboctave/numeric/fCmplxQR.cc
--- a/liboctave/numeric/fCmplxQR.cc
+++ b/liboctave/numeric/fCmplxQR.cc
@@ -623,33 +623,31 @@ FloatComplexQR::insert_col (const FloatC
     }
 }
 
 void
 FloatComplexQR::delete_col (octave_idx_type j)
 {
   warn_qrupdate_once ();
 
-  octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
 
   if (j < 0 || j > n-1)
     (*current_liboctave_error_handler) ("qrdelete: index out of range");
   else
     {
       init (::delete_col (q*r, j), get_type ());
     }
 }
 
 void
 FloatComplexQR::delete_col (const Array<octave_idx_type>& j)
 {
   warn_qrupdate_once ();
 
-  octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
 
   Array<octave_idx_type> jsi;
   Array<octave_idx_type> js = j.sort (jsi, 0, DESCENDING);
   octave_idx_type nj = js.length ();
   bool dups = false;
   for (octave_idx_type i = 0; i < nj - 1; i++)
     dups = dups && js(i) == js(i+1);
@@ -686,34 +684,32 @@ FloatComplexQR::insert_row (const FloatC
 }
 
 void
 FloatComplexQR::delete_row (octave_idx_type j)
 {
   warn_qrupdate_once ();
 
   octave_idx_type m = r.rows ();
-  octave_idx_type n = r.columns ();
 
   if (! q.is_square ())
     (*current_liboctave_error_handler) ("qrdelete: dimensions mismatch");
   else if (j < 0 || j > m-1)
     (*current_liboctave_error_handler) ("qrdelete: index out of range");
   else
     {
       init (::delete_row (q*r, j), get_type ());
     }
 }
 
 void
 FloatComplexQR::shift_cols (octave_idx_type i, octave_idx_type j)
 {
   warn_qrupdate_once ();
 
-  octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
 
   if (i < 0 || i > n-1 || j < 0 || j > n-1)
     (*current_liboctave_error_handler) ("qrshift: index out of range");
   else
     {
       init (::shift_cols (q*r, i, j), get_type ());
     }
diff --git a/liboctave/numeric/floatQR.cc b/liboctave/numeric/floatQR.cc
--- a/liboctave/numeric/floatQR.cc
+++ b/liboctave/numeric/floatQR.cc
@@ -606,33 +606,31 @@ FloatQR::insert_col (const FloatMatrix& 
     }
 }
 
 void
 FloatQR::delete_col (octave_idx_type j)
 {
   warn_qrupdate_once ();
 
-  octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
 
   if (j < 0 || j > n-1)
     (*current_liboctave_error_handler) ("qrdelete: index out of range");
   else
     {
       init (::delete_col (q*r, j), get_type ());
     }
 }
 
 void
 FloatQR::delete_col (const Array<octave_idx_type>& j)
 {
   warn_qrupdate_once ();
 
-  octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
 
   Array<octave_idx_type> jsi;
   Array<octave_idx_type> js = j.sort (jsi, 0, DESCENDING);
   octave_idx_type nj = js.length ();
   bool dups = false;
   for (octave_idx_type i = 0; i < nj - 1; i++)
     dups = dups && js(i) == js(i+1);
@@ -669,34 +667,32 @@ FloatQR::insert_row (const FloatRowVecto
 }
 
 void
 FloatQR::delete_row (octave_idx_type j)
 {
   warn_qrupdate_once ();
 
   octave_idx_type m = r.rows ();
-  octave_idx_type n = r.columns ();
 
   if (! q.is_square ())
     (*current_liboctave_error_handler) ("qrdelete: dimensions mismatch");
   else if (j < 0 || j > m-1)
     (*current_liboctave_error_handler) ("qrdelete: index out of range");
   else
     {
       init (::delete_row (q*r, j), get_type ());
     }
 }
 
 void
 FloatQR::shift_cols (octave_idx_type i, octave_idx_type j)
 {
   warn_qrupdate_once ();
 
-  octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
 
   if (i < 0 || i > n-1 || j < 0 || j > n-1)
     (*current_liboctave_error_handler) ("qrshift: index out of range");
   else
     {
       init (::shift_cols (q*r, i, j), get_type ());
     }
