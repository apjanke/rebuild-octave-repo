# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1549740751 0
#      Sat Feb 09 19:32:31 2019 +0000
# Node ID d6dd07dce2d27658772f71cb9fd7bc9bf78fd0d4
# Parent  17e7d310def85192ce73dab78f025ea71f840b4b
use inline functions for matching whitespace in lexer

* lex.ll (is_space_or_tab_or_eol): New static function.
Use is_space_or_tab and is_space_or_tab_or_eol to match whitespace.

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -318,16 +318,28 @@ object) relevant global values before an
                                                                         \
                if (id_tok >= 0)                                         \
                  return curr_lexer->count_token_internal (id_tok);      \
              }                                                          \
          }                                                              \
      }                                                                  \
    while (0)
 
+static inline bool
+is_space_or_tab (char c)
+{
+  return c == ' ' || c == '\t';
+}
+
+static inline bool
+is_space_or_tab_or_eol (char c)
+{
+  return c == ' ' || c == '\t' || c == '\n' || c == '\r';
+}
+
 %}
 
 D       [0-9]
 D_      [0-9_]
 S       [ \t]
 NL      ((\n)|(\r)|(\r\n))
 Im      [iIjJ]
 CCHAR   [#%]
@@ -720,17 +732,17 @@ ANY_INCLUDING_NL (.|{NL})
     curr_lexer->m_current_input_column = 1;
 
     bool have_space = false;
     size_t len = yyleng;
     size_t i = 0;
     while (i < len)
       {
         char c = yytext[i];
-        if (c == ' ' || c == '\t')
+        if (is_space_or_tab (c))
           {
             have_space = true;
             i++;
           }
         else
           break;
       }
 
@@ -754,17 +766,17 @@ ANY_INCLUDING_NL (.|{NL})
       {
         if (num_comment_chars == 1 && yytext[i++] == '{')
           {
             bool looks_like_block_comment = true;
 
             while (i < len)
               {
                 char c = yytext[i++];
-                if (! (c == ' ' || c == '\t' || c == '\n' || c == '\r'))
+                if (! is_space_or_tab_or_eol (c))
                   {
                     looks_like_block_comment = false;
                     break;
                   }
               }
 
             if (looks_like_block_comment)
               {
@@ -1797,22 +1809,16 @@ octave_realloc (void *ptr, yy_size_t siz
 }
 
 void
 octave_free (void *ptr, yyscan_t)
 {
   std::free (ptr);
 }
 
-static inline bool
-is_space_or_tab (char c)
-{
-  return c == ' ' || c == '\t';
-}
-
 static void
 display_character (char c)
 {
   if (isgraph (c))
     std::cerr << c;
   else
     switch (c)
       {
@@ -2458,17 +2464,17 @@ namespace octave
     xunput (c, yytxt);
   }
 
   bool
   base_lexer::looking_at_space (void)
   {
     int c = text_yyinput ();
     xunput (c);
-    return (c == ' ' || c == '\t');
+    return is_space_or_tab (c);
   }
 
   bool
   base_lexer::inside_any_object_index (void)
   {
     bool retval = false;
 
     for (const bool is_obj_idx : m_looking_at_object_index)
@@ -2863,17 +2869,17 @@ namespace octave
       warn_language_extension_continuation ();
     else
       offset = 3;
 
     bool have_space = false;
     while (offset < yylng)
       {
         char c = yytxt[offset];
-        if (c == ' ' || c == '\t')
+        if (is_space_or_tab (c))
           {
             have_space = true;
             offset++;
           }
         else
           break;
       }
 
@@ -3542,17 +3548,17 @@ namespace octave
 
     bool unput_comma = false;
 
     if (whitespace_is_significant () && space_follows_previous_token ())
       {
         int c = text_yyinput ();
         xunput (c);
 
-        bool space_after = (c == ' ' || c == '\t');
+        bool space_after = is_space_or_tab (c);
 
         if (! (prev_tok == '[' || prev_tok == '{'
                || previous_token_is_binop ()
                || ((tok == '+' || tok == '-') && space_after)))
           unput_comma = true;
       }
 
     return unput_comma;
