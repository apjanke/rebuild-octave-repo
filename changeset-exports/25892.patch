# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1537637165 -7200
#      Sat Sep 22 19:26:05 2018 +0200
# Node ID cb440b43a23620c9414682759eaa8becbb32ab72
# Parent  54635fcf99b8b66cb4ae592069db24eff1410623
fix editing an m-file with syntax error via edit ... menu (bug #54600)

* main-window.cc (handle_edit_mfile_request): use Fexist and Ffile_in_loadpath
  instead of F__while__ for getting information on function type and path

diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -1112,89 +1112,88 @@ namespace octave
   void main_window::handle_edit_mfile_request (const QString& fname,
                                                const QString& ffile,
                                                const QString& curr_dir,
                                                int line)
   {
     interpreter& interp
       = __get_interpreter__ ("main_window::clear_workspace_callback");
 
-    // Is it a regular function within the search path? (Call __which__)
-    octave_value_list fct = F__which__ (interp, ovl (fname.toStdString ()),0);
-    octave_map map = fct(0).map_value ();
-
-    std::string type = map.contents ("type").data ()[0].string_value ();
-    std::string name = map.contents ("name").data ()[0].string_value ();
+    // Is it a regular function within the search path? (Call Fexist)
+    octave_value_list fct = Fexist (interp, ovl (fname.toStdString ()),0);
+    int type = fct (0).int_value ();
 
     QString message = QString ();
     QString filename = QString ();
-
-    if (type == "built-in function")
+    QString fcn_name = fname + ".m";
+
+    switch (type)
       {
-        // built in function: can't edit
-        message = tr ("%1 is a built-in function");
+        case 3:
+        case 5:
+        case 103:
+          message = tr ("%1 is a built-in, compiled or inline\n"
+                        "function and can not be edited.");
+          break;
+
+        case 2:
+          octave_value_list file_path
+              = Ffile_in_loadpath (interp, ovl (fcn_name.toStdString ()), 0);
+          if (file_path.length () > 0)
+            filename = QString::fromStdString (file_path (0).string_value ());
+          break;
       }
-    else if (type == "")
+
+    if (filename.isEmpty () && message.isEmpty ())
       {
-        // function not known to octave -> try directory of edited file
+        // No error so far, but function still not known
+        // -> try directory of edited file
         // get directory
         QDir dir;
         if (ffile.isEmpty ())
           {
             if (curr_dir.isEmpty ())
               dir = QDir (m_current_directory_combo_box->itemText (0));
             else
               dir = QDir (curr_dir);
           }
         else
           dir = QDir (QFileInfo (ffile).canonicalPath ());
 
-        // function not known to octave -> try directory of edited file
-        QFileInfo file = QFileInfo (dir, fname + ".m");
-
+        QFileInfo file = QFileInfo (dir, fcn_name);
         if (file.exists ())
-          {
-            filename = file.canonicalFilePath (); // local file exists
-          }
+          filename = file.canonicalFilePath (); // local file exists
         else
           {
             // local file does not exist -> try private directory
             file = QFileInfo (ffile);
             file = QFileInfo (QDir (file.canonicalPath () + "/private"),
-                              fname + ".m");
-
+                              fcn_name);
             if (file.exists ())
-              {
-                filename = file.canonicalFilePath ();  // private function exists
-              }
+              filename = file.canonicalFilePath ();  // private function exists
             else
-              {
-                message = tr ("Can not find function %1");  // no file found
-              }
+              message = tr ("Can not find function %1");  // no file found
+
           }
       }
 
     if (! message.isEmpty ())
       {
         QMessageBox *msgBox
           = new QMessageBox (QMessageBox::Critical,
                              tr ("Octave Editor"),
-                             message.arg (QString::fromStdString (name)),
+                             message.arg (fname),
                              QMessageBox::Ok, this);
 
         msgBox->setWindowModality (Qt::NonModal);
         msgBox->setAttribute (Qt::WA_DeleteOnClose);
         msgBox->show ();
         return;
       }
 
-    if (filename.isEmpty ())
-      filename = QString::fromStdString (
-                                         map.contents ("file").data ()[0].string_value ());
-
     if (! filename.endsWith (".m"))
       filename.append (".m");
 
     emit open_file_signal (filename, QString (), line);  // default encoding
   }
 
   void main_window::handle_insert_debugger_pointer_request (const QString& file,
                                                             int line)
