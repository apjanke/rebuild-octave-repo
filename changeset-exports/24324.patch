# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1511832493 18000
#      Mon Nov 27 20:28:13 2017 -0500
# Node ID 06c804ae3815adab1c2c76bc0854a2358a0dc6c3
# Parent  5abd4d7cbd360632bc254cab19be565e9c18a8b4
eliminate unused symbol scope and symbol record functions

* symrec.h, symrec.cc (symbol_record::erase_persistent,
symbol_record::symbol_record_rep::erase_persistent):
Delete unused functions.

* symscope.h (symbol_scope::erase_persistent): Delete unused function.

diff --git a/libinterp/corefcn/symrec.cc b/libinterp/corefcn/symrec.cc
--- a/libinterp/corefcn/symrec.cc
+++ b/libinterp/corefcn/symrec.cc
@@ -91,33 +91,16 @@ namespace octave
 
         assign (curr_scope->persistent_varval (m_name));
       }
     // FIXME: this causes trouble with recursive calls.
     // else
     //   error ("unable to declare existing variable persistent");
   }
 
-  void
-  symbol_record::symbol_record_rep::erase_persistent (void)
-  {
-    if (auto t_fwd_rep = m_fwd_rep.lock ())
-      {
-        t_fwd_rep->erase_persistent ();
-        return;
-      }
-
-    unmark_persistent ();
-
-    symbol_scope *curr_scope
-      = __require_current_scope__ ("symbol_record::symbol_record_rep::erase_persistent");
-
-    curr_scope->erase_persistent (m_name);
-  }
-
   symbol_record::symbol_record_rep *
   symbol_record::symbol_record_rep::dup (symbol_scope *new_scope) const
   {
     // FIXME: is this the right thing do to?
     if (auto t_fwd_rep = m_fwd_rep.lock ())
       return t_fwd_rep->dup (new_scope);
 
     return new symbol_record_rep (new_scope, m_name, varval (),
diff --git a/libinterp/corefcn/symrec.h b/libinterp/corefcn/symrec.h
--- a/libinterp/corefcn/symrec.h
+++ b/libinterp/corefcn/symrec.h
@@ -535,18 +535,16 @@ namespace octave
           {
             t_fwd_rep->invalidate ();
             return;
           }
 
         m_valid = false;
       }
 
-      void erase_persistent (void);
-
       symbol_scope *decl_scope (void)
       {
         if (auto t_fwd_rep = m_fwd_rep.lock ())
           return t_fwd_rep->decl_scope ();
 
         return m_decl_scope;
       }
 
@@ -726,18 +724,16 @@ namespace octave
     void unmark_hidden (void) { m_rep->unmark_hidden (); }
     void unmark_inherited (void) { m_rep->unmark_inherited (); }
     void unmark_global (void) { m_rep->unmark_global (); }
     void unmark_persistent (void) { m_rep->unmark_persistent (); }
     void unmark_added_static (void) { m_rep->unmark_added_static (); }
 
     void init_persistent (void) { m_rep->init_persistent (); }
 
-    void erase_persistent (void) { m_rep->erase_persistent (); }
-
     void invalidate (void) { m_rep->invalidate (); }
 
     symbol_scope *decl_scope (void) { return m_rep->decl_scope (); }
 
     unsigned int storage_class (void) const { return m_rep->storage_class (); }
 
     void set_curr_fcn (octave_user_function *fcn)
     {
diff --git a/libinterp/corefcn/symscope.h b/libinterp/corefcn/symscope.h
--- a/libinterp/corefcn/symscope.h
+++ b/libinterp/corefcn/symscope.h
@@ -268,24 +268,16 @@ namespace octave
 
     octave_value persistent_varval (const std::string& name) const
     {
       m_persistent_symbols_const_iterator p = m_persistent_symbols.find (name);
 
       return (p != m_persistent_symbols.end ()) ? p->second : octave_value ();
     }
 
-    void erase_persistent (const std::string& name)
-    {
-      m_persistent_symbols_iterator p = m_persistent_symbols.find (name);
-
-      if (p != m_persistent_symbols.end ())
-        m_persistent_symbols.erase (p);
-    }
-
     bool is_variable (const std::string& name) const
     {
       bool retval = false;
 
       table_const_iterator p = m_symbols.find (name);
 
       if (p != m_symbols.end ())
         {
