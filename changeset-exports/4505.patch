# HG changeset patch
# User jwe
# Date 1063134846 0
#      Tue Sep 09 19:14:06 2003 +0000
# Node ID e944fbe3fff24614bd77e30b3f014edd59a82f6c
# Parent  f6a61399bc5c31c093b3fb208c843f5c667a389c
[project @ 2003-09-09 19:14:06 by jwe]

diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -55,16 +55,27 @@ template int assign (Array2<double>&, co
 template int assign (Array2<double>&, const Array2<int>&, const double&);
 template int assign (Array2<double>&, const Array2<short>&, const double&);
 template int assign (Array2<double>&, const Array2<char>&, const double&);
 
 #include "ArrayN.h"
 #include "ArrayN.cc"
 
 template class ArrayN<double>;
+
+template int assign (ArrayN<double>&, const ArrayN<double>&);
+template int assign (ArrayN<double>&, const ArrayN<int>&);
+template int assign (ArrayN<double>&, const ArrayN<short>&);
+template int assign (ArrayN<double>&, const ArrayN<char>&);
+
+template int assign (ArrayN<double>&, const ArrayN<double>&, const double&);
+template int assign (ArrayN<double>&, const ArrayN<int>&, const double&);
+template int assign (ArrayN<double>&, const ArrayN<short>&, const double&);
+template int assign (ArrayN<double>&, const ArrayN<char>&, const double&);
+
 template std::ostream& operator << (std::ostream&, const ArrayN<double>&);
 
 #include "DiagArray2.h"
 #include "DiagArray2.cc"
 
 template class DiagArray2<double>;
 
 /*
diff --git a/liboctave/ArrayN-idx.h b/liboctave/ArrayN-idx.h
--- a/liboctave/ArrayN-idx.h
+++ b/liboctave/ArrayN-idx.h
@@ -17,16 +17,17 @@ for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #include "Array-flags.h"
+#include "Range.h"
 #include "idx-vector.h"
 #include "lo-error.h"
 
 template <class T>
 void
 ArrayN<T>::maybe_delete_elements (Array<idx_vector>& idx, const T& rfv)
 {
   int n_idx = idx.length ();
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+2003-09-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array-d.cc: Instantiate assign functions.
+
 2003-09-09  Petter Risholm  <risholm@stud.ntnu.no>
 
 	* ArrayN-idx.h (vector_equivalent, equal_arrays): New functions.
 	(get_elt_idx): Index ra_idx correctly.
 
 	* ArrayN-inline.h (index_in_bounds): Index is also condidered in
 	bounds if it is exactly on the bound.
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,39 @@
+2003-09-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov.h (octave_value::double_nd_array_value): New function.
+	(octave_value::is_real_nd_array): New function.
+
+	* ov-base.cc (octave_base_value::double_nd_array_value): New function.
+	* ov-base.h: Provide decl.
+	(octave_base_value::is_real_nd_array): New function.
+
+2003-09-09  Petter Risholm  <risholm@stud.ntnu.no>
+
+	* ov-re-mat.h (octave_matrix::double_nd_array_value): New function.
+	* ov-scalar.h (octave_scalar::double_nd_array_value): New function.
+
+	* ov-re-nd-array.cc (octave_double_nd_array::assign): New function.
+	(octave_double_nd_array::try_narrowing_conversion): Likewise.
+	(octave_double_nd_array::valid_as_scalar_index): Likewise.
+	(octave_double_nd_array::double_value): Likewise.
+	(octave_double_nd_array::matrix_value): Likewise.
+	(octave_double_nd_array::complex_value): Likewise.
+	(octave_double_nd_array::convert_slice_to_matrix): Likewise.
+	* ov-re-nd-array.h: Provide decls.
+	(octave_double_nd_array::is_real_nd_array): New function.
+	(octave_double_nd_array::double_nd_array_value): New function.
+	(octave_double_nd_array::double_nd_array_value): New function.
+
+	* OPERATORS/op-m-nd.cc, OPERATORS/op-nd-m.cc,
+	OPERATORS/op-nd-nd.cc, OPERATORS/op-nd-s.cc, OPERATORS/op-s-nd.cc:
+	New files.
+	* Makefile.in (OP_XSRC): Add them to the list.
+
 2003-09-08  D.  <dbateman@free.fr>
 
 	* OPERATORS/op-cs-s.cc (DEFBINOP): First arg is complex, second is
 	double.
 
 2003-09-05  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* pt-cell.cc (tree_cell::rvalue): Don't assume that the number of
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -93,19 +93,21 @@ TI_XSRC := Array-oc.cc Array-os.cc Array
 
 TI_SRC := $(addprefix TEMPLATE-INST/, $(TI_XSRC))
 
 OP_XSRC := op-b-b.cc op-bm-b.cc op-bm-bm.cc op-cell.cc \
 	op-chm.cc op-cm-cm.cc op-cm-cs.cc op-cm-m.cc \
 	op-cm-s.cc op-cs-cm.cc op-cs-cs.cc op-cs-m.cc \
 	op-cs-s.cc op-fil-b.cc op-fil-bm.cc op-fil-cm.cc \
 	op-fil-cs.cc op-fil-m.cc op-fil-s.cc op-fil-lis.cc \
-	op-fil-rec.cc op-fil-str.cc op-list.cc op-m-cm.cc op-m-cs.cc \
-	op-m-m.cc op-m-s.cc op-range.cc op-s-cm.cc op-s-cs.cc op-s-m.cc \
-	op-s-s.cc op-str-m.cc op-str-s.cc op-str-str.cc
+	op-fil-rec.cc op-fil-str.cc op-list.cc op-m-cm.cc \
+	op-m-cs.cc op-m-m.cc op-m-nd.cc op-m-s.cc op-nd-m.cc \
+	op-nd-nd.cc op-nd-s.cc op-range.cc op-s-cm.cc \
+	op-s-cs.cc op-s-m.cc op-s-nd.cc op-s-s.cc op-str-m.cc \
+	op-str-s.cc op-str-str.cc
 
 OP_SRC := $(addprefix OPERATORS/, $(OP_XSRC))
 
 OV_SRC := ov-base.cc ov-base-mat.cc ov-base-scalar.cc ov-ch-mat.cc \
 	ov-cs-list.cc ov-list.cc ov-re-mat.cc ov-cx-mat.cc \
 	ov-range.cc ov-scalar.cc \
 	ov-complex.cc ov-str-mat.cc ov-struct.cc ov-va-args.cc \
 	ov-colon.cc ov-bool-mat.cc ov-bool.cc ov-file.cc ov-cell.cc \
diff --git a/src/OPERATORS/op-m-nd.cc b/src/OPERATORS/op-m-nd.cc
new file mode 100644
--- /dev/null
+++ b/src/OPERATORS/op-m-nd.cc
@@ -0,0 +1,50 @@
+/*
+
+Copyright (C) 2003 Petter Risholm and John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
+#pragma implementation
+#endif
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+//#include "mx-m-nd.h"
+#include "gripes.h"
+#include "oct-obj.h"
+#include "ov.h"
+#include "ov-re-mat.h"
+#include "ov-re-nd-array.h"
+#include "ov-typeinfo.h"
+#include "ops.h"
+#include "xdiv.h"
+#include "xpow.h"
+
+
+
+DEFASSIGNOP_FN (assign, matrix, double_nd_array, assign)
+
+void
+install_m_nd_ops (void)
+{
+  INSTALL_ASSIGNOP (op_asn_eq, octave_matrix, octave_double_nd_array, assign);
+}
diff --git a/src/OPERATORS/op-nd-m.cc b/src/OPERATORS/op-nd-m.cc
new file mode 100644
--- /dev/null
+++ b/src/OPERATORS/op-nd-m.cc
@@ -0,0 +1,48 @@
+/*
+
+Copyright (C) 2003 Petter Risholm and John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
+#pragma implementation
+#endif
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#//include "mx-nd-m.h"
+#include "gripes.h"
+#include "oct-obj.h"
+#include "ov.h"
+#include "ov-re-mat.h"
+#include "ov-re-nd-array.h"
+#include "ov-typeinfo.h"
+#include "ops.h"
+#include "xdiv.h"
+#include "xpow.h"
+
+DEFASSIGNOP_FN (assign, double_nd_array, matrix, assign)
+
+void
+install_nd_m_ops (void)
+{
+  INSTALL_ASSIGNOP (op_asn_eq, octave_double_nd_array, octave_matrix, assign);
+}
diff --git a/src/OPERATORS/op-nd-nd.cc b/src/OPERATORS/op-nd-nd.cc
new file mode 100644
--- /dev/null
+++ b/src/OPERATORS/op-nd-nd.cc
@@ -0,0 +1,80 @@
+/*
+
+Copyright (C) 2003 Petter Risholm and John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
+#pragma implementation
+#endif
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "gripes.h"
+#include "oct-obj.h"
+#include "ov.h"
+#include "ov-re-nd-array.h"
+#include "ov-typeinfo.h"
+
+#include "ops.h"
+#include "xdiv.h"
+#include "xpow.h"
+ 
+//Using the ! operator causes a segmentation fault
+//DEFUNOP_OP (not, double_nd_array, !)
+/*
+DEFUNOP_OP (uminus, double_nd_array, -)
+
+DEFUNOP (transpose, double_nd_array)
+{
+  error ("Transpose on ND array is not defined.");
+  return octave_value ();
+}
+
+DEFBINOP_OP (add, double_nd_array, double_nd_array, +)
+DEFBINOP_OP (sub, double_nd_array, double_nd_array, -)
+
+DEFBINOP_FN (el_pow, double_nd_array, double_nd_array, elem_xpow)
+
+DEFBINOPX (pow, double_nd_array, double_nd_array)
+{
+  error ("can't do A ^ B for A and B both N-D arrays");
+  return octave_value ();
+}
+*/
+
+DEFASSIGNOP_FN (assign, double_nd_array, double_nd_array, assign)
+
+void
+install_nd_nd_ops (void)
+{
+  //  INSTALL_UNOP (op_not, octave_double_nd_array, not);
+  /*INSTALL_UNOP (op_uminus, octave_double_nd_array, uminus);
+  INSTALL_UNOP (op_transpose, octave_double_nd_array, transpose);
+
+  INSTALL_BINOP (op_add, octave_double_nd_array, octave_double_nd_array, add);
+  INSTALL_BINOP (op_sub, octave_double_nd_array, octave_double_nd_array, sub);
+
+  INSTALL_BINOP (op_el_pow, octave_double_nd_array, octave_double_nd_array, el_pow);
+  */
+  INSTALL_ASSIGNOP (op_asn_eq, octave_double_nd_array, octave_double_nd_array, assign);
+  INSTALL_ASSIGNCONV (octave_double_nd_array, octave_double_nd_array, octave_double_nd_array);
+}
diff --git a/src/OPERATORS/op-nd-s.cc b/src/OPERATORS/op-nd-s.cc
new file mode 100644
--- /dev/null
+++ b/src/OPERATORS/op-nd-s.cc
@@ -0,0 +1,97 @@
+/*
+
+Copyright (C) 2003 Petter Risholm and John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
+#pragma implementation
+#endif
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "gripes.h"
+#include "oct-obj.h"
+#include "ov.h"
+#include "ov-re-nd-array.h"
+#include "ov-scalar.h"
+#include "ov-typeinfo.h"
+//Kluge
+
+#include "ops.h"
+#include "xdiv.h"
+#include "xpow.h"
+
+// ndArray by scalar ops.
+
+/*
+DEFBINOP_OP (add, double_nd_array, scalar, +)
+DEFBINOP_OP (sub, double_nd_array, scalar, -)
+DEFBINOP_OP (mul, double_nd_array, scalar, *)
+
+DEFBINOP (div, double_nd_array, scalar)
+{
+  CAST_BINOP_ARGS (const octave_double_nd_array&, const octave_scalar&);
+  double d = v2.double_value ();
+
+  if (d == 0.0)
+    gripe_divide_by_zero ();
+
+  return octave_value (v1.double_nd_array_value () / d);
+}
+
+DEFBINOP_OP (el_mul, double_nd_array, scalar, *)
+
+DEFBINOP (el_div, double_nd_array, scalar)
+{
+  CAST_BINOP_ARGS (const octave_double_nd_array&, const octave_scalar&);
+
+  double d = v2.double_value ();
+
+  if (d == 0.0)
+    gripe_divide_by_zero ();
+
+  return octave_value (v1.double_nd_array_value () / d);
+}
+
+DEFBINOP_FN (el_pow, double_nd_array, scalar, elem_xpow)
+*/
+DEFASSIGNOP_FN (assign, double_nd_array, scalar, assign)
+
+void
+install_nd_s_ops (void)
+{
+  /*  INSTALL_BINOP (op_add, octave_double_nd_array, octave_scalar, add);
+  INSTALL_BINOP (op_sub, octave_double_nd_array, octave_scalar, sub);
+  INSTALL_BINOP (op_mul, octave_double_nd_array, octave_scalar, mul);
+  INSTALL_BINOP (op_div, octave_double_nd_array, octave_scalar, div);
+  INSTALL_BINOP (op_el_pow, octave_double_nd_array, octave_scalar, el_pow);
+  INSTALL_BINOP (op_el_mul, octave_double_nd_array, octave_scalar, el_mul);
+  INSTALL_BINOP (op_el_div, octave_double_nd_array, octave_scalar, el_div);
+  */
+  INSTALL_ASSIGNOP (op_asn_eq, octave_double_nd_array, octave_scalar, assign);
+}
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/src/OPERATORS/op-s-nd.cc b/src/OPERATORS/op-s-nd.cc
new file mode 100644
--- /dev/null
+++ b/src/OPERATORS/op-s-nd.cc
@@ -0,0 +1,77 @@
+/*
+
+Copyright (C) 2003 Petter Risholm and John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
+#pragma implementation
+#endif
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "gripes.h"
+#include "oct-obj.h"
+#include "ov.h"
+#include "ov-scalar.h"
+#include "ov-re-nd-array.h"
+//Kluge
+//#include "MArrayN.cc"
+#include "ov-typeinfo.h"
+#include "ops.h"
+#include "xdiv.h"
+#include "xpow.h"
+
+// scalar by matrix ops.
+
+/*
+DEFBINOP_OP (add, scalar, double_nd_array, +)
+DEFBINOP_OP (sub, scalar, double_nd_array, -)
+DEFBINOP_OP (mul, scalar, double_nd_array, *)
+
+  DEFBINOP_OP(el_mul, scalar, double_nd_array, *)
+*/
+DEFCONV (array_conv, scalar, double_nd_array)
+{
+  CAST_CONV_ARG (const octave_scalar&);
+
+  return new octave_double_nd_array (v.double_nd_array_value ());
+}
+
+void
+install_s_nd_ops (void)
+{
+  /* 
+ INSTALL_BINOP (op_add, octave_scalar, octave_double_nd_array, add);
+  INSTALL_BINOP (op_sub, octave_scalar, octave_double_nd_array, sub);
+  INSTALL_BINOP (op_mul, octave_scalar, octave_double_nd_array, mul);
+  INSTALL_BINOP (op_el_mul, octave_scalar, octave_double_nd_array, el_mul);
+  */  
+  INSTALL_ASSIGNCONV (octave_scalar, octave_double_nd_array, octave_double_nd_array);
+
+  INSTALL_WIDENOP (octave_scalar, octave_double_nd_array, array_conv);
+}
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -286,16 +286,25 @@ octave_base_value::cell_value () const
 Matrix
 octave_base_value::matrix_value (bool) const
 {
   Matrix retval;
   gripe_wrong_type_arg ("octave_base_value::matrix_value()", type_name ());
   return retval;
 }
 
+ArrayN<double>
+octave_base_value::double_nd_array_value (bool) const
+{
+  ArrayN<double> retval;
+  gripe_wrong_type_arg ("octave_base_value::double_nd_array_value()",
+			type_name ());
+  return retval;
+}
+
 Complex
 octave_base_value::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
   Complex retval (tmp, tmp);
   gripe_wrong_type_arg ("octave_base_value::complex_value()", type_name ());
   return retval;
 }
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -101,16 +101,18 @@ public:
   bool is_defined (void) const { return false; }
 
   bool is_cell (void) const { return false; }
 
   bool is_real_scalar (void) const { return false; }
 
   bool is_real_matrix (void) const { return false; }
 
+  bool is_real_nd_array (void) const { return false; }
+
   bool is_complex_scalar (void) const { return false; }
 
   bool is_complex_matrix (void) const { return false; }
 
   bool is_char_matrix (void) const { return false; }
 
   bool is_string (void) const { return false; }
 
@@ -184,16 +186,18 @@ public:
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Cell cell_value (void) const;
 
   Matrix matrix_value (bool = false) const;
 
+  ArrayN<double> double_nd_array_value (bool frc_str_conv = false) const;
+
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   charMatrix char_matrix_value (bool = false) const;
 
   string_vector all_strings (bool pad = false, bool force = false) const;
 
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -93,16 +93,19 @@ public:
 
   Matrix matrix_value (bool = false) const { return matrix; }
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (matrix); }
 
+  ArrayN<double> double_nd_array_value (bool = false) const
+    { return ArrayN<double> (matrix); }
+
   void increment (void) { matrix += 1.0; }
 
   void decrement (void) { matrix -= 1.0; }
 
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
 private:
 
diff --git a/src/ov-re-nd-array.cc b/src/ov-re-nd-array.cc
--- a/src/ov-re-nd-array.cc
+++ b/src/ov-re-nd-array.cc
@@ -34,127 +34,170 @@ Software Foundation, 59 Temple Place - S
 #include "lo-utils.h"
 #include "mx-base.h"
 
 #include "gripes.h"
 #include "oct-obj.h"
 #include "oct-lvalue.h"
 #include "ops.h"
 #include "ov-base.h"
+#include "ov-scalar.h"
+#include "ov-re-mat.h"
 #include "ov-base-nd-array.h"
 #include "ov-base-nd-array.cc"
 #include "ov-re-nd-array.h"
 #include "pr-output.h"
 #include "variables.h"
 
 template class octave_base_nd_array<ArrayN<double> >;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_double_nd_array);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_double_nd_array,
 				     "double-nd-array");
 
-#if 0
 octave_value *
-octave_matrix::try_narrowing_conversion (void)
+octave_double_nd_array::try_narrowing_conversion (void)
 {
   octave_value *retval = 0;
 
-  int nr = matrix.rows ();
-  int nc = matrix.cols ();
+  array.maybe_delete_dims ();
+
+  int n_dims = array.dims ().length ();
+  Array<int> dims = array.dims();
 
-  if (nr == 1 && nc == 1)
-    retval = new octave_scalar (matrix (0, 0));
+  // Scalar
+  if (n_dims == 1 && dims(0) == 1)
+    {
+      retval = new octave_scalar (array(Array<int> (1,0)));
+    }
+
+  // Matrix
+  if (n_dims == 2 || n_dims == 1)
+    {
+      retval = new octave_matrix (matrix_value ());
+    }
+
+
 
   return retval;
 }
 
 void
-octave_matrix::assign (const octave_value_list& idx, const Matrix& rhs)
+octave_double_nd_array::assign (const octave_value_list& idx,
+				const ArrayN<double>& rhs)
 {
   int len = idx.length ();
 
-  switch (len)
+  if ( len < 0)
     {
-    case 2:
-      {
-	idx_vector i = idx (0).index_vector ();
-	idx_vector j = idx (1).index_vector ();
-
-	matrix.set_index (i);
-	matrix.set_index (j);
-
-	::assign (matrix, rhs);
-      }
-      break;
-
-    case 1:
-      {
-	idx_vector i = idx (0).index_vector ();
-
-	matrix.set_index (i);
-
-	::assign (matrix, rhs);
-      }
-      break;
-
-    default:
       error ("invalid number of indices (%d) for indexed matrix assignment",
 	     len);
-      break;
+      return;
+    }  
+
+  // XXX FIXME XXX -- where should this go?
+  array.set_max_indices (len);
+  
+  array.clear_index ();
+  
+
+  for (int i = 0; i < len; i++) 
+    {
+      idx_vector temp = idx(i).index_vector ();
+      array.set_index(temp);
     }
+
+  ::assign (array, rhs);
+
+  // When subclasses of ArrayN are constructed, add an extra arguemnt
+  // resize_fill_value ()
 }
 
 bool
-octave_matrix::valid_as_scalar_index (void) const
+octave_double_nd_array::valid_as_scalar_index (void) const
 {
   // XXX FIXME XXX
   return false;
 }
 
 double
-octave_matrix::double_value (bool) const
+octave_double_nd_array::double_value (bool) const
 {
   double retval = lo_ieee_nan_value ();
 
-  // XXX FIXME XXX -- maybe this should be a function, valid_as_scalar()
-  if (rows () > 0 && columns () > 0)
-    {
-      // XXX FIXME XXX -- is warn_fortran_indexing the right variable here?
-      if (Vwarn_fortran_indexing)
-	gripe_implicit_conversion ("real matrix", "real scalar");
+  // XXX FIXME XXX
 
-      retval = matrix (0, 0);
-    }
-  else
-    gripe_invalid_conversion ("real matrix", "real scalar");
+  gripe_invalid_conversion ("real nd-array", "real scalar");
 
   return retval;
 }
 
+
+Matrix
+octave_double_nd_array::matrix_value (bool ) const
+{
+  Array<int> ra_idx (array.dimensions.length (), 0);
+
+  return convert_slice_to_matrix (ra_idx);
+}
+
+Matrix
+octave_double_nd_array::convert_slice_to_matrix (const Array<int>& ra_idx) const
+{
+  int n_dims = array.dimensions.length ();
+
+  assert(ra_idx.length () == n_dims);
+
+  Array<int> idx (ra_idx);
+  Matrix retval;
+
+  if (n_dims > 1)
+    {
+      int d1 = array.dimensions(0);
+      int d2 = array.dimensions(1);
+
+      retval = Matrix (d1, d2);
+
+      for (int i = 0; i < d1; i++)
+        {
+          idx(0) = i;
+          for (int j = 0; j < d2; j++)
+            {
+              idx(1) = j;
+              retval(i,j) = array.elem (idx);
+            }
+        }
+    }
+  else if (n_dims == 1)
+    {
+      int d1 = array.dimensions(0);
+      int d2 = 1;
+
+      retval = Matrix (d1, d2);
+
+      for (int i = 0; i < d1; i++)
+        {
+	  idx(0) = i;
+	  retval(i, 0) = array.elem (idx);
+	}
+
+    }
+  return retval;
+}
+
 Complex
-octave_matrix::complex_value (bool) const
+octave_double_nd_array::complex_value (bool) const
 {
   double tmp = lo_ieee_nan_value ();
 
   Complex retval (tmp, tmp);
 
-  // XXX FIXME XXX -- maybe this should be a function, valid_as_scalar()
-  if (rows () > 0 && columns () > 0)
-    {
-      // XXX FIXME XXX -- is warn_fortran_indexing the right variable here?
-      if (Vwarn_fortran_indexing)
-	gripe_implicit_conversion ("real matrix", "complex scalar");
-
-      retval = matrix (0, 0);
-    }
-  else
-    gripe_invalid_conversion ("real matrix", "complex scalar");
+  gripe_invalid_conversion ("real matrix", "complex scalar");
 
   return retval;
 }
-#endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-re-nd-array.h b/src/ov-re-nd-array.h
--- a/src/ov-re-nd-array.h
+++ b/src/ov-re-nd-array.h
@@ -27,17 +27,17 @@ Software Foundation, 59 Temple Place - S
 #pragma interface
 #endif
 
 #include <cstdlib>
 
 #include <iostream>
 #include <string>
 
-#include "ArrayN.h"
+#include "mx-base.h"
 #include "oct-alloc.h"
 
 #include "error.h"
 #include "ov-base.h"
 #include "ov-base-nd-array.h"
 #include "ov-typeinfo.h"
 
 class octave_value_list;
@@ -55,44 +55,53 @@ public:
   octave_double_nd_array (const ArrayN<double>& a)
     : octave_base_nd_array<ArrayN<double> > (a) { }
 
   octave_double_nd_array (const octave_double_nd_array& a)
     : octave_base_nd_array<ArrayN<double> > (a) { }
 
   ~octave_double_nd_array (void) { }
 
-  octave_value *clone (void) const { return new octave_double_nd_array (*this); }
-  octave_value *empty_clone (void) const { return new octave_double_nd_array (); }
+  octave_value *clone (void) const
+    { return new octave_double_nd_array (*this); }
 
-#if 0
+  octave_value *empty_clone (void) const
+    { return new octave_double_nd_array (); }
+
   octave_value *try_narrowing_conversion (void);
 
-  void assign (const octave_value_list& idx, const Matrix& rhs);
+  void assign (const octave_value_list& idx, const ArrayN<double>& rhs);
 
-  idx_vector index_vector (void) const { return idx_vector (matrix); }
+  // Need to implement idx_vector (ArrayN<double>) for this one.
+  //
+  // idx_vector index_vector (void) const { return idx_vector (array); }
+
+  bool is_real_nd_array (void) const { return true; }
 
   bool is_real_matrix (void) const { return false; }
 
   bool is_real_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const;
 
   double double_value (bool = false) const;
 
+  ArrayN<double> double_nd_array_value (bool = false) const { return array; }
+
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
 
   Complex complex_value (bool = false) const;
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (matrix_value ()); }
-#endif
+
+  Matrix convert_slice_to_matrix (const Array<int>& ra_idx) const;
 
 private:
 
   DECLARE_OCTAVE_ALLOCATOR
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -84,16 +84,19 @@ public:
 
   double double_value (bool = false) const { return scalar; }
 
   double scalar_value (bool = false) const { return scalar; }
 
   Matrix matrix_value (bool = false) const
     { return Matrix (1, 1, scalar); }
 
+  ArrayN<double> double_nd_array_value (bool = false) const
+    { return ArrayN<double> (Array<int> (1, 1), scalar); }
+
   Complex complex_value (bool = false) const { return scalar; }
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return  ComplexMatrix (1, 1, Complex (scalar)); }
 
   octave_value convert_to_str_internal (bool pad, bool force) const;
 
   void increment (void) { ++scalar; }
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -1216,16 +1216,21 @@ octave_value::numeric_assign (const std:
 	  if (cf)
 	    {
 	      octave_value *tmp (cf (*this));
 
 	      if (tmp)
 		{
 		  retval = tmp->subsasgn (type, idx, rhs);
 
+		  // The assignment may have converted to a type that
+		  // is wider than necessary.
+
+		  retval.maybe_mutate ();
+
 		  done = (! error_state);
 		}
 	      else
 		gripe_assign_conversion_failed (type_name (),
 						rhs.type_name ());
 	    }
 	  else
 	    gripe_indexed_assignment (type_name (), rhs.type_name ());
@@ -1741,16 +1746,17 @@ octave_value::empty_conv (const std::str
 void
 install_types (void)
 {
   octave_base_value::register_type ();
   octave_cell::register_type ();
   octave_scalar::register_type ();
   octave_complex::register_type ();
   octave_matrix::register_type ();
+  octave_double_nd_array::register_type ();
   octave_complex_matrix::register_type ();
   octave_range::register_type ();
   octave_bool::register_type ();
   octave_bool_matrix::register_type ();
   octave_char_matrix::register_type ();
   octave_char_matrix_str::register_type ();
   octave_struct::register_type ();
   octave_file::register_type ();
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -28,16 +28,17 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <cstdlib>
 
 #include <iostream>
 #include <string>
 #include <list>
 
+#include "ArrayN.h"
 #include "Range.h"
 #include "idx-vector.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "oct-time.h"
 #include "str-vec.h"
 
 class Cell;
@@ -331,16 +332,19 @@ public:
     { return rep->is_cell (); }
 
   virtual bool is_real_scalar (void) const
     { return rep->is_real_scalar (); }
 
   virtual bool is_real_matrix (void) const
     { return rep->is_real_matrix (); }
 
+  virtual bool is_real_nd_array (void) const
+    { return rep->is_real_nd_array (); }
+
   virtual bool is_complex_scalar (void) const
     { return rep->is_complex_scalar (); }
 
   virtual bool is_complex_matrix (void) const
     { return rep->is_complex_matrix (); }
 
   virtual bool is_char_matrix (void) const
     { return rep->is_char_matrix (); }
@@ -466,16 +470,19 @@ public:
   virtual double scalar_value (bool frc_str_conv = false) const
     { return rep->scalar_value (frc_str_conv); }
 
   virtual Cell cell_value (void) const;
 
   virtual Matrix matrix_value (bool frc_str_conv = false) const
     { return rep->matrix_value (frc_str_conv); }
 
+  virtual ArrayN<double> double_nd_array_value (bool frc_str_conv = false) const
+    { return rep->double_nd_array_value (frc_str_conv); }
+
   virtual Complex complex_value (bool frc_str_conv = false) const
     { return rep->complex_value (frc_str_conv); }
 
   virtual ComplexMatrix complex_matrix_value (bool frc_str_conv = false) const
     { return rep->complex_matrix_value (frc_str_conv); }
 
   virtual charMatrix char_matrix_value (bool frc_str_conv = false) const
     { return rep->char_matrix_value (frc_str_conv); }
