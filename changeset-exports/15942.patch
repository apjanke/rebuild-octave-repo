# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1358188509 18000
#      Mon Jan 14 13:35:09 2013 -0500
# Node ID 75cea615ade4b3534e3028b5f82b6075b9e84ad0
# Parent  8135bce0812afcf60cde64d72f9c7f55e6b68927
Check for sparse before diagonal class in kron (bug #38082)

* kron.cc (Fkron): Move the check for sparseness to before for
  diagonal matrices.

diff --git a/libinterp/corefcn/kron.cc b/libinterp/corefcn/kron.cc
--- a/libinterp/corefcn/kron.cc
+++ b/libinterp/corefcn/kron.cc
@@ -172,16 +172,23 @@ do_kron (const octave_value& a, const oc
 }
 
 octave_value
 dispatch_kron (const octave_value& a, const octave_value& b)
 {
   octave_value retval;
   if (a.is_perm_matrix () && b.is_perm_matrix ())
     retval = do_kron<PermMatrix, PermMatrix> (a, b);
+  else if (a.is_sparse_type () || b.is_sparse_type ())
+    {
+      if (a.is_complex_type () || b.is_complex_type ())
+        retval = do_kron<SparseComplexMatrix, SparseComplexMatrix> (a, b);
+      else
+        retval = do_kron<SparseMatrix, SparseMatrix> (a, b);
+    }
   else if (a.is_diag_matrix ())
     {
       if (b.is_diag_matrix () && a.rows () == a.columns ()
           && b.rows () == b.columns ())
         {
           // We have two diagonal matrices, the product of those will be
           // another diagonal matrix.  To do that efficiently, extract
           // the diagonals as vectors and compute the product.  That
@@ -209,23 +216,16 @@ dispatch_kron (const octave_value& a, co
           if (a.is_complex_type ())
             retval = do_kron<ComplexDiagMatrix, ComplexMatrix> (a, b);
           else if (b.is_complex_type ())
             retval = do_kron<DiagMatrix, ComplexMatrix> (a, b);
           else
             retval = do_kron<DiagMatrix, Matrix> (a, b);
         }
     }
-  else if (a.is_sparse_type () || b.is_sparse_type ())
-    {
-      if (a.is_complex_type () || b.is_complex_type ())
-        retval = do_kron<SparseComplexMatrix, SparseComplexMatrix> (a, b);
-      else
-        retval = do_kron<SparseMatrix, SparseMatrix> (a, b);
-    }
   else if (a.is_single_type () || b.is_single_type ())
     {
       if (a.is_complex_type ())
         retval = do_kron<FloatComplexMatrix, FloatComplexMatrix> (a, b);
       else if (b.is_complex_type ())
         retval = do_kron<FloatMatrix, FloatComplexMatrix> (a, b);
       else
         retval = do_kron<FloatMatrix, FloatMatrix> (a, b);
