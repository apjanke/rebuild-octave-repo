# HG changeset patch
# User jwe
# Date 797561135 0
#      Tue Apr 11 00:45:35 1995 +0000
# Node ID 85d1899047e1a7f27f026b17e46171443ced3c90
# Parent  f0ad21c0b3a612666b2aef6999a309e0ecd2cacd
[project @ 1995-04-11 00:45:35 by jwe]

diff --git a/src/syl.cc b/src/syl.cc
--- a/src/syl.cc
+++ b/src/syl.cc
@@ -38,26 +38,26 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "gripes.h"
 #include "error.h"
 #include "utils.h"
 #include "help.h"
 #include "defun-dld.h"
 
 extern "C"
 {
-  int F77_FCN (dtrsyl) (const char*, const char*, const int*,
-			const int*, const int*, const double*,
-			const int*, const double*, const int*,
-			const double*, const int*, double*, int*,
+  int F77_FCN (dtrsyl) (const char*, const char*, const int&,
+			const int&, const int&, const double*,
+			const int&, const double*, const int&,
+			const double*, const int&, double&, int&,
 			long, long);
  
-  int F77_FCN (ztrsyl) (const char*, const char*, const int*,
-			const int*, const int*, const Complex*,
-			const int*, const Complex*, const int*,
-			const Complex*, const int*, double*, int*,
+  int F77_FCN (ztrsyl) (const char*, const char*, const int&,
+			const int&, const int&, const Complex*,
+			const int&, const Complex*, const int&,
+			const Complex*, const int&, double&, int&,
 			long, long);
 }
 
 DEFUN_DLD_BUILTIN ("syl", Fsyl, Ssyl, 4, 1,
   "X = syl (A, B, C): solve the Sylvester equation A X + X B + C = 0")
 {
   Octave_object retval;
 
@@ -141,22 +141,21 @@ DEFUN_DLD_BUILTIN ("syl", Fsyl, Ssyl, 4,
 	ComplexMatrix sch_b = bs.schur_matrix ();
   
 	ComplexMatrix cx = ua.hermitian () * cc * ub;
   
 // Solve the sylvester equation, back-transform, and return the solution.
   
 	double scale;
 	int info;
-	int one = 1;
   
-	F77_FCN (ztrsyl) ("N", "N", &one, &a_nr, &b_nr,
-			  sch_a.fortran_vec (), &a_nr,
-			  sch_b.fortran_vec (), &b_nr,
-			  cx.fortran_vec (), &a_nr, &scale, &info,
+	F77_FCN (ztrsyl) ("N", "N", 1, a_nr, b_nr,
+			  sch_a.fortran_vec (), a_nr,
+			  sch_b.fortran_vec (), b_nr,
+			  cx.fortran_vec (), a_nr, scale, info,
 			  1L, 1L);
 
 	cx = -ua * cx * ub.hermitian ();
   
 	retval = cx;
       }
     else
       {
@@ -191,22 +190,21 @@ DEFUN_DLD_BUILTIN ("syl", Fsyl, Ssyl, 4,
 	Matrix sch_b = bs.schur_matrix ();
   
 	Matrix cx = ua.transpose () * cc * ub;
   
 // Solve the sylvester equation, back-transform, and return the solution.
   
 	double scale;
 	int info;
-	int one = 1;
 
-	F77_FCN (dtrsyl) ("N", "N", &one, &a_nr, &b_nr,
-			  sch_a.fortran_vec (), &a_nr, 
-			  sch_b.fortran_vec (), &b_nr,
-			  cx.fortran_vec (), &a_nr, &scale, &info,
+	F77_FCN (dtrsyl) ("N", "N", 1, a_nr, b_nr,
+			  sch_a.fortran_vec (), a_nr, 
+			  sch_b.fortran_vec (), b_nr,
+			  cx.fortran_vec (), a_nr, scale, info,
 			  1L, 1L);
 
 	if (info)
 	  error ("syl: trouble in dtrsyl info = %d", info);
   
 	cx = -ua*cx*ub.transpose ();
   
 	retval = cx;
