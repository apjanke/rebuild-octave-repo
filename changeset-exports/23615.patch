# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1497619160 14400
#      Fri Jun 16 09:19:20 2017 -0400
# Node ID be7b884ac589586a163d8d4272979179444c3977
# Parent  7a97944f06e56357f2fe397688afec205c32db5f
use version number in OCTAVE_DEPRECATED macro

* mk-octave-config-h.sh, oct-conf-post.in.h (OCTAVE_DEPRECATED):
New argument, VER, to record and display version number in which the
object was marked as deprecated.  Change all uses.

diff --git a/build-aux/mk-octave-config-h.sh b/build-aux/mk-octave-config-h.sh
--- a/build-aux/mk-octave-config-h.sh
+++ b/build-aux/mk-octave-config-h.sh
@@ -97,28 +97,28 @@ since all of Octave's header files alrea
 #  if defined (__cplusplus)
 #    include <cstdint>
 #  else
 #    include <stdint.h>
 #  endif
 
 #  if defined (__GNUC__)
 #    if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
-#      define OCTAVE_DEPRECATED(msg) __attribute__ ((__deprecated__ (msg)))
+#      define OCTAVE_DEPRECATED(ver, msg) __attribute__ ((__deprecated__ ("[" #ver "]: " msg)))
 #    else
-#      define OCTAVE_DEPRECATED(msg) __attribute__ ((__deprecated__))
+#      define OCTAVE_DEPRECATED(ver, msg) __attribute__ ((__deprecated__))
 #    endif
 #    define OCTAVE_NORETURN __attribute__ ((__noreturn__))
 #    define OCTAVE_UNUSED __attribute__ ((__unused__))
 
 #    define HAVE_OCTAVE_DEPRECATED_ATTR 1
 #    define HAVE_OCTAVE_NORETURN_ATTR 1
 #    define HAVE_OCTAVE_UNUSED_ATTR 1
 #  else
-#    define OCTAVE_DEPRECATED(msg)
+#    define OCTAVE_DEPRECATED(ver, msg)
 #    define OCTAVE_NORETURN
 #    define OCTAVE_UNUSED
 
 /* #    undef HAVE_OCTAVE_DEPRECATED_ATTR */
 /* #    undef HAVE_OCTAVE_NORETURN_ATTR */
 /* #    undef HAVE_OCTAVE_UNUSED_ATTR */
 #  endif
 
diff --git a/libinterp/corefcn/call-stack.h b/libinterp/corefcn/call-stack.h
--- a/libinterp/corefcn/call-stack.h
+++ b/libinterp/corefcn/call-stack.h
@@ -293,14 +293,14 @@ namespace octave
     size_t curr_frame;
 
     interpreter& m_interpreter;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::call_stack' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::call_stack' instead")
 typedef octave::call_stack octave_call_stack;
 
 #endif
 
 #endif
diff --git a/libinterp/corefcn/defun-int.h b/libinterp/corefcn/defun-int.h
--- a/libinterp/corefcn/defun-int.h
+++ b/libinterp/corefcn/defun-int.h
@@ -95,17 +95,17 @@ namespace octave
     auto_shlib (void) : dynamic_library (get_current_shlib ()) { }
 
     auto_shlib (const dynamic_library& shl) : dynamic_library (shl) { }
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::auto_shlib' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::auto_shlib' instead")
 typedef octave::auto_shlib octave_auto_shlib;
 
 #endif
 
 
 extern OCTINTERP_API bool
 defun_isargout (int, int);
 
diff --git a/libinterp/corefcn/error.h b/libinterp/corefcn/error.h
--- a/libinterp/corefcn/error.h
+++ b/libinterp/corefcn/error.h
@@ -47,21 +47,21 @@ extern OCTINTERP_API int warning_enabled
 extern OCTINTERP_API octave::execution_exception
 make_execution_exception (const char *who);
 
 extern OCTINTERP_API void
 vmessage (const char *name, const char *fmt, va_list args);
 
 extern OCTINTERP_API void message (const char *name, const char *fmt, ...);
 
-OCTAVE_DEPRECATED ("use 'print_usage' or 'verror' instead")
+OCTAVE_DEPRECATED (4.2, "use 'print_usage' or 'verror' instead")
 OCTAVE_NORETURN OCTINTERP_API extern
 void vusage (const char *fmt, va_list args);
 
-OCTAVE_DEPRECATED ("use 'print_usage' or 'error' instead")
+OCTAVE_DEPRECATED (4.2, "use 'print_usage' or 'error' instead")
 OCTAVE_NORETURN OCTINTERP_API extern
 void usage (const char *fmt, ...);
 
 extern OCTINTERP_API void vwarning (const char *fmt, va_list args);
 extern OCTINTERP_API void warning (const char *fmt, ...);
 
 OCTAVE_NORETURN OCTINTERP_API extern
 void verror (const char *fmt, va_list args);
diff --git a/libinterp/corefcn/gripes.h b/libinterp/corefcn/gripes.h
--- a/libinterp/corefcn/gripes.h
+++ b/libinterp/corefcn/gripes.h
@@ -35,201 +35,201 @@ namespace octave
 {
   class execution_exception;
 }
 
 ////////////////////////////////////////////////////////////////////////////////
 // Alphabetized list of gripes.
 ////////////////////////////////////////////////////////////////////////////////
 
-OCTAVE_DEPRECATED ("use 'err_2_or_3_dim_plot' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_2_or_3_dim_plot' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_2_or_3_dim_plot (void);
 
-OCTAVE_DEPRECATED ("use 'err_data_conversion' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_data_conversion' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_data_conversion (const char *from, const char *to);
 
-OCTAVE_DEPRECATED ("use 'warn_data_file_in_path' instead")
+OCTAVE_DEPRECATED (4.2, "use 'warn_data_file_in_path' instead")
 OCTINTERP_API extern void
 gripe_data_file_in_path (const std::string& fcn, const std::string& file);
 
-OCTAVE_DEPRECATED ("use 'err_disabled_feature' or 'warn_disabled_feature' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_disabled_feature' or 'warn_disabled_feature' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_disabled_feature (const std::string& fcn,
                         const std::string& feature,
                         const std::string& pkg="Octave");
 
-OCTAVE_DEPRECATED ("use 'warn_divide_by_zero' instead")
+OCTAVE_DEPRECATED (4.2, "use 'warn_divide_by_zero' instead")
 OCTINTERP_API extern void
 gripe_divide_by_zero (void);
 
-OCTAVE_DEPRECATED ("use 'warn_empty_arg' instead")
+OCTAVE_DEPRECATED (4.2, "use 'warn_empty_arg' instead")
 OCTINTERP_API extern void
 gripe_empty_arg (const char *name, bool is_error);
 
-OCTAVE_DEPRECATED ("use 'warn_implicit_conversion' instead")
+OCTAVE_DEPRECATED (4.2, "use 'warn_implicit_conversion' instead")
 OCTINTERP_API extern void
 gripe_implicit_conversion (const char *id, const char *from, const char *to);
 
-OCTAVE_DEPRECATED ("use 'warn_implicit_conversion' instead")
+OCTAVE_DEPRECATED (4.2, "use 'warn_implicit_conversion' instead")
 OCTINTERP_API extern void
 gripe_implicit_conversion (const std::string& id, const std::string& from,
                            const std::string& to);
 
-OCTAVE_DEPRECATED ("use 'err_indexed_cs_list' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_indexed_cs_list' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_indexed_cs_list (void);
 
-OCTAVE_DEPRECATED ("use 'err_invalid_conversion' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_invalid_conversion' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_invalid_conversion (const std::string& from, const std::string& to);
 
-OCTAVE_DEPRECATED ("use 'err_invalid_inquiry_subscript' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_invalid_inquiry_subscript' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_invalid_inquiry_subscript (void);
 
-OCTAVE_DEPRECATED ("use 'warn_invalid_value_specified' instead")
+OCTAVE_DEPRECATED (4.2, "use 'warn_invalid_value_specified' instead")
 OCTINTERP_API extern void
 gripe_invalid_value_specified (const char *name);
 
-OCTAVE_DEPRECATED ("use 'warn_logical_conversion' instead")
+OCTAVE_DEPRECATED (4.2, "use 'warn_logical_conversion' instead")
 OCTINTERP_API extern void
 gripe_logical_conversion (void);
 
-OCTAVE_DEPRECATED ("use 'err_nonbraced_cs_list_assignment' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_nonbraced_cs_list_assignment' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_nonbraced_cs_list_assignment (void);
 
-OCTAVE_DEPRECATED ("use 'err_nonconformant' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_nonconformant' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_nonconformant (void);
 
-OCTAVE_DEPRECATED ("use 'err_nonconformant' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_nonconformant' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_nonconformant (octave_idx_type r1, octave_idx_type c1,
                      octave_idx_type r2, octave_idx_type c2);
 
-OCTAVE_DEPRECATED ("use 'err_not_implemented' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_not_implemented' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_not_implemented (const char *);
 
 // FIXME: Deprecated in 4.2, remove in 4.6
-OCTAVE_DEPRECATED ("use 'err_disabled_feature' or 'warn_disabled_feature' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_disabled_feature' or 'warn_disabled_feature' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_not_supported (const char *);
 
-OCTAVE_DEPRECATED ("use 'err_range_invalid' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_range_invalid' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_range_invalid (void);
 
-OCTAVE_DEPRECATED ("use 'err_square_matrix_required' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_square_matrix_required' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_square_matrix_required (const char *name);
 
-OCTAVE_DEPRECATED ("use 'err_string_invalid' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_string_invalid' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_string_invalid (void);
 
-OCTAVE_DEPRECATED ("use 'err_unrecognized_data_fmt' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_unrecognized_data_fmt' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_unrecognized_data_fmt (const char *warn_for);
 
-OCTAVE_DEPRECATED ("use 'err_unrecognized_float_fmt' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_unrecognized_float_fmt' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_unrecognized_float_fmt (void);
 
-OCTAVE_DEPRECATED ("use 'err_user_returned_invalid' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_user_returned_invalid' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_user_returned_invalid (const char *name);
 
-OCTAVE_DEPRECATED ("use 'err_user_supplied_eval' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_user_supplied_eval' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_user_supplied_eval (const char *name);
 
-OCTAVE_DEPRECATED ("use 'err_user_supplied_eval' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_user_supplied_eval' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_user_supplied_eval (octave::execution_exception& e, const char *name);
 
-OCTAVE_DEPRECATED ("use 'warn_complex_cmp' instead")
+OCTAVE_DEPRECATED (4.2, "use 'warn_complex_cmp' instead")
 OCTINTERP_API extern void
 gripe_warn_complex_cmp (void);
 
-OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
 OCTINTERP_API extern void
 gripe_wrong_type_arg (const char *name, const char *s,
                       bool is_error = true);
 
-OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
 OCTINTERP_API extern void
 gripe_wrong_type_arg (octave::execution_exception& e,
                       const char *name, const char *s,
                       bool is_error = true);
 
-OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
 OCTINTERP_API extern void
 gripe_wrong_type_arg (const char *name, const std::string& s,
                       bool is_error = true);
 
-OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
 OCTINTERP_API extern void
 gripe_wrong_type_arg (octave::execution_exception& e,
                       const char *name, const std::string& s,
                       bool is_error = true);
 
-OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' or 'warn_wrong_type_arg' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' or 'warn_wrong_type_arg' instead")
 OCTINTERP_API extern void
 gripe_wrong_type_arg (const char *name, const octave_value& tc,
                       bool is_error = true);
 
-OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
 OCTINTERP_API extern void
 gripe_wrong_type_arg (octave::execution_exception& e,
                       const char *name, const octave_value& tc,
                       bool is_error = true);
 
-OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
 OCTINTERP_API extern void
 gripe_wrong_type_arg (const std::string& name, const octave_value& tc,
                       bool is_error = true);
 
-OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
 OCTINTERP_API extern void
 gripe_wrong_type_arg (octave::execution_exception& e,
                       const std::string& name, const octave_value& tc,
                       bool is_error = true);
 
-OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
 OCTINTERP_API extern void
 gripe_wrong_type_arg (const char *s, bool is_error = true);
 
-OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
 OCTINTERP_API extern void
 gripe_wrong_type_arg (octave::execution_exception& e, const char *s,
                       bool is_error = true);
 
-OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
 OCTINTERP_API extern void
 gripe_wrong_type_arg (const std::string& s, bool is_error = true);
 
-OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
 OCTINTERP_API extern void
 gripe_wrong_type_arg (octave::execution_exception& e, const std::string& s,
                       bool is_error = true);
 
-OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
 OCTINTERP_API extern void
 gripe_wrong_type_arg (const octave_value& tc, bool is_error = true);
 
-OCTAVE_DEPRECATED ("use 'err_wrong_type_arg' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg' instead")
 OCTINTERP_API extern void
 gripe_wrong_type_arg (octave::execution_exception& e, const octave_value& tc,
                       bool is_error = true);
 
-OCTAVE_DEPRECATED ("use 'err_wrong_type_arg_for_binary_op' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg_for_binary_op' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_wrong_type_arg_for_binary_op (const octave_value& op);
 
-OCTAVE_DEPRECATED ("use 'err_wrong_type_arg_for_unary_op' instead")
+OCTAVE_DEPRECATED (4.2, "use 'err_wrong_type_arg_for_unary_op' instead")
 OCTAVE_NORETURN OCTINTERP_API extern void
 gripe_wrong_type_arg_for_unary_op (const octave_value& op);
 
 #endif
diff --git a/libinterp/corefcn/input.h b/libinterp/corefcn/input.h
--- a/libinterp/corefcn/input.h
+++ b/libinterp/corefcn/input.h
@@ -292,26 +292,26 @@ namespace octave
   private:
 
     base_reader *rep;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::base_reader' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::base_reader' instead")
 typedef octave::base_reader octave_base_reader;
 
-OCTAVE_DEPRECATED ("use 'octave::terminal_reader' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::terminal_reader' instead")
 typedef octave::terminal_reader octave_terminal_reader;
 
-OCTAVE_DEPRECATED ("use 'octave::file_reader' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::file_reader' instead")
 typedef octave::file_reader octave_file_reader;
 
-OCTAVE_DEPRECATED ("use 'octave::eval_string_reader' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::eval_string_reader' instead")
 typedef octave::eval_string_reader octave_eval_string_reader;
 
-OCTAVE_DEPRECATED ("use 'octave::input_reader' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::input_reader' instead")
 typedef octave::input_reader octave_input_reader;
 
 #endif
 
 #endif
diff --git a/libinterp/corefcn/interpreter.h b/libinterp/corefcn/interpreter.h
--- a/libinterp/corefcn/interpreter.h
+++ b/libinterp/corefcn/interpreter.h
@@ -203,31 +203,31 @@ namespace octave
     bool m_history_initialized;
 
     bool m_initialized;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::interpreter::recover_from_exception' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::interpreter::recover_from_exception' instead")
 static inline void
 recover_from_exception (void)
 {
   octave::interpreter::recover_from_exception ();
 }
 
-OCTAVE_DEPRECATED ("use 'octave::interpreter::add_atexit_function' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::interpreter::add_atexit_function' instead")
 static inline void
 add_atexit_function (const std::string& fname)
 {
   octave::interpreter::add_atexit_function (fname);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::interpreter::remove_atexit_function' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::interpreter::remove_atexit_function' instead")
 static inline bool
 remove_atexit_function (const std::string& fname)
 {
   return octave::interpreter::remove_atexit_function (fname);
 }
 
 #endif
 
diff --git a/libinterp/corefcn/mxarray.in.h b/libinterp/corefcn/mxarray.in.h
--- a/libinterp/corefcn/mxarray.in.h
+++ b/libinterp/corefcn/mxarray.in.h
@@ -284,17 +284,17 @@ public:
 
   virtual octave_value as_octave_value (void) const = 0;
 
 protected:
 
   mxArray_base (const mxArray_base&) { }
 
   // FIXME: Deprecated in 4.2, remove in 4.6
-  OCTAVE_DEPRECATED ("use 'err_invalid_type' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'err_invalid_type' instead")
   void invalid_type_error (void) const
   {
     error ("invalid type for operation");
   }
 
   OCTAVE_NORETURN void err_invalid_type (void) const
   {
     error ("invalid type for operation");
diff --git a/libinterp/corefcn/oct-stream.h b/libinterp/corefcn/oct-stream.h
--- a/libinterp/corefcn/oct-stream.h
+++ b/libinterp/corefcn/oct-stream.h
@@ -474,20 +474,20 @@ namespace octave
     octave_value do_open_file_numbers (void) const;
 
     int do_get_file_number (const octave_value& fid) const;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::base_stream' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::base_stream' instead")
 typedef octave::base_stream octave_base_stream;
 
-OCTAVE_DEPRECATED ("use 'octave::stream' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::stream' instead")
 typedef octave::stream octave_stream;
 
-OCTAVE_DEPRECATED ("use 'octave::stream_list' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::stream_list' instead")
 typedef octave::stream_list octave_stream_list;
 
 #endif
 
 #endif
diff --git a/libinterp/corefcn/pager.h b/libinterp/corefcn/pager.h
--- a/libinterp/corefcn/pager.h
+++ b/libinterp/corefcn/pager.h
@@ -145,29 +145,29 @@ namespace octave
     diary_buf *db;
   };
 
   extern OCTAVE_API void flush_stdout (void);
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::diary_buf' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::diary_buf' instead")
 typedef octave::diary_buf octave_diary_buf;
 
-OCTAVE_DEPRECATED ("use 'octave::diary_stream' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::diary_stream' instead")
 typedef octave::diary_stream octave_diary_stream;
 
-OCTAVE_DEPRECATED ("use 'octave::pager_buf' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::pager_buf' instead")
 typedef octave::pager_buf octave_pager_buf;
 
-OCTAVE_DEPRECATED ("use 'octave::pager_stream' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::pager_stream' instead")
 typedef octave::pager_stream octave_pager_stream;
 
-OCTAVE_DEPRECATED ("use 'octave::flush_stdout' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::flush_stdout' instead")
 static inline void
 flush_octave_stdout (void)
 {
   return octave::flush_stdout ();
 }
 
 #endif
 
diff --git a/libinterp/corefcn/sighandlers.h b/libinterp/corefcn/sighandlers.h
--- a/libinterp/corefcn/sighandlers.h
+++ b/libinterp/corefcn/sighandlers.h
@@ -77,57 +77,57 @@ namespace octave
                          bool restart_syscalls = true);
 
   // TRUE means we should try to enter the debugger on SIGINT.
   extern OCTINTERP_API bool Vdebug_on_interrupt;
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::interrupt_handler' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::interrupt_handler' instead")
 typedef octave::interrupt_handler octave_interrupt_handler;
 
-OCTAVE_DEPRECATED ("use 'octave::sig_handler' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sig_handler' instead")
 typedef octave::sig_handler octave_sig_handler;
 
-OCTAVE_DEPRECATED ("use 'octave::pipe_handler_error_count' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::pipe_handler_error_count' instead")
 static auto& pipe_handler_error_count = octave::pipe_handler_error_count;
 
-OCTAVE_DEPRECATED ("use 'octave::can_interrupt' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::can_interrupt' instead")
 static auto& can_interrupt = octave::can_interrupt;
 
-OCTAVE_DEPRECATED ("use 'octave::set_signal_handler' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::set_signal_handler' instead")
 inline octave::sig_handler *
 octave_set_signal_handler (int sig, octave::sig_handler *handler,
                            bool restart_syscalls = true)
 {
   return octave::set_signal_handler (sig, handler, restart_syscalls);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::set_signal_handler' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::set_signal_handler' instead")
 inline octave::sig_handler *
 octave_set_signal_handler (const char *signame, octave::sig_handler *handler,
                            bool restart_syscalls = true)
 {
   return octave::set_signal_handler (signame, handler, restart_syscalls);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::set_signal_handler' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::set_signal_handler' instead")
 const auto install_signal_handlers = octave::install_signal_handlers;
 
-OCTAVE_DEPRECATED ("use 'octave::signal_handler' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::signal_handler' instead")
 const auto octave_signal_handler = octave::signal_handler;
 
-OCTAVE_DEPRECATED ("use 'octave::interrupt_handler' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::interrupt_handler' instead")
 const auto octave_catch_interrupts = octave::catch_interrupts;
 
-OCTAVE_DEPRECATED ("use 'octave::ignore_interrupts' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::ignore_interrupts' instead")
 const auto octave_ignore_interrupts = octave::ignore_interrupts;
 
-OCTAVE_DEPRECATED ("use 'octave::set_interrupt_handler' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::set_interrupt_handler' instead")
 const auto octave_set_interrupt_handler = octave::set_interrupt_handler;
 
-OCTAVE_DEPRECATED ("use 'octave::Vdebug_on_interrupt' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::Vdebug_on_interrupt' instead")
 static auto& Vdebug_on_interrupt = octave::Vdebug_on_interrupt;
 
 #endif
 
 #endif
diff --git a/libinterp/corefcn/utils.h b/libinterp/corefcn/utils.h
--- a/libinterp/corefcn/utils.h
+++ b/libinterp/corefcn/utils.h
@@ -49,17 +49,17 @@ extern OCTINTERP_API int almost_match (c
                                        int min_match_len = 1,
                                        int case_sens = 1);
 
 extern OCTINTERP_API int
 keyword_almost_match (const char * const *std, int *min_len,
                       const std::string& s, int min_toks_to_match,
                       int max_toks);
 
-OCTAVE_DEPRECATED ("use 'octave_value::isempty' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave_value::isempty' instead")
 extern OCTINTERP_API int empty_arg (const char *name, octave_idx_type nr,
                                     octave_idx_type nc);
 
 extern OCTINTERP_API std::string
 search_path_for_file (const std::string&, const string_vector&);
 
 extern OCTINTERP_API string_vector
 search_path_for_all_files (const std::string&, const string_vector&);
@@ -71,20 +71,20 @@ extern OCTINTERP_API std::string
 find_data_file_in_load_path  (const std::string& fcn,
                               const std::string& file,
                               bool require_regular_file = false);
 
 extern OCTINTERP_API std::string contents_file_in_path (const std::string&);
 
 extern OCTINTERP_API std::string fcn_file_in_path (const std::string&);
 
-OCTAVE_DEPRECATED ("use 'load_path::find_oct_file' instead")
+OCTAVE_DEPRECATED (4.2, "use 'load_path::find_oct_file' instead")
 extern OCTINTERP_API std::string oct_file_in_path (const std::string&);
 
-OCTAVE_DEPRECATED ("use 'load_path::find_mex_file' instead")
+OCTAVE_DEPRECATED (4.2, "use 'load_path::find_mex_file' instead")
 extern OCTINTERP_API std::string mex_file_in_path (const std::string&);
 
 extern OCTINTERP_API std::string do_string_escapes (const std::string& s);
 
 extern OCTINTERP_API const char * undo_string_escape (char c);
 
 extern OCTINTERP_API std::string undo_string_escapes (const std::string& s);
 
diff --git a/libinterp/octave-value/ov-base-sparse.h b/libinterp/octave-value/ov-base-sparse.h
--- a/libinterp/octave-value/ov-base-sparse.h
+++ b/libinterp/octave-value/ov-base-sparse.h
@@ -145,17 +145,17 @@ public:
   bool issparse (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_true (void) const;
 
-  OCTAVE_DEPRECATED ("use 'nzmax' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'nzmax' instead")
   octave_idx_type capacity (void) const { return nzmax (); }
 
   bool print_as_scalar (void) const;
 
   void print (std::ostream& os, bool pr_as_read_syntax = false);
 
   void print_info (std::ostream& os, const std::string& prefix) const;
 
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -308,17 +308,17 @@ public:
     return dv(1);
   }
 
   virtual int ndims (void) const
   { return dims ().ndims (); }
 
   virtual octave_idx_type numel (void) const { return dims ().numel (); }
 
-  OCTAVE_DEPRECATED ("use 'numel' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'numel' instead")
   virtual octave_idx_type capacity (void) const
   { return numel (); }
 
   virtual size_t byte_size (void) const { return 0; }
 
   virtual octave_idx_type nnz (void) const;
 
   virtual octave_idx_type nzmax (void) const;
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -279,17 +279,17 @@ public:
   octave_value (const Range& r, bool force_range = false);
   octave_value (const octave_map& m);
   octave_value (const octave_scalar_map& m);
   octave_value (const octave_map& m, const std::string& id,
                 const std::list<std::string>& plist);
   octave_value (const octave_scalar_map& m, const std::string& id,
                 const std::list<std::string>& plist);
 
-  OCTAVE_DEPRECATED ("note: second argument is always ignored; use octave_value (const octave_value_list&) instead")
+  OCTAVE_DEPRECATED (4.4, "note: second argument is always ignored; use octave_value (const octave_value_list&) instead")
   octave_value (const octave_value_list& m, bool);
 
   octave_value (const octave_value_list& m);
 
   octave_value (octave_value::magic_colon);
 
   octave_value (octave_base_value *new_rep, bool borrow = false);
 
@@ -472,17 +472,17 @@ public:
 
   // Are the dimensions of this constant zero by zero?
   bool is_zero_by_zero (void) const
   { return (ndims () == 2 && rows () == 0 && columns () == 0); }
 
   octave_idx_type numel (void) const
   { return rep->numel (); }
 
-  OCTAVE_DEPRECATED ("use 'numel' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'numel' instead")
   octave_idx_type capacity (void) const
   { return rep->numel (); }
 
   size_t byte_size (void) const
   { return rep->byte_size (); }
 
   octave_idx_type nnz (void) const { return rep->nnz (); }
 
@@ -515,31 +515,31 @@ public:
   { return rep->is_defined (); }
 
   bool is_undefined (void) const
   { return ! is_defined (); }
 
   bool isempty (void) const
   { return rep->isempty (); }
 
-  OCTAVE_DEPRECATED ("use 'isempty' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'isempty' instead")
   bool is_empty (void) const
   { return rep->isempty (); }
 
   bool iscell (void) const
   { return rep->iscell (); }
 
-  OCTAVE_DEPRECATED ("use 'iscell' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'iscell' instead")
   bool is_cell (void) const
   { return rep->iscell (); }
 
   bool iscellstr (void) const
   { return rep->iscellstr (); }
 
-  OCTAVE_DEPRECATED ("use 'iscellstr' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'iscellstr' instead")
   bool is_cellstr (void) const
   { return rep->iscellstr (); }
 
   bool is_real_scalar (void) const
   { return rep->is_real_scalar (); }
 
   bool is_real_matrix (void) const
   { return rep->is_real_matrix (); }
@@ -575,47 +575,47 @@ public:
   { return rep->is_string () && ! rep->is_sq_string (); }
 
   bool is_range (void) const
   { return rep->is_range (); }
 
   bool isstruct (void) const
   { return rep->isstruct (); }
 
-  OCTAVE_DEPRECATED ("use 'isstruct' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'isstruct' instead")
   bool is_map (void) const
   { return rep->isstruct (); }
 
   bool is_classdef_object (void) const
   { return rep->is_classdef_object (); }
 
   bool isobject (void) const
   { return rep->isobject (); }
 
-  OCTAVE_DEPRECATED ("use 'isobject' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'isobject' instead")
   bool is_object (void) const
   { return rep->isobject (); }
 
   bool isjava (void) const
   { return rep->isjava (); }
 
-  OCTAVE_DEPRECATED ("use 'isjava' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'isjava' instead")
   bool is_java (void) const
   { return rep->isjava (); }
 
   bool is_cs_list (void) const
   { return rep->is_cs_list (); }
 
   bool is_magic_colon (void) const
   { return rep->is_magic_colon (); }
 
   bool isnull (void) const
   { return rep->isnull (); }
 
-  OCTAVE_DEPRECATED ("use 'isnull' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'isnull' instead")
   bool is_null_value (void) const
   { return rep->isnull (); }
 
   // Are any or all of the elements in this constant nonzero?
 
   octave_value all (int dim = 0) const
   { return rep->all (dim); }
 
@@ -631,17 +631,17 @@ public:
   { return rep->is_double_type (); }
 
   bool is_single_type (void) const
   { return rep->is_single_type (); }
 
   bool isfloat (void) const
   { return rep->isfloat (); }
 
-  OCTAVE_DEPRECATED ("use 'isfloat' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'isfloat' instead")
   bool is_float_type (void) const
   { return rep->isfloat (); }
 
   // Integer types.
 
   bool is_int8_type (void) const
   { return rep->is_int8_type (); }
 
@@ -664,60 +664,60 @@ public:
   { return rep->is_uint32_type (); }
 
   bool is_uint64_type (void) const
   { return rep->is_uint64_type (); }
 
   bool isinteger (void) const
   { return rep->isinteger (); }
 
-  OCTAVE_DEPRECATED ("use 'isinteger' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'isinteger' instead")
   bool is_integer_type (void) const
   { return rep->isinteger (); }
 
   // Other type stuff.
 
   bool islogical (void) const
   { return rep->islogical (); }
 
-  OCTAVE_DEPRECATED ("use 'islogical' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'islogical' instead")
   bool is_bool_type (void) const
   { return rep->islogical (); }
 
   bool isreal (void) const
   { return rep->isreal (); }
 
-  OCTAVE_DEPRECATED ("use 'isreal' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'isreal' instead")
   bool is_real_type (void) const
   { return rep->isreal (); }
 
   bool iscomplex (void) const
   { return rep->iscomplex (); }
 
-  OCTAVE_DEPRECATED ("use 'iscomplex' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'iscomplex' instead")
   bool is_complex_type (void) const
   { return rep->iscomplex (); }
 
   bool is_scalar_type (void) const
   { return rep->is_scalar_type (); }
 
   bool is_matrix_type (void) const
   { return rep->is_matrix_type (); }
 
   bool isnumeric (void) const
   { return rep->isnumeric (); }
 
-  OCTAVE_DEPRECATED ("use 'isnumeric' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'isnumeric' instead")
   bool is_numeric_type (void) const
   { return rep->isnumeric (); }
 
   bool issparse (void) const
   { return rep->issparse (); }
 
-  OCTAVE_DEPRECATED ("use 'issparse' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'issparse' instead")
   bool is_sparse_type (void) const
   { return rep->issparse (); }
 
   // Does this constant correspond to a truth value?
 
   bool is_true (void) const
   { return rep->is_true (); }
 
@@ -935,17 +935,17 @@ public:
   { return rep->uint64_array_value (); }
 
   std::string string_value (bool force = false) const
   { return rep->string_value (force); }
 
   string_vector string_vector_value (bool pad = false) const
   { return rep->string_vector_value (pad); }
 
-  OCTAVE_DEPRECATED ("use 'string_vector_value' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'string_vector_value' instead")
   string_vector all_strings (bool pad = false) const
   { return string_vector_value (pad); }
 
   Cell cell_value (void) const;
 
   Array<std::string> cellstr_value (void) const
   { return rep->cellstr_value (); }
 
@@ -1347,17 +1347,17 @@ public:
   { return rep->sort (dim, mode); }
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
                      sortmode mode = ASCENDING) const
   { return rep->sort (sidx, dim, mode); }
 
   sortmode issorted (sortmode mode = UNSORTED) const
   { return rep->issorted (mode); }
 
-  OCTAVE_DEPRECATED ("use 'issorted' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'issorted' instead")
   sortmode is_sorted (sortmode mode = UNSORTED) const
   { return rep->issorted (mode); }
 
   Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const
   { return rep->sort_rows_idx (mode); }
 
   sortmode is_sorted_rows (sortmode mode = UNSORTED) const
   { return rep->is_sorted_rows (mode); }
diff --git a/libinterp/octave.h b/libinterp/octave.h
--- a/libinterp/octave.h
+++ b/libinterp/octave.h
@@ -324,16 +324,16 @@ namespace octave
 }
 
 #endif
 
 #if defined  (__cplusplus)
 extern "C" {
 #endif
 
-OCTAVE_DEPRECATED ("see the Octave documentation for other options")
+OCTAVE_DEPRECATED (4.4, "see the Octave documentation for other options")
 extern OCTINTERP_API int octave_main (int argc, char **argv, int embedded);
 
 #if defined  (__cplusplus)
 }
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -573,115 +573,115 @@ namespace octave
   eval_string (const std::string&, bool silent, int& parse_status);
 
   extern OCTINTERP_API void
   cleanup_statement_list (octave::tree_statement_list **lst);
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::get_help_from_file' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::get_help_from_file' instead")
 static inline std::string
 get_help_from_file (const std::string& nm, bool& symbol_found,
                     std::string& file)
 {
   return octave::get_help_from_file (nm, symbol_found, file);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::get_help_from_file' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::get_help_from_file' instead")
 static inline std::string
 get_help_from_file (const std::string& nm, bool& symbol_found)
 {
   return octave::get_help_from_file (nm, symbol_found);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::lookup_autoload' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::lookup_autoload' instead")
 static inline std::string
 lookup_autoload (const std::string& nm)
 {
   return octave::lookup_autoload (nm);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::autoloaded_functions' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::autoloaded_functions' instead")
 static inline string_vector
 autoloaded_functions (void)
 {
   return octave::autoloaded_functions ();
 }
 
-OCTAVE_DEPRECATED ("use 'octave::reverse_lookup_autoload' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::reverse_lookup_autoload' instead")
 static inline string_vector
 reverse_lookup_autoload (const std::string& nm)
 {
   return octave::reverse_lookup_autoload (nm);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::load_fcn_from_file' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::load_fcn_from_file' instead")
 static inline octave_function *
 load_fcn_from_file (const std::string& file_name,
                     const std::string& dir_name = "",
                     const std::string& dispatch_type = "",
                     const std::string& package_name = "",
                     const std::string& fcn_name = "",
                     bool autoload = false)
 {
   return octave::load_fcn_from_file (file_name, dir_name, dispatch_type,
                                      package_name, fcn_name, autoload);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::source_file' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::source_file' instead")
 static inline void
 source_file (const std::string& file_name,
              const std::string& context = "",
              bool verbose = false, bool require_file = true,
              const std::string& warn_for = "")
 {
   octave::source_file (file_name, context, verbose, require_file, warn_for);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::feval' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::feval' instead")
 static inline octave_value_list
 feval (const std::string& name,
        const octave_value_list& args = octave_value_list (),
        int nargout = 0)
 {
   return octave::feval (name, args, nargout);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::feval' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::feval' instead")
 static inline octave_value_list
 feval (octave_function *fcn,
        const octave_value_list& args = octave_value_list (),
        int nargout = 0)
 {
   return octave::feval (fcn, args, nargout);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::feval' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::feval' instead")
 static inline octave_value_list
 feval (const octave_value_list& args, int nargout = 0)
 {
   return octave::feval (args, nargout);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::eval_string' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::eval_string' instead")
 static inline octave_value_list
 eval_string (const std::string& str, bool silent, int& parse_status, int nargout)
 {
   return octave::eval_string (str, silent, parse_status, nargout);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::eval_string' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::eval_string' instead")
 static inline octave_value
 eval_string (const std::string& str, bool silent, int& parse_status)
 {
   return octave::eval_string (str, silent, parse_status);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::cleanup_statement_list' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::cleanup_statement_list' instead")
 static inline void
 cleanup_statement_list (octave::tree_statement_list **lst)
 {
   octave::cleanup_statement_list (lst);
 }
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-array-list.h b/libinterp/parse-tree/pt-array-list.h
--- a/libinterp/parse-tree/pt-array-list.h
+++ b/libinterp/parse-tree/pt-array-list.h
@@ -82,14 +82,14 @@ namespace octave
     tree_expression * dup (symbol_table::scope& scope) const;
 
     void accept (tree_walker& tw);
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_array_list' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_array_list' instead")
 typedef octave::tree_array_list tree_array_list;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-assign.h b/libinterp/parse-tree/pt-assign.h
--- a/libinterp/parse-tree/pt-assign.h
+++ b/libinterp/parse-tree/pt-assign.h
@@ -160,17 +160,17 @@ namespace octave
 
     // True if we should not delete the lhs.
     bool preserve;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_simple_assignment' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_simple_assignment' instead")
 typedef octave::tree_simple_assignment tree_simple_assignment;
 
-OCTAVE_DEPRECATED ("use 'octave::tree_multi_assignment' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_multi_assignment' instead")
 typedef octave::tree_multi_assignment tree_multi_assignment;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-binop.h b/libinterp/parse-tree/pt-binop.h
--- a/libinterp/parse-tree/pt-binop.h
+++ b/libinterp/parse-tree/pt-binop.h
@@ -181,17 +181,17 @@ namespace octave
 
     // The type of the expression.
     type etype;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_binary_expression' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_binary_expression' instead")
 typedef octave::tree_binary_expression tree_binary_expression;
 
-OCTAVE_DEPRECATED ("use 'octave::tree_boolean_expression' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_boolean_expression' instead")
 typedef octave::tree_boolean_expression tree_boolean_expression;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-bp.h b/libinterp/parse-tree/pt-bp.h
--- a/libinterp/parse-tree/pt-bp.h
+++ b/libinterp/parse-tree/pt-bp.h
@@ -173,14 +173,14 @@ namespace octave
 
   // TRUE means SIGINT should put us in the debugger at the next
   // available breakpoint.
   extern bool octave_debug_on_interrupt_state;
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_breakpoint' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_breakpoint' instead")
 typedef octave::tree_breakpoint tree_breakpoint;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-cbinop.h b/libinterp/parse-tree/pt-cbinop.h
--- a/libinterp/parse-tree/pt-cbinop.h
+++ b/libinterp/parse-tree/pt-cbinop.h
@@ -84,14 +84,14 @@ namespace octave
   maybe_compound_binary_expression (tree_expression *a, tree_expression *b,
                                     int l = -1, int c = -1,
                                     octave_value::binary_op t
                                     = octave_value::unknown_binary_op);
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_compound_binary_expression' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_compound_binary_expression' instead")
 typedef octave::tree_compound_binary_expression tree_compound_binary_expression;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-cell.h b/libinterp/parse-tree/pt-cell.h
--- a/libinterp/parse-tree/pt-cell.h
+++ b/libinterp/parse-tree/pt-cell.h
@@ -66,14 +66,14 @@ namespace octave
     {
       tw.visit_cell (*this);
     }
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_cell' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_cell' instead")
 typedef octave::tree_cell tree_cell;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-check.h b/libinterp/parse-tree/pt-check.h
--- a/libinterp/parse-tree/pt-check.h
+++ b/libinterp/parse-tree/pt-check.h
@@ -139,14 +139,14 @@ namespace octave
     std::string file_name;
 
     OCTAVE_NORETURN void errmsg (const std::string& msg, int line);
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_checker' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_checker' instead")
 typedef octave::tree_checker tree_checker;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-cmd.h b/libinterp/parse-tree/pt-cmd.h
--- a/libinterp/parse-tree/pt-cmd.h
+++ b/libinterp/parse-tree/pt-cmd.h
@@ -122,20 +122,20 @@ namespace octave
 
     tree_function_def (const octave_value& v, int l = -1, int c = -1)
       : tree_command (l, c), fcn (v) { }
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_command' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_command' instead")
 typedef octave::tree_command tree_command;
 
-OCTAVE_DEPRECATED ("use 'octave::tree_no_op_command' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_no_op_command' instead")
 typedef octave::tree_no_op_command tree_no_op_command;
 
-OCTAVE_DEPRECATED ("use 'octave::tree_function_def' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_function_def' instead")
 typedef octave::tree_function_def tree_function_def;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-colon.h b/libinterp/parse-tree/pt-colon.h
--- a/libinterp/parse-tree/pt-colon.h
+++ b/libinterp/parse-tree/pt-colon.h
@@ -109,14 +109,14 @@ namespace octave
     tree_expression *op_increment;
 
     bool save_base;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_colon_expression' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_colon_expression' instead")
 typedef octave::tree_colon_expression tree_colon_expression;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-const.h b/libinterp/parse-tree/pt-const.h
--- a/libinterp/parse-tree/pt-const.h
+++ b/libinterp/parse-tree/pt-const.h
@@ -99,14 +99,14 @@ namespace octave
 
     // The original text form of this constant.
     std::string orig_text;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_constant' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_constant' instead")
 typedef octave::tree_constant tree_constant;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-decl.h b/libinterp/parse-tree/pt-decl.h
--- a/libinterp/parse-tree/pt-decl.h
+++ b/libinterp/parse-tree/pt-decl.h
@@ -201,19 +201,19 @@ namespace octave
 
     // The list of variables or initializers in this declaration command.
     tree_decl_init_list *init_list;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_decl_elt' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_decl_elt' instead")
 typedef octave::tree_decl_elt tree_decl_elt;
 
 // tree_decl_init_list is derived from a template.
 
-OCTAVE_DEPRECATED ("use 'octave::tree_decl_command' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_decl_command' instead")
 typedef octave::tree_decl_command tree_decl_command;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-eval.h b/libinterp/parse-tree/pt-eval.h
--- a/libinterp/parse-tree/pt-eval.h
+++ b/libinterp/parse-tree/pt-eval.h
@@ -326,14 +326,14 @@ namespace octave
 }
 
 // Maximum nesting level for functions, scripts, or sourced files called
 // recursively.
 extern int Vmax_recursion_depth;
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_evaluator' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_evaluator' instead")
 typedef octave::tree_evaluator tree_evaluator;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-except.h b/libinterp/parse-tree/pt-except.h
--- a/libinterp/parse-tree/pt-except.h
+++ b/libinterp/parse-tree/pt-except.h
@@ -160,17 +160,17 @@ namespace octave
 
     // Comment preceding END_UNWIND_PROTECT token.
     octave_comment_list *trail_comm;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_try_catch_command' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_try_catch_command' instead")
 typedef octave::tree_try_catch_command tree_try_catch_command;
 
-OCTAVE_DEPRECATED ("use 'octave::tree_unwind_protect_command' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_unwind_protect_command' instead")
 typedef octave::tree_unwind_protect_command tree_unwind_protect_command;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-exp.h b/libinterp/parse-tree/pt-exp.h
--- a/libinterp/parse-tree/pt-exp.h
+++ b/libinterp/parse-tree/pt-exp.h
@@ -155,14 +155,14 @@ namespace octave
 
     // Print result of rvalue for this expression?
     bool print_flag;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_expression' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_expression' instead")
 typedef octave::tree_expression tree_expression;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-fcn-handle.h b/libinterp/parse-tree/pt-fcn-handle.h
--- a/libinterp/parse-tree/pt-fcn-handle.h
+++ b/libinterp/parse-tree/pt-fcn-handle.h
@@ -152,17 +152,17 @@ namespace octave
 
     // Filename where the handle was defined.
     std::string m_file_name;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_fcn_handle' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_fcn_handle' instead")
 typedef octave::tree_fcn_handle tree_fcn_handle;
 
-OCTAVE_DEPRECATED ("use 'octave::tree_anon_fcn_handle' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_anon_fcn_handle' instead")
 typedef octave::tree_anon_fcn_handle tree_anon_fcn_handle;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-funcall.h b/libinterp/parse-tree/pt-funcall.h
--- a/libinterp/parse-tree/pt-funcall.h
+++ b/libinterp/parse-tree/pt-funcall.h
@@ -85,14 +85,14 @@ namespace octave
 
     // Argument list.
     octave_value_list args;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_funcall' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_funcall' instead")
 typedef octave::tree_funcall tree_funcall;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-id.h b/libinterp/parse-tree/pt-id.h
--- a/libinterp/parse-tree/pt-id.h
+++ b/libinterp/parse-tree/pt-id.h
@@ -160,17 +160,17 @@ namespace octave
     {
       return octave_lvalue (); // black hole lvalue
     }
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_identifier' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_identifier' instead")
 typedef octave::tree_identifier tree_identifier;
 
-OCTAVE_DEPRECATED ("use 'octave::tree_black_hole' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_black_hole' instead")
 typedef octave::tree_black_hole tree_black_hole;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-idx.h b/libinterp/parse-tree/pt-idx.h
--- a/libinterp/parse-tree/pt-idx.h
+++ b/libinterp/parse-tree/pt-idx.h
@@ -127,14 +127,14 @@ namespace octave
     tree_index_expression (int l, int c);
 
     octave_map make_arg_struct (void) const;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_index_expression' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_index_expression' instead")
 typedef octave::tree_index_expression tree_index_expression;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-jump.h b/libinterp/parse-tree/pt-jump.h
--- a/libinterp/parse-tree/pt-jump.h
+++ b/libinterp/parse-tree/pt-jump.h
@@ -104,20 +104,20 @@ namespace octave
     }
 
     static int returning;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_break_command' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_break_command' instead")
 typedef octave::tree_break_command tree_break_command;
 
-OCTAVE_DEPRECATED ("use 'octave::tree_continue_command' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_continue_command' instead")
 typedef octave::tree_continue_command tree_continue_command;
 
-OCTAVE_DEPRECATED ("use 'octave::tree_return_command' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_return_command' instead")
 typedef octave::tree_return_command tree_return_command;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-loop.h b/libinterp/parse-tree/pt-loop.h
--- a/libinterp/parse-tree/pt-loop.h
+++ b/libinterp/parse-tree/pt-loop.h
@@ -321,23 +321,23 @@ namespace octave
 
     // Comment preceding ENDFOR token.
     octave_comment_list *trail_comm;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_while_command' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_while_command' instead")
 typedef octave::tree_while_command tree_while_command;
 
-OCTAVE_DEPRECATED ("use 'octave::tree_do_until_command' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_do_until_command' instead")
 typedef octave::tree_do_until_command tree_do_until_command;
 
-OCTAVE_DEPRECATED ("use 'octave::tree_simple_for_command' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_simple_for_command' instead")
 typedef octave::tree_simple_for_command tree_simple_for_command;
 
-OCTAVE_DEPRECATED ("use 'octave::tree_complex_for_command' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_complex_for_command' instead")
 typedef octave::tree_complex_for_command tree_complex_for_command;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-mat.h b/libinterp/parse-tree/pt-mat.h
--- a/libinterp/parse-tree/pt-mat.h
+++ b/libinterp/parse-tree/pt-mat.h
@@ -78,27 +78,27 @@ namespace octave
   get_concat_class (const std::string& c1, const std::string& c2);
 
   extern void
   maybe_warn_string_concat (bool all_dq_strings_p, bool all_sq_strings_p);
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_matrix' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_matrix' instead")
 typedef octave::tree_matrix tree_matrix;
 
-OCTAVE_DEPRECATED ("use 'octave::get_concat_class' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::get_concat_class' instead")
 static inline std::string
 get_concat_class (const std::string& c1, const std::string& c2)
 {
   return octave::get_concat_class (c1, c2);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::maybe_warn_string_concat' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::maybe_warn_string_concat' instead")
 static inline void
 maybe_warn_string_concat (bool all_dq_strings_p, bool all_sq_strings_p)
 {
   octave::maybe_warn_string_concat (all_dq_strings_p, all_sq_strings_p);
 }
 
 #endif
 
diff --git a/libinterp/parse-tree/pt-pr-code.h b/libinterp/parse-tree/pt-pr-code.h
--- a/libinterp/parse-tree/pt-pr-code.h
+++ b/libinterp/parse-tree/pt-pr-code.h
@@ -192,14 +192,14 @@ namespace octave
     // Must create with an output stream!
 
     tree_print_code (void);
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_print_code' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_print_code' instead")
 typedef octave::tree_print_code tree_print_code;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-select.h b/libinterp/parse-tree/pt-select.h
--- a/libinterp/parse-tree/pt-select.h
+++ b/libinterp/parse-tree/pt-select.h
@@ -288,27 +288,27 @@ namespace octave
 
     // Comment preceding ENDSWITCH token.
     octave_comment_list *trail_comm;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_if_clause' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_if_clause' instead")
 typedef octave::tree_if_clause tree_if_clause;
 
 // tree_if_command_list is derived from a template.
 
-OCTAVE_DEPRECATED ("use 'octave::tree_if_command' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_if_command' instead")
 typedef octave::tree_if_command tree_if_command;
 
-OCTAVE_DEPRECATED ("use 'octave::tree_switch_case' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_switch_case' instead")
 typedef octave::tree_switch_case tree_switch_case;
 
 // tree_switch_case_list is derived from a template.
 
-OCTAVE_DEPRECATED ("use 'octave::tree_switch_command' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_switch_command' instead")
 typedef octave::tree_switch_command tree_switch_command;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-stmt.h b/libinterp/parse-tree/pt-stmt.h
--- a/libinterp/parse-tree/pt-stmt.h
+++ b/libinterp/parse-tree/pt-stmt.h
@@ -197,17 +197,17 @@ namespace octave
 
     // Does this list of statements make up the body of a script?
     bool script_body;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_statement' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_statement' instead")
 typedef octave::tree_statement tree_statement;
 
-OCTAVE_DEPRECATED ("use 'octave::tree_statement_list' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_statement_list' instead")
 typedef octave::tree_statement_list tree_statement_list;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-unop.h b/libinterp/parse-tree/pt-unop.h
--- a/libinterp/parse-tree/pt-unop.h
+++ b/libinterp/parse-tree/pt-unop.h
@@ -147,20 +147,20 @@ namespace octave
     }
 
     std::string profiler_name (void) const { return "postfix " + oper (); }
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_unary_expression' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_unary_expression' instead")
 typedef octave::tree_unary_expression tree_unary_expression;
 
-OCTAVE_DEPRECATED ("use 'octave::tree_prefix_expression' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_prefix_expression' instead")
 typedef octave::tree_prefix_expression tree_prefix_expression;
 
-OCTAVE_DEPRECATED ("use 'octave::tree_postfix_expression' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_postfix_expression' instead")
 typedef octave::tree_postfix_expression tree_postfix_expression;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt-walk.h b/libinterp/parse-tree/pt-walk.h
--- a/libinterp/parse-tree/pt-walk.h
+++ b/libinterp/parse-tree/pt-walk.h
@@ -292,14 +292,14 @@ namespace octave
 
     virtual void
     visit_classdef (tree_classdef&) { } // = 0;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree_walker' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree_walker' instead")
 typedef octave::tree_walker tree_walker;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/pt.h b/libinterp/parse-tree/pt.h
--- a/libinterp/parse-tree/pt.h
+++ b/libinterp/parse-tree/pt.h
@@ -99,14 +99,14 @@ namespace octave
 
     // Breakpoint flag: NULL if no breakpoint, or the condition if there is one
     std::string *bp;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::tree' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::tree' instead")
 typedef octave::tree tree;
 
 #endif
 
 #endif
diff --git a/libinterp/parse-tree/token.h b/libinterp/parse-tree/token.h
--- a/libinterp/parse-tree/token.h
+++ b/libinterp/parse-tree/token.h
@@ -192,14 +192,14 @@ namespace octave
     tok_info m_tok_info;
 
     std::string m_orig_text;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::token' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::token' instead")
 typedef octave::token token;
 
 #endif
 
 #endif
diff --git a/liboctave/array/Array.h b/liboctave/array/Array.h
--- a/liboctave/array/Array.h
+++ b/liboctave/array/Array.h
@@ -335,36 +335,36 @@ public:
   void clear (octave_idx_type r, octave_idx_type c)
   { clear (dim_vector (r, c)); }
 
   // Number of elements in the array.  These are all synonyms.
   //@{
   //! Number of elements in the array.
   //! Synonymous with numel().
   //! @note This method is deprecated in favour of numel().
-  OCTAVE_DEPRECATED ("use 'numel' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'numel' instead")
   octave_idx_type capacity (void) const { return numel (); }
 
   //! Number of elements in the array.
   /*! Synonymous with numel().
       @note This method is deprecated in favour of numel().
 
       @note
       This is @em not the same as @c %length() at the Octave interpreter.
       At the Octave interpreter, the function @c %length() returns the
       length of the greatest dimension.  This method returns the total
       number of elements.
    */
-  OCTAVE_DEPRECATED ("use 'numel' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'numel' instead")
   octave_idx_type length (void) const { return numel (); }
 
   //! Number of elements in the array.
   //! Synonymous with numel().
   //! @note This method is deprecated in favour of numel().
-  OCTAVE_DEPRECATED ("use 'numel' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'numel' instead")
   octave_idx_type nelem (void) const { return numel (); }
 
   //! Number of elements in the array.
   octave_idx_type numel (void) const { return slice_len; }
   //@}
 
   //! Return the array as a column vector.
   Array<T> as_column (void) const
@@ -553,29 +553,29 @@ public:
   { return Array<T> (*this, new_dims); }
 
   Array<T> permute (const Array<octave_idx_type>& vec, bool inv = false) const;
   Array<T> ipermute (const Array<octave_idx_type>& vec) const
   { return permute (vec, true); }
 
   bool issquare (void) const { return (dim1 () == dim2 ()); }
 
-  OCTAVE_DEPRECATED ("use 'issquare' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'issquare' instead")
   bool is_square (void) const
   { return issquare (); }
 
   bool isempty (void) const { return numel () == 0; }
 
-  OCTAVE_DEPRECATED ("use 'isempty' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'isempty' instead")
   bool is_empty (void) const
   { return isempty (); }
 
   bool isvector (void) const { return dimensions.isvector (); }
 
-  OCTAVE_DEPRECATED ("use 'isvector' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'isvector' instead")
   bool is_vector (void) const
   { return isvector (); }
 
   bool is_nd_vector (void) const { return dimensions.is_nd_vector (); }
 
   Array<T> transpose (void) const;
   Array<T> hermitian (T (*fcn) (const T&) = 0) const;
 
@@ -707,17 +707,17 @@ public:
 
   Array<T> sort (int dim = 0, sortmode mode = ASCENDING) const;
   Array<T> sort (Array<octave_idx_type> &sidx, int dim = 0,
                  sortmode mode = ASCENDING) const;
 
   //! Ordering is auto-detected or can be specified.
   sortmode issorted (sortmode mode = UNSORTED) const;
 
-  OCTAVE_DEPRECATED ("use 'issorted' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'issorted' instead")
   sortmode is_sorted (sortmode mode = UNSORTED) const
   { return issorted (mode); }
 
   //! Sort by rows returns only indices.
   Array<octave_idx_type> sort_rows_idx (sortmode mode = ASCENDING) const;
 
   //! Ordering is auto-detected or can be specified.
   sortmode is_sorted_rows (sortmode mode = UNSORTED) const;
diff --git a/liboctave/array/CMatrix.h b/liboctave/array/CMatrix.h
--- a/liboctave/array/CMatrix.h
+++ b/liboctave/array/CMatrix.h
@@ -106,17 +106,17 @@ public:
 
   explicit ComplexMatrix (const charMatrix& a);
 
   bool operator == (const ComplexMatrix& a) const;
   bool operator != (const ComplexMatrix& a) const;
 
   bool ishermitian (void) const;
 
-  OCTAVE_DEPRECATED ("use 'ishermitian' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'ishermitian' instead")
   bool is_hermitian (void) const
   { return ishermitian (); }
 
   // destructive insert/delete/reorder operations
 
   ComplexMatrix& insert (const Matrix& a, octave_idx_type r, octave_idx_type c);
   ComplexMatrix& insert (const RowVector& a,
                          octave_idx_type r, octave_idx_type c);
diff --git a/liboctave/array/CSparse.h b/liboctave/array/CSparse.h
--- a/liboctave/array/CSparse.h
+++ b/liboctave/array/CSparse.h
@@ -108,17 +108,17 @@ public:
     return *this;
   }
 
   bool operator == (const SparseComplexMatrix& a) const;
   bool operator != (const SparseComplexMatrix& a) const;
 
   bool ishermitian (void) const;
 
-  OCTAVE_DEPRECATED ("use 'ishermitian' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'ishermitian' instead")
   bool is_hermitian (void) const
   { return ishermitian (); }
 
   SparseComplexMatrix max (int dim = -1) const;
   SparseComplexMatrix max (Array<octave_idx_type>& index, int dim = -1) const;
   SparseComplexMatrix min (int dim = -1) const;
   SparseComplexMatrix min (Array<octave_idx_type>& index, int dim = -1) const;
 
diff --git a/liboctave/array/MatrixType.h b/liboctave/array/MatrixType.h
--- a/liboctave/array/MatrixType.h
+++ b/liboctave/array/MatrixType.h
@@ -105,51 +105,51 @@ public:
 
   int nlower (void) const { return lower_band; }
 
   bool is_dense (void) const { return dense; }
 
   bool isdiag (void) const
   { return (typ == Diagonal || typ == Permuted_Diagonal); }
 
-  OCTAVE_DEPRECATED ("use 'isdiag' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'isdiag' instead")
   bool is_diagonal (void) const
   { return isdiag (); }
 
   bool istriu (void) const
   { return (typ == Upper || typ == Permuted_Upper); }
 
-  OCTAVE_DEPRECATED ("use 'istriu' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'istriu' instead")
   bool is_upper_triangular (void) const
   { return istriu (); }
 
   bool istril (void) const
   { return (typ == Lower || typ == Permuted_Lower); }
 
-  OCTAVE_DEPRECATED ("use 'istril' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'istril' instead")
   bool is_lower_triangular (void) const
   { return istril (); }
 
   bool isbanded (void) const
   { return (typ == Banded || typ == Banded_Hermitian); }
 
-  OCTAVE_DEPRECATED ("use 'isbanded' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'isbanded' instead")
   bool is_banded (void) const
   { return isbanded (); }
 
   bool is_tridiagonal (void) const
   { return (typ == Tridiagonal || typ == Tridiagonal_Hermitian); }
 
   bool ishermitian (void) const
   {
     return (typ == Banded_Hermitian || typ == Tridiagonal_Hermitian
             || typ == Hermitian);
   }
 
-  OCTAVE_DEPRECATED ("use 'ishermitian' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'ishermitian' instead")
   bool is_hermitian (void) const
   { return ishermitian (); }
 
   bool is_rectangular (void) const { return (typ == Rectangular); }
 
   bool is_known (void) const { return (typ != Unknown); }
 
   bool is_unknown (void) const { return (typ == Unknown); }
diff --git a/liboctave/array/PermMatrix.h b/liboctave/array/PermMatrix.h
--- a/liboctave/array/PermMatrix.h
+++ b/liboctave/array/PermMatrix.h
@@ -55,17 +55,17 @@ public:
   octave_idx_type columns (void) const { return dim2 (); }
 
   octave_idx_type perm_length (void) const
   { return Array<octave_idx_type>::numel (); }
   // FIXME: a dangerous ambiguity?
   octave_idx_type length (void) const
   { return perm_length (); }
 
-  OCTAVE_DEPRECATED ("use 'numel' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'numel' instead")
   octave_idx_type nelem (void) const { return numel (); }
 
   octave_idx_type numel (void) const { return dim1 () * dim2 (); }
 
   size_t byte_size (void) const
   { return Array<octave_idx_type>::byte_size (); }
 
   dim_vector dims (void) const { return dim_vector (dim1 (), dim2 ()); }
diff --git a/liboctave/array/Range.h b/liboctave/array/Range.h
--- a/liboctave/array/Range.h
+++ b/liboctave/array/Range.h
@@ -74,24 +74,24 @@ public:
         rng_limit = limit_internal ();
       }
   }
 
   double base (void) const { return rng_base; }
   double limit (void) const { return rng_limit; }
   double inc (void) const { return rng_inc; }
 
-  OCTAVE_DEPRECATED ("use 'numel' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'numel' instead")
   octave_idx_type nelem (void) const { return numel (); }
 
   octave_idx_type numel (void) const { return rng_numel; }
 
   bool isempty (void) const { return numel () == 0; }
 
-  OCTAVE_DEPRECATED ("use 'isempty' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'isempty' instead")
   bool is_empty (void) const
   { return isempty (); }
 
   bool all_elements_are_ints (void) const;
 
   Matrix matrix_value (void) const;
 
   double min (void) const;
@@ -104,17 +104,17 @@ public:
 
   Range sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const;
 
   Range sort (Array<octave_idx_type>& sidx, octave_idx_type dim = 0,
               sortmode mode = ASCENDING) const;
 
   sortmode issorted (sortmode mode = ASCENDING) const;
 
-  OCTAVE_DEPRECATED ("use 'issorted' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'issorted' instead")
   sortmode is_sorted (sortmode mode = ASCENDING) const
   { return issorted (mode); }
 
   // Support for single-index subscripting, without generating matrix cache.
 
   double checkelem (octave_idx_type i) const;
 
   double elem (octave_idx_type i) const;
diff --git a/liboctave/array/Sparse.h b/liboctave/array/Sparse.h
--- a/liboctave/array/Sparse.h
+++ b/liboctave/array/Sparse.h
@@ -228,33 +228,33 @@ public:
   Sparse<T>& operator = (const Sparse<T>& a);
 
   //! Amount of storage for nonzero elements.
   //! This may differ from the actual number of elements, see nnz().
   octave_idx_type nzmax (void) const { return rep->length (); }
 
   //! Amount of storage for nonzero elements.
   //! Synonymous with nzmax().
-  OCTAVE_DEPRECATED ("use 'nzmax' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'nzmax' instead")
   octave_idx_type capacity (void) const { return nzmax (); }
 
   //! Actual number of nonzero terms.
   octave_idx_type nnz (void) const { return rep->nnz (); }
 
   // Querying the number of elements (incl. zeros) may overflow the index type,
   // so don't do it unless you really need it.
   octave_idx_type numel (void) const
   {
     return dimensions.safe_numel ();
   }
 
-  OCTAVE_DEPRECATED ("use 'nzmax' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'nzmax' instead")
   octave_idx_type nelem (void) const { return nzmax (); }
 
-  OCTAVE_DEPRECATED ("use 'numel' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'numel' instead")
   octave_idx_type length (void) const { return numel (); }
 
   octave_idx_type dim1 (void) const { return dimensions(0); }
   octave_idx_type dim2 (void) const { return dimensions(1); }
 
   octave_idx_type rows (void) const { return dim1 (); }
   octave_idx_type cols (void) const { return dim2 (); }
   octave_idx_type columns (void) const { return dim2 (); }
@@ -464,23 +464,23 @@ public:
     rep->change_length (nz);
   }
 
   Sparse<T>& insert (const Sparse<T>& a, octave_idx_type r, octave_idx_type c);
   Sparse<T>& insert (const Sparse<T>& a, const Array<octave_idx_type>& idx);
 
   bool issquare (void) const { return (dim1 () == dim2 ()); }
 
-  OCTAVE_DEPRECATED ("use 'issquare' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'issquare' instead")
   bool is_square (void) const
   { return issquare (); }
 
   bool isempty (void) const { return (rows () < 1 && cols () < 1); }
 
-  OCTAVE_DEPRECATED ("use 'isempty' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'isempty' instead")
   bool is_empty (void) const
   { return isempty (); }
 
   Sparse<T> transpose (void) const;
 
   T * data (void) { make_unique (); return rep->d; }
   T& data (octave_idx_type i) { make_unique (); return rep->data (i); }
   T * xdata (void) { return rep->d; }
diff --git a/liboctave/array/boolNDArray.h b/liboctave/array/boolNDArray.h
--- a/liboctave/array/boolNDArray.h
+++ b/liboctave/array/boolNDArray.h
@@ -63,20 +63,20 @@ public:
 
   bool any_element_is_nan (void) const { return false; }
 
   // FIXME: this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
-  OCTAVE_DEPRECATED ("convert to and operate on numeric type instead")
+  OCTAVE_DEPRECATED (4.4, "convert to and operate on numeric type instead")
   NDArray sum (int dim = -1) const;
 
-  OCTAVE_DEPRECATED ("convert to and operate on numeric type instead")
+  OCTAVE_DEPRECATED (4.4, "convert to and operate on numeric type instead")
   NDArray cumsum (int dim = -1) const;
 
   boolNDArray concat (const boolNDArray& rb,
                       const Array<octave_idx_type>& ra_idx);
 
   boolNDArray& insert (const boolNDArray& a, octave_idx_type r,
                        octave_idx_type c);
   boolNDArray& insert (const boolNDArray& a,
diff --git a/liboctave/array/dMatrix.h b/liboctave/array/dMatrix.h
--- a/liboctave/array/dMatrix.h
+++ b/liboctave/array/dMatrix.h
@@ -93,17 +93,17 @@ public:
 
   explicit Matrix (const charMatrix& a);
 
   bool operator == (const Matrix& a) const;
   bool operator != (const Matrix& a) const;
 
   bool issymmetric (void) const;
 
-  OCTAVE_DEPRECATED ("use 'issymmetric' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'issymmetric' instead")
   bool is_symmetric (void) const
   { return issymmetric (); }
 
   // destructive insert/delete/reorder operations
 
   Matrix& insert (const Matrix& a, octave_idx_type r, octave_idx_type c);
   Matrix& insert (const RowVector& a, octave_idx_type r, octave_idx_type c);
   Matrix& insert (const ColumnVector& a, octave_idx_type r, octave_idx_type c);
diff --git a/liboctave/array/dSparse.h b/liboctave/array/dSparse.h
--- a/liboctave/array/dSparse.h
+++ b/liboctave/array/dSparse.h
@@ -97,17 +97,17 @@ public:
     return *this;
   }
 
   bool operator == (const SparseMatrix& a) const;
   bool operator != (const SparseMatrix& a) const;
 
   bool issymmetric (void) const;
 
-  OCTAVE_DEPRECATED ("use 'issymmetric' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'issymmetric' instead")
   bool is_symmetric (void) const
   { return issymmetric (); }
 
   SparseMatrix max (int dim = -1) const;
   SparseMatrix max (Array<octave_idx_type>& index, int dim = -1) const;
   SparseMatrix min (int dim = -1) const;
   SparseMatrix min (Array<octave_idx_type>& index, int dim = -1) const;
 
diff --git a/liboctave/array/dim-vector.h b/liboctave/array/dim-vector.h
--- a/liboctave/array/dim-vector.h
+++ b/liboctave/array/dim-vector.h
@@ -423,17 +423,17 @@ public:
       return dim_vector (1, numel ());
   }
 
   bool isvector (void) const
   {
     return (ndims () == 2 && (xelem (0) == 1 || xelem (1) == 1));
   }
 
-  OCTAVE_DEPRECATED ("use 'isvector' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'isvector' instead")
   bool is_vector (void) const
   { return isvector (); }
 
   bool is_nd_vector (void) const
   {
     int num_non_one = 0;
 
     for (int i = 0; i < ndims (); i++)
diff --git a/liboctave/array/fCMatrix.h b/liboctave/array/fCMatrix.h
--- a/liboctave/array/fCMatrix.h
+++ b/liboctave/array/fCMatrix.h
@@ -111,17 +111,17 @@ public:
 
   FloatComplexMatrix (const FloatMatrix& re, const FloatMatrix& im);
 
   bool operator == (const FloatComplexMatrix& a) const;
   bool operator != (const FloatComplexMatrix& a) const;
 
   bool ishermitian (void) const;
 
-  OCTAVE_DEPRECATED ("use 'ishermitian' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'ishermitian' instead")
   bool is_hermitian (void) const
   { return ishermitian (); }
 
   // destructive insert/delete/reorder operations
 
   FloatComplexMatrix& insert (const FloatMatrix& a,
                               octave_idx_type r, octave_idx_type c);
   FloatComplexMatrix& insert (const FloatRowVector& a,
diff --git a/liboctave/array/fMatrix.h b/liboctave/array/fMatrix.h
--- a/liboctave/array/fMatrix.h
+++ b/liboctave/array/fMatrix.h
@@ -93,17 +93,17 @@ public:
 
   explicit FloatMatrix (const charMatrix& a);
 
   bool operator == (const FloatMatrix& a) const;
   bool operator != (const FloatMatrix& a) const;
 
   bool issymmetric (void) const;
 
-  OCTAVE_DEPRECATED ("use 'issymmetric' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'issymmetric' instead")
   bool is_symmetric (void) const
   { return issymmetric (); }
 
   // destructive insert/delete/reorder operations
 
   FloatMatrix& insert (const FloatMatrix& a,
                        octave_idx_type r, octave_idx_type c);
   FloatMatrix& insert (const FloatRowVector& a,
diff --git a/liboctave/array/idx-vector.h b/liboctave/array/idx-vector.h
--- a/liboctave/array/idx-vector.h
+++ b/liboctave/array/idx-vector.h
@@ -1018,17 +1018,17 @@ public:
   Array<octave_idx_type> as_array (void) const;
 
   // Raw pointer to index array.  This is non-const because it may be
   // necessary to mutate the index.
   const octave_idx_type * raw (void);
 
   bool isvector (void) const;
 
-  OCTAVE_DEPRECATED ("use 'isvector' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'isvector' instead")
   bool is_vector (void) const
   { return isvector (); }
 
   // FIXME: these are here for compatibility.  They should be removed
   // when no longer in use.
 
   octave_idx_type elem (octave_idx_type n) const
   { return (*this) (n); }
diff --git a/liboctave/numeric/lo-mappers.h b/liboctave/numeric/lo-mappers.h
--- a/liboctave/numeric/lo-mappers.h
+++ b/liboctave/numeric/lo-mappers.h
@@ -237,23 +237,23 @@ namespace octave
 
     template <typename T>
     bool
     isfinite (const std::complex<T>& x)
     {
       return (isfinite (std::real (x)) && isfinite (std::imag (x)));
     }
 
-    OCTAVE_DEPRECATED ("use 'octave::math::isfinite' instead")
+    OCTAVE_DEPRECATED (4.4, "use 'octave::math::isfinite' instead")
     inline bool finite (double x) { return octave::math::isfinite (x); }
-    OCTAVE_DEPRECATED ("use 'octave::math::isfinite' instead")
+    OCTAVE_DEPRECATED (4.4, "use 'octave::math::isfinite' instead")
     inline bool finite (float x) { return octave::math::isfinite (x); }
 
     template <typename T>
-    OCTAVE_DEPRECATED ("use 'octave::math::isfinite' instead")
+    OCTAVE_DEPRECATED (4.4, "use 'octave::math::isfinite' instead")
     bool
     finite (const std::complex<T>& x)
     {
       return octave::math::isfinite (x);
     }
 
     extern OCTAVE_API bool isinf (double x);
     extern OCTAVE_API bool isinf (float x);
@@ -507,447 +507,447 @@ namespace octave
 
     extern OCTAVE_API Complex rc_sqrt (double);
     extern OCTAVE_API FloatComplex rc_sqrt (float);
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::math::is_NA' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::is_NA' instead")
 inline bool octave_is_NA (double x) { return octave::math::is_NA (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::is_NA' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::is_NA' instead")
 inline bool octave_is_NA (float x) { return octave::math::is_NA (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::is_NA' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::is_NA' instead")
 inline bool octave_is_NA (const Complex& x) { return octave::math::is_NA (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::is_NA' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::is_NA' instead")
 inline bool octave_is_NA (const FloatComplex& x)
 {
   return octave::math::is_NA (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::acos' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::acos' instead")
 inline Complex acos (const Complex& x) { return octave::math::acos (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::acos' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::acos' instead")
 inline FloatComplex acos (const FloatComplex& x)
 {
   return octave::math::acos (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::asin' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::asin' instead")
 inline Complex asin (const Complex& x) { return octave::math::asin (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::asin' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::asin' instead")
 inline FloatComplex asin (const FloatComplex& x)
 {
   return octave::math::asin (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::atan' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::atan' instead")
 inline Complex atan (const Complex& x) { return octave::math::atan (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::atan' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::atan' instead")
 inline FloatComplex atan (const FloatComplex& x)
 {
   return octave::math::atan (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::arg' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::arg' instead")
 inline double arg (double x) { return octave::math::arg (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::arg' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::arg' instead")
 inline float arg (float x) { return octave::math::arg (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::conj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::conj' instead")
 inline double conj (double x) { return x; }
-OCTAVE_DEPRECATED ("use 'octave::math::conj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::conj' instead")
 inline float conj (float x) { return x; }
 
-OCTAVE_DEPRECATED ("use 'octave::math::imag' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::imag' instead")
 inline double imag (double x) { return octave::math::imag (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::imag' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::imag' instead")
 inline float imag (float x) { return octave::math::imag (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::real' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::real' instead")
 inline double real (double x) { return octave::math::real (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::real' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::real' instead")
 inline float real (float x) { return octave::math::real (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::log2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::log2' instead")
 inline double xlog2 (double x) { return octave::math::log2 (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::log2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::log2' instead")
 inline float xlog2 (float x) { return octave::math::log2 (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::log2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::log2' instead")
 inline Complex xlog2 (const Complex& x) { return octave::math::log2 (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::log2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::log2' instead")
 inline FloatComplex xlog2 (const FloatComplex& x)
 {
   return octave::math::log2 (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::log2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::log2' instead")
 inline double xlog2 (double x, int& exp)
 {
   return octave::math::log2 (x, exp);
 }
-OCTAVE_DEPRECATED ("use 'octave::math::log2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::log2' instead")
 inline float xlog2 (float x, int& exp) { return octave::math::log2 (x, exp); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::log2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::log2' instead")
 inline Complex xlog2 (const Complex& x, int& exp)
 {
   return octave::math::log2 (x, exp);
 }
-OCTAVE_DEPRECATED ("use 'octave::math::log2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::log2' instead")
 inline FloatComplex xlog2 (const FloatComplex& x, int& exp)
 {
   return octave::math::log2 (x, exp);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::exp2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::exp2' instead")
 inline double xexp2 (double x) { return octave::math::exp2 (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::exp2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::exp2' instead")
 inline float xexp2 (float x) { return octave::math::exp2 (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::ceil' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::ceil' instead")
 inline double xceil (double x) { return octave::math::ceil (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::ceil' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::ceil' instead")
 inline float xceil (float x) { return octave::math::ceil (x); }
 
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::ceil' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::ceil' instead")
 std::complex<T>
 ceil (const std::complex<T>& x)
 {
   return octave::math::ceil (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::copysign' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::copysign' instead")
 inline double xcopysign (double x, double y)
 {
   return octave::math::copysign (x, y);
 }
-OCTAVE_DEPRECATED ("use 'octave::math::copysign' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::copysign' instead")
 inline float xcopysign (float x, float y)
 {
   return octave::math::copysign (x, y);
 }
 
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::signbit' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::signbit' instead")
 T
 xsignbit (T x)
 {
   return octave::math::signbit (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::negative_sign' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::negative_sign' instead")
 inline bool xnegative_sign (double x)
 {
   return octave::math::negative_sign (x);
 }
-OCTAVE_DEPRECATED ("use 'octave::math::negative_sign' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::negative_sign' instead")
 inline bool xnegative_sign (float x)
 {
   return octave::math::negative_sign (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::positive_sign' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::positive_sign' instead")
 inline bool xpositive_sign (double x)
 {
   return octave::math::positive_sign (x);
 }
-OCTAVE_DEPRECATED ("use 'octave::math::positive_sign' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::positive_sign' instead")
 inline bool xpositive_sign (float x)
 {
   return octave::math::positive_sign (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::signum' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::signum' instead")
 inline double signum (double x) { return octave::math::signum (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::signum' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::signum' instead")
 inline float signum (float x) { return octave::math::signum (x); }
 
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::signum' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::signum' instead")
 std::complex<T>
 signum (const std::complex<T>& x)
 {
   return octave::math::signum (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::trunc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::trunc' instead")
 inline double xtrunc (double x) { return octave::math::trunc (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::trunc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::trunc' instead")
 inline float xtrunc (float x) { return octave::math::trunc (x); }
 
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::trunc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::trunc' instead")
 std::complex<T>
 xtrunc (const std::complex<T>& x)
 {
   return octave::math::trunc (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::fix' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::fix' instead")
 inline double fix (double x) { return octave::math::fix (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::fix' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::fix' instead")
 inline float fix (float x) { return octave::math::fix (x); }
 
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::fix' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::fix' instead")
 std::complex<T>
 fix (const std::complex<T>& x)
 {
   return octave::math::fix (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::floor' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::floor' instead")
 inline double xfloor (double x) { return octave::math::floor (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::floor' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::floor' instead")
 inline float xfloor (float x) { return octave::math::floor (x); }
 
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::floor' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::floor' instead")
 std::complex<T>
 floor (const std::complex<T>& x)
 {
   return octave::math::floor (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::round' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::round' instead")
 inline double xround (double x) { return octave::math::round (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::round' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::round' instead")
 inline float xround (float x) { return octave::math::round (x); }
 
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::round' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::round' instead")
 std::complex<T>
 xround (const std::complex<T>& x)
 {
   return octave::math::round (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::roundb' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::roundb' instead")
 inline double xroundb (double x) { return octave::math::roundb (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::roundb' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::roundb' instead")
 inline float xroundb (float x) { return octave::math::roundb (x); }
 
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::roundb' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::roundb' instead")
 std::complex<T>
 xroundb (const std::complex<T>& x)
 {
   return octave::math::roundb (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::isnan' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::isnan' instead")
 inline bool xisnan (bool x) { return octave::math::isnan (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::isnan' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::isnan' instead")
 inline bool xisnan (char x) { return octave::math::isnan (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::isnan' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::isnan' instead")
 inline bool xisnan (double x) { return octave::math::isnan (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::isnan' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::isnan' instead")
 inline bool xisnan (float x) { return octave::math::isnan (x); }
 
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::isnan' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::isnan' instead")
 bool
 xisnan (const std::complex<T>& x)
 {
   return octave::math::isnan (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::isfinite' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::math::isfinite' instead")
 inline bool xfinite (double x) { return octave::math::isfinite (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::isfinite' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::math::isfinite' instead")
 inline bool xfinite (float x) { return octave::math::isfinite (x); }
 
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::isfinite' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::math::isfinite' instead")
 bool
 xfinite (const std::complex<T>& x)
 {
   return octave::math::isfinite (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::isinf' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::isinf' instead")
 inline bool xisinf (double x) { return octave::math::isinf (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::isinf' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::isinf' instead")
 inline bool xisinf (float x) { return octave::math::isinf (x); }
 
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::isinf' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::isinf' instead")
 bool
 xisinf (const std::complex<T>& x)
 {
   return octave::math::isinf (x);
 }
 
 // Some useful tests, that are commonly repeated.
 // Test for a finite integer.
 
-OCTAVE_DEPRECATED ("use 'octave::math::isinteger' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::isinteger' instead")
 inline bool
 xisinteger (double x)
 {
   return octave::math::isinteger (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::isinteger' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::isinteger' instead")
 inline bool
 xisinteger (float x)
 {
   return octave::math::isinteger (x);
 }
 
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::x_nint' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::x_nint' instead")
 T
 X_NINT (T x)
 {
   return octave::math::x_nint (x);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::x_nint (x)' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::x_nint (x)' instead")
 inline double D_NINT (double x) { return octave::math::x_nint (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::x_nint (x)' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::x_nint (x)' instead")
 inline float F_NINT (float x) { return octave::math::x_nint (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::nint_big' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::nint_big' instead")
 inline octave_idx_type NINTbig (double x) { return octave::math::nint_big (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::nint_big' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::nint_big' instead")
 inline octave_idx_type NINTbig (float x) { return octave::math::nint_big (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::nint' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::nint' instead")
 inline int NINT (double x) { return octave::math::nint (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::nint' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::nint' instead")
 inline int NINT (float x) { return octave::math::nint (x); }
 
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::mod' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::mod' instead")
 T
 xmod (T x, T y)
 {
   return octave::math::mod (x, y);
 }
 
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::rem' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rem' instead")
 T
 xrem (T x, T y)
 {
   return octave::math::rem (x, y);
 }
 
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::min' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::min' instead")
 T
 xmin (T x, T y)
 {
   return octave::math::min (x, y);
 }
 
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::max' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::max' instead")
 T
 xmax (T x, T y)
 {
   return octave::math::max (x, y);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::min' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::min' instead")
 inline double
 xmin (double x, double y)
 {
   return octave::math::min (x, y);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::max' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::max' instead")
 inline double
 xmax (double x, double y)
 {
   return octave::math::max (x, y);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::min' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::min' instead")
 inline float
 xmin (float x, float y)
 {
   return octave::math::min (x, y);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::max' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::max' instead")
 inline float
 xmax (float x, float y)
 {
   return octave::math::max (x, y);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::min' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::min' instead")
 inline Complex
 xmin (const Complex& x, const Complex& y)
 {
   return octave::math::min (x, y);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::max' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::max' instead")
 inline Complex
 xmax (const Complex& x, const Complex& y)
 {
   return octave::math::max (x, y);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::min' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::min' instead")
 inline OCTAVE_API FloatComplex
 xmin (const FloatComplex& x, const FloatComplex& y)
 {
   return octave::math::min (x, y);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::max' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::max' instead")
 inline FloatComplex
 xmax (const FloatComplex& x, const FloatComplex& y)
 {
   return octave::math::max (x, y);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::math::rc_acos' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_acos' instead")
 inline Complex rc_acos (double x) { return octave::math::rc_acos (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::rc_acos' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_acos' instead")
 inline FloatComplex rc_acos (float x) { return octave::math::rc_acos (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::rc_acosh' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_acosh' instead")
 inline Complex rc_acosh (double x) { return octave::math::rc_acosh (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::rc_acosh' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_acosh' instead")
 inline FloatComplex rc_acosh (float x) { return octave::math::rc_acosh (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::rc_asin' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_asin' instead")
 inline Complex rc_asin (double x) { return octave::math::rc_asin (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::rc_asin' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_asin' instead")
 inline FloatComplex rc_asin (float x) { return octave::math::rc_asin (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::rc_atanh' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_atanh' instead")
 inline Complex rc_atanh (double x) { return octave::math::rc_atanh (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::rc_atanh' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_atanh' instead")
 inline FloatComplex rc_atanh (float x) { return octave::math::rc_atanh (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::rc_log' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log' instead")
 inline Complex rc_log (double x) { return octave::math::rc_log (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::rc_log' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log' instead")
 inline FloatComplex rc_log (float x) { return octave::math::rc_log (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::rc_log2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log2' instead")
 inline Complex rc_log2 (double x) { return octave::math::rc_log2 (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::rc_log2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log2' instead")
 inline FloatComplex rc_log2 (float x) { return octave::math::rc_log2 (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::rc_log10' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log10' instead")
 inline Complex rc_log10 (double x) { return octave::math::rc_log10 (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::rc_log10' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log10' instead")
 inline FloatComplex rc_log10 (float x) { return octave::math::rc_log10 (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::rc_sqrt' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_sqrt' instead")
 inline Complex rc_sqrt (double x) { return octave::math::rc_sqrt (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::rc_sqrt' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_sqrt' instead")
 inline FloatComplex rc_sqrt (float x) { return octave::math::rc_sqrt (x); }
 
 #endif
 
 #endif
diff --git a/liboctave/numeric/lo-specfun.h b/liboctave/numeric/lo-specfun.h
--- a/liboctave/numeric/lo-specfun.h
+++ b/liboctave/numeric/lo-specfun.h
@@ -452,486 +452,486 @@ namespace octave
 
     extern OCTAVE_API double psi (octave_idx_type n, double z);
     extern OCTAVE_API float psi (octave_idx_type n, float z);
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::math::acosh' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::acosh' instead")
 inline double xacosh (double x) { return octave::math::acosh (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::acosh' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::acosh' instead")
 inline float xacosh (float x) { return octave::math::acosh (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::acosh' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::acosh' instead")
 inline Complex xacosh (const Complex& x) { return octave::math::acosh (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::acosh' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::acosh' instead")
 inline FloatComplex xacosh (const FloatComplex& x) { return octave::math::acosh (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::asinh' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::asinh' instead")
 inline double xasinh (double x) { return octave::math::asinh (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::asinh' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::asinh' instead")
 inline float xasinh (float x) { return octave::math::asinh (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::asinh' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::asinh' instead")
 inline Complex xasinh (const Complex& x) { return octave::math::asinh (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::asinh' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::asinh' instead")
 inline FloatComplex xasinh (const FloatComplex& x) { return octave::math::asinh (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::atanh' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::atanh' instead")
 inline double xatanh (double x) { return octave::math::atanh (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::atanh' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::atanh' instead")
 inline float xatanh (float x) { return octave::math::atanh (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::atanh' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::atanh' instead")
 inline Complex xatanh (const Complex& x) { return octave::math::atanh (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::atanh' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::atanh' instead")
 inline FloatComplex xatanh (const FloatComplex& x) { return octave::math::atanh (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::erf' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erf' instead")
 inline double xerf (double x) { return octave::math::erf (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::erf' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erf' instead")
 inline float xerf (float x) { return octave::math::erf (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::erf' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erf' instead")
 inline Complex xerf (const Complex& x) { return octave::math::erf (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::erf' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erf' instead")
 inline FloatComplex xerf (const FloatComplex& x) { return octave::math::erf (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::erfc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfc' instead")
 inline double xerfc (double x) { return octave::math::erfc (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::erfc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfc' instead")
 inline float xerfc (float x) { return octave::math::erfc (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::erfc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfc' instead")
 inline Complex xerfc (const Complex& x) { return octave::math::erfc (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::erfc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfc' instead")
 inline FloatComplex xerfc (const FloatComplex& x) { return octave::math::erfc (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::expm1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::expm1' instead")
 inline double xexpm1 (double x) { return octave::math::expm1 (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::expm1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::expm1' instead")
 inline Complex xexpm1 (const Complex& x) { return octave::math::expm1 (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::expm1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::expm1' instead")
 inline float xexpm1 (float x) { return octave::math::expm1 (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::expm1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::expm1' instead")
 inline FloatComplex xexpm1 (const FloatComplex& x) { return octave::math::expm1 (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::log1p' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::log1p' instead")
 inline double xlog1p (double x) { return octave::math::log1p (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::log1p' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::log1p' instead")
 inline Complex xlog1p (const Complex& x) { return octave::math::log1p (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::log1p' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::log1p' instead")
 inline float xlog1p (float x) { return octave::math::log1p (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::log1p' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::log1p' instead")
 inline FloatComplex xlog1p (const FloatComplex& x) { return octave::math::log1p (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::cbrt' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::cbrt' instead")
 inline double xcbrt (double x) { return octave::math::cbrt (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::cbrt' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::cbrt' instead")
 inline float xcbrt (float x) { return octave::math::cbrt (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::gamma' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::gamma' instead")
 inline double xgamma (double x) { return octave::math::gamma (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::lgamma' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::lgamma' instead")
 inline double xlgamma (double x) { return octave::math::lgamma (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::rc_lgamma' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_lgamma' instead")
 inline Complex rc_lgamma (double x) { return octave::math::rc_lgamma (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::gamma' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::gamma' instead")
 inline float xgamma (float x) { return octave::math::gamma (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::lgamma' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::lgamma' instead")
 inline float xlgamma (float x) { return octave::math::lgamma (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::rc_lgamma' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_lgamma' instead")
 inline FloatComplex rc_lgamma (float x) { return octave::math::rc_lgamma (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::besselj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
 inline Complex besselj (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besselj (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED ("use 'octave::math::bessely' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
 inline Complex bessely (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr) { return octave::math::bessely (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED ("use 'octave::math::besseli' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
 inline Complex besseli (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besseli (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED ("use 'octave::math::besselk' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
 inline Complex besselk (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besselk (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED ("use 'octave::math::besselh1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
 inline Complex besselh1 (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besselh1 (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED ("use 'octave::math::besselh2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
 inline Complex besselh2 (double alpha, const Complex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besselh2 (alpha, x, scaled, ierr); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::besselj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
 extern OCTAVE_API ComplexMatrix besselj (double alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::bessely' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
 extern OCTAVE_API ComplexMatrix bessely (double alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besseli' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
 extern OCTAVE_API ComplexMatrix besseli (double alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselk' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
 extern OCTAVE_API ComplexMatrix besselk (double alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
 extern OCTAVE_API ComplexMatrix besselh1 (double alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
 extern OCTAVE_API ComplexMatrix besselh2 (double alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
 
-OCTAVE_DEPRECATED ("use 'octave::math::besselj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
 extern OCTAVE_API ComplexMatrix besselj (const Matrix& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::bessely' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
 extern OCTAVE_API ComplexMatrix bessely (const Matrix& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besseli' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
 extern OCTAVE_API ComplexMatrix besseli (const Matrix& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselk' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
 extern OCTAVE_API ComplexMatrix besselk (const Matrix& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
 extern OCTAVE_API ComplexMatrix besselh1 (const Matrix& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
 extern OCTAVE_API ComplexMatrix besselh2 (const Matrix& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
 
-OCTAVE_DEPRECATED ("use 'octave::math::besselj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
 extern OCTAVE_API ComplexMatrix besselj (const Matrix& alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::bessely' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
 extern OCTAVE_API ComplexMatrix bessely (const Matrix& alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besseli' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
 extern OCTAVE_API ComplexMatrix besseli (const Matrix& alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselk' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
 extern OCTAVE_API ComplexMatrix besselk (const Matrix& alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
 extern OCTAVE_API ComplexMatrix besselh1 (const Matrix& alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
 extern OCTAVE_API ComplexMatrix besselh2 (const Matrix& alpha, const ComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
 
-OCTAVE_DEPRECATED ("use 'octave::math::besselj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
 extern OCTAVE_API ComplexNDArray besselj (double alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::bessely' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
 extern OCTAVE_API ComplexNDArray bessely (double alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besseli' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
 extern OCTAVE_API ComplexNDArray besseli (double alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselk' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
 extern OCTAVE_API ComplexNDArray besselk (double alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
 extern OCTAVE_API ComplexNDArray besselh1 (double alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
 extern OCTAVE_API ComplexNDArray besselh2 (double alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
 
-OCTAVE_DEPRECATED ("use 'octave::math::besselj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
 extern OCTAVE_API ComplexNDArray besselj (const NDArray& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::bessely' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
 extern OCTAVE_API ComplexNDArray bessely (const NDArray& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besseli' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
 extern OCTAVE_API ComplexNDArray besseli (const NDArray& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselk' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
 extern OCTAVE_API ComplexNDArray besselk (const NDArray& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
 extern OCTAVE_API ComplexNDArray besselh1 (const NDArray& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
 extern OCTAVE_API ComplexNDArray besselh2 (const NDArray& alpha, const Complex& x, bool scaled, Array<octave_idx_type>& ierr);
 
-OCTAVE_DEPRECATED ("use 'octave::math::besselj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
 extern OCTAVE_API ComplexNDArray besselj (const NDArray& alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::bessely' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
 extern OCTAVE_API ComplexNDArray bessely (const NDArray& alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besseli' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
 extern OCTAVE_API ComplexNDArray besseli (const NDArray& alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselk' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
 extern OCTAVE_API ComplexNDArray besselk (const NDArray& alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
 extern OCTAVE_API ComplexNDArray besselh1 (const NDArray& alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
 extern OCTAVE_API ComplexNDArray besselh2 (const NDArray& alpha, const ComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
 
-OCTAVE_DEPRECATED ("use 'octave::math::besselj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
 extern OCTAVE_API ComplexMatrix besselj (const RowVector& alpha, const ComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::bessely' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
 extern OCTAVE_API ComplexMatrix bessely (const RowVector& alpha, const ComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besseli' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
 extern OCTAVE_API ComplexMatrix besseli (const RowVector& alpha, const ComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselk' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
 extern OCTAVE_API ComplexMatrix besselk (const RowVector& alpha, const ComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
 extern OCTAVE_API ComplexMatrix besselh1 (const RowVector& alpha, const ComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
 extern OCTAVE_API ComplexMatrix besselh2 (const RowVector& alpha, const ComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
 
-OCTAVE_DEPRECATED ("use 'octave::math::besselj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
 inline FloatComplex besselj (float alpha, const FloatComplex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besselj (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED ("use 'octavh::bessely' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octavh::bessely' instead")
 inline FloatComplex bessely (float alpha, const FloatComplex& x, bool scaled, octave_idx_type& ierr) { return octave::math::bessely (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED ("use 'octavh::besseli' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octavh::besseli' instead")
 inline FloatComplex besseli (float alpha, const FloatComplex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besseli (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED ("use 'octavh::besselk' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octavh::besselk' instead")
 inline FloatComplex besselk (float alpha, const FloatComplex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besselk (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED ("use 'octavh::besselh1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octavh::besselh1' instead")
 inline FloatComplex besselh1 (float alpha, const FloatComplex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besselh1 (alpha, x, scaled, ierr); }
-OCTAVE_DEPRECATED ("use 'octavh::besselh2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octavh::besselh2' instead")
 inline FloatComplex besselh2 (float alpha, const FloatComplex& x, bool scaled, octave_idx_type& ierr) { return octave::math::besselh2 (alpha, x, scaled, ierr); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::besselj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
 extern OCTAVE_API FloatComplexMatrix besselj (float alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::bessely' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
 extern OCTAVE_API FloatComplexMatrix bessely (float alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besseli' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
 extern OCTAVE_API FloatComplexMatrix besseli (float alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselk' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
 extern OCTAVE_API FloatComplexMatrix besselk (float alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
 extern OCTAVE_API FloatComplexMatrix besselh1 (float alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
 extern OCTAVE_API FloatComplexMatrix besselh2 (float alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
 
-OCTAVE_DEPRECATED ("use 'octave::math::besselj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
 extern OCTAVE_API FloatComplexMatrix besselj (const FloatMatrix& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::bessely' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
 extern OCTAVE_API FloatComplexMatrix bessely (const FloatMatrix& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besseli' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
 extern OCTAVE_API FloatComplexMatrix besseli (const FloatMatrix& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselk' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
 extern OCTAVE_API FloatComplexMatrix besselk (const FloatMatrix& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
 extern OCTAVE_API FloatComplexMatrix besselh1 (const FloatMatrix& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
 extern OCTAVE_API FloatComplexMatrix besselh2 (const FloatMatrix& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
 
-OCTAVE_DEPRECATED ("use 'octave::math::besselj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
 extern OCTAVE_API FloatComplexMatrix besselj (const FloatMatrix& alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::bessely' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
 extern OCTAVE_API FloatComplexMatrix bessely (const FloatMatrix& alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besseli' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
 extern OCTAVE_API FloatComplexMatrix besseli (const FloatMatrix& alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselk' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
 extern OCTAVE_API FloatComplexMatrix besselk (const FloatMatrix& alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
 extern OCTAVE_API FloatComplexMatrix besselh1 (const FloatMatrix& alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
 extern OCTAVE_API FloatComplexMatrix besselh2 (const FloatMatrix& alpha, const FloatComplexMatrix& x, bool scaled, Array<octave_idx_type>& ierr);
 
-OCTAVE_DEPRECATED ("use 'octave::math::besselj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
 extern OCTAVE_API FloatComplexNDArray besselj (float alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::bessely' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
 extern OCTAVE_API FloatComplexNDArray bessely (float alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besseli' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
 extern OCTAVE_API FloatComplexNDArray besseli (float alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselk' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
 extern OCTAVE_API FloatComplexNDArray besselk (float alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
 extern OCTAVE_API FloatComplexNDArray besselh1 (float alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
 extern OCTAVE_API FloatComplexNDArray besselh2 (float alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
 
-OCTAVE_DEPRECATED ("use 'octave::math::besselj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
 extern OCTAVE_API FloatComplexNDArray besselj (const FloatNDArray& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::bessely' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
 extern OCTAVE_API FloatComplexNDArray bessely (const FloatNDArray& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besseli' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
 extern OCTAVE_API FloatComplexNDArray besseli (const FloatNDArray& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselk' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
 extern OCTAVE_API FloatComplexNDArray besselk (const FloatNDArray& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
 extern OCTAVE_API FloatComplexNDArray besselh1 (const FloatNDArray& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
 extern OCTAVE_API FloatComplexNDArray besselh2 (const FloatNDArray& alpha, const FloatComplex& x, bool scaled, Array<octave_idx_type>& ierr);
 
-OCTAVE_DEPRECATED ("use 'octave::math::besselj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
 extern OCTAVE_API FloatComplexNDArray besselj (const FloatNDArray& alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::bessely' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
 extern OCTAVE_API FloatComplexNDArray bessely (const FloatNDArray& alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besseli' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
 extern OCTAVE_API FloatComplexNDArray besseli (const FloatNDArray& alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselk' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
 extern OCTAVE_API FloatComplexNDArray besselk (const FloatNDArray& alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
 extern OCTAVE_API FloatComplexNDArray besselh1 (const FloatNDArray& alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
 extern OCTAVE_API FloatComplexNDArray besselh2 (const FloatNDArray& alpha, const FloatComplexNDArray& x, bool scaled, Array<octave_idx_type>& ierr);
 
-OCTAVE_DEPRECATED ("use 'octave::math::besselj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselj' instead")
 extern OCTAVE_API FloatComplexMatrix besselj (const FloatRowVector& alpha, const FloatComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::bessely' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::bessely' instead")
 extern OCTAVE_API FloatComplexMatrix bessely (const FloatRowVector& alpha, const FloatComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besseli' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besseli' instead")
 extern OCTAVE_API FloatComplexMatrix besseli (const FloatRowVector& alpha, const FloatComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselk' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselk' instead")
 extern OCTAVE_API FloatComplexMatrix besselk (const FloatRowVector& alpha, const FloatComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh1' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh1' instead")
 extern OCTAVE_API FloatComplexMatrix besselh1 (const FloatRowVector& alpha, const FloatComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::besselh2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::besselh2' instead")
 extern OCTAVE_API FloatComplexMatrix besselh2 (const FloatRowVector& alpha, const FloatComplexColumnVector& x, bool scaled, Array<octave_idx_type>& ierr);
 
-OCTAVE_DEPRECATED ("use 'octave::math::airy' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::airy' instead")
 inline Complex airy (const Complex& z, bool deriv, bool scaled, octave_idx_type& ierr) { return octave::math::airy (z, deriv, scaled, ierr); }
-OCTAVE_DEPRECATED ("use 'octave::math::biry' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::biry' instead")
 inline Complex biry (const Complex& z, bool deriv, bool scaled, octave_idx_type& ierr) { return octave::math::biry (z, deriv, scaled, ierr); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::airy' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::airy' instead")
 extern OCTAVE_API ComplexMatrix airy (const ComplexMatrix& z, bool deriv, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::biry' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::biry' instead")
 extern OCTAVE_API ComplexMatrix biry (const ComplexMatrix& z, bool deriv, bool scaled, Array<octave_idx_type>& ierr);
 
-OCTAVE_DEPRECATED ("use 'octave::math::airy' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::airy' instead")
 extern OCTAVE_API ComplexNDArray airy (const ComplexNDArray& z, bool deriv, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::biry' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::biry' instead")
 extern OCTAVE_API ComplexNDArray biry (const ComplexNDArray& z, bool deriv, bool scaled, Array<octave_idx_type>& ierr);
 
-OCTAVE_DEPRECATED ("use 'octave::math::airy' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::airy' instead")
 inline FloatComplex airy (const FloatComplex& z, bool deriv, bool scaled, octave_idx_type& ierr) { return octave::math::airy (z, deriv, scaled, ierr); }
-OCTAVE_DEPRECATED ("use 'octave::math::biry' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::biry' instead")
 inline FloatComplex biry (const FloatComplex& z, bool deriv, bool scaled, octave_idx_type& ierr) { return octave::math::biry (z, deriv, scaled, ierr); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::airy' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::airy' instead")
 extern OCTAVE_API FloatComplexMatrix airy (const FloatComplexMatrix& z, bool deriv, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::biry' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::biry' instead")
 extern OCTAVE_API FloatComplexMatrix biry (const FloatComplexMatrix& z, bool deriv, bool scaled, Array<octave_idx_type>& ierr);
 
-OCTAVE_DEPRECATED ("use 'octave::math::airy' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::airy' instead")
 extern OCTAVE_API FloatComplexNDArray airy (const FloatComplexNDArray& z, bool deriv, bool scaled, Array<octave_idx_type>& ierr);
-OCTAVE_DEPRECATED ("use 'octave::math::biry' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::biry' instead")
 extern OCTAVE_API FloatComplexNDArray biry (const FloatComplexNDArray& z, bool deriv, bool scaled, Array<octave_idx_type>& ierr);
 
-OCTAVE_DEPRECATED ("use 'octave::math::betainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betainc' instead")
 inline double betainc (double x, double a, double b) { return octave::math::betainc (x, a, b); }
-OCTAVE_DEPRECATED ("use 'octave::math::betainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betainc' instead")
 extern OCTAVE_API Array<double> betainc (double x, double a, const Array<double>& b);
-OCTAVE_DEPRECATED ("use 'octave::math::betainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betainc' instead")
 extern OCTAVE_API Array<double> betainc (double x, const Array<double>& a, double b);
-OCTAVE_DEPRECATED ("use 'octave::math::betainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betainc' instead")
 extern OCTAVE_API Array<double> betainc (double x, const Array<double>& a, const Array<double>& b);
 
-OCTAVE_DEPRECATED ("use 'octave::math::betainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betainc' instead")
 inline float betainc (float x, float a, float b) { return octave::math::betainc (x, a, b); }
-OCTAVE_DEPRECATED ("use 'octave::math::betainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betainc' instead")
 extern OCTAVE_API Array<double> betainc (const Array<double>& x, double a, const Array<double>& b);
-OCTAVE_DEPRECATED ("use 'octave::math::betainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betainc' instead")
 extern OCTAVE_API Array<double> betainc (const Array<double>& x, const Array<double>& a, double b);
-OCTAVE_DEPRECATED ("use 'octave::math::betainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betainc' instead")
 extern OCTAVE_API Array<double> betainc (const Array<double>& x, const Array<double>& a, const Array<double>& b);
 
-OCTAVE_DEPRECATED ("use 'octave::math::betainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betainc' instead")
 extern OCTAVE_API float betainc (float x, float a, float b);
-OCTAVE_DEPRECATED ("use 'octave::math::betainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betainc' instead")
 extern OCTAVE_API Array<float> betainc (float x, float a, const Array<float>& b);
-OCTAVE_DEPRECATED ("use 'octave::math::betainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betainc' instead")
 extern OCTAVE_API Array<float> betainc (float x, const Array<float>& a, float b);
-OCTAVE_DEPRECATED ("use 'octave::math::betainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betainc' instead")
 extern OCTAVE_API Array<float> betainc (float x, const Array<float>& a, const Array<float>& b);
 
-OCTAVE_DEPRECATED ("use 'octave::math::betainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betainc' instead")
 extern OCTAVE_API Array<float> betainc (const Array<float>& x, float a, float b);
-OCTAVE_DEPRECATED ("use 'octave::math::betainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betainc' instead")
 extern OCTAVE_API Array<float> betainc (const Array<float>& x, float a, const Array<float>& b);
-OCTAVE_DEPRECATED ("use 'octave::math::betainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betainc' instead")
 extern OCTAVE_API Array<float> betainc (const Array<float>& x, const Array<float>& a, float b);
-OCTAVE_DEPRECATED ("use 'octave::math::betainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betainc' instead")
 extern OCTAVE_API Array<float> betainc (const Array<float>& x, const Array<float>& a, const Array<float>& b);
 
-OCTAVE_DEPRECATED ("use 'octave::math::gammainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::gammainc' instead")
 inline double gammainc (double x, double a, bool& err) { return octave::math::gammainc (x, a, err); }
-OCTAVE_DEPRECATED ("use 'octave::math::gammainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::gammainc' instead")
 inline double gammainc (double x, double a) { return octave::math::gammainc (x, a); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::gammainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::gammainc' instead")
 extern OCTAVE_API Matrix gammainc (double x, const Matrix& a);
-OCTAVE_DEPRECATED ("use 'octave::math::gammainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::gammainc' instead")
 extern OCTAVE_API Matrix gammainc (const Matrix& x, double a);
-OCTAVE_DEPRECATED ("use 'octave::math::gammainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::gammainc' instead")
 extern OCTAVE_API Matrix gammainc (const Matrix& x, const Matrix& a);
 
-OCTAVE_DEPRECATED ("use 'octave::math::gammainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::gammainc' instead")
 extern OCTAVE_API NDArray gammainc (double x, const NDArray& a);
-OCTAVE_DEPRECATED ("use 'octave::math::gammainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::gammainc' instead")
 extern OCTAVE_API NDArray gammainc (const NDArray& x, double a);
-OCTAVE_DEPRECATED ("use 'octave::math::rc_log1p' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log1p' instead")
 extern OCTAVE_API NDArray gammainc (const NDArray& x, const NDArray& a);
 
-OCTAVE_DEPRECATED ("use 'octave::math::gammainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::gammainc' instead")
 inline float gammainc (float x, float a, bool& err) { return octave::math::gammainc (x, a, err); }
-OCTAVE_DEPRECATED ("use 'octave::math::gammainc' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::gammainc' instead")
 inline float gammainc (float x, float a) { return octave::math::gammainc (x, a); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::rc_log1p' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log1p' instead")
 extern OCTAVE_API FloatMatrix gammainc (float x, const FloatMatrix& a);
-OCTAVE_DEPRECATED ("use 'octave::math::rc_log1p' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log1p' instead")
 extern OCTAVE_API FloatMatrix gammainc (const FloatMatrix& x, float a);
-OCTAVE_DEPRECATED ("use 'octave::math::rc_log1p' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log1p' instead")
 extern OCTAVE_API FloatMatrix gammainc (const FloatMatrix& x, const FloatMatrix& a);
 
-OCTAVE_DEPRECATED ("use 'octave::math::rc_log1p' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log1p' instead")
 extern OCTAVE_API FloatNDArray gammainc (float x, const FloatNDArray& a);
-OCTAVE_DEPRECATED ("use 'octave::math::rc_log1p' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log1p' instead")
 extern OCTAVE_API FloatNDArray gammainc (const FloatNDArray& x, float a);
-OCTAVE_DEPRECATED ("use 'octave::math::rc_log1p' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log1p' instead")
 extern OCTAVE_API FloatNDArray gammainc (const FloatNDArray& x, const FloatNDArray& a);
 
-OCTAVE_DEPRECATED ("use 'octave::math::rc_log1p' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log1p' instead")
 inline Complex rc_log1p (double x) { return octave::math::rc_log1p (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::rc_log1p' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::rc_log1p' instead")
 inline FloatComplex rc_log1p (float x) { return octave::math::rc_log1p (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::erfinv' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfinv' instead")
 inline double erfinv (double x) { return octave::math::erfinv (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::erfinv' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfinv' instead")
 inline float erfinv (float x) { return octave::math::erfinv (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::erfcinv' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfcinv' instead")
 inline double erfcinv (double x) { return octave::math::erfcinv (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::erfcinv' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfcinv' instead")
 inline float erfcinv (float x) { return octave::math::erfcinv (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::erfcx' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfcx' instead")
 inline float erfcx (float x) { return octave::math::erfcx (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::erfcx' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfcx' instead")
 inline double erfcx (double x) { return octave::math::erfcx (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::erfcx' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfcx' instead")
 inline Complex erfcx (const Complex& x) { return octave::math::erfcx (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::erfcx' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfcx' instead")
 inline FloatComplex erfcx (const FloatComplex& x) { return octave::math::erfcx (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::erfi' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfi' instead")
 inline float erfi (float x) { return octave::math::erfi (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::erfi' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfi' instead")
 inline double erfi (double x) { return octave::math::erfi (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::erfi' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfi' instead")
 inline Complex erfi (const Complex& x) { return octave::math::erfi (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::erfi' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::erfi' instead")
 inline FloatComplex erfi (const FloatComplex& x) { return octave::math::erfi (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::dawson' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::dawson' instead")
 inline float dawson (float x) { return octave::math::dawson (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::dawson' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::dawson' instead")
 inline double dawson (double x) { return octave::math::dawson (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::dawson' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::dawson' instead")
 inline Complex dawson (const Complex& x) { return octave::math::dawson (x); }
-OCTAVE_DEPRECATED ("use 'octave::math::dawson' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::dawson' instead")
 inline FloatComplex dawson (const FloatComplex& x) { return octave::math::dawson (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::betaincinv' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betaincinv' instead")
 inline double betaincinv (double x, double a, double b) { return octave::math::betaincinv (x, a, b); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::betaincinv' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betaincinv' instead")
 extern OCTAVE_API double betaincinv (double x, double a, double b);
-OCTAVE_DEPRECATED ("use 'octave::math::betaincinv' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betaincinv' instead")
 extern OCTAVE_API Array<double> betaincinv (double x, double a, const Array<double>& b);
-OCTAVE_DEPRECATED ("use 'octave::math::betaincinv' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betaincinv' instead")
 extern OCTAVE_API Array<double> betaincinv (double x, const Array<double>& a, double b);
-OCTAVE_DEPRECATED ("use 'octave::math::betaincinv' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betaincinv' instead")
 extern OCTAVE_API Array<double> betaincinv (double x, const Array<double>& a, const Array<double>& b);
 
-OCTAVE_DEPRECATED ("use 'octave::math::betaincinv' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betaincinv' instead")
 extern OCTAVE_API Array<double> betaincinv (const Array<double>& x, double a, double b);
-OCTAVE_DEPRECATED ("use 'octave::math::betaincinv' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betaincinv' instead")
 extern OCTAVE_API Array<double> betaincinv (const Array<double>& x, double a, const Array<double>& b);
-OCTAVE_DEPRECATED ("use 'octave::math::betaincinv' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betaincinv' instead")
 extern OCTAVE_API Array<double> betaincinv (const Array<double>& x, const Array<double>& a, double b);
-OCTAVE_DEPRECATED ("use 'octave::math::betaincinv' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::betaincinv' instead")
 extern OCTAVE_API Array<double> betaincinv (const Array<double>& x, const Array<double>& a, const Array<double>& b);
 
-OCTAVE_DEPRECATED ("use 'octave::math::ellipj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::ellipj' instead")
 inline void ellipj (double u, double m, double& sn, double& cn, double& dn, double& err) { octave::math::ellipj (u, m, sn, cn, dn, err); }
-OCTAVE_DEPRECATED ("use 'octave::math::ellipj' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::ellipj' instead")
 inline void ellipj (const Complex& u, double m, Complex& sn, Complex& cn, Complex& dn, double& err) { octave::math::ellipj (u, m, sn, cn, dn, err); }
 
 //! Digamma function.
 //!
 //! Only defined for double and float.
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::psi' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::psi' instead")
 T
 psi (T z);
 
 template <>
 inline double
 psi (double z)
 {
   return octave::math::psi (z);
@@ -943,17 +943,17 @@ psi (float z)
 {
   return octave::math::psi (z);
 }
 
 //! Digamma function for complex input.
 //!
 //! Only defined for double and float.
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::psi' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::psi' instead")
 std::complex<T>
 psi (const std::complex<T>& z);
 
 template <>
 inline std::complex<double>
 psi (const std::complex<double>& z)
 {
   return octave::math::psi (z);
@@ -967,17 +967,17 @@ psi (const std::complex<float>& z)
 }
 
 //! Polygamma function.
 //!
 //! Only defined for double and float.
 //! @param n must be non-negative.  If zero, the digamma function is computed.
 //! @param z must be real and non-negative.
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::psi' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::psi' instead")
 T
 psi (octave_idx_type n, T z);
 
 template<>
 inline double
 psi (octave_idx_type n, double z)
 {
   return octave::math::psi (n, z);
diff --git a/liboctave/numeric/oct-fftw.h b/liboctave/numeric/oct-fftw.h
--- a/liboctave/numeric/oct-fftw.h
+++ b/liboctave/numeric/oct-fftw.h
@@ -373,34 +373,34 @@ namespace octave
   };
 
   extern OCTAVE_API std::string fftw_version (void);
   extern OCTAVE_API std::string fftwf_version (void);
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::fftw_version' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::fftw_version' instead")
 static inline std::string
 octave_fftw_version (void)
 {
   return octave::fftw_version ();
 }
 
-OCTAVE_DEPRECATED ("use 'octave::fftwf_version' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::fftwf_version' instead")
 static inline std::string
 octave_fftwf_version (void)
 {
   return octave::fftwf_version ();
 }
 
-OCTAVE_DEPRECATED ("use 'octave::fftw_planner' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::fftw_planner' instead")
 typedef octave::fftw_planner octave_fftw_planner;
 
-OCTAVE_DEPRECATED ("use 'octave::float_fftw_planner' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::float_fftw_planner' instead")
 typedef octave::float_fftw_planner octave_float_fftw_planner;
 
-OCTAVE_DEPRECATED ("use 'octave::fftw' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::fftw' instead")
 typedef octave::fftw octave_fftw;
 
 #endif
 
 #endif
diff --git a/liboctave/system/child-list.h b/liboctave/system/child-list.h
--- a/liboctave/system/child-list.h
+++ b/liboctave/system/child-list.h
@@ -120,17 +120,17 @@ namespace octave
     static child_list_rep *instance;
 
     static void cleanup_instance (void) { delete instance; instance = 0; }
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::child' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::child' instead")
 typedef octave::child octave_child;
 
-OCTAVE_DEPRECATED ("use 'octave::child_list' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::child_list' instead")
 typedef octave::child_list octave_child_list;
 
 #endif
 
 #endif
diff --git a/liboctave/system/dir-ops.h b/liboctave/system/dir-ops.h
--- a/liboctave/system/dir-ops.h
+++ b/liboctave/system/dir-ops.h
@@ -94,14 +94,14 @@ namespace octave
       // If a failure occurs, this contains the system error text.
       std::string errmsg;
     };
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::sys::dir_entry' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::dir_entry' instead")
 typedef octave::sys::dir_entry dir_entry;
 
 #endif
 
 #endif
diff --git a/liboctave/system/file-ops.h b/liboctave/system/file-ops.h
--- a/liboctave/system/file-ops.h
+++ b/liboctave/system/file-ops.h
@@ -218,177 +218,177 @@ namespace octave
 
     extern OCTAVE_API std::string
     canonicalize_file_name (const std::string&, std::string&);
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::sys::file_ops' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::file_ops' instead")
   typedef octave::sys::file_ops file_ops;
 
-OCTAVE_DEPRECATED ("use 'octave::sys::mkdir' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::mkdir' instead")
 inline int
 octave_mkdir (const std::string& nm, mode_t md)
 {
   return octave::sys::mkdir (nm, md);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::mkdir' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::mkdir' instead")
 inline int
 octave_mkdir (const std::string& nm, mode_t md, std::string& msg)
 {
   return octave::sys::mkdir (nm, md, msg);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::mkfifo' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::mkfifo' instead")
 inline int
 octave_mkfifo (const std::string& nm, mode_t md)
 {
   return octave::sys::mkfifo (nm, md);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::mkfifo' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::mkfifo' instead")
 inline int
 octave_mkfifo (const std::string& nm, mode_t md, std::string& msg)
 {
   return octave::sys::mkfifo (nm, md, msg);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::link' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::link' instead")
 inline int
 octave_link (const std::string& old_name, const std::string& new_name)
 {
   return octave::sys::link (old_name, new_name);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::link' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::link' instead")
 inline int
 octave_link (const std::string& old_name, const std::string& new_name,
              std::string& msg)
 {
   return octave::sys::link (old_name, new_name, msg);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::symlink' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::symlink' instead")
 inline int
 octave_symlink (const std::string& old_name, const std::string& new_name)
 {
   return octave::sys::symlink (old_name, new_name);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::symlink' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::symlink' instead")
 inline int
 octave_symlink (const std::string& old_name, const std::string& new_name,
                 std::string& msg)
 {
   return octave::sys::symlink (old_name, new_name, msg);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::readlink' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::readlink' instead")
 inline int
 octave_readlink (const std::string& path, std::string& result)
 {
   return octave::sys::readlink (path, result);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::readlink' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::readlink' instead")
 inline int
 octave_readlink (const std::string& path, std::string& result, std::string& msg)
 {
   return octave::sys::readlink (path, result, msg);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::rename' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::rename' instead")
 inline int
 octave_rename (const std::string& from, const std::string& to)
 {
   return octave::sys::rename (from, to);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::rename' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::rename' instead")
 inline int
 octave_rename (const std::string& from, const std::string& to, std::string& msg)
 {
   return octave::sys::rename (from, to, msg);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::rmdir' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::rmdir' instead")
 inline int
 octave_rmdir (const std::string& nm)
 {
   return octave::sys::rmdir (nm);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::rmdir' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::rmdir' instead")
 inline int
 octave_rmdir (const std::string& nm, std::string& msg)
 {
   return octave::sys::rmdir (nm, msg);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::recursive_rmdir' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::recursive_rmdir' instead")
 inline int
 octave_recursive_rmdir (const std::string& nm)
 {
   return octave::sys::recursive_rmdir (nm);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::recursive_rmdir' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::recursive_rmdir' instead")
 inline int
 octave_recursive_rmdir (const std::string& nm, std::string& msg)
 {
   return octave::sys::recursive_rmdir (nm, msg);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::umask' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::umask' instead")
 inline int
 octave_umask (mode_t md)
 {
   return octave::sys::umask (md);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::unlink' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::unlink' instead")
 inline int
 octave_unlink (const std::string& nm)
 {
   return octave::sys::unlink (nm);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::unlink' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::unlink' instead")
 inline int
 octave_unlink (const std::string& nm, std::string& msg)
 {
   return octave::sys::unlink (nm, msg);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::tempnam' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::tempnam' instead")
 inline std::string
 octave_tempnam (const std::string& dir, const std::string& pfx)
 {
   return octave::sys::tempnam (dir, pfx);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::tempnam' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::tempnam' instead")
 inline std::string
 octave_tempnam (const std::string& dir, const std::string& pfx,
                 std::string& msg)
 {
   return octave::sys::tempnam (dir, pfx, msg);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::canonicalize_file_name' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::canonicalize_file_name' instead")
 inline std::string
 octave_canonicalize_file_name (const std::string& nm)
 {
   return octave::sys::canonicalize_file_name (nm);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::canonicalize_file_name' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::canonicalize_file_name' instead")
 inline std::string
 octave_canonicalize_file_name (const std::string& nm, std::string& msg)
 {
   return octave::sys::canonicalize_file_name (nm, msg);
 }
 
 #endif
 
diff --git a/liboctave/system/file-stat.h b/liboctave/system/file-stat.h
--- a/liboctave/system/file-stat.h
+++ b/liboctave/system/file-stat.h
@@ -319,20 +319,20 @@ namespace octave
 
       void update_internal (bool force = false);
     };
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::sys::base_file_stat' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::base_file_stat' instead")
 typedef octave::sys::base_file_stat base_file_stat;
 
-OCTAVE_DEPRECATED ("use 'octave::sys::file_stat' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::file_stat' instead")
 typedef octave::sys::file_stat file_stat;
 
-OCTAVE_DEPRECATED ("use 'octave::sys::file_fstat' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::file_fstat' instead")
 typedef octave::sys::file_fstat file_fstat;
 
 #endif
 
 #endif
diff --git a/liboctave/system/lo-sysdep.h b/liboctave/system/lo-sysdep.h
--- a/liboctave/system/lo-sysdep.h
+++ b/liboctave/system/lo-sysdep.h
@@ -40,17 +40,17 @@ namespace octave
     extern std::string getcwd (void);
 
     extern int chdir (const std::string&);
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::sys::getcwd' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::getcwd' instead")
 const auto octave_getcwd = octave::sys::getcwd;
 
-OCTAVE_DEPRECATED ("use 'octave::sys::chdir' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::chdir' instead")
 const auto octave_chdir = octave::sys::chdir;
 
 #endif
 
 #endif
diff --git a/liboctave/system/mach-info.h b/liboctave/system/mach-info.h
--- a/liboctave/system/mach-info.h
+++ b/liboctave/system/mach-info.h
@@ -75,14 +75,14 @@ namespace octave
 
     // TRUE if the byte order on this system is big endian.
     mutable bool big_chief;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::mach_info' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::mach_info' instead")
 typedef octave::mach_info oct_mach_info;
 
 #endif
 
 #endif
diff --git a/liboctave/system/oct-env.h b/liboctave/system/oct-env.h
--- a/liboctave/system/oct-env.h
+++ b/liboctave/system/oct-env.h
@@ -147,14 +147,14 @@ namespace octave
 
       mutable std::string host_name;
     };
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::sys::env' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::env' instead")
 typedef octave::sys::env octave_env;
 
 #endif
 
 #endif
diff --git a/liboctave/system/oct-group.h b/liboctave/system/oct-group.h
--- a/liboctave/system/oct-group.h
+++ b/liboctave/system/oct-group.h
@@ -112,14 +112,14 @@ namespace octave
       // to a struct group.
       group (void *p, std::string& msg);
     };
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::sys::group' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::group' instead")
 typedef octave::sys::group octave_group;
 
 #endif
 
 #endif
diff --git a/liboctave/system/oct-passwd.h b/liboctave/system/oct-passwd.h
--- a/liboctave/system/oct-passwd.h
+++ b/liboctave/system/oct-passwd.h
@@ -132,14 +132,14 @@ namespace octave
       // to a struct passwd.
       password (void *p, std::string& msg);
     };
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::sys::password' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::password' instead")
 typedef octave::sys::password octave_passwd;
 
 #endif
 
 #endif
diff --git a/liboctave/system/oct-syscalls.h b/liboctave/system/oct-syscalls.h
--- a/liboctave/system/oct-syscalls.h
+++ b/liboctave/system/oct-syscalls.h
@@ -100,33 +100,33 @@ namespace octave
 
     extern OCTAVE_API int fcntl (int, int, long);
     extern OCTAVE_API int fcntl (int, int, long, std::string&);
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::sys::popen2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::popen2' instead")
 inline pid_t
 octave_popen2 (const std::string& cmd, const string_vector& args,
                bool sync_mode, int *filedes)
 {
   return octave::sys::popen2 (cmd, args, sync_mode, filedes);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::popen2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::popen2' instead")
 inline pid_t
 popen2 (const std::string& cmd, const string_vector& args,
         bool sync_mode, int *filedes, std::string& msg)
 {
   return octave::sys::popen2 (cmd, args, sync_mode, filedes, msg);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::sys::popen2' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::popen2' instead")
 inline pid_t
 popen2 (const std::string& cmd, const string_vector& args,
         bool sync_mode, int *filedes, std::string& msg,
         bool &/*interactive*/)
 {
   return octave::sys::popen2 (cmd, args, sync_mode, filedes, msg);
 }
 
diff --git a/liboctave/system/oct-time.h b/liboctave/system/oct-time.h
--- a/liboctave/system/oct-time.h
+++ b/liboctave/system/oct-time.h
@@ -529,26 +529,26 @@ namespace octave
       long m_nvcsw;
       long m_nivcsw;
     };
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::sys::time' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::time' instead")
 typedef octave::sys::time octave_time;
 
-OCTAVE_DEPRECATED ("use 'octave::sys::base_tm' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::base_tm' instead")
 typedef octave::sys::base_tm octave_base_tm;
 
-OCTAVE_DEPRECATED ("use 'octave::sys::localtime' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::localtime' instead")
 typedef octave::sys::localtime octave_localtime;
 
-OCTAVE_DEPRECATED ("use 'octave::sys::gmtime' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::gmtime' instead")
 typedef octave::sys::gmtime octave_gmtime;
 
-OCTAVE_DEPRECATED ("use 'octave::sys::strptime' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::strptime' instead")
 typedef octave::sys::strptime octave_strptime;
 
 #endif
 
 #endif
diff --git a/liboctave/system/oct-uname.h b/liboctave/system/oct-uname.h
--- a/liboctave/system/oct-uname.h
+++ b/liboctave/system/oct-uname.h
@@ -91,14 +91,14 @@ namespace octave
 
       void init (void);
     };
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::sys::uname' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::uname' instead")
 typedef octave::sys::uname octave_uname;
 
 #endif
 
 #endif
diff --git a/liboctave/util/cmd-edit.h b/liboctave/util/cmd-edit.h
--- a/liboctave/util/cmd-edit.h
+++ b/liboctave/util/cmd-edit.h
@@ -364,14 +364,14 @@ namespace octave
     bool interrupted;
 
     std::string initial_input;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::command_editor' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::command_editor' instead")
 typedef octave::command_editor command_editor;
 
 #endif
 
 #endif
diff --git a/liboctave/util/cmd-hist.h b/liboctave/util/cmd-hist.h
--- a/liboctave/util/cmd-hist.h
+++ b/liboctave/util/cmd-hist.h
@@ -230,14 +230,14 @@ namespace octave
 
     // The number of lines of history to save.
     int xsize;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::command_history' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::command_history' instead")
 typedef octave::command_history command_history;
 
 #endif
 
 #endif
diff --git a/liboctave/util/lo-array-errwarn.h b/liboctave/util/lo-array-errwarn.h
--- a/liboctave/util/lo-array-errwarn.h
+++ b/liboctave/util/lo-array-errwarn.h
@@ -154,113 +154,113 @@ namespace octave
   err_invalid_resize (void);
 
   OCTAVE_API extern void
   warn_singular_matrix (double rcond = 0.0);
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::err_nan_to_logical_conversion' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_nan_to_logical_conversion' instead")
 OCTAVE_NORETURN inline void
 err_nan_to_logical_conversion (void)
 {
   octave::err_nan_to_logical_conversion ();
 }
 
-OCTAVE_DEPRECATED ("use 'octave::err_nan_to_character_conversion' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_nan_to_character_conversion' instead")
 OCTAVE_NORETURN inline void
 err_nan_to_character_conversion (void)
 {
   octave::err_nan_to_character_conversion ();
 }
 
-OCTAVE_DEPRECATED ("use 'octave::err_nonconformant' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_nonconformant' instead")
 OCTAVE_NORETURN inline void
 err_nonconformant (const char *op, octave_idx_type op1_len,
                    octave_idx_type op2_len)
 {
   octave::err_nonconformant (op, op1_len, op2_len);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::err_nonconformant' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_nonconformant' instead")
 OCTAVE_NORETURN inline void
 err_nonconformant (const char *op,
                    octave_idx_type op1_nr, octave_idx_type op1_nc,
                    octave_idx_type op2_nr, octave_idx_type op2_nc)
 {
   octave::err_nonconformant (op, op1_nr, op1_nc, op2_nr, op2_nc);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::err_nonconformant' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_nonconformant' instead")
 OCTAVE_NORETURN inline void
 err_nonconformant (const char *op,
                    const dim_vector& op1_dims, const dim_vector& op2_dims)
 {
   octave::err_nonconformant (op, op1_dims, op2_dims);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::err_index_out_of_range' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_index_out_of_range' instead")
 OCTAVE_NORETURN inline void
 err_index_out_of_range (int nd, int dim, octave_idx_type iext,
                         octave_idx_type ext, const dim_vector& d)
 {
   octave::err_index_out_of_range (nd, dim, iext, ext, d);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::err_index_out_of_range' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_index_out_of_range' instead")
 OCTAVE_NORETURN inline void
 err_index_out_of_range (int nd, int dim, octave_idx_type iext,
                         octave_idx_type ext)
 {
   octave::err_index_out_of_range (nd, dim, iext, ext);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::err_del_index_out_of_range' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_del_index_out_of_range' instead")
 OCTAVE_NORETURN inline void
 err_del_index_out_of_range (bool is1d, octave_idx_type iext,
                             octave_idx_type ext)
 {
   octave::err_del_index_out_of_range (is1d, iext, ext);
 }
 
 OCTAVE_NORETURN inline void
 err_invalid_index (double n, octave_idx_type nd = 0,
                    octave_idx_type dim = 0,
                    const std::string& var = "")
 {
   octave::err_invalid_index (n, nd, dim, var);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::err_invalid_index' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_invalid_index' instead")
 OCTAVE_NORETURN inline void
 err_invalid_index (octave_idx_type n, octave_idx_type nd = 0,
                    octave_idx_type dim = 0,
                    const std::string& var = "")
 {
   octave::err_invalid_index (n, nd, dim, var);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::err_invalid_index' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_invalid_index' instead")
 OCTAVE_NORETURN inline void
 err_invalid_index (const std::string& idx, octave_idx_type nd = 0,
                    octave_idx_type dim = 0,
                    const std::string& var = "")
 {
   octave::err_invalid_index (idx, nd, dim, var);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::err_invalid_resize' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_invalid_resize' instead")
 OCTAVE_NORETURN inline void
 err_invalid_resize (void)
 {
   octave::err_invalid_resize ();
 }
 
-OCTAVE_DEPRECATED ("use 'octave::warn_singular_matrix' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::warn_singular_matrix' instead")
 inline void
 warn_singular_matrix (double rcond = 0.0)
 {
   return octave::warn_singular_matrix (rcond);
 }
 
 #endif
 
diff --git a/liboctave/util/lo-array-gripes.h b/liboctave/util/lo-array-gripes.h
--- a/liboctave/util/lo-array-gripes.h
+++ b/liboctave/util/lo-array-gripes.h
@@ -26,76 +26,76 @@ along with Octave; see the file COPYING.
 #define octave_lo_array_gripes_h 1
 
 #include "octave-config.h"
 
 #include "lo-array-errwarn.h"
 #include "dim-vector.h"
 #include "quit.h"
 
-OCTAVE_DEPRECATED ("use 'octave::err_nan_to_logical_conversion' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_nan_to_logical_conversion' instead")
 OCTAVE_NORETURN OCTAVE_API extern void
 gripe_nan_to_logical_conversion (void);
 
-OCTAVE_DEPRECATED ("use 'octave::err_nan_to_character_conversion' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_nan_to_character_conversion' instead")
 OCTAVE_NORETURN OCTAVE_API extern void
 gripe_nan_to_character_conversion (void);
 
-OCTAVE_DEPRECATED ("use 'octave::err_nonconformant' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_nonconformant' instead")
 OCTAVE_NORETURN OCTAVE_API extern void
 gripe_nonconformant (const char *op,
                      octave_idx_type op1_len,
                      octave_idx_type op2_len);
 
-OCTAVE_DEPRECATED ("use 'octave::err_nonconformant' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_nonconformant' instead")
 OCTAVE_NORETURN OCTAVE_API extern void
 gripe_nonconformant (const char *op,
                      octave_idx_type op1_nr, octave_idx_type op1_nc,
                      octave_idx_type op2_nr, octave_idx_type op2_nc);
 
-OCTAVE_DEPRECATED ("use 'octave::err_nonconformant' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_nonconformant' instead")
 OCTAVE_NORETURN OCTAVE_API extern void
 gripe_nonconformant (const char *op, const dim_vector& op1_dims,
                      const dim_vector& op2_dims);
 
-OCTAVE_DEPRECATED ("use 'octave::err_index_out_of_range' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_index_out_of_range' instead")
 OCTAVE_NORETURN OCTAVE_API extern void
 gripe_index_out_of_range (int nd, int dim,
                           octave_idx_type iext, octave_idx_type ext,
                           const dim_vector& d);
 
-OCTAVE_DEPRECATED ("use 'octave::err_index_out_of_range' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_index_out_of_range' instead")
 OCTAVE_NORETURN OCTAVE_API extern void
 gripe_index_out_of_range (int nd, int dim,
                           octave_idx_type iext, octave_idx_type ext);
 
-OCTAVE_DEPRECATED ("use 'octave::err_del_index_out_of_range' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_del_index_out_of_range' instead")
 OCTAVE_NORETURN OCTAVE_API extern void
 gripe_del_index_out_of_range (bool is1d, octave_idx_type iext,
                               octave_idx_type ext);
 
-OCTAVE_DEPRECATED ("use 'octave::err_invalid_index' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_invalid_index' instead")
 OCTAVE_NORETURN OCTAVE_API extern void
 gripe_invalid_index (double, octave_idx_type nd = 0,
                      octave_idx_type dim = 0,
                      const std::string& var = "");
 
-OCTAVE_DEPRECATED ("use 'octave::err_invalid_index' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_invalid_index' instead")
 OCTAVE_NORETURN OCTAVE_API extern void
 gripe_invalid_index (octave_idx_type n, octave_idx_type nd = 0,
                      octave_idx_type dim = 0,
                      const std::string& var = "");
 
-OCTAVE_DEPRECATED ("use 'octave::err_invalid_index' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_invalid_index' instead")
 OCTAVE_NORETURN OCTAVE_API extern void
 gripe_invalid_index (const std::string& idx, octave_idx_type nd = 0,
                      octave_idx_type dim = 0,
                      const std::string& var = "");
 
-OCTAVE_DEPRECATED ("use 'octave::err_invalid_resize' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_invalid_resize' instead")
 OCTAVE_NORETURN OCTAVE_API extern void
 gripe_invalid_resize (void);
 
-OCTAVE_DEPRECATED ("use 'octave::err_singular_matrix' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::err_singular_matrix' instead")
 OCTAVE_API extern void
 gripe_singular_matrix (double rcond = 0.0);
 
 #endif
diff --git a/liboctave/util/lo-regexp.h b/liboctave/util/lo-regexp.h
--- a/liboctave/util/lo-regexp.h
+++ b/liboctave/util/lo-regexp.h
@@ -284,50 +284,50 @@ namespace octave
     void free (void);
 
     void compile_internal (void);
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::regexp' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::regexp' instead")
 typedef octave::regexp regexp;
 
-OCTAVE_DEPRECATED ("use 'octave::regexp::match' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::regexp::match' instead")
 inline regexp::match_data
 regexp_match (const std::string& pat,
               const std::string& buffer,
               const regexp::opts& opt = regexp::opts (),
               const std::string& who = "regexp")
 {
   return octave::regexp::match (pat, buffer, opt, who);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::regexp::is_match' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::regexp::is_match' instead")
 inline bool
 is_regexp_match (const std::string& pat,
                  const std::string& buffer,
                  const regexp::opts& opt = regexp::opts (),
                  const std::string& who = "regexp")
 {
   return octave::regexp::is_match (pat, buffer, opt, who);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::regexp::is_match' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::regexp::is_match' instead")
 inline Array<bool>
 is_regexp_match (const std::string& pat,
                  const string_vector& buffer,
                  const regexp::opts& opt = regexp::opts (),
                  const std::string& who = "regexp")
 {
   return octave::regexp::is_match (pat, buffer, opt, who);
 }
 
-OCTAVE_DEPRECATED ("use 'octave::regexp::replace' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::regexp::replace' instead")
 inline std::string
 regexp_replace (const std::string& pat,
                 const std::string& buffer,
                 const std::string& replacement,
                 const regexp::opts& opt = regexp::opts (),
                 const std::string& who = "regexp")
 {
   return octave::regexp::replace (pat, buffer, replacement, opt, who);
diff --git a/liboctave/util/oct-glob.h b/liboctave/util/oct-glob.h
--- a/liboctave/util/oct-glob.h
+++ b/liboctave/util/oct-glob.h
@@ -40,17 +40,17 @@ namespace octave
 
     extern string_vector
     windows_glob (const string_vector&);
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::sys::fnmatch' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::fnmatch' instead")
 const auto octave_fnmatch = octave::sys::fnmatch;
 
-OCTAVE_DEPRECATED ("use 'octave::sys::glob' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::sys::glob' instead")
 const auto octave_glob = octave::sys::glob;
 
 #endif
 
 #endif
diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -56,20 +56,20 @@ namespace octave
     inline long double round (long double x) { return roundl (x); }
 
     inline long double isnan (long double x) { return isnan (static_cast<double> (x)); }
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::math::round' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::round' instead")
 inline long double xround (long double x) { return octave::math::round (x); }
 
-OCTAVE_DEPRECATED ("use 'octave::math::isnan' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::isnan' instead")
 inline bool xisnan (long double x) { return octave::math::isnan (x); }
 
 #endif
 
 #endif
 
 // FIXME: we define this by our own because some compilers, such as
 // MSVC, do not provide std::abs (int64_t) and std::abs (uint64_t).  In
@@ -992,17 +992,17 @@ namespace octave
       return false;
     }
   }
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
 template <typename T>
-OCTAVE_DEPRECATED ("use 'octave::math::isnan' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::math::isnan' instead")
 bool
 xisnan (const octave_int<T>& x)
 {
   return octave::math::isnan (x);
 }
 
 #endif
 
diff --git a/liboctave/util/oct-mutex.h b/liboctave/util/oct-mutex.h
--- a/liboctave/util/oct-mutex.h
+++ b/liboctave/util/oct-mutex.h
@@ -148,30 +148,30 @@ namespace octave
   thread
   {
   public:
 
     static void init (void);
 
     static bool is_thread (void);
 
-    OCTAVE_DEPRECATED ("use 'octave::is_thread' instead")
+    OCTAVE_DEPRECATED (4.4, "use 'octave::is_thread' instead")
     static bool is_octave_thread (void) { return is_thread (); }
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::mutex' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::mutex' instead")
 typedef octave::mutex octave_mutex;
 
-OCTAVE_DEPRECATED ("use 'octave::base_mutex' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::base_mutex' instead")
 typedef octave::base_mutex octave_base_mutex;
 
-OCTAVE_DEPRECATED ("use 'octave::autolock' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::autolock' instead")
 typedef octave::autolock octave_autolock;
 
-OCTAVE_DEPRECATED ("use 'octave::thread' instead")
+OCTAVE_DEPRECATED (4.4, "use 'octave::thread' instead")
 typedef octave::thread octave_thread;
 
 #endif
 
 #endif
diff --git a/liboctave/util/oct-refcount.h b/liboctave/util/oct-refcount.h
--- a/liboctave/util/oct-refcount.h
+++ b/liboctave/util/oct-refcount.h
@@ -113,11 +113,11 @@ namespace octave
 
   private:
 
     count_type count;
   };
 }
 
 template <typename T>
-using octave_refcount OCTAVE_DEPRECATED (("use 'octave::refcount' instead")) = octave::refcount<T>;
+using octave_refcount OCTAVE_DEPRECATED (4.4, "use 'octave::refcount' instead") = octave::refcount<T>;
 
 #endif
diff --git a/liboctave/util/oct-shlib.h b/liboctave/util/oct-shlib.h
--- a/liboctave/util/oct-shlib.h
+++ b/liboctave/util/oct-shlib.h
@@ -196,14 +196,14 @@ namespace octave
   private:
 
     dynlib_rep *rep;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::dynamic_library' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::dynamic_library' instead")
 typedef octave::dynamic_library octave_shlib;
 
 #endif
 
 #endif
diff --git a/liboctave/util/oct-sort.h b/liboctave/util/oct-sort.h
--- a/liboctave/util/oct-sort.h
+++ b/liboctave/util/oct-sort.h
@@ -133,17 +133,17 @@ public:
   void sort (T *data, octave_idx_type nel);
 
   // Ditto, but also permute the passed indices (may not be valid indices).
   void sort (T *data, octave_idx_type *idx, octave_idx_type nel);
 
   // Check whether an array is sorted.
   bool issorted (const T *data, octave_idx_type nel);
 
-  OCTAVE_DEPRECATED ("use 'issorted' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'issorted' instead")
   bool is_sorted (const T *data, octave_idx_type nel)
   { return issorted (data, nel); }
 
   // Sort a matrix by rows, return a permutation
   // vector.
   void sort_rows (const T *data, octave_idx_type *idx,
                   octave_idx_type rows, octave_idx_type cols);
 
@@ -307,17 +307,17 @@ private:
 
   template <typename Comp>
   void sort (T *data, octave_idx_type *idx, octave_idx_type nel, Comp comp);
 
   template <typename Comp>
   bool issorted (const T *data, octave_idx_type nel, Comp comp);
 
   template <typename Comp>
-  OCTAVE_DEPRECATED ("use 'issorted' instead")
+  OCTAVE_DEPRECATED (4.4, "use 'issorted' instead")
   bool is_sorted (const T *data, octave_idx_type nel, Comp comp)
   { return issorted (data, nel, comp); }
 
   template <typename Comp>
   void sort_rows (const T *data, octave_idx_type *idx,
                   octave_idx_type rows, octave_idx_type cols,
                   Comp comp);
 
diff --git a/liboctave/util/pathsearch.h b/liboctave/util/pathsearch.h
--- a/liboctave/util/pathsearch.h
+++ b/liboctave/util/pathsearch.h
@@ -181,14 +181,14 @@ namespace octave
 
       std::string xpath_sep_str;
     };
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::directory_path' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::directory_path' instead")
 typedef octave::directory_path dir_path;
 
 #endif
 
 #endif
diff --git a/liboctave/util/quit.h b/liboctave/util/quit.h
--- a/liboctave/util/quit.h
+++ b/liboctave/util/quit.h
@@ -140,23 +140,23 @@ namespace octave
   };
 
   class
   interrupt_exception
   {
   };
 }
 
-OCTAVE_DEPRECATED ("use 'octave::execution_exception' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::execution_exception' instead")
 typedef octave::execution_exception octave_execution_exception;
 
-OCTAVE_DEPRECATED ("use 'octave::exit_exception' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::exit_exception' instead")
 typedef octave::exit_exception octave_exit_exception;
 
-OCTAVE_DEPRECATED ("use 'octave::interrupt_exception' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::interrupt_exception' instead")
 typedef octave::interrupt_exception octave_interrupt_exception;
 
 #endif
 
 enum octave_exception
 {
   octave_no_exception = 0,
   octave_exec_exception = 1,
@@ -184,25 +184,25 @@ OCTAVE_API extern volatile sig_atomic_t 
 OCTAVE_API extern void octave_handle_signal (void);
 
 OCTAVE_NORETURN OCTAVE_API extern void octave_throw_interrupt_exception (void);
 
 OCTAVE_NORETURN OCTAVE_API extern void octave_throw_execution_exception (void);
 
 OCTAVE_NORETURN OCTAVE_API extern void octave_throw_bad_alloc (void);
 
-OCTAVE_DEPRECATED ("see the Octave documentation for other options")
+OCTAVE_DEPRECATED (4.4, "see the Octave documentation for other options")
 OCTAVE_NORETURN OCTAVE_API extern void
 octave_throw_exit_exception (int exit_status, int safe_to_return);
 
 OCTAVE_API extern void octave_rethrow_exception (void);
 
 #if defined (__cplusplus)
 
-OCTAVE_DEPRECATED ("see the Octave documentation for other options")
+OCTAVE_DEPRECATED (4.4, "see the Octave documentation for other options")
 extern OCTAVE_API void
 clean_up_and_exit (int exit_status, bool safe_to_return = false);
 
 inline void octave_quit (void)
 {
   if (octave_signal_caught)
     {
       octave_signal_caught = 0;
diff --git a/liboctave/util/unwind-prot.h b/liboctave/util/unwind-prot.h
--- a/liboctave/util/unwind-prot.h
+++ b/liboctave/util/unwind-prot.h
@@ -126,17 +126,17 @@ namespace octave
             }
         }
     }
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::unwind_protect' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::unwind_protect' instead")
 typedef octave::unwind_protect unwind_protect;
 
-OCTAVE_DEPRECATED ("use 'octave::unwind_protect_safe' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::unwind_protect_safe' instead")
 typedef octave::unwind_protect_safe unwind_protect_safe;
 
 #endif
 
 #endif
diff --git a/liboctave/util/url-transfer.h b/liboctave/util/url-transfer.h
--- a/liboctave/util/url-transfer.h
+++ b/liboctave/util/url-transfer.h
@@ -287,17 +287,17 @@ namespace octave
   private:
 
     base_url_transfer *rep;
   };
 }
 
 #if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
 
-OCTAVE_DEPRECATED ("use 'octave::base_url_transfer' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::base_url_transfer' instead")
 typedef octave::base_url_transfer base_url_transfer;
 
-OCTAVE_DEPRECATED ("use 'octave::url_transfer' instead")
+OCTAVE_DEPRECATED (4.2, "use 'octave::url_transfer' instead")
 typedef octave::url_transfer url_transfer;
 
 #endif
 
 #endif
diff --git a/oct-conf-post.in.h b/oct-conf-post.in.h
--- a/oct-conf-post.in.h
+++ b/oct-conf-post.in.h
@@ -28,29 +28,29 @@ along with Octave; see the file COPYING.
    mechanisms.  As compilers evolve, the underlying implementation can
    be changed with the macro definitions below.  FIXME: Update macros
    to use C++ standard attribute syntax when Octave moves to C++ 2011
    standard.  */
 
 #if defined (__GNUC__)
    /* The following attributes are used with gcc and clang compilers.  */
 #  if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
-#    define OCTAVE_DEPRECATED(msg) __attribute__ ((__deprecated__ (msg)))
+#    define OCTAVE_DEPRECATED(ver, msg) __attribute__ ((__deprecated__ ("[" #ver "]: " msg)))
 #  else
-#    define OCTAVE_DEPRECATED(msg) __attribute__ ((__deprecated__))
+#    define OCTAVE_DEPRECATED(ver, msg) __attribute__ ((__deprecated__))
 #  endif
 #  define HAVE_OCTAVE_DEPRECATED_ATTR 1
 
 #  define OCTAVE_NORETURN __attribute__ ((__noreturn__))
 #  define HAVE_OCTAVE_NORETURN_ATTR 1
 
 #  define OCTAVE_UNUSED __attribute__ ((__unused__))
 #  define HAVE_OCTAVE_UNUSED_ATTR 1
 #else
-#  define OCTAVE_DEPRECATED(msg)
+#  define OCTAVE_DEPRECATED(ver, msg)
 #  define OCTAVE_NORETURN
 #  define OCTAVE_UNUSED
 #endif
 
 #define OCTAVE_USE_DEPRECATED_FUNCTIONS 1
 
 #if defined (__cplusplus)
 template <typename T>
