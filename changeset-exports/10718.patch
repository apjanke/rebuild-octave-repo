# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1277184911 25200
#      Mon Jun 21 22:35:11 2010 -0700
# Node ID b8d76f4be94ab1586cb5ed61a4cdc9c007c459ce
# Parent  9d4a198614ab5d247c9a3de0035175076c414135
Fix spreadsheet style range option (bug #30183).

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-06-21  Rik <octave@nomad.inbox5.com>
+
+	* DLD-FUNCTIONS/dlmread.cc: Fix spreadsheet style range option. 
+        (bug #30183).
+
 2010-06-21  David Bateman  <dbateman@free.fr>
 
 	* graphics.cc (std::string radio_values:values_as_string (void)
 	const, Cell radio_values:values_as_cell (void) const): New functions.
 	(void graphics_object::set (const octave_value_list&)): Throw error
 	with no arguments.
 	(std::string base_graphics_object::values_as_string (void),
 	Octave_map base_graphics_object::values_as_struct (void)): New
diff --git a/src/DLD-FUNCTIONS/dlmread.cc b/src/DLD-FUNCTIONS/dlmread.cc
--- a/src/DLD-FUNCTIONS/dlmread.cc
+++ b/src/DLD-FUNCTIONS/dlmread.cc
@@ -50,20 +50,21 @@ read_cell_spec (std::istream& is, unsign
       if (::isalpha (is.peek ()))
         {
           col = 0;
           while (is && ::isalpha (is.peek ()))
             {
               char ch = is.get ();
               col *= 26;
               if (ch >= 'a')
-                col += ch - 'a';
+                col += ch - 'a' + 1;
               else
-                col += ch - 'A';
+                col += ch - 'A' + 1;
             }
+          col --;
 
           if (is)
             {
               is >> row;
               row --;
               if (is)
                 stat = true;
             }
@@ -146,31 +147,34 @@ parse_range_spec (const octave_value& ra
   else 
     stat = false;
 
   return stat;
 }
 
 DEFUN_DLD (dlmread, args, ,
   "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {@var{data} =} dlmread (@var{file})\n\
+@deftypefn  {Loadable Function} {@var{data} =} dlmread (@var{file})\n\
 @deftypefnx {Loadable Function} {@var{data} =} dlmread (@var{file}, @var{sep})\n\
 @deftypefnx {Loadable Function} {@var{data} =} dlmread (@var{file}, @var{sep}, @var{r0}, @var{c0})\n\
 @deftypefnx {Loadable Function} {@var{data} =} dlmread (@var{file}, @var{sep}, @var{range})\n\
 Read the matrix @var{data} from a text file.  If not defined the separator\n\
 between fields is determined from the file itself.  Otherwise the\n\
 separation character is defined by @var{sep}.\n\
 \n\
 Given two scalar arguments @var{r0} and @var{c0}, these define the starting\n\
 row and column of the data to be read.  These values are indexed from zero,\n\
 such that the first row corresponds to an index of zero.\n\
 \n\
-The @var{range} parameter must be a 4 element vector containing the upper\n\
-left and lower right corner @code{[@var{R0},@var{C0},@var{R1},@var{C1}]} or\n\
-a spreadsheet style range such as 'A2..Q15'.  The lowest index value is zero.\n\
+The @var{range} parameter may be a 4 element vector containing the upper\n\
+left and lower right corner @code{[@var{R0},@var{C0},@var{R1},@var{C1}]}\n\
+where the lowest index value is zero.  Alternatively, a spreadsheet style\n\
+range such as 'A2..Q15' or 'T1:AA5' can be used.  The lowest alphabetical\n\
+index 'A' refers to the first column.  The lowest row index is 1.\n\
+@seealso{csvread,dlmwrite}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 4) 
     {
