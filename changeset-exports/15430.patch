# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1348263085 14400
#      Fri Sep 21 17:31:25 2012 -0400
# Node ID 21467c7fc08fb0d8a4d771826827762712b929f5
# Parent  4db96357fec927149b4082689c1a1b7a8cca7d32
Deprecate DiagArray2<T>::diag

* DiagArray2.cc (DiagArray2<T>::[diag, extract_diag]): Exchange these
  two functions.
* DiagArray2.h (DiagArray2<T>::diag): Add GCC_ATTR_DEPRECATED

diff --git a/liboctave/array/DiagArray2.cc b/liboctave/array/DiagArray2.cc
--- a/liboctave/array/DiagArray2.cc
+++ b/liboctave/array/DiagArray2.cc
@@ -43,24 +43,24 @@ DiagArray2<T>::DiagArray2 (const Array<T
 {
   octave_idx_type rcmin = std::min (r, c);
   if (rcmin != a.length ())
     Array<T>::resize (dim_vector (rcmin, 1));
 }
 
 template <class T>
 Array<T>
-DiagArray2<T>::extract_diag (octave_idx_type k) const
+DiagArray2<T>::diag (octave_idx_type k) const
 {
-  return diag (k);
+  return extract_diag (k);
 }
 
 template <class T>
 Array<T>
-DiagArray2<T>::diag (octave_idx_type k) const
+DiagArray2<T>::extract_diag (octave_idx_type k) const
 {
   Array<T> d;
 
   if (k == 0)
     // The main diagonal is shallow-copied.
     d = *this;
   else if (k > 0 && k < cols ())
     d = Array<T> (dim_vector (std::min (cols () - k, rows ()), 1), T ());
diff --git a/liboctave/array/DiagArray2.h b/liboctave/array/DiagArray2.h
--- a/liboctave/array/DiagArray2.h
+++ b/liboctave/array/DiagArray2.h
@@ -92,17 +92,17 @@ public:
   octave_idx_type length (void) const { return Array<T>::length (); }
   octave_idx_type nelem (void) const { return dim1 () * dim2 (); }
   octave_idx_type numel (void) const { return nelem (); }
 
   size_t byte_size (void) const { return Array<T>::byte_size (); }
 
   dim_vector dims (void) const { return dim_vector (d1, d2); }
 
-  Array<T> diag (octave_idx_type k = 0) const;
+  Array<T> diag (octave_idx_type k = 0) GCC_ATTR_DEPRECATED const;
   Array<T> extract_diag (octave_idx_type k = 0) const;
   DiagArray2<T> build_diag_matrix () const
   {
     return DiagArray2<T> (array_value ());
   }
 
   // Warning: the non-const two-index versions will silently ignore assignments
   // to off-diagonal elements.
