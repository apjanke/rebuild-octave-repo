# HG changeset patch
# User Rik <rik@octave.org>
# Date 1354472266 28800
#      Sun Dec 02 10:17:46 2012 -0800
# Node ID 6ae93518356c311f65ab2663843308277186600d
# Parent  b1cd65881592a3c0b28677fa13c92d734e89a339
rgbplot.m. Match variable in docstring to function prototype.

* rgb2ind.m: Use Octave coding convention for parenthesis around switch arg.

* rgbplot.m: Match variable in docstring to function prototype.
Tweak docstring.  Use Octave coding convention for parenthesis around
switch arg.

diff --git a/scripts/image/rgb2ind.m b/scripts/image/rgb2ind.m
--- a/scripts/image/rgb2ind.m
+++ b/scripts/image/rgb2ind.m
@@ -53,17 +53,17 @@ function [x, map] = rgb2ind (R, G, B)
 
   x = reshape (1:numel (R), size (R));
 
   map    = unique ([R(:) G(:) B(:)], "rows");
   [~, x] = ismember ([R(:) G(:) B(:)], map, "rows");
   x      = reshape (x, size (R));
 
   ## a colormap is of class double and values between 0 and 1
-  switch class (R)
+  switch (class (R))
     case {"single", "double", "logical"}
       ## do nothing, return the same
     case {"uint8", "uint16"}
       map = double (map) / double (intmax (class (R)));
     case "int16"
       map = (double (im) + 32768) / 65535;
     otherwise
       error ("unsupported image class %s", im_class);
diff --git a/scripts/image/rgbplot.m b/scripts/image/rgbplot.m
--- a/scripts/image/rgbplot.m
+++ b/scripts/image/rgbplot.m
@@ -19,70 +19,72 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} rgbplot (@var{cmap})
 ## @deftypefnx {Function File} {} rgbplot (@var{cmap}, @var{style})
 ## @deftypefnx {Function File} {@var{h} =} rgbplot (@dots{})
 ## Plot the components of a colormap.
 ##
 ## Two different @var{style}s are available for displaying the @var{cmap}:
+##
 ## @table @asis
 ## @item profile (default)
-## Plots the RGB line profile of the colormap for each of the channels (red,
+## Plot the RGB line profile of the colormap for each of the channels (red,
 ## green and blue) with the plot lines colored appropriately.  Each line
 ## represents the intensity of each RGB components across the colormap.
 ##
 ## @item composite
-## Draws the colormap across the X axis so that the actual colors are visible
-## rather than the individual color components.
+## Draw the colormap across the X-axis so that the actual index colors are
+## visible rather than the individual color components.
 ##
 ## @end table
 ##
-## Run @code{demo rgbplot} for a comparison display.
-##
 ## The optional return value @var{h} is a graphics handle to the created plot.
 ##
+## Run @code{demo rgbplot} to see an example of @cdoe{rgpblot} and each style
+## option.
 ## @seealso{colormap}
 ## @end deftypefn
 
-function retval = rgbplot (cmap, style)
+function h = rgbplot (cmap, style)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
 
   if (! iscolormap (cmap))
     error ("rgbplot: CMAP must be a valid colormap");
   elseif (! ischar (style))
     error ("rgbplot: STYLE must be a string");
   endif
 
-  switch tolower (style)
+  switch (tolower (style))
     case "profile"
-      h = plot (cmap(:,1),"r", cmap(:,2),"g", cmap(:,3),"b");
+      htmp = plot (cmap(:,1),"r", cmap(:,2),"g", cmap(:,3),"b");
       set (gca, 'ytick', 0:0.1:1);
     case "composite"
-      h = image (1:rows(cmap));
+      htmp = image (1:rows(cmap));
       set (gca, 'ytick', []);
       colormap (cmap);
     otherwise
       error ("rgbplot: unknown style `%s'", style);
   endswitch
   xlabel ("color index");
 
   if (nargout > 0)
     h = htmp;
   endif
 
 endfunction
 
+
 %!demo
 %! clf;
 %! subplot (1, 2, 1);
 %! rgbplot (ocean, "profile");
-%! subplot (1, 2, 2)
+%! subplot (1, 2, 2);
 %! rgbplot (ocean, "composite");
 
 %% Test input validation
 %!error rgbplot ()
 %!error rgbplot (1,2)
 %!error <CMAP must be a valid colormap> rgbplot ({0 1 0})
 
