# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1548615205 28800
#      Sun Jan 27 10:53:25 2019 -0800
# Branch stable
# Node ID c18e59476795ddb3a76078d115d7945175fc2df6
# Parent  e2e1aed33f7c36f3f9d1dde628608ebed475eed3
file id must not be single for textscan and other file I/O funcs (bug #55577)

* oct-stream.cc (stream_list::get_info): Error if file id is single precision.
(stream_list::get_file_number): Likewise.
* file-io.cc: Ensure textscan input validation error is tested.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -2273,18 +2273,18 @@ as the name of the function when reporti
 %! assert (A{1}, [d(1); d(3)], 1e-6);
 %! assert (A{2}, [d(2); d(4)], 1e-6);
 %! assert (E);
 #endif
 
 /*
 ## Test input validation
 %!error textscan ()
-%!error textscan (single (40))
-%!error textscan ({40})
+%!error <file id must be> textscan (single (4))
+%!error <file id must be> textscan ({4})
 %!error <must be a string> textscan ("Hello World", 2)
 %!error <at most one character or>
 %! textscan ("Hello World", "%s", "EndOfLine", 3);
 %!error <'%z' is not a valid format specifier> textscan ("1.0", "%z")
 %!error <no valid format conversion specifiers> textscan ("1.0", "foo")
 */
 
 static octave_value
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -7498,16 +7498,19 @@ namespace octave
 
     return retval;
   }
 
   string_vector stream_list::get_info (const octave_value& fid) const
   {
     int conv_err = 0;
 
+    if (fid.is_single_type ())
+      ::error ("file id must be a file object or integer value");
+
     int int_fid = convert_to_valid_int (fid, conv_err);
 
     if (conv_err)
       ::error ("file id must be a file object or integer value");
 
     return get_info (int_fid);
   }
 
@@ -7579,16 +7582,18 @@ namespace octave
                 if (os && os.name () == nm)
                   {
                     retval = fid_strm.first;
                     break;
                   }
               }
           }
       }
+    else if (fid.is_single_type ())
+      ::error ("file id must be a file object, std::string, or integer value");
     else
       {
         int conv_err = 0;
 
         int int_fid = convert_to_valid_int (fid, conv_err);
 
         if (conv_err)
           ::error ("file id must be a file object, std::string, or integer value");
