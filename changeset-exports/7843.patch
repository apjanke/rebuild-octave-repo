# HG changeset patch
# User Shai Ayal <shaiay@users.sourceforge.net>
# Date 1203969037 -7200
#      Mon Feb 25 21:50:37 2008 +0200
# Node ID d3dcfdfdc43457be6b6025fc6c59e94e7fbc8907
# Parent  1357bcae6e29a95fc1d71d0e623c2352398c77be
handle unsorted limits when calculatin gticks and limits

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2008-06-04  Shai Ayal  <shaiay@users.sourceforge.net>
 
+	* graphics.cc (axes::properties::calc_ticks_and_lims): Make sure
+	that lo <= hi.
+
 	* graphics.h.in (axes::pixel2coord, axes::coord2pixel): New functions.
 
 	* graphics.cc (convert_position): No longer static.
 	* graphics.h.in: Provide decl.
 
  	* graphics.cc (Favailable_backends): New function.
   	* graphics.h.in (base_graphics_backend::available_backends_list):
 	New function.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -2602,16 +2602,23 @@ axes::properties::calc_ticks_and_lims (a
 
   // FIXME -- add log ticks and lims
 
   if (lims.get ().is_empty ())
     return;
 
   double lo = (lims.get ().matrix_value ()) (0);
   double hi = (lims.get ().matrix_value ()) (1);
+  // FIXME should this be checked for somewhere else? (i.e. set{x,y,z}lim)
+  if (hi < lo) 
+    {
+      double tmp = hi;
+      hi = lo;
+      lo = tmp;
+    }
   
   double tick_sep = calc_tick_sep (lo , hi);
 
   int i1 = static_cast<int> (std::floor (lo / tick_sep));
   int i2 = static_cast<int> (std::ceil (hi / tick_sep));
 
   if (limmode_is_auto)
     {
