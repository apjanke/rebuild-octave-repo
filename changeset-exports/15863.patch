# HG changeset patch
# User Rik <rik@octave.org>
# Date 1356726071 28800
#      Fri Dec 28 12:21:11 2012 -0800
# Node ID b316429bfa8920c3298d2e4bf22835ca3224f36d
# Parent  98902367c78108a692ab81fd4f1c0392486e4bcb
build: Use $host_os variable to clarify configure.ac

* configure.ac: Use $host_os instead of $canonical_host_type when
operating system is being tested.

* m4/acinclude.m4(OCTAVE_HOST_TYPE): Rename macro to OCTAVE_CANONICAL_HOST to
be similar to Autoconf macro of same purpose.  Guarantee that $host, $host_cpu,
$host_vendor, and $host_os all have a value.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -38,17 +38,17 @@ dnl        AC_REVISION field whenever co
 dnl AC_REVISION($Revision: 1.603 $)
 AC_CONFIG_SRCDIR([libinterp/octave.cc])
 AC_CONFIG_HEADERS([config.h])
 AC_CONFIG_AUX_DIR([build-aux])
 AC_CONFIG_MACRO_DIR([m4])
 
 AM_INIT_AUTOMAKE([1.11 tar-ustar])
 
-OCTAVE_HOST_TYPE
+OCTAVE_CANONICAL_HOST
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define to 1 if this is Octave.])
   
 AC_USE_SYSTEM_EXTENSIONS
 
 ### Make configure args available for other uses.
 
 config_opts=$ac_configure_args
@@ -130,18 +130,18 @@ OCTAVE_PROG_PYTHON
 ### Path separator.
 
 sepchar=':'
 AC_ARG_WITH([sepchar],
   [AS_HELP_STRING([--with-sepchar=<char>],
     [use <char> as the path separation character])])
 case $with_sepchar in
   yes | "")
-    case $canonical_host_type in
-      *-*-mingw* | *-*-msdosmsvc)
+    case $host_os in
+      mingw* | msdosmsvc)
         sepchar=';' ;;
     esac
     ;;
   no)
     AC_MSG_ERROR([You are required to define a path separation character])
     ;;
   *)
     sepchar=$with_sepchar
@@ -300,21 +300,21 @@ AC_SUBST(CXX_VERSION)
 ### Determine which C compiler to use (we expect to find gcc).
 
 AC_PROG_CC
 AC_PROG_CPP
 AC_PROG_GCC_TRADITIONAL
 
 ## Check for MSVC
 have_msvc=no
-case $canonical_host_type in
-  *-*-msdosmsvc)
+case $host_os in
+  msdosmsvc)
     have_msvc=yes
   ;;
-  *-*-mingw*)
+  mingw*)
     AC_MSG_CHECKING([for MSVC compiler])
     AC_PREPROC_IFELSE([AC_LANG_SOURCE([[
         #ifndef _MSC_VER
         #error "Not MSVC compiler"
         #endif
         ]])],
       have_msvc=yes, have_msvc=no)
     AC_MSG_RESULT([$have_msvc])
@@ -465,21 +465,21 @@ AC_SUBST(XTRA_CXXFLAGS)
 ### it by default.  Enable it with the flag --enable-openmp.
 
 USE_OPENMP=false
 AC_ARG_ENABLE([openmp],
   [AS_HELP_STRING([--enable-openmp],
     [(EXPERIMENTAL) use OpenMP SMP multi-threading])],
   [if test "$enableval" = yes; then USE_OPENMP=true; fi], [])
 if $USE_OPENMP; then
-  case $canonical_host_type in
-    *-*-mingw* | *-*-cygwin* | *-*-gnu*)
+  case $host_os in
+    mingw* | cygwin* | *-gnu*)
       OCTAVE_CHECK_OPENMP(-fopenmp)
     ;;
-    *-*-msdosmsvc)
+    msdosmsvc)
       ## FIXME: is this the right flag for MSVC?
       OCTAVE_CHECK_OPENMP(-openmp)
     ;;
     ## Add other compilers supporting OpenMP here
   esac
 fi
 
 ### Defaults for cross compiling.  BUILD_CC and BUILD_CXX are
@@ -517,18 +517,18 @@ AC_ARG_VAR([BUILD_EXEEXT],
   [build system executable extension (used if cross compiling)])
 
 dnl This is bogus.  We shouldn't have to explicitly add libc too!
 dnl Keep this check before the check for the Fortran compiler,
 dnl in case -lm is needed to compile Fortran programs.
 
 ### Look for math library.  If found, this will add -lm to LIBS.
 
-case $canonical_host_type in
-  *-*-linux*)
+case $host_os in
+  linux*)
     AC_CHECK_LIB(m, sin, , , -lc)
   ;;
   *)
     AC_CHECK_LIB(m, sin)
   ;;
 esac
 
 ### Determine the Fortran compiler and how to invoke it
@@ -1077,18 +1077,18 @@ if test -n "$OPENGL_LIBS"; then
   if test "$FLTK_CONFIG" = no; then
     native_graphics=false
     warn_fltk_config="FLTK config script not found.  Native graphics will be disabled."
     OCTAVE_CONFIGURE_WARNING([warn_fltk_config])
   else
     FLTK_CFLAGS=`$FLTK_CONFIG $fltkconf_args --use-gl --cflags`
     FLTK_LDFLAGS=`$FLTK_CONFIG $fltkconf_args --use-gl --ldflags`
 
-    case $canonical_host_type in
-      *-*-mingw*)
+    case $host_os in
+      mingw*)
         FLTK_LDFLAGS=`echo $FLTK_LDFLAGS | sed -e 's/-mwindows//g'`
       ;;
     esac
 
     AC_CACHE_CHECK([for OpenGL support in FLTK],
       [octave_cv_fltk_opengl_support],
       [save_CFLAGS="$CFLAGS"
       CFLAGS="$CFLAGS $FLTK_CFLAGS"
@@ -1188,18 +1188,18 @@ if test $ax_blas_f77_func_ok = no; then
     FFLAGS="$save_FFLAGS"
   else
     FFLAGS="-ff2c $save_FFLAGS"
   fi
 fi
 
 ## On OSX, try again with a wrapper library (without -ff2c!)
 if test $ax_blas_f77_func_ok = no; then
-  case $canonical_host_type in
-    *-*-darwin*)
+  case $host_os in
+    darwin*)
       ## test if wrapper functions help
       octave_blaswrap_save_CFLAGS="$CFLAGS"
       CFLAGS="$CFLAGS -DUSE_BLASWRAP"
       AC_LANG_PUSH(C)
       AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
           #include "liboctave/cruft/misc/blaswrap.c"
         ]])],
         [mv conftest.$ac_objext blaswrap.$ac_objext
@@ -1819,27 +1819,27 @@ AC_SUBST(LD_CXX)
 AC_SUBST(RDYNAMIC_FLAG)
 AC_SUBST(ENABLE_DYNAMIC_LINKING)
 AC_SUBST(LIBOCTINTERP)
 AC_SUBST(LIBOCTAVE)
 
 ### Check for existence of various libraries
 
 ## OS-specific test for dirent, opendir.
-case $canonical_host_type in
-  *-*-mingw*)
+case $host_os in
+  mingw*)
     if test $have_msvc = yes; then
       AC_CHECK_LIB([dirent], [opendir])
       LIBS="$LIBS -ladvapi32 -lgdi32 -lws2_32 -luser32 -lkernel32"
     else
       LIBS="$LIBS -lgdi32 -lws2_32 -luser32 -lkernel32"
     fi
     LIBS="$LIBS -lgdi32 -lws2_32 -luser32 -lkernel32"
   ;;
-  *-*-msdosmsvc*)
+  msdosmsvc)
     AC_CHECK_LIB([dirent], [opendir])
     LIBS="$LIBS -ladvapi32 -lgdi32 -lws2_32 -luser32 -lkernel32"
   ;;
 esac
 
 ## Find a termlib to use.
 OCTAVE_CHECK_LIB_TERMLIB
 
@@ -2077,44 +2077,44 @@ fi
 if test $octave_cv_header_math_defines = yes; then
   AC_DEFINE(HAVE_MATH_DEFINES, 1,
     [Define to 1 if defines such as M_PI are available in math.h])
 else
   AC_MSG_ERROR([MATH DEFINES in math.h such as M_PI are required to build Octave])
 fi
 
 ## Windows-specific tests for extra #defines
-case $canonical_host_type in
-  *-*-msdosmsvc | *-*-mingw*)
+case $host_os in
+  msdosmsvc | mingw*)
     AC_MSG_CHECKING([for required _WIN32_WINNT])
     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
         #include <windows.h>
         #if _WIN32_WINNT < 0x0403
         #error "Wrong version"
         #endif
         ]], [])],
       [AC_MSG_RESULT([none])],
       [AC_DEFINE(_WIN32_WINNT, 0x0403,
         [Define to 0x0403 to access InitializeCriticalSectionAndSpinCount.])
        AC_MSG_RESULT([0x0403])])
   ;;
 esac
 
 ## Windows-specific use of functions
-case $canonical_host_type in
-  *-*-mingw* | *-*-msdosmsvc*)
+case $host_os in
+  msdosmsvc | mingw*)
     AC_CHECK_FUNCS([setvbuf], [],
                    [AC_MSG_ERROR([Missing function required to build Octave])])
     ;;
 esac
 
 ## Cygwin kluge for getrusage.
 AC_CHECK_FUNCS([getrusage])
-case $canonical_host_type in
-  *-*-cygwin*)
+case $host_os in
+  cygwin*)
     AC_DEFINE(RUSAGE_TIMES_ONLY, 1,
       [Define to 1 if your struct rusage only has time information.])
   ;;
 esac
 
 ## Check for CGDisplayBitsPerPixel function on Mac OSX systems with Carbon
 if test $have_framework_carbon = yes; then
   OCTAVE_CARBON_CGDISPLAYBITSPERPIXEL
@@ -2286,18 +2286,18 @@ do
 
   if test -z "$JAVA_HOME"; then
     ## Find JAVA_HOME for JRE by running java and querying properties.
     JAVA_TMP_HOME=`"$JAVA" -classpath ${srcdir}/build-aux OctJavaQry JAVA_HOME`
     ## Strip directory back to top-level installation dir (JAVA_HOME for JDK).
     JAVA_HOME=`echo $JAVA_TMP_HOME | sed -e 's|[[/\\]]bin[[/\\]]\?$||' | sed -e 's|[[/\\]]jre[[/\\]]\?$||'`
   fi
 
-  case $canonical_host_type in
-    *-mingw* | *-msdosmsvc*)
+  case $host_os in
+    mingw* | msdosmsvc)
       ## Under Win32 platform, we want JAVA_HOME to be in MSYS format, that is
       ## without colon and backslashes, as it is also used as path separator.
       ## Use quoted paths as Java may be installed in a path with whitespaces
       ## (e.g. C:\Program Files\Java\...).
       if test -n "$JAVA_HOME"; then
         JAVA_HOME=`cd "$JAVA_HOME" && pwd`
         ## Maybe this will be useful in the future, as native Java won't
         ## understand MSYS paths.
@@ -2335,41 +2335,41 @@ do
   else
     AC_MSG_WARN([Java version is too old (< 1.5).  Octave will not be able to call Java methods.])
     break
   fi
 
   ## At this point Win32/MSVC systems have enough configuration data.  We
   ## assume that all appropriate variables (e.g. INCLUDE and LIB) already have
   ## the required paths to compile and link against JDK.
-  case $canonical_host_type in
-    *-msdosmsvc*)
+  case $host_os in
+    msdosmsvc)
       build_java=true
       JAVA_LIBS=-ladvapi32
       AC_DEFINE(HAVE_JAVA, 1,
         [Define to 1 if Java is available and is at least version 1.5])
       break
     ;;
-    *-mingw*)
+    mingw*)
       if test $have_msvc = yes; then
         build_java=true
         JAVA_LIBS=-ladvapi32
         AC_DEFINE(HAVE_JAVA, 1,
           [Define to 1 if Java is available and is at least version 1.5])
         break
       fi
     ;;
   esac
 
   ## Determine which library file name to search for.
-  case $canonical_host_type in
-    *-darwin*)
+  case $host_os in
+    darwin*)
       jvmlib=libjvm.dylib
     ;;
-    *-mingw* | *-cygwin*)
+    mingw* | cygwin*)
       jvmlib=jvm.dll
     ;;
     *)
       jvmlib=libjvm.so
     ;;
   esac
 
   AC_MSG_CHECKING([for $jvmlib])
@@ -2429,31 +2429,31 @@ do
     break
   else
     AC_MSG_RESULT([$JAVA_LDPATH])
   fi
 
   AC_MSG_CHECKING([for include file <jni.h>])
 
   ## Java and JVM found.  Set up flags.
-  case $canonical_host_type in
-    *-darwin*)
+  case $host_os in
+    darwin*)
       ## Sneak the -framework flag into mkoctfile via LFLAGS
       LFLAGS="$LFLAGS -framework JavaVM"
       ## According to: http://developer.apple.com/unix/crossplatform.html
       ## one must explicitly set the include path.
       ## Unfortunately, the include path keeps moving around.
       if test -n "$JAVA_CPPFLAGS"; then
         JAVA_CPPFLAGS="-I${JAVA_CPPFLAGS}"
       else
         JAVA_CPPFLAGS="-I${JAVA_HOME}/include -I/System/Library/Frameworks/JavaVM.framework/Home/include -I/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Headers -I/System/Library/Frameworks/JavaVM.framework/Versions/Current/Headers"
       fi
       JAVA_LIBS="-framework JavaVM"
     ;;
-    *-mingw* | *-cygwin*)
+    mingw* | cygwin*)
       if test -n "$JAVA_CPPFLAGS"; then
         JAVA_CPPFLAGS="-I${JAVA_CPPFLAGS}/include -I${JAVA_CPPFLAGS}/include/win32"
       else
         JAVA_CPPFLAGS="-I${JAVA_HOME}/include -I${JAVA_HOME}/include/win32"
       fi
       JAVA_LIBS=-ladvapi32
     ;;
     *)
@@ -2564,18 +2564,18 @@ if test $build_gui = true; then
 
   ## Check for Qt functions which have changed their API over time
   OCTAVE_CHECK_FUNC_FINDFIRST_MODERN
   OCTAVE_CHECK_FUNC_SETPLACEHOLDERTEXT
 
   AC_CHECK_FUNCS([setlocale], [],
                  [AC_MSG_ERROR([Missing function required to build GUI])])
 
-  case $canonical_host_type in
-    *-*-mingw* | *-*-msdosmsvc*)
+  case $host_os in
+    mingw* | msdosmsvc)
       win32_terminal=yes
       AC_CHECK_FUNCS([setvbuf], [],
                      [AC_MSG_ERROR([Missing function required to build GUI])])
       ;;
     *)
       AC_CHECK_HEADERS([pty.h libutil.h util.h])
       AC_SEARCH_LIBS([openpty], [util],
         [AC_DEFINE(HAVE_OPENPTY, [], [Define whether openpty exists])])
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -1271,29 +1271,33 @@ AC_DEFUN([OCTAVE_HAVE_FRAMEWORK], [
   else
     AC_MSG_RESULT([no])
     [$5]
   fi
 ])
 dnl
 dnl Figure out the hardware-vendor-os info.
 dnl
-dnl Hanging '])' in AC_MSG_WARN is for adding newline to output
-dnl
-AC_DEFUN([OCTAVE_HOST_TYPE], [
+AC_DEFUN([OCTAVE_CANONICAL_HOST], [
   AC_CANONICAL_HOST
   if test -z "$host"; then
-    host=unknown
+    host=unknown-unknown-unknown
+    AC_MSG_WARN([configuring Octave for unknown system type])
   fi
   canonical_host_type=$host
-  if test "$host" = unknown; then
-    AC_MSG_WARN([configuring Octave for unknown system type
-])
+  AC_SUBST(canonical_host_type)
+  if test -z "$host_cpu"; then
+    host_cpu=unknown
   fi
-  AC_SUBST(canonical_host_type)
+  if test -z "$host_vendor"; then
+    host_vendor=unknown
+  fi
+  if test -z "$host_os"; then
+    host_os=unknown
+  fi
 ])
 dnl
 dnl Check for IEEE 754 data format.
 dnl
 AC_DEFUN([OCTAVE_IEEE754_DATA_FORMAT], [
   AC_MSG_CHECKING([for IEEE 754 data format])
   AC_CACHE_VAL([octave_cv_ieee754_data_format],
     [AC_RUN_IFELSE([AC_LANG_SOURCE([[
