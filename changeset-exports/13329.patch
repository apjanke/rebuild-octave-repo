# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1318436307 14400
#      Wed Oct 12 12:18:27 2011 -0400
# Node ID 80f7564a38496bba0268292f97e36c79a3be7f63
# Parent  a2144dbc2f3a0efb2ae42cc6241856dbb78d4397
handle class objects in num2cell

* cellfun.cc (Fnum2cell): Also handle class objects.
* test_classes.m: New tests.

diff --git a/src/DLD-FUNCTIONS/cellfun.cc b/src/DLD-FUNCTIONS/cellfun.cc
--- a/src/DLD-FUNCTIONS/cellfun.cc
+++ b/src/DLD-FUNCTIONS/cellfun.cc
@@ -40,16 +40,17 @@ along with Octave; see the file COPYING.
 #include "defun-dld.h"
 #include "parse.h"
 #include "variables.h"
 #include "ov-colon.h"
 #include "unwind-prot.h"
 #include "gripes.h"
 #include "utils.h"
 
+#include "ov-class.h"
 #include "ov-scalar.h"
 #include "ov-float.h"
 #include "ov-complex.h"
 #include "ov-flt-complex.h"
 #include "ov-bool.h"
 #include "ov-int8.h"
 #include "ov-int16.h"
 #include "ov-int32.h"
@@ -1795,20 +1796,36 @@ num2cell([1,2;3,4],1)\n\
           else
             {
               if (array.is_single_type ())
                 retval = do_num2cell (array.float_array_value (), dimv);
               else
                 retval = do_num2cell (array.array_value (), dimv);
             }
         }
-      else if (array.is_map ())
-        retval = do_num2cell (array.map_value (), dimv);
+      else if (array.is_map () || array.is_object ())
+        {
+          Cell tmp = do_num2cell (array.map_value (), dimv);
+
+          if (array.is_object ())
+            {
+              std::string cname = array.class_name ();
+              std::list<std::string> parents = array.parent_class_name_list ();
+
+              for (octave_idx_type i = 0; i < tmp.numel (); i++)
+                tmp(i) = octave_value (new octave_class (tmp(i).map_value (),
+                                                         cname, parents));
+            }
+
+          retval = tmp;
+        }
       else if (array.is_cell ())
         retval = do_num2cell (array.cell_value (), dimv);
+      else if (array.is_object ())
+        retval = do_num2cell (array.cell_value (), dimv);
       else
         gripe_wrong_type_arg ("num2cell", array);
     }
 
   return retval;
 }
 
 /*
diff --git a/test/classes/test_classes.m b/test/classes/test_classes.m
--- a/test/classes/test_classes.m
+++ b/test/classes/test_classes.m
@@ -194,8 +194,19 @@
 %!  assert(class(cork(grk)),'Cork')
 %!  assert(class(grk),'Gork')
 %!  assert(isa(grk,'Gork'))
 %!  assert(isa(grk,'Dork'))
 %!  assert(isa(grk,'Pork'))
 %!  assert(isa(grk,'Blork'))
 %!  assert(isa(grk,'Snork'))
 %!  assert(isa(grk,'Spork'))
+
+%!test
+%! d = Dork ();
+%! x = [d,d];
+%! assert (size (x), [1, 2])
+%! assert (class (x), "Dork")
+
+%!test
+%! d = Dork ();
+%! x = [d,d];
+%! assert (num2cell (x), {d, d});
