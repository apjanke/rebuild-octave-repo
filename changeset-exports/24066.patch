# HG changeset patch
# User Rik <rik@octave.org>
# Date 1505953430 25200
#      Wed Sep 20 17:23:50 2017 -0700
# Node ID d9b0d8ae734f6a074cdf7d6b0849b861a4af5c17
# Parent  34506e4e3b048162861fac284370b3a693ce3854
Update tolerances in BIST tests for quad functions.

* quadgk.m: Use 1e-10 for absolute tolerances or -1e-6 for relative tolerances
in assert statements.

* quadl.m: Print a warning when Octave overrides users specified tolerance with
eps.  Use 1e-6 for absolute tolerances.  Add new BIST test.

* quadv.m: Set default value of "trace" input to false in function prototype.
Ues 1e-6 for absolute tolerances.  Add new BIST test.

diff --git a/scripts/general/quadgk.m b/scripts/general/quadgk.m
--- a/scripts/general/quadgk.m
+++ b/scripts/general/quadgk.m
@@ -454,34 +454,36 @@ endfunction
 
 function t = __quadgk_finite_waypoint__ (x, a, b)
   c = (-4 .* x + 2.* (b + a)) ./ (b - a);
   k = ((sqrt (c .^ 2 - 4) + c) ./ 2) .^ (1/3);
   t = real ((sqrt(3) .* 1i * (1 - k .^ 2) - (1 + k .^ 2)) ./ 2 ./ k);
 endfunction
 
 
-%!assert (quadgk (@sin,-pi,pi), 0, 1e-6)
-%!assert (quadgk (inline ("sin"),-pi,pi), 0, 1e-6)
-%!assert (quadgk ("sin",-pi,pi), 0, 1e-6)
-%!assert (quadgk (@sin,-pi,pi, "waypoints", 0, "MaxIntervalCount", 100, "reltol", 1e-3, "abstol", 1e-6, "trace", false), 0, 1e-6)
-%!assert (quadgk (@sin,-pi,pi, 1e-6,false), 0, 1e-6)
+%!assert (quadgk (@sin,-pi,pi), 0, 1e-10)
+%!assert (quadgk (inline ("sin"),-pi,pi), 0, 1e-10)
+%!assert (quadgk ("sin",-pi,pi), 0, 1e-10)
+%!assert (quadgk (@sin,-pi,pi, "WayPoints", 0, "MaxIntervalCount", 100,
+%!                "RelTol", 1e-3, "AbsTol", 1e-6, "trace", false), 0, 1e-6)
+%!assert (quadgk (@sin,-pi,pi, 1e-6, false), 0, 1e-6)
 %!assert <51867> (quadgk (@(x) x, 0, 0), 0, 0)
 
-%!assert (quadgk (@sin,-pi,0), -2, 1e-6)
-%!assert (quadgk (@sin,0,pi), 2, 1e-6)
-%!assert (quadgk (@(x) 1./sqrt (x),0,1), 2, 1e-6)
-%!assert (quadgk (@(x) abs (1 - x.^2),0,2, "Waypoints", 1), 2, 1e-6)
-%!assert (quadgk (@(x) 1./(sqrt (x) .* (x+1)),0,Inf), pi, 1e-6)
-%!assert (quadgk (@(z) log (z),1+1i,1+1i, "WayPoints", [1-1i, -1,-1i, -1+1i]), -pi * 1i, 1e-6)
-%!assert (quadgk (@(x) exp (-x .^ 2),-Inf,Inf), sqrt (pi), 1e-6)
-%!assert (quadgk (@(x) exp (-x .^ 2),-Inf,0), sqrt (pi)/2, 1e-6)
+%!assert (quadgk (@sin,-pi,0), -2, 1e-10)
+%!assert (quadgk (@sin,0,pi), 2, 1e-10)
+%!assert (quadgk (@(x) 1./sqrt (x),0,1), 2, 1e-10)
+%!assert (quadgk (@(x) abs (1 - x.^2),0,2, "Waypoints", 1), 2, 1e-10)
+%!assert (quadgk (@(x) 1./(sqrt (x) .* (x+1)),0,Inf), pi, 1e-10)
+%!assert (quadgk (@(z) log (z),1+1i,1+1i, "WayPoints", [1-1i, -1,-1i, -1+1i]),
+%!        -pi * 1i, 1e-10)
+%!assert (quadgk (@(x) exp (-x .^ 2),-Inf,Inf), sqrt (pi), -1e-6)
+%!assert (quadgk (@(x) exp (-x .^ 2),-Inf,0), sqrt (pi)/2, -1e-6)
 %!test
 %! f = @(x) x .^ 5 .* exp (-x) .* sin (x);
-%! assert (quadgk (f, 0, inf, "RelTol", 1e-8, "AbsTol", 1e-12), -15, 2e-12);
+%! assert (quadgk (f, 0, inf, "RelTol", 1e-8, "AbsTol", 1e-12), -15, -1e-8);
 
 ## Test input validation
 %!error quadgk (@sin)
 %!error quadgk (@sin, 0)
 %!error <can not pass additional arguments> quadgk (@sin, 0, 1, 1e-6, true, 4)
 %!error <options must occur in pairs> quadgk (@sin, 0, 1, "DummyArg")
 %!error <PROP must be a string> quadgk (@sin, 0, 1, "AbsTol", 1e-6, 2, 3)
 %!error <unknown property 'foo'> quadgk (@sin, 0, 1, "foo", 3)
diff --git a/scripts/general/quadl.m b/scripts/general/quadl.m
--- a/scripts/general/quadl.m
+++ b/scripts/general/quadl.m
@@ -75,16 +75,18 @@ function [q, nfun] = quadl (f, a, b, tol
   else
     eps = eps ("double");
   endif
   if (isempty (tol))
     tol = 1e-6;
   elseif (! isscalar (tol) || tol < 0)
     error ("quadl: TOL must be a scalar >=0");
   elseif (tol < eps)
+    warning ("quadl: TOL specified is smaller than machine precision, using %g",
+                                                                           tol);
     tol = eps;
   endif
   if (isempty (trace))
     trace = false;
   endif
 
   y = feval (f, [a, b], varargin{:});
   nfun = 1;
@@ -161,31 +163,32 @@ function [q, nfun, hmin] = adaptlobstp (
                                       tol, trace, varargin{:});
     q = sum (q);
   endif
 
 endfunction
 
 
 ## basic functionality
-%!assert (quadl (@(x) sin (x), 0, pi), 2, 5e-15)
+%!assert (quadl (@(x) sin (x), 0, pi), 2, 1e-6)
 
 ## the values here are very high so it may be unavoidable that this fails
 %!assert (quadl (@(x) sin (3*x).*cosh (x).*sinh (x),10,15, 1e-3),
 %!        2.588424538641647e+10, 1e-3)
 
 ## extra parameters
 %!assert (quadl (@(x,a,b) sin (a + b*x), 0, 1, [], [], 2, 3),
-%!        cos(2)/3 - cos(5)/3, 1e-15)
+%!        cos(2)/3 - cos(5)/3, 1e-6)
 
 ## test different tolerances.
 %!test
 %! [q, nfun1] = quadl (@(x) sin (2 + 3*x).^2, 0, 10, 0.5, []);
 %! assert (q, (60 + sin(4) - sin(64))/12, 0.5);
 %! [q, nfun2] = quadl (@(x) sin (2 + 3*x).^2, 0, 10, 0.1, []);
 %! assert (q, (60 + sin(4) - sin(64))/12, 0.1);
 %! assert (nfun2 > nfun1);
 
 ## Test input validation
 %!error quadl ()
 %!error quadl (@sin)
 %!error quadl (@sin,1)
-%!error <TOL must be a scalar> quadl (@sin, 0, 1, ones (2,2))
+%!error <TOL must be a scalar> quadl (@sin,0,1, ones (2,2))
+%!error <TOL must be .* .=0> quadl (@sin,0,1, -1)
diff --git a/scripts/general/quadv.m b/scripts/general/quadv.m
--- a/scripts/general/quadv.m
+++ b/scripts/general/quadv.m
@@ -55,35 +55,32 @@
 ## evaluations performed.
 ##
 ## Note: @code{quadv} is written in Octave's scripting language and can be
 ## used recursively in @code{dblquad} and @code{triplequad}, unlike the
 ## @code{quad} function.
 ## @seealso{quad, quadl, quadgk, quadcc, trapz, dblquad, triplequad}
 ## @end deftypefn
 
-function [q, nfun] = quadv (f, a, b, tol = [], trace = [], varargin)
+function [q, nfun] = quadv (f, a, b, tol = [], trace = false, varargin)
 
   if (nargin < 3)
     print_usage ();
   endif
 
   if (isa (a, "single") || isa (b, "single"))
     eps = eps ("single");
   else
     eps = eps ("double");
   endif
   if (isempty (tol))
     tol = 1e-6;
   elseif (! isscalar (tol) || tol < 0)
     error ("quadv: TOL must be a scalar >=0");
   endif
-  if (isempty (trace))
-    trace = false;
-  endif
 
   ## Split the interval into 3 abscissa, and apply a 3-point Simpson's rule
   c = (a + b) / 2;
   fa = feval (f, a, varargin{:});
   fc = feval (f, c, varargin{:});
   fb = feval (f, b, varargin{:});
   nfun = 3;
 
@@ -145,30 +142,31 @@ function [q, nfun, hmin] = simpsonstp (f
                                      tol, trace, varargin{:});
       q = q1 + q2;
     endif
   endif
 
 endfunction
 
 
-%!assert (quadv (@sin, 0, 2*pi), 0, 1e-5)
-%!assert (quadv (@sin, 0, pi), 2, 1e-5)
+%!assert (quadv (@sin, 0, 2*pi), 0, 1e-6)
+%!assert (quadv (@sin, 0, pi), 2, 1e-6)
 
 ## Test weak singularities at the edge
 %!test
 %! warning ("off", "Octave:divide-by-zero", "local");
-%! assert (quadv (@(x) 1 ./ sqrt (x), 0, 1), 2, 1e-5);
+%! assert (quadv (@(x) 1 ./ sqrt (x), 0, 1), 2, 2e-6);
 
 ## Test vector-valued functions
-%!assert (quadv (@(x) [(sin (x)), (sin (2 * x))], 0, pi), [2, 0], 1e-5)
+%!assert (quadv (@(x) [(sin (x)), (sin (2 * x))], 0, pi), [2, 0], 1e-6)
 
 ## Test matrix-valued functions
 %!test
 %! warning ("off", "Octave:divide-by-zero", "local");
-%! assert (quadv (@(x) [ x, x, x; x, 1./sqrt(x), x; x, x, x ], 0, 1),
-%!         [0.5, 0.5, 0.5; 0.5, 2, 0.5; 0.5, 0.5, 0.5], 1e-5);
+%! assert (quadv (@(x) [ x,x,x; x,1./sqrt(x),x; x,x,x ], 0, 1),
+%!         [0.5,0.5,0.5; 0.5,2,0.5; 0.5,0.5,0.5], 2e-6);
 
 ## Test input validation
 %!error quadv ()
 %!error quadv (@sin)
 %!error quadv (@sin,1)
 %!error <TOL must be a scalar> quadv (@sin,0,1, ones (2,2))
+%!error <TOL must be .* .=0> quadv (@sin,0,1, -1)
