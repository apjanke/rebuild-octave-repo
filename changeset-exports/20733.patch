# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1448231908 18000
#      Sun Nov 22 17:38:28 2015 -0500
# Node ID c6464d78da6916dd32be2a7878e741649808bf8a
# Parent  771d9fab5c24af6b67423d51420bea5ba07b77ff
eliminate error_state from generated code

* mk-opts.pl, genprops.awk: Eliminate error_state from generated code.

diff --git a/build-aux/mk-opts.pl b/build-aux/mk-opts.pl
--- a/build-aux/mk-opts.pl
+++ b/build-aux/mk-opts.pl
@@ -747,54 +747,47 @@ set_$CLASS_NAME (const std::string& keyw
 
       print "  $iftok (keyword_almost_match (list[$i].kw_tok, list[$i].min_len,
            keyword, list[$i].min_toks_to_match, MAX_TOKENS))
     {\n";
 
       if ($TYPE[$i] eq "double")
         {
           print "      double tmp = val.double_value ();\n\n";
-          print "      if (! error_state)
-        $STATIC_OBJECT_NAME.set_$OPT[$i] (tmp);\n";
+          print "      $STATIC_OBJECT_NAME.set_$OPT[$i] (tmp);\n";
         }
       elsif ($TYPE[$i] eq "float")
         {
           print "      float tmp = val.float_value ();\n\n";
-          print "      if (! error_state)
-        $STATIC_OBJECT_NAME.set_$OPT[$i] (tmp);\n";
+          print "      $STATIC_OBJECT_NAME.set_$OPT[$i] (tmp);\n";
         }
       elsif ($TYPE[$i] eq "int" or $TYPE[$i] eq "octave_idx_type")
         {
           print "      int tmp = val.int_value ();\n\n";
-          print "      if (! error_state)
-        $STATIC_OBJECT_NAME.set_$OPT[$i] (tmp);\n";
+          print "      $STATIC_OBJECT_NAME.set_$OPT[$i] (tmp);\n";
         }
       elsif ($TYPE[$i] eq "std::string")
         {
           print "      std::string tmp = val.string_value ();\n\n";
-          print "      if (! error_state)
-        $STATIC_OBJECT_NAME.set_$OPT[$i] (tmp);\n";
+          print "      $STATIC_OBJECT_NAME.set_$OPT[$i] (tmp);\n";
         }
       elsif ($TYPE[$i] eq "Array<int>" or $TYPE[$i] eq "Array<octave_idx_type>")
         {
           print "      Array<int> tmp = val.int_vector_value ();\n\n";
-          print "      if (! error_state)
-        $STATIC_OBJECT_NAME.set_$OPT[$i] (tmp);\n";
+          print "      $STATIC_OBJECT_NAME.set_$OPT[$i] (tmp);\n";
         }
       elsif ($TYPE[$i] eq "Array<double>")
         {
           print "      Array<double> tmp = val.vector_value ();\n\n";
-          print "      if (! error_state)
-        $STATIC_OBJECT_NAME.set_$OPT[$i] (tmp);\n";
+          print "      $STATIC_OBJECT_NAME.set_$OPT[$i] (tmp);\n";
         }
       elsif ($TYPE[$i] eq "Array<float>")
         {
           print "      Array<float> tmp = val.float_vector_value ();\n\n";
-          print "      if (! error_state)
-        $STATIC_OBJECT_NAME.set_$OPT[$i] (tmp);\n";
+          print "      $STATIC_OBJECT_NAME.set_$OPT[$i] (tmp);\n";
         }
       else
         {
           die ("unknown type $TYPE[$i]");
         }
 
       print "    }\n";
     }
@@ -940,27 +933,22 @@ Options include\\n\\
   int nargin = args.length ();
 
   if (nargin == 0)
     {
       print_$CLASS_NAME (octave_stdout);
     }
   else if (nargin == 1 || nargin == 2)
     {
-      std::string keyword = args(0).string_value ();
+      std::string keyword = args(0).xstring_value ("$OPT_FCN_NAME: expecting keyword as first argument");
 
-      if (! error_state)
-        {
-          if (nargin == 1)
-            retval = show_$CLASS_NAME (keyword);
-          else
-            set_$CLASS_NAME (keyword, args(1));
-        }
+      if (nargin == 1)
+        retval = show_$CLASS_NAME (keyword);
       else
-        error ("$OPT_FCN_NAME: expecting keyword as first argument");
+        set_$CLASS_NAME (keyword, args(1));
     }
   else
     print_usage ();
 
   return retval;
 }
 _END_EMIT_OPTIONS_FUNCTION_BODY_
 
diff --git a/libinterp/genprops.awk b/libinterp/genprops.awk
--- a/libinterp/genprops.awk
+++ b/libinterp/genprops.awk
@@ -40,18 +40,17 @@
 ##   get_NAME (void) const
 ##   {
 ##     return NAME;
 ##   }
 ##
 ##   void
 ##   set_NAME (const TYPE& val)
 ##   {
-##     if (! error_state)
-##       NAME = val;
+##     NAME = val;
 ##   }
 ##
 ##   void
 ##   set_NAME (const octave_value& val)
 ##   {
 ##     set_NAME (TYPE (val));
 ##   }
 ##
@@ -369,17 +368,17 @@ function emit_declarations ()
 
       if (emit_set[i] == "definition")
       {
         if (updaters[i] || limits[i] || mode[i])
           has_builtin_listeners = 1;
         else
           has_builtin_listeners = 0;
 
-        printf ("\n  {\n    if (! error_state)\n      {\n        if (%s.set (val, %s))\n          {\n",
+        printf ("\n  {\n      {\n        if (%s.set (val, %s))\n          {\n",
           name[i], (has_builtin_listeners ? "false" : "true"));
         if (mode[i])
           printf ("            set_%smode (\"manual\");\n", name[i]);
         if (updater[i])
           printf ("            update_%s ();\n", name[i]);
         if (limits[i])
           printf ("            update_axis_limits (\"%s\");\n", name[i]);
         if (has_builtin_listeners)
@@ -465,17 +464,17 @@ function emit_source ()
 
     if (base)
       printf ("void\nbase_properties::set (const caseless_str& pname, const octave_value& val)\n{\n");
     else
       printf ("void\n%s::properties::set (const caseless_str& pname_arg, const octave_value& val)\n{\n",
               class_name);
 
     if (! base)
-        printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  caseless_str pname = validate_property_name (\"set\", go_name, pnames, pname_arg);\n\n  if (error_state)\n    return;\n  else if (has_readonly_property (pname))\n    {\n      error (\"set: \\\"%%s\\\" is read-only\", pname.c_str ());\n      return;\n    }\n\n");
+        printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  caseless_str pname = validate_property_name (\"set\", go_name, pnames, pname_arg);\n\n  if (has_readonly_property (pname))\n    {\n      error (\"set: \\\"%%s\\\" is read-only\", pname.c_str ());\n      return;\n    }\n\n");
 
     first = 1;
 
     for (i = 1; i <= idx; i++)
     {
       if (! readonly[i])
       {
         printf ("  %sif (pname.compare (\"%s\"))\n    set_%s (val);\n",
@@ -519,17 +518,17 @@ function emit_source ()
     if (base)
       printf ("octave_value\nbase_properties::get (const caseless_str& pname) const\n{\n");
     else
       printf ("octave_value\n%s::properties::get (const caseless_str& pname_arg) const\n{\n",
               class_name);
     printf ("  octave_value retval;\n\n");
 
     if (! base)
-      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  caseless_str pname = validate_property_name (\"get\", go_name, pnames, pname_arg);\n\n  if (error_state)\n    return retval;\n\n");
+      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  caseless_str pname = validate_property_name (\"get\", go_name, pnames, pname_arg);\n\n");
 
     for (i = 1; i<= idx; i++)
     {
       printf ("  %sif (pname.compare (\"%s\"))\n",
               (i > 1 ? "else " : ""), name[i]);
       printf ("    retval = get_%s ()%s;\n", name[i],
               (type[i] == "handle_property" || type[i] == "graphics_handle" ? ".as_octave_value ()" : ""));
     }
@@ -544,17 +543,17 @@ function emit_source ()
 
     if (base)
       printf ("property\nbase_properties::get_property (const caseless_str& pname)\n{\n");
     else
       printf ("property\n%s::properties::get_property (const caseless_str& pname_arg)\n{\n",
               class_name);
 
     if (! base)
-      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  caseless_str pname = validate_property_name (\"get\", go_name, pnames, pname_arg);\n\n  if (error_state)\n    return property ();\n\n");
+      printf ("  const std::set<std::string>& pnames = all_property_names ();\n\n  caseless_str pname = validate_property_name (\"get\", go_name, pnames, pname_arg);\n\n");
 
     for (i = 1; i<= idx; i++)
     {
       if (ptype[i])
       {
         printf ("  %sif (pname.compare (\"%s\"))\n",
                 (i > 1 ? "else " : ""), name[i]);
         printf ("    return property (&%s, true);\n", name[i]);
