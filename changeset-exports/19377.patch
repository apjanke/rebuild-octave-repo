# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1417532703 18000
#      Tue Dec 02 10:05:03 2014 -0500
# Node ID 9ef286208da194e92fdb8d72b04957923aa5feaf
# Parent  009191dbc76db927031f4bce42721549ac10a7eb
# Parent  302eef6de090ffd177275013fd68ea49b0fab322
maint: Periodic merge of gui-release to default.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -10708,18 +10708,18 @@ gtk_manager::do_unregister_toolkit (cons
           dtk = *pa++;
 
           while (pa != available_toolkits.end ())
             {
               std::string tk_name = *pa++;
 
               if (tk_name == "qt"
                   || (tk_name == "fltk"
-                      && available_toolkits.find ("qt")
-                        == available_toolkits.end ()))
+                      && (available_toolkits.find ("qt")
+                          == available_toolkits.end ())))
                 dtk = tk_name;
             }
         }
     }
 }
 
 DEFUN (available_graphics_toolkits, , ,
        "-*- texinfo -*-\n\
diff --git a/libinterp/corefcn/load-save.cc b/libinterp/corefcn/load-save.cc
--- a/libinterp/corefcn/load-save.cc
+++ b/libinterp/corefcn/load-save.cc
@@ -1196,17 +1196,17 @@ write_header (std::ostream& os, load_sav
       {
         char const * versionmagic;
         int16_t number = *(reinterpret_cast<const int16_t *>("\x00\x01"));
         struct tm bdt;
         time_t now;
         char headertext[128];
 
         time (&now);
-        bdt = *gmtime (&now);
+        bdt = *gnulib::gmtime (&now);
         memset (headertext, ' ', 124);
         // ISO 8601 format date
         nstrftime (headertext, 124, "MATLAB 5.0 MAT-file, written by Octave "
                    OCTAVE_VERSION ", %Y-%m-%d %T UTC", &bdt, 1, 0);
 
         // The first pair of bytes give the version of the MAT file
         // format.  The second pair of bytes form a magic number which
         // signals a MAT file.  MAT file data are always written in
diff --git a/liboctave/numeric/lo-specfun.cc b/liboctave/numeric/lo-specfun.cc
--- a/liboctave/numeric/lo-specfun.cc
+++ b/liboctave/numeric/lo-specfun.cc
@@ -680,24 +680,24 @@ log1pf (float x)
 {
   float retval;
 
   float ax = fabs (x);
 
   if (ax < 0.2)
     {
       // approximation log (1+x) ~ 2*sum ((x/(2+x)).^ii ./ ii), ii = 1:2:2n+1
-      float u = x / (2 + x), t = 1, s = 0;
+      float u = x / (2 + x), t = 1.0f, s = 0;
       for (int i = 2; i < 12; i += 2)
         s += (t *= u*u) / (i+1);
 
-      retval = 2 * (s + 1) * u;
+      retval = 2 * (s + 1.0f) * u;
     }
   else
-    retval = gnulib::logf (1 + x);
+    retval = gnulib::logf (1.0f + x);
 
   return retval;
 }
 #endif
 
 FloatComplex
 log1p (const FloatComplex& x)
 {
@@ -2981,18 +2981,19 @@ Complex rc_log1p (double x)
   return (x < -1.0
           ? Complex (gnulib::log (-(1.0 + x)), pi)
           : Complex (log1p (x)));
 }
 
 FloatComplex rc_log1p (float x)
 {
   const float pi = 3.14159265358979323846f;
-  return x < -1.0f ? FloatComplex (gnulib::logf (-(1.0f + x)), pi)
-                   : FloatComplex (log1pf (x));
+  return (x < -1.0f
+          ? FloatComplex (gnulib::logf (-(1.0f + x)), pi)
+          : FloatComplex (log1pf (x)));
 }
 
 // This algorithm is due to P. J. Acklam.
 // See http://home.online.no/~pjacklam/notes/invnorm/
 // The rational approximation has relative accuracy 1.15e-9 in the whole region.
 // For doubles, it is refined by a single step of Halley's 3rd order method.
 // For single precision, the accuracy is already OK, so we skip it to get
 // faster evaluation.
@@ -3113,20 +3114,26 @@ static double do_erfcinv (double x, bool
       const double q = 0.5*(1-x), r = q*q;
       const double yn = (((((a[0]*r + a[1])*r + a[2])*r + a[3])*r + a[4])*r + a[5])*q;
       const double yd = ((((b[0]*r + b[1])*r + b[2])*r + b[3])*r + b[4])*r + 1.0;
       y = yn / yd;
     }
   else if (x > 0.0 && x < 2.0)
     {
       // Tail region.
-      const double q = x < 1 ? sqrt (-2*gnulib::log (0.5*x)) : sqrt (-2*gnulib::log (0.5*(2-x)));
+      const double q = (x < 1
+                        ? sqrt (-2*gnulib::log (0.5*x))
+                        : sqrt (-2*gnulib::log (0.5*(2-x))));
+
       const double yn = ((((c[0]*q + c[1])*q + c[2])*q + c[3])*q + c[4])*q + c[5];
+
       const double yd = (((d[0]*q + d[1])*q + d[2])*q + d[3])*q + 1.0;
+
       y = yn / yd;
+
       if (x < pbreak_lo)
         y = -y;
     }
   else if (x == 0.0)
     return octave_Inf;
   else if (x == 2.0)
     return -octave_Inf;
   else
diff --git a/liboctave/system/oct-time.cc b/liboctave/system/oct-time.cc
--- a/liboctave/system/oct-time.cc
+++ b/liboctave/system/oct-time.cc
@@ -230,27 +230,27 @@ octave_base_tm::init (void *p)
 
 void
 octave_localtime::init (const octave_time& ot)
 {
   tm_usec = ot.usec ();
 
   time_t t = ot.unix_time ();
 
-  octave_base_tm::init (localtime (&t));
+  octave_base_tm::init (gnulib::localtime (&t));
 }
 
 void
 octave_gmtime::init (const octave_time& ot)
 {
   tm_usec = ot.usec ();
 
   time_t t = ot.unix_time ();
 
-  octave_base_tm::init (gmtime (&t));
+  octave_base_tm::init (gnulib::gmtime (&t));
 }
 
 void
 octave_strptime::init (const std::string& str, const std::string& fmt)
 {
   struct tm t;
 
   t.tm_sec = 0;
diff --git a/scripts/plot/util/private/__fltk_ginput__.m b/scripts/plot/util/private/__fltk_ginput__.m
--- a/scripts/plot/util/private/__fltk_ginput__.m
+++ b/scripts/plot/util/private/__fltk_ginput__.m
@@ -42,17 +42,24 @@ function [x, y, button] = __fltk_ginput_
 
     do
       __fltk_check__ ();
 
       ## Release CPU.
       sleep (0.01);
 
       [x, y, n0, button] = ginput_accumulator (-1, 0, 0, 0);
-    until (n0 == n || n0 < 0)
+    until ((n > -1 && n0 >= n) || n0 < 0)
+
+    if (n0 > n)
+      ## More clicks than requested due to double-click or too fast clicking
+      x = x(1:n);
+      y = y(1:n);
+      button = button(1:n);
+    endif
 
   unwind_protect_cleanup
     set (gca, "buttondownfcn", orig_buttondownfcn);
     set (gcf, "keypressfcn", orig_ginput_keypressfcn);
   end_unwind_protect
 
 endfunction
 
diff --git a/scripts/testfun/__run_test_suite__.m b/scripts/testfun/__run_test_suite__.m
--- a/scripts/testfun/__run_test_suite__.m
+++ b/scripts/testfun/__run_test_suite__.m
@@ -26,31 +26,34 @@ function __run_test_suite__ (fcndirs, fi
   libinterptestdir = fullfile (testsdir, "libinterp");
   liboctavetestdir = fullfile (testsdir, "liboctave");
   fixedtestdir = fullfile (testsdir, "fixed");
   fcnfiledir = octave_config_info ("fcnfiledir");
   if (nargin == 0)
     fcndirs = { liboctavetestdir, libinterptestdir, fcnfiledir };
     fixedtestdirs = { fixedtestdir };
   endif
-  global files_with_no_tests = {};
-  global files_with_tests = {};
+  global files_with_no_tests;
+  global files_with_tests;
+  files_with_no_tests = {};
+  files_with_tests = {};
   ## FIXME: These names don't really make sense if we are running
   ##        tests for an installed copy of Octave.
   global topsrcdir = fcnfiledir;
   global topbuilddir = testsdir;
   pso = page_screen_output ();
   warn_state = warning ("query", "quiet");
   warning ("on", "quiet");
+  logfile = make_absolute_filename ("fntests.log");
   try
     page_screen_output (false);
     warning ("off", "Octave:deprecated-function");
-    fid = fopen ("fntests.log", "wt");
+    fid = fopen (logfile, "wt");
     if (fid < 0)
-      error ("could not open fntests.log for writing");
+      error ("could not open %s for writing", logfile);
     endif
     test ("", "explain", fid);
     dp = dn = dxf = dsk = 0;
     puts ("\nIntegrated test scripts:\n\n");
     for i = 1:length (fcndirs)
       [p, n, xf, sk] = run_test_script (fid, fcndirs{i});
       dp += p;
       dn += n;
@@ -71,17 +74,17 @@ function __run_test_suite__ (fcndirs, fi
     printf ("  FAIL    %6d\n", nfail);
     if (dxf > 0)
       printf ("  XFAIL   %6d\n", dxf);
     endif
     if (dsk > 0)
       printf ("  SKIPPED %6d\n", dsk);
     endif
     puts ("\n");
-    puts ("See the file test/fntests.log for additional details.\n");
+    printf ("See the file %s for additional details.\n", logfile);
     if (dxf > 0)
       puts ("\n");
       puts ("Expected failures (listed as XFAIL above) are known bugs.\n");
       puts ("Please help improve Octave by contributing fixes for them.\n");
     endif
     if (dsk > 0)
       puts ("\n");
       puts ("Tests are most often skipped because the features they require\n");
@@ -94,18 +97,18 @@ function __run_test_suite__ (fcndirs, fi
     ## Weed out deprecated and private functions
     weed_idx = cellfun (@isempty, regexp (files_with_tests, '\<deprecated\>|\<private\>', 'once'));
     files_with_tests = files_with_tests(weed_idx);
     weed_idx = cellfun (@isempty, regexp (files_with_no_tests, '\<deprecated\>|\<private\>', 'once'));
     files_with_no_tests = files_with_no_tests(weed_idx);
 
     report_files_with_no_tests (files_with_tests, files_with_no_tests, ".m");
 
-    puts ("\nPlease help improve Octave by contributing tests for\n");
-    puts ("these files (see the list in the file fntests.log).\n\n");
+    puts ("\nPlease help improve Octave by contributing tests for these files\n");
+    printf ("(see the list in the file %s).\n\n", logfile);
 
     fprintf (fid, "\nFiles with no tests:\n\n%s",
                   list_in_columns (files_with_no_tests, 80));
     fclose (fid);
 
     page_screen_output (pso);
     warning (warn_state.state, "quiet");
   catch
diff --git a/src/mkoctfile.in.cc b/src/mkoctfile.in.cc
--- a/src/mkoctfile.in.cc
+++ b/src/mkoctfile.in.cc
@@ -65,21 +65,21 @@ static std::map<std::string, std::string
 
 #include "shared-fcns.h"
 
 static std::string
 get_line (FILE *fp)
 {
   static std::vector<char> buf (100);
   unsigned int idx = 0;
-  char c;
+  int c;
 
   while (true)
     {
-      c = static_cast<char> (gnulib::fgetc (fp));
+      c = gnulib::fgetc (fp);
       if (c == '\n' || c == EOF)
         break;
       if (buf.size () <= idx)
         buf.resize (buf.size () + 100);
       buf[idx++] = c;
     }
   if (idx == 0)
     return std::string ("");
