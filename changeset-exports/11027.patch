# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1285630696 14400
#      Mon Sep 27 19:38:16 2010 -0400
# Node ID a2bdd9180a3c66036322907825341b391f190361
# Parent  811d8f1134238ed91d73c504fb1180fbd71caa37
__print_parse_opts__.m: Properly crop eps image and fix tests.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-09-27  Ben Abbott <bpabbott@mac.com>
+
+	* plot/__print_parse_opts__.m: Properly crop eps image and fix tests.
+
 2010-09-26  Rik <octave@nomad.inbox5.com>
 
 	* testfun/runtests.m (has_tests): Recode to remove requirement for PCRE.
 	Bug #31025.
 
 2010-09-25  Ben Abbott <bpabbott@mac.com>
 
 	* plot/__print_parse_opts__.m: Recongize gs devices {eps/pdf/ps}write.
diff --git a/scripts/plot/__print_parse_opts__.m b/scripts/plot/__print_parse_opts__.m
--- a/scripts/plot/__print_parse_opts__.m
+++ b/scripts/plot/__print_parse_opts__.m
@@ -85,20 +85,20 @@ function arg_st = __print_parse_opts__ (
       elseif (strcmp (arg, "-dashed"))
         arg_st.force_solid = -1;
       elseif (strncmp (arg, "-portrait", numel (arg)))
         arg_st.orientation = "portrait";
       elseif (strncmp (arg, "-landscape", numel (arg)))
         arg_st.orientation = "landscape";
       elseif (strcmp (arg, "-loose"))
         arg_st.loose = true;
+        arg_st.tight_flag = false;
       elseif (strcmp (arg, "-tight"))
+        arg_st.loose = false;
         arg_st.tight_flag = true;
-      elseif (strcmp (arg, "-loose"))
-        arg_st.tight_flag = false;
       elseif (strcmp (arg, "-textspecial"))
         arg_st.special_flag = "textspecial";
       elseif (any (strcmp (arg, {"-interchange", "-metafile", "-pict", "-tiff"})))
         arg_st.preview = arg(2:end);
       elseif (strncmp (arg, "-debug", 6))
         arg_st.debug = true;
         arg_st.ghostscript.debug = true;
         if (length (arg) > 7)
@@ -178,24 +178,16 @@ function arg_st = __print_parse_opts__ (
   if (arg_st.use_color == 0)
     if (any (strcmp ({"ps", "ps2", "eps", "eps2"}, arg_st.devopt)))
       arg_st.use_color = -1;
     else
       arg_st.use_color = 1;
     endif
   endif
 
-  if (arg_st.tight_flag)
-    if (any (strcmpi (arg_st.devopt, {"ps", "ps2", "psc", "psc2", "pdf"})))
-      arg_st.tight_flag = false;
-      warning ("print.m: '-tight' is not supported for device '%s'",
-               arg_st.devopt)
-    endif
-  endif
-
   if (strcmp (arg_st.devopt, "tex"))
     arg_st.devopt = "epslatex";
   elseif (strcmp (arg_st.devopt, "ill"))
     arg_st.devopt = "aifm";
   elseif (strcmp (arg_st.devopt, "cdr"))
     arg_st.devopt = "corel";
   elseif (strcmp (arg_st.devopt, "meta"))
     arg_st.devopt = "emf";
@@ -222,18 +214,24 @@ function arg_st = __print_parse_opts__ (
               "emf", "pdf", "tex", "tex", "tex", ...
               "tex", "tex", ...
               "ps", "tiff", "tiff", "tikz", "pcx", ...
               "pcx", "pcx", "pcx", "pgm", "pgm", ...
               "ppm", "ppm", "tex", "tex", ...
               "pdf", "png", "tex", ...
               "eps", "ps", "ps", "pdf"};
 
-  if (isfigure (arg_st.figure)
-      && strcmp (get (arg_st.figure, "__backend__"), "gnuplot")
+  if (isfigure (arg_st.figure))
+    __backend__ = get (arg_st.figure, "__backend__");
+  else
+    ## Allow tests when no figures are present.
+    __backend__ = get (0, "defaultfigure__backend__");
+  endif
+
+  if (strcmp (__backend__, "gnuplot")
       && __gnuplot_has_feature__ ("epslatex_implies_eps_filesuffix"))
     suffixes(strncmp (dev_list, "epslatex", 8)) = {"eps"};
   endif
 
   match = strcmpi (dev_list, arg_st.devopt);
   if (any (match))
     default_suffix = suffixes {match};
   else
@@ -289,18 +287,22 @@ function arg_st = __print_parse_opts__ (
 
   if ((any (strcmp (arg_st.devopt, gs_device_list))
        && ! arg_st.formatted_for_printing)
       || any (strcmp (arg_st.devopt, {"pswrite", "ps2write", "pdfwrite"})))
     ## Use ghostscript for graphic formats
     arg_st.ghostscript.device = arg_st.devopt;
     arg_st.ghostscript.output = arg_st.name;
     arg_st.ghostscript.antialiasing = true;
-    ## pstoedit throws errors if the EPS file isn't cropped
-    arg_st.ghostscript.epscrop = true;
+    if (arg_st.formatted_for_printing)
+      arg_st.ghostscript.epscrop = ! arg_st.loose;
+    else
+      ## pstoedit throws errors if the EPS file isn't cropped
+      arg_st.ghostscript.epscrop = true;
+    endif
   elseif (all (! strcmp (arg_st.devopt, dev_list)))
     ## Assume we are formating output for a printer
     arg_st.formatted_for_printing = true;
     arg_st.ghostscript.device = arg_st.devopt;
     arg_st.ghostscript.output = arg_st.name;
     arg_st.ghostscript.antialiasing = false;
     arg_st.ghostscript.epscrop = ! arg_st.loose;
   endif
@@ -310,17 +312,21 @@ function arg_st = __print_parse_opts__ (
       [arg_st.ghostscript.papersize, paperposition] = ...
                            gs_papersize (arg_st.figure, arg_st.orientation);
     else
       ## allows tests to be run
       arg_st.ghostscript.papersize = "letter";
       paperposition = [0.25, 2.50, 8.00, 6.00] * 72;
     endif
     arg_st.canvas_size = paperposition(3:4);
-    arg_st.ghostscript.pageoffset = paperposition(1:2);
+    if (strcmp (__backend__, "gnuplot") && ! arg_st.ghostscript.epscrop)
+      arg_st.ghostscript.pageoffset = paperposition(1:2) - 50;
+    else
+      arg_st.ghostscript.pageoffset = paperposition(1:2);
+    endif
   else
     ## Convert canvas size to points from pixles.
     arg_st.canvas_size = arg_st.canvas_size * 72 / arg_st.ghostscript.resolution;
     arg_st.ghostscript.papersize = arg_st.canvas_size;
     arg_st.ghostscript.epscrop = true;
     arg_st.ghostscript.pageoffset = [0, 0];
   endif
 
@@ -377,17 +383,17 @@ endfunction
 %! assert (opts.use_color, -1);
 %! assert (opts.ghostscript.device, "")
 
 %!test
 %! opts = __print_parse_opts__ ("-djpg", "foobar", "-mono", "-loose");
 %! assert (opts.devopt, "jpeg")
 %! assert (opts.name, "foobar.jpg")
 %! assert (opts.ghostscript.device, "jpeg")
-%! assert (opts.ghostscript.epscrop, true);
+%! assert (opts.ghostscript.epscrop, false);
 %! assert (opts.ghostscript.papersize, "");
 %! assert (opts.ghostscript.pageoffset, [0, 0]);
 %! assert (opts.send_to_printer, false);
 %! assert (opts.printer, "");
 %! assert (opts.use_color, -1);
 
 %!test
 %! opts = __print_parse_opts__ ("-ddeskjet", "foobar", "-mono", "-Pmyprinter");
