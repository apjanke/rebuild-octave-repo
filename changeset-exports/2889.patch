# HG changeset patch
# User jwe
# Date 862191540 0
#      Mon Apr 28 01:39:00 1997 +0000
# Node ID 8aa189b811d0c17040a85effc60afe0d9ce0ed6e
# Parent  e78978eff91dbe9b928d5bec777eab1aaf47f080
[project @ 1997-04-28 01:35:18 by jwe]

diff --git a/src/SLList-expr.cc b/src/SLList-expr.cc
--- a/src/SLList-expr.cc
+++ b/src/SLList-expr.cc
@@ -26,17 +26,16 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include "SLList.h"
 #include "SLList.cc"
 
 #include "ov.h"
 #include "pt-exp.h"
-#include "pt-fvc.h"
 #include "pt-mvr.h"
 
 template class SLNode<tree_expression *>;
 template class SLList<tree_expression *>;
 
 template class SLNode<tree_identifier *>;
 template class SLList<tree_identifier *>;
 
diff --git a/src/colloc.cc b/src/colloc.cc
--- a/src/colloc.cc
+++ b/src/colloc.cc
@@ -22,21 +22,21 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <string>
 
 #include "CollocWt.h"
+#include "lo-mappers.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "help.h"
-#include "mappers.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 DEFUN_DLD (colloc, args, ,
   "[R, A, B, Q] = colloc (N [, \"left\"] [, \"right\"]): collocation weights")
 {
   octave_value_list retval;
 
diff --git a/src/fft.cc b/src/fft.cc
--- a/src/fft.cc
+++ b/src/fft.cc
@@ -19,21 +19,22 @@ along with Octave; see the file COPYING.
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "lo-mappers.h"
+
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
-#include "mappers.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 // This function should be merged with Fifft.
 
 DEFUN_DLD (fft, args, ,
   "fft (X [, N]): fast fourier transform of a vector")
 {
diff --git a/src/fft2.cc b/src/fft2.cc
--- a/src/fft2.cc
+++ b/src/fft2.cc
@@ -19,21 +19,22 @@ along with Octave; see the file COPYING.
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "lo-mappers.h"
+
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
-#include "mappers.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 // This function should be merged with Fifft2.
 
 DEFUN_DLD (fft2, args, ,
   "fft2 (X [, N] [, M])\n\
 \n\
diff --git a/src/ifft.cc b/src/ifft.cc
--- a/src/ifft.cc
+++ b/src/ifft.cc
@@ -19,21 +19,22 @@ along with Octave; see the file COPYING.
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "lo-mappers.h"
+
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
-#include "mappers.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 // This function should be merged with Ffft.
 
 DEFUN_DLD (ifft, args, ,
   "ifft (X [, N]): inverse fast fourier transform of a vector")
 {
diff --git a/src/ifft2.cc b/src/ifft2.cc
--- a/src/ifft2.cc
+++ b/src/ifft2.cc
@@ -19,21 +19,22 @@ along with Octave; see the file COPYING.
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "lo-mappers.h"
+
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
-#include "mappers.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 // This function should be merged with Ffft2.
 
 DEFUN_DLD (ifft2, args, ,
   "ifft2 (X [, N] [, M])\n\
 \n\
diff --git a/src/mappers.cc b/src/mappers.cc
--- a/src/mappers.cc
+++ b/src/mappers.cc
@@ -21,108 +21,111 @@ Software Foundation, 59 Temple Place - S
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cctype>
 
+#include "lo-mappers.h"
+
 #include "defun.h"
 #include "error.h"
 #include "mappers.h"
+#include "oct-mapper.h"
 
 // XXX FIXME XXX -- perhaps this could be avoided by determining
 // whether the is* functions are actually functions or just macros.
 
-int
+static int
 xisalnum (int c)
 {
   return isalnum (c);
 }
 
-int
+static int
 xisalpha (int c)
 {
   return isalpha (c);
 }
 
-int
+static int
 xisascii (int c)
 {
   return isascii (c);
 }
 
-int
+static int
 xiscntrl (int c)
 {
   return iscntrl (c);
 }
 
-int
+static int
 xisdigit (int c)
 {
   return isdigit (c);
 }
 
-int
+static int
 xisgraph (int c)
 {
   return isgraph (c);
 }
 
-int
+static int
 xislower (int c)
 {
   return islower (c);
 }
 
-int
+static int
 xisprint (int c)
 {
   return isprint (c);
 }
 
-int
+static int
 xispunct (int c)
 {
   return ispunct (c);
 }
 
-int
+static int
 xisspace (int c)
 {
   return isspace (c);
 }
 
-int
+static int
 xisupper (int c)
 {
   return isupper (c);
 }
 
-int
+static int
 xisxdigit (int c)
 {
   return isxdigit (c);
 }
 
-int
+static int
 xtoascii (int c)
 {
   return toascii (c);
 }
 
-int
+static int
 xtolower (int c)
 {
   return tolower (c);
 }
 
-int
+static int
 xtoupper (int c)
 {
   return toupper (c);
 }
 
 void
 install_mapper_functions (void)
 {
diff --git a/src/mappers.h b/src/mappers.h
--- a/src/mappers.h
+++ b/src/mappers.h
@@ -18,93 +18,16 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_mappers_h)
 #define octave_mappers_h 1
 
-#include <string>
-
-#include "lo-mappers.h"
-#include "oct-cmplx.h"
-
-typedef int (*ch_Mapper)(int);
-typedef double (*d_d_Mapper)(double);
-typedef double (*d_c_Mapper)(const Complex&);
-typedef Complex (*c_c_Mapper)(const Complex&);
-
-// ch_mapper is a kluge.
-//
-// If can_return_complex_for_real_arg is 1, lower_limit and
-// upper_limit specify the range of values for which a real arg
-// returns a real value.  Outside that range, we have to convert args
-// to complex, and call the complex valued function.
-//
-// If can_return_complex_for_real_arg is 0, lower_limit and
-// upper_limit are ignored.
-
-struct builtin_mapper_function
-{
-  builtin_mapper_function (ch_Mapper ch = 0, d_d_Mapper dd = 0,
-			   d_c_Mapper dc = 0, c_c_Mapper cc = 0,
-			   double l = 0.0, double u = 0.0, int f = 0,
-			   const string n = string (),
-			   const string& h = string ())
-    : ch_mapper (ch), d_d_mapper (dd), d_c_mapper (dc), c_c_mapper (cc),
-      lower_limit (l), upper_limit (u), flag (f),
-      name (n), help_string (h) { }
-
-  builtin_mapper_function (const builtin_mapper_function& mf)
-    : ch_mapper (mf.ch_mapper), d_d_mapper (mf.d_d_mapper),
-      d_c_mapper (mf.d_c_mapper), c_c_mapper (mf.c_c_mapper),
-      lower_limit (mf.lower_limit), upper_limit (mf.upper_limit),
-      flag (mf.flag), name (mf.name), help_string (mf.help_string) { }
-
-  builtin_mapper_function& operator = (const builtin_mapper_function& mf)
-    {
-      if (&mf != this)
-	{
-	  ch_mapper = mf.ch_mapper;
-	  d_d_mapper = mf.d_d_mapper;
-	  d_c_mapper = mf.d_c_mapper;
-	  c_c_mapper = mf.c_c_mapper;
-	  lower_limit = mf.lower_limit;
-	  upper_limit = mf.upper_limit;
-	  flag = mf.flag;
-	  name = mf.name;
-	  help_string = mf.help_string;
-	}
-      return *this;
-    }
-
-  ~builtin_mapper_function (void) { }
-
-  ch_Mapper ch_mapper;
-  d_d_Mapper d_d_mapper;
-  d_c_Mapper d_c_mapper;
-  c_c_Mapper c_c_mapper;
-  double lower_limit;
-  double upper_limit;
-
-  // For ch_mapper:
-  //
-  //   0  =>  this function returns a matrix of ones and zeros
-  //   1  =>  this function returns a numeric matrix (any values)
-  //   2  =>  this function returns a string array
-  //
-  // For other mappers, nonzero means that this function can return a
-  // complex value for some real arguments.
-  int flag;
-
-  string name;
-  string help_string;
-};
-
 extern void install_mapper_functions (void);
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -30,23 +30,23 @@ Software Foundation, 59 Temple Place - S
 #include <cstdlib>
 
 #include <string>
 
 class ostream;
 
 #include "Range.h"
 
+#include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
 #include "error.h"
-#include "mappers.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -28,22 +28,22 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #include <cstdlib>
 
 #include <string>
 
 class ostream;
 
+#include "lo-mappers.h"
 #include "lo-utils.h"
 #include "mx-base.h"
 #include "oct-alloc.h"
 #include "str-vec.h"
 
-#include "mappers.h"
 #include "ov-base.h"
 #include "ov-typeinfo.h"
 
 class Octave_map;
 class octave_value_list;
 
 class tree_walker;
 
diff --git a/src/rand.cc b/src/rand.cc
--- a/src/rand.cc
+++ b/src/rand.cc
@@ -24,22 +24,22 @@ Software Foundation, 59 Temple Place - S
 #include <config.h>
 #endif
 
 #include <ctime>
 
 #include <string>
 
 #include "f77-fcn.h"
+#include "lo-mappers.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
-#include "mappers.h"
 #include "oct-obj.h"
 #include "unwind-prot.h"
 #include "utils.h"
 
 // Possible distributions of random numbers.  This was handled with an
 // enum, but unwind_protecting that doesn't work so well.
 #define uniform_dist 1
 #define normal_dist 2
