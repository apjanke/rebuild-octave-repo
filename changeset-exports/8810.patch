# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1234997167 18000
#      Wed Feb 18 17:46:07 2009 -0500
# Node ID c9e1db15035bec3c76766796db24db0f7ae3c76e
# Parent  732cb02364882e9c948d47b620eb99d87bb5869c
eliminate unnecessary casts

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,9 +1,14 @@
 2009-02-18  John W. Eaton  <jwe@octave.org>
+ 
+	* DLD-FUNCTIONS/find.cc (find_nonzero_elem_idx): Likewise.
+	* DLD-FUNCTIONS/time.cc (strptime): Likewise.
+	* DLD-FUNCTIONS/quad.cc (Fquad): Eliminate unnecessary cast.
+	* toplev.cc (run_command_and_return_output): Likewise.
 
 	* strfns.cc (Fstrvcat): Use octave_idx_type and size_t instead of
 	int as needed.
 	(Fstrcmp, Fstrncmp): Use octave_idx_type instead of int as needed.
 
 	* DLD-FUNCTIONS/hex2num.cc (Fhex2num, Fnum2hex):
 	Use union to avoid reinterpret_cast and GCC warning.
 
diff --git a/src/DLD-FUNCTIONS/find.cc b/src/DLD-FUNCTIONS/find.cc
--- a/src/DLD-FUNCTIONS/find.cc
+++ b/src/DLD-FUNCTIONS/find.cc
@@ -57,17 +57,17 @@ find_nonzero_elem_idx (const Array<T>& n
   octave_idx_type start_el = -1;
   octave_idx_type end_el = -1;
 
   // Search for the number of elements to return.
   while (k < nel && k > -1 && n_to_find != count)
     {
       OCTAVE_QUIT;
 
-      if (nda(k) != static_cast<T> (0.0))
+      if (nda(k) != T ())
 	{
 	  end_el = k;
 	  if (start_el == -1)
 	    start_el = k;
 	  count++;
 	}
       k = k + direction;
     }
@@ -120,17 +120,17 @@ find_nonzero_elem_idx (const Array<T>& n
 
       // For compatibility, all N-d arrays are handled as if they are
       // 2-d, with the number of columns equal to "prod (dims (2:end))".
 
       for (k = start_el; k < end_el; k++)
 	{
 	  OCTAVE_QUIT;
 
-	  if (nda(k) != static_cast<T> (0.0))
+	  if (nda(k) != T ())
 	    {
 	      idx(count) = k + 1;
 
 	      octave_idx_type xr = k % nr;
 	      i_idx(count) = xr + 1;
 	      j_idx(count) = (k - xr) / nr + 1;
 
 	      val(count) = nda(k);
@@ -271,20 +271,20 @@ find_nonzero_elem_idx (const Sparse<T>& 
       // there are elements to be found using the count that we want
       // to find.
       for (octave_idx_type j = start_nc, cx = 0; j < end_nc; j++) 
 	for (octave_idx_type i = v.cidx(j); i < v.cidx(j+1); i++ ) 
 	  {
 	    OCTAVE_QUIT;
 	    if (direction < 0 && i < nz - count)
 	      continue;
-	    i_idx (cx) = static_cast<double> (v.ridx(i) + 1);
-	    j_idx (cx) = static_cast<double> (j + 1);
-	    idx (cx) = j * nr + v.ridx(i) + 1; 
-	    val (cx) = v.data(i);
+	    i_idx(cx) = static_cast<double> (v.ridx(i) + 1);
+	    j_idx(cx) = static_cast<double> (j + 1);
+	    idx(cx) = j * nr + v.ridx(i) + 1; 
+	    val(cx) = v.data(i);
 	    cx++;
 	    if (cx == count)
 	      break;
 	  }
     }
   else if (scalar_arg)
     {
       idx.resize (0, 0);
diff --git a/src/DLD-FUNCTIONS/quad.cc b/src/DLD-FUNCTIONS/quad.cc
--- a/src/DLD-FUNCTIONS/quad.cc
+++ b/src/DLD-FUNCTIONS/quad.cc
@@ -347,18 +347,18 @@ cannot be called recursively.\n\
 	      break;
 
 	    default:
 	      panic_impossible ();
 	      break;
 	    }
 
 	  retval(3) = abserr;
-	  retval(2) = static_cast<double> (nfun);
-	  retval(1) = static_cast<double> (ier);
+	  retval(2) = nfun;
+	  retval(1) = ier;
 	  retval(0) = val;
 
 	}
       else
 	{
 	  double a = args(1).double_value ();
 
 	  if (error_state)
@@ -455,18 +455,18 @@ cannot be called recursively.\n\
 	      break;
 
 	    default:
 	      panic_impossible ();
 	      break;
 	    }
 
 	  retval(3) = abserr;
-	  retval(2) = static_cast<double> (nfun);
-	  retval(1) = static_cast<double> (ier);
+	  retval(2) = nfun;
+	  retval(1) = ier;
 	  retval(0) = val;
 	}
 
       if (fcn_name.length())
 	clear_function (fcn_name);
     }
   else
     print_usage ();
diff --git a/src/DLD-FUNCTIONS/time.cc b/src/DLD-FUNCTIONS/time.cc
--- a/src/DLD-FUNCTIONS/time.cc
+++ b/src/DLD-FUNCTIONS/time.cc
@@ -500,17 +500,17 @@ you're absolutely sure the date string w
       if (! error_state)
 	{
 	  std::string fmt = args(1).string_value ();
 
 	  if (! error_state)
 	    {
 	      octave_strptime t (str, fmt);
 
-	      retval(1) = static_cast<double> (t.characters_converted ());
+	      retval(1) = t.characters_converted ();
 	      retval(0) = octave_value (mk_tm_map (t));
 	    }
 	  else
 	    error ("strptime: expecting format string as second argument");
 	}
       else
 	error ("strptime: expecting string as first argument");
     }
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -773,17 +773,17 @@ run_command_and_return_output (const std
 
 	  int cmd_status = cmd->close ();
 
 	  if (WIFEXITED (cmd_status))
 	    cmd_status = WEXITSTATUS (cmd_status);
 	  else
 	    cmd_status = 127;
 
-	  retval(0) = (double) cmd_status;
+	  retval(0) = cmd_status;
 	  retval(1) = output_buf.str ();
 	}
 
       unwind_protect::run ();
     }
   else
     error ("unable to start subprocess for `%s'", cmd_str.c_str ());
 
