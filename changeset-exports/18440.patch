# HG changeset patch
# User Rik <rik@octave.org>
# Date 1391899461 28800
#      Sat Feb 08 14:44:21 2014 -0800
# Node ID 96a4958130471a6ecaeb7e36d61a60313dcae4e4
# Parent  d5aa615dcf4c139c4790614dc5252733da2205bb
Don't put parent function in subfunction stack structure name (bug #41506).

* debug.cc (do_dbstack): When returning a structure, call
octave_call_stack::backtrace with print_subfn set to false.

* toplev.h (octave_call_stack::backtrace): Create new 2 argument function
signature which calls do_backtrace with print_subfn set to true.  Create
new 3 argument function signature which passes print_subfn argument through
to do_backtrace.

* toplev.cc (octave_call_stack::do_backtrace): Change function to accept
3rd argument, print_subfn, which decides whether the parent function
should be printed in the name field of the backtrace.

diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -1219,20 +1219,19 @@ do_dbstack (const octave_value_list& arg
       if (n > 0)
         nskip = n;
     }
   else if (len)
     print_usage ();
 
   if (! error_state)
     {
-      octave_map stk = octave_call_stack::backtrace (nskip, curr_frame);
-
       if (nargout == 0)
         {
+          octave_map stk = octave_call_stack::backtrace (nskip, curr_frame);
           octave_idx_type nframes_to_display = stk.numel ();
 
           if (nframes_to_display > 0)
             {
               octave_preserve_stream_state stream_state (os);
 
               os << "stopped in:\n\n";
 
@@ -1268,16 +1267,20 @@ do_dbstack (const octave_value_list& arg
                 }
 
               if (show_top_level)
                 os << "  --> top level" << std::endl;
             }
         }
       else
         {
+          octave_map stk = octave_call_stack::backtrace (nskip,
+                                                         curr_frame,
+                                                         false);
+
           retval(1) = curr_frame < 0 ? 1 : curr_frame + 1;
           retval(0) = stk;
         }
     }
 
   return retval;
 }
 
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -296,17 +296,18 @@ static const octave_fields bt_fields (bt
 octave_map
 octave_call_stack::empty_backtrace (void)
 {
   return octave_map (dim_vector (0, 1), bt_fields);
 }
 
 octave_map
 octave_call_stack::do_backtrace (size_t nskip,
-                                 octave_idx_type& curr_user_frame) const
+                                 octave_idx_type& curr_user_frame,
+                                 bool print_subfn) const
 {
   size_t user_code_frames = do_num_user_code_frames (curr_user_frame);
 
   size_t nframes = nskip <= user_code_frames ? user_code_frames - nskip : 0;
 
   // Our list is reversed.
   curr_user_frame = nframes - curr_user_frame - 1;
 
@@ -335,17 +336,17 @@ octave_call_stack::do_backtrace (size_t 
                 nskip--;
               else
                 {
                   scope(k) = elt.scope;
                   context(k) = elt.context;
 
                   file(k) = f->fcn_file_name ();
                   std::string parent_fcn_name = f->parent_fcn_name ();
-                  if (parent_fcn_name == std::string ())
+                  if (! print_subfn || parent_fcn_name == std::string ())
                     name(k) = f->name ();
                   else
                     name(k) = f->parent_fcn_name () + Vfilemarker + f->name ();
 
                   line(k) = elt.line;
                   column(k) = elt.column;
 
                   k++;
diff --git a/libinterp/corefcn/toplev.h b/libinterp/corefcn/toplev.h
--- a/libinterp/corefcn/toplev.h
+++ b/libinterp/corefcn/toplev.h
@@ -273,17 +273,26 @@ public:
   {
     if (instance_ok ())
       instance->do_goto_base_frame ();
   }
 
   static octave_map backtrace (size_t nskip, octave_idx_type& curr_user_frame)
   {
     return instance_ok ()
-           ? instance->do_backtrace (nskip, curr_user_frame) : octave_map ();
+           ? instance->do_backtrace (nskip, curr_user_frame, true)
+           : octave_map ();
+  }
+
+  static octave_map backtrace (size_t nskip, octave_idx_type& curr_user_frame,
+                               bool print_subfn)
+  {
+    return instance_ok ()
+           ? instance->do_backtrace (nskip, curr_user_frame, print_subfn)
+           : octave_map ();
   }
 
   static octave_map empty_backtrace (void);
 
   static void pop (void)
   {
     if (instance_ok ())
       instance->do_pop ();
@@ -409,17 +418,18 @@ private:
       {
         call_stack_elt& elt = cs.back ();
 
         elt.column = c;
       }
   }
 
   octave_map do_backtrace (size_t nskip,
-                           octave_idx_type& curr_user_frame) const;
+                           octave_idx_type& curr_user_frame,
+                           bool print_subfn) const;
 
   bool do_goto_frame (size_t n, bool verbose);
 
   bool do_goto_frame_relative (int n, bool verbose);
 
   void do_goto_caller_frame (void);
 
   void do_goto_base_frame (void);
