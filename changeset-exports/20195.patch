# HG changeset patch
# User Rik <rik@octave.org>
# Date 1431029050 -7200
#      Thu May 07 22:04:10 2015 +0200
# Node ID ea5fdb2ae63756f25e84cb3460822932d646db97
# Parent  88efded3103729e58f967c81853752779c6f694e
num2str.m: Correctly parse newlines in single-quoted format strings (bug #44684).

* num2str.m: Use do_string_escapes on format specification before any further
processing.

diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -110,17 +110,18 @@ function retval = num2str (x, arg)
           ##        See %!xtest below
           fmt = sprintf ("%%%d.%dg", dgt+2+any (x(:) < 0), dgt);
         endif
       else
         ## Logical input
         fmt = "%3d";
       endif
     endif
-    fmt = [deblank(repmat(fmt, 1, columns(x))), "\n"];
+    fmt = do_string_escapes (fmt);  # required now that '\n' is interpreted.
+    fmt = [deblank(repmat (fmt, 1, columns (x))), "\n"];
     nd = ndims (x);
     tmp = sprintf (fmt, permute (x, [2, 1, 3:nd]));
     retval = strtrim (char (ostrsplit (tmp(1:end-1), "\n")));
   else   # Complex matrix input
     if (nargin == 2)
       if (ischar (arg))
         fmt = [arg "%-+" arg(2:end) "i"];
       elseif (isnumeric (arg) && isscalar (arg) && arg >= 0 && arg == fix (arg))
@@ -199,16 +200,19 @@ endfunction
 %!assert (num2str (complex (NA, 1)), "NA+1i")
 %!assert (num2str (complex (1, NA)), "1+NAi")
 
 ## FIXME: Integers greater than bitmax() should be masked to show just
 ##        16 digits of precision.
 %!xtest
 %! assert (num2str (1e23), "100000000000000000000000");
 
+## Test for bug #44864, extra rows generated from newlines in format
+%!assert (rows (num2str (magic (3), '%3d %3d %3d\n')), 3)
+
 %!error num2str ()
 %!error num2str (1, 2, 3)
 %!error <X must be a numeric> num2str ({1})
 %!error <PRECISION must be a scalar integer> num2str (1, {1})
 %!error <PRECISION must be a scalar integer> num2str (1, ones (2))
 %!error <PRECISION must be a scalar integer> num2str (1, -1)
 %!error <PRECISION must be a scalar integer> num2str (1+1i, {1})
 %!error <PRECISION must be a scalar integer> num2str (1+1i, ones (2))
