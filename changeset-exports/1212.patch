# HG changeset patch
# User jwe
# Date 797134863 0
#      Thu Apr 06 02:21:03 1995 +0000
# Node ID 7b9d52071a0c4b83d15a36668dada289ddf56df6
# Parent  ee2c6a67abe985851c094edfb75b4bbadf629563
[project @ 1995-04-06 02:21:03 by jwe]
Initial revision

diff --git a/liboctave/MArray-C.cc b/liboctave/MArray-C.cc
new file mode 100644
--- /dev/null
+++ b/liboctave/MArray-C.cc
@@ -0,0 +1,139 @@
+// MArray-C.cc                                            -*- C++ -*-
+/*
+
+Copyright (C) 1993, 1994, 1995 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+
+*/
+
+// Instantiate MArrays of Complex values.
+
+#include "MArray.h"
+#include "MArray.cc"
+
+#include <Complex.h>
+
+template class MArray<Complex>;
+template class MArray2<Complex>;
+template class MDiagArray<Complex>;
+
+template MArray<Complex>
+operator + (const MArray<Complex>& a, const Complex& s);
+
+template MArray<Complex>
+operator - (const MArray<Complex>& a, const Complex& s);
+
+template MArray<Complex>
+operator * (const MArray<Complex>& a, const Complex& s);
+
+template MArray<Complex>
+operator / (const MArray<Complex>& a, const Complex& s);
+
+template MArray<Complex>
+operator + (const Complex& s, const MArray<Complex>& a);
+
+template MArray<Complex>
+operator - (const Complex& s, const MArray<Complex>& a);
+
+template MArray<Complex>
+operator * (const Complex& s, const MArray<Complex>& a);
+
+template MArray<Complex>
+operator / (const Complex& s, const MArray<Complex>& a);
+
+template MArray<Complex>
+operator + (const MArray<Complex>& a, const MArray<Complex>& b);
+
+template MArray<Complex>
+operator - (const MArray<Complex>& a, const MArray<Complex>& b);
+
+template MArray<Complex>
+product (const MArray<Complex>& a, const MArray<Complex>& b);
+
+template MArray<Complex>
+quotient (const MArray<Complex>& a, const MArray<Complex>& b);
+
+template MArray<Complex>
+operator - (const MArray<Complex>& a);
+
+template MArray2<Complex>
+operator + (const MArray2<Complex>& a, const Complex& s);
+
+template MArray2<Complex>
+operator - (const MArray2<Complex>& a, const Complex& s);
+
+template MArray2<Complex>
+operator * (const MArray2<Complex>& a, const Complex& s);
+
+template MArray2<Complex>
+operator / (const MArray2<Complex>& a, const Complex& s);
+
+template MArray2<Complex>
+operator + (const Complex& s, const MArray2<Complex>& a);
+
+template MArray2<Complex>
+operator - (const Complex& s, const MArray2<Complex>& a);
+
+template MArray2<Complex>
+operator * (const Complex& s, const MArray2<Complex>& a);
+
+template MArray2<Complex>
+operator / (const Complex& s, const MArray2<Complex>& a);
+
+template MArray2<Complex>
+operator + (const MArray2<Complex>& a, const MArray2<Complex>& b);
+
+template MArray2<Complex>
+operator - (const MArray2<Complex>& a, const MArray2<Complex>& b);
+
+template MArray2<Complex>
+product (const MArray2<Complex>& a, const MArray2<Complex>& b);
+
+template MArray2<Complex>
+quotient (const MArray2<Complex>& a, const MArray2<Complex>& b);
+
+template MArray2<Complex>
+operator - (const MArray2<Complex>& a);
+
+template MDiagArray<Complex>
+operator * (const MDiagArray<Complex>& a, const Complex& s);
+
+template MDiagArray<Complex>
+operator / (const MDiagArray<Complex>& a, const Complex& s);
+
+template MDiagArray<Complex>
+operator * (const Complex& s, const MDiagArray<Complex>& a);
+
+template MDiagArray<Complex>
+operator + (const MDiagArray<Complex>& a, const MDiagArray<Complex>& b);
+
+template MDiagArray<Complex>
+operator - (const MDiagArray<Complex>& a, const MDiagArray<Complex>& b);
+
+template MDiagArray<Complex>
+product (const MDiagArray<Complex>& a, const MDiagArray<Complex>& b);
+
+template MDiagArray<Complex>
+operator - (const MDiagArray<Complex>& a);
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; page-delimiter: "^/\\*" ***
+;;; End: ***
+*/
diff --git a/liboctave/MArray-d.cc b/liboctave/MArray-d.cc
new file mode 100644
--- /dev/null
+++ b/liboctave/MArray-d.cc
@@ -0,0 +1,137 @@
+// MArray-d.cc                                            -*- C++ -*-
+/*
+
+Copyright (C) 1993, 1994, 1995 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+
+*/
+
+// Instantiate MArrays of double values.
+
+#include "MArray.h"
+#include "MArray.cc"
+
+template class MArray<double>;
+template class MArray2<double>;
+template class MDiagArray<double>;
+
+template MArray<double>
+operator + (const MArray<double>& a, const double& s);
+
+template MArray<double>
+operator - (const MArray<double>& a, const double& s);
+
+template MArray<double>
+operator * (const MArray<double>& a, const double& s);
+
+template MArray<double>
+operator / (const MArray<double>& a, const double& s);
+
+template MArray<double>
+operator + (const double& s, const MArray<double>& a);
+
+template MArray<double>
+operator - (const double& s, const MArray<double>& a);
+
+template MArray<double>
+operator * (const double& s, const MArray<double>& a);
+
+template MArray<double>
+operator / (const double& s, const MArray<double>& a);
+
+template MArray<double>
+operator + (const MArray<double>& a, const MArray<double>& b);
+
+template MArray<double>
+operator - (const MArray<double>& a, const MArray<double>& b);
+
+template MArray<double>
+product (const MArray<double>& a, const MArray<double>& b); 
+
+template MArray<double>
+quotient (const MArray<double>& a, const MArray<double>& b);
+
+template MArray<double>
+operator - (const MArray<double>& a);
+
+template MArray2<double>
+operator + (const MArray2<double>& a, const double& s);
+
+template MArray2<double>
+operator - (const MArray2<double>& a, const double& s);
+
+template MArray2<double>
+operator * (const MArray2<double>& a, const double& s);
+
+template MArray2<double>
+operator / (const MArray2<double>& a, const double& s);
+
+template MArray2<double>
+operator + (const double& s, const MArray2<double>& a);
+
+template MArray2<double>
+operator - (const double& s, const MArray2<double>& a);
+
+template MArray2<double>
+operator * (const double& s, const MArray2<double>& a);
+
+template MArray2<double>
+operator / (const double& s, const MArray2<double>& a);
+
+template MArray2<double>
+operator + (const MArray2<double>& a, const MArray2<double>& b);
+
+template MArray2<double>
+operator - (const MArray2<double>& a, const MArray2<double>& b);
+
+template MArray2<double>
+product (const MArray2<double>& a, const MArray2<double>& b);
+
+template MArray2<double>
+quotient (const MArray2<double>& a, const MArray2<double>& b);
+
+template MArray2<double>
+operator - (const MArray2<double>& a);
+
+template MDiagArray<double>
+operator * (const MDiagArray<double>& a, const double& s);
+
+template MDiagArray<double>
+operator / (const MDiagArray<double>& a, const double& s);
+
+template MDiagArray<double>
+operator * (const double& s, const MDiagArray<double>& a);
+
+template MDiagArray<double>
+operator + (const MDiagArray<double>& a, const MDiagArray<double>& b);
+
+template MDiagArray<double>
+operator - (const MDiagArray<double>& a, const MDiagArray<double>& b);
+
+template MDiagArray<double>
+product (const MDiagArray<double>& a, const MDiagArray<double>& b);
+
+template MDiagArray<double>
+operator - (const MDiagArray<double>& a);
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; page-delimiter: "^/\\*" ***
+;;; End: ***
+*/
