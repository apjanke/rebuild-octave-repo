# HG changeset patch
# User jwe
# Date 1163445623 0
#      Mon Nov 13 19:20:23 2006 +0000
# Node ID a46f14cdbecd78b0c9cb5002e677b53d2ec98f70
# Parent  ab500899887673bac0ef6256058b4fb3e72887de
[project @ 2006-11-13 19:20:23 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2006-11-13  John W. Eaton  <jwe@octave.org>
+
+	* plot/mesh.m: Use size_equal to compare dimensions.
+
 2006-11-13  Søren Hauberg  <soren@hauberg.org>
 
 	* plot/mesh.m: Simplify.  Set hidden3d for the plot.
 
 2006-11-11  Søren Hauberg  <soren@hauberg.org>
 
 	* miscellaneous/copyfile.m: Fix docs to match function.
 
diff --git a/scripts/plot/mesh.m b/scripts/plot/mesh.m
--- a/scripts/plot/mesh.m
+++ b/scripts/plot/mesh.m
@@ -45,18 +45,17 @@ function mesh (x, y, z)
         x = repmat(x(:)', length (y), 1);
         y = repmat(y(:), 1, length (x));
       else
         msg = "mesh: rows (z) must be the same as length (y) and";
         msg = sprintf ("%s\ncolumns (z) must be the same as length (x)", msg);
         error (msg);
       endif
     elseif (ismatrix (x) && ismatrix (y) && ismatrix (z))
-      if (ndims (x) != ndims (y) || ndims (x) != ndims (z)
-	  || size (x) != size (y) || size (x) != size (z))
+      if (! (size_equal (x, y) && size_equal (x, z)))
         error ("mesh: x, y, and z must have same dimensions");
       endif
     else
       error ("mesh: x and y must be vectors and z must be a matrix");
     endif
   else
     print_usage ();
   endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2006-11-13  John W. Eaton  <jwe@octave.org>
+
+	* data.cc (Fsize_equal): New function.
+
 2006-11-13  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* ov.cc (check_subsref_elements, Fsubsref, Fsubsasgn):
 	New functions.
 
 	* ov-re-mat.h, ov-scalar.h, pr-output.h:
 	Sprinkle with OCTAVE_API as needed.
 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1076,36 +1076,62 @@ returns the number of columns in the giv
 	}
     }
   else
     print_usage ();
 
   return retval;
 }
 
+DEFUN (size_equal, args, ,
+   "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} size_equal (@var{a}, @var{b})\n\
+Return true if the dimensions of @var{a} and @var{b} agree.\n\
+Trailing singleton dimensions are ignored.\n\
+@seealso{size, numel}\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 2)
+    {
+      dim_vector a_dims = args(0).dims ();
+      dim_vector b_dims = args(1).dims ();
+
+      a_dims.chop_trailing_singletons ();
+      b_dims.chop_trailing_singletons ();
+
+      retval = a_dims == b_dims;
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
 DEFUN (nnz, args, ,
    "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {@var{scalar} =} nnz (@var{a})\n\
-returns number of non zero elements in @var{a}.\n\
+@deftypefn {Built-in Function} {@var{scalar} =} nnz (@var{a})\n\
+Returns the number of non zero elements in @var{a}.\n\
 @seealso{sparse}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).nnz ();
   else
     print_usage ();
 
   return retval;
 }
 
 DEFUN (nzmax, args, ,
    "-*- texinfo -*-\n\
-@deftypefn {Loadable Function} {@var{scalar} =} nzmax (@var{SM})\n\
+@deftypefn {Built-in Function} {@var{scalar} =} nzmax (@var{SM})\n\
 Return the amount of storage allocated to the sparse matrix @var{SM}.\n\
 Note that Octave tends to crop unused memory at the first oppurtunity\n\
 for sparse objects. There are some cases of user created sparse objects\n\
 where the value returned by @dfn{nzmaz} will not be the same as @dfn{nnz},\n\
 but in general they will give the same result.\n\
 @seealso{sparse, spalloc}\n\
 @end deftypefn")
 {
