# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1456686444 0
#      Sun Feb 28 19:07:24 2016 +0000
# Node ID 120bb822c6f4a30217a174f40d28da2b21854976
# Parent  0daaca2991027e4996b1add289b2954c62e5e71a
Handle empty vectors for size of ones(), zeros(), inf(), etc... (bug #47298)

* utils.cc (get_dimensions): handle empty vectors for size.  Bug is that
empty vectors of size 0x1, 1x0, and 0x1x1, would return a single element.
Origin of the bug is that dim.redim(n) would still leave 2 dimensions even
if n<2.  When n=0 (n=1 had a separate path), dim would still have 2 but the
loop over the dimensions vector would then never run, leaving dim_vector
intact, i.e., of size 1x1.
* data.cc: add tests for ones(), zeros(), inf(), nan(), and other functions
that follow the same code path.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -4232,16 +4232,33 @@ val = ones (m,n, \"uint8\")\n\
 %!assert (size (ones (3, 4, 5, "single")), [3, 4, 5])
 
 %!assert (ones (3, "int8"), int8 ([1, 1, 1; 1, 1, 1; 1, 1, 1]))
 %!assert (ones (2, 3, "int8"), int8 ([1, 1, 1; 1, 1, 1]))
 %!assert (ones (3, 2, "int8"), int8 ([1, 1; 1, 1; 1, 1]))
 %!assert (size (ones (3, 4, 5, "int8")), [3, 4, 5])
 */
 
+/*
+## Tests for bug #47298
+## Matlab requires the size to be a row vector.  In that logic, it supports
+## n to be a 1x0 vector (returns 0x0) but not a 0x1 vector.  Octave supports
+## any vector and therefore must support 0x1, 1x0, and 0x0x1 (but not 0x1x1).
+%!test
+%! funcs = {@zeros, @ones, @inf, @nan, @NA, @i, @pi, @e};
+%! for idx = 1:numel (funcs)
+%!   func = funcs{idx};
+%!   assert (func (zeros (1, 0)), zeros (0, 0))
+%!   assert (func (zeros (0, 1)), zeros (0, 0))
+%!   assert (func (zeros (0, 1, 1)), zeros (0, 0))
+%!   fail ([func2str(func) " ([])"])
+%!   fail ([func2str(func) " (zeros (0, 0, 1))"])
+%! endfor
+*/
+
 DEFUN (zeros, args, ,
        "-*- texinfo -*-\n\
 @deftypefn  {} {} zeros (@var{n})\n\
 @deftypefnx {} {} zeros (@var{m}, @var{n})\n\
 @deftypefnx {} {} zeros (@var{m}, @var{n}, @var{k}, @dots{})\n\
 @deftypefnx {} {} zeros ([@var{m} @var{n} @dots{}])\n\
 @deftypefnx {} {} zeros (@dots{}, @var{class})\n\
 Return a matrix or N-dimensional array whose elements are all 0.\n\
diff --git a/libinterp/corefcn/utils.cc b/libinterp/corefcn/utils.cc
--- a/libinterp/corefcn/utils.cc
+++ b/libinterp/corefcn/utils.cc
@@ -1113,36 +1113,39 @@ check_dimensions (dim_vector& dim, const
                      "%s: converting negative dimension to zero", warnfor);
 }
 
 
 void
 get_dimensions (const octave_value& a, const char *warn_for,
                 dim_vector& dim)
 {
-  if (a.is_scalar_type ())
+  // We support dimensions to be specified by any vector, even if it's a
+  // vector of dimensions 0x1, 1x0, 1x1x0, or 1x1x6.  If the vector ends
+  // up being empty, the final dimensions end up being 0x0.
+  if (! a.dims ().is_vector ())
+    error ("%s (A): use %s (size (A)) instead", warn_for, warn_for);
+
+  const Array<int> v = a.int_vector_value ();
+  const octave_idx_type n = v.numel ();
+
+  dim.resize (n); // even if n < 2, resize sets it back to 2
+  if (n == 0)
     {
-      dim.resize (2);
-      dim(0) = a.idx_type_value ();
-      dim(1) = dim(0);
+      dim(0) = 0;
+      dim(1) = 0;
+    }
+  else if (n == 1)
+    {
+      dim(0) = v(0);
+      dim(1) = v(0);
     }
   else
-    {
-      octave_idx_type nr = a.rows ();
-      octave_idx_type nc = a.columns ();
-
-      if (nr != 1 && nc != 1)
-        error ("%s (A): use %s (size (A)) instead", warn_for, warn_for);
-
-      Array<double> v = a.vector_value ();
-      octave_idx_type n = v.numel ();
-      dim.resize (n);
-      for (octave_idx_type i = 0; i < n; i++)
-        dim(i) = static_cast<int> (fix (v(i)));
-    }
+    for (octave_idx_type i = 0; i < n; i++)
+      dim(i) = v(i);
 
   check_dimensions (dim, warn_for);
 }
 
 
 void
 get_dimensions (const octave_value& a, const char *warn_for,
                 octave_idx_type& nr, octave_idx_type& nc)
