# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1504022508 -7200
#      Tue Aug 29 18:01:48 2017 +0200
# Node ID 1a0cbb573a67850edc63e75d885259f514ac6555
# Parent  3dd89a7b92c89d28d69053e92d0dc6676f903a4d
publish: Improve escaping of special characters in output (bug #51782)

* scripts/general/publish.m: Make use of new publish formatter interface
function "do_escape_special_chars".  Replace (TM) and (R) by placeholders.
Avoid unnecessary merging of text paragraphs.

* scripts/general/private/__publish_html_output__.m: New publish formatter
interface function "do_escape_special_chars" to properly escape HTML entities.
Usage where appropiate.

* scripts/general/private/__publish_latex_output__.m: Rename "escape_latex" to
a more general purpose escaping function "do_escape_special_chars" of all
formatters.  Usage where appropiate.  Extend escaped LaTeX characters.

* test/publish/test_script.m: Various new stress test cases for publish markup.

diff --git a/scripts/general/private/__publish_html_output__.m b/scripts/general/private/__publish_html_output__.m
--- a/scripts/general/private/__publish_html_output__.m
+++ b/scripts/general/private/__publish_html_output__.m
@@ -88,16 +88,19 @@
 ## @item
 ## @samp{link} (url_str, url_str, str)
 ##
 ## @item
 ## @samp{TM} ()
 ##
 ## @item
 ## @samp{R} ()
+##
+## @item
+## @samp{escape_special_chars} (str)
 ## @end itemize
 ## @end deftypefn
 
 function outstr = __publish_html_output__ (type, varargin)
   outstr = feval (["do_" type], varargin{:});
 endfunction
 
 function outstr = do_output_file_extension ()
@@ -203,16 +206,17 @@ m_source_str,
 "</html>");
 endfunction
 
 function outstr = do_code (str)
   outstr = ["\n", '<pre class="oct-code">' syntax_highlight(str) "</pre>\n"];
 endfunction
 
 function outstr = do_code_output (str)
+  str = do_escape_special_chars (str);
   outstr = ["\n", '<pre class="oct-code-output">' str "</pre>\n"];
 endfunction
 
 function outstr = do_section (varargin)
   persistent counter = 1;
 
   if (nargin == 0)
     outstr = "";
@@ -228,16 +232,17 @@ function outstr = do_section (varargin)
 
 endfunction
 
 function outstr = do_preformatted_code (str)
   outstr = ["\n", '<pre class="pre-code">' syntax_highlight(str) "</pre>\n"];
 endfunction
 
 function outstr = do_preformatted_text (str)
+  str = do_escape_special_chars (str);
   outstr = ["\n", '<pre class="pre-text">' str "</pre>\n"];
 endfunction
 
 function outstr = do_bulleted_list (cstr)
   outstr = "\n<ul>\n";
   for i = 1:numel (cstr)
     outstr = [outstr, "<li>" cstr{i} "</li>\n"];
   endfor
@@ -295,19 +300,27 @@ endfunction
 function outstr = do_TM ()
   outstr = "&trade;";
 endfunction
 
 function outstr = do_R ()
   outstr = "&reg;";
 endfunction
 
+function str = do_escape_special_chars (str)
+  str = regexprep (str, '&', '&amp;');
+  str = regexprep (str, '<', '&lt;');
+  str = regexprep (str, '>', '&gt;');
+  ## str = regexprep (str, '"', '&quot;'); ## MATLAB R2017a compatibility.
+endfunction
+
 ## SYNTAX_HIGHLIGHT: A primitive parser to highlight syntax via <span> tags.
 ## FIXME: Needs to be replaced by a better solution.
 function outstr = syntax_highlight (str)
+  str = do_escape_special_chars (str);
   outstr = "";
   placeholder_cstr = {};
   i = 1;
   plh = 0;
 
   while (i <= numel (str))
     ## Block comment
     if (any (strncmp (str(i:end), {"%{", "#{"}, 2)))
diff --git a/scripts/general/private/__publish_latex_output__.m b/scripts/general/private/__publish_latex_output__.m
--- a/scripts/general/private/__publish_latex_output__.m
+++ b/scripts/general/private/__publish_latex_output__.m
@@ -88,16 +88,19 @@
 ## @item
 ## @samp{link} (url_str, url_str, str)
 ##
 ## @item
 ## @samp{TM} ()
 ##
 ## @item
 ## @samp{R} ()
+##
+## @item
+## @samp{escape_special_chars} (str)
 ## @end itemize
 ## @end deftypefn
 
 function outstr = __publish_latex_output__ (type, varargin)
   outstr = feval (["do_" type], varargin{:});
 endfunction
 
 function outstr = do_output_file_extension ()
@@ -143,17 +146,17 @@ function outstr = do_header (title_str, 
 "",
 '\titleformat*{\section}{\Huge\bfseries}',
 '\titleformat*{\subsection}{\large\bfseries}',
 '\renewcommand{\contentsname}{\Large\bfseries Contents}',
 '\setlength{\parindent}{0pt}',
 "",
 '\begin{document}',
 "",
-['{\Huge\section*{' escape_latex(title_str) '}}'],
+['{\Huge\section*{' title_str '}}'],
 "",
 '\tableofcontents',
 '\vspace*{4em}',
 "");
 
   outstr = [publish_comment, latex_preamble, listings_option, latex_head];
 
 endfunction
@@ -173,18 +176,18 @@ str,
 '\end{lstlisting}');
 endfunction
 
 function outstr = do_section (str)
   outstr = sprintf ("%s\n",
 "",
 "",
 '\phantomsection',
-['\addcontentsline{toc}{section}{' escape_latex(str) '}'],
-['\subsection*{' escape_latex(str) '}'],
+['\addcontentsline{toc}{section}{' str '}'],
+['\subsection*{' str '}'],
 "");
 endfunction
 
 function outstr = do_preformatted_code (str)
   outstr = sprintf ("%s\n",
 '\begin{lstlisting}',
 str,
 '\end{lstlisting}');
@@ -195,25 +198,25 @@ function outstr = do_preformatted_text (
 '\begin{lstlisting}[language={}]',
 str,
 '\end{lstlisting}');
 endfunction
 
 function outstr = do_bulleted_list (cstr)
   outstr = ["\n" '\begin{itemize}' "\n"];
   for i = 1:numel (cstr)
-    outstr = [outstr, '\item ' escape_latex(cstr{i}) "\n"];
+    outstr = [outstr, '\item ' cstr{i} "\n"];
   endfor
   outstr = [outstr, '\end{itemize}' "\n"];
 endfunction
 
 function outstr = do_numbered_list (cstr)
   outstr = ["\n" '\begin{enumerate}' "\n"];
   for i = 1:numel (cstr)
-    outstr = [outstr, '\item ' escape_latex(cstr{i}) "\n"];
+    outstr = [outstr, '\item ' cstr{i} "\n"];
   endfor
   outstr = [outstr, "\\end{enumerate}\n"];
 endfunction
 
 function outstr = do_graphic (str)
   outstr = sprintf ("%s\n",
 '\begin{figure}[!ht]',
 ['\includegraphics[width=\textwidth]{' str '}'],
@@ -228,17 +231,17 @@ function outstr = do_latex (str)
   outstr = ["\n" str "\n"];
 endfunction
 
 function outstr = do_link (url_str, str)
   outstr = ['\href{' url_str '}{' str '}'];
 endfunction
 
 function outstr = do_text (str)
-  outstr = ["\n\n" escape_latex(str) "\n\n"];
+  outstr = ["\n\n" str "\n\n"];
 endfunction
 
 function outstr = do_blockmath (str)
   outstr = ["$$" str "$$"];
 endfunction
 
 function outstr = do_inlinemath (str)
   outstr = ["$" str "$"];
@@ -259,17 +262,19 @@ endfunction
 function outstr = do_TM ()
   outstr = '\texttrademark ';
 endfunction
 
 function outstr = do_R ()
   outstr = '\textregistered ';
 endfunction
 
-function str = escape_latex (str)
-  ## Escape "&", "%", "#", "_", "~", "^", "<", ">"
-  ## FIXME: What about: "\", "{", "}"
-  str = regexprep (str, '(?<!\\)(&|%|#|_)', '\\$1');
-  str = regexprep (str, '(?<!\\)(~)', "\\ensuremath{\\tilde{\;}}");
-  str = regexprep (str, '(?<!\\)(\^)', "\\^{}");
-  str = regexprep (str, '(?<!\\)(<)', "\\ensuremath{<}");
-  str = regexprep (str, '(?<!\\)(>)', "\\ensuremath{>}");
+function str = do_escape_special_chars (str)
+  ## Escape \, {, }, &, %, #, _, ~, ^, <, >
+  str = regexprep (str, '\\', "\\ensuremath{\\backslash}");
+  str = regexprep (str, '(?<!\\)(\{|\}|&|%|#|_)', '\\$1');
+  ## Revert accidential {} replacements for backslashes
+  str = strrep (str, '\ensuremath\{\backslash\}', '\ensuremath{\backslash}');
+  str = regexprep (str, '(?<!\\)~', "\\ensuremath{\\tilde{\\;}}");
+  str = regexprep (str, '(?<!\\)\^', "\\^{}");
+  str = regexprep (str, '(?<!\\)<', "\\ensuremath{<}");
+  str = regexprep (str, '(?<!\\)>', "\\ensuremath{>}");
 endfunction
diff --git a/scripts/general/publish.m b/scripts/general/publish.m
--- a/scripts/general/publish.m
+++ b/scripts/general/publish.m
@@ -680,24 +680,18 @@ function p_content = parse_paragraph_con
 
     ## Now it can be only normal text or markups belonging to normal text
     ## that are handled while output generation:
     ##
     ## * Italic "_", bold "*", and monospaced "|" text
     ## * Inline "$" and block "$$" LaTeX math
     ## * Links
     ## * Trademark symbols
-    block = strjoin (block, "\n");
-    if (isempty (p_content) || ! strcmp (p_content{end}.type, "text"))
-      p_content{end+1}.type = "text";
-      p_content{end}.content = block;
-    else
-      p_content{end}.content = strjoin ({p_content{end}.content, block}, ...
-                                        "\n");
-    endif
+    p_content{end+1}.type = "text";
+    p_content{end}.content = strjoin (block, "\n");
   endfor
 endfunction
 
 
 function m_source = read_file_to_cellstr (file)
   ## READ_FILE_TO_CELLSTR reads a given file line by line into a cellstring
 
   fid = fopen (file, "r");
@@ -725,17 +719,18 @@ function ofile = create_output (doc, opt
   endswitch
 
   ## Use title, or if not given, the m-file name
   title_str = doc.title;
   if (isempty (title_str))
     [~, title_str] = fileparts (doc.m_source_file_name);
   endif
 
-  content = formatter ("header", title_str,
+  content = formatter ("header",
+                       formatter ("escape_special_chars", title_str),
                        format_output (doc.intro, formatter, options),
                        get_toc (doc.body, formatter));
   content = [content, format_output(doc.body, formatter, options)];
   content = [content, formatter("footer", strjoin (doc.m_source, "\n"))];
 
   ## Write file
   [~, ofile] = fileparts (doc.m_source_file_name);
   ofile_name = [ofile, formatter("output_file_extension")];
@@ -778,17 +773,17 @@ function str = format_output (cstr, form
   ##   formatter has the only knowledge how to enforce the target format
   ##   and produces for each block the necessary target format source string.
 
   str = "";
   for i = 1:numel (cstr)
     switch (cstr{i}.type)
       case "code"
         if (options.showCode)
-          str = [str, formatter(cstr{i}.type, cstr{i}.content)];
+          str = [str, formatter("code", cstr{i}.content)];
         endif
         if ((options.evalCode) && (! isempty (cstr{i}.output)))
           str = [str, formatter("code_output", cstr{i}.output)];
         endif
       case {"text", "section"}
         str = [str, formatter(cstr{i}.type, ...
                               format_text (cstr{i}.content, formatter))];
       case {"bulleted_list", "numbered_list"}
@@ -837,24 +832,26 @@ function str = format_text (str, formatt
   ## 1) Links "<http://www.someurl.com>"
   ## 2) Links "<octave:Function TEXT>"
   ## 3) Links "<http://www.someurl.com TEXT>"
   ## 4) LaTeX block math "$$x^2$$"
   ## 5) LaTeX inline math "$x^2$"
   ## 6) Bold *text*
   ## 7) Italic _text_
   ## 8) Monospaced |text|
+  ## 9) (TM) or (R)
   regexes = {'<\S{3,}[^\s<>]*>', ...
              '<octave:[^\s<>]* *[^<>$]*>', ...
              '<\S{3,}[^\s<>]* *[^<>$]*>', ...
              regex_helper('\$\$', '$'), ...
              regex_helper('\$', '$'), ...
              regex_helper('\*', '*'), ...
              regex_helper('_', '_'), ...
-             regex_helper('\|', '|')};
+             regex_helper('\|', '|'), ...
+             '\((TM|R)\)'};
 
   ## Function to escape some special characters for the GNU Octave manual,
   ## see https://www.gnu.org/software/texinfo/manual/texinfo/html_node/HTML-Xref-Node-Name-Expansion.html
   texinfo_esc = @(str) strrep (strrep (str, "-", "_002d"), "_", "_005f");
 
   ## Substitute all occurrences with placeholders
   placeholder_cstr = {};
   plh = 0;
@@ -907,24 +904,27 @@ function str = format_text (str, formatt
           ## Italic
           txt = cstr{j};
           cstr{j} = formatter ("italic", format_text (txt(2:end-1), formatter));
         case 8
           ## Monospaced
           txt = cstr{j};
           cstr{j} = formatter ("monospaced", format_text (txt(2:end-1), ...
                                formatter));
+        case 9
+          ## (TM) or (R)
+          txt = cstr{j};
+          cstr{j} = formatter (txt(2:end-1));
       endswitch
     endfor
     placeholder_cstr = [placeholder_cstr, cstr];
   endfor
 
   ## Replace special symbols
-  str = strrep (str, "(TM)", formatter ("TM"));
-  str = strrep (str, "(R)", formatter ("R"));
+  str = formatter ("escape_special_chars", str);
 
   ## Restore placeholders
   for i = plh:-1:1
     str = strrep (str, ["PUBLISHPLACEHOLDER" sprintf("%d", i)],
                        placeholder_cstr{i});
   endfor
 
 endfunction
diff --git a/test/publish/test_script.m b/test/publish/test_script.m
--- a/test/publish/test_script.m
+++ b/test/publish/test_script.m
@@ -91,16 +91,22 @@ plot (y,x)
 # _ITALIC *BOLD |MONOSPACED| TEXT*_
 # |MONOSPACED *BOLD _ITALIC_ TEXT*|
 #
 # Bad inlining should not work |MONOSPACED *BOLD TEXT|*
 
 % again another plot
 plot (x,y)
 
+%% *BOLD*, _ITALIC_, |MONOSPACED| <http://www.someURL.com *Header* (R)>
+%
+
+## *BOLD*, _ITALIC_, |MONOSPACED| <http://www.someURL.com *Header* (R)>
+#
+
 %% Bulleted List
 %
 % * BULLETED ITEM 1
 % * BULLETED ITEM 2
 % * BULLETED ITEM 3 *BOLD*
 % * BULLETED ITEM 4 <http://www.someURL.com>
 %
 
@@ -170,26 +176,34 @@ plot (x,y)
 %
 
 ## External Graphic
 #
 # <<test_script-1.png>>
 #
 
 %% Inline LaTeX
+% This should be escaped properly: \, {, }, &, %, #, _, ~, ^, <, >
+%
 % $f(n) = n^5 + 4n^2 + 2 |_{n=17}$
+%
+% $$f(n) = n^5 + 4n^2 + 2 |_{n=17}$$
+%
+% $$e^x = \lim\limits_{n\rightarrow\infty}\left(1+\dfrac{x}{n}\right)^{n}$$
+%
 
 ## Inline LaTeX
+# This should be escaped properly: \, {, }, &, %, #, _, ~, ^, <, >
+#
 # $f(n) = n^5 + 4n^2 + 2 |_{n=17}$
-
-%% Block LaTeX
-% $$f(n) = n^5 + 4n^2 + 2 |_{n=17}$$
-
-## Block LaTeX
+#
 # $$f(n) = n^5 + 4n^2 + 2 |_{n=17}$$
+#
+# $$e^x = \lim\limits_{n\rightarrow\infty}\left(1+\dfrac{x}{n}\right)^{n}$$
+#
 
 %% Links
 % <https://www.gnu.org/software/octave>
 % <https://www.gnu.org/software/octave GNU Octave Homepage>
 % <octave:plot DISPLAYED TEXT FOR PLOT FUNCTION>
 % <octave:abs Nested markup and newline
 % PLAIN TEXT(TM) _ITALIC TEXT_(R) *BOLD TEXT* |MONOSPACED TEXT|>
 % <https://www.gnu.org/software/octave Nested markup and newline
@@ -201,92 +215,118 @@ plot (x,y)
 # <https://www.gnu.org/software/octave GNU Octave Homepage>
 # <octave:plot DISPLAYED TEXT FOR PLOT FUNCTION>
 # <octave:abs Nested markup and newline
 # PLAIN TEXT(TM) _ITALIC TEXT_(R) *BOLD TEXT* |MONOSPACED TEXT|>
 # <https://www.gnu.org/software/octave Nested markup and newline
 # PLAIN TEXT(TM) _ITALIC TEXT_(R) *BOLD TEXT* |MONOSPACED TEXT|>
 #
 
-%% HTML Markup
+%% Code with HTML/LaTeX special chars
+%
+
+function ret = foo (a, b)
+  ret = (a > b) && (a < b^a);
+endfunction
+sprintf ("(a > b) && (a < b^a) = %f", foo (0, 1))
+
+%% HTML Markup & < > "
+% This should be escaped properly: & < > "
+%
+% The HTML entity should remain visible: &amp; &lt; &gt; &quot;
+%
+% The HTML entity should remain visible: |&amp;| |&lt;| |&gt;| |&quot;|
+%
+
+## HTML Markup & < > "
+# This should be escaped properly: & < > "
+#
+# The HTML entity should remain visible: &amp; &lt; &gt; &quot;
+#
+# The HTML entity should remain visible: |&amp;| |&lt;| |&gt;| |&quot;|
+#
+
+%% HTML block markup
 % <html>
 % <table><tr>
 % <td style="border: 1px solid black;">one</td>
-% <td style="border: 1px solid black;">two</td></tr></table>
+% <td style="border: 1px solid black;">two</td>
+% </tr>
+% </table>
 % </html>
 %
 
-## HTML Markup
+## HTML block markup
 # <html>
 # <table>
 # <tr>
 # <td style="border: 1px solid black;">one</td>
 # <td style="border: 1px solid black;">two</td>
 # </tr>
 # </table>
 # </html>
 #
 
-%% HTML Markup with empty lines
+%% HTML block markup with empty lines
 % <html>
 % <table><tr>
 % <td style="border: 1px solid black;">one</td>
 % <td style="border: 1px solid black;">two</td></tr>
 % </table>
 %
 % and some text.
 % </html>
 %
 
-## HTML Markup with empty lines
+## HTML block markup with empty lines
 # <html>
 # <table>
 # <tr>
 # <td style="border: 1px solid black;">one</td>
 # <td style="border: 1px solid black;">two</td>
 # </tr>
 # </table>
 #
 # and some text.
 # </html>
 #
 
-%% LaTeX Markup
+%% LaTeX block markup
 % <latex>
 % \begin{equation}
 % \begin{pmatrix}
 % 1 & 2 \\ 3 & 4
 % \end{pmatrix}
 % \end{equation}
 % </latex>
 %
 
-## LaTeX Markup
+## LaTeX block markup
 # <latex>
 # \begin{equation}
 # \begin{pmatrix}
 # 1 & 2 \\ 3 & 4
 # \end{pmatrix}
 # \end{equation}
 # </latex>
 #
 
-%% LaTeX Markup with empty lines
+%% LaTeX block markup with empty lines
 % <latex>
 % Some text
 %
 % \begin{equation}
 % \begin{pmatrix}
 % 1 & 2 \\ 3 & 4
 % \end{pmatrix}
 % \end{equation}
 % </latex>
 %
 
-## LaTeX Markup with empty lines
+## LaTeX block markup with empty lines
 # <latex>
 # Some text
 #
 # \begin{equation}
 # \begin{pmatrix}
 # 1 & 2 \\ 3 & 4
 # \end{pmatrix}
 # \end{equation}
