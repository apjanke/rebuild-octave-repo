# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294930813 18000
#      Thu Jan 13 10:00:13 2011 -0500
# Node ID 6dbf9bcce90e0152e93ad7a2683f400def5f619b
# Parent  a1386fab2a023ea554029c783512eea6cf371a7b
more data member initialization fixes

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2011-01-13  John W. Eaton  <jwe@octave.org>
+
+	* base-list.h (class octave_base_list): Provide explicit
+	default and copy construtors, assignment operator, and destructor.
+	* load-path.h (load_path::dir_info::class_info): Likewise.
+
+	* load-path.h (load_path::dir_info::dir_info): Initialize all
+	members in initializaition list.
+	* lex.h (lexical_feedback::lexical_feedback): Likewise.
+
 2011-01-13  John W. Eaton  <jwe@octave.org>
 
 	* cutils.h: New file.
 	(octave_sleep, octave_usleep, octave_raw_vsnprintf): Move decls
 	here from utils.h.
 	* Makefile.am (octinclude_HEADERS): Add cutils.h to the list.
 	* utils.h: Include cutils.h.
 	* cutils.c: Include cutils.h.
diff --git a/src/base-list.h b/src/base-list.h
--- a/src/base-list.h
+++ b/src/base-list.h
@@ -81,14 +81,31 @@ public:
   void push_back (const elt_type& s) { lst.push_back (s); }
 
   void pop_front (void) { lst.pop_front (); }
   void pop_back (void) { lst.pop_back (); }
 
   // For backward compatibility.
   void append (const elt_type& s) { lst.push_back (s); }
 
+protected:
+
+  octave_base_list (void) : lst () { }
+
+  octave_base_list (const octave_base_list& bl) : lst (bl.lst) { }
+
+  octave_base_list& operator = (const octave_base_list& bl)
+    {
+      if (this != &bl)
+        {
+          lst = bl.lst;
+        }
+      return *this;
+    }
+
+  ~octave_base_list (void) { }
+
 private:
 
   std::list<elt_type> lst;
 };
 
 #endif
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -52,17 +52,30 @@ extern void prep_lexer_for_function_file
 
 // For communication between the lexer and parser.
 
 class
 lexical_feedback
 {
 public:
 
-  lexical_feedback (void) { init (); }
+  lexical_feedback (void)
+    : bracketflag (0), braceflag (0), looping (0),
+      convert_spaces_to_comma (true), at_beginning_of_statement (true),
+      defining_func (0), looking_at_function_handle (false),
+      looking_at_return_list (false), looking_at_parameter_list (false),
+      looking_at_decl_list (false), looking_at_initializer_expression (false),
+      looking_at_matrix_or_assign_lhs (false), looking_at_object_index (),
+      looking_for_object_index (false), looking_at_indirect_ref (false),
+      parsed_function_name (), parsing_class_method (false),
+      maybe_classdef_get_set_method (false), parsing_classdef (false),
+      quote_is_transpose (false), pending_local_variables ()
+    {
+      init ();
+    }
 
   ~lexical_feedback (void) { }
 
   void init (void);
 
   // Square bracket level count.
   int bracketflag;
 
diff --git a/src/load-path.h b/src/load-path.h
--- a/src/load-path.h
+++ b/src/load-path.h
@@ -256,32 +256,60 @@ private:
     // <FCN_NAME, TYPE>
     typedef std::map<std::string, int> fcn_file_map_type;
 
     typedef fcn_file_map_type::const_iterator const_fcn_file_map_iterator;
     typedef fcn_file_map_type::iterator fcn_file_map_iterator;
 
     struct class_info
     {
+      class_info (void) : method_file_map (), private_file_map () { }
+
+      class_info (const class_info& ci)
+        : method_file_map (ci.method_file_map),
+          private_file_map (ci.private_file_map) { }
+
+      class_info& operator = (const class_info& ci)
+      {
+        if (this != &ci)
+          {
+            method_file_map = ci.method_file_map;
+            private_file_map = ci.private_file_map;
+          }
+        return *this;
+      }
+
+      ~class_info (void) { }
+
       fcn_file_map_type method_file_map;
       fcn_file_map_type private_file_map;
     };
 
     // <CLASS_NAME, CLASS_INFO>
     typedef std::map<std::string, class_info> method_file_map_type;
 
     typedef method_file_map_type::const_iterator const_method_file_map_iterator;
     typedef method_file_map_type::iterator method_file_map_iterator;
 
     // This default constructor is only provided so we can create a
     // std::map of dir_info objects.  You should not use this
     // constructor for any other purpose.
-    dir_info (void) { }
+    dir_info (void)
+      : dir_name (), abs_dir_name (), is_relative (false),
+        dir_mtime (), dir_time_last_checked (), all_files (),
+        fcn_files (), private_file_map (), method_file_map ()
+      { }
 
-    dir_info (const std::string& d) : dir_name (d) { initialize (); }
+    dir_info (const std::string& d)
+      : dir_name (d), abs_dir_name (), is_relative (false),
+        dir_mtime (), dir_time_last_checked (), all_files (),
+        fcn_files (), private_file_map (), method_file_map ()
+    {
+      initialize ();
+    }
 
     dir_info (const dir_info& di)
       : dir_name (di.dir_name), abs_dir_name (di.abs_dir_name),
         is_relative (di.is_relative),
         dir_mtime (di.dir_mtime),
         dir_time_last_checked (di.dir_time_last_checked), 
         all_files (di.all_files), fcn_files (di.fcn_files),
         private_file_map (di.private_file_map),
