# HG changeset patch
# User Jason Riedy <jason@acm.org>
# Date 1236736489 14400
#      Tue Mar 10 21:54:49 2009 -0400
# Node ID 3ecbc236e2e0dc9c435e2b76667715c998fc5714
# Parent  91d53dc37f793cbe9f252d2ae85f169e89d7294d
Have sparse LU return permutation matrices rather than sparse matrices.

This could well impact user code.  It'd be interesting to see if there
is any actual fall-out...  Quite often, the permutation matrices are
applied to *dense* vectors.  Returning permutation matrices rather
than sparse matrices is a slight performance enhancement, but likely
lost in the noise.

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,18 @@
+2009-03-10  Jason Riedy  <jason@acm.org>
+
+	* sparse-base-lu.cc (Pr_mat): New member function.  Return the row
+	permutation as a PermMatrix.
+	(Pc_mat): New member function.  Return the col permutation as a
+	PermMatrix.
+
+	* sparse-base-lu.h (sparse_base_lu): Declare Pc_mat and Pr_mat
+	member functions.
+
 2009-03-09  Jason Riedy  <jason@acm.org>
 
 	* Sparse-diag-op-defs.h (octave_impl::inner_do_add_sm_dm): New
 	template function.  Implementation for adding sparse and diagonal
 	matrices.  Takes two functional arguments, opa and opd, to
 	generate both subtraction variants.
 	(octave_impl::do_commutative_add_dm_sm): New template function.
 	Ensure A+D and D+A use the same generated code.
diff --git a/liboctave/sparse-base-lu.cc b/liboctave/sparse-base-lu.cc
--- a/liboctave/sparse-base-lu.cc
+++ b/liboctave/sparse-base-lu.cc
@@ -93,16 +93,23 @@ sparse_base_lu <lu_type, lu_elt_type, p_
 
   for (octave_idx_type i = 0; i < nr; i++)
     Pout.xelem (i) = static_cast<double> (P(i) + 1);
 
   return Pout;
 }
 
 template <class lu_type, class lu_elt_type, class p_type, class p_elt_type>
+PermMatrix
+sparse_base_lu <lu_type, lu_elt_type, p_type, p_elt_type> :: Pr_mat (void) const
+{
+  return PermMatrix (P, false);
+}
+
+template <class lu_type, class lu_elt_type, class p_type, class p_elt_type>
 p_type
 sparse_base_lu <lu_type, lu_elt_type, p_type, p_elt_type> :: Pc (void) const
 {
   octave_idx_type nc = Ufact.cols ();
 
   p_type Pout (nc, nc, nc);
 
   for (octave_idx_type i = 0; i < nc; i++)
@@ -126,13 +133,20 @@ sparse_base_lu <lu_type, lu_elt_type, p_
   ColumnVector Pout (nc);
 
   for (octave_idx_type i = 0; i < nc; i++)
     Pout.xelem (i) = static_cast<double> (Q(i) + 1);
 
   return Pout;
 }
 
+template <class lu_type, class lu_elt_type, class p_type, class p_elt_type>
+PermMatrix
+sparse_base_lu <lu_type, lu_elt_type, p_type, p_elt_type> :: Pc_mat (void) const
+{
+  return PermMatrix (Q, true);
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/sparse-base-lu.h b/liboctave/sparse-base-lu.h
--- a/liboctave/sparse-base-lu.h
+++ b/liboctave/sparse-base-lu.h
@@ -65,16 +65,20 @@ public:
   p_type Pc (void) const;
 
   p_type Pr (void) const;
 
   ColumnVector Pc_vec (void) const;
 
   ColumnVector Pr_vec (void) const;
 
+  PermMatrix Pc_mat (void) const;
+
+  PermMatrix Pr_mat (void) const;
+
   const octave_idx_type * row_perm (void) const { return P.fortran_vec (); }
 
   const octave_idx_type * col_perm (void) const { return Q.fortran_vec (); }
 
   double rcond (void) const { return cond; }
 
 protected:
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-03-10  Jason Riedy  <jason@acm.org>
+
+	* DLD-FUNCTIONS/lu.cc (lu): Call fact.Pr_mat () and fact.Pc_mat ()
+	to return permutation matrices in the sparse case.
+
 2009-03-12  John W. Eaton  <jwe@octave.org>
 
 	* ls-mat-ascii.cc (get_mat_data_input_line): If we are looking at
 	'\r' or '\n', skip current line ending instead of skipping until
 	the next.
 
 2009-03-12  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/DLD-FUNCTIONS/lu.cc b/src/DLD-FUNCTIONS/lu.cc
--- a/src/DLD-FUNCTIONS/lu.cc
+++ b/src/DLD-FUNCTIONS/lu.cc
@@ -221,17 +221,17 @@ information.\n\
 	    case 2:
 	      {
 		SparseLU fact (m, Qinit, thres, false, true);
 
 		if (nargout < 2)
 		  retval (0) = fact.Y ();
 		else
 		  {
-		    SparseMatrix P = fact.Pr ();
+		    PermMatrix P = fact.Pr_mat ();
 		    SparseMatrix L = P.transpose () * fact.L ();
 		    retval(1) = octave_value (fact.U (), 
 					      MatrixType (MatrixType::Upper));
 
 		    retval(0) = octave_value (L, 
 			MatrixType (MatrixType::Permuted_Lower, 
 				    nr, fact.row_perm ()));
 		  }
@@ -240,17 +240,17 @@ information.\n\
 
 	    case 3:
 	      {
 		SparseLU fact (m, Qinit, thres, false, true);
 
 		if (vecout)
 		  retval (2) = fact.Pr_vec ();
 		else
-		  retval(2) = fact.Pr ();
+		  retval(2) = fact.Pr_mat ();
 
 		retval(1) = octave_value (fact.U (), 
 					  MatrixType (MatrixType::Upper));
 		retval(0) = octave_value (fact.L (), 
 					  MatrixType (MatrixType::Lower));
 	      }
 	      break;
 
@@ -264,18 +264,18 @@ information.\n\
 
 		if (vecout)
 		  {
 		    retval(3) = fact.Pc_vec ();
 		    retval(2) = fact.Pr_vec ();
 		  }
 		else
 		  {
-		    retval(3) = fact.Pc ();
-		    retval(2) = fact.Pr ();
+		    retval(3) = fact.Pc_mat ();
+		    retval(2) = fact.Pr_mat ();
 		  }
 		retval(1) = octave_value (fact.U (), 
 					  MatrixType (MatrixType::Upper));
 		retval(0) = octave_value (fact.L (), 
 					  MatrixType (MatrixType::Lower));
 	      }
 	      break;
 	    }
@@ -291,17 +291,17 @@ information.\n\
 	    case 2:
 	      {
 		SparseComplexLU fact (m, Qinit, thres, false, true);
 
 		if (nargout < 2)
 		  retval (0) = fact.Y ();
 		else
 		  {
-		    SparseMatrix P = fact.Pr ();
+		    PermMatrix P = fact.Pr_mat ();
 		    SparseComplexMatrix L = P.transpose () * fact.L ();
 		    retval(1) = octave_value (fact.U (), 
 					      MatrixType (MatrixType::Upper));
 
 		    retval(0) = octave_value (L, 
 			MatrixType (MatrixType::Permuted_Lower, 
 				    nr, fact.row_perm ()));
 		  }
@@ -310,17 +310,17 @@ information.\n\
 
 	    case 3:
 	      {
 		SparseComplexLU fact (m, Qinit, thres, false, true);
 
 		if (vecout)
 		  retval (2) = fact.Pr_vec ();
 		else
-		  retval(2) = fact.Pr ();
+		  retval(2) = fact.Pr_mat ();
 
 		retval(1) = octave_value (fact.U (), 
 					  MatrixType (MatrixType::Upper));
 		retval(0) = octave_value (fact.L (), 
 					  MatrixType (MatrixType::Lower));
 	      }
 	      break;
 
@@ -334,18 +334,18 @@ information.\n\
 
 		if (vecout)
 		  {
 		    retval(3) = fact.Pc_vec ();
 		    retval(2) = fact.Pr_vec ();
 		  }
 		else
 		  {
-		    retval(3) = fact.Pc ();
-		    retval(2) = fact.Pr ();
+		    retval(3) = fact.Pc_mat ();
+		    retval(2) = fact.Pr_mat ();
 		  }
 		retval(1) = octave_value (fact.U (), 
 					  MatrixType (MatrixType::Upper));
 		retval(0) = octave_value (fact.L (), 
 					  MatrixType (MatrixType::Lower));
 	      }
 	      break;
 	    }
