# HG changeset patch
# User Rik <rik@octave.org>
# Date 1545955842 28800
#      Thu Dec 27 16:10:42 2018 -0800
# Branch stable
# Node ID dacba8a503d8d12d18624d9b2f36432f58f07d7a
# Parent  3592ad04b0c642b33d329dba24ad1ec2a5968690
Improve performance of re-parenting hggroups.

* graphics.cc (hggroup::update_axis_limits (string, graphics_handle):
Resize "limits" to 1x4 vector, not 4x1.  Get handle to hggroup and
call update_axis_limits with this handle so that the update starts
higher up the tree with hggroup rather than the child of the hggroup.

* graphics.cc (hggroup::update_axis_limits (string):
Resize "limits" to 1x4 vector, not 4x1.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -10214,17 +10214,17 @@ hggroup::update_axis_limits (const std::
       if (octave::math::isfinite (val))
         min_pos = val;
       val = limits(3);
       if (octave::math::isfinite (val))
         max_neg = val;
     }
   else
     {
-      limits.resize (4, 1);
+      limits.resize (1, 4);
       limits(0) = min_val;
       limits(1) = max_val;
       limits(2) = min_pos;
       limits(3) = max_neg;
     }
 
   get_children_limits (min_val, max_val, min_pos, max_neg, kids, update_type);
 
@@ -10262,17 +10262,18 @@ hggroup::update_axis_limits (const std::
         case 'a':
           xproperties.set_alim (limits);
           break;
 
         default:
           break;
         }
 
-      base_graphics_object::update_axis_limits (axis_type, h);
+      graphics_handle hg = xproperties.get___myhandle__ ();
+      base_graphics_object::update_axis_limits (axis_type, hg);
     }
 }
 
 void
 hggroup::update_axis_limits (const std::string& axis_type)
 {
   if (updating_hggroup_limits)
     return;
@@ -10317,17 +10318,17 @@ hggroup::update_axis_limits (const std::
       update_type = 'a';
     }
 
   octave::unwind_protect frame;
   frame.protect_var (updating_hggroup_limits);
 
   updating_hggroup_limits = true;
 
-  Matrix limits (1, 4, 0.0);
+  Matrix limits (1, 4);
 
   limits(0) = min_val;
   limits(1) = max_val;
   limits(2) = min_pos;
   limits(3) = max_neg;
 
   switch (update_type)
     {
