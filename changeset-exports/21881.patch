# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1465744528 14400
#      Sun Jun 12 11:15:28 2016 -0400
# Node ID aea1bf9493c079663ed9d7692d22429a4f5fbece
# Parent  a6952c880ceca9278c84728f727afd04b6bc5aa9
* file-ops.h, file-ops.cc (file_ops::file_ops): Now protected.
New arg to specify device separator character.
(file_ops::m_dev_sep_char): New data member.
(file_ops::dev_sep_char, file_ops::is_dev_sep): New functions.

diff --git a/liboctave/system/file-ops.cc b/liboctave/system/file-ops.cc
--- a/liboctave/system/file-ops.cc
+++ b/liboctave/system/file-ops.cc
@@ -65,30 +65,32 @@ namespace octave
     bool
     octave::sys::file_ops::instance_ok (void)
     {
       bool retval = true;
 
       if (! instance)
         {
 #if (defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM) && ! defined (OCTAVE_HAVE_POSIX_FILESYSTEM))
+          char system_dev_sep_char = ':';
           char system_dir_sep_char = '\\';
           std::string system_dir_sep_str = "\\";
 #else
+          char system_dev_sep_char = 0;
           char system_dir_sep_char = '/';
           std::string system_dir_sep_str = "/";
 #endif
 #if defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM)
           std::string system_dir_sep_chars = "/\\";
 #else
           std::string system_dir_sep_chars = system_dir_sep_str;
 #endif
 
-          instance = new file_ops (system_dir_sep_char, system_dir_sep_str,
-                                   system_dir_sep_chars);
+          instance = new file_ops (system_dev_sep_char, system_dir_sep_char,
+                                   system_dir_sep_str, system_dir_sep_chars);
 
           if (instance)
             singleton_cleanup_list::add (cleanup_instance);
         }
 
       if (! instance)
         (*current_liboctave_error_handler)
           ("unable to create file_ops object!");
@@ -276,16 +278,26 @@ namespace octave
             dirname = filename;
         }
       else
         dirname = pw.dir () + filename.substr (user_len+1);
 
       return dirname;
     }
 
+    bool
+    octave::sys::file_ops::is_dev_sep (char c)
+    {
+#if (defined (OCTAVE_HAVE_WINDOWS_FILESYSTEM) && ! defined (OCTAVE_HAVE_POSIX_FILESYSTEM))
+      return c == dev_sep_char ();
+#else
+      return false;
+#endif
+    }
+
     // If NAME has a leading ~ or ~user, Unix-style, expand it to the
     // user's home directory.  If no ~, or no <pwd.h>, just return NAME.
 
     std::string
     octave::sys::file_ops::tilde_expand (const std::string& name)
     {
       if (name.find ('~') == std::string::npos)
         return name;
diff --git a/liboctave/system/file-ops.h b/liboctave/system/file-ops.h
--- a/liboctave/system/file-ops.h
+++ b/liboctave/system/file-ops.h
@@ -34,38 +34,49 @@ along with Octave; see the file COPYING.
 namespace octave
 {
   namespace sys
   {
     struct
     OCTAVE_API
     file_ops
     {
-    public:
+    protected:
 
       // Use a singleton class for dir_sep data members instead of just
       // making them static members of the file_ops class so that we
       // can ensure proper initialization.
 
-      file_ops (char dir_sep_char_arg = 0,
+      file_ops (char dev_sep_char_arg = 0, char dir_sep_char_arg = 0,
                 const std::string& dir_sep_str_arg = std::string ("/"),
                 const std::string& dir_sep_chars_arg = std::string ("/"))
-        : m_dir_sep_char (dir_sep_char_arg), m_dir_sep_str (dir_sep_str_arg),
+        : m_dev_sep_char (dev_sep_char_arg),
+          m_dir_sep_char (dir_sep_char_arg),
+          m_dir_sep_str (dir_sep_str_arg),
           m_dir_sep_chars (dir_sep_chars_arg) { }
 
+    public:
+
       typedef std::string (*tilde_expansion_hook) (const std::string&);
 
       static tilde_expansion_hook tilde_expansion_preexpansion_hook;
 
       static tilde_expansion_hook tilde_expansion_failure_hook;
 
       static string_vector tilde_additional_prefixes;
 
       static string_vector tilde_additional_suffixes;
 
+      static char dev_sep_char (void)
+      {
+        return instance_ok () ? instance->m_dev_sep_char : 0;
+      }
+
+      static bool is_dev_sep (char c);
+
       static char dir_sep_char (void)
       {
         return instance_ok () ? instance->m_dir_sep_char : 0;
       }
 
       static std::string dir_sep_str (void)
       {
         return instance_ok () ? instance->m_dir_sep_str : "";
@@ -113,16 +124,18 @@ namespace octave
       // No copying!
 
       file_ops (const file_ops&);
 
       file_ops& operator = (const file_ops&);
 
       static bool instance_ok (void);
 
+      char m_dev_sep_char;
+
       char m_dir_sep_char;
       std::string m_dir_sep_str;
       std::string m_dir_sep_chars;
     };
 
     // We don't have these in the file_ops class with their simple names
     // (i.e., mkdir instead of octave_mdir) because function names in
     // standard headers may be #defined.
