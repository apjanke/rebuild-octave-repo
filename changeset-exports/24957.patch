# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1521669663 25200
#      Wed Mar 21 15:01:03 2018 -0700
# Node ID 43e384b98230934adf5fefa38fee8c30d548293a
# Parent  6d61e066a2a2278ff19c47a2504bcc783a48ebae
# Parent  1a5ae7526c1ee0f40ef7f924423bc338a074004e
maint: merge stable to default

diff --git a/doc/interpreter/mk_qthelp.pl b/doc/interpreter/mk-qthelp.pl
rename from doc/interpreter/mk_qthelp.pl
rename to doc/interpreter/mk-qthelp.pl
--- a/doc/interpreter/mk_qthelp.pl
+++ b/doc/interpreter/mk-qthelp.pl
@@ -1,25 +1,25 @@
 #!/usr/bin/env perl
 
 ################################################################################
-# File    : mk_qthelp.pl
+# File    : mk-qthelp.pl
 # Purpose : Transform Octave HTML documentation into intermediate formats
 #           for Qt Help Project (.qhp) and Qt Help Collection Project (.qhcp).
-# Usage   : mk_qthelp.pl input_htmldir output_filename 
+# Usage   : mk-qthelp.pl input_htmldir output_filename
 ################################################################################
 use warnings;              # report warnings for questionable run-time code
 use strict qw(refs subs);  # check at compile-time for bad programming style
 use File::Basename;        # For splitting paths between dir and file
 use File::Spec;            # For combining dirs and filenames into paths
 
 ################################################################################
 # Extract command line arguments
 if ($#ARGV != 1)
-{ die "USAGE: %0 input_htmldir output_filename"; } 
+{ die "USAGE: %0 input_htmldir output_filename"; }
 
 $htmldir = basename ($ARGV[0]);
 $basedir = File::Spec->rel2abs (dirname ($ARGV[1]));
 $fname   = File::Spec->catfile ($basedir, basename ($ARGV[1]));
 
 ################################################################################
 # Parse index.html to retrieve the table of contents
 $htmlfname = File::Spec->catfile ($basedir, $htmldir, "index.html");
@@ -32,20 +32,20 @@ while (($_ = <$HTML>) !~ /^<ul class="no
 $level = 0;
 while (<$HTML>)
 {
   if (/^\s*<li>/)
   {
     ($href, $text) = m|href="([^"]*)">(.*)</a>|;
     # Sanitize text
     $text =~ s/<[^>]*>//g;         # remove xml-looking blocks like <code>
-    $text =~ s/&rsquo;/&#8217;/g;  # Code for apostrophe 
+    $text =~ s/&rsquo;/&#8217;/g;  # Code for apostrophe
 
     push (@toc, { "href" => $href, "text" => $text,
-                  "level" => $level, "sectionstart" => 0 }); 
+                  "level" => $level, "sectionstart" => 0 });
   }
   elsif (/^\s+<ul /)
   {
     $level++;
     # Get last node and amend it to have a section start
     %node = %{ $toc[-1] };
     $node{sectionstart} = 1;
     $toc[-1] = { %node };
@@ -119,17 +119,17 @@ print $FH <<__EOT1__;
 $level = 0;
 $indent = 4;
 foreach $hashref (@toc)
 {
   %node = %{$hashref};
   while ($node{level} < $level)
   {
     # Unindent and close section
-    $level--;    
+    $level--;
     print $FH "  " x ($indent + $level);
     print $FH "</section>\n";
   }
   $level = $node{level};
 
   print $FH "  " x ($indent + $node{level});
   print $FH qq|<section title="$node{text}" |;
   print $FH qq|ref="|, File::Spec->catfile ($htmldir, $node{href});
diff --git a/doc/interpreter/module.mk b/doc/interpreter/module.mk
--- a/doc/interpreter/module.mk
+++ b/doc/interpreter/module.mk
@@ -199,19 +199,19 @@ HTMLDIR_CSS = $(OCTAVE_HTML_DIR)/octave.
 
 if AMCOND_BUILD_QT_DOCS
 
 OCTAVE_QTHELP_FILES = %reldir%/octave_interpreter.qhc %reldir%/octave_interpreter.qch
 
 octdoc_DATA += \
   $(OCTAVE_QTHELP_FILES)
 
-$(OCTAVE_QTHELP_FILES): $(OCTAVE_HTML_STAMP) $(srcdir)/%reldir%/mk_qthelp.pl
+$(OCTAVE_QTHELP_FILES): $(OCTAVE_HTML_STAMP) %reldir%/mk-qthelp.pl
 	$(AM_V_GEN)rm -f $(OCTAVE_QTHELP_FILES) && \
-	$(PERL) $(srcdir)/%reldir%/mk_qthelp.pl octave.html %reldir%/octave_interpreter && \
+	$(PERL) $(srcdir)/%reldir%/mk-qthelp.pl octave.html %reldir%/octave_interpreter && \
 	$(QCOLLECTIONGENERATOR) $(QCOLLECTIONGENERATORFLAGS) %reldir%/octave_interpreter.qhcp -o %reldir%/octave_interpreter.qhc >/dev/null && \
 	rm -f %reldir%/octave_interpreter.qhcp %reldir%/octave_interpreter.qhp
 
 ## The Qt help collection generator command produces two output files
 ## with the same base name: the compressed help (qch) file and the help
 ## collection (qhc) file.  Declare the qhc file to depend on the
 ## associated qch file, so that the files are built serially.
 %reldir%/octave_interpreter.qhc: %reldir%/octave_interpreter.qch
@@ -351,20 +351,19 @@ doc_EXTRA_DIST += \
   %reldir%/doc-cache \
   %reldir%/genpropdoc.m \
   %reldir%/graphics_properties.mk \
   %reldir%/images \
   %reldir%/images.awk \
   %reldir%/images.mk \
   %reldir%/macros.texi \
   %reldir%/mk-doc-cache.pl \
-  %reldir%/mk_qthelp.pl \
+  %reldir%/mk-qthelp.pl \
   %reldir%/mkcontrib.awk \
   %reldir%/munge-texi.pl \
-  %reldir%/prepare_qhelp.py \
   $(DOC_IMAGES) \
   $(DOC_IMAGES_SRC) \
   $(LOGOS) \
   $(TXI_SRC)
 
 doc_MAINTAINERCLEANFILES += \
   AUTHORS \
   $(BUILT_DOC_IMAGES) \
diff --git a/doc/interpreter/prepare_qhelp.py b/doc/interpreter/prepare_qhelp.py
deleted file mode 100644
--- a/doc/interpreter/prepare_qhelp.py
+++ /dev/null
@@ -1,187 +0,0 @@
-## Copyright (C) 2018 Pantxo Diribarne
-##
-## This file is part of Octave.
-##
-## Octave is free software: you can redistribute it and/or modify it
-## under the terms of the GNU General Public License as published by
-## the Free Software Foundation, either version 3 of the License, or
-## (at your option) any later version.
-##
-## Octave is distributed in the hope that it will be useful, but
-## WITHOUT ANY WARRANTY; without even the implied warranty of
-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-## GNU General Public License for more details.
-##
-## You should have received a copy of the GNU General Public License
-## along with Octave; see the file COPYING.  If not, see
-## <https://www.gnu.org/licenses/>.
-
-## Usage: python prepare_qhelp FNAME HTMLDIR
-##
-## Create a help project file FNAME.qhp and a help collection project
-## file FNAME.qhcp after parsing index.html and Function-Index.html files
-## in directory HTMLDIR. The latter must be relative to the parent
-## directory of FNAME.
-
-import sys, os
-import lxml.html as lh
-import lxml.etree as etree
-
-if len(sys.argv) < 3:
-    sys.exit('Usage: %s fname htmldir' % sys.argv[0])
-
-# Parameters
-basedir = os.path.abspath (os.path.dirname (sys.argv[1]))
-fname = os.path.join (basedir, os.path.basename (sys.argv[1]))
-htmldir =  os.path.basename (sys.argv[2])
-
-title = 'GNU Octave Manual'
-version = '1.0'
-namespace = 'org.octave.interpreter-1.0'
-
-
-# Utility functions
-def get_toc (node):
-    toc = list ()
-    for li in node.iterchildren('li'):
-        item = dict ()
-        for a in li.iter('a'):
-            item['name'] = a.text_content ()
-            item['link'] = a.attrib['href']
-            break
-
-        for ul in li.iter('ul'):
-            item['children'] = get_toc (ul)
-            break
-
-        toc.append(item)
-    return toc
-
-def populate_toc (node, toc, hdir):
-    for item in toc:
-        selt = etree.SubElement (node, 'section')
-        selt.attrib['title'] = item['name']
-        selt.attrib['ref'] = os.path.join (hdir, item['link'])
-        if (item.has_key('children')):
-            populate_toc (selt, item['children'], hdir)
-
-def get_keywords (node):
-    out = list ()
-    keys = list ()
-    for code in node.iter('code'):
-        item = dict ()
-        a = code.getparent ()
-        key = code.text_content ()
-        # Only retain the first entry for a given keyword
-        if (key not in keys):
-            keys.append (key)
-            item['name'] = key
-            item['link'] = a.attrib['href']
-            out.append(item)
-    return out
-
-def populate_keywords (node, ref, hdir):
-    for item in ref:
-        selt = etree.SubElement (node, 'keyword')
-        selt.attrib['name'] = item['name']
-        selt.attrib['id'] = item['name']
-        selt.attrib['ref'] = os.path.join (hdir, item['link'])
-
-# Parse index.html to retrieve the table of contents
-url = os.path.join (basedir, htmldir, 'index.html')
-node = lh.parse(url).getroot ()
-for elt in node.iter('div'):
-    if (elt.attrib.has_key('class') and elt.attrib['class'] == 'contents'):
-        node = elt
-        for elt in node.iter('ul'):
-            if elt.attrib['class'] == 'no-bullet':
-                node = elt
-                break
-        break
-
-toc = get_toc (node);
-
-# Parse Function-Index.html to retrieve the function reference
-url = os.path.join (basedir, htmldir, 'Function-Index.html')
-node = lh.parse (url).getroot ()
-for elt in node.iter('table'):
-    if (elt.attrib.has_key('class') and elt.attrib['class'] == 'index-fn'):
-        node = elt
-        break
-
-ref = get_keywords (node)
-
-# Prepare Qt Help Project document
-root = etree.Element("QtHelpProject")
-root.attrib['version'] = version
-
-elt = etree.SubElement (root, 'namespace')
-elt.text = namespace
-
-elt = etree.SubElement (root, 'virtualFolder')
-elt.text = 'doc'
-
-elt = etree.SubElement (root, 'customFilter')
-elt.attrib['name'] = 'Octave Manual'
-selt = etree.SubElement (elt, 'filterAttribute')
-selt.text = 'core'
-selt = etree.SubElement (elt, 'filterAttribute')
-selt.text = 'manual'
-
-elt = etree.SubElement (root, 'customFilter')
-elt.attrib['name'] = 'Octave C++ API'
-selt = etree.SubElement (elt, 'filterAttribute')
-selt.text = 'core'
-selt = etree.SubElement (elt, 'filterAttribute')
-selt.text = 'cpp'
-
-elt = etree.SubElement (root, 'filterSection')
-selt = etree.SubElement (elt, 'filterAttribute')
-selt.text = 'core'
-selt = etree.SubElement (elt, 'filterAttribute')
-selt.text = 'manual'
-selt = etree.SubElement (elt, 'toc')
-sselt = etree.SubElement (selt, 'section')
-sselt.attrib['title'] = title
-sselt.attrib['ref'] = os.path.join (htmldir, 'index.html')
-populate_toc (sselt, toc, htmldir)
-
-selt = etree.SubElement (elt, 'keywords')
-populate_keywords (selt, ref, htmldir)
-
-selt = etree.SubElement (elt, 'files')
-sselt = etree.SubElement (selt, 'file')
-sselt.text = os.path.join (htmldir, '*.html')
-sselt = etree.SubElement (selt, 'file')
-sselt.text = os.path.join (htmldir, '*.png')
-sselt = etree.SubElement (selt, 'file')
-sselt.text = os.path.join (htmldir, '*.css')
-
-fid = open (fname + '.qhp', 'w+')
-fid.write ('<?xml version="1.0" encoding="UTF-8"?>\n')
-fid.write ('<!--DO NOT EDIT!  Generated automatically by prepare_qhelp.py-->\n')
-fid.write (etree.tostring (root, pretty_print = True))
-fid.close ()
-
-# Prepare Qt Help Collection Project document
-root = etree.Element("QHelpCollectionProject")
-root.attrib['version'] = version
-elt = etree.SubElement (root, 'docFiles')
-
-selt = etree.SubElement (elt, 'generate')
-sselt = etree.SubElement (selt, 'file')
-ssselt = etree.SubElement (sselt, 'input')
-tmp = fname + '.qhp'
-ssselt.text = tmp
-ssselt = etree.SubElement (sselt, 'output')
-ssselt.text = fname + '.qch'
-
-selt = etree.SubElement (elt, 'register')
-sselt = etree.SubElement (selt, 'file')
-sselt.text = fname + '.qch'
-
-fid = open (fname + '.qhcp', 'w+')
-fid.write ('<?xml version="1.0" encoding="UTF-8"?>\n')
-fid.write ('<!--DO NOT EDIT! Generated automatically by prepare_qhelp.py-->\n')
-fid.write (etree.tostring (root, pretty_print = True))
-fid.close ()
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -218,16 +218,30 @@ persistent a b
 persistent c = 2
 persistent d = 3 e f = 5
 @end group
 @end example
 
 The behavior of persistent variables is equivalent to the behavior of
 static variables in C@.
 
+One restriction for persistent variables is, that neither input nor
+output arguments of a function can be persistent:
+
+@example
+@group
+function y = foo ()
+  persistent y = 0;  # Not allowed!
+endfunction
+
+foo ()
+@print{} error: can't make function parameter y persistent
+@end group
+@end example
+
 Like global variables, a persistent variable may only be initialized once.
 For example, after executing the following code
 
 @example
 @group
 persistent pvar = 1
 persistent pvar = 2
 @end group
diff --git a/libinterp/corefcn/symscope.cc b/libinterp/corefcn/symscope.cc
--- a/libinterp/corefcn/symscope.cc
+++ b/libinterp/corefcn/symscope.cc
@@ -185,17 +185,18 @@ namespace octave
                 && m_is_nested && t_parent->look_nonlocal (nm_sr.first, ours))
               {
                 if (ours.is_global () || ours.is_persistent ())
                   error ("global and persistent may only be used in the topmost level in which a nested variable is used");
               }
           }
 
         // The scopes of nested functions are static.
-        m_is_static = true;
+        if (m_is_nested)
+          m_is_static = true;
       }
     else if (m_children.size ())
       {
         // Parents of nested functions have static scopes.
         m_is_static = true;
       }
 
     for (auto& scope_obj : m_children)
diff --git a/scripts/sparse/tfqmr.m b/scripts/sparse/tfqmr.m
--- a/scripts/sparse/tfqmr.m
+++ b/scripts/sparse/tfqmr.m
@@ -394,23 +394,29 @@ endfunction
 %! tol = 1e-8;
 %! maxit = 15;
 %!
 %! [x, flag, relres, iter, resvec] = tfqmr (@(x) afun (x, A), b,
 %!                                             tol, maxit, M1, M2);
 %! assert (x, ones (size (b)), 1e-7);
 
 %!test
+%! ## Jacobi preconditioner works
 %! n = 10;
 %! tol = 1e-8;
-%! a = (2 * sprand (n, n, .1) - 1) + 1i * (2 * sprand (n, n, .1) - 1);
-%! A = a + 2 * eye (n);
+%! A = hilb (n) + 1i * hilb (n);
+%! A(1,1) = 100;
+%! A(n, n) = 100;
 %! b = sum (A, 2);
+%! [x, flag, relres, iter, resvec] = tfqmr (A, b, tol);
+%! assert (x, ones (size (b)), 0.005);
+%! assert (iter, 8);
 %! [x, flag, relres, iter, resvec] = tfqmr (A, b, tol, [], diag (diag (A)));
-%! assert (x, ones (size (b)), 1e-7);
+%! assert (x, ones (size (b)), 0.002);
+%! assert (iter, 6);
 
 %!test
 %! ## Solve complex linear system
 %! A = [1 + 1i, 1 + 1i; 2 - 1i, 2 + 1i];
 %! b = A * [1; 1];
 %! [x, flag, relres, iter, resvec] = tfqmr (A, b, [], 3);
 %! assert (x, [1; 1], 1e-6);
 
diff --git a/test/local-functions/local_function_eval.m b/test/local-functions/local_function_eval.m
new file mode 100644
--- /dev/null
+++ b/test/local-functions/local_function_eval.m
@@ -0,0 +1,9 @@
+function status = local_function_eval ()
+  eval ("y = 5;");
+  status = local_fcn ("y = 6;");
+endfunction
+
+function status = local_fcn (expr)
+  eval (expr);
+  status = exist ("y", "var");
+endfunction
diff --git a/test/local-functions/local_functions.tst b/test/local-functions/local_functions.tst
new file mode 100644
--- /dev/null
+++ b/test/local-functions/local_functions.tst
@@ -0,0 +1,25 @@
+## Copyright (C) 2018 Kai T. Ohlhus
+##
+## This file is part of Octave.
+##
+## Octave is free software: you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by
+## the Free Software Foundation, either version 3 of the License, or
+## (at your option) any later version.
+##
+## Octave is distributed in the hope that it will be useful, but
+## WITHOUT ANY WARRANTY; without even the implied warranty of
+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+## GNU General Public License for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, see
+## <https://www.gnu.org/licenses/>.
+
+################################################################################
+## This file actually executes the tests on functions with local functions.
+##
+## It relies on the function files defined in the local-functions/ directory.
+################################################################################
+
+%!assert (local_function_eval (), 1)
diff --git a/test/local-functions/module.mk b/test/local-functions/module.mk
new file mode 100644
--- /dev/null
+++ b/test/local-functions/module.mk
@@ -0,0 +1,5 @@
+local_functions_TEST_FILES = \
+  %reldir%/subfunctions.tst \
+  %reldir%/subfunction_eval.m
+
+TEST_FILES += $(local_functions_TEST_FILES)
diff --git a/test/module.mk b/test/module.mk
--- a/test/module.mk
+++ b/test/module.mk
@@ -66,16 +66,17 @@ include %reldir%/bug-51599/module.mk
 include %reldir%/bug-52075/module.mk
 include %reldir%/bug-52722/module.mk
 include %reldir%/class-concat/module.mk
 include %reldir%/classdef/module.mk
 include %reldir%/classdef-multiple-inheritance/module.mk
 include %reldir%/classes/module.mk
 include %reldir%/ctor-vs-method/module.mk
 include %reldir%/fcn-handle-derived-resolution/module.mk
+include %reldir%/local-functions/module.mk
 include %reldir%/nest/module.mk
 include %reldir%/publish/module.mk
 
 define run-octave-tests
   ( cd %reldir% && $(SHELL) ../run-octave $(RUN_OCTAVE_OPTIONS) $(1) --norc --silent --no-history $(abs_top_srcdir)/%reldir%/fntests.m $(abs_top_srcdir)/%reldir% ); \
   if $(AM_V_P); then \
     echo ""; \
     if [ -f %reldir%/fntests.log ]; then \
