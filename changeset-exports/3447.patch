# HG changeset patch
# User jwe
# Date 948139963 0
#      Mon Jan 17 20:12:43 2000 +0000
# Node ID 5c76d8f267f7f875f9bb245f0da7beb742737108
# Parent  5ee5afb3981acd069ba21fba5ea6fc8df77f2d4e
[project @ 2000-01-17 20:12:43 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -4,23 +4,27 @@ 2000-01-17  John W. Eaton  <jwe@bevo.che
 	* ov-typeinfo.cc (Ftypeinfo): Ditto.
 	* parse.y (Vwarn_future_time_stamp): Ditto.
 	* DLD-FUNCTIONS/minmax.cc (Fmax, Fmin): Ditto.
 	* ov-usr-fcn.cc (Fva_arg, Fva_start, Fvr_val): Ditto.
 	* defaults.cc (VOCTAVE_HOME, Frehash): Ditto.
 	* toplev.cc (Fwarranty, Fcasesen): Ditto.
 	* utils.cc (Fdo_string_escapes, Ffile_in_loadpath): Ditto.
 	* variables.cc (F__dump_symtab_info__, F__dump_symbol_info__): Ditto.
+	* ov-list.cc (Flist, Fappend, Fnth, Freverse, Fsplice): Ditto.
 
 	* pt-plot.cc (Fgraw, Fgset, Fgshow, Vgnuplot_command_plot, 
 	Vgnuplot_command_replot, Vgnuplot_command_splot,
 	Vgnuplot_command_using, Vgnuplot_command_with,
 	Vgnuplot_command_axes, Vgnuplot_command_title,
 	Vgnuplot_command_end): Texinfoize doc strings.
 
+	* oct-procbuf.cc (__kluge_procbuf_delay__): Rename from
+	kluge_procbuf_delay.  Texinfoize doc string.
+
 2000-01-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* parse.y (gobble_leading_whitespace): Discard first space character
 	after consecutive comment characters.
 	* lex.l (grab_help_text): Ditto.
 
 	* lex.l (Vwhitespace_in_literal_matrix, Vwarn_separator_insert,
 	Vwarn_single_quote_string): Texinfoize doc string.
diff --git a/src/oct-procbuf.cc b/src/oct-procbuf.cc
--- a/src/oct-procbuf.cc
+++ b/src/oct-procbuf.cc
@@ -179,35 +179,39 @@ octave_procbuf::sys_close (void)
 
 #endif
 }
 
 static int
 kluge_procbuf_delay (void)
 {
   double val;
-  if (builtin_real_scalar_variable ("kluge_procbuf_delay", val)
+  if (builtin_real_scalar_variable ("__kluge_procbuf_delay__", val)
       && ! xisnan (val))
     {
       int ival = NINT (val);
       if (ival >= 0 && (double) ival == val)
 	{
 	  Vkluge_procbuf_delay = ival;
 	  return 0;
 	}
     }
-  gripe_invalid_value_specified ("kluge_procbuf_delay");
+  gripe_invalid_value_specified ("__kluge_procbuf_delay__");
   return -1;
 }
 
 void
 symbols_of_oct_procbuf (void)
 {
-  DEFVAR (kluge_procbuf_delay, static_cast<double> (Vkluge_procbuf_delay),
+  DEFVAR (__kluge_procbuf_delay__, static_cast<double> (Vkluge_procbuf_delay),
 	  kluge_procbuf_delay,
-    "number of microseconds to delay in the parent after forking");
+    "-*- texinfo -*-\n\
+@defvr __kluge_procbuf_delay__\n\
+Number of microseconds to delay in the parent after forking.\n\
+@end defvr");
+
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/ov-list.cc b/src/ov-list.cc
--- a/src/ov-list.cc
+++ b/src/ov-list.cc
@@ -139,27 +139,30 @@ octave_list::print_name_tag (ostream& os
     {
       os << name << " =";
       newline (os);
     }
   return false;
 }
 
 DEFUN (list, args, ,
-  "list (ARGS)\n\
-\n\
-Create a new list from ARGS.")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} list (@var{a1}, @var{a2}, @dots{}})\n\
+Create a new list with elements given by the arguments @var{a1},\n\
+@var{a2}, @dots{}.\n\
+@end deftypefn")
 {
   return octave_value (args);
 }
 
 DEFUN (nth, args, ,
-  "nth (LIST, N)\n\
-\n\
-Return the N-th element of LIST.")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} nth (@var{list}, @var{n})\n\
+Return the @var{n}-th element of @var{list}.\n\
+@end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 2)
     {
       octave_value_list lst = args(0).list_value ();
 
       if (! error_state)
@@ -181,28 +184,32 @@ Return the N-th element of LIST.")
     }
   else
     print_usage ("nth");
 
   return retval;
 }
 
 DEFUN (append, args, ,
-  "append (LIST, ARG, ...)\n\
-\n\
-Return a new list created by appending each ARG to LIST.  If any of\n\
-the arguments to be appended is a list, its elements are appended\n\
-individually.  For example,\n\
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} append (@var{list}, @var{a1}, @var{a2}, @dots{})\n\
+Return a new list created by appending @var{a1}, @var{a1}, @dots{}, to\n\
+@var{list}.  If any of the arguments to be appended is a list, its\n\
+elements are appended individually.  For example,\n\
 \n\
-  x = list (1, 2);\n\
-  y = list (3, 4);\n\
-  append (x, y);\n\
+@example\n\
+x = list (1, 2);\n\
+y = list (3, 4);\n\
+append (x, y);\n\
+@end example\n\
 \n\
-results in the list containing the four elements (1 2 3 4), not a list\n\
-containing the three elements (1 2 (3 4))")
+@noindent\n\
+results in the list containing the four elements @samp{(1 2 3 4)}, not\n\
+a list containing the three elements @samp{(1 2 (3 4))}.\n\
+@end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin > 1)
     {
       octave_value_list tmp = args(0).list_value ();
@@ -224,19 +231,20 @@ containing the three elements (1 2 (3 4)
     }
   else
     print_usage ("append");
 
   return retval;
 }
 
 DEFUN (reverse, args, ,
-  "reverse (LIST)\n\
-\n\
-Return a new list created by reversing the elements of LIST")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} reverse (@var{list})\n\
+Return a new list created by reversing the elements of @var{list}.\n\
+@end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       octave_value_list tmp = args(0).list_value ();
@@ -246,26 +254,25 @@ Return a new list created by reversing t
     }
   else
     print_usage ("reverse");
 
   return retval;
 }
 
 DEFUN (splice, args, ,
-  "splice (LIST_1, OFFSET, LENGTH, LIST_2)\n\
-splice (LIST_1, OFFSET, LENGTH, LIST_2)\n\
-splice (LIST_1, OFFSET, LENGTH)\n\
-splice (LIST_1, OFFSET)\n\
-\n\
-Replace LENGTH elements of LIST_1 beginning at OFFSET with the\n\
-contents of LIST_2 (if any).  If LENGTH is omitted, all elements\n\
-from OFFSET to the end of LIST_1 are replaced.  As a special case, if\n\
-OFFSET is one greater than the length of LIST_1 and LENGTH is 0,\n\
-splice is equivalent to append (LIST_1, LIST_2)")
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} splice (@var{list_1}, @var{offset}, @var{length}, @var{list_2})\n\
+Replace @var{length} elements of @var{list_1} beginning at\n\
+@var{offset} with the contents of @var{list_2} (if any).  If\n\
+@var{length} is omitted, all elements from @var{offset} to the end of\n\
+@var{list_1} are replaced.  As a special case, if @var{offset} is one\n\
+greater than the length of @var{list_1} and @var{length} is 0, splice\n\
+is equivalent to @code{append (@var{list_1}, @var{list_2}).\n\
+@end deftypefn") 
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin > 1 && nargin < 5)
     {
       octave_value_list list_1 = args(0).list_value ();
