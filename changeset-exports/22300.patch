# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1471277115 14400
#      Mon Aug 15 12:05:15 2016 -0400
# Node ID aa5360a5cd3bc24cd85eea6fa6a1156af51dcba2
# Parent  9fc91bb2aec36fe5b691c745c1f46c014ef08aff
doc fix

* oct-parse.in.yy (feval): Fix doc strings.
Style fix.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -4764,33 +4764,32 @@ context of the function that called the 
 
   return retval;
 }
 
 /*!
     Evaluate an Octave function (built-in or interpreted) and return
     the list of result values.
 
-    @param name the name of the function to call.
-    @param args the arguments to the function.
-    @param nargout the number of output arguments expected.
-    @return the list of output values with length @nargout, except
-      if the function is not defined.
+    @param name The name of the function to call.
+    @param args The arguments to the function.
+    @param nargout The number of output arguments expected.
+    @return A list of output values.  The length of the list is not
+      necessarily the same as @c nargout.
+
 */
 octave_value_list
 feval (const std::string& name, const octave_value_list& args, int nargout)
 {
   octave_value_list retval;
 
   octave_value fcn = symbol_table::find_function (name, args);
 
   if (fcn.is_defined ())
-    {
-       retval = fcn.do_multi_index_op (nargout, args);
-    }
+    retval = fcn.do_multi_index_op (nargout, args);
   else
     {
       try
         {
           maybe_missing_function_hook (name);
         }
       catch (octave_execution_exception& e)
         {
@@ -4817,21 +4816,23 @@ get_feval_args (const octave_value_list&
 {
   return args.slice (1, args.length () - 1, true);
 }
 
 /*!
     Evaluate an Octave function (built-in or interpreted) and return
     the list of result values.
 
-    @param args the first element of @c args should be a string
-       containing the name of the function to call, then the rest
-       are the actual arguments to the function.
-    @param nargout the number of output arguments expected.
-    @return the list of output values with length @nargout.
+    @param args The first element of @c args is the function to call.
+      It may be the name of the function as a string, a function
+      handle, or an inline function.  The remaining arguments are
+      passed to the function.
+    @param nargout The number of output arguments expected.
+    @return A list of output values.  The length of the list is not
+      necessarily the same as @c nargout.
 */
 octave_value_list
 feval (const octave_value_list& args, int nargout)
 {
   octave_value_list retval;
 
   if (args.length () > 0)
     {
