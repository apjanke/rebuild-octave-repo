# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1270926295 -7200
#      Sat Apr 10 21:04:55 2010 +0200
# Node ID bdf5d85cfc5ee05d194c2dcd18c8188dce484761
# Parent  82ee24bf783cf1a75f992fb32da7b281bc2b8b93
replace nzmax by nnz where appropriate in liboctave

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2010-04-09  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Sparse.cc (Sparse<T>::diag): Change nzmax to nnz where appropriate.
+	* MatrixType.cc (MatrixType::MatrixType): Ditto.
+	* SparseQR.cc: Ditto.
+	* SparseCmplxQR.cc: Ditto.
+	* boolSparse.cc: Ditto.
+
 2010-04-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* Sparse.cc (Sparse<T>::resize (octave_idx_type, octave_idx_type)):
 	Rewrite. Be smarter esp. when resizing to more columns.
 
 2010-04-08  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dim-vector.h (dim_vector::concat): Ignore zero_by_zero, but not
diff --git a/liboctave/MatrixType.cc b/liboctave/MatrixType.cc
--- a/liboctave/MatrixType.cc
+++ b/liboctave/MatrixType.cc
@@ -207,17 +207,17 @@ MatrixType::MatrixType (const FloatCompl
 MatrixType::MatrixType (const SparseMatrix &a)
   : typ (MatrixType::Unknown),
     sp_bandden (0), bandden (0), upper_band (0), lower_band (0),
     dense (false), full (false), nperm (0), perm (0)
 {
   octave_idx_type nrows = a.rows ();
   octave_idx_type ncols = a.cols ();
   octave_idx_type nm = (ncols < nrows ? ncols : nrows);
-  octave_idx_type nnz = a.nzmax ();
+  octave_idx_type nnz = a.nnz ();
 
   if (octave_sparse_params::get_key ("spumoni") != 0.)
     (*current_liboctave_warning_handler) 
       ("Calculating Sparse Matrix Type");
 
   sp_bandden = octave_sparse_params::get_bandden();
   bool maybe_hermitian = false;
   typ = MatrixType::Full;
@@ -528,17 +528,17 @@ MatrixType::MatrixType (const SparseMatr
 MatrixType::MatrixType (const SparseComplexMatrix &a)
   : typ (MatrixType::Unknown),
     sp_bandden (0), bandden (0), upper_band (0), lower_band (0),
     dense (false), full (false), nperm (0), perm (0)
 {
   octave_idx_type nrows = a.rows ();
   octave_idx_type ncols = a.cols ();
   octave_idx_type nm = (ncols < nrows ? ncols : nrows);
-  octave_idx_type nnz = a.nzmax ();
+  octave_idx_type nnz = a.nnz ();
 
   if (octave_sparse_params::get_key ("spumoni") != 0.)
     (*current_liboctave_warning_handler) 
       ("Calculating Sparse Matrix Type");
 
   sp_bandden = octave_sparse_params::get_bandden();
   bool maybe_hermitian = false;
   typ = MatrixType::Full;
diff --git a/liboctave/Sparse.cc b/liboctave/Sparse.cc
--- a/liboctave/Sparse.cc
+++ b/liboctave/Sparse.cc
@@ -2045,17 +2045,17 @@ Sparse<T>::diag (octave_idx_type k) cons
         {
           roff = -k;
           coff = 0;
         }
 
       if (nnr == 1) 
         {
           octave_idx_type n = nnc + std::abs (k);
-          octave_idx_type nz = nzmax ();
+          octave_idx_type nz = nnz ();
 
           d = Sparse<T> (n, n, nz);
 
           if (nnz () > 0)
             {
               for (octave_idx_type i = 0; i < coff+1; i++)
                 d.xcidx (i) = 0;
 
@@ -2071,17 +2071,17 @@ Sparse<T>::diag (octave_idx_type k) cons
 
               for (octave_idx_type i = nnc + coff + 1; i < n + 1; i++)
                 d.xcidx (i) = nz;
             }
         } 
       else 
         {
           octave_idx_type n = nnr + std::abs (k);
-          octave_idx_type nz = nzmax ();
+          octave_idx_type nz = nnz ();
 
           d = Sparse<T> (n, n, nz);
 
           if (nnz () > 0)
             {
               octave_idx_type ii = 0;
               octave_idx_type ir = ridx(0);
 
diff --git a/liboctave/SparseCmplxQR.cc b/liboctave/SparseCmplxQR.cc
--- a/liboctave/SparseCmplxQR.cc
+++ b/liboctave/SparseCmplxQR.cc
@@ -430,19 +430,19 @@ qrsolve(const SparseComplexMatrix&a, con
       ("matrix dimension mismatch in solution of minimum norm problem");
   else if (nr == 0 || nc == 0 || b_nc == 0)
     x = SparseComplexMatrix (nc, b_nc);
   else if (nr >= nc)
     {
       SparseComplexQR q (a, 2);
       if (! q.ok ())
         return SparseComplexMatrix();
-      x = SparseComplexMatrix (nc, b_nc, b.nzmax());
+      x = SparseComplexMatrix (nc, b_nc, b.nnz());
       x.xcidx(0) = 0;
-      x_nz = b.nzmax();
+      x_nz = b.nnz();
       ii = 0;
       OCTAVE_LOCAL_BUFFER (Complex, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_C99_COMPLEX (buf, q.S()->m2);
       for (volatile octave_idx_type i = 0, idx = 0; i < b_nc; i++, idx+=nc)
         {
           octave_quit ();
           for (octave_idx_type j = 0; j < b_nr; j++)
             Xx[j] = b.xelem(j,i);
@@ -497,19 +497,19 @@ qrsolve(const SparseComplexMatrix&a, con
       info = 0;
     }
   else
     {
       SparseComplexMatrix at = a.hermitian();
       SparseComplexQR q (at, 2);
       if (! q.ok ())
         return SparseComplexMatrix();
-      x = SparseComplexMatrix (nc, b_nc, b.nzmax());
+      x = SparseComplexMatrix (nc, b_nc, b.nnz());
       x.xcidx(0) = 0;
-      x_nz = b.nzmax();
+      x_nz = b.nnz();
       ii = 0;
       volatile octave_idx_type nbuf = (nc > q.S()->m2 ? nc : q.S()->m2);
       OCTAVE_LOCAL_BUFFER (Complex, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_C99_COMPLEX (buf, nbuf);
 
 #if defined(CS_VER) && (((CS_VER == 2) && (CS_SUBVER >= 2)) || (CS_VER > 2))
       OCTAVE_LOCAL_BUFFER (double, B, nr);
       for (octave_idx_type i = 0; i < nr; i++)
@@ -725,19 +725,19 @@ qrsolve(const SparseComplexMatrix&a, con
       ("matrix dimension mismatch in solution of minimum norm problem");
   else if (nr == 0 || nc == 0 || b_nc == 0)
     x = SparseComplexMatrix (nc, b_nc);
   else if (nr >= nc)
     {
       SparseComplexQR q (a, 2);
       if (! q.ok ())
         return SparseComplexMatrix();
-      x = SparseComplexMatrix (nc, b_nc, b.nzmax());
+      x = SparseComplexMatrix (nc, b_nc, b.nnz());
       x.xcidx(0) = 0;
-      x_nz = b.nzmax();
+      x_nz = b.nnz();
       ii = 0;
       OCTAVE_LOCAL_BUFFER (Complex, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_C99_COMPLEX (buf, q.S()->m2);
       for (volatile octave_idx_type i = 0, idx = 0; i < b_nc; i++, idx+=nc)
         {
           octave_quit ();
           for (octave_idx_type j = 0; j < b_nr; j++)
             Xx[j] = b.xelem(j,i);
@@ -792,19 +792,19 @@ qrsolve(const SparseComplexMatrix&a, con
       info = 0;
     }
   else
     {
       SparseComplexMatrix at = a.hermitian();
       SparseComplexQR q (at, 2);
       if (! q.ok ())
         return SparseComplexMatrix();
-      x = SparseComplexMatrix (nc, b_nc, b.nzmax());
+      x = SparseComplexMatrix (nc, b_nc, b.nnz());
       x.xcidx(0) = 0;
-      x_nz = b.nzmax();
+      x_nz = b.nnz();
       ii = 0;
       volatile octave_idx_type nbuf = (nc > q.S()->m2 ? nc : q.S()->m2);
       OCTAVE_LOCAL_BUFFER (Complex, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_C99_COMPLEX (buf, nbuf);
 #if defined(CS_VER) && (((CS_VER == 2) && (CS_SUBVER >= 2)) || (CS_VER > 2))
       OCTAVE_LOCAL_BUFFER (double, B, nr);
       for (octave_idx_type i = 0; i < nr; i++)
         B[i] = q.N()->B [i];
diff --git a/liboctave/SparseQR.cc b/liboctave/SparseQR.cc
--- a/liboctave/SparseQR.cc
+++ b/liboctave/SparseQR.cc
@@ -28,17 +28,17 @@ along with Octave; see the file COPYING.
 #include "lo-error.h"
 #include "SparseQR.h"
 #include "oct-locbuf.h"
 
 SparseQR::SparseQR_rep::SparseQR_rep (const SparseMatrix& a, int order)
 {
 #ifdef HAVE_CXSPARSE
   CXSPARSE_DNAME () A;
-  A.nzmax = a.nzmax ();
+  A.nzmax = a.nnz ();
   A.m = a.rows ();
   A.n = a.cols ();
   nrows = A.m;
   // Cast away const on A, with full knowledge that CSparse won't touch it
   // Prevents the methods below making a copy of the data.
   A.p = const_cast<octave_idx_type *>(a.cidx ());
   A.i = const_cast<octave_idx_type *>(a.ridx ());
   A.x = const_cast<double *>(a.data ());
@@ -387,19 +387,19 @@ qrsolve(const SparseMatrix&a, const Spar
       ("matrix dimension mismatch in solution of minimum norm problem");
   else if (nr == 0 || nc == 0 || b_nc == 0)
     x = SparseMatrix (nc, b_nc);
   else if (nr >= nc)
     {
       SparseQR q (a, 3);
       if (! q.ok ()) 
         return SparseMatrix();
-      x = SparseMatrix (nc, b_nc, b.nzmax());
+      x = SparseMatrix (nc, b_nc, b.nnz());
       x.xcidx(0) = 0;
-      x_nz = b.nzmax();
+      x_nz = b.nnz();
       ii = 0;
       OCTAVE_LOCAL_BUFFER (double, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_LOCAL_BUFFER (double, buf, q.S()->m2);
       for (volatile octave_idx_type i = 0, idx = 0; i < b_nc; i++, idx+=nc)
         {
           octave_quit ();
           for (octave_idx_type j = 0; j < b_nr; j++)
             Xx[j] = b.xelem(j,i);
@@ -450,19 +450,19 @@ qrsolve(const SparseMatrix&a, const Spar
       info = 0;
     }
   else
     {
       SparseMatrix at = a.hermitian();
       SparseQR q (at, 3);
       if (! q.ok ())
         return SparseMatrix();
-      x = SparseMatrix (nc, b_nc, b.nzmax());
+      x = SparseMatrix (nc, b_nc, b.nnz());
       x.xcidx(0) = 0;
-      x_nz = b.nzmax();
+      x_nz = b.nnz();
       ii = 0;
       volatile octave_idx_type nbuf = (nc > q.S()->m2 ? nc : q.S()->m2);
       OCTAVE_LOCAL_BUFFER (double, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_LOCAL_BUFFER (double, buf, nbuf);
       for (volatile octave_idx_type i = 0, idx = 0; i < b_nc; i++, idx+=nc)
         {
           octave_quit ();
           for (octave_idx_type j = 0; j < b_nr; j++)
@@ -705,19 +705,19 @@ qrsolve(const SparseMatrix&a, const Spar
       ("matrix dimension mismatch in solution of minimum norm problem");
   else if (nr == 0 || nc == 0 || b_nc == 0)
     x = SparseComplexMatrix (nc, b_nc);
   else if (nr >= nc)
     {
       SparseQR q (a, 3);
       if (! q.ok ()) 
         return SparseComplexMatrix();
-      x = SparseComplexMatrix (nc, b_nc, b.nzmax());
+      x = SparseComplexMatrix (nc, b_nc, b.nnz());
       x.xcidx(0) = 0;
-      x_nz = b.nzmax();
+      x_nz = b.nnz();
       ii = 0;
       OCTAVE_LOCAL_BUFFER (double, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_LOCAL_BUFFER (double, Xz, (b_nr > nc ? b_nr : nc));
       OCTAVE_LOCAL_BUFFER (double, buf, q.S()->m2);
       for (volatile octave_idx_type i = 0, idx = 0; i < b_nc; i++, idx+=nc)
         {
           octave_quit ();
           for (octave_idx_type j = 0; j < b_nr; j++)
@@ -797,19 +797,19 @@ qrsolve(const SparseMatrix&a, const Spar
       info = 0;
     }
   else
     {
       SparseMatrix at = a.hermitian();
       SparseQR q (at, 3);
       if (! q.ok ())
         return SparseComplexMatrix();
-      x = SparseComplexMatrix (nc, b_nc, b.nzmax());
+      x = SparseComplexMatrix (nc, b_nc, b.nnz());
       x.xcidx(0) = 0;
-      x_nz = b.nzmax();
+      x_nz = b.nnz();
       ii = 0;
       volatile octave_idx_type nbuf = (nc > q.S()->m2 ? nc : q.S()->m2);
       OCTAVE_LOCAL_BUFFER (double, Xx, (b_nr > nc ? b_nr : nc));
       OCTAVE_LOCAL_BUFFER (double, Xz, (b_nr > nc ? b_nr : nc));
       OCTAVE_LOCAL_BUFFER (double, buf, nbuf);
       for (volatile octave_idx_type i = 0, idx = 0; i < b_nc; i++, idx+=nc)
         {
           octave_quit ();
diff --git a/liboctave/boolSparse.cc b/liboctave/boolSparse.cc
--- a/liboctave/boolSparse.cc
+++ b/liboctave/boolSparse.cc
@@ -37,20 +37,20 @@ along with Octave; see the file COPYING.
 
 // SparseBoolMatrix class.
 
 bool
 SparseBoolMatrix::operator == (const SparseBoolMatrix& a) const
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
-  octave_idx_type nz = nzmax ();
+  octave_idx_type nz = nnz ();
   octave_idx_type nr_a = a.rows ();
   octave_idx_type nc_a = a.cols ();
-  octave_idx_type nz_a = a.nzmax ();
+  octave_idx_type nz_a = a.nnz ();
 
   if (nr != nr_a || nc != nc_a || nz != nz_a)
     return false;
 
   for (octave_idx_type i = 0; i < nc + 1; i++)
     if (cidx(i) != a.cidx(i))
         return false;
 
@@ -92,17 +92,17 @@ SparseBoolMatrix::concat (const SparseBo
 
 // unary operations
 
 SparseBoolMatrix
 SparseBoolMatrix::operator ! (void) const
 {
   octave_idx_type nr = rows ();
   octave_idx_type nc = cols ();
-  octave_idx_type nz1 = nzmax ();
+  octave_idx_type nz1 = nnz ();
   octave_idx_type nz2 = nr*nc - nz1;
    
   SparseBoolMatrix r (nr, nc, nz2);
    
   octave_idx_type ii = 0;
   octave_idx_type jj = 0;
   r.cidx (0) = 0;
   for (octave_idx_type i = 0; i < nc; i++)
