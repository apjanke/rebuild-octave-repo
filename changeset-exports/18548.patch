# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1394133925 18000
#      Thu Mar 06 14:25:25 2014 -0500
# Branch stable
# Node ID 06970f4625b8ec9ea8359e4f8f44dc4d28767ca1
# Parent  9472e3c8f43e53fd5ebe1ff89e06a7706a6eb271
assert.m: allow assertions for function handles

* assert.m: Allow expected value to be a function handle.
New tests.

diff --git a/scripts/testfun/assert.m b/scripts/testfun/assert.m
--- a/scripts/testfun/assert.m
+++ b/scripts/testfun/assert.m
@@ -136,16 +136,29 @@ function assert (cond, varargin)
           catch
             err.index{end+1} = "{}";
             err.observed{end+1} = "O";
             err.expected{end+1} = "E";
             err.reason{end+1} = "Cell configuration error";
           end_try_catch
         endif
 
+      elseif (is_function_handle (expected))
+        if (! is_function_handle (cond))
+          err.index{end+1} = "@";
+          err.observed{end+1} = "O";
+          err.expected{end+1} = "E";
+          err.reason{end+1} = ["Expected function handle, but observed " class(cond)];
+        elseif (! isequal (cond, expected))
+          err.index{end+1} = "@";
+          err.observed{end+1} = "O";
+          err.expected{end+1} = "E";
+          err.reason{end+1} = "Function handles don't match";
+        endif
+
       elseif (isstruct (expected))
         if (! isstruct (cond))
           err.index{end+1} = ".";
           err.observed{end+1} = "O";
           err.expected{end+1} = "E";
           err.reason{end+1} = ["Expected struct, but observed " class(cond)];
         elseif (ndims (cond) != ndims (expected)
                 || any (size (cond) != size (expected))
@@ -529,16 +542,22 @@ endfunction
 %!error <Dimensions don't match> assert (cell (1,2,3), cell (3,2,1))
 %!test
 %! x = {{{1}}, 2};  # cell with multiple levels
 %! y = x;
 %! assert (x,y);
 %! y{1}{1}{1} = 3;
 %! fail ("assert (x,y)", "Abs err 2 exceeds tol 0");
 
+## function handles
+%!assert (@sin, @sin)
+%!error <Function handles don't match> assert (@sin, @cos)
+%!error <Expected function handle, but observed double> assert (pi, @cos)
+%!error <Class function_handle != double> assert (@sin, pi)
+
 %!test
 %! x = {[3], [1,2,3]; 100+100*eps, "dog"};
 %! y = x;
 %! assert (x, y);
 %! y = x; y(1,1) = [2];
 %! fail ("assert (x, y)");
 %! y = x; y(1,2) = [0, 2, 3];
 %! fail ("assert (x, y)");
