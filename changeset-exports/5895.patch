# HG changeset patch
# User jwe
# Date 1153274327 0
#      Wed Jul 19 01:58:47 2006 +0000
# Node ID b9c45e0cf685bbc489690659ac32e8804dab126e
# Parent  acf8b96ca9c96d48a9b797a06c0aaded2689a0ce
[project @ 2006-07-19 01:57:44 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,40 @@
+2006-07-18  John W. Eaton  <jwe@octave.org>
+
+	* ov.h (octave_value::is_int8_type, octave_value::is_int16_type,
+	octave_value::is_int32_type, octave_value::is_int64_type,
+	octave_value::is_uint8_type, octave_value::is_uint16_type,
+	octave_value::is_uint32_type, octave_value::is_uint64_type):
+	New functions. 
+	* ov-base.h (octave_base_value::is_int8_type,
+	octave_base_value::is_int16_type,
+	octave_base_value::is_int32_type,
+	octave_base_value::is_int64_type,
+	octave_base_value::is_uint8_type,
+	octave_base_value::is_uint16_type,
+	octave_base_value::is_uint32_type,
+	octave_base_value::is_uint64_type): New functions.
+	* ov-int8.h, ov-int16.h, ov-int32.h, ov-int16.h, ov-uint8.h,
+	ov-uint16.h, ov-uint32.h, ov-uint16.h: Define OCTAVE_BASE_INT_T.
+	* ov-intx.h: Use OCTAVE_BASE_INT_T to define type-specific predicate.
+
+	* ov.h (octave_value::is_double_type, octave_value::is_single_type):
+	New functions.
+	* ov-base.h (octave_base_value::is_double_type,
+	octave_base_value::is_single_type): New functions.
+	* ov-re-mat.h (octave_matrix::is_double_type): New function.
+	* ov-cx-mat.h (octave_matrix::is_double_type): New function.
+	* ov-scalar.h (octave_scalar::is_double_type): New function.
+	* ov-complex.h (octave_complex::is_double_type): New function.
+	* ov-range.h (octave_range::is_double_type): New function.
+	* ov-re-sparse.h (octave_sparse_matrix::is_double_type): New function.
+	* ov-cx-sparse.h (octave_sparse_complex_matrix::is_double_type):
+	New function.
+	
 2006-07-15  John W. Eaton  <jwe@octave.org>
 
 	* ov-typeinfo.cc: Also instantiate arrays of assignany_ops.
 
 	* oct-errno.cc.in (octave_errno::octave_errno): VALUE field in
 	errno_struct no longer const.
 
 	* DLD-FUNCTIONS/dispatch.cc (octave_dispatch::do_index_op):
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -224,16 +224,36 @@ public:
   virtual bool is_magic_colon (void) const { return false; }
 
   virtual bool is_all_va_args (void) const { return false; }
 
   virtual octave_value all (int = 0) const;
 
   virtual octave_value any (int = 0) const;
 
+  virtual bool is_double_type (void) const { return false; }
+
+  virtual bool is_single_type (void) const { return false; }
+
+  virtual bool is_int8_type (void) const { return false; }
+
+  virtual bool is_int16_type (void) const { return false; }
+
+  virtual bool is_int32_type (void) const { return false; }
+
+  virtual bool is_int64_type (void) const { return false; }
+
+  virtual bool is_uint8_type (void) const { return false; }
+
+  virtual bool is_uint16_type (void) const { return false; }
+
+  virtual bool is_uint32_type (void) const { return false; }
+
+  virtual bool is_uint64_type (void) const { return false; }
+
   virtual bool is_bool_type (void) const { return false; }
 
   virtual bool is_real_type (void) const { return false; }
 
   virtual bool is_complex_type (void) const { return false; }
 
   // Would be nice to get rid of the next four functions:
 
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -84,16 +84,18 @@ public:
 	      && ! (lo_ieee_isnan (OCTAVE_STD::real (scalar))
 		    || lo_ieee_isnan (OCTAVE_STD::imag (scalar))));
     }
 
   bool is_complex_scalar (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
+  bool is_double_type (void) const { return true; }
+
   // FIXME ???
   bool valid_as_scalar_index (void) const { return false; }
   bool valid_as_zero_index (void) const { return false; }
 
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -90,16 +90,18 @@ public:
   void assign (const octave_value_list& idx, const ComplexNDArray& rhs);
 
   void assign (const octave_value_list& idx, const NDArray& rhs);
 
   bool is_complex_matrix (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
+  bool is_double_type (void) const { return true; }
+
   bool valid_as_scalar_index (void) const;
 
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
diff --git a/src/ov-cx-sparse.h b/src/ov-cx-sparse.h
--- a/src/ov-cx-sparse.h
+++ b/src/ov-cx-sparse.h
@@ -85,16 +85,18 @@ public:
   void assign (const octave_value_list& idx, const SparseComplexMatrix& rhs);
 
   void assign (const octave_value_list& idx, const SparseMatrix& rhs);
 
   bool is_complex_matrix (void) const { return true; }
 
   bool is_complex_type (void) const { return true; }
 
+  bool is_double_type (void) const { return true; }
+
   bool valid_as_scalar_index (void) const;
 
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
diff --git a/src/ov-int16.h b/src/ov-int16.h
--- a/src/ov-int16.h
+++ b/src/ov-int16.h
@@ -27,26 +27,30 @@ 02110-1301, USA.
 #define OCTAVE_VALUE_INT_MATRIX_T octave_int16_matrix
 #define OCTAVE_INT_NDARRAY_T int16NDArray
 #define OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION int16_array_value
 
 #define OCTAVE_VALUE_INT_SCALAR_T octave_int16_scalar
 #define OCTAVE_INT_T octave_int16
 #define OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION int16_scalar_value
 
+#define OCTAVE_TYPE_PREDICATE_FUNCTION is_int16_type
+
 #include "ov-intx.h"
 
 #undef OCTAVE_VALUE_INT_MATRIX_T
 #undef OCTAVE_INT_NDARRAY_T
 #undef OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_VALUE_INT_SCALAR_T
 #undef OCTAVE_INT_T
 #undef OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION
 
+#undef OCTAVE_TYPE_PREDICATE_FUNCTION
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
 
diff --git a/src/ov-int32.h b/src/ov-int32.h
--- a/src/ov-int32.h
+++ b/src/ov-int32.h
@@ -27,26 +27,30 @@ 02110-1301, USA.
 #define OCTAVE_VALUE_INT_MATRIX_T octave_int32_matrix
 #define OCTAVE_INT_NDARRAY_T int32NDArray
 #define OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION int32_array_value
 
 #define OCTAVE_VALUE_INT_SCALAR_T octave_int32_scalar
 #define OCTAVE_INT_T octave_int32
 #define OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION int32_scalar_value
 
+#define OCTAVE_TYPE_PREDICATE_FUNCTION is_int32_type
+
 #include "ov-intx.h"
 
 #undef OCTAVE_VALUE_INT_MATRIX_T
 #undef OCTAVE_INT_NDARRAY_T
 #undef OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_VALUE_INT_SCALAR_T
 #undef OCTAVE_INT_T
 #undef OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION
 
+#undef OCTAVE_TYPE_PREDICATE_FUNCTION
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
 
diff --git a/src/ov-int64.h b/src/ov-int64.h
--- a/src/ov-int64.h
+++ b/src/ov-int64.h
@@ -27,26 +27,30 @@ 02110-1301, USA.
 #define OCTAVE_VALUE_INT_MATRIX_T octave_int64_matrix
 #define OCTAVE_INT_NDARRAY_T int64NDArray
 #define OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION int64_array_value
 
 #define OCTAVE_VALUE_INT_SCALAR_T octave_int64_scalar
 #define OCTAVE_INT_T octave_int64
 #define OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION int64_scalar_value
 
+#define OCTAVE_TYPE_PREDICATE_FUNCTION is_int64_type
+
 #include "ov-intx.h"
 
 #undef OCTAVE_VALUE_INT_MATRIX_T
 #undef OCTAVE_INT_NDARRAY_T
 #undef OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_VALUE_INT_SCALAR_T
 #undef OCTAVE_INT_T
 #undef OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION
 
+#undef OCTAVE_TYPE_PREDICATE_FUNCTION
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
 
diff --git a/src/ov-int8.h b/src/ov-int8.h
--- a/src/ov-int8.h
+++ b/src/ov-int8.h
@@ -27,26 +27,30 @@ 02110-1301, USA.
 #define OCTAVE_VALUE_INT_MATRIX_T octave_int8_matrix
 #define OCTAVE_INT_NDARRAY_T int8NDArray
 #define OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION int8_array_value
 
 #define OCTAVE_VALUE_INT_SCALAR_T octave_int8_scalar
 #define OCTAVE_INT_T octave_int8
 #define OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION int8_scalar_value
 
+#define OCTAVE_TYPE_PREDICATE_FUNCTION is_int8_type
+
 #include "ov-intx.h"
 
 #undef OCTAVE_VALUE_INT_MATRIX_T
 #undef OCTAVE_INT_NDARRAY_T
 #undef OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_VALUE_INT_SCALAR_T
 #undef OCTAVE_INT_T
 #undef OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION
 
+#undef OCTAVE_TYPE_PREDICATE_FUNCTION
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
 
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -53,16 +53,18 @@ public:
   ~OCTAVE_VALUE_INT_MATRIX_T (void) { }
 
   octave_base_value *clone (void) const
     { return new OCTAVE_VALUE_INT_MATRIX_T (*this); }
 
   octave_base_value *empty_clone (void) const
     { return new OCTAVE_VALUE_INT_MATRIX_T (); }
 
+  bool OCTAVE_TYPE_PREDICATE_FUNCTION (void) { return true; }
+
   int8NDArray
   int8_array_value (void) const { return int8NDArray (matrix); }
 
   int16NDArray
   int16_array_value (void) const { return int16NDArray (matrix); }
 
   int32NDArray
   int32_array_value (void) const { return int32NDArray (matrix); }
@@ -198,16 +200,18 @@ public:
 	     (OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION ())); 
 
 	  retval = tmp.do_index_op (idx, resize_ok);
 	}
 
       return retval;
     }
 
+  bool OCTAVE_TYPE_PREDICATE_FUNCTION (void) { return true; }
+
   octave_int8
   int8_scalar_value (void) const { return octave_int8 (scalar); }
 
   octave_int16
   int16_scalar_value (void) const { return octave_int16 (scalar); }
 
   octave_int32
   int32_scalar_value (void) const { return octave_int32 (scalar); }
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -122,16 +122,18 @@ public:
   bool is_range (void) const { return true; }
 
   octave_value all (int dim = 0) const;
 
   octave_value any (int dim = 0) const;
 
   bool is_real_type (void) const { return true; }
 
+  bool is_double_type (void) const { return true; }
+
   bool valid_as_scalar_index (void) const
     {
       double b = range.base ();
       return (range.nelem () == 1
 	      && ! xisnan (b) && D_NINT (b) == b && NINTbig (b) == 1);
     }
 
   bool valid_as_zero_index (void) const
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -89,16 +89,18 @@ public:
   octave_base_value *try_narrowing_conversion (void);
 
   idx_vector index_vector (void) const { return idx_vector (matrix); }
 
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
+  bool is_double_type (void) const { return true; }
+
   bool valid_as_scalar_index (void) const;
 
   int8NDArray
   int8_array_value (void) const { return int8NDArray (matrix); }
 
   int16NDArray
   int16_array_value (void) const { return int16NDArray (matrix); }
 
diff --git a/src/ov-re-sparse.h b/src/ov-re-sparse.h
--- a/src/ov-re-sparse.h
+++ b/src/ov-re-sparse.h
@@ -83,16 +83,18 @@ public:
   octave_base_value *try_narrowing_conversion (void);
 
   idx_vector index_vector (void) const;
 
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
+  bool is_double_type (void) const { return true; }
+
   bool valid_as_scalar_index (void) const;
 
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
     { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -78,16 +78,18 @@ public:
 
   octave_value any (int = 0) const
     { return (scalar != 0 && ! lo_ieee_isnan (scalar)); }
 
   bool is_real_scalar (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
+  bool is_double_type (void) const { return true; }
+
   bool valid_as_scalar_index (void) const
     {
       return (! xisnan (scalar)
 	      && D_NINT (scalar) == scalar
 	      && NINTbig (scalar) == 1);
     }
 
   bool valid_as_zero_index (void) const
diff --git a/src/ov-uint16.h b/src/ov-uint16.h
--- a/src/ov-uint16.h
+++ b/src/ov-uint16.h
@@ -27,26 +27,30 @@ 02110-1301, USA.
 #define OCTAVE_VALUE_INT_MATRIX_T octave_uint16_matrix
 #define OCTAVE_INT_NDARRAY_T uint16NDArray
 #define OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION uint16_array_value
 
 #define OCTAVE_VALUE_INT_SCALAR_T octave_uint16_scalar
 #define OCTAVE_INT_T octave_uint16
 #define OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION uint16_scalar_value
 
+#define OCTAVE_TYPE_PREDICATE_FUNCTION is_uint16_type
+
 #include "ov-intx.h"
 
 #undef OCTAVE_VALUE_INT_MATRIX_T
 #undef OCTAVE_INT_NDARRAY_T
 #undef OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_VALUE_INT_SCALAR_T
 #undef OCTAVE_INT_T
 #undef OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION
 
+#undef OCTAVE_TYPE_PREDICATE_FUNCTION
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
 
diff --git a/src/ov-uint32.h b/src/ov-uint32.h
--- a/src/ov-uint32.h
+++ b/src/ov-uint32.h
@@ -27,26 +27,30 @@ 02110-1301, USA.
 #define OCTAVE_VALUE_INT_MATRIX_T octave_uint32_matrix
 #define OCTAVE_INT_NDARRAY_T uint32NDArray
 #define OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION uint32_array_value
 
 #define OCTAVE_VALUE_INT_SCALAR_T octave_uint32_scalar
 #define OCTAVE_INT_T octave_uint32
 #define OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION uint32_scalar_value
 
+#define OCTAVE_TYPE_PREDICATE_FUNCTION is_uint32_type
+
 #include "ov-intx.h"
 
 #undef OCTAVE_VALUE_INT_MATRIX_T
 #undef OCTAVE_INT_NDARRAY_T
 #undef OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_VALUE_INT_SCALAR_T
 #undef OCTAVE_INT_T
 #undef OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION
 
+#undef OCTAVE_TYPE_PREDICATE_FUNCTION
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
 
diff --git a/src/ov-uint64.h b/src/ov-uint64.h
--- a/src/ov-uint64.h
+++ b/src/ov-uint64.h
@@ -27,26 +27,30 @@ 02110-1301, USA.
 #define OCTAVE_VALUE_INT_MATRIX_T octave_uint64_matrix
 #define OCTAVE_INT_NDARRAY_T uint64NDArray
 #define OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION uint64_array_value
 
 #define OCTAVE_VALUE_INT_SCALAR_T octave_uint64_scalar
 #define OCTAVE_INT_T octave_uint64
 #define OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION uint64_scalar_value
 
+#define OCTAVE_TYPE_PREDICATE_FUNCTION is_uint64_type
+
 #include "ov-intx.h"
 
 #undef OCTAVE_VALUE_INT_MATRIX_T
 #undef OCTAVE_INT_NDARRAY_T
 #undef OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_VALUE_INT_SCALAR_T
 #undef OCTAVE_INT_T
 #undef OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION
 
+#undef OCTAVE_TYPE_PREDICATE_FUNCTION
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
 
diff --git a/src/ov-uint8.h b/src/ov-uint8.h
--- a/src/ov-uint8.h
+++ b/src/ov-uint8.h
@@ -27,26 +27,30 @@ 02110-1301, USA.
 #define OCTAVE_VALUE_INT_MATRIX_T octave_uint8_matrix
 #define OCTAVE_INT_NDARRAY_T uint8NDArray
 #define OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION uint8_array_value
 
 #define OCTAVE_VALUE_INT_SCALAR_T octave_uint8_scalar
 #define OCTAVE_INT_T octave_uint8
 #define OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION uint8_scalar_value
 
+#define OCTAVE_TYPE_PREDICATE_FUNCTION is_uint8_type
+
 #include "ov-intx.h"
 
 #undef OCTAVE_VALUE_INT_MATRIX_T
 #undef OCTAVE_INT_NDARRAY_T
 #undef OCTAVE_VALUE_INT_NDARRAY_EXTRACTOR_FUNCTION
 
 #undef OCTAVE_VALUE_INT_SCALAR_T
 #undef OCTAVE_INT_T
 #undef OCTAVE_VALUE_INT_SCALAR_EXTRACTOR_FUNCTION
 
+#undef OCTAVE_TYPE_PREDICATE_FUNCTION
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
 
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -436,16 +436,50 @@ public:
   // Are any or all of the elements in this constant nonzero?
 
   octave_value all (int dim = 0) const
     { return rep->all (dim); }
 
   octave_value any (int dim = 0) const
     { return rep->any (dim); }
 
+  // Floating point types.
+
+  bool is_double_type (void) const
+    { return rep->is_double_type (); }
+
+  bool is_single_type (void) const
+    { return rep->is_single_type (); }
+
+  // Integer types.
+
+  bool is_int8_type (void) const
+    { return rep->is_int8_type (); }
+
+  bool is_int16_type (void) const
+    { return rep->is_int16_type (); }
+
+  bool is_int32_type (void) const
+    { return rep->is_int32_type (); }
+
+  bool is_int64_type (void) const
+   { return rep->is_int64_type (); }
+
+  bool is_uint8_type (void) const
+    { return rep->is_uint8_type (); }
+
+  bool is_uint16_type (void) const
+    { return rep->is_uint16_type (); }
+
+  bool is_uint32_type (void) const
+    { return rep->is_uint32_type (); }
+
+  bool is_uint64_type (void) const
+    { return rep->is_uint64_type (); }
+
   // Other type stuff.
 
   bool is_bool_type (void) const
     { return rep->is_bool_type (); }
 
   bool is_real_type (void) const
     { return rep->is_real_type (); }
 
