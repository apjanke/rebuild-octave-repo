# HG changeset patch
# User scofield@scofield
# Date 1219696183 14400
#      Mon Aug 25 16:29:43 2008 -0400
# Node ID 89a512e8ec43e24fad1f89f840dfeae20705df97
# Parent  961d4c52ffae3252fa39274d8a9dc1349eac8021
Replace leading tabs with spaces.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2008-08-25  Thomas L. Scofield  <scofield@calvin.edu>
+
+	* DLD-FUNCTIONS/__magick_read__.cc: Untabify.
+
 2008-08-25  David Bateman  <dbateman@free.fr>
 
 	* graphics.cc (void gh_manager::do_execute_callback 
 	(const graphics_handle&, const octave_value&, const
 	octave_value&)): Don't pass the function handle as first arg of
 	property listener functions
 
 	* graphics.h.in (class base_properties): Add functor for caseless
diff --git a/src/DLD-FUNCTIONS/__magick_read__.cc b/src/DLD-FUNCTIONS/__magick_read__.cc
--- a/src/DLD-FUNCTIONS/__magick_read__.cc
+++ b/src/DLD-FUNCTIONS/__magick_read__.cc
@@ -31,22 +31,22 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_MAGICK
 
 #include <GraphicsMagick/Magick++.h>
 
 unsigned int
 scale_quantum_to_depth (const Magick::Quantum& quantum, unsigned int depth)
 {
   return (static_cast<unsigned int> (static_cast<double> (quantum)
-				     / MaxRGB * ((1 << depth) - 1)));
+                                     / MaxRGB * ((1 << depth) - 1)));
 }
 
 octave_value_list
 read_indexed_images (std::vector<Magick::Image>& imvec,
-		     const Array<int>& frameidx, bool wantalpha)
+                     const Array<int>& frameidx, bool wantalpha)
 {
   octave_value_list output;
 
   int rows = imvec[0].baseRows ();
   int columns = imvec[0].baseColumns ();
   int nframes = frameidx.length ();
 
   Magick::ImageType type = imvec[0].type ();
@@ -64,53 +64,53 @@ read_indexed_images (std::vector<Magick:
 
   switch (depth)
     {
     case 1:
     case 2:
     case 4:
     case 8:
       {
-	uint8NDArray im = uint8NDArray (dim_vector (rows, columns, nframes));
+        uint8NDArray im = uint8NDArray (dim_vector (rows, columns, nframes));
 
-	for (int frame = 0; frame < nframes; frame++)
-	  {
-	    imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
+        for (int frame = 0; frame < nframes; frame++)
+          {
+            imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
 
-	    const Magick::IndexPacket *pix
-	      = imvec[frameidx(frame)].getConstIndexes ();
+            const Magick::IndexPacket *pix
+              = imvec[frameidx(frame)].getConstIndexes ();
 
-	    i = 0;
+            i = 0;
 
-	    for (int y = 0; y < rows; y++)
-	      for (int x = 0; x < columns; x++)
-		im(y,x,frame) = static_cast<octave_uint8> (pix[i++]);
-	  }
-	im.chop_trailing_singletons ();
-	output(0) = octave_value (im);
+            for (int y = 0; y < rows; y++)
+              for (int x = 0; x < columns; x++)
+                im(y,x,frame) = static_cast<octave_uint8> (pix[i++]);
+          }
+        im.chop_trailing_singletons ();
+        output(0) = octave_value (im);
       }
       break;
 
     case 16:
       {
-	uint16NDArray im = uint16NDArray (dim_vector(rows, columns, nframes));
+        uint16NDArray im = uint16NDArray (dim_vector(rows, columns, nframes));
 
-	for (int frame = 0; frame < nframes; frame++)
-	  {
-	    imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
+        for (int frame = 0; frame < nframes; frame++)
+          {
+            imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
 
-	    const Magick::IndexPacket *pix
-	      = imvec[frameidx(frame)].getConstIndexes ();
+            const Magick::IndexPacket *pix
+              = imvec[frameidx(frame)].getConstIndexes ();
 
-	    i = 0;
+            i = 0;
 
-	    for (int y = 0; y < rows; y++)
-	      for (int x = 0; x < columns; x++)
-		im(y,x,frame) = static_cast<octave_uint16> (pix[i++]);
-	  }
+            for (int y = 0; y < rows; y++)
+              for (int x = 0; x < columns; x++)
+                im(y,x,frame) = static_cast<octave_uint16> (pix[i++]);
+          }
         im.chop_trailing_singletons ();
         output(0) = octave_value (im);
       }
       break;
 
     default:
       error ("__magic_read__: index depths bigger than 16-bit not supported");
       return octave_value_list ();
@@ -123,34 +123,34 @@ read_indexed_images (std::vector<Magick:
     {
     case Magick::PaletteMatteType:
 #if 0
       warning ("palettematte");
       Matrix map (mapsize, 3);
       Matrix alpha (mapsize, 1);
       for (i = 0; i < mapsize; i++)
         {
-	  warning ("%d", i);
-	  Magick::ColorRGB c = imvec[0].colorMap (i);
-	  map(i,0) = c.red ();
-	  map(i,1) = c.green ();
-	  map(i,2) = c.blue ();
-	  alpha(i,1) = c.alpha ();
+          warning ("%d", i);
+          Magick::ColorRGB c = imvec[0].colorMap (i);
+          map(i,0) = c.red ();
+          map(i,1) = c.green ();
+          map(i,2) = c.blue ();
+          alpha(i,1) = c.alpha ();
         }
       break;
 #endif
 
     case Magick::PaletteType:
       alpha = Matrix (0, 0);
       for (i = 0; i < mapsize; i++)
         {
-	  Magick::ColorRGB c = imvec[0].colorMap (i);
-	  map(i,0) = c.red ();
-	  map(i,1) = c.green ();
-	  map(i,2) = c.blue ();
+          Magick::ColorRGB c = imvec[0].colorMap (i);
+          map(i,0) = c.red ();
+          map(i,1) = c.green ();
+          map(i,2) = c.blue ();
         }
       break;
 
     default:
       error ("__magick_read__: unsupported indexed image type");
       return octave_value_list ();
     }
 
@@ -160,17 +160,17 @@ read_indexed_images (std::vector<Magick:
   output(1) = map;
 
   return output;
 }
 
 template <class T>
 octave_value_list
 read_images (const std::vector<Magick::Image>& imvec,
-	     const Array<int>& frameidx, unsigned int depth)
+             const Array<int>& frameidx, unsigned int depth)
 {
   octave_value_list retval (3, Matrix ());
 
   T im;
 
   int rows = imvec[0].baseRows ();
   int columns = imvec[0].baseColumns ();
   int nframes = frameidx.length ();
@@ -188,114 +188,114 @@ read_images (const std::vector<Magick::I
 
   switch (type)
     {
     case Magick::BilevelType:
     case Magick::GrayscaleType:
       im = T (dim_vector (rows, columns, nframes));
       for (int frame = 0; frame < nframes; frame++)
         {
-	  const Magick::PixelPacket *pix
-	    = imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
+          const Magick::PixelPacket *pix
+            = imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
 
-	  int i = 0;
+          int i = 0;
 
-	  for (int y = 0; y < rows; y++)
-	    for (int x = 0; x < columns; x++)
-	      im(y, x, frame) = scale_quantum_to_depth (pix[i++].red, depth);
+          for (int y = 0; y < rows; y++)
+            for (int x = 0; x < columns; x++)
+              im(y, x, frame) = scale_quantum_to_depth (pix[i++].red, depth);
         }
       break;
 
     case Magick::GrayscaleMatteType:
       idim(2) = 2;
       im = T (idim);
       for (int frame = 0; frame < nframes; frame++)
         {
-	  const Magick::PixelPacket *pix
-	    = imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
+          const Magick::PixelPacket *pix
+            = imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
 
-	  int i = 0;
-	  idx(3) = frame;
+          int i = 0;
+          idx(3) = frame;
 
-	  for (int y = 0; y < rows; y++)
-	    {
-	      idx(0) = y;
-	      for (int x = 0; x < columns; x++)
-		{
-		  idx(1) = x;
-		  idx(2) = 0;
-		  im(idx) = scale_quantum_to_depth (pix[i].red, depth);
-		  idx(2) = 1;
-		  im(idx) = scale_quantum_to_depth (pix[i].opacity, depth);
-		  i++;
-		}
-	    }
+          for (int y = 0; y < rows; y++)
+            {
+              idx(0) = y;
+              for (int x = 0; x < columns; x++)
+                {
+                  idx(1) = x;
+                  idx(2) = 0;
+                  im(idx) = scale_quantum_to_depth (pix[i].red, depth);
+                  idx(2) = 1;
+                  im(idx) = scale_quantum_to_depth (pix[i].opacity, depth);
+                  i++;
+                }
+            }
         }
       break;
 
     case Magick::PaletteType:
     case Magick::TrueColorType:
       idim(2) = 3;
       im = T (idim);
       for (int frame = 0; frame < nframes; frame++)
         {
-	  const Magick::PixelPacket *pix
-	    = imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
+          const Magick::PixelPacket *pix
+            = imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
 
-	  int i = 0;
-	  idx(3) = frame;
+          int i = 0;
+          idx(3) = frame;
 
-	  for (int y = 0; y < rows; y++)
-	    {
-	      idx(0) = y;
-	      for (int x = 0; x < columns; x++)
-		{
-		  idx(1) = x;
-		  idx(2) = 0;
-		  im(idx) = scale_quantum_to_depth (pix[i].red, depth);
-		  idx(2) = 1;
-		  im(idx) = scale_quantum_to_depth (pix[i].green, depth);
-		  idx(2) = 2;
-		  im(idx) = scale_quantum_to_depth (pix[i].blue, depth);
-		  i++;
-		}
-	    }
+          for (int y = 0; y < rows; y++)
+            {
+              idx(0) = y;
+              for (int x = 0; x < columns; x++)
+                {
+                  idx(1) = x;
+                  idx(2) = 0;
+                  im(idx) = scale_quantum_to_depth (pix[i].red, depth);
+                  idx(2) = 1;
+                  im(idx) = scale_quantum_to_depth (pix[i].green, depth);
+                  idx(2) = 2;
+                  im(idx) = scale_quantum_to_depth (pix[i].blue, depth);
+                  i++;
+                }
+            }
         }
       break;
 
     case Magick::PaletteMatteType:
     case Magick::TrueColorMatteType:
     case Magick::ColorSeparationType:
       idim(2) = 4;
       im = T (idim);
       for (int frame = 0; frame < nframes; frame++)
         {
-	  const Magick::PixelPacket *pix
-	    = imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
+          const Magick::PixelPacket *pix
+            = imvec[frameidx(frame)].getConstPixels (0, 0, columns, rows);
 
-	  int i = 0;
-	  idx(3) = frame;
+          int i = 0;
+          idx(3) = frame;
 
-	  for (int y = 0; y < rows; y++)
-	    {
-	      idx(0) = y;
-	      for (int x = 0; x < columns; x++)
-		{
-		  idx(1) = x;
-		  idx(2) = 0;
-		  im(idx) = scale_quantum_to_depth (pix[i].red, depth);
-		  idx(2) = 1;
-		  im(idx) = scale_quantum_to_depth (pix[i].green, depth);
-		  idx(2) = 2;
-		  im(idx) = scale_quantum_to_depth (pix[i].blue, depth);
-		  idx(2) = 3;
-		  im(idx) = scale_quantum_to_depth (pix[i].opacity, depth);
-		  i++;
-		}
-	    }
+          for (int y = 0; y < rows; y++)
+            {
+              idx(0) = y;
+              for (int x = 0; x < columns; x++)
+                {
+                  idx(1) = x;
+                  idx(2) = 0;
+                  im(idx) = scale_quantum_to_depth (pix[i].red, depth);
+                  idx(2) = 1;
+                  im(idx) = scale_quantum_to_depth (pix[i].green, depth);
+                  idx(2) = 2;
+                  im(idx) = scale_quantum_to_depth (pix[i].blue, depth);
+                  idx(2) = 3;
+                  im(idx) = scale_quantum_to_depth (pix[i].opacity, depth);
+                  i++;
+                }
+            }
         }
       break;
 
     default:
       error ("__magick_read__: undefined ImageMagick image type");
       return retval;
     }
 
@@ -362,70 +362,70 @@ Instead you should use @code{imread}.\n\
 
   for (int i = 0; i < frameidx.length(); i++)
     {
       frameidx(i) = frameidx(i) - 1;
 
       int nframes = imvec.size ();
 
       if (frameidx(i) >= nframes || frameidx(i) < 0)
-	{
-	  error ("__magick_read__: invalid index vector");
-	  return output;
-	}
+        {
+          error ("__magick_read__: invalid index vector");
+          return output;
+        }
     }
 
   Magick::ClassType klass = imvec[0].classType ();
 
   if (klass == Magick::PseudoClass && nargout > 1)
     output = read_indexed_images (imvec, frameidx, (nargout == 3));
   else
     {
       unsigned int depth = imvec[0].modulusDepth ();
       int i = 0;
       while (depth >>= 1)
-	i++;
+        i++;
       depth = 1 << i;
 
       switch (depth)
-	{
-	case 1:
-	  output = read_images<boolNDArray> (imvec, frameidx, depth);
-	  break;
+        {
+        case 1:
+          output = read_images<boolNDArray> (imvec, frameidx, depth);
+          break;
 
-	case 2:
-	case 4:
-	case 8:
-	  output = read_images<uint8NDArray> (imvec, frameidx, depth) ;
-	  break;
+        case 2:
+        case 4:
+        case 8:
+          output = read_images<uint8NDArray> (imvec, frameidx, depth) ;
+          break;
 
-	case 16:
-	  output = read_images<uint16NDArray> (imvec, frameidx, depth);
-	  break;
+        case 16:
+          output = read_images<uint16NDArray> (imvec, frameidx, depth);
+          break;
 
-	case 32:
-	case 64:
+        case 32:
+        case 64:
         default:
-	  error ("__magick_read__: image depths bigger than 16-bit not supported");
-	}
+          error ("__magick_read__: image depths bigger than 16-bit not supported");
+        }
     }
 #else
 
   error ("__magick_read__: not available in this version of Octave");
 
 #endif
 
   return output;
 }
 
 #ifdef HAVE_MAGICK
 
 static void 
 write_image (Magick::Image& im, const std::string& filename,
-	     const std::string& fmt)
+             const std::string& fmt)
 {
   im.syncPixels ();
 
   // FIXME -- setting fmt to "jpg" and writing to "foo.png" results in
   // a PNG file, not a JPEG file (for example).  How can the file type
   // be forced regardless of the name?
 
   im.magick (fmt);
@@ -445,87 +445,87 @@ write_image (Magick::Image& im, const st
   catch (Magick::Exception& e)
     {
       error ("Magick++ exception: %s", e.what ());
     }
 }
 
 static void
 write_image (const std::string& filename, const std::string& fmt,
-	     const octave_value& img,
-	     const octave_value& map = octave_value ())
+             const octave_value& img,
+             const octave_value& map = octave_value ())
 {
   if (img.is_bool_type ())
     {
       boolNDArray m = img.bool_array_value ();
 
       if (! error_state)
-	{
-	  error ("__magick_write__: not implemented");
-	}
+        {
+          error ("__magick_write__: not implemented");
+        }
       else
-	error ("__magick_write__: internal error");
+        error ("__magick_write__: internal error");
     }
   else if (img.is_uint8_type ())
     {
       uint8NDArray m = img.uint8_array_value ();
 
       if (! error_state)
-	{
-	  octave_idx_type rows = m.rows ();
-	  octave_idx_type columns = m.columns ();
+        {
+          octave_idx_type rows = m.rows ();
+          octave_idx_type columns = m.columns ();
 
-	  Magick::Image im (Magick::Geometry (columns, rows), "white");
+          Magick::Image im (Magick::Geometry (columns, rows), "white");
 
-	  im.type (Magick::TrueColorType);
+          im.type (Magick::TrueColorType);
 
-	  im.modifyImage ();
-	  
-	  Magick::PixelPacket *pix = im.getPixels (0, 0, columns, rows);
+          im.modifyImage ();
+          
+          Magick::PixelPacket *pix = im.getPixels (0, 0, columns, rows);
 
-	  int i = 0;
+          int i = 0;
 
-	  for (int y = 0; y < rows; y++)
-	    {
-	      for (int x = 0; x < columns; x++)
-		{
-		  pix[i].red = m(y,x,0);
-		  pix[i].green = m(y,x,1);
-		  pix[i].blue = m(y,x,2);
-		  i++;
-		}
-	    }
+          for (int y = 0; y < rows; y++)
+            {
+              for (int x = 0; x < columns; x++)
+                {
+                  pix[i].red = m(y,x,0);
+                  pix[i].green = m(y,x,1);
+                  pix[i].blue = m(y,x,2);
+                  i++;
+                }
+            }
 
-	  write_image (im, filename, fmt);
-	}
+          write_image (im, filename, fmt);
+        }
       else
-	error ("__magick_write__: internal error");
+        error ("__magick_write__: internal error");
     }
   else if (img.is_uint16_type ())
     {
       uint16NDArray m = img.uint16_array_value ();
 
       if (! error_state)
-	{
-	  error ("__magick_write__: not implemented");
-	}
+        {
+          error ("__magick_write__: not implemented");
+        }
       else
-	error ("__magick_write__: internal error");
+        error ("__magick_write__: internal error");
     }
   else
     error ("__magick_write__: internal error");
 
   if (! error_state && map.is_defined ())
     {
       NDArray cmap = map.array_value ();
 
       if (! error_state)
-	{
-	  error ("__magick_write__: not implemented");
-	}
+        {
+          error ("__magick_write__: not implemented");
+        }
     }
 }
 
 #endif
 
 DEFUN_DLD (__magick_write__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Function File} {} __magick_write__(@var{fname}, @var{fmt}, @var{img})\n\
@@ -540,31 +540,31 @@ Instead you should use @code{imwrite}.\n
 #ifdef HAVE_MAGICK
   int nargin = args.length ();
 
   if (nargin > 2)
     {
       std::string filename = args(0).string_value ();
 
       if (! error_state)
-	{
-	  std::string fmt = args(1).string_value ();
+        {
+          std::string fmt = args(1).string_value ();
 
-	  if (! error_state)
-	    {
-	      if (nargin > 3)
-		write_image (filename, fmt, args(2), args(3));
-	      else
-		write_image (filename, fmt, args(2));
-	    }
-	  else
-	    error ("__magick_write__: expecting format as second argument");
-	}
+          if (! error_state)
+            {
+              if (nargin > 3)
+                write_image (filename, fmt, args(2), args(3));
+              else
+                write_image (filename, fmt, args(2));
+            }
+          else
+            error ("__magick_write__: expecting format as second argument");
+        }
       else
-	error ("__magick_write__: expecting filename as first argument");
+        error ("__magick_write__: expecting filename as first argument");
     }
   else
     print_usage ();
 #else
 
   error ("__magick_write__: not available in this version of Octave");
 
 #endif
