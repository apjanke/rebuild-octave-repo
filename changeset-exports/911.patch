# HG changeset patch
# User jwe
# Date 784440498 0
#      Thu Nov 10 04:08:18 1994 +0000
# Node ID a9b2b0f9abf6878143dfeb99ee6091d43f74a92d
# Parent  5de3b53c0e02bb77d592b7ff28bd30000a639837
[project @ 1994-11-10 04:08:18 by jwe]

diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -1633,23 +1633,22 @@ read_mat_binary_data (istream& is, doubl
 static int
 read_mat_file_header (istream& is, int& swap, FOUR_BYTE_INT& mopt, 
 		      FOUR_BYTE_INT& nr, FOUR_BYTE_INT& nc,
 		      FOUR_BYTE_INT& imag, FOUR_BYTE_INT& len,
 		      int quiet = 0)
 {
   swap = 0;
 
+// We expect to fail here, at the beginning of a record, so not being
+// able to read another mopt value should not result in an error. 
+
   is.read (&mopt, 4);
   if (! is)
-    {
-      if (! is.eof ())
-	goto data_read_error;
-      return 1;
-    }
+    return 1;
 
   if (! is.read (&nr, 4))
     goto data_read_error;
 
   if (! is.read (&nc, 4))
     goto data_read_error;
 
   if (! is.read (&imag, 4))
@@ -1667,29 +1666,31 @@ read_mat_file_header (istream& is, int& 
 //
 // Gag me.
 
 #if defined (WORDS_BIGENDIAN)
   if (mopt == 0)
     swap = 1;
 #endif
 
-  if (mopt > 9999)
+// mopt is signed, therefore byte swap may result in negative value.
+
+  if (mopt > 9999 || mopt < 0)
     swap = 1;
 
   if (swap)
     {
       swap_4_bytes ((char *) &mopt);
       swap_4_bytes ((char *) &nr);
       swap_4_bytes ((char *) &nc);
       swap_4_bytes ((char *) &imag);
       swap_4_bytes ((char *) &len);
     }
 
-  if (mopt > 9999 || imag > 1 || imag < 0 || len > 8192)
+  if (mopt > 9999 || mopt < 0 || imag > 1 || imag < 0)
     {
       if (! quiet)
 	error ("load: can't read binary file");
       return -1;
     }
 
   return 0;
 
@@ -2443,17 +2444,17 @@ save_mat_binary_data (ostream& os, const
   os.write (&name_len, 4);
   os.write (name, name_len);
 
   if (tc.is_real_scalar ())
     {
       double tmp = tc.double_value ();
       os.write (&tmp, 8);
     }
-  else if (tc.is_real_matrix () || tc.is_range ())
+  else if (tc.is_real_matrix ())
     {
       Matrix m = tc.matrix_value ();
       os.write (m.data (), 8 * len);
     }
   else if (tc.is_complex_scalar ())
     {
       Complex tmp = tc.complex_value ();
       os.write (&tmp, 16);
@@ -2470,16 +2471,28 @@ save_mat_binary_data (ostream& os, const
     {
       begin_unwind_frame ("save_mat_binary_data");
       unwind_protect_int (user_pref.implicit_str_to_num_ok);
       user_pref.implicit_str_to_num_ok = 1;
       Matrix m = tc.matrix_value ();
       os.write (m.data (), 8 * len);
       run_unwind_frame ("save_mat_binary_data");
     }
+  else if (tc.is_range ())
+    {
+      Range r = tc.range_value ();
+      double base = r.base ();
+      double inc = r.inc ();
+      int nel = r.nelem ();
+      for (int i = 0; i < nel; i++)
+	{
+	  double x = base + i * inc;
+	  os.write (&x, 8);
+	}
+    }
   else
     {
       gripe_wrong_type_arg ("save", tc);
       fail = 1;
     }
 
   return (os && ! fail);
 }
@@ -2788,16 +2801,19 @@ static load_save_format
 get_default_save_format (void)
 {
   load_save_format retval = LS_ASCII;
 
   char *fmt = user_pref.default_save_format;
 
   if (strcasecmp (fmt, "binary") == 0)
     retval = LS_BINARY;
+  else if (strcasecmp (fmt, "mat-binary") == 0
+	   || strcasecmp (fmt, "mat_binary") == 0)
+    retval = LS_MAT_BINARY;
       
   return retval;
 }
 
 static void
 write_binary_header (ostream& stream, load_save_format format)
 {
   if (format == LS_BINARY)
@@ -2930,17 +2946,17 @@ save variables in a file")
     }
   else
     {
       char *fname = tilde_expand (*argv);
 
       argc--;
       argv++;
 
-      unsigned mode = ios::out;
+      unsigned mode = ios::out|ios::trunc;
       if (format == LS_BINARY || format == LS_MAT_BINARY)
 	mode |= ios::bin;
 
       ofstream file (fname, mode);
 
       if (file)
 	{
 	  save_vars (argv, argc, file, save_builtins, format,
