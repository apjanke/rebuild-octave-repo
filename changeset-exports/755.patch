# HG changeset patch
# User jwe
# Date 781110806 0
#      Sun Oct 02 15:13:26 1994 +0000
# Node ID 0a9ac29dfd4da6024f4e208fadb10a5f571999d4
# Parent  daf899e42dfcb5caca217f6c5e056b3c259ca631
[project @ 1994-10-02 15:13:26 by jwe]

diff --git a/src/Map.cc b/src/Map.cc
--- a/src/Map.cc
+++ b/src/Map.cc
@@ -33,20 +33,16 @@ and distributed under the terms of the G
 License as published by the Free Software Foundation.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
-#if defined (__GNUG__) && defined (USE_EXTERNAL_TEMPLATES)
-#pragma implementation
-#endif
-
 #include <iostream.h>
 
 #include "Map.h"
 
 static unsigned int
 hash (const char *str)
 {
   unsigned h = 0;
@@ -107,34 +103,32 @@ Map<C>::error (const char* msg) const
 
 // CHMap class.
 
 // The nodes are linked together serially via a version of a trick
 // used in some vtables: odd pointers are actually links to the next
 // table entry.  Not terrible, but not wonderful either.
 
 template <class C>
-static inline
-int
+static int
 goodCHptr (CHNode<C> *t)
 {
   return ((((unsigned) t) & 1) == 0);
 }
 
 // This sucks, but avoids g++ 2.6.0 `type unification failed' errors.
 
-void *
+static void *
 index_to_CHptr (int i)
 {
   return (void *) ((i << 1) + 1);
 }
 
 template <class C>
-static inline
-int
+static int
 CHptr_to_index (CHNode<C> *t)
 {
   return ((unsigned) t) >> 1;
 }
 
 template <class C>
 CHMap<C>::CHMap (const C& dflt, unsigned int sz) : Map<C> (dflt)
 {
@@ -276,32 +270,14 @@ CHMap<C>::OK (void) const
   v &= count == n;
 
   if (! v)
     error ("invariant failure");
 
   return v;
 }
 
-#if defined (__GNUG__) && defined (USE_EXTERNAL_TEMPLATES)
-#if defined (OCTAVE_SOURCE)
-
-#include "tree-const.h"
-typedef Map<tree_constant> map_type_tree_constant;
-typedef CHNode<tree_constant> chnode_type_tree_constant;
-typedef CHMap<tree_constant> chmap_type_tree_constant;
-
-#elif defined (USER_TYPEDEFS)
-
-// Users can generate their own .o files with their own types, as many
-// times as they like.  USER_TYPEDEFS should be defined to be the name
-// of an include file that contains typdefs for the desired types.
-//
-// For example, if my-types.h contains typedefs for the Map types
-// you are interested in, you might compile this file with the command
-//
-//   g++ -fexternal-templates -DUSE_EXTERNAL_TEMPLATES \
-//       -DUSER_TYPEDEFS=\"my-types.h\"
-
-#include USER_TYPEDEFS
-
-#endif
-#endif
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; page-delimiter: "^/\\*" ***
+;;; End: ***
+*/
diff --git a/src/Map.h b/src/Map.h
--- a/src/Map.h
+++ b/src/Map.h
@@ -32,20 +32,16 @@ of Map and CHMap from libg++, originally
 and distributed under the terms of the GNU Library General Public
 License as published by the Free Software Foundation.
 
 */
 
 #if ! defined (octave_Map_h)
 #define octave_Map_h 1
 
-#if defined (__GNUG__) && defined (USE_EXTERNAL_TEMPLATES)
-#pragma interface
-#endif
-
 #include <Pix.h>
 
 #include "utils.h"
 
 template <class C>
 class Map
 {
 protected:
@@ -151,20 +147,16 @@ public:
     {
       return seek (key) != 0;
     }
 
   void clear (void);
   int  OK (void) const;
 };
 
-#if defined (__GNUG__) && ! defined (USE_EXTERNAL_TEMPLATES)
-#include "Map.cc"
-#endif
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/SLStack.cc b/src/SLStack.cc
--- a/src/SLStack.cc
+++ b/src/SLStack.cc
@@ -20,20 +20,16 @@ along with Octave; see the file COPYING.
 Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
-#if defined (__GNUG__) && defined (USE_EXTERNAL_TEMPLATES)
-#pragma implementation
-#endif
-
 #include "SLStack.h"
 
 template <class T>
 SLStack<T>::SLStack (void) : p ()
 {
 }
 
 template <class T>
@@ -111,36 +107,14 @@ SLStack<T>::OK (void)
 
 template <class T>
 void
 SLStack<T>::clear (void)
 {
   p.clear ();
 }
 
-#ifdef __GNUG__
-#if defined (OCTAVE_SOURCE) && defined (USE_EXTERNAL_TEMPLATES)
-
-typedef SLStack<int> slstack_type_int;
-typedef SLStack<char *> slstack_type_p_char;
-
-#include "symtab.h"
-typedef SLStack<symbol_def *> slstack_type_p_symbol_def;
-
-#include "token.h"
-typedef SLStack<token *> slstack_type_p_token;
-
-#include "tree-base.h"
-#include "tree-expr.h"
-typedef SLStack<tree_matrix *> slstack_type_p_tree_matrix;
-
-#include "unwind-prot.h"
-typedef SLStack<unwind_elem> slstack_type_unwind_elem;
-
-#endif
-#endif
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/SLStack.h b/src/SLStack.h
--- a/src/SLStack.h
+++ b/src/SLStack.h
@@ -14,20 +14,16 @@ PURPOSE.  See the GNU Library General Pu
 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the Free Software
 Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 */
 
 #if !defined (_SLStack_h)
 #define _SLStack_h 1
 
-#if defined (__GNUG__) && defined (USE_EXTERNAL_TEMPLATES)
-#pragma interface
-#endif
-
 #include "SLList.h"
 #include "Stack.h"
 
 template <class T>
 class
 SLStack : public Stack<T>
 {
  private:
@@ -49,20 +45,16 @@ SLStack : public Stack<T>
   int full (void);
   int length (void);
 
   void clear (void);
 
   int OK (void);
 };
 
-#if defined (__GNUG__) && ! defined (USE_EXTERNAL_TEMPLATES)
-#include "SLStack.cc"
-#endif
-
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/Stack.cc b/src/Stack.cc
--- a/src/Stack.cc
+++ b/src/Stack.cc
@@ -22,51 +22,25 @@ Software Foundation, 675 Mass Ave, Cambr
 */
 
 // Maybe this will work with 2.6.x and beyond?
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
-#if defined (__GNUG__) && defined (USE_EXTERNAL_TEMPLATES)
-#pragma implementation
-#endif
-
 #include <iostream.h>
 
 #include "Stack.h"
 
 template <class T>
 void
 Stack<T>::error (const char *msg)
 {
   cerr << msg;
 }
 
-#ifdef __GNUG__
-#if defined (OCTAVE_SOURCE) && defined (USE_EXTERNAL_TEMPLATES)
-
-typedef Stack<int> stack_type_int;
-typedef Stack<char *> stack_type_p_char;
-
-#include "symtab.h"
-typedef Stack<symbol_def *> stack_type_p_symbol_def;
-
-#include "token.h"
-typedef Stack<token *> stack_type_p_token;
-
-#include "tree-base.h"
-#include "tree-expr.h"
-typedef Stack<tree_matrix *> stack_type_p_tree_matrix;
-
-#include "unwind-prot.h"
-typedef Stack<unwind_elem> stack_type_unwind_elem;
-
-#endif
-#endif
-
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/Stack.h b/src/Stack.h
--- a/src/Stack.h
+++ b/src/Stack.h
@@ -15,20 +15,16 @@ You should have received a copy of the G
 License along with this library; if not, write to the Free Software
 Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 */
 
 
 #ifndef _Stack_h
 #define _Stack_h 1
 
-#if defined (__GNUG__) && defined (USE_EXTERNAL_TEMPLATES)
-//#pragma interface
-#endif
-
 template <class T>
 class
 Stack
 {
  public:
   inline Stack (void) { }
   inline virtual ~Stack (void) { }
 
