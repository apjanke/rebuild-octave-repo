# HG changeset patch
# User jwe
# Date 948793457 0
#      Tue Jan 25 09:44:17 2000 +0000
# Node ID 64f8babb7b3de6ae9861569195cdf6b75046425e
# Parent  9c509e1cbf494c373e2bc33562eed6d92f513a63
[project @ 2000-01-25 09:44:15 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2000-01-24  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* emacs/octave-mod.el (octave-mode-syntax-table):
+	Make `%' a comment start character too.
+
 2000-01-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Check for strptime and localtime_r.
 
 1999-11-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in (XTRA_CXXFLAGS, XTRA_CFLAGS): Use -mminimal-toc on
 	AIX systems.
diff --git a/emacs/octave-mod.el b/emacs/octave-mod.el
--- a/emacs/octave-mod.el
+++ b/emacs/octave-mod.el
@@ -296,17 +296,17 @@ parenthetical grouping.")
     (modify-syntax-entry ?| "."   table)
     (modify-syntax-entry ?! "."   table)
     (modify-syntax-entry ?\\ "\\" table)
     (modify-syntax-entry ?\' "."  table)
     (modify-syntax-entry ?\` "w"  table)
     (modify-syntax-entry ?\" "\"" table)
     (modify-syntax-entry ?. "w"   table)
     (modify-syntax-entry ?_ "w"   table)
-    (modify-syntax-entry ?\% "."  table)
+    (modify-syntax-entry ?\% "<"  table)
     (modify-syntax-entry ?\# "<"  table)
     (modify-syntax-entry ?\n ">"  table)
     (setq octave-mode-syntax-table table)))
 
 (defcustom octave-auto-indent nil
   "*Non-nil means indent line after a semicolon or space in Octave mode."
   :type 'boolean
   :group 'octave)
diff --git a/liboctave/Array2.cc b/liboctave/Array2.cc
--- a/liboctave/Array2.cc
+++ b/liboctave/Array2.cc
@@ -38,16 +38,61 @@ Software Foundation, 59 Temple Place - S
 #if defined (HEAVYWEIGHT_INDEXING)
 #include "idx-vector.h"
 #include "Array2-idx.h"
 #endif
 
 #include "lo-error.h"
 
 template <class T>
+int
+Array2<T>::get_size (int r, int c) const
+{
+  // XXX KLUGE XXX
+
+  // If an allocation of an array with r * c elements of type T
+  // would cause an overflow in the allocator when computing the
+  // size of the allocation, then return a value which, although
+  // not equivalent to the actual request, should be too large for
+  // most current hardware, but not so large to cause the
+  // allocator to barf on computing retval * sizeof (T).
+
+  // A guess (should be quite conservative).
+  static const int MALLOC_OVERHEAD = 1024;
+
+  static int nl;
+  static double dl
+    = frexp (static_cast<double>
+	     (INT_MAX - MALLOC_OVERHEAD) / sizeof (T), &nl);
+
+  // This value should be an integer.  If we return this value and
+  // things work the way we expect, we should be paying a visit to
+  // new_handler in no time flat.
+  static int max_items = static_cast<int> (ldexp (dl, nl));
+
+  int nr, nc;
+  double dr = frexp (static_cast<double> (r), &nr);
+  double dc = frexp (static_cast<double> (c), &nc);
+
+  int nt = nr + nc;
+  double dt = dr * dc;
+
+  if (dt <= 0.5)
+    {
+      nt--;
+      dt *= 2;
+
+      if (dt <= 0.5)
+	nt--;
+    }
+
+  return (nt < nl || (nt == nl && dt < dl)) ? r * c : max_items;
+}
+
+template <class T>
 T
 Array2<T>::range_error (const char *fcn, int i, int j) const
 {
   (*current_liboctave_error_handler)
     ("%s (%d, %d): range error", fcn, i, j);
   return T ();
 }
 
@@ -79,17 +124,17 @@ Array2<T>::resize (int r, int c)
 
   ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_len = length ();
 
-  rep = new ArrayRep (r*c);
+  rep = new ArrayRep (get_size (r, c));
 
   d1 = r;
   d2 = c;
 
   if (old_data && old_len > 0)
     {
       int min_r = old_d1 < r ? old_d1 : r;
       int min_c = old_d2 < c ? old_d2 : c;
@@ -119,17 +164,17 @@ Array2<T>::resize (int r, int c, const T
 
   ArrayRep *old_rep = rep;
   const T *old_data = data ();
 
   int old_d1 = dim1 ();
   int old_d2 = dim2 ();
   int old_len = length ();
 
-  rep = new ArrayRep (r*c);
+  rep = new ArrayRep (get_size (r, c));
 
   d1 = r;
   d2 = c;
 
   int min_r = old_d1 < r ? old_d1 : r;
   int min_c = old_d2 < c ? old_d2 : c;
 
   if (old_data && old_len > 0)
diff --git a/liboctave/Array2.h b/liboctave/Array2.h
--- a/liboctave/Array2.h
+++ b/liboctave/Array2.h
@@ -24,31 +24,37 @@ Software Foundation, 59 Temple Place - S
 #if !defined (octave_Array2_h)
 #define octave_Array2_h 1
 
 #if defined (__GNUG__)
 #pragma interface
 #endif
 
 #include <cassert>
+#include <climits>
+#include <cmath>
 #include <cstdlib>
 
 #include "Array.h"
 #include "lo-error.h"
 
 class idx_vector;
 
 // Two dimensional array class.
 
 template <class T>
 class Array2 : public Array<T>
 {
+private:
+
+  int get_size (int r, int c) const;
+
 protected:
 
-  Array2 (T *d, int n, int m) : Array<T> (d, n*m)
+  Array2 (T *d, int n, int m) : Array<T> (d, get_size (n, m))
     {
       d1 = n;
       d2 = m;
       set_max_indices (2);
     }
 
 public:
 
@@ -61,24 +67,24 @@ public:
 
   Array2 (void) : Array<T> ()
     {
       d1 = 0;
       d2 = 0;
       set_max_indices (2);
     }
 
-  Array2 (int n, int m) : Array<T> (n*m)
+  Array2 (int n, int m) : Array<T> (get_size (n, m))
     {
       d1 = n;
       d2 = m;
       set_max_indices (2);
     }
 
-  Array2 (int n, int m, const T& val) : Array<T> (n*m, val)
+  Array2 (int n, int m, const T& val) : Array<T> (get_size (n, m), val)
     {
       d1 = n;
       d2 = m;
       set_max_indices (2);
     }
 
   Array2 (const Array2<T>& a) : Array<T> (a)
     {
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2000-01-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* Array2.cc (Array2<T>::get_size): New function.
+	(Array2<T>::Array2, Array2<T>::resize): Use it.
+
 2000-01-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array2-idx.h (Array2<T>::maybe_delete_elements (idx_vector&)):
 	New function.
 	(assign (Array2<LT>& lhs, const Array2<RT>& rhs)):
 	Use it when indexing with one arg instead of faking a second one.
 	(Array2<T>::maybe_delete_elements (idx_vector&, idx_vector&)):
 	Return empty matrices with the correct dimensions for A(:,:) = []
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2000-01-24  Cyril Humbert <humbert@phobos.univ-mlv.fr>
+
+	* statistics/distributions/weibull_pdf.m: Use correct formula.
+
 2000-01-22  Michael Reifenberger <mike@Plaut.de>
 
 	* audio/saveaudio.m: Also accept files with .ul extension.
 	* audio/loadaudio.m: Ditto.
 	* audio/playaudio.m: Ditto.
 
 2000-01-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
diff --git a/scripts/statistics/distributions/weibull_pdf.m b/scripts/statistics/distributions/weibull_pdf.m
--- a/scripts/statistics/distributions/weibull_pdf.m
+++ b/scripts/statistics/distributions/weibull_pdf.m
@@ -53,16 +53,16 @@ function pdf = weibull_pdf (x, shape, sc
 
   k = find ((x > -Inf) & (x <= 0) & ok);
   if (any (k))
     pdf(k) = zeros (1, length (k));
   endif
 
   k = find ((x > 0) & (x < Inf) & ok);
   if (any (k))
-    pdf(k) = (shape(k) .* (scale(k) .^ shape(k))
+    pdf(k) = (shape(k) .* (scale(k) .^ -shape(k))
               .* (x(k) .^ (shape(k) - 1))
               .* exp(- (x(k) ./ scale(k)) .^ shape(k)));
   endif
 
   pdf = reshape (pdf, r, c);
 
 endfunction
