# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1428525970 14400
#      Wed Apr 08 16:46:10 2015 -0400
# Node ID 10600b2dd3c1e09c2c97d318b928e91167b3b64a
# Parent  48aa3d6d34273727d89f64cf443c81bad190843c
make units other than data work for axes labels and title (bug #35857)

* graphics.in.h, graphics.cc (base_property::invalidate): New function.
(axes::properties::set_defaults): If mode is not "reset", invalidate
label and title handles before recreating them.  Don't notify toolkit
when recreating label and title handles.  Update label and title
positions after they are created.
(convert_label_position): New static function.
(axes::properties::update_xlabel_position,
axes::properties::update_ylabel_position,
axes::properties::update_zlabel_position,
axes::properties::update_title_position): Return early if object
is not valid.  Call convert_label_position to handle units other than
"data".
(text::properties::update_units): Preserve "auto" positionmode.
(gh_manager::do_make_graphics_handle): Call override_defaults here for
newly created objects.  If creating an axes object, also call
override_defaults for the axes label and title objects.
(graphics_object::override_defaults): New function.
(figure::figure, axes::axes, line::line, text::text, image::image,
patch::patch, surface::surface, hggroup::hggroup, uimenu::uimenu,
uicontextmenu::uicontextmenu, uicontrol::uicontrol, uipanel::uipanel,
uitoolbar::uitoolbar, uipushtool::uipushtool,
uitoggletool::uitoggletool):
Don't call override_defaults from constructor.

diff --git a/libinterp/corefcn/graphics.cc b/libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc
+++ b/libinterp/corefcn/graphics.cc
@@ -5063,28 +5063,39 @@ axes::properties::set_defaults (base_gra
       position = default_axes_position ();
       activepositionproperty = "outerposition";
     }
 
   if (mode != "reset")
     {
       delete_children (true);
 
+      xlabel.invalidate ();
+      ylabel.invalidate ();
+      zlabel.invalidate ();
+      title.invalidate ();
+
       xlabel = gh_manager::make_graphics_handle ("text", __myhandle__,
-                                                 false, false);
+                                                 false, false, false);
       ylabel = gh_manager::make_graphics_handle ("text", __myhandle__,
-                                                 false, false);
+                                                 false, false, false);
       zlabel = gh_manager::make_graphics_handle ("text", __myhandle__,
-                                                 false, false);
+                                                 false, false, false);
       title = gh_manager::make_graphics_handle ("text", __myhandle__,
-                                                false, false);
+                                                false, false, false);
+
       adopt (xlabel.handle_value ());
       adopt (ylabel.handle_value ());
       adopt (zlabel.handle_value ());
       adopt (title.handle_value ());
+
+      update_xlabel_position ();
+      update_ylabel_position ();
+      update_zlabel_position ();
+      update_title_position ();
     }
   else
     {
       graphics_object go = gh_manager::get_object (xlabel.handle_value ());
       go.reset_default_properties ();
       go = gh_manager::get_object (ylabel.handle_value ());
       go.reset_default_properties ();
       go = gh_manager::get_object (zlabel.handle_value ());
@@ -5761,27 +5772,60 @@ axes::properties::update_ticklength (voi
 %! subplot (2,1,2);
 %!  plot (rand (3));
 %!  set (gca, "ticklength", get (gca, "ticklength") * 2, "tickdir", "out");
 %!  xlabel xlabel;
 %!  ylabel ylabel;
 %!  title title;
 */
 
+static ColumnVector
+convert_label_position (const ColumnVector& p,
+                        const text::properties& props,
+                        const graphics_xform& xform,
+                        const Matrix& bbox)
+{
+  ColumnVector retval;
+
+  caseless_str to_units = props.get_units ();
+
+  if (! to_units.compare ("data"))
+    {
+      ColumnVector v = xform.transform (p(0), p(1), p(2));
+
+      retval.resize (3);
+
+      retval(0) = v(0) - bbox(0) + 1;
+      retval(1) = bbox(1) + bbox(3) - v(1) + 1;
+      retval(2) = 0;
+
+      retval = convert_position (retval, "pixels", to_units,
+                                 bbox.extract_n (0, 2, 1, 2));
+    }
+  else
+    retval = p;
+
+  return retval;
+}
+
 static bool updating_xlabel_position = false;
 
 void
 axes::properties::update_xlabel_position (void)
 {
   if (updating_xlabel_position)
     return;
 
+  graphics_object obj = gh_manager::get_object (get_xlabel ());
+
+  if (! obj.valid_object ())
+    return;
+
   text::properties& xlabel_props
-    = reinterpret_cast<text::properties&>
-        (gh_manager::get_object (get_xlabel ()).get_properties ());
+    = reinterpret_cast<text::properties&> (obj.get_properties ());
 
   bool is_empty = xlabel_props.get_string ().is_empty ();
 
   unwind_protect frame;
   frame.protect_var (updating_xlabel_position);
   updating_xlabel_position = true;
 
   if (! is_empty)
@@ -5843,16 +5887,20 @@ axes::properties::update_xlabel_position
         case AXE_HORZ_DIR:
           p(1) += (x2Dtop ? -hmax : hmax);
           break;
         }
 
       if (xlabel_props.positionmode_is ("auto"))
         {
           p = xform.untransform (p(0), p(1), p(2), true);
+
+          p = convert_label_position (p, xlabel_props, xform,
+                                      get_extent (false));
+
           xlabel_props.set_position (p.extract_n (0, 3).transpose ());
           xlabel_props.set_positionmode ("auto");
         }
 
       if (! is_empty && xlabel_props.rotationmode_is ("auto"))
         {
           xlabel_props.set_rotation (angle);
           xlabel_props.set_rotationmode ("auto");
@@ -5863,19 +5911,23 @@ axes::properties::update_xlabel_position
 static bool updating_ylabel_position = false;
 
 void
 axes::properties::update_ylabel_position (void)
 {
   if (updating_ylabel_position)
     return;
 
+  graphics_object obj = gh_manager::get_object (get_ylabel ());
+
+  if (! obj.valid_object ())
+    return;
+
   text::properties& ylabel_props
-    = reinterpret_cast<text::properties&>
-        (gh_manager::get_object (get_ylabel ()).get_properties ());
+    = reinterpret_cast<text::properties&> (obj.get_properties ());
 
   bool is_empty = ylabel_props.get_string ().is_empty ();
 
   unwind_protect frame;
   frame.protect_var (updating_ylabel_position);
   updating_ylabel_position = true;
 
   if (! is_empty)
@@ -5946,16 +5998,20 @@ axes::properties::update_ylabel_position
         case AXE_HORZ_DIR:
           p(1) += hmax;
           break;
         }
 
       if (ylabel_props.positionmode_is ("auto"))
         {
           p = xform.untransform (p(0), p(1), p(2), true);
+
+          p = convert_label_position (p, ylabel_props, xform,
+                                      get_extent (false));
+
           ylabel_props.set_position (p.extract_n (0, 3).transpose ());
           ylabel_props.set_positionmode ("auto");
         }
 
       if (! is_empty && ylabel_props.rotationmode_is ("auto"))
         {
           ylabel_props.set_rotation (angle);
           ylabel_props.set_rotationmode ("auto");
@@ -5966,19 +6022,23 @@ axes::properties::update_ylabel_position
 static bool updating_zlabel_position = false;
 
 void
 axes::properties::update_zlabel_position (void)
 {
   if (updating_zlabel_position)
     return;
 
+  graphics_object obj = gh_manager::get_object (get_zlabel ());
+
+  if (! obj.valid_object ())
+    return;
+
   text::properties& zlabel_props
-    = reinterpret_cast<text::properties&>
-        (gh_manager::get_object (get_zlabel ()).get_properties ());
+    = reinterpret_cast<text::properties&> (obj.get_properties ());
 
   bool camAuto = cameraupvectormode_is ("auto");
   bool is_empty = zlabel_props.get_string ().is_empty ();
 
   unwind_protect frame;
   frame.protect_var (updating_zlabel_position);
   updating_zlabel_position = true;
 
@@ -6062,16 +6122,20 @@ axes::properties::update_zlabel_position
         case AXE_HORZ_DIR:
           p(1) += hmax;
           break;
         }
 
       if (zlabel_props.positionmode_is ("auto"))
         {
           p = xform.untransform (p(0), p(1), p(2), true);
+
+          p = convert_label_position (p, zlabel_props, xform,
+                                      get_extent (false));
+
           zlabel_props.set_position (p.extract_n (0, 3).transpose ());
           zlabel_props.set_positionmode ("auto");
         }
 
       if (! is_empty && zlabel_props.rotationmode_is ("auto"))
         {
           zlabel_props.set_rotation (angle);
           zlabel_props.set_rotationmode ("auto");
@@ -6082,19 +6146,23 @@ axes::properties::update_zlabel_position
 static bool updating_title_position = false;
 
 void
 axes::properties::update_title_position (void)
 {
   if (updating_title_position)
     return;
 
+  graphics_object obj = gh_manager::get_object (get_title ());
+
+  if (! obj.valid_object ())
+    return;
+
   text::properties& title_props
-    = reinterpret_cast<text::properties&>
-        (gh_manager::get_object (get_title ()).get_properties ());
+    = reinterpret_cast<text::properties&> (obj.get_properties ());
 
   unwind_protect frame;
   frame.protect_var (updating_title_position);
   updating_title_position = true;
 
   if (title_props.positionmode_is ("auto"))
     {
       graphics_xform xform = get_transform ();
@@ -6113,16 +6181,18 @@ axes::properties::update_title_position 
           ext = get_ticklabel_extents (get_xtick ().matrix_value (),
                                        get_xticklabel ().all_strings (),
                                        get_xlim ().matrix_value ());
           p(1) -= ext(1);
         }
 
       p = xform.untransform (p(0), p(1), p(2), true);
 
+      p = convert_label_position (p, title_props, xform, bbox);
+
       title_props.set_position (p.extract_n (0, 3).transpose ());
       title_props.set_positionmode ("auto");
     }
 }
 
 void
 axes::properties::update_autopos (const std::string& elem_type)
 {
@@ -8140,21 +8210,28 @@ text::properties::update_units (void)
       set_xliminclude ("off");
       set_yliminclude ("off");
       set_zliminclude ("off");
     }
 
   Matrix pos = get_position ().matrix_value ();
 
   pos = convert_text_position (pos, *this, cached_units, get_units ());
+
   // FIXME: if the current axes view is 2D, then one should
   // probably drop the z-component of "pos" and leave "zliminclude"
   // to "off".
+
+  bool autopos = positionmode_is ("auto");
+
   set_position (pos);
 
+  if (autopos)
+    set_positionmode ("auto");
+
   if (units_is ("data"))
     {
       set_xliminclude ("on");
       set_yliminclude ("on");
       // FIXME: see above
       set_zliminclude ("off");
     }
 
@@ -9092,16 +9169,45 @@ gh_manager::do_make_graphics_handle (con
 
   go = make_graphics_object_from_type (go_name, h, p);
 
   if (go)
     {
       graphics_object obj (go);
 
       handle_map[h] = obj;
+
+      // Overriding defaults will work now because the handle is valid
+      // and we can find parent objects (not just handles).
+      obj.override_defaults ();
+
+      if (go_name == "axes")
+        {
+          // Handle defaults for labels since overriding defaults for
+          // them can't work before the axes object is fully
+          // constructed.
+
+          axes::properties& props =
+            dynamic_cast<axes::properties&> (obj.get_properties ());
+
+          graphics_object tgo;
+
+          tgo = gh_manager::get_object (props.get_xlabel ());
+          tgo.override_defaults ();
+
+          tgo = gh_manager::get_object (props.get_ylabel ());
+          tgo.override_defaults ();
+
+          tgo = gh_manager::get_object (props.get_zlabel ());
+          tgo.override_defaults ();
+
+          tgo = gh_manager::get_object (props.get_title ());
+          tgo.override_defaults ();
+        }
+
       if (do_createfcn)
         go->get_properties ().execute_createfcn ();
 
       // Notify graphics toolkit.
       if (do_notify_toolkit)
         obj.initialize ();
     }
   else
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -1572,16 +1572,18 @@ public:
   }
 
   handle_property& operator = (const graphics_handle& h)
   {
     set (octave_value (h.value ()));
     return *this;
   }
 
+  void invalidate (void) { current_val = octave_NaN; }
+
   base_property* clone (void) const { return new handle_property (*this); }
 
 protected:
   OCTINTERP_API bool do_set (const octave_value& v);
 
 private:
   graphics_handle current_val;
 };
@@ -3000,16 +3002,21 @@ public:
 
   void mark_modified (void) { rep->mark_modified (); }
 
   void override_defaults (base_graphics_object& obj)
   {
     rep->override_defaults (obj);
   }
 
+  void override_defaults (void)
+  {
+    rep->override_defaults (*rep);
+  }
+
   void build_user_defaults_map (property_list::pval_map_type &def,
                                 const std::string go_name) const
   {
     rep->build_user_defaults_map (def, go_name);
   }
 
   void set_from_list (property_list& plist) { rep->set_from_list (plist); }
 
@@ -3530,19 +3537,17 @@ public:
   };
 
 private:
   properties xproperties;
 
 public:
   figure (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p), default_properties ()
-  {
-    xproperties.override_defaults (*this);
-  }
+  { }
 
   ~figure (void) { }
 
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (root figure) to override first (properties knows how
     // to find the parent object).
     xproperties.override_defaults (obj);
@@ -4285,17 +4290,16 @@ public:
 private:
   properties xproperties;
 
 public:
   axes (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p), default_properties ()
   {
     xproperties.update_transform ();
-    xproperties.override_defaults (*this);
   }
 
   ~axes (void) { }
 
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (figure) to override first (properties knows how
     // to find the parent object).
@@ -4435,19 +4439,17 @@ public:
   };
 
 private:
   properties xproperties;
 
 public:
   line (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
-  {
-    xproperties.override_defaults (*this);
-  }
+  { }
 
   ~line (void) { }
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
@@ -4612,17 +4614,16 @@ public:
 private:
   properties xproperties;
 
 public:
   text (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   {
     xproperties.set_clipping ("off");
-    xproperties.override_defaults (*this);
   }
 
   ~text (void) { }
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
@@ -4820,17 +4821,16 @@ public:
 
 private:
   properties xproperties;
 
 public:
   image (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
   {
-    xproperties.override_defaults (*this);
     xproperties.initialize_data ();
   }
 
   ~image (void) { }
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
@@ -5010,19 +5010,17 @@ public:
   };
 
 private:
   properties xproperties;
 
 public:
   patch (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
-  {
-    xproperties.override_defaults (*this);
-  }
+  { }
 
   ~patch (void) { }
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
@@ -5174,19 +5172,17 @@ public:
   };
 
 private:
   properties xproperties;
 
 public:
   surface (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
-  {
-    xproperties.override_defaults (*this);
-  }
+  { }
 
   ~surface (void) { }
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
@@ -5254,19 +5250,17 @@ public:
   };
 
 private:
   properties xproperties;
 
 public:
   hggroup (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
-  {
-    xproperties.override_defaults (*this);
-  }
+  { }
 
   ~hggroup (void) { }
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
@@ -5328,19 +5322,17 @@ public:
   };
 
 private:
   properties xproperties;
 
 public:
   uimenu (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
-  {
-    xproperties.override_defaults (*this);
-  }
+  { }
 
   ~uimenu (void) { }
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
@@ -5383,19 +5375,17 @@ public:
   };
 
 private:
   properties xproperties;
 
 public:
   uicontextmenu (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
-  {
-    xproperties.override_defaults (*this);
-  }
+  { }
 
   ~uicontextmenu (void) { }
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
@@ -5484,19 +5474,17 @@ public:
   };
 
 private:
   properties xproperties;
 
 public:
   uicontrol (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
-  {
-    xproperties.override_defaults (*this);
-  }
+  { }
 
   ~uicontrol (void) { }
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
@@ -5559,19 +5547,17 @@ public:
   };
 
 private:
   properties xproperties;
 
 public:
   uipanel (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
-  {
-    xproperties.override_defaults (*this);
-  }
+  { }
 
   ~uipanel (void) { }
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
@@ -5607,19 +5593,17 @@ public:
   };
 
 private:
   properties xproperties;
 
 public:
   uitoolbar (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p), default_properties ()
-  {
-    xproperties.override_defaults (*this);
-  }
+  { }
 
   ~uitoolbar (void) { }
 
   void override_defaults (base_graphics_object& obj)
   {
     // Allow parent (figure) to override first (properties knows how
     // to find the parent object).
     xproperties.override_defaults (obj);
@@ -5718,19 +5702,17 @@ public:
   };
 
 private:
   properties xproperties;
 
 public:
   uipushtool (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
-  {
-    xproperties.override_defaults (*this);
-  }
+  { }
 
   ~uipushtool (void) { }
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
@@ -5779,19 +5761,17 @@ public:
   };
 
 private:
   properties xproperties;
 
 public:
   uitoggletool (const graphics_handle& mh, const graphics_handle& p)
     : base_graphics_object (), xproperties (mh, p)
-  {
-    xproperties.override_defaults (*this);
-  }
+  { }
 
   ~uitoggletool (void) { }
 
   base_properties& get_properties (void) { return xproperties; }
 
   const base_properties& get_properties (void) const { return xproperties; }
 
   bool valid_object (void) const { return true; }
