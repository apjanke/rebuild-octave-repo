# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1518545385 18000
#      Tue Feb 13 13:09:45 2018 -0500
# Node ID 6114be5172407a8a514638ad60015df8a358d490
# Parent  52ca22ba4474947fa75beee3f4550743cab04e2f
* pr-output.cc: Move defn of specialized abs before first use (bug #53114)

diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -1642,16 +1642,52 @@ float_display_format
 make_format (const FloatComplexNDArray& nda)
 {
   int r_fw = 0;
   int i_fw = 0;
   double scale = 0;
   return make_format (FloatComplexMatrix (nda), r_fw, i_fw, scale);
 }
 
+// FIXME: all this mess with abs is an attempt to avoid seeing
+//
+//   warning: comparison of unsigned expression < 0 is always false
+//
+// from GCC.  Isn't there a better way?
+
+template <typename T>
+/* static */ inline T
+abs (T x)
+{
+  return x < 0 ? -x : x;
+}
+
+#define INSTANTIATE_ABS(T)                      \
+  template /* static */ T abs (T)
+
+INSTANTIATE_ABS(signed char);
+INSTANTIATE_ABS(short);
+INSTANTIATE_ABS(int);
+INSTANTIATE_ABS(long);
+INSTANTIATE_ABS(long long);
+
+#define SPECIALIZE_UABS(T)                      \
+  template <>                                   \
+  /* static */ inline unsigned T                \
+  abs (unsigned T x)                            \
+  {                                             \
+    return x;                                   \
+  }
+
+SPECIALIZE_UABS(char)
+SPECIALIZE_UABS(short)
+SPECIALIZE_UABS(int)
+SPECIALIZE_UABS(long)
+SPECIALIZE_UABS(long long)
+
 #define MAKE_INT_MATRIX_FORMAT(TYPE)                                    \
   template <>                                                           \
   float_display_format                                                  \
   make_format (const intNDArray<TYPE>& nda)                             \
   {                                                                     \
     bool isneg = false;                                                 \
     int digits = 0;                                                     \
                                                                         \
@@ -3085,52 +3121,16 @@ pr_int (std::ostream& os, const T& d, in
       os << std::setw (fw)
          << typename octave_print_conv<T>::print_conv_type (d);
 
       if (bank_format)
         os << ".00";
     }
 }
 
-// FIXME: all this mess with abs is an attempt to avoid seeing
-//
-//   warning: comparison of unsigned expression < 0 is always false
-//
-// from GCC.  Isn't there a better way?
-
-template <typename T>
-/* static */ inline T
-abs (T x)
-{
-  return x < 0 ? -x : x;
-}
-
-#define INSTANTIATE_ABS(T)                      \
-  template /* static */ T abs (T)
-
-INSTANTIATE_ABS(signed char);
-INSTANTIATE_ABS(short);
-INSTANTIATE_ABS(int);
-INSTANTIATE_ABS(long);
-INSTANTIATE_ABS(long long);
-
-#define SPECIALIZE_UABS(T)                      \
-  template <>                                   \
-  /* static */ inline unsigned T                \
-  abs (unsigned T x)                            \
-  {                                             \
-    return x;                                   \
-  }
-
-SPECIALIZE_UABS(char)
-SPECIALIZE_UABS(short)
-SPECIALIZE_UABS(int)
-SPECIALIZE_UABS(long)
-SPECIALIZE_UABS(long long)
-
 template void
 pr_int (std::ostream&, const octave_int8&, int);
 
 template void
 pr_int (std::ostream&, const octave_int16&, int);
 
 template void
 pr_int (std::ostream&, const octave_int32&, int);
