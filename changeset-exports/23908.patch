# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1502638559 -7200
#      Sun Aug 13 17:35:59 2017 +0200
# Node ID 1e54d9aba4338c176ba832af90d44925fb277777
# Parent  8fa415ff2cb34371e339b9f8313a14abec8b7f86
reload editor tabs when the path is renamed in file browser (bug #43922)

* file-editor.cc (handle_file_remove): if old name is a directory, call
  the related new function and return,
  (handle_dir_remove): new function, that checks if an open editor file
  is within the directory, that is going to be removed or renamed; if yes,
  the file is closed and stored for later reloading it from the new location;

* file-editor.h: new method handle_dir_remove for handling directories, that
  are going to be removed or renamed

diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -584,16 +584,25 @@ file_editor::handle_edit_file_request (c
 
 
 // Slot used for signals indicating that a file was changed/rename or
 // is going to be deleted/renamed
 void
 file_editor::handle_file_remove (const QString& old_name,
                                  const QString& new_name)
 {
+  // Check if old name is a file or directory
+  QFileInfo old (old_name);
+  if (old.isDir ())
+    {
+      // Call the function which handles directories and return
+      handle_dir_remove (old_name, new_name);
+      return;
+    }
+
   // Is old file open?
   file_editor_tab *editor_tab
     = static_cast<file_editor_tab *> (find_tab_widget (old_name));
 
   if (editor_tab)
     {
       // Yes, close it silently
       _no_focus = true;  // Remember for not focussing editor
@@ -620,16 +629,58 @@ file_editor::handle_file_remove (const Q
                   break;
                 }
             }
         }
     }
 }
 
 
+// Function for closing the files in a removed directory
+void
+file_editor::handle_dir_remove (const QString& old_name,
+                                const QString& new_name)
+{
+  QDir old_dir (old_name);
+
+  // Have all file editor tabs signal what their filenames are.
+  editor_tab_map.clear ();
+  emit fetab_file_name_query (nullptr);
+
+  // Loop over all open files and pick those within old_dir
+  _tmp_closed_files = QStringList ();
+
+  for (editor_tab_map_const_iterator p = editor_tab_map.begin ();
+       p != editor_tab_map.end (); p++)
+    {
+      QString rel_path_to_file = old_dir.relativeFilePath (p->first);
+      if (rel_path_to_file.left (3) != QString ("../"))
+        {
+          // We directly go down from old_dir to reach our file: Our
+          // file is included in the removed/renamed diectory.
+          // Thus delete it.
+          _no_focus = true;  // Remember for not focussing editor
+          file_editor_tab *editor_tab
+              = static_cast<file_editor_tab *> (p->second.fet_ID);
+          editor_tab->file_has_changed (QString (), true);  // Close
+          _no_focus = false;  // Back to normal
+
+
+          // Add the new file path and the encoding for later reloading
+          // if new_name is given
+          if (! new_name.isEmpty ())
+            {
+              QDir new_dir (new_name);
+              _tmp_closed_files << new_dir.absoluteFilePath (rel_path_to_file);
+              _tmp_closed_files << p->second.encoding;
+            }
+        }
+    }
+}
+
 // Slot for signal indicating that a file was renamed
 void
 file_editor::handle_file_renamed ()
 {
   _no_focus = true;  // Remember for not focussing editor
   for (int i = 0; i < _tmp_closed_files.count (); i = i + 2)
     request_open_file (_tmp_closed_files.at (i),
                        _tmp_closed_files.at (i+1));
diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -344,16 +344,18 @@ private:
   void save_file_as (QWidget *fetabID = nullptr);
   void mru_menu_update (void);
   bool call_custom_editor (const QString& file_name = QString (), int line = -1);
 
   void toggle_preference (const QString& preference, bool def);
 
   void switch_tab (int direction, bool movetab = false);
 
+  void handle_dir_remove (const QString& old_name, const QString& new_name);
+
   bool editor_tab_has_focus ();
 
   QWidget * find_tab_widget (const QString& openFileName);
   QAction * add_action (QMenu *menu, const QIcon& icon, const QString& text,
                         const char *member);
 
   QMenu * m_add_menu (QMenuBar *p, QString text);
 
