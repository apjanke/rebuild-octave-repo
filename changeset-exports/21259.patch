# HG changeset patch
# User Rik <rik@octave.org>
# Date 1455274701 -39600
#      Fri Feb 12 21:58:21 2016 +1100
# Node ID 4ee768b71a0e4d6f442b0f897de8485f21bacb06
# Parent  b248c28d9a7bcd68fee1e57f9ae227344e178271
maint: Clean up debug.cc file.

* debug.cc: Align comments to correct indentation.  Use space after '!' operator.
(Fdebugstatus): call octave_canonicalize_file_name.
* debug.cc (Fdbstop, Fdbclear, Fdbstatus): Rewrite docstring.

diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -100,17 +100,17 @@ snarf_file (const std::string& fname)
     }
 
   return retval;
 }
 
 static std::deque<size_t>
 get_line_offsets (const std::string& buf)
 {
-  // This could maybe be smarter.  Is deque the right thing to use here?
+  // FIXME: This could maybe be smarter.  Is deque the right thing to use here?
 
   std::deque<size_t> offsets;
 
   offsets.push_back (0);
 
   size_t len = buf.length ();
 
   for (size_t i = 0; i < len; i++)
@@ -217,25 +217,26 @@ parse_dbfunction_params (const char *who
                          std::string& symbol_name, bp_table::intmap& lines,
                          std::string& cond)
 {
   int nargin = args.length ();
   int list_idx = 0;
   symbol_name = "";
   lines = bp_table::intmap ();
 
-  if (nargin == 0 || !args(0).is_string ())
+  if (nargin == 0 || ! args(0).is_string ())
     print_usage (who);
-                                // elements already processed
+
+  // elements already processed
   bool seen_in = false, seen_at = false, seen_if = false;
   int pos = 0;
   dbstop_args token = dbstop_none;
   while (pos < nargin)
     {
-            // allow "in" and "at" to be implicit
+      // allow "in" and "at" to be implicit
       if (args(pos).is_string ())
         {
           std::string arg = args(pos).string_value ();
           if (arg == "in")
             {
               token = dbstop_in;
               pos++;
             }
@@ -257,17 +258,17 @@ parse_dbfunction_params (const char *who
       else
         token = dbstop_at;
 
       if (pos >= nargin)
         error ("%s: '%s' missing argument", who,
                ( token == dbstop_in ? "in" :
                 (token == dbstop_at ? "at" : "if")));
 
-            // process the actual arguments
+      // process the actual arguments
       switch (token)
         {
           case dbstop_in:
             symbol_name = args(pos).string_value ();
             if (seen_in)
               error ("%s: Too many function names specified -- %s",
                      who, symbol_name.c_str ());
             else if (seen_at || seen_if)
@@ -280,31 +281,31 @@ parse_dbfunction_params (const char *who
           case dbstop_at:
             if (seen_at)
               error ("%s: Only one 'at' clause is allowed -- %s",
                      who, args(pos).string_value ().c_str ());
             else if (seen_if)
                 error ("%s: line number must come before 'if' clause\n");
             seen_at = true;
 
-            if (!seen_in)
+            if (! seen_in)
               {
                 // It was a line number. Get function name from debugger.
                 if (Vdebugging)
                   //symbol_name = get_user_code ()->name ();
                   symbol_name = get_user_code ()->fcn_file_name ();
                 else
                   error ("%s: function name must come before line number "
                          "and 'if'", who);
                 seen_in = true;
               }
             else if (seen_if)
               error ("%s: line number must come before 'if' clause\n");
 
-              // Read a list of line numbers (or arrays thereof)
+            // Read a list of line numbers (or arrays thereof)
             for ( ; pos < nargin; pos++)
               {
                 if (args(pos).is_string ())
                   {
                     int line = atoi (args(pos).string_value ().c_str ());
 
                     if (line > 0)
                       lines[list_idx++] = line;
@@ -336,19 +337,19 @@ parse_dbfunction_params (const char *who
                       error ("%s: arguments to 'if' must all be strings", who);
                   }
 
                 cond = cond.substr (1);   // omit initial space
               }
             else    // stop on event (error, warning, interrupt, NaN/inf)
               {
                 std::string condition = args(pos).string_value ();
-                int on_off = !strcmp(who, "dbstop");
+                int on_off = ! strcmp(who, "dbstop");
 
-                                // list of error/warning IDs to update
+                // list of error/warning IDs to update
                 std::set<std::string> *id_list = NULL;
                 bool *stop_flag = NULL;         // Vdebug_on_... flag
 
                 if (condition == "error")
                   {
                     id_list = &bp_table::errors_that_stop;
                     stop_flag = &Vdebug_on_error;
                   }
@@ -377,37 +378,37 @@ parse_dbfunction_params (const char *who
 #else
                   warning ("%s: condition '%s' not yet supported",
                            who, condition.c_str ());
 #endif
                 else
                   error ("%s: invalid condition %s",
                          who, condition.c_str ());
 
-                // process ID list for  "dbstop if error <error_ID>" etc
+                // process ID list for "dbstop if error <error_ID>" etc
                 if (id_list != NULL)
                   {
                     pos++;
                     if (pos < nargin)       // only affect a single error ID
                       {
-                        if (!args(pos).is_string () || nargin > pos+1)
+                        if (! args(pos).is_string () || nargin > pos+1)
                           error ("%s: ID must be a single string", who);
                         else if (on_off == 1)
                           {
                             id_list->insert (args(pos).string_value ());
                             *stop_flag = 1;
                           }
                         else
                           {
                             id_list->erase (args(pos).string_value ());
                             if (id_list->empty ())
                               *stop_flag = 0;
                           }
                       }
-                    else  // unqualified.  Turn all on or off
+                    else   // unqualified.  Turn all on or off
                       {
                         id_list->clear ();
                         *stop_flag = on_off;
                         if (stop_flag == &Vdebug_on_error)
                           Vdebug_on_interrupt = on_off; // Matlabs stops on both
                       }
                   }
 
@@ -466,79 +467,79 @@ bp_table::dbclear_all_signals (void)
 }
 
 // Process the "warn", "errs", "caught" and "intr" fields for a call of
 // "dbstop (p)".
 void
 bp_table::dbstop_process_map_args (const octave_map& mv)
 {
   // process errs
-                                // why so many levels of indirection needed?
+  // why so many levels of indirection needed?
   bool fail = false;
   Cell U = mv.contents ("errs");
   if (U.numel () != 1)
     fail = (U.numel () > 1);
   else
     {
       Array<octave_value> W = U.index (0);
       if (W.numel () == 0 || W(0).length () == 0)
         Vdebug_on_error = 1;    // like "dbstop if error" with no identifier
-      else if (!W(0).is_cell ())
+      else if (! W(0).is_cell ())
         fail = true;
       else
         {
           Cell V = W(0).cell_value ();
           for (int i = 0; i < V.numel (); i++)
             {
               errors_that_stop.insert (V(i).string_value ());
               Vdebug_on_error = 1;
             }
         }
     }
   if (fail)
     error ("dbstop: invalid 'errs' field");
 
   // process caught
-                                // why so many levels of indirection needed?
+  // why so many levels of indirection needed?
   fail = false;
   U = mv.contents ("caught");
   if (U.numel () != 1)
     fail = (U.numel () > 1);
   else
     {
       Array<octave_value> W = U.index (0);
       if (W.numel () == 0 || W(0).length () == 0)
         Vdebug_on_caught = 1;    // like "dbstop if caught error" with no ID
-      else if (!W(0).is_cell ())
+      else if (! W(0).is_cell ())
         fail = true;
       else
         {
           Cell V = W(0).cell_value ();
           for (int i = 0; i < V.numel (); i++)
             {
               caught_that_stop.insert (V(i).string_value ());
               Vdebug_on_caught = 1;
             }
         }
     }
   if (fail)
     error ("dbstop: invalid 'caught' field");
 
   // process warn
-                                // why so many levels of indirection needed?
+  // why so many levels of indirection needed?
   fail = false;
   U = mv.contents ("warn");
   if (U.numel () != 1)
     fail = (U.numel () > 1);
   else
     {
       Array<octave_value> W = U.index (0);
       if (W.numel () == 0 || W(0).length () == 0)
         Vdebug_on_warning = 1;    // like "dbstop if warning" with no identifier
-      else if (!W(0).is_cell ())
+      else if (! W(0).is_cell ())
         fail = true;
       else
         {
           Cell V = W(0).cell_value ();
           for (int i = 0; i < V.numel (); i++)
             {
               warnings_that_stop.insert (V(i).string_value ());
               Vdebug_on_warning = 1;
@@ -549,19 +550,19 @@ bp_table::dbstop_process_map_args (const
     error ("dbstop: invalid 'warn' field");
 
   // process interrupt
   if (mv.isfield ("intr"))
     Vdebug_on_interrupt = 1;
 }
 
 
-// Insert a breakpoint in function  fcn  at  line  within file  fname,
-// to stop only when  condition  is true.
-// Record in  bp_set  that  fname  contains a breakpoint.
+// Insert a breakpoint in function fcn at line within file fname,
+// to stop only when  condition is true.
+// Record in bp_set that fname contains a breakpoint.
 bool
 bp_table::do_add_breakpoint_1 (octave_user_code *fcn,
                                const std::string& fname,
                                const bp_table::intmap& line,
                                const std::string& condition,
                                bp_table::intmap& retval)
 {
   bool found = false;
@@ -575,17 +576,17 @@ bp_table::do_add_breakpoint_1 (octave_us
       retval = cmds->add_breakpoint (file, line, condition);
 
       for (intmap_iterator p = retval.begin (); p != retval.end (); p++)
         {
           if (p->second != 0)
             {
               // normalise to store only the file name.
               // otherwise, there can be an entry for both file>subfunction and
-              // file, which causes a crash on  dbclear all
+              // file, which causes a crash on dbclear all
               const char *s = strchr (fname.c_str (), Vfilemarker);
               if (s)
                 bp_set.insert (fname.substr (0, s - fname.c_str ()));
               else
                 bp_set.insert (fname);
               found = true;
               break;
             }
@@ -607,17 +608,17 @@ condition_valid (const std::string& cond
       octave_parser parser (cond + " ;"); // ; to reject partial expr like "y=="
       parser.reset ();
       int parse_status = parser.run ();
       if (parse_status)
         error ("dbstop: Cannot parse condition '%s'", cond.c_str ());
       else
         {
           tree_statement *stmt = 0;
-          if (!parser.stmt_list)
+          if (! parser.stmt_list)
             error ("dbstop: "
                    "condition is not empty, but has nothing to evaluate");
           else
             {
               if (parser.stmt_list->length () == 1
                   && (stmt = parser.stmt_list->front ())
                   && stmt->is_expression ())
                 {
@@ -869,17 +870,17 @@ bp_table::do_get_breakpoint_list (const 
               tree_statement_list *cmds = f->body ();
 
               // FIXME: move the operation on cmds to the
               //        tree_statement_list class?
               if (cmds)
                 {
                   std::list<bp_type> bkpts = cmds->breakpoints_and_conds ();
 
-                  if (!bkpts.empty ())
+                  if (! bkpts.empty ())
                     retval[*it] = bkpts;
                 }
 
               // look for breakpoints in subfunctions
               const std::list<std::string> subf_nm = f->subfunction_names ();
 
               std::map<std::string, octave_value> subf = f->subfunctions ();
 
@@ -894,17 +895,17 @@ bp_table::do_get_breakpoint_list (const 
                       octave_user_code *ff = q->second.user_code_value ();
 
                       cmds = ff->body ();
                       if (cmds)
                         {
                           std::list<bp_type> bkpts
                                              = cmds->breakpoints_and_conds ();
 
-                          if (!bkpts.empty ())
+                          if (! bkpts.empty ())
                             retval[*it + Vfilemarker + ff->name ()] = bkpts;
                         }
                     }
                 }
             }
         }
     }
 
@@ -931,115 +932,129 @@ intmap_to_ov (const bp_table::intmap& li
 
   retval.resize (dim_vector (1, idx));
 
   return retval;
 }
 
 DEFUN (dbstop, args, ,
        "-*- texinfo -*-\n\
-@deftypefn  {} {} dbstop in @var{func}\n\
+@deftypefn  {} {} dbstop @var{func}\n\
+@deftypefnx {} {} dbstop @var{func} @var{line}\n\
+@deftypefnx {} {} dbstop @var{func} @var{line1} @var{line2} @dots{}\n\
+@deftypefnx {} {} dbstop @var{line1} @dots{}\n\
+@deftypefnx {} {} dbstop in @var{func}\n\
 @deftypefnx {} {} dbstop in @var{func} at @var{line}\n\
-@deftypefnx {} {} dbstop in @var{func} at @var{line} if '@var{condition}'\n\
+@deftypefnx {} {} dbstop in @var{func} at @var{line} if \"@var{condition}\"\n\
 @deftypefnx {} {} dbstop if @var{event}\n\
-@deftypefnx {} {} dbstop (@var{state})\n\
+@deftypefnx {} {} dbstop if @var{event} @var{ID}\n\
+@deftypefnx {} {} dbstop (@var{bp_struct})\n\
+@deftypefnx {} {@var{rline} =} dbstop @dots{}\n\
 \n\
-The argument @var{func} is the name of a function on the current path.\n\
-The argument @var{line} is the line number at which to break.\n\
-If @code{file.m} has a sub-function @code{func2}, then a breakpoint in\n\
-@code{func2} can be specified by specifying @var{func} either as @code{file}\n\
-or @code{file>func2}.  In either case, @var{line} is specified relative to\n\
-the start of @code{file.m}.  If @var{line} is not specified, it defaults to\n\
-the first line in @var{func}.  Multiple lines can be specified in a single\n\
-command; when function syntax is used, the lines may be passed as a single\n\
-vector argument.\n\
+Set breakpoints for the built-in debugger.\n\
 \n\
-When already in debug mode the @var{func} argument\n\
-can be omitted and the current function will be used.\n\
+@var{func} is the name of a function on the current @code{path}.  When\n\
+already in debug mode the @var{func} argument can be omitted and the current\n\
+function will be used.  Breakpoints at subfunctions are set with the scope\n\
+operator @samp{>}.  For example, If @file{file.m} has a subfunction\n\
+@code{func2}, then a breakpoint in @code{func2} can be specified by\n\
+@code{file>func2}.\n\
+\n\
+@var{line} is the line number at which to break.  If @var{line} is not\n\
+specified, it defaults to the first executable line in the file\n\
+@file{func.m}.  Multiple lines can be specified in a single command; when\n\
+function syntax is used, the lines may also be passed as a single vector\n\
+argument (@code{[@var{line1}, @var {line2}, @dots{}]}).\n\
 \n\
-The @var{condition} is any Octave expression that will be able to be\n\
-evaluated in the context of the breakpoint.  When the breakpoint is\n\
-encountered, @var{condition} will be evaluated, and execution will break if\n\
-@var{condition} is true.  If it cannot be evaluated, for example because it\n\
-refers to an undefined variable, an error will be thrown.  Expressions with\n\
-side effects (such as @code{y++ > 1}) actually alter the variables, and \n\
-should generally be avoided.\n\
-Conditions containing quotes (\", ') or comment characters (#, %) should be\n\
+@var{condition} is any Octave expression that can be evaluated in the code\n\
+context that exists at the breakpoint.  When the breakpoint is encountered,\n\
+@var{condition} will be evaluated, and execution will stop if\n\
+@var{condition} is true.  If @var{condition} cannot be evaluated, for\n\
+example because it refers to an undefined variable, an error will be thrown.\n\
+ Expressions with side effects (such as @code{y++ > 1}) will alter\n\
+variables, and should generally be avoided.  Conditions containing quotes\n\
+(@samp{\"}, @samp{'}) or comment characters (@samp{#}, @samp{%}) must be\n\
 enclosed in quotes.  (This does not apply to conditions entered from the\n\
-the editor's context menu.)\n\
-For example,\n\
+editor's context menu.)  For example: \n\
+\n\
 @example\n\
-dbstop in strread at 209 if 'any(format == \"%f\")'\n\
+dbstop in strread at 209 if 'any (format == \"%f\")'\n\
 @end example\n\
 \n\
-The form specifying @var{event} does not cause a fixed breakpoint.  Instead\n\
-it causes debug mode to be entered when specific unexpected circumstances\n\
-arise.  Possible values are\n\
+The form specifying @var{event} does not cause a specific breakpoint at a\n\
+given function and line number.  Instead it causes debug mode to be entered\n\
+when certain unexpected events are encountered.  Possible values are\n\
+\n\
+@table @code\n\
+@item error\n\
+Stop when an error is reported.  This is equivalent to specifying\n\
+both @code{debug_on_error (true)} and @code{debug_on_interrupt (true)}.\n\
+\n\
+@item caught error\n\
+Stop when an error is caught by a try-catch block (not yet implemented).\n\
+\n\
+@item interrupt\n\
+Stop when an interrupt (@kbd{Ctrl-C}) occurs.\n\
 \n\
-@table @asis\n\
-@item @qcode{error}\n\
-Stop whenever an error is reported.  This is equivalent to specifying\n\
-both @code{debug_on_error(1)} and @code{debug_on_interrupt(1)}.\n\
-@item @qcode{caught error}\n\
-Stop whenever an error is caught by a try-catch block\n\
-@item @qcode{interrupt}\n\
-Stop when an interrupt (ctrl-C) occurs.\n\
-@item @qcode{warning}\n\
-Stop whenever a warning is reported.  This is equivalent to specifying\n\
-@code{debug_on_warning(1)}.\n\
+@item naninf\n\
+Stop when code returns a non-finite value (not yet implemented).\n\
+\n\
+@item warning\n\
+Stop when a warning is reported.  This is equivalent to specifying\n\
+@code{debug_on_warning (true)}.\n\
 @end table\n\
-Error, caught error and warning can all be followed by a string specifying\n\
-an error ID or warning ID.  If that is done, only errors with the\n\
-specified ID will cause execution to stop.  To stop on one of a set of\n\
-IDs, multiple @qcode{dbstop} commands must be issued.\n\
 \n\
-Values @qcode{naninf} and @qcode{caught error} give a warning that these\n\
-are not yet implemented, and other options give an error.\n\
+The events @code{error}, @code{caught error}, and @code{warning} can all be\n\
+followed by a string specifying an error ID or warning ID@.  If that is\n\
+done, only errors with the specified ID will cause execution to stop.  To\n\
+stop on one of a set of IDs, multiple @code{dbstop} commands must be\n\
+issued.\n\
 \n\
-These settings can be undone using @qcode{dbclear} commands with the same\n\
-syntax.\n\
+Breakpoints and events can be removed using the @code{dbclear} command with\n\
+the same syntax.\n\
 \n\
 It is possible to save all breakpoints and restore them at once by issuing\n\
-the commands @code{state = dbstatus; ...  dbstop (state)}.\n\
+the commands @code{bp_state = dbstatus; @dots{}; dbstop (bp_state)}.\n\
 \n\
 The optional output @var{rline} is the real line number where the breakpoint\n\
 was set.  This can differ from the specified line if the line is not\n\
 executable.  For example, if a breakpoint attempted on a blank line then\n\
 Octave will set the real breakpoint at the next executable line.\n\
 \n\
 When a file is re-parsed, such as when it is modified outside the GUI,\n\
-all breakpoints within that file are cleared.\n\
+all breakpoints within the file are cleared.\n\
 \n\
 @seealso{dbclear, dbstatus, dbstep, debug_on_error, debug_on_warning, debug_on_interrupt}\n\
 @end deftypefn")
 {
   bp_table::intmap retmap;
-  std::string symbol_name = ""; // stays empty for "dbstop if error" etc
+  std::string symbol_name = "";  // stays empty for "dbstop if error" etc
   bp_table::intmap lines;
   std::string condition = "";
   octave_value retval;
 
-  if (args.length() >= 1 && !args(0).is_map ())
-    {       // explicit function / line / condition
+  if (args.length() >= 1 && ! args(0).is_map ())
+    {
+      // explicit function / line / condition
       parse_dbfunction_params ("dbstop", args, symbol_name, lines, condition);
 
       if (lines.size () == 0)
         lines[0] = 1;
 
       if (symbol_name != "")
         {
           retmap = bp_table::add_breakpoint (symbol_name, lines, condition);
           retval = intmap_to_ov (retmap);
         }
     }
   else if (args.length () != 1)
     {
       print_usage ();
     }
-  else // structure of the form output by dbstatus
+  else  // structure of the form output by dbstatus
     {
       octave_map mv = args(0).map_value ();
       if (mv.isfield ("bkpt") || mv.isfield ("errs") || mv.isfield ("warn")
           || mv.isfield ("intr"))
         {
           bp_table::dbstop_process_map_args (mv);
 
           // Replace mv by "bkpt", to use the processing below.
@@ -1057,17 +1072,17 @@ all breakpoints within that file are cle
                   mv = octave_map ();
                 }
             }
         }
       if (mv.numel () == 0)
         {
           // no changes requested.  Occurs if "errs" non-empty but "bkpt" empty
         }
-      else if (!mv.isfield ("name") || !mv.isfield ("line"))
+      else if (! mv.isfield ("name") || ! mv.isfield ("line"))
         {
           error ("dbstop: Cell array must contain fields 'name' and 'line'");
           retval = octave_value (0);
         }
       else
         {
           bool use_cond = mv.isfield ("cond");
           Cell name = mv.getfield ("name");
@@ -1096,48 +1111,50 @@ DEFUN (dbclear, args, ,
 @deftypefnx {} {} dbclear @var{line} @dots{}\n\
 @deftypefnx {} {} dbclear all\n\
 @deftypefnx {} {} dbclear in @var{func}\n\
 @deftypefnx {} {} dbclear in @var{func} at @var{line}\n\
 @deftypefnx {} {} dbclear if @var{event}\n\
 @deftypefnx {} {} dbclear (\"@var{func}\")\n\
 @deftypefnx {} {} dbclear (\"@var{func}\", @var{line})\n\
 @deftypefnx {} {} dbclear (\"@var{func}\", @var{line1}, @var{line2}, @dots{})\n\
-@deftypefnx {} {} dbclear (\"@var{func}\", [@var{line1}, @dots{}])\n\
+@deftypefnx {} {} dbclear (\"@var{func}\", @var{line1}, @dots{})\n\
 @deftypefnx {} {} dbclear (@var{line}, @dots{})\n\
 @deftypefnx {} {} dbclear (\"all\")\n\
 Delete a breakpoint at line number @var{line} in the function @var{func}.\n\
 \n\
 Arguments are\n\
 \n\
 @table @var\n\
 @item func\n\
 Function name as a string variable.  When already in debug mode this argument\n\
 can be omitted and the current function will be used.\n\
 \n\
 @item line\n\
 Line number from which to remove a breakpoint.  Multiple lines may be given\n\
 as separate arguments or as a vector.\n\
+\n\
 @item event\n\
-An even such as error, interrupt or warning; see dbstop for details.\n\
+An event such as @code{error}, @code{interrupt}, or @code{warning}\n\
+(@pxref{XREFdbstop,,dbstop} for details).\n\
 @end table\n\
 \n\
 When called without a line number specification all breakpoints in the named\n\
 function are cleared.\n\
 \n\
 If the requested line is not a breakpoint no action is performed.\n\
 \n\
 The special keyword @qcode{\"all\"} will clear all breakpoints from all\n\
 files.\n\
 @seealso{dbstop, dbstatus, dbwhere}\n\
 @end deftypefn")
 {
-  std::string symbol_name = ""; // stays empty for "dbclear if error" etc
+  std::string symbol_name = "";  // stays empty for "dbclear if error" etc
   bp_table::intmap lines;
-  std::string dummy;            // "if" condition -- only used for dbstop
+  std::string dummy;             // "if" condition -- only used for dbstop
 
   int nargin = args.length ();
 
   parse_dbfunction_params ("dbclear", args, symbol_name, lines, dummy);
 
   if (nargin == 1 && symbol_name == "all")
     {
       bp_table::remove_all_breakpoints ();
@@ -1159,17 +1176,17 @@ files.\n\
 // value will have an empty field called "errs".  If IDs are specified, the
 // "errs" field will have a row per ID.  If dbstop if error is false, there
 // is no "errs" field.  The "warn" field is set similarly by dbstop if warning
 octave_map
 bp_table::stop_on_err_warn_status (bool to_screen)
 {
   octave_map retval;
 
-  // print dbstop if error  information
+  // print dbstop if error information
   if (Vdebug_on_error)
     {
       if (errors_that_stop.empty ())
         {
           if (to_screen)
             octave_stdout << "stop if error\n";
           else
             retval.assign ("errs", octave_value(""));
@@ -1188,17 +1205,17 @@ bp_table::stop_on_err_warn_status (bool 
               else
                 errs (i++) = *e;
             }
           if (!to_screen)
             retval.assign ("errs", octave_value (errs));
         }
     }
 
-  // print  dbstop if caught error  information
+  // print dbstop if caught error information
   if (Vdebug_on_caught)
     {
       if (caught_that_stop.empty ())
         {
           if (to_screen)
             octave_stdout << "stop if caught error\n";
           else
             retval.assign ("caught", octave_value(""));
@@ -1217,17 +1234,17 @@ bp_table::stop_on_err_warn_status (bool 
               else
                 errs (i++) = *e;
             }
           if (!to_screen)
             retval.assign ("caught", octave_value (errs));
         }
     }
 
-  // print dbstop if warning  information
+  // print dbstop if warning information
   if (Vdebug_on_warning)
     {
       if (warnings_that_stop.empty ())
         {
           if (to_screen)
             octave_stdout << "stop if warning\n";
           else
             retval.assign ("warn", octave_value(""));
@@ -1246,69 +1263,69 @@ bp_table::stop_on_err_warn_status (bool 
               else
                 warn (i++) = *w;
             }
           if (!to_screen)
             retval.assign ("warn", octave_value (warn));
         }
     }
 
-  // print  dbstop if interrupt  information
+  // print dbstop if interrupt information
   if (Vdebug_on_interrupt)
     {
       if (to_screen)
         octave_stdout << "stop if interrupt\n";
       else
         retval.assign ("intr", octave_value ());
     }
 
   return retval;
 }
 
 DEFUN (dbstatus, args, nargout,
        "-*- texinfo -*-\n\
-@deftypefn  {} {} dbstatus ()\n\
-@deftypefnx {} {@var{brk_list} =} dbstatus ()\n\
-@deftypefnx {} {@var{brk_list} =} dbstatus (\"@var{func}\")\n\
+@deftypefn  {} {} dbstatus\n\
+@deftypefnx {} {} dbstatus @var{func}\n\
+@deftypefnx {} {@var{bp_list} =} dbstatus @dots{}\n\
 Report the location of active breakpoints.\n\
 \n\
 When called with no input or output arguments, print the list of all\n\
 functions with breakpoints and the line numbers where those breakpoints are\n\
 set.\n\
 \n\
 If a function name @var{func} is specified then only report breakpoints\n\
-for the named function, and its sub-functions.\n\
+for the named function and its subfunctions.\n\
 \n\
-The optional return argument @var{brk_list} is a struct array with the\n\
+The optional return argument @var{bp_list} is a struct array with the\n\
 following fields.\n\
 \n\
 @table @asis\n\
 @item name\n\
-The name of the function with a breakpoint.  A sub-function, say @code{func2}\n\
-within a .m file, say @code{foo/file.m}, is specified as @code{file>func2}.\n\
+The name of the function with a breakpoint.  A subfunction, say @code{func2}\n\
+within an m-file, say @file{file.m}, is specified as @code{file>func2}.\n\
 \n\
 @item file\n\
 The name of the m-file where the function code is located.\n\
 \n\
 @item line\n\
 The line number with the breakpoint.\n\
 \n\
 @item cond\n\
 The condition that must be satisfied for the breakpoint to be active, or\n\
 the empty string for unconditional breakpoints.\n\
 @end table\n\
 \n\
 @c Note: When @code{dbstatus} is called from the debug prompt within a function,\n\
 @c the list of breakpoints is automatically trimmed to the breakpoints in the\n\
 @c current function.\n\
 If @code{dbstop if error} is true but no explicit IDs are specified, the\n\
-return value will have an empty field called \"errs\".  If IDs are specified,\n\
-the \"errs\" field will have a row per ID.  If @code{dbstop if error} is\n\
-false, there is no \"errs\" field.  The \"warn\" field is set similarly by\n\
-@code{dbstop if warning}.\n\
+return value will have an empty field called @qcode{\"errs\"}.  If IDs are\n\
+specified, the @code{errs} field will have one row per ID@.  If\n\
+@code{dbstop if error} is false, there is no @qcode{\"errs\"} field.\n\
+The @qcode{\"warn\"} field is set similarly by @code{dbstop if warning}.\n\
 \n\
 @seealso{dbstop, dbclear, dbwhere, dblist, dbstack}\n\
 @end deftypefn")
 {
   int nargin = args.length ();
 
   if (nargin != 0 && nargin != 1)
     error ("dbstatus: only zero or one arguments accepted\n");
@@ -1349,28 +1366,28 @@ false, there is no \"errs\" field.  The 
 
       for (bp_table::fname_bp_map_iterator it = bp_list.begin ();
            it != bp_list.end (); it++)
         {
           std::list<bp_type> m = it->second;
 
           // print unconditional breakpoints, if any, on a single line
 
-              // first, check to see if there are any
+          // first, check to see if there are any
           int have_unconditional = 0;
           for (std::list<bp_type>::const_iterator j = m.begin ();
                j != m.end (); j++)
             {
               if (j->cond == "")
                 {
                   if (have_unconditional++)
-                    break;                      // stop once we know its plural
+                    break;                   // stop once we know its plural
                 }
             }
-              // If we actually have some, print line numbers only
+          // If we actually have some, print line numbers only
           if (have_unconditional)
             {
               const char *_s_ = (have_unconditional > 1) ? "s" : "";
               octave_stdout << "breakpoint" << _s_ <<" in " << it->first
                             << " at line" << _s_ << " ";
 
               for (std::list<bp_type>::const_iterator j = m.begin ();
                    j != m.end (); j++)
@@ -1398,17 +1415,17 @@ false, there is no \"errs\" field.  The 
     }
   else
     {
       // Fill in an array for return.
       int i = 0;
       octave_map retmap;
       octave_value retval;
 
-          // count how many breakpoints there are
+      // count how many breakpoints there are
       int count = 0;
       for (bp_table::const_fname_bp_map_iterator it = bp_list.begin ();
            it != bp_list.end (); it++)
         {
           for (std::list<bp_type>::const_iterator j = it->second.begin ();
                j != it->second.end (); j++)
             count++;
         }
@@ -1420,18 +1437,18 @@ false, there is no \"errs\" field.  The 
 
       for (bp_table::const_fname_bp_map_iterator it = bp_list.begin ();
            it != bp_list.end (); it++)
         {
           std::string filename = it->first;
           const char *sub_fun = strchr (filename.c_str (), Vfilemarker);
           if (sub_fun)
             filename = filename.substr(0, sub_fun - filename.c_str ());
-          octave_value path_name = octave_canonicalize_file_name
-	                           (do_which (filename));
+          octave_value path_name;
+          path_name = octave_canonicalize_file_name (do_which (filename));
 
           for (std::list<bp_type>::const_iterator j = it->second.begin ();
                j != it->second.end (); j++)
             {
               names(i) = it->first;
               file(i) = path_name;
               line(i) = octave_value (j->line);
               cond(i) = octave_value (j->cond);
@@ -1449,40 +1466,38 @@ false, there is no \"errs\" field.  The 
         {
           retval = octave_value (retmap);
         }
       else
         {
           octave_map outer (dim_vector (3,1));
           outer.assign ("bkpt", Cell (retmap));
           for (octave_map::const_iterator f = ew.begin (); f != ew.end (); f++)
-            {
-              outer.setfield (f->first, ew.contents (f));
-            }
-            retval = octave_value (outer);
+            outer.setfield (f->first, ew.contents (f));
+
+          retval = octave_value (outer);
         }
 
       return retval;
     }
 }
 
 /*
 %!test
 %! dbstop @ftp/dir;
 %! dbstop @audioplayer/set 70;
 %! dbstop quantile>__quantile__;
 %! dbstop ls;
-%! a = dbstatus;
-%! assert (a(1).name, "@audioplayer/set>setproperty")
-%! assert (a(2).name, "@ftp/dir")
-%! assert (a(3).name, "ls")
-%! assert (a(4).name, "quantile>__quantile__")
-%! assert (a(2).file(end-10:end), "/@ftp/dir.m");
-%!test
-%! dbclear all  % ensure no bp left for future tests, even if the above fails
+%! s = dbstatus;
+%! dbclear all
+%! assert (s(1).name, "@audioplayer/set>setproperty")
+%! assert (s(2).name, "@ftp/dir")
+%! assert (s(3).name, "ls")
+%! assert (s(4).name, "quantile>__quantile__")
+%! assert (s(2).file(end-10:end), "/@ftp/dir.m");
 */
 
 DEFUN (dbwhere, , ,
        "-*- texinfo -*-\n\
 @deftypefn {} {} dbwhere\n\
 In debugging mode, report the current file and line number where execution\n\
 is stopped.\n\
 @seealso{dbstack, dblist, dbstatus, dbcont, dbstep, dbup, dbdown}\n\
@@ -1582,28 +1597,28 @@ numbers.\n\
 @end deftypefn")
 {
   octave_user_code *dbg_fcn;
 
   string_vector argv = args.make_argv ("dbtype");
 
   switch (args.length ())
     {
-    case 0: // dbtype
+    case 0:  // dbtype
       dbg_fcn = get_user_code ();
 
       if (! dbg_fcn)
         error ("dbtype: must be inside a user function to give no arguments to dbtype\n");
 
       do_dbtype (octave_stdout, dbg_fcn->fcn_file_name (),
                  0, std::numeric_limits<int>::max ());
 
       break;
 
-    case 1: // (dbtype start:end) || (dbtype func) || (dbtype lineno)
+    case 1:  // (dbtype start:end) || (dbtype func) || (dbtype lineno)
       {
         std::string arg = argv[1];
 
         size_t ind = arg.find (':');
 
         if (ind != std::string::npos)  // (dbtype start:end)
           {
             dbg_fcn = get_user_code ();
@@ -1654,17 +1669,17 @@ numbers.\n\
                 if (dbg_fcn)
                   do_dbtype (octave_stdout, dbg_fcn->fcn_file_name (),
                              line, line);
               }
           }
       }
       break;
 
-    case 2: // (dbtype func start:end) || (dbtype func start)
+    case 2:  // (dbtype func start:end) || (dbtype func start)
       {
         dbg_fcn = get_user_code (argv[1]);
 
         if (! dbg_fcn)
           error ("dbtype: function <%s> not found\n", argv[1].c_str ());
 
         std::string arg = argv[2];
         int start, end;
@@ -1799,17 +1814,16 @@ do_dbstack (const octave_value_list& arg
         {
           octave_value arg = args(i);
 
           if (arg.is_string ())
             {
               std::string s_arg = arg.string_value ();
 
               // Skip "-completenames", octave returns full names anyway.
-
               if (s_arg == "-completenames")
                 continue;
 
               n = atoi (s_arg.c_str ());
             }
           else
             n = arg.int_value ();
 
