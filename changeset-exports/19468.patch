# HG changeset patch
# User Vytautas Janƒçauskas <unaudio@gmail.com>
# Date 1378918397 -10800
#      Wed Sep 11 19:53:17 2013 +0300
# Node ID 9161b765339290275e3622506ff0eaf3c5850324
# Parent  e30c88336ee9052da972cf806e19114d18b71b77
compile audio file utilities even when sndfile is not present

* audioinfo.cc, audioread.cc, audiowrite.cc: disable compiling parts that
require sndfile if it is not present

diff --git a/libinterp/dldfcn/audioinfo.cc b/libinterp/dldfcn/audioinfo.cc
--- a/libinterp/dldfcn/audioinfo.cc
+++ b/libinterp/dldfcn/audioinfo.cc
@@ -7,16 +7,17 @@ DEFUN_DLD(audioinfo, args, ,
 @deftypefn{Loadable Function} info = audioinfo(@var{filename})\n\
 \n\
 Return information about an audio file specified by @var{filename}.\
 \n\
 @end deftypefn"
 )
 {
   octave_scalar_map retval;
+#ifdef HAVE_SNDFILE
   Matrix audio;
   SNDFILE *file;
   SF_INFO info;
   info.format = 0;
   int start, end;
   file = sf_open(args(0).string_value ().c_str (), SFM_READ, &info);
   retval.assign ("Filename", args(0).string_value ());
   retval.assign ("CompressionMethod", "");
@@ -49,10 +50,13 @@ Return information about an audio file s
     {
       bits = -1;
     }
   retval.assign ("BitsPerSample", bits);
   retval.assign ("BitRate", -1);
   retval.assign ("Title", sf_get_string (file, SF_STR_TITLE));
   retval.assign ("Artist", sf_get_string (file, SF_STR_ARTIST));
   retval.assign ("Comment", sf_get_string (file, SF_STR_COMMENT));
+#else
+  error("sndfile not found on your system and thus audioinfo is not functional")
+#endif
   return octave_value(retval);
 }
diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -25,16 +25,17 @@ in the audio file. If @var{dataType} is 
 @deftypefnx{Loadable Function} [@var{y}, @var{Fs}] = audioread(@var{filename}, @var{samples}, @var{dataType})\n\
 \n\
 Read a file and return a specified range of frames in an array of specified type. \
 \n\
 @end deftypefn"
 )
 {
   octave_value_list retval;
+#ifdef HAVE_SNDFILE
   Matrix audio;
   octave_value ret_audio;
   SNDFILE *file;
   SF_INFO info;
   info.format = 0;
   int start, end;
   file = sf_open(args(0).string_value ().c_str (), SFM_READ, &info);
   start = 0;
@@ -100,10 +101,13 @@ Read a file and return a specified range
         }
     }
   else
     {
       ret_audio = octave_value (audio);
     }
   retval(0) = ret_audio;
   retval(1) = info.samplerate;
+#else
+  error("sndfile not found on your system and thus audioread is not functional")
+#endif
   return octave_value(retval);
 }
diff --git a/libinterp/dldfcn/audiowrite.cc b/libinterp/dldfcn/audiowrite.cc
--- a/libinterp/dldfcn/audiowrite.cc
+++ b/libinterp/dldfcn/audiowrite.cc
@@ -56,22 +56,23 @@ Title for the audio file.\n\
 @item Artist\n\
 Artist name.\n\
 @item Comment\n\
 Comment.\n\
 @end table\n\
 @end deftypefn"
 )
 {
+  octave_scalar_map retval;
+#ifdef HAVE_SNDFILE
   std::map<std::string, int> extension_to_format;
   fill_extension_table(extension_to_format);
   std::string filename = args(0).string_value ();
   std::string extension = filename.substr(filename.find_last_of(".") + 1);
   std::transform(extension.begin(), extension.end(), extension.begin(), ::tolower);
-  octave_scalar_map retval;
   Matrix audio = args(1).matrix_value ();
   SNDFILE *file;
   SF_INFO info;
   float *data = (float *)malloc(audio.rows () * audio.cols () * sizeof(float));
   for (int i = 0; i < audio.cols (); i++)
     {
       for (int j = 0; j < audio.rows (); j++)
         {
@@ -155,10 +156,13 @@ Comment.\n\
     }
   if (comment != "")
     {
       sf_set_string (file, SF_STR_COMMENT, comment.c_str ());
     }
   sf_write_float (file, data, audio.rows () * audio.cols ());
   sf_close (file);
   free (data);
+#else
+  error("sndfile not found on your system and thus audiowrite is not functional")
+#endif
   return octave_value(retval);
 }
