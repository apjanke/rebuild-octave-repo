# HG changeset patch
# User jwe
# Date 868934753 0
#      Tue Jul 15 02:45:53 1997 +0000
# Node ID ca9677cdb62e8ff0030457e8417b4b54369b9a16
# Parent  00ef82060ebc26c497e9a24f26a7a2572d975231
[project @ 1997-07-15 02:45:42 by jwe]

diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -42,18 +42,19 @@ MX_OP_INC := mx-cdm-cm.h mx-cdm-cs.h mx-
 
 INCLUDES := Bounds.h CollocWt.h DAE.h DAEFunc.h DASSL.h FEGrid.h \
 	LinConst.h LP.h LPsolve.h LSODE.h NLConst.h NLEqn.h NLFunc.h \
 	NLP.h ODE.h ODEFunc.h Objective.h QP.h Quad.h \
 	Range.h base-de.h base-min.h byte-swap.h cmd-edit.h cmd-hist.h \
 	data-conv.h dir-ops.h file-ops.h file-stat.h getopt.h \
 	glob-match.h idx-vector.h lo-ieee.h lo-mappers.h lo-sysdep.h \
 	lo-utils.h mach-info.h oct-alloc.h oct-cmplx.h oct-env.h \
-	oct-math.h oct-group.h oct-passwd.h oct-syscalls.h pathsearch.h \
-	prog-args.h statdefs.h str-vec.h sun-utils.h sysdir.h syswait.h \
+	oct-math.h oct-group.h oct-passwd.h oct-syscalls.h pathlen.h \
+	pathsearch.h prog-args.h statdefs.h str-vec.h sun-utils.h \
+	sysdir.h syswait.h \
 	$(MATRIX_INC) \
 	$(MX_OP_INC)
 
 TEMPLATE_SRC := Array.cc Array2.cc Array3.cc DiagArray2.cc \
 	MArray.cc MArray2.cc MDiagArray2.cc base-lu.cc
 
 TI_SRC := Array-C.cc Array-b.cc Array-ch.cc Array-i.cc Array-d.cc \
 	Array-s.cc Array-str.cc \
diff --git a/liboctave/glob-match.cc b/liboctave/glob-match.cc
--- a/liboctave/glob-match.cc
+++ b/liboctave/glob-match.cc
@@ -99,17 +99,17 @@ glob_match::glob (void)
 	  glob_t glob_info;
 
 	  int err = ::glob (xpat.c_str (), GLOB_NOSORT, 0, &glob_info);
 
 	  if (! err)
 	    {
 	      int n = glob_info.gl_pathc;
 
-	      char **matches = glob_info.gl_pathv;
+	      const char * const *matches = glob_info.gl_pathv;
 
 	      // XXX FIXME XXX -- we shouldn't have to check to see if
 	      // a single match exists, but it seems that glob() won't
 	      // check for us unless the pattern contains globbing
 	      // characters.  Hmm.
 
 	      if (n > 1
 		  || (n == 1 && single_match_exists (string (matches[0]))))
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+Mon Jul 14 12:54:23 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* dynamic-ld.cc (octave_dynamic_loader::load_fcn_from_dot_oct_file):
+	If first attempt to load function fails, prepend and underscore
+	and try again.
+
+	* Makefile.in (install-inc): If defaults.h, oct-conf.h, or
+	oct-gperf.h don't exist in the current directory, look in $(srcdir).
+
 Mon Jul  7 21:14:07 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/qr.cc (Fqr): Correctly handle nargout == 0. 
 
 Wed Jul  2 16:47:09 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* matherr.c: New file.  Move matherr function here.
 	* sysdep.cc: From here.
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -311,17 +311,21 @@ install-lib:
 install-inc:
 	$(top_srcdir)/mkinstalldirs $(octincludedir)
 	for f in $(INCLUDES); do \
 	  rm -f $(octincludedir)/$$f; \
 	  $(INSTALL_DATA) $(srcdir)/$$f $(octincludedir)/$$f; \
 	done
 	for f in defaults.h oct-conf.h oct-gperf.h; do \
 	  rm -f $(octincludedir)/$$f; \
-	  $(INSTALL_DATA) $$f $(octincludedir)/$$f; \
+	  if [ -f $$f ]; then \
+	    $(INSTALL_DATA) $$f $(octincludedir)/$$f ; \
+	  else \
+	    $(INSTALL_DATA) $(srcdir)/$$f $(octincludedir)/$$f ; \
+	  fi ; \
 	done
 	$(mk-includedir-link)
 .PHONY: install-inc
 
 uninstall:
 	rm -f $(bindir)/octave$(EXE)
 	rm -f $(libdir)/liboctinterp.$(LIBEXT)
 	rm -f $(libdir)/liboctinterp.$(SHLEXT)
diff --git a/src/dynamic-ld.cc b/src/dynamic-ld.cc
--- a/src/dynamic-ld.cc
+++ b/src/dynamic-ld.cc
@@ -228,16 +228,29 @@ octave_dynamic_loader::load_fcn_from_dot
 
   if (! oct_file.empty ())
     {
       string mangled_name = instance->mangle_name (fcn_name);
 
       builtin_fcn_installer f
 	= instance->resolve_reference (mangled_name, oct_file);
 
+
+      // XXX FIXME XXX -- this should probably be handled correctly by
+      // mangle_octave_oct_file_name using a configure test.
+
+      if (! f)
+	{
+	  string t = "_";
+
+	  mangled_name = t.append (mangled_name);
+
+	  f = instance->resolve_reference (mangled_name, oct_file);
+	}
+
       if (f)
 	retval = f ();
     }
 
   return retval;
 }
 
 octave_dynamic_loader::builtin_fcn_installer
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -105,17 +105,17 @@ almost_match (const string& std, const s
 	  && (case_sens
 	      ? (strncmp (std.c_str (), s.c_str (), slen) == 0)
 	      : (strncasecmp (std.c_str (), s.c_str (), slen) == 0)));
 }
 
 // Ugh.
 
 int
-keyword_almost_match (const char **std, int *min_len, const string& s,
+keyword_almost_match (const char * const *std, int *min_len, const string& s,
 		      int min_toks_to_match, int max_toks)
 {
   int status = 0;
   int tok_count = 0;
   int toks_matched = 0;
 
   if (s.empty () || max_toks < 1)
     return status;
@@ -133,19 +133,19 @@ keyword_almost_match (const char **std, 
   char *beg = kw;
   while (*beg == ' ')
     beg++;
 
   if (*beg == '\0')
     return status;
 
 
-  char **to_match = new char * [max_toks + 1];
-  const char **s1 = std;
-  char **s2 = to_match;
+  const char **to_match = new const char * [max_toks + 1];
+  const char * const *s1 = std;
+  const char **s2 = to_match;
 
   if (! s1 || ! s2)
     goto done;
 
   s2[tok_count] = beg;
   char *end;
   while ((end = strchr (beg, ' ')) != 0)
     {
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -39,17 +39,17 @@ extern string fcn_file_in_path (const st
 extern string oct_file_in_path (const string&);
 
 extern "C" void jump_to_top_level (void) GCC_ATTR_NORETURN;
 
 extern int almost_match (const string& std, const string& s,
 			 int min_match_len = 1, int case_sens = 1);
 
 extern int
-keyword_almost_match (const char **std, int *min_len,
+keyword_almost_match (const char * const *std, int *min_len,
 		      const string& s, int min_toks_to_match,
 		      int max_toks);
 
 extern int empty_arg (const char *name, int nr, int nc);
 
 extern const char *undo_string_escape (char c);
 
 extern string undo_string_escapes (const string& s);
