# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1318001280 25200
#      Fri Oct 07 08:28:00 2011 -0700
# Node ID 49ae6f4971711c5e54370d6aa9986ad1773f510e
# Parent  cb9b60b1c9bb06b1d093719b74debd4ba598c646
Use common code idiom x == fix (x) to detect integers

* cosd.m, sind.m, tand.m, duplication_matrix.m: Use common code idiom
x == fix (x) to detect integers.

diff --git a/scripts/elfun/cosd.m b/scripts/elfun/cosd.m
--- a/scripts/elfun/cosd.m
+++ b/scripts/elfun/cosd.m
@@ -27,16 +27,16 @@
 
 function y = cosd (x)
   if (nargin != 1)
     print_usage ();
   endif
   I = x / 180;
   y = cos (I .* pi);
   I = I + 0.5;
-  y(I == round (I) & finite (I)) = 0;
+  y(I == fix (I) & finite (I)) = 0;
 endfunction
 
 %!error(cosd())
 %!error(cosd(1,2))
 %!assert(cosd(0:10:80),cos(pi*[0:10:80]/180),-10*eps)
 %!assert(cosd([0,180,360]) != 0)
 %!assert(cosd([90,270]) == 0)
diff --git a/scripts/elfun/sind.m b/scripts/elfun/sind.m
--- a/scripts/elfun/sind.m
+++ b/scripts/elfun/sind.m
@@ -26,16 +26,16 @@
 ## Author: David Bateman <dbateman@free.fr>
 
 function y = sind (x)
   if (nargin != 1)
     print_usage ();
   endif
   I = x / 180;
   y = sin (I .* pi);
-  y(I == round (I) & finite (I)) = 0;
+  y(I == fix (I) & finite (I)) = 0;
 endfunction
 
 %!error(sind())
 %!error(sind(1,2))
 %!assert(sind(10:10:90),sin(pi*[10:10:90]/180),-10*eps)
 %!assert(sind([0,180,360]) == 0)
 %!assert(sind([90,270]) != 0)
diff --git a/scripts/elfun/tand.m b/scripts/elfun/tand.m
--- a/scripts/elfun/tand.m
+++ b/scripts/elfun/tand.m
@@ -28,17 +28,17 @@
 
 function y = tand (x)
   if (nargin != 1)
     print_usage ();
   endif
   I0 = x / 180;
   I90 = (x-90) / 180;
   y = tan (I0 .* pi);
-  y(I0 == round (I0) & finite (I0)) = 0;
-  y(I90 == round (I90) & finite (I90)) = Inf;
+  y(I0 == fix (I0) & finite (I0)) = 0;
+  y(I90 == fix (I90) & finite (I90)) = Inf;
 endfunction;
 
 %!error(tand())
 %!error(tand(1,2))
 %!assert(tand(10:10:80),tan(pi*[10:10:80]/180),-10*eps)
 %!assert(tand([0,180,360]) == 0)
 %!assert(tand([90,270]) == Inf)
diff --git a/scripts/linear-algebra/duplication_matrix.m b/scripts/linear-algebra/duplication_matrix.m
--- a/scripts/linear-algebra/duplication_matrix.m
+++ b/scripts/linear-algebra/duplication_matrix.m
@@ -63,17 +63,17 @@
 ## Adapged-By: jwe
 
 function d = duplication_matrix (n)
 
   if (nargin != 1)
     print_usage ();
   endif
 
-  if (! (isscalar (n) && n == round (n) && n > 0))
+  if (! (isscalar (n) && n > 0 && n == fix (n)))
     error ("duplication_matrix: N must be a positive integer");
   endif
 
   d = zeros (n * n, n * (n + 1) / 2);
 
   ## It is clearly possible to make this a LOT faster!
   count = 0;
   for j = 1 : n
