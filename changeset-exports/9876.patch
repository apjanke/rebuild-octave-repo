# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1259265981 -3600
#      Thu Nov 26 21:06:21 2009 +0100
# Node ID 21d81d06b221f6fa307db82f6e7c130e075b5db7
# Parent  47f36dd27203d8d67bb0da48ca48c25621c4c149
cache-aligned loop for rowwise dot

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,15 @@
+2009-11-26  Jaroslav Hajek  <highegg@gmail.com>
+
+	* blas-xtra/sdot3.f: Use nested cache-aligned loop for general case.
+	* blas-xtra/ddot3.f: Ditto.
+	* blas-xtra/cdotc3.f: Ditto.
+	* blas-xtra/zdotc3.f: Ditto.
+
 2009-11-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* blas-xtra/sdot3.f: New source.
 	* blas-xtra/ddot3.f: New source.
 	* blas-xtra/cdotc3.f: New source.
 	* blas-xtra/zdotc3.f: New source.
 	* blas-xtra/smatm3.f: New source.
 	* blas-xtra/dmatm3.f: New source.
diff --git a/libcruft/blas-xtra/cdotc3.f b/libcruft/blas-xtra/cdotc3.f
--- a/libcruft/blas-xtra/cdotc3.f
+++ b/libcruft/blas-xtra/cdotc3.f
@@ -24,39 +24,36 @@ c               c = sum (conj (a) .* b, 
 c arguments:
 c m,n,k (in)    the dimensions of a and b
 c a,b (in)      complex input arrays of size (m,k,n)
 c c (out)       complex output array, size (m,n)
       integer m,n,k,i,j,l
       complex a(m,k,n),b(m,k,n)
       complex c(m,n)
 
-      integer kk
-      parameter (kk = 64)
       complex cdotc
       external cdotc
 
 c quick return if possible.
       if (m <= 0 .or. n <= 0) return
 
       if (m == 1) then
-c the column-major case
+c the column-major case.
         do j = 1,n
           c(1,j) = cdotc(k,a(1,1,j),1,b(1,1,j),1)
         end do
       else
-c here the product is row-wise, but we'd still like to use BLAS's dot
-c for its usually better accuracy. let's do a compromise and split the
-c middle dimension.
+c We prefer performance here, because that's what we generally
+c do by default in reduction functions. Besides, the accuracy
+c of xDOT is questionable. Hence, do a cache-aligned nested loop.
         do j = 1,n
-          l = mod(k,kk)
           do i = 1,m
-            c(i,j) = ddot(l,a(i,1,j),m,b(i,1,j),m)
+            c(i,j) = 0e0
           end do
-          do l = l+1,k,kk
+          do l = 1,k
             do i = 1,m
-              c(i,j) = c(i,j) + cdotc(kk,a(i,l,j),m,b(i,l,j),m)
+              c(i,j) = c(i,j) + conjg(a(i,l,j))*b(i,l,j)
             end do
           end do
         end do
       end if
 
       end subroutine
diff --git a/libcruft/blas-xtra/ddot3.f b/libcruft/blas-xtra/ddot3.f
--- a/libcruft/blas-xtra/ddot3.f
+++ b/libcruft/blas-xtra/ddot3.f
@@ -24,40 +24,37 @@ c               c = sum (a .* b, 2), whe
 c arguments:
 c m,n,k (in)    the dimensions of a and b
 c a,b (in)      double prec. input arrays of size (m,k,n)
 c c (out)       double prec. output array, size (m,n)
       integer m,n,k,i,j,l
       double precision a(m,k,n),b(m,k,n)
       double precision c(m,n)
 
-      integer kk
-      parameter (kk = 64)
       double precision ddot
       external ddot
 
 
 c quick return if possible.
       if (m <= 0 .or. n <= 0) return
 
       if (m == 1) then
-c the column-major case
+c the column-major case.
         do j = 1,n
           c(1,j) = ddot(k,a(1,1,j),1,b(1,1,j),1)
         end do
       else
-c here the product is row-wise, but we'd still like to use BLAS's dot
-c for its usually better accuracy. let's do a compromise and split the
-c middle dimension.
+c We prefer performance here, because that's what we generally
+c do by default in reduction functions. Besides, the accuracy
+c of xDOT is questionable. Hence, do a cache-aligned nested loop.
         do j = 1,n
-          l = mod(k,kk)
           do i = 1,m
-            c(i,j) = ddot(l,a(i,1,j),m,b(i,1,j),m)
+            c(i,j) = 0d0
           end do
-          do l = l+1,k,kk
+          do l = 1,k
             do i = 1,m
-              c(i,j) = c(i,j) + ddot(kk,a(i,l,j),m,b(i,l,j),m)
+              c(i,j) = c(i,j) + a(i,l,j)*b(i,l,j)
             end do
           end do
         end do
       end if
 
       end subroutine
diff --git a/libcruft/blas-xtra/sdot3.f b/libcruft/blas-xtra/sdot3.f
--- a/libcruft/blas-xtra/sdot3.f
+++ b/libcruft/blas-xtra/sdot3.f
@@ -24,39 +24,36 @@ c               c = sum (a .* b, 2), whe
 c arguments:
 c m,n,k (in)    the dimensions of a and b
 c a,b (in)      real input arrays of size (m,k,n)
 c c (out)       real output array, size (m,n)
       integer m,n,k,i,j,l
       real a(m,k,n),b(m,k,n)
       real c(m,n)
 
-      integer kk
-      parameter (kk = 64)
       real sdot
       external sdot
 
 c quick return if possible.
       if (m <= 0 .or. n <= 0) return
 
       if (m == 1) then
-c the column-major case
+c the column-major case.
         do j = 1,n
           c(1,j) = sdot(k,a(1,1,j),1,b(1,1,j),1)
         end do
       else
-c here the product is row-wise, but we'd still like to use BLAS's dot
-c for its usually better accuracy. let's do a compromise and split the
-c middle dimension.
+c We prefer performance here, because that's what we generally
+c do by default in reduction functions. Besides, the accuracy
+c of xDOT is questionable. Hence, do a cache-aligned nested loop.
         do j = 1,n
-          l = mod(k,kk)
           do i = 1,m
-            c(i,j) = ddot(l,a(i,1,j),m,b(i,1,j),m)
+            c(i,j) = 0d0
           end do
-          do l = l+1,k,kk
+          do l = 1,k
             do i = 1,m
-              c(i,j) = c(i,j) + sdot(kk,a(i,l,j),m,b(i,l,j),m)
+              c(i,j) = c(i,j) + a(i,l,j)*b(i,l,j)
             end do
           end do
         end do
       end if
 
       end subroutine
diff --git a/libcruft/blas-xtra/zdotc3.f b/libcruft/blas-xtra/zdotc3.f
--- a/libcruft/blas-xtra/zdotc3.f
+++ b/libcruft/blas-xtra/zdotc3.f
@@ -24,39 +24,36 @@ c               c = sum (conj (a) .* b, 
 c arguments:
 c m,n,k (in)    the dimensions of a and b
 c a,b (in)      double complex input arrays of size (m,k,n)
 c c (out)       double complex output array, size (m,n)
       integer m,n,k,i,j,l
       double complex a(m,k,n),b(m,k,n)
       double complex c(m,n)
 
-      integer kk
-      parameter (kk = 64)
       double complex zdotc
       external zdotc
 
 c quick return if possible.
       if (m <= 0 .or. n <= 0) return
 
       if (m == 1) then
-c the column-major case
+c the column-major case.
         do j = 1,n
           c(1,j) = zdotc(k,a(1,1,j),1,b(1,1,j),1)
         end do
       else
-c here the product is row-wise, but we'd still like to use BLAS's dot
-c for its usually better accuracy. let's do a compromise and split the
-c middle dimension.
+c We prefer performance here, because that's what we generally
+c do by default in reduction functions. Besides, the accuracy
+c of xDOT is questionable. Hence, do a cache-aligned nested loop.
         do j = 1,n
-          l = mod(k,kk)
           do i = 1,m
-            c(i,j) = ddot(l,a(i,1,j),m,b(i,1,j),m)
+            c(i,j) = 0d0
           end do
-          do l = l+1,k,kk
+          do l = 1,k
             do i = 1,m
-              c(i,j) = c(i,j) + zdotc(kk,a(i,l,j),m,b(i,l,j),m)
+              c(i,j) = c(i,j) + conjg(a(i,l,j))*b(i,l,j)
             end do
           end do
         end do
       end if
 
       end subroutine
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,12 @@
+2009-11-26  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/dot.cc (Fdot): Update docs.
+
 2009-11-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/dot.cc: New source.
 	* DLD-FUNCTIONS/module-files: Include it.
 
 2009-11-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (Fismatrix): Return true for empty matrices as well.
diff --git a/src/DLD-FUNCTIONS/dot.cc b/src/DLD-FUNCTIONS/dot.cc
--- a/src/DLD-FUNCTIONS/dot.cc
+++ b/src/DLD-FUNCTIONS/dot.cc
@@ -106,18 +106,19 @@ DEFUN_DLD (dot, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} dot (@var{x}, @var{y}, @var{dim})\n\
 Computes the dot product of two vectors.  If @var{x} and @var{y}\n\
 are matrices, calculate the dot products along the first \n\
 non-singleton dimension.  If the optional argument @var{dim} is\n\
 given, calculate the dot products along this dimension.\n\
 \n\
 This is equivalent to doing @code{sum (conj (@var{X}) .* @var{Y}, @var{dim})},\n\
-but avoids forming a temporary array and uses the BLAS xDOT functions,\n\
-usually resulting in increased accuracy of the computation.\n\
+but avoids forming a temporary array and is faster.\n\
+When @var{X} and @var{Y} are column vectors, the result is equivalent to\n\
+@code{ @var{X}'*@var{Y} }.\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
 
   if (nargin < 2 || nargin > 3)
     {
       print_usage ();
