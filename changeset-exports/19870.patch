# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1425054252 18000
#      Fri Feb 27 11:24:12 2015 -0500
# Node ID 815db217f6f45077d88830ba7233ceebd2016594
# Parent  60fe3ef12bb0c1ea0a08b52ac9f0db4640286b3d
provide autoscale option for Qt plotting (bug #44307)

* Canvas.h, Canvas.cc (Canvas::autoAxes): New pure virtual function.
(Canvas::canvasAutoAxes): New function.
(autoscale_axes): New static function.
(Canvas::canvasMouseDoubleClickEvent, Canvas::canvasMousePressEvent):
Use it.
* Figure.h, Figure.cc (Figure::createFigureToolBarAndMenuBar):
Add autoscale button to window.
(Figure::autoAxes): New function.
* GLCanvas.h, GLCanvas.cc (GLCanvas::autoAxes): New function.

diff --git a/libgui/graphics/Canvas.cc b/libgui/graphics/Canvas.cc
--- a/libgui/graphics/Canvas.cc
+++ b/libgui/graphics/Canvas.cc
@@ -194,16 +194,54 @@ void Canvas::canvasToggleGrid (const gra
               ap.set_zgrid (state);
 
               redraw (true);
             }
         }
     }
 }
 
+static void
+autoscale_axes (axes::properties& ap)
+{
+  ap.clear_zoom_stack ();
+
+  ap.set_xlimmode ("auto");
+  ap.set_ylimmode ("auto");
+  ap.set_zlimmode ("auto");
+}
+
+void Canvas::canvasAutoAxes (const graphics_handle& handle)
+{
+  gh_manager::auto_lock lock;
+
+  graphics_object go = gh_manager::get_object (handle);
+
+  if (go.valid_object ())
+    {
+      figure::properties& fp = Utils::properties<figure> (go);
+
+      graphics_handle ah = fp.get_currentaxes ();
+
+      graphics_object ax = gh_manager::get_object (ah);
+
+      if (ax.valid_object ())
+        {
+          axes::properties& ap = Utils::properties<axes> (ax);
+
+          if (ap.handlevisibility_is ("on") && ap.is_visible ())
+            {
+              autoscale_axes (ap);
+
+              redraw (true);
+            }
+        }
+    }
+}
+
 void Canvas::canvasPaintEvent (void)
 {
   if (! m_redrawBlocked)
     {
       gh_manager::auto_lock lock;
 
       draw (m_handle);
 
@@ -392,20 +430,17 @@ void Canvas::canvasMouseDoubleClickEvent
                 .set_currentaxes (axesObj.get_handle ().as_octave_value ());
 
               if (pan_enabled (figObj) || rotate_enabled (figObj)
                   || zoom_enabled (figObj))
                 {
                   axes::properties& ap =
                     Utils::properties<axes> (axesObj);
 
-                  ap.clear_zoom_stack ();
-                  ap.set_xlimmode ("auto");
-                  ap.set_ylimmode ("auto");
-                  ap.set_zlimmode ("auto");
+                  autoscale_axes (ap);
                 }
             }
 
           if (redrawFigure)
             redraw (false);
         }
     }
 }
@@ -568,20 +603,17 @@ void Canvas::canvasMousePressEvent (QMou
                       Utils::properties<axes> (axesObj).unzoom ();
                       break;
 
                     case Qt::MidButton:
                         {
                           axes::properties& ap =
                             Utils::properties<axes> (axesObj);
 
-                          ap.clear_zoom_stack ();
-                          ap.set_xlimmode ("auto");
-                          ap.set_ylimmode ("auto");
-                          ap.set_zlimmode ("auto");
+                          autoscale_axes (ap);
                         }
                       break;
 
                     default:
                       redraw_figure = false;
                       break;
                     }
                 }
diff --git a/libgui/graphics/Canvas.h b/libgui/graphics/Canvas.h
--- a/libgui/graphics/Canvas.h
+++ b/libgui/graphics/Canvas.h
@@ -62,16 +62,17 @@ public:
 
   virtual QWidget* qWidget (void) = 0;
 
   static Canvas* create (const std::string& name, QWidget* parent,
                          const graphics_handle& handle);
 
   virtual void toggleAxes (const graphics_handle& handle) = 0;
   virtual void toggleGrid (const graphics_handle& handle) = 0;
+  virtual void autoAxes (const graphics_handle& handle) = 0;
 
 protected:
   virtual void draw (const graphics_handle& handle) = 0;
   virtual void drawZoomBox (const QPoint& p1, const QPoint& p2) = 0;
   virtual void resize (int x, int y, int width, int height) = 0;
   virtual graphics_object selectFromAxes (const graphics_object& ax,
                                           const QPoint& pt) = 0;
 
@@ -80,16 +81,17 @@ protected:
     : m_handle (handle),
       m_redrawBlocked (false),
       m_mouseMode (NoMode),
       m_eventMask (0)
     { }
 
   void canvasToggleAxes (const graphics_handle& handle);
   void canvasToggleGrid (const graphics_handle& handle);
+  void canvasAutoAxes (const graphics_handle& handle);
   void canvasPaintEvent (void);
   void canvasMouseDoubleClickEvent (QMouseEvent* event);
   void canvasMouseMoveEvent (QMouseEvent* event);
   void canvasMousePressEvent (QMouseEvent* event);
   void canvasMouseReleaseEvent (QMouseEvent* event);
   void canvasWheelEvent (QWheelEvent* event);
   bool canvasKeyPressEvent (QKeyEvent* event);
   bool canvasKeyReleaseEvent (QKeyEvent* event);
diff --git a/libgui/graphics/Figure.cc b/libgui/graphics/Figure.cc
--- a/libgui/graphics/Figure.cc
+++ b/libgui/graphics/Figure.cc
@@ -277,16 +277,20 @@ void Figure::createFigureToolBarAndMenuB
   QAction *toggle_axes = m_figureToolBar->addAction ("Axes");
   connect (toggle_axes, SIGNAL (triggered (void)),
            this, SLOT (toggleAxes (void)));
 
   QAction *toggle_grid = m_figureToolBar->addAction ("Grid");
   connect (toggle_grid, SIGNAL (triggered (void)),
            this, SLOT (toggleGrid (void)));
 
+  QAction *auto_axes = m_figureToolBar->addAction ("Autoscale");
+  connect (auto_axes, SIGNAL (triggered (void)),
+           this, SLOT (autoAxes (void)));
+
   m_menuBar = new MenuBar (win);
   win->setMenuBar (m_menuBar);
 
   QMenu* fileMenu = m_menuBar->addMenu (tr ("&File"));
   fileMenu->menuAction ()->setObjectName ("builtinMenu");
   fileMenu->addAction (tr ("&Save"), this, SLOT (fileSaveFigure (bool)));
   fileMenu->addAction (tr ("Save &As"), this, SLOT (fileSaveFigureAs (void)));
   fileMenu->addSeparator ();
@@ -855,9 +859,17 @@ void Figure::toggleAxes (void)
 void Figure::toggleGrid (void)
 {
   Canvas* canvas = m_container->canvas (m_handle);
 
   if (canvas)
     canvas->toggleGrid (m_handle);
 }
   
+void Figure::autoAxes (void)
+{
+  Canvas* canvas = m_container->canvas (m_handle);
+
+  if (canvas)
+    canvas->autoAxes (m_handle);
+}
+  
 }; // namespace QtHandles
diff --git a/libgui/graphics/Figure.h b/libgui/graphics/Figure.h
--- a/libgui/graphics/Figure.h
+++ b/libgui/graphics/Figure.h
@@ -118,16 +118,17 @@ private slots:
   void editCopy (void);
   void editCut (void);
   void editPaste (void);
   void helpAboutQtHandles (void);
   void updateMenuBar (void);
   void updateContainer (void);
   void toggleAxes (void);
   void toggleGrid (void);
+  void autoAxes (void);
 
 signals:
   void asyncUpdate (void);
 
 private:
   Container* m_container;
   bool m_blockUpdates;
   QToolBar* m_figureToolBar;
diff --git a/libgui/graphics/GLCanvas.cc b/libgui/graphics/GLCanvas.cc
--- a/libgui/graphics/GLCanvas.cc
+++ b/libgui/graphics/GLCanvas.cc
@@ -65,16 +65,21 @@ void GLCanvas::toggleAxes (const graphic
   canvasToggleAxes (gh);
 }
 
 void GLCanvas::toggleGrid (const graphics_handle& gh)
 {
   canvasToggleGrid (gh);
 }
 
+void GLCanvas::autoAxes (const graphics_handle& gh)
+{
+  canvasAutoAxes (gh);
+}
+
 graphics_object GLCanvas::selectFromAxes (const graphics_object& ax,
                                           const QPoint& pt)
 {
   makeCurrent ();
 
   if (ax)
     {
       opengl_selector s;
diff --git a/libgui/graphics/GLCanvas.h b/libgui/graphics/GLCanvas.h
--- a/libgui/graphics/GLCanvas.h
+++ b/libgui/graphics/GLCanvas.h
@@ -34,16 +34,17 @@ class GLCanvas : public QGLWidget, publi
 {
 public:
   GLCanvas (QWidget* parent, const graphics_handle& handle);
   ~GLCanvas (void);
 
   void draw (const graphics_handle& handle);
   void toggleAxes (const graphics_handle& handle);
   void toggleGrid (const graphics_handle& handle);
+  void autoAxes (const graphics_handle& handle);
   void drawZoomBox (const QPoint& p1, const QPoint& p2);
   void resize (int /* x */, int /* y */,
                int /* width */, int /* height */) { }
   graphics_object selectFromAxes (const graphics_object& ax,
                                   const QPoint& pt);
   QWidget* qWidget (void) { return this; }
 
 protected:
