# HG changeset patch
# User Rik <rik@octave.org>
# Date 1486492231 28800
#      Tue Feb 07 10:30:31 2017 -0800
# Node ID 6edad6ad4da9acc42eba114cc7e4279e3989a780
# Parent  a0eae3977ea67a8e80df70c2dd86f10b3d094d27
Use BOLD to identify text that matched in documentation search results.
Identify one match pattern per line of returned text.

* parser.cc (replace): Delete function
* parser.cc (global_search): Mark up search result text with "<b>text</b>".
Incorporate trivial replace function directly into global_search function.

diff --git a/libgui/src/qtinfo/parser.cc b/libgui/src/qtinfo/parser.cc
--- a/libgui/src/qtinfo/parser.cc
+++ b/libgui/src/qtinfo/parser.cc
@@ -532,32 +532,16 @@ parser::seek (QIODevice *io, int pos)
   char ch;
   while (! io->atEnd () && pos > 0)
     {
       io->getChar (&ch);
       pos--;
     }
 }
 
-static void
-replace (QString& text, const QRegExp& re, const QString& after)
-{
-  int pos = 0;
-
-  while ((pos = re.indexIn (text, pos)) != -1)
-    {
-      QString cap = text.mid (pos, re.matchedLength ());
-      QString a (after);
-      a = a.arg (cap);
-      text.remove (pos, re.matchedLength ());
-      text.insert (pos, a);
-      pos += a.size ();
-    }
-}
-
 QString
 parser::global_search (const QString& text, int max_founds)
 {
   QString results;
   QStringList words = text.split (" ", QString::SkipEmptyParts);
 
   QString re_program ("(" + QRegExp::escape (words.at (0)));
   for (int i = 1; i < words.size (); i++)
@@ -598,37 +582,46 @@ parser::global_search (const QString& te
           if (founds < words.size ())
             continue;
 
           founds = 0;
 
           while ((pos = re.indexIn (node_text, pos)) != -1
                  && founds < max_founds)
             {
-              int line_start, line_end;
-              line_start = node_text.lastIndexOf ("\n", pos);
-              line_end = node_text.indexOf ("\n", pos);
-              QString line = node_text.mid (line_start,
-                                            line_end - line_start).trimmed ();
-              pos += re.matchedLength ();
-
               if (founds == 0)
                 {
                   results.append(
                     "<br>\n<font style=\"color:DarkGray; font-weight:bold;\">&raquo;</font> <a href='"
                     + node +
                     "'>");
                   results.append (node);
                   results.append ("</a><br>\n");
                 }
 
-              replace (line, re, "<i>%1</i>");
+              // Replace text found with BOLD TEXT in search results
+              int line_start, line_end;
+              line_start = node_text.lastIndexOf ("\n", pos);
+              line_end = node_text.indexOf ("\n", pos);
+              QString line = node_text.mid (line_start,
+                                            line_end - line_start);
+
+              int pos2 = pos - line_start;
+              int len = re.matchedLength ();
+
+              QString ptn = line.mid (pos2, len);
+              QString repl ("<b>%1</b>");
+              repl = repl.arg (ptn);
+              line.remove (pos2, len);
+              line.insert (pos2, repl);
+              line = line.trimmed ();
               results.append (line);
               results.append ("<br>\n");
 
+              pos += len;
               founds++;
             }
         }
       io->close ();
       delete io;
     }
 
   results.append ("</body></html>");
