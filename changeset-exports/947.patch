# HG changeset patch
# User jwe
# Date 785524332 0
#      Tue Nov 22 17:12:12 1994 +0000
# Node ID 570f55edf65f08736d2cbf0362a03919f35ed5cc
# Parent  91edf12ce30b0e57b74932339a6fbbf25c7c6f92
[project @ 1994-11-22 17:12:12 by jwe]

diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -159,16 +159,18 @@ EXPON	([DdEe][+-]?{D}+)
 			      BEGIN 0;
 			      if (strcmp (yytext, ",") == 0)
 				TOK_RETURN (',');
 			      else
 				TOK_RETURN (';');
 			    }
 		        }
 
+<TEXT_FCN>{S}*		{ current_input_column += yyleng; }
+
 <HELP_FCN>[^ \t\n]*{S}*	    |
 <TEXT_FCN>[^ \t\n\;\,]*{S}* {
 			      static char *tok = 0;
 			      delete [] tok;
 			      tok = strip_trailing_whitespace (yytext);
 			      yylval.tok_val = new token (tok);
 			      token_stack.push (yylval.tok_val);
 			      TOK_RETURN (TEXT);
@@ -215,18 +217,16 @@ EXPON	([DdEe][+-]?{D}+)
 			      do_string_escapes (tok);
 			      yylval.tok_val = new token (tok);
 			      token_stack.push (yylval.tok_val);
 			      current_input_column += yyleng;
 			    }
 			  return TEXT;
 			}
 
-<TEXT_FCN>{S}*		{ current_input_column += yyleng; }
-
 <STRING>{QSTR}*[\n\']	{
 			  if (braceflag)
 			    BEGIN MATRIX;
 			  else
 			    BEGIN 0;
 
 			  if (yytext[yyleng-1] == '\n')
 			    {
@@ -291,34 +291,42 @@ EXPON	([DdEe][+-]?{D}+)
 //   [x,y]                % an expression by itself
 //   [x,y] = expression   % assignment to a list of identifiers
 //   [x,y] == expression  % test for equality
 //
 // It would have been so much easier if the delimiters were simply
 // different for the expression on the left hand side of the equals
 // operator.
 
-			  in_brace_or_paren.pop ();
-			  braceflag--;
+			  if (! in_brace_or_paren.empty ())
+			    {
+			      in_brace_or_paren.pop ();
+			      braceflag--;
+			    }
+
 			  if (braceflag == 0)
 			    {
 			      if (! defining_func)
 				promptflag++;
 			      BEGIN 0;
 			    }
 			  fixup_column_count (yytext);
 			  quote_is_transpose = 0;
 			  cant_be_identifier = 0;
 			  convert_spaces_to_comma = 1;
 			  return ']';
 			}
 
 <MATRIX>{SN}*\]{S}*/=	{
-			  in_brace_or_paren.pop ();
-			  braceflag--;
+			  if (! in_brace_or_paren.empty ())
+			    {
+			      in_brace_or_paren.pop ();
+			      braceflag--;
+			    }
+
 			  if (braceflag == 0)
 			    {
 			      BEGIN 0;
 			      if (! defining_func)
 				promptflag++;
 			    }
 			  fixup_column_count (yytext);
 			  quote_is_transpose = 0;
@@ -331,18 +339,22 @@ EXPON	([DdEe][+-]?{D}+)
 			}
 
 <MATRIX>{SN}*\]{S}*	{
 			  fixup_column_count (yytext);
 
 // It's a pain in the ass to decide whether to insert a comma after
 // seeing a ']' character...
 
-			  in_brace_or_paren.pop ();
-			  braceflag--;
+			  if (! in_brace_or_paren.empty ())
+			    {
+			      in_brace_or_paren.pop ();
+			      braceflag--;
+			    }
+
 			  if (braceflag == 0)
 			    {
 			      if (! defining_func)
 				promptflag++;
 			      BEGIN 0;
 			    }
 			  else if (user_pref.commas_in_literal_matrix != 2)
 			    {
@@ -353,19 +365,22 @@ EXPON	([DdEe][+-]?{D}+)
 			      int postfix_un_op
 				= next_token_is_postfix_unary_op (spc_prev,
 								  yytext);
 
 			      int c1 = yyinput ();
 			      unput (c1);
 			      int other_op = match_any (c1, ",;\n]");
 
-			      if (! (postfix_un_op || bin_op || other_op)
-				     && in_brace_or_paren.top ()
-				     && convert_spaces_to_comma)
+			      if (! (postfix_un_op
+				     || bin_op
+				     || other_op
+				     || in_brace_or_paren.empty ())
+				  && in_brace_or_paren.top ()
+				  && convert_spaces_to_comma)
 				{
 				  unput (',');
 				  return ']';
 				}
 			    }
 
 			  quote_is_transpose = 1;
 			  cant_be_identifier = 0;
@@ -380,17 +395,19 @@ EXPON	([DdEe][+-]?{D}+)
 // If commas are required, just eat the spaces.
 
 			  if (user_pref.commas_in_literal_matrix != 2)
 			    {
 			      int bin_op = next_token_is_bin_op (1, yytext);
 			      int postfix_un_op
 				= next_token_is_postfix_unary_op (1, yytext);
 
-			      if (! (postfix_un_op || bin_op)
+			      if (! (postfix_un_op
+				     || bin_op
+				     || in_brace_or_paren.empty ())
 				  && in_brace_or_paren.top ()
 				  && convert_spaces_to_comma)
 				TOK_RETURN (',');
 			    }
 			}
 
 <MATRIX>{SN}*\;{SN}*	|
 <MATRIX>{N}{SN}*	{
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1568,17 +1568,18 @@ make_multi_val_ret (tree_expression *rhs
 
   if (id_list)
     {
       int list_len = id_list->length ();
 
       if (list_len == 1)
 	{
 	  tree_index_expression *lhs = id_list->remove_front ();
-	  retval = new tree_simple_assignment_expression (lhs, rhs, l, c);
+	  retval = new tree_simple_assignment_expression (lhs, rhs,
+							  0, 0, l, c);
 	  
 	}
       else if (list_len > 1)
 	{
 	  if (rhs->is_multi_val_ret_expression ())
 	    {
 	      tree_multi_val_ret *t = (tree_multi_val_ret *) rhs;
 	      retval = new tree_multi_assignment_expression (id_list, t, l, c);
