# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1470698496 -3600
#      Tue Aug 09 00:21:36 2016 +0100
# Node ID 4afe3705ea753511669b015220a42c3354353080
# Parent  ab139f0733b92e8c482cfd52e862e3d01ea573b2
svd: do not shadow member variables with local variables.

* liboctave/numeric/svd.cc, liboctave/numeric/svd.h: there was no issue
with current code because member variables never change after construction.
Still, it's not good practice and the compilers will warn about it.

diff --git a/liboctave/numeric/svd.cc b/liboctave/numeric/svd.cc
--- a/liboctave/numeric/svd.cc
+++ b/liboctave/numeric/svd.cc
@@ -126,28 +126,28 @@ extern "C"
                              F77_REAL*, F77_INT *, F77_INT&
                              F77_CHAR_ARG_LEN_DECL);
 }
 
 template <typename T>
 T
 svd<T>::left_singular_matrix (void) const
 {
-  if (type == svd::Type::sigma_only)
+  if (m_type == svd::Type::sigma_only)
     (*current_liboctave_error_handler)
       ("svd: U not computed because type == svd::sigma_only");
 
   return left_sm;
 }
 
 template <typename T>
 T
 svd<T>::right_singular_matrix (void) const
 {
-  if (type == svd::Type::sigma_only)
+  if (m_type == svd::Type::sigma_only)
     (*current_liboctave_error_handler)
       ("svd: V not computed because type == svd::sigma_only");
 
   return right_sm;
 }
 
 
 // GESVD specializations
@@ -364,26 +364,26 @@ svd<FloatComplexMatrix>::gesdd (char& jo
 
 #undef GESDD_REAL_STEP
 #undef GESDD_COMPLEX_STEP
 
 
 template<typename T>
 svd<T>::svd (const T& a, svd::Type type,
              svd::Driver driver)
-  : type (type), driver (driver), left_sm (), sigma (), right_sm ()
+  : m_type (type), m_driver (driver), left_sm (), sigma (), right_sm ()
 {
   octave_idx_type info;
 
   octave_idx_type m = a.rows ();
   octave_idx_type n = a.cols ();
 
   if (m == 0 || n == 0)
     {
-      switch (type)
+      switch (m_type)
         {
         case svd::Type::std:
           left_sm = T (m, m, 0);
           for (octave_idx_type i = 0; i < m; i++)
             left_sm.xelem (i, i) = 1;
           sigma = DM_T (m, n);
           right_sm = T (n, n, 0);
           for (octave_idx_type i = 0; i < n; i++)
@@ -412,17 +412,17 @@ svd<T>::svd (const T& a, svd::Type type,
   char jobu = 'A';
   char jobv = 'A';
 
   octave_idx_type ncol_u = m;
   octave_idx_type nrow_vt = n;
   octave_idx_type nrow_s = m;
   octave_idx_type ncol_s = n;
 
-  switch (type)
+  switch (m_type)
     {
     case svd::Type::economy:
       jobu = jobv = 'S';
       ncol_u = nrow_vt = nrow_s = ncol_s = min_mn;
       break;
 
     case svd::Type::sigma_only:
 
@@ -459,20 +459,20 @@ svd<T>::svd (const T& a, svd::Type type,
 
   octave_idx_type lwork = -1;
 
   T work (1, 1);
 
   octave_idx_type m1 = std::max (m, 1);
   octave_idx_type nrow_vt1 = std::max (nrow_vt, 1);
 
-  if (driver == svd::Driver::GESVD)
+  if (m_driver == svd::Driver::GESVD)
     gesvd (jobu, jobv, m, n, tmp_data, m1, s_vec, u, vt, nrow_vt1,
            work, lwork, info);
-  else if (driver == svd::Driver::GESDD)
+  else if (m_driver == svd::Driver::GESDD)
     {
       assert (jobu == jobv);
       char jobz = jobu;
 
       OCTAVE_LOCAL_BUFFER (octave_idx_type, iwork, 8 * std::min (m, n));
 
       gesdd (jobz, m, n, tmp_data, m1, s_vec, u, vt, nrow_vt1,
              work, lwork, iwork, info);
diff --git a/liboctave/numeric/svd.h b/liboctave/numeric/svd.h
--- a/liboctave/numeric/svd.h
+++ b/liboctave/numeric/svd.h
@@ -45,36 +45,36 @@ public:
 
   enum class Driver
   {
     GESVD,
     GESDD
   };
 
   svd (void)
-    : type (), driver (), left_sm (), sigma (), right_sm ()
+    : m_type (), m_driver (), left_sm (), sigma (), right_sm ()
   { }
 
   svd (const T& a, svd::Type type = svd::Type::std,
        svd::Driver driver = svd::Driver::GESVD);
 
   svd (const svd& a)
-    : type (a.type), driver (a.driver), left_sm (a.left_sm), sigma (a.sigma),
-      right_sm (a.right_sm)
+    : m_type (a.m_type), m_driver (a.m_driver), left_sm (a.left_sm),
+      sigma (a.sigma), right_sm (a.right_sm)
   { }
 
   svd& operator = (const svd& a)
   {
     if (this != &a)
       {
-        type = a.type;
+        m_type = a.m_type;
         left_sm = a.left_sm;
         sigma = a.sigma;
         right_sm = a.right_sm;
-        driver = a.driver;
+        m_driver = a.m_driver;
       }
 
     return *this;
   }
 
   ~svd (void) { }
 
   T left_singular_matrix (void) const;
@@ -83,18 +83,18 @@ public:
 
   T right_singular_matrix (void) const;
 
 private:
 
   typedef typename T::element_type P;
   typedef typename DM_T::element_type DM_P;
 
-  svd::Type type;
-  svd::Driver driver;
+  svd::Type m_type;
+  svd::Driver m_driver;
 
   T left_sm;
   DM_T sigma;
   T right_sm;
 
   void gesvd (char& jobu, char& jobv, octave_idx_type m, octave_idx_type n,
               P* tmp_data, octave_idx_type m1, DM_P* s_vec, P* u, P* vt,
               octave_idx_type nrow_vt1, T& work, octave_idx_type& lwork,
