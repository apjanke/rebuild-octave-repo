# HG changeset patch
# User jwe
# Date 1020795044 0
#      Tue May 07 18:10:44 2002 +0000
# Node ID 2e2e32198722822c3e34c1780e12a8a2f59d54e8
# Parent  311981a9726d147d650dce152804740664fbb661
[project @ 2002-05-07 18:10:44 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+2002-05-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-struct.cc (octave_struct::print_raw): Print scalar struct
+	arrays more compactly.
+
+	* DLD-FUNCTIONS/time.cc (extract_tm): Handle new struct array def.
+
+	* oct-map.cc (Octave_map::array_len): New data member.
+	(Octave_map::operator[], Octave_map::contsnts): Return
+	octave_value_list, not Octave_value.  Change callers as necessary.
+	(Octave_map::assign): New function.
+	(Octave_map::array_length): New fucntion.
+	* oct-obj.cc (octave_value_list::assign): New function.
+	
+
 2002-05-06  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* TEMPLATE-INST/Map-oct-obj.cc: New file.
 	* Makefile.in (TI_XSRC): Add it to the list.
 
 	* oct-map.h (Octave_map): Make CHMap<octave_value_list> a data
 	member instead of deriving from CHMap<octave_value>, in
 	preparation for structure arrays.
diff --git a/src/DLD-FUNCTIONS/time.cc b/src/DLD-FUNCTIONS/time.cc
--- a/src/DLD-FUNCTIONS/time.cc
+++ b/src/DLD-FUNCTIONS/time.cc
@@ -55,27 +55,27 @@ mk_tm_map (const octave_base_tm& t)
   return m;
 }
 
 static octave_base_tm
 extract_tm (Octave_map &m)
 {
   octave_base_tm tm;
 
-  tm.usec (static_cast<int> (m ["usec"] . double_value ()));
-  tm.sec (static_cast<int> (m ["sec"] . double_value ()));
-  tm.min (static_cast<int> (m ["min"] . double_value ()));
-  tm.hour (static_cast<int> (m ["hour"] . double_value ()));
-  tm.mday (static_cast<int> (m ["mday"] . double_value ()));
-  tm.mon (static_cast<int> (m ["mon"] . double_value ()));
-  tm.year (static_cast<int> (m ["year"] . double_value ()));
-  tm.wday (static_cast<int> (m ["wday"] . double_value ()));
-  tm.yday (static_cast<int> (m ["yday"] . double_value ()));
-  tm.isdst (static_cast<int> (m ["isdst"] . double_value ()));
-  tm.zone (m ["zone"] . string_value ());
+  tm.usec (static_cast<int> (m ["usec"](0) . double_value ()));
+  tm.sec (static_cast<int> (m ["sec"](0) . double_value ()));
+  tm.min (static_cast<int> (m ["min"](0) . double_value ()));
+  tm.hour (static_cast<int> (m ["hour"](0) . double_value ()));
+  tm.mday (static_cast<int> (m ["mday"](0) . double_value ()));
+  tm.mon (static_cast<int> (m ["mon"](0) . double_value ()));
+  tm.year (static_cast<int> (m ["year"](0) . double_value ()));
+  tm.wday (static_cast<int> (m ["wday"](0) . double_value ()));
+  tm.yday (static_cast<int> (m ["yday"](0) . double_value ()));
+  tm.isdst (static_cast<int> (m ["isdst"](0) . double_value ()));
+  tm.zone (m ["zone"](0) . string_value ());
 
   return tm;
 }
 
 DEFUN_DLD (time, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} time ()\n\
 Return the current time as the number of seconds since the epoch.  The\n\
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -23,16 +23,17 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#include "error.h"
 #include "str-vec.h"
 
 #include "oct-map.h"
 #include "utils.h"
 
 string_vector
 Octave_map::make_name_list (void)
 {
@@ -42,13 +43,52 @@ Octave_map::make_name_list (void)
 
   int i = 0;
   for (Pix p = first (); p != 0; next (p))
     names[i++] = key (p);
 
   return names;
 }
 
+int
+Octave_map::array_length (void) const
+{
+  if (array_len == 0 && length () != 0)
+    {
+      Pix p = first ();
+      array_len = contents(p).length ();
+    }
+  return array_len;
+}
+
+Octave_map&
+Octave_map::assign (const idx_vector& idx, const std::string& key,
+		    const octave_value_list& rhs)
+{
+  octave_value_list tmp = map[key];
+
+  tmp.assign (idx, rhs);
+
+  if (! error_state)
+    {
+      int n = tmp.length ();
+
+      if (n > array_length ())
+	{
+	  octave_value fill_value = Matrix ();
+
+	  for (Pix p = first (); p != 0; next (p))
+	    contents(p).resize (n, fill_value);
+
+	  array_len = n;
+	}
+
+      map[key] = tmp;
+    }
+
+  return *this;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -32,63 +32,75 @@ Software Foundation, 59 Temple Place - S
 #include "oct-obj.h"
 
 class string_vector;
 
 class
 Octave_map
 {
  public:
-  Octave_map (void) : map (octave_value_list ()) { }
+  Octave_map (void) : map (octave_value_list ()), array_len (0) { }
 
   Octave_map (const std::string& key, const octave_value& value)
-    : map (octave_value_list ())
+    : map (octave_value_list ()), array_len (1)
       {
 	map[key] = octave_value_list (value);
       }
 
-  Octave_map (const Octave_map& m) : map (m.map) { }
+  Octave_map (const Octave_map& m)
+    : map (m.map), array_len (m.array_len) { }
 
   Octave_map& operator = (const Octave_map& m)
     {
       if (this != &m)
-	map = m.map;
-
+	{
+	  map = m.map;
+	  array_len = m.array_len;
+	}
       return *this;
     }
 
   ~Octave_map (void) { }
 
+  // This is the number of keys.
   int length (void) const { return map.length (); }
 
   int empty (void) const { return map.empty (); }
 
-  octave_value& operator [] (const std::string& key) { return map[key](0); }
+  octave_value_list& operator [] (const std::string& key) { return map[key]; }
 
   void del (const std::string& key) { map.del (key); }
 
   Pix first (void) const { return map.first (); }
   void next (Pix& i) const { map.next (i); }
 
   std::string key (Pix p) const { return map.key (p); }
 
-  octave_value& contents (Pix p) const { return map.contents (p)(0); }
+  octave_value_list& contents (Pix p) const { return map.contents (p); }
 
   Pix seek (const std::string& key) const { return map.seek (key); }
 
   int contains (const std::string& key) const { return map.contains (key); }
 
   void clear (void) { map.clear (); }
 
   string_vector make_name_list (void);
 
+  int array_length () const;
+
+  Octave_map& assign (const idx_vector& idx, const std::string& key,
+		      const octave_value_list& rhs);
+
 private:
 
   // The map of names to values.
   CHMap<octave_value_list> map;
+
+  // The current size of this struct array;
+  mutable int array_len;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
diff --git a/src/oct-obj.cc b/src/oct-obj.cc
--- a/src/oct-obj.cc
+++ b/src/oct-obj.cc
@@ -137,16 +137,25 @@ octave_value_list::splice (int offset, i
 }
 
 octave_value_list
 octave_value_list::index (idx_vector& i) const
 {
   return octave_value_list (data.index (i));
 }
 
+octave_value_list&
+octave_value_list::assign (const idx_vector& i,
+			   const octave_value_list& rhs)
+{
+  data.set_index (i);
+  ::assign (data, rhs.data);
+  return *this;
+}
+
 bool
 octave_value_list::all_strings_p (void) const
 {
   int n = length ();
 
   for (int i = 0; i < n; i++)
     if (! elem(i).is_string ())
       return 0;
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -133,16 +133,19 @@ public:
 
   octave_value_list& reverse (void);
 
   octave_value_list splice (int offset, int length,
 			    const octave_value_list& lst) const;
 
   octave_value_list index (idx_vector& i) const;
 
+  octave_value_list& assign (const idx_vector& i,
+			     const octave_value_list& rhs);
+
   bool all_strings_p (void) const;
 
   string_vector make_argv (const std::string&) const;
 
   void stash_name_tags (const string_vector& nm) { names = nm; }
 
   string_vector name_tags (void) const { return names; }
 
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -27,16 +27,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 
 #include "error.h"
 #include "oct-lvalue.h"
+#include "ov-list.h"
 #include "ov-struct.h"
 #include "unwind-prot.h"
 #include "variables.h"
 
 DEFINE_OCTAVE_ALLOCATOR(octave_struct);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(octave_struct, "struct");
 
@@ -62,17 +63,18 @@ octave_struct::do_struct_elt_index_op (c
     error ("structure has no member `%s'", nm.c_str ());
 
   return retval;
 }
 
 octave_lvalue
 octave_struct::struct_elt_ref (octave_value *, const std::string& nm)
 {
-  return octave_lvalue (&map [nm]);
+  // XXX FIXME XXX -- struct array
+  return octave_lvalue (&map[nm](0));
 }
 
 void
 octave_struct::print (std::ostream& os, bool) const
 {
   print_raw (os);
 }
 
@@ -90,22 +92,30 @@ octave_struct::print_raw (std::ostream& 
   if (Vstruct_levels_to_print-- > 0)
     {
       indent (os);
       os << "{";
       newline (os);
 
       increment_indent_level ();
 
+      int n = map.array_length ();
+
       for (Pix p = map.first (); p; map.next (p))
 	{
 	  std::string key = map.key (p);
-	  octave_value val = map.contents (p);
+	  octave_value_list val = map.contents (p);
 
-	  val.print_with_name (os, key);
+	  if (n == 1)
+	    val(0).print_with_name (os, key);
+	  else
+	    {
+	      octave_list tmp (val);
+	      tmp.print_with_name (os, key);
+	    }
 	}
 
       decrement_indent_level ();
 
       indent (os);
       os << "}";
       newline (os);
     }
