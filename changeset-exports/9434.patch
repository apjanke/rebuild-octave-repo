# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1247759804 14400
#      Thu Jul 16 11:56:44 2009 -0400
# Node ID ac2617d4e30c457b6cec3e3b10a9b8c12d375f1c
# Parent  38a0f9dc0ab49b39c532ad32165fc88d41260c9d
graphics.cc (get_array_limits): require min_pos value to be greater than zero

diff --git a/scripts/image/imread.m b/scripts/image/imread.m
--- a/scripts/image/imread.m
+++ b/scripts/image/imread.m
@@ -49,17 +49,17 @@ function varargout = imread (filename, v
 
   fn = file_in_path (IMAGE_PATH, filename);
 
   if (isempty (fn))
     error ("imread: cannot find %s", filename);
   endif
 
   try
-    [varargout{1:nargout}] = __magick_read__ (fn, varargin{:});
+    [varargout{1:nargout}] = magick_read_internal (fn, varargin{:});
   catch
 
     magick_error = lasterr ();
 
     img_field = false;
     x_field = false;
     map_field = false;
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-07-16  John W. Eaton  <jwe@octave.org>
+
+	* graphics.cc (get_array_limits): Require min_pos value to be
+	greater than zero.
+
 2009-07-15  Robert T. Short  <octave@phaselockedsystems.com>
 
 	* DLD-FUNCTIONS/filter.cc: New tests.
 
 2009-07-09  John W. Eaton  <jwe@octave.org>
 
 	* data.cc (Fones, Fzeros, Ftrue, Ffalse): Update docstrings.
 
diff --git a/src/DLD-FUNCTIONS/__magick_read__.cc b/src/DLD-FUNCTIONS/__magick_read__.cc
--- a/src/DLD-FUNCTIONS/__magick_read__.cc
+++ b/src/DLD-FUNCTIONS/__magick_read__.cc
@@ -339,17 +339,17 @@ read_images (const std::vector<Magick::I
 
   retval(0) = im;
 
   return retval;
 }
 
 #endif
 
-DEFUN_DLD (__magick_read__, args, nargout,
+DEFUN_DLD (magick_read, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Function File} {@var{m} =} __magick_read__(@var{fname}, @var{index})\n\
 @deftypefnx{Function File} {[@var{m}, @var{colormap}] =} __magick_read__(@var{fname}, @var{index})\n\
 @deftypefnx{Function File} {[@var{m}, @var{colormap}, @var{alpha}] =} __magick_read__(@var{fname}, @var{index})\n\
 Read images with ImageMagick++.  In general you should not be using this function.\n\
 Instead you should use @code{imread}.\n\
 @seealso{imread}\n\
 @end deftypefn")
@@ -748,17 +748,17 @@ write_image (const std::string& filename
   catch (Magick::Exception& e)
     {
       error ("Magick++ exception: %s", e.what ());
     }
 }
 
 #endif
 
-DEFUN_DLD (__magick_write__, args, ,
+DEFUN_DLD (magick_write, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Function File} {} __magick_write__(@var{fname}, @var{fmt}, @var{img})\n\
 @deftypefnx {Function File} {} __magick_write__(@var{fname}, @var{fmt}, @var{img}, @var{map})\n\
 Write images with ImageMagick++.  In general you should not be using this function.\n\
 Instead you should use @code{imwrite}.\n\
 @seealso{imread}\n\
 @end deftypefn")
 {
@@ -877,17 +877,17 @@ magick_to_octave_value (const Magick::Im
       st.assign (OUTNAME, magick_to_octave_value (im.NAME ())); \
     } \
   catch (Magick::Warning& w) \
     { \
     }
 
 #endif
 
-DEFUN_DLD (__magick_finfo__, args, ,
+DEFUN_DLD (magick_finfo, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable File} {} __magick_finfo__(@var{fname})\n\
 Read image information with GraphicsMagick++.  In general you should\n\
 not be using this function.  Instead you should use @code{imfinfo}.\n\
 @seealso{imfinfo, imread}\n\
 @end deftypefn")
 {
   octave_value_list output;
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -476,17 +476,17 @@ get_array_limits (const Array<T>& m, dou
       if (! (xisinf (e) || xisnan (e)))
 	{
 	  if (e < emin)
 	    emin = e;
 
 	  if (e > emax)
 	    emax = e;
 
-	  if (e >= 0 && e < eminp)
+	  if (e > 0 && e < eminp)
 	    eminp = e;
 	}
     }
 }
 
 static bool
 lookup_object_name (const caseless_str& name, caseless_str& go_name,
 		    caseless_str& rest)
@@ -3384,17 +3384,16 @@ axes::properties::get_axis_limits (doubl
   return retval;
 }
 
 void 
 axes::properties::calc_ticks_and_lims (array_property& lims,
 				       array_property& ticks,
 				       bool limmode_is_auto, bool is_logscale)
 {
-
   // FIXME -- add log ticks and lims
 
   if (lims.get ().is_empty ())
     return;
 
   double lo = (lims.get ().matrix_value ()) (0);
   double hi = (lims.get ().matrix_value ()) (1);
   // FIXME should this be checked for somewhere else? (i.e. set{x,y,z}lim)
