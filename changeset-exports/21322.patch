# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1456257945 18000
#      Tue Feb 23 15:05:45 2016 -0500
# Node ID 909129eb77c52681efc3e8f3a7997d13c38d3160
# Parent  79a51b7e00b66d3068ce7c3441702be3c6cc5a67
use correct stack frame when reporting debug location

* toplev.h, toplev.cc (octave_call_stack::debug_user_code,
octave_call_stack::debug_user_code_line,
octave_call_stack::debug_user_code_column): New static functions.
(octave_call_stack::do_debug_user_code,
octave_call_stack::do_debug_user_code_line,
octave_call_stack::do_debug_user_code_column): New member functions.
* debug.cc (get_user_code): Use octave_call_stack::debug_user_code.
(Fdblist): Use octave_call_stack::debug_user_code_line and
octave_call_stack::debug_user_code_column.
(Fdbwhere): Don't error if at top level.  Improve location message.
(octave_call_stack::do_goto_frame,
octave_call_stack::do_goto_frame_relative): Improve location message.

diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -175,17 +175,17 @@ get_file_line (const std::string& fname,
 // current call stack.
 
 static octave_user_code *
 get_user_code (const std::string& fname = "")
 {
   octave_user_code *dbg_fcn = 0;
 
   if (fname.empty ())
-    dbg_fcn = octave_call_stack::caller_user_code ();
+    dbg_fcn = octave_call_stack::debug_user_code ();
   else
     {
       std::string name = fname;
 
       size_t name_len = name.length ();
 
       if (! name.empty () && name_len > 2 && name.substr (name_len-2) == ".m")
         name = name.substr (0, name_len-2);
@@ -1501,44 +1501,44 @@ DEFUN (dbwhere, , ,
 In debugging mode, report the current file and line number where execution\n\
 is stopped.\n\
 @seealso{dbstack, dblist, dbstatus, dbcont, dbstep, dbup, dbdown}\n\
 @end deftypefn")
 {
   octave_user_code *dbg_fcn = get_user_code ();
 
   if (! dbg_fcn)
-    error ("dbwhere: must be inside a user function to use dbwhere\n");
+    {
+      octave_stdout << "stopped at top level" << std::endl;
+      return ovl ();
+    }
 
   bool have_file = true;
 
-  std::string name = dbg_fcn->fcn_file_name ();
-
-  if (name.empty ())
-    {
-      have_file = false;
+  octave_stdout << "stopped in " << dbg_fcn->name () << " at ";
 
-      name = dbg_fcn->name ();
-    }
-
-  octave_stdout << "stopped in " << name << " at ";
-
-  int l = octave_call_stack::caller_user_code_line ();
+  int l = octave_call_stack::debug_user_code_line ();
 
   if (l > 0)
     {
-      octave_stdout << "line " << l << std::endl;
+      octave_stdout << "line " << l;
+
+      std::string file_name = dbg_fcn->fcn_file_name ();
 
-      if (have_file)
+      if (! file_name.empty ())
         {
-          std::string line = get_file_line (name, l);
+          octave_stdout << " [" << file_name << "]" << std::endl;
+
+          std::string line = get_file_line (file_name, l);
 
           if (! line.empty ())
             octave_stdout << l << ": " << line << std::endl;
         }
+      else
+        octave_stdout << std::endl;
     }
   else
     octave_stdout << "<unknown line>" << std::endl;
 
   return ovl ();
 }
 
 void
@@ -1759,17 +1759,17 @@ If unspecified @var{n} defaults to 10 (+
   std::string name = dbg_fcn->fcn_file_name ();
 
   if (name.empty ())
     {
       have_file = false;
       name = dbg_fcn->name ();
     }
 
-  int l = octave_call_stack::caller_user_code_line ();
+  int l = octave_call_stack::debug_user_code_line ();
 
   if (l > 0)
     {
       if (have_file)
         {
           int l_min = std::max (l - n/2, 0);
           int l_max = l + n/2;
           do_dbtype (octave_stdout, name, l_min, l-1);
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -180,68 +180,16 @@ octave_call_stack::do_current_column (vo
     {
       const stack_frame& elt = cs[curr_frame];
       retval = elt.m_column;
     }
 
   return retval;
 }
 
-int
-octave_call_stack::do_caller_user_code_line (void) const
-{
-  int retval = -1;
-
-  const_iterator p = cs.end ();
-
-  while (p != cs.begin ())
-    {
-      const stack_frame& elt = *(--p);
-
-      octave_function *f = elt.m_fcn;
-
-      if (f && f->is_user_code ())
-        {
-          if (elt.m_line > 0)
-            {
-              retval = elt.m_line;
-              break;
-            }
-        }
-    }
-
-  return retval;
-}
-
-int
-octave_call_stack::do_caller_user_code_column (void) const
-{
-  int retval = -1;
-
-  const_iterator p = cs.end ();
-
-  while (p != cs.begin ())
-    {
-      const stack_frame& elt = *(--p);
-
-      octave_function *f = elt.m_fcn;
-
-      if (f && f->is_user_code ())
-        {
-          if (elt.m_column)
-            {
-              retval = elt.m_column;
-              break;
-            }
-        }
-    }
-
-  return retval;
-}
-
 size_t
 octave_call_stack::do_num_user_code_frames
   (octave_idx_type& curr_user_frame) const
 {
   size_t retval = 0;
 
   curr_user_frame = 0;
 
@@ -298,16 +246,158 @@ octave_call_stack::do_caller_user_code (
               break;
             }
         }
     }
 
   return retval;
 }
 
+int
+octave_call_stack::do_caller_user_code_line (void) const
+{
+  int retval = -1;
+
+  const_iterator p = cs.end ();
+
+  while (p != cs.begin ())
+    {
+      const stack_frame& elt = *(--p);
+
+      octave_function *f = elt.m_fcn;
+
+      if (f && f->is_user_code ())
+        {
+          if (elt.m_line > 0)
+            {
+              retval = elt.m_line;
+              break;
+            }
+        }
+    }
+
+  return retval;
+}
+
+int
+octave_call_stack::do_caller_user_code_column (void) const
+{
+  int retval = -1;
+
+  const_iterator p = cs.end ();
+
+  while (p != cs.begin ())
+    {
+      const stack_frame& elt = *(--p);
+
+      octave_function *f = elt.m_fcn;
+
+      if (f && f->is_user_code ())
+        {
+          if (elt.m_column)
+            {
+              retval = elt.m_column;
+              break;
+            }
+        }
+    }
+
+  return retval;
+}
+
+octave_user_code *
+octave_call_stack::do_debug_user_code (void) const
+{
+  octave_user_code *retval = 0;
+
+  // This should never happen...
+  if (curr_frame == 0)
+    return retval;
+
+  // Start looking with the caller of the calling debug function.
+  size_t i = cs[curr_frame].m_prev;
+
+  while (i != 0)
+    {
+      const stack_frame& elt = cs[i];
+
+      octave_function *f = elt.m_fcn;
+
+      if (f && f->is_user_code ())
+        {
+          retval = dynamic_cast<octave_user_code *> (f);
+          break;
+        }
+    }
+
+  return retval;
+}
+
+int
+octave_call_stack::do_debug_user_code_line (void) const
+{
+  int retval = -1;
+
+  // This should never happen...
+  if (curr_frame == 0)
+    return retval;
+
+  // Start looking with the caller of the calling debug function.
+  size_t i = cs[curr_frame].m_prev;
+
+  while (i != 0)
+    {
+      const stack_frame& elt = cs[i];
+
+      octave_function *f = elt.m_fcn;
+
+      if (f && f->is_user_code ())
+        {
+          if (elt.m_line)
+            {
+              retval = elt.m_line;
+              break;
+            }
+        }
+    }
+
+  return retval;
+}
+
+int
+octave_call_stack::do_debug_user_code_column (void) const
+{
+  int retval = -1;
+
+  // This should never happen...
+  if (curr_frame == 0)
+    return retval;
+
+  // Start looking with the caller of the calling debug function.
+  size_t i = cs[curr_frame].m_prev;
+
+  while (i != 0)
+    {
+      const stack_frame& elt = cs[i];
+
+      octave_function *f = elt.m_fcn;
+
+      if (f && f->is_user_code ())
+        {
+          if (elt.m_column)
+            {
+              retval = elt.m_column;
+              break;
+            }
+        }
+    }
+
+  return retval;
+}
+
 bool
 octave_call_stack::do_all_scripts (void) const
 {
   bool retval = true;
 
   const_iterator p = cs.end ();
 
   while (p != cs.begin ())
@@ -426,17 +516,19 @@ octave_call_stack::do_goto_frame (size_t
       const stack_frame& elt = cs[n];
 
       symbol_table::set_scope_and_context (elt.m_scope, elt.m_context);
 
       if (verbose)
         octave_stdout << "stopped in " << elt.fcn_name ()
                       << " at line " << elt.m_line
                       << " column " << elt.m_column
-                      << " (" << elt.m_scope << "[" << elt.m_context << "])"
+                      << " [" << elt.fcn_file_name () << "] "
+                      << " (scope = " << elt.m_scope
+                      << "[context = " << elt.m_context << "])"
                       << std::endl;
     }
 
   return retval;
 }
 
 bool
 octave_call_stack::do_goto_frame_relative (int nskip, bool verbose)
@@ -478,18 +570,20 @@ octave_call_stack::do_goto_frame_relativ
 
               symbol_table::set_scope_and_context (elt.m_scope, elt.m_context);
 
               if (verbose)
                 {
                   std::ostringstream buf;
 
                   if (f)
-                    buf << "stopped in " << f->name ()
-                        << " at line " << elt.m_line << std::endl;
+                    buf << "stopped in " << elt.fcn_name ()
+                        << " at line " << elt.m_line
+                        << " [" << elt.fcn_file_name () << "] "
+                        << std::endl;
                   else
                     buf << "at top level" << std::endl;
 
                   octave_stdout << buf.str ();
                 }
 
               retval = true;
               break;
diff --git a/libinterp/corefcn/toplev.h b/libinterp/corefcn/toplev.h
--- a/libinterp/corefcn/toplev.h
+++ b/libinterp/corefcn/toplev.h
@@ -155,28 +155,16 @@ public:
   }
 
   // Current column in current function.
   static int current_column (void)
   {
     return instance_ok () ? instance->do_current_column () : -1;
   }
 
-  // Line in user code caller.
-  static int caller_user_code_line (void)
-  {
-    return instance_ok () ? instance->do_caller_user_code_line () : -1;
-  }
-
-  // Column in user code caller.
-  static int caller_user_code_column (void)
-  {
-    return instance_ok () ? instance->do_caller_user_code_column () : -1;
-  }
-
   // Caller function, may be built-in.
   static octave_function *caller (void)
   {
     return instance_ok () ? instance->do_caller () : 0;
   }
 
   static size_t current_frame (void)
   {
@@ -213,20 +201,50 @@ public:
 
   // Function at location N on the call stack (N == 0 is current), may
   // be built-in.
   static octave_function *element (size_t n)
   {
     return instance_ok () ? instance->do_element (n) : 0;
   }
 
-  // First user-defined function on the stack.
-  static octave_user_code *caller_user_code (size_t nskip = 0)
+  // User code caller.
+  static octave_user_code *caller_user_code (void)
+  {
+    return instance_ok () ? instance->do_debug_user_code () : 0;
+  }
+
+  // Line in user code caller.
+  static int caller_user_code_line (void)
+  {
+    return instance_ok () ? instance->do_caller_user_code_line () : -1;
+  }
+
+  // Column in user code caller.
+  static int caller_user_code_column (void)
   {
-    return instance_ok () ? instance->do_caller_user_code (nskip) : 0;
+    return instance_ok () ? instance->do_caller_user_code_column () : -1;
+  }
+
+  // Current function that we are debugging.
+  static octave_user_code *debug_user_code (void)
+  {
+    return instance_ok () ? instance->do_debug_user_code () : 0;
+  }
+
+  // Line number in current function that we are debugging.
+  static int debug_user_code_line (void)
+  {
+    return instance_ok () ? instance->do_debug_user_code_line () : 0;
+  }
+
+  // Column number in current function that we are debugging.
+  static int debug_user_code_column (void)
+  {
+    return instance_ok () ? instance->do_debug_user_code_column () : 0;
   }
 
   // Return TRUE if all elements on the call stack are scripts.
   static bool all_scripts (void)
   {
     return instance_ok () ? instance->do_all_scripts () : false;
   }
 
@@ -352,20 +370,16 @@ private:
   static octave_call_stack *instance;
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
   int do_current_line (void) const;
 
   int do_current_column (void) const;
 
-  int do_caller_user_code_line (void) const;
-
-  int do_caller_user_code_column (void) const;
-
   octave_function *do_caller (void) const
   {
     return curr_frame > 1 ? cs[curr_frame-1].m_fcn : cs[0].m_fcn;
   }
 
   size_t do_current_frame (void) { return curr_frame; }
 
   size_t do_size (void) { return cs.size (); }
@@ -402,16 +416,22 @@ private:
         stack_frame& elt = cs[n];
         retval = elt.m_fcn;
       }
 
     return retval;
   }
 
   octave_user_code *do_caller_user_code (size_t nskip) const;
+  int do_caller_user_code_line (void) const;
+  int do_caller_user_code_column (void) const;
+
+  octave_user_code *do_debug_user_code (void) const;
+  int do_debug_user_code_line (void) const;
+  int do_debug_user_code_column (void) const;
 
   bool do_all_scripts (void) const;
 
   void do_push (octave_function *fcn, symbol_table::scope_id scope,
                 symbol_table::context_id context)
   {
     size_t prev_frame = curr_frame;
     curr_frame = cs.size ();
