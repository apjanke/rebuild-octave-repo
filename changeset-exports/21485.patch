# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1458336154 14400
#      Fri Mar 18 17:22:34 2016 -0400
# Node ID 0dc6140cab3db6effe26fc883d31b1b140210583
# Parent  a6717373a0cd3615c651840050771b8c94f527da
use std::deque instead of Array to hold textscan format elements

* textscan.cc (class textscan_format_list): Use std::deque instead of
Array to hold format elements.

diff --git a/libinterp/corefcn/textscan.cc b/libinterp/corefcn/textscan.cc
--- a/libinterp/corefcn/textscan.cc
+++ b/libinterp/corefcn/textscan.cc
@@ -19,20 +19,19 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #  include <config.h>
 #endif
 
+#include <deque>
 #include <list>
 
-#include "Array.cc"
-
 #include "Cell.h"
 #include "defun.h"
 #include "oct-stream.h"
 #include "ov.h"
 #include "ovl.h"
 #include "textscan.h"
 #include "utils.h"
 
@@ -521,34 +520,34 @@ public:
 
   octave_idx_type num_conversions (void) const { return nconv; }
 
   // The length can be different than the number of conversions.
   // For example, "x %d y %d z" has 2 conversions but the length of
   // the list is 3 because of the characters that appear after the
   // last conversion.
 
-  octave_idx_type numel (void) const { return list.numel (); }
+  size_t numel (void) const { return fmt_elts.size (); }
 
   const textscan_format_elt *first (void)
   {
     curr_idx = 0;
     return current ();
   }
 
   const textscan_format_elt *current (void) const
   {
-    return list.numel () > 0 ? list.elem (curr_idx) : 0;
+    return numel () > 0 ? fmt_elts[curr_idx] : 0;
   }
 
   const textscan_format_elt *next (bool cycle = true)
   {
     curr_idx++;
 
-    if (curr_idx >= list.numel ())
+    if (curr_idx >= numel ())
       {
         if (cycle)
           curr_idx = 0;
         else
           return 0;
       }
 
     return current ();
@@ -574,53 +573,48 @@ private:
 
   // Number of conversions specified by this format string, or -1 if
   // invalid conversions have been found.
   octave_idx_type nconv;
 
   // Index to current element;
   octave_idx_type curr_idx;
 
-  // FIXME -- maybe LIST should be a std::list object?
   // List of format elements.
-  Array<textscan_format_elt*> list;
+  std::deque<textscan_format_elt*> fmt_elts;
 
   // list holding column arrays of types specified by conversions
   std::list<octave_value > output_container;
 
   // Temporary buffer.
   std::ostringstream *buf;
 
   void add_elt_to_list (unsigned int width, int prec, int bitwidth,
                         octave_value val_type, bool discard,
-                        char type, octave_idx_type& num_elts,
+                        char type,
                         const std::string& char_class = std::string ());
 
-  void process_conversion (const std::string& s, size_t& i, size_t n,
-                           octave_idx_type& num_elts);
+  void process_conversion (const std::string& s, size_t& i, size_t n);
 
   int finish_conversion (const std::string& s, size_t& i, size_t n,
                          unsigned int& width, int& prec, int& bitwidth,
                          octave_value& val_type,
-                         bool discard, char& type,
-                         octave_idx_type& num_elts);
+                         bool discard, char& type);
   // No copying!
 
   textscan_format_list (const textscan_format_list&);
 
   textscan_format_list& operator = (const textscan_format_list&);
 };
 
 
 textscan_format_list::textscan_format_list (const std::string& s)
   : set_from_first (false), has_string (false), nconv (0), curr_idx (0),
-    list (dim_vector (16, 1)), buf (0)
+    fmt_elts (), buf (0)
 {
-  octave_idx_type num_elts = 0;
-
   size_t n = s.length ();
 
   size_t i = 0;
 
   unsigned int width = -1;              // Unspecified width = max (except %c)
   int prec = -1;
   int bitwidth = 0;
   bool discard = false;
@@ -629,17 +623,17 @@ textscan_format_list::textscan_format_li
   bool have_more = true;
 
   if (s.length () == 0)
     {
       buf = new std::ostringstream ("%f");
       bitwidth = 64;
       type = 'f';
       add_elt_to_list (width, prec, bitwidth, octave_value (NDArray ()),
-                       discard, type, num_elts);
+                       discard, type);
       have_more = false;
       set_from_first = true;
       nconv = 1;
     }
   else
     {
       set_from_first = false;
 
@@ -649,17 +643,17 @@ textscan_format_list::textscan_format_li
 
           if (! buf)
             buf = new std::ostringstream ();
 
           if (s[i] == '%' && (i+1 == n || s[i+1] != '%'))
             {
               // Process percent-escape conversion type.
 
-              process_conversion (s, i, n, num_elts);
+              process_conversion (s, i, n);
 
               have_more = (buf != 0);
             }
           else if (isspace (s[i]))
             {
               while (++i < n && isspace (s[i]))
                 /* skip whitespace */;
 
@@ -678,87 +672,77 @@ textscan_format_list::textscan_format_li
                      && (s[i] != '%' || (i+1 < n && s[i+1] == '%')))
                 {
                   if (s[i] == '%')      // if double %, skip one
                     i++;
                   *buf << s[i++];
                   width++;
                 }
 
-              add_elt_to_list (width, prec, bitwidth, octave_value (), discard,
-                               type, num_elts);
+              add_elt_to_list (width, prec, bitwidth, octave_value (),
+                               discard, type);
 
               have_more = false;
             }
 
           if (nconv < 0)
             {
               have_more = false;
               break;
             }
         }
     }
 
   if (have_more)
-    add_elt_to_list (width, prec, bitwidth, octave_value (), discard,
-                     type, num_elts);
-
-  list.resize (dim_vector (num_elts, 1));
+    add_elt_to_list (width, prec, bitwidth, octave_value (), discard, type);
 
   delete buf;
 }
 
 textscan_format_list::~textscan_format_list (void)
 {
-  octave_idx_type n = list.numel ();
-
-  for (octave_idx_type i = 0; i < n; i++)
+  size_t n = numel ();
+
+  for (size_t i = 0; i < n; i++)
     {
-      textscan_format_elt *elt = list(i);
+      textscan_format_elt *elt = fmt_elts[i];
       delete elt;
     }
 }
 
 void
 textscan_format_list::add_elt_to_list (unsigned int width, int prec,
                                        int bitwidth, octave_value val_type,
                                        bool discard, char type,
-                                       octave_idx_type& num_elts,
                                        const std::string& char_class)
 {
   if (buf)
     {
       std::string text = buf->str ();
 
       if (! text.empty ())
         {
           textscan_format_elt *elt
             = new textscan_format_elt (text.c_str (), width, prec, bitwidth,
                                        discard, type, char_class);
 
-          if (num_elts == list.numel ())
-            {
-              list.resize (dim_vector (2 * num_elts, 1));
-            }
-
           if (! discard)
-            {
-              output_container.push_back (val_type);
-            }
-          list(num_elts++) = elt;
+            output_container.push_back (val_type);
+
+          fmt_elts.push_back (elt);
         }
 
       delete buf;
       buf = 0;
     }
 }
 
 void
 textscan_format_list::process_conversion (const std::string& s, size_t& i,
-                                          size_t n, octave_idx_type& num_elts)
+                                          size_t n)
 {
   unsigned width = 0;
   int prec = -1;
   int bitwidth = 0;
   bool discard = false;
   octave_value val_type;
   char type = '\0';
 
@@ -913,17 +897,17 @@ textscan_format_list::process_conversion
               {
                 if (type == 'c')        // %c defaults to one character
                   width = 1;
                 else
                   width = static_cast<unsigned int> (-1); // others: unlimited
               }
 
             if (finish_conversion (s, i, n, width, prec, bitwidth, val_type,
-                                   discard, type, num_elts) == 0)
+                                   discard, type) == 0)
               return;
           }
           break;
 
         default:
           error ("textscan: '%%%c' is not a valid format specifier", s[i]);
         }
 
@@ -1031,17 +1015,17 @@ textscan_char_class (const std::string& 
   return retval;
 }
 
 int
 textscan_format_list::finish_conversion (const std::string& s, size_t& i,
                                          size_t n, unsigned int& width,
                                          int& prec, int& bitwidth,
                                          octave_value& val_type, bool discard,
-                                         char& type, octave_idx_type& num_elts)
+                                         char& type)
 {
   int retval = 0;
 
   std::string char_class;
 
   size_t beg_idx = std::string::npos;
   size_t end_idx = std::string::npos;
 
@@ -1087,30 +1071,30 @@ textscan_format_list::finish_conversion 
 
   if (nconv >= 0)
     {
       if (beg_idx != std::string::npos && end_idx != std::string::npos)
         char_class = textscan_char_class (s.substr (beg_idx,
                                                     end_idx - beg_idx + 1));
 
       add_elt_to_list (width, prec, bitwidth, val_type, discard, type,
-                       num_elts, char_class);
+                       char_class);
     }
 
   return retval;
 }
 
 void
 textscan_format_list::printme (void) const
 {
-  octave_idx_type n = list.numel ();
-
-  for (octave_idx_type i = 0; i < n; i++)
+  size_t n = numel ();
+
+  for (size_t i = 0; i < n; i++)
     {
-      textscan_format_elt *elt = list(i);
+      textscan_format_elt *elt = fmt_elts[i];
 
       std::cerr
         << "width:      " << elt->width << "\n"
         << "digits      " << elt->prec << "\n"
         << "bitwidth:   " << elt->bitwidth << "\n"
         << "discard:    " << elt->discard << "\n"
         << "type:       ";
 
@@ -1154,17 +1138,17 @@ textscan_format_list::read_first_row (de
 
   // read line, creating output_container as we go
   while (! ds.eof ())
     {
       bool already_skipped_delim = false;
       ts.skip_whitespace (ds);
       ds.progress_benchmark ();
       bool progress = false;
-      ts.scan_complex (ds, *list(0), val);
+      ts.scan_complex (ds, *fmt_elts[0], val);
       if (ds.fail ())
         {
           ds.clear (ds.rdstate () & ~std::ios::failbit);
 
           if (ds.eof ())
             break;
 
           // If we don't continue after a conversion error, then
@@ -1212,20 +1196,19 @@ textscan_format_list::read_first_row (de
       if (! progress && ds.no_progress ())
         break;
 
       nconv++;
     }
 
   output_container.pop_front (); // discard empty element from constructor
 
-  //Create  fmt  now that the size is known
-  list.resize (dim_vector (nconv, 1));
+  // Create fmt_list now that the size is known
   for (octave_idx_type i = 1; i < nconv; i++)
-    list(i) = new textscan_format_elt (*list(0));
+    fmt_elts.push_back (new textscan_format_elt (*fmt_elts[0]));
 
   return retval;             // May have returned 4 above.
 }
 
 // Perform actual textscan: read data from stream, and create cell array.
 
 octave_value
 textscan::scan (std::istream *isp, const octave_value_list& args)
