# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1267593762 18000
#      Wed Mar 03 00:22:42 2010 -0500
# Node ID eb9b2674501eefeea61f08c68c655c23fe385df4
# Parent  84e2263807693a836e185dffe0ae32b307a88224
cquit.c: yes, we can assume POSIX signals

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,13 @@
+2010-03-02  John W. Eaton  <jwe@octave.org>
+
+	* misc/cquit.c (octave_restore_signal_mask): Assume we have
+	POSIX signal handling.
+
 2010-02-28  Jaroslav Hajek  <highegg@gmail.com>
 
 	* misc/lo-error.c (liboctave_fatal_with_id,
 	set_liboctave_error_with_id_handler): New functions.
 	(current_liboctave_error_with_id_handler): New variable.
 	* misc/lo-error.h: Declare them.
 	(liboctave_error_with_id_handler): New typedef.
 
diff --git a/libcruft/misc/cquit.c b/libcruft/misc/cquit.c
--- a/libcruft/misc/cquit.c
+++ b/libcruft/misc/cquit.c
@@ -226,34 +226,28 @@ octave_jump_to_enclosing_context (void)
 /* Allow us to save the signal mask and then restore it to the most
    recently saved value.  This is necessary when using the POSIX
    signal handling interface on some systems calling longjmp out of
    the signal handler to get to the top level on an interrupt doesn't
    restore the original signal mask.  Alternatively, we could use
    sigsetjmp/siglongjmp, but saving and restoring the signal mask
    ourselves works ok and seems simpler just now.  */
 
-#if defined (HAVE_POSIX_SIGNALS)
 static sigset_t octave_signal_mask;
-#endif
 
 void
 octave_save_signal_mask (void)
 {
-#if defined (HAVE_POSIX_SIGNALS)
   sigprocmask (0, 0, &octave_signal_mask);
-#endif
 }
 
 void
 octave_restore_signal_mask (void)
 {
-#if defined (HAVE_POSIX_SIGNALS)
   sigprocmask (SIG_SETMASK, &octave_signal_mask, 0);
-#endif
 }
 
 sig_atomic_t octave_interrupt_immediately = 0;
 
 sig_atomic_t octave_interrupt_state = 0;
 
 sig_atomic_t octave_exception_state = 0;
 
