# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1510184709 18000
#      Wed Nov 08 18:45:09 2017 -0500
# Node ID 2391bd89adf81a0839cb3192695662df305221ae
# Parent  81d723f0cdfe414e6a1c818d82fe63b6f551c26a
fix dasrt argument parsing for constraint function

* dasrt.cc (Fdasrt): Correct argument parsing to correctly allow
constraint function to be skipped.  Detect too few arguments properly.

diff --git a/libinterp/corefcn/dasrt.cc b/libinterp/corefcn/dasrt.cc
--- a/libinterp/corefcn/dasrt.cc
+++ b/libinterp/corefcn/dasrt.cc
@@ -460,33 +460,47 @@ parameters for @code{dasrt}.
 
   if (! dasrt_f)
     return retval;
 
   DAERTFunc func (dasrt_user_f);
 
   argp++;
 
-  if (args(1).is_function_handle () || args(1).is_inline_function ())
-    dasrt_cf = args(1).function_value ();
+  if (args(1).isempty () && args(1).is_double_type ())
+    {
+      // Allow [] to skip constraint function.  This feature is
+      // undocumented now, but was supported by earlier versions.
+
+      argp++;
+    }
   else
     {
-      fcn_name = unique_symbol_name ("__dasrt_constraint_fcn__");
-      fname = "function g_out = ";
-      fname.append (fcn_name);
-      fname.append (" (x, t) g_out = ");
-      dasrt_cf = extract_function (f_arg, "dasrt", fcn_name, fname,
-                                   "; endfunction");
+      if (args(1).is_function_handle () || args(1).is_inline_function ())
+        dasrt_cf = args(1).function_value ();
+      else if (args(1).is_string ())
+        {
+          fcn_name = unique_symbol_name ("__dasrt_constraint_fcn__");
+          fname = "function g_out = ";
+          fname.append (fcn_name);
+          fname.append (" (x, t) g_out = ");
+          dasrt_cf = extract_function (args(1), "dasrt", fcn_name, fname,
+                                       "; endfunction");
+        }
+
+      if (dasrt_cf)
+        {
+          argp++;
+
+          func.set_constraint_function (dasrt_user_cf);
+        }
     }
 
-  if (! dasrt_cf)
-    error ("dasrt: invalid constraint function G");
-
-  argp++;
-  func.set_constraint_function (dasrt_user_cf);
+  if (argp + 3 > nargin)
+    print_usage ();
 
   ColumnVector state = args(argp++).xvector_value ("dasrt: initial state X_0 must be a vector");
 
   ColumnVector stateprime = args(argp++).xvector_value ("dasrt: initial derivatives XDOT_0 must be a vector");
 
   ColumnVector out_times = args(argp++).xvector_value ("dasrt: output time variable T must be a vector");
 
   double tzero = out_times (0);
