# HG changeset patch
# User jwe
# Date 1077143517 0
#      Wed Feb 18 22:31:57 2004 +0000
# Node ID 82a558043db9a38e8cce5b3407da04896f74c42a
# Parent  02c748eb2ddc76ee6ed8fb2d098cab32b963bead
[project @ 2004-02-18 22:31:57 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,14 @@
 2004-02-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* oct-fftw.cc (octave_fftw_planner::create_plan):
+	Cast IN and OUT	args to ptrdiff_t instead of long before masking.
+	From Paul Kienzle <pkienzle@users.sf.net>.
+
 	* Array.cc (Array<T>::insertN (const Array<T>&, int, int)):
 	Rename from Array<T>::insert.
 	(Array<T>::insert2 (const Array<T>&, int, int)):
 	Reinstate old Array<T>::insert function under this name.
 	(Array<T>::insert (const Array<T>&, int, int)):
 	New function.  Dispatch to insert2 or insertN as appropriate.
 
 2004-02-17  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/liboctave/oct-fftw.cc b/liboctave/oct-fftw.cc
--- a/liboctave/oct-fftw.cc
+++ b/liboctave/oct-fftw.cc
@@ -105,18 +105,18 @@ fftw_plan
 octave_fftw_planner::create_plan (int dir, const int rank,
 				  const dim_vector dims, int howmany,
 				  int stride, int dist, 
 				  const Complex *in, Complex *out)
 {
   int which = (dir == FFTW_FORWARD) ? 0 : 1;
   fftw_plan *cur_plan_p = &plan[which];
   bool create_new_plan = false;
-  char in_align = (reinterpret_cast<long> (in)) & 0xF;
-  char out_align = (reinterpret_cast<long> (out)) & 0xF;
+  char in_align = (reinterpret_cast<ptrdiff_t> (in)) & 0xF;
+  char out_align = (reinterpret_cast<ptrdiff_t> (out)) & 0xF;
 
   if (plan[which] == 0 || d[which] != dist || s[which] != stride
       || r[which] != rank || h[which] != howmany
       || ialign[which] != in_align || oalign[which] != out_align)
     create_new_plan = true;
   else
     // We still might not have the same shape of array
     for (int i = 0; i < rank; i++)
@@ -159,18 +159,18 @@ octave_fftw_planner::create_plan (int di
  
 fftw_plan
 octave_fftw_planner::create_plan (const int rank, const dim_vector dims, 
 				  int howmany, int stride, int dist, 
 				  const double *in, Complex *out)
 {
   fftw_plan *cur_plan_p = &rplan;
   bool create_new_plan = false;
-  char in_align = (reinterpret_cast<long> (in)) & 0xF;
-  char out_align = (reinterpret_cast<long> (out)) & 0xF;
+  char in_align = (reinterpret_cast<ptrdiff_t> (in)) & 0xF;
+  char out_align = (reinterpret_cast<ptrdiff_t> (out)) & 0xF;
 
   if (rplan == 0 || rd != dist || rs != stride || rr != rank
       || rh != howmany || rialign != in_align || roalign != out_align)
     create_new_plan = true;
   else
     // We still might not have the same shape of array
     for (int i = 0; i < rank; i++)
       if (dims(i) != rn(i))
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,19 @@
 2004-02-18  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* load-save.cc (Voctave_core_format): New static_variable.
+	(octave_core_format): New function.
+	(symbols_of_load_save): Add DEFVAR for octave_core_format.
+	(get_save_format): Rename from get_default_save_format.
+	Pass name of format as arg.  New optional arg, default_format.
+	Change all uses.
+	(save_user_variables): Use pass Voctave_core_format to
+	get_save_format here.  Pass LS_BINARY as default_format.
+
 	* sighandlers.cc (my_friendly_exit): New optional arg, save_vars.
 	Only call save_user_variables if save_vars is true.
 	(sigint_handler): If interactive, offer to abort and save
 	workspace after three consecutive interrupts.
 	(sigint_handler, sigpipe_handler, sigfpe_handler):
 	Increment octave_interrupt_handler instead of setting it to 1.
 
 2004-02-16  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -82,16 +82,20 @@ Software Foundation, 59 Temple Place - S
 
 // Write octave-core file if Octave crashes or is killed by a signal.
 static bool Vcrash_dumps_octave_core;
 
 // The default output format.  May be one of "binary", "text",
 // "mat-binary", or "hdf5".
 static std::string Vdefault_save_format;
 
+// The output format for octave-core files.  May be one of "binary",
+// "text", "mat-binary", or "hdf5".
+static std::string Voctave_core_format;
+
 // The format string for the comment line at the top of text-format
 // save files.  Passed to strftime.  Should begin with `#' and contain
 // no newline characters.
 static std::string Vsave_header_format_string;
 
 // XXX FIXME XXX -- shouldn't this be implemented in terms of other
 // functions that are already available?
 
@@ -905,21 +909,20 @@ save_vars (std::ostream& os, const std::
 	    break;
 	}
     }
 
   return saved;
 }
 
 static load_save_format
-get_default_save_format (void)
+get_save_format (const std::string& fmt,
+		 load_save_format fallback_format = LS_ASCII)
 {
-  load_save_format retval = LS_ASCII;
-
-  std::string fmt = Vdefault_save_format;
+  load_save_format retval = fallback_format;
 
   if (fmt == "binary")
     retval = LS_BINARY;
   else if (fmt == "mat-binary" || fmt =="mat_binary")
     retval = LS_MAT5_BINARY;
   else if (fmt == "mat4-binary" || fmt =="mat4_binary")
     retval = LS_MAT_BINARY;
 #ifdef HAVE_HDF5
@@ -1041,17 +1044,18 @@ save_user_variables (void)
   if (Vcrash_dumps_octave_core)
     {
       // XXX FIXME XXX -- should choose better file name?
 
       const char *fname = "octave-core";
 
       message (0, "attempting to save variables to `%s'...", fname);
 
-      load_save_format format = get_default_save_format ();
+      load_save_format format
+	= get_save_format (Voctave_core_format, LS_BINARY);
 
       std::ios::openmode mode = std::ios::out|std::ios::trunc;
       if (format == LS_BINARY ||
 	  format == LS_MAT_BINARY ||
 	  format == LS_MAT5_BINARY)
 	mode |= std::ios::binary;
 
 #ifdef HAVE_HDF5
@@ -1181,17 +1185,17 @@ the file @file{data} in Octave's binary 
 
   // Here is where we would get the default save format if it were
   // stored in a user preference variable.
 
   bool save_builtins = false;
 
   bool save_as_floats = false;
 
-  load_save_format format = get_default_save_format ();
+  load_save_format format = get_save_format (Vdefault_save_format);
 
   bool append = false;
 
   int i;
   for (i = 1; i < argc; i++)
     {
       if (argv[i] == "-append")
 	{
@@ -1364,16 +1368,34 @@ default_save_format (void)
       status = -1;
     }
   else
     Vdefault_save_format = s;
 
   return status;
 }
 
+static int
+octave_core_format (void)
+{
+  int status = 0;
+
+  std::string s = builtin_string_variable ("octave_core_format");
+
+  if (s.empty ())
+    {
+      gripe_invalid_value_specified ("octave_core_format");
+      status = -1;
+    }
+  else
+    Voctave_core_format = s;
+
+  return status;
+}
+
 static std::string
 default_save_header_format (void)
 {
   return
     std::string ("# Created by Octave " OCTAVE_VERSION
 		 ", %a %b %d %H:%M:%S %Y %Z <")
     + octave_env::get_user_name ()
     + std::string ("@")
@@ -1412,16 +1434,28 @@ hangup, terminate or similar signal.  Th
 
   DEFVAR (default_save_format, "ascii", default_save_format,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} default_save_format\n\
 This variable specifies the default format for the @code{save} command.\n\
 It should have one of the following values: @code{\"ascii\"},\n\
 @code{\"binary\"}, @code{float-binary}, or @code{\"mat-binary\"}.  The\n\
 initial default save format is Octave's text format.\n\
+@seealso{octave_core_format}\n\
+@end defvr");
+
+  DEFVAR (octave_core_format, "binary", octave_core_format,
+    "-*- texinfo -*-\n\
+@defvr {Built-in Variable} octave_core_format\n\
+If Octave aborts, it attempts to save the contents of the top-level\n\
+workspace in a file using this format.  The value of\n\
+@code{octave_core_format} should have one of the following values:\n\
+@code{\"ascii\"}, @code{\"binary\"}, @code{float-binary}, or\n\
+@code{\"mat-binary\"}.  The default value is Octave's binary format.\n\
+@seealso{default_save_format}\n\
 @end defvr");
 
   DEFVAR (save_header_format_string, default_save_header_format (),
 	  save_header_format_string,
     "-*- texinfo -*-\n\
 @defvr {Built-in Variable} save_header_format_string\n\
 This variable specifies the the format string for the comment line\n\
 that is written at the beginning of text-format data files saved by\n\
