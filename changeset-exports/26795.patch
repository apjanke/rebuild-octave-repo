# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1551126022 0
#      Mon Feb 25 20:20:22 2019 +0000
# Node ID 80f9bc7cdf74c6f31266d1d3d2d345b30c17d8dc
# Parent  287eba9ed14ba1901e99334f7b304638ae52c5fd
new functions for checking whether constructor or method is executing

* call-stack.h, call-stack.cc (call_stack::isclass_method_executing,
call_stack::isclass_constructor_executing): New functions.

diff --git a/libinterp/corefcn/call-stack.cc b/libinterp/corefcn/call-stack.cc
--- a/libinterp/corefcn/call-stack.cc
+++ b/libinterp/corefcn/call-stack.cc
@@ -349,16 +349,44 @@ namespace octave
                 break;
               }
           }
       }
 
     return retval;
   }
 
+  bool call_stack::is_class_method_executing (std::string& dispatch_class) const
+  {
+    dispatch_class = "";
+
+    octave_function *f = current ();
+
+    bool retval = (f && f->is_class_method ());
+
+    if (retval)
+      dispatch_class = f->dispatch_class ();
+
+    return retval;
+  }
+
+  bool call_stack::is_class_constructor_executing (std::string& dispatch_class) const
+  {
+    dispatch_class = "";
+
+    octave_function *f = current ();
+
+    bool retval = (f && f->is_class_constructor ());
+
+    if (retval)
+      dispatch_class = f->dispatch_class ();
+
+    return retval;
+  }
+
   bool call_stack::all_scripts (void) const
   {
     bool retval = true;
 
     auto p = m_cs.cend ();
 
     while (p != m_cs.cbegin ())
       {
diff --git a/libinterp/corefcn/call-stack.h b/libinterp/corefcn/call-stack.h
--- a/libinterp/corefcn/call-stack.h
+++ b/libinterp/corefcn/call-stack.h
@@ -149,16 +149,20 @@ namespace octave
     octave_user_code * debug_user_code (void) const;
 
     // Line number in current function that we are debugging.
     int debug_user_code_line (void) const;
 
     // Column number in current function that we are debugging.
     int debug_user_code_column (void) const;
 
+    bool is_class_method_executing (std::string& dispatch_class) const;
+
+    bool is_class_constructor_executing (std::string& dispatch_class) const;
+
     // Return TRUE if all elements on the call stack are scripts.
     bool all_scripts (void) const;
 
     stack_frame * get_static_link (size_t prev_frame) const;
 
     void push (const symbol_scope& scope);
 
     void push (octave_user_function *fcn, unwind_protect *up_frame);
