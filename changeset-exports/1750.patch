# HG changeset patch
# User jwe
# Date 821525467 0
#      Sat Jan 13 09:31:07 1996 +0000
# Node ID fd0d124932234f9f5c0bcd3d1b31d704cadc3697
# Parent  c7f5599eb17748468d920a3bc8149e36ad9167e4
[project @ 1996-01-13 09:31:07 by jwe]

diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -48,26 +48,25 @@ Free Software Foundation, Inc.
 
 #include <strstream.h>
 
 #include "defun.h"
 #include "dirfns.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
-#include "toplev.h"
+#include "oct-obj.h"
 #include "pager.h"
 #include "pathlen.h"
 #include "procstream.h"
+#include "pt-plot.h"
 #include "statdefs.h"
 #include "sysdep.h"
 #include "sysdir.h"
-#include "pt-const.h"
-#include "oct-obj.h"
-#include "pt-plot.h"
+#include "toplev.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 
 // Temp storage for a path.
 static char tdir[MAXPATHLEN];
 
 // Non-zero means follow symbolic links that point to directories just
@@ -364,24 +363,20 @@ if no arguments are given, the current d
 users home directory")
 {
   Octave_object retval;
 
   DEFINE_ARGV("cd");
 
   if (argc > 1)
     {
-      static char *dirname = 0;
+      string dirname = oct_tilde_expand (argv[1]);
 
-      if (dirname)
-	free (dirname);
-
-      dirname = tilde_expand (argv[1]);
-
-      if (dirname && ! octave_change_to_directory (dirname))
+      if (dirname.length () > 0
+	  && ! octave_change_to_directory (dirname.c_str ()))
 	{
 	  DELETE_ARGV;
 	  return retval;
 	}
     }
   else
     {
       if (! home_directory || ! octave_change_to_directory (home_directory))
@@ -412,21 +407,17 @@ print a directory listing")
   Octave_object retval;
 
   DEFINE_ARGV("ls");
 
   ostrstream ls_buf;
 
   ls_buf << "ls -C ";
   for (int i = 1; i < argc; i++)
-    {
-      char *tmp = tilde_expand (argv[i]);
-      ls_buf << tmp << " ";
-      free (tmp);
-    }
+    ls_buf << oct_tilde_expand (argv[i]) << " ";
 
   ls_buf << ends;
   char *ls_command = ls_buf.str ();
 
   iprocstream *cmd = new iprocstream (ls_command);
 
   delete [] ls_command;
 
@@ -509,21 +500,19 @@ is printed.")
 
       if (error_state)
 	{
 	  status = -1;
 	  gripe_wrong_type_arg ("readdir", args(0));
 	}
       else
 	{
-	  char *tmp = tilde_expand (dirname);
+	  string tmp = oct_tilde_expand (dirname);
 
-	  DIR *dir = opendir (tmp);
-
-	  free (tmp);
+	  DIR *dir = opendir (tmp.c_str ());
 
 	  if (dir)
 	    {
 	      int count = 0;
 	      int max_len = 0;
 
 	      struct dirent *dir_entry;
 
@@ -596,21 +585,19 @@ otherwise prints an error message.")
     {
       string tstr = args(0).string_value ();
       const char *dirname = tstr.c_str ();
 
       if (error_state)
 	gripe_wrong_type_arg ("mkdir", args(0));
       else
 	{
-	  char *tmp = tilde_expand (dirname);
+	  string tmp = oct_tilde_expand (dirname);
 
-	  int mkdir_retval = mkdir (tmp, 0777);
-
-	  free (tmp);
+	  int mkdir_retval = mkdir (tmp.c_str (), 0777);
 
 	  if (mkdir_retval < 0)
 	    {
 	      status = -1;
 	      error ("%s", strerror (errno));
 	    }
 	}
     }
@@ -637,21 +624,19 @@ otherwise prints an error message.")
     {
       string tstr = args(0).string_value ();
       const char *dirname = tstr.c_str ();
 
       if (error_state)
 	gripe_wrong_type_arg ("rmdir", args(0));
       else
 	{
-	  char *tmp = tilde_expand (dirname);
+	  string tmp = oct_tilde_expand (dirname);
 
-	  int rmdir_retval = rmdir (tmp);
-
-	  free (tmp);
+	  int rmdir_retval = rmdir (tmp.c_str ());
 
 	  if (rmdir_retval < 0)
 	    {
 	      status = -1;
 	      error ("%s", strerror (errno));
 	    }
 	}
     }
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -59,22 +59,21 @@ Software Foundation, 59 Temple Place - S
 #include "error.h"
 #include "file-info.h"
 #include "file-io.h"
 #include "help.h"
 #include "input.h"
 #include "mappers.h"
 #include "oct-map.h"
 #include "oct-hist.h"
+#include "oct-obj.h"
 #include "pager.h"
 #include "statdefs.h"
 #include "sysdep.h"
 #include "syswait.h"
-#include "pt-const.h"
-#include "oct-obj.h"
 #include "utils.h"
 #include "variables.h"
 
 extern "C" void mode_string ();
 
 // keeps a count of args sent to printf or scanf
 static int fmt_arg_count = 0;
 
@@ -2481,31 +2480,23 @@ DEFUN ("stat", Fstat, Sstat, 10,
     blocks  : number of blocks allocated for file\n\
 \n\
   If the file does not exist, -1 is returned.")
 {
   Octave_object retval;
 
   if (args.length () == 1)
     {
-      string tstr = args(0).string_value ();
-      const char *name = tstr.c_str ();
-
-      static char *fname = 0;
-
-      if (fname)
-	free (fname);
-
-      fname = tilde_expand (name);
+      string fname = oct_tilde_expand (args(0).string_value ());
 
       if (! error_state)
 	{
 	  struct stat buf;
 
-	  if (stat (fname, &buf) < 0)
+	  if (stat (fname.c_str (), &buf) < 0)
 	    retval = -1.0;
 	  else
 	    retval = tree_constant (mk_stat_map (buf));
 	}
     }
   else
     print_usage ("stat");
 
@@ -2517,31 +2508,23 @@ DEFUN ("lstat", Flstat, Slstat, 10,
 \n\
   Like stat (NAME), but if NAME refers to a symbolic link, returns\n\
   information about the link itself, not the file that it points to.")
 {
   Octave_object retval;
 
   if (args.length () == 1)
     {
-      string tstr = args(0).string_value ();
-      const char *name = tstr.c_str ();
-
-      static char *fname = 0;
-
-      if (fname)
-	free (fname);
-
-      fname = tilde_expand (name);
+      string fname = oct_tilde_expand (args(0).string_value ());
 
       if (! error_state)
 	{
 	  struct stat buf;
 
-	  if (lstat (fname, &buf) < 0)
+	  if (lstat (fname.c_str (), &buf) < 0)
 	    retval = -1.0;
 	  else
 	    retval = tree_constant (mk_stat_map (buf));
 	}
     }
   else
     print_usage ("stat");
 
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -613,25 +613,25 @@ octave_read (char *buf, int max_size)
 
   return status;
 }
 
 // Fix things up so that input can come from file `name', printing a
 // warning if the file doesn't exist.
 
 FILE *
-get_input_from_file (const char *name, int warn)
+get_input_from_file (const string& name, int warn)
 {
   FILE *instream = 0;
 
-  if (name && *name)
-    instream = fopen (name, "r");
+  if (name.length () > 0)
+    instream = fopen (name.c_str (), "r");
 
   if (! instream && warn)
-    warning ("%s: no such file or directory", name);
+    warning ("%s: no such file or directory", name.c_str ());
 
   if (reading_fcn_file || reading_script_file)
     ff_instream = instream;
   else
     rl_instream = instream;
 
   return instream;
 }
diff --git a/src/input.h b/src/input.h
--- a/src/input.h
+++ b/src/input.h
@@ -23,18 +23,20 @@ Software Foundation, 59 Temple Place - S
 
 // Use the GNU readline library for command line editing and hisory.
 
 #if !defined (octave_input_h)
 #define octave_input_h 1
 
 #include <cstdio>
 
+#include <string>
+
 extern int octave_read (char *buf, int max_size);
-extern FILE *get_input_from_file (const char *name, int warn = 1);
+extern FILE *get_input_from_file (const string& name, int warn = 1);
 extern FILE *get_input_from_stdin (void);
 extern void initialize_readline (void);
 
 // Global pointer for eval().
 extern const char *current_eval_string;
 
 // Nonzero means get input from current_eval_string.
 extern int get_input_from_eval_string;
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -39,22 +39,21 @@ Software Foundation, 59 Temple Place - S
 #include "fnmatch.h"
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "load-save.h"
 #include "mappers.h"
+#include "oct-obj.h"
 #include "pager.h"
+#include "pt-exp.h"
 #include "symtab.h"
 #include "sysdep.h"
-#include "pt-const.h"
-#include "oct-obj.h"
-#include "pt-exp.h"
 #include "unwind-prot.h"
 #include "user-prefs.h"
 #include "utils.h"
 
 #if CHAR_BIT != 8
 LOSE! LOSE!
 #endif
 
@@ -2019,25 +2018,25 @@ read_binary_file_header (istream& is, in
         error ("load: unrecognized binary format!");
       return -1;
     }
 
   return 0;
 }
 
 static load_save_format
-get_file_format (const char *fname, const char *orig_fname)
+get_file_format (const string& fname, const string& orig_fname)
 {
   load_save_format retval = LS_UNKNOWN;
 
-  ifstream file (fname);
+  ifstream file (fname.c_str ());
 
   if (! file)
     {
-      error ("load: couldn't open input file `%s'", orig_fname);
+      error ("load: couldn't open input file `%s'", orig_fname.c_str ());
       return retval;
     }
 
   int swap;
   floating_point_format flt_fmt = OCTAVE_UNKNOWN_FLT_FMT;
 
   if (read_binary_file_header (file, swap, flt_fmt, 1) == 0)
     retval = LS_BINARY;
@@ -2063,17 +2062,18 @@ get_file_format (const char *fname, cons
 	      delete [] tmp;
 	    }
 	}
     }
 
   file.close ();
 
   if (retval == LS_UNKNOWN)
-    error ("load: unable to determine file format for `%s'", orig_fname);
+    error ("load: unable to determine file format for `%s'",
+	   orig_fname.c_str ());
 
   return retval;
 }
 
 static Octave_object
 do_load (istream& stream, const char *orig_fname, int force,
 	 load_save_format format, floating_point_format flt_fmt,
 	 int list_only, int swap, int verbose, char **argv,
@@ -2281,36 +2281,31 @@ found in the file will be replaced with 
 			    list_only, swap, verbose, argv, argc,
 			    nargout);
 	}
       else
 	error ("load: must specify file format if reading from stdin");
     }
   else
     {
-      static char *fname = 0;
-
-      if (fname)
-	free (fname);
-
-      fname = tilde_expand (*argv);
+      string fname = oct_tilde_expand (*argv);
 
       if (format == LS_UNKNOWN)
 	format = get_file_format (fname, orig_fname);
 
       if (format != LS_UNKNOWN)
 	{
 	  argv++;
 	  argc--;
 
 	  unsigned mode = ios::in;
 	  if (format == LS_BINARY || format == LS_MAT_BINARY)
 	    mode |= ios::bin;
 
-	  ifstream file (fname, mode);
+	  ifstream file (fname.c_str (), mode);
 
 	  if (file)
 	    {
 	      if (format == LS_BINARY)
 		{
 		  if (read_binary_file_header (file, swap, flt_fmt) < 0)
 		    {
 		      file.close ();
@@ -3106,31 +3101,26 @@ save variables in a file")
   else if (argc == 1 && glob_pattern_p (*argv)) // Guard against things
     {						// like `save a*',
       print_usage ("save");			// which are probably
       DELETE_ARGV;				// mistakes...
       return retval;
     }
   else
     {
-      static char *fname = 0;
-
-      if (fname)
-	free (fname);
-
-      fname = tilde_expand (*argv);
+      string fname = oct_tilde_expand (*argv);
 
       argc--;
       argv++;
 
       unsigned mode = ios::out|ios::trunc;
       if (format == LS_BINARY || format == LS_MAT_BINARY)
 	mode |= ios::bin;
 
-      ofstream file (fname, mode);
+      ofstream file (fname.c_str (), mode);
 
       if (file)
 	{
 	  save_vars (argv, argc, file, save_builtins, format,
 		     save_as_floats);
 	}
       else
 	{
diff --git a/src/oct-hist.cc b/src/oct-hist.cc
--- a/src/oct-hist.cc
+++ b/src/oct-hist.cc
@@ -31,39 +31,40 @@ Software Foundation, Inc.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <csignal>
 #include <cstdlib>
 #include <cstring>
 
+#include <string>
+
 #include <fstream.h>
 #include <strstream.h>
 
 #ifdef HAVE_UNISTD_H
 #include <sys/types.h>
 #include <unistd.h>
 #endif
 
 #include <fcntl.h>
 
 #include <readline/history.h>
 
 #include "defun.h"
 #include "error.h"
 #include "input.h"
 #include "oct-hist.h"
-#include "toplev.h"
+#include "oct-obj.h"
 #include "pager.h"
 #include "sighandlers.h"
 #include "statdefs.h"
 #include "sysdep.h"
-#include "pt-const.h"
-#include "oct-obj.h"
+#include "toplev.h"
 #include "unwind-prot.h"
 #include "user-prefs.h"
 #include "utils.h"
 
 // Nonzero means input is coming from temporary history file.
 int input_from_tmp_history_file = 0;
 
 // The number of hisory lines we read from the history file.
@@ -111,44 +112,34 @@ default_history_file (void)
   return file;
 }
 
 // Prime the history list.
 
 void
 initialize_history (void)
 {
-  static char *file = 0;
+  string file = oct_tilde_expand (user_pref.history_file);
 
-  if (file)
-    free (file);
-
-  file = tilde_expand (user_pref.history_file);
-
-  read_history (file);
+  read_history (file.c_str ());
 
   using_history ();
 
   history_lines_in_file = where_history ();
 }
 
 void
 clean_up_history (void)
 {
-  static char *file = 0;
-
-  if (file)
-    free (file);
-
   stifle_history (user_pref.history_size);
 
-  file = tilde_expand (user_pref.history_file);
+  string file = oct_tilde_expand (user_pref.history_file);
 
   if (user_pref.saving_history)
-    write_history (file);
+    write_history (file.c_str ());
 }
 
 void
 maybe_save_history (const char *s)
 {
   if (user_pref.saving_history && ! input_from_startup_file)
     {
       add_history (s);
@@ -172,75 +163,72 @@ do_history (int argc, char **argv)
   while (--argc > 0)
     {
       argv++;
 
       if (*argv[0] == '-' && strlen (*argv) == 2
 	  && ((*argv)[1] == 'r' || (*argv)[1] == 'w'
 	      || (*argv)[1] == 'a' || (*argv)[1] == 'n'))
 	{
-	  static char *file = 0;
 	  int result = 0;
 
-	  if (file)
-	    free (file);
+	  string file;
 
 	  if (argc > 1)
-	    file = tilde_expand (*(argv+1));
+	    file = oct_tilde_expand (*(argv+1));
 	  else
-	    file = tilde_expand (user_pref.history_file);
+	    file = oct_tilde_expand (user_pref.history_file);
 
 	  switch ((*argv)[1])
 	    {
 	    case 'a':		// Append `new' lines to file.
 	      {
 		if (history_lines_this_session)
 		  {
 		    if (history_lines_this_session < where_history ())
 		      {
-			// If the filename was supplied, then create
-			// it if it doesn't already exist.
+			// Create file if it doesn't already exist.
 
-			if (file)
-			  {
-			    struct stat buf;
+			struct stat buf;
 
-			    if (stat (file, &buf) == -1)
-			      {
-				int tem;
+			if (stat (file.c_str (), &buf) == -1)
+			  {
+			    int tem;
 
-				tem = open (file, O_CREAT, 0666);
-				close (tem);
-			      }
+			    tem = open (file.c_str (), O_CREAT, 0666);
+			    close (tem);
 			  }
 
-			result =
-			  append_history (history_lines_this_session, file);
+			result
+			  = append_history (history_lines_this_session,
+					    file.c_str ());
+
 			history_lines_in_file += history_lines_this_session;
 			history_lines_this_session = 0;
 		      }
 		  }
 	      }
 	      break;
 
 	    case 'w':		// Write entire history.
-	      result = write_history (file);
+	      result = write_history (file.c_str ());
 	      break;
 
 	    case 'r':		// Read entire file.
-	      result = read_history (file);
+	      result = read_history (file.c_str ());
 	      break;
 
 	    case 'n':		// Read `new' history from file.
 
 	      // Read all of the lines in the file that we haven't
 	      // already read.
 
 	      using_history ();
-	      result = read_history_range (file, history_lines_in_file, -1);
+	      result = read_history_range (file.c_str (),
+					   history_lines_in_file, -1);
 	      using_history ();
 	      history_lines_in_file = where_history ();
 	      break;
 	    }
 	  return;
 	}
       else if (strcmp (*argv, "-q") == 0)
 	numbered_output = 0;
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -47,38 +47,37 @@ Software Foundation, 59 Temple Place - S
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "load-save.h"
 #include "mappers.h"
 #include "oct-obj.h"
-#include "sysdep.h"
 #include "pt-cmd.h"
-#include "pt-const.h"
 #include "pt-exp.h"
 #include "pt-plot.h"
+#include "sysdep.h"
 #include "user-prefs.h"
 #include "utils.h"
 
 // The number of lines we've plotted so far.
 static int plot_line_count = 0;
 
 // Is this a parametric plot?  Makes a difference for 3D plotting.
 static int parametric_plot = 0;
 
 // The gnuplot terminal type.
 static char *gnuplot_terminal_type = 0;
 
 // Should the graph window be cleared before plotting the next line?
 static int clear_before_plotting = 1;
 
 // List of files to delete when we exit or crash.
-static SLStack <char *> tmp_files;
+static SLStack <string> tmp_files;
 
 // Pipe to gnuplot.
 static oprocstream *plot_stream = 0;
 
 // Use shortest possible abbreviations to minimize trouble caused by
 // gnuplot's fixed-length command line buffer.
 
 #ifndef GNUPLOT_COMMAND_PLOT  
@@ -720,48 +719,48 @@ int
 subplot::handle_plot_data (int ndim, ostrstream& plot_buf)
 {
   if (plot_data)
     {
       tree_constant data = plot_data->eval (0);
 
       if (! error_state && data.is_defined ())
 	{
-	  char *file = 0;
+	  string file;
+
 	  if (data.is_string ())
 	    {
 	      // Should really try to look at data file to determine
 	      // n_max.  Can't do much about other arbitrary gnuplot
 	      // commands though...
 
 	      int n_max = 0;
 
-	      string tstr = data.string_value ();
+	      file = oct_tilde_expand (data.string_value ());
 
-	      file = tilde_expand (tstr.c_str ());
-	      ifstream ftmp (file);
+	      ifstream ftmp (file.c_str ());
+
 	      if (ftmp)
 		{
 		  plot_buf << " \"" << file << '"';
-		  free (file);
 		}
 	      else
 		{
-		  free (file);
-		  file = 0;
+		  file = "";
 
 		  // Opening as a file failed.  Let's try passing it
 		  // along as a plot command.
 
 		  plot_buf << " " << data.string_value ();
 		}
 
 	      if (using_clause)
 		{
 		  int status = using_clause->print (ndim, n_max, plot_buf);
+
 		  if (status < 0)
 		    return -1;
 		}
 	    }
 	  else
 	    {
 	      // Eliminate the need for printing a using clause to
 	      // plot_buf.
@@ -781,17 +780,17 @@ subplot::handle_plot_data (int ndim, ost
 					       parametric_plot);
 		      break;
 
 		    default:
 		      gripe_2_or_3_dim_plot ();
 		      break;
 		    }
 
-		  if (file)
+		  if (file.length () > 0)
 		    {
 		      mark_for_deletion (file);
 		      plot_buf << " \"" << file << '"';
 		    }
 		}
 	    }
 	}
       else
@@ -939,30 +938,28 @@ save_in_tmp_file (tree_constant& t, int 
 	  error ("couldn't open temporary output file `%s'", name);
 	  name = 0;
 	}
     }
   return name;
 }
 
 void
-mark_for_deletion (const char *filename)
+mark_for_deletion (const string& file)
 {
-  char *tmp = strsave (filename);
-  tmp_files.push (tmp);
+  tmp_files.push (file);
 }
 
 void
 cleanup_tmp_files (void)
 {
   while (! tmp_files.empty ())
     {
-      char *filename = tmp_files.pop ();
-      unlink (filename);
-      delete [] filename;
+      string filename = tmp_files.pop ();
+      unlink (filename.c_str ());
     }
 }
 
 void
 close_plot_stream (void)
 {
   if (plot_stream)
     {
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -63,16 +63,17 @@ LOSE! LOSE!
 #include <floatingpoint.h>
 #endif
 
 #if !defined (HAVE_GETHOSTNAME) && defined (HAVE_SYS_UTSNAME_H)
 #include <sys/utsname.h>
 #endif
 
 #include <readline/readline.h>
+#include <readline/tilde.h>
 
 extern char *term_clrpag;
 extern "C" void _rl_output_character_function ();
 
 #include "defun.h"
 #include "error.h"
 #include "f77-uscore.h"
 #include "help.h"
@@ -675,14 +676,51 @@ gethostname (char *name, int namelen)
   i = strlen (ut.nodename) + 1;
   strncpy (name, ut.nodename, i < namelen ? i : namelen);
   name[namelen] = '\0';
 
   return 0;
 }
 #endif
 
+// The check for error state allows us to do this:
+//
+//   string foo = oct_tilde_expand (args(0).string_value ());
+//
+// without having to use a temporary and check error_state before
+// calling oct_tilde_expand.
+
+string
+oct_tilde_expand (const string& name)
+{
+  string retval;
+
+  if (! error_state)
+    {
+      char *tmp = tilde_expand (name.c_str ());
+      retval = tmp;
+      delete [] tmp;
+    }
+
+  return retval;
+}
+
+DEFUN ("tilde_expand", Ftilde_expand, Stilde_expand, 10,
+  "tilde_expand (STRING): perform tilde expansion on STRING")
+{
+  Octave_object retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1)
+    retval = oct_tilde_expand (args(0).string_value ());
+  else
+    print_usage ("tilde_expand");
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/sysdep.h b/src/sysdep.h
--- a/src/sysdep.h
+++ b/src/sysdep.h
@@ -19,17 +19,17 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_sysdep_h)
 #define octave_sysdep_h 1
 
-#include <readline/tilde.h>
+#include <string>
 
 extern void sysdep_init (void);
 
 extern void raw_mode (int);
 extern int kbhit (void);
 
 extern char *octave_getcwd (char *, int);
 extern int octave_chdir (const char *);
@@ -55,16 +55,18 @@ enum floating_point_format
   };
 
 // The floating point format on this system.
 extern floating_point_format native_float_format;
 
 // Nonzero if the machine we are running on is big-endian.
 extern int octave_words_big_endian;
 
+extern string oct_tilde_expand (const string&);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -50,27 +50,27 @@ Software Foundation, 59 Temple Place - S
 #include "defun.h"
 #include "dynamic-ld.h"
 #include "error.h"
 #include "file-io.h"
 #include "help.h"
 #include "input.h"
 #include "lex.h"
 #include "oct-hist.h"
-#include "toplev.h"
 #include "pager.h"
 #include "parse.h"
 #include "pathsearch.h"
 #include "procstream.h"
+#include "pt-const.h"
+#include "pt-misc.h"
+#include "pt-plot.h"
 #include "sighandlers.h"
 #include "statdefs.h"
 #include "sysdep.h"
-#include "pt-const.h"
-#include "pt-misc.h"
-#include "pt-plot.h"
+#include "toplev.h"
 #include "unwind-prot.h"
 #include "user-prefs.h"
 #include "utils.h"
 #include "variables.h"
 #include "version.h"
 
 // argv[0] for this program.
 char *raw_prog_name = 0;
@@ -176,28 +176,29 @@ parse_and_execute (FILE *f, int print)
 	}
     }
   while (retval == 0);
 
   run_unwind_frame ("parse_and_execute");
 }
 
 void
-parse_and_execute (const char *s, int print, int verbose,
+parse_and_execute (const string& s, int print, int verbose,
 		   const char *warn_for)
 {
   begin_unwind_frame ("parse_and_execute_2");
 
   unwind_protect_int (reading_script_file);
   unwind_protect_ptr (curr_fcn_file_full_name);
 
   reading_script_file = 1;
-  curr_fcn_file_full_name = s;
+  curr_fcn_file_full_name = s.c_str ();
 
   FILE *f = get_input_from_file (s, 0);
+
   if (f)
     {
       unwind_protect_int (input_line_number);
       unwind_protect_int (current_input_column);
 
       input_line_number = 0;
       current_input_column = 1;
 
@@ -211,46 +212,43 @@ parse_and_execute (const char *s, int pr
       parse_and_execute (f, print);
 
       fclose (f);
 
       if (verbose)
 	cout << "done." << endl;
     }
   else if (warn_for)
-    error ("%s: unable to open file `%s'", warn_for, s);
+    error ("%s: unable to open file `%s'", warn_for, s.c_str ());
 
   run_unwind_frame ("parse_and_execute_2");
 }
 
 DEFUN ("source", Fsource, Ssource, 10,
   "source (FILE)\n\
 \n\
 Parse and execute the contents of FILE.  Like executing commands in a\n\
 script file but without requiring the file to be named `FILE.m'.")
 {
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
-      string tstr = args(0).string_value ();
-      const char *file = tstr.c_str ();
+      string file = args(0).string_value ();
 
       if (! error_state)
 	{
-	  file = tilde_expand (file);
+	  file = oct_tilde_expand (file);
 
 	  parse_and_execute (file, 1, 0, "source");
 
 	  if (error_state)
 	    error ("source: error sourcing file `%s'", file);
-
-	  delete [] file;
 	}
       else
 	error ("source: expecting file name as argument");
     }
   else
     print_usage ("source");
 
   return retval;
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -61,23 +61,22 @@ extern "C" int strncasecmp (const char*,
 #include "defun.h"
 #include "dirfns.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "input.h"
 #include "mappers.h"
 #include "oct-hist.h"
-#include "toplev.h"
+#include "oct-obj.h"
 #include "pager.h"
 #include "pathsearch.h"
 #include "sysdep.h"
 #include "sysdir.h"
-#include "pt-const.h"
-#include "oct-obj.h"
+#include "toplev.h"
 #include "unwind-prot.h"
 #include "user-prefs.h"
 #include "utils.h"
 #include "variables.h"
 
 // Top level context (?)
 extern jmp_buf toplevel;
 
@@ -226,19 +225,18 @@ pathstring_to_vector (char *pathstring)
 
       int i = 0;
       char *ptr = tmp_path;
       while (i < nelem)
 	{
 	  char *end = strchr (ptr, SEPCHAR);
 	  if (end)
 	    *end = '\0';
-	  char *result = tilde_expand (ptr);
-	  path[i] = strsave (result);
-	  free (result);
+	  string result = oct_tilde_expand (ptr);
+	  path[i] = strsave (result.c_str ());
 	  ptr = end + 1;
 	  i++;
 	}
 
       delete [] tmp_path;
     }
 
   return path;
