# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1349974616 14400
#      Thu Oct 11 12:56:56 2012 -0400
# Node ID 814c4b0d5c4908443c2b857d7e78518706477f98
# Parent  96b7343b8a419fc727a30f9aca10b1bf7f66028f
make numeric mapper functions throw error for char args (bug #37535)

* ov-base.h (octave_base_value::get_umap_name): Now protected instead
of private.
* ov-ch-mat.cc (octave_char_matrix::map): Special cases for umap_abs,
umap_ceil, umap_fix, umap_floor, umap_imag, umap_isinf, umap_isnan,
umap_real, and umap_round.  Error for all other mappers that expect
numeric arguments.

diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -797,19 +797,19 @@ protected:
   void reset (void) const;
 
   // A reference count.
   // NOTE: the declaration is octave_idx_type because with 64-bit indexing,
   // it is well possible to have more than MAX_INT copies of a single value
   // (think of an empty cell array with >2G elements).
   octave_refcount<octave_idx_type> count;
 
-private:
+  static const char *get_umap_name (unary_mapper_t);
 
-  static const char *get_umap_name (unary_mapper_t);
+private:
 
   static int curr_print_indent_level;
   static bool beginning_of_line;
 
   DECLARE_OV_BASE_TYPEID_FUNCTIONS_AND_DATA
 };
 
 // TRUE means to perform automatic sparse to real mutation if there
diff --git a/libinterp/octave-value/ov-ch-mat.cc b/libinterp/octave-value/ov-ch-mat.cc
--- a/libinterp/octave-value/ov-ch-mat.cc
+++ b/libinterp/octave-value/ov-ch-mat.cc
@@ -167,16 +167,18 @@ static inline int xtoascii (int c)
 #else
   return (c & 0x7F);
 #endif
 }
 
 octave_value
 octave_char_matrix::map (unary_mapper_t umap) const
 {
+  octave_value retval;
+
   switch (umap)
     {
 #define STRING_MAPPER(UMAP,FCN,TYPE) \
     case umap_ ## UMAP: \
       return octave_value (matrix.map<TYPE, int (&) (int)> (FCN))
 
     STRING_MAPPER (xisalnum, std::isalnum, bool);
     STRING_MAPPER (xisalpha, std::isalpha, bool);
@@ -189,15 +191,31 @@ octave_char_matrix::map (unary_mapper_t 
     STRING_MAPPER (xispunct, std::ispunct, bool);
     STRING_MAPPER (xisspace, std::isspace, bool);
     STRING_MAPPER (xisupper, std::isupper, bool);
     STRING_MAPPER (xisxdigit, std::isxdigit, bool);
     STRING_MAPPER (xtoascii, xtoascii, double);
     STRING_MAPPER (xtolower, std::tolower, char);
     STRING_MAPPER (xtoupper, std::toupper, char);
 
-    default:
+    // For Matlab compatibility, these should work on ASCII values
+    // without error or warning.
+    case umap_abs:
+    case umap_ceil:
+    case umap_fix:
+    case umap_floor:
+    case umap_imag:
+    case umap_isinf:
+    case umap_isnan:
+    case umap_real:
+    case umap_round:
       {
         octave_matrix m (array_value (true));
         return m.map (umap);
       }
+
+    default:
+      error ("%s: expecting numeric argument", get_umap_name (umap));
+      break;
     }
+
+  return retval;
 }
