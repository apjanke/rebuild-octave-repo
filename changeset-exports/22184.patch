# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1469540996 14400
#      Tue Jul 26 09:49:56 2016 -0400
# Node ID a032ffb8070492f8d9545cd0ee347d3dd6ba7c90
# Parent  bfb1b089c23077cd772b29b2e4ad52b8f31180dc
don't print startup message for --eval (bug #48620)

* interpreter.cc (interpreter::interpreter): Don't attempt to modify
command line options.
(interpreter::execute): Avoid printing startup message if session is
not interactive.

diff --git a/libinterp/corefcn/interpreter.cc b/libinterp/corefcn/interpreter.cc
--- a/libinterp/corefcn/interpreter.cc
+++ b/libinterp/corefcn/interpreter.cc
@@ -611,42 +611,33 @@ namespace octave
     // a redirected file.
     bool stdin_is_tty = octave_isatty_wrapper (fileno (stdin));
 
     m_interactive = (! m_embedded
                      && ! m_app_context->is_octave_program ()
                      && stdin_is_tty
                      && octave_isatty_wrapper (fileno (stdout)));
 
-    // Check if the user forced an interactive session.  If he
-    // unnecessarily did so, reset forced_interactive to false.
+    // Check if the user forced an interactive session.
     if (options.forced_interactive ())
-      {
-        if (m_interactive)
-          options.forced_interactive (false);
-        else
-          m_interactive = true;
-      }
+      m_interactive = true;
 
+    bool line_editing = options.line_editing ();
     if ((! m_interactive || options.forced_interactive ())
         && ! options.forced_line_editing ())
-      options.line_editing (false);
-
-    // Also skip start-up message unless session is interactive.
-    if (! m_interactive)
-      options.inhibit_startup_message (true);
+      line_editing = false;
 
     // Force default line editor if we don't want readline editing.
-    if (! options.line_editing ())
+    if (line_editing)
       octave::command_editor::force_default_editor ();
 
     // These can come after command line args since none of them set any
     // defaults that might be changed by command line options.
 
-    if (options.line_editing ())
+    if (line_editing )
       initialize_command_input ();
 
     octave_interpreter_ready = true;
 
     initialize_version_info ();
 
     // Make all command-line arguments available to startup files,
     // including PKG_ADD files.
@@ -657,27 +648,27 @@ namespace octave
 
     initialize_history (options.read_history_file ());
   }
 
   int interpreter::execute (void)
   {
     cmdline_options options = m_app_context->options ();
 
-    if (! options.inhibit_startup_message ())
+    if (m_interactive && ! options.inhibit_startup_message ())
       std::cout << octave_startup_message () << "\n" << std::endl;
 
     octave_prepare_hdf5 ();
 
     execute_startup_files (options.read_site_files (),
                            options.read_init_files (),
                            options.verbose_flag (),
                            options.inhibit_startup_message ());
 
-    if (! options.inhibit_startup_message ()
+    if (m_interactive && ! options.inhibit_startup_message ()
         && reading_startup_message_printed)
       std::cout << std::endl;
 
     // Execute any code specified with --eval 'CODE'
     std::string code_to_eval = options.code_to_eval ();
 
     if (! code_to_eval.empty ())
       {
