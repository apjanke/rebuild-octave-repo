# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1271155524 -7200
#      Tue Apr 13 12:45:24 2010 +0200
# Node ID 40c58502a78b7fedfdeb27326f3a7bedf72dfaea
# Parent  c5005bc2b7a9f28df37fcd6cf1fad43d04d42d86
improve conversion & copy ctors of sparse matrix

diff --git a/liboctave/Sparse.h b/liboctave/Sparse.h
--- a/liboctave/Sparse.h
+++ b/liboctave/Sparse.h
@@ -24,16 +24,17 @@ along with Octave; see the file COPYING.
 
 #if !defined (octave_Sparse_h)
 #define octave_Sparse_h 1
 
 #include <cassert>
 #include <cstddef>
 
 #include <iosfwd>
+#include <algorithm>
 
 #include "Array.h"
 #include "dim-vector.h"
 #include "lo-error.h"
 #include "lo-utils.h"
 
 #include "oct-sort.h"
 #include "oct-mem.h"
@@ -92,23 +93,31 @@ protected:
         for (octave_idx_type i = 0; i < nc + 1; i++)
           c[i] = 0;
       }
 
     SparseRep (const SparseRep& a)
       : d (new T [a.nzmx]), r (new octave_idx_type [a.nzmx]), c (new octave_idx_type [a.ncols + 1]), 
       nzmx (a.nzmx), nrows (a.nrows), ncols (a.ncols), count (1)
       {
-        for (octave_idx_type i = 0; i < nzmx; i++)
-          {
-            d[i] = a.d[i];
-            r[i] = a.r[i];
-          }
-        for (octave_idx_type i = 0; i < ncols + 1; i++)
-          c[i] = a.c[i];
+        octave_idx_type nz = a.nnz ();
+        copy_or_memcpy (nz, a.d, d);
+        copy_or_memcpy (nz, a.r, r);
+        copy_or_memcpy (ncols + 1, a.c, c);
+      }
+ 
+    template <class U>
+    SparseRep (const Sparse<U>::SparseRep& a)
+      : d (new T [a.nzmx]), r (new octave_idx_type [a.nzmx]), c (new octave_idx_type [a.ncols + 1]), 
+      nzmx (a.nzmx), nrows (a.nrows), ncols (a.ncols), count (1)
+      {
+        octave_idx_type nz = a.nnz ();
+        std::copy (a.d, a.d + nz, d);
+        copy_or_memcpy (nz, a.r, r);
+        copy_or_memcpy (ncols + 1, a.c, c);
       }
  
     ~SparseRep (void) { delete [] d; delete [] r; delete [] c; }
 
     octave_idx_type length (void) const { return nzmx; }
 
     octave_idx_type nnz (void) const { return c [ncols]; }
 
@@ -191,18 +200,20 @@ public:
   Sparse (const dim_vector& dv, octave_idx_type nz)
     : rep (new typename Sparse<T>::SparseRep (dv(0), dv(1), nz)),
     dimensions (dv) { }
 
   Sparse (octave_idx_type nr, octave_idx_type nc, octave_idx_type nz)
     : rep (new typename Sparse<T>::SparseRep (nr, nc, nz)),
       dimensions (dim_vector (nr, nc)) { }
 
-  // Type conversion case.
-  template <class U> Sparse (const Sparse<U>& a);
+  // Type conversion case. Preserves capacity ().
+  template <class U> Sparse (const Sparse<U>& a)
+    : rep (new typename Sparse<T>::SparseRep (a.rep)),
+    dimensions (a.dimensions) { }
 
   // No type conversion case.
   Sparse (const Sparse<T>& a)
     : rep (a.rep), dimensions (a.dimensions)
     {
       rep->count++;
     }
 
