# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1241200854 14400
#      Fri May 01 14:00:54 2009 -0400
# Node ID 69088b7b139cb1c1c6cf48dc6fbff7eff453e18c
# Parent  8c71a86c4bf455c185c6ee1a674357b643f4d1f9
use complete stack trace information for lasterror

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2009-05-01  John W. Eaton  <jwe@octave.org>
+
+	* error.cc (Vlast_error_file, Vlast_error_name, Vlast_error_line,
+	Vlast_error_column): Delete.
+	(Vlast_error_stack): New static variable.
+	(initialize_last_error_stack): New static function.
+	(verror, Frethrow, Flasterror): Set or use Vlast_error_stack, not
+	Vlast_error_file, etc.
+
 2009-04-27  John W. Eaton  <jwe@octave.org>
 
 	* ov-class.cc (octave_class::dotref): Handle empty parent class.
 	(octave_class::get_current_method_class): Allow result to be empty.
 	(called_from_builtin): New static function.
 	(octave_class::subsref, octave_class::subsasgn): Use it.
 
 2009-04-23  John W. Eaton  <jwe@octave.org>
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -82,26 +82,17 @@ static std::string Vlast_warning_message
 
 // The last warning message id.
 static std::string Vlast_warning_id;
 
 // The last error message id.
 static std::string Vlast_error_id;
 
 // The last file in which an error occured
-static std::string Vlast_error_file;
-
-// The last function in which an error occured
-static std::string Vlast_error_name;
-
-// The last line in a function at which an error occured
-static int Vlast_error_line = -1;
-
-// The last column in a function at which an error occured
-static int Vlast_error_column = -1;
+static Octave_map Vlast_error_stack;
 
 // Current error state.
 //
 // Valid values:
 //
 //   -2: an error has occurred, but don't print any messages.
 //   -1: an error has occurred, we are printing a traceback
 //    0: no error
@@ -145,16 +136,36 @@ static void
 initialize_warning_options (const std::string& state)
 {
   warning_options.clear ();
 
   warning_options.assign ("identifier", "all");
   warning_options.assign ("state", state);
 }
 
+static Octave_map
+initialize_last_error_stack (void)
+{
+  static bool initialized = false;
+
+  static string_vector sv (4);
+
+  if (! initialized)
+    {
+      sv[0] = "file";
+      sv[1] = "name";
+      sv[2] = "line";
+      sv[3] = "column";
+
+      initialized = true;
+    }
+
+  return Octave_map (dim_vector (0, 1), sv);
+}
+
 // Warning messages are never buffered.
 
 static void
 vwarning (const char *name, const char *id, const char *fmt, va_list args)
 {
   if (discard_warning_messages)
     return;
 
@@ -225,30 +236,26 @@ verror (bool save_last_error, std::ostre
 
   if (! error_state && save_last_error)
     {
       // This is the first error in a possible series.
 
       Vlast_error_id = id;
       Vlast_error_message = base_msg;
 
-      Vlast_error_line = -1;
-      Vlast_error_column = -1;
-      Vlast_error_name = std::string ();
-      Vlast_error_file = std::string ();
-
       octave_user_code *fcn = octave_call_stack::caller_user_code ();
 
       if (fcn)
 	{
-	  Vlast_error_file = fcn->fcn_file_name ();
-	  Vlast_error_name = fcn->name ();
-	  Vlast_error_line = octave_call_stack::caller_user_code_line ();
-	  Vlast_error_column = octave_call_stack::caller_user_code_column ();
+	  octave_idx_type curr_frame = -1;
+
+	  Vlast_error_stack = octave_call_stack::backtrace (0, curr_frame);
 	}
+      else
+	Vlast_error_stack = initialize_last_error_stack ();
     }
 
   if (buffer_error_messages)
     {
       if (error_message_buffer)
 	msg_string = "error: " + msg_string;
       else
 	error_message_buffer = new std::ostringstream ();
@@ -799,24 +806,27 @@ location of the error.  Typically @var{e
 
       if (! error_state)
 	{
 	  if (err.contains ("message") && err.contains ("identifier"))
 	    {
 	      std::string msg = err.contents("message")(0).string_value ();
 	      std::string id = err.contents("identifier")(0).string_value ();
 	      int len = msg.length();
+
 	      std::string file;
 	      std::string nm;
 	      int l = -1;
 	      int c = -1;
 
+	      Octave_map err_stack = initialize_last_error_stack ();
+
 	      if (err.contains ("stack"))
 		{
-		  Octave_map err_stack = err.contents("stack")(0).map_value ();
+		  err_stack = err.contents("stack")(0).map_value ();
 
 		  if (err_stack.numel () > 0)
 		    {
 		      if (err_stack.contains ("file"))
 			file = err_stack.contents("file")(0).string_value ();
 
 		      if (err_stack.contains ("name"))
 			nm = err_stack.contents("name")(0).string_value ();
@@ -838,21 +848,21 @@ location of the error.  Typically @var{e
 		      tmp_msg[len - 1] = '\0';
 		      rethrow_error (id.c_str (), "%s\n", tmp_msg);
 		    }
 		}
 	      else
 		rethrow_error (id.c_str (), "%s", tmp_msg);
 	      delete [] tmp_msg;
 
-	      // FIXME -- Need to restore the stack as rethrow_error sets it?
-	      Vlast_error_file = file;
-	      Vlast_error_name = nm;
-	      Vlast_error_line = l;
-	      Vlast_error_column = c;
+	      // FIXME -- is this the right thing to do for
+	      // Vlast_error_stack?  Should it be saved and restored
+	      // with unwind_protect?
+
+	      Vlast_error_stack = err_stack;
 
 	      if (err.contains ("stack"))
 		{
 		  if (file.empty ())
 		    {
 		      if (nm.empty ())
 			{
 			  if (l > 0)
@@ -1419,51 +1429,28 @@ their default values.\n\
 
   if (nargin < 2)
     {
       Octave_map err;
 
       err.assign ("message", Vlast_error_message);
       err.assign ("identifier", Vlast_error_id);
 
-      if (! (Vlast_error_file.empty() && Vlast_error_name.empty() &&
-	     Vlast_error_line < 0 && Vlast_error_column < 0))
-	{
-	  Octave_map err_stack;
-
-	  err_stack.assign ("file", Vlast_error_file);
-	  err_stack.assign ("name", Vlast_error_name);
-	  err_stack.assign ("line", Vlast_error_line);
-	  err_stack.assign ("column", Vlast_error_column);
-
-	  err.assign ("stack", octave_value (err_stack));
-	}
-      else
-	{
-	  string_vector sv(4);
-	  sv[0] = "file"; 
-	  sv[1] = "name";
-	  sv[2] = "line";
-	  sv[3] = "column";
-	  err.assign ("stack", octave_value (Octave_map (dim_vector (0,1), 
-							 sv)));
-	}
+      err.assign ("stack", octave_value (Vlast_error_stack));
 
       if (nargin == 1)
 	{
 	  if (args(0).is_string())
 	    {
 	      if (args(0).string_value () == "reset")
 		{
 		  Vlast_error_message = std::string();
 		  Vlast_error_id = std::string();
-		  Vlast_error_file = std::string();
-		  Vlast_error_name = std::string();
-		  Vlast_error_line = -1;
-		  Vlast_error_column = -1;
+
+		  Vlast_error_stack = initialize_last_error_stack ();
 		}
 	      else
 		error("lasterror: unrecognized string argument");
 	    }
 	  else if (args(0).is_map ())
 	    {
 	      Octave_map new_err = args(0).map_value ();
 	      std::string new_error_message;
@@ -1520,20 +1507,21 @@ their default values.\n\
 		      new_error_column = tmp;
 		    }
 		}
 
 	      if (! error_state)
 		{
 		  Vlast_error_message = new_error_message;
 		  Vlast_error_id = new_error_id;
-		  Vlast_error_file = new_error_file;
-		  Vlast_error_name = new_error_name;
-		  Vlast_error_line = new_error_line;
-		  Vlast_error_column = new_error_column;
+
+		  octave_idx_type curr_frame = -1;
+
+		  Vlast_error_stack
+		    = octave_call_stack::backtrace (0, curr_frame);
 		}
 	    }
 	  else
 	    error ("lasterror: argument must be a structure or a string");
 	}
 
       if (! error_state)
 	retval = err;
