# HG changeset patch
# User jwe
# Date 815317601 0
#      Thu Nov 02 13:06:41 1995 +0000
# Node ID 65572455466f5efa789de3f63aefab4f736b2a76
# Parent  795527e9db1982a062cd2f573b3321a890339ff9
[project @ 1995-11-02 13:06:41 by jwe]

diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -40,16 +40,18 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_UNISTD_H
 #include <sys/types.h>
 #include <unistd.h>
 #endif
 
 #include <pwd.h>
 
+#include <readline/tilde.h>
+
 #include "getopt.h"
 
 #include "lo-error.h"
 
 #include "builtins.h"
 #include "defaults.h"
 #include "defun.h"
 #include "dynamic-ld.h"
@@ -347,23 +349,26 @@ parse_and_execute (FILE *f, int print)
 	}
     }
   while (retval == 0);
 
   run_unwind_frame ("parse_and_execute");
 }
 
 void
-parse_and_execute (const char *s, int print, int verbose)
+parse_and_execute (const char *s, int print, int verbose,
+		   const char *warn_for)
 {
   begin_unwind_frame ("parse_and_execute_2");
 
   unwind_protect_int (reading_script_file);
+  unwind_protect_ptr (curr_fcn_file_full_name);
 
   reading_script_file = 1;
+  curr_fcn_file_full_name = s;
 
   FILE *f = get_input_from_file (s, 0);
   if (f)
     {
       unwind_protect_int (input_line_number);
       unwind_protect_int (current_input_column);
 
       input_line_number = 0;
@@ -378,16 +383,18 @@ parse_and_execute (const char *s, int pr
 
       parse_and_execute (f, print);
 
       fclose (f);
 
       if (verbose)
 	cout << "done." << endl;
     }
+  else if (warn_for)
+    error ("%s: unable to open file `%s'", warn_for, s);
 
   run_unwind_frame ("parse_and_execute_2");
 }
 
 DEFUN ("source", Fsource, Ssource, 10,
   "source (FILE)\n\
 \n\
 Parse and execute the contents of FILE.  Like executing commands in a\n\
@@ -396,17 +403,29 @@ script file but without requiring the fi
   Octave_object retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       const char *file = args(0).string_value ();
 
-      parse_and_execute (file, 1);
+      if (! error_state)
+	{
+	  file = tilde_expand (file);
+
+	  parse_and_execute (file, 1, 0, "source");
+
+	  if (error_state)
+	    error ("source: error sourcing file `%s'", file);
+
+	  delete [] file;
+	}
+      else
+	error ("source: expecting file name as argument");
     }
   else
     print_usage ("source");
 
   return retval;
 }
 
 // Initialize by reading startup files.
@@ -693,27 +712,28 @@ main (int argc, char **argv)
   // Additional arguments are taken as command line options for the
   // script.
 
   int remaining_args = argc - optind;
   if (remaining_args > 0)
     {
       reading_script_file = 1;
       curr_fcn_file_name = argv[optind];
+      curr_fcn_file_full_name = curr_fcn_file_name;
 
       FILE *infile = get_input_from_file (curr_fcn_file_name);
 
       if (infile)
 	{
 	  input_from_command_line_file = 1;
 
 	  bind_builtin_variable ("program_invocation_name",
 				 curr_fcn_file_name);
 
-	  char *tmp = strrchr (curr_fcn_file_name, '/');
+	  const char *tmp = strrchr (curr_fcn_file_name, '/');
 	  tmp = tmp ? tmp+1 : curr_fcn_file_name;
 
 	  bind_builtin_variable ("program_name", tmp);
 
 	  intern_argv (remaining_args, argv+optind);
 
 	  rl_blink_matching_paren = 0;
 	  switch_to_buffer (create_buffer (infile));
