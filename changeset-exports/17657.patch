# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1381783966 14400
#      Mon Oct 14 16:52:46 2013 -0400
# Branch classdef
# Node ID df266c923b830c10efb59dcd06d051e1bdf2eb1c
# Parent  2b1047efc4fb7d6a5ad6e24f048cba956271f736
delete unnecessary tok_type semantic value in parser

* oct-parse.in.yy (tok_type): Delete type.  Don't list it in null
destructor line.
(function_beg, classdef_beg): Declare as tok_val, not tok_type.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -160,17 +160,16 @@ make_statement (T *arg)
   // The type of the basic tokens returned by the lexer.
   token *tok_val;
 
   // Comment strings that we need to deal with mid-rule.
   octave_comment_list *comment_type;
 
   // Types for the nonterminals we generate.
   char sep_type;
-  token *tok_type;
   tree *tree_type;
   tree_matrix *tree_matrix_type;
   tree_cell *tree_cell_type;
   tree_expression *tree_expression_type;
   tree_constant *tree_constant_type;
   tree_fcn_handle *tree_fcn_handle_type;
   tree_funcall *tree_funcall_type;
   tree_function_def *tree_function_def_type;
@@ -246,17 +245,17 @@ make_statement (T *arg)
 
 // Other tokens.
 %token END_OF_INPUT LEXICAL_ERROR
 %token INPUT_FILE
 // %token VARARGIN VARARGOUT
 
 // Nonterminals we construct.
 %type <comment_type> stash_comment
-%type <tok_type> function_beg classdef_beg
+%type <tok_val> function_beg classdef_beg
 %type <sep_type> sep_no_nl opt_sep_no_nl nl opt_nl sep opt_sep
 %type <tree_type> input
 %type <tree_constant_type> string constant magic_colon
 %type <tree_anon_fcn_handle_type> anon_fcn_handle
 %type <tree_fcn_handle_type> fcn_handle
 %type <tree_matrix_type> matrix_rows
 %type <tree_cell_type> cell_rows
 %type <tree_expression_type> matrix cell
@@ -320,17 +319,17 @@ make_statement (T *arg)
 %left POW EPOW HERMITIAN TRANSPOSE
 %right PLUS_PLUS MINUS_MINUS
 %left '(' '.' '{'
 
 // How to clean up if there is a parse error.  We handle deleting tokens
 // and comments seperately and separators are just characters.  The
 // remaining items are dynamically allocated parse tree objects that
 // must be deleted.
-%destructor { } <sep_type> <tok_val> <comment_type> <dummy_type> <tok_type> <>
+%destructor { } <sep_type> <tok_val> <comment_type> <dummy_type> <>
 %destructor { delete $$; } <*>
 
 // Where to start.
 %start input
 
 %%
 
 // ==============================
