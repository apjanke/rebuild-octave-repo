# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1472121915 14400
#      Thu Aug 25 06:45:15 2016 -0400
# Node ID 6eba7555794ab1e67e1de3cee2ede05ab78337f8
# Parent  ddac3d15ad7d08d8a49a9dbbf64ac77fae28ae7d
style fixes

* oct-refcount.h: Style fixes.  Rename macros.
* dim-vector.h: Update for renamed macros.

diff --git a/liboctave/array/dim-vector.h b/liboctave/array/dim-vector.h
--- a/liboctave/array/dim-vector.h
+++ b/liboctave/array/dim-vector.h
@@ -152,17 +152,17 @@ private:
   }
 
   void make_unique (void)
   {
     if (count () > 1)
       {
         octave_idx_type *new_rep = clonerep ();
 
-        if (OCTREFCOUNT_ATOMIC_DECREMENT(&(count())) == 0)
+        if (OCTAVE_ATOMIC_DECREMENT (&(count ())) == 0)
           freerep ();
 
         rep = new_rep;
       }
   }
 
 public:
 
@@ -254,46 +254,46 @@ private:
 
   static octave_idx_type *nil_rep (void);
 
 public:
 
   static octave_idx_type dim_max (void);
 
   explicit dim_vector (void) : rep (nil_rep ())
-  { OCTREFCOUNT_ATOMIC_INCREMENT (&(count())); }
+  { OCTAVE_ATOMIC_INCREMENT (&(count ())); }
 
   dim_vector (const dim_vector& dv) : rep (dv.rep)
-  { OCTREFCOUNT_ATOMIC_INCREMENT (&(count())); }
+  { OCTAVE_ATOMIC_INCREMENT (&(count ())); }
 
   // FIXME: Should be private, but required by array constructor for jit
   explicit dim_vector (octave_idx_type *r) : rep (r) { }
 
   static dim_vector alloc (int n)
   {
     return dim_vector (newrep (n < 2 ? 2 : n));
   }
 
   dim_vector& operator = (const dim_vector& dv)
   {
     if (&dv != this)
       {
-        if (OCTREFCOUNT_ATOMIC_DECREMENT (&(count())) == 0)
+        if (OCTAVE_ATOMIC_DECREMENT (&(count ())) == 0)
           freerep ();
 
         rep = dv.rep;
-        OCTREFCOUNT_ATOMIC_INCREMENT (&(count()));
+        OCTAVE_ATOMIC_INCREMENT (&(count ()));
       }
 
     return *this;
   }
 
   ~dim_vector (void)
   {
-    if (OCTREFCOUNT_ATOMIC_DECREMENT (&(count())) == 0)
+    if (OCTAVE_ATOMIC_DECREMENT (&(count ())) == 0)
       freerep ();
   }
 
   //! Number of dimensions.
   /*!
       Returns the number of dimensions of the dim_vector.  This is number of
       elements in the dim_vector including trailing singetons.  It is also
       the number of dimensions an Array with this dim_vector would have.
@@ -316,17 +316,17 @@ public:
   void resize (int n, int fill_value = 0)
   {
     int len = ndims ();
 
     if (n != len)
       {
         octave_idx_type *r = resizerep (n, fill_value);
 
-        if (OCTREFCOUNT_ATOMIC_DECREMENT (&(count())) == 0)
+        if (OCTAVE_ATOMIC_DECREMENT (&(count ())) == 0)
           freerep ();
 
         rep = r;
       }
   }
 
   std::string str (char sep = 'x') const;
 
diff --git a/liboctave/util/oct-refcount.h b/liboctave/util/oct-refcount.h
--- a/liboctave/util/oct-refcount.h
+++ b/liboctave/util/oct-refcount.h
@@ -22,74 +22,96 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_oct_refcount_h)
 #define octave_oct_refcount_h 1
 
 #include "octave-config.h"
 
 #include "octave-config.h"
 
-#if defined (OCTAVE_ENABLE_ATOMIC_REFCOUNT) && (defined (_MSC_VER) || defined (__GNUC__))
-#  if defined (_MSC_VER)
+#if (defined (OCTAVE_ENABLE_ATOMIC_REFCOUNT) \
+     && (defined (__GNUC__) || defined (_MSC_VER)))
+
+#  if defined (__GNUC__)
+
+#    define OCTAVE_ATOMIC_INCREMENT(x) __sync_add_and_fetch (x,  1)
+#    define OCTAVE_ATOMIC_DECREMENT(x) __sync_add_and_fetch (x, -1)
+#    define OCTAVE_ATOMIC_POST_INCREMENT(x) __sync_fetch_and_add (x,  1)
+#    define OCTAVE_ATOMIC_POST_DECREMENT(x) __sync_fetch_and_add (x, -1)
+
+#  elif defined (_MSC_VER)
+
 #    include <intrin.h>
-#    define OCTREFCOUNT_ATOMIC_INCREMENT(x) _InterlockedIncrement((long*)x)
-#    define OCTREFCOUNT_ATOMIC_DECREMENT(x) _InterlockedDecrement((long*)x)
-#    define OCTREFCOUNT_ATOMIC_INCREMENT_POST(x) _InterlockedExchangeAdd((long*)x,  1)
-#    define OCTREFCOUNT_ATOMIC_DECREMENT_POST(x) _InterlockedExchangeAdd((long*)x, -1)
-#  elif defined (__GNUC__)
-#    define OCTREFCOUNT_ATOMIC_INCREMENT(x) __sync_add_and_fetch(x,  1)
-#    define OCTREFCOUNT_ATOMIC_DECREMENT(x) __sync_add_and_fetch(x, -1)
-#    define OCTREFCOUNT_ATOMIC_INCREMENT_POST(x) __sync_fetch_and_add(x,  1)
-#    define OCTREFCOUNT_ATOMIC_DECREMENT_POST(x) __sync_fetch_and_add(x, -1)
+
+#    define OCTAVE_ATOMIC_INCREMENT(x)                  \
+  _InterlockedIncrement (static_cast<long *> (x))
+
+#    define OCTAVE_ATOMIC_DECREMENT(x)                  \
+  _InterlockedDecrement (static_cast<long *> (x))
+
+#    define OCTAVE_ATOMIC_POST_INCREMENT(x)             \
+  _InterlockedExchangeAdd (static_cast<long *> (x))
+
+#    define OCTAVE_ATOMIC_POST_DECREMENT(x)             \
+  _InterlockedExchangeAdd (static_cast<long *> (x))
+
 #  endif
+
 #else
+
 // Generic non-locking versions
-#  define OCTREFCOUNT_ATOMIC_INCREMENT(x) ++(*(x))
-#  define OCTREFCOUNT_ATOMIC_DECREMENT(x) --(*(x))
-#  define OCTREFCOUNT_ATOMIC_INCREMENT_POST(x) (*(x))++
-#  define OCTREFCOUNT_ATOMIC_DECREMENT_POST(x) (*(x))--
+
+#  define OCTAVE_ATOMIC_INCREMENT(x) ++(*(x))
+#  define OCTAVE_ATOMIC_DECREMENT(x) --(*(x))
+#  define OCTAVE_ATOMIC_POST_INCREMENT(x) (*(x))++
+#  define OCTAVE_ATOMIC_POST_DECREMENT(x) (*(x))--
+
 #endif
 
 // Encapsulates a reference counter.
 template <typename T>
 class octave_refcount
 {
 public:
+
   typedef T count_type;
 
-  octave_refcount(count_type initial_count) : count(initial_count) { }
+  octave_refcount (count_type initial_count)
+    : count (initial_count)
+  { }
 
   // Increment/Decrement.  int is postfix.
-  count_type operator++(void)
+  count_type operator++ (void)
   {
-    return OCTREFCOUNT_ATOMIC_INCREMENT (&count);
+    return OCTAVE_ATOMIC_INCREMENT (&count);
   }
 
-  count_type operator++(int)
+  count_type operator++ (int)
   {
-    return OCTREFCOUNT_ATOMIC_INCREMENT_POST (&count);
+    return OCTAVE_ATOMIC_POST_INCREMENT (&count);
   }
 
-  count_type operator--(void)
+  count_type operator-- (void)
   {
-    return OCTREFCOUNT_ATOMIC_DECREMENT (&count);
+    return OCTAVE_ATOMIC_DECREMENT (&count);
   }
 
-  count_type operator--(int)
+  count_type operator-- (int)
   {
-    return OCTREFCOUNT_ATOMIC_DECREMENT_POST (&count);
+    return OCTAVE_ATOMIC_POST_DECREMENT (&count);
   }
 
   operator count_type (void) const
   {
     return static_cast<count_type const volatile&> (count);
   }
 
   count_type *get (void)
   {
     return &count;
   }
 
 private:
+
   count_type count;
 };
 
 #endif
