# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1276297299 -7200
#      Sat Jun 12 01:01:39 2010 +0200
# Node ID fa00ccf7b1f9a6a3cdcd415b97f87a4808aabce6
# Parent  1215ab6f349151632836c8d5a44cb6c9c3808b53
Implementary complementary incomplete gamma function (bug #30088)

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-06-11  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/gammainc.cc: Implement complementary incomplete
+	gamma function.
+
 2010-06-10  Ben Abbott <bpabbott@mac.com>
 
 	* data.cc: Fix test for concatentating empty nd-arrays.
 
 2010-06-10  Jaroslav Hajek  <highegg@gmail.com>
 
 	* data.cc (Fvec): New DEFUN.
 
diff --git a/src/DLD-FUNCTIONS/gammainc.cc b/src/DLD-FUNCTIONS/gammainc.cc
--- a/src/DLD-FUNCTIONS/gammainc.cc
+++ b/src/DLD-FUNCTIONS/gammainc.cc
@@ -31,16 +31,18 @@ along with Octave; see the file COPYING.
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "utils.h"
 
 DEFUN_DLD (gammainc, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} gammainc (@var{x}, @var{a})\n\
+@deftypefnx {Mapping Function} {} gammainc (@var{x}, @var{a}, \"lower\")\n\
+@deftypefnx {Mapping Function} {} gammainc (@var{x}, @var{a}, \"upper\")\n\
 Compute the normalized incomplete gamma function,\n\
 @tex\n\
 $$\n\
  \\gamma (x, a) = {\\displaystyle\\int_0^x e^{-t} t^{a-1} dt \\over \\Gamma (a)}\n\
 $$\n\
 @end tex\n\
 @ifnottex\n\
 \n\
@@ -56,24 +58,49 @@ gammainc (x, a) = ---------    | exp (-t
 with the limiting value of 1 as @var{x} approaches infinity.\n\
 The standard notation is @math{P(a,x)}, e.g., Abramowitz and Stegun (6.5.1).\n\
 \n\
 If @var{a} is scalar, then @code{gammainc (@var{x}, @var{a})} is returned\n\
 for each element of @var{x} and vice versa.\n\
 \n\
 If neither @var{x} nor @var{a} is scalar, the sizes of @var{x} and\n\
 @var{a} must agree, and @var{gammainc} is applied element-by-element.\n\
+\n\
+By default the incomplete gamma function integrated from 0 to @var{x} is\n\
+computed. If \"upper\" is given then the complementary function integrated\n\
+for @var{x} to infinity is calculated. It should be noted that\n\
+\n\
+@example\n\
+gammainc (@var{x}, @var{a}) = 1 - gammainc (@var{x}, @vaar{a}, \"upper\")\n\
+@end example\n\
 @seealso{gamma, lgamma}\n\
 @end deftypefn")
 {
   octave_value retval;
+  bool lower = true;
 
   int nargin = args.length ();
 
-  if (nargin == 2)
+  if (nargin == 3)
+    {
+      if (args(2).is_string ())
+        {
+          std::string s = args(2).string_value ();
+          std::transform (s.begin (), s.end (), s.begin (), tolower);
+          if (s == "upper")
+            lower = false;
+          else if (s != "lower")
+            error ("expecting third argument to be \"lower\" or \"upper\"");
+        }
+      else
+        error ("expecting third argument to be \"lower\" or \"upper\"");
+
+    }
+
+  if (!error_state && nargin >= 2  && nargin <= 3)
     {
       octave_value x_arg = args(0);
       octave_value a_arg = args(1);
 
       // FIXME Can we make a template version of the duplicated code below
       if (x_arg.is_single_type () || a_arg.is_single_type ())
         {
           if (x_arg.is_scalar_type ())
@@ -82,46 +109,50 @@ If neither @var{x} nor @var{a} is scalar
 
               if (! error_state)
                 {
                   if (a_arg.is_scalar_type ())
                     {
                       float a = a_arg.float_value ();
 
                       if (! error_state)
-                        retval = gammainc (x, a);
+                        retval = lower ? gammainc (x, a) 
+                          : static_cast<float>(1) - gammainc (x, a);
                     }
                   else
                     {
                       FloatNDArray a = a_arg.float_array_value ();
 
                       if (! error_state)
-                        retval = gammainc (x, a);
+                        retval = lower ? gammainc (x, a) 
+                          : static_cast<float>(1) - gammainc (x, a);
                     }
                 }
             }
           else
             {
               FloatNDArray x = x_arg.float_array_value ();
 
               if (! error_state)
                 {
                   if (a_arg.is_scalar_type ())
                     {
                       float a = a_arg.float_value ();
 
                       if (! error_state)
-                        retval = gammainc (x, a);
+                        retval = lower ? gammainc (x, a) 
+                          : static_cast<float>(1) - gammainc (x, a);
                     }
                   else
                     {
                       FloatNDArray a = a_arg.float_array_value ();
 
                       if (! error_state)
-                        retval = gammainc (x, a);
+                        retval = lower ? gammainc (x, a) 
+                          : static_cast<float>(1) - gammainc (x, a);
                     }
                 }
             }
         }
       else
         {
           if (x_arg.is_scalar_type ())
             {
@@ -129,46 +160,46 @@ If neither @var{x} nor @var{a} is scalar
 
               if (! error_state)
                 {
                   if (a_arg.is_scalar_type ())
                     {
                       double a = a_arg.double_value ();
 
                       if (! error_state)
-                        retval = gammainc (x, a);
+                        retval = lower ? gammainc (x, a) : 1. - gammainc (x, a);
                     }
                   else
                     {
                       NDArray a = a_arg.array_value ();
 
                       if (! error_state)
-                        retval = gammainc (x, a);
+                        retval = lower ? gammainc (x, a) : 1. - gammainc (x, a);
                     }
                 }
             }
           else
             {
               NDArray x = x_arg.array_value ();
 
               if (! error_state)
                 {
                   if (a_arg.is_scalar_type ())
                     {
                       double a = a_arg.double_value ();
 
                       if (! error_state)
-                        retval = gammainc (x, a);
+                        retval = lower ? gammainc (x, a) : 1. - gammainc (x, a);
                     }
                   else
                     {
                       NDArray a = a_arg.array_value ();
 
                       if (! error_state)
-                        retval = gammainc (x, a);
+                        retval = lower ? gammainc (x, a) : 1. - gammainc (x, a);
                     }
                 }
             }
         }
     }
   else
     print_usage ();
 
@@ -179,16 +210,20 @@ If neither @var{x} nor @var{a} is scalar
 
 %!test
 %! a = [.5 .5 .5 .5 .5];
 %! x = [0 1 2 3 4];
 %! v1 = sqrt(pi)*erf(x)./gamma(a);
 %! v3 = gammainc(x.*x,a);
 %! assert(v1, v3, sqrt(eps));
 
+%!assert (gammainc(0:4,0.5,"upper"), 1-gammainc(0:4,0.5),1e-10) 
+
 %!test
 %! a = single ([.5 .5 .5 .5 .5]);
 %! x = single([0 1 2 3 4]);
 %! v1 = sqrt(pi('single'))*erf(x)./gamma(a);
 %! v3 = gammainc(x.*x,a);
 %! assert(v1, v3, sqrt(eps('single')));
 
+%!assert (gammainc(single(0:4),single(0.5),"upper"), single(1)-gammainc(single(0:4),single(0.5)),single(1e-7)) 
+
 */
