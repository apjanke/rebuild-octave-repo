# HG changeset patch
# User jwe
# Date 1200641855 0
#      Fri Jan 18 07:37:35 2008 +0000
# Node ID c1a3d6c7d2fbd8f152fa8b6e7814f4835d82cd35
# Parent  4f403ccc4e30791bced42d697b63e2072bc3071e
[project @ 2008-01-18 07:37:35 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2008-01-18  John W. Eaton  <jwe@octave.org>
+
+	* optimization/sqp.m: End each function with endfunction.
+
 2008-01-18  Ben Abbott  <bpabbott@mac.com>
 
 	* polynomial/residue.m: For each group of pole multiplicity, set
 	the poles of the group to the value of the group's average.
 
 2008-01-17  Tetsuro KURITA  <tkurita@mac.com>
 
 	* plot/print.m: Handle PDF output.
diff --git a/scripts/optimization/sqp.m b/scripts/optimization/sqp.m
--- a/scripts/optimization/sqp.m
+++ b/scripts/optimization/sqp.m
@@ -498,17 +498,17 @@ function [x, obj, info, iter, nf, lambda
     nf = __sqp_nfun__;
 
   else
 
     print_usage ();
 
   endif
 
-### endfunction
+endfunction
 
 
 function [merit, obj] = phi_L1 (obj, obj_fun, ce_fun, ci_fun, x, mu)
 
   global __sqp_nfun__;
 
   ce = feval (ce_fun, x);
   ci = feval (ci_fun, x);
@@ -524,17 +524,17 @@ function [merit, obj] = phi_L1 (obj, obj
 
   merit = obj;
   t = norm (con, 1) / mu;
 
   if (! isempty (t))
     merit += t;
   endif
 
-### endfunction
+endfunction
 
 
 function [x_new, alpha, obj] = linesearch_L1 (x, p, obj_fun, obj_grd,
 					      ce_fun, ci_fun, lambda, obj)
 
   ## Choose parameters
   ##
   ## eta in the range (0, 0.5)
@@ -580,28 +580,28 @@ function [x_new, alpha, obj] = linesearc
       break;
     endif
   endwhile
 
   ## Set x_new = x + alpha * p;
 
   x_new = x + alpha * p;
 
-### endfunction
+endfunction
 
 
 function report (iter, qp_iter, alpha, nfun, obj)
 
   if (nargin == 0)
     printf ("  Itn ItQP     Step  Nfun     Objective\n");
   else
     printf ("%5d %4d %8.1g %5d %13.6e\n", iter, qp_iter, alpha, nfun, obj);
   endif
 
-### endfunction
+endfunction
 
 
 function grd = fdgrd (f, x)
 
   if (! isempty (f))
     y0 = feval (f, x);
     nx = length (x);
     grd = zeros (nx, 1);
@@ -611,17 +611,17 @@ function grd = fdgrd (f, x)
       x(i) += deltax;
       grd(i) = (feval (f, x) - y0) / deltax;
       x(i) = t;
     endfor
   else
     grd = zeros (0, 1);
   endif
 
-### endfunction
+endfunction
 
 
 function jac = fdjac (f, x)
   nx = length (x);
   if (! isempty (f))
     y0 = feval (f, x);
     nf = length (y0);
     nx = length (x);
@@ -632,72 +632,72 @@ function jac = fdjac (f, x)
       x(i) += deltax;
       jac(:,i) = (feval (f, x) - y0) / deltax;
       x(i) = t;
     endfor
   else
     jac = zeros  (0, nx);
   endif
 
-### endfunction
+endfunction
 
 
 function grd = fd_obj_grd (x)
 
   global __sqp_obj_fun__;
 
   grd = fdgrd (__sqp_obj_fun__, x);
 
-### endfunction
+endfunction
 
 
 function res = empty_cf (x)
 
   res = zeros (0, 1);
 
-### endfunction
+endfunction
 
 
 function res = empty_jac (x)
 
   res = zeros (0, length (x));
 
-### endfunction
+endfunction
 
 
 function jac = fd_ce_jac (x)
 
   global __sqp_ce_fun__;
 
   jac = fdjac (__sqp_ce_fun__, x);
 
-### endfunction
+endfunction
 
 
 function jac = fd_ci_jac (x)
 
   global __sqp_cifcn__;
   ## __sqp_cifcn__ = constraint function without gradients and lb or ub
   jac = fdjac (__sqp_cifcn__, x);
 
-### endfunction
+endfunction
 
 
 function res = cf_ub_lb (x)
 
   ## combine constraint function with ub and lb
   global __sqp_cifcn__ __sqp_lb__ __sqp_ub__
 
   res = [x-__sqp_lb__; __sqp_ub__-x];
 
   if (! isempty (__sqp_cifcn__))
     res = [feval(__sqp_cifcn__,x); x-__sqp_lb__; __sqp_ub__-x];
   endif
 
-### endfunction
+endfunction
 
 
 function res = cigrad_ub_lb (x)
 
   global __sqp_cif__
 
   res = [eye(numel(x)); -eye(numel(x))];
 
@@ -706,17 +706,17 @@ function res = cigrad_ub_lb (x)
   if (iscell (__sqp_cif__) && length (__sqp_cif__) > 1)
     cigradfcn = __sqp_cif__{2};
   endif
 	
   if (! isempty (cigradfcn))
     res = [feval(cigradfcn,x); eye(numel(x)); -eye(numel(x))];
   endif
 
-### endfunction
+endfunction
 
 %!function r = g (x)
 %!  r = [sumsq(x)-10;
 %!       x(2)*x(3)-5*x(4)*x(5);
 %!       x(1)^3+x(2)^3+1 ];
 %!
 %!function obj = phi (x)
 %!  obj = exp(prod(x)) - 0.5*(x(1)^3+x(2)^3+1)^2;
