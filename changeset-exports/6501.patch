# HG changeset patch
# User jwe
# Date 1175806420 0
#      Thu Apr 05 20:53:40 2007 +0000
# Node ID 68f3125f6e27416cd76653792d78de88ff3b9bde
# Parent  3ea308b4b37e31b9900ce4a6ebfd078270ff41ca
[project @ 2007-04-05 20:53:40 by jwe]

diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -168,17 +168,16 @@ values for compatibility with @sc{Matlab
   PS1                           = ">> "
   PS2                           = ""
   beep_on_error                 = true
   crash_dumps_octave_core       = false
   default_save_options          = "-mat-binary"
   fixed_point_format            = true
   page_screen_output            = false
   print_empty_dimensions        = false
-  warn_function_name_clash      = false
 @end group
 @end example
 
 @item --verbose
 @itemx -V
 @cindex @code{--verbose}
 @cindex @code{-V}
 Turn on verbose output.
diff --git a/doc/interpreter/emacs.txi b/doc/interpreter/emacs.txi
--- a/doc/interpreter/emacs.txi
+++ b/doc/interpreter/emacs.txi
@@ -117,17 +117,17 @@ Any other key combination is executed no
 abbrevs start with a grave accent.
 
 @item M-LFD
 Break line at point and insert continuation marker and alignment
 (@code{octave-split-line}).
 
 @item M-TAB
 Perform completion on Octave symbol preceding point, comparing that
-symbol against Octave's reserved words and builtin variables
+symbol against Octave's reserved words and built-in variables
 (@code{octave-complete-symbol}). 
 
 @item M-C-a
 Move backward to the beginning of a function
 (@code{octave-beginning-of-defun}).
 With prefix argument @var{N}, do it that many times if @var{N} is
 positive;  otherwise, move forward to the @var{N}-th following beginning
 of a function.
@@ -319,22 +319,19 @@ If Font Lock mode is enabled, Octave mod
 strings in @code{font-lock-string-face}
 @item
 comments in @code{font-lock-comment-face}
 @item
 the Octave reserved words (such as all block keywords) and the text
 functions (such as @samp{cd} or @samp{who}) which are also reserved
 using @code{font-lock-keyword-face}
 @item
-the builtin operators (@samp{&&}, @samp{<>}, @dots{}) using
+the built-in operators (@samp{&&}, @samp{<>}, @dots{}) using
 @code{font-lock-reference-face}
 @item
-the builtin variables (such as @samp{warn_fortran_indexing}, @samp{NaN}
-or @samp{EDITOR}) in @code{font-lock-variable-name-face}
-@item
 and the function names in function declarations in
 @code{font-lock-function-name-face}.
 @end itemize
 
 There is also rudimentary support for Imenu (currently, function names
 can be indexed).
 
 @cindex TAGS
diff --git a/doc/interpreter/eos.txi b/doc/interpreter/eos.txi
--- a/doc/interpreter/eos.txi
+++ b/doc/interpreter/eos.txi
@@ -117,17 +117,17 @@ Any other key combination is executed no
 abbrevs start with a grave accent.
 
 @item M-LFD
 Break line at point and insert continuation marker and alignment
 (@code{octave-split-line}).
 
 @item M-TAB
 Perform completion on Octave symbol preceding point, comparing that
-symbol against Octave's reserved words and builtin variables
+symbol against Octave's reserved words and built-in variables
 (@code{octave-complete-symbol}). 
 
 @item M-C-a
 Move backward to the beginning of a function
 (@code{octave-beginning-of-defun}).
 With prefix argument @var{N}, do it that many times if @var{N} is
 positive;  otherwise, move forward to the @var{N}-th following beginning
 of a function.
@@ -319,22 +319,19 @@ If Font Lock mode is enabled, Octave mod
 strings in @code{font-lock-string-face}
 @item
 comments in @code{font-lock-comment-face}
 @item
 the Octave reserved words (such as all block keywords) and the text
 functions (such as @samp{cd} or @samp{who}) which are also reserved
 using @code{font-lock-keyword-face}
 @item
-the builtin operators (@samp{&&}, @samp{<>}, @dots{}) using
+the built-in operators (@samp{&&}, @samp{<>}, @dots{}) using
 @code{font-lock-reference-face}
 @item
-the builtin variables (such as @samp{warn_fortran_indexing}, @samp{NaN}
-or @samp{LOADPATH}) in @code{font-lock-variable-name-face}
-@item
 and the function names in function declarations in
 @code{font-lock-function-name-face}.
 @end itemize
 
 There is also rudimentary support for Imenu (currently, function names
 can be indexed).
 
 Customization of Octave mode can be performed by modification of the
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -53,22 +53,16 @@ a ([1; 2])  # a column vector
 
 As a special case, when a colon is used as a single index, the output
 is a column vector containing all the elements of the vector or matrix.
 For example
 @example
 a (:)       # a column vector
 @end example
 
-A warning is issued when using a single expression to index a matrix,
-unless the value of the built-in variable @code{warn_fortran_indexing}
-is zero.
-
-@DOCSTRING(warn_fortran_indexing)
-
 Given the matrix
 
 @example
 a = [1, 2; 3, 4]
 @end example
 
 @noindent
 all of the following expressions are equivalent
@@ -113,18 +107,16 @@ a ([1, 1], [1, 1, 1])
 @noindent
 create a 2 by 3 matrix with all elements equal to 13.
 
 This is an obscure notation and should be avoided.  It is better to
 use the function @code{ones} to generate a matrix of the appropriate
 size whose elements are all one, and then to scale it to produce the
 desired result.  @xref{Special Utility Matrices}.
 
-@DOCSTRING(warn_resize_on_range_error)
-
 Note that it is quite inefficient to create a vector using a loop like
 the one shown in the example above.  In this particular case, it would
 have been much more efficient to use the expression
 
 @example
 a = sqrt (1:10);
 @end example
 
@@ -488,18 +480,16 @@ and not
 @end example
 
 @noindent
 Although this is inconsistent with the normal behavior of Octave's
 lexer, which usually prefers to break the input into tokens by
 preferring the longest possible match at any given point, it is more
 useful in this case.
 
-@DOCSTRING(warn_divide_by_zero)
-
 @node Comparison Ops
 @section Comparison Operators
 @cindex comparison expressions
 @cindex expressions, comparison
 @cindex relational operators
 @cindex operators, relational
 @cindex less than operator
 @cindex greater than operator
diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -220,18 +220,16 @@ error if a function is called with too f
 use a variable that has not been given a value will result in an error.
 To avoid such problems and to provide useful messages, we check for both
 possibilities and issue our own error message.
 
 @DOCSTRING(nargin)
 
 @DOCSTRING(silent_functions)
 
-@DOCSTRING(warn_missing_semicolon)
-
 @node Multiple Return Values
 @section Multiple Return Values
 
 Unlike many other computer languages, Octave allows you to define
 functions that return more than one value.  The syntax for defining
 functions that return multiple values is
 
 @example
@@ -308,23 +306,20 @@ produces:
 a = 1
 
 b = [](0x0)
 
 c = 2
 @end example
 
 @noindent
-along with a warning if the value of the built-in variable
-@code{warn_undefined_return_values} is nonzero.
+along with a warning.
 
 @DOCSTRING(nargout)
 
-@DOCSTRING(warn_undefined_return_values)
-
 @DOCSTRING(nargchk)
 
 @node Variable-length Argument Lists
 @section Variable-length Argument Lists
 @cindex variable-length argument lists
 @cindex @code{...}
 
 @node Variable-length Return Lists
@@ -440,20 +435,16 @@ else, Octave will check the time stamps 
 @DOCSTRING(path)
 
 @DOCSTRING(rehash)
 
 @DOCSTRING(file_in_loadpath)
 
 @DOCSTRING(ignore_function_time_stamp)
 
-@DOCSTRING(warn_function_name_clash)
-
-@DOCSTRING(warn_future_time_stamp)
-
 @node Script Files
 @section Script Files
 
 A script file is a file containing (almost) any sequence of Octave
 commands.  It is read and evaluated just as if you had typed each
 command at the Octave prompt, and provides a convenient way to perform a
 sequence of commands that do not logically belong inside a function.
 
@@ -731,18 +722,16 @@ that require user-supplied functions.
 Just as for M-files, Octave will automatically reload a dynamically linked
 function when the file that defines it is more recent than the last
 time that the function was loaded.  If more than one function is defined
 in a single @file{.oct} file, reloading the file may force other
 functions to be cleared and reloaded.  If all the functions loaded from
 a given @file{.oct} file are cleared, Octave will automatically unload
 the @file{.oct} file.
 
-@DOCSTRING(warn_reload_forces_clear)
-
 @c FIXME -- is there a better place for this?
 
 @DOCSTRING(variables_can_hide_functions)
 
 Additional examples for writing dynamically linked functions are
 available in the files in the @file{src} directory of the Octave
 distribution.  Currently, this includes the files
 
diff --git a/doc/interpreter/matrix.txi b/doc/interpreter/matrix.txi
--- a/doc/interpreter/matrix.txi
+++ b/doc/interpreter/matrix.txi
@@ -195,35 +195,24 @@ The @code{rand} and @code{randn} functio
 compiled by Barry W. Brown and James Lovato of the Department of
 Biomathematics at The University of Texas, M.D. Anderson Cancer Center,
 Houston, TX 77030.
 
 @DOCSTRING(randperm)
 
 @DOCSTRING(diag)
 
-@c FIXME -- is this really worth documenting?
-@c
-@c DOCSTRING(warn_imag_to_real)
-@c 
-@c FIXME -- this is here because it is used by @code{ones},
-@c @code{zeros}, @code{rand}, etc.
-
 The functions @code{linspace} and @code{logspace} make it very easy to
 create vectors with evenly or logarithmically spaced elements.
 @xref{Ranges}.
 
 @DOCSTRING(linspace)
 
 @DOCSTRING(logspace)
 
-@DOCSTRING(warn_neg_dim_as_zero)
-
-@DOCSTRING(warn_imag_to_real)
-
 @node Famous Matrices
 @section Famous Matrices
 
 The following functions return famous matrix forms.
 
 @DOCSTRING(hankel)
 
 @DOCSTRING(hilb)
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -231,18 +231,16 @@ because to not do so would cause trouble
 
 @example
 [ a 'foo' ]
 @end example
 
 For clarity, it is probably best to always use commas and semicolons to
 separate matrix elements and rows.
 
-@DOCSTRING(warn_separator_insert)
-
 When you type a matrix or the name of a variable whose value is a
 matrix, Octave responds by printing the matrix in with neatly aligned
 rows and columns.  If the rows of the matrix are too large to fit on the
 screen, Octave splits the matrix and displays a header before each
 section to indicate which columns are being displayed.  You can use the
 following variables to control the format of the output.
 
 @DOCSTRING(output_max_field_width)
@@ -320,18 +318,16 @@ empty matrix symbol, @samp{[]}.  The bui
 @code{print_empty_dimensions} controls this behavior.
 
 @DOCSTRING(print_empty_dimensions)
 
 Empty matrices may also be used in assignment statements as a convenient
 way to delete rows or columns of matrices.
 @xref{Assignment Ops, ,Assignment Expressions}.
 
-@DOCSTRING(warn_empty_list_elements)
-
 When Octave parses a matrix expression, it examines the elements of the
 list to determine whether they are all constants.  If they are, it
 replaces the list with a single matrix constant.
 
 @node Ranges
 @section Ranges
 @cindex range expressions
 @cindex expression, range
diff --git a/doc/interpreter/stmt.txi b/doc/interpreter/stmt.txi
--- a/doc/interpreter/stmt.txi
+++ b/doc/interpreter/stmt.txi
@@ -188,18 +188,16 @@ else
   endif
 @end group
 @end example
 
 @noindent
 using the indentation to show how Octave groups the statements.
 @xref{Functions and Scripts}.
 
-@DOCSTRING(warn_assign_as_truth_value)
-
 @node The switch Statement
 @section The @code{switch} Statement
 @cindex @code{switch} statement
 @cindex @code{case} statement
 @cindex @code{otherwise} statement
 @cindex @code{endswitch} statement
 
 The @code{switch} statement was introduced in Octave 2.0.5.  It should
@@ -287,18 +285,16 @@ particularly for C programmers.
 @item
 The implementation is simple-minded and currently offers no real
 performance improvement over an equivalent @code{if} block, even if all
 the labels are integer constants.  Perhaps a future variation on this
 could detect all constant integer labels and improve performance by
 using a jump table.
 @end itemize
 
-@DOCSTRING(warn_variable_switch_label)
-
 @node The while Statement
 @section The @code{while} Statement
 @cindex @code{while} statement
 @cindex @code{endwhile} statement
 @cindex loop
 @cindex body of a loop
 
 In programming, a @dfn{loop} means a part of a program that is (or at least can
@@ -358,19 +354,16 @@ 10.  This is the case when @code{i} equa
 values in the sequence.  Then the @code{i++} increments the value of
 @code{i} and the loop repeats.  The loop terminates when @code{i}
 reaches 11.
 
 A newline is not required between the condition and the
 body; but using one makes the program clearer unless the body is very
 simple.
 
-@xref{The if Statement}, for a description of the variable
-@code{warn_assign_as_truth_value}.
-
 @node The do-until Statement
 @section The @code{do-until} Statement
 @cindex @code{do-until} statement
 
 The @code{do-until} statement is similar to the @code{while} statement,
 except that it repeatedly executes a statement until a condition becomes
 true, and the test of the condition is at the end of the loop, so the
 body of the loop is always executed at least once.  As with the
@@ -408,19 +401,16 @@ do
 until (i == 10)
 @end group
 @end example
 
 A newline is not required between the @code{do} keyword and the
 body; but using one makes the program clearer unless the body is very
 simple.
 
-@xref{The if Statement}, for a description of the variable
-@code{warn_assign_as_truth_value}.
-
 @node The for Statement
 @section The @code{for} Statement
 @cindex @code{for} statement
 @cindex @code{endfor} statement
 
 The @code{for} statement makes it more convenient to count iterations of a
 loop.  The general form of the @code{for} statement looks like this:
 
@@ -662,32 +652,32 @@ end_unwind_protect
 
 @noindent
 Where @var{body} and @var{cleanup} are both optional and may contain any
 Octave expressions or commands.  The statements in @var{cleanup} are 
 guaranteed to be executed regardless of how control exits @var{body}.
 
 This is useful to protect temporary changes to global variables from
 possible errors.  For example, the following code will always restore
-the original value of the built-in variable @code{warn_fortran_indexing}
+the original value of the global variable @code{frobnositcate}
 even if an error occurs while performing the indexing operation.
 
 @example
 @group
-save_warn_fortran_indexing = warn_fortran_indexing;
+save_frobnosticate = frobnosticate;
 unwind_protect
-  warn_fortran_indexing = 1;
-  elt = a (idx)
+  frobnosticate = true;
+  @dots{}
 unwind_protect_cleanup
-  warn_fortran_indexing = save_warn_fortran_indexing;
+  frobnosticate = save_frobnosticate;
 end_unwind_protect
 @end group
 @end example
 
-Without @code{unwind_protect}, the value of @var{warn_fortran_indexing}
+Without @code{unwind_protect}, the value of @var{frobnosticate}
 would not be restored if an error occurs while performing the indexing
 operation because evaluation would stop at the point of the error and
 the statement to restore the value would not be executed.
 
 @node The try Statement
 @section The @code{try} Statement
 @cindex @code{try} statement
 @cindex @code{catch}
diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -190,22 +190,16 @@ Data Types}, for more information about 
 @DOCSTRING(tolower)
 
 @DOCSTRING(toupper)
 
 @DOCSTRING(do_string_escapes)
 
 @DOCSTRING(undo_string_escapes)
 
-@DOCSTRING(warn_num_to_str)
-
-@DOCSTRING(warn_str_to_num)
-
-@DOCSTRING(warn_single_quote_string)
-
 @node Character Class Functions
 @section Character Class Functions
 
 Octave also provides the following character class test functions
 patterned after the functions in the standard C library.  They all
 operate on string arrays and return matrices of zeros and ones.
 Elements that are nonzero indicate that the condition was true for the
 corresponding character in the string array.  For example,
diff --git a/doc/interpreter/var.txi b/doc/interpreter/var.txi
--- a/doc/interpreter/var.txi
+++ b/doc/interpreter/var.txi
@@ -377,101 +377,16 @@ Default value: 1.
 @xref{Data Structures}.
 
 Default value: 2.
 
 @item suppress_verbose_help_message
 @xref{Getting Help}.
 
 Default value: 1.
-
-@item warn_assign_as_truth_value
-@xref{The if Statement}.
-
-Default value: 1.
-
-@item warn_comma_in_global_decl
-@xref{Global Variables}.
-
-Default value: 1.
-
-@item warn_divide_by_zero
-@xref{Arithmetic Ops}.
-
-Default value: 1.
-
-@item warn_empty_list_elements
-@xref{Empty Matrices}.
-
-Default value: 0.
-
-@item warn_fortran_indexing
-@xref{Index Expressions}.
-
-Default value: 0.
-
-@item warn_function_name_clash
-@xref{Function Files}.
-
-Default value: 1.
-
-@item warn_imag_to_real
-@xref{Special Utility Matrices}.
-
-Default value: 0.
-
-@item warn_missing_semicolon
-@xref{Defining Functions}.
-
-Default value: 0.
-
-@item warn_neg_dim_as_zero
-@xref{Special Utility Matrices}.
-
-Default value: 0.
-
-@item warn_num_to_str
-@xref{String Conversions}.
-
-Default value: 1.
-
-@item warn_reload_forces_clear
-@xref{Dynamically Linked Functions}.
-
-Default value: 1.
-
-@item warn_resize_on_range_error
-@xref{Index Expressions}.
-
-Default value: 0.
-
-@item warn_separator_insert
-@xref{Matrices}.
-
-Default value: 0.
-
-@item warn_single_quote_string
-@xref{String Conversions}.
-
-Default value: 0.
-
-@item warn_str_to_num
-@xref{String Conversions}.
-
-Default value: 0.
-
-@item warn_undefined_return_values
-@xref{Multiple Return Values}.
-
-Default value: 0.
-
-@item warn_variable_switch_label
-@xref{The switch Statement}.
-
-Default value: 0.
 @end vtable
 
 
 @node Defaults from the Environment
 @section Defaults from the Environment
 
 Octave uses the values of the following environment variables to set the
 default values for the corresponding built-in or internal variables.
