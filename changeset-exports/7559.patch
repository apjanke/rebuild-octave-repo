# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1204745006 18000
#      Wed Mar 05 14:23:26 2008 -0500
# Node ID 07522d7dcdf865c06edbdc5b4e9c2f732c86820a
# Parent  690c91f741b8668661ffd66c1dcf9d24db80d7d0
fixes to QR and Cholesky updating code

diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,12 @@
+2008-03-05  Jaroslav Hajek <highegg@gmail.com>
+
+	* qrupdate/dch1dn.f, qrupdate/zch1dn.f: add "quick return" checks.
+
 2008-03-04 Jaroslav Hajek <highegg@gmail.com>
 
 	* qrupdate/dch1dn.f, qrupdate/dch1up.f, 
 	qrupdate/zch1dn.f, qrupdate/zch1up.f: New files.
 	* qrupdate/Makefile.in (FSRC): Add them to the list.
 
 	* qrupdate/Makefile.in, qrupdate/dqhqr.f, qrupdate/dqr1up.f,
 	qrupdate/dqrdec.f, qrupdate/dqrder.f, qrupdate/dqrinc.f,
diff --git a/libcruft/qrupdate/dch1dn.f b/libcruft/qrupdate/dch1dn.f
--- a/libcruft/qrupdate/dch1dn.f
+++ b/libcruft/qrupdate/dch1dn.f
@@ -36,16 +36,18 @@ c
       integer n,info
       double precision R(n,n),u(n)
       double precision w(n)
       external dtrsv,dcopy,dlartg,dnrm2
       double precision rho,dnrm2
       double precision rr,ui,t
       integer i,j
 
+c quick return if possible
+      if (n <= 0) return
 c check for singularity of R
       do i = 1,n
         if (R(i,i) == 0d0) then
           info = 2
           return
         end if
       end do
 c form R' \ u
diff --git a/libcruft/qrupdate/zch1dn.f b/libcruft/qrupdate/zch1dn.f
--- a/libcruft/qrupdate/zch1dn.f
+++ b/libcruft/qrupdate/zch1dn.f
@@ -36,16 +36,18 @@ c
       integer n,info
       double complex R(n,n),u(n)
       double precision w(n)
       external ztrsv,zcopy,zlartg,dznrm2
       double precision rho,dznrm2
       double complex crho,rr,ui,t
       integer i,j
 
+c quick return if possible
+      if (n <= 0) return
 c check for singularity of R
       do i = 1,n
         if (R(i,i) == 0d0) then
           info = 2
           return
         end if
       end do
 c form R' \ u
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2008-03-05  Jaroslav Hajek <highegg@gmail.com>
+
+	* dbleCHOL.cc: Small doc and declaration fixes.
+	* CmplxHOL.cc: Small doc and declaration fixes.
+	* CmplxQR.cc (ComplexQR::ComplexQR): Adjust code to match dbleQR.cc.
+	* dbleQR.cc (QR::delete_row): Fix incorrect test.
+	* CmplxQR.cc (ComplexQR::delete_row): Fix incorrect test.
+
 2008-03-04  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dbleCHOL.cc (CHOL::set, CHOL::update, CHOL::downdate):
 	New functions.
 	* dbleCHOL.h: Provide decls.
 	* CmplxCHOL.cc (ComplexCHOL::set, ComplexCHOL::update,
 	ComplexCHOL::downdate): New functions.
 	* CmplxCHOL.h: Provide decls.
diff --git a/liboctave/CmplxCHOL.cc b/liboctave/CmplxCHOL.cc
--- a/liboctave/CmplxCHOL.cc
+++ b/liboctave/CmplxCHOL.cc
@@ -162,17 +162,17 @@ ComplexCHOL::inverse (void) const
 }
 
 void
 ComplexCHOL::set (const ComplexMatrix& R)
 {
   if (R.is_square ()) 
     chol_mat = R;
   else
-    (*current_liboctave_error_handler) ("chol2inv requires square matrix");
+    (*current_liboctave_error_handler) ("CHOL requires square matrix");
 }
 
 void
 ComplexCHOL::update (const ComplexMatrix& u)
 {
   octave_idx_type n = chol_mat.rows ();
 
   if (u.length () == n)
@@ -200,17 +200,17 @@ ComplexCHOL::downdate (const ComplexMatr
       ComplexMatrix tmp = u;
 
       OCTAVE_LOCAL_BUFFER (double, w, n);
 
       F77_XFCN (zch1dn, ZCH1DN, (n, chol_mat.fortran_vec (),
 				 tmp.fortran_vec (), w, info));
     }
   else
-    (*current_liboctave_error_handler) ("CHOL update dimension mismatch");
+    (*current_liboctave_error_handler) ("CHOL downdate dimension mismatch");
 
   return info;
 }
 
 ComplexMatrix
 chol2inv (const ComplexMatrix& r)
 {
   return chol2inv_internal (r);
diff --git a/liboctave/CmplxQR.cc b/liboctave/CmplxQR.cc
--- a/liboctave/CmplxQR.cc
+++ b/liboctave/CmplxQR.cc
@@ -150,17 +150,16 @@ ComplexQR::init (const ComplexMatrix& a,
       F77_XFCN (zungqr, ZUNGQR, (m, n2, min_mn, tmp_data, m, ptau,
 				 pwork2, lwork, info));
 
       q = A_fact;
       q.resize (m, n2);
     }
 }
 
-
 ComplexQR::ComplexQR (const ComplexMatrix &q, const ComplexMatrix& r)
 {
   if (q.columns () != r.rows ()) 
     {
       (*current_liboctave_error_handler) ("QR dimensions mismatch");
       return;
     }
 
@@ -170,21 +169,21 @@ ComplexQR::ComplexQR (const ComplexMatri
 
 void
 ComplexQR::update (const ComplexMatrix& u, const ComplexMatrix& v)
 {
   octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
   octave_idx_type k = q.columns ();
 
-  if (u.length () != m || v.length () != n)
-    (*current_liboctave_error_handler) ("QR update dimensions mismatch");
-  else
+  if (u.length () == m && v.length () == n)
     F77_XFCN (zqr1up, ZQR1UP, (m, n, k, q.fortran_vec (), r.fortran_vec (), 
 			       u.data (), v.data ()));
+  else
+    (*current_liboctave_error_handler) ("QR update dimensions mismatch");
 }
 
 void
 ComplexQR::insert_col (const ComplexMatrix& u, octave_idx_type j)
 {
   octave_idx_type m = q.rows ();
   octave_idx_type n = r.columns ();
   octave_idx_type k = q.columns ();
@@ -252,17 +251,17 @@ ComplexQR::insert_row (const ComplexMatr
 void
 ComplexQR::delete_row (octave_idx_type j)
 {
   octave_idx_type m = r.rows ();
   octave_idx_type n = r.columns ();
 
   if (! q.is_square ())
     (*current_liboctave_error_handler) ("QR insert dimensions mismatch");
-  else if (j < 1 || j > n) 
+  else if (j < 1 || j > m) 
     (*current_liboctave_error_handler) ("QR delete index out of range");
   else
     {
       ComplexMatrix q1 (m-1, m-1);
       ComplexMatrix r1 (m-1, n);
 
       F77_XFCN (zqrder, ZQRDER, (m, n, q.data (), q1.fortran_vec (), 
 				 r.data (), r1.fortran_vec (), j ));
diff --git a/liboctave/dbleCHOL.cc b/liboctave/dbleCHOL.cc
--- a/liboctave/dbleCHOL.cc
+++ b/liboctave/dbleCHOL.cc
@@ -51,17 +51,17 @@ extern "C"
 			     double*, const octave_idx_type&, const double&,
 			     double&, double*, octave_idx_type*, 
 			     octave_idx_type& F77_CHAR_ARG_LEN_DECL);
   F77_RET_T
   F77_FUNC (dch1up, DCH1UP) (const octave_idx_type&, double*, double*, double*);
 
   F77_RET_T
   F77_FUNC (dch1dn, DCH1DN) (const octave_idx_type&, double*, double*, double*, 
-                             int &);
+                             octave_idx_type&);
 }
 
 octave_idx_type
 CHOL::init (const Matrix& a, bool calc_cond)
 {
   octave_idx_type a_nr = a.rows ();
   octave_idx_type a_nc = a.cols ();
 
@@ -166,23 +166,23 @@ CHOL::inverse (void) const
 }
 
 void
 CHOL::set (const Matrix& R)
 {
   if (R.is_square ()) 
     chol_mat = R;
   else
-    (*current_liboctave_error_handler) ("chol2inv requires square matrix");
+    (*current_liboctave_error_handler) ("CHOL requires square matrix");
 }
 
 void
 CHOL::update (const Matrix& u)
 {
-  int n = chol_mat.rows ();
+  octave_idx_type n = chol_mat.rows ();
 
   if (u.length () == n)
     {
       Matrix tmp = u;
 
       OCTAVE_LOCAL_BUFFER (double, w, n);
 
       F77_XFCN (dch1up, DCH1UP, (n, chol_mat.fortran_vec (),
@@ -204,17 +204,17 @@ CHOL::downdate (const Matrix& u)
       Matrix tmp = u;
 
       OCTAVE_LOCAL_BUFFER (double, w, n);
 
       F77_XFCN (dch1dn, DCH1DN, (n, chol_mat.fortran_vec (),
 				 tmp.fortran_vec (), w, info));
     }
   else
-    (*current_liboctave_error_handler) ("CHOL update dimension mismatch");
+    (*current_liboctave_error_handler) ("CHOL downdate dimension mismatch");
 
   return info;
 }
 
 Matrix
 chol2inv (const Matrix& r)
 {
   return chol2inv_internal (r);
diff --git a/liboctave/dbleQR.cc b/liboctave/dbleQR.cc
--- a/liboctave/dbleQR.cc
+++ b/liboctave/dbleQR.cc
@@ -240,17 +240,17 @@ QR::insert_row (const Matrix& u, octave_
 void
 QR::delete_row (octave_idx_type j)
 {
   octave_idx_type m = r.rows ();
   octave_idx_type n = r.columns ();
 
   if (! q.is_square ())
     (*current_liboctave_error_handler) ("QR insert dimensions mismatch");
-  else if (j < 1 || j > n) 
+  else if (j < 1 || j > m) 
     (*current_liboctave_error_handler) ("QR delete index out of range");
   else
     {
       Matrix q1 (m-1, m-1);
       Matrix r1 (m-1, n);
 
       F77_XFCN (dqrder, DQRDER, (m, n, q.data (), q1.fortran_vec (), 
 				 r.data (), r1.fortran_vec (), j ));
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2008-03-05  Jaroslav Hajek <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/chol.cc (Fcholupdate): Adjust code to meet 
+	Octave's coding guidelines.
+
+	* DLD-FUNCTIONS/qr.cc (Fqrupdate, Fqrinsert, Fqrdelete): Adjust 
+	code to meet Octave's coding guidelines.
+	* DLD-FUNCTIONS/qr.cc (Fqrdelete): Fix incorrect test. 
+
 2008-03-04  Jaroslav Hajek <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/chol.cc (Fcholupdate): New function.
 
 	* DLD-FUNCTIONS/qr.cc (Fqrupdate, Fqrinsert, Fqrdelete):
 	New functions.
 
 2008-03-04  Ryan Rusaw  <rrusaw@gmail.com>
diff --git a/src/DLD-FUNCTIONS/chol.cc b/src/DLD-FUNCTIONS/chol.cc
--- a/src/DLD-FUNCTIONS/chol.cc
+++ b/src/DLD-FUNCTIONS/chol.cc
@@ -466,41 +466,45 @@ If @var{op} is \"-\", @var{info} is set 
 @item 1 if @var{R}'*@var{R} - @var{u}*@var{u}' is not positive definite,\n\
 @item 2 if @var{R} is singular.\n\
 @end itemize\n\
 \n\
 If @var{info} is not present, an error message is printed in cases 1 and 2.\n\
 @seealso{chol, qrupdate}\n\
 @end deftypefn")
 {
-  int nargin = args.length ();
+  octave_idx_type nargin = args.length ();
 
   octave_value_list retval;
 
-  octave_value argR,argu,argop;
+  if (nargin > 3 || nargin < 2)
+    {
+      print_usage ();
+      return retval;
+    }
 
-  if ((nargin == 3 || nargin == 2)
-      && (argR = args(0), argR.is_matrix_type ())
-      && (argu = args(1), argu.is_matrix_type ())
-      && (nargin < 3 || (argop = args(2), argop.is_string ())))
-    {
-      octave_idx_type n = argR.rows ();
+  octave_value argr = args(0);
+  octave_value argu = args(1);
 
-      std::string op = (nargin < 3) ? "+" : argop.string_value();
+  if (argr.is_matrix_type () && argu.is_matrix_type ()
+      && (nargin < 3 || args(2).is_string ()))
+    {
+      octave_idx_type n = argr.rows ();
 
-      bool down = false;
+      std::string op = (nargin < 3) ? "+" : args(2).string_value ();
 
-      if (nargin < 3 || (op == "+") || (down = op == "-"))
-        if (argR.columns () == n 
-            && argu.rows () == n && argu.columns () == 1)
+      bool down = op == "-";
+
+      if (down || op == "+")
+        if (argr.columns () == n && argu.rows () == n && argu.columns () == 1)
           {
-            if (argR.is_real_matrix () && argu.is_real_matrix ())
+            if (argr.is_real_matrix () && argu.is_real_matrix ())
               {
                 // real case
-                Matrix R = argR.matrix_value ();
+                Matrix R = argr.matrix_value ();
                 Matrix u = argu.matrix_value ();
 
                 CHOL fact;
                 fact.set (R);
                 int err = 0;
 
                 if (down)
                   err = fact.downdate (u);
@@ -512,17 +516,17 @@ If @var{info} is not present, an error m
                 else if (err)
                   error ("cholupdate: downdate violates positiveness");
 
                 retval(0) = fact.chol_matrix ();
               }
             else
               {
                 // complex case
-                ComplexMatrix R = argR.complex_matrix_value ();
+                ComplexMatrix R = argr.complex_matrix_value ();
                 ComplexMatrix u = argu.complex_matrix_value ();
 
                 ComplexCHOL fact;
                 fact.set (R);
                 int err = 0;
 
                 if (down)
                   err = fact.downdate (u);
diff --git a/src/DLD-FUNCTIONS/qr.cc b/src/DLD-FUNCTIONS/qr.cc
--- a/src/DLD-FUNCTIONS/qr.cc
+++ b/src/DLD-FUNCTIONS/qr.cc
@@ -443,54 +443,60 @@ column vectors (rank-1 update).\n\
 If the matrix @var{Q} is not square, the matrix @var{A} is updated by\n\
 Q*Q'*u*v' instead of u*v'.\n\
 @seealso{qr, qrinsert, qrdelete}\n\
 @end deftypefn")
 {
   octave_idx_type nargin = args.length ();
   octave_value_list retval;
 
-  octave_value argQ,argR,argu,argv;
+  if (nargin != 4)
+    {
+      print_usage ();
+      return retval;
+    }
 
-  if (nargin == 4
-      && (argQ = args(0),argQ.is_matrix_type ())
-      && (argR = args(1),argR.is_matrix_type ())
-      && (argu = args(2),argu.is_matrix_type ())
-      && (argv = args(3),argv.is_matrix_type ()))
+  octave_value argq = args(0);
+  octave_value argr = args(1);
+  octave_value argu = args(2);
+  octave_value argv = args(3);
+
+  if (argq.is_matrix_type () && argr.is_matrix_type () 
+      && argu.is_matrix_type () && argv.is_matrix_type ())
     {
-      octave_idx_type m = argQ.rows ();
-      octave_idx_type n = argR.columns ();
-      octave_idx_type k = argQ.columns ();
+      octave_idx_type m = argq.rows ();
+      octave_idx_type n = argr.columns ();
+      octave_idx_type k = argq.columns ();
 
-      if (argR.rows () == k
+      if (argr.rows () == k
           && argu.rows () == m && argu.columns () == 1
           && argv.rows () == n && argv.columns () == 1)
         {
-          if (argQ.is_real_matrix () 
-	      && argR.is_real_matrix () 
+          if (argq.is_real_matrix () 
+	      && argr.is_real_matrix () 
 	      && argu.is_real_matrix () 
 	      && argv.is_real_matrix ())
             {
               // all real case
-              Matrix Q = argQ.matrix_value ();
-              Matrix R = argR.matrix_value ();
+              Matrix Q = argq.matrix_value ();
+              Matrix R = argr.matrix_value ();
               Matrix u = argu.matrix_value ();
               Matrix v = argv.matrix_value ();
 
               QR fact (Q, R);
               fact.update (u, v);
 
               retval(1) = fact.R ();
               retval(0) = fact.Q ();
             }
           else
             {
               // complex case
-              ComplexMatrix Q = argQ.complex_matrix_value ();
-              ComplexMatrix R = argR.complex_matrix_value ();
+              ComplexMatrix Q = argq.complex_matrix_value ();
+              ComplexMatrix R = argr.complex_matrix_value ();
               ComplexMatrix u = argu.complex_matrix_value ();
               ComplexMatrix v = argv.complex_matrix_value ();
 
               ComplexQR fact (Q, R);
               fact.update (u, v);
               
               retval(1) = fact.R ();
               retval(0) = fact.Q ();
@@ -572,67 +578,73 @@ spanned by columns of @var{Q}, i.e. Q*Q'
 \n\
 If @var{orient} is @code{\"row\"}, @var{Q} must be square.\n\
 @seealso{qr, qrupdate, qrdelete}\n\
 @end deftypefn")
 {
   octave_idx_type nargin = args.length ();
   octave_value_list retval;
 
-  octave_value argQ,argR,argj,argx,argor;
-
-  if ((nargin == 4 || nargin == 5)
-      && (argQ = args(0), argQ.is_matrix_type ())
-      && (argR = args(1), argR.is_matrix_type ())
-      && (argj = args(2), argj.is_scalar_type ())
-      && (argx = args(3), argx.is_matrix_type ())
-      && (nargin < 5 || (argor = args (4), argor.is_string ())))
+  if (nargin < 4 || nargin > 5)
     {
-      octave_idx_type m = argQ.rows ();
-      octave_idx_type n = argR.columns ();
-      octave_idx_type k = argQ.columns();
+      print_usage ();
+      return retval;
+    }
+  
+  octave_value argq = args(0);
+  octave_value argr = args(1);
+  octave_value argj = args(2);
+  octave_value argx = args(3);
+      
+  if (argq.is_matrix_type () && argr.is_matrix_type ()
+      && argj.is_scalar_type () && argx.is_matrix_type ()
+      && (nargin < 5 || args(4).is_string ()))
+    {
+      octave_idx_type m = argq.rows ();
+      octave_idx_type n = argr.columns ();
+      octave_idx_type k = argq.columns ();
 
-      bool row = false;
+      std::string orient = (nargin < 5) ? "col" : args(4).string_value ();
 
-      std::string orient = (nargin < 5) ? "col" : argor.string_value ();
+      bool row = orient == "row";
 
-      if (nargin < 5 || (row = orient == "row") || (orient == "col"))
-        if (argR.rows () == k 
+      if (row || orient == "col")
+        if (argr.rows () == k 
             && (! row || m == k)
             && argx.rows () == (row ? 1 : m)
             && argx.columns () == (row ? n : 1))
           {
-            int j = argj.int_value ();
+            octave_idx_type j = argj.int_value ();
 
             if (j >= 1 && j <= (row ? n : m)+1)
               {
-                if (argQ.is_real_matrix () 
-		    && argR.is_real_matrix () 
+                if (argq.is_real_matrix () 
+		    && argr.is_real_matrix () 
 		    && argx.is_real_matrix ())
                   {
                     // real case
-                    Matrix Q = argQ.matrix_value ();
-                    Matrix R = argR.matrix_value ();
+                    Matrix Q = argq.matrix_value ();
+                    Matrix R = argr.matrix_value ();
                     Matrix x = argx.matrix_value ();
 
                     QR fact (Q, R);
 
                     if (row) 
-                      fact.insert_row(x, j);
+                      fact.insert_row (x, j);
                     else 
-                      fact.insert_col(x, j);
+                      fact.insert_col (x, j);
 
                     retval(1) = fact.R ();
                     retval(0) = fact.Q ();
                   }
                 else
                   {
                     // complex case
-                    ComplexMatrix Q = argQ.complex_matrix_value ();
-                    ComplexMatrix R = argR.complex_matrix_value ();
+                    ComplexMatrix Q = argq.complex_matrix_value ();
+                    ComplexMatrix R = argr.complex_matrix_value ();
                     ComplexMatrix x = argx.complex_matrix_value ();
 
                     ComplexQR fact (Q, R);
 
                     if (row) 
                       fact.insert_row (x, j);
                     else 
                       fact.insert_col (x, j);
@@ -740,59 +752,64 @@ Given a QR@tie{}factorization of a real 
 \n\
 The default value of @var{orient} is \"col\".\n\
 \n\
 If @var{orient} is \"col\", the matrix @var{Q} is not required to\n\
 be square.\n\
 \n\
 For @sc{Matlab} compatibility, if @var{Q} is nonsquare on input, the\n\
 updated factorization is always stripped to the economical form, i.e.\n\
-@code{columns (Q) == rows (R) = columns (R)}.\n\
+@code{columns (Q) == rows (R) <= columns (R)}.\n\
 \n\
 To get the less intelligent but more natural behaviour when @var{Q}\n\
 retains it shape and @var{R} loses one column, set @var{orient} to\n\
 \"col+\" instead.\n\
 \n\
 If @var{orient} is \"row\", @var{Q} must be square.\n\
 @seealso{qr, qrinsert, qrupdate}\n\
 @end deftypefn")
 {
-  int nargin = args.length ();
+  octave_idx_type nargin = args.length ();
   octave_value_list retval;
 
-  octave_value argQ,argR,argj,argor;
+  if (nargin < 3 || nargin > 4)
+    {
+      print_usage ();
+      return retval;
+    }
 
-  if ((nargin == 3 || nargin == 4)
-      && (argQ = args(0), argQ.is_matrix_type ())
-      && (argR = args(1), argR.is_matrix_type ())
-      && (argj = args(2), argj.is_scalar_type ())
-      && (nargin < 4 || (argor = args (3), argor.is_string ())))
-    {
-      octave_idx_type m = argQ.rows ();
-      octave_idx_type k = argQ.columns ();
-      octave_idx_type n = argR.columns ();
+  octave_value argq = args(0);
+  octave_value argr = args(1);
+  octave_value argj = args(2);
 
-      bool row = false;
-      bool colp = false;
+  if (argq.is_matrix_type () && argr.is_matrix_type () && argj.is_scalar_type ()
+      && (nargin < 4 || args(3).is_string ()))
+    {
+      octave_idx_type m = argq.rows ();
+      octave_idx_type k = argq.columns ();
+      octave_idx_type n = argr.columns ();
 
-      std::string orient = (nargin < 4) ? "col" : argor.string_value ();
+      std::string orient = (nargin < 4) ? "col" : args(3).string_value ();
 
-      if (nargin < 4 || (row = orient == "row") 
-          || (orient == "col") || (colp = orient == "col+"))
-        if (argR.rows() == k)
+      bool row = orient == "row";
+      bool colp = orient == "col+";
+
+      if (row || colp || orient == "col")
+        if (argr.rows () == k
+            && (! row || m == k))
           {
-            int j = argj.scalar_value ();
-            if (j >= 1 && j <= (row ? n : m)+1)
+            octave_idx_type j = argj.scalar_value ();
+            if (j >= 1 && j <= (row ? n : m))
               {
-                if (argQ.is_real_matrix ()
-		    && argR.is_real_matrix ())
+                if (argq.is_real_matrix ()
+		    && argr.is_real_matrix ())
                   {
                     // real case
-                    Matrix Q = argQ.matrix_value ();
-                    Matrix R = argR.matrix_value ();
+                    Matrix Q = argq.matrix_value ();
+                    Matrix R = argr.matrix_value ();
 
                     QR fact (Q, R);
 
                     if (row) 
                       fact.delete_row (j);
                     else 
                       {
                         fact.delete_col (j);
@@ -802,18 +819,18 @@ If @var{orient} is \"row\", @var{Q} must
                       }
 
                     retval(1) = fact.R ();
                     retval(0) = fact.Q ();
                   }
                 else
                   {
                     // complex case
-                    ComplexMatrix Q = argQ.complex_matrix_value ();
-                    ComplexMatrix R = argR.complex_matrix_value ();
+                    ComplexMatrix Q = argq.complex_matrix_value ();
+                    ComplexMatrix R = argr.complex_matrix_value ();
 
                     ComplexQR fact (Q, R);
 
                     if (row) 
                       fact.delete_row (j);
                     else 
                       {
                         fact.delete_col (j);
