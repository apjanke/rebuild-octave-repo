# HG changeset patch
# User Rik <rik@octave.org>
# Date 1453140056 28800
#      Mon Jan 18 10:00:56 2016 -0800
# Node ID 52af4092f863674c86ae796baf1066625379fd83
# Parent  99d373870017255e86fc167251ef7a12c15484fb
For optimization scripts, correctly choose tolerance (eps) based on class of fun and X0.

* fminbnd.m, fminsearch.m, fminunc.m, fsolve.m: Use 'isa (..., "single")' to
check both initial guess X0 and result of function evaluation to decide whether
eps should be single or double.

diff --git a/scripts/optimization/fminbnd.m b/scripts/optimization/fminbnd.m
--- a/scripts/optimization/fminbnd.m
+++ b/scripts/optimization/fminbnd.m
@@ -93,36 +93,41 @@ function [x, fval, info, output] = fminb
     ## Replace fun with a guarded version.
     fun = @(x) guarded_eval (fun, x);
   endif
 
   ## The default exit flag if exceeded number of iterations.
   info = 0;
   niter = 0;
   nfev = 0;
-  sqrteps = eps (class (xmin + xmax));
 
   c = 0.5*(3 - sqrt (5));
   a = xmin; b = xmax;
   v = a + c*(b-a);
   w = x = v;
   e = 0;
   fv = fw = fval = fun (x);
   nfev += 1;
 
+  if (isa (xmin, "single") || isa (xmax, "single") || isa (fval, "single"))
+    sqrteps = eps ("single");
+  else
+    sqrteps = eps ("double");
+  endif
+
   ## Only for display purposes.
   iter(1).funccount = nfev;
   iter(1).x = x;
   iter(1).fx = fval;
 
   while (niter < maxiter && nfev < maxfev)
     xm = 0.5*(a+b);
     ## FIXME: the golden section search can actually get closer than sqrt(eps)
     ## sometimes.  Sometimes not, it depends on the function.  This is the
-    ## strategy from the Netlib code.  Something yet smarter would be good.
+    ## strategy from the Netlib code.  Something smarter would be good.
     tol = 2 * sqrteps * abs (x) + tolx / 3;
     if (abs (x - xm) <= (2*tol - 0.5*(b-a)))
       info = 1;
       break;
     endif
 
     if (abs (e) > tol)
       dogs = false;
diff --git a/scripts/optimization/fminsearch.m b/scripts/optimization/fminsearch.m
--- a/scripts/optimization/fminsearch.m
+++ b/scripts/optimization/fminsearch.m
@@ -47,20 +47,20 @@
 ## @end group
 ## @end example
 ## @seealso{fminbnd, fminunc, optimset}
 ## @end deftypefn
 
 ## PKG_ADD: ## Discard result to avoid polluting workspace with ans at startup.
 ## PKG_ADD: [~] = __all_opts__ ("fminsearch");
 
-## FIXME: Add support for "exitflag" output variable
-## FIXME: Add support for "output" output variable
+## FIXME: Add support for "exitflag" output variable.
+## FIXME: Add support for "output" output variable.
 ## FIXME: For Display option, add 'final' and 'notify' options.  Not too hard.
-## FIXME: Add support for OutputFcn.  See fminunc for a template
+## FIXME: Add support for OutputFcn.  See fminunc for a template.
 ## FIXME: Add support for exiting based on TolFun.  See fminunc for an idea.
 
 function [x, fval] = fminsearch (fun, x0, options = struct ())
 
   ## Get default options if requested.
   if (nargin == 1 && ischar (fun) && strcmp (fun, "defaults"))
     x = optimset ("Display", "notify", "FunValCheck", "off",
                   "MaxFunEvals", 400, "MaxIter", 400,
diff --git a/scripts/optimization/fminunc.m b/scripts/optimization/fminunc.m
--- a/scripts/optimization/fminunc.m
+++ b/scripts/optimization/fminunc.m
@@ -138,18 +138,16 @@ function [x, fval, info, output, grad, h
   if (funvalchk)
     ## Replace fcn with a guarded version.
     fcn = @(x) guarded_eval (fcn, x);
   endif
 
   ## These defaults are rather stringent.  I think that normally, user
   ## prefers accuracy to performance.
 
-  macheps = eps (class (x0));
-
   tolx = optimget (options, "TolX", 1e-7);
   tolf = optimget (options, "TolFun", 1e-7);
 
   factor = 0.1;
   ## FIXME: TypicalX corresponds to user scaling (???)
   autodg = true;
 
   niter = 1;
@@ -170,16 +168,22 @@ function [x, fval, info, output, grad, h
     state = "init";
     stop = outfcn (x, optimvalues, state);
     if (stop)
       info = -1;
       break;
     endif
   endif
 
+  if (isa (x0, "single") || isa (fval, "single"))
+    macheps = eps ("single");
+  else
+    macheps = eps ("double");
+  endif
+
   nsuciter = 0;
   lastratio = 0;
 
   grad = [];
 
   ## Outer loop.
   while (niter < maxiter && nfev < maxfev && ! info)
 
diff --git a/scripts/optimization/fsolve.m b/scripts/optimization/fsolve.m
--- a/scripts/optimization/fsolve.m
+++ b/scripts/optimization/fsolve.m
@@ -180,20 +180,18 @@ function [x, fvec, info, output, fjac] =
 
   funvalchk = strcmpi (optimget (options, "FunValCheck", "off"), "on");
 
   if (funvalchk)
     ## Replace fcn with a guarded version.
     fcn = @(x) guarded_eval (fcn, x, complexeqn);
   endif
 
-  ## These defaults are rather stringent. I think that normally, user
-  ## prefers accuracy to performance.
-
-  macheps = eps (class (x0));
+  ## These defaults are rather stringent.
+  ## Normally user prefers accuracy to performance.
 
   tolx = optimget (options, "TolX", 1e-7);
   tolf = optimget (options, "TolFun", 1e-7);
 
   factor = 1;
 
   niter = 1;
   nfev = 1;
@@ -218,16 +216,22 @@ function [x, fvec, info, output, fjac] =
     state = 'init';
     stop = outfcn (x, optimvalues, state);
     if (stop)
       info = -1;
       break;
     endif
   endif
 
+  if (isa (x0, "single") || isa (fvec, "single"))
+    macheps = eps ("single");
+  else
+    macheps = eps ("double");
+  endif
+
   nsuciter = 0;
 
   ## Outer loop.
   while (niter < maxiter && nfev < maxfev && ! info)
 
     ## Calculate function value and Jacobian (possibly via FD).
     if (has_jac)
       [fvec, fjac] = fcn (reshape (x, xsiz));
