# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1340700879 -7200
#      Tue Jun 26 10:54:39 2012 +0200
# Branch gui
# Node ID 625be3eb27c576df90dc22873265f18bb50c9a74
# Parent  67c6835e51b6250c2f1ff99fb5f1ac1d4aae58f2
Current directories now synchronize on top, in the file browser and the cwd in octave.

* files-dockwidget: Refactored method names and redundand code. Added new signal that get emitted whenever the displayed directory changes.
* main-window: Added new slot to react on directory changes. Informing the file browser of a directory change now.

diff --git a/gui/src/files-dockwidget.cc b/gui/src/files-dockwidget.cc
--- a/gui/src/files-dockwidget.cc
+++ b/gui/src/files-dockwidget.cc
@@ -33,144 +33,130 @@ files_dock_widget::files_dock_widget (QW
   setWidget (new QWidget (this));
 
   // Create a toolbar
   _navigation_tool_bar = new QToolBar ("", widget ());
   _navigation_tool_bar->setAllowedAreas (Qt::TopToolBarArea);
   _navigation_tool_bar->setMovable (false);
   _navigation_tool_bar->setIconSize (QSize (20, 20));
 
-  // Add a button to the toolbar with the QT standard icon for up-directory
   _directory_icon = QIcon(":/actions/icons/up.png");
   _directory_up_action = new QAction (_directory_icon, "", _navigation_tool_bar);
   _directory_up_action->setStatusTip (tr ("Move up one directory."));
 
+  _last_current_directory = "";
   _current_directory = new QLineEdit (_navigation_tool_bar);
   _current_directory->setStatusTip (tr ("Enter the path or filename."));
 
   _navigation_tool_bar->addAction (_directory_up_action);
   _navigation_tool_bar->addWidget (_current_directory);
   connect (_directory_up_action, SIGNAL (triggered ()), this,
            SLOT (do_up_directory ()));
 
   // TODO: Add other buttons for creating directories
 
   // Create the QFileSystemModel starting in the home directory
-  QString
-    homePath = QDir::homePath ();
-  // TODO: This should occur after Octave has been initialized and the startup directory of Octave is established
+  QString homePath = QDir::homePath ();
 
   _file_system_model = new QFileSystemModel (this);
   _file_system_model->setFilter (QDir::NoDotAndDotDot | QDir::AllEntries);
-  QModelIndex
-    rootPathIndex = _file_system_model->setRootPath (homePath);
+  QModelIndex rootPathIndex = _file_system_model->setRootPath (homePath);
 
   // Attach the model to the QTreeView and set the root index
   _file_tree_view = new QTreeView (widget ());
   _file_tree_view->setModel (_file_system_model);
   _file_tree_view->setRootIndex (rootPathIndex);
   _file_tree_view->setSortingEnabled (true);
   _file_tree_view->setAlternatingRowColors (true);
   _file_tree_view->setAnimated (true);
   _file_tree_view->setColumnHidden (1, true);
   _file_tree_view->setColumnHidden (2, true);
   _file_tree_view->setColumnHidden (3, true);
   _file_tree_view->setStatusTip (tr ("Doubleclick a file to open it."));
 
-  set_current_directory (_file_system_model->fileInfo (rootPathIndex).
+  _current_directory->setText(_file_system_model->fileInfo (rootPathIndex).
                        absoluteFilePath ());
 
   connect (_file_tree_view, SIGNAL (doubleClicked (const QModelIndex &)), this,
            SLOT (item_double_clicked (const QModelIndex &)));
 
   // Layout the widgets vertically with the toolbar on top
   QVBoxLayout *
     layout = new QVBoxLayout ();
   layout->setSpacing (0);
   layout->addWidget (_navigation_tool_bar);
   layout->addWidget (_file_tree_view);
   layout->setMargin (1);
   widget ()->setLayout (layout);
   // TODO: Add right-click contextual menus for copying, pasting, deleting files (and others)
 
-  connect (_current_directory, SIGNAL (returnPressed ()), this,
-           SLOT (current_directory_entered ()));
+  connect (_current_directory, SIGNAL (returnPressed ()),
+           this, SLOT (handle_directory_entered ()));
+
   QCompleter *
     completer = new QCompleter (_file_system_model, this);
   _current_directory->setCompleter (completer);
 
-  connect (this, SIGNAL (visibilityChanged(bool)), this, SLOT(handle_visibility_changed(bool)));
+  connect (this, SIGNAL (visibilityChanged (bool)),
+           this, SLOT (handle_visibility_changed (bool)));
 }
 
 void
 files_dock_widget::item_double_clicked (const QModelIndex & index)
 {
   // Retrieve the file info associated with the model index.
   QFileInfo fileInfo = _file_system_model->fileInfo (index);
-
-  // If it is a directory, cd into it.
-  if (fileInfo.isDir ())
-    {
-      _file_system_model->setRootPath (fileInfo.absolutePath ());
-      _file_tree_view->setRootIndex (index);
-      set_current_directory (_file_system_model->fileInfo (index).
-                           absoluteFilePath ());
-    }
-  // Otherwise attempt to open it.
-  else
-    {
-      // Check if the user wants to use a custom file editor.
-      QSettings *settings = resource_manager::instance ()->get_settings ();
-      if (settings->value ("useCustomFileEditor").toBool ())
-        {
-          QString editor = settings->value ("customFileEditor").toString ();
-          QStringList arguments;
-          arguments << fileInfo.filePath ();
-          QProcess::startDetached (editor, arguments);
-        }
-      else
-        {
-          emit open_file (fileInfo.filePath ());
-        }
-    }
+  display_directory (fileInfo.absoluteFilePath ());
 }
 
 void
 files_dock_widget::set_current_directory (QString currentDirectory)
 {
-  _current_directory->setText (currentDirectory);
+  display_directory (currentDirectory);
+}
+
+void
+files_dock_widget::handle_directory_entered ()
+{
+  display_directory (_current_directory->text ());
+}
+
+void
+files_dock_widget::do_up_directory ()
+{
+  QDir dir = QDir (_file_system_model->filePath (_file_tree_view->rootIndex ()));
+  dir.cdUp ();
+  display_directory (dir.absolutePath ());
 }
 
 void
-files_dock_widget::do_up_directory (void)
+files_dock_widget::display_directory (QString directory)
 {
-  QDir dir =
-    QDir (_file_system_model->filePath (_file_tree_view->rootIndex ()));
-  dir.cdUp ();
-  _file_system_model->setRootPath (dir.absolutePath ());
-  _file_tree_view->setRootIndex (_file_system_model->
-                                index (dir.absolutePath ()));
-  set_current_directory (dir.absolutePath ());
-}
+  QFileInfo fileInfo (directory);
+  if (fileInfo.exists ())
+    {
+      if (fileInfo.isDir ())
+        {
+          _file_tree_view->setRootIndex (_file_system_model->
+                                        index (fileInfo.absoluteFilePath ()));
+          _file_system_model->setRootPath (fileInfo.absoluteFilePath ());
+          _current_directory->setText (fileInfo.absoluteFilePath ());
 
-void
-files_dock_widget::current_directory_entered ()
-{
-  QFileInfo fileInfo (_current_directory->text ());
-  if (fileInfo.isDir ())
-    {
-      _file_tree_view->setRootIndex (_file_system_model->
-                                    index (fileInfo.absolutePath ()));
-      _file_system_model->setRootPath (fileInfo.absolutePath ());
-      set_current_directory (fileInfo.absoluteFilePath ());
-    }
-  else
-    {
-      if (QFile::exists (fileInfo.absoluteFilePath ()))
-        emit open_file (fileInfo.absoluteFilePath ());
+          if (_last_current_directory != fileInfo.absoluteFilePath ())
+            {
+              emit displayed_directory_changed (fileInfo.absoluteFilePath ());
+            }
+
+          _last_current_directory = fileInfo.absoluteFilePath ();
+        }
+      else
+        {
+          if (QFile::exists (fileInfo.absoluteFilePath ()))
+            emit open_file (fileInfo.absoluteFilePath ());
+        }
     }
 }
 
 void
 files_dock_widget::notice_settings ()
 {
   QSettings *settings = resource_manager::instance ()->get_settings ();
   _file_tree_view->setColumnHidden (0, !settings->value ("showFilenames").toBool ());
diff --git a/gui/src/files-dockwidget.h b/gui/src/files-dockwidget.h
--- a/gui/src/files-dockwidget.h
+++ b/gui/src/files-dockwidget.h
@@ -41,34 +41,38 @@ public:
 
 public slots:
   /** Slot for handling a change in directory via double click. */
   void item_double_clicked (const QModelIndex & index);
 
   /** Slot for handling the up-directory button in the toolbar. */
   void do_up_directory ();
   void set_current_directory (QString currentDirectory);
-  void current_directory_entered ();
+  void handle_directory_entered ();
+  void display_directory (QString directory);
 
   /** Tells the widget to notice settings that are probably new. */
   void notice_settings ();
   void handle_visibility_changed (bool visible);
 
 signals:
   void open_file (QString fileName);
+  void displayed_directory_changed (QString directory);
 
   /** Custom signal that tells if a user has clicke away that dock widget. */
   void active_changed (bool active);
 
 protected:
   void closeEvent (QCloseEvent *event);
 
 private:
   // TODO: Add toolbar with buttons for navigating the path, creating dirs, etc
 
+  QString           _last_current_directory;
+
   /** Toolbar for file and directory manipulation. */
   QToolBar *        _navigation_tool_bar;
 
   /** Variables for the up-directory action. */
   QIcon             _directory_icon;
   QAction *         _directory_up_action;
   QToolButton *     _up_directory_button;
 
diff --git a/gui/src/main-window.cc b/gui/src/main-window.cc
--- a/gui/src/main-window.cc
+++ b/gui/src/main-window.cc
@@ -157,25 +157,27 @@ main_window::prepare_for_quit ()
 
 void
 main_window::reset_windows ()
 {
   // TODO: Implement.
 }
 
 void
-main_window::update_current_working_directory (QString directory)
+main_window::current_working_directory_has_changed (QString directory)
 {
   if (_current_directory_combo_box->count () > 31)
     {
       _current_directory_combo_box->removeItem (0);
     }
   _current_directory_combo_box->addItem (directory);
   int index = _current_directory_combo_box->findText (directory);
   _current_directory_combo_box->setCurrentIndex (index);
+
+  _files_dock_widget->set_current_directory (directory);
 }
 
 void
 main_window::change_current_working_directory ()
 {
   QString selectedDirectory =
       QFileDialog::getExistingDirectory(this, tr ("Set working direcotry"));
 
@@ -183,17 +185,17 @@ main_window::change_current_working_dire
     {
       octave_link::instance ()
           ->post_event (new octave_change_directory_event (*this,
                         selectedDirectory.toStdString ()));
     }
 }
 
 void
-main_window::change_current_working_directory (QString directory)
+main_window::set_current_working_directory (QString directory)
 {
   octave_link::instance ()
       ->post_event (new octave_change_directory_event (*this,
                     directory.toStdString ()));
 }
 
 void
 main_window::current_working_directory_up ()
@@ -519,16 +521,18 @@ main_window::construct ()
   connect (reset_windows_action,        SIGNAL (triggered ()),
            this,                        SLOT   (reset_windows ()));
   connect (this,                        SIGNAL (settings_changed ()),
            _files_dock_widget,          SLOT   (notice_settings ()));
   connect (this,                        SIGNAL (settings_changed ()),
            this,                        SLOT   (notice_settings ()));
   connect (_files_dock_widget,          SIGNAL (open_file (QString)),
            _file_editor,                SLOT   (request_open_file (QString)));
+  connect (_files_dock_widget,          SIGNAL (displayed_directory_changed(QString)),
+           this,                        SLOT   (set_current_working_directory(QString)));
   connect (_history_dock_widget,        SIGNAL (information (QString)),
            this,                        SLOT   (report_status_message (QString)));
   connect (_history_dock_widget,        SIGNAL (command_double_clicked (QString)),
            this,                        SLOT   (handle_command_double_clicked (QString)));
   connect (save_workspace_action,       SIGNAL (triggered ()),
            this,                        SLOT   (handle_save_workspace_request ()));
   connect (load_workspace_action,       SIGNAL (triggered ()),
            this,                        SLOT   (handle_load_workspace_request ()));
@@ -538,17 +542,17 @@ main_window::construct ()
            this,                        SLOT   (change_current_working_directory ()));
   connect (_current_directory_up_tool_button, SIGNAL (clicked ()),
            this,                        SLOT   (current_working_directory_up()));
   connect (copy_action,                 SIGNAL (triggered()),
            _terminal,                   SLOT   (copyClipboard ()));
   connect (paste_action,                SIGNAL (triggered()),
            _terminal,                   SLOT   (pasteClipboard ()));
   connect (_current_directory_combo_box, SIGNAL (activated (QString)),
-           this,                        SLOT (change_current_working_directory (QString)));
+           this,                        SLOT (set_current_working_directory (QString)));
   connect (_debug_continue,             SIGNAL (triggered ()),
            this,                        SLOT (debug_continue ()));
   connect (_debug_step_into,            SIGNAL (triggered ()),
            this,                        SLOT (debug_step_into ()));
   connect (_debug_step_over,            SIGNAL (triggered ()),
            this,                        SLOT (debug_step_over ()));
   connect (_debug_step_out,             SIGNAL (triggered ()),
            this,                        SLOT (debug_step_out ()));
@@ -566,17 +570,17 @@ main_window::construct ()
   read_settings ();
 
   _octave_qt_event_listener = new octave_qt_event_listener ();
   octave_link::instance ()->register_event_listener (_octave_qt_event_listener);
 
   connect (_octave_qt_event_listener,
            SIGNAL (current_directory_has_changed_signal (QString)),
            this,
-           SLOT (update_current_working_directory (QString)));
+           SLOT (current_working_directory_has_changed (QString)));
 
   connect (_octave_qt_event_listener,
            SIGNAL (entered_debug_mode_signal ()),
            this,
            SLOT(handle_entered_debug_mode ()));
 
   connect (_octave_qt_event_listener,
            SIGNAL (quit_debug_mode_signal ()),
diff --git a/gui/src/main-window.h b/gui/src/main-window.h
--- a/gui/src/main-window.h
+++ b/gui/src/main-window.h
@@ -82,19 +82,19 @@ public slots:
   void open_bug_tracker_page ();
   void open_agora_page ();
   void open_octave_forge_page ();
   void process_settings_dialog_request ();
   void show_about_octave ();
   void notice_settings ();
   void prepare_for_quit ();
   void reset_windows ();
-  void update_current_working_directory (QString directory);
+  void current_working_directory_has_changed (QString directory);
   void change_current_working_directory ();
-  void change_current_working_directory (QString directory);
+  void set_current_working_directory (QString directory);
   void current_working_directory_up ();
 
   void handle_entered_debug_mode ();
   void handle_quit_debug_mode ();
   void debug_continue ();
   void debug_step_into ();
   void debug_step_over ();
   void debug_step_out ();
