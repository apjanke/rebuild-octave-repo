# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1467831474 14400
#      Wed Jul 06 14:57:54 2016 -0400
# Node ID ccf50f0299992c40caebb035135b4c23861110bd
# Parent  1a8e2a0251c38f3055536aa06606d7b78dda62d5
move octave_child_list to separate file and define inside namespace

* liboctave/system/child-list.cc, liboctave/system/child-list.h:
New files.

* liboctave/system/module.mk: Update.

* sighandlers.h, sighandlers.cc: Move octave_child and
octave_child_list classes to separate files in liboctave and defined
inside the octave namespace.  Change all uses.

diff --git a/libinterp/corefcn/pager.cc b/libinterp/corefcn/pager.cc
--- a/libinterp/corefcn/pager.cc
+++ b/libinterp/corefcn/pager.cc
@@ -90,17 +90,17 @@ static bool really_flush_to_pager = fals
 
 static bool flushing_output_to_pager = false;
 
 static void
 clear_external_pager (void)
 {
   if (external_pager)
     {
-      octave_child_list::remove (external_pager->pid ());
+      octave::child_list::remove (external_pager->pid ());
 
       delete external_pager;
       external_pager = 0;
     }
 }
 
 static bool
 pager_event_handler (pid_t pid, int status)
@@ -156,18 +156,18 @@ do_sync (const char *msg, int len, bool 
             {
               std::string pgr = pager_command ();
 
               if (! pgr.empty ())
                 {
                   external_pager = new oprocstream (pgr.c_str ());
 
                   if (external_pager)
-                    octave_child_list::insert (external_pager->pid (),
-                                               pager_event_handler);
+                    octave::child_list::insert (external_pager->pid (),
+                                                pager_event_handler);
                 }
             }
 
           if (external_pager)
             {
               if (external_pager->good ())
                 {
                   external_pager->write (msg, len);
diff --git a/libinterp/corefcn/sighandlers.cc b/libinterp/corefcn/sighandlers.cc
--- a/libinterp/corefcn/sighandlers.cc
+++ b/libinterp/corefcn/sighandlers.cc
@@ -242,23 +242,23 @@ octave_signal_handler (void)
 
           if (have_sigchld && i == sigchld)
             {
               volatile octave_interrupt_handler saved_interrupt_handler
                 = octave_ignore_interrupts ();
 
               void *context = octave_block_child ();
 
-              octave_child_list::wait ();
+              octave::child_list::wait ();
 
               octave_set_interrupt_handler (saved_interrupt_handler);
 
               octave_unblock_child (context);
 
-              octave_child_list::reap ();
+              octave::child_list::reap ();
             }
           else if (have_sigfpe && i == sigfpe)
             std::cerr << "warning: floating point exception" << std::endl;
           else if (have_sigpipe && i == sigpipe)
             std::cerr << "warning: broken pipe" << std::endl;
         }
     }
 }
@@ -639,146 +639,16 @@ make_sig_struct (void)
   set_sig_struct_field (m, "SIGVTALRM");
   set_sig_struct_field (m, "SIGWINCH");
   set_sig_struct_field (m, "SIGXCPU");
   set_sig_struct_field (m, "SIGXFSZ");
 
   return m;
 }
 
-octave_child_list::octave_child_list_rep *octave_child_list::instance = 0;
-
-bool
-octave_child_list::instance_ok (void)
-{
-  bool retval = true;
-
-  if (! instance)
-    {
-      instance = new octave_child_list_rep ();
-
-      if (instance)
-        singleton_cleanup_list::add (cleanup_instance);
-    }
-
-  if (! instance)
-    error ("unable to create child list object!");
-
-  return retval;
-}
-
-void
-octave_child_list::insert (pid_t pid, octave_child::child_event_handler f)
-{
-  if (instance_ok ())
-    instance->insert (pid, f);
-}
-
-void
-octave_child_list::reap (void)
-{
-  if (instance_ok ())
-    instance->reap ();
-}
-
-bool
-octave_child_list::wait (void)
-{
-  return (instance_ok ()) ? instance->wait () : false;
-}
-
-class pid_equal
-{
-public:
-
-  pid_equal (pid_t v) : val (v) { }
-
-  bool operator () (const octave_child& oc) const { return oc.pid == val; }
-
-private:
-
-  pid_t val;
-};
-
-void
-octave_child_list::remove (pid_t pid)
-{
-  if (instance_ok ())
-    instance->remove_if (pid_equal (pid));
-}
-
-#define OCL_REP octave_child_list::octave_child_list_rep
-
-void
-OCL_REP::insert (pid_t pid, octave_child::child_event_handler f)
-{
-  append (octave_child (pid, f));
-}
-
-void
-OCL_REP::reap (void)
-{
-  // Mark the record for PID invalid.
-
-  for (iterator p = begin (); p != end (); p++)
-    {
-      // The call to the octave_child::child_event_handler might
-      // invalidate the iterator (for example, by calling
-      // octave_child_list::remove), so we increment the iterator
-      // here.
-
-      octave_child& oc = *p;
-
-      if (oc.have_status)
-        {
-          oc.have_status = 0;
-
-          octave_child::child_event_handler f = oc.handler;
-
-          if (f && f (oc.pid, oc.status))
-            oc.pid = -1;
-        }
-    }
-
-  remove_if (pid_equal (-1));
-}
-
-// Wait on our children and record any changes in their status.
-
-bool
-OCL_REP::wait (void)
-{
-  bool retval = false;
-
-  for (iterator p = begin (); p != end (); p++)
-    {
-      octave_child& oc = *p;
-
-      pid_t pid = oc.pid;
-
-      if (pid > 0)
-        {
-          int status;
-
-          if (octave::sys::waitpid (pid, &status, octave::sys::wnohang ()) > 0)
-            {
-              oc.have_status = 1;
-
-              oc.status = status;
-
-              retval = true;
-
-              break;
-            }
-        }
-    }
-
-  return retval;
-}
-
 DEFUN (SIG, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn {} {} SIG ()
 Return a structure containing Unix signal names and their defined values.
 @end deftypefn */)
 {
   if (args.length () != 0)
     print_usage ();
diff --git a/libinterp/corefcn/sighandlers.h b/libinterp/corefcn/sighandlers.h
--- a/libinterp/corefcn/sighandlers.h
+++ b/libinterp/corefcn/sighandlers.h
@@ -30,22 +30,22 @@ Free Software Foundation, Inc.
 
 // This file should always be included after config.h!
 
 #if ! defined (octave_sighandlers_h)
 #define octave_sighandlers_h 1
 
 #include "octave-config.h"
 
-#include "signal-wrappers.h"
-
-#include "base-list.h"
+#include "child-list.h"
 
 // FIXME: the data should probably be private...
 
+typedef void octave_sig_handler (int);
+
 struct
 octave_interrupt_handler
 {
   octave_sig_handler *int_handler;
   octave_sig_handler *brk_handler;
 };
 
 // Nonzero means we have already printed a message for this series of
@@ -72,103 +72,12 @@ extern OCTINTERP_API octave_interrupt_ha
 extern OCTINTERP_API octave_interrupt_handler octave_ignore_interrupts (void);
 
 extern OCTINTERP_API octave_interrupt_handler
 octave_set_interrupt_handler (const volatile octave_interrupt_handler&,
                               bool restart_syscalls = true);
 
 // extern void ignore_sigchld (void);
 
-// Maybe this should be in a separate file?
-
-class
-OCTINTERP_API
-octave_child
-{
-public:
-
-  // Do whatever to handle event for child with PID (might not
-  // actually be dead, could just be stopped).  Return true if
-  // the list element corresponding to PID should be removed from
-  // list.  This function should not call any functions that modify
-  // the octave_child_list.
-
-  typedef bool (*child_event_handler) (pid_t, int);
-
-  octave_child (pid_t id = -1, child_event_handler f = 0)
-    : pid (id), handler (f), have_status (0), status (0) { }
-
-  octave_child (const octave_child& oc)
-    : pid (oc.pid), handler (oc.handler),
-      have_status (oc.have_status), status (oc.status) { }
-
-  octave_child& operator = (const octave_child& oc)
-  {
-    if (&oc != this)
-      {
-        pid = oc.pid;
-        handler = oc.handler;
-        have_status = oc.have_status;
-        status = oc.status;
-      }
-    return *this;
-  }
-
-  ~octave_child (void) { }
-
-  // The process id of this child.
-  pid_t pid;
-
-  // The function we call if an event happens for this child.
-  child_event_handler handler;
-
-  // Nonzero if this child has stopped or terminated.
-  sig_atomic_t have_status;
-
-  // The status of this child; 0 if running, otherwise a status value
-  // from waitpid.
-  int status;
-};
-
-class
-OCTINTERP_API
-octave_child_list
-{
-protected:
-
-  octave_child_list (void) { }
-
-  class octave_child_list_rep : public octave_base_list<octave_child>
-  {
-  public:
-
-    void insert (pid_t pid, octave_child::child_event_handler f);
-
-    void reap (void);
-
-    bool wait (void);
-  };
-
-public:
-
-  ~octave_child_list (void) { }
-
-  static void insert (pid_t pid, octave_child::child_event_handler f);
-
-  static void reap (void);
-
-  static bool wait (void);
-
-  static void remove (pid_t pid);
-
-private:
-
-  static bool instance_ok (void);
-
-  static octave_child_list_rep *instance;
-
-  static void cleanup_instance (void) { delete instance; instance = 0; }
-};
-
 // TRUE means we should try to enter the debugger on SIGINT.
 extern OCTINTERP_API bool Vdebug_on_interrupt;
 
 #endif
diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -45,16 +45,17 @@ along with Octave; see the file COPYING.
 #include "file-ops.h"
 #include "lo-error.h"
 #include "lo-mappers.h"
 #include "oct-env.h"
 #include "oct-fftw.h"
 #include "oct-locbuf.h"
 #include "oct-syscalls.h"
 #include "quit.h"
+#include "signal-wrappers.h"
 #include "singleton-cleanup.h"
 #include "str-vec.h"
 #include "wait-for-input.h"
 
 #include "build-env.h"
 #include "liboctinterp-build-info.h"
 #include "defaults.h"
 #include "defun.h"
@@ -1000,17 +1001,17 @@ static octave_value_list
 run_command_and_return_output (const std::string& cmd_str)
 {
   octave_value_list retval;
   octave::unwind_protect frame;
 
   iprocstream *cmd = new iprocstream (cmd_str.c_str ());
 
   frame.add_delete (cmd);
-  frame.add_fcn (octave_child_list::remove, cmd->pid ());
+  frame.add_fcn (octave::child_list::remove, cmd->pid ());
 
   if (! *cmd)
     error ("system: unable to start subprocess for '%s'", cmd_str.c_str ());
 
   int fid = cmd->file_number ();
 
   std::ostringstream output_buf;
 
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -38,16 +38,17 @@ along with Octave; see the file COPYING.
 
 #include "cmd-edit.h"
 #include "f77-fcn.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "lo-error.h"
 #include "oct-env.h"
 #include "str-vec.h"
+#include "signal-wrappers.h"
 #include "unistd-wrappers.h"
 
 #include "build-env.h"
 #include "builtins.h"
 #include "defaults.h"
 #include "Cell.h"
 #include "defun.h"
 #include "display.h"
diff --git a/liboctave/system/child-list.cc b/liboctave/system/child-list.cc
new file mode 100644
--- /dev/null
+++ b/liboctave/system/child-list.cc
@@ -0,0 +1,163 @@
+/*
+
+Copyright (C) 1993-2015 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include "child-list.h"
+#include "lo-error.h"
+#include "oct-syscalls.h"
+#include "signal-wrappers.h"
+#include "singleton-cleanup.h"
+
+namespace octave
+{
+  child_list::child_list_rep *child_list::instance = 0;
+
+  bool
+  child_list::instance_ok (void)
+  {
+    bool retval = true;
+
+    if (! instance)
+      {
+        instance = new child_list_rep ();
+
+        if (instance)
+          singleton_cleanup_list::add (cleanup_instance);
+      }
+
+    if (! instance)
+      (*current_liboctave_error_handler)
+        ("unable to create child list object!");
+
+    return retval;
+  }
+
+  void
+  child_list::insert (pid_t pid, child::child_event_handler f)
+  {
+    if (instance_ok ())
+      instance->insert (pid, f);
+  }
+
+  void
+  child_list::reap (void)
+  {
+    if (instance_ok ())
+      instance->reap ();
+  }
+
+  bool
+  child_list::wait (void)
+  {
+    return (instance_ok ()) ? instance->wait () : false;
+  }
+
+  class pid_equal
+  {
+  public:
+
+    pid_equal (pid_t v) : val (v) { }
+
+    bool operator () (const child& oc) const { return oc.pid == val; }
+
+  private:
+
+    pid_t val;
+  };
+
+  void
+  child_list::remove (pid_t pid)
+  {
+    if (instance_ok ())
+      instance->remove_if (pid_equal (pid));
+  }
+
+  void
+  child_list::child_list_rep::insert (pid_t pid, child::child_event_handler f)
+  {
+    append (child (pid, f));
+  }
+
+  void
+  child_list::child_list_rep::reap (void)
+  {
+    // Mark the record for PID invalid.
+
+    for (iterator p = begin (); p != end (); p++)
+      {
+        // The call to the child::child_event_handler might
+        // invalidate the iterator (for example, by calling
+        // child_list::remove), so we increment the iterator
+        // here.
+
+        child& oc = *p;
+
+        if (oc.have_status)
+          {
+            oc.have_status = 0;
+
+            child::child_event_handler f = oc.handler;
+
+            if (f && f (oc.pid, oc.status))
+              oc.pid = -1;
+          }
+      }
+
+    remove_if (pid_equal (-1));
+  }
+
+  // Wait on our children and record any changes in their status.
+
+  bool
+  child_list::child_list_rep::wait (void)
+  {
+    bool retval = false;
+
+    for (iterator p = begin (); p != end (); p++)
+      {
+        child& oc = *p;
+
+        pid_t pid = oc.pid;
+
+        if (pid > 0)
+          {
+            int status;
+
+            if (octave::sys::waitpid (pid, &status, octave::sys::wnohang ()) > 0)
+              {
+                oc.have_status = 1;
+
+                oc.status = status;
+
+                retval = true;
+
+                break;
+              }
+          }
+      }
+
+    return retval;
+  }
+}
diff --git a/liboctave/system/child-list.h b/liboctave/system/child-list.h
new file mode 100644
--- /dev/null
+++ b/liboctave/system/child-list.h
@@ -0,0 +1,136 @@
+/*
+
+Copyright (C) 1993-2015 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_child_list_h)
+#define octave_child_list_h 1
+
+#include "octave-config.h"
+
+#include <csignal>
+
+#include <sys/types.h>
+
+#include "base-list.h"
+
+namespace octave
+{
+  class
+  OCTAVE_API
+  child
+  {
+  public:
+
+    // Do whatever to handle event for child with PID (might not
+    // actually be dead, could just be stopped).  Return true if
+    // the list element corresponding to PID should be removed from
+    // list.  This function should not call any functions that modify
+    // the child_list.
+
+    typedef bool (*child_event_handler) (pid_t, int);
+
+    child (pid_t id = -1, child_event_handler f = 0)
+      : pid (id), handler (f), have_status (0), status (0) { }
+
+    child (const child& oc)
+      : pid (oc.pid), handler (oc.handler),
+      have_status (oc.have_status), status (oc.status) { }
+
+    child& operator = (const child& oc)
+      {
+        if (&oc != this)
+          {
+            pid = oc.pid;
+            handler = oc.handler;
+            have_status = oc.have_status;
+            status = oc.status;
+          }
+        return *this;
+      }
+
+    ~child (void) { }
+
+    // The process id of this child.
+    pid_t pid;
+
+    // The function we call if an event happens for this child.
+    child_event_handler handler;
+
+    // Nonzero if this child has stopped or terminated.
+    sig_atomic_t have_status;
+
+    // The status of this child; 0 if running, otherwise a status value
+    // from waitpid.
+    int status;
+  };
+
+  class
+  OCTAVE_API
+  child_list
+  {
+  protected:
+
+    child_list (void) { }
+
+    class child_list_rep : public octave_base_list<child>
+    {
+    public:
+
+      void insert (pid_t pid, child::child_event_handler f);
+
+      void reap (void);
+
+      bool wait (void);
+    };
+
+  public:
+
+    ~child_list (void) { }
+
+    static void insert (pid_t pid, child::child_event_handler f);
+
+    static void reap (void);
+
+    static bool wait (void);
+
+    static void remove (pid_t pid);
+
+  private:
+
+    static bool instance_ok (void);
+
+    static child_list_rep *instance;
+
+    static void cleanup_instance (void) { delete instance; instance = 0; }
+  };
+}
+
+#if defined (OCTAVE_USE_DEPRECATED_FUNCTIONS)
+
+OCTAVE_DEPRECATED ("use 'octave::child' instead")
+typedef octave::child octave_child;
+
+OCTAVE_DEPRECATED ("use 'octave::child_list' instead")
+typedef octave::child_list octave_child_list;
+
+#endif
+
+#endif
diff --git a/liboctave/system/module.mk b/liboctave/system/module.mk
--- a/liboctave/system/module.mk
+++ b/liboctave/system/module.mk
@@ -1,22 +1,24 @@
 SYSTEM_INC = \
+  liboctave/system/child-list.h \
   liboctave/system/dir-ops.h \
   liboctave/system/file-ops.h \
   liboctave/system/file-stat.h \
   liboctave/system/lo-sysdep.h \
   liboctave/system/mach-info.h \
   liboctave/system/oct-env.h \
   liboctave/system/oct-group.h \
   liboctave/system/oct-passwd.h \
   liboctave/system/oct-syscalls.h \
   liboctave/system/oct-time.h \
   liboctave/system/oct-uname.h
 
 SYSTEM_SRC = \
+  liboctave/system/child-list.cc \
   liboctave/system/dir-ops.cc \
   liboctave/system/file-ops.cc \
   liboctave/system/file-stat.cc \
   liboctave/system/lo-sysdep.cc \
   liboctave/system/mach-info.cc \
   liboctave/system/oct-env.cc \
   liboctave/system/oct-group.cc \
   liboctave/system/oct-passwd.cc \
