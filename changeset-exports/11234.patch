# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1289443971 18000
#      Wed Nov 10 21:52:51 2010 -0500
# Node ID 2718e1fdf82fd1284af5ec55f6cd5bdb6e6c7988
# Parent  1dfbcc9eee9272a177e0c18326680b927d12d483
IEEE math initialization tweaks

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,12 +1,15 @@
+2010-11-10  John W. Eaton  <jwe@octave.org>
+
+	* configure.ac: Don't check for nan.h.
+
 2010-11-10  John W. Eaton  <jwe@octave.org>
 
 	* configure.ac (AH_BOTTOM): Eliminate special case for __DECCXX: 
-	(WARN_CXXFLAGS): 
 
 2010-11-10  John W. Eaton  <jwe@octave.org>
 
 	* configure.ac: Eliminate special cases for nextstep.
 
 2010-11-10  John W. Eaton  <jwe@octave.org>
 
 	* configure.ac: Eliminate special checks for SCO systems.
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1521,21 +1521,20 @@ AC_CHECK_SIZEOF(long double)
 
 ### Checks for header files.
 
 AC_HEADER_DIRENT
 AC_HEADER_SYS_WAIT
 
 ### C headers
 
-AC_CHECK_HEADERS(curses.h direct.h dlfcn.h \
-  floatingpoint.h grp.h ieeefp.h inttypes.h locale.h memory.h nan.h \
-  ncurses.h poll.h pthread.h pwd.h sunmath.h sys/ioctl.h \
-  sys/param.h sys/poll.h sys/resource.h sys/select.h \
-  sys/utsname.h termcap.h)
+AC_CHECK_HEADERS(curses.h direct.h dlfcn.h floatingpoint.h grp.h \
+  ieeefp.h inttypes.h locale.h memory.h ncurses.h poll.h pthread.h \
+  pwd.h sunmath.h sys/ioctl.h sys/param.h sys/poll.h sys/resource.h \
+  sys/select.h sys/utsname.h termcap.h)
 
 ### C++ headers
 
 AC_LANG_PUSH(C++)
 AC_CHECK_HEADERS(sstream)
 AC_LANG_POP(C++)
 
 have_termios_h=no
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,15 @@
+2010-11-10  John W. Eaton  <jwe@octave.org>
+
+	* lo-ieee.cc (octave_ieee_init): Don't initialize octave_Inf,
+	octave_NaN, and octave_NA to DBL_MAX.  Don't initialize
+	octave_Float_Inf, octave_Float_NaN, and octave_Float_NA to FLT_MAX.
+	(octave_ieee_init): Simplify using std::numeric_limits template.
+
 2010-11-10  John W. Eaton  <jwe@octave.org>
 
 	* syswait.h: Delete special cases for NeXT systems.
 
 2010-11-10  John W. Eaton  <jwe@octave.org>
 
 	* lo-sysdep.cc (octave_chdir): Delete special case for __EMX__.
 	* oct-env.cc (octave_env::do_make_absolute): Likewise.
diff --git a/liboctave/lo-ieee.cc b/liboctave/lo-ieee.cc
--- a/liboctave/lo-ieee.cc
+++ b/liboctave/lo-ieee.cc
@@ -20,89 +20,41 @@ along with Octave; see the file COPYING.
 <http://www.gnu.org/licenses/>.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <cfloat>
 #include <cstdlib>
 
-#if defined (HAVE_FLOATINGPOINT_H)
-#include <floatingpoint.h>
-#endif
-
-#if defined (HAVE_IEEEFP_H)
-#include <ieeefp.h>
-#endif
-
-#if defined (HAVE_NAN_H)
-#include <nan.h>
-#endif
+#include <limits>
 
 #include "lo-error.h"
 #include "lo-ieee.h"
-#include "lo-math.h"
 #include "mach-info.h"
 
 void
 octave_ieee_init (void)
 {
-  // Default values.  DBL_MAX is not right for NaN and NA, but do you
-  // have a better suggestion?  If you don't have IEEE floating point
-  // values, there are many parts of Octave that will not work
-  // correctly.
-
-  octave_Inf = octave_NaN = octave_NA = DBL_MAX;
-  octave_Float_Inf = octave_Float_NaN = octave_Float_NA = FLT_MAX;
-
   oct_mach_info::float_format ff = oct_mach_info::native_float_format ();
 
   switch (ff)
     {
     case oct_mach_info::flt_fmt_ieee_big_endian:
     case oct_mach_info::flt_fmt_ieee_little_endian:
       {
-        // Don't optimize away tmp_inf / tmp_inf to generate octave_NaN.
-
-        volatile double tmp_inf;
+        octave_NaN = std::numeric_limits<double>::quiet_NaN ();
+        octave_Inf = std::numeric_limits<double>::infinity ();
 
-#if defined (__alpha__) && defined (__osf__)
-        extern unsigned int DINFINITY[2];
-        tmp_inf =  (*(X_CAST(double *, DINFINITY)));
-#else
-        double tmp = 1e+10;
-        tmp_inf = tmp;
-        for (;;)
-          {
-            tmp_inf *= 1e+10;
-            if (tmp_inf == tmp)
-              break;
-            tmp = tmp_inf;
-          }
-#endif
+        octave_Float_NaN = std::numeric_limits<float>::quiet_NaN ();
+        octave_Float_Inf = std::numeric_limits<float>::infinity ();
 
-#if defined (__alpha__) && defined (__osf__)
-        extern unsigned int DQNAN[2];
-        octave_NaN = (*(X_CAST(double *, DQNAN)));
-#elif defined (__NetBSD__)
-        octave_NaN = nan ("");
-#else
-        octave_NaN = tmp_inf / tmp_inf;
-        // try to ensure that lo_ieee_sign gives false for a NaN.
-        if (lo_ieee_signbit (octave_NaN))
-          octave_NaN = -octave_NaN;
-
-#endif
-
-        octave_Inf = tmp_inf;
-
-        // This is patterned after code in R.
+        // The following is patterned after code in R.
 
         if (ff == oct_mach_info::flt_fmt_ieee_big_endian)
           {
             lo_ieee_hw = 0;
             lo_ieee_lw = 1;
           }
         else
           {
@@ -111,35 +63,16 @@ octave_ieee_init (void)
           }
 
         lo_ieee_double t;
         t.word[lo_ieee_hw] = LO_IEEE_NA_HW;
         t.word[lo_ieee_lw] = LO_IEEE_NA_LW;
 
         octave_NA = t.value;
 
-        volatile float float_tmp_inf;
-
-        float float_tmp = 1e+10;
-        float_tmp_inf = float_tmp;
-        for (;;)
-          {
-            float_tmp_inf *= 1e+10;
-            if (float_tmp_inf == float_tmp)
-              break;
-            float_tmp = float_tmp_inf;
-          }
-
-#if defined (__NetBSD__)
-        octave_Float_NaN = nanf ("");
-#else
-        octave_Float_NaN = float_tmp_inf / float_tmp_inf;
-#endif
-        octave_Float_Inf = float_tmp_inf;
-
         lo_ieee_float tf;
         tf.word = LO_IEEE_NA_FLOAT;
         octave_Float_NA = tf.value;
       }
       break;
 
     case oct_mach_info::flt_fmt_cray:
     case oct_mach_info::flt_fmt_vax_d:
diff --git a/liboctave/lo-ieee.h b/liboctave/lo-ieee.h
--- a/liboctave/lo-ieee.h
+++ b/liboctave/lo-ieee.h
@@ -65,17 +65,16 @@ typedef union
 } lo_ieee_float;
 
 #define LO_IEEE_NA_HW_OLD 0x7ff00000
 #define LO_IEEE_NA_LW_OLD 1954
 #define LO_IEEE_NA_HW 0x7FF840F4
 #define LO_IEEE_NA_LW 0x40000000
 #define LO_IEEE_NA_FLOAT   0x7FC207A2
  
-
 extern OCTAVE_API void octave_ieee_init (void);
 
 extern OCTAVE_API int __lo_ieee_isnan (double x);
 extern OCTAVE_API int __lo_ieee_finite (double x);
 extern OCTAVE_API int __lo_ieee_isinf (double x);
 
 extern OCTAVE_API int __lo_ieee_is_NA (double);
 extern OCTAVE_API int __lo_ieee_is_old_NA (double);
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-11-10  John W. Eaton  <jwe@octave.org>
+
+	* octave.cc (octave_main): Call octave_ieee_init here.
+	* sysdep.cc (sysdep_init): Not here.
+
 2010-11-10  John W. Eaton  <jwe@octave.org>
 
 	* sysdep.cc: Eliminate special case for __DECCXX.
 
 2010-11-10  John W. Eaton  <jwe@octave.org>
 
 	* sysdep.cc (sysdep_init): Eliminate special case for NeXT systems.
 	(malloc_handler, NeXT_init): Delete.
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -599,16 +599,18 @@ octave_main (int argc, char **argv, int 
   // installed, and the call to install_builtins must come before the
   // options are processed because some command line options override
   // defaults by calling bind_internal_variable.
 
   init_signals ();
 
   sysdep_init ();
 
+  octave_ieee_init ();
+
   // The idea here is to force xerbla to be referenced so that we will
   // link to our own version instead of the one provided by the BLAS
   // library.  But octave_NaN should never be -1, so we should never
   // actually call xerbla.
 
   if (octave_NaN == -1)
     F77_FUNC (xerbla, XERBLA) ("octave", 13 F77_CHAR_ARG_LEN (6));
 
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -240,18 +240,16 @@ sysdep_init (void)
 {
 #if defined (__386BSD__) || defined (__FreeBSD__) || defined(__NetBSD__)
   BSD_init ();
 #elif defined (__MINGW32__)
   MINGW_init ();
 #elif defined (_MSC_VER)
   MSVC_init ();
 #endif
-
-  octave_ieee_init ();
 }
 
 void
 sysdep_cleanup (void)
 {
   MINGW_SIGNAL_CLEANUP ();
 }
 
