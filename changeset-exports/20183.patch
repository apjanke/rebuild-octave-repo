# HG changeset patch
# User Rik <rik@octave.org>
# Date 1431450302 25200
#      Tue May 12 10:05:02 2015 -0700
# Branch stable
# Node ID 4e7f12a763cdfadebe3f4586e3d189c4fed00bcc
# Parent  9deea95129cafc9f7e6d9ce5ea800994bfb5d73c
doc: Remove typo of same word twice in a row.

* data.cc (nzmax), mappers.cc (isinf), contourc.m, cylinder.m, ellipsoid.m:
Remove typo of same word twice in a row.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -2895,17 +2895,17 @@ Return the number of nonzero elements in
 
 DEFUN (nzmax, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {@var{n} =} nzmax (@var{SM})\n\
 Return the amount of storage allocated to the sparse matrix @var{SM}.\n\
 \n\
 Note that Octave tends to crop unused memory at the first opportunity\n\
 for sparse objects.  Thus, in general the value of @code{nzmax} will be the\n\
-the same as @code{nnz} except for some cases of user-created sparse objects.\n\
+same as @code{nnz} except for some cases of user-created sparse objects.\n\
 @seealso{nnz, spalloc, sparse}\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 1)
     retval = args(0).nzmax ();
   else
@@ -4485,18 +4485,18 @@ DEFUN (Inf, args, ,
 @deftypefnx {Built-in Function} {} Inf (@var{n})\n\
 @deftypefnx {Built-in Function} {} Inf (@var{n}, @var{m})\n\
 @deftypefnx {Built-in Function} {} Inf (@var{n}, @var{m}, @var{k}, @dots{})\n\
 @deftypefnx {Built-in Function} {} Inf (@dots{}, @var{class})\n\
 Return a scalar, matrix or N-dimensional array whose elements are all equal\n\
 to the IEEE representation for positive infinity.\n\
 \n\
 Infinity is produced when results are too large to be represented using the\n\
-the IEEE floating point format for numbers.  Two common examples which\n\
-produce infinity are division by zero and overflow.\n\
+IEEE floating point format for numbers.  Two common examples which produce\n\
+infinity are division by zero and overflow.\n\
 \n\
 @example\n\
 @group\n\
 [ 1/0 e^800 ]\n\
 @result{} Inf   Inf\n\
 @end group\n\
 @end example\n\
 \n\
diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -1326,17 +1326,17 @@ decimal digits (0-9) and false where the
 %!error isdigit ()
 %!error isdigit (1, 2)
 */
 
 DEFUN (isinf, args, ,
        "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} isinf (@var{x})\n\
 Return a logical array which is true where the elements of @var{x} are\n\
-are infinite and false where they are not.\n\
+infinite and false where they are not.\n\
 \n\
 For example:\n\
 \n\
 @example\n\
 @group\n\
 isinf ([13, Inf, NA, NaN])\n\
       @result{} [ 0, 1, 0, 0 ]\n\
 @end group\n\
diff --git a/scripts/plot/draw/contourc.m b/scripts/plot/draw/contourc.m
--- a/scripts/plot/draw/contourc.m
+++ b/scripts/plot/draw/contourc.m
@@ -45,17 +45,17 @@
 ## @end group
 ## @end example
 ##
 ## @noindent
 ## in which contour line @var{n} has a level (height) of @var{levn} and
 ## length of @var{lenn}.
 ##
 ## The optional return value @var{lev} is a vector with the Z values of
-## of the contour levels.
+## the contour levels.
 ##
 ## Example:
 ##
 ## @example
 ## @group
 ## x = 0:2;
 ## y = x;
 ## z = x' * y;
diff --git a/scripts/plot/draw/cylinder.m b/scripts/plot/draw/cylinder.m
--- a/scripts/plot/draw/cylinder.m
+++ b/scripts/plot/draw/cylinder.m
@@ -24,17 +24,17 @@
 ## @deftypefnx {Function File} {[@var{x}, @var{y}, @var{z}] =} cylinder (@dots{})
 ## Plot a 3-D unit cylinder.
 ##
 ## The optional input @var{r} is a vector specifying the radius along the
 ## unit z-axis.  The default is [1 1] indicating radius 1 at @code{Z == 0}
 ## and at @code{Z == 1}.
 ##
 ## The optional input @var{n} determines the number of faces around the
-## the circumference of the cylinder.  The default value is 20.
+## circumference of the cylinder.  The default value is 20.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## If outputs are requested @code{cylinder} returns three matrices in
 ## @code{meshgrid} format, such that @code{surf (@var{x}, @var{y}, @var{z})}
 ## generates a unit cylinder.
 ##
diff --git a/scripts/plot/draw/ellipsoid.m b/scripts/plot/draw/ellipsoid.m
--- a/scripts/plot/draw/ellipsoid.m
+++ b/scripts/plot/draw/ellipsoid.m
@@ -22,17 +22,17 @@
 ## @deftypefnx {Function File} {} ellipsoid (@var{hax}, @dots{})
 ## @deftypefnx {Function File} {[@var{x}, @var{y}, @var{z}] =} ellipsoid (@dots{})
 ## Plot a 3-D ellipsoid.
 ##
 ## The inputs @var{xc}, @var{yc}, @var{zc} specify the center of the ellipsoid.
 ## The inputs @var{xr}, @var{yr}, @var{zr} specify the semi-major axis lengths.
 ##
 ## The optional input @var{n} determines the number of faces around the
-## the circumference of the cylinder.  The default value is 20.
+## circumference of the cylinder.  The default value is 20.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## If outputs are requested @code{ellipsoid} returns three matrices in
 ## @code{meshgrid} format, such that @code{surf (@var{x}, @var{y}, @var{z})}
 ## generates the ellipsoid.
 ## @seealso{cylinder, rectangle, sphere}
