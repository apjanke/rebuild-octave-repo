# HG changeset patch
# User Rik <rik@octave.org>
# Date 1513371080 28800
#      Fri Dec 15 12:51:20 2017 -0800
# Node ID c23b9af6a664d12780bb7ff54830970a2a4708b7
# Parent  c341ebb40ede6ef40a4e51ea92bd4fbd5d59b620
Remove warnings about 'W', 'A', and 'R' modes in fopen (bug #52644).

* file-io.cc (normalize_fopen_mode): Add comment about why warnings
not necessary here.  Just translate 'W', 'A', 'R' to lowercase.

diff --git a/libinterp/corefcn/file-io.cc b/libinterp/corefcn/file-io.cc
--- a/libinterp/corefcn/file-io.cc
+++ b/libinterp/corefcn/file-io.cc
@@ -105,48 +105,37 @@ cleanup_tmp_files (void)
 
 static void
 normalize_fopen_mode (std::string& mode, bool& use_zlib)
 {
   use_zlib = false;
 
   if (! mode.empty ())
     {
-      // Could probably be faster, but does it really matter?
-
-      // Accept 'W', 'R', and 'A' as 'w', 'r', and 'a' but we warn about
-      // them because Matlab says they don't perform "automatic
-      // flushing" but we don't know precisely what action that implies.
+      // Matlab uses 'A' and 'W' to indicate that buffered writing should
+      // take place.  Octave already does that.  Theoretically, we should
+      // warn about using 'a', 'r', or 'w' because Octave does not enable
+      // automatic flushing with these modes.  The performance hit is ~4X
+      // when using automatic flushing and seems completely unnecessary.
+      // See bug #52644.
 
       size_t pos = mode.find ('W');
 
       if (pos != std::string::npos)
-        {
-          warning_with_id ("Octave:fopen-mode",
-                           R"(fopen: treating mode "W" as equivalent to "w")");
-          mode[pos] = 'w';
-        }
+        mode[pos] = 'w';
 
       pos = mode.find ('R');
 
       if (pos != std::string::npos)
-        {
-          warning_with_id ("Octave:fopen-mode",
-                           R"(fopen: treating mode "R" as equivalent to "r")");
-          mode[pos] = 'r';
-        }
+        mode[pos] = 'r';
 
       pos = mode.find ('A');
 
       if (pos != std::string::npos)
-        {
-          warning_with_id ("Octave:fopen-mode",
-                           R"(fopen: treating mode "A" as equivalent to "a")");
-          mode[pos] = 'a';
-        }
+        mode[pos] = 'a';
 
       pos = mode.find ('z');
 
       if (pos != std::string::npos)
         {
 #if defined (HAVE_ZLIB)
           use_zlib = true;
           mode.erase (pos, 1);
