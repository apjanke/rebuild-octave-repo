# HG changeset patch
# User jwe
# Date 831712815 0
#      Fri May 10 07:20:15 1996 +0000
# Node ID 99658f9b74c89d30dddd4869af034c9230ee7895
# Parent  d750e30a03e4764d9391c8a24d9d9c942f105de9
[project @ 1996-05-10 07:20:15 by jwe]

diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -46,34 +46,43 @@ Software Foundation, 59 Temple Place - S
 #include <sys/types.h>
 #include <unistd.h>
 #endif
 
 #include "defun.h"
 #include "error.h"
 #include "file-ops.h"
 #include "help.h"
+#include "lo-ieee.h"
 #include "oct-fstrm.h"
 #include "oct-iostrm.h"
 #include "oct-map.h"
 #include "oct-obj.h"
 #include "oct-prcstrm.h"
 #include "oct-stream.h"
 #include "oct-strstrm.h"
 #include "pager.h"
 #include "sysdep.h"
 #include "syswait.h"
 #include "utils.h"
 
 void
 initialize_file_io (void)
 {
-  octave_istream *stdin_stream = new octave_istream (&cin, "stdin");
-  octave_ostream *stdout_stream = new octave_ostream (&cout, "stdout");
-  octave_ostream *stderr_stream = new octave_ostream (&cerr, "stderr");
+  octave_istream *stdin_stream
+    = new octave_istream (&cin, "stdin");
+
+  // This uses octave_stdout (see pager.h), not cout so that Octave's
+  // standard output stream will pass through the pager.
+
+  octave_ostream *stdout_stream
+    = new octave_ostream (&octave_stdout, "stdout");
+
+  octave_ostream *stderr_stream
+    = new octave_ostream (&cerr, "stderr");
 
   octave_stream_list::insert (stdin_stream);
   octave_stream_list::insert (stdout_stream);
   octave_stream_list::insert (stderr_stream);
 }
 
 void
 close_files (void)
@@ -123,17 +132,17 @@ fopen_mode_to_ios_mode (const string& mo
       else
 	::error ("invalid mode specified");
     }
 
   return retval;
 }
 
 DEFUN (fclose, args, ,
-  "fclose (FILENAME or FILENUM): close a file")
+  "fclose (FILENUM): close a file")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       retval = (double) octave_stream_list::remove (args(0));
@@ -143,17 +152,17 @@ DEFUN (fclose, args, ,
     }
   else
     print_usage ("fclose");
 
   return retval;
 }
 
 DEFUN (fflush, args, ,
-  "fflush (FILENAME or FILENUM): flush buffered data to output file")
+  "fflush (FILENUM): flush buffered data to output file")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       octave_stream *os = octave_stream_list::lookup (args(0));
@@ -165,17 +174,17 @@ DEFUN (fflush, args, ,
     }
   else
     print_usage ("fflush");
 
   return retval;
 }
 
 DEFUN (fgetl, args, ,
-  "STRING = fgetl (FILENAME or FILENUM [, LENGTH])\n\
+  "STRING = fgetl (FILENUM [, LENGTH])\n\
 \n\
 read a string from a file")
 {
   octave_value retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
@@ -199,17 +208,17 @@ read a string from a file")
     }
   else
     print_usage ("fgetl");
 
   return retval;
 }
 
 DEFUN (fgets, args, ,
-  "STRING = fgets (FILENAME or FILENUM [, LENGTH])\n\
+  "STRING = fgets (FILENUM [, LENGTH])\n\
 \n\
 read a string from a file")
 {
   octave_value retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
@@ -244,17 +253,18 @@ do_stream_open (const string& name, cons
   octave_base_stream *retval = 0;
 
   fid = -1;
 
   int md = fopen_mode_to_ios_mode (mode);
 
   if (! error_state)
     {
-      octave_base_stream::arch_type at = octave_stream::string_to_arch (arch);
+      octave_base_stream::arch_type at
+	= octave_stream::string_to_arch_type (arch);
 
       if (! error_state)
 	retval = new octave_fstream (name, md, at);
     }
 
   return retval;
 }
 
@@ -376,17 +386,17 @@ DEFUN (freport, args, ,
     warning ("freport: ignoring extra arguments");
 
   octave_stdout << octave_stream_list::list_open_files ();
 
   return retval;
 }
 
 DEFUN (frewind, args, ,
-  "frewind (FILENAME or FILENUM): set file position at beginning of file")
+  "frewind (FILENUM): set file position at beginning of file")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       octave_stream *os = octave_stream_list::lookup (args(0));
@@ -398,17 +408,17 @@ DEFUN (frewind, args, ,
     }
   else
     print_usage ("frewind");
 
   return retval;
 }
 
 DEFUN (fseek, args, ,
-  "fseek (FILENAME or FILENUM, OFFSET [, ORIGIN])\n\
+  "fseek (FILENUM, OFFSET [, ORIGIN])\n\
 \n\
 set file position for reading or writing")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 2 || nargin == 3)
@@ -427,17 +437,17 @@ set file position for reading or writing
     }
   else
     print_usage ("fseek");
 
   return retval;
 }
 
 DEFUN (ftell, args, ,
-  "POSITION = ftell (FILENAME or FILENUM): returns the current file position")
+  "POSITION = ftell (FILENUM): returns the current file position")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       octave_stream *os = octave_stream_list::lookup (args(0));
@@ -449,17 +459,17 @@ DEFUN (ftell, args, ,
     }
   else
     print_usage ("ftell");
 
   return retval;
 }
 
 DEFUN (fprintf, args, ,
-  "fprintf (FILENAME or FILENUM, FORMAT, ...)")
+  "fprintf (FILENUM, FORMAT, ...)")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin > 1)
     {
       octave_stream *os = octave_stream_list::lookup (args(0));
@@ -490,17 +500,17 @@ DEFUN (fprintf, args, ,
     }
   else
     print_usage ("fprintf");
 
   return retval;
 }
 
 DEFUN (fputs, args, ,
-  "fputs (FILENAME or FILENUM, STRING)")
+  "fputs (FILENUM, STRING)")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 2)
     {
       octave_stream *os = octave_stream_list::lookup (args(0));
@@ -516,24 +526,24 @@ DEFUN (fputs, args, ,
   return retval;
 }
 
 DEFUN (sprintf, args, ,
   "[s, errmsg, status] = sprintf (FORMAT, ...)")
 {
   octave_value_list retval;
 
-  retval(2) = -1.0;
-  retval(1) = "unknown error";
-  retval(0) = "";
-
   int nargin = args.length ();
 
   if (nargin > 0)
     {
+      retval(2) = -1.0;
+      retval(1) = "unknown error";
+      retval(0) = "";
+
       octave_ostrstream ostr;
 
       octave_stream os (&ostr);
 
       if (os)
 	{
 	  if (args(0).is_string ())
 	    {
@@ -563,41 +573,47 @@ DEFUN (sprintf, args, ,
     }
   else
     print_usage ("sprintf");
 
   return retval;
 }
 
 DEFUN (fscanf, args, ,
-  "[A, B, C, ...] = fscanf (FILENAME or FILENUM, FORMAT, SIZE)")
+  "[A, B, C, ...] = fscanf (FILENUM, FORMAT, SIZE)")
 {
   octave_value_list retval;
 
+  retval (1) = 0.0;
+  retval (0) = Matrix ();
+
   int nargin = args.length ();
 
   if (nargin == 2 || nargin == 3)
     {
       octave_stream *os = octave_stream_list::lookup (args(0));
 
       if (os)
 	{
 	  if (args(1).is_string ())
 	    {
 	      string fmt = args(1).string_value ();
 
 	      int count = 0;
 
-	      // XXX FIXME XXX
-	      Array<int> size (2);
+	      Matrix size = (nargin == 3)
+		? args(2).matrix_value () : Matrix (1, 1, octave_Inf);
 
-	      octave_value tmp = os->scanf (fmt, size, count);
+	      if (! error_state)
+		{
+		  octave_value tmp = os->scanf (fmt, size, count);
 
-	      retval(1) = (double) count;
-	      retval(0) = tmp;
+		  retval(1) = (double) count;
+		  retval(0) = tmp;
+		}
 	    }
 	  else
 	    ::error ("fscanf: format must be a string");
 	}
       else
 	gripe_invalid_file_id ("fscanf");
     }
   else
@@ -606,48 +622,53 @@ DEFUN (fscanf, args, ,
   return retval;
 }
 
 DEFUN (sscanf, args, ,
   "[A, COUNT, ERRMSG, INDEX] = sscanf (STRING, FORMAT, SIZE)")
 {
   octave_value_list retval;
 
-  retval(3) = -1.0;
-  retval(2) = "unknown error";
-  retval(1) = 0.0;
-  retval(0) = Matrix ();
-
   int nargin = args.length ();
 
   if (nargin == 2 || nargin == 3)
     {
+      retval(3) = -1.0;
+      retval(2) = "unknown error";
+      retval(1) = 0.0;
+      retval(0) = Matrix ();
+
       if (args(0).is_string ())
 	{
 	  string data = args(0).string_value ();
 
 	  octave_istrstream istr (data);
 
 	  octave_stream os (&istr);
 
 	  if (os)
 	    {
 	      if (args(1).is_string ())
 		{
 		  string fmt = args(1).string_value ();
 
 		  int count = 0;
 
-		  // XXX FIXME XXX
-		  Array<int> size (2);
+		  Matrix size = (nargin == 3)
+		    ? args(2).matrix_value () : Matrix (1, 1, octave_Inf);
 
 		  octave_value tmp = os.scanf (fmt, size, count);
 
+		  // XXX FIXME XXX -- is this the right thing to do?
+		  // Extract error message first, because getting
+		  // position will clear it.
+		  string errmsg = os.error ();
+
 		  retval(3) = (double) (os.tell () + 1);
-		  retval(2) = os.error ();
+		  retval(2) = errmsg;
 		  retval(1) = (double) count;
 		  retval(0) = tmp;
 		}
 	      else
 		::error ("sscanf: format must be a string");
 	    }
 	  else
 	    ::error ("sscanf: unable to create temporary input buffer");
@@ -656,60 +677,228 @@ DEFUN (sscanf, args, ,
 	::error ("sscanf: first argument must be a string");
     }
   else
     print_usage ("sscanf");
 
   return retval;
 }
 
-DEFUN (fread, , ,
-  "[DATA, COUNT] = fread (FILENUM, SIZE, PRECISION)\n\
+static octave_value
+do_fread (octave_stream& os, const octave_value& size_arg,
+	  const octave_value& prec_arg, const octave_value& skip_arg,
+	  const octave_value& arch_arg, int& count)
+{
+  octave_value retval;
+
+  count = -1;
+
+  Matrix size = size_arg.matrix_value ();
+
+  if (! error_state)
+    {
+      string prec = prec_arg.string_value ();
+
+      if (! error_state)
+	{
+	  octave_base_stream::data_type dt
+	    = octave_stream::string_to_data_type (prec);
+
+	  if (! error_state)
+	    {
+	      double dskip = skip_arg.double_value ();
+
+	      if (! error_state)
+		{
+		  if (D_NINT (dskip) == dskip)
+		    {
+		      int skip = NINT (dskip);
+
+		      string arch = arch_arg.string_value ();
+
+		      if (! error_state)
+			{
+			  octave_base_stream::arch_type at
+			    = octave_stream::string_to_arch_type (arch);
+
+			  if (! error_state)
+			    retval = os.read (size, dt, skip, at, count);
+			}
+		      else
+			::error ("fread: architecture type must be a string");
+		    }
+		  else
+		    ::error ("fread: skip must be an integer");
+		}
+	      else
+		::error ("fread: invalid skip specified");
+	    }
+	  else
+	    ::error ("fread: invalid data type specified");
+	}
+      else
+	::error ("fread: precision must be a string");
+    }
+  else
+    ::error ("fread: invalid size specified");
+
+  return retval;
+}
+
+DEFUN (fread, args, ,
+  "[DATA, COUNT] = fread (FILENUM [, SIZE] [, PRECISION] [, SKIP] [, ARCH])\n\
 \n\
  Reads data in binary form of type PRECISION from a file.\n\
 \n\
  FILENUM   : file number from fopen\n\
  SIZE      : size specification for the Data matrix\n\
  PRECISION : type of data to read, valid types are\n\
 \n\
              \"char\"   \"schar\" \"short\"  \"int\"  \"long\" \"float\"\n\
              \"double\" \"uchar\" \"ushort\" \"uint\" \"ulong\"\n\
 \n\
  DATA      : matrix in which the data is stored\n\
  COUNT     : number of elements read")
 {
   octave_value_list retval;
-  // XXX IMPLEMENTME XXX
+
+  int nargin = args.length ();
+
+  if (nargin > 1 && nargin < 6)
+    {
+      retval(1) = -1.0;
+      retval(0) = Matrix ();
+
+      octave_stream *os = octave_stream_list::lookup (args(0));
+
+      if (os)
+	{
+	  octave_value size = (nargin > 1)
+	    ? args(1) : octave_value (octave_Inf);
+
+	  octave_value prec = (nargin > 2)
+	    ? args(2) : octave_value ("uchar");
+
+	  octave_value skip = (nargin > 3)
+	    ? args(3) : octave_value (0.0);
+
+	  octave_value arch = (nargin > 4)
+	    ? args(4) : octave_value ("native");
+
+	  int count = -1;
+
+	  octave_value tmp = do_fread (*os, size, prec, skip, arch, count);
+
+	  retval(1) = (double) count;
+	  retval(0) = tmp;
+	}
+      else
+	gripe_invalid_file_id ("fread");
+    }
+  else
+    print_usage ("fread");
+
   return retval;
 }
 
-DEFUN (fwrite, , ,
-  "COUNT = fwrite (FILENUM, DATA, PRECISION)\n\
+static int
+do_fwrite (octave_stream& os, const octave_value& data,
+	   const octave_value& prec_arg, const octave_value& skip_arg,
+	   const octave_value& arch_arg)
+{
+  int retval = -1;
+
+  string prec = prec_arg.string_value ();
+
+  if (! error_state)
+    {
+      octave_base_stream::data_type dt
+	= octave_stream::string_to_data_type (prec);
+
+      if (! error_state)
+	{
+	  double dskip = skip_arg.double_value ();
+
+	  if (! error_state)
+	    {
+	      if (D_NINT (dskip) == dskip)
+		{
+		  int skip = NINT (dskip);
+
+		  string arch = arch_arg.string_value ();
+
+		  if (! error_state)
+		    {
+		      octave_base_stream::arch_type at
+			= octave_stream::string_to_arch_type (arch);
+
+		      if (! error_state)
+			retval = os.write (data, dt, skip, at);
+		    }
+		  else
+		    ::error ("fwrite: architecture type must be a string");
+		}
+	      else
+		::error ("fwrite: skip must be an integer");
+	    }
+	  else
+	    ::error ("fwrite: invalid skip specified");
+	}
+    }
+  else
+    ::error ("fwrite: precision must be a string");
+
+  return retval;
+}
+
+DEFUN (fwrite, args, ,
+  "COUNT = fwrite (FILENUM, DATA [, PRECISION] [, SKIP] [, ARCH])\n\
 \n\
  Writes data to a file in binary form of size PRECISION\n\
 \n\
  FILENUM   : file number from fopen\n\
  DATA      : matrix of elements to be written\n\
  PRECISION : type of data to read, valid types are\n\
 \n\
              \"char\"   \"schar\" \"short\"  \"int\"  \"long\" \"float\"\n\
              \"double\" \"uchar\" \"ushort\" \"uint\" \"ulong\"\n\
 \n\
  COUNT     : number of elements written")
 {
-  octave_value_list retval;
-  // XXX IMPLEMENTME XXX
+  octave_value retval = -1.0;
+
+  int nargin = args.length ();
+
+  if (nargin > 1 && nargin < 6)
+    {
+      octave_stream *os = octave_stream_list::lookup (args(0));
+
+      if (os)
+	{
+	  octave_value data = args(1);
+	  octave_value prec = (nargin > 2) ? args(2) : octave_value ("uchar");
+	  octave_value skip = (nargin > 3) ? args(3) : octave_value (0.0);
+	  octave_value arch = (nargin > 4) ? args(4) : octave_value ("native");
+
+	  retval = do_fwrite (*os, data, prec, skip, arch);
+	}
+      else
+	gripe_invalid_file_id ("fwrite");
+    }
+  else
+    print_usage ("fwrite");
+
   return retval;
 }
 
 DEFUN (feof, args, ,
-  "ERROR = feof (FILENAME or FILENUM)\n\
+  "ERROR = feof (FILENUM)\n\
 \n\
  Returns a non zero value for an end of file condition for the\n\
- file specified by FILENAME or FILENUM from fopen")
+ file specified by FILENUM from fopen")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
       octave_stream *os = octave_stream_list::lookup (args(0));
@@ -721,20 +910,20 @@ DEFUN (feof, args, ,
     }
   else
     print_usage ("feof");
 
   return retval;
 }
 
 DEFUN (ferror, args, ,
-  "ERROR = ferror (FILENAME or FILENUM, [\"clear\"])\n\
+  "ERROR = ferror (FILENUM, [\"clear\"])\n\
 \n\
  Returns a non zero value for an error condition on the\n\
- file specified by FILENAME or FILENUM from fopen")
+ file specified by FILENUM from fopen")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
       octave_stream *os = octave_stream_list::lookup (args(0));
@@ -814,17 +1003,17 @@ DEFUN (popen, args, ,
     }
   else
     print_usage ("popen");
 
   return retval;
 }
 
 DEFUN (pclose, args, ,
-  "pclose (FILENAME or FILENUM)\n\
+  "pclose (FILENUM)\n\
 \n\
   Close a pipe and terminate the associated process")
 {
   double retval = -1.0;
 
   int nargin = args.length ();
 
   if (nargin == 1)
