# HG changeset patch
# User jwe
# Date 908561131 0
#      Fri Oct 16 18:05:31 1998 +0000
# Node ID bef7b73c0724f1e066f6ddbb62bbfead26b5203d
# Parent  df7c57a6639dc9edf6a88863abcf1acf19e30ff2
[project @ 1998-10-16 18:05:26 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,14 @@
+Fri Oct  2 14:23:59 1998  Kurt Hornik  <Kurt.Hornik@ci.tuwien.ac.at>
+
+	* octave-inf.el (inferior-octave-prompt):  Also match prompts of
+	the form `octave.bin:1>' which come from using precopiled binary
+	versions.
+
 Thu Sep 24 13:51:03 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in (AC_OUTPUT): Add libcruft/ordered-qz to the list.
 	Delete libcruft/balgen and libcruft/eispack from the list.
 
 Mon Aug 31 12:07:02 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* config.sub: Accept armv4 everywhere arm is allowed.
diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -1,14 +1,19 @@
 Summary of changes for version 2.1.x:
 ------------------------------------
 
   * If fread is given a skip parameter, the skip is performed after
     the read instead of before (for compatibility with Matlab).
 
+  * The new built-in variable `crash_dumps_octave_core' controls
+    whether Octave writes user variables to the file `octave-core'
+    when it crashes or is killed by a signal.  The default value is 1
+    (0 if you use --traditional).
+
   * Running `make check' should work now before you run `make install', 
     even if you build a copy of Octave that depends on shared versions
     of the Octave libraries.
 
   * For matrices, x(:) now works no matter what the value of
     do_fortran_indexing is.
 
   * New keywords __FILE__ and __LINE__ expand to the name of the file
diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+Fri Oct  9 00:27:33 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* faq/Makefile.in, interpreter/Makefile.in, liboctave/Makefile.in:
+	New rules for generating HTML files from Texinfo sources.
+
 Thu May 14 21:04:40 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* interpreter/Makefile.in (../../BUGS, ../../INSTALL): Add
 	--no-validate to makeinfo args.
 
 Wed Jul  2 16:41:04 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* refcard/Makefile.in: Remove .tex files from binary distributions.
diff --git a/doc/faq/Makefile.in b/doc/faq/Makefile.in
--- a/doc/faq/Makefile.in
+++ b/doc/faq/Makefile.in
@@ -17,43 +17,46 @@ include $(TOPDIR)/Makeconf
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
 SOURCES =
 
 TEXINFO := Octave-FAQ.texi
 
-FORMATTED := Octave-FAQ.info Octave-FAQ.dvi Octave-FAQ.ps
+FORMATTED := Octave-FAQ.info Octave-FAQ.dvi Octave-FAQ.ps Octave-FAQ_toc.html
 
 DISTFILES := Makefile.in $(TEXINFO) $(FORMATTED)
 
 BINDISTFILES =
 
 SPELL := $(patsubst %.texi, %.spell, $(ALL_TEXINFO))
 
 %.spell : %.texi
 	rm -f $@
 	sed -e 's/@@/ at /g' -e 's/@[a-zA-Z]*//g' $< | spell > $@.tmp
 	mv $@.tmp $@
 
-all: Octave-FAQ.info Octave-FAQ.dvi Octave-FAQ.ps
+all: Octave-FAQ.info Octave-FAQ.dvi Octave-FAQ.ps Octave-FAQ_toc.html
 .PHONY: all
 
 Octave-FAQ.info: Octave-FAQ.texi
 	-makeinfo -I$(srcdir) $(srcdir)/Octave-FAQ.texi
 
 Octave-FAQ.dvi: Octave-FAQ.texi
 	-TEXINPUTS="$(srcdir):$(srcdir)/..:$(TEXINPUTS):"; \
 	  export TEXINPUTS; \
 	  $(TEXI2DVI) $(srcdir)/Octave-FAQ.texi
 
 Octave-FAQ.ps: Octave-FAQ.dvi
 	-dvips -o Octave-FAQ.ps Octave-FAQ.dvi
 
+Octave-FAQ_toc.html:
+	-texi2html -split_chapter $(srcdir)/Octave-FAQ.texi
+
 check install install-strip uninstall:
 .PHONY: check install install-strip uninstall
 
 tags: $(SOURCES)
 	ctags $(SOURCES)
 
 TAGS: $(SOURCES)
 	etags $(SOURCES)
@@ -68,18 +71,19 @@ mostlyclean clean:
 	Octave-FAQ.aux	Octave-FAQ.log Octave-FAQ.toc
 .PHONY: mostlyclean clean
 
 distclean: clean
 	rm -f Makefile
 .PHONY: distclean
 
 maintainer-clean: distclean
-	rm -f tags TAGS Octave-FAQ.info Octave-FAQ.info-* \
-	Octave-FAQ.dvi Octave-FAQ.ps
+	rm -f tags TAGS Octave-FAQ.info Octave-FAQ.info-*
+	rm -f Octave-FAQ.dvi Octave-FAQ.ps
+	rm -f Octave-FAQ_*.html
 .PHONY: maintainer-clean
 
 dist: all
 	ln $(DISTFILES) ../../`cat ../../.fname`/doc/faq
 .PHONY: dist
 
 bin-dist:
 	if [ -n "$(BINDISTFILES)" ]; then \
diff --git a/doc/interpreter/Makefile.in b/doc/interpreter/Makefile.in
--- a/doc/interpreter/Makefile.in
+++ b/doc/interpreter/Makefile.in
@@ -25,17 +25,17 @@ TEXINFO = arith.texi audio.texi basics.t
 	eval.texi expr.texi fn-idx.texi func.texi gpl.texi \
 	grammar.texi image.texi install.texi intro.texi io.texi \
 	linalg.texi matrix.texi nonlin.texi numbers.texi octave.texi \
 	op-idx.texi optim.texi plot.texi poly.texi preface.texi \
 	quad.texi set.texi signal.texi stats.texi stmt.texi \
 	strings.texi struct.texi system.texi tips.texi var.texi \
 	vr-idx.texi
 
-FORMATTED = octave.dvi octave.ps octave.info octave.info-[0-9]*
+FORMATTED = octave.dvi octave.ps octave.info octave.info-[0-9]* octave_*.html
 
 DISTFILES = Makefile.in dir octave.1 $(TEXINFO) $(FORMATTED)
 
 ifeq ($(wildcard octave.info), )
   BINDISTFILES = $(addprefix $(srcdir)/, octave.1 $(FORMATTED))
 else
   BINDISTFILES = $(srcdir)/octave.1 $(FORMATTED)
 endif
@@ -47,17 +47,17 @@ version_file := $(firstword $(foreach fi
 
 SPELL = $(patsubst %.texi, %.spell, $(TEXINFO))
 
 %.spell : %.texi
 	rm -f $@
 	sed -e 's/@@/ at /g' -e 's/@[a-zA-Z]*//g' $< | spell > $@.tmp
 	mv $@.tmp $@
 
-all: octave.info octave.dvi octave.ps
+all: octave.info octave.dvi octave.ps octave_toc.html
 .PHONY: all
 
 octave.info: $(TEXINFO) ../conf.texi
 	-makeinfo -I$(srcdir) -I$(srcdir)/.. $(srcdir)/octave.texi
 
 octave.dvi: $(TEXINFO) ../conf.texi
 	-TEXINPUTS="$(srcdir):$(srcdir)/..:$(TEXINPUTS):"; \
 	  export TEXINPUTS; \
@@ -75,16 +75,19 @@ octave.ps: octave.dvi
 
 ../../BUGS: bugs.texi
 	rm -f BUGS
 	-makeinfo -D BUGSONLY \
 	  --no-validate --no-headers --no-split --output BUGS \
 	  -I$(srcdir) -I$(srcdir)/.. $(srcdir)/bugs.texi
 	mv BUGS ../../BUGS
 
+octave_toc.html:
+	-texi2html -split_chapter -I$(srcdir)/.. $(srcdir)/octave.texi
+
 check: all
 .PHONY: check
 
 install install-strip: all
 	$(top_srcdir)/mkinstalldirs $(man1dir) $(infodir)
 	@if test -d $(man1dir); then \
 	  rm -f $(man1dir)/octave$(man1ext); \
 	  echo "installing $(srcdir)/octave.1 in $(man1dir)"; \
@@ -143,17 +146,18 @@ mostlyclean clean:
 	octave.log octave.toc
 .PHONY: mostlyclean clean
 
 distclean: clean
 	rm -f Makefile
 .PHONY: distclean
 
 maintainer-clean: distclean
-	rm -f tags TAGS octave.info octave.info-* octave.dvi octave.ps \
+	rm -f tags TAGS octave.info octave.info-* octave.dvi octave.ps
+	rm -f octave_*.html
 .PHONY: maintainer-clean
 
 dist: all
 	ln $(DISTFILES) ../../`cat ../../.fname`/doc/interpreter
 .PHONY: dist
 
 bin-dist:
 	if [ -n "$(BINDISTFILES)" ]; then \
diff --git a/doc/interpreter/basics.texi b/doc/interpreter/basics.texi
--- a/doc/interpreter/basics.texi
+++ b/doc/interpreter/basics.texi
@@ -152,16 +152,17 @@ values for compatibility with @sc{Matlab
 
 @example
 PS1                           = ">> "
 PS2                           = ""
 beep_on_error                 = 1
 default_save_format           = "mat-binary"
 define_all_return_values      = 1
 do_fortran_indexing           = 1
+crash_dumps_octave_core       = 0
 empty_list_elements_ok        = 1
 implicit_str_to_num_ok        = 1
 ok_to_lose_imaginary_part     = 1
 page_screen_output            = 0
 prefer_column_vectors         = 0
 print_empty_dimensions        = 0
 treat_neg_dim_as_zero         = 1
 warn_function_name_clash      = 0
diff --git a/doc/interpreter/io.texi b/doc/interpreter/io.texi
--- a/doc/interpreter/io.texi
+++ b/doc/interpreter/io.texi
@@ -374,17 +374,24 @@ The command
 save -binary data a b*
 @end example
 
 @noindent
 saves the variable @samp{a} and all variables beginning with @samp{b} to
 the file @file{data} in Octave's binary format.
 @end deffn
 
-There are two variables that modify the behavior of @code{save}.
+There are two variables that modify the behavior of @code{save} and one
+that controls whether variables are saved when Octave exits unexpectedly.
+
+@defvr {Built-in Variable} crash_dumps_octave_core
+If this variable is set to a nonzero value, Octave tries to save all
+current variables the the file "octave-core" if it crashes or receives a
+hangup, terminate or similar signal.  The default value is 1.
+@end defvr
 
 @defvr {Built-in Variable} default_save_format
 This variable specifies the default format for the @code{save} command.
 It should have one of the following values: @code{"ascii"},
 @code{"binary"}, @code{float-binary}, or @code{"mat-binary"}.  The
 initial default save format is Octave's text format.
 @end defvr
 
diff --git a/doc/interpreter/system.texi b/doc/interpreter/system.texi
--- a/doc/interpreter/system.texi
+++ b/doc/interpreter/system.texi
@@ -1018,22 +1018,16 @@ Changes the current working directory to
 directory does not exist, an error message is printed and the working
 directory is not changed.
 @end deffn
 
 @deftypefn {Built-in Function} {} pwd ()
 Return the current working directory.
 @end deftypefn
 
-@defvr {Built-in Variable} PWD
-The current working directory.  The value of @code{PWD} is updated each
-time the current working directory is changed with the @samp{cd}
-command.
-@end defvr
-
 @deffn {Command} ls options
 @deffnx {Command} dir options
 List directory contents.  For example,
 
 @example
 ls -l
      @print{} total 12
      @print{} -rw-r--r--   1 jwe  users  4488 Aug 19 04:02 foo.m
diff --git a/doc/interpreter/var.texi b/doc/interpreter/var.texi
--- a/doc/interpreter/var.texi
+++ b/doc/interpreter/var.texi
@@ -36,17 +36,17 @@ Case is significant in variable names.  
 @code{A} are distinct variables.
 
 A variable name is a valid expression by itself.  It represents the
 variable's current value.  Variables are given new values with
 @dfn{assignment operators} and @dfn{increment operators}.
 @xref{Assignment Ops, ,Assignment Expressions}.
 
 A number of variables have special built-in meanings.  For example,
-@code{PWD} holds the current working directory, and @code{pi} names the
+@code{ans} holds the current working directory, and @code{pi} names the
 ratio of the circumference of a circle to its diameter. @xref{Summary of
 Built-in Variables}, for a list of all the predefined variables.  Some
 of these built-in symbols are constants and may not be changed.  Others
 can be used and assigned just like all other variables, but their values
 are also used or changed automatically by Octave.
 
 Variables in Octave do not have fixed types, so it is possible to first
 store a numeric value in a variable and then to later use the same name
@@ -391,16 +391,21 @@ Default value: @code{[]}.
 
 Default value: @code{"ascii"}.
 
 @item do_fortran_indexing
 @xref{Index Expressions}.
 
 Default value: 0.
 
+@item crash_dumps_octave_core
+@xref{Simple File I/O}.
+
+Default value: 1.
+
 @item define_all_return_values
 @xref{Multiple Return Values}.
 
 Default value: 0.
 
 @item empty_list_elements_ok
 @xref{Empty Matrices}.
 
diff --git a/doc/liboctave/Makefile.in b/doc/liboctave/Makefile.in
--- a/doc/liboctave/Makefile.in
+++ b/doc/liboctave/Makefile.in
@@ -20,43 +20,47 @@ INSTALL_DATA = @INSTALL_DATA@
 
 SOURCES =
 
 TEXINFO = array.texi bugs.texi cp-idx.texi dae.texi diffeq.texi \
 	error.texi factor.texi fn-idx.texi install.texi intro.texi \
 	liboctave.texi matvec.texi nleqn.texi nlfunc.texi ode.texi \
 	optim.texi preface.texi quad.texi range.texi
 
-FORMATTED = liboctave.dvi liboctave.ps liboctave.info liboctave.info-[0-9]*
+FORMATTED = liboctave.dvi liboctave.ps liboctave.info \
+	liboctave.info-[0-9]* liboctave_*.html
 
 DISTFILES = Makefile.in gpl.texi $(TEXINFO) $(FORMATTED)
 
 BINDISTFILES =
 
 SPELL = $(patsubst %.texi, %.spell, $(TEXINFO))
 
 %.spell : %.texi
 	rm -f $@
 	sed -e 's/@@/ at /g' -e 's/@[a-zA-Z]*//g' $< | spell > $@.tmp
 	mv $@.tmp $@
 
-all: liboctave.info liboctave.dvi liboctave.ps
+all: liboctave.info liboctave.dvi liboctave.ps liboctave_toc.html
 .PHONY: all
 
 liboctave.info: $(TEXINFO) ../conf.texi
 	-makeinfo -I$(srcdir) -I$(srcdir)/.. $(srcdir)/liboctave.texi
 
 liboctave.dvi: $(TEXINFO) ../conf.texi
 	-TEXINPUTS="$(srcdir):$(srcdir)/..:$(TEXINPUTS):"; \
 	  export TEXINPUTS; \
 	  $(TEXI2DVI) $(srcdir)/liboctave.texi
 
 liboctave.ps: liboctave.dvi
 	-dvips -o liboctave.ps liboctave.dvi
 
+liboctave_toc.html:
+	-texi2html -split_chapter -I$(srcdir)/.. $(srcdir)/liboctave.texi
+
 check:
 .PHONY: check
 
 install install-strip: all
 .PHONY: install install-strip
 
 uninstall:
 	rm -f $(infodir)/liboctave.info*
@@ -79,18 +83,19 @@ mostlyclean clean:
 	liboctave.toc
 .PHONY: mostlyclean clean
 
 distclean: clean
 	rm -f Makefile
 .PHONY: distclean
 
 maintainer-clean: distclean
-	rm -f tags TAGS liboctave.info liboctave.info-* \
-	liboctave.dvi liboctave.ps
+	rm -f tags TAGS liboctave.info liboctave.info-*
+	rm -f liboctave.dvi liboctave.ps
+	rm -f liboctave_*.html
 .PHONY: maintainer-clean
 
 dist: all
 	ln $(DISTFILES) ../../`cat ../../.fname`/doc/liboctave
 .PHONY: dist
 
 bin-dist:
 	if [ -n "$(BINDISTFILES)" ]; then \
diff --git a/emacs/octave-inf.el b/emacs/octave-inf.el
--- a/emacs/octave-inf.el
+++ b/emacs/octave-inf.el
@@ -28,17 +28,17 @@
 
 (require 'octave-mod)
 (require 'comint)
 
 (defvar inferior-octave-program "octave"
   "*Program invoked by `inferior-octave'.")
 
 (defvar inferior-octave-prompt
-  "\\(^octave\\(:[0-9]+\\)?\\|^debug\\|^\\)>+ "
+  "\\(^octave\\(\\|.bin\\)\\(:[0-9]+\\)?\\|^debug\\|^\\)>+ "
   "*Regexp to match prompts for the inferior Octave process.")
 
 (defvar inferior-octave-startup-file nil
   "*Name of the inferior Octave startup file.
 The contents of this file are sent to the inferior Octave process on
 startup.")
 
 (defvar inferior-octave-startup-args '("-i")
diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,13 @@
+Thu Oct 15 00:43:13 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ranlib: Update to newer version of randlib.
+	* ranlib/Makefile.in (SPECIAL): Update list.
+
 Thu Sep 24 11:59:02 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* balgen, eispack: Delete directories and unnecesary files.
 	* Makefile.in (CRUFT_DIRS): Delete eispack and balgen from the list.
 
 	* lapack/xdlamch.f: New file.
 
 	* ordered-qz: New directory.
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+Fri Oct 16 01:08:30 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* chMatrix.cc (charMatrix::extract): New function.
+	(charMatrix::charMatrix (char c)): New constructor.
+
+Tue Oct 13 22:11:08 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* cmd-edit.h: (command_editor::do_read_init_file): New function.
+	* cmd-edit.cc (command_editor::read_init_file): New function.
+	(gnu_readline::do_read_init_file): Likewise.
+
 Fri Sep 25 14:26:44 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* oct-env.cc (octave_env::do_get_home_directory): 
  	If HOME can't be found, set it to "/".
 	(octave_env::do_get_user_name)
 	If user name can't be found, set it to "unknown".
 	(octave_env::do_get_host_name)
 	If host name can't be found, set it to "unknown".
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -240,18 +240,16 @@ LSODE::do_integrate (double tout)
   rwork.elem (6) = (minimum_step_size () >= 0.0) ? minimum_step_size () : 0.0;
 
   if (step_limit () > 0)
     iwork.elem (5) = step_limit ();
 
   int *piwork = iwork.fortran_vec ();
   double *prwork = rwork.fortran_vec ();
 
- again:
-
   F77_XFCN (lsode, LSODE, (lsode_f, n, xp, t, tout, itol, rel_tol,
 			   abs_tol, itask, istate, iopt, prwork, lrw,
 			   piwork, liw, lsode_j, method_flag));
 
   if (f77_exception_encountered)
     {
       integration_error = 1;
       (*current_liboctave_error_handler) ("unrecoverable error in lsode");
@@ -267,28 +265,20 @@ LSODE::do_integrate (double tout)
 	          // supplied or wrong choice of mf or tolerances).
 	case -4:  // repeated error test failures (check all inputs).
 	case -3:  // illegal input detected (see printed message).
 	case -2:  // excess accuracy requested (tolerances too small).
 	  integration_error = 1;
 	  break;
 
 	case -1:  // excess work done on this call (perhaps wrong mf).
-	  if (step_limit () > 0)
-	    {
-	      (*current_liboctave_error_handler)
-		("giving up after more than %d steps attempted in lsode",
-		 step_limit ());
-	      integration_error = 1;
-	    }
-	  else
-	    {
-	      istate = 2;
-	      goto again;
-	    }
+	  (*current_liboctave_error_handler)
+	    ("giving up after more than %d steps attempted in lsode",
+	     step_limit ());
+	  integration_error = 1;
 	  break;
 
 	case 2:  // lsode was successful
 	  retval = x;
 	  t = tout;
 	  break;
 	  
 	default: // Error?
diff --git a/liboctave/LSODE.h b/liboctave/LSODE.h
--- a/liboctave/LSODE.h
+++ b/liboctave/LSODE.h
@@ -59,17 +59,21 @@ public:
     {
       double sqrt_eps = ::sqrt (DBL_EPSILON);
 
       x_absolute_tolerance = sqrt_eps;
       x_initial_step_size = -1.0;
       x_maximum_step_size = -1.0;
       x_minimum_step_size = 0.0;
       x_relative_tolerance = sqrt_eps;
-      x_step_limit = 500;
+
+      // This is consistent with earlier versions of Octave, and is
+      // much larger than the default of 500 specified in the LSODE
+      // sources.
+      x_step_limit = 100000;
     }
 
   void copy (const LSODE_options& opt)
     {
       x_absolute_tolerance = opt.x_absolute_tolerance;
       x_initial_step_size = opt.x_initial_step_size;
       x_maximum_step_size = opt.x_maximum_step_size;
       x_minimum_step_size = opt.x_minimum_step_size;
diff --git a/liboctave/chMatrix.cc b/liboctave/chMatrix.cc
--- a/liboctave/chMatrix.cc
+++ b/liboctave/chMatrix.cc
@@ -35,16 +35,27 @@ Software Foundation, 59 Temple Place - S
 
 #include "lo-error.h"
 #include "str-vec.h"
 #include "mx-base.h"
 #include "mx-inlines.cc"
 
 // charMatrix class.
 
+charMatrix::charMatrix (char c)
+  : MArray2<char> ()
+{
+  int nc = 1;
+  int nr = 1;
+
+  resize (nr, nc);
+
+  elem (0, 0) = c;
+}
+
 charMatrix::charMatrix (const char *s)
   : MArray2<char> ()
 {
   int nc = s ? strlen (s) : 0;
   int nr = s && nc > 0 ? 1 : 0;
 
   resize (nr, nc);
 
@@ -171,16 +182,34 @@ charMatrix::transpose (void) const
     {
       for (int j = 0; j < nc; j++)
 	for (int i = 0; i < nr; i++)
 	  result.elem (j, i) = elem (i, j);
     }
   return result;
 }
 
+charMatrix
+charMatrix::extract (int r1, int c1, int r2, int c2) const
+{
+  if (r1 > r2) { int tmp = r1; r1 = r2; r2 = tmp; }
+  if (c1 > c2) { int tmp = c1; c1 = c2; c2 = tmp; }
+
+  int new_r = r2 - r1 + 1;
+  int new_c = c2 - c1 + 1;
+
+  charMatrix result (new_r, new_c);
+
+  for (int j = 0; j < new_c; j++)
+    for (int i = 0; i < new_r; i++)
+      result.elem (i, j) = elem (r1+i, c1+j);
+
+  return result;
+}
+
 // XXX FIXME XXX -- these should probably return a boolMatrix type
 // instead, but that will have to wait for a future version...
 
 Matrix
 charMatrix::all (void) const
 {
   int nr = rows ();
   int nc = cols ();
diff --git a/liboctave/chMatrix.h b/liboctave/chMatrix.h
--- a/liboctave/chMatrix.h
+++ b/liboctave/chMatrix.h
@@ -41,16 +41,17 @@ friend class ComplexMatrix;
 
 public:
 
   charMatrix (void) : MArray2<char> () { }
   charMatrix (int r, int c) : MArray2<char> (r, c) { }
   charMatrix (int r, int c, char val) : MArray2<char> (r, c, val) { }
   charMatrix (const MArray2<char>& a) : MArray2<char> (a) { }
   charMatrix (const charMatrix& a) : MArray2<char> (a) { }
+  charMatrix (char c);
   charMatrix (const char *s);
   charMatrix (const string& s);
   charMatrix (const string_vector& s);
 
   charMatrix& operator = (const charMatrix& a)
     {
       MArray2<char>::operator = (a);
       return *this;
@@ -63,16 +64,20 @@ public:
 
   charMatrix& insert (const char *s, int r, int c);
   charMatrix& insert (const charMatrix& a, int r, int c);
 
   string row_as_string (int r, bool strip_trailing_whitespace = false) const;
 
   charMatrix transpose (void) const;
 
+  // resize is the destructive equivalent for this one
+
+  charMatrix extract (int r1, int c1, int r2, int c2) const;
+
   Matrix all (void) const;
   Matrix any (void) const;
 
 #if 0
   // i/o
 
   friend ostream& operator << (ostream& os, const Matrix& a);
   friend istream& operator >> (istream& is, Matrix& a);
diff --git a/liboctave/cmd-edit.cc b/liboctave/cmd-edit.cc
--- a/liboctave/cmd-edit.cc
+++ b/liboctave/cmd-edit.cc
@@ -109,16 +109,18 @@ public:
   void do_newline (void);
 
   void do_clear_undo_list (void);
 
   void do_set_startup_hook (fcn f);
 
   void do_restore_startup_hook (void);
 
+  void do_read_init_file (const string& file);
+
   static void operate_and_get_next (int, int);
 
 private:
 
   fcn previous_startup_hook;
 
   completion_fcn completion_function;
 
@@ -319,16 +321,25 @@ gnu_readline::do_set_startup_hook (fcn f
 
 void
 gnu_readline::do_restore_startup_hook (void)
 {
   rl_startup_hook = previous_startup_hook;
 }
 
 void
+gnu_readline::do_read_init_file (const string& file)
+{
+  if (file.empty ())
+    rl_re_read_init_file ();
+  else
+    rl_read_init_file (file.c_str ());
+}
+
+void
 gnu_readline::operate_and_get_next (int /* count */, int /* c */)
 {
   // Accept the current line.
 
   command_editor::newline ();
 
   // Find the current line, and find the next line to use.
 
@@ -645,16 +656,23 @@ command_editor::set_startup_hook (fcn f)
 
 void
 command_editor::restore_startup_hook (void)
 {
   if (instance_ok ())
     instance->do_restore_startup_hook ();
 }
 
+void
+command_editor::read_init_file (const string& file)
+{
+  if (instance_ok ())
+    instance->do_read_init_file (file);
+}
+
 // Return a string which will be printed as a prompt.  The string may
 // contain special characters which are decoded as follows: 
 //   
 //	\t	the time
 //	\d	the date
 //	\n	CRLF
 //	\s	the name of the shell (program)
 //	\w	the current working directory
diff --git a/liboctave/cmd-edit.h b/liboctave/cmd-edit.h
--- a/liboctave/cmd-edit.h
+++ b/liboctave/cmd-edit.h
@@ -80,16 +80,18 @@ public:
   static void newline (void);
 
   static void clear_undo_list (void);
 
   static void set_startup_hook (fcn f);
 
   static void restore_startup_hook (void);
 
+  static void read_init_file (const string& file = string ());
+
   static int current_command_number (void);
 
   static void reset_current_command_number (int n);
 
   static void increment_current_command_number (void);
 
 private:
 
@@ -151,16 +153,18 @@ protected:
   virtual void do_newline (void) = 0;
 
   virtual void do_clear_undo_list (void) { }
 
   virtual void do_set_startup_hook (fcn) { }
 
   virtual void do_restore_startup_hook (void) { }
 
+  virtual void do_read_init_file (const string&) { }
+
   int read_octal (const string& s);
 
   void error (int);
 
   void error (const string&);
 
   // The current command number.
   int command_number;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,65 @@
+Fri Oct 16 00:52:15 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* parse.y (in_matrix_or_assign_lhs): New subroutine for lexical
+	feedback.
+	(matrix): Use it.
+	(assign_lhs): Ditto.
+	* lex.h (lexical_feedback::looking_at_matrix_or_assign_lhs): New
+	data member.
+	* lex.l (handle_identifier): Use it to handle keywords like `cd'
+	as variables in contexts like [ab, cd] = foo ().
+
+	* ov-str-mat.h
+	(octave_char_matrix_str::octave_char_matrix_str (char c)): 
+	New constructor.
+	* ov-ch-mat.h (octave_char_matrix::octave_char_matrix (char c)):
+ 	New constructor.
+	* ov.cc (octave_value::octave_value (char c): New constructor.
+
+	* pt-loop.cc (tree_simple_for_command::eval): Handle case of RHS
+	as string.
+
+Thu Oct 15 00:56:47 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DLD-FUNCTIONS/rand.cc: Declare Fortran subroutines as returning
+	int, not int*.
+
+Wed Oct 14 23:51:31 1998  Georg Thimm <thimm@idiap.ch>
+
+	* load-save.cc (Vcrash_dumps_octave_core): New static variable.
+	(save_user_variables): Only save variables if
+	Vcrash_dumps_octave_core is true.
+	(symbols_of_load_save): Add DEFVAR for it here.
+	(crash_dumps_octave_core): New function.
+	* octave.cc (maximum_braindamage): Bind crash_dumps_octave_core to
+	0.0 here.
+
+Tue Oct 13 22:05:55 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* input.cc (read_readline_init_file): New function.
+
+Thu Oct  8 13:47:55 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-procbuf.h (octave_procbuf::wstatus): New data member.
+	Initialize in constructors.
+	(octave_procbuf::wait_status): New member function.
+	* oct-procbuf.cc (octave_procbuf::sys_close): Use class data
+	member wstatus, not local variable.
+	* procstream.cc (procstreambase::close): Don't call sys_close directly.
+	Get subprocess exit status by calling wait_status for our procbuf.
+	* pt-plot.cc (close_plot_stream): Send "quit" command to gnuplot
+	before deleting plot_stream.
+
+
+Thu Oct  1 22:39:44 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* data.cc (Fis_complex): New function.
+
 Fri Sep 25 11:50:44 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* load-save.cc (write_header): Rename from write_binary_header.
 	Also write header for Octave ASCII files.
 
 	* load-save.cc (Fsave): Implement -append option.
 
 	* defaults.cc (Frehash): New function.
diff --git a/src/DLD-FUNCTIONS/rand.cc b/src/DLD-FUNCTIONS/rand.cc
--- a/src/DLD-FUNCTIONS/rand.cc
+++ b/src/DLD-FUNCTIONS/rand.cc
@@ -46,29 +46,29 @@ Software Foundation, 59 Temple Place - S
 // Current distribution of random numbers.
 static int current_distribution = uniform_dist;
 
 // Has the seed been set yet?
 static int initialized = 0;
 
 extern "C"
 {
-  int *F77_FCN (dgennor, DGENNOR) (const double&, const double&,
-				   double&);
+  int F77_FCN (dgennor, DGENNOR) (const double&, const double&,
+				  double&);
 
-  int *F77_FCN (dgenunf, DGENUNF) (const double&, const double&,
-				   double&);
+  int F77_FCN (dgenunf, DGENUNF) (const double&, const double&,
+				  double&);
 
-  int *F77_FCN (setall, SETALL) (const int&, const int&);
+  int F77_FCN (setall, SETALL) (const int&, const int&);
 
-  int *F77_FCN (getsd, GETSD) (int&, int&);
+  int F77_FCN (getsd, GETSD) (int&, int&);
 
-  int *F77_FCN (setsd, SETSD) (const int&, const int&);
+  int F77_FCN (setsd, SETSD) (const int&, const int&);
 
-  int *F77_FCN (setcgn, SETCGN) (const int&);
+  int F77_FCN (setcgn, SETCGN) (const int&);
 }
 
 static double
 curr_rand_seed (void)
 {
   union d2i { double d; int i[2]; };
   union d2i u;
   F77_XFCN (getsd, GETSD, (u.i[0], u.i[1]));
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -40,16 +40,17 @@ Software Foundation, 59 Temple Place - S
 #ifdef HAVE_UNISTD_H
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 #include <unistd.h>
 #endif
 
 #include "cmd-edit.h"
+#include "file-ops.h"
 #include "str-vec.h"
 
 #include "defun.h"
 #include "dirfns.h"
 #include "error.h"
 #include "gripes.h"
 #include "help.h"
 #include "input.h"
@@ -787,16 +788,38 @@ not a bug.")
 	}
     }
   else
     print_usage ("completion_matches");
 
   return retval;
 }
 
+DEFUN (read_readline_init_file, args, ,
+  "read_readline_init_file (FILE)")
+{
+  octave_value_list retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 0)
+    command_editor::read_init_file ();
+  else if (nargin == 1)
+    {
+      string file = file_ops::tilde_expand (args(0).string_value ());
+
+      if (! error_state)
+	command_editor::read_init_file (file);
+    }
+  else
+    print_usage ("read_readline_init_file");
+
+  return retval;
+}
+
 static int
 ps1 (void)
 {
   int status = 0;
 
   Vps1 = builtin_string_variable ("PS1");
 
   return status;
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -141,16 +141,20 @@ public:
   bool defining_func;
 
   // TRUE means we're parsing the return list for a function.
   bool looking_at_return_list;
 
   // TRUE means we're parsing the parameter list for a function.
   bool looking_at_parameter_list;
 
+  // TRUE means we're parsing a matrix or the left hand side of
+  // multi-value assignment statement.
+  bool looking_at_matrix_or_assign_lhs;
+
   // GAG.  Stupid kludge so that [[1,2][3,4]] will work.
   bool do_comma_insert;
 
   // TRUE means we think we are looking at a set command.
   bool doing_set;
 
   // TRUE means we're looking at the range part of a plot command.
   bool in_plot_range;
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1797,24 +1797,26 @@ handle_identifier (const string& tok, in
     curr_sym_tab = tmp_local_sym_tab;
 
   // Kluge alert.
   //
   // If we are looking at a text style function, set up to gobble its
   // arguments.
   //
   // If the following token is `=', or if we are parsing a function
-  // return list or function parameter list, force the symbol to be
-  // inserted as a variable in the current symbol table.
+  // return list or function parameter list, or if we are looking at
+  // something like [ab,cd] = foo (), force the symbol to be inserted
+  // as a variable in the current symbol table.
 
   if (is_text_function_name (tok) && ! is_variable (tok))
     {
       if (next_tok_is_eq
 	  || lexer_flags.looking_at_return_list
-	  || lexer_flags.looking_at_parameter_list)
+	  || lexer_flags.looking_at_parameter_list
+	  || lexer_flags.looking_at_matrix_or_assign_lhs)
 	{
 	  force_local_variable (tok);
 	}
       else if (! next_tok_is_paren)
 	{
 	  if (tok == "gset")
 	    lexer_flags.doing_set = true;
 
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -54,16 +54,19 @@ Software Foundation, 59 Temple Place - S
 #include "pt-exp.h"
 #include "symtab.h"
 #include "sysdep.h"
 #include "unwind-prot.h"
 #include "utils.h"
 #include "variables.h"
 #include "version.h"
 
+// The number of decimal digits to use when writing ascii data.
+static bool Vcrash_dumps_octave_core;
+
 // The default output format.  May be one of "binary", "text", or
 // "mat-binary".
 static string Vdefault_save_format;
 
 // The number of decimal digits to use when writing ascii data.
 static int Vsave_precision;
 
 // Used when converting Inf to something that gnuplot can read.
@@ -2431,37 +2434,40 @@ save_vars (const string_vector& argv, in
 	    }
 	}
     }
 }
 
 void
 save_user_variables (void)
 {
-  // XXX FIXME XXX -- should choose better file name?
-
-  const char *fname = "octave-core";
-
-  message (0, "attempting to save variables to `%s'...", fname);
-
-  load_save_format format = get_default_save_format ();
-
-  unsigned mode = ios::out|ios::trunc;
-  if (format == LS_BINARY || format == LS_MAT_BINARY)
-    mode |= ios::bin;
-
-  ofstream file (fname, mode);
-
-  if (file)
+  if (Vcrash_dumps_octave_core)
     {
-      save_vars (string_vector (), 0, 0, file, false, format, false, true);
-      message (0, "save to `%s' complete", fname);
+      // XXX FIXME XXX -- should choose better file name?
+
+      const char *fname = "octave-core";
+
+      message (0, "attempting to save variables to `%s'...", fname);
+
+      load_save_format format = get_default_save_format ();
+
+      unsigned mode = ios::out|ios::trunc;
+      if (format == LS_BINARY || format == LS_MAT_BINARY)
+	mode |= ios::bin;
+
+      ofstream file (fname, mode);
+
+      if (file)
+	{
+	  save_vars (string_vector (), 0, 0, file, false, format, false, true);
+	  message (0, "save to `%s' complete", fname);
+	}
+      else
+	warning ("unable to open `%s' for writing...", fname);
     }
-  else
-    warning ("unable to open `%s' for writing...", fname);
 }
 
 DEFUN_TEXT (save, args, ,
   "save [-append] [-ascii] [-binary] [-float-binary] [-mat-binary] \n\
      [-save-builtins] file [pattern ...]\n\
 \n\
 save variables in a file")
 {
@@ -2636,16 +2642,24 @@ save_three_d (ostream& os, const octave_
       ::error ("for now, I can only save real matrices in 3D format");
       fail = true;
     }
 
   return (os && ! fail);
 }
 
 static int
+crash_dumps_octave_core (void)
+{
+  Vcrash_dumps_octave_core = check_preference ("crash_dumps_octave_core");
+  return 0;
+}
+
+
+static int
 default_save_format (void)
 {
   int status = 0;
 
   string s = builtin_string_variable ("default_save_format");
 
   if (s.empty ())
     {
@@ -2674,16 +2688,19 @@ save_precision (void)
     }
   gripe_invalid_value_specified ("save_precision");
   return -1;
 }
 
 void
 symbols_of_load_save (void)
 {
+  DEFVAR (crash_dumps_octave_core, 1.0, 0, crash_dumps_octave_core,
+    "write octave-core file if Octave crashes or is killed by a signal");
+
   DEFVAR (default_save_format, "ascii", 0, default_save_format,
     "default format for files created with save, may be one of\n\
 \"binary\", \"text\", or \"mat-binary\"");
 
   DEFVAR (save_precision, 15.0, 0, save_precision,
     "number of significant figures kept by the ASCII save command");
 }
 
diff --git a/src/oct-procbuf.cc b/src/oct-procbuf.cc
--- a/src/oct-procbuf.cc
+++ b/src/oct-procbuf.cc
@@ -142,18 +142,16 @@ octave_procbuf::open (const char *comman
 #endif
 }
 
 int
 octave_procbuf::sys_close (void)
 {
 #if defined (HAVE_SYS_WAIT_H)
 
-  int wstatus;
-
   pid_t wait_pid;
 
   int status = -1;
 
   for (octave_procbuf **ptr = &octave_procbuf_list;
        *ptr != 0;
        ptr = &(*ptr)->next)
     {
diff --git a/src/oct-procbuf.h b/src/oct-procbuf.h
--- a/src/oct-procbuf.h
+++ b/src/oct-procbuf.h
@@ -33,34 +33,39 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 class
 octave_procbuf : public filebuf
 {
 public:
 
   octave_procbuf (void)
-    : filebuf (), proc_pid (-1), next (0) { }
+    : filebuf (), wstatus (-1), proc_pid (-1), next (0) { }
 
   octave_procbuf (const char *command, int mode)
-    : filebuf (), proc_pid (-1), next (0) { open (command, mode); }
+    : filebuf (), wstatus (-1), proc_pid (-1), next (0)
+  { open (command, mode); }
 
   ~octave_procbuf (void) { close (); }
 
   octave_procbuf *open (const char *command, int mode);
 
   octave_procbuf *close (void)
     { return static_cast<octave_procbuf *> (filebuf::close ()); }
 
   virtual int sys_close (void);
 
+  int wait_status (void) const { return wstatus; }
+
   pid_t pid (void) { return proc_pid; }
 
 protected:
 
+  int wstatus;
+
   pid_t proc_pid;
 
   octave_procbuf *next;
 };
 
 extern void symbols_of_oct_procbuf (void);
 
 #endif
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -319,16 +319,17 @@ initialize_error_handlers ()
 // What happens on --traditional.
 
 static void
 maximum_braindamage (void)
 {
   bind_builtin_variable ("PS1", ">> ");
   bind_builtin_variable ("PS2", "");
   bind_builtin_variable ("beep_on_error", 1.0);
+  bind_builtin_variable ("crash_dumps_octave_core", 0.0);
   bind_builtin_variable ("default_eval_print_flag", 0.0);
   bind_builtin_variable ("default_global_variable_value", Matrix ());
   bind_builtin_variable ("default_save_format", "mat-binary");
   bind_builtin_variable ("define_all_return_values", 1.0);
   bind_builtin_variable ("do_fortran_indexing", 1.0);
   bind_builtin_variable ("empty_list_elements_ok", 1.0);
   bind_builtin_variable ("fixed_point_format", 1.0);
   bind_builtin_variable ("implicit_num_to_str_ok", 1.0);
diff --git a/src/ov-ch-mat.h b/src/ov-ch-mat.h
--- a/src/ov-ch-mat.h
+++ b/src/ov-ch-mat.h
@@ -54,16 +54,19 @@ octave_char_matrix : public octave_base_
 public:
 
   octave_char_matrix (void)
     : octave_base_value () { }
 
   octave_char_matrix (const charMatrix& chm, bool = false)
     : octave_base_value (), matrix (chm) { }
 
+  octave_char_matrix (char c)
+    : octave_base_value (), matrix (c) { }
+
   octave_char_matrix (const char *s)
     : octave_base_value (), matrix (s) { }
 
   octave_char_matrix (const string& s)
     : octave_base_value (), matrix (s) { }
 
   octave_char_matrix (const string_vector& s)
     : octave_base_value (), matrix (s) { }
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -54,16 +54,19 @@ octave_char_matrix_str : public octave_c
 public:
 
   octave_char_matrix_str (void)
     : octave_char_matrix () { }
 
   octave_char_matrix_str (const charMatrix& chm)
     : octave_char_matrix (chm) { }
 
+  octave_char_matrix_str (char c)
+    : octave_char_matrix (c) { }
+
   octave_char_matrix_str (const char *s)
     : octave_char_matrix (s) { }
 
   octave_char_matrix_str (const string& s)
     : octave_char_matrix (s) { }
 
   octave_char_matrix_str (const string_vector& s)
     : octave_char_matrix (s) { }
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -360,16 +360,23 @@ octave_value::octave_value (bool b)
 
 octave_value::octave_value (const boolMatrix& bm)
   : rep (new octave_bool_matrix (bm))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
+octave_value::octave_value (char c)
+  : rep (new octave_char_matrix_str (c))
+{
+  rep->count = 1;
+  maybe_mutate ();
+}
+
 octave_value::octave_value (const char *s)
   : rep (new octave_char_matrix_str (s))
 {
   rep->count = 1;
   maybe_mutate ();
 }
 
 octave_value::octave_value (const string& s)
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -136,16 +136,17 @@ public:
   octave_value (const ColumnVector& v, int pcv = -1);
   octave_value (const Complex& C);
   octave_value (const ComplexMatrix& m);
   octave_value (const ComplexDiagMatrix& d);
   octave_value (const ComplexRowVector& v, int pcv = -1);
   octave_value (const ComplexColumnVector& v, int pcv = -1);
   octave_value (bool b);
   octave_value (const boolMatrix& bm);
+  octave_value (char c);
   octave_value (const char *s);
   octave_value (const string& s);
   octave_value (const string_vector& s);
   octave_value (const charMatrix& chm, bool is_string = false);
   octave_value (double base, double limit, double inc);
   octave_value (const Range& r);
   octave_value (const Octave_map& m);
   octave_value (octave_stream *s, int n);
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -517,22 +517,27 @@ identifier	: NAME
 constant	: NUM
 		  { $$ = make_constant (NUM, $1); }
 		| IMAG_NUM
 		  { $$ = make_constant (IMAG_NUM, $1); }
 		| TEXT
 		  { $$ = make_constant (TEXT, $1); }
 		;
 
+in_matrix_or_assign_lhs
+		: // empty
+		  { lexer_flags.looking_at_matrix_or_assign_lhs = true; }
+		;
+
 matrix		: '[' ']'
 		  { $$ = new tree_constant (octave_value (Matrix ())); }
 		| '[' ';' ']'
 		  { $$ = new tree_constant (octave_value (Matrix ())); }
-		| '[' rows ']'
-		  { $$ = finish_matrix ($2); }
+		| '[' in_matrix_or_assign_lhs rows ']'
+		  { $$ = finish_matrix ($3); }
 		;
 
 rows		: rows1
 		  { $$ = $1; }
 		| rows1 ';'	// Ignore trailing semicolon.
 		  { $$ = $1; }
 		;
 
@@ -702,18 +707,21 @@ simple_expr	: colon_expr
 		  { $$ = make_boolean_op (EXPR_OR_OR, $1, $2, $3); }
 		;
 
 // Arrange for the lexer to return CLOSE_BRACE for `]' by looking ahead
 // one token for an assignment op.
 
 assign_lhs	: simple_expr
 		  { $$ = new tree_argument_list ($1); }
-		| '[' arg_list CLOSE_BRACE
-		  { $$ = $2; }
+		| '[' in_matrix_or_assign_lhs arg_list CLOSE_BRACE
+		  {
+		    $$ = $3;
+		    lexer_flags.looking_at_matrix_or_assign_lhs = false;
+		  }
 		;
 
 assign_expr	: assign_lhs '=' expression
 		  { $$ = make_assign_op ('=', $1, $2, $3); }
 		| assign_lhs ADD_EQ expression
 		  { $$ = make_assign_op (ADD_EQ, $1, $2, $3); }
 		| assign_lhs SUB_EQ expression
 		  { $$ = make_assign_op (SUB_EQ, $1, $2, $3); }
@@ -1021,17 +1029,17 @@ param_list1	: param_list_beg identifier
 		    ABORT_PARSE;
 		  }
 		;
 
 // ===================================
 // List of function return value names
 // ===================================
 
-return_list_beg	: '[' local_symtab in_return_list
+return_list_beg	: '[' in_return_list local_symtab
 		;
 
 return_list	: return_list_beg return_list_end
 		  {
 		    lexer_flags.looking_at_return_list = false;
 		    $$ = new tree_parameter_list ();
 		  }
 		| return_list_beg ELLIPSIS return_list_end
diff --git a/src/procstream.cc b/src/procstream.cc
--- a/src/procstream.cc
+++ b/src/procstream.cc
@@ -49,20 +49,20 @@ procstreambase::open (const char *comman
 
 int
 procstreambase::close (void)
 {
   int status = 0;
 
   if (is_open ())
     {
-      status = pb.sys_close ();
-
       if (! pb.close ())
 	set (ios::failbit);
+
+      status = pb.wait_status ();
     }
 
   return status;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/src/procstream.h b/src/procstream.h
--- a/src/procstream.h
+++ b/src/procstream.h
@@ -73,19 +73,17 @@ public:
   iprocstream (void) : procstreambase () { }
 
   iprocstream (const char *name, int mode=ios::in)
     : procstreambase(name, mode) { }
 
   ~iprocstream (void) { }
 
   void open (const char *name, int mode=ios::in)
-    {
-      procstreambase::open (name, mode);
-    }
+    { procstreambase::open (name, mode); }
 
 private:
 
   iprocstream (const iprocstream&);
 
   iprocstream& operator = (const iprocstream&);
 };
 
@@ -97,19 +95,17 @@ public:
   oprocstream (void) : procstreambase () { }
 
   oprocstream (const char *name, int mode=ios::out)
     : procstreambase(name, mode) { }
 
   ~oprocstream (void) { }
 
   void open (const char *name, int mode=ios::out)
-    {
-      procstreambase::open(name, mode);
-    }
+    { procstreambase::open(name, mode); }
 
 private:
 
   oprocstream (const oprocstream&);
 
   oprocstream& operator = (const oprocstream&);
 };
 
@@ -118,23 +114,20 @@ procstream : public procstreambase, publ
 {
 public:
 
   procstream (void) : procstreambase () { }
 
   procstream (const char *name, int mode)
     : procstreambase(name, mode) { }
 
-
   ~procstream (void) { }
 
   void open (const char *name, int mode)
-    {
-      procstreambase::open(name, mode);
-    }
+    { procstreambase::open(name, mode); }
 
 private:
 
   procstream (const procstream&);
 
   procstream& operator = (const procstream&);
 };
 
diff --git a/src/pt-loop.cc b/src/pt-loop.cc
--- a/src/pt-loop.cc
+++ b/src/pt-loop.cc
@@ -212,39 +212,65 @@ tree_simple_for_command::eval (void)
   else if (rhs.is_scalar_type ())
     {
       bool quit = false;
 
       do_for_loop_once (ult, rhs, quit);
     }
   else if (rhs.is_matrix_type ())
     {
+      charMatrix chm_tmp;
       Matrix m_tmp;
       ComplexMatrix cm_tmp;
 
       int nr;
       int steps;
 
-      if (rhs.is_real_matrix ())
+      if (rhs.is_string ())
+	{
+	  chm_tmp = rhs.char_matrix_value ();
+	  nr = chm_tmp.rows ();
+	  steps = chm_tmp.columns ();
+	}
+      else if (rhs.is_real_matrix ())
 	{
 	  m_tmp = rhs.matrix_value ();
 	  nr = m_tmp.rows ();
 	  steps = m_tmp.columns ();
 	}
       else
 	{
 	  cm_tmp = rhs.complex_matrix_value ();
 	  nr = cm_tmp.rows ();
 	  steps = cm_tmp.columns ();
 	}
 
       if (error_state)
 	return;
 
-      if (rhs.is_real_matrix ())
+      if (rhs.is_string ())
+	{
+	  if (nr == 1)
+	    DO_LOOP (chm_tmp (0, i));
+	  else
+	    {
+	      for (int i = 0; i < steps; i++)
+		{
+		  octave_value val (chm_tmp.extract (0, i, nr-1, i), true);
+
+		  bool quit = false;
+
+		  do_for_loop_once (ult, val, quit);
+
+		  if (quit)
+		    break;
+		}
+	    }
+	}
+      else if (rhs.is_real_matrix ())
 	{
 	  if (nr == 1)
 	    DO_LOOP (m_tmp (0, i));
 	  else
 	    DO_LOOP (m_tmp.extract (0, i, nr-1, i));
 	}
       else
 	{
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -910,16 +910,17 @@ cleanup_tmp_files (void)
 
 void
 close_plot_stream (void)
 {
   octave_child_list::remove (plot_stream_pid);
 
   if (plot_stream)
     {
+      send_to_plot_stream ("\nquit\n");
       delete plot_stream;
       plot_stream = 0;
     }
 
   plot_line_count = 0;
 }
 
 void
