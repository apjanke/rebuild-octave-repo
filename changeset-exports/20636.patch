# HG changeset patch
# User Rik <rik@octave.org>
# Date 1445268143 25200
#      Mon Oct 19 08:22:23 2015 -0700
# Node ID 6e81f4b37e1399ac70c2b4faaf3759f058f3ddbf
# Parent  80e630b37ba1db5f7a3bf533d291da75079d7938
Performance improvements for ODE functions.

* odeget.m: Place code for "fast" extraction of values at start of code before
any other input validation.

* odeset.m: Combine special input processing for nargin == 0 into one block
of code.

* integrate_adaptive.m, integrate_const.m: Use in-place operator "+= 1" rather
than "++" because it is faster.

diff --git a/scripts/ode/odeget.m b/scripts/ode/odeget.m
--- a/scripts/ode/odeget.m
+++ b/scripts/ode/odeget.m
@@ -32,17 +32,30 @@
 ## If called called with an optional third input argument, and @var{field} is
 ## not set in the structure @var{ode_opt}, then return the default value
 ## @var{default} instead.
 ## @seealso{odeset}
 ## @end deftypefn
 
 ## FIXME: 4th input argument "opt" is undocumented.
 
-function val = odeget (ode_opt, field, default = [], opt)
+function val = odeget (ode_opt, field, default = [], opt = "")
+
+  ## Shortcut for quickly extracting option
+  if (strncmp (opt, "fast", 4))
+    try
+      val = ode_opt.(field);
+      if (strcmp (opt, "fast_not_empty") && isempty (val))
+        val = default;
+      endif
+    catch
+      val = default;
+    end_try_catch
+    return;
+  endif
 
   if (nargin < 1 || nargin > 4)
     print_usage ();
   endif
 
   ## Shortcut for empty option structures
   if (isempty (ode_opt))
     if (nargin < 3)
@@ -54,37 +67,16 @@ function val = odeget (ode_opt, field, d
   endif
 
   if (! isstruct (ode_opt))
     error ("odeget: ODE_OPT must be a valid ODE_STRUCT");
   elseif (! ischar (field))
     error ("odeget: FIELD must be a string");
   endif
 
-  if (nargin == 4 && strcmpi (opt, "fast"))
-    try
-      val = ode_opt.(field);
-    catch
-      val = default;
-    end_try_catch
-    return;
-  endif
-
-  if (nargin == 4 && strcmpi (opt, "fast_not_empty"))
-    try
-      val = ode_opt.(field);
-      if (isempty (val))
-        val = default;
-      endif
-    catch
-      val = default;
-    end_try_catch
-    return;
-  endif
-
   ## Check if the given struct is a valid ODEOPT struct
   ode_struct_value_check ("odeget", ode_opt);
 
   ## Define all the possible ODEOPT fields
   persistent options = {"AbsTol"; "BDF"; "Events"; "InitialSlope";
                         "InitialStep"; "Jacobian"; "JConstant"; "JPattern";
                         "Mass"; "MassConstant"; "MassSingular"; "MaxOrder";
                         "MaxStep"; "MStateDependence"; "MvPattern";
diff --git a/scripts/ode/odeset.m b/scripts/ode/odeset.m
--- a/scripts/ode/odeset.m
+++ b/scripts/ode/odeset.m
@@ -42,37 +42,37 @@
 ## @var{newstruct} overwrite all values from the structure @var{oldstruct} with
 ## new values from the structure @var{newstruct}.  Empty values in
 ## @var{newstruct} will not overwrite values in @var{oldstruct}.
 ## @seealso{odeget}
 ## @end deftypefn
 
 function odestruct = odeset (varargin)
 
-  ## Special calling syntax to display defaults
-  if (nargin == 0 && nargout == 0)
-    print_options ();
-    return;
-  endif
-
   ## Column vector of all possible ODE options
   persistent options = {"AbsTol"; "BDF"; "Events"; "InitialSlope";
                         "InitialStep"; "Jacobian"; "JConstant"; "JPattern";
                         "Mass"; "MassConstant"; "MassSingular"; "MaxOrder";
                         "MaxStep"; "MStateDependence"; "MvPattern";
                         "NonNegative"; "NormControl"; "OutputFcn"; "OutputSel";
                         "Refine"; "RelTol"; "Stats"; "Vectorized"};
 
+  if (nargin == 0)
+    ## Special calling syntax to display defaults
+    if (nargout == 0)
+      print_options ();
+    else
+      odestruct = cell2struct (cell (numel (options), 1), options);
+    endif
+    return;
+  endif
+
   ## initialize output
   odestruct = cell2struct (cell (numel (options), 1), options);
 
-  if (nargin == 0)
-    return;
-  endif
-
   if (isstruct (varargin{1}))
     oldstruct = varargin{1};
 
     ## Copy oldstruct values into output odestruct
     for [val, name] = oldstruct
 
       exactmatch = true;
       match = find (strcmpi (name, options));
diff --git a/scripts/ode/private/integrate_adaptive.m b/scripts/ode/private/integrate_adaptive.m
--- a/scripts/ode/private/integrate_adaptive.m
+++ b/scripts/ode/private/integrate_adaptive.m
@@ -117,48 +117,48 @@ function solution = integrate_adaptive (
   iout = istep = 1;
   while (dir * t_old < dir * tspan(end))
 
     ## Compute integration step from t_old to t_new = t_old + dt
     [t_new, options.comp] = kahan (t_old, options.comp, dt);
     [t_new, x_new, x_est, new_k_vals] = ...
       stepper (func, t_old, x_old, dt, options, k_vals, t_new);
 
-    solution.cntcycles++;
+    solution.cntcycles += 1;
 
     if (options.havenonnegative)
       x_new(nn, end) = abs (x_new(nn, end));
       x_est(nn, end) = abs (x_est(nn, end));
     endif
 
     err = AbsRel_Norm (x_new, x_old, options.AbsTol, options.RelTol,
                        options.normcontrol, x_est);
 
     ## Accept solution only if err <= 1.0
     if (err <= 1)
 
-      solution.cntloop++;
-      ireject = 0;
+      solution.cntloop += 1;
+      ireject = 0;              # Clear reject counter
 
       ## if output time steps are fixed
       if (fixed_times)
 
         t_caught = find ((dir * tspan(iout:end) > dir * t_old)
                          & (dir * tspan(iout:end) <= dir * t_new));
         t_caught = t_caught + iout - 1;
 
         if (! isempty (t_caught))
           t(t_caught) = tspan(t_caught);
           iout = max (t_caught);
           x(:, t_caught) = ...
             runge_kutta_interpolate (order, [t_old t_new], [x_old x_new],
-                                tspan(t_caught), new_k_vals, dt,
-                                options.funarguments{:});
+                                     tspan(t_caught), new_k_vals, dt,
+                                     options.funarguments{:});
 
-          istep++;
+          istep += 1;
 
           ## Call Events function only if a valid result has been found.
           ## Stop integration if eventbreak is true.
           if (options.haveeventfunction)
             break_loop = false;
             for idenseout = 1:numel (t_caught)
               id = t_caught(idenseout);
               td = t(id);
@@ -251,17 +251,17 @@ function solution = integrate_adaptive (
       t_old = t_new;
       x_old = x_new;
       k_vals = new_k_vals;
 
       solution.cntloop += 1;
 
     else
 
-      ireject++;
+      ireject += 1;
 
       ## Stop solving because, in the last 5,000 steps, no successful valid
       ## value has been found
       if (ireject >= 5_000)
         error (["integrate_adaptive: Solving was not successful. ", ...
                 " The iterative integration loop exited at time", ...
                 " t = %f before the endpoint at tend = %f was reached. ", ...
                 " This happened because the iterative integration loop", ...
diff --git a/scripts/ode/private/integrate_const.m b/scripts/ode/private/integrate_const.m
--- a/scripts/ode/private/integrate_const.m
+++ b/scripts/ode/private/integrate_const.m
@@ -130,50 +130,50 @@ function solution = integrate_const (ste
     ## values on this interval for time and solution
     z = [t(end);s];
     u = [x(:,end),y];
 
     ## if next tspan value is caught, update counter
     if ((z(end) == tspan(counter))
         || (abs (z(end) - tspan(counter)) /
             (max (abs (z(end)), abs (tspan(counter)))) < 8*eps) )
-      counter++;
+      counter += 1;
 
     ## if there is an element in time vector at which the solution is required
     ## the program must compute this solution before going on with next steps
     elseif (direction * z(end) > direction * tspan(counter) )
       ## initializing counter for the following cycle
       i = 2;
       while (i <= length (z))
 
         ## if next tspan value is caught, update counter
         if ((counter <= k)
             && (((z(i) == tspan(counter))
                  || (abs (z(i) - tspan(counter)) /
                      (max (abs (z(i)), abs (tspan(counter)))) < 8*eps))) )
-          counter++;
+          counter += 1;
         endif
         ## else, loop until there are requested values inside this subinterval
         while ((counter <= k)
                && direction * z(i) > direction * tspan(counter) )
           ## add the interpolated value of the solution
           u = [u(:,1:i-1),u(:,i-1) + (tspan(counter)-z(i-1))/(z(i)-z(i-1))* ...
               (u(:,i)-u(:,i-1)),u(:,i:end)];
           ## add the time requested
           z = [z(1:i-1);tspan(counter);z(i:end)];
 
           ## update counters
-          counter++;
-          i++;
+          counter += 1;
+          i += 1;
         endwhile
 
         ## if new time requested is not out of this interval
         if (counter <= k && direction * z(end) > direction * tspan(counter))
           ## update the counter
-          i++;
+          i += 1;
         else
           ## else, stop the cycle and go on with the next iteration
           i = length (z)+1;
         endif
 
       endwhile
     endif
 
