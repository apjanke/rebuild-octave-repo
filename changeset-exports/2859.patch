# HG changeset patch
# User jwe
# Date 859834957 0
#      Mon Mar 31 19:02:37 1997 +0000
# Node ID 00c0cd0f2ee7013fa78a961905cfaa04f35ce71e
# Parent  a8f735f0dd7166f1fa00fe497023ab5de23467ca
[project @ 1997-03-31 19:02:32 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,33 @@
 Mon Mar 31 00:37:48 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* pt-base-exp.h (tree_expression::eval): Give arg a default value.
+	* pt-const.h (tree_constant::eval): Likewise.
+	* pt-exp.h (tree_prefix_expression::eval, tree_colon_expression::eval,
+	tree_postfix_expression::eval, tree_unary_expression::eval,
+	tree_binary_expression::eval, tree_boolean_expression::eval,
+	tree_simple_assignment_expression::eval): Likewise.
+	* pt-fcn.h (tree_function::eval): Likewise.
+	* pt-fvc.h (tree_identifier::eval, tree_indirect_ref::eval,
+	tree_builtin::eval): Likewise.
+	* pt-mat.h (tree_matrix::eval): Likewise.
+	* pt-misc.h (tree_statement_list::eval): Likewise.
+	* pt-mvr-base.h (tree_multi_val_ret::eval): Likewise.
+	* pt-mvr.h (tree_oct_obj::eval, tree_index_expression::eval,
+	tree_multi_assignment_expression::eval): Likewise.
+	* dassl.cc, fsolve.cc, load-save.cc, lsode.cc, npsol.cc, parse.y,
+	pt-cmd.cc, pt-exp-base.cc, pt-exp.cc, pt-fvc.cc, pt-mat.cc,
+	pt-misc.cc, pt-mvr.cc, pt-plot.cc, quad.cc, toplev.cc, variables.cc:
+	Change callers of eval() to use bool instead of int and to make
+	use of default argument value.
+
+	* toplev.h, toplev.cc (parse_and_execute, eval_string): Flag args
+	are now bool instead of int.
+
 	* symtab.h, symtab.cc: Use bool instead of int in more places.
 	* variables.h, variables.cc: Likewise.
 	* lex.h, lex.l: Likewise.
 	* parse.y: Likewise.
 	* help.cc, input.cc, lex.l, load-save.cc, parse.y, pt-fcn.cc:
 	Change callers of symbol_table::lookup to use bool instead of int,
 	and to make use of default arguments.
 
diff --git a/src/dassl.cc b/src/dassl.cc
--- a/src/dassl.cc
+++ b/src/dassl.cc
@@ -78,17 +78,17 @@ dassl_user_function (const ColumnVector&
       octave_value state (d1);
       octave_value deriv (d2);
       args(1) = deriv;
       args(0) = state;
     }
 
   if (dassl_fcn)
     {
-      octave_value_list tmp = dassl_fcn->eval (0, 1, args);
+      octave_value_list tmp = dassl_fcn->eval (false, 1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("dassl");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
diff --git a/src/fsolve.cc b/src/fsolve.cc
--- a/src/fsolve.cc
+++ b/src/fsolve.cc
@@ -101,17 +101,17 @@ fsolve_user_function (const ColumnVector
     {
       double d = x (0);
       octave_value vars (d);
       args(0) = vars;
     }
 
   if (fsolve_fcn)
     {
-      octave_value_list tmp = fsolve_fcn->eval (0, 1, args);
+      octave_value_list tmp = fsolve_fcn->eval (false, 1, args);
       if (tmp.length () > 0 && tmp(0).is_defined ())
 	{
 	  retval = tmp(0).vector_value ();
 
 	  if (error_state || retval.length () <= 0)
 	    gripe_user_supplied_eval ("fsolve");
 	}
       else
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -2221,17 +2221,17 @@ do_save (ostream& os, symbol_record *sr,
       error ("save: can only save variables, not functions");
       return;
     }
 
   string name = sr->name ();
   string help = sr->help ();
   int global = sr->is_linked_to_global ();
   tree_fvc *tmp = sr->def ();
-  octave_value tc = tmp->eval (0);
+  octave_value tc = tmp->eval ();
 
   if (tc.is_undefined ())
     return;
 
   switch (fmt)
     {
     case LS_ASCII:
       save_ascii_data (os, tc, name, false, global);
diff --git a/src/lsode.cc b/src/lsode.cc
--- a/src/lsode.cc
+++ b/src/lsode.cc
@@ -61,17 +61,17 @@ lsode_user_function (const ColumnVector&
   Matrix m (nstates, 1);
   for (int i = 0; i < nstates; i++)
     m (i, 0) = x (i);
   octave_value state (m);
   args(0) = state;
 
   if (lsode_fcn)
     {
-      octave_value_list tmp = lsode_fcn->eval (0, 1, args);
+      octave_value_list tmp = lsode_fcn->eval (false, 1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("lsode");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
@@ -101,17 +101,17 @@ lsode_user_jacobian (const ColumnVector&
   Matrix m (nstates, 1);
   for (int i = 0; i < nstates; i++)
     m (i, 0) = x (i);
   octave_value state (m);
   args(0) = state;
 
   if (lsode_jac)
     {
-      octave_value_list tmp = lsode_jac->eval (0, 1, args);
+      octave_value_list tmp = lsode_jac->eval (false, 1, args);
 
       if (error_state)
 	{
 	  gripe_user_supplied_eval ("lsode");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
diff --git a/src/npsol.cc b/src/npsol.cc
--- a/src/npsol.cc
+++ b/src/npsol.cc
@@ -72,17 +72,17 @@ npsol_objective_function (const ColumnVe
   args(0) = decision_vars;
 
   static double retval;
   retval = 0.0;
 
   octave_value objective_value;
   if (npsol_objective)
     {
-      octave_value_list tmp = npsol_objective->eval (0, 1, args);
+      octave_value_list tmp = npsol_objective->eval (false, 1, args);
 
       if (error_state)
 	{
 	  error ("npsol: error evaluating objective function");
 	  npsol_objective_error = 1; // XXX FIXME XXX
 	  return retval;
 	}
 
@@ -141,17 +141,17 @@ npsol_constraint_function (const ColumnV
       decision_vars = d;
     }
 
   octave_value_list args;
   args(0) = decision_vars;
 
   if (npsol_constraints)
     {
-      octave_value_list tmp = npsol_constraints->eval (0, 1, args);
+      octave_value_list tmp = npsol_constraints->eval (false, 1, args);
 
       if (error_state)
 	{
 	  error ("npsol: error evaluating constraints");
 	  return retval;
 	}
 
       if (tmp.length () > 0 && tmp(0).is_defined ())
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1452,17 +1452,17 @@ fold (tree_binary_expression *e)
 {
   tree_expression *retval = 0;
 
   tree_expression *op1 = e->lhs ();
   tree_expression *op2 = e->rhs ();
 
   if (op1->is_constant () && op2->is_constant ())
     {
-      octave_value tmp = e->eval (0);
+      octave_value tmp = e->eval ();
 
       if (! error_state)
 	{
 	  tree_constant *tc_retval = new tree_constant (tmp);
 
 	  ostrstream buf;
 
 	  tree_print_code tpc (buf);
@@ -1494,17 +1494,17 @@ static tree_expression *
 fold (tree_unary_expression *e)
 {
   tree_expression *retval = 0;
 
   tree_expression *op1 = e->operand ();
 
   if (op1->is_constant ())
     {
-      octave_value tmp = e->eval (0);
+      octave_value tmp = e->eval ();
 
       if (! error_state)
 	{
 	  tree_constant *tc_retval = new tree_constant (tmp);
 
 	  ostrstream buf;
 
 	  tree_print_code tpc (buf);
@@ -1541,17 +1541,17 @@ finish_colon_expression (tree_colon_expr
 
   tree_expression *base = e->base ();
   tree_expression *limit = e->limit ();
   tree_expression *incr = e->increment ();
 
   if (base->is_constant () && limit->is_constant ()
       && (! incr || (incr && incr->is_constant ())))
     {
-      octave_value tmp = e->eval (0);
+      octave_value tmp = e->eval ();
 
       if (! error_state)
 	{
 	  tree_constant *tc_retval = new tree_constant (tmp);
 
 	  ostrstream buf;
 
 	  tree_print_code tpc (buf);
@@ -2306,17 +2306,17 @@ static tree_expression *
 finish_matrix (tree_matrix *m)
 {
   tree_expression *retval = 0;
 
   lexer_flags.maybe_screwed_again--;
 
   if (m->all_elements_are_constant ())
     {
-      octave_value tmp = m->eval (0);
+      octave_value tmp = m->eval ();
 
       if (! error_state)
 	{
 	  tree_constant *tc_retval = new tree_constant (tmp);
 
 	  ostrstream buf;
 
 	  tree_print_code tpc (buf);
diff --git a/src/pt-cmd.cc b/src/pt-cmd.cc
--- a/src/pt-cmd.cc
+++ b/src/pt-cmd.cc
@@ -100,17 +100,17 @@ do_global_init (tree_decl_elt& elt, bool
       if (expr)
 	{
 	  if (expr->left_hand_side_is_identifier_only ()
 	      && (id = expr->left_hand_side_id ()))
 	    {
 	      id->link_to_global ();
 
 	      if (! (skip_initializer || error_state))
-		expr->eval (false);
+		expr->eval ();
 	    }
 	  else
 	    error ("global: unable to make structure elements global");
 	}
     }
 }
 
 void
@@ -144,17 +144,17 @@ do_static_init (tree_decl_elt& elt, bool
       if (expr)
 	{
 	  if (expr->left_hand_side_is_identifier_only ()
 	      && (id = expr->left_hand_side_id ()))
 	    {
 	      id->mark_as_static ();
 
 	      if (! error_state)
-		expr->eval (false);
+		expr->eval ();
 	    }
 	  else
 	    error ("global: unable to make structure elements global");
 	}
     }
 }
 
 void
@@ -192,17 +192,17 @@ tree_while_command::eval (void)
     panic_impossible ();
 
   for (;;)
     {
       if (expr->is_logically_true ("while"))
 	{
 	  if (list)
 	    {
-	      list->eval (1);
+	      list->eval (true);
 	      if (error_state)
 		{
 		  eval_error ();
 		  return;
 		}
 	    }
 
 	  if (quit_loop_now ())
@@ -240,27 +240,27 @@ tree_for_command::~tree_for_command (voi
 inline void
 tree_for_command::do_for_loop_once (tree_return_list *lst,
 				    const octave_value_list& rhs, bool& quit)
 {
   quit = false;
 
   tree_oct_obj *tmp = new tree_oct_obj (rhs);
   tree_multi_assignment_expression tmp_ass (lst, tmp, 1);
-  tmp_ass.eval (false);
+  tmp_ass.eval ();
 
   if (error_state)
     {
       eval_error ();
       return;
     }
 
   if (list)
     {
-      list->eval (1);
+      list->eval (true);
       if (error_state)
 	{
 	  eval_error ();
 	  quit = true;
 	  return;
 	}
     }
 
@@ -270,27 +270,27 @@ tree_for_command::do_for_loop_once (tree
 inline void
 tree_for_command::do_for_loop_once (tree_index_expression *idx_expr,
 				    const octave_value& rhs, bool& quit)
 {
   quit = false;
 
   octave_value *tmp = new octave_value (rhs);
   tree_simple_assignment_expression tmp_ass (idx_expr, tmp, true);
-  tmp_ass.eval (false);
+  tmp_ass.eval ();
 
   if (error_state)
     {
       eval_error ();
       return;
     }
 
   if (list)
     {
-      list->eval (1);
+      list->eval (true);
       if (error_state)
 	{
 	  eval_error ();
 	  quit = true;
 	  return;
 	}
     }
 
@@ -310,17 +310,17 @@ tree_for_command::do_for_loop_once (tree
       eval_error ();
       return;
     }
 
   tmp.assign (rhs);
 
   if (list)
     {
-      list->eval (1);
+      list->eval (true);
       if (error_state)
 	{
 	  eval_error ();
 	  quit = true;
 	  return;
 	}
     }
 
@@ -361,17 +361,17 @@ tree_for_command::do_for_loop_once (tree
   while (0)
 
 void
 tree_for_command::eval (void)
 {
   if (error_state || ! expr)
     return;
 
-  octave_value tmp_expr = expr->eval (false);
+  octave_value tmp_expr = expr->eval ();
 
   if (error_state || tmp_expr.is_undefined ())
     {
       eval_error ();
       return;
     }
 
   tree_index_expression *tmp_id = id;
@@ -604,17 +604,17 @@ tree_switch_command::~tree_switch_comman
   delete list;
 }
 
 void
 tree_switch_command::eval (void)
 {
   if (expr)
     {
-      octave_value val = expr->eval (0);
+      octave_value val = expr->eval ();
 
       if (! error_state)
 	{
 	  if (list)
 	    list->eval (val);
 
 	  if (error_state)
 	    eval_error ();
diff --git a/src/pt-const.h b/src/pt-const.h
--- a/src/pt-const.h
+++ b/src/pt-const.h
@@ -327,17 +327,17 @@ public:
   void print (void);
   void print (ostream& os, bool pr_as_read_syntax = false,
 	      bool pr_orig_txt = true);
 
   void print_with_name (const string& name, bool print_padding = true);
   void print_with_name (ostream& os, const string& name,
 			bool print_padding = true);
 
-  octave_value eval (bool print_result);
+  octave_value eval (bool print = false);
 
   octave_value_list eval (bool, int, const octave_value_list&);
 
   // Store the original text corresponding to this constant for later
   // pretty printing.
 
   void stash_original_text (const string& s);
 
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -40,17 +40,17 @@ Software Foundation, 59 Temple Place - S
 
 // Expressions.
 
 bool
 tree_expression::is_logically_true (const char *warn_for)
 {
   bool expr_value = false;
 
-  octave_value t1 = eval (false);
+  octave_value t1 = eval ();
 
   if (! error_state)
     {
       if (t1.is_defined ())
 	return t1.is_true ();
       else
 	::error ("%s: undefined value used in conditional expression",
 		 warn_for);
diff --git a/src/pt-exp.cc b/src/pt-exp.cc
--- a/src/pt-exp.cc
+++ b/src/pt-exp.cc
@@ -223,17 +223,17 @@ tree_unary_expression::eval (bool /* pri
 {
   octave_value retval;
 
   if (error_state)
     return retval;
 
   if (op)
     {
-      octave_value u = op->eval (false);
+      octave_value u = op->eval ();
 
       if (error_state)
 	eval_error ();
       else if (u.is_defined ())
 	{
 	  switch (etype)
 	    {
 	    case unot:
@@ -318,23 +318,23 @@ tree_binary_expression::eval (bool /* pr
 {
   octave_value retval;
 
   if (error_state)
     return retval;
 
   if (op_lhs)
     {
-      octave_value a = op_lhs->eval (false);
+      octave_value a = op_lhs->eval ();
 
       if (error_state)
 	eval_error ();
       else if (a.is_defined () && op_rhs)
 	{
-	  octave_value b = op_rhs->eval (false);
+	  octave_value b = op_rhs->eval ();
 
 	  if (error_state)
 	    eval_error ();
 	  else if (b.is_defined ())
 	    {
 	      octave_value::binary_op op = octave_value::unknown_binary_op;
 
 	      switch (etype)
@@ -544,17 +544,17 @@ tree_boolean_expression::eval (bool /* p
 
   if (error_state)
     return retval;
 
   bool result = false;
 
   if (op_lhs)
     {
-      octave_value a = op_lhs->eval (false);
+      octave_value a = op_lhs->eval ();
 
       if (error_state)
 	eval_error ();
       else
 	{
 	  bool a_true = a.is_true ();
 
 	  if (error_state)
@@ -572,17 +572,17 @@ tree_boolean_expression::eval (bool /* p
 	      else
 		{
 		  if (etype == bool_and)
 		    goto done;
 		}
 
 	      if (op_rhs)
 		{
-		  octave_value b = op_rhs->eval (false);
+		  octave_value b = op_rhs->eval ();
 
 		  if (error_state)
 		    eval_error ();
 		  else
 		    {
 		      result = b.is_true ();
 
 		      if (error_state)
@@ -687,17 +687,17 @@ tree_simple_assignment_expression::eval 
 
   octave_value lhs_val;
 
   if (error_state)
     return retval;
 
   if (rhs)
     {
-      octave_value rhs_val = rhs->eval (false);
+      octave_value rhs_val = rhs->eval ();
 
       if (error_state)
 	{
 	  eval_error ();
 	}
       else if (rhs_val.is_undefined ())
 	{
 	  error ("value on right hand side of assignment is undefined");
@@ -808,34 +808,34 @@ tree_colon_expression::chain (tree_expre
 octave_value
 tree_colon_expression::eval (bool /* print */)
 {
   octave_value retval;
 
   if (error_state || ! op_base || ! op_limit)
     return retval;
 
-  octave_value tmp = op_base->eval (false);
+  octave_value tmp = op_base->eval ();
 
   if (tmp.is_undefined ())
     {
       eval_error ("invalid null value in colon expression");
       return retval;
     }
 
   double base = tmp.double_value ();
 
   if (error_state)
     {
       error ("colon expression elements must be scalars");
       eval_error ("evaluating colon expression");
       return retval;
     }
 
-  tmp = op_limit->eval (false);
+  tmp = op_limit->eval ();
 
   if (tmp.is_undefined ())
     {
       eval_error ("invalid null value in colon expression");
       return retval;
     }
 
   double limit = tmp.double_value ();
@@ -846,17 +846,17 @@ tree_colon_expression::eval (bool /* pri
       eval_error ("evaluating colon expression");
       return retval;
     }
 
   double inc = 1.0;
 
   if (op_increment)
     {
-      tmp = op_increment->eval (false);
+      tmp = op_increment->eval ();
 
       if (tmp.is_undefined ())
 	{
 	  eval_error ("invalid null value in colon expression");
 	  return retval;
 	}
 
       inc = tmp.double_value ();
diff --git a/src/pt-exp.h b/src/pt-exp.h
--- a/src/pt-exp.h
+++ b/src/pt-exp.h
@@ -56,17 +56,17 @@ public:
     : tree_expression (l, c), id (0), etype (t) { }
 
   tree_prefix_expression (tree_identifier *i, int l = -1, int c = -1,
 			  type t = unknown)
     : tree_expression (l, c), id (i), etype (t) { }
 
   ~tree_prefix_expression (void);
 
-  octave_value eval (bool print);
+  octave_value eval (bool print = false);
 
   void eval_error (void);
 
   bool is_prefix_expression (void) const
     { return true; }
 
   const char *oper (void) const;
 
@@ -101,17 +101,17 @@ public:
     : tree_expression (l, c), id (0), etype (t) { }
 
   tree_postfix_expression (tree_identifier *i, int l = -1, int c = -1,
 			   type t = unknown)
     : tree_expression (l, c), id (i), etype (t) { }
 
   ~tree_postfix_expression (void);
 
-  octave_value eval (bool print);
+  octave_value eval (bool print = false);
 
   void eval_error (void);
 
   const char *oper (void) const;
 
   tree_identifier *ident (void) { return id; }
 
   void accept (tree_walker& tw);
@@ -146,17 +146,17 @@ public:
 
   tree_unary_expression (tree_expression *a, int l = -1, int c = -1,
 			 type t = unknown)
     : tree_expression (l, c), op (a), etype (t) { }
 
   ~tree_unary_expression (void)
     { delete op; }
 
-  octave_value eval (bool print);
+  octave_value eval (bool print = false);
 
   void eval_error (void);
 
   const char *oper (void) const;
 
   bool is_prefix_op (void) { return (etype == unot || etype == uminus); }
 
   tree_expression *operand (void) { return op; }
@@ -210,17 +210,17 @@ public:
     : tree_expression (l, c), op_lhs (a), op_rhs (b), etype (t) { }
 
   ~tree_binary_expression (void)
     {
       delete op_lhs;
       delete op_rhs;
     }
 
-  octave_value eval (bool print);
+  octave_value eval (bool print = false);
 
   void eval_error (void);
 
   const char *oper (void) const;
 
   tree_expression *lhs (void) { return op_lhs; }
   tree_expression *rhs (void) { return op_rhs; }
 
@@ -256,17 +256,17 @@ public:
     : tree_binary_expression (l, c), etype (t) { }
 
   tree_boolean_expression (tree_expression *a, tree_expression *b,
 			   int l = -1, int c = -1, type t = unknown)
     : tree_binary_expression (a, b, l, c), etype (t) { }
 
   ~tree_boolean_expression (void) { }
 
-  octave_value eval (bool print);
+  octave_value eval (bool print = false);
 
   const char *oper (void) const;
 
 private:
 
   // The type of the expression.
   type etype;
 };
@@ -312,17 +312,17 @@ public:
 
   bool left_hand_side_is_identifier_only (void);
 
   tree_identifier *left_hand_side_id (void);
 
   bool is_ans_assign (void)
     { return ans_ass; }
 
-  octave_value eval (bool print);
+  octave_value eval (bool print = false);
 
   bool is_assignment_expression (void) const
     { return true; }
 
   void eval_error (void);
 
   tree_indirect_ref *left_hand_side (void) { return lhs; }
 
@@ -387,17 +387,17 @@ public:
     {
       delete op_base;
       delete op_limit;
       delete op_increment;
     }
 
   tree_colon_expression *chain (tree_expression *t);
 
-  octave_value eval (bool print);
+  octave_value eval (bool print = false);
 
   void eval_error (const char *s);
 
   tree_expression *base (void) { return op_base; }
   tree_expression *limit (void) { return op_limit; }
   tree_expression *increment (void) { return op_increment; }
 
   void accept (tree_walker& tw);
diff --git a/src/pt-fcn.h b/src/pt-fcn.h
--- a/src/pt-fcn.h
+++ b/src/pt-fcn.h
@@ -101,17 +101,17 @@ public:
 
   void octave_vr_val (const octave_value& val);
 
   void stash_function_name (const string& s);
 
   string function_name (void)
     { return fcn_name; }
 
-  octave_value eval (bool print);
+  octave_value eval (bool print = false);
 
   octave_value_list eval (bool print, int nargout, const octave_value_list& args);
 
   void traceback_error (void);
 
   tree_parameter_list *parameter_list (void) { return param_list; }
 
   tree_parameter_list *return_list (void) { return ret_list; }
diff --git a/src/pt-fvc.cc b/src/pt-fvc.cc
--- a/src/pt-fvc.cc
+++ b/src/pt-fvc.cc
@@ -324,23 +324,24 @@ tree_identifier::eval (bool print)
     {
       if (object_to_eval)
 	{
 	  int nargout = maybe_do_ans_assign ? 0 : 1;
 
 	  if (nargout)
 	    {
 	      octave_value_list tmp_args;
-	      octave_value_list tmp = object_to_eval->eval (0, nargout, tmp_args);
+	      octave_value_list tmp
+		= object_to_eval->eval (false, nargout, tmp_args);
 
 	      if (tmp.length () > 0)
 		retval = tmp(0);
 	    }
 	  else
-	    retval = object_to_eval->eval (false);
+	    retval = object_to_eval->eval ();
 	}
       else
 	eval_undefined_error ();
     }
 
   if (! error_state)
     {
       if (retval.is_defined ())
@@ -376,17 +377,17 @@ tree_identifier::eval (bool print, int n
 	  if (maybe_do_ans_assign && nargout == 1)
 	    {
 
 	      // Don't count the output arguments that we create
 	      // automatically.
 
 	      nargout = 0;
 
-	      retval = object_to_eval->eval (0, nargout, args);
+	      retval = object_to_eval->eval (false, nargout, args);
 
 	      if (retval.length () > 0 && retval(0).is_defined ())
 		bind_ans (retval(0), print);
 	    }
 	  else
 	    retval = object_to_eval->eval (print, nargout, args);
 	}
       else
diff --git a/src/pt-fvc.h b/src/pt-fvc.h
--- a/src/pt-fvc.h
+++ b/src/pt-fvc.h
@@ -83,17 +83,17 @@ public:
 
   void mark_as_static (void);
 
   void mark_as_formal_parameter (void);
 
   void mark_for_possible_ans_assign (void)
     { maybe_do_ans_assign = true; }
 
-  octave_value eval (bool print);
+  octave_value eval (bool print = false);
 
   octave_value_list eval (bool print, int nargout,
 			  const octave_value_list& args); 
 
   void eval_undefined_error (void);
 
   void accept (tree_walker& tw);
 
@@ -159,17 +159,17 @@ public:
       maybe_do_ans_assign = true;
 
       if (is_identifier_only ())
 	id->mark_for_possible_ans_assign ();
     }
 
   string name (void) const;
 
-  octave_value eval (bool print);
+  octave_value eval (bool print = false);
 
   octave_value_list eval (bool print, int nargout,
 			  const octave_value_list& args);
 
   octave_value value (void) const;
   octave_value& reference (void);
 
   string elt_name (void)
@@ -216,17 +216,17 @@ public:
 
   ~tree_builtin (void) { }  // XXX ?? XXX
 
 //  int is_builtin (void) const;
 
   bool is_mapper_function (void) const
     { return is_mapper; }
 
-  octave_value eval (bool print);
+  octave_value eval (bool print = false);
 
   octave_value_list eval (bool print, int nargout, const octave_value_list& args);
 
   string name (void) const
     { return my_name; }
 
   void accept (tree_walker& tw);
 
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -173,17 +173,17 @@ tm_row_const::tm_row_const_rep::init (co
   all_str = true;
 
   bool first_elem = true;
 
   for (Pix p = mr.first (); p != 0; mr.next (p))
     {
       tree_expression *elt = mr (p);
 
-      octave_value tmp = elt->eval (false);
+      octave_value tmp = elt->eval ();
 
       if (error_state || tmp.is_undefined ())
 	break;
       else
 	{
 	  int this_elt_nr = tmp.rows ();
 	  int this_elt_nc = tmp.columns ();
 
diff --git a/src/pt-mat.h b/src/pt-mat.h
--- a/src/pt-mat.h
+++ b/src/pt-mat.h
@@ -72,17 +72,17 @@ public:
 	if (mr)
 	  append (mr);
       }
 
   ~tree_matrix (void) { }
 
   bool all_elements_are_constant (void) const;
 
-  octave_value eval (bool print);
+  octave_value eval (bool print = false);
 
   void accept (tree_walker& tw);
 };
 
 extern void symbols_of_pt_mat (void);
 
 #endif
 
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -228,17 +228,17 @@ tree_argument_list::convert_to_const_vec
 
   Pix p = first ();
   int j = 0;
   for (int k = 0; k < len; k++)
     {
       tree_expression *elt = this->operator () (p);
       if (elt)
 	{
-	  octave_value tmp = elt->eval (false);
+	  octave_value tmp = elt->eval ();
 	  if (error_state)
 	    {
 	      ::error ("evaluating argument list element number %d", k);
 	      args = octave_value_list ();
 	      break;
 	    }
 	  else
 	    {
@@ -364,17 +364,17 @@ tree_parameter_list::convert_to_const_ve
 
   int i = 0;
 
   for (Pix p = first (); p != 0; next (p))
     {
       tree_identifier *elt = this->operator () (p);
 
       if (elt->is_defined ())
-	retval(i) = elt->eval (false);
+	retval(i) = elt->eval ();
 
       i++;
     }
 
   if (vr_list)
     {
       for (Pix p = vr_list->first (); p != 0; vr_list->next (p))
 	{
@@ -518,17 +518,17 @@ tree_switch_case::~tree_switch_case (voi
   delete list;
 }
 
 bool
 tree_switch_case::label_matches (const octave_value& val)
 {
   bool retval = false;
 
-  octave_value label_value = label->eval (false);
+  octave_value label_value = label->eval ();
 
   if (! error_state)
     {
       if (label_value.is_defined ())
 	{
 	  octave_value tmp = do_binary_op (octave_value::eq,
 					   val, label_value);
 
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -134,17 +134,17 @@ public:
 	{
 	  tree_statement *t = remove_front ();
 	  delete t;
 	}
     }
 
   void mark_as_function_body (void) { function_body = true; }
 
-  octave_value eval (bool print);
+  octave_value eval (bool print = false);
 
   octave_value_list eval (bool print, int nargout);
 
   void accept (tree_walker& tw);
 
 private:
 
   // Does this list of statements make up the body of a function?
diff --git a/src/pt-mvr-base.h b/src/pt-mvr-base.h
--- a/src/pt-mvr-base.h
+++ b/src/pt-mvr-base.h
@@ -44,17 +44,17 @@ public:
   tree_multi_val_ret (int l = -1, int c = -1, tree_expression::type et)
     : tree_expression (l, c, et) { }
 
   ~tree_multi_val_ret (void) { }
 
   bool is_multi_val_ret_expression (void) const
     { return true; }
 
-  octave_value eval (bool print);
+  octave_value eval (bool print = false);
 
   virtual octave_value_list eval (bool print, int nargout,
 			      const octave_value_list& args) = 0;
 };
 
 #endif
 
 /*
diff --git a/src/pt-mvr.cc b/src/pt-mvr.cc
--- a/src/pt-mvr.cc
+++ b/src/pt-mvr.cc
@@ -283,17 +283,17 @@ tree_multi_assignment_expression::eval (
 {
   assert (etype == tree_expression::multi_assignment);
 
   if (error_state || ! rhs)
     return octave_value_list ();
 
   nargout = lhs->length ();
   octave_value_list tmp_args;
-  octave_value_list results = rhs->eval (0, nargout, tmp_args);
+  octave_value_list results = rhs->eval (false, nargout, tmp_args);
 
   if (error_state)
     eval_error ();
 
   int ma_line = line ();
   int ma_column = column ();
 
   if (results.length () > 0)
@@ -320,17 +320,17 @@ tree_multi_assignment_expression::eval (
 		  break;
 		}
 	      else
 		tmp = new tree_constant (results(i));
 
 	      tree_simple_assignment_expression tmp_expr
 		(lhs_expr, tmp, 1, 0, ma_line, ma_column);
 
-	      results(i) = tmp_expr.eval (false); // May change
+	      results(i) = tmp_expr.eval (); // May change
 
 	      if (error_state)
 		break;
 
 	      if (print && pad_after)
 		octave_stdout << "\n";
 
 	      if (print)
@@ -340,17 +340,17 @@ tree_multi_assignment_expression::eval (
 
 	      i++;
 	    }
 	  else
 	    {
 	      tree_simple_assignment_expression tmp_expr
 		(lhs_expr, 0, 1, 0, ma_line, ma_column);
 
-	      tmp_expr.eval (false);
+	      tmp_expr.eval ();
 	    }
 	}
 
       if (print && pad_after)
 	octave_stdout << "\n";
     }
 
   return results;
diff --git a/src/pt-mvr.h b/src/pt-mvr.h
--- a/src/pt-mvr.h
+++ b/src/pt-mvr.h
@@ -54,17 +54,17 @@ public:
 
   tree_oct_obj (int l = -1, int c = -1) : tree_multi_val_ret (l, c) { }
 
   tree_oct_obj (const octave_value_list& v, int l = -1, int c = -1)
     : tree_multi_val_ret (l, c), values (v) { }
 
   ~tree_oct_obj (void) { }
 
-  octave_value eval (bool print);
+  octave_value eval (bool print = false);
 
   octave_value_list eval (bool print, int nargout,
 			  const octave_value_list& args);
 
   void accept (tree_walker& tw);
 
 private:
 
@@ -103,17 +103,17 @@ public:
 
   string name (void);
 
   tree_argument_list *arg_list (void)
     { return list; }
 
   void mark_for_possible_ans_assign (void);
 
-  octave_value eval (bool print);
+  octave_value eval (bool print = false);
 
   octave_value_list eval (bool print, int nargout, const octave_value_list& args);
 
   void eval_error (void);
 
   void accept (tree_walker& tw);
 
 private:
@@ -138,17 +138,17 @@ public:
 				    tree_multi_val_ret *r,
 				    bool plhs = false,
 				    int l = -1, int c = -1)
     : tree_multi_val_ret (l, c, tree_expression::multi_assignment),
       preserve (plhs), lhs (lst), rhs (r) { }
 
   ~tree_multi_assignment_expression (void);
 
-  octave_value eval (bool print);
+  octave_value eval (bool print = false);
 
   octave_value_list eval (bool print, int nargout, const octave_value_list& args);
 
   bool is_assignment_expression (void) const
     { return true; }
 
   void eval_error (void);
 
diff --git a/src/pt-plot.cc b/src/pt-plot.cc
--- a/src/pt-plot.cc
+++ b/src/pt-plot.cc
@@ -401,34 +401,34 @@ plot_range::~plot_range (void)
 
 void
 plot_range::print (ostrstream& plot_buf)
 {
   plot_buf << " [";
 
   if (lower)
     {
-      octave_value lower_val = lower->eval (false);
+      octave_value lower_val = lower->eval ();
       if (error_state)
 	{
 	  ::error ("evaluating lower bound of plot range");
 	  return;
 	}
       else
 	{
 	  double lo = lower_val.double_value ();
 	  plot_buf << lo;
 	}
     }
 
   plot_buf << ":";
 
   if (upper)
     {
-      octave_value upper_val = upper->eval (false);
+      octave_value upper_val = upper->eval ();
       if (error_state)
 	{
 	  ::error ("evaluating upper bound of plot range");
 	  return;
 	}
       else
 	{
 	  double hi = upper_val.double_value ();
@@ -459,17 +459,17 @@ subplot_using::eval (int ndim, int n_max
 
   if (qual_count > 0)
     val.resize (qual_count);
 
   for (int i = 0; i < qual_count; i++)
     {
       if (x[i])
 	{
-	  octave_value tmp = x[i]->eval (false);
+	  octave_value tmp = x[i]->eval ();
 	  if (error_state)
 	    {
 	      ::error ("evaluating plot using command");
 	      return -1;
 	    }
 
 	  double val_tmp;
 	  if (tmp.is_defined ())
@@ -556,17 +556,17 @@ int
 subplot_style::print (ostrstream& plot_buf)
 {
   if (! sp_style.empty ())
     {
       plot_buf << " " << GPLOT_CMD_WITH << " " << sp_style;
 
       if (sp_linetype)
 	{
-	  octave_value tmp = sp_linetype->eval (false);
+	  octave_value tmp = sp_linetype->eval ();
 	  if (! error_state && tmp.is_defined ())
 	    {
 	      double val = tmp.double_value ();
 	      if (xisnan (val))
 		{
 		  ::error ("NaN is invalid a plotting line style");
 		  return -1;
 		}
@@ -577,17 +577,17 @@ subplot_style::print (ostrstream& plot_b
 	    {
 	      ::error ("evaluating plot style command");
 	      return -1;
 	    }
 	}
 
       if (sp_pointtype)
 	{
-	  octave_value tmp = sp_pointtype->eval (false);
+	  octave_value tmp = sp_pointtype->eval ();
 	  if (! error_state && tmp.is_defined ())
 	    {
 	      double val = tmp.double_value ();
 	      if (xisnan (val))
 		{
 		  ::error ("NaN is invalid a plotting point style");
 		  return -1;
 		}
@@ -681,17 +681,17 @@ subplot::extract_plot_data (int ndim, oc
   return retval;
 }
 
 int
 subplot::handle_plot_data (int ndim, ostrstream& plot_buf)
 {
   if (sp_plot_data)
     {
-      octave_value data = sp_plot_data->eval (false);
+      octave_value data = sp_plot_data->eval ();
 
       if (! error_state && data.is_defined ())
 	{
 	  string file;
 
 	  if (data.is_string ())
 	    {
 	      // Should really try to look at data file to determine
@@ -773,17 +773,17 @@ subplot::print (int ndim, ostrstream& pl
 {
   int status = handle_plot_data (ndim, plot_buf);
 
   if (status < 0)
     return -1;
 
   if (sp_title_clause)
     {
-      octave_value tmp = sp_title_clause->eval (false);
+      octave_value tmp = sp_title_clause->eval ();
       if (! error_state && tmp.is_string ())
 	plot_buf << " " << GPLOT_CMD_TITLE << " "
 	  << '"' << tmp.string_value () << '"';
       else
 	{
 	  warning ("line title must be a string");
 	  plot_buf << " " << GPLOT_CMD_TITLE << " "
 	    << '"' << "line " << plot_line_count << '"';
diff --git a/src/quad.cc b/src/quad.cc
--- a/src/quad.cc
+++ b/src/quad.cc
@@ -55,17 +55,17 @@ quad_user_function (double x)
 {
   double retval = 0.0;
 
   octave_value_list args;
   args(0) = x;
 
   if (quad_fcn)
     {
-      octave_value_list tmp = quad_fcn->eval (0, 1, args);
+      octave_value_list tmp = quad_fcn->eval (false, 1, args);
 
       if (error_state)
 	{
 	  quad_integration_error = 1;  // XXX FIXME XXX
 	  gripe_user_supplied_eval ("quad");
 	  return retval;
 	}
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -135,17 +135,17 @@ int input_from_startup_file = 0;
 // Nonzero means that input is coming from a file that was named on
 // the command line.
 int input_from_command_line_file = 1;
 
 // Top level context (?)
 jmp_buf toplevel;
 
 void
-parse_and_execute (FILE *f, int print)
+parse_and_execute (FILE *f, bool print)
 {
   begin_unwind_frame ("parse_and_execute");
   
   YY_BUFFER_STATE old_buf = current_buffer ();
   YY_BUFFER_STATE new_buf = create_buffer (f);
 
   add_unwind_protect (restore_input_buffer, old_buf);
   add_unwind_protect (delete_input_buffer, new_buf);
@@ -203,17 +203,17 @@ parse_and_execute (FILE *f, int print)
 static void
 safe_fclose (void *f)
 {
   if (f)
     fclose (static_cast<FILE *> (f));
 }
 
 void
-parse_and_execute (const string& s, int print, int verbose,
+parse_and_execute (const string& s, bool print, bool verbose,
 		   const char *warn_for)
 {
   begin_unwind_frame ("parse_and_execute_2");
 
   unwind_protect_int (reading_script_file);
   unwind_protect_str (curr_fcn_file_full_name);
 
   reading_script_file = 1;
@@ -277,17 +277,17 @@ main_loop (void)
       curr_sym_tab = top_level_sym_tab;
 
       reset_parser ();
 
       retval = yyparse ();
 
       if (retval == 0 && global_command)
 	{
-	  global_command->eval (1);
+	  global_command->eval (true);
 
 	  delete global_command;
 
 	  global_command = 0;
 
 	  if (! (interactive || forced_interactive))
 	    {
 	      bool quit = (returning || breaking);
@@ -499,17 +499,17 @@ feval (const octave_value_list& args, in
   tree_fvc *fcn = is_valid_function (args(0), "feval", 1);
   if (fcn)
     {
       int tmp_nargin = args.length () - 1;
       octave_value_list tmp_args;
       tmp_args.resize (tmp_nargin);
       for (int i = 0; i < tmp_nargin; i++)
 	tmp_args(i) = args(i+1);
-      retval = fcn->eval (0, nargout, tmp_args);
+      retval = fcn->eval (false, nargout, tmp_args);
     }
 
   return retval;
 }
 
 DEFUN (feval, args, nargout,
   "feval (NAME, ARGS, ...)\n\
 \n\
@@ -523,17 +523,17 @@ evaluate NAME as a function, passing ARG
     retval = feval (args, nargout);
   else
     print_usage ("feval");
 
   return retval;
 }
 
 static octave_value_list
-eval_string (const string& s, int print, int& parse_status, int nargout)
+eval_string (const string& s, bool print, int& parse_status, int nargout)
 {
   begin_unwind_frame ("eval_string");
 
   unwind_protect_int (get_input_from_eval_string);
   unwind_protect_int (input_from_command_line_file);
   unwind_protect_ptr (global_command);
   unwind_protect_str (current_eval_string);
 
@@ -570,29 +570,29 @@ eval_string (const string& s, int print,
       retval = command->eval (print, nargout);
       delete command;
     }
 
   return retval;
 }
 
 octave_value
-eval_string (const string& s, int print, int& parse_status)
+eval_string (const string& s, bool print, int& parse_status)
 {
   octave_value retval;
 
   octave_value_list tmp = eval_string (s, print, parse_status, 1);
 
   retval = tmp(0);
 
   return retval;
 }
 
 static octave_value_list
-eval_string (const octave_value& arg, int print, int& parse_status,
+eval_string (const octave_value& arg, bool print, int& parse_status,
 	     int nargout)
 {
   string s = arg.string_value ();
 
   if (error_state)
     {
       error ("eval: expecting string argument");
       return -1.0;
@@ -811,17 +811,17 @@ SLStack<string> octave_atexit_functions;
 
 void
 do_octave_atexit (void)
 {
   while (! octave_atexit_functions.empty ())
     {
       octave_value_list fcn = octave_atexit_functions.pop ();
 
-      feval (fcn, 0);
+      feval (fcn, false);
     }
 }
 
 DEFUN (atexit, args, ,
   "atexit (NAME): register NAME as a function to call when Octave exits\n\
 \n\
 Functions are called with no arguments in the reverse of the order in\n\
 which they were registered with atexit()")
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -32,24 +32,24 @@ class tree_statement_list;
 class charMatrix;
 
 #include <string>
 
 extern void
 clean_up_and_exit (int) GCC_ATTR_NORETURN;
 
 extern void
-parse_and_execute (FILE *f, int print = 0);
+parse_and_execute (FILE *f, bool print = false);
 
 extern void
-parse_and_execute (const string& s, int print = 0, int verbose = 0,
+parse_and_execute (const string& s, bool print = false, bool verbose = false,
 		   const char *warn_for = 0);
 
 extern octave_value
-eval_string (const string&, int print, int& parse_status);
+eval_string (const string&, bool print, int& parse_status);
 
 extern int
 main_loop (void);
 
 extern void
 do_octave_atexit (void);
 
 extern void
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -841,17 +841,17 @@ get_global_value (const string& nm)
 
   if (sr)
     {
       // Do something with the value in foo.
 
       tree_fvc *sr_def = sr->def ();
 
       if (sr_def)
-	retval  = sr_def->eval (1);
+	retval  = sr_def->eval (true);
       else
 	error ("get_global_by_name: undefined symbol `%s'", nm.c_str ());
     }
   else
     error ("get_global_by_name: unknown symbol `%s'", nm.c_str ());
 
   return retval;
 }
@@ -904,17 +904,17 @@ builtin_string_variable (const string& n
   assert (sr);
 
   string retval;
 
   tree_fvc *defn = sr->def ();
 
   if (defn)
     {
-      octave_value val = defn->eval (0);
+      octave_value val = defn->eval ();
 
       if (! error_state && val.is_string ())
 	retval = val.string_value ();
     }
 
   return retval;
 }
 
@@ -931,17 +931,17 @@ builtin_real_scalar_variable (const stri
   // It is a prorgramming error to look for builtins that aren't.
 
   assert (sr);
 
   tree_fvc *defn = sr->def ();
 
   if (defn)
     {
-      octave_value val = defn->eval (0);
+      octave_value val = defn->eval ();
 
       if (! error_state && val.is_scalar_type ())
 	{
 	  d = val.double_value ();
 	  status = 1;
 	}
     }
 
@@ -959,17 +959,17 @@ builtin_any_variable (const string& name
 
   // It is a prorgramming error to look for builtins that aren't.
 
   assert (sr);
 
   tree_fvc *defn = sr->def ();
 
   if (defn)
-    retval = defn->eval (0);
+    retval = defn->eval ();
 
   return retval;
 }
 
 // Global stuff and links to builtin variables and functions.
 
 // Make the definition of the symbol record sr be the same as the
 // definition of the global variable of the same name, creating it if
