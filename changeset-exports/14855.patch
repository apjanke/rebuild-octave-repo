# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1341865411 25200
#      Mon Jul 09 13:23:31 2012 -0700
# Node ID 1b48b209a8d64ce92261a7c7898a7cd9013a82e8
# Parent  5ae9f0f77635eead51579eb75926ebe9a35bc33b
maint: Use Octave coding conventions for coddling parentheses in examples directory

* display.m, subsref.m, display.m, mtimes.m, plot.m, polyval.m, myprop.c,
stringdemo.cc, unwinddemo.cc: Use Octave coding conventions for coddling
parentheses.

diff --git a/examples/@FIRfilter/display.m b/examples/@FIRfilter/display.m
--- a/examples/@FIRfilter/display.m
+++ b/examples/@FIRfilter/display.m
@@ -1,6 +1,6 @@
 function display (f)
 
-  display(f.polynomial);
+  display (f.polynomial);
 
 endfunction
 
diff --git a/examples/@FIRfilter/subsref.m b/examples/@FIRfilter/subsref.m
--- a/examples/@FIRfilter/subsref.m
+++ b/examples/@FIRfilter/subsref.m
@@ -1,13 +1,13 @@
 function out = subsref (f, x)
   switch x.type
     case "()"
       n = f.polynomial;
-      out = filter(n.poly, 1, x.subs{1});
+      out = filter (n.poly, 1, x.subs{1});
     case "."
       fld = x.subs;
       if (strcmp (fld, "polynomial"))
         out = f.polynomial;
       else
         error ("@FIRfilter/subsref: invalid property \"%s\"", fld);
       endif
     otherwise
diff --git a/examples/@polynomial/display.m b/examples/@polynomial/display.m
--- a/examples/@polynomial/display.m
+++ b/examples/@polynomial/display.m
@@ -1,12 +1,12 @@
 function display (p)
   a = p.poly;
   first = true;
-  fprintf("%s =", inputname(1));
+  fprintf ("%s =", inputname (1));
   for i = 1 : length (a);
     if (a(i) != 0)
       if (first)
         first = false;
       elseif (a(i) > 0)
         fprintf (" +");
       endif
       if (a(i) < 0)
@@ -21,12 +21,12 @@ function display (p)
         fprintf (" X");
       endif
       if (i > 2)
         fprintf (" ^ %d", i - 1);
       endif
     endif
   endfor
   if (first)
-    fprintf(" 0");
+    fprintf (" 0");
   endif
-  fprintf("\n");
+  fprintf ("\n");
 endfunction
diff --git a/examples/@polynomial/mtimes.m b/examples/@polynomial/mtimes.m
--- a/examples/@polynomial/mtimes.m
+++ b/examples/@polynomial/mtimes.m
@@ -1,3 +1,3 @@
 function y = mtimes (a, b)
-  y = polynomial (conv (double(a),double(b)));
-endfunction
\ No newline at end of file
+  y = polynomial (conv (double (a), double (b)));
+endfunction
diff --git a/examples/@polynomial/plot.m b/examples/@polynomial/plot.m
--- a/examples/@polynomial/plot.m
+++ b/examples/@polynomial/plot.m
@@ -1,10 +1,10 @@
-function h = plot(p, varargin)
+function h = plot (p, varargin)
   n = 128;
   rmax = max (abs (roots (p.poly)));
   x = [0 : (n - 1)] / (n - 1) * 2.2 * rmax - 1.1 * rmax;
   if (nargout > 0)
-    h = plot(x, p(x), varargin{:});
+    h = plot (x, p(x), varargin{:});
   else
-    plot(x, p(x), varargin{:});
+    plot (x, p(x), varargin{:});
   endif
-endfunction
\ No newline at end of file
+endfunction
diff --git a/examples/@polynomial/polyval.m b/examples/@polynomial/polyval.m
--- a/examples/@polynomial/polyval.m
+++ b/examples/@polynomial/polyval.m
@@ -1,7 +1,7 @@
 function [y, dy] = polyval (p, varargin)
   if (nargout == 2)
-    [y, dy] = polyval (fliplr(p.poly), varargin{:});
+    [y, dy] = polyval (fliplr (p.poly), varargin{:});
   else
-    y = polyval (fliplr(p.poly), varargin{:});
+    y = polyval (fliplr (p.poly), varargin{:});
   endif
 endfunction
diff --git a/examples/myprop.c b/examples/myprop.c
--- a/examples/myprop.c
+++ b/examples/myprop.c
@@ -3,17 +3,17 @@
 void
 mexFunction (int nlhs, mxArray* plhs[], int nrhs, const mxArray* prhs[])
 {
   double handle;
   char property[256];
 
   if (nrhs < 2 || nrhs > 3)
     mexErrMsgTxt ("incorrect number of arguments");
-  if (!mxIsDouble(prhs[0]))
+  if (!mxIsDouble (prhs[0]))
     mexErrMsgTxt ("handle expected to be a double scalar");
   if (!mxIsChar (prhs[1]))
     mexErrMsgTxt ("expected property to be a string");
   
   handle = mxGetScalar (prhs[0]);
   mxGetString (prhs[1], property, 256);
   plhs[0] = mxDuplicateArray (mexGet (handle, property));
   
diff --git a/examples/stringdemo.cc b/examples/stringdemo.cc
--- a/examples/stringdemo.cc
+++ b/examples/stringdemo.cc
@@ -17,17 +17,17 @@ DEFUN_DLD (stringdemo, args, , "String D
             retval(1) = octave_value (ch, true);
           else
             retval(1) = octave_value (ch, true, '\'');
 
           octave_idx_type nr = ch.rows ();
           for (octave_idx_type i = 0; i < nr / 2; i++)
             {
               std::string tmp = ch.row_as_string (i);
-              ch.insert (ch.row_as_string(nr-i-1).c_str (),
+              ch.insert (ch.row_as_string (nr-i-1).c_str (),
                          i, 0);
               ch.insert (tmp.c_str (), nr-i-1, 0);
             }
           retval(0) = octave_value (ch, true);
         }
     }
   return retval;
 }
diff --git a/examples/unwinddemo.cc b/examples/unwinddemo.cc
--- a/examples/unwinddemo.cc
+++ b/examples/unwinddemo.cc
@@ -17,15 +17,15 @@ DEFUN_DLD (unwinddemo, args, nargout, "U
     {
       NDArray a = args(0).array_value ();
       NDArray b = args(1).array_value ();
 
       if (! error_state)
         {
           unwind_protect::begin_frame ("Funwinddemo");
           unwind_protect_ptr (current_liboctave_warning_handler);
-          set_liboctave_warning_handler(err_hand);
+          set_liboctave_warning_handler (err_hand);
           retval = octave_value (quotient (a, b));
           unwind_protect::run_frame ("Funwinddemo");
         }
     }
   return retval;
 }
