# HG changeset patch
# User Rik <rik@octave.org>
# Date 1403733996 25200
#      Wed Jun 25 15:06:36 2014 -0700
# Node ID 6825522c25e4ccd3d89cf4f7bb966b99012a4454
# Parent  da6ffbf75edf48bd08825c4c7d6c43ab68dec901
maint: Use names beginning and ending with "__" for internal only functions.

* cellfun.cc (Fcellfun): Use "__cellfun_fcn__".
* cellfun.cc (Farrayfun): Use "__arrayfun_fcn__".

* quad.cc (Fquad): Use "__quad_fcn__".

* __eigs__.cc (F__eigs__): Use "__eigs_fcn__".

diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -435,17 +435,17 @@ v = cellfun (@@det, a); # faster\n\
         return retval;
 
       // See if we can convert the string into a function.
 
       std::string name = args(0).string_value ();
 
       if (! valid_identifier (name))
         {
-          std::string fcn_name = unique_symbol_name ("__cellfun_fcn_");
+          std::string fcn_name = unique_symbol_name ("__cellfun_fcn__");
           std::string fname = "function y = " + fcn_name + "(x) y = ";
 
           octave_function *ptr_func
             = extract_function (args(0), "cellfun", fcn_name,
                                 fname, "; endfunction");
 
           if (ptr_func && ! error_state)
             func = octave_value (ptr_func, true);
@@ -1188,17 +1188,17 @@ arrayfun (@@str2num, [1234],\n\
   if (func.is_string ())
     {
       // See if we can convert the string into a function.
 
       std::string name = args(0).string_value ();
 
       if (! valid_identifier (name))
         {
-          std::string fcn_name = unique_symbol_name ("__arrayfun_fcn_");
+          std::string fcn_name = unique_symbol_name ("__arrayfun_fcn__");
           std::string fname = "function y = " + fcn_name + "(x) y = ";
 
           octave_function *ptr_func
             = extract_function (args(0), "arrayfun", fcn_name,
                                 fname, "; endfunction");
 
           if (ptr_func && ! error_state)
             func = octave_value (ptr_func, true);
diff --git a/libinterp/corefcn/quad.cc b/libinterp/corefcn/quad.cc
--- a/libinterp/corefcn/quad.cc
+++ b/libinterp/corefcn/quad.cc
@@ -230,17 +230,17 @@ variable by routines @code{dblquad} and 
   int nargin = args.length ();
 
   if (nargin > 2 && nargin < 6 && nargout < 5)
     {
       if (args(0).is_function_handle () || args(0).is_inline_function ())
         quad_fcn = args(0).function_value ();
       else
         {
-          fcn_name = unique_symbol_name ("__quad_fcn_");
+          fcn_name = unique_symbol_name ("__quad_fcn__");
           std::string fname = "function y = ";
           fname.append (fcn_name);
           fname.append ("(x) y = ");
           quad_fcn = extract_function (args(0), "quad", fcn_name, fname,
                                        "; endfunction");
         }
 
       if (! quad_fcn)
diff --git a/libinterp/dldfcn/__eigs__.cc b/libinterp/dldfcn/__eigs__.cc
--- a/libinterp/dldfcn/__eigs__.cc
+++ b/libinterp/dldfcn/__eigs__.cc
@@ -206,17 +206,17 @@ Undocumented internal function.\n\
     print_usage ();
   else if (args(0).is_function_handle () || args(0).is_inline_function ()
            || args(0).is_string ())
     {
       if (args(0).is_string ())
         {
           std::string name = args(0).string_value ();
           std::string fname = "function y = ";
-          fcn_name = unique_symbol_name ("__eigs_fcn_");
+          fcn_name = unique_symbol_name ("__eigs_fcn__");
           fname.append (fcn_name);
           fname.append ("(x) y = ");
           eigs_fcn = extract_function (args(0), "eigs", fcn_name, fname,
                                        "; endfunction");
         }
       else
         eigs_fcn = args(0).function_value ();
 
