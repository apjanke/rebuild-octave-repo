# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1546980138 -3600
#      Tue Jan 08 21:42:18 2019 +0100
# Branch stable
# Node ID 6e0bf8212b40b5a94381d8e2deee573197139340
# Parent  e9afb3d53ca16a08b151c65e2c3c00d1aa0961e2
improve full text search in documentation browser

* documentation.cc (global_search): use m_internal_search for storing the
  query string;
  (global_search_finished): make a copy of m_internal_search for the full
  text search in the found help text, use show_search_result_clicked for
  opening the first search result;
  (handle_search_result_clicked): if search string is not found in help
  text, go to the top of the page

* documentation.h: fix parameter of show_single_result signal

diff --git a/libgui/src/documentation.cc b/libgui/src/documentation.cc
--- a/libgui/src/documentation.cc
+++ b/libgui/src/documentation.cc
@@ -402,32 +402,34 @@ namespace octave
       query_string = queries.first ().wordList.join (" ");
     else
       query_string = "";
 #endif
 
     // Get quoted search strings first, then take first string as fall back
     QRegExp rx ("\"([^\"]*)\"");
     if (rx.indexIn (query_string, 0) != -1)
-      m_query_string = rx.cap (1);
+      m_internal_search = rx.cap (1);
     else
-      m_query_string = query_string.split (" ", QString::SkipEmptyParts).first ();
+      m_internal_search = query_string.split (" ", QString::SkipEmptyParts).first ();
 
     m_help_engine->searchEngine ()->search (queries);
   }
 
   void documentation::global_search_started (void)
   {
     qApp->setOverrideCursor(QCursor(Qt::WaitCursor));
   }
 
   void documentation::global_search_finished (int)
   {
     if (! m_internal_search.isEmpty ())
       {
+        m_query_string = m_internal_search;
+
         QHelpSearchEngine *search_engine = m_help_engine->searchEngine ();
         if (search_engine)
           {
 #if defined (HAVE_QHELPSEARCHQUERYWIDGET_SEARCHINPUT)
             QVector<QHelpSearchResult> res
               = search_engine->searchResults (0, search_engine->searchResultCount ());
 #else
             QList< QPair<QString, QString> > res
@@ -468,19 +470,19 @@ namespace octave
                             else if (url.isEmpty ())
                               url = tmpurl;
                           }
                       }
                   }
 
                 if (! url.isEmpty ())
                   {
-                    connect (this, SIGNAL (show_single_result (const QUrl)),
-                             m_doc_browser,
-                             SLOT (handle_index_clicked (const QUrl)));
+                    connect (this, SIGNAL (show_single_result (const QUrl&)),
+                             this,
+                             SLOT (handle_search_result_clicked (const QUrl&)));
 
                     emit show_single_result (url);
                   }
               }
            }
 
         m_internal_search = QString ();
       }
@@ -495,22 +497,28 @@ namespace octave
 
     // Select all occurrences of matching text
     select_all_occurrences (m_query_string);
 
     // Open search widget with matching text as search string
     m_find_line_edit->setText (m_query_string);
     m_find_line_edit->parentWidget ()->show ();
 
-    // Go to to first occurrence of search text. Going to the end and then
-    // search backwards until the last occurrence ensures the search text
-    // is visible in the first line of the visible part of the text.
-    m_doc_browser->moveCursor (QTextCursor::End);
-    while (m_doc_browser->find (m_find_line_edit->text (),
-                                QTextDocument::FindBackward));
+    // If no occurrence can be found go to the top of the page
+    if (! m_doc_browser->find (m_find_line_edit->text ()))
+      m_doc_browser->moveCursor (QTextCursor::Start);
+    else
+      {
+        // Go to to first occurrence of search text. Going to the end and then
+        // search backwards until the last occurrence ensures the search text
+        // is visible in the first line of the visible part of the text.
+        m_doc_browser->moveCursor (QTextCursor::End);
+        while (m_doc_browser->find (m_find_line_edit->text (),
+                                    QTextDocument::FindBackward));
+      }
   }
 
   void documentation::select_all_occurrences (const QString& text)
   {
     // Get highlight background and text color
     QPalette pal = QApplication::palette ();
     QTextCharFormat format;
     QColor col = pal.color (QPalette::Highlight);
diff --git a/libgui/src/documentation.h b/libgui/src/documentation.h
--- a/libgui/src/documentation.h
+++ b/libgui/src/documentation.h
@@ -122,17 +122,17 @@ namespace octave
     void handle_cursor_position_change (void);
     void handle_search_result_clicked (const QUrl& url);
 
     void update_history_menus (void);
     void open_hist_url (QAction *a);
 
   signals:
 
-    void show_single_result (const QUrl);
+    void show_single_result (const QUrl&);
 
   private:
 
     void construct_tool_bar (void);
     QAction *add_action (const QIcon& icon, const QString& text,
                          const char *member, QWidget *receiver = nullptr,
                          QToolBar *tool_bar = nullptr);
     void update_history (int new_count, QAction **actions);
