# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1277905977 -7200
#      Wed Jun 30 15:52:57 2010 +0200
# Node ID d899b2ee6a376188d4a20cf983d233a943d280ad
# Parent  551913ba1f8576bc3f7d412808ed8063e37f6671
fix saving/loading of constant ranges (bug #30289)

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2010-06-30  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-range.cc (octave_range::save_ascii): Save length rather than
+	limit when inc is zero. Adjust comment.
+	(octave_range::save_binary, octave_range::save_hdf5): Ditto.
+	(octave_range::load_ascii): Assume limit is length when increment is
+	zero.
+	(octave_range::load_binary, octave_range::load_hdf5): Ditto.
+
+
 2010-06-25  John W. Eaton  <jwe@octave.org>
 
 	* graphics.cc (reset_default_properties): New static function.
 	(root_figure::reset_default_properties,
 	figure::reset_default_properties, axes::reset_default_properties):
 	Use it to avoid duplicated code.
 
 2010-06-24  Rik <octave@nomad.inbox5.com>
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -397,54 +397,71 @@ skip_comments (std::istream& is)
 
 bool 
 octave_range::save_ascii (std::ostream& os)
 {
   Range r = range_value ();
   double base = r.base ();
   double limit = r.limit ();
   double inc = r.inc ();
+  octave_idx_type len = r.nelem ();
 
-  os << "# base, limit, increment\n";
+  if (inc != 0)
+    os << "# base, limit, increment\n";
+  else
+    os << "# base, length, increment\n";
+
   octave_write_double (os, base);
   os << " ";
-  octave_write_double (os, limit);
+  if (inc != 0)
+    octave_write_double (os, limit);
+  else
+    os << len;
   os << " ";
   octave_write_double (os, inc);
   os << "\n";
 
   return true;
 }
 
 bool 
 octave_range::load_ascii (std::istream& is)
 {
   // # base, limit, range comment added by save ().
   skip_comments (is);
 
-  is >> range;
+  double base, limit, inc;
+  is >> base >> limit >> inc;
 
   if (!is)
     {
       error ("load: failed to load range constant");
       return false;
     }
 
+  if (inc != 0)
+    range = Range (base, limit, inc);
+  else
+    range = Range (base, inc, static_cast<octave_idx_type> (limit));
+
   return true;
 }
 
 bool 
 octave_range::save_binary (std::ostream& os, bool& /* save_as_floats */)
 {
   char tmp = LS_DOUBLE;
   os.write (reinterpret_cast<char *> (&tmp), 1);
   Range r = range_value ();
   double bas = r.base ();
   double lim = r.limit ();
   double inc = r.inc ();
+  if (inc == 0)
+    lim = r.nelem ();
+
   os.write (reinterpret_cast<char *> (&bas), 8);
   os.write (reinterpret_cast<char *> (&lim), 8);
   os.write (reinterpret_cast<char *> (&inc), 8);
 
   return true;
 }
 
 bool 
@@ -462,18 +479,21 @@ octave_range::load_binary (std::istream&
   if (! is.read (reinterpret_cast<char *> (&lim), 8))
     return false;
   if (swap)
     swap_bytes<8> (&lim);
   if (! is.read (reinterpret_cast<char *> (&inc), 8))
     return false;
   if (swap)
     swap_bytes<8> (&inc);
-  Range r (bas, lim, inc);
-  range = r;
+  if (inc != 0)
+    range = Range (bas, lim, inc);
+  else
+    range = Range (bas, inc, static_cast<octave_idx_type> (lim));
+
   return true;
 }
 
 #if defined (HAVE_HDF5)
 
 // The following subroutines creates an HDF5 representation of the way
 // we will store Octave range types (triplets of floating-point numbers). 
 // NUM_TYPE is the HDF5 numeric type to use for storage (e.g. 
@@ -520,17 +540,17 @@ octave_range::save_hdf5 (hid_t loc_id, c
       H5Sclose (space_hid);
       H5Tclose (type_hid);
       return false;
     }
   
   Range r = range_value ();
   double range_vals[3];
   range_vals[0] = r.base ();
-  range_vals[1] = r.limit ();
+  range_vals[1] = r.inc () != 0 ? r.limit () : r.nelem ();
   range_vals[2] = r.inc ();
 
   retval = H5Dwrite (data_hid, type_hid, H5S_ALL, H5S_ALL, H5P_DEFAULT,
                      range_vals) >= 0;
 
   H5Dclose (data_hid);
   H5Tclose (type_hid);
   H5Sclose (space_hid);
@@ -570,18 +590,21 @@ octave_range::load_hdf5 (hid_t loc_id, c
       return false;
     }
 
   double rangevals[3];
   if (H5Dread (data_hid, range_type, H5S_ALL, H5S_ALL, H5P_DEFAULT, 
                rangevals) >= 0)
     {
       retval = true;
-      Range r (rangevals[0], rangevals[1], rangevals[2]);
-      range = r;
+      if (rangevals[2] != 0)
+        range = Range (rangevals[0], rangevals[1], rangevals[2]);
+      else
+        range = Range (rangevals[0], rangevals[2], 
+                       static_cast<octave_idx_type> (rangevals[1]));
     }
 
   H5Tclose (range_type);
   H5Sclose (space_hid);
   H5Dclose (data_hid);
 
   return retval;
 }
