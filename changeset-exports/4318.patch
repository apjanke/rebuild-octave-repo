# HG changeset patch
# User jwe
# Date 1045115536 0
#      Thu Feb 13 05:52:16 2003 +0000
# Node ID 115bffcecfd3f92f26af804b1ec048fad1db8d9a
# Parent  1ced186d4b6b105a0ec15879da1f29d25c3d5572
[project @ 2003-02-13 05:52:16 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2003-02-12  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* error.cc (reset_error_handler): New function.
+	* toplev.cc (main_loop): Use it here.
+	* lex.l (reset_parser): Don't set error_state and warning_state here.
+	* parse.y (eval_string): Reset parser before calling yyparse.
+
 2003-01-29  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* data.cc (Ffmod): New function.
 
 	* c-file-ptr-stream.cc (c_file_ptr_buf::underflow_common): New
 	function.
 	* c-file-ptr-stream.h (c_file_ptr_buf::underflow,
 	c_file_ptr_buf::uflow): Use it.
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -98,16 +98,25 @@ int warning_state = 0;
 bool buffer_error_messages = false;
 
 // TRUE means error messages are turned off.
 bool discard_error_messages = false;
 
 // The message buffer.
 static OSSTREAM *error_message_buffer = 0;
 
+void
+reset_error_handler (void)
+{
+  error_state = 0;
+  warning_state = 0;
+  buffer_error_messages = false;
+  discard_error_messages = false;
+}
+
 // Warning messages are never buffered.
 
 static void
 vwarning (const char *name, const char *fmt, va_list args)
 {
   flush_octave_stdout ();
 
   OSSTREAM output_buf;
diff --git a/src/error.h b/src/error.h
--- a/src/error.h
+++ b/src/error.h
@@ -24,16 +24,18 @@ Software Foundation, 59 Temple Place - S
 #define octave_error_h 1
 
 #include <string>
 
 #define panic_impossible() \
   panic ("impossible state reached in file `%s' at line %d", \
 	 __FILE__, __LINE__)
 
+extern void reset_error_handler (void);
+
 extern void message (const char *name, const char *fmt, ...);
 extern void usage (const char *fmt, ...);
 extern void warning (const char *fmt, ...);
 extern void error (const char *fmt, ...);
 extern void parse_error (const char *fmt, ...);
 extern void panic (const char *fmt, ...) GCC_ATTR_NORETURN;
 
 // Current error state.
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -837,18 +837,17 @@ do_comma_insert_check (void)
 // recursively, so it is always safe to reinitialize its state before
 // doing any parsing.
 
 void
 reset_parser (void)
 {
   // Start off on the right foot.
   BEGIN 0;
-  error_state = 0;
-  warning_state = 0;
+
   parser_end_of_input = false;
   end_tokens_expected = 0;
 
   while (! symtab_context.empty ())
     symtab_context.pop ();
 
   // We do want a prompt by default.
   promptflag = 1;
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3590,16 +3590,18 @@ eval_string (const std::string& s, bool 
   unwind_protect::add (delete_input_buffer, new_buf);
 
   switch_to_buffer (new_buf);
 
   unwind_protect_ptr (curr_sym_tab);
 
   do
     {
+      reset_parser ();
+
       parse_status = yyparse ();
 
       tree_statement_list *command = global_command;
 
       if (parse_status == 0)
         {
 	  if (command)
 	    {
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -137,16 +137,18 @@ main_loop (void)
 
   int retval = 0;
   do
     {
       try
 	{
 	  curr_sym_tab = top_level_sym_tab;
 
+	  reset_error_handler ();
+
 	  reset_parser ();
 
 	  retval = yyparse ();
 
 	  if (retval == 0)
 	    {
 	      if (global_command)
 		{
