# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1367884928 14400
#      Mon May 06 20:02:08 2013 -0400
# Node ID 4adf3c4bd80bd1993f38ba056fd58f04d013c2b9
# Parent  a86a14e6e65e98c2bb76ac54fb1807efdbbe4c6e
GUI compilation fixes for MSVC.

* libgui/src/dialog.cc (ACTIVE_ESCAPE, RICH_TEXT): Define to 1 instead of
"true".
(LINE_EDIT_FOLLOWS_PROMPT): Define to 0 instead of "false".
*libgui/src/settings-dialog.cc (settings_dialog::read_lexer_settings,
settings_dialog::read_workspace_colors,
settings_dialog::read_terminal_colors): Use QVector instead of C99
non-constant arrays.

diff --git a/libgui/src/dialog.cc b/libgui/src/dialog.cc
--- a/libgui/src/dialog.cc
+++ b/libgui/src/dialog.cc
@@ -158,17 +158,17 @@ MessageDialog::MessageDialog (const QStr
             erole = QMessageBox::AcceptRole;
 
           QPushButton *pbutton = addButton (qsbutton.at (i), erole);
           if (qsbutton.at (i) == defbutton)
             setDefaultButton (pbutton);
           // Make the last button the button pressed when <esc> key activated.
           if (i == N-1)
             {
-#define ACTIVE_ESCAPE true
+#define ACTIVE_ESCAPE 1
 #if ACTIVE_ESCAPE
               setEscapeButton (pbutton);
 #else
               setEscapeButton (0);
 #endif
 #undef ACTIVE_ESCAPE
             }
         }
@@ -226,17 +226,17 @@ ListDialog::ListDialog (const QStringLis
   if (! prompt.isEmpty ())
     {
       // For now, assume html-like Rich Text.  May be incompatible
       // with something down the road, but just testing capability.
       QString prompt_string;
       for (int j = 0; j < prompt.length (); j++)
         {
           if (j > 0)
-#define RICH_TEXT true
+#define RICH_TEXT 1
 #if RICH_TEXT
             prompt_string.append ("<br>");
 #else
             prompt_string.append ("\n");
 #endif
           prompt_string.append (prompt.at (j));
         }
       QLabel *plabel = new QLabel (prompt_string);
@@ -322,17 +322,17 @@ ListDialog::reject (void)
 
 
 InputDialog::InputDialog (const QStringList& prompt, const QString& title,
                           const QFloatList& nr, const QFloatList& nc,
                           const QStringList& defaults)
   : QDialog ()
 {
 
-#define LINE_EDIT_FOLLOWS_PROMPT false
+#define LINE_EDIT_FOLLOWS_PROMPT 0
 
 #if LINE_EDIT_FOLLOWS_PROMPT
     // Prompt on left followed by input on right.
     QGridLayout *promptInputLayout = new QGridLayout;
 #else
     // Prompt aligned above input.
     QVBoxLayout *promptInputLayout = new QVBoxLayout;
 #endif
diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -26,16 +26,17 @@ along with Octave; see the file COPYING.
 
 #include "resource-manager.h"
 #include "workspace-model.h"
 #include "settings-dialog.h"
 #include "ui-settings-dialog.h"
 #include <QSettings>
 #include <QDir>
 #include <QFileInfo>
+#include <QVector>
 
 #ifdef HAVE_QSCINTILLA
 #include <QScrollArea>
 #include "color-picker.h"
 #include <Qsci/qscilexercpp.h>
 #include <Qsci/qscilexerbash.h>
 #include <Qsci/qscilexerperl.h>
 #include <Qsci/qscilexerbatch.h>
@@ -182,21 +183,21 @@ settings_dialog::get_valid_lexer_styles 
 
 void
 settings_dialog::read_lexer_settings (QsciLexer *lexer, QSettings *settings)
 {
   lexer->readSettings (*settings);
   int styles[MaxLexerStyles];  // array for saving valid styles (enum is not continuous)
   int max_style = get_valid_lexer_styles (lexer, styles);
   QGridLayout *style_grid = new QGridLayout ();
-  QLabel *description[max_style];
-  QFontComboBox *select_font[max_style];
-  QSpinBox *font_size[max_style];
-  QCheckBox *attrib_font[3][max_style];
-  color_picker *color[max_style];
+  QVector<QLabel*> description (max_style);
+  QVector<QFontComboBox*> select_font (max_style);
+  QVector<QSpinBox*> font_size (max_style);
+  QVector<QCheckBox*> attrib_font (3 * max_style);
+  QVector<color_picker*> color (max_style);
   int default_size = 10;
   QFont default_font = QFont ();
   for (int i = 0; i < max_style; i++)  // create dialog elements for all styles
     {
       QString actual_name = lexer->description (styles[i]);
       QFont   actual_font = lexer->font (styles[i]);
       description[i] = new QLabel (actual_name);
       description[i]->setWordWrap (true);
@@ -218,35 +219,35 @@ settings_dialog::read_lexer_settings (Qs
         {
           select_font[i]->setCurrentFont (actual_font);
           if (actual_font.family () == default_font.family ())
             select_font[i]->setEditText (lexer->description (0));
           font_size[i]->setRange (-4,4);
           font_size[i]->setValue (actual_font.pointSize ()-default_size);
           font_size[i]->setToolTip ("Difference to the defalt size");
         }
-      attrib_font[0][i] = new QCheckBox (tr("b"));
-      attrib_font[1][i] = new QCheckBox (tr("i"));
-      attrib_font[2][i] = new QCheckBox (tr("u"));
-      attrib_font[0][i]->setChecked(Qt::Checked && actual_font.bold ());
-      attrib_font[0][i]->setObjectName (actual_name+"_bold");
-      attrib_font[1][i]->setChecked(Qt::Checked && actual_font.italic ());
-      attrib_font[1][i]->setObjectName (actual_name+"_italic");
-      attrib_font[2][i]->setChecked(Qt::Checked && actual_font.underline ());
-      attrib_font[2][i]->setObjectName (actual_name+"_underline");
+      attrib_font[0+3*i] = new QCheckBox (tr("b"));
+      attrib_font[1+3*i] = new QCheckBox (tr("i"));
+      attrib_font[2+3*i] = new QCheckBox (tr("u"));
+      attrib_font[0+3*i]->setChecked(Qt::Checked && actual_font.bold ());
+      attrib_font[0+3*i]->setObjectName (actual_name+"_bold");
+      attrib_font[1+3*i]->setChecked(Qt::Checked && actual_font.italic ());
+      attrib_font[1+3*i]->setObjectName (actual_name+"_italic");
+      attrib_font[2+3*i]->setChecked(Qt::Checked && actual_font.underline ());
+      attrib_font[2+3*i]->setObjectName (actual_name+"_underline");
       color[i] = new color_picker (lexer->color (styles[i]));
       color[i]->setObjectName (actual_name+"_color");
       int column = 1;
-      style_grid->addWidget (description[i],   i,column++);
-      style_grid->addWidget (select_font[i],   i,column++);
-      style_grid->addWidget (font_size[i],     i,column++);
-      style_grid->addWidget (attrib_font[0][i],i,column++);
-      style_grid->addWidget (attrib_font[1][i],i,column++);
-      style_grid->addWidget (attrib_font[2][i],i,column++);
-      style_grid->addWidget (color[i],         i,column++);
+      style_grid->addWidget (description[i],     i, column++);
+      style_grid->addWidget (select_font[i],     i, column++);
+      style_grid->addWidget (font_size[i],       i, column++);
+      style_grid->addWidget (attrib_font[0+3*i], i, column++);
+      style_grid->addWidget (attrib_font[1+3*i], i, column++);
+      style_grid->addWidget (attrib_font[2+3*i], i, column++);
+      style_grid->addWidget (color[i],           i, column++);
     }
   // place grid with elements into the tab
   QScrollArea *scroll_area = new QScrollArea ();
   QWidget *scroll_area_contents = new QWidget ();
   scroll_area_contents->setObjectName (QString (lexer->language ())+"_styles");
   scroll_area_contents->setLayout (style_grid);
   scroll_area->setWidget (scroll_area_contents);
   ui->tabs_editor_styles->addTab (scroll_area,lexer->language ());
@@ -261,18 +262,18 @@ settings_dialog::read_workspace_colors (
 {
 
   QList<QColor> default_colors = resource_manager::storage_class_default_colors ();
   QStringList class_names = resource_manager::storage_class_names ();
   QString class_chars = resource_manager::storage_class_chars ();
   int nr_of_classes = class_chars.length ();
 
   QGridLayout *style_grid = new QGridLayout ();
-  QLabel *description[nr_of_classes];
-  color_picker *color[nr_of_classes];
+  QVector<QLabel*> description (nr_of_classes);
+  QVector<color_picker*> color (nr_of_classes);
 
   int column = 0;
   int row = 0;
   for (int i = 0; i < nr_of_classes; i++)
     {
       description[i] = new QLabel (class_names.at (i));
       description[i]->setAlignment (Qt::AlignRight);
       QVariant default_var = default_colors.at (i);
@@ -299,18 +300,18 @@ settings_dialog::read_terminal_colors (Q
 {
 
   QList<QColor> default_colors = resource_manager::terminal_default_colors ();
   QStringList class_names = resource_manager::terminal_color_names ();
   QString class_chars = resource_manager::terminal_color_chars ();
   int nr_of_classes = class_chars.length ();
 
   QGridLayout *style_grid = new QGridLayout ();
-  QLabel *description[nr_of_classes];
-  color_picker *color[nr_of_classes];
+  QVector<QLabel*> description (nr_of_classes);
+  QVector<color_picker*> color (nr_of_classes);
 
   int column = 0;
   int row = 0;
   for (int i = 0; i < nr_of_classes; i++)
     {
       description[i] = new QLabel (class_names.at (i));
       description[i]->setAlignment (Qt::AlignRight);
       QVariant default_var = default_colors.at (i);
