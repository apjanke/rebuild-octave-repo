# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1267791691 -3600
#      Fri Mar 05 13:21:31 2010 +0100
# Node ID f7cf1a53e1c5917bf432e2b3427af7c66bd5c79c
# Parent  180931276a52f3663a869937dcb9f8ae993ba034
support ID test for errors and warningsin test suites

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2010-03-05  Jaroslav Hajek  <highegg@gmail.com>
+
+	* testfun/test.m: Support catching warnings and errors by IDs.
+
 2010-03-05  Jaroslav Hajek  <highegg@gmail.com>
 
 	* general/accumdim.m: Optimize the summation case.
 
 2010-03-05  Jaroslav Hajek  <highegg@gmail.com>
 
 	* general/accumdim.m: New function.
 
diff --git a/scripts/testfun/test.m b/scripts/testfun/test.m
--- a/scripts/testfun/test.m
+++ b/scripts/testfun/test.m
@@ -368,58 +368,75 @@ function [__ret1, __ret2, __ret3, __ret4
       __code = __block;
       ## The code will be evaluated below as a test block.
       
 ### ERROR/WARNING
 
     elseif (strcmp (__type, "error") || strcmp(__type, "warning"))
       __istest = 1;
       __warning = strcmp (__type, "warning");
-      [__pattern, __code] = getpattern (__code);
+      [__pattern, __id, __code] = getpattern (__code);
+      if (__id)
+        __patstr = ["id=",__id];
+      else
+        __patstr = ["<",__pattern,">"];
+      endif
       try
       	eval (sprintf ("function __test__(%s)\n%s\nendfunction",
 		       __shared, __code));
       catch
       	__success = 0;
       	__msg = sprintf ("%stest failed: syntax error\n%s",
 			 __signal_fail, __error_text__);
       end_try_catch
       
       if (__success)
         __success = 0;
 	__warnstate = warning ("query", "quiet");
 	warning ("on", "quiet");
       	try
  	  eval (sprintf ("__test__(%s);", __shared));
           if (! __warning)
-       	    __msg = sprintf ("%sexpected <%s> but got no error\n",
- 			     __signal_fail, __pattern);
+       	    __msg = sprintf ("%sexpected %s but got no error\n",
+ 			     __signal_fail, __patstr);
 	  else
-	    __err = trimerr (lastwarn, "warning");
+            if (! isempty (__id))
+              [~, __err] = lastwarn;
+              __mismatch = ! strcmp (__err, __id);
+            else
+              __err = trimerr (lastwarn, "warning");
+              __mismatch = isempty (regexp (__err, __pattern, "once"));
+            endif
             warning (__warnstate.state, "quiet");
             if (isempty (__err))
-              __msg = sprintf ("%sexpected <%s> but got no warning\n",
-			     __signal_fail, __pattern);
-            elseif (isempty (regexp (__err, __pattern, "once")))
-              __msg = sprintf ("%sexpected <%s> but got %s\n",
- 			       __signal_fail, __pattern, __err);
+              __msg = sprintf ("%sexpected %s but got no warning\n",
+			     __signal_fail, __patstr);
+            elseif (__mismatch)
+              __msg = sprintf ("%sexpected %s but got %s\n",
+ 			       __signal_fail, __patstr, __err);
             else
               __success = 1;
             endif
 	  endif
 
       	catch
-	  __err = trimerr (lasterr, "error");
+          if (! isempty (__id))
+            [~, __err] = lasterr;
+            __mismatch = ! strcmp (__err, __id);
+          else
+            __err = trimerr (lasterr, "error");
+            __mismatch = isempty (regexp (__err, __pattern, "once"));
+          endif
           warning (__warnstate.state, "quiet");
           if (__warning)
-            __msg = sprintf ("%sexpected warning <%s> but got error %s\n",
-			     __signal_fail, __pattern, __err);
-	  elseif (isempty (regexp (__err, __pattern, "once")))
-            __msg = sprintf ("%sexpected <%s> but got %s\n",
-			     __signal_fail, __pattern, __err);
+            __msg = sprintf ("%sexpected warning %s but got error %s\n",
+			     __signal_fail, __patstr, __err);
+	  elseif (__mismatch)
+            __msg = sprintf ("%sexpected %s but got %s\n",
+			     __signal_fail, __patstr, __err);
           else
 	    __success = 1;
           endif
       	end_try_catch
       	clear __test__;
       endif
       ## Code already processed.
       __code = "";
@@ -571,26 +588,30 @@ function pos = function_name (def)
   endif
   left++;
 
   ## Return the end points of the name.
   pos = [left, right];
 endfunction
 
 ## Strip <pattern> from '<pattern> code'.
-function [pattern, rest] = getpattern (str)
+## Also handles 'id=ID code'
+function [pattern, id, rest] = getpattern (str)
   pattern = ".";
+  id = [];
   rest = str; 
   str = trimleft (str);
   if (! isempty (str) && str(1) == "<")
     close = index (str, ">");
     if (close)
       pattern = str(2:close-1);
       rest = str(close+1:end);
     endif
+  elseif (strncmp (str, "id=", 3))
+    [id, rest] = strtok (str(4:end));
   endif
 endfunction
 
 ## Strip '.*prefix:' from '.*prefix: msg\n' and strip trailing blanks.
 function msg = trimerr (msg, prefix)
   idx = index (msg, cstrcat (prefix, ":"));
   if (idx > 0)
     msg(1:idx+length(prefix)) = [];
