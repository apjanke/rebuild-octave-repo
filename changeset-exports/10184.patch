# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1264105636 -3600
#      Thu Jan 21 21:27:16 2010 +0100
# Node ID b39bd23019eb3420f5c3a00cea02a616cd906b77
# Parent  bb97e11ce1bac41e4069bf01bad9ca5daacb8d23
partially revert a668fbd32e34

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2010-01-21  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-builtin.cc (octave_builtin::do_multi_index_op): Partially undo
+	previous change.
+	* ov-type-conv.h (octave_type_conv_body): Undo previous change.
+	* ov-dld-fcn.cc (octave_dld_function::do_multi_index_op): Ditto.
+
 2010-01-21  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/getrusage.cc, DLD-FUNCTIONS/getgrent.cc,
 	DLD-FUNCTIONS/getpwent.cc, DLD-FUNCTIONS/regexp.cc, lex.ll,
 	cutils.c, data.cc, defaults.cc, dirfns.cc, file-io.cc, help.cc,
 	input.cc, oct-hist.cc, oct-procbuf.cc, oct-procbuf.h, octave.cc,
 	pager.h, procstream.h, sighandlers.cc, toplev.cc, syscalls.cc,
 	sysdep.cc, utils.cc: Assume sys/types.h and unistd.h are present
diff --git a/src/ov-builtin.cc b/src/ov-builtin.cc
--- a/src/ov-builtin.cc
+++ b/src/ov-builtin.cc
@@ -100,18 +100,19 @@ octave_builtin::do_multi_index_op (int n
 
       octave_call_stack::push (this);
 
       frame.add_fcn (octave_call_stack::pop);
 
       try
 	{
 	  retval = (*f) (args, nargout);
-          // We don't check for null values here, builtins should handle that
-          // possibility themselves.
+          // Do not allow null values to be returned from functions.
+          // FIXME -- perhaps true builtins should be allowed?
+          retval.make_storable_values ();
           // Fix the case of a single undefined value.
           // This happens when a compiled function uses
           //   octave_value retval;
           // instead of
           //   octave_value_list retval;
           // the idiom is very common, so we solve that here.
           if (retval.length () == 1 && retval.xelem (0).is_undefined ())
             retval.clear ();
diff --git a/src/ov-dld-fcn.cc b/src/ov-dld-fcn.cc
--- a/src/ov-dld-fcn.cc
+++ b/src/ov-dld-fcn.cc
@@ -84,19 +84,8 @@ octave_dld_function::time_parsed (void) 
 //       of objects to point to an invalid code segment.
 
 octave_dld_function*
 octave_dld_function::create (octave_builtin::fcn ff, const octave_shlib& shl,
 			     const std::string& nm, const std::string& ds)
 {
   return new octave_dld_function (ff, shl, nm, ds);
 }
-
-octave_value_list
-octave_dld_function::do_multi_index_op (int nargout, const octave_value_list& args)
-{
-  octave_value_list retval = this->octave_builtin::do_multi_index_op (nargout, args);
-  // Guard against the possibility of null values leaking from user DLD functions.
-  // FIXME: is this needed?
-  retval.make_storable_values ();
-
-  return retval;
-}
diff --git a/src/ov-dld-fcn.h b/src/ov-dld-fcn.h
--- a/src/ov-dld-fcn.h
+++ b/src/ov-dld-fcn.h
@@ -70,19 +70,16 @@ public:
   static octave_dld_function* create (octave_builtin::fcn ff,
       const octave_shlib& shl,
       const std::string& nm = std::string (),
       const std::string& ds = std::string ());
 
   octave_shlib get_shlib (void) const
     { return sh_lib; }
 
-  octave_value_list
-  do_multi_index_op (int nargout, const octave_value_list& args);
-
 private:
 
   octave_shlib sh_lib;
 
   // The time the file was last checked to see if it needs to be
   // parsed again.
   mutable octave_time t_checked;
 
diff --git a/src/ov-type-conv.h b/src/ov-type-conv.h
--- a/src/ov-type-conv.h
+++ b/src/ov-type-conv.h
@@ -27,17 +27,17 @@ static
 octave_value
 octave_type_conv_body (const octave_value &arg, const std::string& name, int t_result)
 {
   int t_arg = arg.type_id ();
   octave_value retval;
 
   if (t_arg == t_result || arg.class_name () == name)
     {
-      retval = arg.storable_value ();
+      retval = arg;
     }
   else
     {
       octave_base_value::type_conv_fcn cf1
         = octave_value_typeinfo::lookup_type_conv_op (t_arg, t_result);
        
       if (cf1)
         {
