# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1466085769 14400
#      Thu Jun 16 10:02:49 2016 -0400
# Node ID 24215a16f3b21ece1bae8b1b0157a2d83eb811d1
# Parent  a53f46577e391932cbaab63a5e54a3f8c38d4c20
hide dirent.h header

* liboctave/wrappers/dirent-wrappers.c,
liboctave/wrappers/dirent-wrappers.h: New files.
* liboctave/wrappers/module.mk: Update.

* dir-ops.cc, dir-ops.h: Use new wrapper functions.
(dir_entry::close): Return status.
(dir_entry::max_name_length): New function.

* kpse.cc: Use octave::sys::dir_entry::max_name_length function
instead of NAME_MAX macro.

diff --git a/liboctave/system/dir-ops.cc b/liboctave/system/dir-ops.cc
--- a/liboctave/system/dir-ops.cc
+++ b/liboctave/system/dir-ops.cc
@@ -26,82 +26,80 @@ along with Octave; see the file COPYING.
 
 #include <cerrno>
 #include <cstdlib>
 #include <cstring>
 
 #include <list>
 #include <string>
 
-#include <dirent.h>
+#include "dirent-wrappers.h"
 
 #include "dir-ops.h"
 #include "file-ops.h"
 #include "lo-error.h"
 #include "lo-sysdep.h"
 #include "str-vec.h"
 
 namespace octave
 {
   namespace sys
   {
     bool
     dir_entry::open (const std::string& n)
     {
-      fail = true;
-
       if (! n.empty ())
         name = n;
 
       if (! name.empty ())
         {
           close ();
 
           std::string fullname = octave::sys::file_ops::tilde_expand (name);
 
-          dir = static_cast<void *> (gnulib::opendir (fullname.c_str ()));
+          dir = octave_opendir_wrapper (fullname.c_str ());
 
-          if (dir)
-            fail = false;
-          else
+          if (! dir)
             errmsg = gnulib::strerror (errno);
         }
       else
         errmsg = "dir_entry::open: empty filename";
 
-      return ! fail;
+      return dir != 0;
     }
 
     string_vector
     dir_entry::read (void)
     {
       string_vector retval;
 
       if (ok ())
         {
           std::list<std::string> dirlist;
 
-          struct dirent *dir_ent;
+          char *fname;
 
-          while ((dir_ent = gnulib::readdir (static_cast<DIR *> (dir))))
-            {
-              if (dir_ent)
-                dirlist.push_back (dir_ent->d_name);
-              else
-                break;
-            }
+          while ((fname = octave_readdir_wrapper (dir)))
+            dirlist.push_back (fname);
 
           retval = string_vector (dirlist);
         }
 
       return retval;
     }
 
-    void
+    bool
     dir_entry::close (void)
     {
-      if (dir)
-        gnulib::closedir (static_cast<DIR *> (dir));
+      bool retval = (octave_closedir_wrapper (dir) == 0);
 
       dir = 0;
+
+      return retval;
+    }
+
+    unsigned int
+    dir_entry::max_name_length (void)
+    {
+      return octave_name_max_wrapper ();
     }
   }
 }
diff --git a/liboctave/system/dir-ops.h b/liboctave/system/dir-ops.h
--- a/liboctave/system/dir-ops.h
+++ b/liboctave/system/dir-ops.h
@@ -63,24 +63,26 @@ namespace octave
         }
 
       ~dir_entry (void) { close (); }
 
       bool open (const std::string& = "");
 
       string_vector read (void);
 
-      void close (void);
+      bool close (void);
 
       bool ok (void) const { return dir && ! fail; }
 
       operator bool () const { return ok (); }
 
       std::string error (void) const { return ok () ? "" : errmsg; }
 
+      static unsigned int max_name_length (void);
+
     private:
 
       // Name of the directory.
       std::string name;
 
       // A pointer to the contents of the directory.  We use void here to
       // avoid possible conflicts with the way some systems declare the
       // type DIR.
diff --git a/liboctave/util/kpse.cc b/liboctave/util/kpse.cc
--- a/liboctave/util/kpse.cc
+++ b/liboctave/util/kpse.cc
@@ -35,19 +35,17 @@ along with Octave; see the file COPYING.
 #include <cstdlib>
 #include <ctime>
 
 #include <map>
 #include <fstream>
 #include <iostream>
 #include <string>
 
-// Needed for NAME_MAX.
-#include <dirent.h>
-
+#include "dir-ops.h"
 #include "file-ops.h"
 #include "file-stat.h"
 #include "kpse.h"
 #include "oct-env.h"
 #include "oct-passwd.h"
 #include "pathsearch.h"
 #include "unistd-wrappers.h"
 
@@ -65,33 +63,16 @@ along with Octave; see the file COPYING.
 
 #define DIR_SEP_STRING octave::sys::file_ops::dir_sep_str ()
 #define IS_DIR_SEP(ch) octave::sys::file_ops::is_dir_sep (ch)
 
 #define ENV_SEP octave::directory_path::path_sep_char ()
 #define ENV_SEP_STRING octave::directory_path::path_sep_str ()
 #define IS_ENV_SEP(ch) octave::directory_path::is_path_sep (ch)
 
-// Define NAME_MAX, the maximum length of a single component in a
-// filename.  No such limit may exist, or may vary depending on the
-// filesystem.  We don't use this value to create a character string, we
-// only truncate given file names to this length if attempts to get info
-// about the file fail with errno == ENAMETOOLONG.
-
-// Most likely the system will truncate filenames if it is not POSIX,
-// and so we can use the BSD value here.
-
-#if ! defined (_POSIX_NAME_MAX)
-#  define _POSIX_NAME_MAX 255
-#endif
-
-#if ! defined (NAME_MAX)
-#  define NAME_MAX _POSIX_NAME_MAX
-#endif
-
 // If NO_DEBUG is defined (not recommended), skip all this.
 #if ! defined (NO_DEBUG)
 
 // OK, we'll have tracing support.
 #  define KPSE_DEBUG
 
 // Test if a bit is on.
 #  define KPSE_DEBUG_P(bit) (kpse_debug & (1 << (bit)))
@@ -159,17 +140,17 @@ kpse_truncate_filename (const std::strin
 
   for (size_t i = 0; i < len; i++)
     {
       if (IS_DIR_SEP (name[i]) || IS_DEVICE_SEP (name[i]))
         {
           /* At a directory delimiter, reset component length.  */
           c_len = 0;
         }
-      else if (c_len > NAME_MAX)
+      else if (c_len > dir_entry::max_name_length ())
         {
           /* If past the max for a component, ignore this character.  */
           continue;
         }
 
       /* Copy this character.  */
       ret[ret_len++] = name[i];
       c_len++;
diff --git a/liboctave/wrappers/dirent-wrappers.c b/liboctave/wrappers/dirent-wrappers.c
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/dirent-wrappers.c
@@ -0,0 +1,83 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+// These functions may be provided by gnulib.  We don't include gnulib
+// headers directly in Octave's C++ source files to avoid problems that
+// may be caused by the way that gnulib overrides standard library
+// functions.
+
+#if defined (HAVE_CONFIG_H)
+#  include "config.h"
+#endif
+
+#include <dirent.h>
+
+#include "dirent-wrappers.h"
+
+void *
+octave_opendir_wrapper (const char *dname)
+{
+  return opendir (dname);
+}
+
+char *
+octave_readdir_wrapper (void *dir)
+{
+  struct dirent *d_ent = readdir ((DIR *) dir);
+
+  return d_ent ? d_ent->d_name : 0;
+}
+
+void
+octave_rewinddir_wrapper (void *dir)
+{
+  rewinddir ((DIR *) dir);
+}
+  
+int
+octave_closedir_wrapper (void *dir)
+{
+  return closedir ((DIR *) dir);
+}
+
+// Define NAME_MAX, the maximum length of a single component in a
+// filename.  No such limit may exist, or may vary depending on the
+// filesystem.  This value should be avoided for creating character
+// strings and used only to truncate given file names to this length if
+// attempts to get info about the file fail with errno == ENAMETOOLONG.
+
+// Most likely the system will truncate filenames if it is not POSIX,
+// and so we can use the BSD value here.
+
+#if ! defined (_POSIX_NAME_MAX)
+#  define _POSIX_NAME_MAX 255
+#endif
+
+#if ! defined (NAME_MAX)
+#  define NAME_MAX _POSIX_NAME_MAX
+#endif
+
+unsigned int
+octave_name_max_wrapper (void)
+{
+  return NAME_MAX;
+}
diff --git a/liboctave/wrappers/dirent-wrappers.h b/liboctave/wrappers/dirent-wrappers.h
new file mode 100644
--- /dev/null
+++ b/liboctave/wrappers/dirent-wrappers.h
@@ -0,0 +1,48 @@
+/*
+
+Copyright (C) 2016 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, see
+<http://www.gnu.org/licenses/>.
+
+*/
+
+#if ! defined (octave_dirent_wrappers_h)
+#define octave_dirent_wrappers_h 1
+
+#if ! defined (__cplusplus)
+#  include <stdbool.h>
+#endif
+
+#if defined __cplusplus
+extern "C" {
+#endif
+
+extern void *octave_opendir_wrapper (const char *dname);
+
+extern char *octave_readdir_wrapper (void *dir);
+
+extern void octave_rewinddir_wrapper (void *dir);
+  
+extern int octave_closedir_wrapper (void *dir);
+
+extern unsigned int octave_name_max_wrapper (void);
+
+#if defined __cplusplus
+}
+#endif
+
+#endif
diff --git a/liboctave/wrappers/module.mk b/liboctave/wrappers/module.mk
--- a/liboctave/wrappers/module.mk
+++ b/liboctave/wrappers/module.mk
@@ -1,12 +1,13 @@
 NOINSTALL_WRAPPERS_INC = \
   liboctave/wrappers/areadlink-wrapper.h \
   liboctave/wrappers/base64-wrappers.h \
   liboctave/wrappers/canonicalize-file-name-wrapper.h \
+  liboctave/wrappers/dirent-wrappers.h \
   liboctave/wrappers/fcntl-wrappers.h \
   liboctave/wrappers/filepos-wrappers.h \
   liboctave/wrappers/fpucw-wrapper.h \
   liboctave/wrappers/gen-tempname-wrapper.h \
   liboctave/wrappers/hash-wrappers.h \
   liboctave/wrappers/mkostemp-wrapper.h \
   liboctave/wrappers/nanosleep-wrapper.h \
   liboctave/wrappers/nproc-wrapper.h \
@@ -23,16 +24,17 @@ NOINSTALL_WRAPPERS_INC = \
   liboctave/wrappers/vasprintf-wrapper.h \
   liboctave/wrappers/wait-for-input.h \
   liboctave/wrappers/wait-wrappers.h
 
 WRAPPERS_SRC = \
   liboctave/wrappers/areadlink-wrapper.c \
   liboctave/wrappers/base64-wrappers.c \
   liboctave/wrappers/canonicalize-file-name-wrapper.c \
+  liboctave/wrappers/dirent-wrappers.c \
   liboctave/wrappers/fcntl-wrappers.c \
   liboctave/wrappers/filepos-wrappers.c \
   liboctave/wrappers/fpucw-wrapper.c \
   liboctave/wrappers/gen-tempname-wrapper.c \
   liboctave/wrappers/hash-wrappers.c \
   liboctave/wrappers/mkostemp-wrapper.c \
   liboctave/wrappers/nanosleep-wrapper.c \
   liboctave/wrappers/nproc-wrapper.c \
