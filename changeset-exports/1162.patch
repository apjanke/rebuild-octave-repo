# HG changeset patch
# User jwe
# Date 793906737 0
#      Mon Feb 27 17:38:57 1995 +0000
# Node ID c210c5a25a4839fc4e88599e290741a5e6a17a2d
# Parent  0326a802cd5cef7936278bc5ddcba4f19a860dff
[project @ 1995-02-27 17:36:16 by jwe]

diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1334,23 +1334,20 @@ maybe_convert_to_ans_assign (tree_expres
     }
   else if (expr->is_assignment_expression ()
 	   || expr->is_prefix_expression ())
     {
       return expr;
     }
   else
     {
-      symbol_record *sr = global_sym_tab->lookup ("ans", 1, 0);
+      static symbol_record *sr = global_sym_tab->lookup ("ans", 1, 0);
+      static tree_identifier ans_id (sr);
 
-      assert (sr);
-      
-      tree_identifier *ans = new tree_identifier (sr);
-
-      return new tree_simple_assignment_expression (ans, expr, 0, 1);
+      return new tree_simple_assignment_expression (&ans_id, expr, 1, 1);
     }
 }
 
 // Maybe print a warning if an assignment expression is used as the
 // test in a logical expression.
 
 static void
 maybe_warn_assign_as_truth_value (tree_expression *expr)
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -958,39 +958,21 @@ tree_identifier::eval (int print)
 	}
       else
 	eval_undefined_error ();
     }
 
   if (! error_state && retval.is_defined ())
     {
       if (maybe_do_ans_assign && ! object_to_eval->is_constant ())
-	{
-
-// XXX FIXME XXX -- need a procedure to do this, probably in
-// variables.cc, to isolate the code that does lookups...
-
-	  symbol_record *sr = global_sym_tab->lookup ("ans", 1, 0);
-
-	  assert (sr);
-
-	  tree_identifier *ans_id = new tree_identifier (sr);
-
-	  tree_constant *tmp = new tree_constant (retval);
-
-	  tree_simple_assignment_expression tmp_ass (ans_id, tmp, 0, 1);
-
-	  tmp_ass.eval (print);
-	}
-      else
-	{
-	  if (print)
-	    print_constant (retval, name ());
-	}
+	bind_ans (retval, print);
+      else if (print)
+	print_constant (retval, name ());
     }
+
   return retval;
 }
 
 Octave_object
 tree_identifier::eval (int print, int nargout, const Octave_object& args)
 {
   Octave_object retval;
 
@@ -1010,34 +992,17 @@ tree_identifier::eval (int print, int na
 
 // Don't count the output arguments that we create automatically.
 
 	      nargout = 0;
 
 	      retval = object_to_eval->eval (0, nargout, args);
 
 	      if (retval.length () > 0 && retval(0).is_defined ())
-		{
-
-// XXX FIXME XXX -- need a procedure to do this, probably in
-// variables.cc, to isolate the code that does lookups...
-
-		  symbol_record *sr = global_sym_tab->lookup ("ans", 1, 0);
-
-		  assert (sr);
-      
-		  tree_identifier *ans_id = new tree_identifier (sr);
-
-		  tree_constant *tmp = new tree_constant (retval(0));
-
-		  tree_simple_assignment_expression tmp_ass (ans_id,
-							     tmp, 0, 1);
-
-		  tmp_ass.eval (print);
-		}
+		bind_ans (retval(0), print);
 	    }
 	  else
 	    retval = object_to_eval->eval (print, nargout, args);
 	}
       else
 	eval_undefined_error ();
     }
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -1400,16 +1400,29 @@ bind_nargin_and_nargout (symbol_table *s
 
   sr = sym_tab->lookup ("nargout", 1, 0);
   sr->unprotect ();
   tmp = new tree_constant (nargout);
   sr->define (tmp);
 }
 #endif
 
+void
+bind_ans (const tree_constant& val, int print)
+{
+  static symbol_record *sr = global_sym_tab->lookup ("ans", 1, 0);
+  static tree_identifier ans_id (sr);
+
+  tree_constant *tmp = new tree_constant (val);
+
+  tree_simple_assignment_expression tmp_ass (&ans_id, tmp, 1, 1);
+
+  tmp_ass.eval (print);
+}
+
 // Give a global variable a definition.  This will insert the symbol
 // in the global table if necessary.
 
 // How is this different than install_builtin_variable?  Are both
 // functions needed?
 
 void
 bind_builtin_variable (const char *varname, tree_constant *val,
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -104,16 +104,18 @@ extern void install_builtin_variable_as_
 
 extern void alias_builtin (const char *alias, const char *name);
 
 #if 0
 extern void bind_nargin_and_nargout (symbol_table *sym_tab,
 				     int nargin, int nargout);
 #endif
 
+extern void bind_ans (const tree_constant& val, int print);
+
 extern void bind_builtin_variable (const char *, tree_constant *,
 				   int protect = 0, int eternal = 0,
 				   sv_Function f = (sv_Function) 0,
 				   const char *help = 0);
 
 extern void install_builtin_variables (void);
 
 extern char *maybe_add_default_load_path (const char *p);
