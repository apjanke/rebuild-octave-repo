# HG changeset patch
# User Ben Abbott <bpabbott@mac.com>
# Date 1334187293 14400
#      Wed Apr 11 19:34:53 2012 -0400
# Node ID 60ed9260399abf05f9704ff7381426c5126bc091
# Parent  bc4c574ab3b68188edb289c79c1e56ed48711374
Improve/correct documentation for splinefit.m

* splinefit.m: Clarify and correct documentation.
* doc/interpreter/poly.txi: ditto.

diff --git a/doc/interpreter/poly.txi b/doc/interpreter/poly.txi
--- a/doc/interpreter/poly.txi
+++ b/doc/interpreter/poly.txi
@@ -179,19 +179,20 @@ The result of which can be seen in @ref{
 @float Figure,fig:splinefit1
 @center @image{splinefit1,4in}
 @caption{Comparison of a fitting a piecewise polynomial with 41 breaks to one
 with 11 breaks. The fit with the large number of breaks exhibits a fast ripple
 that is not present in the underlying function.}
 @end float
 @end ifnotinfo
 
-The piece-wise polynomial fit provided by @code{splinefit} provides 
-continuous derivatives up to the @var{order} of the fit.  This can
-be demonstrated by the code
+The piece-wise polynomial fit, provided by @code{splinefit}, has
+continuous derivatives up to the @var{order}-1. For example, a cubic fit
+has continuous first and second derivatives.   This is demonstrated by
+the code
 
 @example
 @group
 ## Data (200 points)
 x = 2 * pi * rand (1, 200);
 y = sin (x) + sin (2 * x) + 0.1 * randn (size (x));
 ## Piecewise constant
 pp1 = splinefit (x, y, 8, "order", 0);
@@ -255,33 +256,33 @@ legend (@{"data", "no constraints", "per
 @end example
 
 @ifnotinfo
 @noindent
 The result of which can be seen in @ref{fig:splinefit3}.
 
 @float Figure,fig:splinefit3
 @center @image{splinefit3,4in}
-@caption{Comparison of piecewise cubic fits to a noisy periodic function with,
-and without, periodic boundary conditions.}
+@caption{Comparison of piecewise polynomial fits to a noisy periodic
+function with, and without, periodic boundary conditions.}
 @end float
 @end ifnotinfo
 
 More complex constraints may be added as well. For example, the code below
-illustrates a periodic fit with values that have been clamped end point values
-and a second periodic fit with hinged end point values.
+illustrates a periodic fit with values that have been clamped at the end points,
+and a second periodic fit which is hinged at the end points.
 
 @example
 @group
 ## Data (200 points)
 x = 2 * pi * rand (1, 200);
 y = sin (2 * x) + 0.1 * randn (size (x));
 ## Breaks
 breaks = linspace (0, 2 * pi, 10);
-## Clamped endpoints, y = y" = 0
+## Clamped endpoints, y = y' = 0
 xc = [0, 0, 2*pi, 2*pi];
 cc = [(eye (2)), (eye (2))];
 con = struct ("xc", xc, "cc", cc);
 pp1 = splinefit (x, y, breaks, "constraints", con);
 ## Hinged periodic endpoints, y = 0
 con = struct ("xc", 0);
 pp2 = splinefit (x, y, breaks, "constraints", con, "periodic", true);
 ## Plot
@@ -342,17 +343,18 @@ ylim auto
 @end example
 
 @ifnotinfo
 @noindent
 The result of which can be seen in @ref{fig:splinefit6}.
 
 @float Figure,fig:splinefit6
 @center @image{splinefit6,4in}
-@caption{Comparison of two different levels of robust fitting (@var{beta} = 0.25 and 0.75) to noisy data combined with outlying data. A standard fit is also included.}
+@caption{Comparison of two different levels of robust fitting (@var{beta} = 0.25 and 0.75) to noisy data combined with outlying data. A conventional fit, without
+robust fitting (@var{beta} = 0) is also included.}
 @end float
 @end ifnotinfo
 
 The function, @code{ppval}, evaluates the piecewise polynomials, created
 by @code{mkpp} or other means, and @code{unmkpp} returns detailed
 information about the piecewise polynomial.
 
 The following example shows how to combine two linear functions and a
diff --git a/scripts/polynomial/splinefit.m b/scripts/polynomial/splinefit.m
--- a/scripts/polynomial/splinefit.m
+++ b/scripts/polynomial/splinefit.m
@@ -22,19 +22,19 @@
 ## noisy data, @var{x} and @var{y}.  @var{x} is a vector, and @var{y}
 ## a vector or ND array.  If @var{y} is an ND array, then @var{x}(j)
 ## is matched to @var{y}(:,...,:,j).
 ##
 ## The fitted spline is returned as a piece-wise polynomial, @var{pp}, and
 ## may be evaluated using @code{ppval}.
 ##
 ## @deftypefnx {Function File} {@var{pp} =} splinefit (@var{x}, @var{y}, @var{p})
-## @var{p} is a positive integer defining the number of linearly spaced
-## intervals along @var{x}.  @var{p} is the number of intervalas and
-## @var{p}+1 is the number of breaks.
+## @var{p} is a positive integer defining the number of intervals along @var{x},
+## and @var{p}+1 is the number of breaks. The number of points in each interval
+## differ by no more than 1.
 ##
 ## @deftypefnx {Function File} {@var{pp} =} splinefit (@dots{}, "periodic", @var{periodic})
 ## @deftypefnx {Function File} {@var{pp} =} splinefit (@dots{}, "robust", @var{robust})
 ## @deftypefnx {Function File} {@var{pp} =} splinefit (@dots{}, "beta", @var{beta})
 ## @deftypefnx {Function File} {@var{pp} =} splinefit (@dots{}, "order", @var{order})
 ## @deftypefnx {Function File} {@var{pp} =} splinefit (@dots{}, "constraints", @var{constraints})
 ##
 ## The optional property @var{periodic} is a logical value which specifies
@@ -48,46 +48,46 @@
 ## Weights are computed from previous residuals.  The sensitivity of outlier
 ## identification is controlled by the property @var{beta}.  The value of
 ## @var{beta} is stricted to the range, 0 < @var{beta} < 1.  The default
 ## value is @var{beta} = 1/2.  Values close to 0 give all data equal
 ## weighting.  Increasing values of @var{beta} reduce the influence of
 ## outlying data.  Values close to unity may cause instability or rank
 ## deficiency.
 ##
-## @var{order} sets the order polynomials used to construct the spline.
+## The splines are constructed of polynomials with degree @var{order}.
 ## The default is a cubic, @var{order}=3.  A spline with P pieces has
 ## P+@var{order} degrees of freedom.  With periodic boundary conditions
 ## the degrees of freedom are reduced to P.
 ##
-## The optional property, @var{constraints}, is a structure specifying
+## The optional property, @var{constaints}, is a structure specifying
 ## linear constraints on the fit.  The structure has three fields, "xc",
 ## "yc", and "cc".
 ##
 ## @table @asis
 ## @item "xc"
-## x-locations of the constraints (vector) with a size identical to @var{x}.
+## Vector of the x-locations of the constraints.
 ## @item "yc"
-## Constraining values with a size identical to @var{y}.  The default
-## is an array of zeros.
+## Constaining values at the locations, @var{xc}.
+## The default is an array of zeros.
 ## @item "cc"
 ## Coefficients (matrix).  The default is an array of ones.  The number of
 ## rows is limited to the order of the piece-wise polynomials, @var{order}.
 ## @end table
 ##
 ## Constraints are linear combinations of derivatives of order 0 to
 ## @var{order}-1 according to
 ##
 ## @example
 ## @group
 ## @tex
-## $cc(1,j) \cdot y(x) + cc(2,j) \cdot y\prime(x) + ... = yc(:,\dots,:,j), \quad x = xc(j)$.
+## $cc(1,j) \cdot y(xc(j)) + cc(2,j) \cdot y\prime(xc(j)) + ... = yc(:,\dots,:,j)$.
 ## @end tex
 ## @ifnottex
-## cc(1,j) * y(x) + cc(2,j) * y'(x) + ... = yc(:,...,:,j),  x = xc(j).
+## cc(1,j) * y(xc(j)) + cc(2,j) * y'(xc(j)) + ... = yc(:,...,:,j).
 ## @end ifnottex
 ## @end group
 ## @end example
 ##
 ## @seealso{interp1, unmkpp, ppval, spline, pchip, ppder, ppint, ppjumps}
 ## @end deftypefn
 
 %!demo
@@ -125,17 +125,17 @@
 %! ylim auto
 
 %!demo
 %! % Noisy data
 %! x = linspace (0, 2*pi, 100);
 %! y = sin (x) + 0.1 * randn (size (x));
 %! % Breaks
 %! breaks = [0:5, 2*pi];
-%! % Constraints: y(0) = 0, y"(0) = 1 and y(3) + y"(3) = 0
+%! % Constraints: y(0) = 0, y'(0) = 1 and y(3) + y"(3) = 0
 %! xc = [0 0 3];
 %! yc = [0 1 0];
 %! cc = [1 0 1; 0 1 0; 0 0 1];
 %! con = struct ("xc", xc, "yc", yc, "cc", cc);
 %! % Fit a cubic spline with 8 pieces and constraints
 %! pp = splinefit (x, y, 8, "constraints", con);
 %! clf ()
 %! plot (x, y, "s", x, ppval (pp, x), "r", breaks, ppval (pp, breaks), "+r")
