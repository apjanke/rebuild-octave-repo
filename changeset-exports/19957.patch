# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1426688426 14400
#      Wed Mar 18 10:20:26 2015 -0400
# Node ID e78c0514523d3af17634d36f13a0551da4359bc4
# Parent  55c2d33e6773e22416278e8a98e0ccfba987eedf
restore strmatch function; backout changeset f9959972949a

diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -886,18 +886,18 @@ strcmp ("hello", c)
 @end example
 
 @noindent
 The following string functions support cell arrays of strings:
 @code{char}, @code{strvcat}, @code{strcat} (@pxref{Concatenating
 Strings}), @code{strcmp}, @code{strncmp}, @code{strcmpi},
 @code{strncmpi} (@pxref{Comparing Strings}), @code{str2double},
 @code{deblank}, @code{strtrim}, @code{strtrunc}, @code{strfind},
-@code{regexp}, @code{regexpi} (@pxref{Manipulating Strings}) and
-@code{str2double} (@pxref{String Conversions}).
+@code{strmatch}, , @code{regexp}, @code{regexpi} (@pxref{Manipulating 
+Strings}) and @code{str2double} (@pxref{String Conversions}).
 
 The function @code{iscellstr} can be used to test if an object is a
 cell array of strings.
 
 @DOCSTRING(iscellstr)
 
 @node Processing Data in Cell Arrays
 @subsection Processing Data in Cell Arrays
diff --git a/libinterp/corefcn/strfind.cc b/libinterp/corefcn/strfind.cc
--- a/libinterp/corefcn/strfind.cc
+++ b/libinterp/corefcn/strfind.cc
@@ -183,17 +183,17 @@ strfind (@{\"abababa\", \"bebebe\", \"ab
 \n\
              1   3   5\n\
 \n\
           [1,2] = [](1x0)\n\
           [1,3] = [](1x0)\n\
         @}\n\
 @end group\n\
 @end example\n\
-@seealso{findstr, regexp, regexpi, find}\n\
+@seealso{findstr, strmatch, regexp, regexpi, find}\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
   bool overlaps = true;
 
   if (nargin == 4 && args(2).is_string () && args(3).is_scalar_type ())
     {
diff --git a/scripts/strings/findstr.m b/scripts/strings/findstr.m
--- a/scripts/strings/findstr.m
+++ b/scripts/strings/findstr.m
@@ -30,17 +30,17 @@
 ##      @result{} [1, 3, 5];
 ## findstr ("abababa", "aba", 0)
 ##      @result{} [1, 5]
 ## @end group
 ## @end example
 ##
 ## @strong{Caution:} @code{findstr} is scheduled for deprecation.  Use
 ## @code{strfind} in all new code.
-## @seealso{strfind, strcmp, strncmp, strcmpi, strncmpi, find}
+## @seealso{strfind, strmatch, strcmp, strncmp, strcmpi, strncmpi, find}
 ## @end deftypefn
 
 ## Note that this implementation swaps the strings if second one is longer
 ## than the first, so try to put the longer one first.
 ##
 ## Author: Kurt Hornik <Kurt.Hornik@wu-wien.ac.at>
 ## Adapted-By: jwe
 
