# HG changeset patch
# User jwe
# Date 1065149566 0
#      Fri Oct 03 02:52:46 2003 +0000
# Node ID c0a23a13eea2ca11a61fb556feae53d2867e8980
# Parent  8952973c6837da2139bc1109ad6d47a21d6708ba
[project @ 2003-10-03 02:52:46 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2003-10-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* cmd-edit.cc (do_readline): Pass eof to octave_fgetl.
+	* lo-utils.cc (octave_fgets, octave_fgetl): New overloaded
+	versions with eof arg.
+
 2003-09-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Array.h (dimensions): Now public.
 	template <class LT, class RT>
 	(assign (Array<LT>&, const Array<RT>&, const LT&),
 	assign1 (Array<LT>&, const Array<RT>&, const LT&),
 	assign2 (Array<LT>&, const Array<RT>&, const LT&),
 	assignN (Array<LT>&, const Array<RT>&, const LT&),
diff --git a/liboctave/cmd-edit.cc b/liboctave/cmd-edit.cc
--- a/liboctave/cmd-edit.cc
+++ b/liboctave/cmd-edit.cc
@@ -476,22 +476,20 @@ private:
   FILE *input_stream;
 
   FILE *output_stream;
 };
 
 std::string
 default_command_editor::do_readline (const std::string& prompt, bool& eof)
 {
-  eof = false;
-
   fprintf (output_stream, prompt.c_str ());
   fflush (output_stream);
 
-  return octave_fgetl (input_stream);
+  return octave_fgetl (input_stream, eof);
 }
 
 void
 default_command_editor::do_set_input_stream (FILE *f)
 {
   input_stream = f;
 }
 
diff --git a/liboctave/lo-utils.cc b/liboctave/lo-utils.cc
--- a/liboctave/lo-utils.cc
+++ b/liboctave/lo-utils.cc
@@ -100,16 +100,25 @@ octave_putenv (const std::string& name, 
 
   if (putenv (new_item) < 0)
     (*current_liboctave_error_handler) ("putenv (%s) failed", new_item);
 }
 
 std::string
 octave_fgets (FILE *f)
 {
+  bool eof;
+  return octave_fgets (f, eof);
+}
+
+std::string
+octave_fgets (FILE *f, bool& eof)
+{
+  eof = false;
+
   std::string retval;
 
   int grow_size = 1024;
   int max_size = grow_size;
 
   char *buf = static_cast<char *> (malloc (max_size));
   char *bufptr = buf;
   int len = 0;
@@ -142,16 +151,18 @@ octave_fgets (FILE *f)
 	    }
 	  else
 	    retval = buf;
 	}
       else
 	{
 	  if (len == 0)
 	    {
+	      eof = true;
+
 	      free (buf);
 
 	      buf = 0;
 	    }
 
 	  break;
 	}
     }
@@ -161,17 +172,24 @@ octave_fgets (FILE *f)
     free (buf);
 
   return retval;
 }
 
 std::string
 octave_fgetl (FILE *f)
 {
-  std::string retval = octave_fgets (f);
+  bool eof;
+  return octave_fgetl (f, eof);
+}
+
+std::string
+octave_fgetl (FILE *f, bool& eof)
+{
+  std::string retval = octave_fgets (f, eof);
 
   size_t len = retval.length ();
 
   if (retval[len-1] == '\n')
     retval.resize (len-1);
 
   return retval;
 }
diff --git a/liboctave/lo-utils.h b/liboctave/lo-utils.h
--- a/liboctave/lo-utils.h
+++ b/liboctave/lo-utils.h
@@ -33,18 +33,20 @@ Software Foundation, 59 Temple Place - S
 extern int NINT (double x);
 extern double D_NINT (double x);
 
 extern char *strsave (const char *);
 
 extern void octave_putenv (const std::string&, const std::string&);
 
 extern std::string octave_fgets (std::FILE *);
+extern std::string octave_fgetl (std::FILE *);
 
-extern std::string octave_fgetl (std::FILE *);
+extern std::string octave_fgets (std::FILE *, bool& eof);
+extern std::string octave_fgetl (std::FILE *, bool& eof);
 
 extern "C" int octave_gethostname (char *, int);
 
 extern "C" void octave_qsort (void *base, size_t n, size_t size,
 			      int (*cmp) (const void *, const void *));
 
 extern "C" char *oct_strptime (const char *buf, const char *format,
 			       struct tm *tm);
