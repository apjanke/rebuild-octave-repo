# HG changeset patch
# User Rik <rik@octave.org>
# Date 1389734398 28800
#      Tue Jan 14 13:19:58 2014 -0800
# Node ID a0c9f5302eaef020d7cdecfc815612c488990b59
# Parent  00539b673cd4632860d0c603068f21489ad2d1c6
# Parent  8d98ebeceab40af514f8bdcd52c68128ec3ce806
maint: merge gui-release -> default.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -777,22 +777,22 @@ OCTAVE_CHECK_LIB(z, ZLIB,
 
 ### Also define HAVE_ZLIB if libz is found.
 if test $octave_cv_lib_z = yes; then
   AC_DEFINE(HAVE_ZLIB, 1, [Define to 1 if ZLIB is available.])
 fi
 
  ### Check for the LLVM library
 
-build_jit=yes
+build_jit=no
 AC_ARG_ENABLE([jit],
   [AS_HELP_STRING([--enable-jit],
     [(EXPERIMENTAL) enable JIT compiler])],
-  [if test "$enableval" = no; then
-     build_jit=no
+  [if test "$enableval" = yes; then
+     build_jit=yes
    fi],
   [])
 
 LLVM_CXXFLAGS=
 LLVM_CPPFLAGS=
 LLVM_LDFLAGS=
 LLVM_LIBS=
 
@@ -2550,19 +2550,19 @@ do
         [Define to 1 if Java is available and is at least version 1.5])
       break
     ;;
     mingw* | cygwin*)
       build_java=yes
       JAVA_LIBS=-ladvapi32
       if test $have_msvc = no; then
         if test -n "$JAVA_CPPFLAGS"; then
-          JAVA_CPPFLAGS="-I${JAVA_CPPFLAGS}/include -I${JAVA_CPPFLAGS}/include/win32"
+          JAVA_CPPFLAGS="-I\"${JAVA_CPPFLAGS}\" -I\"${JAVA_CPPFLAGS}/win32\""
         else
-          JAVA_CPPFLAGS="-I${JAVA_HOME}/include -I${JAVA_HOME}/include/win32"
+          JAVA_CPPFLAGS="-I\"${JAVA_HOME}/include\" -I\"${JAVA_HOME}/include/win32\""
         fi
         LDFLAGS="$LDFLAGS -Wl,--export-all-symbols"
       fi
       AC_DEFINE(HAVE_JAVA, 1,
         [Define to 1 if Java is available and is at least version 1.5])
       break
     ;;
   esac
@@ -2650,17 +2650,17 @@ do
         JAVA_CPPFLAGS="-I${JAVA_CPPFLAGS}"
       else
         JAVA_CPPFLAGS="-I${JAVA_HOME}/include -I/System/Library/Frameworks/JavaVM.framework/Home/include -I/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Headers -I/System/Library/Frameworks/JavaVM.framework/Versions/Current/Headers"
       fi
       JAVA_LIBS="-framework JavaVM"
     ;;
     *)
       if test -n "$JAVA_CPPFLAGS"; then
-        JAVA_CPPFLAGS="-I${JAVA_CPPFLAGS}/include -I${JAVA_CPPFLAGS}/include/linux"
+        JAVA_CPPFLAGS="-I${JAVA_CPPFLAGS} -I${JAVA_CPPFLAGS}/linux"
       else
         JAVA_CPPFLAGS="-I${JAVA_HOME}/include -I${JAVA_HOME}/include/linux"
       fi
     ;;
   esac
 
   ## Verify jni.h include file exists.
   JNI_PATH=`echo $JAVA_CPPFLAGS | $SED -e 's/-I//g'`
diff --git a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
--- a/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
+++ b/libgui/qterminal/libqterminal/win32/QWinTerminalImpl.cpp
@@ -570,16 +570,19 @@ QColor QConsolePrivate::selectionColor (
 QColor QConsolePrivate::cursorColor (void) const
 {
   return m_cursorColor.isValid () ? m_cursorColor : foregroundColor ();
 }
 
 void QConsolePrivate::setBackgroundColor (const QColor& color)
 {
   m_colors[15] = color;
+
+  QPalette palette (color);
+  m_consoleView->setPalette (palette);
 }
 
 void QConsolePrivate::setForegroundColor (const QColor& color)
 {
   m_colors[0] = color;
 }
 
 void QConsolePrivate::setSelectionColor (const QColor& color)
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -1163,39 +1163,65 @@ file_editor_tab::save_file_as (bool remo
     {
       connect (fileDialog, SIGNAL (fileSelected (const QString&)),
                this, SLOT (handle_save_file_as_answer (const QString&)));
     }
 
   show_dialog (fileDialog);
 }
 
+bool
+file_editor_tab::save_file_check_spaces (QString file_name)
+{
+  QFileInfo file = QFileInfo(file_name);
+
+  if (file.suffix () == "m" && file.baseName ().contains (' '))
+    {
+      int ans = QMessageBox::question (0, tr ("Octave Editor"),
+         tr ("It is not advisable to save an Octave script\n"
+              "in a file with a name containing spaces.\n\n"
+              "Do you wnat to chose another name?"),
+          QMessageBox::Yes | QMessageBox::No, QMessageBox::Yes);
+
+      if (ans == QMessageBox::Yes)
+        return true;
+    }
+
+  return false;
+}
+
 void
 file_editor_tab::handle_save_file_as_answer (const QString& saveFileName)
 {
   if (saveFileName == _file_name)
     {
       // same name as actual file, save it as "save" would do
       save_file (saveFileName);
     }
   else
     {
       // Have editor check for conflict, do not delete tab after save.
-      emit editor_check_conflict_save (saveFileName, false);
+      if (save_file_check_spaces (saveFileName))
+        save_file_as (false);
+      else
+        emit editor_check_conflict_save (saveFileName, false);
     }
 }
 
 void
 file_editor_tab::handle_save_file_as_answer_close (const QString& saveFileName)
 {
   // saveFileName == _file_name can not happen, because we only can get here
   // when we close a tab and _file_name is not a valid file name yet
 
   // Have editor check for conflict, delete tab after save.
-  emit editor_check_conflict_save (saveFileName, true);
+  if (save_file_check_spaces (saveFileName))
+    save_file_as (true);
+  else
+    emit editor_check_conflict_save (saveFileName, true);
 }
 
 void
 file_editor_tab::handle_save_file_as_answer_cancel ()
 {
   // User canceled, allow editing again.
   _edit_area->setReadOnly (false);
 }
diff --git a/libgui/src/m-editor/file-editor-tab.h b/libgui/src/m-editor/file-editor-tab.h
--- a/libgui/src/m-editor/file-editor-tab.h
+++ b/libgui/src/m-editor/file-editor-tab.h
@@ -171,16 +171,17 @@ private:
     std::string file;
     std::string dir;
     std::string function_name;
   };
 
   bool valid_file_name (const QString& file=QString ());
   void save_file (const QString& saveFileName, bool remove_on_success = false);
   void save_file_as (bool remove_on_success = false);
+  bool save_file_check_spaces (QString file_name);
 
   void update_lexer ();
   void request_add_breakpoint (int line);
   void request_remove_breakpoint (int line);
 
   void show_dialog (QDialog *dlg);
   int check_file_modified ();
   void do_comment_selected_text (bool comment);
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -257,16 +257,38 @@ main_window::execute_command_in_terminal
   queue_command (command);
   if (focus_console_after_command ())
     focus_command_window ();
 }
 
 void
 main_window::run_file_in_terminal (const QFileInfo& info)
 {
+  QString file_name = info.canonicalFilePath ();
+  QString command = "run \""+file_name+"\"";
+
+  QString function_name = info.fileName ();
+  function_name.chop (info.suffix ().length () + 1);
+
+  if (function_name.contains (' '))
+    {
+      int ans = QMessageBox::question (0, tr ("Octave"),
+         tr ("The file %1\n"
+             "contains spaces and can not be executed.\n\n"
+             "Do you want to execute\n%2\n"
+             "instead?").
+          arg (file_name).arg (command),
+          QMessageBox::Yes | QMessageBox::No, QMessageBox::Yes);
+
+      if (ans == QMessageBox::Yes)
+        execute_command_in_terminal (command);
+
+      return;
+    }
+
   octave_link::post_event (this, &main_window::run_file_callback, info);
   if (focus_console_after_command ())
     focus_command_window ();
 }
 
 void
 main_window::run_file_callback (const QFileInfo& info)
 {
diff --git a/libinterp/corefcn/jit-typeinfo.cc b/libinterp/corefcn/jit-typeinfo.cc
--- a/libinterp/corefcn/jit-typeinfo.cc
+++ b/libinterp/corefcn/jit-typeinfo.cc
@@ -867,17 +867,17 @@ jit_operation::overload (const std::vect
 
   return ret;
 }
 
 Array<octave_idx_type>
 jit_operation::to_idx (const std::vector<jit_type*>& types) const
 {
   octave_idx_type numel = types.size ();
-  numel = std::max (2, numel);
+  numel = std::max (numel, static_cast<octave_idx_type>(2));
 
   Array<octave_idx_type> idx (dim_vector (1, numel));
   for (octave_idx_type i = 0; i < static_cast<octave_idx_type> (types.size ());
        ++i)
     idx(i) = types[i]->type_id ();
 
   if (types.size () == 0)
     idx(0) = idx(1) = 0;
@@ -1604,32 +1604,28 @@ jit_typeinfo::jit_typeinfo (llvm::Module
                                                index);
 
   fn = create_internal ("()subsref", scalar, matrix, scalar);
   fn.mark_can_error ();
 
   body = fn.new_block ();
   builder.SetInsertPoint (body);
   {
-    llvm::Value *one = llvm::ConstantInt::get (index_t, 1);
-    llvm::Value *ione;
-    if (index_t == int_t)
-      ione = one;
-    else
-      ione = llvm::ConstantInt::get (int_t, 1);
+    llvm::Value *one_idx = llvm::ConstantInt::get (index_t, 1);
+    llvm::Value *one_int = llvm::ConstantInt::get (int_t, 1);
 
     llvm::Value *undef = llvm::UndefValue::get (scalar_t);
     llvm::Value *mat = fn.argument (builder, 0);
     llvm::Value *idx = fn.argument (builder, 1);
 
     // convert index to scalar to integer, and check index >= 1
     llvm::Value *int_idx = builder.CreateFPToSI (idx, index_t);
     llvm::Value *check_idx = builder.CreateSIToFP (int_idx, scalar_t);
     llvm::Value *cond0 = builder.CreateFCmpUNE (idx, check_idx);
-    llvm::Value *cond1 = builder.CreateICmpSLT (int_idx, one);
+    llvm::Value *cond1 = builder.CreateICmpSLT (int_idx, one_idx);
     llvm::Value *cond = builder.CreateOr (cond0, cond1);
 
     llvm::BasicBlock *done = fn.new_block ("done");
     llvm::BasicBlock *conv_error = fn.new_block ("conv_error", done);
     llvm::BasicBlock *normal = fn.new_block ("normal", done);
     builder.CreateCondBr (cond, conv_error, normal);
 
     builder.SetInsertPoint (conv_error);
@@ -1642,17 +1638,17 @@ jit_typeinfo::jit_typeinfo (llvm::Module
     cond = builder.CreateICmpSGT (int_idx, len);
 
 
     llvm::BasicBlock *bounds_error = fn.new_block ("bounds_error", done);
     llvm::BasicBlock *success = fn.new_block ("success", done);
     builder.CreateCondBr (cond, bounds_error, success);
 
     builder.SetInsertPoint (bounds_error);
-    gindex_range.call (builder, ione, ione, int_idx, len);
+    gindex_range.call (builder, one_int, one_int, int_idx, len);
     builder.CreateBr (done);
 
     builder.SetInsertPoint (success);
     llvm::Value *data = builder.CreateExtractValue (mat,
                                                     llvm::ArrayRef<unsigned> (1));
     llvm::Value *gep = builder.CreateInBoundsGEP (data, int_idx);
     llvm::Value *ret = builder.CreateLoad (gep);
     builder.CreateBr (done);
@@ -1676,26 +1672,27 @@ jit_typeinfo::jit_typeinfo (llvm::Module
                        index, scalar);
 
   fn = create_internal ("octave_jit_paren_subsasgn", matrix, matrix, scalar,
                         scalar);
   fn.mark_can_error ();
   body = fn.new_block ();
   builder.SetInsertPoint (body);
   {
-    llvm::Value *one = llvm::ConstantInt::get (index_t, 1);
+    llvm::Value *one_idx = llvm::ConstantInt::get (index_t, 1);
+    llvm::Value *one_int = llvm::ConstantInt::get (int_t, 1);
 
     llvm::Value *mat = fn.argument (builder, 0);
     llvm::Value *idx = fn.argument (builder, 1);
     llvm::Value *value = fn.argument (builder, 2);
 
     llvm::Value *int_idx = builder.CreateFPToSI (idx, index_t);
     llvm::Value *check_idx = builder.CreateSIToFP (int_idx, scalar_t);
     llvm::Value *cond0 = builder.CreateFCmpUNE (idx, check_idx);
-    llvm::Value *cond1 = builder.CreateICmpSLT (int_idx, one);
+    llvm::Value *cond1 = builder.CreateICmpSLT (int_idx, one_idx);
     llvm::Value *cond = builder.CreateOr (cond0, cond1);
 
     llvm::BasicBlock *done = fn.new_block ("done");
 
     llvm::BasicBlock *conv_error = fn.new_block ("conv_error", done);
     llvm::BasicBlock *normal = fn.new_block ("normal", done);
     builder.CreateCondBr (cond, conv_error, normal);
     builder.SetInsertPoint (conv_error);
@@ -1703,17 +1700,17 @@ jit_typeinfo::jit_typeinfo (llvm::Module
     builder.CreateBr (done);
 
     builder.SetInsertPoint (normal);
     llvm::Value *len = builder.CreateExtractValue (mat, 2);
     cond0 = builder.CreateICmpSGT (int_idx, len);
 
     llvm::Value *rcount = builder.CreateExtractValue (mat, 0);
     rcount = builder.CreateLoad (rcount);
-    cond1 = builder.CreateICmpSGT (rcount, one);
+    cond1 = builder.CreateICmpSGT (rcount, one_int);
     cond = builder.CreateOr (cond0, cond1);
 
     llvm::BasicBlock *bounds_error = fn.new_block ("bounds_error", done);
     llvm::BasicBlock *success = fn.new_block ("success", done);
     builder.CreateCondBr (cond, bounds_error, success);
 
     // resize on out of bounds access
     builder.SetInsertPoint (bounds_error);
