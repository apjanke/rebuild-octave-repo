# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1248435832 14400
#      Fri Jul 24 07:43:52 2009 -0400
# Node ID 1fddcf65155981774b445d7ebcf68c2890710bf7
# Parent  cb0b21f34abce8b643f5b0227830766c2ecc5fd4
avoid complex -> real conversion when constructing arrays with []

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-07-24  John W. Eaton  <jwe@octave.org>
+
+	* pt-mat.cc (DO_SINGLE_TYPE_CONCAT_NO_MUTATE): New macro.
+	(tree_matrix::rvalue1): Use it to avoid complex -> real conversion.
+
 2009-07-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCIONS/cellfun.cc (Fcellfun): Avoid double error messages.
 
 2009-07-24  Jaroslav Hajek  <highegg@gmail.com>
 
 	* load-path.cc (load_path::do_any_class_method): New method.
 	* load-path.h (load_path::do_any_class_method): New method decl.
diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -36,16 +36,18 @@ along with Octave; see the file COPYING.
 #include "pt-bp.h"
 #include "pt-exp.h"
 #include "pt-mat.h"
 #include "pt-walk.h"
 #include "utils.h"
 #include "ov.h"
 #include "variables.h"
 
+#include "ov-cx-mat.h"
+#include "ov-flt-cx-mat.h"
 #include "ov-re-sparse.h"
 #include "ov-cx-sparse.h"
 
 // The character to fill with when creating string arrays.
 char Vstring_fill_char = ' ';
 
 // General matrices.  This list type is much more work to handle than
 // constant matrices, but it allows us to construct matrices from
@@ -761,22 +763,33 @@ maybe_warn_string_concat (bool all_dq_st
     } \
  while (0)
 
 #define DO_SINGLE_TYPE_CONCAT(TYPE, EXTRACTOR) \
   do \
     { \
       TYPE result (dv); \
  \
-      SINGLE_TYPE_CONCAT(TYPE, EXTRACTOR); \
+      SINGLE_TYPE_CONCAT (TYPE, EXTRACTOR); \
  \
       retval = result; \
     } \
   while (0)
 
+#define DO_SINGLE_TYPE_CONCAT_NO_MUTATE(TYPE, EXTRACTOR, OV_TYPE) \
+  do \
+    { \
+      TYPE result (dv); \
+ \
+      SINGLE_TYPE_CONCAT (TYPE, EXTRACTOR); \
+ \
+      retval = octave_value (new OV_TYPE (result)); \
+    } \
+  while (0)
+
 octave_value
 tree_matrix::rvalue1 (int)
 {
   octave_value retval = Matrix ();
 
   bool all_strings_p = false;
   bool all_sq_strings_p = false;
   bool all_dq_strings_p = false;
@@ -869,33 +882,38 @@ tree_matrix::rvalue1 (int)
 	}
       else if (result_type == "double")
 	{
 	  if (any_sparse_p)
 	    {	    
 	      if (all_real_p)
 		DO_SINGLE_TYPE_CONCAT (SparseMatrix, sparse_matrix_value);
 	      else
-		DO_SINGLE_TYPE_CONCAT (SparseComplexMatrix, sparse_complex_matrix_value);
+		DO_SINGLE_TYPE_CONCAT_NO_MUTATE (SparseComplexMatrix,
+						 sparse_complex_matrix_value,
+						 octave_sparse_complex_matrix);
 	    }
 	  else
 	    {
 	      if (all_real_p)
 		DO_SINGLE_TYPE_CONCAT (NDArray, array_value);
 	      else
-		DO_SINGLE_TYPE_CONCAT (ComplexNDArray, complex_array_value);
+		DO_SINGLE_TYPE_CONCAT_NO_MUTATE (ComplexNDArray,
+						 complex_array_value,
+						 octave_complex_matrix);
 	    }
 	}
       else if (result_type == "single")
 	{
 	  if (all_real_p)
 	    DO_SINGLE_TYPE_CONCAT (FloatNDArray, float_array_value);
 	  else
-	    DO_SINGLE_TYPE_CONCAT (FloatComplexNDArray, 
-				   float_complex_array_value);
+	    DO_SINGLE_TYPE_CONCAT_NO_MUTATE (FloatComplexNDArray,
+					     float_complex_array_value,
+					     octave_float_complex_matrix);
 	}
       else if (result_type == "char")
 	{
 	  char type = all_dq_strings_p ? '"' : '\'';
 
 	  maybe_warn_string_concat (all_dq_strings_p, all_sq_strings_p);
 
 	  charNDArray result (dv, Vstring_fill_char);
