# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546410293 28800
#      Tue Jan 01 22:24:53 2019 -0800
# Node ID ddf1cfd62a8614c63db54f876bd5dbe704e616b2
# Parent  661fe14264c6a6e5d7f2e5dceb335b84471a2cbb
# Parent  cd44edea6a31c1f15d50bacebcf68d1c9ac06f90
maint: merge stable to default.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -1,12 +1,15 @@
 Summary of important user-visible changes for version 6.0 (yyyy-mm-dd):
 ----------------------------------------------------------------------
 
  ** New functions added in 6.0:
+ ** Specifying legend position with a numeric argument is deprecated and
+    will be removed in Octave 7.0.  Use a string argument instead.
+
 
 
 
  ** Deprecated functions.
 
     The following functions have been deprecated in Octave 6.0 and will
     be removed from Octave 8 (or whatever version is the second major
     release after 6.0):
diff --git a/etc/NEWS.5 b/etc/NEWS.5
--- a/etc/NEWS.5
+++ b/etc/NEWS.5
@@ -159,16 +159,19 @@ Summary of important user-visible change
     for plots.  This device is only available with the gnuplot toolkit.
 
  ** Printing to EPS files now uses a tight bounding box ("-tight"
     argument to print) by default.  This makes more sense for EPS
     files which are normally embedded within other documents, and is
     Matlab compatible.  If necessary use the "-loose" option to
     reproduce figures as they appeared in previous versions of Octave.
 
+ ** Specifying legend position with a numeric argument is deprecated and
+    will be removed in Octave 7.0.  Use a string argument instead.
+
  ** It is now possible to use files and folders containing Unicode
     characters in Windows.
 
  ** The GUI requires Qt libraries.  The minimum Qt4 version supported is
     Qt4.8.  Qt5 of any version is preferred.
 
  ** The FFTW library is now required to perform FFT calculations.
     The FFTPACK sources have been removed from Octave.
diff --git a/libgui/src/m-editor/file-editor-tab.cc b/libgui/src/m-editor/file-editor-tab.cc
--- a/libgui/src/m-editor/file-editor-tab.cc
+++ b/libgui/src/m-editor/file-editor-tab.cc
@@ -2325,19 +2325,19 @@ namespace octave
     QString editor_text = _edit_area->text ();
     bool can_encode = codec->canEncode (editor_text);
 
     // We cannot rely on QTextCodec::canEncode because it uses the
     // ConverterState of convertFromUnicode which isn't updated by some
     // implementations.
     if (can_encode)
       {
-        std::u32string u32_str = editor_text.toStdU32String ();
+        QVector<uint> u32_str = editor_text.toUcs4 ();
         const uint32_t *src = reinterpret_cast<const uint32_t *>
-                              (u32_str.c_str ());
+                              (u32_str.data ());
 
         size_t length;
         char *res_str =
           octave_u32_conv_to_encoding_strict (_encoding.toStdString ().c_str (),
                                               src, u32_str.length (), &length);
         if (! res_str)
           {
             if (errno == EILSEQ)
diff --git a/libgui/src/octave-dock-widget.cc b/libgui/src/octave-dock-widget.cc
--- a/libgui/src/octave-dock-widget.cc
+++ b/libgui/src/octave-dock-widget.cc
@@ -53,18 +53,18 @@ namespace octave
       {
         if (buttonlist.at (0)->x () < buttonlist.at (1)->x ())
           {
             m_default_float_button = buttonlist.at (0);
             m_default_close_button = buttonlist.at (1);
           }
         else
           {
-            m_default_float_button = buttonlist.at (0);
-            m_default_close_button = buttonlist.at (1);
+            m_default_float_button = buttonlist.at (1);
+            m_default_close_button = buttonlist.at (0);
           }
       }
 
     // the custom (extra) title bar of the widget
     m_title_widget = new QWidget ();
 
     m_dock_action = new QAction
       (QIcon (":/actions/icons/widget-undock.png"), "", this);
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -96,17 +96,17 @@ If the optional argument @var{dim} is su
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   int dim = (nargin == 1 ? -1
-                         : args(1).int_value ("all: DIM must be an integer")-1);
+                         : args(1).xint_value ("all: DIM must be an integer")-1);
 
   if (dim < -1)
     error ("all: invalid dimension argument = %d", dim + 1);
 
   return ovl (args(0).all (dim));
 }
 
 /*
@@ -161,17 +161,17 @@ any (eye (2, 4), 2)
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   int dim = (nargin == 1 ? -1
-                         : args(1).int_value ("any: DIM must be an integer")-1);
+                         : args(1).xint_value ("any: DIM must be an integer")-1);
 
   if (dim < -1)
     error ("any: invalid dimension argument = %d", dim + 1);
 
   return ovl (args(0).any (dim));
 }
 
 /*
@@ -1130,25 +1130,25 @@ and @qcode{"double"}.
 
 #undef MAKE_INT_BRANCH
 
     case btyp_bool:
       if (arg.issparse ())
         {
           SparseMatrix cs = arg.sparse_matrix_value ().cumsum (dim);
           if (isnative)
-            retval = cs != 0.0;
+            retval = (cs != 0.0);
           else
             retval = cs;
         }
       else
         {
           NDArray cs = arg.array_value ().cumsum (dim);
           if (isnative)
-            retval = cs != 0.0;
+            retval = (cs != 0.0);
           else
             retval = cs;
         }
       break;
 
     default:
       err_wrong_type_arg ("cumsum", arg);
     }
diff --git a/libinterp/corefcn/dlmread.cc b/libinterp/corefcn/dlmread.cc
--- a/libinterp/corefcn/dlmread.cc
+++ b/libinterp/corefcn/dlmread.cc
@@ -473,17 +473,17 @@ such as text, are also replaced by the @
                     {
                       // Parsing failed, <Inf|NA|NaN><extra text>
                       j++;  // Leave data initialized to empty_value
                     }
                   else
                     {
                       double y = octave_read_double (tmp_stream);
 
-                      if (! iscmplx && y != 0.)
+                      if (! iscmplx && y != 0.0)
                         {
                           iscmplx = true;
                           cdata = ComplexMatrix (rdata);
                         }
 
                       if (iscmplx)
                         cdata(i,j++) = Complex (x, y);
                       else
diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -967,46 +967,44 @@ typedef void (*error_fun)(const char *, 
 extern octave_value_list Fsprintf (const octave_value_list&, int);
 
 static std::string
 handle_message (error_fun f, const char *id, const char *msg,
                 const octave_value_list& args, bool have_fmt)
 {
   std::string retval;
 
-  std::string tstr;
+  std::string tmpstr;
 
   if (args.length () > 0)
     {
       octave_value arg;
 
       if (have_fmt)
         {
           octave_value_list tmp = Fsprintf (args, 1);
           arg = tmp(0);
         }
       else
         arg = args(0);
 
       if (arg.is_defined ())
         {
-          if (arg.is_string ())
+          if (arg.isempty ())
+            return retval;
+          else if (arg.is_string ())
             {
-              tstr = arg.string_value ();
-              msg = tstr.c_str ();
-
-              if (! msg)
-                return retval;
+              tmpstr = arg.string_value ();  // 2-stage assignment required
+              msg = tmpstr.c_str ();         // in order to generate pointer  
+                                             // to valid memory.
             }
-          else if (arg.isempty ())
-            return retval;
         }
     }
 
-// Ugh.
+  // Ugh.
 
   size_t len = strlen (msg);
 
   if (len > 0)
     {
       if (msg[len - 1] == '\n')
         {
           if (len > 1)
diff --git a/libinterp/corefcn/find.cc b/libinterp/corefcn/find.cc
--- a/libinterp/corefcn/find.cc
+++ b/libinterp/corefcn/find.cc
@@ -100,17 +100,16 @@ find_nonzero_elem_idx (const Sparse<T>& 
   octave_idx_type count;
 
   // Search for the range to search
   if (n_to_find < 0)
     {
       start_nc = 0;
       end_nc = nc;
       n_to_find = nz;
-      count = nz;
     }
   else if (direction > 0)
     {
       for (octave_idx_type j = 0; j < nc; j++)
         {
           octave_quit ();
 
           if (v.cidx (j) == 0 && v.cidx (j+1) != 0)
diff --git a/libinterp/corefcn/help.cc b/libinterp/corefcn/help.cc
--- a/libinterp/corefcn/help.cc
+++ b/libinterp/corefcn/help.cc
@@ -625,17 +625,17 @@ namespace octave
             while (file
                    && (c = file.get ()) != std::istream::traits_type::eof ()
                    && c != '\n' && c != '\r')
               ; // skip text
 
             // skip newline characters
             while (file
                    && (c = file.get ()) != std::istream::traits_type::eof ()
-                   && c == '\n' && c == '\r')
+                   && (c == '\n' || c == '\r'))
               ; // skip text
 
             file.unget ();
 
             // Position of beginning of help text.
             std::streampos beg = file.tellg ();
 
             // Skip help text.
diff --git a/libinterp/corefcn/input.cc b/libinterp/corefcn/input.cc
--- a/libinterp/corefcn/input.cc
+++ b/libinterp/corefcn/input.cc
@@ -117,17 +117,17 @@ find_indexed_expression (const std::stri
   int paren_count = 0;
 
   int last = --pos;
 
   while (pos >= 0 && (line[pos] == ')' || line[pos] == '}'))
     {
       if (line[pos] == ')')
         paren_count++;
-      else if (line[pos] == '}')
+      else
         curly_count++;
 
       while (curly_count + paren_count > 0 && --pos >= 0)
         {
           if (line[pos] == ')')
             paren_count++;
           else if (line[pos] == '(')
             paren_count--;
@@ -631,19 +631,16 @@ namespace octave
 
     size_t len = input_buf.length ();
 
     octave_diary << input_buf;
 
     if (input_buf[len - 1] != '\n')
       octave_diary << "\n";
 
-    if (len < 1)
-      return read_as_string ? octave_value ("") : octave_value (Matrix ());
-
     if (read_as_string)
       {
         // FIXME: fix gnu_readline and octave_gets instead!
         if (input_buf.length () == 1 && input_buf[0] == '\n')
           retval(0) = "";
         else
           retval(0) = input_buf;
       }
@@ -1111,17 +1108,17 @@ namespace octave
     }
     else
     {
       // convert encoding to UTF-8 before returning string
       const char *src = src_str.c_str ();
       size_t srclen = src_str.length ();
 
       size_t length;
-      uint8_t *utf8_str = nullptr;
+      uint8_t *utf8_str;
 
       utf8_str = octave_u8_conv_from_encoding (encoding.c_str (), src, srclen,
                                                &length);
 
       if (! utf8_str)
         error ("file_reader::get_input: converting from codepage '%s' to UTF-8: %s",
                encoding.c_str (), std::strerror (errno));
 
@@ -1478,17 +1475,17 @@ for input.
 @seealso{add_input_event_hook}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
-  std::string hook_fcn_id = args(0).string_value ("remove_input_event_hook: argument not valid as a hook function name or id");
+  std::string hook_fcn_id = args(0).xstring_value ("remove_input_event_hook: argument not valid as a hook function name or id");
 
   bool warn = (nargin < 2);
 
   octave::input_system& input_sys = interp.get_input_system ();
 
   if (! input_sys.remove_input_event_hook (hook_fcn_id) && warn)
     warning ("remove_input_event_hook: %s not found in list",
              hook_fcn_id.c_str ());
diff --git a/libinterp/corefcn/matrix_type.cc b/libinterp/corefcn/matrix_type.cc
--- a/libinterp/corefcn/matrix_type.cc
+++ b/libinterp/corefcn/matrix_type.cc
@@ -261,17 +261,17 @@ LU@tie{}factorization.  Once the matrix 
           else if (str_typ == "unknown")
             mattyp.invalidate_type ();
           else
             error ("matrix_type: Unknown matrix type %s", str_typ.c_str ());
 
           if (nargin == 3
               && (str_typ == "upper" || str_typ == "lower"))
             {
-              const ColumnVector perm = args(2).vector_value ("matrix_type: Invalid permutation vector PERM");
+              const ColumnVector perm = args(2).xvector_value ("matrix_type: Invalid permutation vector PERM");
 
               octave_idx_type len = perm.numel ();
               dim_vector dv = args(0).dims ();
 
               if (len != dv(0))
                 error ("matrix_type: Invalid permutation vector PERM");
 
               OCTAVE_LOCAL_BUFFER (octave_idx_type, p, len);
@@ -398,17 +398,17 @@ LU@tie{}factorization.  Once the matrix 
             mattyp.mark_as_full ();
           else if (str_typ == "unknown")
             mattyp.invalidate_type ();
           else
             error ("matrix_type: Unknown matrix type %s", str_typ.c_str ());
 
           if (nargin == 3 && (str_typ == "upper" || str_typ == "lower"))
             {
-              const ColumnVector perm = args(2).vector_value ("matrix_type: Invalid permutation vector PERM");
+              const ColumnVector perm = args(2).xvector_value ("matrix_type: Invalid permutation vector PERM");
 
               octave_idx_type len = perm.numel ();
               dim_vector dv = args(0).dims ();
 
               if (len != dv(0))
                 error ("matrix_type: Invalid permutation vector PERM");
 
               OCTAVE_LOCAL_BUFFER (octave_idx_type, p, len);
diff --git a/libinterp/corefcn/ordschur.cc b/libinterp/corefcn/ordschur.cc
--- a/libinterp/corefcn/ordschur.cc
+++ b/libinterp/corefcn/ordschur.cc
@@ -72,17 +72,17 @@ is in the upper left corner, by doing:
 @end example
 
 @seealso{schur, ordeig}
 @end deftypefn */)
 {
   if (args.length () != 3)
     print_usage ();
 
-  const Array<octave_idx_type> sel_arg = args(2).octave_idx_type_vector_value ("ordschur: SELECT must be an array of integers");
+  const Array<octave_idx_type> sel_arg = args(2).xoctave_idx_type_vector_value ("ordschur: SELECT must be an array of integers");
 
   const octave_idx_type sel_n = sel_arg.numel ();
 
   const dim_vector dimU = args(0).dims ();
   const dim_vector dimS = args(1).dims ();
 
   if (sel_n != dimU(0))
     error ("ordschur: SELECT must have same length as the sides of U and S");
diff --git a/libinterp/corefcn/psi.cc b/libinterp/corefcn/psi.cc
--- a/libinterp/corefcn/psi.cc
+++ b/libinterp/corefcn/psi.cc
@@ -68,17 +68,17 @@ can have any value real or complex value
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
 
   const octave_value oct_z = (nargin == 1) ? args(0) : args(1);
-  const octave_idx_type k = (nargin == 1) ? 0 : args(0).idx_type_value ("psi: K must be an integer");
+  const octave_idx_type k = (nargin == 1) ? 0 : args(0).xidx_type_value ("psi: K must be an integer");
   if (k < 0)
     error ("psi: K must be non-negative");
 
   octave_value retval;
 
   if (k == 0)
     {
 #define FLOAT_BRANCH(T, A, M, E)                                \
@@ -217,15 +217,15 @@ can have any value real or complex value
 %!   assert (psi (n, z+1),
 %!           psi (n, z) + ((-1)^n) * factorial (n) * (z.^(-n-1)), 0.1);
 %! endfor
 
 ## Test input validation
 %!error psi ()
 %!error psi (1, 2, 3)
 %!error <Z must be> psi ("non numeric")
-%!error <conversion of 5.3 to int.* value failed> psi (5.3, 1)
+%!error <K must be an integer> psi ({5.3}, 1)
 %!error <K must be non-negative> psi (-5, 1)
 %!error <Z must be non-negative for polygamma> psi (5, -1)
 %!error <Z must be a floating point> psi (5, uint8 (-1))
 %!error <Z must be real value for polygamma> psi (5, 5i)
 
 */
diff --git a/libinterp/corefcn/quad.cc b/libinterp/corefcn/quad.cc
--- a/libinterp/corefcn/quad.cc
+++ b/libinterp/corefcn/quad.cc
@@ -339,17 +339,17 @@ variable by routines @code{dblquad} and 
       switch (nargin)
         {
         case 5:
           if (indefinite)
             error ("quad: singularities not allowed on infinite intervals");
 
           have_sing = true;
 
-          sing = args(4).vector_value ("quad: fifth argument SING must be a vector of singularities");
+          sing = args(4).xvector_value ("quad: fifth argument SING must be a vector of singularities");
           OCTAVE_FALLTHROUGH;
 
         case 4:
           tol = args(3).xvector_value ("quad: TOL must be a 1 or 2-element vector");
 
           switch (tol.numel ())
             {
             case 2:
diff --git a/libinterp/corefcn/rand.cc b/libinterp/corefcn/rand.cc
--- a/libinterp/corefcn/rand.cc
+++ b/libinterp/corefcn/rand.cc
@@ -172,18 +172,17 @@ do_rand (const octave_value_list& args, 
           {
             double dval = tmp.double_value ();
 
             if (octave::math::isnan (dval))
               error ("%s: NaN is invalid matrix dimension", fcn);
 
             dims.resize (2);
 
-            dims(0) = octave::math::nint_big (tmp.double_value ());
-            dims(1) = octave::math::nint_big (tmp.double_value ());
+            dims(0) = dims(1) = octave::math::nint_big (dval);
 
             goto gen_matrix;
           }
         else if (tmp.is_range ())
           {
             Range r = tmp.range_value ();
 
             if (! r.all_elements_are_ints ())
diff --git a/libinterp/dldfcn/__delaunayn__.cc b/libinterp/dldfcn/__delaunayn__.cc
--- a/libinterp/dldfcn/__delaunayn__.cc
+++ b/libinterp/dldfcn/__delaunayn__.cc
@@ -199,36 +199,33 @@ Undocumented internal function.
           if (! facet->upperdelaunay)
             nf++;
 
           // Double check.  Non-simplicial facets will cause segfault below
           if (! facet->simplicial)
             error ("__delaunayn__: Qhull returned non-simplicial facets -- try delaunayn with different options");
         }
 
-      if (! exitcode)
-        {
-          Matrix simpl (nf, dim+1);
+      Matrix simpl (nf, dim+1);
 
-          FORALLfacets
+      FORALLfacets
+        {
+          if (! facet->upperdelaunay)
             {
-              if (! facet->upperdelaunay)
-                {
-                  octave_idx_type j = 0;
+              octave_idx_type j = 0;
 
-                  FOREACHvertex_ (facet->vertices)
-                    {
-                      simpl(i, j++) = 1 + qh_pointid(vertex->point);
-                    }
-                  i++;
+              FOREACHvertex_ (facet->vertices)
+                {
+                  simpl(i, j++) = 1 + qh_pointid(vertex->point);
                 }
+              i++;
             }
+        }
 
-          retval(0) = simpl;
-        }
+      retval(0) = simpl;
     }
   else if (n == dim + 1)
     {
       // FIXME: One should check if nx points span a simplex.
       //        I will look at this later.
       RowVector vec (n);
       for (octave_idx_type i = 0; i < n; i++)
         vec(i) = i + 1.0;
diff --git a/libinterp/dldfcn/__eigs__.cc b/libinterp/dldfcn/__eigs__.cc
--- a/libinterp/dldfcn/__eigs__.cc
+++ b/libinterp/dldfcn/__eigs__.cc
@@ -109,17 +109,17 @@ eigs_complex_func (const ComplexColumnVe
         }
       catch (octave::execution_exception& e)
         {
           err_user_supplied_eval (e, "eigs");
         }
 
       if (tmp.length () && tmp(0).is_defined ())
         {
-          retval = tmp(0).complex_vector_value ("eigs: evaluation of user-supplied function failed");
+          retval = tmp(0).xcomplex_vector_value ("eigs: evaluation of user-supplied function failed");
         }
       else
         {
           eigs_error = 1;
           err_user_supplied_eval ("eigs");
         }
     }
 
@@ -160,17 +160,17 @@ Undocumented internal function.
   if (nargin == 0)
     print_usage ();
 
   octave_value_list retval;
 
   std::string fcn_name;
   octave_idx_type n = 0;
   octave_idx_type k = 6;
-  Complex sigma = 0.;
+  Complex sigma = 0.0;
   double sigmar, sigmai;
   bool have_sigma = false;
   std::string typ = "LM";
   Matrix amm, bmm, bmt;
   ComplexMatrix acm, bcm, bct;
   SparseMatrix asmm, bsmm, bsmt;
   SparseComplexMatrix ascm, bscm, bsct;
   int b_arg = 0;
@@ -299,17 +299,17 @@ Undocumented internal function.
     {
       if (args(2+arg_offset).is_string ())
         {
           typ = args(2+arg_offset).string_value ();
 
           // Use STL function to convert to upper case
           transform (typ.begin (), typ.end (), typ.begin (), toupper);
 
-          sigma = 0.;
+          sigma = 0.0;
         }
       else
         {
           sigma = args(2+arg_offset).xcomplex_value ("eigs: SIGMA must be a scalar or a string");
 
           have_sigma = true;
         }
     }
@@ -325,24 +325,24 @@ Undocumented internal function.
       octave_scalar_map map = args(3+arg_offset).xscalar_map_value ("eigs: OPTS argument must be a scalar structure");
 
       octave_value tmp;
 
       // issym is ignored for complex matrix inputs
       tmp = map.getfield ("issym");
       if (tmp.is_defined () && ! sym_tested)
         {
-          symmetric = tmp.double_value () != 0.;
+          symmetric = tmp.double_value () != 0.0;
           sym_tested = true;
         }
 
       // isreal is ignored if A is not a function
       tmp = map.getfield ("isreal");
       if (tmp.is_defined () && have_a_fun)
-        a_is_complex = ! (tmp.double_value () != 0.);
+        a_is_complex = ! (tmp.double_value () != 0.0);
 
       tmp = map.getfield ("tol");
       if (tmp.is_defined ())
         tol = tmp.double_value ();
 
       tmp = map.getfield ("maxit");
       if (tmp.is_defined ())
         maxit = tmp.nint_value ();
@@ -361,17 +361,17 @@ Undocumented internal function.
         }
 
       tmp = map.getfield ("disp");
       if (tmp.is_defined ())
         disp = tmp.nint_value ();
 
       tmp = map.getfield ("cholB");
       if (tmp.is_defined ())
-        cholB = tmp.double_value () != 0.;
+        cholB = tmp.double_value () != 0.0;
 
       tmp = map.getfield ("permB");
       if (tmp.is_defined ())
         permB = ColumnVector (tmp.vector_value ()) - 1.0;
     }
 
   if (nargin > (4+arg_offset))
     error ("eigs: incorrect number of arguments");
@@ -454,17 +454,17 @@ Undocumented internal function.
                      maxit);
         }
 
       if (nargout < 2)
         retval(0) = eig_val;
       else
         retval = ovl (eig_vec, ComplexDiagMatrix (eig_val), double (info));
     }
-  else if (sigmai != 0.)
+  else if (sigmai != 0.0)
     {
       // Promote real problem to a complex one.
       ComplexMatrix eig_vec;
       ComplexColumnVector eig_val;
 
       if (have_a_fun)
         {
           if (b_is_sparse)
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -108,21 +108,18 @@ namespace octave
         if (&nl != this)
           m_context = nl.m_context;
 
         return *this;
       }
 
       ~bbp_nesting_level (void) = default;
 
-      void reset (void)
-      {
-        while (! m_context.empty ())
-          m_context.pop ();
-      }
+      // Alias for clear function.
+      void reset (void) { clear (); }
 
       void bracket (void) { m_context.push (BRACKET); }
 
       bool is_bracket (void)
       {
         return ! m_context.empty () && m_context.top () == BRACKET;
       }
 
diff --git a/scripts/plot/appearance/legend.m b/scripts/plot/appearance/legend.m
--- a/scripts/plot/appearance/legend.m
+++ b/scripts/plot/appearance/legend.m
@@ -203,16 +203,17 @@ function [hleg, hleg_obj, hplot, labels]
   find_leg_hdl = (nargs == 0);  # possibly overridden
   propvals = {};
 
   ## Process old way of specifying location with a number rather than a string.
   ## FIXME: When can this be deleted?
   if (nargs > 0)
     pos = varargin{nargs};
     if (isnumeric (pos) && isscalar (pos) && pos == fix (pos))
+      warning ("legend: specifying location with a numeric argument is obsolete and will be removed from a future version of Octave, use a string specification instead");
       if (pos >= -1 && pos <= 4)
         location = [{"northeastoutside", "best", "northeast",
                      "northwest", "southwest", "southeast"}] {pos + 2};
         varargin(nargs) = [];
         nargs -= 1;
       else
         error ("legend: invalid location specified");
       endif
diff --git a/scripts/testfun/private/html_compare_plot_demos.m b/scripts/testfun/private/html_compare_plot_demos.m
--- a/scripts/testfun/private/html_compare_plot_demos.m
+++ b/scripts/testfun/private/html_compare_plot_demos.m
@@ -41,17 +41,17 @@
 ##
 ## The template parameter refers to a specially formatted html file
 ## which accompanies this m-file script.
 ##
 ## Additional toolkit description can be added to the column header
 ## with a parameter named equal to the toolkit.  For example:
 ##
 ## @smallexample
-## @code{html_compare_plot_demos ({"gnuplot", "fltk"}, "gnuplot", " 4.6 patchlevel 5")}
+## @code{html_compare_plot_demos (@{"gnuplot", "fltk"@}, "gnuplot", " 4.6 patchlevel 5")}
 ## @end smallexample
 ##
 ## @seealso{compare_plot_demos, dump_demos, demo}
 ## @end deftypefn
 
 ## Author: Ben Abbott  <bpabbott@mac.com>
 
 function html_compare_plot_demos (toolkits, varargin)
