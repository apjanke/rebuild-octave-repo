# HG changeset patch
# User Rik <rik@octave.org>
# Date 1409597206 25200
#      Mon Sep 01 11:46:46 2014 -0700
# Node ID efd5cf93013b4ff404e065990b6005bc899f7232
# Parent  be8a12acb20acf547ac98b7101ebdbcf594a3b94
doc: Move validatestrings into function chapter of manual.

* func.txi: Add validatestrings to function chapter dealing with processing function
inputs.

* strings.txi: Remove validatestrings from strings chapter.

* validateattributes.m: Update seealso cross reference list.

* validatestring.m: Update seealso cross reference list.

diff --git a/doc/interpreter/func.txi b/doc/interpreter/func.txi
--- a/doc/interpreter/func.txi
+++ b/doc/interpreter/func.txi
@@ -388,27 +388,34 @@ if (nargin < min_#_inputs || nargin > ma
 endif
 @end group
 @end example
 
 @noindent
 which stops the function execution and prints a message about the correct
 way to call the function whenever the number of inputs is wrong.
 
-@DOCSTRING(validateattributes)
-
 For compatibility with @sc{matlab}, @code{narginchk} and @code{nargoutchk} are
 available which provide similar error checking.
 
 @DOCSTRING(narginchk)
 
 @DOCSTRING(nargoutchk)
 
-There is also the class @code{inputParser} which can perform extremely
-complex input checking for functions.
+Besides the number of arguments, inputs can be checked for various properties.
+@code{validatestring} is used for string arguments and
+@code{validateattributes} for numeric arguments.
+
+@DOCSTRING(validatestring)
+
+@DOCSTRING(validateattributes)
+
+If none of the preceding functions is sufficient there is also the class
+@code{inputParser} which can perform extremely complex input checking for
+functions.
 
 @DOCSTRING(inputParser)
 
 @anchor{XREFvarargin} @anchor{XREFvarargout}
 @node Variable-length Argument Lists
 @section Variable-length Argument Lists
 @cindex variable-length argument lists
 @cindex @code{varargin}
diff --git a/doc/interpreter/strings.txi b/doc/interpreter/strings.txi
--- a/doc/interpreter/strings.txi
+++ b/doc/interpreter/strings.txi
@@ -396,18 +396,16 @@ corresponding functions for case-insensi
 @DOCSTRING(strcmp)
 
 @DOCSTRING(strncmp)
 
 @DOCSTRING(strcmpi)
 
 @DOCSTRING(strncmpi)
 
-@DOCSTRING(validatestring)
-
 @node Manipulating Strings
 @section Manipulating Strings
 
 Octave supports a wide range of functions for manipulating strings.
 Since a string is just a matrix, simple manipulations can be accomplished
 using standard operators.  The following example shows how to replace
 all blank characters with underscores.
 
diff --git a/scripts/general/validateattributes.m b/scripts/general/validateattributes.m
--- a/scripts/general/validateattributes.m
+++ b/scripts/general/validateattributes.m
@@ -156,17 +156,17 @@
 ## @item @qcode{"square"}
 ## Is a square matrix.
 ##
 ## @item @qcode{"vector"}
 ## Values are arranged in a single vector (column or vector).
 ##
 ## @end table
 ##
-## @seealso{nargin, varargin, isa, validatestring}
+## @seealso{isa, validatestring, inputParser}
 ## @end deftypefn
 
 function validateattributes (A, cls, attr, varargin)
   if (nargin < 3 || nargin > 6)
     print_usage ();
   elseif (! iscellstr (cls))
     error ("validateattributes: CLASSES must be a cell array of strings");
   elseif (! iscell (attr))
diff --git a/scripts/strings/validatestring.m b/scripts/strings/validatestring.m
--- a/scripts/strings/validatestring.m
+++ b/scripts/strings/validatestring.m
@@ -48,17 +48,17 @@
 ## @result{} "red"
 ##
 ## validatestring ("b", @{"red", "green", "blue", "black"@})
 ## @result{} error: validatestring: multiple unique matches were found for 'b':
 ##    blue, black
 ## @end group
 ## @end smallexample
 ##
-## @seealso{strcmp, strcmpi}
+## @seealso{strcmp, strcmpi, validateattributes, inputParser}
 ## @end deftypefn
 
 ## Author: Bill Denney <bill@denney.ws>
 
 function str = validatestring (str, strarray, varargin)
 
   if (nargin < 2 || nargin > 5)
     print_usage ();
