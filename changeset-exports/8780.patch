# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1234877015 -3600
#      Tue Feb 17 14:23:35 2009 +0100
# Node ID ea76466605ba11928f80745b0a58a60b5ea2dbf4
# Parent  949708f930d04c0fbc8236e0e9f937eab2058906
support native cumsum, gripe on overflow in sum/cumsum

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,18 @@
+2009-02-17  Jaroslav Hajek  <highegg@gmail.com>
+
+	* mx-inlines.cc (OP_CUM_FCN, OP_CUM_FCN2, OP_CUM_FCNN):
+	Add TSRC/TRES parameters.
+	(mx_inline_cumcount): New function.
+	* intNDArray.cc (intNDArray::cumsum): New method.
+	* intNDArray.h: Declare it.
+	* boolNDArray.cc (boolNDArray::cumsum): New method.
+	* boolNDArray.h: Declare it.
+
 2009-02-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* mx-inlines.cc (OP_CUMMINMAX_FCN, OP_CUMMINMAX_FCN2,
 	OP_CUMMINMAX_FCNN): New macros.
 	(mx_inline_cummax, mx_inline_cummin, do_mx_cumminmax_op):
 	New overloaded template functions.
 
 	* dNDArray.cc (NDArray::cummin, NDArray::cummax): New methods.
diff --git a/liboctave/boolNDArray.cc b/liboctave/boolNDArray.cc
--- a/liboctave/boolNDArray.cc
+++ b/liboctave/boolNDArray.cc
@@ -60,16 +60,23 @@ boolNDArray::any (int dim) const
 
 NDArray 
 boolNDArray::sum (int dim) const
 {
   // NOTE: going via octave_idx_type is faster even though it requires a conversion.
   return do_mx_red_op<Array<octave_idx_type> > (*this, dim, mx_inline_count);
 }
 
+NDArray 
+boolNDArray::cumsum (int dim) const
+{
+  // NOTE: going via octave_idx_type is faster even though it requires a conversion.
+  return do_mx_cum_op<Array<octave_idx_type> > (*this, dim, mx_inline_cumcount);
+}
+
 boolNDArray
 boolNDArray::concat (const boolNDArray& rb, const Array<octave_idx_type>& ra_idx)
 {
   if (rb.numel () > 0)
     insert (rb, ra_idx);
   return *this;
 }
 
diff --git a/liboctave/boolNDArray.h b/liboctave/boolNDArray.h
--- a/liboctave/boolNDArray.h
+++ b/liboctave/boolNDArray.h
@@ -62,16 +62,17 @@ public:
   bool any_element_is_nan (void) const { return false; }
 
   // FIXME -- this is not quite the right thing.
 
   boolNDArray all (int dim = -1) const;
   boolNDArray any (int dim = -1) const;
 
   NDArray sum (int dim = -1) const;
+  NDArray cumsum (int dim = -1) const;
 
   boolNDArray concat (const boolNDArray& rb, const Array<octave_idx_type>& ra_idx);
 
   boolNDArray& insert (const boolNDArray& a, octave_idx_type r, octave_idx_type c);
   boolNDArray& insert (const boolNDArray& a, const Array<octave_idx_type>& ra_idx);
 
   boolMatrix matrix_value (void) const;
 
diff --git a/liboctave/intNDArray.cc b/liboctave/intNDArray.cc
--- a/liboctave/intNDArray.cc
+++ b/liboctave/intNDArray.cc
@@ -206,16 +206,23 @@ template <class T>
 intNDArray<T>
 intNDArray<T>::sum (int dim) const
 {
   return do_mx_red_op<intNDArray<T> > (*this, dim, mx_inline_sum);
 }
 
 template <class T>
 intNDArray<T>
+intNDArray<T>::cumsum (int dim) const
+{
+  return do_mx_cum_op<intNDArray<T> > (*this, dim, mx_inline_cumsum);
+}
+
+template <class T>
+intNDArray<T>
 intNDArray<T>::max (int dim) const
 {
   return do_mx_minmax_op<intNDArray<T> > (*this, dim, mx_inline_max);
 }
 
 template <class T>
 intNDArray<T>
 intNDArray<T>::max (ArrayN<octave_idx_type>& idx_arg, int dim) const
diff --git a/liboctave/intNDArray.h b/liboctave/intNDArray.h
--- a/liboctave/intNDArray.h
+++ b/liboctave/intNDArray.h
@@ -79,16 +79,17 @@ public:
   intNDArray min (ArrayN<octave_idx_type>& index, int dim = 0) const;
   
   intNDArray cummax (int dim = 0) const;
   intNDArray cummax (ArrayN<octave_idx_type>& index, int dim = 0) const;
   intNDArray cummin (int dim = 0) const;
   intNDArray cummin (ArrayN<octave_idx_type>& index, int dim = 0) const;
   
   intNDArray sum (int dim) const;
+  intNDArray cumsum (int dim) const;
 
   intNDArray abs (void) const;
   intNDArray signum (void) const;
 
   intNDArray squeeze (void) const
     { return intNDArray<T> (MArrayN<T>::squeeze ()); }
 
   intNDArray transpose (void) const
diff --git a/liboctave/mx-inlines.cc b/liboctave/mx-inlines.cc
--- a/liboctave/mx-inlines.cc
+++ b/liboctave/mx-inlines.cc
@@ -421,59 +421,61 @@ F (const TSRC *v, TRES *r, octave_idx_ty
 OP_RED_FCNN (mx_inline_sum, T, T)
 OP_RED_FCNN (mx_inline_count, bool, T)
 OP_RED_FCNN (mx_inline_prod, T, T)
 OP_RED_FCNN (mx_inline_sumsq, T, T)
 OP_RED_FCNN (mx_inline_sumsq, std::complex<T>, T)
 OP_RED_FCNN (mx_inline_any, T, bool)
 OP_RED_FCNN (mx_inline_all, T, bool)
 
-#define OP_CUM_FCN(F, OP) \
+#define OP_CUM_FCN(F, TSRC, TRES, OP) \
 template <class T> \
 inline void \
-F (const T *v, T *r, octave_idx_type n) \
+F (const TSRC *v, TRES *r, octave_idx_type n) \
 { \
   if (n) \
     { \
-      T t = r[0] = v[0]; \
+      TRES t = r[0] = v[0]; \
       for (octave_idx_type i = 1; i < n; i++) \
         r[i] = t = t OP v[i]; \
     } \
 }
 
-OP_CUM_FCN (mx_inline_cumsum, +)
-OP_CUM_FCN (mx_inline_cumprod, *)
+OP_CUM_FCN (mx_inline_cumsum, T, T, +)
+OP_CUM_FCN (mx_inline_cumprod, T, T, *)
+OP_CUM_FCN (mx_inline_cumcount, bool, T, +)
 
-#define OP_CUM_FCN2(F, OP) \
+#define OP_CUM_FCN2(F, TSRC, TRES, OP) \
 template <class T> \
 inline void \
-F (const T *v, T *r, octave_idx_type m, octave_idx_type n) \
+F (const TSRC *v, TRES *r, octave_idx_type m, octave_idx_type n) \
 { \
   if (n) \
     { \
       for (octave_idx_type i = 0; i < m; i++) \
         r[i] = v[i]; \
       const T *r0 = r; \
       for (octave_idx_type j = 1; j < n; j++) \
         { \
           r += m; v += m; \
           for (octave_idx_type i = 0; i < m; i++) \
-            r[i] = v[i] OP r0[i]; \
+            r[i] = r0[i] OP v[i]; \
           r0 += m; \
         } \
     } \
 }
 
-OP_CUM_FCN2 (mx_inline_cumsum, +)
-OP_CUM_FCN2 (mx_inline_cumprod, *)
+OP_CUM_FCN2 (mx_inline_cumsum, T, T, +)
+OP_CUM_FCN2 (mx_inline_cumprod, T, T, *)
+OP_CUM_FCN2 (mx_inline_cumcount, bool, T, *)
 
-#define OP_CUM_FCNN(F) \
+#define OP_CUM_FCNN(F, TSRC, TRES) \
 template <class T> \
 inline void \
-F (const T *v, T *r, octave_idx_type l, \
+F (const TSRC *v, TRES *r, octave_idx_type l, \
    octave_idx_type n, octave_idx_type u) \
 { \
   if (l == 1) \
     { \
       for (octave_idx_type i = 0; i < u; i++) \
         { \
           F (v, r, n); \
           v += n; r += n; \
@@ -485,18 +487,19 @@ F (const T *v, T *r, octave_idx_type l, 
         { \
           F (v, r, l, n); \
           v += l*n; \
           r += l*n; \
         } \
     } \
 }
 
-OP_CUM_FCNN (mx_inline_cumsum)
-OP_CUM_FCNN (mx_inline_cumprod)
+OP_CUM_FCNN (mx_inline_cumsum, T, T)
+OP_CUM_FCNN (mx_inline_cumprod, T, T)
+OP_CUM_FCNN (mx_inline_cumcount, bool, T)
 
 #define OP_MINMAX_FCN(F, OP) \
 template <class T> \
 void F (const T *v, T *r, octave_idx_type n) \
 { \
   if (! n) return; \
   T tmp = v[0]; \
   octave_idx_type i = 1; \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2009-02-17  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/data.cc (NATIVE_REDUCTION): Add BOOL_FCN argument.
+	(NATIVE_REDUCTION_1): Check integer overflow flags and possibly gripe.
+	(Fsum): Reflect change.
+	(Fcumsum): USE NATIVE_REDUCTION.
+	* gripes.cc (gripe_native_integer_math_truncated): New function.
+
 2009-02-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/max.cc (Fcummin, Fcummax): Improve inline docs.
 
 2009-02-17  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/max.cc (MINMAX_DOUBLE_SBODY): New macro.
 	(MINMAX_DOUBLE_BODY): Move part of code to MINMAX_DOUBLE_SBODY.
diff --git a/src/DLD-FUNCTIONS/max.cc b/src/DLD-FUNCTIONS/max.cc
--- a/src/DLD-FUNCTIONS/max.cc
+++ b/src/DLD-FUNCTIONS/max.cc
@@ -681,18 +681,18 @@ along with Octave; see the file COPYING.
     MINMAX_SINGLE_BODY (FCN) \
   else \
     MINMAX_DOUBLE_BODY (FCN) \
  \
  return retval;
 
 DEFUN_DLD (min, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn {Mapping Function} {} min (@var{x}, @var{y}, @var{dim})\n\
-@deftypefnx {Mapping Function} {[@var{w}, @var{iw}] =} min (@var{x})\n\
+@deftypefn {Loadable Function} {} min (@var{x}, @var{y}, @var{dim})\n\
+@deftypefnx {Loadable Function} {[@var{w}, @var{iw}] =} min (@var{x})\n\
 @cindex Utility Functions\n\
 For a vector argument, return the minimum value.  For a matrix\n\
 argument, return the minimum value from each column, as a row\n\
 vector, or over the dimension @var{dim} if defined. For two matrices\n\
 (or a matrix and scalar), return the pair-wise minimum.\n\
 Thus,\n\
 \n\
 @example\n\
@@ -755,18 +755,18 @@ minimum value(s). Thus,\n\
 %! assert (ndims(y), 2);
 %! assert (i, [2, 2; 2, 2]);
 %! assert (ndims(i), 2);
 
 */
 
 DEFUN_DLD (max, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn {Mapping Function} {} max (@var{x}, @var{y}, @var{dim})\n\
-@deftypefnx {Mapping Function} {[@var{w}, @var{iw}] =} max (@var{x})\n\
+@deftypefn {Loadable Function} {} max (@var{x}, @var{y}, @var{dim})\n\
+@deftypefnx {Loadable Function} {[@var{w}, @var{iw}] =} max (@var{x})\n\
 @cindex Utility Functions\n\
 For a vector argument, return the maximum value.  For a matrix\n\
 argument, return the maximum value from each column, as a row\n\
 vector, or over the dimension @var{dim} if defined. For two matrices\n\
 (or a matrix and scalar), return the pair-wise maximum.\n\
 Thus,\n\
 \n\
 @example\n\
@@ -898,58 +898,58 @@ maximum value(s). Thus,\n\
     MINMAX_SINGLE_SBODY (FCN) \
   else \
     MINMAX_DOUBLE_SBODY (FCN) \
  \
  return retval;
 
 DEFUN_DLD (cummin, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn {Mapping Function} {} cummin (@var{x}, @var{dim})\n\
-@deftypefnx {Mapping Function} {[@var{w}, @var{iw}] =} cummin (@var{x})\n\
+@deftypefn {Loadable Function} {} cummin (@var{x}, @var{dim})\n\
+@deftypefnx {Loadable Function} {[@var{w}, @var{iw}] =} cummin (@var{x})\n\
 @cindex Utility Functions\n\
 Return the cumulative minimum values. That means, the call\n\
 @example\n\
   [@var{w}, @var{iw}] = cummin (@var{x}, @var{dim})\n\
 @end example\n\
 \n\
 @noindent\n\
 is equivalent to the following code:\n\
 @example\n\
   for i = 1:size (x, dim)\n\
-    [@var{w}(:,@dots{},i:,@dots{},), @var{iw}(:,@dots{},i:,@dots{},)] =\
- min(@var{x}(:,@dots{},i,:,@dots{}), @var{dim});\n\
+    [@var{w}(:,@dots{},i,:,@dots{}), @var{iw}(:,@dots{},i,:,@dots{})] =\
+ min(@var{x}(:,@dots{},1:i,:,@dots{}), @var{dim});\n\
   endfor\n\
 @end example\n\
 \n\
 @noindent\n\
 but computed in a much faster manner.\n\
 The behaviour if @var{dim} or @var{iw} is unspecified is analogous\n\
 to @code{min}.\n\
 @end deftypefn")
 {
   CUMMINMAX_BODY (cummin);
 }
 
 DEFUN_DLD (cummax, args, nargout,
   "-*- texinfo -*-\n\
-@deftypefn {Mapping Function} {} cummax (@var{x}, @var{dim})\n\
-@deftypefnx {Mapping Function} {[@var{w}, @var{iw}] =} cummax (@var{x})\n\
+@deftypefn {Loadable Function} {} cummax (@var{x}, @var{dim})\n\
+@deftypefnx {Loadable Function} {[@var{w}, @var{iw}] =} cummax (@var{x})\n\
 @cindex Utility Functions\n\
 Return the cumulative maximum values. That means, the call\n\
 @example\n\
   [@var{w}, @var{iw}] = cummax (@var{x}, @var{dim})\n\
 @end example\n\
 \n\
 @noindent\n\
 is equivalent to the following code:\n\
 @example\n\
   for i = 1:size (x, dim)\n\
-    [@var{w}(:,@dots{},i:,@dots{},), @var{iw}(:,@dots{},i:,@dots{},)] =\
- max(@var{x}(:,@dots{},i,:,@dots{}), @var{dim});\n\
+    [@var{w}(:,@dots{},i,:,@dots{}), @var{iw}(:,@dots{},i,:,@dots{})] =\
+ max(@var{x}(:,@dots{},1:i,:,@dots{}), @var{dim});\n\
   endfor\n\
 @end example\n\
 \n\
 @noindent\n\
 but computed in a much faster manner.\n\
 The behaviour if @var{dim} or @var{iw} is unspecified is analogous\n\
 to @code{max}.\n\
 @end deftypefn")
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1263,20 +1263,29 @@ sign as @var{x}.  If @var{y} is zero, th
 // FIXME Need to convert the reduction functions of this file for single precision
 
 #define NATIVE_REDUCTION_1(FCN, TYPE, DIM) \
   (arg.is_ ## TYPE ## _type ()) \
     { \
       TYPE ## NDArray tmp = arg. TYPE ##_array_value (); \
       \
       if (! error_state) \
-        retval = tmp.FCN (DIM); \
+        { \
+          octave_ ## TYPE::clear_conv_flags (); \
+          retval = tmp.FCN (DIM); \
+          if (octave_ ## TYPE::get_trunc_flag ()) \
+            { \
+              gripe_native_integer_math_truncated (#FCN, \
+                                                   octave_ ## TYPE::type_name ()); \
+              octave_ ## TYPE::clear_conv_flags (); \
+            } \
+        } \
     }
 
-#define NATIVE_REDUCTION(FCN) \
+#define NATIVE_REDUCTION(FCN, BOOL_FCN) \
  \
   octave_value retval; \
  \
   int nargin = args.length (); \
  \
   bool isnative = false; \
   bool isdouble = false; \
   \
@@ -1332,21 +1341,20 @@ sign as @var{x}.  If @var{y} is zero, th
                       else if NATIVE_REDUCTION_1 (FCN, uint32, dim) \
                       else if NATIVE_REDUCTION_1 (FCN, uint64, dim) \
                       else if NATIVE_REDUCTION_1 (FCN, int8, dim) \
                       else if NATIVE_REDUCTION_1 (FCN, int16, dim) \
                       else if NATIVE_REDUCTION_1 (FCN, int32, dim) \
                       else if NATIVE_REDUCTION_1 (FCN, int64, dim) \
                       else if (arg.is_bool_type ()) \
                         { \
-                          boolNDArray tmp = arg. bool_array_value (); \
+                          boolNDArray tmp = arg.bool_array_value (); \
                           if (! error_state) \
-                            retval = tmp.any (dim); \
+                            retval = boolNDArray (tmp.BOOL_FCN (dim)); \
                         } \
-                      \
                       else if (arg.is_char_matrix ()) \
                         { \
 			  error (#FCN, ": invalid char type"); \
 			} \
 		      else if (!isdouble && arg.is_single_type ()) \
                         { \
 	                  if (arg.is_complex_type ()) \
 		            { \
@@ -1553,25 +1561,29 @@ same orientation as @var{x}.\n\
 %!assert (cumprod (single([2, 3; 4, 5]), 1), single([2, 3; 8, 15]));
 %!assert (cumprod (single([2, 3; 4, 5]), 2), single([2, 6; 4, 20]));
 
  */
 
 DEFUN (cumsum, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} cumsum (@var{x}, @var{dim})\n\
+@deftypefnx {Built-in Function} {} cumsum (@dots{}, 'native')\n\
 Cumulative sum of elements along dimension @var{dim}.  If @var{dim}\n\
 is omitted, it defaults to 1 (column-wise cumulative sums).\n\
 \n\
 As a special case, if @var{x} is a vector and @var{dim} is omitted,\n\
 return the cumulative sum of the elements as a vector with the\n\
 same orientation as @var{x}.\n\
+\n\
+The \"native\" argument implies the summation is performed in native type,\n\
+analogously to @code{sum}.\n\
 @end deftypefn")
 {
-  DATA_REDUCTION (cumsum);
+  NATIVE_REDUCTION (cumsum, cumsum);
 }
 
 /*
 
 %!assert (cumsum ([1, 2, 3]), [1, 3, 6]);
 %!assert (cumsum ([-1; -2; -3]), [-1; -3; -6]);
 %!assert (cumsum ([i, 2+i, -3+2i, 4]), [i, 2+2i, -1+4i, 3+4i]);
 %!assert (cumsum ([1, 2, 3; i, 2i, 3i; 1+i, 2+2i, 3+3i]), [1, 2, 3; 1+i, 2+2i, 3+3i; 2+2i, 4+4i, 6+6i]);
@@ -2544,17 +2556,17 @@ double type. For example\n\
 @example\n\
 sum ([true, true])\n\
   @result{} 2\n\
 sum ([true, true], 'native')\n\
   @result{} true\n\
 @end example\n\
 @end deftypefn")
 {
-  NATIVE_REDUCTION (sum);
+  NATIVE_REDUCTION (sum, any);
 }
 
 /*
 
 %!assert (sum([true,true]), 2)
 %!assert (sum([true,true],'native'), true)
 %!assert (sum(int8([127,10,-20])), 117);
 %!assert (sum(int8([127,10,-20]),'native'), int8(107));
diff --git a/src/gripes.cc b/src/gripes.cc
--- a/src/gripes.cc
+++ b/src/gripes.cc
@@ -216,16 +216,24 @@ void
 gripe_binop_integer_math_truncated (const char *op, const char *type1, const char *type2)
 {
   warning_with_id ("Octave:int-math-overflow",
                    "data truncated for %s by %s binary operator %s",
                    type1, type2, op);
 }
 
 void
+gripe_native_integer_math_truncated (const char *fcn, const char *type)
+{
+  warning_with_id ("Octave:int-math-overflow",
+                   "data truncated for %s native %s operation",
+                   type, fcn);
+}
+
+void
 gripe_unop_integer_math_truncated (const char* op, const char *type)
 {
   warning_with_id ("Octave:int-math-overflow",
                    "data truncated for the %s unary operator %s", type, op);
 }
 
 void
 gripe_library_execution_error (void)
diff --git a/src/gripes.h b/src/gripes.h
--- a/src/gripes.h
+++ b/src/gripes.h
@@ -109,16 +109,19 @@ gripe_implicit_conversion (const std::st
 
 extern OCTINTERP_API void
 gripe_truncated_conversion (const char *srctype, const char *desttype);
 
 extern OCTINTERP_API void
 gripe_binop_integer_math_truncated (const char *op, const char *type1, const char *type2);
 
 extern OCTINTERP_API void
+gripe_native_integer_math_truncated (const char *fcn, const char *type);
+
+extern OCTINTERP_API void
 gripe_unop_integer_math_truncated (const char *op, const char *type);
 
 extern OCTINTERP_API void
 gripe_non_integer_conversion (const char *srctype, const char *desttype);
 
 extern OCTINTERP_API void
 gripe_nan_conversion (const char *srctype, const char *desttype);
 
