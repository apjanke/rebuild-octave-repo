# HG changeset patch
# User jwe
# Date 748643896 0
#      Tue Sep 21 20:38:16 1993 +0000
# Node ID 80f682c2da339d5a8e611a8a7e9c8df0407a1d55
# Parent  659b6f4996dad23bf57cda5d4f1712f273d6be42
[project @ 1993-09-21 20:38:16 by jwe]
(symbol_record::symbol_record ()): Initialize forced_global.
(symbol_record::clear_visible ()): Reset forced_global to zero.
(symbol_record::clear_all )): Ditto.
(symbol_record::mark_as_forced_global ()): New function.
(symbol_record::is_forced_global ()): New function.
(symbol_record::alias ()): Also copy forced_global attribute.

diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -127,36 +127,39 @@ symbol_def::save (ostream& os, int mark_
 
 /*
  * Individual records in a symbol table.
  */
 symbol_record::symbol_record (void)
 {
   nm = (char *) NULL;
   formal_param = 0;
+  forced_global = 0;
   var = (symbol_def *) NULL;
   fcn = (symbol_def *) NULL;
   sv_fcn = (sv_Function) NULL;
   next_elem = (symbol_record *) NULL;
 }
 
 symbol_record::symbol_record (char *n)
 {
   nm = strsave (n);
   formal_param = 0;
+  forced_global = 0;
   var = (symbol_def *) NULL;
   fcn = (symbol_def *) NULL;
   sv_fcn = (sv_Function) NULL;
   next_elem = (symbol_record *) NULL;
 }
 
 symbol_record::symbol_record (char *n, symbol_record *nxt)
 {
   nm = strsave (n);
   formal_param = 0;
+  forced_global = 0;
   var = (symbol_def *) NULL;
   fcn = (symbol_def *) NULL;
   sv_fcn = (sv_Function) NULL;
   next_elem = nxt;
 }
 
 symbol_record::~symbol_record (void)
 {
@@ -425,16 +428,17 @@ symbol_record::save (ostream& os, int ma
 void
 symbol_record::clear_visible (void)
 {
   if (var != (symbol_def *) NULL && var->lifespan != symbol_def::eternal)
     {
       if (--var->count <= 0)
 	delete var;
       var = (symbol_def *) NULL;
+      forced_global = 0;
     }
   else if (fcn != (symbol_def *) NULL && fcn->lifespan != symbol_def::eternal)
     {
       if (--fcn->count <= 0)
 	delete fcn;
       fcn = (symbol_def *) NULL;
     }
 }
@@ -442,16 +446,17 @@ symbol_record::clear_visible (void)
 void
 symbol_record::clear_all (void)
 {
   if (var != (symbol_def *) NULL && var->lifespan != symbol_def::eternal)
     {
       if (--var->count <= 0)
 	delete var;
       var = (symbol_def *) NULL;
+      forced_global = 0;
     }
 
   if (fcn != (symbol_def *) NULL && fcn->lifespan != symbol_def::eternal)
     {
       if (--fcn->count <= 0)
 	delete fcn;
       fcn = (symbol_def *) NULL;
     }
@@ -483,21 +488,34 @@ symbol_record::mark_as_formal_parameter 
 
 int
 symbol_record::is_formal_parameter (void)
 {
   return formal_param;
 }
 
 void
+symbol_record::mark_as_forced_global (void)
+{
+  forced_global = 1;
+}
+
+int
+symbol_record::is_forced_global (void)
+{
+  return forced_global;
+}
+
+void
 symbol_record::alias (symbol_record *s, int force = 0)
 {
   sv_fcn = s->sv_fcn; // Maybe this should go in the var symbol_def?
 
   formal_param = s->formal_param; // Hmm.
+  forced_global = s->forced_global; // Hmm.
 
   if (force && s->var == (symbol_def *) NULL
       && s->fcn == (symbol_def *) NULL)
     {
       s->var = new symbol_def ();
       var = s->var;
       var->count = 2; // Yes, this is correct.
       return;
