# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1432134070 25200
#      Wed May 20 08:01:10 2015 -0700
# Node ID abf85f8cbd6c33fc7bd5c6641414cdc28714d308
# Parent  3c8260fd0837f1f2fd790ce04dc7c01fe68df689
Expand type() to work on command-line entered functions (bug #40462).

* symtab.h (find_cmdline_function): New function.

* symtab.cc (__get_cmdline_fcn_txt__): New function.

* pt-pr-code.cc (tree_print_code::visit_octave_user_function):
Don't decrement indent level.
* pt-pr-code.cc (tree_print_code::visit_no_op_command):
Decrement indent level if end of fcn_or_script reached.
* pt-pr-code.cc (tree_print_code::visit_statement):
Just print newline.

* type.m: Check for command-line function and print string from
__get_cmdline_fcn_txt__() if it is not empty.

diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -39,16 +39,17 @@ along with Octave; see the file COPYING.
 #include "input.h"
 #include "load-path.h"
 #include "ov-classdef.h"
 #include "ov-fcn.h"
 #include "ov-usr-fcn.h"
 #include "pager.h"
 #include "parse.h"
 #include "pt-arg-list.h"
+#include "pt-pr-code.h"
 #include "symtab.h"
 #include "unwind-prot.h"
 #include "utils.h"
 
 symbol_table *symbol_table::instance = 0;
 
 symbol_table::scope_id_cache *symbol_table::scope_id_cache::instance = 0;
 
@@ -1805,16 +1806,54 @@ Undocumented internal function.\n\
         }
     }
   else
     print_usage ();
 
   return retval;
 }
 
+DEFUN (__get_cmdline_fcn_txt__, args, ,
+       "-*- texinfo -*-\n\
+@deftypefn  {Built-in Function} {} __get_cmdline_fcn_txt__ (@var{name})\n\
+Undocumented internal function.\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    {
+      std::string name = args(0).string_value ();
+
+      if (! error_state)
+        {
+          octave_value ov = symbol_table::find_cmdline_function (name);
+
+          octave_user_function *f = ov.user_function_value ();
+
+          if (f)
+            {
+              std::ostringstream buf;
+
+              tree_print_code tpc (buf);
+
+              f->accept (tpc);
+
+              retval = buf.str ();
+            }
+        }
+      else
+        error ("__get_cmd_line_function_text__: expecting function name");
+    }
+  else
+    print_usage ();
+
+  return retval;
+}
+
 #if 0
 
 // FIXME: should we have functions like this in Octave?
 
 DEFUN (set_variable, args, , "set_variable (NAME, VALUE)")
 {
   octave_value retval;
 
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -1543,16 +1543,24 @@ public:
   static octave_value find_user_function (const std::string& name)
   {
     fcn_table_iterator p = fcn_table.find (name);
 
     return (p != fcn_table.end ())
            ? p->second.find_user_function () : octave_value ();
   }
 
+  static octave_value find_cmdline_function (const std::string& name)
+  {
+    fcn_table_iterator p = fcn_table.find (name);
+
+    return (p != fcn_table.end ())
+           ? p->second.find_cmdline_function () : octave_value ();
+  }
+
   static void install_cmdline_function (const std::string& name,
                                         const octave_value& fcn)
   {
     fcn_table_iterator p = fcn_table.find (name);
 
     if (p != fcn_table.end ())
       {
         fcn_info& finfo = p->second;
diff --git a/libinterp/parse-tree/pt-pr-code.cc b/libinterp/parse-tree/pt-pr-code.cc
--- a/libinterp/parse-tree/pt-pr-code.cc
+++ b/libinterp/parse-tree/pt-pr-code.cc
@@ -324,17 +324,17 @@ tree_print_code::visit_octave_user_funct
   tree_statement_list *cmd_list = fcn.body ();
 
   if (cmd_list)
     {
       increment_indent_level ();
 
       cmd_list->accept (*this);
 
-      decrement_indent_level ();
+      // endfunction will decrement the indent level.
     }
 
   visit_octave_user_function_trailer (fcn);
 }
 
 void
 tree_print_code::visit_octave_user_function_header (octave_user_function& fcn)
 {
@@ -714,16 +714,19 @@ tree_print_code::visit_multi_assignment 
     rhs->accept (*this);
 
   print_parens (expr, ")");
 }
 
 void
 tree_print_code::visit_no_op_command (tree_no_op_command& cmd)
 {
+  if (cmd.is_end_of_fcn_or_script ())
+    decrement_indent_level ();
+
   indent ();
 
   os << cmd.original_command ();
 }
 
 void
 tree_print_code::visit_constant (tree_constant& val)
 {
@@ -868,23 +871,17 @@ tree_print_code::visit_statement (tree_s
   print_comment_list (stmt.comment_text ());
 
   tree_command *cmd = stmt.command ();
 
   if (cmd)
     {
       cmd->accept (*this);
 
-      if (! stmt.print_result ())
-        {
-          os << ";";
-          newline (" ");
-        }
-      else
-        newline ();
+      newline ();
     }
   else
     {
       tree_expression *expr = stmt.expression ();
 
       if (expr)
         {
           expr->accept (*this);
diff --git a/scripts/help/type.m b/scripts/help/type.m
--- a/scripts/help/type.m
+++ b/scripts/help/type.m
@@ -92,16 +92,29 @@ function text = type (varargin)
       else
         txt = sprintf ("%s is the user-defined function defined from: %s\n\n%s",
                         name, file, contents);
       endif
     elseif (e == 3)
       txt = sprintf ("%s is a dynamically-linked function", name);
     elseif (e == 5)
       txt = sprintf ("%s is a built-in function", name);
+    elseif (e == 103)
+      contents = __get_cmdline_fcn_txt__ (name);
+      if (isempty (contents))
+        txt = sprintf ("%s is a command-line function with no definition",
+                       name);
+      else
+        if (quiet)
+          txt = contents;
+        else
+          txt = sprintf ("%s is the command-line function:\n\n%s",
+                         name, contents);
+        endif
+      endif
     elseif (any (strcmp (__operators__ (), name)))
       txt = sprintf ("%s is an operator", name);
     elseif (any (strcmp (__keywords__ (), name)))
       txt = sprintf ("%s is a keyword", name);
     else
       error ("type: '%s' undefined\n", name);
     endif
 
