# HG changeset patch
# User jwe
# Date 791217710 0
#      Fri Jan 27 14:41:50 1995 +0000
# Node ID 2ba812c74caad8d09d95d12e71ffc49f4252a524
# Parent  a58bb71b0429dc1bb9ab168d7a8540c0120ce73d
[project @ 1995-01-27 14:39:54 by jwe]

diff --git a/acconfig.h b/acconfig.h
--- a/acconfig.h
+++ b/acconfig.h
@@ -1,25 +1,16 @@
 /* acconfig.h
 
    Descriptive text for the C preprocessor macros that are needed by
    Octave.
 
    Leave the following blank line there!!  Autoheader needs it.  */
 
 
-/* Define if you don't have acosh(). */
-#undef ACOSH_MISSING
-
-/* Define if you don't have asinh(). */
-#undef ASINH_MISSING
-
-/* Define if you don't have atanh(). */
-#undef ATANH_MISSING
-
 /* Define if your math.h declares struct exception for matherr() */
 #undef EXCEPTION_IN_MATH
 
 /* Define if your Fortran compiler appends an underscore to external
    names. */ 
 #undef F77_APPEND_UNDERSCORE
 
 /* Define if you don't have FSQP. */
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -16,17 +16,17 @@ dnl Copyright (C) 1992, 1993, 1994, 1995
 ### ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
-AC_REVISION($Revision: 1.89 $)
+AC_REVISION($Revision: 1.90 $)
 AC_PREREQ(2.0)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h kpathsea/c-auto.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 AC_CANONICAL_HOST
 if test -z "$host"; then
@@ -565,75 +565,29 @@ CFLAGS="$CFLAGS $GCC_IEEE_FP_FLAG"
 case "$canonical_host_type" in
   alpha-dec-osf* | m68k-hp-hpux*)
   ;;
   *)
     AC_CHECK_FUNCS(finite isnan isinf infinity quiet_nan)
   ;;
 esac
 
-AC_CHECK_FUNCS(erf erfc lgamma)
+### Check for nonstandard but common math functions that we need.
+
+AC_CHECK_FUNCS(acosh asinh atanh erf erfc lgamma)
 
 AC_MSG_CHECKING([for signgam declaration in math.h])
 AC_TRY_LINK([#include <math.h>],
   [int foo = signgam + 1;],
   AC_MSG_RESULT(yes)
   AC_DEFINE(SIGNGAM_DECLARED, 1),
   AC_MSG_RESULT(no))
 
 CFLAGS="$XCFLAGS"
 
-### Check for nonstandard but common trig functions that we need.
-### If they are missing, we replace them using functions from the BSD
-### math library, and we may need to replace some other functions too.
-
-AC_REPLACE_FUNCS(acosh asinh atanh)
-
-if test -n "$LIBOBJS"; then
-  for func in $LIBOBJS
-  do
-    case "$func" in
-      *acosh.o*)
-	AC_DEFINE(ACOSH_MISSING, 1)
-      ;;
-      *asinh.o*)
-	AC_DEFINE(ASINH_MISSING, 1)
-      ;;
-      *atanh.o*)
-	AC_DEFINE(ATANH_MISSING, 1)
-      ;;
-    esac
-  done
-  case $LIBOBJS in
-    *acosh.o* | *asinh.o*)
-      AC_REPLACE_FUNCS(copysign)
-    ;;
-  esac
-  case $LIBOBJS in
-    *acosh.o* | *asinh.o* | *atanh.o*)
-      AC_REPLACE_FUNCS(log1p)
-    ;;
-  esac
-  case $LIBOBJS in
-    *log1p*)
-      AC_REPLACE_FUNCS(log__L)
-    ;;
-  esac
-  case $LIBOBJS in
-    *log1p*)
-      AC_REPLACE_FUNCS(finite)
-    ;;
-  esac
-  case $LIBOBJS in
-    *copysign* | *finite* | *log1p*)
-      AC_REPLACE_FUNCS(logb scalb)
-    ;;
-  esac
-fi
-
 ### Checks for OS specific cruft.
 
 AC_STRUCT_TM
 AC_FUNC_SETVBUF_REVERSED
 TERMLIBS=""
 for termlib in termcap terminfo curses termlib ; do
   AC_CHECK_LIB(${termlib}, main, [TERMLIBS="${TERMLIBS} -l${termlib}"])
   case "${TERMLIBS}" in
