# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1473653336 25200
#      Sun Sep 11 21:08:56 2016 -0700
# Node ID 9d4cb0cf9cd2cb7aeef5f76ba1645e9b5fd9d1f3
# Parent  8e1462b1796992d0a3b9324aea00390df6d2ad10
maint: tag xtests and tests that fail on some systems with bug numbers

* conv2.cc, num2str.m, isosurface.m, residue.m, classdef.tst: Convert some
xtests to tests with bug numbers.
* sparse-xpow.cc, realpow.m, lscov.m: Add bug numbers to tests that fail on
some systems.

diff --git a/libinterp/corefcn/conv2.cc b/libinterp/corefcn/conv2.cc
--- a/libinterp/corefcn/conv2.cc
+++ b/libinterp/corefcn/conv2.cc
@@ -388,50 +388,50 @@ The size of the result is @code{max (siz
 ## of convn to test itself.  However, because calculations are done
 ## differently based on the shape option, it will help to catch some
 ## bugs.  See also bug #39314.
 ## FIXME: The "valid" option uses an entirely different code path
 ##        through C++ and Fortran to calculate inner convolution.
 ##        The terms in the convolution added in reverse order compared
 ##        to the "full" option.  This produces differences on the order
 ##        of tens of eps.  This should be fixed, but in the meantime
-##        the tests will be marked as xtests.
+##        the tests will be marked as known failures.
 %!shared a, b, c
 %! ## test 3D by 3D
 %! a = rand (10, 10, 10);
 %! b = rand (3, 3, 3);
 %! c = convn (a, b, "full");
 %!assert (convn (a, b, "same"), c(2:11,2:11,2:11))
-%!xtest
+%!test <39314>
 %! assert (convn (a, b, "valid"), c(3:10,3:10,3:10));
 %!
 %!test
 %! ## test 3D by 2D
 %! a = rand (10, 10, 10);
 %! b = rand (3, 3);
 %! c = convn (a, b, "full");
 %!assert (convn (a, b, "same"), c(2:11,2:11,:))
-%!xtest
+%!test <39314>
 %! assert (convn (a, b, "valid"), c(3:10,3:10,:));
 %!
 %!test
 %! ## test 2D by 3D
 %! a = rand (10, 10);
 %! b = rand (3, 3, 3);
 %! c = convn (a, b, "full");
 %!assert (convn (a, b, "same"), c(2:11,2:11,2))
 %!assert (convn (a, b, "valid"), c(3:10,3:10,3:2))  # a 7x7x0 matrix
 %!
 %!test
 %! ## test multiple different number of dimensions, with odd and even numbers
 %! a = rand (10, 15, 7, 8, 10);
 %! b = rand (4, 3, 2, 3);
 %! c = convn (a, b, "full");
 %!assert (convn (a, b, "same"), c(3:12,2:16,2:8,2:9,:))
-%!xtest
+%!test <39314>
 %! assert (convn (a, b, "valid"), c(4:10,3:15,2:7,3:8,:));
 
 %!test
 %! a = reshape (floor (magic (16) /10), [4 8 4 2]);
 %! b = reshape (magic (6), [4 3 3]);
 %! c = zeros (7, 10, 6, 2);
 %! c(:,:,1,1) = [
 %!    875  1415  1215   741   288   264   635  1109   687   171
diff --git a/libinterp/corefcn/sparse-xpow.cc b/libinterp/corefcn/sparse-xpow.cc
--- a/libinterp/corefcn/sparse-xpow.cc
+++ b/libinterp/corefcn/sparse-xpow.cc
@@ -234,17 +234,17 @@ scalar_xpow (const S& a, const SM& b)
   if (val.is_complex_type ())
     return SparseComplexMatrix (val.complex_matrix_value ());
   else
     return SparseMatrix (val.matrix_value ());
 }
 
 /*
 %!assert (sparse (2) .^ [3, 4], sparse ([8, 16]))
-%!assert (sparse (2i) .^ [3, 4], sparse ([-0-8i, 16]))
+%!assert <47775> (sparse (2i) .^ [3, 4], sparse ([-0-8i, 16]))
 */
 
 // -*- 1 -*-
 octave_value
 elem_xpow (double a, const SparseMatrix& b)
 {
   octave_value retval;
 
diff --git a/scripts/general/num2str.m b/scripts/general/num2str.m
--- a/scripts/general/num2str.m
+++ b/scripts/general/num2str.m
@@ -111,17 +111,17 @@ function retval = num2str (x, arg)
           fmt = sprintf ("%%%d.%dg", ndgt+7, ndgt);
         else
           ## Integer input
           ndgt += 3;
           if (any (! valid))
             ndgt = max (ndgt, 5);     # Allow space for Inf/NaN
           endif
           ## FIXME: Integers should be masked to show only 16 significant digits
-          ##        See %!xtest with 1e23 below.
+          ##        See test case for bug #36133 below
           fmt = sprintf ("%%%d.0f", ndgt);
         endif
       else
         ## Logical input
         fmt = "%3d";
       endif
     endif
     fmt = do_string_escapes (fmt);  # required now that '\n' is interpreted.
@@ -156,17 +156,17 @@ function retval = num2str (x, arg)
         ## Floating point input
         ndgt = max (ndgt + 5, 5);   # Keep at least 5 significant digits
         ndgt = min (ndgt, 16);      # Cap significant digits at 16
         fmt = sprintf ("%%%d.%dg%%-+%d.%dgi", ndgt+7, ndgt, ndgt+7, ndgt);
       else
         ## Integer input
         ndgt += 3;
         ## FIXME: Integers should be masked to show only 16 significant digits
-        ##        See %!xtest below
+        ##        See test case for bug #36133 below
         fmt = sprintf ("%%%d.0f%%-+%d.0fi", ndgt, ndgt);
       endif
     endif
 
     ## Manipulate the complex value to have real values in the odd
     ## columns and imaginary values in the even columns.
     nd = ndims (x);
     nc = columns (x);
@@ -238,17 +238,17 @@ endfunction
 %!             "3+0i   5+0i   7+0i  -3+0i  -5+0i  -7+0i"
 %!             "4+0i   9+0i   2+0i  -4+0i  -9+0i  -2+0i"]);
 
 ## Clear shared variables
 %!shared
 
 ## FIXME: Integers greater than flintmax() - 1 should be masked to show just
 ##        16 digits of precision.
-%!xtest
+%!test <36133>
 %! assert (num2str (1e23), "100000000000000000000000");
 
 ## Test for bug #44864, extra rows generated from newlines in format
 %!assert (rows (num2str (magic (3), "%3d %3d %3d\n")), 3)
 
 ## Test for bug #45174
 %!assert (num2str ([65 66 67], "%s"), "ABC")
 
diff --git a/scripts/plot/draw/isosurface.m b/scripts/plot/draw/isosurface.m
--- a/scripts/plot/draw/isosurface.m
+++ b/scripts/plot/draw/isosurface.m
@@ -580,11 +580,11 @@ endfunction
 %!error <ISOVAL must be a scalar> fvc = isosurface (val, [iso iso], yy)
 %!error <COL must match the size of V> fvc = isosurface (val, [iso iso]);
 %!error <COL must be passed to return C> [f, v, c] = isosurface (val, iso)
 %!warning <colors will be calculated, but no output argument to receive it.>
 %! [f, v] = isosurface (val, iso, yy);
 
 ## test for __calc_isovalue_from_data__
 ## FIXME: private function cannot be tested, unless bug #38776 is resolved.
-%!xtest
+%!test <38776>
 %! assert (__calc_isovalue_from_data__ (1:5), 3.02);
 
diff --git a/scripts/polynomial/residue.m b/scripts/polynomial/residue.m
--- a/scripts/polynomial/residue.m
+++ b/scripts/polynomial/residue.m
@@ -411,17 +411,17 @@ endfunction
 %! assert (p, p1, 1e-12);
 %! assert (isempty (k));
 %! assert (e, [1; 2]);
 %! [br, ar] = residue (r, p, k);
 %! assert (br, b, 1e-12);
 %! assert (ar, a, 1e-12);
 
 ## The following test is due to Bernard Grung (bug #34266)
-%!xtest
+%!test <34266>
 %! z1 =  7.0372976777e6;
 %! p1 = -3.1415926536e9;
 %! p2 = -4.9964813512e8;
 %! r1 = -(1 + z1/p1)/(1 - p1/p2)/p2/p1;
 %! r2 = -(1 + z1/p2)/(1 - p2/p1)/p2/p1;
 %! r3 = (1 + (p2 + p1)/p2/p1*z1)/p2/p1;
 %! r4 = z1/p2/p1;
 %! r = [r1; r2; r3; r4];
diff --git a/scripts/specfun/realpow.m b/scripts/specfun/realpow.m
--- a/scripts/specfun/realpow.m
+++ b/scripts/specfun/realpow.m
@@ -40,15 +40,15 @@ endfunction
 
 
 %!assert (realpow (1:10, 0.5:0.5:5), power (1:10, 0.5:0.5:5))
 %!assert (realpow (1:10, 0.5:0.5:5), [1:10] .^ [0.5:0.5:5])
 %!test
 %! x = rand (10, 10);
 %! y = randn (10, 10);
 %! assert (x.^y, realpow (x,y));
-%!assert (realpow (1i,2), -1)
+%!assert <47775> (realpow (1i,2), -1)
 
 %!error realpow ()
 %!error realpow (1)
 %!error realpow (1,2,3)
 %!error <produced complex result> realpow (-1, 1/2)
 
diff --git a/scripts/statistics/base/lscov.m b/scripts/statistics/base/lscov.m
--- a/scripts/statistics/base/lscov.m
+++ b/scripts/statistics/base/lscov.m
@@ -110,17 +110,17 @@ function [x, stdx, mse, S] = lscov (A, b
         S(:, :, i) = mse(i) * s;
       endfor
     endif
   endif
 
 endfunction
 
 
-%!test
+%!test <49040>
 %! ## Longley data from the NIST Statistical Reference Dataset
 %! Z = [  60323    83.0   234289   2356     1590    107608  1947
 %!        61122    88.5   259426   2325     1456    108632  1948
 %!        60171    88.2   258054   3682     1616    109773  1949
 %!        61187    89.5   284599   3351     1650    110929  1950
 %!        63221    96.2   328975   2099     3099    112075  1951
 %!        63639    98.1   346999   1932     3594    113270  1952
 %!        64989    99.0   365385   1870     3547    115094  1953
diff --git a/test/classdef/classdef.tst b/test/classdef/classdef.tst
--- a/test/classdef/classdef.tst
+++ b/test/classdef/classdef.tst
@@ -45,17 +45,17 @@
 %!assert (class (p), "foo_value_class")
 %!assert (p.term, 48)
 %!assert (p.rate, 4.0)
 %!assert (p.principle, 50e3)
 %!assert (p.amount, amt, eps ())
 %!assert (amount (p), amt, eps ())
 %!xtest
 %! assert (properties (p), {'rate'; 'term'; 'principle'});
-%!xtest
+%!test <42510>
 %! assert (methods (p), {'amount'; 'foo_value_class'});
 %!assert (isempty (foo_value_class().rate))
 %!error <property `rate' is not constant> foo_value_class.rate
 
 %%  Static method and Constant Property
 %!assert (foo_static_method_constant_property.radians_per_cycle, 2*pi)
 %!assert (foo_static_method_constant_property().radians_per_cycle, 2*pi)
 %!assert (foo_static_method_constant_property().pie, pi)
