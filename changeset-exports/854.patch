# HG changeset patch
# User jwe
# Date 782766135 0
#      Fri Oct 21 19:02:15 1994 +0000
# Node ID fb983bf4fd071c8a21c6046e6a81108e48902b18
# Parent  c346a0268e31c26ed9c64619e5c8c42716607887
[project @ 1994-10-21 19:02:15 by jwe]

diff --git a/src/tc-rep-ass.cc b/src/tc-rep-ass.cc
--- a/src/tc-rep-ass.cc
+++ b/src/tc-rep-ass.cc
@@ -844,25 +844,47 @@ TC_REP::do_vector_assign (const tree_con
       if (error_state)
 	return;
 
       int nr = rows ();
       int nc = columns ();
 
       if (nr == 1)
 	{
-	  for (int i = 0; i < iv.capacity (); i++)
-	    REP_ELEM_ASSIGN (0, iv.elem (i), rhs_m.elem (0, i),
-			     rhs_cm.elem (0, i), rhs.is_real_type ());
+	  if (rhs_nr == 1)
+	    {
+	      for (int i = 0; i < iv.capacity (); i++)
+		REP_ELEM_ASSIGN (0, iv.elem (i), rhs_m.elem (0, i),
+				 rhs_cm.elem (0, i), rhs.is_real_type ());
+	    }
+	  else if (rhs_nc == 1)
+	    {
+	      for (int i = 0; i < iv.capacity (); i++)
+		REP_ELEM_ASSIGN (0, iv.elem (i), rhs_m.elem (i, 0),
+				 rhs_cm.elem (i, 0), rhs.is_real_type ());
+	    }
+	  else
+	    panic_impossible ();
 	}
       else if (nc == 1)
 	{
-	  for (int i = 0; i < iv.capacity (); i++)
-	    REP_ELEM_ASSIGN (iv.elem (i), 0, rhs_m.elem (i, 0),
-			     rhs_cm.elem (i, 0), rhs.is_real_type ());
+	  if (rhs_nr == 1)
+	    {
+	      for (int i = 0; i < iv.capacity (); i++)
+		REP_ELEM_ASSIGN (iv.elem (i), 0, rhs_m.elem (0, i),
+				 rhs_cm.elem (0, i), rhs.is_real_type ());
+	    }
+	  else if (rhs_nc == 1)
+	    {
+	      for (int i = 0; i < iv.capacity (); i++)
+		REP_ELEM_ASSIGN (iv.elem (i), 0, rhs_m.elem (i, 0),
+				 rhs_cm.elem (i, 0), rhs.is_real_type ());
+	    }
+	  else
+	    panic_impossible ();
 	}
       else
 	panic_impossible ();
     }
   else
     panic_impossible ();
 }
 
diff --git a/src/tc-rep-idx.cc b/src/tc-rep-idx.cc
--- a/src/tc-rep-idx.cc
+++ b/src/tc-rep-idx.cc
@@ -61,21 +61,23 @@ TC_REP::do_index (const Octave_object& a
   if (error_state)
     return retval;
 
   if (rows () == 0 || columns () == 0)
     {
       switch (args.length ())
 	{
 	case 2:
-	  if (args(1).rows () != 0 && args(1).columns () != 0)
+	  if (! args(1).is_magic_colon ()
+	      && args(1).rows () != 0 && args(1).columns () != 0)
 	    goto index_error;
 
 	case 1:
-	  if (args(0).rows () != 0 && args(0).columns () != 0)
+	  if (! args(0).is_magic_colon ()
+	      && args(0).rows () != 0 && args(0).columns () != 0)
 	    goto index_error;
 
 	  return Matrix ();
 
 	default:
 	index_error:
 	  ::error ("attempt to index empty matrix");
 	  return retval;
@@ -143,17 +145,17 @@ TC_REP::do_scalar_index (const Octave_ob
 	case 2:
 	  {
 	    tree_constant arg = args(1);
 
 	    if (arg.is_matrix_type ())
 	      {
 		Matrix mj = arg.matrix_value ();
 
-		idx_vector j (mj, user_pref.do_fortran_indexing, "");
+		idx_vector j (mj, user_pref.do_fortran_indexing, "", 1);
 		if (! j)
 		  return retval;
 
 		int len = j.length ();
 		if (len == j.ones_count ())
 		  cols = len;
 	      }
 	    else if (arg.const_type () == magic_colon
@@ -171,17 +173,17 @@ TC_REP::do_scalar_index (const Octave_ob
 	case 1:
 	  {
 	    tree_constant arg = args(0);
 
 	    if (arg.is_matrix_type ())
 	      {
 		Matrix mi = arg.matrix_value ();
 
-		idx_vector i (mi, user_pref.do_fortran_indexing, "");
+		idx_vector i (mi, user_pref.do_fortran_indexing, "", 1);
 		if (! i)
 		  return retval;
 
 		int len = i.length ();
 		if (len == i.ones_count ())
 		  rows = len;
 	      }
 	    else if (arg.const_type () == magic_colon
@@ -486,22 +488,16 @@ TC_REP::fortran_style_matrix_index (cons
 	c_cop_out = complex_matrix->data ();
 
       const double *cop_out_index = mi.data ();
 
       idx_vector iv (mi, 1, "", len);
       if (! iv)
 	return retval;
 
-      if (iv.max () >= nr * nc || iv.min () < 0)
-	{
-	  error ("matrix index out of range");
-	  return retval;
-	}
-
       int result_size = iv.length ();
 
       if (nc == 1 || (nr != 1 && iv.one_zero_only ()))
 	{
 	  CRMATRIX (m, cm, result_size, 1);
 
 	  for (int i = 0; i < result_size; i++)
 	    {
@@ -938,17 +934,23 @@ TC_REP::do_matrix_index (const Range& ri
 				 tree_to_mat_idx (rj.max ()), nr, nc) < 0)
 	      return tree_constant ();
 	    retval = do_matrix_index (ri, rj);
 	  }
       }
       break;
 
     case magic_colon:
-      retval = do_matrix_index (ri, magic_colon);
+      {
+	if (index_check (ri, "row") < 0)
+	  return tree_constant ();
+	if (range_max_check (tree_to_mat_idx (ri.max ()), 0, nr, nc) < 0)
+	  return tree_constant ();
+	retval = do_matrix_index (ri, magic_colon);
+      }
       break;
 
     default:
       panic_impossible ();
       break;
     }
 
   return retval;
