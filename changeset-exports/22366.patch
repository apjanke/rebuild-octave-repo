# HG changeset patch
# User Rik <rik@octave.org>
# Date 1471972348 25200
#      Tue Aug 23 10:12:28 2016 -0700
# Node ID 837df5db571082231040755550d241db04758b57
# Parent  119f408f2dd12c21e9939510453944da21264305
Make graphic functions visually compatible w/Matlab.

* image.m: Turn "box" on.

* legend.m: Use '#' in BIST titles.

* area.m: Turn "box" on.  Fix transpose operator that was accidentally
changed to `"'.

* colorbar.m: Turn "box" on.  Remove logscale colorbar BIST demo
since it doesn't work for Octave or Matlab.

* contour.m: Turn "box" on.

* fill.m: Turn "box" on.

* isosurface.m: Use cell array of strings in annotation box of %!demo
to get multi-line strings.  Remove newline.

* light.m: Use cell array of strings in annotation box of %!demo
to get multi-line strings.

* loglog.m: Turn "box" on.

* loglogerr.m: Turn "box" on.

* __bar__.m: Turn "box" on.

* __quiver__.m: Rename 'h' to 'hax' for clarity.

* quiver.m: Turn "box" on.

* semilogx.m: Turn "box" on.

* semilogy.m: Turn "box" on.

* shrinkfaces.m: Call 'axis auto' to update plot limits before
calling 'axis equal'.  This is a kludge that should be fixed in axis.

* stairs.m: Turn "box" on.

diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -189,17 +189,17 @@ function h = __img__ (hax, do_new, x, y,
           mn = intmin (cls);
           mx = intmax (cls);
           set (hax, "clim", double ([mn, mx]));
         endif
       endif
 
     endif  # ! isempty (img)
 
-    set (hax, "view", [0, 90], "ydir", "reverse", "layer", "top");
+    set (hax, "view", [0, 90], "ydir", "reverse", "layer", "top", "box", "on");
 
   endif  # do_new
 
   h = __go_image__ (hax, "cdata", img, "xdata", xdata, "ydata", ydata,
                          "cdatamapping", "direct", varargin{:});
 
   if (do_new && ! ishold (hax) && ! isempty (img)
       && isscalar (get (hax, "children")))
diff --git a/scripts/plot/appearance/legend.m b/scripts/plot/appearance/legend.m
--- a/scripts/plot/appearance/legend.m
+++ b/scripts/plot/appearance/legend.m
@@ -1447,35 +1447,35 @@ endfunction
 %! legend ("Hello", "World", "interpreter", "foobar");
 
 %!demo
 %! clf;
 %! x = 0:10;
 %! y1 = rand (size (x));
 %! y2 = rand (size (x));
 %! [ax, h1, h2] = plotyy (x, y1, x, y2);
-%! title ("plotyy legend test 1: Blue and Green labels");
+%! title ("plotyy legend test #1: Blue and Green labels");
 %! legend ([h1, h2], {"Blue", "Green"}, "location", "south");
 
 %!demo
 %! clf;
 %! x = 0:10;
 %! y1 = rand (size (x));
 %! y2 = rand (size (x));
 %! [ax, h1, h2] = plotyy (x, y1, x, y2);
-%! title ("plotyy legend test 2: Blue and Green labels");
+%! title ("plotyy legend test #2: Blue and Green labels");
 %! legend ({"Blue", "Green"}, "location", "south");
 
 %!demo
 %! clf;
 %! x = 0:10;
 %! y1 = rand (size (x));
 %! y2 = rand (size (x));
 %! [ax, h1, h2] = plotyy (x, y1, x, y2);
-%! title ("plotyy legend test 3: Blue and Green labels");
+%! title ("plotyy legend test #3: Blue and Green labels");
 %! legend ("Blue", "Green", "location", "south");
 
 %!demo
 %! clf;
 %! plot (1:10, 1:10);
 %! title ("a very long label can sometimes cause problems");
 %! legend ("hello very big world", "location", "northeastoutside");
 
diff --git a/scripts/plot/draw/area.m b/scripts/plot/draw/area.m
--- a/scripts/plot/draw/area.m
+++ b/scripts/plot/draw/area.m
@@ -110,16 +110,21 @@ function h = area (varargin)
 
   oldfig = [];
   if (! isempty (hax))
     oldfig = get (0, "currentfigure");
   endif
   unwind_protect
     hax = newplot (hax);
     htmp = __area__ (hax, x, y, bv, varargin{num_numeric+1:end});
+
+    if (! ishold (hax))
+      set (hax, "box", "on");
+    endif
+
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
     h = htmp;
@@ -243,27 +248,27 @@ function update_data (h, d)
   endfor
 
 endfunction
 
 
 %!demo
 %! ## Verify identity sin^2 + cos^2 = 1
 %! clf;
-%! t = linspace (0, 2*pi, 100)";
+%! t = linspace (0, 2*pi, 100)';
 %! y = [sin(t).^2, cos(t).^2];
 %! area (t, y);
 %! axis tight
 %! legend ("sin^2", "cos^2", "location", "NorthEastOutside");
 %! title ("area() plot");
 
 %!demo
 %! ## Show effects of setting BaseValue
 %! clf;
-%! x = [-2:0.1:2]";
+%! x = [-2:0.1:2]';
 %! y = x.^2 - 1;
 %! subplot (1, 2, 1)
 %!  area (x, y);
 %!  title ({"Parabola y = x^2 -1";"BaseValue = 0"});
 %! subplot (1, 2, 2)
 %!  h = area (x, y);
 %!  set (h, "basevalue", -1);
 %!  title ({"Parabola y = x^2 -1";"BaseValue = -1"});
diff --git a/scripts/plot/draw/colorbar.m b/scripts/plot/draw/colorbar.m
--- a/scripts/plot/draw/colorbar.m
+++ b/scripts/plot/draw/colorbar.m
@@ -190,17 +190,18 @@ function h = colorbar (varargin)
 
     [pos, cpos, vertical, mirror] = ...
        __position_colorbox__ (loc, obj, ancestor (ax, "figure"));
     set (ax, "position", pos);
 
     cax = __go_axes__ (hpar, "tag", "colorbar",
                              "handlevisibility", "on",
                              "activepositionproperty", "position",
-                             "position", cpos);
+                             "position", cpos,
+                             "box", "on");
     addproperty ("location", cax, "radio",
                  "eastoutside|east|westoutside|west|northoutside|north|southoutside|south",
                  loc);
     addproperty ("axes", cax, "handle", ax);
 
     if (vertical)
       ## Use low-level form to avoid calling newplot which changes axes
       hi = image (cax, "xdata", [0,1], "ydata", [cmin, cmax],
@@ -676,23 +677,16 @@ endfunction
 %! contour (x);
 %! xlim ([1, 64]);
 %! ylim ([1, 64]);
 %! colorbar ();
 
 %!demo
 %! clf;
 %! colormap ("default");
-%! imagesc (1 ./ hilb (99));
-%! h = colorbar ();
-%! set (h, "yscale", "log");
-
-%!demo
-%! clf;
-%! colormap ("default");
 %! imagesc (log10 (1 ./ hilb (99)));
 %! h = colorbar ();
 %! ytick = get (h, "ytick");
 %! set (h, "yticklabel", sprintf ("10^{%g}|", ytick));
 
 %!demo
 %! clf;
 %! colormap ("default");
diff --git a/scripts/plot/draw/contour.m b/scripts/plot/draw/contour.m
--- a/scripts/plot/draw/contour.m
+++ b/scripts/plot/draw/contour.m
@@ -67,16 +67,21 @@ function [c, h] = contour (varargin)
   oldfig = [];
   if (! isempty (hax))
     oldfig = get (0, "currentfigure");
   endif
   unwind_protect
     hax = newplot (hax);
 
     [ctmp, htmp] = __contour__ (hax, "none", varargin{:});
+
+    if (! ishold (hax))
+      set (hax, "box", "on");
+    endif
+
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
     c = ctmp;
diff --git a/scripts/plot/draw/fill.m b/scripts/plot/draw/fill.m
--- a/scripts/plot/draw/fill.m
+++ b/scripts/plot/draw/fill.m
@@ -83,16 +83,19 @@ function h = fill (varargin)
 
   oldfig = [];
   if (! isempty (hax))
     oldfig = get (0, "currentfigure");
   endif
   unwind_protect
     hax = newplot (hax);
     old_nxtplt = get (hax, "nextplot");
+    if (! ishold ())
+      set (hax, "box", "on");
+    endif
     unwind_protect
       set (hax, "nextplot", "add");
 
       for i = 1 : length (iargs)
         x = varargin{iargs(i)};
         y = varargin{iargs(i) + 1};
         cdata = varargin{iargs(i) + 2};
 
diff --git a/scripts/plot/draw/isosurface.m b/scripts/plot/draw/isosurface.m
--- a/scripts/plot/draw/isosurface.m
+++ b/scripts/plot/draw/isosurface.m
@@ -410,20 +410,20 @@ endfunction
 %!  view (110, 40);
 %! ## six arguments, no output (mixed x, y, z) and option "noshare"
 %! subplot (2, 2, 4);
 %!  fvc = isosurface (x, yy, z, v, iso, yy, "noshare");
 %!  patch (fvc);
 %!  shading faceted;
 %!  view (110, 40);
 %!  annotation ("textbox", [0.1 0.9 0.9 0.1], ...
-%!      "String", ["Apart from the first plot having a different scale, " ...
-%!      "all four plots must look the same.\n" ...
-%!      "The last plot might have different colors but must have " ...
-%!      "the same shape."], ...
+%!      "String", {["Apart from the first plot having a different scale, " ...
+%!                  "all four plots must look the same."],
+%!                 ["The last plot might have different colors but must " ...
+%!                  "have the same shape."]}, ...
 %!      "HorizontalAlignment", "left", ...
 %!      "FontSize", 12);
 
 %!shared x, y, z, xx, yy, zz, val, iso
 %! x = 0:2;
 %! y = 0:3;
 %! z = 0:1;
 %! [xx, yy, zz]  = meshgrid (x, y, z);
diff --git a/scripts/plot/draw/light.m b/scripts/plot/draw/light.m
--- a/scripts/plot/draw/light.m
+++ b/scripts/plot/draw/light.m
@@ -260,17 +260,17 @@ endfunction
 %!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "AmbientStrength", 1);
 %! isonormals (x+1, y, z, val, h_patch);
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
 %! view (2);
 %! xlabel ("AmbientStrength");
-%! ylabel ("AmbientLightColor [0 1 0]");
+%! ylabel ({"AmbientLightColor", "[0 1 0]"});
 %!
 %! h_axes2 = subplot (3,1,2);
 %! set (h_axes2, "AmbientLightColor", [.5 0 1]);
 %! fv = isosurface (x, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
 %!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "AmbientStrength", 0);
 %! isonormals (x, y, z, val, h_patch);
@@ -283,17 +283,17 @@ endfunction
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
 %!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "AmbientStrength", 1);
 %! isonormals (x+1, y, z, val, h_patch);
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
 %! view (2);
-%! ylabel ("AmbientLightColor [.5 0 1]");
+%! ylabel ({"AmbientLightColor", "[.5 0 1]"});
 %!
 %! h_axes3 = subplot (3,1,1);
 %! set (h_axes3, "AmbientLightColor", "w");
 %! fv = isosurface (x, y, z, val, .039);
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
 %!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "AmbientStrength", 0);
 %! isonormals (x, y, z, val, h_patch);
@@ -306,17 +306,17 @@ endfunction
 %! h_patch = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
 %!                      "FaceLighting", "Gouraud");
 %! set (h_patch, "AmbientStrength", 1);
 %! isonormals (x+1, y, z, val, h_patch);
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
 %! view (2);
-%! ylabel ("AmbientLightColor [1 1 1]");
+%! ylabel ({"AmbientLightColor", "[1 1 1]"});
 %! title ("Effects of AmbientLightColor and AmbientStrength");
 
 %!demo
 %! ## Specular Exponent
 %! clf;
 %! [x,y,z] = meshgrid (-.2:0.02:.2, -.2:0.02:.2, -.2:0.02:.2);
 %! val = (x.^2 + y.^2 + z.^2);
 %!
diff --git a/scripts/plot/draw/loglog.m b/scripts/plot/draw/loglog.m
--- a/scripts/plot/draw/loglog.m
+++ b/scripts/plot/draw/loglog.m
@@ -49,17 +49,17 @@ function h = loglog (varargin)
   if (! isempty (hax))
     oldfig = get (0, "currentfigure");
   endif
   unwind_protect
     hax = newplot (hax);
 
     set (hax, "xscale", "log", "yscale", "log");
     if (! ishold (hax))
-      set (hax, "xminortick", "on", "yminortick", "on");
+      set (hax, "xminortick", "on", "yminortick", "on", "box", "on");
     endif
 
     htmp = __plt__ ("loglog", hax, varargin{:});
 
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
diff --git a/scripts/plot/draw/loglogerr.m b/scripts/plot/draw/loglogerr.m
--- a/scripts/plot/draw/loglogerr.m
+++ b/scripts/plot/draw/loglogerr.m
@@ -59,17 +59,17 @@ function h = loglogerr (varargin)
   if (! isempty (hax))
     oldfig = get (0, "currentfigure");
   endif
   unwind_protect
     hax = newplot (hax);
 
     set (hax, "xscale", "log", "yscale", "log");
     if (! ishold (hax))
-      set (hax, "xminortick", "on", "yminortick", "on");
+      set (hax, "xminortick", "on", "yminortick", "on", "box", "on");
     endif
     htmp = __errplot__ ("loglogerr", hax, varargin{:});
 
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
diff --git a/scripts/plot/draw/private/__bar__.m b/scripts/plot/draw/private/__bar__.m
--- a/scripts/plot/draw/private/__bar__.m
+++ b/scripts/plot/draw/private/__bar__.m
@@ -204,16 +204,17 @@ function varargout = __bar__ (vertical, 
           endif
         endif
         ## Hack prevents color and xlim setting changes when basevalue changes.
         if (vertical)
           set (hax, "clim", [0 1], "xlimmode", "manual");
         else
           set (hax, "clim", [0 1], "ylimmode", "manual");
         endif
+        set (hax, "box", "on");
       endif
     unwind_protect_cleanup
       if (! isempty (oldfig))
         set (0, "currentfigure", oldfig);
       endif
     end_unwind_protect
     if (nargout == 1)
       varargout{1} = htmp;
diff --git a/scripts/plot/draw/private/__quiver__.m b/scripts/plot/draw/private/__quiver__.m
--- a/scripts/plot/draw/private/__quiver__.m
+++ b/scripts/plot/draw/private/__quiver__.m
@@ -18,17 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {} {@var{hg} =} __quiver__ (@dots{})
 ## Undocumented internal function.
 ## @end deftypefn
 
 function hg = __quiver__ (varargin)
 
-  h = varargin{1};
+  hax = varargin{1};
   is3d = varargin{2};
 
   autoscale = 0.9;
   ## Matlab uses 0.2, but Octave's algorithm produces equivalent visual
   ## results if arrowsize=0.33.  Since this is just a non-dimensional
   ## scaling factor we scale the arrowsize property value by 0.33/0.20
   ## in order to get equivalent visual results while keeping equivalent
   ## property values.
@@ -142,17 +142,17 @@ function hg = __quiver__ (varargin)
     endif
     uu = s * u;
     vv = s * v;
     if (is3d)
       ww = s * w;
     endif
   endif
 
-  hstate = get (h, "nextplot");
+  hstate = get (hax, "nextplot");
   unwind_protect
 
     if (have_line_spec)
       ls = linespec.linestyle;
       lc = linespec.color;
     else
       ls = "-";
       lc = __next_line_color__ ();
@@ -162,17 +162,18 @@ function hg = __quiver__ (varargin)
     hg = hggroup ();
     if (is3d)
       args = __add_datasource__ ("quiver3", hg,
                                  {"x", "y", "z", "u", "v", "w"}, args{:});
     else
       args = __add_datasource__ ("quiver", hg,
                                  {"x", "y", "z", "u", "v", "w"}, args{:});
     endif
-    hold on;
+
+    hold (hax, "on");
 
     addproperty ("xdata", hg, "data", x);
     addproperty ("ydata", hg, "data", y);
 
     addproperty ("udata", hg, "data", u);
     addproperty ("vdata", hg, "data", v);
     if (is3d)
       addproperty ("zdata", hg, "data", z);
@@ -296,17 +297,17 @@ function hg = __quiver__ (varargin)
 
     ## Matlab property, although Octave does not implement it.
     addproperty ("hittestarea", hg, "radio", "on|{off}", "off");
 
     if (! isempty (args))
       set (hg, args{:});
     endif
   unwind_protect_cleanup
-    set (h, "nextplot", hstate);
+    set (hax, "nextplot", hstate);
   end_unwind_protect
 
 endfunction
 
 function update_data (h, ~)
 
   x = get (h, "xdata");
   y = get (h, "ydata");
diff --git a/scripts/plot/draw/quiver.m b/scripts/plot/draw/quiver.m
--- a/scripts/plot/draw/quiver.m
+++ b/scripts/plot/draw/quiver.m
@@ -75,16 +75,23 @@ function h = quiver (varargin)
 
   oldfig = [];
   if (! isempty (hax))
     oldfig = get (0, "currentfigure");
   endif
   unwind_protect
     hax = newplot (hax);
     htmp = __quiver__ (hax, false, varargin{:});
+
+    ## FIXME: This should be moved into __quiver__ when problem with
+    ##        re-initialization of title object is fixed.
+    if (! ishold ())
+      set (hax, "box", "on");
+    endif
+
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
   end_unwind_protect
 
   if (nargout > 0)
     h = htmp;
diff --git a/scripts/plot/draw/semilogx.m b/scripts/plot/draw/semilogx.m
--- a/scripts/plot/draw/semilogx.m
+++ b/scripts/plot/draw/semilogx.m
@@ -49,17 +49,17 @@ function h = semilogx (varargin)
   if (! isempty (hax))
     oldfig = get (0, "currentfigure");
   endif
   unwind_protect
     hax = newplot (hax);
 
     set (hax, "xscale", "log");
     if (! ishold (hax))
-      set (hax, "xminortick", "on");
+      set (hax, "xminortick", "on", "box", "on");
     endif
 
     htmp = __plt__ ("semilogx", hax, varargin{:});
 
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
diff --git a/scripts/plot/draw/semilogy.m b/scripts/plot/draw/semilogy.m
--- a/scripts/plot/draw/semilogy.m
+++ b/scripts/plot/draw/semilogy.m
@@ -49,17 +49,17 @@ function h = semilogy (varargin)
   if (! isempty (hax))
     oldfig = get (0, "currentfigure");
   endif
   unwind_protect
     hax = newplot (hax);
 
     set (hax, "yscale", "log");
     if (! ishold (hax))
-      set (hax, "yminortick", "on");
+      set (hax, "yminortick", "on", "box", "on");
     endif
 
     htmp = __plt__ ("semilogy", hax, varargin{:});
 
   unwind_protect_cleanup
     if (! isempty (oldfig))
       set (0, "currentfigure", oldfig);
     endif
diff --git a/scripts/plot/draw/shrinkfaces.m b/scripts/plot/draw/shrinkfaces.m
--- a/scripts/plot/draw/shrinkfaces.m
+++ b/scripts/plot/draw/shrinkfaces.m
@@ -153,59 +153,64 @@ endfunction
 
 %!demo
 %! clf;
 %! faces = [1 2 3; 1 3 4];
 %! vertices = [0 0; 1 0; 1 1; 0 1];
 %! patch ("Faces", faces, "Vertices", vertices, "FaceColor", "none");
 %! fv = shrinkfaces (faces, vertices, 0.25);
 %! patch (fv);
+%! axis auto;   # Kludge required for Octave
 %! axis equal;
 
 %!demo
 %! clf;
 %! faces = [1 2 3 4; 5 6 7 8];
 %! vertices = [0 0; 1 0; 2 1; 1 1; 2 0; 3 0; 4 1; 3.5 1];
 %! patch ("Faces", faces, "Vertices", vertices, "FaceColor", "none");
 %! fv = shrinkfaces (faces, vertices, 0.25);
 %! patch (fv);
+%! axis auto;   # Kludge required for Octave
 %! axis equal;
 %! grid on;
 
 %!demo
 %! clf;
 %! faces = [1 2 3 4];
 %! vertices = [-1 2; 0 0; 1 2; 0 1];
 %! patch ("Faces", faces, "Vertices", vertices, "FaceColor", "none");
 %! fv = shrinkfaces (faces, vertices, 0.25);
 %! patch (fv);
+%! axis auto;   # Kludge required for Octave
 %! axis equal;
 %! grid on;
 %! title "faces which are not convex are clearly not allowed"
 
 %!demo
 %! clf;
 %! [phi r] = meshgrid (linspace (0, 1.5*pi, 16), linspace (1, 2, 4));
 %! tri = delaunay (phi(:), r(:));
 %! v = [r(:).*sin(phi(:)) r(:).*cos(phi(:))];
 %! p = patch ("Faces", tri, "Vertices", v, "FaceColor", "none");
 %! fv = shrinkfaces (p);
 %! patch (fv);
+%! axis auto;   # Kludge required for Octave
 %! axis equal;
 %! grid on;
 
 %!demo
 %! clf;
 %! N = 10;  % N intervals per axis
 %! [x, y, z] = meshgrid (linspace (-4,4,N+1));
 %! val = x.^3 + y.^3 + z.^3;
 %! fv = isosurface (x, y, z, val, 3, z, "noshare");
 %!
 %! p = patch ("Faces", fv.faces, "Vertices", fv.vertices, "FaceVertexCData", ...
 %!            fv.facevertexcdata, "FaceColor", "interp", "EdgeColor", "black");
+%! axis auto;   # Kludge required for Octave
 %! axis equal;
 %! view (115, 30);
 %! drawnow;
 %! shrinkfaces (p, 0.6);
 
 %!shared faces, vertices, nfv, nfv2
 %! faces = [1 2 3];
 %! vertices = [0 0 0; 1 0 0; 1 1 0];
diff --git a/scripts/plot/draw/stairs.m b/scripts/plot/draw/stairs.m
--- a/scripts/plot/draw/stairs.m
+++ b/scripts/plot/draw/stairs.m
@@ -75,16 +75,21 @@ function [xs, ys] = stairs (varargin)
   if (nargout < 2)
     oldfig = [];
     if (! isempty (hax))
       oldfig = get (0, "currentfigure");
     endif
     unwind_protect
       hax = newplot (hax);
       [htmp, xxs, yys] = __stairs__ (true, varargin{:});
+
+      if (! ishold ())
+        set (hax, "box", "on");
+      endif
+
     unwind_protect_cleanup
       if (! isempty (oldfig))
         set (0, "currentfigure", oldfig);
       endif
     end_unwind_protect
     if (nargout == 1)
       xs = htmp;
     endif
