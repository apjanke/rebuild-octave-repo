# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1334682802 14400
#      Tue Apr 17 13:13:22 2012 -0400
# Branch stable
# Node ID 82449d607d208601911bd8ae810112bd20f362ce
# Parent  5bb5fcffa29d0bf1abdb668d471ec0e5f44a74ae
correctly fill struct arrays for assignments that cause resizing (bug #33178)

* oct-map.cc (octave_map::assign): Pass Matrix fill value to cell
array assignment functions.  New test.

diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -966,17 +966,17 @@ octave_map::page (octave_idx_type k) con
 void
 octave_map::assign (const idx_vector& i, const octave_map& rhs)
 {
   if (rhs.xkeys.is_same (xkeys))
     {
       octave_idx_type nf = nfields ();
 
       for (octave_idx_type k = 0; k < nf; k++)
-        xvals[k].assign (i, rhs.xvals[k]);
+        xvals[k].assign (i, rhs.xvals[k], Matrix ());
 
       if (nf > 0)
         dimensions = xvals[0].dims ();
       else
         {
           // Use dummy array. FIXME: Need(?) a better solution.
           Array<char> dummy (dimensions), rhs_dummy (rhs.dimensions);
           dummy.assign (i, rhs_dummy);;
@@ -1009,17 +1009,17 @@ void
 octave_map::assign (const idx_vector& i, const idx_vector& j,
                     const octave_map& rhs)
 {
   if (rhs.xkeys.is_same (xkeys))
     {
       octave_idx_type nf = nfields ();
 
       for (octave_idx_type k = 0; k < nf; k++)
-        xvals[k].assign (i, j, rhs.xvals[k]);
+        xvals[k].assign (i, j, rhs.xvals[k], Matrix ());
 
       if (nf > 0)
         dimensions = xvals[0].dims ();
       else
         {
           // Use dummy array. FIXME: Need(?) a better solution.
           Array<char> dummy (dimensions), rhs_dummy (rhs.dimensions);
           dummy.assign (i, j, rhs_dummy);;
@@ -1052,17 +1052,17 @@ void
 octave_map::assign (const Array<idx_vector>& ia,
                     const octave_map& rhs)
 {
   if (rhs.xkeys.is_same (xkeys))
     {
       octave_idx_type nf = nfields ();
 
       for (octave_idx_type k = 0; k < nf; k++)
-        xvals[k].assign (ia, rhs.xvals[k]);
+        xvals[k].assign (ia, rhs.xvals[k], Matrix ());
 
       if (nf > 0)
         dimensions = xvals[0].dims ();
       else
         {
           // Use dummy array. FIXME: Need(?) a better solution.
           Array<char> dummy (dimensions), rhs_dummy (rhs.dimensions);
           dummy.assign (ia, rhs_dummy);;
@@ -1165,16 +1165,23 @@ octave_map::assign (const octave_value_l
 
       optimize_dimensions ();
     }
 
   if (! error_state && &ref == &tmp)
     setfield (k, tmp);
 }
 
+/*
+%!test
+%! rhs.b = 1;
+%! a(3) = rhs;
+%! assert ({a.b}, {[], [], 1})
+*/
+
 void
 octave_map::delete_elements (const idx_vector& i)
 {
   octave_idx_type nf = nfields ();
   for (octave_idx_type k = 0; k < nf; k++)
     xvals[k].delete_elements (i);
 
   if (nf > 0)
