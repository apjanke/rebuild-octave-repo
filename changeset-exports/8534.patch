# HG changeset patch
# User Thorsten Meyer <thorsten.meyier@gmx.de>
# Date 1232312496 -3600
#      Sun Jan 18 22:01:36 2009 +0100
# Node ID 0eb83938c8bc97f8657d7a4de1a88f10bcbc8b6e
# Parent  fb1b87ea4af98498a68ecc7fa52c86089254d544
Trivial fixes in numbers.txi

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,12 @@
+2009-01-18  Thorsten Meyer  <thorsten.meyier@gmx.de>
+
+	* interpreter/numbers.txi (Numeric Data Types): Trivial fixes.
+
 2009-01-14  Thorsten Meyer  <thorsten.meyier@gmx.de>
 
 	* interpreter/matrix.txi: Add anchor for doc-postpad.
 	
 2008-12-26  Thorsten Meyer  <thorsten.meyier@gmx.de>
 
 	* interpreter/strings.txi: Add space to ischar example.
 	
diff --git a/doc/interpreter/numbers.txi b/doc/interpreter/numbers.txi
--- a/doc/interpreter/numbers.txi
+++ b/doc/interpreter/numbers.txi
@@ -25,18 +25,19 @@ A @dfn{numeric constant} may be a scalar
 may contain complex values.
 
 The simplest form of a numeric constant, a scalar, is a single number
 that can be an integer, a decimal fraction, a number in scientific
 (exponential) notation, or a complex number.  Note that by default numeric
 constants are represented within Octave in double-precision floating
 point format (complex constants are stored as pairs of double-precision
 floating point values).  It is however possible to represent real
-integers as described in @ref{Integer Data Types}. Here are some examples
-of real-valued numeric constants, which all have the same value:
+integers as described in @ref{Integer Data Types}.  Here are some
+examples of real-valued numeric constants, which all have the same
+value:
 
 @example
 @group
 105
 1.05e+2
 1050e-1
 @end group
 @end example
@@ -407,26 +408,27 @@ expression to determine whether they are
 replaces the range expression with a single range constant.
 
 @node Single Precision Data Types
 @section Single Precision Data Types
 
 Octave includes support for single precision data types, and most of the
 functions in Octave accept single precision values and return single
 precion answers. A single precision variable is created with the
-@code{sample} function.
+@code{single} function.
 
 @DOCSTRING(single)
 
 for example
 
 @example
 sngl = single (rand (2, 2))
-    @result{} sngl = 0.37569   0.92982
-               0.11962   0.50876
+     @result{} sngl = 
+        0.37569   0.92982
+        0.11962   0.50876
 class (sngl)
     @result{} single
 @end example
 
 Many functions can also return single precision values directly. For
 example
 
 @example
