# HG changeset patch
# User Rik <rik@octave.org>
# Date 1454215701 28800
#      Sat Jan 30 20:48:21 2016 -0800
# Node ID b5b531ba93cea5828eaea7cfd46d8be65e40f33b
# Parent  4aa8e4b868c91b08f1598a978bca20435125abbc
build: Use configure-time test to check CXSparse version.

* configure.ac: Call OCTAVE_CHECK_CXSPARSE_VERSION_OK macro and error out of
configure if version is < 2.2.

* acinclude.m4 (OCTAVE_CHECK_CXSPARSE_VERSION_OK) : New macro.

* oct-sparse.h: Remove compie-time test for CXSparse version.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1581,16 +1581,24 @@ LIBS="$save_LIBS"
 ### Check for CXSparse library
 
 OCTAVE_CHECK_LIB(cxsparse, CXSparse,
   [CXSparse library not found.  This will result in some lack of functionality for sparse matrices.],
   [suitesparse/cs.h ufsparse/cs.h cxsparse/cs.h cs.h],
   [cs${CXSPARSE_TAG}sqr],
   [C++], [don't use CXSparse library, disable some sparse matrix functionality])
 
+## Additional check for CXSparse version >= 2.2 
+if test $octave_cv_lib_cxsparse = yes; then
+  OCTAVE_CHECK_CXSPARSE_VERSION_OK
+  if test $octave_cv_cxsparse_version_ok = no; then
+    AC_MSG_ERROR([CXSparse library is too old (< version 2.2).  Upgrade CXSparse (SuiteSparse) or configure Octave with --disable-cxsparse"])
+  fi
+fi
+  
 ### Check for UMFPACK library.
 
 save_LIBS="$LIBS"
 save_CPPFLAGS="$CPPFLAGS"
 LIBS="$AMD_LDFLAGS $AMD_LIBS $BLAS_LIBS $FLIBS $LIBS"
 CPPFLAGS="$AMD_CPPFLAGS $CPPFLAGS"
 OCTAVE_CHECK_LIB([umfpack], UMFPACK,
   [UMFPACK not found.  This will result in some lack of functionality for sparse matrices.],
diff --git a/liboctave/util/oct-sparse.h b/liboctave/util/oct-sparse.h
--- a/liboctave/util/oct-sparse.h
+++ b/liboctave/util/oct-sparse.h
@@ -78,41 +78,29 @@ along with Octave; see the file COPYING.
 #elif defined (HAVE_UFSPARSE_CS_H)
 #include <ufsparse/cs.h>
 #elif defined (HAVE_CXSPARSE_CS_H)
 #include <cxsparse/cs.h>
 #elif defined (HAVE_CS_H)
 #include <cs.h>
 #endif
 
-// Yes, it would be better to use a configure script check for
-// required CXSparse features, but that seems more trouble than it is
-// worth in this case.
-
-#if (defined (HAVE_CXSPARSE)                    \
-     && (! defined (CS_VER) \
-         || CS_VER < 2 \
-         || (CS_VER == 2 && CS_SUBVER < 2)))
-#error "Octave requires CXSparse version 2.2 or later"
-#error "Upgrade CXSparse (SuiteSparse) or configure Octave with --disable-cxsparse"
-#endif
-
 #if (defined (HAVE_SUITESPARSE_CHOLMOD_H) \
      || defined (HAVE_UFSPARSE_CHOLMOD_H) \
      || defined (HAVE_CHOLMOD_CHOLMOD_H) \
      || defined (HAVE_CHOLMOD_H))
 #if defined (ENABLE_64)
 #define CHOLMOD_NAME(name) cholmod_l_ ## name
 #else
 #define CHOLMOD_NAME(name) cholmod_ ## name
 #endif
 #endif
 
-// Cope with new suitesparse versions
-//
+// Cope with new SuiteSparse versions
+
 #if defined (SUITESPARSE_VERSION)
 # if SUITESPARSE_VERSION >= SUITESPARSE_VER_CODE (4, 3)
 #  define SUITESPARSE_NAME(name) SuiteSparse_ ## name
 #  define SUITESPARSE_ASSIGN_FPTR(f_name, f_var, f_assign) (SuiteSparse_config.f_name = f_assign)
 #  define SUITESPARSE_ASSIGN_FPTR2(f_name, f_var, f_assign) (SuiteSparse_config.f_name = SUITESPARSE_NAME (f_assign))
 # else
 #  define SUITESPARSE_ASSIGN_FPTR(f_name, f_var, f_assign) (f_var = f_assign)
 #  define SUITESPARSE_ASSIGN_FPTR2(f_name, f_var, f_assign) (f_var = CHOLMOD_NAME (f_assign))
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -175,16 +175,55 @@ return v[3] == 207089 ? 0 : 1;
     fi
   else
     octave_cv_broken_stl_algo_h=no
     warn_stl_algo_h="UNEXPECTED: nth_element test failed.  Refusing to fix except for g++ 4.8.2."
     OCTAVE_CONFIGURE_WARNING([warn_stl_algo_h])
   fi
 ])
 dnl
+dnl Check whether CXSparse is version 2.2 or later
+dnl FIXME: This test uses a version number.  It potentially could
+dnl        be re-written to actually call a function, but is it worth it?
+dnl
+AC_DEFUN([OCTAVE_CHECK_CXSPARSE_VERSION_OK], [
+  AC_CACHE_CHECK([whether CXSparse is version 2.2 or later],
+    [octave_cv_cxsparse_version_ok],
+    [AC_LANG_PUSH(C++)
+    ac_octave_save_CPPFLAGS="$CPPFLAGS"
+    CPPFLAGS="$QT_CPPFLAGS $CPPFLAGS"
+    AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[
+        #if defined (HAVE_SUITESPARSE_CS_H)
+        #include <suitesparse/cs.h>
+        #elif defined (HAVE_UFSPARSE_CS_H)
+        #include <ufsparse/cs.h>
+        #elif defined (HAVE_CXSPARSE_CS_H)
+        #include <cxsparse/cs.h>
+        #elif defined (HAVE_CS_H)
+        #include <cs.h>
+        #endif
+        ]], [[
+        #if (defined (HAVE_CXSPARSE) \
+             && (! defined (CS_VER) \
+                 || CS_VER < 2 \
+                 || (CS_VER == 2 && CS_SUBVER < 2)))
+        #error "Octave requires CXSparse version 2.2 or later"
+        #endif
+        ]])],
+      octave_cv_cxsparse_version_ok=yes,
+      octave_cv_cxsparse_version_ok=no)
+    CPPFLAGS="$ac_octave_save_CPPFLAGS"
+    AC_LANG_POP(C++)
+  ])
+  if test $octave_cv_cxsparse_version_ok = yes; then
+    AC_DEFINE(HAVE_CXSPARSE_VERSION_OK, 1,
+      [Define to 1 if CXSparse is version 2.2 or later.])
+  fi
+])
+dnl
 dnl Check whether the FFTW library supports multi-threading. This macro
 dnl should be called once per FFTW precision passing in the library
 dnl variant (e.g. "fftw3") and a function in the thread support API
 dnl (e.g. "fftw_plan_with_nthreads"). Depending on how FFTW was built,
 dnl the thread functions could be compiled into the main FFTW library or
 dnl could be a separate add-on library that is passed to the linker
 dnl ahead of the main FFTW library.
 dnl
