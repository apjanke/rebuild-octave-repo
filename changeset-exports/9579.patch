# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1251367091 -7200
#      Thu Aug 27 11:58:11 2009 +0200
# Node ID 42a18d5aff7fcc2eb2a2a14ced6530203caf1f98
# Parent  7dafdb8b062f673afbed57e4812c93a96f1b0f2c
make complex scalar cmp ops consistent

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-08-27  Jaroslav Hajek  <highegg@gmail.com>
+
+	* OPERATORS/op-cs-cs.cc: Simplify comparison operators.
+	* OPERATORS/op-fcs-fcs.cc: Ditto.
+
 2009-08-25  David Grundberg  <individ@acc.umu.se>
 
 	* DLD-FUNCTIONS/__magick_read__.cc [HAVE_MAGICK]: Include
 	Magick++.h instead of GraphicsMagick/Magic++.h.
 	* Makefile.in: Replace MAGICK_LIBS with MAGICK_LDFLAGS and
 	MAGICK_LIBS. Replace MAGICK_INCFLAGS with MAGICK_CPPFLAGS.
 	* oct-conf.h.in: Ditto.
 	* toplev.cc (octave_config_info): Ditto.
diff --git a/src/OPERATORS/op-cs-cs.cc b/src/OPERATORS/op-cs-cs.cc
--- a/src/OPERATORS/op-cs-cs.cc
+++ b/src/OPERATORS/op-cs-cs.cc
@@ -91,57 +91,22 @@ DEFBINOP (ldiv, complex, complex)
   Complex d = v1.complex_value ();
 
   if (d == 0.0)
     gripe_divide_by_zero ();
 
   return octave_value (v2.complex_value () / d);
 }
 
-DEFBINOP (lt, complex, complex)
-{
-  CAST_BINOP_ARGS (const octave_complex&, const octave_complex&);
-
-  return real (v1.complex_value ()) < real (v2.complex_value ());
-}
-
-DEFBINOP (le, complex, complex)
-{
-  CAST_BINOP_ARGS (const octave_complex&, const octave_complex&);
-
-  return real (v1.complex_value ()) <= real (v2.complex_value ());
-}
-
-DEFBINOP (eq, complex, complex)
-{
-  CAST_BINOP_ARGS (const octave_complex&, const octave_complex&);
-
-  return v1.complex_value () == v2.complex_value ();
-}
-
-DEFBINOP (ge, complex, complex)
-{
-  CAST_BINOP_ARGS (const octave_complex&, const octave_complex&);
-
-  return real (v1.complex_value ()) >= real (v2.complex_value ());
-}
-
-DEFBINOP (gt, complex, complex)
-{
-  CAST_BINOP_ARGS (const octave_complex&, const octave_complex&);
-
-  return real (v1.complex_value ()) > real (v2.complex_value ());
-}
-
-DEFBINOP (ne, complex, complex)
-{
-  CAST_BINOP_ARGS (const octave_complex&, const octave_complex&);
-
-  return v1.complex_value () != v2.complex_value ();
-}
+DEFBINOP_OP (lt, complex, complex, <)
+DEFBINOP_OP (le, complex, complex, <=)
+DEFBINOP_OP (eq, complex, complex, ==)
+DEFBINOP_OP (ge, complex, complex, >=)
+DEFBINOP_OP (gt, complex, complex, >)
+DEFBINOP_OP (ne, complex, complex, !=)
 
 DEFBINOP_OP (el_mul, complex, complex, *)
 
 DEFBINOP (el_div, complex, complex)
 {
   CAST_BINOP_ARGS (const octave_complex&, const octave_complex&);
 
   Complex d = v2.complex_value ();
diff --git a/src/OPERATORS/op-fcs-fcs.cc b/src/OPERATORS/op-fcs-fcs.cc
--- a/src/OPERATORS/op-fcs-fcs.cc
+++ b/src/OPERATORS/op-fcs-fcs.cc
@@ -89,57 +89,22 @@ DEFBINOP (ldiv, float_complex, float_com
   FloatComplex d = v1.float_complex_value ();
 
   if (d == static_cast<float>(0.0))
     gripe_divide_by_zero ();
 
   return octave_value (v2.float_complex_value () / d);
 }
 
-DEFBINOP (lt, float_complex, float_complex)
-{
-  CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_complex&);
-
-  return real (v1.float_complex_value ()) < real (v2.float_complex_value ());
-}
-
-DEFBINOP (le, float_complex, float_complex)
-{
-  CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_complex&);
-
-  return real (v1.float_complex_value ()) <= real (v2.float_complex_value ());
-}
-
-DEFBINOP (eq, float_complex, float_complex)
-{
-  CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_complex&);
-
-  return v1.float_complex_value () == v2.float_complex_value ();
-}
-
-DEFBINOP (ge, float_complex, float_complex)
-{
-  CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_complex&);
-
-  return real (v1.float_complex_value ()) >= real (v2.float_complex_value ());
-}
-
-DEFBINOP (gt, float_complex, float_complex)
-{
-  CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_complex&);
-
-  return real (v1.float_complex_value ()) > real (v2.float_complex_value ());
-}
-
-DEFBINOP (ne, float_complex, float_complex)
-{
-  CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_complex&);
-
-  return v1.float_complex_value () != v2.float_complex_value ();
-}
+DEFBINOP_OP (lt, float_complex, float_complex, <)
+DEFBINOP_OP (le, float_complex, float_complex, <=)
+DEFBINOP_OP (eq, float_complex, float_complex, ==)
+DEFBINOP_OP (ge, float_complex, float_complex, >=)
+DEFBINOP_OP (gt, float_complex, float_complex, >)
+DEFBINOP_OP (ne, float_complex, float_complex, !=)
 
 DEFBINOP_OP (el_mul, float_complex, float_complex, *)
 
 DEFBINOP (el_div, float_complex, float_complex)
 {
   CAST_BINOP_ARGS (const octave_float_complex&, const octave_float_complex&);
 
   FloatComplex d = v2.float_complex_value ();
