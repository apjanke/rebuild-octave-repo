# HG changeset patch
# User Rik <rik@octave.org>
# Date 1422340618 28800
#      Mon Jan 26 22:36:58 2015 -0800
# Node ID d9c0b08e3da697ffd391e7a64dfb58eaa1c44958
# Parent  884e0c55d92c922d3d54220f5c3b527ab25d2b5e
Fix complex compare operation for issorted float values (bug #44071).

* Array-fC.cc (nan_ascending_compare, nan_descending_compare): Fix typo where
comparison was made between x and x rather than between x and y.

diff --git a/liboctave/array/Array-fC.cc b/liboctave/array/Array-fC.cc
--- a/liboctave/array/Array-fC.cc
+++ b/liboctave/array/Array-fC.cc
@@ -42,26 +42,26 @@ sort_isnan<FloatComplex> (const FloatCom
 }
 
 static bool
 nan_ascending_compare (const FloatComplex& x, const FloatComplex& y)
 {
   return (xisnan (y)
           ? ! xisnan (x)
           : ((std::abs (x) < std::abs (x))
-             || ((std::abs (x) == std::abs (x)) && (arg (x) < arg (x)))));
+             || ((std::abs (x) == std::abs (y)) && (arg (x) < arg (y)))));
 }
 
 static bool
 nan_descending_compare (const FloatComplex& x, const FloatComplex& y)
 {
   return (xisnan (x)
           ? ! xisnan (y)
           : ((std::abs (x) > std::abs (x))
-             || ((std::abs (x) == std::abs (x)) && (arg (x) > arg (x)))));
+             || ((std::abs (x) == std::abs (y)) && (arg (x) > arg (y)))));
 }
 
 Array<FloatComplex>::compare_fcn_type
 safe_comparator (sortmode mode, const Array<FloatComplex>& a, bool allow_chk)
 {
   Array<FloatComplex>::compare_fcn_type result = 0;
 
   if (allow_chk)
