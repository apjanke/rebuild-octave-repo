# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1428982868 14400
#      Mon Apr 13 23:41:08 2015 -0400
# Node ID 8aa424ffc0760d6f2dc0ff82eddd3de7e7712f7a
# Parent  ad1a2c03992bb1a95f309139da540f2b8d4dcabf
handle all end token types when reporting parse errors (bug #44824)

* oct-parse.in.yy (octave_base_parser::end_error,
octave_base_parser::end_token_ok): Handle all end token types in
switch statement.  Alphabetize list of cases (after simple_end).
* token.h (end_tok_type): Alphabetize list of token types (after
simple_end).

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -2054,48 +2054,68 @@ octave_base_parser::end_error (const cha
     = "'%s' command matched by '%s' near line %d column %d";
 
   switch (ettype)
     {
     case token::simple_end:
       error (fmt, type, "end", l, c);
       break;
 
+    case token::classdef_end:
+      error (fmt, type, "endclassdef", l, c);
+      break;
+
+    case token::enumeration_end:
+      error (fmt, type, "endenumeration", l, c);
+      break;
+
+    case token::events_end:
+      error (fmt, type, "endevents", l, c);
+      break;
+
     case token::for_end:
       error (fmt, type, "endfor", l, c);
       break;
 
     case token::function_end:
       error (fmt, type, "endfunction", l, c);
       break;
 
-    case token::classdef_end:
-      error (fmt, type, "endclassdef", l, c);
-      break;
-
     case token::if_end:
       error (fmt, type, "endif", l, c);
       break;
 
+    case token::methods_end:
+      error (fmt, type, "endmethods", l, c);
+      break;
+
+    case token::parfor_end:
+      error (fmt, type, "endparfor", l, c);
+      break;
+
+    case token::properties_end:
+      error (fmt, type, "endproperties", l, c);
+      break;
+
     case token::switch_end:
       error (fmt, type, "endswitch", l, c);
       break;
 
-    case token::while_end:
-      error (fmt, type, "endwhile", l, c);
-      break;
-
     case token::try_catch_end:
       error (fmt, type, "end_try_catch", l, c);
       break;
 
     case token::unwind_protect_end:
       error (fmt, type, "end_unwind_protect", l, c);
       break;
 
+    case token::while_end:
+      error (fmt, type, "endwhile", l, c);
+      break;
+
     default:
       panic_impossible ();
       break;
     }
 }
 
 // Check to see that end tokens are properly matched.
 
@@ -2116,44 +2136,56 @@ octave_base_parser::end_token_ok (token 
       int c = tok->column ();
 
       switch (expected)
         {
         case token::classdef_end:
           end_error ("classdef", ettype, l, c);
           break;
 
+        case token::enumeration_end:
+          end_error ("enumeration", ettype, l, c);
+          break;
+
+        case token::events_end:
+          end_error ("events", ettype, l, c);
+          break;
+
         case token::for_end:
           end_error ("for", ettype, l, c);
           break;
 
-        case token::enumeration_end:
-          end_error ("enumeration", ettype, l, c);
-          break;
-
         case token::function_end:
           end_error ("function", ettype, l, c);
           break;
 
         case token::if_end:
           end_error ("if", ettype, l, c);
           break;
 
+        case token::methods_end:
+          end_error ("methods", ettype, l, c);
+          break;
+
         case token::parfor_end:
           end_error ("parfor", ettype, l, c);
           break;
 
+        case token::properties_end:
+          end_error ("properties", ettype, l, c);
+          break;
+
+        case token::switch_end:
+          end_error ("switch", ettype, l, c);
+          break;
+
         case token::try_catch_end:
           end_error ("try", ettype, l, c);
           break;
 
-        case token::switch_end:
-          end_error ("switch", ettype, l, c);
-          break;
-
         case token::unwind_protect_end:
           end_error ("unwind_protect", ettype, l, c);
           break;
 
         case token::while_end:
           end_error ("while", ettype, l, c);
           break;
 
diff --git a/libinterp/parse-tree/token.h b/libinterp/parse-tree/token.h
--- a/libinterp/parse-tree/token.h
+++ b/libinterp/parse-tree/token.h
@@ -51,19 +51,19 @@ public:
     events_end,
     for_end,
     function_end,
     if_end,
     methods_end,
     parfor_end,
     properties_end,
     switch_end,
+    try_catch_end,
+    unwind_protect_end,
     while_end,
-    try_catch_end,
-    unwind_protect_end
   };
 
   token (int tv, int l = -1, int c = -1);
   token (int tv, bool is_keyword, int l = -1, int c = -1);
   token (int tv, const char *s, int l = -1, int c = -1);
   token (int tv, const std::string& s, int l = -1, int c = -1);
   token (int tv, double d, const std::string& s = std::string (),
          int l = -1, int c = -1);
