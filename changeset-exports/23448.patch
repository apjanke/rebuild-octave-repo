# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1493321192 14400
#      Thu Apr 27 15:26:32 2017 -0400
# Node ID e1c02e7126a9bc9acc065f48973c9bb8a429a762
# Parent  db1fdf4384ddd4b287df4cb1a548326564e7d7c3
avoid calling abort if possible; include cstdlib for declaration if needed

* Sparse.cc, DASPK.cc, svd.cc, data-conv.cc, lo-utils.cc:
Throw error instead of calling abort.

* error.cc, lo-ieee.cc: Include cstdlib for abort declaration.

diff --git a/libinterp/corefcn/error.cc b/libinterp/corefcn/error.cc
--- a/libinterp/corefcn/error.cc
+++ b/libinterp/corefcn/error.cc
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <cstdarg>
+#include <cstdlib>
 #include <cstring>
 
 #include <iomanip>
 #include <iostream>
 #include <sstream>
 #include <string>
 
 #include "bp-table.h"
diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -2245,17 +2245,18 @@ Sparse<T>::sort (octave_idx_type dim, so
 
   octave_sort<T> lsort;
 
   if (mode == ASCENDING)
     lsort.set_compare (sparse_ascending_compare<T>);
   else if (mode == DESCENDING)
     lsort.set_compare (sparse_descending_compare<T>);
   else
-    abort ();
+    (*current_liboctave_error_handler)
+      ("Sparse<T>::sort: invalid MODE");
 
   T *v = m.data ();
   octave_idx_type *mcidx = m.cidx ();
   octave_idx_type *mridx = m.ridx ();
 
   for (octave_idx_type j = 0; j < nc; j++)
     {
       octave_idx_type ns = mcidx[j + 1] - mcidx[j];
@@ -2314,17 +2315,18 @@ Sparse<T>::sort (Array<octave_idx_type> 
 
   octave_sort<T> indexed_sort;
 
   if (mode == ASCENDING)
     indexed_sort.set_compare (sparse_ascending_compare<T>);
   else if (mode == DESCENDING)
     indexed_sort.set_compare (sparse_descending_compare<T>);
   else
-    abort ();
+    (*current_liboctave_error_handler)
+      ("Sparse<T>::sort: invalid MODE");
 
   T *v = m.data ();
   octave_idx_type *mcidx = m.cidx ();
   octave_idx_type *mridx = m.ridx ();
 
   sidx = Array<octave_idx_type> (dim_vector (nr, nc));
   OCTAVE_LOCAL_BUFFER (octave_idx_type, vi, nr);
 
diff --git a/liboctave/numeric/DASPK.cc b/liboctave/numeric/DASPK.cc
--- a/liboctave/numeric/DASPK.cc
+++ b/liboctave/numeric/DASPK.cc
@@ -105,17 +105,17 @@ ddaspk_f (const double& time, const doub
 static F77_INT
 ddaspk_psol (const F77_INT&, const double&, const double *,
              const double *, const double *, const double&,
              const double *, double *, F77_INT *, double *,
              const double&, F77_INT&, double *, F77_INT*)
 {
   BEGIN_INTERRUPT_WITH_EXCEPTIONS;
 
-  abort ();
+  (*current_liboctave_error_handler) ("daspk: PSOL is not implemented");
 
   END_INTERRUPT_WITH_EXCEPTIONS;
 
   return 0;
 }
 
 static F77_INT
 ddaspk_j (const double& time, const double *state, const double *deriv,
@@ -355,17 +355,18 @@ DASPK::do_integrate (double tout)
               if (av_nel == n)
                 {
                   F77_INT lid;
                   if (eiq == 0 || eiq == 2)
                     lid = 40;
                   else if (eiq == 1 || eiq == 3)
                     lid = 40 + n;
                   else
-                    abort ();
+                    (*current_liboctave_error_handler)
+                      ("daspk: invalid value for eiq: %d", eiq);
 
                   for (F77_INT i = 0; i < n; i++)
                     iwork(lid+i) = av(i) ? -1 : 1;
                 }
               else
                 {
                   // FIXME: Should this be a warning?
                   (*current_liboctave_error_handler)
@@ -399,17 +400,18 @@ DASPK::do_integrate (double tout)
           if (av_nel == n)
             {
               F77_INT lid;
               if (eiq == 0 || eiq == 2)
                 lid = 40;
               else if (eiq == 1 || eiq == 3)
                 lid = 40 + n;
               else
-                abort ();
+                (*current_liboctave_error_handler)
+                  ("daspk: invalid value for eiq: %d", eiq);
 
               for (F77_INT i = 0; i < n; i++)
                 iwork(lid+i) = av(i) ? -1 : 1;
             }
         }
 
       if (use_initial_condition_heuristics ())
         {
diff --git a/liboctave/numeric/svd.cc b/liboctave/numeric/svd.cc
--- a/liboctave/numeric/svd.cc
+++ b/liboctave/numeric/svd.cc
@@ -382,17 +382,17 @@ namespace octave
           char jobz = jobu;
 
           std::vector<F77_INT> iwork (8 * std::min (m, n));
 
           gesdd (jobz, m, n, tmp_data, m1, s_vec, u, vt, nrow_vt1,
                  work, lwork, iwork.data (), info);
         }
       else
-        abort ();
+        (*current_liboctave_error_handler) ("svd: unknown driver");
 
       if (! (jobv == 'N' || jobv == 'O'))
         right_sm = right_sm.hermitian ();
     }
 
     // Instantiations we need.
 
     template class svd<Matrix>;
diff --git a/liboctave/util/data-conv.cc b/liboctave/util/data-conv.cc
--- a/liboctave/util/data-conv.cc
+++ b/liboctave/util/data-conv.cc
@@ -267,17 +267,18 @@ oct_data_conv::data_type_size (data_type
       break;
 
     case oct_data_conv::dt_logical:
       retval = sizeof (bool);
       break;
 
     case oct_data_conv::dt_unknown:
     default:
-      abort ();
+      (*current_liboctave_error_handler)
+        ("oct_data_conv::data_type_size: unknown data type");
       break;
     }
 
   return retval;
 }
 
 oct_data_conv::data_type
 oct_data_conv::string_to_data_type (const std::string& str)
diff --git a/liboctave/util/lo-ieee.cc b/liboctave/util/lo-ieee.cc
--- a/liboctave/util/lo-ieee.cc
+++ b/liboctave/util/lo-ieee.cc
@@ -20,16 +20,17 @@ along with Octave; see the file COPYING.
 
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <cmath>
+#include <cstdlib>
 
 #include <limits>
 
 static double lo_inf;
 static double lo_nan;
 static double lo_na;
 
 static float lo_float_inf;
@@ -262,17 +263,20 @@ octave_ieee_init (void)
           break;
 
         default:
           // If the format is unknown, then you will probably not have a
           // useful system, so we will abort here.  Anyone wishing to
           // experiment with building Octave on a system without IEEE
           // floating point should be capable of removing this check and
           // the configure test.
-          // FIXME: Should this be a warning so that abort is reached?
+          //
+          // If the the error handler returns, then we'll abort.
+
           (*current_liboctave_error_handler)
             ("lo_ieee_init: floating point format is not IEEE!  Maybe DLAMCH is miscompiled, or you are using some strange system without IEEE floating point math?");
+
           abort ();
         }
 
       initialized = true;
     }
 }
diff --git a/liboctave/util/lo-utils.cc b/liboctave/util/lo-utils.cc
--- a/liboctave/util/lo-utils.cc
+++ b/liboctave/util/lo-utils.cc
@@ -243,17 +243,17 @@ read_inf_nan_na (std::istream& is, char 
               }
           }
         else
           is.setstate (std::ios::failbit);
       }
       break;
 
     default:
-      abort ();
+      (*current_liboctave_error_handler) ("read_inf_nan_na: invalid character '%c'");
     }
 
   return val;
 }
 
 // Read a double value.  Discard any sign on NaN and NA.
 
 template <typename T>
