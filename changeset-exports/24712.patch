# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1518202656 -3600
#      Fri Feb 09 19:57:36 2018 +0100
# Node ID 95815fc93a3a35b7e0dc4209c2b6bc9b9ea7451f
# Parent  752f61e812f47fc2f8124c3597e5e4e437dff4a5
move shortcuts for tab closing into a separate global settings-section

* shortcut-manager.cc (do_init_data): reorder file/tab closing shortcuts
  from editor;
  (do_fill_treewidget): more descriptive names for the shortcut sections in
  settings dialog, new global section for tab handling, ignore the name
  of file/tab close shortcuts and associate them with the global tabs sections

diff --git a/libgui/src/shortcut-manager.cc b/libgui/src/shortcut-manager.cc
--- a/libgui/src/shortcut-manager.cc
+++ b/libgui/src/shortcut-manager.cc
@@ -315,26 +315,30 @@ shortcut_manager::do_init_data (void)
   init (tr ("Octave Developer Resources"), "main_help:developer",
         QKeySequence ());
   init (tr ("About Octave"), "main_help:about", QKeySequence ());
 
   // news
   init (tr ("Release Notes"), "main_news:release_notes", QKeySequence ());
   init (tr ("Community News"), "main_news:community_news", QKeySequence ());
 
+  // Tab handling
+  // The following shortcuts are moved into a separate tab. The key names
+  // are not change for preserving compatibility with older versions
+  init (tr ("Close Tab"), "editor_file:close", QKeySequence::Close);
+  init (tr ("Close All Tabs"), "editor_file:close_all", QKeySequence ());
+  init (tr ("Close Other Tabs"), "editor_file:close_other", QKeySequence ());
+
   // actions of the editor
 
   // file
   init (tr ("Edit Function"), "editor_file:edit_function",
         QKeySequence (ctrl + Qt::Key_E));
   init (tr ("Save File"), "editor_file:save", QKeySequence::Save);
   init (tr ("Save File As"), "editor_file:save_as", QKeySequence::SaveAs);
-  init (tr ("Close"), "editor_file:close", QKeySequence::Close);
-  init (tr ("Close All"), "editor_file:close_all", QKeySequence ());
-  init (tr ("Close Other Files"), "editor_file:close_other", QKeySequence ());
   init (tr ("Print"), "editor_file:print", QKeySequence::Print);
 
   // edit
   init (tr ("Redo"), "editor_edit:redo", QKeySequence::Redo);
   init (tr ("Cut"), "editor_edit:cut", QKeySequence::Cut);
   init (tr ("Find and Replace"), "editor_edit:find_replace",
         QKeySequence::Find);
   init (tr ("Find Next"), "editor_edit:find_next",
@@ -526,52 +530,55 @@ shortcut_manager::do_fill_treewidget (QT
 #else
   tree_view->header ()->setSectionResizeMode (QHeaderView::ResizeToContents);
 #endif
 
   QTreeWidgetItem *main = new QTreeWidgetItem (tree_view);
   main->setText (0, tr ("Global"));
   main->setExpanded (true);
   QTreeWidgetItem *main_file = new QTreeWidgetItem (main);
-  main_file->setText (0, tr ("File"));
+  main_file->setText (0, tr ("File Menu"));
   QTreeWidgetItem *main_edit = new QTreeWidgetItem (main);
-  main_edit->setText (0, tr ("Edit"));
+  main_edit->setText (0, tr ("Edit Menu"));
   QTreeWidgetItem *main_debug = new QTreeWidgetItem (main);
-  main_debug->setText (0, tr ("Debug"));
+  main_debug->setText (0, tr ("Debug Menu"));
   QTreeWidgetItem *main_window = new QTreeWidgetItem (main);
-  main_window->setText (0, tr ("Window"));
+  main_window->setText (0, tr ("Window Menu"));
   QTreeWidgetItem *main_help = new QTreeWidgetItem (main);
-  main_help->setText (0, tr ("Help"));
+  main_help->setText (0, tr ("Help Menu"));
   QTreeWidgetItem *main_news = new QTreeWidgetItem (main);
-  main_news->setText (0, tr ("News"));
+  main_news->setText (0, tr ("News Menu"));
+  QTreeWidgetItem *main_tabs = new QTreeWidgetItem (main);
+  main_tabs->setText (0, tr ("Tab Handling in Dock Widgets"));
 
   m_level_hash["main_file"]   = main_file;
   m_level_hash["main_edit"]   = main_edit;
   m_level_hash["main_debug"]   = main_debug;
   m_level_hash["main_window"]   = main_window;
   m_level_hash["main_help"]   = main_help;
   m_level_hash["main_news"]   = main_news;
+  m_level_hash["main_tabs"]   = main_tabs;
 
   QTreeWidgetItem *editor = new QTreeWidgetItem (tree_view);
   editor->setText (0, tr ("Editor"));
   editor->setExpanded (true);
   QTreeWidgetItem *editor_file = new QTreeWidgetItem (editor);
-  editor_file->setText (0, tr ("File"));
+  editor_file->setText (0, tr ("File Menu"));
   QTreeWidgetItem *editor_edit = new QTreeWidgetItem (editor);
-  editor_edit->setText (0, tr ("Edit"));
+  editor_edit->setText (0, tr ("Edit Menu"));
   QTreeWidgetItem *editor_view = new QTreeWidgetItem (editor);
-  editor_view->setText (0, tr ("View"));
+  editor_view->setText (0, tr ("View Menu"));
   QTreeWidgetItem *editor_debug = new QTreeWidgetItem (editor);
-  editor_debug->setText (0, tr ("Debug"));
+  editor_debug->setText (0, tr ("Debug Menu"));
   QTreeWidgetItem *editor_run = new QTreeWidgetItem (editor);
-  editor_run->setText (0, tr ("Run"));
+  editor_run->setText (0, tr ("Run Menu"));
   QTreeWidgetItem *editor_help = new QTreeWidgetItem (editor);
-  editor_help->setText (0, tr ("Help"));
+  editor_help->setText (0, tr ("Help Menu"));
   QTreeWidgetItem *editor_tabs = new QTreeWidgetItem (editor);
-  editor_tabs->setText (0, tr ("Tabs"));
+  editor_tabs->setText (0, tr ("Tab Handling"));
 
   m_level_hash["editor_file"] = editor_file;
   m_level_hash["editor_edit"] = editor_edit;
   m_level_hash["editor_view"] = editor_view;
   m_level_hash["editor_debug"] = editor_debug;
   m_level_hash["editor_run"] = editor_run;
   m_level_hash["editor_help"] = editor_help;
   m_level_hash["editor_tabs"] = editor_tabs;
@@ -579,16 +586,26 @@ shortcut_manager::do_fill_treewidget (QT
   connect (tree_view, SIGNAL (itemDoubleClicked (QTreeWidgetItem*, int)),
            this, SLOT (handle_double_clicked (QTreeWidgetItem*, int)));
 
   for (int i = 0; i < m_sc.count (); i++)
     {
       shortcut_t sc = m_sc.at (i);
 
       QTreeWidgetItem *section = m_level_hash[sc.m_settings_key.section (':',0,0)];
+
+      // handle sections which have changed and do not correspond to the
+      // previously defined keyname
+      if (section == editor_file)
+        {
+          // Closing tabs now in global tab handling section
+          if (sc.m_description.mid (0,6) == "Close ")
+            section = main_tabs;
+        }
+
       QTreeWidgetItem *tree_item = new QTreeWidgetItem (section);
 
       // set a slightly transparent foreground for default columns
       QColor fg = QColor (tree_item->foreground (1).color ());
       fg.setAlpha (128);
       tree_item->setForeground (1, QBrush (fg));
 
       // write the shortcuts
