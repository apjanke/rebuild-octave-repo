# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1214833891 -7200
#      Mon Jun 30 15:51:31 2008 +0200
# Node ID 9d080df0c84355b8ecaef4eef3b27308d9daf20b
# Parent  78eef61f75d5a9485276b7b114aa94524d31ee42
new NDArray constructor for ArrayN<octave_idx_type>

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,14 @@
+2008-07-10  David Bateman  <dbateman@free.fr>
+
+	* dNDArray.cc (NDArray::NDArray (const Array<octave_idx_type>&,
+	bool, bool)): New constructor.
+	* dNDArray.h: Provide decl.
+
 2008-07-10  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* lo-specfun.h: Fix typo in erff/erfcf declaration.
 	* lo-specfun.cc: Ditto. Add atanhf implementation.
 
 2008-06-20  Jaroslav Hajek <highegg@gmail.com>
 
 	* MatrixType.h: Add missing include statement.
diff --git a/liboctave/dNDArray.cc b/liboctave/dNDArray.cc
--- a/liboctave/dNDArray.cc
+++ b/liboctave/dNDArray.cc
@@ -36,16 +36,58 @@ along with Octave; see the file COPYING.
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "lo-ieee.h"
 #include "lo-mappers.h"
 
 #if defined (HAVE_FFTW3)
 #include "oct-fftw.h"
 
+NDArray::NDArray (const Array<octave_idx_type>& a, bool zero_based,
+		  bool negative_to_nan)
+{
+  const octave_idx_type *pa = a.fortran_vec ();
+  resize (a.dims ());
+  double *ptmp = fortran_vec ();
+  if (negative_to_nan)
+    {
+      double nan_val = lo_ieee_nan_value ();
+
+      if (zero_based)
+	for (octave_idx_type i = 0; i < a.numel (); i++)
+	  {
+	    double val = static_cast<double> 
+	      (pa[i] + static_cast<octave_idx_type> (1));
+	    if (val <= 0)
+	      ptmp[i] = nan_val;
+	    else
+	      ptmp[i] = val;
+	  }
+      else
+	for (octave_idx_type i = 0; i < a.numel (); i++)
+	  {
+	    double val = static_cast<double> (pa[i]);
+	    if (val <= 0)
+	      ptmp[i] = nan_val;
+	    else
+	      ptmp[i] = val;
+	  }
+    }
+  else
+    {
+      if (zero_based)
+	for (octave_idx_type i = 0; i < a.numel (); i++)
+	  ptmp[i] = static_cast<double> 
+	    (pa[i] + static_cast<octave_idx_type> (1));
+      else
+	for (octave_idx_type i = 0; i < a.numel (); i++)
+	  ptmp[i] = static_cast<double> (pa[i]);
+    }
+}
+
 ComplexNDArray
 NDArray::fourier (int dim) const
 {
   dim_vector dv = dims ();
 
   if (dim > dv.length () || dim < 0)
     return ComplexNDArray ();
 
diff --git a/liboctave/dNDArray.h b/liboctave/dNDArray.h
--- a/liboctave/dNDArray.h
+++ b/liboctave/dNDArray.h
@@ -42,16 +42,19 @@ public:
 
   NDArray (const dim_vector& dv, double val)
     : MArrayN<double> (dv, val) { }
   
   NDArray (const NDArray& a) : MArrayN<double> (a) { }
 
   NDArray (const Matrix& a) : MArrayN<double> (a) { }
 
+  NDArray (const Array<octave_idx_type>& a, bool zero_based = false, 
+	   bool negative_to_nan = false);
+
   template <class U>
   NDArray (const MArrayN<U>& a) : MArrayN<double> (a) { }
 
   template <class U>
   NDArray (const ArrayN<U>& a) : MArrayN<double> (a) { }
 
   template <class U>
   explicit NDArray (const intNDArray<U>& a) : MArrayN<double> (a) { }
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,22 @@
+2008-07-10  David Bateman  <dbateman@free.fr>
+
+	* DLD-FUNCTIONS/lookup.cc (assign): Delete.
+	(Flookup): Use new NDArray constructors rather than assign.
+	* data.cc (Fsort): Use new NDArray constructors rather than 
+	directly assigning.
+	* besselj.cc (int_array2_to_matrix, int_arrayn_to_array,
+	int_array2_to_float_matrix, int_arrayn_to_float_array): Delete.
+	(do-bessel): Use new NDArray constructors.
+	* max.cc (MINMAX_SPARSE_BODY, MINMAX_INT_BODY, MINMAX_SINGLE_BODY,
+	MINMAX_DOUBLE_BODY): Use new NDArray constructors. 
+	* ov-bool.h (array_value, float_array_value): Explictly cast
+	boolean scalar to double before the assignment to avoid ambiguity.
+
 2008-07-10  David Bateman  <dbateman@free.fr>
 
 	* ls-mat4.cc (read_mat_binary_data, save_mat_binary_data): Add
 	loading and saving of sparse matrices.
 	
 2008-07-10  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* Makefile.in: Add OPENGL_LIBS to liboctinterp link command. Add
diff --git a/src/DLD-FUNCTIONS/besselj.cc b/src/DLD-FUNCTIONS/besselj.cc
--- a/src/DLD-FUNCTIONS/besselj.cc
+++ b/src/DLD-FUNCTIONS/besselj.cc
@@ -74,90 +74,16 @@ enum bessel_type
 	    break; \
  \
 	  default: \
 	    break; \
         } \
     } \
   while (0)
 
-static inline Matrix
-int_array2_to_matrix (const Array2<octave_idx_type>& a)
-{
-  octave_idx_type nr = a.rows ();
-  octave_idx_type nc = a.cols ();
-
-  Matrix retval (nr, nc);
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      {
-	OCTAVE_QUIT;
-
-	retval(i,j) = static_cast<double> (a(i,j));
-      }
-
-  return retval;
-}
-
-static inline NDArray
-int_arrayN_to_array (const ArrayN<octave_idx_type>& a)
-{
-  dim_vector dv = a.dims ();
-  int nel = dv.numel ();
-
-  NDArray retval (dv);
-
-  for (int i = 0; i < nel; i++)
-    {
-      OCTAVE_QUIT;
-      
-      retval(i) = static_cast<double> (a(i));
-    }
-
-  return retval;
-}
-
-static inline FloatMatrix
-int_array2_to_float_matrix (const Array2<octave_idx_type>& a)
-{
-  octave_idx_type nr = a.rows ();
-  octave_idx_type nc = a.cols ();
-
-  FloatMatrix retval (nr, nc);
-
-  for (octave_idx_type j = 0; j < nc; j++)
-    for (octave_idx_type i = 0; i < nr; i++)
-      {
-	OCTAVE_QUIT;
-
-	retval(i,j) = static_cast<float> (a(i,j));
-      }
-
-  return retval;
-}
-
-static inline FloatNDArray
-int_arrayN_to_float_array (const ArrayN<octave_idx_type>& a)
-{
-  dim_vector dv = a.dims ();
-  int nel = dv.numel ();
-
-  FloatNDArray retval (dv);
-
-  for (int i = 0; i < nel; i++)
-    {
-      OCTAVE_QUIT;
-      
-      retval(i) = static_cast<float> (a(i));
-    }
-
-  return retval;
-}
-
 static void
 gripe_bessel_arg (const char *fn, const char *arg)
 {
   error ("%s: expecting scalar or matrix as %s argument", fn, arg);
 }
 
 octave_value_list
 do_bessel (enum bessel_type type, const char *fn,
@@ -208,17 +134,17 @@ do_bessel (enum bessel_type type, const 
 		      if (! error_state)
 			{
 			  ArrayN<octave_idx_type> ierr;
 			  octave_value result;
 
 			  DO_BESSEL (type, alpha, x, scaled, ierr, result);
 
 			  if (nargout > 1)
-			    retval(1) = int_arrayN_to_float_array (ierr);
+			    retval(1) = NDArray (ierr);
 
 			  retval(0) = result;
 			}
 		      else
 			gripe_bessel_arg (fn, "second");
 		    }
 		}
 	      else
@@ -244,17 +170,17 @@ do_bessel (enum bessel_type type, const 
 		      if (! error_state)
 			{
 			  Array2<octave_idx_type> ierr;
 			  octave_value result;
 
 			  DO_BESSEL (type, ralpha, cx, scaled, ierr, result);
 
 			  if (nargout > 1)
-			    retval(1) = int_array2_to_float_matrix (ierr);
+			    retval(1) = NDArray (ierr);
 
 			  retval(0) = result;
 			}
 		      else
 			gripe_bessel_arg (fn, "second");
 		    }
 		  else
 		    gripe_bessel_arg (fn, "first");
@@ -272,17 +198,17 @@ do_bessel (enum bessel_type type, const 
 			  if (! error_state)
 			    {
 			      ArrayN<octave_idx_type> ierr;
 			      octave_value result;
 
 			      DO_BESSEL (type, alpha, x, scaled, ierr, result);
 
 			      if (nargout > 1)
-				retval(1) = int_arrayN_to_float_array (ierr);
+				retval(1) = NDArray (ierr);
 
 			      retval(0) = result;
 			    }
 			  else
 			    gripe_bessel_arg (fn, "second");
 			}
 		      else
 			{
@@ -291,17 +217,17 @@ do_bessel (enum bessel_type type, const 
 			  if (! error_state)
 			    {
 			      ArrayN<octave_idx_type> ierr;
 			      octave_value result;
 			  
 			      DO_BESSEL (type, alpha, x, scaled, ierr, result);
 			  
 			      if (nargout > 1)
-				retval(1) = int_arrayN_to_float_array (ierr);
+				retval(1) = NDArray (ierr);
 
 			      retval(0) = result;
 			    }
 			  else
 			    gripe_bessel_arg (fn, "second");
 			}
 		    }
 		  else
@@ -343,17 +269,17 @@ do_bessel (enum bessel_type type, const 
 		      if (! error_state)
 			{
 			  ArrayN<octave_idx_type> ierr;
 			  octave_value result;
 
 			  DO_BESSEL (type, alpha, x, scaled, ierr, result);
 
 			  if (nargout > 1)
-			    retval(1) = int_arrayN_to_array (ierr);
+			    retval(1) = NDArray (ierr);
 
 			  retval(0) = result;
 			}
 		      else
 			gripe_bessel_arg (fn, "second");
 		    }
 		}
 	      else
@@ -379,17 +305,17 @@ do_bessel (enum bessel_type type, const 
 		      if (! error_state)
 			{
 			  Array2<octave_idx_type> ierr;
 			  octave_value result;
 
 			  DO_BESSEL (type, ralpha, cx, scaled, ierr, result);
 
 			  if (nargout > 1)
-			    retval(1) = int_array2_to_matrix (ierr);
+			    retval(1) = NDArray (ierr);
 
 			  retval(0) = result;
 			}
 		      else
 			gripe_bessel_arg (fn, "second");
 		    }
 		  else
 		    gripe_bessel_arg (fn, "first");
@@ -407,17 +333,17 @@ do_bessel (enum bessel_type type, const 
 			  if (! error_state)
 			    {
 			      ArrayN<octave_idx_type> ierr;
 			      octave_value result;
 
 			      DO_BESSEL (type, alpha, x, scaled, ierr, result);
 
 			      if (nargout > 1)
-				retval(1) = int_arrayN_to_array (ierr);
+				retval(1) = NDArray (ierr);
 
 			      retval(0) = result;
 			    }
 			  else
 			    gripe_bessel_arg (fn, "second");
 			}
 		      else
 			{
@@ -426,17 +352,17 @@ do_bessel (enum bessel_type type, const 
 			  if (! error_state)
 			    {
 			      ArrayN<octave_idx_type> ierr;
 			      octave_value result;
 			  
 			      DO_BESSEL (type, alpha, x, scaled, ierr, result);
 			  
 			      if (nargout > 1)
-				retval(1) = int_arrayN_to_array (ierr);
+				retval(1) = NDArray (ierr);
 
 			      retval(0) = result;
 			    }
 			  else
 			    gripe_bessel_arg (fn, "second");
 			}
 		    }
 		  else
@@ -661,17 +587,17 @@ return @code{NaN}.\n\
 		  octave_value result;
 
 		  if (kind > 1)
 		    result = biry (z, kind == 3, scale, ierr);
 		  else
 		    result = airy (z, kind == 1, scale, ierr);
 
 		  if (nargout > 1)
-		    retval(1) = int_arrayN_to_float_array (ierr);
+		    retval(1) = NDArray (ierr);
 
 		  retval(0) = result;
 		}
 	      else
 		error ("airy: expecting complex matrix for Z");
 	    }
 	  else
 	    {
@@ -683,17 +609,17 @@ return @code{NaN}.\n\
 		  octave_value result;
 
 		  if (kind > 1)
 		    result = biry (z, kind == 3, scale, ierr);
 		  else
 		    result = airy (z, kind == 1, scale, ierr);
 
 		  if (nargout > 1)
-		    retval(1) = int_arrayN_to_array (ierr);
+		    retval(1) = NDArray (ierr);
 
 		  retval(0) = result;
 		}
 	      else
 		error ("airy: expecting complex matrix for Z");
 	    }
 	}
     }
diff --git a/src/DLD-FUNCTIONS/lookup.cc b/src/DLD-FUNCTIONS/lookup.cc
--- a/src/DLD-FUNCTIONS/lookup.cc
+++ b/src/DLD-FUNCTIONS/lookup.cc
@@ -44,35 +44,16 @@ along with Octave; see the file COPYING.
 static
 bool
 contains_char (const std::string& str, char c)
 {
   return (str.find (c) != std::string::npos 
 	  || str.find (std::toupper (c)) != std::string::npos);
 }
 
-// FIXME -- remove these one once octave_value supports octave_idx_type.
-static octave_value&
-assign (octave_value& ov, octave_idx_type idx)
-{
-  double tmp = idx;
-  ov = tmp;
-  return ov;
-}
-
-static octave_value&
-assign (octave_value& ov, const ArrayN<octave_idx_type>& ida)
-{
-  NDArray tmp (ida.dims ());
-  for (int i = 0; i < ida.numel (); i++)
-    tmp(i) = ida(i);
-  ov = tmp;
-  return ov;
-}
-
 // normal ascending comparator
 static bool
 ov_str_less (const octave_value& a, const octave_value& b)
 {
   return a.string_value () < b.string_value ();
 }
 
 // normal descending comparator
@@ -234,18 +215,17 @@ For string lookup, 'i' indicates case-in
 			y.data (), y.length (), idx.fortran_vec (),
 			std::greater<double> ());
 	  else
 	    seq_lookup (table.data (), offset, size, 
 			y.data (), y.length (), idx.fortran_vec (),
 			std::less<double> ());
 	}
 
-      //retval(0) = idx;
-      assign (retval(0), idx);
+      retval(0) = NDArray (idx);
     }
   else if (str_case)
     {
       Cell table = argtable.cell_value ();
       
       bool (*ov_str_comp) (const octave_value&, const octave_value&);
 
       bool icase = false, desc;
@@ -283,28 +263,26 @@ For string lookup, 'i' indicates case-in
               ArrayN<octave_idx_type> idx (y.dims ());
 
 
 
               for (int i = 0; i < y.numel (); i++)
                   idx(i) = bin_lookup (table.data (), table.length (), y(i), 
                                        std::ptr_fun (ov_str_comp));
 
-              //retval(0) = idx;
-              assign (retval(0), idx);
+              retval(0) = NDArray (idx);
             }
           else
             {
               octave_idx_type idx;
 
               idx = bin_lookup (table.data (), table.length (), argy, 
                                 std::ptr_fun (ov_str_comp));
 
-              //retval(0) = idx;
-              assign (retval(0), idx);
+              retval(0) = static_cast<double> (idx);
             }
         }
       else
         error("lookup: table is not a cell array of strings.");
     }
   else
     print_usage ();
 
diff --git a/src/DLD-FUNCTIONS/max.cc b/src/DLD-FUNCTIONS/max.cc
--- a/src/DLD-FUNCTIONS/max.cc
+++ b/src/DLD-FUNCTIONS/max.cc
@@ -95,31 +95,17 @@ along with Octave; see the file COPYING.
 	    } \
 	} \
       else \
 	gripe_wrong_type_arg (#FCN, arg1); \
  \
       octave_idx_type len = index.numel (); \
  \
       if (len > 0) \
-	{ \
-	  double nan_val = lo_ieee_nan_value (); \
- \
-	  NDArray idx (index.dims ()); \
- \
-	  for (octave_idx_type i = 0; i < len; i++) \
-	    { \
-	      OCTAVE_QUIT; \
-	      octave_idx_type tmp = index.elem (i) + 1; \
-	      idx.elem (i) = (tmp <= 0) \
-		? nan_val : static_cast<double> (tmp); \
-	    } \
- \
-	  retval(1) = idx; \
-	} \
+	retval(1) = NDArray (index, true, true);	\
       else \
 	retval(1) = NDArray (); \
     } \
   else \
     { \
       int arg1_is_scalar = arg1.is_scalar_type (); \
       int arg2_is_scalar = arg2.is_scalar_type (); \
  \
@@ -271,33 +257,19 @@ along with Octave; see the file COPYING.
 	    } \
 	} \
       else \
 	gripe_wrong_type_arg (#FCN, arg1); \
  \
       octave_idx_type len = index.numel (); \
  \
       if (len > 0) \
-	{ \
-	  float nan_val = lo_ieee_nan_value (); \
- \
-	  FloatNDArray idx (index.dims ()); \
- \
-	  for (octave_idx_type i = 0; i < len; i++) \
-	    { \
-	      OCTAVE_QUIT; \
-	      octave_idx_type tmp = index.elem (i) + 1; \
-	      idx.elem (i) = (tmp <= 0) \
-		? nan_val : static_cast<float> (tmp); \
-	    } \
- \
-	  retval(1) = idx; \
-	} \
+	retval(1) = NDArray (index, true, true);	\
       else \
-	retval(1) = FloatNDArray (); \
+	retval(1) = NDArray (); \
     } \
   else \
     { \
       int arg1_is_scalar = arg1.is_scalar_type (); \
       int arg2_is_scalar = arg2.is_scalar_type (); \
  \
       int arg1_is_complex = arg1.is_complex_type (); \
       int arg2_is_complex = arg2.is_complex_type (); \
@@ -418,31 +390,17 @@ along with Octave; see the file COPYING.
         { \
 	  TYP ## NDArray n = m. FCN (index, dim);	\
 	  retval(0) = n; \
 	} \
  \
       octave_idx_type len = index.numel (); \
  \
       if (len > 0) \
-	{ \
-	  double nan_val = lo_ieee_nan_value (); \
- \
-	  NDArray idx (index.dims ()); \
- \
-	  for (octave_idx_type i = 0; i < len; i++) \
-	    { \
-	      OCTAVE_QUIT; \
-	      octave_idx_type tmp = index.elem (i) + 1; \
-	      idx.elem (i) = (tmp <= 0) \
-		? nan_val : static_cast<double> (tmp); \
-	    } \
- \
-	  retval(1) = idx; \
-	} \
+	retval(1) = NDArray (index, true, true);	\
       else \
 	retval(1) = NDArray (); \
     } \
   else \
     { \
       int arg1_is_scalar = arg1.is_scalar_type (); \
       int arg2_is_scalar = arg2.is_scalar_type (); \
  \
@@ -513,31 +471,17 @@ along with Octave; see the file COPYING.
 	       octave_sparse_complex_matrix::static_type_id ()) \
 	retval(0) = arg1.sparse_complex_matrix_value () .FCN (index, dim); \
       else \
 	gripe_wrong_type_arg (#FCN, arg1); \
  \
       octave_idx_type len = index.numel (); \
  \
       if (len > 0) \
-	{ \
-	  double nan_val = lo_ieee_nan_value (); \
- \
-	  NDArray idx (index.dims ()); \
- \
-	  for (octave_idx_type i = 0; i < len; i++) \
-	    { \
-	      OCTAVE_QUIT; \
-	      octave_idx_type tmp = index.elem (i) + 1; \
-	      idx.elem (i) = (tmp <= 0) \
-		? nan_val : static_cast<double> (tmp); \
-	    } \
- \
-	  retval(1) = idx; \
-	} \
+	retval(1) = NDArray (index, true, true);	\
       else \
 	retval(1) = NDArray (); \
     } \
   else \
     { \
       int arg1_is_scalar = arg1.is_scalar_type (); \
       int arg2_is_scalar = arg2.is_scalar_type (); \
  \
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -5243,26 +5243,17 @@ ordered lists.\n\
 	}
     }
 
   if (return_idx)
     {
       Array<octave_idx_type> sidx;
 
       retval (0) = arg.sort (sidx, dim, smode);
-
-      octave_idx_type *ps = sidx.fortran_vec ();
-      NDArray midx (sidx.dims ());
-      double *pm = midx.fortran_vec ();
-
-      for (octave_idx_type i = 0; i < sidx.numel (); i++)
-	pm [i] = static_cast<double> 
-	  (ps [i] + static_cast<octave_idx_type> (1));
-
-      retval (1) = midx;
+      retval (1) = NDArray (sidx, true);
     }
   else
     retval(0) = arg.sort (dim, smode);
 
   return retval;
 }
 
 /*
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -129,20 +129,20 @@ public:
 
   Matrix matrix_value (bool = false) const
     { return Matrix (1, 1, scalar); }
 
   FloatMatrix float_matrix_value (bool = false) const
     { return FloatMatrix (1, 1, scalar); }
 
   NDArray array_value (bool = false) const
-    { return NDArray (dim_vector (1, 1), scalar); }
+    { return NDArray (dim_vector (1, 1), static_cast<double> (scalar)); }
 
   FloatNDArray float_array_value (bool = false) const
-    { return FloatNDArray (dim_vector (1, 1), scalar); }
+    { return FloatNDArray (dim_vector (1, 1), static_cast<double> (scalar)); }
 
   Complex complex_value (bool = false) const { return scalar; }
 
   FloatComplex float_complex_value (bool = false) const { return scalar; }
 
   ComplexMatrix complex_matrix_value (bool = false) const
     { return ComplexMatrix (1, 1, Complex (scalar)); }
 
