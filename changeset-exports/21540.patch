# HG changeset patch
# User Lachlan Andrew <lachlanbis@gmail.com>
# Date 1458786940 -39600
#      Thu Mar 24 13:35:40 2016 +1100
# Node ID ffb4770ba079a2de039dee0844dc36392586df21
# Parent  212bafe8413ae18b6d8efe0fadd43957aec768c2
Make median preserve discrete types (bug #47515).

* median.m: Replace mean by "native" sum (or max for logical), and
avoid assigning NaN to non-float types.

* data.cc (Fnth_element): Allow type bool, treated as an integer.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -6924,16 +6924,17 @@ the ratio K/M is small; otherwise, it ma
           MAKE_INT_BRANCH (int8);
           MAKE_INT_BRANCH (int16);
           MAKE_INT_BRANCH (int32);
           MAKE_INT_BRANCH (int64);
           MAKE_INT_BRANCH (uint8);
           MAKE_INT_BRANCH (uint16);
           MAKE_INT_BRANCH (uint32);
           MAKE_INT_BRANCH (uint64);
+          MAKE_INT_BRANCH (bool);
 #undef MAKE_INT_BRANCH
         default:
           if (argx.is_cellstr ())
             retval = argx.cellstr_value ().nth_element (n, dim);
           else
             err_wrong_type_arg ("nth_element", argx);
         }
     }
diff --git a/scripts/statistics/base/median.m b/scripts/statistics/base/median.m
--- a/scripts/statistics/base/median.m
+++ b/scripts/statistics/base/median.m
@@ -36,16 +36,19 @@
 ## @group
 ##               x(ceil(N/2))             N odd
 ## median (x) =
 ##              (x(N/2) + x((N/2)+1))/2   N even
 ## @end group
 ## @end example
 ##
 ## @end ifnottex
+## If @var{x} is of a discrete type such as integer or logical, then
+## the case of even N rounds up (or toward @qcode{true}).
+##
 ## If @var{x} is a matrix, compute the median value for each column and
 ## return them in a row vector.
 ##
 ## If the optional @var{dim} argument is given, operate along this dimension.
 ## @seealso{mean, mode}
 ## @end deftypefn
 
 ## Author: jwe
@@ -75,20 +78,25 @@ function retval = median (x, dim)
     endif
   endif
 
   n = size (x, dim);
   k = floor ((n+1) / 2);
   if (mod (n, 2) == 1)
     retval = nth_element (x, k, dim);
   else
-    retval = mean (nth_element (x, k:k+1, dim), dim);
+    retval = sum (nth_element (x, k:k+1, dim), dim, "native") / 2;
+    if (islogical (x))
+      retval = logical (retval);
+    endif
   endif
   ## Inject NaNs where needed, to be consistent with Matlab.
-  retval(any (isnan (x), dim)) = NaN;
+  if (isfloat (x))
+    retval(any (isnan (x), dim)) = NaN;
+  endif
 
 endfunction
 
 
 %!test
 %! x = [1, 2, 3, 4, 5, 6];
 %! x2 = x';
 %! y = [1, 2, 3, 4, 5, 6, 7];
@@ -108,16 +116,23 @@ endfunction
 %! rand ("seed", 2);
 %! a = rand (2,3,4,5);
 %! b = rand (3,4,6,5);
 %! x = sort (a, 4);
 %! y = sort (b, 3);
 %!assert (median (a, 4), x(:, :, :, 3))
 %!assert (median (b, 3), (y(:, :, 3, :) + y(:, :, 4, :))/2)
 
+## Test non-floating point types
+%!assert (median ([true, false]), true);
+%!assert (median (uint8 ([1, 3])), uint8 (2));
+%!assert (median (int8 ([1, 3, 4])), int8 (3));
+%!assert (median (single ([1, 3, 4])), single (3));
+%!assert (median (single ([1, 3, NaN])), single (NaN));
+
 ## Test input validation
 %!error median ()
 %!error median (1, 2, 3)
 %!error <X must be a numeric> median ({1:5})
 %!error <X cannot be an empty matrix> median ([])
 %!error <DIM must be an integer> median (1, ones (2,2))
 %!error <DIM must be an integer> median (1, 1.5)
 %!error <DIM must be .* a valid dimension> median (1, 0)
