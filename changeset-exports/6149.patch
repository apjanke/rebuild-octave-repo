# HG changeset patch
# User jwe
# Date 1163096816 0
#      Thu Nov 09 18:26:56 2006 +0000
# Node ID 3a68a2dc6eb170945226c97073e811e4507534c0
# Parent  4010c7474c9bc254abc17cc4fc50168c86dbc54b
[project @ 2006-11-09 18:26:56 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2006-11-09  Michael Goffioul  <michael.goffioul@swing.be>
+
+	* configure.in (OCTAVE_LOCAL_BUFFER): Don't access first element
+	if size is 0.
+
 2006-11-06  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* configure.in (CRUFT_DLL_DEFS, OCTAVE_DLL_DEFS, OCTINTERP_DLL_DEFS):
 	Also rename in AC_SUBST calls.
 	* Makeconf.in (ALL_CFLAGS): Use DLL_CDEFS instead of XTRA_CDEFS.
 	(ALL_CXXFLAGS): Use DLL_CDEFS instead of XTRA_CXXDEFS.
 
 2006-11-03  John W. Eaton  <jwe@octave.org>
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -24,17 +24,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### Preserve CFLAGS and CXXFLAGS from the environment before doing
 ### anything else because we don't know which macros might call
 ### AC_PROG_CC or AC_PROG_CXX.
 
 EXTERN_CFLAGS="$CFLAGS"
 EXTERN_CXXFLAGS="$CXXFLAGS"
 
 AC_INIT
-AC_REVISION($Revision: 1.544 $)
+AC_REVISION($Revision: 1.545 $)
 AC_PREREQ(2.57)
 AC_CONFIG_SRCDIR([src/octave.cc])
 AC_CONFIG_HEADER(config.h)
 
 OCTAVE_HOST_TYPE
 
 AC_DEFINE(OCTAVE_SOURCE, 1, [Define if this is Octave.])
   
@@ -1915,17 +1915,17 @@ typedef int sig_atomic_t;
   T buf[size]
 
 #else
 
 */
 
 #define OCTAVE_LOCAL_BUFFER(T, buf, size) \
   std::vector< T > buf ## _vector (size); \
-  T *buf = &(buf ## _vector[0])
+  T *buf = ((size) > 0 ? &(buf ## _vector[0]) : 0)
 
 /* #endif */
 
 #if defined (__DECCXX)
 #define __USE_STD_IOSTREAM
 #endif
 
 #if defined (_UNICOS)
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,27 @@
+2006-11-09  John W. Eaton  <jwe@octave.org>
+
+	* ov-usr-fcn.h (octave_user_function::inline_function):
+	 New data member.
+	(octave_user_function::mark_as_inline_function): Set it.
+	(octave_user_function::is_inline_function): Check it.
+	* ov-usr-fcn.cc (octave_user_function::do_multi_index_op):
+	Also skip setting curr_parent_fucntion if evaluating an inline
+	function.
+	(octave_user_function::octave_user_function):
+	 Initialize inline_function.
+	* pt-fcn-handle.cc (tree_anon_fcn_handle::rvalue):
+	Mark user function as inline here.
+
+2006-11-09  Michael Goffioul  <michael.goffioul@swing.be>
+
+	* load-path.cc (load_path::move): Don't use reference to file_info
+	object that will be erased.
+
 2006-11-07  John W. Eaton  <jwe@octave.org>
 
 	* utils.cc (file_in_path): Don't unconditionally return "".
 
 	* pager.cc (default_pager): Don't append options here.
 	(pager_command): New function.
 	(do_sync): Use it.
 	(VPAGER_FLAGS): New variable.
diff --git a/src/load-path.cc b/src/load-path.cc
--- a/src/load-path.cc
+++ b/src/load-path.cc
@@ -320,17 +320,17 @@ load_path::move (dir_info_list_iterator 
 	  else
 	    {
 	      for (std::list<file_info>::iterator p = file_info_list.begin ();
 		   p != file_info_list.end ();
 		   p++)
 		{
 		  if (p->dir_name == dir)
 		    {
-		      file_info& fi = *p;
+		      file_info fi = *p;
 
 		      file_info_list.erase (p);
 
 		      if (at_end)
 			file_info_list.push_back (fi);
 		      else
 			file_info_list.push_front (fi);
 
diff --git a/src/ov-usr-fcn.cc b/src/ov-usr-fcn.cc
--- a/src/ov-usr-fcn.cc
+++ b/src/ov-usr-fcn.cc
@@ -71,20 +71,20 @@ DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (oct
 octave_user_function::octave_user_function
   (tree_parameter_list *pl, tree_parameter_list *rl,
    tree_statement_list *cl, symbol_table *st)
   : octave_function (std::string (), std::string ()),
     param_list (pl), ret_list (rl), cmd_list (cl),
     sym_tab (st), lead_comm (), trail_comm (), file_name (),
     t_parsed (static_cast<time_t> (0)),
     t_checked (static_cast<time_t> (0)),
-    system_fcn_file (false), call_depth (0),
-    num_named_args (0), nested_function (false),
-    args_passed (), num_args_passed (0), symtab_entry (0),
-    argn_sr (0), nargin_sr (0), nargout_sr (0), varargin_sr (0)
+    system_fcn_file (false), call_depth (0), num_named_args (0),
+    nested_function (false), inline_function (false), args_passed (),
+    num_args_passed (0), symtab_entry (0), argn_sr (0),
+    nargin_sr (0), nargout_sr (0), varargin_sr (0)
 {
   if (param_list)
     num_named_args = param_list->length ();
 }
 
 octave_user_function::~octave_user_function (void)
 {
   delete param_list;
@@ -298,17 +298,17 @@ octave_user_function::do_multi_index_op 
 
   unwind_protect_ptr (curr_caller_statement);
   curr_caller_statement = curr_statement;
 
   octave_call_stack::push (this);
 
   unwind_protect::add (octave_call_stack::unwind_pop, 0);
 
-  if (! is_nested_function ())
+  if (! (is_nested_function () || is_inline_function ()))
     {
       unwind_protect_ptr (curr_parent_function);
       curr_parent_function = this;
     }
 
   // Save and restore args passed for recursive calls.
 
   save_args_passed (args);
diff --git a/src/ov-usr-fcn.h b/src/ov-usr-fcn.h
--- a/src/ov-usr-fcn.h
+++ b/src/ov-usr-fcn.h
@@ -141,16 +141,20 @@ public:
   octave_value_list octave_all_va_args (void);
 
   void stash_function_name (const std::string& s) { my_name = s; }
 
   void mark_as_nested_function (void) { nested_function = true; }
 
   bool is_nested_function (void) const { return nested_function; }
 
+  void mark_as_inline_function (void) { inline_function = true; }
+
+  bool is_inline_function (void) const { return inline_function; }
+
   void save_args_passed (const octave_value_list& args)
     {
       if (call_depth > 1)
 	saved_args.push (args_passed);
 
       args_passed = args;
     }
 
@@ -235,16 +239,19 @@ private:
   int call_depth;
 
   // The number of arguments that have names.
   int num_named_args;
 
   // TRUE means this is a nested function.
   bool nested_function;
 
+  // TRUE means this is an inline function.
+  bool inline_function;
+
   // The values that were passed as arguments.
   octave_value_list args_passed;
 
   // A place to store the passed args for recursive calls.
   std::stack<octave_value_list> saved_args;
 
   // The number of arguments passed in.
   int num_args_passed;
diff --git a/src/pt-fcn-handle.cc b/src/pt-fcn-handle.cc
--- a/src/pt-fcn-handle.cc
+++ b/src/pt-fcn-handle.cc
@@ -113,16 +113,18 @@ tree_anon_fcn_handle::rvalue (void)
 
   tree_parameter_list *new_ret_list
     = ret_list ? ret_list->dup (new_sym_tab) : 0;
 
   octave_user_function *uf
     = new octave_user_function (new_param_list, new_ret_list,
 				new_cmd_list, new_sym_tab);
 
+  uf->mark_as_inline_function ();
+
   octave_value fcn (uf);
 
   octave_value fh (new octave_fcn_handle (fcn, "@<anonymous>"));
 
   return fh;
 }
 
 octave_value_list
