# HG changeset patch
# User jwe
# Date 1191516017 0
#      Thu Oct 04 16:40:17 2007 +0000
# Node ID 4aef2ca14cf97f4de1a83ac64f135e9f76179c61
# Parent  9dabcb305dda09fa47696e9233b165688623019d
[project @ 2007-10-04 16:38:11 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+2007-10-03  John W. Eaton  <jwe@octave.org>
+
+	* aclocal.m4 (OCTAVE_PROG_SED): Also check for \(X\|Y\) style
+	regular expression alternation.
+
 2007-10-01  John W. Eaton  <jwe@octave.org>
 
 	* aclocal.m4 (OCTAVE_CHECK_STRPTIME): Delete.
 	* configure.in: Don't use OCTAVE_CHECK_STRPTIME, simply check for
 	strptime.
 
 2007-09-18  Thomas Treichl  <Thomas.Treichl@gmx.net>
 
diff --git a/aclocal.m4 b/aclocal.m4
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -801,19 +801,20 @@ AC_CACHE_CHECK([if mkdir takes one argum
 AC_LANG_POP(C++)
 if test $octave_cv_mkdir_takes_one_arg = yes ; then
   AC_DEFINE(MKDIR_TAKES_ONE_ARG, 1, [Define if host mkdir takes a single argument.])
 fi
 ])
 # OCTAVE_PROG_SED
 # --------------
 # Check for a fully-functional sed program, that truncates
-# as few characters as possible.  Prefer GNU sed if found.
+# as few characters as possible and that supports "\(X\|Y\)"
+# style regular expression alternation.  Prefer GNU sed if found.
 AC_DEFUN([OCTAVE_PROG_SED],
-[AC_MSG_CHECKING([for a sed that does not truncate output])
+[AC_MSG_CHECKING([for a usable sed])
 if test -z "$SED"; then
   AC_CACHE_VAL(ac_cv_path_sed, [
   # Loop through the user's path and test for sed and gsed.
   # Then use that list of sed's as ones to test for truncation.
   _AS_PATH_WALK([$PATH],
     [for ac_prog in sed gsed; do
       for ac_exec_ext in '' $ac_executable_extensions; do
 	if AS_EXECUTABLE_P(["$as_dir/$ac_prog$ac_exec_ext"]); then
@@ -832,16 +833,20 @@ if test -z "$SED"; then
       cat /dev/null > "$tmp/sed.in"
       _count=0
       echo $ECHO_N "0123456789$ECHO_C" >"$tmp/sed.in"
       # Check for GNU sed and select it if it is found.
       if "${_sed}" --version 2>&1 < /dev/null | egrep '(GNU)' > /dev/null; then
 	octave_cv_path_sed=${_sed}
 	break;
       fi
+      # Reject if RE alternation is not handled.
+      if test "`echo 'this and that' | ${_sed} -n 's/\(this\|that\).*$/\1/p'`" != "this"; then
+        continue;
+      fi
       while true; do
 	cat "$tmp/sed.in" "$tmp/sed.in" >"$tmp/sed.tmp"
 	mv "$tmp/sed.tmp" "$tmp/sed.in"
 	cp "$tmp/sed.in" "$tmp/sed.nl"
 	echo >>"$tmp/sed.nl"
 	${_sed} -e 's/a$//' < "$tmp/sed.nl" >"$tmp/sed.out" || break
 	cmp -s "$tmp/sed.out" "$tmp/sed.nl" || break
 	# 10000 chars as input seems more than enough
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,13 @@
 2007-10-03  John W. Eaton  <jwe@octave.org>
 
+	* miscellaneous/dir.m: Handle symbolic links in compatible way.
+	Use S_ISDIR (st.mode) instead of checking st.modestr(1) == "d".
+
 	* linear-algebra/Makefile.in (SOURCES): Rename norm.m to __norm__.m.
 	* linear-algebra/__norm__.m: Rename from norm.m.  Eliminate
 	special for __vnorm__.
 
 2007-10-03  Quentin Spencer  <qspencer@ieee.org>
 
 	* linear-algebra/norm.m: Special case vector 1-norm and 2-norm.
 
diff --git a/scripts/linear-algebra/Makefile.in b/scripts/linear-algebra/Makefile.in
--- a/scripts/linear-algebra/Makefile.in
+++ b/scripts/linear-algebra/Makefile.in
@@ -15,18 +15,18 @@ top_srcdir = @top_srcdir@
 VPATH = @srcdir@
 
 include $(TOPDIR)/Makeconf
 
 INSTALL = @INSTALL@
 INSTALL_PROGRAM = @INSTALL_PROGRAM@
 INSTALL_DATA = @INSTALL_DATA@
 
-SOURCES = commutation_matrix.m cond.m cross.m dmult.m dot.m \
-  duplication_matrix.m housh.m krylov.m krylovb.m logm.m norm.m \
+SOURCES = __norm__.m commutation_matrix.m cond.m cross.m dmult.m \
+  dot.m duplication_matrix.m housh.m krylov.m krylovb.m logm.m \
   null.m orth.m qzhess.m rank.m rref.m trace.m vec.m vech.m
 
 DISTFILES = $(addprefix $(srcdir)/, Makefile.in $(SOURCES))
 
 FCN_FILES = $(addprefix $(srcdir)/, $(SOURCES))
 FCN_FILES_NO_DIR = $(notdir $(FCN_FILES))
 
 all: PKG_ADD
diff --git a/scripts/miscellaneous/dir.m b/scripts/miscellaneous/dir.m
--- a/scripts/miscellaneous/dir.m
+++ b/scripts/miscellaneous/dir.m
@@ -35,17 +35,22 @@
 ##
 ## @noindent
 ## in which @code{statinfo} is the structure returned from @code{stat}.
 ##
 ## If @var{directory} is not a directory, return information about the
 ## named @var{filename}.  @var{directory} may be a list of directories
 ## specified either by name or with wildcard characters (like * and ?)
 ## which will be expanded with glob.
-## @seealso{ls, stat, readdir, glob, filesep}
+##
+## Note that for symbolic links, @code{dir} returns information about
+## the file that a symbolic link points to instead of the link itself.
+## However, if the link points to a nonexisent file, @code{dir} returns
+## information about the link.
+## @seealso{ls, stat, lstat, readdir, glob, filesep}
 ## @end deftypefn
 
 ## Author: jwe
 
 ## PKG_ADD: mark_as_command dir
 
 ## FIXME -- this is quite slow for large directories, so perhaps
 ## it should be converted to C++.
@@ -73,44 +78,53 @@ function retval = dir (file)
       flst = glob (file);
       nf = length (flst);
     endif
 
     ## Determine the file list for the case where a single directory is
     ## specified.
     if (nf == 1)
       fn = flst{1};
-      [st, err, msg] = lstat (fn);
+      [st, err, msg] = stat (fn);
       if (err < 0)
-	warning ("dir: `lstat (%s)' failed: %s", fn, msg);
+	warning ("dir: `stat (%s)' failed: %s", fn, msg);
 	nf = 0;
-      elseif (st.modestr(1) == "d")
+      elseif (S_ISDIR (st.mode))
 	flst = readdir (flst{1});
 	nf = length (flst);
 	for i = 1:nf
 	  flst{i} = fullfile (fn, flst{i});
 	endfor
       endif
     endif
 
     if (length (flst) > 0)
       ## Collect results.
       for i = nf:-1:1
 	fn = flst{i};
 	[st, err, msg] = lstat (fn);
 	if (err < 0)
 	  warning ("dir: `lstat (%s)' failed: %s", fn, msg);
 	else
+	  ## If we are looking at a link that points to something,
+	  ## return info about the target of the link, otherwise, return
+	  ## info about the link itself.
+	  if (S_ISLNK (st.mode))
+	    [xst, err, msg] = stat (fn);
+	    if (! err)
+	      st = xst;
+	    endif
+	  endif
 	  [dummy, fn, ext] = fileparts (fn);
 	  fn = strcat (fn, ext);
 	  info(i,1).name = fn;
-	  lt = localtime (st.mtime)
+	  lt = localtime (st.mtime);
 	  info(i,1).date = strftime ("%d-%b-%Y %T", lt);
 	  info(i,1).bytes = st.size;
-	  info(i,1).isdir = st.modestr(1) == "d";
+	  info(i,1).isdir = S_ISDIR (st.mode);
 	  info(i,1).datenum = datenum (lt.year + 1900, lt.mon, lt.mday,
 				       lt.hour, lt.min, lt.sec);
 	  info(i,1).statinfo = st;
 	endif
       endfor
     endif
 
   else
