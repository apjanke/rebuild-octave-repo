# HG changeset patch
# User Torsten <mttl@mailbox.org>
# Date 1531648564 -7200
#      Sun Jul 15 11:56:04 2018 +0200
# Node ID a7ee69d23f327b9542e52afa56b23b75fbd75ad0
# Parent  0fa7312e34bcf5ea5f3a9caa85e9fe37805b9824
add a gui preference for opening files when debugging in console (bug #49119)

* gui-preferences.h: new const struct for this preference

* file-editor.cc: include gui-preferences.h;
  (request_open_file): give editor tab of related file the focus only if it
  is desired to open editor files, do not open a closed file when inserting
  a breakpoint or update the debug pointer, never open a closed file when
  removing a breakpoint;

* settings-dialog.cc (settings_dialog): initialize the new checkbox from the
  preferences file;
  (write_changed_settings): store checkbox state into the preferences file;

* settings-dialog.ui: add new debugging section in editor tab with checkbox
  for opening files when debugging from console window

diff --git a/libgui/src/gui-preferences.h b/libgui/src/gui-preferences.h
--- a/libgui/src/gui-preferences.h
+++ b/libgui/src/gui-preferences.h
@@ -37,20 +37,21 @@ struct gui_pref
   gui_pref (const QString& key_, QVariant def_): key (key_), def (def_) {}
   QString   key;  // the key name
   QVariant  def;  // the default value
 };
 
 // Editor preferences
 
 // Octave comment strings
-const gui_pref ed_comment_str_old = gui_pref ("editor/octave_comment_string", QVariant (0));
+const gui_pref ed_comment_str_old ("editor/octave_comment_string", QVariant (0));
 const gui_pref ed_comment_str ("editor/oct_comment_str", QVariant (0));
 const gui_pref ed_uncomment_str ("editor/oct_uncomment_str", QVariant (1 + 2 + 4 + 8));
 
 const QString ed_last_comment_str ("editor/oct_last_comment_str");
 const QStringList ed_comment_strings (QStringList () << "##" << "#" << "%"<< "%%" << "%!");
 const int ed_comment_strings_count = 5;
 
 // File handling
+const gui_pref ed_show_dbg_file ("editor/show_dbg_file", QVariant (true));
 
 
 #endif
diff --git a/libgui/src/m-editor/file-editor.cc b/libgui/src/m-editor/file-editor.cc
--- a/libgui/src/m-editor/file-editor.cc
+++ b/libgui/src/m-editor/file-editor.cc
@@ -40,16 +40,17 @@ along with Octave; see the file COPYING.
 #include <QPushButton>
 #include <QStyle>
 #include <QTabBar>
 #include <QTextStream>
 #include <QVBoxLayout>
 #include <Qsci/qscicommandset.h>
 
 #include "main-window.h"
+#include "gui-preferences.h"
 #include "oct-map.h"
 #include "octave-link.h"
 #include "utils.h"
 
 namespace octave
 {
   // Functions of the the reimplemented tab widget
 
@@ -1185,16 +1186,20 @@ namespace octave
                                        const QString& encoding,
                                        int line, bool debug_pointer,
                                        bool breakpoint_marker, bool insert,
                                        const QString& cond)
   {
     if (call_custom_editor (openFileName, line))
       return;   // custom editor called
 
+    QSettings *settings = resource_manager::get_settings ();
+    bool show_dbg_file
+      = settings->value (ed_show_dbg_file.key, ed_show_dbg_file.def).toBool ();
+
     if (openFileName.isEmpty ())
       {
         // This happens if edit is calles without an argument
         // Open eitor with empty edit area instead (as new file would do)
         request_new_file ("");
       }
     else
       {
@@ -1212,24 +1217,30 @@ namespace octave
 
                 if (debug_pointer)
                   emit fetab_insert_debugger_pointer (tab, line);
 
                 if (breakpoint_marker)
                   emit fetab_do_breakpoint_marker (insert, tab, line, cond);
               }
 
-            if (! ((breakpoint_marker || debug_pointer) && is_editor_console_tabbed ()))
+            if (show_dbg_file && ! ((breakpoint_marker || debug_pointer) && is_editor_console_tabbed ()))
               {
                 emit fetab_set_focus (tab);
                 focus ();
               }
           }
         else
           {
+            if (! show_dbg_file && (breakpoint_marker  || debug_pointer))
+              return;   // Do not open a file for showing dbg markers
+
+            if (breakpoint_marker && ! insert)
+              return;   // Never open a file when removing breakpoints
+
             file_editor_tab *fileEditorTab = nullptr;
             // Reuse <unnamed> tab if it hasn't yet been modified.
             bool reusing = false;
             tab = find_tab_widget ("");
             if (tab)
               {
                 fileEditorTab = static_cast<file_editor_tab *>(tab);
                 if (fileEditorTab->qsci_edit_area ()->isModified ())
diff --git a/libgui/src/settings-dialog.cc b/libgui/src/settings-dialog.cc
--- a/libgui/src/settings-dialog.cc
+++ b/libgui/src/settings-dialog.cc
@@ -503,16 +503,17 @@ settings_dialog::settings_dialog (QWidge
   ui->editor_tab_width_spinbox->setValue (settings->value ("editor/tab_width", 2).toInt ());
   ui->editor_longWindowTitle->setChecked (settings->value ("editor/longWindowTitle", false).toBool ());
   ui->editor_notebook_tab_width_min->setValue (settings->value ("editor/notebook_tab_width_min", 160).toInt ());
   ui->editor_notebook_tab_width_max->setValue (settings->value ("editor/notebook_tab_width_max", 300).toInt ());
   ui->editor_restoreSession->setChecked (settings->value ("editor/restoreSession", true).toBool ());
   ui->editor_create_new_file->setChecked (settings->value ("editor/create_new_file", false).toBool ());
   ui->editor_reload_changed_files->setChecked (settings->value ("editor/always_reload_changed_files", false).toBool ());
   ui->editor_hiding_closes_files->setChecked (settings->value ("editor/hiding_closes_files", false).toBool ());
+  ui->editor_show_dbg_file->setChecked (settings->value (ed_show_dbg_file.key, ed_show_dbg_file.def).toBool ());
 
   // terminal
   ui->terminal_fontName->setCurrentFont (QFont (settings->value ("terminal/fontName", "Courier New").toString ()));
   ui->terminal_fontSize->setValue (settings->value ("terminal/fontSize", 10).toInt ());
   ui->terminal_history_buffer->setValue (settings->value ("terminal/history_buffer", 1000).toInt ());
   ui->terminal_cursorUseForegroundColor->setChecked (settings->value ("terminal/cursorUseForegroundColor", true).toBool ());
   ui->terminal_focus_command->setChecked (settings->value ("terminal/focus_after_command", false).toBool ());
   ui->terminal_print_dbg_location->setChecked (settings->value ("terminal/print_debug_location", false).toBool ());
@@ -878,16 +879,18 @@ settings_dialog::write_changed_settings 
   settings->setValue ("editor/tab_width", ui->editor_tab_width_spinbox->value ());
   settings->setValue ("editor/longWindowTitle", ui->editor_longWindowTitle->isChecked ());
   settings->setValue ("editor/notebook_tab_width_min", ui->editor_notebook_tab_width_min->value ());
   settings->setValue ("editor/notebook_tab_width_max", ui->editor_notebook_tab_width_max->value ());
   settings->setValue ("editor/restoreSession", ui->editor_restoreSession->isChecked ());
   settings->setValue ("editor/create_new_file", ui->editor_create_new_file->isChecked ());
   settings->setValue ("editor/hiding_closes_files", ui->editor_hiding_closes_files->isChecked ());
   settings->setValue ("editor/always_reload_changed_files", ui->editor_reload_changed_files->isChecked ());
+  settings->setValue (ed_show_dbg_file.key, ui->editor_show_dbg_file->isChecked ());
+
   settings->setValue ("terminal/fontSize", ui->terminal_fontSize->value ());
   settings->setValue ("terminal/fontName", ui->terminal_fontName->currentFont ().family ());
 
   // file browser
   settings->setValue ("filesdockwidget/sync_octave_directory", ui->sync_octave_directory->isChecked ());
   settings->setValue ("filesdockwidget/restore_last_dir", ui->cb_restore_file_browser_dir->isChecked ());
   settings->setValue ("filesdockwidget/startup_dir", ui->le_file_browser_dir->text ());
   settings->setValue ("filesdockwidget/txt_file_extensions", ui->le_file_browser_extensions->text ());
diff --git a/libgui/src/settings-dialog.ui b/libgui/src/settings-dialog.ui
--- a/libgui/src/settings-dialog.ui
+++ b/libgui/src/settings-dialog.ui
@@ -784,19 +784,19 @@
         <widget class="QScrollArea" name="tab_editor_scroll_area">
          <property name="widgetResizable">
           <bool>true</bool>
          </property>
          <widget class="QWidget" name="scrollAreaWidgetContents">
           <property name="geometry">
            <rect>
             <x>0</x>
-            <y>-558</y>
+            <y>-585</y>
             <width>645</width>
-            <height>1131</height>
+            <height>1196</height>
            </rect>
           </property>
           <layout class="QVBoxLayout" name="verticalLayout_16">
            <item>
             <widget class="QGroupBox" name="groupBox_5">
              <property name="title">
               <string>General</string>
              </property>
@@ -1860,16 +1860,42 @@
                  </spacer>
                 </item>
                </layout>
               </item>
              </layout>
             </widget>
            </item>
            <item>
+            <widget class="QGroupBox" name="groupBox_10">
+             <property name="enabled">
+              <bool>true</bool>
+             </property>
+             <property name="title">
+              <string>Debugging</string>
+             </property>
+             <layout class="QVBoxLayout" name="verticalLayout_12">
+              <item>
+               <layout class="QGridLayout" name="gridLayout_19">
+                <item row="0" column="0">
+                 <widget class="QCheckBox" name="editor_show_dbg_file">
+                  <property name="text">
+                   <string>Always show debug breakpoints and pointers (opens related file if closed)</string>
+                  </property>
+                  <property name="checked">
+                   <bool>true</bool>
+                  </property>
+                 </widget>
+                </item>
+               </layout>
+              </item>
+             </layout>
+            </widget>
+           </item>
+           <item>
             <widget class="QGroupBox" name="groupBox_8">
              <property name="title">
               <string>File handling</string>
              </property>
              <layout class="QVBoxLayout" name="verticalLayout_30">
               <item>
                <layout class="QVBoxLayout" name="verticalLayout_11">
                 <property name="topMargin">
@@ -1911,17 +1937,17 @@
                       <verstretch>0</verstretch>
                      </sizepolicy>
                     </property>
                     <property name="text">
                      <string>Create nonexistent files without prompting</string>
                     </property>
                    </widget>
                   </item>
-                  <item row="6" column="0">
+                  <item row="8" column="0">
                    <layout class="QHBoxLayout" name="horizontalLayout_2">
                     <property name="topMargin">
                      <number>0</number>
                     </property>
                     <item>
                      <widget class="QLabel" name="label_22">
                       <property name="text">
                        <string>Default EOL mode</string>
@@ -1969,17 +1995,17 @@
                         <width>40</width>
                         <height>20</height>
                        </size>
                       </property>
                      </spacer>
                     </item>
                    </layout>
                   </item>
-                  <item row="8" column="0">
+                  <item row="10" column="0">
                    <layout class="QHBoxLayout" name="horizontalLayout_16">
                     <item>
                      <widget class="QLabel" name="label_16">
                       <property name="text">
                        <string>Text encoding used for loading and saving</string>
                       </property>
                      </widget>
                     </item>
@@ -1996,21 +2022,24 @@
                         <width>40</width>
                         <height>20</height>
                        </size>
                       </property>
                      </spacer>
                     </item>
                    </layout>
                   </item>
-                  <item row="5" column="0">
+                  <item row="7" column="0">
                    <widget class="QCheckBox" name="editor_hiding_closes_files">
                     <property name="text">
                      <string>Close all files when the editor widget is closed/hidden</string>
                     </property>
+                    <property name="checked">
+                     <bool>true</bool>
+                    </property>
                    </widget>
                   </item>
                  </layout>
                 </item>
                </layout>
               </item>
              </layout>
             </widget>
