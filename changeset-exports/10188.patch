# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1264189053 18000
#      Fri Jan 22 14:37:33 2010 -0500
# Node ID 97ae300aa73a7b59900867812500199855fec0bc
# Parent  a44d15813a39c4ff94b79ffbfd135ccf4e08a8fd
improve implementation of break, continue, and return commands

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2010-01-22  John W. Eaton  <jwe@octave.org>
+
+	* oct-parse.yy (make_break_command, make_continue_command,
+	make_return_command): Don't examine evaluator state here.
+	* pt-eval.cc (tree_evaluator::visit_break_command): Don't set
+	tree_break_command::breaking unless inside function or script
+	body, or inside a looping command.
+	(tree_evaluator::visit_continue_command): Likewise, for
+	tree_continue_command::continuing.
+	(tree_evaluator::visit_return_command): Likewise, for
+	tree_return_command::returning.  Act like dbcont if debugging
+	and in the top-level debugging stack frame.
+
 2010-01-22  John W. Eaton  <jwe@octave.org>
 
 	* oct-stream.cc (octave_base_stream::do_scanf): Don't skip
 	whitespace, literal text, and %% elements at the end of the
 	format spec.  Correctly process formats containing only literal text.
 	(scanf_format_list::finish_conversion): Don't increment nconv
 	for literal % characters.
 	(scanf_format_list::length, scanf_format_list::num_conversions):
diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -2483,79 +2483,47 @@ make_for_command (token *for_tok, tree_a
 static tree_command *
 make_break_command (token *break_tok)
 {
   tree_command *retval = 0;
 
   int l = break_tok->line ();
   int c = break_tok->column ();
 
-  // We check to see if we are evaluating a function, script, or loop
-  // so that we don't turn eval ("break;") inside a function, script,
-  // or loop into a no-op command.
-
-  if (lexer_flags.looping || current_function_depth > 0
-      || reading_script_file || tree_evaluator::in_fcn_or_script_body
-      || tree_evaluator::in_loop_command)
-    retval = new tree_break_command (l, c);
-  else
-    retval = new tree_no_op_command ("break", l, c);
+  retval = new tree_break_command (l, c);
 
   return retval;
 }
 
 // Build a continue command.
 
 static tree_command *
 make_continue_command (token *continue_tok)
 {
   tree_command *retval = 0;
 
   int l = continue_tok->line ();
   int c = continue_tok->column ();
 
-  // We check to see if we are evaluating a loop so that we don't turn
-  // eval ("continue;") into a no-op command inside a loop.
-
-  if (lexer_flags.looping || tree_evaluator::in_loop_command)
-    retval = new tree_continue_command (l, c);
-  else
-    retval = new tree_no_op_command ("continue", l, c);
+  retval = new tree_continue_command (l, c);
 
   return retval;
 }
 
 // Build a return command.
 
 static tree_command *
 make_return_command (token *return_tok)
 {
   tree_command *retval = 0;
 
   int l = return_tok->line ();
   int c = return_tok->column ();
 
-  if (Vdebugging)
-    {
-      Vdebugging = false;
-
-      retval = new tree_no_op_command ("return", l, c);
-    }
-  else
-    {
-      // We check to see if we are evaluating a function or script so
-      // that we don't turn eval ("return;") inside a function, script,
-      // or loop into a no-op command.
-
-      if (current_function_depth > 0 || reading_script_file
-          || tree_evaluator::in_fcn_or_script_body)
-        retval = new tree_return_command (l, c);
-      else
-        retval = new tree_no_op_command ("return", l, c);
-    }
+  retval = new tree_return_command (l, c);
 
   return retval;
 }
 
 // Start an if command.
 
 static tree_if_command_list *
 start_if_command (tree_expression *expr, tree_statement_list *list)
diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -85,31 +85,40 @@ tree_evaluator::visit_binary_expression 
 void
 tree_evaluator::visit_break_command (tree_break_command& cmd)
 {
   if (! error_state)
     {
       if (debug_mode)
 	do_breakpoint (cmd.is_breakpoint ());
 
-      tree_break_command::breaking = 1;
+      if (tree_evaluator::in_fcn_or_script_body
+          || tree_evaluator::in_loop_command)
+        tree_break_command::breaking = 1;
     }
 }
 
 void
 tree_evaluator::visit_colon_expression (tree_colon_expression&)
 {
   panic_impossible ();
 }
 
 void
-tree_evaluator::visit_continue_command (tree_continue_command&)
+tree_evaluator::visit_continue_command (tree_continue_command& cmd)
 {
   if (! error_state)
-    tree_continue_command::continuing = 1;
+    {
+      if (debug_mode)
+	do_breakpoint (cmd.is_breakpoint ());
+
+      if (tree_evaluator::in_fcn_or_script_body
+          || tree_evaluator::in_loop_command)
+        tree_continue_command::continuing = 1;
+    }
 }
 
 void
 tree_evaluator::reset_debug_state (void)
 {
   debug_mode = bp_table::have_breakpoints ();
 
   dbstep_flag = 0;
@@ -626,17 +635,28 @@ tree_evaluator::visit_prefix_expression 
 void
 tree_evaluator::visit_return_command (tree_return_command& cmd)
 {
   if (! error_state)
     {
       if (debug_mode)
 	do_breakpoint (cmd.is_breakpoint ());
 
-      tree_return_command::returning = 1;
+      // Act like dbcont.
+
+      if (Vdebugging
+          && octave_call_stack::current_frame () == current_frame)
+        {
+          Vdebugging = false;
+
+          reset_debug_state;
+        }
+      else if (tree_evaluator::in_fcn_or_script_body
+               || tree_evaluator::in_loop_command)
+        tree_return_command::returning = 1;
     }
 }
 
 void
 tree_evaluator::visit_return_list (tree_return_list&)
 {
   panic_impossible ();
 }
