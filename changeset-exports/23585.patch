# HG changeset patch
# User Rik <rik@octave.org>
# Date 1497372779 25200
#      Tue Jun 13 09:52:59 2017 -0700
# Node ID 570170b6eb098b3fa9c69d356965990189b1e0a7
# Parent  7ed6b258db915a91e84d38e83060ddc0f018ab5d
maint: Deprecate is_float_type and replace with isfloat.

* ov.h (is_float_type): Use OCTAVE_DEPRECATED macro around function.
* ov.h (isfloat): New function.

* __magick_read__.cc, bsxfun.cc, data.cc, dot.cc, eig.cc, ov-base.h,
ov-class.cc, ov-complex.h, ov-cx-diag.h, ov-cx-mat.h, ov-cx-sparse.h,
ov-float.h, ov-flt-complex.h, ov-flt-cx-diag.h, ov-flt-cx-mat.h,
ov-flt-re-diag.h, ov-flt-re-mat.h, ov-java.cc, ov-lazy-idx.h, ov-perm.h,
ov-range.h, ov-re-diag.h, ov-re-mat.h, ov-re-sparse.h, ov-scalar.h, ov.h:
Replace instances of is_float_type with isfloat.

diff --git a/libinterp/corefcn/__magick_read__.cc b/libinterp/corefcn/__magick_read__.cc
--- a/libinterp/corefcn/__magick_read__.cc
+++ b/libinterp/corefcn/__magick_read__.cc
@@ -1498,17 +1498,17 @@ Use @code{imwrite} instead.
         encode_uint_image<uint8NDArray>  (imvec, img.uint8_array_value (),
                                           alpha.uint8_array_value ());
       else if (img.is_uint16_type ())
         encode_uint_image<uint16NDArray> (imvec, img.uint16_array_value (),
                                           alpha.uint16_array_value ());
       else if (img.is_uint32_type ())
         encode_uint_image<uint32NDArray> (imvec, img.uint32_array_value (),
                                           alpha.uint32_array_value ());
-      else if (img.is_float_type ())
+      else if (img.isfloat ())
         {
           // For image formats that support floating point values, we write
           // the actual values.  For those who don't, we only use the values
           // on the range [0 1] and save integer values.
           // But here, even for formats that would support floating point
           // values, GM seems unable to do that so we at least make them uint32.
           uint32NDArray clip_img;
           uint32NDArray clip_alpha;
diff --git a/libinterp/corefcn/bsxfun.cc b/libinterp/corefcn/bsxfun.cc
--- a/libinterp/corefcn/bsxfun.cc
+++ b/libinterp/corefcn/bsxfun.cc
@@ -525,17 +525,17 @@ dimensionality as the other array.
                 }
               else
                 {
                   update_index (ra_idx, dvc, i);
 
                   if (have_FloatNDArray
                       || have_FloatComplexNDArray)
                     {
-                      if (! tmp(0).is_float_type ())
+                      if (! tmp(0).isfloat ())
                         {
                           if (have_FloatNDArray)
                             {
                               have_FloatNDArray = false;
                               C = result_FloatNDArray;
                             }
                           else
                             {
@@ -577,17 +577,17 @@ dimensionality as the other array.
                             (tmp(0).float_complex_array_value (),
                              ra_idx);
                           have_FloatNDArray = false;
                           have_FloatComplexNDArray = true;
                         }
                     }
                   else if (have_NDArray)
                     {
-                      if (! tmp(0).is_float_type ())
+                      if (! tmp(0).isfloat ())
                         {
                           have_NDArray = false;
                           C = result_NDArray;
                           C = do_cat_op (C, tmp(0), ra_idx);
                         }
                       else if (tmp(0).isreal ())
                         result_NDArray.insert (tmp(0).array_value (),
                                                ra_idx);
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -3205,17 +3205,17 @@ Return true if @var{x} is a floating-poi
 
 Objects of class double or single are floating-point objects.
 @seealso{isinteger, ischar, islogical, isnumeric, isa}
 @end deftypefn */)
 {
   if (args.length () != 1)
     print_usage ();
 
-  return ovl (args(0).is_float_type ());
+  return ovl (args(0).isfloat ());
 }
 
 // FIXME: perhaps this should be implemented with an
 // octave_value member function?
 
 DEFUN (complex, args, ,
        doc: /* -*- texinfo -*-
 @deftypefn  {} {} complex (@var{x})
diff --git a/libinterp/corefcn/dot.cc b/libinterp/corefcn/dot.cc
--- a/libinterp/corefcn/dot.cc
+++ b/libinterp/corefcn/dot.cc
@@ -144,17 +144,17 @@ but avoids forming a temporary array and
           ComplexNDArray z (dimz);
 
           F77_XFCN (zdotc3, ZDOTC3, (m, n, k,
                                      F77_CONST_DBLE_CMPLX_ARG (x.data ()), F77_CONST_DBLE_CMPLX_ARG (y.data ()),
                                      F77_DBLE_CMPLX_ARG (z.fortran_vec ())));
           retval = z;
         }
     }
-  else if (argx.is_float_type () && argy.is_float_type ())
+  else if (argx.isfloat () && argy.isfloat ())
     {
       if (argx.is_single_type () || argy.is_single_type ())
         {
           FloatNDArray x = argx.float_array_value ();
           FloatNDArray y = argy.float_array_value ();
           get_red_dims (dimx, dimy, dim, dimz, m, n, k);
           FloatNDArray z (dimz);
 
diff --git a/libinterp/corefcn/eig.cc b/libinterp/corefcn/eig.cc
--- a/libinterp/corefcn/eig.cc
+++ b/libinterp/corefcn/eig.cc
@@ -106,33 +106,33 @@ The eigenvalues returned by @code{eig} a
 
   octave_value arg_a, arg_b;
 
   arg_a = args(0);
 
   if (arg_a.isempty ())
     return octave_value_list (2, Matrix ());
 
-  if (! arg_a.is_float_type ())
+  if (! arg_a.isfloat ())
     err_wrong_type_arg ("eig", arg_a);
 
   if (arg_a.rows () != arg_a.columns ())
     err_square_matrix_required ("eig", "A");
 
   // determine if it's AEP or GEP
   bool AEPcase = nargin == 1 || args(1).is_string ();
 
   if (! AEPcase)
     {
       arg_b = args(1);
 
       if (arg_b.isempty ())
         return octave_value_list (2, Matrix ());
 
-      if (! arg_b.is_float_type ())
+      if (! arg_b.isfloat ())
         err_wrong_type_arg ("eig", arg_b);
 
       if (arg_b.rows () != arg_b.columns ())
         err_square_matrix_required ("eig", "B");
     }
 
   bool qz_flag = false;
   bool chol_flag = false;
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -386,17 +386,17 @@ public:
   virtual octave_value any (int = 0) const;
 
   virtual builtin_type_t builtin_type (void) const { return btyp_unknown; }
 
   virtual bool is_double_type (void) const { return false; }
 
   virtual bool is_single_type (void) const { return false; }
 
-  virtual bool is_float_type (void) const { return false; }
+  virtual bool isfloat (void) const { return false; }
 
   virtual bool is_int8_type (void) const { return false; }
 
   virtual bool is_int16_type (void) const { return false; }
 
   virtual bool is_int32_type (void) const { return false; }
 
   virtual bool is_int64_type (void) const { return false; }
diff --git a/libinterp/octave-value/ov-class.cc b/libinterp/octave-value/ov-class.cc
--- a/libinterp/octave-value/ov-class.cc
+++ b/libinterp/octave-value/ov-class.cc
@@ -1804,17 +1804,17 @@ belongs to.
   Array<std::string> clsnames = args(1).xcellstr_value ("isa: CLASSNAME must be a string or cell array of strings");
 
   boolNDArray matches (clsnames.dims (), false);
 
   for (octave_idx_type idx = 0; idx < clsnames.numel (); idx++)
     {
       std::string cls = clsnames(idx);
       if (obj_cls == cls
-          || (cls == "float"   && obj.is_float_type   ())
+          || (cls == "float"   && obj.isfloat   ())
           || (cls == "integer" && obj.isinteger ())
           || (cls == "numeric" && obj.is_numeric_type ())
           || obj.is_instance_of (cls))
         matches(idx) = true;
     }
 
   return ovl (matches);
 }
diff --git a/libinterp/octave-value/ov-complex.h b/libinterp/octave-value/ov-complex.h
--- a/libinterp/octave-value/ov-complex.h
+++ b/libinterp/octave-value/ov-complex.h
@@ -91,17 +91,17 @@ public:
   builtin_type_t builtin_type (void) const { return btyp_complex; }
 
   bool is_complex_scalar (void) const { return true; }
 
   bool iscomplex (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
-  bool is_float_type (void) const { return true; }
+  bool isfloat (void) const { return true; }
 
   double double_value (bool = false) const;
 
   float float_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
   { return double_value (frc_str_conv); }
 
diff --git a/libinterp/octave-value/ov-cx-diag.h b/libinterp/octave-value/ov-cx-diag.h
--- a/libinterp/octave-value/ov-cx-diag.h
+++ b/libinterp/octave-value/ov-cx-diag.h
@@ -64,17 +64,17 @@ public:
   builtin_type_t builtin_type (void) const { return btyp_complex; }
 
   bool is_complex_matrix (void) const { return true; }
 
   bool iscomplex (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
-  bool is_float_type (void) const { return true; }
+  bool isfloat (void) const { return true; }
 
   DiagMatrix diag_matrix_value (bool = false) const;
 
   FloatDiagMatrix float_diag_matrix_value (bool = false) const;
 
   ComplexDiagMatrix complex_diag_matrix_value (bool = false) const;
 
   FloatComplexDiagMatrix float_complex_diag_matrix_value (bool = false) const;
diff --git a/libinterp/octave-value/ov-cx-mat.h b/libinterp/octave-value/ov-cx-mat.h
--- a/libinterp/octave-value/ov-cx-mat.h
+++ b/libinterp/octave-value/ov-cx-mat.h
@@ -93,17 +93,17 @@ public:
   builtin_type_t builtin_type (void) const { return btyp_complex; }
 
   bool is_complex_matrix (void) const { return true; }
 
   bool iscomplex (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
-  bool is_float_type (void) const { return true; }
+  bool isfloat (void) const { return true; }
 
   double double_value (bool = false) const;
 
   float float_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
   { return double_value (frc_str_conv); }
 
diff --git a/libinterp/octave-value/ov-cx-sparse.h b/libinterp/octave-value/ov-cx-sparse.h
--- a/libinterp/octave-value/ov-cx-sparse.h
+++ b/libinterp/octave-value/ov-cx-sparse.h
@@ -96,17 +96,17 @@ public:
   builtin_type_t builtin_type (void) const { return btyp_complex; }
 
   bool is_complex_matrix (void) const { return true; }
 
   bool iscomplex (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
-  bool is_float_type (void) const { return true; }
+  bool isfloat (void) const { return true; }
 
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
   { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
 
diff --git a/libinterp/octave-value/ov-float.h b/libinterp/octave-value/ov-float.h
--- a/libinterp/octave-value/ov-float.h
+++ b/libinterp/octave-value/ov-float.h
@@ -84,17 +84,17 @@ public:
   builtin_type_t builtin_type (void) const { return btyp_float; }
 
   bool is_real_scalar (void) const { return true; }
 
   bool isreal (void) const { return true; }
 
   bool is_single_type (void) const { return true; }
 
-  bool is_float_type (void) const { return true; }
+  bool isfloat (void) const { return true; }
 
   int8NDArray
   int8_array_value (void) const
   { return int8NDArray (dim_vector (1, 1), scalar); }
 
   int16NDArray
   int16_array_value (void) const
   { return int16NDArray (dim_vector (1, 1), scalar); }
diff --git a/libinterp/octave-value/ov-flt-complex.h b/libinterp/octave-value/ov-flt-complex.h
--- a/libinterp/octave-value/ov-flt-complex.h
+++ b/libinterp/octave-value/ov-flt-complex.h
@@ -87,17 +87,17 @@ public:
   builtin_type_t builtin_type (void) const { return btyp_float_complex; }
 
   bool is_complex_scalar (void) const { return true; }
 
   bool iscomplex (void) const { return true; }
 
   bool is_single_type (void) const { return true; }
 
-  bool is_float_type (void) const { return true; }
+  bool isfloat (void) const { return true; }
 
   double double_value (bool = false) const;
 
   float float_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
   { return double_value (frc_str_conv); }
 
diff --git a/libinterp/octave-value/ov-flt-cx-diag.h b/libinterp/octave-value/ov-flt-cx-diag.h
--- a/libinterp/octave-value/ov-flt-cx-diag.h
+++ b/libinterp/octave-value/ov-flt-cx-diag.h
@@ -62,17 +62,17 @@ public:
   builtin_type_t builtin_type (void) const { return btyp_float_complex; }
 
   bool is_complex_matrix (void) const { return true; }
 
   bool iscomplex (void) const { return true; }
 
   bool is_single_type (void) const { return true; }
 
-  bool is_float_type (void) const { return true; }
+  bool isfloat (void) const { return true; }
 
   DiagMatrix diag_matrix_value (bool = false) const;
 
   FloatDiagMatrix float_diag_matrix_value (bool = false) const;
 
   ComplexDiagMatrix complex_diag_matrix_value (bool = false) const;
 
   FloatComplexDiagMatrix float_complex_diag_matrix_value (bool = false) const;
diff --git a/libinterp/octave-value/ov-flt-cx-mat.h b/libinterp/octave-value/ov-flt-cx-mat.h
--- a/libinterp/octave-value/ov-flt-cx-mat.h
+++ b/libinterp/octave-value/ov-flt-cx-mat.h
@@ -91,17 +91,17 @@ public:
   builtin_type_t builtin_type (void) const { return btyp_float_complex; }
 
   bool is_complex_matrix (void) const { return true; }
 
   bool iscomplex (void) const { return true; }
 
   bool is_single_type (void) const { return true; }
 
-  bool is_float_type (void) const { return true; }
+  bool isfloat (void) const { return true; }
 
   double double_value (bool = false) const;
 
   float float_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
   { return double_value (frc_str_conv); }
 
diff --git a/libinterp/octave-value/ov-flt-re-diag.h b/libinterp/octave-value/ov-flt-re-diag.h
--- a/libinterp/octave-value/ov-flt-re-diag.h
+++ b/libinterp/octave-value/ov-flt-re-diag.h
@@ -62,17 +62,17 @@ public:
   builtin_type_t builtin_type (void) const { return btyp_float; }
 
   bool is_real_matrix (void) const { return true; }
 
   bool isreal (void) const { return true; }
 
   bool is_single_type (void) const { return true; }
 
-  bool is_float_type (void) const { return true; }
+  bool isfloat (void) const { return true; }
 
   DiagMatrix diag_matrix_value (bool = false) const;
 
   FloatDiagMatrix float_diag_matrix_value (bool = false) const;
 
   ComplexDiagMatrix complex_diag_matrix_value (bool = false) const;
 
   FloatComplexDiagMatrix float_complex_diag_matrix_value (bool = false) const;
diff --git a/libinterp/octave-value/ov-flt-re-mat.h b/libinterp/octave-value/ov-flt-re-mat.h
--- a/libinterp/octave-value/ov-flt-re-mat.h
+++ b/libinterp/octave-value/ov-flt-re-mat.h
@@ -96,17 +96,17 @@ public:
   builtin_type_t builtin_type (void) const { return btyp_float; }
 
   bool is_real_matrix (void) const { return true; }
 
   bool isreal (void) const { return true; }
 
   bool is_single_type (void) const { return true; }
 
-  bool is_float_type (void) const { return true; }
+  bool isfloat (void) const { return true; }
 
   int8NDArray
   int8_array_value (void) const { return int8NDArray (matrix); }
 
   int16NDArray
   int16_array_value (void) const { return int16NDArray (matrix); }
 
   int32NDArray
diff --git a/libinterp/octave-value/ov-java.cc b/libinterp/octave-value/ov-java.cc
--- a/libinterp/octave-value/ov-java.cc
+++ b/libinterp/octave-value/ov-java.cc
@@ -1540,17 +1540,17 @@ unbox (JNIEnv *jni_env, const octave_val
 
       // Note that we do NOT handle char here because they are unboxed
       // into a String[], not into a char array
 
       if (val.is_double_type ())
         UNBOX_PRIMITIVE_ARRAY ( , , jdouble,  Double);
       else if (val.islogical ())
         UNBOX_PRIMITIVE_ARRAY (bool_, bool, jboolean, Boolean);
-      else if (val.is_float_type ())
+      else if (val.isfloat ())
         UNBOX_PRIMITIVE_ARRAY (float_, Float, jfloat, Float);
       else if (val.is_int8_type ())
         UNBOX_PRIMITIVE_ARRAY (int8_, int8, jbyte, Byte);
       else if (val.is_uint8_type ())
         UNBOX_PRIMITIVE_ARRAY (uint8_, uint8, jbyte, Byte);
       else if (val.is_int16_type ())
         UNBOX_PRIMITIVE_ARRAY (int16_, int16, jshort, Short);
       else if (val.is_uint16_type ())
@@ -1582,17 +1582,17 @@ unbox (JNIEnv *jni_env, const octave_val
       jobj = jni_env->NewObject (dcls, mid, ov); \
      } \
    while (0)
 
       if (val.is_double_type ())
         UNBOX_PRIMITIVE_SCALAR (double, double, "java/lang/Double", "(D)V");
       else if (val.islogical ())
         UNBOX_PRIMITIVE_SCALAR (bool, bool, "java/lang/Boolean", "(Z)V");
-      else if (val.is_float_type ())
+      else if (val.isfloat ())
         UNBOX_PRIMITIVE_SCALAR (float, float, "java/lang/Float", "(F)V");
       else if (val.is_int8_type ())
         UNBOX_PRIMITIVE_SCALAR (int8_t, int8_scalar, "java/lang/Byte", "(B)V");
       else if (val.is_uint8_type ())
         UNBOX_PRIMITIVE_SCALAR (uint8_t, uint8_scalar, "java/lang/Byte", "(B)V");
       else if (val.is_int16_type ())
         UNBOX_PRIMITIVE_SCALAR (int16_t, int16_scalar, "java/lang/Short", "(S)V");
       else if (val.is_uint16_type ())
diff --git a/libinterp/octave-value/ov-lazy-idx.h b/libinterp/octave-value/ov-lazy-idx.h
--- a/libinterp/octave-value/ov-lazy-idx.h
+++ b/libinterp/octave-value/ov-lazy-idx.h
@@ -68,17 +68,17 @@ public:
   builtin_type_t builtin_type (void) const { return btyp_double; }
 
   bool is_real_matrix (void) const { return true; }
 
   bool isreal (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
-  bool is_float_type (void) const { return true; }
+  bool isfloat (void) const { return true; }
 
   octave_value subsref (const std::string& type,
                         const std::list<octave_value_list>& idx)
   { return make_value ().subsref (type, idx); }
 
   octave_value_list subsref (const std::string& type,
                              const std::list<octave_value_list>& idx, int)
   { return subsref (type, idx); }
diff --git a/libinterp/octave-value/ov-perm.h b/libinterp/octave-value/ov-perm.h
--- a/libinterp/octave-value/ov-perm.h
+++ b/libinterp/octave-value/ov-perm.h
@@ -117,17 +117,17 @@ public:
   bool is_constant (void) const { return true; }
 
   bool is_real_matrix (void) const { return true; }
 
   bool isreal (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
-  bool is_float_type (void) const { return true; }
+  bool isfloat (void) const { return true; }
 
   bool is_true (void) const;
 
   double double_value (bool = false) const;
 
   float float_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
diff --git a/libinterp/octave-value/ov-range.h b/libinterp/octave-value/ov-range.h
--- a/libinterp/octave-value/ov-range.h
+++ b/libinterp/octave-value/ov-range.h
@@ -156,17 +156,17 @@ public:
   { return mode ? mode : ASCENDING; }
 
   builtin_type_t builtin_type (void) const { return btyp_double; }
 
   bool isreal (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
-  bool is_float_type (void) const { return true; }
+  bool isfloat (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool is_true (void) const;
 
   double double_value (bool = false) const;
 
   float float_value (bool = false) const;
diff --git a/libinterp/octave-value/ov-re-diag.h b/libinterp/octave-value/ov-re-diag.h
--- a/libinterp/octave-value/ov-re-diag.h
+++ b/libinterp/octave-value/ov-re-diag.h
@@ -67,17 +67,17 @@ public:
   builtin_type_t builtin_type (void) const { return btyp_double; }
 
   bool is_real_matrix (void) const { return true; }
 
   bool isreal (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
-  bool is_float_type (void) const { return true; }
+  bool isfloat (void) const { return true; }
 
   DiagMatrix diag_matrix_value (bool = false) const;
 
   FloatDiagMatrix float_diag_matrix_value (bool = false) const;
 
   ComplexDiagMatrix complex_diag_matrix_value (bool = false) const;
 
   FloatComplexDiagMatrix float_complex_diag_matrix_value (bool = false) const;
diff --git a/libinterp/octave-value/ov-re-mat.h b/libinterp/octave-value/ov-re-mat.h
--- a/libinterp/octave-value/ov-re-mat.h
+++ b/libinterp/octave-value/ov-re-mat.h
@@ -109,17 +109,17 @@ public:
   builtin_type_t builtin_type (void) const { return btyp_double; }
 
   bool is_real_matrix (void) const { return true; }
 
   bool isreal (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
-  bool is_float_type (void) const { return true; }
+  bool isfloat (void) const { return true; }
 
   int8NDArray
   int8_array_value (void) const { return int8NDArray (matrix); }
 
   int16NDArray
   int16_array_value (void) const { return int16NDArray (matrix); }
 
   int32NDArray
diff --git a/libinterp/octave-value/ov-re-sparse.h b/libinterp/octave-value/ov-re-sparse.h
--- a/libinterp/octave-value/ov-re-sparse.h
+++ b/libinterp/octave-value/ov-re-sparse.h
@@ -96,17 +96,17 @@ public:
   builtin_type_t builtin_type (void) const { return btyp_double; }
 
   bool is_real_matrix (void) const { return true; }
 
   bool isreal (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
-  bool is_float_type (void) const { return true; }
+  bool isfloat (void) const { return true; }
 
   double double_value (bool = false) const;
 
   double scalar_value (bool frc_str_conv = false) const
   { return double_value (frc_str_conv); }
 
   Matrix matrix_value (bool = false) const;
 
diff --git a/libinterp/octave-value/ov-scalar.h b/libinterp/octave-value/ov-scalar.h
--- a/libinterp/octave-value/ov-scalar.h
+++ b/libinterp/octave-value/ov-scalar.h
@@ -83,17 +83,17 @@ public:
   builtin_type_t builtin_type (void) const { return btyp_double; }
 
   bool is_real_scalar (void) const { return true; }
 
   bool isreal (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
-  bool is_float_type (void) const { return true; }
+  bool isfloat (void) const { return true; }
 
   int8NDArray
   int8_array_value (void) const
   { return int8NDArray (dim_vector (1, 1), scalar); }
 
   int16NDArray
   int16_array_value (void) const
   { return int16NDArray (dim_vector (1, 1), scalar); }
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -628,18 +628,22 @@ public:
   // Floating point types.
 
   bool is_double_type (void) const
   { return rep->is_double_type (); }
 
   bool is_single_type (void) const
   { return rep->is_single_type (); }
 
+  bool isfloat (void) const
+  { return rep->isfloat (); }
+
+  OCTAVE_DEPRECATED ("use 'isfloat' instead")
   bool is_float_type (void) const
-  { return rep->is_float_type (); }
+  { return rep->isfloat (); }
 
   // Integer types.
 
   bool is_int8_type (void) const
   { return rep->is_int8_type (); }
 
   bool is_int16_type (void) const
   { return rep->is_int16_type (); }
