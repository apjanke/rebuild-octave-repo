# HG changeset patch
# User Rik <rik@octave.org>
# Date 1411874506 25200
#      Sat Sep 27 20:21:46 2014 -0700
# Node ID 702aa79dc482b46f5196f11d6f3d8d8a7f3827c6
# Parent  a6d44158bc6d148552ca66a356ca4862cdd232fa
Add BIST tests for various quasi-internal m-files.

* __actual_axis_position__.m, __default_plot_options__.m, __next_line_color__.m,
__next_line_style__.m, __pltopt__.m, __have_feature__.m, __printf_assert__.m,
__prog_output_assert__.m, __run_test_suite__.m: Add BIST tests for various
quasi-internal m-files.

diff --git a/scripts/plot/util/__actual_axis_position__.m b/scripts/plot/util/__actual_axis_position__.m
--- a/scripts/plot/util/__actual_axis_position__.m
+++ b/scripts/plot/util/__actual_axis_position__.m
@@ -79,8 +79,11 @@ function pos = __actual_axis_position__ 
   elseif (strcmp (get (axis_obj.parent, "__graphics_toolkit__"), "gnuplot")
           && strcmp (axis_obj.activepositionproperty, "outerposition"))
     pos = axis_obj.outerposition;
   else
     pos = axis_obj.position;
   endif
 endfunction
 
+
+## No test coverage for internal function.  It is tested through calling fcn.
+%!assert (1)
diff --git a/scripts/plot/util/__default_plot_options__.m b/scripts/plot/util/__default_plot_options__.m
--- a/scripts/plot/util/__default_plot_options__.m
+++ b/scripts/plot/util/__default_plot_options__.m
@@ -28,8 +28,18 @@ function options = __default_plot_option
   options.key = "";
   options.color = [];
   options.linestyle = [];
   options.marker = [];
   options.errorstyle = [];
 
 endfunction
 
+
+%!test
+%! options = __default_plot_options__ ();
+%! assert (isfield (options, "key"));
+%! assert (options.key, "");
+%! assert (options.color, []);
+%! assert (options.linestyle, []);
+%! assert (options.marker, []);
+%! assert (options.errorstyle, []);
+
diff --git a/scripts/plot/util/__next_line_color__.m b/scripts/plot/util/__next_line_color__.m
--- a/scripts/plot/util/__next_line_color__.m
+++ b/scripts/plot/util/__next_line_color__.m
@@ -47,8 +47,27 @@ function rgb = __next_line_color__ (rese
       n_colors = rows (colororder);
       color_index = mod (n_kids, n_colors) + 1;
     endif
     rgb = colororder(color_index,:);
   endif
 
 endfunction
 
+
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   hax = axes ();
+%!   set (hax, "colororder", [1 0 0; 0 1 0; 0 0 1]);
+%!   hold on;
+%!   h = plot (1:5,1:5,'o', 1:4,1:4, "x", 1:3,1:3, "d");
+%!   assert (get (h, "color"), {[1 0 0]; [0 1 0]; [0 0 1]});
+%!   cla (hax);
+%!   hold all;
+%!   h1 = plot (1:5,1:5,'o');
+%!   h2 = plot (1:4,1:4, "x");
+%!   h3 = plot (1:3,1:3, "d");
+%!   assert (get ([h1;h2;h3], "color"), {[1 0 0]; [0 1 0]; [0 0 1]});
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
+
diff --git a/scripts/plot/util/__next_line_style__.m b/scripts/plot/util/__next_line_style__.m
--- a/scripts/plot/util/__next_line_style__.m
+++ b/scripts/plot/util/__next_line_style__.m
@@ -51,8 +51,28 @@ function [linestyle, marker] = __next_li
     options = __pltopt__ ("__next_line_style__",
                           style_rotation(style_index));
     linestyle = options.linestyle;
     marker = options.marker;
   endif
 
 endfunction
 
+
+%!test
+%! hf = figure ("visible", "off");
+%! unwind_protect
+%!   hax = axes ();
+%!   set (hax, "colororder", [0 0 1]);
+%!   set (hax, "linestyleorder", {"-", ":", "--"});
+%!   hold on;
+%!   h = plot (1:5,1:5, 1:4,1:4, 1:3,1:3);
+%!   assert (get (h, "linestyle"), {"-"; ":"; "--"});
+%!   cla (hax);
+%!   hold all;
+%!   h1 = plot (1:5,1:5);
+%!   h2 = plot (1:4,1:4);
+%!   h3 = plot (1:3,1:3);
+%!   assert (get ([h1;h2;h3], "linestyle"), {"-"; ":"; "--"});
+%! unwind_protect_cleanup
+%!   close (hf);
+%! end_unwind_protect
+
diff --git a/scripts/plot/util/__pltopt__.m b/scripts/plot/util/__pltopt__.m
--- a/scripts/plot/util/__pltopt__.m
+++ b/scripts/plot/util/__pltopt__.m
@@ -228,8 +228,44 @@ function [options, valid] = __pltopt1__ 
   endif
 
   if (have_linestyle && ! have_marker)
     options.marker = "none";
   endif
 
 endfunction
 
+
+## Only cursory testing.  Real testing done by appearance of plots.
+%test
+%! opts = __pltopt__ ("abc", "");
+%! assert (opts.color, []);
+%! assert (opts.linestyle, []);
+%! assert (opts.marker, []);
+%! assert (opts.key, "");
+%!test
+%! opts = __pltopt__ ("abc", "r:x");
+%! assert (opts.color, [1 0 0]);
+%! assert (opts.linestyle, ":");
+%! assert (opts.marker, "x");
+%!test
+%! opts = __pltopt__ ("abc", "2square");
+%! assert (opts.color, [0 1 0]);
+%! assert (opts.linestyle, "none");
+%! assert (opts.marker, "s");
+%!test
+%! opts = __pltopt__ ("abc", ";Title;");
+%! assert (opts.key, "Title");
+%! assert (opts.color, []);
+%! assert (opts.linestyle, []);
+%! assert (opts.marker, []);
+%!test
+%! opts = __pltopt__ ("__errplot__", "~>r");
+%! assert (opts.errorstyle, "~>");
+%! assert (opts.color, [1 0 0 ]);
+%! assert (opts.linestyle, []);
+%! assert (opts.marker, []);
+
+## Test input validation
+%!error <argument must be a character string or cell array> __pltopt__ ("abc", 1)
+%!error <unfinished key label> __pltopt__ ("abc", "rx;my_title", true)
+%!error <unrecognized format character: 'u'> __pltopt__ ("abc", "u", true)
+
diff --git a/scripts/testfun/__have_feature__.m b/scripts/testfun/__have_feature__.m
--- a/scripts/testfun/__have_feature__.m
+++ b/scripts/testfun/__have_feature__.m
@@ -28,8 +28,12 @@ function retval = __have_feature__ (feat
               && cellfun (@(x) features.(x), feature));
   elseif (ischar (feature))
     retval = isfield (features, feature) && features.(feature);
   else
     retval = false;
   endif
 endfunction
 
+
+## No test coverage for internal function.  It is tested through calling fcn.
+%!assert (1)
+
diff --git a/scripts/testfun/__printf_assert__.m b/scripts/testfun/__printf_assert__.m
--- a/scripts/testfun/__printf_assert__.m
+++ b/scripts/testfun/__printf_assert__.m
@@ -21,8 +21,12 @@
 ## Undocumented internal function.
 ## @end deftypefn
 
 function __printf_assert__ (varargin)
   global _assert_printf;
   _assert_printf = cat (2, _assert_printf, sprintf (varargin{:}));
 endfunction
 
+
+## No test coverage for internal function.  It is tested through calling fcn.
+%!assert (1)
+
diff --git a/scripts/testfun/__prog_output_assert__.m b/scripts/testfun/__prog_output_assert__.m
--- a/scripts/testfun/__prog_output_assert__.m
+++ b/scripts/testfun/__prog_output_assert__.m
@@ -28,8 +28,12 @@ function ret = __prog_output_assert__ (s
   elseif (_assert_printf(end) == "\n")
     ret = strcmp (_assert_printf(1:(end-1)), str);
   else
     ret = strcmp (_assert_printf, str);
   endif
   _assert_printf = "";
 endfunction
 
+
+## No test coverage for internal function.  It is tested through calling fcn.
+%!assert (1)
+
diff --git a/scripts/testfun/__run_test_suite__.m b/scripts/testfun/__run_test_suite__.m
--- a/scripts/testfun/__run_test_suite__.m
+++ b/scripts/testfun/__run_test_suite__.m
@@ -270,8 +270,12 @@ endfunction
 function report_files_with_no_tests (with, without, typ)
   pat = ['\' typ "$"];
   n_with = num_elts_matching_pattern (with, pat);
   n_without = num_elts_matching_pattern (without, pat);
   n_tot = n_with + n_without;
   printf ("\n%d (of %d) %s files have no tests.\n", n_without, n_tot, typ);
 endfunction
 
+
+## No test coverage for internal function.  It is tested through calling fcn.
+%!assert (1)
+
