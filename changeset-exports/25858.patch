# HG changeset patch
# User Gene Harvey <gharveymn@gmail.com>
# Date 1536338013 25200
#      Fri Sep 07 09:33:33 2018 -0700
# Branch stable
# Node ID 1f52a96c8c21a552dd29fde1c63bd0c43c3ea99f
# Parent  c3c9c8533a863bacf9fcf0c6d6e210d42bba6de2
Fix mod operation for signed integer types (bug #54602).

* oct-inttypes.h ():

* data.cc (Fmod): Add BIST tests for bug #54602.

diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -899,18 +899,25 @@ negative numbers or when the values are 
 ## non-integer real numbers
 %!assert (mod (2.1, 0.1), 0)
 %!assert (mod (2.1, 0.2), 0.1, eps)
 
 %!assert <*45587> (signbit (mod (-0, 0)))
 %!assert <*45587> (! signbit (mod (0, -0)))
 
 %!assert <*42627> (mod (0.94, 0.01), 0.0)
+
+%!assert <*54602> (mod (int8 (125), int8 (-25)), int8 (0))
+%!assert <*54602> (mod (int8 (-125), int8 (-25)), int8 (0))
+%!assert <*54602> (mod (int8 (-125), int8 (0)), int8 (0))
+%!assert <*54602> (mod (int8 (0), int8 (-25)), int8 (0))
+
 */
 
+
 #define DATA_REDUCTION(FCN)                                             \
                                                                         \
   int nargin = args.length ();                                          \
                                                                         \
   if (nargin < 1 || nargin > 2)                                         \
     print_usage ();                                                     \
                                                                         \
   octave_value retval;                                                  \
diff --git a/liboctave/util/oct-inttypes.h b/liboctave/util/oct-inttypes.h
--- a/liboctave/util/oct-inttypes.h
+++ b/liboctave/util/oct-inttypes.h
@@ -658,17 +658,17 @@ public:
 
   // Modulus.  Note the weird y = 0 case for Matlab compatibility.
   static T
   mod (T x, T y)
   {
     if (y != 0)
       {
         T r = x % y;
-        return ((r < 0) != (y < 0)) ? r + y : r;
+        return (r == 0) ? 0 : (((r < 0) != (y < 0)) ? r + y : r);
       }
     else
       return x;
   }
 };
 
 #if defined (OCTAVE_INT_USE_LONG_DOUBLE)
 
