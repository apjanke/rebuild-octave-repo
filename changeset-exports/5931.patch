# HG changeset patch
# User jwe
# Date 1155711139 0
#      Wed Aug 16 06:52:19 2006 +0000
# Node ID 25da9a7d5f6d72aa9f068e5647606d93719e6be1
# Parent  a703198cb8b8e285e98bfd12d18364a398e990f0
[project @ 2006-08-16 06:52:19 by jwe]

diff --git a/scripts/miscellaneous/ans.m b/scripts/miscellaneous/ans.m
--- a/scripts/miscellaneous/ans.m
+++ b/scripts/miscellaneous/ans.m
@@ -8,10 +8,10 @@
 ## @end example
 ## 
 ## @noindent
 ## is evaluated, the value returned by @code{ans} is 25.
 ## @end defvr
 
 ## FIXME -- we should be able to get formatted help for empty scripts,
 ## not just functions.
-function ans ()
-endfunction
+##function ans ()
+##endfunction
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,17 @@
 2006-08-15  John W. Eaton  <jwe@octave.org>
 
+	* help.cc (help_from_file): Call get_help_from_file with new file
+	arg.  Print file info here.
+
+	* parse.y (get_help_from_file): Delete include_file_info arg.
+	Provide two versions, one that returns the file found in a
+	reference arg and one that does not.
+
 	* variables.cc (do_isglobal): New function.
 	(Fisglobal): Use it.
 	(Fis_global): New function.
 
 2006-08-14  John W. Eaton  <jwe@octave.org>
 
 	* variables.cc (symbol_record_name_compare): Fix casts.
 
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -997,20 +997,23 @@ help_from_symbol_table (std::ostream& os
   return retval;
 }
 
 static bool
 help_from_file (std::ostream& os, const std::string& nm, bool& symbol_found)
 {
   bool retval = false;
 
-  std::string h = get_help_from_file (nm, symbol_found, true);
+  std::string file;
+
+  std::string h = get_help_from_file (nm, symbol_found, file);
 
   if (h.length () > 0)
     {
+      os << nm << " is the file " << file << "\n\n";
       display_help_text (os, h);
       os << "\n";
       retval = true;
     }
 
   return retval;
 }
 
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -86,17 +86,20 @@ extern void
 parse_and_execute (FILE *f);
 
 extern void
 parse_and_execute (const std::string& s, bool verbose = false,
 		   const char *warn_for = 0);
 
 extern std::string
 get_help_from_file (const std::string& nm, bool& symbol_found,
-		    bool include_file_info = false);
+		    std::string& file);
+
+extern std::string
+get_help_from_file (const std::string& nm, bool& symbol_found);
 
 extern std::string lookup_autoload (const std::string& nm);
 
 extern string_vector autoloaded_functions (void);
 
 extern string_vector reverse_lookup_autoload (const std::string& nm);
 
 extern bool
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -3136,44 +3136,48 @@ gobble_leading_white_space (FILE *ffile,
 					       update_pos, false);
     }
 
   return help_txt;
 }
 
 std::string
 get_help_from_file (const std::string& nm, bool& symbol_found,
-		    bool include_file_info)
+		    std::string& file)
 {
   std::string retval;
 
-  std::string file = fcn_file_in_path (nm);
+  file = fcn_file_in_path (nm);
 
   if (! file.empty ())
     {
       symbol_found = true;
 
       FILE *fptr = fopen (file.c_str (), "r");
 
       if (fptr)
 	{
 	  unwind_protect::add (safe_fclose, fptr);
 
 	  retval = gobble_leading_white_space (fptr, true, true, false);
 
-	  if (! retval.empty () && include_file_info)
-	    retval = nm + " is the file: " + file + "\n\n" + retval;
-
 	  unwind_protect::run ();
 	}
     }
 
   return retval;
 }
 
+std::string
+get_help_from_file (const std::string& nm, bool& symbol_found)
+{
+  std::string file;
+  return get_help_from_file (nm, symbol_found, file);
+}
+
 static int
 is_function_file (FILE *ffile)
 {
   int status = 0;
 
   long pos = ftell (ffile);
 
   gobble_leading_white_space (ffile, false, false, false);
