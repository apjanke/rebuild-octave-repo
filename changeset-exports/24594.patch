# HG changeset patch
# User Rik <rik@octave.org>
# Date 1515977840 28800
#      Sun Jan 14 16:57:20 2018 -0800
# Node ID a81af57f614451772795f3252c73744a7c32c788
# Parent  7a0cf02ed6d5be81e247f5f0eb8b5d110b1e10eb
doc: Redo documentation of Bessel functions.


* arith.txi: Add DOCSTRING entries for bessely, besseli, besselk, besselh.

* besselj.cc (Fbesselj, Fbessely, Fbesseli, Fbesselk, Fbesselh): Expand
documentation for each function rather than referring everything back to
besselj.

* scripts/help/bessel.m: Moved from scripts/specfun.

* scripts/help/module.mk, scripts/specfun/module.mk: Update build system for
move of bessel.m

diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -270,16 +270,24 @@ cos (pi/2)
 
 @node Special Functions
 @section Special Functions
 
 @DOCSTRING(airy)
 
 @DOCSTRING(besselj)
 
+@DOCSTRING(bessely)
+
+@DOCSTRING(besseli)
+
+@DOCSTRING(besselk)
+
+@DOCSTRING(besselh)
+
 @DOCSTRING(beta)
 
 @DOCSTRING(betainc)
 
 @DOCSTRING(betaincinv)
 
 @DOCSTRING(betaln)
 
diff --git a/libinterp/corefcn/besselj.cc b/libinterp/corefcn/besselj.cc
--- a/libinterp/corefcn/besselj.cc
+++ b/libinterp/corefcn/besselj.cc
@@ -294,135 +294,286 @@ do_bessel (enum bessel_type type, const 
         }
     }
 
   return retval;
 }
 
 DEFUN (besselj, args, nargout,
        doc: /* -*- texinfo -*-
-@deftypefn  {} {[@var{j}, @var{ierr}] =} besselj (@var{alpha}, @var{x}, @var{opt})
-@deftypefnx {} {[@var{y}, @var{ierr}] =} bessely (@var{alpha}, @var{x}, @var{opt})
-@deftypefnx {} {[@var{i}, @var{ierr}] =} besseli (@var{alpha}, @var{x}, @var{opt})
-@deftypefnx {} {[@var{k}, @var{ierr}] =} besselk (@var{alpha}, @var{x}, @var{opt})
-@deftypefnx {} {[@var{h}, @var{ierr}] =} besselh (@var{alpha}, @var{k}, @var{x}, @var{opt})
-Compute Bessel or Hankel functions of various kinds:
+@deftypefn  {} {@var{J} =} besselj (@var{alpha}, @var{x})
+@deftypefnx {} {@var{J} =} besselj (@var{alpha}, @var{x}, @var{opt})
+@deftypefnx {} {[@var{J}, @var{ierr}] =} besselj (@dots{})
+Compute Bessel functions of the first kind.
+
+The order of the Bessel function @var{alpha} must be real.  The points for
+evaluation @var{x} may be complex.
+
+If the optional argument @var{opt} is 1 or true, the result @var{J} is
+multiplied by @w{@code{exp (-abs (imag (@var{x})))}}.
+
+If @var{alpha} is a scalar, the result is the same size as @var{x}.  If @var{x}
+is a scalar, the result is the same size as @var{alpha}.  If @var{alpha} is a
+row vector and @var{x} is a column vector, the result is a matrix with
+@code{length (@var{x})} rows and @code{length (@var{alpha})} columns.
+Otherwise, @var{alpha} and @var{x} must conform and the result will be the same
+size.
 
-@table @code
-@item besselj
-Bessel functions of the first kind.  If the argument @var{opt} is 1 or true,
-the result is multiplied by @w{@code{exp (-abs (imag (@var{x})))}}.
+If requested, @var{ierr} contains the following status information and is the
+same size as the result.
+
+@enumerate 0
+@item
+Normal return.
+
+@item
+Input error, return @code{NaN}.
 
-@item bessely
-Bessel functions of the second kind.  If the argument @var{opt} is 1 or
-true, the result is multiplied by @code{exp (-abs (imag (@var{x})))}.
+@item
+Overflow, return @code{Inf}.
 
-@item besseli
+@item
+Loss of significance by argument reduction results in less than half of machine
+accuracy.
 
-Modified Bessel functions of the first kind.  If the argument @var{opt} is 1
-or true, the result is multiplied by @code{exp (-abs (real (@var{x})))}.
-
-@item besselk
+@item
+Complete loss of significance by argument reduction, return @code{NaN}.
 
-Modified Bessel functions of the second kind.  If the argument @var{opt} is
-1 or true, the result is multiplied by @code{exp (@var{x})}.
+@item
+Error---no computation, algorithm termination condition not met, return
+@code{NaN}.
+@end enumerate
 
-@item besselh
-Compute Hankel functions of the first (@var{k} = 1) or second (@var{k}
-= 2) kind.  If the argument @var{opt} is 1 or true, the result is multiplied
-by @code{exp (-I*@var{x})} for @var{k} = 1 or @code{exp (I*@var{x})} for
-@var{k} = 2.
-@end table
+@seealso{bessely, besseli, besselk, besselh}
+@end deftypefn */)
+{
+  return do_bessel (BESSEL_J, "besselj", args, nargout);
+}
+
+/*
+%!# Function besselj is tested along with other bessels at the end of this file
+*/
 
-If @var{alpha} is a scalar, the result is the same size as @var{x}.
-If @var{x} is a scalar, the result is the same size as @var{alpha}.
-If @var{alpha} is a row vector and @var{x} is a column vector, the
-result is a matrix with @code{length (@var{x})} rows and
-@code{length (@var{alpha})} columns.  Otherwise, @var{alpha} and
-@var{x} must conform and the result will be the same size.
+DEFUN (bessely, args, nargout,
+       doc: /* -*- texinfo -*-
+@deftypefn  {} {@var{Y} =} bessely (@var{alpha}, @var{x})
+@deftypefnx {} {@var{Y} =} bessely (@var{alpha}, @var{x}, @var{opt})
+@deftypefnx {} {[@var{Y}, @var{ierr}] =} bessely (@dots{})
+Compute Bessel functions of the second kind.
+
+The order of the Bessel function @var{alpha} must be real.  The points for
+evaluation @var{x} may be complex.
 
-The value of @var{alpha} must be real.  The value of @var{x} may be
-complex.
+If the optional argument @var{opt} is 1 or true, the result @var{Y} is
+multiplied by @w{@code{exp (-abs (imag (@var{x})))}}.
 
-If requested, @var{ierr} contains the following status information
-and is the same size as the result.
+If @var{alpha} is a scalar, the result is the same size as @var{x}.  If @var{x}
+is a scalar, the result is the same size as @var{alpha}.  If @var{alpha} is a
+row vector and @var{x} is a column vector, the result is a matrix with
+@code{length (@var{x})} rows and @code{length (@var{alpha})} columns.
+Otherwise, @var{alpha} and @var{x} must conform and the result will be the same
+size.
+
+If requested, @var{ierr} contains the following status information and is the
+same size as the result.
 
 @enumerate 0
 @item
 Normal return.
 
 @item
 Input error, return @code{NaN}.
 
 @item
 Overflow, return @code{Inf}.
 
 @item
-Loss of significance by argument reduction results in less than
-half of machine accuracy.
+Loss of significance by argument reduction results in less than half of machine
+accuracy.
 
 @item
 Complete loss of significance by argument reduction, return @code{NaN}.
 
 @item
-Error---no computation, algorithm termination condition not met,
-return @code{NaN}.
+Error---no computation, algorithm termination condition not met, return
+@code{NaN}.
 @end enumerate
-@end deftypefn */)
-{
-  return do_bessel (BESSEL_J, "besselj", args, nargout);
-}
 
-/*
-%!# Function besselj is tested along with other bessels at the end of this file
-*/
-
-DEFUN (bessely, args, nargout,
-       doc: /* -*- texinfo -*-
-@deftypefn {} {[@var{y}, @var{ierr}] =} bessely (@var{alpha}, @var{x}, @var{opt})
-See besselj.
+@seealso{besselj, besseli, besselk, besselh}
 @end deftypefn */)
 {
   return do_bessel (BESSEL_Y, "bessely", args, nargout);
 }
 
 /*
 %!# Function bessely is tested along with other bessels at the end of this file
 */
 
 DEFUN (besseli, args, nargout,
        doc: /* -*- texinfo -*-
-@deftypefn {} {[@var{i}, @var{ierr}] =} besseli (@var{alpha}, @var{x}, @var{opt})
-See besselj.
+@deftypefn  {} {@var{I} =} besseli (@var{alpha}, @var{x})
+@deftypefnx {} {@var{I} =} besseli (@var{alpha}, @var{x}, @var{opt})
+@deftypefnx {} {[@var{I}, @var{ierr}] =} besseli (@dots{})
+Compute modified Bessel functions of the first kind.
+
+The order of the Bessel function @var{alpha} must be real.  The points for
+evaluation @var{x} may be complex.
+
+If the optional argument @var{opt} is 1 or true, the result @var{I} is
+multiplied by @w{@code{exp (-abs (real (@var{x})))}}.
+
+If @var{alpha} is a scalar, the result is the same size as @var{x}.  If @var{x}
+is a scalar, the result is the same size as @var{alpha}.  If @var{alpha} is a
+row vector and @var{x} is a column vector, the result is a matrix with
+@code{length (@var{x})} rows and @code{length (@var{alpha})} columns.
+Otherwise, @var{alpha} and @var{x} must conform and the result will be the same
+size.
+
+If requested, @var{ierr} contains the following status information and is the
+same size as the result.
+
+@enumerate 0
+@item
+Normal return.
+
+@item
+Input error, return @code{NaN}.
+
+@item
+Overflow, return @code{Inf}.
+
+@item
+Loss of significance by argument reduction results in less than half of machine
+accuracy.
+
+@item
+Complete loss of significance by argument reduction, return @code{NaN}.
+
+@item
+Error---no computation, algorithm termination condition not met, return
+@code{NaN}.
+@end enumerate
+
+@seealso{besselk, besselj, bessely, besselh}
 @end deftypefn */)
+
 {
   return do_bessel (BESSEL_I, "besseli", args, nargout);
 }
 
 /*
 %!# Function besseli is tested along with other bessels at the end of this file
 */
 
 DEFUN (besselk, args, nargout,
        doc: /* -*- texinfo -*-
-@deftypefn {} {[@var{k}, @var{ierr}] =} besselk (@var{alpha}, @var{x}, @var{opt})
-See besselj.
+@deftypefn  {} {@var{K} =} besselk (@var{alpha}, @var{x})
+@deftypefnx {} {@var{K} =} besselk (@var{alpha}, @var{x}, @var{opt})
+@deftypefnx {} {[@var{K}, @var{ierr}] =} besselk (@dots{})
+
+Compute modified Bessel functions of the second kind.
+
+The order of the Bessel function @var{alpha} must be real.  The points for
+evaluation @var{x} may be complex.
+
+If the optional argument @var{opt} is 1 or true, the result @var{K} is
+multiplied by @w{@code{exp (@var{x})}}.
+
+If @var{alpha} is a scalar, the result is the same size as @var{x}.  If @var{x}
+is a scalar, the result is the same size as @var{alpha}.  If @var{alpha} is a
+row vector and @var{x} is a column vector, the result is a matrix with
+@code{length (@var{x})} rows and @code{length (@var{alpha})} columns.
+Otherwise, @var{alpha} and @var{x} must conform and the result will be the same
+size.
+
+If requested, @var{ierr} contains the following status information and is the
+same size as the result.
+
+@enumerate 0
+@item
+Normal return.
+
+@item
+Input error, return @code{NaN}.
+
+@item
+Overflow, return @code{Inf}.
+
+@item
+Loss of significance by argument reduction results in less than half of machine
+accuracy.
+
+@item
+Complete loss of significance by argument reduction, return @code{NaN}.
+
+@item
+Error---no computation, algorithm termination condition not met, return
+@code{NaN}.
+@end enumerate
+
+@seealso{besseli, besselj, bessely, besselh}
 @end deftypefn */)
 {
   return do_bessel (BESSEL_K, "besselk", args, nargout);
 }
 
 /*
 %!# Function besselk is tested along with other bessels at the end of this file
 */
 
 DEFUN (besselh, args, nargout,
        doc: /* -*- texinfo -*-
-@deftypefn {} {[@var{h}, @var{ierr}] =} besselh (@var{alpha}, @var{k}, @var{x}, @var{opt})
-See besselj.
+@deftypefn  {} {@var{H} =} besselh (@var{alpha}, @var{x})
+@deftypefnx {} {@var{H} =} besselh (@var{alpha}, @var{k}, @var{x})
+@deftypefnx {} {@var{H} =} besselh (@var{alpha}, @var{k}, @var{x}, @var{opt})
+@deftypefnx {} {[@var{H}, @var{ierr}] =} besselh (@dots{})
+Compute Bessel functions of the third kind (Hankel functions).
+
+The order of the Bessel function @var{alpha} must be real.  The kind of Hankel
+function is specified by @var{k} and may be either first (@var{k} = 1) or
+second (@var{k} = 2).  The default is Hankel functions of the first kind.  The
+points for evaluation @var{x} may be complex.
+
+If the optional argument @var{opt} is 1 or true, the result is multiplied
+by @code{exp (-I*@var{x})} for @var{k} = 1 or @code{exp (I*@var{x})} for
+@var{k} = 2.
+
+If @var{alpha} is a scalar, the result is the same size as @var{x}.  If @var{x}
+is a scalar, the result is the same size as @var{alpha}.  If @var{alpha} is a
+row vector and @var{x} is a column vector, the result is a matrix with
+@code{length (@var{x})} rows and @code{length (@var{alpha})} columns.
+Otherwise, @var{alpha} and @var{x} must conform and the result will be the same
+size.
+
+If requested, @var{ierr} contains the following status information and is the
+same size as the result.
+
+@enumerate 0
+@item
+Normal return.
+
+@item
+Input error, return @code{NaN}.
+
+@item
+Overflow, return @code{Inf}.
+
+@item
+Loss of significance by argument reduction results in less than half of machine
+accuracy.
+
+@item
+Complete loss of significance by argument reduction, return @code{NaN}.
+
+@item
+Error---no computation, algorithm termination condition not met, return
+@code{NaN}.
+@end enumerate
+
+@seealso{besselj, bessely, besseli, besselk}
 @end deftypefn */)
 {
   int nargin = args.length ();
 
   if (nargin < 2 || nargin > 4)
     print_usage ();
 
   octave_value_list retval;
diff --git a/scripts/specfun/bessel.m b/scripts/help/bessel.m
rename from scripts/specfun/bessel.m
rename to scripts/help/bessel.m
--- a/scripts/specfun/bessel.m
+++ b/scripts/help/bessel.m
@@ -12,21 +12,21 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <https://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
-## @deftypefn  {} {[@var{j}, @var{ierr}] =} besselj (@var{alpha}, @var{x}, @var{opt})
-## @deftypefnx {} {[@var{y}, @var{ierr}] =} bessely (@var{alpha}, @var{x}, @var{opt})
-## @deftypefnx {} {[@var{i}, @var{ierr}] =} besseli (@var{alpha}, @var{x}, @var{opt})
-## @deftypefnx {} {[@var{k}, @var{ierr}] =} besselk (@var{alpha}, @var{x}, @var{opt})
-## @deftypefnx {} {[@var{h}, @var{ierr}] =} besselh (@var{alpha}, @var{k}, @var{x}, @var{opt})
+## @deftypefn  {} {[@var{J}, @var{ierr}] =} besselj (@var{alpha}, @var{x}, @var{opt})
+## @deftypefnx {} {[@var{Y}, @var{ierr}] =} bessely (@var{alpha}, @var{x}, @var{opt})
+## @deftypefnx {} {[@var{I}, @var{ierr}] =} besseli (@var{alpha}, @var{x}, @var{opt})
+## @deftypefnx {} {[@var{K}, @var{ierr}] =} besselk (@var{alpha}, @var{x}, @var{opt})
+## @deftypefnx {} {[@var{H}, @var{ierr}] =} besselh (@var{alpha}, @var{k}, @var{x}, @var{opt})
 ## Compute Bessel or Hankel functions of various kinds:
 ##
 ## @table @code
 ## @item besselj
 ## Bessel functions of the first kind.  If the argument @var{opt} is supplied,
 ## the result is multiplied by @code{exp (-abs (imag (x)))}.
 ##
 ## @item bessely
@@ -43,24 +43,25 @@
 ##
 ## @item besselh
 ## Compute Hankel functions of the first (@var{k} = 1) or second (@var{k} = 2)
 ## kind.  If the argument @var{opt} is supplied, the result is multiplied by
 ## @w{@code{exp (-I*@var{x})}} for @var{k} = 1 or @w{@code{exp (I*@var{x})}}
 ## for @var{k} = 2.
 ## @end table
 ##
-## If @var{alpha} is a scalar, the result is the same size as @var{x}.
-## If @var{x} is a scalar, the result is the same size as @var{alpha}.
-## If @var{alpha} is a row vector and @var{x} is a column vector, the
-## result is a matrix with @code{length (@var{x})} rows and
-## @code{length (@var{alpha})} columns.  Otherwise, @var{alpha} and
-## @var{x} must conform and the result will be the same size.
+## If @var{alpha} is a scalar, the result is the same size as @var{x}.  If
+## @var{x} is a scalar, the result is the same size as @var{alpha}.  If
+## @var{alpha} is a row vector and @var{x} is a column vector, the result is
+## a matrix with @code{length (@var{x})} rows and @code{length
+## (@var{alpha})} columns.  Otherwise, @var{alpha} and @var{x} must conform
+## and the result will be the same size.
 ##
-## The value of @var{alpha} must be real.  The value of @var{x} may be complex.
+## The order of the Bessel function @var{alpha} must be real.  The points for
+## evaluation @var{x} may be complex.
 ##
 ## If requested, @var{ierr} contains the following status information and is
 ## the same size as the result.
 ##
 ## @enumerate 0
 ## @item
 ## Normal return.
 ##
@@ -73,19 +74,21 @@
 ## @item
 ## Loss of significance by argument reduction results in less than half of
 ## machine accuracy.
 ##
 ## @item
 ## Complete loss of significance by argument reduction, return @code{NaN}.
 ##
 ## @item
-## Error---no computation, algorithm termination condition not met,
-## return @code{NaN}.
+## Error---no computation, algorithm termination condition not met, return
+## @code{NaN}.
 ## @end enumerate
+##
+## @seealso{besselj, bessely, besseli, besselk, besselh}
 ## @end deftypefn
 
 function bessel ()
   error ("bessel: you must use besselj, bessely, besseli, besselk, or besselh\n");
 endfunction
 
 
 %!error bessel ()
diff --git a/scripts/help/module.mk b/scripts/help/module.mk
--- a/scripts/help/module.mk
+++ b/scripts/help/module.mk
@@ -6,16 +6,17 @@ FCN_FILE_DIRS += \
   %reldir%/private/__additional_help_message__.m \
   %reldir%/private/__strip_html_tags__.m
 
 %canon_reldir%_FCN_FILES = \
   %reldir%/__gripe_missing_component__.m \
   %reldir%/__makeinfo__.m \
   %reldir%/__unimplemented__.m \
   %reldir%/ans.m \
+  %reldir%/bessel.m \
   %reldir%/debug.m \
   %reldir%/doc.m \
   %reldir%/doc_cache_create.m \
   %reldir%/error_ids.m \
   %reldir%/get_first_help_sentence.m \
   %reldir%/help.m \
   %reldir%/lookfor.m \
   %reldir%/print_usage.m \
diff --git a/scripts/specfun/module.mk b/scripts/specfun/module.mk
--- a/scripts/specfun/module.mk
+++ b/scripts/specfun/module.mk
@@ -1,12 +1,11 @@
 FCN_FILE_DIRS += scripts/specfun
 
 %canon_reldir%_FCN_FILES = \
-  %reldir%/bessel.m \
   %reldir%/beta.m \
   %reldir%/betaln.m \
   %reldir%/ellipke.m \
   %reldir%/expint.m \
   %reldir%/factor.m \
   %reldir%/factorial.m \
   %reldir%/isprime.m \
   %reldir%/lcm.m \
