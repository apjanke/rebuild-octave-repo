# HG changeset patch
# User jwe
# Date 1051390725 0
#      Sat Apr 26 20:58:45 2003 +0000
# Node ID f92093e0ff788f5c893de9110a974b80307d5635
# Parent  dd108fa566fad529390bd4cea0f6d71762a79c62
[project @ 2003-04-26 20:58:45 by jwe]

diff --git a/liboctave/kpse.cc b/liboctave/kpse.cc
--- a/liboctave/kpse.cc
+++ b/liboctave/kpse.cc
@@ -24,16 +24,17 @@ Foundation, Inc., 59 Temple Place - Suit
 
 #include <map>
 #include <string>
 
 #include "kpse-config.h"
 #include "kpse-xfns.h"
 #include "kpse.h"
 
+#include "lo-sstream.h"
 #include "oct-env.h"
 #include "oct-passwd.h"
 
 /* c-std.h: the first header files.  */
 
 /* Header files that essentially all of our sources need, and
    that all implementations have.  We include these first, to help with
    NULL being defined multiple times.  */
@@ -333,36 +334,37 @@ xstrdup (const char *s)
   char *new_string = (char *) xmalloc (strlen (s) + 1);
   return strcpy (new_string, s);
 }
 
 /* These routines just check the return status from standard library
    routines and abort if an error happens.  */
 
 static FILE *
-xfopen (const char *filename, const char *mode)
+xfopen (const std::string& filename, const char *mode)
 {
   FILE *f;
 
-  assert (filename && mode);
-
-  f = fopen (filename, mode);
-  if (f == NULL)
-    FATAL_PERROR (filename);
+  assert (! filename.empty () && mode);
+
+  f = fopen (filename.c_str (), mode);
+
+  if (! f)
+    FATAL_PERROR (filename.c_str ());
 
   return f;
 }
 
 static void
-xfclose (FILE *f, const char *filename)
+xfclose (FILE *f, const std::string& filename)
 {
   assert (f);
 
-  if (fclose (f) == EOF)
-    FATAL_PERROR (filename);
+  if (! fclose (f))
+    FATAL_PERROR (filename.c_str ());
 }
 
 /* Return the concatenation of S1 and S2.  See `concatn.c' for a
    `concatn', which takes a variable number of arguments.  */
 
 static char *
 concat (const char *s1, const char *s2)
 {
@@ -479,17 +481,16 @@ hash_lookup (hash_table_type table, cons
 {
   hash_element_type *p;
   string_vector ret;
   unsigned n = hash (table, key);
 
   /* Look at everything in this bucket.  */
   for (p = table.buckets[n]; p != NULL; p = p->next)
     if (FILESTRCASEEQ (key.c_str (), p->key.c_str ()))
-      /* Cast because the general string_vector shouldn't force const data.  */
       ret.append (p->value);
 
 #ifdef KPSE_DEBUG
   if (KPSE_DEBUG_P (KPSE_DEBUG_HASH))
     {
       DEBUGF1 ("hash_lookup (%s) =>", key.c_str ());
       if (ret.empty ())
         fputs (" (nil)\n", stderr);
@@ -578,115 +579,115 @@ kpse_var_value (const std::string& var)
 #endif
 
   return ret;
 }
 
 /* Truncate any too-long components in NAME, returning the result.  It's
    too bad this is necessary.  See comments in readable.c for why.  */
 
-static char *
-kpse_truncate_filename (const char *name)
+static std::string
+kpse_truncate_filename (const std::string& name)
 {
   unsigned c_len = 0;        /* Length of current component.  */
   unsigned ret_len = 0;      /* Length of constructed result.  */
 
-  /* Allocate enough space.  */
-  char *ret = (char *) xmalloc (strlen (name) + 1);
-
-  for (; *name; name++)
+  std::string ret = name;
+
+  size_t len = name.length ();
+
+  for (size_t i = 0; i < len; i++)
     {
-      if (IS_DIR_SEP (*name) || IS_DEVICE_SEP (*name))
+      if (IS_DIR_SEP (name[i]) || IS_DEVICE_SEP (name[i]))
         {
 	  /* At a directory delimiter, reset component length.  */
           c_len = 0;
         }
       else if (c_len > NAME_MAX)
         {
 	  /* If past the max for a component, ignore this character.  */
           continue;
         }
 
       /* Copy this character.  */
-      ret[ret_len++] = *name;
+      ret[ret_len++] = name[i];
       c_len++;
     }
 
-  ret[ret_len] = 0;
+  ret.resize (ret_len);
 
   return ret;
 }
 
 /* If access can read FN, run stat (assigning to stat buffer ST) and
    check that fn is not a directory.  Don't check for just being a
    regular file, as it is potentially useful to read fifo's or some
    kinds of devices.  */
 
 #ifdef WIN32
 static inline bool
-READABLE (const char *fn, struct stat&)
+READABLE (const std::string& fn, struct stat&)
 {
-  return (GetFileAttributes (fn) != 0xFFFFFFFF
-	  && ! (GetFileAttributes (fn) & FILE_ATTRIBUTE_DIRECTORY));
+  const char *t = fn.c_str ();
+  return (GetFileAttributes (t) != 0xFFFFFFFF
+	  && ! (GetFileAttributes (t) & FILE_ATTRIBUTE_DIRECTORY));
 }
 #else
 static inline bool
-READABLE (const char *fn, struct stat& st)
+READABLE (const std::string& fn, struct stat& st)
 {
-  return (access (fn, R_OK) == 0
-	  && stat (fn, &(st)) == 0
-	  && !S_ISDIR (st.st_mode));
+  const char *t = fn.c_str ();
+  return (access (t, R_OK) == 0
+	  && stat (t, &(st)) == 0 && ! S_ISDIR (st.st_mode));
 }
 #endif
 
 /* POSIX invented the brain-damage of not necessarily truncating
    filename components; the system's behavior is defined by the value of
    the symbol _POSIX_NO_TRUNC, but you can't change it dynamically!
 
    Generic const return warning.  See extend-fname.c.  */
 
-static char *
-kpse_readable_file (const char *name)
+static std::string
+kpse_readable_file (const std::string& name)
 {
   struct stat st;
-  char *ret;
+  std::string ret;
 
   if (READABLE (name, st))
     {
-      ret = (char *) name;
+      ret = name;
 
 #ifdef ENAMETOOLONG
     }
   else if (errno == ENAMETOOLONG)
     {
       ret = kpse_truncate_filename (name);
 
       /* Perhaps some other error will occur with the truncated name,
 	 so let's call access again.  */
 
       if (! READABLE (ret, st))
 	{
 	  /* Failed.  */
-	  if (ret != name)
-	    free (ret);
-
-	  ret = NULL;
+	  ret = std::string ();
 	}
 #endif /* ENAMETOOLONG */
 
     }
   else
     {
       /* Some other error.  */
       if (errno == EACCES)
 	{
 	  /* Maybe warn them if permissions are bad.  */
-	  perror (name);
+	  perror (name.c_str ());
 	}
-      ret = NULL;
+
+      ret = std::string ();
     }
 
   return ret;
 }
 
 /* Sorry this is such a system-dependent mess, but I can't see any way
    to usefully generalize.  */
 
@@ -775,77 +776,54 @@ log_search (const string_vector& filenam
    regular file.  Else continue to search for more.  In any case, if
    none, return a list containing just NULL.
 
    We keep a single buffer for the potential filenames and reallocate
    only when necessary.  I'm not sure it's noticeably faster, but it
    does seem cleaner.  (We do waste a bit of space in the return
    value, though, since we don't shrink it to the final size returned.)  */
 
-#define INIT_ALLOC 75  /* Doesn't much matter what this number is.  */
-
 static string_vector
 dir_list_search (str_llist_type *dirs, const std::string& name,
 		 bool search_all)
 {
   str_llist_elt_type *elt;
   string_vector ret;
-  unsigned name_len = name.length ();
-  unsigned allocated = INIT_ALLOC;
-  char *potential = (char *) xmalloc (allocated);
 
   for (elt = *dirs; elt; elt = STR_LLIST_NEXT (*elt))
     {
       const std::string dir = STR_LLIST (*elt);
-      unsigned dir_len = dir.length ();
-
-      while (dir_len + name_len + 1 > allocated)
+
+      std::string potential = dir + name;
+
+      std::string tmp = kpse_readable_file (potential);
+
+      if (! tmp.empty ())
         {
-          allocated += allocated;
-          XRETALLOC (potential, allocated, char);
-        }
-
-      strcpy (potential, dir.c_str ());
-      strcat (potential, name.c_str ());
-
-      if (kpse_readable_file (potential))
-        {
-          ret.append (std::string (potential));
+          ret.append (potential);
 
           /* Move this element towards the top of the list.  */
           str_llist_float (dirs, elt);
 
-          /* If caller only wanted one file returned, no need to
-             terminate the list with NULL; the caller knows to only look
-             at the first element.  */
           if (! search_all)
             return ret;
-
-          /* Start new filename.  */
-          allocated = INIT_ALLOC;
-          potential = (char *) xmalloc (allocated);
         }
     }
 
-  /* If we get here, either we didn't find any files, or we were finding
-     all the files.  But we're done with the last filename, anyway.  */
-  free (potential);
-
   return ret;
 }
 
 /* This is called when NAME is absolute or explicitly relative; if it's
    readable, return (a list containing) it; otherwise, return NULL.  */
 
 static string_vector
-absolute_search (const std::string& name_arg)
+absolute_search (const std::string& name)
 {
   string_vector ret_list;
-  const char *name = name_arg.c_str ();
-  char *found = kpse_readable_file (name);
+  std::string found = kpse_readable_file (name);
 
   /* Add `found' to the return list even if it's null; that tells
      the caller we didn't find anything.  */
   ret_list.append (std::string (found));
 
   return ret_list;
 }
 
@@ -1063,17 +1041,18 @@ path_find_first_of (const std::string& p
 	  int len = names.length ();
 	  for (int i = 0; i < len && !done; i++)
 	    {
 	      std::string name = names[i];
 
 	      /* Try ls-R, unless we're searching for texmf.cnf.  Our caller
 		 (find_first_of), also tests first_search, and does the
 		 resetting.  */
-	      found = first_search ? string_vector () : kpse_db_search (name, dir.c_str (), all);
+	      found = first_search
+		? string_vector () : kpse_db_search (name, dir.c_str (), all);
 
 	      /* Search the filesystem if (1) the path spec allows it,
 		 and either
 
 		   (2a) we are searching for texmf.cnf ; or
 		   (2b) no db exists; or
 		   (2c) no db's are relevant to this elt; or
 		   (3) MUST_EXIST && NAME was not in the db.
@@ -1515,17 +1494,16 @@ kpse_path_expand (const std::string& pat
    General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program; see the file COPYING.  If not, write to the
    Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
    MA 02111-1307, USA.  */
 
 #define brace_whitespace(c) (! (c) || (c) == ' ' || (c) == '\t' || (c) == '\n')
-#define savestring xstrdup
 
 /* Basic idea:
 
    Segregate the text into 3 sections: preamble (stuff before an open brace),
    postamble (stuff after the matching close brace) and amble (stuff after
    preamble, and before postamble).  Expand amble, and then tack on the
    expansions to preamble.  Expand postamble, and tack on the expansions to
    the result so far.  */
@@ -1567,17 +1545,17 @@ copy_array (char **array)
   register int i;
   int len;
   char **new_array;
 
   len = array_len (array);
 
   new_array = (char **)xmalloc ((len + 1) * sizeof (char *));
   for (i = 0; array[i]; i++)
-    new_array[i] = savestring (array[i]);
+    new_array[i] = xstrdup (array[i]);
   new_array[i] = (char *)NULL;
 
   return (new_array);
 }
 
 /* Return an array of strings; the brace expansion of TEXT. */
 static char **
 brace_expand (const char *text)
@@ -1609,17 +1587,17 @@ brace_expand (const char *text)
   start = ++i;
   c = brace_gobbler (text, &i, '}');
 
   /* What if there isn't a matching close brace? */
   if (! c)
     {
       WARNING1 ("%s: Unmatched {", text);
       free (preamble);		/* Same as result[0]; see initialization. */
-      result[0] = savestring (text);
+      result[0] = xstrdup (text);
       return (result);
     }
 
   amble = (char *) xmalloc (1 + (i - start));
   strncpy (amble, &text[start], (i - start));
   amble[i - start] = 0;
 
   postamble = &text[i + 1];
@@ -1942,55 +1920,60 @@ add_suffixes (const char ***list, ...)
       (*list)[count - 1] = s;
     }
 
   va_end (ap);
 
   (*list)[count] = NULL;
 }
 
-static char *
-remove_dbonly (const char *path)
+static std::string
+remove_dbonly (const std::string& path)
 {
-  char *ret = XTALLOC (strlen (path) + 1, char), *q=ret;
-  const char *p=path;
-  bool new_elt=true;
-
-  while (*p)
+  std::string ret = path;
+  size_t path_len = path.length ();
+
+  size_t i = 0, j = 0;
+
+  bool new_elt = true;
+
+  while (i < path_len)
     {
-      if (new_elt && *p && *p == '!' && *(p+1) == '!')
-	p += 2;
+      if (new_elt && i + 1 < path_len && path[i] == '!' && path[i+1] == '!')
+	i += 2;
       else
 	{
-	  new_elt = (*p == ENV_SEP);
-	  *q++ = *p++;
+	  new_elt = (path[i] == ENV_SEP);
+	  ret[j++] = path[i++];
 	}
     }
 
-  *q = '\0';
+  ret.resize (j);
 
   return ret;
 }
 
 /* Initialize everything for FORMAT.  */
 
 static std::string
 kpse_init_format (void)
 {
   /* If we get called twice, don't redo all the work.  */
   if (! kpse_format_info.path.empty ())
     return kpse_format_info.path;
 
   kpse_format_info.type = "ls-R";
   init_path (&kpse_format_info, DEFAULT_TEXMFDBS, DB_ENVS, NULL);
   add_suffixes (&kpse_format_info.suffix, "ls-R", NULL);
-  kpse_format_info.path = remove_dbonly (kpse_format_info.path.c_str ());
+  kpse_format_info.path = remove_dbonly (kpse_format_info.path);
 
 #ifdef KPSE_DEBUG
-#define MAYBE(member) (kpse_format_info.member.empty () ? "(none)" : kpse_format_info.member.c_str ())
+#define MAYBE(member) \
+  (kpse_format_info.member.empty () \
+    ? "(none)" : kpse_format_info.member.c_str ())
 
   /* Describe the monster we've created.  */
   if (KPSE_DEBUG_P (KPSE_DEBUG_PATHS))
     {
       DEBUGF2 ("Search path for %s files (from %s)\n",
 	       kpse_format_info.type.c_str (),
 	       kpse_format_info.path_source.c_str ());
 
@@ -2078,102 +2061,93 @@ static hash_table_type alias_db;
 
 static string_vector db_dir_list;
 
 /* If DIRNAME contains any element beginning with a `.' (that is more
    than just `./'), return true.  This is to allow ``hidden''
    directories -- ones that don't get searched.  */
 
 static bool
-ignore_dir_p (const char *dirname)
+ignore_dir_p (const std::string& dirname_arg)
 {
+  const char *dirname = dirname_arg.c_str ();
+
   const char *dot_pos = dirname;
 
   while ((dot_pos = strchr (dot_pos + 1, '.')))
     {
       /* If / before and no / after, skip it. */
       if (IS_DIR_SEP (dot_pos[-1]) && dot_pos[1] && !IS_DIR_SEP (dot_pos[1]))
 	return true;
     }
 
   return false;
 }
 
-/* Allocate in increments of this size.  */
-#define BLOCK_SIZE 75
-
-static char *
-read_line (FILE *f)
+static bool
+read_line (FILE *f, std::string& line)
 {
+  bool read_something = false;
+
   int c;
-  unsigned limit = BLOCK_SIZE;
-  unsigned loc = 0;
-  char *line = (char *) xmalloc (limit);
-
-  while ((c = getc (f)) != EOF && c != '\n' && c != '\r')
+
+  OSSTREAM buf;
+
+  while ((c = getc (f)) != EOF)
     {
-      line[loc] = c;
-      loc++;
-
-      /* By testing after the assignment, we guarantee that we'll always
-         have space for the null we append below.  We know we always
-         have room for the first char, since we start with BLOCK_SIZE.  */
-      if (loc == limit)
-        {
-          limit += BLOCK_SIZE;
-          line = (char *) xrealloc (line, limit);
-        }
+      read_something = true;
+
+      if (c == '\n' || c == '\r')
+	break;
+
+      buf << static_cast<char> (c);
     }
 
   /* If we read anything, return it.  This can't represent a last
      ``line'' which doesn't end in a newline, but so what.  */
-  if (c != EOF)
+  if (read_something)
     {
-      /* Terminate the string.  We can't represent nulls in the file,
-         either.  Again, it doesn't matter.  */
-      line[loc] = 0;
-
       /* Absorb LF of a CRLF pair. */
       if (c == '\r')
 	{
           c = getc (f);
           if (c != '\n')
 	    ungetc (c, f);
 	}
+
+      buf << OSSTREAM_ENDS;
+      line = OSSTREAM_STR (buf);
+      OSSTREAM_FREEZE (buf);
     }
-  else /* At end of file.  */
-    {
-      free (line);
-      line = NULL;
-    }
-
-  return line;
+
+  return read_something;
 }
 
 /* If no DB_FILENAME, return false (maybe they aren't using this feature).
    Otherwise, add entries from DB_FILENAME to TABLE, and return true.  */
 
 static bool
 db_build (hash_table_type *table, const std::string& db_filename)
 {
-  char *line;
+  std::string line;
+
   unsigned dir_count = 0, file_count = 0, ignore_dir_count = 0;
+
   unsigned len = db_filename.length () - sizeof (DB_NAME) + 1; /* Keep the /. */
-  char *top_dir = (char *) xmalloc (len + 1);
-  char *cur_dir = NULL; /* First thing in ls-R might be a filename.  */
-  FILE *db_file = xfopen (db_filename.c_str (), "r");
-
-  strncpy (top_dir, db_filename.c_str (), len);
-  top_dir[len] = 0;
+  std::string top_dir = db_filename.substr (0, len);
+
+  std::string cur_dir;
+
+  FILE *db_file = xfopen (db_filename, "r");
 
   if (db_file)
     {
-      while ((line = read_line (db_file)) != NULL)
+      while (read_line (db_file, line))
 	{
-	  len = strlen (line);
+	  len = line.length ();
 
 	  /* A line like `/foo:' = new dir foo.  Allow both absolute (/...)
 	     and explicitly relative (./...) names here.  It's a kludge to
 	     pass in the directory name with the trailing : still attached,
 	     but it doesn't actually hurt.  */
 	  if (len > 0 && line[len - 1] == ':' && kpse_absolute_p (line, true))
 	    {
 	      /* New directory line.  */
@@ -2183,51 +2157,44 @@ db_build (hash_table_type *table, const 
 		     directory name now.  */
 		  line[len - 1] = DIR_SEP;
 
 		  /* Skip over leading `./', it confuses `match' and
 		     is just a waste of space, anyway.  This will lose
 		     on `../', but `match' won't work there, either,
 		     so it doesn't matter.  */
 
-		  cur_dir = *line == '.'
-		    ? concat (top_dir, line + 2) : xstrdup (line);
+		  cur_dir = line[0] == '.' ? top_dir + line.substr (2) : line;
 
 		  dir_count++;
 		}
 	      else
 		{
-		  cur_dir = NULL;
+		  cur_dir = std::string ();
 		  ignore_dir_count++;
 		}
 
 	      /* Ignore blank, `.' and `..' lines.  */
 
 	    }
-	  else if (*line != 0 && cur_dir   /* a file line? */
-		   && !(*line == '.'
-			&& (line[1] == '0'
-			    || (line[1] == '.' && line[2] == 0))))
-
+	  else if (len > 0 && ! cur_dir.empty ()   /* a file line? */
+		   && ! (line[0] == '.'
+			 && (len == 1 || (len == 2 && line[1] == '.'))))
 	    {
 	      /* Make a new hash table entry with a key of `line' and
 		 a data of `cur_dir'.  An already-existing identical
 		 key is ok, since a file named `foo' can be in more
 		 than one directory.  Share `cur_dir' among all its
 		 files (and hence never free it). */
-	      hash_insert (table, xstrdup (line), cur_dir);
+	      hash_insert (table, line, cur_dir);
 	      file_count++;
 	    }
-	  /* else ignore blank lines or top-level files
-	     or files in ignored directories */
-
-	  free (line);
 	}
 
-      xfclose (db_file, db_filename.c_str ());
+      xfclose (db_file, db_filename);
 
       if (file_count == 0)
 	{
 	  WARNING1 ("kpathsea: No usable entries in %s", db_filename.c_str ());
 	  WARNING ("kpathsea: See the manual for how to generate ls-R");
 	  db_file = NULL;
 	}
       else
@@ -2248,18 +2215,16 @@ db_build (hash_table_type *table, const 
 
 	  DEBUGF ("ls-R hash table:");
 	  hash_print (*table, hash_summary_only);
 	  fflush (stderr);
 	}
 #endif /* KPSE_DEBUG */
     }
 
-  free (top_dir);
-
   return db_file != NULL;
 }
 
 /* Insert FNAME into the hash table.  This is for files that get built
    during a run.  We wouldn't want to reread all of ls-R, even if it got
    rebuilt.  */
 
 void
@@ -2393,69 +2358,79 @@ elt_in_db (const std::string& db_dir, co
   return found;
 }
 
 /* If ALIAS_FILENAME exists, read it into TABLE.  */
 
 static bool
 alias_build (hash_table_type *table, const std::string& alias_filename)
 {
-  char *line, *real, *alias;
   unsigned count = 0;
-  FILE *alias_file = xfopen (alias_filename.c_str (), "r");
+
+  FILE *alias_file = xfopen (alias_filename, "r");
 
   if (alias_file)
     {
-      while ((line = read_line (alias_file)) != NULL)
+      std::string line;
+
+      while (read_line (alias_file, line))
 	{
+	  size_t len = line.length ();
+
 	  /* comments or empty */
-	  if (*line == 0 || *line == '%' || *line == '#')
+	  if (len == 0 || line[0] == '%' || line[0] == '#')
 	    /* do nothing */ ;
 	  else
 	    {
-	      /* Each line should have two fields: realname aliasname.  */
-	      real = line;
-
-	      while (*real && isspace (*real))
-		real++;
-
-	      alias = real;
-
-	      while (*alias && !isspace (*alias))
-		alias++;
-
-	      *alias++ = 0;
-
-	      while (*alias && isspace (*alias))
-		alias++;
+	      size_t i = 0;
+
+	      while (i < len && isspace (line[i]))
+		i++;
+
+	      size_t real_beg = i;
+
+	      while (i < len && ! isspace (line[i]))
+		i++;
+
+	      size_t real_len = i - real_beg;
+
+	      while (i < len && isspace (line[i]))
+		i++;
+
+	      size_t alias_beg = i;
+
+	      while (i < len && ! isspace (line[i]))
+		i++;
+
+	      size_t alias_len = i - alias_beg;
 
 	      /* Is the check for errors strong enough?  Should we
 		 warn the user for potential errors?  */
-	      if (strlen (real) != 0 && strlen (alias) != 0)
+	      if (real_len > 0 && alias_len > 0)
 		{
-		  hash_insert (table, xstrdup (alias), xstrdup (real));
+		  hash_insert (table, line.substr (alias_beg, alias_len),
+			       line.substr (real_beg, real_len));
 		  count++;
 		}
 	    }
-	  free (line);
 	}
 
 #ifdef KPSE_DEBUG
       if (KPSE_DEBUG_P (KPSE_DEBUG_HASH))
 	{
 	  /* As with ls-R above ... */
 	  bool hash_summary_only = true;
 	  DEBUGF2 ("%s: %u aliases.\n", alias_filename.c_str (), count);
 	  DEBUGF ("alias hash table:");
 	  hash_print (*table, hash_summary_only);
 	  fflush (stderr);
 	}
 #endif /* KPSE_DEBUG */
 
-      xfclose (alias_file, alias_filename.c_str ());
+      xfclose (alias_file, alias_filename);
     }
 
   return alias_file != NULL;
 }
 
 /* Initialize the path for ls-R files, and read them all into the hash
    table `db'.  If no usable ls-R's are found, set db.buckets to NULL.  */
 
@@ -2599,34 +2574,36 @@ kpse_db_search (const std::string& name_
 	    DEBUGF3 ("db:match (%s,%s) = %d\n", db_file.c_str (), path_elt, matched);
 #endif
 
 	  /* We got a hit in the database.  Now see if the file actually
 	     exists, possibly under an alias.  */
 	  if (matched)
 	    {
 	      std::string found;
-	      if (kpse_readable_file (db_file.c_str ()))
+	      std::string tmp = kpse_readable_file (db_file);
+	      if (! tmp.empty ())
 		found = db_file;
 	      else
 		{
 		  /* The hit in the DB doesn't exist in disk.  Now try
 		     all its aliases.  For example, suppose we have a
 		     hierarchy on CD, thus `mf.bas', but ls-R contains
 		     `mf.base'.  Find it anyway.  Could probably work
 		     around this with aliases, but this is pretty easy
 		     and shouldn't hurt.  The upshot is that if one of
 		     the aliases actually exists, we use that.  */
 
 		  int aliases_len = aliases.length ();
 
 		  for (int k = 1; k < aliases_len && found.empty (); k++)
 		    {
 		      std::string atry = db_dirs[j] + aliases[k];
-		      if (kpse_readable_file (atry.c_str ()))
+		      std::string tmp = kpse_readable_file (atry);
+		      if (! tmp.empty ())
 			found = atry;
 		    }
 		}
 
 	      /* If we have a real file, add it to the list, maybe done.  */
 	      if (! found.empty ())
 		{
 		  ret.append (found);
