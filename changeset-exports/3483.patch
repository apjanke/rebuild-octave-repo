# HG changeset patch
# User jwe
# Date 948929831 0
#      Wed Jan 26 23:37:11 2000 +0000
# Node ID 1bb6e519a4a2bc9f5e9c6bf90aad234e829b0464
# Parent  e461b8ed7c4dfef35c6c37102b24e8a80285d8e4
[project @ 2000-01-26 23:37:10 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2000-01-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* miscellaneous/popen2.m: Deal with the fact that pipe now returns
+	a list of file structures, not a vector of numeric file ids.
+
 2000-01-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* plot/__axis_label__.m: New function.
 	Undo string escapes in text twice(!) before sending to gnuplot.
 	* plot/xlabel.m: Use it.
 	* plot/ylabel.m: Ditto.
 	* plot/zlabel.m: Ditto.
 
diff --git a/scripts/miscellaneous/popen2.m b/scripts/miscellaneous/popen2.m
--- a/scripts/miscellaneous/popen2.m
+++ b/scripts/miscellaneous/popen2.m
@@ -66,40 +66,40 @@ function [in, out, pid] = popen2 (comman
       [stdout_pipe, stdout_status] = pipe ();
 
       if (stdin_status == 0 && stdout_status == 0)
 
         pid = fork ();
 
         if (pid == 0)
 
-          fclose (stdin_pipe (2));
-          fclose (stdout_pipe (1));
+          fclose (nth (stdin_pipe, 2));
+          fclose (nth (stdout_pipe, 1));
 
-          dup2 (stdin_pipe (1), stdin);
-          fclose (stdin_pipe (1));
+          dup2 (nth (stdin_pipe, 1), stdin);
+          fclose (nth (stdin_pipe, 1));
 
-          dup2 (stdout_pipe (2), stdout);
-          fclose (stdout_pipe (2));
+          dup2 (nth (stdout_pipe, 2), stdout);
+          fclose (nth (stdout_pipe, 2));
 
           if (exec (command, args) < 0)
             error ("popen2: unable to start process `%s'", command);
             exit (0);
           endif
 
         elseif (pid)
 
-          fclose (stdin_pipe (1));
-          fclose (stdout_pipe (2));
+          fclose (nth (stdin_pipe, 1));
+          fclose (nth (stdout_pipe, 2));
 
-          if (fcntl (stdout_pipe (1), __F_SETFL__, __O_NONBLOCK__) < 0)
+          if (fcntl (nth (stdout_pipe, 1), __F_SETFL__, __O_NONBLOCK__) < 0)
             error ("popen2: error setting file mode");
           else
-            in = stdin_pipe (2);
-            out = stdout_pipe (1);
+            in = nth (stdin_pipe, 2);
+            out = nth (stdout_pipe, 1);
           endif
 
         elseif (pid < 0)
           error ("popen2: fork failed -- unable to create child process");
         endif
       else
         error ("popen2: pipe creation failed");
       endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,34 @@
+2000-01-26  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* oct-stream.h (scanf_format_elt::char_class): New struct elt.
+	Add arg to constructor.
+	(scanf_format_elt::special_conversion): New enum.
+	* oct-stream.cc (scanf_format_list::add_elt_to_list): New arg,
+	char_class.  Pass it to scanf_format_elt constructor.
+	(scanf_format_list::scanf_format_list): Create separate list
+	elements for whitespace and literal conversions.
+	(expand_char_class): New function.
+	(scanf_format_list::finish_conversion): Extract character class
+	(not including the delimiting brackets) and expand the list of
+	characters.  Pass the result to add_elt_to_list.
+	(scanf_format_list::all_character_conversions): Also accept '^',
+	scanf_format_elt::literal_conversion, and
+	scanf_format_elt::whitespace_conversion types too.
+	(DO_WHITESPACE_CONVERSION, BEGIN_CHAR_CLASS_CONVERSION,
+	BEGIN_C_CONVERSION, BEGIN_S_CONVERSION, DO_LITERAL_CONVERSION):
+	New macros.
+	(octave_base_stream::do_scanf, octave_base_stream::do_oscanf):
+	Use them to avoid code duplication.
+	Handle whitespace, literal text, and character class conversions.
+	(octave_base_stream::oscanf): Loop over all format list elements,
+	not just the first nconv elements.  Clear status flags on is for
+	all streams.
+
 2000-01-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* xdiv.cc (result_ok): Just check value of info.
 	(solve_singularity_warning): New function.
 	(xleftdiv, xdiv): Pass pointer to solve_singularity_warning to
 	solve function.	
 
 	* lex.l (handle_identifier): Set next_tok_is_eq if we are looking
diff --git a/src/oct-stream.cc b/src/oct-stream.cc
--- a/src/oct-stream.cc
+++ b/src/oct-stream.cc
@@ -172,27 +172,52 @@ scanf_format_list::scanf_format_list (co
     {
       have_more = true;
 
       if (! buf)
 	buf = new ostrstream ();
 
       if (s[i] == '%')
 	{
+	  // Process percent-escape conversion type.
+
 	  process_conversion (s, i, n, width, discard, type, modifier,
 			      num_elts);
 	  have_more = (buf != 0);
 	}
-      else
+      else if (isspace (s[i]))
 	{
+	  type = scanf_format_elt::whitespace_conversion;
+
 	  width = 0;
 	  discard = false;
 	  modifier = '\0';
-	  type = '\0';
-	  *buf << s[i++];
+	  *buf << " ";
+
+	  while (++i < n && isspace (s[i]))
+	    /* skip whitespace */;
+
+	  add_elt_to_list (width, discard, type, modifier, num_elts);
+
+	  have_more = false;
+	}
+      else
+	{
+	  type = scanf_format_elt::literal_conversion;
+
+	  width = 0;
+	  discard = false;
+	  modifier = '\0';
+
+	  while (i < n && ! isspace (s[i]) && s[i] != '%')
+	    *buf << s[i++];
+
+	  add_elt_to_list (width, discard, type, modifier, num_elts);
+
+	  have_more = false;
 	}
 
       if (nconv < 0)
 	{
 	  have_more = false;
 	  break;
 	}
     }
@@ -213,50 +238,86 @@ scanf_format_list::~scanf_format_list (v
     {
       scanf_format_elt *elt = list(i);
       delete elt;
     }	
 }
 
 void
 scanf_format_list::add_elt_to_list (int width, bool discard, char type,
-				    char modifier, int& num_elts)
+				    char modifier, int& num_elts,
+				    const string& char_class)
 {
   if (buf)
     {
       *buf << ends;
 
       char *text = buf->str ();
 
       if (text)
 	{
 	  if (*text)
 	    {
 	      scanf_format_elt *elt
-		= new scanf_format_elt (text, width, discard, type, modifier);
+		= new scanf_format_elt (text, width, discard, type,
+					modifier, char_class);
 
 	      if (num_elts == list.length ())
 		list.resize (2 * num_elts);
 
 	      list(num_elts++) = elt;
 	    }
 	  else
 	    delete [] text;
 	}
 
       delete buf;
       buf = 0;
     }
 }
 
+static string
+expand_char_class (const string& s)
+{
+  string retval;
+
+  size_t len = s.length ();
+
+  size_t i = 0;
+
+  while (i < len)
+    {
+      unsigned char c = s[i++];
+
+      if (c == '-' && i > 1 && i < len
+	  && (unsigned char) s[i-2] <= (unsigned char) s[i])
+	{
+	  // Add all characters from the range except the first (we
+	  // already added it below).
+
+	  for (c = s[i-2]+1; c < s[i]; c++)
+	    retval += c;
+	}
+      else
+	{
+	  // Add the character to the class.  Only add '-' if it is
+	  // the last character in the class.
+
+	  if (c != '-' || i == len)
+	    retval += c;
+	}
+    }
+
+  return retval;
+}
+
 void
 scanf_format_list::process_conversion (const string& s, int& i, int n,
 				       int& width, bool& discard, char& type,
 				       char& modifier, int& num_elts)
-
 {
   width = 0;
   discard = false;
   modifier = '\0';
   type = '\0';
 
   *buf << s[i++];
 
@@ -352,89 +413,125 @@ scanf_format_list::process_conversion (c
 
 int
 scanf_format_list::finish_conversion (const string& s, int& i, int n,
 				      int& width, bool discard, char& type,
 				      char modifier, int& num_elts)
 {
   int retval = 0;
 
+  string char_class;
+
   if (s[i] == '%')
     *buf << s[i++];
   else
     {
+      int beg_idx = -1;
+      int end_idx = -1;
+
       type = s[i];
 
       if (s[i] == '[')
 	{
 	  *buf << s[i++];
 
 	  if (i < n)
 	    {
+	      beg_idx = i;
+
 	      if (s[i] == '^')
 		{
 		  type = '^';
 		  *buf << s[i++];
+
+		  if (i < n)
+		    {
+		      beg_idx = i;
+
+		      if (s[i] == ']')
+			*buf << s[i++];
+		    }
 		}
 	      else if (s[i] == ']')
 		*buf << s[i++];
 	    }
 
 	  while (i < n && s[i] != ']')
 	    *buf << s[i++];
 
 	  if (i < n && s[i] == ']')
-	    *buf << s[i++];
+	    {
+	      end_idx = i-1;
+	      *buf << s[i++];
+	    }
 
 	  if (s[i-1] != ']')
 	    retval = nconv = -1;
 	}
       else
 	*buf << s[i++];
 
       nconv++;
 
       if (nconv > 0)
-	add_elt_to_list (width, discard, type, modifier, num_elts);
+	{
+	  if (beg_idx >= 0 && end_idx >= 0)
+	    char_class = expand_char_class (s.substr (beg_idx,
+						      end_idx - beg_idx +1));
+
+	  add_elt_to_list (width, discard, type, modifier, num_elts,
+			   char_class);
+	}
     }
 
   return retval;
 }
 
 void
 scanf_format_list::printme (void) const
 {
   int n = list.length ();
 
   for (int i = 0; i < n; i++)
     {
       scanf_format_elt *elt = list(i);
 
-      cerr << elt->width << "\t"
-	   << elt->discard << "\t"
-	   << elt->type << "\t"
-	   << elt->modifier << "\t"
-	   << undo_string_escapes (elt->text) << "\n";
+      cerr << "width:      " << elt->width << "\n"
+	   << "discard:    " << elt->discard << "\n"
+	   << "type:       ";
+
+      if (elt->type == scanf_format_elt::literal_conversion)
+	cerr << "literal text\n";
+      else if (elt->type == scanf_format_elt::whitespace_conversion)
+	cerr << "whitespace\n";
+      else
+	cerr << elt->type << "\n";
+
+      cerr << "modifier:   " << elt->modifier << "\n"
+	   << "char_class: `" << undo_string_escapes (elt->char_class) << "'\n"
+	   << "text:       `" << undo_string_escapes (elt->text) << "'\n\n";
     }
 }
 
 bool
 scanf_format_list::all_character_conversions (void)
 {
   int n = list.length ();
 
   if (n > 0)
     {
       for (int i = 0; i < n; i++)
 	{
 	  scanf_format_elt *elt = list(i);
 
 	  switch (elt->type)
 	    {
-	    case 'c': case 's': case '%': case '[':
+	    case 'c': case 's': case '%': case '[': case '^':
+	    case scanf_format_elt::literal_conversion:
+	    case scanf_format_elt::whitespace_conversion:
 	      break;
 
 	    default:
 	      return false;
 	      break;
 	    }
 	}
 
@@ -951,16 +1048,163 @@ template void
 do_scanf_conv (istream&, const char*, float*, Matrix&, double*, int&,
 	       int&, int, int, bool);
 #endif
 
 template void
 do_scanf_conv (istream&, const char*, double*, Matrix&, double*, int&,
 	       int&, int, int, bool);
 
+#define DO_WHITESPACE_CONVERSION() \
+  do \
+    { \
+      int c = EOF; \
+ \
+      while (is && (c = is.get ()) != EOF && isspace (c)) \
+	/* skip whitespace */; \
+ \
+      if (c != EOF) \
+	is.putback (c); \
+    } \
+  while (0)
+
+#define DO_LITERAL_CONVERSION() \
+  do \
+    { \
+      int c = EOF; \
+ \
+      int n = strlen (fmt); \
+      int i = 0; \
+ \
+      while (i < n && is && (c = is.get ()) != EOF) \
+	{ \
+	  if (c == fmt[i]) \
+	    { \
+	      i++; \
+	      continue; \
+	    } \
+	  else \
+	    { \
+	      is.putback (c); \
+	      break; \
+	    } \
+	} \
+ \
+      if (i != n) \
+	is.setstate (ios::failbit); \
+    } \
+  while (0)
+
+#define BEGIN_C_CONVERSION() \
+  is.unsetf (ios::skipws); \
+ \
+  int width = elt->width ? elt->width : 1; \
+ \
+  char *tmp = new char[width + 1]; \
+ \
+  int c = EOF; \
+  int n = 0; \
+ \
+  while (is && n < width && (c = is.get ()) != EOF) \
+    tmp[n++] = (char) c; \
+ \
+  tmp[n] = '\0'
+
+// For a `%s' format, skip initial whitespace and then read until the
+// next whitespace character.
+#define BEGIN_S_CONVERSION() \
+  int width = elt->width; \
+ \
+  char *tmp = 0; \
+ \
+  do \
+    { \
+      if (width) \
+	{ \
+	  tmp = new char [width+1]; \
+ \
+	  is.scan (fmt, tmp); \
+ \
+	  tmp[width] = '\0'; \
+	} \
+      else \
+	{ \
+	  ostrstream buf; \
+ \
+	  int c = EOF; \
+ \
+	  while (is && (c = is.get ()) != EOF && isspace (c)) \
+	    /* skip leading whitespace */; \
+ \
+	  if (is && c != EOF) \
+	    buf << (char) c; \
+ \
+	  while (is && (c = is.get ()) != EOF && ! isspace (c)) \
+	    buf << (char) c; \
+ \
+	  if (isspace (c)) \
+	    is.putback (c); \
+ \
+	  buf << ends; \
+ \
+	  tmp = buf.str (); \
+	} \
+    } \
+  while (0)
+
+// This format must match a nonempty sequence of characters.
+#define BEGIN_CHAR_CLASS_CONVERSION() \
+  int width = elt->width; \
+ \
+  char *tmp = 0; \
+ \
+  do \
+    { \
+      if (width) \
+	{ \
+	  tmp = new char[width+1]; \
+ \
+	  is.scan (fmt, tmp); \
+ \
+	  tmp[width] = '\0'; \
+	} \
+      else \
+	{ \
+	  ostrstream buf; \
+ \
+	  string char_class = elt->char_class; \
+ \
+	  int c = EOF; \
+ \
+	  if (elt->type == '[') \
+	    { \
+	      while (is && (c = is.get ()) != EOF \
+		     && char_class.find (c) != NPOS) \
+		buf << (char) c; \
+	    } \
+	  else \
+	    { \
+	      while (is && (c = is.get ()) != EOF \
+		     && char_class.find (c) == NPOS) \
+		buf << (char) c; \
+	    } \
+ \
+	  if (c != EOF) \
+	    is.putback (c); \
+ \
+	  buf << ends; \
+ \
+	  tmp = buf.str (); \
+ \
+	  if (strlen (tmp) == 0) \
+	    is.setstate (ios::failbit); \
+	} \
+    } \
+  while (0)
+
 #define FINISH_CHARACTER_CONVERSION() \
   do \
     { \
       width = strlen (tmp); \
  \
       if (is) \
 	{ \
 	  int i = 0; \
@@ -1115,136 +1359,103 @@ octave_base_stream::do_scanf (scanf_form
 		}
 
 	      const char *fmt = elt->text;
 
 	      bool discard = elt->discard;
 
 	      switch (elt->type)
 		{
+		case scanf_format_elt::whitespace_conversion:
+		  DO_WHITESPACE_CONVERSION ();
+		  break;
+
+		case scanf_format_elt::literal_conversion:
+		  DO_LITERAL_CONVERSION ();
+		  break;
+
 		case '%':
 		  {
 		    int dummy;
 
 		    is.scan (fmt, &dummy);
 		  }
-		break;
+		  break;
 
 		case 'd': case 'i': case 'o': case 'u': case 'x':
 		  {
 		    switch (elt->modifier)
 		      {
 		      case 'h':
 			{
 			  short int tmp;
 			  do_scanf_conv (is, fmt, &tmp, mval, data,
 					 data_index, conversion_count,
 					 nr, max_size, discard);
 			}
-		      break;
+			break;
 
 		      case 'l':
 			{
 			  long int tmp;
 			  do_scanf_conv (is, fmt, &tmp, mval, data,
 					 data_index, conversion_count,
 					 nr, max_size, discard);
 			}
-		      break;
+			break;
 
 		      default:
 			{
 			  int tmp;
 			  do_scanf_conv (is, fmt, &tmp, mval, data,
 					 data_index, conversion_count,
 					 nr, max_size, discard);
 			}
-		      break;
+			break;
 		      }
 		  }
-		break;
+		  break;
 
 		case 'e': case 'f': case 'g':
 		  {
 		    double tmp;
 
 		    do_scanf_conv (is, fmt, &tmp, mval, data,
 				   data_index, conversion_count,
 				   nr, max_size, discard);
 		  }
-		break;
+		  break;
 
 		case 'c':
 		  {
-		    is.unsetf (ios::skipws);
-
-		    int width = elt->width;
-
-		    if (width == 0)
-		      width = 1;
-
-		    char *tmp = new char[width+1];
-
-		    int c = EOF;
-		    int n = 0;
-
-		    while (is && n < width && (c = is.get ()) != EOF)
-		      tmp[n++] = (char) c;
-
-		    tmp[n] = '\0';
+		    BEGIN_C_CONVERSION ();
 
 		    FINISH_CHARACTER_CONVERSION ();
+
+		    is.setf (flags);
 		  }
 		  break;
 
 		case 's':
 		  {
-		    int width = elt->width;
-
-		    char *tmp = 0;
-
-		    if (width)
-		      {
-			tmp = new char [width+1];
-
-			is.scan (fmt, tmp);
-
-			tmp[width] = '\0';
-		      }
-		    else
-		      {
-			// We're looking at a `%s' format.  We have to
-			// skip initial whitespace and then read until
-			// the next whitespace character.
-
-			ostrstream buf;
-
-			int c = EOF;
-
-			while (is && (c = is.get ()) != EOF && isspace (c))
-			  /* skip leading whitespace */;
-
-			if (is && c != EOF)
-			  buf << (char) c;
-			  
-			while (is && (c = is.get ()) != EOF && ! isspace (c))
-			  buf << (char) c;
-
-			buf << ends;
-
-			tmp = buf.str ();
-		      }
+		    BEGIN_S_CONVERSION ();
 
 		    FINISH_CHARACTER_CONVERSION ();
-
-		    is.setf (flags);
 		  }
-		break;
-
-		case 'p': case '[':
+		  break;
+
+		case '[': case '^':
+		  {
+		    BEGIN_CHAR_CLASS_CONVERSION ();
+
+		    FINISH_CHARACTER_CONVERSION ();
+		  }
+		  break;
+
+		case 'p':
 		  error ("fscanf: unsupported format specifier");
 		  break;
 
 		default:
 		  error ("fscanf: internal format error");
 		  break;
 		}
 
@@ -1431,16 +1642,24 @@ octave_base_stream::do_oscanf (const sca
       if (elt)
 	{
 	  const char *fmt = elt->text;
 
 	  bool discard = elt->discard;
 
 	  switch (elt->type)
 	    {
+	    case scanf_format_elt::whitespace_conversion:
+	      DO_WHITESPACE_CONVERSION ();
+	      break;
+
+	    case scanf_format_elt::literal_conversion:
+	      DO_LITERAL_CONVERSION ();
+	      break;
+
 	    case '%':
 	      {
 		int dummy;
 
 		if (! is.scan (fmt, &dummy))
 		  quit = true;
 	      }
 	      break;
@@ -1470,107 +1689,76 @@ octave_base_stream::do_oscanf (const sca
 		  }
 		else
 		  quit = true;
 	      }
 	      break;
 
 	    case 'c':
 	      {
-		is.unsetf (ios::skipws);
-
-		int width = elt->width ? elt->width : 1;
-
-		char *tmp = new char[width + 1];
-
-		if (is.scan (fmt, tmp))
-		  {
-		    if (! discard)
-		      {
-			tmp[width] = '\0';
-			retval = tmp;
-		      }
-		  }
-		else
+		BEGIN_C_CONVERSION ();
+
+		if (! discard)
+		  retval = tmp;
+
+		delete [] tmp;
+
+		if (! is)
 		  quit = true;
 
 		is.setf (flags);
-
-		delete [] tmp;
 	      }
 	      break;
 
 	    case 's':
 	      {
-		int width = elt->width;
-
-		char *tmp = 0;
-
-		if (width)
-		  {
-		    tmp = new char [width+1];
-
-		    is.scan (fmt, tmp);
-
-		    tmp[width] = '\0';
-		  }
-		else
-		  {
-		    // We're looking at a `%s' format.  We have to
-		    // skip initial whitespace and then read until
-		    // the next whitespace character.
-
-		    ostrstream buf;
-
-		    int c = EOF;
-
-		    while (is && (c = is.get ()) != EOF && isspace (c))
-		      /* skip leading whitespace */;
-
-		    if (is && c != EOF)
-		      buf << (char) c;
-			  
-		    while (is && (c = is.get ()) != EOF && ! isspace (c))
-		      buf << (char) c;
-
-		    buf << ends;
-
-		    tmp = buf.str ();
-
-		    if (! discard)
-		      retval = tmp;
-		  }
+		BEGIN_S_CONVERSION ();
+
+		if (! discard)
+		  retval = tmp;
 
 		delete [] tmp;
 
 		if (! is)
 		  quit = true;
 	      }
 	      break;
 
-	    case 'p': case '[':
+	    case '[': case '^':
+	      {
+		BEGIN_CHAR_CLASS_CONVERSION ();
+
+		if (! discard)
+		  retval = tmp;
+
+		delete [] tmp;
+
+		if (! is)
+		  quit = true;
+	      }
+	      break;
+
+	    case 'p':
 	      error ("fscanf: unsupported format specifier");
 	      break;
 
 	    default:
 	      error ("fscanf: internal format error");
 	      break;
 	    }
 	}
 
       if (ok () && is.fail ())
 	{
 	  error ("fscanf: read error");
-      
+
 	  // XXX FIXME XXX -- is this the right thing to do?
 
 	  if (interactive && name () == "stdin")
 	    {
-	      is.clear ();
-
 	      // Skip to end of line.
 
 	      bool err;
 	      do_gets (-1, err, false, "fscanf");
 	    }
 	}
     }
 
@@ -1625,27 +1813,29 @@ octave_base_stream::oscanf (const string
 		      }
 		  }
 	      }
 	  }
 	  break;
 
 	default:
 	  {
+	    is.clear ();
+
 	    int len = fmt_list.length ();
 
 	    retval.resize (nconv, Matrix ());
 
 	    const scanf_format_elt *elt = fmt_list.first ();
 
 	    int num_values = 0;
 
 	    bool quit = false;
 
-	    for (int i = 0; i < nconv; i++)
+	    for (int i = 0; i < len; i++)
 	      {
 		octave_value tmp;
 
 		quit = do_oscanf (elt, tmp);
 
 		if (quit)
 		  break;
 		else
diff --git a/src/oct-stream.h b/src/oct-stream.h
--- a/src/oct-stream.h
+++ b/src/oct-stream.h
@@ -36,27 +36,36 @@ class ostrstream;
 
 #include "Array.h"
 #include "data-conv.h"
 #include "mach-info.h"
 
 struct
 scanf_format_elt
 {
+  enum special_conversion
+    {
+      whitespace_conversion = 1,
+      literal_conversion = 2
+    };
+
   scanf_format_elt (const char *txt = 0, int w = 0, bool d = false,
-		    char typ = '\0', char mod = '\0')
-    : text (txt), width (w), discard (d), type (typ), modifier (mod) { }
+		    char typ = '\0', char mod = '\0',
+		    const string& ch_class = string ())
+    : text (txt), width (w), discard (d), type (typ), modifier (mod),
+      char_class (ch_class) { }
 
   ~scanf_format_elt (void) { delete text; }
 
   const char *text;
   int width;
   bool discard;
   char type;
   char modifier;
+  string char_class;
 };
 
 class
 scanf_format_list
 {
 public:
 
   scanf_format_list (const string& fmt = string ());
@@ -110,17 +119,17 @@ private:
 
   // List of format elements.
   Array<scanf_format_elt*> list;
 
   // Temporary buffer.
   ostrstream *buf;
 
   void add_elt_to_list (int width, bool discard, char type, char modifier,
-			int& num_elts);
+			int& num_elts, const string& char_class = string ());
 
   void process_conversion (const string& s, int& i, int n, int& width,
 			   bool& discard, char& type, char& modifier,
 			   int& num_elts);
 
   int finish_conversion (const string& s, int& i, int n, int& width,
 			 bool discard, char& type, char modifier,
 			 int& num_elts);
