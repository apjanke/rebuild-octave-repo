# HG changeset patch
# User jwe
# Date 760923327 0
#      Thu Feb 10 23:35:27 1994 +0000
# Node ID ff237c5f50026f9b64649375665032c01a8b8705
# Parent  aaf43fb91f39635099927fa10ef040cc365f72b4
[project @ 1994-02-10 23:35:14 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -27,17 +27,16 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #include <assert.h>
 
 #if defined (__GNUG__) && defined (USE_EXTERNAL_TEMPLATES)
 #pragma implementation
 #endif
 
 #include "Array.h"
-#include "lo-error.h"
 
 /*
  * The real representation of all arrays.
  */
 
 template <class T>
 ArrayRep<T>::ArrayRep (T *d, int l)
 {
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -23,16 +23,18 @@ Software Foundation, 675 Mass Ave, Cambr
 
 #if !defined (_Array_h)
 #define _Array_h 1
 
 #if defined (__GNUG__) && defined (USE_EXTERNAL_TEMPLATES)
 #pragma interface
 #endif
 
+#include "lo-error.h"
+
 // Classes we declare.
 
 template <class T> class ArrayRep;
 template <class T> class Array;
 template <class T> class Array2;
 template <class T> class Array3;
 template <class T> class DiagArray;
 
@@ -305,33 +307,33 @@ public:
   int cols (void) const;
   int columns (void) const;
 
 #if defined (_AIX)
   T& elem (int r, int c);
   T& checkelem (int r, int c);
   T& operator () (int r, int c);
 #else
-  Proxy elem (int r, int c)
+  inline Proxy elem (int r, int c)
   {
     return Proxy (this, r, c);
   }
 
-  Proxy checkelem (int r, int c)
+  inline Proxy checkelem (int r, int c)
   {
     if (r < 0 || c < 0 || r >= nr || c >= nc)
       {
 	(*current_liboctave_error_handler) ("range error");
 	return Proxy (0, r, c);
       }
     else
       return Proxy (this, r, c);
   }
 
-  Proxy operator () (int r, int c)
+  inline Proxy operator () (int r, int c)
   {
     if (r < 0 || c < 0 || r >= nr || c >= nc)
       {
 	(*current_liboctave_error_handler) ("range error");
 	return Proxy (0, r, c);
       }
     else
       return Proxy (this, r, c);
@@ -345,18 +347,18 @@ public:
   T checkelem (int r, int c) const;
   T operator () (int r, int c) const;
 
   void resize (int n, int m);
   void resize (int n, int m, const T& val);
 
 private:
 
-  T get (int i) { return Array<T>::elem (i); }
-  void set (const T& val, int i) { Array<T>::elem (i) = val; }
+  inline T get (int i) { return Array<T>::elem (i); }
+  inline void set (const T& val, int i) { Array<T>::elem (i) = val; }
 };
 
 #if defined (__GNUG__) && ! defined (USE_EXTERNAL_TEMPLATES)
 #include "Array.cc"
 #endif
 
 #endif
 
