# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1420830679 18000
#      Fri Jan 09 14:11:19 2015 -0500
# Node ID 701b43ce446730d4798e10ff85e1e04e6825df6d
# Parent  0b068273340f1a099b87eaa0917a86adf7c8a7de
properly close audio files

* audioread.cc (Faudioread, Faudiowrite, Faudioinfo):
Check that file was opened.  Use unwind_protect to close file.

diff --git a/libinterp/dldfcn/audioread.cc b/libinterp/dldfcn/audioread.cc
--- a/libinterp/dldfcn/audioread.cc
+++ b/libinterp/dldfcn/audioread.cc
@@ -23,28 +23,37 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <string>
 #include <map>
 
 #include "oct-locbuf.h"
+#include "unwind-prot.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-struct.h"
 
 #ifdef HAVE_SNDFILE
 #include <sndfile.h>
 #endif
 
+#ifdef HAVE_SNDFILE
+static void
+safe_close (SNDFILE *file)
+{
+  sf_close (file);
+}
+#endif
+
 DEFUN_DLD (audioread, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{y}, @var{fs}] =} audioread (@var{filename})\n\
 @deftypefnx {Loadable Function} {[@var{y}, @var{fs}] =} audioread (@var{filename}, @var{samples})\n\
 \n\
 @deftypefnx {Loadable Function} {[@var{y}, @var{fs}] =} audioread (@var{filename}, @var{datatype})\n\
 @deftypefnx {Loadable Function} {[@var{y}, @var{fs}] =} audioread (@var{filename}, @var{samples}, @var{datatype})\n\
 Read the audio file @var{filename} and return the audio data and sampling\n\
@@ -78,16 +87,26 @@ Read a file and return a specified range
 
   if (error_state)
     return retval;
   
   SF_INFO info;
   info.format = 0;
   SNDFILE *file = sf_open (filename.c_str (), SFM_READ, &info);
 
+  if (! file)
+    {
+      error ("audioread: failed to open input file %s", filename.c_str ());
+      return retval;
+    }
+
+  unwind_protect frame;
+
+  frame.add_fcn (safe_close, file);
+
   OCTAVE_LOCAL_BUFFER (float, data, info.frames * info.channels);
 
   sf_read_float (file, data, info.frames * info.channels);
 
   sf_count_t start = 0;
   sf_count_t end = info.frames;
 
   if ((nargin == 2 && ! args(1).is_string ()) || nargin == 3)
@@ -358,26 +377,28 @@ Comment.\n\
         comment = args(i + 1).string_value ();
       else
         {
           error ("audiowrite: wrong argument name");
           return retval;
         }
     }
 
-  const char *out = filename.c_str ();
-
-  SNDFILE *file = sf_open (out, SFM_WRITE, &info);
+  SNDFILE *file = sf_open (filename.c_str (), SFM_WRITE, &info);
 
   if (! file)
     {
-      error ("audiowrite: failed to open output file %s", out);
+      error ("audiowrite: failed to open output file %s", filename.c_str ());
       return retval;
     }
 
+  unwind_protect frame;
+
+  frame.add_fcn (safe_close, file);
+
   if (title != "")
     sf_set_string (file, SF_STR_TITLE, title.c_str ());
 
   if (artist != "")
     sf_set_string (file, SF_STR_ARTIST, artist.c_str ());
 
   if (comment != "")
     sf_set_string (file, SF_STR_COMMENT, comment.c_str ());
@@ -435,16 +456,26 @@ Return information about an audio file s
 
   if (error_state)
     return retval;
 
   SF_INFO info;
   info.format = 0;
   SNDFILE *file = sf_open (filename.c_str (), SFM_READ, &info);
 
+  if (! file)
+    {
+      error ("audioinfo: failed to open file %s", filename.c_str ());
+      return retval;
+    }
+
+  unwind_protect frame;
+
+  frame.add_fcn (safe_close, file);
+
   octave_scalar_map result;
 
   result.assign ("Filename", filename);
   result.assign ("CompressionMethod", "");
   result.assign ("NumChannels", info.channels);
   result.assign ("SampleRate", info.samplerate);
   result.assign ("TotalSamples", info.frames);
 
