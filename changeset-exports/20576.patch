# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1444337002 14400
#      Thu Oct 08 16:43:22 2015 -0400
# Node ID 40ed9b46a800a5670168211f53df2f1f8d374cd5
# Parent  a61f0d6beb714108b5773efd461a25e51c85ac6f
new octave_value::string_value method with optional error message

* ov.h (octave_value::string_vector): New method.
ov-base.cc, ov-base.h (octave_base_value::string_vector):
New default method.
ov-str-mat.cc, ov-str-mat.h (octave_char_matrix_str::string_value):
New method.

diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -905,16 +905,43 @@ octave_base_value::string_value (bool fo
 
   octave_value tmp = convert_to_str (force);
 
   retval = tmp.string_value ();
 
   return retval;
 }
 
+std::string
+octave_base_value::string_value (const char *fmt, va_list args) const
+{
+  // Note that this method does not need to be particularly efficient
+  // since it is already an error to end up here.
+
+  // FIXME: do we want both the wrong-type-argument error and any custom
+  // error message, or just the custom error message, or should that
+  // behavior be optional in some way?
+
+  try
+    {
+      std::string tn = type_name ();
+
+      error ("wrong type argument '%s'\n", tn.c_str ());
+    }
+  catch (const octave_execution_exception&)
+    {
+      if (fmt)
+        verror (fmt, args);
+
+      throw;
+    }
+
+  return std::string ();
+}
+
 Array<std::string>
 octave_base_value::cellstr_value (void) const
 {
   Array<std::string> retval;
   gripe_wrong_type_arg ("octave_base_value::cellstry_value()",
                         type_name ());
   return retval;
 }
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -559,16 +559,18 @@ public:
   virtual uint32NDArray uint32_array_value (void) const;
 
   virtual uint64NDArray uint64_array_value (void) const;
 
   virtual string_vector all_strings (bool pad = false) const;
 
   virtual std::string string_value (bool force = false) const;
 
+  virtual std::string string_value (const char *fmt, va_list args) const;
+
   virtual Array<std::string> cellstr_value (void) const;
 
   virtual Range range_value (void) const;
 
   virtual octave_map map_value (void) const;
 
   virtual octave_scalar_map scalar_map_value (void) const;
 
diff --git a/libinterp/octave-value/ov-str-mat.cc b/libinterp/octave-value/ov-str-mat.cc
--- a/libinterp/octave-value/ov-str-mat.cc
+++ b/libinterp/octave-value/ov-str-mat.cc
@@ -247,16 +247,48 @@ octave_char_matrix_str::string_value (bo
       retval = chm.row_as_string (0);  // FIXME?
     }
   else
     error ("invalid conversion of charNDArray to string");
 
   return retval;
 }
 
+std::string
+octave_char_matrix_str::string_value (const char *fmt, va_list args) const
+{
+  std::string retval;
+
+  if (! fmt)
+    return string_value ();
+
+  bool conversion_error = false;
+
+  if (matrix.ndims () == 2)
+    {
+      charMatrix chm (matrix);
+
+      try
+        {
+          retval = chm.row_as_string (0);  // FIXME?
+        }
+      catch (const octave_execution_exception&)
+        {
+          conversion_error = true;
+        }
+    }
+  else
+    conversion_error = true;
+
+  if (conversion_error)
+    verror (fmt, args);
+
+  return retval;
+}
+
 Array<std::string>
 octave_char_matrix_str::cellstr_value (void) const
 {
   Array<std::string> retval;
 
   if (matrix.ndims () == 2)
     {
       const charMatrix chm (matrix);
diff --git a/libinterp/octave-value/ov-str-mat.h b/libinterp/octave-value/ov-str-mat.h
--- a/libinterp/octave-value/ov-str-mat.h
+++ b/libinterp/octave-value/ov-str-mat.h
@@ -124,16 +124,18 @@ public:
   ComplexMatrix complex_matrix_value (bool = false) const;
 
   ComplexNDArray complex_array_value (bool = false) const;
 
   string_vector all_strings (bool pad = false) const;
 
   std::string string_value (bool force = false) const;
 
+  std::string string_value (const char *fmt, va_list args) const;
+
   Array<std::string> cellstr_value (void) const;
 
   octave_value sort (octave_idx_type dim = 0, sortmode mode = ASCENDING) const
   { return octave_value (matrix.sort (dim, mode)); }
 
   octave_value sort (Array<octave_idx_type> &sidx, octave_idx_type dim = 0,
                      sortmode mode = ASCENDING) const
   { return octave_value (matrix.sort (sidx, dim, mode)); }
diff --git a/libinterp/octave-value/ov.h b/libinterp/octave-value/ov.h
--- a/libinterp/octave-value/ov.h
+++ b/libinterp/octave-value/ov.h
@@ -892,16 +892,24 @@ public:
   { return rep->uint64_array_value (); }
 
   string_vector all_strings (bool pad = false) const
   { return rep->all_strings (pad); }
 
   std::string string_value (bool force = false) const
   { return rep->string_value (force); }
 
+  std::string string_value (const char *fmt, ...) const
+  {
+    va_list args;
+    va_start (args,fmt);
+    return rep->string_value (fmt, args);
+    va_end (args);
+  }
+
   Array<std::string> cellstr_value (void) const
   { return rep->cellstr_value (); }
 
   Range range_value (void) const
   { return rep->range_value (); }
 
   octave_map map_value (void) const;
 
