# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1236959270 -3600
#      Fri Mar 13 16:47:50 2009 +0100
# Node ID 2e9af33636694e611a08e4f00c70c13491d180b7
# Parent  fde2a916b2ac6e6efe50cf38885cfc391491796c
fix tests with ones

diff --git a/scripts/specfun/legendre.m b/scripts/specfun/legendre.m
--- a/scripts/specfun/legendre.m
+++ b/scripts/specfun/legendre.m
@@ -229,9 +229,9 @@ endfunction
 
 %!test
 %! result = legendre (150, 0);
 %! ## This agrees with Matlab's result.
 %! assert (result(end), 3.7532741115719e+306, 0.0000000000001e+306)
 
 %!test
 %! result = legendre (0, 0:0.1:1);
-%! assert (result, ones(1,11))
+%! assert (result, full(ones(1,11)))
diff --git a/test/test_diag_perm.m b/test/test_diag_perm.m
--- a/test/test_diag_perm.m
+++ b/test/test_diag_perm.m
@@ -41,18 +41,18 @@
 %! assert (A / Pcol, A(:, invperm));
 %! assert (A * Pcol.', A(:, invperm));
 
 ## fall back to a matrix in addition
 %!test
 %! n = 4;
 %! P1 = eye (n) (:, randperm (n));
 %! A = zeros (n) + P1;
-%! assert (sum (A), ones (1, n));
-%! assert (sum (A, 2), ones (n, 1));
+%! assert (sum (A), full (ones (1, n)));
+%! assert (sum (A, 2), full (ones (n, 1)));
 
 ## preserve dense matrix structure
 %!test
 %! n = 7;
 %! Pc = eye (n) (:, randperm (n));
 %! Pr = eye (n) (randperm (n), :);
 %! assert (typeinfo (rand (n) * Pc), "matrix");
 %! assert (typeinfo (Pr * rand (n)), "matrix");
diff --git a/test/test_slice.m b/test/test_slice.m
--- a/test/test_slice.m
+++ b/test/test_slice.m
@@ -113,40 +113,40 @@
 %!assert(set_slice([2 1], 32, 2), [1 1;2 2]');
 %!assert(set_slice([2 1], 32, 3), [1 1;0 0;2 2]');
 %!assert(set_slice([2 1], 33, []), ones([2 1]));
 %!assert(set_slice([2 1], 33, 1), [2 2]');
 %!assert(set_slice([2 1], 33, 2), reshape([1 1 2 2],[2 1 2]));
 %!assert(set_slice([2 1], 33, 3), reshape([1 1 0 0 2 2],[2 1 3]));
 
 ## size = [1 2]
-%!assert(set_slice([1 2], 11, []), ones([1 2]));
+%!assert(set_slice([1 2], 11, []), full(ones([1 2])));
 %!assert(set_slice([1 2], 11, 1), [2 1]);
 %!assert(set_slice([1 2], 11, 2), [1 2]);
 %!assert(set_slice([1 2], 11, 3), [1 1 2]);
 %!assert(set_slice([1 2], 11, 4), [1 1 0 2]);
-%!assert(set_slice([1 2], 21, []), ones([1 2]));
+%!assert(set_slice([1 2], 21, []), full(ones([1 2])));
 %!assert(set_slice([1 2], 21, 1), [2 2]);
 %!assert(set_slice([1 2], 21, 2), [1 1;2 2]);
 %!assert(set_slice([1 2], 21, 3), [1 1;0 0;2 2]);
-%!assert(set_slice([1 2], 22, []), ones([1 2]));
+%!assert(set_slice([1 2], 22, []), full(ones([1 2])));
 %!assert(set_slice([1 2], 22, 1), [2 1]);
 %!assert(set_slice([1 2], 22, 2), [1 2]);
 %!assert(set_slice([1 2], 22, 3), [1 1 2]);
 %!assert(set_slice([1 2], 22, 4), [1 1 0 2]);
-%!assert(set_slice([1 2], 31, []), ones([1 2]));
+%!assert(set_slice([1 2], 31, []), full(ones([1 2])));
 %!assert(set_slice([1 2], 31, 1), [2 2]);
 %!assert(set_slice([1 2], 31, 2), [1 1;2 2]);
 %!assert(set_slice([1 2], 31, 3), [1 1;0 0;2 2]);
-%!assert(set_slice([1 2], 32, []), ones([1 2]));
+%!assert(set_slice([1 2], 32, []), full(ones([1 2])));
 %!assert(set_slice([1 2], 32, 1), [2 1]);
 %!assert(set_slice([1 2], 32, 2), [1 2]);
 %!assert(set_slice([1 2], 32, 3), [1 1 2]);
 %!assert(set_slice([1 2], 32, 4), [1 1 0 2]);
-%!assert(set_slice([1 2], 33, []), ones([1 2]));
+%!assert(set_slice([1 2], 33, []), full(ones([1 2])));
 %!assert(set_slice([1 2], 33, 1), [2 2]);
 %!assert(set_slice([1 2], 33, 2), reshape([1 1 2 2],[1 2 2]));
 %!assert(set_slice([1 2], 33, 3), reshape([1 1 0 0 2 2],[1 2 3]));
 
 ## size = [2 2]
 %!assert(set_slice([2 2], 11, []), ones([2 2]));
 %!assert(set_slice([2 2], 11, 1), [2 1;1 1]);
 %!assert(set_slice([2 2], 11, 2), [1 1;2 1]);
