# HG changeset patch
# User Rik <rik@octave.org>
# Date 1546910994 28800
#      Mon Jan 07 17:29:54 2019 -0800
# Branch stable
# Node ID 8f425e6ea11010dc66c0070a001d62adc8df402c
# Parent  72e0a106d9569f5022bd497c8a43704957d115ed
cmd-edit.cc: Fix static analyzer detected issues (bug #55347).

* cmd-edit.cc (looks_like_filename): Check pointer 'f' validity before using.
* cmd-edit.cc (gnu_readline::command_generator, gnu_readline::command_quoter,
gnu_readline::command_dequoter): Check pointer "retval" validity before using.
* cmd-edit.cc (gnu_readline::command_completer): Declare and assign "matches"
in one statement.
* cmd-edit.cc (command_editor::do_decode_prompt_string): Replace final "else if"
in if/else if tree with just "else".

diff --git a/liboctave/util/cmd-edit.cc b/liboctave/util/cmd-edit.cc
--- a/liboctave/util/cmd-edit.cc
+++ b/liboctave/util/cmd-edit.cc
@@ -524,17 +524,17 @@ namespace octave
 
     const char *s = strrchr (line, delim);
 
     if (s)
       {
         // Remove incomplete component.
         const char *f = strrchr (line, sys::file_ops::dir_sep_char ());
 
-        if (s[1] == '~' || (f && f != s))
+        if (f && (s[1] == '~' || f != s))
           {
             // For something like "A /b", f==s; don't assume a file.
 
             std::string candidate_filename = s+1;
 
             candidate_filename = candidate_filename.substr (0, f - s);
 
             // Handles any complete ~<username>, but doesn't expand usernames.
@@ -828,17 +828,18 @@ namespace octave
     std::string tmp = f (text, state);
 
     size_t len = tmp.length ();
 
     if (len > 0)
       {
         retval = static_cast<char *> (std::malloc (len+1));
 
-        strcpy (retval, tmp.c_str ());
+        if (retval)
+          strcpy (retval, tmp.c_str ());
       }
 
     return retval;
   }
 
   char *
   gnu_readline::command_quoter (char *text, int matches, char *qcp)
   {
@@ -849,17 +850,18 @@ namespace octave
     std::string tmp = f (text, matches, *qcp);
 
     size_t len = tmp.length ();
 
     if (len > 0)
       {
         retval = static_cast<char *> (std::malloc (len+1));
 
-        strcpy (retval, tmp.c_str ());
+        if (retval)
+          strcpy (retval, tmp.c_str ());
       }
 
     return retval;
   }
 
   char *
   gnu_readline::command_dequoter (char *text, int quote)
   {
@@ -870,17 +872,18 @@ namespace octave
     std::string tmp = f (text, quote);
 
     size_t len = tmp.length ();
 
     if (len > 0)
       {
         retval = static_cast<char *> (std::malloc (len+1));
 
-        strcpy (retval, tmp.c_str ());
+        if (retval)
+          strcpy (retval, tmp.c_str ());
       }
 
     return retval;
   }
 
   int
   gnu_readline::command_char_is_quoted (char *text, int quote)
   {
@@ -900,19 +903,20 @@ namespace octave
     ::octave_rl_redisplay ();
 
     return ::octave_rl_newline (count, key);
   }
 
   char **
   gnu_readline::command_completer (const char *text, int, int)
   {
-    char **matches = nullptr;
-    matches
-      = ::octave_rl_completion_matches (text, gnu_readline::command_generator);
+    char **matches =
+      ::octave_rl_completion_matches (text,
+                                      gnu_readline::command_generator);
+
     return matches;
   }
 
 #endif
 
   class
   default_command_editor : public command_editor
   {
@@ -1731,17 +1735,17 @@ namespace octave
                   if (c == 'd')
                     tmpstr = now.strftime ("%a %b %d");
                   else if (c == 't')
                     tmpstr = now.strftime ("%H:%M:%S");
                   else if (c == 'T')
                     tmpstr = now.strftime ("%I:%M:%S");
                   else if (c == '@')
                     tmpstr = now.strftime ("%I:%M %p");
-                  else if (c == 'A')
+                  else // (c == 'A')
                     tmpstr = now.strftime ("%H:%M");
 
                   break;
                 }
 
               case 'e':
                 {
                   tmpstr = '\033';
