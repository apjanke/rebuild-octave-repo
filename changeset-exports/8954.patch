# HG changeset patch
# User Jason Riedy <jason@acm.org>
# Date 1236736474 14400
#      Tue Mar 10 21:54:34 2009 -0400
# Node ID 97c84c4c2247a646b45f28d2161e4d1164e442c9
# Parent  a6945f92b8681a37025b2ec2ca10ab82dbab22e7
Make the column permutation vector in sparse LU cols()-long.

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-03-10  Jason Riedy  <jason@acm.org>
+
+	* sparse-base-lu.cc (Pc_vec): The column permutation should be
+	Ufact.cols ()-long, not Lfact.rows ()-long.
+
 2009-03-10  Jason Riedy  <jason@acm.org>
 
 	* dSparse.cc (SparseMatrix::SparseMatrix (const PermMatrix&)):
 	Fix conversion to add values to the matrix as well as getting
 	structure correct.
 
 2009-03-10  John W. Eaton  <jwe@octave.org>
 
diff --git a/liboctave/sparse-base-lu.cc b/liboctave/sparse-base-lu.cc
--- a/liboctave/sparse-base-lu.cc
+++ b/liboctave/sparse-base-lu.cc
@@ -116,21 +116,21 @@ sparse_base_lu <lu_type, lu_elt_type, p_
   return Pout;
 }
 
 template <class lu_type, class lu_elt_type, class p_type, class p_elt_type>
 ColumnVector
 sparse_base_lu <lu_type, lu_elt_type, p_type, p_elt_type> :: Pc_vec (void) const
 {
 
-  octave_idx_type nr = Lfact.rows ();
+  octave_idx_type nc = Ufact.cols ();
 
-  ColumnVector Pout (nr);
+  ColumnVector Pout (nc);
 
-  for (octave_idx_type i = 0; i < nr; i++)
+  for (octave_idx_type i = 0; i < nc; i++)
     Pout.xelem (i) = static_cast<double> (Q(i) + 1);
 
   return Pout;
 }
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,12 @@
+2009-03-10  Jason Riedy  <jason@acm.org>
+
+	* build_sparse_tests.sh: Add LU tests to the rectangular tests.
+
 2009-03-10  Jason Riedy  <jason@acm.org>
 
 	* test_diag_perm.m: Add a test for conversion to sparse form.
 
 2009-02-25  John W. Eaton  <jwe@octave.org>
 
 	* build_sparse_tests.sh: Note that saving sparse matrices to MAT
 	files fails when using 64-bit indexing.
diff --git a/test/build_sparse_tests.sh b/test/build_sparse_tests.sh
--- a/test/build_sparse_tests.sh
+++ b/test/build_sparse_tests.sh
@@ -660,18 +660,18 @@ gen_square_tests() {
 %! assert(P'*L*U*Q',bs,1e-10);
 %! # triangularity
 %! [i,j,v]=find(L);
 %! assert(i-j>=0);
 %! [i,j,v]=find(U);
 %! assert(j-i>=0);
 
 %!testif HAVE_UMFPACK ;# LU with vector permutations
-%! [L,U,P] = lu(bs,'vector');
-%! assert(L(P,:)*U,bs,1e-10);
+%! [L,U,P,Q] = lu(bs,'vector');
+%! assert(L(P,:)*U(:,Q),bs,1e-10);
 %! # triangularity
 %! [i,j,v]=find(L);
 %! assert(i-j>=0);
 %! [i,j,v]=find(U);
 %! assert(j-i>=0);
 
 %!testif HAVE_UMFPACK ;# LU with scaling
 %! [L,U,P,Q,R] = lu(bs);
@@ -740,16 +740,58 @@ gen_rectangular_tests() {
     gen_real_mapper_tests
     gen_unaryop_tests
     gen_elementop_tests
     gen_sparsesparse_elementop_tests
     gen_matrixop_tests
     # gen_divop_tests # Disable rectangular \ and / for now
     gen_matrixdiag_tests
     gen_matrixreshape_tests
+    cat >>$TESTS <<EOF
+%!testif HAVE_UMFPACK ;# permuted LU
+%! [L,U] = lu(bs);
+%! assert(L*U,bs,1e-10);
+
+%!testif HAVE_UMFPACK ;# simple LU + row permutations
+%! [L,U,P] = lu(bs);
+%! assert(P'*L*U,bs,1e-10);
+%! # triangularity
+%! [i,j,v]=find(L);
+%! assert(i-j>=0);
+%! [i,j,v]=find(U);
+%! assert(j-i>=0);
+
+%!testif HAVE_UMFPACK ;# simple LU + row/col permutations
+%! [L,U,P,Q] = lu(bs);
+%! assert(P'*L*U*Q',bs,1e-10);
+%! # triangularity
+%! [i,j,v]=find(L);
+%! assert(i-j>=0);
+%! [i,j,v]=find(U);
+%! assert(j-i>=0);
+
+%!testif HAVE_UMFPACK ;# LU with vector permutations
+%! [L,U,P,Q] = lu(bs,'vector');
+%! assert(L(P,:)*U(:,Q),bs,1e-10);
+%! # triangularity
+%! [i,j,v]=find(L);
+%! assert(i-j>=0);
+%! [i,j,v]=find(U);
+%! assert(j-i>=0);
+
+%!testif HAVE_UMFPACK ;# LU with scaling
+%! [L,U,P,Q,R] = lu(bs);
+%! assert(R*P'*L*U*Q',bs,1e-10);
+%! # triangularity
+%! [i,j,v]=find(L);
+%! assert(i-j>=0);
+%! [i,j,v]=find(U);
+%! assert(j-i>=0);
+
+EOF
 }
 
 
 # =======================================================
 # sparse assembly tests
 
 gen_assembly_tests() {
 cat >>$TESTS <<EOF
