# HG changeset patch
# User jwe
# Date 1017786226 0
#      Tue Apr 02 22:23:46 2002 +0000
# Node ID fcb4931ec48a0a57404cbace85400d9aec246937
# Parent  69b6bd2712776387bb569b30a4983dbac080e7c3
[project @ 2002-04-02 22:23:45 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -2,18 +2,17 @@ 2002-04-02  John W. Eaton  <jwe@bevo.che
 
 	* lex.l, lex.h (parser_end_of_input): New global variable.
 	(reset_parser): Reset it here.
 	* parse.y (input): Set it to TRUE on EOF.
 	(parse_and_executed): Save and restore it, check it to correctly
 	break out of parse-execute loop.
 	(parse_fcn_file): Likewise.
 	(eval_string): Likewise.
-	* toplev.cc (main_loop): Likewise.
-	
+	* toplev.cc (main_loop): Likewise.	
 
 	* parse.y (input): Call YYACCEPT for END_OF_INPUT.
 	Return no-op command for bare newline.
 	(parse_and_execute): Handle change in yyparse return value semantics.
 
 	* toplev.cc (main_loop): Likewise.
 
 2002-03-25  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,8 +1,13 @@
+2002-04-02  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* octave.test/linalg/qr-7.m: New test.
+	From Paul Kienzle <pkienzle@jazz.ncnr.nist.gov>.
+	
 2001-04-24  Christoph Spiel <cspiel@hammersmith-consulting.com>
 
 	* Makefile.in (check): Allow user to specify which .exp file to run.
 	* octave.test/try, octave.test/eval-catch: New directories and tests.
 
 2000-06-07  Ben Sapp <bsapp@nua.lampf.lanl.gov>
 
 	* octave.test/quad/quad-1.m: Use absolute value of difference
diff --git a/test/octave.test/linalg/qr-7.m b/test/octave.test/linalg/qr-7.m
new file mode 100644
--- /dev/null
+++ b/test/octave.test/linalg/qr-7.m
@@ -0,0 +1,47 @@
+function retval = testqr (q, r, a, p)
+  tol = 512*eps;
+  retval = 0;
+  if (nargin == 3)
+    n1 = norm (q*r-a)
+    n2 = norm (q'*q-eye(columns(q)))
+    retval = (n1 < tol && n2 < tol)
+  else
+    n1 = norm (q'*q-eye(columns(q)))
+    retval = (n1 < tol);
+    if (is_vector (p))
+      n2 = norm (q*r-a(:,p))
+      retval = (retval && n2 < tol);
+    else
+      n2 = norm (q*r - a*p)
+      retval = (retval && n2 < tol);
+    endif
+  endif
+endfunction
+
+t = zeros (16, 1);
+j = 1;
+a = rand(5000,20);
+[q,r]=qr(a,0); t(j++) = testqr(q,r,a);
+[q,r]=qr(a',0); t(j++) = testqr(q,r,a');
+[q,r,p]=qr(a,0); t(j++) = testqr(q,r,a,p);
+[q,r,p]=qr(a',0); t(j++) = testqr(q,r,a',p);
+
+a = a+1i*randn(size(a))*sqrt(eps);
+[q,r]=qr(a,0); t(j++) = testqr(q,r,a);
+[q,r]=qr(a',0); t(j++) = testqr(q,r,a');
+[q,r,p]=qr(a,0); t(j++) = testqr(q,r,a,p);
+[q,r,p]=qr(a',0); t(j++) = testqr(q,r,a',p);
+
+a = [ ones(1,15); sqrt(eps)*eye(15) ];
+[q,r]=qr(a); t(j++) = testqr(q,r,a);
+[q,r]=qr(a'); t(j++) = testqr(q,r,a');
+[q,r,p]=qr(a); t(j++) = testqr(q,r,a,p);
+[q,r,p]=qr(a'); t(j++) = testqr(q,r,a',p);
+
+a = a+1i*randn(size(a))*sqrt(eps);
+[q,r]=qr(a); t(j++) = testqr(q,r,a);
+[q,r]=qr(a'); t(j++) = testqr(q,r,a');
+[q,r,p]=qr(a); t(j++) = testqr(q,r,a,p);
+[q,r,p]=qr(a'); t(j++) = testqr(q,r,a',p);
+
+all (t)
