# HG changeset patch
# User jwe
# Date 846224150 0
#      Fri Oct 25 06:15:50 1996 +0000
# Node ID 2f50b24ce84f9d5b5ec1c11fc2e6aa5ba2214dac
# Parent  1b5536a0bbb408005c609d8ff1f1ebe67516f8e3
[project @ 1996-10-25 06:15:28 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,17 @@
+Fri Oct 25 01:13:45 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in: Define RUSAGE_TIMES_ONLY if cygwin32.
+
+Thu Oct 24 21:17:53 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* config.guess: Update to version that understands what to do for
+	cygwin32 systems.
+
 Fri Oct 18 12:23:57 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* configure.in: Don't comment out substitutions for plplot stuff.
 
 Wed Oct 16 12:01:37 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* examples/Makefile.in (install): New target.
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -15,17 +15,17 @@ dnl Copyright (C) 1996 John W. Eaton
 ### ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
-AC_REVISION($Revision: 1.219 $)
+AC_REVISION($Revision: 1.220 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 AC_CANONICAL_HOST
 if test -z "$host"; then
@@ -884,16 +884,22 @@ case "$RETSIGTYPE" in
     VOID_SIGHANDLER="-DVOID_SIGHANDLER=1"
     AC_MSG_RESULT([defining VOID_SIGHANDLER to be 1])
   ;;
 esac
 AC_SUBST(VOID_SIGHANDLER)
 
 AC_CHECK_FUNCS(getrusage times)
 
+case "$canonical_host_type" in
+  *-*-cygwin32)
+    AC_DEFINE(RUSAGE_TIMES_ONLY, 1)
+  ;;
+esac
+
 ### Checks for other programs used for building, testing, installing,
 ### and running Octave.
 ###
 ### For now, don't define LEXLIB to be -lfl -- we don't use anything in
 ### it, and it might not be installed.
 ###
 ### Also make sure that we generate an interactive scanner if we are
 ### using flex.
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,23 @@
+Fri Oct 25 01:10:51 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* resource.cc (getrusage): [HAVE_GETRUSAGE && RUSAGE_TIMES_ONLY]:
+	Only fill in time values.
+
+Thu Oct 24 20:37:28 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* parse.y: Comment out the %expect declaration so byacc can
+	compile this file.
+	(if_cmd_list): Add missing semicolon.
+	Include <cstdlib> for getenv if using byacc.
+
+	* ov.h: Move typedefs outside of octave_value class scope to avoid
+	problem with cygwin32 beta16 compiler.
+
 Fri Oct 18 13:44:33 1996  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov.h (octave_value::index): Undo previous change.
 	* ov.cc (octave_value constructors): Call maybe_mutate() in most
 	cases.
 
 	* ov-complex.cc (octave_complex::index): Avoid implicit type
 	conversion back to scalar type.
diff --git a/src/ov-range.cc b/src/ov-range.cc
--- a/src/ov-range.cc
+++ b/src/ov-range.cc
@@ -45,17 +45,17 @@ const string octave_range::t_name ("rang
 static octave_value *
 default_numeric_conversion_function (const octave_value& a)
 {
   CAST_CONV_ARG (const octave_range&);
 
   return new octave_matrix (v.matrix_value ());
 }
 
-octave_value::type_conv_fcn
+type_conv_fcn
 octave_range::numeric_conversion_function (void) const
 {
   return default_numeric_conversion_function;
 }
 
 octave_value *
 octave_range::try_narrowing_conversion (void)
 {
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -45,17 +45,17 @@ const string octave_char_matrix_str::t_n
 static octave_value *
 default_numeric_conversion_function (const octave_value& a)
 {
   CAST_CONV_ARG (const octave_char_matrix_str&);
 
   return new octave_matrix (v.matrix_value ());
 }
 
-octave_value::type_conv_fcn
+type_conv_fcn
 octave_char_matrix_str::numeric_conversion_function (void) const
 {
   return default_numeric_conversion_function;
 }
 
 octave_value
 octave_char_matrix_str::index (const octave_value_list& idx) const
 {
diff --git a/src/ov-typeinfo.cc b/src/ov-typeinfo.cc
--- a/src/ov-typeinfo.cc
+++ b/src/ov-typeinfo.cc
@@ -36,49 +36,49 @@ Software Foundation, 59 Temple Place - S
 #include "oct-obj.h"
 
 octave_value_typeinfo *octave_value_typeinfo::instance = 0;
 
 #include <Array.cc>
 #include <Array2.cc>
 #include <Array3.cc>
 
-template class Array<octave_value::binary_op_fcn>;
-template class Array2<octave_value::binary_op_fcn>;
-template class Array3<octave_value::binary_op_fcn>;
+template class Array<binary_op_fcn>;
+template class Array2<binary_op_fcn>;
+template class Array3<binary_op_fcn>;
 
-template class Array<octave_value::assign_op_fcn>;
-template class Array2<octave_value::assign_op_fcn>;
+template class Array<assign_op_fcn>;
+template class Array2<assign_op_fcn>;
 
-template class Array<octave_value::type_conv_fcn>;
-template class Array2<octave_value::type_conv_fcn>;
+template class Array<type_conv_fcn>;
+template class Array2<type_conv_fcn>;
 
 int
 octave_value_typeinfo::register_type (const string& name)
 {
   if (! instance)
     instance = new octave_value_typeinfo ();
 
   return instance->do_register_type (name);
 }
 
 bool
 octave_value_typeinfo::register_binary_op (octave_value::binary_op op,
 					   int t1, int t2,
-					   octave_value::binary_op_fcn f)
+					   binary_op_fcn f)
 {
   if (! instance)
     instance = new octave_value_typeinfo ();
 
   return instance->do_register_binary_op (op, t1, t2, f);
 }
 
 bool
 octave_value_typeinfo::register_assign_op (int t_lhs, int t_rhs,
-					   octave_value::assign_op_fcn f)
+					   assign_op_fcn f)
 {
   if (! instance)
     instance = new octave_value_typeinfo ();
 
   return instance->do_register_assign_op (t_lhs, t_rhs, f);
 }
 
 bool
@@ -88,17 +88,17 @@ octave_value_typeinfo::register_pref_ass
   if (! instance)
     instance = new octave_value_typeinfo ();
 
   return instance->do_register_pref_assign_conv (t_lhs, t_rhs, t_result);
 }
 
 bool
 octave_value_typeinfo::register_widening_op (int t, int t_result,
-					     octave_value::type_conv_fcn f)
+					     type_conv_fcn f)
 {
   if (! instance)
     instance = new octave_value_typeinfo ();
 
   return instance->do_register_widening_op (t, t_result, f);
 }
 
 int
@@ -114,45 +114,45 @@ octave_value_typeinfo::do_register_type 
 
   if (i == len)
     {
       len *= 2;
 
       types.resize (len, string ());
 
       binary_ops.resize ((int) octave_value::num_binary_ops, len, len,
-			 (octave_value::binary_op_fcn) 0);
+			 (binary_op_fcn) 0);
 
-      assign_ops.resize (len, len, (octave_value::assign_op_fcn) 0);
+      assign_ops.resize (len, len, (assign_op_fcn) 0);
 
       pref_assign_conv.resize (len, len, -1);
 
-      widening_ops.resize (len, len, (octave_value::type_conv_fcn) 0);
+      widening_ops.resize (len, len, (type_conv_fcn) 0);
     }
 
   types (i) = name;
 
   num_types++;
 
   return i;
 }
 
 bool
 octave_value_typeinfo::do_register_binary_op (octave_value::binary_op op,
 					      int t1, int t2,
-					      octave_value::binary_op_fcn f)
+					      binary_op_fcn f)
 {
   binary_ops.checkelem ((int) op, t1, t2) = f;
 
   return false;
 }
 
 bool
 octave_value_typeinfo::do_register_assign_op (int t_lhs, int t_rhs,
-					      octave_value::assign_op_fcn f)
+					      assign_op_fcn f)
 {
   assign_ops.checkelem (t_lhs, t_rhs) = f;
 
   return false;
 }
 
 bool
 octave_value_typeinfo::do_register_pref_assign_conv (int t_lhs, int t_rhs,
@@ -160,45 +160,45 @@ octave_value_typeinfo::do_register_pref_
 {
   pref_assign_conv.checkelem (t_lhs, t_rhs) = t_result;
 
   return false;
 }
 
 bool
 octave_value_typeinfo::do_register_widening_op
-  (int t, int t_result, octave_value::type_conv_fcn f)
+  (int t, int t_result, type_conv_fcn f)
 {
   widening_ops.checkelem (t, t_result) = f;
 
   return false;
 }
 
 #include <iostream.h>
 
-octave_value::binary_op_fcn
+binary_op_fcn
 octave_value_typeinfo::do_lookup_binary_op (octave_value::binary_op op,
 					    int t1, int t2)
 {
   return binary_ops.checkelem ((int) op, t1, t2);
 }
 
-octave_value::assign_op_fcn
+assign_op_fcn
 octave_value_typeinfo::do_lookup_assign_op (int t_lhs, int t_rhs)
 {
   return assign_ops.checkelem (t_lhs, t_rhs);
 }
 
 int
 octave_value_typeinfo::do_lookup_pref_assign_conv (int t_lhs, int t_rhs)
 {
   return pref_assign_conv.checkelem (t_lhs, t_rhs);
 }
 
-octave_value::type_conv_fcn
+type_conv_fcn
 octave_value_typeinfo::do_lookup_widening_op (int t, int t_result)
 {
   return widening_ops.checkelem (t, t_result);
 }
 
 string_vector
 octave_value_typeinfo::do_installed_type_names (void)
 {
diff --git a/src/ov-typeinfo.h b/src/ov-typeinfo.h
--- a/src/ov-typeinfo.h
+++ b/src/ov-typeinfo.h
@@ -40,98 +40,98 @@ class string_vector;
 class
 octave_value_typeinfo
 {
 public:
 
   static int register_type (const string&);
 
   static bool register_binary_op (octave_value::binary_op, int, int,
-				  octave_value::binary_op_fcn);
+				  binary_op_fcn);
 
-  static bool register_assign_op (int, int, octave_value::assign_op_fcn);
+  static bool register_assign_op (int, int, assign_op_fcn);
 
   static bool register_pref_assign_conv (int, int, int);
 
-  static bool register_widening_op (int, int, octave_value::type_conv_fcn);
+  static bool register_widening_op (int, int, type_conv_fcn);
 
-  static octave_value::binary_op_fcn
+  static binary_op_fcn
   lookup_binary_op (octave_value::binary_op op, int t1, int t2)
   {
     return instance->do_lookup_binary_op (op, t1, t2);
   }
 
-  static octave_value::assign_op_fcn
+  static assign_op_fcn
   lookup_assign_op (int t_lhs, int t_rhs)
   {
     return instance->do_lookup_assign_op (t_lhs, t_rhs);
   }
 
   static int
   lookup_pref_assign_conv (int t_lhs, int t_rhs)
   {
     return instance->do_lookup_pref_assign_conv (t_lhs, t_rhs);
   }
 
-  static octave_value::type_conv_fcn
+  static type_conv_fcn
   lookup_widening_op (int t, int t_result)
   {
     return instance->do_lookup_widening_op (t, t_result);
   }
 
   static string_vector installed_type_names (void)
   {
     return instance->do_installed_type_names ();
   }
 
 protected:
 
   octave_value_typeinfo (void)
     : num_types (0), types (32, string ()),
       binary_ops (octave_value::num_binary_ops, 32, 32,
-		  (octave_value::binary_op_fcn) 0),
-      assign_ops (32, 32, (octave_value::assign_op_fcn) 0),
+		  (binary_op_fcn) 0),
+      assign_ops (32, 32, (assign_op_fcn) 0),
       pref_assign_conv (32, 32, -1),
-      widening_ops (32, 32, (octave_value::type_conv_fcn) 0)  { }
+      widening_ops (32, 32, (type_conv_fcn) 0)  { }
 
 private:
 
   static octave_value_typeinfo *instance;
 
   int num_types;
 
   Array<string> types;
 
-  Array3<octave_value::binary_op_fcn> binary_ops;
+  Array3<binary_op_fcn> binary_ops;
 
-  Array2<octave_value::assign_op_fcn> assign_ops;
+  Array2<assign_op_fcn> assign_ops;
 
   Array2<int> pref_assign_conv;
 
-  Array2<octave_value::type_conv_fcn> widening_ops;
+  Array2<type_conv_fcn> widening_ops;
 
   int do_register_type (const string&);
 
   bool do_register_binary_op (octave_value::binary_op, int, int,
-			      octave_value::binary_op_fcn);
+			      binary_op_fcn);
 
-  bool do_register_assign_op (int, int, octave_value::assign_op_fcn);
+  bool do_register_assign_op (int, int, assign_op_fcn);
 
   bool do_register_pref_assign_conv (int, int, int);
 
-  bool do_register_widening_op (int, int, octave_value::type_conv_fcn);
+  bool do_register_widening_op (int, int, type_conv_fcn);
 
-  octave_value::binary_op_fcn
+  binary_op_fcn
   do_lookup_binary_op (octave_value::binary_op, int, int);
 
-  octave_value::assign_op_fcn do_lookup_assign_op (int, int);
+  assign_op_fcn do_lookup_assign_op (int, int);
 
   int do_lookup_pref_assign_conv (int, int);
 
-  octave_value::type_conv_fcn do_lookup_widening_op (int, int);
+  type_conv_fcn do_lookup_widening_op (int, int);
 
   string_vector do_installed_type_names (void);
 
   // No copying!
 
   octave_value_typeinfo (const octave_value_typeinfo&);
 
   octave_value_typeinfo& operator = (const octave_value_typeinfo&);
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -571,17 +571,17 @@ octave_value::convert_and_assign (const 
   int t_lhs = type_id ();
   int t_rhs = rhs.type_id ();
 
   int t_result
     = octave_value_typeinfo::lookup_pref_assign_conv (t_lhs, t_rhs);
 
   if (t_result >= 0)
     {
-      octave_value::type_conv_fcn cf
+      type_conv_fcn cf
 	= octave_value_typeinfo::lookup_widening_op (t_lhs, t_result);
 
       if (cf)
 	{
 	  octave_value *tmp = cf (*rep);
 
 	  if (tmp)
 	    {
@@ -612,25 +612,25 @@ bool
 octave_value::try_assignment_with_conversion (const octave_value_list& idx,
 					      const octave_value& rhs)
 {
   bool assignment_ok = convert_and_assign (idx, rhs);
 
   if (! (error_state || assignment_ok))
     {
       octave_value tmp_rhs;
-      octave_value::type_conv_fcn cf_rhs = rhs.numeric_conversion_function ();
+      type_conv_fcn cf_rhs = rhs.numeric_conversion_function ();
 
       if (cf_rhs)
 	tmp_rhs = octave_value (cf_rhs (*rhs.rep));
       else
 	tmp_rhs = rhs;
 
       octave_value *old_rep = 0;
-      octave_value::type_conv_fcn cf_this = numeric_conversion_function ();
+      type_conv_fcn cf_this = numeric_conversion_function ();
 
       if (cf_this)
 	{
 	  old_rep = rep;
 	  rep = cf_this (*rep);
 	  rep->count = 1;
 	}
 
@@ -665,18 +665,17 @@ bool
 octave_value::try_assignment (const octave_value_list& idx,
 			      const octave_value& rhs)
 {
   bool retval = false;
 
   int t_lhs = type_id ();
   int t_rhs = rhs.type_id ();
 
-  octave_value::assign_op_fcn f
-    = octave_value_typeinfo::lookup_assign_op (t_lhs, t_rhs);
+  assign_op_fcn f = octave_value_typeinfo::lookup_assign_op (t_lhs, t_rhs);
 
   if (f)
     {
       f (*rep, idx, *(rhs.rep));
 
       retval = (! error_state);
     }
 
@@ -694,48 +693,47 @@ octave_value
 do_binary_op (octave_value::binary_op op, const octave_value& v1,
 	      const octave_value& v2)
 {
   octave_value retval;
 
   int t1 = v1.type_id ();
   int t2 = v2.type_id ();
 
-  octave_value::binary_op_fcn f
-    = octave_value_typeinfo::lookup_binary_op (op, t1, t2);
+  binary_op_fcn f = octave_value_typeinfo::lookup_binary_op (op, t1, t2);
 
   if (f)
     retval = f (*v1.rep, *v2.rep);
   else
     {
       octave_value tv1;
-      octave_value::type_conv_fcn cf1 = v1.numeric_conversion_function ();
+      type_conv_fcn cf1 = v1.numeric_conversion_function ();
 
       if (cf1)
 	{
 	  tv1 = octave_value (cf1 (*v1.rep));
 	  t1 = tv1.type_id ();
 	}
       else
 	tv1 = v1;
 
       octave_value tv2;
-      octave_value::type_conv_fcn cf2 = v2.numeric_conversion_function ();
+      type_conv_fcn cf2 = v2.numeric_conversion_function ();
 
       if (cf2)
 	{
 	  tv2 = octave_value (cf2 (*v2.rep));
 	  t2 = tv2.type_id ();
 	}
       else
 	tv2 = v2;
 
       if (cf1 || cf2)
 	{
-	  octave_value::binary_op_fcn f
+	  binary_op_fcn f
 	    = octave_value_typeinfo::lookup_binary_op (op, t1, t2);
 
 	  if (f)
 	    retval = f (*tv1.rep, *tv2.rep);
 	  else
 	    gripe_binary_op (octave_value::binary_op_as_string (op),
 			     v1.type_name (), v2.type_name ());
 	}
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -54,29 +54,35 @@ class octave_value_list;
 class
 octave_xvalue
 {
 public:
 
   octave_xvalue (void) { }
 };
 
+class octave_value;
+
+// XXX FIXME XXX -- these should probably really be inside the scope
+// of the octave_value class, but the cygwin32 beta16 version of g++
+// can't handlt that.
+
+typedef octave_value (*binary_op_fcn)
+  (const octave_value&, const octave_value&);
+
+typedef octave_value (*assign_op_fcn)
+  (octave_value&, const octave_value_list&, const octave_value&);
+
+typedef octave_value * (*type_conv_fcn) (const octave_value&);
+
 class
 octave_value
 {
 public:
 
-  typedef octave_value (*binary_op_fcn)
-    (const octave_value&, const octave_value&);
-
-  typedef octave_value (*assign_op_fcn)
-    (octave_value&, const octave_value_list&, const octave_value&);
-
-  typedef octave_value * (*type_conv_fcn) (const octave_value&);
-
   enum binary_op
   {
     add,
     sub,
     mul,
     div,
     pow,
     ldiv,
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -26,16 +26,20 @@ Software Foundation, 59 Temple Place - S
 
 %{
 #define YYDEBUG 1
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#ifdef YYBYACC
+#include <cstdlib>
+#endif
+
 #include <strstream.h>
 
 #include "Matrix.h"
 
 #include "defun.h"
 #include "error.h"
 #include "input.h"
 #include "lex.h"
@@ -345,18 +349,19 @@ static void maybe_warn_missing_semi (tre
 %left EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %left ':'
 %left '-' '+' EPLUS EMINUS
 %left '*' '/' LEFTDIV EMUL EDIV ELEFTDIV
 %left QUOTE TRANSPOSE
 %left UNARY PLUS_PLUS MINUS_MINUS EXPR_NOT
 %right POW EPOW
 
-// There are 19 shift/reduce conflicts, ok?
-%expect 19
+// There are 19 shift/reduce conflicts, ok?  But this only works with
+// bison...
+// %expect 19
 
 // Where to start.
 %start input
 
 // Grammar rules.
 
 %%
 
@@ -718,17 +723,17 @@ command		: plot_command
 if_command	: IF if_cmd_list END
 		  {
 		    if (! ($$ = finish_if_command ($1, $2, $3)))
 		      ABORT_PARSE;
 		  }
 		;
 
 if_cmd_list	: if_cmd_list1
-		  { $$ = $1 }
+		  { $$ = $1; }
 		| if_cmd_list1 else_clause
 		  {
 		    $1->append ($2);
 		    $$ = $1;
 		  }
 		;
 
 if_cmd_list1	: expression optsep opt_list
diff --git a/src/resource.cc b/src/resource.cc
--- a/src/resource.cc
+++ b/src/resource.cc
@@ -80,30 +80,32 @@ Return system resource statistics.")
   tv_tmp ["sec"] = (double) ru.ru_utime.tv_sec;
   tv_tmp ["usec"] = (double) ru.ru_utime.tv_usec;
   m ["utime"] = octave_value (tv_tmp);
 
   tv_tmp ["sec"] = (double) ru.ru_stime.tv_sec;
   tv_tmp ["usec"] = (double) ru.ru_stime.tv_usec;
   m ["stime"] = octave_value (tv_tmp);
 
+#if ! defined (RUSAGE_TIMES_ONLY)
   m ["maxrss"] = (double) ru.ru_maxrss;
   m ["ixrss"] = (double) ru.ru_ixrss;
   m ["idrss"] = (double) ru.ru_idrss;
   m ["isrss"] = (double) ru.ru_isrss;
   m ["minflt"] = (double) ru.ru_minflt;
   m ["majflt"] = (double) ru.ru_majflt;
   m ["nswap"] = (double) ru.ru_nswap;
   m ["inblock"] = (double) ru.ru_inblock;
   m ["oublock"] = (double) ru.ru_oublock;
   m ["msgsnd"] = (double) ru.ru_msgsnd;
   m ["msgrcv"] = (double) ru.ru_msgrcv;
   m ["nsignals"] = (double) ru.ru_nsignals;
   m ["nvcsw"] = (double) ru.ru_nvcsw;
   m ["nivcsw"] = (double) ru.ru_nivcsw;
+#endif
 
 #else
 #if defined (HAVE_TIMES) && defined (HAVE_SYS_TIMES_H)
 
   struct tms t;
 
   times (&t);
 
