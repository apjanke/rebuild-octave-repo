# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1428009363 14400
#      Thu Apr 02 17:16:03 2015 -0400
# Node ID 8b501a0db1e919a104210a26faf4b5091f7d4b07
# Parent  10600b2dd3c1e09c2c97d318b928e91167b3b64a
only insert package names into loader map if package dir exists (bug #43769)

* load-path.h, load-path.cc (load_path::::is_package): New function.
(load_path::dir_info::is_package): New function.
(load_path::get_loader): Don't insert name into loader map unless is
it is also a +package directory somewhere in the load path.
* ov-classdef.cc (cdef_manager::do_find_package_symbol):
Undo change from changeset 8fe29850fb74.

diff --git a/libinterp/corefcn/load-path.cc b/libinterp/corefcn/load-path.cc
--- a/libinterp/corefcn/load-path.cc
+++ b/libinterp/corefcn/load-path.cc
@@ -104,16 +104,22 @@ load_path::dir_info::update (void)
     }
   else
     {
       std::string msg = fs.error ();
       warning ("load_path: %s: %s", dir_name.c_str (), msg.c_str ());
     }
 }
 
+bool
+load_path::dir_info::is_package (const std::string& name) const
+{
+  return package_dir_map.find (name) != package_dir_map.end ();
+}
+
 void
 load_path::dir_info::initialize (void)
 {
   is_relative = ! octave_env::absolute_pathname (dir_name);
 
   dir_time_last_checked = octave_time (static_cast<time_t> (0));
 
   file_stat fs (dir_name);
@@ -1213,16 +1219,30 @@ load_path::loader::methods (const std::s
     }
 
   if (! retval.empty ())
     retval.sort ();
 
   return retval;
 }
 
+bool
+load_path::is_package (const std::string& name) const
+{
+  for (const_dir_info_list_iterator p = dir_info_list.begin ();
+       p != dir_info_list.end ();
+       p++)
+    {
+      if (p->is_package (name))
+        return true;
+    }
+
+  return false;
+}
+
 std::list<std::string>
 load_path::do_overloads (const std::string& meth) const
 {
   std::list<std::string> retval;
 
   //  update ();
 
   default_loader.overloads (meth, retval);
diff --git a/libinterp/corefcn/load-path.h b/libinterp/corefcn/load-path.h
--- a/libinterp/corefcn/load-path.h
+++ b/libinterp/corefcn/load-path.h
@@ -390,16 +390,18 @@ private:
     octave_time dir_mtime;
     octave_time dir_time_last_checked;
     string_vector all_files;
     string_vector fcn_files;
     fcn_file_map_type private_file_map;
     method_file_map_type method_file_map;
     package_dir_map_type package_dir_map;
 
+    bool is_package (const std::string& name) const;
+
   private:
 
     void initialize (void);
 
     void get_file_list (const std::string& d);
 
     void get_private_file_map (const std::string& d);
 
@@ -653,19 +655,21 @@ private:
   bool do_remove (const std::string& dir);
 
   void do_update (void) const;
 
   static bool
   check_file_type (std::string& fname, int type, int possible_types,
                    const std::string& fcn, const char *who);
 
+  bool is_package (const std::string& name) const;
+
   loader& get_loader (const std::string& name) const
   {
-    if (! name.empty ())
+    if (! name.empty () && is_package (name))
       {
         loader_map_iterator l = loader_map.find (name);
 
         if (l == loader_map.end ())
           l = loader_map.insert (loader_map.end (),
                                  loader_map_type::value_type (name, loader (name)));
 
         return l->second;
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -3973,17 +3973,17 @@ cdef_manager::do_find_package (const std
   return retval;
 }
 
 octave_function*
 cdef_manager::do_find_package_symbol (const std::string& pack_name)
 {
   octave_function* retval = 0;
 
-  cdef_package pack = find_package (pack_name, false, false);
+  cdef_package pack = find_package (pack_name, false);
 
   if (pack.ok ())
     retval = new octave_classdef_meta (pack);
 
   return retval;
 }
 
 //----------------------------------------------------------------------------
