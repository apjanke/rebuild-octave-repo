# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1428166265 14400
#      Sat Apr 04 12:51:05 2015 -0400
# Node ID d209fbae38ae82b80bd07b69ddc193177b781af7
# Parent  cf9b94a89620cefbd2eb55ac242286252b69ef51
Fix tests for bartlett, blackman, hamming, and hanning

* bartlett.m, blackman.m, hamming.m, hanning.m: Replace useless fliplr
with flip to properly test symmetry of column vectors, add necessary
tolerances.  Clean up coding style.

diff --git a/scripts/signal/bartlett.m b/scripts/signal/bartlett.m
--- a/scripts/signal/bartlett.m
+++ b/scripts/signal/bartlett.m
@@ -47,18 +47,18 @@ function c = bartlett (m)
     c = [2*(0:n)/m, 2-2*(n+1:m)/m]';
   endif
 
 endfunction
 
 
 %!assert (bartlett (1), 1)
 %!assert (bartlett (2), zeros (2,1))
-%!assert (bartlett (16), fliplr (bartlett (16)))
-%!assert (bartlett (15), fliplr (bartlett (15)))
+%!assert (bartlett (15), flip (bartlett (15)), 5*eps)
+%!assert (bartlett (16), flip (bartlett (16)), 5*eps)
 %!test
 %! N = 9;
 %! A = bartlett (N);
 %! assert (A(ceil (N/2)), 1);
 
 %!error bartlett ()
 %!error bartlett (0.5)
 %!error bartlett (-1)
diff --git a/scripts/signal/blackman.m b/scripts/signal/blackman.m
--- a/scripts/signal/blackman.m
+++ b/scripts/signal/blackman.m
@@ -71,29 +71,29 @@ function c = blackman (m, opt)
     c = c(1:end-1);
   endif
 
 endfunction
 
 
 %!assert (blackman (1), 1)
 %!assert (blackman (2), zeros (2,1), 1e-6)
-%!assert (blackman (16), fliplr (blackman (16)))
-%!assert (blackman (15), fliplr (blackman (15)))
+%!assert (blackman (15), flip (blackman (15)), 5*eps)
+%!assert (blackman (16), flip (blackman (16)), 5*eps)
 %!test
 %! N = 9;
 %! A = blackman (N);
-%! assert (A (ceil (N/2)), 1, 1e-6);
-%! assert ([A(1), A(length (A))], zeros (1, 2), 1e-6);
+%! assert (A(ceil (N/2)), 1, 1e-6);
+%! assert ([A(1), A(length (A))], zeros (1,2), 1e-6);
 
 %!assert (blackman (15), blackman (15, "symmetric"));
 %!assert (blackman (16)(1:15), blackman (15, "periodic"));
 %!test
 %! N = 16;
 %! A = blackman (N, "periodic");
-%! assert (A (N/2 + 1), 1, 1e-6);
+%! assert (A(N/2 + 1), 1, 1e-6);
 
 %!error blackman ()
 %!error blackman (0.5)
 %!error blackman (-1)
 %!error blackman (ones (1,4))
 %!error blackman (1, "invalid");
 
diff --git a/scripts/signal/hamming.m b/scripts/signal/hamming.m
--- a/scripts/signal/hamming.m
+++ b/scripts/signal/hamming.m
@@ -70,28 +70,28 @@ function c = hamming (m, opt)
     c = c(1:end-1);
   endif
 
 endfunction
 
 
 %!assert (hamming (1), 1)
 %!assert (hamming (2), (0.54 - 0.46)*ones (2,1))
-%!assert (hamming (16), fliplr (hamming (16)))
-%!assert (hamming (15), fliplr (hamming (15)))
+%!assert (hamming (15), flip (hamming (15)), 5*eps)
+%!assert (hamming (16), flip (hamming (16)), 5*eps)
 %!test
 %! N = 15;
 %! A = hamming (N);
-%! assert (A (ceil (N/2)), 1);
+%! assert (A(ceil (N/2)), 1);
 
 %!assert (hamming (15), hamming (15, "symmetric"));
 %!assert (hamming (16)(1:15), hamming (15, "periodic"));
 %!test
 %! N = 16;
 %! A = hamming (N, "periodic");
-%! assert (A (N/2 + 1), 1);
+%! assert (A(N/2 + 1), 1);
 
 %!error hamming ()
 %!error hamming (0.5)
 %!error hamming (-1)
 %!error hamming (ones (1,4))
 %!error hamming (1, "invalid");
 
diff --git a/scripts/signal/hanning.m b/scripts/signal/hanning.m
--- a/scripts/signal/hanning.m
+++ b/scripts/signal/hanning.m
@@ -70,28 +70,28 @@ function c = hanning (m, opt)
     c = c(1:end-1);
   endif
 
 endfunction
 
 
 %!assert (hanning (1), 1);
 %!assert (hanning (2), zeros (2,1));
-%!assert (hanning (16), fliplr (hanning (16)));
-%!assert (hanning (15), fliplr (hanning (15)));
+%!assert (hanning (15), flip (hanning (15)), 5*eps);
+%!assert (hanning (16), flip (hanning (16)), 5*eps);
 %!test
 %! N = 15;
 %! A = hanning (N);
 %! assert (A(ceil (N/2)), 1);
 
 %!assert (hanning (15), hanning (15, "symmetric"));
 %!assert (hanning (16)(1:15), hanning (15, "periodic"));
 %!test
 %! N = 16;
 %! A = hanning (N, "periodic");
-%! assert (A (N/2 + 1), 1);
+%! assert (A(N/2 + 1), 1);
 
 %!error hanning ()
 %!error hanning (0.5)
 %!error hanning (-1)
 %!error hanning (ones (1,4))
 %!error hanning (1, "invalid");
 
