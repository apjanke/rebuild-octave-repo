# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1293565577 -3600
#      Tue Dec 28 20:46:17 2010 +0100
# Node ID a4822f3d103243882073e685f9d2733684293b52
# Parent  a140991387fb4aeb62b079297f7ac4cb0d783ce8
Fix for saving of single precision arrays to the matlab file format

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-12-28  David Bateman  <dbateman@free.fr>
+
+	* ls-mat5.cc (save_mat5_array_length (const float*, octave_idx_type,
+        bool)): Take in to account the 4 bytes of padding for an odd number
+	of elements in single precision arrays.
+
 2010-12-27  Rik  <octave@nomad.inbox5.com>
 
 	* syscalls.cc (stat): Add additional calling form using file descriptor
 	fid to docstring.
 
 2010-12-26  Michael Godfrey <godfrey@isl.stanford.edu>
 
 	* gammainc.cc: Add @tex blocks to docstring.
diff --git a/src/ls-mat5.cc b/src/ls-mat5.cc
--- a/src/ls-mat5.cc
+++ b/src/ls-mat5.cc
@@ -1309,17 +1309,17 @@ read_mat5_binary_element (std::istream& 
                 error ("load: reading imaginary matrix data for `%s'",
                        retval.c_str ());
                 goto data_read_error;
               }
 
             FloatComplexNDArray ctmp (dims);
 
             for (octave_idx_type i = 0; i < n; i++)
-              ctmp(i) = Complex (re(i), im(i));
+              ctmp(i) = FloatComplex (re(i), im(i));
 
             tc = ctmp;
           }
         else
           tc = re;
       }
       break;
 
@@ -1949,17 +1949,17 @@ save_mat5_array_length (const double* va
 
       return 8 + nel * size;
     }
   else
     return 8;
 }
 
 int
-save_mat5_array_length (const float* val, octave_idx_type nel, bool)
+save_mat5_array_length (const float* /* val */, octave_idx_type nel, bool)
 {
   if (nel > 0)
     {
       int size = 4;
 
 
       // The code below is disabled since get_save_type currently doesn't
       // deal with integer types. This will need to be activated if get_save_type
@@ -1997,17 +1997,18 @@ save_mat5_array_length (const float* val
       //     else if (max_val < 128 && min_val >= -128)
       //       size = 1;
       //     else if (max_val < 32768 && min_val >= -32768)
       //       size = 2;
       //     else if (max_val <= 2147483647L && min_val >= -2147483647L)
       //       size = 4;
       //   }
 
-      return 8 + nel * size;
+      // Round nel up to nearest even number of elements
+      return 8 + ((nel + 1) & ~0x1LL) * size;
     }
   else
     return 8;
 }
 
 int
 save_mat5_array_length (const Complex* val, octave_idx_type nel,
                         bool save_as_floats)
