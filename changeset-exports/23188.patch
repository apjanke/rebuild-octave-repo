# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1487160639 -3600
#      Wed Feb 15 13:10:39 2017 +0100
# Node ID e2e182a8e6996bfaf63aa8a3bca617a23c5d651b
# Parent  9da0d6a8691425dd9f85deb11714c3408464eb3e
Allow custom output generators for code publishing.

* scripts/general/publish.m: Seek for custon output generator named
__publish_<custom format>_output__.m, if options.format is not a builtin one.
Delegate knowledge about output file extension to output generators.  Update
docstring and describe new feature.

* scripts/general/private/__publish_html_output__.m,
scripts/general/private/__publish_latex_output__.m: New callback subfunction
do_output_file_extension to return output file extension.  Update docstring and
describe new feature.

diff --git a/scripts/general/private/__publish_html_output__.m b/scripts/general/private/__publish_html_output__.m
--- a/scripts/general/private/__publish_html_output__.m
+++ b/scripts/general/private/__publish_html_output__.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2016 Kai T. Ohlhus
+## Copyright (C) 2016-2017 Kai T. Ohlhus
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or
 ## (at your option) any later version.
 ##
@@ -24,16 +24,18 @@
 ## The first input argument @var{type} defines the required strings
 ## (@samp{str}) or cell-strings (@samp{cstr}) in @var{varargin} in order
 ## to produce HTML output.
 ##
 ## @var{type} is one of
 ##
 ## @itemize @bullet
 ## @item
+## @samp{output_file_extension} ()
+## @item
 ## @samp{header} (title_str, intro_str, toc_cstr)
 ## @item
 ## @samp{footer} ()
 ## @item
 ## @samp{code} (str)
 ## @item
 ## @samp{code_output} (str)
 ## @item
@@ -68,16 +70,19 @@
 ## @samp{R} ()
 ## @end itemize
 ## @end deftypefn
 
 function outstr = __publish_html_output__ (type, varargin)
   outstr = feval (["do_" type], varargin{:});
 endfunction
 
+function outstr = do_output_file_extension ()
+  outstr = ".html";
+endfunction
 
 function outstr = do_header (title_str, intro_str, toc_cstr)
   mathjax_str = sprintf ("%s\n",
 "<script type=\"text/x-mathjax-config\">",
 "MathJax.Hub.Config({",
 "  tex2jax: { inlineMath: [['$','$'], ['\\\\(','\\\\)']] },",
 "  TeX: { equationNumbers: { autoNumber: 'all' } }",
 "});",
diff --git a/scripts/general/private/__publish_latex_output__.m b/scripts/general/private/__publish_latex_output__.m
--- a/scripts/general/private/__publish_latex_output__.m
+++ b/scripts/general/private/__publish_latex_output__.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2016 Kai T. Ohlhus
+## Copyright (C) 2016-2017 Kai T. Ohlhus
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or
 ## (at your option) any later version.
 ##
@@ -24,16 +24,18 @@
 ## The first input argument @var{type} defines the required strings
 ## (@samp{str}) or cell-strings (@samp{cstr}) in @var{varargin} in order
 ## to produce LaTeX output.
 ##
 ## @var{type} is one of
 ##
 ## @itemize @bullet
 ## @item
+## @samp{output_file_extension} ()
+## @item
 ## @samp{header} (title_str, intro_str, toc_cstr)
 ## @item
 ## @samp{footer} ()
 ## @item
 ## @samp{code} (str)
 ## @item
 ## @samp{code_output} (str)
 ## @item
@@ -68,16 +70,20 @@
 ## @samp{R} ()
 ## @end itemize
 ## @end deftypefn
 
 function outstr = __publish_latex_output__ (type, varargin)
   outstr = feval (["do_" type], varargin{:});
 endfunction
 
+function outstr = do_output_file_extension ()
+  outstr = ".tex";
+endfunction
+
 function outstr = do_header (title_str, intro_str, toc_cstr)
   publish_comment = sprintf ("%s\n",
 "",
 "",
 "% This document was generated by the publish-function",
 ["% from GNU Octave " version()],
 "");
 
diff --git a/scripts/general/publish.m b/scripts/general/publish.m
--- a/scripts/general/publish.m
+++ b/scripts/general/publish.m
@@ -1,9 +1,9 @@
-## Copyright (C) 2016 Kai T. Ohlhus <k.ohlhus@gmail.com>
+## Copyright (C) 2016-2017 Kai T. Ohlhus <k.ohlhus@gmail.com>
 ## Copyright (C) 2010 Fotios Kasolis <fotios.kasolis@gmail.com>
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or
 ## (at your option) any later version.
@@ -91,16 +91,28 @@
 ##
 ## @samp{html} (default), @samp{doc}, @samp{latex}, @samp{ppt},
 ## @samp{pdf}, or @samp{xml}.
 ##
 ## The output formats @samp{doc}, @samp{ppt}, and @samp{xml} are not currently
 ## supported.  To generate a @samp{doc} report, open a generated @samp{html}
 ## report with your office suite.
 ##
+## In Octave custom formats are supported by implementing all callback
+## subfunctions in a function file named
+## @samp{__publish_<custom format>_output__.m}.  To obtain a template for the
+## HTML format type:
+##
+## @example
+## @group
+## edit (fullfile (fileparts (which ("publish")), ...
+##       "private", "__publish_html_output__.m"))
+## @end group
+## @end example
+##
 ## @item
 ## @samp{outputDir} --- Full path of the directory where the generated report
 ## will be located.  If no directory is given, the report is generated in a
 ## subdirectory @file{html} relative to the current working directory.
 ##
 ## @item
 ## @samp{stylesheet} --- Not supported, only for @sc{matlab} compatibility.
 ##
@@ -228,23 +240,35 @@ function output_file = publish (file, va
   endif
 
   ## Validate options struct
 
   ## Options for the output
   if (! isfield (options, "format"))
     options.format = "html";
   else
-    options.format = validatestring (options.format, {"html", "doc", "latex",
-                                                      "ppt", "xml", "pdf"});
     ## FIXME: Implement remaining formats
-    if (any (strcmp (options.format, {"doc", "ppt", "xml"})))
+    if (any (strcmpi (options.format, {"doc", "ppt", "xml"})))
       error ('publish: Output format "%s" is not yet supported',
              options.format);
     endif
+    ## Supported or custom output format
+    supported_formats = {"html", "doc", "latex", "ppt", "xml", "pdf"};
+    if (! any (strcmpi (options.format, supported_formats)))
+      ## Check existance of custom formatter
+      custom_formatter = ["__publish_", options.format, "_output__"];
+      if (! exist (custom_formatter, "file"))
+        error (['publish: Custom output format "%s" requires the ', ...
+                'formatter function:\n\n\t%s\n\n', ...
+                '\tSee "help publish" for more information.'],
+                options.format, custom_formatter);
+      endif
+    else
+      options.format = validatestring (options.format, supported_formats);
+    endif
   endif
 
   if (! isfield (options, "outputDir"))
     ## Matlab R2016a doc says default is "", but specifies to create a
     ## subdirectory named "html" in the current working directory.
     options.outputDir = fullfile (file_path, "html");
   elseif (! ischar (options.outputDir))
     error ("publish: OUTPUTDIR must be a string");
@@ -697,41 +721,41 @@ function m_source = read_file_to_cellstr
   m_source = m_source(1:end-1);  # No EOL
 endfunction
 
 
 function ofile = create_output (doc, options)
   ## CREATE_OUTPUT creates the desired output file
 
   formatter = [];
-  ofile_ext = "";
   switch (options.format)
     case "html"
       formatter = @__publish_html_output__;
-      ofile_ext = ".html";
     case {"latex", "pdf"}
       formatter = @__publish_latex_output__;
-      ofile_ext = ".tex";
+    otherwise
+      ## Custom formatter
+      formatter = eval (["@__publish_", options.format, "_output__"]);
   endswitch
 
   ## Use title, or if not given, the m-file name
   title_str = doc.title;
   if (isempty (title_str))
     [~, title_str] = fileparts (doc.m_source_file_name);
   endif
 
   content = formatter ("header", title_str,
                        format_output (doc.intro, formatter, options),
                        get_toc (doc.body, formatter));
   content = [content, format_output(doc.body, formatter, options)];
   content = [content, formatter("footer", strjoin (doc.m_source, "\n"))];
 
   ## Write file
   [~, ofile] = fileparts (doc.m_source_file_name);
-  ofile_name = [ofile, ofile_ext];
+  ofile_name = [ofile, formatter("output_file_extension")];
   ofile = fullfile (options.outputDir, ofile_name);
   fid = fopen (ofile, "w");
   fputs (fid, content);
   fclose (fid);
 
   ## Compile LaTeX, if compiler found
   if (strcmp (options.format, "pdf"))
     status = system ("pdflatex --version");
