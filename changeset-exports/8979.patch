# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1236981277 -3600
#      Fri Mar 13 22:54:37 2009 +0100
# Node ID a7c00773a0898ea612e338fe2001ffd389903e5d
# Parent  0a58c4cd1405860ee2b7615e92e8caa6242a6fff
optimize also .^-1 case

diff --git a/src/xpow.cc b/src/xpow.cc
--- a/src/xpow.cc
+++ b/src/xpow.cc
@@ -1118,16 +1118,21 @@ elem_xpow (const NDArray& a, double b)
       NDArray result (a.dims ());
 
       int ib = static_cast<int> (b);
       if (ib == 2)
         {
           for (octave_idx_type i = 0; i < a.length (); i++)
             result.xelem (i) = a(i) * a(i);
         }
+      else if (ib == -1)
+        {
+          for (octave_idx_type i = 0; i < a.length (); i++)
+            result.xelem (i) = 1.0 / a(i);
+        }
       else
         {
           for (octave_idx_type i = 0; i < a.length (); i++)
             {
               OCTAVE_QUIT;
               result(i) = std::pow (a(i), ib);
             }
         }
@@ -1277,21 +1282,29 @@ elem_xpow (const Complex& a, const Compl
 // -*- 9 -*-
 octave_value
 elem_xpow (const ComplexNDArray& a, double b)
 {
   ComplexNDArray result (a.dims ());
 
   if (xisint (b))
     {
-      for (octave_idx_type i = 0; i < a.length (); i++)
-	{
-	  OCTAVE_QUIT;
-	  result(i) = std::pow (a(i), static_cast<int> (b));
-	}
+      if (b == -1)
+        {
+          for (octave_idx_type i = 0; i < a.length (); i++)
+            result.xelem (i) = std::conj (a(i)) / std::norm (a(i));
+        }
+      else
+        {
+          for (octave_idx_type i = 0; i < a.length (); i++)
+            {
+              OCTAVE_QUIT;
+              result(i) = std::pow (a(i), static_cast<int> (b));
+            }
+        }
     }
   else
     {
       for (octave_idx_type i = 0; i < a.length (); i++)
 	{
 	  OCTAVE_QUIT;
 	  result(i) = std::pow (a(i), b);
 	}
@@ -2420,16 +2433,21 @@ elem_xpow (const FloatNDArray& a, float 
       FloatNDArray result (a.dims ());
 
       int ib = static_cast<int> (b);
       if (ib == 2)
         {
           for (octave_idx_type i = 0; i < a.length (); i++)
             result.xelem (i) = a(i) * a(i);
         }
+      else if (ib == -1)
+        {
+          for (octave_idx_type i = 0; i < a.length (); i++)
+            result.xelem (i) = 1.0f / a(i);
+        }
       else
         {
           for (octave_idx_type i = 0; i < a.length (); i++)
             {
               OCTAVE_QUIT;
               result(i) = std::pow (a(i), ib);
             }
         }
@@ -2579,21 +2597,29 @@ elem_xpow (const FloatComplex& a, const 
 // -*- 9 -*-
 octave_value
 elem_xpow (const FloatComplexNDArray& a, float b)
 {
   FloatComplexNDArray result (a.dims ());
 
   if (xisint (b))
     {
-      for (octave_idx_type i = 0; i < a.length (); i++)
-	{
-	  OCTAVE_QUIT;
-	  result(i) = std::pow (a(i), static_cast<int> (b));
-	}
+      if (b == -1)
+        {
+          for (octave_idx_type i = 0; i < a.length (); i++)
+            result.xelem (i) = std::conj (a(i)) / std::norm (a(i));
+        }
+      else
+        {
+          for (octave_idx_type i = 0; i < a.length (); i++)
+            {
+              OCTAVE_QUIT;
+              result(i) = std::pow (a(i), static_cast<int> (b));
+            }
+        }
     }
   else
     {
       for (octave_idx_type i = 0; i < a.length (); i++)
 	{
 	  OCTAVE_QUIT;
 	  result(i) = std::pow (a(i), b);
 	}
