# HG changeset patch
# User Julien Bect <jbect@users.sourceforge.net>
# Date 1546596148 -3600
#      Fri Jan 04 11:02:28 2019 +0100
# Branch stable
# Node ID e590d8ad9ed01e021940e0f9f4dc5f63188851b8
# Parent  3e6d559c875618bfed73fb1f884563f7e1fbff77
jit: Remove jit::PassManager and jit::FunctionPassManager from public API

* libinterp/parse-tree/jit-util.h: Remove jit::PassManager and
  jit::FunctionPassManager from public API.
* libinterp/parse-tree/pt-jit.h: Idem.
* libinterp/parse-tree/pt-jit.cc: Define them here.

diff --git a/libinterp/parse-tree/jit-util.h b/libinterp/parse-tree/jit-util.h
--- a/libinterp/parse-tree/jit-util.h
+++ b/libinterp/parse-tree/jit-util.h
@@ -39,26 +39,16 @@
 
 // we don't want to include llvm headers here, as they require
 // __STDC_LIMIT_MACROS and __STDC_CONSTANT_MACROS be defined in the entire
 // compilation unit
 namespace llvm
 {
   class Value;
   class Module;
-#if defined (LEGACY_PASSMANAGER)
-  namespace legacy
-  {
-    class FunctionPassManager;
-    class PassManager;
-  }
-#else
-  class FunctionPassManager;
-  class PassManager;
-#endif
   class ExecutionEngine;
   class Function;
   class BasicBlock;
   class LLVMContext;
   class Type;
   class StructType;
   class FunctionType;
   class Twine;
diff --git a/libinterp/parse-tree/pt-jit.cc b/libinterp/parse-tree/pt-jit.cc
--- a/libinterp/parse-tree/pt-jit.cc
+++ b/libinterp/parse-tree/pt-jit.cc
@@ -131,16 +131,27 @@ static bool Vdebug_jit = false;
 static bool Vjit_enable = false;
 
 static int Vjit_startcnt = 1000;
 
 static int Vjit_failcnt = 0;
 
 namespace octave
 {
+  namespace jit
+  {    
+#if defined (LEGACY_PASSMANAGER)
+    typedef llvm::legacy::PassManager PassManager;
+    typedef llvm::legacy::FunctionPassManager FunctionPassManager;
+#else
+    typedef llvm::PassManager PassManager;
+    typedef llvm::FunctionPassManager FunctionPassManager;
+#endif
+  }
+
   static llvm::IRBuilder<> builder (tree_jit::llvm_context);
 
   static llvm::LLVMContext& context = tree_jit::llvm_context;
 
   // -------------------- jit_break_exception --------------------
 
   // jit_break is thrown whenever a branch we are converting has only breaks or
   // continues.  This is because all code that follows a break or continue
diff --git a/libinterp/parse-tree/pt-jit.h b/libinterp/parse-tree/pt-jit.h
--- a/libinterp/parse-tree/pt-jit.h
+++ b/libinterp/parse-tree/pt-jit.h
@@ -24,36 +24,29 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_pt_jit_h)
 #define octave_pt_jit_h 1
 
 #include "octave-config.h"
 
 #if defined (HAVE_LLVM)
 
+#include "jit-util.h"
 #include "jit-typeinfo.h"
 #include "jit-ir.h"
 #include "pt-walk.h"
 #include "symscope.h"
 
 // octave_value_list is not (yet) in the octave namespace
 class octave_value_list;
 
 namespace octave
 {
   namespace jit
   {
-#if defined (LEGACY_PASSMANAGER)
-    typedef llvm::legacy::PassManager PassManager;
-    typedef llvm::legacy::FunctionPassManager FunctionPassManager;
-#else
-    typedef llvm::PassManager PassManager;
-    typedef llvm::FunctionPassManager FunctionPassManager;
-#endif
-
     typedef std::unique_ptr<llvm::Module> ModuleOwner;
     typedef std::unique_ptr<llvm::ExecutionEngine> EngineOwner;
   }
 
   // Convert from the parse tree (AST) to the low level Octave IR.
   class
   jit_convert : public tree_walker
   {
