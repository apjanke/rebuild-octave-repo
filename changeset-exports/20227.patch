# HG changeset patch
# User Rik <rik@octave.org>
# Date 1432597727 25200
#      Mon May 25 16:48:47 2015 -0700
# Node ID 9f484edd8767da34dc26fbab1e9970205734ad1c
# Parent  dbb46a7e61a48fae29b0b22c8291d54d9b7bf25d
surfnorm.m: Return unnormalized vectors for Matlab compatibility.

* NEWS: Announce change.

surfnorm.m: Return unnormalized vectors if output arguments requested.
If plotting immediately, new algorithm for determining normals takes into account
the data aspect ratio of the plot.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -14,16 +14,19 @@ Summary of important user-visible change
 
  ** mkfifo now interprets the MODE argument as an octal, not decimal, integer.
     This is consistent with the equivalent shell command. 
 
  ** The griddata function no longer plots the interpolated mesh if no output
     argument is requested, instead the vector or array of interpolated values
     is always returned for Matlab compatibility.
 
+ ** The surfnorm function now returns unnormalized (magnitude != 1) normal
+    vectors for compatibility with Matlab.
+
  ** Other new functions added in 4.2:
 
       psi
 
 
 Summary of important user-visible changes for version 4.0:
 ---------------------------------------------------------
 
diff --git a/scripts/plot/draw/surfnorm.m b/scripts/plot/draw/surfnorm.m
--- a/scripts/plot/draw/surfnorm.m
+++ b/scripts/plot/draw/surfnorm.m
@@ -36,29 +36,39 @@
 ##
 ## Any property/value input pairs are assigned to the surface object.
 ##
 ## If the first argument @var{hax} is an axes handle, then plot into this axis,
 ## rather than the current axes returned by @code{gca}.
 ##
 ## If output arguments are requested then the components of the normal
 ## vectors are returned in @var{nx}, @var{ny}, and @var{nz} and no plot is
-## made.
+## made.  The normal vectors are unnormalized (magnitude != 1).  To normalize,
+## use
+##
+## @example
+## mag = sqrt (nx.^2 + ny.^2 + nz.^2);
+## nx ./= len;  ny ./= len;  nz ./= len;
+## @end example
 ##
 ## An example of the use of @code{surfnorm} is
 ##
 ## @example
 ## surfnorm (peaks (25));
 ## @end example
 ##
 ## Algorithm: The normal vectors are calculated by taking the cross product
-## of the diagonals of each of the quadrilaterals in the meshgrid to find the
-## normal vectors of the centers of these quadrilaterals.  The four nearest
-## normal vectors to the meshgrid points are then averaged to obtain the
-## normal to the surface at the meshgridded points.
+## of the diagonals of each of the quadrilateral faces in the meshgrid to find
+## the normal vectors at the center of each face.  Next, for each meshgrid
+## point the four nearest normal vectors are averaged to obtain the final
+## normal to the surface at the meshgrid point.
+##
+## For surface objects, the @qcode{"VertexNormals"} property contains
+## equivalent information, except possibly near the boundary of the surface
+## where different interpolation schemes may yield slightly different values.
 ##
 ## @seealso{isonormals, quiver3, surf, meshgrid}
 ## @end deftypefn
 
 function [Nx, Ny, Nz] = surfnorm (varargin)
 
   [hax, varargin, nargin] = __plt_get_axis_arg__ ("surfnorm", varargin{:});
 
@@ -79,16 +89,17 @@ function [Nx, Ny, Nz] = surfnorm (vararg
 
   if (iscomplex (z) || iscomplex (x) || iscomplex (y))
     error ("surfnorm: X, Y, and Z must be 2-D real matrices");
   endif
   if (! size_equal (x, y, z))
     error ("surfnorm: X, Y, and Z must have the same dimensions");
   endif
 
+  ## FIXME: Matlab uses a bicubic interpolation, not linear, along the boundary.
   ## Do a linear extrapolation for mesh points on the boundary so that the mesh
   ## is increased by 1 on each side.  This allows each original meshgrid point
   ## to be surrounded by four quadrilaterals and the same calculation can be
   ## used for interior and boundary points.  The extrapolation works badly for
   ## closed surfaces like spheres.
   xx = [2 * x(:,1) - x(:,2), x, 2 * x(:,end) - x(:,end-1)];
   xx = [2 * xx(1,:) - xx(2,:); xx; 2 * xx(end,:) - xx(end-1,:)];
   yy = [2 * y(:,1) - y(:,2), y, 2 * y(:,end) - y(:,end-1)];
@@ -111,52 +122,43 @@ function [Nx, Ny, Nz] = surfnorm (vararg
   ## Create normal vectors as mesh vectices from normals at mesh centers
   nx = (w.x(1:end-1,1:end-1) + w.x(1:end-1,2:end) +
         w.x(2:end,1:end-1) + w.x(2:end,2:end)) / 4;
   ny = (w.y(1:end-1,1:end-1) + w.y(1:end-1,2:end) +
         w.y(2:end,1:end-1) + w.y(2:end,2:end)) / 4;
   nz = (w.z(1:end-1,1:end-1) + w.z(1:end-1,2:end) +
         w.z(2:end,1:end-1) + w.z(2:end,2:end)) / 4;
 
-  ## FIXME: According to Matlab documentation the vertex normals
-  ##        returned are not normalized.
-  ## Normalize the normal vectors
-  len = sqrt (nx.^2 + ny.^2 + nz.^2);
-  nx ./= len;
-  ny ./= len;
-  nz ./= len;
-
   if (nargout == 0)
     oldfig = [];
     if (! isempty (hax))
       oldfig = get (0, "currentfigure");
     endif
     unwind_protect
       hax = newplot (hax);
 
       surf (x, y, z, varargin{ioff:end});
       old_hold_state = get (hax, "nextplot");
       unwind_protect
         set (hax, "nextplot", "add");
 
-        ## FIXME: Scale unit normals by data aspect ratio in order for
-        ##        normals to appear correct.
-        ##daratio = daspect (hax);
-        ##daspect ("manual");
-        ##len = norm (daratio);
-        ## This assumes an even meshgrid which isn't a great assumption
-        ##dx = x(1,2) - x(1,1);
-        ##dy = y(2,1) - y(1,1);
-        ##nx *= daratio(1);
-        ##ny *= daratio(2);
-        ##nz *= daratio(3);
-        ##len = sqrt (nx.^2 + ny.^2 + nz.^2);
-        ##nx ./= len;
-        ##ny ./= len;
-        ##nz ./= len;
+        ## Normalize the normal vectors
+        nmag = sqrt (nx.^2 + ny.^2 + nz.^2);
+
+        ## And correct for the aspect ratio of the display
+        daratio = daspect (hax);
+        damag = sqrt (sumsq (daratio)); 
+
+        ## FIXME: May also want to normalize the vectors relative to the size
+        ##        of the diagonal.
+
+        nx ./= nmag / (daratio(1)^2 / damag);
+        ny ./= nmag / (daratio(2)^2 / damag);
+        nz ./= nmag / (daratio(3)^2 / damag);
+
         plot3 ([x(:).'; x(:).' + nx(:).' ; NaN(size(x(:).'))](:),
                [y(:).'; y(:).' + ny(:).' ; NaN(size(y(:).'))](:),
                [z(:).'; z(:).' + nz(:).' ; NaN(size(z(:).'))](:),
                "r");
       unwind_protect_cleanup
         set (hax, "nextplot", old_hold_state);
       end_unwind_protect
 
@@ -172,20 +174,20 @@ function [Nx, Ny, Nz] = surfnorm (vararg
   endif
 
 endfunction
 
 
 %!demo
 %! clf;
 %! colormap ('default');
-%! surfnorm (peaks (32));
-%! shading interp;
+%! surfnorm (peaks (19));
+%! shading faceted;
 %! title ({'surfnorm() shows surface and normals at each vertex', ...
-%!         'peaks() function with 32 faces'});
+%!         'peaks() function with 19 faces'});
 
 %!demo
 %! clf;
 %! colormap ('default');
 %! [x, y, z] = sombrero (10);
 %! surfnorm (x, y, z);
 
 ## Test input validation
