# HG changeset patch
# User Rik <rik@octave.org>
# Date 1509423735 25200
#      Mon Oct 30 21:22:15 2017 -0700
# Node ID 1253132e2173be563f09d4751f03c69315daaa6c
# Parent  ff9bd559799b396d856d76af68a543459f68fa95
Use "clf;" at beginning of all plot demos.

* camlookat.m, camorbit.m, campos.m, camroll.m, camtarget.m, camup.m,
camva.m, camzoom.m, grid.m, camlight.m, ezplot.m, isocaps.m, isocolors.m,
isonormals.m, isosurface.m, light.m, plot.m, reducepatch.m, smooth3.m,
subplot.m: Use "clf;" at beginning of all plot demos.

diff --git a/scripts/plot/appearance/camlookat.m b/scripts/plot/appearance/camlookat.m
--- a/scripts/plot/appearance/camlookat.m
+++ b/scripts/plot/appearance/camlookat.m
@@ -145,16 +145,17 @@ function camlookat (hh)
   camva (hax, "manual");  # avoid auto-adjusting
   camtarget (hax, mid .* dar);
   campos (hax, cp .* dar);
 
 endfunction
 
 
 %!demo
+%! clf;
 %! [x, y, z] = peaks ();
 %! surf (x, y, z/5);
 %! hold on
 %! [x, y, z] = sphere ();
 %! s1 = surf (x/2, y/2+1.5, z/2+2);
 %! s2 = surf (x/5+0.2, y/5-2, z/5+1);
 %! axis equal
 %! axis tight
diff --git a/scripts/plot/appearance/camorbit.m b/scripts/plot/appearance/camorbit.m
--- a/scripts/plot/appearance/camorbit.m
+++ b/scripts/plot/appearance/camorbit.m
@@ -176,16 +176,17 @@ function camorbit (varargin)
 
   camup (hax, up)
   campos (hax, pos)
 
 endfunction
 
 
 %!demo
+%! clf;
 %! peaks ();
 %! ## rotate the camera upwards
 %! camorbit (0, 30);
 %! ## rotate the camera right
 %! camorbit (20, 0);
 
 
 %!test
diff --git a/scripts/plot/appearance/campos.m b/scripts/plot/appearance/campos.m
--- a/scripts/plot/appearance/campos.m
+++ b/scripts/plot/appearance/campos.m
@@ -101,16 +101,17 @@ function p = campos (varargin)
   else
     print_usage ();
   endif
 
 endfunction
 
 
 %!demo
+%! clf;
 %! sphere ();
 %! ## where is camera located?
 %! x1 = campos ()
 %! ## move the camera upwards
 %! campos (x1 + [0 0 2])
 %! x2 = campos ()
 
 %!test
diff --git a/scripts/plot/appearance/camroll.m b/scripts/plot/appearance/camroll.m
--- a/scripts/plot/appearance/camroll.m
+++ b/scripts/plot/appearance/camroll.m
@@ -87,17 +87,18 @@ function camroll (varargin)
   [up{:}] = __rotate_around_axis__ (up{:}, a, view_ax, [0 0 0]);
   up = [up{:}];
   camup (hax, up)
 
 endfunction
 
 
 %!demo
-%! peaks ()
+%! clf;
+%! peaks ();
 %! camroll (30)
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   sphere (10);
 %!   campos ([10 0 0]);
 %!   camroll (30);
diff --git a/scripts/plot/appearance/camtarget.m b/scripts/plot/appearance/camtarget.m
--- a/scripts/plot/appearance/camtarget.m
+++ b/scripts/plot/appearance/camtarget.m
@@ -111,16 +111,17 @@ function p = camtarget (varargin)
   else
     print_usage ();
   endif
 
 endfunction
 
 
 %!demo
+%! clf;
 %! sphere ();
 %! ## where is camera pointing?
 %! x1 = camtarget ()
 %! ## point the camera upwards
 %! camtarget (x1 + [0 0 1])
 %! x2 = camtarget ()
 
 %!test
diff --git a/scripts/plot/appearance/camup.m b/scripts/plot/appearance/camup.m
--- a/scripts/plot/appearance/camup.m
+++ b/scripts/plot/appearance/camup.m
@@ -106,17 +106,18 @@ function p = camup (varargin)
   else
     print_usage ();
   endif
 
 endfunction
 
 
 %!demo
-%! sphere ()
+%! clf;
+%! sphere ();
 %! ## what direction is "up" for the camera?
 %! x1 = camup ()
 %! ## re-orient the camera with a new up-vector
 %! camup ([1 0 0])
 %! x2 = camup ()
 
 %!test
 %! hf = figure ("visible", "off");
diff --git a/scripts/plot/appearance/camva.m b/scripts/plot/appearance/camva.m
--- a/scripts/plot/appearance/camva.m
+++ b/scripts/plot/appearance/camva.m
@@ -93,16 +93,17 @@ function p = camva (varargin)
   else
     print_usage ();
   endif
 
 endfunction
 
 
 %!demo
+%! clf;
 %! peaks ();
 %! ## query the viewing angle
 %! a1 = camva ()
 %! ## get a close-up view by decreasing the viewing angle:
 %! camva (0.5*a1)
 %! a2 = camva ()
 
 %!test
diff --git a/scripts/plot/appearance/camzoom.m b/scripts/plot/appearance/camzoom.m
--- a/scripts/plot/appearance/camzoom.m
+++ b/scripts/plot/appearance/camzoom.m
@@ -76,16 +76,17 @@ function camzoom (varargin)
 
   va = 2 * atand (tand (camva (hax)/2) / zf);
   camva (hax, va);
 
 endfunction
 
 
 %!demo
+%! clf;
 %! peaks ();
 %! camzoom (2);
 
 %!test
 %! hf = figure ("visible", "off");
 %! unwind_protect
 %!   sphere ();
 %!   x = camva ();
diff --git a/scripts/plot/appearance/grid.m b/scripts/plot/appearance/grid.m
--- a/scripts/plot/appearance/grid.m
+++ b/scripts/plot/appearance/grid.m
@@ -145,16 +145,17 @@ endfunction
 %!  grid minor;
 %!  title ("grid minor");
 %! subplot (3, 2, 6);
 %!  plot (1:100);
 %!  set (gca, "yminorgrid", "on");
 %!  title ("yminorgrid on");
 
 %!demo
+%! clf;
 %! subplot (2,2,1);
 %!  semilogy (1:100);
 %!  grid off;
 %!  title ("grid off");
 %! subplot (2,2,2);
 %!  semilogy (1:100);
 %!  grid on;
 %!  title ("grid on");
diff --git a/scripts/plot/draw/camlight.m b/scripts/plot/draw/camlight.m
--- a/scripts/plot/draw/camlight.m
+++ b/scripts/plot/draw/camlight.m
@@ -194,41 +194,44 @@ function h = camlight (varargin)
   if (nargout > 0)
     h = hl;
   endif
 
 endfunction
 
 
 %!demo
+%! clf;
 %! ## Adding lights to a scene
 %! sphere (64);
 %! camlight
 %!
 %! ## Add a second light
 %! camlight left
 %!
 %! title ({"camlight()", "lights are left and right"});
 
 %!demo
+%! clf;
 %! sphere (48);
 %! title ({"camlight()", "light in fixed position ignores camera change"});
 %! axis equal;
 %! shading flat;
 %! view (30, 30);
 %!
 %! camlight
 %!
 %! for a = 30:2:390
 %!   view (a, 30);
 %!   drawnow ();
 %!   pause (0.01);
 %! endfor
 
 %!demo
+%! clf;
 %! sphere (48);
 %! title ({"camlight()", "update light position with camera change"});
 %! axis equal;  shading flat
 %! view (30, 30);
 %!
 %! hl = camlight ();          # keep a handle to the light
 %!
 %! for a = 30:2:390
diff --git a/scripts/plot/draw/ezplot.m b/scripts/plot/draw/ezplot.m
--- a/scripts/plot/draw/ezplot.m
+++ b/scripts/plot/draw/ezplot.m
@@ -83,16 +83,17 @@ function h = ezplot (varargin)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
 %! ## sinc function using function handle
+%! clf;
 %! f = @(x) sin (pi*x) ./ (pi*x);
 %! ezplot (f);
 
 %!demo
 %! ## example of a function string and explicit limits
 %! clf;
 %! ezplot ("1/x", [-2 2]);
 
diff --git a/scripts/plot/draw/isocaps.m b/scripts/plot/draw/isocaps.m
--- a/scripts/plot/draw/isocaps.m
+++ b/scripts/plot/draw/isocaps.m
@@ -361,16 +361,17 @@ function [faces, vertices] = __get_isoca
   if (! isempty (vertices))
     vertices(:,coor) = coor_val;
   endif
 
 endfunction
 
 
 %!demo
+%! clf;
 %! isoval = .4;
 %! lin = linspace (0, 1.2, 15);
 %! [x, y, z] = meshgrid (lin, lin, lin);
 %! v = abs ((x-.45).^2 + (y-.55).^2 + (z-.8).^2);
 %! hf = clf;
 %! ha = axes;
 %! view (3);  box off;
 %! fvc_iso = isosurface (x, y, z, v, isoval);
@@ -390,16 +391,17 @@ endfunction
 %! patch (fvc_zmax, "FaceColor", "interp", "EdgeColor", "none", ...
 %!        "FaceLighting", "gouraud", ...
 %!        "VertexNormals", repmat([0 -1 0], size (fvc_zmax.vertices, 1), 1));
 %! axis equal;
 %! light ();
 %! title ({"isocaps()", "sphere with 6 end-caps"});
 
 %!demo
+%! clf;
 %! v = smooth3 (rand (6, 8, 4));
 %! isoval = .5;
 %! x = 1:3:22;  y = -14:5:11;  z = linspace (16, 18, 4);
 %! [xx, yy, zz] = meshgrid (x, y, z);
 %! clf;
 %! ## two arguments, no output
 %! subplot (2, 2, 1);
 %!  isocaps (v, isoval);
diff --git a/scripts/plot/draw/isocolors.m b/scripts/plot/draw/isocolors.m
--- a/scripts/plot/draw/isocolors.m
+++ b/scripts/plot/draw/isocolors.m
@@ -130,17 +130,17 @@ endfunction
 %!   light ("Position", [1 1 5]);
 %! endfunction
 %!
 %! N = 15;    # Increase number of vertices in each direction
 %! iso = .4;  # Change isovalue to .1 to display a sphere
 %! lin = linspace (0, 2, N);
 %! [x, y, z] = meshgrid (lin, lin, lin);
 %! c = abs ((x-.5).^2 + (y-.5).^2 + (z-.5).^2);
-%! figure (); # Open another figure window
+%! clf;
 %!
 %! subplot (2,2,1);
 %!  view (-38, 20);
 %!  [f, v] = isosurface (x, y, z, c, iso);
 %!  p = patch ("Faces", f, "Vertices", v, "EdgeColor", "none");
 %!  cdat = rand (size (c));       # Compute random color data
 %!  isocolors (x, y, z, cdat, p); # Directly set colors of patch
 %!  title ("random colors for patch handle");
diff --git a/scripts/plot/draw/isonormals.m b/scripts/plot/draw/isonormals.m
--- a/scripts/plot/draw/isonormals.m
+++ b/scripts/plot/draw/isonormals.m
@@ -126,17 +126,17 @@ endfunction
 %!   light ();
 %! endfunction
 %!
 %! N = 15;    # Increase number of vertices in each direction
 %! iso = .4;  # Change isovalue to .1 to display a sphere
 %! lin = linspace (0, 2, N);
 %! [x, y, z] = meshgrid (lin, lin, lin);
 %! val = (x-.5).^2 + (y-.5).^2 + (z-.5).^2;
-%! figure (); # Open another figure window
+%! clf;
 %!
 %! subplot (2,2,1);
 %!  view (-38, 20);
 %!  [fac, vert, cdat] = isosurface (x, y, z, val, iso, y);
 %!  hp = patch ("Faces", fac, "Vertices", vert, "FaceVertexCData", cdat);
 %!  title ("without isonormals");
 %!  isofinish (hp);
 %!  set (hp, "VertexNormalsMode", "auto");  # for Matlab compatibility
diff --git a/scripts/plot/draw/isosurface.m b/scripts/plot/draw/isosurface.m
--- a/scripts/plot/draw/isosurface.m
+++ b/scripts/plot/draw/isosurface.m
@@ -376,24 +376,24 @@ endfunction
 %! [x,y,z] = meshgrid (-2:0.5:2, -2:0.5:2, -2:0.5:2);
 %! v = x.^2 + y.^2 + z.^2;
 %! isosurface (x, y, z, v, 3);
 %! isosurface (x, y, z, v, 5);
 %! axis equal;
 %! title ("isosurfaces of two nested spheres");
 
 %!demo
+%! clf;
 %! x = 0:2;
 %! y = 0:3;
 %! z = 0:1;
 %! [xx, yy, zz] = meshgrid (x, y, z);
 %! v        = [0, 0, 0; 0, 0, 0; 0, 0, 1; 0, 0, 1];
 %! v(:,:,2) = [0, 0, 0; 0, 0, 1; 0, 1, 2; 0, 1, 2];
 %! iso = 0.8;
-%! clf;
 %!
 %! ## Three arguments, no output
 %! subplot (2, 2, 1);
 %!  fvc = isosurface (v, iso, yy);
 %!  patch (fvc);
 %!  shading faceted;
 %!  view (110, 40);
 %! ## six arguments, no output (x, y, z are vectors)
diff --git a/scripts/plot/draw/light.m b/scripts/plot/draw/light.m
--- a/scripts/plot/draw/light.m
+++ b/scripts/plot/draw/light.m
@@ -369,16 +369,17 @@ endfunction
 %! h_light = light ("Position", [-1 1 1]);
 %! axis tight
 %! axis equal
 %! xlabel ("SpecularColorReflectance");
 %! title ("Effects of SpecularColorReflectance");
 
 %!demo
 %! ## BackFaceLighting
+%! clf;
 %! [x,y,z] = meshgrid (-.5:0.1:2, -2:0.1:2, -2:0.1:2);
 %! val = x.^2 + y.^2 + z.^2;
 %! fv = isosurface (x, y, z, val, 1);
 %! vn = isonormals (x, y, z, val, fv.vertices);
 %! h_axes1 = subplot (1, 3, 1);
 %! h_patch = patch (fv, "FaceColor", "c", "EdgeColor", "none", ...
 %!                      "FaceLighting", "Gouraud", "VertexNormals", vn);
 %! set (h_patch, "BackFaceLighting", "reverselit");
@@ -403,25 +404,25 @@ endfunction
 %! h_light = light ();
 %! view (h_axes3, [-50 30]);
 %! axis equal
 %! title ("unlit");
 
 %!demo
 %! ## BackFaceLighting 2
 %! ## Matlab fails for "reverselit" with negated isonormals and for "unlit"
+%! clf;
 %! N = 30; iso = .8;
 %! lin = linspace (-1, 1, N);
 %! [x, y, z] = meshgrid (1.2*lin, 1.2*lin, lin);
 %! val = (x).^2 + (y).^2 - iso/2.7*cos (2*pi*z);
 %! val(x>0 & (y-x)>0) = NaN;
 %! fv = isosurface (x, y, z, val, iso);
 %! vn = isonormals (x, y, z, val, fv.vertices);
 %!
-%! clf;
 %! subplot (2, 3, 1);
 %!  view (140, 20);
 %!  axis equal
 %!  hp = patch (fv, "FaceColor", "r", "EdgeColor", "none", ...
 %!              "BackFaceLighting", "reverselit", "VertexNormals", -vn);
 %!  hl = light ("Position", [1 0 .5]);
 %!  lighting gouraud
 %!  title ({"BackFaceLighting", '"reverselit"', 'isonormals(...,"negate")'});
diff --git a/scripts/plot/draw/plot.m b/scripts/plot/draw/plot.m
--- a/scripts/plot/draw/plot.m
+++ b/scripts/plot/draw/plot.m
@@ -234,58 +234,66 @@ function h = plot (varargin)
   if (nargout > 0)
     h = htmp;
   endif
 
 endfunction
 
 
 %!demo
+%! clf;
 %! x = 1:5;  y = 1:5;
 %! plot (x,y,"g");
 %! title ("plot() of green line at 45 degrees");
 
 %!demo
+%! clf;
 %! x = 1:5;  y = 1:5;
 %! plot (x,y,"g*");
 %! title ("plot() of green stars along a line at 45 degrees");
 
 %!demo
+%! clf;
 %! x1 = 1:5;  y1 = 1:5;
 %! x2 = 5:9; y2 = 5:-1:1;
 %! plot (x1,y1,"bo-", x2,y2,"rs-");
 %! axis ("tight");
 %! title ({"plot() of blue circles ascending and red squares descending";
 %!         "connecting lines drawn"});
 
 %!demo
+%! clf;
 %! x = 0:10;
 %! plot (x, rand (numel (x), 3));
 %! axis ([0 10 0 1]);
 %! title ({"Three random variables", "x[1x11], y[11x3]"});
 
 %!demo
+%! clf;
 %! x = 0:10;
 %! plot (x, rand (3, numel (x)));
 %! axis ([0 10 0 1]);
 %! title ({"Three random variables", "x[1x11], y[3x11]"});
 
 %!demo
+%! clf;
 %! x = 0:10;
 %! plot (repmat (x, 2, 1), rand (2, numel (x)), "-s");
 %! axis ([0 10 0 1]);
 %! title ({"Vertical lines with random height and lengths", ...
 %!         "x[2x11], y[2,11]"});
 
 %!demo
+%! clf;
 %! x = 0:10;
 %! plot (repmat (x(:), 1, 2), rand (numel (x), 2));
 %! axis ([0 10 0 1]);
 %! title ({"Two random variables", "x[11x2], y[11x2]"});
 
 %!demo
+%! clf;
 %! x = 0:10;
 %! shape = [1, 1, numel(x), 2];
 %! x = reshape (repmat (x(:), 1, 2), shape);
 %! y = rand (shape);
 %! plot (x, y);
 %! axis ([0 10 0 1]);
 %! title ({"Two random variables", "squeezed from 4-D arrays"});
diff --git a/scripts/plot/draw/reducepatch.m b/scripts/plot/draw/reducepatch.m
--- a/scripts/plot/draw/reducepatch.m
+++ b/scripts/plot/draw/reducepatch.m
@@ -345,20 +345,20 @@ function [faces_reduced, vertices_reduce
   vertex_renum(removed_vertices) = 0;
   vertex_renum = cumsum (vertex_renum);
   faces_reduced = vertex_renum(faces_reduced);
 
 endfunction
 
 
 %!demo
+%! clf;
 %! [x,y,z] = meshgrid (-2:0.5:2, -2:0.5:2, -2:0.5:2);
 %! val = x.^2 + y.^2 + z.^2;
 %! fv = isosurface (x, y, z, val, 1);
-%! figure;
 %! ax1 = subplot (1, 2, 1);
 %! patch (fv, "FaceColor", "g");
 %! view (3);  axis equal;
 %! title ("Sphere with all faces");
 %! ax2 = subplot(1, 2, 2);
 %! patch (reducepatch (fv, 72), "FaceColor", "g");
 %! view (3);  axis equal;
 %! title ("Sphere with reduced number of faces");
diff --git a/scripts/plot/draw/smooth3.m b/scripts/plot/draw/smooth3.m
--- a/scripts/plot/draw/smooth3.m
+++ b/scripts/plot/draw/smooth3.m
@@ -140,18 +140,18 @@ function gaussian3 = __smooth3_gaussian3
   gaussian3 = exp (-(xx.^2 + yy.^2 + zz.^2)/2);
 
   gaussian3 /= sum (gaussian3(:));  # normalize
 
 endfunction
 
 
 %!demo
+%! clf;
 %! data = rand (10, 10, 10);
-%! clf;
 %! subplot (1, 2, 1);
 %!  patch (isosurface (data, .5), ...
 %!         "FaceColor", "blue", "EdgeColor", "k");
 %!  title ("Original data");
 %!  view (3);
 %!  smoothed_data = smooth3 (data);
 %! subplot (1, 2, 2);
 %!  patch (isosurface (smoothed_data, .5), ...
diff --git a/scripts/plot/util/subplot.m b/scripts/plot/util/subplot.m
--- a/scripts/plot/util/subplot.m
+++ b/scripts/plot/util/subplot.m
@@ -530,16 +530,17 @@ endfunction
 %! ax(4) = subplot (224);
 %! set (ax(4), "tag", "4");
 %! plot (x, rand (3, 11));
 %! title ("x & y labels & ticklabels");
 %! xlabel xlabel;
 %! ylabel ylabel;
 
 %!demo
+%! clf;
 %! x = 0:10;
 %! subplot (221);
 %!  plot (x, rand (3, 11));
 %!  ylim ([0, 1]);
 %!  text (0.5, 0.5, "{x,y}labels & {x,y}ticklabels", ...
 %!                  "horizontalalignment", "center", ...
 %!                  "units", "normalized");
 %!  xlabel xlabel;
