# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1313371255 -7200
#      Mon Aug 15 03:20:55 2011 +0200
# Node ID aa4e5bed1750022c282421e7eef176a330501a2d
# Parent  e67616aca5a6506381aab0ffe7c880a6ad17baed
Automatically changing nick when logging in to server.

diff --git a/gui/src/IRCWidget.cpp b/gui/src/IRCWidget.cpp
--- a/gui/src/IRCWidget.cpp
+++ b/gui/src/IRCWidget.cpp
@@ -86,18 +86,21 @@ QWidget (parent)
   connect (m_ircClientInterface, SIGNAL (debugMessage (QString)),
            this, SLOT (showStatusMessage (QString)));
   connect (m_ircClientInterface, SIGNAL (message (QString, QString, QString)),
            this, SLOT (showMessage (QString, QString, QString )));
   connect (m_ircClientInterface, SIGNAL (nicknameChanged (QString,QString)),
            this, SLOT (handleNickChange (QString,QString)));
   connect (m_ircClientInterface, SIGNAL (notification (QString,QString)),
            this, SLOT (showNotification (QString,QString)));
-  connect (m_ircClientInterface, SIGNAL (loggedIn(QString)),
+  connect (m_ircClientInterface, SIGNAL (loggedIn (QString)),
            this, SLOT (handleLoggedIn(QString)));
+  connect (m_ircClientInterface, SIGNAL (userNicknameChanged (QString)),
+           this, SLOT (handleUserNicknameChanged (QString)));
+
   connect (m_nickButton, SIGNAL (clicked ()), this, SLOT (nickPopup ()));
   connect (m_inputLine, SIGNAL (returnPressed ()), this,
 	   SLOT (sendInputLine ()));
 
   if (connectOnStartup)
     connectToServer ();
 }
 
@@ -263,20 +266,16 @@ IRCWidget::handleLoggedIn (const QString
 
 void
 IRCWidget::handleNickChange (const QString &oldNick, const QString &newNick)
 {
   m_chatWindow->append (QString ("%1 is now known as %2.").arg (oldNick).arg (newNick));
   m_nickList.removeAll (QString (oldNick));
   m_nickList.append (QString (newNick));
   updateNickCompleter ();
-
-  //m_nickButton->setText (m_ircClient->nickInUse ());
-  //QSettings *settings = ResourceManager::instance ()->settings ();
-  //settings->setValue ("IRCNick", m_ircClient->nickInUse ());
 }
 
 void
 IRCWidget::handleUserJoined (const QString &nick, const QString &channel)
 {
   m_chatWindow->append (QString ("<i>%1 has joined %2.</i>").arg (nick).
                         arg (channel));
   m_nickList.append (QString (nick));
@@ -288,14 +287,22 @@ IRCWidget::handleUserQuit (const QString
 {
   m_chatWindow->append (QString ("<i>%1 has quit.(%2).</i>").arg (nick).
                         arg (reason));
   m_nickList.removeAll (QString (nick));
   updateNickCompleter ();
 }
 
 void
+IRCWidget::handleUserNicknameChanged (const QString &nick)
+{
+  m_nickButton->setText (nick);
+  QSettings *settings = ResourceManager::instance ()->settings ();
+  settings->setValue ("IRCNick", nick);
+}
+
+void
 IRCWidget::updateNickCompleter ()
 {
   QCompleter *completer = new QCompleter (m_nickList, this);
   completer->setCompletionMode (QCompleter::InlineCompletion);
   m_inputLine->setCompleter (completer);
 }
diff --git a/gui/src/IRCWidget.h b/gui/src/IRCWidget.h
--- a/gui/src/IRCWidget.h
+++ b/gui/src/IRCWidget.h
@@ -40,16 +40,17 @@ public slots:
 
   void handleConnected (const QString& host);
   void joinOctaveChannel (const QString& nick);
 
   void handleLoggedIn (const QString& nick);
   void handleNickChange (const QString& oldNick, const QString& newNick);
   void handleUserJoined (const QString& nick, const QString& channel);
   void handleUserQuit (const QString& nick, const QString& reason);
+  void handleUserNicknameChanged (const QString& nick);
 
   void nickPopup ();
   void sendMessage (QString);
   void sendInputLine ();
   void updateNickCompleter ();
 
 private:
   IRCClientInterface *m_ircClientInterface;
diff --git a/gui/src/qirc/IRCClientImpl.cpp b/gui/src/qirc/IRCClientImpl.cpp
--- a/gui/src/qirc/IRCClientImpl.cpp
+++ b/gui/src/qirc/IRCClientImpl.cpp
@@ -171,16 +171,17 @@ void
 IRCChannelProxy::leave (const QString& reason)
 {
   Q_UNUSED (reason);
 }
 
 IRCClientImpl::IRCClientImpl (QObject *parent)
   : IRCClientInterface (parent)
 {
+  m_loggedIn = false;
   connect (&m_tcpSocket, SIGNAL (connected ()), this, SLOT (handleConnected ()));
   connect (&m_tcpSocket, SIGNAL (disconnected ()), this, SLOT (handleDisconnected ()));
   connect (&m_tcpSocket, SIGNAL (readyRead ()), this, SLOT (handleReadyRead ()));
 }
 
 IRCClientImpl::~IRCClientImpl ()
 {
   foreach (IRCChannelProxyInterface *ircChannelProxy, m_channels)
@@ -211,16 +212,22 @@ IRCClientImpl::reconnect ()
 }
 
 bool
 IRCClientImpl::isConnected ()
 {
   return m_connected;
 }
 
+bool
+IRCClientImpl::isLoggedIn ()
+{
+  return m_loggedIn;
+}
+
 const QHostAddress&
 IRCClientImpl::host()
 {
   return m_host;
 }
 
 int
 IRCClientImpl::port()
@@ -288,16 +295,22 @@ IRCClientImpl::handleReadyRead ()
         break;
     }
   while (true);
 }
 
 void
 IRCClientImpl::handleNicknameChanged (const QString &oldNick, const QString &newNick)
 {
+  // Check if our nickname changed.
+  if (oldNick == m_nickname)
+    {
+      m_nickname = newNick;
+      emit userNicknameChanged (m_nickname);
+    }
   emit nicknameChanged (oldNick, newNick);
 }
 
 void
 IRCClientImpl::handleUserJoined (const QString &nick, const QString &channel)
 {
   emit userJoined (nick, channel);
 }
@@ -306,30 +319,45 @@ void
 IRCClientImpl::handleUserQuit (const QString &nick, const QString &reason)
 {
   emit userQuit (nick, reason);
 }
 
 void
 IRCClientImpl::handleIncomingLine (const QString &line)
 {
-  //emit debugMessage (QString (">>>recv: \"%1\"").arg (line));
+  emit debugMessage (QString (">>>recv: \"%1\"").arg (line));
   if (m_connected && !line.isEmpty())
     {
       IRCServerMessage ircServerMessage(line);
       if (ircServerMessage.isNumeric () == true)
         {
           switch (ircServerMessage.numericValue ())
             {
               case IRCReply::Welcome:
+                m_loggedIn = true;
+                emit userNicknameChanged (nickname ());
                 emit loggedIn (nickname ());
                 break;
               case IRCError::NicknameInUse:
               case IRCError::NickCollision:
-                emit debugMessage ("FIXME: Received nickname in use reply.");
+                // If we are already logged in, the user attempted to
+                // switch to a username that is already existing.
+                // In that case warn him.
+                if (isLoggedIn ())
+                  {
+                    emit error ("The nickname is already in use.");
+                  }
+                // Otherwise we are attempting to log in to the server.
+                // Change the nick so that we can at least log in.
+                else
+                  {
+                    m_nickname += "_";
+                    sendNicknameChangeRequest (m_nickname);
+                  }
                 break;
               case IRCError::PasswordMismatch:
                 emit debugMessage ("FIXME: Received password mismatch reply.");
                 break;
               case IRCReply::MessageOfTheDayStart:
               case IRCReply::MessageOfTheDay:
               case IRCReply::MessageOfTheDayEnd:
               case IRCError::NoMessageOfTheDay:
@@ -415,17 +443,17 @@ IRCClientImpl::handleIncomingLine (const
             }
         }
     }
 }
 
 void
 IRCClientImpl::sendLine (const QString &line)
 {
-  //emit debugMessage (QString (">>>send: \"%1\"").arg (line));
+  emit debugMessage (QString (">>>send: \"%1\"").arg (line));
   if (m_connected)
     m_tcpSocket.write ((line + "\r\n").toStdString ().c_str ());
 }
 
 void
 IRCClientImpl::sendIRCCommand (const QString &command, const QStringList &arguments)
 {
   QString line = command;
diff --git a/gui/src/qirc/IRCClientImpl.h b/gui/src/qirc/IRCClientImpl.h
--- a/gui/src/qirc/IRCClientImpl.h
+++ b/gui/src/qirc/IRCClientImpl.h
@@ -278,16 +278,17 @@ class IRCClientImpl : public IRCClientIn
 {
   Q_OBJECT
 public:
   IRCClientImpl (QObject *parent = 0);
   ~IRCClientImpl ();
 
   const QString& nickname ();
   bool isConnected ();
+  bool isLoggedIn ();
   const QHostAddress& host();
   int port();
   IRCChannelProxyInterface *ircChannelProxy(const QString& channel);
   void sendIRCCommand (const QString& command, const QStringList& arguments);
 
 public slots:
   void connectToHost (const QHostAddress& host, int port, const QString& initialNick);
   void disconnect ();
@@ -310,13 +311,14 @@ private:
   void handleUserQuit (const QString& nick, const QString& reason);
   void handleIncomingLine (const QString& line);
   void sendLine (const QString& line);
 
   QHostAddress                              m_host;
   int                                       m_port;
   QString                                   m_nickname;
   bool                                      m_connected;
+  bool                                      m_loggedIn;
   QTcpSocket                                m_tcpSocket;
   QMap<QString, IRCChannelProxyInterface*>  m_channels;
 };
 
 #endif // IRCCLIENTIMPL_H
diff --git a/gui/src/qirc/IRCClientInterface.h b/gui/src/qirc/IRCClientInterface.h
--- a/gui/src/qirc/IRCClientInterface.h
+++ b/gui/src/qirc/IRCClientInterface.h
@@ -49,16 +49,17 @@ class IRCClientInterface : public QObjec
 {
   Q_OBJECT
 public:
   IRCClientInterface (QObject *parent = 0) : QObject (parent) { }
   virtual ~IRCClientInterface () { }
 
   virtual const QString& nickname () = 0;
   virtual bool isConnected () = 0;
+  virtual bool isLoggedIn () = 0;
   virtual const QHostAddress& host() = 0;
   virtual int port() = 0;
   virtual IRCChannelProxyInterface *ircChannelProxy(const QString& channel) = 0;
   virtual void sendIRCCommand (const QString& command, const QStringList& arguments) = 0;
 
 public slots:
   // Connection state:
   virtual void connectToHost (const QHostAddress& host, int port, const QString& initialNick) = 0;
@@ -71,15 +72,16 @@ public slots:
 signals:
   void newMessage (const QString& channel, const QString& sender, const QString& message);
   void connected (const QString& server);
   void disconnected ();
   void error (const QString& message);
   void notification (const QString& sender, const QString& message);
   void message (const QString& channel, const QString& sender, const QString& message);
   void nicknameChanged (const QString& oldNick, const QString& newNick);
+  void userNicknameChanged (const QString& nick);
   void userJoined (const QString& nick, const QString& channel);
   void userQuit (const QString& nick, const QString& reason);
   void loggedIn (const QString& nick);
   void userList (const QString& channel, const QStringList& list);
 };
 
 #endif // IRCCLIENTINTERFACE_H
