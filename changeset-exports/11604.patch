# HG changeset patch
# User jwe
# Date 1199483370 0
#      Fri Jan 04 21:49:30 2008 +0000
# Branch release-3-0-x
# Node ID 4c9677b526b15c5feaaa1a1a6fb728dbd80bb6c3
# Parent  113fd59c0932022d55927ded75b3bc316bec9c3e
[3-0-0-branch @ 2008-01-04 21:49:29 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2008-01-04  John Swensen  <jpswensen@comcast.net>
+
+	* debug.cc (bp_table::do_remove_all_breakpoints_in_file):
+	Avoid calling erase on invalid bp_map iterators.
+	(bp_table::do_remove_breakpoint): Only try to delete breakpoints
+	if some exist.  Avoid calling erase on invalid bp_map iterators.
+	(parse_dbfunction_params): Return early if ARGS is empty.
+	New arg, WHO.  Change all uses.
+	Accept but do nothing with struct args.
+
 2007-12-21  John W. Eaton  <jwe@octave.org>
 
 	Version 3.0.0 released.
 
 	* version.h (OCTAVE_VERSION): Now 3.0.0.
 	(OCTAVE_API_VERSION): Now api-v32.
 	(OCTAVE_RELEASE_DATE): Now 2007-12-21.
 
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -1,11 +1,12 @@
 /*
 
-Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007 Ben Sapp
+Copyright (C) 2007, 2008  John Swensen
+Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006 Ben Sapp
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 3 of the License, or (at your
 option) any later version.
 
@@ -88,55 +89,60 @@ get_user_function (const std::string& fn
 	    }
 	}
     }
 
   return dbg_fcn;
 }
 
 static void
-parse_dbfunction_params (const octave_value_list& args, 
-			 std::string& symbol_name, 
-			 bp_table::intmap& lines)
+parse_dbfunction_params (const char *who, const octave_value_list& args, 
+			 std::string& symbol_name, bp_table::intmap& lines)
 {
-  octave_idx_type len = 0;
   int nargin = args.length ();
   int idx = 0;
   int list_idx = 0;
   symbol_name = std::string ();
+  lines = bp_table::intmap ();
+
+  if (args.length () == 0)
+    return;
 
   // If we are already in a debugging function.
   if (octave_call_stack::caller_user_function ())
-    idx = 0;
-  else
+    {
+      idx = 0;
+      symbol_name = get_user_function ()->name ();
+    }
+  else if (args(0).is_map ())
     {
-      symbol_name = args (0).string_value ();
+      // Problem because parse_dbfunction_params() can only pass out a
+      // single function
+    }
+  else if (args(0).is_string())
+    {
+      symbol_name = args(0).string_value ();
       if (error_state)
 	return;
       idx = 1;
     }
+  else
+    error ("%s: invalid parameter specified", who);
 
   for (int i = idx; i < nargin; i++ )
     {
-      if (args (i).is_string ())
-	len++;
-      else
-	len += args (i).numel ();
-    }
-
-  lines = bp_table::intmap ();
-  for (int i = idx; i < nargin; i++ )
-    {
-      if (args (i).is_string ())
+      if (args(i).is_string ())
 	{
 	  int line = atoi (args(i).string_value().c_str ());
 	  if (error_state)
 	    break;
 	  lines[list_idx++] = line;
 	}
+      else if (args(i).is_map ())
+	octave_stdout << who << ": accepting a struct" << std::endl;
       else
 	{
 	  const NDArray arg = args(i).array_value ();
 	  
 	  if (error_state)
 	    break;
 	  
 	  for (octave_idx_type j = 0; j < arg.nelem (); j++)
@@ -203,29 +209,33 @@ bp_table::do_remove_breakpoint (const st
       retval = results.size ();
     }
   else
     {
       octave_user_function *dbg_fcn = get_user_function (fname);
       if (dbg_fcn)
 	{
 	  tree_statement_list *cmds = dbg_fcn->body ();
-	  for (int i = 0; i < len; i++)
+	  octave_value_list results = cmds->list_breakpoints ();
+	  if (results.length () > 0)
 	    {
-	      const_intmap_iterator p = line.find (i);
+	      for (int i = 0; i < len; i++)
+		{
+		  const_intmap_iterator p = line.find (i);
+		  
+		  if (p != line.end ())
+		    cmds->delete_breakpoint (p->second);
+		}
+	      results = cmds->list_breakpoints ();
 
-	      if (p != line.end ())
-		cmds->delete_breakpoint (p->second);
+	      breakpoint_map_iterator it = bp_map.find (fname);
+	      if (results.length () == 0 && it != bp_map.end ())
+		bp_map.erase (it);
 	    }
 
-	  octave_value_list results = cmds->list_breakpoints ();
-
-	  if (results.length () == 0)
-	    bp_map.erase (bp_map.find (fname));
-
 	  retval = results.length ();
 	}
       else
 	error ("remove_breakpoint: unable to find the function requested\n");
     }
   return retval;
 }
 
@@ -244,18 +254,20 @@ bp_table::do_remove_all_breakpoints_in_f
       octave_value_list bkpts = cmds->list_breakpoints ();
 
       for (int i = 0; i < bkpts.length (); i++)
 	{
 	  int lineno = static_cast<int> (bkpts(i).int_value ());
 	  cmds->delete_breakpoint (lineno);
 	  retval[i] = lineno;
 	}
-
-      bp_map.erase (bp_map.find (fname));
+      
+      breakpoint_map_iterator it = bp_map.find (fname);
+      if (it != bp_map.end ())
+	bp_map.erase (it);
     }
   else
     error ("remove_all_breakpoint_in_file: "
 	   "unable to find the function requested\n");
 
   return retval;
 }
 
@@ -353,17 +365,17 @@ lines might be given as separate argumen
 The rline returned is the real line that the breakpoint was set at.\n\
 @seealso{dbclear, dbstatus, dbnext}\n\
 @end deftypefn")
 {
   bp_table::intmap retval;
   std::string symbol_name;
   bp_table::intmap lines;
 
-  parse_dbfunction_params (args, symbol_name, lines);
+  parse_dbfunction_params ("dbstop", args, symbol_name, lines);
 
   if (! error_state)
     retval = bp_table::add_breakpoint (symbol_name, lines);
 
   return intmap_to_ov (retval);
 }
 
 DEFCMD (dbclear, args, ,
@@ -382,17 +394,17 @@ No checking is done to make sure that th
 a breakpoint. If you get the wrong line nothing will happen.\n\
 @seealso{dbstop, dbstatus, dbwhere}\n\
 @end deftypefn")
 {
   octave_value retval;
   std::string symbol_name = "";
   bp_table::intmap lines;
 
-  parse_dbfunction_params (args, symbol_name, lines);
+  parse_dbfunction_params ("dbclear", args, symbol_name, lines);
       
   if (! error_state)
     bp_table::remove_breakpoint (symbol_name, lines);
 
   return retval;
 }
 
 DEFCMD (dbstatus, args, nargout,
