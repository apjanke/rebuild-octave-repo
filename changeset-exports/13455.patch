# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302873073 -7200
#      Fri Apr 15 15:11:13 2011 +0200
# Node ID 3adf6bf0a98d2d7a4386721203bd4be5e4a45cd7
# Parent  fde3803ae0eec9525dba429a3b59ac0904eb2c55
Cleaned up OctaveLink.

diff --git a/gui//src/MainWindow.h b/gui//src/MainWindow.h
--- a/gui//src/MainWindow.h
+++ b/gui//src/MainWindow.h
@@ -172,40 +172,16 @@ protected:
         //}
 
         // Collect history list.
         string_vector historyList = OctaveLink::instance()->getHistoryList();
         if(historyList.length()) {
             m_mainWindow->historyDockWidget()->updateHistory(historyList);
         }
 
-        // Put a marker in each buffer at the proper location.
-        int status = 0;
-        std::vector<OctaveLink::BreakPoint> breakPoints = OctaveLink::instance()->breakPointList(status);
-        if(status==0) {
-            //MEditor::GetInstance()->process_breakpoint_list (bps);
-        }
-
-        // Find out if a breakpoint is hit
-        static bool lineNumber = -1;
-        bool hitBreakPoint = OctaveLink::instance()->isBreakpointReached(status);
-        if((status==0) && hitBreakPoint) {
-            std::vector<OctaveLink::BreakPoint> hit_breakpoint = OctaveLink::instance()->reachedBreakpoint();
-
-            if(hit_breakpoint.size() > 0 && (hit_breakpoint[0].lineNumber != lineNumber)) {
-                //MEditor::GetInstance()->remove_hit_breakpoint_marker ();
-                //MEditor::GetInstance()->add_breakpoint_marker(hit_breakpoint[0], BP_MARKER_TYPE_HIT);
-                lineNumber = hit_breakpoint[0].lineNumber;
-            }
-        }
-        else if((status==0) && lineNumber>0) {
-            //MEditor::GetInstance()->remove_hit_breakpoint_marker ();
-            lineNumber = -1;
-        }
-
             usleep(100000);
         }
     }
 private:
     MainWindow *m_mainWindow;
 };
 
 #endif // MAINWINDOW_H
diff --git a/gui//src/OctaveLink.cpp b/gui//src/OctaveLink.cpp
--- a/gui//src/OctaveLink.cpp
+++ b/gui//src/OctaveLink.cpp
@@ -16,24 +16,18 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 02110-1301, USA.
 
 */
 
 // Born July 13, 2007.
 
-
-
 #include "OctaveLink.h"
 
-#include <QFileInfo>
-#include <QMutexLocker>
-#include <QList>
-
 OctaveLink OctaveLink::m_singleton;
 
 static octave_user_code *
 get_user_code (const std::string& fname = std::string ())
 {
   octave_user_code *dbg_fcn = 0;
 
   if (fname.empty ())
@@ -111,17 +105,17 @@ std::vector<OctaveLink::BreakPoint> Octa
     // Copy the list of variable information
     std::vector<BreakPoint> retval (m_currentBreakpoints.size());
     std::copy( m_currentBreakpoints.begin(), m_currentBreakpoints.end(), retval.begin() );
 
     status = 0;
     return retval;
 }
 
-bool OctaveLink::isBreakpointReached (int& status)
+bool OctaveLink::isBreakpointReached()
 {
     QMutexLocker mutexLocker(&m_internalAccessMutex);
 
     // Copy the list of variable information
     bool retval = (m_reachedBreakpoints.size()>0);
     return retval;
 }
 
@@ -317,18 +311,18 @@ int OctaveLink::setBreakPointList( void 
 	  QFileInfo pathInfo;
 	  QString qFilePath (name.c_str());
 	  pathInfo.setFile (qFilePath);
 	  //(QString (name));
 	  QString fileName (pathInfo.fileName ());
 	  //std::string shortName = Glib::path_get_basename(name);
 	  std::string shortName = fileName.toStdString ();
 	  std::string funcName;
-	  int dot = shortName.find_first_of(".");
-	  if (dot!=std::string::npos)
+          int dot = shortName.find_first_of(".");
+          if (dot!=(signed)std::string::npos)
 	    {
 	      funcName = shortName.substr (0,dot);
 	    }
           tmp.fileName = funcName;
           tmp.lineNumber = l;
 	  
 	  //	  octave_stdout << "BP reached at " << tmp.filename << ":" << tmp.line_number << std::endl;
 
@@ -404,28 +398,28 @@ int OctaveLink::process_breakpoint_actio
   return 0;
 }
 
 //*************************************************************************
 int OctaveLink::processBreakpointAndRemoveModify(void)
 {
   //octave_stdout << "Processing breakpoints changes" << std::endl;
   // Process added breakpoints
-  for (int i = 0 ; i < m_addedBreakpoints.size() ; i++)
+  for (int i = 0 ; i < (signed)m_addedBreakpoints.size() ; i++)
   {
     std::string funcName = m_addedBreakpoints[i].fileName;
     bp_table::intmap lines;
     lines[0] = m_addedBreakpoints[i].lineNumber;
     bp_table::add_breakpoint (funcName,lines);
     octave_stdout << "Adding breakpoint: " << funcName << " : " << lines[0] << std::endl; 
   }
   m_addedBreakpoints = std::vector<BreakPoint>();
 
   // Process removed breakpoints
-  for (int i = 0 ; i < m_removedBreakpoints.size() ; i++)
+  for (int i = 0 ; i < (signed)m_removedBreakpoints.size() ; i++)
   {
     std::string funcName = m_removedBreakpoints[i].fileName;
     bp_table::intmap lines;
     lines[0] = m_removedBreakpoints[i].lineNumber;
     bp_table::remove_breakpoint (funcName,lines);
     //octave_stdout << "Removing breakpoint: " << funcName << " : " << lines[0] << std::endl; 
   }
   m_removedBreakpoints = std::vector<BreakPoint>();
diff --git a/gui//src/OctaveLink.h b/gui//src/OctaveLink.h
--- a/gui//src/OctaveLink.h
+++ b/gui//src/OctaveLink.h
@@ -17,89 +17,63 @@
  * You should have received a copy of the GNU General Public License
  * along with Octave; see the file COPYING.  If not, write to the Free
  * Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
  * 02110-1301, USA.
  *
  * */
 #ifndef OCTAVELINK_H
 #define OCTAVELINK_H
-//#ifdef HAVE_CONFIG_H
+
+// Octave includes
 #undef PACKAGE_BUGREPORT
 #undef PACKAGE_NAME
 #undef PACKAGE_STRING
 #undef PACKAGE_TARNAME
 #undef PACKAGE_VERSION
 #undef PACKAGE_URL
 #include <octave/config.h>
-//#endif
-
-#include <cassert>
-#include <cstdlib>
-#include <cstring>
-#include <ctime>
-
-#include <fstream>
-#include <iostream>
-
-#ifdef HAVE_UNISTD_H
-#ifdef HAVE_SYS_TYPES_H
-#include <sys/types.h>
-#endif
-#include <unistd.h>
-#endif
-#include <sys/time.h>
-
-#include <sys/time.h>
-
 #include "octave/cmd-edit.h"
 #include "octave/error.h"
 #include "octave/file-io.h"
 #include "octave/input.h"
 #include "octave/lex.h"
 #include "octave/load-path.h"
 #include "octave/octave.h"
 #include "octave/oct-hist.h"
 #include "octave/oct-map.h"
 #include "octave/oct-obj.h"
 #include "octave/ops.h"
 #include "octave/ov.h"
 #include "octave/ov-usr-fcn.h"
 #include "octave/symtab.h"
 #include "octave/pt.h"
 #include "octave/pt-eval.h"
-
+#include "octave/config.h"
+#include "octave/Range.h"
 #include "octave/toplev.h"
 #include "octave/procstream.h"
-//#include "octave/prog-args.h"
 #include "octave/sighandlers.h"
 #include "octave/debug.h"
 #include "octave/sysdep.h"
 #include "octave/ov.h"
 #include "octave/unwind-prot.h"
 #include "octave/utils.h"
 #include "octave/variables.h"
 
-#include <readline/readline.h>
-#undef PACKAGE_BUGREPORT
-#undef PACKAGE_NAME
-#undef PACKAGE_STRING
-#undef PACKAGE_TARNAME
-#undef PACKAGE_VERSION
-#undef PACKAGE_URL
-#include "octave/config.h"
-#include "octave/Range.h"
-#include "octave/ov.h"
-class octave_value;
-class octave_value_list;
-
-#include <cstdio>
+// Standard includes
+#include <iostream>
 #include <string>
 #include <vector>
+#include <readline/readline.h>
+
+// Qt includes
+#include <QMutexLocker>
 #include <QMutex>
+#include <QFileInfo>
 #include <QList>
 #include <QString>
 #include <QVector>
 
 typedef symbol_table::symbol_record SymbolRecord;
 
 /**
   * \class OctaveLink
@@ -155,17 +129,17 @@ public:
 
     /** TODO: Describe. */
     std::vector<BreakPoint> breakPointList(int& status);
 
     /** TODO: Describe. */
     std::vector<BreakPoint> reachedBreakpoint();
 
     /** TODO: Describe. */
-    bool isBreakpointReached(int& status);
+    bool isBreakpointReached();
 
     /** TODO: Describe. */
     int addBreakpoint(BreakPoint bp_info);
 
     /** TODO: Describe. */
     int	removeBreakpoint(BreakPoint bp_info);
 
     /** TODO: Describe. */
