# HG changeset patch
# User Rik <rik@octave.org>
# Date 1373769816 25200
#      Sat Jul 13 19:43:36 2013 -0700
# Node ID 9aa293e004753fa539d7bd71b95cce787e52a599
# Parent  00379f9f8773ce915b41aecb8c03339d6bb0ff3a
gallery.m: Add 'normaldata' matrix to function.

* scripts/special-matrix/gallery.m: Add 'normaldata' matrix to function.

diff --git a/scripts/special-matrix/gallery.m b/scripts/special-matrix/gallery.m
--- a/scripts/special-matrix/gallery.m
+++ b/scripts/special-matrix/gallery.m
@@ -402,18 +402,17 @@ function [varargout] = gallery (name, va
     case "lehmer"     , [varargout{1:n_out}] = lehmer      (varargin{:});
     case "leslie"
       error ("gallery: matrix %s not implemented.", name);
     case "lesp"       , [varargout{1:n_out}] = lesp        (varargin{:});
     case "lotkin"     , [varargout{1:n_out}] = lotkin      (varargin{:});
     case "minij"      , [varargout{1:n_out}] = minij       (varargin{:});
     case "moler"      , [varargout{1:n_out}] = moler       (varargin{:});
     case "neumann"    , [varargout{1:n_out}] = neumann     (varargin{:});
-    case "normaldata"
-      error ("gallery: matrix %s not implemented.", name);
+    case "normaldata" , [varargout{1:n_out}] = normaldata  (varargin{:});
     case "orthog"     , [varargout{1:n_out}] = orthog      (varargin{:});
     case "parter"     , [varargout{1:n_out}] = parter      (varargin{:});
     case "pei"        , [varargout{1:n_out}] = pei         (varargin{:});
     case "poisson"    , [varargout{1:n_out}] = poisson     (varargin{:});
     case "prolate"    , [varargout{1:n_out}] = prolate     (varargin{:});
     case "randcolu"
       error ("gallery: matrix %s not implemented.", name);
     case "randcorr"
@@ -1739,16 +1738,57 @@ function [A, T] = neumann (n)
 
   T = tridiag (n(1), -1, 2, -1);
   T(1,2) = -2;
   T(n(1),n(1)-1) = -2;
 
   A = kron (T, eye (n(2))) + kron (eye (n(2)), T);
 endfunction
 
+function A = normaldata (varargin)
+
+  if (nargin < 2)
+    error ("gallery: At least 2 arguments required for normaldata matrix.");
+  endif
+  if (isnumeric (varargin{end}))
+    jidx = varargin{end};
+    svec = [varargin{:}];
+    varargin(end) = [];
+  elseif (ischar (varargin{end}))
+    if (nargin < 3)
+      error (["gallery: CLASS argument requires 3 inputs " ...
+              "for normaldata matrix."]);
+    endif
+    jidx = varargin{end-1};
+    svec = [varargin{1:end-1}];
+    varargin(end-1) = [];
+  else 
+    error (["gallery: J must be an integer in the range [0, 2^32-1] " ...
+            "for normaldata matrix"]);
+  endif
+
+  if (! (isnumeric (jidx) && isscalar (jidx)
+         && jidx == fix (jidx)
+         && jidx >= 0 && jidx <= 0xFFFFFFFF))
+    error (["gallery: J must be an integer in the range [0, 2^32-1] " ...
+            "for normaldata matrix"]);
+  endif
+
+  ## Save and restore random state.  Initialization done so that reproducible
+  ## data is available from gallery depending on the jidx and size vector.
+  randstate = randn ("state"); 
+  unwind_protect
+    randn ("state", svec);
+    A = randn (varargin{:});
+  unwind_protect_cleanup
+    randn ("state", randstate);
+  end_unwind_protect
+
+endfunction
+
 function Q = orthog (n, k = 1)
   ## ORTHOG Orthogonal and nearly orthogonal matrices.
   ##        Q = ORTHOG(N, K) selects the K'th type of matrix of order N.
   ##        K > 0 for exactly orthogonal matrices, K < 0 for diagonal scalings of
   ##        orthogonal matrices.
   ##        Available types: (K = 1 is the default)
   ##        K = 1:  Q(i,j) = SQRT(2/(n+1)) * SIN( i*j*PI/(n+1) )
   ##                Symmetric eigenvector matrix for second difference matrix.
@@ -2422,37 +2462,40 @@ function t = triw (n, alpha = -1, k = -1
   n = n(end);
 
   t = tril (eye (m, n) + alpha * triu (ones (m, n), 1), k);
 endfunction
 
 function A = uniformdata (varargin)
 
   if (nargin < 2)
-    error ("gallery: At least 2 argument required for uniformdata matrix.");
+    error ("gallery: At least 2 arguments required for uniformdata matrix.");
   endif
   if (isnumeric (varargin{end}))
     jidx = varargin{end};
     svec = [varargin{:}];
     varargin(end) = [];
   elseif (ischar (varargin{end}))
     if (nargin < 3)
-      error ("gallery: CLASS argument requires 3 inputs.");
+      error (["gallery: CLASS argument requires 3 inputs " ...
+              "for uniformdata matrix."]);
     endif
     jidx = varargin{end-1};
     svec = [varargin{1:end-1}];
     varargin(end-1) = [];
   else 
-    error ("gallery: J must be an integer in the range [0, 2^32-1]");
+    error (["gallery: J must be an integer in the range [0, 2^32-1] " ...
+            "for uniformdata matrix"]);
   endif
 
   if (! (isnumeric (jidx) && isscalar (jidx)
          && jidx == fix (jidx)
          && jidx >= 0 && jidx <= 0xFFFFFFFF))
-    error ("gallery: J must be an integer in the range [0, 2^32-1]");
+    error (["gallery: J must be an integer in the range [0, 2^32-1] " ...
+            "for uniformdata matrix"]);
   endif
 
   ## Save and restore random state.  Initialization done so that reproducible
   ## data is available from gallery depending on the jidx and size vector.
   randstate = rand ("state"); 
   unwind_protect
     rand ("state", svec);
     A = rand (varargin{:});
