# HG changeset patch
# User Rik <octave@nomad.inbox5.com>
# Date 1280252771 25200
#      Tue Jul 27 10:46:11 2010 -0700
# Node ID 1e6664326d327c6cf97d483fdea6271233eae6a0
# Parent  3d89d262f5d4734fdad3ab8049d8a72f49b06ea8
rsf2csf: Change first documentation line to active voice.

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2010-07-27  Rik <octave@nomad.inbox5.com>
+
+	* DLD-FUNCTIONS/schur.cc (rsf2csf): Change first documentation line to
+	active voice.
+
 2010-07-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/schur.cc (Frsf2csf): New DEFUN.
 
 2010-07-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base-scalar.cc (octave_base_scalar::diag): Implement here. Fix.
 	* ov-base-scalar.h: Only declare here.
diff --git a/src/DLD-FUNCTIONS/schur.cc b/src/DLD-FUNCTIONS/schur.cc
--- a/src/DLD-FUNCTIONS/schur.cc
+++ b/src/DLD-FUNCTIONS/schur.cc
@@ -389,38 +389,38 @@ leading eigenvalues of\n\
 %!error <Invalid call to schur.*> schur ();
 %!error schur ([1, 2, 3; 4, 5, 6]);
 
 */
 
 DEFUN_DLD (rsf2csf, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Function File} {[@var{U}, @var{T}] =} rsf2csf (@var{UR}, @var{TR})\n\
-Converts a real, upper quasi-triangular Schur form @var{TR} to a complex,\n\
+Convert a real, upper quasi-triangular Schur form @var{TR} to a complex,\n\
 upper triangular Schur form @var{T}.\n\
 \n\
 Note that the following relations hold: \n\
 \n\
 @code{@var{UR} * @var{TR} * @var{UR}' = @var{U} * @var{T} * @var{U}'} and\n\
-@code{@var{U}' * @var{U}} is identity.\n\
+@code{@var{U}' * @var{U}} is the identity matrix.\n\
 \n\
 Note also that U and T are not unique.\n\
 \n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 2 && nargout <= 2)
     {
       if (! args(0).is_numeric_type ())
         gripe_wrong_type_arg ("rsf2csf", args(0));
       else if (! args(1).is_numeric_type ())
         gripe_wrong_type_arg ("rsf2csf", args(1));
       else if (args(0).is_complex_type () || args(1).is_complex_type ())
-        error ("rsf2csf: both matrices should be real");
+        error ("rsf2csf: both matrices must be real");
       else
         {
 
           if (args(0).is_single_type () || args(1).is_single_type ())
             {
               FloatMatrix u = args(0).float_matrix_value ();
               FloatMatrix t = args(1).float_matrix_value ();
               if (! error_state)
