# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1263283422 -3600
#      Tue Jan 12 09:03:42 2010 +0100
# Node ID 76df75b10c800b5a81482695920c1bb65703b2da
# Parent  82d47b70642404151336dba0669cbacfddb4f4de
allow more cells in strfind/strrep + supply a general mechanism

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2010-01-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* oct-obj.cc (octave_value_list::any_cell): New method.
+	* oct-obj.h: Declare it.
+	* utils.cc (do_simple_cellfun): New overloaded function.
+	* utils.h: Declare it.
+	* DLD-FUNCTIONS/strfind.cc (Fstrfind): Call it here.
+	(Fstrrep): Also here.
+
 2010-01-11  Rik <octave@nomad.inbox5.com>
 
 	* Makefile.am: Update DOCSTRINGS rules to avoid simple_move_if_change_rule
 	and allow Make to update timestamps.
 
 2010-01-11  John W. Eaton  <jwe@octave.org>
 
 	* DLD-FUNCTIONS/urlwrite.cc (curl_handle::lasterror):
diff --git a/src/DLD-FUNCTIONS/strfind.cc b/src/DLD-FUNCTIONS/strfind.cc
--- a/src/DLD-FUNCTIONS/strfind.cc
+++ b/src/DLD-FUNCTIONS/strfind.cc
@@ -146,20 +146,20 @@ strfind (@{\"abababa\", \"bebebe\", \"ab
 @seealso{findstr, strmatch, strcmp, strncmp, strcmpi, strncmpi, find}\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
 
   if (nargin == 2)
     {
-      octave_value argstr = args(0), argp = args(1);
-      if (argp.is_string ())
+      octave_value argstr = args(0), argpat = args(1);
+      if (argpat.is_string ())
         {
-          Array<char> needle = argp.char_array_value ();
+          Array<char> needle = argpat.char_array_value ();
           OCTAVE_LOCAL_BUFFER (octave_idx_type, table, UCHAR_MAX);
           qs_preprocess (needle, table);
 
           if (argstr.is_string ())
             retval = octave_value (qs_search (needle, argstr.char_array_value (), table), 
                                    true, true);
           else if (argstr.is_cell ())
             {
@@ -180,18 +180,20 @@ strfind (@{\"abababa\", \"bebebe\", \"ab
                     }
                 }
 
               retval = retc;
             }
           else
             error ("strfind: first argument must be a string or cell array of strings");
         }
+      else if (argpat.is_cell ())
+        retval = do_simple_cellfun (Fstrfind, "strfind", args);
       else
-        error ("strfind: pattern must be a string");
+        error ("strfind: pattern must be a string or cell array of strings");
     }
   else
     print_usage ();
 
   return retval;
 }
 
 /*
@@ -264,21 +266,21 @@ done for each element and a cell array i
 @seealso{regexprep, strfind, findstr}\n\
 @end deftypefn")
 {
   octave_value retval;
   int nargin = args.length ();
 
   if (nargin == 3)
     {
-      octave_value argstr = args(0), argp = args(1), argr = args(2);
-      if (argp.is_string () && argr.is_string ())
+      octave_value argstr = args(0), argpat = args(1), argrep = args(2);
+      if (argpat.is_string () && argrep.is_string ())
         {
-          const Array<char> pat = argp.char_array_value ();
-          const Array<char> rep = argr.char_array_value ();
+          const Array<char> pat = argpat.char_array_value ();
+          const Array<char> rep = argrep.char_array_value ();
 
           OCTAVE_LOCAL_BUFFER (octave_idx_type, table, UCHAR_MAX);
           qs_preprocess (pat, table);
 
           if (argstr.is_string ())
             retval = qs_replace (argstr.char_array_value (), pat, rep, table);
           else if (argstr.is_cell ())
             {
@@ -298,18 +300,20 @@ done for each element and a cell array i
                     }
                 }
 
               retval = retc;
             }
           else
             error ("strrep: first argument must be a string or cell array of strings");
         }
+      else if (argpat.is_cell () || argrep.is_cell ())
+        retval = do_simple_cellfun (Fstrrep, "strrep", args);
       else
-        error ("strrep: 2rd and 3rd arguments must be strings");
+        error ("strrep: x and y arguments must be strings or cell arrays of strings");
     }
   else
     print_usage ();
 
   return retval;
 }
 
 /*
diff --git a/src/oct-obj.cc b/src/oct-obj.cc
--- a/src/oct-obj.cc
+++ b/src/oct-obj.cc
@@ -183,16 +183,29 @@ octave_value_list::all_scalars (void) co
   octave_idx_type n = length (), i;
 
   for (i = 0; i < n && elem (i).is_string (); i++) ;
   
   return i == n;
 }
 
 bool
+octave_value_list::any_cell (void) const
+{
+  bool retval = false;
+  octave_idx_type n = length ();
+
+  for (octave_idx_type i = 0; i < n; i++)
+    if (retval = elem (i).is_cell ())
+      break;
+  
+  return retval;
+}
+
+bool
 octave_value_list::has_magic_colon (void) const
 {
   octave_idx_type n = length ();
 
   for (octave_idx_type i = 0; i < n; i++)
     if (elem(i).is_magic_colon ())
       return true;
 
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -132,16 +132,18 @@ public:
   octave_value_list
   splice (octave_idx_type offset, octave_idx_type len,
 	  const octave_value_list& lst = octave_value_list ()) const;
 
   bool all_strings_p (void) const;
 
   bool all_scalars (void) const;
 
+  bool any_cell (void) const;
+
   bool has_magic_colon (void) const;
 
   string_vector make_argv (const std::string& = std::string()) const;
 
   void stash_name_tags (const string_vector& nm) { names = nm; }
 
   string_vector name_tags (void) const { return names; }
 
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -1392,13 +1392,105 @@ subsequent indexing will not perform the
         {
           retval = false;
         }
     }
 
   return retval;
 }
 
+octave_value_list
+do_simple_cellfun (octave_value_list (*fun) (const octave_value_list&, int),
+                   const char *fun_name, const octave_value_list& args, 
+                   int nargout)
+{
+  octave_value_list new_args = args, retval;
+  int nargin = args.length ();
+  OCTAVE_LOCAL_BUFFER (bool, iscell, nargin);
+  OCTAVE_LOCAL_BUFFER (Cell, cells, nargin);
+  OCTAVE_LOCAL_BUFFER (Cell, rcells, nargout);
+
+  const Cell *ccells = cells;
+
+  octave_idx_type numel = 1;
+  dim_vector dims (1, 1);
+
+  for (int i = 0; i < nargin; i++)
+    {
+      octave_value arg = new_args(i);
+      iscell[i] = arg.is_cell ();
+      if (iscell[i])
+        {
+          cells[i] = arg.cell_value ();
+          octave_idx_type n = ccells[i].numel ();
+          if (n == 1)
+            { 
+              iscell[i] = false;
+              new_args(i) = ccells[i](0);
+            }
+          else if (numel == 1)
+            {
+              numel = n;
+              dims = ccells[i].dims ();
+            } 
+          else if (dims != ccells[i].dims ())
+            {
+              error ("%s: cell arguments must have matching sizes", fun_name);
+              break;
+            }
+        }
+    }
+
+  if (! error_state)
+    {
+      for (int i = 0; i < nargout; i++)
+        rcells[i].clear (dims);
+
+      for (octave_idx_type j = 0; j < numel; j++)
+        {
+          for (int i = 0; i < nargin; i++)
+            if (iscell[i])
+              new_args(i) = ccells[i](j);
+
+          OCTAVE_QUIT;
+
+          const octave_value_list tmp = fun (new_args, nargout);
+
+          if (tmp.length () < nargout)
+            {
+              error ("%s: do_simple_cellfun: internal error", fun_name);
+              break;
+            }
+          else
+            {
+              for (int i = 0; i < nargout; i++)
+                rcells[i](j) = tmp(i);
+            }
+        }
+    }
+
+  if (! error_state)
+    {
+      retval.resize (nargout);
+      for (int i = 0; i < nargout; i++)
+        retval(i) = rcells[i];
+    }
+
+  return retval;
+}
+
+octave_value
+do_simple_cellfun (octave_value_list (*fun) (const octave_value_list&, int),
+                   const char *fun_name, const octave_value_list& args)
+{
+  octave_value retval;
+  const octave_value_list tmp = do_simple_cellfun (fun, fun_name, args, 1);
+  if (tmp.length () > 0)
+    retval = tmp(0);
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -121,15 +121,25 @@ extern OCTINTERP_API void octave_sleep (
 
 extern "C" OCTINTERP_API void octave_sleep (unsigned int seconds);
 
 extern "C" OCTINTERP_API void octave_usleep (unsigned int useconds);
 
 extern "C" OCTINTERP_API int
 octave_raw_vsnprintf (char *buf, size_t n, const char *fmt, va_list args);
 
+extern OCTINTERP_API
+octave_value_list
+do_simple_cellfun (octave_value_list (*fun) (const octave_value_list&, int),
+                   const char *fun_name, const octave_value_list& args, 
+                   int nargout);
+
+extern OCTINTERP_API
+octave_value
+do_simple_cellfun (octave_value_list (*fun) (const octave_value_list&, int),
+                   const char *fun_name, const octave_value_list& args);
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
