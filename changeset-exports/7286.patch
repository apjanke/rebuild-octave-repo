# HG changeset patch
# User jwe
# Date 1197392259 0
#      Tue Dec 11 16:57:39 2007 +0000
# Node ID c0c6aa5afff45f197cc93dd5993b5ee9f53f84ba
# Parent  c8d362c69013b0624bd3ee22ea142171fe5d67e4
[project @ 2007-12-11 16:52:56 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,13 @@
+2007-12-11  David Bateman  <dbateman@free.fr>
+
+	* plot/__plt_get_axis_arg__.m: Ignore integer valued handles as
+	object handles are all now non integer.
+
 2007-12-10  John W. Eaton  <jwe@octave.org>
 
 	* plot/sombrero.m, plot/peaks.m: Use surf instead of mesh.
 
 	* general/issymmetric.m: Use ' instead of .' for compatibility
 	with previous versions of Octave.
 	* general/ishermitian.m: Delete.
 	* general/Makefile.in (SOURCES): Remove ishermitian.m from the list.
diff --git a/scripts/plot/__plt_get_axis_arg__.m b/scripts/plot/__plt_get_axis_arg__.m
--- a/scripts/plot/__plt_get_axis_arg__.m
+++ b/scripts/plot/__plt_get_axis_arg__.m
@@ -25,34 +25,37 @@ function [h, varargin, narg] = __plt_get
   if (islogical (caller))
     nogca = caller;
     caller = varargin{1};
     varargin(1) = [];
   else
     nogca = false;
   endif
 
-  if (nargin > 1 && length (varargin) > 0 && ishandle (varargin{1}))
+  ## Figure handles are integers, but object handles are non integer,
+  ## therefore ignore integer scalars.
+  if (nargin > 1 && length (varargin) > 0 && ishandle (varargin{1})
+      && floor(varargin{1}) != varargin{1})
     tmp = varargin{1};
     obj = get (tmp);
     if (strcmp (obj.type, "axes") || strcmp (obj.type, "hggroup"))
       h = ancestor (tmp, "axes");
       varargin(1) = [];
       if (isempty (varargin))
 	varargin = {};
       endif
     else
       error ("%s: expecting first argument to be axes handle", caller);
     endif
   else
     f = get (0, "currentfigure");
     if (isempty (f))
       h = [];
     else
-      h = get (f, 'currentaxes');
+      h = get (f, "currentaxes");
     endif
     if (isempty (h))
       if (nogca)
 	h = NaN;
       else
 	h = gca ();
       endif
     endif
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,17 @@
+2007-12-11  David Bateman  <dbateman@free.fr>
+
+	* graphics.cc (axes::properties::properties):
+	Initialize xcolor, ycolor, and zcolor to (0, 0, 0).
+
+	* graphics.h.in (gh_manager::next_handle): Now double.
+	* graphics.cc (gh_manager::get_handle, gh_manager::gh_manager):
+	Set fractional part of next_handle to a random value.
+
 2007-12-10  John W. Eaton  <jwe@octave.org>
 
 	* ov-cell.cc (octave_cell::all_strings): Handle empty elements.
 	Handle N-d cell arrays.
 
 	* DLD-FUNCTIONS/fsolve.cc (Ffsolve):
 	For compatibility, return [x, fval, info] instead of [x, info, msg].
  	Move tests here from test/test_nonlin.m.
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -21,16 +21,17 @@ along with Octave; see the file COPYING.
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cctype>
 #include <cfloat>
+#include <cstdlib>
 
 #include <algorithm>
 #include <list>
 #include <map>
 #include <set>
 #include <string>
 
 #include "defun.h"
@@ -449,17 +450,23 @@ gh_manager::get_handle (const std::strin
       free_list_iterator p = handle_free_list.begin ();
 
       if (p != handle_free_list.end ())
 	{
 	  retval = *p;
 	  handle_free_list.erase (p);
 	}
       else
-	retval = next_handle--;
+	{
+	  static double maxrand = RAND_MAX + 2.0;
+
+	  retval = graphics_handle (next_handle);
+
+	  next_handle = trunc (next_handle) - 1.0 - (rand () + 1.0) / maxrand;
+	}
     }
 
   return retval;
 }
 
 void
 gh_manager::do_free (const graphics_handle& h)
 {
@@ -1075,17 +1082,17 @@ default_colororder (void)
   retval(6,0) = 0.25;
   retval(6,1) = 0.25;
   retval(6,2) = 0.25;
 
   return retval;
 }
 
 axes::properties::properties (const graphics_handle& mh,
-					const graphics_handle& p)
+			      const graphics_handle& p)
   : base_properties (go_name, mh, p),
     position (Matrix ()),
     title (octave_NaN),
     box ("on"),
     key ("off"),
     keybox ("off"),
     keypos (1),
     colororder (default_colororder ()),
@@ -1115,20 +1122,20 @@ axes::properties::properties (const grap
     ytickmode ("auto"),
     ztickmode ("auto"),
     xticklabel (""),
     yticklabel (""),
     zticklabel (""),
     xticklabelmode ("auto"),
     yticklabelmode ("auto"),
     zticklabelmode ("auto"),
-    color (color_values(0, 0, 0), radio_values ("flat|none|interp")),
-    xcolor (),
-    ycolor (),
-    zcolor (),
+    color (color_values (0, 0, 0), radio_values ("flat|none|interp")),
+    xcolor (color_values (0, 0, 0)),
+    ycolor (color_values (0, 0, 0)),
+    zcolor (color_values (0, 0, 0)),
     xscale (radio_values ("{linear}|log")),
     yscale (radio_values ("{linear}|log")),
     zscale (radio_values ("{linear}|log")),
     xdir ("normal"),
     ydir ("normal"),
     zdir ("normal"),
     xaxislocation ("bottom"),
     yaxislocation ("left"),
@@ -2551,17 +2558,17 @@ patch::properties::properties (const gra
     xdata (Matrix ()),
     ydata (Matrix ()),
     zdata (Matrix ()),
     cdata (Matrix ()),
     faces (Matrix ()),
     vertices (Matrix ()),
     facecolor (radio_values ("{flat}|none|interp")),
     facealpha (1.0),
-    edgecolor (color_values(0, 0, 0), radio_values ("flat|none|interp")),
+    edgecolor (color_values (0, 0, 0), radio_values ("flat|none|interp")),
     linestyle ("-"),
     linewidth (0.5),
     marker ("none"),
     markeredgecolor ("auto"),
     markerfacecolor ("none"),
     markersize (1),
     keylabel (""),
     interpreter (radio_values ("{tex}|none|latex"))
@@ -2748,17 +2755,17 @@ surface::properties::properties (const g
 				 const graphics_handle& p)
   : base_properties (go_name, mh, p),
     xdata (Matrix ()),
     ydata (Matrix ()),
     zdata (Matrix ()),
     cdata (Matrix ()),
     facecolor (radio_values ("{flat}|none|interp")),
     facealpha (1.0),
-    edgecolor (color_values(0, 0, 0), radio_values ("flat|none|interp")),
+    edgecolor (color_values (0, 0, 0), radio_values ("flat|none|interp")),
     linestyle ("-"),
     linewidth (0.5),
     marker ("none"),
     markeredgecolor ("auto"),
     markerfacecolor ("none"),
     markersize (1),
     keylabel (""),
     interpreter (radio_values ("{tex}|none|latex"))
@@ -2941,18 +2948,21 @@ base_graphics_object::get_default (const
 octave_value
 base_graphics_object::get_factory_default (const caseless_str& name) const
 {
   graphics_object parent_obj = gh_manager::get_object (0);
 
   return parent_obj.get_factory_default (type () + name);
 }
 
+// We use a random value for the handle to avoid issues with plots and
+// scalar values for the first argument.
 gh_manager::gh_manager (void)
-  : handle_map (), handle_free_list (), next_handle (-1)
+  : handle_map (), handle_free_list (),
+    next_handle (-1.0 - (rand () + 1.0) / (RAND_MAX + 2.0))
 {
   handle_map[0] = graphics_object (new root_figure ());
 }
 
 graphics_handle
 gh_manager::do_make_graphics_handle (const std::string& go_name,
 				     const graphics_handle& p)
 {
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -2135,17 +2135,17 @@ private:
 
   // A map of handles to graphics objects.
   std::map<graphics_handle, graphics_object> handle_map;
 
   // The available graphics handles.
   std::set<graphics_handle> handle_free_list;
 
   // The next handle available if handle_free_list is empty.
-  graphics_handle next_handle;
+  double next_handle;
 
   // The allocated figure handles.  Top of the stack is most recently
   // created.
   std::list<graphics_handle> figure_list;
 
   graphics_handle get_handle (const std::string& go_name);
 
   void do_free (const graphics_handle& h);
