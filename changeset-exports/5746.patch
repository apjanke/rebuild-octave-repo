# HG changeset patch
# User jwe
# Date 1144356391 0
#      Thu Apr 06 20:46:31 2006 +0000
# Node ID e4e93452fd3e7a18cd27a6dffbb7ef6ac3bb928b
# Parent  0559ebb94bf0ce1ba10d9bb38da98093b9bb9b01
[project @ 2006-04-06 20:46:31 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2006-04-06  Olli Saarela  <olli.saarela@kcl.fi>
+
+	* plot/hist.m: Ignore NaN in inputs.
+
 2006-04-06  Keith Goodman  <kwgoodman@gmail.com>
 
 	* miscellaneous/mkoctfile.m: Doc string fix.
 
 2006-04-05  John W. Eaton  <jwe@octave.org>
 
 	* plot/__plt2__.m: Return data = [] and fmtstr = "" if x1 and x2
 	are both empty.
diff --git a/scripts/plot/hist.m b/scripts/plot/hist.m
--- a/scripts/plot/hist.m
+++ b/scripts/plot/hist.m
@@ -92,27 +92,27 @@ function [nn, xx] = hist (y, x, norm)
   cutoff = (x(1:end-1,:) + x(2:end,:)) / 2;
   n = rows (x);
   if (n < 30 && columns (x) == 1)
     ## The following algorithm works fastest for n less than about 30.
     chist = zeros (n+1, columns (y));
     for i = 1:n-1
       chist(i+1,:) = sum (y <= cutoff(i));
     endfor
-    chist(n+1,:) = rows (y);
+    chist(n+1,:) = sum (! isnan (y));
   else
     ## The following algorithm works fastest for n greater than about 30.
     ## Put cutoff elements between boundaries, integrate over all
     ## elements, keep totals at boundaries.
     [s, idx] = sort ([y; cutoff]);
     len = rows (y);
     chist = cumsum (idx <= len);
     t1 = zeros (1, columns (y));
     t2 = reshape (chist(idx > len), size (cutoff));
-    t3 = chist(end,:);
+    t3 = chist(end,:) - sum (isnan (y));
     chist = [t1; t2; t3];
   endif
 
   freq = diff (chist);
 
   if (nargin == 3)
     ## Normalise the histogram.
     freq = freq / rows (y) * norm;
@@ -136,16 +136,20 @@ endfunction
 %!  [nn,xx]=hist([1:4],3);
 %!  assert(xx, [1.5,2.5,3.5]);
 %!  assert(nn, [2,1,1]);
 %!test
 %!  [nn,xx]=hist([1:4]',3);
 %!  assert(xx, [1.5,2.5,3.5]);
 %!  assert(nn, [2,1,1]);
 %!test
+%!  [nn,xx]=hist([1 1 1 NaN NaN NaN 2 2 3],[1 2 3]);
+%!  assert(xx, [1,2,3]);
+%!  assert(nn, [3,2,1]);
+%!test
 %!  [nn,xx]=hist([[1:4]',[1:4]'],3);
 %!  assert(xx, [[1.5,2.5,3.5]',[1.5,2.5,3.5]']);
 %!  assert(nn, [[2,1,1]',[2,1,1]']);
 %!assert(hist(1,1),1);
 %!test
 %!  for n = [10, 30, 100, 1000]
 %!    assert( sum(hist([1:n], n)), n );
 %!    assert( sum(hist([1:n], [2:n-1])), n);
