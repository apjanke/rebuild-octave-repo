# HG changeset patch
# User jwe
# Date 825900014 0
#      Mon Mar 04 00:40:14 1996 +0000
# Node ID 95e952f72d66d5a1c6b779f1a0227782741ef84d
# Parent  c1ffef39e94af964c8f936a3bb0b5f07a4085e42
[project @ 1996-03-04 00:33:32 by jwe]

diff --git a/liboctave/Array-C.cc b/liboctave/Array-C.cc
--- a/liboctave/Array-C.cc
+++ b/liboctave/Array-C.cc
@@ -15,16 +15,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 // Instantiate Arrays of Complex values.
 
 #include "oct-cmplx.h"
 
 #include "Array.h"
 #include "Array.cc"
 
 template class Array<Complex>;
diff --git a/liboctave/Array-ch.cc b/liboctave/Array-ch.cc
--- a/liboctave/Array-ch.cc
+++ b/liboctave/Array-ch.cc
@@ -15,16 +15,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 // Instantiate Arrays of char values.
 
 #include "Array.h"
 #include "Array.cc"
 
 template class Array<char>;
 
 template void assign (Array<char>&, const Array<char>&);
diff --git a/liboctave/Array-d.cc b/liboctave/Array-d.cc
--- a/liboctave/Array-d.cc
+++ b/liboctave/Array-d.cc
@@ -15,16 +15,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 // Instantiate Arrays of double values.
 
 #include "Array.h"
 #include "Array.cc"
 
 template class Array<double>;
 
 template void assign (Array<double>&, const Array<double>&);
diff --git a/liboctave/Array-i.cc b/liboctave/Array-i.cc
--- a/liboctave/Array-i.cc
+++ b/liboctave/Array-i.cc
@@ -15,16 +15,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 // Instantiate Arrays of integer values.
 
 #include "Array.h"
 #include "Array.cc"
 
 template class Array<int>;
 
 template void assign (Array<int>&, const Array<int>&);
diff --git a/liboctave/Array-s.cc b/liboctave/Array-s.cc
--- a/liboctave/Array-s.cc
+++ b/liboctave/Array-s.cc
@@ -15,16 +15,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 // Instantiate Arrays of short int values.
 
 #include "Array.h"
 #include "Array.cc"
 
 template class Array<short>;
 
 template void assign (Array<short>&, const Array<short>&);
diff --git a/liboctave/Array-str.cc b/liboctave/Array-str.cc
--- a/liboctave/Array-str.cc
+++ b/liboctave/Array-str.cc
@@ -15,16 +15,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 // Instantiate Arrays of strings.
 
 #include "Array.h"
 #include "Array.cc"
 
 #include <string>
 
 template class Array<string>;
diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -89,57 +89,16 @@ Array<T>::operator = (const Array<T>& a)
   idx_count = 0;
   idx = 0;
 #endif
 
   return *this;
 }
 
 template <class T>
-T&
-Array<T>::checkelem (int n)
-{
-  if (n < 0 || n >= rep->length ())
-    {
-      (*current_liboctave_error_handler) ("range error");
-      static T foo;
-      return foo;
-    }
-  return elem (n);
-}
-
-template <class T>
-T
-Array<T>::elem (int n) const
-{
-  return rep->elem (n);
-}
-
-template <class T>
-T
-Array<T>::checkelem (int n) const
-{
-  if (n < 0 || n >= rep->length ())
-    {
-      (*current_liboctave_error_handler) ("range error");
-      T foo;
-      static T *bar = &foo;
-      return foo;
-    }
-  return elem (n);
-}
-
-template <class T>
-T
-Array<T>::operator () (int n) const
-{
-  return checkelem (n);
-}
-
-template <class T>
 void
 Array<T>::resize (int n)
 {
   if (n < 0)
     {
       (*current_liboctave_error_handler) ("can't resize to negative dimension");
       return;
     }
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -77,16 +77,25 @@ private:
     T elem (int n) const { return data[n]; }
 
     void qsort (int (*compare) (const void *, const void *))
       {
 	::qsort (data, len, sizeof (T), compare);
       }
   };
 
+  void make_unique (void)
+    {
+      if (rep->count > 1)
+	{
+	  --rep->count;
+	  rep = new ArrayRep (*rep);
+	}
+    }
+
 #ifdef HEAVYWEIGHT_INDEXING
   idx_vector *idx;
   int max_indices;
   int idx_count;
 #endif
 
 protected:
 
@@ -143,34 +152,65 @@ public:
 
   ~Array (void);
 
   Array<T>& operator = (const Array<T>& a);
 
   int capacity (void) const { return rep->length (); }
   int length (void) const { return rep->length (); }
 
+  // XXX FIXME XXX -- would be nice to fix this so that we don't
+  // unnecessarily force a copy, but that is not so easy, and I see no
+  // clean way to do it.
+
   T& elem (int n)
     {
-      if (rep->count > 1)
-	{
-	  --rep->count;
-	  rep = new ArrayRep (*rep);
-	}
+      make_unique ();
       return rep->elem (n);
     }
 
-  T& checkelem (int n);
+  T& Array<T>::checkelem (int n)
+    {
+      if (n < 0 || n >= rep->length ())
+	{
+	  (*current_liboctave_error_handler) ("range error");
+	  static T foo;
+	  return foo;
+	}
+      else
+	return elem (n);
+    }
+
+#if defined (NO_BOUNDS_CHECKING)
+  T& operator () (int n) { return elem (n); }
+#else
   T& operator () (int n) { return checkelem (n); }
+#endif
+
+  T Array<T>::elem (int n) const { return rep->elem (n); }
 
-  T elem (int n) const;
-  T checkelem (int n) const;
-  T operator () (int n) const;
+  T Array<T>::checkelem (int n) const
+    {
+      if (n < 0 || n >= rep->length ())
+	{
+	  (*current_liboctave_error_handler) ("range error");
+	  T foo;
+	  static T *bar = &foo;
+	  return foo;
+	}
+      return elem (n);
+    }
 
-  // No checking.
+#if defined (NO_BOUNDS_CHECKING)
+  T Array<T>::operator () (int n) const { return elem (n); }
+#else
+  T Array<T>::operator () (int n) const { return checkelem (n); }
+#endif
+
+  // No checking, even for multiple references, ever.
 
   T& xelem (int n) { return rep->elem (n); }
   T xelem (int n) const { return rep->elem (n); }
 
   void resize (int n);
   void resize (int n, const T& val);
 
   const T *data (void) const { return rep->data; }
diff --git a/liboctave/Array2.cc b/liboctave/Array2.cc
--- a/liboctave/Array2.cc
+++ b/liboctave/Array2.cc
@@ -40,64 +40,16 @@ Software Foundation, 59 Temple Place - S
 #include "Array2-idx.h"
 #endif
 
 #include "lo-error.h"
 
 // Two dimensional array class.
 
 template <class T>
-T&
-Array2<T>::checkelem (int i, int j)
-{
-  if (i < 0 || j < 0 || i >= d1 || j >= d2)
-    {
-      (*current_liboctave_error_handler) ("range error");
-      static T foo;
-      return foo;
-    }
-  return Array<T>::elem (d1*j+i);
-}
-
-template <class T>
-T
-Array2<T>::elem (int i, int j) const
-{
-  return Array<T>::elem (d1*j+i);
-}
-
-template <class T>
-T
-Array2<T>::checkelem (int i, int j) const
-{
-  if (i < 0 || j < 0 || i >= d1 || j >= d2)
-    {
-      (*current_liboctave_error_handler) ("range error");
-      T foo;
-      static T *bar = &foo;
-      return foo;
-    }
-  return Array<T>::elem (d1*j+i);
-}
-
-template <class T>
-T
-Array2<T>::operator () (int i, int j) const
-{
-  if (i < 0 || j < 0 || i >= d1 || j >= d2)
-    {
-      (*current_liboctave_error_handler) ("range error");
-      T foo;
-      static T *bar = &foo;
-      return foo;
-    }
-  return Array<T>::elem (d1*j+i);
-}
-
-template <class T>
 void
 Array2<T>::resize (int r, int c)
 {
   if (r < 0 || c < 0)
     {
       (*current_liboctave_error_handler) ("can't resize to negative dimension");
       return;
     }
diff --git a/liboctave/Array2.h b/liboctave/Array2.h
--- a/liboctave/Array2.h
+++ b/liboctave/Array2.h
@@ -111,24 +111,57 @@ public:
   int dim1 (void) const { return d1; }
   int dim2 (void) const { return d2; }
 
   int rows (void) const { return d1; }
   int cols (void) const { return d2; }
   int columns (void) const { return d2; }
 
   T& elem (int i, int j) { return Array<T>::elem (d1*j+i); }
-  T& checkelem (int i, int j);
+
+  T& checkelem (int i, int j)
+    {
+      if (i < 0 || j < 0 || i >= d1 || j >= d2)
+	{
+	  (*current_liboctave_error_handler) ("range error");
+	  static T foo;
+	  return foo;
+	}
+      else
+	return elem (i, j);
+    }
+
+#if defined (NO_BOUNDS_CHECKING)
+  T& operator () (int i, int j) { return elem (i, j); }
+#else
   T& operator () (int i, int j) { return checkelem (i, j); }
+#endif
+
+  T elem (int i, int j) const { return Array<T>::elem (d1*j+i); }
 
-  T elem (int i, int j) const;
-  T checkelem (int i, int j) const;
-  T operator () (int i, int j) const;
+  T checkelem (int i, int j) const
+    {
+      if (i < 0 || j < 0 || i >= d1 || j >= d2)
+	{
+	  (*current_liboctave_error_handler) ("range error");
+	  T foo;
+	  static T *bar = &foo;
+	  return foo;
+	}
+      else
+	return elem (i, j);
+    }
 
-  // No checking.
+#if defined (NO_BOUNDS_CHECKING)
+  T operator () (int i, int j) const { return elem (i, j); }
+#else
+  T operator () (int i, int j) const { return checkelem (i, j); }
+#endif
+
+  // No checking of any kind, ever.
 
   T& xelem (int i, int j) { return Array<T>::xelem (d1*j+i); }
   T xelem (int i, int j) const { return Array<T>::xelem (d1*j+i); }
 
   void resize (int n, int m);
   void resize (int n, int m, const T& val);
 
   Array2<T>& insert (const Array2<T>& a, int r, int c);
diff --git a/liboctave/MArray-C.cc b/liboctave/MArray-C.cc
--- a/liboctave/MArray-C.cc
+++ b/liboctave/MArray-C.cc
@@ -15,16 +15,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 // Instantiate MArrays of Complex values.
 
 #include "oct-cmplx.h"
 
 #include "MArray.h"
 #include "MArray.cc"
 
 template class MArray<Complex>;
diff --git a/liboctave/MArray-ch.cc b/liboctave/MArray-ch.cc
--- a/liboctave/MArray-ch.cc
+++ b/liboctave/MArray-ch.cc
@@ -15,16 +15,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 // Instantiate MArrays of char values.
 
 #include "MArray.h"
 #include "MArray.cc"
 
 template class MArray<char>;
 
 INSTANTIATE_MARRAY_FRIENDS (char)
diff --git a/liboctave/MArray-d.cc b/liboctave/MArray-d.cc
--- a/liboctave/MArray-d.cc
+++ b/liboctave/MArray-d.cc
@@ -15,16 +15,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 // Instantiate MArrays of double values.
 
 #include "MArray.h"
 #include "MArray.cc"
 
 template class MArray<double>;
 
 INSTANTIATE_MARRAY_FRIENDS (double)
diff --git a/liboctave/MArray-i.cc b/liboctave/MArray-i.cc
--- a/liboctave/MArray-i.cc
+++ b/liboctave/MArray-i.cc
@@ -15,16 +15,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 // Instantiate MArrays of int values.
 
 #include "MArray.h"
 #include "MArray.cc"
 
 template class MArray<int>;
 
 INSTANTIATE_MARRAY_FRIENDS (int)
diff --git a/liboctave/MArray-s.cc b/liboctave/MArray-s.cc
--- a/liboctave/MArray-s.cc
+++ b/liboctave/MArray-s.cc
@@ -15,16 +15,20 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 // Instantiate MArrays of short int values.
 
 #include "MArray.h"
 #include "MArray.cc"
 
 template class MArray<short>;
 
 INSTANTIATE_MARRAY_FRIENDS (short)
diff --git a/liboctave/MDiagArray2.cc b/liboctave/MDiagArray2.cc
--- a/liboctave/MDiagArray2.cc
+++ b/liboctave/MDiagArray2.cc
@@ -42,17 +42,18 @@ MDiagArray2<T>&
 operator += (MDiagArray2<T>& a, const MDiagArray2<T>& b)
 {
   int r = a.rows ();
   int c = a.cols ();
   if (r != b.rows () || c != b.cols ())
     {
       (*current_liboctave_error_handler)
 	("nonconformant array operator += attempted");
-      return MDiagArray2<T> ();
+      static MDiagArray2<T> foo;
+      return foo;
     }
   else
     {
       int l = a.length ();
       DO_VV_OP2 (+=);
     }
   return a;
 }
@@ -62,17 +63,18 @@ MDiagArray2<T>&
 operator -= (MDiagArray2<T>& a, const MDiagArray2<T>& b)
 {
   int r = a.rows ();
   int c = a.cols ();
   if (r != b.rows () || c != b.cols ())
     {
       (*current_liboctave_error_handler)
 	("nonconformant array operator -= attempted");
-      return MDiagArray2<T> ();
+      static MDiagArray2<T> foo;
+      return foo;
     }
   else
     {
       int l = a.length ();
       DO_VV_OP2 (-=);
     }
   return a;
 }
diff --git a/liboctave/pathsearch.cc b/liboctave/pathsearch.cc
--- a/liboctave/pathsearch.cc
+++ b/liboctave/pathsearch.cc
@@ -126,17 +126,17 @@ dir_path::find_all (const string& nm)
       int count = 0;
       kpse_string *ptr = tmp;
       while (*ptr++)
 	count++;
 
       retval.resize (count);
 
       for (int i = 0; i < count; i++)
-	retval[i] = *tmp[i];
+	retval[i] = tmp[i];
     }
 
   return retval;
 }
 
 void
 dir_path::init (void)
 {
