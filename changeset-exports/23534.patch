# HG changeset patch
# User Rik <rik@octave.org>
# Date 1495904372 25200
#      Sat May 27 09:59:32 2017 -0700
# Node ID b6498c088fcac0f5cebb7755b57af1c62a2b79c3
# Parent  8edbc923a7dc6f5fdc533e584ad7229db937bef7
maint: Don't write '> >' for declaration of templates that use templates.
C++11 parser allows more readable "template1<template2<TYPENAME>>" syntax
rather than "template1<template2<TYPENAME> >".

* cellfun.cc, data.cc, oct-stream.cc, octave-link.h, pr-output.cc, sqrtm.cc,
symtab.cc, symtab.h, tril.cc, ov-cell.h, ov-classdef.cc, ov-classdef.h,
ov-intx.h, ov.cc, bp-table.h, jit-typeinfo.h, jit-util.h, pt-jit.h,
CColVector.cc, CMatrix.cc, CNDArray.cc, CRowVector.cc, MatrixType.cc,
Sparse.cc, fCColVector.cc, fCMatrix.cc, fCNDArray.cc, fCRowVector.cc,
idx-vector.h, lo-traits.h: Replace '> >' with '>>' for double templates.

diff --git a/libinterp/corefcn/cellfun.cc b/libinterp/corefcn/cellfun.cc
--- a/libinterp/corefcn/cellfun.cc
+++ b/libinterp/corefcn/cellfun.cc
@@ -1967,17 +1967,17 @@ do_mat2cell_nd (const ArrayND& a, const 
   for (int i = 0; i < nd; i++)
     {
       idx[i] = xidx + idxtot;
       prepare_idx (idx[i], i, nd, d);
       idxtot += nidx[i];
     }
 
   OCTAVE_LOCAL_BUFFER_INIT (octave_idx_type, ridx, nd, 0);
-  NoAlias< Array<idx_vector> > ra_idx
+  NoAlias< Array<idx_vector>> ra_idx
     (dim_vector (1, std::max (nd, a.ndims ())), idx_vector::colon);
 
   for (octave_idx_type j = 0; j < retval.numel (); j++)
     {
       octave_quit ();
 
       for (int i = 0; i < nd; i++)
         ra_idx(i) = idx[i][ridx[i]];
diff --git a/libinterp/corefcn/data.cc b/libinterp/corefcn/data.cc
--- a/libinterp/corefcn/data.cc
+++ b/libinterp/corefcn/data.cc
@@ -7672,17 +7672,17 @@ endfor
 
   const Matrix rm = args(1).matrix_value ();
 
   if (rm.rows () != 2 || rm.ndims () != 2)
     error ("repelems: R must be a matrix with two rows");
 
   octave_value x = args(0);
 
-  NoAlias< Array<octave_idx_type> > r (rm.dims ());
+  NoAlias< Array<octave_idx_type>> r (rm.dims ());
 
   for (octave_idx_type i = 0; i < rm.numel (); i++)
     {
       octave_idx_type rx = rm(i);
       if (static_cast<double> (rx) != rm(i))
         error ("repelems: R must be a matrix of integers");
 
       r(i) = rx;
diff --git a/libinterp/corefcn/oct-stream.cc b/libinterp/corefcn/oct-stream.cc
--- a/libinterp/corefcn/oct-stream.cc
+++ b/libinterp/corefcn/oct-stream.cc
@@ -6720,17 +6720,17 @@ convert_ints (const T *data, void *conv_
 template <typename T>
 class ultimate_element_type
 {
 public:
   typedef T type;
 };
 
 template <typename T>
-class ultimate_element_type<octave_int<T> >
+class ultimate_element_type<octave_int<T>>
 {
 public:
   typedef T type;
 };
 
 template <typename T>
 static bool
 convert_data (const T *data, void *conv_data, octave_idx_type n_elts,
diff --git a/libinterp/corefcn/octave-link.h b/libinterp/corefcn/octave-link.h
--- a/libinterp/corefcn/octave-link.h
+++ b/libinterp/corefcn/octave-link.h
@@ -190,17 +190,17 @@ public:
                 const std::list<float>& nc,
                 const std::list<std::string>& defaults)
   {
     return enabled ()
            ? instance->do_input_dialog (prompt, title, nr, nc, defaults)
            : std::list<std::string> ();
   }
 
-  typedef std::list<std::pair<std::string, std::string> > filter_list;
+  typedef std::list<std::pair<std::string, std::string>> filter_list;
 
   static std::list<std::string>
   file_dialog (const filter_list& filter, const std::string& title,
                const std::string& filename, const std::string& dirname,
                const std::string& multimode)
   {
     return enabled ()
            ? instance->do_file_dialog (filter, title, filename, dirname,
diff --git a/libinterp/corefcn/pr-output.cc b/libinterp/corefcn/pr-output.cc
--- a/libinterp/corefcn/pr-output.cc
+++ b/libinterp/corefcn/pr-output.cc
@@ -3099,17 +3099,17 @@ octave_print_internal_template (std::ost
 {
   if (plus_format)
     {
       pr_plus_format (os, val);
     }
   else
     {
       if (free_format)
-        os << typename octave_print_conv<octave_int<T> >::print_conv_type (val);
+        os << typename octave_print_conv<octave_int<T>>::print_conv_type (val);
       else
         pr_int (os, val);
     }
 }
 
 #define PRINT_INT_SCALAR_INTERNAL(TYPE)                                 \
   OCTINTERP_API void                                                    \
   octave_print_internal (std::ostream& os, const octave_int<TYPE>& val, bool dummy) \
diff --git a/libinterp/corefcn/sqrtm.cc b/libinterp/corefcn/sqrtm.cc
--- a/libinterp/corefcn/sqrtm.cc
+++ b/libinterp/corefcn/sqrtm.cc
@@ -229,20 +229,20 @@ Mathematics, Manchester, England, Januar
       retval(2) = -1.0;
     }
 
   if (arg.is_diag_matrix ())
     // sqrtm of a diagonal matrix is just sqrt.
     retval(0) = arg.sqrt ();
   else if (arg.is_single_type ())
     retval(0) = do_sqrtm<FloatMatrix, FloatComplexMatrix,
-                         octave::math::schur<FloatComplexMatrix> > (arg);
+                         octave::math::schur<FloatComplexMatrix>> (arg);
   else if (arg.is_numeric_type ())
     retval(0) = do_sqrtm<Matrix, ComplexMatrix,
-                         octave::math::schur<ComplexMatrix> > (arg);
+                         octave::math::schur<ComplexMatrix>> (arg);
 
   if (nargout > 1)
     {
       // This corresponds to generic code
       //
       //   norm (s*s - x, "fro") / norm (x, "fro");
 
       octave_value s = retval(0);
diff --git a/libinterp/corefcn/symtab.cc b/libinterp/corefcn/symtab.cc
--- a/libinterp/corefcn/symtab.cc
+++ b/libinterp/corefcn/symtab.cc
@@ -56,20 +56,20 @@ symbol_table *symbol_table::instance = n
 symbol_table::scope_id_cache *symbol_table::scope_id_cache::instance = nullptr;
 
 std::map<symbol_table::scope_id, symbol_table*> symbol_table::all_instances;
 
 std::map<std::string, octave_value> symbol_table::global_table;
 
 std::map<std::string, symbol_table::fcn_info> symbol_table::fcn_table;
 
-std::map<std::string, std::set<std::string> >
+std::map<std::string, std::set<std::string>>
   symbol_table::class_precedence_table;
 
-std::map<std::string, std::list<std::string> > symbol_table::parent_map;
+std::map<std::string, std::list<std::string>> symbol_table::parent_map;
 
 const symbol_table::scope_id symbol_table::xglobal_scope = 0;
 const symbol_table::scope_id symbol_table::xtop_scope = 1;
 
 symbol_table::scope_id symbol_table::xcurrent_scope = 1;
 
 symbol_table::context_id symbol_table::xcurrent_context = 0;
 
diff --git a/libinterp/corefcn/symtab.h b/libinterp/corefcn/symtab.h
--- a/libinterp/corefcn/symtab.h
+++ b/libinterp/corefcn/symtab.h
@@ -2316,29 +2316,29 @@ private:
   static std::map<scope_id, symbol_table*> all_instances;
 
   // Map from function names to function info (subfunctions, private
   // functions, class constructors, class methods, etc.)
   static std::map<std::string, fcn_info> fcn_table;
 
   // Mape from class names to set of classes that have lower
   // precedence.
-  static std::map<std::string, std::set<std::string> > class_precedence_table;
-
-  typedef std::map<std::string, std::set<std::string> >::const_iterator
+  static std::map<std::string, std::set<std::string>> class_precedence_table;
+
+  typedef std::map<std::string, std::set<std::string>>::const_iterator
     class_precedence_table_const_iterator;
-  typedef std::map<std::string, std::set<std::string> >::iterator
+  typedef std::map<std::string, std::set<std::string>>::iterator
     class_precedence_table_iterator;
 
   // Map from class names to parent class names.
-  static std::map<std::string, std::list<std::string> > parent_map;
-
-  typedef std::map<std::string, std::list<std::string> >::const_iterator
+  static std::map<std::string, std::list<std::string>> parent_map;
+
+  typedef std::map<std::string, std::list<std::string>>::const_iterator
     const_parent_map_iterator;
-  typedef std::map<std::string, std::list<std::string> >::iterator
+  typedef std::map<std::string, std::list<std::string>>::iterator
     parent_map_iterator;
 
   static const scope_id xglobal_scope;
   static const scope_id xtop_scope;
 
   static scope_id xcurrent_scope;
 
   static context_id xcurrent_context;
diff --git a/libinterp/corefcn/tril.cc b/libinterp/corefcn/tril.cc
--- a/libinterp/corefcn/tril.cc
+++ b/libinterp/corefcn/tril.cc
@@ -103,17 +103,17 @@ do_triu (const Array<T>& a, octave_idx_t
           rvec = std::copy (avec, avec + ii, rvec);
           avec += nr;
         }
 
       return r;
     }
   else
     {
-      NoAlias<Array<T> > r (a.dims ());
+      NoAlias<Array<T>> r (a.dims ());
       T *rvec = r.fortran_vec ();
       for (octave_idx_type j = 0; j < nc; j++)
         {
           octave_idx_type ii = std::min (std::max (zero, j + 1 - k), nr);
           std::copy (avec, avec + ii, rvec);
           std::fill (rvec + ii, rvec + nr, T ());
           avec += nr;
           rvec += nr;
diff --git a/libinterp/octave-value/ov-cell.h b/libinterp/octave-value/ov-cell.h
--- a/libinterp/octave-value/ov-cell.h
+++ b/libinterp/octave-value/ov-cell.h
@@ -169,14 +169,14 @@ public:
   // You should not use it anywhere else.
   void * mex_get_data (void) const;
 
 private:
 
   void clear_cellstr_cache (void) const
   { cellstr_cache.reset (); }
 
-  mutable std::unique_ptr<Array<std::string> > cellstr_cache;
+  mutable std::unique_ptr<Array<std::string>> cellstr_cache;
 
   DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
 };
 
 #endif
diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1704,17 +1704,17 @@ cdef_object_scalar::is_constructed_for (
 {
   return (is_constructed ()
           || ctor_list.find (cls) == ctor_list.end ());
 }
 
 bool
 cdef_object_scalar::is_partially_constructed_for (const cdef_class& cls) const
 {
-  std::map< cdef_class, std::list<cdef_class> >::const_iterator it;
+  std::map< cdef_class, std::list<cdef_class>>::const_iterator it;
 
   if (is_constructed ())
     return true;
   else if ((it = ctor_list.find (cls)) == ctor_list.end ()
            || it->second.empty ())
     return true;
 
   for (const auto& cdef_cls : it->second)
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -437,17 +437,17 @@ public:
 
   bool is_constructed (void) const { return ctor_list.empty (); }
 
 protected:
   // Object property values
   octave_scalar_map map;
 
   // Internal/temporary structure used during object construction
-  std::map< cdef_class, std::list<cdef_class> > ctor_list;
+  std::map< cdef_class, std::list<cdef_class>> ctor_list;
 
 protected:
   // Restricted object copying!
   cdef_object_scalar (const cdef_object_scalar& obj)
     : cdef_object_base (obj), map (obj.map), ctor_list (obj.ctor_list) { }
 
 private:
   // No assignment!
diff --git a/libinterp/octave-value/ov-intx.h b/libinterp/octave-value/ov-intx.h
--- a/libinterp/octave-value/ov-intx.h
+++ b/libinterp/octave-value/ov-intx.h
@@ -45,28 +45,28 @@ along with Octave; see the file COPYING.
 #include "errwarn.h"
 
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 
 class
 OCTINTERP_API
 OCTAVE_VALUE_INT_MATRIX_T
-  : public octave_base_int_matrix<intNDArray<OCTAVE_INT_T> >
+  : public octave_base_int_matrix<intNDArray<OCTAVE_INT_T>>
 {
 public:
 
   OCTAVE_VALUE_INT_MATRIX_T (void)
-    : octave_base_int_matrix<intNDArray<OCTAVE_INT_T> > () { }
+    : octave_base_int_matrix<intNDArray<OCTAVE_INT_T>> () { }
 
   OCTAVE_VALUE_INT_MATRIX_T (const intNDArray<OCTAVE_INT_T>& nda)
-    : octave_base_int_matrix<intNDArray<OCTAVE_INT_T> > (nda) { }
+    : octave_base_int_matrix<intNDArray<OCTAVE_INT_T>> (nda) { }
 
   OCTAVE_VALUE_INT_MATRIX_T (const Array<OCTAVE_INT_T>& nda)
-    : octave_base_int_matrix<intNDArray<OCTAVE_INT_T> >
+    : octave_base_int_matrix<intNDArray<OCTAVE_INT_T>>
         (intNDArray<OCTAVE_INT_T> (nda)) { }
 
   ~OCTAVE_VALUE_INT_MATRIX_T (void) = default;
 
   octave_base_value * clone (void) const
   { return new OCTAVE_VALUE_INT_MATRIX_T (*this); }
 
   octave_base_value * empty_clone (void) const
diff --git a/libinterp/octave-value/ov.cc b/libinterp/octave-value/ov.cc
--- a/libinterp/octave-value/ov.cc
+++ b/libinterp/octave-value/ov.cc
@@ -1762,17 +1762,17 @@ octave_value::vector_value (bool force_s
 
   return retval.reshape (make_vector_dims (retval.dims (),
                                            force_vector_conversion,
                                            type_name (), "real vector"));
 }
 
 template <typename T>
 static Array<int>
-convert_to_int_array (const Array<octave_int<T> >& A)
+convert_to_int_array (const Array<octave_int<T>>& A)
 {
   Array<int> retval (A.dims ());
   octave_idx_type n = A.numel ();
 
   for (octave_idx_type i = 0; i < n; i++)
     retval.xelem (i) = octave_int<int> (A.xelem (i));
 
   return retval;
@@ -1831,17 +1831,17 @@ octave_value::int_vector_value (bool req
 
   return retval.reshape (make_vector_dims (retval.dims (),
                                            force_vector_conversion,
                                            type_name (), "integer vector"));
 }
 
 template <typename T>
 static Array<octave_idx_type>
-convert_to_octave_idx_type_array (const Array<octave_int<T> >& A)
+convert_to_octave_idx_type_array (const Array<octave_int<T>>& A)
 {
   Array<octave_idx_type> retval (A.dims ());
   octave_idx_type n = A.numel ();
 
   for (octave_idx_type i = 0; i < n; i++)
     retval.xelem (i) = octave_int<octave_idx_type> (A.xelem (i));
 
   return retval;
diff --git a/libinterp/parse-tree/bp-table.h b/libinterp/parse-tree/bp-table.h
--- a/libinterp/parse-tree/bp-table.h
+++ b/libinterp/parse-tree/bp-table.h
@@ -62,17 +62,17 @@ public:
   typedef intmap::const_iterator const_intmap_iterator;
   typedef intmap::iterator intmap_iterator;
 
   typedef std::map <std::string, intmap> fname_line_map;
 
   typedef fname_line_map::const_iterator const_fname_line_map_iterator;
   typedef fname_line_map::iterator fname_line_map_iterator;
 
-  typedef std::map <std::string, std::list<bp_type> > fname_bp_map;
+  typedef std::map <std::string, std::list<bp_type>> fname_bp_map;
   typedef fname_bp_map::const_iterator const_fname_bp_map_iterator;
   typedef fname_bp_map::iterator fname_bp_map_iterator;
 
   static bool instance_ok (void);
 
   // Add a breakpoint at the nearest executable line.
   static intmap add_breakpoint (const std::string& fname = "",
                                 const intmap& lines = intmap (),
diff --git a/libinterp/parse-tree/jit-typeinfo.h b/libinterp/parse-tree/jit-typeinfo.h
--- a/libinterp/parse-tree/jit-typeinfo.h
+++ b/libinterp/parse-tree/jit-typeinfo.h
@@ -375,17 +375,17 @@ private:
     bool operator () (const signature_vec *lhs, const signature_vec *rhs) const;
   };
 
   typedef std::map<const signature_vec *, jit_function *, signature_cmp>
   generated_map;
 
   mutable generated_map generated;
 
-  std::vector<Array<jit_function> > overloads;
+  std::vector<Array<jit_function>> overloads;
 
   std::string mname;
 };
 
 class
 jit_index_operation : public jit_operation
 {
 public:
diff --git a/libinterp/parse-tree/jit-util.h b/libinterp/parse-tree/jit-util.h
--- a/libinterp/parse-tree/jit-util.h
+++ b/libinterp/parse-tree/jit-util.h
@@ -68,17 +68,17 @@ namespace llvm
   class ConstantFolder;
 
   template <bool preserveNames>
   class IRBuilderDefaultInserter;
 
   template <bool preserveNames, typename T, typename Inserter>
   class IRBuilder;
 
-typedef IRBuilder<true, ConstantFolder, IRBuilderDefaultInserter<true> >
+typedef IRBuilder<true, ConstantFolder, IRBuilderDefaultInserter<true>>
 IRBuilderD;
 }
 
 class octave_base_value;
 class octave_builtin;
 class octave_value;
 class tree;
 class tree_expression;
diff --git a/libinterp/parse-tree/pt-jit.h b/libinterp/parse-tree/pt-jit.h
--- a/libinterp/parse-tree/pt-jit.h
+++ b/libinterp/parse-tree/pt-jit.h
@@ -158,17 +158,17 @@ public:
   void visit_try_catch_command (tree_try_catch_command&);
 
   void visit_unwind_protect_command (tree_unwind_protect_command&);
 
   void visit_while_command (tree_while_command&);
 
   void visit_do_until_command (tree_do_until_command&);
 private:
-  std::vector<std::pair<std::string, bool> > arguments;
+  std::vector<std::pair<std::string, bool>> arguments;
   type_bound_vector bounds;
 
   bool converting_function;
 
   // the scope of the function we are converting, or the current scope
   symbol_table::scope_id scope;
 
   jit_factory factory;
@@ -255,30 +255,30 @@ public:
 
   jit_function convert_function (llvm::Module *module,
                                  const jit_block_list& blocks,
                                  const std::list<jit_value *>& constants,
                                  octave_user_function& fcn,
                                  const std::vector<jit_type *>& args);
 
   // arguments to the llvm::Function for loops
-  const std::vector<std::pair<std::string, bool> >& get_arguments(void) const
+  const std::vector<std::pair<std::string, bool>>& get_arguments(void) const
   { return argument_vec; }
 
 #define JIT_METH(clname)                        \
   virtual void visit (jit_ ## clname&);
 
   JIT_VISIT_IR_CLASSES;
 
 #undef JIT_METH
 private:
   // name -> argument index (used for compiling functions)
   std::map<std::string, int> argument_index;
 
-  std::vector<std::pair<std::string, bool> > argument_vec;
+  std::vector<std::pair<std::string, bool>> argument_vec;
 
   // name -> llvm argument (used for compiling loops)
   std::map<std::string, llvm::Value *> arguments;
 
   bool converting_function;
 
   // only used if we are converting a function
   jit_function creating;
@@ -440,14 +440,14 @@ private:
   void compile (tree_jit& tjit, tree& tee, jit_type *for_bounds = nullptr);
 
   octave_value find (const vmap& extra_vars, const std::string& vname) const;
 
   llvm::ExecutionEngine *engine;
   jited_function function;
   llvm::Function *llvm_function;
 
-  std::vector<std::pair<std::string, bool> > arguments;
+  std::vector<std::pair<std::string, bool>> arguments;
   type_bound_vector bounds;
 };
 
 #endif
 #endif
diff --git a/liboctave/array/CColVector.cc b/liboctave/array/CColVector.cc
--- a/liboctave/array/CColVector.cc
+++ b/liboctave/array/CColVector.cc
@@ -209,17 +209,17 @@ ColumnVector
 ComplexColumnVector::abs (void) const
 {
   return do_mx_unary_map<double, Complex, std::abs> (*this);
 }
 
 ComplexColumnVector
 conj (const ComplexColumnVector& a)
 {
-  return do_mx_unary_map<Complex, Complex, std::conj<double> > (a);
+  return do_mx_unary_map<Complex, Complex, std::conj<double>> (a);
 }
 
 // resize is the destructive equivalent for this one
 
 ComplexColumnVector
 ComplexColumnVector::extract (octave_idx_type r1, octave_idx_type r2) const
 {
   if (r1 > r2) { std::swap (r1, r2); }
diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -668,17 +668,17 @@ ComplexMatrix::stack (const ComplexDiagM
   retval.insert (*this, 0, 0);
   retval.insert (a, nr_insert, 0);
   return retval;
 }
 
 ComplexMatrix
 conj (const ComplexMatrix& a)
 {
-  return do_mx_unary_map<Complex, Complex, std::conj<double> > (a);
+  return do_mx_unary_map<Complex, Complex, std::conj<double>> (a);
 }
 
 // resize is the destructive equivalent for this one
 
 ComplexMatrix
 ComplexMatrix::extract (octave_idx_type r1, octave_idx_type c1,
                         octave_idx_type r2, octave_idx_type c2) const
 {
diff --git a/liboctave/array/CNDArray.cc b/liboctave/array/CNDArray.cc
--- a/liboctave/array/CNDArray.cc
+++ b/liboctave/array/CNDArray.cc
@@ -731,17 +731,17 @@ boolNDArray
 ComplexNDArray::isfinite (void) const
 {
   return do_mx_unary_map<bool, Complex, octave::math::finite> (*this);
 }
 
 ComplexNDArray
 conj (const ComplexNDArray& a)
 {
-  return do_mx_unary_map<Complex, Complex, std::conj<double> > (a);
+  return do_mx_unary_map<Complex, Complex, std::conj<double>> (a);
 }
 
 ComplexNDArray&
 ComplexNDArray::insert (const NDArray& a, octave_idx_type r, octave_idx_type c)
 {
   dim_vector a_dv = a.dims ();
 
   int n = a_dv.ndims ();
diff --git a/liboctave/array/CRowVector.cc b/liboctave/array/CRowVector.cc
--- a/liboctave/array/CRowVector.cc
+++ b/liboctave/array/CRowVector.cc
@@ -198,17 +198,17 @@ ComplexColumnVector
 ComplexRowVector::transpose (void) const
 {
   return MArray<Complex>::transpose ();
 }
 
 ComplexRowVector
 conj (const ComplexRowVector& a)
 {
-  return do_mx_unary_map<Complex, Complex, std::conj<double> > (a);
+  return do_mx_unary_map<Complex, Complex, std::conj<double>> (a);
 }
 
 // resize is the destructive equivalent for this one
 
 ComplexRowVector
 ComplexRowVector::extract (octave_idx_type c1, octave_idx_type c2) const
 {
   if (c1 > c2) { std::swap (c1, c2); }
diff --git a/liboctave/array/MatrixType.cc b/liboctave/array/MatrixType.cc
--- a/liboctave/array/MatrixType.cc
+++ b/liboctave/array/MatrixType.cc
@@ -135,17 +135,17 @@ matrix_real_probe (const MArray<T>& a)
   else
     typ = MatrixType::Rectangular;
 
   return typ;
 }
 
 template <typename T>
 MatrixType::matrix_type
-matrix_complex_probe (const MArray<std::complex<T> >& a)
+matrix_complex_probe (const MArray<std::complex<T>>& a)
 {
   MatrixType::matrix_type typ = MatrixType::Unknown;
   octave_idx_type nrows = a.rows ();
   octave_idx_type ncols = a.cols ();
 
   const T zero = 0;
   // get the real type
 
diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -1487,17 +1487,17 @@ Sparse<T>::index (const idx_vector& idx,
                                                ? tmp_idx.transpose ()
                                                : tmp_idx);
 
           octave_idx_type new_nr = idxa.rows ();
           octave_idx_type new_nc = idxa.cols ();
 
           // Lookup.
           // FIXME: Could specialize for sorted idx?
-          NoAlias< Array<octave_idx_type> > lidx (dim_vector (new_nr, new_nc));
+          NoAlias< Array<octave_idx_type>> lidx (dim_vector (new_nr, new_nc));
           for (octave_idx_type i = 0; i < new_nr*new_nc; i++)
             lidx(i) = lblookup (ridx (), nz, idxa(i));
 
           // Count matches.
           retval = Sparse<T> (idxa.rows (), idxa.cols ());
           for (octave_idx_type j = 0; j < new_nc; j++)
             {
               octave_idx_type nzj = 0;
@@ -2666,17 +2666,17 @@ Sparse<T>::cat (int dim, octave_idx_type
 
   return retval;
 }
 
 template <typename T>
 Array<T>
 Sparse<T>::array_value () const
 {
-  NoAlias< Array<T> > retval (dims (), T ());
+  NoAlias< Array<T>> retval (dims (), T ());
   if (rows () == 1)
     {
       octave_idx_type i = 0;
       for (octave_idx_type j = 0, nc = cols (); j < nc; j++)
         {
           if (cidx (j+1) > i)
             retval(j) = data (i++);
         }
diff --git a/liboctave/array/fCColVector.cc b/liboctave/array/fCColVector.cc
--- a/liboctave/array/fCColVector.cc
+++ b/liboctave/array/fCColVector.cc
@@ -211,17 +211,17 @@ FloatColumnVector
 FloatComplexColumnVector::abs (void) const
 {
   return do_mx_unary_map<float, FloatComplex, std::abs> (*this);
 }
 
 FloatComplexColumnVector
 conj (const FloatComplexColumnVector& a)
 {
-  return do_mx_unary_map<FloatComplex, FloatComplex, std::conj<float> > (a);
+  return do_mx_unary_map<FloatComplex, FloatComplex, std::conj<float>> (a);
 }
 
 // resize is the destructive equivalent for this one
 
 FloatComplexColumnVector
 FloatComplexColumnVector::extract (octave_idx_type r1, octave_idx_type r2) const
 {
   if (r1 > r2) { std::swap (r1, r2); }
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -671,17 +671,17 @@ FloatComplexMatrix::stack (const FloatCo
   retval.insert (*this, 0, 0);
   retval.insert (a, nr_insert, 0);
   return retval;
 }
 
 FloatComplexMatrix
 conj (const FloatComplexMatrix& a)
 {
-  return do_mx_unary_map<FloatComplex, FloatComplex, std::conj<float> > (a);
+  return do_mx_unary_map<FloatComplex, FloatComplex, std::conj<float>> (a);
 }
 
 // resize is the destructive equivalent for this one
 
 FloatComplexMatrix
 FloatComplexMatrix::extract (octave_idx_type r1, octave_idx_type c1,
                              octave_idx_type r2, octave_idx_type c2) const
 {
diff --git a/liboctave/array/fCNDArray.cc b/liboctave/array/fCNDArray.cc
--- a/liboctave/array/fCNDArray.cc
+++ b/liboctave/array/fCNDArray.cc
@@ -737,17 +737,17 @@ boolNDArray
 FloatComplexNDArray::isfinite (void) const
 {
   return do_mx_unary_map<bool, FloatComplex, octave::math::finite> (*this);
 }
 
 FloatComplexNDArray
 conj (const FloatComplexNDArray& a)
 {
-  return do_mx_unary_map<FloatComplex, FloatComplex, std::conj<float> > (a);
+  return do_mx_unary_map<FloatComplex, FloatComplex, std::conj<float>> (a);
 }
 
 FloatComplexNDArray&
 FloatComplexNDArray::insert (const NDArray& a,
                              octave_idx_type r, octave_idx_type c)
 {
   dim_vector a_dv = a.dims ();
 
diff --git a/liboctave/array/fCRowVector.cc b/liboctave/array/fCRowVector.cc
--- a/liboctave/array/fCRowVector.cc
+++ b/liboctave/array/fCRowVector.cc
@@ -199,17 +199,17 @@ FloatComplexColumnVector
 FloatComplexRowVector::transpose (void) const
 {
   return MArray<FloatComplex>::transpose ();
 }
 
 FloatComplexRowVector
 conj (const FloatComplexRowVector& a)
 {
-  return do_mx_unary_map<FloatComplex, FloatComplex, std::conj<float> > (a);
+  return do_mx_unary_map<FloatComplex, FloatComplex, std::conj<float>> (a);
 }
 
 // resize is the destructive equivalent for this one
 
 FloatComplexRowVector
 FloatComplexRowVector::extract (octave_idx_type c1, octave_idx_type c2) const
 {
   if (c1 > c2) { std::swap (c1, c2); }
diff --git a/liboctave/array/idx-vector.h b/liboctave/array/idx-vector.h
--- a/liboctave/array/idx-vector.h
+++ b/liboctave/array/idx-vector.h
@@ -508,17 +508,17 @@ public:
   idx_vector (double x) : rep (new idx_scalar_rep (x)) { chkerr (); }
 
   idx_vector (float x) : rep (new idx_scalar_rep (x)) { chkerr (); }
 
   // A scalar bool does not necessarily map to scalar index.
   idx_vector (bool x) : rep (new idx_mask_rep (x)) { chkerr (); }
 
   template <typename T>
-  idx_vector (const Array<octave_int<T> >& nda) : rep (new idx_vector_rep (nda))
+  idx_vector (const Array<octave_int<T>>& nda) : rep (new idx_vector_rep (nda))
   { chkerr (); }
 
   idx_vector (const Array<double>& nda) : rep (new idx_vector_rep (nda))
   { chkerr (); }
 
   idx_vector (const Array<float>& nda) : rep (new idx_vector_rep (nda))
   { chkerr (); }
 
diff --git a/liboctave/util/lo-traits.h b/liboctave/util/lo-traits.h
--- a/liboctave/util/lo-traits.h
+++ b/liboctave/util/lo-traits.h
@@ -73,17 +73,17 @@ template <template <typename> class Temp
 class is_instance
 {
 public:
 
   static const bool value = false;
 };
 
 template <template <typename> class Template, typename T>
-class is_instance <Template, Template<T> >
+class is_instance <Template, Template<T>>
 {
 public:
 
   static const bool value = true;
 };
 
 // Determine whether a template paramter is a class type.
 
@@ -124,17 +124,17 @@ public:
 template <template <typename> class TemplatedClass, typename T>
 class strip_template_param
 {
 public:
   typedef T type;
 };
 
 template <template <typename> class TemplatedClass, typename T>
-class strip_template_param<TemplatedClass, TemplatedClass<T> >
+class strip_template_param<TemplatedClass, TemplatedClass<T>>
 {
 public:
   typedef T type;
 };
 
 // Will turn TemplatedClass<T> to TemplatedClass<S>, T to S otherwise.
 // Useful for generic promotions.
 
