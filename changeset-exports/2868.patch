# HG changeset patch
# User jwe
# Date 861411952 0
#      Sat Apr 19 01:05:52 1997 +0000
# Node ID 30e1f6f411614aa08d85cbd7b1b2ff6974557cad
# Parent  0629c4974ce91142d062462500c74c32c2d3e9aa
[project @ 1997-04-19 01:05:52 by jwe]

diff --git a/src/pt-mat.cc b/src/pt-mat.cc
--- a/src/pt-mat.cc
+++ b/src/pt-mat.cc
@@ -139,19 +139,19 @@ public:
     {
       if (rep && --rep->count == 0)
 	delete rep;
     }
 
   int rows (void) { return rep->nr; }
   int cols (void) { return rep->nc; }
 
-  bool all_strings (void) const { return rep->all_str; }
-  bool is_complex (void) const { return rep->is_cmplx; }
-  bool all_empty (void) const { return rep->all_mt; }
+  bool all_strings_p (void) const { return rep->all_str; }
+  bool complex_p (void) const { return rep->is_cmplx; }
+  bool all_empty_p (void) const { return rep->all_mt; }
 
   octave_value& operator () (Pix p) { return rep->operator () (p); }
 
   const octave_value& operator () (Pix p) const
     { return rep->operator () (p); }
 
   Pix first (void) const { return rep->first (); }
   void next (Pix& p) const { rep->next (p); }
@@ -268,19 +268,19 @@ public:
       is_cmplx (false), all_mt (true), ok (false)
       { init (tm); }
 
   ~tm_const (void) { }
 
   int rows (void) const { return nr; }
   int cols (void) const { return nc; }
 
-  bool all_strings (void) const { return all_str; }
-  bool is_complex (void) const { return is_cmplx; }
-  bool all_empty (void) const { return all_mt; }
+  bool all_strings_p (void) const { return all_str; }
+  bool complex_p (void) const { return is_cmplx; }
+  bool all_empty_p (void) const { return all_mt; }
 
   operator void* () const
     { return ok ? static_cast<void *> (-1) : static_cast<void *> (0); }
 
 private:
 
   int nr;
   int nc;
@@ -315,23 +315,23 @@ tm_const::init (const tree_matrix& tm)
   for (Pix p = tm.first (); p != 0; tm.next (p))
     {
       tree_matrix_row *elt = tm (p);
 
       tm_row_const tmp (*elt);
 
       if (tmp)
 	{
-	  if (all_str && ! tmp.all_strings ())
+	  if (all_str && ! tmp.all_strings_p ())
 	    all_str = false;
 
-	  if (! is_cmplx && tmp.is_complex ())
+	  if (! is_cmplx && tmp.complex_p ())
 	    is_cmplx = true;
 
-	  if (all_mt && ! tmp.all_empty ())
+	  if (all_mt && ! tmp.all_empty_p ())
 	    all_mt = false;
 
 	  append (tmp);
 	}
       else
 	break;
     }
 
@@ -470,37 +470,37 @@ tree_matrix::all_elements_are_constant (
 
 octave_value
 tree_matrix::eval (bool /* print */)
 {
   octave_value retval;
 
   tm_const tmp (*this);
 
-  bool all_strings = false;
-  bool all_empty = false;
+  bool all_strings_p = false;
+  bool all_empty_p = false;
 
   if (tmp)
     {
       int nr = tmp.rows ();
       int nc = tmp.cols ();
 
       Matrix m;
       ComplexMatrix cm;
       charMatrix chm;
 
       // Now, extract the values from the individual elements and
       // insert them in the result matrix.
 
-      bool found_complex = tmp.is_complex ();
+      bool found_complex = tmp.complex_p ();
 
-      all_strings = tmp.all_strings ();
-      all_empty = tmp.all_empty ();
+      all_strings_p = tmp.all_strings_p ();
+      all_empty_p = tmp.all_empty_p ();
 
-      if (all_strings)
+      if (all_strings_p)
 	chm.resize (nr, nc, Vstring_fill_char);
       else if (found_complex)
 	cm.resize (nr, nc, 0.0);
       else
 	m.resize (nr, nc, 0.0);
 
       int put_row = 0;
 
@@ -531,17 +531,17 @@ tree_matrix::eval (bool /* print */)
 
 		      cm.insert (cm_elt, put_row, put_col);
 		    }
 		}
 	      else
 		{
 		  if (elt.is_real_scalar ())
 		    m (put_row, put_col) = elt.double_value ();
-		  else if (elt.is_string () && all_strings)
+		  else if (elt.is_string () && all_strings_p)
 		    {
 		      charMatrix chm_elt = elt.char_matrix_value ();
 
 		      if (error_state)
 			goto done;
 
 		      chm.insert (chm_elt, put_row, put_col);
 		    }
@@ -551,35 +551,35 @@ tree_matrix::eval (bool /* print */)
 
 		      if (error_state)
 			goto done;
 
 		      m.insert (m_elt, put_row, put_col);
 		    }
 		}
 
-	      if (all_strings && chm.rows () > 0 && chm.cols () > 0)
+	      if (all_strings_p && chm.rows () > 0 && chm.cols () > 0)
 		retval = octave_value (chm, true);
 	      else if (found_complex)
 		retval = cm;
 	      else
 		retval = m;
 
 	      put_col += elt.columns ();
 	    }
 
 	  put_row += row.rows ();
 	}
     }
 
 done:
 
-  if (! error_state && retval.is_undefined () && all_empty)
+  if (! error_state && retval.is_undefined () && all_empty_p)
     {
-      if (all_strings)
+      if (all_strings_p)
 	retval = "";
       else
 	retval = Matrix ();
     }
 
   return retval;
 }
 
