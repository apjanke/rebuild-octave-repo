# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1261991004 -3600
#      Mon Dec 28 10:03:24 2009 +0100
# Node ID e60f038146e17fd505ddb52d2c1f3380b2becaa4
# Parent  0cabc95f08335592a467a293ec45e63515193ec3
further simplify strcat

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-12-28  Jaroslav Hajek  <highegg@gmail.com>
+
+	* strings/strcat.m: Further simplify.
+
 2009-12-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* general/common_size.m: Optimize.
 
 2009-12-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* strings/strcat.m: Vectorize.
 
diff --git a/scripts/strings/strcat.m b/scripts/strings/strcat.m
--- a/scripts/strings/strcat.m
+++ b/scripts/strings/strcat.m
@@ -68,39 +68,30 @@ function st = strcat (varargin)
       endif
       chars = cellfun (@ischar, varargin);
       allchar = all (chars);
       varargin(chars) = cellfun (@cellstr, varargin(chars), uo, false);
       if (! all (cellfun (@iscell, varargin)))
         error ("strcat: inputs must be strings or cells of strings");
       endif
 
-      ## Set all cells to a common size
-      [err, varargin{:}] = common_size (varargin{:});
+      ## We don't actually need to bring all cells to common size, because
+      ## cellfun can now expand scalar cells.
+      err = common_size (varargin{:});
 
       if (err)
         error ("strcat: arguments must be the same size, or be scalars");
       endif
 
-      ## Total number of resulting strings.
-      dims = size (varargin{1});
-      nstr = prod (dims);
-      ## Reshape args to column vectors.
-      varargin = cellfun (@reshape, varargin, {[nstr, 1]}, uo, false);
-      ## Concatenate the columns to a cell matrix, and extract rows.
-      strows = num2cell ([varargin{:}], 2);
-      ## Concatenate all the rows.
-      st = cellfun (@cell2mat, strows, uo, false);
+      ## Cellfun handles everything for us.
+      st = cellfun (@horzcat, varargin{:}, uo, false);
 
       if (allchar)
         ## If all inputs were strings, return strings.
         st = char (st);
-      else
-        ## Reshape to original dims
-        st = reshape (st, dims);
       endif
     endif
   else
     print_usage ();
   endif
 
 endfunction
 
