# HG changeset patch
# User Rik <rik@octave.org>
# Date 1522338851 25200
#      Thu Mar 29 08:54:11 2018 -0700
# Branch stable
# Node ID e376a35f168f5791daf3927de42f3d528b7d2251
# Parent  d298a0734d85f666e3b79f433aebc402eb88fd86
symfact.cc: Fix use of unitialized SparseBoolMatrix (bug #53507).

* symbfact.cc (Fsymbfacc): Fill SparseBoolMatrix (i.e, initialize the data
member), before calling transpose which reads the data.  Replace for loop
with std::fill_n for clarity.  Add '#include "algorithm"' for access to
std::fill_n.

diff --git a/libinterp/dldfcn/symbfact.cc b/libinterp/dldfcn/symbfact.cc
--- a/libinterp/dldfcn/symbfact.cc
+++ b/libinterp/dldfcn/symbfact.cc
@@ -22,16 +22,17 @@ along with Octave; see the file COPYING.
 */
 
 #if defined (HAVE_CONFIG_H)
 #  include "config.h"
 #endif
 
 #include <cmath>
 
+#include <algorithm>
 #include <string>
 
 #include "CSparse.h"
 #include "boolSparse.h"
 #include "dColVector.h"
 #include "dSparse.h"
 #include "oct-locbuf.h"
 #include "oct-sparse.h"
@@ -290,17 +291,17 @@ Cholesky@tie{}factorization as determine
         }
 
       // count the total number of entries in L
       octave_idx_type lnz = 0;
       for (octave_idx_type j = 0 ; j < n ; j++)
         lnz += ColCount[j];
 
       // allocate the output matrix L (pattern-only)
-      SparseBoolMatrix L (n, n, lnz);
+      SparseBoolMatrix L (dim_vector (n, n), lnz);
 
       // initialize column pointers
       lnz = 0;
       for (octave_idx_type j = 0 ; j < n ; j++)
         {
           L.xcidx(j) = lnz;
           lnz += ColCount[j];
         }
@@ -328,24 +329,23 @@ Cholesky@tie{}factorization as determine
 
           // add the diagonal entry
           L.xridx (W[k]++) = k;
         }
 
       // free workspace
       CHOLMOD_NAME(free_sparse) (&R, cm);
 
+      // fill L with one's
+      std::fill_n (L.xdata (), lnz, true);
+
       // transpose L to get R, or leave as is
       if (nargin < 3)
         L = L.transpose ();
 
-      // fill numerical values of L with one's
-      for (octave_idx_type p = 0 ; p < lnz ; p++)
-        L.xdata(p) = true;
-
       retval(4) = L;
     }
 
   if (nargout > 3)
     {
       for (octave_idx_type i = 0; i < n; i++)
         tmp(i) = Post[i] + 1;
       retval(3) = tmp;
