# HG changeset patch
# User Ben Abbott  <bpabbott@mac.com>
# Date 1364945812 14400
#      Tue Apr 02 19:36:52 2013 -0400
# Node ID 5be43435bd5b919b44d14c6a3781be5c3be7e2c2
# Parent  f62163bed4dc652ba8e2a50ecf3b2ce03004eb67
Improve speed and backward compatibility for strsplit()

* scripts/strings/strsplit.m: Improve speed and backward compatibility.
* NEWS: Modify entry for strsplit() for Octave 3.8.x.

diff --git a/NEWS b/NEWS
--- a/NEWS
+++ b/NEWS
@@ -13,21 +13,21 @@ Summary of important user-visible change
     functions called from the current scope.  The previous warning state
     is restored on return from the current function.  The "local"
     option is ignored if used in the top-level workspace.
 
 Summary of important user-visible changes for version 3.8:
 ---------------------------------------------------------
 
  ** strsplit has been modified to be compatible with Matlab.  There
-    are three instances where backward compatibility is broken.
+    are two instances where backward compatibility is broken.
 
     (1) Delimiters are now string vectors, not scalars.
 
-    Octave's conventioal behavior
+    Octave's legacy behavior
 
       strsplit ("1 2, 3", ", ")
       ans = 
       {
        [1,1] = 1
        [1,2] = 2
        [1,3] = 
        [1,4] = 3
@@ -38,28 +38,24 @@ Summary of important user-visible change
       strsplit ("1 2, 3", ", ")
       ans = 
       {
        [1,1] = 1 2
        [1,2] = 3
       }
 
     (2) By default, Matlab treats consecutive delimiters are as a single
-    delimiter.  By default, Octave's conventional behavior was to return
-    an empty string.
+    delimiter.  By default, Octave's legacy behavior was to return an
+    empty string for the part between the delmiters.
 
-    (3) Octave's conventional implementation supported splitting 2D
-    character arrays.  The Matlab compatible version requires the input
-    string be a row vector.
+    Where the legacy behavior is desired, the call to strsplit() should
+    specify that the delimitertype is "legacy".
 
-    Where the conventional behavior is desired, the in-line function below
-    may be substituted.
-
-    cstrsplit = @(str,del, collapsedelimiters = false) strsplit (strjoin ...
-      (cellstr (str), del(1)), num2cell (del(:)), collapsedelimiters);
+    strsplit (str, del, "collapsedelimiters", false,
+      "delimitertype", "legacy")
 
  ** Octave now supports nested functions with scoping rules that are
     compatible with Matlab.  A nested function is one declared and defined
     within the body of another function.  The nested function is only
     accessible from within the enclosing function which makes it one
     method for making private functions whose names do not conflict with those
     in the global namespace (See also subfunctions and private functions).
     In addition, variables in the enclosing function are visible within the
diff --git a/scripts/strings/strsplit.m b/scripts/strings/strsplit.m
--- a/scripts/strings/strsplit.m
+++ b/scripts/strings/strsplit.m
@@ -17,21 +17,21 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{cstr}] =} strsplit (@var{s})
 ## @deftypefnx {Function File} {[@var{cstr}] =} strsplit (@var{s}, @var{del})
 ## @deftypefnx {Function File} {[@var{cstr}] =} strsplit (@var{s}, @var{del}, @var{collapsedelimiters})
 ## @deftypefnx {Function File} {[@var{cstr}] =} strsplit (@dots{}, @var{name}, @var{value})
 ## @deftypefnx {Function File} {[@var{cstr}, @var{matches}] =} strsplit (@dots{})
-## Split the string @var{s} using the delimiters specified by @var{del} and return
-## a cell array of strings.  For a single delimiter, @var{del} may be a string,
-## or a scalar cell-string.  For multible delimiters, @var{del} must be a cell-string
-## array.  Unless @var{collapsedelimiters} is specified to be @var{false}, consecutive
-## delimiters are collapsed into one.
+## Split the string @var{s} using the delimiters specified by @var{del}
+## and return a cell array of strings.  For a single delimiter, @var{del}
+## may be a string, or a scalar cell-string.  For multible delimiters, 
+## @var{del} must be a cell-string array.  Unless @var{collapsedelimiters} is
+## specified to be @var{false}, consecutive delimiters are collapsed into one.
 ##
 ## The second output, @var{matches}, returns the delmiters which were matched
 ## in the original string.  The matched delimiters are uneffected by the
 ## @var{collapsedelimiters}.
 ##
 ## Example:
 ##
 ## @example
@@ -71,20 +71,25 @@
 ##           @}
 ##
 ## @end group
 ## @end example
 ##
 ## Supported @var{name}/@var{value} pair arguments are;
 ##
 ## @itemize
-## @item @code{collapsedelimiters} may take the value of @var{true} or @var{false}
+## @item @var{collapsedelimiters} may take the value of @var{true} or @var{false}
 ## with the default being @var{false}.
-## @item @code{delimitertype} may take the value of @code{simple} or @code{regularexpression},
-## with the default being @code{simple}.
+## @item @var{delimitertype} may take the value of @code{legacy},
+## @code{simple} or @code{regularexpression}.
+## If @var{delimitertype} is equal to @code{legacy}, each individual
+## character of @var{del} is used to split the input.
+## If the specified delimiters are single characters, the default is
+## @var{delimitertype} is @code{legacy}.  Otherwise the default
+## @var{delimitertype} is @code{simple}.
 ## @end itemize
 ## 
 ## Example:
 ##
 ## @example
 ## @group
 ## strsplit ("a foo b,bar c", ",|\\s|foo|bar", "delimitertype", "regularexpression")
 ##       @result{}
@@ -99,33 +104,43 @@
 ##           @{
 ##             [1,1] = a
 ##             [1,2] = 
 ##             [1,3] = b
 ##             [1,4] = 
 ##             [1,5] = c
 ##           @}
 ## 
+## strsplit ("a,,b, c", ", ", false, "delimitertype", "legacy")
+##       @result{}
+##           @{
+##             [1,1] = a
+##             [1,2] = 
+##             [1,3] = b
+##             [1,4] = 
+##             [1,5] = c
+##           @}
+## 
 ## strsplit ("a,\t,b, c", @{',', '\s'@}, "delimitertype", "regularexpression")
 ##       @result{}
 ##           @{
 ##             [1,1] = a
 ##             [1,2] = b
 ##             [1,3] = c
 ##           @}
 ## @end group
 ## @end example
 ## 
-## @seealso{strtok, regexp}
+## @seealso{strjoin, strtok, regexp}
 ## @end deftypefn
 
 function [result, matches] = strsplit (str, del, varargin)
 
   args.collapsedelimiters = true;
-  args.delimitertype = "simple";
+  args.delimitertype = "default";
 
   [reg, params] = parseparams (varargin);
 
   if (numel (reg) > 1)
     print_usage ();
   elseif (numel (reg) == 1)
     if (islogical (reg{1}) || isnumeric (reg{1}))
       args.collapsedelimiters = reg{1};
@@ -140,53 +155,112 @@ function [result, matches] = strsplit (s
     elseif (ischar (varargin{n}))
       error ("strsplit:invalid_parameter_name",
         sprintf ("strsplit: Invalid parameter name, `%s'", varargin{n}))
     else
       print_usage ();
     endif
   endfor
 
+  if (strcmpi (args.delimitertype, "default"))
+    if (nargin == 1 || numel (del) == 1
+      || (nargin > 1 && (islogical (del) || isnumeric (del)))
+      || iscell (del) && all (cellfun (@numel, del) < 2))
+      ## For single character delimiters, default to "legacy"
+      args.delimitertype = "legacy";
+    else
+      ## For multi-character delimiters, default to "simple"
+      args.delimitertype = "simple";
+    endif
+  endif
+
   # Save the length of the "delimitertype" parameter
   length_deltype = numel (args.delimitertype);
 
   if (nargin == 1 || (nargin > 1 && (islogical (del) || isnumeric (del))))
     if (nargin > 1)
       ## Second input is the "collapsedelimiters" parameter
       args.collapsedelimiters = del;
     endif
     ## Set proper default for the delimiter type
     if (strncmpi (args.delimitertype, "simple", numel (args.delimitertype)))
       del = {" ","\f","\n","\r","\t","\v"};
+    elseif (strncmpi (args.delimitertype, "legacy", numel (args.delimitertype)))
+      del = " \f\n\r\t\v";
     else
       del = "\\s";
     endif
   endif
 
   if (nargin < 1)
     print_usage ();
   elseif (! ischar (str) || (! ischar (del) && ! iscellstr (del)))
     error ("strsplit: S and DEL must be string values");
-  elseif (rows (str) > 1)
-    error ("strsplit: S must be a string value");
   elseif (! isscalar (args.collapsedelimiters))
     error ("strsplit: COLLAPSEDELIMITERS must be a scalar value");
   endif
 
   if (strncmpi (args.delimitertype, "simple", length_deltype))
     if (iscellstr (del))
       del = cellfun (@(x) regexp2simple (x, false), del, "uniformoutput",
         false);
     else
       del = regexp2simple (del, false);
     endif
   endif
 
+  if (rows (str) > 1)
+    tmp = char (del(1));
+    str = [str, repmat(tmp,rows(str),1)];
+    str = reshape (str.', 1, numel (str));
+    str(end-numel(tmp)+1:end) = [];
+  endif
+
   if (isempty (str))
     result = {str};
+  elseif (strncmpi (args.delimitertype, "legacy", length_deltype))
+    ## Conventional splitting is preserved for its speed.  Its delimiter type
+    ##
+    if (! ischar (del))
+      if (iscell (del) && all (cellfun (@numel, del) < 2))
+        del = [del{:}];
+      else
+        error ("strsplit:legacy_delimiter_must_be_char",
+          "%s %s", "strsplit: for DELIMITERTYPE = ""legacy"" ", 
+           "DEL must be a string, or a cell array scalar character elements.")
+      endif
+    endif
+    ## Split s according to delimiter
+    if (isscalar (del))
+      ## Single separator
+      idx = find (str == del);
+    else
+      ## Multiple separators
+      idx = strchr (str, del);
+    endif
+
+    ## Get substring lengths.
+    if (isempty (idx))
+      strlens = length (str);
+    else
+      strlens = [idx(1)-1, diff(idx)-1, numel(str)-idx(end)];
+    endif
+    if (nargout > 1)
+      ## Grab the separators
+      matches = num2cell (str(idx)(:)).';
+    endif
+    ## Remove separators.
+    str(idx) = [];
+    if (args.collapsedelimiters)
+      ## Omit zero lengths.
+      strlens = strlens(strlens != 0);
+    endif
+
+    ## Convert!
+    result = mat2cell (str, 1, strlens);
   elseif (strncmpi (args.delimitertype, "regularexpression", length_deltype)
           || strncmpi (args.delimitertype, "simple", length_deltype))
     if (iscellstr (del))
       del = sprintf ('%s|', del{:});
       del(end) = [];
     endif
     [result, ~, ~, ~, matches] = regexp (str, del, "split");
     if (args.collapsedelimiters)
@@ -212,16 +286,19 @@ function str = regexp2simple (str, rever
   else
     ## backslash must go first
     for r = 1:numel(rep)
       str = strrep (str, rep{r}, [char(92), rep{r}]);
     endfor
   endif
 endfunction
 
+% Mimic the old strsplit()
+%!assert (cellfun (@numel, strsplit (["a,b,c";"1,2   "], ",")), [1 1 2 1 4])
+
 %!shared str
 %! str = "The rain in Spain stays mainly in the plain.";
 % Split on all whitespace.
 %!assert (strsplit (str), {"The", "rain", "in", "Spain", "stays", ...
 %! "mainly", "in", "the", "plain."})
 % Split on "ain".
 %!assert (strsplit (str, "ain"), {"The r", " in Sp", " stays m", ...
 %!  "ly in the pl", "."})
@@ -241,17 +318,18 @@ endfunction
 %! [s, m] = strsplit (str, {" ", "ain"}, "collapsedelimiters", false);
 %! assert (s, {"The", "r", "", "in", "Sp", "", "stays", "m", "ly", "in", "the", "pl", "."})
 %! assert (m, {" ", "ain", " ", " ", "ain", " ", " ", "ain", " ", " ", " ", "ain"})
 
 %!assert (strsplit ("road to hell"), {"road", "to", "hell"})
 %!assert (strsplit ("road to hell", " "), {"road", "to", "hell"})
 %!assert (strsplit ("road to^hell", {" ","^"}), {"road", "to", "hell"})
 %!assert (strsplit ("road   to--hell", {" ","-"}, true), {"road", "to", "hell"})
-%!assert (strsplit (["a,bc,,de"], ",", false), {"a", "bc", "", "de"})
+%!assert (strsplit (["a,bc,,de"], ",", false, "delimitertype", "s"), {"a", "bc", "", "de"})
+%!assert (strsplit (["a,bc,,de"], ",", false), {"a", "bc", char(ones(1,0)), "de"})
 %!assert (strsplit (["a,bc,de"], ",", true), {"a", "bc", "de"})
 %!assert (strsplit (["a,bc,de"], {","," "}, true), {"a", "bc", "de"})
 %!test
 %! [s, m] = strsplit ("hello \t world", 1);
 %! assert (s, {"hello", "world"});
 %! assert (m, {" ", "\t", " "});
 
 %!assert (strsplit ("road to hell", " ", "delimitertype", "r"), {"road", "to", "hell"})
@@ -259,14 +337,21 @@ endfunction
 %!assert (strsplit ("road to^hell", "[ ^]", "delimitertype", "r"), {"road", "to", "hell"})
 %!assert (strsplit ("road   to--hell", "[ -]", false, "delimitertype", "r"), {"road", "", "", "to", "", "hell"})
 %!assert (strsplit (["a,bc,de"], ",", "delimitertype", "r"), {"a", "bc", "de"})
 %!assert (strsplit (["a,bc,,de"], ",", false, "delimitertype", "r"), {"a", "bc", "", "de"})
 %!assert (strsplit (["a,bc,de"], ",", true, "delimitertype", "r"), {"a", "bc", "de"})
 %!assert (strsplit (["a,bc,de"], "[, ]", true, "delimitertype", "r"), {"a", "bc", "de"})
 %!assert (strsplit ("hello \t world", 1, "delimitertype", "r"), {"hello", "world"});
 
+%!assert (strsplit ("road to hell", " ", false, "delimitertype", "l"), {"road", "to", "hell"})
+%!assert (strsplit ("road to^hell", " ^", false, "delimitertype", "l"), {"road", "to", "hell"})
+%!assert (strsplit ("road   to--hell", " -", true, "delimitertype", "l"), {"road", "to", "hell"})
+%!assert (strsplit (["a,bc";",de"], ",", false, "delimitertype", "l"), {"a", "bc", char(ones(1,0)), "de "})
+%!assert (strsplit (["a,bc";",de"], ",", true, "delimitertype", "l"), {"a", "bc", "de "})
+%!assert (strsplit (["a,bc";",de"], ", ", true, "delimitertype", "l"), {"a", "bc", "de"})
+
 %% Test input validation
 %!error strsplit ()
 %!error strsplit ("abc", "b", true, 4)
 %!error <S and DEL must be string values> strsplit (123, "b")
 %!error <COLLAPSEDELIMITERS must be a scalar value> strsplit ("abc", "def", ones (3,3))
 
