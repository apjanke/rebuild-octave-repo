# HG changeset patch
# User Rik <rik@octave.org>
# Date 1430774522 25200
#      Mon May 04 14:22:02 2015 -0700
# Branch stable
# Node ID df437a52bcafee34a46b23f44191d352e83c6bb5
# Parent  075a5e2e1ba53478938254ff92cfb1aa7ec196cc
doc: Update more docstrings to have one sentence summary as first line.
Reviewed miscellaneous, sparse, strings in scripts directory.

* scripts/miscellaneous/bzip2.m, scripts/miscellaneous/citation.m,
scripts/miscellaneous/compare_versions.m, scripts/miscellaneous/computer.m,
scripts/miscellaneous/debug.m, scripts/miscellaneous/dir.m,
scripts/miscellaneous/edit.m, scripts/miscellaneous/error_ids.m,
scripts/miscellaneous/fileattrib.m, scripts/miscellaneous/fullfile.m,
scripts/miscellaneous/genvarname.m, scripts/miscellaneous/gzip.m,
scripts/miscellaneous/mkoctfile.m, scripts/miscellaneous/news.m,
scripts/miscellaneous/open.m, scripts/miscellaneous/parseparams.m,
scripts/miscellaneous/recycle.m, scripts/miscellaneous/run.m,
scripts/miscellaneous/swapbytes.m, scripts/miscellaneous/tar.m,
scripts/miscellaneous/tmpnam.m, scripts/miscellaneous/unpack.m,
scripts/miscellaneous/what.m, scripts/sparse/bicg.m, scripts/sparse/bicgstab.m,
scripts/sparse/cgs.m, scripts/sparse/colperm.m, scripts/sparse/eigs.m,
scripts/sparse/etreeplot.m, scripts/sparse/gmres.m, scripts/sparse/gplot.m,
scripts/sparse/ichol.m, scripts/sparse/ilu.m, scripts/sparse/pcg.m,
scripts/sparse/pcr.m, scripts/sparse/qmr.m, scripts/sparse/spaugment.m,
scripts/sparse/spconvert.m, scripts/sparse/spdiags.m, scripts/sparse/spfun.m,
scripts/sparse/spones.m, scripts/sparse/sprandsym.m, scripts/sparse/spstats.m,
scripts/sparse/spy.m, scripts/sparse/svds.m, scripts/sparse/treelayout.m,
scripts/sparse/treeplot.m, scripts/strings/base2dec.m,
scripts/strings/bin2dec.m, scripts/strings/blanks.m, scripts/strings/cstrcat.m,
scripts/strings/deblank.m, scripts/strings/dec2base.m,
scripts/strings/dec2bin.m, scripts/strings/dec2hex.m,
scripts/strings/findstr.m, scripts/strings/hex2dec.m, scripts/strings/index.m,
scripts/strings/isletter.m, scripts/strings/isstrprop.m,
scripts/strings/mat2str.m, scripts/strings/ostrsplit.m,
scripts/strings/regexptranslate.m, scripts/strings/rindex.m,
scripts/strings/str2num.m, scripts/strings/strcat.m, scripts/strings/strchr.m,
scripts/strings/strjoin.m, scripts/strings/strjust.m,
scripts/strings/strmatch.m, scripts/strings/strsplit.m,
scripts/strings/strtok.m, scripts/strings/strtrim.m,
scripts/strings/strtrunc.m, scripts/strings/substr.m,
scripts/strings/untabify.m, scripts/time/datenum.m:
Update more docstrings to have one sentence summary as first line.

diff --git a/scripts/miscellaneous/bzip2.m b/scripts/miscellaneous/bzip2.m
--- a/scripts/miscellaneous/bzip2.m
+++ b/scripts/miscellaneous/bzip2.m
@@ -17,21 +17,21 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{filelist} =} bzip2 (@var{files})
 ## @deftypefnx {Function File} {@var{filelist} =} bzip2 (@var{files}, @var{dir})
 ## Compress the list of files specified in @var{files}.
 ##
-## @var{files} is a character array or cell array of strings.  Shell
-## wildcards in the filename such as @samp{*} or @samp{?} are accepted and
-## expanded.  Each file is compressed separately and a new file with a
-## @file{".bz2"} extension is created.  The original files are not modified,
-## but existing compressed files will be silently overwritten.
+## @var{files} is a character array or cell array of strings.  Shell wildcards
+## in the filename such as @samp{*} or @samp{?} are accepted and expanded.
+## Each file is compressed separately and a new file with a @file{".bz2"}
+## extension is created.  The original files are not modified, but existing
+## compressed files will be silently overwritten.
 ##
 ## If @var{dir} is defined the compressed files are placed in this directory,
 ## rather than the original directory where the uncompressed file resides.
 ## If @var{dir} does not exist it is created.
 ##
 ## The optional output @var{filelist} is a list of the compressed files.
 ## @seealso{bunzip2, unpack, gzip, zip, tar}
 ## @end deftypefn
diff --git a/scripts/miscellaneous/citation.m b/scripts/miscellaneous/citation.m
--- a/scripts/miscellaneous/citation.m
+++ b/scripts/miscellaneous/citation.m
@@ -17,19 +17,21 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} citation
 ## @deftypefnx {Command} {} citation @var{package}
 ## Display instructions for citing GNU Octave or its packages in publications.
 ##
 ## When called without an argument, display information on how to cite the core
-## GNU Octave system.  When given a package name @var{package}, display
-## information on citing the specific named package.  Note that some packages
-## may not yet have instructions on how to cite them.
+## GNU Octave system.
+##
+## When given a package name @var{package}, display information on citing the
+## specific named package.  Note that some packages may not yet have
+## instructions on how to cite them.
 ##
 ## The GNU Octave developers and its active community of package authors have
 ## invested a lot of time and effort in creating GNU Octave as it is today.
 ## Please give credit where credit is due and cite GNU Octave and its packages
 ## when you use them.
 ##
 ## @end deftypefn
 
diff --git a/scripts/miscellaneous/compare_versions.m b/scripts/miscellaneous/compare_versions.m
--- a/scripts/miscellaneous/compare_versions.m
+++ b/scripts/miscellaneous/compare_versions.m
@@ -15,26 +15,25 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} compare_versions (@var{v1}, @var{v2}, @var{operator})
 ## Compare two version strings using the given @var{operator}.
 ##
-## This function assumes that versions @var{v1} and @var{v2} are
-## arbitrarily long strings made of numeric and period characters
-## possibly followed by an arbitrary string (e.g., @qcode{"1.2.3"},
-## @qcode{"0.3"}, @qcode{"0.1.2+"}, or @qcode{"1.2.3.4-test1"}).
+## This function assumes that versions @var{v1} and @var{v2} are arbitrarily
+## long strings made of numeric and period characters possibly followed by an
+## arbitrary string (e.g., @qcode{"1.2.3"}, @qcode{"0.3"}, @qcode{"0.1.2+"},
+## or @qcode{"1.2.3.4-test1"}).
 ##
-## The version is first split into numeric and character portions
-## and then the parts are padded to be the same length (i.e., @qcode{"1.1"}
-## would be padded to be @qcode{"1.1.0"} when being compared with
-## @qcode{"1.1.1"}, and separately, the character parts of the strings are
-## padded with nulls).
+## The version is first split into numeric and character portions and then
+## the parts are padded to be the same length (i.e., @qcode{"1.1"} would be
+## padded to be @qcode{"1.1.0"} when being compared with @qcode{"1.1.1"}, and
+## separately, the character parts of the strings are padded with nulls).
 ##
 ## The operator can be any logical operator from the set
 ##
 ## @itemize @bullet
 ## @item
 ## @qcode{"=="}
 ## equal
 ##
diff --git a/scripts/miscellaneous/computer.m b/scripts/miscellaneous/computer.m
--- a/scripts/miscellaneous/computer.m
+++ b/scripts/miscellaneous/computer.m
@@ -17,39 +17,39 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} computer ()
 ## @deftypefnx {Function File} {@var{c} =} computer ()
 ## @deftypefnx {Function File} {[@var{c}, @var{maxsize}] =} computer ()
 ## @deftypefnx {Function File} {[@var{c}, @var{maxsize}, @var{endian}] =} computer ()
 ## @deftypefnx {Function File} {@var{arch} =} computer ("arch")
-## Print or return a string of the form @var{cpu}-@var{vendor}-@var{os}
-## that identifies the type of computer that Octave is running on.
+## Print or return a string of the form @var{cpu}-@var{vendor}-@var{os} that
+## identifies the type of computer that Octave is running on.
 ##
 ## If invoked with an output argument, the value is returned instead of
 ## printed.  For example:
 ##
 ## @example
 ## @group
 ## computer ()
 ##    @print{} i586-pc-linux-gnu
 ##
 ## mycomp = computer ()
 ##    @result{} mycomp = "i586-pc-linux-gnu"
 ## @end group
 ## @end example
 ##
-## If two output arguments are requested, also return the maximum number
-## of elements for an array.  This will depend on whether Octave has been
+## If two output arguments are requested, also return the maximum number of
+## elements for an array.  This will depend on whether Octave has been
 ## compiled with 32-bit or 64-bit index vectors.
 ##
-## If three output arguments are requested, also return the byte order
-## of the current system as a character (@qcode{"B"} for big-endian or
-## @qcode{"L"} for little-endian).
+## If three output arguments are requested, also return the byte order of the
+## current system as a character (@qcode{"B"} for big-endian or @qcode{"L"}
+## for little-endian).
 ##
 ## If the argument @qcode{"arch"} is specified, return a string indicating the
 ## architecture of the computer on which Octave is running.
 ## @seealso{isunix, ismac, ispc}
 ## @end deftypefn
 
 function [c, maxsize, endian] = computer (a)
 
diff --git a/scripts/miscellaneous/debug.m b/scripts/miscellaneous/debug.m
--- a/scripts/miscellaneous/debug.m
+++ b/scripts/miscellaneous/debug.m
@@ -79,18 +79,18 @@
 ## @item debug_on_interrupt
 ## Configure whether Octave enters debug mode when it encounters an interrupt.
 ##
 ## @item isdebugmode
 ## Return true if in debug mode.
 ## @end table
 ##
 ## @noindent
-## When Octave encounters a breakpoint, or other reason to enter debug
-## mode, the prompt changes to @qcode{"debug>"}.  The workspace of the function
+## When Octave encounters a breakpoint, or other reason to enter debug mode,
+## the prompt changes to @qcode{"debug>"}.  The workspace of the function
 ## where the breakpoint was encountered becomes available and any Octave
 ## command that is valid in that workspace context may be executed.
 ##
 ## @seealso{dbstop, dbclear, dbstatus, dbwhere, dbtype, dbcont, dbquit,
 ## dbstack, dbup, dbdown, keyboard, debug_on_error, debug_on_warning,
 ## debug_on_interrupt, isdebugmode}
 ## @end deftypefn
 
diff --git a/scripts/miscellaneous/dir.m b/scripts/miscellaneous/dir.m
--- a/scripts/miscellaneous/dir.m
+++ b/scripts/miscellaneous/dir.m
@@ -50,18 +50,18 @@
 ## information about the named file.  @var{directory} may also be a list rather
 ## than a single directory or file.
 ##
 ## @var{directory} is subject to shell expansion if it contains any wildcard
 ## characters @samp{*}, @samp{?}, @samp{[]}.  To find a literal example of a
 ## wildcard character the wildcard must be escaped using the backslash operator
 ## @samp{\}.
 ##
-## Note that for symbolic links, @code{dir} returns information about
-## the file that the symbolic link points to rather than the link itself.
+## Note that for symbolic links, @code{dir} returns information about the
+## file that the symbolic link points to rather than the link itself. 
 ## However, if the link points to a nonexistent file, @code{dir} returns
 ## information about the link.
 ## @seealso{ls, readdir, glob, what, stat, lstat}
 ## @end deftypefn
 
 ## Author: jwe
 
 ## FIXME: This is quite slow for large directories.
diff --git a/scripts/miscellaneous/edit.m b/scripts/miscellaneous/edit.m
--- a/scripts/miscellaneous/edit.m
+++ b/scripts/miscellaneous/edit.m
@@ -17,77 +17,77 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} edit @var{name}
 ## @deftypefnx {Command} {} edit @var{field} @var{value}
 ## @deftypefnx {Command} {@var{value} =} edit get @var{field}
 ## Edit the named function, or change editor settings.
 ##
-## If @code{edit} is called with the name of a file or function as
-## its argument it will be opened in the text editor defined by @env{EDITOR}.
+## If @code{edit} is called with the name of a file or function as its
+## argument it will be opened in the text editor defined by @env{EDITOR}.
 ##
 ## @itemize @bullet
 ## @item
-## If the function @var{name} is available in a file on your path and
-## that file is modifiable, then it will be edited in place.  If it
-## is a system function, then it will first be copied to the directory
-## @env{HOME} (see below) and then edited.
-## If no file is found, then the m-file
-## variant, ending with ".m", will be considered.  If still no file
-## is found, then variants with a leading "@@" and then with both a
-## leading "@@" and trailing ".m" will be considered.
+## If the function @var{name} is available in a file on your path and that
+## file is modifiable, then it will be edited in place.  If it is a system
+## function, then it will first be copied to the directory @env{HOME} (see
+## below) and then edited.  If no file is found, then the m-file variant,
+## ending with @qcode{".m"}, will be considered.  If still no file is found,
+## then variants with a leading @qcode{"@@"} and then with both a leading
+## @qcode{"@@"} and trailing @qcode{".m"} will be considered.
 ##
 ## @item
-## If @var{name} is the name of a function defined in the interpreter but
-## not in an m-file, then an m-file will be created in @env{HOME}
-## to contain that function along with its current definition.
+## If @var{name} is the name of a function defined in the interpreter but not
+## in an m-file, then an m-file will be created in @env{HOME} to contain that
+## function along with its current definition.
 ##
 ## @item
 ## If @code{@var{name}.cc} is specified, then it will search for
 ## @code{@var{name}.cc} in the path and try to modify it, otherwise it will
 ## create a new @file{.cc} file in the current directory.  If @var{name} happens
 ## to be an m-file or interpreter defined function, then the text of that
 ## function will be inserted into the .cc file as a comment.
 ##
 ## @item
 ## If @file{@var{name}.ext} is on your path then it will be edited, otherwise
 ## the editor will be started with @file{@var{name}.ext} in the current
 ## directory as the filename.  If @file{@var{name}.ext} is not modifiable,
 ## it will be copied to @env{HOME} before editing.
 ##
 ## @strong{Warning:} You may need to clear @var{name} before the new definition
-## is available.  If you are editing a .cc file, you will need
-## to execute @code{mkoctfile @file{@var{name}.cc}} before the definition
-## will be available.
+## is available.  If you are editing a .cc file, you will need to execute
+## @code{mkoctfile @file{@var{name}.cc}} before the definition will be
+## available.
 ## @end itemize
 ##
-## If @code{edit} is called with @var{field} and @var{value} variables,
-## the value of the control field @var{field} will be set to @var{value}.
-## If an output argument is requested and the first input argument is @code{get}
-## then @code{edit} will return the value of the control field @var{field}.
+## If @code{edit} is called with @var{field} and @var{value} variables, the
+## value of the control field @var{field} will be set to @var{value}.  If an
+## output argument is requested and the first input argument is @code{get}
+## then @code{edit} will return the value of the control field @var{field}. 
 ## If the control field does not exist, edit will return a structure
-## containing all fields and values.  Thus, @code{edit get all} returns
-## a complete control structure.
+## containing all fields and values.  Thus, @code{edit get all} returns a
+## complete control structure.
+##
 ## The following control fields are used:
 ##
 ## @table @samp
 ## @item home
-## This is the location of user local m-files.  Be sure it is in your
-## path.  The default is @file{~/octave}.
+## This is the location of user local m-files.  Be sure it is in your path. 
+## The default is @file{~/octave}.
 ##
 ## @item author
-## This is the name to put after the "## Author:" field of new functions.
-## By default it guesses from the @code{gecos} field of the password database.
+## This is the name to put after the "## Author:" field of new functions.  By
+## default it guesses from the @code{gecos} field of the password database.
 ##
 ## @item email
-## This is the e-mail address to list after the name in the author field.
-## By default it guesses @code{<$LOGNAME@@$HOSTNAME>}, and if @code{$HOSTNAME}
-## is not defined it uses @code{uname -n}.  You probably want to override this.
-## Be sure to use the format @code{<user@@host>}.
+## This is the e-mail address to list after the name in the author field.  By
+## default it guesses @code{<$LOGNAME@@$HOSTNAME>}, and if @code{$HOSTNAME}
+## is not defined it uses @code{uname -n}.  You probably want to override
+## this.  Be sure to use the format @code{@email{user@@host}}.
 ##
 ## @item license
 ##
 ## @table @samp
 ## @item gpl
 ## GNU General Public License (default).
 ##
 ## @item bsd
diff --git a/scripts/miscellaneous/error_ids.m b/scripts/miscellaneous/error_ids.m
--- a/scripts/miscellaneous/error_ids.m
+++ b/scripts/miscellaneous/error_ids.m
@@ -35,18 +35,18 @@
 ## @item Octave:invalid-indexing
 ## Indicates that a data-type was indexed incorrectly, e.g., real-value index
 ## for arrays, nonexistent field of a structure.
 ##
 ## @item Octave:bad-alloc
 ## Indicates that memory couldn't be allocated.
 ##
 ## @item Octave:undefined-function
-## Indicates a call to a function that is not defined.  The function may
-## exist but Octave is unable to find it in the search path.
+## Indicates a call to a function that is not defined.  The function may exist
+## but Octave is unable to find it in the search path.
 ##
 ## @end table
 ##
 
 function error_ids ()
   help ("error_ids");
 endfunction
 
diff --git a/scripts/miscellaneous/fileattrib.m b/scripts/miscellaneous/fileattrib.m
--- a/scripts/miscellaneous/fileattrib.m
+++ b/scripts/miscellaneous/fileattrib.m
@@ -15,18 +15,18 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{status}, @var{result}, @var{msgid}] =} fileattrib (@var{file})
 ## Return information about @var{file}.
 ##
-## If successful, @var{status} is 1, with @var{result} containing a
-## structure with the following fields:
+## If successful, @var{status} is 1, with @var{result} containing a structure
+## with the following fields:
 ##
 ## @table @code
 ## @item Name
 ## Full name of @var{file}.
 ##
 ## @item archive
 ## True if @var{file} is an archive (Windows).
 ##
@@ -37,40 +37,36 @@
 ## True if @var{file} is a hidden file (Windows).
 ##
 ## @item directory
 ## True if @var{file} is a directory.
 ##
 ## @item  UserRead
 ## @itemx GroupRead
 ## @itemx OtherRead
-## True if the user (group; other users) has read permission for
-## @var{file}.
+## True if the user (group; other users) has read permission for @var{file}.
 ##
 ## @item  UserWrite
 ## @itemx GroupWrite
 ## @itemx OtherWrite
-## True if the user (group; other users) has write permission for
-## @var{file}.
+## True if the user (group; other users) has write permission for @var{file}.
 ##
 ## @item  UserExecute
 ## @itemx GroupExecute
 ## @itemx OtherExecute
-## True if the user (group; other users) has execute permission for
-## @var{file}.
+## True if the user (group; other users) has execute permission for @var{file}.
 ## @end table
 ##
-## If an attribute does not apply (i.e., archive on a Unix system) then
-## the field is set to NaN.
+## If an attribute does not apply (i.e., archive on a Unix system) then the
+## field is set to NaN.
 ##
-## With no input arguments, return information about the current
-## directory.
+## With no input arguments, return information about the current directory.
 ##
-## If @var{file} contains globbing characters, return information about
-## all the matching files.
+## If @var{file} contains globbing characters, return information about all
+## the matching files.
 ## @seealso{glob}
 ## @end deftypefn
 
 function [status, msg, msgid] = fileattrib (file)
 
   status = true;
   msg = "";
   msgid = "";
diff --git a/scripts/miscellaneous/fullfile.m b/scripts/miscellaneous/fullfile.m
--- a/scripts/miscellaneous/fullfile.m
+++ b/scripts/miscellaneous/fullfile.m
@@ -16,36 +16,36 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{filename} =} fullfile (@var{dir1}, @var{dir2}, @dots{}, @var{file})
 ## @deftypefnx {Function File} {@var{filenames} =} fullfile (@dots{}, @var{files})
 ## Build complete filename from separate parts.
 ##
-## Joins any number of path components intelligently.  The return value
-## is the concatenation of each component with exactly one file separator
+## Joins any number of path components intelligently.  The return value is
+## the concatenation of each component with exactly one file separator
 ## between each non empty part and at most one leading and/or trailing file
 ## separator.
 ##
 ## If the last component part is a cell array, returns a cell array of
 ## filepaths, one for each element in the last component, e.g.:
 ##
 ## @example
 ## @group
 ## fullfile ("/home/username", "data", @{"f1.csv", "f2.csv", "f3.csv"@})
 ## @result{}  /home/username/data/f1.csv
 ##     /home/username/data/f2.csv
 ##     /home/username/data/f3.csv
 ## @end group
 ## @end example
 ##
-## On Windows systems, while forward slash file separators do work, they
-## are replaced by backslashes; in addition drive letters are stripped of
-## leading file separators to obtain a valid file path.
+## On Windows systems, while forward slash file separators do work, they are
+## replaced by backslashes; in addition drive letters are stripped of leading
+## file separators to obtain a valid file path.
 ##
 ## @seealso{fileparts, filesep}
 ## @end deftypefn
 
 ## Author: Carnë Draug <carandraug@octave.org>
 
 function filename = fullfile (varargin)
 
diff --git a/scripts/miscellaneous/genvarname.m b/scripts/miscellaneous/genvarname.m
--- a/scripts/miscellaneous/genvarname.m
+++ b/scripts/miscellaneous/genvarname.m
@@ -16,45 +16,45 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{varname} =} genvarname (@var{str})
 ## @deftypefnx {Function File} {@var{varname} =} genvarname (@var{str}, @var{exclusions})
 ## Create valid unique variable name(s) from @var{str}.
 ##
-## If @var{str} is a cellstr, then a unique variable is created for each
-## cell in @var{str}.
+## If @var{str} is a cellstr, then a unique variable is created for each cell
+## in @var{str}.
 ##
 ## @example
 ## @group
 ## genvarname (@{"foo", "foo"@})
 ##   @result{}
 ##      @{
 ##        [1,1] = foo
 ##        [1,2] = foo1
 ##      @}
 ## @end group
 ## @end example
 ##
 ## If @var{exclusions} is given, then the variable(s) will be unique to each
-## other and to @var{exclusions} (@var{exclusions} may be either a string or
-## a cellstr).
+## other and to @var{exclusions} (@var{exclusions} may be either a string or a
+## cellstr).
 ##
 ## @example
 ## @group
 ## x = 3.141;
 ## genvarname ("x", who ())
 ##   @result{} x1
 ## @end group
 ## @end example
 ##
 ## Note that the result is a char array or cell array of strings, not the
-## variables themselves.  To define a variable, @code{eval()} can be
-## used.  The following trivial example sets @code{x} to @code{42}.
+## variables themselves.  To define a variable, @code{eval()} can be used. 
+## The following trivial example sets @code{x} to @code{42}.
 ##
 ## @example
 ## @group
 ## name = genvarname ("x");
 ## eval ([name " = 42"]);
 ##   @result{} x =  42
 ## @end group
 ## @end example
@@ -73,18 +73,18 @@
 ##        a1 =  2
 ##        a2 =  3
 ##      @}
 ## @end group
 ## @end example
 ##
 ## Since variable names may only contain letters, digits, and underscores,
 ## @code{genvarname} will replace any sequence of disallowed characters with
-## an underscore.  Also, variables may not begin with a digit; in this
-## case an @samp{x} is added before the variable name.
+## an underscore.  Also, variables may not begin with a digit; in this case
+## an @samp{x} is added before the variable name.
 ##
 ## Variable names beginning and ending with two underscores @qcode{"__"} are
 ## valid, but they are used internally by Octave and should generally be
 ## avoided; therefore, @code{genvarname} will not generate such names.
 ##
 ## @code{genvarname} will also ensure that returned names do not clash with
 ## keywords such as @qcode{"for"} and @qcode{"if"}.  A number will be
 ## appended if necessary.  Note, however, that this does @strong{not} include
diff --git a/scripts/miscellaneous/gzip.m b/scripts/miscellaneous/gzip.m
--- a/scripts/miscellaneous/gzip.m
+++ b/scripts/miscellaneous/gzip.m
@@ -16,26 +16,26 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{filelist} =} gzip (@var{files})
 ## @deftypefnx {Function File} {@var{filelist} =} gzip (@var{files}, @var{dir})
 ## Compress the list of files and directories specified in @var{files}.
 ##
-## @var{files} is a character array or cell array of strings.  Shell
-## wildcards in the filename such as @samp{*} or @samp{?} are accepted and
-## expanded.  Each file is compressed separately and a new file with a
-## @file{".gz"} extension is created.  The original files are not modified,
-## but existing compressed files will be silently overwritten.  If a directory
-## is specified then @code{gzip} recursively compresses all files in the
+## @var{files} is a character array or cell array of strings.  Shell wildcards
+## in the filename such as @samp{*} or @samp{?} are accepted and expanded.
+## Each file is compressed separately and a new file with a @file{".gz"}
+## extension is created.  The original files are not modified, but existing
+## compressed files will be silently overwritten.  If a directory is
+## specified then @code{gzip} recursively compresses all files in the
 ## directory.
 ##
 ## If @var{dir} is defined the compressed files are placed in this directory,
-## rather than the original directory where the uncompressed file resides.
+## rather than the original directory where the uncompressed file resides. 
 ## If @var{dir} does not exist it is created.
 ##
 ## The optional output @var{filelist} is a list of the compressed files.
 ## @seealso{gunzip, unpack, bzip2, zip, tar}
 ## @end deftypefn
 
 function filelist = gzip (varargin)
 
diff --git a/scripts/miscellaneous/mkoctfile.m b/scripts/miscellaneous/mkoctfile.m
--- a/scripts/miscellaneous/mkoctfile.m
+++ b/scripts/miscellaneous/mkoctfile.m
@@ -15,25 +15,25 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} mkoctfile [-options] file @dots{}
 ## @deftypefnx {Function File} {[@var{output}, @var{status}] =} mkoctfile (@dots{})
 ##
-## The @code{mkoctfile} function compiles source code written in C,
-## C++, or Fortran.  Depending on the options used with @code{mkoctfile}, the
+## The @code{mkoctfile} function compiles source code written in C, C++, or
+## Fortran.  Depending on the options used with @code{mkoctfile}, the
 ## compiled code can be called within Octave or can be used as a stand-alone
 ## application.
 ##
 ## @code{mkoctfile} can be called from the shell prompt or from the Octave
-## prompt.  Calling it from the Octave prompt simply delegates the
-## call to the shell prompt.  The output is stored in the @var{output}
-## variable and the exit status in the @var{status} variable.
+## prompt.  Calling it from the Octave prompt simply delegates the call to
+## the shell prompt.  The output is stored in the @var{output} variable and
+## the exit status in the @var{status} variable.
 ##
 ## @code{mkoctfile} accepts the following options, all of which are optional
 ## except for the file name of the code you wish to compile:
 ##
 ## @table @samp
 ## @item -I DIR
 ## Add the include directory DIR to compile commands.
 ##
@@ -64,19 +64,18 @@
 ## @item -c
 ## Compile but do not link.
 ##
 ## @item -g
 ## Enable debugging options for compilers.
 ##
 ## @item  -o FILE
 ## @itemx --output FILE
-## Output file name.  Default extension is .oct
-## (or .mex if @samp{--mex} is specified) unless linking
-## a stand-alone executable.
+## Output file name.  Default extension is .oct (or .mex if @samp{--mex} is
+## specified) unless linking a stand-alone executable.
 ##
 ## @item  -p VAR
 ## @itemx --print VAR
 ## Print the configuration variable VAR@.  Recognized variables are:
 ##
 ## @example
 ##    ALL_CFLAGS                  INCFLAGS
 ##    ALL_CXXFLAGS                INCLUDEDIR
@@ -106,18 +105,18 @@
 ##    FLIBS                       XTRA_CFLAGS
 ##    FPICFLAG                    XTRA_CXXFLAGS
 ## @end example
 ##
 ## @item --link-stand-alone
 ## Link a stand-alone executable file.
 ##
 ## @item --mex
-## Assume we are creating a MEX file.  Set the default output extension
-## to ".mex".
+## Assume we are creating a MEX file.  Set the default output extension to
+## ".mex".
 ##
 ## @item  -s
 ## @itemx --strip
 ## Strip the output file.
 ##
 ## @item  -v
 ## @itemx --verbose
 ## Echo commands as they are executed.
diff --git a/scripts/miscellaneous/news.m b/scripts/miscellaneous/news.m
--- a/scripts/miscellaneous/news.m
+++ b/scripts/miscellaneous/news.m
@@ -17,16 +17,17 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} news
 ## @deftypefnx {Command} {} news @var{package}
 ## Display the current NEWS file for Octave or an installed package.
 ##
 ## When called without an argument, display the NEWS file for Octave.
+##
 ## When given a package name @var{package}, display the current NEWS file for
 ## that package.
 ## @seealso{ver, pkg}
 ## @end deftypefn
 
 function news (package = "octave")
 
   if (nargin > 1)
diff --git a/scripts/miscellaneous/open.m b/scripts/miscellaneous/open.m
--- a/scripts/miscellaneous/open.m
+++ b/scripts/miscellaneous/open.m
@@ -14,18 +14,18 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{output} =} open @var{file}
 ## @deftypefnx {Function File} {@var{output} =} open (@var{file})
-## Open the file @var{file} in Octave or in an external application
-## based on the file type as determined by the file name extension.
+## Open the file @var{file} in Octave or in an external application based on
+## the file type as determined by the file name extension.
 ##
 ## Recognized file types are
 ##
 ## @table @code
 ## @item .m
 ## Open file in the editor.
 ##
 ## @item .mat
diff --git a/scripts/miscellaneous/parseparams.m b/scripts/miscellaneous/parseparams.m
--- a/scripts/miscellaneous/parseparams.m
+++ b/scripts/miscellaneous/parseparams.m
@@ -16,18 +16,20 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{reg}, @var{prop}] =} parseparams (@var{params})
 ## @deftypefnx {Function File} {[@var{reg}, @var{var1}, @dots{}] =} parseparams (@var{params}, @var{name1}, @var{default1}, @dots{})
 ## Return in @var{reg} the cell elements of @var{param} up to the first
-## string element and in @var{prop} all remaining elements beginning
-## with the first string element.  For example:
+## string element and in @var{prop} all remaining elements beginning with the
+## first string element.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## [reg, prop] = parseparams (@{1, 2, "linewidth", 10@})
 ## reg =
 ## @{
 ##   [1,1] = 1
 ##   [1,2] = 2
@@ -35,26 +37,28 @@
 ## prop =
 ## @{
 ##   [1,1] = linewidth
 ##   [1,2] = 10
 ## @}
 ## @end group
 ## @end example
 ##
-## The parseparams function may be used to separate regular numeric
-## arguments from additional arguments given as property/value pairs of
-## the @var{varargin} cell array.
+## The parseparams function may be used to separate regular numeric arguments
+## from additional arguments given as property/value pairs of the
+## @var{varargin} cell array.
 ##
 ## In the second form of the call, available options are specified directly
-## with their default values given as name-value pairs.
-## If @var{params} do not form name-value pairs, or if an option occurs
-## that does not match any of the available options, an error occurs.
-## When called from an m-file function, the error is prefixed with the
-## name of the caller function.
+## with their default values given as name-value pairs.  If @var{params} do
+## not form name-value pairs, or if an option occurs that does not match any
+## of the available options, an error occurs.
+##
+## When called from an m-file function, the error is prefixed with the name
+## of the caller function.
+##
 ## The matching of options is case-insensitive.
 ##
 ## @seealso{varargin, inputParser}
 ## @end deftypefn
 
 ## Author: Alexander Barth <abarth93@users.sourceforge.net>
 ## Author: Aida Alvera Azcarate <aida@netecho.info>
 
diff --git a/scripts/miscellaneous/recycle.m b/scripts/miscellaneous/recycle.m
--- a/scripts/miscellaneous/recycle.m
+++ b/scripts/miscellaneous/recycle.m
@@ -22,18 +22,17 @@
 ## Query or set the preference for recycling deleted files.
 ##
 ## When recycling is enabled, commands which would permanently erase files
 ## instead move them to a temporary location (such as the directory labeled
 ## Trash).
 ##
 ## Programming Note: This function is provided for @sc{matlab} compatibility,
 ## but recycling is not implemented in Octave.  To help avoid accidental data
-## loss an error will be raised if an attempt is made to enable file
-## recycling.
+## loss an error will be raised if an attempt is made to enable file recycling.
 ## @seealso{delete, rmdir}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = recycle (state)
 
   persistent current_state = "off";
diff --git a/scripts/miscellaneous/run.m b/scripts/miscellaneous/run.m
--- a/scripts/miscellaneous/run.m
+++ b/scripts/miscellaneous/run.m
@@ -16,19 +16,19 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Command} {} run @var{script}
 ## @deftypefnx {Function File} {} run ("@var{script}")
 ## Run @var{script} in the current workspace.
 ##
-## Scripts which reside in directories specified in Octave's load
-## path, and which end with the extension @file{".m"}, can be run simply by
-## typing their name.  For scripts not located on the load path, use @code{run}.
+## Scripts which reside in directories specified in Octave's load path, and
+## which end with the extension @file{".m"}, can be run simply by typing
+## their name.  For scripts not located on the load path, use @code{run}.
 ##
 ## The file name @var{script} can be a bare, fully qualified, or relative
 ## filename and with or without a file extension.  If no extension is specified,
 ## Octave will first search for a script with the @file{".m"} extension before
 ## falling back to the script name without an extension.
 ##
 ## Implementation Note: If @var{script} includes a path component, then
 ## @code{run} first changes the working directory to the directory where
diff --git a/scripts/miscellaneous/swapbytes.m b/scripts/miscellaneous/swapbytes.m
--- a/scripts/miscellaneous/swapbytes.m
+++ b/scripts/miscellaneous/swapbytes.m
@@ -13,18 +13,18 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} swapbytes (@var{x})
-## Swap the byte order on values, converting from little endian to big
-## endian and vice versa.
+## Swap the byte order on values, converting from little endian to big endian
+## and vice versa.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## swapbytes (uint16 (1:4))
 ## @result{} [   256   512   768  1024]
 ## @end group
diff --git a/scripts/miscellaneous/tar.m b/scripts/miscellaneous/tar.m
--- a/scripts/miscellaneous/tar.m
+++ b/scripts/miscellaneous/tar.m
@@ -17,20 +17,20 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{filelist} =} tar (@var{tarfile}, @var{files})
 ## @deftypefnx {Function File} {@var{filelist} =} tar (@var{tarfile}, @var{files}, @var{rootdir})
 ## Pack the list of files and directories specified in @var{files} into the
 ## TAR archive @var{tarfile}.
 ##
-## @var{files} is a character array or cell array of strings.  Shell
-## wildcards in the filename such as @samp{*} or @samp{?} are accepted and
-## expanded.  Directories are recursively traversed and all files are added to
-## the archive.
+## @var{files} is a character array or cell array of strings.  Shell wildcards
+## in the filename such as @samp{*} or @samp{?} are accepted and expanded.
+## Directories are recursively traversed and all files are added to the
+## archive.
 ##
 ## If @var{rootdir} is defined then any files without absolute pathnames are
 ## located relative to @var{rootdir} rather than the current directory.
 ##
 ## The optional output @var{filelist} is a list of the files that were included
 ## in the archive.
 ## @seealso{untar, unpack, bzip2, gzip, zip}
 ## @end deftypefn
diff --git a/scripts/miscellaneous/tmpnam.m b/scripts/miscellaneous/tmpnam.m
--- a/scripts/miscellaneous/tmpnam.m
+++ b/scripts/miscellaneous/tmpnam.m
@@ -18,16 +18,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{fname} =} tmpnam ()
 ## @deftypefnx {Function File} {@var{fname} =} tmpnam (@var{dir})
 ## @deftypefnx {Function File} {@var{fname} =} tmpnam (@var{dir}, @var{prefix})
 ## Return a unique temporary file name as a string.
 ##
 ## If @var{prefix} is omitted, a value of @qcode{"oct-"} is used.
+##
 ## If @var{dir} is also omitted, the default directory for temporary files
 ## (@code{P_tmpdir} is used.  If @var{dir} is provided, it must exist,
 ## otherwise the default directory for temporary files is used.
 ##
 ## Programming Note: Because the named file is not opened by @code{tmpnam},
 ## it is possible, though relatively unlikely, that it will not be available
 ## by the time your program attempts to open it.  If this is a concern,
 ## see @code{tmpfile}.  The functions @code{tmpnam} and @code{tempname} are
diff --git a/scripts/miscellaneous/unpack.m b/scripts/miscellaneous/unpack.m
--- a/scripts/miscellaneous/unpack.m
+++ b/scripts/miscellaneous/unpack.m
@@ -19,18 +19,18 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{files} =} unpack (@var{file})
 ## @deftypefnx {Function File} {@var{files} =} unpack (@var{file}, @var{dir})
 ## @deftypefnx {Function File} {@var{files} =} unpack (@var{file}, @var{dir}, @var{filetype})
 ## Unpack the archive @var{file} based on its extension to the directory
 ## @var{dir}.
 ##
 ## If @var{file} is a list of strings, then each file is unpacked
-## individually.  Shell wildcards in the filename such as @samp{*} or @samp{?}
-## are accepted and expanded.
+## individually.  Shell wildcards in the filename such as @samp{*} or
+## @samp{?} are accepted and expanded.
 ##
 ## If @var{dir} is not specified or is empty (@code{[]}), it defaults to the
 ## current directory.  If a directory is in the file list, then @var{filetype}
 ## must also be specified.
 ##
 ## The specific archive filetype is inferred from the extension of the file.
 ## The @var{filetype} may also be specified directly using a string which
 ## corresponds to a known extension.
diff --git a/scripts/miscellaneous/what.m b/scripts/miscellaneous/what.m
--- a/scripts/miscellaneous/what.m
+++ b/scripts/miscellaneous/what.m
@@ -54,19 +54,19 @@
 ##
 ## @item classes
 ## Cell array of class directories (@file{@@@var{classname}/})
 ##
 ## @item packages
 ## Cell array of package directories (@file{+@var{pkgname}/})
 ## @end table
 ##
-## Compatibility Note: Octave does not support mdl, slx, and p files; nor
-## does it support package directories.  @code{what} will always return an
-## empty list for these categories.
+## Compatibility Note: Octave does not support mdl, slx, and p files; nor does
+## it support package directories.  @code{what} will always return an empty
+## list for these categories.
 ## @seealso{which, ls, exist}
 ## @end deftypefn
 
 function retval = what (dir)
 
   if (nargin > 1)
     print_usage ();
   endif
diff --git a/scripts/sparse/bicg.m b/scripts/sparse/bicg.m
--- a/scripts/sparse/bicg.m
+++ b/scripts/sparse/bicg.m
@@ -18,36 +18,35 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} bicg (@var{A}, @var{b}, @var{rtol}, @var{maxit}, @var{M1}, @var{M2}, @var{x0})
 ## @deftypefnx {Function File} {@var{x} =} bicg (@var{A}, @var{b}, @var{rtol}, @var{maxit}, @var{P})
 ## @deftypefnx {Function File} {[@var{x}, @var{flag}, @var{relres}, @var{iter}, @var{resvec}] =} bicg (@var{A}, @var{b}, @dots{})
 ## Solve @code{A x = b} using the Bi-conjugate gradient iterative method.
 ##
 ## @itemize @minus
-## @item @var{rtol} is the relative tolerance, if not given
-## or set to [] the default value 1e-6 is used.
+## @item @var{rtol} is the relative tolerance, if not given or set to [] the
+## default value 1e-6 is used.
 ##
-## @item @var{maxit} the maximum number of outer iterations,
-## if not given or set to [] the default value
-## @code{min (20, numel (b))} is used.
+## @item @var{maxit} the maximum number of outer iterations, if not given or
+## set to [] the default value @code{min (20, numel (b))} is used.
 ##
-## @item @var{x0} the initial guess, if not given or set to []
-## the default value @code{zeros (size (b))} is used.
+## @item @var{x0} the initial guess, if not given or set to [] the default
+## value @code{zeros (size (b))} is used.
 ## @end itemize
 ##
-## @var{A} can be passed as a matrix or as a function handle or
-## inline function @code{f} such that @code{f(x, "notransp") = A*x}
-## and @code{f(x, "transp") = A'*x}.
+## @var{A} can be passed as a matrix or as a function handle or inline function
+## @code{f} such that @code{f(x, "notransp") = A*x} and
+## @code{f(x, "transp") = A'*x}.
 ##
-## The preconditioner @var{P} is given as @code{P = M1 * M2}.
-## Both @var{M1} and @var{M2} can be passed as a matrix or as
-## a function handle or inline function @code{g} such that
-## @code{g(x, "notransp") = M1 \ x} or @code{g(x, "notransp") = M2 \ x} and
-## @code{g(x, "transp") = M1' \ x} or @code{g(x, "transp") = M2' \ x}.
+## The preconditioner @var{P} is given as @code{P = M1 * M2}.  Both @var{M1}
+## and @var{M2} can be passed as a matrix or as a function handle or inline
+## function @code{g} such that @code{g(x, "notransp") = M1 \ x} or
+## @code{g(x, "notransp") = M2 \ x} and @code{g(x, "transp") = M1' \ x} or
+## @code{g(x, "transp") = M2' \ x}.
 ##
 ## If called with more than one output parameter
 ##
 ## @itemize @minus
 ## @item @var{flag} indicates the exit status:
 ##
 ## @itemize @minus
 ## @item 0: iteration converged to the within the chosen tolerance
diff --git a/scripts/sparse/bicgstab.m b/scripts/sparse/bicgstab.m
--- a/scripts/sparse/bicgstab.m
+++ b/scripts/sparse/bicgstab.m
@@ -20,34 +20,32 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} bicgstab (@var{A}, @var{b}, @var{rtol}, @var{maxit}, @var{M1}, @var{M2}, @var{x0})
 ## @deftypefnx {Function File} {@var{x} =} bicgstab (@var{A}, @var{b}, @var{rtol}, @var{maxit}, @var{P})
 ## @deftypefnx {Function File} {[@var{x}, @var{flag}, @var{relres}, @var{iter}, @var{resvec}] =} bicgstab (@var{A}, @var{b}, @dots{})
 ## Solve @code{A x = b} using the stabilizied Bi-conjugate gradient iterative
 ## method.
 ##
 ## @itemize @minus
-## @item @var{rtol} is the relative tolerance, if not given or set to
-## [] the default value 1e-6 is used.
+## @item @var{rtol} is the relative tolerance, if not given or set to [] the
+## default value 1e-6 is used.
 ##
-## @item @var{maxit} the maximum number of outer iterations, if not
-## given or set to [] the default value @code{min (20, numel (b))} is
-## used.
+## @item @var{maxit} the maximum number of outer iterations, if not given or
+## set to [] the default value @code{min (20, numel (b))} is used.
 ##
-## @item @var{x0} the initial guess, if not given or set to [] the
-## default value @code{zeros (size (b))} is used.
+## @item @var{x0} the initial guess, if not given or set to [] the default
+## value @code{zeros (size (b))} is used.
 ## @end itemize
 ##
-## @var{A} can be passed as a matrix or as a function handle or
-## inline function @code{f} such that @code{f(x) = A*x}.
+## @var{A} can be passed as a matrix or as a function handle or inline
+## function @code{f} such that @code{f(x) = A*x}.
 ##
-## The preconditioner @var{P} is given as @code{P = M1 * M2}.
-## Both @var{M1} and @var{M2} can be passed as a matrix or as a function
-## handle or inline function @code{g} such that @code{g(x) = M1 \ x} or
-## @code{g(x) = M2 \ x}.
+## The preconditioner @var{P} is given as @code{P = M1 * M2}.  Both @var{M1}
+## and @var{M2} can be passed as a matrix or as a function handle or inline
+## function @code{g} such that @code{g(x) = M1 \ x} or @code{g(x) = M2 \ x}.
 ##
 ## If called with more than one output parameter
 ##
 ## @itemize @minus
 ## @item @var{flag} indicates the exit status:
 ##
 ## @itemize @minus
 ## @item 0: iteration converged to the within the chosen tolerance
diff --git a/scripts/sparse/cgs.m b/scripts/sparse/cgs.m
--- a/scripts/sparse/cgs.m
+++ b/scripts/sparse/cgs.m
@@ -20,34 +20,32 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} cgs (@var{A}, @var{b}, @var{rtol}, @var{maxit}, @var{M1}, @var{M2}, @var{x0})
 ## @deftypefnx {Function File} {@var{x} =} cgs (@var{A}, @var{b}, @var{rtol}, @var{maxit}, @var{P})
 ## @deftypefnx {Function File} {[@var{x}, @var{flag}, @var{relres}, @var{iter}, @var{resvec}] =} cgs (@var{A}, @var{b}, @dots{})
 ## Solve @code{A x = b}, where @var{A} is a square matrix, using the
 ## Conjugate Gradients Squared method.
 ##
 ## @itemize @minus
-## @item @var{rtol} is the relative tolerance, if not given or set to []
-## the default value 1e-6 is used.
+## @item @var{rtol} is the relative tolerance, if not given or set to [] the
+## default value 1e-6 is used.
 ##
-## @item @var{maxit} the maximum number of outer iterations, if not
-## given or set to [] the default value @code{min (20, numel (b))} is
-## used.
+## @item @var{maxit} the maximum number of outer iterations, if not given or
+## set to [] the default value @code{min (20, numel (b))} is used.
 ##
-## @item @var{x0} the initial guess, if not given or set to [] the
-## default value @code{zeros (size (b))} is used.
+## @item @var{x0} the initial guess, if not given or set to [] the default
+## value @code{zeros (size (b))} is used.
 ## @end itemize
 ##
-## @var{A} can be passed as a matrix or as a function handle or
-## inline function @code{f} such that @code{f(x) = A*x}.
+## @var{A} can be passed as a matrix or as a function handle or inline
+## function @code{f} such that @code{f(x) = A*x}.
 ##
-## The preconditioner @var{P} is given as @code{P = M1 * M2}.
-## Both @var{M1} and @var{M2} can be passed as a matrix or as a function
-## handle or inline function @code{g} such that @code{g(x) = M1 \ x} or
-## @code{g(x) = M2 \ x}.
+## The preconditioner @var{P} is given as @code{P = M1 * M2}.  Both @var{M1}
+## and @var{M2} can be passed as a matrix or as a function handle or inline
+## function @code{g} such that @code{g(x) = M1 \ x} or @code{g(x) = M2 \ x}.
 ##
 ## If called with more than one output parameter
 ##
 ## @itemize @minus
 ## @item @var{flag} indicates the exit status:
 ##
 ## @itemize @minus
 ## @item 0: iteration converged to the within the chosen tolerance
diff --git a/scripts/sparse/colperm.m b/scripts/sparse/colperm.m
--- a/scripts/sparse/colperm.m
+++ b/scripts/sparse/colperm.m
@@ -14,20 +14,22 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{p} =} colperm (@var{s})
 ## Return the column permutations such that the columns of
-## @code{@var{s} (:, @var{p})} are ordered in terms of increase number
-## of nonzero elements.  If @var{s} is symmetric, then @var{p} is chosen
-## such that @code{@var{s} (@var{p}, @var{p})} orders the rows and
-## columns with increasing number of nonzeros elements.
+## @code{@var{s} (:, @var{p})} are ordered in terms of increasing number of
+## nonzero elements.
+##
+## If @var{s} is symmetric, then @var{p} is chosen such that
+## @code{@var{s} (@var{p}, @var{p})} orders the rows and columns with
+## increasing number of nonzeros elements.
 ## @end deftypefn
 
 function p = colperm (s)
 
   if (nargin != 1)
     print_usage ();
   endif
 
diff --git a/scripts/sparse/eigs.m b/scripts/sparse/eigs.m
--- a/scripts/sparse/eigs.m
+++ b/scripts/sparse/eigs.m
@@ -33,18 +33,20 @@
 ## @deftypefnx {Function File} {@var{d} =} eigs (@var{af}, @var{n}, @var{B}, @var{k}, @var{sigma})
 ## @deftypefnx {Function File} {@var{d} =} eigs (@var{af}, @var{n}, @var{k}, @var{sigma}, @var{opts})
 ## @deftypefnx {Function File} {@var{d} =} eigs (@var{af}, @var{n}, @var{B}, @var{k}, @var{sigma}, @var{opts})
 ## @deftypefnx {Function File} {[@var{V}, @var{d}] =} eigs (@var{A}, @dots{})
 ## @deftypefnx {Function File} {[@var{V}, @var{d}] =} eigs (@var{af}, @var{n}, @dots{})
 ## @deftypefnx {Function File} {[@var{V}, @var{d}, @var{flag}] =} eigs (@var{A}, @dots{})
 ## @deftypefnx {Function File} {[@var{V}, @var{d}, @var{flag}] =} eigs (@var{af}, @var{n}, @dots{})
 ## Calculate a limited number of eigenvalues and eigenvectors of @var{A},
-## based on a selection criteria.  The number of eigenvalues and eigenvectors to
-## calculate is given by @var{k} and defaults to 6.
+## based on a selection criteria.
+##
+## The number of eigenvalues and eigenvectors to calculate is given by
+## @var{k} and defaults to 6.
 ##
 ## By default, @code{eigs} solve the equation
 ## @tex
 ## $A \nu = \lambda \nu$,
 ## @end tex
 ## @ifinfo
 ## @code{A * v = lambda * v},
 ## @end ifinfo
@@ -142,34 +144,34 @@
 ## The permutation vector of the Cholesky@tie{}factorization of @var{B} if
 ## @code{cholB} is true.  That is @code{chol (@var{B}(permB, permB))}.  The
 ## default is @code{1:@var{n}}.
 ##
 ## @end table
 ##
 ## It is also possible to represent @var{A} by a function denoted @var{af}.
 ## @var{af} must be followed by a scalar argument @var{n} defining the length
-## of the vector argument accepted by @var{af}.  @var{af} can be
-## a function handle, an inline function, or a string.  When @var{af} is a
-## string it holds the name of the function to use.
+## of the vector argument accepted by @var{af}.  @var{af} can be a function
+## handle, an inline function, or a string.  When @var{af} is a string it
+## holds the name of the function to use.
 ##
-## @var{af} is a function of the form @code{y = af (x)}
-## where the required return value of @var{af} is determined by
-## the value of @var{sigma}.  The four possible forms are
+## @var{af} is a function of the form @code{y = af (x)} where the required
+## return value of @var{af} is determined by the value of @var{sigma}.  The
+## four possible forms are
 ##
 ## @table @code
 ## @item A * x
 ## if @var{sigma} is not given or is a string other than "sm".
 ##
 ## @item A \ x
 ## if @var{sigma} is 0 or "sm".
 ##
 ## @item (A - sigma * I) \ x
-## for the standard eigenvalue problem, where @code{I} is the identity matrix of
-## the same size as @var{A}.
+## for the standard eigenvalue problem, where @code{I} is the identity matrix
+## of the same size as @var{A}.
 ##
 ## @item (A - sigma * B) \ x
 ## for the general eigenvalue problem.
 ## @end table
 ##
 ## The return arguments of @code{eigs} depend on the number of return arguments
 ## requested.  With a single return argument, a vector @var{d} of length @var{k}
 ## is returned containing the @var{k} eigenvalues that have been found.  With
diff --git a/scripts/sparse/etreeplot.m b/scripts/sparse/etreeplot.m
--- a/scripts/sparse/etreeplot.m
+++ b/scripts/sparse/etreeplot.m
@@ -15,19 +15,20 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} etreeplot (@var{A})
 ## @deftypefnx {Function File} {} etreeplot (@var{A}, @var{node_style}, @var{edge_style})
 ## Plot the elimination tree of the matrix @var{A} or
-## @tcode{@var{A}+@var{A}'} if @var{A} in not symmetric.  The optional
-## parameters @var{node_style} and @var{edge_style} define the output
-## style.
+## @tcode{@var{A}+@var{A}'} if @var{A} in not symmetric.
+##
+## The optional parameters @var{node_style} and @var{edge_style} define the
+## output style.
 ## @seealso{treeplot, gplot}
 ## @end deftypefn
 
 function etreeplot (A, varargin)
 
   if (nargin < 1)
     print_usage ();
   endif
diff --git a/scripts/sparse/gmres.m b/scripts/sparse/gmres.m
--- a/scripts/sparse/gmres.m
+++ b/scripts/sparse/gmres.m
@@ -15,40 +15,39 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} gmres (@var{A}, @var{b}, @var{m}, @var{rtol}, @var{maxit}, @var{M1}, @var{M2}, @var{x0})
 ## @deftypefnx {Function File} {@var{x} =} gmres (@var{A}, @var{b}, @var{m}, @var{rtol}, @var{maxit}, @var{P})
 ## @deftypefnx {Function File} {[@var{x}, @var{flag}, @var{relres}, @var{iter}, @var{resvec}] =} gmres (@dots{})
-## Solve @code{A x = b} using the Preconditioned GMRES iterative method
-## with restart, a.k.a. PGMRES(m).
+## Solve @code{A x = b} using the Preconditioned GMRES iterative method with
+## restart, a.k.a. PGMRES(m).
 ##
 ## @itemize @minus
 ## @item @var{rtol} is the relative tolerance,
 ## if not given or set to [] the default value 1e-6 is used.
 ##
-## @item @var{maxit} is the maximum number of outer iterations,
-## if not given or set to [] the default value
-## @code{min (10, numel (b) / restart)} is used.
+## @item @var{maxit} is the maximum number of outer iterations, if not given or
+## set to [] the default value @code{min (10, numel (b) / restart)} is used.
 ##
 ## @item @var{x0} is the initial guess,
 ## if not given or set to [] the default value @code{zeros (size (b))} is used.
 ##
 ## @item @var{m} is the restart parameter,
 ## if not given or set to [] the default value @code{numel (b)} is used.
 ## @end itemize
 ##
-## Argument @var{A} can be passed as a matrix, function handle, or
-## inline function @code{f} such that @code{f(x) = A*x}.
+## Argument @var{A} can be passed as a matrix, function handle, or inline
+## function @code{f} such that @code{f(x) = A*x}.
 ##
-## The preconditioner @var{P} is given as @code{P = M1 * M2}.
-## Both @var{M1} and @var{M2} can be passed as a matrix, function handle, or
-## inline function @code{g} such that @code{g(x) = M1\x} or @code{g(x) = M2\x}.
+## The preconditioner @var{P} is given as @code{P = M1 * M2}.  Both @var{M1}
+## and @var{M2} can be passed as a matrix, function handle, or inline function
+## @code{g} such that @code{g(x) = M1\x} or @code{g(x) = M2\x}.
 ##
 ## Besides the vector @var{x}, additional outputs are:
 ##
 ## @itemize @minus
 ## @item @var{flag} indicates the exit status:
 ##
 ## @table @asis
 ## @item 0 : iteration converged to within the specified tolerance
diff --git a/scripts/sparse/gplot.m b/scripts/sparse/gplot.m
--- a/scripts/sparse/gplot.m
+++ b/scripts/sparse/gplot.m
@@ -15,25 +15,24 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} gplot (@var{A}, @var{xy})
 ## @deftypefnx {Function File} {} gplot (@var{A}, @var{xy}, @var{line_style})
 ## @deftypefnx {Function File} {[@var{x}, @var{y}] =} gplot (@var{A}, @var{xy})
-## Plot a graph defined by @var{A} and @var{xy} in the graph theory
-## sense.  @var{A} is the adjacency matrix of the array to be plotted
-## and @var{xy} is an @var{n}-by-2 matrix containing the coordinates of
-## the nodes of the graph.
+## Plot a graph defined by @var{A} and @var{xy} in the graph theory sense.
 ##
-## The optional parameter @var{line_style} defines the output style for
-## the plot.  Called with no output arguments the graph is plotted
-## directly.  Otherwise, return the coordinates of the plot in @var{x}
-## and @var{y}.
+## @var{A} is the adjacency matrix of the array to be plotted and @var{xy} is
+## an @var{n}-by-2 matrix containing the coordinates of the nodes of the graph.
+##
+## The optional parameter @var{line_style} defines the output style for the
+## plot.  Called with no output arguments the graph is plotted directly. 
+## Otherwise, return the coordinates of the plot in @var{x} and @var{y}.
 ## @seealso{treeplot, etreeplot, spy}
 ## @end deftypefn
 
 function [x, y] = gplot (A, xy, line_style)
 
   if (nargin < 2 || nargin > 3 || nargout > 2)
     print_usage ();
   endif
diff --git a/scripts/sparse/ichol.m b/scripts/sparse/ichol.m
--- a/scripts/sparse/ichol.m
+++ b/scripts/sparse/ichol.m
@@ -76,22 +76,22 @@
 ## The relationship preserved is: @code{@var{A} * e = @var{L} * @var{L}' * e},
 ## where e is a vector of ones.
 ## @end table
 ##
 ## @item shape
 ##
 ## @table @asis
 ## @item @qcode{"lower"} (default)
-## Use only the lower triangle of @var{A} and return a lower triangular
-## factor @var{L} such that @tcode{L*L'} approximates @var{A}.
+## Use only the lower triangle of @var{A} and return a lower triangular factor
+## @var{L} such that @tcode{L*L'} approximates @var{A}.
 ##
 ## @item @qcode{"upper"}
-## Use only the upper triangle of @var{A} and return an upper triangular
-## factor @var{U} such that @code{U'*U} approximates @var{A}.
+## Use only the upper triangle of @var{A} and return an upper triangular factor
+## @var{U} such that @code{U'*U} approximates @var{A}.
 ## @end table
 ## @end table
 ##
 ## EXAMPLES
 ##
 ## The following problem demonstrates how to factorize a sample symmetric
 ## positive definite matrix with the full Cholesky decomposition and with the
 ## incomplete one.
diff --git a/scripts/sparse/ilu.m b/scripts/sparse/ilu.m
--- a/scripts/sparse/ilu.m
+++ b/scripts/sparse/ilu.m
@@ -129,18 +129,18 @@
 ## nnz (lu (A))
 ## ans = 126478
 ##
 ## nnz (ilu (A, opts))
 ## ans = 7840
 ## @end group
 ## @end example
 ##
-## This shows that @var{A} has 7,840 nonzeros, the complete LU factorization has
-## 126,478 nonzeros, and the incomplete LU factorization, with 0 level of
+## This shows that @var{A} has 7,840 nonzeros, the complete LU factorization
+## has 126,478 nonzeros, and the incomplete LU factorization, with 0 level of
 ## fill-in, has 7,840 nonzeros, the same amount as @var{A}.  Taken from:
 ## http://www.mathworks.com/help/matlab/ref/ilu.html
 ##
 ## @example
 ## @group
 ## A = gallery ("wathen", 10, 10);
 ## b = sum (A, 2);
 ## tol = 1e-8;
diff --git a/scripts/sparse/pcg.m b/scripts/sparse/pcg.m
--- a/scripts/sparse/pcg.m
+++ b/scripts/sparse/pcg.m
@@ -16,18 +16,19 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} pcg (@var{A}, @var{b}, @var{tol}, @var{maxit}, @var{m1}, @var{m2}, @var{x0}, @dots{})
 ## @deftypefnx {Function File} {[@var{x}, @var{flag}, @var{relres}, @var{iter}, @var{resvec}, @var{eigest}] =} pcg (@dots{})
 ##
 ## Solve the linear system of equations @w{@code{@var{A} * @var{x} = @var{b}}}
-## by means of the Preconditioned Conjugate Gradient iterative method.  The
-## input arguments are
+## by means of the Preconditioned Conjugate Gradient iterative method.
+##
+## The input arguments are
 ##
 ## @itemize
 ## @item
 ## @var{A} can be either a square (preferably sparse) matrix or a function
 ## handle, inline function or string containing the name of a function which
 ## computes @w{@code{@var{A} * @var{x}}}.  In principle, @var{A} should be
 ## symmetric and positive definite; if @code{pcg} finds @var{A} not to be
 ## positive definite, a warning is printed and the @var{flag} output will be
@@ -47,24 +48,23 @@
 ## @var{maxit} is the maximum allowable number of iterations; if @var{maxit}
 ## is omitted or empty then a value of 20 is used.
 ##
 ## @item
 ## @var{m} = @var{m1} * @var{m2} is the (left) preconditioning matrix, so that
 ## the iteration is (theoretically) equivalent to solving by @code{pcg}
 ## @w{@code{@var{P} * @var{x} = @var{m} \ @var{b}}}, with
 ## @w{@code{@var{P} = @var{m} \ @var{A}}}.
-## Note that a proper choice of the preconditioner may dramatically
-## improve the overall performance of the method.  Instead of matrices
-## @var{m1} and @var{m2}, the user may pass two functions which return
-## the results of applying the inverse of @var{m1} and @var{m2} to
-## a vector (usually this is the preferred way of using the preconditioner).
-## If @var{m1} is omitted or empty @code{[]} then no preconditioning is
-## applied.  If @var{m2} is omitted, @var{m} = @var{m1} will be used as
-## a preconditioner.
+## Note that a proper choice of the preconditioner may dramatically improve
+## the overall performance of the method.  Instead of matrices @var{m1} and
+## @var{m2}, the user may pass two functions which return the results of
+## applying the inverse of @var{m1} and @var{m2} to a vector (usually this is
+## the preferred way of using the preconditioner).  If @var{m1} is omitted or
+## empty @code{[]} then no preconditioning is applied.  If @var{m2} is
+## omitted, @var{m} = @var{m1} will be used as a preconditioner.
 ##
 ## @item
 ## @var{x0} is the initial guess.  If @var{x0} is omitted or empty then the
 ## function sets @var{x0} to a zero vector by default.
 ## @end itemize
 ##
 ## The arguments which follow @var{x0} are treated as parameters, and passed in
 ## a proper way to any of the functions (@var{A} or @var{m}) which are passed
@@ -149,43 +149,43 @@
 ##
 ## @sc{Example 3:} @code{pcg} with a preconditioner: @var{l} * @var{u}
 ##
 ## @example
 ## x = pcg (A, b, 1.e-6, 500, l*u)
 ## @end example
 ##
 ## @sc{Example 4:} @code{pcg} with a preconditioner: @var{l} * @var{u}.
-## Faster than @sc{Example 3} since lower and upper triangular matrices
-## are easier to invert
+## Faster than @sc{Example 3} since lower and upper triangular matrices are
+## easier to invert
 ##
 ## @example
 ## x = pcg (A, b, 1.e-6, 500, l, u)
 ## @end example
 ##
 ## @sc{Example 5:} Preconditioned iteration, with full diagnostics.  The
-## preconditioner (quite strange, because even the original matrix
-## @var{A} is trivial) is defined as a function
+## preconditioner (quite strange, because even the original matrix @var{A} is
+## trivial) is defined as a function
 ##
 ## @example
 ## @group
 ## function y = apply_m (x)
 ##   k = floor (length (x) - 2);
 ##   y = x;
 ##   y(1:k) = x(1:k) ./ [1:k]';
 ## endfunction
 ##
 ## [x, flag, relres, iter, resvec, eigest] = ...
 ##                    pcg (A, b, [], [], "apply_m");
 ## semilogy (1:iter+1, resvec);
 ## @end group
 ## @end example
 ##
-## @sc{Example 6:} Finally, a preconditioner which depends on a
-## parameter @var{k}.
+## @sc{Example 6:} Finally, a preconditioner which depends on a parameter
+## @var{k}.
 ##
 ## @example
 ## @group
 ## function y = apply_M (x, varargin)
 ##   K = varargin@{1@};
 ##   y = x;
 ##   y(1:K) = x(1:K) ./ [1:K]';
 ## endfunction
diff --git a/scripts/sparse/pcr.m b/scripts/sparse/pcr.m
--- a/scripts/sparse/pcr.m
+++ b/scripts/sparse/pcr.m
@@ -15,90 +15,92 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} pcr (@var{A}, @var{b}, @var{tol}, @var{maxit}, @var{m}, @var{x0}, @dots{})
 ## @deftypefnx {Function File} {[@var{x}, @var{flag}, @var{relres}, @var{iter}, @var{resvec}] =} pcr (@dots{})
 ##
-## Solve the linear system of equations @code{@var{A} * @var{x} = @var{b}}
-## by means of the Preconditioned Conjugate Residuals iterative
-## method.  The input arguments are
+## Solve the linear system of equations @code{@var{A} * @var{x} = @var{b}} by
+## means of the Preconditioned Conjugate Residuals iterative method.
+##
+## The input arguments are
 ##
 ## @itemize
 ## @item
-## @var{A} can be either a square (preferably sparse) matrix or a
-## function handle, inline function or string containing the name
-## of a function which computes @code{@var{A} * @var{x}}.  In principle
-## @var{A} should be symmetric and non-singular; if @code{pcr}
-## finds @var{A} to be numerically singular, you will get a warning
-## message and the @var{flag} output parameter will be set.
+## @var{A} can be either a square (preferably sparse) matrix or a function
+## handle, inline function or string containing the name of a function which
+## computes @code{@var{A} * @var{x}}.  In principle @var{A} should be
+## symmetric and non-singular; if @code{pcr} finds @var{A} to be numerically
+## singular, you will get a warning message and the @var{flag} output
+## parameter will be set.
 ##
 ## @item
 ## @var{b} is the right hand side vector.
 ##
 ## @item
 ## @var{tol} is the required relative tolerance for the residual error,
 ## @code{@var{b} - @var{A} * @var{x}}.  The iteration stops if
 ## @code{norm (@var{b} - @var{A} * @var{x}) <=
 ##       @var{tol} * norm (@var{b} - @var{A} * @var{x0})}.
 ## If @var{tol} is empty or is omitted, the function sets
 ## @code{@var{tol} = 1e-6} by default.
 ##
 ## @item
-## @var{maxit} is the maximum allowable number of iterations; if
-## @code{[]} is supplied for @code{maxit}, or @code{pcr} has less
-## arguments, a default value equal to 20 is used.
+## @var{maxit} is the maximum allowable number of iterations; if @code{[]} is
+## supplied for @code{maxit}, or @code{pcr} has less arguments, a default
+## value equal to 20 is used.
 ##
 ## @item
 ## @var{m} is the (left) preconditioning matrix, so that the iteration is
-## (theoretically) equivalent to solving by @code{pcr} @code{@var{P} *
-## @var{x} = @var{m} \ @var{b}}, with @code{@var{P} = @var{m} \ @var{A}}.
-## Note that a proper choice of the preconditioner may dramatically
-## improve the overall performance of the method.  Instead of matrix
-## @var{m}, the user may pass a function which returns the results of
-## applying the inverse of @var{m} to a vector (usually this is the
-## preferred way of using the preconditioner).  If @code{[]} is supplied
-## for @var{m}, or @var{m} is omitted, no preconditioning is applied.
+## (theoretically) equivalent to solving by
+## @code{pcr} @code{@var{P} * @var{x} = @var{m} \ @var{b}}, with
+## @code{@var{P} = @var{m} \ @var{A}}.  Note that a proper choice of the
+## preconditioner may dramatically improve the overall performance of the
+## method.  Instead of matrix @var{m}, the user may pass a function which
+## returns the results of applying the inverse of @var{m} to a vector
+## (usually this is the preferred way of using the preconditioner).  If
+## @code{[]} is supplied for @var{m}, or @var{m} is omitted, no
+## preconditioning is applied.
 ##
 ## @item
 ## @var{x0} is the initial guess.  If @var{x0} is empty or omitted, the
 ## function sets @var{x0} to a zero vector by default.
 ## @end itemize
 ##
-## The arguments which follow @var{x0} are treated as parameters, and
-## passed in a proper way to any of the functions (@var{A} or @var{m})
-## which are passed to @code{pcr}.  See the examples below for further
-## details.  The output arguments are
+## The arguments which follow @var{x0} are treated as parameters, and passed
+## in a proper way to any of the functions (@var{A} or @var{m}) which are
+## passed to @code{pcr}.  See the examples below for further details.
+##
+## The output arguments are
 ##
 ## @itemize
 ## @item
 ## @var{x} is the computed approximation to the solution of
 ## @code{@var{A} * @var{x} = @var{b}}.
 ##
 ## @item
-## @var{flag} reports on the convergence.  @code{@var{flag} = 0} means
-## the solution converged and the tolerance criterion given by @var{tol}
-## is satisfied.  @code{@var{flag} = 1} means that the @var{maxit} limit
-## for the iteration count was reached.  @code{@var{flag} = 3} reports t
-## @code{pcr} breakdown, see [1] for details.
+## @var{flag} reports on the convergence.  @code{@var{flag} = 0} means the
+## solution converged and the tolerance criterion given by @var{tol} is
+## satisfied.  @code{@var{flag} = 1} means that the @var{maxit} limit for the
+## iteration count was reached.  @code{@var{flag} = 3} reports a @code{pcr}
+## breakdown, see [1] for details.
 ##
 ## @item
 ## @var{relres} is the ratio of the final residual to its initial value,
 ## measured in the Euclidean norm.
 ##
 ## @item
 ## @var{iter} is the actual number of iterations performed.
 ##
 ## @item
-## @var{resvec} describes the convergence history of the method,
-## so that @code{@var{resvec} (i)} contains the Euclidean norms of the
-## residual after the (@var{i}-1)-th iteration, @code{@var{i} =
-## 1,2, @dots{}, @var{iter}+1}.
+## @var{resvec} describes the convergence history of the method, so that
+## @code{@var{resvec} (i)} contains the Euclidean norms of the residual after
+## the (@var{i}-1)-th iteration, @code{@var{i} = 1,2, @dots{}, @var{iter}+1}.
 ## @end itemize
 ##
 ## Let us consider a trivial problem with a diagonal matrix (we exploit the
 ## sparsity of A)
 ##
 ## @example
 ## @group
 ## n = 10;
diff --git a/scripts/sparse/qmr.m b/scripts/sparse/qmr.m
--- a/scripts/sparse/qmr.m
+++ b/scripts/sparse/qmr.m
@@ -14,40 +14,39 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; If not, see <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} qmr (@var{A}, @var{b}, @var{rtol}, @var{maxit}, @var{M1}, @var{M2}, @var{x0})
 ## @deftypefnx {Function File} {@var{x} =} qmr (@var{A}, @var{b}, @var{rtol}, @var{maxit}, @var{P})
 ## @deftypefnx {Function File} {[@var{x}, @var{flag}, @var{relres}, @var{iter}, @var{resvec}] =} qmr (@var{A}, @var{b}, @dots{})
-## Solve @code{A x = b} using the Quasi-Minimal Residual iterative
-## method (without look-ahead).
+## Solve @code{A x = b} using the Quasi-Minimal Residual iterative method
+## (without look-ahead).
 ##
 ## @itemize @minus
-## @item @var{rtol} is the relative tolerance, if not given
-## or set to [] the default value 1e-6 is used.
+## @item @var{rtol} is the relative tolerance, if not given or set to [] the
+## default value 1e-6 is used.
 ##
-## @item @var{maxit} the maximum number of outer iterations,
-## if not given or set to [] the default value
-## @code{min (20, numel (b))} is used.
+## @item @var{maxit} the maximum number of outer iterations, if not given or
+## set to [] the default value @code{min (20, numel (b))} is used.
 ##
-## @item @var{x0} the initial guess, if not given or set to []
-## the default value @code{zeros (size (b))} is used.
+## @item @var{x0} the initial guess, if not given or set to [] the default
+## value @code{zeros (size (b))} is used.
 ## @end itemize
 ##
-## @var{A} can be passed as a matrix or as a function handle or
-## inline function @code{f} such that @code{f(x, "notransp") = A*x}
-## and @code{f(x, "transp") = A'*x}.
+## @var{A} can be passed as a matrix or as a function handle or inline
+## function @code{f} such that @code{f(x, "notransp") = A*x} and
+## @code{f(x, "transp") = A'*x}.
 ##
-## The preconditioner @var{P} is given as @code{P = M1 * M2}.
-## Both @var{M1} and @var{M2} can be passed as a matrix or as
-## a function handle or inline function @code{g} such that
-## @code{g(x, "notransp") = M1 \ x} or @code{g(x, "notransp") = M2 \ x} and
-## @code{g(x, "transp") = M1' \ x} or @code{g(x, "transp") = M2' \ x}.
+## The preconditioner @var{P} is given as @code{P = M1 * M2}.  Both @var{M1}
+## and @var{M2} can be passed as a matrix or as a function handle or inline
+## function @code{g} such that @code{g(x, "notransp") = M1 \ x} or
+## @code{g(x, "notransp") = M2 \ x} and @code{g(x, "transp") = M1' \ x} or
+## @code{g(x, "transp") = M2' \ x}.
 ##
 ## If called with more than one output parameter
 ##
 ## @itemize @minus
 ## @item @var{flag} indicates the exit status:
 ##
 ## @itemize @minus
 ## @item 0: iteration converged to the within the chosen tolerance
diff --git a/scripts/sparse/spaugment.m b/scripts/sparse/spaugment.m
--- a/scripts/sparse/spaugment.m
+++ b/scripts/sparse/spaugment.m
@@ -41,41 +41,41 @@
 ##
 ## @noindent
 ## where @var{r} is the residual error
 ##
 ## @example
 ## @var{r} = @var{b} - @var{A} * @var{x}
 ## @end example
 ##
-## As the matrix @var{s} is symmetric indefinite it can be factorized
-## with @code{lu}, and the minimum norm solution can therefore be found
-## without the need for a @code{qr} factorization.  As the residual
-## error will be @code{zeros (@var{m}, @var{m})} for underdetermined
-## problems, and example can be
+## As the matrix @var{s} is symmetric indefinite it can be factorized with
+## @code{lu}, and the minimum norm solution can therefore be found without the
+## need for a @code{qr} factorization.  As the residual error will be
+## @code{zeros (@var{m}, @var{m})} for underdetermined problems, and example
+## can be
 ##
 ## @example
 ## @group
 ## m = 11; n = 10; mn = max (m, n);
 ## A = spdiags ([ones(mn,1), 10*ones(mn,1), -ones(mn,1)],
 ##              [-1, 0, 1], m, n);
 ## x0 = A \ ones (m,1);
 ## s = spaugment (A);
 ## [L, U, P, Q] = lu (s);
 ## x1 = Q * (U \ (L \ (P  * [ones(m,1); zeros(n,1)])));
 ## x1 = x1(end - n + 1 : end);
 ## @end group
 ## @end example
 ##
-## To find the solution of an overdetermined problem needs an estimate
-## of the residual error @var{r} and so it is more complex to formulate
-## a minimum norm solution using the @code{spaugment} function.
+## To find the solution of an overdetermined problem needs an estimate of the
+## residual error @var{r} and so it is more complex to formulate a minimum norm
+## solution using the @code{spaugment} function.
 ##
-## In general the left division operator is more stable and faster than
-## using the @code{spaugment} function.
+## In general the left division operator is more stable and faster than using
+## the @code{spaugment} function.
 ## @seealso{mldivide}
 ## @end deftypefn
 
 function s = spaugment (A, c)
   if (nargin < 2)
     if (issparse (A))
       c = max (max (abs (A))) / 1000;
     else
diff --git a/scripts/sparse/spconvert.m b/scripts/sparse/spconvert.m
--- a/scripts/sparse/spconvert.m
+++ b/scripts/sparse/spconvert.m
@@ -16,20 +16,20 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{x} =} spconvert (@var{m})
 ## Convert a simple sparse matrix format easily generated by other programs
 ## into Octave's internal sparse format.
 ##
-## The input @var{m} is either a 3 or 4 column real matrix, containing
-## the row, column, real, and imaginary parts of the elements of the
-## sparse matrix.  An element with a zero real and imaginary part can
-## be used to force a particular matrix size.
+## The input @var{m} is either a 3 or 4 column real matrix, containing the
+## row, column, real, and imaginary parts of the elements of the sparse
+## matrix.  An element with a zero real and imaginary part can be used to
+## force a particular matrix size.
 ## @seealso{sparse}
 ## @end deftypefn
 
 function s = spconvert (m)
 
   if (issparse (m))
     s = m;
   else
diff --git a/scripts/sparse/spdiags.m b/scripts/sparse/spdiags.m
--- a/scripts/sparse/spdiags.m
+++ b/scripts/sparse/spdiags.m
@@ -17,31 +17,32 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{B} =} spdiags (@var{A})
 ## @deftypefnx {Function File} {[@var{B}, @var{d}] =} spdiags (@var{A})
 ## @deftypefnx {Function File} {@var{B} =} spdiags (@var{A}, @var{d})
 ## @deftypefnx {Function File} {@var{A} =} spdiags (@var{v}, @var{d}, @var{A})
 ## @deftypefnx {Function File} {@var{A} =} spdiags (@var{v}, @var{d}, @var{m}, @var{n})
-## A generalization of the function @code{diag}.  Called with a single
-## input argument, the nonzero diagonals @var{d} of @var{A} are extracted.
-## With two arguments the diagonals to extract are given by the vector
-## @var{d}.
+## A generalization of the function @code{diag}.
+##
+## Called with a single input argument, the nonzero diagonals @var{d} of
+## @var{A} are extracted.
+##
+## With two arguments the diagonals to extract are given by the vector @var{d}.
 ##
-## The other two forms of @code{spdiags} modify the input matrix by
-## replacing the diagonals.  They use the columns of @var{v} to replace
-## the diagonals represented by the vector @var{d}.  If the sparse matrix
-## @var{A} is defined then the diagonals of this matrix are replaced.
-## Otherwise a matrix of @var{m} by @var{n} is created with the
-## diagonals given by the columns of @var{v}.
+## The other two forms of @code{spdiags} modify the input matrix by replacing
+## the diagonals.  They use the columns of @var{v} to replace the diagonals
+## represented by the vector @var{d}.  If the sparse matrix @var{A} is
+## defined then the diagonals of this matrix are replaced.  Otherwise a
+## matrix of @var{m} by @var{n} is created with the diagonals given by the
+## columns of @var{v}.
 ##
-## Negative values of @var{d} represent diagonals below the main
-## diagonal, and positive values of @var{d} diagonals above the main
-## diagonal.
+## Negative values of @var{d} represent diagonals below the main diagonal, and
+## positive values of @var{d} diagonals above the main diagonal.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## spdiags (reshape (1:12, 4, 3), [-1 0 1], 5, 4)
 ##    @result{} 5 10  0  0
 ##       1  6 11  0
diff --git a/scripts/sparse/spfun.m b/scripts/sparse/spfun.m
--- a/scripts/sparse/spfun.m
+++ b/scripts/sparse/spfun.m
@@ -14,19 +14,20 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{y} =} spfun (@var{f}, @var{S})
 ## Compute @code{f(@var{S})} for the nonzero values of @var{S}.
-## This results in a sparse matrix with the same structure as
-## @var{S}.  The function @var{f} can be passed as a string, a
-## function handle, or an inline function.
+##
+## This results in a sparse matrix with the same structure as @var{S}.  The
+## function @var{f} can be passed as a string, a function handle, or an
+## inline function.
 ## @seealso{arrayfun, cellfun, structfun}
 ## @end deftypefn
 
 function y = spfun (f, S)
 
   if (nargin != 2)
     print_usage ();
   endif
diff --git a/scripts/sparse/spones.m b/scripts/sparse/spones.m
--- a/scripts/sparse/spones.m
+++ b/scripts/sparse/spones.m
@@ -13,18 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{r} =} spones (@var{S})
-## Replace the nonzero entries of @var{S} with ones.  This creates a
-## sparse matrix with the same structure as @var{S}.
+## Replace the nonzero entries of @var{S} with ones.
+##
+## This creates a sparse matrix with the same structure as @var{S}.
 ## @seealso{sparse, sprand, sprandn, sprandsym, spfun, spy}
 ## @end deftypefn
 
 function r = spones (S)
 
   if (nargin != 1)
     print_usage ();
   endif
diff --git a/scripts/sparse/sprandsym.m b/scripts/sparse/sprandsym.m
--- a/scripts/sparse/sprandsym.m
+++ b/scripts/sparse/sprandsym.m
@@ -22,17 +22,17 @@
 ## @deftypefnx {Function File} {} sprandsym (@var{s})
 ## Generate a symmetric random sparse matrix.
 ##
 ## The size of the matrix will be @var{n}x@var{n}, with a density of values
 ## given by @var{d}.  @var{d} must be between 0 and 1 inclusive.  Values will
 ## be normally distributed with a mean of zero and a variance of 1.
 ##
 ## If called with a single matrix argument, a random sparse matrix is generated
-## wherever the matrix @var{S} is nonzero in its lower triangular part.
+## wherever the matrix @var{s} is nonzero in its lower triangular part.
 ## @seealso{sprand, sprandn, spones, sparse}
 ## @end deftypefn
 
 function S = sprandsym (n, d)
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
diff --git a/scripts/sparse/spstats.m b/scripts/sparse/spstats.m
--- a/scripts/sparse/spstats.m
+++ b/scripts/sparse/spstats.m
@@ -15,23 +15,24 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{count}, @var{mean}, @var{var}] =} spstats (@var{S})
 ## @deftypefnx {Function File} {[@var{count}, @var{mean}, @var{var}] =} spstats (@var{S}, @var{j})
 ## Return the stats for the nonzero elements of the sparse matrix @var{S}.
-## @var{count} is the number of nonzeros in each column, @var{mean}
-## is the mean of the nonzeros in each column, and @var{var} is the
-## variance of the nonzeros in each column.
 ##
-## Called with two input arguments, if @var{S} is the data and @var{j}
-## is the bin number for the data, compute the stats for each bin.  In
-## this case, bins can contain data values of zero, whereas with
+## @var{count} is the number of nonzeros in each column, @var{mean} is the mean
+## of the nonzeros in each column, and @var{var} is the variance of the
+## nonzeros in each column.
+##
+## Called with two input arguments, if @var{S} is the data and @var{j} is the
+## bin number for the data, compute the stats for each bin.  In this case,
+## bins can contain data values of zero, whereas with
 ## @code{spstats (@var{S})} the zeros may disappear.
 ## @end deftypefn
 
 function [count, mean, var] = spstats (S, j)
 
   if (nargin < 1 || nargin > 2)
     print_usage ();
   endif
diff --git a/scripts/sparse/spy.m b/scripts/sparse/spy.m
--- a/scripts/sparse/spy.m
+++ b/scripts/sparse/spy.m
@@ -18,18 +18,20 @@
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} spy (@var{x})
 ## @deftypefnx {Function File} {} spy (@dots{}, @var{markersize})
 ## @deftypefnx {Function File} {} spy (@dots{}, @var{line_spec})
 ## Plot the sparsity pattern of the sparse matrix @var{x}.
 ##
 ## If the argument @var{markersize} is given as a scalar value, it is used to
-## determine the point size in the plot.  If the string @var{line_spec} is
-## given it is passed to @code{plot} and determines the appearance of the plot.
+## determine the point size in the plot.
+##
+## If the string @var{line_spec} is given it is passed to @code{plot} and
+## determines the appearance of the plot.
 ## @seealso{plot, gplot}
 ## @end deftypefn
 
 function spy (x, varargin)
 
   if (nargin < 1)
     print_usage ();
   endif
diff --git a/scripts/sparse/svds.m b/scripts/sparse/svds.m
--- a/scripts/sparse/svds.m
+++ b/scripts/sparse/svds.m
@@ -19,18 +19,19 @@
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{s} =} svds (@var{A})
 ## @deftypefnx {Function File} {@var{s} =} svds (@var{A}, @var{k})
 ## @deftypefnx {Function File} {@var{s} =} svds (@var{A}, @var{k}, @var{sigma})
 ## @deftypefnx {Function File} {@var{s} =} svds (@var{A}, @var{k}, @var{sigma}, @var{opts})
 ## @deftypefnx {Function File} {[@var{u}, @var{s}, @var{v}] =} svds (@dots{})
 ## @deftypefnx {Function File} {[@var{u}, @var{s}, @var{v}, @var{flag}] =} svds (@dots{})
 ##
-## Find a few singular values of the matrix @var{A}.  The singular values
-## are calculated using
+## Find a few singular values of the matrix @var{A}.
+##
+## The singular values are calculated using
 ##
 ## @example
 ## @group
 ## [@var{m}, @var{n}] = size (@var{A});
 ## @var{s} = eigs ([sparse(@var{m}, @var{m}), @var{A};
 ##                      @var{A}', sparse(@var{n}, @var{n})])
 ## @end group
 ## @end example
diff --git a/scripts/sparse/treelayout.m b/scripts/sparse/treelayout.m
--- a/scripts/sparse/treelayout.m
+++ b/scripts/sparse/treelayout.m
@@ -14,22 +14,24 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} treelayout (@var{tree})
 ## @deftypefnx {Function File} {} treelayout (@var{tree}, @var{permutation})
-## treelayout lays out a tree or a forest.  The first argument @var{tree} is a
-## vector of
-## predecessors, optional parameter @var{permutation} is an optional postorder
-## permutation.
-## The complexity of the algorithm is O(n) in
-## terms of time and memory requirements.
+## treelayout lays out a tree or a forest.
+##
+## The first argument @var{tree} is a vector of predecessors.
+##
+## The parameter @var{permutation} is an optional postorder permutation.
+##
+## The complexity of the algorithm is O(n) in terms of time and memory
+## requirements.
 ## @seealso{etreeplot, gplot, treeplot}
 ## @end deftypefn
 
 function [x_coordinate, y_coordinate, height, s] = treelayout (tree, permutation)
   if (nargin < 1 || nargin > 2 || nargout > 4)
     print_usage ();
   elseif (! isvector (tree) || rows (tree) != 1 || ! isnumeric (tree)
           || any (tree > length (tree)) || any (tree < 0))
diff --git a/scripts/sparse/treeplot.m b/scripts/sparse/treeplot.m
--- a/scripts/sparse/treeplot.m
+++ b/scripts/sparse/treeplot.m
@@ -14,20 +14,25 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} treeplot (@var{tree})
 ## @deftypefnx {Function File} {} treeplot (@var{tree}, @var{node_style}, @var{edge_style})
-## Produce a graph of tree or forest.  The first argument is vector of
-## predecessors, optional parameters @var{node_style} and @var{edge_style}
-## define the output style.  The complexity of the algorithm is O(n) in
-## terms of is time and memory requirements.
+## Produce a graph of tree or forest.
+##
+## The first argument is vector of predecessors.
+##
+## The optional parameters @var{node_style} and @var{edge_style} define the
+## output plot style.
+##
+## The complexity of the algorithm is O(n) in terms of is time and memory
+## requirements.
 ## @seealso{etreeplot, gplot}
 ## @end deftypefn
 
 function treeplot (tree, node_style = "ko", edge_style = "r")
 
   if (nargin < 1 || nargin > 3 || nargout > 0)
     print_usage ();
   endif
diff --git a/scripts/strings/base2dec.m b/scripts/strings/base2dec.m
--- a/scripts/strings/base2dec.m
+++ b/scripts/strings/base2dec.m
@@ -24,25 +24,24 @@
 ## @example
 ## @group
 ## base2dec ("11120", 3)
 ##    @result{} 123
 ## @end group
 ## @end example
 ##
 ## If @var{s} is a string matrix, return a column vector with one value per
-## row of @var{s}.  If a row contains invalid symbols then the
-## corresponding value will be NaN@.
+## row of @var{s}.  If a row contains invalid symbols then the corresponding
+## value will be NaN@.
 ##
 ## If @var{s} is a cell array of strings, return a column vector with one
 ## value per cell element in @var{s}.
 ##
 ## If @var{base} is a string, the characters of @var{base} are used as the
-## symbols for the digits of @var{s}.  Space (' ') may not be used as a
-## symbol.
+## symbols for the digits of @var{s}.  Space (' ') may not be used as a symbol.
 ##
 ## @example
 ## @group
 ## base2dec ("yyyzx", "xyz")
 ##    @result{} 123
 ## @end group
 ## @end example
 ## @seealso{dec2base, bin2dec, hex2dec}
diff --git a/scripts/strings/bin2dec.m b/scripts/strings/bin2dec.m
--- a/scripts/strings/bin2dec.m
+++ b/scripts/strings/bin2dec.m
@@ -14,17 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} bin2dec (@var{s})
 ## Return the decimal number corresponding to the binary number represented
-## by the string @var{s}.  For example:
+## by the string @var{s}.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## bin2dec ("1110")
 ##      @result{} 14
 ## @end group
 ## @end example
 ##
diff --git a/scripts/strings/blanks.m b/scripts/strings/blanks.m
--- a/scripts/strings/blanks.m
+++ b/scripts/strings/blanks.m
@@ -13,17 +13,19 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} blanks (@var{n})
-## Return a string of @var{n} blanks, for example:
+## Return a string of @var{n} blanks.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## blanks (10);
 ## whos ans
 ##      @result{}
 ##       Attr Name        Size                     Bytes  Class
 ##       ==== ====        ====                     =====  =====
diff --git a/scripts/strings/cstrcat.m b/scripts/strings/cstrcat.m
--- a/scripts/strings/cstrcat.m
+++ b/scripts/strings/cstrcat.m
@@ -13,18 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cstrcat (@var{s1}, @var{s2}, @dots{})
-## Return a string containing all the arguments concatenated
-## horizontally.  Trailing white space is preserved.  For example:
+## Return a string containing all the arguments concatenated horizontally
+## with trailing white space preserved.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## cstrcat ("ab   ", "cd")
 ##       @result{} "ab   cd"
 ## @end group
 ## @end example
 ##
diff --git a/scripts/strings/deblank.m b/scripts/strings/deblank.m
--- a/scripts/strings/deblank.m
+++ b/scripts/strings/deblank.m
@@ -13,20 +13,21 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} deblank (@var{s})
-## Remove trailing whitespace and nulls from @var{s}.  If @var{s}
-## is a matrix, @var{deblank} trims each row to the length of longest
-## string.  If @var{s} is a cell array of strings, operate recursively on each
-## string element.
+## Remove trailing whitespace and nulls from @var{s}.
+##
+## If @var{s} is a matrix, @var{deblank} trims each row to the length of
+## longest string.  If @var{s} is a cell array of strings, operate
+## recursively on each string element.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
 ## deblank ("    abc  ")
 ##      @result{}  "    abc"
 ##
diff --git a/scripts/strings/dec2base.m b/scripts/strings/dec2base.m
--- a/scripts/strings/dec2base.m
+++ b/scripts/strings/dec2base.m
@@ -14,43 +14,43 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} dec2base (@var{d}, @var{base})
 ## @deftypefnx {Function File} {} dec2base (@var{d}, @var{base}, @var{len})
-## Return a string of symbols in base @var{base} corresponding to
-## the non-negative integer @var{d}.
+## Return a string of symbols in base @var{base} corresponding to the
+## non-negative integer @var{d}.
 ##
 ## @example
 ## @group
 ## dec2base (123, 3)
 ##    @result{} "11120"
 ## @end group
 ## @end example
 ##
-## If @var{d} is a matrix or cell array, return a string matrix with one
-## row per element in @var{d}, padded with leading zeros to the width of
-## the largest value.
+## If @var{d} is a matrix or cell array, return a string matrix with one row
+## per element in @var{d}, padded with leading zeros to the width of the
+## largest value.
 ##
 ## If @var{base} is a string then the characters of @var{base} are used as
-## the symbols for the digits of @var{d}.  Space (' ') may not be used
-## as a symbol.
+## the symbols for the digits of @var{d}.  Space (' ') may not be used as a
+## symbol.
 ##
 ## @example
 ## @group
 ## dec2base (123, "aei")
 ##    @result{} "eeeia"
 ## @end group
 ## @end example
 ##
-## The optional third argument, @var{len}, specifies the minimum
-## number of digits in the result.
+## The optional third argument, @var{len}, specifies the minimum number of
+## digits in the result.
 ## @seealso{base2dec, dec2bin, dec2hex}
 ## @end deftypefn
 
 ## Author: Daniel Calvelo <dcalvelo@yahoo.com>
 ## Adapted-by: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 
 function retval = dec2base (d, base, len)
 
diff --git a/scripts/strings/dec2bin.m b/scripts/strings/dec2bin.m
--- a/scripts/strings/dec2bin.m
+++ b/scripts/strings/dec2bin.m
@@ -13,32 +13,34 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} dec2bin (@var{d}, @var{len})
-## Return a binary number corresponding to the non-negative integer
-## @var{d}, as a string of ones and zeros.  For example:
+## Return a binary number corresponding to the non-negative integer @var{d},
+## as a string of ones and zeros.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## dec2bin (14)
 ##      @result{} "1110"
 ## @end group
 ## @end example
 ##
-## If @var{d} is a matrix or cell array, return a string matrix with one
-## row per element in @var{d}, padded with leading zeros to the width of
-## the largest value.
+## If @var{d} is a matrix or cell array, return a string matrix with one row
+## per element in @var{d}, padded with leading zeros to the width of the
+## largest value.
 ##
-## The optional second argument, @var{len}, specifies the minimum
-## number of digits in the result.
+## The optional second argument, @var{len}, specifies the minimum number of
+## digits in the result.
 ## @seealso{bin2dec, dec2base, dec2hex}
 ## @end deftypefn
 
 ## Author: Daniel Calvelo <dcalvelo@yahoo.com>
 ## Adapted-by: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 
 function b = dec2bin (d, len)
 
diff --git a/scripts/strings/dec2hex.m b/scripts/strings/dec2hex.m
--- a/scripts/strings/dec2hex.m
+++ b/scripts/strings/dec2hex.m
@@ -13,32 +13,34 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} dec2hex (@var{d}, @var{len})
-## Return the hexadecimal string corresponding to the non-negative
-## integer @var{d}.  For example:
+## Return the hexadecimal string corresponding to the non-negative integer
+## @var{d}.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## dec2hex (2748)
 ##      @result{} "ABC"
 ## @end group
 ## @end example
 ##
-## If @var{d} is a matrix or cell array, return a string matrix with one
-## row per element in @var{d}, padded with leading zeros to the width of
-## the largest value.
+## If @var{d} is a matrix or cell array, return a string matrix with one row
+## per element in @var{d}, padded with leading zeros to the width of the
+## largest value.
 ##
-## The optional second argument, @var{len}, specifies the minimum
-## number of digits in the result.
+## The optional second argument, @var{len}, specifies the minimum number of
+## digits in the result.
 ## @seealso{hex2dec, dec2base, dec2bin}
 ## @end deftypefn
 
 ## Author: Daniel Calvelo <dcalvelo@yahoo.com>
 ## Adapted-by: Paul Kienzle <pkienzle@kienzle.powernet.co.uk>
 
 function h = dec2hex (d, len)
 
diff --git a/scripts/strings/findstr.m b/scripts/strings/findstr.m
--- a/scripts/strings/findstr.m
+++ b/scripts/strings/findstr.m
@@ -14,20 +14,21 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} findstr (@var{s}, @var{t})
 ## @deftypefnx {Function File} {} findstr (@var{s}, @var{t}, @var{overlap})
-## Return the vector of all positions in the longer of the two strings
-## @var{s} and @var{t} where an occurrence of the shorter of the two starts.
-## If the optional argument @var{overlap} is true, the returned vector
-## can include overlapping positions (this is the default).  For example:
+## Return the vector of all positions in the longer of the two strings @var{s}
+## and @var{t} where an occurrence of the shorter of the two starts.
+##
+## If the optional argument @var{overlap} is true (default), the returned
+## vector can include overlapping positions.  For example:
 ##
 ## @example
 ## @group
 ## findstr ("ababab", "a")
 ##      @result{} [1, 3, 5];
 ## findstr ("abababa", "aba", 0)
 ##      @result{} [1, 5]
 ## @end group
diff --git a/scripts/strings/hex2dec.m b/scripts/strings/hex2dec.m
--- a/scripts/strings/hex2dec.m
+++ b/scripts/strings/hex2dec.m
@@ -13,18 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} hex2dec (@var{s})
-## Return the integer corresponding to the hexadecimal number represented
-## by the string @var{s}.  For example:
+## Return the integer corresponding to the hexadecimal number represented by
+## the string @var{s}.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## hex2dec ("12B")
 ##       @result{} 299
 ## hex2dec ("12b")
 ##       @result{} 299
 ## @end group
diff --git a/scripts/strings/index.m b/scripts/strings/index.m
--- a/scripts/strings/index.m
+++ b/scripts/strings/index.m
@@ -15,18 +15,19 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} index (@var{s}, @var{t})
 ## @deftypefnx {Function File} {} index (@var{s}, @var{t}, @var{direction})
 ## Return the position of the first occurrence of the string @var{t} in the
-## string @var{s}, or 0 if no occurrence is found.  @var{s} may also be a
-## string array or cell array of strings.
+## string @var{s}, or 0 if no occurrence is found.
+##
+## @var{s} may also be a string array or cell array of strings.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## index ("Teststring", "t")
 ##     @result{} 4
 ## @end group
diff --git a/scripts/strings/isletter.m b/scripts/strings/isletter.m
--- a/scripts/strings/isletter.m
+++ b/scripts/strings/isletter.m
@@ -14,18 +14,19 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isletter (@var{s})
 ## Return a logical array which is true where the elements of @var{s}
-## are letters and false where they are not.  This is an alias for
-## the @code{isalpha} function.
+## are letters and false where they are not.
+##
+## This is an alias for the @code{isalpha} function.
 ## @seealso{isalpha, isdigit, ispunct, isspace, iscntrl, isalnum}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = isletter (s)
 
   if (nargin != 1)
diff --git a/scripts/strings/isstrprop.m b/scripts/strings/isstrprop.m
--- a/scripts/strings/isstrprop.m
+++ b/scripts/strings/isstrprop.m
@@ -13,27 +13,29 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} isstrprop (@var{str}, @var{prop})
-## Test character string properties.  For example:
+## Test character string properties.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## isstrprop ("abc123", "alpha")
 ## @result{} [1, 1, 1, 0, 0, 0]
 ## @end group
 ## @end example
 ##
-## If @var{str} is a cell array, @code{isstrpop} is applied recursively
-## to each element of the cell array.
+## If @var{str} is a cell array, @code{isstrpop} is applied recursively to
+## each element of the cell array.
 ##
 ## Numeric arrays are converted to character strings.
 ##
 ## The second argument @var{prop} must be one of
 ##
 ## @table @asis
 ## @item @qcode{"alpha"}
 ## True for characters that are alphabetic (letters).
@@ -51,22 +53,22 @@
 ## @item @qcode{"digit"}
 ## True for decimal digits (0-9).
 ##
 ## @item @qcode{"xdigit"}
 ## True for hexadecimal digits (@nospell{a-fA-F0-9}).
 ##
 ## @item  @qcode{"space"}
 ## @itemx @qcode{"wspace"}
-## True for whitespace characters (space, formfeed, newline, carriage
-## return, tab, vertical tab).
+## True for whitespace characters (space, formfeed, newline, carriage return,
+## tab, vertical tab).
 ##
 ## @item @qcode{"punct"}
-## True for punctuation characters (printing characters except space
-## or letter or digit).
+## True for punctuation characters (printing characters except space or
+## letter or digit).
 ##
 ## @item @qcode{"cntrl"}
 ## True for control characters.
 ##
 ## @item  @qcode{"graph"}
 ## @itemx @qcode{"graphic"}
 ## True for printing characters except space.
 ##
diff --git a/scripts/strings/mat2str.m b/scripts/strings/mat2str.m
--- a/scripts/strings/mat2str.m
+++ b/scripts/strings/mat2str.m
@@ -14,25 +14,26 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{s} =} mat2str (@var{x}, @var{n})
 ## @deftypefnx {Function File} {@var{s} =} mat2str (@var{x}, @var{n}, "class")
-## Format real, complex, and logical matrices as strings.  The
-## returned string may be used to reconstruct the original matrix by using
+## Format real, complex, and logical matrices as strings.
+##
+## The returned string may be used to reconstruct the original matrix by using
 ## the @code{eval} function.
 ##
-## The precision of the values is given by @var{n}.  If @var{n} is a
-## scalar then both real and imaginary parts of the matrix are printed
-## to the same precision.  Otherwise @code{@var{n}(1)} defines the
-## precision of the real part and @code{@var{n}(2)} defines the
-## precision of the imaginary part.  The default for @var{n} is 15.
+## The precision of the values is given by @var{n}.  If @var{n} is a scalar
+## then both real and imaginary parts of the matrix are printed to the same
+## precision.  Otherwise @code{@var{n}(1)} defines the precision of the real
+## part and @code{@var{n}(2)} defines the precision of the imaginary part. 
+## The default for @var{n} is 15.
 ##
 ## If the argument @qcode{"class"} is given then the class of @var{x} is
 ## included in the string in such a way that @code{eval} will result in the
 ## construction of a matrix of the same class.
 ##
 ## @example
 ## @group
 ## mat2str ([ -1/3 + i/7; 1/3 - i/7 ], [4 2])
diff --git a/scripts/strings/ostrsplit.m b/scripts/strings/ostrsplit.m
--- a/scripts/strings/ostrsplit.m
+++ b/scripts/strings/ostrsplit.m
@@ -15,19 +15,21 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{cstr}] =} ostrsplit (@var{s}, @var{sep})
 ## @deftypefnx {Function File} {[@var{cstr}] =} ostrsplit (@var{s}, @var{sep}, @var{strip_empty})
 ## Split the string @var{s} using one or more separators @var{sep} and return
-## a cell array of strings.  Consecutive separators and separators at
-## boundaries result in empty strings, unless @var{strip_empty} is true.
-## The default value of @var{strip_empty} is false.
+## a cell array of strings.
+##
+## Consecutive separators and separators at boundaries result in empty
+## strings, unless @var{strip_empty} is true.  The default value of
+## @var{strip_empty} is false.
 ##
 ## 2-D character arrays are split at separators and at the original column
 ## boundaries.
 ##
 ## Example:
 ##
 ## @example
 ## @group
diff --git a/scripts/strings/regexptranslate.m b/scripts/strings/regexptranslate.m
--- a/scripts/strings/regexptranslate.m
+++ b/scripts/strings/regexptranslate.m
@@ -13,26 +13,27 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} regexptranslate (@var{op}, @var{s})
-## Translate a string for use in a regular expression.  This may
-## include either wildcard replacement or special character escaping.
+## Translate a string for use in a regular expression.
+##
+## This may include either wildcard replacement or special character escaping.
+##
 ## The behavior is controlled by @var{op} which can take the following
 ## values
 ##
 ## @table @asis
 ## @item @qcode{"wildcard"}
-## The wildcard characters @code{.}, @code{*}, and @code{?} are replaced
-## with wildcards that are appropriate for a regular expression.
-## For example:
+## The wildcard characters @code{.}, @code{*}, and @code{?} are replaced with
+## wildcards that are appropriate for a regular expression.  For example:
 ##
 ## @example
 ## @group
 ## regexptranslate ("wildcard", "*.m")
 ##      @result{} ".*\.m"
 ## @end group
 ## @end example
 ##
diff --git a/scripts/strings/rindex.m b/scripts/strings/rindex.m
--- a/scripts/strings/rindex.m
+++ b/scripts/strings/rindex.m
@@ -15,17 +15,19 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} rindex (@var{s}, @var{t})
 ## Return the position of the last occurrence of the character string
 ## @var{t} in the character string @var{s}, or 0 if no occurrence is
-## found.  @var{s} may also be a string array or cell array of strings.
+## found.
+##
+## @var{s} may also be a string array or cell array of strings.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## rindex ("Teststring", "t")
 ##      @result{} 6
 ## @end group
diff --git a/scripts/strings/str2num.m b/scripts/strings/str2num.m
--- a/scripts/strings/str2num.m
+++ b/scripts/strings/str2num.m
@@ -14,38 +14,38 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{x} =} str2num (@var{s})
 ## @deftypefnx {Function File} {[@var{x}, @var{state}] =} str2num (@var{s})
-## Convert the string (or character array) @var{s} to a number (or an
-## array).  Examples:
+## Convert the string (or character array) @var{s} to a number (or an array).
+##
+## Examples:
 ##
 ## @example
 ## @group
 ## str2num ("3.141596")
 ##       @result{} 3.141596
 ##
 ## str2num (["1, 2, 3"; "4, 5, 6"])
 ##       @result{} 1  2  3
 ##          4  5  6
 ## @end group
 ## @end example
 ##
 ## The optional second output, @var{state}, is logically true when the
 ## conversion is successful.  If the conversion fails the numeric output,
 ## @var{x}, is empty and @var{state} is false.
 ##
-## @strong{Caution:} As @code{str2num} uses the @code{eval} function
-## to do the conversion, @code{str2num} will execute any code contained
-## in the string @var{s}.  Use @code{str2double} for a safer and faster
-## conversion.
+## @strong{Caution:} As @code{str2num} uses the @code{eval} function to do the
+## conversion, @code{str2num} will execute any code contained in the string
+## @var{s}.  Use @code{str2double} for a safer and faster conversion.
 ##
 ## For cell array of strings use @code{str2double}.
 ## @seealso{str2double, eval}
 ## @end deftypefn
 
 ## Author: jwe
 
 function [m, state] = str2num (s)
diff --git a/scripts/strings/strcat.m b/scripts/strings/strcat.m
--- a/scripts/strings/strcat.m
+++ b/scripts/strings/strcat.m
@@ -15,21 +15,22 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} strcat (@var{s1}, @var{s2}, @dots{})
 ## Return a string containing all the arguments concatenated
-## horizontally.  If the arguments are cell strings, @code{strcat}
-## returns a cell string with the individual cells concatenated.
-## For numerical input, each element is converted to the
-## corresponding ASCII character.  Trailing white space for any
-## character string input is eliminated before the strings are
+## horizontally.
+##
+## If the arguments are cell strings, @code{strcat} returns a cell string
+## with the individual cells concatenated.  For numerical input, each element
+## is converted to the corresponding ASCII character.  Trailing white space
+## for any character string input is eliminated before the strings are
 ## concatenated.  Note that cell string values do @strong{not} have
 ## whitespace trimmed.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## strcat ("|", " leading space is preserved", "|")
diff --git a/scripts/strings/strchr.m b/scripts/strings/strchr.m
--- a/scripts/strings/strchr.m
+++ b/scripts/strings/strchr.m
@@ -17,18 +17,20 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{idx} =} strchr (@var{str}, @var{chars})
 ## @deftypefnx {Function File} {@var{idx} =} strchr (@var{str}, @var{chars}, @var{n})
 ## @deftypefnx {Function File} {@var{idx} =} strchr (@var{str}, @var{chars}, @var{n}, @var{direction})
 ## @deftypefnx {Function File} {[@var{i}, @var{j}] =} strchr (@dots{})
 ## Search for the string @var{str} for occurrences of characters from
-## the set @var{chars}.  The return value(s), as well as the @var{n} and
-## @var{direction} arguments behave identically as in @code{find}.
+## the set @var{chars}.
+##
+## The return value(s), as well as the @var{n} and @var{direction} arguments
+## behave identically as in @code{find}.
 ##
 ## This will be faster than using regexp in most cases.
 ##
 ## @seealso{find}
 ## @end deftypefn
 
 function varargout = strchr (str, chars, varargin)
 
diff --git a/scripts/strings/strjoin.m b/scripts/strings/strjoin.m
--- a/scripts/strings/strjoin.m
+++ b/scripts/strings/strjoin.m
@@ -18,26 +18,26 @@
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {@var{str} =} strjoin (@var{cstr})
 ## @deftypefnx {Function File} {@var{str} =} strjoin (@var{cstr}, @var{delimiter})
 ## Join the elements of the cell string array, @var{cstr}, into a single
 ## string.
 ##
-## If no @var{delimiter} is specified, the elements of @var{cstr}
+## If no @var{delimiter} is specified, the elements of @var{cstr} are
 ## separated by a space.
 ##
 ## If @var{delimiter} is specified as a string, the cell string array is
 ## joined using the string.  Escape sequences are supported.
 ##
-## If @var{delimiter} is a cell string array whose length is one less
-## than @var{cstr}, then the elements of @var{cstr} are joined by
-## interleaving the cell string elements of @var{delimiter}.  Escape
-## sequences are not supported.
+## If @var{delimiter} is a cell string array whose length is one less than
+## @var{cstr}, then the elements of @var{cstr} are joined by interleaving the
+## cell string elements of @var{delimiter}.  Escape sequences are not
+## supported.
 ##
 ## @example
 ## @group
 ## strjoin (@{'Octave','Scilab','Lush','Yorick'@}, '*')
 ##       @result{} 'Octave*Scilab*Lush*Yorick'
 ## @end group
 ## @end example
 ## @seealso{strsplit}
diff --git a/scripts/strings/strjust.m b/scripts/strings/strjust.m
--- a/scripts/strings/strjust.m
+++ b/scripts/strings/strjust.m
@@ -16,21 +16,22 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} strjust (@var{s})
 ## @deftypefnx {Function File} {} strjust (@var{s}, @var{pos})
 ## Return the text, @var{s}, justified according to @var{pos}, which may
-## be @qcode{"left"}, @qcode{"center"}, or @qcode{"right"}.  If @var{pos}
-## is omitted it defaults to @qcode{"right"}.
+## be @qcode{"left"}, @qcode{"center"}, or @qcode{"right"}.
 ##
-## Null characters are replaced by spaces.  All other character
-## data are treated as non-white space.
+## If @var{pos} is omitted it defaults to @qcode{"right"}.
+##
+## Null characters are replaced by spaces.  All other character data are
+## treated as non-white space.
 ##
 ## Example:
 ##
 ## @example
 ## @group
 ## strjust (["a"; "ab"; "abc"; "abcd"])
 ##      @result{}
 ##         "   a"
diff --git a/scripts/strings/strmatch.m b/scripts/strings/strmatch.m
--- a/scripts/strings/strmatch.m
+++ b/scripts/strings/strmatch.m
@@ -17,20 +17,23 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} strmatch (@var{s}, @var{A})
 ## @deftypefnx {Function File} {} strmatch (@var{s}, @var{A}, "exact")
 ## Return indices of entries of @var{A} which begin with the string @var{s}.
+##
 ## The second argument @var{A} must be a string, character matrix, or a cell
-## array of strings.  If the third argument @qcode{"exact"} is not given, then
-## @var{s} only needs to match @var{A} up to the length of @var{s}.
-## Trailing spaces and nulls in @var{s} and @var{A} are ignored when matching.
+## array of strings.
+##
+## If the third argument @qcode{"exact"} is not given, then @var{s} only
+## needs to match @var{A} up to the length of @var{s}.  Trailing spaces and
+## nulls in @var{s} and @var{A} are ignored when matching.
 ##
 ## For example:
 ##
 ## @example
 ## @group
 ## strmatch ("apple", "apple juice")
 ##      @result{} 1
 ##
diff --git a/scripts/strings/strsplit.m b/scripts/strings/strsplit.m
--- a/scripts/strings/strsplit.m
+++ b/scripts/strings/strsplit.m
@@ -16,18 +16,18 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{cstr}] =} strsplit (@var{str})
 ## @deftypefnx {Function File} {[@var{cstr}] =} strsplit (@var{str}, @var{del})
 ## @deftypefnx {Function File} {[@var{cstr}] =} strsplit (@dots{}, @var{name}, @var{value})
 ## @deftypefnx {Function File} {[@var{cstr}, @var{matches}] =} strsplit (@dots{})
-## Split the string @var{str} using the delimiters specified by @var{del}
-## and return a cell string array of substrings.
+## Split the string @var{str} using the delimiters specified by @var{del} and
+## return a cell string array of substrings.
 ##
 ## If a delimiter is not specified the string is split at whitespace
 ## @code{@{" ", "\f", "\n", "\r", "\t", "\v"@}}.  Otherwise, the delimiter,
 ## @var{del} must be a string or cell array of strings.  By default,
 ## consecutive delimiters in the input string @var{s} are collapsed into one
 ## resulting in a single split.
 ##
 ## Supported @var{name}/@var{value} pair arguments are:
diff --git a/scripts/strings/strtok.m b/scripts/strings/strtok.m
--- a/scripts/strings/strtok.m
+++ b/scripts/strings/strtok.m
@@ -16,22 +16,27 @@
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {[@var{tok}, @var{rem}] =} strtok (@var{str})
 ## @deftypefnx {Function File} {[@var{tok}, @var{rem}] =} strtok (@var{str}, @var{delim})
 ##
 ## Find all characters in the string @var{str} up to, but not including, the
-## first character which is in the string @var{delim}.  If @var{rem} is
-## requested, it contains the remainder of the string, starting at the first
-## delimiter.  Leading delimiters are ignored.  If @var{delim} is not
-## specified, whitespace is assumed.  @var{str} may also be a cell array of
-## strings in which case the function executes on every individual string
-## and returns a cell array of tokens and remainders.
+## first character which is in the string @var{delim}.
+##
+## @var{str} may also be a cell array of strings in which case the function
+## executes on every individual string and returns a cell array of tokens and
+## remainders.
+##
+## Leading delimiters are ignored.  If @var{delim} is not specified,
+## whitespace is assumed.
+##
+## If @var{rem} is requested, it contains the remainder of the string, starting
+## at the first delimiter.
 ##
 ## Examples:
 ##
 ## @example
 ## @group
 ## strtok ("this is the life")
 ##      @result{} "this"
 ##
diff --git a/scripts/strings/strtrim.m b/scripts/strings/strtrim.m
--- a/scripts/strings/strtrim.m
+++ b/scripts/strings/strtrim.m
@@ -13,20 +13,23 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} strtrim (@var{s})
-## Remove leading and trailing whitespace from @var{s}.  If
-## @var{s} is a matrix, @var{strtrim} trims each row to the length of
+## Remove leading and trailing whitespace from @var{s}.
+##
+## If @var{s} is a matrix, @var{strtrim} trims each row to the length of
 ## longest string.  If @var{s} is a cell array of strings, operate recursively
-## on each string element.  For example:
+## on each string element.
+##
+## For example:
 ##
 ## @example
 ## @group
 ## strtrim ("    abc  ")
 ##      @result{}  "abc"
 ##
 ## strtrim ([" abc   "; "   def   "])
 ##      @result{}  ["abc  "  ; "  def"]
diff --git a/scripts/strings/strtrunc.m b/scripts/strings/strtrunc.m
--- a/scripts/strings/strtrunc.m
+++ b/scripts/strings/strtrunc.m
@@ -13,18 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} strtrunc (@var{s}, @var{n})
-## Truncate the character string @var{s} to length @var{n}.  If @var{s}
-## is a character matrix, then the number of columns is adjusted.
+## Truncate the character string @var{s} to length @var{n}.
+##
+## If @var{s} is a character matrix, then the number of columns is adjusted.
+## 
 ## If @var{s} is a cell array of strings, then the operation is performed
 ## on each cell element and the new cell array is returned.
 ## @end deftypefn
 
 function s = strtrunc (s, n)
 
   if (nargin != 2)
     print_usage ();
diff --git a/scripts/strings/substr.m b/scripts/strings/substr.m
--- a/scripts/strings/substr.m
+++ b/scripts/strings/substr.m
@@ -20,17 +20,17 @@
 ## @deftypefn  {Function File} {} substr (@var{s}, @var{offset})
 ## @deftypefnx {Function File} {} substr (@var{s}, @var{offset}, @var{len})
 ## Return the substring of @var{s} which starts at character number
 ## @var{offset} and is @var{len} characters long.
 ##
 ## Position numbering for offsets begins with 1.  If @var{offset} is negative,
 ## extraction starts that far from the end of the string.
 ##
-## If @var{len} is omitted, the substring extends to the end of @var{S}.  A
+## If @var{len} is omitted, the substring extends to the end of @var{s}.  A
 ## negative value for @var{len} extracts to within @var{len} characters of
 ## the end of the string
 ##
 ## Examples:
 ##
 ## @example
 ## @group
 ## substr ("This is a test string", 6, 9)
diff --git a/scripts/strings/untabify.m b/scripts/strings/untabify.m
--- a/scripts/strings/untabify.m
+++ b/scripts/strings/untabify.m
@@ -15,27 +15,28 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, see
 ## <http://www.gnu.org/licenses/>.
 
 ## -*- texinfo -*-
 ## @deftypefn  {Function File} {} untabify (@var{t})
 ## @deftypefnx {Function File} {} untabify (@var{t}, @var{tw})
 ## @deftypefnx {Function File} {} untabify (@var{t}, @var{tw}, @var{deblank})
-## Replace TAB characters in @var{t}, with spaces.
-## The tab width is specified by @var{tw}, or defaults to eight.
-## The input, @var{t}, may be either a 2-D character array, or a cell
-## array of character strings.  The output is the same class
-## as the input.
+## Replace TAB characters in @var{t} with spaces.
 ##
-## If the optional argument @var{deblank} is true, then the spaces will
-## be removed from the end of the character data.
+## The input, @var{t}, may be either a 2-D character array, or a cell array of
+## character strings.  The output is the same class as the input.
+## 
+## The tab width is specified by @var{tw}, and defaults to eight.
 ##
-## The following example reads a file and writes an untabified version
-## of the same file with trailing spaces stripped.
+## If the optional argument @var{deblank} is true, then the spaces will be
+## removed from the end of the character data.
+##
+## The following example reads a file and writes an untabified version of the
+## same file with trailing spaces stripped.
 ##
 ## @example
 ## @group
 ## fid = fopen ("tabbed_script.m");
 ## text = char (fread (fid, "uchar")');
 ## fclose (fid);
 ## fid = fopen ("untabified_script.m", "w");
 ## text = untabify (strsplit (text, "\n"), 8, true);
diff --git a/scripts/time/datenum.m b/scripts/time/datenum.m
--- a/scripts/time/datenum.m
+++ b/scripts/time/datenum.m
@@ -70,19 +70,24 @@
 ##
 ## @item
 ## Days before the beginning of the month go to the previous month.
 ##
 ## @item
 ## Days can be fractional.
 ## @end itemize
 ##
-## @strong{Caution:} this function does not attempt to handle Julian calendars so dates before October 15, 1582 are wrong by as much as eleven days.  Also, be aware that only Roman Catholic countries adopted the calendar in 1582.  It took until 1924 for it to be adopted everywhere.  See the Wikipedia entry on the Gregorian calendar for more details.
+## @strong{Caution:} this function does not attempt to handle Julian calendars
+## so dates before October 15, 1582 are wrong by as much as eleven days.  Also,
+## be aware that only Roman Catholic countries adopted the calendar in 1582.
+## It took until 1924 for it to be adopted everywhere.  See the Wikipedia entry
+## on the Gregorian calendar for more details.
 ##
-## @strong{Warning:} leap seconds are ignored.  A table of leap seconds is available on the Wikipedia entry for leap seconds.
+## @strong{Warning:} leap seconds are ignored.  A table of leap seconds is
+## available on the Wikipedia entry for leap seconds.
 ## @seealso{datestr, datevec, now, clock, date}
 ## @end deftypefn
 
 ## Algorithm: Peter Baum (http://vsg.cape.com/~pbaum/date/date0.htm)
 ## Author: pkienzle <pkienzle@users.sf.net>
 
 function [days, secs] = datenum (year, month = [], day = [], hour = 0, minute = 0, second = 0)
 
