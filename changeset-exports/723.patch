# HG changeset patch
# User jwe
# Date 780163210 0
#      Wed Sep 21 16:00:10 1994 +0000
# Node ID 1c072f20b522e6256dc7a04ef0b315ecf9d2892b
# Parent  c40cdd16121e3d8fb94075ee769d93f1d3a4b9fd
[project @ 1994-09-21 16:00:10 by jwe]

diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -230,17 +230,18 @@ static tree_expression *make_multi_val_r
 %type <tree_expression_type> expression simple_expr simple_expr1
 %type <tree_expression_type> ans_expression title
 %type <tree_matrix_type> matrix
 %type <tree_identifier_type> identifier
 %type <tree_function_type> func_def1 func_def2 func_def3
 %type <tree_index_expression_type> variable word_list_cmd
 %type <tree_colon_expression_type> colon_expr
 %type <tree_argument_list_type> arg_list word_list
-%type <tree_parameter_list_type> param_list param_list1 func_def1a 
+%type <tree_parameter_list_type> param_list param_list1
+%type <tree_parameter_list_type> return_list return_list1
 %type <tree_command_type> command func_def
 %type <tree_if_command_type> if_command
 %type <tree_if_clause_type> elseif_clause else_clause
 %type <tree_if_command_list_type> if_cmd_list1 if_cmd_list
 %type <tree_global_type> global_decl2
 %type <tree_global_init_list_type> global_decl1
 %type <tree_global_command_type> global_decl
 %type <tree_statement_type> statement
@@ -879,26 +880,52 @@ func_def	: FCN g_symtab are_we_screwed f
 func_def1	: SCREW safe g_symtab '=' func_def2
 		  {
 		    tree_identifier *tmp = new tree_identifier
 		      ($1->sym_rec (), $1->line (), $1->column ());
 		    tree_parameter_list *tpl = new tree_parameter_list (tmp);
 		    tpl->mark_as_formal_parameters ();
 		    $$ = $5->define_ret_list (tpl);
 		  }
-		| func_def1a ']' g_symtab '=' func_def2
+		| return_list g_symtab '=' func_def2
 		  {
 		    $1->mark_as_formal_parameters ();
-		    $$ = $5->define_ret_list ($1);
+		    $$ = $4->define_ret_list ($1);
 		  }
 		;
 
-func_def1a	: '[' safe local_symtab identifier
-		  { $$ = new tree_parameter_list ($4); }
-		| func_def1a ',' identifier
+return_list_x	: '[' safe local_symtab
+		;
+
+return_list	: return_list_x ']'
+		  { $$ = new tree_parameter_list (); }
+		| return_list_x ELLIPSIS ']'
+		  {
+		    tree_parameter_list *tmp = new tree_parameter_list ();
+		    tmp->mark_varargs_only ();
+		    $$ = tmp;
+		  }
+		| return_list1 ']'
+		  { $$ = $1; }
+		| return_list1 ',' ELLIPSIS ']'
+		  {
+		    $1->mark_varargs ();
+		    $$ = $1;
+		  }
+		;
+
+return_list1	: return_list_x identifier
+		  { $$ = new tree_parameter_list ($2); }
+		| return_list_x error
+		  {
+		    yyerror ("parse error");
+		    error ("invalid function return list");
+		    ABORT_PARSE;
+		  }
+		| return_list1 ',' identifier
 		  { $1->append ($3); }
 		;
 
 func_def2	: identifier safe local_symtab func_def3
 		  {
 		    char *id_name = $1->name ();
 //		    if (is_text_function_name (id_name))
 //		      {
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -475,21 +475,16 @@ tree_matrix::eval (int print)
 	}
 
       if (found_complex)
 	{
 	  if (tmp.is_real_scalar ())
 	    {
 	      cm (put_row, put_col) = tmp.double_value ();
 	    }
-	  else if (tmp.is_string () && all_strings && str_ptr)
-	    {
-	      memcpy (str_ptr, tmp.string_value (), nc);
-	      str_ptr += nc;
-	    }
 	  else if (tmp.is_real_matrix () || tmp.is_range ())
 	    {
 	      cm.insert (tmp.matrix_value (), put_row, put_col);
 	    }
 	  else if (tmp.is_complex_scalar ())
 	    {
 	      cm (put_row, put_col) = tmp.complex_value ();
 	    }
@@ -2048,16 +2043,20 @@ tree_function::define_param_list (tree_p
 
   return this;
 }
 
 tree_function *
 tree_function::define_ret_list (tree_parameter_list *t)
 {
   ret_list = t;
+
+  if (ret_list && ret_list->takes_varargs ())
+    vr_list = new tree_va_return_list;
+ 
   return this;
 }
 
 void
 tree_function::stash_fcn_file_name (char *s)
 {
   delete [] file_name;
   file_name = strsave (s);
@@ -2104,16 +2103,30 @@ tree_function::octave_va_arg (void)
     retval = args_passed (++curr_va_arg_number);
   else
     ::error ("error getting arg number %d -- only %d provided",
 	     curr_va_arg_number, num_args_passed-1);
 
   return retval;
 }
 
+int
+tree_function::takes_var_return (void) const
+{
+  return (ret_list && ret_list->takes_varargs ());
+}
+
+void
+tree_function::octave_vr_val (const tree_constant& val)
+{
+  assert (vr_list);
+
+  vr_list->append (val);
+}
+
 void
 tree_function::stash_function_name (char *s)
 {
   delete [] fcn_name;
   fcn_name = strsave (s);
 }
 
 tree_constant
@@ -2139,16 +2152,24 @@ tree_function::eval (int print)
 static void
 pop_symbol_table_context (void *table)
 {
   symbol_table *tmp = (symbol_table *) table;
   tmp->pop_context ();
 }
 
 static void
+delete_vr_list (void *list)
+{
+  tree_va_return_list *tmp = (tree_va_return_list *) list;
+  tmp->clear ();
+  delete tmp;
+}
+
+static void
 clear_symbol_table (void *table)
 {
   symbol_table *tmp = (symbol_table *) table;
   tmp->clear ();
 }
 
 Octave_object
 tree_function::eval (int print, int nargout, const Octave_object& args)
@@ -2167,18 +2188,31 @@ tree_function::eval (int print, int narg
 
   unwind_protect_int (call_depth);
   call_depth++;
 
   if (call_depth > 1)
     {
       sym_tab->push_context ();
       add_unwind_protect (pop_symbol_table_context, (void *) sym_tab);
+
+      if (vr_list)
+	{
+// Push new vr_list.
+	  unwind_protect_ptr (vr_list);
+	  vr_list = new tree_va_return_list;
+
+// Clear and delete the new one before restoring the old one.
+	  add_unwind_protect (delete_vr_list, (void *) vr_list);
+	}
     }
 
+  if (vr_list)
+    vr_list->clear ();
+
 // Force symbols to be undefined again when this function exits.
 
   add_unwind_protect (clear_symbol_table, (void *) sym_tab);
 
 // Save old and set current symbol table context, for eval_undefined_error().
 
   unwind_protect_ptr (curr_sym_tab);
   curr_sym_tab = sym_tab;
@@ -2223,17 +2257,17 @@ tree_function::eval (int print, int narg
       {
 	traceback_error ();
 	goto abort;
       }
     
 // Copy return values out.
 
     if (ret_list)
-      retval = ret_list->convert_to_const_vector ();
+      retval = ret_list->convert_to_const_vector (vr_list);
     else if (user_pref.return_last_computed_value)
       retval(0) = last_computed_value;
   }
 
  abort:
   run_unwind_frame ("func_eval");
 
   return retval;
@@ -2242,17 +2276,17 @@ tree_function::eval (int print, int narg
 int
 tree_function::max_expected_args (void)
 {
   if (param_list)
     {
       if (param_list->takes_varargs ())
 	return -1;
       else
-	return param_list->length () + 1;
+	return param_list->length ();
     }
   else
     return 1;
 }
 
 void
 tree_function::traceback_error (void)
 {
@@ -2385,14 +2419,43 @@ to the beginning")
 	error ("va_start only valid within function body");
     }
   else
     print_usage ("va_start");
 
   return retval;
 }
 
+DEFUN ("vr_val", Fvr_val, Svr_val, 1, 0,
+  "vr_val (X): append X to the list of optional return values for a
+function that allows a variable number of return values")
+{
+  Octave_object retval;
+
+  int nargin = args.length ();
+
+  if (nargin == 1)
+    {
+      if (curr_function)
+	{
+	  if (curr_function->takes_var_return ())
+	    curr_function->octave_vr_val (args(0));
+	  else
+	    {
+	      error ("vr_val only valid within function declared to produce");
+	      error ("a variable number of values");
+	    }
+	}
+      else
+	error ("vr_val only valid within function body");
+    }
+  else
+    print_usage ("vr_val");
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
 ;;; End: ***
 */
diff --git a/src/pt-exp-base.h b/src/pt-exp-base.h
--- a/src/pt-exp-base.h
+++ b/src/pt-exp-base.h
@@ -37,16 +37,17 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "error.h"
 #include "oct-obj.h"
 
 class tree_constant;
 class tree_statement_list;
 class tree_argument_list;
 class tree_parameter_list;
 class tree_return_list;
+class tree_va_return_list;
 class symbol_record;
 class symbol_table;
 
 class tree_matrix;
 class tree_builtin;
 class tree_identifier;
 class tree_function;
 class tree_expression;
@@ -724,16 +725,17 @@ public:
       cmd_list = 0;
       file_name = 0;
       fcn_name = 0;
       t_parsed = 0;
       system_fcn_file = 0;
       num_named_args = 0;
       num_args_passed = 0;
       curr_va_arg_number = 0;
+      vr_list = 0;
     }
 
   tree_function (int l = -1, int c = -1) : tree_fvc (l, c)
     { init (); }
 
   tree_function (tree_statement_list *cl, symbol_table *st,
 		 int l = -1, int c = -1)
      : tree_fvc (l, c)
@@ -767,16 +769,20 @@ public:
 
   int takes_varargs (void) const;
 
   void octave_va_start (void)
     { curr_va_arg_number = num_named_args; }
 
   tree_constant octave_va_arg (void);
 
+  int takes_var_return (void) const;
+
+  void octave_vr_val (const tree_constant& val);
+
   void stash_function_name (char *s);
 
   char *function_name (void)
     { return fcn_name; }
 
   tree_constant eval (int print);
 
   Octave_object eval (int print, int nargout, const Octave_object& args);
@@ -796,16 +802,17 @@ private:
   char *file_name;
   char *fcn_name;
   time_t t_parsed;
   int system_fcn_file;
   int num_named_args;
   Octave_object args_passed;
   int num_args_passed;
   int curr_va_arg_number;
+  tree_va_return_list *vr_list;
 };
 
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; page-delimiter: "^/\\*" ***
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -297,35 +297,47 @@ tree_parameter_list::define_from_arg_vec
 
       elt->define (tmp);
 
       next (p);
     }
 }
 
 Octave_object
-tree_parameter_list::convert_to_const_vector (void)
+tree_parameter_list::convert_to_const_vector (tree_va_return_list *vr_list)
 {
   int nout = length ();
 
+  if (vr_list)
+    nout += vr_list->length ();
+
   Octave_object retval;
   retval.resize (nout);
 
   int i = 0;
 
   for (Pix p = first (); p != 0; next (p))
     {
       tree_identifier *elt = this->operator () (p);
 
       if (elt->is_defined ())
 	retval(i) = elt->eval (0);
 
       i++;
     }
 
+  if (vr_list)
+    {
+      for (p = vr_list->first (); p != 0; vr_list->next (p))
+	{
+	  retval(i) = vr_list->operator () (p);
+	  i++;
+	}
+    }
+
   return retval;
 }
 
 int
 tree_parameter_list::is_defined (void)
 {
   int status = 1;
 
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -38,23 +38,25 @@ class tree_identifier;
 class symbol_record;
 class symbol_table;
 
 class tree_statement;
 class tree_statement_list;
 class tree_argument_list;
 class tree_parameter_list;
 class tree_return_list;
+class tree_va_return_list;
 class tree_global;
 class tree_global_init_list;
 
 #include <SLList.h>
 
 #include "tree-base.h"
 #include "tree-expr.h"
+#include "tree-const.h"
 #include "tree-cmd.h"
 
 // A list of expressions and commands to be executed.
 
 class
 tree_statement : public tree_print_code
 {
 friend class tree_statement_list;
@@ -184,17 +186,17 @@ public:
 
   int varargs_only (void)
     { return (marked_for_varargs < 0); }
 
   void define_from_arg_vector (const Octave_object& args);
 
   int is_defined (void);
 
-  Octave_object convert_to_const_vector (void);
+  Octave_object convert_to_const_vector (tree_va_return_list *vr_list);
 
   void print_code (ostream& os);
 
 private:
   int marked_for_varargs;
 };
 
 // Return lists.  Used to hold the right hand sides of multiple
@@ -217,16 +219,25 @@ public:
 	  tree_index_expression *t = remove_front ();
 	  delete t;
 	}
     }
 
   void print_code (ostream& os);
 };
 
+class
+tree_va_return_list : public SLList<tree_constant>
+{
+public:
+  tree_va_return_list (void) : SLList<tree_constant> () { }
+
+  ~tree_va_return_list (void) { }
+};
+
 // List of expressions that make up a global statement.
 
 class
 tree_global : public tree_print_code
 {
 public:
   tree_global (void)
     {
