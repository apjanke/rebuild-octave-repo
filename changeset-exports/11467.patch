# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1294603051 18000
#      Sun Jan 09 14:57:31 2011 -0500
# Node ID 7aab48b6e903f6b4e842f0acfb556ae63955584e
# Parent  1f64a7b73e982a3a528b0f23340e5fc896096dfe
token.h, token.cc: delete obsolete and unused token type

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2011-01-09  John W. Eaton  <jwe@octave.org>
+
+	* token.h, token.cc (token::plot_tok_typ): Delete unused enum.
+	(token::token_type): Delete pttype_token from the list.
+	(token::token (plot_tok_type, int, int)): Delete unused constructor.
+	(token::pttype): Delete unused function.
+	(token::anonymous union): Delete PT element.
+
 2011-01-09  John W. Eaton  <jwe@octave.org>
 
 	* lex.ll (display_token): Display token value for NUM, IMAG_NUM,
 	STRUCT_ELT, NAME, DQ_STRING, and SQ_STRING tokens.
 
 2011-01-09  John W. Eaton  <jwe@octave.org>
 
 	* lex.h, lex.ll, oct-parse.yy (lexer_flags::parsed_function_name):
diff --git a/src/token.cc b/src/token.cc
--- a/src/token.cc
+++ b/src/token.cc
@@ -60,24 +60,16 @@ token::token (double d, const std::strin
 token::token (end_tok_type t, int l, int c)
 {
   line_num = l;
   column_num = c;
   type_tag = ettype_token;
   et = t;
 }
 
-token::token (plot_tok_type t, int l, int c)
-{
-  line_num = l;
-  column_num = c;
-  type_tag = pttype_token;
-  pt = t;
-}
-
 token::token (symbol_table::symbol_record *s, int l, int c)
 {
   line_num = l;
   column_num = c;
   type_tag = sym_rec_token;
   sr = s;
 }
 
@@ -125,23 +117,16 @@ token::number (void)
 
 token::end_tok_type
 token::ettype (void)
 {
   assert (type_tag == ettype_token);
   return et;
 }
 
-token::plot_tok_type
-token::pttype (void)
-{
-  assert (type_tag == pttype_token);
-  return pt;
-}
-
 symbol_table::symbol_record *
 token::sym_rec (void)
 {
   assert (type_tag == sym_rec_token);
   return sr;
 }
 
 symbol_table::symbol_record *
diff --git a/src/token.h b/src/token.h
--- a/src/token.h
+++ b/src/token.h
@@ -32,17 +32,16 @@ token
 public:
 
   enum token_type
     {
       generic_token,
       string_token,
       double_token,
       ettype_token,
-      pttype_token,
       sym_rec_token,
       scls_rec_token,
       meta_rec_token
     };
 
   enum end_tok_type
     {
       simple_end,
@@ -54,45 +53,36 @@ public:
       methods_end,
       properties_end,
       switch_end,
       while_end,
       try_catch_end,
       unwind_protect_end
     };
 
-  enum plot_tok_type
-    {
-      replot = 1,
-      two_dee = 2,
-      three_dee = 3
-    };
-
   token (int l = -1, int c = -1);
   token (const std::string& s, int l = -1, int c = -1);
   token (double d, const std::string& s = std::string (),
          int l = -1, int c = -1);
   token (end_tok_type t, int l = -1, int c = -1);
-  token (plot_tok_type t, int l = -1, int c = -1);
   token (symbol_table::symbol_record *s, int l = -1, int c = -1);
   token (symbol_table::symbol_record *cls,
          symbol_table::symbol_record *pkg, int l = -1, int c = -1);
   token (symbol_table::symbol_record *mth,
          symbol_table::symbol_record *cls,
          symbol_table::symbol_record *pkg, int l = -1, int c = -1);
 
   ~token (void);
 
   int line (void) { return line_num; }
   int column (void) { return column_num; }
 
   std::string text (void);
   double number (void);
   end_tok_type ettype (void);
-  plot_tok_type pttype (void);
   symbol_table::symbol_record *sym_rec (void);
 
   symbol_table::symbol_record *method_rec (void);
   symbol_table::symbol_record *class_rec (void);
   symbol_table::symbol_record *package_rec (void);
 
   symbol_table::symbol_record *meta_class_rec (void);
   symbol_table::symbol_record *meta_package_rec (void);
@@ -110,17 +100,16 @@ private:
   int line_num;
   int column_num;
   token_type type_tag;
   union
     {
       std::string *str;
       double num;
       end_tok_type et;
-      plot_tok_type pt;
       symbol_table::symbol_record *sr;
       struct
         {
           symbol_table::symbol_record *mr;
           symbol_table::symbol_record *cr;
           symbol_table::symbol_record *pr;
         } sc;
       struct
