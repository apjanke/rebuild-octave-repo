# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1495564064 14400
#      Tue May 23 14:27:44 2017 -0400
# Node ID d2748870db4eb09fad3a67688be80ff04c9424f8
# Parent  d2e300f7700c3eb2757bfe4ab228993b9fbd01e3
undo part of previous change

* pt-binop.h (tree_binary_expression::lhs,
tree_binary_expression::rhs): Undo previous change.

* pt-cbinop.h (tree_compound_binary_expression::clhs,
tree_compound_binary_expression::crhs): Rename from lhs and rhs.

* pt-eval.cc (tree_evaluator::visit_compound_binary_expression): Use
clhs and crhs methods to access transformed operands.

diff --git a/libinterp/parse-tree/pt-binop.h b/libinterp/parse-tree/pt-binop.h
--- a/libinterp/parse-tree/pt-binop.h
+++ b/libinterp/parse-tree/pt-binop.h
@@ -90,18 +90,18 @@ namespace octave
     bool is_binary_expression (void) const { return true; }
 
     bool rvalue_ok (void) const { return true; }
 
     std::string oper (void) const;
 
     octave_value::binary_op op_type (void) const { return etype; }
 
-    virtual tree_expression * lhs (void) { return op_lhs; }
-    virtual tree_expression * rhs (void) { return op_rhs; }
+    tree_expression * lhs (void) { return op_lhs; }
+    tree_expression * rhs (void) { return op_rhs; }
 
     bool is_eligible_for_braindead_shortcircuit (void) const
     {
       return eligible_for_braindead_shortcircuit;
     }
 
     tree_expression * dup (symbol_table::scope_id scope,
                            symbol_table::context_id context) const;
diff --git a/libinterp/parse-tree/pt-cbinop.h b/libinterp/parse-tree/pt-cbinop.h
--- a/libinterp/parse-tree/pt-cbinop.h
+++ b/libinterp/parse-tree/pt-cbinop.h
@@ -50,18 +50,18 @@ namespace octave
                                      octave_value::compound_binary_op ct)
       : tree_binary_expression (a, b, l, c, t), cop_lhs (ca), cop_rhs (cb),
         etype (ct) { }
 
     octave_value::compound_binary_op cop_type (void) const { return etype; }
 
     bool rvalue_ok (void) const { return true; }
 
-    tree_expression * lhs (void) { return cop_lhs; }
-    tree_expression * rhs (void) { return cop_rhs; }
+    tree_expression * clhs (void) { return cop_lhs; }
+    tree_expression * crhs (void) { return cop_rhs; }
 
     void accept (tree_walker& tw)
     {
       tw.visit_compound_binary_expression (*this);
     }
 
   private:
 
diff --git a/libinterp/parse-tree/pt-eval.cc b/libinterp/parse-tree/pt-eval.cc
--- a/libinterp/parse-tree/pt-eval.cc
+++ b/libinterp/parse-tree/pt-eval.cc
@@ -281,23 +281,23 @@ namespace octave
     m_value_stack.push (ovl (val));
   }
 
   void
   tree_evaluator::visit_compound_binary_expression (tree_compound_binary_expression& expr)
   {
     octave_value val;
 
-    tree_expression *op_lhs = expr.lhs ();
+    tree_expression *op_lhs = expr.clhs ();
 
     if (op_lhs)
       {
         octave_value a = evaluate (op_lhs);
 
-        tree_expression *op_rhs = expr.rhs ();
+        tree_expression *op_rhs = expr.crhs ();
 
         if (a.is_defined () && op_rhs)
           {
             octave_value b = evaluate (op_rhs);
 
             if (b.is_defined ())
               {
                 octave_value::compound_binary_op etype = expr.cop_type ();
