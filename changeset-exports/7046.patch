# HG changeset patch
# User dbateman
# Date 1193055140 0
#      Mon Oct 22 12:12:20 2007 +0000
# Node ID fbf8576cf399770ce541516f4244df4d852d3bd3
# Parent  271fa61d8faee877b49b8ce36456c80fd333ed1f
[project @ 2007-10-22 12:12:20 by dbateman]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,25 @@
 2007-10-22  David Bateman  <dbateman@free.fr>
 
         * data.cc (Ftic, Ftoc, Fcputime): New builtin versions of the
         benchmarking functions for speed.
+	* oct-map.cc (Octave_map::squeeze, Octave_map::permute): New methods.
+	(Octave_map::index (const octave_value_list&, bool)): Add resize_ok
+	argument, define as const and use const_iterator internally.
+	(Octave_map::index (idx_vector&, ...), Octave_map::index (Array 
+	<idx_vector>&, ...)): New forms of the index function.
+	* oct-map.h (squeeze, permute, indx (const octave_value_list&, bool),
+	index (idx_vector&, ...), index (Array <idx_vector>&, ...)): Add
+	or update declaration.
+	* ov-struct.cc (octave_struct::do_index_op (const octave_value_list&,
+	bool)): New method.
+	* ov-struct.h (do_index_op (const octave_value_list&, bool)): Declare
+	it.
+	(squeeze (void), permute (const Arra<int>&, bool): New methods.
 
 2007-10-19  Kai Habel  <kai.habel@gmx.de>
 
 	* DLD-FUNCTIONS/__contourc__.cc (add_point): Rename from
 	cl_add_point.  Change all uses.
 	(end_contour): Rename from cl_end_contour.  Change all uses.
 	(start_contour): Rename from cl_start_contour.  Change all uses.
 	(drawcn): Rename from cl_drawcn.  New algorithm for locating contours.
diff --git a/src/oct-map.cc b/src/oct-map.cc
--- a/src/oct-map.cc
+++ b/src/oct-map.cc
@@ -44,16 +44,52 @@ Octave_map::Octave_map (const dim_vector
 	  map[k] = c;
 	  key_list.push_back (k);
 	}
     }
   else
     error ("Octave_map: expecting keys to be cellstr");
 }
 
+Octave_map
+Octave_map::squeeze (void) const
+{
+  Octave_map retval (dims ().squeeze ());
+
+  for (const_iterator pa = begin (); pa != end (); pa++)
+    {
+      Cell tmp = contents (pa).squeeze ();
+
+      if (error_state)
+	break;
+
+      retval.assign (key (pa), tmp);
+    }
+
+  return retval;
+}
+
+Octave_map
+Octave_map::permute (const Array<int>& vec, bool inv) const
+{
+  Octave_map retval (dims ());
+
+  for (const_iterator pa = begin (); pa != end (); pa++)
+    {
+      Cell tmp = contents (pa).permute (vec, inv);
+
+      if (error_state)
+	break;
+
+      retval.assign (key (pa), tmp);
+    }
+
+  return retval;
+}
+
 Cell&
 Octave_map::contents (const std::string& k)
 {
   maybe_add_to_key_list (k);
 
   return map[k];
 }
 
@@ -417,35 +453,91 @@ Octave_map::assign (const std::string& k
       else
 	error ("invalid structure assignment");
     }
 
   return *this;
 }
 
 Octave_map
-Octave_map::index (const octave_value_list& idx)
+Octave_map::index (const octave_value_list& idx, bool resize_ok) const
 {
   Octave_map retval;
 
   if (idx.length () > 0)
     {
-      for (iterator p = begin (); p != end (); p++)
+      for (const_iterator p = begin (); p != end (); p++)
 	{
-	  Cell tmp = contents(p).index (idx);
+	  Cell tmp = contents(p).index (idx, resize_ok);
 
 	  if (error_state)
 	    break;
 
 	  retval.assign (key(p), tmp);
 	}
     }
   else
     retval = *this;
 
   return retval;
 }
 
+Octave_map
+Octave_map::index (idx_vector& i, int resize_ok, const octave_value& rfv) const
+{
+  Octave_map retval (dims ());
+
+  for (const_iterator p = begin (); p != end (); p++)
+    {
+      Cell tmp = contents (p).index (i, resize_ok, rfv);
+
+      if (error_state)
+	break;
+
+      retval.assign (key (p), tmp);
+    }
+
+  return retval;
+}
+
+Octave_map
+Octave_map::index (idx_vector& i, idx_vector& j, int resize_ok,
+		   const octave_value& rfv) const
+{
+  Octave_map retval (dims ());
+
+  for (const_iterator p = begin (); p != end (); p++)
+    {
+      Cell tmp = contents (p).index (i, j, resize_ok, rfv);
+
+      if (error_state)
+	break;
+
+      retval.assign (key (p), tmp);
+    }
+
+  return retval;
+}
+
+Octave_map
+Octave_map::index (Array<idx_vector>& ra_idx, int resize_ok,
+		   const octave_value& rfv) const
+{
+  Octave_map retval (dims ());
+
+  for (const_iterator p = begin (); p != end (); p++)
+    {
+      Cell tmp = contents (p).index (ra_idx, resize_ok, rfv);
+
+      if (error_state)
+	break;
+
+      retval.assign (key (p), tmp);
+    }
+
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/oct-map.h b/src/oct-map.h
--- a/src/oct-map.h
+++ b/src/oct-map.h
@@ -82,16 +82,20 @@ Octave_map
 	  dimensions = m.dimensions;
 	}
 
       return *this;
     }
 
   ~Octave_map (void) { }
 
+  Octave_map squeeze (void) const; 
+
+  Octave_map permute (const Array<int>& vec, bool inv = false) const; 
+
   // This is the number of keys.
   octave_idx_type nfields (void) const { return map.size (); }
 
   void del (const std::string& k)
     {
       iterator p = map.find (k);
 
       if (p != map.end ())
@@ -167,17 +171,27 @@ Octave_map
 
   Octave_map& assign (const octave_value_list& idx, const std::string& k,
 		      const Cell& rhs);
 
   Octave_map& assign (const std::string& k, const octave_value& rhs);
 
   Octave_map& assign (const std::string& k, const Cell& rhs);
 
-  Octave_map index (const octave_value_list& idx);
+  Octave_map index (const octave_value_list& idx, 
+		    bool resize_ok = false) const;
+
+  Octave_map index (idx_vector& i, int resize_ok = 0, 
+		    const octave_value& rfv = Cell::resize_fill_value ()) const;
+
+  Octave_map index (idx_vector& i, idx_vector& j, int resize_ok = 0,
+		    const octave_value& rfv = Cell::resize_fill_value ()) const;
+
+  Octave_map index (Array<idx_vector>& ra_idx, int resize_ok = 0,
+		    const octave_value& rfv = Cell::resize_fill_value ()) const;
 
 private:
 
   // The map of names to values.
   std::map<std::string, Cell> map;
 
   // An extra list of keys, so we can keep track of the order the keys
   // are added for compatibility with you know what.
diff --git a/src/ov-struct.cc b/src/ov-struct.cc
--- a/src/ov-struct.cc
+++ b/src/ov-struct.cc
@@ -398,16 +398,78 @@ octave_struct::subsasgn (const std::stri
 	}
     }
   else
     gripe_failed_assignment ();
 
   return retval;
 }
 
+octave_value
+octave_struct::do_index_op (const octave_value_list& idx, bool resize_ok)
+{
+  octave_value retval;
+
+  octave_idx_type n_idx = idx.length ();
+
+  int nd = map.ndims ();
+
+  switch (n_idx)
+    {
+    case 0:
+      retval = map;
+      break;
+
+    case 1:
+      {
+	idx_vector i = idx (0).index_vector ();
+
+	if (! error_state)
+	  retval = map.index (i, resize_ok, Cell::resize_fill_value ());
+      }
+      break;
+
+    default:
+      {
+	if (n_idx == 2 && nd == 2)
+	  {
+	    idx_vector i = idx (0).index_vector ();
+
+	    if (! error_state)
+	      {
+		idx_vector j = idx (1).index_vector ();
+
+		if (! error_state)
+		  retval = map.index (i, j, resize_ok,
+				      Cell::resize_fill_value ());
+	      }
+	  }
+	else
+	  {
+	    Array<idx_vector> idx_vec (n_idx);
+
+	    for (octave_idx_type i = 0; i < n_idx; i++)
+	      {
+		idx_vec(i) = idx(i).index_vector ();
+
+		if (error_state)
+		  break;
+	      }
+
+	    if (! error_state)
+	      retval = map.index (idx_vec, resize_ok,
+				  Cell::resize_fill_value ());
+	  }
+      }
+      break;
+    }
+
+  return retval;
+}
+
 size_t
 octave_struct::byte_size (void) const
 {
   // Neglect the size of the fieldnames.
 
   size_t retval = 0;
 
   for (Octave_map::const_iterator p = map.begin (); p != map.end (); p++)
diff --git a/src/ov-struct.h b/src/ov-struct.h
--- a/src/ov-struct.h
+++ b/src/ov-struct.h
@@ -78,16 +78,24 @@ public:
 
   static octave_value numeric_conv (const Cell& val,
 				    const std::string& type);
 
   octave_value subsasgn (const std::string& type,
 			 const std::list<octave_value_list>& idx,
 			 const octave_value& rhs);
 
+  octave_value squeeze (void) const { return map.squeeze (); }
+
+  octave_value permute (const Array<int>& vec, bool inv = false) const
+    { return map.permute (vec, inv); }
+
+  octave_value do_index_op (const octave_value_list& idx,
+			    bool resize_ok = false);
+
   dim_vector dims (void) const { return map.dims (); }
 
   size_t byte_size (void) const;
 
   // This is the number of elements in each field.  The total number
   // of elements is numel () * nfields ().
   octave_idx_type numel (void) const
   {
