# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1343772414 14400
#      Tue Jul 31 18:06:54 2012 -0400
# Node ID 7a3957ca99c38b3207ca3dd691a72b1b76b3255b
# Parent  f57d7578c1a6b2de99d455f0785c97ae7b22ec21
Handle complex arguments in imagesc (bug #36866)

* image.m: Don't error out with complex images, show real part and
  warn, like imshow.

* graphics.in.h (array_property): Change type_constraint to std::set
  instead of std::list.
  (array_property::add_constraint): Use std::set::insert instead of
  std::list::push_back.
  (image::properties::init): Add new "real" constraint.

* graphics.cc (array_property::validate): Check for new "real" type constraint.

* gl-render.cc (opengl_renderer::draw_image): Abort if no image data is found.

diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -68,17 +68,18 @@ function retval = image (varargin)
   else
     x = varargin{1};
     y = varargin{2};
     img = varargin{3};
     firstnonnumeric = 4;
   endif
 
   if (iscomplex (img))
-    error ("image: data can not be complex");
+    warning ("image: only showing real part of complex image");
+    img = real (img);
   endif
 
   oldax = gca ();
   unwind_protect
     axes (ax);
     h = __img__ (x, y, img, varargin {firstnonnumeric:end});
     set (ax, "layer", "top");
   unwind_protect_cleanup
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -2483,16 +2483,20 @@ opengl_renderer::draw_image (const image
 {
   octave_value cdata = props.get_color_data ();
   dim_vector dv (cdata.dims ());
   int h = dv(0), w = dv(1);
 
   Matrix x = props.get_xdata ().matrix_value ();
   Matrix y = props.get_ydata ().matrix_value ();
 
+  // Someone wants us to draw an empty image? No way.
+  if (x.is_empty () || y.is_empty ())
+    return;
+
   if (w > 1 && x(1) == x(0))
     x(1) = x(1) + (w-1);
 
   if (h > 1 && y(1) == y(0))
     y(1) = y(1) + (h-1);
 
   const ColumnVector p0 = xform.transform (x(0), y(0), 0);
   const ColumnVector p1 = xform.transform (x(1), y(1), 0);
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -1196,20 +1196,24 @@ array_property::validate (const octave_v
 
   // FIXME -- should we always support []?
   if (v.is_empty () && v.is_numeric_type ())
     return true;
 
   // check value type
   if (type_constraints.size () > 0)
     {
-      for (std::list<std::string>::const_iterator it = type_constraints.begin ();
-           ! xok && it != type_constraints.end (); ++it)
-        if ((*it) == v.class_name ())
-          xok = true;
+      if(type_constraints.find (v.class_name()) != type_constraints.end())
+        xok = true;
+
+      // check if complex is allowed (it's also of class "double", so
+      // checking that alone is not enough to ensure real type)
+      if (type_constraints.find ("real") != type_constraints.end ()
+          && v.is_complex_type ())
+        xok = false;
     }
   else
     xok = v.is_numeric_type ();
 
   if (xok)
     {
       dim_vector vdims = v.dims ();
       int vlen = vdims.length ();
diff --git a/src/graphics.in.h b/src/graphics.in.h
--- a/src/graphics.in.h
+++ b/src/graphics.in.h
@@ -1408,17 +1408,17 @@ public:
     : base_property (p), data (p.data),
       xmin (p.xmin), xmax (p.xmax), xminp (p.xminp), xmaxp (p.xmaxp),
       type_constraints (), size_constraints ()
     { }
 
   octave_value get (void) const { return data; }
 
   void add_constraint (const std::string& type)
-    { type_constraints.push_back (type); }
+    { type_constraints.insert (type); }
 
   void add_constraint (const dim_vector& dims)
     { size_constraints.push_back (dims); }
 
   double min_val (void) const { return xmin; }
   double max_val (void) const { return xmax; }
   double min_pos (void) const { return xminp; }
   double max_neg (void) const { return xmaxp; }
@@ -1481,17 +1481,17 @@ private:
   OCTINTERP_API void get_data_limits (void);
 
 protected:
   octave_value data;
   double xmin;
   double xmax;
   double xminp;
   double xmaxp;
-  std::list<std::string> type_constraints;
+  std::set<std::string> type_constraints;
   std::list<dim_vector> size_constraints;
 };
 
 class row_vector_property : public array_property
 {
 public:
   row_vector_property (const std::string& nm, const graphics_handle& h,
                        const octave_value& m)
@@ -4427,16 +4427,17 @@ public:
         xdata.add_constraint (2);
         ydata.add_constraint (2);
         cdata.add_constraint ("double");
         cdata.add_constraint ("single");
         cdata.add_constraint ("logical");
         cdata.add_constraint ("uint8");
         cdata.add_constraint ("uint16");
         cdata.add_constraint ("int16");
+        cdata.add_constraint ("real");
         cdata.add_constraint (dim_vector (-1, -1));
         cdata.add_constraint (dim_vector (-1, -1, 3));
       }
 
   private:
     void update_xdata (void)
     {
       Matrix limits = xdata.get_limits ();
