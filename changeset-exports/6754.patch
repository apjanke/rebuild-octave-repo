# HG changeset patch
# User jwe
# Date 1182792707 0
#      Mon Jun 25 17:31:47 2007 +0000
# Node ID 451b346d8c2f0c70aac957039149764ade0d2772
# Parent  a5c64dad5b936e61ef12dd922e85028aebe9d371
[project @ 2007-06-25 17:31:46 by jwe]

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,14 @@
+2007-06-25  John W. Eaton  <jwe@octave.org>
+
+	* interpreter/stats.txi: Reorganize sections and add introductory text.
+
+        * interpreter/octave.texi: Update to reflect changes in stats.txi.
+
 2007-06-18  David Bateman  <dbateman@free.fr>
 
 	* interpreter/interpimages.m: Simpler images to demonstrate
 	the continuity of the second derivative of splines.
 	* interpreter/interp.txi: Also change figures here.
 	* interpreter/Makefile.in: and here.
 	
 2007-06-18  Søren Hauberg  <hauberg@gmail.com>
diff --git a/doc/interpreter/contributors.in b/doc/interpreter/contributors.in
--- a/doc/interpreter/contributors.in
+++ b/doc/interpreter/contributors.in
@@ -75,16 +75,17 @@ Alan W. Irwin
 Geoff Jacobsen
 Mats Jansson
 Cai Jianming
 Steven G. Johnson
 Heikki Junes
 Atsushi Kajita
 Mohamed Kamoun
 Lute Kamstra
+Joel Keay
 Mumit Khan
 Paul Kienzle
 Aaron A. King
 Arno J. Klaassen
 Geoffrey Knauth
 Heine Kolltveit
 Ken Kouno
 Oyvind Kristiansen
diff --git a/doc/interpreter/octave.texi b/doc/interpreter/octave.texi
--- a/doc/interpreter/octave.texi
+++ b/doc/interpreter/octave.texi
@@ -427,20 +427,23 @@ Differential Equations
 Optimization
 
 * Quadratic Programming::       
 * Nonlinear Programming::       
 * Linear Least Squares::        
 
 Statistics
 
-* Basic Statistical Functions::  
+* Descriptive Statistics::
+* Basic Statistical Functions:: 
+* Statistical Plots:: 
 * Tests::                       
 * Models::                      
-* Distributions::               
+* Distributions::     
+* Random Number Generation::          
 
 Sets
 
 * Set Operations::
 
 Interpolation
 * One-dimensional Interpolation::
 * Multi-dimensional Interpolation::
diff --git a/doc/interpreter/sparse.txi b/doc/interpreter/sparse.txi
--- a/doc/interpreter/sparse.txi
+++ b/doc/interpreter/sparse.txi
@@ -468,17 +468,17 @@ used.
   @dfn{treeplot}
 @c @dfn{treelayout}
 
 @item Sparse matrix reordering:
   @dfn{ccolamd}, @dfn{colamd}, @dfn{colperm}, @dfn{csymamd},
   @dfn{dmperm}, @dfn{symamd}, @dfn{randperm}, @dfn{symrcm}
 
 @item Linear algebra:
-  @dfn{matrix\_type}, @dfn{spchol}, @dfn{cpcholinv}, 
+  @dfn{matrix_type}, @dfn{spchol}, @dfn{cpcholinv}, 
   @dfn{spchol2inv}, @dfn{spdet}, @dfn{spinv}, @dfn{spkron},
   @dfn{splchol}, @dfn{splu}, @dfn{spqr}, @dfn{normest}, 
   @dfn{sprank}
 @c @dfn{condest}, @dfn{spaugment}
 @c @dfn{eigs}, @dfn{svds} but these are in octave-forge for now
 
 @item Iterative techniques:
   @dfn{luinc}, @dfn{pcg}, @dfn{pcr}
diff --git a/doc/interpreter/stats.txi b/doc/interpreter/stats.txi
--- a/doc/interpreter/stats.txi
+++ b/doc/interpreter/stats.txi
@@ -1,92 +1,174 @@
 @c Copyright (C) 1996, 1997 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @node Statistics
 @chapter Statistics
 
+Octave has support for various statistical methods.  This includes
+basic descriptive statistics, statistical tests, random number generation,
+and much more.
+
+The functions that analyze data all assume that multidimensional data
+is arranged in a matrix where each row is an observation, and each
+column is a variable.  So, the matrix defined by
+
+@example
+a = [ 0.9, 0.7;
+      0.1, 0.1;
+      0.5, 0.4 ];
+@end example
+
+@noindent
+contains three observations from a two-dimensional distribution.
+While this is the default data arrangement, most functions support
+different arrangements.
+
+It should be noted that the statistics functions doesn't handle data
+containing NaN, NA, or Inf.  Such values needs to be handled explicitly.
+
 @menu
-* Basic Statistical Functions::  
+* Descriptive Statistics::
+* Basic Statistical Functions:: 
+* Statistical Plots:: 
 * Tests::                       
 * Models::                      
-* Distributions::               
+* Distributions::     
+* Random Number Generation::          
 @end menu
 
-@node Basic Statistical Functions
-@section Basic Statistical Functions
+@node Descriptive Statistics
+@section Descriptive Statistics
+
+Octave can compute various statistics such as the moments of a data set.
 
 @DOCSTRING(mean)
 
 @DOCSTRING(median)
 
+@DOCSTRING(meansq)
+
 @DOCSTRING(std)
 
+@DOCSTRING(var)
+
 @DOCSTRING(cov)
 
+@DOCSTRING(cor)
+
 @DOCSTRING(corrcoef)
 
 @DOCSTRING(kurtosis)
 
+@DOCSTRING(skewness)
+
+@DOCSTRING(statistics)
+
+@DOCSTRING(moment)
+
+@node Basic Statistical Functions
+@section Basic Statistical Functions
+
+Octave also supports various helpful statistical functions.
+
 @DOCSTRING(mahalanobis)
 
-@DOCSTRING(skewness)
+@DOCSTRING(center)
 
-@c FIXME -- these need to be organized.
+@DOCSTRING(studentize)
 
 @DOCSTRING(nchoosek)
 
 @DOCSTRING(perms)
 
 @DOCSTRING(values)
 
-@DOCSTRING(var)
-
 @DOCSTRING(table)
 
-@DOCSTRING(studentize)
-
-@DOCSTRING(statistics)
-
 @DOCSTRING(spearman)
 
 @DOCSTRING(run_count)
 
 @DOCSTRING(ranks)
 
 @DOCSTRING(range)
 
-@DOCSTRING(qqplot)
-
 @DOCSTRING(probit)
 
-@DOCSTRING(ppplot)
-
-@DOCSTRING(moment)
+@DOCSTRING(logit)
 
-@DOCSTRING(meansq)
-
-@DOCSTRING(logit)
+@DOCSTRING(cloglog)
 
 @DOCSTRING(kendall)
 
 @DOCSTRING(iqr)
 
 @DOCSTRING(cut)
 
-@DOCSTRING(cor)
+@node Statistical Plots
+@section Statistical Plots
+
+@c Should hist be moved to here, or perhaps the qqplot and ppplot
+@c functions should be moved to the Plotting Chapter?
 
-@DOCSTRING(cloglog)
+Octave can create Quantile Plots (QQ-Plots), and Probability Plots
+(PP-Plots).  These are simple graphical tests for determining if a
+data set comes from a certain distribution.
 
-@DOCSTRING(center)
+It is worth noticing that Octave can also show histograms of data
+using the @code{hist} function as described in
+@ref{Specialized Two-Dimensional Plots}.
+
+@DOCSTRING(qqplot)
+
+@DOCSTRING(ppplot)
 
 @node Tests
 @section Tests
 
+Octave can perform several different statistical tests.  The following
+table summarizes the available tests.
+
+@multitable @columnfractions .4 .5
+@item @strong{Hypothesis}
+  @tab @strong{Test Functions}
+@item Equal mean values
+  @tab @code{anova}, @code{hotelling_test2}, @code{t_test_2},
+       @code{welch_test}, @code{wilcoxon_test}, @code{z_test_2}
+@item Equal medians
+  @tab @code{kruskal_wallis_test}, @code{sign_test}
+@item Equal variances
+  @tab @code{bartlett_test}, @code{manova}, @code{var_test}
+@item Equal distributions
+  @tab @code{chisquare_test_homogeneity}, @code{kolmogorov_smirnov_test_2},
+       @code{u_test}
+@item Equal marginal frequencies
+  @tab @code{mcnemar_test}
+@item Equal success probabilities
+  @tab @code{prop_test_2}
+@item Independent observations
+  @tab @code{chisquare_test_independence}, @code{run_test}
+@item Uncorrelated observations
+  @tab @code{cor_test}
+@item Given mean value
+  @tab @code{hotelling_test}, @code{t_test}, @code{z_test}
+@item Observations from given distribution
+  @tab @code{kolmogorov_smirnov_test}
+@item Regression
+  @tab @code{f_test_regression}, @code{t_test_regression}
+@end multitable
+
+The tests return a p-value that describes the outcome of the test.
+Assuming that the test hypothesis is true, the p-value is the probability
+of obtaining a worse result then the observed one.  So large p-values
+corresponds to a successful test.  Usually a test hypothesis is accepted
+if the p-value exceeds @math{0.05}.
+
 @DOCSTRING(anova)
 
 @DOCSTRING(bartlett_test)
 
 @DOCSTRING(chisquare_test_homogeneity)
 
 @DOCSTRING(chisquare_test_independence)
 
@@ -135,179 +217,319 @@
 @node Models
 @section Models
 
 @DOCSTRING(logistic_regression)
 
 @node Distributions
 @section Distributions
 
+Octave has functions for computing the Probability Density Function
+(PDF), the Cumulative Distribution function (CDF), and the quantile
+(the inverse of the CDF) of a large number of distributions.
+
+The following table summarizes the supported distributions (in 
+alphabetical order).
+
+@multitable @columnfractions .4 .2 .2 .2
+@item @strong{Distribution}
+  @tab @strong{PDF}
+  @tab @strong{CDF}
+  @tab @strong{Quantile}
+@item Beta Distribution
+  @tab @code{betapdf}
+  @tab @code{betacdf}
+  @tab @code{betainv}
+@item Binomial Distribution
+  @tab @code{binopdf}
+  @tab @code{binocdf}
+  @tab @code{binoinv}
+@item Cauchy Distribution
+  @tab @code{cauchy_pdf}
+  @tab @code{cauchy_cdf}
+  @tab @code{cauchy_inv}
+@item Chi-Square Distribution
+  @tab @code{chi2pdf}
+  @tab @code{chi2cdf}
+  @tab @code{chi2inv}
+@item Univariate Discrete Distribution
+  @tab @code{discrete_pdf}
+  @tab @code{discrete_cdf}
+  @tab @code{discrete_inv}
+@item Empirical Distribution
+  @tab @code{empirical_pdf}
+  @tab @code{empirical_cdf}
+  @tab @code{empirical_inv}
+@item Exponential Distribution
+  @tab @code{exppdf}
+  @tab @code{expcdf}
+  @tab @code{expinv}
+@item F Distribution
+  @tab @code{fpdf}
+  @tab @code{fcdf}
+  @tab @code{finv}
+@item Gamma Distribution
+  @tab @code{gampdf}
+  @tab @code{gamcdf}
+  @tab @code{gaminv}
+@item Geometric Distribution
+  @tab @code{geopdf}
+  @tab @code{geocdf}
+  @tab @code{geoinv}
+@item Hypergeometric Distribution
+  @tab @code{hygepdf}
+  @tab @code{hygecdf}
+  @tab @code{hygeinv}
+@item Kolmogorov Smirnov Distribution
+  @tab @emph{Not Available}
+  @tab @code{kolmogorov_smirnov_cdf}
+  @tab @emph{Not Available}
+@item Laplace Distribution
+  @tab @code{laplace_pdf}
+  @tab @code{laplace_cdf}
+  @tab @code{laplace_inv}
+@item Logistic Distribution
+  @tab @code{logistic_pdf}
+  @tab @code{logistic_cdf}
+  @tab @code{logistic_inv}
+@item Log-Normal Distribution
+  @tab @code{lognpdf}
+  @tab @code{logncdf}
+  @tab @code{logninv}
+@item Pascal Distribution
+  @tab @code{nbinpdf}
+  @tab @code{nbincdf}
+  @tab @code{nbininv}
+@item Univariate Normal Distribution
+  @tab @code{normpdf}
+  @tab @code{normcdf}
+  @tab @code{norminv}
+@item Poisson Distribution
+  @tab @code{poisspdf}
+  @tab @code{poisscdf}
+  @tab @code{poissinv}
+@item t (Student) Distribution
+  @tab @code{tpdf}
+  @tab @code{tcdf}
+  @tab @code{tinv}
+@item Univariate Discrete Distribution
+  @tab @code{unidpdf}
+  @tab @code{unidcdf}
+  @tab @code{unidinv}
+@item Uniform Distribution
+  @tab @code{unifpdf}
+  @tab @code{unifcdf}
+  @tab @code{unifinv}
+@item Weibull Distribution
+  @tab @code{wblpdf}
+  @tab @code{wblcdf}
+  @tab @code{wblinv}
+@end multitable
+
 @DOCSTRING(betacdf)
 
 @DOCSTRING(betainv)
 
 @DOCSTRING(betapdf)
 
-@DOCSTRING(betarnd)
-
 @DOCSTRING(binocdf)
 
 @DOCSTRING(binoinv)
 
 @DOCSTRING(binopdf)
 
-@DOCSTRING(binornd)
-
 @DOCSTRING(cauchy_cdf)
 
 @DOCSTRING(cauchy_inv)
 
 @DOCSTRING(cauchy_pdf)
 
-@DOCSTRING(cauchy_rnd)
-
 @DOCSTRING(chi2cdf)
 
 @DOCSTRING(chi2inv)
 
 @DOCSTRING(chi2pdf)
 
-@DOCSTRING(chi2rnd)
-
 @DOCSTRING(discrete_cdf)
 
 @DOCSTRING(discrete_inv)
 
 @DOCSTRING(discrete_pdf)
 
-@DOCSTRING(discrete_rnd)
-
 @DOCSTRING(empirical_cdf)
 
 @DOCSTRING(empirical_inv)
 
 @DOCSTRING(empirical_pdf)
 
-@DOCSTRING(empirical_rnd)
-
 @DOCSTRING(expcdf)
 
 @DOCSTRING(expinv)
 
 @DOCSTRING(exppdf)
 
-@DOCSTRING(exprnd)
-
 @DOCSTRING(fcdf)
 
 @DOCSTRING(finv)
 
 @DOCSTRING(fpdf)
 
-@DOCSTRING(frnd)
-
 @DOCSTRING(gamcdf)
 
 @DOCSTRING(gaminv)
 
 @DOCSTRING(gampdf)
 
-@DOCSTRING(gamrnd)
-
 @DOCSTRING(geocdf)
 
 @DOCSTRING(geoinv)
 
 @DOCSTRING(geopdf)
 
-@DOCSTRING(geornd)
-
 @DOCSTRING(hygecdf)
 
 @DOCSTRING(hygeinv)
 
 @DOCSTRING(hygepdf)
 
-@DOCSTRING(hygernd)
-
 @DOCSTRING(kolmogorov_smirnov_cdf)
 
 @DOCSTRING(laplace_cdf)
 
 @DOCSTRING(laplace_inv)
 
 @DOCSTRING(laplace_pdf)
 
-@DOCSTRING(laplace_rnd)
-
 @DOCSTRING(logistic_cdf)
 
 @DOCSTRING(logistic_inv)
 
 @DOCSTRING(logistic_pdf)
 
-@DOCSTRING(logistic_rnd)
-
 @DOCSTRING(logncdf)
 
 @DOCSTRING(logninv)
 
 @DOCSTRING(lognpdf)
 
-@DOCSTRING(lognrnd)
-
 @DOCSTRING(nbincdf)
 
 @DOCSTRING(nbininv)
 
 @DOCSTRING(nbinpdf)
 
-@DOCSTRING(nbinrnd)
-
 @DOCSTRING(normcdf)
 
 @DOCSTRING(norminv)
 
 @DOCSTRING(normpdf)
 
-@DOCSTRING(normrnd)
-
 @DOCSTRING(poisscdf)
 
 @DOCSTRING(poissinv)
 
 @DOCSTRING(poisspdf)
 
-@DOCSTRING(poissrnd)
-
 @DOCSTRING(tcdf)
 
 @DOCSTRING(tinv)
 
 @DOCSTRING(tpdf)
 
-@DOCSTRING(trnd)
-
 @DOCSTRING(unidcdf)
 
 @DOCSTRING(unidinv)
 
 @DOCSTRING(unidpdf)
 
-@DOCSTRING(unidrnd)
-
 @DOCSTRING(unifcdf)
 
 @DOCSTRING(unifinv)
 
 @DOCSTRING(unifpdf)
 
-@DOCSTRING(unifrnd)
-
 @DOCSTRING(wblcdf)
 
 @DOCSTRING(wblinv)
 
 @DOCSTRING(wblpdf)
 
+@node Random Number Generation
+@section Random Number Generation
+
+Octave can generate random numbers from a large number of distributions.
+The random number generators are based on the random number generators
+described in @ref{Special Utility Matrices}.
+@c Should rand, randn, rande, randp, and randg be moved to here?
+
+The following table summarizes the available random number generators
+(in alphabetical order).
+
+@multitable @columnfractions .4 .3
+@item @strong{Distribution}             @tab @strong{Function}
+@item Beta Distribution                 @tab @code{betarnd}
+@item Binomial Distribution             @tab @code{binornd}
+@item Cauchy Distribution               @tab @code{cauchy_rnd}
+@item Chi-Square Distribution           @tab @code{chi2rnd}
+@item Univariate Discrete Distribution  @tab @code{discrete_rnd}
+@item Empirical Distribution            @tab @code{empirical_rnd}
+@item Exponential Distribution          @tab @code{exprnd}
+@item F Distribution                    @tab @code{frnd}
+@item Gamma Distribution                @tab @code{gamrnd}
+@item Geometric Distribution            @tab @code{geornd}
+@item Hypergeometric Distribution       @tab @code{hygernd}
+@item Laplace Distribution              @tab @code{laplace_rnd}
+@item Logistic Distribution             @tab @code{logistic_rnd}
+@item Log-Normal Distribution           @tab @code{lognrnd}
+@item Pascal Distribution               @tab @code{nbinrnd}
+@item Univariate Normal Distribution    @tab @code{normrnd}
+@item Poisson Distribution              @tab @code{poissrnd}
+@item t (Student) Distribution          @tab @code{trnd}
+@item Univariate Discrete Distribution  @tab @code{unidrnd}
+@item Uniform Distribution              @tab @code{unifrnd}
+@item Weibull Distribution              @tab @code{wblrnd}
+@item Wiener Process                    @tab @code{wienrnd}
+@end multitable
+
+@DOCSTRING(betarnd)
+
+@DOCSTRING(binornd)
+
+@DOCSTRING(cauchy_rnd)
+
+@DOCSTRING(chi2rnd)
+
+@DOCSTRING(discrete_rnd)
+
+@DOCSTRING(empirical_rnd)
+
+@DOCSTRING(exprnd)
+
+@DOCSTRING(frnd)
+
+@DOCSTRING(gamrnd)
+
+@DOCSTRING(geornd)
+
+@DOCSTRING(hygernd)
+
+@DOCSTRING(laplace_rnd)
+
+@DOCSTRING(logistic_rnd)
+
+@DOCSTRING(lognrnd)
+
+@DOCSTRING(nbinrnd)
+
+@DOCSTRING(normrnd)
+
+@DOCSTRING(poissrnd)
+
+@DOCSTRING(trnd)
+
+@DOCSTRING(unidrnd)
+
+@DOCSTRING(unifrnd)
+
 @DOCSTRING(wblrnd)
 
 @DOCSTRING(wienrnd)
+
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,63 @@
+2007-06-25  Joel Keay  <keay@nhn.ou.edu>
+
+	* plot/drawnow.m: Handle GNUTERM=aqua if DISPLAY is not set.
+
+2007-06-25  Søren Hauberg   <hauberg@gmail.com>
+
+        * statistics/base/median.m: Update help text to mention 'dim'
+	argument, and note that the data should be sorted for the
+	definition of the median to be correct.
+
+        * statistics/base/std.m: Add missing square to definition of
+	standard deviation.
+
+        * statistics/base/cov.m: Add definition of covariance to the help text.
+
+        * statistics/base/kurtosis.m, statistics/base/skewness.m,
+	statistics/base/std.m:
+	Note that \bar{x} is the mean value of x in the help text.
+
+        * specfun/nchoosek.m: Add alternative definition of the binomial
+	coefficient to the help text.
+
+        * specfun/perms.m, statistics/base/values.m: Add example in help text.
+
+        * statistics/base/var.m: Put N in @math in help text.
+
+        * statistics/base/qqplot.m, statistics/base/ppplot.m, 
+	statistics/tests/kolmogorov_smirnov_test.m:
+	Write about possible values of 'dist' in help text.
+
+        * statistics/base/corrcoef.m, statistics/base/cor.m:
+	Add definition of correlation to the help text.
+
+        * statistics/base/logit.m, statistics/base/kendall.m,
+        statistics/base/cloglog.m, statistics/tests/hotelling_test_2.m,
+	statistics/distributions/wblcdf.m, statistics/distributions/wblpdf.m:
+	TeXification of help text.
+
+	* statistics/tests/hotelling_test.m: Write T^2 in @math in help text.
+
+	* statistics/tests/var_test.m, statistics/tests/welch_test.m:
+	Add missing @var's to help text.
+
+	* statistics/models/logistic_regression.m: Fix typos in help text.
+
+	* statistics/distributions/kolmogorov_smirnov_cdf.m: Fix TeX part
+	of help text.
+
+	* statistics/distributions/unidinv.m: Add a missing 'discrete' to
+	help text.
+
+	* statistics/distributions/unidpdf.m,
+	statistics/distributions/discrete_pdf.m:
+	Replace 'pDF' with 'PDF' in help text.
+
 2007-06-25  John W. Eaton  <jwe@octave.org>
 
 	* strings/substr.m: Use offset consistently in code and doc string.
 	From Rafael Laboissiere <rafael@debian.org>.
 
 2007-06-25  Pete Gustafson <petegus@umich.edu>
 
         * plot/__go_draw_axes__.m: Handle units for text objects.
@@ -1630,17 +1685,17 @@ 2006-11-14  John W. Eaton  <jwe@octave.o
 	* image/__img_gnuplot__.m: Rename from __img__m.
 
 2006-11-14  Søren Hauberg  <soren@hauberg.org>
 
 	* image/image_viewer.m: New function.
 	* image/__img_via_file__.m: New function.
 	* image/image.m: Use image_viewer to determine which program to
 	use for image viewing.
-	* scripts/image/__img__.m: Silently accept more than 3 args.
+	* image/__img__.m: Silently accept more than 3 args.
 
 2006-11-14  John W. Eaton  <jwe@octave.org>
 
 	* plot/__do_legend__.m, plot/__errplot__.m,
 	plot/__init_plot_vars__.m, plot/__plot_globals__.m,
 	plot/__plt3__.m, plot/__plt__.m, plot/__setup_plot__.m,
 	plot/legend.m, plot/mplot.m, plot/multiplot.m, plot/oneplot.m,
 	plot/replot.m, plot/subplot.m, plot/subwindow.m:
@@ -1656,27 +1711,23 @@ 2006-11-13  John W. Eaton  <jwe@octave.o
 	* testfun/assert.m: Force orientation to match when comparing
 	struct elements.
 
 	* general/__isequal__.m: Avoid assignment of comma-separated lists
 	when comparing structs.
 
 2006-11-13  Søren Hauberg  <hauberg@gmail.com>
 
-	* scripts/general/bicubic.m, scripts/general/cart2pol.m
-	scripts/general/cart2sph.m, scripts/plot/contour.m,
-	scripts/linear-algebra/cross.m, scripts/general/cumtrapz.m,
-	scripts/linear-algebra/dot.m, scripts/image/imshow.m,
-	scripts/general/interp2.m, scripts/general/mod.m,
-	scripts/plot/plot3.m, scripts/plot/__plr2__.m,
-	scripts/plot/__plr__.m, scripts/general/pol2cart.m,
-	scripts/general/polyarea.m, scripts/polynomial/polyfit.m,
-	scripts/general/rem.m, scripts/image/rgb2ind.m,
-	scripts/general/sph2cart.m, scripts/general/trapz.m,
-	scripts/miscellaneous/xor.m: Use size_equal
+	* general/bicubic.m, general/cart2pol.m, general/cart2sph.m,
+	plot/contour.m, linear-algebra/cross.m, general/cumtrapz.m,
+	linear-algebra/dot.m, image/imshow.m, general/interp2.m,
+	general/mod.m, plot/plot3.m, plot/__plr2__.m, plot/__plr__.m,
+	general/pol2cart.m, general/polyarea.m, polynomial/polyfit.m,
+	general/rem.m, image/rgb2ind.m, general/sph2cart.m,
+	general/trapz.m, miscellaneous/xor.m: Use size_equal.
 
 2006-11-13  John W. Eaton  <jwe@octave.org>
 
 	* plot/mesh.m: Use size_equal to compare dimensions.
 
 2006-11-13  Søren Hauberg  <soren@hauberg.org>
 
 	* plot/mesh.m: Simplify.  Set hidden3d for the plot.
@@ -1736,17 +1787,17 @@ 2006-11-06  Søren Hauberg  <soren@hauberg.org>
 
 	* image/__img__.m: Send "set size ratio -1" before plotting.
 
 2006-11-03  Bill Denney  <denney@seas.upenn.edu>
 
 	* strings/index.m: New arg, direction.  Simplify and speed up.
 	* strings/rindex.m: Implement using index (..., "last");
 
-	* scripts/blanks.m, scripts/strcat.m: Simplify.  Add tests.
+	* blanks.m, strcat.m: Simplify.  Add tests.
 
 2006-11-01  Bill Denney  <denney@seas.upenn.edu>
 
 	* general/__isequal__.m: Test size and class more consistently.
 
 2006-10-27  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/ls_command.m: Use /D instead of /w.
@@ -2384,29 +2435,26 @@ 2006-05-26  John W. Eaton  <jwe@octave.o
 
 2006-05-23  John W. Eaton  <jwe@octave.org>
 
 	* plot/mesh.m: Use __gnupot_raw__ except where __gnuplot_set__ is
 	really needed.
 
 2006-05-22  John W. Eaton  <jwe@octave.org>
 
-	* scripts/general/lookup.m: New file from Octave Forge.
+	* general/lookup.m: New file from Octave Forge.
 
 2006-05-22  David Bateman  <dbateman@free.fr>
 
-	* scripts/general/nthroot.m, scripts/linear-algebra/rref.m,
-	scripts/specfun/isprime.m, scripts/specfun/primes.m,
-	scripts/specfun/factor.m, scripts/specfun/nchoosek.m,
-	scripts/specfun/legendre.m, scripts/specfun/perms.m,
-	scripts/special-matrix/rosser.m,
-	scripts/special-matrix/wilkinson.m,
-	scripts/special-matrix/pascal.m, scripts/special-matrix/magic.m,
-	scripts/special-matrix/hadamard.m, scripts/strings/strtok.m:
-	New files from Octave Forge.
+	* general/nthroot.m, linear-algebra/rref.m, specfun/isprime.m,
+	specfun/primes.m, specfun/factor.m, specfun/nchoosek.m,
+	specfun/legendre.m, specfun/perms.m, special-matrix/rosser.m,
+	special-matrix/wilkinson.m, special-matrix/pascal.m,
+	special-matrix/magic.m, special-matrix/hadamard.m,
+	strings/strtok.m: New files from Octave Forge.
 
 2006-05-19  David Bateman  <dbateman@free.fr>
 
 	* polynomial/unmkpp.m, polynomial/mkpp.m, polynomial/spline.m,
 	polynomial/ppval.m, set/setxor.m: New files from Octave Forge.
 
 2006-05-17  John W. Eaton  <jwe@octave.org>
 
@@ -2465,17 +2513,17 @@ 2006-05-09  John W. Eaton  <jwe@octave.o
 
 2006-05-03  David Bateman  <dbateman@free.fr>
 
 	* path/rmpath.m, path/addpath.m, miscellaneous/path.m: Replace all
 	explicit uses of a path seperation character with pathsep().
 
 2006-05-03  Bob Weigel <rweigel@gmu.edu>
 
-        * scripts/set/setdiff.m: New arg, byrows.  New tests.
+        * set/setdiff.m: New arg, byrows.  New tests.
 
 2006-04-29  John W. Eaton  <jwe@octave.org>
 
 	* startup/main-rcfile: Disable some warnings.
 
 2006-04-14  Bill Denney  <denney@seas.upenn.edu>
 
  	* strings/strcmpi.m: Return false instead of error if args are not
@@ -2498,17 +2546,17 @@ 2006-04-05  John W. Eaton  <jwe@octave.o
 
 	* plot/__plt2__.m: Return data = [] and fmtstr = "" if x1 and x2
 	are both empty.
 	* plot/__plt__.m: Ignore empty data and format strings returned
 	from __plt1__ or __plt2__.
 
 2006-04-04  Bob Weigel  <rweigel@gmu.edu>
 
-        * scripts/set/unique.m: Properly handle single column input when
+        * set/unique.m: Properly handle single column input when
 	"rows" is specified.
 
 2006-04-04  John W. Eaton  <jwe@octave.org>
 
 	* path/setpath.m: New file.
 	* path/savepath.m: Use setpath to set path instead of assigning
 	directly to LOADPATH.
 
@@ -3479,17 +3527,17 @@ 2005-03-16  John W. Eaton  <jwe@octave.o
 2005-03-15  David Bateman  <dbateman@free.fr>
 
 	* set/unique.m, set/ismember.m: Handle cell arrays.
 
 2005-03-09  John W. Eaton  <jwe@octave.org>
 
 	* statistics/Makefile.in (bin-dist): Delete target.
 	(BINDISTSUBDIRS): Delete variable.
-	* scripts/control/Makefile.in: Likewise.
+	* control/Makefile.in: Likewise.
 
 	* audio/Makefile.in (bin-dist): Delete target.
 	(BINDISTFILES): Delete variable.
 	* control/base/Makefile.in: Likewise.
 	* control/hinf/Makefile.in: Likewise.
 	* control/obsolete/Makefile.in: Likewise.
 	* control/system/Makefile.in: Likewise.
 	* control/util/Makefile.in: Likewise.
diff --git a/scripts/plot/drawnow.m b/scripts/plot/drawnow.m
--- a/scripts/plot/drawnow.m
+++ b/scripts/plot/drawnow.m
@@ -105,17 +105,21 @@ function plot_stream = open_gnuplot_stre
     if (! isempty (h))
       set (h, "__plot_stream__", plot_stream);
     endif
 
     if (nargin == 3)
       fprintf (plot_stream, "set terminal %s\n;", term);
       fprintf (plot_stream, "set output \"%s\"\n;", file);
     elseif (isunix () && isempty (getenv ("DISPLAY")))
-      fprintf (plot_stream, "set terminal dumb\n;");
+      if (strcmp (getenv ("GNUTERM"), "aqua"))
+	fprintf (plot_stream, "set terminal aqua title \"Figure %d\";\n", h);
+      else
+        fprintf (plot_stream, "set terminal dumb\n;");
+      endif
     elseif (! isempty (h) && strcmp (getenv ("GNUTERM"), "wxt"))
       fprintf (plot_stream, "set terminal wxt title \"Figure %d\";\n", h);
     endif
 
     if (isempty (__go_close_all_registered__))
       atexit ("__go_close_all__");
       __go_close_all_registered__ = true;
     endif
diff --git a/scripts/specfun/nchoosek.m b/scripts/specfun/nchoosek.m
--- a/scripts/specfun/nchoosek.m
+++ b/scripts/specfun/nchoosek.m
@@ -23,27 +23,28 @@
 ## Compute the binomial coefficient or all combinations of @var{n}.
 ## If @var{n} is a scalar then, calculate the binomial coefficient
 ## of @var{n} and @var{k}, defined as
 ##
 ## @iftex
 ## @tex
 ## $$
 ##  {n \choose k} = {n (n-1) (n-2) \cdots (n-k+1) \over k!}
+##                = {n! \over k! (n-k)!}
 ## $$
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ##
 ## @example
 ## @group
 ##  /   \
-##  | n |    n (n-1) (n-2) ... (n-k+1)
-##  |   |  = -------------------------
-##  | k |               k!
+##  | n |    n (n-1) (n-2) ... (n-k+1)       n!
+##  |   |  = ------------------------- =  ---------
+##  | k |               k!                k! (n-k)!
 ##  \   /
 ## @end group
 ## @end example
 ## @end ifinfo
 ##
 ## If @var{n} is a vector generate all combinations of the elements
 ## of @var{n}, taken @var{k} at a time, one row per combination. The 
 ## resulting @var{c} has size @code{[nchoosek (length (@var{n}), 
diff --git a/scripts/specfun/perms.m b/scripts/specfun/perms.m
--- a/scripts/specfun/perms.m
+++ b/scripts/specfun/perms.m
@@ -19,16 +19,25 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} perms (@var{v})
 ##
 ## Generate all permutations of @var{v}, one row per permutation. The
 ## result has size @code{factorial (@var{n}) * @var{n}}, where @var{n}
 ## is the length of @var{v}.
 ##
+## As an example, @code{perms([1, 2, 3])} returns the matrix
+## @example
+##   1   2   3
+##   2   1   3
+##   1   3   2
+##   2   3   1
+##   3   1   2
+##   3   2   1
+## @end example
 ## @end deftypefn
 
 function A = perms (v)
   if (nargin != 1)
     print_usage ();
   endif
   v = v(:);
   n = length (v);
diff --git a/scripts/statistics/base/cloglog.m b/scripts/statistics/base/cloglog.m
--- a/scripts/statistics/base/cloglog.m
+++ b/scripts/statistics/base/cloglog.m
@@ -16,25 +16,34 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cloglog (@var{x})
 ## Return the complementary log-log function of @var{x}, defined as
 ##
+## @iftex
+## @tex
+## $$
+## {\rm cloglog}(x) = - \log (- \log (x))
+## $$
+## @end tex
+## @end iftex
+## @ifnottex
 ## @example
-## - log (- log (@var{x}))
+## cloglog(x) = - log (- log (@var{x}))
 ## @end example
+## @end ifnottex
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Complementary log-log function
 
 function y = cloglog (x)
 
   if (nargin != 1)
     print_usage ();
   endif
 
   y = - log (- log (x));
 
-endfunction
\ No newline at end of file
+endfunction
diff --git a/scripts/statistics/base/cor.m b/scripts/statistics/base/cor.m
--- a/scripts/statistics/base/cor.m
+++ b/scripts/statistics/base/cor.m
@@ -14,24 +14,41 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cor (@var{x}, @var{y})
+## Compute correlation.
+##
 ## The (@var{i}, @var{j})-th entry of @code{cor (@var{x}, @var{y})} is
 ## the correlation between the @var{i}-th variable in @var{x} and the
 ## @var{j}-th variable in @var{y}.
 ##
+## @iftex
+## @tex
+## $$
+## {\rm corrcoef}(x,y) = {{\rm cov}(x,y) \over {\rm std}(x) {\rm std}(y)}
+## $$
+## @end tex
+## @end iftex
+## @ifnottex
+## @example
+## corrcoef(x,y) = cov(x,y)/(std(x)*std(y))
+## @end example
+## @end ifnottex
+##
 ## For matrices, each row is an observation and each column a variable;
 ## vectors are always observations and may be row or column vectors.
 ##
 ## @code{cor (@var{x})} is equivalent to @code{cor (@var{x}, @var{x})}.
+##
+## Note that the @code{corrcoef} function does the same as @code{cor}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute correlations
 
 function retval = cor (x, y)
 
   if (nargin < 1 || nargin > 2)
diff --git a/scripts/statistics/base/corrcoef.m b/scripts/statistics/base/corrcoef.m
--- a/scripts/statistics/base/corrcoef.m
+++ b/scripts/statistics/base/corrcoef.m
@@ -14,20 +14,36 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} corrcoef (@var{x}, @var{y})
+## Compute correlation.
+##
 ## If each row of @var{x} and @var{y} is an observation and each column is
 ## a variable, the (@var{i}, @var{j})-th entry of
 ## @code{corrcoef (@var{x}, @var{y})} is the correlation between the
 ## @var{i}-th variable in @var{x} and the @var{j}-th variable in @var{y}.
+##
+## @iftex
+## @tex
+## $$
+## {\rm corrcoef}(x,y) = {{\rm cov}(x,y) \over {\rm std}(x) {\rm std}(y)}
+## $$
+## @end tex
+## @end iftex
+## @ifnottex
+## @example
+## corrcoef(x,y) = cov(x,y)/(std(x)*std(y))
+## @end example
+## @end ifnottex
+##
 ## If called with one argument, compute @code{corrcoef (@var{x}, @var{x})}.
 ## @end deftypefn
 
 ## Author: Kurt Hornik <hornik@wu-wien.ac.at>
 ## Created: March 1993
 ## Adapted-By: jwe
 
 function retval = corrcoef (x, y)
diff --git a/scripts/statistics/base/cov.m b/scripts/statistics/base/cov.m
--- a/scripts/statistics/base/cov.m
+++ b/scripts/statistics/base/cov.m
@@ -14,21 +14,31 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} cov (@var{x}, @var{y})
+## Compute covariance.
+##
 ## If each row of @var{x} and @var{y} is an observation and each column is
 ## a variable, the (@var{i}, @var{j})-th entry of
 ## @code{cov (@var{x}, @var{y})} is the covariance between the @var{i}-th
-## variable in @var{x} and the @var{j}-th variable in @var{y}.  If called
-## with one argument, compute @code{cov (@var{x}, @var{x})}.
+## variable in @var{x} and the @var{j}-th variable in @var{y}.
+## @iftex
+## @tex
+## $$
+## \sigma_{ij} = {1 \over N-1} \sum_{i=1}^N (x_i - \bar{x})(y_i - \bar{y})
+## $$
+## where $\bar{x}$ and $\bar{y}$ are the mean values of $x$ and $y$.
+## @end tex
+## @end iftex
+## If called with one argument, compute @code{cov (@var{x}, @var{x})}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute covariances
 
 function c = cov (x, y)
 
   if (nargin < 1 || nargin > 2)
diff --git a/scripts/statistics/base/kendall.m b/scripts/statistics/base/kendall.m
--- a/scripts/statistics/base/kendall.m
+++ b/scripts/statistics/base/kendall.m
@@ -56,17 +56,24 @@
 ## @ifinfo
 ## @var{q}(@var{i}) and @var{r}(@var{i})
 ## @end ifinfo
 ##  are the ranks of
 ## @var{x} and @var{y}, respectively.
 ##
 ## If @var{x} and @var{y} are drawn from independent distributions,
 ## Kendall's @var{tau} is asymptotically normal with mean 0 and variance
+## @iftex
+## @tex
+## ${2 (2n+5) \over 9n(n-1)}$.
+## @end tex
+## @end iftex
+## @ifnottex
 ## @code{(2 * (2@var{n}+5)) / (9 * @var{n} * (@var{n}-1))}.
+## @end ifnottex
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Kendall's rank correlation tau
 
 function tau = kendall (x, y)
 
   if ((nargin < 1) || (nargin > 2))
@@ -92,9 +99,9 @@ function tau = kendall (x, y)
   r   = ranks (x);
   m   = sign (kron (r, ones (n, 1)) - kron (ones (n, 1), r));
   tau = cor (m);
 
   if (nargin == 2)
     tau = tau (1 : c, (c + 1) : columns (x));
   endif
 
-endfunction
\ No newline at end of file
+endfunction
diff --git a/scripts/statistics/base/kurtosis.m b/scripts/statistics/base/kurtosis.m
--- a/scripts/statistics/base/kurtosis.m
+++ b/scripts/statistics/base/kurtosis.m
@@ -20,16 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} kurtosis (@var{x}, @var{dim})
 ## If @var{x} is a vector of length @math{N}, return the kurtosis
 ## @iftex
 ## @tex
 ## $$
 ##  {\rm kurtosis} (x) = {1\over N \sigma(x)^4} \sum_{i=1}^N (x_i-\bar{x})^4 - 3
 ## $$
+## where $\bar{x}$ is the mean value of $x$.
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ##
 ## @example
 ## kurtosis (x) = N^(-1) std(x)^(-4) sum ((x - mean(x)).^4) - 3
 ## @end example
 ## @end ifinfo
diff --git a/scripts/statistics/base/logit.m b/scripts/statistics/base/logit.m
--- a/scripts/statistics/base/logit.m
+++ b/scripts/statistics/base/logit.m
@@ -14,24 +14,34 @@
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} logit (@var{p})
-## For each component of @var{p}, return the logit @code{log (@var{p} /
-## (1-@var{p}))} of @var{p}.
+## For each component of @var{p}, return the logit of @var{p} defined as
+## @iftex
+## @tex
+## $$
+## {\rm logit}(p) = \log\Big({p \over 1-p}\Big)
+## $$
+## @end tex
+## @ifnottex
+## @example
+## logit(@var{p}) = log (@var{p} / (1-@var{p}))
+## @end example
+## @end ifnottex
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Logit transformation
 
 function y = logit (p)
 
   if (nargin == 1)
     y = logistic_inv (p);
   else
     print_usage ();
   endif
 
-endfunction
\ No newline at end of file
+endfunction
diff --git a/scripts/statistics/base/median.m b/scripts/statistics/base/median.m
--- a/scripts/statistics/base/median.m
+++ b/scripts/statistics/base/median.m
@@ -13,19 +13,20 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} median (@var{x})
+## @deftypefn {Function File} {} median (@var{x}, @var{dim})
 ## If @var{x} is a vector, compute the median value of the elements of
-## @var{x}.
+## @var{x}. If the elements of @var{x} are sorted, the median is defined
+## as
 ## @iftex
 ## @tex
 ## $$
 ## {\rm median} (x) =
 ##   \cases{x(\lceil N/2\rceil), & $N$ odd;\cr
 ##           (x(N/2)+x(N/2+1))/2, & $N$ even.}
 ## $$
 ## @end tex
@@ -36,17 +37,18 @@
 ## @group
 ##             x(ceil(N/2)),             N odd
 ## median(x) =
 ##             (x(N/2) + x((N/2)+1))/2,  N even
 ## @end group
 ## @end example
 ## @end ifinfo
 ## If @var{x} is a matrix, compute the median value for each
-## column and return them in a row vector.
+## column and return them in a row vector. If the optional @var{dim}
+## argument is given, operate along this dimension.
 ## @seealso{std, mean}
 ## @end deftypefn
 
 ## Author: jwe
 
 function retval = median (a, dim)
 
   if (nargin != 1 && nargin != 2)
diff --git a/scripts/statistics/base/ppplot.m b/scripts/statistics/base/ppplot.m
--- a/scripts/statistics/base/ppplot.m
+++ b/scripts/statistics/base/ppplot.m
@@ -32,16 +32,20 @@
 ## optional argument @var{params} contains a list of parameters of
 ## @var{dist}.  For example, for a probability plot of the uniform
 ## distribution on [2,4] and @var{x}, use
 ##
 ## @example
 ## ppplot (x, "uniform", 2, 4)
 ## @end example
 ##
+## @noindent
+## @var{dist} can be any string for which a function @var{dist_cdf}
+## that calculates the CDF of distribution @var{dist} exists.
+##
 ## If no output arguments are given, the data are plotted directly.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Perform a PP-plot (probability plot)
 
 function [p, y] = ppplot (x, dist, varargin)
 
diff --git a/scripts/statistics/base/qqplot.m b/scripts/statistics/base/qqplot.m
--- a/scripts/statistics/base/qqplot.m
+++ b/scripts/statistics/base/qqplot.m
@@ -34,16 +34,20 @@
 ## optional argument @var{params} contains a list of parameters of
 ## @var{dist}.  For example, for a quantile plot of the uniform
 ## distribution on [2,4] and @var{x}, use
 ##
 ## @example
 ## qqplot (x, "uniform", 2, 4)
 ## @end example
 ##
+## @noindent
+## @var{dist} can be any string for which a function @var{dist_inv}
+## that calculates the inverse CDF of distribution @var{dist} exists.
+##
 ## If no output arguments are given, the data are plotted directly.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Perform a QQ-plot (quantile plot)
 
 function [q, s] = qqplot (x, dist, varargin)
 
diff --git a/scripts/statistics/base/skewness.m b/scripts/statistics/base/skewness.m
--- a/scripts/statistics/base/skewness.m
+++ b/scripts/statistics/base/skewness.m
@@ -20,16 +20,17 @@
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} skewness (@var{x}, @var{dim})
 ## If @var{x} is a vector of length @math{n}, return the skewness
 ## @iftex
 ## @tex
 ## $$
 ## {\rm skewness} (x) = {1\over N \sigma(x)^3} \sum_{i=1}^N (x_i-\bar{x})^3
 ## $$
+## where $\bar{x}$ is the mean value of $x$.
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ##
 ## @example
 ## skewness (x) = N^(-1) std(x)^(-3) sum ((x - mean(x)).^3)
 ## @end example
 ## @end ifinfo
diff --git a/scripts/statistics/base/std.m b/scripts/statistics/base/std.m
--- a/scripts/statistics/base/std.m
+++ b/scripts/statistics/base/std.m
@@ -21,40 +21,41 @@
 ## @deftypefn {Function File} {} std (@var{x})
 ## @deftypefnx {Function File} {} std (@var{x}, @var{opt})
 ## @deftypefnx {Function File} {} std (@var{x}, @var{opt}, @var{dim})
 ## If @var{x} is a vector, compute the standard deviation of the elements
 ## of @var{x}.
 ## @iftex
 ## @tex
 ## $$
-## {\rm std} (x) = \sigma (x) = \sqrt{{\sum_{i=1}^N (x_i - \bar{x}) \over N - 1}}
+## {\rm std} (x) = \sigma (x) = \sqrt{{\sum_{i=1}^N (x_i - \bar{x})^2 \over N - 1}}
 ## $$
+## where $\bar{x}$ is the mean value of $x$.
 ## @end tex
 ## @end iftex
-## @ifinfo
+## @ifnottex
 ##
 ## @example
 ## @group
 ## std (x) = sqrt (sumsq (x - mean (x)) / (n - 1))
 ## @end group
 ## @end example
-## @end ifinfo
+## @end ifnottex
 ## If @var{x} is a matrix, compute the standard deviation for
 ## each column and return them in a row vector.
 ##
 ## The argument @var{opt} determines the type of normalization to use. Valid values
 ## are
 ##
 ## @table @asis 
 ## @item 0:
-##   normalizes with N-1, provides the square root of best unbiased estimator of 
+##   normalizes with @math{N-1}, provides the square root of best unbiased estimator of 
 ##   the variance [default]
 ## @item 1:
-##   normalizes with N, this provides the square root of the second moment around 
+##   normalizes with @math{N}, this provides the square root of the second moment around 
 ##   the mean
 ## @end table
 ##
 ## The third argument @var{dim} determines the dimension along which the standard
 ## deviation is calculated.
 ## @seealso{mean, median}
 ## @end deftypefn
 
diff --git a/scripts/statistics/base/values.m b/scripts/statistics/base/values.m
--- a/scripts/statistics/base/values.m
+++ b/scripts/statistics/base/values.m
@@ -16,16 +16,19 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} values (@var{x})
 ## Return the different values in a column vector, arranged in ascending
 ## order.
+##
+## As an example, @code{values([1, 2, 3, 1])} returns the vector
+## @code{[1, 2, 3]}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Extract unique elements
 
 function v = values (x)
 
   if (nargin != 1)
diff --git a/scripts/statistics/base/var.m b/scripts/statistics/base/var.m
--- a/scripts/statistics/base/var.m
+++ b/scripts/statistics/base/var.m
@@ -23,20 +23,20 @@
 ## For matrix arguments, return a row vector contaning the variance for
 ## each column.
 ##
 ## The argument @var{opt} determines the type of normalization to use.
 ## Valid values are
 ##
 ## @table @asis 
 ## @item 0:
-## Normalizes with N-1, provides the best unbiased estimator of the
+## Normalizes with @math{N-1}, provides the best unbiased estimator of the
 ## variance [default].
 ## @item 1:
-## Normalizes with N, this provides the second moment around the mean.
+## Normalizes with @math{N}, this provides the second moment around the mean.
 ## @end table
 ##
 ## The third argument @var{dim} determines the dimension along which the 
 ## variance is calculated.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: Compute variance
diff --git a/scripts/statistics/distributions/discrete_pdf.m b/scripts/statistics/distributions/discrete_pdf.m
--- a/scripts/statistics/distributions/discrete_pdf.m
+++ b/scripts/statistics/distributions/discrete_pdf.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} discrete_pdf (@var{x}, @var{v}, @var{p})
 ## For each element of @var{x}, compute the probability density function
-## (pDF) at @var{x} of a univariate discrete distribution which assumes
+## (PDF) at @var{x} of a univariate discrete distribution which assumes
 ## the values in @var{v} with probabilities @var{p}.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: pDF of a discrete distribution
 
 function pdf = discrete_pdf (x, v, p)
 
diff --git a/scripts/statistics/distributions/kolmogorov_smirnov_cdf.m b/scripts/statistics/distributions/kolmogorov_smirnov_cdf.m
--- a/scripts/statistics/distributions/kolmogorov_smirnov_cdf.m
+++ b/scripts/statistics/distributions/kolmogorov_smirnov_cdf.m
@@ -17,17 +17,17 @@
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} kolmogorov_smirnov_cdf (@var{x}, @var{tol})
 ## Return the CDF at @var{x} of the Kolmogorov-Smirnov distribution,
 ## @iftex
 ## @tex
-## $$ Q(x) = sum_{k=-\infty}^\infty (-1)^k exp(-2 k^2 x^2) $$
+## $$ Q(x) = \sum_{k=-\infty}^\infty (-1)^k \exp(-2 k^2 x^2) $$
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ## @example
 ##          Inf
 ## Q(x) =   SUM    (-1)^k exp(-2 k^2 x^2)
 ##        k = -Inf
 ## @end example
diff --git a/scripts/statistics/distributions/unidinv.m b/scripts/statistics/distributions/unidinv.m
--- a/scripts/statistics/distributions/unidinv.m
+++ b/scripts/statistics/distributions/unidinv.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} unidinv (@var{x}, @var{v})
 ## For each component of @var{x}, compute the quantile (the inverse of
-## the CDF) at @var{x} of the univariate distribution which assumes the
+## the CDF) at @var{x} of the univariate discrete distribution which assumes the
 ## values in @var{v} with equal probability
 ## @end deftypefn
 
 function inv = unidinv (x, v)
 
   if (nargin != 2)
     print_usage ();
   endif
diff --git a/scripts/statistics/distributions/unidpdf.m b/scripts/statistics/distributions/unidpdf.m
--- a/scripts/statistics/distributions/unidpdf.m
+++ b/scripts/statistics/distributions/unidpdf.m
@@ -15,17 +15,17 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} unidpdf (@var{x}, @var{v})
 ## For each element of @var{x}, compute the probability density function
-## (pDF) at @var{x} of a univariate discrete distribution which assumes
+## (PDF) at @var{x} of a univariate discrete distribution which assumes
 ## the values in @var{v} with equal probability.
 ## @end deftypefn
 
 function pdf = unidpdf (x, v)
 
   if (nargin != 2)
     print_usage ();
   endif
diff --git a/scripts/statistics/distributions/wblcdf.m b/scripts/statistics/distributions/wblcdf.m
--- a/scripts/statistics/distributions/wblcdf.m
+++ b/scripts/statistics/distributions/wblcdf.m
@@ -18,22 +18,28 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} wblcdf (@var{x}, @var{scale}, @var{shape})
 ## Compute the cumulative distribution function (CDF) at @var{x} of the
 ## Weibull distribution with shape parameter @var{scale} and scale
 ## parameter @var{shape}, which is
 ##
+## @iftex
+## @tex
+## $$ 1 - \exp(-(x/shape)^{scale}) $$
+## for $x\geq 0$.
+## @end tex
+## @end iftex
+## @ifnottex
 ## @example
 ## 1 - exp(-(x/shape)^scale)
 ## @end example
-##
-## @noindent
 ## for @var{x} >= 0.
+## @end ifnottex
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: CDF of the Weibull distribution
 
 function cdf = wblcdf (x, scale, shape)
 
   if (nargin < 1 || nargin > 3)
diff --git a/scripts/statistics/distributions/wblpdf.m b/scripts/statistics/distributions/wblpdf.m
--- a/scripts/statistics/distributions/wblpdf.m
+++ b/scripts/statistics/distributions/wblpdf.m
@@ -18,19 +18,26 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} wblpdf (@var{x}, @var{scale}, @var{shape})
 ## Compute the probability density function (PDF) at @var{x} of the
 ## Weibull distribution with shape parameter @var{scale} and scale
 ## parameter @var{shape} which is given by
 ##
+## @iftex
+## @tex
+## $$  scale \cdot shape^{-scale} x^{scale-1} \exp(-(x/shape)^{scale}) $$
+## @end tex
+## @end iftex
+## @ifnottex
 ## @example
 ##    scale * shape^(-scale) * x^(scale-1) * exp(-(x/shape)^scale)
 ## @end example
+## @end ifnottex
 ##
 ## @noindent
 ## for @var{x} > 0.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@wu-wien.ac.at>
 ## Description: PDF of the Weibull distribution
 
diff --git a/scripts/statistics/models/logistic_regression.m b/scripts/statistics/models/logistic_regression.m
--- a/scripts/statistics/models/logistic_regression.m
+++ b/scripts/statistics/models/logistic_regression.m
@@ -13,17 +13,17 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Functio File} {[@var{theta}, @var{beta}, @var{dev}, @var{dl}, @var{d2l}, @var{p}] =} logistic_regression (@var{y}, @var{x}, @var{print}, @var{theta}, @var{beta})
+## @deftypefn {Function File} {[@var{theta}, @var{beta}, @var{dev}, @var{dl}, @var{d2l}, @var{p}] =} logistic_regression (@var{y}, @var{x}, @var{print}, @var{theta}, @var{beta})
 ## Perform ordinal logistic regression.
 ##
 ## Suppose @var{y} takes values in @var{k} ordered categories, and let
 ## @code{gamma_i (@var{x})} be the cumulative probability that @var{y}
 ## falls in one of the first @var{i} categories given the covariate
 ## @var{x}.  Then
 ##
 ## @example
@@ -51,17 +51,17 @@
 ## [theta, beta, dev, dl, d2l, gamma]
 ##    = logistic_regression (y, x, print, theta, beta)
 ## @end example
 ##
 ## @noindent
 ## in which all output arguments and all input arguments except @var{y}
 ## are optional.
 ##
-## Stting @var{print} to 1 requests summary information about the fitted
+## Setting @var{print} to 1 requests summary information about the fitted
 ## model to be displayed.  Setting @var{print} to 2 requests information
 ## about convergence at each iteration.  Other values request no
 ## information to be displayed.  The input arguments @var{theta} and
 ## @var{beta} give initial estimates for @var{theta} and @var{beta}.
 ##
 ## The returned value @var{dev} holds minus twice the log-likelihood.
 ##
 ## The returned values @var{dl} and @var{d2l} are the vector of first
diff --git a/scripts/statistics/tests/hotelling_test.m b/scripts/statistics/tests/hotelling_test.m
--- a/scripts/statistics/tests/hotelling_test.m
+++ b/scripts/statistics/tests/hotelling_test.m
@@ -18,17 +18,17 @@
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{tsq}] =} hotelling_test (@var{x}, @var{m})
 ## For a sample @var{x} from a multivariate normal distribution with unknown
 ## mean and covariance matrix, test the null hypothesis that @code{mean
 ## (@var{x}) == @var{m}}.
 ##
-## Hotelling's T^2 is returned in @var{tsq}.  Under the null,
+## Hotelling's @math{T^2} is returned in @var{tsq}.  Under the null,
 ## @math{(n-p) T^2 / (p(n-1))} has an F distribution with @math{p} and
 ## @math{n-p} degrees of freedom, where @math{n} and @math{p} are the
 ## numbers of samples and variables, respectively.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
 ## If no output argument is given, the p-value of the test is displayed.
 ## @end deftypefn
diff --git a/scripts/statistics/tests/hotelling_test_2.m b/scripts/statistics/tests/hotelling_test_2.m
--- a/scripts/statistics/tests/hotelling_test_2.m
+++ b/scripts/statistics/tests/hotelling_test_2.m
@@ -19,21 +19,30 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{tsq}] =} hotelling_test_2 (@var{x}, @var{y})
 ## For two samples @var{x} from multivariate normal distributions with
 ## the same number of variables (columns), unknown means and unknown
 ## equal covariance matrices, test the null hypothesis @code{mean
 ## (@var{x}) == mean (@var{y})}.
 ##
-## Hotelling's two-sample T^2 is returned in @var{tsq}.  Under the null,
+## Hotelling's two-sample @math{T^2} is returned in @var{tsq}.  Under the null,
 ##
+## @iftex
+## @tex
+## $$
+## {n_x+n_y-p-1) T^2 \over p(n_x+n_y-2)}
+## $$
+## @end tex
+## @end iftex
+## @ifnottex
 ## @example
 ## (n_x+n_y-p-1) T^2 / (p(n_x+n_y-2))
 ## @end example
+## @end ifnottex
 ##
 ## @noindent
 ## has an F distribution with @math{p} and @math{n_x+n_y-p-1} degrees of
 ## freedom, where @math{n_x} and @math{n_y} are the sample sizes and
 ## @math{p} is the number of variables.
 ##
 ## The p-value of the test is returned in @var{pval}.
 ##
@@ -72,9 +81,9 @@ function [pval, Tsq] = hotelling_test_2 
   Tsq  = (n_x * n_y / (n_x + n_y)) * d * (S \ d');
   pval = 1 - f_cdf ((n_x + n_y - p - 1) * Tsq / (p * (n_x + n_y - 2)),
                     p, n_x + n_y - p - 1);
 
   if (nargout == 0)
     printf ("  pval: %g\n", pval);
   endif
 
-endfunction
\ No newline at end of file
+endfunction
diff --git a/scripts/statistics/tests/kolmogorov_smirnov_test.m b/scripts/statistics/tests/kolmogorov_smirnov_test.m
--- a/scripts/statistics/tests/kolmogorov_smirnov_test.m
+++ b/scripts/statistics/tests/kolmogorov_smirnov_test.m
@@ -27,16 +27,20 @@
 ## The optional argument @var{params} contains a list of parameters of
 ## @var{dist}.  For example, to test whether a sample @var{x} comes from
 ## a uniform distribution on [2,4], use
 ##
 ## @example
 ## kolmogorov_smirnov_test(x, "uniform", 2, 4)
 ## @end example
 ##
+## @noindent
+## @var{dist} can be any string for which a function @var{dist_cdf}
+## that calculates the CDF of distribution @var{dist} exists.
+##
 ## With the optional argument string @var{alt}, the alternative of
 ## interest can be selected.  If @var{alt} is @code{"!="} or
 ## @code{"<>"}, the null is tested against the two-sided alternative F
 ## != G.  In this case, the test statistic @var{ks} follows a two-sided
 ## Kolmogorov-Smirnov distribution.  If @var{alt} is @code{">"}, the
 ## one-sided alternative F > G is considered.  Similarly for @code{"<"},
 ## the one-sided alternative F > G is considered.  In this case, the
 ## test statistic @var{ks} has a one-sided Kolmogorov-Smirnov
diff --git a/scripts/statistics/tests/var_test.m b/scripts/statistics/tests/var_test.m
--- a/scripts/statistics/tests/var_test.m
+++ b/scripts/statistics/tests/var_test.m
@@ -16,18 +16,19 @@
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{f}, @var{df_num}, @var{df_den}] =} var_test (@var{x}, @var{y}, @var{alt})
 ## For two samples @var{x} and @var{y} from normal distributions with
 ## unknown means and unknown variances, perform an F-test of the null
-## hypothesis of equal variances.  Under the null, the test statistic f
-## follows an F-distribution with df_num and df_den degrees of freedom.
+## hypothesis of equal variances.  Under the null, the test statistic
+## @var{f} follows an F-distribution with @var{df_num} and @var{df_den}
+## degrees of freedom.
 ##
 ## With the optional argument string @var{alt}, the alternative of
 ## interest can be selected.  If @var{alt} is @code{"!="} or
 ## @code{"<>"}, the null is tested against the two-sided alternative
 ## @code{var (@var{x}) != var (@var{y})}.  If @var{alt} is @code{">"},
 ## the one-sided alternative @code{var (@var{x}) > var (@var{y})} is
 ## used.  Similarly for "<", the one-sided alternative @code{var
 ## (@var{x}) > var (@var{y})} is used.  The default is the two-sided
diff --git a/scripts/statistics/tests/welch_test.m b/scripts/statistics/tests/welch_test.m
--- a/scripts/statistics/tests/welch_test.m
+++ b/scripts/statistics/tests/welch_test.m
@@ -17,18 +17,18 @@
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{pval}, @var{t}, @var{df}] =} welch_test (@var{x}, @var{y}, @var{alt})
 ## For two samples @var{x} and @var{y} from normal distributions with
 ## unknown means and unknown and not necessarily equal variances,
 ## perform a Welch test of the null hypothesis of equal means.
-## Under the null, the test statistic t approximately follows a Student
-## distribution with df degrees of freedom.
+## Under the null, the test statistic @var{t} approximately follows a
+## Student distribution with @var{df} degrees of freedom.
 ##
 ## With the optional argument string @var{alt}, the alternative of
 ## interest can be selected.  If @var{alt} is @code{"!="} or
 ## @code{"<>"}, the null is tested against the two-sided alternative
 ## @code{mean (@var{x}) != @var{m}}.  If @var{alt} is @code{">"}, the
 ## one-sided alternative mean(x) > @var{m} is considered.  Similarly for
 ## @code{"<"}, the one-sided alternative mean(x) < @var{m} is
 ## considered.  The default is the two-sided case.
