# HG changeset patch
# User John Donoghue <john.donoghue@ieee.org>
# Date 1548534426 18000
#      Sat Jan 26 15:27:06 2019 -0500
# Branch stable
# Node ID 48ddf51a6ef7383a29800b621f153e2e91b2cc83
# Parent  1212568010a849f95cf63dc86c8b1ff6ae9d008c
Update smart indent code for case/otherwise (Bug #55276)

* libgui/src/m-editor/octave-qscintilla.cc:
  (octave_qscintilla::smart_indent_line_or_selected_text, octave_qscintilla::smart_indent):
  process case/otherwise as special case in indent

diff --git a/libgui/src/m-editor/octave-qscintilla.cc b/libgui/src/m-editor/octave-qscintilla.cc
--- a/libgui/src/m-editor/octave-qscintilla.cc
+++ b/libgui/src/m-editor/octave-qscintilla.cc
@@ -499,17 +499,17 @@ namespace octave
   }
 
   // Do smart indendation after if, for, ...
   void octave_qscintilla::smart_indent (bool do_smart_indent,
                                         int do_auto_close, int line)
   {
     QString prevline = text (line);
 
-    QRegExp bkey = QRegExp ("^[\t ]*(if|for|while|switch|case|otherwise"
+    QRegExp bkey = QRegExp ("^[\t ]*(if|for|while|switch"
                             "|do|function|properties|events|classdef"
                             "|unwind_protect|try"
                             "|parfor|methods)"
                             "[\r]?[\n\t #%]");
     // last word except for comments, assuming no ' or " in comment.
     // rx_end = QRegExp ("(\\w+)[ \t;\r\n]*([%#][^\"']*)?$");
 
     // last word except for comments,
@@ -544,33 +544,51 @@ namespace octave
           {
             // Do auto close
             auto_close (do_auto_close, line, prevline, first_word);
           }
 
         return;
       }
 
-    QRegExp mkey = QRegExp ("^[\t ]*(else|elseif|catch|unwind_protect_cleanup"
-                            "|case|otherwise)[\r]?[\t #%\n]");
+    QRegExp mkey = QRegExp ("^[\t ]*(else|elseif|catch|unwind_protect_cleanup)"
+                            "[\r]?[\t #%\n]");
     if (prevline.contains (mkey))
       {
         int prev_ind = indentation (line-1);
         int act_ind = indentation (line);
 
         if (prev_ind == act_ind)
           unindent (line);
         else if (prev_ind > act_ind)
           {
             setIndentation (line+1, prev_ind);
             setCursorPosition (line+1, prev_ind);
           }
         return;
       }
 
+    QRegExp case_key = QRegExp ("^[\t ]*(case|otherwise)[\r]?[\t #%\n]");
+    if (prevline.contains (case_key) && do_smart_indent)
+      {
+        QString last_line = text (line-1);
+        int act_ind = indentation (line);
+
+        if (last_line.contains ("switch"))
+          {
+            indent (line+1);
+            act_ind = indentation (line+1);
+          }
+        else
+          unindent (line);
+
+        setIndentation (line+1, act_ind);
+        setCursorPosition (line+1, act_ind);
+      }
+
     ekey = QRegExp ("^[\t ]*(end|endif|endfor|endwhile|until|endfunction"
                     "|end_try_catch|end_unwind_protect)[\r]?[\t #%\n(;]");
     if (prevline.contains (ekey))
       {
         if (indentation (line-1) <= indentation (line))
           {
             unindent (line+1);
             unindent (line);
@@ -605,56 +623,89 @@ namespace octave
     QRegExp end_block_regexp
       = QRegExp ("^([\t ]*)(end"
                  "|end(for|function|if|parfor|switch|while"
                  "|classdef|enumeration|events|methods|properties)"
                  "|end_(try_catch|unwind_protect)"
                  "|until)"
                  "[\r\n\t #%]");
 
+    QRegExp case_block_regexp
+      = QRegExp ("^([\t ]*)(case|otherwise)"
+                 "[\r\n\t #%]");
+
     int indent_column = -1;
     int indent_increment = indentationWidth ();
+    bool in_switch = false;
 
     for (int line = lineFrom-1; line >= 0; line--)
       {
         QString line_text = text (line);
 
         if (blank_line_regexp.indexIn (line_text) < 0)
           {
             // Found first non-blank line above beginning of region or
             // current line.  Base indentation from this line, increasing
             // indentation by indentationWidth if it looks like the
             // beginning of a code block.
 
             indent_column = indentation (line);
 
             if (begin_block_regexp.indexIn (line_text) > -1)
-              indent_column += indent_increment;
+              {
+                indent_column += indent_increment;
+                if (line_text.contains ("switch"))
+                  in_switch = true;
+              }
 
             break;
           }
       }
 
     if (indent_column < 0)
       indent_column = indentation (lineFrom);
 
+    QString prev_line;
     for (int line = lineFrom; line <= lineTo; line++)
       {
         QString line_text = text (line);
 
         if (end_block_regexp.indexIn (line_text) > -1)
-          indent_column -= indent_increment;
+          {
+            indent_column -= indent_increment;
+            if (line_text.contains ("endswitch"))
+              {
+                // need a double de-indent for endswitch
+                if (in_switch)
+                  indent_column -= indent_increment;
+                in_switch = false;
+              }
+          }
 
         if (mid_block_regexp.indexIn (line_text) > -1)
             indent_column -= indent_increment;
 
+        if (case_block_regexp.indexIn (line_text) > -1)
+          {
+            if (case_block_regexp.indexIn (prev_line) < 0 && !prev_line.contains("switch"))
+              indent_column -= indent_increment;
+            in_switch = true;
+          }
+
         setIndentation (line, indent_column);
 
         if (begin_block_regexp.indexIn (line_text) > -1)
-          indent_column += indent_increment;
+          {
+            indent_column += indent_increment;
+            if (line_text.contains ("switch"))
+              in_switch = true;
+          }
+
+        if (blank_line_regexp.indexIn (line_text) < 0)
+          prev_line = line_text;
       }
   }
 
   void octave_qscintilla::set_word_selection (const QString& word)
   {
     m_selection = word;
 
     if (word.isEmpty ())
