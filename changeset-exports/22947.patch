# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1482799598 18000
#      Mon Dec 26 19:46:38 2016 -0500
# Node ID 0b2ef933b738ab6d02f03085b37e11ad762489b0
# Parent  32ec45de162f6a627772939de7669205d12d9931
use F77_INT instead of octave_idx_type for liboctave aepbalance class

* aepbalance.h, aepbalance.cc: Use F77_INT instead of octave_idx_type
for integer data passed to Fortran subroutines.  Use
octave_f77_int_type in public header file.

diff --git a/liboctave/numeric/aepbalance.cc b/liboctave/numeric/aepbalance.cc
--- a/liboctave/numeric/aepbalance.cc
+++ b/liboctave/numeric/aepbalance.cc
@@ -45,179 +45,209 @@ get_job (bool noperm, bool noscal)
 }
 
 namespace octave
 {
   namespace math
   {
     template <>
     aepbalance<Matrix>::aepbalance (const Matrix& a, bool noperm, bool noscal)
-      : balanced_mat (a), scale (), ilo (), ihi (), job (get_job (noperm, noscal))
+      : balanced_mat (a), scale (), ilo (), ihi (),
+        job (get_job (noperm, noscal))
     {
-      octave_idx_type n = a.cols ();
+      F77_INT n = to_f77_int (a.cols ());
 
       if (a.rows () != n)
         (*current_liboctave_error_handler) ("aepbalance: requires square matrix");
 
       scale = ColumnVector (n);
 
-      octave_idx_type info;
+      F77_INT info, t_ilo, t_ihi;
 
       F77_XFCN (dgebal, DGEBAL, (F77_CONST_CHAR_ARG2 (&job, 1), n,
-                                 balanced_mat.fortran_vec (), n, ilo, ihi,
-                                 scale.fortran_vec (), info
+                                 balanced_mat.fortran_vec (), n,
+                                 t_ilo, t_ihi, scale.fortran_vec (), info
                                  F77_CHAR_ARG_LEN (1)));
+
+      ilo = t_ilo;
+      ihi = t_ihi;
     }
 
     template <>
     Matrix
     aepbalance<Matrix>::balancing_matrix (void) const
     {
-      octave_idx_type n = balanced_mat.rows ();
+      F77_INT n = to_f77_int (balanced_mat.rows ());
+
       Matrix balancing_mat (n, n, 0.0);
-      for (octave_idx_type i = 0; i < n; i++)
+      for (F77_INT i = 0; i < n; i++)
         balancing_mat.elem (i ,i) = 1.0;
 
-      octave_idx_type info;
+      F77_INT info;
+      F77_INT t_ilo = to_f77_int (ilo);
+      F77_INT t_ihi = to_f77_int (ihi);
 
       char side = 'R';
 
       F77_XFCN (dgebak, DGEBAK, (F77_CONST_CHAR_ARG2 (&job, 1),
                                  F77_CONST_CHAR_ARG2 (&side, 1),
-                                 n, ilo, ihi, scale.data (), n,
+                                 n, t_ilo, t_ihi, scale.data (), n,
                                  balancing_mat.fortran_vec (), n, info
                                  F77_CHAR_ARG_LEN (1)
                                  F77_CHAR_ARG_LEN (1)));
 
       return balancing_mat;
     }
 
     template <>
     aepbalance<FloatMatrix>::aepbalance (const FloatMatrix& a, bool noperm,
                                          bool noscal)
-      : balanced_mat (a), scale (), ilo (), ihi (), job (get_job (noperm, noscal))
+      : balanced_mat (a), scale (), ilo (), ihi (),
+        job (get_job (noperm, noscal))
     {
-      octave_idx_type n = a.cols ();
+      F77_INT n = to_f77_int (a.cols ());
 
       if (a.rows () != n)
         (*current_liboctave_error_handler) ("aepbalance: requires square matrix");
 
       scale = FloatColumnVector (n);
 
-      octave_idx_type info;
+      F77_INT info, t_ilo, t_ihi;
 
       F77_XFCN (sgebal, SGEBAL, (F77_CONST_CHAR_ARG2 (&job, 1), n,
-                                 balanced_mat.fortran_vec (), n, ilo, ihi,
-                                 scale.fortran_vec (), info
+                                 balanced_mat.fortran_vec (), n, t_ilo,
+                                 t_ihi, scale.fortran_vec (), info
                                  F77_CHAR_ARG_LEN (1)));
+
+      ilo = t_ilo;
+      ihi = t_ihi;
     }
 
     template <>
     FloatMatrix
     aepbalance<FloatMatrix>::balancing_matrix (void) const
     {
-      octave_idx_type n = balanced_mat.rows ();
+      F77_INT n = to_f77_int (balanced_mat.rows ());
+
       FloatMatrix balancing_mat (n, n, 0.0);
-      for (octave_idx_type i = 0; i < n; i++)
+      for (F77_INT i = 0; i < n; i++)
         balancing_mat.elem (i ,i) = 1.0;
 
-      octave_idx_type info;
+      F77_INT info;
+      F77_INT t_ilo = to_f77_int (ilo);
+      F77_INT t_ihi = to_f77_int (ihi);
 
       char side = 'R';
 
       F77_XFCN (sgebak, SGEBAK, (F77_CONST_CHAR_ARG2 (&job, 1),
                                  F77_CONST_CHAR_ARG2 (&side, 1),
-                                 n, ilo, ihi, scale.data (), n,
+                                 n, t_ilo, t_ihi, scale.data (), n,
                                  balancing_mat.fortran_vec (), n, info
                                  F77_CHAR_ARG_LEN (1)
                                  F77_CHAR_ARG_LEN (1)));
 
       return balancing_mat;
     }
 
     template <>
     aepbalance<ComplexMatrix>::aepbalance (const ComplexMatrix& a, bool noperm,
                                            bool noscal)
-      : balanced_mat (a), scale (), ilo (), ihi (), job (get_job (noperm, noscal))
+      : balanced_mat (a), scale (), ilo (), ihi (),
+        job (get_job (noperm, noscal))
     {
-      octave_idx_type n = a.cols ();
+      F77_INT n = to_f77_int (a.cols ());
 
       if (a.rows () != n)
         (*current_liboctave_error_handler) ("aepbalance: requires square matrix");
 
       scale = ColumnVector (n);
 
-      octave_idx_type info;
+      F77_INT info, t_ilo, t_ihi;
 
       F77_XFCN (zgebal, ZGEBAL, (F77_CONST_CHAR_ARG2 (&job, 1), n,
-                                 F77_DBLE_CMPLX_ARG (balanced_mat.fortran_vec ()), n, ilo, ihi,
-                                 scale.fortran_vec (), info
+                                 F77_DBLE_CMPLX_ARG (balanced_mat.fortran_vec ()),
+                                 n, t_ilo, t_ihi, scale.fortran_vec (), info
                                  F77_CHAR_ARG_LEN (1)));
+
+      ilo = t_ilo;
+      ihi = t_ihi;
     }
 
     template <>
     ComplexMatrix
     aepbalance<ComplexMatrix>::balancing_matrix (void) const
     {
-      octave_idx_type n = balanced_mat.rows ();
+      F77_INT n = to_f77_int (balanced_mat.rows ());
+
       ComplexMatrix balancing_mat (n, n, 0.0);
-      for (octave_idx_type i = 0; i < n; i++)
+      for (F77_INT i = 0; i < n; i++)
         balancing_mat.elem (i, i) = 1.0;
 
-      octave_idx_type info;
+      F77_INT info;
+      F77_INT t_ilo = to_f77_int (ilo);
+      F77_INT t_ihi = to_f77_int (ihi);
 
       char side = 'R';
 
       F77_XFCN (zgebak, ZGEBAK, (F77_CONST_CHAR_ARG2 (&job, 1),
                                  F77_CONST_CHAR_ARG2 (&side, 1),
-                                 n, ilo, ihi, scale.data (), n,
-                                 F77_DBLE_CMPLX_ARG (balancing_mat.fortran_vec ()), n, info
+                                 n, t_ilo, t_ihi, scale.data (), n,
+                                 F77_DBLE_CMPLX_ARG (balancing_mat.fortran_vec ()),
+                                 n, info
                                  F77_CHAR_ARG_LEN (1)
                                  F77_CHAR_ARG_LEN (1)));
 
       return balancing_mat;
     }
 
     template <>
     aepbalance<FloatComplexMatrix>::aepbalance (const FloatComplexMatrix& a,
                                                 bool noperm, bool noscal)
-      : balanced_mat (a), scale (), ilo (), ihi (), job (get_job (noperm, noscal))
+      : balanced_mat (a), scale (), ilo (), ihi (),
+        job (get_job (noperm, noscal))
     {
-      octave_idx_type n = a.cols ();
+      F77_INT n = to_f77_int (a.cols ());
 
       if (a.rows () != n)
         (*current_liboctave_error_handler) ("aepbalance: requires square matrix");
 
       scale = FloatColumnVector (n);
 
-      octave_idx_type info;
+      F77_INT info, t_ilo, t_ihi;
 
       F77_XFCN (cgebal, CGEBAL, (F77_CONST_CHAR_ARG2 (&job, 1), n,
-                                 F77_CMPLX_ARG (balanced_mat.fortran_vec ()), n, ilo, ihi,
-                                 scale.fortran_vec (), info
+                                 F77_CMPLX_ARG (balanced_mat.fortran_vec ()),
+                                 n, t_ilo, t_ihi, scale.fortran_vec (), info
                                  F77_CHAR_ARG_LEN (1)));
+
+      ilo = t_ilo;
+      ihi = t_ihi;
     }
 
     template <>
     FloatComplexMatrix
     aepbalance<FloatComplexMatrix>::balancing_matrix (void) const
     {
-      octave_idx_type n = balanced_mat.rows ();
+      F77_INT n = to_f77_int (balanced_mat.rows ());
+
       FloatComplexMatrix balancing_mat (n, n, 0.0);
-      for (octave_idx_type i = 0; i < n; i++)
+      for (F77_INT i = 0; i < n; i++)
         balancing_mat.elem (i, i) = 1.0;
 
-      octave_idx_type info;
+      F77_INT info;
+      F77_INT t_ilo = to_f77_int (ilo);
+      F77_INT t_ihi = to_f77_int (ihi);
 
       char side = 'R';
 
       F77_XFCN (cgebak, CGEBAK, (F77_CONST_CHAR_ARG2 (&job, 1),
                                  F77_CONST_CHAR_ARG2 (&side, 1),
-                                 n, ilo, ihi, scale.data (), n,
-                                 F77_CMPLX_ARG (balancing_mat.fortran_vec ()), n, info
+                                 n, t_ilo, t_ihi, scale.data (), n,
+                                 F77_CMPLX_ARG (balancing_mat.fortran_vec ()),
+                                 n, info
                                  F77_CHAR_ARG_LEN (1)
                                  F77_CHAR_ARG_LEN (1)));
 
       return balancing_mat;
     }
 
     // Instantiations we need.
 
