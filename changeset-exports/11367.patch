# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1292391850 18000
#      Wed Dec 15 00:44:10 2010 -0500
# Node ID b2191ebea12fba01e5a6694d8d483d73c640d49b
# Parent  ad8966096e274f45d559a3e05ceddbbec2567550
don't process input_event_hook when we are parsing a function

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,19 @@
+2010-12-15  John W. Eaton  <jwe@octave.org>
+
+	* lex.h (lexical_feedback::defining_func): Now int instead of bool.
+	lex.ll (is_keyword_token): Increment lexer_flags.defining_func
+	instead of setting it to true.
+	(lexical_feedback::init): Set defining_func to 0 instead of false.
+	* oct-parse.yy (recover_from_parsing_function): Decrement
+	lexer_flags.defining_func here.
+	* input.cc (input_event_hook): Don't do anything if we are
+	lexer_flags.defining_func is nonzero.
+
 2010-12-13  Rik  <octave@nomad.inbox5.com>
 
 	* ov-struct.cc (isfield): Additional test for cellstring of field names.
 
 2010-12-13  Rik  <octave@nomad.inbox5.com>
 
 	* data.cc (mod): Additional tests for mod with non-integer real values.
 
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -1242,39 +1242,42 @@ for details.\n\
 
 typedef std::map<std::string, octave_value> hook_fcn_map_type;
 
 static hook_fcn_map_type hook_fcn_map;
 
 static int
 input_event_hook (void)
 {
-  hook_fcn_map_type::iterator p = hook_fcn_map.begin ();
-
-  while (p != hook_fcn_map.end ())
+  if (! lexer_flags.defining_func)
     {
-      std::string hook_fcn = p->first;
-      octave_value user_data = p->second;
+      hook_fcn_map_type::iterator p = hook_fcn_map.begin ();
 
-      p++;
-
-      if (is_valid_function (hook_fcn))
+      while (p != hook_fcn_map.end ())
         {
-          if (user_data.is_defined ())
-            feval (hook_fcn, user_data, 0);
+          std::string hook_fcn = p->first;
+          octave_value user_data = p->second;
+
+          p++;
+
+          if (is_valid_function (hook_fcn))
+            {
+              if (user_data.is_defined ())
+                feval (hook_fcn, user_data, 0);
+              else
+                feval (hook_fcn, octave_value_list (), 0);
+            }
           else
-            feval (hook_fcn, octave_value_list (), 0);
+            hook_fcn_map.erase (p);
         }
-      else
-        hook_fcn_map.erase (p);
+
+      if (hook_fcn_map.empty ())
+        command_editor::remove_event_hook (input_event_hook);
     }
 
-  if (hook_fcn_map.empty ())
-    command_editor::remove_event_hook (input_event_hook);
-
   return 0;
 }
 
 DEFUN (add_input_event_hook, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} add_input_event_hook (@var{fcn}, @var{data})\n\
 Add the named function @var{fcn} to the list of functions to call\n\
 periodically when Octave is waiting for input.  The function should\n\
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -74,18 +74,18 @@ public:
   // TRUE means that we should convert spaces to a comma inside a
   // matrix definition.
   bool convert_spaces_to_comma;
 
   // TRUE means we are at the beginning of a statement, where a
   // command name is possible.
   bool at_beginning_of_statement;
 
-  // TRUE means we're in the middle of defining a function.
-  bool defining_func;
+  // Nonzero means we're in the middle of defining a function.
+  int defining_func;
 
   // Nonzero means we are parsing a function handle.
   int looking_at_function_handle;
 
   // TRUE means we're parsing the return list for a function.
   bool looking_at_return_list;
 
   // TRUE means we're parsing the parameter list for a function.
diff --git a/src/lex.ll b/src/lex.ll
--- a/src/lex.ll
+++ b/src/lex.ll
@@ -1575,17 +1575,17 @@ is_keyword_token (const std::string& s)
         case classdef_kw:
           // 'classdef' is always a keyword.
           promptflag--;
           break;          
 
         case function_kw:
           promptflag--;
 
-          lexer_flags.defining_func = true;
+          lexer_flags.defining_func++;
           lexer_flags.parsed_function_name = false;
 
           if (! (reading_fcn_file || reading_script_file
                  || reading_classdef_file))
             input_line_number = 1;
           break;
 
         case magic_file_kw:
@@ -3327,17 +3327,17 @@ lexical_feedback::init (void)
 
   // Not initially defining a cell array list.
   braceflag = 0;
 
   // Not initially inside a loop or if statement.
   looping = 0;
 
   // Not initially defining a function.
-  defining_func = false;
+  defining_func = 0;
   parsed_function_name = false;
   parsing_class_method = false;
   
   // Not initially defining a class with classdef.
   maybe_classdef_get_set_method = false;
   parsing_classdef = false;
 
   // Not initiallly looking at a function handle.
diff --git a/src/oct-parse.yy b/src/oct-parse.yy
--- a/src/oct-parse.yy
+++ b/src/oct-parse.yy
@@ -1373,17 +1373,16 @@ function        : function_beg function1
                   }
                 ;
 
 fcn_name        : identifier
                   {
                     std::string id_name = $1->name ();
 
                     lexer_flags.parsed_function_name = true;
-                    lexer_flags.defining_func = false;
                     lexer_flags.maybe_classdef_get_set_method = false;
             
                     $$ = $1;
                   }
                 | GET '.' identifier
                   {
                     lexer_flags.maybe_classdef_get_set_method = false;
                     $$ = $3;
@@ -2995,16 +2994,17 @@ recover_from_parsing_function (void)
   symtab_context.pop ();
 
   if (reading_fcn_file && current_function_depth == 1
       && ! parsing_subfunctions)
     parsing_subfunctions = true;
 
   current_function_depth--;
 
+  lexer_flags.defining_func--;
   lexer_flags.parsed_function_name = false;
   lexer_flags.looking_at_return_list = false;
   lexer_flags.looking_at_parameter_list = false;
 }
 
 // Make an index expression.
 
 static tree_index_expression *
