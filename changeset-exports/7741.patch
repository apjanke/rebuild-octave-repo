# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1209578920 14400
#      Wed Apr 30 14:08:40 2008 -0400
# Node ID 72c0489653ac04708a83ececca13508956470c7f
# Parent  39930366b7098845df918a1a49facd1dd3ac5a62
fix tests

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,13 @@
 2008-04-30  John W. Eaton  <jwe@octave.org>
 
+	* data.cc: Fix tests.  Use "%!assert", not "%! assert" for
+	individual assert tests.
+
 	* ov-fcn-handle.cc: Create handle pointing to flops instead of log2.
 
 2008-04-30  Jaroslav Hajek <highegg@gmail.com>
 
 	* ov-base.cc, ov-base.h, ov-bool-mat.h, ov-bool-sparse.h,
 	ov-bool.h, ov-complex.cc, ov-complex.h, ov-cx-mat.cc, ov-cx-mat.h,
 	ov-cx-sparse.cc, ov-cx-sparse.h, ov-intx.h, ov-range.h,
 	ov-re-mat.cc, ov-re-mat.h, ov-re-sparse.cc, ov-re-sparse.h,
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -524,21 +524,21 @@ and @var{x}.  The result is in range -pi
     }
   else
     print_usage ();
 
   return retval;
 }
 
 /*
-%! assert (size (atan2 (zeros (0, 2), zeros (0, 2))), [0, 2])
-%! assert (size (atan2 (rand (2, 3, 4), zeros (2, 3, 4))), [2, 3, 4])
-%! assert (size (atan2 (rand (2, 3, 4), 1), [2, 3, 4])
-%! assert (size (atan2 (1, rand (2, 3, 4)), [2, 3, 4])
-%! assert (size (atan2 (1, 2), [1, 1])
+%!assert (size (atan2 (zeros (0, 2), zeros (0, 2))), [0, 2])
+%!assert (size (atan2 (rand (2, 3, 4), zeros (2, 3, 4))), [2, 3, 4])
+%!assert (size (atan2 (rand (2, 3, 4), 1)), [2, 3, 4])
+%!assert (size (atan2 (1, rand (2, 3, 4))), [2, 3, 4])
+%!assert (size (atan2 (1, 2)), [1, 1])
 */
 
 DEFUN (hypot, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} hypot (@var{x}, @var{y})\n\
 Compute square-root of the squares of @var{x} and @var{y}\n\
 element-by-element. This equivalent to @code{sqrt (@var{x}.^ 2 + @var{y}\n\
 .^ 2)}, but calculated in a manner that avoids overflows for large\n\
@@ -673,22 +673,22 @@ values of @var{x} or @var{y}.\n\
     }
   else
     print_usage ();
 
   return retval;
 }
 
 /*
-%! assert (size (hypot (zeros (0, 2), zeros (0, 2))), [0, 2])
-%! assert (size (hypot (rand (2, 3, 4), zeros (2, 3, 4))), [2, 3, 4])
-%! assert (size (hypot (rand (2, 3, 4), 1), [2, 3, 4])
-%! assert (size (hypot (1, rand (2, 3, 4)), [2, 3, 4])
-%! assert (size (hypot (1, 2), [1, 1])
-%! assert (hypot (1:10,1:10), sqrt(2) * [1:10]);
+%!assert (size (hypot (zeros (0, 2), zeros (0, 2))), [0, 2])
+%!assert (size (hypot (rand (2, 3, 4), zeros (2, 3, 4))), [2, 3, 4])
+%!assert (size (hypot (rand (2, 3, 4), 1)), [2, 3, 4])
+%!assert (size (hypot (1, rand (2, 3, 4))), [2, 3, 4])
+%!assert (size (hypot (1, 2)), [1, 1])
+%!assert (hypot (1:10, 1:10), sqrt(2) * [1:10], 16*eps)
 */
 
 template<typename T, typename ET>
 void 
 map_2_xlog2 (const Array<T>& x, Array<T>& f, Array<ET>& e)
 {
   f = Array<T>(x.dims ());
   e = Array<ET>(x.dims ());
@@ -742,25 +742,27 @@ binary mantissa and exponent so that @co
     }
   else
     print_usage ();
 
   return retval;
 }
 
 /*
-%! assert(log2 ([1/4, 1/2, 1, 2, 4]), [-2, -1, 0, 1, 2]);
-%! assert(log2(Inf), Inf);
-%! assert(isnan(log2(NaN)));
-%! assert(log2(4*i), 2 + log2(1*i));
-%! assert(log2(complex(0,Inf)), Inf + log2(i));
+%!assert(log2 ([1/4, 1/2, 1, 2, 4]), [-2, -1, 0, 1, 2]);
+%!assert(log2(Inf), Inf);
+%!assert(isnan(log2(NaN)));
+%!assert(log2(4*i), 2 + log2(1*i));
+%!assert(log2(complex(0,Inf)), Inf + log2(i));
+
 %!test
 %! [f, e] = log2 ([0,-1; 2,-4; Inf,-Inf]);
 %! assert (f, [0,-0.5; 0.5,-0.5; Inf,-Inf]);
 %! assert (e, [0,1;2,3;0,0])
+
 %!test
 %! [f, e] = log2 (complex (zeros (3, 2), [0,-1; 2,-4; Inf,-Inf]));
 %! assert (f, complex (zeros (3, 2), [0,-0.5; 0.5,-0.5; Inf,-Inf]));
 %! assert (e, [0,1; 2,3; 0,0]);
 */
 
 DEFUN (fmod, args, ,
   "-*- texinfo -*-\n\
@@ -878,21 +880,21 @@ sign as @var{x}.  If @var{y} is zero, th
     }
   else
     print_usage ();
 
   return retval;
 }
 
 /*
-%! assert (size (fmod (zeros (0, 2), zeros (0, 2))), [0, 2])
-%! assert (size (fmod (rand (2, 3, 4), zeros (2, 3, 4))), [2, 3, 4])
-%! assert (size (fmod (rand (2, 3, 4), 1), [2, 3, 4])
-%! assert (size (fmod (1, rand (2, 3, 4)), [2, 3, 4])
-%! assert (size (fmod (1, 2), [1, 1])
+%!assert (size (fmod (zeros (0, 2), zeros (0, 2))), [0, 2])
+%!assert (size (fmod (rand (2, 3, 4), zeros (2, 3, 4))), [2, 3, 4])
+%!assert (size (fmod (rand (2, 3, 4), 1), [2, 3, 4])
+%!assert (size (fmod (1, rand (2, 3, 4)), [2, 3, 4])
+%!assert (size (fmod (1, 2), [1, 1])
 */
 
 #define NATIVE_REDUCTION_1(FCN, TYPE, DIM) \
   (arg.is_ ## TYPE ## _type ()) \
     { \
       TYPE ## NDArray tmp = arg. TYPE ##_array_value (); \
       \
       if (! error_state) \
