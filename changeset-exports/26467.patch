# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1546789280 -3600
#      Sun Jan 06 16:41:20 2019 +0100
# Branch stable
# Node ID 6595716a7f33712b50f7367de023a6375f9ffa71
# Parent  dd40f9650821ec269b9735cf9bce652e198bbb6e
Table.cc: Fix static analyzer detected issues (bug #55347).

* Table.cc (attempt_type_conversion): Fix lifetime issue by storing C++ string
  in variable. Use portable format identifiers for int64_t and uint64_t.

diff --git a/libgui/graphics/Table.cc b/libgui/graphics/Table.cc
--- a/libgui/graphics/Table.cc
+++ b/libgui/graphics/Table.cc
@@ -348,35 +348,36 @@ namespace QtHandles
     // Define a macro to help with the conversion of strings to integers
     // FIXME: these will happily integer overflow in the (u)int64 case
     // - this probably doesn't matter.
 #define SCANF_AND_CONVERT(name,ctype,format)           \
   else if (old_value.is_ ## name ## _type ())          \
     {                                                  \
       ctype val;                                       \
       int n;                                           \
-      const char *c_str = ov.string_value ().c_str (); \
+      const std::string cxx_str = ov.string_value ();  \
+      const char *c_str = cxx_str.c_str ();            \
       int error = sscanf (c_str, format, &val, &n);    \
       if (error != 1 || c_str[n])                      \
         {                                              \
           val = 0;                                     \
         }                                              \
       retval = octave_value ( octave_ ## name (val));  \
     }
 
     if (old_value.is_string ())
       retval = ov;
-    SCANF_AND_CONVERT(int8, int64_t, "%jd %n")
-    SCANF_AND_CONVERT(uint8, uint64_t, "%ju %n")
-    SCANF_AND_CONVERT(int16, int64_t, "%jd %n")
-    SCANF_AND_CONVERT(uint16, uint64_t, "%ju %n")
-    SCANF_AND_CONVERT(int32, int64_t, "%jd %n")
-    SCANF_AND_CONVERT(uint32, uint64_t, "%ju %n")
-    SCANF_AND_CONVERT(int64, int64_t, "%jd %n")
-    SCANF_AND_CONVERT(uint64, uint64_t, "%ju %n")
+    SCANF_AND_CONVERT(int8, int64_t, "%" PRId64 " %n")
+    SCANF_AND_CONVERT(uint8, uint64_t, "%" PRIu64 " %n")
+    SCANF_AND_CONVERT(int16, int64_t, "%" PRId64 " %n")
+    SCANF_AND_CONVERT(uint16, uint64_t, "%" PRIu64 " %n")
+    SCANF_AND_CONVERT(int32, int64_t, "%" PRId64 " %n")
+    SCANF_AND_CONVERT(uint32, uint64_t, "%" PRIu64 " %n")
+    SCANF_AND_CONVERT(int64, int64_t, "%" PRId64 " %n")
+    SCANF_AND_CONVERT(uint64, uint64_t, "%" PRIu64 " %n")
 
   #undef SCANF_AND_CONVERT
 
     else if (old_value.isnumeric () && ! old_value.isinteger ())
       {
         // Basically need to do str2double
         Complex complex = octave::string::str2double (ov.string_value ());
         if (old_value.is_single_type ())
