# HG changeset patch
# User jwe
# Date 1173160981 0
#      Tue Mar 06 06:03:01 2007 +0000
# Node ID c2eb95ca0e2b7bca495e2d0e39833e7d8675bf94
# Parent  65e9cf5c77184262ff90ddfdec1f7d7c7af3e42c
[project @ 2007-03-06 06:03:01 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1677,16 +1677,22 @@ Array<T>::maybe_delete_elements (Array<i
 {
   octave_idx_type n_idx = ra_idx.length ();
 
   dim_vector lhs_dims = dims ();
 
   if (lhs_dims.all_zero ())
     return;
 
+  if (n_idx == 1 && ra_idx(0).is_colon ())
+    {
+      resize (dim_vector (0, 0), rfv);
+      return;
+    }
+
   int n_lhs_dims = lhs_dims.length ();
 
   Array<int> idx_is_colon (n_idx, 0);
 
   Array<int> idx_is_colon_equiv (n_idx, 0);
 
   // Initialization of colon arrays.
 
@@ -2550,24 +2556,26 @@ assign1 (Array<LT>& lhs, const Array<RT>
 	  (*current_liboctave_error_handler)
 	    ("A(I) = X: X must be a scalar or a vector with same length as I");
 
 	  retval = 0;
 	}
     }
   else if (lhs_idx.is_colon ())
     {
-      if (lhs_len == 0)
+      dim_vector lhs_dims = lhs.dims ();
+
+      if (lhs_dims.all_zero ())
 	{
 	  lhs.resize_no_fill (rhs_len);
 
 	  for (octave_idx_type i = 0; i < rhs_len; i++)
 	    lhs.elem (i) = rhs.elem (i);
 	}
-      else
+      else if (rhs_len != 1)
 	(*current_liboctave_error_handler)
 	  ("A(:) = X: A must be the same size as X");
     }
   else if (! (rhs_len == 1 || rhs_len == 0))
     {
       (*current_liboctave_error_handler)
 	("A([]) = X: X must also be an empty matrix or a scalar");
 
@@ -2630,51 +2638,55 @@ assign2 (Array<LT>& lhs, const Array<RT>
 
 	default:
 	  (*current_liboctave_error_handler)
 	    ("Array<T>::assign2: Dimension mismatch");
 	  return 0;
 	}
     }
 
+  bool rhs_is_scalar = rhs_nr == 1 && rhs_nc == 1;
+
   idx_vector *tmp = lhs.get_idx ();
 
   idx_vector idx_i;
   idx_vector idx_j;
 
   if (n_idx > 1)
     idx_j = tmp[1];
 
   if (n_idx > 0)
     idx_i = tmp[0];
 
   if (n_idx == 2)
     {
       octave_idx_type n = idx_i.freeze (lhs_nr, "row", true);
-
       octave_idx_type m = idx_j.freeze (lhs_nc, "column", true);
 
       int idx_i_is_colon = idx_i.is_colon ();
       int idx_j_is_colon = idx_j.is_colon ();
 
-      if (idx_i_is_colon)
-	n = lhs_nr > 0 ? lhs_nr : rhs_nr;
-
-      if (idx_j_is_colon)
-	m = lhs_nc > 0 ? lhs_nc : rhs_nc;
+      if (lhs_nr == 0 && lhs_nc == 0)
+	{
+	  if (idx_i_is_colon)
+	    n = rhs_nr;
+
+	  if (idx_j_is_colon)
+	    m = rhs_nc;
+	}
 
       if (idx_i && idx_j)
 	{
 	  if (rhs_nr == 0 && rhs_nc == 0)
 	    {
 	      lhs.maybe_delete_elements (idx_i, idx_j);
 	    }
 	  else
 	    {
-	      if (rhs_nr == 1 && rhs_nc == 1 && n >= 0 && m >= 0)
+	      if (rhs_is_scalar && n >= 0 && m >= 0)
 		{
 		  // No need to do anything if either of the indices
 		  // are empty.
 
 		  if (n > 0 && m > 0)
 		    {
 		      MAYBE_RESIZE_LHS;
 
@@ -2690,54 +2702,53 @@ assign2 (Array<LT>& lhs, const Array<RT>
 			    }
 			}
 		    }
 		}
 	      else if ((n == 1 || m == 1)
 		       && (rhs_nr == 1 || rhs_nc == 1)
 		       && n * m == rhs_nr * rhs_nc)
 		{
+		  MAYBE_RESIZE_LHS;
+
 		  if (n > 0 && m > 0)
 		    {
-		      MAYBE_RESIZE_LHS;
-
 		      octave_idx_type k = 0;
 
 		      for (octave_idx_type j = 0; j < m; j++)
 			{
 			  octave_idx_type jj = idx_j.elem (j);
 			  for (octave_idx_type i = 0; i < n; i++)
 			    {
 			      octave_idx_type ii = idx_i.elem (i);
 			      lhs.elem (ii, jj) = xrhs.elem (k++);
 			    }
 			}
 		    }
 		}
 	      else if (n == rhs_nr && m == rhs_nc)
 		{
+		  MAYBE_RESIZE_LHS;
+
 		  if (n > 0 && m > 0)
 		    {
-		      MAYBE_RESIZE_LHS;
-
 		      for (octave_idx_type j = 0; j < m; j++)
 			{
 			  octave_idx_type jj = idx_j.elem (j);
 			  for (octave_idx_type i = 0; i < n; i++)
 			    {
 			      octave_idx_type ii = idx_i.elem (i);
 			      lhs.elem (ii, jj) = xrhs.elem (i, j);
 			    }
 			}
 		    }
 		}
 	      else if (n == 0 && m == 0)
 		{
-		  if (! ((rhs_nr == 1 && rhs_nc == 1)
-			 || (rhs_nr == 0 || rhs_nc == 0)))
+		  if (! (rhs_is_scalar || (rhs_nr == 0 || rhs_nc == 0)))
 		    {
 		      (*current_liboctave_error_handler)
 		("A([], []) = X: X must be an empty matrix or a scalar");
 
 		      retval = 0;
 		    }
 		}
 	      else
@@ -2758,24 +2769,23 @@ assign2 (Array<LT>& lhs, const Array<RT>
   else if (n_idx == 1)
     {
       int lhs_is_empty = lhs_nr == 0 || lhs_nc == 0;
 
       if (lhs_is_empty || (lhs_nr == 1 && lhs_nc == 1))
 	{
 	  octave_idx_type lhs_len = lhs.length ();
 
-	  octave_idx_type n = idx_i.freeze (lhs_len, 0, true);
+	  idx_i.freeze (lhs_len, 0, true);
 
 	  if (idx_i)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		{
-		  if (n != 0 && (lhs_nr != 0 || lhs_nc != 0))
-		    lhs.maybe_delete_elements (idx_i);
+		  lhs.maybe_delete_elements (idx_i);
 		}
 	      else
 		{
 		  if (lhs_is_empty
 		      && idx_i.is_colon ()
 		      && ! (rhs_nr == 1 || rhs_nc == 1))
 		    {
 		      (*current_liboctave_warning_with_id_handler)
@@ -2800,18 +2810,16 @@ assign2 (Array<LT>& lhs, const Array<RT>
 		      if (len > 0)
 			{
 			  // The following behavior is much simplified
 			  // over previous versions of Octave.  It
 			  // seems to be compatible with Matlab.
 
 			  lhs.dimensions = dim_vector (1, lhs.length ());
 			}
-		      else
-			lhs.dimensions = dim_vector (0, 0);
 		    }
 		  else
 		    retval = 0;
 		}
 	    }
 	  // idx_vector::freeze() printed an error message for us.
 	}
       else if (lhs_nr == 1)
@@ -2862,36 +2870,29 @@ assign2 (Array<LT>& lhs, const Array<RT>
 	  octave_idx_type len = idx_i.freeze (lhs_nr * lhs_nc, "matrix");
 
 	  if (idx_i)
 	    {
 	      if (rhs_nr == 0 && rhs_nc == 0)
 		lhs.maybe_delete_elements (idx_i);
 	      else if (len == 0)
 		{
-		  if (! ((rhs_nr == 1 && rhs_nc == 1)
-			 || (rhs_nr == 0 || rhs_nc == 0)))
+		  if (! (rhs_is_scalar || (rhs_nr == 0 || rhs_nc == 0)))
 		    (*current_liboctave_error_handler)
 		      ("A([]) = X: X must be an empty matrix or scalar");
 		}
 	      else if (len == rhs_nr * rhs_nc)
 		{
-		  octave_idx_type k = 0;
-		  for (octave_idx_type j = 0; j < rhs_nc; j++)
+		  for (octave_idx_type i = 0; i < len; i++)
 		    {
-		      for (octave_idx_type i = 0; i < rhs_nr; i++)
-			{
-			  octave_idx_type ii = idx_i.elem (k++);
-			  octave_idx_type fr = ii % lhs_nr;
-			  octave_idx_type fc = (ii - fr) / lhs_nr;
-			  lhs.elem (fr, fc) = xrhs.elem (i, j);
-			}
+		      octave_idx_type ii = idx_i.elem (i);
+		      lhs.elem (ii) = xrhs.elem (i);
 		    }
 		}
-	      else if (rhs_nr == 1 && rhs_nc == 1)
+	      else if (rhs_is_scalar)
 		{
 		  RT scalar = rhs.elem (0, 0);
 
 		  for (octave_idx_type i = 0; i < len; i++)
 		    {
 		      octave_idx_type ii = idx_i.elem (i);
 		      lhs.elem (ii) = scalar;
 		    }
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,19 @@
+2007-03-06  John W. Eaton  <jwe@octave.org>
+
+	* Array.cc (assign1, assign2): For assignments like x(:,1) = 1 or
+	x(:) = 1, only resize if X is 0x0.
+	(assign2): Use single loop for x(:) = nonempty_rhs case.
+	If single index and rhs is 0x0, always call maybe_delete_elements
+	on lhs.
+	(Array<T>::maybe_delete_elements (Array<idx_vector>&, const T&)):
+	Quick return of [] if doing x(:) = [].
+
+
 2007-03-05  David Bateman  <dbateman@free.fr>
 
 	* oct-md5.c (oct_md5_file (const std::string&)): New function.
 	* oct-md5.h (oct_md5_file (const std::string&)): Declare it.
 
 2007-03-02  John W. Eaton  <jwe@octave.org>
 
 	* str-vec.h (string_vector::empty): Return bool, not int.
