# HG changeset patch
# User jwe
# Date 814783880 0
#      Fri Oct 27 08:51:20 1995 +0000
# Node ID 5383d2d4cf9d78f45bd17967bdb6a59e5ecdaa7b
# Parent  d23a8704e306cdba1a46d43d58f08446a09c0e44
[project @ 1995-10-27 08:51:20 by jwe]

diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -46,16 +46,17 @@ Software Foundation, 59 Temple Place - S
 #include <unistd.h>
 #endif
 
 #include <fcntl.h>
 
 #include <readline/tilde.h>
 
 #include <DLList.h>
+#include <SLStack.h>
 
 #include "dMatrix.h"
 
 #include "defun.h"
 #include "error.h"
 #include "file-info.h"
 #include "file-io.h"
 #include "help.h"
@@ -74,16 +75,28 @@ Software Foundation, 59 Temple Place - S
 extern "C" void mode_string ();
 
 // keeps a count of args sent to printf or scanf
 static int fmt_arg_count = 0;
 
 // double linked list containing relevant information about open files
 static DLList <file_info> file_list;
 
+// stack for next available file number
+static SLStack <int> next_available_file_number;
+
+static int
+get_next_avail_file_num (void)
+{
+  if (next_available_file_number.empty ())
+    return file_list.length ();
+  else
+    return next_available_file_number.pop ();
+}
+
 void
 initialize_file_io (void)
 {
   file_info octave_stdin (0, "stdin", stdin, "r");
   file_info octave_stdout (1, "stdout", stdout, "w");
   file_info octave_stderr (2, "stderr", stderr, "w");
 
   file_list.append (octave_stdin);
@@ -142,18 +155,18 @@ return_valid_file (const tree_constant& 
 }
 
 static Pix 
 fopen_file_for_user (const char *name, const char *mode,
 		     const char *warn_for)
 {
   FILE *file_ptr = fopen (name, mode);
   if (file_ptr)
-    {
-      int file_number = file_list.length () + 1;
+    { 
+      int file_number = get_next_avail_file_num ();
 
       file_info file (file_number, name, file_ptr, mode);
       file_list.append (file);
       
       Pix p = file_list.first ();
       file_info file_from_list;
       int file_count = file_list.length ();
       for (int i = 0; i < file_count; i++)
@@ -218,16 +231,17 @@ fclose_internal (const Octave_object& ar
 
   if (file.number () < 3)
     {
       warning ("fclose: can't close stdin, stdout, or stderr!");
       return retval;
     }
 
   int success = fclose (file.fptr ());
+  next_available_file_number.push (file.number ());
   file_list.del (p);
 
   if (success == 0)
     retval(0) = 1.0; // succeeded
   else
     {
       error ("fclose: error on closing file");
       retval(0) = 0.0; // failed
@@ -488,17 +502,17 @@ fopen_internal (const Octave_object& arg
   FILE *file_ptr = fopen (name, mode);
 
   if (! file_ptr)
     {
       error ("fopen: unable to open file `%s'", name);
       return retval;
     }
 
-  int file_number =  file_list.length () + 1;
+  int file_number = get_next_avail_file_num ();
 
   file_info file (file_number, name, file_ptr, mode);
   file_list.append (file);
 
   retval(0) = (double) file_number;
 
   return retval;
 }
@@ -538,17 +552,17 @@ freport_internal (void)
 
   output_buf << "\n number  mode  name\n\n";
 
   int file_count = file_list.length ();
   for (int i = 0; i < file_count; i++)
     {
       file_info file = file_list (p);
       output_buf.form ("%7d%6s  %s\n", file.number (),
-		       file.mode ().data (), file.name ().data ());
+		       file.mode ().c_str (), file.name ().c_str ());
       file_list.next (p);
     }
 
   output_buf << "\n" << ends;
   maybe_page_output (output_buf);
 
   return retval;
 }
@@ -746,19 +760,20 @@ close_files (void)
       if (p)
 	{
 	  file_info file = file_list (p);
 
 	  if (i > 2)   // do not close stdin, stdout, stderr!
 	    {
 	      int success = fclose (file.fptr ());
 	      if (success != 0)
-		error ("closing %s", file.name ().data ());
+		error ("closing %s", file.name ().c_str ());
 	    }
 
+	  next_available_file_number.push (file.number ());
 	  file_list.del (p);
 	}
       else
 	{
 	  error ("inconsistent state for internal file list!");
 	  break;
 	}
     }
@@ -1941,17 +1956,17 @@ popen_internal (const Octave_object& arg
   FILE *file_ptr = popen (name, mode);
 
   if (! file_ptr)
     {
       error ("popen: unable to start process `%s'", name);
       return retval;
     }
 
-  int number = file_list.length () + 1;
+  int number = get_next_avail_file_num ();
 
   file_info file (number, name, file_ptr, mode);
   file_list.append (file);
 
   retval(0) = (double) number;
 
   return retval;
 }
@@ -1990,16 +2005,17 @@ pclose_internal (const Octave_object& ar
 
   if (file.number () < 3)
     {
       warning ("pclose: can't close stdin, stdout, or stderr!");
       return retval;
     }
 
   int success = pclose (file.fptr ());
+  next_available_file_number.push (file.number ());
   file_list.del (p);
 
   if (success == 0)
     retval(0) = 1.0; // succeeded
   else
     {
       error ("pclose: error on closing file");
       retval(0) = 0.0; // failed
@@ -2086,17 +2102,17 @@ execute_internal (const Octave_object& a
       stdin_file = fdopen (stdin_pipe[1], "w"); 
 
       if (fcntl (fileno (stdout_file), F_SETFL, O_NONBLOCK) < 0) 
 	{
 	  error ("execute: error setting file mode");
 	  return retval;
 	}
 
-      new_stdin = file_list.length () + 1;
+      new_stdin = get_next_avail_file_num ();
       new_stdout = new_stdin + 1;
 
       file_info new_stdin_file_ptr (new_stdin, name, stdin_file, "w");
       file_info new_stdout_file_ptr (new_stdout, name, stdout_file, "r");
 
       file_list.append (new_stdin_file_ptr);
       file_list.append (new_stdout_file_ptr);
     }
