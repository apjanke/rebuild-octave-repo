# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1349360459 14400
#      Thu Oct 04 10:20:59 2012 -0400
# Node ID 481417a57a2db269c775f1d1fb9a922655d7166d
# Parent  ecf5be238b4aa9348d4c87c710b9615c0daed29e
improve sign and signbit docs

* mappers.cc (Fsign): Note sign (-0) is 0.  Add @seealso for signbit.
(Fsignbit): Add @seealso for sign.

diff --git a/libinterp/corefcn/mappers.cc b/libinterp/corefcn/mappers.cc
--- a/libinterp/corefcn/mappers.cc
+++ b/libinterp/corefcn/mappers.cc
@@ -1749,16 +1749,21 @@ Compute the @dfn{signum} function, which
 sign (x) =  0, x = 0;\n\
             1, x > 0.\n\
 @end group\n\
 @end example\n\
 \n\
 @end ifnottex\n\
 \n\
 For complex arguments, @code{sign} returns @code{x ./ abs (@var{x})}.\n\
+\n\
+Note that @code{sign (-0.0)} is 0.\n\  Although IEEE 754 floating point\n\
+allows zero to be signed, 0.0 and -0.0 compare equal.  If you must test\n\
+whether zero is signed, use the @code{signbit} function.\n\
+@seealso{signbit}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).signum ();
   else
     print_usage ();
 
@@ -1783,16 +1788,17 @@ For complex arguments, @code{sign} retur
 DEFUNX ("signbit", Fsignbit, args, ,
     "-*- texinfo -*-\n\
 @deftypefn {Mapping Function} {} signbit (@var{x})\n\
 Return a nonzero value if the value of @var{x} has its sign bit set.\n\
 \n\
 This is not the same as @code{x < 0.0}, because IEEE 754 floating point\n\
 allows zero to be signed.  The comparison @code{-0.0 < 0.0} is false,\n\
 but @code{signbit (-0.0)} will return a nonzero value.\n\
+@seealso{sign}\n\
 @end deftypefn")
 {
   octave_value retval;
   if (args.length () == 1)
     retval = args(0).xsignbit ();
   else
     print_usage ();
 
