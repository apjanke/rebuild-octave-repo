# HG changeset patch
# User jwe
# Date 832751667 0
#      Wed May 22 07:54:27 1996 +0000
# Node ID 2e4be59df9f96f2ee2af69e16ebff9e82699c232
# Parent  108d848901b4c481d9af57553128834586c3ae6c
[project @ 1996-05-22 07:54:27 by jwe]

diff --git a/emacs/octave.el b/emacs/octave.el
--- a/emacs/octave.el
+++ b/emacs/octave.el
@@ -728,17 +728,17 @@ lines."
 	  (octave-blink-matching-while)
 	  (octave-blink-matching-function)))))
 
 (defun octave-indent-new-line ()
   "Reindent the current Octave line, insert a newline and indent the new line.
 An abbrev before point is expanded if `abbrev-mode' is non-nil."
   (interactive)
   (if abbrev-mode (expand-abbrev))
-  (octave-indent-line)
+  (save-excursion (octave-indent-line))
   (newline)
   (octave-indent-line))
 
 (defun octave-indent-subprogram ()
   "Properly indents the Octave subprogram which contains point."
   (interactive)
   (save-excursion
     (octave-mark-subprogram)
@@ -752,17 +752,18 @@ An abbrev before point is expanded if `a
 ;; XEND says whether to decrement the count if we are looking at an
 ;; end-type statement.
 
 (defun octave-calc-indent-this-line (xelse xend)
   (let ((icol 0)
 	(have-if 0)
 	(have-func 0)
 	(have-uwp 0)
-	(have-tc 0))
+	(have-tc 0)
+	(bot (+ (octave-point 'bol) (current-indentation))))
     (save-excursion
       (beginning-of-line)
       (while (< (point) (octave-point 'eol))
 	(cond
 	 ((and (looking-at "\\bif\\b")
 	       (not (octave-is-in-string-p (point))))
 	  (setq icol (+ icol octave-stmt-indent)
 		have-if (+ have-if 1)))
@@ -786,17 +787,17 @@ An abbrev before point is expanded if `a
 	       (not (octave-is-in-string-p (point))))
 	  (if (eq have-uwp 0)
 	      (setq icol (+ icol (* xelse octave-stmt-indent)))))
 	 ((and (looking-at "\\bend")
 	       (not (octave-is-in-string-p (point))))
 	  (progn
 	    (if (> xend 0)
 		(setq icol (- icol (* xend octave-stmt-indent)))
-	      (if (> icol 0)
+	      (if (> (point) bot)
 		  (setq icol (- icol octave-stmt-indent))))
 	    (cond
 	     ((and (> have-if 0) (looking-at "\\bendif\\b"))
 	      (setq have-if (- have-if 1)))
 	     ((and (> have-func 0) (looking-at "\\bendfunction\\b"))
 	      (setq have-func (- have-func 1)))
 	     ((and (> have-tc 0) (looking-at "\\bend_try_catch\\b"))
 	      (setq have-tc (- have-tc 1)))
