# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1551125406 0
#      Mon Feb 25 20:10:06 2019 +0000
# Node ID 287eba9ed14ba1901e99334f7b304638ae52c5fd
# Parent  bc1580ebb78c180b6a87f60f7e864dbfe38ab68c
refactor predicates for classdef methods/constructors

* ov-fcn.h (octave_function::is_classdef_method,
octave_function::is_legacy_method,
octave_function::is_legacy_constructor):  New virtual functions.
(octave_function::is_class_method):  No longer virtual.
Return true if either is_classdef_method or is_legacy_method is true.
(octave_function::is_class_constructor):  Likewise, for constructors.

* ov-usr-fcn.h, ov-usr-fcn.cc: Define separate functions for marking
and checking for legacy and classdef functions.
(octave_user_function::mark_as_legacy_constructor, ):
(octave_user_function::class_method_type): Rename from class_ctor_type.
(octave_user_function)::method_type_str): New function.

* oct-parse.yy (base_parser::start_function): Distinguish between
legacy and classdef methods and constructors when marking function
types.

* cdef-untils.cc (make_function_of_class): Mark function as classdef
constructor or method.

diff --git a/libinterp/octave-value/cdef-utils.cc b/libinterp/octave-value/cdef-utils.cc
--- a/libinterp/octave-value/cdef-utils.cc
+++ b/libinterp/octave-value/cdef-utils.cc
@@ -56,22 +56,19 @@ namespace octave
 
     of->stash_dispatch_class (class_name);
 
     octave_user_function *uf = of->user_function_value (true);
 
     if (uf)
       {
         if (get_base_name (class_name) == uf->name ())
-          {
-            uf->mark_as_class_constructor ();
-            uf->mark_as_classdef_constructor ();
-          }
+          uf->mark_as_classdef_constructor ();
         else
-          uf->mark_as_class_method ();
+          uf->mark_as_classdef_method ();
       }
   }
 
   void
   make_function_of_class (const cdef_class& cls, const octave_value& fcn)
   {
     make_function_of_class (cls.get_name (), fcn);
   }
diff --git a/libinterp/octave-value/ov-fcn.h b/libinterp/octave-value/ov-fcn.h
--- a/libinterp/octave-value/ov-fcn.h
+++ b/libinterp/octave-value/ov-fcn.h
@@ -92,24 +92,38 @@ public:
 
   virtual octave::sys::time time_checked (void) const
   { return octave::sys::time (static_cast<time_t> (0)); }
 
   virtual int call_depth (void) const { return 0; }
 
   virtual bool is_subfunction (void) const { return false; }
 
-  virtual bool is_class_constructor (const std::string& = "") const
+  bool is_class_constructor (const std::string& cname = "") const
+  {
+    return (is_classdef_constructor (cname) || is_legacy_constructor (cname));
+  }
+
+  bool is_class_method (const std::string& cname = "") const
+  {
+    return (is_classdef_method (cname) || is_legacy_method (cname));
+  }
+
+  virtual bool
+  is_legacy_constructor (const std::string& = "") const
   { return false; }
 
   virtual bool
   is_classdef_constructor (const std::string& = "") const
   { return false; }
 
-  virtual bool is_class_method (const std::string& = "") const
+  virtual bool is_legacy_method (const std::string& = "") const
+  { return false; }
+
+  virtual bool is_classdef_method (const std::string& = "") const
   { return false; }
 
   virtual bool takes_varargs (void) const { return false; }
 
   virtual bool takes_var_return (void) const { return false; }
 
   // The next two functions are for dispatching to built-in
   // functions given built-in classes.
diff --git a/libinterp/octave-value/ov-usr-fcn.cc b/libinterp/octave-value/ov-usr-fcn.cc
--- a/libinterp/octave-value/ov-usr-fcn.cc
+++ b/libinterp/octave-value/ov-usr-fcn.cc
@@ -190,17 +190,17 @@ octave_user_function::octave_user_functi
     param_list (pl), ret_list (rl),
     m_local_var_init_vals (lviv),
     lead_comm (), trail_comm (),
     location_line (0), location_column (0),
     parent_name (), system_fcn_file (false),
     num_named_args (param_list ? param_list->length () : 0),
     subfunction (false), inline_function (false),
     anonymous_function (false), nested_function (false),
-    class_constructor (none), class_method (false)
+    class_constructor (none), class_method (none)
 #if defined (HAVE_LLVM)
     , jit_info (0)
 #endif
 {
   if (cmd_list)
     cmd_list->mark_as_function_body ();
 
   if (m_scope)
@@ -511,16 +511,43 @@ octave_user_function::ctor_type_str (voi
     default:
       retval = "unrecognized enum value";
       break;
     }
 
   return retval;
 }
 
+std::string
+octave_user_function::method_type_str (void) const
+{
+  std::string retval;
+
+  switch (class_method)
+    {
+    case none:
+      retval = "none";
+      break;
+
+    case legacy:
+      retval = "legacy";
+      break;
+
+    case classdef:
+      retval = "classdef";
+      break;
+
+    default:
+      retval = "unrecognized enum value";
+      break;
+    }
+
+  return retval;
+}
+
 octave_value
 octave_user_function::dump (void) const
 {
   std::map<std::string, octave_value> m
     = {{ "user_code", octave_user_code::dump () },
        { "line", location_line },
        { "col", location_column },
        { "end_line", end_location_line },
diff --git a/libinterp/octave-value/ov-usr-fcn.h b/libinterp/octave-value/ov-usr-fcn.h
--- a/libinterp/octave-value/ov-usr-fcn.h
+++ b/libinterp/octave-value/ov-usr-fcn.h
@@ -318,42 +318,50 @@ public:
   // If we are a special expression, then the function body consists of exactly
   // one expression.  The expression's result is the return value of the
   // function.
   bool is_special_expr (void) const
   {
     return is_inline_function () || is_anonymous_function ();
   }
 
+  void mark_as_nested_function (void) { nested_function = true; }
+
   bool is_nested_function (void) const { return nested_function; }
 
-  void mark_as_nested_function (void) { nested_function = true; }
+  void mark_as_legacy_constructor (void) { class_constructor = legacy; }
 
-  void mark_as_class_constructor (void) { class_constructor = legacy; }
+  bool is_legacy_constructor (const std::string& cname = "") const
+  {
+    return (class_constructor == legacy
+            ? (cname.empty () ? true : cname == dispatch_class ()) : false);
+  }
 
   void mark_as_classdef_constructor (void) { class_constructor = classdef; }
 
-  bool is_class_constructor (const std::string& cname = "") const
-  {
-    return class_constructor == legacy
-      ? (cname.empty () ? true : cname == dispatch_class ()) : false;
-  }
-
   bool is_classdef_constructor (const std::string& cname = "") const
   {
-    return class_constructor == classdef
-      ? (cname.empty () ? true : cname == dispatch_class ()) : false;
+    return (class_constructor == classdef
+            ? (cname.empty () ? true : cname == dispatch_class ()) : false);
   }
 
-  void mark_as_class_method (void) { class_method = true; }
+  void mark_as_legacy_method (void) { class_method = legacy; }
 
-  bool is_class_method (const std::string& cname = "") const
+  bool is_legacy_method (const std::string& cname = "") const
   {
-    return class_method
-           ? (cname.empty () ? true : cname == dispatch_class ()) : false;
+    return (class_method == legacy
+            ? (cname.empty () ? true : cname == dispatch_class ()) : false);
+  }
+
+  void mark_as_classdef_method (void) { class_method = classdef; }
+
+  bool is_classdef_method (const std::string& cname = "") const
+  {
+    return (class_method == classdef
+            ? (cname.empty () ? true : cname == dispatch_class ()) : false);
   }
 
   octave_value_list
   call (octave::tree_evaluator& tw, int nargout = 0,
         const octave_value_list& args = octave_value_list ());
 
   octave::tree_parameter_list * parameter_list (void) { return param_list; }
 
@@ -381,24 +389,25 @@ public:
 
   void stash_info (octave::jit_function_info *info) { jit_info = info; }
 #endif
 
   octave_value dump (void) const;
 
 private:
 
-  enum class_ctor_type
+  enum class_method_type
   {
     none,
     legacy,
     classdef
   };
 
   std::string ctor_type_str (void) const;
+  std::string method_type_str (void) const;
 
   // List of arguments for this function.  These are local variables.
   octave::tree_parameter_list *param_list;
 
   // List of parameters we return.  These are also local variables in
   // this function.
   octave::tree_parameter_list *ret_list;
 
@@ -436,20 +445,20 @@ private:
 
   // TRUE means this is an anonymous function.
   bool anonymous_function;
 
   // TRUE means this is a nested function. (either a child or parent)
   bool nested_function;
 
   // Enum describing whether this function is the constructor for class object.
-  class_ctor_type class_constructor;
+  class_method_type class_constructor;
 
-  // TRUE means this function is a method for a class.
-  bool class_method;
+  // Enum describing whether this function is a method for a class.
+  class_method_type class_method;
 
 #if defined (HAVE_LLVM)
   octave::jit_function_info *jit_info;
 #endif
 
   void maybe_relocate_end_internal (void);
 
   void print_code_function_header (const std::string& prefix);
diff --git a/libinterp/parse-tree/oct-parse.yy b/libinterp/parse-tree/oct-parse.yy
--- a/libinterp/parse-tree/oct-parse.yy
+++ b/libinterp/parse-tree/oct-parse.yy
@@ -3395,20 +3395,30 @@ namespace octave
         fcn->stash_package_name (m_lexer.m_package_name);
         fcn->mark_as_system_fcn_file ();
 
         if (m_fcn_file_from_relative_lookup)
           fcn->mark_relative ();
 
         if (m_lexer.m_parsing_class_method)
           {
-            if (m_curr_class_name == id_name)
-              fcn->mark_as_class_constructor ();
+            if (m_lexer.m_parsing_classdef)
+              {
+                if (m_curr_class_name == id_name)
+                  fcn->mark_as_legacy_constructor ();
+                else
+                  fcn->mark_as_legacy_method ();
+              }
             else
-              fcn->mark_as_class_method ();
+              {
+                if (m_curr_class_name == id_name)
+                  fcn->mark_as_classdef_constructor ();
+                else
+                  fcn->mark_as_classdef_method ();
+              }
 
             fcn->stash_dispatch_class (m_curr_class_name);
           }
 
         std::string nm = fcn->fcn_file_name ();
 
         sys::file_stat fs (nm);
 
