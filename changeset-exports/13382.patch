# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1302333773 -7200
#      Sat Apr 09 09:22:53 2011 +0200
# Node ID 9d5e5da5a2979feb6d14a26a1f2b0a46e91aa5fd
# Parent  7519e2efaf31021cd0a4efc071b94aa9c4b76efe
Everything compiles again.

diff --git a/gui//Quint.pro b/gui//Quint.pro
--- a/gui//Quint.pro
+++ b/gui//Quint.pro
@@ -76,11 +76,11 @@ HEADERS += \
         src/ProcessInfo.h \
         src/kpty_export.h \
         src/kdecore_export.h
 
 INCFLAGS = -g3 $$system(mkoctfile -p INCFLAGS)
 LFLAGS = $$system(mkoctfile -p LFLAGS) \
          $$system(mkoctfile -p OCTAVE_LIBS) \
          $$system(mkoctfile -p LIBS)
-LIBS    += $$LFLAGS -loctave -loctinterp -lreadline
+LIBS    += $$LFLAGS -loctave -loctinterp -lreadline -lutil
 QMAKE_CXXFLAGS  += $$INCFLAGS
 
diff --git a/gui//src/Pty.cpp b/gui//src/Pty.cpp
--- a/gui//src/Pty.cpp
+++ b/gui//src/Pty.cpp
@@ -14,17 +14,17 @@
 
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
     02110-1301  USA.
 */
 
 // Own
-#include "kprocess.h"
+#include "kprocess_p.h"
 #include "kptyprocess.h"
 #include "Pty.h"
 
 // System
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <unistd.h>
 #include <errno.h>
diff --git a/gui//src/kprocess.h b/gui//src/kprocess.h
--- a/gui//src/kprocess.h
+++ b/gui//src/kprocess.h
@@ -20,18 +20,19 @@
 */
 
 #ifndef KPROCESS_H
 #define KPROCESS_H
 
 #include "kdecore_export.h"
 
 #include <QtCore/QProcess>
+class KProcess;
+class KProcessPrivate;
 
-class KProcessPrivate;
 
 /**
  * \class KProcess kprocess.h <KProcess>
  * 
  * Child process invocation, monitoring and control.
  *
  * This class extends QProcess by some useful functionality, overrides
  * some defaults with saner values and wraps parts of the API into a more
@@ -332,10 +333,12 @@ private:
     using QProcess::readChannelMode;
     using QProcess::setProcessChannelMode;
     using QProcess::processChannelMode;
 
     Q_PRIVATE_SLOT(d_func(), void _k_forwardStdout())
     Q_PRIVATE_SLOT(d_func(), void _k_forwardStderr())
 };
 
+#include "kprocess_p.h"
+
 #endif
 
diff --git a/gui//src/kprocess_p.h b/gui//src/kprocess_p.h
--- a/gui//src/kprocess_p.h
+++ b/gui//src/kprocess_p.h
@@ -16,19 +16,20 @@
     You should have received a copy of the GNU Library General Public License
     along with this library; see the file COPYING.LIB.  If not, write to
     the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
     Boston, MA 02110-1301, USA.
 */
 
 #ifndef KPROCESS_P_H
 #define KPROCESS_P_H
+class KProcess;
+class KProcessPrivate;
 
 #include "kprocess.h"
-
 class KProcessPrivate {
     Q_DECLARE_PUBLIC(KProcess)
 protected:
     KProcessPrivate() :
         openMode(QIODevice::ReadWrite)
     {
     }
     void writeAll(const QByteArray &buf, int fd);
diff --git a/gui//src/kptydevice.cpp b/gui//src/kptydevice.cpp
--- a/gui//src/kptydevice.cpp
+++ b/gui//src/kptydevice.cpp
@@ -52,187 +52,16 @@
 #elif defined(TIOCINQ)
   // "our end's input queue size"
 # define PTY_BYTES_AVAILABLE TIOCINQ
 #else
   // likewise. more generic ioctl (theoretically)
 # define PTY_BYTES_AVAILABLE FIONREAD
 #endif
 
-#define KMAXINT ((int)(~0U >> 1))
-
-/////////////////////////////////////////////////////
-// Helper. Remove when QRingBuffer becomes public. //
-/////////////////////////////////////////////////////
-
-#include <QtCore/qbytearray.h>
-#include <QtCore/qlinkedlist.h>
-
-#define CHUNKSIZE 4096
-
-class KRingBuffer
-{
-public:
-    KRingBuffer()
-    {
-        clear();
-    }
-
-    void clear()
-    {
-        buffers.clear();
-        QByteArray tmp;
-        tmp.resize(CHUNKSIZE);
-        buffers << tmp;
-        head = tail = 0;
-        totalSize = 0;
-    }
-
-    inline bool isEmpty() const
-    {
-        return buffers.count() == 1 && !tail;
-    }
-
-    inline int size() const
-    {
-        return totalSize;
-    }
-
-    inline int readSize() const
-    {
-        return (buffers.count() == 1 ? tail : buffers.first().size()) - head;
-    }
-
-    inline const char *readPointer() const
-    {
-        Q_ASSERT(totalSize > 0);
-        return buffers.first().constData() + head;
-    }
-
-    void free(int bytes)
-    {
-        totalSize -= bytes;
-        Q_ASSERT(totalSize >= 0);
-
-        forever {
-            int nbs = readSize();
-
-            if (bytes < nbs) {
-                head += bytes;
-                if (head == tail && buffers.count() == 1) {
-                    buffers.first().resize(CHUNKSIZE);
-                    head = tail = 0;
-                }
-                break;
-            }
-
-            bytes -= nbs;
-            if (buffers.count() == 1) {
-                buffers.first().resize(CHUNKSIZE);
-                head = tail = 0;
-                break;
-            }
-
-            buffers.removeFirst();
-            head = 0;
-        }
-    }
-
-    char *reserve(int bytes)
-    {
-        totalSize += bytes;
-
-        char *ptr;
-        if (tail + bytes <= buffers.last().size()) {
-            ptr = buffers.last().data() + tail;
-            tail += bytes;
-        } else {
-            buffers.last().resize(tail);
-            QByteArray tmp;
-            tmp.resize(qMax(CHUNKSIZE, bytes));
-            ptr = tmp.data();
-            buffers << tmp;
-            tail = bytes;
-        }
-        return ptr;
-    }
-
-    // release a trailing part of the last reservation
-    inline void unreserve(int bytes)
-    {
-        totalSize -= bytes;
-        tail -= bytes;
-    }
-
-    inline void write(const char *data, int len)
-    {
-        memcpy(reserve(len), data, len);
-    }
-
-    // Find the first occurrence of c and return the index after it.
-    // If c is not found until maxLength, maxLength is returned, provided
-    // it is smaller than the buffer size. Otherwise -1 is returned.
-    int indexAfter(char c, int maxLength = KMAXINT) const
-    {
-        int index = 0;
-        int start = head;
-        QLinkedList<QByteArray>::ConstIterator it = buffers.begin();
-        forever {
-            if (!maxLength)
-                return index;
-            if (index == size())
-                return -1;
-            const QByteArray &buf = *it;
-            ++it;
-            int len = qMin((it == buffers.end() ? tail : buf.size()) - start,
-                           maxLength);
-            const char *ptr = buf.data() + start;
-            if (const char *rptr = (const char *)memchr(ptr, c, len))
-                return index + (rptr - ptr) + 1;
-            index += len;
-            maxLength -= len;
-            start = 0;
-        }
-    }
-
-    inline int lineSize(int maxLength = KMAXINT) const
-    {
-        return indexAfter('\n', maxLength);
-    }
-
-    inline bool canReadLine() const
-    {
-        return lineSize() != -1;
-    }
-
-    int read(char *data, int maxLength)
-    {
-        int bytesToRead = qMin(size(), maxLength);
-        int readSoFar = 0;
-        while (readSoFar < bytesToRead) {
-            const char *ptr = readPointer();
-            int bs = qMin(bytesToRead - readSoFar, readSize());
-            memcpy(data + readSoFar, ptr, bs);
-            readSoFar += bs;
-            free(bs);
-        }
-        return readSoFar;
-    }
-
-    int readLine(char *data, int maxLength)
-    {
-        return read(data, lineSize(qMin(maxLength, size())));
-    }
-
-private:
-    QLinkedList<QByteArray> buffers;
-    int head, tail;
-    int totalSize;
-};
-
 //////////////////
 // private data //
 //////////////////
 
 // Lifted from Qt. I don't think they would mind. ;)
 // Re-lift again from Qt whenever a proper replacement for pthread_once appears
 static void qt_ignore_sigpipe()
 {
@@ -242,40 +71,16 @@ static void qt_ignore_sigpipe()
         memset(&noaction, 0, sizeof(noaction));
         noaction.sa_handler = SIG_IGN;
         sigaction(SIGPIPE, &noaction, 0);
     }
 }
 
 #define NO_INTR(ret,func) do { ret = func; } while (ret < 0 && errno == EINTR)
 
-struct KPtyDevicePrivate : public KPtyPrivate {
-    Q_DECLARE_PUBLIC(KPtyDevice)
-
-    KPtyDevicePrivate(KPty* parent) :
-        KPtyPrivate(parent),
-        emittedReadyRead(false), emittedBytesWritten(false),
-        readNotifier(0), writeNotifier(0)
-    {
-    }
-
-    bool _k_canRead();
-    bool _k_canWrite();
-
-    bool doWait(int msecs, bool reading);
-    void finishOpen(QIODevice::OpenMode mode);
-
-    bool emittedReadyRead;
-    bool emittedBytesWritten;
-    QSocketNotifier *readNotifier;
-    QSocketNotifier *writeNotifier;
-    KRingBuffer readBuffer;
-    KRingBuffer writeBuffer;
-};
-
 bool KPtyDevicePrivate::_k_canRead()
 {
     Q_Q(KPtyDevice);
     qint64 readBytes = 0;
 
 #ifdef Q_OS_IRIX // this should use a config define, but how to check it?
     size_t available;
 #else
diff --git a/gui//src/kptydevice.h b/gui//src/kptydevice.h
--- a/gui//src/kptydevice.h
+++ b/gui//src/kptydevice.h
@@ -16,21 +16,23 @@
     along with this library; see the file COPYING.LIB.  If not, write to
     the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
     Boston, MA 02110-1301, USA.
 */
 
 #ifndef kptydev_h
 #define kptydev_h
 
+struct KPtyPrivate;
+struct KPtyDevicePrivate;
+
 #include "kpty.h"
-
+#include "kpty_p.h"
 #include <QtCore/QIODevice>
-
-struct KPtyDevicePrivate;
+#include <QSocketNotifier>
 
 #define Q_DECLARE_PRIVATE_MI(Class, SuperClass) \
     inline Class##Private* d_func() { return reinterpret_cast<Class##Private *>(SuperClass::d_ptr); } \
     inline const Class##Private* d_func() const { return reinterpret_cast<const Class##Private *>(SuperClass::d_ptr); } \
     friend class Class##Private;
 
 /**
  * Encapsulates KPty into a QIODevice, so it can be used with Q*Stream, etc.
@@ -147,10 +149,205 @@ protected:
     virtual qint64 readLineData(char *data, qint64 maxSize);
     virtual qint64 writeData(const char *data, qint64 maxSize);
 
 private:
     Q_PRIVATE_SLOT(d_func(), bool _k_canRead())
     Q_PRIVATE_SLOT(d_func(), bool _k_canWrite())
 };
 
+#define KMAXINT ((int)(~0U >> 1))
+
+/////////////////////////////////////////////////////
+// Helper. Remove when QRingBuffer becomes public. //
+/////////////////////////////////////////////////////
+
+#include <QtCore/qbytearray.h>
+#include <QtCore/qlinkedlist.h>
+
+#define CHUNKSIZE 4096
+
+class KRingBuffer
+{
+public:
+    KRingBuffer()
+    {
+        clear();
+    }
+
+    void clear()
+    {
+        buffers.clear();
+        QByteArray tmp;
+        tmp.resize(CHUNKSIZE);
+        buffers << tmp;
+        head = tail = 0;
+        totalSize = 0;
+    }
+
+    inline bool isEmpty() const
+    {
+        return buffers.count() == 1 && !tail;
+    }
+
+    inline int size() const
+    {
+        return totalSize;
+    }
+
+    inline int readSize() const
+    {
+        return (buffers.count() == 1 ? tail : buffers.first().size()) - head;
+    }
+
+    inline const char *readPointer() const
+    {
+        Q_ASSERT(totalSize > 0);
+        return buffers.first().constData() + head;
+    }
+
+    void free(int bytes)
+    {
+        totalSize -= bytes;
+        Q_ASSERT(totalSize >= 0);
+
+        forever {
+            int nbs = readSize();
+
+            if (bytes < nbs) {
+                head += bytes;
+                if (head == tail && buffers.count() == 1) {
+                    buffers.first().resize(CHUNKSIZE);
+                    head = tail = 0;
+                }
+                break;
+            }
+
+            bytes -= nbs;
+            if (buffers.count() == 1) {
+                buffers.first().resize(CHUNKSIZE);
+                head = tail = 0;
+                break;
+            }
+
+            buffers.removeFirst();
+            head = 0;
+        }
+    }
+
+    char *reserve(int bytes)
+    {
+        totalSize += bytes;
+
+        char *ptr;
+        if (tail + bytes <= buffers.last().size()) {
+            ptr = buffers.last().data() + tail;
+            tail += bytes;
+        } else {
+            buffers.last().resize(tail);
+            QByteArray tmp;
+            tmp.resize(qMax(CHUNKSIZE, bytes));
+            ptr = tmp.data();
+            buffers << tmp;
+            tail = bytes;
+        }
+        return ptr;
+    }
+
+    // release a trailing part of the last reservation
+    inline void unreserve(int bytes)
+    {
+        totalSize -= bytes;
+        tail -= bytes;
+    }
+
+    inline void write(const char *data, int len)
+    {
+        memcpy(reserve(len), data, len);
+    }
+
+    // Find the first occurrence of c and return the index after it.
+    // If c is not found until maxLength, maxLength is returned, provided
+    // it is smaller than the buffer size. Otherwise -1 is returned.
+    int indexAfter(char c, int maxLength = KMAXINT) const
+    {
+        int index = 0;
+        int start = head;
+        QLinkedList<QByteArray>::ConstIterator it = buffers.begin();
+        forever {
+            if (!maxLength)
+                return index;
+            if (index == size())
+                return -1;
+            const QByteArray &buf = *it;
+            ++it;
+            int len = qMin((it == buffers.end() ? tail : buf.size()) - start,
+                           maxLength);
+            const char *ptr = buf.data() + start;
+            if (const char *rptr = (const char *)memchr(ptr, c, len))
+                return index + (rptr - ptr) + 1;
+            index += len;
+            maxLength -= len;
+            start = 0;
+        }
+    }
+
+    inline int lineSize(int maxLength = KMAXINT) const
+    {
+        return indexAfter('\n', maxLength);
+    }
+
+    inline bool canReadLine() const
+    {
+        return lineSize() != -1;
+    }
+
+    int read(char *data, int maxLength)
+    {
+        int bytesToRead = qMin(size(), maxLength);
+        int readSoFar = 0;
+        while (readSoFar < bytesToRead) {
+            const char *ptr = readPointer();
+            int bs = qMin(bytesToRead - readSoFar, readSize());
+            memcpy(data + readSoFar, ptr, bs);
+            readSoFar += bs;
+            free(bs);
+        }
+        return readSoFar;
+    }
+
+    int readLine(char *data, int maxLength)
+    {
+        return read(data, lineSize(qMin(maxLength, size())));
+    }
+
+private:
+    QLinkedList<QByteArray> buffers;
+    int head, tail;
+    int totalSize;
+};
+
+struct KPtyDevicePrivate : public KPtyPrivate {
+    Q_DECLARE_PUBLIC(KPtyDevice)
+
+    KPtyDevicePrivate(KPty* parent) :
+        KPtyPrivate(parent),
+        emittedReadyRead(false), emittedBytesWritten(false),
+        readNotifier(0), writeNotifier(0)
+    {
+    }
+
+    bool _k_canRead();
+    bool _k_canWrite();
+
+    bool doWait(int msecs, bool reading);
+    void finishOpen(QIODevice::OpenMode mode);
+
+    bool emittedReadyRead;
+    bool emittedBytesWritten;
+    QSocketNotifier *readNotifier;
+    QSocketNotifier *writeNotifier;
+    KRingBuffer readBuffer;
+    KRingBuffer writeBuffer;
+};
+
 #endif
 
diff --git a/gui//src/kptyprocess.cpp b/gui//src/kptyprocess.cpp
--- a/gui//src/kptyprocess.cpp
+++ b/gui//src/kptyprocess.cpp
@@ -15,45 +15,29 @@
     Library General Public License for more details.
 
     You should have received a copy of the GNU Library General Public License
     along with this library; see the file COPYING.LIB.  If not, write to
     the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
     Boston, MA 02110-1301, USA.
 */
 #include "kptyprocess.h"
-#include "kprocess_p.h"
+#include "kprocess.h"
 
 //#include <kuser.h>
 #include "kptydevice.h"
 
 #include <stdlib.h>
 #include <unistd.h>
 
 //////////////////
 // private data //
 //////////////////
 
-struct KPtyProcessPrivate : KProcessPrivate {
-    KPtyProcessPrivate() :
-        ptyChannels(KPtyProcess::NoChannels),
-        addUtmp(false)
-    {
-    }
 
-    void _k_onStateChanged(QProcess::ProcessState newState)
-    {
-        if (newState == QProcess::NotRunning && addUtmp)
-            pty->logout();
-    }
-
-    KPtyDevice *pty;
-    KPtyProcess::PtyChannels ptyChannels;
-    bool addUtmp : 1;
-};
 
 KPtyProcess::KPtyProcess(QObject *parent) :
     KProcess(new KPtyProcessPrivate, parent)
 {
     Q_D(KPtyProcess);
 
     d->pty = new KPtyDevice(this);
     d->pty->open();
diff --git a/gui//src/kptyprocess.h b/gui//src/kptyprocess.h
--- a/gui//src/kptyprocess.h
+++ b/gui//src/kptyprocess.h
@@ -18,22 +18,24 @@
     the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
     Boston, MA 02110-1301, USA.
 */
 
 #ifndef KPTYPROCESS_H
 #define KPTYPROCESS_H
 
 #include "kprocess.h"
-
+#include "kprocess_p.h"
+#include "kptydevice.h"
 #include "kpty_export.h"
 
 class KPtyDevice;
+class KPtyProcess;
+struct KPtyProcessPrivate;
 
-struct KPtyProcessPrivate;
 /**
  * This class extends KProcess by support for PTYs (pseudo TTYs).
  *
  * The PTY is opened as soon as the class is instantiated. Verify that
  * it was opened successfully by checking that pty()->masterFd() is not -1.
  *
  * The PTY is always made the process' controlling TTY.
  * Utmp registration and connecting the stdio handles to the PTY are optional.
@@ -128,11 +130,29 @@ protected:
      * @reimp
      */
     virtual void setupChildProcess();
 
 private:
     Q_PRIVATE_SLOT(d_func(), void _k_onStateChanged(QProcess::ProcessState))
 };
 
+struct KPtyProcessPrivate : KProcessPrivate {
+    KPtyProcessPrivate() :
+        ptyChannels(KPtyProcess::NoChannels),
+        addUtmp(false)
+    {
+    }
+
+    void _k_onStateChanged(QProcess::ProcessState newState)
+    {
+        if (newState == QProcess::NotRunning && addUtmp)
+            pty->logout();
+    }
+
+    KPtyDevice *pty;
+    KPtyProcess::PtyChannels ptyChannels;
+    bool addUtmp : 1;
+};
+
 Q_DECLARE_OPERATORS_FOR_FLAGS(KPtyProcess::PtyChannels)
 
 #endif
