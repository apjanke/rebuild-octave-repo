# HG changeset patch
# User jwe
# Date 790819803 0
#      Mon Jan 23 00:10:03 1995 +0000
# Node ID 8c1a25cdfa81757edb5be60d1d533542b088b9d8
# Parent  7f42e76331b04c74e9685a000efd11a9404ff0dc
[project @ 1995-01-23 00:10:03 by jwe]

diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -52,16 +52,25 @@ Software Foundation, 675 Mass Ave, Cambr
       current_input_column += yyleng; \
       quote_is_transpose = 0; \
       cant_be_identifier = 0; \
       convert_spaces_to_comma = 1; \
       return (tok); \
     } \
   while (0)
 
+#define TOK_PUSH_AND_RETURN(name,tok) \
+  do \
+    { \
+      yylval.tok_val = new token (input_line_number, current_input_column); \
+      token_stack.push (yylval.tok_val); \
+      TOK_RETURN (tok); \
+    } \
+  while (0)
+
 #define BIN_OP_RETURN(tok,convert) \
   do \
     { \
       yylval.tok_val = new token (input_line_number, current_input_column); \
       token_stack.push (yylval.tok_val); \
       current_input_column += yyleng; \
       quote_is_transpose = 0; \
       cant_be_identifier = 0; \
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -159,19 +159,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     cant_be_identifier = 0;
     convert_spaces_to_comma = 1;
     return '\n';
   }
 
 <TEXT_FCN>[\;\,] {
     if (doing_set && strcmp (yytext, ",") == 0)
       {
-	yylval.tok_val = new token (yytext);
-	token_stack.push (yylval.tok_val);
-	TOK_RETURN (TEXT);
+	TOK_PUSH_AND_RETURN (yytext, TEXT);
       }
     else
       {
 	BEGIN 0;
 	if (strcmp (yytext, ",") == 0)
 	  TOK_RETURN (',');
 	else
 	  TOK_RETURN (';');
@@ -183,19 +181,17 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
     return handle_string (yytext[0], 1);
   }
 
 <HELP_FCN>[^ \t\n]*{S}*	|
 <TEXT_FCN>[^ \t\n\;\,]*{S}* {
     static char *tok = 0;
     delete [] tok;
     tok = strip_trailing_whitespace (yytext);
-    yylval.tok_val = new token (tok);
-    token_stack.push (yylval.tok_val);
-    TOK_RETURN (TEXT);
+    TOK_PUSH_AND_RETURN (tok, TEXT);
   }
 
 %{
 // For this and the next two rules, we're looking at ']', and we
 // need to know if the next token is `=' or `=='.
 //
 // It would have been so much easier if the delimiters were simply
 // different for the expression on the left hand side of the equals
@@ -374,17 +370,16 @@ NUMBER	(({D}+\.?{D}*{EXPON}?)|(\.{D}+{EX
 // Identifiers.  Truncate the token at the first space or tab but
 // don't write directly on yytext.
 %}
 
 {IDENT}{S}* {
     static char *tok = 0;
     delete [] tok;
     tok = strip_trailing_whitespace (yytext);
-    current_input_column += yyleng;
     int c = yytext[yyleng-1];
     int cont_is_spc = eat_continuation ();
     int spc_gobbled = (cont_is_spc || c == ' ' || c == '\t');
     return handle_identifier (tok, spc_gobbled);
   }
 
 %{
 // A new line character.  New line characters inside matrix constants
@@ -1683,30 +1678,27 @@ handle_identifier (char *tok, int spc_go
 // directly by another identifier.  Special cases are handled below.
 
   cant_be_identifier = 1;
 
 // If we are expecting a structure element, we just want to return
 // TEXT_ID, which is a string that is also a valid identifier.
 
   if (looking_at_indirect_ref)
-    {
-      yylval.tok_val = new token (tok);
-      token_stack.push (yylval.tok_val);
-      TOK_RETURN (TEXT_ID);
-    }
+    TOK_PUSH_AND_RETURN (tok, TEXT_ID);
 
 // If we have a regular keyword, or a plot STYLE, return it.  Keywords
 // can be followed by identifiers (TOK_RETURN handles that).
 
   int kw_token = is_keyword (tok);
   if (kw_token)
     {
       if (kw_token == STYLE)
 	{
+	  current_input_column += yyleng;
 	  quote_is_transpose = 0;
 	  convert_spaces_to_comma = 1;
 	  return kw_token;
 	}
       else
 	TOK_RETURN (kw_token);
     }
 
@@ -1771,16 +1763,17 @@ handle_identifier (char *tok, int spc_go
 // the only return value for the function.  For example,
 //
 //   function SCREW = f (args);
 //
 // The variable maybe_screwed is reset in parse.y.
 
   if (next_tok_is_eq)
     {
+      current_input_column += yyleng;
       if (defining_func && maybe_screwed)
 	return SCREW;
       else
 	return NAME;
     }
 
 // At this point, we are only dealing with identifiers that are not
 // followed by `=' (if the next token is `=', there is no need to
@@ -1808,16 +1801,17 @@ handle_identifier (char *tok, int spc_go
       int index_op = (c1 == '('
 		      && (user_pref.whitespace_in_literal_matrix == 0
 			  || ! spc_gobbled));
 
       if (! (postfix_un_op || bin_op || other_op || index_op))
 	unput (',');
     }
 
+  current_input_column += yyleng;
   return NAME;
 }
 
 // Print a warning if a function file that defines a function has
 // anything other than comments and whitespace following the END token
 // that matches the FUNCTION statement.
 
 void
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -630,38 +630,38 @@ command		: plot_command
 		    if (check_end ($7, token::for_end))
 		      ABORT_PARSE;
 		    looping--;
 		    $$ = new tree_for_command ($2, $4, $6,
 					       $1->line (), $1->column ());
 		  }
 		| BREAK
 		  {
-		    if (!looping)
+		    if (! (looping || defining_func))
 		      {
-			yyerror ("break: only meaningful within a `for'\
- or `while' loop");
+			yyerror ("break: only meaningful within a loop\
+ or function body");
 			ABORT_PARSE;
 		      }
 		    $$ = new tree_break_command ($1->line (), $1->column ());
 		  }
 		| CONTINUE
 		  {
-		    if (!looping)
+		    if (! looping)
 		      {
 			yyerror ("continue: only meaningful within a\
  `for' or `while' loop");
 			ABORT_PARSE;
 		      }
 		    $$ = new tree_continue_command ($1->line (),
 						    $1->column ());
 		  }
 		| FUNC_RET
 		  {
-		    if (!defining_func)
+		    if (! defining_func)
 		      {
 			yyerror ("return: only meaningful within a function");
 			ABORT_PARSE;
 		      }
 		    $$ = new tree_return_command ($1->line (), $1->column ());
 		  }
 		;
 
@@ -1181,18 +1181,16 @@ matrix_row	: expression		// First elemen
 
 // Generic error messages.
 
 static void
 yyerror (char *s)
 {
   char *line = current_input_line;
   int err_col = current_input_column - 1;
-  if (err_col == 0 && line)
-    err_col = strlen (line) + 1;
 
   ostrstream output_buf;
 
   if (reading_fcn_file || reading_script_file)
     output_buf << "parse error near line " << input_line_number
 	       << " of file " << curr_fcn_file_name << ".m:";
   else
     output_buf << "parse error:";
@@ -1200,31 +1198,34 @@ yyerror (char *s)
   if (s && strcmp (s, "parse error") != 0)
     output_buf << "\n\n  " << s;
 
   output_buf << "\n\n";
 
   if (line)
     {
       int len = strlen (line);
+
       if (line[len-1] == '\n')
         {
           len--;
           line[len] = '\0';
         }
 
 // Print the line, maybe with a pointer near the error token.
 
-      output_buf << "  " << line << "\n";
-      if (err_col <= len)
-	{
-	  for (int i = 0; i < err_col + 1; i++)
-	    output_buf << " ";
-	  output_buf << "^";
-	}
+      output_buf << ">>> " << line << "\n";
+
+      if (err_col == 0)
+	err_col = len;
+
+      for (int i = 0; i < err_col + 3; i++)
+	output_buf << " ";
+
+      output_buf << "^";
     }
 
   output_buf << "\n" << ends;
 
   char *msg = output_buf.str ();
 
   parse_error (msg);
 
diff --git a/src/pt-exp-base.cc b/src/pt-exp-base.cc
--- a/src/pt-exp-base.cc
+++ b/src/pt-exp-base.cc
@@ -56,16 +56,19 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "unwind-prot.h"
 #include "parse.h"
 #include "lex.h"
 #include "defun.h"
 
 // Nonzero means we're returning from a function.
 extern int returning;
 
+// Nonzero means we're breaking out of a loop or function body.
+extern int breaking;
+
 // But first, some extra functions used by the tree classes.
 
 // We seem to have no use for this now.  Maybe it will be needed at
 // some future date, so here it is.
 #if 0
 // Convert a linked list of trees to a vector of pointers to trees.
 
 static tree **
@@ -2768,16 +2771,19 @@ tree_function::eval (int print, int narg
 // toggled by a user-leval variable?
 
     int pf = ! user_pref.silent_functions;
     tree_constant last_computed_value = cmd_list->eval (pf);
 
     if (returning)
       returning = 0;
 
+    if (breaking)
+      breaking--;
+
     if (error_state)
       {
 	traceback_error ();
 	goto abort;
       }
     
 // Copy return values out.
 
