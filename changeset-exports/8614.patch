# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1233131607 -3600
#      Wed Jan 28 09:33:27 2009 +0100
# Node ID 5114ea5a41b59116bd215055a0d0027d53c578ad
# Parent  38482007c834e3ff04149ca4786d258eb007db89
use shallow copying in Matrix/RowVector/ColumnVector conversions

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -274,27 +274,23 @@ ComplexMatrix::ComplexMatrix (const Colu
 ComplexMatrix::ComplexMatrix (const DiagMatrix& a)
   : MArray2<Complex> (a.rows (), a.cols (), 0.0)
 {
   for (octave_idx_type i = 0; i < a.length (); i++)
     elem (i, i) = a.elem (i, i);
 }
 
 ComplexMatrix::ComplexMatrix (const ComplexRowVector& rv)
-  : MArray2<Complex> (1, rv.length (), 0.0)
+  : MArray2<Complex> (Array2<Complex> (rv, 1, rv.length ()))
 {
-  for (octave_idx_type i = 0; i < rv.length (); i++)
-    elem (0, i) = rv.elem (i);
 }
 
 ComplexMatrix::ComplexMatrix (const ComplexColumnVector& cv)
-  : MArray2<Complex> (cv.length (), 1, 0.0)
+  : MArray2<Complex> (Array2<Complex> (cv, cv.length (), 1))
 {
-  for (octave_idx_type i = 0; i < cv.length (); i++)
-    elem (i, 0) = cv.elem (i);
 }
 
 ComplexMatrix::ComplexMatrix (const ComplexDiagMatrix& a)
   : MArray2<Complex> (a.rows (), a.cols (), 0.0)
 {
   for (octave_idx_type i = 0; i < a.length (); i++)
     elem (i, i) = a.elem (i, i);
 }
@@ -952,45 +948,23 @@ ComplexMatrix::extract_n (octave_idx_typ
   return result;
 }
 
 // extract row or column i.
 
 ComplexRowVector
 ComplexMatrix::row (octave_idx_type i) const
 {
-  octave_idx_type nc = cols ();
-  if (i < 0 || i >= rows ())
-    {
-      (*current_liboctave_error_handler) ("invalid row selection");
-      return ComplexRowVector ();
-    }
-
-  ComplexRowVector retval (nc);
-  for (octave_idx_type j = 0; j < cols (); j++)
-    retval.xelem (j) = elem (i, j);
-
-  return retval;
+  return MArray<Complex> (index (idx_vector (i), idx_vector::colon));
 }
 
 ComplexColumnVector
 ComplexMatrix::column (octave_idx_type i) const
 {
-  octave_idx_type nr = rows ();
-  if (i < 0 || i >= cols ())
-    {
-      (*current_liboctave_error_handler) ("invalid column selection");
-      return ComplexColumnVector ();
-    }
-
-  ComplexColumnVector retval (nr);
-  for (octave_idx_type j = 0; j < nr; j++)
-    retval.xelem (j) = elem (j, i);
-
-  return retval;
+  return MArray<Complex> (index (idx_vector::colon, idx_vector (i)));
 }
 
 ComplexMatrix
 ComplexMatrix::inverse (void) const
 {
   octave_idx_type info;
   double rcon;
   MatrixType mattype (*this);
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,33 @@
+2009-01-28  Jaroslav Hajek  <highegg@gmail.com>
+
+	* dMatrix.cc (Matrix::Matrix (const RowVector&)): Use shallow copy.
+	(Matrix::Matrix (const ColumnVector&)): Dtto.
+	(Matrix::row): Dtto.
+	(Matrix::column): Dtto.
+
+	* fMatrix.cc (FloatMatrix::FloatMatrix (const FloatRowVector&)): Use
+	shallow copy.
+	(FloatMatrix::FloatMatrix (const FloatColumnVector&)): Dtto.
+	(FloatMatrix::row): Dtto.
+	(FloatMatrix::column): Dtto.
+
+	* CMatrix.cc (ComplexMatrix::ComplexMatrix (const ComplexRowVector&)):
+	Use shallow copy.
+	(ComplexMatrix::ComplexMatrix (const ComplexColumnVector&)): Dtto.
+	(ComplexMatrix::row): Dtto.
+	(ComplexMatrix::column): Dtto.
+
+	* fCMatrix.cc (FloatComplexMatrix::FloatComplexMatrix (const FloatComplexRowVector&)):
+	Use shallow copy.
+	(FloatComplexMatrix::FloatComplexMatrix (const FloatComplexColumnVector&)): Dtto.
+	(FloatComplexMatrix::row): Dtto.
+	(FloatComplexMatrix::column): Dtto.
+
 2009-01-27  Benjamin Lindner  <lindnerb@users.sourceforge.net>
 
 	* Makefile.in (LINK_DEPS): Include ARPACK_LIBS and REGEX_LIBS in
 	the list.
 
 2009-01-27  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dbleQR.cc (QR::init): Use form. Use local buffers.
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -224,27 +224,23 @@ extern "C"
 			       const octave_idx_type&, const double*,
 			       const octave_idx_type&, double*, double&
 			       F77_CHAR_ARG_LEN_DECL); 
 }
 
 // Matrix class.
 
 Matrix::Matrix (const RowVector& rv)
-  : MArray2<double> (1, rv.length (), 0.0)
+  : MArray2<double> (Array2<double> (rv, 1, rv.length ()))
 {
-  for (octave_idx_type i = 0; i < rv.length (); i++)
-    elem (0, i) = rv.elem (i);
 }
 
 Matrix::Matrix (const ColumnVector& cv)
-  : MArray2<double> (cv.length (), 1, 0.0)
+  : MArray2<double> (Array2<double> (cv, cv.length (), 1))
 {
-  for (octave_idx_type i = 0; i < cv.length (); i++)
-    elem (i, 0) = cv.elem (i);
 }
 
 Matrix::Matrix (const DiagMatrix& a)
   : MArray2<double> (a.rows (), a.cols (), 0.0)
 {
   for (octave_idx_type i = 0; i < a.length (); i++)
     elem (i, i) = a.elem (i, i);
 }
@@ -636,45 +632,23 @@ Matrix::extract_n (octave_idx_type r1, o
   return result;
 }
 
 // extract row or column i.
 
 RowVector
 Matrix::row (octave_idx_type i) const
 {
-  octave_idx_type nc = cols ();
-  if (i < 0 || i >= rows ())
-    {
-      (*current_liboctave_error_handler) ("invalid row selection");
-      return RowVector ();
-    }
-
-  RowVector retval (nc);
-  for (octave_idx_type j = 0; j < nc; j++)
-    retval.xelem (j) = elem (i, j);
-
-  return retval;
+  return MArray<double> (index (idx_vector (i), idx_vector::colon));
 }
 
 ColumnVector
 Matrix::column (octave_idx_type i) const
 {
-  octave_idx_type nr = rows ();
-  if (i < 0 || i >= cols ())
-    {
-      (*current_liboctave_error_handler) ("invalid column selection");
-      return ColumnVector ();
-    }
-
-  ColumnVector retval (nr);
-  for (octave_idx_type j = 0; j < nr; j++)
-    retval.xelem (j) = elem (j, i);
-
-  return retval;
+  return MArray<double> (index (idx_vector::colon, idx_vector (i)));
 }
 
 Matrix
 Matrix::inverse (void) const
 {
   octave_idx_type info;
   double rcon;
   MatrixType mattype (*this);
diff --git a/liboctave/fCMatrix.cc b/liboctave/fCMatrix.cc
--- a/liboctave/fCMatrix.cc
+++ b/liboctave/fCMatrix.cc
@@ -268,27 +268,23 @@ FloatComplexMatrix::FloatComplexMatrix (
 FloatComplexMatrix::FloatComplexMatrix (const FloatDiagMatrix& a)
   : MArray2<FloatComplex> (a.rows (), a.cols (), 0.0)
 {
   for (octave_idx_type i = 0; i < a.length (); i++)
     elem (i, i) = a.elem (i, i);
 }
 
 FloatComplexMatrix::FloatComplexMatrix (const FloatComplexRowVector& rv)
-  : MArray2<FloatComplex> (1, rv.length (), 0.0)
+  : MArray2<FloatComplex> (Array2<FloatComplex> (rv, 1, rv.length ()))
 {
-  for (octave_idx_type i = 0; i < rv.length (); i++)
-    elem (0, i) = rv.elem (i);
 }
 
 FloatComplexMatrix::FloatComplexMatrix (const FloatComplexColumnVector& cv)
-  : MArray2<FloatComplex> (cv.length (), 1, 0.0)
+  : MArray2<FloatComplex> (Array2<FloatComplex> (cv, cv.length (), 1))
 {
-  for (octave_idx_type i = 0; i < cv.length (); i++)
-    elem (i, 0) = cv.elem (i);
 }
 
 FloatComplexMatrix::FloatComplexMatrix (const FloatComplexDiagMatrix& a)
   : MArray2<FloatComplex> (a.rows (), a.cols (), 0.0)
 {
   for (octave_idx_type i = 0; i < a.length (); i++)
     elem (i, i) = a.elem (i, i);
 }
@@ -946,45 +942,23 @@ FloatComplexMatrix::extract_n (octave_id
   return result;
 }
 
 // extract row or column i.
 
 FloatComplexRowVector
 FloatComplexMatrix::row (octave_idx_type i) const
 {
-  octave_idx_type nc = cols ();
-  if (i < 0 || i >= rows ())
-    {
-      (*current_liboctave_error_handler) ("invalid row selection");
-      return FloatComplexRowVector ();
-    }
-
-  FloatComplexRowVector retval (nc);
-  for (octave_idx_type j = 0; j < cols (); j++)
-    retval.xelem (j) = elem (i, j);
-
-  return retval;
+  return MArray<FloatComplex> (index (idx_vector (i), idx_vector::colon));
 }
 
 FloatComplexColumnVector
 FloatComplexMatrix::column (octave_idx_type i) const
 {
-  octave_idx_type nr = rows ();
-  if (i < 0 || i >= cols ())
-    {
-      (*current_liboctave_error_handler) ("invalid column selection");
-      return FloatComplexColumnVector ();
-    }
-
-  FloatComplexColumnVector retval (nr);
-  for (octave_idx_type j = 0; j < nr; j++)
-    retval.xelem (j) = elem (j, i);
-
-  return retval;
+  return MArray<FloatComplex> (index (idx_vector::colon, idx_vector (i)));
 }
 
 FloatComplexMatrix
 FloatComplexMatrix::inverse (void) const
 {
   octave_idx_type info;
   float rcon;
   MatrixType mattype (*this);
diff --git a/liboctave/fMatrix.cc b/liboctave/fMatrix.cc
--- a/liboctave/fMatrix.cc
+++ b/liboctave/fMatrix.cc
@@ -223,27 +223,23 @@ extern "C"
 			       const octave_idx_type&, const float*,
 			       const octave_idx_type&, float*, float&
 			       F77_CHAR_ARG_LEN_DECL); 
 }
 
 // Matrix class.
 
 FloatMatrix::FloatMatrix (const FloatRowVector& rv)
-  : MArray2<float> (1, rv.length (), 0.0)
+  : MArray2<float> (Array2<float> (rv, 1, rv.length ()))
 {
-  for (octave_idx_type i = 0; i < rv.length (); i++)
-    elem (0, i) = rv.elem (i);
 }
 
 FloatMatrix::FloatMatrix (const FloatColumnVector& cv)
-  : MArray2<float> (cv.length (), 1, 0.0)
+  : MArray2<float> (Array2<float> (cv, cv.length (), 1))
 {
-  for (octave_idx_type i = 0; i < cv.length (); i++)
-    elem (i, 0) = cv.elem (i);
 }
 
 FloatMatrix::FloatMatrix (const FloatDiagMatrix& a)
   : MArray2<float> (a.rows (), a.cols (), 0.0)
 {
   for (octave_idx_type i = 0; i < a.length (); i++)
     elem (i, i) = a.elem (i, i);
 }
@@ -635,45 +631,23 @@ FloatMatrix::extract_n (octave_idx_type 
   return result;
 }
 
 // extract row or column i.
 
 FloatRowVector
 FloatMatrix::row (octave_idx_type i) const
 {
-  octave_idx_type nc = cols ();
-  if (i < 0 || i >= rows ())
-    {
-      (*current_liboctave_error_handler) ("invalid row selection");
-      return FloatRowVector ();
-    }
-
-  FloatRowVector retval (nc);
-  for (octave_idx_type j = 0; j < nc; j++)
-    retval.xelem (j) = elem (i, j);
-
-  return retval;
+  return MArray<float> (index (idx_vector (i), idx_vector::colon));
 }
 
 FloatColumnVector
 FloatMatrix::column (octave_idx_type i) const
 {
-  octave_idx_type nr = rows ();
-  if (i < 0 || i >= cols ())
-    {
-      (*current_liboctave_error_handler) ("invalid column selection");
-      return FloatColumnVector ();
-    }
-
-  FloatColumnVector retval (nr);
-  for (octave_idx_type j = 0; j < nr; j++)
-    retval.xelem (j) = elem (j, i);
-
-  return retval;
+  return MArray<float> (index (idx_vector::colon, idx_vector (i)));
 }
 
 FloatMatrix
 FloatMatrix::inverse (void) const
 {
   octave_idx_type info;
   float rcon;
   MatrixType mattype (*this);
