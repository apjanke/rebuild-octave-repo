# HG changeset patch
# User Rik <rik@octave.org>
# Date 1514503548 28800
#      Thu Dec 28 15:25:48 2017 -0800
# Node ID 6ea279bbe94a57dcf7ed7fafc171c8cdcc8c4b02
# Parent  0d196d840c02f6d74664428039172a73583638bf
linsolve.m: Clarify documentation about TRANSA input.

* linsolve.m: Reformat docstring to 80 characters.  Clarify that TRANSA
input solves the equation A'*x = b.

diff --git a/scripts/linear-algebra/linsolve.m b/scripts/linear-algebra/linsolve.m
--- a/scripts/linear-algebra/linsolve.m
+++ b/scripts/linear-algebra/linsolve.m
@@ -27,21 +27,21 @@
 ## @w{(@code{x = mldivide (A, b)})}.
 ##
 ## Octave ordinarily examines the properties of the matrix @var{A} and chooses
 ## a solver that best matches the matrix.  By passing a structure @var{opts}
 ## to @code{linsolve} you can inform Octave directly about the matrix @var{A}.
 ## In this case Octave will skip the matrix examination and proceed directly
 ## to solving the linear system.
 ##
-## @strong{Warning:} If the matrix @var{A} does not have the properties
-## listed in the @var{opts} structure then the result will not be accurate
-## AND no warning will be given.  When in doubt, let Octave examine the matrix
-## and choose the appropriate solver as this step takes little time and the
-## result is cached so that it is only done once per linear system.
+## @strong{Warning:} If the matrix @var{A} does not have the properties listed
+## in the @var{opts} structure then the result will not be accurate AND no
+## warning will be given.  When in doubt, let Octave examine the matrix and
+## choose the appropriate solver as this step takes little time and the result
+## is cached so that it is only done once per linear system.
 ##
 ## Possible @var{opts} fields (set value to true/false):
 ##
 ## @table @asis
 ## @item LT
 ##   @var{A} is lower triangular
 ##
 ## @item UT
@@ -55,17 +55,17 @@
 ##
 ## @item POSDEF
 ##   @var{A} is positive definite
 ##
 ## @item RECT
 ##   @var{A} is general rectangular (currently makes no difference)
 ##
 ## @item TRANSA
-##   Solve @code{A'*x = b} by @code{transpose (A) \ b}
+##   Solve @code{A'*x = b} if true rather than @code{A*x = b}
 ## @end table
 ##
 ## The optional second output @var{R} is the inverse condition number of
 ## @var{A} (zero if matrix is singular).
 ## @seealso{mldivide, matrix_type, rcond}
 ## @end deftypefn
 
 ## Author: Nir Krakauer <nkrakauer@ccny.cuny.edu>
