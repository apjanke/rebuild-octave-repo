# HG changeset patch
# User Rafael Laboissiere <rafael@debian.org>
# Date 1209808074 -7200
#      Sat May 03 11:47:54 2008 +0200
# Node ID a2d9f325b65a6986ed71de9512e7e920b6087940
# Parent  71f068b22fccc42d7a55b2cb379887eda29406eb
Use isschar instead of deprecated isstr

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2008-05-03  Rafael Laboissiere <rafael@debian.org>
+
+	* interpreter/expr.txi, interpreter/tips.txi: Use ischar instead of
+	deprecated isstr.
+
 2008-04-02  David Bateman  <dbateman@free.fr>
 
 	* interpreter/sparse.txi: Document spaugment.
 
 2008-03-26  Rafael Laboissiere  <rafael@debian.org>
 
 	* interpreter/mkoctfile.1: Remove spurious whitespace before macros
 
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -742,42 +742,42 @@ the value of the variable @var{b} is onl
 @var{a} is nonzero.
 
 This can be used to write somewhat more concise code.  For example, it
 is possible write
 
 @example
 @group
 function f (a, b, c)
-  if (nargin > 2 && isstr (c))
+  if (nargin > 2 && ischar (c))
     @dots{}
 @end group
 @end example
 
 @noindent
 instead of having to use two @code{if} statements to avoid attempting to
 evaluate an argument that doesn't exist.  For example, without the
 short-circuit feature, it would be necessary to write
 
 @example
 @group
 function f (a, b, c)
   if (nargin > 2)
-    if (isstr (c))
+    if (ischar (c))
       @dots{}
 @end group
 @end example
 
 @noindent
 Writing
 
 @example
 @group
 function f (a, b, c)
-  if (nargin > 2 & isstr (c))
+  if (nargin > 2 & ischar (c))
     @dots{}
 @end group
 @end example
 
 @noindent
 would result in an error if @code{f} were called with one or two
 arguments because Octave would be forced to try to evaluate both of the
 operands for the operator @samp{&}.
diff --git a/doc/interpreter/tips.txi b/doc/interpreter/tips.txi
--- a/doc/interpreter/tips.txi
+++ b/doc/interpreter/tips.txi
@@ -205,17 +205,17 @@ Here is an example:
 ## subprocess, and PID is the process id of the subprocess,
 ## or -1 if COMMAND could not be executed.
 ##
 ## Example:
 ##
 ##  [in, out, pid] = popen2 ("sort", "-nr");
 ##  fputs (in, "these\nare\nsome\nstrings\n");
 ##  fclose (in);
-##  while (isstr (s = fgets (out)))
+##  while (ischar (s = fgets (out)))
 ##    fputs (stdout, s);
 ##  endwhile
 ##  fclose (out);
 @end example
 
 Octave uses the first block of comments in a function file that do not
 appear to be a copyright notice as the help text for the file.  For
 Octave to recognize the first comment block as a copyright notice, it
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -3,16 +3,23 @@ 2008-05-06  David Bateman  <dbateman@fre
 	* miscellaneous/symvar.m: New function.
 	* miscellaneous/Makefile.in (SOURCES): Add it to the list.
 
 2008-05-04  John W. Eaton  <jwe@octave.org>
 
 	* miscellaneous/dbstack.m: Delete.
 	* miscellaneous/Makefile.in (SOURCES): Remove it from the list.
 
+2008-05-03  Rafael Laboissiere <rafael@debian.org>
+
+	* linear-algebra/cond.m, miscellaneous/version.m,
+	miscellaneous/version.m, plot/feather.m, plot/__bar__.m,
+	plot/compass.m, plot/__quiver__.m, plot/__scatter__.m: Use ischar
+	instead of deprecated isstr.
+
 2008-05-01  David Bateman  <dbateman@free.fr>
 
 	* plot/plot.m: Remove documentation of 'L' option.
 	* plot/stairs.m: Allow axis handles, properties and linespecs to
 	be passed.
 
 2008-04-30  John W. Eaton  <jwe@octave.org>
 
diff --git a/scripts/linear-algebra/cond.m b/scripts/linear-algebra/cond.m
--- a/scripts/linear-algebra/cond.m
+++ b/scripts/linear-algebra/cond.m
@@ -35,17 +35,17 @@ function retval = cond (a, p)
     if (ndims (a) > 2)
       error ("cond: only valid on 2-D objects")
     endif
 
     if (nargin <2)
       p = 2;
     endif
 
-    if (! isstr (p) && p == 2)
+    if (! ischar (p) && p == 2)
       [nr, nc] = size (a);
       if (nr == 0 || nc == 0)
         retval = 0.0;
       elseif (any (any (isinf (a) | isnan (a))))
         error ("cond: argument must not contain Inf or NaN values");
       else
         sigma   = svd (a);
         sigma_1 = sigma(1);
diff --git a/scripts/miscellaneous/computer.m b/scripts/miscellaneous/computer.m
--- a/scripts/miscellaneous/computer.m
+++ b/scripts/miscellaneous/computer.m
@@ -68,13 +68,13 @@ function [c, maxsize, endian] = computer
       endian = "L";
     else
       endian = "?";
     endif      
   endif
 
 endfunction
 
-%!assert((isstr (computer ())
+%!assert((ischar (computer ())
 %! && computer () == octave_config_info ("canonical_host_type")));
 
 %!warning a =computer(2);
 
diff --git a/scripts/miscellaneous/version.m b/scripts/miscellaneous/version.m
--- a/scripts/miscellaneous/version.m
+++ b/scripts/miscellaneous/version.m
@@ -29,12 +29,12 @@ function vs = version ()
   if (nargin != 0)
     warning ("version: ignoring extra arguments");
   endif
 
   vs = OCTAVE_VERSION;
 
 endfunction
 
-%!assert(isstr (version ()) && strcmp (version (), OCTAVE_VERSION));
+%!assert(ischar (version ()) && strcmp (version (), OCTAVE_VERSION));
 
 %!warning version (1);
 
diff --git a/scripts/plot/__bar__.m b/scripts/plot/__bar__.m
--- a/scripts/plot/__bar__.m
+++ b/scripts/plot/__bar__.m
@@ -62,38 +62,38 @@ function varargout = __bar__ (vertical, 
     endif
     x = [1:size(y,1)]';
     idx = 2;
   endif
       
   newargs = {};
   have_line_spec = false;
   while (idx <= nargin - 2)
-    if (isstr (varargin{idx}) && strcmp (varargin{idx}, "grouped"))
+    if (ischar (varargin{idx}) && strcmp (varargin{idx}, "grouped"))
       group = true;
       idx++;
-    elseif (isstr (varargin{idx}) && strcmp (varargin{idx}, "stacked"))
+    elseif (ischar (varargin{idx}) && strcmp (varargin{idx}, "stacked"))
       group = false;
       idx++;
     else
-      if ((isstr (varargin{idx}) || iscell (varargin{idx}))
+      if ((ischar (varargin{idx}) || iscell (varargin{idx}))
 	  && ! have_line_spec)
 	[linespec, valid] = __pltopt__ (func, varargin{idx}, false);
 	if (valid)
 	  have_line_spec = true;
 	  newargs = [{linespec.color}, newargs];
 	  idx++;
 	  continue;
 	endif
       endif
       if (isscalar(varargin{idx}))
 	width = varargin{idx++};
       elseif (idx == nargin - 2)
 	newargs = [newargs,varargin(idx++)];
-      elseif (isstr (varargin{idx}) && strcmp (tolower (varargin{idx}), "basevalue") &&
+      elseif (ischar (varargin{idx}) && strcmp (tolower (varargin{idx}), "basevalue") &&
           isscalar (varargin{idx+1}))
         bv = varargin{idx+1};
         idx += 2;
       else
 	newargs = [newargs,varargin(idx:idx+1)];
 	idx += 2;
       endif
     endif
diff --git a/scripts/plot/__quiver__.m b/scripts/plot/__quiver__.m
--- a/scripts/plot/__quiver__.m
+++ b/scripts/plot/__quiver__.m
@@ -74,17 +74,17 @@ function hlist = __quiver__ (varargin)
   endif
 
   have_filled = false;
   have_line_spec = false;
   while (ioff <= nargin)
     arg = varargin{ioff++};
     if (ischar (arg) && strncmp (tolower (arg), "filled", 6))
       have_filled = true;
-    elseif ((isstr (arg) || iscell (arg))
+    elseif ((ischar (arg) || iscell (arg))
 	    && ! have_line_spec)
       [linespec, valid] = __pltopt__ ("quiver", arg, false);
       if (valid)
 	have_line_spec = true;
 	if (strncmp (linespec.linestyle, "none", 4))
 	  linespec.linestyle = "-";
 	endif
       else
diff --git a/scripts/plot/__scatter__.m b/scripts/plot/__scatter__.m
--- a/scripts/plot/__scatter__.m
+++ b/scripts/plot/__scatter__.m
@@ -74,17 +74,17 @@ function h = __scatter__ (varargin)
   filled = false;
   have_marker = false;
   marker = "o";
   iarg = firstnonnumeric;
   while (iarg <= nargin)
     arg = varargin{iarg++};
     if (ischar (arg) && strncmp (tolower (arg), "filled", 6))
       filled = true;
-    elseif ((isstr (arg) || iscell (arg)) && ! have_marker)
+    elseif ((ischar (arg) || iscell (arg)) && ! have_marker)
       [linespec, valid] = __pltopt__ ("scatter", arg, false);
       if (valid)
 	have_marker = true;
 	marker = linespec.marker;
 	if (strncmp (marker, "none", 4))
 	  marker = "o";
 	endif
       else
diff --git a/scripts/plot/compass.m b/scripts/plot/compass.m
--- a/scripts/plot/compass.m
+++ b/scripts/plot/compass.m
@@ -66,17 +66,17 @@ function retval = compass (varargin)
     ioff = 3;
     u = varargin {1} (:) .';
     v = varargin {2} (:) .';
   endif
 
   line_spec = "b-";
   while (ioff <= nargin)
     arg = varargin{ioff++};
-    if ((isstr (arg) || iscell (arg)) && ! have_line_spec)
+    if ((ischar (arg) || iscell (arg)) && ! have_line_spec)
       [linespec, valid] = __pltopt__ ("compass", arg, false);
       if (valid)
 	line_spec = arg;
 	break;
       else
 	error ("compass: invalid linespec");
       endif
     else
diff --git a/scripts/plot/feather.m b/scripts/plot/feather.m
--- a/scripts/plot/feather.m
+++ b/scripts/plot/feather.m
@@ -66,17 +66,17 @@ function retval = feather (varargin)
     ioff = 3;
     u = varargin {1} (:) .';
     v = varargin {2} (:) .';
   endif
 
   line_spec = "b-";
   while (ioff <= nargin)
     arg = varargin{ioff++};
-    if ((isstr (arg) || iscell (arg)) && ! have_line_spec)
+    if ((ischar (arg) || iscell (arg)) && ! have_line_spec)
       [linespec, valid] = __pltopt__ ("feather", arg, false);
       if (valid)
 	line_spec = arg;
 	break;
       else
 	error ("feather: invalid linespec");
       endif
     else
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -343,16 +343,21 @@ 2008-05-01  John W. Eaton  <jwe@octave.o
 	(octave_shlib_list::iterator, octave_shlib_list::const_iterator):
 	New typedefs.
 	(octave_shlib_list::do_remove, octave_shlib_list::do_search,
 	octave_shlib_list::do_display): Use them.
 	(octave_mex_file_list::iterator, octave_mex_file_list::const_iterator):
 	New typedefs.
 	(octave_mex_file_list::do_remove): Use them.
 
+2008-05-03  Rafael Laboissiere <rafael@debian.org>
+
+	* DLD-FUNCTIONS/time.cc, file_io.cc: Use ischar instead of
+	deprecated isstr.
+
 2008-04-30  John W. Eaton  <jwe@octave.org>
 
 	* dynamic-ld.cc (octave_dynamic_loader::do_load_oct):
 	If function already exists, reload it anyway.  Clear existing
 	oct_file only if reloading a function from the same file.
 	(octave_shlib_list::display): New static function.
 	(octave_shlib_list::do_display): New function.
 
diff --git a/src/DLD-FUNCTIONS/time.cc b/src/DLD-FUNCTIONS/time.cc
--- a/src/DLD-FUNCTIONS/time.cc
+++ b/src/DLD-FUNCTIONS/time.cc
@@ -462,21 +462,21 @@ Year (1970-).\n\
   else
     print_usage ();
 
   return retval;
 }
 
 /*
 
-%!assert((isstr (strftime ("%%%n%t%H%I%k%l", localtime (time ())))
-%! && isstr (strftime ("%M%p%r%R%s%S%T", localtime (time ())))
-%! && isstr (strftime ("%X%Z%z%a%A%b%B", localtime (time ())))
-%! && isstr (strftime ("%c%C%d%e%D%h%j", localtime (time ())))
-%! && isstr (strftime ("%m%U%w%W%x%y%Y", localtime (time ())))));
+%!assert((ischar (strftime ("%%%n%t%H%I%k%l", localtime (time ())))
+%! && ischar (strftime ("%M%p%r%R%s%S%T", localtime (time ())))
+%! && ischar (strftime ("%X%Z%z%a%A%b%B", localtime (time ())))
+%! && ischar (strftime ("%c%C%d%e%D%h%j", localtime (time ())))
+%! && ischar (strftime ("%m%U%w%W%x%y%Y", localtime (time ())))));
 
 %!error <Invalid call to strftime.*> strftime ();
 
 %!error <Invalid call to strftime.*> strftime ("foo", localtime (time ()), 1);
 
 */
 
 DEFUN_DLD (strptime, args, ,
diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -1729,17 +1729,17 @@ The pipe will be connected to the standa
 open for writing.\n\
 @end table\n\
 \n\
 For example,\n\
 \n\
 @example\n\
 @group\n\
 fid = popen (\"ls -ltr / | tail -3\", \"r\");\n\
-while (isstr (s = fgets (fid)))\n\
+while (ischar (s = fgets (fid)))\n\
   fputs (stdout, s);\n\
 endwhile\n\
      @print{} drwxr-xr-x  33 root  root  3072 Feb 15 13:28 etc\n\
      @print{} drwxr-xr-x   3 root  root  1024 Feb 15 13:28 lib\n\
      @print{} drwxrwxrwt  15 root  root  2048 Feb 17 14:53 tmp\n\
 @end group\n\
 @end example\n\
 @end deftypefn")
diff --git a/test/ChangeLog b/test/ChangeLog
--- a/test/ChangeLog
+++ b/test/ChangeLog
@@ -1,13 +1,17 @@
 2008-05-06  John W. Eaton  <jwe@octave.org>
 
 	* fntests.m: Use puts instead of printf where appropriate.
 	Fix missing newline in message.
 
+2008-05-03  Rafael Laboissiere <rafael@debian.org>
+
+	* test_io.m, test_system.m: Use ischar instead of deprecated isstr.
+
 2008-03-26  David Bateman  <dbateman@free.fr>
 
 	* test_index-wfi-f.m: Split large block of tests.  New tests.
 
 2008-03-26  John W. Eaton  <jwe@octave.org>
 
 	* fntests.m (report_files_with_no_tests): New function.
 	Use it to report number of .m and .cc files without tests separately.
diff --git a/test/test_io.m b/test/test_io.m
--- a/test/test_io.m
+++ b/test/test_io.m
@@ -235,18 +235,18 @@
 
 %% test/octave.test/io/sscanf-1.m
 %!test
 %! [a, b, c] = sscanf ("1.2 3 foo", "%f%d%s", "C");
 %! [v1, c1, m1] = sscanf ("1 2 3 4 5 6", "%d");
 %! [v2, c2, m2] = sscanf ("1 2 bar 3 4 5 6", "%d");
 %! 
 %! assert((a == 1.2 && b == 3 && c == "foo"
-%! && v1 == [1; 2; 3; 4; 5; 6] && c1 == 6 && isstr (m1)
-%! && v2 == [1; 2] && c2 == 2 && isstr (m2)));
+%! && v1 == [1; 2; 3; 4; 5; 6] && c1 == 6 && ischar (m1)
+%! && v2 == [1; 2] && c2 == 2 && ischar (m2)));
 
 %% test/octave.test/io/sscanf-2.m
 %!error <Invalid call to sscanf.*> sscanf ();
 
 %% test/octave.test/io/sscanf-3.m
 %!error sscanf (1, 2);
 
 %% test/octave.test/io/sscanf-4.m
@@ -276,17 +276,17 @@
 
 %% test/octave.test/io/printf-3.m
 %!error <Invalid call to printf.*> printf ();
 
 %% test/octave.test/io/sprintf-1.m
 %!test
 %! [s, msg, status] = sprintf ("%s: %d\n", "test", 1);
 %! 
-%! assert(s == "test: 1\n" && isstr (msg) && status == 8);
+%! assert(s == "test: 1\n" && ischar (msg) && status == 8);
 
 %% test/octave.test/io/sprintf-2.m
 %!error sprintf (1);
 
 %% test/octave.test/io/sprintf-3.m
 %!error <Invalid call to sprintf.*> sprintf ();
 
 %% test/octave.test/io/fopen-1.m
@@ -365,17 +365,17 @@
 
 %% test/octave.test/io/fclose-1.m
 %!error fclose (0);
 
 %% test/octave.test/io/fclose-2.m
 %!error <Invalid call to fclose.*> fclose (1, 2);
 
 %% test/octave.test/io/tmpnam-1.m
-%!assert(isstr (tmpnam ()));
+%!assert(ischar (tmpnam ()));
 
 %% test/octave.test/io/tmpnam-2.m
 %!warning tmpnam (1);
 
 %% test/octave.test/io/tmpnam-3.m
 %!warning tmpnam ("foo", 1);
 
 %% test/octave.test/io/tmpnam-4.m
diff --git a/test/test_system.m b/test/test_system.m
--- a/test/test_system.m
+++ b/test/test_system.m
@@ -180,17 +180,17 @@
 %! && struct_contains (s, "modestr")
 %! && struct_contains (s, "nlink")
 %! && struct_contains (s, "uid")
 %! && struct_contains (s, "gid")
 %! && struct_contains (s, "size")
 %! && struct_contains (s, "atime")
 %! && struct_contains (s, "mtime")
 %! && struct_contains (s, "ctime")
-%! && isstr (msg)));
+%! && ischar (msg)));
 
 %% test/octave.test/system/stat-2.m
 %!error <Invalid call to stat.*> stat ();
 
 %% test/octave.test/system/stat-3.m
 %!error <Invalid call to stat.*> stat ("foo", 1);
 
 %% test/octave.test/system/lstat-1.m
@@ -203,17 +203,17 @@
 %! && struct_contains (s, "modestr")
 %! && struct_contains (s, "nlink")
 %! && struct_contains (s, "uid")
 %! && struct_contains (s, "gid")
 %! && struct_contains (s, "size")
 %! && struct_contains (s, "atime")
 %! && struct_contains (s, "mtime")
 %! && struct_contains (s, "ctime")
-%! && isstr (msg)));
+%! && ischar (msg)));
 
 %% test/octave.test/system/lstat-2.m
 %!error <Invalid call to lstat.*> lstat ();
 
 %% test/octave.test/system/lstat-3.m
 %!error <Invalid call to lstat.*> lstat ("foo", 1);
 
 %% test/octave.test/system/glob-1.m
@@ -236,17 +236,17 @@
 
 %% test/octave.test/system/fnmatch-2.m
 %!error <Invalid call to fnmatch.*> fnmatch ();
 
 %% test/octave.test/system/fnmatch-3.m
 %!error <Invalid call to fnmatch.*> fnmatch ("foo", "bar", 3);
 
 %% test/octave.test/system/file_in_path-1.m
-%!assert(isstr (file_in_path (path (), "date.m")));
+%!assert(ischar (file_in_path (path (), "date.m")));
 
 %% test/octave.test/system/file_in_path-2.m
 %!error <invalid option> file_in_path ("foo", "bar", 1);
 
 %% test/octave.test/system/file_in_path-3.m
 %!error <Invalid call to file_in_path.*> file_in_path ();
 
 %% test/octave.test/system/file_in_path-4.m
@@ -358,17 +358,17 @@
 %!   assert("/", d1);
 %! endif
 %! assert(pwd(), xdir);
 
 %% test/octave.test/system/cd-2.m
 %!error cd (1);
 
 %% test/octave.test/system/pwd-1.m
-%!assert(isstr (pwd ()));
+%!assert(ischar (pwd ()));
 
 %% test/octave.test/system/getpwent-1.m
 %!testif HAVE_GETPWENT
 %! s = getpwent ();
 %! endpwent (); 
 %! assert((isstruct (s)
 %! && struct_contains (s, "name")
 %! && struct_contains (s, "passwd")
