# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1338755920 18000
#      Sun Jun 03 15:38:40 2012 -0500
# Node ID 1f914446157d32d260828df50abb72f7f7cd6562
# Parent  3b067a247c1d23673d8ab7c2eeafef25d20196b8
Locate and link with LLVM properly

* build-aux/common.mk: Add LLVM flags.

* configure.ac: Add llvm-config option, use llvm-config more correctly,
fix compile check, and add jit-debug option.

* src/pt-eval.cc: Check HAVE_LLVM.
* src/pt-jit.h: Check HAVE_LLVM.

* src/pt-jit.cc: Check HAVE_LLVM and OCTAVE_JIT_DEBUG.

diff --git a/build-aux/common.mk b/build-aux/common.mk
--- a/build-aux/common.mk
+++ b/build-aux/common.mk
@@ -176,16 +176,20 @@ FT2_LIBS = @FT2_LIBS@
 HDF5_CPPFLAGS = @HDF5_CPPFLAGS@
 HDF5_LDFLAGS = @HDF5_LDFLAGS@
 HDF5_LIBS = @HDF5_LIBS@
 
 Z_CPPFLAGS = @Z_CPPFLAGS@
 Z_LDFLAGS = @Z_LDFLAGS@
 Z_LIBS = @Z_LIBS@
 
+LLVM_CPPFLAGS = @LLVM_CPPFLAGS@
+LLVM_LDFLAGS = @LLVM_LDFLAGS@
+LLVM_LIBS = @LLVM_LIBS@
+
 GRAPHICS_LIBS = @GRAPHICS_LIBS@
 
 QHULL_CPPFLAGS = @QHULL_CPPFLAGS@
 QHULL_LDFLAGS = @QHULL_LDFLAGS@
 QHULL_LIBS = @QHULL_LIBS@
 
 REGEX_LIBS = @REGEX_LIBS@
 
@@ -247,17 +251,17 @@ TERM_LIBS = @TERM_LIBS@
 
 ARPACK_CPPFLAGS = @ARPACK_CPPFLAGS@
 ARPACK_LDFLAGS = @ARPACK_LDFLAGS@
 ARPACK_LIBS = @ARPACK_LIBS@
 
 DL_LIBS = @DL_LIBS@
 LIBS = @LIBS@
 
-ALL_CPPFLAGS = $(CPPFLAGS) $(HDF5_CPPFLAGS) $(Z_CPPFLAGS)
+ALL_CPPFLAGS = $(CPPFLAGS) $(HDF5_CPPFLAGS) $(Z_CPPFLAGS) $(LLVM_CPPFLAGS)
 
 SPARSE_XCPPFLAGS = \
   $(CHOLMOD_CPPFLAGS) $(UMFPACK_CPPFLAGS) \
   $(AMD_CPPFLAGS) $(CAMD_CPPFLAGS) $(COLAMD_CPPFLAGS) \
   $(CCOLAMD_CPPFLAGS) $(CXSPARSE_CPPFLAGS)
 
 SPARSE_XLDFLAGS = \
   $(CHOLMOD_LDFLAGS) $(UMFPACK_LDFLAGS) \
diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -713,58 +713,81 @@ OCTAVE_CHECK_LIBRARY(z, ZLIB,
   [zlib.h], [gzclearerr])
 
 ### Check for the llvm library
 dnl
 dnl
 dnl llvm is odd and has its own pkg-config like script. We should probably check
 dnl for existance and 
 dnl
+warn_llvm="LLVM library fails tests. JIT compilation will be disabled."
 
-LLVM_CONFIG=llvm-config
+AC_ARG_VAR(LLVM_CONFIG, [path to llvm-config utility])
+if test "x$ac_cv_env_LLVM_CONFIG_set" != "xset"; then
+   AC_PATH_TOOL([LLVM_CONFIG], [llvm-config])
+fi
+
+AC_ARG_ENABLE([jit-debug],
+  AS_HELP_STRING([--enable-jit-debug], [Enable debug printing of jit IRs]))
+
+AS_IF([test "x$enable_jit_debug" = "xyes"], [
+  AC_DEFINE(OCTAVE_JIT_DEBUG, 1, [Define for jit debug printing])
+])
+
 LLVM_CPPFLAGS=
 LLVM_LDFLAGS=
 LLVM_LIBS=
 
-LLVM_LDFLAGS=`$LLVM_CONFIG --ldflags`
-LLVM_LIBS=`$LLVM_CONFIG --libs`
-LLVM_CPPFLAGS=`$LLVM_CONFIG --cxxflags`
-
-warn_llvm="LLVM library fails tests. JIT compilation will be disabled."
+dnl llvm-config is messed up
+if  test -n "$LLVM_CONFIG"; then
+  LLVM_LDFLAGS="-L`$LLVM_CONFIG --libdir`"
+  LLVM_LIBS=`$LLVM_CONFIG --libs`
+  dnl Use -isystem so we don't get warnings from llvm headers
+  LLVM_CPPFLAGS="-isystem `$LLVM_CONFIG --includedir`"
+fi
 
 save_CPPFLAGS="$CPPFLAGS"
 save_LIBS="$LIBS"
 save_LDFLAGS="$LDFLAGS"
-CPPFLAGS="$LLVM_CPPFLAGS $CPPFLAGS"
+dnl
+dnl We define some extra flags that llvm requires in order to include headers.
+dnl Idealy we should get these from llvm-config, but llvm-config isn't very
+dnl helpful.
+dnl
+CPPFLAGS="-D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS $LLVM_CPPFLAGS $CPPFLAGS"
 LIBS="$LLVM_LIBS $LIBS"
 LDFLAGS="$LLVM_LDFLAGS $LDFLAGS"
+
 AC_LANG_PUSH(C++)
   AC_CHECK_HEADER([llvm/LLVMContext.h], [
-  AC_MSG_CHECKING([for llvm::getGlobalContext in llvm/LLVMContext.h])
-    AC_TRY_LINK([#include <llvm/LLVMContext.h>], [llvm::getGlobalContext ()], [
-      AC_MSG_RESULT(yes)
-      warn_llvm=
-    ], [
-      AC_MSG_RESULT(no)
+    AC_MSG_CHECKING([for llvm::getGlobalContext in llvm/LLVMContext.h])
+      AC_COMPILE_IFELSE(
+        [AC_LANG_PROGRAM([[#include <llvm/LLVMContext.h>]],
+                         [[llvm::LLVMContext& ctx = llvm::getGlobalContext ();]])],
+        [
+         AC_MSG_RESULT([yes])
+         warn_llvm=
+         XTRA_CXXFLAGS="$XTRA_CXXFLAGS $LLVM_CPPFLAGS"
+        ],
+        [AC_MSG_RESULT([no])
     ])
   ])
 AC_LANG_POP(C++)
 CPPFLAGS="$save_CPPFLAGS"
 LIBS="$save_LIBS"
 LDFLAGS="$save_LDFLAGS"
 
 if test -z "$warn_llvm"; then
-  AC_DEFINE(HAVE_LLVM, 1, [Define if LLVM is available.])
+  AC_DEFINE(HAVE_LLVM, 1, [Define if LLVM is available])
 else
   LLVM_CPPFLAGS=
   LLVM_LDFLAGS=
   LLVM_LIBS=
   AC_MSG_WARN([$warn_llvm])
 fi
-AC_DEFINE(HAVE_LLVM, 1, [Define if LLVM is available.])
 
 AC_SUBST(LLVM_CPPFLAGS)
 AC_SUBST(LLVM_LDFLAGS)
 AC_SUBST(LLVM_LIBS)
 
 ### Check for HDF5 library.
 
 save_CPPFLAGS="$CPPFLAGS"
diff --git a/src/pt-eval.cc b/src/pt-eval.cc
--- a/src/pt-eval.cc
+++ b/src/pt-eval.cc
@@ -39,19 +39,21 @@ along with Octave; see the file COPYING.
 #include "ov-fcn-handle.h"
 #include "ov-usr-fcn.h"
 #include "variables.h"
 #include "pt-all.h"
 #include "pt-eval.h"
 #include "symtab.h"
 #include "unwind-prot.h"
 
+#if HAVE_LLVM
 //FIXME: This should be part of tree_evaluator
 #include "pt-jit.h"
 static tree_jit jiter;
+#endif
 
 static tree_evaluator std_evaluator;
 
 tree_evaluator *current_evaluator = &std_evaluator;
 
 int tree_evaluator::dbstep_flag = 0;
 
 size_t tree_evaluator::current_frame = 0;
@@ -289,18 +291,20 @@ void
 tree_evaluator::visit_simple_for_command (tree_simple_for_command& cmd)
 {
   if (error_state)
     return;
 
   if (debug_mode)
     do_breakpoint (cmd.is_breakpoint ());
 
+#if HAVE_LLVM
   if (jiter.execute (cmd))
     return;
+#endif
 
   // FIXME -- need to handle PARFOR loops here using cmd.in_parallel ()
   // and cmd.maxproc_expr ();
 
   unwind_protect frame;
 
   frame.protect_var (in_loop_command);
 
diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -22,16 +22,18 @@ along with Octave; see the file COPYING.
 
 #define __STDC_LIMIT_MACROS
 #define __STDC_CONSTANT_MACROS
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
+#ifdef HAVE_LLVM
+
 #include "pt-jit.h"
 
 #include <typeinfo>
 
 #include <llvm/LLVMContext.h>
 #include <llvm/Module.h>
 #include <llvm/Function.h>
 #include <llvm/BasicBlock.h>
@@ -49,20 +51,16 @@ along with Octave; see the file COPYING.
 #include <llvm/Support/raw_os_ostream.h>
 
 #include "octave.h"
 #include "ov-fcn-handle.h"
 #include "ov-usr-fcn.h"
 #include "ov-scalar.h"
 #include "pt-all.h"
 
-// FIXME: Remove eventually
-// For now we leave this in so people tell when JIT actually happens
-static const bool debug_print = false;
-
 static llvm::IRBuilder<> builder (llvm::getGlobalContext ());
 
 static llvm::LLVMContext& context = llvm::getGlobalContext ();
 
 jit_typeinfo *jit_typeinfo::instance;
 
 // thrown when we should give up on JIT and interpret
 class jit_fail_exception : public std::runtime_error
@@ -79,21 +77,29 @@ private:
 };
 
 static void
 fail (void)
 {
   throw jit_fail_exception ();
 }
 
+#ifdef OCTAVE_JIT_DEBUG
 static void
 fail (const std::string& reason)
 {
   throw jit_fail_exception (reason);
 }
+#else
+static void
+fail (const std::string&)
+{
+  throw jit_fail_exception ();
+}
+#endif // OCTAVE_JIT_DEBUG
 
 std::ostream& jit_print (std::ostream& os, jit_type *atype)
 {
   if (! atype)
     return os << "null";
   return os << atype->name ();
 }
 
@@ -1071,56 +1077,55 @@ jit_convert::jit_convert (llvm::Module *
 
   construct_ssa (final_block);
 
   // initialize the worklist to instructions derived from constants
   for (std::list<jit_value *>::iterator iter = constants.begin ();
        iter != constants.end (); ++iter)
     append_users (*iter);
 
-  if (debug_print)
-      print_blocks ("octave jit ir");
+#ifdef OCTAVE_JIT_DEBUG
+  print_blocks ("octave jit ir");
+#endif
 
   // FIXME: Describe algorithm here
   while (worklist.size ())
     {
       jit_instruction *next = worklist.front ();
       worklist.pop_front ();
 
       if (next->infer ())
         append_users (next);
     }
 
-  if (debug_print)
-    {
-      std::cout << "-------------------- Compiling tree --------------------\n";
-      std::cout << tee.str_print_code () << std::endl;
-      print_blocks ("octave jit ir");
-    }
+#ifdef OCTAVE_JIT_DEBUG
+  std::cout << "-------------------- Compiling tree --------------------\n";
+  std::cout << tee.str_print_code () << std::endl;
+  print_blocks ("octave jit ir");
+#endif
 
   // for now just init arguments from entry, later we will have to do something
   // more interesting
   for (jit_block::iterator iter = entry_block->begin ();
        iter != entry_block->end (); ++iter)
     {
       if (jit_extract_argument *extract = dynamic_cast<jit_extract_argument *> (*iter))
         arguments.push_back (std::make_pair (extract->name (), true));
     }
 
   convert_llvm to_llvm;
   function = to_llvm.convert (module, arguments, blocks);
 
-  if (debug_print)
-    {
-      std::cout << "-------------------- llvm ir --------------------";
-      llvm::raw_os_ostream llvm_cout (std::cout);
-      function->print (llvm_cout);
-      std::cout << std::endl;
-      llvm::verifyFunction (*function);
-    }
+#ifdef OCTAVE_JIT_DEBUG
+  std::cout << "-------------------- llvm ir --------------------";
+  llvm::raw_os_ostream llvm_cout (std::cout);
+  function->print (llvm_cout);
+  std::cout << std::endl;
+  llvm::verifyFunction (*function);
+#endif
 }
 
 jit_convert::~jit_convert (void)
 {
   for (std::list<jit_value *>::iterator iter = all_values.begin ();
        iter != all_values.end (); ++iter)
     delete *iter;
 }
@@ -2061,35 +2066,36 @@ jit_info::jit_info (tree_jit& tjit, tree
     {
       jit_convert conv (tjit.get_module (), tee);
       fun = conv.get_function ();
       arguments = conv.get_arguments ();
       bounds = conv.get_bounds ();
     }
   catch (const jit_fail_exception& e)
     {
-      if (debug_print && e.known ())
+#ifdef OCTAVE_JIT_DEBUG
+      if (e.known ())
         std::cout << "jit fail: " << e.what () << std::endl;
+#endif
     }
 
   if (! fun)
     {
       function = 0;
       return;
     }
 
   tjit.optimize (fun);
 
-  if (debug_print)
-    {
-      std::cout << "-------------------- optimized llvm ir --------------------\n";
-      llvm::raw_os_ostream llvm_cout (std::cout);
-      fun->print (llvm_cout);
-      std::cout << std::endl;
-    }
+#ifdef OCTAVE_JIT_DEBUG
+  std::cout << "-------------------- optimized llvm ir --------------------\n";
+  llvm::raw_os_ostream llvm_cout (std::cout);
+  fun->print (llvm_cout);
+  std::cout << std::endl;
+#endif
 
   function = reinterpret_cast<jited_function>(engine->getPointerToFunction (fun));
 }
 
 bool
 jit_info::execute (void) const
 {
   if (! function)
@@ -2129,8 +2135,9 @@ jit_info::match (void) const
 
       // FIXME: Check for a parent relationship
       if (type != bounds[i].first)
         return false;
     }
 
   return true;
 }
+#endif
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -18,16 +18,18 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #if !defined (octave_tree_jit_h)
 #define octave_tree_jit_h 1
 
+#ifdef HAVE_LLVM
+
 #include <list>
 #include <map>
 #include <set>
 #include <stdexcept>
 #include <vector>
 #include <stack>
 
 #include "Array.h"
@@ -1704,10 +1706,10 @@ private:
   typedef void (*jited_function)(octave_base_value**);
 
   llvm::ExecutionEngine *engine;
   jited_function function;
 
   std::vector<std::pair<std::string, bool> > arguments;
   type_bound_vector bounds;
 };
-
 #endif
+#endif
