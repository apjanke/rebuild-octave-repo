# HG changeset patch
# User jwe
# Date 1076694924 0
#      Fri Feb 13 17:55:24 2004 +0000
# Node ID 9f0ce153636804c4dc33bca67c5875378425b67f
# Parent  2be826ada7bb88359e50c00c7ea26efb4d16c05e
[project @ 2004-02-13 17:55:24 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2004-02-13  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* toplev.cc (main_loop): Call octave_parse, not yyparse.
+	* octave.cc (octave_main): Increment octave_debug, not yydebug.
+	* parse.y (%name-prefix): New directive, set to "octave_".
+	* parse.h: Provide declarations for octave_lex and octave_parse
+	instead of yylex and yyparse.
+	* lex.l (%option prefix): New directive, set to "_octave".
+	Define yylval to be octave_lval.
+	Move definitions of YY_INPUT, YY_FATAL_ERROR, TOK_RETURN,
+	TOK_PUSH_AND_RETURN, BIN_OP_RETURN, XBIN_OP_RETURN here.
+	* lex.h: From here.
+
 2004-02-07  Petter Risholm  <risholm@stud.ntnu.no>
 
 	* ov-struct.cc (Fcell2struct): New function.
 	(cell2struct_check_args, cell2struct_construct_idx): Likewise.
 
 2004-02-07  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-scalar.h (octave_scalar::empty_clone):
diff --git a/src/lex.h b/src/lex.h
--- a/src/lex.h
+++ b/src/lex.h
@@ -18,84 +18,17 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_lex_h)
 #define octave_lex_h 1
 
-// Arrange to get input via readline.
-
-#ifdef YY_INPUT
-#undef YY_INPUT
-#endif
-#define YY_INPUT(buf, result, max_size) \
-  if ((result = octave_read (buf, max_size)) < 0) \
-    YY_FATAL_ERROR ("octave_read () in flex scanner failed");
-
-// Try to avoid crashing out completely on fatal scanner errors.
-// The call to yy_fatal_error should never happen, but it avoids a
-// `static function defined but not used' warning from gcc.
-
-#ifdef YY_FATAL_ERROR
-#undef YY_FATAL_ERROR
-#endif
-#define YY_FATAL_ERROR(msg) \
-  do \
-    { \
-      error (msg); \
-      OCTAVE_QUIT; \
-      yy_fatal_error (msg); \
-    } \
-  while (0)
-
-#define TOK_RETURN(tok) \
-  do \
-    { \
-      current_input_column += yyleng; \
-      lexer_flags.quote_is_transpose = false; \
-      lexer_flags.cant_be_identifier = false; \
-      lexer_flags.convert_spaces_to_comma = true; \
-      return (tok); \
-    } \
-  while (0)
-
-#define TOK_PUSH_AND_RETURN(name, tok) \
-  do \
-    { \
-      yylval.tok_val = new token (name, input_line_number, \
-				  current_input_column); \
-      token_stack.push (yylval.tok_val); \
-      TOK_RETURN (tok); \
-    } \
-  while (0)
-
-#define BIN_OP_RETURN(tok, convert) \
-  do \
-    { \
-      yylval.tok_val = new token (input_line_number, current_input_column); \
-      token_stack.push (yylval.tok_val); \
-      current_input_column += yyleng; \
-      lexer_flags.quote_is_transpose = false; \
-      lexer_flags.cant_be_identifier = true; \
-      lexer_flags.convert_spaces_to_comma = convert; \
-      return (tok); \
-    } \
-  while (0)
-
-#define XBIN_OP_RETURN(tok, convert) \
-  do \
-    { \
-	gripe_matlab_incompatible_operator (yytext); \
-        BIN_OP_RETURN (tok, convert); \
-    } \
-  while (0)
-
-// XXX FIXME XXX -- these input buffer things should be members of an
+// XXX FIXME XXX -- these input buffer things should be members of a
 // parser input stream class.
 
 typedef struct yy_buffer_state *YY_BUFFER_STATE;
 
 // Associate a buffer with a new file to read.
 extern YY_BUFFER_STATE create_buffer (FILE *f);
 
 // Report the current buffer.
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -15,16 +15,18 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with GNU CC; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
+%option prefix = "octave_"
+
 %s COMMAND_START
 %s MATRIX_START
 
 %x NESTED_FUNCTION_END
 %x NESTED_FUNCTION_BEGIN
 
 %{
 #ifdef HAVE_CONFIG_H
@@ -72,16 +74,85 @@ Software Foundation, 59 Temple Place - S
 #include <oct-gperf.h>
 
 #if ! (defined (FLEX_SCANNER) \
        && defined (YY_FLEX_MAJOR_VERSION) && YY_FLEX_MAJOR_VERSION >= 2 \
        && defined (YY_FLEX_MINOR_VERSION) && YY_FLEX_MINOR_VERSION >= 5)
 #error lex.l requires flex version 2.5.4 or later
 #endif
 
+#define yylval octave_lval
+
+// Arrange to get input via readline.
+
+#ifdef YY_INPUT
+#undef YY_INPUT
+#endif
+#define YY_INPUT(buf, result, max_size) \
+  if ((result = octave_read (buf, max_size)) < 0) \
+    YY_FATAL_ERROR ("octave_read () in flex scanner failed");
+
+// Try to avoid crashing out completely on fatal scanner errors.
+// The call to yy_fatal_error should never happen, but it avoids a
+// `static function defined but not used' warning from gcc.
+
+#ifdef YY_FATAL_ERROR
+#undef YY_FATAL_ERROR
+#endif
+#define YY_FATAL_ERROR(msg) \
+  do \
+    { \
+      error (msg); \
+      OCTAVE_QUIT; \
+      yy_fatal_error (msg); \
+    } \
+  while (0)
+
+#define TOK_RETURN(tok) \
+  do \
+    { \
+      current_input_column += yyleng; \
+      lexer_flags.quote_is_transpose = false; \
+      lexer_flags.cant_be_identifier = false; \
+      lexer_flags.convert_spaces_to_comma = true; \
+      return (tok); \
+    } \
+  while (0)
+
+#define TOK_PUSH_AND_RETURN(name, tok) \
+  do \
+    { \
+      yylval.tok_val = new token (name, input_line_number, \
+				  current_input_column); \
+      token_stack.push (yylval.tok_val); \
+      TOK_RETURN (tok); \
+    } \
+  while (0)
+
+#define BIN_OP_RETURN(tok, convert) \
+  do \
+    { \
+      yylval.tok_val = new token (input_line_number, current_input_column); \
+      token_stack.push (yylval.tok_val); \
+      current_input_column += yyleng; \
+      lexer_flags.quote_is_transpose = false; \
+      lexer_flags.cant_be_identifier = true; \
+      lexer_flags.convert_spaces_to_comma = convert; \
+      return (tok); \
+    } \
+  while (0)
+
+#define XBIN_OP_RETURN(tok, convert) \
+  do \
+    { \
+	gripe_matlab_incompatible_operator (yytext); \
+        BIN_OP_RETURN (tok, convert); \
+    } \
+  while (0)
+
 // TRUE means that we have encountered EOF on the input stream.
 bool parser_end_of_input = false;
 
 // Flags that need to be shared between the lexer and parser.
 lexical_feedback lexer_flags;
 
 // Stack to hold tokens so that we can delete them when the parser is
 // reset and avoid growing forever just because we are stashing some
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -408,17 +408,18 @@ octave_main (int argc, char **argv, int 
 	  bind_builtin_variable ("saving_history", false);
 	  break;
 
 	case 'V':
 	  verbose_flag = true;
 	  break;
 
 	case 'd':
-	  yydebug++;
+	  // This is the same as yydebug in parse.y.
+	  octave_debug++;
 	  break;
 
 	case 'f':
 	  read_init_files = false;
 	  read_site_files = false;
 	  break;
 
 	case 'h':
diff --git a/src/parse.h b/src/parse.h
--- a/src/parse.h
+++ b/src/parse.h
@@ -25,33 +25,33 @@ Software Foundation, 59 Temple Place - S
 
 #include <cstdio>
 
 #include <string>
 
 #include <stack>
 
 extern void reset_parser (void);
-extern int yylex (void);
-extern int yyparse (void);
+extern int octave_lex (void);
+extern int octave_parse (void);
 
 class tree;
 class tree_matrix;
 class tree_identifier;
 class octaev_function;
 class symbol_record;
 class symbol_table;
 
 #include "oct-obj.h"
 
 // Temporary symbol table pointer used to cope with bogus function syntax.
 extern symbol_table *tmp_local_sym_tab;
 
 // Nonzero means print parser debugging info (-d).
-extern int yydebug;
+extern int octave_debug;
 
 // The current input line number.
 extern int input_line_number;
 
 // The column of the current token.
 extern int current_input_column;
 
 // Buffer for help text snagged from function files.
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -343,16 +343,18 @@ set_stmt_print_flag (tree_statement_list
 	YYABORT; \
     } \
   while (0)
 
 %}
 
 // Bison declarations.
 
+%name-prefix = "octave_"
+
 %union
 {
   // The type of the basic tokens returned by the lexer.
   token *tok_val;
 
   // Comment strings that we need to deal with mid-rule.
   octave_comment_list *comment_type;
 
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -144,17 +144,18 @@ main_loop (const std::string& fun_to_cal
       try
 	{
 	  curr_sym_tab = top_level_sym_tab;
 
 	  reset_error_handler ();
 
 	  reset_parser ();
 
-	  retval = yyparse ();
+	  // This is the same as yyparse in parse.y.
+	  retval = octave_parse ();
 
 	  if (retval == 0)
 	    {
 	      if (global_command)
 		{
 		  global_command->eval ();
 
 		  delete global_command;
