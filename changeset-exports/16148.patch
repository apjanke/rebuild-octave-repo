# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1362007310 18000
#      Wed Feb 27 18:21:50 2013 -0500
# Node ID 10abbc493f50f3881428a0cc5cb161893a8ee8ef
# Parent  ed8ce5da525f31001fbda40b4be72c7c96facff3
delete unnecessary X-> references inside class X member functions

* lex.ll (lexical_feedback::is_keyword_token,
lexical_feedback::handle_number, lexical_feedback::handle_string,
lexical_feedback::handle_superclass_identifier,
lexical_feedback::handle_meta_identifier,
lexical_feedback::handle_identifier): Call push_token directly rather
than through curr_lexer-> pointer.
(lexical_feedback::display_token): Call current_token directly rather
than through curr_lexer-> pointer.

diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -1807,17 +1807,17 @@ lexical_feedback::is_keyword_token (cons
 
         default:
           panic_impossible ();
         }
 
       if (! tok_val)
         tok_val = new token (l, c);
 
-      curr_lexer->push_token (tok_val);
+      push_token (tok_val);
 
       return kw->tok;
     }
 
   return 0;
 }
 
 bool
@@ -2499,18 +2499,18 @@ lexical_feedback::handle_number (void)
 
   assert (nread == 1);
 
   quote_is_transpose = true;
   convert_spaces_to_comma = true;
   looking_for_object_index = false;
   at_beginning_of_statement = false;
 
-  curr_lexer->push_token (new token (value, yytxt, input_line_number,
-                                     current_input_column));
+  push_token (new token (value, yytxt, input_line_number,
+                         current_input_column));
 
   current_input_column += flex_yyleng ();
 
   do_comma_insert_check ();
 }
 
 // We have seen a backslash and need to find out if it should be
 // treated as a continuation character.  If so, this eats it, up to
@@ -2714,17 +2714,17 @@ lexical_feedback::handle_string (char de
                   if (delim == '\'')
                     s = buf.str ();
                   else
                     s = do_string_escapes (buf.str ());
 
                   quote_is_transpose = true;
                   convert_spaces_to_comma = true;
 
-                  curr_lexer->push_token (new token (s, bos_line, bos_col));
+                  push_token (new token (s, bos_line, bos_col));
 
                   if (delim == '"')
                     gripe_matlab_incompatible ("\" used as string delimiter");
                   else if (delim == '\'')
                     gripe_single_quote_string ();
 
                   looking_for_object_index = true;
                   at_beginning_of_statement = false;
@@ -3227,21 +3227,20 @@ lexical_feedback::handle_superclass_iden
   int kw_token = (is_keyword_token (meth) || is_keyword_token (cls)
                   || is_keyword_token (pkg));
   if (kw_token)
     {
       error ("method, class and package names may not be keywords");
       return LEXICAL_ERROR;
     }
 
-  curr_lexer->push_token
-    (new token (meth.empty () ? 0 : &(symbol_table::insert (meth)),
-                cls.empty () ? 0 : &(symbol_table::insert (cls)),
-                pkg.empty () ? 0 : &(symbol_table::insert (pkg)),
-                input_line_number, current_input_column));
+  push_token (new token (meth.empty () ? 0 : &(symbol_table::insert (meth)),
+                         cls.empty () ? 0 : &(symbol_table::insert (cls)),
+                         pkg.empty () ? 0 : &(symbol_table::insert (pkg)),
+                         input_line_number, current_input_column));
 
   convert_spaces_to_comma = true;
   current_input_column += flex_yyleng ();
 
   return SUPERCLASSREF;
 }
 
 int
@@ -3262,20 +3261,19 @@ lexical_feedback::handle_meta_identifier
 
   int kw_token = is_keyword_token (cls) || is_keyword_token (pkg);
   if (kw_token)
     {
        error ("class and package names may not be keywords");
       return LEXICAL_ERROR;
     }
 
-  curr_lexer->push_token
-    (new token (cls.empty () ? 0 : &(symbol_table::insert (cls)),
-                pkg.empty () ? 0 : &(symbol_table::insert (pkg)),
-                input_line_number, current_input_column));
+  push_token (new token (cls.empty () ? 0 : &(symbol_table::insert (cls)),
+                         pkg.empty () ? 0 : &(symbol_table::insert (pkg)),
+                         input_line_number, current_input_column));
 
   convert_spaces_to_comma = true;
   current_input_column += flex_yyleng ();
 
   return METAQUERY;
 }
 
 // Figure out exactly what kind of token to return when we have seen
@@ -3303,18 +3301,18 @@ lexical_feedback::handle_identifier (voi
   // decide whether to insert a comma.
 
   if (looking_at_indirect_ref)
     {
       do_comma_insert_check ();
 
       maybe_unput_comma (spc_gobbled);
 
-      curr_lexer->push_token (new token (tok, input_line_number,
-                                         current_input_column));
+      push_token (new token (tok, input_line_number,
+                             current_input_column));
 
       quote_is_transpose = true;
       convert_spaces_to_comma = true;
       looking_for_object_index = true;
 
       current_input_column += flex_yyleng ();
 
       return STRUCT_ELT;
@@ -3338,18 +3336,18 @@ lexical_feedback::handle_identifier (voi
       if (kw_token)
         {
           error ("function handles may not refer to keywords");
 
           return LEXICAL_ERROR;
         }
       else
         {
-          curr_lexer->push_token (new token (tok, input_line_number,
-                                             current_input_column));
+          push_token (new token (tok, input_line_number,
+                                 current_input_column));
 
           current_input_column += flex_yyleng ();
           quote_is_transpose = false;
           convert_spaces_to_comma = true;
           looking_for_object_index = true;
 
           return FCN_HANDLE;
         }
@@ -3419,18 +3417,18 @@ lexical_feedback::handle_identifier (voi
     }
 
   // Find the token in the symbol table.  Beware the magic
   // transformation of the end keyword...
 
   if (tok == "end")
     tok = "__end__";
 
-  curr_lexer->push_token (new token (&(symbol_table::insert (tok)),
-                                     input_line_number, current_input_column));
+  push_token (new token (&(symbol_table::insert (tok)),
+                         input_line_number, current_input_column));
 
   // After seeing an identifer, it is ok to convert spaces to a comma
   // (if needed).
 
   convert_spaces_to_comma = true;
 
   if (! (next_tok_is_eq || YY_START == COMMAND_START))
     {
@@ -3579,46 +3577,46 @@ lexical_feedback::display_token (int tok
     case PLUS_PLUS: std::cerr << "PLUS_PLUS\n"; break;
     case MINUS_MINUS: std::cerr << "MINUS_MINUS\n"; break;
     case POW: std::cerr << "POW\n"; break;
     case EPOW: std::cerr << "EPOW\n"; break;
 
     case NUM:
     case IMAG_NUM:
       {
-        token *tok_val = curr_lexer->current_token ();
+        token *tok_val = current_token ();
         std::cerr << (tok == NUM ? "NUM" : "IMAG_NUM")
                   << " [" << tok_val->number () << "]\n";
       }
       break;
 
     case STRUCT_ELT:
       {
-        token *tok_val = curr_lexer->current_token ();
+        token *tok_val = current_token ();
         std::cerr << "STRUCT_ELT [" << tok_val->text () << "]\n";
       }
       break;
 
     case NAME:
       {
-        token *tok_val = curr_lexer->current_token ();
+        token *tok_val = current_token ();
         symbol_table::symbol_record *sr = tok_val->sym_rec ();
         std::cerr << "NAME";
         if (sr)
           std::cerr << " [" << sr->name () << "]";
         std::cerr << "\n";
       }
       break;
 
     case END: std::cerr << "END\n"; break;
 
     case DQ_STRING:
     case SQ_STRING:
       {
-        token *tok_val = curr_lexer->current_token ();
+        token *tok_val = current_token ();
 
         std::cerr << (tok == DQ_STRING ? "DQ_STRING" : "SQ_STRING")
                   << " [" << tok_val->text () << "]\n";
       }
       break;
 
     case FOR: std::cerr << "FOR\n"; break;
     case WHILE: std::cerr << "WHILE\n"; break;
