# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1542345137 18000
#      Fri Nov 16 00:12:17 2018 -0500
# Node ID 5cff527d09700c1008d2a8a43ae16580d4e10980
# Parent  e71893aa322cd5db3247e2ef4c260375ad60585a
make base_list data member protected instead of private

* base-list.h (base_list::m_lst): Rename from lst.  Make protected
instead of private.  Change all uses.  Use default constructors,
assignment operator, and destructor.

diff --git a/liboctave/util/base-list.h b/liboctave/util/base-list.h
--- a/liboctave/util/base-list.h
+++ b/liboctave/util/base-list.h
@@ -39,97 +39,69 @@ namespace octave
 
     typedef typename std::list<elt_type>::iterator iterator;
     typedef typename std::list<elt_type>::const_iterator const_iterator;
 
     typedef typename std::list<elt_type>::reverse_iterator reverse_iterator;
     typedef typename std::list<elt_type>::const_reverse_iterator
                                                      const_reverse_iterator;
 
-    bool empty (void) const { return lst.empty (); }
+    bool empty (void) const { return m_lst.empty (); }
 
-    size_t size (void) const { return lst.size (); }
+    size_t size (void) const { return m_lst.size (); }
     size_t length (void) const { return size (); }
 
-    iterator erase (iterator pos) { return lst.erase (pos); }
+    iterator erase (iterator pos) { return m_lst.erase (pos); }
 
     template <typename P>
     void remove_if (P pred)
     {
-      lst.remove_if (pred);
-
-      // FIXME: kluge removed 8/7/13.  Eventually this commented
-      //        code should be deleted.
-      //
-      // FIXME: this kluge should be removed at some point.
-      // We would like to simply call
-      //
-      //   lst.remove_if (pred);
-      //
-      // but the Sun Studio compiler chokes on that.
-      //
-      // iterator b = lst.begin ();
-      // iterator e = lst.end ();
-      // while (b != e)
-      //   {
-      //     iterator n = b;
-      //     n++;
-      //     if (pred (*b))
-      //       lst.erase (b);
-      //     b = n;
-      //   }
+      m_lst.remove_if (pred);
     }
 
-    void clear (void) { lst.clear (); }
+    void clear (void) { m_lst.clear (); }
 
-    iterator begin (void) { return iterator (lst.begin ()); }
-    const_iterator begin (void) const { return const_iterator (lst.begin ()); }
+    iterator begin (void) { return iterator (m_lst.begin ()); }
+    const_iterator begin (void) const { return const_iterator (m_lst.begin ()); }
 
-    iterator end (void) { return iterator (lst.end ()); }
-    const_iterator end (void) const { return const_iterator (lst.end ()); }
+    iterator end (void) { return iterator (m_lst.end ()); }
+    const_iterator end (void) const { return const_iterator (m_lst.end ()); }
 
-    reverse_iterator rbegin (void) { return reverse_iterator (lst.rbegin ()); }
+    reverse_iterator rbegin (void) { return reverse_iterator (m_lst.rbegin ()); }
     const_reverse_iterator rbegin (void) const
-    { return const_reverse_iterator (lst.rbegin ()); }
+    { return const_reverse_iterator (m_lst.rbegin ()); }
 
-    reverse_iterator rend (void) { return reverse_iterator (lst.rend ()); }
+    reverse_iterator rend (void) { return reverse_iterator (m_lst.rend ()); }
     const_reverse_iterator rend (void) const
-    { return const_reverse_iterator (lst.rend ()); }
+    { return const_reverse_iterator (m_lst.rend ()); }
 
-    elt_type& front (void) { return lst.front (); }
-    elt_type& back (void) { return lst.back (); }
+    elt_type& front (void) { return m_lst.front (); }
+    elt_type& back (void) { return m_lst.back (); }
 
-    const elt_type& front (void) const { return lst.front (); }
-    const elt_type& back (void) const { return lst.back (); }
+    const elt_type& front (void) const { return m_lst.front (); }
+    const elt_type& back (void) const { return m_lst.back (); }
 
-    void push_front (const elt_type& s) { lst.push_front (s); }
-    void push_back (const elt_type& s) { lst.push_back (s); }
+    void push_front (const elt_type& s) { m_lst.push_front (s); }
+    void push_back (const elt_type& s) { m_lst.push_back (s); }
 
-    void pop_front (void) { lst.pop_front (); }
-    void pop_back (void) { lst.pop_back (); }
+    void pop_front (void) { m_lst.pop_front (); }
+    void pop_back (void) { m_lst.pop_back (); }
 
     // For backward compatibility.
-    void append (const elt_type& s) { lst.push_back (s); }
-
-    base_list (void) : lst () { }
+    void append (const elt_type& s) { m_lst.push_back (s); }
 
-    base_list (const std::list<elt_type>& l) : lst (l) { }
-
-    base_list (const base_list& bl) : lst (bl.lst) { }
+    base_list (void) = default;
 
-    base_list& operator = (const base_list& bl)
-    {
-      if (this != &bl)
-        {
-          lst = bl.lst;
-        }
-      return *this;
-    }
+    base_list (const std::list<elt_type>& l) : m_lst (l) { }
+
+    base_list (const base_list& bl) = default;
+
+    base_list& operator = (const base_list& bl) = default;
 
     virtual ~base_list (void) = default;
 
-  private:
+  protected:
 
-    std::list<elt_type> lst;
+    std::list<elt_type> m_lst;
   };
 }
 
 #endif
