# HG changeset patch
# User Jacob Dawid <jacob.dawid@googlemail.com>
# Date 1311197539 -7200
#      Wed Jul 20 23:32:19 2011 +0200
# Node ID 8b116446a904b5d591fa4a3329ec67aed6382966
# Parent  3ec73e6b8cbe8b7b78f5a9a1a8b70d827c485584
Fixed race condition.

diff --git a/gui/src/MainWindow.cpp b/gui/src/MainWindow.cpp
--- a/gui/src/MainWindow.cpp
+++ b/gui/src/MainWindow.cpp
@@ -275,11 +275,11 @@ void
 MainWindow::establishOctaveLink ()
 {
   m_octaveTerminal->openTerminal ();
 
   m_octaveMainThread = new OctaveMainThread (this);
   m_octaveMainThread->start ();
 
   m_octaveCallbackThread = new OctaveCallbackThread (this, this);
-  m_octaveCallbackThread->start ();
+  connect (m_octaveMainThread, SIGNAL(ready()), m_octaveCallbackThread, SLOT(start()));
   reportStatusMessage (tr ("Established link to Octave."));
 }
diff --git a/gui/src/MainWindow.h b/gui/src/MainWindow.h
--- a/gui/src/MainWindow.h
+++ b/gui/src/MainWindow.h
@@ -112,26 +112,32 @@ private:
   // Threads for running octave and managing the data interaction.
   OctaveMainThread *m_octaveMainThread;
   OctaveCallbackThread *m_octaveCallbackThread;
   bool m_isRunning;
 };
 
 class OctaveMainThread:public QThread
 {
-Q_OBJECT public:
+Q_OBJECT
+public:
   OctaveMainThread (QObject * parent):QThread (parent)
   {
   }
+
+signals:
+  void ready();
+
 protected:
   void run ()
   {
     int argc = 3;
     const char *argv[] = { "octave", "--interactive", "--line-editing" };
     octave_main (argc, (char **) argv, 1);
+    emit ready();
     main_loop ();
     clean_up_and_exit (0);
   }
 };
 
 class OctaveCallbackThread:public QThread
 {
 Q_OBJECT public:
diff --git a/gui/src/OctaveLink.cpp b/gui/src/OctaveLink.cpp
--- a/gui/src/OctaveLink.cpp
+++ b/gui/src/OctaveLink.cpp
@@ -127,26 +127,23 @@ QList < SymbolRecord > OctaveLink::copyC
 void
 OctaveLink::updateHistoryModel ()
 {
   // Determine the client's (our) history length and the one of the server.
   int clientHistoryLength = m_historyModel->rowCount ();
   int serverHistoryLength = command_history::length ();
 
   // If were behind the server, iterate through all new entries and add them to our history.
-
-  // TODO: command_history::get_entry crashes, find out why.
-  /*
   if (clientHistoryLength < serverHistoryLength)
     {
       for (int i = clientHistoryLength; i < serverHistoryLength; i++)
         {
           m_historyModel->insertRow (0);
           m_historyModel->setData (m_historyModel->index (0), QString (command_history::get_entry (i).c_str ()));
         }
-    }*/
+    }
 }
 
 QStringListModel *
 OctaveLink::historyModel ()
 {
   return m_historyModel;
 }
