# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1272048221 14400
#      Fri Apr 23 14:43:41 2010 -0400
# Node ID c48b7048e720741fc52b2fde7de170b389e9aa64
# Parent  95c3e38098bfbe3752a7477f303b4db338a8d4cc
style fixes

diff --git a/liboctave/CSparse.cc b/liboctave/CSparse.cc
--- a/liboctave/CSparse.cc
+++ b/liboctave/CSparse.cc
@@ -7402,24 +7402,26 @@ SparseComplexMatrix::diag (octave_idx_ty
 
 std::ostream&
 operator << (std::ostream& os, const SparseComplexMatrix& a)
 {
   octave_idx_type nc = a.cols ();
 
    // add one to the printed indices to go from
    //  zero-based to one-based arrays
-   for (octave_idx_type j = 0; j < nc; j++)  {
-      octave_quit ();
-      for (octave_idx_type i = a.cidx(j); i < a.cidx(j+1); i++) {
-        os << a.ridx(i) + 1 << " "  << j + 1 << " ";
-        octave_write_complex (os, a.data(i));
-        os << "\n";
-      }
-   }
+   for (octave_idx_type j = 0; j < nc; j++)
+     {
+       octave_quit ();
+       for (octave_idx_type i = a.cidx(j); i < a.cidx(j+1); i++)
+         {
+           os << a.ridx(i) + 1 << " "  << j + 1 << " ";
+           octave_write_complex (os, a.data(i));
+           os << "\n";
+         }
+     }
 
   return os;
 }
 
 std::istream&
 operator >> (std::istream& is, SparseComplexMatrix& a)
 {
   typedef SparseComplexMatrix::element_type elt_type;
diff --git a/liboctave/dSparse.cc b/liboctave/dSparse.cc
--- a/liboctave/dSparse.cc
+++ b/liboctave/dSparse.cc
@@ -7560,24 +7560,26 @@ SparseMatrix::matrix_value (void) const
 
 std::ostream&
 operator << (std::ostream& os, const SparseMatrix& a)
 {
   octave_idx_type nc = a.cols ();
 
    // add one to the printed indices to go from
    //  zero-based to one-based arrays
-   for (octave_idx_type j = 0; j < nc; j++)  {
-      octave_quit ();
-      for (octave_idx_type i = a.cidx(j); i < a.cidx(j+1); i++) {
-        os << a.ridx(i) + 1 << " "  << j + 1 << " ";
-        octave_write_double (os, a.data(i));
-        os << "\n";
-      }
-   }
+   for (octave_idx_type j = 0; j < nc; j++)
+     {
+       octave_quit ();
+       for (octave_idx_type i = a.cidx(j); i < a.cidx(j+1); i++)
+         {
+           os << a.ridx(i) + 1 << " "  << j + 1 << " ";
+           octave_write_double (os, a.data(i));
+           os << "\n";
+         }
+     }
 
   return os;
 }
 
 std::istream&
 operator >> (std::istream& is, SparseMatrix& a)
 {
   typedef SparseMatrix::element_type elt_type;
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,12 +1,12 @@
 2010-04-23  Rik <octave@nomad.inbox5.com>
 
 	* DLD-FUNCTIONS/regexp.cc.: eliminate compile warning 
-   warning: suggest explicit braces to avoid ambiguous 'else'
+	warning: suggest explicit braces to avoid ambiguous 'else'.
 
 2010-04-23  Jaroslav Hajek  <highegg@gmail.com>
 
 	* ov-base-scalar.h (octave_base_scalar::reshape,
 	octave_base_scalar::permute): Remove implementations.
 	* ov-base-scalar.cc (octave_base_scalar::reshape,
 	octave_base_scalar::permute): Provide correct implementations here.
 
diff --git a/src/DLD-FUNCTIONS/find.cc b/src/DLD-FUNCTIONS/find.cc
--- a/src/DLD-FUNCTIONS/find.cc
+++ b/src/DLD-FUNCTIONS/find.cc
@@ -540,22 +540,23 @@ b = sparse(i, j, v, sz(1), sz(2));\n\
 
           if (! error_state)
             retval = find_nonzero_elem_idx (v, nargout, 
                                             n_to_find, direction);
         }
       else 
         gripe_wrong_type_arg ("find", arg);
     }
-  else if (arg.is_perm_matrix ()) {
-    PermMatrix P = arg.perm_matrix_value ();
+  else if (arg.is_perm_matrix ())
+    {
+      PermMatrix P = arg.perm_matrix_value ();
 
-    if (! error_state)
-      retval = find_nonzero_elem_idx (P, nargout, n_to_find, direction);
-  }
+      if (! error_state)
+        retval = find_nonzero_elem_idx (P, nargout, n_to_find, direction);
+    }
   else
     {
       if (arg.is_single_type ())
         {
           if (arg.is_real_type ())
             {
               FloatNDArray nda = arg.float_array_value ();
 
diff --git a/src/DLD-FUNCTIONS/regexp.cc b/src/DLD-FUNCTIONS/regexp.cc
--- a/src/DLD-FUNCTIONS/regexp.cc
+++ b/src/DLD-FUNCTIONS/regexp.cc
@@ -346,21 +346,22 @@ octregexp_list (const octave_value_list 
       std::string buf_str = buf.str ();
       re = pcre_compile (buf_str.c_str (),
                          (case_insensitive ? PCRE_CASELESS : 0) |
                          (dotexceptnewline ? 0 : PCRE_DOTALL) |
                          (lineanchors ? PCRE_MULTILINE : 0) |
                          (freespacing ? PCRE_EXTENDED : 0),
                          &err, &erroffset, 0);
     
-      if (re == 0) {
-        error("%s: %s at position %d of expression", nm.c_str(), 
-              err, erroffset);
-        return 0;
-      }
+      if (re == 0)
+        {
+          error("%s: %s at position %d of expression", nm.c_str(), 
+                err, erroffset);
+          return 0;
+        }
 
       int subpatterns;
       int namecount;
       int nameentrysize;
       char *nametable;
       int idx = 0;
 
       pcre_fullinfo(re, 0, PCRE_INFO_CAPTURECOUNT,  &subpatterns);
@@ -442,40 +443,42 @@ octregexp_list (const octave_value_list 
               te.resize(pos_match,2);
               s = double (ovector[0]+1);
               e = double (ovector[1]);
 
               const char **listptr;
               int status = pcre_get_substring_list(buffer.c_str(), ovector, 
                                                    matches, &listptr);
 
-              if (status == PCRE_ERROR_NOMEMORY) {
-                error("%s: cannot allocate memory in pcre_get_substring_list",
-                      nm.c_str());
-                pcre_free(re);
-                return 0;
-              }
+              if (status == PCRE_ERROR_NOMEMORY)
+                {
+                  error("%s: cannot allocate memory in pcre_get_substring_list",
+                        nm.c_str());
+                  pcre_free(re);
+                  return 0;
+                }
 
               Cell cell_t (dim_vector(1,pos_match));
               string_vector named_tokens(nnames);
               int pos_offset = 0;
               pos_match = 0;
               for (int i = 1; i < matches; i++)
-                if (ovector[2*i] >= 0 && ovector[2*i+1] > 0) {
-                  if (i == 1 || ovector[2*i] != ovector[2*i-2]
-                      || ovector[2*i-1] != ovector[2*i+1])
-                    {
-                      if (namecount > 0)
-                        named_tokens(named_idx(i-pos_offset-1)) = 
-                          std::string(*(listptr+nidx[i-pos_offset-1]));    
-                      cell_t(pos_match++) = 
-                        std::string(*(listptr+i));
-                    }
-                  else
-                    pos_offset++;
+                if (ovector[2*i] >= 0 && ovector[2*i+1] > 0)
+                  {
+                    if (i == 1 || ovector[2*i] != ovector[2*i-2]
+                        || ovector[2*i-1] != ovector[2*i+1])
+                      {
+                        if (namecount > 0)
+                          named_tokens(named_idx(i-pos_offset-1)) = 
+                            std::string(*(listptr+nidx[i-pos_offset-1]));    
+                        cell_t(pos_match++) = 
+                          std::string(*(listptr+i));
+                      }
+                    else
+                      pos_offset++;
                 }
 
               m =  std::string(*listptr);
               t = cell_t;
 
               pcre_free_substring_list(listptr);
 
               regexp_elem new_elem (named_tokens, t, m, te, s, e);
diff --git a/src/DLD-FUNCTIONS/tsearch.cc b/src/DLD-FUNCTIONS/tsearch.cc
--- a/src/DLD-FUNCTIONS/tsearch.cc
+++ b/src/DLD-FUNCTIONS/tsearch.cc
@@ -33,30 +33,30 @@ along with Octave; see the file COPYING.
 #include "lo-ieee.h"
 #include "lo-math.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "oct-obj.h"
 #include "parse.h"
 
-inline double max(double a, double b, double c)
+inline double max (double a, double b, double c)
 {
   if (a < b) 
-    return ( b < c ? c : b );
+    return (b < c ? c : b);
   else 
-    return ( a < c ? c : a );
+    return (a < c ? c : a);
 }
 
-inline double min(double a, double b, double c)
+inline double min (double a, double b, double c)
 {
   if (a > b) 
-    return ( b > c ? c : b );
+    return (b > c ? c : b);
   else 
-    return ( a > c ? c : a );
+    return (a > c ? c : a);
 }
 
 #define REF(x,k,i) x(static_cast<octave_idx_type>(elem((k), (i))) - 1)
 
 // for large data set the algorithm is very slow
 // one should presort (how?) either the elements of the points of evaluation
 // to cut down the time needed to decide which triangle contains the 
 // given point 
@@ -73,83 +73,84 @@ points @code{(@var{xi}, @var{yi})}.  For
 @var{idx} is NaN.\n\
 @seealso{delaunay, delaunayn}\n\
 @end deftypefn")
 {
   const double eps=1.0e-12;
 
   octave_value_list retval;
   const int nargin = args.length ();
-  if ( nargin != 5 ) {
-    print_usage ();
-    return retval;
-  }
+  if (nargin != 5)
+    {
+      print_usage ();
+      return retval;
+    }
   
-  const ColumnVector x(args(0).vector_value());
-  const ColumnVector y(args(1).vector_value());
-  const Matrix elem(args(2).matrix_value());
-  const ColumnVector xi(args(3).vector_value());
-  const ColumnVector yi(args(4).vector_value());
-
-  if (error_state) return retval;
+  const ColumnVector x (args(0).vector_value ());
+  const ColumnVector y (args(1).vector_value ());
+  const Matrix elem (args(2).matrix_value ());
+  const ColumnVector xi (args(3).vector_value ());
+  const ColumnVector yi (args(4).vector_value ());
 
-  const octave_idx_type nelem = elem.rows();
+  if (error_state)
+    return retval;
+
+  const octave_idx_type nelem = elem.rows ();
 
-  ColumnVector minx(nelem);
-  ColumnVector maxx(nelem);
-  ColumnVector miny(nelem);
-  ColumnVector maxy(nelem);
-  for(octave_idx_type k = 0; k < nelem; k++) 
+  ColumnVector minx (nelem);
+  ColumnVector maxx (nelem);
+  ColumnVector miny (nelem);
+  ColumnVector maxy (nelem);
+  for (octave_idx_type k = 0; k < nelem; k++) 
     {
-      minx(k) = min(REF(x,k,0), REF(x,k,1), REF(x,k,2)) - eps;
-      maxx(k) = max(REF(x,k,0), REF(x,k,1), REF(x,k,2)) + eps;
-      miny(k) = min(REF(y,k,0), REF(y,k,1), REF(y,k,2)) - eps;
-      maxy(k) = max(REF(y,k,0), REF(y,k,1), REF(y,k,2)) + eps;
+      minx(k) = min (REF (x, k, 0), REF (x, k, 1), REF (x, k, 2)) - eps;
+      maxx(k) = max (REF (x, k, 0), REF (x, k, 1), REF (x, k, 2)) + eps;
+      miny(k) = min (REF (y, k, 0), REF (y, k, 1), REF (y, k, 2)) - eps;
+      maxy(k) = max (REF (y, k, 0), REF (y, k, 1), REF (y, k, 2)) + eps;
     }
 
-  const octave_idx_type np = xi.length();
-  ColumnVector values(np);
+  const octave_idx_type np = xi.length ();
+  ColumnVector values (np);
 
   double x0 = 0.0, y0 = 0.0;
   double a11 = 0.0, a12 = 0.0, a21 = 0.0, a22 = 0.0, det = 0.0;
 
   octave_idx_type k = nelem; // k is a counter of elements
-  for(octave_idx_type kp = 0; kp < np; kp++) 
+  for (octave_idx_type kp = 0; kp < np; kp++) 
     {
       const double xt = xi(kp); 
       const double yt = yi(kp);
     
       // check if last triangle contains the next point
       if (k < nelem) 
         { 
           const double dx1 = xt - x0;
           const double dx2 = yt - y0;
           const double c1 = (a22 * dx1 - a21 * dx2) / det;
           const double c2 = (-a12 * dx1 + a11 * dx2) / det;
-          if ( c1 >= -eps && c2 >= -eps && (c1 + c2) <= (1 + eps)) 
+          if (c1 >= -eps && c2 >= -eps && (c1 + c2) <= (1 + eps)) 
             {
               values(kp) = double(k+1);
               continue;
             }
         }
     
       // it doesn't, so go through all elements
       for (k = 0; k < nelem; k++) 
         { 
           OCTAVE_QUIT;
-          if (xt >= minx(k) && xt <= maxx(k) && 
-              yt >= miny(k) && yt <= maxy(k) )
+          if (xt >= minx(k) && xt <= maxx(k) && yt >= miny(k) && yt <= maxy(k))
             {
               // element inside the minimum rectangle: examine it closely
-              x0  = REF(x,k,0);
-              y0  = REF(y,k,0);
-              a11 = REF(x,k,1)-x0;
-              a12 = REF(y,k,1)-y0;
-              a21 = REF(x,k,2)-x0;
-              a22 = REF(y,k,2)-y0;
+              x0  = REF (x, k, 0);
+              y0  = REF (y, k, 0);
+              a11 = REF (x, k, 1) - x0;
+              a12 = REF (y, k, 1) - y0;
+              a21 = REF (x, k, 2) - x0;
+              a22 = REF (y, k, 2) - y0;
               det = a11 * a22 - a21 * a12;
         
               // solve the system
               const double dx1 = xt - x0;
               const double dx2 = yt - y0;
               const double c1 = (a22 * dx1 - a21 * dx2) / det;
               const double c2 = (-a12 * dx1 + a11 * dx2) / det;
               if ((c1 >= -eps) && (c2 >= -eps) && ((c1 + c2) <= (1 + eps))) 
