# HG changeset patch
# User Jordi Guti√©rrez Hermoso <jordigh@octave.org>
# Date 1325220073 18000
#      Thu Dec 29 23:41:13 2011 -0500
# Branch stable
# Node ID b5e819930fd50d20704ad63b0530da81fddc7e0b
# Parent  32debc2e08bbeb4ebf720c875dd9f70b42b64da5
Give friendlier error message when indexing with default i or j (bug #35157)

* ov-complex.h (index_vector): Override to give a friendlier error message.
* test_index.m: Test for the new behaviour.

diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -74,16 +74,25 @@ public:
 
   type_conv_info numeric_demotion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
   octave_value do_index_op (const octave_value_list& idx,
                             bool resize_ok = false);
 
+  // Use this to give a more specific error message
+  idx_vector index_vector (void) const
+  {
+    error (
+           "attempted to use a complex scalar as an index\n"
+           "       (forgot to initialize i or j?)");
+    return idx_vector ();
+  }
+
   octave_value any (int = 0) const
     {
       return (scalar != Complex (0, 0)
               && ! (lo_ieee_isnan (std::real (scalar))
                     || lo_ieee_isnan (std::imag (scalar))));
     }
 
   builtin_type_t builtin_type (void) const { return btyp_complex; }
diff --git a/test/test_index.m b/test/test_index.m
--- a/test/test_index.m
+++ b/test/test_index.m
@@ -344,8 +344,14 @@
 %! a(1,:,:) = reshape(1:4,[1,1,4]);
 %! assert (a, [1:4]);
 
 %!test
 %! a(1,:,:,:) = reshape(1:4,[1,1,4]);
 %! assert (a, reshape (1:4,[1,1,1,4]));
 
 %!error (a(1:2,1:2) = 1:4)
+
+%!shared x
+%! x = 1:5;
+%!error <attempted to use a complex scalar as an index> x(i)
+%!error <attempted to use a complex scalar as an index> x(j)
+%!error <attempted to use a complex scalar as an index> x(1+i)
