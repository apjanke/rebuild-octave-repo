# HG changeset patch
# User jwe
# Date 1153857360 0
#      Tue Jul 25 19:56:00 2006 +0000
# Node ID 6af4cea82cc7112b1944e4ca5a6cf56e92982645
# Parent  5610a3fdeca633cd0567610f8a4dcd4aa8c34fee
[project @ 2006-07-25 19:56:00 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2006-07-25  John W. Eaton  <jwe@octave.org>
+
+	* mex.cc (mxArray_struct::as_octave_value, call_mex,
+	mexCallMATLAB, mxArray_cell::as_octave_value):
+	Convert NULL mxArray* pointers to empty matrix values.
+	(mxArray_octave_value:get_ir): Fix typo.
+
 2006-07-22  John W. Eaton  <jwe@octave.org>
 
 	* mxarray.h: New file.
 	* mex.h, mexproto.h, mex.cc: New implementation of mxArray and MEX
 	interface.
 
 	* ov.h (octave_value::mex_get_ir, octave_value::mex_get_jc):
 	New functions.
diff --git a/src/mex.cc b/src/mex.cc
--- a/src/mex.cc
+++ b/src/mex.cc
@@ -448,17 +448,17 @@ public:
   void set_data (void */*pr*/) { panic_impossible (); }
 
   // Not allowed.
   void set_imag_data (void */*pi*/) { panic_impossible (); }
 
   int *get_ir (void) const
   {
 #if SIZEOF_OCTAVE_IDX_TYPE == SIZEOF_INT
-    return val.mex_get_jc ();
+    return val.mex_get_ir ();
 #else
     request_mutation ();
     return 0;
 #endif
   }
 
   int *get_jc (void) const
   {
@@ -1440,17 +1440,20 @@ public:
     for (int i = 0; i < nfields; i++)
       {
 	Cell c (dv);
 
 	octave_value *p = c.fortran_vec ();
 
 	int k = 0;
 	for (int j = i; j < ntot; j += nfields)
-	  p[k++] = data[j]->as_octave_value ();
+	  {
+	    mxArray *t = data[j];
+	    p[k++] = t ? t->as_octave_value () : octave_value (Matrix ());
+	  }
 
 	m.assign (keys[i], c);
       }
 
     return m;
   }
 
   int add_field (const char *key)
@@ -1650,17 +1653,20 @@ public:
 
     Cell c (dv);
 
     int nel = get_number_of_elements ();
 
     octave_value *p = c.fortran_vec ();
 
     for (int i = 0; i < nel; i++)
-      p[i] = data[i]->as_octave_value ();
+      {
+	mxArray *t = data[i];
+	p[i] = t ? t->as_octave_value () : octave_value (Matrix ());
+      }
 
     return c;
   }
 
   mxArray *get_cell (int idx) const { return data[idx]; }
 
   void set_cell (int idx, mxArray *val) { data[idx] = val; }
 
@@ -2718,19 +2724,18 @@ call_mex (callstyle cs, void *f, const o
 	}
 
       retval.resize (nargout);
 
       for (int i = 0; i < nargout; i++)
 	{
 	  if (argout[i])
 	    {
-	      retval(i) = argout[i]->as_octave_value ();
-
-	      //	      mxDestroyArray (argout[i]);
+	      mxArray *t = argout[i];
+	      retval(i) = t ? t->as_octave_value () : octave_value (Matrix ());
 	    }
 	}
     }
 
   // Clean up mex resources.
   unwind_protect::run ();
 
   return retval;
@@ -2766,17 +2771,20 @@ mexCallMATLAB (int nargout, mxArray *arg
   // would say that this problem is endemic to Octave and we will
   // continue to have memory leaks after Ctrl-C until proper exception
   // handling is implemented.  longjmp() only clears the stack, so any
   // class which allocates data on the heap is going to leak.
 
   args.resize (nargin);
 
   for (int i = 0; i < nargin; i++)
-    args(i) = argin[i]->as_octave_value ();
+    {
+      mxArray *t = argin[i];
+      args(i) = t ? t->as_octave_value () : octave_value (Matrix ());
+    }
 
   octave_value_list retval = feval (fname, args, nargout);
 
   if (error_state && mex_context->trap_feval_error == 0)
     {
       // FIXME -- is this the correct way to clean up?  abort() is
       // going to trigger a long jump, so the normal class destructors
       // will not be called.  Hopefully this will reduce things to a
