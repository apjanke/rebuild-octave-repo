# HG changeset patch
# User Rik <rik@octave.org>
# Date 1390696861 28800
#      Sat Jan 25 16:41:01 2014 -0800
# Node ID 6a2cc29f55fcd58ac59314dc7fb1dae4d403a1a0
# Parent  ed1e63425f79b775a7284533abe4657ef05246c9
Correctly handle 'dbtype lineno' case.

* debug.cc: Add extra if statement to distinguish between 'dbtype func' and
'dbtype lineno' by testing whether lineno is 0 from atoi call.

diff --git a/libinterp/corefcn/debug.cc b/libinterp/corefcn/debug.cc
--- a/libinterp/corefcn/debug.cc
+++ b/libinterp/corefcn/debug.cc
@@ -973,23 +973,24 @@ numbers.\n\
   if (! error_state)
     {
       switch (nargin)
         {
         case 0: // dbtype
           dbg_fcn = get_user_code ();
 
           if (dbg_fcn)
-            do_dbtype (octave_stdout, dbg_fcn->fcn_file_name (), 0,
-                       std::numeric_limits<int>::max ());
+            do_dbtype (octave_stdout, dbg_fcn->fcn_file_name (),
+                       0, std::numeric_limits<int>::max ());
           else
             error ("dbtype: must be inside a user function to give no arguments to dbtype\n");
+
           break;
 
-        case 1: // (dbtype func) || (dbtype start:end)
+        case 1: // (dbtype start:end) || (dbtype func) || (dbtype lineno)
           {
             std::string arg = argv[1];
 
             size_t ind = arg.find (':');
 
             if (ind != std::string::npos)  // (dbtype start:end)
               {
                 dbg_fcn = get_user_code ();
@@ -1009,35 +1010,54 @@ numbers.\n\
                     if (std::min (start, end) <= 0)
                       {
                         error ("dbtype: start and end lines must be >= 1\n");
                         break;
                       }
 
                     if (start <= end)
                       do_dbtype (octave_stdout, dbg_fcn->fcn_file_name (),
-                                                start, end);
+                                 start, end);
                     else
                       error ("dbtype: start line must be less than end line\n");
                   }
               }
-            else  // (dbtype func)
+            else  // (dbtype func) || (dbtype lineno)
               {
-                dbg_fcn = get_user_code (arg);
+                int line = atoi (arg.c_str ());
+
+                if (line == 0)  // (dbtype func)
+                  {
+                    dbg_fcn = get_user_code (arg);
 
-                if (dbg_fcn)
-                  do_dbtype (octave_stdout, dbg_fcn->fcn_file_name (), 0,
-                             std::numeric_limits<int>::max ());
-                else
-                  error ("dbtype: function <%s> not found\n", arg.c_str ());
+                    if (dbg_fcn)
+                      do_dbtype (octave_stdout, dbg_fcn->fcn_file_name (),
+                                 0, std::numeric_limits<int>::max ());
+                    else
+                      error ("dbtype: function <%s> not found\n", arg.c_str ());
+                  }
+                else  // (dbtype lineno)
+                  {
+                    if (line <= 0)
+                      {
+                        error ("dbtype: start and end lines must be >= 1\n");
+                        break;
+                      }
+
+                    dbg_fcn = get_user_code ();
+
+                    if (dbg_fcn)
+                      do_dbtype (octave_stdout, dbg_fcn->fcn_file_name (),
+                                 line, line);
+                  }
               }
           }
           break;
 
-        case 2: // (dbtype func start:end) , (dbtype func start)
+        case 2: // (dbtype func start:end) || (dbtype func start)
           dbg_fcn = get_user_code (argv[1]);
 
           if (dbg_fcn)
             {
               std::string arg = argv[2];
               int start, end;
               size_t ind = arg.find (':');
 
@@ -1054,20 +1074,24 @@ numbers.\n\
                 }
               else
                 {
                   start = atoi (arg.c_str ());
                   end = start;
                 }
 
               if (std::min (start, end) <= 0)
-                error ("dbtype: start and end lines must be >= 1\n");
+                {
+                  error ("dbtype: start and end lines must be >= 1\n");
+                  break;
+                }
 
               if (start <= end)
-                do_dbtype (octave_stdout, dbg_fcn->fcn_file_name (), start, end);
+                do_dbtype (octave_stdout, dbg_fcn->fcn_file_name (),
+                           start, end);
               else
                 error ("dbtype: start line must be less than end line\n");
             }
           else
             error ("dbtype: function <%s> not found\n", argv[1].c_str ());
 
           break;
 
