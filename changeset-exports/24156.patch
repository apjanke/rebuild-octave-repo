# HG changeset patch
# User Rik <rik@octave.org>
# Date 1508273147 25200
#      Tue Oct 17 13:45:47 2017 -0700
# Node ID ce435b70fd945092a32ef60374ec9fc7531c87f8
# Parent  47dd094a6239cdbff80d3182b8020fe8ec872ff7
quadl.m: Return single output when inputs are single (bug #52243).

* quadl.m: Declare intermediate variable q to be of same class as input x.
Add BIST tests for behavior.

diff --git a/scripts/general/quadl.m b/scripts/general/quadl.m
--- a/scripts/general/quadl.m
+++ b/scripts/general/quadl.m
@@ -144,17 +144,17 @@ function [q, nfun, hmin] = adaptlobstp (
   if (trace)
     disp ([nfun, a, b-a, i1]);
   endif
 
   ## Force at least one adaptive step (nfun > 2 test).
   if ((abs (i1-i2) < tol || mll <= a || b <= mrr) && nfun > 2)
     q = i1;
   else
-    q = zeros (6, 1);
+    q = zeros (6, 1, class (x));
     [q(1), nfun, hmin] = adaptlobstp (f, a  , mll, fa  , fmll, q0/6, nfun, hmin,
                                       tol, trace, varargin{:});
     [q(2), nfun, hmin] = adaptlobstp (f, mll, ml , fmll, fml , q0/6, nfun, hmin,
                                       tol, trace, varargin{:});
     [q(3), nfun, hmin] = adaptlobstp (f, ml , m  , fml , fm  , q0/6, nfun, hmin,
                                       tol, trace, varargin{:});
     [q(4), nfun, hmin] = adaptlobstp (f, m  , mr , fm  , fmr , q0/6, nfun, hmin,
                                       tol, trace, varargin{:});
@@ -182,14 +182,19 @@ endfunction
 ## test different tolerances.
 %!test
 %! [q, nfun1] = quadl (@(x) sin (2 + 3*x).^2, 0, 10, 0.5, []);
 %! assert (q, (60 + sin(4) - sin(64))/12, 0.5);
 %! [q, nfun2] = quadl (@(x) sin (2 + 3*x).^2, 0, 10, 0.1, []);
 %! assert (q, (60 + sin(4) - sin(64))/12, 0.1);
 %! assert (nfun2 > nfun1);
 
+%!test  # test single input/output
+%! assert (class (quadl (@sin, 0, 1)), "double");
+%! assert (class (quadl (@sin, single (0), 1)), "single");
+%! assert (class (quadl (@sin, 0, single (1))), "single");
+
 ## Test input validation
 %!error quadl ()
 %!error quadl (@sin)
 %!error quadl (@sin,1)
 %!error <TOL must be a scalar> quadl (@sin,0,1, ones (2,2))
 %!error <TOL must be .* .=0> quadl (@sin,0,1, -1)
