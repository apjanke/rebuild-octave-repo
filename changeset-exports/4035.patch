# HG changeset patch
# User jwe
# Date 1028966647 0
#      Sat Aug 10 08:04:07 2002 +0000
# Node ID 92776b806c5569b3901e17ba1a193e2a1630ab7a
# Parent  6c40e6c7a1ae1024a7af7fb918a8c9d0f7710548
[project @ 2002-08-10 08:04:07 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,12 @@
+2002-08-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* mk-opts.pl (emit_options_function): Emit newline at EOF.
+
 2002-08-01  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makeconf.in: Use $@-t instead of $@.tmp or $@.t.
 
 2002-07-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* mk-opts.pl: New file.
 	* Makefile.in (DISTFILES): Add it to the list.
diff --git a/mk-opts.pl b/mk-opts.pl
--- a/mk-opts.pl
+++ b/mk-opts.pl
@@ -753,17 +753,17 @@ sub emit_options_function
         }
       else
         error (\"$opt_fcn_name: expecting keyword as first argument\");
     }
   else
     print_usage (\"$opt_fcn_name\");
 
   return retval;
-}";  
+}\n";  
 }
 
 sub emit_options_debug
 {
   print "CLASS = \"$class\"\n";
 
   for ($i = 0; $i < $opt_num; $i++)
     {
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2002-08-10  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* DLD-FUNCTIONS/dasrt.cc (DASRT_ABORT1, DASRT_ABORT2):
+	"##" pastes tokens, not strings.
+
+	* DLD-FUNCTIONS/odessa.cc: Add std:: qualifiers as needed.
+
 2002-08-09  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* variables.cc (Fisglobal): Rename from Fis_global.
 	* file-io.cc (Fisstream): Rename from Fis_stream.
 	* data.cc (Fisbool): Rename from Fis_bool.
 	(Fiscomplex): Rename from Fis_complex.
 	(Fislist): Rename from Fis_list.
 	(Fismatrix): Rename from Fis_matrix.
diff --git a/src/DLD-FUNCTIONS/dasrt.cc b/src/DLD-FUNCTIONS/dasrt.cc
--- a/src/DLD-FUNCTIONS/dasrt.cc
+++ b/src/DLD-FUNCTIONS/dasrt.cc
@@ -216,25 +216,25 @@ dasrt_user_j (const ColumnVector& x, con
       unwind_protect::run_frame ("Fdasrt"); \
       return retval; \
     } \
   while (0)
 
 #define DASRT_ABORT1(msg) \
   do \
     { \
-      ::error ("dasrt: " ## msg); \
+      ::error ("dasrt: " msg); \
       DASRT_ABORT; \
     } \
   while (0)
 
 #define DASRT_ABORT2(fmt, arg) \
   do \
     { \
-      ::error ("dasrt: " ## fmt, arg); \
+      ::error ("dasrt: " fmt, arg); \
       DASRT_ABORT; \
     } \
   while (0)
 
 DEFUN_DLD (dasrt, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{x}, @var{xdot}, @var{t}] =} dasrt (@var{fj} [, @var{g}], @var{x_0}, @var{xdot_0}, @var{t_out} [, @var{t_crit}])\n\
 Solve a system of differential/algebraic equations with functional\n\
diff --git a/src/DLD-FUNCTIONS/odessa.cc b/src/DLD-FUNCTIONS/odessa.cc
--- a/src/DLD-FUNCTIONS/odessa.cc
+++ b/src/DLD-FUNCTIONS/odessa.cc
@@ -295,31 +295,31 @@ parameters for @code{odessa}.")
   if (f_arg.is_string ())
     {
       string_vector f_str_arg = f_arg.all_strings ();
       
       int len = f_str_arg.length ();
       
       if (len > 2)
 	{
-	  string t = f_str_arg(2);
+	  std::string t = f_str_arg(2);
 
 	  if (t.length () > 0)
 	    {
 	      odessa_b = is_valid_function (t, "odessa", true);
 	      
 	      if (! odessa_b)
 		ODESSA_ABORT1
 		  ("expecting b function name as argument 1");
 	    }
 	}
 
       if (len > 1)
 	{
-	  string t = f_str_arg(1);
+	  std::string t = f_str_arg(1);
 	  
 	  if (t.length () > 0)
 	    {
 	      odessa_j = is_valid_function (t, "odessa", true);
 	      
 	      if (! odessa_j)
 		ODESSA_ABORT1
 		  ("expecting function name as argument 1");
