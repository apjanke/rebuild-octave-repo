# HG changeset patch
# User jwe
# Date 1191255140 0
#      Mon Oct 01 16:12:20 2007 +0000
# Node ID 46d1ad37d943a1ce214ec9a0e7a9b4bc082aa901
# Parent  688ef944002215d41f6e6a511d9b5d97ce6b98dd
[project @ 2007-10-01 16:12:20 by jwe]

diff --git a/doc/interpreter/arith.txi b/doc/interpreter/arith.txi
--- a/doc/interpreter/arith.txi
+++ b/doc/interpreter/arith.txi
@@ -105,17 +105,17 @@ defined as @code{sqrt (-1)}.
 @DOCSTRING(imag)
 
 @DOCSTRING(real)
 
 @node Trigonometry
 @section Trigonometry
 
 Octave provides the following trigonometric functions.  Angles are
-specified in radians.  To convert from degrees to radians multipy by
+specified in radians.  To convert from degrees to radians multiply by
 @iftex
 @tex
 $\pi/180$
 @end tex
 @end iftex
 @ifinfo
 @code{pi/180}
 @end ifinfo
diff --git a/doc/interpreter/basics.txi b/doc/interpreter/basics.txi
--- a/doc/interpreter/basics.txi
+++ b/doc/interpreter/basics.txi
@@ -677,17 +677,17 @@ A backslash.
 
 @DOCSTRING(PS2)
 
 @DOCSTRING(PS4)
 
 @node Diary and Echo Commands
 @subsection Diary and Echo Commands
 @cindex diary of commands and output
-@cindex command and ouput logs
+@cindex command and output logs
 @cindex logging commands and output
 @cindex echoing executing commands
 @cindex command echoing
 
 Octave's diary feature allows you to keep a log of all or part of an
 interactive session by recording the input you type and the output that
 Octave produces in a separate file.
 
@@ -844,17 +844,17 @@ usually specified in stand-alone Octave 
 printing the normal startup message, and to keep them from behaving
 differently depending on the contents of a particular user's
 @file{~/.octaverc} file.  @xref{Invoking Octave from the Command Line}.
 
 Note that some operating systems may place a limit on the number of
 characters that are recognized after @samp{#!}.  Also, the various
 shells/systems parse differently the arguments appearing in a @samp{#!} 
 line.  The majority of them group together all the arguments in a string
-and pass it to the interepreter as a single argument.  In this case, the
+and pass it to the interpreter as a single argument.  In this case, the
 following script:
 
 @example
 @group
 #! @var{octave-interpreter-name} -q -f # comment
 @end group
 @end example
 
diff --git a/doc/interpreter/container.txi b/doc/interpreter/container.txi
--- a/doc/interpreter/container.txi
+++ b/doc/interpreter/container.txi
@@ -1,17 +1,17 @@
 @c Copyright (C) 1996, 1997, 2007 John W. Eaton
 @c This is part of the Octave manual.
 @c For copying conditions, see the file gpl.texi.
 
 @node Data Containers
 @chapter Data Containers
 @cindex containers
 
-Octave includes support for two different mechanaisms to contain
+Octave includes support for two different mechanisms to contain
 arbitrary data types in the same variable. Structures, which are C-like,
 and are indexed with named fields, and cell arrays, where each element
 of the array can have a different data type and or shape.
 
 @menu
 * Data Structures::
 * Cell Arrays::
 * Comma Separated Lists::
@@ -257,17 +257,17 @@ octave:2> x(1)
 ans =
 @{
   a = string1
   b =  1
 @}
 @end group
 @end example
 
-Furthermore, the structure array can return a comma seperated list
+Furthermore, the structure array can return a comma separated list
 (@pxref{Comma Separated Lists}), if indexed by one of itself field
 names. For example
 
 @example
 @group
 octave:3> x.a
 ans =
 
@@ -396,24 +396,24 @@ Other functions that can manipulate the 
 
 @DOCSTRING(getfield)
 
 @DOCSTRING(substruct)
 
 @node Processing Data in Structures
 @subsection Processing Data in Structures
 
-The simpliest way to process data in a structure is within a @code{for}
+The simplest way to process data in a structure is within a @code{for}
 loop or othe means of iterating over the fields. A similar effect can be
 achieved with the @code{structfun} function, where a user defined
-function is applied to eacg field of the structure.
+function is applied to each field of the structure.
 
 @DOCSTRING(structfun)
 
-Alternatively, to process the data in a strcuture, the structure might
+Alternatively, to process the data in a structure, the structure might
 be converted to another type of container before being treated.
 
 @DOCSTRING(struct2cell)
 
 @node Cell Arrays
 @section Cell Arrays
 @cindex cell arrays
 
@@ -532,17 +532,17 @@ of the first one is displayed
 c1 = cell(3, 4, 5);
 c2 = cell( [3, 4, 5] );
 size(c1)
      @result{} ans =
          3   4   5
 @end example
 
 @noindent
-As can be seen, the @code{size} function also work for cell arrays. As
+As can be seen, the @code{size} function also works for cell arrays. As
 do the other functions describing the size of an object, such as
 @code{length}, @code{numel}, @code{rows}, and @code{columns}.
 
 An alternative to creating empty cell arrays, and then filling them, it
 is possible to convert numerical arrays into cell arrays using the
 @code{num2cell} and @code{mat2cell} functions.
 
 @DOCSTRING(cell)
@@ -628,17 +628,17 @@ c = cellstr (a)
          @{
            [1,1] = hello
            [2,1] = world
          @}
 @end example
 
 One further advantage of using cell arrays to store multiple strings, is
 that most functions for string manipulations included with Octave
-supports this representation. As an example, it is possible to compare
+support this representation. As an example, it is possible to compare
 one string with many others using the @code{strcmp} function. If one of
 the arguments to this function is a string and the other is a cell array
 of strings, each element of the cell array will be compared the string
 argument,
 
 @example
 c = @{"hello", "world"@};
 strcmp ("hello", c)
@@ -775,17 +775,17 @@ in @{2@} = [];
 in @{3@} = 'last';
 in @{4@} = 'first';
 out = cell (4, 1);
 [out@{1:2@}] = find (in@{1 : 3@});
 [out@{3:4@}] = find (in@{[1, 2, 4]@});
 @end group
 @end example
 
-Structures arrays can equally be used to create comma separated
+Structure arrays can equally be used to create comma separated
 lists. This is done by addresses one of the fields of a structure
 array. For example
 
 @example
 @group
 x = ceil (randn (10, 1)); 
 in = struct ('call1', @{x, Inf, 'last'@}, 'call2', @{x, Inf, 'first'@});
 out = struct ('call1', cell (2, 1), 'call2', cell (2, 1));
diff --git a/doc/interpreter/dynamic.txi b/doc/interpreter/dynamic.txi
--- a/doc/interpreter/dynamic.txi
+++ b/doc/interpreter/dynamic.txi
@@ -33,17 +33,17 @@ for key pieces of code.
 
 Before going further, you should first determine if you really need to
 use dynamically linked functions at all.  Before proceeding with writing
 any dynamically linked function to improve performance you should
 address ask yourself
 
 @itemize @bullet
 @item
-Can I get the same functionality using the Octave scripting language only.
+Can I get the same functionality using the Octave scripting language only?
 @item
 Is it thoroughly optimized Octave code?  Vectorization of Octave code,
 doesn't just make it concise, it generally significantly improves its
 performance.  Above all, if loops must be used, make sure that the
 allocation of space for variables takes place outside the loops using an
 assignment to a like matrix or zeros.
 @item
 Does it make as much use as possible of existing built-in library
@@ -1291,17 +1291,17 @@ represents name, its dimensions, its typ
 real or complex.  It can however contain a number of additional fields
 depending on the type of the @code{mxArray}.  There are a number of
 functions to create @code{mxArray} structures, including
 @code{mxCreateCellArray}, @code{mxCreateSparse} and the generic
 @code{mxCreateNumericArray}.
 
 The basic functions to access the data contained in an array is
 @code{mxGetPr}.  As the mex interface assumes that the real and imaginary
-parts of a complex array are stored seperately, there is an equivalent
+parts of a complex array are stored separately, there is an equivalent
 function @code{mxGetPi} that get the imaginary part.  Both of these
 functions are for use only with double precision matrices.  There also
 exists the generic function @code{mxGetData} and @code{mxGetImagData}
 that perform the same operation on all matrix types.  For example
 
 @example
 @group
 mxArray *m;
@@ -1503,17 +1503,17 @@ b = mystruct(a)
 @end example
 
 @node Sparse Matrices with Mex-Files
 @subsection Sparse Matrices with Mex-Files
 
 The Octave format for sparse matrices is identical to the mex format in
 that it is a compressed colument sparse format.  Also in both, sparse
 matrices are required to be two dimensional.  The only difference is that
-the real and imaginary parts of the matrix are stored seperately.
+the real and imaginary parts of the matrix are stored separately.
 
 The mex-file interface, as well as using @code{mxGetM}, @code{mxGetN},
 @code{mxSetM}, @code{mxSetN}, @code{mxGetPr}, @code{mxGetPi},
 @code{mxSetPr} and @code{mxSetPi}, the mex-file interface supplies the
 functions
 
 @example
 @group
diff --git a/doc/interpreter/expr.txi b/doc/interpreter/expr.txi
--- a/doc/interpreter/expr.txi
+++ b/doc/interpreter/expr.txi
@@ -108,17 +108,17 @@ a ([1, 1], [1, 1, 1])
 create a 2 by 3 matrix with all elements equal to 13.
 
 This is an obscure notation and should be avoided.  It is better to
 use the function @code{ones} to generate a matrix of the appropriate
 size whose elements are all one, and then to scale it to produce the
 desired result.  @xref{Special Utility Matrices}.
 
 It is also possible to create a matrix with different values. The
-following example create a 10 dimensional row vector @math{a} containing
+following example creates a 10 dimensional row vector @math{a} containing
 the values
 @iftex
 @tex
 $a_i = \sqrt{i}$.
 @end tex
 @end iftex
 @ifnottex
 a(i) = sqrt(i).
@@ -309,17 +309,17 @@ argument.  Then Octave must create a cop
 value outside the scope of the function @code{f}, or attempting (and
 probably failing!) to modify the value of a constant or the value of a
 temporary result.
 
 @node Recursion
 @subsection Recursion
 @cindex factorial function
 
-With some restrictions@footnote{Some of Octave's function are
+With some restrictions@footnote{Some of Octave's functions are
 implemented in terms of functions that cannot be called recursively.
 For example, the ODE solver @code{lsode} is ultimately implemented in a
 Fortran subroutine that cannot be called recursively, so @code{lsode}
 should not be called either directly or indirectly from within the
 user-supplied function that @code{lsode} requires.  Doing so will result
 in an error.}, recursive function calls are allowed.  A
 @dfn{recursive function} is one which calls itself, either directly or
 indirectly.  For example, here is an inefficient@footnote{It would be
diff --git a/doc/interpreter/interp.txi b/doc/interpreter/interp.txi
--- a/doc/interpreter/interp.txi
+++ b/doc/interpreter/interp.txi
@@ -70,17 +70,17 @@ interpolation methods for a step functio
 
 Fourier interpolation, is a resampling technique where a signal is
 converted to the frequency domain, padded with zeros and then
 reconverted to the time domain.
 
 @DOCSTRING(interpft)
 
 There are two significant limitations on Fourier interpolation. Firstly,
-the function signal is assumed to be periodic, and so no periodic
+the function signal is assumed to be periodic, and so non periodic
 signals will be poorly represented at the edges. Secondly, both the
 signal and its interpolation are required to be sampled at equispaced
 points. An example of the use of @code{interpft} is
 
 @example
 @group
 t = 0 : 0.3 : pi; dt = t(2)-t(1);
 n = length (t); k = 100;
@@ -117,31 +117,31 @@ The @code{lookup} is used by other inter
 the points of the original data that are closest to the current point
 of interest.
 
 @DOCSTRING(lookup)
 
 @node Multi-dimensional Interpolation
 @section Multi-dimensional Interpolation
 
-There are three multi-dimensional interpolation function in Octave, with
+There are three multi-dimensional interpolation functions in Octave, with
 similar capabilities.  Methods using Delaunay tessellation are described
 in @ref{Interpolation on Scattered Data}.
 
 @DOCSTRING(interp2)
 
 @DOCSTRING(interp3)
 
 @DOCSTRING(interpn)
 
 A significant difference between @code{interpn} and the other two
-multidimensional interpolation function is the fashion in which the
+multidimensional interpolation functions is the fashion in which the
 dimensions are treated. For @code{interp2} and @code{interp3}, the 'y'
 axis is considered to be the columns of the matrix, whereas the 'x'
-axis corresponds to the rows the the array. As Octave indexes arrays in
+axis corresponds to the rows of the array. As Octave indexes arrays in
 column major order, the first dimension of any array is the columns, and
 so @code{interpn} effectively reverses the 'x' and 'y' dimensions. 
 Consider the example
 
 @example
 @group
 x = y = z = -1:1;
 f = @@(x,y,z) x.^2 - y - z.^2;
diff --git a/doc/interpreter/io.txi b/doc/interpreter/io.txi
--- a/doc/interpreter/io.txi
+++ b/doc/interpreter/io.txi
@@ -925,18 +925,18 @@ with the conversion @samp{%10c} produces
 reading the same input with the conversion @samp{%10s} produces
 @code{"hello,"}.
 
 @node Binary I/O
 @subsection Binary I/O
 
 Octave can read and write binary data using the functions @code{fread}
 and @code{fwrite}, which are patterned after the standard C functions
-with the same names.  The are able to automatically swap the byte order
-of integer data and convert among ths supported floating point formats
+with the same names.  They are able to automatically swap the byte order
+of integer data and convert among the supported floating point formats
 as the data are read.
 
 @DOCSTRING(fread)
 
 @DOCSTRING(fwrite)
 
 @node Temporary Files
 @subsection Temporary Files
diff --git a/doc/interpreter/linalg.txi b/doc/interpreter/linalg.txi
--- a/doc/interpreter/linalg.txi
+++ b/doc/interpreter/linalg.txi
@@ -27,17 +27,17 @@ the cost of factorizing the matrix itsel
 type is cached once it is calculated, so that it is not re-determined 
 each time it is used in a linear equation.
 
 The selection tree for how the linear equation is solve or a matrix
 inverse is form is given by
 
 @enumerate 1
 @item If the matrix is upper or lower triangular sparse a forward or
-backward substition using the @sc{Lapack} xTRTRS function, and goto 4.
+backward substitution using the @sc{Lapack} xTRTRS function, and goto 4.
 
 @c Permuted triangular matrices currently disabled in the code
 @c
 @c @item If the matrix is a upper triangular matrix with column permutations
 @c or lower triangular matrix with row permutations, perform a forward or
 @c backward substitution, and goto 5.
 
 @item If the matrix is square, hermitian with a real positive diagonal,
diff --git a/doc/interpreter/optim.txi b/doc/interpreter/optim.txi
--- a/doc/interpreter/optim.txi
+++ b/doc/interpreter/optim.txi
@@ -99,17 +99,17 @@ Octave can also perform general nonlinea
 successive quadratic programming solver.
 
 @DOCSTRING(sqp)
 
 @node Linear Least Squares
 @section Linear Least Squares
 
 Octave also supports linear least squares minimization.  That is,
-Octave can find the parameter @math{b} such the the model
+Octave can find the parameter @math{b} such that the model
 @iftex
 @tex
 $y = xb$
 @end tex
 @end iftex
 @ifnottex
 @math{y = x*b}
 @end ifnottex
diff --git a/doc/interpreter/quad.txi b/doc/interpreter/quad.txi
--- a/doc/interpreter/quad.txi
+++ b/doc/interpreter/quad.txi
@@ -32,22 +32,22 @@ These are
 @table @code
 @item quad
 Numerical integration based on Gaussian quadrature.
 
 @item quadl
 Numerical integration using an adaptive Lobatto rule.
 
 @item trapz
-Numerical integration using the trapezodial method.
+Numerical integration using the trapezoidal method.
 @end table
 
 @noindent
 Besides these functions Octave also allows you to perform cumulative
-numerical integration using the trapezodial method through the
+numerical integration using the trapezoidal method through the
 @code{cumtrapz} function.
 
 @DOCSTRING(quad)
 
 @DOCSTRING(quad_options)
 
 Here is an example of using @code{quad} to integrate the function
 @iftex
diff --git a/doc/interpreter/sparse.txi b/doc/interpreter/sparse.txi
--- a/doc/interpreter/sparse.txi
+++ b/doc/interpreter/sparse.txi
@@ -782,31 +782,31 @@ and are available at http://www.cise.ufl
 @end enumerate
 
 The band density is defined as the number of non-zero values in the matrix
 divided by the number of non-zero values in the matrix. The banded matrix
 solvers can be entirely disabled by using @dfn{spparms} to set @code{bandden}
 to 1 (i.e. @code{spparms ("bandden", 1)}).
 
 The QR solver factorizes the problem with a Dulmage-Mendhelsohn, to
-seperate the problem into blocks that can be treated as over-determined,
+separate the problem into blocks that can be treated as over-determined,
 multiple well determined blocks, and a final over-determined block. For
-matrices with blocks of strongly connectted nodes this is a big win as
+matrices with blocks of strongly connected nodes this is a big win as
 LU decomposition can be used for many blocks. It also significantly
 improves the chance of finding a solution to over-determined problems
 rather than just returning a vector of @dfn{NaN}'s.
 
 All of the solvers above, can calculate an estimate of the condition
 number. This can be used to detect numerical stability problems in the
 solution and force a minimum norm solution to be used. However, for
 narrow banded, triangular or diagonal matrices, the cost of
 calculating the condition number is significant, and can in fact
 exceed the cost of factoring the matrix. Therefore the condition
-number is not calculated in these case, and Octave relies on simplier
-techniques to detect sinular matrices or the underlying LAPACK code in
+number is not calculated in these cases, and Octave relies on simpler
+techniques to detect singular matrices or the underlying LAPACK code in
 the case of banded matrices.
 
 The user can force the type of the matrix with the @code{matrix_type}
 function. This overcomes the cost of discovering the type of the matrix.
 However, it should be noted incorrectly identifying the type of the matrix
 will lead to unpredictable results, and so @code{matrix_type} should be
 used with care.
 
diff --git a/doc/interpreter/stats.txi b/doc/interpreter/stats.txi
--- a/doc/interpreter/stats.txi
+++ b/doc/interpreter/stats.txi
@@ -19,18 +19,18 @@ a = [ 0.9, 0.7;
       0.5, 0.4 ];
 @end example
 
 @noindent
 contains three observations from a two-dimensional distribution.
 While this is the default data arrangement, most functions support
 different arrangements.
 
-It should be noted that the statistics functions doesn't handle data
-containing NaN, NA, or Inf.  Such values needs to be handled explicitly.
+It should be noted that the statistics functions don't handle data
+containing NaN, NA, or Inf.  Such values need to be handled explicitly.
 
 @menu
 * Descriptive Statistics::
 * Basic Statistical Functions:: 
 * Statistical Plots:: 
 * Tests::                       
 * Models::                      
 * Distributions::     
@@ -157,17 +157,17 @@ table summarizes the available tests.
 @item Observations from given distribution
   @tab @code{kolmogorov_smirnov_test}
 @item Regression
   @tab @code{f_test_regression}, @code{t_test_regression}
 @end multitable
 
 The tests return a p-value that describes the outcome of the test.
 Assuming that the test hypothesis is true, the p-value is the probability
-of obtaining a worse result then the observed one.  So large p-values
+of obtaining a worse result than the observed one.  So large p-values
 corresponds to a successful test.  Usually a test hypothesis is accepted
 if the p-value exceeds @math{0.05}.
 
 @DOCSTRING(anova)
 
 @DOCSTRING(bartlett_test)
 
 @DOCSTRING(chisquare_test_homogeneity)
diff --git a/doc/interpreter/stmt.txi b/doc/interpreter/stmt.txi
--- a/doc/interpreter/stmt.txi
+++ b/doc/interpreter/stmt.txi
@@ -560,17 +560,17 @@ multidimensional arrays. For example
 a = [1,3;2,4]; b = cat(3, a, 2*a);
 for i = c
   i
 endfor
 @end group 
 @end example
 
 @noindent
-In the above case, the mulitdimensional matrix @var{c} is reshaped to a
+In the above case, the multidimensional matrix @var{c} is reshaped to a
 two dimensional matrix as @code{reshape (c, rows(c),
 prod(size(c)(2:end)))} and then the same behavior as a loop over a two
 dimensional matrix is produced.
 
 Although it is possible to rewrite all @code{for} loops as @code{while}
 loops, the Octave language has both statements because often a
 @code{for} loop is both less work to type and more natural to think of.
 Counting the number of iterations is very common in loops and it can be
diff --git a/doc/interpreter/system.txi b/doc/interpreter/system.txi
--- a/doc/interpreter/system.txi
+++ b/doc/interpreter/system.txi
@@ -89,17 +89,17 @@ referred to as a @var{tm_struct}.
 @DOCSTRING(asctime)
 
 @DOCSTRING(strftime)
 
 @DOCSTRING(strptime)
 
 Most of the remaining functions described in this section are not
 patterned after the standard C library.  Some are available for
-compatiblity with @sc{Matlab} and others are provided because they are
+compatibility with @sc{Matlab} and others are provided because they are
 useful.
 
 @DOCSTRING(clock)
 
 @DOCSTRING(date)
 
 @DOCSTRING(etime)
 
