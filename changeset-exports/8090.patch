# HG changeset patch
# User Michael Goffioul
# Date 1220902125 14400
#      Mon Sep 08 15:28:45 2008 -0400
# Node ID 3cc1ca1b15763610fa534b23a9c4fd70c280785e
# Parent  0ec09255515a761aa2b4c7b57cda3bea23c7355d
MSVC compilation fix

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,18 @@
+2008-09-08  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* DLD-FUNCTIONS/__magick_read__.cc (encode_uint_image): Resolve "pow"
+	ambiguity.
+
+	* graphics.cc (base_properties::get_dynamic,
+	base_properties::set_dynamic, base_propertyes::get_property_dynamic):
+	Add the 3rd template parameter to std::map, corresponding to all_props
+	field.
+
 2008-09-08  John W. Eaton  <jwe@octave.org>
 
 	* ls-oct-ascii.cc (std::string extract_keyword (std::istream&,
 	const char *, const bool)): Also accept \r as line ending character.
 	* ls-oct-ascii.h (template <class T> bool extract_keyword
 	(std::istream&, const char *, T&, const bool)): Likewise.
 	(template <class T> bool extract_keyword (std::istream&, const
 	string_vector&, std::string&, T&, const bool)): Likewise.
diff --git a/src/DLD-FUNCTIONS/__magick_read__.cc b/src/DLD-FUNCTIONS/__magick_read__.cc
--- a/src/DLD-FUNCTIONS/__magick_read__.cc
+++ b/src/DLD-FUNCTIONS/__magick_read__.cc
@@ -562,17 +562,19 @@ encode_uint_image (std::vector<Magick::I
   if (dsizes.length () == 4)
     nframes = dsizes(3);
   bool is_color = ((dsizes.length () > 2) && (dsizes(2) > 2));
   bool has_alpha = (dsizes.length () > 2 && (dsizes(2) == 2 || dsizes(2) == 4));
 
   Array<octave_idx_type> idx (dsizes.length ());
   octave_idx_type rows = m.rows ();
   octave_idx_type columns = m.columns ();
-  unsigned int div_factor = pow (2, bitdepth) - 1;
+
+  // FIXME -- maybe simply using bit shifting would be better?
+  unsigned int div_factor = pow (2.0, static_cast<int> (bitdepth)) - 1;
 
   for (unsigned int ii = 0; ii < nframes; ii++)
     {
       Magick::Image im(Magick::Geometry (columns, rows), "black");
       im.depth (bitdepth);
       if (has_map)
         im.classType (Magick::PseudoClass);
       else
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -1544,57 +1544,57 @@ base_properties::set_from_list (base_gra
     }
 }
 
 octave_value
 base_properties::get_dynamic (const caseless_str& name) const
 {
   octave_value retval;
 
-  std::map<caseless_str, property>::const_iterator it = all_props.find (name);
+  std::map<caseless_str, property, cmp_caseless_str>::const_iterator it = all_props.find (name);
 
   if (it != all_props.end ())
     retval = it->second.get ();
   else
     error ("get: unknown property \"%s\"", name.c_str ());
 
   return retval;
 }
 
 octave_value
 base_properties::get_dynamic (bool all) const
 {
   Octave_map m;
 
-  for (std::map<caseless_str, property>::const_iterator it = all_props.begin ();
+  for (std::map<caseless_str, property, cmp_caseless_str>::const_iterator it = all_props.begin ();
        it != all_props.end (); ++it)
     if (all || ! it->second.is_hidden ())
       m.assign (it->second.get_name (), it->second.get ());
 
   return m;
 }
 
 void
 base_properties::set_dynamic (const caseless_str& name, const octave_value& val)
 {
-  std::map<caseless_str, property>::iterator it = all_props.find (name);
+  std::map<caseless_str, property, cmp_caseless_str>::iterator it = all_props.find (name);
 
   if (it != all_props.end ())
     it->second.set (val);
   else
     error ("set: unknown property \"%s\"", name.c_str ());
 
   if (! error_state)
     mark_modified ();
 }
 
 property
 base_properties::get_property_dynamic (const caseless_str& name)
 {
-  std::map<caseless_str, property>::const_iterator it = all_props.find (name);
+  std::map<caseless_str, property, cmp_caseless_str>::const_iterator it = all_props.find (name);
 
   if (it == all_props.end ())
     {
       error ("get_property: unknown property \"%s\"", name.c_str ());
       return property ();
     }
   else
     return it->second;
