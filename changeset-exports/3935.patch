# HG changeset patch
# User jwe
# Date 1021527051 0
#      Thu May 16 05:30:51 2002 +0000
# Node ID 1ea29376e43e2d209a70e421346a1763894eb37d
# Parent  31393822395b171d9b67cc499405224466f891d9
[project @ 2002-05-16 05:30:51 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,20 +1,27 @@
 2002-05-15  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* input.cc (generate_completion): If it looks like we are
+	completing a struct, set completion append char to '\0'.
+
+	* variables.cc (generate_struct_completions): Temporarily set
+	warnings off here.
+
 	* error.cc (warning): Don't do anything if Vdebug_option == "off".
 	Only print backtrace if Vdebug_option == "backtrace".
 	(handle_message): Now returns a string containing the text of the
 	formatted message.  Change all callers.
 	(Fwarning): Now a text-style function.  Handle Matlab-compatible
 	warning options.
-	(Flastwarn, set_warning_option): New functions.
-	(Vlast_warning_message, Vwarning_frequency, Vwarning_option):
-	New static variables.
+	(Flasterr, Flastwarn, set_warning_option): New functions.
+	(Vlast_error_message, Vlast_warning_message, Vwarning_frequency,
+	Vwarning_option): New static variables.
 	(vwarning): Set Vlast_warning_message here too.
+	(verror): Set Vlast_error_message here too.
 
 2002-05-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov.h (octave_value::get_count): Now const.
 
 	* ov.h, ov.cc (octave_value::do_non_const_unary_op,
 	octave_value::assign): Idx is now a list of octave_value_list
 	objects.
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -52,46 +52,62 @@ static bool Vbeep_on_error;
 // is encountered.  This will also inhibit printing of the normal
 // traceback message (you will only see the top-level error message).
 static bool Vdebug_on_error;
 
 // TRUE means that Octave will try to enter the debugger when a warning
 // is encountered.
 static bool Vdebug_on_warning;
 
+// The text of the last error message.
+static std::string Vlast_error_message;
+
 // The text of the last warning message.
 static std::string Vlast_warning_message;
 
 // The warning frequency for Matlab handle graphics backwards
 // compatibility warnings (currently not used).
 static std::string Vwarning_frequency = "once";
 
 // The current warning state.  Valid values are "on", "off",
 // "backtrace", or "debug".
-static std::string Vwarning_option = "backtrace";
+std::string Vwarning_option = "backtrace";
 
 // Current error state.
+//
+// Valid values:
+//
+//   -2: an error has occurred, but don't print any messages.
+//   -1: an error has occurred, we are printing a traceback
+//    0: no error
+//    1: an error has occurred
+//
 int error_state = 0;
 
 // Current warning state.
+//
+//  Valid values:
+//
+//    0: no warning
+//    1: a warning has occurred
+//
 int warning_state = 0;
 
 // Tell the error handler whether to print messages, or just store
 // them for later.  Used for handling errors in eval() and
 // the `unwind_protect' statement.
 bool buffer_error_messages = false;
 
 // TRUE means error messages are turned off.
 bool discard_error_messages = false;
 
 // The message buffer.
 static std::ostrstream *error_message_buffer = 0;
 
 // Warning messages are never buffered.
-// XXX FIXME XXX -- we should provide another way to turn them off...
 
 static void
 vwarning (const char *name, const char *fmt, va_list args)
 {
   flush_octave_stdout ();
 
   std::ostrstream output_buf;
 
@@ -99,23 +115,33 @@ vwarning (const char *name, const char *
     output_buf << name << ": ";
 
   octave_vformat (output_buf, fmt, args);
 
   output_buf << std::endl << std::ends;
 
   char *msg = output_buf.str ();
 
-  Vlast_warning_message = msg;
+  // XXX FIXME XXX -- we really want to capture the message before it
+  // has all the formatting goop attached to it.  We probably also
+  // want just the message, not the traceback information.
+
+  std::string msg_string = msg;
 
   delete [] msg;
 
-  octave_diary << Vlast_warning_message;
+  if (! warning_state)
+    {
+      // This is the first warning in a possible series.
+      Vlast_warning_message = msg_string;
+    }
 
-  std::cerr << Vlast_warning_message;
+  octave_diary << msg_string;
+
+  std::cerr << msg_string;
 }
 
 static void
 verror (const char *name, const char *fmt, va_list args)
 {
   if (discard_error_messages)
     return;
 
@@ -133,51 +159,58 @@ verror (const char *name, const char *fm
     output_buf << name << ": ";
 
   octave_vformat (output_buf, fmt, args);
 
   output_buf << std::endl << std::ends;
 
   char *msg = output_buf.str ();
 
+  // XXX FIXME XXX -- we really want to capture the message before it
+  // has all the formatting goop attached to it.  We probably also
+  // want just the message, not the traceback information.
+
+  std::string msg_string = msg;
+
+  delete [] msg;
+
+  if (! error_state && name && ! strcmp (name, "error"))
+    {
+      // This is the first error in a possible series.
+      Vlast_error_message = msg_string;
+    }
+
   if (buffer_error_messages)
     {
-      char *ptr = msg;
+      string tmp = msg_string;
 
       if (! error_message_buffer)
 	{
 	  error_message_buffer = new std::ostrstream;
 
 	  // XXX FIXME XXX -- this is ugly, but it prevents
 	  //
 	  //   eval ("error (\"msg\")", "error (__error_text__)");
 	  //
 	  // from printing `error: ' twice.  Assumes that the NAME we
 	  // have been given doesn't contain `:'.
 
-	  ptr = strchr (msg, ':');
+	  size_t pos = msg_string.find (':');
 
-	  if (ptr)
-	    {
-	      if (*++ptr != '\0')
-		++ptr;
-	    }
-	  else
-	    ptr = msg;
+	  if (pos != NPOS && pos < Vlast_error_message.length () - 2)
+	    tmp = msg_string.substr (pos+2);
 	}
 
-      *error_message_buffer << ptr;
+      *error_message_buffer << tmp;
     }
   else
     {
-      octave_diary << msg;
-      std::cerr << msg;
+      octave_diary << msg_string;
+      std::cerr << msg_string;
     }
-
-  delete [] msg;
 }
 
 // Note that we don't actually print any message if the error string
 // is just "" or "\n".  This allows error ("") and error ("\n") to
 // just set the error state.
 
 static void
 error_1 (const char *name, const char *fmt, va_list args)
@@ -316,20 +349,21 @@ pr_where (const char *name)
 
 void
 warning (const char *fmt, ...)
 {
   if (Vwarning_option != "off")
     {
       va_list args;
       va_start (args, fmt);
-      warning_state = 1;
       vwarning ("warning", fmt, args);
       va_end (args);
 
+      warning_state = 1;
+
       if (Vwarning_option == "backtrace")
 	pr_where ("warning");
 
       if ((interactive || forced_interactive)
 	  && Vdebug_on_warning && curr_function)
 	{
 	  unwind_protect_bool (Vdebug_on_warning);
 	  Vdebug_on_warning = false;
@@ -509,103 +543,130 @@ error: nargin != 1\n\
 {
   octave_value_list retval;
   handle_message (error, "unspecified error", args);
   return retval;
 }
 
 static inline octave_value_list
 set_warning_option (const std::string& state,
-		   const std::string& frequency, int nargout)
+		    const std::string& frequency, int nargout)
 {
   octave_value_list retval;
 
   if (nargout > 1)
     retval(1) = Vwarning_frequency;
 
-  if (nargout > 0)
+  if (nargout >= 0)
     retval(0) = Vwarning_option;
 
   if (! state.empty ())
     Vwarning_option = state;
     
   if (! frequency.empty ())
     Vwarning_frequency = frequency;
     
   return retval;
 }
 
-DEFUN_TEXT (warning, args, nargout,
+DEFUN (warning, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} warning (@var{msg})\n\
 Print a warning message @var{msg} prefixed by the string @samp{warning: }.  \n\
 After printing the warning message, Octave will continue to execute\n\
 commands.  You should use this function when you want to notify the user\n\
 of an unusual condition, but only when it makes sense for your program\n\
 to go on.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
-  string_vector argv = args.make_argv ("warning");
-
-  if (! error_state)
-    {
-      bool done = false;
+  bool done = false;
 
-      if (argc == 1)
-	{
-	  retval = set_warning_option ("", "", nargout);
-	  done = true;
-	}
-      else if (argc == 2)
+  if (args.all_strings_p ())
+    {
+      string_vector argv = args.make_argv ("warning");
+
+      if (! error_state)
 	{
-	  std::string arg = argv(1);
-
-	  if (arg == "on" || arg == "off" || arg == "backtrace")
+	  if (argc == 1)
 	    {
-	      retval = set_warning_option (arg, "", nargout);
-	      done = true;
-	    }
-	  else if (arg == "once" || arg == "always")
-	    {
-	      retval = set_warning_option ("", arg, nargout);
-	      done = true;
-	    }
-	  else if (arg == "debug")
-	    {
-	      bind_builtin_variable ("debug_on_warning", 1.0);
 	      retval = set_warning_option ("", "", nargout);
 	      done = true;
 	    }
-	}
+	  else if (argc == 2)
+	    {
+	      std::string arg = argv(1);
 
-      if (! done)
-	{
-	  std::string curr_msg
-	    = handle_message (warning, "unspecified warning", args);
-
-	  if (nargout > 0)
-	    retval(0) = Vlast_warning_message;
-
-	  Vlast_warning_message = curr_msg;
+	      if (arg == "on" || arg == "off" || arg == "backtrace")
+		{
+		  retval = set_warning_option (arg, "", nargout);
+		  done = true;
+		}
+	      else if (arg == "once" || arg == "always")
+		{
+		  retval = set_warning_option ("", arg, nargout);
+		  done = true;
+		}
+	      else if (arg == "debug")
+		{
+		  bind_builtin_variable ("debug_on_warning", 1.0);
+		  retval = set_warning_option ("", "", nargout);
+		  done = true;
+		}
+	    }
 	}
     }
 
+  if (! done)
+    {
+      std::string prev_msg = Vlast_warning_message;
+
+      std::string curr_msg
+	= handle_message (warning, "unspecified warning", args);
+
+      if (nargout > 0)
+	retval(0) = Vlast_warning_message;
+    }
+
   return retval;
 }
 
+DEFUN (lasterr, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} lasterr ()\n\
+@deftypefnx {Built-in Function} {} lasterr (@var{msg})\n\
+Without any arguments, return the last error message.  With one\n\
+argument, set the last warning message to @var{msg}.\n\
+@end deftypefn")
+{
+  octave_value_list retval;
+
+  int argc = args.length () + 1;
+
+  string_vector argv = args.make_argv ("lasterr");
+
+  if (argc == 1)
+    retval(0) = Vlast_error_message;
+  else if (argc == 2)
+    Vlast_error_message = argv(1);
+  else
+    print_usage ("lasterr");
+
+  return retval;  
+}
+
 DEFUN (lastwarn, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} lastwarn ()\n\
 @deftypefnx {Built-in Function} {} lastwarn (@var{msg})\n\
-Without any arguments, return the last error message.  With one\n\
-argument, set the last warning message to @var{msg}.\n\
+Without any arguments, return the last warning message.  With one\n\
+argument, set the last error message to @var{msg}.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("lastwarn");
 
diff --git a/src/error.h b/src/error.h
--- a/src/error.h
+++ b/src/error.h
@@ -18,16 +18,17 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 */
 
 #if !defined (octave_error_h)
 #define octave_error_h 1
 
+#include <string>
 #include <strstream>
 
 #define panic_impossible() \
   panic ("impossible state reached in file `%s' at line %d", \
 	 __FILE__, __LINE__)
 
 extern void message (const char *name, const char *fmt, ...);
 extern void usage (const char *fmt, ...);
@@ -45,15 +46,19 @@ extern int warning_state;
 // Tell the error handler whether to print messages, or just store
 // them for later.  Used for handling errors in eval() and
 // the `unwind_protect' statement.
 extern bool buffer_error_messages;
 
 // TRUE means error messages are turned off.
 extern bool discard_error_messages;
 
+// The current warning state.  Valid values are "on", "off",
+// "backtrace", or "debug".
+extern std::string Vwarning_option;
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -450,17 +450,21 @@ generate_completion (const std::string& 
 	  if (hint == name.substr (0, hint_len))
 	    {
 	      if (! prefix.empty ())
 		retval = prefix + "." + name;
 	      else
 		retval = name;
 
 	      if (matches == 1 && looks_like_struct (retval))
-		command_editor::set_completion_append_character ('.');
+		{
+		  // Don't append anything, since we don't know
+		  // whether it should be '(' or '.'.
+		  command_editor::set_completion_append_character ('\0');
+		}
 	      else
 		command_editor::set_completion_append_character
 		  (Vcompletion_append_char);
 
 	      break;
 	    }
 	}
     }
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -280,18 +280,24 @@ generate_struct_completions (const std::
       else
 	hint = text.substr (pos+1);
 
       prefix = text.substr (0, pos);
     }
 
   int parse_status;
 
+  unwind_protect_str (Vwarning_option);
+
+  Vwarning_option = "off";
+
   octave_value tmp = eval_string (prefix, true, parse_status);
 
+  unwind_protect::run ();
+
   if (tmp.is_defined () && tmp.is_map ())
     names = tmp.map_keys ();
 
   return names;
 }
 
 bool
 looks_like_struct (const std::string& text)
diff --git a/test/octave.test/error/error.exp b/test/octave.test/error/error.exp
--- a/test/octave.test/error/error.exp
+++ b/test/octave.test/error/error.exp
@@ -14,17 +14,17 @@ set test error-4
 set prog_output "error: foo"
 do_test error-4.m
 
 set test warning-1
 set prog_output "warning: foo"
 do_test warning-1.m
 
 set test warning-2
-set prog_output "warning: unspecified warning"
+set prog_output "ans = backtrace"
 do_test warning-2.m
 
 set test warning-3
 set prog_output "warning: foo"
 do_test warning-3.m
 
 set test usage-1
 set prog_output "usage: foo\nerror: called from `g'\nerror: called from `f'"
