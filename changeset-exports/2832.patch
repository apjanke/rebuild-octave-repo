# HG changeset patch
# User jwe
# Date 859353420 0
#      Wed Mar 26 05:17:00 1997 +0000
# Node ID 4dff308e9accd49d4aab4d73448f1dcba1816723
# Parent  19c45d29f17776548fa30f1906955692691aab65
[project @ 1997-03-26 05:16:58 by jwe]

diff --git a/liboctave/CMatrix.cc b/liboctave/CMatrix.cc
--- a/liboctave/CMatrix.cc
+++ b/liboctave/CMatrix.cc
@@ -2057,115 +2057,115 @@ ComplexMatrix::too_large_for_float (void
 	    || r_val < FLT_MIN
 	    || i_val < FLT_MIN)
 	  return true;
       }
 
   return false;
 }
 
-Matrix
+boolMatrix
 ComplexMatrix::all (void) const
 {
   int nr = rows ();
   int nc = cols ();
-  Matrix retval;
+  boolMatrix retval;
   if (nr > 0 && nc > 0)
     {
       if (nr == 1)
 	{
 	  retval.resize (1, 1);
-	  retval.elem (0, 0) = 1.0;
+	  retval.elem (0, 0) = true;
 	  for (int j = 0; j < nc; j++)
 	    {
 	      if (elem (0, j) == 0.0)
 		{
-		  retval.elem (0, 0) = 0.0;
+		  retval.elem (0, 0) = false;
 		  break;
 		}
 	    }
 	}
       else if (nc == 1)
 	{
 	  retval.resize (1, 1);
-	  retval.elem (0, 0) = 1.0;
+	  retval.elem (0, 0) = true;
 	  for (int i = 0; i < nr; i++)
 	    {
 	      if (elem (i, 0) == 0.0)
 		{
-		  retval.elem (0, 0) = 0.0;
+		  retval.elem (0, 0) = false;
 		  break;
 		}
 	    }
 	}
       else
 	{
 	  retval.resize (1, nc);
 	  for (int j = 0; j < nc; j++)
 	    {
-	      retval.elem (0, j) = 1.0;
+	      retval.elem (0, j) = true;
 	      for (int i = 0; i < nr; i++)
 		{
 		  if (elem (i, j) == 0.0)
 		    {
-		      retval.elem (0, j) = 0.0;
+		      retval.elem (0, j) = false;
 		      break;
 		    }
 		}
 	    }
 	}
     }
   return retval;
 }
 
-Matrix
+boolMatrix
 ComplexMatrix::any (void) const
 {
   int nr = rows ();
   int nc = cols ();
-  Matrix retval;
+  boolMatrix retval;
   if (nr > 0 && nc > 0)
     {
       if (nr == 1)
 	{
 	  retval.resize (1, 1);
-	  retval.elem (0, 0) = 0.0;
+	  retval.elem (0, 0) = false;
 	  for (int j = 0; j < nc; j++)
 	    {
 	      if (elem (0, j) != 0.0)
 		{
-		  retval.elem (0, 0) = 1.0;
+		  retval.elem (0, 0) = true;
 		  break;
 		}
 	    }
 	}
       else if (nc == 1)
 	{
 	  retval.resize (1, 1);
-	  retval.elem (0, 0) = 0.0;
+	  retval.elem (0, 0) = false;
 	  for (int i = 0; i < nr; i++)
 	    {
 	      if (elem (i, 0) != 0.0)
 		{
-		  retval.elem (0, 0) = 1.0;
+		  retval.elem (0, 0) = true;
 		  break;
 		}
 	    }
 	}
       else
 	{
 	  retval.resize (1, nc);
 	  for (int j = 0; j < nc; j++)
 	    {
-	      retval.elem (0, j) = 0.0;
+	      retval.elem (0, j) = false;
 	      for (int i = 0; i < nr; i++)
 		{
 		  if (elem (i, j) != 0.0)
 		    {
-		      retval.elem (0, j) = 1.0;
+		      retval.elem (0, j) = true;
 		      break;
 		    }
 		}
 	    }
 	}
     }
   return retval;
 }
diff --git a/liboctave/CMatrix.h b/liboctave/CMatrix.h
--- a/liboctave/CMatrix.h
+++ b/liboctave/CMatrix.h
@@ -208,18 +208,18 @@ public:
 
   ComplexMatrix& apply (c_c_Mapper f);
 
   bool any_element_is_inf_or_nan (void) const;
   bool all_elements_are_real (void) const;
   bool all_integers (double& max_val, double& min_val) const;
   bool too_large_for_float (void) const;
 
-  Matrix all (void) const;
-  Matrix any (void) const;
+  boolMatrix all (void) const;
+  boolMatrix any (void) const;
 
   ComplexMatrix cumprod (void) const;
   ComplexMatrix cumsum (void) const;
   ComplexMatrix prod (void) const;
   ComplexMatrix sum (void) const;
   ComplexMatrix sumsq (void) const;
 
   ComplexColumnVector diag (void) const;
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,10 +1,15 @@
 Tue Mar 25 17:37:25 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* boolMatrix.cc (boolMatrix::all, boolMatrix::any): New functions.
+
+	* dMatrix.cc (Matrix::all, Matrix::any): Return boolMatrix.
+	* CMatrix.cc (ComplexMatrix::all, ComplexMatrix::any): Likewise.
+
 	* idx-vector.h (idx_vector::idx_vector_rep::freeze,
 	idx_vector::freeze): Delete prefer_zero_one arg.
 	* Array-idx.h, Array2-idx.h: Change all callers.
 
 	* Array-flags.h, Array-flags.cc (liboctave_pzo_flag): Delete.
 
 	* mx-op-defs.h: New file for operator definitions.
 	* mx-cdm-cm.h, mx-cdm-cs.h, mx-cdm-dm.h, mx-cdm-m.h, mx-cdm-s.h,
diff --git a/liboctave/boolMatrix.cc b/liboctave/boolMatrix.cc
--- a/liboctave/boolMatrix.cc
+++ b/liboctave/boolMatrix.cc
@@ -70,13 +70,121 @@ boolMatrix::transpose (void) const
     {
       for (int j = 0; j < nc; j++)
 	for (int i = 0; i < nr; i++)
 	  result.elem (j, i) = elem (i, j);
     }
   return result;
 }
 
+boolMatrix
+Matrix::all (void) const
+{
+  int nr = rows ();
+  int nc = cols ();
+  boolMatrix retval;
+  if (nr > 0 && nc > 0)
+    {
+      if (nr == 1)
+	{
+	  retval.resize (1, 1);
+	  retval.elem (0, 0) = true;
+	  for (int j = 0; j < nc; j++)
+	    {
+	      if (! elem (0, j))
+		{
+		  retval.elem (0, 0) = false;
+		  break;
+		}
+	    }
+	}
+      else if (nc == 1)
+	{
+	  retval.resize (1, 1);
+	  retval.elem (0, 0) = true;
+	  for (int i = 0; i < nr; i++)
+	    {
+	      if (! elem (i, 0))
+		{
+		  retval.elem (0, 0) = false;
+		  break;
+		}
+	    }
+	}
+      else
+	{
+	  retval.resize (1, nc);
+	  for (int j = 0; j < nc; j++)
+	    {
+	      retval.elem (0, j) = true;
+	      for (int i = 0; i < nr; i++)
+		{
+		  if (! elem (i, j))
+		    {
+		      retval.elem (0, j) = false;
+		      break;
+		    }
+		}
+	    }
+	}
+    }
+  return retval;
+}
+
+boolMatrix
+Matrix::any (void) const
+{
+  int nr = rows ();
+  int nc = cols ();
+  boolMatrix retval;
+  if (nr > 0 && nc > 0)
+    {
+      if (nr == 1)
+	{
+	  retval.resize (1, 1);
+	  retval.elem (0, 0) = false;
+	  for (int j = 0; j < nc; j++)
+	    {
+	      if (elem (0, j))
+		{
+		  retval.elem (0, 0) = true;
+		  break;
+		}
+	    }
+	}
+      else if (nc == 1)
+	{
+	  retval.resize (1, 1);
+	  retval.elem (0, 0) = false;
+	  for (int i = 0; i < nr; i++)
+	    {
+	      if (elem (i, 0))
+		{
+		  retval.elem (0, 0) = true;
+		  break;
+		}
+	    }
+	}
+      else
+	{
+	  retval.resize (1, nc);
+	  for (int j = 0; j < nc; j++)
+	    {
+	      retval.elem (0, j) = false;
+	      for (int i = 0; i < nr; i++)
+		{
+		  if (elem (i, j))
+		    {
+		      retval.elem (0, j) = true;
+		      break;
+		    }
+		}
+	    }
+	}
+    }
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/boolMatrix.h b/liboctave/boolMatrix.h
--- a/liboctave/boolMatrix.h
+++ b/liboctave/boolMatrix.h
@@ -52,16 +52,19 @@ public:
   bool operator != (const boolMatrix& a) const;
 
   // destructive insert/delete/reorder operations
 
   boolMatrix& insert (const boolMatrix& a, int r, int c);
 
   boolMatrix transpose (void) const;
 
+  boolMatrix all (void) const;
+  boolMatrix any (void) const;
+
 #if 0
   // i/o
 
   friend ostream& operator << (ostream& os, const Matrix& a);
   friend istream& operator >> (istream& is, Matrix& a);
 #endif
 
 private:
diff --git a/liboctave/dMatrix.cc b/liboctave/dMatrix.cc
--- a/liboctave/dMatrix.cc
+++ b/liboctave/dMatrix.cc
@@ -1686,115 +1686,115 @@ Matrix::too_large_for_float (void) const
 
   return false;
 }
 
 // XXX FIXME XXX Do these really belong here?  They should maybe be
 // cleaned up a bit, no?  What about corresponding functions for the
 // Vectors?
 
-Matrix
+boolMatrix
 Matrix::all (void) const
 {
   int nr = rows ();
   int nc = cols ();
-  Matrix retval;
+  boolMatrix retval;
   if (nr > 0 && nc > 0)
     {
       if (nr == 1)
 	{
 	  retval.resize (1, 1);
-	  retval.elem (0, 0) = 1.0;
+	  retval.elem (0, 0) = true;
 	  for (int j = 0; j < nc; j++)
 	    {
 	      if (elem (0, j) == 0.0)
 		{
-		  retval.elem (0, 0) = 0.0;
+		  retval.elem (0, 0) = false;
 		  break;
 		}
 	    }
 	}
       else if (nc == 1)
 	{
 	  retval.resize (1, 1);
-	  retval.elem (0, 0) = 1.0;
+	  retval.elem (0, 0) = true;
 	  for (int i = 0; i < nr; i++)
 	    {
 	      if (elem (i, 0) == 0.0)
 		{
-		  retval.elem (0, 0) = 0.0;
+		  retval.elem (0, 0) = false;
 		  break;
 		}
 	    }
 	}
       else
 	{
 	  retval.resize (1, nc);
 	  for (int j = 0; j < nc; j++)
 	    {
-	      retval.elem (0, j) = 1.0;
+	      retval.elem (0, j) = true;
 	      for (int i = 0; i < nr; i++)
 		{
 		  if (elem (i, j) == 0.0)
 		    {
-		      retval.elem (0, j) = 0.0;
+		      retval.elem (0, j) = false;
 		      break;
 		    }
 		}
 	    }
 	}
     }
   return retval;
 }
 
-Matrix
+boolMatrix
 Matrix::any (void) const
 {
   int nr = rows ();
   int nc = cols ();
-  Matrix retval;
+  boolMatrix retval;
   if (nr > 0 && nc > 0)
     {
       if (nr == 1)
 	{
 	  retval.resize (1, 1);
-	  retval.elem (0, 0) = 0.0;
+	  retval.elem (0, 0) = false;
 	  for (int j = 0; j < nc; j++)
 	    {
 	      if (elem (0, j) != 0.0)
 		{
-		  retval.elem (0, 0) = 1.0;
+		  retval.elem (0, 0) = true;
 		  break;
 		}
 	    }
 	}
       else if (nc == 1)
 	{
 	  retval.resize (1, 1);
-	  retval.elem (0, 0) = 0.0;
+	  retval.elem (0, 0) = false;
 	  for (int i = 0; i < nr; i++)
 	    {
 	      if (elem (i, 0) != 0.0)
 		{
-		  retval.elem (0, 0) = 1.0;
+		  retval.elem (0, 0) = true;
 		  break;
 		}
 	    }
 	}
       else
 	{
 	  retval.resize (1, nc);
 	  for (int j = 0; j < nc; j++)
 	    {
-	      retval.elem (0, j) = 0.0;
+	      retval.elem (0, j) = false;
 	      for (int i = 0; i < nr; i++)
 		{
 		  if (elem (i, j) != 0.0)
 		    {
-		      retval.elem (0, j) = 1.0;
+		      retval.elem (0, j) = true;
 		      break;
 		    }
 		}
 	    }
 	}
     }
   return retval;
 }
diff --git a/liboctave/dMatrix.h b/liboctave/dMatrix.h
--- a/liboctave/dMatrix.h
+++ b/liboctave/dMatrix.h
@@ -183,18 +183,18 @@ public:
   Matrix& apply (d_d_Mapper f);
 
   bool any_element_is_negative (void) const;
   bool any_element_is_inf_or_nan (void) const;
   bool all_elements_are_int_or_inf_or_nan (void) const;
   bool all_integers (double& max_val, double& min_val) const;
   bool too_large_for_float (void) const;
  
-  Matrix all (void) const;
-  Matrix any (void) const;
+  boolMatrix all (void) const;
+  boolMatrix any (void) const;
 
   Matrix cumprod (void) const;
   Matrix cumsum (void) const;
   Matrix prod (void) const;
   Matrix sum (void) const;
   Matrix sumsq (void) const;
   Matrix abs (void) const;
 
diff --git a/scripts/miscellaneous/bug_report.m b/scripts/miscellaneous/bug_report.m
--- a/scripts/miscellaneous/bug_report.m
+++ b/scripts/miscellaneous/bug_report.m
@@ -42,20 +42,20 @@ function bug_report ()
     prefs = tmpnam ();
 
     if (! isempty (prefs))
       fopen (prefs, "w");
       dump_prefs (prefs);
       fclose (prefs);
     endif
 
-    cmd = "octave-bug";
+    cmd = strcat (OCTAVE_HOME, "/bin/octave-bug");
 
     if (length (subject) > 0)
-      cmd = sprintf ("%s/bin/%s -s \"%s\"", __OCTAVE_HOME__, cmd, subject);
+      cmd = sprintf ("%s -s \"%s\"", cmd, subject);
     endif
 
     if (! isempty (prefs))
       cmd = sprintf ("%s %s", cmd, prefs);
     endif
 
     system (cmd);
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 Tue Mar 25 17:17:17 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* ov-bool-mat.cc (octave_bool_matrix::is_true): Write guts.
+
+	* ov-bool-mat.h (octave_bool_matrix): Implement all() and any().
+
 	* defaults.cc (symbols_of_defaults): DEFCONST OCTAVE_HOME.
 
 	* toplev.cc (octave_config_info): Delete use of CXXLIBS.
 	* oct-conf.h.in: Ditto.
 
 	* octave.cc (maximum_braindamage): Don't bind prefer_zero_one_indexing.
 	* ov.h: Don't declare Vprefer_zero_one_indexing.
 	* ov.cc: Don't define Vprefer_zero_one_indexing.
