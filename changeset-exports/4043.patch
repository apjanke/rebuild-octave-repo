# HG changeset patch
# User jwe
# Date 1029382587 0
#      Thu Aug 15 03:36:27 2002 +0000
# Node ID 6fae69a1796e74fc8b36c00ce81e385d4b1a9f3e
# Parent  8bc97120fbd5f579bc38059297e98dc835008849
[project @ 2002-08-15 03:36:27 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,12 +1,16 @@
 2002-08-14  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* LSODE.cc (LSODE::error_message): Also return current T on
 	failures when that makes sense.
+	* DASSL.cc (DASSL::error_message): Likewise.
+	* DASRT.cc (DASRT::error_message): Likewise.
+	* DASPK.cc (DASPK::error_message): Likewise.
+	* ODESSA.cc (ODESSA:error_message): Likewise.
 
 	* Makefile.in (liboct-pathsearch.$(SHLEXT_VER)): Link to
 	$(LIBKPATHSEA) here.
 
 2002-08-08  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lo-ieee.cc (lo_ieee_is_NA): New function.
 	(lo_ieee_is_NaN_or_NA): New function.
diff --git a/liboctave/DASPK.cc b/liboctave/DASPK.cc
--- a/liboctave/DASPK.cc
+++ b/liboctave/DASPK.cc
@@ -26,16 +26,18 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cfloat>
 #include <cmath>
 
+#include <strstream>
+
 #include "DASPK.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 
 typedef int (*daspk_fcn_ptr) (const double&, const double*,
 			      const double*, const double&,
 			      double*, int&, double*, int*);
 
@@ -512,16 +514,22 @@ DASPK::integrate (const ColumnVector& to
   return retval;
 }
 
 std::string
 DASPK::error_message (void) const
 {
   std::string retval;
 
+  std::ostrstream buf;
+  buf << t << ends;
+  const char *t = buf.str ();
+  std::string t_curr = t;
+  delete [] t;
+
   switch (istate)
     {
     case 1:
       retval = "a step was successfully taken in intermediate-output mode.";
       break;
 
     case 2:
       retval = "integration completed by stepping exactly to TOUT";
@@ -531,62 +539,72 @@ DASPK::error_message (void) const
       retval = "integration to tout completed by stepping past TOUT";
       break;
 
     case 4:
       retval = "initial condition calculation completed successfully";
       break;
 
     case -1:
-      retval = "a large amount of work has been expended";
+      retval = std::string ("a large amount of work has been expended (t =")
+	+ t_curr + ")";
       break;
 
     case -2:
       retval = "the error tolerances are too stringent";
       break;
 
     case -3:
-      retval = "error weight became zero during problem.\
-  (solution component i vanished, and atol or atol(i) == 0)";
+      retval = std::string ("error weight became zero during problem. (t = ")
+	+ t_curr
+	+ "; solution component i vanished, and atol or atol(i) == 0)";
       break;
 
     case -6:
-      retval = "repeated error test failures on the last attempted step";
+      retval = std::string ("repeated error test failures on the last attempted step (t = ")
+	+ t_curr + ")";
       break;
 
     case -7:
-      retval = "the corrector could not converge";
+      retval = std::string ("the corrector could not converge (t = ")
+	+ t_curr + ")";
       break;
 
     case -8:
-      retval = "the matrix of partial derivatives is singular";
+      retval = std::string ("the matrix of partial derivatives is singular (t = ")
+	+ t_curr + ")";
       break;
 
     case -9:
-      retval = "the corrector could not converge (repeated test failures)";
+      retval = std::string ("the corrector could not converge (t = ")
+	+ t_curr + "; repeated test failures)";
       break;
 
     case -10:
-      retval = "corrector could not converge because IRES was -1";
+      retval = std::string ("corrector could not converge because IRES was -1 (t = ")
+	+ t_curr + ")";
       break;
 
     case -11:
-      retval = "return requested in user-supplied function";
+      retval = std::string ("return requested in user-supplied function (t = ")
+	+ t_curr + ")";
       break;
 
     case -12:
       retval = "failed to compute consistent initial conditions";
       break;
 
     case -13:
-      retval = "unrecoverable error encountered inside user's PSOL function";
+      retval = std::string ("unrecoverable error encountered inside user's PSOL function (t = ")
+	+ t_curr + ")";
       break;
 
     case -14:
-      retval = "the Krylov linear system solver failed to converge";
+      retval = std::string ("the Krylov linear system solver failed to converge (t = ")
+	+ t_curr + ")";
       break;
 
     case -33:
       retval = "unrecoverable error (see printed message)";
       break;
 
     default:
       retval = "unknown error state";
diff --git a/liboctave/DASRT.cc b/liboctave/DASRT.cc
--- a/liboctave/DASRT.cc
+++ b/liboctave/DASRT.cc
@@ -23,18 +23,17 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <iostream.h>
-#include <fstream.h>
+#include <strstream.h>
 
 #include <cstdlib>
 #include <cfloat>
 #include <cmath>
 #include "defun-dld.h"
 #include "error.h"
 #include "gripes.h"
 #include "oct-obj.h"
@@ -576,16 +575,22 @@ DASRT::integrate (const ColumnVector& to
   return retval;
 }
 
 std::string
 DASRT::error_message (void) const
 {
   std::string retval;
 
+  std::ostrstream buf;
+  buf << t << ends;
+  const char *t = buf.str ();
+  std::string t_curr = t;
+  delete [] t;
+
   switch (istate)
     {
     case 1:
       retval = "a step was successfully taken in intermediate-output mode.";
       break;
 
     case 2:
       retval = "integration completed by stepping exactly to TOUT";
@@ -595,50 +600,58 @@ DASRT::error_message (void) const
       retval = "integration to tout completed by stepping past TOUT";
       break;
 
     case 4:
       retval = "integration completed by finding one or more roots of G at T";
       break;
 
     case -1:
-      retval = "a large amount of work has been expended";
+      retval = std::string ("a large amount of work has been expended (t =")
+	+ t_curr + ")";
       break;
 
     case -2:
       retval = "the error tolerances are too stringent";
       break;
 
     case -3:
-      retval = "error weight became zero during problem.\
-  (solution component i vanished, and atol or atol(i) == 0)";
+      retval = std::string ("error weight became zero during problem. (t = ")
+	+ t_curr
+	+ "; solution component i vanished, and atol or atol(i) == 0)";
       break;
 
     case -6:
-      retval = "repeated error test failures on the last attempted step";
+      retval = std::string ("repeated error test failures on the last attempted step (t = ")
+	+ t_curr + ")";
       break;
 
     case -7:
-      retval = "the corrector could not converge";
+      retval = std::string ("the corrector could not converge (t = ")
+	+ t_curr + ")";
       break;
 
     case -8:
-      retval = "the matrix of partial derivatives is singular";
+      retval = std::string ("the matrix of partial derivatives is singular (t = ")
+	+ t_curr + ")";
       break;
 
     case -9:
-      retval = "the corrector could not converge (repeated test failures)";
+      retval = std::string ("the corrector could not converge (t = ")
+	+ t_curr + "; repeated test failures)";
       break;
 
     case -10:
-      retval = "corrector could not converge because IRES was -1";
+      retval = std::string ("corrector could not converge because IRES was -1 (t = ")
+	+ t_curr + ")";
       break;
 
     case -11:
-      retval = "return requested in user-supplied function";
+      retval = std::string ("return requested in user-supplied function (t = ")
+	+ t_curr + ")";
       break;
 
     case -12:
       retval = "failed to compute consistent initial conditions";
       break;
 
     case -33:
       retval = "unrecoverable error (see printed message)";
diff --git a/liboctave/DASSL.cc b/liboctave/DASSL.cc
--- a/liboctave/DASSL.cc
+++ b/liboctave/DASSL.cc
@@ -26,16 +26,18 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cfloat>
 #include <cmath>
 
+#include <strstream>
+
 #include "DASSL.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 
 typedef int (*dassl_fcn_ptr) (const double&, const double*, const double*,
 			      double*, int&, double*, int*);
 
 typedef int (*dassl_jac_ptr) (const double&, const double*, const double*,
@@ -476,65 +478,79 @@ DASSL::integrate (const ColumnVector& to
   return retval;
 }
 
 std::string
 DASSL::error_message (void) const
 {
   std::string retval;
 
+  std::ostrstream buf;
+  buf << t << ends;
+  const char *t = buf.str ();
+  std::string t_curr = t;
+  delete [] t;
+
   switch (istate)
     {
     case 1:
       retval = "a step was successfully taken in intermediate-output mode.";
       break;
 
     case 2:
       retval = "integration completed by stepping exactly to TOUT";
       break;
 
     case 3:
       retval = "integration to tout completed by stepping past TOUT";
       break;
 
     case -1:
-      retval = "a large amount of work has been expended";
+      retval = std::string ("a large amount of work has been expended (t =")
+	+ t_curr + ")";
       break;
 
     case -2:
       retval = "the error tolerances are too stringent";
       break;
 
     case -3:
-      retval = "error weight became zero during problem.\
-  (solution component i vanished, and atol or atol(i) == 0)";
+      retval = std::string ("error weight became zero during problem. (t = ")
+	+ t_curr
+	+ "; solution component i vanished, and atol or atol(i) == 0)";
       break;
 
     case -6:
-      retval = "repeated error test failures on the last attempted step";
+      retval = std::string ("repeated error test failures on the last attempted step (t = ")
+	+ t_curr + ")";
       break;
 
     case -7:
-      retval = "the corrector could not converge";
+      retval = std::string ("the corrector could not converge (t = ")
+	+ t_curr + ")";
       break;
 
     case -8:
-      retval = "the matrix of partial derivatives is singular";
+      retval = std::string ("the matrix of partial derivatives is singular (t = ")
+	+ t_curr + ")";
       break;
 
     case -9:
-      retval = "the corrector could not converge (repeated test failures)";
+      retval = std::string ("the corrector could not converge (t = ")
+	+ t_curr + "; repeated test failures)";
       break;
 
     case -10:
-      retval = "corrector could not converge because IRES was -1";
+      retval = std::string ("corrector could not converge because IRES was -1 (t = ")
+	+ t_curr + ")";
       break;
 
     case -11:
-      retval = "return requested in user-supplied function";
+      retval = std::string ("return requested in user-supplied function (t = ")
+	+ t_curr + ")";
       break;
 
     case -12:
       retval = "failed to compute consistent initial conditions";
       break;
 
     case -33:
       retval = "unrecoverable error (see printed message)";
diff --git a/liboctave/LSODE.cc b/liboctave/LSODE.cc
--- a/liboctave/LSODE.cc
+++ b/liboctave/LSODE.cc
@@ -26,17 +26,16 @@ Software Foundation, 59 Temple Place - S
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <cfloat>
 #include <cmath>
 
-#include <iostream>
 #include <strstream>
 
 #include "LSODE.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 
 typedef int (*lsode_fcn_ptr) (const int&, const double&, double*,
 			      double*, int&);
@@ -297,17 +296,17 @@ LSODE::do_integrate (double tout)
 std::string
 LSODE::error_message (void) const
 {
   std::string retval;
 
   std::ostrstream buf;
   buf << t << ends;
   const char *t = buf.str ();
-  std::string curr_t = t;
+  std::string t_curr = t;
   delete [] t;
 
   switch (istate)
     {
     case 1:
       retval = "prior to initial integration step";
       break;
 
@@ -316,47 +315,47 @@ LSODE::error_message (void) const
       break;
 	  
     case 3:
       retval = "prior to continuation call with modified parameters";
       break;
 	  
     case -1:
       retval = std::string ("excess work on this call (t = ")
-	+ curr_t + "; perhaps wrong integration method)";
+	+ t_curr + "; perhaps wrong integration method)";
       break;
 
     case -2:
       retval = "excess accuracy requested (tolerances too small)";
       break;
 
     case -3:
       retval = "invalid input detected (see printed message)";
       break;
 
     case -4:
       retval = std::string ("repeated error test failures (t = ")
-	+ curr_t + "check all inputs)";
+	+ t_curr + "check all inputs)";
       break;
 
     case -5:
       retval = std::string ("repeated convergence failures (t = ")
-	+ curr_t
+	+ t_curr
 	+ "perhaps bad jacobian supplied or wrong choice of integration method or tolerances)";
       break;
 
     case -6:
       retval = std::string ("error weight became zero during problem. (t = ")
-	+ curr_t
+	+ t_curr
 	+ "; solution component i vanished, and atol or atol(i) == 0)";
       break;
 
     case -13:
       retval = "return requested in user-supplied function (t = "
-	+ curr_t + ")";
+	+ t_curr + ")";
       break;
 
     default:
       retval = "unknown error state";
       break;
     }
 
   return retval;
diff --git a/liboctave/ODESSA.cc b/liboctave/ODESSA.cc
--- a/liboctave/ODESSA.cc
+++ b/liboctave/ODESSA.cc
@@ -23,22 +23,22 @@ Software Foundation, 59 Temple Place - S
 #if defined (__GNUG__)
 #pragma implementation
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
-#include <iostream.h>
-
 #include <cstdlib>
 #include <cfloat>
 #include <cmath>
 
+#include <strstream>
+
 // For instantiating the Array<Matrix> object.
 #include "Array.h"
 #include "Array.cc"
 
 #include "ODESSA.h"
 #include "f77-fcn.h"
 #include "lo-error.h"
 #include "error.h"
@@ -452,58 +452,69 @@ ODESSA::integrate (double tout)
     }
 }
 
 std::string
 ODESSA::error_message (void) const
 {
   std::string retval;
 
+  std::ostrstream buf;
+  buf << t << ends;
+  const char *t = buf.str ();
+  std::string t_curr = t;
+  delete [] t;
+
   switch (istate)
     {
     case 1:
       retval = "prior to initial integration step";
       break;
 
     case 2:
       retval = "successful exit";
       break;
           
     case 3:
       retval = "prior to continuation call with modified parameters";
       break;
           
     case -1:
-      retval = "excess work on this call (perhaps wrong integration method)";
+      retval = std::string ("excess work on this call (t = ")
+	+ t_curr + "; perhaps wrong integration method)";
       break;
 
     case -2:
       retval = "excess accuracy requested (tolerances too small)";
       break;
 
     case -3:
       retval = "invalid input detected (see printed message)";
       break;
 
     case -4:
-      retval = "repeated error test failures (check all inputs)";
+      retval = std::string ("repeated error test failures (t = ")
+	+ t_curr + "check all inputs)";
       break;
 
     case -5:
-      retval = "repeated convergence failures (perhaps bad jacobian\
- supplied or wrong choice of integration method or tolerances)";
+      retval = std::string ("repeated convergence failures (t = ")
+	+ t_curr
+	+ "perhaps bad jacobian supplied or wrong choice of integration method or tolerances)";
       break;
 
     case -6:
-      retval = "Error weight became zero during problem.\
-  (solution component i vanished, and atol or atol(i) == 0)";
+      retval = std::string ("error weight became zero during problem. (t = ")
+	+ t_curr
+	+ "; solution component i vanished, and atol or atol(i) == 0)";
       break;
 
     case -13:
-      retval = "return requested in user-supplied function";
+      retval = "return requested in user-supplied function (t = "
+	+ t_curr + ")";
       break;
 
     default:
       retval = "unknown error state";
       break;
     }
 
   return retval;
