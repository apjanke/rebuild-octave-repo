# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1253270406 14400
#      Fri Sep 18 06:40:06 2009 -0400
# Node ID ecdb275bd41b9015aa7f067119292beed5adfe17
# Parent  7234534f47ba414833f68eb394e52ccef2f309c4
make drawnow work for fltk backend

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-09-18  John W. Eaton  <jwe@octave.org>
+
+	* DLD-FUNCTIONS/fltk_backend.cc (fltk_backend::redraw_figure):
+	Call __fltk_redraw__ after marking figure as modified.
+
 2009-09-18  John W. Eaton  <jwe@octave.org>
 
 	* mexproto.h: Define OCTINTERP_API if it is not already defined.
 	Use C-style comments.
 
 2009-09-16  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/rand.cc (Frandperm): New function.
diff --git a/src/DLD-FUNCTIONS/fltk_backend.cc b/src/DLD-FUNCTIONS/fltk_backend.cc
--- a/src/DLD-FUNCTIONS/fltk_backend.cc
+++ b/src/DLD-FUNCTIONS/fltk_backend.cc
@@ -50,16 +50,18 @@ To initialize:
 #include <FL/gl.h>
 
 #ifdef min
 #undef min
 #undef max
 #endif
 
 #include "cmd-edit.h"
+#include "lo-ieee.h"
+
 #include "defun-dld.h"
 #include "error.h"
 #include "gl-render.h"
 #include "graphics.h"
 #include "parse.h"
 #include "variables.h"
 
 #define FLTK_BACKEND_NAME "fltk"
@@ -787,16 +789,51 @@ private:
   }
 };
 
 figure_manager *figure_manager::instance = 0;
 
 std::string figure_manager::fltk_idx_header="fltk index=";
 int figure_manager::curr_index = 1;
 
+static bool backend_registered = false;
+// give FLTK no more than 0.01 sec to do it's stuff
+static double fltk_maxtime = 1e-2;
+
+static int
+__fltk_redraw__ (void)
+{
+  if (backend_registered)
+    {
+      // we scan all figures and add those which use FLTK as a backend
+      graphics_object obj = gh_manager::get_object (0);
+      if (obj && obj.isa ("root"))
+	{
+	  base_properties& props = obj.get_properties ();
+	  Matrix children = props.get_children ();
+
+	  for (octave_idx_type n = 0; n < children.numel (); n++)
+	    {
+	      graphics_object fobj = gh_manager::get_object (children (n));
+	      if (fobj && fobj.isa ("figure"))
+		{
+		  figure::properties& fp =
+		      dynamic_cast<figure::properties&> (fobj.get_properties ());
+		  if (fp.get___backend__ () == FLTK_BACKEND_NAME)
+		    figure_manager::new_window (fp);
+		}
+	    }
+	}
+
+      Fl::wait (fltk_maxtime);
+    }
+
+  return 0;
+}
+
 class fltk_backend : public base_graphics_backend
 {
 public:
   fltk_backend (void)
     : base_graphics_backend (FLTK_BACKEND_NAME) { }
 
   ~fltk_backend (void) { }
 
@@ -827,16 +864,18 @@ public:
 	      }
 	  }
       }
   }
 
   void redraw_figure (const graphics_object& go) const
   {
     figure_manager::mark_modified (go.get_handle ());
+
+    __fltk_redraw__ ();
   }
 
   void print_figure (const graphics_object& /*go*/,
 		     const std::string& /*term*/,
 		     const std::string& /*file*/, bool /*mono*/,
 		     const std::string& /*debug_file*/) const { }
 
   Matrix get_canvas_size (const graphics_handle& fh) const
@@ -854,51 +893,16 @@ public:
   {
     Matrix sz (1, 2, 0.0);
     sz(0) = Fl::w ();
     sz(1) = Fl::h ();
     return sz;
   }
 };
 
-static bool backend_registered = false;
-// give FLTK no more than 0.01 sec to do it's stuff
-static double fltk_maxtime = 1e-2;
-
-static int
-__fltk_redraw__ (void)
-{
-  if (backend_registered)
-    {
-      // we scan all figures and add those which use FLTK as a backend
-      graphics_object obj = gh_manager::get_object (0);
-      if (obj && obj.isa ("root"))
-	{
-	  base_properties& props = obj.get_properties ();
-	  Matrix children = props.get_children ();
-
-	  for (octave_idx_type n = 0; n < children.numel (); n++)
-	    {
-	      graphics_object fobj = gh_manager::get_object (children (n));
-	      if (fobj && fobj.isa ("figure"))
-		{
-		  figure::properties& fp =
-		      dynamic_cast<figure::properties&> (fobj.get_properties ());
-		  if (fp.get___backend__ () == FLTK_BACKEND_NAME)
-		    figure_manager::new_window (fp);
-		}
-	    }
-	}
-
-      Fl::wait (fltk_maxtime);
-    }
-
-  return 0;
-}
-
 DEFUN_DLD (__fltk_redraw__, , , "")
 {
   __fltk_redraw__ ();
 
   return octave_value ();
 }
 
 // call this to init the fltk backend
