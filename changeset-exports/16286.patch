# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1363040690 14400
#      Mon Mar 11 18:24:50 2013 -0400
# Branch classdef
# Node ID f58257a6d18c024a143995db6412d0d6b99afb8e
# Parent  82ff1c5bbff09718a2ebdcea95b9460dfd4b7fb0
# Parent  3389152014cade1b88f8ac8cec5e2660d2477b26
maint: periodic merge of default to classdef

diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -516,18 +516,16 @@ public:
   bool have_continuation (bool trailing_comments_ok = true);
 
   bool have_ellipsis_continuation (bool trailing_comments_ok = true);
 
   int handle_string (char delim);
 
   int handle_close_bracket (int bracket_type);
 
-  bool next_token_can_follow_bin_op (void);
-
   bool looks_like_command_arg (void);
 
   int handle_superclass_identifier (void);
 
   int handle_meta_identifier (void);
 
   int handle_identifier (void);
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -789,31 +789,31 @@ ANY_INCLUDING_NL (.|{NL})
                     || curr_lexer->previous_token_is_binop ()
                     || curr_lexer->previous_token_is_keyword ())
                   {
                     curr_lexer->current_input_column++;
                     int retval = curr_lexer->handle_string ('\'');
                     return curr_lexer->count_token_internal (retval);
                   }
                 else
-                  return curr_lexer->count_token (QUOTE);
+                  return curr_lexer->count_token (HERMITIAN);
               }
           }
         else
           {
             if (! tok || tok == '[' || tok == '{' || tok == '('
                 || curr_lexer->previous_token_is_binop ()
                 || curr_lexer->previous_token_is_keyword ())
               {
                 curr_lexer->current_input_column++;
                 int retval = curr_lexer->handle_string ('\'');
                 return curr_lexer->count_token_internal (retval);
               }
             else
-              return curr_lexer->count_token (QUOTE);
+              return curr_lexer->count_token (HERMITIAN);
           }
       }
   }
 
 %{
 // Double quotes always begin strings.
 %}
 
@@ -1424,40 +1424,16 @@ Undocumented internal function.\n\
   octave_value retval;
 
   retval = set_internal_variable (lexer_debug_flag, args, nargout,
                                   "__lexer_debug_flag__");
 
   return retval;
 }
 
-class
-flex_stream_reader : public stream_reader
-{
-public:
-  flex_stream_reader (octave_lexer *l, char *buf_arg)
-    : stream_reader (), lexer (l), buf (buf_arg)
-  { }
-
-  int getc (void) { return lexer->text_yyinput (); }
-  int ungetc (int c) { lexer->xunput (c, buf); return 0; }
-
-private:
-
-  // No copying!
-
-  flex_stream_reader (const flex_stream_reader&);
-
-  flex_stream_reader& operator = (const flex_stream_reader&);
-
-  octave_lexer *lexer;
-
-  char *buf;
-};
-
 lexical_feedback::~lexical_feedback (void)
 {
   tokens.clear ();
 }
 
 void
 lexical_feedback::init (void)
 {
@@ -2437,45 +2413,16 @@ octave_lexer::handle_close_bracket (int 
     }
 
   pop_start_state ();
 
   return retval;
 }
 
 bool
-octave_lexer::next_token_can_follow_bin_op (void)
-{
-  std::stack<char> buf;
-
-  int c = EOF;
-
-  // Skip whitespace in current statement on current line
-  while (true)
-    {
-      c = text_yyinput ();
-
-      buf.push (c);
-
-      if (match_any (c, ",;\n") || (c != ' ' && c != '\t'))
-        break;
-    }
-
-  // Restore input.
-  while (! buf.empty ())
-    {
-      xunput (buf.top ());
-
-      buf.pop ();
-    }
-
-  return (isalnum (c) || match_any (c, "!\"'(-[_{~"));
-}
-
-bool
 octave_lexer::looks_like_command_arg (void)
 {
   bool space_before = space_follows_previous_token ();
   bool space_after = looking_at_space ();
 
   return (space_before && ! space_after
           && previous_token_may_be_command ());
 }
@@ -2768,17 +2715,17 @@ octave_lexer::display_token (int tok)
     case EXPR_GE: std::cerr << "EXPR_GE\n"; break;
     case EXPR_GT: std::cerr << "EXPR_GT\n"; break;
     case LEFTDIV: std::cerr << "LEFTDIV\n"; break;
     case EMUL: std::cerr << "EMUL\n"; break;
     case EDIV: std::cerr << "EDIV\n"; break;
     case ELEFTDIV: std::cerr << "ELEFTDIV\n"; break;
     case EPLUS: std::cerr << "EPLUS\n"; break;
     case EMINUS: std::cerr << "EMINUS\n"; break;
-    case QUOTE: std::cerr << "QUOTE\n"; break;
+    case HERMITIAN: std::cerr << "HERMITIAN\n"; break;
     case TRANSPOSE: std::cerr << "TRANSPOSE\n"; break;
     case PLUS_PLUS: std::cerr << "PLUS_PLUS\n"; break;
     case MINUS_MINUS: std::cerr << "MINUS_MINUS\n"; break;
     case POW: std::cerr << "POW\n"; break;
     case EPOW: std::cerr << "EPOW\n"; break;
 
     case NUM:
     case IMAG_NUM:
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -223,17 +223,17 @@ make_statement (T *arg)
 %token <tok_val> '=' ':' '-' '+' '*' '/'
 %token <tok_val> ADD_EQ SUB_EQ MUL_EQ DIV_EQ LEFTDIV_EQ POW_EQ
 %token <tok_val> EMUL_EQ EDIV_EQ ELEFTDIV_EQ EPOW_EQ AND_EQ OR_EQ
 %token <tok_val> LSHIFT_EQ RSHIFT_EQ LSHIFT RSHIFT
 %token <tok_val> EXPR_AND_AND EXPR_OR_OR
 %token <tok_val> EXPR_AND EXPR_OR EXPR_NOT
 %token <tok_val> EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %token <tok_val> LEFTDIV EMUL EDIV ELEFTDIV EPLUS EMINUS
-%token <tok_val> QUOTE TRANSPOSE
+%token <tok_val> HERMITIAN TRANSPOSE
 %token <tok_val> PLUS_PLUS MINUS_MINUS POW EPOW
 %token <tok_val> NUM IMAG_NUM
 %token <tok_val> STRUCT_ELT
 %token <tok_val> NAME
 %token <tok_val> END
 %token <tok_val> DQ_STRING SQ_STRING
 %token <tok_val> FOR PARFOR WHILE DO UNTIL
 %token <tok_val> IF ELSEIF ELSE
@@ -318,17 +318,17 @@ make_statement (T *arg)
 %left EXPR_OR
 %left EXPR_AND
 %left EXPR_LT EXPR_LE EXPR_EQ EXPR_NE EXPR_GE EXPR_GT
 %left LSHIFT RSHIFT
 %left ':'
 %left '-' '+' EPLUS EMINUS
 %left '*' '/' LEFTDIV EMUL EDIV ELEFTDIV
 %right UNARY EXPR_NOT
-%left POW EPOW QUOTE TRANSPOSE
+%left POW EPOW HERMITIAN TRANSPOSE
 %right PLUS_PLUS MINUS_MINUS
 %left '(' '.' '{'
 
 // Where to start.
 %start input
 
 %%
 
@@ -605,18 +605,18 @@ oper_expr       : primary_expr
                 | oper_expr '(' ')'
                   { $$ = curr_parser.make_index_expression ($1, 0, '('); }
                 | oper_expr '(' arg_list ')'
                   { $$ = curr_parser.make_index_expression ($1, $3, '('); }
                 | oper_expr '{' '}'
                   { $$ = curr_parser.make_index_expression ($1, 0, '{'); }
                 | oper_expr '{' arg_list '}'
                   { $$ = curr_parser.make_index_expression ($1, $3, '{'); }
-                | oper_expr QUOTE
-                  { $$ = curr_parser.make_postfix_op (QUOTE, $1, $2); }
+                | oper_expr HERMITIAN
+                  { $$ = curr_parser.make_postfix_op (HERMITIAN, $1, $2); }
                 | oper_expr TRANSPOSE
                   { $$ = curr_parser.make_postfix_op (TRANSPOSE, $1, $2); }
                 | oper_expr indirect_ref_op STRUCT_ELT
                   { $$ = curr_parser.make_indirect_ref ($1, $3->text ()); }
                 | oper_expr indirect_ref_op '(' expression ')'
                   { $$ = curr_parser.make_indirect_ref ($1, $4); }
                 | PLUS_PLUS oper_expr %prec UNARY
                   { $$ = curr_parser.make_prefix_op (PLUS_PLUS, $2, $1); }
@@ -2203,17 +2203,17 @@ octave_parser::make_prefix_op (int op, t
 
 tree_expression *
 octave_parser::make_postfix_op (int op, tree_expression *op1, token *tok_val)
 {
   octave_value::unary_op t = octave_value::unknown_unary_op;
 
   switch (op)
     {
-    case QUOTE:
+    case HERMITIAN:
       t = octave_value::op_hermitian;
       break;
 
     case TRANSPOSE:
       t = octave_value::op_transpose;
       break;
 
     case PLUS_PLUS:
@@ -3206,39 +3206,56 @@ octave_parser::validate_array_list (tree
 
 tree_argument_list *
 octave_parser::validate_matrix_for_assignment (tree_expression *e)
 {
   tree_argument_list *retval = 0;
 
   if (e->is_constant ())
     {
-      bison_error ("invalid empty LHS in [] = ... assignment");
+      octave_value ov = e->rvalue1 ();
+
+      if (ov.is_empty ())
+        bison_error ("invalid empty left hand side of assignment");
+      else
+        bison_error ("invalid constant left hand side of assignment");
+
       delete e;
     }
-  else if (e->is_matrix ())
-    {
-      tree_matrix *mat = dynamic_cast<tree_matrix *> (e);
-
-      if (mat && mat->size () == 1)
-        {
-          retval = mat->front ();
-          mat->pop_front ();
-          delete e;
-        }
-      else
-        {
-          bison_error ("invalid LHS in '[LHS] = ...' assignment");
-          delete e;
-        }
-    }
   else
     {
-      retval = new tree_argument_list (e);
-      retval->mark_as_simple_assign_lhs ();
+      bool is_simple_assign = true;
+
+      tree_argument_list *tmp = 0;
+
+      if (e->is_matrix ())
+        {
+          tree_matrix *mat = dynamic_cast<tree_matrix *> (e);
+
+          if (mat && mat->size () == 1)
+            {
+              tmp = mat->front ();
+              mat->pop_front ();
+              delete e;
+              is_simple_assign = false;
+            }
+        }
+      else
+        tmp = new tree_argument_list (e);
+
+      if (tmp && tmp->is_valid_lvalue_list ())
+        retval = tmp;
+      else
+        {
+          bison_error ("invalid left hand side of assignment");
+          delete tmp;
+        }
+
+      if (retval && is_simple_assign)
+        retval->mark_as_simple_assign_lhs ();
     }
 
   return retval;
 }
 
 // Finish building an array_list.
 
 tree_expression *
diff --git a/libinterp/parse-tree/pt-arg-list.cc b/libinterp/parse-tree/pt-arg-list.cc
--- a/libinterp/parse-tree/pt-arg-list.cc
+++ b/libinterp/parse-tree/pt-arg-list.cc
@@ -94,16 +94,39 @@ tree_argument_list::all_elements_are_con
 
       if (! elt->is_constant ())
         return false;
     }
 
   return true;
 }
 
+bool
+tree_argument_list::is_valid_lvalue_list (void) const
+{
+  bool retval = true;
+
+  for (const_iterator p = begin (); p != end (); p++)
+    {
+      tree_expression *elt = *p;
+
+      // There is no need for a separate check for the magic "~" because
+      // it represented by tree_black_hole, and that is derived from
+      // tree_identifier.
+
+      if (! (elt->is_identifier () || elt->is_index_expression ()))
+        {
+          retval = false;
+          break;
+        }
+    }
+
+  return retval;
+}
+
 static const octave_value *indexed_object = 0;
 static int index_position = 0;
 static int num_indices = 0;
 
 DEFCONSTFUN (__end__, , ,
   "internal function")
 {
   octave_value retval;
diff --git a/libinterp/parse-tree/pt-arg-list.h b/libinterp/parse-tree/pt-arg-list.h
--- a/libinterp/parse-tree/pt-arg-list.h
+++ b/libinterp/parse-tree/pt-arg-list.h
@@ -72,16 +72,18 @@ public:
   void append (const element_type& s);
 
   void mark_as_simple_assign_lhs (void) { simple_assign_lhs = true; }
 
   bool is_simple_assign_lhs (void) { return simple_assign_lhs; }
 
   bool all_elements_are_constant (void) const;
 
+  bool is_valid_lvalue_list (void) const;
+
   octave_value_list convert_to_const_vector (const octave_value *object = 0);
 
   std::list<octave_lvalue> lvalue_list (void);
 
   string_vector get_arg_names (void) const;
 
   tree_argument_list *dup (symbol_table::scope_id scope,
                            symbol_table::context_id context) const;
