# HG changeset patch
# User jwe
# Date 910069968 0
#      Tue Nov 03 05:12:48 1998 +0000
# Node ID e8a7163701be7d7aa7b9357559822753663d7dde
# Parent  dddfaa93a99cc909ce86305aaac435629cfca2f4
[project @ 1998-11-03 05:12:47 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,26 @@
 Mon Nov  2 13:36:04 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* lex.l (handle_close_brace): Also handle case of ']' followed by
+	other assignment ops (+=, -=, ...).
+
+	* pt-assign.cc (tree_simple_assignment::rvalue): Correctly handle
+	return value and printing for operators other than `='.
+	(tree_multi_assignment::rvalue): Likewise.
+
+	* pt-assign.h (tree_multi_assignment::etype): New data member.
+	* pt-assign.cc 	(tree_multi_assignment::rvalue): Use it instead of
+	assuming `='.
+	(tree_multi_assignment::oper): New function.
+	* pt-pr-code.cc (tree_print_code::visit_multi_assignment): Use
+	it instead of always printing `='. 
+	* parse.y (make_assign_op): Pass expression type to
+	tree_multi_assignment constructor.	
+
 	* Makefile.in (stmp-pic): New target.
 	($(PICOBJ)): Depend on stmp-pic, not pic.
 	(clean): Delete stmp-pic.
 
 Sun Nov  1 23:24:55 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* mappers.cc (install_mapper_functions): Add alias for isfinite.
 
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -1608,48 +1608,121 @@ handle_string (char delim, int text_styl
 	}
 
       escape_pending = 0;
     }
 
   return LEXICAL_ERROR;
 }
 
+static bool
+next_token_is_assign_op (void)
+{
+  bool retval = false;
+
+  int c0 = yyinput ();
+
+  switch (c0)
+    {
+    case '=':
+      {
+	int c1 = yyinput ();
+	unput (c1);
+	if (c1 != '=')
+	  retval = true;
+      }
+      break;
+
+    case '+':
+    case '-':
+    case '*':
+    case '/':
+    case '\\':
+    case '&':
+    case '|':
+      {
+	int c1 = yyinput ();
+	unput (c1);
+	if (c1 == '=')
+	  retval = true;
+      }
+      break;
+
+    case '.':
+      {
+	int c1 = yyinput ();
+	if (match_any (c1, "+-*/\\"))
+	  {
+	    int c2 = yyinput ();
+	    unput (c2);
+	    if (c2 == '=')
+	      retval = true;
+	  }
+	unput (c1);
+      }
+      break;
+
+    case '>':
+      {
+	int c1 = yyinput ();
+	if (c1 == '>')
+	  {
+	    int c2 = yyinput ();
+	    unput (c2);
+	    if (c2 == '=')
+	      retval = true;
+	  }
+	unput (c1);
+      }
+      break;
+
+    case '<':
+      {
+	int c1 = yyinput ();
+	if (c1 == '<')
+	  {
+	    int c2 = yyinput ();
+	    unput (c2);
+	    if (c2 == '=')
+	      retval = true;
+	  }
+	unput (c1);
+      }
+      break;
+
+    default:
+      break;
+    }
+
+  unput (c0);
+
+  return retval;
+}
+
 static int
 handle_close_brace (int spc_gobbled)
 {
+  int retval = ']';
+
   if (! nesting_level.none ())
     {
       nesting_level.remove ();
       lexer_flags.braceflag--;
     }
 
   if (lexer_flags.braceflag == 0)
     BEGIN 0;
 
-  // XXX FIXME XXX -- this needs to handle +=, -=, etc.
-
-  int c1 = yyinput ();
-  if (c1 == '=')
+  if (next_token_is_assign_op () && ! lexer_flags.looking_at_return_list)
     {
-      lexer_flags.quote_is_transpose = false;
-      lexer_flags.cant_be_identifier = false;
-      lexer_flags.convert_spaces_to_comma = true;
-
-      int c2 = yyinput ();
-      unput (c2);
-      unput (c1);
-
-      if (c2 == '=' || lexer_flags.looking_at_return_list)
-	return ']';
-      else
-	return CLOSE_BRACE;
+      retval = CLOSE_BRACE;
     }
   else
     {
+      int c1 = yyinput ();
       unput (c1);
 
       if (lexer_flags.braceflag && Vwhitespace_in_literal_matrix != 2)
 	{
 	  int bin_op = next_token_is_bin_op (spc_gobbled, yytext);
 	  int postfix_un_op = next_token_is_postfix_unary_op
 	    (spc_gobbled, yytext);
 
@@ -1663,17 +1736,18 @@ handle_close_brace (int spc_gobbled)
 	      return ']';
 	    }
 	}
     }
 
   lexer_flags.quote_is_transpose = true;
   lexer_flags.cant_be_identifier = false;
   lexer_flags.convert_spaces_to_comma = true;
-  return ']';
+
+  return retval;
 }
 
 static void
 maybe_unput_comma (int spc_gobbled)
 {
   if (Vwhitespace_in_literal_matrix != 2 && nesting_level.is_brace ())
     {
       int bin_op = next_token_is_bin_op (spc_gobbled, yytext);
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -2213,17 +2213,17 @@ make_assign_op (int op, tree_argument_li
     {
       tree_expression *tmp = lhs->remove_front ();
 
       retval = new tree_simple_assignment (tmp, rhs, false, l, c, t);
 
       delete lhs;
     }
   else
-    return new tree_multi_assignment (lhs, rhs, 0, l, c);
+    return new tree_multi_assignment (lhs, rhs, false, l, c, t);
 
   return retval;
 }
 
 // Begin defining a function.
 
 static octave_user_function *
 start_function (tree_parameter_list *param_list, tree_statement_list *body)
diff --git a/src/pt-assign.cc b/src/pt-assign.cc
--- a/src/pt-assign.cc
+++ b/src/pt-assign.cc
@@ -71,75 +71,78 @@ tree_simple_assignment::rvalue (int narg
 }
 
 // XXX FIXME XXX -- this works, but it would look a little better if
 // it were broken up into a couple of separate functions.
 
 octave_value
 tree_simple_assignment::rvalue (void)
 {
-  octave_value rhs_val;
+  octave_value retval;
 
   if (error_state)
-    return rhs_val;
+    return retval;
 
   if (rhs)
     {
       octave_value_list tmp = rhs->rvalue ();
 
       if (! (error_state || tmp.empty ()))
 	{
-	  rhs_val = tmp(0);
+	  octave_value rhs_val = tmp(0);
 
 	  if (rhs_val.is_undefined ())
 	    {
 	      error ("value on right hand side of assignment is undefined");
 	      eval_error ();
 	    }
 	  else
 	    {
 	      octave_lvalue ult = lhs->lvalue ();
 
 	      if (error_state)
 		eval_error ();
 	      else
 		{
 		  ult.assign (etype, rhs_val);
 
-		  // We clear any index here so that we can get the
-		  // new value of the referenced object below, instead
-		  // of the indexed value (which should be the same as
-		  // the right hand side value).
-
-		  ult.clear_index ();
+		  retval = ult.value ();
 
 		  if (error_state)
 		    eval_error ();
-		  else
+		  else if (print_result ())
 		    {
-		      octave_value lhs_val = ult.value ();
+		      if (Vprint_rhs_assign_val)
+			retval.print_with_name (octave_stdout,
+						lhs->str_print_code ());
+		      else
+			{
+			  // We clear any index here so that we can
+			  // get the new value of the referenced
+			  // object below, instead of the indexed
+			  // value (which should be the same as the
+			  // right hand side value).
 
-		      if (! error_state && print_result ())
-			{
-			  if (Vprint_rhs_assign_val)
-			    rhs_val.print_with_name (octave_stdout,
-						     lhs->str_print_code ());
-			  else
+			  ult.clear_index ();
+
+			  octave_value lhs_val = ult.value ();
+
+			  if (! error_state)
 			    lhs_val.print_with_name (octave_stdout,
 						     lhs->name ());
 			}
 		    }
 		}
 	    }
 	}
       else
 	eval_error ();
     }
 
-  return rhs_val;
+  return retval;
 }
 
 void
 tree_simple_assignment::eval_error (void)
 {
   if (error_state > 0)
     {
       int l = line ();
@@ -187,117 +190,124 @@ tree_multi_assignment::rvalue (void)
 }
 
 // XXX FIXME XXX -- this works, but it would look a little better if
 // it were broken up into a couple of separate functions.
 
 octave_value_list
 tree_multi_assignment::rvalue (int)
 {
-  octave_value_list rhs_val;
+  octave_value_list retval;
 
   if (error_state)
-    return rhs_val;
+    return retval;
 
   if (rhs)
     {
       int n_out = lhs->length ();
 
-      rhs_val = rhs->rvalue (n_out);
+      octave_value_list rhs_val = rhs->rvalue (n_out);
 
-      if (! (error_state || rhs_val.empty ()))
+      if (! error_state)
 	{
 	  if (rhs_val.empty ())
 	    {
 	      error ("value on right hand side of assignment is undefined");
 	      eval_error ();
 	    }
 	  else
 	    {
 	      int k = 0;
 
 	      int n = rhs_val.length ();
 
+	      retval.resize (n, octave_value ());
+
 	      for (Pix p = lhs->first (); p != 0; lhs->next (p))
 		{
 		  tree_expression *lhs_elt = lhs->operator () (p);
 
 		  if (lhs_elt)
 		    {
 		      octave_lvalue ult = lhs_elt->lvalue ();
 
 		      if (error_state)
 			eval_error ();
-		      else
+		      else if (k < n)
 			{
-			  octave_value tmp = k < n
-			    ? rhs_val(k++) : octave_value ();
+			  ult.assign (etype, rhs_val(k));
+
+			  retval(k) = ult.value ();
+			}
+		      else
+			error ("element number %d undefined in return list",
+			       k+1);
 
-			  if (tmp.is_defined ())
+		      if (error_state)
+			eval_error ();
+		      else if (print_result ())
+			{
+			  if (Vprint_rhs_assign_val)
+			    retval(k).print_with_name
+			      (octave_stdout, lhs_elt->str_print_code ());
+			  else
 			    {
-			      // XXX FIXME XXX -- handle other assignment ops.
-			      ult.assign (octave_value::asn_eq, tmp);
-
-			      // We clear any index here so that we
-			      // can get the new value of the
-			      // referenced object below, instead of
-			      // the indexed value (which should be
-			      // the same as the right hand side
-			      // value).
+			      // We clear any index here so that we can
+			      // get the new value of the referenced
+			      // object below, instead of the indexed
+			      // value (which should be the same as the
+			      // right hand side value).
 
 			      ult.clear_index ();
-			    }
-			  else
-			    error ("element number %d undefined in return list", k);
 
-			  if (error_state)
-			    eval_error ();
-			  else if (! Vprint_rhs_assign_val)
-			    {
 			      octave_value lhs_val = ult.value ();
 
-			      if (! error_state && print_result ())
-				{
-				  if (Vprint_rhs_assign_val)
-				    tmp.print_with_name (octave_stdout,
-							 lhs_elt->str_print_code ());
-				  else
-				    lhs_val.print_with_name (octave_stdout,
-							     lhs_elt->name ());
-				}
+			      if (! error_state)
+				lhs_val.print_with_name (octave_stdout,
+							 lhs_elt->name ());
 			    }
 			}
 		    }
+		  else
+		    eval_error ();
 
 		  if (error_state)
 		    break;
+
+		  k++;
 		}
 	    }
 	}
-      else
-	eval_error ();
     }
+  else
+    eval_error ();
 
-  return rhs_val;
+  return retval;
 }
 
 void
 tree_multi_assignment::eval_error (void)
 {
   if (error_state > 0)
     {
       int l = line ();
       int c = column ();
 
       if (l != -1 && c != -1)
 	::error ("evaluating assignment expression near line %d, column %d",
 		 l, c);
     }
 }
 
+string
+tree_multi_assignment::oper (void) const
+{
+  return octave_value::assign_op_as_string (etype);
+}
+
 void
 tree_multi_assignment::accept (tree_walker& tw)
 {
   tw.visit_multi_assignment (*this);
 }
 
 static int
 print_rhs_assign_val (void)
diff --git a/src/pt-assign.h b/src/pt-assign.h
--- a/src/pt-assign.h
+++ b/src/pt-assign.h
@@ -111,49 +111,62 @@ private:
 
 // Multi-valued assignment expressions.
 
 class
 tree_multi_assignment : public tree_expression
 {
 public:
 
-  tree_multi_assignment (bool plhs = false, int l = -1, int c = -1)
-    : tree_expression (l, c), preserve (plhs), lhs (0), rhs (0) { }
+  tree_multi_assignment (bool plhs = false, int l = -1, int c = -1,
+			 octave_value::assign_op t = octave_value::asn_eq)
+    : tree_expression (l, c), lhs (0), rhs (0), preserve (plhs), etype(t) { }
 
   tree_multi_assignment (tree_argument_list *lst, tree_expression *r,
-			 bool plhs = false, int l = -1, int c = -1)
-    : tree_expression (l, c), preserve (plhs), lhs (lst), rhs (r) { }
+			 bool plhs = false, int l = -1, int c = -1,
+			  octave_value::assign_op t = octave_value::asn_eq)
+    : tree_expression (l, c), lhs (lst), rhs (r), preserve (plhs),
+      etype (t) { }
 
   ~tree_multi_assignment (void);
 
   bool is_assignment_expression (void) const
     { return true; }
 
   bool rvalue_ok (void) const
     { return true; }
 
   octave_value rvalue (void);
 
   octave_value_list rvalue (int nargout);
 
   void eval_error (void);
 
+  string oper (void) const;
+
   tree_argument_list *left_hand_side (void) { return lhs; }
 
   tree_expression *right_hand_side (void) { return rhs; }
 
   void accept (tree_walker& tw);
 
 private:
 
-  bool preserve;
+  // The left hand side of the assignment.
   tree_argument_list *lhs;
+
+  // The right hand side of the assignment.
   tree_expression *rhs;
 
+  // True if we should not delete the lhs.
+  bool preserve;
+
+  // The type of the expression.
+  octave_value::assign_op etype;
+
   // No copying!
 
   tree_multi_assignment (const tree_multi_assignment&);
 
   tree_multi_assignment& operator = (const tree_multi_assignment&);
 };
 
 #endif
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -522,17 +522,17 @@ tree_print_code::visit_multi_assignment 
 	os << "[";
 
       lhs->accept (*this);
 
       if (len > 1)
 	os << "]";
     }
 
-  os << " = ";
+  os << " " << expr.oper () << " ";
 
   tree_expression *rhs = expr.right_hand_side ();
 
   if (rhs)
     rhs->accept (*this);
 
   print_parens (expr, ")");
 }
