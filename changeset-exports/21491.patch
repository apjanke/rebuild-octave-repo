# HG changeset patch
# User Mike Miller <mtmiller@octave.org>
# Date 1458345220 25200
#      Fri Mar 18 16:53:40 2016 -0700
# Node ID ab0a19882615f52d9e8cc123e8c0c0525a02fc88
# Parent  243b04c97b56b49610134f048c9b62b71cfff6df
* textscan.h, textscan.cc: More style fixes

diff --git a/libinterp/corefcn/textscan.cc b/libinterp/corefcn/textscan.cc
--- a/libinterp/corefcn/textscan.cc
+++ b/libinterp/corefcn/textscan.cc
@@ -206,17 +206,17 @@ delimited_stream::delimited_stream (std:
   idx = eob;                    // refresh_buf shouldn't try to copy old data
   progress_marker = idx;
   refresh_buf ();               // load the first batch of data
 }
 
 delimited_stream::~delimited_stream (void)
 {
   // Seek to the correct position in i_stream.
-  if (!eof ())
+  if (! eof ())
     {
       i_stream.clear ();
       i_stream.seekg (buf_in_file);
       i_stream.read (buf, idx - buf);
     }
 
   delete [] buf;
 }
@@ -447,17 +447,17 @@ public:
     literal_conversion = 2
   };
 
   textscan_format_elt (const char *txt = 0, int w = 0, int p = -1,
                        int bw = 0, bool dis = false, char typ = '\0',
                        const std::string& ch_class = std::string ())
     : text (strsave (txt)), width (w), prec (p), bitwidth (bw),
       char_class (ch_class), type (typ), discard (dis),
-      numeric(typ == 'd' || typ == 'u' || type == 'f' || type == 'n')
+      numeric (typ == 'd' || typ == 'u' || type == 'f' || type == 'n')
   { }
 
   textscan_format_elt (const textscan_format_elt& e)
     : text (strsave (e.text)), width (e.width), prec (e.prec),
       bitwidth (e.bitwidth), char_class (e.char_class), type (e.type),
       discard (e.discard), numeric (e.numeric)
   { }
 
@@ -580,17 +580,17 @@ private:
 
   // Index to current element;
   size_t curr_idx;
 
   // List of format elements.
   std::deque<textscan_format_elt*> fmt_elts;
 
   // list holding column arrays of types specified by conversions
-  std::list<octave_value > output_container;
+  std::list<octave_value> output_container;
 
   // Temporary buffer.
   std::ostringstream *buf;
 
   void add_elt_to_list (unsigned int width, int prec, int bitwidth,
                         octave_value val_type, bool discard,
                         char type,
                         const std::string& char_class = std::string ());
@@ -1451,17 +1451,17 @@ textscan::do_scan (std::istream& isp, te
       for (std::list<octave_value>::iterator col = out.begin ();
            col != out.end (); col++)
         {
           if (! merge_with_prev [conv++])  // including first time
             {
               if (prev_type != -1)
                 {
                   ra_idx(1) = i++;
-                  retval = do_cat_op (retval, octave_value (Cell(cur)),
+                  retval = do_cat_op (retval, octave_value (Cell (cur)),
                                       ra_idx);
                 }
               cur = octave_value (col->resize (dv,0));
               group_size = 1;
               prev_type = col->type_id ();
             }
           else
             {
@@ -2169,17 +2169,17 @@ textscan::scan_one (delimited_stream& is
 }
 
 // Read data corresponding to the entire format string once, placing the
 // values in row ROW of retval.
 
 int
 textscan::read_format_once (delimited_stream& is,
                             textscan_format_list& fmt_list,
-                            std::list<octave_value> & retval,
+                            std::list<octave_value>& retval,
                             Array<octave_idx_type> row, int& done_after)
 {
   const textscan_format_elt *elem = fmt_list.first ();
   std::list<octave_value>::iterator out = retval.begin ();
   bool no_conversions = true;
   bool done = false;
   bool conversion_failed = false;       // Record for ReturnOnError
 
@@ -2320,17 +2320,17 @@ textscan::parse_options (const octave_va
               for (int j = 0; j < delim_list.numel (); j++)
                 {
                   if (! delim_list(j).is_string ())
                     invalid = true;
                   else
                     {
                       octave_idx_type len = delim_list(j).string_value ()
                                                          .length ();
-                      delim_len = std::max (static_cast<int>(len), delim_len);
+                      delim_len = std::max (static_cast<int> (len), delim_len);
                     }
                 }
             }
           if (invalid)
             error ("textscan:  Delimiters must be either a string or "
                    "cell array of strings");
         }
       else if (param == "commentstyle")
@@ -3035,17 +3035,17 @@ from the beginning of the file or string
   if (args(0).is_string ())
     {
       std::istringstream is (args(0).string_value ());
 
       retval(0) = tscanner.scan (is, tmp_args);
 
       std::ios::iostate state = is.rdstate ();
       is.clear ();
-      retval(1) = octave_value (static_cast<long>(is.tellg ()));
+      retval(1) = octave_value (static_cast<long> (is.tellg ()));
       is.setstate (state);
     }
   else
     {
       octave_stream os = octave_stream_list::lookup (args(0), "textscan");
       std::istream *isp = os.input_stream ();
       if (! isp)
         error ("internal error: textscan called with invalid istream");
@@ -3176,17 +3176,17 @@ from the beginning of the file or string
 %! c = textscan (str, "%10.2f %f", "delimiter", ",", "collectOutput", 1,
 %!                "expChars", "e|");
 %! assert (c, {[1223 34; 12345.79-9876j 78; NaN 10000]}, 1e-6);
 
 %!test
 %! ## Multi-character delimiter
 %! str = "99end2 space88gap 4564";
 %! c = textscan (str, "%d %s", "delimiter", {"end", "gap", "space"});
-%! assert (c{1}, int32([99; 88]));
+%! assert (c{1}, int32 ([99; 88]));
 %! assert (c{2}, {"2 "; "4564"});
 
 ### Delimiters as part of literals, and following literals
 #%!test
 #%! str = "12 R&D & 7";
 #%! c = textscan (str, "%f R&D %f", "delimiter", "&", "collectOutput", 1, "EmptyValue", -99);
 #%! assert (c, {[12 -99; 7 -99]});
 #
@@ -3302,17 +3302,17 @@ from the beginning of the file or string
 
 ## Test incomplete first data line
 %! R = textscan (['Empty1' char(10)], 'Empty%d %f');
 %! assert (R{1}, int32 (1));
 %! assert (isempty (R{2}), true);
 
 ## bug #37023
 %!test
-%! data = textscan("   1. 1 \n 2 3\n", '%f %f');
+%! data = textscan ("   1. 1 \n 2 3\n", '%f %f');
 %! assert (data{1}, [1; 2], 1e-15);
 %! assert (data{2}, [1; 3], 1e-15);
 
 ## Whitespace test (bug #37333) using delimiter ";"
 %!test
 %! tc = [];
 %! tc{1, 1} = "C:/code;";
 %! tc{1, end+1} = "C:/code/meas;";
@@ -3522,17 +3522,17 @@ from the beginning of the file or string
 %! assert (textscan ("/home/foo/", "%s", "delimiter", "/", "MultipleDelimsAsOne", 1){1}, ...
 %!         {"home"; "foo"});
 
 ### Allow cuddling %sliteral but warn it is ambiguous
 #%!test
 #%! C = textscan ("abcxyz51\nxyz83\n##xyz101", "%s xyz %d");
 #%! assert (C{1}([1 3]), {"abc"; "##"});
 #%! assert (isempty (C{1}{2}), true);
-#%! assert (C{2}, int32([51; 83; 101]));
+#%! assert (C{2}, int32 ([51; 83; 101]));
 ### Literals are not delimiters.
 
 ## Test for false positives in check for non-supported format specifiers
 %!test
 %! assert (textscan ("Total: 32.5 % (of cm values)", "Total: %f %% (of cm values)"){1}, 32.5, 1e-5);
 
 ## Test various forms of string format specifiers (bug #45712)
 %!test
@@ -3649,72 +3649,72 @@ from the beginning of the file or string
 
 %% Check overflow and underflow of integer types
 %!test
 %! a = "-1e90 ";
 %! b = "1e90 ";
 %! fmt = "%d8 %d16 %d32 %d64 %u8 %u16 %u32 %u64 ";
 %! C = textscan ([a a a a a a a a b b b b b b b b], fmt);
 %! assert (C{1}, int8 ([-128; 127]));
-%! assert (C{2}, int16([-32768; 32767]));
-%! assert (C{3}, int32([-2147483648; 2147483647]));
-%! assert (C{4}, int64([-9223372036854775808; 9223372036854775807]));
+%! assert (C{2}, int16 ([-32768; 32767]));
+%! assert (C{3}, int32 ([-2147483648; 2147483647]));
+%! assert (C{4}, int64 ([-9223372036854775808; 9223372036854775807]));
 %! assert (C{5}, uint8 ([0; 255]));
-%! assert (C{6}, uint16([0; 65535]));
-%! assert (C{7}, uint32([0; 4294967295]));
-%! assert (C{8}, uint64([0; 18446744073709551615]));
+%! assert (C{6}, uint16 ([0; 65535]));
+%! assert (C{7}, uint32 ([0; 4294967295]));
+%! assert (C{8}, uint64 ([0; 18446744073709551615]));
 
 %% Tests from Matlab (does The MathWorks have any copyright over the input?)
 %!test
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! fprintf (fid,"09/12/2005 Level1 12.34 45 1.23e10 inf Nan Yes 5.1+3i\n");
 %! fprintf (fid,"10/12/2005 Level2 23.54 60 9e19 -inf  0.001 No 2.2-.5i\n");
 %! fprintf (fid,"11/12/2005 Level3 34.90 12 2e5   10  100   No 3.1+.1i\n");
 %! fseek (fid, 0, "bof");
-%! C = textscan(fid,"%s %s %f32 %d8 %u %f %f %s %f");
+%! C = textscan (fid,"%s %s %f32 %d8 %u %f %f %s %f");
 %! %assert (C{1}, {"09/12/2005";"10/12/2005";"11/12/2005"});
 %! assert (C{2}, {"Level1";"Level2";"Level3"});
 %! assert (C{3}, [single(12.34);single(23.54);single(34.90)]);
 %! assert (C{4}, [int8(45);int8(60);int8(12)]);
 %! assert (C{5}, [uint32(4294967295);uint32(4294967295);uint32(200000)]);
 %! assert (C{6}, [inf;-inf;10]);
 %! assert (C{7}, [NaN;0.001;100], eps);
 %! assert (C{8}, {"Yes";"No";"No"});
 %! assert (C{9}, [5.1+3i;2.2-0.5i;3.1+0.1i]);
 %! fseek (fid, 0, "bof");
-%! C = textscan(fid,"%s Level%d %f32 %d8 %u %f %f %s %f");
+%! C = textscan (fid,"%s Level%d %f32 %d8 %u %f %f %s %f");
 %! assert (C{2}, [int32(1);int32(2);int32(3)]);
 %! assert (C{3}, [single(12.34);single(23.54);single(34.90)]);
 %! fseek (fid, 0, "bof");
-%! C = textscan(fid,'%s %*[^\n]');
+%! C = textscan (fid,'%s %*[^\n]');
 %! fclose (fid);
 %! unlink (f);
 %! assert (C, {{"09/12/2005";"10/12/2005";"11/12/2005"}});
 
 %!test
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! fprintf (fid,"1,  2,  3,  4,   ,  6\n");
 %! fprintf (fid,"7,  8,  9,   , 11, 12\n");
 %! fseek (fid, 0, "bof");
-%! C = textscan(fid,"%f %f %f %f %u8 %f", "Delimiter",",","EmptyValue",-Inf);
+%! C = textscan (fid,"%f %f %f %f %u8 %f", "Delimiter",",","EmptyValue",-Inf);
 %! fclose (fid);
 %! unlink (f);
 %! assert (C{4}, [4; -Inf]);
 %! assert (C{5}, uint8 ([0; 11]));
 
 %!test
 %! f = tempname ();
 %! fid = fopen (f, "w+");
 %! fprintf (fid,"abc, 2, NA, 3, 4\n");
 %! fprintf (fid,"// Comment Here\n");
 %! fprintf (fid,"def, na, 5, 6, 7\n");
 %! fseek (fid, 0, "bof");
-%! C = textscan(fid,"%s %n %n %n %n","Delimiter",",","TreatAsEmpty",{"NA","na"},"CommentStyle","//");
+%! C = textscan (fid,"%s %n %n %n %n","Delimiter",",","TreatAsEmpty",{"NA","na"},"CommentStyle","//");
 %! fclose (fid);
 %! unlink (f);
 %! assert (C{1}, {"abc";"def"});
 %! assert (C{2}, [2; NaN]);
 %! assert (C{3}, [NaN; 5]);
 %! assert (C{4}, [3; 6]);
 %! assert (C{5}, [4; 7]);
 
diff --git a/libinterp/corefcn/textscan.h b/libinterp/corefcn/textscan.h
--- a/libinterp/corefcn/textscan.h
+++ b/libinterp/corefcn/textscan.h
@@ -125,18 +125,18 @@ private:
   octave_idx_type lines;
 
   octave_value do_scan (std::istream& isp, textscan_format_list& fmt_list,
                         octave_idx_type ntimes);
 
   void parse_options (const octave_value_list& args,
                       textscan_format_list& fmt_list);
 
-  int read_format_once (delimited_stream &isp, textscan_format_list& fmt_list,
-                        std::list<octave_value> & retval,
+  int read_format_once (delimited_stream& isp, textscan_format_list& fmt_list,
+                        std::list<octave_value>& retval,
                         Array<octave_idx_type> row, int& done_after);
 
   void scan_one (delimited_stream& is, const textscan_format_elt& fmt,
                  octave_value& ov, Array<octave_idx_type> row);
 
   // Methods to process a particular conversion specifier.
   double read_double (delimited_stream& is,
                       const textscan_format_elt& fmt) const;
