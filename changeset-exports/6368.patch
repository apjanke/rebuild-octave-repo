# HG changeset patch
# User jwe
# Date 1172700444 0
#      Wed Feb 28 22:07:24 2007 +0000
# Node ID ec2a523713b5abb8c41455575098a93e96669a3e
# Parent  268bfc8a2755be62c5d55f334f533b5972e10ad4
[project @ 2007-02-28 22:07:24 by jwe]

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2007-02-28  Daniel J Sebald  <daniel.sebald@ieee.org>
+
+	* plot/__uiobject_draw_axes__.m: Improve calculation of limits for
+	plots with images.
+	* image/image.m, image/imagesc.m, image/imshow.m:
+	Deprecate zoom argument.
+
 2007-02-28  John W. Eaton  <jwe@octave.org>
 
 	* plot/__uiobject_draw_axes__.m: Use fullfile to generate
 	temporary file names.  Keep image and colormap file ids separate.
 
 	* general/interp1.m: Correctly compute min and max values when
 	values are decreasing and not evenly spaced.
 	From Ricardo Marranita <ricardo.marranita@gmail.com>.
diff --git a/scripts/image/image.m b/scripts/image/image.m
--- a/scripts/image/image.m
+++ b/scripts/image/image.m
@@ -36,28 +36,36 @@
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
 function image (x, y, img)
 
-  newplot ();
+  ## Deprecated zoom.  Remove this hunk of code if old zoom argument
+  ## is outmoded.
+  if ((nargin == 2 && isscalar (y)) || nargin == 4)
+    warning ("image: zoom argument ignored -- use GUI features");
+  endif
+  if (nargin == 4)
+    nargin = 3;
+  endif
+  if (nargin == 2 && isscalar (y))
+    nargin = 1;
+  endif
 
   if (nargin == 0)
     ## Load Bobbie Jo Richardson (Born 3/16/94)
     img = loadimage ("default.img");
     x = y = [];
-  elseif (nargin == 1 || nargin == 2)
-    ## FIXME -- should we handle the old zoom argument?  How?  What
-    ## figure property should we be setting?
+  elseif (nargin == 1)
     img = x;
     x = y = [];
-  elseif (nargin > 3)
+  elseif (nargin == 2 || nargin > 3)
     print_usage ();
   endif
 
   tmp = __img__ (x, y, img);
 
   if (nargout > 0)
     h = tmp;
   endif
diff --git a/scripts/image/imagesc.m b/scripts/image/imagesc.m
--- a/scripts/image/imagesc.m
+++ b/scripts/image/imagesc.m
@@ -15,65 +15,77 @@
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} imagesc (@var{A})
 ## @deftypefnx {Function File} {} imagesc (@var{x}, @var{y}, @var{A})
-## @deftypefnx {Function File} {} imagesc (@dots{}, @var{zoom})
 ## @deftypefnx {Function File} {} imagesc (@dots{}, @var{limits})
 ## @deftypefnx {Function File} { @var{B} = } imagesc (@dots{})
 ## Display a scaled version of the matrix @var{A} as a color image.  The
 ## matrix is scaled so that its entries are indices into the current
-## colormap.  The scaled matrix is returned.  If @var{zoom} is omitted, a
-## comfortable size is chosen.  If @var{limits} = [@var{lo}, @var{hi}] are
+## colormap.  The scaled matrix is returned.  If @var{limits} = [@var{lo}, @var{hi}] are
 ## given, then that range maps into the full range of the colormap rather 
 ## than the minimum and maximum values of @var{A}.
 ##
 ## The axis values corresponding to the matrix elements are specified in
 ## @var{x} and @var{y}, either as pairs giving the minimum and maximum
 ## values for the respective axes, or as values for each row and column
-## of the matrix @var{A}.  At present they are ignored.
+## of the matrix @var{A}.
 ## @seealso{image, imshow}
 ## @end deftypefn
 
 ## Author: Tony Richardson <arichard@stark.cc.oh.us>
 ## Created: July 1994
 ## Adapted-By: jwe
 
-function ret = imagesc (x, y, A, zoom, limits)
+function ret = imagesc (x, y, A, limits, DEPRECATEDZOOM)
 
-  if (nargin < 1 || nargin > 5)
+  ## Deprecated zoom.  Remove this hunk of code if old zoom argument
+  ## is outmoded.
+  if ((nargin == 2 && isscalar (y))
+      || (nargin == 3 && (isscalar (y) || isscalar (A)))
+      || (nargin == 4 && isscalar (limits))
+      || nargin == 5)
+    warning ("image: zoom argument ignored -- use GUI features");
+  endif
+  if (nargin == 5)
+    if (isscalar (limits))
+      limits = DEPRECATEDZOOM;
+    endif
+    nargin = 4;
+  endif
+  if (nargin == 4 && isscalar (limits))
+    nargin = 3;
+  endif
+  if (nargin == 3 && (isscalar (y) || isscalar (A)))
+    if (isscalar (y))
+      y = A;
+    endif
+    nargin = 2;
+  endif
+  if (nargin == 2 && isscalar (y))
+    nargin = 1;
+  endif
+
+  if (nargin < 1 || nargin > 4)
     print_usage ();
   elseif (nargin == 1)
     A = x;
-    zoom = x = y = limits = [];
+    x = y = limits = [];
   elseif (nargin == 2)
     A = x;
-    zoom = y;
-    x = y = limits = [];
-  elseif (nargin == 3)
-    ## Assume imagesc(x,y,A) for compatibility.  It
-    ## could also be imagesc(A,limits,zoom), but if A is
-    ## a 1x2 vector, this is equivalent to imagesc(x,y,A)
-    ## for scalar A so we won't try to guess.
-    zoom = limits = [];
-  elseif (nargin == 4)
+    limits = y;
+    x = y = [];
+  elseif (nargin == 3 && !isscalar (x) && !isscalar (y) && !isscalar (A))
     limits = [];
   endif
 
-  ## correct for zoom, limits parameter order
-  if (length (zoom) == 2)
-     swap = limits;
-     limits = zoom;
-     zoom = swap;
-  endif
-
   ## use given limits or guess them from the matrix
   if (length (limits) == 2 && limits(2) >= limits(1))
      minval = limits(1);
      maxval = limits(2);
      A(A < minval) = minval;
      A(A > maxval) = maxval;
   elseif (length (limits) == 0)
      maxval = max (A(:));
@@ -87,14 +99,14 @@ function ret = imagesc (x, y, A, zoom, l
     B = ones (size (A));
   else
     ## Rescale values to between 1 and length (colormap) inclusive.
     B = round ((A - minval) / (maxval - minval) * (rows (colormap) - 1)) + 1;
   endif
 
   ## display or return the image
   if (nargout == 0)
-    image (x, y, B, zoom);
+    image (x, y, B);
   else
     ret = B;
   endif
 
 endfunction
diff --git a/scripts/image/imshow.m b/scripts/image/imshow.m
--- a/scripts/image/imshow.m
+++ b/scripts/image/imshow.m
@@ -19,17 +19,17 @@
 
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} imshow (@var{im})
 ## @deftypefnx {Function File} {} imshow (@var{im}, @var{limits})
 ## @deftypefnx {Function File} {} imshow (@var{im}, @var{map})
 ## @deftypefnx {Function File} {} imshow (@var{R}, @var{G}, @var{B}, @dots{})
 ## @deftypefnx {Function File} {} imshow (@var{filename})
 ## @deftypefnx {Function File} {} imshow (@dots{}, @var{string_param1}, @var{value1}, @dots{})
-## Display the image @var{im}, where @var{im} can a 2-dimensional
+## Display the image @var{im}, where @var{im} can be a 2-dimensional
 ## (gray-scale image) or a 3-dimensional (RGB image) matrix. If three matrices
 ## of the same size are given as arguments, they will be concatenated into
 ## a 3-dimensional (RGB image) matrix.
 ##
 ## If @var{limits} is a 2-element vector @code{[@var{low}, @var{high}]},
 ## the image is shown using a display range between @var{low} and
 ## @var{high}.  If an empty matrix is passed for @var{limits}, the
 ## display range is computed as the range between the minimal and the
@@ -39,22 +39,18 @@
 ## image using the supplied color map.
 ##
 ## If a file name is given instead of an image, the file will be read and
 ## shown.
 ##
 ## If given, the parameter @var{string_param1} has value
 ## @var{value1}. @var{string_param1} can be any of the following:
 ## @table @samp
-## @item "display_range"
+## @item "displayrange"
 ## @var{value1} is the display range as described above.
-##
-## @item "InitialMagnification"
-## @var{value1} sets the zoom level in percent. 
-## If @var{value1} is 100 the image is showed unscaled.
 ## @end table
 ## @seealso{image, imagesc, colormap, gray2ind, rgb2ind}
 ## @end deftypefn
 
 ## Author: Soren Hauberg <hauberg at gmail dot com>
 ## Adapted-By: jwe
 
 function imshow (im, varargin)
@@ -105,24 +101,24 @@ function imshow (im, varargin)
     arg = varargin{narg};
     if (ismatrix (arg) && ndims (arg) == 2)
       display_range = arg;
     elseif (isempty (arg))
       display_range = [min(im(:)), max(im(:))];
     elseif (ismatrix (arg) && size (arg, 2) == 3)
       color_map = arg;
       isindexed = true;
-    elseif (ischar (arg) && strcmpi (arg, "truesize"))
-      initial_magnification = 100;
     elseif (ischar (arg) && strcmpi (arg, "displayrange"))
       narg++;
       display_range = varargin{narg};
-    elseif (ischar (arg) && strcmpi (arg, "initialmagnification"))
+    elseif (ischar (arg) &&
+	    (strcmpi (arg, "truesize") ||
+             strcmpi (arg, "initialmagnification")))
       narg++;
-      initial_magnification = varargin{narg};
+      warning ("image: zoom argument ignored -- use GUI features");
     else
       warning ("imshow: input argument number %d is unsupported", narg) 
     endif
     narg++;
   endwhile
 
   ## Check for complex images.
   if (iscomplex (im))
@@ -140,21 +136,21 @@ function imshow (im, varargin)
   ## Scale the image to the interval [0, 1] according to display_range.
   if (! isindexed)
     low = display_range(1);
     high = display_range(2);
     im = (double (im) - low)/(high-low);
     im(im < 0) = 0;
     im(im > 1) = 1;
   endif
-  
+
   dim = ndims (im);
   if (dim == 2)
     im = round ((size (color_map, 1) - 1) * im);
-    image (im, initial_magnification/100);
+    image (im);
     colormap (color_map);
   elseif (dim == 3 && size (im, 3) == 3)
     __img__ ([] , [], im);
     ## FIXME -- needed anymore for a special case?
     ## Convert to indexed image.
     ## [im, color_map] = rgb2ind (im);
   else
     error ("imshow: input image must be a 2D or 3D matrix");
@@ -166,20 +162,16 @@ endfunction
 %!error imshow ({"cell"})                   # No image or filename given
 %!error imshow (int8(1))                    # Unsupported image class
 %!error imshow (ones(4,4,4))                # Too many dimensions in image
 
 %!demo
 %!  imshow (loadimage ("default.img"));
 
 %!demo
-%!  I = loadimage ("default.img");
-%!  imshow (I, "truesize")
-
-%!demo
 %!  [I, M] = loadimage ("default.img");
 %!  imshow (I, M);
 
 %!demo
 %!  [I, M] = loadimage ("default.img");
 %!  imshow (cat(3, I, I*0.5, I*0.8));
 
 %!demo
diff --git a/scripts/plot/__uiobject_draw_axes__.m b/scripts/plot/__uiobject_draw_axes__.m
--- a/scripts/plot/__uiobject_draw_axes__.m
+++ b/scripts/plot/__uiobject_draw_axes__.m
@@ -267,16 +267,32 @@ function __uiobject_draw_axes__ (h, plot
 	    if (y_dim > 1)
 	      dy = abs (img_ydata(2)-img_ydata(1))/(y_dim-1);
 	    else
 	      dy = 1;
 	    endif
 	    x_origin = min (img_xdata);
 	    y_origin = min (img_ydata);
 
+	    if (nd == 2)
+	      if (xautoscale)
+		xmin = min (xmin, min (img_xdata) - dx/2);
+		xmax = max (xmax, max (img_xdata) + dx/2);
+		xminp = min (xminp, min (img_xdata((img_xdata - dx/2)>0)) - dx/2);
+	      endif
+	      if (yautoscale)
+		ymin = min (ymin, min (img_ydata) - dy/2);
+		ymax = max (ymax, max (img_ydata) + dy/2);
+		yminp = min (yminp, min (img_ydata((img_ydata - dy/2)>0)) - dy/2);
+	      endif
+	    else
+	      ## Can have images in 3D, but the image routines don't seem
+	      ## to have a means of arbitrary projection.
+	    endif
+
 	    ## Let the file be deleted when Octave exits or `purge_tmp_files'
 	    ## is called.
 	    [img_fid, img_fname] = mkstemp (fullfile (P_tmpdir, "gpimageXXXXXX"), 1);
 	    if (ndims (img_data) == 3)
 	      fwrite (img_fid, permute (img_data, [3, 1, 2])(:), "float");
 	      format = "1:2:3";
 	      imagetype = "rgbimage";
 	    else
