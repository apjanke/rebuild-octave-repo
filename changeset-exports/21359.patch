# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1456491999 0
#      Fri Feb 26 13:06:39 2016 +0000
# Node ID 8e94a86ca64873634665f3868fe7022cbbaa770f
# Parent  f2ae78f5827f8918c98127ee9e1b0e6fd971f162
Do not print extra newlines to stdout on exit (bug #47258).

* toplev.cc (main_loop): in case of exception, do not print a newline if we are
exiting Octave.

* octave.cc (safe_source_file, execute_eval_option_code): idem.  But in this
cases, there's no need to ever print a newline.

diff --git a/libinterp/corefcn/toplev.cc b/libinterp/corefcn/toplev.cc
--- a/libinterp/corefcn/toplev.cc
+++ b/libinterp/corefcn/toplev.cc
@@ -731,20 +731,21 @@ main_loop (void)
               else if (parser.lexer.end_of_input)
                 break;
             }
         }
       catch (const octave_interrupt_exception&)
         {
           recover_from_exception ();
 
-          octave_stdout << "\n";
-
           if (quitting_gracefully)
             return exit_status;
+
+          // Required newline when the user does Ctrl+C at the prompt.
+          octave_stdout << "\n";
         }
       catch (const index_exception& e)
         {
           recover_from_exception ();
 
           std::cerr << "error: unhandled index exception: "
                     << e.message () << " -- trying to return to prompt"
                     << std::endl;
diff --git a/libinterp/octave.cc b/libinterp/octave.cc
--- a/libinterp/octave.cc
+++ b/libinterp/octave.cc
@@ -280,18 +280,16 @@ safe_source_file (const std::string& fil
   try
     {
       source_file (file_name, context, verbose, require_file, warn_for);
     }
   catch (const octave_interrupt_exception&)
     {
       recover_from_exception ();
 
-      octave_stdout << "\n";
-
       if (quitting_gracefully)
         clean_up_and_exit (exit_status);
     }
   catch (const octave_execution_exception&)
     {
       recover_from_exception ();
 
       gripe_safe_source_exception (file_name, "unhandled execution exception");
@@ -398,18 +396,16 @@ execute_eval_option_code (const std::str
   try
     {
       eval_string (code, false, parse_status, 0);
     }
   catch (const octave_interrupt_exception&)
     {
       recover_from_exception ();
 
-      octave_stdout << "\n";
-
       if (quitting_gracefully)
         clean_up_and_exit (exit_status);
     }
   catch (const octave_execution_exception&)
     {
       recover_from_exception ();
 
       std::cerr << "error: unhandled execution exception -- eval failed"
