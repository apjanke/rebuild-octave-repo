# HG changeset patch
# User Jordi Gutiérrez Hermoso <jordigh@gmail.com>
# Date 1298658494 21600
#      Fri Feb 25 12:28:14 2011 -0600
# Node ID b4138a75eecc7fbf3ed9ee4c39affa292dd3db8a
# Parent  d1466d956d179beb2eb65c08b1c07ece9198ad62
Uniformise "Matlab" typesetting in FAQ.

diff --git a/doc/ChangeLog b/doc/ChangeLog
--- a/doc/ChangeLog
+++ b/doc/ChangeLog
@@ -1,8 +1,13 @@
+2011-02-25  Jordi Gutiérrez Hermoso  <jordigh@gmail.com>
+
+	* faq/OctaveFAQ.texi: Uniformise all mentions of Matlab to be
+	typeset in the @sc{Matlab} style.
+
 2010-02-19  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/install.txi: Remove reference to POSIX regex library.
 
 2010-02-14  Rik  <octave@nomad.inbox5.com>
 
 	* interpreter/arith.txi, interpreter/io.txi, interpreter/oop.txi:
 	Remove functions which have no DOCSTRING entries.
diff --git a/doc/faq/OctaveFAQ.texi b/doc/faq/OctaveFAQ.texi
--- a/doc/faq/OctaveFAQ.texi
+++ b/doc/faq/OctaveFAQ.texi
@@ -59,17 +59,17 @@ you should first check to see if the top
 * How can I cite Octave?::  
 * Series 3.0.N::  
 * Octave Features::  
 * Learning more about Octave:: 
 * Getting Octave::  
 * Installation::  
 * Common problems::             
 * How do I ...?::  
-* MATLAB compatibility:: 
+* @sc{Matlab} compatibility:: 
 * Index::                       
 @end menu
 
 @node What is Octave?
 @chapter What is Octave?
 
 Octave is a high-level interactive language, primarily intended for
 numerical computations that is mostly compatible with
@@ -189,27 +189,27 @@ Code written entirely in the scripting l
 (interpreted code in .m files) may be released under the terms of
 whatever license you choose.
 
 Code written using Octave's native plug-in interface (also known
 as a .oct file) necessarily links with Octave internals and is
 considered a derivative work of Octave and therefore must be
 released under terms that are compatible with the GPL.
 
-Code written using Octave's implementation of the Matlab MEX
+Code written using Octave's implementation of the @sc{Matlab} MEX
 interface may be released under the terms of whatever license you
 choose, provided that the following conditions are met:
 
 @enumerate
 @item
 The plugin should not use any bindings that are specific to Octave.  In
 other words, the MEX file must use the MEX interface only, and not also
 call on other Octave internals.  It should be possible in principle to
 use the MEX file with other programs that implement the MEX interface
-(e.g., Matlab).
+(e.g., @sc{Matlab}).
 
 @item
 The MEX file should not be distributed together with Octave in such a
 way that they effectively create a single work.  For example, you should
 not distribute the MEX file and Octave together in a single package such
 that Octave automatically loads and runs the MEX file when it starts up.
 There are other possible ways that you might effectively create a single
 work; this is just one example.
@@ -222,17 +222,17 @@ considered a derivative work of Octave a
 released under terms that are compatible with the GPL.
 
 @node Licensing MEX Files
 @section Since the MEX interface allows plugins to be distributed under terms that are incompatible with the GPL, does this mean that you are encouraging people to to write non-free software for Octave?
 
 No.  The original reason for implementing the MEX interface for Octave
 was to allow Octave to run free software that uses MEX files (the
 particular goal was to run SundialsTB in Octave).  The intent was to
-liberate that software from Matlab and increase the amount of free
+liberate that software from @sc{Matlab} and increase the amount of free
 software available to Octave users, not to enable people to write
 proprietary code for Octave.  For the good of the community, we strongly
 encourage users of Octave to release the code they write for Octave
 under terms that are compatible with the GPL.
 
 @node Requesting License Changes
 @section I wrote a program that links with Octave libraries and I don't want to release it under the terms of the GPL.  Will you change the license of the Octave libraries for me?
 
@@ -275,17 +275,17 @@ number change. The 3.0.N series brings
 @item fixed point arithmetic
 
 @item sparse matrices
 
 @item Linear programming code based on GLPK
 
 @item 64-bit compilation support
 
-@item gzipped files and stream and consequently support of matlab v7 files
+@item gzipped files and stream and consequently support of @sc{Matlab} v7 files
 
 @item better support for both msvc and mingw
 
 @item a fully compatible MEX interface
 
 @item many many other minor features and compatibility changes
 
 @end itemize
@@ -341,17 +341,17 @@ rewritten and so the indexing of arrays 
 * Informative block closing::
 * Coherent syntax::             
 * Exclamation mark as not operator::
 * Increment and decrement operators::  
 * Unwind-protect::              
 * Built-in ODE and DAE solvers::
 @end menu
 
-This section refers to Matlab R2008b and Octave 2.1.51.
+This section refers to @sc{Matlab} R2008b and Octave 2.1.51.
 
 @node Functions defined on the command-line
 @section Functions defined on the command-line
 
 Functions can be defined by entering code on the command line, a
 feature not supported by the other leading brand.  For example, you may
 type:
 
@@ -377,30 +377,30 @@ that as @samp{#} is also a comment chara
 file that starts with a string like @samp{#! /usr/bin/octave -q} will be
 treated as an octave script and be executed by octave.
 
 @node Strings delimitted by double quotes " 
 @section Strings delimitted by double quotes " 
 The double quote, @samp{"}, may be used to delimit strings, in addition to
 the single quote @samp{'}.  See the previous example.  Also, double-quoted
 strings include backslash interpretation (like C++, C, and Perl) while
-single quoted are uninterpreted (like Matlab and Perl).
+single quoted are uninterpreted (like @sc{Matlab} and Perl).
  
 @node Line continuation by backslash 
 @section Line continuation by backslash 
 
 Lines can be continued with a backslash, @samp{\}, in addition to three
 points @samp{@dots{}}.  See the previous example.
 
 @node Informative block closing
 @section Informative block closing
 
 You may close @code{function}, @code{for}, @code{while}, @code{if},
 @dots{} blocks with @code{endfunction}, @code{endfor}, @code{endwhile},
-@dots{} keywords in addition to using @code{end}.  As with Matlab, the
+@dots{} keywords in addition to using @code{end}.  As with @sc{Matlab}, the
 @code{end} (or @code{endfunction}) keyword that marks the end of a
 function defined in a @file{.m} file is optional.
 
 @node Coherent syntax
 @section Coherent syntax
 
 Indexing other things than variables is possible, as in:
 @example
@@ -480,17 +480,17 @@ end_unwind_protect
 @noindent
 Where @var{body} and @var{cleanup} are both optional and may contain any
 Octave expressions or commands.  The statements in @var{cleanup} are 
 guaranteed to be executed regardless of how control exits @var{body}.
 
 The @code{unwind_protect} statement is often used to reliably restore
 the values of global variables that need to be temporarily changed.
 
-Matlab can be made to do something similar with their @code{OnCleanUp}
+@sc{Matlab} can be made to do something similar with their @code{OnCleanUp}
 function that was introduced in 2008a.
 
 @node Built-in ODE and DAE solvers
 @section Built-in ODE and DAE solvers
 
 @cindex DASSL
 @cindex LSODE
 
@@ -764,17 +764,17 @@ octave:1> format long
 octave:2> pi
 pi = 3.14159265358979
 octave:3> format short
 octave:4> pi
 pi = 3.1416
 @end group
 @end example
 
-@node MATLAB compatibility
+@node @sc{Matlab} compatibility
 @chapter Porting programs from @sc{Matlab} to Octave
 
 @cindex @sc{Matlab} compatibility
 @cindex Compatibility with @sc{Matlab}
 
 People often ask
 
 ``I wrote some code for @sc{Matlab}, and I want to get it running under
@@ -789,18 +789,18 @@ which is not quite the same thing.  Ther
 differences between Octave and @sc{Matlab}, however in general
 differences between the two are considered as bugs.  Octave might
 consider that the bug is in @sc{Matlab} and do nothing about it, but
 generally functionality is almost identical.  If you find a difference
 between Octave behavior and @sc{Matlab}, then you should send a
 description of this difference (with code illustrating the difference,
 if possible) to @email{bug@@octave.org}.
 
-Furthermore, Octave adds a few syntactical extensions to Matlab that
-might cause some issues when exchanging files between Matlab and Octave
+Furthermore, Octave adds a few syntactical extensions to @sc{Matlab} that
+might cause some issues when exchanging files between @sc{Matlab} and Octave
 users. As both Octave and @sc{Matlab} are under constant development the
 information in this section is subject to change at anytime.
 
 You should also look at the page
 @url{http://octave.sourceforge.net/packages.html} and
 @url{http://octave.sourceforge.net/doc/} that has a function reference
 that is up to date. You can use this function reference to see the
 number of octave function that are available and their @sc{Matlab}
@@ -840,17 +840,17 @@ end
 @end example
 
 Now that @sc{Matlab} has recently introduced nested functions, Octave will
 probably have them soon as well.  Until then nested functions in Octave
 are treated as sub-functions with the same scoping rules as
 sub-functions.  
 
 The authors of Octave consider the nested function scoping rules of
-Matlab to be more problems than they are worth as they introduce
+@sc{Matlab} to be more problems than they are worth as they introduce
 diffiult to find bugs as inadvertantly modifying a variable in a
 nested function that is also used in the parent is particularly easy.
 
 @item Differences in core syntax
 There a few core @sc{Matlab} syntaxes that are not accepted by Octave,
 these being
 
 @itemize @bullet
@@ -904,31 +904,31 @@ handles is converging towards full compa
 function is currently limited to 2-D patches, due to an underlying
 limitation in gnuplot.
 
 @item GUI 
 There are no @sc{Matlab} compatible GUI functions.  There are a number of
 bindings from Octave to Tcl/Tk, Vtk and zenity included in the
 Octave Forge project (@url{http://octave.sourceforge.net}) for example
 that can be used for a GUI, but these are not @sc{Matlab}
-compatible. Work on a matlab compatible GUI is in an alpha stage in the
+compatible. Work on a @sc{Matlab} compatible GUI is in an alpha stage in the
 JHandles package (@url{http://octave.sourceforge.net/jhandles/index.html}).
 This might be an issue if you intend to exchange Octave code with 
 @sc{Matlab} users.
 
 @item Simulink
 Octave itself includes no Simulink support. Typically the simulink
 models lag research and are less flexible, so shouldn't really be used
 in a research environment.  However, some @sc{Matlab} users that try to
 use Octave complain about this lack.  There is a similar package to
 simulink for the Octave and R projects available at
 @url{http://www.scicraft.org/}
 
 @item Mex-Files
-Octave includes an API to the matlab MEX interface. However, as MEX is
+Octave includes an API to the @sc{Matlab} MEX interface. However, as MEX is
 an API to the internals of @sc{Matlab} and the internals of Octave
 differ from @sc{Matlab}, there is necessarily a manipulation of the data
 to convert from a MEX interface to the Octave equivalent. This is
 notable for all complex matrices, where @sc{Matlab} stores complex
 arrays as real and imaginary parts, whereas Octave respects the C99/C++
 standards of co-locating the real/imag parts in memory.  Also due to the
 way @sc{Matlab} allows access to the arrays passed through a pointer,
 the MEX interface might require copies of arrays (even non complex
@@ -938,17 +938,17 @@ ones).
 Block comments denoted by "%@{" and "%@}" markers are supported by
 Octave with some limitations. The major limitation is that block
 comments are not supported within [] or @{@}.
 
 @item Mat-File format
 There are some differences in the mat v5 file format accepted by
 Octave. @sc{Matlab} recently introduced the "-V7.3" save option which is
 an HDF5 format which is particularly useful for 64-bit platforms where
-the standard matlab format can not correctly save variables.. Octave
+the standard @sc{Matlab} format can not correctly save variables.. Octave
 accepts HDF5 files, but is not yet compatible with the "-v7.3" versions
 produced by @sc{Matlab}. 
 
 Although Octave can load inline abd function handles saved by
 @sc{Matlab}, it can not yet save them.
 
 Finally, Some multi-byte unicode characters aren't yet treated in
 mat-files.
@@ -962,17 +962,17 @@ the thread
 
 for more details
 
 @item Toolboxes
 Octave is a community project and so the toolboxes that exist are
 donated by those interested in them through the Octave Forge website
 (@url{http://octave.sourceforge.net}). These might be lacking in certain
 functionality relative to the @sc{Matlab} toolboxes, and might not
-exactly duplicate the matlab functionality or interface.
+exactly duplicate the @sc{Matlab} functionality or interface.
 
 @item Short-circuit & and | operators
 The @code{&} and @code{|} operators in @sc{Matlab} short-circuit when
 included in an if statemant and not otherwise.  In Octave only the
 @code{&&} and @code{||} short circuit.  Note that this means that
 
 @example
 @group
@@ -1054,26 +1054,26 @@ along the line, someone decided that if 
 Mathworks probably thought it just looks wrong to have @code{[]} be true
 in this context even if you can use logical gymnastics to convince
 yourself that "all" the elements of a matrix that doesn't actually have
 any elements are nonzero. Octave however duplicates this behavior for if
 statements containing empty matrices.
 
 @item Solvers for singular, under- and over-determined matrices
 
-Matlab's solvers as used by the operators mldivide (\) and mrdivide (/),
+@sc{Matlab}'s solvers as used by the operators mldivide (\) and mrdivide (/),
 use a different approach than Octave's in the case of singular, under-, 
-or over-determined matrices. In the case of a singular matrix, Matlab
+or over-determined matrices. In the case of a singular matrix, @sc{Matlab}
 returns the result given by the LU decomposition, even though the underlying
 solver has flagged the result as erroneous. Octave has made the choice
 of falling back to a minimum norm solution of matrices that have been
 flagged as singular which arguably is a better result for these cases.
 
 In the case of under- or over-determined matrices, Octave continues to
-use a minimum norm solution, whereas Matlab uses an approach that is
+use a minimum norm solution, whereas @sc{Matlab} uses an approach that is
 equivalent to
 
 @example
 @group
 function x = mldivide (A, b)
   [Q, R, E] = qr(A);
   x = [A \ b, E(:, 1:m) * (R(:, 1:m) \ (Q' * b))]
 end
@@ -1095,17 +1095,17 @@ m = 10;
 n = 10000; 
 A = ones(m, n) + 1e-6 * randn(m,n); 
 b = ones(m, 1) + 1e-6 * randn(m,1); 
 norm(A \ b)
 @end group
 @end example
 
 @noindent
-while Octave's minimum-norm values are around 3e-2, Matlab's results
+while Octave's minimum-norm values are around 3e-2, @sc{Matlab}'s results
 are 50-times larger. For another issue, try this code:
 
 @example
 @group
 m = 5; 
 n = 100; 
 j = floor(m * rand(1, n)) + 1; 
 b = ones(m, 1);
@@ -1114,27 +1114,27 @@ A(sub2ind(size(A),j,1:n)) = 1;
 x = A \ b; 
 [dummy,p] = sort(rand(1,n)); 
 y = A(:,p)\b; 
 norm(x(p)-y)
 @end group
 @end example
 
 @noindent
-It shows that unlike in Octave, mldivide in Matlab is not invariant
+It shows that unlike in Octave, mldivide in @sc{Matlab} is not invariant
 with respect to column permutations. If there are multiple columns of
 the same norm, permuting columns of the matrix gets you different
 result than permuting the solution vector. This will surprise many
 users.
 
 Since the mldivide (\) and mrdivide (/) operators are often part of a more 
 complex expression, where there is no room to react to warnings or flags, it 
 should prefer intelligence (robustness) to speed, and so the Octave developers
 are firmly of the opinion that Octave's approach for singular, under- and
-over-determined matrices is a better choice that Matlab's
+over-determined matrices is a better choice that @sc{Matlab}'s
 
 @item Octave extensions
 The extensions in Octave over @sc{Matlab} syntax are
 very useful, but might cause issues when sharing with @sc{Matlab} users.
 A list of the major extensions that should be avoided to be compatible
 with @sc{Matlab} are
 
 @itemize @bullet
