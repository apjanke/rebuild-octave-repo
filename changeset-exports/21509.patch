# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1432855546 -3600
#      Fri May 29 00:25:46 2015 +0100
# Node ID dcee67d28570c02a73060618c992244f4b882030
# Parent  04923b7b0d896a0b56e52cb5bb7c0fab19ca70d6
doc: doxygen documentation for dim_vector::ndims and dim_vector::length.

diff --git a/liboctave/array/dim-vector.h b/liboctave/array/dim-vector.h
--- a/liboctave/array/dim-vector.h
+++ b/liboctave/array/dim-vector.h
@@ -88,18 +88,16 @@ along with Octave; see the file COPYING.
 class
 OCTAVE_API
 dim_vector
 {
 private:
 
   octave_idx_type *rep;
 
-  octave_idx_type& ndims (void) const { return rep[-1]; }
-
   octave_idx_type& count (void) const { return rep[-2]; }
 
   //! Construct a new rep with count = 1 and ndims given.
 
   static octave_idx_type *newrep (int ndims)
   {
     octave_idx_type *r = new octave_idx_type [ndims + 2];
 
@@ -317,16 +315,31 @@ public:
   }
 
   ~dim_vector (void)
   {
     if (OCTREFCOUNT_ATOMIC_DECREMENT (&(count())) == 0)
       freerep ();
   }
 
+  //! Number of dimensions.
+  /*!
+      Returns the number of dimensions of the dim_vector.  This is number of
+      elements in the dim_vector including trailing singetons.  It is also
+      the number of dimensions an Array with this dim_vector would have.
+  */
+  octave_idx_type& ndims (void) const { return rep[-1]; }
+
+  //! Number of dimensions.
+  //! Synonymous with ndims().
+  /*!
+    While this method is not officially deprecated, consider using ndims()
+    instead to avoid confusion.  Array does not have length because of its
+    odd definition as length of the longest dimension.
+  */
   int length (void) const { return ndims (); }
 
   octave_idx_type& operator () (int i) { return elem (i); }
 
   octave_idx_type operator () (int i) const { return elem (i); }
 
   void resize (int n, int fill_value = 0)
   {
