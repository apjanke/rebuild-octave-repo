# HG changeset patch
# User jwe
# Date 1191358043 0
#      Tue Oct 02 20:47:23 2007 +0000
# Node ID 6bbf56a9718a708b262ca057b601b88c9c9d47a7
# Parent  96714c92a2786e5d97d66f34a809036cb31445ac
[project @ 2007-10-02 20:47:22 by jwe]

diff --git a/scripts/control/base/__bodquist__.m b/scripts/control/base/__bodquist__.m
--- a/scripts/control/base/__bodquist__.m
+++ b/scripts/control/base/__bodquist__.m
@@ -12,16 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301 USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{f}, @var{w}, @var{rsys}] =} __bodquist__ (@var{sys}, @var{w}, @var{out_idx}, @var{in_idx})
 ## Used internally by @command{bode}, @command{nyquist}; compute system frequency response.
 ##
 ## @strong{Inputs}
 ## @table @var
 ## @item sys
 ## input system structure
diff --git a/scripts/control/base/__freqresp__.m b/scripts/control/base/__freqresp__.m
--- a/scripts/control/base/__freqresp__.m
+++ b/scripts/control/base/__freqresp__.m
@@ -12,16 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301 USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __freqresp__ (@var{sys}, @var{USEW}, @var{w})
 ## Frequency response function - used internally by @command{bode}, @command{nyquist}.
 ## minimal argument checking; ``do not attempt to do this at home''.
 ##
 ## @strong{Inputs}
 ## @table @var
 ## @item sys
diff --git a/scripts/control/base/__stepimp__.m b/scripts/control/base/__stepimp__.m
--- a/scripts/control/base/__stepimp__.m
+++ b/scripts/control/base/__stepimp__.m
@@ -12,16 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301 USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{y}, @var{t}] =} __stepimp__ (@var{sitype}, @var{sys} [, @var{inp}, @var{tstop}, @var{n}])
 ## Impulse or step response for a linear system.
 ## The system can be discrete or multivariable (or both).
 ## This m-file contains the ``common code'' of step and impulse.
 ##
 ## Produces a plot or the response data for system @var{sys}.
 ##
diff --git a/scripts/control/system/__abcddims__.m b/scripts/control/system/__abcddims__.m
--- a/scripts/control/system/__abcddims__.m
+++ b/scripts/control/system/__abcddims__.m
@@ -12,16 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301 USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{y}, @var{my}, @var{ny}] =} __abcddims__ (@var{x})
 ##
 ## Used internally in @code{abcddim}.  If @var{x} is a zero-size matrix,
 ## both dimensions are set to 0 in @var{y}.
 ## @var{my} and @var{ny} are the row and column dimensions of the result.
 ## @end deftypefn
 
diff --git a/scripts/control/system/__syschnamesl__.m b/scripts/control/system/__syschnamesl__.m
--- a/scripts/control/system/__syschnamesl__.m
+++ b/scripts/control/system/__syschnamesl__.m
@@ -12,16 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301 USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __syschnamesl__ (@var{olist}, @var{old_names}, @var{inames}, @var{listname})
 ## used internally in syschnames
 ## item olist: index list
 ## old_names: original list names
 ## inames: new names
 ## listname: name of index list
 ##
diff --git a/scripts/control/system/__sysconcat__.m b/scripts/control/system/__sysconcat__.m
--- a/scripts/control/system/__sysconcat__.m
+++ b/scripts/control/system/__sysconcat__.m
@@ -1,23 +1,44 @@
-function c = __sysconcat__(a,b)
-  # c = __sysconcat__(a,b)
-  # cell array replacement for append, used by control systems toolbox
+## Copyright (C) 1996, 1998 Auburn University.  All rights reserved.
+##
+## This file is part of Octave.
+##
+## Octave is free software; you can redistribute it and/or modify it
+## under the terms of the GNU General Public License as published by the
+## Free Software Foundation; either version 2, or (at your option) any
+## later version.
+##
+## Octave is distributed in the hope that it will be useful, but WITHOUT
+## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+## for more details.
+##
+## You should have received a copy of the GNU General Public License
+## along with Octave; see the file COPYING.  If not, write to the Free
+## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+## 02110-1301 USA.
 
-  if(ischar(a))
+## Undocumented internal function.
+
+function c = __sysconcat__ (a, b)
+
+  ## c = __sysconcat__ (a, b)
+  ## cell array replacement for append, used by control systems toolbox
+
+  if (ischar (a))
     a = {a};
   endif
-  if(ischar(b))
+  if (ischar (b))
     b = {b};
   endif
 
-  if ( ! ( is_signal_list(a)  && is_signal_list(b) ) )
+  if (! (is_signal_list (a) && is_signal_list (b)))
     error("need cell arrays of strings");
   endif
 
   c = a;
-  la = length(a);
-  for ii=1:length(b)
+  la = length (a);
+  for ii = 1:length (b)
     c{la+ii} = b{ii};
   endfor
 
 endfunction
-
diff --git a/scripts/control/system/__syscont_disc__.m b/scripts/control/system/__syscont_disc__.m
--- a/scripts/control/system/__syscont_disc__.m
+++ b/scripts/control/system/__syscont_disc__.m
@@ -12,16 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301 USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{n_tot}, @var{st_c}, @var{st_d}, @var{y_c}, @var{y_d}] =} __syscont_disc__ (@var{sys})
 ## Used internally in syscont and sysdisc.
 ##
 ## @strong{Inputs}
 ## @var{sys} is a system data structure.
 ##
 ## @strong{Outputs}
diff --git a/scripts/control/system/__sysdefioname__.m b/scripts/control/system/__sysdefioname__.m
--- a/scripts/control/system/__sysdefioname__.m
+++ b/scripts/control/system/__sysdefioname__.m
@@ -12,16 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301 USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __sysdefioname__ (@var{n}, @var{str}, @var{m})
 ## return default input or output names given @var{n}, @var{str}, @var{m}.
 ## @var{n} is the final value, @var{str} is the string prefix, and @var{m}
 ## is start value
 ##
 ## used internally, minimal argument checking
 ##
diff --git a/scripts/control/system/__sysdefstname__.m b/scripts/control/system/__sysdefstname__.m
--- a/scripts/control/system/__sysdefstname__.m
+++ b/scripts/control/system/__sysdefstname__.m
@@ -12,16 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301 USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __sysdefstname__ (@var{n}, @var{nz})
 ## return default state names given @var{n}, @var{nz}
 ##
 ## used internally, minimal argument checking
 ## @end deftypefn
 
 function stname = __sysdefstname__ (n, nz)
diff --git a/scripts/control/system/__sysgroupn__.m b/scripts/control/system/__sysgroupn__.m
--- a/scripts/control/system/__sysgroupn__.m
+++ b/scripts/control/system/__sysgroupn__.m
@@ -12,16 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301 USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __sysgroupn__ (@var{names})
 ## Locate and mark duplicate names
 ## inputs:
 ## names: list of signal names
 ## kind: kind of signal name (used for diagnostic message purposes only)
 ## outputs:
 ## returns names with unique suffixes added; diagnostic warning
diff --git a/scripts/control/system/__tf2sysl__.m b/scripts/control/system/__tf2sysl__.m
--- a/scripts/control/system/__tf2sysl__.m
+++ b/scripts/control/system/__tf2sysl__.m
@@ -12,16 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301 USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __tf2sysl__ (@var{vec})
 ## used internally in tf2sys.
 ## strip leading zero coefficients to get the true polynomial length
 ## @end deftypefn
 
 function vec = __tf2sysl__ (vec)
 
diff --git a/scripts/control/system/__tfl__.m b/scripts/control/system/__tfl__.m
--- a/scripts/control/system/__tfl__.m
+++ b/scripts/control/system/__tfl__.m
@@ -12,16 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301 USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __tfl__ (@var{vec})
 ## used internally in tf.
 ## strip leading zero coefficients to get the true polynomial length
 ## @end deftypefn
 
 function vec = __tfl__ (vec)
 
diff --git a/scripts/control/system/__zp2ssg2__.m b/scripts/control/system/__zp2ssg2__.m
--- a/scripts/control/system/__zp2ssg2__.m
+++ b/scripts/control/system/__zp2ssg2__.m
@@ -12,16 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301 USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {[@var{poly}, @var{rvals}] =} __zp2ssg2__ (@var{rvals})
 ## Used internally in @code{zp2ss}
 ## Extract 2 values from @var{rvals} (if possible) and construct
 ## a polynomial with those roots.
 ## @end deftypefn
 
 ## Author: A. S. Hodel <a.s.hodel@eng.auburn.edu>
diff --git a/scripts/control/util/__outlist__.m b/scripts/control/util/__outlist__.m
--- a/scripts/control/util/__outlist__.m
+++ b/scripts/control/util/__outlist__.m
@@ -12,16 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301 USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __outlist__ (@var{lmat}, @var{tabchar}, @var{yd}, @var{ilist})
 ## Prints an enumerated list of strings.
 ## internal use only; minimal argument checking performed
 ##
 ## @strong{Inputs}
 ## @table @var
 ## @item        lmat
diff --git a/scripts/control/util/__zgpbal__.m b/scripts/control/util/__zgpbal__.m
--- a/scripts/control/util/__zgpbal__.m
+++ b/scripts/control/util/__zgpbal__.m
@@ -12,16 +12,18 @@
 ## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ## for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301 USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __zgpbal__ (@var{sys})
 ##
 ## Used internally in @command{tzero}; minimal argument checking performed.
 ##
 ## Implementation of zero computation generalized eigenvalue problem
 ## balancing method (Hodel and Tiller, Allerton Conference, 1991)
 ## Based on Ward's balancing algorithm (@acronym{SIAM} J. Sci Stat. Comput., 1981).
diff --git a/scripts/general/__isequal__.m b/scripts/general/__isequal__.m
--- a/scripts/general/__isequal__.m
+++ b/scripts/general/__isequal__.m
@@ -10,16 +10,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ## GNU General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __isequal__ (@var{nans_compare_equal}, @var{x1}, @var{x2}, @dots{})
 ## Return true if @var{x1}, @var{x2}, @dots{} are all equal and
 ## @var{nans_compare_equal} evaluates to false.
 ##
 ## If @var{nans_compare_equal} evaluates to true, then assume NaN == NaN.
 ## @seealso{isequal, isequalwithequalnans}
 ## @end deftypefn
diff --git a/scripts/general/__splinen__.m b/scripts/general/__splinen__.m
--- a/scripts/general/__splinen__.m
+++ b/scripts/general/__splinen__.m
@@ -12,16 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {@var{yi} = } __splinen__ (@var{x}, @var{y}, @var{xi})
 ## Internal support function for multi-dimensional splines.
 ## @end deftypefn
 
 ## FIXME: Allow arbitrary grids..
 
 function yi = __splinen__ (x, y, xi, extrapval, f)
diff --git a/scripts/image/__img__.m b/scripts/image/__img__.m
--- a/scripts/image/__img__.m
+++ b/scripts/image/__img__.m
@@ -12,16 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __img__ (@var{img})
 ## @deftypefnx {Function File} {} __img__ (@var{x}, @var{y}, @var{img})
 ## Generic image creation.
 ##
 ## The axis values corresponding to the matrix elements are specified in
 ## @var{x} and @var{y}. If you're not using gnuplot 4.2 or later, these
 ## variables are ignored.
diff --git a/scripts/image/__img_via_file__.m b/scripts/image/__img_via_file__.m
--- a/scripts/image/__img_via_file__.m
+++ b/scripts/image/__img_via_file__.m
@@ -12,16 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __img_via_file__(@var{x}, @var{y}, @var{im}, @var{zoom}, @var{command})
 ## Display an image by saving it to a file in PPM format and launching
 ## @var{command}.
 ##
 ## The @var{command} must be a format string containing @code{%s} and
 ## possibly @code{%f}.  The @code{%s} will be replaced by the filename
 ## of the image, and the @code{%f} will be replaced by @var{zoom}. The
diff --git a/scripts/optimization/__fsolve_defopts__.m b/scripts/optimization/__fsolve_defopts__.m
--- a/scripts/optimization/__fsolve_defopts__.m
+++ b/scripts/optimization/__fsolve_defopts__.m
@@ -12,16 +12,18 @@
 ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 ## 02110-1301, USA.
 
+## Undocumented internal function.
+
 ## -*- texinfo -*-
 ## @deftypefn {Function File} {} __fsolve_defopts__ ()
 ## @end deftypefn
 
 function retval = __fsolve_defopts__ ()
 
   if (nargin == 0)
     retval = struct ("DerivativeCheck", "off",
diff --git a/src/DLD-FUNCTIONS/__contourc__.cc b/src/DLD-FUNCTIONS/__contourc__.cc
--- a/src/DLD-FUNCTIONS/__contourc__.cc
+++ b/src/DLD-FUNCTIONS/__contourc__.cc
@@ -295,16 +295,17 @@ cl_cntr (RowVector & X, RowVector & Y, M
 	    }
 	}
     }
 }
 
 DEFUN_DLD (__contourc__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __contourc__ (@var{x}, @var{y}, @var{z}, @var{levels})\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () == 4)
     {
       RowVector X = args (0).row_vector_value ();
       RowVector Y = args (1).row_vector_value ();
diff --git a/src/DLD-FUNCTIONS/__delaunayn__.cc b/src/DLD-FUNCTIONS/__delaunayn__.cc
--- a/src/DLD-FUNCTIONS/__delaunayn__.cc
+++ b/src/DLD-FUNCTIONS/__delaunayn__.cc
@@ -56,175 +56,170 @@ extern "C" {
 #ifdef NEED_QHULL_VERSION
 char qh_version[] = "__delaunayn__.oct 2007-08-21";
 #endif
 #endif
 
 DEFUN_DLD (__delaunayn__, args, ,
 	   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{T} =} __delaunayn__ (@var{P}[, @var{opt}])\n\
-Internal function for delaunayn.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 
 {
   octave_value_list retval;
+
 #ifdef HAVE_QHULL
+
   retval(0) = 0.0;
   std::string options = "";
 
-  int nargin = args.length();
+  int nargin = args.length ();
   if (nargin < 1 || nargin > 2)
     {
       print_usage ();
       return retval;
     }
 
-  Matrix p(args(0).matrix_value());
-  const octave_idx_type dim = p.columns();
-  const octave_idx_type n = p.rows();
+  Matrix p (args(0).matrix_value ());
+  const octave_idx_type dim = p.columns ();
+  const octave_idx_type n = p.rows ();
 
   // default options
   if (dim <= 3)
     options = "Qt Qbb Qc";
   else
     options = "Qt Qbb Qc Qx";
 
 
   if (nargin == 2)
     {
-    if (args(1).is_empty())
+    if (args(1).is_empty ())
       {
 	// keep default options
       }
-    else if ( args(1).is_string ()) 
+    else if (args(1).is_string ()) 
       {
 	// option string is directly provided
-	options = args(1).string_value();
+	options = args(1).string_value ();
       }
-    else if ( args(1).is_cell ()) 
+    else if (args(1).is_cell ()) 
       {
 	options = "";
 
-	Cell c =  args(1).cell_value();
-	for (octave_idx_type i = 0; i < c.numel(); i++)
+	Cell c = args(1).cell_value ();
+	for (octave_idx_type i = 0; i < c.numel (); i++)
 	  {
 
-	    if (!c.elem(i).is_string()) 
+	    if (! c.elem(i).is_string ()) 
 	      {
 		error ("__delaunayn__: all options must be strings");
 		return retval;
 	      }
 
-	    options = options + c.elem(i).string_value() + " ";
+	    options = options + c.elem(i).string_value () + " ";
 	  }
       }
     else 
       {
 	error ("__delaunayn__: second argument must be a string, cell of stringsor empty");
 	return retval;
       }
     } 
 
   //octave_stdout << "options " << options << std::endl;
 
   if (n > dim + 1) 
     {
-      p = p.transpose();
-      double *pt_array = p.fortran_vec();
-      boolT ismalloc = False;
+      p = p.transpose ();
+      double *pt_array = p.fortran_vec ();
+      boolT ismalloc = false;
 
       OCTAVE_LOCAL_BUFFER (char, flags, 250);
 
-      sprintf(flags,"qhull d %s",options.c_str());
+      sprintf (flags, "qhull d %s", options.c_str ());
 
-      // If you want some debugging information replace the NULL
-      // pointer with outfile.
+      // If you want some debugging information replace the 0 pointer
+      // with stdout or some other file open for writing.
 
-      FILE *outfile = stdout;
+      FILE *outfile = 0;
       FILE *errfile = stderr;
 
-      int exitcode =  qh_new_qhull (dim, n, pt_array, ismalloc, flags, 
-				    NULL, errfile);
-
-      if (exitcode)
+      if (! qh_new_qhull (dim, n, pt_array, ismalloc, flags, outfile, errfile))
 	{
-	  error("__delaunayn__: qhull failed.");
-	  return retval;
-	}
-
-      // triangulate non-simplicial facets
-      qh_triangulate(); 
+	  // triangulate non-simplicial facets
+	  qh_triangulate (); 
 
-      facetT *facet;
-      vertexT *vertex, **vertexp;
-      octave_idx_type nf = 0, i = 0;
+	  facetT *facet;
+	  vertexT *vertex, **vertexp;
+	  octave_idx_type nf = 0, i = 0;
 
-      FORALLfacets
-	{
-	  if (!facet->upperdelaunay)
-	    nf++;
-
-	  // Double check
-	  if (!facet->simplicial) 
+	  FORALLfacets
 	    {
-	      error("__delaunayn__: Qhull returned non-simplicial facets.\n",
-		    "Try delaunayn with different options.");
-	      break;
+	      if (! facet->upperdelaunay)
+		nf++;
+
+	      // Double check
+	      if (! facet->simplicial) 
+		{
+		  error ("__delaunayn__: Qhull returned non-simplicial facets -- try delaunayn with different options");
+		  break;
+		}
 	    }
-	}
+
+	  Matrix simpl (nf, dim+1);
 
-    if (!error_state) 
-      {
-	Matrix simpl(nf, dim+1);
-	FORALLfacets
-	  {
-	    if (!facet->upperdelaunay) 
-	      {
-		octave_idx_type j = 0;
-		FOREACHvertex_ (facet->vertices)
-		  {
-		    // if delaunayn crashes, enable this check
+	  FORALLfacets
+	    {
+	      if (! facet->upperdelaunay) 
+		{
+		  octave_idx_type j = 0;
+
+		  FOREACHvertex_ (facet->vertices)
+		    {
+		      // if delaunayn crashes, enable this check
 #if 0
-		    if (j > dim)
-		      {
-			error("__delaunayn__: internal error. Qhull returned non-simplicial facets.");
-			return retval;
-		      }
+		      if (j > dim)
+			{
+			  error ("__delaunayn__: internal error. Qhull returned non-simplicial facets");
+			  return retval;
+			}
 #endif
 
-		    simpl(i, j++) = 1 + qh_pointid(vertex->point);
-		  }
-		i++;
-	      }
-	  }
-	retval(0) = simpl;
-      }
-    
+		      simpl(i, j++) = 1 + qh_pointid(vertex->point);
+		    }
+		  i++;
+		}
+	    }
+
+	  retval(0) = simpl;
+
+	  // free long memory
+	  qh_freeqhull (! qh_ALL);
 
-    qh_freeqhull(!qh_ALL);
-    //free long memory
-
-    int curlong, totlong;
-    qh_memfreeshort (&curlong, &totlong);
-    //free short memory and memory allocator
+	  // free short memory and memory allocator
+	  int curlong, totlong;
+	  qh_memfreeshort (&curlong, &totlong);
 
-    if (curlong || totlong)
-      {
-	warning("__delaunay__: did not free %d bytes of long memory (%d pieces)",
-		totlong, curlong);
-      }
-    } 
+	  if (curlong || totlong)
+	    warning ("__delaunay__: did not free %d bytes of long memory (%d pieces)",
+		     totlong, curlong);
+	}
+      else
+	error ("__delaunayn__: qhull failed.");
+    }
   else if (n == dim + 1) 
     {
       // one should check if nx points span a simplex
       // I will look at this later.
-      RowVector vec(n);
+      RowVector vec (n);
       for (octave_idx_type i = 0; i < n; i++) 
-	{
-	  vec(i) = i + 1.0;
-	}
+	vec(i) = i + 1.0;
+
       retval(0) = vec;
     }
+
 #else
   error ("__delaunayn__: not available in this version of Octave");
 #endif
+
   return retval;
 }
diff --git a/src/DLD-FUNCTIONS/__dsearchn__.cc b/src/DLD-FUNCTIONS/__dsearchn__.cc
--- a/src/DLD-FUNCTIONS/__dsearchn__.cc
+++ b/src/DLD-FUNCTIONS/__dsearchn__.cc
@@ -30,17 +30,17 @@ 02110-1301, USA.
 #include <config.h>
 #endif
 
 #include "oct.h"
 
 DEFUN_DLD (__dsearchn__, args, ,
 	"-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{idx}, @var{d}] =} dsearch (@var{x}, @var{xi})\n\
-Internal function for dsearchn.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   int nargin = args.length();
   octave_value_list retval;
 
   if (nargin != 2)
     {
       print_usage ();
@@ -48,17 +48,17 @@ Internal function for dsearchn.\n\
     }
 
   Matrix x = args(0).matrix_value().transpose ();
   Matrix xi = args(1).matrix_value().transpose ();
 
   if (! error_state)
     {
       if (x.rows() != xi.rows() || x.columns() < 1)
-	error ("__dsearch__: dimensional mismatch.");
+	error ("__dsearch__: dimensional mismatch");
       else
 	{
 	  octave_idx_type n = x.rows();
 	  octave_idx_type nx = x.columns();
 	  octave_idx_type nxi = xi.columns();
 
 	  ColumnVector idx (nxi);
 	  double *pidx = idx.fortran_vec ();
diff --git a/src/DLD-FUNCTIONS/__glpk__.cc b/src/DLD-FUNCTIONS/__glpk__.cc
--- a/src/DLD-FUNCTIONS/__glpk__.cc
+++ b/src/DLD-FUNCTIONS/__glpk__.cc
@@ -455,18 +455,17 @@ glpk (int sense, int n, int m, double *c
 	    } \
 	} \
     } \
   while (0)
 
 DEFUN_DLD (__glpk__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{values}] =} __glpk__ (@var{args})\n\
-Internal interface for the GNU GLPK library.\n\
-You should be using using the @code{glpk} function instead.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   // The list of values to return.  See the declaration in oct-obj.h
   octave_value_list retval;
 
 #if defined (HAVE_GLPK)
 
   int nrhs = args.length ();
diff --git a/src/DLD-FUNCTIONS/__lin_interpn__.cc b/src/DLD-FUNCTIONS/__lin_interpn__.cc
--- a/src/DLD-FUNCTIONS/__lin_interpn__.cc
+++ b/src/DLD-FUNCTIONS/__lin_interpn__.cc
@@ -133,30 +133,31 @@ lin_interpn (int n, const octave_idx_typ
 		}
 
 	      vi[m] += c * v[l];
 	    }
 	}
     }
 }
 
+// Perform @var{n}-dimensional interpolation.  Each element of then
+// @var{n}-dimensional array @var{v} represents a value at a location
+// given by the parameters @var{x1}, @var{x2},...,@var{xn}. The parameters
+// @var{x1}, @var{x2}, @dots{}, @var{xn} are either @var{n}-dimensional
+// arrays of the same size as the array @var{v} in the \"ndgrid\" format
+// or vectors.  The parameters @var{y1}, @var{y2}, @dots{}, @var{yn} are
+// all @var{n}-dimensional arrays of the same size and represent the
+// points at which the array @var{vi} is interpolated.
+//
+//This function only performs linear interpolation.
+
 DEFUN_DLD (__lin_interpn__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{vi} =} __lin_interpn__ (@var{x1}, @var{x2}, @dots{}, @var{xn}, @var{v}, @var{y1}, @var{y2}, @dots{}, @var{yn})\n\
-Perform @var{n}-dimensional interpolation.  Each element of then\n\
-@var{n}-dimensional array @var{v} represents a value at a location\n\
-given by the parameters @var{x1}, @var{x2},...,@var{xn}. The parameters\n\
-@var{x1}, @var{x2}, @dots{}, @var{xn} are either @var{n}-dimensional\n\
-arrays of the same size as the array @var{v} in the \"ndgrid\" format\n\
-or vectors.  The parameters @var{y1}, @var{y2}, @dots{}, @var{yn} are\n\
-all @var{n}-dimensional arrays of the same size and represent the\n\
-points at which the array @var{vi} is interpolated.\n\
-\n\
-This function only performs linear interpolation.\n\
-@seealso{interp1, interp2, ndgrid}\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin < 2 ||  nargin % 2 == 0)
     {
diff --git a/src/DLD-FUNCTIONS/__pchip_deriv__.cc b/src/DLD-FUNCTIONS/__pchip_deriv__.cc
--- a/src/DLD-FUNCTIONS/__pchip_deriv__.cc
+++ b/src/DLD-FUNCTIONS/__pchip_deriv__.cc
@@ -35,21 +35,23 @@ 02110-1301, USA.
 extern "C"
 {
   F77_RET_T
   F77_FUNC (dpchim, DPCHIM) (const octave_idx_type& n, double *x, double *f,
 			     double *d, const octave_idx_type &incfd,
 			     octave_idx_type *ierr);
 }
 
+// Wrapper for SLATEC/PCHIP function DPCHIM to calculate the derivates
+// for piecewise polynomials.
+
 DEFUN_DLD (__pchip_deriv__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} __pchip_deriv__ (@var{x}, @var{y})\n\
-Wrapper for SLATEC/PCHIP function DPCHIM to calculate the derivates for\n\
-piecewise polynomials.  You should be using @code{pchip} function instead.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
   const int nargin = args.length ();
 
   if (nargin == 2)
     {
       ColumnVector xvec (args(0).vector_value ());
diff --git a/src/DLD-FUNCTIONS/__qp__.cc b/src/DLD-FUNCTIONS/__qp__.cc
--- a/src/DLD-FUNCTIONS/__qp__.cc
+++ b/src/DLD-FUNCTIONS/__qp__.cc
@@ -460,17 +460,20 @@ qp (const Matrix& H, const ColumnVector&
 	    }
 	}
     }
 
   return info;
 }
 
 DEFUN_DLD (__qp__, args, ,
-  "[x, lambda, info, iter] = __qp__ (x0, H, q, Aeq, beq, Ain, bin, maxit)")
+  "-*- texinfo -*-\n\
+@deftypefn {Loadable Function} {[@var{x}, @var{lambda}, @var{info}, @var{iter}] =} __qp__ (@var{x0}, @var{H}, @var{q}, @var{Aeq}, @var{beq}, @var{Ain}, @var{bin}, @var{maxit})\n\
+Undocumented internal function.\n\
+@end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 8)
     {
       const ColumnVector x0  (args(0) . vector_value ());
       const Matrix H         (args(1) . matrix_value ());
       const ColumnVector q   (args(2) . vector_value ());
diff --git a/src/DLD-FUNCTIONS/__voronoi__.cc b/src/DLD-FUNCTIONS/__voronoi__.cc
--- a/src/DLD-FUNCTIONS/__voronoi__.cc
+++ b/src/DLD-FUNCTIONS/__voronoi__.cc
@@ -47,187 +47,198 @@ extern "C" {
 char qh_version[] = "__voronoi__.oct 2007-07-24";
 #endif
 #endif
 
 DEFUN_DLD (__voronoi__, args, ,
         "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {@var{tri} =} __voronoi__ (@var{point})\n\
 @deftypefnx {Loadable Function} {@var{tri} =} __voronoi__ (@var{point}, @var{options})\n\
-Internal function for voronoi.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
+
 #ifdef HAVE_QHULL
+
   retval(0) = 0.0;
 
-  int nargin = args.length();
+  int nargin = args.length ();
   if (nargin < 1 || nargin > 2) 
     {
       print_usage ();
       return retval;
     }
 
   const char *options;
 
   if (nargin == 2) 
     {
-      if (!args (1).is_string ()) 
+      if (! args (1).is_string ()) 
 	{
 	  error ("__voronoi__: second argument must be a string");
 	  return retval;
 	}
-      options = args (1).string_value().c_str();
+
+      options = args (1).string_value().c_str ();
     }
   else
     options = "";
 
-  Matrix p(args(0).matrix_value());
+  Matrix p (args(0).matrix_value ());
 
-  const octave_idx_type dim = p.columns();
-  const octave_idx_type np = p.rows();
-  p = p.transpose();
+  const octave_idx_type dim = p.columns ();
+  const octave_idx_type np = p.rows ();
+  p = p.transpose ();
 
-  double *pt_array = p.fortran_vec();
+  double *pt_array = p.fortran_vec ();
+
   //double  pt_array[dim * np];
   //for (int i = 0; i < np; i++) 
   //  {
   //    for (int j = 0; j < dim; j++)
   //	  {
   //	    pt_array[j+i*dim] = p(i,j);
   //	  }
   //  }
 
   boolT ismalloc = false;
 
-  OCTAVE_LOCAL_BUFFER(char, flags, 250);
+  OCTAVE_LOCAL_BUFFER (char, flags, 250);
 
   // hmm  lot's of options for qhull here
-  sprintf(flags,"qhull v Fv T0 %s",options);
+  sprintf (flags, "qhull v Fv T0 %s", options);
 
-  // If you want some debugging information replace the NULL
-  // pointer with outfile.
-  FILE *outfile = stdout;
+  // If you want some debugging information replace the 0 pointer
+  // with stdout or some other file open for writing.
+
+  FILE *outfile = 0;
   FILE *errfile = stderr;
 
-  if (!qh_new_qhull (dim, np, pt_array, ismalloc, flags, NULL, errfile)) 
+  if (! qh_new_qhull (dim, np, pt_array, ismalloc, flags, outfile, errfile)) 
     {
-
-      // If you want some debugging information replace the NULL
-      // pointer with outfile.
       facetT *facet;
       vertexT *vertex;
 
       octave_idx_type i = 0, n = 1, k = 0, m = 0, fidx = 0, j = 0, r = 0;
-      OCTAVE_LOCAL_BUFFER(octave_idx_type, ni, np);
+      OCTAVE_LOCAL_BUFFER (octave_idx_type, ni, np);
       
       for (i = 0; i < np; i++) 
 	ni[i] = 0;
-      qh_setvoronoi_all();
+      qh_setvoronoi_all ();
       bool infinity_seen = false;
-      facetT *neighbor,**neighborp;
+      facetT *neighbor, **neighborp;
       coordT *voronoi_vertex;
+
       FORALLfacets 
 	{
 	  facet->seen = false;
 	}
+
       FORALLvertices 
 	{
 	  if (qh hull_dim == 3)
-	    qh_order_vertexneighbors(vertex);
+	    qh_order_vertexneighbors (vertex);
 	  infinity_seen = false;
-	  FOREACHneighbor_(vertex)
+
+	  FOREACHneighbor_ (vertex)
 	    {
-	      if (!neighbor->upperdelaunay)
+	      if (! neighbor->upperdelaunay)
 		{
-		  if (!neighbor->seen)
+		  if (! neighbor->seen)
 		    {
 		      n++;
-		      neighbor->seen=True;
+		      neighbor->seen = true;
 		    }
 		  ni[k]++;
 		}
-	      else if (!infinity_seen)
+	      else if (! infinity_seen)
 		{
 		  infinity_seen = true;
 		  ni[k]++;
 		}
 	    }
 	  k++;
 	}
 
-      Matrix v(n, dim);
+      Matrix v (n, dim);
       for (octave_idx_type d = 0; d < dim; d++)
 	v(0,d) = octave_Inf;
 
-      boolMatrix AtInf(np, 1);
+      boolMatrix AtInf (np, 1);
       for (i = 0; i < np; i++) 
 	AtInf(i) = false;
       octave_value_list F;
       k = 0;
       i = 0;
+
       FORALLfacets 
 	{
 	  facet->seen = false;
 	}
+
       FORALLvertices
 	{
 	  if (qh hull_dim == 3)
 	    qh_order_vertexneighbors(vertex);
 	  infinity_seen = false;
-	  RowVector facet_list(ni[k++]);
+	  RowVector facet_list (ni[k++]);
 	  m = 0;
+
 	  FOREACHneighbor_(vertex)
 	    {
 	      if (neighbor->upperdelaunay)
 		{
-		  if (!infinity_seen)
+		  if (! infinity_seen)
 		    {
 		      infinity_seen = true;
 		      facet_list(m++) = 1;
 		      AtInf(j) = true;
 		    }
 		} 
 	      else 
 		{
-		  if (!neighbor->seen)
+		  if (! neighbor->seen)
 		    {
 		      voronoi_vertex = neighbor->center;
 		      fidx = neighbor->id;
 		      i++;
 		      for (octave_idx_type d = 0; d < dim; d++)
 			{
 			  v(i,d) = *(voronoi_vertex++);
 			}
 		      neighbor->seen = true;
 		      neighbor->visitid = i;
 		    }
-		  facet_list(m++)=neighbor->visitid + 1;
+		  facet_list(m++) = neighbor->visitid + 1;
 		}
 	    }
 	  F(r++) = facet_list;
 	  j++;
 	}
 
       Cell C(r, 1);
       for (i = 0; i < r; i++)
 	C.elem (i) = F(i);
 
       retval(0) = v;
       retval(1) = C;
       retval(2) = AtInf;
 
-      //free long memory
-      qh_freeqhull(!qh_ALL);
+      // free long memory
+      qh_freeqhull (! qh_ALL);
 
-      //free short memory and memory allocator
+      // free short memory and memory allocator
       int curlong, totlong;
       qh_memfreeshort (&curlong, &totlong);
 
-      if (curlong || totlong) {
-	warning("__voronoi__: did not free %d bytes of long memory (%d pieces)", totlong, curlong);
-      }
+      if (curlong || totlong)
+	warning ("__voronoi__: did not free %d bytes of long memory (%d pieces)", totlong, curlong);
     }
+  else
+    error ("__voronoi__: qhull failed");
+
 #else
   error ("__voronoi__: not available in this version of Octave");
 #endif
+
   return retval;
 }
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -2609,20 +2609,22 @@ Remove singleton dimensions from @var{x}
   if (args.length () == 1)
     retval = args(0).squeeze ();
   else
     print_usage ();    
 
   return retval;
 }
 
+// Compute various norms of the vector X.
+
 DEFUN (__vnorm__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __vnorm__ (@var{x}, @var{p})\n\
-Compute various norms of the vector @var{x}.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 1 || nargin == 2)
     {
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -2627,17 +2627,17 @@ make_graphics_object (const std::string&
     error ("__go_%s__: invalid parent", go_name.c_str ());
 
   return retval;
 }
 
 DEFUN (__go_figure__, args, ,
    "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __go_figure__ (@var{fignum})\n\
-Create a figure graphics object.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   if (args.length () > 0)
     {
       double val = args(0).double_value ();
 
@@ -2691,70 +2691,71 @@ Create a figure graphics object.\n\
   else \
     print_usage (); \
  \
   return retval
 
 DEFUN (__go_axes__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __go_axes__ (@var{parent})\n\
-Create an axes graphics object.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   GO_BODY (axes);
 }
 
 DEFUN (__go_line__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __go_line__ (@var{parent})\n\
-Create a line graphics object.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   GO_BODY (line);
 }
 
 DEFUN (__go_text__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __go_text__ (@var{parent})\n\
-Create a text graphics object.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   GO_BODY (text);
 }
 
 DEFUN (__go_image__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __go_image__ (@var{parent})\n\
-Create an image graphics object.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   GO_BODY (image);
 }
 
 DEFUN (__go_surface__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __go_surface__ (@var{parent})\n\
-Create a surface graphics object.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   GO_BODY (surface);
 }
 
 DEFUN (__go_patch__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __go_patch__ (@var{parent})\n\
-Create a patch graphics object.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   GO_BODY (patch);
 }
 
 DEFUN (__go_delete__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __go_delete__ (@var{h})\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   if (args.length () == 1)
     {
       graphics_handle h = octave_NaN;
 
@@ -2786,17 +2787,17 @@ DEFUN (__go_delete__, args, ,
     print_usage ();
 
   return retval;
 }
 
 DEFUN (__go_axes_init__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __go_axes_init__ (@var{h}, @var{mode})\n\
-Initialize axes object.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   std::string mode = "";
 
@@ -2834,26 +2835,26 @@ Initialize axes object.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUN (__go_handles__, , ,
    "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __go_handles__ ()\n\
-Return current list of function handles.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   return octave_value (gh_manager::handle_list ());
 }
 
 DEFUN (__go_figure_handles__, , ,
    "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __go_figure_handles__ ()\n\
-Return current list of function handles.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   return octave_value (gh_manager::figure_handle_list ());
 }
 
 octave_value
 get_property_from_handle (double handle, const std::string &property,
 			  const std::string &func)
diff --git a/src/input.cc b/src/input.cc
--- a/src/input.cc
+++ b/src/input.cc
@@ -1260,17 +1260,17 @@ command and the command line option @cod
 {
   return SET_INTERNAL_VARIABLE (echo_executing_commands);
 }
 
 DEFUN (__request_drawnow__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __request_drawnow__ ()\n\
 @deftypefnx {Built-in Function} {} __request_drawnow__ (@var{flag})\n\
-Request a call drawnow at the next user prompt.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 0)
     Vdrawnow_requested = true;
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -222,16 +222,17 @@ initialize_pathsearch (void)
   if (odb.empty ())
     odb = Vdata_dir + file_ops::dir_sep_str + "octave:"
       + Vlibexec_dir + file_ops::dir_sep_str + "octave";
 }
 
 DEFUN (__version_info__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {retval =} __version_info__ (@var{name}, @var{version}, @var{release}, @var{date})\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   static Octave_map vinfo;
 
   int nargin = args.length ();
 
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -2536,17 +2536,17 @@ With -x, clear the variables that don't 
     }
 
   return retval;
 }
 
 DEFUN (__print_symtab_info__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __print_symtab_info__ ()\n\
-Print raw symbol table statistices.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
@@ -2582,17 +2582,17 @@ Print raw symbol table statistices.\n\
     print_usage ();
 
   return retval;
 }
 
 DEFUN (__print_symbol_info__, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __dump_symbol_info__ (@var{name})\n\
-Print symbol table information for the symbol @var{name}.\n\
+Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
   int nargin = args.length ();
 
   if (nargin == 1)
     {
