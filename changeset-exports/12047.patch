# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1248531760 -7200
#      Sat Jul 25 16:22:40 2009 +0200
# Branch release-3-2-x
# Node ID e929449b9b037408ada1cf3046632b09218a2401
# Parent  efdc5df061b680262ba449452c52559974b34860
fix Cholesky updating with scalars

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2009-07-23  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/chol.cc (Fcholupdate,
+	Fcholinsert, Fcholdelete, Fcholshift): Replace is_matrix_type ->
+	is_numeric_type.
+
 2009-07-20  Aleksej Saushev  <asau@inbox.ru>
 
 	* sysdep.cc: Also define BSD_init if __NetBSD__ is defined.
 	(sysdep_init): Also call BSD_init if __NetBSD__ is defined.
 
 2009-07-20  Jaroslav Hajek  <highegg@gmail.com>
 
 	* bitfcns.cc (DO_UBITSHIFT): Avoid overflow.
diff --git a/src/DLD-FUNCTIONS/chol.cc b/src/DLD-FUNCTIONS/chol.cc
--- a/src/DLD-FUNCTIONS/chol.cc
+++ b/src/DLD-FUNCTIONS/chol.cc
@@ -614,17 +614,17 @@ If @var{info} is not present, an error m
     {
       print_usage ();
       return retval;
     }
 
   octave_value argr = args(0);
   octave_value argu = args(1);
 
-  if (argr.is_matrix_type () && argu.is_matrix_type ()
+  if (argr.is_numeric_type () && argu.is_numeric_type ()
       && (nargin < 3 || args(2).is_string ()))
     {
       octave_idx_type n = argr.rows ();
 
       std::string op = (nargin < 3) ? "+" : args(2).string_value ();
 
       bool down = op == "-";
 
@@ -825,17 +825,17 @@ If @var{info} is not present, an error m
       print_usage ();
       return retval;
     }
 
   octave_value argr = args(0);
   octave_value argj = args(1);
   octave_value argu = args(2);
 
-  if (argr.is_matrix_type () && argu.is_matrix_type ()
+  if (argr.is_numeric_type () && argu.is_numeric_type ()
       && argj.is_real_scalar ())
     {
       octave_idx_type n = argr.rows ();
       octave_idx_type j = argj.scalar_value ();
 
       if (argr.columns () == n && argu.rows () == n+1 && argu.columns () == 1)
         {
           if (j > 0 && j <= n+1)
@@ -998,17 +998,17 @@ return the Cholesky@tie{}factorization o
     {
       print_usage ();
       return retval;
     }
 
   octave_value argr = args(0);
   octave_value argj = args(1);
 
-  if (argr.is_matrix_type () && argj.is_real_scalar ())
+  if (argr.is_numeric_type () && argj.is_real_scalar ())
     {
       octave_idx_type n = argr.rows ();
       octave_idx_type j = argj.scalar_value ();
 
       if (argr.columns () == n)
         {
           if (j > 0 && j <= n)
             {
@@ -1136,17 +1136,17 @@ return the Cholesky@tie{}factorization o
       print_usage ();
       return retval;
     }
 
   octave_value argr = args(0);
   octave_value argi = args(1);
   octave_value argj = args(2);
 
-  if (argr.is_matrix_type () && argi.is_real_scalar () && argj.is_real_scalar ())
+  if (argr.is_numeric_type () && argi.is_real_scalar () && argj.is_real_scalar ())
     {
       octave_idx_type n = argr.rows ();
       octave_idx_type i = argi.scalar_value ();
       octave_idx_type j = argj.scalar_value ();
 
       if (argr.columns () == n)
         {
           if (j > 0 && j <= n+1 && i > 0 && i <= n+1)
