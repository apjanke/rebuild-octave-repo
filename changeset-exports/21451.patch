# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1458068299 14400
#      Tue Mar 15 14:58:19 2016 -0400
# Node ID 763e302859353539fbf4c4814c0146b5092717c3
# Parent  2868abbc88eb9d01ac8f65194b01453e7e602a54
eliminate configuration macros from oct-fftw.h (bug #41027)

* oct-fftw.h: Eliminate FFTW configuration macros.
Don't include fftw.h.

* oct-fftw.h, oct-fftw.cc (octave_fftw_planner,
octave_float_fftw_planner): Use void pointer to represent fftw_plan
and fftwf_plan and cast as needed.

* fftw.cc: Include fftw.h

diff --git a/libinterp/dldfcn/fftw.cc b/libinterp/dldfcn/fftw.cc
--- a/libinterp/dldfcn/fftw.cc
+++ b/libinterp/dldfcn/fftw.cc
@@ -21,16 +21,20 @@ along with Octave; see the file COPYING.
 */
 
 #ifdef HAVE_CONFIG_H
 #  include "config.h"
 #endif
 
 #include <algorithm>
 
+#if defined (HAVE_FFTW3_H)
+#  include <fftw3.h>
+#endif
+
 #include "oct-fftw.h"
 
 #include "defun-dld.h"
 #include "error.h"
 #include "ov.h"
 
 #include "errwarn.h"
 
diff --git a/liboctave/numeric/oct-fftw.cc b/liboctave/numeric/oct-fftw.cc
--- a/liboctave/numeric/oct-fftw.cc
+++ b/liboctave/numeric/oct-fftw.cc
@@ -24,16 +24,20 @@ along with Octave; see the file COPYING.
 #  include "config.h"
 #endif
 
 #if defined (HAVE_FFTW)
 
 #include <iostream>
 #include <vector>
 
+#if defined (HAVE_FFTW3_H)
+#  include <fftw3.h>
+#endif
+
 #include "lo-error.h"
 #include "oct-fftw.h"
 #include "quit.h"
 #include "oct-locbuf.h"
 #include "singleton-cleanup.h"
 
 #if defined (HAVE_FFTW3_THREADS)
 #  include "nproc.h"
@@ -56,52 +60,52 @@ octave_fftw_planner *octave_fftw_planner
 // FIXME: if we can ensure 16 byte alignment in Array<T>
 // (<T> *data) the FFTW3 can use SIMD instructions for further
 // acceleration.
 
 // Note that it is profitable to store the FFTW3 plans, for small FFTs.
 
 octave_fftw_planner::octave_fftw_planner (void)
   : meth (ESTIMATE), rplan (0), rd (0), rs (0), rr (0), rh (0), rn (),
-    rsimd_align (false)
+    rsimd_align (false), nthreads (1)
 {
   plan[0] = plan[1] = 0;
   d[0] = d[1] = s[0] = s[1] = r[0] = r[1] = h[0] = h[1] = 0;
   simd_align[0] = simd_align[1] = false;
   inplace[0] = inplace[1] = false;
   n[0] = n[1] = dim_vector ();
 
 #if defined (HAVE_FFTW3_THREADS)
   int init_ret = fftw_init_threads ();
   if (! init_ret)
     (*current_liboctave_error_handler) ("Error initializing FFTW threads");
 
-  //Use number of processors available to the current process
-  //This can be later changed with fftw ("threads", nthreads)
+  // Use number of processors available to the current process
+  // This can be later changed with fftw ("threads", nthreads).
   nthreads = num_processors (NPROC_CURRENT);
   fftw_plan_with_nthreads (nthreads);
 #endif
 
   // If we have a system wide wisdom file, import it.
   fftw_import_system_wisdom ();
 }
 
 octave_fftw_planner::~octave_fftw_planner (void)
 {
   fftw_plan *plan_p;
 
-  plan_p = &rplan;
+  plan_p = reinterpret_cast<fftw_plan *> (&rplan);
   if (*plan_p)
     fftw_destroy_plan (*plan_p);
 
-  plan_p = &plan[0];
+  plan_p = reinterpret_cast<fftw_plan *> (&plan[0]);
   if (*plan_p)
     fftw_destroy_plan (*plan_p);
 
-  plan_p = &plan[1];
+  plan_p = reinterpret_cast<fftw_plan *> (&plan[1]);
   if (*plan_p)
     fftw_destroy_plan (*plan_p);
 }
 
 bool
 octave_fftw_planner::instance_ok (void)
 {
   bool retval = true;
@@ -116,29 +120,46 @@ octave_fftw_planner::instance_ok (void)
 
   if (! instance)
     (*current_liboctave_error_handler)
       ("unable to create octave_fftw_planner object!");
 
   return retval;
 }
 
-#define CHECK_SIMD_ALIGNMENT(x) \
+void
+octave_fftw_planner::threads (int nt)
+{
+#if defined (HAVE_FFTW3F_THREADS)
+  if (instance_ok () && nt != threads ())
+    {
+      instance->nthreads = nt;
+      fftw_plan_with_nthreads (nt);
+      // Clear the current plans.
+      instance->rplan = instance->plan[0] = instance->plan[1] = 0;
+    }
+#else
+  (*current_liboctave_warning_handler)
+    ("unable to change number of threads without FFTW thread support");
+#endif
+}
+
+#define CHECK_SIMD_ALIGNMENT(x)                         \
   (((reinterpret_cast<ptrdiff_t> (x)) & 0xF) == 0)
 
-fftw_plan
+void *
 octave_fftw_planner::do_create_plan (int dir, const int rank,
                                      const dim_vector dims,
                                      octave_idx_type howmany,
                                      octave_idx_type stride,
                                      octave_idx_type dist,
                                      const Complex *in, Complex *out)
 {
   int which = (dir == FFTW_FORWARD) ? 0 : 1;
-  fftw_plan *cur_plan_p = &plan[which];
+  fftw_plan *cur_plan_p = reinterpret_cast<fftw_plan *> (&plan[which]);
   bool create_new_plan = false;
   bool ioalign = CHECK_SIMD_ALIGNMENT (in) && CHECK_SIMD_ALIGNMENT (out);
   bool ioinplace = (in == out);
 
   // Don't create a new plan if we have a non SIMD plan already but
   // can do SIMD.  This prevents endlessly recreating plans if we
   // change the alignment.
 
@@ -244,24 +265,24 @@ octave_fftw_planner::do_create_plan (int
 
       if (*cur_plan_p == 0)
         (*current_liboctave_error_handler) ("Error creating fftw plan");
     }
 
   return *cur_plan_p;
 }
 
-fftw_plan
+void *
 octave_fftw_planner::do_create_plan (const int rank, const dim_vector dims,
                                      octave_idx_type howmany,
                                      octave_idx_type stride,
                                      octave_idx_type dist,
                                      const double *in, Complex *out)
 {
-  fftw_plan *cur_plan_p = &rplan;
+  fftw_plan *cur_plan_p = reinterpret_cast<fftw_plan *> (&rplan);
   bool create_new_plan = false;
   bool ioalign = CHECK_SIMD_ALIGNMENT (in) && CHECK_SIMD_ALIGNMENT (out);
 
   // Don't create a new plan if we have a non SIMD plan already but
   // can do SIMD.  This prevents endlessly recreating plans if we
   // change the alignment.
 
   if (rplan == 0 || rd != dist || rs != stride || rr != rank
@@ -380,69 +401,69 @@ octave_fftw_planner::do_method (FftwMeth
   if (_meth == ESTIMATE || _meth == MEASURE
       || _meth == PATIENT || _meth == EXHAUSTIVE
       || _meth == HYBRID)
     {
       if (meth != _meth)
         {
           meth = _meth;
           if (rplan)
-            fftw_destroy_plan (rplan);
+            fftw_destroy_plan (reinterpret_cast<fftw_plan> (rplan));
           if (plan[0])
-            fftw_destroy_plan (plan[0]);
+            fftw_destroy_plan (reinterpret_cast<fftw_plan> (plan[0]));
           if (plan[1])
-            fftw_destroy_plan (plan[1]);
+            fftw_destroy_plan (reinterpret_cast<fftw_plan> (plan[1]));
           rplan = plan[0] = plan[1] = 0;
         }
     }
   else
     ret = UNKNOWN;
   return ret;
 }
 
 octave_float_fftw_planner *octave_float_fftw_planner::instance = 0;
 
 octave_float_fftw_planner::octave_float_fftw_planner (void)
   : meth (ESTIMATE), rplan (0), rd (0), rs (0), rr (0), rh (0), rn (),
-    rsimd_align (false)
+    rsimd_align (false), nthreads (1)
 {
   plan[0] = plan[1] = 0;
   d[0] = d[1] = s[0] = s[1] = r[0] = r[1] = h[0] = h[1] = 0;
   simd_align[0] = simd_align[1] = false;
   inplace[0] = inplace[1] = false;
   n[0] = n[1] = dim_vector ();
 
 #if defined (HAVE_FFTW3F_THREADS)
   int init_ret = fftwf_init_threads ();
   if (! init_ret)
     (*current_liboctave_error_handler) ("Error initializing FFTW3F threads");
 
-  //Use number of processors available to the current process
-  //This can be later changed with fftw ("threads", nthreads)
+  // Use number of processors available to the current process
+  // This can be later changed with fftw ("threads", nthreads).
   nthreads = num_processors (NPROC_CURRENT);
   fftwf_plan_with_nthreads (nthreads);
 #endif
 
   // If we have a system wide wisdom file, import it.
   fftwf_import_system_wisdom ();
 }
 
 octave_float_fftw_planner::~octave_float_fftw_planner (void)
 {
   fftwf_plan *plan_p;
 
-  plan_p = &rplan;
+  plan_p = reinterpret_cast<fftwf_plan *> (&rplan);
   if (*plan_p)
     fftwf_destroy_plan (*plan_p);
 
-  plan_p = &plan[0];
+  plan_p = reinterpret_cast<fftwf_plan *> (&plan[0]);
   if (*plan_p)
     fftwf_destroy_plan (*plan_p);
 
-  plan_p = &plan[1];
+  plan_p = reinterpret_cast<fftwf_plan *> (&plan[1]);
   if (*plan_p)
     fftwf_destroy_plan (*plan_p);
 }
 
 bool
 octave_float_fftw_planner::instance_ok (void)
 {
   bool retval = true;
@@ -457,27 +478,44 @@ octave_float_fftw_planner::instance_ok (
 
   if (! instance)
     (*current_liboctave_error_handler)
       ("unable to create octave_fftw_planner object!");
 
   return retval;
 }
 
-fftwf_plan
+void
+octave_float_fftw_planner::threads (int nt)
+{
+#if defined (HAVE_FFTW3F_THREADS)
+  if (instance_ok () && nt != threads ())
+    {
+      instance->nthreads = nt;
+      fftwf_plan_with_nthreads (nt);
+      // Clear the current plans.
+      instance->rplan = instance->plan[0] = instance->plan[1] = 0;
+    }
+#else
+  (*current_liboctave_warning_handler)
+    ("unable to change number of threads without FFTW thread support");
+#endif
+}
+
+void *
 octave_float_fftw_planner::do_create_plan (int dir, const int rank,
                                            const dim_vector dims,
                                            octave_idx_type howmany,
                                            octave_idx_type stride,
                                            octave_idx_type dist,
                                            const FloatComplex *in,
                                            FloatComplex *out)
 {
   int which = (dir == FFTW_FORWARD) ? 0 : 1;
-  fftwf_plan *cur_plan_p = &plan[which];
+  fftwf_plan *cur_plan_p = reinterpret_cast<fftwf_plan *> (&plan[which]);
   bool create_new_plan = false;
   bool ioalign = CHECK_SIMD_ALIGNMENT (in) && CHECK_SIMD_ALIGNMENT (out);
   bool ioinplace = (in == out);
 
   // Don't create a new plan if we have a non SIMD plan already but
   // can do SIMD.  This prevents endlessly recreating plans if we
   // change the alignment.
 
@@ -583,25 +621,25 @@ octave_float_fftw_planner::do_create_pla
 
       if (*cur_plan_p == 0)
         (*current_liboctave_error_handler) ("Error creating fftw plan");
     }
 
   return *cur_plan_p;
 }
 
-fftwf_plan
+void *
 octave_float_fftw_planner::do_create_plan (const int rank,
                                            const dim_vector dims,
                                            octave_idx_type howmany,
                                            octave_idx_type stride,
                                            octave_idx_type dist,
                                            const float *in, FloatComplex *out)
 {
-  fftwf_plan *cur_plan_p = &rplan;
+  fftwf_plan *cur_plan_p = reinterpret_cast<fftwf_plan *> (&rplan);
   bool create_new_plan = false;
   bool ioalign = CHECK_SIMD_ALIGNMENT (in) && CHECK_SIMD_ALIGNMENT (out);
 
   // Don't create a new plan if we have a non SIMD plan already but
   // can do SIMD.  This prevents endlessly recreating plans if we
   // change the alignment.
 
   if (rplan == 0 || rd != dist || rs != stride || rr != rank
@@ -720,21 +758,21 @@ octave_float_fftw_planner::do_method (Ff
   if (_meth == ESTIMATE || _meth == MEASURE
       || _meth == PATIENT || _meth == EXHAUSTIVE
       || _meth == HYBRID)
     {
       if (meth != _meth)
         {
           meth = _meth;
           if (rplan)
-            fftwf_destroy_plan (rplan);
+            fftwf_destroy_plan (reinterpret_cast<fftwf_plan> (rplan));
           if (plan[0])
-            fftwf_destroy_plan (plan[0]);
+            fftwf_destroy_plan (reinterpret_cast<fftwf_plan> (plan[0]));
           if (plan[1])
-            fftwf_destroy_plan (plan[1]);
+            fftwf_destroy_plan (reinterpret_cast<fftwf_plan> (plan[1]));
           rplan = plan[0] = plan[1] = 0;
         }
     }
   else
     ret = UNKNOWN;
   return ret;
 }
 
@@ -819,18 +857,19 @@ convert_packcomplex_Nd (T *out, const di
 
 int
 octave_fftw::fft (const double *in, Complex *out, size_t npts,
                   size_t nsamples, octave_idx_type stride, octave_idx_type dist)
 {
   dist = (dist < 0 ? npts : dist);
 
   dim_vector dv (npts, 1);
-  fftw_plan plan = octave_fftw_planner::create_plan (1, dv, nsamples,
-                                                     stride, dist, in, out);
+  void *vplan = octave_fftw_planner::create_plan (1, dv, nsamples,
+                                                  stride, dist, in, out);
+  fftw_plan plan = reinterpret_cast<fftw_plan> (vplan);
 
   fftw_execute_dft_r2c (plan, (const_cast<double *>(in)),
                         reinterpret_cast<fftw_complex *> (out));
 
   // Need to create other half of the transform.
 
   convert_packcomplex_1d (out, nsamples, npts, stride, dist);
 
@@ -839,38 +878,40 @@ octave_fftw::fft (const double *in, Comp
 
 int
 octave_fftw::fft (const Complex *in, Complex *out, size_t npts,
                   size_t nsamples, octave_idx_type stride, octave_idx_type dist)
 {
   dist = (dist < 0 ? npts : dist);
 
   dim_vector dv (npts, 1);
-  fftw_plan plan = octave_fftw_planner::create_plan (FFTW_FORWARD, 1, dv,
+  void *vplan = octave_fftw_planner::create_plan (FFTW_FORWARD, 1, dv,
                                                      nsamples, stride,
                                                      dist, in, out);
+  fftw_plan plan = reinterpret_cast<fftw_plan> (vplan);
 
   fftw_execute_dft (plan,
                     reinterpret_cast<fftw_complex *> (const_cast<Complex *>(in)),
                     reinterpret_cast<fftw_complex *> (out));
 
   return 0;
 }
 
 int
 octave_fftw::ifft (const Complex *in, Complex *out, size_t npts,
                    size_t nsamples, octave_idx_type stride,
                    octave_idx_type dist)
 {
   dist = (dist < 0 ? npts : dist);
 
   dim_vector dv (npts, 1);
-  fftw_plan plan = octave_fftw_planner::create_plan (FFTW_BACKWARD, 1, dv,
+  void *vplan = octave_fftw_planner::create_plan (FFTW_BACKWARD, 1, dv,
                                                      nsamples, stride,
                                                      dist, in, out);
+  fftw_plan plan = reinterpret_cast<fftw_plan> (vplan);
 
   fftw_execute_dft (plan,
                     reinterpret_cast<fftw_complex *> (const_cast<Complex *>(in)),
                     reinterpret_cast<fftw_complex *> (out));
 
   const Complex scale = npts;
   for (size_t j = 0; j < nsamples; j++)
     for (size_t i = 0; i < npts; i++)
@@ -887,18 +928,19 @@ octave_fftw::fftNd (const double *in, Co
   for (int i = 0; i < rank; i++)
     dist *= dv(i);
 
   // Fool with the position of the start of the output matrix, so that
   // creating other half of the matrix won't cause cache problems.
 
   octave_idx_type offset = (dv.numel () / dv(0)) * ((dv(0) - 1) / 2);
 
-  fftw_plan plan = octave_fftw_planner::create_plan (rank, dv, 1, 1, dist,
-                                                     in, out + offset);
+  void *vplan = octave_fftw_planner::create_plan (rank, dv, 1, 1, dist,
+                                                  in, out + offset);
+  fftw_plan plan = reinterpret_cast<fftw_plan> (vplan);
 
   fftw_execute_dft_r2c (plan, (const_cast<double *>(in)),
                         reinterpret_cast<fftw_complex *> (out+ offset));
 
   // Need to create other half of the transform.
 
   convert_packcomplex_Nd (out, dv);
 
@@ -908,36 +950,38 @@ octave_fftw::fftNd (const double *in, Co
 int
 octave_fftw::fftNd (const Complex *in, Complex *out, const int rank,
                     const dim_vector &dv)
 {
   octave_idx_type dist = 1;
   for (int i = 0; i < rank; i++)
     dist *= dv(i);
 
-  fftw_plan plan = octave_fftw_planner::create_plan (FFTW_FORWARD, rank,
-                                                     dv, 1, 1, dist, in, out);
+  void *vplan = octave_fftw_planner::create_plan (FFTW_FORWARD, rank,
+                                                  dv, 1, 1, dist, in, out);
+  fftw_plan plan = reinterpret_cast<fftw_plan> (vplan);
 
   fftw_execute_dft (plan,
                     reinterpret_cast<fftw_complex *> (const_cast<Complex *>(in)),
                     reinterpret_cast<fftw_complex *> (out));
 
   return 0;
 }
 
 int
 octave_fftw::ifftNd (const Complex *in, Complex *out, const int rank,
                      const dim_vector &dv)
 {
   octave_idx_type dist = 1;
   for (int i = 0; i < rank; i++)
     dist *= dv(i);
 
-  fftw_plan plan = octave_fftw_planner::create_plan (FFTW_BACKWARD, rank,
-                                                     dv, 1, 1, dist, in, out);
+  void *vplan = octave_fftw_planner::create_plan (FFTW_BACKWARD, rank,
+                                                  dv, 1, 1, dist, in, out);
+  fftw_plan plan = reinterpret_cast<fftw_plan> (vplan);
 
   fftw_execute_dft (plan,
                     reinterpret_cast<fftw_complex *> (const_cast<Complex *>(in)),
                     reinterpret_cast<fftw_complex *> (out));
 
   const size_t npts = dv.numel ();
   const Complex scale = npts;
   for (size_t i = 0; i < npts; i++)
@@ -948,19 +992,20 @@ octave_fftw::ifftNd (const Complex *in, 
 
 int
 octave_fftw::fft (const float *in, FloatComplex *out, size_t npts,
                   size_t nsamples, octave_idx_type stride, octave_idx_type dist)
 {
   dist = (dist < 0 ? npts : dist);
 
   dim_vector dv (npts, 1);
-  fftwf_plan plan = octave_float_fftw_planner::create_plan (1, dv, nsamples,
-                                                            stride, dist,
-                                                            in, out);
+  void *vplan = octave_float_fftw_planner::create_plan (1, dv, nsamples,
+                                                        stride, dist,
+                                                        in, out);
+  fftwf_plan plan = reinterpret_cast<fftwf_plan> (vplan);
 
   fftwf_execute_dft_r2c (plan, (const_cast<float *>(in)),
                          reinterpret_cast<fftwf_complex *> (out));
 
   // Need to create other half of the transform.
 
   convert_packcomplex_1d (out, nsamples, npts, stride, dist);
 
@@ -969,40 +1014,42 @@ octave_fftw::fft (const float *in, Float
 
 int
 octave_fftw::fft (const FloatComplex *in, FloatComplex *out, size_t npts,
                   size_t nsamples, octave_idx_type stride, octave_idx_type dist)
 {
   dist = (dist < 0 ? npts : dist);
 
   dim_vector dv (npts, 1);
-  fftwf_plan plan = octave_float_fftw_planner::create_plan (FFTW_FORWARD, 1,
-                                                            dv, nsamples,
-                                                            stride, dist,
-                                                            in, out);
+  void *vplan = octave_float_fftw_planner::create_plan (FFTW_FORWARD, 1,
+                                                        dv, nsamples,
+                                                        stride, dist,
+                                                        in, out);
+  fftwf_plan plan = reinterpret_cast<fftwf_plan> (vplan);
 
   fftwf_execute_dft (plan,
                      reinterpret_cast<fftwf_complex *> (const_cast<FloatComplex *>(in)),
                      reinterpret_cast<fftwf_complex *> (out));
 
   return 0;
 }
 
 int
 octave_fftw::ifft (const FloatComplex *in, FloatComplex *out, size_t npts,
                    size_t nsamples, octave_idx_type stride,
                    octave_idx_type dist)
 {
   dist = (dist < 0 ? npts : dist);
 
   dim_vector dv (npts, 1);
-  fftwf_plan plan = octave_float_fftw_planner::create_plan (FFTW_BACKWARD, 1,
-                                                            dv, nsamples,
-                                                            stride, dist,
-                                                            in, out);
+  void *vplan = octave_float_fftw_planner::create_plan (FFTW_BACKWARD, 1,
+                                                        dv, nsamples,
+                                                        stride, dist,
+                                                        in, out);
+  fftwf_plan plan = reinterpret_cast<fftwf_plan> (vplan);
 
   fftwf_execute_dft (plan,
                      reinterpret_cast<fftwf_complex *> (const_cast<FloatComplex *>(in)),
                      reinterpret_cast<fftwf_complex *> (out));
 
   const FloatComplex scale = npts;
   for (size_t j = 0; j < nsamples; j++)
     for (size_t i = 0; i < npts; i++)
@@ -1019,19 +1066,20 @@ octave_fftw::fftNd (const float *in, Flo
   for (int i = 0; i < rank; i++)
     dist *= dv(i);
 
   // Fool with the position of the start of the output matrix, so that
   // creating other half of the matrix won't cause cache problems.
 
   octave_idx_type offset = (dv.numel () / dv(0)) * ((dv(0) - 1) / 2);
 
-  fftwf_plan plan = octave_float_fftw_planner::create_plan (rank, dv, 1, 1,
-                                                            dist, in,
-                                                            out + offset);
+  void *vplan = octave_float_fftw_planner::create_plan (rank, dv, 1, 1,
+                                                        dist, in,
+                                                        out + offset);
+  fftwf_plan plan = reinterpret_cast<fftwf_plan> (vplan);
 
   fftwf_execute_dft_r2c (plan, (const_cast<float *>(in)),
                          reinterpret_cast<fftwf_complex *> (out+ offset));
 
   // Need to create other half of the transform.
 
   convert_packcomplex_Nd (out, dv);
 
@@ -1041,38 +1089,40 @@ octave_fftw::fftNd (const float *in, Flo
 int
 octave_fftw::fftNd (const FloatComplex *in, FloatComplex *out, const int rank,
                     const dim_vector &dv)
 {
   octave_idx_type dist = 1;
   for (int i = 0; i < rank; i++)
     dist *= dv(i);
 
-  fftwf_plan plan = octave_float_fftw_planner::create_plan (FFTW_FORWARD,
-                                                            rank, dv, 1, 1,
-                                                            dist, in, out);
+  void *vplan = octave_float_fftw_planner::create_plan (FFTW_FORWARD,
+                                                        rank, dv, 1, 1,
+                                                        dist, in, out);
+  fftwf_plan plan = reinterpret_cast<fftwf_plan> (vplan);
 
   fftwf_execute_dft (plan,
                      reinterpret_cast<fftwf_complex *> (const_cast<FloatComplex *>(in)),
                      reinterpret_cast<fftwf_complex *> (out));
 
   return 0;
 }
 
 int
 octave_fftw::ifftNd (const FloatComplex *in, FloatComplex *out, const int rank,
                      const dim_vector &dv)
 {
   octave_idx_type dist = 1;
   for (int i = 0; i < rank; i++)
     dist *= dv(i);
 
-  fftwf_plan plan = octave_float_fftw_planner::create_plan (FFTW_BACKWARD,
+  void *vplan = octave_float_fftw_planner::create_plan (FFTW_BACKWARD,
                                                             rank, dv, 1, 1,
                                                             dist, in, out);
+  fftwf_plan plan = reinterpret_cast<fftwf_plan> (vplan);
 
   fftwf_execute_dft (plan,
                      reinterpret_cast<fftwf_complex *> (const_cast<FloatComplex *>(in)),
                      reinterpret_cast<fftwf_complex *> (out));
 
   const size_t npts = dv.numel ();
   const FloatComplex scale = npts;
   for (size_t i = 0; i < npts; i++)
diff --git a/liboctave/numeric/oct-fftw.h b/liboctave/numeric/oct-fftw.h
--- a/liboctave/numeric/oct-fftw.h
+++ b/liboctave/numeric/oct-fftw.h
@@ -22,25 +22,19 @@ along with Octave; see the file COPYING.
 
 #if ! defined (octave_oct_fftw_h)
 #define octave_oct_fftw_h 1
 
 #include "octave-config.h"
 
 #include <cstddef>
 
-#if defined (HAVE_FFTW3_H)
-#  include <fftw3.h>
-#endif
-
 #include "oct-cmplx.h"
 #include "dim-vector.h"
 
-#if defined (HAVE_FFTW)
-
 class
 OCTAVE_API
 octave_fftw_planner
 {
 protected:
 
   octave_fftw_planner (void);
 
@@ -55,108 +49,93 @@ public:
     MEASURE,
     PATIENT,
     EXHAUSTIVE,
     HYBRID
   };
 
   static bool instance_ok (void);
 
-  static fftw_plan
+  static void *
   create_plan (int dir, const int rank, const dim_vector dims,
                octave_idx_type howmany, octave_idx_type stride,
                octave_idx_type dist, const Complex *in,
                Complex *out)
   {
-    static fftw_plan dummy;
-
     return instance_ok ()
            ? instance->do_create_plan (dir, rank, dims, howmany, stride,
                                        dist, in, out)
-           : dummy;
+           : 0;
   }
 
-  static fftw_plan
+  static void *
   create_plan (const int rank, const dim_vector dims,
                octave_idx_type howmany, octave_idx_type stride,
                octave_idx_type dist, const double *in, Complex *out)
   {
-    static fftw_plan dummy;
-
     return instance_ok ()
            ? instance->do_create_plan (rank, dims, howmany, stride, dist,
                                        in, out)
-           : dummy;
+           : 0;
   }
 
   static FftwMethod method (void)
   {
     static FftwMethod dummy;
 
     return instance_ok () ? instance->do_method () : dummy;
   }
 
   static FftwMethod method (FftwMethod _meth)
   {
     static FftwMethod dummy;
 
     return instance_ok () ? instance->do_method (_meth) : dummy;
   }
 
-#if defined (HAVE_FFTW3F_THREADS)
-  static void threads (int _nthreads)
-  {
-    if (instance_ok () && _nthreads != threads ())
-      {
-        instance->nthreads = _nthreads;
-        fftw_plan_with_nthreads (_nthreads);
-        //Clear the current plans
-        instance->rplan = instance->plan[0] = instance->plan[1] = 0;
-      }
-  }
+  static void threads (int nt);
 
-  static int threads ()
+  static int threads (void)
   {
     return instance_ok () ? instance->nthreads : 0;
   }
-#endif
 
 private:
 
   // No copying!
 
   octave_fftw_planner (const octave_fftw_planner&);
 
   octave_fftw_planner& operator = (const octave_fftw_planner&);
 
   static octave_fftw_planner *instance;
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
-  fftw_plan
+  void *
   do_create_plan (int dir, const int rank, const dim_vector dims,
                   octave_idx_type howmany, octave_idx_type stride,
                   octave_idx_type dist, const Complex *in,
                   Complex *out);
 
-  fftw_plan
+  void *
   do_create_plan (const int rank, const dim_vector dims,
                   octave_idx_type howmany, octave_idx_type stride,
                   octave_idx_type dist, const double *in, Complex *out);
 
   FftwMethod do_method (void);
 
   FftwMethod do_method (FftwMethod _meth);
 
   FftwMethod meth;
 
   // FIXME: perhaps this should be split into two classes?
 
   // Plan for fft and ifft of complex values
-  fftw_plan plan[2];
+  void *plan[2];
 
   // dist
   octave_idx_type d[2];
 
   // stride
   octave_idx_type s[2];
 
   // rank
@@ -167,17 +146,17 @@ private:
 
   // dims
   dim_vector n[2];
 
   bool simd_align[2];
   bool inplace[2];
 
   // Plan for fft of real values
-  fftw_plan rplan;
+  void *rplan;
 
   // dist
   octave_idx_type rd;
 
   // stride
   octave_idx_type rs;
 
   // rank
@@ -186,20 +165,19 @@ private:
   // howmany
   octave_idx_type rh;
 
   // dims
   dim_vector rn;
 
   bool rsimd_align;
 
-#if defined (HAVE_FFTW3_THREADS)
-  //number of threads when compiled with Multi-threading support
+  // number of threads.  Always 1 unless compiled with Multi-threading
+  // support.
   int nthreads;
-#endif
 };
 
 class
 OCTAVE_API
 octave_float_fftw_planner
 {
 protected:
 
@@ -216,108 +194,93 @@ public:
     MEASURE,
     PATIENT,
     EXHAUSTIVE,
     HYBRID
   };
 
   static bool instance_ok (void);
 
-  static fftwf_plan
+  static void *
   create_plan (int dir, const int rank, const dim_vector dims,
                octave_idx_type howmany, octave_idx_type stride,
                octave_idx_type dist, const FloatComplex *in,
                FloatComplex *out)
   {
-    static fftwf_plan dummy;
-
     return instance_ok ()
            ? instance->do_create_plan (dir, rank, dims, howmany, stride,
                                        dist, in, out)
-           : dummy;
+           : 0;
   }
 
-  static fftwf_plan
+  static void *
   create_plan (const int rank, const dim_vector dims,
                octave_idx_type howmany, octave_idx_type stride,
                octave_idx_type dist, const float *in, FloatComplex *out)
   {
-    static fftwf_plan dummy;
-
     return instance_ok ()
            ? instance->do_create_plan (rank, dims, howmany, stride, dist,
                                        in, out)
-           : dummy;
+           : 0;
   }
 
   static FftwMethod method (void)
   {
     static FftwMethod dummy;
 
     return instance_ok () ? instance->do_method () : dummy;
   }
 
   static FftwMethod method (FftwMethod _meth)
   {
     static FftwMethod dummy;
 
     return instance_ok () ? instance->do_method (_meth) : dummy;
   }
 
-#if defined (HAVE_FFTW3F_THREADS)
-  static void threads (int _nthreads)
-  {
-    if (instance_ok () && _nthreads != threads ())
-      {
-        instance->nthreads = _nthreads;
-        fftwf_plan_with_nthreads (_nthreads);
-        //Clear the current plans
-        instance->rplan = instance->plan[0] = instance->plan[1] = 0;
-      }
-  }
+  static void threads (int nt);
 
-  static int threads ()
+  static int threads (void)
   {
     return instance_ok () ? instance->nthreads : 0;
   }
-#endif
 
 private:
 
   // No copying!
 
   octave_float_fftw_planner (const octave_float_fftw_planner&);
 
   octave_float_fftw_planner& operator = (const octave_float_fftw_planner&);
 
   static octave_float_fftw_planner *instance;
 
   static void cleanup_instance (void) { delete instance; instance = 0; }
 
-  fftwf_plan
+  void *
   do_create_plan (int dir, const int rank, const dim_vector dims,
                   octave_idx_type howmany, octave_idx_type stride,
                   octave_idx_type dist, const FloatComplex *in,
                   FloatComplex *out);
 
-  fftwf_plan
+  void *
   do_create_plan (const int rank, const dim_vector dims,
                   octave_idx_type howmany, octave_idx_type stride,
                   octave_idx_type dist, const float *in, FloatComplex *out);
 
   FftwMethod do_method (void);
 
   FftwMethod do_method (FftwMethod _meth);
 
   FftwMethod meth;
 
   // FIXME: perhaps this should be split into two classes?
 
   // Plan for fft and ifft of complex values
-  fftwf_plan plan[2];
+  void *plan[2];
 
   // dist
   octave_idx_type d[2];
 
   // stride
   octave_idx_type s[2];
 
   // rank
@@ -328,17 +291,17 @@ private:
 
   // dims
   dim_vector n[2];
 
   bool simd_align[2];
   bool inplace[2];
 
   // Plan for fft of real values
-  fftwf_plan rplan;
+  void *rplan;
 
   // dist
   octave_idx_type rd;
 
   // stride
   octave_idx_type rs;
 
   // rank
@@ -347,20 +310,19 @@ private:
   // howmany
   octave_idx_type rh;
 
   // dims
   dim_vector rn;
 
   bool rsimd_align;
 
-#if defined (HAVE_FFTW3F_THREADS)
-  //number of threads when compiled with Multi-threading support
+  // number of threads.  Always 1 unless compiled with Multi-threading
+  // support.
   int nthreads;
-#endif
 };
 
 class
 OCTAVE_API
 octave_fftw
 {
 public:
 
@@ -398,10 +360,8 @@ public:
 
 private:
   octave_fftw (void);
   octave_fftw (const octave_fftw&);
   octave_fftw& operator = (const octave_fftw&);
 };
 
 #endif
-
-#endif
