# HG changeset patch
# User David Bateman <dbateman@free.fr>
# Date 1251100967 -7200
#      Mon Aug 24 10:02:47 2009 +0200
# Branch release-3-2-x
# Node ID 6624d0ac6a52770da69c91e4e620abc71d0ab3a9
# Parent  310063a874079095b0e3ea456863980304f6e59f
Fix test for setting of datasource properties. Add the edgecolor property to contours

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2009-08-22  David Bateman  <dbateman@free.fr>
+
+	* plot/__add_datasource__.m: Correct test for "datasource" argument
+	* plot/__countour__.m: Add edgecolor properties and make it an alias
+	for linecolor with the value "auto" being "flat" for the edgecolor.
+
 2009-08-04  Pieter Eendebak <pieter.eendebak@gmail.com> 
 
 	* set/setxor.m: Support cell arrays of strings.
 
 2009-08-05  Olli Saarela  <olli.saarela@gmail.com>
 
 	* plot/__gnuplot_get_var__.m: If read fails to return data, sleep
 	before trying again.
diff --git a/scripts/plot/__add_datasource__.m b/scripts/plot/__add_datasource__.m
--- a/scripts/plot/__add_datasource__.m
+++ b/scripts/plot/__add_datasource__.m
@@ -35,17 +35,17 @@ function newargs = __add_datasource__ (f
     addproperty (strcat (data{i}, "datasource"), h, "string", "");
   endfor
 
   i = 0;
   newargs = {};
   while (i < numel (varargin))
     arg = varargin{++i};
     if (i != numel(varargin) && ischar (arg)
-	&& length (arg) > 1 && strcmpi (arg(end-9:end), "datasource"))
+	&& length (arg) > 9 && strcmpi (arg(end-9:end), "datasource"))
       arg = tolower (arg);
       val = varargin{++i};
       if (ischar (val))
 	set (h, arg, val);
       else
 	error ("%s: expecting data source to be a string", fcn);
       endif
     else
diff --git a/scripts/plot/__contour__.m b/scripts/plot/__contour__.m
--- a/scripts/plot/__contour__.m
+++ b/scripts/plot/__contour__.m
@@ -23,16 +23,17 @@
 
 function [c, hg] = __contour__ (varargin)
   ax = varargin{1};
   zlevel = varargin{2};
   filled = "off";
 
   linespec.linestyle = "-";
   linespec.color = "auto";
+  edgecolor = "flat";
   for i = 3 : nargin
     arg = varargin {i};
     if ((ischar (arg) || iscell (arg)))
       [linespec, valid] = __pltopt__ ("__contour__", arg, false);
       if (isempty (linespec.color))
 	linespec.color = "auto";
       endif
       if (valid)
@@ -47,16 +48,27 @@ function [c, hg] = __contour__ (varargin
   i = 3;
   while (i < length (varargin))
     if (ischar (varargin {i}))
       if (strcmpi (varargin{i}, "fill"))
 	filled = varargin {i + 1};
 	varargin(i:i+1) = [];
       elseif (strcmpi (varargin{i}, "linecolor"))
 	linespec.color = varargin {i + 1};
+	edgecolor = linespec.color;
+	if (ischar (edgecolor) && strcmpi (edgecolor, "auto"))
+	  edgecolor = "flat";
+	endif
+	varargin(i:i+1) = [];
+      elseif (strcmpi (varargin{i}, "edgecolor"))
+	linespec.color = varargin {i + 1};
+	edgecolor = linespec.color;
+	if (ischar (edgecolor) && strcmpi (edgecolor, "flat"))
+	  linespec.color = "auto";
+	endif
 	varargin(i:i+1) = [];
       else
 	opts{end+1} = varargin{i};
         varargin(i) = [];
         opts{end+1} = varargin{i};
         varargin(i) = [];
       endif
     else
@@ -159,16 +171,20 @@ function [c, hg] = __contour__ (varargin
   addproperty ("textstep", hg, "double", lvlstep);
   addproperty ("textstepmode", hg, "radio", "{auto}|manual", "auto");
   addproperty ("showtext", hg, "radio", "on|{off}", "off");
 
   addproperty ("linecolor", hg, "color", linespec.color, "{auto}|none");
   addproperty ("linestyle", hg, "linelinestyle", linespec.linestyle);
   addproperty ("linewidth", hg, "linelinewidth", 0.5);
 
+  ## FIXME It would be good to hide this property which is just an undocumented
+  ## alias for linecolor
+  addproperty ("edgecolor", hg, "color", edgecolor, "{flat}|none");
+
   addlistener (hg, "fill", @update_data);
 
   addlistener (hg, "zlevelmode", @update_zlevel);
   addlistener (hg, "zlevel", @update_zlevel);
 
   addlistener (hg, "levellist", @update_data);
   addlistener (hg, "levelstep", @update_data);
   addlistener (hg, "levellistmode", @update_data);
@@ -180,16 +196,18 @@ function [c, hg] = __contour__ (varargin
   addlistener (hg, "textstep", @update_text);
   addlistener (hg, "textstepmode", @update_text);
   addlistener (hg, "showtext", @update_text);
 
   addlistener (hg, "linecolor", @update_line);
   addlistener (hg, "linestyle", @update_line);
   addlistener (hg, "linewidth", @update_line);
 
+  addlistener (hg, "edgecolor", @update_edgecolor);
+
   add_patch_children (hg);
 
   if (!isempty (opts))
     set (hg, opts{:});
   endif
 endfunction
 
 function add_patch_children (hg)
@@ -361,21 +379,37 @@ function update_zlevel (h, d)
       endfor
     otherwise
       for i = 1 : length (kids)
 	set (kids(i), "zdata", z .* ones (size (get (kids (i), "xdata"))));
       endfor
   endswitch
 endfunction
 
+function update_edgecolor (h, d)
+  ec = get (h, "edgecolor");
+  lc = get (h, "linecolor");
+  if (ischar (ec) && strcmpi (ec, "flat"))
+    if (! strcmpi (lc, "auto"))
+      set (h, "linecolor", "auto");
+    endif
+  elseif (! isequal (ec, lc))
+    set (h, "linecolor", ec);
+  endif
+endfunction
+
 function update_line (h, d)
   lc = get (h, "linecolor");
+  ec = get (h, "edgecolor");
   if (strcmpi (lc, "auto"))
     lc = "flat";
   endif
+  if (! isequal (ec, lc))
+    set (h, "edgecolor", lc);
+  endif
   set (findobj (h, "type", "patch"), "edgecolor", lc,
        "linewidth", get (h, "linewidth"), "linestyle", get (h, "linestyle"));
 endfunction
 
 function update_data (h, d)
   persistent recursive = false;
 
   if (!recursive)
