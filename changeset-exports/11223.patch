# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1289380034 18000
#      Wed Nov 10 04:07:14 2010 -0500
# Node ID 64e7538db12a44ccf93b5210bb00f2bcb358bd88
# Parent  6eba18ec59b638d5b324edf82bd0cb948c45cba0
fix printing of newlines for anonymous function handle bodies

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2010-11-10  John W. Eaton  <jwe@octave.org>
+
+	Bug #31491.
+
+	* pt-pr-code.cc, pt-pr-code.h (tree_print_code::print_fcn_handle_body):
+	New function.
+	* ov-fcn-handle (octave_fcn_handle::print_raw): Use it.
+	* pt-pr-code.cc (tree_print_code::visit_anon_fcn_handle): Likewise.
+	* pt-pr-code.h (tree_print_code::suppress_newline): Rename from
+	printing_newlines.  Now int.  Change all uses.
+	* pt-pr-code.cc (tree_print_code::newline): Only set
+	beginning_of_line if newline is printed.
+
 2010-11-10  John W. Eaton  <jwe@octave.org>
 
 	Bug #31567.
 
 	* ov-fcn.h (octave_base_value::is_class_constructor)
 	octave_base_value::is_class_method): New optional character
 	string argument.
 	* ov-usr-fcn.h (octave_usr_fcn::is_class_constructor)
diff --git a/src/ov-fcn-handle.cc b/src/ov-fcn-handle.cc
--- a/src/ov-fcn-handle.cc
+++ b/src/ov-fcn-handle.cc
@@ -1316,43 +1316,17 @@ octave_fcn_handle::print_raw (std::ostre
 
           os << "@(";
 
           if (p)
             p->accept (tpc);
 
           os << ") ";
 
-          tree_statement_list *b = f->body ();
-
-          if (b)
-            {
-              assert (b->length () == 1);
-
-              tree_statement *s = b->front ();
-
-              if (s)
-                {
-                  if (s->is_expression ())
-                    {
-                      tree_expression *e = s->expression ();
-
-                      if (e)
-                        e->accept (tpc);
-                    }
-                  else
-                    {
-                      tree_command *c = s->command ();
-
-                      tpc.suspend_newline ();
-                      c->accept (tpc);
-                      tpc.resume_newline ();
-                    }
-                }
-            }
+          tpc.print_fcn_handle_body (f->body ());
 
           printed = true;
         }
     }
 
   if (! printed)
     octave_print_internal (os, "@" + nm, pr_as_read_syntax,
                            current_print_indent_level ());
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -46,20 +46,17 @@ tree_print_code::visit_anon_fcn_handle (
 
   tree_parameter_list *param_list = afh.parameter_list ();
 
   if (param_list)
     param_list->accept (*this);
 
   os << ") ";
 
-  tree_statement_list *body = afh.body ();
-
-  if (body)
-    body->accept (*this);
+  print_fcn_handle_body (afh.body ());
 
   print_parens (afh, ")");
 }
 
 void
 tree_print_code::visit_argument_list (tree_argument_list& lst)
 {
   tree_argument_list::iterator p = lst.begin ();
@@ -1145,48 +1142,84 @@ tree_print_code::visit_do_until_command 
   tree_expression *expr = cmd.condition ();
 
   if (expr)
     expr->accept (*this);
 
   newline ();
 }
 
+void
+tree_print_code::print_fcn_handle_body (tree_statement_list *b)
+{
+  if (b)
+    {
+      assert (b->length () == 1);
+
+      tree_statement *s = b->front ();
+
+      if (s)
+        {
+          if (s->is_expression ())
+            {
+              tree_expression *e = s->expression ();
+
+              if (e)
+                {
+                  suppress_newlines++;
+                  e->accept (*this);
+                  suppress_newlines--;
+                }
+            }
+          else
+            {
+              tree_command *c = s->command ();
+
+              suppress_newlines++;
+              c->accept (*this);
+              suppress_newlines--;
+            }
+        }
+    }
+}
+
 // Each print_code() function should call this before printing
 // anything.
 //
 // This doesn't need to be fast, but isn't there a better way?
 
 void
 tree_print_code::indent (void)
 {
   assert (curr_print_indent_level >= 0);
 
-  if (printing_newlines)
+  if (beginning_of_line)
     {
-      if (beginning_of_line)
-        {
-          os << prefix;
+      os << prefix;
 
-          for (int i = 0; i < curr_print_indent_level; i++)
-            os << " ";
+      for (int i = 0; i < curr_print_indent_level; i++)
+        os << " ";
 
-          beginning_of_line = false;
-        }
+      beginning_of_line = false;
     }
 }
 
 // All print_code() functions should use this to print new lines.
 
 void
 tree_print_code::newline (const char *alt_txt)
 {
-  os << (printing_newlines ? "\n" : alt_txt);
+  if (suppress_newlines)
+    os << alt_txt;
+  else
+    {
+      os << "\n";
 
-  beginning_of_line = true;
+      beginning_of_line = true;
+    }
 }
 
 // For ressetting print_code state.
 
 void
 tree_print_code::reset (void)
 {
   beginning_of_line = true;
diff --git a/src/pt-pr-code.h b/src/pt-pr-code.h
--- a/src/pt-pr-code.h
+++ b/src/pt-pr-code.h
@@ -41,17 +41,17 @@ tree_print_code : public tree_walker
 public:
 
   tree_print_code (std::ostream& os_arg,
                    const std::string& pfx = std::string (),
                    bool pr_orig_txt = true)
     : os (os_arg), prefix (pfx), nesting (),
       print_original_text (pr_orig_txt),
       curr_print_indent_level (0), beginning_of_line (true),
-      printing_newlines (true)
+      suppress_newlines (0)
   {
     // For "none".
     nesting.push ('n');
   }
 
   ~tree_print_code (void) { }
 
   void visit_anon_fcn_handle (tree_anon_fcn_handle&);
@@ -135,19 +135,17 @@ public:
   void visit_try_catch_command (tree_try_catch_command&);
 
   void visit_unwind_protect_command (tree_unwind_protect_command&);
 
   void visit_while_command (tree_while_command&);
 
   void visit_do_until_command (tree_do_until_command&);
 
-  void suspend_newline (void) { printing_newlines = false; }
-
-  void resume_newline (void) { printing_newlines = true; }
+  void print_fcn_handle_body (tree_statement_list *);
 
 private:
 
   std::ostream& os;
 
   std::string prefix;
 
   std::stack<char> nesting;
@@ -155,18 +153,18 @@ private:
   bool print_original_text;
 
   // Current indentation.
   int curr_print_indent_level;
 
   // TRUE means we are at the beginning of a line.
   bool beginning_of_line;
 
-  // TRUE means we are printing newlines and indenting.
-  bool printing_newlines;
+  // Nonzero means we are not printing newlines and indenting.
+  int suppress_newlines;
 
   void do_decl_command (tree_decl_command& cmd);
 
   void reset_indent_level (void) { curr_print_indent_level = 0; }
 
   void increment_indent_level (void) { curr_print_indent_level += 2; }
 
   void decrement_indent_level (void) { curr_print_indent_level -= 2; }
