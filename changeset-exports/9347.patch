# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1245016194 -3600
#      Sun Jun 14 22:49:54 2009 +0100
# Node ID 3da821b161e93df42b356585b1d23ea05111db38
# Parent  d50c3d8efe7114b1199f3b60304e249d3e4892ae
imported patch ticklabel

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -186,16 +186,35 @@ 2009-05-25  Jaroslav Hajek  <highegg@gma
 	(Fquit): Raise error if quitting is not allowed.
 	* octave.cc (octave_main): if running as embedded, disable quit by
 	default.
 
 2009-05-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* variables.cc (do_who): Only output symbols with a defined value.
 
+2009-06-14  Michael Goffioul  <michael.goffioul@gmail.com>
+
+	* graphics.h.in (axes::properties::xtick, axes::properties::ytick,
+	axes::properties::ztick, axes::properties::xticklabelmode,
+	axes::properties::yticklabelmode, axes::properties::zticklabelmode):
+	Add 'u' modifier to enable updaters.
+	(axes::properties::calc_ticklabels): New function to update tick
+	labels.
+	(axes::properties::update_xtick, axes::properties::update_ytick,
+	axes::properties::update_ztick,
+	axes::properties::update_xticklabelmode,
+	axes::properties::update_yticklabelmode,
+	axes::properties::update_zticklabelmode): Add updaters to update tick
+	labels correctly.
+	(axes::properties::update_xlim, axes::properties::update_ylim,
+	axes::properties::update_zlim): Update tick labels.
+	* graphics.cc (axes::properties::calc_ticklabels): New function to
+	update tick labels.
+
 2009-05-22  Michael Goffioul  <michael.goffioul@gmail.com>
 
 	* toplev.h (main_loop): Tag with OCTINTERP_API.
 	* input.h (octave_read, get_input_from_file, get_input_from_stdin):
 	Ditto.
 	* lex.h (create_buffer, current_buffer, switch_to_buffer,
 	delete_buffer, restore_input_buffer, delete_input_buffer): Ditto.
 
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -3419,16 +3419,34 @@ axes::properties::calc_ticks_and_lims (a
       tmp_ticks (i) = tick_sep * (i+i1);
       if (is_logscale)
 	tmp_ticks (i) = std::pow (10., tmp_ticks (i));
     }
 
   ticks = tmp_ticks;
 }
 
+void
+axes::properties::calc_ticklabels (const array_property& ticks,
+				   any_property& labels, bool logscale)
+{
+  Matrix values = ticks.get ().matrix_value ();
+  Cell c (values.dims ());
+  std::ostringstream os;
+
+  for (int i = 0; i < values.numel (); i++)
+    {
+      os.str (std::string ());
+      os << values(i);
+      c(i) = os.str ();
+    }
+
+  labels = c;
+}
+
 static void
 get_children_limits (double& min_val, double& max_val, double& min_pos,
 		     const Matrix& kids, char limit_type)
 {
   octave_idx_type n = kids.numel ();
 
   switch (limit_type)
     {
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -2657,32 +2657,32 @@ public:
       handle_property zlabel SOf , gh_manager::make_graphics_handle ("text", __myhandle__, false)
       handle_property title SOf , gh_manager::make_graphics_handle ("text", __myhandle__, false)
       bool_property xgrid , "off"
       bool_property ygrid , "off"
       bool_property zgrid , "off"
       bool_property xminorgrid , "off"
       bool_property yminorgrid , "off"
       bool_property zminorgrid , "off"
-      row_vector_property xtick m , default_axes_tick ()
-      row_vector_property ytick m , default_axes_tick ()
-      row_vector_property ztick m , default_axes_tick ()
+      row_vector_property xtick mu , default_axes_tick ()
+      row_vector_property ytick mu , default_axes_tick ()
+      row_vector_property ztick mu , default_axes_tick ()
       radio_property xtickmode , "{auto}|manual"
       radio_property ytickmode , "{auto}|manual"
       radio_property ztickmode , "{auto}|manual"
       bool_property xminortick , "off"
       bool_property yminortick , "off"
       bool_property zminortick , "off"
       // FIXME -- should be kind of string array.
       any_property xticklabel m , ""
       any_property yticklabel m , ""
       any_property zticklabel m , ""
-      radio_property xticklabelmode , "{auto}|manual"
-      radio_property yticklabelmode , "{auto}|manual"
-      radio_property zticklabelmode , "{auto}|manual"
+      radio_property xticklabelmode u , "{auto}|manual"
+      radio_property yticklabelmode u , "{auto}|manual"
+      radio_property zticklabelmode u , "{auto}|manual"
       radio_property interpreter , "tex|{none}|latex"
       color_property color , color_property (color_values (1, 1, 1), radio_values ("none"))
       color_property xcolor , color_values (0, 0, 0)
       color_property ycolor , color_values (0, 0, 0)
       color_property zcolor , color_values (0, 0, 0)
       radio_property xscale alu , "{linear}|log"
       radio_property yscale alu , "{linear}|log"
       radio_property zscale alu , "{linear}|log"
@@ -2742,22 +2742,55 @@ public:
     void update_zscale (void) { sz = get_zscale (); }
 
     void update_view (void) { update_camera (); }
 
     void update_xdir (void) { update_camera (); }
     void update_ydir (void) { update_camera (); }
     void update_zdir (void) { update_camera (); }
 
+    void update_xtick (void)
+      {
+	if (xticklabelmode.is ("auto"))
+	  calc_ticklabels (xtick, xticklabel, xscale.is ("log"));
+      }
+    void update_ytick (void)
+      {
+	if (yticklabelmode.is ("auto"))
+	  calc_ticklabels (ytick, yticklabel, yscale.is ("log"));
+      }
+    void update_ztick (void)
+      {
+	if (zticklabelmode.is ("auto"))
+	  calc_ticklabels (ztick, zticklabel, zscale.is ("log"));
+      }
+
+    void update_xticklabelmode (void)
+      {
+	if (xticklabelmode.is ("auto"))
+	  calc_ticklabels (xtick, xticklabel, xscale.is ("log"));
+      }
+    void update_yticklabelmode (void)
+      {
+	if (yticklabelmode.is ("auto"))
+	  calc_ticklabels (ytick, yticklabel, yscale.is ("log"));
+      }
+    void update_zticklabelmode (void)
+      {
+	if (zticklabelmode.is ("auto"))
+	  calc_ticklabels (ztick, zticklabel, zscale.is ("log"));
+      }
+
     void sync_positions (void);
     void update_outerposition (void) { sync_positions ();}
     void update_position (void) { sync_positions (); }
 
     double calc_tick_sep (double minval, double maxval);
     void calc_ticks_and_lims (array_property& lims, array_property& ticks, bool limmode_is_auto, bool is_logscale);
+    void calc_ticklabels (const array_property& ticks, any_property& labels, bool is_logscale);
     void fix_limits (array_property& lims)
     {
       if (lims.get ().is_empty ()) 
 	return;
 
       Matrix l = lims.get ().matrix_value ();
       if (l(0) > l(1))
 	{
@@ -2775,38 +2808,44 @@ public:
 
   public:
     Matrix get_axis_limits (double xmin, double xmax, double min_pos, bool logscale);
     
     void update_xlim (bool do_clr_zoom = true)
     {
       if (xtickmode.is ("auto"))
 	calc_ticks_and_lims (xlim, xtick, xlimmode.is ("auto"), xscale.is ("log"));
+      if (xticklabelmode.is ("auto"))
+	calc_ticklabels (xtick, xticklabel, xscale.is ("log"));
 
       fix_limits (xlim);
 
       if (do_clr_zoom)
 	zoom_stack.clear ();
     }
 
     void update_ylim (bool do_clr_zoom = true)
     {
       if (ytickmode.is ("auto"))
 	calc_ticks_and_lims (ylim, ytick, ylimmode.is ("auto"), yscale.is ("log"));
+      if (yticklabelmode.is ("auto"))
+	calc_ticklabels (ytick, yticklabel, yscale.is ("log"));
 
       fix_limits (ylim);
 
       if (do_clr_zoom)
 	zoom_stack.clear ();
     }
 
     void update_zlim (void)
     {
       if (ztickmode.is ("auto"))
 	calc_ticks_and_lims (zlim, ztick, zlimmode.is ("auto"), zscale.is ("log"));
+      if (zticklabelmode.is ("auto"))
+	calc_ticklabels (ztick, zticklabel, zscale.is ("log"));
 
       fix_limits (zlim);
 
       zoom_stack.clear ();
     }
     
   };
 
