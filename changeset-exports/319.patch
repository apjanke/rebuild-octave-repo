# HG changeset patch
# User jwe
# Date 759741407 0
#      Fri Jan 28 07:16:47 1994 +0000
# Node ID 42fe4794ded9a7a8400d4e72de8211cd4a9fe6fc
# Parent  1412ea9fc8280fa23c249e2189d042a83697b2b5
[project @ 1994-01-28 07:16:43 by jwe]

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -828,50 +828,16 @@ template <class T>
 int
 DiagArray<T>::columns (void) const
 {
   return nc;
 }
 
 template <class T>
 T&
-DiagArray<T>::elem (int r, int c) 
-{
-  static T foo (0);
-  return (r == c) ? Array<T>::elem (r) : foo;
-}
-
-template <class T>
-T&
-DiagArray<T>::checkelem (int r, int c) 
-{
-  static T foo (0);
-  if (r < 0 || c < 0 || r >= nr || c >= nc)
-    {
-      (*current_liboctave_error_handler) ("range error");
-      return foo;
-    }
-  return (r == c) ? Array<T>::elem (r) : foo;
-}
-
-template <class T>
-T&
-DiagArray<T>::operator () (int r, int c) 
-{
-  static T foo (0);
-  if (r < 0 || c < 0 || r >= nr || c >= nc)
-    {
-      (*current_liboctave_error_handler) ("range error");
-      return foo;
-    }
-  return (r == c) ? Array<T>::elem (r) : foo;
-}
-
-template <class T>
-T&
 DiagArray<T>::xelem (int r, int c)
 {
   static T foo (0);
   return (r == c) ? Array<T>::xelem (r) : foo;
 }
 
 template <class T>
 T
diff --git a/liboctave/Array.h b/liboctave/Array.h
--- a/liboctave/Array.h
+++ b/liboctave/Array.h
@@ -1,12 +1,12 @@
 // Template array classes                              -*- C++ -*-
 /*
 
-Copyright (C) 1993 John W. Eaton
+Copyright (C) 1993, 1994 John W. Eaton
 
 This file is part of Octave.
 
 Octave is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation; either version 2, or (at your option) any
 later version.
 
@@ -206,21 +206,82 @@ public:
   T operator () (int i, int j, int k) const;
 
   void resize (int n, int m, int k);
   void resize (int n, int m, int k, const T& val);
 };
 
 /*
  * A two-dimensional array with diagonal elements only.
+ *
+ * Idea and example code for Proxy class and functions from:
+ *
+ * From: kanze@us-es.sel.de (James Kanze)
+ * Subject: Re: How to overload [] to do READ/WRITE differently ?
+ * Message-ID: <KANZE.93Nov29151407@slsvhdt.us-es.sel.de>
+ * Sender: news@us-es.sel.de
+ * Date: 29 Nov 1993 14:14:07 GMT
+ * --
+ * James Kanze                             email: kanze@us-es.sel.de
+ * GABI Software, Sarl., 8 rue du Faisan, F-67000 Strasbourg, France
  */
 
 template <class T>
 class DiagArray : public Array<T>
 {
+private:
+
+  class Proxy
+  {
+  public:
+
+    Proxy (DiagArray<T> *ref, int r, int c) : object (ref), i (r), j (c) { }
+
+    const Proxy& operator = (const T& val) const
+    {
+      if (i == j)
+	{
+	  if (object)
+	    object->set (val, i);
+	}
+      else
+	(*current_liboctave_error_handler)
+	  ("assignment to off-diagonal element attempted for diagonal array");
+
+      return *this;
+    }
+
+    operator T () const
+    {
+      if (object)
+	return object->get (i);
+      else
+	{
+	  static T foo (0);
+	  return foo;
+	}
+    }
+
+  private:
+
+// XXX FIXME XXX -- this is declared private to keep the user from
+// taking the address of a Proxy.  Maybe it should be implemented by
+// means of a companion function in the DiagArray class.
+
+    T *operator& () const;
+
+    int i;
+    int j;
+
+    DiagArray<T> *object;
+
+  };
+
+friend class Proxy;
+
 protected:
 
   int nr;
   int nc;
 
   DiagArray (T *d, int r, int c);
 
 public:
@@ -237,29 +298,57 @@ public:
 
   int dim1 (void) const;
   int dim2 (void) const;
 
   int rows (void) const;
   int cols (void) const;
   int columns (void) const;
 
-  T& elem (int r, int c);
-  T& checkelem (int r, int c);
-  T& operator () (int r, int c);
+  Proxy elem (int r, int c)
+  {
+    return Proxy (this, r, c);
+  }
+
+  Proxy checkelem (int r, int c)
+  {
+    if (r < 0 || c < 0 || r >= nr || c >= nc)
+      {
+	(*current_liboctave_error_handler) ("range error");
+	return Proxy (0, r, c);
+      }
+    else
+      return Proxy (this, r, c);
+  }
+
+  Proxy operator () (int r, int c)
+  {
+    if (r < 0 || c < 0 || r >= nr || c >= nc)
+      {
+	(*current_liboctave_error_handler) ("range error");
+	return Proxy (0, r, c);
+      }
+    else
+      return Proxy (this, r, c);
+  }
 
 // No checking.
   T& xelem (int r, int c);
 
   T elem (int r, int c) const;
   T checkelem (int r, int c) const;
   T operator () (int r, int c) const;
 
   void resize (int n, int m);
   void resize (int n, int m, const T& val);
+
+private:
+
+  T get (int i) { return Array<T>::elem (i); }
+  void set (const T& val, int i) { Array<T>::elem (i) = val; }
 };
 
 #if defined (__GNUG__) && ! defined (USE_EXTERNAL_TEMPLATES)
 #include "Array.cc"
 #endif
 
 #endif
 
