# HG changeset patch
# User Shai Ayal <shaiay@users.sourceforge.net>
# Date 1254411688 14400
#      Thu Oct 01 11:41:28 2009 -0400
# Node ID 73153525df9a9bfba9f4975e4964361b8bdf7450
# Parent  0896714301e4b7238999c1052999370a56fe6dee
initial implementation of OpenGL image rendering

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,13 @@
+2009-10-01  Shai Ayal  <shaiay@users.sourceforge.net>
+
+	* graphics.cc (image::properties::get_color_data): New function.
+	* gl-render.cc (opengl_renderer::draw): Handle RGB images.
+
 2009-10-01  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/cellfun.cc 
 	(do_num2cell_helper, do_num2cell): New funcs.
 	(Fnum2cell): Rewrite.
 	(do_cellslices_nda): Do not leave trailing dims.
 
 2009-09-30  John W. Eaton  <jwe@octave.org>
diff --git a/src/gl-render.cc b/src/gl-render.cc
--- a/src/gl-render.cc
+++ b/src/gl-render.cc
@@ -541,16 +541,18 @@ opengl_renderer::draw (const graphics_ob
   else if (go.isa ("surface"))
     draw (dynamic_cast<const surface::properties&> (props));
   else if (go.isa ("patch"))
     draw (dynamic_cast<const patch::properties&> (props));
   else if (go.isa ("hggroup"))
     draw (dynamic_cast<const hggroup::properties&> (props));
   else if (go.isa ("text"))
     draw (dynamic_cast<const text::properties&> (props));
+  else if (go.isa ("image"))
+    draw (dynamic_cast<const image::properties&> (props));
   else
     warning ("opengl_renderer: cannot render object of type `%s'",
 	     props.graphics_object_name ().c_str ());
 }
 
 void
 opengl_renderer::draw (const figure::properties& props)
 {
@@ -2679,16 +2681,106 @@ opengl_renderer::draw (const text::prope
   // FIXME: handle margin and surrounding box
 
   draw_text (props.get_string (),
 	     pos(0), pos(1), pos(2),
 	     halign, valign, props.get_rotation ());
 }
 
 void
+opengl_renderer::draw (const image::properties& props)
+{
+  octave_value cdata = props.get_cdata ();
+  dim_vector dv (cdata.dims ());
+  int h = dv(0), w = dv(1);
+  bool ok = true;
+  
+  Matrix x = props.get_xdata ().matrix_value ();
+  Matrix y = props.get_ydata ().matrix_value ();
+  ColumnVector p0 = xform.transform (x(0), y(0), 0);
+  ColumnVector p1 = xform.transform (x(1), y(1), 0);
+
+  glPixelZoom ( (p1(0)-p0(0))/(w-1) , -(p1(1)-p0(1))/(h-1));
+  glRasterPos3d (x(0), y(0), 0);
+
+  // Expect RGB data
+  if (dv.length () == 3 && dv(2) == 3)
+    {
+      if (cdata.is_double_type ())
+	{
+	  NDArray _a = cdata.array_value ();
+
+	  OCTAVE_LOCAL_BUFFER (GLfloat, a, (3*w*h));
+
+	  for (int i = 0; i < h; i++)
+	    for (int j = 0, idx = i*w*3; j < w; j++, idx += 3)
+	      {
+		a[idx]   = _a(i,j,0);
+		a[idx+1] = _a(i,j,1);
+		a[idx+2] = _a(i,j,2);
+	      }
+	  glDrawPixels (w, h,
+			GL_RGB, GL_FLOAT, a);
+
+	}
+      else if (cdata.is_uint16_type ())
+	{
+	  uint8NDArray _a = cdata.uint16_array_value ();
+
+	  OCTAVE_LOCAL_BUFFER (octave_uint16, a, (3*w*h));
+
+	  for (int i = 0; i < h; i++)
+	    for (int j = 0, idx = i*w*3; j < w; j++, idx += 3)
+	      {
+		a[idx]   = _a(i,j,0);
+		a[idx+1] = _a(i,j,1);
+		a[idx+2] = _a(i,j,2);
+	      }
+	  glDrawPixels (w, h,
+			GL_RGB, GL_UNSIGNED_SHORT, a);
+
+	}
+      else if (cdata.is_uint8_type ())
+	{
+	  uint8NDArray _a = cdata.uint8_array_value ();
+
+	  OCTAVE_LOCAL_BUFFER (octave_uint8, a, (3*w*h));
+
+	  for (int i = 0; i < h; i++)
+	    for (int j = 0, idx = i*w*3; j < w; j++, idx += 3)
+	      {
+		a[idx]   = _a(i,j,0);
+		a[idx+1] = _a(i,j,1);
+		a[idx+2] = _a(i,j,2);
+	      }
+	  glDrawPixels (w, h,
+			GL_RGB, GL_UNSIGNED_BYTE, a);
+
+	}
+      else
+	{
+	  ok = false;
+	  warning ("opengl_texture::draw: invalid image data type (expected double, uint16, or uint8)");
+	}
+    }
+  // indexed
+  else if (dv.length () == 2)
+    {
+      // FIXME -- deal with indexed data
+      warning ("opengl_texture::draw:image indexed images not supported yet");
+    }
+  else
+    {
+      ok = false;
+      warning ("opengl_texture::draw: invalid image size (expected n*m*3 or n*m)");
+    }
+  glPixelZoom (1, 1);
+}
+
+void
 opengl_renderer::set_viewport (int w, int h)
 {
   glViewport (0, 0, w, h);
 }
 
 void
 opengl_renderer::set_color (const Matrix& c)
 {
diff --git a/src/gl-render.h b/src/gl-render.h
--- a/src/gl-render.h
+++ b/src/gl-render.h
@@ -74,16 +74,17 @@ public:
 protected:
   virtual void draw (const figure::properties& props);
   virtual void draw (const axes::properties& props);
   virtual void draw (const line::properties& props);
   virtual void draw (const surface::properties& props);
   virtual void draw (const patch::properties& props);
   virtual void draw (const hggroup::properties& props);
   virtual void draw (const text::properties& props);
+  virtual void draw (const image::properties& props);
 
   virtual void set_color (const Matrix& c);
   virtual void set_polygon_offset (bool on, double offset = 0.0);
   virtual void set_linewidth (float w);
   virtual void set_linestyle (const std::string& s, bool stipple = false);
   virtual void set_clipbox (double x1, double x2, double y1, double y2,
 			    double z1, double z2);
   virtual void set_clipping (bool on);
diff --git a/src/graphics.cc b/src/graphics.cc
--- a/src/graphics.cc
+++ b/src/graphics.cc
@@ -3927,17 +3927,22 @@ line::properties::compute_ylim (void) co
 }
 
 // ---------------------------------------------------------------------
 
 // Note: "text" code is entirely auto-generated
 
 // ---------------------------------------------------------------------
 
-// Note: "image" code is entirely auto-generated
+octave_value
+image::properties::get_color_data (void) const
+{
+  return convert_cdata (*this, get_cdata (),
+			cdatamapping_is ("scaled"), 3);
+}
 
 // ---------------------------------------------------------------------
 
 octave_value
 patch::properties::get_color_data (void) const
 {
   return convert_cdata (*this, get_facevertexcdata (),
 			cdatamapping_is ("scaled"), 2);
diff --git a/src/graphics.h.in b/src/graphics.h.in
--- a/src/graphics.h.in
+++ b/src/graphics.h.in
@@ -3138,16 +3138,18 @@ public:
   class OCTINTERP_API properties : public base_properties
   {
   public:
     bool is_climinclude (void) const
       { return (climinclude.is_on () && cdatamapping.is ("scaled")); }
     std::string get_climinclude (void) const
       { return climinclude.current_value (); }
 
+    octave_value get_color_data (void) const;
+
     // See the genprops.awk script for an explanation of the
     // properties declarations.
 
     BEGIN_PROPERTIES (image)
       row_vector_property xdata u , Matrix ()
       row_vector_property ydata u , Matrix ()
       array_property cdata u , Matrix ()
       radio_property cdatamapping al , "{scaled}|direct"
