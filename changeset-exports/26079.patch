# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1542307150 18000
#      Thu Nov 15 13:39:10 2018 -0500
# Node ID 5464e9c1da6aff7aa8593a59ab8b6d85944702df
# Parent  0549d088f50e8fa64d3027859c8df9401925daba
eliminate complexity of handling expression arguments in who and whos

* variables.cc (symbol_info::symbol_info): Eliminate expr_str and
expr_val arguments.
(symbol_info_list::append): Likewise.
(do_who): Don't attempt to evaluate expression arguments.

diff --git a/libinterp/corefcn/variables.cc b/libinterp/corefcn/variables.cc
--- a/libinterp/corefcn/variables.cc
+++ b/libinterp/corefcn/variables.cc
@@ -941,32 +941,25 @@ print_descriptor (std::ostream& os, std:
 
 class
 symbol_info_list
 {
 private:
   struct symbol_info
   {
     symbol_info (const octave::symbol_record& sr,
-                 octave::symbol_record::context_id context,
-                 const std::string& expr_str = "",
-                 const octave_value& expr_val = octave_value ())
-      : name (expr_str.empty () ? sr.name () : expr_str),
-        varval (),
+                 octave::symbol_record::context_id context)
+      : name (sr.name ()),
+        varval (sr.varval (context)),
         is_automatic (sr.is_automatic ()),
         is_complex (varval.iscomplex ()),
         is_formal (sr.is_formal ()),
         is_global (sr.is_global ()),
         is_persistent (sr.is_persistent ())
-    {
-      varval = (expr_val.is_undefined ()
-                ? sr.varval (context) : expr_val);
-
-      is_complex = varval.iscomplex ();
-    }
+    { }
 
     void display_line (std::ostream& os,
                        const std::list<whos_parameter>& params) const
     {
       std::string dims_str = varval.get_dims_str ();
 
       auto i = params.begin ();
 
@@ -1112,24 +1105,16 @@ public:
   ~symbol_info_list (void) = default;
 
   void append (const octave::symbol_record& sr,
                octave::symbol_record::context_id context)
   {
     lst.push_back (symbol_info (sr, context));
   }
 
-  void append (const octave::symbol_record& sr,
-               octave::symbol_record::context_id context,
-               const std::string& expr_str,
-               const octave_value& expr_val)
-  {
-    lst.push_back (symbol_info (sr, context, expr_str, expr_val));
-  }
-
   size_t size (void) const { return lst.size (); }
 
   bool empty (void) const { return lst.empty (); }
 
   octave_map
   map_value (const std::string& caller_function_name, int nesting_level) const
   {
     size_t len = lst.size ();
@@ -1523,85 +1508,33 @@ do_who (octave::interpreter& interp, int
   octave::symbol_scope scope = symtab.current_scope ();
 
   octave::symbol_record::context_id context = scope.current_context ();
 
   for (int j = 0; j < npats; j++)
     {
       std::string pat = pats[j];
 
-      if (have_regexp)
+      std::list<octave::symbol_record> tmp
+        = (have_regexp
+           ? (global_only
+              ? symtab.regexp_global_variables (pat)
+              : symtab.regexp_variables (pat))
+           : (global_only
+              ? symtab.glob_global_variables (pat)
+              : symtab.glob_variables (pat)));
+
+      for (const auto& symrec : tmp)
         {
-          std::list<octave::symbol_record> tmp
-            = (global_only
-               ? symtab.regexp_global_variables (pat)
-               : symtab.regexp_variables (pat));
-
-          for (const auto& symrec : tmp)
-            {
-              if (symrec.is_variable (context))
-                {
-                  if (verbose)
-                    symbol_stats.append (symrec, context);
-                  else
-                    symbol_names.push_back (symrec.name ());
-                }
-            }
-        }
-      else
-        {
-          size_t pos = pat.find_first_of (".({");
-
-          if (pos != std::string::npos && pos > 0)
+          if (symrec.is_variable (context))
             {
               if (verbose)
-                {
-                  // NOTE: we can only display information for
-                  // expressions based on global values if the variable is
-                  // global in the current scope because we currently have
-                  // no way of looking up the base value in the global
-                  // scope and then evaluating the arguments in the
-                  // current scope.
-
-                  std::string base_name = pat.substr (0, pos);
-
-                  if (scope && scope.is_variable (base_name))
-                    {
-                      octave::symbol_record sr
-                        = symtab.find_symbol (base_name);
-
-                      if (! global_only || sr.is_global ())
-                        {
-                          int parse_status;
-
-                          octave_value expr_val
-                            = octave::eval_string (pat, true, parse_status);
-
-                          symbol_stats.append (sr, context, pat, expr_val);
-                        }
-                    }
-                }
-            }
-          else
-            {
-              std::list<octave::symbol_record> tmp
-                = (global_only
-                   ? symtab.glob_global_variables (pat)
-                   : symtab.glob_variables (pat));
-
-              for (const auto& symrec : tmp)
-                {
-                  if (symrec.is_variable (context))
-                    {
-                      if (verbose)
-                        symbol_stats.append (symrec, context);
-                      else
-                        symbol_names.push_back (symrec.name ());
-                    }
-                }
+                symbol_stats.append (symrec, context);
+              else
+                symbol_names.push_back (symrec.name ());
             }
         }
     }
 
   if (return_list)
     {
       if (verbose)
         {
