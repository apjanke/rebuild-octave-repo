# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1475771346 14400
#      Thu Oct 06 12:29:06 2016 -0400
# Node ID a2ee7fe43834922e511f2ef5d35dcc69a72a27d8
# Parent  f812283c43675536e9d1107fc69ebf0aa0613926
# Parent  dd80fb1ef949cbd5c5846f0c51c4f12c03908971
maint: merge stable to default

diff --git a/libgui/src/m-editor/file-editor.h b/libgui/src/m-editor/file-editor.h
--- a/libgui/src/m-editor/file-editor.h
+++ b/libgui/src/m-editor/file-editor.h
@@ -66,17 +66,18 @@ public:
   typedef std::map<QString, tab_info>::const_iterator editor_tab_map_const_iterator;
 
   // struct that allows to sort with respect to the tab index
   struct session_data
   {
     QString index;
     QString file_name;
     QString encoding;
-    bool operator<(const session_data &other) const
+
+    bool operator < (const session_data &other) const
     {
       return index < other.index;
     }
   };
 
   file_editor (QWidget *p);
   ~file_editor (void);
 
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -1009,17 +1009,17 @@ main_window::handle_delete_debugger_poin
   if (cmd_focus)
     focus_command_window ();
 }
 
 void
 main_window::handle_update_breakpoint_marker_request (bool insert,
                                                       const QString& file,
                                                       int line,
-						      const QString& cond)
+                                                      const QString& cond)
 {
   bool cmd_focus = command_window_has_focus ();
 
   emit update_breakpoint_marker_signal (insert, file, line, cond);
 
   if (cmd_focus)
     focus_command_window ();
 }
@@ -1441,22 +1441,22 @@ main_window::construct (void)
       connect (this,
                SIGNAL (delete_debugger_pointer_signal (const QString&, int)),
                editor_window,
                SLOT (handle_delete_debugger_pointer_request (const QString&,
                                                              int)));
 
       connect (this,
                SIGNAL (update_breakpoint_marker_signal (bool, const QString&,
-	                                                int, const QString&)),
+                                                        int, const QString&)),
                editor_window,
                SLOT (handle_update_breakpoint_marker_request (bool,
                                                               const QString&,
                                                               int,
-							                                                const QString&)));
+                                                                                                        const QString&)));
 #endif
 
       octave_link::post_event (this,
                                &main_window::resize_command_window_callback);
 
       configure_shortcuts ();
     }
 }
@@ -1590,22 +1590,22 @@ main_window::construct_octave_qt_link (v
       connect (_octave_qt_link,
                SIGNAL (delete_debugger_pointer_signal (const QString&, int)),
                this,
                SLOT (handle_delete_debugger_pointer_request (const QString&,
                                                              int)));
 
       connect (_octave_qt_link,
                SIGNAL (update_breakpoint_marker_signal (bool, const QString&,
-	                                                      int, const QString&)),
+                                                              int, const QString&)),
                this,
                SLOT (handle_update_breakpoint_marker_request (bool,
-	                                                            const QString&,
+                                                                    const QString&,
                                                               int,
-							                                                const QString&)));
+                                                                                                        const QString&)));
 
       connect (_octave_qt_link,
                SIGNAL (show_doc_signal (const QString &)),
                this, SLOT (handle_show_doc (const QString &)));
 
       connect (_workspace_model,
                SIGNAL (rename_variable (const QString&, const QString&)),
                this,
diff --git a/libgui/src/main-window.h b/libgui/src/main-window.h
--- a/libgui/src/main-window.h
+++ b/libgui/src/main-window.h
@@ -163,17 +163,17 @@ public slots:
   void debug_step_over (void);
   void debug_step_out (void);
   void debug_quit (void);
 
   void handle_insert_debugger_pointer_request (const QString& file, int line);
   void handle_delete_debugger_pointer_request (const QString& file, int line);
   void handle_update_breakpoint_marker_request (bool insert,
                                                 const QString& file, int line,
-                                    						const QString& cond);
+                                                const QString& cond);
 
   void read_settings (void);
   void init_terminal_size (void);
   void set_window_layout (QSettings *settings);
   void write_settings (void);
   void connect_visibility_changed (void);
 
   void copyClipboard (void);
diff --git a/libgui/src/octave-dock-widget.cc b/libgui/src/octave-dock-widget.cc
--- a/libgui/src/octave-dock-widget.cc
+++ b/libgui/src/octave-dock-widget.cc
@@ -206,17 +206,17 @@ octave_dock_widget::make_window ()
   // FIXME: dockWidgetArea always returns 2
   settings->setValue ("DockWidgets/" + objectName () + "_dock_area",
                       _parent->dockWidgetArea (this));
   settings->setValue ("DockWidgets/" + objectName (), saveGeometry ());
   settings->sync ();
 
   // remove parent and adjust the (un)dock icon
   setParent (0, Qt::Window);
-  _dock_action->setIcon (QIcon (":/actions/icons/widget-dock" 
+  _dock_action->setIcon (QIcon (":/actions/icons/widget-dock"
                                 + _icon_color + ".png"));
   _dock_action->setToolTip (tr ("Dock widget"));
 
   // restore the last geometry when floating
   setGeometry (settings->value ("DockWidgets/" + objectName ()
                                 + "_floating_geometry",
                                 QRect (50,100,480,480)).toRect ());
 
diff --git a/libinterp/corefcn/call-stack.cc b/libinterp/corefcn/call-stack.cc
--- a/libinterp/corefcn/call-stack.cc
+++ b/libinterp/corefcn/call-stack.cc
@@ -60,17 +60,17 @@ octave_call_stack::stack_frame::fcn_name
     }
   else
     retval = "<unknown>";
 
   return retval;
 }
 
 bool
-octave_call_stack::stack_frame::operator== (const octave_call_stack::stack_frame &rhs) const
+octave_call_stack::stack_frame::operator == (const octave_call_stack::stack_frame &rhs) const
 {
   if (this->line () != rhs.line ())
     return false;
   else if (this->column () != rhs.column ())
     return false;
   else if (this->fcn_file_name () != rhs.fcn_file_name ())
     return false;
   else if (this->fcn_name () != rhs.fcn_name ())
diff --git a/libinterp/corefcn/call-stack.h b/libinterp/corefcn/call-stack.h
--- a/libinterp/corefcn/call-stack.h
+++ b/libinterp/corefcn/call-stack.h
@@ -66,17 +66,17 @@ public:
     int line (void) const { return m_line; }
 
     int column (void) const { return m_column; }
 
     std::string fcn_file_name (void) const;
 
     std::string fcn_name (bool print_subfn = true) const;
 
-    bool operator== (const stack_frame &rhs) const;
+    bool operator == (const stack_frame &rhs) const;
 
   private:
 
     octave_function *m_fcn;
     int m_line;
     int m_column;
     symbol_table::scope_id m_scope;
     symbol_table::context_id m_context;
diff --git a/libinterp/corefcn/jit-typeinfo.cc b/libinterp/corefcn/jit-typeinfo.cc
--- a/libinterp/corefcn/jit-typeinfo.cc
+++ b/libinterp/corefcn/jit-typeinfo.cc
@@ -880,18 +880,18 @@ jit_operation::do_generate (const signat
 
 jit_function *
 jit_operation::generate (const signature_vec&) const
 {
   return 0;
 }
 
 bool
-jit_operation::signature_cmp
-::operator() (const signature_vec *lhs, const signature_vec *rhs) const
+jit_operation::signature_cmp::operator () (const signature_vec *lhs,
+                                           const signature_vec *rhs) const
 {
   const signature_vec& l = *lhs;
   const signature_vec& r = *rhs;
 
   if (l.size () < r.size ())
     return true;
   else if (l.size () > r.size ())
     return false;
diff --git a/libinterp/corefcn/jit-typeinfo.h b/libinterp/corefcn/jit-typeinfo.h
--- a/libinterp/corefcn/jit-typeinfo.h
+++ b/libinterp/corefcn/jit-typeinfo.h
@@ -367,17 +367,17 @@ protected:
   virtual jit_function *generate (const signature_vec& types) const;
 private:
   Array<octave_idx_type> to_idx (const signature_vec& types) const;
 
   const jit_function& do_generate (const signature_vec& types) const;
 
   struct signature_cmp
   {
-    bool operator() (const signature_vec *lhs, const signature_vec *rhs) const;
+    bool operator () (const signature_vec *lhs, const signature_vec *rhs) const;
   };
 
   typedef std::map<const signature_vec *, jit_function *, signature_cmp>
   generated_map;
 
   mutable generated_map generated;
 
   std::vector<Array<jit_function> > overloads;
diff --git a/libinterp/corefcn/mex.cc b/libinterp/corefcn/mex.cc
--- a/libinterp/corefcn/mex.cc
+++ b/libinterp/corefcn/mex.cc
@@ -295,30 +295,30 @@ public:
   void set_m (mwSize /*m*/) { request_mutation (); }
 
   void set_n (mwSize /*n*/) { request_mutation (); }
 
   int set_dimensions (mwSize * /*dims_arg*/, mwSize /*ndims_arg*/)
   {
     request_mutation ();
 
-    return 0; 
+    return 0;
   }
 
   mwSize get_number_of_elements (void) const { return val.numel (); }
 
   int is_empty (void) const { return val.is_empty (); }
 
   bool is_scalar (void) const
   {
     // Force dims and ndims to be cached.
     get_dimensions ();
 
     return ndims == 2 && dims[0] == 1 && dims[1] == 1;
-  }  
+  }
 
   mxClassID get_class_id (void) const
   {
     id = mxUNKNOWN_CLASS;
 
     std::string cn = val.class_name ();
 
     if (cn == "double")
@@ -377,18 +377,18 @@ public:
 
   // Not allowed.
   void set_cell (mwIndex /*idx*/, mxArray * /*val*/) { request_mutation (); }
 
   double get_scalar (void) const
   {
     if (val.is_sparse_type ())
       {
-        // For sparse arrays, return the first non-zero value. 
-        void * data = val.mex_get_data (); 
+        // For sparse arrays, return the first non-zero value.
+        void * data = val.mex_get_data ();
         if (data == NULL)
           return 0.0;
 
         if (val.is_bool_type ())
           return *static_cast<bool *> (data);
         else if (val.is_real_type ())
           return *static_cast<double *> (data);
         else  // Complex type, only return real part
@@ -770,17 +770,17 @@ public:
     ndims = ndims_arg;
 
     mxFree (dims);
 
     if (ndims > 0)
       {
         dims
           = static_cast<mwSize *> (mxArray::malloc (ndims * sizeof (mwSize)));
-        
+
         if (dims == NULL)
           return 1;
 
         for (int i = 0; i < ndims; i++)
           dims[i] = dims_arg[i];
 
         return 0;
       }
diff --git a/libinterp/corefcn/regexp.cc b/libinterp/corefcn/regexp.cc
--- a/libinterp/corefcn/regexp.cc
+++ b/libinterp/corefcn/regexp.cc
@@ -1119,17 +1119,17 @@ are zero or more @qcode{'b'} characters 
 %! [a, b] = regexp (str, "[o]+", "match", "split");
 %! assert (a, {"oo"});
 %! assert (b, {"f", " bar"});
 
 %!assert (regexp ("\n", '\n'), 1)
 %!assert (regexp ("\n", "\n"), 1)
 
 # Test escape sequences are silently converted
-%!test <45407> 
+%!test <45407>
 %! assert (regexprep ('s', 's', 'x\.y'), 'x.y');
 %! assert (regexprep ('s', '(s)', 'x\$1y'), 'x$1y');
 %! assert (regexprep ('s', '(s)', 'x\\$1y'), 'x\sy');
 
 */
 
 DEFUN (regexpi, args, nargout,
        doc: /* -*- texinfo -*-
diff --git a/libinterp/octave-value/ov-classdef.h b/libinterp/octave-value/ov-classdef.h
--- a/libinterp/octave-value/ov-classdef.h
+++ b/libinterp/octave-value/ov-classdef.h
@@ -779,17 +779,17 @@ public:
     // This should never happen...
     if (! is_class ())
       error ("internal error: invalid assignment from %s to meta.class object",
              class_name ().c_str ());
   }
 
   cdef_class& operator = (const cdef_class& cls)
   {
-    cdef_object::operator= (cls);
+    cdef_object::operator = (cls);
 
     return *this;
   }
 
   cdef_method find_method (const std::string& nm, bool local = false);
 
   void install_method (const cdef_method& meth)
   { get_rep ()->install_method (meth); }
@@ -978,17 +978,17 @@ public:
     // This should never happen...
     if (! is_property ())
       error ("internal error: invalid assignment from %s to meta.property object",
              class_name ().c_str ());
   }
 
   cdef_property& operator = (const cdef_property& prop)
   {
-    cdef_object::operator= (prop);
+    cdef_object::operator = (prop);
 
     return *this;
   }
 
   octave_value get_value (const cdef_object& obj, bool do_check_access = true,
                           const std::string& who = "")
   { return get_rep ()->get_value (obj, do_check_access, who); }
 
@@ -1111,17 +1111,17 @@ public:
     // This should never happen...
     if (! is_method ())
       error ("internal error: invalid assignment from %s to meta.method object",
              class_name ().c_str ());
   }
 
   cdef_method& operator = (const cdef_method& meth)
   {
-    cdef_object::operator= (meth);
+    cdef_object::operator = (meth);
 
     return *this;
   }
 
   // normal invocation
   octave_value_list execute (const octave_value_list& args, int nargout,
                              bool do_check_access = true,
                              const std::string& who = "")
@@ -1346,17 +1346,17 @@ public:
     // This should never happen...
     if (! is_package ())
       error ("internal error: invalid assignment from %s to meta.package object",
              class_name ().c_str ());
   }
 
   cdef_package& operator = (const cdef_package& pack)
   {
-    cdef_object::operator= (pack);
+    cdef_object::operator = (pack);
 
     return *this;
   }
 
   void install_class (const cdef_class& cls, const std::string& nm)
   { get_rep ()->install_class (cls, nm); }
 
   void install_function (const octave_value& fcn, const std::string& nm)
diff --git a/liboctave/array/CMatrix.cc b/liboctave/array/CMatrix.cc
--- a/liboctave/array/CMatrix.cc
+++ b/liboctave/array/CMatrix.cc
@@ -2359,17 +2359,17 @@ ComplexMatrix::lssolve (const ComplexMat
 
   octave_idx_type m = rows ();
   octave_idx_type n = cols ();
 
   if (m != b.rows ())
     (*current_liboctave_error_handler)
       ("matrix dimension mismatch solution of linear equations");
 
-  if (m== 0 || n == 0 || b.cols () == 0)
+  if (m == 0 || n == 0 || b.cols () == 0)
     retval = ComplexMatrix (n, b.cols (), Complex (0.0, 0.0));
   else
     {
       volatile octave_idx_type minmn = (m < n ? m : n);
       octave_idx_type maxmn = m > n ? m : n;
       rcon = -1.0;
 
       if (m != n)
@@ -2410,16 +2410,17 @@ ComplexMatrix::lssolve (const ComplexMat
                                    F77_CHAR_ARG_LEN (1));
 
       // We compute the size of rwork and iwork because ZGELSD in
       // older versions of LAPACK does not return them on a query
       // call.
       double dminmn = static_cast<double> (minmn);
       double dsmlsizp1 = static_cast<double> (smlsiz+1);
       double tmp = octave::math::log2 (dminmn / dsmlsizp1);
+      double anorm = 0.0;
 
       octave_idx_type nlvl = static_cast<octave_idx_type> (tmp) + 1;
       if (nlvl < 0)
         nlvl = 0;
 
       octave_idx_type lrwork = minmn*(10 + 2*smlsiz + 8*nlvl)
                                + 3*smlsiz*nrhs
                                + std::max ((smlsiz+1)*(smlsiz+1),
@@ -2468,28 +2469,39 @@ ComplexMatrix::lssolve (const ComplexMat
 
           if (octave::math::real (work(0)) < lworkaround)
             work(0) = lworkaround;
         }
 
       lwork = static_cast<octave_idx_type> (octave::math::real (work(0)));
       work.resize (dim_vector (lwork, 1));
 
-      F77_XFCN (zgelsd, ZGELSD, (m, n, nrhs, F77_DBLE_CMPLX_ARG (tmp_data), m,
-                                 F77_DBLE_CMPLX_ARG (pretval),
-                                 maxmn, ps, rcon, rank,
-                                 F77_DBLE_CMPLX_ARG (work.fortran_vec ()), lwork,
-                                 prwork, piwork, info));
-
-      if (s.elem (0) == 0.0)
-        rcon = 0.0;
+      anorm = xnorm (*this, 1);
+
+      if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
+        {
+          rcon = 0.0;
+          octave::warn_singular_matrix ();
+          retval = Matrix (n, m, 0.0);
+        }
       else
-        rcon = s.elem (minmn - 1) / s.elem (0);
-
-      retval.resize (n, nrhs);
+        {
+          F77_XFCN (zgelsd, ZGELSD, (m, n, nrhs, F77_DBLE_CMPLX_ARG (tmp_data),
+                                     m, F77_DBLE_CMPLX_ARG (pretval),
+                                     maxmn, ps, rcon, rank,
+                                     F77_DBLE_CMPLX_ARG (work.fortran_vec ()),
+                                     lwork, prwork, piwork, info));
+
+          if (s.elem (0) == 0.0)
+            rcon = 0.0;
+          else
+            rcon = s.elem (minmn - 1) / s.elem (0);
+
+          retval.resize (n, nrhs);
+        }
     }
 
   return retval;
 }
 
 ComplexColumnVector
 ComplexMatrix::lssolve (const ColumnVector& b) const
 {
diff --git a/liboctave/array/Sparse.cc b/liboctave/array/Sparse.cc
--- a/liboctave/array/Sparse.cc
+++ b/liboctave/array/Sparse.cc
@@ -2196,17 +2196,18 @@ Sparse<T>::assign (const idx_vector& idx
     {
       n = idx_i.length (nr);
       m = idx_j.length (nc);
       if (rhs.nnz () != 0)
         assign (idx_i, idx_j, Sparse<T> (n, m, rhs.data (0)));
       else
         assign (idx_i, idx_j, Sparse<T> (n, m));
     }
-  else if (idx_i.length (nr) == m && idx_j.length (nc) == n && (n==1 || m==1))
+  else if (idx_i.length (nr) == m && idx_j.length (nc) == n
+           && (n == 1 || m == 1))
     {
       assign (idx_i, idx_j, rhs.transpose ());
     }
   else
     octave::err_nonconformant  ("=", idx_i.length (nr), idx_j.length (nc), n, m);
 }
 
 // Can't use versions of these in Array.cc due to duplication of the
diff --git a/liboctave/array/dMatrix.cc b/liboctave/array/dMatrix.cc
--- a/liboctave/array/dMatrix.cc
+++ b/liboctave/array/dMatrix.cc
@@ -2071,16 +2071,17 @@ Matrix::lssolve (const Matrix& b, octave
                                    F77_CHAR_ARG_LEN (6)
                                    F77_CHAR_ARG_LEN (1));
 
       // We compute the size of iwork because DGELSD in older versions
       // of LAPACK does not return it on a query call.
       double dminmn = static_cast<double> (minmn);
       double dsmlsizp1 = static_cast<double> (smlsiz+1);
       double tmp = octave::math::log2 (dminmn / dsmlsizp1);
+      double anorm = 0.0;
 
       octave_idx_type nlvl = static_cast<octave_idx_type> (tmp) + 1;
       if (nlvl < 0)
         nlvl = 0;
 
       octave_idx_type liwork = 3 * minmn * nlvl + 11 * minmn;
       if (liwork < 1)
         liwork = 1;
@@ -2126,27 +2127,38 @@ Matrix::lssolve (const Matrix& b, octave
 
           if (work(0) < lworkaround)
             work(0) = lworkaround;
         }
 
       lwork = static_cast<octave_idx_type> (work(0));
       work.resize (dim_vector (lwork, 1));
 
-      F77_XFCN (dgelsd, DGELSD, (m, n, nrhs, tmp_data, m, pretval,
-                                 maxmn, ps, rcon, rank,
-                                 work.fortran_vec (), lwork,
-                                 piwork, info));
-
-      if (s.elem (0) == 0.0)
-        rcon = 0.0;
+      anorm = xnorm (*this, 1);
+
+      if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
+        {
+          rcon = 0.0;
+          octave::warn_singular_matrix ();
+          retval = Matrix (n, m, 0.0);
+        }
       else
-        rcon = s.elem (minmn - 1) / s.elem (0);
-
-      retval.resize (n, nrhs);
+        {
+          F77_XFCN (dgelsd, DGELSD, (m, n, nrhs, tmp_data, m, pretval,
+                                     maxmn, ps, rcon, rank,
+                                     work.fortran_vec (), lwork,
+                                     piwork, info));
+
+          if (s.elem (0) == 0.0)
+            rcon = 0.0;
+          else
+            rcon = s.elem (minmn - 1) / s.elem (0);
+
+          retval.resize (n, nrhs);
+        }
     }
 
   return retval;
 }
 
 ComplexMatrix
 Matrix::lssolve (const ComplexMatrix& b) const
 {
diff --git a/liboctave/array/fCMatrix.cc b/liboctave/array/fCMatrix.cc
--- a/liboctave/array/fCMatrix.cc
+++ b/liboctave/array/fCMatrix.cc
@@ -2376,17 +2376,17 @@ FloatComplexMatrix::lssolve (const Float
 
   octave_idx_type m = rows ();
   octave_idx_type n = cols ();
 
   if (m != b.rows ())
     (*current_liboctave_error_handler)
       ("matrix dimension mismatch solution of linear equations");
 
-  if (m== 0 || n == 0 || b.cols () == 0)
+  if (m == 0 || n == 0 || b.cols () == 0)
     retval = FloatComplexMatrix (n, b.cols (), FloatComplex (0.0, 0.0));
   else
     {
       volatile octave_idx_type minmn = (m < n ? m : n);
       octave_idx_type maxmn = m > n ? m : n;
       rcon = -1.0;
 
       if (m != n)
@@ -2427,16 +2427,17 @@ FloatComplexMatrix::lssolve (const Float
                                    F77_CHAR_ARG_LEN (1));
 
       // We compute the size of rwork and iwork because ZGELSD in
       // older versions of LAPACK does not return them on a query
       // call.
       float dminmn = static_cast<float> (minmn);
       float dsmlsizp1 = static_cast<float> (smlsiz+1);
       float tmp = octave::math::log2 (dminmn / dsmlsizp1);
+      float anorm = 0.0;
 
       octave_idx_type nlvl = static_cast<octave_idx_type> (tmp) + 1;
       if (nlvl < 0)
         nlvl = 0;
 
       octave_idx_type lrwork = minmn*(10 + 2*smlsiz + 8*nlvl)
                                + 3*smlsiz*nrhs
                                + std::max ((smlsiz+1)*(smlsiz+1),
@@ -2485,28 +2486,39 @@ FloatComplexMatrix::lssolve (const Float
 
           if (octave::math::real (work(0)) < lworkaround)
             work(0) = lworkaround;
         }
 
       lwork = static_cast<octave_idx_type> (octave::math::real (work(0)));
       work.resize (dim_vector (lwork, 1));
 
-      F77_XFCN (cgelsd, CGELSD, (m, n, nrhs, F77_CMPLX_ARG (tmp_data), m,
-                                 F77_CMPLX_ARG (pretval),
-                                 maxmn, ps, rcon, rank,
-                                 F77_CMPLX_ARG (work.fortran_vec ()), lwork,
-                                 prwork, piwork, info));
-
-      if (s.elem (0) == 0.0)
-        rcon = 0.0;
+      anorm = xnorm (*this, 1);
+
+      if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
+        {
+          rcon = 0.0;
+          octave::warn_singular_matrix ();
+          retval = Matrix (n, m, 0.0);
+        }
       else
-        rcon = s.elem (minmn - 1) / s.elem (0);
-
-      retval.resize (n, nrhs);
+        {
+          F77_XFCN (cgelsd, CGELSD, (m, n, nrhs, F77_CMPLX_ARG (tmp_data),
+                                     m, F77_CMPLX_ARG (pretval),
+                                     maxmn, ps, rcon, rank,
+                                     F77_CMPLX_ARG (work.fortran_vec ()),
+                                     lwork, prwork, piwork, info));
+
+          if (s.elem (0) == 0.0)
+            rcon = 0.0;
+          else
+            rcon = s.elem (minmn - 1) / s.elem (0);
+
+          retval.resize (n, nrhs);
+        }
     }
 
   return retval;
 }
 
 FloatComplexColumnVector
 FloatComplexMatrix::lssolve (const FloatColumnVector& b) const
 {
diff --git a/liboctave/array/fMatrix.cc b/liboctave/array/fMatrix.cc
--- a/liboctave/array/fMatrix.cc
+++ b/liboctave/array/fMatrix.cc
@@ -2098,16 +2098,17 @@ FloatMatrix::lssolve (const FloatMatrix&
                                    F77_CHAR_ARG_LEN (6)
                                    F77_CHAR_ARG_LEN (1));
 
       // We compute the size of iwork because DGELSD in older versions
       // of LAPACK does not return it on a query call.
       float dminmn = static_cast<float> (minmn);
       float dsmlsizp1 = static_cast<float> (smlsiz+1);
       float tmp = octave::math::log2 (dminmn / dsmlsizp1);
+      float anorm = 0.0;
 
       octave_idx_type nlvl = static_cast<octave_idx_type> (tmp) + 1;
       if (nlvl < 0)
         nlvl = 0;
 
       octave_idx_type liwork = 3 * minmn * nlvl + 11 * minmn;
       if (liwork < 1)
         liwork = 1;
@@ -2153,27 +2154,38 @@ FloatMatrix::lssolve (const FloatMatrix&
 
           if (work(0) < lworkaround)
             work(0) = lworkaround;
         }
 
       lwork = static_cast<octave_idx_type> (work(0));
       work.resize (dim_vector (lwork, 1));
 
-      F77_XFCN (sgelsd, SGELSD, (m, n, nrhs, tmp_data, m, pretval,
-                                 maxmn, ps, rcon, rank,
-                                 work.fortran_vec (), lwork,
-                                 piwork, info));
-
-      if (s.elem (0) == 0.0)
-        rcon = 0.0;
+      anorm = xnorm (*this, 1);
+
+      if (octave::math::isinf (anorm) || octave::math::isnan (anorm))
+        {
+          rcon = 0.0;
+          octave::warn_singular_matrix ();
+          retval = Matrix (n, m, 0.0);
+        }
       else
-        rcon = s.elem (minmn - 1) / s.elem (0);
-
-      retval.resize (n, nrhs);
+        {
+          F77_XFCN (sgelsd, SGELSD, (m, n, nrhs, tmp_data, m, pretval,
+                                     maxmn, ps, rcon, rank,
+                                     work.fortran_vec (), lwork,
+                                     piwork, info));
+
+          if (s.elem (0) == 0.0)
+            rcon = 0.0;
+          else
+            rcon = s.elem (minmn - 1) / s.elem (0);
+
+          retval.resize (n, nrhs);
+        }
     }
 
   return retval;
 }
 
 FloatComplexMatrix
 FloatMatrix::lssolve (const FloatComplexMatrix& b) const
 {
diff --git a/src/mkoctfile.in.cc b/src/mkoctfile.in.cc
--- a/src/mkoctfile.in.cc
+++ b/src/mkoctfile.in.cc
@@ -597,17 +597,17 @@ main (int argc, char **argv)
           return 1;
         }
 
       if (! file.empty () && octfile.empty ())
         octfile = file;
     }
 
   if (output_ext ==  ".mex"
-      && vars["ALL_CFLAGS"].find ("-g") != std::string::npos) 
+      && vars["ALL_CFLAGS"].find ("-g") != std::string::npos)
     {
       defs += " -DMEX_DEBUG";
     }
 
   if (link_stand_alone)
     {
       if (! outputfile.empty ())
         output_option = "-o " + outputfile;
diff --git a/test/bug-46330.tst b/test/bug-46330.tst
--- a/test/bug-46330.tst
+++ b/test/bug-46330.tst
@@ -12,14 +12,9 @@
 %!      0.0,                     0.0];
 %!
 %! c = [1.0, 0.0, 0.0, 0.0;
 %!      0.0, 0.0, 0.0, 1.0];
 %!
 %! ## This statement caused an error in LAPACK and eventually caused
 %! ## a segmentation fault.
 %! ## Triggers "warning: matrix singular to machine precision"
-%! ## FIXME: LAPACK errors become fatal crashes on Windows, don't test this
-%! if (ispc ())
-%!   warning ("unable to test for bug #46330 on Windows");
-%! else
-%!   assert (c / (i * Inf * eye (4) - a) * b, zeros (2, 2))
-%! endif
+%! assert (c / (i * Inf * eye (4) - a) * b, zeros (2, 2))
