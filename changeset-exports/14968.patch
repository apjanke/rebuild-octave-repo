# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1340403468 18000
#      Fri Jun 22 17:17:48 2012 -0500
# Node ID 7f60cdfcc0e50f463a665b341a4b3a3cb20d4850
# Parent  0cfe0cf55a02ca990291bf35744997c27fb8b1da
Do not smash stack when passing structures in JIT

* src/pt-jit.cc (jit_convert::convert_llvm::convert_llvm):
    Store the prelude block.
  (jit_convert::convert_llvm::create_call): Create alloca in prelude.

* src/pt-jit.h (jit_convert::convert_llvm): Added prelude block member.

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -2583,18 +2583,17 @@ jit_convert::convert_llvm::convert (llvm
   arg_type = arg_type->getPointerTo ();
   llvm::FunctionType *ft = llvm::FunctionType::get (llvm::Type::getVoidTy (context),
                                                     arg_type, false);
   function = llvm::Function::Create (ft, llvm::Function::ExternalLinkage,
                                      "foobar", module);
 
   try
     {
-      llvm::BasicBlock *prelude = llvm::BasicBlock::Create (context, "prelude",
-                                                            function);
+      prelude = llvm::BasicBlock::Create (context, "prelude", function);
       builder.SetInsertPoint (prelude);
 
       llvm::Value *arg = function->arg_begin ();
       for (size_t i = 0; i < args.size (); ++i)
         {
           llvm::Value *loaded_arg = builder.CreateConstInBoundsGEP1_32 (arg, i);
           arguments[args[i].first] = loaded_arg;
         }
@@ -2799,16 +2798,18 @@ jit_convert::convert_llvm::visit (jit_as
 void
 jit_convert::convert_llvm::visit (jit_argument&)
 {}
 
 llvm::Value *
 jit_convert::convert_llvm::create_call (const jit_function::overload& ol,
                                         const std::vector<jit_value *>& jargs)
 {
+  llvm::IRBuilder<> alloca_inserter (prelude, prelude->begin ());
+
    llvm::Function *fun = ol.function;
    if (! fun)
      fail ("Missing overload");
 
   const llvm::Function::ArgumentListType& alist = fun->getArgumentList ();
   size_t nargs = alist.size ();
   bool sret = false;
   if (nargs != jargs.size ())
@@ -2817,33 +2818,33 @@ jit_convert::convert_llvm::create_call (
       assert (nargs == jargs.size () + 1);
       sret = true;
     }
 
   std::vector<llvm::Value *> args (nargs);
   llvm::Function::arg_iterator llvm_arg = fun->arg_begin ();
   if (sret)
     {
-      args[0] = builder.CreateAlloca (ol.result->to_llvm ());
+      args[0] = alloca_inserter.CreateAlloca (ol.result->to_llvm ());
       ++llvm_arg;
     }
 
   for (size_t i = 0; i < jargs.size (); ++i, ++llvm_arg)
     {
       llvm::Value *arg = jargs[i]->to_llvm ();
       llvm::Type *arg_type = arg->getType ();
       llvm::Type *llvm_arg_type = llvm_arg->getType ();
 
       if (arg_type == llvm_arg_type)
         args[i + sret] = arg;
       else
         {
           // pass structure by pointer
           assert (arg_type->getPointerTo () == llvm_arg_type);
-          llvm::Value *new_arg = builder.CreateAlloca (arg_type);
+          llvm::Value *new_arg = alloca_inserter.CreateAlloca (arg_type);
           builder.CreateStore (arg, new_arg);
           args[i + sret] = new_arg;
         }
     }
 
   llvm::Value *llvm_call = builder.CreateCall (fun, args);
   return sret ? builder.CreateLoad (args[0]) : llvm_call;
 }
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -2363,16 +2363,17 @@ private:
     llvm::Value *create_call (const jit_function::overload& ol,
                               const std::vector<jit_value *>& jargs);
 
     llvm::Value *create_call (const jit_function::overload& ol,
                               const std::vector<jit_use>& uses);
   private:
     jit_convert &jthis;
     llvm::Function *function;
+    llvm::BasicBlock *prelude;
   };
 };
 
 class jit_info;
 
 class
 tree_jit
 {
