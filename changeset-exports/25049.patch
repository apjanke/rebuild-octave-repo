# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1522337522 14400
#      Thu Mar 29 11:32:02 2018 -0400
# Node ID b9f0f1aaae3b472da23e641fc46b1f0a0f6e93f1
# Parent  135cc24efe4c5264ea3d2debee2bbf60aa7039b6
# Parent  d298a0734d85f666e3b79f433aebc402eb88fd86
maint: Merge stable to default.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -2183,26 +2183,30 @@ AC_ARG_WITH([osmesa],
   [if test x"$withval" = xyes; then
      use_osmesa=yes
    else
      use_osmesa=no
    fi])
 
 dnl If no argument given, only use OSMesa when Qt is too old
 if test $use_osmesa = auto; then
-  if test $octave_cv_qt_opengl_os_ok = yes; then
+  ## Quote $octave_cv_qt_opengl_os_ok because it will only be set if
+  ## Qt is found.
+  if test "$octave_cv_qt_opengl_os_ok" = yes; then
     use_osmesa=no
   else
     use_osmesa=yes
   fi
 fi
 
 if test $use_osmesa = yes; then
   dnl Pre-declare warning message, and unset if library is found
-  if test $octave_cv_qt_opengl_os_ok = no; then
+  ## Quote $octave_cv_qt_opengl_os_ok because it will only be set if
+  ## Qt is found.
+  if test "$octave_cv_qt_opengl_os_ok" = no; then
     warn_osmesa="OSMesa library not found and Qt < 5.1.  Offscreen rendering with OpenGL will be disabled."
   else
     warn_osmesa="OSMesa library not found.  Offscreen rendering with FLTK will be disabled."
   fi
 
   OSMESA_LIBS="-lOSMesa"
   save_CPPFLAGS="$CPPFLAGS"
   save_LDFLAGS="$LDFLAGS"
diff --git a/etc/icons/org.octave.Octave.desktop.in b/etc/icons/org.octave.Octave.desktop.in
--- a/etc/icons/org.octave.Octave.desktop.in
+++ b/etc/icons/org.octave.Octave.desktop.in
@@ -4,11 +4,11 @@ Comment=Interactive programming environm
 Comment[de]=Interaktive Programmierumgebung fÃ¼r numerische Berechnungen
 TryExec=%OCTAVE_PREFIX%/bin/octave
 Exec=%OCTAVE_PREFIX%/bin/octave --gui %f
 Icon=octave
 Terminal=false
 Type=Application
 Categories=Education;Science;Math;
 StartupNotify=false
-StartupWMClass=octave-gui
+StartupWMClass=GNU Octave
 MimeType=text/x-octave;text/x-matlab;
 Keywords=science;math;matrix;numerical computation;plotting;
diff --git a/libgui/src/main-window.cc b/libgui/src/main-window.cc
--- a/libgui/src/main-window.cc
+++ b/libgui/src/main-window.cc
@@ -171,16 +171,24 @@ namespace octave
         m_history_window = new history_dock_widget (this);
         m_file_browser_window = new files_dock_widget (this);
         m_doc_browser_window = new documentation_dock_widget (this);
         m_editor_window = create_default_editor (this);
         m_variable_editor_window = new variable_editor (this);
         m_workspace_window = new workspace_view (this);
       }
 
+    // Initialize global Qt application metadata
+    QCoreApplication::setApplicationName ("GNU Octave");
+    QCoreApplication::setApplicationVersion (OCTAVE_VERSION);
+#if defined (HAVE_QGUIAPPLICATION_SETDESKTOPFILENAME)
+    if (m_start_gui)
+      QGuiApplication::setDesktopFileName ("org.octave.Octave.desktop");
+#endif
+
     m_external_editor = new external_editor_interface (this);
     m_active_editor = m_editor_window;  // for connecting signals
     if (! m_editor_window)
       m_active_editor = m_external_editor;
 
     QSettings *settings = resource_manager::get_settings ();
 
     bool connect_to_web = true;
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -339,16 +339,46 @@ AC_DEFUN([OCTAVE_CHECK_FUNC_QABSTRACTITE
     AC_LANG_POP(C++)
   ])
   if test $octave_cv_func_qabstractitemmodel_beginresetmodel = yes; then
     AC_DEFINE(HAVE_QABSTRACTITEMMODEL_BEGINRESETMODEL, 1,
       [Define to 1 if you have the `QAbstractItemModel::beginResetModel' member function.])
   fi
 ])
 dnl
+dnl Check whether the Qt QGuiApplication class has the setDesktopFileName
+dnl static member function.  This function was introduced in Qt 5.7.
+dnl
+dnl FIXME: Delete this entirely when we drop support for Qt 5.6 or older.
+dnl
+AC_DEFUN([OCTAVE_CHECK_FUNC_QGUIAPPLICATION_SETDESKTOPFILENAME], [
+  AC_CACHE_CHECK([for QGuiApplication::setDesktopFileName],
+    [octave_cv_func_qguiapplication_setdesktopfilename],
+    [AC_LANG_PUSH(C++)
+    ac_octave_save_CPPFLAGS="$CPPFLAGS"
+    ac_octave_save_CXXFLAGS="$CXXFLAGS"
+    CPPFLAGS="$QT_CPPFLAGS $CXXPICFLAG $CPPFLAGS"
+    CXXFLAGS="$CXXPICFLAG $CPPFLAGS"
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+        #include <QGuiApplication>
+        ]], [[
+        QGuiApplication::setDesktopFileName ("com.example.Example.desktop");
+        ]])],
+      octave_cv_func_qguiapplication_setdesktopfilename=yes,
+      octave_cv_func_qguiapplication_setdesktopfilename=no)
+    CPPFLAGS="$ac_octave_save_CPPFLAGS"
+    CXXFLAGS="$ac_octave_save_CXXFLAGS"
+    AC_LANG_POP(C++)
+  ])
+  if test $octave_cv_func_qguiapplication_setdesktopfilename = yes; then
+    AC_DEFINE(HAVE_QGUIAPPLICATION_SETDESKTOPFILENAME, 1,
+      [Define to 1 if you have the `QGuiApplication::setDesktopFileName' member function.])
+  fi
+])
+dnl
 dnl Check whether the Qt QHeaderView class has the setSectionResizeMode
 dnl function.  This function was introduced in Qt 5.
 dnl
 dnl FIXME: Delete this entirely when we drop support for Qt 4.
 dnl
 AC_DEFUN([OCTAVE_CHECK_FUNC_QHEADERVIEW_SETSECTIONRESIZEMODE], [
   AC_CACHE_CHECK([for QHeaderView::setSectionResizeMode],
     [octave_cv_func_qheaderview_setsectionresizemode],
@@ -800,128 +830,132 @@ dnl
 dnl Check whether ARPACK works (does not crash).
 dnl
 dnl Using a pure Fortran program doesn't seem to crash when linked
 dnl with the buggy ARPACK library, but the C++ program does.  Maybe it
 dnl is the memory allocation that exposes the bug and using statically
 dnl allocated arrays in Fortran does not?
 dnl
 dnl FIXME: it would be nice to avoid the duplication of F77 macros
-dnl and typedefs here and in the f77-fcn.h header file.
+dnl and typedefs here and in the f77-fcn.h header file.  Also, the
+dnl definition of the character handling macros are not right for
+dnl all systems (but should work on most modern systems in use today).
 dnl
 AC_DEFUN([OCTAVE_CHECK_LIB_ARPACK_OK_1], [
   AC_CACHE_CHECK([whether the arpack library works],
     [octave_cv_lib_arpack_ok_1],
     [AC_LANG_PUSH(C++)
     AC_RUN_IFELSE([AC_LANG_PROGRAM([[
 
 #include <cfloat>
 
 #include <stdint.h>
 
-typedef OCTAVE_IDX_TYPE octave_idx_type;
 typedef int F77_RET_T;
 
 #define F77_CHAR_ARG2(x, l) x
 #define F77_CONST_CHAR_ARG2(x, l) F77_CHAR_ARG2 (x, l)
 
 #define F77_CHAR_ARG_LEN(l) , l
 
 #define F77_CONST_CHAR_ARG_DECL const char *
 #define F77_CHAR_ARG_LEN_DECL , long
 
+#define F77_INT $OCTAVE_F77_INT_TYPE
+#define F77_DBLE double
+
 extern "C"
 {
   F77_RET_T
-  F77_FUNC (dnaupd, DNAUPD) (octave_idx_type&,
+  F77_FUNC (dnaupd, DNAUPD) (F77_INT&,
                              F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&,
+                             const F77_INT&,
                              F77_CONST_CHAR_ARG_DECL,
-                             octave_idx_type&, const double&,
-                             double*, const octave_idx_type&, double*,
-                             const octave_idx_type&, octave_idx_type*,
-                             octave_idx_type*, double*, double*,
-                             const octave_idx_type&, octave_idx_type&
+                             F77_INT&, const F77_DBLE&,
+                             F77_DBLE*, const F77_INT&, F77_DBLE*,
+                             const F77_INT&, F77_INT*,
+                             F77_INT*, F77_DBLE*, F77_DBLE*,
+                             const F77_INT&, F77_INT&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
-  F77_FUNC (dneupd, DNEUPD) (const octave_idx_type&,
+  F77_FUNC (dneupd, DNEUPD) (const F77_INT&,
                              F77_CONST_CHAR_ARG_DECL,
-                             octave_idx_type*, double*, double*,
-                             double*, const octave_idx_type&, const double&,
-                             const double&, double*,
+                             F77_INT*, F77_DBLE*, F77_DBLE*,
+                             F77_DBLE*, const F77_INT&, const F77_DBLE&,
+                             const F77_DBLE&, F77_DBLE*,
                              F77_CONST_CHAR_ARG_DECL,
-                             const octave_idx_type&,
+                             const F77_INT&,
                              F77_CONST_CHAR_ARG_DECL,
-                             octave_idx_type&, const double&, double*,
-                             const octave_idx_type&, double*,
-                             const octave_idx_type&, octave_idx_type*,
-                             octave_idx_type*, double*, double*,
-                             const octave_idx_type&, octave_idx_type&
+                             F77_INT&, const F77_DBLE&, F77_DBLE*,
+                             const F77_INT&, F77_DBLE*,
+                             const F77_INT&, F77_INT*,
+                             F77_INT*, F77_DBLE*, F77_DBLE*,
+                             const F77_INT&, F77_INT&
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL
                              F77_CHAR_ARG_LEN_DECL);
 
   F77_RET_T
   F77_FUNC (dgemv, DGEMV) (F77_CONST_CHAR_ARG_DECL,
-                           const octave_idx_type&, const octave_idx_type&,
-                           const double&, const double*,
-                           const octave_idx_type&, const double*,
-                           const octave_idx_type&, const double&, double*,
-                           const octave_idx_type&
+                           const F77_INT&, const F77_INT&,
+                           const F77_DBLE&, const F77_DBLE*,
+                           const F77_INT&, const F77_DBLE*,
+                           const F77_INT&, const F77_DBLE&,
+                           F77_DBLE*, const F77_INT&
                            F77_CHAR_ARG_LEN_DECL);
 }
 
 void
 doit (void)
 {
   // Based on function EigsRealNonSymmetricMatrix from liboctave/eigs-base.cc.
 
   // Problem matrix.  See bug #31479.
-  octave_idx_type n = 4;
+  F77_INT n = 4;
   double *m = new double [n * n];
   m[0] = 1, m[4] = 0, m[8]  = 0, m[12] = -1;
   m[1] = 0, m[5] = 1, m[9]  = 0, m[13] =  0;
   m[2] = 0, m[6] = 0, m[10] = 1, m[14] =  0;
   m[3] = 0, m[7] = 0, m[11] = 2, m[15] =  1;
 
   double *resid = new double [4];
 
   resid[0] = 0.960966;
   resid[1] = 0.741195;
   resid[2] = 0.150143;
   resid[3] = 0.868067;
 
-  octave_idx_type *ip = new octave_idx_type [11];
+  F77_INT *ip = new F77_INT [11];
 
   ip[0] = 1;   // ishift
   ip[1] = 0;   // ip[1] not referenced
   ip[2] = 300; // mxiter, maximum number of iterations
   ip[3] = 1;   // NB blocksize in recurrence
   ip[4] = 0;   // nconv, number of Ritz values that satisfy convergence
   ip[5] = 0;   // ip[5] not referenced
   ip[6] = 1;   // mode
   ip[7] = 0;   // ip[7] to ip[10] are return values
   ip[8] = 0;
   ip[9] = 0;
   ip[10] = 0;
 
-  octave_idx_type *ipntr = new octave_idx_type [14];
+  F77_INT *ipntr = new F77_INT [14];
 
-  octave_idx_type k = 1;
-  octave_idx_type p = 3;
-  octave_idx_type lwork = 3 * p * (p + 2);
+  F77_INT k = 1;
+  F77_INT p = 3;
+  F77_INT lwork = 3 * p * (p + 2);
 
   double *v = new double [n * (p + 1)];
   double *workl = new double [lwork + 1];
   double *workd = new double [3 * n + 1];
 
-  octave_idx_type ido = 0;
-  octave_idx_type info = 0;
+  F77_INT ido = 0;
+  F77_INT info = 0;
 
   double tol = DBL_EPSILON;
 
   do
     {
       F77_FUNC (dnaupd, DNAUPD) (ido, F77_CONST_CHAR_ARG2 ("I", 1),
                                  n, F77_CONST_CHAR_ARG2 ("LM", 2),
                                  k, tol, resid, p, v, n, ip, ipntr,
@@ -943,27 +977,27 @@ doit (void)
           if (info < 0)
             return;  // Error
 
           break;
         }
     }
   while (1);
 
-  octave_idx_type *sel = new octave_idx_type [p];
+  F77_INT *sel = new F77_INT [p];
 
   // In Octave, the dimensions of dr and di are k+1, but k+2 avoids segfault
   double *dr = new double [k + 1];
   double *di = new double [k + 1];
   double *workev = new double [3 * p];
 
-  for (octave_idx_type i = 0; i < k + 1; i++)
+  for (F77_INT i = 0; i < k + 1; i++)
     dr[i] = di[i] = 0.0;
 
-  octave_idx_type rvec = 1;
+  F77_INT rvec = 1;
 
   double sigmar = 0.0;
   double sigmai = 0.0;
 
   // In Octave, this is n*(k+1), but n*(k+2) avoids segfault
   double *z = new double [n * (k + 1)];
 
   F77_FUNC (dneupd, DNEUPD) (rvec, F77_CONST_CHAR_ARG2 ("A", 1),
@@ -2021,16 +2055,17 @@ AC_DEFUN([OCTAVE_CHECK_QT_VERSION], [AC_
     AC_CHECK_HEADERS([QStandardPaths])
     CPPFLAGS="$ac_octave_save_CPPFLAGS"
     AC_LANG_POP(C++)
 
     ## We don't need to unset cache variables for any of the remaining
     ## tests if they fail because we have already decided that the Qt
     ## version that we are testing now will be the one used.
 
+    OCTAVE_CHECK_FUNC_QGUIAPPLICATION_SETDESKTOPFILENAME
     OCTAVE_CHECK_FUNC_QHEADERVIEW_SETSECTIONRESIZEMODE
     OCTAVE_CHECK_FUNC_QHEADERVIEW_SETSECTIONSCLICKABLE
     OCTAVE_CHECK_FUNC_QHEADERVIEW_SETSECTIONSMOVABLE
     OCTAVE_CHECK_FUNC_QINSTALLMESSAGEHANDLER
     OCTAVE_CHECK_FUNC_QLINEEDIT_SETPLACEHOLDERTEXT
     OCTAVE_CHECK_FUNC_QMOUSEEVENT_LOCALPOS
     OCTAVE_CHECK_FUNC_QOBJECT_FINDCHILDREN_ACCEPTS_FINDCHILDOPTIONS
     OCTAVE_CHECK_FUNC_QTABWIDGET_SETMOVABLE
