# HG changeset patch
# User jwe
# Date 1167857968 0
#      Wed Jan 03 20:59:28 2007 +0000
# Node ID a6cc01dd09f90a3613710e1431814e191290e4f6
# Parent  07d967f75dbafc9f069236ed0672e1494461703f
[project @ 2007-01-03 20:59:28 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,16 @@
+2007-01-03  John W. Eaton  <jwe@octave.org>
+
+	* data.cc (Fisinteger): New function.
+	* ov-intx.h (OCTAVE_VALUE_INT_MATRIX_T::is_integer_type,
+	OCTAVE_VALUE_INT_SCALAR_T::is_integer_type): New function.
+	* ov.h (octave_value::is_integer_type): New function.
+	* ov-base.h (octave_base_value::is_integer_type): New virtual function.
+
 2007-01-03  Michael Goffioul  <michael.goffioul@swing.be>
 
 	* toplev.cc (Fsystem): Handle async calls on Windows systems.
 
 2007-01-03  David Bateman  <dbateman@free.fr>
 
 	* (OPERATORS/op-cm-scm.cc, OPERATORS/op-cm-sm.cc, 
 	OPERATORS/op-cs-scm.cc, OPERATORS/op-cs-sm.cc, 
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -1234,16 +1234,35 @@ Return true if @var{x} is a boolean obje
   else
     print_usage ();
 
   return retval;
 }
 
 DEFALIAS (islogical, isbool);
 
+DEFUN (isinteger, args, ,
+  "-*- texinfo -*-\n\
+@deftypefn {Built-in Function} {} isreal (@var{x})\n\
+Return true if @var{x} is an integer object (int8, uint8, int16, etc.).\n\
+Note that @code{isinteger (14)} is false because numeric constants in\n\
+are double precision floating point values.\n\
+@seealso{isreal, isnumeric, class, isa}\n\
+@end deftypefn")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    retval = args(0).is_integer_type ();
+  else
+    print_usage ();
+
+  return retval;
+}
+
 DEFUN (iscomplex, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} iscomplex (@var{x})\n\
 Return true if @var{x} is a complex-valued numeric object.\n\
 @end deftypefn")
 {
   octave_value retval;
 
@@ -1370,17 +1389,16 @@ Convert @var{x} to a complex value.\n\
 	error ("complex: invalid conversion");
     }
   else
     print_usage ();
 
   return retval;
 }
 
-
 DEFUN (isreal, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} isreal (@var{x})\n\
 Return true if @var{x} is a real-valued numeric object.\n\
 @end deftypefn")
 {
   octave_value retval;
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -252,16 +252,18 @@ public:
   virtual bool is_uint16_type (void) const { return false; }
 
   virtual bool is_uint32_type (void) const { return false; }
 
   virtual bool is_uint64_type (void) const { return false; }
 
   virtual bool is_bool_type (void) const { return false; }
 
+  virtual bool is_integer_type (void) const { return false; }
+
   virtual bool is_real_type (void) const { return false; }
 
   virtual bool is_complex_type (void) const { return false; }
 
   // Would be nice to get rid of the next four functions:
 
   virtual bool is_scalar_type (void) const { return false; }
 
diff --git a/src/ov-intx.h b/src/ov-intx.h
--- a/src/ov-intx.h
+++ b/src/ov-intx.h
@@ -55,16 +55,18 @@ public:
   octave_base_value *clone (void) const
     { return new OCTAVE_VALUE_INT_MATRIX_T (*this); }
 
   octave_base_value *empty_clone (void) const
     { return new OCTAVE_VALUE_INT_MATRIX_T (); }
 
   bool OCTAVE_TYPE_PREDICATE_FUNCTION (void) const { return true; }
 
+  bool is_integer_type (void) const { return true; }
+
   int8NDArray
   int8_array_value (void) const { return int8NDArray (matrix); }
 
   int16NDArray
   int16_array_value (void) const { return int16NDArray (matrix); }
 
   int32NDArray
   int32_array_value (void) const { return int32NDArray (matrix); }
@@ -274,16 +276,18 @@ public:
 	  retval = tmp.do_index_op (idx, resize_ok);
 	}
 
       return retval;
     }
 
   bool OCTAVE_TYPE_PREDICATE_FUNCTION (void) const { return true; }
 
+  bool is_integer_type (void) const { return true; }
+
   octave_int8
   int8_scalar_value (void) const { return octave_int8 (scalar); }
 
   octave_int16
   int16_scalar_value (void) const { return octave_int16 (scalar); }
 
   octave_int32
   int32_scalar_value (void) const { return octave_int32 (scalar); }
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -482,16 +482,19 @@ public:
   bool is_uint64_type (void) const
     { return rep->is_uint64_type (); }
 
   // Other type stuff.
 
   bool is_bool_type (void) const
     { return rep->is_bool_type (); }
 
+  bool is_integer_type (void) const
+    { return rep->is_integer_type (); }
+
   bool is_real_type (void) const
     { return rep->is_real_type (); }
 
   bool is_complex_type (void) const
     { return rep->is_complex_type (); }
 
   bool is_scalar_type (void) const
     { return rep->is_scalar_type (); }
