# HG changeset patch
# User jwe
# Date 784397046 0
#      Wed Nov 09 16:04:06 1994 +0000
# Node ID 4a2133b26fa794f987ad884863c6f4cacde0d331
# Parent  05654cdcfc95d87230747c3d58e1a6bcc40953a1
[project @ 1994-11-09 16:04:06 by jwe]

diff --git a/src/file-io.cc b/src/file-io.cc
--- a/src/file-io.cc
+++ b/src/file-io.cc
@@ -47,19 +47,16 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "help.h"
 #include "utils.h"
 #include "pager.h"
 #include "defun.h"
 #include "sysdep.h"
 #include "mappers.h"
 #include "variables.h"
 
-// keeps a count of how many files are open and in the file list
-static int file_count = 0;
-
 // keeps a count of args sent to printf or scanf
 static int fmt_arg_count = 0;
 
 // double linked list containing relevant information about open files
 static DLList <file_info> file_list;
 
 file_info::file_info (void)
 {
@@ -135,30 +132,29 @@ initialize_file_io (void)
 {
   file_info octave_stdin (0, "stdin", stdin, "r");
   file_info octave_stdout (1, "stdout", stdout, "w");
   file_info octave_stderr (2, "stderr", stderr, "w");
 
   file_list.append (octave_stdin);
   file_list.append (octave_stdout);
   file_list.append (octave_stderr);
-
-  file_count = 3;
 }
 
 // Given a file name or number, return a pointer to the corresponding
 // open file.  If the file has not already been opened, return NULL.
 
 Pix
 return_valid_file (const tree_constant& arg)
 {
   if (arg.is_string ())
     {
       Pix p = file_list.first ();
       file_info file;
+      int file_count = file_list.length ();
       for (int i = 0; i < file_count; i++)
 	{
 	  char *file_name = arg.string_value ();
 	  file = file_list (p);
 	  if (strcmp (file.name (), file_name) == 0)
 	    return p;
 	  file_list.next (p);
 	}
@@ -170,16 +166,17 @@ return_valid_file (const tree_constant& 
       if (! error_state)
 	{
 	  if ((double) NINT (file_num) != file_num)
 	    error ("file number not an integer value");
 	  else
 	    {
 	      Pix p = file_list.first ();
 	      file_info file;
+	      int file_count = file_list.length ();
 	      for (int i = 0; i < file_count; i++)
 		{
 		  file = file_list (p);
 		  if (file.number () == file_num)
 		    return p;
 		  file_list.next (p);
 		}
 	      error ("no file with that number");
@@ -194,22 +191,24 @@ return_valid_file (const tree_constant& 
 
 static Pix 
 fopen_file_for_user (const char *name, const char *mode,
 		     const char *warn_for)
 {
   FILE *file_ptr = fopen (name, mode);
   if (file_ptr)
     {
-      file_info file (++file_count, name, file_ptr, mode);
+      int file_number = file_list.length () + 1;
+
+      file_info file (file_number, name, file_ptr, mode);
       file_list.append (file);
       
       Pix p = file_list.first ();
       file_info file_from_list;
-      
+      int file_count = file_list.length ();
       for (int i = 0; i < file_count; i++)
 	{
 	  file_from_list = file_list (p);
 	  if (strcmp (file_from_list.name (), name) == 0)
 	    return p;
 	  file_list.next (p);
 	}
     }
@@ -283,17 +282,16 @@ fclose_internal (const Octave_object& ar
   if (file.number () < 3)
     {
       warning ("fclose: can't close stdin, stdout, or stderr!");
       return retval;
     }
 
   int success = fclose (file.fptr ());
   file_list.del (p);
-  file_count--;
 
   if (success == 0)
     retval(0) = 1.0; // succeeded
   else
     {
       error ("fclose: error on closing file");
       retval(0) = 0.0; // failed
     }
@@ -500,22 +498,22 @@ fopen_internal (const Octave_object& arg
   FILE *file_ptr = fopen (name, mode);
 
   if (! file_ptr)
     {
       error ("fopen: unable to open file `%s'", name);
       return retval;
     }
 
-  int number = file_count++;
+  int file_number =  file_list.length () + 1;
 
-  file_info file (number, name, file_ptr, mode);
+  file_info file (file_number, name, file_ptr, mode);
   file_list.append (file);
 
-  retval(0) = (double) number;
+  retval(0) = (double) file_number;
 
   return retval;
 }
 
 DEFUN ("freport", Ffreport, Sfreport, 0, 1,
   "freport (): list open files and their status")
 {
   Octave_object retval;
@@ -534,16 +532,18 @@ Octave_object
 freport_internal (void)
 {
   Octave_object retval;
   Pix p = file_list.first ();
 
   ostrstream output_buf;
 
   output_buf << "\n number  mode  name\n\n";
+
+  int file_count = file_list.length ();
   for (int i = 0; i < file_count; i++)
     {
       file_info file = file_list (p);
       output_buf.form ("%7d%6s  %s\n", file.number (), file.mode (),
 		       file.name ());
       file_list.next (p);
     }
 
@@ -708,26 +708,37 @@ ftell_internal (const Octave_object& arg
   return retval;
 }
 
 void
 close_files (void)
 {
   Pix p = file_list.first ();
 
+  int file_count = file_list.length ();
   for (int i = 0; i < file_count; i++)
     {
-      file_info file = file_list (p);
-      if (i > 2)   // do not close stdin, stdout, stderr!
+      if (p)
 	{
-	  int success = fclose (file.fptr ());
-	  if (success != 0)
-	    error ("closing %s", file.name ());
+	  file_info file = file_list (p);
+
+	  if (i > 2)   // do not close stdin, stdout, stderr!
+	    {
+	      int success = fclose (file.fptr ());
+	      if (success != 0)
+		error ("closing %s", file.name ());
+	    }
+
+	  file_list.del (p);
 	}
-      file_list.del (p);
+      else
+	{
+	  error ("inconsistent state for internal file list!");
+	  break;
+	}
     }
 }
 
 static int
 process_printf_format (const char *s, const Octave_object& args,
 		       ostrstream& sb, const char *type)
 {
   ostrstream fmt;
