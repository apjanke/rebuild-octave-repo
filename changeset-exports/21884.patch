# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1465829752 14400
#      Mon Jun 13 10:55:52 2016 -0400
# Node ID e8a8cb1a7258d684d9c0431c9ec4a7a8e09d3bd9
# Parent  02add2f597a1545b4e11e87456cc8b9bc5d8ef27
eliminate unused parameter in kpse functions

* kpse.cc, kpse.h (path_search, search, kpse_path_search,
path_find_first_of, find_first_of, kpse_path_find_first_of):
Eliminate unused parameter, MUST_EXIST.
* kpse.cc, pathsearch.cc: Change all callers.

diff --git a/liboctave/util/kpse.cc b/liboctave/util/kpse.cc
--- a/liboctave/util/kpse.cc
+++ b/liboctave/util/kpse.cc
@@ -335,18 +335,17 @@ absolute_search (const std::string& name
 
   return ret_list;
 }
 
 /* This is the hard case -- look for NAME in PATH.  If ALL is false,
    return the first file found.  Otherwise, search all elements of PATH.  */
 
 static std::list<std::string>
-path_search (const std::string& path, const std::string& name,
-             bool /* must_exist */, bool all)
+path_search (const std::string& path, const std::string& name, bool all)
 {
   std::list<std::string> ret_list;
   bool done = false;
 
   for (kpse_path_iterator pi (path); ! done && pi != std::string::npos; pi++)
     {
       std::string elt = *pi;
 
@@ -407,37 +406,37 @@ path_search (const std::string& path, co
    element of PATH for the first readable ORIGINAL_NAME.
 
    Always return a list; if no files are found, the list will
    contain just NULL.  If ALL is true, the list will be
    terminated with NULL.  */
 
 static std::list<std::string>
 search (const std::string& path, const std::string& original_name,
-        bool must_exist, bool all)
+        bool all)
 {
   std::list<std::string> ret_list;
   bool absolute_p;
 
   /* Make a leading ~ count as an absolute filename, and expand $FOO's.  */
   std::string name = kpse_expand (original_name);
 
   /* If the first name is absolute or explicitly relative, no need to
      consider PATH at all.  */
   absolute_p = kpse_absolute_p (name, true);
 
   if (KPSE_DEBUG_P (KPSE_DEBUG_SEARCH))
     std::cerr << "kdebug: start search (file=" << name
-              << ", must_exist=" << must_exist
               << ", find_all=" << all << ", path=" << path << ")."
               << std::endl;
 
   /* Find the file(s). */
-  ret_list = absolute_p ? absolute_search (name)
-                        : path_search (path, name, must_exist, all);
+  ret_list = (absolute_p
+              ? absolute_search (name)
+              : path_search (path, name, all));
 
   /* The very first search is for texmf.cnf.  We can't log that, since
      we want to allow setting TEXMFLOG in texmf.cnf.  */
   if (first_search)
     {
       first_search = false;
     }
   else
@@ -467,41 +466,39 @@ search (const std::string& path, const s
    tilde and variable expansion on elements in PATH).
 
    The caller must expand PATH.  This is because it makes more sense to
    do this once, in advance, instead of for every search using it.
 
    In any case, return the complete filename if found, otherwise NULL.  */
 
 std::string
-kpse_path_search (const std::string& path, const std::string& name,
-                  bool must_exist)
+kpse_path_search (const std::string& path, const std::string& name)
 {
-  std::list<std::string> ret_list = search (path, name, must_exist, false);
+  std::list<std::string> ret_list = search (path, name, false);
 
   return ret_list.empty () ? "" : ret_list.front ();
 }
 
 /* Like 'kpse_path_search' with MUST_EXIST true, but return a list of
    all the filenames (or NULL if none), instead of taking the first.  */
 
 std::list<std::string>
 kpse_all_path_search (const std::string& path, const std::string& name)
 {
-  return search (path, name, true, true);
+  return search (path, name, true);
 }
 
 /* This is the hard case -- look in each element of PATH for each
    element of NAMES.  If ALL is false, return the first file found.
    Otherwise, search all elements of PATH.  */
 
 std::list<std::string>
 path_find_first_of (const std::string& path,
-                    const std::list<std::string>& names,
-                    bool /* must_exist */, bool all)
+                    const std::list<std::string>& names, bool all)
 {
   std::list<std::string> ret_list;
   bool done = false;
 
   for (kpse_path_iterator pi (path); ! done && pi != std::string::npos; pi++)
     {
       std::string elt = *pi;
 
@@ -562,34 +559,33 @@ path_find_first_of (const std::string& p
         }
     }
 
   return ret_list;
 }
 
 static std::list<std::string>
 find_first_of (const std::string& path, const std::list<std::string>& names,
-               bool must_exist, bool all)
+               bool all)
 {
   std::list<std::string> ret_list;
 
   if (KPSE_DEBUG_P (KPSE_DEBUG_SEARCH))
     {
-      std::cerr << "kdebug: start find_first_of ((";
+      std::cerr << "kdebug: start find_first_of (";
 
       for (auto p = names.cbegin (); p != names.cend (); p++)
         {
           if (p == names.cbegin ())
             std::cerr << *p;
           else
             std::cerr << ", " << *p;
         }
 
-      std::cerr << "), path=" << path << ", must_exist="
-                << must_exist << "." << std::endl;
+      std::cerr << "), path=" << path << "." << std::endl;
     }
 
   for (const auto &name : names)
     {
       if (kpse_absolute_p (name, true))
         {
           /* If the name is absolute or explicitly relative, no need
              to consider PATH at all.  If we find something, then we
@@ -598,17 +594,17 @@ find_first_of (const std::string& path, 
           ret_list = absolute_search (name);
 
           if (! ret_list.empty ())
             return ret_list;
         }
     }
 
   /* Find the file. */
-  ret_list = path_find_first_of (path, names, must_exist, all);
+  ret_list = path_find_first_of (path, names, all);
 
   /* The very first search is for texmf.cnf.  We can't log that, since
      we want to allow setting TEXMFLOG in texmf.cnf.  */
   if (first_search)
     {
       first_search = false;
     }
   else
@@ -643,37 +639,35 @@ find_first_of (const std::string& path, 
 /* Search each element of PATH for each element of NAMES.  Return the
    first one found.  */
 
 /* Search each element of PATH for each element in the list of NAMES.
    Return the first one found.  */
 
 std::string
 kpse_path_find_first_of (const std::string& path,
-                         const std::list<std::string>& names,
-                         bool must_exist)
+                         const std::list<std::string>& names)
 {
-  std::list<std::string> ret_list
-    = find_first_of (path, names, must_exist, false);
+  std::list<std::string> ret_list = find_first_of (path, names, false);
 
   return ret_list.empty () ? "" : ret_list.front ();
 }
 
 /* Search each element of PATH for each element of NAMES and return a
    list containing everything found, in the order found.  */
 
 /* Like 'kpse_path_find_first_of' with MUST_EXIST true, but return a
    list of all the filenames (or NULL if none), instead of taking the
    first.  */
 
 std::list<std::string>
 kpse_all_path_find_first_of (const std::string& path,
                              const std::list<std::string>& names)
 {
-  return find_first_of (path, names, true, true);
+  return find_first_of (path, names, true);
 }
 
 /* If NAME has a leading ~ or ~user, Unix-style, expand it to the user's
    home directory, and return a new malloced string.  If no ~, or no
    <pwd.h>, just return NAME.  */
 
 static std::string
 kpse_tilde_expand (const std::string& name)
diff --git a/liboctave/util/kpse.h b/liboctave/util/kpse.h
--- a/liboctave/util/kpse.h
+++ b/liboctave/util/kpse.h
@@ -84,16 +84,14 @@ kpse_all_path_search (const std::string&
 extern std::string
 kpse_expand_default (const std::string& path, const std::string& fallback);
 
 extern std::string
 kpse_path_expand (const std::string& path);
 
 extern std::string
 kpse_path_find_first_of (const std::string& path,
-                         const std::list<std::string>& names,
-                         bool must_exist);
+                         const std::list<std::string>& names);
 
 extern std::string
-kpse_path_search (const std::string& path, const std::string& name,
-                  bool must_exist);
+kpse_path_search (const std::string& path, const std::string& name);
 
 #endif
diff --git a/liboctave/util/pathsearch.cc b/liboctave/util/pathsearch.cc
--- a/liboctave/util/pathsearch.cc
+++ b/liboctave/util/pathsearch.cc
@@ -85,32 +85,32 @@ namespace octave
       }
 
     return retval;
   }
 
   std::string
   directory_path::find_first (const std::string& nm)
   {
-    return m_initialized ? kpse_path_search (m_expanded_path, nm, true) : "";
+    return m_initialized ? kpse_path_search (m_expanded_path, nm) : "";
   }
 
   std::list<std::string>
   directory_path::find_all (const std::string& nm)
   {
     return (m_initialized
             ? kpse_all_path_search (m_expanded_path, nm)
             : std::list<std::string> ());
   }
 
   std::string
   directory_path::find_first_of (const std::list<std::string>& names)
   {
     return (m_initialized
-            ? kpse_path_find_first_of (m_expanded_path, names, true) : "");
+            ? kpse_path_find_first_of (m_expanded_path, names) : "");
   }
 
   std::list<std::string>
   directory_path::find_all_first_of (const std::list<std::string>& names)
   {
     return (m_initialized
             ? kpse_all_path_find_first_of (m_expanded_path, names)
             : std::list<std::string> ());
