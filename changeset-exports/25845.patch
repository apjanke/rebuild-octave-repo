# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1535646218 14400
#      Thu Aug 30 12:23:38 2018 -0400
# Node ID aa4e0ca9873bd82c7a2f7d8a85e7297fe1347dd9
# Parent  dd10eea0be97e45eb84e152a3d3fc6fc70ce5c7c
eliminate some macros in oct-sort.h header file

* oct-sort.cc, oct-sort.h (MAX_MERGE_PENDING, MIN_GALLOP,
MERGESTATE_TEMP_SIZE): Now static constant integers in the octave_sort
class instead of globally visible macro definitions.
(octave_sort<T>::sort): Use MERGESTATE_TEMP_SIZE instead of literal
constant.

diff --git a/liboctave/util/oct-sort.cc b/liboctave/util/oct-sort.cc
--- a/liboctave/util/oct-sort.cc
+++ b/liboctave/util/oct-sort.cc
@@ -1396,17 +1396,17 @@ template <typename T>
 template <typename Comp>
 void
 octave_sort<T>::sort (T *data, octave_idx_type nel, Comp comp)
 {
   /* Re-initialize the Mergestate as this might be the second time called */
   if (! ms) ms = new MergeState;
 
   ms->reset ();
-  ms->getmem (1024);
+  ms->getmem (MERGESTATE_TEMP_SIZE);
 
   if (nel > 1)
     {
       octave_idx_type nremaining = nel;
       octave_idx_type lo = 0;
 
       /* March over the array once, left to right, finding natural runs,
        * and extending short natural runs to minrun elements.
@@ -1453,17 +1453,17 @@ template <typename Comp>
 void
 octave_sort<T>::sort (T *data, octave_idx_type *idx, octave_idx_type nel,
                       Comp comp)
 {
   /* Re-initialize the Mergestate as this might be the second time called */
   if (! ms) ms = new MergeState;
 
   ms->reset ();
-  ms->getmemi (1024);
+  ms->getmemi (MERGESTATE_TEMP_SIZE);
 
   if (nel > 1)
     {
       octave_idx_type nremaining = nel;
       octave_idx_type lo = 0;
 
       /* March over the array once, left to right, finding natural runs,
        * and extending short natural runs to minrun elements.
diff --git a/liboctave/util/oct-sort.h b/liboctave/util/oct-sort.h
--- a/liboctave/util/oct-sort.h
+++ b/liboctave/util/oct-sort.h
@@ -82,30 +82,16 @@ The Python license is
 
 #if ! defined (octave_oct_sort_h)
 #define octave_oct_sort_h 1
 
 #include "octave-config.h"
 
 #include "lo-traits.h"
 
-// The maximum number of entries in a MergeState's pending-runs stack.
-// This is enough to sort arrays of size up to about
-//     32 * phi ** MAX_MERGE_PENDING
-// where phi ~= 1.618.  85 is ridiculously large enough, good for an array
-// with 2**64 elements.
-#define MAX_MERGE_PENDING 85
-
-// When we get into galloping mode, we stay there until both runs win less
-// often than MIN_GALLOP consecutive times.  See listsort.txt for more info.
-#define MIN_GALLOP 7
-
-// Avoid malloc for small temp arrays.
-#define MERGESTATE_TEMP_SIZE 1024
-
 // Enum for type of sort function
 enum sortmode { UNSORTED = 0, ASCENDING, DESCENDING };
 
 template <typename T>
 class
 octave_sort
 {
 public:
@@ -174,16 +160,30 @@ public:
   static bool ascending_compare (typename ref_param<T>::type,
                                  typename ref_param<T>::type);
 
   static bool descending_compare (typename ref_param<T>::type,
                                   typename ref_param<T>::type);
 
 private:
 
+  // The maximum number of entries in a MergeState's pending-runs stack.
+  // This is enough to sort arrays of size up to about
+  //     32 * phi ** MAX_MERGE_PENDING
+  // where phi ~= 1.618.  85 is ridiculously large enough, good for an array
+  // with 2**64 elements.
+  static const int MAX_MERGE_PENDING = 85;
+
+  // When we get into galloping mode, we stay there until both runs win less
+  // often than MIN_GALLOP consecutive times.  See listsort.txt for more info.
+  static const int MIN_GALLOP = 7;
+
+  // Avoid malloc for small temp arrays.
+  static const int MERGESTATE_TEMP_SIZE = 1024;
+
   // One MergeState exists on the stack per invocation of mergesort.
   // It's just a convenient way to pass state around among the helper
   // functions.
   //
   // DGB: This isn't needed with mergesort in a class, but it doesn't
   // slow things up, and it is likely to make my life easier for any
   // potential backporting of changes in the Python code.
 
