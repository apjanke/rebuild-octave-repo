# HG changeset patch
# User Kai T. Ohlhus <k.ohlhus@gmail.com>
# Date 1505388128 -7200
#      Thu Sep 14 13:22:08 2017 +0200
# Node ID bb5c1e76703921eadbd7c2fecd8906c95100646c
# Parent  21915520ac7b566d631343c1c18139fce018bb69
Remove unused ov-base function get_builtin_classes.

* libinters/octave-value/ov-base.h(get_builtin_classes),
libinters/octave-value/ov-base.cc(get_builtin_classes): remove.

`get_builtin_classes` generates a string_vector view of the global array
`btyp_class_name`, defined in the same compilation unit, but is used nowhere
in Octave or compile time generated code.  It was introduced 2010 in hg id
090173f2db40 but seems to have lost importance.

The global array `btyp_class_name` is currently used directly in
libinterp/corefcn/symtab.cc and libinterp/octave-value/ov-fcn-handle.cc.

diff --git a/libinterp/octave-value/ov-base.cc b/libinterp/octave-value/ov-base.cc
--- a/libinterp/octave-value/ov-base.cc
+++ b/libinterp/octave-value/ov-base.cc
@@ -87,37 +87,16 @@ std::string btyp_class_name[btyp_num_typ
 {
   "double", "single", "double", "single",
   "int8", "int16", "int32", "int64",
   "uint8", "uint16", "uint32", "uint64",
   "logical", "char",
   "struct", "cell", "function_handle"
 };
 
-string_vector
-get_builtin_classes (void)
-{
-  static string_vector retval;
-
-  if (retval.isempty ())
-    {
-      int n = btyp_num_types - 2;
-      retval = string_vector (n);
-      int j = 0;
-      for (int i = 0; i < btyp_num_types; i++)
-        {
-          builtin_type_t ityp = static_cast<builtin_type_t> (i);
-          if (ityp != btyp_complex && ityp != btyp_float_complex)
-            retval(j++) = btyp_class_name[i];
-        }
-    }
-
-  return retval;
-}
-
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_base_value,
                                      "<unknown type>", "unknown");
 
 // TRUE means to perform automatic sparse to real mutation if there
 // is memory to be saved
 bool Vsparse_auto_mutate = false;
 
 octave_base_value *
diff --git a/libinterp/octave-value/ov-base.h b/libinterp/octave-value/ov-base.h
--- a/libinterp/octave-value/ov-base.h
+++ b/libinterp/octave-value/ov-base.h
@@ -78,19 +78,16 @@ enum builtin_type_t
   btyp_func_handle,
   btyp_unknown,
   btyp_num_types = btyp_unknown
 };
 
 extern OCTINTERP_API std::string
 btyp_class_name [btyp_num_types];
 
-extern OCTINTERP_API string_vector
-get_builtin_classes (void);
-
 inline bool btyp_isnumeric (builtin_type_t btyp)
 { return btyp <= btyp_uint64; }
 
 inline bool btyp_isinteger (builtin_type_t btyp)
 { return btyp >= btyp_int8 && btyp <= btyp_uint64; }
 
 inline bool btyp_isfloat (builtin_type_t btyp)
 { return btyp <= btyp_float_complex; }
