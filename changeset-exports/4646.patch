# HG changeset patch
# User jwe
# Date 1069611199 0
#      Sun Nov 23 18:13:19 2003 +0000
# Node ID eff8f977508cd953fd33d154339d0752bf2f3ab7
# Parent  bd2067547b40cd8f89c0b91806819593845ad82f
[project @ 2003-11-23 18:13:19 by jwe]

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2003-11-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* MArray-defs.h (DO_VS_OP2, DO_VV_OP2): Accept args for element
+	type and the names of the left and right operands.  Change all uses.
+
+	* so-array.cc, so-array.h: New files.  Move streamoff_array here
+	from src/ov-streamoff.h and src/ov-streamoff.cc.
+
 2003-11-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* MArrayN.cc (operator -=, operator +=): Check dimensions, not
 	just length.
 
 	* Array2.h, Array3.h, DiagArray2.h, DiagArray2.cc, MDiagArray2.h,
 	ArrayN.h:  Add this-> or Base:: qualifiers for references to
 	non-dependent member functions and data as needed.
diff --git a/liboctave/MArray-defs.h b/liboctave/MArray-defs.h
--- a/liboctave/MArray-defs.h
+++ b/liboctave/MArray-defs.h
@@ -26,26 +26,26 @@
 
 #define NEG_V(r, l, x) \
   if (l > 0) \
     { \
       for (int i = 0; i < l; i++) \
 	r[i] = -x[i]; \
     }
 
-#define DO_VS_OP2(OP) \
+#define DO_VS_OP2(T, a, OP, s) \
   int l = a.length (); \
   if (l > 0) \
     { \
       T *tmp = a.fortran_vec (); \
       for (int i = 0; i < l; i++) \
 	tmp[i] OP s; \
     }
 
-#define DO_VV_OP2(OP) \
+#define DO_VV_OP2(T, a, OP, b) \
   do \
     { \
       T *a_tmp = a.fortran_vec (); \
       const T *b_tmp = b.data (); \
       for (int i = 0; i < l; i++) \
 	a_tmp[i] OP b_tmp[i]; \
     } \
   while (0)
diff --git a/liboctave/MArray.cc b/liboctave/MArray.cc
--- a/liboctave/MArray.cc
+++ b/liboctave/MArray.cc
@@ -36,58 +36,58 @@ Software Foundation, 59 Temple Place - S
 // One dimensional array with math ops.
 
 // Element by element MArray by scalar ops.
 
 template <class T>
 MArray<T>&
 operator += (MArray<T>& a, const T& s)
 {
-  DO_VS_OP2 (+=)
+  DO_VS_OP2 (T, a, +=, s)
   return a;
 }
 
 template <class T>
 MArray<T>&
 operator -= (MArray<T>& a, const T& s)
 {
-  DO_VS_OP2 (-=)
+  DO_VS_OP2 (T, a, -=, s)
   return a;
 }
 
 // Element by element MArray by MArray ops.
 
 template <class T>
 MArray<T>&
 operator += (MArray<T>& a, const MArray<T>& b)
 {
   int l = a.length ();
   if (l > 0)
     {
       int bl = b.length ();
       if (l != bl)
 	gripe_nonconformant ("operator +=", l, bl);
       else
-	DO_VV_OP2 (+=);
+	DO_VV_OP2 (T, a, +=, b);
     }
   return a;
 }
 
 template <class T>
 MArray<T>&
 operator -= (MArray<T>& a, const MArray<T>& b)
 {
   int l = a.length ();
   if (l > 0)
     {
       int bl = b.length ();
       if (l != bl)
 	gripe_nonconformant ("operator -=", l, bl);
       else
-	DO_VV_OP2 (-=);
+	DO_VV_OP2 (T, a, -=, b);
     }
   return a;
 }
 
 // Element by element MArray by scalar ops.
 
 #define MARRAY_AS_OP(OP) \
   template <class T> \
diff --git a/liboctave/MArray2.cc b/liboctave/MArray2.cc
--- a/liboctave/MArray2.cc
+++ b/liboctave/MArray2.cc
@@ -36,25 +36,25 @@ Software Foundation, 59 Temple Place - S
 // Two dimensional array with math ops.
 
 // Element by element MArray2 by scalar ops.
 
 template <class T>
 MArray2<T>&
 operator += (MArray2<T>& a, const T& s)
 {
-  DO_VS_OP2 (+=)
+  DO_VS_OP2 (T, a, +=, s)
   return a;
 }
 
 template <class T>
 MArray2<T>&
 operator -= (MArray2<T>& a, const T& s)
 {
-  DO_VS_OP2 (-=)
+  DO_VS_OP2 (T, a, -=, s)
   return a;
 }
 
 // Element by element MArray2 by MArray2 ops.
 
 template <class T>
 MArray2<T>&
 operator += (MArray2<T>& a, const MArray2<T>& b)
@@ -65,17 +65,17 @@ operator += (MArray2<T>& a, const MArray
   int bc = b.cols ();
   if (r != br || c != bc)
     gripe_nonconformant ("operator +=", r, c, br, bc);
   else
     {
       if (r > 0 && c > 0)
 	{
 	  int l = a.length ();
-	  DO_VV_OP2 (+=);
+	  DO_VV_OP2 (T, a, +=, b);
 	}
     }
   return a;
 }
 
 template <class T>
 MArray2<T>&
 operator -= (MArray2<T>& a, const MArray2<T>& b)
@@ -86,17 +86,17 @@ operator -= (MArray2<T>& a, const MArray
   int bc = b.cols ();
   if (r != br || c != bc)
     gripe_nonconformant ("operator -=", r, c, br, bc);
   else
     {
       if (r > 0 && c > 0)
 	{
 	  int l = a.length ();
-	  DO_VV_OP2 (-=);
+	  DO_VV_OP2 (T, a, -=, b);
 	}
     }
   return a;
 }
 
 // Element by element MArray2 by scalar ops.
 
 #define MARRAY_A2S_OP(OP) \
diff --git a/liboctave/MArrayN.cc b/liboctave/MArrayN.cc
--- a/liboctave/MArrayN.cc
+++ b/liboctave/MArrayN.cc
@@ -37,25 +37,25 @@ Software Foundation, 59 Temple Place - S
 // N-dimensional array with math ops.
 
 // Element by element MArrayN by scalar ops.
 
 template <class T>
 MArrayN<T>&
 operator += (MArrayN<T>& a, const T& s)
 {
-  DO_VS_OP2 (+=)
+  DO_VS_OP2 (T, a, +=, s)
   return a;
 }
 
 template <class T>
 MArrayN<T>&
 operator -= (MArrayN<T>& a, const T& s)
 {
-  DO_VS_OP2 (-=)
+  DO_VS_OP2 (T, a, -=, s)
   return a;
 }
 
 // Element by element MArrayN by MArrayN ops.
 
 template <class T>
 MArrayN<T>&
 operator += (MArrayN<T>& a, const MArrayN<T>& b)
@@ -65,17 +65,17 @@ operator += (MArrayN<T>& a, const MArray
   if (l > 0)
     {
       dim_vector a_dims = a.dims ();
       dim_vector b_dims = b.dims ();
 
       if (a_dims != b_dims)
 	gripe_nonconformant ("operator +=", a_dims, b_dims);
       else
-	DO_VV_OP2 (+=);
+	DO_VV_OP2 (T, a, +=, b);
     }
 
   return a;
 }
 
 template <class T>
 MArrayN<T>&
 operator -= (MArrayN<T>& a, const MArrayN<T>& b)
@@ -85,17 +85,17 @@ operator -= (MArrayN<T>& a, const MArray
   if (l > 0)
     {
       dim_vector a_dims = a.dims ();
       dim_vector b_dims = b.dims ();
 
       if (a_dims != b_dims)
 	gripe_nonconformant ("operator -=", a_dims, b_dims);
       else
-	DO_VV_OP2 (-=);
+	DO_VV_OP2 (T, a, -=, b);
     }
   return a;
 }
 
 // Element by element MArrayN by scalar ops.
 
 #define MARRAYN_NDS_OP(OP) \
   template <class T> \
diff --git a/liboctave/MDiagArray2.cc b/liboctave/MDiagArray2.cc
--- a/liboctave/MDiagArray2.cc
+++ b/liboctave/MDiagArray2.cc
@@ -53,17 +53,17 @@ operator += (MDiagArray2<T>& a, const MD
   if (r != b_nr || c != b_nc)
     {
       gripe_nonconformant ("operator +=", r, c, b_nr, b_nc);
       return MDiagArray2<T>::nil_array;
     }
   else
     {
       int l = a.length ();
-      DO_VV_OP2 (+=);
+      DO_VV_OP2 (T, a, +=, b);
     }
   return a;
 }
 
 template <class T>
 MDiagArray2<T>&
 operator -= (MDiagArray2<T>& a, const MDiagArray2<T>& b)
 {
@@ -76,17 +76,17 @@ operator -= (MDiagArray2<T>& a, const MD
   if (r != b_nr || c != b_nc)
     {
       gripe_nonconformant ("operator -=", r, c, b_nr, b_nc);
       return MDiagArray2<T>::nil_array;
     }
   else
     {
       int l = a.length ();
-      DO_VV_OP2 (-=);
+      DO_VV_OP2 (T, a, -=, b);
     }
   return a;
 }
 
 // Element by element MDiagArray2 by scalar ops.
 
 #define MARRAY_DAS_OP(OP) \
   template <class T> \
diff --git a/liboctave/Makefile.in b/liboctave/Makefile.in
--- a/liboctave/Makefile.in
+++ b/liboctave/Makefile.in
@@ -54,17 +54,17 @@ INCLUDES := Bounds.h CollocWt.h DAE.h DA
 	base-de.h base-min.h byte-swap.h cmd-edit.h cmd-hist.h \
 	data-conv.h dir-ops.h file-ops.h file-stat.h getopt.h \
 	glob-match.h idx-vector.h kpse-xfns.h \
 	lo-ieee.h lo-mappers.h lo-specfun.h lo-sstream.h \
 	lo-sysdep.h lo-utils.h mach-info.h oct-alloc.h oct-cmplx.h \
 	oct-env.h oct-fftw.h oct-getopt.h oct-group.h oct-passwd.h \
 	oct-rand.h oct-rl-edit.h oct-rl-hist.h oct-shlib.h \
 	oct-syscalls.h oct-time.h pathlen.h pathsearch.h \
-	prog-args.h statdefs.h str-vec.h sun-utils.h sysdir.h \
+	prog-args.h so-array.h statdefs.h str-vec.h sun-utils.h sysdir.h \
 	systime.h syswait.h \
 	$(OPTS_INC) \
 	$(MATRIX_INC) \
 	$(MX_OP_INC) \
 	$(VX_OP_INC)
 
 TEMPLATE_SRC := Array.cc ArrayN.cc DiagArray2.cc \
 	MArray.cc MArray2.cc MArrayN.cc MDiagArray2.cc base-lu.cc
@@ -90,17 +90,17 @@ VX_OP_SRC := $(shell $(AWK) -f $(srcdir)
 LIBOCTAVE_CXX_SOURCES := Bounds.cc CollocWt.cc \
 	DASPK.cc DASRT.cc DASSL.cc FEGrid.cc LinConst.cc \
 	LPsolve.cc LSODE.cc NLEqn.cc ODES.cc ODESSA.cc \
 	Quad.cc Range.cc data-conv.cc dir-ops.cc \
 	file-ops.cc file-stat.cc glob-match.cc idx-vector.cc \
 	lo-ieee.cc lo-mappers.cc lo-specfun.cc lo-sysdep.cc \
 	lo-utils.cc mach-info.cc oct-alloc.cc oct-env.cc \
 	oct-fftw.cc oct-group.cc oct-passwd.cc oct-rand.cc oct-shlib.cc \
-	oct-syscalls.cc oct-time.cc prog-args.cc str-vec.cc \
+	oct-syscalls.cc oct-time.cc prog-args.cc so-array.cc str-vec.cc \
 	$(TEMPLATE_SRC) \
 	$(TI_SRC) \
 	$(MATRIX_SRC) \
 	$(MX_OP_SRC) \
 	$(VX_OP_SRC)
 
 LIBOCTAVE_C_SOURCES := f2c-main.c filemode.c getopt.c getopt1.c \
 	lo-cieee.c lo-cutils.c mkdir.c oct-getopt.c rename.c \
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,10 +1,14 @@
 2003-11-23  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
+	* OPERATORS/op-streamoff.cc: Install increment and decrement operators.
+	* ov-streamoff.h (octave_streamoff::increment,
+	octave_streamoff::decrement): New functions.
+
 	* oct-stream.cc (octave_stream::seek): Extract std::streamoff from
 	tc_offset instead of int.
 
 	* ov-re-mat.cc (octave_matrix::double_value): Use numel, not length.
 
 	* ov-re-mat.cc (octave_matrix::streamoff_array_value): New function.
 	* ov-re-mat.h: Provide decl.
 
diff --git a/src/OPERATORS/op-streamoff.cc b/src/OPERATORS/op-streamoff.cc
--- a/src/OPERATORS/op-streamoff.cc
+++ b/src/OPERATORS/op-streamoff.cc
@@ -36,18 +36,18 @@ Software Foundation, 59 Temple Place - S
 
 DEFUNOP (transpose, streamoff)
 {
   CAST_UNOP_ARG (const octave_streamoff&);
 
   return octave_value (streamoff_array (v.streamoff_array_value().transpose ()));
 }
 
-// DEFNCUNOP_METHOD (incr, streamoff, increment)
-// DEFNCUNOP_METHOD (decr, streamoff, decrement)
+DEFNCUNOP_METHOD (incr, streamoff, increment)
+DEFNCUNOP_METHOD (decr, streamoff, decrement)
 
 // streamoff by streamoff ops.
 
 DEFNDBINOP_OP (add, streamoff, streamoff, streamoff_array, streamoff_array, +)
 DEFNDBINOP_OP (sub, streamoff, streamoff, streamoff_array, streamoff_array, -)
 
 DEFNDBINOP_OP (add_so_m, streamoff, matrix, streamoff_array, streamoff_array, +)
 DEFNDBINOP_OP (sub_so_m, streamoff, matrix, streamoff_array, streamoff_array, -)
@@ -126,16 +126,19 @@ DEFASSIGNOP (assign, streamoff, streamof
 }
 
 void
 install_streamoff_ops (void)
 {
   INSTALL_UNOP (op_transpose, octave_streamoff, transpose);
   INSTALL_UNOP (op_hermitian, octave_streamoff, transpose);
 
+  INSTALL_NCUNOP (op_incr, octave_streamoff, incr);
+  INSTALL_NCUNOP (op_decr, octave_streamoff, decr);
+
   INSTALL_BINOP (op_eq, octave_streamoff, octave_streamoff, eq);
   INSTALL_BINOP (op_ne, octave_streamoff, octave_streamoff, ne);
 
   INSTALL_BINOP (op_add, octave_streamoff, octave_streamoff, add);
   INSTALL_BINOP (op_sub, octave_streamoff, octave_streamoff, sub);
 
   INSTALL_BINOP (op_add, octave_streamoff, octave_matrix, add_so_m);
   INSTALL_BINOP (op_sub, octave_streamoff, octave_matrix, sub_so_m);
diff --git a/src/ov-streamoff.cc b/src/ov-streamoff.cc
--- a/src/ov-streamoff.cc
+++ b/src/ov-streamoff.cc
@@ -25,93 +25,33 @@ Software Foundation, 59 Temple Place - S
 #endif
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include <iostream>
 
-#include "Array.h"
-#include "Array.cc"
-#include "ArrayN.h"
-#include "ArrayN.cc"
+#include "so-array.h"
 
 #include "defun.h"
 #include "error.h"
 #include "gripes.h"
 #include "ov-streamoff.h"
 #include "oct-obj.h"
-#include "unwind-prot.h"
 #include "utils.h"
 #include "ov-base-mat.h"
 #include "ov-base-mat.cc"
 
-INSTANTIATE_ARRAY_AND_ASSIGN (std::streamoff);
-
-template class ArrayN<std::streamoff>;
-
 template class octave_base_matrix<streamoff_array>;
 
 DEFINE_OCTAVE_ALLOCATOR (octave_streamoff);
 
 DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_streamoff,
 				     "streamoff", "streamoff");
-boolNDArray
-streamoff_array::all (int dim) const
-{
-  MX_ND_ANY_ALL_REDUCTION (MX_ND_ALL_EVAL (MX_ND_ALL_EXPR), true);
-}
-
-boolNDArray
-streamoff_array::any (int dim) const
-{
-  MX_ND_ANY_ALL_REDUCTION (MX_ND_ANY_EVAL (MX_ND_ANY_EXPR), false);
-}
-
-#if 0
-streamoff_array&
-streamoff_array::operator += (const streamoff_array& a)
-{
-  // XXX FIXME XXX 
-  return *this;
-}
-
-streamoff_array&
-streamoff_array::operator -= (const streamoff_array& a)
-{
-  // XXX FIXME XXX 
-  return *this;
-}
-#endif
-
-int
-streamoff_array::compute_index (Array<int>& ra_idx,
-				const dim_vector& dimensions)
-{
-  return ::compute_index (ra_idx, dimensions);
-}
-
-SND_CMP_OP (mx_el_eq, ==, std::streamoff, , streamoff_array, , FBM)
-SND_CMP_OP (mx_el_ne, !=, std::streamoff, , streamoff_array, , TBM)
-
-NDS_CMP_OP (mx_el_eq, ==, streamoff_array, , std::streamoff, , FBM)
-NDS_CMP_OP (mx_el_ne, !=, streamoff_array, , std::streamoff, , TBM)
-
-NDND_CMP_OP (mx_el_eq, ==, streamoff_array, , streamoff_array, , FBM, TBM)
-NDND_CMP_OP (mx_el_ne, !=, streamoff_array, , streamoff_array, , TBM, FBM)
-
-NDND_BIN_OP (streamoff_array, operator +, streamoff_array, streamoff_array, mx_inline_add)
-NDND_BIN_OP (streamoff_array, operator -, streamoff_array, streamoff_array, mx_inline_subtract)
-
-NDS_BIN_OP (streamoff_array, operator +, streamoff_array, std::streamoff, mx_inline_add)
-NDS_BIN_OP (streamoff_array, operator -, streamoff_array, std::streamoff, mx_inline_subtract)
-
-SND_BIN_OP (streamoff_array, operator +, std::streamoff, streamoff_array, mx_inline_add)
-SND_BIN_OP (streamoff_array, operator -, std::streamoff, streamoff_array, mx_inline_subtract)
 
 std::streamoff
 octave_streamoff::streamoff_value (void) const
 {
   std::streamoff retval (-1);
 
   if (numel () > 0)
     {
diff --git a/src/ov-streamoff.h b/src/ov-streamoff.h
--- a/src/ov-streamoff.h
+++ b/src/ov-streamoff.h
@@ -23,91 +23,28 @@ Software Foundation, 59 Temple Place - S
 #if !defined (octave_streamoff_h)
 #define octave_streamoff_h 1
 
 #if defined (__GNUG__) && defined (USE_PRAGMA_INTERFACE_IMPLEMENTATION)
 #pragma interface
 #endif
 
 #include <iostream>
-#include <string>
 
-#include "mx-base.h"
-#include "mx-op-defs.h"
+#include "so-array.h"
 #include "oct-alloc.h"
-#include "str-vec.h"
 
-#include "error.h"
-#include "oct-obj.h"
+#include "ov.h"
 #include "ov-base-mat.h"
 #include "ov-typeinfo.h"
 
 class tree_walker;
 
 // Stream offsets.
 
-class streamoff_array : public ArrayN<std::streamoff>
-{
-public:
-
-  streamoff_array (void) : ArrayN<std::streamoff> () { }
-
-  streamoff_array (const dim_vector& dv,
-		   const std::streamoff& val = resize_fill_value ())
-    : ArrayN<std::streamoff> (dv, val) { }
-
-  streamoff_array (const ArrayN<std::streamoff>& sa)
-    : ArrayN<std::streamoff> (sa) { }
-
-  streamoff_array (const streamoff_array& sa)
-    : ArrayN<std::streamoff> (sa) { }
-
-  ~streamoff_array (void) { }
-
-  streamoff_array& operator = (const streamoff_array& a)
-    {
-      if (this != &a)
-	ArrayN<std::streamoff>::operator = (a);
-
-      return *this;
-    }
-
-  streamoff_array squeeze (void) const
-    { return ArrayN<std::streamoff>::squeeze (); }
-
-  boolNDArray all (int dim = -1) const;
-  boolNDArray any (int dim = -1) const;
-
-  // streamoff_array& operator += (const streamoff_array& a);
-  // streamoff_array& operator -= (const streamoff_array& a);
-
-  static int compute_index (Array<int>& ra_idx,
-			    const dim_vector& dimensions);
-
-  static std::streamoff resize_fill_value (void) { return 0; }
-};
-
-NDCMP_OP_DECL (mx_el_eq, std::streamoff, streamoff_array);
-NDCMP_OP_DECL (mx_el_ne, std::streamoff, streamoff_array);
-
-NDCMP_OP_DECL (mx_el_eq, streamoff_array, std::streamoff);
-NDCMP_OP_DECL (mx_el_ne, streamoff_array, std::streamoff);
-
-NDCMP_OP_DECL (mx_el_eq, streamoff_array, streamoff_array);
-NDCMP_OP_DECL (mx_el_ne, streamoff_array, streamoff_array);
-
-BIN_OP_DECL (streamoff_array, operator +, streamoff_array, streamoff_array);
-BIN_OP_DECL (streamoff_array, operator -, streamoff_array, streamoff_array);
-
-BIN_OP_DECL (streamoff_array, operator +, streamoff_array, std::streamoff);
-BIN_OP_DECL (streamoff_array, operator -, streamoff_array, std::streamoff);
-
-BIN_OP_DECL (streamoff_array, operator +, std::streamoff, streamoff_array);
-BIN_OP_DECL (streamoff_array, operator -, std::streamoff, streamoff_array);
-
 class
 octave_streamoff : public octave_base_matrix<streamoff_array>
 {
 public:
 
   octave_streamoff (void)
     : octave_base_matrix<streamoff_array> () { }
 
@@ -129,19 +66,19 @@ public:
   bool is_defined (void) const { return true; }
 
   bool is_streamoff (void) const { return true; }
 
   std::streamoff streamoff_value (void) const;
 
   streamoff_array streamoff_array_value (void) const { return matrix; }
 
-  //  void increment (void) { matrix += 1; }
+  void increment (void) { matrix += std::streamoff (1); }
 
-  //  void decrement (void) { matrix -= 1; }
+  void decrement (void) { matrix -= std::streamoff (1); }
 
   bool print_as_scalar (void) const { return true; }
 
   void print (std::ostream& os, bool pr_as_read_syntax = false) const;
 
   void print_raw (std::ostream& os, bool pr_as_read_syntax = false) const;
 
 private:
