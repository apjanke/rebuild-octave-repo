# HG changeset patch
# User jwe
# Date 940496234 0
#      Thu Oct 21 08:57:14 1999 +0000
# Node ID 7ae1928ca623243e55d04c30106cfa21a32a6efe
# Parent  b6c74a0772b5be6e0077684644cd485568c9ee38
[project @ 1999-10-21 08:57:11 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,13 @@
+1999-10-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* configure.in: Check for select and poll.  Also check for poll.h
+	and sys/poll.h.
+
 1999-10-19  Geoff Jacobsen <geoffj@casquet.inet.net.nz>
 
 	* autogen.sh: New file.
 
 1999-10-19  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* octMakefile.in: Use `$(MAKE) -C dir' instead of `cd dir; $(MAKE)'.
 
diff --git a/configure.in b/configure.in
--- a/configure.in
+++ b/configure.in
@@ -16,17 +16,17 @@ dnl Copyright (C) 1996, 1997 John W. Eat
 ### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 ### for more details.
 ### 
 ### You should have received a copy of the GNU General Public License
 ### along with Octave; see the file COPYING.  If not, write to the Free
 ### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ### 02111-1307, USA. 
 
-AC_REVISION($Revision: 1.317 $)
+AC_REVISION($Revision: 1.318 $)
 AC_PREREQ(2.9)
 AC_INIT(src/octave.cc)
 AC_CONFIG_HEADER(config.h)
 
 AC_DEFINE(OCTAVE_SOURCE, 1)
 
 OCTAVE_HOST_TYPE
 
@@ -701,21 +701,22 @@ OCTAVE_STRING_NPOS
 
 ### Checks for header files.
 
 AC_HEADER_STDC
 AC_HEADER_DIRENT
 AC_HEADER_TIME
 AC_HEADER_SYS_WAIT
 
-AC_CHECK_HEADERS(assert.h curses.h dlfcn.h fcntl.h float.h floatingpoint.h \
-  fnmatch.h glob.h grp.h ieeefp.h limits.h memory.h nan.h ncurses.h \
-  pwd.h sgtty.h stdlib.h string.h sys/ioctl.h sys/param.h sys/resource.h \
-  sys/select.h sys/stat.h sys/time.h sys/times.h sys/types.h \
-  sys/utsname.h termcap.h termio.h $TERMIOS_H unistd.h varargs.h)
+AC_CHECK_HEADERS(assert.h curses.h dlfcn.h fcntl.h float.h \
+  floatingpoint.h fnmatch.h glob.h grp.h ieeefp.h limits.h memory.h \
+  nan.h ncurses.h poll.h pwd.h sgtty.h stdlib.h string.h sys/ioctl.h \
+  sys/param.h sys/poll.h sys/resource.h sys/select.h sys/stat.h \
+  sys/time.h sys/times.h sys/types.h sys/utsname.h termcap.h \
+  termio.h $TERMIOS_H unistd.h varargs.h)
 
 ### I'm told that termios.h is broken on NeXT systems.
 
 case "$canonical_host_type" in
   *-*-nextstep*)
     if test "$ac_cv_header_termios_h" = yes; then
       AC_MSG_WARN([Ignoring termios.h on NeXT systems.])
       ac_cv_header_termios_h=no
@@ -771,21 +772,21 @@ AC_SUBST(GLOB_DIR)
 AC_SUBST(LIBGLOB)
 AC_SUBST(GLOB_INCFLAGS)
 
 ### Checks for functions and variables.
 
 AC_CHECK_FUNCS(atexit bcopy bzero dup2 endgrent endpwent execvp fcntl \
   fork getcwd getegid geteuid getgid getgrent getgrgid getgrnam \
   gethostname getpgrp getpid getppid getpwent getpwnam getpwuid \
-  gettimeofday getuid getwd lstat memmove mkdir mkfifo on_exit pipe \
-  putenv rename rindex rmdir setgrent setpwent setvbuf sigaction \
-  sigpending sigprocmask sigsuspend stat strcasecmp strdup strerror \
-  strftime stricmp strncasecmp strnicmp tempnam umask unlink usleep \
-  vfprintf vsprintf waitpid)
+  gettimeofday getuid getwd lstat memmove mkdir mkfifo on_exit pipe
+  poll putenv rename rindex rmdir select setgrent setpwent setvbuf \
+  sigaction sigpending sigprocmask sigsuspend stat strcasecmp strdup \
+  strerror strftime stricmp strncasecmp strnicmp tempnam umask unlink \
+  usleep vfprintf vsprintf waitpid)
 
 OCTAVE_SMART_PUTENV
 
 LIBDLFCN=
 DLFCN_INCFLAGS=
 RDYNAMIC_FLAG=
 if test "$WITH_DL" = yes || test "$WITH_DL" = maybe; then
   case "$canonical_host_type" in
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,27 @@
+1999-10-21  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* variables.h (is_valid_function): Provide default values for the
+	string argument.
+
+	* symtab.cc (variable_reference): Maybe print warning (or error)
+	about variables that hide functions of the same name.
+	(symbol_record::define (const octave_value&, unsigned int)): Ditto.
+	(Vvariables_can_hide_functions): New static variable.
+	(variables_can_hide_functions, symbols_of_symtab): New functions.
+
+	* cutils.c: New file.
+	* Makefile.in (SOURCES): Add it to the list.
+	* utils.h: Declare octave_usleep here.
+	* dirfns.cc (Fls): Simply all octave_usleep.
+	* oct-procbuf.cc (octave_procbuf::open): Ditto.
+	* sysdep.cc (Fusleep): Ditto.
+	* toplev.cc (run_command_and_return_output): Ditto.
+
 1999-10-20  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* data.cc (make_diag (const octave_value&, const octave_value&)):
 	Delete special cases for scalars and simply attempt conversion of
 	first arg to a matrix value.  If that fails, we will still see an
 	error message.
 
 	* Makefile.in (DISTFILES): Add mkgendoc to the list.
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -118,17 +118,17 @@ OV_SRC := ov-base.cc ov-base-mat.cc ov-b
 
 PT_SRC := pt.cc pt-arg-list.cc pt-assign.cc pt-binop.cc pt-check.cc \
 	pt-cmd.cc pt-colon.cc pt-const.cc pt-decl.cc pt-except.cc \
 	pt-exp.cc pt-id.cc pt-idx.cc pt-indir.cc pt-jump.cc \
 	pt-loop.cc pt-mat.cc pt-misc.cc pt-plot.cc pt-pr-code.cc \
 	pt-select.cc pt-stmt.cc pt-unop.cc
 
 DIST_SRC := BaseSLList.cc Map.cc SLList.cc SLStack.cc Stack.cc \
-	data.cc defaults.cc defun.cc dirfns.cc dynamic-ld.cc \
+	cutils.c data.cc defaults.cc defun.cc dirfns.cc dynamic-ld.cc \
 	error.cc file-io.cc fn-cache.cc gripes.cc help.cc input.cc \
 	lex.l load-save.cc mappers.cc matherr.c oct-fstrm.cc \
 	oct-hist.cc oct-iostrm.cc oct-map.cc oct-obj.cc oct-prcstrm.cc \
 	oct-procbuf.cc oct-stdstrm.cc oct-stream.cc oct-strstrm.cc \
 	oct-lvalue.cc pager.cc parse.y pr-output.cc procstream.cc \
 	sighandlers.cc strcasecmp.c strncase.c strfns.cc \
 	symtab.cc syscalls.cc sysdep.cc system.c token.cc \
 	toplev.cc unwind-prot.cc utils.cc variables.cc xdiv.cc \
diff --git a/src/dirfns.cc b/src/dirfns.cc
--- a/src/dirfns.cc
+++ b/src/dirfns.cc
@@ -192,21 +192,17 @@ from system to system.\n\
       char ch;
 
       if (cmd->get (ch))
         octave_stdout << ch;
       else
         {
           cmd->clear ();
 
-#if defined (HAVE_USLEEP)
-          usleep (100);
-#else
-          sleep (1);
-#endif
+          octave_usleep (100);
         }
 
       while (cmd->get (ch))
         octave_stdout << ch;
     }
   else
     error ("couldn't start process for ls!");
 
diff --git a/src/oct-procbuf.cc b/src/oct-procbuf.cc
--- a/src/oct-procbuf.cc
+++ b/src/oct-procbuf.cc
@@ -38,16 +38,17 @@ Software Foundation, 59 Temple Place - S
 #include "lo-mappers.h"
 #include "lo-utils.h"
 #include "oct-procbuf.h"
 #include "syswait.h"
 #include "variables.h"
 
 #include "defun.h"
 #include "gripes.h"
+#include "utils.h"
 
 // Number of microseconds to delay in the parent after forking.
 #if defined (__CYGWIN32__)
 static int Vkluge_procbuf_delay = 500000;
 #else
 static int Vkluge_procbuf_delay = 0;
 #endif
 
@@ -107,23 +108,18 @@ octave_procbuf::open (const char *comman
 	  octave_procbuf_list = octave_procbuf_list->next;
 	}
 
       execl ("/bin/sh", "sh", "-c", command, NULL);
 
       exit (127);
     }
 
-#if defined (HAVE_USLEEP)
   if (Vkluge_procbuf_delay > 0)
-    usleep (Vkluge_procbuf_delay);
-#else
-  if (Vkluge_procbuf_delay > 499999)
-    sleep ((Vkluge_procbuf_delay + 500000) / 1000000);
-#endif
+    octave_usleep (Vkluge_procbuf_delay);
 
   ::close (child_end);
 
   if (proc_pid < 0)
     {
       ::close (parent_end);
       return 0;
     }
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -32,24 +32,30 @@ Software Foundation, 59 Temple Place - S
 #include <cctype>
 #include <climits>
 
 #include <iomanip.h>
 
 #include "glob-match.h"
 #include "str-vec.h"
 
+#include "defun.h"
 #include "error.h"
 #include "oct-lvalue.h"
 #include "ov.h"
 #include "pager.h"
 #include "symtab.h"
 #include "utils.h"
 #include "variables.h"
 
+// Should variables be allowed to hide functions of the same name?  A
+// positive value means yes.  A negative value means yes, but print a
+// warning message.  Zero means it should be considered an error.
+static int Vvariables_can_hide_functions;
+
 octave_allocator
 symbol_record::symbol_def::allocator (sizeof (symbol_record::symbol_def));
 
 void
 symbol_record::symbol_def::dump_symbol_info (void)
 {
   octave_stdout << "symbol_def::count: " << count << "\n";
   octave_stdout << "def.type_name():   " << definition.type_name () << "\n";
@@ -69,17 +75,27 @@ symbol_record::rename (const string& new
 }
 
 void
 symbol_record::define (const octave_value& v, unsigned int sym_type)
 {
   if (! (is_variable () && read_only_error ("redefine")))
     {
       if (is_function () || is_constant ())
-	push_def (new symbol_def ());
+	{
+	  if (Vvariables_can_hide_functions)
+	    {
+	      push_def (new symbol_def ());
+
+	      if (Vvariables_can_hide_functions < 0)
+		warning ("variable `%s' hides function", nm.c_str ());
+	    }
+	  else
+	    error ("variable `%s' hides function", nm.c_str ());
+	}
 
       if (definition->type () == symbol_record::BUILTIN_VARIABLE)
 	sym_type = symbol_record::BUILTIN_VARIABLE;
 
       definition->define (v, sym_type);
     }
 }
 
@@ -238,16 +254,29 @@ symbol_record::link_to_builtin_variable 
   if (tmp_sym && tmp_sym->is_builtin_variable ())
     alias (tmp_sym);
 }
 
 
 octave_lvalue
 symbol_record::variable_reference (void)
 {
+  if (Vvariables_can_hide_functions <= 0
+      && (is_function ()
+	  || (! is_defined () && is_valid_function (nm))))
+    {
+      if (Vvariables_can_hide_functions < 0)
+	warning ("variable `%s' hides function", nm.c_str ());
+      else
+	{
+	  error ("variable `%s' hides function", nm.c_str ());
+	  return octave_lvalue ();
+	}
+    }
+
   if (is_function () || is_constant ())
     clear ();
 
   if (! is_defined ())
     {
       if (! (is_formal_parameter () || is_linked_to_global ()))
 	link_to_builtin_variable ();
 
@@ -773,13 +802,31 @@ symbol_table::hash (const string& str)
   unsigned int h = 0;
 
   for (unsigned int i = 0; i < str.length (); i++)
     h = h * 33 + str[i];
 
   return h & (table_size - 1);
 }
 
+
+static int
+variables_can_hide_functions (void)
+{
+  Vvariables_can_hide_functions
+    = check_preference ("variables_can_hide_functions");
+
+  return 0;
+}
+
+void
+symbols_of_symtab (void)
+{
+  DEFVAR (variables_can_hide_functions, 1.0, variables_can_hide_functions,
+    "Should variables be allowed to hide functions of the same name?");
+}
+
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/sysdep.cc b/src/sysdep.cc
--- a/src/sysdep.cc
+++ b/src/sysdep.cc
@@ -514,27 +514,20 @@ of time less than one second, @code{usle
       double dval = args(0).double_value ();
 
       if (! error_state)
 	{
 	  if (xisnan (dval))
 	    warning ("usleep: NaN is an invalid delay");
 	  else
 	    {
-#if defined (HAVE_USLEEP)
 	      int delay = NINT (dval);
 
 	      if (delay > 0)
-		usleep (delay);
-#else
-	      int delay = NINT (dval / 1e6);
-
-	      if (delay > 0)
-		sleep (delay);
-#endif
+		octave_usleep (delay);
 	    }
 	}
     }
   else
     print_usage ("usleep");
 
   return retval;
 }
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -330,21 +330,17 @@ run_command_and_return_output (const str
 	  char ch;
 
 	  if (cmd->get (ch))
 	    output_buf.put (ch);
 	  else
 	    {
 	      cmd->clear ();
 
-#if defined (HAVE_USLEEP)
-	      usleep (100);
-#else
-	      sleep (1);
-#endif
+	      octave_usleep (100);
 	    }
 
 	  while (cmd->get (ch))
 	    output_buf.put (ch);
 
 	  int cmd_status = cmd->close ();
 
 	  if (WIFEXITED (cmd_status))
diff --git a/src/utils.h b/src/utils.h
--- a/src/utils.h
+++ b/src/utils.h
@@ -53,15 +53,17 @@ extern int empty_arg (const char *name, 
 extern const char *undo_string_escape (char c);
 
 extern string do_string_escapes (const string& s);
 
 extern string undo_string_escapes (const string& s);
 
 extern int check_preference (const string& var);
 
+extern "C" void octave_usleep (unsigned int useconds);
+
 #endif
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/variables.h b/src/variables.h
--- a/src/variables.h
+++ b/src/variables.h
@@ -45,20 +45,22 @@ extern void initialize_symbol_tables (vo
 
 extern bool is_builtin_variable (const string&);
 extern bool is_text_function_name (const string&);
 extern bool is_mapper_function_name (const string&);
 extern bool is_builtin_function_name (const string&);
 extern bool is_globally_visible (const string&);
 
 extern octave_function *
-is_valid_function (const octave_value&, const string&, bool warn = false); 
+is_valid_function (const octave_value&, const string& = string (),
+		   bool warn = false); 
 
 extern octave_function *
-is_valid_function (const string&, const string&, bool warn = false); 
+is_valid_function (const string&, const string& = string (),
+		   bool warn = false); 
 
 extern octave_function *
 extract_function (const octave_value& arg, const string& warn_for,
 		  const string& fname, const string& header,
 		  const string& trailer);
 
 extern string_vector
 get_struct_elts (const string& text);
