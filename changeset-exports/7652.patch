# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1206586876 14400
#      Wed Mar 26 23:01:16 2008 -0400
# Node ID b5731e43283a091e6b803af39307be78ef2c0fe1
# Parent  443a8f5a50fd9bec4afef1a5708ce28d1d5a9d8f
ismember: correctly size idx output for empty args

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,10 +1,15 @@
 2008-03-26  John W. Eaton  <jwe@octave.org>
 
+	* set/ismember.m: Set size of idx output correctly for empty args.
+	New tests.
+
+	* general/logical.m: Correctly handle empty args.  New tests.
+
 	* control/hinf/h2syn.m, general/__splinen__.m, general/gradient.m,
 	geometry/inpolygon.m, geometry/trimesh.m, geometry/triplot.m,
 	image/imagesc.m, io/csvread.m, io/csvwrite.m,
 	miscellaneous/edit.m, miscellaneous/tempname.m, plot/fill.m,
 	plot/patch.m, plot/ribbon.m, plot/surface.m, polynomial/mkpp.m,
 	polynomial/pchip.m, polynomial/spline.m, set/unique.m:
 	Texinfo fixes.
 
diff --git a/scripts/general/logical.m b/scripts/general/logical.m
--- a/scripts/general/logical.m
+++ b/scripts/general/logical.m
@@ -32,20 +32,31 @@
 ## @end example
 ## @end deftypefn
 
 ## Author: jwe
 
 function y = logical (x)
 
   if (nargin == 1)
-    if (islogical (x) || isempty (x))
+    if (islogical (x))
       y = x;
+    elseif (isempty (x))
+      y = zeros (size (x), "logical");
     elseif (isnumeric (x))
       y = x != 0;
     else
       error ("logical not defined for type `%s'", typeinfo (x));
     endif
   else
     print_usage ();
   endif
 
 endfunction
+
+%!assert (logical ([]), zeros ([0, 0], "logical"));
+%!assert (logical (zeros (2, 0)), zeros ([2, 0], "logical"));
+%!assert (logical (0), false);
+%!assert (logical (13), true);
+%!assert (logical (-13), true);
+%!assert (logical (int8 (13)), true);
+%!assert (logical (int8 (-13)), true);
+%!assert (logical ([-1, 0, 1, NaN, Inf]), [-1, 0, 1, NaN, Inf] != 0);
diff --git a/scripts/set/ismember.m b/scripts/set/ismember.m
--- a/scripts/set/ismember.m
+++ b/scripts/set/ismember.m
@@ -114,17 +114,17 @@ function [tf, a_idx] = ismember (a, s, r
           a = a(:);
         endif 
         if (all (size (s) > 1))
           s = s(:);
         endif 
         ## Do the actual work.
         if (isempty (a) || isempty (s))
           tf = zeros (size (a), "logical");
-          a_idx = []; 
+          a_idx = zeros (size (a)); 
         elseif (numel (s) == 1) 
           tf = (a == s);
           a_idx = double (tf);
         elseif (numel (a) == 1) 
           f = find (a == s, 1); 
           tf = !isempty (f);
           a_idx = f; 
           if (isempty (a_idx))
@@ -160,22 +160,22 @@ function [tf, a_idx] = ismember (a, s, r
           ## easy to now check membership by comparing s(a_idx) == a.  This 
           ## magic works because s starts out sorted, and because sort 
           ## preserves the relative order of identical elements. 
           lt = numel(s); 
           [s, sidx] = sort (s); 
           [v, p] = sort ([s(2:lt)(:); a(:)]); 
           idx(p) = cumsum (p <= lt-1) + 1; 
           idx = idx(lt:end); 
-          tf = (a == reshape (s (idx), size (a))); 
-          a_idx = zeros (size(tf)); 
+          tf = (a == reshape (s(idx), size (a))); 
+          a_idx = zeros (size (tf)); 
           a_idx(tf) = sidx(idx(tf));
         endif
         ## Resize result to the original size of 'a' 
-        size_a = size(a);
+        size_a = size (a);
         tf = reshape (tf, size_a); 
         a_idx = reshape (a_idx, size_a);
       endif
     endif
   else
     print_usage ();
   endif
 
@@ -195,17 +195,17 @@ function [tf, a_idx] = cell_ismember (a,
       else
         s = cellstr (s);
       endif
     endif 
     if (iscellstr (a) && iscellstr (s))
       ## Do the actual work
       if (isempty (a) || isempty (s))
         tf = zeros (size (a), "logical");
-        a_idx = []; 
+        a_idx = zeros (size (a)); 
       elseif (numel (s) == 1) 
         tf = strcmp (a, s);
         a_idx = double (tf);
       elseif (numel (a) == 1) 
         f = find (strcmp (a, s), 1); 
         tf = !isempty (f);
         a_idx = f; 
         if (isempty (a_idx))
@@ -252,16 +252,46 @@ endfunction
 %!assert (ismember ({'foo'}, {'foobar'}), false);
 %!assert (ismember ({'bar'}, {'foobar'}), false);
 %!assert (ismember ({'bar'}, {'foobar', 'bar'}), true);
 %!assert (ismember ({'foo', 'bar'}, {'foobar', 'bar'}), logical ([0, 1]));
 %!assert (ismember ({'xfb', 'f', 'b'}, {'fb', 'b'}), logical ([0, 0, 1]));
 %!assert (ismember ("1", "0123456789."), true);
 
 %!test
+%! [result, a_idx] = ismember ([1, 2], []);
+%! assert (result, logical ([0, 0]))
+%! assert (a_idx, [0, 0]);
+
+%!test
+%! [result, a_idx] = ismember ([], [1, 2]);
+%! assert (result, logical ([]))
+%! assert (a_idx, []);
+
+%!test
+%! [result, a_idx] = ismember ({'a', 'b'}, '');
+%! assert (result, logical ([0, 0]))
+%! assert (a_idx, [0, 0]);
+
+%!test
+%! [result, a_idx] = ismember ({'a', 'b'}, {});
+%! assert (result, logical ([0, 0]))
+%! assert (a_idx, [0, 0]);
+
+%!test
+%! [result, a_idx] = ismember ('', {'a', 'b'});
+%! assert (result, false)
+%! assert (a_idx, 0);
+
+%!test
+%! [result, a_idx] = ismember ({}, {'a', 'b'});
+%! assert (result, logical ([]))
+%! assert (a_idx, []);
+
+%!test
 %! [result, a_idx] = ismember([1 2 3 4 5], [3]);
 %! assert (all (result == logical ([0 0 1 0 0])) && all (a_idx == [0 0 1 0 0]));
 
 %!test
 %! [result, a_idx] = ismember([1 6], [1 2 3 4 5 1 6 1]);
 %! assert (all (result == logical ([1 1])) && all (a_idx == [8 7]));
 
 %!test
