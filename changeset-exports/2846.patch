# HG changeset patch
# User jwe
# Date 859418952 0
#      Wed Mar 26 23:29:12 1997 +0000
# Node ID 52e7c4509983b77e3a5cfa49f79525313155c814
# Parent  b11fb5e85dc52d84eda7849e8b0e7d0bc0d0253f
[project @ 1997-03-26 23:27:35 by jwe]

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,45 @@
+Wed Mar 26 17:08:27 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	Implement static variable declaration:
+
+	* lex.l (is_keyword): Handle static.
+	* octave.gperf: Likewise.
+	* parse.y (Vwarn_comma_in_declaration): Rename from
+	Vwarn_comma_in_global_decl.
+	Handle new static command.
+	* pt-cmd.h, pt-cmd.cc (class tree_decl_command): New base class
+	for static and global declaration commands.
+	(class tree_global_command): Derive from tree_decl_command.
+	(class tree_static_command): New class, derived from tree_decl_command.
+	* pt-fvc.cc, pt-fvc.h (tree_identifier::mark_as_static): New function.
+	* pt-misc.h, pt-misc.h (class tree_decl_elt): Rename from tree_global.
+	(class tree_decl_init_list): Rename from tree_global_init_list.
+	* pt-pr-code.cc, pt-pr-code.h (tree_print_code::visit_decl_command):
+	Rename from visit_global_command.
+	(tree_print_code::visit_decl_elt): Rename from visit_global.
+	(tree_print_code::visit_decl_init_list): Rename from
+	visit_global_init_list.
+	* pt-walk.h (tree_walker::visit_decl_command): Rename from
+	visit_global_command.
+	(tree_walker::visit_decl_elt): Rename from visit_tree_global.
+	(tree_walker::visit_decl_init_list): Rename from
+	visit_global_init_list.
+	* variables.cc (link_to_global_variable): Trying to make a static
+	variable global is an error.
+	* SLList-misc.cc: Instantiate lists of pointers to tree_decl_elt
+	objects, not tree_global objects.
+	* symtab.h, symtab.cc (symbol_record::tagged_static): New field.
+	(symbol_record::mark_as_static, symbol_record::is_static):
+	New functions.
+	* symtab.cc (symbol_record::init_state): Initialize tagged_static.
+	(symbol_record::clear): Don't clear static variables.
+	* symtab.cc (push_context): Don't do anything for static variables.
+
 Tue Mar 25 17:17:17 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* ov-bool-mat.cc (octave_bool_matrix::is_true): Write guts.
 
 	* ov-bool-mat.h (octave_bool_matrix): Implement all() and any().
 
 	* defaults.cc (symbols_of_defaults): DEFCONST OCTAVE_HOME.
 
diff --git a/src/SLList-misc.cc b/src/SLList-misc.cc
--- a/src/SLList-misc.cc
+++ b/src/SLList-misc.cc
@@ -37,16 +37,16 @@ template class SLNode<tree_statement *>;
 template class SLList<tree_statement *>;
 
 template class SLNode<tree_if_clause *>;
 template class SLList<tree_if_clause *>;
 
 template class SLList<tree_switch_case *>;
 template class SLNode<tree_switch_case *>;
 
-template class SLList<tree_global *>;
-template class SLNode<tree_global *>;
+template class SLList<tree_decl_elt *>;
+template class SLNode<tree_decl_elt *>;
 
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/src/lex.l b/src/lex.l
--- a/src/lex.l
+++ b/src/lex.l
@@ -962,16 +962,17 @@ is_keyword (const string& s)
 	case case_kw:
 	case catch_kw:
 	case continue_kw:
 	case else_kw:
 	case elseif_kw:
 	case global_kw:
 	case otherwise_kw:
 	case return_kw:
+	case static_kw:
 	case unwind_protect_cleanup_kw:
  	  break;
 
 	case end_kw:
 	  yylval.tok_val = new token (token::simple_end, l, c);
 	  break;
 
 	case end_try_catch_kw:
diff --git a/src/octave.gperf b/src/octave.gperf
--- a/src/octave.gperf
+++ b/src/octave.gperf
@@ -21,16 +21,17 @@ enum octave_kw_id
   function_kw,
   global_kw,
   gplot_kw,
   gsplot_kw,
   if_kw,
   otherwise_kw,
   replot_kw,
   return_kw,
+  static_kw,
   switch_kw,
   try_kw,
   unwind_protect_kw,
   unwind_protect_cleanup_kw,
   while_kw
 };
 
 %}
@@ -55,13 +56,14 @@ for, FOR, for_kw
 function, FCN, function_kw
 global, GLOBAL, global_kw
 gplot, PLOT, gplot_kw
 gsplot, PLOT, gsplot_kw
 if, IF, if_kw
 otherwise, OTHERWISE, otherwise_kw
 replot, PLOT, replot_kw
 return, FUNC_RET, return_kw
+static, STATIC, static_kw
 switch, SWITCH, switch_kw
 try, TRY, try_kw
 unwind_protect, UNWIND, unwind_protect_kw
 unwind_protect_cleanup, CLEANUP, unwind_protect_cleanup_kw
 while, WHILE, while_kw
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -74,17 +74,17 @@ static bool Vwarn_assign_as_truth_value;
 
 // If TRUE, generate a warning for variable swich labels.
 static bool Vwarn_variable_switch_label;
 
 // If TRUE, generate a warning for the comma in things like
 //
 //   octave> global a, b = 2
 //
-static bool Vwarn_comma_in_global_decl;
+static bool Vwarn_comma_in_declaration;
 
 // If TRUE, generate warning if declared function name disagrees with
 // the name of the file in which it is defined.
 static bool Vwarn_function_name_clash;
 
 // If TRUE, generate warning if a statement in a function is not
 // terminated with a semicolon.  Useful for checking functions that
 // should only produce output using explicit printing statements.
@@ -234,22 +234,29 @@ static tree_function *finish_function_de
 // Finish defining a function a different way.
 static tree_function *finish_function_def
 	 (tree_parameter_list *ret_list, tree_function *fcn);
 
 // Make an index expression.
 static tree_index_expression *make_index_expression
 	 (tree_indirect_ref *indir, tree_argument_list *args);
 
+// Make a declaration command.
+static tree_decl_command *make_decl_command
+	(int tok, token *tok_val, tree_decl_init_list *lst);
+
 // Finish building a matrix list.
 static tree_expression *finish_matrix (tree_matrix *m);
 
 // Maybe print a warning.  Duh.
 static void maybe_warn_missing_semi (tree_statement_list *);
 
+// Maybe print a warning.  Duh.
+static void maybe_warn_comma_in_decl (void);
+
 // Set the print flag for a statement based on the separator type.
 static void set_stmt_print_flag (tree_statement_list *, char, bool);
 
 #define ABORT_PARSE \
   do \
     { \
       global_command = 0; \
       yyerrok; \
@@ -285,19 +292,19 @@ static void set_stmt_print_flag (tree_st
   tree_parameter_list *tree_parameter_list_type;
   tree_command *tree_command_type;
   tree_if_command *tree_if_command_type;
   tree_if_clause *tree_if_clause_type;
   tree_if_command_list *tree_if_command_list_type;
   tree_switch_command *tree_switch_command_type;
   tree_switch_case *tree_switch_case_type;
   tree_switch_case_list *tree_switch_case_list_type;
-  tree_global *tree_global_type;
-  tree_global_init_list *tree_global_init_list_type;
-  tree_global_command *tree_global_command_type;
+  tree_decl_elt *tree_decl_elt_type;
+  tree_decl_init_list *tree_decl_init_list_type;
+  tree_decl_command *tree_decl_command_type;
   tree_statement *tree_statement_type;
   tree_statement_list *tree_statement_list_type;
   tree_plot_command *tree_plot_command_type;
   subplot *subplot_type;
   subplot_list *subplot_list_type;
   plot_limits *plot_limits_type;
   plot_range *plot_range_type;
   subplot_using *subplot_using_type;
@@ -318,17 +325,17 @@ static void set_stmt_print_flag (tree_st
 %token <tok_val> PLOT
 %token <tok_val> TEXT STYLE
 %token <tok_val> FOR WHILE
 %token <tok_val> IF ELSEIF ELSE
 %token <tok_val> SWITCH CASE OTHERWISE
 %token <tok_val> BREAK CONTINUE FUNC_RET
 %token <tok_val> UNWIND CLEANUP
 %token <tok_val> TRY CATCH
-%token <tok_val> GLOBAL
+%token <tok_val> GLOBAL STATIC
 %token <tok_val> TEXT_ID
 
 // Other tokens.
 %token LEXICAL_ERROR
 %token FCN SCREW_TWO
 %token ELLIPSIS
 %token ALL_VA_ARGS
 %token END_OF_INPUT
@@ -351,19 +358,19 @@ static void set_stmt_print_flag (tree_st
 %type <tree_parameter_list_type> return_list return_list1
 %type <tree_command_type> command func_def
 %type <tree_if_command_type> if_command
 %type <tree_if_clause_type> elseif_clause else_clause
 %type <tree_if_command_list_type> if_cmd_list1 if_cmd_list
 %type <tree_switch_command_type> switch_command
 %type <tree_switch_case_type> switch_case default_case
 %type <tree_switch_case_list_type> case_list1 case_list
-%type <tree_global_type> global_decl2
-%type <tree_global_init_list_type> global_decl1
-%type <tree_global_command_type> global_decl
+%type <tree_decl_elt_type> decl2
+%type <tree_decl_init_list_type> decl1
+%type <tree_decl_command_type> declaration
 %type <tree_statement_type> statement
 %type <tree_statement_list_type> simple_list simple_list1 list list1
 %type <tree_statement_list_type> opt_list input1
 %type <tree_plot_command_type> plot_command 
 %type <subplot_type> plot_command2 plot_options
 %type <subplot_list_type> plot_command1
 %type <plot_limits_type> ranges
 %type <plot_range_type> ranges1 
@@ -595,56 +602,53 @@ style		: WITH STYLE
 		| WITH STYLE expression expression
 		  { $$ = new subplot_style ($2->text (), $3, $4); }
 		;
 
 ans_expression	: expression
 		  { $$ = maybe_convert_to_ans_assign ($1); }
 		;
 
-global_decl	: GLOBAL global_decl1
+decl1		: decl2
+		  { $$ = new tree_decl_init_list ($1); }
+		| decl1 decl2
 		  {
-		    $$ = new tree_global_command ($2, $1->line (),
-						  $1->column ());
+		    $1->append ($2);
+		    $$ = $1;
 		  }
-		;
-
-global_decl1	: global_decl2
-		  { $$ = new tree_global_init_list ($1); }
-		| global_decl1 optcomma global_decl2
+		| decl1 ',' decl2
 		  {
+		    maybe_warn_comma_in_decl ();
 		    $1->append ($3);
 		    $$ = $1;
 		  }
-
-global_decl2	: identifier
-		  { $$ = new tree_global ($1); }
+		;
+
+decl2		: identifier
+		  { $$ = new tree_decl_elt ($1); }
 		| identifier '=' expression
 		  {
 		    tree_simple_assignment_expression *tmp_ass;
 		    tmp_ass = new tree_simple_assignment_expression
 		      ($1, $3, 0, 0, $2->line (), $2->column ());
-		    $$ = new tree_global (tmp_ass);
+		    $$ = new tree_decl_elt (tmp_ass);
 		  }
 		;
 
-optcomma	: // empty
-		| ','
-		  {
-		    if (Vwarn_comma_in_global_decl)
-		      warning ("comma in global declaration not\
- interpreted as a command separator");
-		  }
+declaration	: GLOBAL decl1
+		  { $$ = make_decl_command (GLOBAL, $1, $2); }
+		| STATIC decl1
+		  { $$ = make_decl_command (STATIC, $1, $2); }
 		;
 
 command		: plot_command
 		  { $$ = $1; }
 		| func_def
 		  { $$ = $1; }
-		| global_decl
+		| declaration
 		  { $$ = $1; }
 		| switch_command
 		  { $$ = $1; }
 		| if_command
 		  { $$ = $1; }
 		| UNWIND opt_sep opt_list CLEANUP opt_sep opt_list END
 		  {
 		    if (! ($$ = make_unwind_command ($1, $3, $6, $7)))
@@ -2241,16 +2245,18 @@ finish_function_def (token *var, tree_fu
 static tree_function *
 finish_function_def (tree_parameter_list *ret_list, tree_function *fcn)
 {
   ret_list->mark_as_formal_parameters ();
 
   return fcn->define_ret_list (ret_list);
 }
 
+// Make an index expression.
+
 static tree_index_expression *
 make_index_expression (tree_indirect_ref *indir, tree_argument_list *args)
 {
   tree_index_expression *retval = 0;
 
   int l = indir->line ();
   int c = indir->column ();
 
@@ -2261,16 +2267,53 @@ make_index_expression (tree_indirect_ref
       delete indir;
     }
   else
     retval =  new tree_index_expression (indir, args, l, c);
 
   return retval;
 }
 
+// Make a declaration command.
+
+static tree_decl_command *
+make_decl_command (int tok, token *tok_val, tree_decl_init_list *lst)
+{
+  tree_decl_command *retval = 0;
+
+  int l = tok_val->line ();
+  int c = tok_val->column ();
+
+  switch (tok)
+    {
+    case GLOBAL:
+      retval = new tree_global_command (lst, l, c);
+      break;
+
+    case STATIC:
+      if (lexer_flags.defining_func)
+	retval = new tree_static_command (lst, l, c);
+      else
+	{
+	  if (reading_script_file)
+	    warning ("ignoring static declaration near line %d of file `%s'",
+		     l, curr_fcn_file_full_name.c_str ());
+	  else
+	    warning ("ignoring static declaration near line %d", l);
+	}
+      break;
+
+    default:
+      panic_impossible ();
+      break;
+    }
+
+  return retval;
+}
+
 // Finish building a matrix list.
 
 static tree_expression *
 finish_matrix (tree_matrix *m)
 {
   tree_expression *retval = 0;
 
   lexer_flags.maybe_screwed_again--;
@@ -2345,29 +2388,42 @@ set_stmt_print_flag (tree_statement_list
       break;
 
     default:
       warning ("unrecognized separator type!");
       break;
     }
 }
 
+static void
+maybe_warn_comma_in_decl (void)
+{
+  if (Vwarn_comma_in_declaration)\
+    {
+      warning ("comma in declaration not interpreted as a command separator"); 
+
+      if (reading_fcn_file || reading_script_file)
+	warning ("near line %d of file `%s'", input_line_number,
+		 curr_fcn_file_full_name.c_str ());
+    }
+}
+
 static int
 warn_assign_as_truth_value (void)
 {
   Vwarn_assign_as_truth_value
     = check_preference ("warn_assign_as_truth_value");
 
   return 0;
 }
 
 static int
-warn_comma_in_global_decl (void)
+warn_comma_in_declaration (void)
 {
-  Vwarn_comma_in_global_decl = check_preference ("warn_comma_in_global_decl");
+  Vwarn_comma_in_declaration = check_preference ("warn_comma_in_declaration");
 
   return 0;
 }
 
 static int
 warn_function_name_clash (void)
 {
   Vwarn_function_name_clash = check_preference ("warn_function_name_clash");
@@ -2393,18 +2449,18 @@ warn_variable_switch_label (void)
 }
 
 void
 symbols_of_parse (void)
 {
   DEFVAR (warn_assign_as_truth_value, 1.0, 0, warn_assign_as_truth_value,
     "produce warning for assignments used as truth values");
 
-  DEFVAR (warn_comma_in_global_decl, 1.0, 0, warn_comma_in_global_decl,
-    "produce warning for commas in global declarations");
+  DEFVAR (warn_comma_in_declaration, 1.0, 0, warn_comma_in_declaration,
+    "produce warning for commas in declaration statements");
 
   DEFVAR (warn_function_name_clash, 1.0, 0, warn_function_name_clash,
     "produce warning if function name conflicts with file name");
 
   DEFVAR (warn_missing_semicolon, 0.0, 0, warn_missing_semicolon,
     "produce a warning if a statement in a function file is not\n\
 terminated with a semicolon");
 
diff --git a/src/pt-cmd.cc b/src/pt-cmd.cc
--- a/src/pt-cmd.cc
+++ b/src/pt-cmd.cc
@@ -66,38 +66,117 @@ quit_loop_now (void)
   bool quit = (returning || breaking || continuing);
 
   if (breaking)
     breaking--;
 
   return quit;
 }
 
+// Base class for declaration commands (global, static).
+
+tree_decl_command::~tree_decl_command (void)
+{
+  delete init_list;
+}
+
+void
+tree_decl_command::accept (tree_walker& tw)
+{
+  tw.visit_decl_command (*this);
+}
+
 // Global.
 
-tree_global_command::~tree_global_command (void)
+static void
+do_global_init (tree_decl_elt& elt, bool skip_initializer)
 {
-  delete init_list;
+  tree_identifier *id = elt.ident ();
+
+  if (id)
+    id->link_to_global ();
+  else
+    {
+      tree_simple_assignment_expression *expr = elt.assign_expr ();
+
+      if (expr)
+	{
+	  if (expr->left_hand_side_is_identifier_only ()
+	      && (id = expr->left_hand_side_id ()))
+	    {
+	      id->link_to_global ();
+
+	      if (! (skip_initializer || error_state))
+		expr->eval (false);
+	    }
+	  else
+	    error ("global: unable to make structure elements global");
+	}
+    }
 }
 
 void
 tree_global_command::eval (void)
 {
   if (init_list)
-    init_list->eval ();
+    {
+      init_list->eval (do_global_init, initialized);
+
+      initialized = true;
+    }
 
   if (error_state > 0)
     ::error ("evaluating global command near line %d, column %d",
 	     line (), column ());
 }
 
+// Static.
+
+static void
+do_static_init (tree_decl_elt& elt, bool)
+{
+  tree_identifier *id = elt.ident ();
+
+  if (id)
+    id->mark_as_static ();
+  else
+    {
+      tree_simple_assignment_expression *expr = elt.assign_expr ();
+
+      if (expr)
+	{
+	  if (expr->left_hand_side_is_identifier_only ()
+	      && (id = expr->left_hand_side_id ()))
+	    {
+	      id->mark_as_static ();
+
+	      if (! error_state)
+		expr->eval (false);
+	    }
+	  else
+	    error ("global: unable to make structure elements global");
+	}
+    }
+}
+
 void
-tree_global_command::accept (tree_walker& tw)
+tree_static_command::eval (void)
 {
-  tw.visit_global_command (*this);
+  // Static variables only need to be marked and initialized once.
+
+  if (init_list && ! initialized)
+    {
+      init_list->eval (do_static_init, initialized);
+
+      initialized = true;
+
+      if (error_state > 0)
+	::error ("evaluating static command near line %d, column %d",
+		 line (), column ());
+    }
 }
 
 // While.
 
 tree_while_command::~tree_while_command (void)
 {
   delete expr;
   delete list;
diff --git a/src/pt-cmd.h b/src/pt-cmd.h
--- a/src/pt-cmd.h
+++ b/src/pt-cmd.h
@@ -27,28 +27,30 @@ Software Foundation, 59 Temple Place - S
 #pragma interface
 #endif
 
 class ostream;
 
 class octave_value_list;
 
 class tree_statement_list;
-class tree_global_init_list;
+class tree_decl_init_list;
 class tree_if_command_list;
 class tree_switch_case_list;
 class tree_expression;
 class tree_index_expression;
 class tree_identifier;
 class tree_return_list;
 class octave_value;
 class symbol_record;
 
 class tree_command;
+class tree_decl_command;
 class tree_global_command;
+class tree_static_command;
 class tree_while_command;
 class tree_for_command;
 class tree_if_command;
 class tree_switch_command;
 class tree_try_catch_command;
 class tree_unwind_protect_command;
 class tree_no_op_command;
 class tree_break_command;
@@ -70,40 +72,84 @@ public:
 
   tree_command (int l = -1, int c = -1) : tree (l, c) { }
 
   virtual ~tree_command (void) { }
 
   virtual void eval (void) = 0;
 };
 
+// Base class for declaration commands -- global, static, etc.
+
 class
-tree_global_command : public tree_command
+tree_decl_command : public tree_command
+{
+public:
+
+  tree_decl_command (const string& n, int l = -1, int c = -1)
+    : tree_command (l, c), cmd_name (n), initialized (false), init_list (0) { }
+
+  tree_decl_command (const string& n, tree_decl_init_list *t,
+		     int l = -1, int c = -1)
+    : tree_command (l, c), cmd_name (n), initialized (false), init_list (t) { }
+
+  ~tree_decl_command (void);
+
+  tree_decl_init_list *initializer_list (void) { return init_list; }
+
+  void accept (tree_walker& tw);
+
+  string name (void) { return cmd_name; }
+
+protected:
+
+  // The name of this command -- global, static, etc.
+  string cmd_name;
+
+  // TRUE if this command has been evaluated.
+  bool initialized;
+
+  // The list of variables or initializers in this declaration command.
+  tree_decl_init_list *init_list;
+};
+
+// Global.
+
+class
+tree_global_command : public tree_decl_command
 {
 public:
 
   tree_global_command (int l = -1, int c = -1)
-    : tree_command (l, c), init_list (0) { }
+    : tree_decl_command ("global", l, c) { }
 
-  tree_global_command (tree_global_init_list *t, int l = -1, int c = -1)
-    : tree_command (l, c), init_list (t) { }
+  tree_global_command (tree_decl_init_list *t, int l = -1, int c = -1)
+    : tree_decl_command ("global", t, l, c) { }
 
-  ~tree_global_command (void);
+  ~tree_global_command (void) { }
 
   void eval (void);
+};
 
-  tree_global_init_list *initializer_list (void) { return init_list; }
+// Static.
 
-  void accept (tree_walker& tw);
+class
+tree_static_command : public tree_decl_command
+{
+public:
 
-private:
+  tree_static_command (int l = -1, int c = -1)
+    : tree_decl_command ("static", l, c) { }
 
-  // The list of global variables or initializers in this global
-  // command.
-  tree_global_init_list *init_list;
+  tree_static_command (tree_decl_init_list *t, int l = -1, int c = -1)
+    : tree_decl_command ("static", t, l, c) { }
+
+  ~tree_static_command (void) { }
+
+  void eval (void);
 };
 
 // While.
 
 class
 tree_while_command : public tree_command
 {
 public:
diff --git a/src/pt-fvc.cc b/src/pt-fvc.cc
--- a/src/pt-fvc.cc
+++ b/src/pt-fvc.cc
@@ -290,16 +290,23 @@ tree_identifier::do_lookup (bool& script
 void
 tree_identifier::link_to_global (void)
 {
   if (sym)
     link_to_global_variable (sym);
 }
 
 void
+tree_identifier::mark_as_static (void)
+{
+  if (sym)
+    sym->mark_as_static ();
+}
+
+void
 tree_identifier::mark_as_formal_parameter (void)
 {
   if (sym)
     sym->mark_as_formal_parameter ();
 }
 
 octave_value
 tree_identifier::eval (bool print)
diff --git a/src/pt-fvc.h b/src/pt-fvc.h
--- a/src/pt-fvc.h
+++ b/src/pt-fvc.h
@@ -76,16 +76,18 @@ public:
   void increment (void);
 
   void decrement (void);
 
   tree_fvc *do_lookup (bool& script_file_executed, bool exec_script = true);
 
   void link_to_global (void);
 
+  void mark_as_static (void);
+
   void mark_as_formal_parameter (void);
 
   void mark_for_possible_ans_assign (void)
     { maybe_do_ans_assign = true; }
 
   octave_value eval (bool print);
 
   octave_value_list eval (bool print, int nargout,
diff --git a/src/pt-misc.cc b/src/pt-misc.cc
--- a/src/pt-misc.cc
+++ b/src/pt-misc.cc
@@ -423,68 +423,48 @@ tree_return_list::~tree_return_list (voi
 }
 
 void
 tree_return_list::accept (tree_walker& tw)
 {
   tw.visit_return_list (*this);
 }
 
-// Global.
+// Declarations (global, static, etc.).
 
-tree_global::~tree_global (void)
+tree_decl_elt::~tree_decl_elt (void)
 {
   delete id;
   delete ass_expr;
 }
 
 void
-tree_global::eval (void)
+tree_decl_elt::accept (tree_walker& tw)
 {
-  if (id)
-    {
-      id->link_to_global ();
-    }
-  else if (ass_expr)
+  tw.visit_decl_elt (*this);
+}
+
+// Initializer lists for declaration statements.
+
+void
+tree_decl_init_list::eval (tree_decl_elt::eval_fcn f, bool skip_init)
+{
+  for (Pix p = first (); p != 0; next (p))
     {
-      tree_identifier *idnt = 0;
+      f (*(this->operator () (p)), skip_init);
 
-      if (ass_expr->left_hand_side_is_identifier_only ()
-	  && (idnt = ass_expr->left_hand_side_id ()))
-	{
-	  idnt->link_to_global ();
-	  ass_expr->eval (false);
-	}
-      else
-	error ("global: unable to make individual structure elements global");
+      if (error_state)
+	break;
     }
 }
 
 void
-tree_global::accept (tree_walker& tw)
-{
-  tw.visit_global (*this);
-}
-
-// Global initializer lists.
-
-void
-tree_global_init_list::eval (void)
+tree_decl_init_list::accept (tree_walker& tw)
 {
-  for (Pix p = first (); p != 0; next (p))
-    {
-      tree_global *t = this->operator () (p);
-      t->eval ();
-    }
-}
-
-void
-tree_global_init_list::accept (tree_walker& tw)
-{
-  tw.visit_global_init_list (*this);
+  tw.visit_decl_init_list (*this);
 }
 
 // If.
 
 tree_if_clause::~tree_if_clause (void)
 {
   delete expr;
   delete list;
diff --git a/src/pt-misc.h b/src/pt-misc.h
--- a/src/pt-misc.h
+++ b/src/pt-misc.h
@@ -40,18 +40,18 @@ class symbol_record;
 class symbol_table;
 
 class tree_statement;
 class tree_statement_list;
 class tree_argument_list;
 class tree_parameter_list;
 class tree_return_list;
 class tree_va_return_list;
-class tree_global;
-class tree_global_init_list;
+class tree_decl_elt;
+class tree_decl_init_list;
 class tree_if_clause;
 class tree_if_command_list;
 class tree_switch_case;
 class tree_switch_case_list;
 
 class tree_walker;
 
 #include <SLList.h>
@@ -249,75 +249,77 @@ tree_va_return_list : public SLList<octa
 {
 public:
 
   tree_va_return_list (void) : SLList<octave_value> () { }
 
   ~tree_va_return_list (void) { }
 };
 
-// List of expressions that make up a global statement.
+// List of expressions that make up a declaration statement.
 
 class
-tree_global
+tree_decl_elt
 {
 public:
 
-  tree_global (void)
+  typedef void (*eval_fcn) (tree_decl_elt &, bool);
+
+  tree_decl_elt (void)
     : id (0), ass_expr (0) { }
 
-  tree_global (tree_identifier *i)
+  tree_decl_elt (tree_identifier *i)
     : id (i), ass_expr (0) { }
 
-  tree_global (tree_simple_assignment_expression *ass)
+  tree_decl_elt (tree_simple_assignment_expression *ass)
     : id (0), ass_expr (ass) { }
 
-  ~tree_global (void);
+  ~tree_decl_elt (void);
 
   void eval (void);
 
   tree_identifier *ident (void) { return id; }
 
   tree_simple_assignment_expression *assign_expr (void) { return ass_expr; }
 
   void accept (tree_walker& tw);
 
 private:
 
   // Only one of id or ass_expr can be valid at once.
 
-  // An identifier to make global.
+  // An identifier to tag with the declared property.
   tree_identifier *id;
 
   // An assignemnt expression.  Valid only if the left hand side of
   // the assignment is a simple identifier.
   tree_simple_assignment_expression *ass_expr;
 };
 
 class
-tree_global_init_list : public SLList<tree_global *>
+tree_decl_init_list : public SLList<tree_decl_elt *>
 {
 public:
 
-  tree_global_init_list (void)
-    : SLList<tree_global *> () { }
+  tree_decl_init_list (void)
+    : SLList<tree_decl_elt *> () { }
 
-  tree_global_init_list (tree_global *t)
-    : SLList<tree_global *> () { append (t); }
+  tree_decl_init_list (tree_decl_elt *t)
+    : SLList<tree_decl_elt *> () { append (t); }
 
-  ~tree_global_init_list (void)
+  ~tree_decl_init_list (void)
     {
       while (! empty ())
 	{
-	  tree_global *t = remove_front ();
+	  tree_decl_elt *t = remove_front ();
 	  delete t;
 	}
     }
 
-  void eval (void);
+  void eval (tree_decl_elt::eval_fcn, bool);
 
   void accept (tree_walker& tw);
 };
 
 class
 tree_if_clause
 {
 public:
diff --git a/src/pt-pr-code.cc b/src/pt-pr-code.cc
--- a/src/pt-pr-code.cc
+++ b/src/pt-pr-code.cc
@@ -137,16 +137,64 @@ void
 tree_print_code::visit_continue_command (tree_continue_command&)
 {
   indent ();
 
   os << "continue";
 }
 
 void
+tree_print_code::visit_decl_command (tree_decl_command& cmd)
+{
+  indent ();
+
+  os << cmd.name () << " ";
+
+  tree_decl_init_list *init_list = cmd.initializer_list ();
+
+  if (init_list)
+    init_list->accept (*this);
+}
+
+void
+tree_print_code::visit_decl_elt (tree_decl_elt& cmd)
+{
+  tree_identifier *id = cmd.ident ();
+
+  if (id)
+    id->accept (*this);
+
+  tree_simple_assignment_expression *ass_expr = cmd.assign_expr ();
+
+  if (ass_expr)
+    ass_expr->accept (*this);
+}
+
+void
+tree_print_code::visit_decl_init_list (tree_decl_init_list& lst)
+{
+  Pix p = lst.first ();
+
+  while (p)
+    {
+      tree_decl_elt *elt = lst (p);
+
+      lst.next (p);
+
+      if (elt)
+	{
+	  elt->accept (*this);
+
+	  if (p)
+	    os << ", ";
+	}
+    }
+}
+
+void
 tree_print_code::visit_for_command (tree_for_command& cmd)
 {
   indent ();
 
   os << "for ";
 
   tree_index_expression *id = cmd.ident ();
 
@@ -273,64 +321,16 @@ tree_print_code::visit_function_trailer 
   indent ();
 
   os << "endfunction";
 
   newline ();
 }
 
 void
-tree_print_code::visit_global (tree_global& cmd)
-{
-  tree_identifier *id = cmd.ident ();
-
-  if (id)
-    id->accept (*this);
-
-  tree_simple_assignment_expression *ass_expr = cmd.assign_expr ();
-
-  if (ass_expr)
-    ass_expr->accept (*this);
-}
-
-void
-tree_print_code::visit_global_command (tree_global_command& cmd)
-{
-  indent ();
-
-  os << "global ";
-
-  tree_global_init_list *init_list = cmd.initializer_list ();
-
-  if (init_list)
-    init_list->accept (*this);
-}
-
-void
-tree_print_code::visit_global_init_list (tree_global_init_list& lst)
-{
-  Pix p = lst.first ();
-
-  while (p)
-    {
-      tree_global *elt = lst (p);
-
-      lst.next (p);
-
-      if (elt)
-	{
-	  elt->accept (*this);
-
-	  if (p)
-	    os << ", ";
-	}
-    }
-}
-
-void
 tree_print_code::visit_identifier (tree_identifier& id)
 {
   indent ();
 
   bool in_parens = id.is_in_parens ();
 
   if (in_parens)
     os << "(";
@@ -408,87 +408,16 @@ tree_print_code::visit_if_command_list (
 	}
 
       first_elt = false;
       lst.next (p);
     }
 }
 
 void
-tree_print_code::visit_switch_case (tree_switch_case& cs)
-{
-  indent ();
-
-  if (cs.is_default_case ())
-    os << "otherwise";
-  else
-    os << "case ";
-
-  tree_expression *label = cs.case_label ();
-
-  if (label)
-    label->accept (*this);
-
-  newline ();
-
-  increment_indent_level ();
-
-  tree_statement_list *list = cs.commands ();
-
-  if (list)
-    {
-      list->accept (*this);
-
-      decrement_indent_level ();
-    }
-}
-
-void
-tree_print_code::visit_switch_case_list (tree_switch_case_list& lst)
-{
-  Pix p = lst.first ();
-
-  while (p)
-    {
-      tree_switch_case *elt = lst (p);
-
-      if (elt)
-	elt->accept (*this);
-
-      lst.next (p);
-    }
-}
-
-void
-tree_print_code::visit_switch_command (tree_switch_command& cmd)
-{
-  indent ();
-
-  os << "switch ";
-
-  tree_expression *expr = cmd.switch_value ();
-
-  if (expr)
-    expr->accept (*this);
-
-  newline ();
-
-  increment_indent_level ();
-
-  tree_switch_case_list *list = cmd.case_list ();
-
-  if (list)
-    list->accept (*this);
-
-  indent ();
-
-  os << "endswitch";
-}
-
-void
 tree_print_code::visit_index_expression (tree_index_expression& expr)
 {
   indent ();
 
   bool in_parens = expr.is_in_parens ();
 
   if (in_parens)
     os << "(";
@@ -1000,16 +929,87 @@ tree_print_code::visit_subplot_using (su
       tree_expression *scanf_fmt = cmd.scanf_format ();
 
       if (scanf_fmt)
 	scanf_fmt->accept (*this);
     }
 }
 
 void
+tree_print_code::visit_switch_case (tree_switch_case& cs)
+{
+  indent ();
+
+  if (cs.is_default_case ())
+    os << "otherwise";
+  else
+    os << "case ";
+
+  tree_expression *label = cs.case_label ();
+
+  if (label)
+    label->accept (*this);
+
+  newline ();
+
+  increment_indent_level ();
+
+  tree_statement_list *list = cs.commands ();
+
+  if (list)
+    {
+      list->accept (*this);
+
+      decrement_indent_level ();
+    }
+}
+
+void
+tree_print_code::visit_switch_case_list (tree_switch_case_list& lst)
+{
+  Pix p = lst.first ();
+
+  while (p)
+    {
+      tree_switch_case *elt = lst (p);
+
+      if (elt)
+	elt->accept (*this);
+
+      lst.next (p);
+    }
+}
+
+void
+tree_print_code::visit_switch_command (tree_switch_command& cmd)
+{
+  indent ();
+
+  os << "switch ";
+
+  tree_expression *expr = cmd.switch_value ();
+
+  if (expr)
+    expr->accept (*this);
+
+  newline ();
+
+  increment_indent_level ();
+
+  tree_switch_case_list *list = cmd.case_list ();
+
+  if (list)
+    list->accept (*this);
+
+  indent ();
+
+  os << "endswitch";
+}
+
+void
 tree_print_code::visit_try_catch_command (tree_try_catch_command& cmd)
 {
   indent ();
 
   os << "try_catch";
 
   newline ();
 
diff --git a/src/pt-pr-code.h b/src/pt-pr-code.h
--- a/src/pt-pr-code.h
+++ b/src/pt-pr-code.h
@@ -51,44 +51,38 @@ public:
   void visit_break_command (tree_break_command&);
 
   void visit_builtin (tree_builtin&);
 
   void visit_colon_expression (tree_colon_expression&);
 
   void visit_continue_command (tree_continue_command&);
 
+  void visit_decl_command (tree_decl_command&);
+
+  void visit_decl_elt (tree_decl_elt&);
+
+  void visit_decl_init_list (tree_decl_init_list&);
+
   void visit_for_command (tree_for_command&);
 
   void visit_function (tree_function&);
 
   void visit_function_header (tree_function&);
 
   void visit_function_trailer (tree_function&);
 
-  void visit_global (tree_global&);
-
-  void visit_global_command (tree_global_command&);
-
-  void visit_global_init_list (tree_global_init_list&);
-
   void visit_identifier (tree_identifier&);
 
   void visit_if_clause (tree_if_clause&);
 
   void visit_if_command (tree_if_command&);
 
   void visit_if_command_list (tree_if_command_list&);
 
-  void visit_switch_case (tree_switch_case&);
-
-  void visit_switch_case_list (tree_switch_case_list&);
-
-  void visit_switch_command (tree_switch_command&);
-
   void visit_index_expression (tree_index_expression&);
 
   void visit_indirect_ref (tree_indirect_ref&);
 
   void visit_matrix (tree_matrix&);
 
   void visit_matrix_row (tree_matrix_row&);
 
@@ -125,16 +119,22 @@ public:
   void visit_subplot (subplot&);
 
   void visit_subplot_list (subplot_list&);
 
   void visit_subplot_style (subplot_style&);
 
   void visit_subplot_using (subplot_using&);
 
+  void visit_switch_case (tree_switch_case&);
+
+  void visit_switch_case_list (tree_switch_case_list&);
+
+  void visit_switch_command (tree_switch_command&);
+
   void visit_try_catch_command (tree_try_catch_command&);
 
   void visit_unary_expression (tree_unary_expression&);
 
   void visit_unwind_protect_command (tree_unwind_protect_command&);
 
   void visit_while_command (tree_while_command&);
 
diff --git a/src/pt-walk.h b/src/pt-walk.h
--- a/src/pt-walk.h
+++ b/src/pt-walk.h
@@ -52,31 +52,31 @@ public:
 
   virtual void
   visit_colon_expression (tree_colon_expression&) = 0;
 
   virtual void
   visit_continue_command (tree_continue_command&) = 0;
 
   virtual void
+  visit_decl_command (tree_decl_command&) = 0;
+
+  virtual void
+  visit_decl_elt (tree_decl_elt&) = 0;
+
+  virtual void
+  visit_decl_init_list (tree_decl_init_list&) = 0;
+
+  virtual void
   visit_for_command (tree_for_command&) = 0;
 
   virtual void
   visit_function (tree_function&) = 0;
 
   virtual void
-  visit_global (tree_global&) = 0;
-
-  virtual void
-  visit_global_command (tree_global_command&) = 0;
-
-  virtual void
-  visit_global_init_list (tree_global_init_list&) = 0;
-
-  virtual void
   visit_identifier (tree_identifier&) = 0;
 
   virtual void
   visit_if_clause (tree_if_clause&) = 0;
 
   virtual void
   visit_if_command (tree_if_command&) = 0;
 
diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -232,16 +232,17 @@ symbol_record::symbol_record (const stri
   next_elem = nxt;
 }
 
 void
 symbol_record::init_state (void)
 {
   formal_param = 0;
   linked_to_global = 0;
+  tagged_static = 0;
   sv_fcn = 0;
   definition = 0;
   next_elem = 0;
 }
 
 string
 symbol_record::name (void) const
 {
@@ -542,17 +543,17 @@ symbol_record::clear (void)
 {
   int count = 0;
   if (linked_to_global)
     {
       count = maybe_delete (definition);
       definition = 0;
       linked_to_global = 0;
     }
-  else
+  else if (! tagged_static)
     {
       symbol_def *old_def = pop_def ();
       count = maybe_delete (old_def);
     }
   return count;
 }
 
 void
@@ -592,16 +593,33 @@ symbol_record::mark_as_linked_to_global 
 }
 
 int
 symbol_record::is_linked_to_global (void) const
 {
   return linked_to_global;
 }
 
+void
+symbol_record::mark_as_static (void)
+{
+  if (is_linked_to_global ())
+    error ("can't make global variable static");
+  else if (is_formal_parameter ())
+    error ("can't make formal parameter static");
+  else
+    tagged_static = 1;
+}
+
+int
+symbol_record::is_static (void) const
+{
+  return tagged_static;
+}
+
 octave_value
 symbol_record::variable_value (void) const
 {
   octave_value retval;
 
   if (is_variable ())
     {
       tree_constant *tmp = static_cast<tree_constant *> (def ());
@@ -644,21 +662,24 @@ void
 symbol_record::chain (symbol_record *s)
 {
   next_elem = s;
 }
 
 void
 symbol_record::push_context (void)
 {
-  context.push (definition);
-  definition = 0;
+  if (! is_static ())
+    {
+      context.push (definition);
+      definition = 0;
 
-  global_link_context.push (static_cast<unsigned> (linked_to_global));
-  linked_to_global = 0;
+      global_link_context.push (static_cast<unsigned> (linked_to_global));
+      linked_to_global = 0;
+    }
 }
 
 void
 symbol_record::pop_context (void)
 {
   // It is possible for context to be empty if new symbols have been
   // inserted in the symbol table during recursive calls.  This can
   // happen as a result of calls to eval() and feval().
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -175,30 +175,34 @@ public:
   void alias (symbol_record *s, int force = 0);
 
   void mark_as_formal_parameter (void);
   int is_formal_parameter (void) const;
 
   void mark_as_linked_to_global (void);
   int is_linked_to_global (void) const;
 
+  void mark_as_static (void);
+  int is_static (void) const;
+
   octave_value variable_value (void) const;
   octave_value& variable_reference (void);
 
   symbol_record *next (void) const;
 
   void chain (symbol_record *s);
 
   void push_context (void);
   void pop_context (void);
 
 private:
 
   unsigned formal_param : 1;
   unsigned linked_to_global : 1;
+  unsigned tagged_static : 1;
 
   string nm;
   sv_Function sv_fcn;
   symbol_def *definition;
   symbol_record *next_elem;
 
 // This should maybe be one stack with a structure containing all the
 // items we need to save for recursive calls...
diff --git a/src/variables.cc b/src/variables.cc
--- a/src/variables.cc
+++ b/src/variables.cc
@@ -951,16 +951,22 @@ link_to_global_variable (symbol_record *
   symbol_record *gsr = global_sym_tab->lookup (nm, 1, 0);
 
   if (sr->is_formal_parameter ())
     {
       error ("can't make function parameter `%s' global", nm.c_str ());
       return;
     }
 
+  if (sr->is_static ())
+    {
+      error ("can't make static variable `%s' global", nm.c_str ());
+      return;
+    }
+
   // There must be a better way to do this.   XXX FIXME XXX
 
   if (sr->is_variable ())
     {
       // Would be nice not to have this cast.  XXX FIXME XXX
 
       tree_constant *tmp = (tree_constant *) sr->def ();
       if (tmp)
