# HG changeset patch
# User jwe
# Date 795501616 0
#      Sat Mar 18 04:40:16 1995 +0000
# Node ID 9963da2d37554ed6f8153d7f84032cea5fbda1dd
# Parent  95a92c971e1ef21e6b31b876f62a2414934163ac
[project @ 1995-03-18 04:40:11 by jwe]

diff --git a/src/pt-const.cc b/src/pt-const.cc
--- a/src/pt-const.cc
+++ b/src/pt-const.cc
@@ -32,24 +32,21 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "gripes.h"
 #include "user-prefs.h"
 #include "oct-map.h"
 
 // The following three variables could be made static members of the
 // tree_constant class.
 
 // Pointer to the blocks of memory we manage.
-static tree_constant *newlist;
+static tree_constant *newlist = 0;
 
 // Multiplier for allocating new blocks.
 static const int newlist_grow_size = 128;
 
-// Pointer to the last element of the last block allocated.
-static tree_constant *newlist_tail = 0;
-
 Octave_map
 tree_constant::map_value (void) const
 {
   return rep->map_value ();
 }
 
 tree_constant::~tree_constant (void)
 {
@@ -74,21 +71,16 @@ tree_constant::operator new (size_t size
     {
       int block_size = newlist_grow_size * sizeof (tree_constant);
       newlist = (tree_constant *) new char [block_size];
 
       for (int i = 0; i < newlist_grow_size - 1; i++)
 	newlist[i].freeptr = &newlist[i+1];
 
       newlist[i].freeptr = 0;
-
-      if (newlist_tail)
-	newlist_tail->freeptr = newlist;
-
-      newlist_tail = &newlist[i];
     }
 
   tree_constant *tmp = newlist;
   newlist = newlist->freeptr;
   return tmp;
 }
 
 void
diff --git a/src/tc-rep.cc b/src/tc-rep.cc
--- a/src/tc-rep.cc
+++ b/src/tc-rep.cc
@@ -48,24 +48,21 @@ Software Foundation, 675 Mass Ave, Cambr
 #include "oct-map.h"
 
 #include "tc-inlines.h"
 
 // The following three variables could be made static members of the
 // TC_REP class.
 
 // Pointer to the blocks of memory we manage.
-static TC_REP *newlist;
+static TC_REP *newlist = 0;
 
 // Multiplier for allocating new blocks.
 static const int newlist_grow_size = 128;
 
-// Pointer to the last element of the last block allocated.
-static TC_REP *newlist_tail = 0;
-
 static int
 any_element_is_complex (const ComplexMatrix& a)
 {
   int nr = a.rows ();
   int nc = a.columns ();
   for (int j = 0; j < nc; j++)
     for (int i = 0; i < nr; i++)
       if (imag (a.elem (i, j)) != 0.0)
@@ -467,21 +464,16 @@ TC_REP::operator new (size_t size)
     {
       int block_size = newlist_grow_size * sizeof (TC_REP);
       newlist = (TC_REP *) new char [block_size];
 
       for (int i = 0; i < newlist_grow_size - 1; i++)
 	newlist[i].freeptr = &newlist[i+1];
 
       newlist[i].freeptr = 0;
-
-      if (newlist_tail)
-	newlist_tail->freeptr = newlist;
-
-      newlist_tail = &newlist[i];
     }
 
   TC_REP *tmp = newlist;
   newlist = newlist->freeptr;
   return tmp;
 }
 
 void
