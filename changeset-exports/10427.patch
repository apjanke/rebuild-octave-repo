# HG changeset patch
# User Soren Hauberg <hauberg@gmail.com>
# Date 1269120363 25200
#      Sat Mar 20 14:26:03 2010 -0700
# Node ID 62bb59f927b1456fc9d896dacc09a02f006ea761
# Parent  4db7beace28ef5e6b5c2c0a467dd569521990aab
scripts/general/interp2.m, scripts/general/interpn.m: For nearest neighbour interpolation ceil (instead of floor) at the center of the data intervals to be compatible with Matlab. Add test.

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,15 @@
+2010-03-20  Soren Hauberg  <hauberg@gmail.com>
+
+	* general/interp2.m: For nearest neighbour interpolation ceil (instead of
+    floor) at the center of the data intervals to be compatible with Matlab.
+    Add test.
+	* general/interpn.m: Ditto.
+
 2010-03-19  Jaroslav Hajek  <highegg@gmail.com>
 
 	* strings/strmatch.m (strtrimr): Rewrite for correct behavior.
 	Add test.
 
 2010-03-18  Petr Mikulik <mikulik@physics.muni.cz>
 
 	* /plot/print.m: Add '-append' option.
diff --git a/scripts/general/interp2.m b/scripts/general/interp2.m
--- a/scripts/general/interp2.m
+++ b/scripts/general/interp2.m
@@ -226,18 +226,18 @@ function ZI = interp2 (varargin)
       idx = sub2ind (size (a), yidx, xidx);
       ## We can dispose of the 1D indices at this point to save memory.
       clear xidx yidx
 
       ## apply plane equation
       ZI = a(idx) + b(idx).*Xsc + c(idx).*Ysc + d(idx).*Xsc.*Ysc;
 
     elseif (strcmp (method, "nearest"))
-      ii = (XI - X(xidx) > X(xidx + 1) - XI);
-      jj = (YI - Y(yidx) > Y(yidx + 1) - YI);
+      ii = (XI - X(xidx) >= X(xidx + 1) - XI);
+      jj = (YI - Y(yidx) >= Y(yidx + 1) - YI);
       idx = sub2ind (size (Z), yidx+jj, xidx+ii);
       ZI = Z(idx);
 
     elseif (strcmp (method, "pchip"))
 
       if (length (X) < 2 || length (Y) < 2)
 	error ("interp2: pchip2 requires at least 2 points in each dimension")
       endif
@@ -576,8 +576,12 @@ endfunction
 
 %!test % for values at boundaries
 %!  A=[1,2;3,4];
 %!  x=[0,1]; 
 %!  y=[2,3]';
 %!  assert(interp2(x,y,A,x,y,'linear'), A);
 %!  assert(interp2(x,y,A,x,y,'nearest'), A);
 
+%!test % for Matlab-compatible rounding for 'nearest'
+%! X = meshgrid (1:4);
+%! assert (interp2 (X, 2.5, 2.5, 'nearest'), 3);
+
diff --git a/scripts/general/interpn.m b/scripts/general/interpn.m
--- a/scripts/general/interpn.m
+++ b/scripts/general/interpn.m
@@ -144,17 +144,17 @@ function vi = interpn (varargin)
     yshape = size (y{1});
     yidx = cell (1, nd);
     for i = 1 : nd
       y{i} = y{i}(:);
       yidx{i} = lookup (x{i}, y{i}, "lr");
     endfor
     idx = cell (1,nd);
     for i = 1 : nd
-      idx{i} = yidx{i} + (y{i} - x{i}(yidx{i}) > x{i}(yidx{i} + 1) - y{i});
+      idx{i} = yidx{i} + (y{i} - x{i}(yidx{i}) >= x{i}(yidx{i} + 1) - y{i});
     endfor
     vi = v (sub2ind (sz, idx{:}));
     idx = zeros (prod(yshape),1);
     for i = 1 : nd
       idx |= y{i} < min (x{i}(:)) | y{i} > max (x{i}(:));
     endfor
     vi(idx) = extrapval;
     vi = reshape (vi, yshape); 
@@ -251,8 +251,13 @@ endfunction
 %! assert (interpn(x,y,z,f,x,y,z), f)
 %! assert (interpn(x,y,z,f,x,y,z,'nearest'), f)
 %! assert (interpn(x,y,z,f,x,y,z,'spline'), f)
 
 %!test
 %! [x,y,z] = ndgrid(0:2);
 %! f = x.^2+y.^2+z.^2;
 %! assert (interpn(x,y,-z,f,1.5,1.5,-1.5), 7.5)
+
+%!test % for Matlab-compatible rounding for 'nearest'
+%! X = meshgrid (1:4);
+%! assert (interpn (X, 2.5, 2.5, 'nearest'), 3);
+
