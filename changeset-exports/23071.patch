# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1484792292 18000
#      Wed Jan 18 21:18:12 2017 -0500
# Node ID dcbd2ceadff123b94f82b26dbc394527fa4b4a7f
# Parent  bef714f45999083684066195af38e810970fda4a
warn about shadowed functions when reporting index errors (bug #48652)

* pt-idx.cc (final_index_error): Also display a note if the indexed
variable name shadows a function definition.

diff --git a/libinterp/parse-tree/pt-idx.cc b/libinterp/parse-tree/pt-idx.cc
--- a/libinterp/parse-tree/pt-idx.cc
+++ b/libinterp/parse-tree/pt-idx.cc
@@ -267,21 +267,38 @@ tree_index_expression::rvalue (int nargo
 
 // Final step of processing an indexing error.  Add the name of the
 // variable being indexed, if any, then issue an error.  (Will this also
 // be needed by pt-lvalue, which calls subsref?)
 
 static void
 final_index_error (octave::index_exception& e, const tree_expression *expr)
 {
+  std::string extra_message;
+
   if (expr->is_identifier ()
       && dynamic_cast<const tree_identifier *> (expr)->is_variable ())
-    e.set_var (expr->name ());
+    {
+      std::string var = expr->name ();
+
+      e.set_var (var);
+
+      octave_value fcn = symbol_table::find_function (var);
 
-  std::string msg = e.message ();
+      if (fcn.is_function ())
+        {
+          octave_function *fp = fcn.function_value ();
+
+          if (fp && fp->name () == var)
+            extra_message = " (note: variable '" + var + "' shadows function)";
+        }
+    }
+
+  std::string msg = e.message () + extra_message;
+
   error_with_id (e.err_id (), msg.c_str ());
 }
 
 octave_value_list
 tree_index_expression::rvalue (int nargout,
                                const std::list<octave_lvalue> *lvalue_list)
 {
   octave_value_list retval;
