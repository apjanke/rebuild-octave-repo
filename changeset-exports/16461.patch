# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1365352567 14400
#      Sun Apr 07 12:36:07 2013 -0400
# Node ID 094bd3627eadef2a2e07413b0c8426e00ac9b84e
# Parent  4d4e7c6f839dd0fffaa7b4a2037fc472cbe0998f
move common functionality to octave_dock_widget base class

* octave-dock-widget.h (octave_dock_widget::handle_visibility,
octave_dock_widget::connect_visibility_changed,
octave_dock_widget::focus): New virtual functions.

* documentation-dock-widget.cc, documentation-dock-widget.h,
files-dock-widget.cc, files-dock-widget.h, history-dock-widget.cc,
history-dock-widget.h, terminal-dock-widget.cc,
terminal-dock-widget.h: Inherit handle_visibility,
connect_visibility_changed, and focus methods.

diff --git a/libgui/src/documentation-dock-widget.cc b/libgui/src/documentation-dock-widget.cc
--- a/libgui/src/documentation-dock-widget.cc
+++ b/libgui/src/documentation-dock-widget.cc
@@ -32,33 +32,8 @@ documentation_dock_widget::documentation
   setObjectName ("DocumentationDockWidget");
   setWindowIcon (QIcon (":/actions/icons/logo.png"));
   setWindowTitle (tr ("Documentation"));
   setStatusTip (tr ("See the documentation for help."));
 
   _webinfo = new webinfo (this);
   setWidget (_webinfo);
 }
-
-void
-documentation_dock_widget::connect_visibility_changed (void)
-{
-  connect (this, SIGNAL (visibilityChanged (bool)),
-           this, SLOT (handle_visibility (bool)));
-}
-
-void
-documentation_dock_widget::focus (void)
-{
-  if (! isVisible ())
-    setVisible (true);
-
-  setFocus ();
-  activateWindow ();
-  raise ();
-}
-
-void
-documentation_dock_widget::handle_visibility (bool visible)
-{
-  if (visible && ! isFloating ())
-    focus ();
-}
diff --git a/libgui/src/documentation-dock-widget.h b/libgui/src/documentation-dock-widget.h
--- a/libgui/src/documentation-dock-widget.h
+++ b/libgui/src/documentation-dock-widget.h
@@ -30,22 +30,14 @@ along with Octave; see the file COPYING.
 class documentation_dock_widget : public octave_dock_widget
 {
   Q_OBJECT
 
 public:
 
   documentation_dock_widget (QWidget *parent = 0);
 
-  void connect_visibility_changed (void);
-
-public slots:
-
-  void focus (void);
-
-  void handle_visibility (bool);
-
 private:
 
   webinfo *_webinfo;
 };
 
 #endif // DOCUMENTATIONDOCKWIDGET_H
diff --git a/libgui/src/files-dock-widget.cc b/libgui/src/files-dock-widget.cc
--- a/libgui/src/files-dock-widget.cc
+++ b/libgui/src/files-dock-widget.cc
@@ -131,23 +131,16 @@ files_dock_widget::~files_dock_widget ()
   Qt::SortOrder sort_order = _file_tree_view->header ()->sortIndicatorOrder ();
   settings->setValue ("filesdockwidget/sort_files_by_column", sort_column);
   settings->setValue ("filesdockwidget/sort_files_by_order", sort_order);
   settings->setValue ("filesdockwidget/column_state", _file_tree_view->header ()->saveState ());
   settings->sync ();
 }
 
 void
-files_dock_widget::connect_visibility_changed (void)
-{
-  connect (this, SIGNAL (visibilityChanged (bool)),
-           this, SLOT (handle_visibility (bool)));
-}
-
-void
 files_dock_widget::item_double_clicked (const QModelIndex& index)
 {
   // Retrieve the file info associated with the model index.
   QFileInfo fileInfo = _file_system_model->fileInfo (index);
 
   set_current_directory (fileInfo.absoluteFilePath ());
 }
 
@@ -206,27 +199,8 @@ files_dock_widget::notice_settings (cons
   _file_tree_view->setColumnHidden (2, !settings->value ("showFileType",false).toBool ());
   _file_tree_view->setColumnHidden (3, !settings->value ("showLastModified",false).toBool ());
   _file_tree_view->setAlternatingRowColors (settings->value ("useAlternatingRowColors",true).toBool ());
   if (settings->value ("showHiddenFiles",false).toBool ())
     {
       // TODO: React on option for hidden files.
     }
 }
-
-void
-files_dock_widget::focus (void)
-{
-  if (! isVisible ())
-    setVisible (true);
-
-  setFocus ();
-  activateWindow ();
-  raise ();
-}
-
-void
-files_dock_widget::handle_visibility (bool visible)
-{
-  if (visible && ! isFloating ())
-    focus ();
-}
-
diff --git a/libgui/src/files-dock-widget.h b/libgui/src/files-dock-widget.h
--- a/libgui/src/files-dock-widget.h
+++ b/libgui/src/files-dock-widget.h
@@ -48,18 +48,16 @@ class files_dock_widget : public octave_
   Q_OBJECT
 
 public:
 
   files_dock_widget (QWidget *parent = 0);
 
   ~files_dock_widget ();
 
-  void connect_visibility_changed (void);
-
 public slots:
 
   /** Slot for handling a change in directory via double click. */
   void item_double_clicked (const QModelIndex & index);
 
   /** Slot for handling the up-directory button in the toolbar. */
   void change_directory_up ();
 
@@ -69,30 +67,26 @@ public slots:
   /** Accepts user input a the line edit for the current directory. */
   void accept_directory_line_edit ();
 
   void display_directory (const QString& dir);
 
   /** Tells the widget to react on changed settings. */
   void notice_settings (const QSettings *settings);
 
-  void focus (void);
+signals:
 
-  void handle_visibility (bool visible);
-
-signals:
   /** Emitted, whenever the user requested to open a file. */
   void open_file (const QString& fileName);
 
   /** Emitted, whenever the currently displayed directory changed. */
   void displayed_directory_changed (const QString& dir);
 
-protected:
+private:
 
-private:
   // TODO: Add toolbar with buttons for navigating the path, creating dirs, etc
 
   /** Toolbar for file and directory manipulation. */
   QToolBar *        _navigation_tool_bar;
 
   /** Variables for the up-directory action. */
   QIcon             _directory_icon;
   QAction *         _directory_up_action;
diff --git a/libgui/src/history-dock-widget.cc b/libgui/src/history-dock-widget.cc
--- a/libgui/src/history-dock-widget.cc
+++ b/libgui/src/history-dock-widget.cc
@@ -49,23 +49,16 @@ history_dock_widget::history_dock_widget
 
   connect (this, SIGNAL (command_double_clicked (const QString&)),
            p, SLOT (handle_command_double_clicked (const QString&)));
 
   construct ();
 }
 
 void
-history_dock_widget::connect_visibility_changed (void)
-{
-  connect (this, SIGNAL (visibilityChanged (bool)),
-           this, SLOT (handle_visibility (bool)));
-}
-
-void
 history_dock_widget::construct ()
 {
   _history_model = new QStringListModel ();
   _sort_filter_proxy_model.setSourceModel (_history_model);
   _history_list_view = new QListView (this);
   _history_list_view->setModel (&_sort_filter_proxy_model);
   _history_list_view->setAlternatingRowColors (true);
   _history_list_view->setEditTriggers (QAbstractItemView::NoEditTriggers);
@@ -171,27 +164,8 @@ history_dock_widget::append_history (con
   _history_list_view->scrollToBottom ();
 }
 
 void
 history_dock_widget::clear_history (void)
 {
   _history_model->setStringList (QStringList ());
 }
-
-void
-history_dock_widget::focus (void)
-{
-  if (! isVisible ())
-    setVisible (true);
-
-  setFocus ();
-  activateWindow ();
-  raise ();
-}
-
-void
-history_dock_widget::handle_visibility (bool visible)
-{
-  if (visible && ! isFloating ())
-    focus ();
-}
-
diff --git a/libgui/src/history-dock-widget.h b/libgui/src/history-dock-widget.h
--- a/libgui/src/history-dock-widget.h
+++ b/libgui/src/history-dock-widget.h
@@ -32,27 +32,22 @@ along with Octave; see the file COPYING.
 class history_dock_widget : public octave_dock_widget
 {
   Q_OBJECT
 
 public:
 
   history_dock_widget (QWidget *parent = 0);
 
-  void connect_visibility_changed (void);
-
 public slots:
 
   void set_history (const QStringList& hist);
   void append_history (const QString& hist_entry);
   void clear_history (void);
 
-  void focus (void);
-  void handle_visibility (bool);
-
 signals:
 
   void information (const QString& message);
 
   /** Emitted, whenever the user double-clicked a command in the history. */
   void command_double_clicked (const QString& command);
 
   /** Emitted whenever the user selects command and chooses Create
diff --git a/libgui/src/octave-dock-widget.h b/libgui/src/octave-dock-widget.h
--- a/libgui/src/octave-dock-widget.h
+++ b/libgui/src/octave-dock-widget.h
@@ -15,67 +15,93 @@ FITNESS FOR A PARTICULAR PURPOSE.  See t
 for more details.
 
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
-#ifndef OCTAVEDOCKWIDGET_H
-#define OCTAVEDOCKWIDGET_H
+#if !defined (octave_dock_widget_h)
+#define octave_dock_widget_h 1
 
 #include <QDockWidget>
-//#include <QMenu>
-//#include <QToolBar>
 
 class octave_dock_widget : public QDockWidget
 {
   Q_OBJECT
 
-  public:
+public:
+
   octave_dock_widget (QWidget *p)
     : QDockWidget (p)
   {
     connect (this, SIGNAL (visibilityChanged (bool)),
              this, SLOT (handle_visibility_changed (bool)));
 
-    connect (this, SIGNAL (topLevelChanged(bool)),
-             this, SLOT(top_level_changed(bool)));
+    connect (this, SIGNAL (topLevelChanged (bool)),
+             this, SLOT (top_level_changed (bool)));
   }
 
   virtual ~octave_dock_widget () { }
 
+  virtual void connect_visibility_changed (void)
+  {
+    connect (this, SIGNAL (visibilityChanged (bool)),
+             this, SLOT (handle_visibility (bool)));
+  }
+
 signals:
-  /** Custom signal that tells if a user has clicked away
+
+  /** Custom signal that tells whether a user has clicked away
    *  that dock widget, i.e the active dock widget has
    *  changed. */
   void active_changed (bool active);
 
 protected:
+
   virtual void closeEvent (QCloseEvent *e)
   {
     emit active_changed (false);
     QDockWidget::closeEvent (e);
   }
 
+public slots:
+
+  virtual void focus (void)
+  {
+    if (! isVisible ())
+      setVisible (true);
+
+    setFocus ();
+    activateWindow ();
+    raise ();
+  }
+
+  virtual void handle_visibility (bool visible)
+  {
+    if (visible && ! isFloating ())
+      focus ();
+  }
+
 protected slots:
 
   /** Slot to steer changing visibility from outside. */
   virtual void handle_visibility_changed (bool visible)
   {
     if (visible)
       emit active_changed (true);
   }
 
   /** Slot when floating property changes */
   virtual void top_level_changed (bool floating)
   {
-    if(floating)
+    if (floating)
       {
-        setWindowFlags(Qt::Window);  // make a window from the widget when floating
-        show();                      // make it visible again since setWindowFlags hides it
+        // Make a window from the widget when floating and make it
+        // visible again since setWindowFlags hides it.
+        setWindowFlags (Qt::Window);
+        show();
       }
   }
-
 };
 
-#endif // OCTAVEDOCKWIDGET_H
+#endif
diff --git a/libgui/src/terminal-dock-widget.cc b/libgui/src/terminal-dock-widget.cc
--- a/libgui/src/terminal-dock-widget.cc
+++ b/libgui/src/terminal-dock-widget.cc
@@ -42,68 +42,32 @@ terminal_dock_widget::terminal_dock_widg
            this, SLOT (notice_settings (const QSettings *)));
 
   connect (this, SIGNAL (visibilityChanged (bool)),
            this, SLOT (handle_visibility (bool)));
 
   connect (parent (), SIGNAL (relay_command_signal (const QString&)),
            this, SLOT (relay_command (const QString&)));
 
-  // topLevelChanged is emitted when floating property changes (floating
-  // = true)
-  connect (this, SIGNAL (topLevelChanged (bool)),
-           this, SLOT (top_level_changed (bool)));
-
   // Forward signals to QTerminal widget.
 
   connect (this, SIGNAL (notice_settings_signal (const QSettings *)),
            &terminal, SLOT (notice_settings (const QSettings *)));
 
   connect (this, SIGNAL (relay_command_signal (const QString&)),
            &terminal, SLOT (relay_command (const QString&)));
 
   connect (this, SIGNAL (copyClipboard_signal (void)),
            &terminal, SLOT (copyClipboard (void)));
 
   connect (this, SIGNAL (pasteClipboard_signal (void)),
            &terminal, SLOT (pasteClipboard (void)));
 }
 
 void
-terminal_dock_widget::connect_visibility_changed (void)
-{
-  connect (this, SIGNAL (visibilityChanged (bool)),
-           this, SLOT (handle_visibility_changed (bool)));
-}
-
-void
-terminal_dock_widget::focus (void)
-{
-  if (! isVisible ())
-    setVisible (true);
-
-  setFocus ();
-  activateWindow ();
-  raise ();
-
-  widget ()->setFocus ();
-  widget ()->activateWindow ();
-  widget ()->raise ();
-}
-
-void
-terminal_dock_widget::handle_visibility (bool visible)
-{
-  // if widget is changed to visible and is not floating
-
-  if (visible && ! isFloating ())
-    focus ();
-}
-
-void
 terminal_dock_widget::notice_settings (const QSettings *settings)
 {
   emit notice_settings_signal (settings);
 }
 
 void
 terminal_dock_widget::relay_command (const QString& command)
 {
@@ -116,8 +80,20 @@ terminal_dock_widget::copyClipboard (voi
   emit copyClipboard_signal ();
 }
 
 void
 terminal_dock_widget::pasteClipboard (void)
 {
   emit pasteClipboard_signal ();
 }
+
+void
+terminal_dock_widget::focus (void)
+{
+  octave_dock_widget::focus ();
+
+  QWidget *w = widget ();
+
+  w->setFocus ();
+  w->activateWindow ();
+  w->raise ();
+}
diff --git a/libgui/src/terminal-dock-widget.h b/libgui/src/terminal-dock-widget.h
--- a/libgui/src/terminal-dock-widget.h
+++ b/libgui/src/terminal-dock-widget.h
@@ -32,34 +32,30 @@ along with Octave; see the file COPYING.
 class terminal_dock_widget : public octave_dock_widget
 {
   Q_OBJECT
 
 public:
 
   terminal_dock_widget (QWidget *parent = 0);
 
-  void connect_visibility_changed (void);
-
 signals:
 
 public slots:
 
-  void focus (void);
-
-  void handle_visibility (bool visible);
-
   void notice_settings (const QSettings *settings);
 
   void relay_command (const QString& command);
 
   void copyClipboard (void);
 
   void pasteClipboard (void);
 
+  void focus (void);
+
 signals:
 
   void notice_settings_signal (const QSettings *settings); 
 
   void relay_command_signal (const QString& command);
 
   void copyClipboard_signal (void);
 
