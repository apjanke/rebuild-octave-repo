# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1232627164 -3600
#      Thu Jan 22 13:26:04 2009 +0100
# Node ID 3a3421a9f0bbf34c39318e0f56afc19fcd882cfc
# Parent  a6edd5c23cb5e9c70c4ce78552d67ba0ccd3cfe2
optimize resizable indexing with scalars

diff --git a/liboctave/Array.cc b/liboctave/Array.cc
--- a/liboctave/Array.cc
+++ b/liboctave/Array.cc
@@ -1114,17 +1114,22 @@ template <class T>
 Array<T> 
 Array<T>::index (const idx_vector& i, bool resize_ok, const T& rfv) const
 {
   Array<T> tmp = *this;
   if (resize_ok)
     {
       octave_idx_type n = numel (), nx = i.extent (n);
       if (n != nx)
-        tmp.resize_fill (nx, rfv);
+        {
+          if (i.is_scalar ())
+            return Array<T> (1, rfv);
+          else
+            tmp.resize_fill (nx, rfv);
+        }
 
       if (tmp.numel () != nx)
         return Array<T> ();
     }
 
   return tmp.index (i);
 }
 
@@ -1135,17 +1140,22 @@ Array<T>::index (const idx_vector& i, co
 {
   Array<T> tmp = *this;
   if (resize_ok)
     {
       dim_vector dv = dimensions.redim (2);
       octave_idx_type r = dv(0), c = dv(1);
       octave_idx_type rx = i.extent (r), cx = j.extent (c);
       if (r != rx || c != cx)
-        tmp.resize_fill (rx, cx, rfv);
+        {
+          if (i.is_scalar () && j.is_scalar ())
+            return Array<T> (1, rfv);
+          else
+            tmp.resize_fill (rx, cx, rfv);
+        }
 
       if (tmp.rows () != rx || tmp.columns () != cx)
         return Array<T> ();
     }
 
   return tmp.index (i, j);  
 }
 
@@ -1157,17 +1167,25 @@ Array<T>::index (const Array<idx_vector>
   Array<T> tmp = *this;
   if (resize_ok)
     {
       int ial = ia.length ();
       dim_vector dv = dimensions.redim (ial);
       dim_vector dvx; dvx.resize (ial);
       for (int i = 0; i < ial; i++) dvx(i) = ia(i).extent (dv (i));
       if (! (dvx == dv))
-        tmp.resize_fill (dvx, rfv);
+        {
+          bool all_scalars = true;
+          for (int i = 0; i < ial; i++) 
+            all_scalars = all_scalars && ia(i).is_scalar ();
+          if (all_scalars)
+            return Array<T> (1, rfv);
+          else
+            tmp.resize_fill (dvx, rfv);
+        }
 
       if (tmp.dimensions != dvx)
         return Array<T> ();
     }
 
   return tmp.index (ia);  
 }
 
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,13 @@
+2009-01-22  Jaroslav Hajek  <highegg@gmail.com>
+
+	* Array.cc (Array<T>::index (..., bool resize_ok)):
+	Optimize the all-scalar-indices cases.
+
 2009-01-22  Jaroslav Hajek  <highegg@gmail.com>
 
 	* dbleQR.h: Optionally declare warn_qrupdate_once.
 	* dbleQR.cc: Define it.
 	* (CmplxQR.h, dbleQR.h, fCmplxQR.h, floatQR.h): Declare replacement
 	methods unconditionally.
 	* (CmplxQR.cc, dbleQR.cc, fCmplxQR.cc, floatQR.cc): Define
 	updating replacement methods.
