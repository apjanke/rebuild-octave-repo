# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1535662517 14400
#      Thu Aug 30 16:55:17 2018 -0400
# Node ID 4c25d8d3a0ae16a844bef238bb3effaf4564fa82
# Parent  c756e9a1e7760752f2a93f6ff390881346b3e812
style fixes for oct-inttypes.cc

* oct-inttypes.cc: Style fixes.
(INT_DOUBLE_BINOP_DECL, DOUBLE_INT_BINOP_DECL): Eliminate macros.

diff --git a/liboctave/util/oct-inttypes.cc b/liboctave/util/oct-inttypes.cc
--- a/liboctave/util/oct-inttypes.cc
+++ b/liboctave/util/oct-inttypes.cc
@@ -31,20 +31,20 @@ along with Octave; see the file COPYING.
 
 template <typename T>
 const octave_int<T> octave_int<T>::zero (static_cast<T> (0));
 
 template <typename T>
 const octave_int<T> octave_int<T>::one (static_cast<T> (1));
 
 // define type names.
-#define DECLARE_OCTAVE_INT_TYPENAME(TYPE, TYPENAME)     \
-  template <>                                           \
-  OCTAVE_API const char *                               \
-  octave_int<TYPE>::type_name () { return TYPENAME; }
+#define DECLARE_OCTAVE_INT_TYPENAME(TYPE, TYPENAME)             \
+  template <>                                                   \
+  OCTAVE_API const char *                                       \
+  octave_int<TYPE>::type_name (void) { return TYPENAME; }
 
 DECLARE_OCTAVE_INT_TYPENAME (int8_t, "int8")
 DECLARE_OCTAVE_INT_TYPENAME (int16_t, "int16")
 DECLARE_OCTAVE_INT_TYPENAME (int32_t, "int32")
 DECLARE_OCTAVE_INT_TYPENAME (int64_t, "int64")
 DECLARE_OCTAVE_INT_TYPENAME (uint8_t, "uint8")
 DECLARE_OCTAVE_INT_TYPENAME (uint16_t, "uint16")
 DECLARE_OCTAVE_INT_TYPENAME (uint32_t, "uint32")
@@ -56,27 +56,21 @@ T
 octave_int_base<T>::convert_real (const S& value)
 {
   // Compute proper thresholds.
   static const S thmin = compute_threshold (static_cast<S> (min_val ()),
                                             min_val ());
   static const S thmax = compute_threshold (static_cast<S> (max_val ()),
                                             max_val ());
   if (octave::math::isnan (value))
-    {
-      return static_cast<T> (0);
-    }
+    return static_cast<T> (0);
   else if (value < thmin)
-    {
-      return min_val ();
-    }
+    return min_val ();
   else if (value > thmax)
-    {
-      return max_val ();
-    }
+    return max_val ();
   else
     {
       S rvalue = octave::math::round (value);
       return static_cast<T> (rvalue);
     }
 }
 
 #define INSTANTIATE_CONVERT_REAL_1(T, S)        \
@@ -98,19 +92,19 @@ octave_int_base<T>::convert_real (const 
 INSTANTIATE_CONVERT_REAL (double);
 INSTANTIATE_CONVERT_REAL (float);
 #if defined (OCTAVE_INT_USE_LONG_DOUBLE)
 INSTANTIATE_CONVERT_REAL (long double);
 #endif
 
 #if defined (OCTAVE_INT_USE_LONG_DOUBLE)
 
-#if defined (OCTAVE_ENSURE_LONG_DOUBLE_OPERATIONS_ARE_NOT_TRUNCATED)
+#  if defined (OCTAVE_ENSURE_LONG_DOUBLE_OPERATIONS_ARE_NOT_TRUNCATED)
 
-#define DEFINE_OCTAVE_LONG_DOUBLE_CMP_OP_TEMPLATES(T)           \
+#    define DEFINE_OCTAVE_LONG_DOUBLE_CMP_OP_TEMPLATES(T)       \
   template <typename xop>                                       \
   bool                                                          \
   octave_int_cmp_op::external_mop (double x, T y)               \
   {                                                             \
     unsigned int oldcw = octave_begin_long_double_rounding ();  \
                                                                 \
     bool retval = xop::op (static_cast<long double> (x),        \
                            static_cast<long double> (y));       \
@@ -132,28 +126,29 @@ INSTANTIATE_CONVERT_REAL (long double);
     octave_end_long_double_rounding (oldcw);                    \
                                                                 \
     return retval;                                              \
   }
 
 DEFINE_OCTAVE_LONG_DOUBLE_CMP_OP_TEMPLATES (int64_t)
 DEFINE_OCTAVE_LONG_DOUBLE_CMP_OP_TEMPLATES (uint64_t)
 
-#define INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OP(OP, T)               \
+#    define INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OP(OP, T)           \
   template OCTAVE_API bool                                              \
   octave_int_cmp_op::external_mop<octave_int_cmp_op::OP> (double, T);   \
+                                                                        \
   template OCTAVE_API bool                                              \
   octave_int_cmp_op::external_mop<octave_int_cmp_op::OP> (T, double)
 
-#define INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OPS(T)  \
-  INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OP (lt, T);   \
-  INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OP (le, T);   \
-  INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OP (gt, T);   \
-  INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OP (ge, T);   \
-  INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OP (eq, T);   \
+#    define INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OPS(T)      \
+  INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OP (lt, T);           \
+  INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OP (le, T);           \
+  INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OP (gt, T);           \
+  INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OP (ge, T);           \
+  INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OP (eq, T);           \
   INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OP (ne, T)
 
 INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OPS (int64_t);
 INSTANTIATE_LONG_DOUBLE_LONG_DOUBLE_CMP_OPS (uint64_t);
 
 uint64_t
 octave_external_uint64_uint64_mul (uint64_t x, uint64_t y)
 {
@@ -181,17 +176,17 @@ octave_external_int64_int64_mul (int64_t
 // Note that if we return long double it is apparently possible for
 // truncation to happen at the point of storing the result in retval,
 // which can happen after we end long double rounding.  Attempt to avoid
 // that problem by storing the full precision temporary value in the
 // integer value before we end the long double rounding mode.
 // Similarly, the conversion from the 64-bit integer type to long double
 // must also occur in long double rounding mode.
 
-#define OCTAVE_LONG_DOUBLE_OP(T, OP, NAME)                      \
+#    define OCTAVE_LONG_DOUBLE_OP(T, OP, NAME)                  \
   T                                                             \
   external_double_ ## T ## _ ## NAME (double x, T y)            \
   {                                                             \
     unsigned int oldcw = octave_begin_long_double_rounding ();  \
                                                                 \
     T retval = T (x OP static_cast<long double> (y.value ()));  \
                                                                 \
     octave_end_long_double_rounding (oldcw);                    \
@@ -206,26 +201,26 @@ octave_external_int64_int64_mul (int64_t
                                                                 \
     T retval = T (static_cast<long double> (x.value ()) OP y);  \
                                                                 \
     octave_end_long_double_rounding (oldcw);                    \
                                                                 \
     return retval;                                              \
   }
 
-#define OCTAVE_LONG_DOUBLE_OPS(T)               \
+#    define OCTAVE_LONG_DOUBLE_OPS(T)           \
   OCTAVE_LONG_DOUBLE_OP (T, +, add);            \
   OCTAVE_LONG_DOUBLE_OP (T, -, sub);            \
   OCTAVE_LONG_DOUBLE_OP (T, *, mul);            \
   OCTAVE_LONG_DOUBLE_OP (T, /, div)
 
 OCTAVE_LONG_DOUBLE_OPS(octave_int64);
 OCTAVE_LONG_DOUBLE_OPS(octave_uint64);
 
-#endif
+#  endif
 
 #else
 
 // Define comparison operators
 
 template <typename xop>
 bool
 octave_int_cmp_op::emulate_mop (uint64_t x, double y)
@@ -275,28 +270,28 @@ octave_int_cmp_op::emulate_mop (int64_t 
 // A trait class reverting the operator
 template <typename xop>
 class rev_op
 {
 public:
   typedef xop op;
 };
 
-#define DEFINE_REVERTED_OPERATOR(OP1,OP2)       \
+#define DEFINE_REVERTED_OPERATOR(OP1, OP2)      \
   template <>                                   \
   class rev_op<octave_int_cmp_op::OP1>          \
   {                                             \
   public:                                       \
     typedef octave_int_cmp_op::OP2 op;          \
   }
 
-DEFINE_REVERTED_OPERATOR(lt,gt);
-DEFINE_REVERTED_OPERATOR(gt,lt);
-DEFINE_REVERTED_OPERATOR(le,ge);
-DEFINE_REVERTED_OPERATOR(ge,le);
+DEFINE_REVERTED_OPERATOR (lt, gt);
+DEFINE_REVERTED_OPERATOR (gt, lt);
+DEFINE_REVERTED_OPERATOR (le, ge);
+DEFINE_REVERTED_OPERATOR (ge, le);
 
 template <typename xop>
 bool
 octave_int_cmp_op::emulate_mop (double x, uint64_t y)
 {
   typedef typename rev_op<xop>::op rop;
   return mop<rop> (y, x);
 }
@@ -431,35 +426,33 @@ octave_int_arith_base<int64_t, true>::mu
         return -static_cast<int64_t> (res);
     }
 
 overflow:
   return positive ? max_val () : min_val ();
 
 }
 
-#define INT_DOUBLE_BINOP_DECL(OP,SUFFIX)                        \
-  template <>                                                   \
-  OCTAVE_API octave_ ## SUFFIX                                  \
-  operator OP (const octave_ ## SUFFIX & x, const double& y)
-
-#define DOUBLE_INT_BINOP_DECL(OP,SUFFIX)                        \
-  template <>                                                   \
-  OCTAVE_API octave_ ## SUFFIX                                  \
-  operator OP (const double& x, const octave_ ## SUFFIX & y)
-
-INT_DOUBLE_BINOP_DECL (+, uint64)
+template <>
+OCTAVE_API octave_uint64
+operator + (const octave_uint64& x, const double& y)
 {
   return (y < 0) ? x - octave_uint64 (-y) : x + octave_uint64 (y);
 }
 
-DOUBLE_INT_BINOP_DECL (+, uint64)
-{ return y + x; }
+template <>
+OCTAVE_API octave_uint64
+operator + (const double& x, const octave_uint64& y)
+{
+  return y + x;
+}
 
-INT_DOUBLE_BINOP_DECL (+, int64)
+template <>
+OCTAVE_API octave_int64
+operator + (const octave_int64& x, const double& y)
 {
   if (fabs (y) < static_cast<double> (octave_int64::max ()))
     return x + octave_int64 (y);
   else
     {
       // If the number is within the int64 range (the most common case,
       // probably), the above will work as expected.  If not, it's more
       // complicated - as long as y is within _twice_ the signed range, the
@@ -468,27 +461,33 @@ INT_DOUBLE_BINOP_DECL (+, int64)
       // So what we do is to try to convert y/2 and add it twice.  Note that
       // if y/2 overflows, the result must overflow as well, and that y/2
       // cannot be a fractional number.
       octave_int64 y2 (y / 2);
       return (x + y2) + y2;
     }
 }
 
-DOUBLE_INT_BINOP_DECL (+, int64)
+template <>
+OCTAVE_API octave_int64
+operator + (const double& x, const octave_int64& y)
 {
   return y + x;
 }
 
-INT_DOUBLE_BINOP_DECL (-, uint64)
+template <>
+OCTAVE_API octave_uint64
+operator - (const octave_uint64& x, const double& y)
 {
   return x + (-y);
 }
 
-DOUBLE_INT_BINOP_DECL (-, uint64)
+template <>
+OCTAVE_API octave_uint64
+operator - (const double& x, const octave_uint64& y)
 {
   if (x <= static_cast<double> (octave_uint64::max ()))
     return octave_uint64 (x) - y;
   else
     {
       // Again a trick to get the corner cases right.  Things like
       // 3**2**63 - intmax ('uint64') should produce the correct result, i.e.
       // int64 (2**63) + 1.
@@ -498,31 +497,33 @@ DOUBLE_INT_BINOP_DECL (-, uint64)
           const uint64_t p2_64my = (~y.value ()) + 1; // Equals 2**64 - y
           return octave_uint64 (x - p2_64) + octave_uint64 (p2_64my);
         }
       else
         return octave_uint64 (p2_64);
     }
 }
 
-INT_DOUBLE_BINOP_DECL (-, int64)
+template <>
+OCTAVE_API octave_int64
+operator - (const octave_int64& x, const double& y)
 {
   return x + (-y);
 }
 
-DOUBLE_INT_BINOP_DECL (-, int64)
+template <>
+OCTAVE_API octave_int64
+operator - (const double& x, const octave_int64& y)
 {
   static const bool twosc = (std::numeric_limits<int64_t>::min ()
                              < -std::numeric_limits<int64_t>::max ());
   // In case of symmetric integers (not two's complement), this will probably
   // be eliminated at compile time.
   if (twosc && y.value () == std::numeric_limits<int64_t>::min ())
-    {
-      return octave_int64 (x + std::pow (2.0, 63));
-    }
+    return octave_int64 (x + std::pow (2.0, 63));
   else
     return x + (-y);
 }
 
 // NOTE:
 // Emulated mixed multiplications are tricky due to possible precision loss.
 // Here, after sorting out common cases for speed, we follow the strategy
 // of converting the double number into the form sign * 64-bit integer *
@@ -568,30 +569,26 @@ dblesplit (double x, bool& sign, uint64_
 // 32-bit unsigned integer mantissa, exponent, and sign.
 static double
 dbleget (bool sign, uint32_t mtis, int exp)
 {
   double x = ldexp (static_cast<double> (mtis), exp);
   return sign ? -x : x;
 }
 
-INT_DOUBLE_BINOP_DECL (*, uint64)
+template <>
+OCTAVE_API octave_uint64
+operator * (const octave_uint64& x, const double& y)
 {
   if (y >= 0 && y < octave_uint64::max () && y == octave::math::round (y))
-    {
-      return x * octave_uint64 (static_cast<uint64_t> (y));
-    }
+    return x * octave_uint64 (static_cast<uint64_t> (y));
   else if (y == 0.5)
-    {
-      return x / octave_uint64 (static_cast<uint64_t> (2));
-    }
+    return x / octave_uint64 (static_cast<uint64_t> (2));
   else if (y < 0 || octave::math::isnan (y) || octave::math::isinf (y))
-    {
-      return octave_uint64 (x.value () * y);
-    }
+    return octave_uint64 (x.value () * y);
   else
     {
       bool sign;
       uint64_t my;
       int e;
       dblesplit (y, sign, my, e);
       uint32_t w[4];
       umul128 (x.value (), my, w);
@@ -600,33 +597,33 @@ INT_DOUBLE_BINOP_DECL (*, uint64)
         {
           res += octave_uint64 (dbleget (sign, w[i], e));
           e += 32;
         }
       return res;
     }
 }
 
-DOUBLE_INT_BINOP_DECL (*, uint64)
-{ return y * x; }
+template <>
+OCTAVE_API octave_uint64
+operator * (const double& x, const octave_uint64& y)
+{
+  return y * x;
+}
 
-INT_DOUBLE_BINOP_DECL (*, int64)
+template <>
+OCTAVE_API octave_int64
+operator * (const octave_int64& x, const double& y)
 {
   if (fabs (y) < octave_int64::max () && y == octave::math::round (y))
-    {
-      return x * octave_int64 (static_cast<int64_t> (y));
-    }
+    return x * octave_int64 (static_cast<int64_t> (y));
   else if (fabs (y) == 0.5)
-    {
-      return x / octave_int64 (static_cast<uint64_t> (4*y));
-    }
+    return x / octave_int64 (static_cast<uint64_t> (4*y));
   else if (octave::math::isnan (y) || octave::math::isinf (y))
-    {
-      return octave_int64 (x.value () * y);
-    }
+    return octave_int64 (x.value () * y);
   else
     {
       bool sign;
       uint64_t my;
       int e;
       dblesplit (y, sign, my, e);
       uint32_t w[4];
       sign = (sign != (x.value () < 0));
@@ -636,45 +633,53 @@ INT_DOUBLE_BINOP_DECL (*, int64)
         {
           res += octave_int64 (dbleget (sign, w[i], e));
           e += 32;
         }
       return res;
     }
 }
 
-DOUBLE_INT_BINOP_DECL (*, int64)
-{ return y * x; }
+template <>
+OCTAVE_API octave_int64
+operator * (const double& x, const octave_int64& y)
+{
+  return y * x;
+}
 
-DOUBLE_INT_BINOP_DECL (/, uint64)
+template <>
+OCTAVE_API octave_uint64
+operator / (const double& x, const octave_uint64& y)
 {
   return octave_uint64 (x / static_cast<double> (y));
 }
 
-DOUBLE_INT_BINOP_DECL (/, int64)
+template <>
+OCTAVE_API octave_int64
+operator / (const double& x, const octave_int64& y)
 {
   return octave_int64 (x / static_cast<double> (y));
 }
 
-INT_DOUBLE_BINOP_DECL (/, uint64)
+template <>
+OCTAVE_API octave_uint64
+operator / (const octave_uint64& x, const double& y)
 {
   if (y >= 0 && y < octave_uint64::max () && y == octave::math::round (y))
-    {
-      return x / octave_uint64 (y);
-    }
+    return x / octave_uint64 (y);
   else
     return x * (1.0/y);
 }
 
-INT_DOUBLE_BINOP_DECL (/, int64)
+template <>
+OCTAVE_API octave_int64
+operator / (const octave_int64& x, const double& y)
 {
   if (fabs (y) < octave_int64::max () && y == octave::math::round (y))
-    {
-      return x / octave_int64 (y);
-    }
+    return x / octave_int64 (y);
   else
     return x * (1.0/y);
 }
 
 #define INSTANTIATE_INT64_DOUBLE_CMP_OP0(OP,T1,T2)                      \
   template OCTAVE_API bool                                              \
   octave_int_cmp_op::emulate_mop<octave_int_cmp_op::OP> (T1 x, T2 y)
 
