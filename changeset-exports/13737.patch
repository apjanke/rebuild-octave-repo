# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1319121344 -3600
#      Thu Oct 20 15:35:44 2011 +0100
# Node ID 30414ff19d5e5b52eb1b0b2ffc051a5b31d639cc
# Parent  deb69dab45148c9e3ee9a6644ba72b9b2019ecd0
Use copysignf module from gnulib.

* bootstrap.conf: Add copysignf.
* lo-cieee.c: Remove obsolete CPP statements about copysign.
* lo-mappers.h (xcopysign): Make non inlined.
(xcopysignf): Likewise.
* lo-mappers.cc (xcopysign): Moved from header and use gnulib replavement.
(xcopysignf): Likewise.

diff --git a/build-aux/bootstrap.conf b/build-aux/bootstrap.conf
--- a/build-aux/bootstrap.conf
+++ b/build-aux/bootstrap.conf
@@ -15,16 +15,17 @@
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 
 # gnulib modules used by this package.
 gnulib_modules="
   c-strcase
   copysign
+  copysignf
   closedir
   crypto/md5
   fclose
   fcntl
   filemode
   fnmatch
   fopen
   fflush
diff --git a/liboctave/lo-cieee.c b/liboctave/lo-cieee.c
--- a/liboctave/lo-cieee.c
+++ b/liboctave/lo-cieee.c
@@ -42,21 +42,16 @@ along with Octave; see the file COPYING.
 #define HAVE_ISNAN 1
 #endif
 
 #if ! defined (HAVE_FINITE) && defined (HAVE__FINITE)
 #define finite _finite
 #define HAVE_FINITE 1
 #endif
 
-#if ! defined (HAVE_COPYSIGN) && defined (HAVE__COPYSIGN)
-#define copysign _copysign
-#define HAVE_COPYSIGN 1
-#endif
-
 #if defined (_AIX) && defined (__GNUG__)
 #undef finite
 #define finite(x) ((x) < DBL_MAX && (x) > -DBL_MAX)
 #endif
 
 /* Octave's idea of infinity.  */
 double octave_Inf;
 float octave_Float_Inf;
diff --git a/liboctave/lo-mappers.cc b/liboctave/lo-mappers.cc
--- a/liboctave/lo-mappers.cc
+++ b/liboctave/lo-mappers.cc
@@ -43,16 +43,22 @@ along with Octave; see the file COPYING.
 // lo-mappers.h.
 
 double
 xtrunc (double x)
 {
   return gnulib::trunc (x);
 }
 
+double
+xcopysign (double x, double y)
+{
+  return gnulib::copysign (x, y);
+}
+
 double xfloor (double x)
 {
   return gnulib::floor (x);
 }
 
 double
 xround (double x)
 {
@@ -263,16 +269,22 @@ xmax (const Complex& x, const Complex& y
 
 float
 xtrunc (float x)
 {
   return gnulib::truncf (x);
 }
 
 float
+xcopysign (float x, float y)
+{
+  return gnulib::copysignf (x, y);
+}
+
+float
 xround (float x)
 {
   return gnulib::round (x);
 }
 
 float
 xroundb (float x)
 {
diff --git a/liboctave/lo-mappers.h b/liboctave/lo-mappers.h
--- a/liboctave/lo-mappers.h
+++ b/liboctave/lo-mappers.h
@@ -26,17 +26,17 @@ along with Octave; see the file COPYING.
 
 #include <limits>
 
 #include "oct-cmplx.h"
 #include "lo-math.h"
 
 // Double Precision
 extern OCTAVE_API double xtrunc (double x);
-inline double xcopysign (double x, double y) { return copysign (x, y); }
+extern OCTAVE_API double xcopysign (double x, double y);
 inline double xceil (double x) { return ceil (x); }
 extern OCTAVE_API double xfloor (double x);
 inline double arg (double x) { return atan2 (0.0, x); }
 inline double conj (double x) { return x; }
 inline double fix (double x) { return xtrunc (x); }
 inline double imag (double) { return 0.0; }
 inline double real (double x) { return x; }
 extern OCTAVE_API double xround (double x);
@@ -112,17 +112,17 @@ extern OCTAVE_API Complex atanh (const C
 extern OCTAVE_API bool octave_is_NA (const Complex& x);
 extern OCTAVE_API bool octave_is_NaN_or_NA (const Complex& x);
 
 extern OCTAVE_API Complex xmin (const Complex& x, const Complex& y);
 extern OCTAVE_API Complex xmax (const Complex& x, const Complex& y);
 
 // Single Precision
 extern OCTAVE_API float xtrunc (float x);
-inline float xcopysign (float x, float y) { return copysignf (x, y); }
+extern OCTAVE_API float xcopysign (float x, float y);
 inline float xceil (float x) { return ceilf (x); }
 inline float xfloor (float x) { return floorf (x); }
 inline float arg (float x) { return atan2f (0.0f, x); }
 inline float conj (float x) { return x; }
 inline float fix (float x) { return xtrunc (x); }
 inline float imag (float) { return 0.0f; }
 inline float real (float x) { return x; }
 extern OCTAVE_API float xround (float x);
