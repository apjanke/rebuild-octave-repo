# HG changeset patch
# User jwe
# Date 909615677 0
#      Wed Oct 28 23:01:17 1998 +0000
# Node ID 7a5a5da64756e676655bc655928a31bdce8859a0
# Parent  bea685644090df20e51e407ed1eacedaecb195a3
[project @ 1998-10-28 22:54:04 by jwe]

diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -91,17 +91,17 @@ TI_XSRC := Array-oc.cc Array-os.cc Array
 	SLList-tc.cc SLList-tm.cc SLStack-i.cc SLStack-pc.cc \
 	SLStack-str.cc SLStack-sym.cc SLStack-tok.cc \
 	SLStack-ue.cc SLStack-ui.cc
 
 TI_SRC := $(addprefix TEMPLATE-INST/, $(TI_XSRC))
 
 OP_XSRC := op-b-b.cc op-bm-bm.cc op-cm-cm.cc op-cm-cs.cc \
 	op-cm-m.cc op-cm-s.cc op-cs-cm.cc op-cs-cs.cc op-cs-m.cc \
-	op-cs-s.cc op-m-cm.cc op-m-cs.cc op-m-m.cc op-m-s.cc \
+	op-cs-s.cc op-list.cc op-m-cm.cc op-m-cs.cc op-m-m.cc op-m-s.cc \
 	op-s-cm.cc op-s-cs.cc op-s-m.cc op-s-s.cc op-str-str.cc \
 	op-fil-b.cc op-fil-bm.cc op-fil-cm.cc op-fil-cs.cc \
 	op-fil-m.cc op-fil-s.cc op-fil-lis.cc op-fil-rec.cc \
 	op-fil-str.cc
 
 OP_SRC := $(addprefix OPERATORS/, $(OP_XSRC))
 
 OV_SRC := ov-base.cc ov-ch-mat.cc ov-list.cc ov-re-mat.cc \
diff --git a/src/OPERATORS/op-list.cc b/src/OPERATORS/op-list.cc
new file mode 100644
--- /dev/null
+++ b/src/OPERATORS/op-list.cc
@@ -0,0 +1,51 @@
+/*
+
+Copyright (C) 1996, 1997 John W. Eaton
+
+This file is part of Octave.
+
+Octave is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+Octave is distributed in the hope that it will be useful, but WITHOUT
+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with Octave; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+*/
+
+#if defined (__GNUG__)
+#pragma implementation
+#endif
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "gripes.h"
+#include "ov.h"
+#include "ov-list.h"
+#include "ov-typeinfo.h"
+#include "ops.h"
+
+// list ops.
+
+DEFASSIGNANYOP_FN (assign, list, assign);
+
+void
+install_list_ops (void)
+{
+  INSTALL_ASSIGNANYOP (asn_eq, octave_list, assign);
+}
+
+/*
+;;; Local Variables: ***
+;;; mode: C++ ***
+;;; End: ***
+*/
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -593,16 +593,40 @@ DEFUN (prod, args, ,
 	}
     }
   else
     print_usage ("prod");
 
   return retval;
 }
 
+DEFUN (length, args, ,
+  "length (x): return the `length' of the object X\n\
+\n\
+For matrix objects, the length is the number of rows or columns,\n\
+whichever is greater (this odd definition is used for compatibility\n\
+with Matlab).\n\
+\n\
+See also: size, rows, columns, is_scalar, is_vector, is_matrix")
+{
+  octave_value retval;
+
+  if (args.length () == 1)
+    {
+      int len = args(0).length ();
+
+      if (! error_state)
+	retval = static_cast<double> (len);
+    }
+  else
+    print_usage ("length");
+
+  return retval;
+}
+
 DEFUN (size, args, nargout,
   "[m, n] = size (x): return rows and columns of X\n\
 \n\
 d = size (x): return number of rows and columns of x as a row vector\n\
 \n\
 m = size (x, 1): return number of rows in x\n\
 m = size (x, 2): return number of columns in x")
 {
diff --git a/src/defaults.cc b/src/defaults.cc
--- a/src/defaults.cc
+++ b/src/defaults.cc
@@ -63,17 +63,17 @@ string Vlocal_arch_lib_dir;
 string Vfcn_file_dir;
 
 // The path that will be searched for programs that we execute.
 // (--exec-path path)
 string Vexec_path;
 
 // Load path specified on command line.
 // (--path path; -p path)
-string Vload_path;
+static string Vload_path;
 
 // The default load path with OCTAVE_HOME appropriately substituted.
 static string Vdefault_load_path;
 
 // And the cached directory path corresponding to Vload_path.
 dir_path Vload_path_dir_path;
 
 // Name of the editor to be invoked by the edit_history command.
@@ -171,32 +171,26 @@ set_default_exec_path (void)
 	  Vexec_path = string (":");
 	  Vexec_path.append (shell_path);
 	}
     }
   else
     Vexec_path = string (octave_exec_path);
 }
 
-// Handle OCTAVE_PATH from the environment like TeX handles TEXINPUTS.
-// If the path starts with `:', prepend the standard path.  If it ends
-// with `:' append the standard path.  If it begins and ends with
-// `:', do both (which is useless, but the luser asked for it...).
-
 static void
 set_default_path (void)
 {
   Vdefault_load_path = subst_octave_home (OCTAVE_FCNFILEPATH);
 
   string oct_path = octave_env::getenv ("OCTAVE_PATH");
 
-  Vload_path = oct_path.empty ()
-    ? Vdefault_load_path : maybe_add_default_path (oct_path);
+  Vload_path = oct_path.empty () ? string (":") : oct_path;
 
-  Vload_path_dir_path = dir_path (Vload_path);
+  Vload_path_dir_path = dir_path (Vload_path, Vdefault_load_path);
 }
 
 static void
 set_default_info_file (void)
 {
   string std_info_file = subst_octave_home (OCTAVE_INFOFILE);
 
   string oct_info_file = octave_env::getenv ("OCTAVE_INFO_FILE");
@@ -405,34 +399,34 @@ loadpath (void)
 
   if (s.empty ())
     {
       gripe_invalid_value_specified ("LOADPATH");
       status = -1;
     }
   else
     {
-      Vload_path = maybe_add_default_load_path (s);
+      Vload_path = s;
 
-      Vload_path_dir_path = dir_path (Vload_path);
+      Vload_path_dir_path = dir_path (Vload_path, Vdefault_load_path);
     }
 
   return status;
 }
 
 void
 symbols_of_defaults (void)
 {
   DEFVAR (EDITOR, Veditor, 0, editor,
     "name of the editor to be invoked by the edit_history command");
 
   DEFVAR (EXEC_PATH, Vexec_path, 0, exec_path,
     "colon separated list of directories to search for programs to run");
 
-  DEFVAR (LOADPATH, ":", 0, octave_loadpath,
+  DEFVAR (LOADPATH, ":", 0, loadpath,
     "colon separated list of directories to search for scripts.\n\
 The default value is \":\", which means to search the default list\n\
 of directories.  The default list of directories may be found in\n\
 the built-in constant DEFAULT_LOADPATH");
 
   DEFCONST (DEFAULT_LOADPATH, Vdefault_load_path,
     "the default colon separated list of directories to search for scripts");
   
diff --git a/src/defaults.h.in b/src/defaults.h.in
--- a/src/defaults.h.in
+++ b/src/defaults.h.in
@@ -125,20 +125,16 @@ extern string Vlibexec_dir;
 extern string Varch_lib_dir;
 extern string Vlocal_arch_lib_dir;
 extern string Vfcn_file_dir;
 
 // The path that will be searched for programs that we execute.
 // (--exec-path path)
 extern string Vexec_path;
 
-// Load path specified on command line.
-// (--path path; -p path)
-extern string Vload_path;
-
 // And the cached directory path corresponding to Vload_path.
 extern dir_path Vload_path_dir_path;
 
 // Name of the editor to be invoked by the edit_history command.
 extern string Veditor;
 
 extern string Vimagepath;
 
diff --git a/src/fn-cache.cc b/src/fn-cache.cc
--- a/src/fn-cache.cc
+++ b/src/fn-cache.cc
@@ -43,17 +43,17 @@ octave_fcn_file_name_cache *octave_fcn_f
 // We just accumulate all directories ever referenced in the cache and
 // we don't delete any old ones.
 
 bool
 octave_fcn_file_name_cache::update (const string& path)
 {
   bool something_changed = false;
 
-  dir_path p = path.empty () ? dir_path (Vload_path) : dir_path (path);
+  dir_path p = path.empty () ? Vload_path_dir_path : dir_path (path);
 
   string_vector dirs = p.all_directories ();
 
   int len = dirs.length ();
 
   for (int i = 0; i < len; i++)
     {
       string d = dirs[i];
@@ -106,17 +106,17 @@ octave_fcn_file_name_cache::do_list (con
   // XXX FIXME XXX -- this could probably be improved by keeping lists
   // of all the function files for the current load path and only
   // updating that when the load path changes.  Have to be careful to
   // return the right thing when we are only looking for a subset of
   // all the files in the load path.
 
   int total_len = 0;
 
-  dir_path p = path.empty () ? dir_path (Vload_path) : dir_path (path);
+  dir_path p = path.empty () ? Vload_path_dir_path : dir_path (path);
 
   string_vector dirs = p.all_directories ();
 
   int ndirs = dirs.length ();
 
   if (ndirs > 1)
     {
       for (int i = 0; i < ndirs; i++)
diff --git a/src/help.cc b/src/help.cc
--- a/src/help.cc
+++ b/src/help.cc
@@ -547,19 +547,17 @@ simple_help (void)
 
   LIST_SYMBOLS (symbol_record::BUILTIN_VARIABLE, "builtin variables");
 
   // Also need to list variables and currently compiled functions from
   // the symbol table, if there are any.
 
   // Also need to search octave_path for script files.
 
-  dir_path p (Vload_path);
-
-  string_vector dirs = p.all_directories ();
+  string_vector dirs = Vload_path_dir_path.all_directories ();
 
   int len = dirs.length ();
 
   for (int i = 0; i < len; i++)
     {
       string_vector names = octave_fcn_file_name_cache::list (dirs[i]);
 
       if (! names.empty ())
diff --git a/src/oct-obj.cc b/src/oct-obj.cc
--- a/src/oct-obj.cc
+++ b/src/oct-obj.cc
@@ -88,16 +88,56 @@ octave_value_list::reverse (void)
       octave_value tmp = elem (i);
       elem (i) = elem (n - i - 1);
       elem (n - i - 1) = tmp;
     }
 
   return *this;
 }
 
+octave_value_list
+octave_value_list::splice (int offset, int rep_length,
+			   const octave_value_list& lst) const
+{ 
+  octave_value_list retval;
+
+  int len = length ();
+
+  if (offset < 0 || offset >= len)
+    {
+      error ("octave_value_list::splice: invalid OFFSET");
+      return retval;
+    }
+
+  if (rep_length < 0 || rep_length + offset > len)
+    {
+      error ("octave_value_list::splice: invalid LENGTH");
+      return retval;
+    }
+
+  int lst_len = lst.length ();
+
+  int new_len = len - rep_length + lst_len;
+
+  retval.resize (new_len);
+
+  int k = 0;
+
+  for (int i = 0; i < offset; i++)
+    retval(k++) = elem (i);
+
+  for (int i = 0; i < lst_len; i++)
+    retval(k++) = lst(i);
+
+  for (int i = offset + rep_length; i < len; i++)
+    retval(k++) = elem (i);
+
+  return retval;
+}
+
 bool
 octave_value_list::all_strings_p (void) const
 {
   int n = length ();
 
   for (int i = 0; i < n; i++)
     if (! elem(i).is_string ())
       return 0;
diff --git a/src/oct-obj.h b/src/oct-obj.h
--- a/src/oct-obj.h
+++ b/src/oct-obj.h
@@ -128,16 +128,19 @@ public:
   octave_value_list& prepend (const octave_value& val);
 
   octave_value_list& append (const octave_value& val);
 
   octave_value_list& append (const octave_value_list& lst);
 
   octave_value_list& reverse (void);
 
+  octave_value_list splice (int offset, int length,
+			    const octave_value_list& lst) const;
+
   bool all_strings_p (void) const;
 
   string_vector make_argv (const string&) const;
 
   void stash_name_tags (const string_vector& nm) { names = nm; }
 
   string_vector name_tags (void) const { return names; }
 
diff --git a/src/oct-procbuf.cc b/src/oct-procbuf.cc
--- a/src/oct-procbuf.cc
+++ b/src/oct-procbuf.cc
@@ -197,17 +197,17 @@ kluge_procbuf_delay (void)
 	  Vkluge_procbuf_delay = ival;
 	  return 0;
 	}
     }
   gripe_invalid_value_specified ("kluge_procbuf_delay");
   return -1;
 }
 
-static void
+void
 symbols_of_oct_procbuf (void)
 {
   DEFVAR (kluge_procbuf_delay, static_cast<double> (Vkluge_procbuf_delay),
 	  0, kluge_procbuf_delay,
     "number of microseconds to delay in the parent after forking");
 }
 
 /*
diff --git a/src/octave.cc b/src/octave.cc
--- a/src/octave.cc
+++ b/src/octave.cc
@@ -53,16 +53,17 @@ Software Foundation, 59 Temple Place - S
 #include <defaults.h>
 #include "defun.h"
 #include "dynamic-ld.h"
 #include "error.h"
 #include "file-io.h"
 #include "input.h"
 #include "lex.h"
 #include "oct-hist.h"
+#include "oct-obj.h"
 #include "ops.h"
 #include "toplev.h"
 #include "parse.h"
 #include "pt-plot.h"
 #include "procstream.h"
 #include "prog-args.h"
 #include "sighandlers.h"
 #include "sysdep.h"
@@ -148,27 +149,30 @@ long_options long_opts[] =
     { 0,                  0,                       0, 0 }
   };
 
 // Store the command-line options for later use.
 
 static void
 intern_argv (int argc, char **argv)
 {
+  bind_builtin_variable ("nargin", static_cast<double> (argc-1), 1, 1, 0);
+
+  octave_value_list octave_argv;
+
   if (argc > 1)
     {
       // Skip program name in argv.
-
-      octave_argv = string_vector (argv+1, argc-1);
+      while (--argc > 0)
+	octave_argv(argc-1) = octave_value (*(argv+argc));
 
-      bind_builtin_variable ("argv", octave_argv, 1, 1, 0);
-      bind_builtin_variable ("__argv__", octave_argv, 1, 1, 0);
     }
 
-  bind_builtin_variable ("nargin", static_cast<double> (argc-1), 1, 1, 0);
+  bind_builtin_variable ("argv", octave_argv, 1, 1, 0);
+  bind_builtin_variable ("__argv__", octave_argv, 1, 1, 0);
 }
 
 static void
 initialize_pathsearch (void)
 {
   // This may seem odd, but doing it this way means that we don't have
   // to modify the kpathsea library...
 
diff --git a/src/ops.h b/src/ops.h
--- a/src/ops.h
+++ b/src/ops.h
@@ -28,16 +28,20 @@ extern void install_ops (void);
 #define INSTALL_BINOP(op, t1, t2, f) \
   octave_value_typeinfo::register_binary_op \
     (octave_value::op, t1::static_type_id (), t2::static_type_id (), f);
 
 #define INSTALL_ASSIGNOP(op, t1, t2, f) \
   octave_value_typeinfo::register_assign_op \
     (octave_value::op, t1::static_type_id (), t2::static_type_id (), f);
 
+#define INSTALL_ASSIGNANYOP(op, t1, f) \
+  octave_value_typeinfo::register_assignany_op \
+    (octave_value::op, t1::static_type_id (), f);
+
 #define INSTALL_ASSIGNCONV(t1, t2, tr) \
   octave_value_typeinfo::register_pref_assign_conv \
     (t1::static_type_id (), t2::static_type_id (), tr::static_type_id ());
 
 #define INSTALL_WIDENOP(t1, t2, f) \
   octave_value_typeinfo::register_widening_op \
     (t1::static_type_id (), t2::static_type_id (), f);
 
@@ -129,16 +133,25 @@ extern void install_ops (void);
   ASSIGNOPDECL (name) \
   { \
     CAST_BINOP_ARGS (octave_ ## t1&, const octave_ ## t2&); \
  \
     v1.f (idx, v2.t1 ## _value ()); \
     return octave_value (); \
   }
 
+#define DEFASSIGNANYOP_FN(name, t1, f) \
+  ASSIGNOPDECL (name) \
+  { \
+    octave_ ## t1& v1 = DYNAMIC_CAST (octave_ ## t1&, a1); \
+ \
+    v1.f (idx, a2); \
+    return octave_value (); \
+  }
+
 #define CONVDECL(name) \
   static octave_value * \
   name (const octave_value& a)
 
 #define DEFCONV(name, from, to) \
   CONVDECL (name)
 
 #define BINOPDECL(name, a1, a2) \
diff --git a/src/ov-base.cc b/src/ov-base.cc
--- a/src/ov-base.cc
+++ b/src/ov-base.cc
@@ -119,35 +119,59 @@ octave_base_value::convert_to_row_or_col
   gripe_wrong_type_arg
     ("octave_base_value::convert_to_row_or_column_vector ()",
      type_name ());
 }
 
 void
 octave_base_value::print (ostream&, bool) const
 {
-  gripe_wrong_type_arg ("octave_base_value::print()", type_name ());
+  gripe_wrong_type_arg ("octave_base_value::print ()", type_name ());
 }
 
 void
 octave_base_value::print_raw (ostream&, bool) const
 {
-  gripe_wrong_type_arg ("octave_base_value::print_raw()", type_name ());
+  gripe_wrong_type_arg ("octave_base_value::print_raw ()", type_name ());
 }
 
 bool
 octave_base_value::print_name_tag (ostream& os, const string& name) const
 {
   indent (os);
   os << name << " =";
   newline (os);
   newline (os);
   return true;
 }
 
+int
+octave_base_value::rows (void) const
+{
+  int retval = -1;
+  gripe_wrong_type_arg ("octave_base_value::rows ()", type_name ());
+  return retval;
+}
+
+int
+octave_base_value::columns (void) const
+{
+  int retval = -1;
+  gripe_wrong_type_arg ("octave_base_value::columns ()", type_name ());
+  return retval;
+}
+
+int
+octave_base_value::length (void) const
+{
+  int retval = -1;
+  gripe_wrong_type_arg ("octave_base_value::length ()", type_name ());
+  return retval;
+}
+
 double
 octave_base_value::double_value (bool) const
 {
   double retval = octave_NaN;
   gripe_wrong_type_arg ("octave_base_value::double_value ()", type_name ());
   return retval;
 }
 
diff --git a/src/ov-base.h b/src/ov-base.h
--- a/src/ov-base.h
+++ b/src/ov-base.h
@@ -79,19 +79,20 @@ public:
   octave_value
   do_struct_elt_index_op (const string& nm, const octave_value_list& idx,
 			  bool silent);
 
   octave_value do_struct_elt_index_op (const string& nm, bool silent);
 
   octave_lvalue struct_elt_ref (octave_value *parent, const string& nm);
 
-  int rows (void) const { return -1; }
+  int rows (void) const;
+  int columns (void) const;
 
-  int columns (void) const { return -1; }
+  int length (void) const;
 
   bool is_defined (void) const { return false; }
 
   bool is_real_scalar (void) const { return false; }
 
   bool is_real_matrix (void) const { return false; }
 
   bool is_complex_scalar (void) const { return false; }
diff --git a/src/ov-bool-mat.h b/src/ov-bool-mat.h
--- a/src/ov-bool-mat.h
+++ b/src/ov-bool-mat.h
@@ -79,16 +79,24 @@ public:
 
   void assign (const octave_value_list& idx, const boolMatrix& rhs);
 
   idx_vector index_vector (void) const { return idx_vector (matrix); }
 
   int rows (void) const { return matrix.rows (); }
   int columns (void) const { return matrix.columns (); }
 
+  int length (void) const
+  {
+    int r = rows ();
+    int c = columns ();
+
+    return r > c ? r : c;
+  }
+
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_bool_matrix (void) const { return true; }
 
   octave_value all (void) const { return matrix.all (); }
   octave_value any (void) const { return matrix.any (); }
diff --git a/src/ov-bool.h b/src/ov-bool.h
--- a/src/ov-bool.h
+++ b/src/ov-bool.h
@@ -76,16 +76,18 @@ public:
 
   octave_value do_index_op (const octave_value_list& idx);
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
   int rows (void) const { return 1; }
   int columns (void) const { return 1; }
 
+  int length (void) const { return 1; }
+
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_real_scalar (void) const { return true; }
 
   octave_value all (void) const { return scalar; }
   octave_value any (void) const { return scalar; }
diff --git a/src/ov-ch-mat.h b/src/ov-ch-mat.h
--- a/src/ov-ch-mat.h
+++ b/src/ov-ch-mat.h
@@ -82,16 +82,24 @@ public:
     { return allocator.alloc (size); }
 
   void operator delete (void *p, size_t size)
     { allocator.free (p, size); }
 
   int rows (void) const { return matrix.rows (); }
   int columns (void) const { return matrix.columns (); }
 
+  int length (void) const
+  {
+    int r = rows ();
+    int c = columns ();
+
+    return r > c ? r : c;
+  }
+
   bool is_constant (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   bool is_char_matrix (void) const { return true; }
   bool is_real_matrix (void) const { return true; }
 
   octave_value all (void) const { return matrix.all (); }
diff --git a/src/ov-complex.h b/src/ov-complex.h
--- a/src/ov-complex.h
+++ b/src/ov-complex.h
@@ -74,16 +74,24 @@ public:
 
   octave_value *try_narrowing_conversion (void);
 
   octave_value do_index_op (const octave_value_list& idx);
 
   int rows (void) const { return 1; }
   int columns (void) const { return 1; }
 
+  int length (void) const
+  {
+    int r = rows ();
+    int c = columns ();
+
+    return r > c ? r : c;
+  }
+
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_complex_scalar (void) const { return true; }
 
   octave_value all (void) const { return (scalar != 0.0); }
   octave_value any (void) const { return (scalar != 0.0); }
diff --git a/src/ov-cx-mat.h b/src/ov-cx-mat.h
--- a/src/ov-cx-mat.h
+++ b/src/ov-cx-mat.h
@@ -85,16 +85,24 @@ public:
 
   void assign (const octave_value_list& idx, const ComplexMatrix& rhs);
 
   void assign (const octave_value_list& idx, const Matrix& rhs);
 
   int rows (void) const { return matrix.rows (); }
   int columns (void) const { return matrix.columns (); }
 
+  int length (void) const
+  {
+    int r = rows ();
+    int c = columns ();
+
+    return r > c ? r : c;
+  }
+
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_complex_matrix (void) const { return true; }
 
   octave_value all (void) const { return matrix.all (); }
   octave_value any (void) const { return matrix.any (); }
diff --git a/src/ov-range.h b/src/ov-range.h
--- a/src/ov-range.h
+++ b/src/ov-range.h
@@ -93,16 +93,18 @@ public:
 
   octave_value do_index_op (const octave_value_list& idx);
 
   idx_vector index_vector (void) const { return idx_vector (range); }
 
   int rows (void) const { return (columns () > 0); }
   int columns (void) const { return range.nelem (); }
 
+  int length (void) const { return range.nelem (); }
+
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_range (void) const { return true; }
 
   // XXX DO ME XXX
   octave_value all (void) const;
diff --git a/src/ov-re-mat.h b/src/ov-re-mat.h
--- a/src/ov-re-mat.h
+++ b/src/ov-re-mat.h
@@ -100,16 +100,24 @@ public:
 
   octave_value do_struct_elt_index_op (const string& nm, bool silent);
 
   octave_lvalue struct_elt_ref (octave_value *parent, const string& nm);
 
   int rows (void) const { return matrix.rows (); }
   int columns (void) const { return matrix.columns (); }
 
+  int length (void) const
+  {
+    int r = rows ();
+    int c = columns ();
+
+    return r > c ? r : c;
+  }
+
   bool is_defined (void) const { return true; }
 
   bool is_constant (void) const { return true; }
 
   bool is_real_matrix (void) const { return true; }
 
   octave_value all (void) const { return matrix.all (); }
   octave_value any (void) const { return matrix.any (); }
diff --git a/src/ov-scalar.h b/src/ov-scalar.h
--- a/src/ov-scalar.h
+++ b/src/ov-scalar.h
@@ -75,16 +75,18 @@ public:
 
   octave_value do_index_op (const octave_value_list& idx);
 
   idx_vector index_vector (void) const { return idx_vector (scalar); }
 
   int rows (void) const { return 1; }
   int columns (void) const { return 1; }
 
+  int length (void) const { return 1; }
+
   bool is_constant (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   bool is_real_scalar (void) const { return true; }
 
   octave_value all (void) const { return (scalar != 0.0); }
   octave_value any (void) const { return (scalar != 0.0); }
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -253,16 +253,19 @@ public:
   // Size.
 
   virtual int rows (void) const
     { return rep->rows (); }
 
   virtual int columns (void) const
     { return rep->columns (); }
 
+  virtual int length (void) const
+    { return rep->length (); }
+
   // Does this constant have a type?  Both of these are provided since
   // it is sometimes more natural to write is_undefined() instead of
   // ! is_defined().
 
   virtual bool is_defined (void) const
     { return rep->is_defined (); }
 
   bool is_undefined (void) const
@@ -548,16 +551,20 @@ extern bool Vprint_answer_id_name;
 extern int Vpropagate_empty_matrices;
 
 // How many levels of structure elements should we print?
 extern int Vstruct_levels_to_print;
 
 // Allow divide by zero errors to be suppressed.
 extern bool Vwarn_divide_by_zero;
 
+// If TRUE, resize matrices when performing and indexed assignment and
+// the indices are outside the current bounds.
+extern bool Vresize_on_range_error;
+
 // Indentation level for structures.
 extern int struct_indent;
 
 extern void increment_struct_indent (void);
 extern void decrement_struct_indent (void);
 
 // Indentation level for lists.
 extern int list_indent;
diff --git a/src/parse.y b/src/parse.y
--- a/src/parse.y
+++ b/src/parse.y
@@ -1867,17 +1867,17 @@ make_prefix_op (int op, tree_expression 
       break;
     }
 
   int l = tok_val->line ();
   int c = tok_val->column ();
 
   // XXX FIXME XXX -- what about constant folding here?
 
-  return new tree_prefix_expression (t, op1, l, c);
+  return new tree_prefix_expression (op1, l, c, t);
 }
 
 // Build a postfix expression.
 
 static tree_expression *
 make_postfix_op (int op, tree_expression *op1, token *tok_val)
 {
   tree_postfix_expression::type t;
@@ -1905,17 +1905,17 @@ make_postfix_op (int op, tree_expression
       break;
     }
 
   int l = tok_val->line ();
   int c = tok_val->column ();
 
   // XXX FIXME XXX -- what about constant folding here?
 
-  return new tree_postfix_expression (t, op1, l, c);
+  return new tree_postfix_expression (op1, l, c, t);
 }
 
 // Build an unwind-protect command.
 
 static tree_command *
 make_unwind_command (token *unwind_tok, tree_statement_list *body,
 		     tree_statement_list *cleanup, token *end_tok)
 {
diff --git a/src/pt-unop.h b/src/pt-unop.h
--- a/src/pt-unop.h
+++ b/src/pt-unop.h
@@ -80,18 +80,18 @@ public:
       uminus,
       increment,
       decrement
     };
 
   tree_prefix_expression (int l = -1, int c = -1)
     : tree_unary_expression (l, c), etype (unknown) { }
 
-  tree_prefix_expression (type t = unknown, tree_expression *e,
-			  int l = -1, int c = -1)
+  tree_prefix_expression (tree_expression *e, int l = -1, int c = -1,
+			  type t = unknown)
     : tree_unary_expression (e, l, c), etype (t) { }
 
   ~tree_prefix_expression (void) { }
 
   bool rvalue_ok (void) const
     { return true; }
 
   octave_value rvalue (void);
@@ -130,18 +130,18 @@ public:
       transpose,
       increment,
       decrement
     };
 
   tree_postfix_expression (int l = -1, int c = -1)
     : tree_unary_expression (l, c), etype (unknown) { }
 
-  tree_postfix_expression (type t = unknown, tree_expression *e,
-			   int l = -1, int c = -1)
+  tree_postfix_expression (tree_expression *e, int l = -1, int c = -1,
+			   type t = unknown)
     : tree_unary_expression (e, l, c), etype (t) { }
 
   ~tree_postfix_expression (void) { }
 
   bool rvalue_ok (void) const
     { return true; }
 
   octave_value rvalue (void);
diff --git a/src/utils.cc b/src/utils.cc
--- a/src/utils.cc
+++ b/src/utils.cc
@@ -230,33 +230,54 @@ empty_arg (const char *name, int nr, int
 string
 search_path_for_file (const string& path, const string& name)
 {
   dir_path p (path);
 
   return octave_env::make_absolute (p.find (name), octave_env::getcwd ());
 }
 
+DEFUN (file_in_loadpath, args, ,
+  "file_in_loadpath (NAME)\n\
+\n\
+Look up NAME in LOADPATH.  See also file_in_path")
+{
+  octave_value_list retval;
+
+  int argc = args.length () + 1;
+
+  string_vector argv = args.make_argv ("file_in_loadpath");
+
+  if (error_state)
+    return retval;
+
+  if (argc == 3)
+    retval = octave_env::make_absolute (Vload_path_dir_path.find (argv[1]),
+					octave_env::getcwd ());
+  else
+    print_usage ("file_in_loadpath");
+
+  return retval;
+}
+
 DEFUN (file_in_path, args, ,
   "file_in_path (PATH, NAME)")
 {
   octave_value_list retval;
 
   int argc = args.length () + 1;
 
   string_vector argv = args.make_argv ("file_in_path");
 
   if (error_state)
     return retval;
 
   if (argc == 3)
     {
-      string path = maybe_add_default_load_path (argv[1]);
-
-      string fname = search_path_for_file (path, argv[2]);
+      string fname = search_path_for_file (argv[1], argv[2]);
 
       if (fname.empty ())
 	retval = Matrix ();
       else
 	retval = fname;
     }
   else
     print_usage ("file_in_path");
diff --git a/src/xdiv.cc b/src/xdiv.cc
--- a/src/xdiv.cc
+++ b/src/xdiv.cc
@@ -48,61 +48,67 @@ result_ok (int info, double rcond, int w
       return 0;
     }
   else
     return 1;
 }
 
 template <class T1, class T2>
 bool
-mx_leftdiv_conform (T1 a, T2 b)
+mx_leftdiv_conform (const T1& a, const T2& b)
 {
   int a_nr = a.rows ();
   int b_nr = b.rows ();
 
   if (a_nr != b_nr)
     {
       int a_nc = a.cols ();
       int b_nc = b.cols ();
 
       gripe_nonconformant ("operator \\", a_nr, a_nc, b_nr, b_nc);
       return false;
     }
 
   return true;
 }
 
-template bool mx_leftdiv_conform (Matrix&, Matrix&);
-template bool mx_leftdiv_conform (Matrix&, ComplexMatrix&);
-template bool mx_leftdiv_conform (ComplexMatrix&, ComplexMatrix&);
-template bool mx_leftdiv_conform (ComplexMatrix&, Matrix&);
+#define INSTANTIATE_MX_LEFTDIV_CONFORM(T1, T2) \
+  template bool mx_leftdiv_conform (const T1&, const T2&)
+
+INSTANTIATE_MX_LEFTDIV_CONFORM (Matrix, Matrix);
+INSTANTIATE_MX_LEFTDIV_CONFORM (Matrix, ComplexMatrix);
+INSTANTIATE_MX_LEFTDIV_CONFORM (ComplexMatrix, Matrix);
+INSTANTIATE_MX_LEFTDIV_CONFORM (ComplexMatrix, ComplexMatrix);
 
 template <class T1, class T2>
 bool
-mx_div_conform (T1 a, T2 b)
+mx_div_conform (const T1& a, const T2& b)
 {
   int a_nc = a.cols ();
   int b_nc = b.cols ();
 
   if (a_nc != b_nc)
     {
       int a_nr = a.rows ();
       int b_nr = b.rows ();
 
       gripe_nonconformant ("operator /", a_nr, a_nc, b_nr, b_nc);
       return false;
     }
 
   return true;
 }
 
-template bool mx_div_conform (Matrix&, Matrix&);
-template bool mx_div_conform (Matrix&, ComplexMatrix&);
-template bool mx_div_conform (ComplexMatrix&, ComplexMatrix&);
-template bool mx_div_conform (ComplexMatrix&, Matrix&);
+#define INSTANTIATE_MX_DIV_CONFORM(T1, T2) \
+  template bool mx_div_conform (const T1&, const T2&)
+
+INSTANTIATE_MX_DIV_CONFORM (Matrix, Matrix);
+INSTANTIATE_MX_DIV_CONFORM (Matrix, ComplexMatrix);
+INSTANTIATE_MX_DIV_CONFORM (ComplexMatrix, Matrix);
+INSTANTIATE_MX_DIV_CONFORM (ComplexMatrix, ComplexMatrix);
 
 // Right division functions.
 //
 //       op2 / op1:   m   cm
 //            +--   +---+----+
 //   matrix         | 1 |  3 |
 //                  +---+----+
 //   complex_matrix | 2 |  4 |
