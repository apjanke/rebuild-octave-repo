# HG changeset patch
# User jwe
# Date 886363868 0
#      Sun Feb 01 20:11:08 1998 +0000
# Node ID af7ec9d3a5e674b7f9e2754919fa9c607fee4a26
# Parent  267b3a5c6b28c5581e3ad461cd5068edc06879ee
[project @ 1998-02-01 20:11:06 by jwe]

diff --git a/ChangeLog b/ChangeLog
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,8 +1,14 @@
+Sat Jan 31 19:29:56 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* acconfig.h: Add #undefs for HAVE_GAMMA and HAVE_LGAMMA to avoid
+	bug in autoconf, but #if 0 them out to avoid warning messages
+	about redefining them.
+
 Mon Jan 26 13:26:09 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* Makeconf.in (do-subst-config-vals): Substitute XTRA_CFLAGS and
 	XTRA_CXXFLAGS.
 	* mkoctfile.in: Substitute XTRA_CFLAGS and XTRA_CXXFLAGS, not
 	GCC_IEEE_FP_FLAG, HOST_CXXFLAGS, and NO_IMPLICIT_TEMPLATES.
 	(ALL_CFLAGS): Use XTRA_CFLAGS, not GCC_IEEE_FP_FLAG here.
 	(ALL_CXXFLAGS): Use XTRA_CXXFLAGS, not GCC_IEEE_FP_FLAG,
diff --git a/Makeconf.in b/Makeconf.in
--- a/Makeconf.in
+++ b/Makeconf.in
@@ -236,17 +236,17 @@ localoctfilepath = @localoctfilepath@
 # should be a colon-separated list of directories.
 fcnfilepath = @fcnfilepath@
 
 # Where Octave will search to find image files.es.
 imagedir = @imagedir@
 imagepath = @imagepath@
 
 # The type of computer we are running on.
-target_host_type = @target_host_type@
+canonical_host_type = @canonical_host_type@
 
 # The following pattern rules and the substitution functions require
 # GNU make.  If you don't have it, get it!
 
 # Rules for making object files from Fortran source.
 #
 # If we are using f2c there will be a command for the `%.c : %.f'
 # pattern and no command for the `%.o : %.f' pattern, so that make
@@ -327,17 +327,17 @@ sed < $< \
   -e "s;%LEXLIB%;\"${LEXLIB}\";" \
   -e "s;%LIBDLFCN%;\"${LIBDLFCN}\";" \
   -e "s;%LIBFLAGS%;\"-L${libdir}\";" \
   -e "s;%LIBPLPLOT%;\"${LIBPLPLOT}\";" \
   -e "s;%LIBS%;\"${LIBS}\";" \
   -e "s;%RLD_FLAG%;\"${RLD_FLAG}\";" \
   -e "s;%SH_LD%;\"${SH_LD}\";" \
   -e "s;%SH_LDFLAGS%;\"${SH_LDFLAGS}\";" \
-  -e "s;%TARGET_HOST_TYPE%;\"${target_host_type}\";" \
+  -e "s;%TARGET_HOST_TYPE%;\"${canonical_host_type}\";" \
   -e "s;%TERMLIBS%;\"${TERMLIBS}\";" \
   -e "s;%VERSION%;\"${version}\";" \
   -e "s;%XTRA_CFLAGS%;\"${XTRA_CFLAGS}\";" \
   -e "s;%XTRA_CXXFLAGS%;\"${XTRA_CXXFLAGS}\";" \
   -e "s;%config_opts%;\"${config_opts}\";" | \
   sed  -e "s;%DEFS%;\"${UGLY_DEFS}\";" > $@.tmp
 $(top_srcdir)/move-if-change $@.tmp $@
 endef
@@ -357,17 +357,17 @@ sed < $< > $@.tmp \
   -e "s;%OCTAVE_INFOFILE%;\"${infofile}\";" \
   -e "s;%OCTAVE_LIBDIR%;\"${libdir}\";" \
   -e "s;%OCTAVE_LOCALARCHLIBDIR%;\"${localarchlibdir}\";" \
   -e "s;%OCTAVE_LOCALFCNFILEDIR%;\"${localfcnfiledir}\";" \
   -e "s;%OCTAVE_LOCALFCNFILEPATH%;\"${localfcnfilepath}\";" \
   -e "s;%OCTAVE_LOCALOCTFILEPATH%;\"${localoctfilepath}\";" \
   -e "s;%OCTAVE_OCTFILEDIR%;\"${octfiledir}\";" \
   -e "s;%OCTAVE_PREFIX%;\"${prefix}\";" \
-  -e "s;%TARGET_HOST_TYPE%;\"${target_host_type}\";"
+  -e "s;%TARGET_HOST_TYPE%;\"${canonical_host_type}\";"
 $(top_srcdir)/move-if-change $@.tmp $@
 endef
 
 # Make a relative symbolic link from $includedir/octave to $octincludedir. 
 
 # XXX FIXME XXX -- this assumes that $octincludedir is a subdirectory
 # of $includedir.
 
diff --git a/PROJECTS b/PROJECTS
--- a/PROJECTS
+++ b/PROJECTS
@@ -114,16 +114,19 @@ Graphics:
 --------
 
   * Make plotting with plplot work.
 
   * Fix interface with gnuplot to wait for gnuplot to output any text
     before octave returns a prompt.  Possible by implementing two
     way communication between gnuplot and Octave.
 
+  * Handle gnuplot ranges correctly for parametric modes (accept 3
+    ranges for 2d plots and 5 ranges for 3d plots).
+
   * Make gsave (and possibly gload) work.  Implement gsave by having it
     also alter the plot command to not use temporary files (perhaps
     with some user-specified template for naming them) and then
     sending a `save' command to gnuplot.
 
   * It would be nice to be able to check that a plot is currently
     being displayed.
 
@@ -704,16 +707,37 @@ Miscellaneous:
       Octave i.e. the all big files, the user see as one big array or
       such.  There could be several user selectable models to do the
       virtual memory depending on what kind of data the user have (1d,
       2d) and in what order they are processed (stream or random
       access).
 
     Perhaps this can be done entirely with a library of M-files.
 
+  * An interface to gdb.
+
+    Michael Smolsky <fnsiguc@weizmann.weizmann.ac.il> wrote:
+
+      I was thinking about a tool, which could be very useful for me
+      in my numerical simulation work. It is an interconnection
+      between gdb and octave. We are often managing very large arrays
+      of data in our fortran or c codes, which might be studied with
+      the help of octave at the algorithm development stages. Assume
+      you're coding, say, wave equation.  And want to debug the
+      code. It would be great to pick some array from the memory of
+      the code you're develloping, fft it and see the image as a
+      log-log plot of the spectral density. I'm facing similar
+      problems now.  To avoid high c-development cost, I develop in
+      matlab/octave, and then rewrite into c. It might be so much
+      easier, if I could off-load a c array right from the debugger
+      into octave, study it, and, perhaps, change some [many] values
+      with a convenient matlab/octave syntax, similar to
+      a(:,50:250)=zeros(100,200), and then store it back into the
+      memory of my c code.
+
   * Add a function like strptime() which is the opposite of
     strftime().  A C version is apparently in recent releases of the
     Linux C library.
 
   * Add a definition to lgrind so that it supports Octave.
     (See http://www.tex.ac.uk/tex-archive/support/lgrind/ for more
     information about lgrind.)
 
diff --git a/acconfig.h b/acconfig.h
--- a/acconfig.h
+++ b/acconfig.h
@@ -31,16 +31,23 @@
 #undef GNUPLOT_HAS_FRAMES
 
 /* Define if your gnuplot has mutliplot. */
 #undef GNUPLOT_HAS_MULTIPLOT
 
 /* Define if your system's struct group has a gr_passwd field. */
 #undef HAVE_GR_PASSWD
 
+#if 0
+/* These are just here to keep autoheader from thinking that they are
+   missing even though they really aren't. */
+#undef HAVE_GAMMA
+#undef HAVE_LGAMMA
+#endif
+
 /* Define if you have isinf(). */
 #undef HAVE_ISINF
 
 /* Define if you have isnan(). */
 #undef HAVE_ISNAN
 
 /* Define if you have BSD style signals. */
 #undef HAVE_BSD_SIGNALS
diff --git a/libcruft/ChangeLog b/libcruft/ChangeLog
--- a/libcruft/ChangeLog
+++ b/libcruft/ChangeLog
@@ -1,8 +1,14 @@
+Sun Feb  1 12:39:10 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* quadpack/dqagi.f, quadpack/dqagie.f, quadpack/dqagp.f,
+	quadpack/dqagpe.f, quadpack/dqk15i.f, quadpack/dqk21.f:
+	Make user-supplied code a subroutine instead of a function.
+
 Mon Jan 19 23:11:21 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* lapack/xdlange.f, lapack/xzlange.f: New files.
 
 Mon Dec  1 00:51:03 1997  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dassl/xerhlt.f, dassl/xermsg.f, dassl/xerprn.f, dassl/xgetua.f,
 	dassl/xsetua.f: Delete.
diff --git a/libcruft/quadpack/dqagp.f b/libcruft/quadpack/dqagp.f
--- a/libcruft/quadpack/dqagp.f
+++ b/libcruft/quadpack/dqagp.f
@@ -179,17 +179,17 @@ C                    WORK(LIMIT*4+1), ..
 C                     CONTAIN THE INTEGRATION LIMITS AND THE
 C                     BREAK POINTS SORTED IN AN ASCENDING SEQUENCE.
 C                    NOTE THAT LIMIT = (LENIW-NPTS2)/2.
 C
 C***REFERENCES  (NONE)
 C***ROUTINES CALLED  DQAGPE,XERROR
 C***END PROLOGUE  DQAGP
 C
-      DOUBLE PRECISION A,ABSERR,B,EPSABS,EPSREL,F,POINTS,RESULT,WORK
+      DOUBLE PRECISION A,ABSERR,B,EPSABS,EPSREL,POINTS,RESULT,WORK
       INTEGER IER,IWORK,LAST,LENIW,LENW,LIMIT,LVL,L1,L2,L3,L4,NEVAL,
      *  NPTS2
 C
       DIMENSION IWORK(LENIW),POINTS(NPTS2),WORK(LENW)
 C
       EXTERNAL F
 C
 C         CHECK VALIDITY OF LIMIT AND LENW.
diff --git a/libcruft/quadpack/dqk15i.f b/libcruft/quadpack/dqk15i.f
--- a/libcruft/quadpack/dqk15i.f
+++ b/libcruft/quadpack/dqk15i.f
@@ -65,17 +65,17 @@ C              RESASC - DOUBLE PRECISION
 C                       APPROXIMATION TO THE INTEGRAL OF
 C                       ABS((TRANSFORMED INTEGRAND)-I/(B-A)) OVER (A,B)
 C
 C***REFERENCES  (NONE)
 C***ROUTINES CALLED  D1MACH
 C***END PROLOGUE  DQK15I
 C
       DOUBLE PRECISION A,ABSC,ABSC1,ABSC2,ABSERR,B,BOUN,CENTR,DABS,DINF,
-     *  DMAX1,DMIN1,D1MACH,EPMACH,F,FC,FSUM,FVAL1,FVAL2,FV1,FV2,HLGTH,
+     *  DMAX1,DMIN1,D1MACH,EPMACH,FC,FSUM,FVAL1,FVAL2,FV1,FV2,HLGTH,
      *  RESABS,RESASC,RESG,RESK,RESKH,RESULT,TABSC1,TABSC2,UFLOW,WG,WGK,
      *  XGK,FVALT
       INTEGER INF,J
       EXTERNAL F
 C
       DIMENSION FV1(7),FV2(7),XGK(8),WGK(8),WG(8)
 C
 C           THE ABSCISSAE AND WEIGHTS ARE SUPPLIED FOR THE INTERVAL
diff --git a/libcruft/quadpack/dqk21.f b/libcruft/quadpack/dqk21.f
--- a/libcruft/quadpack/dqk21.f
+++ b/libcruft/quadpack/dqk21.f
@@ -45,17 +45,17 @@ C              RESASC - DOUBLE PRECISION
 C                       APPROXIMATION TO THE INTEGRAL OF ABS(F-I/(B-A))
 C                       OVER (A,B)
 C
 C***REFERENCES  (NONE)
 C***ROUTINES CALLED  D1MACH
 C***END PROLOGUE  DQK21
 C
       DOUBLE PRECISION A,ABSC,ABSERR,B,CENTR,DABS,DHLGTH,DMAX1,DMIN1,
-     *  D1MACH,EPMACH,F,FC,FSUM,FVAL1,FVAL2,FV1,FV2,HLGTH,RESABS,RESASC,
+     *  D1MACH,EPMACH,FC,FSUM,FVAL1,FVAL2,FV1,FV2,HLGTH,RESABS,RESASC,
      *  RESG,RESK,RESKH,RESULT,UFLOW,WG,WGK,XGK
       INTEGER J,JTW,JTWM1
       EXTERNAL F
 C
       DIMENSION FV1(10),FV2(10),WG(5),WGK(11),XGK(11)
 C
 C           THE ABSCISSAE AND WEIGHTS ARE GIVEN FOR THE INTERVAL (-1,1).
 C           BECAUSE OF SYMMETRY ONLY THE POSITIVE ABSCISSAE AND THEIR
@@ -134,17 +134,17 @@ C
       HLGTH = 0.5D+00*(B-A)
       DHLGTH = DABS(HLGTH)
 C
 C           COMPUTE THE 21-POINT KRONROD APPROXIMATION TO
 C           THE INTEGRAL, AND ESTIMATE THE ABSOLUTE ERROR.
 C
       RESG = 0.0D+00
       IERR = 0
-      CALL F (CENTR,IERR,FC)
+      CALL F(CENTR,IERR,FC)
       IF (IERR .LT. 0) RETURN
       RESK = WGK(11)*FC
       RESABS = DABS(RESK)
       DO 10 J=1,5
         JTW = 2*J
         ABSC = HLGTH*XGK(JTW)
         CALL F(CENTR-ABSC,IERR,FVAL1)
         IF (IERR .LT. 0) RETURN
diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,12 @@
+Fri Jan 30 23:48:43 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* chMatrix.cc (charMatrix::all, charMatrix::any): New functions.
+
 Tue Jan 20 16:30:00 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* dMatrix.cc (Matrix::expm): Skip trace normalization step if the
 	trace is negative. 
 	* CMatrix.cc (ComplexMatrix::expm): Skip trace normalization if
 	the real part of the trace is negative.
 
 Mon Jan 19 16:01:59 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
diff --git a/liboctave/Quad.cc b/liboctave/Quad.cc
--- a/liboctave/Quad.cc
+++ b/liboctave/Quad.cc
@@ -38,47 +38,53 @@ static integrand_fcn user_fcn;
 // XXX FIXME XXX -- would be nice to not have to have this global
 // variable.
 // Nonzero means an error occurred in the calculation of the integrand
 // function, and the user wants us to quit.
 int quad_integration_error = 0;
 
 extern "C"
 {
-  int F77_FCN (dqagp, DQAGP) (const double (*)(double*, int&),
+  int F77_FCN (dqagp, DQAGP) (int (*)(double*, int&, double*),
 			      const double&, const double&,
 			      const int&, const double*,
 			      const double&, const double&, double&,
 			      double&, int&, int&, const int&,
 			      const int&, int&, int*, double*);
 
-  int F77_FCN (dqagi, DQAGI) (const double (*)(double*, int&),
+  int F77_FCN (dqagi, DQAGI) (int (*)(double*, int&, double*),
 			      const double&, const int&,
 			      const double&, const double&, double&,
 			      double&, int&, int&, const int&,
 			      const int&, int&, int*, double*); 
 }
 
-static double
-user_function (double *x, int& ierr)
+static int
+user_function (double *x, int& ierr, double *result)
 {
 #if defined (sun) && defined (__GNUC__)
   double xx = access_double (x);
 #else
   double xx = *x;
 #endif
 
   quad_integration_error = 0;
 
-  double retval = (*user_fcn) (xx);
+  double xresult = (*user_fcn) (xx);
+
+#if defined (sun) && defined (__GNUC__)
+  assign_double (result, xresult);
+#else
+  *result = xresult;
+#endif
 
   if (quad_integration_error)
     ierr = -1;
 
-  return retval;
+  return 0;
 }
 
 double
 DefQuad::integrate (int& ier, int& neval, double& abserr)
 {
   int npts = singularities.capacity () + 2;
   double *points = singularities.fortran_vec ();
   double result = 0.0;
diff --git a/liboctave/chMatrix.cc b/liboctave/chMatrix.cc
--- a/liboctave/chMatrix.cc
+++ b/liboctave/chMatrix.cc
@@ -171,13 +171,124 @@ charMatrix::transpose (void) const
     {
       for (int j = 0; j < nc; j++)
 	for (int i = 0; i < nr; i++)
 	  result.elem (j, i) = elem (i, j);
     }
   return result;
 }
 
+// XXX FIXME XXX -- these should probably return a boolMatrix type
+// instead, but that will have to wait for a future version...
+
+Matrix
+charMatrix::all (void) const
+{
+  int nr = rows ();
+  int nc = cols ();
+  Matrix retval;
+  if (nr > 0 && nc > 0)
+    {
+      if (nr == 1)
+	{
+	  retval.resize (1, 1);
+	  retval.elem (0, 0) = 1.0;
+	  for (int j = 0; j < nc; j++)
+	    {
+	      if (elem (0, j) == 0)
+		{
+		  retval.elem (0, 0) = 0.0;
+		  break;
+		}
+	    }
+	}
+      else if (nc == 1)
+	{
+	  retval.resize (1, 1);
+	  retval.elem (0, 0) = 1.0;
+	  for (int i = 0; i < nr; i++)
+	    {
+	      if (elem (i, 0) == 0)
+		{
+		  retval.elem (0, 0) = 0.0;
+		  break;
+		}
+	    }
+	}
+      else
+	{
+	  retval.resize (1, nc);
+	  for (int j = 0; j < nc; j++)
+	    {
+	      retval.elem (0, j) = 1.0;
+	      for (int i = 0; i < nr; i++)
+		{
+		  if (elem (i, j) == 0)
+		    {
+		      retval.elem (0, j) = 0.0;
+		      break;
+		    }
+		}
+	    }
+	}
+    }
+  return retval;
+}
+
+Matrix
+charMatrix::any (void) const
+{
+  int nr = rows ();
+  int nc = cols ();
+  Matrix retval;
+  if (nr > 0 && nc > 0)
+    {
+      if (nr == 1)
+	{
+	  retval.resize (1, 1);
+	  retval.elem (0, 0) = 0.0;
+	  for (int j = 0; j < nc; j++)
+	    {
+	      if (elem (0, j) != 0)
+		{
+		  retval.elem (0, 0) = 1.0;
+		  break;
+		}
+	    }
+	}
+      else if (nc == 1)
+	{
+	  retval.resize (1, 1);
+	  retval.elem (0, 0) = 0.0;
+	  for (int i = 0; i < nr; i++)
+	    {
+	      if (elem (i, 0) != 0)
+		{
+		  retval.elem (0, 0) = 1.0;
+		  break;
+		}
+	    }
+	}
+      else
+	{
+	  retval.resize (1, nc);
+	  for (int j = 0; j < nc; j++)
+	    {
+	      retval.elem (0, j) = 0.0;
+	      for (int i = 0; i < nr; i++)
+		{
+		  if (elem (i, j) != 0)
+		    {
+		      retval.elem (0, j) = 1.0;
+		      break;
+		    }
+		}
+	    }
+	}
+    }
+  return retval;
+}
+
 /*
 ;;; Local Variables: ***
 ;;; mode: C++ ***
 ;;; End: ***
 */
diff --git a/liboctave/chMatrix.h b/liboctave/chMatrix.h
--- a/liboctave/chMatrix.h
+++ b/liboctave/chMatrix.h
@@ -63,16 +63,19 @@ public:
 
   charMatrix& insert (const char *s, int r, int c);
   charMatrix& insert (const charMatrix& a, int r, int c);
 
   string row_as_string (int r, bool strip_trailing_whitespace = false) const;
 
   charMatrix transpose (void) const;
 
+  Matrix all (void) const;
+  Matrix any (void) const;
+
 #if 0
   // i/o
 
   friend ostream& operator << (ostream& os, const Matrix& a);
   friend istream& operator >> (istream& is, Matrix& a);
 #endif
 
 private:
diff --git a/octMakefile.in b/octMakefile.in
--- a/octMakefile.in
+++ b/octMakefile.in
@@ -212,21 +212,21 @@ conf-dist:
 
 # Rules for making a binary distribution.
 
 VERSION:
 	echo $(version) > VERSION
 .PHONY: VERSION
 
 ARCH:
-	echo $(target_host_type) > ARCH
+	echo $(canonical_host_type) > ARCH
 .PHONY: ARCH
 
 binary-dist: VERSION ARCH octave-bug dist-info-files
-	echo octave-$(version)-$(target_host_type) > .fname
+	echo octave-$(version)-$(canonical_host_type) > .fname
 	rm -rf `cat .fname`
 	mkdir `cat .fname`
 	ln $(BINDISTFILES) `cat .fname`
 	for dir in $(BINDISTSUBDIRS); do \
 	  mkdir `cat .fname`/$$dir; \
 	  cd $$dir; \
 	  $(MAKE) bin-dist; \
 	  cd ..; \
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,22 @@
+Sat Jan 31 01:09:32 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* signal/fftshift.m: New file.
+
+	* plot/contour.m: Fix for non-square case.
+
+	* general/randperm.m: New file.
+
+Fri Jan 30 15:20:39 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* specfun/betai.m: Restore file for compatibility with previous
+	versions.  Call betainc with reordered args.
+	* specfun/gammai.m: Likewise, call gammainc with reordered args.
+
 Wed Jan 28 22:44:59 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* plot/contour.m: Handle discrete contour levels.
 
 Tue Jan 27 04:31:22 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* control/lyap.m: For compatibility with Matlab, solve
  	A*X + X*A' + C = 0 instead of A'*X + X*A + C = 0.
diff --git a/scripts/plot/contour.m b/scripts/plot/contour.m
--- a/scripts/plot/contour.m
+++ b/scripts/plot/contour.m
@@ -64,17 +64,17 @@ function contour (z, n, x, y)
           x = x';
         endif
         len = 3 * ylen;
         zz = zeros (xlen, len);
         k = 1;
         for i = 1:3:len
           zz(:,i)   = x;
           zz(:,i+1) = y(k) * ones (xlen, 1);
-          zz(:,i+2) = z(k,:)';
+          zz(:,i+2) = z(:,k);
           k++;
         endfor
         gset nosurface;
         gset contour;
         gset cntrparam bspline;
 	if (is_scalar (n))
           command = sprintf ("gset cntrparam levels %d", n);
 	elseif (is_vector (n))
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,31 @@
+Sat Jan 31 00:00:26 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-ch-mat.cc (octave_char_matrix::is_true): Make it work.
+	* ov-str-mat.h, ov-str-mat.cc (octave_char_matrix_str::is_true):
+	Delete.
+
+	* load-save.cc (read_ascii_data): Allow strings of length 0.
+	If we don't find data on the first call, fail with error message.
+	(do_load): Pass count of items read to read_ascii_data.
+	Allow `load foo xyz' to work when foo contains only numbers.
+
+Fri Jan 30 23:46:42 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* ov-str-mat.h (octave_char_matrix_str::all): Delete.
+	(octave_char_matrix_str::any): Delete.
+	* ov-ch-mat.h (octave_char_matrix::all, octave_char_matrix::any):
+	Call charMatrix::all, charMatrix::any.
+
+Thu Jan 29 16:25:46 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
+
+	* load-save.cc (read_mat_binary_data): Handle third digit of MOPT
+	as flag indicating row or column major ordering.
+
 Wed Jan 28 00:18:17 1998  John W. Eaton  <jwe@bevo.che.wisc.edu>
 
 	* DLD-FUNCTIONS/dassl.cc (lsode_option_table):
 	Add missing & to function names.
 	* DLD-FUNCTIONS/lsode.cc (lsode_option_table): Likewise.
 	* DLD-FUNCTIONS/quad.cc (quad_option_table): Likewise.
 
 	* Makefile.in (oct-gperf.h): Add -G option to gperf.
diff --git a/src/error.cc b/src/error.cc
--- a/src/error.cc
+++ b/src/error.cc
@@ -44,17 +44,17 @@ Software Foundation, 59 Temple Place - S
 static bool Vbeep_on_error;
 
 // Current error state.
 int error_state = 0;
 
 // Tell the error handler whether to print messages, or just store
 // them for later.  Used for handling errors in eval() and
 // the `unwind_protect' statement.
-bool buffer_error_messages;
+bool buffer_error_messages = false;
 
 // The message buffer
 ostrstream *error_message_buffer = 0;
 
 static void
 verror (const char *name, const char *fmt, va_list args)
 {
   flush_octave_stdout ();
diff --git a/src/load-save.cc b/src/load-save.cc
--- a/src/load-save.cc
+++ b/src/load-save.cc
@@ -459,24 +459,29 @@ extract_keyword (istream& is, const char
 //  # length: 5
 //  array
 //
 // XXX FIXME XXX -- this format is fairly rigid, and doesn't allow for
 // arbitrary comments, etc.  Someone should fix that.
 
 static char *
 read_ascii_data (istream& is, const string& filename, bool& global,
-		 octave_value& tc)
+		 octave_value& tc, int count)
 {
   // Read name for this entry or break on EOF.
 
   char *name = extract_keyword (is, "name");
 
   if (! name)
-    return 0;
+    {
+      if (count == 0)
+	error ("load: no data found in file `%s'", filename.c_str ());
+
+      return 0;
+    }
 
   if (! *name)
     {
       error ("load: empty name keyword found in file `%s'",
 	     filename.c_str ());
       delete [] name;
       return 0;
     }
@@ -579,20 +584,20 @@ read_ascii_data (istream& is, const stri
 	      // XXX FIXME XXX -- need to be able to get max length
 	      // before doing anything.
 
 	      charMatrix chm (elements, 0);
 	      int max_len = 0;
 	      for (int i = 0; i < elements; i++)
 		{
 		  int len;
-		  if (extract_keyword (is, "length", len) && len > 0)
+		  if (extract_keyword (is, "length", len) && len >= 0)
 		    {
 		      char *tmp = new char [len+1];
-		      if (! is.read (tmp, len))
+		      if (len > 0 && ! is.read (tmp, len))
 			{
 			  error ("load: failed to load string constant");
 			  break;
 			}
 		      else
 			{
 			  tmp [len] = '\0';
 			  if (len > max_len)
@@ -1258,35 +1263,38 @@ read_mat_binary_data (istream& is, const
   // initialization of variable.
 
   Matrix re;
   oct_mach_info::float_format flt_fmt = oct_mach_info::unknown;
   char *name = 0;
   bool swap = false;
   int type = 0;
   int prec = 0;
+  int order = 0;
   int mach = 0;
   int dlen = 0;
 
   FOUR_BYTE_INT mopt, nr, nc, imag, len;
 
   int err = read_mat_file_header (is, swap, mopt, nr, nc, imag, len);
   if (err)
     {
       if (err < 0)
 	goto data_read_error;
       else
 	return 0;
     }
 
-  type = mopt % 10; // Full, sparse, etc.
-  mopt /= 10;       // Eliminate first digit.
-  prec = mopt % 10; // double, float, int, etc.
-  mopt /= 100;      // Skip unused third digit too.
-  mach = mopt % 10; // IEEE, VAX, etc.
+  type = mopt % 10;  // Full, sparse, etc.
+  mopt /= 10;        // Eliminate first digit.
+  prec = mopt % 10;  // double, float, int, etc.
+  mopt /= 10;        // Eliminate second digit.
+  order = mopt % 10; // Row or column major ordering.
+  mopt /= 10;        // Eliminate third digit.
+  mach = mopt % 10;  // IEEE, VAX, etc.
 
   flt_fmt = mopt_digit_to_float_format (mach);
 
   if (flt_fmt == oct_mach_info::unknown)
     {
       error ("load: unrecognized binary format!");
       return 0;
     }
@@ -1311,16 +1319,23 @@ read_mat_binary_data (istream& is, const
   if (! is.read (name, len))
     goto data_read_error;
   name[len] = '\0';
 
   dlen = nr * nc;
   if (dlen < 0)
     goto data_read_error;
 
+  if (order)
+    {
+      int tmp = nr;
+      nr = nc;
+      nc = tmp;
+    }
+
   re.resize (nr, nc);
 
   read_mat_binary_data (is, re.fortran_vec (), prec, dlen, swap, flt_fmt);
 
   if (! is || error_state)
     {
       error ("load: reading matrix data for `%s'", name);
       goto data_read_error;
@@ -1339,20 +1354,20 @@ read_mat_binary_data (istream& is, const
 	}
 
       ComplexMatrix ctmp (nr, nc);
 
       for (int j = 0; j < nc; j++)
 	for (int i = 0; i < nr; i++)
 	  ctmp (i, j) = Complex (re (i, j), im (i, j));
 
-      tc = ctmp;
+      tc = order ? ctmp.transpose () : ctmp;
     }
   else
-    tc = re;
+    tc = order ? re.transpose () : re;
 
   if (type == 1)
     tc = tc.convert_to_str ();
 
   return name;
 
  data_read_error:
   error ("load: trouble reading binary file `%s'", filename.c_str ());
@@ -1492,17 +1507,17 @@ do_load (istream& stream, const string& 
       octave_value tc;
 
       char *name = 0;
       char *doc = 0;
 
       switch (format)
 	{
 	case LS_ASCII:
-	  name = read_ascii_data (stream, orig_fname, global, tc);
+	  name = read_ascii_data (stream, orig_fname, global, tc, count);
 	  break;
 
 	case LS_BINARY:
 	  name = read_binary_data (stream, swap, flt_fmt, orig_fname,
 				   global, tc, doc);
 	  break;
 
 	case LS_MAT_ASCII:
@@ -1524,17 +1539,22 @@ do_load (istream& stream, const string& 
 	  delete [] doc;
 
 	  break;
 	}
       else if (! error_state && name)
 	{
 	  if (tc.is_defined ())
 	    {
-	      if (argv_idx == argc
+	      if (format == LS_MAT_ASCII && argv_idx < argc)
+		warning ("load: loaded ASCII file `%s' -- ignoring extra args",
+			 orig_fname.c_str());
+
+	      if (format == LS_MAT_ASCII
+		  || argv_idx == argc
 		  || matches_patterns (argv, argv_idx, argc, name))
 		{
 		  count++;
 		  if (list_only)
 		    {
 		      if (verbose)
 			{
 			  if (count == 1)
diff --git a/src/ov-ch-mat.cc b/src/ov-ch-mat.cc
--- a/src/ov-ch-mat.cc
+++ b/src/ov-ch-mat.cc
@@ -44,32 +44,51 @@ int
 octave_char_matrix::t_id (-1);
 
 const string
 octave_char_matrix::t_name ("char matrix");
 
 bool
 octave_char_matrix::valid_as_scalar_index (void) const
 {
-  // XXX FIXME XXX
-  return false;
+  bool retval = false;
+  error ("octave_char_matrix::valid_as_scalar_index(): not implemented");
+  return retval;
 }
 
 bool
 octave_char_matrix::valid_as_zero_index (void) const
 {
-  // XXX FIXME XXX
-  return false;
+  bool retval = false;
+  error ("octave_char_matrix::valid_as_zero_index(): not implemented");
+  return retval;
 }
 
 bool
 octave_char_matrix::is_true (void) const
 {
-  // XXX FIXME XXX
-  return false;
+  bool retval = false;
+
+  if (rows () == 0 || columns () == 0)
+    {
+      int flag = Vpropagate_empty_matrices;
+
+      if (flag < 0)
+	warning ("empty matrix used in conditional expression");
+      else if (flag == 0)
+	error ("empty matrix used in conditional expression");
+    }
+  else
+    {
+      Matrix m = (matrix.all ()) . all ();
+
+      retval = (m.rows () == 1 && m.columns () == 1 && m (0, 0) != 0.0);
+    }
+
+  return retval;
 }
 
 double
 octave_char_matrix::double_value (bool) const
 {
   double retval = octave_NaN;
 
   if ((rows () == 1 && columns () == 1)
diff --git a/src/ov-ch-mat.h b/src/ov-ch-mat.h
--- a/src/ov-ch-mat.h
+++ b/src/ov-ch-mat.h
@@ -85,19 +85,18 @@ public:
   int columns (void) const { return matrix.columns (); }
 
   bool is_constant (void) const { return true; }
 
   bool is_defined (void) const { return true; }
 
   bool is_char_matrix (void) const { return true; }
 
-  // XXX FIXME XXX
-  octave_value all (void) const { return 0.0; }
-  octave_value any (void) const { return 0.0; }
+  octave_value all (void) const { return matrix.all (); }
+  octave_value any (void) const { return matrix.any (); }
 
   bool is_real_type (void) const { return true; }
 
   bool is_matrix_type (void) const { return true; }
 
   bool is_numeric_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const;
diff --git a/src/ov-str-mat.cc b/src/ov-str-mat.cc
--- a/src/ov-str-mat.cc
+++ b/src/ov-str-mat.cc
@@ -135,55 +135,31 @@ octave_char_matrix_str::assign (const oc
 
     default:
       error ("invalid number of indices (%d) for indexed matrix assignment",
 	     len);
       break;
     }
 }
 
-octave_value
-octave_char_matrix_str::all (void) const
-{
-  octave_value retval;
-  error ("octave_char_matrix_str::all(): not implemented");
-  return retval;
-}
-
-octave_value
-octave_char_matrix_str::any (void) const
-{
-  octave_value retval;
-  error ("octave_char_matrix_str::any(): not implemented");
-  return retval;
-}
-
 bool
 octave_char_matrix_str::valid_as_scalar_index (void) const
 {
   bool retval = false;
   error ("octave_char_matrix_str::valid_as_scalar_index(): not implemented");
   return retval;
 }
 bool
 octave_char_matrix_str::valid_as_zero_index (void) const
 {
   bool retval = false;
   error ("octave_char_matrix_str::valid_as_zero_index(): not implemented");
   return retval;
 }
 
-bool
-octave_char_matrix_str::is_true (void) const
-{
-  bool retval = false;
-  error ("octave_char_matrix_str::is_true(): not implemented");
-  return retval;
-}
-
 Matrix
 octave_char_matrix_str::matrix_value (bool force_string_conv) const
 {
   Matrix retval;
 
   int flag = force_string_conv;
 
   if (! flag)
diff --git a/src/ov-str-mat.h b/src/ov-str-mat.h
--- a/src/ov-str-mat.h
+++ b/src/ov-str-mat.h
@@ -79,28 +79,23 @@ public:
   octave_value *clone (void) { return new octave_char_matrix_str (*this); }
 
   type_conv_fcn numeric_conversion_function (void) const;
 
   octave_value do_index_op (const octave_value_list& idx);
 
   void assign (const octave_value_list& idx, const charMatrix& rhs);
 
-  octave_value all (void) const;
-  octave_value any (void) const;
-
   bool is_string (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool valid_as_scalar_index (void) const;
   bool valid_as_zero_index (void) const;
 
-  bool is_true (void) const;
-
   Matrix matrix_value (bool = false) const;
 
   string_vector all_strings (void) const;
 
   string string_value (void) const;
 
   octave_value transpose (void) const
     { return octave_value (matrix.transpose (), true); }
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -555,17 +555,17 @@ information.")
   m ["startupfiledir"] = OCTAVE_STARTUPFILEDIR;
   m ["localfcnfilepath"] = OCTAVE_LOCALFCNFILEPATH;
   m ["archlibdir"] = OCTAVE_ARCHLIBDIR;
   m ["localarchlibdir"] = OCTAVE_LOCALARCHLIBDIR;
   m ["octfiledir"] = OCTAVE_OCTFILEDIR;
   m ["localoctfilepath"] = OCTAVE_LOCALOCTFILEPATH;
   m ["fcnfilepath"] = OCTAVE_FCNFILEPATH;
   m ["imagepath"] = OCTAVE_IMAGEPATH;
-  m ["target_host_type"] = TARGET_HOST_TYPE;
+  m ["canonical_host_type"] = TARGET_HOST_TYPE;
   m ["configure_options"] = config_opts;
   m ["F77"] = F77;
   m ["FFLAGS"] = FFLAGS;
   m ["FPICFLAG"] = FPICFLAG;
   m ["F2C"] = F2C;
   m ["F2CFLAGS"] = F2CFLAGS;
   m ["FLIBS"] = FLIBS;
   m ["CPPFLAGS"] = CPPFLAGS;
diff --git a/test/octave.test/prefer/prefer-39.m b/test/octave.test/prefer/prefer-39.m
--- a/test/octave.test/prefer/prefer-39.m
+++ b/test/octave.test/prefer/prefer-39.m
@@ -1,2 +1,4 @@
 warn_divide_by_zero = 1;
-isinf (1/0)
+a = 1;
+b = 0;
+isinf (a/b)
