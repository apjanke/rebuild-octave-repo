# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1405554930 14400
#      Wed Jul 16 19:55:30 2014 -0400
# Node ID 09eb8a2ddb0281de366aeb08d5a2f9cc79a618ee
# Parent  cc8aaf9c9e331261533b4ae6845bdac45a517de4
eliminate some unused parameter warnings in parser functions

* parse.in.yy, parse.h (octave_base_parser::make_superclass_ref,
octave_base_parser::make_meta_class_query): Eliminate unused line and
column number parameters.

diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -483,28 +483,25 @@ identifier      : NAME
                 ;
 
 superclass_identifier
                 : SUPERCLASSREF
                   {
                     std::string method_nm = $1->superclass_method_name ();
                     std::string class_nm = $1->superclass_class_name ();
 
-                    $$ = parser.make_superclass_ref
-                                       (method_nm, class_nm,
-                                        $1->line (), $1->column ());
+                    $$ = parser.make_superclass_ref (method_nm, class_nm);
                   }
                 ;
 
 meta_identifier : METAQUERY
                   {
                     std::string class_nm = $1->text ();
 
-                    $$ = parser.make_meta_class_query (class_nm, $1->line (),
-                                                       $1->column ());
+                    $$ = parser.make_meta_class_query (class_nm);
                   }
                 ;
 
 string          : DQ_STRING
                   { $$ = parser.make_constant (DQ_STRING, $1); }
                 | SQ_STRING
                   { $$ = parser.make_constant (SQ_STRING, $1); }
                 ;
@@ -3110,33 +3107,31 @@ octave_base_parser::recover_from_parsing
   lexer.defining_func--;
   lexer.parsed_function_name.pop ();
   lexer.looking_at_return_list = false;
   lexer.looking_at_parameter_list = false;
 }
 
 tree_funcall *
 octave_base_parser::make_superclass_ref (const std::string& method_nm,
-                                         const std::string& class_nm,
-                                         int l, int c)
+                                         const std::string& class_nm)
 {
   octave_value_list args;
 
   args(1) = class_nm;
   args(0) = method_nm;
 
   octave_value fcn
     = symbol_table::find_built_in_function ("__superclass_reference__");
 
   return new tree_funcall (fcn, args);
 }
 
 tree_funcall *
-octave_base_parser::make_meta_class_query (const std::string& class_nm,
-                                           int l, int c)
+octave_base_parser::make_meta_class_query (const std::string& class_nm)
 {
   octave_value_list args;
 
   args(0) = class_nm;
 
   octave_value fcn
     = symbol_table::find_built_in_function ("__meta_class_query__");
 
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -295,22 +295,20 @@ public:
                    int l, int c);
 
   // Reset state after parsing function.
   void
   recover_from_parsing_function (void);
 
   tree_funcall *
   make_superclass_ref (const std::string& method_nm,
-                       const std::string& class_nm,
-                       int l, int c);
+                       const std::string& class_nm);
 
   tree_funcall *
-  make_meta_class_query (const std::string& class_nm,
-                         int l, int c);
+  make_meta_class_query (const std::string& class_nm);
 
   tree_classdef *
   make_classdef (token *tok_val, tree_classdef_attribute_list *a,
                  tree_identifier *id, tree_classdef_superclass_list *sc,
                  tree_classdef_body *body, token *end_tok,
                  octave_comment_list *lc);
 
   tree_classdef_properties_block *
