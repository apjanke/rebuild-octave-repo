# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1213725501 14400
#      Tue Jun 17 13:58:21 2008 -0400
# Node ID 73ef513855e71a0e9066b1de6ae77d38c7fcb680
# Parent  76142609e8d2002346cf715a15295e98a789a55c
dbstack fixes

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,21 @@
+2008-06-17  John W. Eaton  <jwe@octave.org>
+
+	* toplev.h, toplev.cc (class octave_call_stack):
+	Push elements on and pop from back of queue.
+	(octave_call_stack::do_push, octave_call_stack::do_pop):
+	Always adjust curr_frame.
+	(octave_call_stack::size, octave_call_stack::do_size): New functions.
+	* pt-stmt.cc (tree_statement::eval):
+	Also call octave_call_stack::set_statement when debugging.
+	* debug.cc (push_dummy_call_stack_elt): New function.
+	(Fdbstack): Omit dbstack from call stack by popping element rather
+	than adjusting frame number.  Correctly handle arg.
+
 2008-06-12  David Bateman  <dbateman@free.fr>
 
 	* DLD-FUNCTIONS/qr.cc (Fqrupdate, Fqrinsert, Fqrshift, Fqrdelete):
 	Allow single precision arguments, add tests for single precision.
 
 2008-06-11  John W. Eaton  <jwe@octave.org>
 
 	* ov-base.cc (octave_base_value::streamoff_value,
diff --git a/src/debug.cc b/src/debug.cc
--- a/src/debug.cc
+++ b/src/debug.cc
@@ -690,95 +690,111 @@ List script file with line numbers.\n\
 	default:
 	  error ("dbtype: expecting zero, one, or two arguments\n");
 	}
     }
 
   return retval;
 }
 
+void
+push_dummy_call_stack_elt (void *)
+{
+  octave_call_stack::push (static_cast<octave_function *> (0));
+}
+
 DEFCMD (dbstack, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{stack}, @var{idx}]} dbstack (@var{n})\n\
 Print or return current stack information.  With optional argument\n\
 @var{n}, omit the @var{n} innermost stack frames.\n\
 @seealso{dbclear, dbstatus, dbstop}\n\
 @end deftypefn")
 {
   octave_value_list retval;
 
-  int n = 0;
+  unwind_protect::begin_frame ("Fdbstack");
+
+  // Debugging functions should not be included in the call stack, so
+  // we pop the dbstack function from the stack and then set up to
+  // restore a stack element when we exit this function (or when it is
+  // cleaned up).
+
+  octave_call_stack::pop ();
+
+  unwind_protect::add (push_dummy_call_stack_elt, 0);
+
+  size_t total_frames = octave_call_stack::size ();
+
+  size_t nframes = total_frames;
 
   if (args.length () == 1)
     {
+      int n = 0;
+
       octave_value arg = args(0);
 
       if (arg.is_string ())
 	{
 	  std::string s_arg = arg.string_value ();
 
 	  n = atoi (s_arg.c_str ());
 	}
       else
 	n = args(0).int_value ();
+
+      if (n > 0)
+	nframes = n;
+      else
+	error ("dbstack: expecting N to be a nonnegative integer");
     }
 
   if (! error_state)
     {
-      if (n >= 0)
-	{
-	  size_t curr_frame = octave_call_stack::current_frame ();
+      size_t curr_frame = octave_call_stack::current_frame ();
 
-	  // Skip dbstack stack frame.
-	  if (! Vdebugging)
-	    curr_frame++;
+      Octave_map stk = octave_call_stack::backtrace (nframes);
+
+      octave_idx_type idx = total_frames - curr_frame;
 
-	  // Adjust so that this is the index of where we are in the array
-	  // that is returned in retval(0).
-	  size_t idx = curr_frame - n;
-
-	  // Add one here to skip the __dbstack__ stack frame.
-	  Octave_map stk = octave_call_stack::backtrace (curr_frame + n);
+      if (nargout == 0)
+	{
+	  octave_idx_type nframes = stk.numel ();
 
-	  if (nargout == 0)
+	  if (nframes > 0)
 	    {
-	      octave_idx_type nframes = stk.numel ();
-
-	      if (nframes > 0)
-		{
-		  octave_stdout << "Stopped in:\n\n";
+	      octave_stdout << "Stopped in:\n\n";
 
-		  Cell names = stk.contents ("name");
-		  Cell lines = stk.contents ("line");
-		  Cell columns = stk.contents ("column");
-
-		  for (octave_idx_type i = 0; i < nframes; i++)
-		    {
-		      octave_value name = names(i);
-		      octave_value line = lines(i);
-		      octave_value column = columns(i);
+	      Cell names = stk.contents ("name");
+	      Cell lines = stk.contents ("line");
+	      Cell columns = stk.contents ("column");
 
-		      octave_stdout << (i == idx - 1 ? "--> " : "    ")
-				    << name.string_value ()
-				    << " at line " << line.int_value ()
-				    << " column " << column.int_value ()
-				    << std::endl;
-		    }
+	      for (octave_idx_type i = 0; i < nframes; i++)
+		{
+		  octave_value name = names(i);
+		  octave_value line = lines(i);
+		  octave_value column = columns(i);
+
+		  octave_stdout << (i == idx ? "--> " : "    ")
+				<< name.string_value ()
+				<< " at line " << line.int_value ()
+				<< " column " << column.int_value ()
+				<< std::endl;
 		}
 	    }
-	  else
-	    {
-	      retval(1) = idx;
-	      retval(0) = stk;
-	    }
 	}
       else
-	error ("dbstack: expecting N to be a nonnegative integer");
+	{
+	  retval(1) = idx < 0 ? 1 : idx + 1;
+	  retval(0) = stk;
+	}
     }
 
+  unwind_protect::run_frame ("Fdbstack");
+
   return retval;
 }
 
 static void
 do_dbupdown (const octave_value_list& args, const std::string& who)
 {
   int n = 1;
 
@@ -793,17 +809,17 @@ do_dbupdown (const octave_value_list& ar
 	  n = atoi (s_arg.c_str ());
 	}
       else
 	n = args(0).int_value ();
     }
 
   if (! error_state)
     {
-      if (who == "dbdown")
+      if (who == "dbup")
 	n = -n;
 
       if (! octave_call_stack::goto_frame_relative (n, true))
 	error ("%s: invalid stack frame", who.c_str ());
     }
 }
 
 DEFCMD (dbup, args, ,
diff --git a/src/pt-stmt.cc b/src/pt-stmt.cc
--- a/src/pt-stmt.cc
+++ b/src/pt-stmt.cc
@@ -83,17 +83,17 @@ tree_statement::eval (bool silent, int n
 		      bool in_function_or_script_body)
 {
   octave_value_list retval;
 
   bool pf = silent ? false : print_flag;
 
   if (cmd || expr)
     {
-      if (! (symbol_table::at_top_level () || Vdebugging))
+      if (! symbol_table::at_top_level ())
 	octave_call_stack::set_statement (this);
 
       maybe_echo_code (in_function_or_script_body);
 
       try
 	{
 	  if (cmd)
 	    cmd->eval ();
diff --git a/src/toplev.cc b/src/toplev.cc
--- a/src/toplev.cc
+++ b/src/toplev.cc
@@ -111,19 +111,21 @@ octave_call_stack::do_current_column (vo
   return stmt ? stmt->column () : -1;
 }
 
 int
 octave_call_stack::do_caller_user_code_line (difference_type q) const
 {
   int retval = -1;
 
-  for (const_iterator p = cs.begin () + q; p != cs.end (); p++)
+  const_iterator p = cs.end ();
+
+  while (p != cs.begin ())
     {
-      const call_stack_elt& elt = *p;
+      const call_stack_elt& elt = *(--p);
 
       octave_function *f = elt.fcn;
 
       if (f && f->is_user_code ())
 	{
 	  tree_statement *stmt = elt.stmt;
 
 	  if (stmt)
@@ -137,19 +139,21 @@ octave_call_stack::do_caller_user_code_l
   return retval;
 }
 
 int
 octave_call_stack::do_caller_user_code_column (difference_type q) const
 {
   int retval = -1;
 
-  for (const_iterator p = cs.begin () + q; p != cs.end (); p++)
+  const_iterator p = cs.end ();
+
+  while (p != cs.begin ())
     {
-      const call_stack_elt& elt = *p;
+      const call_stack_elt& elt = *(--p);
 
       octave_function *f = elt.fcn;
 
       if (f && f->is_user_code ())
 	{
 	  tree_statement *stmt = elt.stmt;
 
 	  if (stmt)
@@ -163,19 +167,21 @@ octave_call_stack::do_caller_user_code_c
   return retval;
 }
 
 octave_user_script *
 octave_call_stack::do_caller_user_script (difference_type q) const
 {
   octave_user_script *retval = 0;
 
-  for (const_iterator p = cs.begin () + q; p != cs.end (); p++)
+  const_iterator p = cs.end ();
+
+  while (p != cs.begin ())
     {
-      const call_stack_elt& elt = *p;
+      const call_stack_elt& elt = *(--p);
 
       octave_function *f = elt.fcn;
 
       if (f && f->is_user_script ())
 	{
 	  retval = dynamic_cast<octave_user_script *> (f);
 	  break;
 	}
@@ -184,19 +190,21 @@ octave_call_stack::do_caller_user_script
   return retval;
 }
 
 octave_user_function *
 octave_call_stack::do_caller_user_function (difference_type q) const
 {
   octave_user_function *retval = 0;
 
-  for (const_iterator p = cs.begin () + q; p != cs.end (); p++)
+  const_iterator p = cs.end ();
+
+  while (p != cs.begin ())
     {
-      const call_stack_elt& elt = *p;
+      const call_stack_elt& elt = *(--p);
 
       octave_function *f = elt.fcn;
 
       if (f && f->is_user_function ())
 	{
 	  retval = dynamic_cast<octave_user_function *> (f);
 	  break;
 	}
@@ -205,40 +213,40 @@ octave_call_stack::do_caller_user_functi
   return retval;
 }
 
 octave_user_code *
 octave_call_stack::do_caller_user_code (difference_type q) const
 {
   octave_user_code *retval = 0;
 
-  for (const_iterator p = cs.begin () + q; p != cs.end (); p++)
+  const_iterator p = cs.end ();
+
+  while (p != cs.begin ())
     {
-      const call_stack_elt& elt = *p;
+      const call_stack_elt& elt = *(--p);
 
       octave_function *f = elt.fcn;
 
       if (f && f->is_user_code ())
 	{
 	  retval = dynamic_cast<octave_user_code *> (f);
 	  break;
 	}
     }
 
   return retval;
 }
 
 Octave_map
-octave_call_stack::do_backtrace (int n) const
+octave_call_stack::do_backtrace (int nframes) const
 {
   Octave_map retval;
 
-  int nframes = cs.size () - n;
-
-  if (n >= 0 && nframes > 0)
+  if (nframes > 0 && nframes <= cs.size ())
     {
       Cell keys (6, 1);
 
       keys(0) = "file";
       keys(1) = "name";
       keys(2) = "line";
       keys(3) = "column";
       keys(4) = "scope";
@@ -246,21 +254,23 @@ octave_call_stack::do_backtrace (int n) 
 
       Cell file (nframes, 1);
       Cell name (nframes, 1);
       Cell line (nframes, 1);
       Cell column (nframes, 1);
       Cell scope (nframes, 1);
       Cell context (nframes, 1);
 
-      octave_idx_type k = 0;
+      octave_idx_type k = nframes - 1;
+
+      const_iterator p = cs.begin ();
 
-      for (const_iterator p = cs.begin () + n; p != cs.end (); p++)
+      while (k >= 0)
 	{
-	  const call_stack_elt& elt = *p;
+	  const call_stack_elt& elt = *p++;
 
 	  scope(k) = elt.scope;
 	  context(k) = elt.context;
 
 	  octave_function *f = elt.fcn;
 
 	  if (f)
 	    {
@@ -287,17 +297,17 @@ octave_call_stack::do_backtrace (int n) 
 	  else
 	    {
 	      file(k) = "<unknown>";
 	      name(k) = "<unknown>";
 	      line(k) = -1;
 	      column(k) = -1;
 	    }
 
-	  k++;
+	  k--;
 	}
 
       retval.assign ("file", file);
       retval.assign ("name", name);
       retval.assign ("line", line);
       retval.assign ("column", column);
       retval.assign ("scope", scope);
       retval.assign ("context", context);
@@ -349,19 +359,23 @@ bool
 octave_call_stack::do_goto_frame_relative (int n, bool verbose)
 {
   bool retval = false;
 
   size_t sz = cs.size ();
 
   if (n == 0)
     retval = true;
-  else if ((n > 0 && static_cast<size_t> (n) < sz - curr_frame)
-	   || (n < 0 && static_cast<size_t> (-n) < curr_frame))
-    retval = goto_frame (curr_frame + n, verbose);
+  else
+    {
+      size_t frame = static_cast<size_t> (n) + curr_frame;
+
+      if ((n > 0 && frame < sz) || (n < 0 && frame >= 0))
+	retval = goto_frame (frame, verbose);
+    }
 
   return retval;
 }
 
 void
 recover_from_exception (void)
 {
   can_interrupt = true;
diff --git a/src/toplev.h b/src/toplev.h
--- a/src/toplev.h
+++ b/src/toplev.h
@@ -149,16 +149,21 @@ public:
     return element (1);
   }
 
   static size_t current_frame (void)
   {
     return instance_ok () ? instance->do_current_frame () : 0;
   }
 
+  static size_t size (void)
+  {
+    return instance_ok () ? instance->do_size () : 0;
+  }
+
   // Function at location N on the call stack (N == 0 is current), may
   // be built-in.
   static octave_function *element (size_t n)
   {
     return instance_ok () ? instance->do_element (n) : 0;
   }
   
   // First script on the stack.
@@ -250,16 +255,18 @@ private:
   int do_current_column (void) const;
 
   int do_caller_user_code_line (difference_type q = 0) const;
 
   int do_caller_user_code_column (difference_type q = 0) const;
 
   size_t do_current_frame (void) { return curr_frame; }
 
+  size_t do_size (void) { return cs.size (); }
+
   octave_function *do_element (size_t n)
   {
     octave_function *retval = 0;
 
     if (cs.size () > n)
       {
 	call_stack_elt& elt = cs[n];
 	retval = elt.fcn;
@@ -272,71 +279,70 @@ private:
 
   octave_user_function *do_caller_user_function (difference_type q = 0) const;
 
   octave_user_code *do_caller_user_code (difference_type q = 0) const; 
 
   void do_push (octave_function *f, symbol_table::scope_id scope,
 		symbol_table::context_id context)
   {
-    if (Vdebugging)
-      curr_frame++;
+    curr_frame++;
 
-    cs.push_front (call_stack_elt (f, scope, context));
+    cs.push_back (call_stack_elt (f, scope, context));
   }
 
   octave_function *do_top (void) const
   {
     octave_function *retval = 0;
 
     if (! cs.empty ())
       {
-	const call_stack_elt& elt = cs.front ();
+	const call_stack_elt& elt = cs.back ();
 	retval = elt.fcn;
       }
 
     return retval;
   }
 
   tree_statement *do_top_statement (void) const
   {
     tree_statement *retval = 0;
 
     if (! cs.empty ())
       {
-	const call_stack_elt& elt = cs.front ();
+	const call_stack_elt& elt = cs.back ();
 	retval = elt.stmt;
       }
 
     return retval;
   }
 
   void do_set_statement (tree_statement *s)
   {
     if (! cs.empty ())
       {
-	call_stack_elt& elt = cs.front ();
+	call_stack_elt& elt = cs.back ();
+
 	elt.stmt = s;
       }
   }
 
   Octave_map do_backtrace (int n) const;
 
   bool do_goto_frame (size_t n, bool verbose);
 
   bool do_goto_frame_relative (int n, bool verbose);
 
   void do_pop (void)
   {
     if (! cs.empty ())
       {
-	if (Vdebugging)
-	  curr_frame--;
+	curr_frame--;
 
-	cs.pop_front ();
+	cs.pop_back ();
       }
   }
 
   void do_clear (void) { cs.clear (); }
 };
 
 #endif
 
