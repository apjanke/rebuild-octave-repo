# HG changeset patch
# User CarnÃ« Draug <carandraug@octave.org>
# Date 1376415701 -3600
#      Tue Aug 13 18:41:41 2013 +0100
# Node ID d6467d6dfb83ee039f3e93cd9ed06f807d6f9e45
# Parent  3fd6173637624635317cf5abdf22e8e5fe67db7f
Fix reading of alpha channel stored as tRNS chunk in PNG files.

* __magick_read__ (read_images): because we are checking the original
  color type for PNG values (to make sure we identify an RGB or grayscale
  image correctly), we need to also check the alpha channel separately
  since it may be stored as a tRNS chunk and not as color.

diff --git a/libinterp/dldfcn/__magick_read__.cc b/libinterp/dldfcn/__magick_read__.cc
--- a/libinterp/dldfcn/__magick_read__.cc
+++ b/libinterp/dldfcn/__magick_read__.cc
@@ -265,16 +265,28 @@ read_images (std::vector<Magick::Image>&
       if (type_str == "0")
         type = Magick::GrayscaleType;
       else if (type_str == "2")
         type = Magick::TrueColorType;
       else if (type_str == "6")
         type = Magick::TrueColorMatteType;
       else if (type_str == "4")
         type = Magick::GrayscaleMatteType;
+      // Color types 0, 2, and 3 can also have alpha channel, conveyed
+      // via the "tRNS" chunk.  For 0 and 2, it's limited to GIF-style
+      // binary transparency, while 3 can have any level of alpha per
+      // palette entry. We thus must check matte() to see if the image
+      // really doesn't have an alpha channel.
+      if (imvec[0].matte ())
+        {
+          if (type == Magick::GrayscaleType)
+            type = Magick::GrayscaleMatteType;
+          else if (type == Magick::TrueColorType)
+            type = Magick::TrueColorMatteType;
+        }
     }
 
   // If the alpha channel was not requested, treat images as if
   // it doesn't exist.
   if (nargout < 3)
     {
       switch (type)
         {
