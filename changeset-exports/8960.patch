# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1236846277 -3600
#      Thu Mar 12 09:24:37 2009 +0100
# Node ID 93f18f166aba08a1d0ced6a41f2e57f103ead679
# Parent  089abf117499d379ac28f8eb8a2ec19b096893ea
remove float perm matrices

diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,35 @@
+2009-03-12  Jaroslav Hajek  <highegg@gmail.com>
+
+	* ov-flt-perm.h, ov-flt-perm.cc: Remove sources.
+	* ov.h, ov.cc (octave_value::octave_value (const PermMatrix&)): Remove
+	use "single" argument.
+	* ov.cc (install_types): Update.
+	* xpow.cc, xpow.h (xpow (PermMatrix, float)): Remove.
+	* ov-base-diag.cc (octave_base_diag::do_index_op): Remove permutation
+	creating block.
+	* ov-re-diag.cc (octave_diag_matrix::do_index_op): Move it here.
+	* ov-re-diag.h (octave_diag_matrix::do_index_op): New decl.
+
+	* DLD-FUNCTIONS/det.cc (Fdet): Update.
+	* DLD-FUNCTIONS/inv.cc (Finv): Update.
+	* DLD-FUNCTIONS/pinv.cc (Fpinv): Update.
+
+	* OPERATORS/op-fcm-pm.cc <-- OPERATORS/op-fcm-fpm.cc
+	* OPERATORS/op-fcm-pm.cc: Update.
+	* OPERATORS/op-fm-pm.cc <-- OPERATORS/op-fm-fpm.cc
+	* OPERATORS/op-fm-pm.cc: Update.
+	* OPERATORS/op-pm-fcm.cc <-- OPERATORS/op-fpm-fcm.cc
+	* OPERATORS/op-pm-fcm.cc: Update.
+	* OPERATORS/op-pm-fm.cc <-- OPERATORS/op-fpm-fm.cc
+	* OPERATORS/op-pm-fm.cc: Update.
+	* OPERATORS/op-pm-pm.cc: Update.
+	* OPERATORS/op-pm-template.cc: Update.
+
 2009-03-11  Jaroslav Hajek  <highegg@gmail.com>
 	
 	* xpow.cc (xpow (const PermMatrix&, double), xpow (const PermMatrix&,
 	float)): New functions.
 	* xpow.h: Declare them.
 	* DLD-FUNCTIONS/op-pm-pm.cc: Support permutation matrix ^ scalar.
 	* DLD-FUNCTIONS/op-fpm-fpm.cc: Ditto.
 
diff --git a/src/DLD-FUNCTIONS/det.cc b/src/DLD-FUNCTIONS/det.cc
--- a/src/DLD-FUNCTIONS/det.cc
+++ b/src/DLD-FUNCTIONS/det.cc
@@ -38,17 +38,16 @@ along with Octave; see the file COPYING.
 #include "ov-cx-mat.h"
 #include "ov-flt-re-mat.h"
 #include "ov-flt-cx-mat.h"
 #include "ov-re-diag.h"
 #include "ov-cx-diag.h"
 #include "ov-flt-re-diag.h"
 #include "ov-flt-cx-diag.h"
 #include "ov-perm.h"
-#include "ov-flt-perm.h"
 
 #define MAYBE_CAST(VAR, CLASS) \
   const CLASS *VAR = arg.type_id () == CLASS::static_type_id () ? \
    dynamic_cast<const CLASS *> (&arg.get_rep ()) : 0
 
 DEFUN_DLD (det, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{d}, @var{rcond}] =} det (@var{a})\n\
@@ -123,28 +122,19 @@ if requested.\n\
               retval(0) = arg.diag_matrix_value ().determinant ().value ();
               if (nargout > 1)
                 retval(1) = arg.diag_matrix_value ().rcond ();
             }
         }
     }
   else if (arg.is_perm_matrix ())
     {
-      if (isfloat)
-        {
-          retval(0) = static_cast<float> (arg.perm_matrix_value ().determinant ());
-          if (nargout > 1)
-            retval(1) = 1.0;
-        }
-      else
-        {
-          retval(0) = static_cast<double> (arg.perm_matrix_value ().determinant ());
-          if (nargout > 1)
-            retval(1) = 1.0f;
-        }
+      retval(0) = static_cast<double> (arg.perm_matrix_value ().determinant ());
+      if (nargout > 1)
+        retval(1) = 1.0;
     }
   else if (arg.is_single_type ())
     {
       if (arg.is_real_type ())
 	{
 	  octave_idx_type info;
 	  float rcond = 0.0;
 	  // Always compute rcond, so we can detect numerically
diff --git a/src/DLD-FUNCTIONS/inv.cc b/src/DLD-FUNCTIONS/inv.cc
--- a/src/DLD-FUNCTIONS/inv.cc
+++ b/src/DLD-FUNCTIONS/inv.cc
@@ -30,17 +30,16 @@ along with Octave; see the file COPYING.
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ops.h"
 #include "ov-re-diag.h"
 #include "ov-cx-diag.h"
 #include "ov-flt-re-diag.h"
 #include "ov-flt-cx-diag.h"
 #include "ov-perm.h"
-#include "ov-flt-perm.h"
 #include "utils.h"
 
 DEFUN_DLD (inv, args, nargout,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {[@var{x}, @var{rcond}] =} inv (@var{a})\n\
 @deftypefnx {Loadable Function} {[@var{x}, @var{rcond}] =} inverse (@var{a})\n\
 Compute the inverse of the square matrix @var{a}.  Return an estimate\n\
 of the reciprocal condition number if requested, otherwise warn of an\n\
@@ -120,22 +119,18 @@ be avoided. It is significantly more acc
               if (nargout > 1)
                 rcond = arg.diag_matrix_value ().rcond ();
             }
         }
     }
   else if (arg.is_perm_matrix ())
     {
       rcond = 1.0;
-      frcond = 1.0f;
       info = 0;
-      if (isfloat)
-        result = octave_value (arg.perm_matrix_value ().inverse (), true);
-      else
-        result = arg.perm_matrix_value ().inverse ();
+      result = arg.perm_matrix_value ().inverse ();
     }
   else if (isfloat)
     {
       if (arg.is_real_type ())
 	{
 	  FloatMatrix m = arg.float_matrix_value ();
 	  if (! error_state)
 	    {
diff --git a/src/DLD-FUNCTIONS/pinv.cc b/src/DLD-FUNCTIONS/pinv.cc
--- a/src/DLD-FUNCTIONS/pinv.cc
+++ b/src/DLD-FUNCTIONS/pinv.cc
@@ -31,17 +31,16 @@ along with Octave; see the file COPYING.
 #include "oct-obj.h"
 #include "utils.h"
 #include "ops.h"
 #include "ov-re-diag.h"
 #include "ov-cx-diag.h"
 #include "ov-flt-re-diag.h"
 #include "ov-flt-cx-diag.h"
 #include "ov-perm.h"
-#include "ov-flt-perm.h"
 
 DEFUN_DLD (pinv, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Loadable Function} {} pinv (@var{x}, @var{tol})\n\
 Return the pseudoinverse of @var{x}.  Singular values less than\n\
 @var{tol} are ignored. \n\
 \n\
 If the second argument is omitted, it is assumed that\n\
@@ -92,20 +91,17 @@ where @code{sigma_max (@var{x})} is the 
           if (isfloat)
             retval = arg.float_diag_matrix_value ().pseudo_inverse ();
           else
             retval = arg.diag_matrix_value ().pseudo_inverse ();
         }
     }
   else if (arg.is_perm_matrix ())
     {
-      if (isfloat)
-        retval = octave_value (arg.perm_matrix_value ().inverse (), true);
-      else
-        retval = arg.perm_matrix_value ().inverse ();
+      retval = arg.perm_matrix_value ().inverse ();
     }
   else if (isfloat)
     {
       float tol = 0.0;
       if (nargin == 2)
 	tol = args(1).float_value ();
 
       if (error_state)
diff --git a/src/Makefile.in b/src/Makefile.in
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -97,18 +97,18 @@ endif
 OV_INTTYPE_INC := ov-base-int.h ov-int-traits.h ov-intx.h \
 	ov-int8.h ov-int16.h ov-int32.h ov-int64.h \
 	ov-uint8.h ov-uint16.h ov-uint32.h ov-uint64.h
 
 OV_INCLUDES := ov-re-mat.h ov-cx-mat.h ov-ch-mat.h ov-cs-list.h ov-list.h \
 	ov-struct.h ov-scalar.h ov-range.h ov-complex.h \
 	ov-colon.h ov-base.h ov-base-mat.h ov-base-scalar.h \
 	ov-str-mat.h ov-bool-mat.h ov-null-mat.h ov-bool.h \
-	ov-base-diag.h ov-re-diag.h ov-flt-re-diag.h ov-cx-diag.h ov-flt-cx-diag.h \
-	ov-perm.h ov-flt-perm.h \
+	ov-base-diag.h ov-re-diag.h ov-flt-re-diag.h ov-cx-diag.h \
+	ov-flt-cx-diag.h ov-perm.h \
 	ov-cell.h ov.h ov-fcn.h ov-builtin.h ov-dld-fcn.h \
 	ov-mex-fcn.h ov-usr-fcn.h ov-fcn-handle.h \
 	ov-fcn-inline.h ov-class.h ov-typeinfo.h ov-type-conv.h \
 	ov-flt-re-mat.h ov-flt-cx-mat.h ov-float.h ov-flt-complex.h \
 	$(OV_INTTYPE_INC)
 
 OV_SPARSE_INCLUDES := \
 	ov-base-sparse.h ov-bool-sparse.h ov-cx-sparse.h ov-re-sparse.h
@@ -168,18 +168,18 @@ DIAG_OP_XSRC := op-cdm-cdm.cc op-cdm-cm.
 	op-dm-cm.cc op-dm-cs.cc op-dm-dm.cc op-dm-m.cc op-dm-s.cc \
 	op-m-cdm.cc op-m-dm.cc
 
 FDIAG_OP_XSRC := op-fcdm-fcdm.cc op-fcdm-fcm.cc op-fcdm-fcs.cc op-fcdm-fdm.cc \
 	op-fcdm-fm.cc op-fcdm-fs.cc op-fcm-fcdm.cc op-fcm-fdm.cc \
 	op-fdm-fcdm.cc op-fdm-fcm.cc op-fdm-fcs.cc op-fdm-fdm.cc \
 	op-fdm-fm.cc op-fdm-fs.cc op-fm-fcdm.cc op-fm-fdm.cc
 
-PERM_OP_XSRC := op-cm-pm.cc op-fcm-fpm.cc op-fm-fpm.cc op-fpm-fcm.cc \
-	op-fpm-fm.cc op-fpm-fpm.cc op-m-pm.cc op-pm-cm.cc op-pm-m.cc op-pm-pm.cc
+PERM_OP_XSRC := op-cm-pm.cc op-fcm-pm.cc op-fm-pm.cc op-pm-fcm.cc \
+	op-pm-fm.cc op-m-pm.cc op-pm-cm.cc op-pm-m.cc op-pm-pm.cc
 
 OP_XSRC :=  op-b-b.cc op-b-bm.cc op-bm-b.cc op-bm-bm.cc op-cell.cc \
 	op-chm.cc op-class.cc op-list.cc op-range.cc op-str-m.cc \
 	op-str-s.cc op-str-str.cc op-struct.cc \
 	$(DOUBLE_OP_XSRC) $(FLOAT_OP_XSRC) $(INTTYPE_OP_XSRC) \
 	$(SPARSE_OP_XSRC) $(DIAG_OP_XSRC) $(FDIAG_OP_XSRC) $(PERM_OP_XSRC)
 
 OP_SRC := $(addprefix OPERATORS/, $(OP_XSRC))
@@ -199,17 +199,17 @@ OV_SRC := ov-base.cc ov-ch-mat.cc \
 	ov-range.cc ov-scalar.cc ov-complex.cc ov-str-mat.cc \
 	ov-struct.cc \
 	ov-colon.cc ov-bool-mat.cc ov-bool.cc ov-null-mat.cc ov-cell.cc \
 	ov.cc ov-fcn.cc ov-builtin.cc ov-dld-fcn.cc \
 	ov-mex-fcn.cc ov-usr-fcn.cc ov-fcn-handle.cc ov-fcn-inline.cc \
 	ov-class.cc ov-typeinfo.cc \
 	ov-flt-re-mat.cc ov-flt-cx-mat.cc ov-float.cc ov-flt-complex.cc \
 	ov-re-diag.cc ov-flt-re-diag.cc ov-cx-diag.cc ov-flt-cx-diag.cc \
-	ov-perm.cc ov-flt-perm.cc \
+	ov-perm.cc \
 	$(OV_INTTYPE_SRC) \
 	$(OV_SPARSE_SRC)
 
 PT_SRC := pt.cc pt-arg-list.cc pt-assign.cc pt-bp.cc pt-binop.cc \
 	pt-cbinop.cc pt-cell.cc pt-check.cc pt-cmd.cc pt-colon.cc \
 	pt-const.cc pt-decl.cc pt-eval.cc pt-except.cc pt-exp.cc \
 	pt-fcn-handle.cc pt-id.cc pt-idx.cc pt-jump.cc pt-loop.cc \
 	pt-mat.cc pt-misc.cc pt-pr-code.cc pt-select.cc pt-stmt.cc \
diff --git a/src/OPERATORS/op-fcm-fpm.cc b/src/OPERATORS/op-fcm-pm.cc
rename from src/OPERATORS/op-fcm-fpm.cc
rename to src/OPERATORS/op-fcm-pm.cc
--- a/src/OPERATORS/op-fcm-fpm.cc
+++ b/src/OPERATORS/op-fcm-pm.cc
@@ -18,16 +18,16 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #define MINCLUDE "ov-flt-cx-mat.h"
 
 #define LMATRIX float_complex_matrix
-#define RMATRIX float_perm_matrix
+#define RMATRIX perm_matrix
 
 #define LSHORT fcm
-#define RSHORT fpm
+#define RSHORT pm
 
 #define RIGHT
 
 #include "op-pm-template.cc"
diff --git a/src/OPERATORS/op-fm-fpm.cc b/src/OPERATORS/op-fm-pm.cc
rename from src/OPERATORS/op-fm-fpm.cc
rename to src/OPERATORS/op-fm-pm.cc
--- a/src/OPERATORS/op-fm-fpm.cc
+++ b/src/OPERATORS/op-fm-pm.cc
@@ -18,16 +18,16 @@ You should have received a copy of the G
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #define MINCLUDE "ov-flt-re-mat.h"
 
 #define LMATRIX float_matrix
-#define RMATRIX float_perm_matrix
+#define RMATRIX perm_matrix
 
 #define LSHORT fm
-#define RSHORT fpm
+#define RSHORT pm
 
 #define RIGHT
 
 #include "op-pm-template.cc"
diff --git a/src/OPERATORS/op-fpm-fpm.cc b/src/OPERATORS/op-fpm-fpm.cc
deleted file mode 100644
--- a/src/OPERATORS/op-fpm-fpm.cc
+++ /dev/null
@@ -1,102 +0,0 @@
-/*
-
-Copyright (C) 2008, 2009 Jaroslav Hajek
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-#include "gripes.h"
-#include "oct-obj.h"
-#include "ov.h"
-#include "ov-perm.h"
-#include "ov-flt-perm.h"
-#include "ov-flt-re-mat.h"
-#include "ov-float.h"
-#include "ov-typeinfo.h"
-#include "ops.h"
-#include "xpow.h"
-
-DEFUNOP (transpose, float_perm_matrix)
-{
-  CAST_UNOP_ARG (const octave_float_perm_matrix&);
-  return octave_value (v.perm_matrix_value().transpose (), true);
-}
-
-DEFBINOP (mul, float_perm_matrix, float_perm_matrix)
-{
-  CAST_BINOP_ARGS (const octave_float_perm_matrix&, const octave_float_perm_matrix&);
-
-  return octave_value (v1.perm_matrix_value () * v2.perm_matrix_value (), true);
-}
-
-DEFBINOP (div, float_perm_matrix, float_perm_matrix)
-{
-  CAST_BINOP_ARGS (const octave_float_perm_matrix&, const octave_float_perm_matrix&);
-  
-  return octave_value (v1.perm_matrix_value () * v2.perm_matrix_value ().inverse (), false);
-}
-
-DEFBINOP (ldiv, float_perm_matrix, float_perm_matrix)
-{
-  CAST_BINOP_ARGS (const octave_float_perm_matrix&, const octave_float_perm_matrix&);
-  
-  return octave_value (v1.perm_matrix_value ().inverse () * v2.perm_matrix_value (), false);
-}
-
-DEFBINOP (pow, float_perm_matrix, float_scalar)
-{
-  CAST_BINOP_ARGS (const octave_float_perm_matrix&, const octave_float_scalar&);
-
-  return xpow (v1.perm_matrix_value (), v2.float_scalar_value ());
-}
-
-CONVDECL (float_perm_matrix_to_float_matrix)
-{
-  CAST_CONV_ARG (const octave_float_perm_matrix&);
-
-  return new octave_float_matrix (v.float_matrix_value ());
-}
-
-CONVDECL (float_perm_matrix_to_perm_matrix)
-{
-  CAST_CONV_ARG (const octave_float_perm_matrix&);
-
-  return new octave_perm_matrix (v.perm_matrix_value ());
-}
-
-void
-install_fpm_fpm_ops (void)
-{
-  INSTALL_UNOP (op_transpose, octave_float_perm_matrix, transpose);
-  INSTALL_UNOP (op_hermitian, octave_float_perm_matrix, transpose);
-
-  INSTALL_BINOP (op_mul, octave_float_perm_matrix, octave_float_perm_matrix, mul);
-  INSTALL_BINOP (op_div, octave_float_perm_matrix, octave_float_perm_matrix, div);
-  INSTALL_BINOP (op_ldiv, octave_float_perm_matrix, octave_float_perm_matrix, ldiv);
-  INSTALL_BINOP (op_pow, octave_float_perm_matrix, octave_float_scalar, pow);
-
-  INSTALL_CONVOP (octave_float_perm_matrix, octave_float_matrix, float_perm_matrix_to_float_matrix);
-  INSTALL_CONVOP (octave_float_perm_matrix, octave_perm_matrix, float_perm_matrix_to_perm_matrix);
-  INSTALL_ASSIGNCONV (octave_float_perm_matrix, octave_float_matrix, octave_float_matrix);
-  INSTALL_WIDENOP (octave_float_perm_matrix, octave_float_matrix, float_perm_matrix_to_float_matrix);
-}
-
diff --git a/src/OPERATORS/op-fpm-fcm.cc b/src/OPERATORS/op-pm-fcm.cc
rename from src/OPERATORS/op-fpm-fcm.cc
rename to src/OPERATORS/op-pm-fcm.cc
--- a/src/OPERATORS/op-fpm-fcm.cc
+++ b/src/OPERATORS/op-pm-fcm.cc
@@ -17,17 +17,17 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #define MINCLUDE "ov-flt-cx-mat.h"
 
-#define LMATRIX float_perm_matrix
+#define LMATRIX perm_matrix
 #define RMATRIX float_complex_matrix
 
-#define LSHORT fpm
+#define LSHORT pm
 #define RSHORT fcm
 
 #define LEFT
 
 #include "op-pm-template.cc"
diff --git a/src/OPERATORS/op-fpm-fm.cc b/src/OPERATORS/op-pm-fm.cc
rename from src/OPERATORS/op-fpm-fm.cc
rename to src/OPERATORS/op-pm-fm.cc
--- a/src/OPERATORS/op-fpm-fm.cc
+++ b/src/OPERATORS/op-pm-fm.cc
@@ -17,17 +17,17 @@ for more details.
 You should have received a copy of the GNU General Public License
 along with Octave; see the file COPYING.  If not, see
 <http://www.gnu.org/licenses/>.
 
 */
 
 #define MINCLUDE "ov-flt-re-mat.h"
 
-#define LMATRIX float_perm_matrix
+#define LMATRIX perm_matrix
 #define RMATRIX float_matrix
 
-#define LSHORT fpm
+#define LSHORT pm
 #define RSHORT fm
 
 #define LEFT
 
 #include "op-pm-template.cc"
diff --git a/src/OPERATORS/op-pm-pm.cc b/src/OPERATORS/op-pm-pm.cc
--- a/src/OPERATORS/op-pm-pm.cc
+++ b/src/OPERATORS/op-pm-pm.cc
@@ -23,17 +23,16 @@ along with Octave; see the file COPYING.
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "gripes.h"
 #include "oct-obj.h"
 #include "ov.h"
 #include "ov-perm.h"
-#include "ov-flt-perm.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "ov-typeinfo.h"
 #include "ops.h"
 #include "xpow.h"
 
 DEFUNOP (transpose, perm_matrix)
 {
@@ -66,31 +65,23 @@ DEFBINOP (pow, perm_matrix, scalar)
 
 CONVDECL (perm_matrix_to_matrix)
 {
   CAST_CONV_ARG (const octave_perm_matrix&);
 
   return new octave_matrix (v.matrix_value ());
 }
 
-CONVDECL (perm_matrix_to_float_perm_matrix)
-{
-  CAST_CONV_ARG (const octave_perm_matrix&);
-
-  return new octave_float_perm_matrix (v.perm_matrix_value ());
-}
-
 void
 install_pm_pm_ops (void)
 {
   INSTALL_UNOP (op_transpose, octave_perm_matrix, transpose);
   INSTALL_UNOP (op_hermitian, octave_perm_matrix, transpose);
 
   INSTALL_BINOP (op_mul, octave_perm_matrix, octave_perm_matrix, mul);
   INSTALL_BINOP (op_div, octave_perm_matrix, octave_perm_matrix, div);
   INSTALL_BINOP (op_ldiv, octave_perm_matrix, octave_perm_matrix, ldiv);
   INSTALL_BINOP (op_pow, octave_perm_matrix, octave_scalar, pow);
 
   INSTALL_CONVOP (octave_perm_matrix, octave_matrix, perm_matrix_to_matrix);
-  INSTALL_CONVOP (octave_perm_matrix, octave_float_perm_matrix, perm_matrix_to_float_perm_matrix);
   INSTALL_ASSIGNCONV (octave_perm_matrix, octave_matrix, octave_matrix);
   INSTALL_WIDENOP (octave_perm_matrix, octave_matrix, perm_matrix_to_matrix);
 }
diff --git a/src/OPERATORS/op-pm-template.cc b/src/OPERATORS/op-pm-template.cc
--- a/src/OPERATORS/op-pm-template.cc
+++ b/src/OPERATORS/op-pm-template.cc
@@ -20,17 +20,16 @@ along with Octave; see the file COPYING.
 
 */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "ov-perm.h"
-#include "ov-flt-perm.h"
 #include MINCLUDE
 #include "ops.h"
 
 #define OCTAVE_LMATRIX CONCAT2(octave_, LMATRIX)
 #define OCTAVE_RMATRIX CONCAT2(octave_, RMATRIX)
 #ifdef LEFT
 #define LMATRIX_VALUE perm_matrix_value
 #define RMATRIX_VALUE CONCAT2(RMATRIX, _value)
diff --git a/src/ov-base-diag.cc b/src/ov-base-diag.cc
--- a/src/ov-base-diag.cc
+++ b/src/ov-base-diag.cc
@@ -68,83 +68,44 @@ octave_base_diag<DMT, MT>::subsref (cons
 
 template <class DMT, class MT>
 octave_value
 octave_base_diag<DMT, MT>::do_index_op (const octave_value_list& idx,
                                         bool resize_ok)
 {
   octave_value retval;
   typedef typename DMT::element_type el_type;
-  el_type one = 1;
-
-  octave_idx_type nidx = idx.length ();
-  idx_vector idx0, idx1;
-  if (nidx == 2)
-    {
-      idx0 = idx(0).index_vector ();
-      idx1 = idx(1).index_vector ();
-    }
-
-  // This hack is to allow constructing permutation matrices using
-  // eye(n)(p,:), eye(n)(:,q) && eye(n)(p,q) where p & q are permutation
-  // vectors. 
-  // FIXME: This check is probably unnecessary for complex matrices. 
-  if (! error_state && nidx == 2 && matrix.is_multiple_of_identity (one))
-    {
-      
-      bool left = idx0.is_permutation (matrix.rows ());
-      bool right = idx1.is_permutation (matrix.cols ());
 
-      if (left && right)
-        {
-          if (idx0.is_colon ()) left = false;
-          if (idx1.is_colon ()) right = false;
-          if (left && right)
-              retval = octave_value (PermMatrix (idx0, false) * PermMatrix (idx1, true),
-                                     is_single_type ());
-          else if (left)
-              retval = octave_value (PermMatrix (idx0, false),
-                                     is_single_type ());
-          else if (right)
-              retval = octave_value (PermMatrix (idx1, true),
-                                     is_single_type ());
-          else
-            {
-              retval = this;
-              this->count++;
-            }
-        }
-    }
+  if (idx.length () == 2 && ! resize_ok)
+    {
+      idx_vector idx0 = idx(0).index_vector ();
+      idx_vector idx1 = idx(1).index_vector ();
 
-  // if error_state is set, we've already griped.
-  if (! error_state && ! retval.is_defined ())
-    {
-      if (nidx == 2 && ! resize_ok &&
-          idx0.is_scalar () && idx1.is_scalar ())
+      if (idx0.is_scalar () && idx1.is_scalar ())
         {
           // FIXME: the proxy mechanism of DiagArray2 causes problems here.
           retval = el_type (matrix.checkelem (idx0(0), idx1(0)));
         }
-      else if (nidx == 2 && ! resize_ok)
+      else
         {
           octave_idx_type m = idx0.length (matrix.rows ());
           octave_idx_type n = idx1.length (matrix.columns ());
           if (idx0.is_colon_equiv (m) && idx1.is_colon_equiv (n)
               && m <= matrix.rows () && n <= matrix.rows ())
             {
               DMT rm (matrix);
               rm.resize (m, n);
               retval = rm;
             }
           else
             retval = to_dense ().do_index_op (idx, resize_ok);
         }
-      else
-        retval = to_dense ().do_index_op (idx, resize_ok);
     }
+  else
+    retval = to_dense ().do_index_op (idx, resize_ok);
 
   return retval;
 }
 
 template <class DMT, class MT>
 octave_value 
 octave_base_diag<DMT, MT>::subsasgn (const std::string& type,
                                      const std::list<octave_value_list>& idx,
diff --git a/src/ov-flt-perm.cc b/src/ov-flt-perm.cc
deleted file mode 100644
--- a/src/ov-flt-perm.cc
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
-
-Copyright (C) 2008 Jaroslav Hajek
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-#include "ov-flt-perm.h"
-#include "ov-flt-re-mat.h"
-#include "ov-float.h"
-#include "ops.h"
-
-DEFINE_OCTAVE_ALLOCATOR (octave_float_perm_matrix);
-
-DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA (octave_float_perm_matrix, 
-                                     "float permutation matrix", "single");
-
-static octave_base_value *
-default_float_numeric_conversion_function (const octave_base_value& a)
-{
-  CAST_CONV_ARG (const octave_float_perm_matrix&);
-
-  return new octave_float_matrix (v.float_matrix_value ());
-}
-
-octave_base_value::type_conv_info
-octave_float_perm_matrix::numeric_conversion_function (void) const
-{
-  return octave_base_value::type_conv_info (default_float_numeric_conversion_function,
-                                            octave_float_matrix::static_type_id ());
-}
-
-octave_base_value::type_conv_info
-octave_float_perm_matrix::numeric_demotion_function (void) const
-{
-  return octave_base_value::type_conv_info (0);
-}
-
-octave_base_value *
-octave_float_perm_matrix::try_narrowing_conversion (void)
-{
-  octave_base_value *retval = 0;
-
-  if (matrix.nelem () == 1)
-    retval = new octave_float_scalar (matrix (0, 0));
-
-  return retval;
-}
-
-octave_value
-octave_float_perm_matrix::to_dense (void) const
-{
-  if (! dense_cache.is_defined ())
-      dense_cache = FloatMatrix (matrix);
-
-  return dense_cache;
-}
-
diff --git a/src/ov-flt-perm.h b/src/ov-flt-perm.h
deleted file mode 100644
--- a/src/ov-flt-perm.h
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
-
-Copyright (C) 2008 Jaroslav Hajek
-
-This file is part of Octave.
-
-Octave is free software; you can redistribute it and/or modify it
-under the terms of the GNU General Public License as published by the
-Free Software Foundation; either version 3 of the License, or (at your
-option) any later version.
-
-Octave is distributed in the hope that it will be useful, but WITHOUT
-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-for more details.
-
-You should have received a copy of the GNU General Public License
-along with Octave; see the file COPYING.  If not, see
-<http://www.gnu.org/licenses/>.
-
-*/
-
-#if !defined (octave_float_perm_matrix_h)
-#define octave_float_perm_matrix_h 1
-
-#include "ov-perm.h"
-#include "ov-perm.h"
-
-class 
-OCTINTERP_API
-octave_float_perm_matrix : public octave_perm_matrix
-{
-public:
-  octave_float_perm_matrix (void) : octave_perm_matrix () { }
-
-  octave_float_perm_matrix (const PermMatrix& p) : octave_perm_matrix (p) { }
-
-  octave_base_value *clone (void) const { return new octave_float_perm_matrix (*this); }
-  octave_base_value *empty_clone (void) const { return new octave_float_perm_matrix (); }
-
-  bool is_double_type (void) const { return false; }
-
-  bool is_single_type (void) const { return true; }
-
-  type_conv_info numeric_conversion_function (void) const;
-
-  type_conv_info numeric_demotion_function (void) const;
-
-  octave_base_value *try_narrowing_conversion (void);
-
-protected:
-
-  virtual octave_value to_dense (void) const;
-
-private:
-
-  DECLARE_OCTAVE_ALLOCATOR
-
-  DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA
-};
-
-#endif
diff --git a/src/ov-flt-re-mat.cc b/src/ov-flt-re-mat.cc
--- a/src/ov-flt-re-mat.cc
+++ b/src/ov-flt-re-mat.cc
@@ -53,17 +53,16 @@ along with Octave; see the file COPYING.
 #include "ov-float.h"
 #include "ov-flt-complex.h"
 #include "ov-re-mat.h"
 #include "ov-flt-re-mat.h"
 #include "ov-flt-cx-mat.h"
 #include "ov-re-sparse.h"
 #include "ov-flt-re-diag.h"
 #include "ov-flt-cx-diag.h"
-#include "ov-flt-perm.h"
 #include "ov-type-conv.h"
 #include "pr-output.h"
 #include "variables.h"
 #include "ops.h"
 
 #include "byte-swap.h"
 #include "ls-oct-ascii.h"
 #include "ls-utils.h"
@@ -810,21 +809,17 @@ Convert @var{x} to single precision type
 @end deftypefn")
 {
   // The OCTAVE_TYPE_CONV_BODY3 macro declares retval, so they go
   // inside their own scopes, and we don't declare retval here to
   // avoid a shadowed declaration warning.
 
   if (args.length () == 1)
     {
-      if (args(0).is_perm_matrix ())
-        {
-          OCTAVE_TYPE_CONV_BODY3 (single, octave_float_perm_matrix, octave_float_scalar);
-        }
-      else if (args(0).is_diag_matrix ())
+      if (args(0).is_diag_matrix ())
         {
 	  if (args(0).is_complex_type ())
 	    {
 	      OCTAVE_TYPE_CONV_BODY3 (single, octave_float_complex_diag_matrix, octave_float_complex);
 	    }
 	  else
 	    {
 	      OCTAVE_TYPE_CONV_BODY3 (single, octave_float_diag_matrix, octave_float_scalar);
diff --git a/src/ov-perm.cc b/src/ov-perm.cc
--- a/src/ov-perm.cc
+++ b/src/ov-perm.cc
@@ -22,17 +22,16 @@ along with Octave; see the file COPYING.
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
 
 #include "byte-swap.h"
 
 #include "ov-perm.h"
-#include "ov-flt-perm.h"
 #include "ov-re-mat.h"
 #include "ov-scalar.h"
 #include "error.h"
 #include "gripes.h"
 #include "ops.h"
 #include "pr-output.h"
 
 #include "ls-oct-ascii.h"
@@ -93,17 +92,17 @@ octave_perm_matrix::do_index_op (const o
           if (idx1.is_colon ()) right = false;
           if (left || right)
             {
               PermMatrix p = matrix;
               if (left)
                 p = PermMatrix (idx0, false) * p;
               if (right)
                 p = p * PermMatrix (idx1, true);
-              retval = octave_value (p, is_single_type ());
+              retval = p;
             }
           else
             {
               retval = this;
               this->count++;
             }
         }
     }
@@ -474,31 +473,16 @@ default_numeric_conversion_function (con
 
 octave_base_value::type_conv_info
 octave_perm_matrix::numeric_conversion_function (void) const
 {
   return octave_base_value::type_conv_info (default_numeric_conversion_function,
                                             octave_matrix::static_type_id ());
 }
 
-static octave_base_value *
-default_numeric_demotion_function (const octave_base_value& a)
-{
-  CAST_CONV_ARG (const octave_perm_matrix&);
-
-  return new octave_float_perm_matrix (v.perm_matrix_value ());
-}
-
-octave_base_value::type_conv_info
-octave_perm_matrix::numeric_demotion_function (void) const
-{
-  return octave_base_value::type_conv_info (default_numeric_demotion_function,
-                                            octave_float_perm_matrix::static_type_id ());
-}
-
 octave_base_value *
 octave_perm_matrix::try_narrowing_conversion (void)
 {
   octave_base_value *retval = 0;
 
   if (matrix.nelem () == 1)
     retval = new octave_scalar (matrix (0, 0));
 
diff --git a/src/ov-perm.h b/src/ov-perm.h
--- a/src/ov-perm.h
+++ b/src/ov-perm.h
@@ -39,18 +39,16 @@ public:
 
   octave_perm_matrix (const PermMatrix& p) : matrix (p) { }
 
   octave_base_value *clone (void) const { return new octave_perm_matrix (*this); }
   octave_base_value *empty_clone (void) const { return new octave_perm_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
-  type_conv_info numeric_demotion_function (void) const;
-
   octave_base_value *try_narrowing_conversion (void);
 
   size_t byte_size (void) const { return matrix.byte_size (); }
 
   octave_value squeeze (void) const { return matrix; }
 
   octave_value full_value (void) const { return to_dense (); }
 
diff --git a/src/ov-re-diag.cc b/src/ov-re-diag.cc
--- a/src/ov-re-diag.cc
+++ b/src/ov-re-diag.cc
@@ -76,16 +76,61 @@ octave_diag_matrix::try_narrowing_conver
 
   // FIXME: the proxy mechanism of DiagArray2 causes problems here.
   if (matrix.nelem () == 1)
     retval = new octave_scalar (double (matrix (0, 0)));
 
   return retval;
 }
 
+octave_value
+octave_diag_matrix::do_index_op (const octave_value_list& idx,
+                                 bool resize_ok)
+{
+  octave_value retval;
+
+  // This hack is to allow constructing permutation matrices using
+  // eye(n)(p,:), eye(n)(:,q) && eye(n)(p,q) where p & q are permutation
+  // vectors. 
+  if (! resize_ok && idx.length () == 2 && matrix.is_multiple_of_identity (1))
+    {
+      idx_vector idx0 = idx(0).index_vector ();
+      idx_vector idx1 = idx(1).index_vector ();
+      
+      if (! error_state)
+        {
+          bool left = idx0.is_permutation (matrix.rows ());
+          bool right = idx1.is_permutation (matrix.cols ());
+
+          if (left && right)
+            {
+              if (idx0.is_colon ()) left = false;
+              if (idx1.is_colon ()) right = false;
+              if (left && right)
+                retval = PermMatrix (idx0, false) * PermMatrix (idx1, true);
+              else if (left)
+                retval = PermMatrix (idx0, false);
+              else if (right)
+                retval = PermMatrix (idx1, true);
+              else
+                {
+                  retval = this;
+                  this->count++;
+                }
+            }
+        }
+    }
+
+  // if error_state is set, we've already griped.
+  if (! error_state && retval.is_undefined ())
+    retval = octave_base_diag<DiagMatrix, Matrix>::do_index_op (idx, resize_ok);
+
+  return retval;
+}
+
 DiagMatrix
 octave_diag_matrix::diag_matrix_value (bool) const
 {
   return matrix;
 }
 
 FloatDiagMatrix
 octave_diag_matrix::float_diag_matrix_value (bool) const
diff --git a/src/ov-re-diag.h b/src/ov-re-diag.h
--- a/src/ov-re-diag.h
+++ b/src/ov-re-diag.h
@@ -52,16 +52,19 @@ public:
   octave_base_value *empty_clone (void) const { return new octave_diag_matrix (); }
 
   type_conv_info numeric_conversion_function (void) const;
 
   type_conv_info numeric_demotion_function (void) const;
 
   octave_base_value *try_narrowing_conversion (void);
 
+  octave_value do_index_op (const octave_value_list& idx,
+			    bool resize_ok = false);
+
   bool is_real_matrix (void) const { return true; }
 
   bool is_real_type (void) const { return true; }
 
   bool is_double_type (void) const { return true; }
 
   bool is_float_type (void) const { return true; }
 
diff --git a/src/ov.cc b/src/ov.cc
--- a/src/ov.cc
+++ b/src/ov.cc
@@ -38,17 +38,16 @@ along with Octave; see the file COPYING.
 #include "ov-cell.h"
 #include "ov-scalar.h"
 #include "ov-float.h"
 #include "ov-re-mat.h"
 #include "ov-flt-re-mat.h"
 #include "ov-re-diag.h"
 #include "ov-flt-re-diag.h"
 #include "ov-perm.h"
-#include "ov-flt-perm.h"
 #include "ov-bool-sparse.h"
 #include "ov-cx-sparse.h"
 #include "ov-re-sparse.h"
 #include "ov-int8.h"
 #include "ov-int16.h"
 #include "ov-int32.h"
 #include "ov-int64.h"
 #include "ov-uint8.h"
@@ -688,23 +687,20 @@ octave_value::octave_value (const Comple
 }
 
 octave_value::octave_value (const FloatComplexColumnVector& v)
   : rep (new octave_float_complex_matrix (v))
 {
   maybe_mutate ();
 }
 
-octave_value::octave_value (const PermMatrix& p, bool single)
-  : rep ()
+octave_value::octave_value (const PermMatrix& p)
+  : rep (new octave_perm_matrix (p))
 {
-  if (single)
-    rep = new octave_float_perm_matrix (p);
-  else
-    rep = new octave_perm_matrix (p);
+  maybe_mutate ();
 }
 
 octave_value::octave_value (bool b)
   : rep (new octave_bool (b))
 {
 }
 
 octave_value::octave_value (const boolMatrix& bm, const MatrixType& t)
@@ -2476,17 +2472,16 @@ install_types (void)
   octave_fcn_inline::register_type ();
   octave_float_scalar::register_type ();
   octave_float_complex::register_type ();
   octave_float_matrix::register_type ();
   octave_float_diag_matrix::register_type ();
   octave_float_complex_matrix::register_type ();
   octave_float_complex_diag_matrix::register_type ();
   octave_perm_matrix::register_type ();
-  octave_float_perm_matrix::register_type ();
   octave_null_matrix::register_type ();
   octave_null_str::register_type ();
   octave_null_sq_str::register_type ();
 }
 
 #if 0
 DEFUN (cast, args, ,
   "-*- texinfo -*-\n\
diff --git a/src/ov.h b/src/ov.h
--- a/src/ov.h
+++ b/src/ov.h
@@ -199,17 +199,17 @@ public:
   octave_value (const ArrayN<Complex>& m);
   octave_value (const ArrayN<FloatComplex>& m);
   octave_value (const ComplexDiagMatrix& d);
   octave_value (const FloatComplexDiagMatrix& d);
   octave_value (const ComplexRowVector& v);
   octave_value (const FloatComplexRowVector& v);
   octave_value (const ComplexColumnVector& v);
   octave_value (const FloatComplexColumnVector& v);
-  octave_value (const PermMatrix& p, bool single = false);
+  octave_value (const PermMatrix& p);
   octave_value (bool b);
   octave_value (const boolMatrix& bm, const MatrixType& t = MatrixType());
   octave_value (const boolNDArray& bnda);
   octave_value (const ArrayN<bool>& bnda);
   octave_value (char c, char type = '"');
   octave_value (const char *s, char type = '"');
   octave_value (const std::string& s, char type = '"');
   octave_value (const string_vector& s, char type = '"');
diff --git a/src/xpow.cc b/src/xpow.cc
--- a/src/xpow.cc
+++ b/src/xpow.cc
@@ -1584,28 +1584,16 @@ xpow (const FloatDiagMatrix& a, float b)
             r(i, i) = std::pow (static_cast<FloatComplex> (a(i, i)), b);
           retval = r;
 	}
     }
 
   return retval;
 }
 
-// -*- 5p -*-
-octave_value
-xpow (const PermMatrix& a, float b)
-{
-  octave_value retval;
-  int btmp = static_cast<int> (b);
-  if (btmp == b)
-    return octave_value (a.power (btmp), true);
-  else
-    return xpow (FloatMatrix (a), b);
-}
-
 // -*- 6 -*-
 octave_value
 xpow (const FloatMatrix& a, const FloatComplex& b)
 {
   octave_value retval;
 
   octave_idx_type nr = a.rows ();
   octave_idx_type nc = a.cols ();
diff --git a/src/xpow.h b/src/xpow.h
--- a/src/xpow.h
+++ b/src/xpow.h
@@ -104,18 +104,16 @@ extern octave_value xpow (float a, const
 extern octave_value xpow (float a, const FloatComplexMatrix& b);
 
 extern octave_value xpow (const FloatMatrix& a, float b);
 extern octave_value xpow (const FloatMatrix& a, const FloatComplex& b);
 
 extern octave_value xpow (const FloatDiagMatrix& a, float b);
 extern octave_value xpow (const FloatDiagMatrix& a, const FloatComplex& b);
 
-extern octave_value xpow (const PermMatrix& a, float b);
-
 extern octave_value xpow (const FloatComplex& a, float b);
 extern octave_value xpow (const FloatComplex& a, const FloatMatrix& b);
 extern octave_value xpow (const FloatComplex& a, const FloatComplex& b);
 extern octave_value xpow (const FloatComplex& a, const FloatComplexMatrix& b);
 
 extern octave_value xpow (const FloatComplexMatrix& a, float b);
 extern octave_value xpow (const FloatComplexMatrix& a, const FloatComplex& b);
 
