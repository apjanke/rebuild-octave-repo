# HG changeset patch
# User jwe
# Date 1082566982 0
#      Wed Apr 21 17:03:02 2004 +0000
# Node ID b92d59213e633820d0fb666df46e9bfdf1d5fc05
# Parent  0d7b436d0e879632da6d003f2fd9efedf1b3ee60
[project @ 2004-04-21 17:03:02 by jwe]

diff --git a/doc/interpreter/matrix.txi b/doc/interpreter/matrix.txi
--- a/doc/interpreter/matrix.txi
+++ b/doc/interpreter/matrix.txi
@@ -68,18 +68,22 @@ Note that in conditional contexts (like 
 
 @node Rearranging Matrices
 @section Rearranging Matrices
 
 @DOCSTRING(fliplr)
 
 @DOCSTRING(flipud)
 
+@DOCSTRING(flipdim)
+
 @DOCSTRING(rot90)
 
+@DOCSTRING(rotdim)
+
 @DOCSTRING(cat)
 
 @DOCSTRING(horzcat)
 
 @DOCSTRING(vertcat)
 
 @DOCSTRING(permute)
 
diff --git a/doc/interpreter/preface.txi b/doc/interpreter/preface.txi
--- a/doc/interpreter/preface.txi
+++ b/doc/interpreter/preface.txi
@@ -66,20 +66,21 @@ of Octave or helped out in various other
 
 @itemize @bullet
 @item
 Thomas Baier @email{baier@@ci.tuwien.ac.at} wrote the original versions
 of @code{popen}, @code{pclose}, @code{execute}, @code{sync_system}, and
 @code{async_system}.
 
 @item
-David Bateman @email{dbateman@@free.fr} converted several built-in
-functions to use Lapack instead of Linpack, and split the
-functionality of @file{load-save.cc} out into the @code{octave_value}
-classes.
+David Bateman @email{dbateman@@free.fr} improved the sort and min/max
+functions, made many functions N-d aware, converted several built-in
+functions to use Lapack instead of Linpack, split the functionality of
+@file{load-save.cc} out into the @code{octave_value} classes, and has
+contributed in many other ways.
 
 @item
 Karl Berry @email{karl@@cs.umb.edu} wrote the @code{kpathsea} library
 that allows Octave to recursively search directory paths for function
 and script files.
 
 @item
 Georg Beyerle @email{gbeyerle@@awi-potsdam.de} contributed code to save
diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,24 @@
+2004-04-21  David Bateman  <dbateman@free.fr>
+
+	* general/diff.m: Make the code N-d array aware.  Allow an
+	optional argument to define the dimension along which to perform
+	the differences and allow the order of the differences to be larger
+	than the dimension itself.
+
+	* general/rotdim.m: New function for rotation of an N-d array in an
+	arbitrary plane.
+
+	* general/flipdim.m: New function to flip an N-d array about an 
+	arbitrary axis.
+
+	* general/rot90.m, general/fliplr.m, general/flipud.m: Limit the
+	use of these functions to 1- and 2-d arrays.
+
 2004-04-16  John W. Eaton  <jwe@octave.org>
 
 	* elfun/gcd.m: Delete.
 
 2004-04-15  David Bateman  <dbateman@free.fr>
 
 	* set/create_set.m, general/is_duplicate_entry.m: Make N-d array aware.
 
diff --git a/scripts/general/diff.m b/scripts/general/diff.m
--- a/scripts/general/diff.m
+++ b/scripts/general/diff.m
@@ -13,71 +13,121 @@
 ## General Public License for more details.
 ##
 ## You should have received a copy of the GNU General Public License
 ## along with Octave; see the file COPYING.  If not, write to the Free
 ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 ## 02111-1307, USA.
 
 ## -*- texinfo -*-
-## @deftypefn {Function File} {} diff (@var{x}, @var{k})
+## @deftypefn {Function File} {} diff (@var{x}, @var{k}, @var{dim})
 ## If @var{x} is a vector of length @var{n}, @code{diff (@var{x})} is the
 ## vector of first differences
 ## @iftex
 ## @tex
 ##  $x_2 - x_1, \ldots{}, x_n - x_{n-1}$.
 ## @end tex
 ## @end iftex
 ## @ifinfo
 ##  @var{x}(2) - @var{x}(1), @dots{}, @var{x}(n) - @var{x}(n-1).
 ## @end ifinfo
 ##
 ## If @var{x} is a matrix, @code{diff (@var{x})} is the matrix of column
-## differences.
+## differences along the first non-singleton dimension.
 ##
 ## The second argument is optional.  If supplied, @code{diff (@var{x},
 ## @var{k})}, where @var{k} is a nonnegative integer, returns the
-## @var{k}-th differences.
+## @var{k}-th differences. It is possible that @var{k} is larger than
+## then first non-singleton dimension of the matrix. In this case,
+## @code{diff} continues to take the differences along the next
+## non-singleton dimension.
+##
+## The dimension along which to take the difference can be explicitly
+## stated with the optional variable @var{dim}. In this case the 
+## @var{k}-th order differences are calculated along this dimension.
+## In the case where @var{k} exceeds @code{size (@var{x}, @var{dim})}
+## then an empty matrix is returned.
 ## @end deftypefn
 
 ## Author: KH <Kurt.Hornik@ci.tuwien.ac.at>
 ## Created: 2 February 1995
 ## Adapted-By: jwe
 
-function x = diff (x, k)
+function x = diff (x, k, dim)
 
-  if (nargin == 1)
+  if (nargin < 1 || nargin > 3)
+    usage ("diff (x, k");
+  endif
+
+  if (nargin < 2 || isempty(k))
     k = 1;
-  elseif (nargin == 2)
+  else
     if (! (isscalar (k) && k == round (k) && k >= 0))
       error ("diff: k must be a nonnegative integer");
     elseif (k == 0)
       return;
     endif
+  endif
+
+  nd = ndims (x);
+  sz = size (x);
+  if (nargin != 3)
+    %% Find the first non-singleton dimension
+    dim  = 1;
+    while (dim < nd + 1 && sz (dim) == 1)
+      dim = dim + 1;
+    endwhile
+    if (dim > nd)
+      dim = 1;
+    endif
   else
-    usage ("diff (x, k");
+    if (! (isscalar (dim) && dim == round (dim)) && dim > 0 && 
+	dim < (nd + 1))
+      error ("diff: dim must be an integer and valid dimension");
+    endif
   endif
 
   if (isstr (x))
     error ("diff: symbolic differentiation not (yet) supported");
-  elseif (isvector (x))
-    n = length (x);
-    if (n <= k)
-      x = [];
+  endif
+
+
+  if (nargin == 3)
+    if (sz (dim) <= k)
+      sz(dim) = 0;
+      x = zeros (sz);
     else
-      for i = 1 : k
-        x = x (2 : (n - i + 1)) - x (1 : (n - i));
+      n = sz (dim);
+      idx1 = cell ();
+      for i = 1:nd
+	idx1 {i} = 1:sz(i);
       endfor
-    endif
-  elseif (ismatrix (x))
-    n = rows (x);
-    if (n <= k)
-      x = [];
-    else
-      for i = 1 : k
-        x = x (2 : (n - i + 1), :) - x (1: (n - i), :);
+      idx2 = idx1;
+      for i = 1 : k;
+	idx1 {dim} = 2 : (n - i + 1);	
+	idx2 {dim} = 1 : (n - i);	
+	x = x (idx1 {:}) - x (idx2 {:});
       endfor
     endif
   else
-    x = [];
+    if (sum (sz - 1) < k)
+      x = [];
+    else
+      idx1 = cell ();
+      for i = 1:nd
+	idx1 {i} = 1:sz(i);
+      endfor
+      idx2 = idx1;
+      while (k)
+	n = sz (dim);
+	for i = 1 : min (k, n - 1)
+	  idx1 {dim} = 2 : (n - i + 1);	
+	  idx2 {dim} = 1 : (n - i);	
+	  x = x (idx1 {:}) - x (idx2 {:});
+	endfor
+	idx1 {dim} = idx2 {dim} = 1;
+	k = k - min (k, n - 1);
+	dim = dim + 1;
+      endwhile
+    endif
   endif
 
 endfunction
diff --git a/scripts/general/fliplr.m b/scripts/general/fliplr.m
--- a/scripts/general/fliplr.m
+++ b/scripts/general/fliplr.m
@@ -25,22 +25,30 @@
 ## @example
 ## @group
 ## fliplr ([1, 2; 3, 4])
 ##      @result{}  2  1
 ##          4  3
 ## @end group
 ## @end example
 ## @end deftypefn
-## @seealso{flipud and rot90}
+##
+## Due to the difficult of define which axis about which to flip the 
+## matrix @code{fliplr} only work with 2-D arrays. To flip N-D arrays
+## use @code{flipdim} instead.
+## @seealso{flipud, flipdim, rot90 and rotdim}
 
 ## Author: jwe
 
 function y = fliplr (x)
 
   if (nargin != 1)
     usage ("fliplr (x)");
   endif
 
+  if (ndims (x) > 2)
+    error ("fliplr: Only works with 2-D arrays")
+  endif
+
   nc = columns (x);
   y = x (:, nc:-1:1);
 
 endfunction
diff --git a/scripts/general/flipud.m b/scripts/general/flipud.m
--- a/scripts/general/flipud.m
+++ b/scripts/general/flipud.m
@@ -24,23 +24,31 @@
 ##
 ## @example
 ## @group
 ## flipud ([1, 2; 3, 4])
 ##      @result{}  3  4
 ##          1  2
 ## @end group
 ## @end example
+##
+## Due to the difficulty of defining which axis about which to flip the 
+## matrix @code{flipud} only work with 2-d arrays.  To flip N-d arrays
+## use @code{flipdim} instead.
 ## @end deftypefn
-## @seealso{fliplr and rot90}
+## @seealso{fliplr, flipdim, rot90 and rotdim}
 
 ## Author: jwe
 
 function y = flipud (x)
 
   if (nargin != 1)
     usage ("flipud (x)");
   endif
 
+  if (ndims (x) > 2)
+    error ("flipud: Only works with 2-d arrays")
+  endif
+
   nr = rows (x);
   y = x (nr:-1:1, :);
 
 endfunction
diff --git a/scripts/general/rot90.m b/scripts/general/rot90.m
--- a/scripts/general/rot90.m
+++ b/scripts/general/rot90.m
@@ -41,36 +41,46 @@
 ## @group
 ## rot90 ([1, 2; 3, 4], -1)
 ## @equiv{}
 ## rot90 ([1, 2; 3, 4], 3)
 ## @equiv{}
 ## rot90 ([1, 2; 3, 4], 7)
 ## @end group
 ## @end example
+##
+## Due to the difficulty of defining an axis about which to rotate the 
+## matrix @code{rot90} only work with 2-D arrays.  To rotate N-d arrays
+## use @code{rotdim} instead.
 ## @end deftypefn
-## @seealso{flipud and fliplr}
+## @seealso{rotdim, flipud, fliplr and flipdim}
 
 ## Author: jwe
 
 function y = rot90 (x, k)
 
-  if (nargin < 2)
-    k = 1;
-  endif
+  if (nargin == 1 || nargin == 2)
+    if (nargin < 2)
+      k = 1;
+    endif
 
-  if (imag (k) != 0 || fix (k) != k)
-    error ("rot90: k must be an integer");
-  endif
+    if (ndims (x) > 2)
+      error ("rot90: Only works with 2-D arrays")
+    endif
 
-  if (nargin == 1 || nargin == 2)
+    if (imag (k) != 0 || fix (k) != k)
+      error ("rot90: k must be an integer");
+    endif
+
     k = rem (k, 4);
+
     if (k < 0)
       k = k + 4;
     endif
+
     if (k == 0)
       y = x;
     elseif (k == 1)
       y = flipud (x.');
     elseif (k == 2)
       y = flipud (fliplr (x));
     elseif (k == 3)
       y = (flipud (x)).';
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,15 @@
+2004-04-21  David Bateman  <dbateman@free.fr>
+
+	* DLD_FUNCTIONS/fft.cc(do_fft): Correctly initialize the variable dim
+	for scalar arguments.
+
+	* DLD-FUNCTIONS/minmax.cc: Handle single vector arg correctly.
+
 2004-04-20  John W. Eaton  <jwe@octave.org>
 
 	* ls-mat-ascii.cc (read_mat_ascii_data): Prepend "X" to keywords.
 	Only drop text after last "." in name.
 
 	* lex.l (is_keyword): New function.
 	(Fiskeyword): Use it.
 	* lex.h: Provide decl.
diff --git a/src/DLD-FUNCTIONS/fft.cc b/src/DLD-FUNCTIONS/fft.cc
--- a/src/DLD-FUNCTIONS/fft.cc
+++ b/src/DLD-FUNCTIONS/fft.cc
@@ -90,22 +90,28 @@ do_fft (const octave_value_list &args, c
   if (error_state)
     return retval;
 
   for (int i = 0; i < dims.length (); i++)
     if (dims(i) < 0)
       return retval;
 
   if (dim < 0)
-    for (int i = 0; i < dims.length (); i++)
-      if ( dims(i) > 1)
-	{
-	  dim = i;
-	  break;
-	}
+    {
+      for (int i = 0; i < dims.length (); i++)
+	if ( dims(i) > 1)
+	  {
+	    dim = i;
+	    break;
+	  }
+
+      // And if the first argument is scalar?
+      if (dim < 0)
+	dim = 1;
+    }
 
   if (n_points < 0)
     n_points = dims (dim);
   else
     dims (dim) = n_points;
 
   if (dims.all_zero () || n_points == 0)
     return octave_value (Matrix ());
diff --git a/src/DLD-FUNCTIONS/minmax.cc b/src/DLD-FUNCTIONS/minmax.cc
--- a/src/DLD-FUNCTIONS/minmax.cc
+++ b/src/DLD-FUNCTIONS/minmax.cc
@@ -95,51 +95,35 @@ Software Foundation, 59 Temple Place - S
       while ((dim < dv.length ()) && (dv (dim) <= 1)) \
 	dim++; \
       if (dim == dv.length ()) \
 	dim = 0; \
     } \
  \
   bool single_arg = (nargin == 1) || arg2.is_empty();	\
  \
-  if (single_arg) \
-    { \
-      dv(dim) = 1; \
-      int n_dims = dv.length (); \
-      for (int i = n_dims; i > 1; i--) \
-	{ \
-	  if (dv(i-1) == 1) \
-	    n_dims--; \
-	  else \
-	    break; \
-	} \
-      dv.resize (n_dims); \
-    } \
- \
   if (single_arg && (nargout == 1 || nargout == 0)) \
     { \
       if (arg1.is_real_type ()) \
 	{ \
 	  NDArray m = arg1.array_value (); \
  \
 	  if (! error_state) \
 	    { \
 	      NDArray n = m. FCN (dim); \
-	      n.resize (dv); \
 	      retval(0) = n; \
 	    } \
 	} \
       else if (arg1.is_complex_type ()) \
 	{ \
 	  ComplexNDArray m = arg1.complex_array_value (); \
  \
 	  if (! error_state) \
 	    { \
 	      ComplexNDArray n = m. FCN (dim); \
-	      n.resize (dv); \
 	      retval(0) = n; \
 	    } \
 	} \
       else \
 	gripe_wrong_type_arg (#FCN, arg1); \
     } \
   else if (single_arg && nargout == 2) \
     { \
@@ -147,28 +131,26 @@ Software Foundation, 59 Temple Place - S
  \
       if (arg1.is_real_type ()) \
 	{ \
 	  NDArray m = arg1.array_value (); \
  \
 	  if (! error_state) \
 	    { \
 	      NDArray n = m. FCN (index, dim);	\
-	      n.resize (dv); \
 	      retval(0) = n; \
 	    } \
 	} \
       else if (arg1.is_complex_type ()) \
 	{ \
 	  ComplexNDArray m = arg1.complex_array_value (); \
  \
 	  if (! error_state) \
 	    { \
 	      ComplexNDArray n = m. FCN (index, dim);	\
-	      n.resize (dv); \
 	      retval(0) = n; \
 	    } \
 	} \
       else \
 	gripe_wrong_type_arg (#FCN, arg1); \
  \
       int len = index.numel (); \
  \
diff --git a/src/pr-output.cc b/src/pr-output.cc
--- a/src/pr-output.cc
+++ b/src/pr-output.cc
@@ -2137,27 +2137,24 @@ returns the formatted output in a string
 }
 
 DEFUN (fdisp, args, ,
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} fdisp (@var{fid}, @var{x})\n\
 Display the value of @var{x} on the stream @var{fid}.  For example,\n\
 \n\
 @example\n\
-disp (stdout, \"The value of pi is:\"), disp (stdout, pi)\n\
+fdisp (stdout, \"The value of pi is:\"), fdisp (stdout, pi)\n\
 \n\
      @print{} the value of pi is:\n\
      @print{} 3.1416\n\
 @end example\n\
 \n\
 @noindent\n\
-Note that the output from @code{disp} always ends with a newline.\n\
-\n\
-If an output value is requested, @code{disp} prints nothing and\n\
-returns the formatted output in a string.\n\
+Note that the output from @code{fdisp} always ends with a newline.\n\
 @end deftypefn\n\
 @seealso{disp}")
 {
   octave_value retval;
 
   int nargin = args.length ();
 
   if (nargin == 2)
diff --git a/test/octave.test/io/io.exp b/test/octave.test/io/io.exp
--- a/test/octave.test/io/io.exp
+++ b/test/octave.test/io/io.exp
@@ -66,29 +66,29 @@ set test sprintf-2
 set prog_output "^error:.*"
 do_test sprintf-2.m
 
 set test sprintf-3
 set prog_output "\n... sprintf:."
 do_test sprintf-3.m
 
 set test fopen-1
-set prog_output "^ans = 1"
+set prog_output "ans = 1"
 do_test fopen-1.m
 
 set test fopen-2
 set prog_output "^error:.*"
 do_test fopen-2.m
 
 set test fopen-3
 set prog_output "^error:.*"
 do_test fopen-3.m
 
 set test fopen-4
-set prog_output "^error:.*"
+set prog_output "error:.*"
 do_test fopen-4.m
 
 set test fopen-5
 set prog_output "\n... fopen:.*"
 do_test fopen-5.m
 
 set test fopen-6
 set prog_output "\n... fopen:.*"
diff --git a/test/octave.test/matrix/diff-5.m b/test/octave.test/matrix/diff-5.m
--- a/test/octave.test/matrix/diff-5.m
+++ b/test/octave.test/matrix/diff-5.m
@@ -1,1 +1,1 @@
-diff (1, 2, 3)
+diff (1, 2, 3, 4)
diff --git a/test/octave.test/system/system.exp b/test/octave.test/system/system.exp
--- a/test/octave.test/system/system.exp
+++ b/test/octave.test/system/system.exp
@@ -151,29 +151,29 @@ set test usleep-2
 set prog_output "\n... usleep:.*"
 do_test usleep-2.m
 
 set test usleep-3
 set prog_output "\n... usleep:.*"
 do_test usleep-3.m
 
 set test rename-1
-set prog_output "^ans = 1"
+set prog_output "ans = 1"
 do_test rename-1.m
 
 set test rename-2
 set prog_output "\n... rename:.*"
 do_test rename-2.m
 
 set test rename-3
 set prog_output "\n... rename:.*"
 do_test rename-3.m
 
 set test unlink-1
-set prog_output "^ans = 1"
+set prog_output "ans = 1"
 do_test unlink-1.m
 
 set test unlink-2
 set prog_output "\n... unlink:.*"
 do_test unlink-2.m
 
 set test unlink-3
 set prog_output "\n... unlink:.*"
@@ -207,17 +207,17 @@ set test rmdir-1
 set prog_output "\n... rmdir:.*"
 do_test rmdir-1.m
 
 set test rmdir-2
 set prog_output "\n... rmdir:.*"
 do_test rmdir-2.m
 
 set test umask-1
-set prog_output "^ans = 1"
+set prog_output "ans = 1"
 do_test umask-1.m
 
 set test umask-2
 set prog_output "\n... umask:.*"
 do_test umask-2.m
 
 set test umask-3
 set prog_output "\n... umask:.*"
