# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1249627611 -7200
#      Fri Aug 07 08:46:51 2009 +0200
# Node ID e5e4e404a59df70d336ce18993e3724d73103961
# Parent  b096d11237be2ce84e440d2316c9b992162d1b2d
simplify flipdim

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,12 @@
+2009-08-07  Jaroslav Hajek  <highegg@gmail.com>
+
+	* general/flipdim.m: Simplify.
+
 2009-08-07  Olli Saarela  <olli.saarela@gmail.com>
 
 	* plot/__gnuplot_ginput__.m: If read fails to return data, sleep
 	before trying again.
 
 2009-08-06  John W. Eaton  <jwe@octave.org>
 
 	* plot/compass.m, plot/feather.m: Simplify argument processing.
diff --git a/scripts/general/flipdim.m b/scripts/general/flipdim.m
--- a/scripts/general/flipdim.m
+++ b/scripts/general/flipdim.m
@@ -1,9 +1,10 @@
 ## Copyright (C) 2004, 2005, 2006, 2007 David Bateman
+## Copyright (C) 2009 VZLU Prague
 ##
 ## This file is part of Octave.
 ##
 ## Octave is free software; you can redistribute it and/or modify it
 ## under the terms of the GNU General Public License as published by
 ## the Free Software Foundation; either version 3 of the License, or (at
 ## your option) any later version.
 ##
@@ -26,41 +27,34 @@
 ## flipdim ([1, 2; 3, 4], 2)
 ##      @result{}  2  1
 ##          4  3
 ## @end group
 ## @end example
 ## @seealso{fliplr, flipud, rot90, rotdim}
 ## @end deftypefn
 
-## Author: David Bateman
+## Author: David Bateman, Jaroslav Hajek
 
 function y = flipdim (x, dim)
 
   if (nargin != 1 && nargin != 2)
     print_usage ();
   endif
 
   nd = ndims (x);
-  sz = size (x);
   if (nargin == 1)
     ## Find the first non-singleton dimension.
-    dim = 1;
-    while (dim < nd + 1 && sz(dim) == 1)
-      dim = dim + 1;
-    endwhile
-    if (dim > nd)
+    dim = find (size (x) != 1, 1);
+    if (isempty (dim))
       dim = 1;
     endif
   else
-    if (! (isscalar (dim) && dim == round (dim)) && dim > 0 && dim < (nd + 1))
+    if (! isindex (dim, nd))
       error ("flipdim: dim must be an integer and valid dimension");
     endif
   endif
 
-  idx = cell ();
-  for i = 1:nd
-    idx{i} = 1:sz(i);
-  endfor
-  idx{dim} = sz(dim):-1:1;
+  idx(1:nd) = {':'};
+  idx{dim} = size (x, dim):-1:1;
   y = x(idx{:});
 
 endfunction
