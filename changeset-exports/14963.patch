# HG changeset patch
# User Max Brister <max@2bass.com>
# Date 1340309286 18000
#      Thu Jun 21 15:08:06 2012 -0500
# Node ID 709f500697226fed7b2b56a1fac7c7a77a665e80
# Parent  90a7a2af2cd5fa978835b70ff2d11c46a156a970
Change algorithm for placing releases and simplify PHIs in low level Octave IR

* src/pt-jit.cc (octave_jit_compute_nelem): Fix whitepsace issue.
  (octave_jit_gindex_range): Remove debug print.
  (jit_block::replace_in_phi, jit_block::maybe_split,
  jit_block::jit_phi_incomming, jit_phi::to_llvm, jit_convert::append,
  jit_convert::insert_before, jit_convert::insert_after,
  jit_convert::simplify_phi): New function.
  (jit_block::branch_llvm, jit_terminator::create_merge): Removed function.
  (jit_convert::jit_convert): Replace add_block with append and simplify phi.
  (jit_convert::visit_simple_for_command, jit_convert::visit_if_command_list):
  Replace add_block with append.
  (jit_convert::place_releases): Use compute_temp instead of release_placer.
  (jit_convert::compute_temp): New class.
  (jit_convert::release_placer): Removed class.
  (jit_convert::convert_llvm::finish_phi): Do not check phi argument types.
  (jit_convert::convert_llvm::visit): Do not create merge blocks.

* src/pt-jit.h (jit_block::NO_ID): Made public.
  (jit_block::jit_block): Add visit_count argument.
  (jit_block::replace_in_phi, jit_block::maybe_split, jit_phi::to_llvm,
  jit_convert::simplify_phi): New declaration.
  (jit_block::branch_llvm, jit_terminator::create_merge): Remove declaration.
  (jit_block::jit_phi_incomming): Keep track of phi user.
  (jit_block::jit_block::callback<int>): New template specialization.
  (jit_assign::src): Do not cast src to jit_instruction.
  (jit_phi::add_incomming): Keep track of this.
  (jit_phi::incomming_llvm): Access incomming llvm directly.
  (jit_call::needs_release): New function.
  (jit_convert::add_block): Renamed to jit_convert::append.
  (jit_convert::create_checked_impl): Use append instead of add_block.
  (jit_convert::release_placer): Removed class.
  (jit_convert::compute_temp): New class.
  (jit_convert::finish_phi): Change declaration to take a jit_phi as argument.

diff --git a/src/pt-jit.cc b/src/pt-jit.cc
--- a/src/pt-jit.cc
+++ b/src/pt-jit.cc
@@ -132,17 +132,17 @@ octave_jit_binary_any_any (octave_value:
   rep->grab ();
   return rep;
 }
 
 extern "C" octave_idx_type
 octave_jit_compute_nelem (double base, double limit, double inc)
 {
   Range rng = Range (base, limit, inc);
-  return rng.nelem (); 
+  return rng.nelem ();
 }
 
 extern "C" void
 octave_jit_release_any (octave_base_value *obv)
 {
   obv->release ();
 }
 
@@ -217,17 +217,16 @@ octave_jit_ginvalid_index (void)
       gripe_library_execution_error ();
     }
 }
 
 extern "C" void
 octave_jit_gindex_range (int nd, int dim, octave_idx_type iext,
                          octave_idx_type ext)
 {
-  std::cout << "gindex_range\n";
   try
     {
       gripe_index_out_of_range (nd, dim, iext, ext);
     }
   catch (const octave_execution_exception&)
     {
       gripe_library_execution_error ();
     }
@@ -1069,16 +1068,30 @@ jit_block::replace_with (jit_value *valu
 
   while (ILIST_T::first_use ())
     {
       jit_phi_incomming *incomming = ILIST_T::first_use ();
       incomming->stash_value (block);
     }
 }
 
+void
+jit_block::replace_in_phi (jit_block *ablock, jit_block *with)
+{
+  jit_phi_incomming *node = ILIST_T::first_use ();
+  while (node)
+    {
+      jit_phi_incomming *prev = node;
+      node = node->next ();
+
+      if (prev->user_parent () == ablock)
+        prev->stash_value (with);
+    }
+}
+
 jit_block *
 jit_block::maybe_merge ()
 {
   if (successor_count () == 1 && successor (0) != this
       && (successor (0)->use_count () == 1 || instructions.size () == 1))
     {
       jit_block *to_merge = successor (0);
       merge (*to_merge);
@@ -1194,28 +1207,16 @@ jit_block::successor (size_t i) const
 size_t
 jit_block::successor_count (void) const
 {
   jit_terminator *term = terminator ();
   return term ? term->successor_count () : 0;
 }
 
 llvm::BasicBlock *
-jit_block::branch_llvm (size_t idx) const
-{
-  return terminator ()->branch_llvm (idx);
-}
-
-llvm::BasicBlock *
-jit_block::branch_llvm (jit_block *succ) const
-{
-  return terminator ()->branch_llvm (succ);
-}
-
-llvm::BasicBlock *
 jit_block::to_llvm (void) const
 {
   return llvm::cast<llvm::BasicBlock> (llvm_value);
 }
 
 std::ostream&
 jit_block::print_dom (std::ostream& os) const
 {
@@ -1317,16 +1318,37 @@ jit_block::pop_all (void)
 {
   for (iterator iter = begin (); iter != end (); ++iter)
     {
       jit_instruction *instr = *iter;
       instr->pop_variable ();
     }
 }
 
+jit_block *
+jit_block::maybe_split (jit_convert& convert, jit_block *asuccessor)
+{
+  if (successor_count () > 1)
+    {
+      jit_terminator *term = terminator ();
+      size_t idx = term->successor_index (asuccessor);
+      jit_block *split = convert.create<jit_block> ("phi_split", mvisit_count);
+
+      convert.insert_after (this, split);
+      term->stash_argument (idx, split);
+      jit_branch *br = split->append (convert.create<jit_branch> (asuccessor));
+      replace_in_phi (asuccessor, split);
+      br->infer ();
+
+      return split;
+    }
+
+  return this;
+}
+
 void
 jit_block::create_dom_tree (size_t visit_count)
 {
   if (mvisit_count > visit_count)
     return;
   ++mvisit_count;
 
   if (idom != this)
@@ -1349,16 +1371,22 @@ jit_block::idom_intersect (jit_block *b)
 
       while (j->id () > i->id ())
         j = j->idom;
     }
 
   return i;
 }
 
+// -------------------- jit_phi_incomming --------------------
+
+jit_block *
+jit_phi_incomming::user_parent (void) const
+{ return muser->parent (); }
+
 // -------------------- jit_phi --------------------
 bool
 jit_phi::prune (void)
 {
   jit_block *p = parent ();
   size_t new_idx = 0;
   jit_value *unique = argument (1);
 
@@ -1415,53 +1443,34 @@ jit_phi::infer (void)
     {
       stash_type (infered);
       return true;
     }
 
   return false;
 }
 
+llvm::PHINode *
+jit_phi::to_llvm (void) const
+{
+  return llvm::cast<llvm::PHINode> (jit_value::to_llvm ());
+}
+
 // -------------------- jit_terminator --------------------
 size_t
 jit_terminator::successor_index (const jit_block *asuccessor) const
 {
   size_t scount = successor_count ();
   for (size_t i = 0; i < scount; ++i)
     if (successor (i) == asuccessor)
       return i;
 
   panic_impossible ();
 }
 
-void
-jit_terminator::create_merge (llvm::Function *function, jit_block *asuccessor)
-{
-  size_t idx = successor_index (asuccessor);
-  if (! mbranch_llvm[idx] && successor_count () > 1)
-    {
-      assert (parent ());
-      assert (parent_llvm ());
-      llvm::BasicBlock *merge = llvm::BasicBlock::Create (context, "phi_merge",
-                                                          function,
-                                                          parent_llvm ());
-
-      // fix the predecessor jump if it has been created
-      if (has_llvm ())
-        {
-          llvm::TerminatorInst *branch = to_llvm ();
-          branch->setSuccessor (idx, merge);
-        }
-
-      llvm::IRBuilder<> temp (merge);
-      temp.CreateBr (successor_llvm (idx));
-      mbranch_llvm[idx] = merge;
-    }
-}
-
 bool
 jit_terminator::infer (void)
 {
   if (! parent ()->alive ())
     return false;
 
   bool changed = false;
   for (size_t i = 0; i < malive.size (); ++i)
@@ -1514,28 +1523,28 @@ jit_call::infer (void)
 // -------------------- jit_convert --------------------
 jit_convert::jit_convert (llvm::Module *module, tree &tee)
   : iterator_count (0), breaking (false)
 {
   jit_instruction::reset_ids ();
 
   entry_block = create<jit_block> ("body");
   final_block = create<jit_block> ("final");
-  add_block (entry_block);
+  append (entry_block);
   entry_block->mark_alive ();
   block = entry_block;
   visit (tee);
 
   // FIXME: Remove if we no longer only compile loops
   assert (! breaking);
   assert (breaks.empty ());
   assert (continues.empty ());
 
   block->append (create<jit_branch> (final_block));
-  add_block (final_block);
+  append (final_block);
 
   for (vmap_t::iterator iter = vmap.begin (); iter != vmap.end (); ++iter)
     {
       jit_variable *var = iter->second;
       const std::string& name = var->name ();
       if (name.size () && name[0] != '#')
         final_block->append (create<jit_store_argument> (var));
     }
@@ -1561,16 +1570,18 @@ jit_convert::jit_convert (llvm::Module *
             append_users_term (term);
           else
             append_users (next);
         }
     }
 
   remove_dead ();
   merge_blocks ();
+  simplify_phi ();
+  final_block->label ();
   place_releases ();
 
 #ifdef OCTAVE_JIT_DEBUG
   std::cout << "-------------------- Compiling tree --------------------\n";
   std::cout << tee.str_print_code () << std::endl;
   print_blocks ("octave jit ir");
 #endif
 
@@ -1710,17 +1721,17 @@ jit_convert::visit_simple_for_command (t
   // we need a variable for our iterator, because it is used in multiple blocks
   std::stringstream ss;
   ss << "#iter" << iterator_count++;
   std::string iter_name = ss.str ();
   jit_variable *iterator = create<jit_variable> (iter_name);
   vmap[iter_name] = iterator;
 
   jit_block *body = create<jit_block> ("for_body");
-  add_block (body);
+  append (body);
 
   jit_block *tail = create<jit_block> ("for_tail");
 
   // do control expression, iter init, and condition check in prev_block (block)
   jit_value *control = visit (cmd.control_expr ());
   jit_call *init_iter = create<jit_call> (jit_typeinfo::for_init, control);
   block->append (init_iter);
   block->append (create<jit_assign> (iterator, init_iter));
@@ -1739,41 +1750,41 @@ jit_convert::visit_simple_for_command (t
   tree_statement_list *pt_body = cmd.body ();
   pt_body->accept (*this);
 
   if (breaking && continues.empty ())
     {
       // WTF are you doing user? Every branch was a continue, why did you have
       // a loop??? Users are silly people...
       finish_breaks (tail, breaks);
-      add_block (tail);
+      append (tail);
       block = tail;
       return;
     }
 
   // check our condition, continues jump to this block
   jit_block *check_block = create<jit_block> ("for_check");
-  add_block (check_block);
+  append (check_block);
 
   if (! breaking)
     block->append (create<jit_branch> (check_block));
   finish_breaks (check_block, continues);
 
   block = check_block;
   const jit_function& add_fn = jit_typeinfo::binary_op (octave_value::op_add);
   jit_value *one = create<jit_const_index> (1);
   jit_call *iter_inc = create<jit_call> (add_fn, iterator, one);
   block->append (iter_inc);
   block->append (create<jit_assign> (iterator, iter_inc));
   check = block->append (create<jit_call> (jit_typeinfo::for_check, control,
                                            iterator));
   block->append (create<jit_cond_branch> (check, body, tail));
 
   // breaks will go to our tail
-  add_block (tail);
+  append (tail);
   finish_breaks (tail, breaks);
   block = tail;
 }
 
 void
 jit_convert::visit_complex_for_command (tree_complex_for_command&)
 {
   fail ();
@@ -1862,29 +1873,29 @@ jit_convert::visit_if_command_list (tree
   iter = lst.begin ();
   for (size_t i = 0; iter != lst.end (); ++iter, ++i)
     {
       tree_if_clause *tic = *iter;
       block = entry_blocks[i];
       assert (block);
 
       if (i) // the first block is prev_block, so it has already been added
-        add_block (entry_blocks[i]);
+        append (entry_blocks[i]);
 
       if (! tic->is_else_clause ())
         {
           tree_expression *expr = tic->condition ();
           jit_value *cond = visit (expr);
           jit_call *check = create_checked (&jit_typeinfo::logically_true,
                                             cond);
           block->append (check);
 
           jit_block *body = create<jit_block> (i == 0 ? "if_body"
                                                : "ifelse_body");
-          add_block (body);
+          append (body);
 
           jit_instruction *br = create<jit_cond_branch> (check, body,
                                                         entry_blocks[i + 1]);
           block->append (br);
           block = body;
         }
 
       tree_statement_list *stmt_lst = tic->commands ();
@@ -1897,17 +1908,17 @@ jit_convert::visit_if_command_list (tree
         {
           ++num_incomming;
           block->append (create<jit_branch> (tail));
         }
     }
 
   if (num_incomming || ! last_else)
     {
-      add_block (tail);
+      append (tail);
       block = tail;
     }
   else
     // every branch broke, so we don't have a tail
     breaking = true;
 }
 
 void
@@ -2124,16 +2135,37 @@ jit_convert::visit_while_command (tree_w
 }
 
 void
 jit_convert::visit_do_until_command (tree_do_until_command&)
 {
   fail ();
 }
 
+void
+jit_convert::append (jit_block *ablock)
+{
+  blocks.push_back (ablock);
+  ablock->stash_location (--blocks.end ());
+}
+
+void
+jit_convert::insert_before (block_iterator iter, jit_block *ablock)
+{
+  iter = blocks.insert (iter, ablock);
+  ablock->stash_location (iter);
+}
+
+void
+jit_convert::insert_after (block_iterator iter, jit_block *ablock)
+{
+  ++iter;
+  insert_before (iter, ablock);
+}
+
 jit_variable *
 jit_convert::get_variable (const std::string& vname)
 {
   vmap_t::iterator iter;
   iter = vmap.find (vname);
   if (iter != vmap.end ())
     return iter->second;
 
@@ -2351,63 +2383,139 @@ jit_convert::remove_dead ()
           biter = blocks.erase (biter);
         }
     }
 }
 
 void
 jit_convert::place_releases (void)
 {
-  release_placer placer (*this);
-  entry_block->visit_dom (placer, &jit_block::pop_all);
+  compute_temp tinfo (*this);
+}
+
+void
+jit_convert::simplify_phi (void)
+{
+  for (block_list::iterator biter = blocks.begin (); biter != blocks.end ();
+       ++biter)
+    {
+      jit_block &ablock = **biter;
+      for (jit_block::iterator iter = ablock.begin (); iter != ablock.end ()
+             && isa<jit_phi> (*iter); ++iter)
+        simplify_phi (*static_cast<jit_phi *> (*iter));
+    }
+}
+
+void
+jit_convert::simplify_phi (jit_phi& phi)
+{
+  jit_block& pblock = *phi.parent ();
+  const jit_function& cast_fn = jit_typeinfo::cast (phi.type ());
+  jit_variable *dest = phi.dest ();
+  for (size_t i = 0; i < phi.argument_count (); ++i)
+    {
+      jit_value *arg = phi.argument (i);
+      if (arg->type () != phi.type ())
+        {
+          jit_block *pred = phi.incomming (i);
+          jit_block *split = pred->maybe_split (*this, pblock);
+          jit_terminator *term = split->terminator ();
+          jit_instruction *cast = create<jit_call> (cast_fn, arg);
+          jit_assign *assign = create<jit_assign> (dest, cast);
+
+          split->insert_before (term, cast);
+          split->insert_before (term, assign);
+          cast->infer ();
+          assign->infer ();
+          phi.stash_argument (i, assign);
+        }
+    }
 }
 
 void
 jit_convert::finish_breaks (jit_block *dest, const block_list& lst)
 {
   for (block_list::const_iterator iter = lst.begin (); iter != lst.end ();
        ++iter)
     {
       jit_block *b = *iter;
       b->append (create<jit_branch> (dest));
     }
 }
 
-// -------------------- jit_convert::release_placer --------------------
-void
-jit_convert::release_placer::operator() (jit_block& block)
+// -------------------- jit_convert::compute_temp --------------------
+jit_convert::compute_temp::compute_temp (jit_convert& aconvert)
+  : convert (aconvert), mtemp_out (aconvert.final_block->id () + 1)
 {
-  for (jit_block::iterator iter = block.begin (); iter != block.end (); ++iter)
+  block_list& blocks = convert.blocks;
+
+  // initialze mtemp_out
+  for (block_list::iterator biter = blocks.begin (); biter != blocks.end ();
+       ++biter)
     {
-      jit_instruction *instr = *iter;
-      instr->stash_last_use (instr);
-
-      for (size_t i = 0; i < instr->argument_count (); ++i)
+      jit_block& block = **biter;
+      instr_set& tout = temp_out (block);
+      for (jit_block::iterator iter = block.begin (); iter != block.end ();
+           ++iter)
         {
-          jit_value *arg = instr->argument (i);
-          assert (arg);
-          arg->stash_last_use (instr);
+          jit_instruction *instr = *iter;
+
+          // check for temporaries that require release and live across
+          // multiple blocks
+          if (instr->needs_release ()
+              && instr->use_count () == 1
+              && instr->first_use ()->user_parent () != &block)
+            tout.insert (instr);
+
+          if (isa<jit_call> (instr))
+            {
+              // place releases for temporary arguments
+              for (size_t i = 0; i < instr->argument_count (); ++i)
+                {
+                  jit_value *arg = instr->argument (i);
+                  if (arg->needs_release ())
+                    {
+                      jit_call *release
+                        = convert.create<jit_call> (&jit_typeinfo::release,
+                                                    arg);
+                      release->infer ();
+                      block.insert_after (iter, release);
+                      ++iter;
+                    }
+                }
+            }
         }
-
-      jit_assign *assign = dynamic_cast<jit_assign *> (instr);
-      if (assign && assign->dest ()->has_top ())
+    }
+
+  do
+    {
+      changed = false;
+      convert.entry_block->visit_dom (*this, 0);
+    }
+  while (changed);
+}
+
+void
+jit_convert::compute_temp::operator() (jit_block& block)
+{
+  instr_set& tout = temp_out (block);
+  for (jit_use *use = block.first_use (); use; use = use->next ())
+    {
+      jit_block& pred = *use->user_parent ();
+      instr_set& pred_tout = temp_out (pred);
+      for (instr_set::iterator iter = pred_tout.begin ();
+           iter != pred_tout.end (); ++ iter)
         {
-          jit_variable *var = assign->dest ();
-          jit_instruction *last_use = var->last_use ();
-          jit_call *release = convert.create<jit_call> (jit_typeinfo::release,
-                                                        var->top ());
-          release->infer ();
-          if (last_use && last_use->parent () == &block
-              && ! isa<jit_phi> (last_use))
-            block.insert_after (last_use->location (), release);
-          else
-            block.prepend_after_phi (release);
+          jit_instruction *instr = *iter;
+          jit_block *use_in = instr->parent ();
+
+          // FIXME: Only valid until we support try/catch or unwind_protect
+          if (use_in != &block && &block != convert.final_block)
+            changed = changed || tout.insert (instr).second;
         }
-
-      instr->push_variable ();
     }
 }
 
 // -------------------- jit_convert::convert_llvm --------------------
 llvm::Function *
 jit_convert::convert_llvm::convert (llvm::Module *module,
                                     const std::vector<std::pair< std::string, bool> >& args,
                                     const std::list<jit_block *>& blocks,
@@ -2462,99 +2570,40 @@ jit_convert::convert_llvm::convert (llvm
       // now finish phi nodes
       for (biter = blocks.begin (); biter != blocks.end (); ++biter)
         {
           jit_block& block = **biter;
           for (jit_block::iterator piter = block.begin ();
                piter != block.end () && isa<jit_phi> (*piter); ++piter)
             {
               jit_instruction *phi = *piter;
-              finish_phi (phi);
+              finish_phi (static_cast<jit_phi *> (phi));
             }
         }
 
       jit_block *last = blocks.back ();
       builder.SetInsertPoint (last->to_llvm ());
       builder.CreateRetVoid ();
     } catch (const jit_fail_exception& e)
     {
       function->eraseFromParent ();
       throw;
     }
 
   return function;
 }
 
 void
-jit_convert::convert_llvm::finish_phi (jit_instruction *aphi)
+jit_convert::convert_llvm::finish_phi (jit_phi *phi)
 {
-  jit_phi *phi = static_cast<jit_phi *> (aphi);
-  llvm::PHINode *llvm_phi = llvm::cast<llvm::PHINode> (phi->to_llvm ());
-
-  bool can_remove = ! phi->use_count ();
-  if (! can_remove && llvm_phi->hasOneUse () && phi->use_count () == 1)
-    {
-      jit_instruction *user = phi->first_use ()->user ();
-      can_remove = isa<jit_call> (user); // must be a remove
-    }
-
-  if (can_remove)
+  llvm::PHINode *llvm_phi = phi->to_llvm ();
+  for (size_t i = 0; i < phi->argument_count (); ++i)
     {
-      // replace with releases along each incomming branch
-      while (! llvm_phi->use_empty ())
-        {
-          llvm::Instruction *llvm_instr;
-          llvm_instr = llvm::cast<llvm::Instruction> (llvm_phi->use_back ());
-          llvm_instr->eraseFromParent ();
-        }
-
-      llvm_phi->eraseFromParent ();
-      phi->stash_llvm (0);
-
-      for (size_t i = 0; i < phi->argument_count (); ++i)
-        {
-          jit_value *arg = phi->argument (i);
-          if (arg->has_llvm () && phi->argument_type (i) != phi->type ())
-            {
-              llvm::BasicBlock *pred = phi->incomming_llvm (i);
-              builder.SetInsertPoint (--pred->end ());
-              const jit_function::overload& ol
-                = jit_typeinfo::get_release (phi->argument_type (i));
-              if (! ol.function)
-                {
-                  std::stringstream ss;
-                  ss << "No release for phi(" << i << "): ";
-                  phi->print (ss);
-                  fail (ss.str ());
-                }
-
-              create_call (ol, phi->argument (i));
-            }
-        }
-    }
-  else
-    {
-      for (size_t i = 0; i < phi->argument_count (); ++i)
-        {
-          llvm::BasicBlock *pred = phi->incomming_llvm (i);
-          if (phi->argument_type (i) == phi->type ())
-            llvm_phi->addIncoming (phi->argument_llvm (i), pred);
-          else
-            {
-              // add cast right before pred terminator
-              builder.SetInsertPoint (--pred->end ());
-
-              const jit_function::overload& ol
-                = jit_typeinfo::cast (phi->type (),
-                                      phi->argument_type (i));
-
-              llvm::Value *casted = create_call (ol, phi->argument (i));
-              llvm_phi->addIncoming (casted, pred);
-            }
-        }
+      llvm::BasicBlock *pred = phi->incomming_llvm (i);
+      llvm_phi->addIncoming (phi->argument_llvm (i), pred);
     }
 }
 
 void
 jit_convert::convert_llvm::visit (jit_const_string& cs)
 {
   cs.stash_llvm (builder.CreateGlobalStringPtr (cs.value ()));
 }
@@ -2646,25 +2695,16 @@ void
 jit_convert::convert_llvm::visit (jit_phi& phi)
 {
   // we might not have converted all incoming branches, so we don't
   // set incomming branches now
   llvm::PHINode *node = llvm::PHINode::Create (phi.type_llvm (),
                                                phi.argument_count ());
   builder.Insert (node);
   phi.stash_llvm (node);
-
-  jit_block *pblock = phi.parent ();
-  for (size_t i = 0; i < phi.argument_count (); ++i)
-    if (phi.argument_type (i) != phi.type ())
-      {
-        jit_block *inc = phi.incomming (i);
-        jit_terminator *term = inc->terminator ();
-        term->create_merge (function, pblock);
-      }
 }
 
 void
 jit_convert::convert_llvm::visit (jit_variable&)
 {
   fail ("ERROR: SSA construction should remove all variables");
 }
 
diff --git a/src/pt-jit.h b/src/pt-jit.h
--- a/src/pt-jit.h
+++ b/src/pt-jit.h
@@ -82,16 +82,17 @@ namespace llvm
   class ExecutionEngine;
   class Function;
   class BasicBlock;
   class LLVMContext;
   class Type;
   class Twine;
   class GlobalVariable;
   class TerminatorInst;
+  class PHINode;
 }
 
 class octave_base_value;
 class octave_value;
 class tree;
 
 template <typename HOLDER_T, typename SUB_T>
 class jit_internal_node;
@@ -727,16 +728,18 @@ private:
 // forward declare all ir classes
 #define JIT_METH(cname)                         \
   class jit_ ## cname;
 
 JIT_VISIT_IR_NOTEMPLATE
 
 #undef JIT_METH
 
+class jit_convert;
+
 // ABCs which aren't included in  JIT_VISIT_IR_ALL
 class jit_instruction;
 class jit_terminator;
 
 template <typename T, jit_type *(*EXTRACT_T)(void), typename PASS_T = T,
           bool QUOTE=false>
 class jit_const;
 
@@ -796,16 +799,18 @@ public:
 
   jit_instruction *last_use (void) const { return mlast_use; }
 
   void stash_last_use (jit_instruction *alast_use)
   {
     mlast_use = alast_use;
   }
 
+  virtual bool needs_release (void) const { return false; }
+
   virtual std::ostream& print (std::ostream& os, size_t indent = 0) const = 0;
 
   virtual std::ostream& short_print (std::ostream& os) const
   { return print (os); }
 
   virtual void accept (jit_ir_walker& walker) = 0;
 
   bool has_llvm (void) const
@@ -1119,22 +1124,27 @@ jit_block : public jit_value, public jit
 public:
   typedef std::list<jit_instruction *> instruction_list;
   typedef instruction_list::iterator iterator;
   typedef instruction_list::const_iterator const_iterator;
 
   typedef std::set<jit_block *> df_set;
   typedef df_set::const_iterator df_iterator;
 
-  jit_block (const std::string& aname) : mvisit_count (0), mid (NO_ID),
-                                         idom (0), mname (aname), malive (false)
+  static const size_t NO_ID = static_cast<size_t> (-1);
+
+  jit_block (const std::string& aname, size_t avisit_count = 0)
+    : mvisit_count (avisit_count), mid (NO_ID), idom (0), mname (aname),
+      malive (false)
   {}
 
   virtual void replace_with (jit_value *value);
 
+  void replace_in_phi (jit_block *ablock, jit_block *with);
+
   // we have a new internal list, but we want to stay compatable with jit_value
   jit_use *first_use (void) const { return jit_value::first_use (); }
 
   size_t use_count (void) const { return jit_value::use_count (); }
 
   // if a block is alive, then it might be visited during execution
   bool alive (void) const { return malive; }
 
@@ -1156,35 +1166,41 @@ public:
   T *append (T *instr)
   {
     internal_append (instr);
     return instr;
   }
 
   jit_instruction *insert_before (iterator loc, jit_instruction *instr);
 
+  jit_instruction *insert_before (jit_instruction *loc, jit_instruction *instr)
+  {
+    return insert_before (loc->location (), instr);
+  }
+
   jit_instruction *insert_after (iterator loc, jit_instruction *instr);
 
+  jit_instruction *insert_after (jit_instruction *loc, jit_instruction *instr)
+  {
+    return insert_after (loc->location (), instr);
+  }
+
   iterator remove (iterator iter)
   {
     jit_instruction *instr = *iter;
     iter = instructions.erase (iter);
     instr->stash_parent (0, instructions.end ());
     return iter;
   }
 
   jit_terminator *terminator (void) const;
 
   // is the jump from pred alive?
   bool branch_alive (jit_block *asucc) const;
 
-  llvm::BasicBlock *branch_llvm (size_t idx) const;
-
-  llvm::BasicBlock *branch_llvm (jit_block *succ) const;
-
   jit_block *successor (size_t i) const;
 
   size_t successor_count (void) const;
 
   iterator begin (void) { return instructions.begin (); }
 
   const_iterator begin (void) const { return instructions.begin (); }
 
@@ -1281,16 +1297,24 @@ public:
     for (const_iterator iter = begin (); iter != end (); ++iter)
       {
         jit_instruction *instr = *iter;
         instr->print (os, indent + 1) << std::endl;
       }
     return os;
   }
 
+  // ...
+  jit_block *maybe_split (jit_convert& convert, jit_block *asuccessor);
+
+  jit_block *maybe_split (jit_convert& convert, jit_block& asuccessor)
+  {
+    return maybe_split (convert, &asuccessor);
+  }
+
   // print dominator infomration
   std::ostream& print_dom (std::ostream& os) const;
 
   virtual std::ostream& short_print (std::ostream& os) const
   {
     os << mname;
     if (mid != NO_ID)
       os << mid;
@@ -1316,45 +1340,53 @@ private:
   void create_dom_tree (size_t visit_count);
 
   jit_block *idom_intersect (jit_block *b);
 
   template <typename func_type0, typename func_type1>
   void do_visit_dom (size_t visit_count, func_type0 inorder,
                      func_type1 postorder);
 
-  static const size_t NO_ID = static_cast<size_t> (-1);
   size_t mvisit_count;
   size_t mid;
   jit_block *idom;
   df_set mdf;
   std::vector<jit_block *> dom_succ;
   std::string mname;
   instruction_list instructions;
   bool malive;
   std::list<jit_block *>::iterator mlocation;
 };
 
 // keeps track of phi functions that use a block on incomming edges
 class
 jit_phi_incomming : public jit_internal_node<jit_block, jit_phi_incomming>
 {
 public:
-  jit_phi_incomming (void) {}
+  jit_phi_incomming (void) : muser (0) {}
+
+  jit_phi_incomming (jit_phi *auser) : muser (auser) {}
 
   jit_phi_incomming (const jit_phi_incomming& use) : jit_internal_node ()
   {
     *this = use;
   }
 
   jit_phi_incomming& operator= (const jit_phi_incomming& use)
   {
     stash_value (use.value ());
+    muser = use.muser;
     return *this;
   }
+
+  jit_phi *user (void) const { return muser; }
+
+  jit_block *user_parent (void) const;
+private:
+  jit_phi *muser;
 };
 
 // allow regular function pointers as well as pointers to members
 template <typename func_type>
 class jit_block_callback
 {
 public:
   jit_block_callback (func_type afunction) : function (afunction) {}
@@ -1363,16 +1395,26 @@ public:
   {
     function (block);
   }
 private:
   func_type function;
 };
 
 template <>
+class jit_block_callback<int>
+{
+public:
+  jit_block_callback (int) {}
+
+  void operator() (jit_block&)
+  {}
+};
+
+template <>
 class jit_block_callback<void (jit_block::*)(void)>
 {
 public:
   typedef void (jit_block::*func_type)(void);
 
   jit_block_callback (func_type afunction) : function (afunction) {}
 
   void operator() (jit_block& ablock)
@@ -1506,19 +1548,19 @@ private:
 
 class
 jit_assign : public jit_assign_base
 {
 public:
   jit_assign (jit_variable *adest, jit_value *asrc)
     : jit_assign_base (adest, asrc) {}
 
-  jit_instruction *src (void) const
+  jit_value *src (void) const
   {
-    return static_cast<jit_instruction *> (argument (0));
+    return argument (0);
   }
 
   virtual bool infer (void)
   {
     jit_type *stype = src ()->type ();
     if (stype != type())
       {
         stash_type (stype);
@@ -1547,29 +1589,28 @@ public:
   }
 
   // removes arguments form dead incomming jumps
   bool prune (void);
 
   void add_incomming (jit_block *from, jit_value *value)
   {
     push_argument (value);
-    mincomming.push_back (jit_phi_incomming ());
+    mincomming.push_back (jit_phi_incomming (this));
     mincomming[mincomming.size () - 1].stash_value (from);
   }
 
   jit_block *incomming (size_t i) const
   {
     return mincomming[i].value ();
   }
 
   llvm::BasicBlock *incomming_llvm (size_t i) const
   {
-    jit_block *inc = incomming (i);
-    return inc->branch_llvm (parent ());
+    return incomming (i)->to_llvm ();
   }
 
   virtual void construct_ssa (void) {}
 
   virtual bool infer (void);
 
   virtual std::ostream& print (std::ostream& os, size_t indent = 0) const
   {
@@ -1591,16 +1632,18 @@ public:
 
         if (i + 1 < argument_count ())
           os << std::endl;
       }
 
     return os;
   }
 
+  llvm::PHINode *to_llvm (void) const;
+
   JIT_VALUE_ACCEPT;
 private:
   std::vector<jit_phi_incomming> mincomming;
 };
 
 class
 jit_terminator : public jit_instruction
 {
@@ -1641,19 +1684,16 @@ public:
 
   llvm::BasicBlock *successor_llvm (size_t idx = 0) const
   {
     return mbranch_llvm[idx] ? mbranch_llvm[idx] : successor (idx)->to_llvm ();
   }
 
   size_t successor_index (const jit_block *asuccessor) const;
 
-  // create a merge block along the given edge
-  void create_merge (llvm::Function *function, jit_block *asuccessor);
-
   std::ostream& print_successor (std::ostream& os, size_t idx = 0) const
   {
     if (alive (idx))
       os << "[live] ";
     else
       os << "[dead] ";
 
     return successor (idx)->short_print (os);
@@ -1766,16 +1806,21 @@ public:
     return overload ().can_error;
   }
 
   const jit_function::overload& overload (void) const
   {
     return mfunction.get_overload (argument_types ());
   }
 
+  virtual bool needs_release (void) const
+  {
+    return type () && jit_typeinfo::get_release (type ()).function;
+  }
+
   virtual std::ostream& print (std::ostream& os, size_t indent = 0) const
   {
     print_indent (os, indent);
 
     if (use_count ())
       short_print (os) << " = ";
     os << "call " << mfunction.name () << " (";
 
@@ -2088,20 +2133,36 @@ public:
 
   template <typename ARG0, typename ARG1, typename ARG2>
   jit_call *create_checked (const ARG0& arg0, const ARG1& arg1,
                             const ARG2& arg2)
   {
     jit_call *ret = create<jit_call> (arg0, arg1, arg2);
     return create_checked_impl (ret);
   }
-private:
+
   typedef std::list<jit_block *> block_list;
   typedef block_list::iterator block_iterator;
 
+  void append (jit_block *ablock);
+
+  void insert_before (block_iterator iter, jit_block *ablock);
+
+  void insert_before (jit_block *loc, jit_block *ablock)
+  {
+    insert_before (loc->location (), ablock);
+  }
+
+  void insert_after (block_iterator iter, jit_block *ablock);
+
+  void insert_after (jit_block *loc, jit_block *ablock)
+  {
+    insert_after (loc->location (), ablock);
+  }
+private:
   std::vector<std::pair<std::string, bool> > arguments;
   type_bound_vector bounds;
 
   // used instead of return values from visit_* functions
   jit_value *result;
 
   jit_block *entry_block;
 
@@ -2119,29 +2180,23 @@ private:
 
   std::list<jit_value *> all_values;
 
   size_t iterator_count;
 
   typedef std::map<std::string, jit_variable *> vmap_t;
   vmap_t vmap;
 
-  void add_block (jit_block *ablock)
-  {
-    blocks.push_back (ablock);
-    ablock->stash_location (--blocks.end ());
-  }
-
   jit_call *create_checked_impl (jit_call *ret)
   {
     block->append (ret);
 
     jit_block *normal = create<jit_block> (block->name ());
     block->append (create<jit_error_check> (ret, normal, final_block));
-    add_block (normal);
+    append (normal);
     block = normal;
 
     return ret;
   }
 
   jit_variable *get_variable (const std::string& vname);
 
   jit_value *do_assign (const std::string& lhs, jit_value *rhs, bool print);
@@ -2180,16 +2235,20 @@ private:
   void construct_ssa (void);
 
   static void do_construct_ssa (jit_block& block);
 
   void remove_dead ();
 
   void place_releases (void);
 
+  void simplify_phi (void);
+
+  void simplify_phi (jit_phi& phi);
+
   void print_blocks (const std::string& header)
   {
     std::cout << "-------------------- " << header << " --------------------\n";
     for (std::list<jit_block *>::iterator iter = blocks.begin ();
          iter != blocks.end (); ++iter)
       {
         assert (*iter);
         (*iter)->print (std::cout, 0);
@@ -2210,23 +2269,35 @@ private:
   }
 
   bool breaking; // true if we are breaking OR continuing
   block_list breaks;
   block_list continues;
 
   void finish_breaks (jit_block *dest, const block_list& lst);
 
-  struct release_placer
+  typedef std::set<jit_instruction *> instr_set;
+
+  // compute per block information about temporaries
+  class
+  compute_temp
   {
-    release_placer (jit_convert& aconvert) : convert (aconvert) {}
-
-    jit_convert& convert;
+  public:
+    compute_temp (jit_convert& aconvert);
 
     void operator() (jit_block& block);
+
+    instr_set &temp_out (jit_block& b)
+    {
+      return mtemp_out[b.id ()];
+    }
+  private:
+    jit_convert& convert;
+    std::vector<instr_set> mtemp_out;
+    bool changed;
   };
 
   // this case is much simpler, just convert from the jit ir to llvm
   class
   convert_llvm : public jit_ir_walker
   {
   public:
     convert_llvm (jit_convert& jc) : jthis (jc) {}
@@ -2241,17 +2312,17 @@ private:
 
     JIT_VISIT_IR_CLASSES;
 
 #undef JIT_METH
   private:
     // name -> llvm argument
     std::map<std::string, llvm::Value *> arguments;
 
-    void finish_phi (jit_instruction *phi);
+    void finish_phi (jit_phi *phi);
 
     void visit (jit_value *jvalue)
     {
       return visit (*jvalue);
     }
 
     void visit (jit_value &jvalue)
     {
