# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1366139501 14400
#      Tue Apr 16 15:11:41 2013 -0400
# Node ID 6a8e63dadfadb5e9e95cf07db9317128868b31a6
# Parent  62d8aaf6ba8fa9c8299def12fe0c6a5cfb998116
provide octave_link::set_workspace function with default values

* octave-link.h, octave-link.cc (octave_link::set_workspace): Provide
version with default values for top_level and workspace.
* variables.cc (Fclear): Use it.
* input.cc (octave_base_reader::octave_gets, get_debug_input):
Use it.

diff --git a/libinterp/interpfcn/input.cc b/libinterp/interpfcn/input.cc
--- a/libinterp/interpfcn/input.cc
+++ b/libinterp/interpfcn/input.cc
@@ -214,19 +214,17 @@ octave_base_reader::octave_gets (bool& e
 
   if (interactive || forced_interactive)
     {
       if (! Vdebugging)
         octave_link::exit_debugger_event ();
 
       octave_link::pre_input_event ();
 
-      octave_link::set_workspace ((symbol_table::current_scope ()
-                                   == symbol_table::top_scope ()),
-                                  symbol_table::workspace_info ());
+      octave_link::set_workspace ();
 
       // FIXME -- this call should happen any time the terminal window
       // size changes, not just prior to prompting for input.
       command_editor::reset_screen_size ();
     }
 
   bool history_skip_auto_repeated_debugging_command = false;
 
@@ -523,19 +521,17 @@ get_debug_input (const std::string& prom
 
           if (curr_debug_line > 0)
             buf << " at line " << curr_debug_line;
 
           if (have_file)
             {
               octave_link::enter_debugger_event (nm, curr_debug_line);
 
-              octave_link::set_workspace ((symbol_table::current_scope ()
-                                           == symbol_table::top_scope ()),
-                                          symbol_table::workspace_info ());
+              octave_link::set_workspace ();
 
               frame.add_fcn (execute_in_debugger_handler,
                              std::pair<std::string, int> (nm, curr_debug_line));
 
               std::string line_buf
                 = get_file_line (nm, curr_debug_line);
 
               if (! line_buf.empty ())
diff --git a/libinterp/interpfcn/octave-link.cc b/libinterp/interpfcn/octave-link.cc
--- a/libinterp/interpfcn/octave-link.cc
+++ b/libinterp/interpfcn/octave-link.cc
@@ -50,16 +50,25 @@ octave_link *octave_link::instance = 0;
 
 octave_link::octave_link (void)
   : event_queue_mutex (new octave_mutex ()), gui_event_queue (),
     debugging (false), link_enabled (true)
 {
   command_editor::add_event_hook (octave_readline_hook);
 }
 
+void
+octave_link::set_workspace (void)
+{
+  if (enabled ())
+    instance->do_set_workspace ((symbol_table::current_scope ()
+                                 == symbol_table::top_scope ()),
+                                symbol_table::workspace_info ());
+}
+
 // OBJ should be an object of a class that is derived from the base
 // class octave_link, or 0 to disconnect the link.  It is the
 // responsibility of the caller to delete obj.
 
 void
 octave_link::connect_link (octave_link* obj)
 {
   if (obj && instance)
diff --git a/libinterp/interpfcn/octave-link.h b/libinterp/interpfcn/octave-link.h
--- a/libinterp/interpfcn/octave-link.h
+++ b/libinterp/interpfcn/octave-link.h
@@ -171,16 +171,18 @@ public:
   }
 
   static void change_directory (const std::string& dir)
   {
     if (enabled ())
       instance->do_change_directory (dir);
   }
 
+  static void set_workspace (void);
+
   static void set_workspace (bool top_level,
                              const std::list<workspace_element>& ws)
   {
     if (enabled ())
       instance->do_set_workspace (top_level, ws);
   }
 
   static void clear_workspace (void)
diff --git a/libinterp/interpfcn/variables.cc b/libinterp/interpfcn/variables.cc
--- a/libinterp/interpfcn/variables.cc
+++ b/libinterp/interpfcn/variables.cc
@@ -2452,19 +2452,17 @@ without the dash as well.\n\
                       octave_class::clear_exemplar_map ();
                     }
                   else
                     {
                       do_clear_symbols (argv, argc, idx, exclusive);
                     }
                 }
 
-              octave_link::set_workspace ((symbol_table::current_scope ()
-                                           == symbol_table::top_scope ()),
-                                          symbol_table::workspace_info ());
+              octave_link::set_workspace ();
             }
         }
     }
 
   return retval;
 }
 
 DEFUN (whos_line_format, args, nargout,
