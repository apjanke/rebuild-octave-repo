# HG changeset patch
# User jwe
# Date 764501158 0
#      Thu Mar 24 09:25:58 1994 +0000
# Node ID ee3da0884aaabd66f9950dc9ce871ec935665e8a
# Parent  27ef550be39e0fd9a9c3394b11882703c05d1146
[project @ 1994-03-24 09:23:18 by jwe]

diff --git a/src/symtab.cc b/src/symtab.cc
--- a/src/symtab.cc
+++ b/src/symtab.cc
@@ -622,16 +622,19 @@ symbol_record::chain (symbol_record *s)
   next_elem = s;
 }
 
 void
 symbol_record::push_context (void)
 {
   context.push (definition);
   definition = (symbol_def *) NULL;
+
+  global_link_context.push ((unsigned) linked_to_global);
+  linked_to_global = 0;
 }
 
 void
 symbol_record::pop_context (void)
 {
   assert (! context.empty ());
 
   if (is_variable ())
@@ -642,16 +645,17 @@ symbol_record::pop_context (void)
 
   if (is_function ())
     {
       symbol_def *old_def = pop_def ();
       maybe_delete (old_def);
     }
 
   definition = context.pop ();
+  linked_to_global = global_link_context.pop ();
 }
 
 int
 symbol_record::read_only_error (void)
 {
   if (is_read_only ())
     {
       char *tag = "symbol";
diff --git a/src/symtab.h b/src/symtab.h
--- a/src/symtab.h
+++ b/src/symtab.h
@@ -187,17 +187,21 @@ private:
 
   unsigned formal_param : 1;
   unsigned linked_to_global : 1;
 
   char *nm;
   sv_Function sv_fcn;
   symbol_def *definition;
   symbol_record *next_elem;
+
+// This should maybe be one stack with a structure containing all the
+// items we need to save for recursive calls...
   SLStack <symbol_def *> context;
+  SLStack <unsigned> global_link_context;
 
   void init_state (void);
 
   int read_only_error (void);
 
   void push_def (symbol_def *sd);
   symbol_def *pop_def (void);
 
diff --git a/src/tree.h.old b/src/tree.h.old
--- a/src/tree.h.old
+++ b/src/tree.h.old
@@ -558,16 +558,20 @@ tree_parameter_list : public tree
 
   void mark_as_formal_parameters (void);
 
   void mark_varargs (void);
   int takes_varargs (void) const;
 
   tree_identifier *define (tree_constant *t);
 
+  void define_from_arg_vector (const tree_constant *args, int nargin);
+
+  tree_constant *convert_to_const_vector (void);
+
   tree_parameter_list *next_elem (void);
 
   tree_constant eval (int print);
 
  private:
   int marked_for_varargs;
   tree_identifier *param;
   tree_parameter_list *next;
