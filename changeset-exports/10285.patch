# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1265716607 -3600
#      Tue Feb 09 12:56:47 2010 +0100
# Node ID 22a7913bbeb5a24ea2d3e4d2e5ff8f466bed7633
# Parent  c3df189b1b154ced10c22a7e343e4a5c76528da1
optimize return values of find and sort

diff --git a/liboctave/ChangeLog b/liboctave/ChangeLog
--- a/liboctave/ChangeLog
+++ b/liboctave/ChangeLog
@@ -1,8 +1,16 @@
+2010-02-09  Jaroslav Hajek  <highegg@gmail.com>
+
+	* idx-vector.cc (idx_vector::idx_vector_rep::idx_vector_rep (const
+	Array<octave_idx_type>&, octave_idx_type, direct)): New constructor.
+	* idx-vector.h: Declare it.
+	(idx_vector::idx_vector (const Array<octave_idx_type>&,
+	octave_idx_type)): New constructor.
+
 2010-02-08  John W. Eaton  <jwe@octave.org>
 
 	* oct-time.cc: Include "strftime.h", not <strftime.h>.
 	* file-ops.cc: Include "pathmax.h", not <pathmax.h>.
 
 2010-02-08  John W. Eaton  <jwe@octave.org>
 
 	* oct-env.cc (octave_env::prog_invocation_name): Rename from
diff --git a/liboctave/idx-vector.cc b/liboctave/idx-vector.cc
--- a/liboctave/idx-vector.cc
+++ b/liboctave/idx-vector.cc
@@ -325,16 +325,33 @@ idx_vector::idx_vector_rep::idx_vector_r
         }
 
       ext = max + 1;
 
       if (err) gripe_invalid_index ();
     }
 }
 
+idx_vector::idx_vector_rep::idx_vector_rep (const Array<octave_idx_type>& inda,
+                                            octave_idx_type _ext, direct)
+  : data (inda.data ()), len (inda.numel ()), ext (_ext), 
+  aowner (new Array<octave_idx_type> (inda)), orig_dims (inda.dims ())
+{
+  // No checking.
+  if (ext < 0)
+    {
+      octave_idx_type max = -1;
+      for (octave_idx_type i = 0; i < len; i++)
+        if (data[i] > max)
+          max = data[i];
+
+      ext = max + 1;
+    }
+}
+
 idx_vector::idx_vector_rep::idx_vector_rep (bool b)
   : data (0), len (b ? 1 : 0), ext (0), aowner (0), orig_dims (len, len)
 {
   if (len != 0)
     {
       octave_idx_type *d = new octave_idx_type [1];
       d[0] = 0;
       data = d;
diff --git a/liboctave/idx-vector.h b/liboctave/idx-vector.h
--- a/liboctave/idx-vector.h
+++ b/liboctave/idx-vector.h
@@ -282,16 +282,19 @@ private:
 
     idx_vector_rep (void) 
       : data (0), len (0), aowner (0)
       { }
 
     // Zero-based constructor.
     idx_vector_rep (const Array<octave_idx_type>& inda);
 
+    idx_vector_rep (const Array<octave_idx_type>& inda,
+                    octave_idx_type _ext, direct);
+
     template <class T>
     idx_vector_rep (const Array<T>&);
 
     idx_vector_rep (bool);
 
     idx_vector_rep (const Array<bool>&, octave_idx_type = -1);
 
     idx_vector_rep (const Sparse<bool>&);
@@ -468,16 +471,21 @@ public:
     {
       return idx_vector (new idx_range_rep (start, len, step, DIRECT));
     }
 
   idx_vector (const Array<octave_idx_type>& inda) 
     : rep (new idx_vector_rep (inda))
     { chkerr (); }
 
+  // Directly pass extent, no checking.
+  idx_vector (const Array<octave_idx_type>& inda, octave_idx_type ext) 
+    : rep (new idx_vector_rep (inda, ext, DIRECT))
+    { }
+
   // Colon is best constructed by simply copying (or referencing) this member.
   static const idx_vector colon;
 
   // or passing ':' here
   idx_vector (char c) : rep (new idx_colon_rep (c)) { chkerr (); }
 
   // Conversion constructors (used by interpreter).
 
diff --git a/src/ChangeLog b/src/ChangeLog
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,8 +1,14 @@
+2010-02-09  Jaroslav Hajek  <highegg@gmail.com>
+
+	* DLD-FUNCTIONS/find.cc (find_nonzero_elem_idx (const Array<T>&, ...)): 
+	Optimize creation of result indices.
+	* data.cc (Fsort): Ditto.
+
 2010-02-09  Jaroslav Hajek  <highegg@gmail.com>
 
 	* DLD-FUNCTIONS/colamd.cc (Fcolamd, Fsymamd, Fetree): Fix improper arg
 	checks.
 	* DLD-FUNCTIONS/ccolamd.cc (Fccolamd, Fcsymamd): Likewise.
 
 2010-02-08  Jaroslav Hajek  <highegg@gmail.com>
 
diff --git a/src/DLD-FUNCTIONS/find.cc b/src/DLD-FUNCTIONS/find.cc
--- a/src/DLD-FUNCTIONS/find.cc
+++ b/src/DLD-FUNCTIONS/find.cc
@@ -44,39 +44,43 @@ find_nonzero_elem_idx (const Array<T>& n
   octave_value_list retval ((nargout == 0 ? 1 : nargout), Matrix ());
 
   Array<octave_idx_type> idx;
   if (n_to_find >= 0)
     idx = nda.find (n_to_find, direction == -1);
   else
     idx = nda.find ();
 
+  // The maximum element is always at the end.
+  octave_idx_type iext = idx.is_empty () ? 0 : idx.xelem (idx.numel () - 1) + 1;
+
   switch (nargout)
     {
     default:
     case 3:
       retval(2) = Array<T> (nda.index (idx_vector (idx)));
       // Fall through!
 
     case 2:
       {
         Array<octave_idx_type> jdx (idx.dims ());
         octave_idx_type n = idx.length (), nr = nda.rows ();
         for (octave_idx_type i = 0; i < n; i++)
           {
             jdx.xelem (i) = idx.xelem (i) / nr;
             idx.xelem (i) %= nr;
           }
-        retval(1) = octave_value (jdx, true, true);
+        iext = -1;
+        retval(1) = idx_vector (jdx, -1);
       }
       // Fall through!
 
     case 1:
     case 0:
-      retval(0) = octave_value (idx, true, true);
+      retval(0) = idx_vector (idx, iext);
       break;
     }
 
   return retval;
 }
 
 #define INSTANTIATE_FIND_ARRAY(T) \
 template octave_value_list find_nonzero_elem_idx (const Array<T>&, int, \
diff --git a/src/data.cc b/src/data.cc
--- a/src/data.cc
+++ b/src/data.cc
@@ -5805,47 +5805,37 @@ ordered lists.\n\
 	smode = DESCENDING;
       else
 	{
 	  error ("sort: mode must be either \"ascend\" or \"descend\"");
 	  return retval;
 	}
     }
 
-  dim_vector dv = arg.dims ();
-  if (error_state)
-    {
-      gripe_wrong_type_arg ("sort", arg);
-      return retval;
-    }
+  const dim_vector dv = arg.dims ();
   if (nargin == 1 || args(1).is_string ())
     {
       // Find first non singleton dimension
-      for (int i = 0; i < dv.length (); i++)
-	if (dv(i) > 1)
-	  {
-	    dim = i;
-	    break;
-	  }
+      dim = dv.first_non_singleton ();
     }
   else
     {
       if (dim < 0 || dim > dv.length () - 1)
 	{
 	  error ("sort: dim must be a valid dimension");
 	  return retval;
 	}
     }
 
   if (return_idx)
     {
       Array<octave_idx_type> sidx;
 
       retval (0) = arg.sort (sidx, dim, smode);
-      retval (1) = octave_value (sidx, true, true);
+      retval (1) = idx_vector (sidx, dv(dim)); // No checking, the extent is known.
     }
   else
     retval(0) = arg.sort (dim, smode);
 
   return retval;
 }
 
 /*
