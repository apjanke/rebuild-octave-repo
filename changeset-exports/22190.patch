# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1469736431 14400
#      Thu Jul 28 16:07:11 2016 -0400
# Node ID e68128601f5e5328c25f8bc4f376b679e038cca8
# Parent  829e0aafebdc051e533a66fcf231d9690a4e258e
skip invalid objects in Qt graphics event handlers (bug #46501)

* Container.cc (Container::resizeEvent): Avoid accessing properties
from invalid graphics object.
* Panel.cc (Panel::eventFilter): Likewise.

* graphics.in.h (base_graphics_object:get_properties): Issue warning
instead of error.

diff --git a/libgui/graphics/Container.cc b/libgui/graphics/Container.cc
--- a/libgui/graphics/Container.cc
+++ b/libgui/graphics/Container.cc
@@ -84,21 +84,26 @@ Container::resizeEvent (QResizeEvent* /*
   foreach (QObject* qObj, children ())
     {
       if (qObj->isWidgetType ())
         {
           Object* obj = Object::fromQObject (qObj);
 
           if (obj)
             {
-              Matrix bb = obj->properties ().get_boundingbox (false);
+              graphics_object go = obj->object ();
 
-              obj->qWidget<QWidget> ()
-                ->setGeometry (octave::math::round (bb(0)), octave::math::round (bb(1)),
-                               octave::math::round (bb(2)), octave::math::round (bb(3)));
+              if (go.valid_object ())
+                {
+                  Matrix bb = go.get_properties ().get_boundingbox (false);
+
+                  obj->qWidget<QWidget> ()
+                    ->setGeometry (octave::math::round (bb(0)), octave::math::round (bb(1)),
+                                   octave::math::round (bb(2)), octave::math::round (bb(3)));
+                }
             }
         }
     }
 }
 
 void
 Container::childEvent (QChildEvent* xevent)
 {
diff --git a/libgui/graphics/Panel.cc b/libgui/graphics/Panel.cc
--- a/libgui/graphics/Panel.cc
+++ b/libgui/graphics/Panel.cc
@@ -186,17 +186,21 @@ Panel::eventFilter (QObject* watched, QE
             case QEvent::MouseButtonPress:
                 {
                   QMouseEvent* m = dynamic_cast<QMouseEvent*> (xevent);
 
                   if (m->button () == Qt::RightButton)
                     {
                       gh_manager::auto_lock lock;
 
-                      ContextMenu::executeAt (properties (), m->globalPos ());
+                      graphics_object go = object ();
+
+                      if (go.valid_object ())
+                        ContextMenu::executeAt (go.get_properties (),
+                                                m->globalPos ());
                     }
                 }
               break;
 
             default:
               break;
             }
         }
@@ -204,17 +208,20 @@ Panel::eventFilter (QObject* watched, QE
         {
           switch (xevent->type ())
             {
             case QEvent::Resize:
               if (qWidget<QWidget> ()->isVisible ())
                 {
                   gh_manager::auto_lock lock;
 
-                  properties ().update_boundingbox ();
+                  graphics_object go = object ();
+
+                  if (go.valid_object ())
+                    go.get_properties ().update_boundingbox ();
                 }
               break;
 
             default:
               break;
             }
         }
     }
diff --git a/libinterp/corefcn/graphics.in.h b/libinterp/corefcn/graphics.in.h
--- a/libinterp/corefcn/graphics.in.h
+++ b/libinterp/corefcn/graphics.in.h
@@ -2791,23 +2791,25 @@ public:
 
     std::string msg = (type () + "::defaults");
     err_not_implemented (msg.c_str ());
   }
 
   virtual base_properties& get_properties (void)
   {
     static base_properties properties;
-    error ("base_graphics_object::get_properties: invalid graphics object");
+    warning ("base_graphics_object::get_properties: invalid graphics object");
+    return properties;
   }
 
   virtual const base_properties& get_properties (void) const
   {
     static base_properties properties;
-    error ("base_graphics_object::get_properties: invalid graphics object");
+    warning ("base_graphics_object::get_properties: invalid graphics object");
+    return properties;
   }
 
   virtual void update_axis_limits (const std::string& axis_type);
 
   virtual void update_axis_limits (const std::string& axis_type,
                                    const graphics_handle& h);
 
   virtual bool valid_object (void) const { return false; }
