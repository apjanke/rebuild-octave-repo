# HG changeset patch
# User Michael Goffioul <michael.goffioul@gmail.com>
# Date 1393116977 18000
#      Sat Feb 22 19:56:17 2014 -0500
# Node ID 932aca9a7c57140511065ecc9afcd561c8a5109c
# Parent  e1b9c8277ada41625cd29393ce0ae4df63128968
Allow multi-level classdef package.

* lex.h (octave_base_lexer::fq_identifier_contains_keyword,
octave_base_lexer::handle_fq_identifier,
octave_base_lexer::enable_fq_identifier): New methods.

* lex.ll (octave_base_lexer::fq_identifier_contains_keyword,
octave_base_lexer::handle_fq_identifier,
octave_base_lexer::enable_fq_identifier): Likewise.
(FQ_IDENT_START, FQIDENT): New exclusive start condition and regex to
handle fully-qualified identifier.
(superclass reference rule, metaclass query rule): Use FQIDENT.
(octave_base_lexer::handle_superclass_identifier,
octave_base_lexer::handle_meta_identifier): Don't split package name.

* parse.h (octave_base_parser::make_superclass_ref,
octave_base_parser::make_meta_class_query): Remove package_nm argument.

* pt-classdef.h (tree_classdef_superclass::id,
tree_classdef_superclass::pkg): Removed members, replaced by cls_name.
(tree_classdef_superclass::~tree_classdef_superclass): Remove deletion
of removed members.
(tree_classdef_superclass::cls_name): New member.
(tree_classdef_superclass::tree_classdef_superclass): Initialize it.
(tree_classdef_superclass::ident, tree_classdef_superclass::package):
Removed methods.
(tree_classdef_superclass::class_name): New method.

* token.h (token::meta_name_token): Remove enum value.
(token(int, std::string, std::string, std::string, int, int)): Remove
constructor.
(token::superclass_package_name, token::meta_package_name,
token::meta_class_name): Remove methods.
(token::sc::package_nm, token::mc): Remove union members.

* token.cc
(token(int, std::string, std::string, std::string, int, int)): Remove
constructor.
(token::~token): Remove case of meta_name_token.
(token::superclass_package_name, token::meta_package_name,
token::meta_class_name): Remove methods.

* oct-parse.in.yy (FQ_IDENT): New terminal.
(superclass_identifier): Adapt to changes in class token and class
octave_base_parser.
(meta_identifier): Likewise.
(superclass_list): Add mid-rule to enable fully-qualified identifier.
(superclass): Use FQ_IDENT.
(octave_base_parser::make_superclass_ref,
octave_base_parser::make_meta_class_query): Remove package_nm argument.

* ov-classdef.cc (octave_classdef_superclass_ref::do_multi_index_op):
Adapt to removal of package_nm argument.
(F__meta_class_query__): Likewise.
(cdef_class::make_meta_class): Adapt to changes in class
tree_classdef_superclass.

diff --git a/libinterp/octave-value/ov-classdef.cc b/libinterp/octave-value/ov-classdef.cc
--- a/libinterp/octave-value/ov-classdef.cc
+++ b/libinterp/octave-value/ov-classdef.cc
@@ -1216,22 +1216,19 @@ public:
       bool in_constructor;
       cdef_class ctx;
 
       ctx = get_class_context (meth_name, in_constructor);
 
       if (! error_state && ctx.ok ())
         {
           std::string mname = args(0).string_value ();
-          std::string pname = args(1).string_value ();
-          std::string cname = args(2).string_value ();
-
-          std::string cls_name = (pname.empty () ?
-                                  cname : pname + "." + cname);
-          cdef_class cls = lookup_class (cls_name);
+          std::string cname = args(1).string_value ();
+
+          cdef_class cls = lookup_class (cname);
 
           if (! error_state)
             {
               if (in_constructor)
                 {
                   if (is_direct_superclass (cls, ctx))
                     {
                       if (is_constructed_object (mname))
@@ -1243,17 +1240,17 @@ public:
                           retval(0) = sym;
                         }
                       else
                         ::error ("cannot call superclass constructor with "
                                  "variable `%s'", mname.c_str ());
                     }
                   else
                     ::error ("`%s' is not a direct superclass of `%s'",
-                             cls_name.c_str (), ctx.get_name ().c_str ());
+                             cname.c_str (), ctx.get_name ().c_str ());
                 }
               else
                 {
                   if (mname == meth_name)
                     {
                       if (is_strict_superclass (cls, ctx))
                         {
                           // I see 2 possible implementations here:
@@ -1269,21 +1266,21 @@ public:
 
                           cdef_method meth = cls.find_method (meth_name, false);
 
                           if (meth.ok ())
                             retval = meth.execute (idx, nargout, true,
                                                    meth_name);
                           else
                             ::error ("no method `%s' found in superclass `%s'",
-                                     meth_name.c_str (), cls_name.c_str ());
+                                     meth_name.c_str (), cname.c_str ());
                         }
                       else
                         ::error ("`%s' is not a superclass of `%s'",
-                                 cls_name.c_str (), ctx.get_name ().c_str ());
+                                 cname.c_str (), ctx.get_name ().c_str ());
                     }
                   else
                     ::error ("method name mismatch (`%s' != `%s')",
                              mname.c_str (), meth_name.c_str ());
                 }
             }
         }
       else if (! error_state)
@@ -1964,24 +1961,19 @@ public:
           if (of)
             {
               if (of->name () == "__superclass_reference__")
                 {
                   octave_value_list args = t.arguments ();
 
                   if (args(0).string_value () == obj_name)
                     {
-                      std::string package_name = args(1).string_value ();
-                      std::string class_name = args(2).string_value ();
-
-                      std::string ctor_name = (package_name.empty ()
-                                               ? class_name
-                                               : package_name + "." + class_name);
-
-                      cdef_class cls = lookup_class (ctor_name, false);
+                      std::string class_name = args(1).string_value ();
+
+                      cdef_class cls = lookup_class (class_name, false);
 
                       if (cls.ok ())
                         ctor_list.push_back (cls);
                     }
                 }
             }
         }
     }
@@ -2697,19 +2689,17 @@ cdef_class::make_meta_class (tree_classd
 
   std::list<cdef_class> slist;
 
   if (t->superclass_list ())
     {
       for (tree_classdef_superclass_list::iterator it = t->superclass_list ()->begin ();
            ! error_state && it != t->superclass_list ()->end (); ++it)
         {
-          std::string sclass_name =
-            ((*it)->package () ? (*it)->package ()->name () + "." : std::string ())
-            + (*it)->ident ()->name ();
+          std::string sclass_name = (*it)->class_name ();
 
           gnulib::printf ("superclass: %s\n", sclass_name.c_str ());
 
           cdef_class sclass = lookup_class (sclass_name);
 
           if (! error_state)
             {
               if (! sclass.get ("Sealed").bool_value ())
@@ -3867,27 +3857,22 @@ DEFUN (__meta_class_query__, args, /* na
   "-*- texinfo -*-\n\
 @deftypefn {Built-in Function} {} __meta_class_query__ ()\n\
 Undocumented internal function.\n\
 @end deftypefn")
 {
   octave_value retval;
 
   std::cerr << "__meta_class_query__ ("
-            << args(0).string_value () << ", "
-            << args(1).string_value () << ")"
+            << args(0).string_value () << ")"
             << std::endl;
 
-  if (args.length () == 2)
+  if (args.length () == 1)
     {
-      std::string pkg = args(0).string_value ();
-      std::string cls = args(1).string_value ();
-
-      if (! pkg.empty ())
-        cls = pkg + "." + cls;
+      std::string cls = args(0).string_value ();
 
       if (! error_state)
 	retval = to_ov (lookup_class (cls));
       else
 	error ("invalid class name, expected a string value");
     }
   else
     print_usage ();
diff --git a/libinterp/parse-tree/lex.h b/libinterp/parse-tree/lex.h
--- a/libinterp/parse-tree/lex.h
+++ b/libinterp/parse-tree/lex.h
@@ -575,16 +575,18 @@ public:
   bool looking_at_space (void);
 
   bool inside_any_object_index (void);
 
   bool is_variable (const std::string& name);
 
   int is_keyword_token (const std::string& s);
 
+  bool fq_identifier_contains_keyword (const std::string& s);
+
   bool whitespace_is_significant (void);
 
   void handle_number (void);
 
   void handle_continuation (void);
 
   void finish_comment (octave_comment_elt::comment_type typ);
 
@@ -593,16 +595,18 @@ public:
   int handle_close_bracket (int bracket_type);
 
   bool looks_like_command_arg (void);
 
   int handle_superclass_identifier (void);
 
   int handle_meta_identifier (void);
 
+  int handle_fq_identifier (void);
+
   int handle_identifier (void);
 
   void maybe_warn_separator_insert (char sep);
 
   void gripe_single_quote_string (void);
 
   void gripe_matlab_incompatible (const std::string& msg);
 
@@ -678,16 +682,18 @@ public:
   int handle_token (int tok, token *tok_val = 0);
 
   int count_token (int tok);
 
   int count_token_internal (int tok);
 
   int show_token (int tok);
 
+  void enable_fq_identifier (void);
+
 protected:
 
   std::stack<int> start_state_stack;
 
   // No copying!
 
   octave_base_lexer (const octave_base_lexer&);
 
diff --git a/libinterp/parse-tree/lex.ll b/libinterp/parse-tree/lex.ll
--- a/libinterp/parse-tree/lex.ll
+++ b/libinterp/parse-tree/lex.ll
@@ -49,16 +49,18 @@ object) relevant global values before an
 %x INPUT_FILE_START
 
 %x BLOCK_COMMENT_START
 %x LINE_COMMENT_START
 
 %x DQ_STRING_START
 %x SQ_STRING_START
 
+%x FQ_IDENT_START
+
 %{
 
 #include <cctype>
 #include <cstring>
 
 #include <iostream>
 #include <set>
 #include <sstream>
@@ -306,16 +308,17 @@ static std::string strip_trailing_whites
 %}
 
 D       [0-9]
 S       [ \t]
 NL      ((\n)|(\r)|(\r\n))
 Im      [iIjJ]
 CCHAR   [#%]
 IDENT   ([_$a-zA-Z][_$a-zA-Z0-9]*)
+FQIDENT ({IDENT}(\.{IDENT})*)
 EXPON   ([DdEe][+-]?{D}+)
 NUMBER  (({D}+\.?{D}*{EXPON}?)|(\.{D}+{EXPON}?)|(0[xX][0-9a-fA-F]+))
 
 ANY_EXCEPT_NL [^\r\n]
 ANY_INCLUDING_NL (.|{NL})
 
 %%
 
@@ -1026,16 +1029,45 @@ ANY_INCLUDING_NL (.|{NL})
     curr_lexer->current_input_column = 1;
 
     error ("unterminated character string constant");
 
     return LEXICAL_ERROR;
   }
 
 %{
+// Fully-qualified identifiers (used for classdef).
+%}
+
+<FQ_IDENT_START>{FQIDENT} {
+    curr_lexer->lexer_debug ("<FQ_IDENT_START>{FQIDENT}");
+    curr_lexer->pop_start_state ();
+
+    int id_tok = curr_lexer->handle_fq_identifier ();
+
+    if (id_tok >= 0)
+      {
+        curr_lexer->looking_for_object_index = true;
+
+        return curr_lexer->count_token_internal (id_tok);
+      }
+  }
+
+<FQ_IDENT_START>{S}+ {
+    curr_lexer->current_input_column += yyleng;
+
+    curr_lexer->mark_previous_token_trailing_space ();
+  }
+
+<FQ_IDENT_START>. {
+    yyless (0);
+    curr_lexer->pop_start_state ();
+  }
+
+%{
 // Imaginary numbers.
 %}
 
 {NUMBER}{Im} {
     curr_lexer->lexer_debug ("{NUMBER}{Im}");
 
     if (curr_lexer->previous_token_may_be_command ()
         &&  curr_lexer->space_follows_previous_token ())
@@ -1163,19 +1195,18 @@ ANY_INCLUDING_NL (.|{NL})
 {IDENT} {
     HANDLE_IDENTIFIER ("{IDENT}", false);
   }
 
 %{
 // Superclass method identifiers.
 %}
 
-{IDENT}@{IDENT} |
-{IDENT}@{IDENT}\.{IDENT} {
-    curr_lexer->lexer_debug ("{IDENT}@{IDENT}|{IDENT}@{IDENT}\\.{IDENT}");
+{IDENT}@{FQIDENT} {
+    curr_lexer->lexer_debug ("{IDENT}@{FQIDENT}");
 
     if (curr_lexer->previous_token_may_be_command ())
       {
         yyless (0);
         curr_lexer->push_start_state (COMMAND_START);
       }
     else
       {
@@ -1189,19 +1220,18 @@ ANY_INCLUDING_NL (.|{NL})
           }
       }
   }
 
 %{
 // Metaclass query
 %}
 
-\?{IDENT} |
-\?{IDENT}\.{IDENT} {
-    curr_lexer->lexer_debug ("\\?{IDENT}|\\?{IDENT}\\.{IDENT}");
+\?{FQIDENT} {
+    curr_lexer->lexer_debug ("\\?{FQIDENT}");
 
     if (curr_lexer->previous_token_may_be_command ()
         &&  curr_lexer->space_follows_previous_token ())
       {
         yyless (0);
         curr_lexer->push_start_state (COMMAND_START);
       }
     else
@@ -2555,16 +2585,44 @@ octave_base_lexer::is_keyword_token (con
 
       return kw->tok;
     }
 
   return 0;
 }
 
 bool
+octave_base_lexer::fq_identifier_contains_keyword (const std::string& s)
+{
+  size_t p1 = 0;
+  size_t p2;
+
+  std::string s_part;
+
+  do
+    {
+      p2 = s.find ('.', p1);
+
+      if (p2 != std::string::npos)
+        {
+          s_part = s.substr (p1, p2 - p1);
+          p1 = p2 + 1;
+        }
+      else
+        s_part = s.substr (p1);
+
+      if (is_keyword_token (s_part))
+        return true;
+    }
+  while (p2 != std::string::npos);
+
+  return false;
+}
+
+bool
 octave_base_lexer::whitespace_is_significant (void)
 {
   return (nesting_level.is_bracket ()
           || (nesting_level.is_brace ()
               && ! looking_at_object_index.front ()));
 }
 
 static inline bool
@@ -2732,68 +2790,71 @@ int
 octave_base_lexer::handle_superclass_identifier (void)
 {
   std::string meth = flex_yytext ();
 
   size_t pos = meth.find ("@");
   std::string cls = meth.substr (pos + 1);
   meth = meth.substr (0, pos);
 
-  std::string pkg;
-  pos = cls.find (".");
-  if (pos != std::string::npos)
-    {
-      pkg = cls.substr (0, pos);
-      cls = cls.substr (pos + 1);
-    }
-
-  int kw_token = (is_keyword_token (meth) || is_keyword_token (cls)
-                  || is_keyword_token (pkg));
+  bool kw_token = (is_keyword_token (meth)
+                   || fq_identifier_contains_keyword (cls));
+
   if (kw_token)
     {
       error ("method, class, and package names may not be keywords");
       return LEXICAL_ERROR;
     }
 
-  push_token (new token (SUPERCLASSREF, meth, pkg, cls,
+  push_token (new token (SUPERCLASSREF, meth, cls,
                          input_line_number, current_input_column));
 
   current_input_column += flex_yyleng ();
 
   return SUPERCLASSREF;
 }
 
 int
 octave_base_lexer::handle_meta_identifier (void)
 {
   std::string cls = std::string(flex_yytext ()).substr (1);
 
-  std::string pkg;
-  size_t pos = cls.find (".");
-  if (pos != std::string::npos)
-    {
-      pkg = cls.substr (0, pos);
-      cls = cls.substr (pos + 1);
-    }
-
-  int kw_token = is_keyword_token (cls) || is_keyword_token (pkg);
-  if (kw_token)
+  if (fq_identifier_contains_keyword (cls))
     {
       error ("class and package names may not be keywords");
       return LEXICAL_ERROR;
     }
 
-  push_token (new token (METAQUERY, pkg, cls, input_line_number,
+  push_token (new token (METAQUERY, cls, input_line_number,
                          current_input_column));
 
   current_input_column += flex_yyleng ();
 
   return METAQUERY;
 }
 
+int
+octave_base_lexer::handle_fq_identifier (void)
+{
+  std::string tok = flex_yytext ();
+
+  if (fq_identifier_contains_keyword (tok))
+    {
+      error ("function, method, class, and package names may not be keywords");
+      return LEXICAL_ERROR;
+    }
+
+  push_token (new token (FQ_IDENT, tok, input_line_number,
+                         current_input_column));
+
+  current_input_column += flex_yyleng ();
+
+  return FQ_IDENT;
+}
+
 // Figure out exactly what kind of token to return when we have seen
 // an identifier.  Handles keywords.  Return -1 if the identifier
 // should be ignored.
 
 int
 octave_base_lexer::handle_identifier (void)
 {
   char *yytxt = flex_yytext ();
@@ -3341,16 +3402,22 @@ octave_base_lexer::show_token (int tok)
       std::cerr << "R: ";
       display_token (tok);
       std::cerr << std::endl; 
     }
 
   return tok;
 }
 
+void
+octave_base_lexer::enable_fq_identifier (void)
+{
+  push_start_state (FQ_IDENT_START);
+}
+
 int
 octave_lexer::fill_flex_buffer (char *buf, unsigned max_size)
 {
   int status = 0;
 
   if (input_buf.empty ())
     {
       bool eof = false;
diff --git a/libinterp/parse-tree/oct-parse.in.yy b/libinterp/parse-tree/oct-parse.in.yy
--- a/libinterp/parse-tree/oct-parse.in.yy
+++ b/libinterp/parse-tree/oct-parse.in.yy
@@ -230,16 +230,17 @@ static void yyerror (octave_base_parser&
 %token <tok_val> UNWIND CLEANUP
 %token <tok_val> TRY CATCH
 %token <tok_val> GLOBAL PERSISTENT
 %token <tok_val> FCN_HANDLE
 %token <tok_val> CLASSDEF
 %token <tok_val> PROPERTIES METHODS EVENTS ENUMERATION
 %token <tok_val> METAQUERY
 %token <tok_val> SUPERCLASSREF
+%token <tok_val> FQ_IDENT
 %token <tok_val> GET SET
 %token <tok_val> FCN
 
 // Other tokens.
 %token END_OF_INPUT LEXICAL_ERROR
 %token INPUT_FILE
 // %token VARARGIN VARARGOUT
 
@@ -480,33 +481,30 @@ identifier      : NAME
                     $$ = new tree_identifier (*sr, $1->line (), $1->column ());
                   }
                 ;
 
 superclass_identifier
                 : SUPERCLASSREF
                   {
                     std::string method_nm = $1->superclass_method_name ();
-                    std::string package_nm = $1->superclass_package_name ();
                     std::string class_nm = $1->superclass_class_name ();
 
                     $$ = parser.make_superclass_ref
-                                       (method_nm, package_nm, class_nm,
+                                       (method_nm, class_nm,
                                         $1->line (), $1->column ());
                   }
                 ;
 
 meta_identifier : METAQUERY
                   {
-                    std::string package_nm = $1->meta_package_name ();
-                    std::string class_nm = $1->meta_class_name ();
-
-                    $$ = parser.make_meta_class_query
-                                       (package_nm, class_nm,
-                                        $1->line (), $1->column ());
+                    std::string class_nm = $1->text ();
+
+                    $$ = parser.make_meta_class_query (class_nm, $1->line (),
+                                                       $1->column ());
                   }
                 ;
 
 string          : DQ_STRING
                   { $$ = parser.make_constant (DQ_STRING, $1); }
                 | SQ_STRING
                   { $$ = parser.make_constant (SQ_STRING, $1); }
                 ;
@@ -1548,29 +1546,31 @@ attr            : identifier
 
 opt_superclass_list
                 : // empty
                   { $$ = 0; }
                 | superclass_list
                   { $$ = $1; }
                 ;
 
-superclass_list : EXPR_LT superclass
-                  { $$ = new tree_classdef_superclass_list ($2); }
-                | superclass_list EXPR_AND superclass
+superclass_list : EXPR_LT
+                  { lexer.enable_fq_identifier (); }
+                  superclass
+                  { $$ = new tree_classdef_superclass_list ($3); }
+                | superclass_list EXPR_AND
+                  { lexer.enable_fq_identifier (); }
+                  superclass
                   {
-                    $1->append ($3);
+                    $1->append ($4);
                     $$ = $1;
                   }
                 ;
 
-superclass      : identifier
-                  { $$ = new tree_classdef_superclass ($1); }
-                | identifier '.' identifier
-                  { $$ = new tree_classdef_superclass ($3, $1); }
+superclass      : FQ_IDENT
+                  { $$ = new tree_classdef_superclass ($1->text ()); }
                 ;
 
 class_body      : properties_block
                   { $$ = new tree_classdef_body ($1); }
                 | methods_block
                   { $$ = new tree_classdef_body ($1); }
                 | events_block
                   { $$ = new tree_classdef_body ($1); }
@@ -3110,41 +3110,37 @@ octave_base_parser::recover_from_parsing
   lexer.defining_func--;
   lexer.parsed_function_name.pop ();
   lexer.looking_at_return_list = false;
   lexer.looking_at_parameter_list = false;
 }
 
 tree_funcall *
 octave_base_parser::make_superclass_ref (const std::string& method_nm,
-                                         const std::string& package_nm,
                                          const std::string& class_nm,
                                          int l, int c)
 {
   octave_value_list args;
 
-  args(2) = class_nm;
-  args(1) = package_nm;
+  args(1) = class_nm;
   args(0) = method_nm;
 
   octave_value fcn
     = symbol_table::find_built_in_function ("__superclass_reference__");
 
   return new tree_funcall (fcn, args);
 }
 
 tree_funcall *
-octave_base_parser::make_meta_class_query (const std::string& package_nm,
-                                           const std::string& class_nm,
+octave_base_parser::make_meta_class_query (const std::string& class_nm,
                                            int l, int c)
 {
   octave_value_list args;
 
-  args(1) = class_nm;
-  args(0) = package_nm;
+  args(0) = class_nm;
 
   octave_value fcn
     = symbol_table::find_built_in_function ("__meta_class_query__");
 
   return new tree_funcall (fcn, args);
 }
 
 // A CLASSDEF block defines a class that has a constructor and other
diff --git a/libinterp/parse-tree/parse.h b/libinterp/parse-tree/parse.h
--- a/libinterp/parse-tree/parse.h
+++ b/libinterp/parse-tree/parse.h
@@ -295,23 +295,21 @@ public:
                    int l, int c);
 
   // Reset state after parsing function.
   void
   recover_from_parsing_function (void);
 
   tree_funcall *
   make_superclass_ref (const std::string& method_nm,
-                       const std::string& package_nm,
                        const std::string& class_nm,
                        int l, int c);
 
   tree_funcall *
-  make_meta_class_query (const std::string& package_nm,
-                         const std::string& class_nm,
+  make_meta_class_query (const std::string& class_nm,
                          int l, int c);
 
   tree_classdef *
   make_classdef (token *tok_val, tree_classdef_attribute_list *a,
                  tree_identifier *id, tree_classdef_superclass_list *sc,
                  tree_classdef_body *body, token *end_tok,
                  octave_comment_list *lc);
 
diff --git a/libinterp/parse-tree/pt-classdef.h b/libinterp/parse-tree/pt-classdef.h
--- a/libinterp/parse-tree/pt-classdef.h
+++ b/libinterp/parse-tree/pt-classdef.h
@@ -95,35 +95,28 @@ private:
 
   tree_classdef_attribute_list& operator = (const tree_classdef_attribute_list&);
 };
 
 class tree_classdef_superclass
 {
 public:
 
-  tree_classdef_superclass (tree_identifier *i = 0, tree_identifier *p = 0)
-    : id (i), pkg (p) { }
+  tree_classdef_superclass (const std::string& cname)
+    : cls_name (cname) { }
 
-  ~tree_classdef_superclass (void)
-  {
-    delete id;
-    delete pkg;
-  }
+  ~tree_classdef_superclass (void) { }
 
-  tree_identifier *ident (void) { return id; }
-
-  tree_identifier * package (void) { return pkg; }
+  std::string class_name (void) { return cls_name; }
 
   void accept (tree_walker&);
 
 private:
 
-  tree_identifier *id;
-  tree_identifier *pkg;
+  std::string cls_name;
 
   // No copying!
 
   tree_classdef_superclass (const tree_classdef_superclass&);
 
   tree_classdef_superclass& operator = (const tree_classdef_superclass&);
 };
 
diff --git a/libinterp/parse-tree/token.cc b/libinterp/parse-tree/token.cc
--- a/libinterp/parse-tree/token.cc
+++ b/libinterp/parse-tree/token.cc
@@ -92,60 +92,39 @@ token::token (int tv, symbol_table::symb
   tspc = false;
   line_num = l;
   column_num = c;
   tok_val = tv;
   type_tag = sym_rec_token;
   sr = s;
 }
 
-token::token (int tv, const std::string& pkg, const std::string& cls,
+token::token (int tv, const std::string& mth, const std::string& cls,
               int l, int c)
 {
   maybe_cmd = false;
   tspc = false;
   line_num = l;
   column_num = c;
   tok_val = tv;
-  type_tag = meta_name_token;
-  mc.package_nm = new std::string (pkg);
-  mc.class_nm = new std::string (cls);
-}
-
-token::token (int tv, const std::string& mth, const std::string& pkg,
-              const std::string& cls, int l, int c)
-{
-  maybe_cmd = false;
-  tspc = false;
-  line_num = l;
-  column_num = c;
-  tok_val = tv;
   type_tag = scls_name_token;
   sc.method_nm = new std::string (mth);
-  sc.package_nm = new std::string (pkg);
   sc.class_nm = new std::string (cls);
 }
 
 token::~token (void)
 {
   if (type_tag == string_token)
     delete str;
 
   if (type_tag == scls_name_token)
     {
       delete sc.method_nm;
-      delete sc.package_nm;
       delete sc.class_nm;
     }
-
-  if (type_tag == meta_name_token)
-    {
-      delete mc.package_nm;
-      delete mc.class_nm;
-    }
 }
 
 std::string
 token::text (void) const
 {
   assert (type_tag == string_token);
   return *str;
 }
@@ -187,40 +166,19 @@ token::sym_rec (void)
 std::string
 token::superclass_method_name (void)
 {
   assert (type_tag == scls_name_token);
   return *sc.method_nm;
 }
 
 std::string
-token::superclass_package_name (void)
-{
-  assert (type_tag == scls_name_token);
-  return *sc.package_nm;
-}
-
-std::string
 token::superclass_class_name (void)
 {
   assert (type_tag == scls_name_token);
   return *sc.class_nm;
 }
 
 std::string
-token::meta_package_name (void)
-{
-  assert (type_tag == meta_name_token);
-  return *mc.package_nm;
-}
-
-std::string
-token::meta_class_name (void)
-{
-  assert (type_tag == meta_name_token);
-  return *mc.class_nm;
-}
-
-std::string
 token::text_rep (void)
 {
   return orig_text;
 }
diff --git a/libinterp/parse-tree/token.h b/libinterp/parse-tree/token.h
--- a/libinterp/parse-tree/token.h
+++ b/libinterp/parse-tree/token.h
@@ -36,17 +36,16 @@ public:
   {
     generic_token,
     keyword_token,
     string_token,
     double_token,
     ettype_token,
     sym_rec_token,
     scls_name_token,
-    meta_name_token
   };
 
   enum end_tok_type
   {
     simple_end,
     classdef_end,
     enumeration_end,
     events_end,
@@ -64,20 +63,18 @@ public:
 
   token (int tv, int l = -1, int c = -1);
   token (int tv, bool is_keyword, int l = -1, int c = -1);
   token (int tv, const std::string& s, int l = -1, int c = -1);
   token (int tv, double d, const std::string& s = std::string (),
          int l = -1, int c = -1);
   token (int tv, end_tok_type t, int l = -1, int c = -1);
   token (int tv, symbol_table::symbol_record *s, int l = -1, int c = -1);
-  token (int tv, const std::string& pkg, const std::string& cls,
+  token (int tv, const std::string& mth, const std::string& cls,
          int l = -1, int c = -1);
-  token (int tv, const std::string& mth, const std::string& pkg,
-         const std::string& cls, int l = -1, int c = -1);
 
   ~token (void);
 
   void mark_may_be_command (void) { maybe_cmd = true; }
   bool may_be_command (void) const { return maybe_cmd; }
 
   void mark_trailing_space (void) { tspc = true; }
   bool space_follows_token (void) const { return tspc; }
@@ -101,22 +98,18 @@ public:
   std::string text (void) const;
   std::string symbol_name (void) const;
   double number (void) const;
   token_type ttype (void) const;
   end_tok_type ettype (void) const;
   symbol_table::symbol_record *sym_rec (void);
 
   std::string superclass_method_name (void);
-  std::string superclass_package_name (void);
   std::string superclass_class_name (void);
 
-  std::string meta_package_name (void);
-  std::string meta_class_name (void);
-
   std::string text_rep (void);
 
 private:
 
   // No copying!
 
   token (const token& tok);
 
@@ -132,21 +125,15 @@ private:
   {
     std::string *str;
     double num;
     end_tok_type et;
     symbol_table::symbol_record *sr;
     struct
     {
       std::string *method_nm;
-      std::string *package_nm;
       std::string *class_nm;
     } sc;
-    struct
-    {
-      std::string *package_nm;
-      std::string *class_nm;
-    } mc;
   };
   std::string orig_text;
 };
 
 #endif
