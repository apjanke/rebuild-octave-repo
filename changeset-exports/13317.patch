# HG changeset patch
# User John W. Eaton <jwe@octave.org>
# Date 1318344804 14400
#      Tue Oct 11 10:53:24 2011 -0400
# Node ID d2b799e3178a571b2bbe55ef488eb663b6960497
# Parent  959944e9d9273a69bb6564bbcb77b3d3e2721ceb
allow warnings about missing glyphs to be disabled

* txt-eng-ft.cc (gripe_missing_glyph, gripe_glyph_render):
New functions.
(ft_render::visit): Use them.

diff --git a/src/txt-eng-ft.cc b/src/txt-eng-ft.cc
--- a/src/txt-eng-ft.cc
+++ b/src/txt-eng-ft.cc
@@ -31,16 +31,35 @@ along with Octave; see the file COPYING.
 #endif
 
 #include <iostream>
 
 #include "error.h"
 #include "pr-output.h"
 #include "txt-eng-ft.h"
 
+// FIXME -- maybe issue at most one warning per glyph/font/size/weight
+// combination.
+
+static void
+gripe_missing_glyph (char c)
+{
+  warning_with_id ("Octave:missing-glyph",
+                   "ft_render: skipping missing glyph for character `%c'",
+                   c);
+}
+
+static void
+gripe_glyph_render (char c)
+{
+  warning_with_id ("Octave:glyph-render",
+                   "ft_render: unable to render glyph for character `%c'",
+                   c);
+}
+
 class
 ft_manager
 {
 public:
   static bool instance_ok (void)
     {
       bool retval = true;
 
@@ -283,40 +302,40 @@ ft_render::visit (text_element_string& e
 
       for (size_t i = 0; i < str.length (); i++)
         {
           glyph_index = FT_Get_Char_Index (face, str[i]);
 
           if (str[i] != '\n'
               && (! glyph_index
               || FT_Load_Glyph (face, glyph_index, FT_LOAD_DEFAULT)))
-            ::warning ("ft_render: skipping missing glyph for character `%c'",
-                       str[i]);
+            gripe_missing_glyph (str[i]);
           else
             {
               switch (mode)
                 {
                 case MODE_RENDER:
                   if (str[i] == '\n')
                     {
                     glyph_index = FT_Get_Char_Index(face, ' ');
                     if (!glyph_index || FT_Load_Glyph (face, glyph_index, FT_LOAD_DEFAULT))
                       {
-                        ::warning ("ft_render: skipping missing glyph for character ` '");
+                        gripe_missing_glyph (' ');
                       }
                     else
                       {
                         line_index++;
                         xoffset = multiline_align_xoffsets[line_index];
                         yoffset -= (face->size->metrics.height >> 6);
                       }
-                  }
+                    }
                   else if (FT_Render_Glyph (face->glyph, FT_RENDER_MODE_NORMAL))
-                    ::warning ("ft_render: unable to render glyph for character `%c'",
-                               str[i]);
+                    {
+                      gripe_glyph_render (str[i]);
+                    }
                   else
                     {
                       FT_Bitmap& bitmap = face->glyph->bitmap;
                       int x0, y0;
 
                       if (previous)
                         {
                           FT_Vector delta;
@@ -359,17 +378,17 @@ ft_render::visit (text_element_string& e
 
                 case MODE_BBOX:
                   if (str[i] == '\n')
                     {
                       glyph_index = FT_Get_Char_Index(face, ' ');
                       if (! glyph_index
                           || FT_Load_Glyph (face, glyph_index, FT_LOAD_DEFAULT))
                       {
-                        ::warning ("ft_render: skipping missing glyph for character ` '");
+                        gripe_missing_glyph (' ');
                       }
                     else
                       {
                         multiline_align_xoffsets.push_back(box_line_width);
                         // Reset the pixel width for this newline, so we don't
                         // allocate a bounding box larger than the horizontal
                         // width of the multi-line
                         box_line_width = 0;
