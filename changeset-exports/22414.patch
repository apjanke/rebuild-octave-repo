# HG changeset patch
# User Joakim And√©n <janden@math.princeton.edu>
# Date 1471875228 14400
#      Mon Aug 22 10:13:48 2016 -0400
# Node ID 5a3f581a314fdfceb31d5b748186eed867f81a99
# Parent  8758addcf2652e2542366e7f3fc216402475a2db
union.m: output proper indices for 'rows' inputs (bug #48857).


* union.m: Number of elements is numel (a) for ordinary cases, but rows (a)
when "rows" argument is given.  Add BIST tests.

diff --git a/scripts/set/union.m b/scripts/set/union.m
--- a/scripts/set/union.m
+++ b/scripts/set/union.m
@@ -62,43 +62,53 @@ function [y, ia, ib] = union (a, b, vara
       y = y.';
     endif
   endif
 
   if (nargout <= 1)
     y = unique (y, varargin{:});
   else
     [y, idx] = unique (y, varargin{:});
-    na = numel (a);
+    if (by_rows)
+      na = rows (a);
+    else
+      na = numel (a);
+    end
     ia = idx(idx <= na);
     ib = idx(idx > na) - na;
   endif
 
 endfunction
 
 
 %!assert (union ([1, 2, 4], [2, 3, 5]), [1, 2, 3, 4, 5])
 %!assert (union ([1; 2; 4], [2, 3, 5]), [1; 2; 3; 4; 5])
 %!assert (union ([1; 2; 4], [2; 3; 5]), [1; 2; 3; 4; 5])
 %!assert (union ([1, 2, 3], [5; 7; 9]), [1; 2; 3; 5; 7; 9])
+%!assert (union ([1 2; 2 3; 4 5], [2 3; 3 4; 5 6], "rows"),
+%!        [1 2; 2 3; 3 4; 4 5; 5 6])
 
 ## Test multi-dimensional arrays
 %!test
 %! a = rand (3,3,3);
 %! b = a;
 %! b(1,1,1) = 2;
 %! assert (union (a, b), sort ([a(1:end)'; 2]));
 
 %!test
 %! a = [3, 1, 4, 1, 5];
 %! b = [1, 2, 3, 4];
 %! [y, ia, ib] = union (a, b.');
 %! assert (y, [1; 2; 3; 4; 5]);
 %! assert (y, sort ([a(ia)'; b(ib)']));
 
+%!assert (nthargout (2:3, @union, [1, 2, 4], [2, 3, 5]), {[1, 3], [1, 2, 3]})
+%!assert (nthargout (2:3, @union, [1 2; 2 3; 4 5], [2 3; 3 4; 5 6], "rows"),
+%!        {[1; 3], [1; 2; 3]})
+
 ## Test empty cell string array unions
 %!assert (union ({}, []), cell (0,1))
 %!assert (union ([], {}), cell (0,1))
 %!assert (union ([], {'a', 'b'}), {'a';'b'})
 %!assert (union ({'a', 'b'}, []), {'a';'b'})
 %!assert (union (['a', 'b'], {}), {'ab'})
 %!assert (union ({}, ['a', 'b']), {'ab'})
 
