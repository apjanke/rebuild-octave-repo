# HG changeset patch
# User Jaroslav Hajek <highegg@gmail.com>
# Date 1259220487 -3600
#      Thu Nov 26 08:28:07 2009 +0100
# Node ID 72d6e0de76c7daae60d619555848efd467f202a9
# Parent  87595d71400529ce0f39881563c5ad5d445e6437
fix qp, condest and krylov

diff --git a/scripts/ChangeLog b/scripts/ChangeLog
--- a/scripts/ChangeLog
+++ b/scripts/ChangeLog
@@ -1,8 +1,14 @@
+2009-11-26  Jaroslav Hajek  <highegg@gmail.com>
+
+	* optimization/qp.m: Fix matrix tests.
+	* optimization/condest.m: Ditto.
+	* optimization/krylov.m: Ditto.
+
 2009-11-26  Jaroslav Hajek  <highegg@gmail.com>
 
 	* sparse/normest.m: Move to linear-algebra.
 	* linear-algebra/normest.m: Simplify. Don't form A'*A explicitly.
 
 2009-11-25  Jaroslav Hajek  <highegg@gmail.com>
 
 	* linear-algebra/isdefinite.m: Use Cholesky factorization.
diff --git a/scripts/linear-algebra/condest.m b/scripts/linear-algebra/condest.m
--- a/scripts/linear-algebra/condest.m
+++ b/scripts/linear-algebra/condest.m
@@ -112,20 +112,20 @@ function [est, v] = condest (varargin)
   default_t = 5;
 
   have_A = false;
   have_t = false;
   have_solve = false;
 
   if (ismatrix (varargin{1}))
     A = varargin{1};
-    n = issquare (A);
-    if (! n)
+    if (! issquare (A))
       error ("condest: matrix must be square");
     endif
+    n = rows (A);
     have_A = true;
 
     if (nargin > 1)
       if (isscalar (varargin{2}))
 	t = varargin{2};
 	have_t = true;
       elseif (nargin > 2)
 	solve = varargin{2};
diff --git a/scripts/linear-algebra/krylov.m b/scripts/linear-algebra/krylov.m
--- a/scripts/linear-algebra/krylov.m
+++ b/scripts/linear-algebra/krylov.m
@@ -76,20 +76,20 @@ function [Uret, H, nu] = krylov (A, V, k
     ## Default tolerance parameter.
     eps1 = defeps;
   endif
 
   if (isempty (eps1))
     eps1 = defeps;
   endif
 
-  na = issquare (A);
-  if (! na)
-    error ("A(%d x %d) must be square", rows (A), columns (A));
+  if (! issquare (A) || isempty (A))
+    error ("A(%d x %d) must be non-empty square matrix", rows (A), columns (A));
   endif
+  na = rows (A);
 
   [m, kb] = size (V);
   if (m != na)
     error("A(%d x %d), V(%d x %d): argument dimensions do not match",
 	  na, na, m, kb)
   endif
 
   if (! isscalar (k))
diff --git a/scripts/optimization/qp.m b/scripts/optimization/qp.m
--- a/scripts/optimization/qp.m
+++ b/scripts/optimization/qp.m
@@ -80,26 +80,23 @@
 ## @end table
 ## @end deftypefn
 
 function [x, obj, INFO, lambda] = qp (x0, H, q, A, b, lb, ub, A_lb, A_in, A_ub)
 
   if (nargin == 5 || nargin == 7 || nargin == 10)
 
     ## Checking the quadratic penalty
-    n = issquare (H);
-    if (n == 0)
+    if (! issquare (H))
       error ("qp: quadratic penalty matrix not square");
-    endif
-
-    n1 = issymmetric (H);
-    if (n1 == 0)
-      ## warning ("qp: quadratic penalty matrix not symmetric");
+    elseif (! ishermitian (H))
+      ## warning ("qp: quadratic penalty matrix not hermitian");
       H = (H + H')/2;
     endif
+    n = rows (H);
 
     ## Checking the initial guess (if empty it is resized to the
     ## right dimension and filled with 0)
     if (isempty (x0))
       x0 = zeros (n, 1);
     elseif (length (x0) != n)
       error ("qp: the initial guess has incorrect length");
     endif
